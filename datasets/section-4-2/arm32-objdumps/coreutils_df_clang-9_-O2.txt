
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000114c4 <.init>:
   114c4:	push	{r3, lr}
   114c8:	bl	1193c <__assert_fail@plt+0x50>
   114cc:	pop	{r3, pc}

Disassembly of section .plt:

000114d0 <calloc@plt-0x14>:
   114d0:	push	{lr}		; (str lr, [sp, #-4]!)
   114d4:	ldr	lr, [pc, #4]	; 114e0 <calloc@plt-0x4>
   114d8:	add	lr, pc, lr
   114dc:	ldr	pc, [lr, #8]!
   114e0:	andeq	pc, r1, r0, lsr #22

000114e4 <calloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #126976	; 0x1f000
   114ec:	ldr	pc, [ip, #2848]!	; 0xb20

000114f0 <fputs_unlocked@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #126976	; 0x1f000
   114f8:	ldr	pc, [ip, #2840]!	; 0xb18

000114fc <raise@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #126976	; 0x1f000
   11504:	ldr	pc, [ip, #2832]!	; 0xb10

00011508 <strverscmp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #126976	; 0x1f000
   11510:	ldr	pc, [ip, #2824]!	; 0xb08

00011514 <__getdelim@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #126976	; 0x1f000
   1151c:	ldr	pc, [ip, #2816]!	; 0xb00

00011520 <strcmp@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #126976	; 0x1f000
   11528:	ldr	pc, [ip, #2808]!	; 0xaf8

0001152c <fflush@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #126976	; 0x1f000
   11534:	ldr	pc, [ip, #2800]!	; 0xaf0

00011538 <wcwidth@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #126976	; 0x1f000
   11540:	ldr	pc, [ip, #2792]!	; 0xae8

00011544 <memmove@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #126976	; 0x1f000
   1154c:	ldr	pc, [ip, #2784]!	; 0xae0

00011550 <free@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #126976	; 0x1f000
   11558:	ldr	pc, [ip, #2776]!	; 0xad8

0001155c <faccessat@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #126976	; 0x1f000
   11564:	ldr	pc, [ip, #2768]!	; 0xad0

00011568 <_exit@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #126976	; 0x1f000
   11570:	ldr	pc, [ip, #2760]!	; 0xac8

00011574 <memcpy@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #126976	; 0x1f000
   1157c:	ldr	pc, [ip, #2752]!	; 0xac0

00011580 <__strtoull_internal@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #126976	; 0x1f000
   11588:	ldr	pc, [ip, #2744]!	; 0xab8

0001158c <mbsinit@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #126976	; 0x1f000
   11594:	ldr	pc, [ip, #2736]!	; 0xab0

00011598 <uname@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #126976	; 0x1f000
   115a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000115a4 <dcgettext@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #126976	; 0x1f000
   115ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000115b0 <strdup@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #126976	; 0x1f000
   115b8:	ldr	pc, [ip, #2712]!	; 0xa98

000115bc <realloc@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #126976	; 0x1f000
   115c4:	ldr	pc, [ip, #2704]!	; 0xa90

000115c8 <textdomain@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #126976	; 0x1f000
   115d0:	ldr	pc, [ip, #2696]!	; 0xa88

000115d4 <iswcntrl@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #126976	; 0x1f000
   115dc:	ldr	pc, [ip, #2688]!	; 0xa80

000115e0 <rawmemchr@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #126976	; 0x1f000
   115e8:	ldr	pc, [ip, #2680]!	; 0xa78

000115ec <chdir@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #126976	; 0x1f000
   115f4:	ldr	pc, [ip, #2672]!	; 0xa70

000115f8 <iswprint@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #126976	; 0x1f000
   11600:	ldr	pc, [ip, #2664]!	; 0xa68

00011604 <__fxstat64@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #126976	; 0x1f000
   1160c:	ldr	pc, [ip, #2656]!	; 0xa60

00011610 <readlink@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #126976	; 0x1f000
   11618:	ldr	pc, [ip, #2648]!	; 0xa58

0001161c <fwrite@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #126976	; 0x1f000
   11624:	ldr	pc, [ip, #2640]!	; 0xa50

00011628 <lseek64@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #126976	; 0x1f000
   11630:	ldr	pc, [ip, #2632]!	; 0xa48

00011634 <__ctype_get_mb_cur_max@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #126976	; 0x1f000
   1163c:	ldr	pc, [ip, #2624]!	; 0xa40

00011640 <hasmntopt@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #126976	; 0x1f000
   11648:	ldr	pc, [ip, #2616]!	; 0xa38

0001164c <__fpending@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #126976	; 0x1f000
   11654:	ldr	pc, [ip, #2608]!	; 0xa30

00011658 <mbrtowc@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #126976	; 0x1f000
   11660:	ldr	pc, [ip, #2600]!	; 0xa28

00011664 <wcstombs@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #126976	; 0x1f000
   1166c:	ldr	pc, [ip, #2592]!	; 0xa20

00011670 <error@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #126976	; 0x1f000
   11678:	ldr	pc, [ip, #2584]!	; 0xa18

0001167c <getmntent@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #126976	; 0x1f000
   11684:	ldr	pc, [ip, #2576]!	; 0xa10

00011688 <open64@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #126976	; 0x1f000
   11690:	ldr	pc, [ip, #2568]!	; 0xa08

00011694 <__asprintf_chk@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #126976	; 0x1f000
   1169c:	ldr	pc, [ip, #2560]!	; 0xa00

000116a0 <getenv@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #126976	; 0x1f000
   116a8:	ldr	pc, [ip, #2552]!	; 0x9f8

000116ac <malloc@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #126976	; 0x1f000
   116b4:	ldr	pc, [ip, #2544]!	; 0x9f0

000116b8 <__libc_start_main@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #126976	; 0x1f000
   116c0:	ldr	pc, [ip, #2536]!	; 0x9e8

000116c4 <__freading@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #126976	; 0x1f000
   116cc:	ldr	pc, [ip, #2528]!	; 0x9e0

000116d0 <__gmon_start__@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #126976	; 0x1f000
   116d8:	ldr	pc, [ip, #2520]!	; 0x9d8

000116dc <getopt_long@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #126976	; 0x1f000
   116e4:	ldr	pc, [ip, #2512]!	; 0x9d0

000116e8 <__ctype_b_loc@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #126976	; 0x1f000
   116f0:	ldr	pc, [ip, #2504]!	; 0x9c8

000116f4 <getcwd@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #126976	; 0x1f000
   116fc:	ldr	pc, [ip, #2496]!	; 0x9c0

00011700 <exit@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #126976	; 0x1f000
   11708:	ldr	pc, [ip, #2488]!	; 0x9b8

0001170c <bcmp@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #126976	; 0x1f000
   11714:	ldr	pc, [ip, #2480]!	; 0x9b0

00011718 <strlen@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #126976	; 0x1f000
   11720:	ldr	pc, [ip, #2472]!	; 0x9a8

00011724 <strchr@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #126976	; 0x1f000
   1172c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011730 <openat64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #126976	; 0x1f000
   11738:	ldr	pc, [ip, #2456]!	; 0x998

0001173c <memrchr@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #126976	; 0x1f000
   11744:	ldr	pc, [ip, #2448]!	; 0x990

00011748 <__errno_location@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #126976	; 0x1f000
   11750:	ldr	pc, [ip, #2440]!	; 0x988

00011754 <__sprintf_chk@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #126976	; 0x1f000
   1175c:	ldr	pc, [ip, #2432]!	; 0x980

00011760 <__cxa_atexit@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #126976	; 0x1f000
   11768:	ldr	pc, [ip, #2424]!	; 0x978

0001176c <memset@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #126976	; 0x1f000
   11774:	ldr	pc, [ip, #2416]!	; 0x970

00011778 <__printf_chk@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #126976	; 0x1f000
   11780:	ldr	pc, [ip, #2408]!	; 0x968

00011784 <statvfs64@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #126976	; 0x1f000
   1178c:	ldr	pc, [ip, #2400]!	; 0x960

00011790 <fileno@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #126976	; 0x1f000
   11798:	ldr	pc, [ip, #2392]!	; 0x958

0001179c <__fprintf_chk@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #126976	; 0x1f000
   117a4:	ldr	pc, [ip, #2384]!	; 0x950

000117a8 <memchr@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #126976	; 0x1f000
   117b0:	ldr	pc, [ip, #2376]!	; 0x948

000117b4 <fclose@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #126976	; 0x1f000
   117bc:	ldr	pc, [ip, #2368]!	; 0x940

000117c0 <fseeko64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #126976	; 0x1f000
   117c8:	ldr	pc, [ip, #2360]!	; 0x938

000117cc <endmntent@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #126976	; 0x1f000
   117d4:	ldr	pc, [ip, #2352]!	; 0x930

000117d8 <fcntl64@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #126976	; 0x1f000
   117e0:	ldr	pc, [ip, #2344]!	; 0x928

000117e4 <__overflow@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #126976	; 0x1f000
   117ec:	ldr	pc, [ip, #2336]!	; 0x920

000117f0 <setlocale@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #126976	; 0x1f000
   117f8:	ldr	pc, [ip, #2328]!	; 0x918

000117fc <wcswidth@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #126976	; 0x1f000
   11804:	ldr	pc, [ip, #2320]!	; 0x910

00011808 <strrchr@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #126976	; 0x1f000
   11810:	ldr	pc, [ip, #2312]!	; 0x908

00011814 <statfs64@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #126976	; 0x1f000
   1181c:	ldr	pc, [ip, #2304]!	; 0x900

00011820 <nl_langinfo@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #126976	; 0x1f000
   11828:	ldr	pc, [ip, #2296]!	; 0x8f8

0001182c <sscanf@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #126976	; 0x1f000
   11834:	ldr	pc, [ip, #2288]!	; 0x8f0

00011838 <localeconv@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #126976	; 0x1f000
   11840:	ldr	pc, [ip, #2280]!	; 0x8e8

00011844 <mbstowcs@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #126976	; 0x1f000
   1184c:	ldr	pc, [ip, #2272]!	; 0x8e0

00011850 <fchdir@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #126976	; 0x1f000
   11858:	ldr	pc, [ip, #2264]!	; 0x8d8

0001185c <canonicalize_file_name@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #126976	; 0x1f000
   11864:	ldr	pc, [ip, #2256]!	; 0x8d0

00011868 <fopen64@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #126976	; 0x1f000
   11870:	ldr	pc, [ip, #2248]!	; 0x8c8

00011874 <setmntent@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #126976	; 0x1f000
   1187c:	ldr	pc, [ip, #2240]!	; 0x8c0

00011880 <bindtextdomain@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #126976	; 0x1f000
   11888:	ldr	pc, [ip, #2232]!	; 0x8b8

0001188c <sync@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #126976	; 0x1f000
   11894:	ldr	pc, [ip, #2224]!	; 0x8b0

00011898 <__xstat64@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #126976	; 0x1f000
   118a0:	ldr	pc, [ip, #2216]!	; 0x8a8

000118a4 <isatty@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #126976	; 0x1f000
   118ac:	ldr	pc, [ip, #2208]!	; 0x8a0

000118b0 <strncmp@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #126976	; 0x1f000
   118b8:	ldr	pc, [ip, #2200]!	; 0x898

000118bc <abort@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #126976	; 0x1f000
   118c4:	ldr	pc, [ip, #2192]!	; 0x890

000118c8 <close@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #126976	; 0x1f000
   118d0:	ldr	pc, [ip, #2184]!	; 0x888

000118d4 <strspn@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #126976	; 0x1f000
   118dc:	ldr	pc, [ip, #2176]!	; 0x880

000118e0 <__mempcpy_chk@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #126976	; 0x1f000
   118e8:	ldr	pc, [ip, #2168]!	; 0x878

000118ec <__assert_fail@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #126976	; 0x1f000
   118f4:	ldr	pc, [ip, #2160]!	; 0x870

Disassembly of section .text:

00011900 <.text>:
   11900:	mov	fp, #0
   11904:	mov	lr, #0
   11908:	pop	{r1}		; (ldr r1, [sp], #4)
   1190c:	mov	r2, sp
   11910:	push	{r2}		; (str r2, [sp, #-4]!)
   11914:	push	{r0}		; (str r0, [sp, #-4]!)
   11918:	ldr	ip, [pc, #16]	; 11930 <__assert_fail@plt+0x44>
   1191c:	push	{ip}		; (str ip, [sp, #-4]!)
   11920:	ldr	r0, [pc, #12]	; 11934 <__assert_fail@plt+0x48>
   11924:	ldr	r3, [pc, #12]	; 11938 <__assert_fail@plt+0x4c>
   11928:	bl	116b8 <__libc_start_main@plt>
   1192c:	bl	118bc <abort@plt>
   11930:	andeq	pc, r1, r8, lsl r2	; <UNPREDICTABLE>
   11934:	andeq	r1, r1, ip, lsr sp
   11938:			; <UNDEFINED> instruction: 0x0001f1b8
   1193c:	ldr	r3, [pc, #20]	; 11958 <__assert_fail@plt+0x6c>
   11940:	ldr	r2, [pc, #20]	; 1195c <__assert_fail@plt+0x70>
   11944:	add	r3, pc, r3
   11948:	ldr	r2, [r3, r2]
   1194c:	cmp	r2, #0
   11950:	bxeq	lr
   11954:	b	116d0 <__gmon_start__@plt>
   11958:			; <UNDEFINED> instruction: 0x0001f6b4
   1195c:	andeq	r0, r0, r8, ror #2
   11960:	ldr	r0, [pc, #24]	; 11980 <__assert_fail@plt+0x94>
   11964:	ldr	r3, [pc, #24]	; 11984 <__assert_fail@plt+0x98>
   11968:	cmp	r3, r0
   1196c:	bxeq	lr
   11970:	ldr	r3, [pc, #16]	; 11988 <__assert_fail@plt+0x9c>
   11974:	cmp	r3, #0
   11978:	bxeq	lr
   1197c:	bx	r3
   11980:	andeq	r1, r3, ip, lsl r3
   11984:	andeq	r1, r3, ip, lsl r3
   11988:	andeq	r0, r0, r0
   1198c:	ldr	r0, [pc, #36]	; 119b8 <__assert_fail@plt+0xcc>
   11990:	ldr	r1, [pc, #36]	; 119bc <__assert_fail@plt+0xd0>
   11994:	sub	r1, r1, r0
   11998:	asr	r1, r1, #2
   1199c:	add	r1, r1, r1, lsr #31
   119a0:	asrs	r1, r1, #1
   119a4:	bxeq	lr
   119a8:	ldr	r3, [pc, #16]	; 119c0 <__assert_fail@plt+0xd4>
   119ac:	cmp	r3, #0
   119b0:	bxeq	lr
   119b4:	bx	r3
   119b8:	andeq	r1, r3, ip, lsl r3
   119bc:	andeq	r1, r3, ip, lsl r3
   119c0:	andeq	r0, r0, r0
   119c4:	push	{r4, lr}
   119c8:	ldr	r4, [pc, #24]	; 119e8 <__assert_fail@plt+0xfc>
   119cc:	ldrb	r3, [r4]
   119d0:	cmp	r3, #0
   119d4:	popne	{r4, pc}
   119d8:	bl	11960 <__assert_fail@plt+0x74>
   119dc:	mov	r3, #1
   119e0:	strb	r3, [r4]
   119e4:	pop	{r4, pc}
   119e8:	andeq	r1, r3, ip, lsr r3
   119ec:	b	1198c <__assert_fail@plt+0xa0>
   119f0:	push	{fp, lr}
   119f4:	mov	fp, sp
   119f8:	sub	sp, sp, #56	; 0x38
   119fc:	mov	r4, r0
   11a00:	cmp	r0, #0
   11a04:	bne	11cf8 <__assert_fail@plt+0x40c>
   11a08:	movw	r1, #62059	; 0xf26b
   11a0c:	mov	r0, #0
   11a10:	mov	r2, #5
   11a14:	movt	r1, #1
   11a18:	bl	115a4 <dcgettext@plt>
   11a1c:	mov	r1, r0
   11a20:	movw	r0, #5056	; 0x13c0
   11a24:	movt	r0, #3
   11a28:	ldr	r2, [r0]
   11a2c:	mov	r0, #1
   11a30:	bl	11778 <__printf_chk@plt>
   11a34:	movw	r1, #62092	; 0xf28c
   11a38:	mov	r0, #0
   11a3c:	mov	r2, #5
   11a40:	movt	r1, #1
   11a44:	bl	115a4 <dcgettext@plt>
   11a48:	movw	r7, #4916	; 0x1334
   11a4c:	movt	r7, #3
   11a50:	ldr	r1, [r7]
   11a54:	bl	114f0 <fputs_unlocked@plt>
   11a58:	movw	r1, #64123	; 0xfa7b
   11a5c:	mov	r0, #0
   11a60:	mov	r2, #5
   11a64:	movt	r1, #1
   11a68:	bl	115a4 <dcgettext@plt>
   11a6c:	ldr	r1, [r7]
   11a70:	bl	114f0 <fputs_unlocked@plt>
   11a74:	movw	r1, #62192	; 0xf2f0
   11a78:	mov	r0, #0
   11a7c:	mov	r2, #5
   11a80:	movt	r1, #1
   11a84:	bl	115a4 <dcgettext@plt>
   11a88:	ldr	r1, [r7]
   11a8c:	bl	114f0 <fputs_unlocked@plt>
   11a90:	movw	r1, #62602	; 0xf48a
   11a94:	mov	r0, #0
   11a98:	mov	r2, #5
   11a9c:	movt	r1, #1
   11aa0:	bl	115a4 <dcgettext@plt>
   11aa4:	ldr	r1, [r7]
   11aa8:	bl	114f0 <fputs_unlocked@plt>
   11aac:	movw	r1, #62857	; 0xf589
   11ab0:	mov	r0, #0
   11ab4:	mov	r2, #5
   11ab8:	movt	r1, #1
   11abc:	bl	115a4 <dcgettext@plt>
   11ac0:	ldr	r1, [r7]
   11ac4:	bl	114f0 <fputs_unlocked@plt>
   11ac8:	movw	r1, #63123	; 0xf693
   11acc:	mov	r0, #0
   11ad0:	mov	r2, #5
   11ad4:	movt	r1, #1
   11ad8:	bl	115a4 <dcgettext@plt>
   11adc:	ldr	r1, [r7]
   11ae0:	bl	114f0 <fputs_unlocked@plt>
   11ae4:	movw	r1, #63252	; 0xf714
   11ae8:	mov	r0, #0
   11aec:	mov	r2, #5
   11af0:	movt	r1, #1
   11af4:	bl	115a4 <dcgettext@plt>
   11af8:	ldr	r1, [r7]
   11afc:	bl	114f0 <fputs_unlocked@plt>
   11b00:	movw	r1, #63476	; 0xf7f4
   11b04:	mov	r0, #0
   11b08:	mov	r2, #5
   11b0c:	movt	r1, #1
   11b10:	bl	115a4 <dcgettext@plt>
   11b14:	ldr	r1, [r7]
   11b18:	bl	114f0 <fputs_unlocked@plt>
   11b1c:	movw	r1, #63521	; 0xf821
   11b20:	mov	r0, #0
   11b24:	mov	r2, #5
   11b28:	movt	r1, #1
   11b2c:	bl	115a4 <dcgettext@plt>
   11b30:	ldr	r1, [r7]
   11b34:	bl	114f0 <fputs_unlocked@plt>
   11b38:	movw	r1, #64198	; 0xfac6
   11b3c:	mov	r0, #0
   11b40:	mov	r2, #5
   11b44:	movt	r1, #1
   11b48:	bl	115a4 <dcgettext@plt>
   11b4c:	movw	r2, #63575	; 0xf857
   11b50:	mov	r1, r0
   11b54:	mov	r0, #1
   11b58:	movt	r2, #1
   11b5c:	bl	11778 <__printf_chk@plt>
   11b60:	movw	r1, #64421	; 0xfba5
   11b64:	mov	r0, #0
   11b68:	mov	r2, #5
   11b6c:	movt	r1, #1
   11b70:	bl	115a4 <dcgettext@plt>
   11b74:	ldr	r1, [r7]
   11b78:	bl	114f0 <fputs_unlocked@plt>
   11b7c:	movw	r1, #63578	; 0xf85a
   11b80:	mov	r0, #0
   11b84:	mov	r2, #5
   11b88:	movt	r1, #1
   11b8c:	bl	115a4 <dcgettext@plt>
   11b90:	ldr	r1, [r7]
   11b94:	bl	114f0 <fputs_unlocked@plt>
   11b98:	movw	r0, #504	; 0x1f8
   11b9c:	mov	r2, #48	; 0x30
   11ba0:	mov	r6, sp
   11ba4:	movw	r5, #63798	; 0xf936
   11ba8:	movt	r0, #2
   11bac:	movt	r5, #1
   11bb0:	add	r1, r0, #32
   11bb4:	add	r3, r0, #16
   11bb8:	vld1.64	{d18-d19}, [r0], r2
   11bbc:	vld1.64	{d16-d17}, [r1]
   11bc0:	vld1.64	{d20-d21}, [r3]
   11bc4:	vldr	d22, [r0]
   11bc8:	add	r1, r6, #32
   11bcc:	add	r0, r6, #16
   11bd0:	vst1.64	{d16-d17}, [r1]
   11bd4:	movw	r1, #64633	; 0xfc79
   11bd8:	vst1.64	{d20-d21}, [r0]
   11bdc:	mov	r0, r6
   11be0:	movt	r1, #1
   11be4:	vst1.64	{d18-d19}, [r0], r2
   11be8:	vstr	d22, [r0]
   11bec:	mov	r0, r5
   11bf0:	bl	11520 <strcmp@plt>
   11bf4:	cmp	r0, #0
   11bf8:	ldrne	r1, [r6, #8]!
   11bfc:	cmpne	r1, #0
   11c00:	bne	11bec <__assert_fail@plt+0x300>
   11c04:	movw	r1, #64728	; 0xfcd8
   11c08:	ldr	r6, [r6, #4]
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	movt	r1, #1
   11c18:	bl	115a4 <dcgettext@plt>
   11c1c:	movw	r2, #63903	; 0xf99f
   11c20:	movw	r3, #64751	; 0xfcef
   11c24:	mov	r1, r0
   11c28:	mov	r0, #1
   11c2c:	movt	r2, #1
   11c30:	movt	r3, #1
   11c34:	bl	11778 <__printf_chk@plt>
   11c38:	cmp	r6, #0
   11c3c:	mov	r0, #5
   11c40:	mov	r1, #0
   11c44:	moveq	r6, r5
   11c48:	bl	117f0 <setlocale@plt>
   11c4c:	cmp	r0, #0
   11c50:	beq	11c88 <__assert_fail@plt+0x39c>
   11c54:	movw	r1, #64791	; 0xfd17
   11c58:	mov	r2, #3
   11c5c:	movt	r1, #1
   11c60:	bl	118b0 <strncmp@plt>
   11c64:	cmp	r0, #0
   11c68:	beq	11c88 <__assert_fail@plt+0x39c>
   11c6c:	movw	r1, #64795	; 0xfd1b
   11c70:	mov	r0, #0
   11c74:	mov	r2, #5
   11c78:	movt	r1, #1
   11c7c:	bl	115a4 <dcgettext@plt>
   11c80:	ldr	r1, [r7]
   11c84:	bl	114f0 <fputs_unlocked@plt>
   11c88:	movw	r1, #64866	; 0xfd62
   11c8c:	mov	r0, #0
   11c90:	mov	r2, #5
   11c94:	movt	r1, #1
   11c98:	bl	115a4 <dcgettext@plt>
   11c9c:	movw	r2, #64751	; 0xfcef
   11ca0:	mov	r1, r0
   11ca4:	mov	r0, #1
   11ca8:	mov	r3, r5
   11cac:	movt	r2, #1
   11cb0:	bl	11778 <__printf_chk@plt>
   11cb4:	movw	r1, #64893	; 0xfd7d
   11cb8:	mov	r0, #0
   11cbc:	mov	r2, #5
   11cc0:	movt	r1, #1
   11cc4:	bl	115a4 <dcgettext@plt>
   11cc8:	mov	r1, r0
   11ccc:	movw	r0, #64661	; 0xfc95
   11cd0:	movw	r3, #64943	; 0xfdaf
   11cd4:	cmp	r6, r5
   11cd8:	mov	r2, r6
   11cdc:	movt	r0, #1
   11ce0:	movt	r3, #1
   11ce4:	moveq	r3, r0
   11ce8:	mov	r0, #1
   11cec:	bl	11778 <__printf_chk@plt>
   11cf0:	mov	r0, r4
   11cf4:	bl	11700 <exit@plt>
   11cf8:	movw	r0, #4912	; 0x1330
   11cfc:	movw	r1, #62020	; 0xf244
   11d00:	mov	r2, #5
   11d04:	movt	r0, #3
   11d08:	movt	r1, #1
   11d0c:	ldr	r5, [r0]
   11d10:	mov	r0, #0
   11d14:	bl	115a4 <dcgettext@plt>
   11d18:	mov	r2, r0
   11d1c:	movw	r0, #5056	; 0x13c0
   11d20:	mov	r1, #1
   11d24:	movt	r0, #3
   11d28:	ldr	r3, [r0]
   11d2c:	mov	r0, r5
   11d30:	bl	1179c <__fprintf_chk@plt>
   11d34:	mov	r0, r4
   11d38:	bl	11700 <exit@plt>
   11d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d40:	add	fp, sp, #28
   11d44:	sub	sp, sp, #748	; 0x2ec
   11d48:	mov	r5, r0
   11d4c:	ldr	r0, [r1]
   11d50:	mov	r4, r1
   11d54:	bl	1974c <__assert_fail@plt+0x7e60>
   11d58:	movw	r1, #64943	; 0xfdaf
   11d5c:	mov	r0, #6
   11d60:	movt	r1, #1
   11d64:	bl	117f0 <setlocale@plt>
   11d68:	movw	r6, #63907	; 0xf9a3
   11d6c:	movw	r1, #63801	; 0xf939
   11d70:	movt	r6, #1
   11d74:	movt	r1, #1
   11d78:	mov	r0, r6
   11d7c:	bl	11880 <bindtextdomain@plt>
   11d80:	mov	r0, r6
   11d84:	bl	115c8 <textdomain@plt>
   11d88:	movw	r0, #23960	; 0x5d98
   11d8c:	movt	r0, #1
   11d90:	bl	1f21c <__assert_fail@plt+0xd930>
   11d94:	movw	r0, #4952	; 0x1358
   11d98:	mov	r1, #1
   11d9c:	mov	r6, #0
   11da0:	movw	r8, #4940	; 0x134c
   11da4:	mov	r2, #5
   11da8:	movt	r0, #3
   11dac:	movt	r8, #3
   11db0:	stm	r0, {r1, r6}
   11db4:	movw	r0, #4928	; 0x1340
   11db8:	movw	r1, #63825	; 0xf951
   11dbc:	movt	r0, #3
   11dc0:	movt	r1, #1
   11dc4:	str	r6, [r0]
   11dc8:	movw	r0, #4932	; 0x1344
   11dcc:	movt	r0, #3
   11dd0:	str	r6, [r0]
   11dd4:	movw	r0, #4936	; 0x1348
   11dd8:	movt	r0, #3
   11ddc:	strb	r6, [r0]
   11de0:	movw	r0, #4937	; 0x1349
   11de4:	movt	r0, #3
   11de8:	strb	r6, [r0]
   11dec:	mvn	r0, #0
   11df0:	str	r0, [r8]
   11df4:	movw	r0, #4944	; 0x1350
   11df8:	movt	r0, #3
   11dfc:	strb	r6, [r0]
   11e00:	movw	r0, #4945	; 0x1351
   11e04:	movt	r0, #3
   11e08:	strb	r6, [r0]
   11e0c:	movw	r0, #4948	; 0x1354
   11e10:	movt	r0, #3
   11e14:	strb	r6, [r0]
   11e18:	movw	r0, #4949	; 0x1355
   11e1c:	movt	r0, #3
   11e20:	strb	r6, [r0]
   11e24:	mov	r0, #0
   11e28:	bl	115a4 <dcgettext@plt>
   11e2c:	movw	r9, #63866	; 0xf97a
   11e30:	movw	sl, #232	; 0xe8
   11e34:	movw	r7, #5016	; 0x1398
   11e38:	str	r0, [sp, #56]	; 0x38
   11e3c:	mov	r0, #0
   11e40:	str	r4, [sp, #36]	; 0x24
   11e44:	str	r5, [sp, #40]	; 0x28
   11e48:	movt	r9, #1
   11e4c:	movt	sl, #2
   11e50:	movt	r7, #3
   11e54:	str	r0, [sp, #60]	; 0x3c
   11e58:	b	11e6c <__assert_fail@plt+0x580>
   11e5c:	movw	r0, #4949	; 0x1355
   11e60:	movt	r0, #3
   11e64:	mov	r1, #1
   11e68:	strb	r1, [r0]
   11e6c:	mvn	r0, #0
   11e70:	mov	r1, r4
   11e74:	mov	r2, r9
   11e78:	mov	r3, sl
   11e7c:	str	r0, [sp, #64]	; 0x40
   11e80:	add	r0, sp, #64	; 0x40
   11e84:	str	r0, [sp]
   11e88:	mov	r0, r5
   11e8c:	bl	116dc <getopt_long@plt>
   11e90:	add	r1, r0, #3
   11e94:	cmp	r1, #123	; 0x7b
   11e98:	bhi	120cc <__assert_fail@plt+0x7e0>
   11e9c:	add	r0, pc, #0
   11ea0:	ldr	pc, [r0, r1, lsl #2]
   11ea4:	andeq	r3, r1, ip, lsr #26
   11ea8:	andeq	r3, r1, r8, lsl #27
   11eac:	andeq	r2, r1, ip, lsl #5
   11eb0:	andeq	r3, r1, r0, lsr #26
   11eb4:	andeq	r3, r1, r0, lsr #26
   11eb8:	andeq	r3, r1, r0, lsr #26
   11ebc:	andeq	r3, r1, r0, lsr #26
   11ec0:	andeq	r3, r1, r0, lsr #26
   11ec4:	andeq	r3, r1, r0, lsr #26
   11ec8:	andeq	r3, r1, r0, lsr #26
   11ecc:	andeq	r3, r1, r0, lsr #26
   11ed0:	andeq	r3, r1, r0, lsr #26
   11ed4:	andeq	r3, r1, r0, lsr #26
   11ed8:	andeq	r3, r1, r0, lsr #26
   11edc:	andeq	r3, r1, r0, lsr #26
   11ee0:	andeq	r3, r1, r0, lsr #26
   11ee4:	andeq	r3, r1, r0, lsr #26
   11ee8:	andeq	r3, r1, r0, lsr #26
   11eec:	andeq	r3, r1, r0, lsr #26
   11ef0:	andeq	r3, r1, r0, lsr #26
   11ef4:	andeq	r3, r1, r0, lsr #26
   11ef8:	andeq	r3, r1, r0, lsr #26
   11efc:	andeq	r3, r1, r0, lsr #26
   11f00:	andeq	r3, r1, r0, lsr #26
   11f04:	andeq	r3, r1, r0, lsr #26
   11f08:	andeq	r3, r1, r0, lsr #26
   11f0c:	andeq	r3, r1, r0, lsr #26
   11f10:	andeq	r3, r1, r0, lsr #26
   11f14:	andeq	r3, r1, r0, lsr #26
   11f18:	andeq	r3, r1, r0, lsr #26
   11f1c:	andeq	r3, r1, r0, lsr #26
   11f20:	andeq	r3, r1, r0, lsr #26
   11f24:	andeq	r3, r1, r0, lsr #26
   11f28:	andeq	r3, r1, r0, lsr #26
   11f2c:	andeq	r3, r1, r0, lsr #26
   11f30:	andeq	r3, r1, r0, lsr #26
   11f34:	andeq	r3, r1, r0, lsr #26
   11f38:	andeq	r3, r1, r0, lsr #26
   11f3c:	andeq	r3, r1, r0, lsr #26
   11f40:	andeq	r3, r1, r0, lsr #26
   11f44:	andeq	r3, r1, r0, lsr #26
   11f48:	andeq	r3, r1, r0, lsr #26
   11f4c:	andeq	r3, r1, r0, lsr #26
   11f50:	andeq	r3, r1, r0, lsr #26
   11f54:	andeq	r3, r1, r0, lsr #26
   11f58:	andeq	r3, r1, r0, lsr #26
   11f5c:	andeq	r3, r1, r0, lsr #26
   11f60:	andeq	r3, r1, r0, lsr #26
   11f64:	andeq	r3, r1, r0, lsr #26
   11f68:	andeq	r3, r1, r0, lsr #26
   11f6c:	andeq	r3, r1, r0, lsr #26
   11f70:	andeq	r3, r1, r0, lsr #26
   11f74:	andeq	r3, r1, r0, lsr #26
   11f78:	andeq	r3, r1, r0, lsr #26
   11f7c:	andeq	r3, r1, r0, lsr #26
   11f80:	andeq	r3, r1, r0, lsr #26
   11f84:	andeq	r3, r1, r0, lsr #26
   11f88:	andeq	r3, r1, r0, lsr #26
   11f8c:	andeq	r3, r1, r0, lsr #26
   11f90:	andeq	r3, r1, r0, lsr #26
   11f94:	andeq	r3, r1, r0, lsr #26
   11f98:	andeq	r3, r1, r0, lsr #26
   11f9c:	andeq	r3, r1, r0, lsr #26
   11fa0:	andeq	r3, r1, r0, lsr #26
   11fa4:	andeq	r3, r1, r0, lsr #26
   11fa8:	andeq	r3, r1, r0, lsr #26
   11fac:	andeq	r3, r1, r0, lsr #26
   11fb0:	andeq	r3, r1, r0, lsr #26
   11fb4:	andeq	r3, r1, r0, lsr #26
   11fb8:	strdeq	r2, [r1], -r4
   11fbc:	andeq	r3, r1, r0, lsr #26
   11fc0:	andeq	r3, r1, r0, lsr #26
   11fc4:	andeq	r3, r1, r0, lsr #26
   11fc8:	muleq	r1, r4, r0
   11fcc:	andeq	r3, r1, r0, lsr #26
   11fd0:	andeq	r2, r1, r8, asr #2
   11fd4:	andeq	r3, r1, r0, lsr #26
   11fd8:	andeq	r3, r1, r0, lsr #26
   11fdc:	andeq	r3, r1, r0, lsr #26
   11fe0:	andeq	r3, r1, r0, lsr #26
   11fe4:	andeq	r3, r1, r0, lsr #26
   11fe8:	andeq	r3, r1, r0, lsr #26
   11fec:	andeq	r3, r1, r0, lsr #26
   11ff0:	andeq	r2, r1, r0, asr #4
   11ff4:	andeq	r3, r1, r0, lsr #26
   11ff8:	andeq	r3, r1, r0, lsr #26
   11ffc:	andeq	r3, r1, r0, lsr #26
   12000:	andeq	r2, r1, r4, asr #3
   12004:	andeq	r3, r1, r0, lsr #26
   12008:	andeq	r3, r1, r0, lsr #26
   1200c:	andeq	r3, r1, r0, lsr #26
   12010:	andeq	r3, r1, r0, lsr #26
   12014:	andeq	r3, r1, r0, lsr #26
   12018:	andeq	r3, r1, r0, lsr #26
   1201c:	andeq	r3, r1, r0, lsr #26
   12020:	andeq	r3, r1, r0, lsr #26
   12024:	andeq	r3, r1, r0, lsr #26
   12028:	andeq	r3, r1, r0, lsr #26
   1202c:	andeq	r3, r1, r0, lsr #26
   12030:	andeq	r3, r1, r0, lsr #26
   12034:	ldrdeq	r2, [r1], -ip
   12038:	andeq	r3, r1, r0, lsr #26
   1203c:	andeq	r3, r1, r0, lsr #26
   12040:	andeq	r3, r1, r0, lsr #26
   12044:	andeq	r3, r1, r0, lsr #26
   12048:	andeq	r3, r1, r0, lsr #26
   1204c:	andeq	r3, r1, r0, lsr #26
   12050:	andeq	r2, r1, r8, asr r2
   12054:	andeq	r2, r1, ip, lsl r2
   12058:	andeq	r3, r1, r0, lsr #26
   1205c:	andeq	r2, r1, r0, lsl #2
   12060:	andeq	r2, r1, r4, lsr r2
   12064:	andeq	r2, r1, r4, ror r2
   12068:	andeq	r3, r1, r0, lsr #26
   1206c:	andeq	r3, r1, r0, lsr #26
   12070:	andeq	r3, r1, r0, lsr #26
   12074:	andeq	r3, r1, r0, lsr #26
   12078:	andeq	r3, r1, r0, lsr #26
   1207c:	andeq	r3, r1, r0, lsr #26
   12080:	muleq	r1, r4, r0
   12084:	andeq	r3, r1, r0, lsr #26
   12088:	andeq	r1, r1, ip, ror #28
   1208c:	andeq	r3, r1, r0, lsr #26
   12090:	andeq	r2, r1, ip, lsl #2
   12094:	movw	r0, #4920	; 0x1338
   12098:	mov	r4, r8
   1209c:	movt	r0, #3
   120a0:	ldr	r8, [r0]
   120a4:	mov	r0, #8
   120a8:	bl	1bdc8 <__assert_fail@plt+0xa4dc>
   120ac:	movw	r1, #4928	; 0x1340
   120b0:	str	r8, [r0]
   120b4:	mov	r8, r4
   120b8:	ldr	r5, [sp, #40]	; 0x28
   120bc:	ldr	r4, [sp, #36]	; 0x24
   120c0:	mov	r6, #0
   120c4:	movt	r1, #3
   120c8:	b	12134 <__assert_fail@plt+0x848>
   120cc:	sub	r0, r0, #256	; 0x100
   120d0:	cmp	r0, #3
   120d4:	bhi	13d20 <__assert_fail@plt+0x2434>
   120d8:	add	r1, pc, #0
   120dc:	ldr	pc, [r1, r0, lsl #2]
   120e0:	strdeq	r2, [r1], -r0
   120e4:	andeq	r2, r1, r8, ror #3
   120e8:	andeq	r1, r1, ip, asr lr
   120ec:	andeq	r2, r1, r4, ror #2
   120f0:	movw	r0, #5021	; 0x139d
   120f4:	movt	r0, #3
   120f8:	strb	r6, [r0]
   120fc:	b	11e6c <__assert_fail@plt+0x580>
   12100:	movw	r0, #5008	; 0x1390
   12104:	mov	r1, #1024	; 0x400
   12108:	b	1227c <__assert_fail@plt+0x990>
   1210c:	movw	r0, #4920	; 0x1338
   12110:	movt	r0, #3
   12114:	ldr	r7, [r0]
   12118:	mov	r0, #8
   1211c:	bl	1bdc8 <__assert_fail@plt+0xa4dc>
   12120:	movw	r1, #4932	; 0x1344
   12124:	str	r7, [r0]
   12128:	movw	r7, #5016	; 0x1398
   1212c:	movt	r1, #3
   12130:	movt	r7, #3
   12134:	mov	r2, r1
   12138:	ldr	r1, [r1]
   1213c:	str	r1, [r0, #4]
   12140:	str	r0, [r2]
   12144:	b	11e6c <__assert_fail@plt+0x580>
   12148:	movw	r0, #5008	; 0x1390
   1214c:	mov	r1, #1
   12150:	movt	r0, #3
   12154:	stm	r0, {r1, r6}
   12158:	mov	r0, #144	; 0x90
   1215c:	str	r0, [r8]
   12160:	b	11e6c <__assert_fail@plt+0x580>
   12164:	ldr	r0, [r7]
   12168:	cmp	r0, #1
   1216c:	beq	13dc4 <__assert_fail@plt+0x24d8>
   12170:	ldr	r1, [sp, #60]	; 0x3c
   12174:	cmp	r0, #0
   12178:	movwne	r0, #1
   1217c:	mvn	r1, r1
   12180:	orr	r0, r1, r0
   12184:	tst	r0, #1
   12188:	beq	13dd8 <__assert_fail@plt+0x24ec>
   1218c:	movw	r0, #4944	; 0x1350
   12190:	movt	r0, #3
   12194:	ldrb	r0, [r0]
   12198:	cmp	r0, #1
   1219c:	beq	13db0 <__assert_fail@plt+0x24c4>
   121a0:	mov	r0, #4
   121a4:	str	r0, [r7]
   121a8:	movw	r0, #4920	; 0x1338
   121ac:	movt	r0, #3
   121b0:	ldr	r0, [r0]
   121b4:	cmp	r0, #0
   121b8:	beq	11e6c <__assert_fail@plt+0x580>
   121bc:	bl	13e6c <__assert_fail@plt+0x2580>
   121c0:	b	11e6c <__assert_fail@plt+0x580>
   121c4:	ldr	r0, [r7]
   121c8:	cmp	r0, #4
   121cc:	beq	13db0 <__assert_fail@plt+0x24c4>
   121d0:	movw	r0, #4944	; 0x1350
   121d4:	movt	r0, #3
   121d8:	b	11e64 <__assert_fail@plt+0x578>
   121dc:	movw	r0, #4936	; 0x1348
   121e0:	movt	r0, #3
   121e4:	b	11e64 <__assert_fail@plt+0x578>
   121e8:	movw	r0, #5021	; 0x139d
   121ec:	movt	r0, #3
   121f0:	b	11e64 <__assert_fail@plt+0x578>
   121f4:	movw	r0, #4920	; 0x1338
   121f8:	movw	r2, #5008	; 0x1390
   121fc:	mov	r1, r8
   12200:	movt	r0, #3
   12204:	movt	r2, #3
   12208:	ldr	r0, [r0]
   1220c:	bl	18018 <__assert_fail@plt+0x672c>
   12210:	cmp	r0, #0
   12214:	beq	11e6c <__assert_fail@plt+0x580>
   12218:	b	13e04 <__assert_fail@plt+0x2518>
   1221c:	ldr	r0, [r7]
   12220:	cmp	r0, #4
   12224:	beq	13dc4 <__assert_fail@plt+0x24d8>
   12228:	mov	r0, #1
   1222c:	str	r0, [r7]
   12230:	b	11e6c <__assert_fail@plt+0x580>
   12234:	movw	r0, #5020	; 0x139c
   12238:	movt	r0, #3
   1223c:	b	11e64 <__assert_fail@plt+0x578>
   12240:	ldr	r0, [r7]
   12244:	mov	r1, #1
   12248:	str	r1, [sp, #60]	; 0x3c
   1224c:	cmp	r0, #4
   12250:	bne	11e6c <__assert_fail@plt+0x580>
   12254:	b	13dd8 <__assert_fail@plt+0x24ec>
   12258:	movw	r0, #5008	; 0x1390
   1225c:	mov	r1, #1
   12260:	movt	r0, #3
   12264:	stm	r0, {r1, r6}
   12268:	mov	r0, #176	; 0xb0
   1226c:	str	r0, [r8]
   12270:	b	11e6c <__assert_fail@plt+0x580>
   12274:	movw	r0, #5008	; 0x1390
   12278:	mov	r1, #1048576	; 0x100000
   1227c:	movt	r0, #3
   12280:	stm	r0, {r1, r6}
   12284:	str	r6, [r8]
   12288:	b	11e6c <__assert_fail@plt+0x580>
   1228c:	ldr	r0, [r8]
   12290:	movw	r9, #4932	; 0x1344
   12294:	movt	r9, #3
   12298:	cmn	r0, #1
   1229c:	bne	12304 <__assert_fail@plt+0xa18>
   122a0:	ldr	r0, [sp, #60]	; 0x3c
   122a4:	tst	r0, #1
   122a8:	beq	122e4 <__assert_fail@plt+0x9f8>
   122ac:	movw	r0, #63963	; 0xf9db
   122b0:	mov	r7, #0
   122b4:	movt	r0, #1
   122b8:	str	r7, [r8]
   122bc:	bl	116a0 <getenv@plt>
   122c0:	cmp	r0, #0
   122c4:	movw	r0, #5008	; 0x1390
   122c8:	mov	r4, #512	; 0x200
   122cc:	movt	r0, #3
   122d0:	movweq	r4, #1024	; 0x400
   122d4:	stm	r0, {r4, r7}
   122d8:	movw	r7, #5016	; 0x1398
   122dc:	movt	r7, #3
   122e0:	b	12304 <__assert_fail@plt+0xa18>
   122e4:	movw	r0, #63979	; 0xf9eb
   122e8:	movt	r0, #1
   122ec:	bl	116a0 <getenv@plt>
   122f0:	movw	r1, #4940	; 0x134c
   122f4:	movw	r2, #5008	; 0x1390
   122f8:	movt	r1, #3
   122fc:	movt	r2, #3
   12300:	bl	18018 <__assert_fail@plt+0x672c>
   12304:	ldr	r0, [r7]
   12308:	cmp	r0, #1
   1230c:	cmpne	r0, #4
   12310:	bne	12528 <__assert_fail@plt+0xc3c>
   12314:	movw	r0, #4928	; 0x1340
   12318:	movt	r0, #3
   1231c:	ldr	r6, [r0]
   12320:	cmp	r6, #0
   12324:	beq	123c4 <__assert_fail@plt+0xad8>
   12328:	movw	r8, #63993	; 0xf9f9
   1232c:	mov	r7, #0
   12330:	movt	r8, #1
   12334:	b	12378 <__assert_fail@plt+0xa8c>
   12338:	mov	r0, #0
   1233c:	mov	r1, r8
   12340:	mov	r2, #5
   12344:	bl	115a4 <dcgettext@plt>
   12348:	mov	r5, r0
   1234c:	ldr	r0, [r6]
   12350:	bl	1b3a0 <__assert_fail@plt+0x9ab4>
   12354:	mov	r3, r0
   12358:	mov	r0, #0
   1235c:	mov	r1, #0
   12360:	mov	r2, r5
   12364:	bl	11670 <error@plt>
   12368:	mov	r7, #1
   1236c:	ldr	r6, [r6, #4]
   12370:	cmp	r6, #0
   12374:	beq	123ac <__assert_fail@plt+0xac0>
   12378:	ldr	r4, [r9]
   1237c:	cmp	r4, #0
   12380:	beq	1236c <__assert_fail@plt+0xa80>
   12384:	ldr	r5, [r6]
   12388:	ldr	r1, [r4]
   1238c:	mov	r0, r5
   12390:	bl	11520 <strcmp@plt>
   12394:	cmp	r0, #0
   12398:	beq	12338 <__assert_fail@plt+0xa4c>
   1239c:	ldr	r4, [r4, #4]
   123a0:	cmp	r4, #0
   123a4:	bne	12388 <__assert_fail@plt+0xa9c>
   123a8:	b	1236c <__assert_fail@plt+0xa80>
   123ac:	ldr	r5, [sp, #40]	; 0x28
   123b0:	tst	r7, #1
   123b4:	movw	r7, #5016	; 0x1398
   123b8:	mov	r0, #1
   123bc:	movt	r7, #3
   123c0:	bne	13cd8 <__assert_fail@plt+0x23ec>
   123c4:	movw	r0, #4904	; 0x1328
   123c8:	mov	r1, #0
   123cc:	movt	r0, #3
   123d0:	str	r1, [sp, #28]
   123d4:	ldr	r0, [r0]
   123d8:	cmp	r0, r5
   123dc:	bge	12558 <__assert_fail@plt+0xc6c>
   123e0:	ldr	r5, [sp, #40]	; 0x28
   123e4:	mov	r1, #104	; 0x68
   123e8:	mov	r4, #104	; 0x68
   123ec:	sub	r0, r5, r0
   123f0:	bl	1be98 <__assert_fail@plt+0xa5ac>
   123f4:	str	r0, [sp, #28]
   123f8:	movw	r0, #4904	; 0x1328
   123fc:	movt	r0, #3
   12400:	ldr	r8, [r0]
   12404:	cmp	r8, r5
   12408:	bge	12558 <__assert_fail@plt+0xc6c>
   1240c:	ldr	r0, [sp, #28]
   12410:	ldr	r1, [sp, #40]	; 0x28
   12414:	mla	r9, r8, r4, r0
   12418:	ldr	r0, [sp, #36]	; 0x24
   1241c:	add	r4, r0, r8, lsl #2
   12420:	mvn	r0, r8
   12424:	add	sl, r0, r1
   12428:	ldr	r6, [r4]
   1242c:	mov	r1, #2304	; 0x900
   12430:	mov	r0, r6
   12434:	bl	11688 <open64@plt>
   12438:	cmn	r0, #1
   1243c:	ble	1246c <__assert_fail@plt+0xb80>
   12440:	mov	r7, r0
   12444:	mvn	r0, #103	; 0x67
   12448:	mla	r2, r8, r0, r9
   1244c:	mov	r0, #3
   12450:	mov	r1, r7
   12454:	bl	11604 <__fxstat64@plt>
   12458:	cmp	r0, #0
   1245c:	beq	124b0 <__assert_fail@plt+0xbc4>
   12460:	bl	11748 <__errno_location@plt>
   12464:	ldr	r5, [r0]
   12468:	b	124b4 <__assert_fail@plt+0xbc8>
   1246c:	bl	11748 <__errno_location@plt>
   12470:	ldr	r5, [r0]
   12474:	cmp	r5, #2
   12478:	cmpne	r5, #20
   1247c:	beq	124c4 <__assert_fail@plt+0xbd8>
   12480:	mov	r7, r0
   12484:	mvn	r0, #103	; 0x67
   12488:	mov	r1, r6
   1248c:	mla	r2, r8, r0, r9
   12490:	mov	r0, #3
   12494:	bl	11898 <__xstat64@plt>
   12498:	cmp	r0, #0
   1249c:	beq	12504 <__assert_fail@plt+0xc18>
   124a0:	ldr	r5, [r7]
   124a4:	cmp	r5, #0
   124a8:	bne	124c4 <__assert_fail@plt+0xbd8>
   124ac:	b	12504 <__assert_fail@plt+0xc18>
   124b0:	mov	r5, #0
   124b4:	mov	r0, r7
   124b8:	bl	118c8 <close@plt>
   124bc:	cmp	r5, #0
   124c0:	beq	12504 <__assert_fail@plt+0xc18>
   124c4:	ldr	r2, [r4]
   124c8:	mov	r0, #0
   124cc:	mov	r1, #3
   124d0:	bl	1b0f4 <__assert_fail@plt+0x9808>
   124d4:	movw	r2, #2580	; 0xa14
   124d8:	mov	r3, r0
   124dc:	mov	r0, #0
   124e0:	mov	r1, r5
   124e4:	movt	r2, #2
   124e8:	bl	11670 <error@plt>
   124ec:	movw	r0, #4948	; 0x1354
   124f0:	mov	r1, #1
   124f4:	movt	r0, #3
   124f8:	strb	r1, [r0]
   124fc:	mov	r0, #0
   12500:	str	r0, [r4]
   12504:	cmp	sl, #0
   12508:	beq	12548 <__assert_fail@plt+0xc5c>
   1250c:	movw	r0, #4904	; 0x1328
   12510:	add	r4, r4, #4
   12514:	add	r9, r9, #104	; 0x68
   12518:	sub	sl, sl, #1
   1251c:	movt	r0, #3
   12520:	ldr	r8, [r0]
   12524:	b	12428 <__assert_fail@plt+0xb3c>
   12528:	ldrb	r0, [r8]
   1252c:	tst	r0, #16
   12530:	bne	13ce0 <__assert_fail@plt+0x23f4>
   12534:	ldr	r0, [sp, #60]	; 0x3c
   12538:	tst	r0, #1
   1253c:	beq	12314 <__assert_fail@plt+0xa28>
   12540:	mov	r0, #3
   12544:	b	13ce4 <__assert_fail@plt+0x23f8>
   12548:	movw	r9, #4932	; 0x1344
   1254c:	movw	r7, #5016	; 0x1398
   12550:	movt	r9, #3
   12554:	movt	r7, #3
   12558:	movw	r1, #4928	; 0x1340
   1255c:	ldr	r0, [r9]
   12560:	movt	r1, #3
   12564:	ldr	r1, [r1]
   12568:	orrs	r0, r1, r0
   1256c:	mov	r0, #1
   12570:	bne	125a8 <__assert_fail@plt+0xcbc>
   12574:	movw	r1, #4472	; 0x1178
   12578:	movw	r0, #4944	; 0x1350
   1257c:	movt	r1, #3
   12580:	movt	r0, #3
   12584:	ldrb	r1, [r1, #52]	; 0x34
   12588:	ldrb	r0, [r0]
   1258c:	cmp	r1, #0
   12590:	movwne	r1, #1
   12594:	orr	r0, r0, r1
   12598:	movw	r1, #5020	; 0x139c
   1259c:	movt	r1, #3
   125a0:	ldrb	r1, [r1]
   125a4:	orr	r0, r1, r0
   125a8:	and	r0, r0, #1
   125ac:	bl	18a8c <__assert_fail@plt+0x71a0>
   125b0:	movw	r1, #5024	; 0x13a0
   125b4:	cmp	r0, #0
   125b8:	movt	r1, #3
   125bc:	str	r0, [r1]
   125c0:	ldr	r1, [sp, #40]	; 0x28
   125c4:	bne	12658 <__assert_fail@plt+0xd6c>
   125c8:	movw	r0, #4904	; 0x1328
   125cc:	mov	r4, #1
   125d0:	movt	r0, #3
   125d4:	ldr	r0, [r0]
   125d8:	cmp	r0, r1
   125dc:	bge	12618 <__assert_fail@plt+0xd2c>
   125e0:	movw	r0, #4936	; 0x1348
   125e4:	movt	r0, #3
   125e8:	ldrb	r0, [r0]
   125ec:	cmp	r0, #0
   125f0:	bne	12618 <__assert_fail@plt+0xd2c>
   125f4:	movw	r0, #5020	; 0x139c
   125f8:	movt	r0, #3
   125fc:	ldrb	r0, [r0]
   12600:	cmp	r0, #0
   12604:	movweq	r0, #4928	; 0x1340
   12608:	movteq	r0, #3
   1260c:	ldreq	r0, [r0]
   12610:	cmpeq	r0, #0
   12614:	beq	13cec <__assert_fail@plt+0x2400>
   12618:	movw	r6, #64943	; 0xfdaf
   1261c:	movt	r6, #1
   12620:	bl	11748 <__errno_location@plt>
   12624:	movw	r1, #64055	; 0xfa37
   12628:	ldr	r5, [r0]
   1262c:	mov	r0, #0
   12630:	mov	r2, #5
   12634:	movt	r1, #1
   12638:	bl	115a4 <dcgettext@plt>
   1263c:	movw	r2, #64050	; 0xfa32
   12640:	str	r0, [sp]
   12644:	mov	r0, r4
   12648:	mov	r1, r5
   1264c:	mov	r3, r6
   12650:	movt	r2, #1
   12654:	bl	11670 <error@plt>
   12658:	movw	r0, #5021	; 0x139d
   1265c:	movt	r0, #3
   12660:	ldrb	r0, [r0]
   12664:	cmp	r0, #1
   12668:	bne	12670 <__assert_fail@plt+0xd84>
   1266c:	bl	1188c <sync@plt>
   12670:	ldr	r0, [r7]
   12674:	cmp	r0, #4
   12678:	bhi	13e28 <__assert_fail@plt+0x253c>
   1267c:	movw	r9, #5028	; 0x13a4
   12680:	add	r1, pc, #4
   12684:	movt	r9, #3
   12688:	ldr	pc, [r1, r0, lsl #2]
   1268c:	andeq	r2, r1, r0, lsr #13
   12690:	andeq	r2, r1, r4, ror #21
   12694:	andeq	r2, r1, r8, ror #15
   12698:	andeq	r2, r1, r4, ror #18
   1269c:	andeq	r2, r1, ip, asr #15
   126a0:	ldr	r0, [r9]
   126a4:	movw	r4, #5032	; 0x13a8
   126a8:	mov	r2, #4
   126ac:	movt	r4, #3
   126b0:	add	r1, r0, #1
   126b4:	ldr	r0, [r4]
   126b8:	str	r1, [r9]
   126bc:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   126c0:	ldr	r1, [r9]
   126c4:	movw	r5, #4472	; 0x1178
   126c8:	str	r0, [r4]
   126cc:	movt	r5, #3
   126d0:	add	r2, r0, r1, lsl #2
   126d4:	str	r5, [r2, #-4]
   126d8:	ldrb	r2, [r5, #24]
   126dc:	cmp	r2, #0
   126e0:	bne	13d90 <__assert_fail@plt+0x24a4>
   126e4:	mov	r2, #1
   126e8:	strb	r2, [r5, #24]
   126ec:	movw	r2, #4944	; 0x1350
   126f0:	movt	r2, #3
   126f4:	ldrb	r2, [r2]
   126f8:	cmp	r2, #1
   126fc:	bne	12738 <__assert_fail@plt+0xe4c>
   12700:	add	r1, r1, #1
   12704:	mov	r2, #4
   12708:	str	r1, [r9]
   1270c:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12710:	ldr	r1, [r9]
   12714:	add	r3, r5, #28
   12718:	str	r0, [r4]
   1271c:	add	r2, r0, r1, lsl #2
   12720:	str	r3, [r2, #-4]
   12724:	ldrb	r2, [r5, #52]	; 0x34
   12728:	cmp	r2, #0
   1272c:	bne	13d90 <__assert_fail@plt+0x24a4>
   12730:	mov	r2, #1
   12734:	strb	r2, [r5, #52]	; 0x34
   12738:	add	r1, r1, #1
   1273c:	mov	r2, #4
   12740:	str	r1, [r9]
   12744:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12748:	ldr	r1, [r9]
   1274c:	add	r3, r5, #56	; 0x38
   12750:	str	r0, [r4]
   12754:	add	r2, r0, r1, lsl #2
   12758:	str	r3, [r2, #-4]
   1275c:	ldrb	r2, [r5, #80]	; 0x50
   12760:	cmp	r2, #0
   12764:	bne	13d90 <__assert_fail@plt+0x24a4>
   12768:	mov	r6, #1
   1276c:	add	r1, r1, #1
   12770:	mov	r2, #4
   12774:	strb	r6, [r5, #80]	; 0x50
   12778:	str	r1, [r9]
   1277c:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12780:	ldr	r1, [r9]
   12784:	add	r3, r5, #84	; 0x54
   12788:	str	r0, [r4]
   1278c:	add	r2, r0, r1, lsl #2
   12790:	str	r3, [r2, #-4]
   12794:	ldrb	r2, [r5, #108]	; 0x6c
   12798:	cmp	r2, #0
   1279c:	bne	13d90 <__assert_fail@plt+0x24a4>
   127a0:	add	r1, r1, #1
   127a4:	mov	r2, #4
   127a8:	strb	r6, [r5, #108]	; 0x6c
   127ac:	str	r1, [r9]
   127b0:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   127b4:	ldr	r1, [r9]
   127b8:	add	r3, r5, #112	; 0x70
   127bc:	str	r0, [r4]
   127c0:	add	r2, r0, r1, lsl #2
   127c4:	str	r3, [r2, #-4]
   127c8:	b	12928 <__assert_fail@plt+0x103c>
   127cc:	ldr	r0, [r9]
   127d0:	cmp	r0, #0
   127d4:	bne	12c8c <__assert_fail@plt+0x13a0>
   127d8:	movw	r0, #65429	; 0xff95
   127dc:	movt	r0, #1
   127e0:	bl	13e6c <__assert_fail@plt+0x2580>
   127e4:	b	12c8c <__assert_fail@plt+0x13a0>
   127e8:	ldr	r0, [r9]
   127ec:	movw	r4, #5032	; 0x13a8
   127f0:	mov	r2, #4
   127f4:	movt	r4, #3
   127f8:	add	r1, r0, #1
   127fc:	ldr	r0, [r4]
   12800:	str	r1, [r9]
   12804:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12808:	ldr	r1, [r9]
   1280c:	movw	r5, #4472	; 0x1178
   12810:	str	r0, [r4]
   12814:	movt	r5, #3
   12818:	add	r2, r0, r1, lsl #2
   1281c:	str	r5, [r2, #-4]
   12820:	ldrb	r2, [r5, #24]
   12824:	cmp	r2, #0
   12828:	bne	13d90 <__assert_fail@plt+0x24a4>
   1282c:	mov	r2, #1
   12830:	strb	r2, [r5, #24]
   12834:	movw	r2, #4944	; 0x1350
   12838:	movt	r2, #3
   1283c:	ldrb	r2, [r2]
   12840:	cmp	r2, #1
   12844:	bne	12880 <__assert_fail@plt+0xf94>
   12848:	add	r1, r1, #1
   1284c:	mov	r2, #4
   12850:	str	r1, [r9]
   12854:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12858:	ldr	r1, [r9]
   1285c:	add	r3, r5, #28
   12860:	str	r0, [r4]
   12864:	add	r2, r0, r1, lsl #2
   12868:	str	r3, [r2, #-4]
   1286c:	ldrb	r2, [r5, #52]	; 0x34
   12870:	cmp	r2, #0
   12874:	bne	13d90 <__assert_fail@plt+0x24a4>
   12878:	mov	r2, #1
   1287c:	strb	r2, [r5, #52]	; 0x34
   12880:	add	r1, r1, #1
   12884:	mov	r2, #4
   12888:	str	r1, [r9]
   1288c:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12890:	ldr	r1, [r9]
   12894:	add	r3, r5, #56	; 0x38
   12898:	str	r0, [r4]
   1289c:	add	r2, r0, r1, lsl #2
   128a0:	str	r3, [r2, #-4]
   128a4:	movw	r2, #65127	; 0xfe67
   128a8:	movt	r2, #1
   128ac:	str	r2, [r5, #68]	; 0x44
   128b0:	ldrb	r2, [r5, #80]	; 0x50
   128b4:	cmp	r2, #0
   128b8:	bne	13d90 <__assert_fail@plt+0x24a4>
   128bc:	mov	r6, #1
   128c0:	add	r1, r1, #1
   128c4:	mov	r2, #4
   128c8:	strb	r6, [r5, #80]	; 0x50
   128cc:	str	r1, [r9]
   128d0:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   128d4:	ldr	r1, [r9]
   128d8:	add	r3, r5, #84	; 0x54
   128dc:	str	r0, [r4]
   128e0:	add	r2, r0, r1, lsl #2
   128e4:	str	r3, [r2, #-4]
   128e8:	ldrb	r2, [r5, #108]	; 0x6c
   128ec:	cmp	r2, #0
   128f0:	bne	13d90 <__assert_fail@plt+0x24a4>
   128f4:	add	r1, r1, #1
   128f8:	mov	r2, #4
   128fc:	strb	r6, [r5, #108]	; 0x6c
   12900:	str	r1, [r9]
   12904:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12908:	ldr	r1, [r9]
   1290c:	add	r3, r5, #112	; 0x70
   12910:	str	r0, [r4]
   12914:	add	r2, r0, r1, lsl #2
   12918:	str	r3, [r2, #-4]
   1291c:	movw	r2, #65132	; 0xfe6c
   12920:	movt	r2, #1
   12924:	str	r2, [r5, #124]	; 0x7c
   12928:	ldrb	r2, [r5, #136]	; 0x88
   1292c:	cmp	r2, #0
   12930:	bne	13d90 <__assert_fail@plt+0x24a4>
   12934:	mov	r6, #1
   12938:	add	r1, r1, #1
   1293c:	mov	r2, #4
   12940:	strb	r6, [r5, #136]	; 0x88
   12944:	str	r1, [r9]
   12948:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   1294c:	ldr	r1, [r9]
   12950:	add	r3, r5, #140	; 0x8c
   12954:	str	r0, [r4]
   12958:	add	r2, r0, r1, lsl #2
   1295c:	str	r3, [r2, #-4]
   12960:	b	12ad0 <__assert_fail@plt+0x11e4>
   12964:	ldr	r0, [r9]
   12968:	movw	r4, #5032	; 0x13a8
   1296c:	mov	r2, #4
   12970:	movt	r4, #3
   12974:	add	r1, r0, #1
   12978:	ldr	r0, [r4]
   1297c:	str	r1, [r9]
   12980:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12984:	ldr	r1, [r9]
   12988:	movw	r5, #4472	; 0x1178
   1298c:	str	r0, [r4]
   12990:	movt	r5, #3
   12994:	add	r2, r0, r1, lsl #2
   12998:	str	r5, [r2, #-4]
   1299c:	ldrb	r2, [r5, #24]
   129a0:	cmp	r2, #0
   129a4:	bne	13d90 <__assert_fail@plt+0x24a4>
   129a8:	mov	r2, #1
   129ac:	strb	r2, [r5, #24]
   129b0:	movw	r2, #4944	; 0x1350
   129b4:	movt	r2, #3
   129b8:	ldrb	r2, [r2]
   129bc:	cmp	r2, #1
   129c0:	bne	129fc <__assert_fail@plt+0x1110>
   129c4:	add	r1, r1, #1
   129c8:	mov	r2, #4
   129cc:	str	r1, [r9]
   129d0:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   129d4:	ldr	r1, [r9]
   129d8:	add	r3, r5, #28
   129dc:	str	r0, [r4]
   129e0:	add	r2, r0, r1, lsl #2
   129e4:	str	r3, [r2, #-4]
   129e8:	ldrb	r2, [r5, #52]	; 0x34
   129ec:	cmp	r2, #0
   129f0:	bne	13d90 <__assert_fail@plt+0x24a4>
   129f4:	mov	r2, #1
   129f8:	strb	r2, [r5, #52]	; 0x34
   129fc:	add	r1, r1, #1
   12a00:	mov	r2, #4
   12a04:	str	r1, [r9]
   12a08:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12a0c:	ldr	r1, [r9]
   12a10:	add	r3, r5, #56	; 0x38
   12a14:	str	r0, [r4]
   12a18:	add	r2, r0, r1, lsl #2
   12a1c:	str	r3, [r2, #-4]
   12a20:	ldrb	r2, [r5, #80]	; 0x50
   12a24:	cmp	r2, #0
   12a28:	bne	13d90 <__assert_fail@plt+0x24a4>
   12a2c:	mov	r6, #1
   12a30:	add	r1, r1, #1
   12a34:	mov	r2, #4
   12a38:	strb	r6, [r5, #80]	; 0x50
   12a3c:	str	r1, [r9]
   12a40:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12a44:	ldr	r1, [r9]
   12a48:	add	r3, r5, #84	; 0x54
   12a4c:	str	r0, [r4]
   12a50:	add	r2, r0, r1, lsl #2
   12a54:	str	r3, [r2, #-4]
   12a58:	ldrb	r2, [r5, #108]	; 0x6c
   12a5c:	cmp	r2, #0
   12a60:	bne	13d90 <__assert_fail@plt+0x24a4>
   12a64:	add	r1, r1, #1
   12a68:	mov	r2, #4
   12a6c:	strb	r6, [r5, #108]	; 0x6c
   12a70:	str	r1, [r9]
   12a74:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12a78:	ldr	r1, [r9]
   12a7c:	add	r3, r5, #112	; 0x70
   12a80:	str	r0, [r4]
   12a84:	add	r2, r0, r1, lsl #2
   12a88:	str	r3, [r2, #-4]
   12a8c:	ldrb	r2, [r5, #136]	; 0x88
   12a90:	cmp	r2, #0
   12a94:	bne	13d90 <__assert_fail@plt+0x24a4>
   12a98:	mov	r6, #1
   12a9c:	add	r1, r1, #1
   12aa0:	mov	r2, #4
   12aa4:	strb	r6, [r5, #136]	; 0x88
   12aa8:	str	r1, [r9]
   12aac:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12ab0:	ldr	r1, [r9]
   12ab4:	add	r3, r5, #140	; 0x8c
   12ab8:	str	r0, [r4]
   12abc:	add	r2, r0, r1, lsl #2
   12ac0:	str	r3, [r2, #-4]
   12ac4:	movw	r2, #65371	; 0xff5b
   12ac8:	movt	r2, #1
   12acc:	str	r2, [r5, #152]	; 0x98
   12ad0:	ldrb	r2, [r5, #164]	; 0xa4
   12ad4:	cmp	r2, #0
   12ad8:	bne	13d90 <__assert_fail@plt+0x24a4>
   12adc:	strb	r6, [r5, #164]	; 0xa4
   12ae0:	b	12c54 <__assert_fail@plt+0x1368>
   12ae4:	ldr	r0, [r9]
   12ae8:	movw	r4, #5032	; 0x13a8
   12aec:	mov	r2, #4
   12af0:	movt	r4, #3
   12af4:	add	r1, r0, #1
   12af8:	ldr	r0, [r4]
   12afc:	str	r1, [r9]
   12b00:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12b04:	ldr	r1, [r9]
   12b08:	movw	r5, #4472	; 0x1178
   12b0c:	str	r0, [r4]
   12b10:	movt	r5, #3
   12b14:	add	r2, r0, r1, lsl #2
   12b18:	str	r5, [r2, #-4]
   12b1c:	ldrb	r2, [r5, #24]
   12b20:	cmp	r2, #0
   12b24:	bne	13d90 <__assert_fail@plt+0x24a4>
   12b28:	mov	r2, #1
   12b2c:	strb	r2, [r5, #24]
   12b30:	movw	r2, #4944	; 0x1350
   12b34:	movt	r2, #3
   12b38:	ldrb	r2, [r2]
   12b3c:	cmp	r2, #1
   12b40:	bne	12b7c <__assert_fail@plt+0x1290>
   12b44:	add	r1, r1, #1
   12b48:	mov	r2, #4
   12b4c:	str	r1, [r9]
   12b50:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12b54:	ldr	r1, [r9]
   12b58:	add	r3, r5, #28
   12b5c:	str	r0, [r4]
   12b60:	add	r2, r0, r1, lsl #2
   12b64:	str	r3, [r2, #-4]
   12b68:	ldrb	r2, [r5, #52]	; 0x34
   12b6c:	cmp	r2, #0
   12b70:	bne	13d90 <__assert_fail@plt+0x24a4>
   12b74:	mov	r2, #1
   12b78:	strb	r2, [r5, #52]	; 0x34
   12b7c:	add	r1, r1, #1
   12b80:	mov	r2, #4
   12b84:	str	r1, [r9]
   12b88:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12b8c:	ldr	r1, [r9]
   12b90:	add	r3, r5, #168	; 0xa8
   12b94:	str	r0, [r4]
   12b98:	add	r2, r0, r1, lsl #2
   12b9c:	str	r3, [r2, #-4]
   12ba0:	ldrb	r2, [r5, #192]	; 0xc0
   12ba4:	cmp	r2, #0
   12ba8:	bne	13d90 <__assert_fail@plt+0x24a4>
   12bac:	mov	r6, #1
   12bb0:	add	r1, r1, #1
   12bb4:	mov	r2, #4
   12bb8:	strb	r6, [r5, #192]	; 0xc0
   12bbc:	str	r1, [r9]
   12bc0:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12bc4:	ldr	r1, [r9]
   12bc8:	add	r3, r5, #196	; 0xc4
   12bcc:	str	r0, [r4]
   12bd0:	add	r2, r0, r1, lsl #2
   12bd4:	str	r3, [r2, #-4]
   12bd8:	ldrb	r2, [r5, #220]	; 0xdc
   12bdc:	cmp	r2, #0
   12be0:	bne	13d90 <__assert_fail@plt+0x24a4>
   12be4:	add	r1, r1, #1
   12be8:	mov	r2, #4
   12bec:	strb	r6, [r5, #220]	; 0xdc
   12bf0:	str	r1, [r9]
   12bf4:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12bf8:	ldr	r1, [r9]
   12bfc:	add	r3, r5, #224	; 0xe0
   12c00:	str	r0, [r4]
   12c04:	add	r2, r0, r1, lsl #2
   12c08:	str	r3, [r2, #-4]
   12c0c:	ldrb	r2, [r5, #248]	; 0xf8
   12c10:	cmp	r2, #0
   12c14:	bne	13d90 <__assert_fail@plt+0x24a4>
   12c18:	mov	r6, #1
   12c1c:	add	r1, r1, #1
   12c20:	mov	r2, #4
   12c24:	strb	r6, [r5, #248]	; 0xf8
   12c28:	str	r1, [r9]
   12c2c:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12c30:	ldr	r1, [r9]
   12c34:	add	r3, r5, #252	; 0xfc
   12c38:	str	r0, [r4]
   12c3c:	add	r2, r0, r1, lsl #2
   12c40:	str	r3, [r2, #-4]
   12c44:	ldrb	r2, [r5, #276]	; 0x114
   12c48:	cmp	r2, #0
   12c4c:	bne	13d90 <__assert_fail@plt+0x24a4>
   12c50:	strb	r6, [r5, #276]	; 0x114
   12c54:	add	r1, r1, #1
   12c58:	mov	r2, #4
   12c5c:	str	r1, [r9]
   12c60:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12c64:	ldr	r1, [r9]
   12c68:	str	r0, [r4]
   12c6c:	add	r0, r0, r1, lsl #2
   12c70:	add	r1, r5, #280	; 0x118
   12c74:	str	r1, [r0, #-4]
   12c78:	ldrb	r0, [r5, #304]	; 0x130
   12c7c:	cmp	r0, #0
   12c80:	bne	13d90 <__assert_fail@plt+0x24a4>
   12c84:	mov	r0, #1
   12c88:	strb	r0, [r5, #304]	; 0x130
   12c8c:	movw	r4, #5040	; 0x13b0
   12c90:	movw	r5, #5036	; 0x13ac
   12c94:	mov	r2, #4
   12c98:	movt	r4, #3
   12c9c:	movt	r5, #3
   12ca0:	ldr	r0, [r4]
   12ca4:	add	r1, r0, #1
   12ca8:	ldr	r0, [r5]
   12cac:	str	r1, [r4]
   12cb0:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   12cb4:	str	r0, [r5]
   12cb8:	ldr	r0, [r9]
   12cbc:	mov	r1, #4
   12cc0:	bl	1be98 <__assert_fail@plt+0xa5ac>
   12cc4:	ldr	r1, [r4]
   12cc8:	ldr	r2, [r5]
   12ccc:	add	r1, r2, r1, lsl #2
   12cd0:	str	r0, [r1, #-4]
   12cd4:	ldr	r0, [r9]
   12cd8:	cmp	r0, #0
   12cdc:	beq	12fc8 <__assert_fail@plt+0x16dc>
   12ce0:	movw	r7, #5032	; 0x13a8
   12ce4:	movw	r4, #4808	; 0x12c8
   12ce8:	mov	sl, #0
   12cec:	mov	r8, #1000	; 0x3e8
   12cf0:	mov	r6, #0
   12cf4:	movt	r7, #3
   12cf8:	movt	r4, #3
   12cfc:	ldr	r1, [r7]
   12d00:	b	12d80 <__assert_fail@plt+0x1494>
   12d04:	cmp	r0, #0
   12d08:	movw	r0, #20484	; 0x5004
   12d0c:	movw	r1, #20300	; 0x4f4c
   12d10:	movt	r0, #1
   12d14:	movt	r1, #1
   12d18:	moveq	r1, r0
   12d1c:	mov	r0, r5
   12d20:	blx	r1
   12d24:	movw	r0, #5040	; 0x13b0
   12d28:	movw	r1, #5036	; 0x13ac
   12d2c:	movt	r0, #3
   12d30:	movt	r1, #3
   12d34:	ldr	r0, [r0]
   12d38:	ldr	r1, [r1]
   12d3c:	add	r0, r1, r0, lsl #2
   12d40:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12d44:	ldr	r0, [r0, #-4]
   12d48:	str	r1, [r0, r6, lsl #2]
   12d4c:	mov	r1, #0
   12d50:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d54:	bl	18720 <__assert_fail@plt+0x6e34>
   12d58:	ldr	r1, [r7]
   12d5c:	ldr	r2, [r1, r6, lsl #2]
   12d60:	add	r6, r6, #1
   12d64:	ldr	r3, [r2, #16]
   12d68:	cmp	r3, r0
   12d6c:	movhi	r0, r3
   12d70:	str	r0, [r2, #16]
   12d74:	ldr	r0, [r9]
   12d78:	cmp	r6, r0
   12d7c:	bcs	12fc8 <__assert_fail@plt+0x16dc>
   12d80:	str	sl, [fp, #-56]	; 0xffffffc8
   12d84:	mov	r2, #5
   12d88:	ldr	r0, [r1, r6, lsl #2]
   12d8c:	ldr	r1, [r0, #12]
   12d90:	mov	r0, #0
   12d94:	bl	115a4 <dcgettext@plt>
   12d98:	mov	r5, r0
   12d9c:	ldr	r0, [r7]
   12da0:	ldr	r0, [r0, r6, lsl #2]
   12da4:	ldr	r0, [r0]
   12da8:	cmp	r0, #2
   12dac:	bne	12f94 <__assert_fail@plt+0x16a8>
   12db0:	movw	r0, #5016	; 0x1398
   12db4:	movt	r0, #3
   12db8:	ldr	r0, [r0]
   12dbc:	cmp	r0, #4
   12dc0:	beq	12e34 <__assert_fail@plt+0x1548>
   12dc4:	cmp	r0, #3
   12dc8:	beq	12de4 <__assert_fail@plt+0x14f8>
   12dcc:	cmp	r0, #0
   12dd0:	bne	12f94 <__assert_fail@plt+0x16a8>
   12dd4:	movw	r0, #4940	; 0x134c
   12dd8:	movt	r0, #3
   12ddc:	ldr	r0, [r0]
   12de0:	b	12e48 <__assert_fail@plt+0x155c>
   12de4:	movw	r0, #5008	; 0x1390
   12de8:	add	r2, sp, #64	; 0x40
   12dec:	movt	r0, #3
   12df0:	ldrd	r0, [r0]
   12df4:	bl	181d8 <__assert_fail@plt+0x68ec>
   12df8:	movw	r1, #65504	; 0xffe0
   12dfc:	mov	r4, r0
   12e00:	mov	r0, #0
   12e04:	mov	r2, #5
   12e08:	movt	r1, #1
   12e0c:	bl	115a4 <dcgettext@plt>
   12e10:	mov	r2, r0
   12e14:	sub	r0, fp, #56	; 0x38
   12e18:	mov	r1, #1
   12e1c:	mov	r3, r4
   12e20:	str	r5, [sp]
   12e24:	bl	11694 <__asprintf_chk@plt>
   12e28:	cmn	r0, #1
   12e2c:	streq	sl, [fp, #-56]	; 0xffffffc8
   12e30:	b	12f7c <__assert_fail@plt+0x1690>
   12e34:	movw	r0, #4940	; 0x134c
   12e38:	movt	r0, #3
   12e3c:	ldr	r0, [r0]
   12e40:	tst	r0, #16
   12e44:	bne	12f94 <__assert_fail@plt+0x16a8>
   12e48:	str	r0, [sp, #56]	; 0x38
   12e4c:	movw	r0, #5008	; 0x1390
   12e50:	movt	r0, #3
   12e54:	ldm	r0, {r5, r9}
   12e58:	mov	sl, r9
   12e5c:	str	r9, [sp, #60]	; 0x3c
   12e60:	mov	r4, r5
   12e64:	str	r5, [sp, #52]	; 0x34
   12e68:	mov	r0, r5
   12e6c:	mov	r1, r9
   12e70:	mov	r2, #1000	; 0x3e8
   12e74:	mov	r3, #0
   12e78:	bl	1f004 <__assert_fail@plt+0xd718>
   12e7c:	umull	r2, r3, r0, r8
   12e80:	mla	r3, r1, r8, r3
   12e84:	subs	r2, r5, r2
   12e88:	lsr	r5, r4, #10
   12e8c:	sbc	r7, r9, r3
   12e90:	mov	r3, r4
   12e94:	mov	r9, r1
   12e98:	bfc	r3, #10, #22
   12e9c:	orr	r4, r2, r3
   12ea0:	orrs	r4, r4, r7
   12ea4:	orr	r4, r5, sl, lsl #22
   12ea8:	lsr	sl, sl, #10
   12eac:	mov	r5, r0
   12eb0:	beq	12e68 <__assert_fail@plt+0x157c>
   12eb4:	mov	r0, #1
   12eb8:	mov	r1, #184	; 0xb8
   12ebc:	mov	sl, #0
   12ec0:	str	r0, [sp]
   12ec4:	str	r0, [sp, #8]
   12ec8:	orrs	r0, r2, r7
   12ecc:	ldr	r2, [sp, #56]	; 0x38
   12ed0:	str	sl, [sp, #4]
   12ed4:	str	sl, [sp, #12]
   12ed8:	movweq	r1, #152	; 0x98
   12edc:	cmp	r3, #0
   12ee0:	movne	r1, #152	; 0x98
   12ee4:	and	r2, r2, #292	; 0x124
   12ee8:	orr	r1, r1, r2
   12eec:	mov	r2, r1
   12ef0:	bicne	r2, r2, #32
   12ef4:	cmp	r0, #0
   12ef8:	mov	r0, #256	; 0x100
   12efc:	movne	r2, r1
   12f00:	ldr	r1, [sp, #60]	; 0x3c
   12f04:	bic	r0, r0, r2, lsl #3
   12f08:	orr	r3, r0, r2
   12f0c:	ldr	r0, [sp, #52]	; 0x34
   12f10:	add	r2, sp, #64	; 0x40
   12f14:	bl	17520 <__assert_fail@plt+0x5c34>
   12f18:	movw	r1, #65281	; 0xff01
   12f1c:	mov	r5, r0
   12f20:	mov	r0, #0
   12f24:	mov	r2, #5
   12f28:	movt	r1, #1
   12f2c:	bl	115a4 <dcgettext@plt>
   12f30:	movw	r1, #65504	; 0xffe0
   12f34:	mov	r4, r0
   12f38:	mov	r0, #0
   12f3c:	mov	r2, #5
   12f40:	movt	r1, #1
   12f44:	bl	115a4 <dcgettext@plt>
   12f48:	mov	r2, r0
   12f4c:	sub	r0, fp, #56	; 0x38
   12f50:	mov	r1, #1
   12f54:	mov	r3, r5
   12f58:	str	r4, [sp]
   12f5c:	bl	11694 <__asprintf_chk@plt>
   12f60:	movw	r7, #5028	; 0x13a4
   12f64:	cmn	r0, #1
   12f68:	movt	r7, #3
   12f6c:	streq	sl, [fp, #-56]	; 0xffffffc8
   12f70:	mov	r9, r7
   12f74:	movw	r7, #5032	; 0x13a8
   12f78:	movt	r7, #3
   12f7c:	ldr	r5, [fp, #-56]	; 0xffffffc8
   12f80:	movw	r4, #4808	; 0x12c8
   12f84:	movt	r4, #3
   12f88:	cmp	r5, #0
   12f8c:	bne	12fac <__assert_fail@plt+0x16c0>
   12f90:	b	13d28 <__assert_fail@plt+0x243c>
   12f94:	mov	r0, r5
   12f98:	bl	115b0 <strdup@plt>
   12f9c:	mov	r5, r0
   12fa0:	str	r0, [fp, #-56]	; 0xffffffc8
   12fa4:	cmp	r5, #0
   12fa8:	beq	13d28 <__assert_fail@plt+0x243c>
   12fac:	ldr	r0, [r4]
   12fb0:	cmn	r0, #1
   12fb4:	bgt	12d04 <__assert_fail@plt+0x1418>
   12fb8:	mov	r0, #1
   12fbc:	bl	118a4 <isatty@plt>
   12fc0:	str	r0, [r4]
   12fc4:	b	12d04 <__assert_fail@plt+0x1418>
   12fc8:	ldr	r0, [sp, #28]
   12fcc:	cmp	r0, #0
   12fd0:	beq	136c8 <__assert_fail@plt+0x1ddc>
   12fd4:	movw	r0, #4937	; 0x1349
   12fd8:	mov	r1, #1
   12fdc:	ldr	r7, [sp, #40]	; 0x28
   12fe0:	ldr	r8, [sp, #36]	; 0x24
   12fe4:	movt	r0, #3
   12fe8:	strb	r1, [r0]
   12fec:	movw	r0, #4904	; 0x1328
   12ff0:	movt	r0, #3
   12ff4:	ldr	r5, [r0]
   12ff8:	cmp	r5, r7
   12ffc:	blt	13070 <__assert_fail@plt+0x1784>
   13000:	b	13ad4 <__assert_fail@plt+0x21e8>
   13004:	ldr	r0, [sp, #20]
   13008:	bl	16040 <__assert_fail@plt+0x4754>
   1300c:	ldr	r8, [sp, #32]
   13010:	cmp	r8, #0
   13014:	beq	132e0 <__assert_fail@plt+0x19f4>
   13018:	ldrb	r0, [r8, #24]
   1301c:	ldr	r1, [r8, #12]
   13020:	ldrd	r2, [r8]
   13024:	mov	r7, #0
   13028:	str	r7, [sp, #16]
   1302c:	str	r7, [sp, #12]
   13030:	str	r1, [sp]
   13034:	ubfx	r1, r0, #1, #1
   13038:	and	r0, r0, #1
   1303c:	str	r0, [sp, #4]
   13040:	mov	r0, r2
   13044:	ldr	r2, [sp, #44]	; 0x2c
   13048:	str	r1, [sp, #8]
   1304c:	mov	r1, r3
   13050:	mov	r3, #0
   13054:	bl	141b0 <__assert_fail@plt+0x28c4>
   13058:	ldr	r8, [sp, #36]	; 0x24
   1305c:	ldr	r7, [sp, #40]	; 0x28
   13060:	ldr	r5, [sp, #24]
   13064:	add	r5, r5, #1
   13068:	cmp	r5, r7
   1306c:	beq	13ad4 <__assert_fail@plt+0x21e8>
   13070:	ldr	r6, [r8, r5, lsl #2]
   13074:	cmp	r6, #0
   13078:	beq	13064 <__assert_fail@plt+0x1778>
   1307c:	movw	r0, #4904	; 0x1328
   13080:	ldr	r1, [sp, #28]
   13084:	mov	r2, #104	; 0x68
   13088:	str	r6, [sp, #44]	; 0x2c
   1308c:	movt	r0, #3
   13090:	ldr	r0, [r0]
   13094:	sub	r0, r5, r0
   13098:	mla	r0, r0, r2, r1
   1309c:	str	r0, [sp, #60]	; 0x3c
   130a0:	ldr	r0, [r0, #16]
   130a4:	and	r0, r0, #45056	; 0xb000
   130a8:	orr	r0, r0, #16384	; 0x4000
   130ac:	cmp	r0, #24576	; 0x6000
   130b0:	bne	13348 <__assert_fail@plt+0x1a5c>
   130b4:	mov	r0, r6
   130b8:	bl	1185c <canonicalize_file_name@plt>
   130bc:	mov	r1, r0
   130c0:	cmp	r0, #0
   130c4:	mov	r9, r6
   130c8:	beq	130dc <__assert_fail@plt+0x17f0>
   130cc:	ldrb	r0, [r1]
   130d0:	mov	r9, r1
   130d4:	cmp	r0, #47	; 0x2f
   130d8:	movne	r9, r6
   130dc:	movw	r0, #5024	; 0x13a0
   130e0:	movt	r0, #3
   130e4:	ldr	r8, [r0]
   130e8:	cmp	r8, #0
   130ec:	beq	132c8 <__assert_fail@plt+0x19dc>
   130f0:	mov	r0, #0
   130f4:	str	r1, [sp, #20]
   130f8:	str	r5, [sp, #24]
   130fc:	str	r0, [sp, #32]
   13100:	mvn	r0, #0
   13104:	str	r0, [sp, #52]	; 0x34
   13108:	mov	r0, #0
   1310c:	str	r0, [sp, #56]	; 0x38
   13110:	mov	r0, #0
   13114:	str	r0, [sp, #48]	; 0x30
   13118:	b	13140 <__assert_fail@plt+0x1854>
   1311c:	mov	r0, #1
   13120:	str	r0, [sp, #48]	; 0x30
   13124:	mov	r0, r7
   13128:	bl	16040 <__assert_fail@plt+0x4754>
   1312c:	mov	r0, r5
   13130:	bl	16040 <__assert_fail@plt+0x4754>
   13134:	ldr	r8, [r8, #28]
   13138:	cmp	r8, #0
   1313c:	beq	13004 <__assert_fail@plt+0x1718>
   13140:	ldr	r6, [r8]
   13144:	mov	r0, r6
   13148:	bl	1185c <canonicalize_file_name@plt>
   1314c:	mov	r5, r0
   13150:	cmp	r0, #0
   13154:	beq	13164 <__assert_fail@plt+0x1878>
   13158:	ldrb	r0, [r5]
   1315c:	cmp	r0, #47	; 0x2f
   13160:	moveq	r6, r5
   13164:	mov	r0, r9
   13168:	mov	r1, r6
   1316c:	bl	11520 <strcmp@plt>
   13170:	cmp	r0, #0
   13174:	bne	1312c <__assert_fail@plt+0x1840>
   13178:	movw	r0, #5024	; 0x13a0
   1317c:	ldr	sl, [r8, #4]
   13180:	movt	r0, #3
   13184:	ldr	r7, [r0]
   13188:	cmp	r7, #0
   1318c:	beq	1321c <__assert_fail@plt+0x1930>
   13190:	mov	r4, #0
   13194:	ldr	r0, [r7, #4]
   13198:	mov	r1, sl
   1319c:	bl	11520 <strcmp@plt>
   131a0:	cmp	r0, #0
   131a4:	moveq	r4, r7
   131a8:	ldr	r7, [r7, #28]
   131ac:	cmp	r7, #0
   131b0:	bne	13194 <__assert_fail@plt+0x18a8>
   131b4:	cmp	r4, #0
   131b8:	beq	1321c <__assert_fail@plt+0x1930>
   131bc:	ldr	r0, [r4]
   131c0:	bl	1185c <canonicalize_file_name@plt>
   131c4:	mov	r7, r0
   131c8:	cmp	r0, #0
   131cc:	beq	131dc <__assert_fail@plt+0x18f0>
   131d0:	ldrb	r0, [r7]
   131d4:	cmp	r0, #47	; 0x2f
   131d8:	beq	131f0 <__assert_fail@plt+0x1904>
   131dc:	mov	r0, r7
   131e0:	bl	16040 <__assert_fail@plt+0x4754>
   131e4:	ldr	r0, [r4]
   131e8:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   131ec:	mov	r7, r0
   131f0:	mov	r0, r7
   131f4:	mov	r1, r6
   131f8:	bl	11520 <strcmp@plt>
   131fc:	ldr	sl, [r8, #4]
   13200:	mov	r4, r0
   13204:	mov	r0, sl
   13208:	bl	11718 <strlen@plt>
   1320c:	cmp	r4, #0
   13210:	bne	1311c <__assert_fail@plt+0x1830>
   13214:	mov	r6, r0
   13218:	b	1322c <__assert_fail@plt+0x1940>
   1321c:	mov	r0, sl
   13220:	bl	11718 <strlen@plt>
   13224:	mov	r6, r0
   13228:	mov	r7, #0
   1322c:	mov	r0, #0
   13230:	str	r0, [sp, #48]	; 0x30
   13234:	ldr	r0, [sp, #52]	; 0x34
   13238:	cmp	r6, r0
   1323c:	bcc	13250 <__assert_fail@plt+0x1964>
   13240:	ldr	r0, [sp, #56]	; 0x38
   13244:	eor	r0, r0, #1
   13248:	tst	r0, #1
   1324c:	beq	13124 <__assert_fail@plt+0x1838>
   13250:	ldr	r0, [sp, #52]	; 0x34
   13254:	mov	r1, sl
   13258:	add	r2, sp, #64	; 0x40
   1325c:	mov	r4, #0
   13260:	cmp	r6, r0
   13264:	mov	r0, #3
   13268:	movwcc	r4, #1
   1326c:	bl	11898 <__xstat64@plt>
   13270:	ldr	r2, [sp, #56]	; 0x38
   13274:	clz	r1, r0
   13278:	cmp	r0, #0
   1327c:	lsr	r1, r1, #5
   13280:	orr	r2, r2, r1
   13284:	str	r2, [sp, #56]	; 0x38
   13288:	beq	1329c <__assert_fail@plt+0x19b0>
   1328c:	ldr	r0, [sp, #56]	; 0x38
   13290:	eor	r0, r0, #1
   13294:	ands	r0, r4, r0
   13298:	beq	13124 <__assert_fail@plt+0x1838>
   1329c:	cmp	r6, #1
   132a0:	str	r8, [sp, #32]
   132a4:	str	r6, [sp, #52]	; 0x34
   132a8:	bne	13124 <__assert_fail@plt+0x1838>
   132ac:	mov	r0, r7
   132b0:	bl	16040 <__assert_fail@plt+0x4754>
   132b4:	mov	r0, r5
   132b8:	bl	16040 <__assert_fail@plt+0x4754>
   132bc:	ldr	r0, [sp, #20]
   132c0:	bl	16040 <__assert_fail@plt+0x4754>
   132c4:	b	13018 <__assert_fail@plt+0x172c>
   132c8:	mov	r0, r1
   132cc:	bl	16040 <__assert_fail@plt+0x4754>
   132d0:	ldr	r8, [sp, #36]	; 0x24
   132d4:	ldr	r7, [sp, #40]	; 0x28
   132d8:	ldr	r6, [sp, #44]	; 0x2c
   132dc:	b	13348 <__assert_fail@plt+0x1a5c>
   132e0:	ldr	r0, [sp, #48]	; 0x30
   132e4:	ldr	r8, [sp, #36]	; 0x24
   132e8:	ldr	r7, [sp, #40]	; 0x28
   132ec:	ldr	r5, [sp, #24]
   132f0:	ldr	r6, [sp, #44]	; 0x2c
   132f4:	tst	r0, #1
   132f8:	beq	13348 <__assert_fail@plt+0x1a5c>
   132fc:	movw	r1, #65510	; 0xffe6
   13300:	mov	r0, #0
   13304:	mov	r2, #5
   13308:	movt	r1, #1
   1330c:	bl	115a4 <dcgettext@plt>
   13310:	mov	r4, r0
   13314:	mov	r0, #4
   13318:	mov	r1, r6
   1331c:	bl	1ae78 <__assert_fail@plt+0x958c>
   13320:	mov	r3, r0
   13324:	mov	r0, #0
   13328:	mov	r1, #0
   1332c:	mov	r2, r4
   13330:	bl	11670 <error@plt>
   13334:	movw	r0, #4948	; 0x1354
   13338:	mov	r1, #1
   1333c:	movt	r0, #3
   13340:	strb	r1, [r0]
   13344:	b	13064 <__assert_fail@plt+0x1778>
   13348:	mov	r0, r6
   1334c:	bl	1185c <canonicalize_file_name@plt>
   13350:	mov	sl, r0
   13354:	cmp	r0, #0
   13358:	beq	1343c <__assert_fail@plt+0x1b50>
   1335c:	ldrb	r0, [sl]
   13360:	cmp	r0, #47	; 0x2f
   13364:	bne	1343c <__assert_fail@plt+0x1b50>
   13368:	mov	r0, sl
   1336c:	bl	11718 <strlen@plt>
   13370:	mov	r8, r0
   13374:	movw	r0, #5024	; 0x13a0
   13378:	movt	r0, #3
   1337c:	ldr	r7, [r0]
   13380:	cmp	r7, #0
   13384:	beq	136b4 <__assert_fail@plt+0x1dc8>
   13388:	str	r5, [sp, #24]
   1338c:	mov	r9, #0
   13390:	mov	r5, #0
   13394:	b	133c0 <__assert_fail@plt+0x1ad4>
   13398:	ldr	r4, [r7, #4]
   1339c:	mov	r0, r4
   133a0:	bl	11718 <strlen@plt>
   133a4:	cmp	r5, r0
   133a8:	movls	r6, r0
   133ac:	cmpls	r0, r8
   133b0:	bls	133fc <__assert_fail@plt+0x1b10>
   133b4:	ldr	r7, [r7, #28]
   133b8:	cmp	r7, #0
   133bc:	beq	1365c <__assert_fail@plt+0x1d70>
   133c0:	ldr	r0, [r7, #12]
   133c4:	movw	r1, #23
   133c8:	movt	r1, #2
   133cc:	bl	11520 <strcmp@plt>
   133d0:	cmp	r0, #0
   133d4:	beq	133b4 <__assert_fail@plt+0x1ac8>
   133d8:	cmp	r9, #0
   133dc:	beq	13398 <__assert_fail@plt+0x1aac>
   133e0:	ldrb	r0, [r9, #24]
   133e4:	tst	r0, #1
   133e8:	bne	13398 <__assert_fail@plt+0x1aac>
   133ec:	ldrb	r0, [r7, #24]
   133f0:	tst	r0, #1
   133f4:	beq	13398 <__assert_fail@plt+0x1aac>
   133f8:	b	133b4 <__assert_fail@plt+0x1ac8>
   133fc:	cmp	r6, #1
   13400:	beq	13430 <__assert_fail@plt+0x1b44>
   13404:	cmp	r6, r8
   13408:	beq	13418 <__assert_fail@plt+0x1b2c>
   1340c:	ldrb	r0, [sl, r6]
   13410:	cmp	r0, #47	; 0x2f
   13414:	bne	133b4 <__assert_fail@plt+0x1ac8>
   13418:	mov	r0, r4
   1341c:	mov	r1, sl
   13420:	mov	r2, r6
   13424:	bl	118b0 <strncmp@plt>
   13428:	cmp	r0, #0
   1342c:	bne	133b4 <__assert_fail@plt+0x1ac8>
   13430:	mov	r5, r6
   13434:	mov	r9, r7
   13438:	b	133b4 <__assert_fail@plt+0x1ac8>
   1343c:	mov	r0, sl
   13440:	bl	16040 <__assert_fail@plt+0x4754>
   13444:	movw	r0, #5024	; 0x13a0
   13448:	movt	r0, #3
   1344c:	ldr	r4, [r0]
   13450:	cmp	r4, #0
   13454:	beq	13608 <__assert_fail@plt+0x1d1c>
   13458:	mov	sl, r5
   1345c:	mov	r9, #0
   13460:	mov	r6, r4
   13464:	mvn	r1, #1
   13468:	mov	r5, r9
   1346c:	ldr	r0, [r6, #16]!
   13470:	adds	r1, r1, #1
   13474:	eor	r2, r0, r1
   13478:	mvn	r1, #0
   1347c:	adc	r3, r1, #0
   13480:	ldr	r1, [r6, #4]
   13484:	eor	r3, r1, r3
   13488:	orrs	r2, r2, r3
   1348c:	bne	13510 <__assert_fail@plt+0x1c24>
   13490:	ldr	r1, [r4, #4]
   13494:	mov	r0, #3
   13498:	add	r2, sp, #64	; 0x40
   1349c:	bl	11898 <__xstat64@plt>
   134a0:	cmp	r0, #0
   134a4:	beq	13504 <__assert_fail@plt+0x1c18>
   134a8:	bl	11748 <__errno_location@plt>
   134ac:	ldr	r0, [r0]
   134b0:	mvn	r1, #0
   134b4:	cmp	r0, #5
   134b8:	mvn	r0, #1
   134bc:	bne	1350c <__assert_fail@plt+0x1c20>
   134c0:	ldr	r2, [r4, #4]
   134c4:	mov	r0, #0
   134c8:	mov	r1, #3
   134cc:	bl	1b0f4 <__assert_fail@plt+0x9808>
   134d0:	movw	r2, #2580	; 0xa14
   134d4:	mov	r3, r0
   134d8:	mov	r0, #0
   134dc:	mov	r1, #5
   134e0:	movt	r2, #2
   134e4:	bl	11670 <error@plt>
   134e8:	movw	r0, #4948	; 0x1354
   134ec:	mov	r1, #1
   134f0:	movt	r0, #3
   134f4:	strb	r1, [r0]
   134f8:	mvn	r0, #1
   134fc:	mvn	r1, #0
   13500:	b	1350c <__assert_fail@plt+0x1c20>
   13504:	ldr	r0, [sp, #64]	; 0x40
   13508:	ldr	r1, [sp, #68]	; 0x44
   1350c:	strd	r0, [r6]
   13510:	ldr	r2, [sp, #60]	; 0x3c
   13514:	ldrd	r2, [r2]
   13518:	eor	r1, r3, r1
   1351c:	eor	r0, r2, r0
   13520:	orrs	r0, r0, r1
   13524:	bne	135a8 <__assert_fail@plt+0x1cbc>
   13528:	ldr	r0, [r4, #12]
   1352c:	movw	r1, #23
   13530:	movt	r1, #2
   13534:	bl	11520 <strcmp@plt>
   13538:	cmp	r0, #0
   1353c:	beq	135a8 <__assert_fail@plt+0x1cbc>
   13540:	cmp	r5, #0
   13544:	beq	13560 <__assert_fail@plt+0x1c74>
   13548:	ldrb	r0, [r5, #24]
   1354c:	tst	r0, #1
   13550:	bne	13560 <__assert_fail@plt+0x1c74>
   13554:	ldrb	r0, [r4, #24]
   13558:	tst	r0, #1
   1355c:	bne	135a8 <__assert_fail@plt+0x1cbc>
   13560:	ldr	r1, [r4, #4]
   13564:	mov	r0, #3
   13568:	add	r2, sp, #64	; 0x40
   1356c:	bl	11898 <__xstat64@plt>
   13570:	cmp	r0, #0
   13574:	bne	13598 <__assert_fail@plt+0x1cac>
   13578:	ldrd	r0, [r6]
   1357c:	ldr	r2, [sp, #64]	; 0x40
   13580:	ldr	r3, [sp, #68]	; 0x44
   13584:	mov	r9, r4
   13588:	eor	r1, r3, r1
   1358c:	eor	r0, r2, r0
   13590:	orrs	r0, r0, r1
   13594:	beq	135ac <__assert_fail@plt+0x1cc0>
   13598:	mvn	r1, #1
   1359c:	mvn	r0, #0
   135a0:	str	r1, [r6]
   135a4:	str	r0, [r6, #4]
   135a8:	mov	r9, r5
   135ac:	ldr	r4, [r4, #28]
   135b0:	cmp	r4, #0
   135b4:	bne	13460 <__assert_fail@plt+0x1b74>
   135b8:	cmp	r9, #0
   135bc:	mov	r5, sl
   135c0:	beq	13608 <__assert_fail@plt+0x1d1c>
   135c4:	ldrb	r0, [r9, #24]
   135c8:	ldr	r1, [r9, #12]
   135cc:	ldrd	r2, [r9]
   135d0:	mov	r6, #0
   135d4:	str	r6, [sp, #16]
   135d8:	str	r6, [sp, #12]
   135dc:	str	r1, [sp]
   135e0:	ubfx	r1, r0, #1, #1
   135e4:	and	r0, r0, #1
   135e8:	str	r0, [sp, #4]
   135ec:	mov	r0, r2
   135f0:	ldr	r2, [sp, #44]	; 0x2c
   135f4:	str	r1, [sp, #8]
   135f8:	mov	r1, r3
   135fc:	mov	r3, r2
   13600:	bl	141b0 <__assert_fail@plt+0x28c4>
   13604:	b	13064 <__assert_fail@plt+0x1778>
   13608:	ldr	r6, [sp, #44]	; 0x2c
   1360c:	ldr	r1, [sp, #60]	; 0x3c
   13610:	mov	r0, r6
   13614:	bl	15084 <__assert_fail@plt+0x3798>
   13618:	cmp	r0, #0
   1361c:	beq	13064 <__assert_fail@plt+0x1778>
   13620:	mov	r4, r0
   13624:	mov	r0, #0
   13628:	mov	r2, r6
   1362c:	mov	r3, #0
   13630:	str	r0, [sp]
   13634:	str	r0, [sp, #4]
   13638:	str	r0, [sp, #8]
   1363c:	str	r0, [sp, #12]
   13640:	str	r0, [sp, #16]
   13644:	mov	r0, #0
   13648:	mov	r1, r4
   1364c:	bl	141b0 <__assert_fail@plt+0x28c4>
   13650:	mov	r0, r4
   13654:	bl	16040 <__assert_fail@plt+0x4754>
   13658:	b	13064 <__assert_fail@plt+0x1778>
   1365c:	mov	r0, sl
   13660:	bl	16040 <__assert_fail@plt+0x4754>
   13664:	ldr	r8, [sp, #36]	; 0x24
   13668:	ldr	r7, [sp, #40]	; 0x28
   1366c:	ldr	r5, [sp, #24]
   13670:	cmp	r9, #0
   13674:	beq	13444 <__assert_fail@plt+0x1b58>
   13678:	ldr	r1, [r9, #4]
   1367c:	mov	r0, #3
   13680:	add	r2, sp, #64	; 0x40
   13684:	bl	11898 <__xstat64@plt>
   13688:	cmp	r0, #0
   1368c:	bne	13444 <__assert_fail@plt+0x1b58>
   13690:	ldr	r0, [sp, #60]	; 0x3c
   13694:	ldr	r2, [sp, #64]	; 0x40
   13698:	ldr	r3, [sp, #68]	; 0x44
   1369c:	ldrd	r0, [r0]
   136a0:	eor	r1, r3, r1
   136a4:	eor	r0, r2, r0
   136a8:	orrs	r0, r0, r1
   136ac:	bne	13444 <__assert_fail@plt+0x1b58>
   136b0:	b	135c4 <__assert_fail@plt+0x1cd8>
   136b4:	mov	r0, sl
   136b8:	bl	16040 <__assert_fail@plt+0x4754>
   136bc:	ldr	r8, [sp, #36]	; 0x24
   136c0:	ldr	r7, [sp, #40]	; 0x28
   136c4:	b	13444 <__assert_fail@plt+0x1b58>
   136c8:	movw	r0, #5024	; 0x13a0
   136cc:	movt	r0, #3
   136d0:	ldr	r1, [r0]
   136d4:	movw	r0, #4936	; 0x1348
   136d8:	movt	r0, #3
   136dc:	ldrb	r0, [r0]
   136e0:	str	r0, [sp, #60]	; 0x3c
   136e4:	mov	r0, #0
   136e8:	cmp	r1, #0
   136ec:	beq	13700 <__assert_fail@plt+0x1e14>
   136f0:	ldr	r1, [r1, #28]
   136f4:	add	r0, r0, #1
   136f8:	cmp	r1, #0
   136fc:	bne	136f0 <__assert_fail@plt+0x1e04>
   13700:	movw	r1, #20608	; 0x5080
   13704:	movw	r2, #20544	; 0x5040
   13708:	movw	r3, #20576	; 0x5060
   1370c:	mov	r6, #0
   13710:	movt	r1, #1
   13714:	movt	r2, #1
   13718:	movt	r3, #1
   1371c:	str	r1, [sp]
   13720:	mov	r1, #0
   13724:	bl	16624 <__assert_fail@plt+0x4d38>
   13728:	movw	r9, #5044	; 0x13b4
   1372c:	cmp	r0, #0
   13730:	movt	r9, #3
   13734:	str	r0, [r9]
   13738:	beq	13d28 <__assert_fail@plt+0x243c>
   1373c:	movw	r0, #5024	; 0x13a0
   13740:	movt	r0, #3
   13744:	ldr	r7, [r0]
   13748:	cmp	r7, #0
   1374c:	beq	13a18 <__assert_fail@plt+0x212c>
   13750:	mov	r6, #0
   13754:	ldrb	r0, [r7, #24]
   13758:	tst	r0, #2
   1375c:	beq	13774 <__assert_fail@plt+0x1e88>
   13760:	movw	r1, #5020	; 0x139c
   13764:	movt	r1, #3
   13768:	ldrb	r1, [r1]
   1376c:	cmp	r1, #0
   13770:	bne	13998 <__assert_fail@plt+0x20ac>
   13774:	tst	r0, #1
   13778:	beq	137a4 <__assert_fail@plt+0x1eb8>
   1377c:	movw	r0, #4936	; 0x1348
   13780:	movt	r0, #3
   13784:	ldrb	r0, [r0]
   13788:	cmp	r0, #0
   1378c:	bne	137a4 <__assert_fail@plt+0x1eb8>
   13790:	movw	r0, #4937	; 0x1349
   13794:	movt	r0, #3
   13798:	ldrb	r0, [r0]
   1379c:	cmp	r0, #1
   137a0:	bne	13998 <__assert_fail@plt+0x20ac>
   137a4:	ldr	r4, [r7, #12]
   137a8:	cmp	r4, #0
   137ac:	beq	137e8 <__assert_fail@plt+0x1efc>
   137b0:	movw	r0, #4928	; 0x1340
   137b4:	movt	r0, #3
   137b8:	ldr	r5, [r0]
   137bc:	cmp	r5, #0
   137c0:	beq	137e8 <__assert_fail@plt+0x1efc>
   137c4:	ldr	r1, [r5]
   137c8:	mov	r0, r4
   137cc:	bl	11520 <strcmp@plt>
   137d0:	cmp	r0, #0
   137d4:	beq	137e8 <__assert_fail@plt+0x1efc>
   137d8:	ldr	r5, [r5, #4]
   137dc:	cmp	r5, #0
   137e0:	bne	137c4 <__assert_fail@plt+0x1ed8>
   137e4:	b	13998 <__assert_fail@plt+0x20ac>
   137e8:	cmp	r4, #0
   137ec:	beq	13824 <__assert_fail@plt+0x1f38>
   137f0:	movw	r0, #4932	; 0x1344
   137f4:	movt	r0, #3
   137f8:	ldr	r5, [r0]
   137fc:	cmp	r5, #0
   13800:	beq	13824 <__assert_fail@plt+0x1f38>
   13804:	ldr	r1, [r5]
   13808:	mov	r0, r4
   1380c:	bl	11520 <strcmp@plt>
   13810:	cmp	r0, #0
   13814:	beq	13998 <__assert_fail@plt+0x20ac>
   13818:	ldr	r5, [r5, #4]
   1381c:	cmp	r5, #0
   13820:	bne	13804 <__assert_fail@plt+0x1f18>
   13824:	ldr	r1, [r7, #4]
   13828:	mov	r0, #3
   1382c:	add	r2, sp, #64	; 0x40
   13830:	bl	11898 <__xstat64@plt>
   13834:	cmn	r0, #1
   13838:	beq	13998 <__assert_fail@plt+0x20ac>
   1383c:	ldr	r0, [r9]
   13840:	cmp	r0, #0
   13844:	beq	139a4 <__assert_fail@plt+0x20b8>
   13848:	ldr	r1, [sp, #64]	; 0x40
   1384c:	ldr	r2, [sp, #68]	; 0x44
   13850:	str	r1, [fp, #-56]	; 0xffffffc8
   13854:	sub	r1, fp, #56	; 0x38
   13858:	str	r2, [fp, #-52]	; 0xffffffcc
   1385c:	bl	16370 <__assert_fail@plt+0x4a84>
   13860:	cmp	r0, #0
   13864:	beq	139a4 <__assert_fail@plt+0x20b8>
   13868:	ldr	r4, [r0, #16]
   1386c:	cmp	r4, #0
   13870:	beq	139a4 <__assert_fail@plt+0x20b8>
   13874:	ldr	sl, [r4, #8]
   13878:	ldr	r0, [sl, #4]
   1387c:	str	r0, [sp, #48]	; 0x30
   13880:	bl	11718 <strlen@plt>
   13884:	str	r0, [sp, #56]	; 0x38
   13888:	ldr	r0, [r7, #4]
   1388c:	str	r0, [sp, #44]	; 0x2c
   13890:	bl	11718 <strlen@plt>
   13894:	str	r0, [sp, #52]	; 0x34
   13898:	ldr	r0, [sl, #8]
   1389c:	mov	r8, #0
   138a0:	cmp	r0, #0
   138a4:	beq	138d0 <__assert_fail@plt+0x1fe4>
   138a8:	ldr	r5, [r7, #8]
   138ac:	cmp	r5, #0
   138b0:	beq	138d0 <__assert_fail@plt+0x1fe4>
   138b4:	bl	11718 <strlen@plt>
   138b8:	mov	r8, r0
   138bc:	mov	r0, r5
   138c0:	bl	11718 <strlen@plt>
   138c4:	cmp	r8, r0
   138c8:	mov	r8, #0
   138cc:	movwcc	r8, #1
   138d0:	movw	r0, #4949	; 0x1355
   138d4:	movt	r0, #3
   138d8:	ldrb	r0, [r0]
   138dc:	cmp	r0, #0
   138e0:	bne	13910 <__assert_fail@plt+0x2024>
   138e4:	ldrb	r0, [r7, #24]
   138e8:	tst	r0, #2
   138ec:	beq	13910 <__assert_fail@plt+0x2024>
   138f0:	ldrb	r0, [sl, #24]
   138f4:	tst	r0, #2
   138f8:	beq	13910 <__assert_fail@plt+0x2024>
   138fc:	ldr	r1, [r7]
   13900:	ldr	r0, [sl]
   13904:	bl	11520 <strcmp@plt>
   13908:	cmp	r0, #0
   1390c:	bne	139a4 <__assert_fail@plt+0x20b8>
   13910:	ldr	r5, [r7]
   13914:	mov	r1, #47	; 0x2f
   13918:	mov	r0, r5
   1391c:	bl	11724 <strchr@plt>
   13920:	cmp	r0, #0
   13924:	beq	1393c <__assert_fail@plt+0x2050>
   13928:	ldr	r0, [sl]
   1392c:	mov	r1, #47	; 0x2f
   13930:	bl	11724 <strchr@plt>
   13934:	cmp	r0, #0
   13938:	beq	1398c <__assert_fail@plt+0x20a0>
   1393c:	ldr	r0, [sp, #56]	; 0x38
   13940:	ldr	r1, [sp, #52]	; 0x34
   13944:	cmp	r0, r1
   13948:	mov	r0, #0
   1394c:	eor	r1, r8, #1
   13950:	movwhi	r0, #1
   13954:	tst	r0, r1
   13958:	bne	139ec <__assert_fail@plt+0x2100>
   1395c:	ldr	r0, [sl]
   13960:	mov	r1, r5
   13964:	bl	11520 <strcmp@plt>
   13968:	cmp	r0, #0
   1396c:	mov	r0, r7
   13970:	beq	139fc <__assert_fail@plt+0x2110>
   13974:	ldr	r0, [sp, #44]	; 0x2c
   13978:	ldr	r1, [sp, #48]	; 0x30
   1397c:	bl	11520 <strcmp@plt>
   13980:	cmp	r0, #0
   13984:	mov	r0, r7
   13988:	bne	139fc <__assert_fail@plt+0x2110>
   1398c:	str	r7, [r4, #8]
   13990:	mov	r0, sl
   13994:	b	139fc <__assert_fail@plt+0x2110>
   13998:	ldrd	r0, [r7, #16]
   1399c:	str	r1, [sp, #68]	; 0x44
   139a0:	str	r0, [sp, #64]	; 0x40
   139a4:	mov	r0, #24
   139a8:	bl	1bdc8 <__assert_fail@plt+0xa4dc>
   139ac:	mov	r4, r0
   139b0:	ldr	r0, [sp, #64]	; 0x40
   139b4:	ldr	r1, [sp, #68]	; 0x44
   139b8:	stm	r4, {r0, r1, r7}
   139bc:	ldr	r0, [r9]
   139c0:	mov	r1, r4
   139c4:	str	r6, [r4, #12]
   139c8:	bl	17178 <__assert_fail@plt+0x588c>
   139cc:	cmp	r0, #0
   139d0:	beq	13d28 <__assert_fail@plt+0x243c>
   139d4:	str	r4, [r0, #16]
   139d8:	mov	r6, r4
   139dc:	ldr	r7, [r7, #28]
   139e0:	cmp	r7, #0
   139e4:	bne	13754 <__assert_fail@plt+0x1e68>
   139e8:	b	13a18 <__assert_fail@plt+0x212c>
   139ec:	cmp	sl, #0
   139f0:	mov	r0, sl
   139f4:	str	r7, [r4, #8]
   139f8:	beq	139a4 <__assert_fail@plt+0x20b8>
   139fc:	ldr	r1, [sp, #60]	; 0x3c
   13a00:	ldr	r7, [r7, #28]
   13a04:	cmp	r1, #0
   13a08:	bne	139e0 <__assert_fail@plt+0x20f4>
   13a0c:	bl	19708 <__assert_fail@plt+0x7e1c>
   13a10:	cmp	r7, #0
   13a14:	bne	13754 <__assert_fail@plt+0x1e68>
   13a18:	ldr	r0, [sp, #60]	; 0x3c
   13a1c:	cmp	r0, #0
   13a20:	bne	13a70 <__assert_fail@plt+0x2184>
   13a24:	movw	r1, #5024	; 0x13a0
   13a28:	mov	r0, #0
   13a2c:	cmp	r6, #0
   13a30:	movt	r1, #3
   13a34:	str	r0, [r1]
   13a38:	beq	13a60 <__assert_fail@plt+0x2174>
   13a3c:	ldr	r1, [r6, #8]
   13a40:	str	r0, [r1, #28]
   13a44:	mov	r0, r1
   13a48:	ldr	r6, [r6, #12]
   13a4c:	cmp	r6, #0
   13a50:	bne	13a3c <__assert_fail@plt+0x2150>
   13a54:	movw	r0, #5024	; 0x13a0
   13a58:	movt	r0, #3
   13a5c:	str	r1, [r0]
   13a60:	ldr	r0, [r9]
   13a64:	bl	16928 <__assert_fail@plt+0x503c>
   13a68:	mov	r0, #0
   13a6c:	str	r0, [r9]
   13a70:	movw	r0, #5024	; 0x13a0
   13a74:	movt	r0, #3
   13a78:	ldr	r4, [r0]
   13a7c:	cmp	r4, #0
   13a80:	beq	13ad4 <__assert_fail@plt+0x21e8>
   13a84:	mov	r5, #1
   13a88:	mov	r6, #0
   13a8c:	ldrb	r0, [r4, #24]
   13a90:	ldr	r1, [r4, #12]
   13a94:	ldrd	r2, [r4]
   13a98:	str	r5, [sp, #16]
   13a9c:	str	r6, [sp, #12]
   13aa0:	str	r1, [sp]
   13aa4:	ubfx	r1, r0, #1, #1
   13aa8:	and	r0, r0, #1
   13aac:	str	r1, [sp, #8]
   13ab0:	str	r0, [sp, #4]
   13ab4:	mov	r0, r2
   13ab8:	mov	r1, r3
   13abc:	mov	r2, #0
   13ac0:	mov	r3, #0
   13ac4:	bl	141b0 <__assert_fail@plt+0x28c4>
   13ac8:	ldr	r4, [r4, #28]
   13acc:	cmp	r4, #0
   13ad0:	bne	13a8c <__assert_fail@plt+0x21a0>
   13ad4:	movw	r0, #4945	; 0x1351
   13ad8:	movt	r0, #3
   13adc:	ldrb	r0, [r0]
   13ae0:	cmp	r0, #1
   13ae4:	bne	13cb8 <__assert_fail@plt+0x23cc>
   13ae8:	movw	r0, #4949	; 0x1355
   13aec:	movt	r0, #3
   13af0:	ldrb	r0, [r0]
   13af4:	cmp	r0, #1
   13af8:	bne	13b4c <__assert_fail@plt+0x2260>
   13afc:	movw	r0, #4472	; 0x1178
   13b00:	movw	r1, #4952	; 0x1358
   13b04:	mov	r3, #0
   13b08:	movt	r0, #3
   13b0c:	movt	r1, #3
   13b10:	ldrb	r2, [r0, #24]
   13b14:	mov	r0, #0
   13b18:	str	r1, [sp, #12]
   13b1c:	movw	r1, #2246	; 0x8c6
   13b20:	str	r0, [sp]
   13b24:	str	r0, [sp, #4]
   13b28:	str	r0, [sp, #8]
   13b2c:	str	r0, [sp, #16]
   13b30:	movw	r0, #65299	; 0xff13
   13b34:	movt	r1, #2
   13b38:	movt	r0, #1
   13b3c:	cmp	r2, #0
   13b40:	mov	r2, #0
   13b44:	moveq	r1, r0
   13b48:	bl	141b0 <__assert_fail@plt+0x28c4>
   13b4c:	movw	r0, #5040	; 0x13b0
   13b50:	movt	r0, #3
   13b54:	ldr	r0, [r0]
   13b58:	cmp	r0, #0
   13b5c:	beq	13ccc <__assert_fail@plt+0x23e0>
   13b60:	movw	r7, #4916	; 0x1334
   13b64:	movw	r9, #5032	; 0x13a8
   13b68:	mov	r6, #0
   13b6c:	add	r4, sp, #64	; 0x40
   13b70:	mov	sl, #32
   13b74:	movt	r7, #3
   13b78:	movt	r9, #3
   13b7c:	movw	r0, #5028	; 0x13a4
   13b80:	movt	r0, #3
   13b84:	ldr	r1, [r0]
   13b88:	cmp	r1, #0
   13b8c:	beq	13c6c <__assert_fail@plt+0x2380>
   13b90:	mov	r8, #0
   13b94:	b	13bc0 <__assert_fail@plt+0x22d4>
   13b98:	ldr	r1, [r7]
   13b9c:	bl	114f0 <fputs_unlocked@plt>
   13ba0:	mov	r0, r5
   13ba4:	bl	16040 <__assert_fail@plt+0x4754>
   13ba8:	movw	r0, #5028	; 0x13a4
   13bac:	add	r8, r8, #1
   13bb0:	movt	r0, #3
   13bb4:	ldr	r1, [r0]
   13bb8:	cmp	r8, r1
   13bbc:	bcs	13c6c <__assert_fail@plt+0x2380>
   13bc0:	movw	r0, #5036	; 0x13ac
   13bc4:	cmp	r8, #0
   13bc8:	movt	r0, #3
   13bcc:	ldr	r0, [r0]
   13bd0:	ldr	r0, [r0, r6, lsl #2]
   13bd4:	ldr	r5, [r0, r8, lsl #2]
   13bd8:	beq	13bfc <__assert_fail@plt+0x2310>
   13bdc:	ldr	r0, [r7]
   13be0:	ldr	r2, [r0, #20]
   13be4:	ldr	r3, [r0, #24]
   13be8:	cmp	r2, r3
   13bec:	bcs	13c54 <__assert_fail@plt+0x2368>
   13bf0:	add	r3, r2, #1
   13bf4:	str	r3, [r0, #20]
   13bf8:	strb	sl, [r2]
   13bfc:	ldr	r0, [r9]
   13c00:	ldr	r0, [r0, r8, lsl #2]
   13c04:	ldr	r3, [r0, #16]
   13c08:	ldr	r2, [r0, #20]
   13c0c:	sub	r0, r8, r1
   13c10:	mov	r1, r4
   13c14:	add	r0, r0, #1
   13c18:	clz	r0, r0
   13c1c:	lsr	r0, r0, #5
   13c20:	str	r3, [sp, #64]	; 0x40
   13c24:	lsl	r3, r0, #3
   13c28:	mov	r0, r5
   13c2c:	bl	18680 <__assert_fail@plt+0x6d94>
   13c30:	mov	r5, r0
   13c34:	cmp	r0, #0
   13c38:	bne	13b98 <__assert_fail@plt+0x22ac>
   13c3c:	movw	r0, #5036	; 0x13ac
   13c40:	movt	r0, #3
   13c44:	ldr	r0, [r0]
   13c48:	ldr	r0, [r0, r6, lsl #2]
   13c4c:	ldr	r0, [r0, r8, lsl #2]
   13c50:	b	13b98 <__assert_fail@plt+0x22ac>
   13c54:	mov	r1, #32
   13c58:	bl	117e4 <__overflow@plt>
   13c5c:	movw	r0, #5028	; 0x13a4
   13c60:	movt	r0, #3
   13c64:	ldr	r1, [r0]
   13c68:	b	13bfc <__assert_fail@plt+0x2310>
   13c6c:	ldr	r0, [r7]
   13c70:	ldr	r1, [r0, #20]
   13c74:	ldr	r2, [r0, #24]
   13c78:	cmp	r1, r2
   13c7c:	bcs	13cac <__assert_fail@plt+0x23c0>
   13c80:	add	r2, r1, #1
   13c84:	str	r2, [r0, #20]
   13c88:	mov	r0, #10
   13c8c:	strb	r0, [r1]
   13c90:	movw	r0, #5040	; 0x13b0
   13c94:	add	r6, r6, #1
   13c98:	movt	r0, #3
   13c9c:	ldr	r0, [r0]
   13ca0:	cmp	r6, r0
   13ca4:	bcc	13b7c <__assert_fail@plt+0x2290>
   13ca8:	b	13ccc <__assert_fail@plt+0x23e0>
   13cac:	mov	r1, #10
   13cb0:	bl	117e4 <__overflow@plt>
   13cb4:	b	13c90 <__assert_fail@plt+0x23a4>
   13cb8:	movw	r0, #4948	; 0x1354
   13cbc:	movt	r0, #3
   13cc0:	ldrb	r0, [r0]
   13cc4:	cmp	r0, #0
   13cc8:	beq	13e48 <__assert_fail@plt+0x255c>
   13ccc:	movw	r0, #4948	; 0x1354
   13cd0:	movt	r0, #3
   13cd4:	ldrb	r0, [r0]
   13cd8:	sub	sp, fp, #28
   13cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce0:	mov	r0, #2
   13ce4:	str	r0, [r7]
   13ce8:	b	12314 <__assert_fail@plt+0xa28>
   13cec:	ldr	r0, [r9]
   13cf0:	movw	r6, #64943	; 0xfdaf
   13cf4:	movt	r6, #1
   13cf8:	cmp	r0, #0
   13cfc:	bne	12620 <__assert_fail@plt+0xd34>
   13d00:	movw	r1, #64040	; 0xfa28
   13d04:	mov	r0, #0
   13d08:	mov	r2, #5
   13d0c:	mov	r4, #0
   13d10:	movt	r1, #1
   13d14:	bl	115a4 <dcgettext@plt>
   13d18:	mov	r6, r0
   13d1c:	b	12620 <__assert_fail@plt+0xd34>
   13d20:	mov	r0, #1
   13d24:	bl	119f0 <__assert_fail@plt+0x104>
   13d28:	bl	1c304 <__assert_fail@plt+0xaa18>
   13d2c:	movw	r0, #4812	; 0x12cc
   13d30:	movw	r2, #63951	; 0xf9cf
   13d34:	movw	r6, #63917	; 0xf9ad
   13d38:	movw	r7, #63935	; 0xf9bf
   13d3c:	mov	r1, #0
   13d40:	movt	r0, #3
   13d44:	movt	r2, #1
   13d48:	movt	r6, #1
   13d4c:	movt	r7, #1
   13d50:	ldr	r3, [r0]
   13d54:	movw	r0, #4916	; 0x1334
   13d58:	stm	sp, {r6, r7}
   13d5c:	str	r2, [sp, #8]
   13d60:	movw	r2, #63903	; 0xf99f
   13d64:	str	r1, [sp, #12]
   13d68:	movw	r1, #63798	; 0xf936
   13d6c:	movt	r0, #3
   13d70:	movt	r1, #1
   13d74:	movt	r2, #1
   13d78:	ldr	r0, [r0]
   13d7c:	bl	1bb94 <__assert_fail@plt+0xa2a8>
   13d80:	mov	r0, #0
   13d84:	bl	11700 <exit@plt>
   13d88:	mov	r0, #0
   13d8c:	bl	119f0 <__assert_fail@plt+0x104>
   13d90:	movw	r0, #65201	; 0xfeb1
   13d94:	movw	r1, #65155	; 0xfe83
   13d98:	movw	r3, #65215	; 0xfebf
   13d9c:	movw	r2, #425	; 0x1a9
   13da0:	movt	r0, #1
   13da4:	movt	r1, #1
   13da8:	movt	r3, #1
   13dac:	bl	118ec <__assert_fail@plt>
   13db0:	movw	r0, #63888	; 0xf990
   13db4:	movw	r3, #63897	; 0xf999
   13db8:	movt	r0, #1
   13dbc:	movt	r3, #1
   13dc0:	b	13de8 <__assert_fail@plt+0x24fc>
   13dc4:	movw	r0, #63888	; 0xf990
   13dc8:	movw	r3, #63885	; 0xf98d
   13dcc:	movt	r0, #1
   13dd0:	movt	r3, #1
   13dd4:	b	13de8 <__assert_fail@plt+0x24fc>
   13dd8:	movw	r0, #63888	; 0xf990
   13ddc:	movw	r3, #63900	; 0xf99c
   13de0:	movt	r0, #1
   13de4:	movt	r3, #1
   13de8:	str	r0, [sp]
   13dec:	ldr	r2, [sp, #56]	; 0x38
   13df0:	mov	r0, #0
   13df4:	mov	r1, #0
   13df8:	bl	11670 <error@plt>
   13dfc:	mov	r0, #1
   13e00:	bl	119f0 <__assert_fail@plt+0x104>
   13e04:	movw	r1, #4920	; 0x1338
   13e08:	movw	r3, #232	; 0xe8
   13e0c:	movt	r1, #3
   13e10:	movt	r3, #2
   13e14:	ldr	r2, [r1]
   13e18:	ldr	r1, [sp, #64]	; 0x40
   13e1c:	str	r2, [sp]
   13e20:	mov	r2, #66	; 0x42
   13e24:	bl	1c384 <__assert_fail@plt+0xaa98>
   13e28:	movw	r0, #65380	; 0xff64
   13e2c:	movw	r1, #65155	; 0xfe83
   13e30:	movw	r3, #65403	; 0xff7b
   13e34:	movw	r2, #565	; 0x235
   13e38:	movt	r0, #1
   13e3c:	movt	r1, #1
   13e40:	movt	r3, #1
   13e44:	bl	118ec <__assert_fail@plt>
   13e48:	movw	r1, #64097	; 0xfa61
   13e4c:	mov	r0, #0
   13e50:	mov	r2, #5
   13e54:	movt	r1, #1
   13e58:	bl	115a4 <dcgettext@plt>
   13e5c:	mov	r2, r0
   13e60:	mov	r0, #1
   13e64:	mov	r1, #0
   13e68:	bl	11670 <error@plt>
   13e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e70:	add	fp, sp, #28
   13e74:	sub	sp, sp, #12
   13e78:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   13e7c:	movw	r6, #4472	; 0x1178
   13e80:	movw	r4, #5028	; 0x13a4
   13e84:	movw	r7, #5032	; 0x13a8
   13e88:	mov	r8, r0
   13e8c:	mov	sl, #1
   13e90:	movt	r6, #3
   13e94:	movt	r4, #3
   13e98:	movt	r7, #3
   13e9c:	add	r1, r6, #56	; 0x38
   13ea0:	stmib	sp, {r0, r1}
   13ea4:	mov	r0, r8
   13ea8:	mov	r1, #44	; 0x2c
   13eac:	mov	r5, r8
   13eb0:	bl	11724 <strchr@plt>
   13eb4:	cmp	r0, #0
   13eb8:	mov	r8, #0
   13ebc:	movne	r1, #0
   13ec0:	strbne	r1, [r0], #1
   13ec4:	mov	r1, r5
   13ec8:	movne	r8, r0
   13ecc:	ldr	r0, [r6, #4]
   13ed0:	bl	11520 <strcmp@plt>
   13ed4:	cmp	r0, #0
   13ed8:	beq	13fc0 <__assert_fail@plt+0x26d4>
   13edc:	ldr	r0, [r6, #32]
   13ee0:	mov	r1, r5
   13ee4:	bl	11520 <strcmp@plt>
   13ee8:	cmp	r0, #0
   13eec:	beq	13fc8 <__assert_fail@plt+0x26dc>
   13ef0:	ldr	r0, [r6, #60]	; 0x3c
   13ef4:	mov	r1, r5
   13ef8:	bl	11520 <strcmp@plt>
   13efc:	cmp	r0, #0
   13f00:	beq	13fd0 <__assert_fail@plt+0x26e4>
   13f04:	ldr	r0, [r6, #88]	; 0x58
   13f08:	mov	r1, r5
   13f0c:	bl	11520 <strcmp@plt>
   13f10:	cmp	r0, #0
   13f14:	beq	13fd8 <__assert_fail@plt+0x26ec>
   13f18:	ldr	r0, [r6, #116]	; 0x74
   13f1c:	mov	r1, r5
   13f20:	bl	11520 <strcmp@plt>
   13f24:	cmp	r0, #0
   13f28:	beq	13fe0 <__assert_fail@plt+0x26f4>
   13f2c:	ldr	r0, [r6, #144]	; 0x90
   13f30:	mov	r1, r5
   13f34:	bl	11520 <strcmp@plt>
   13f38:	cmp	r0, #0
   13f3c:	beq	13fe8 <__assert_fail@plt+0x26fc>
   13f40:	ldr	r0, [r6, #172]	; 0xac
   13f44:	mov	r1, r5
   13f48:	bl	11520 <strcmp@plt>
   13f4c:	cmp	r0, #0
   13f50:	beq	13ff0 <__assert_fail@plt+0x2704>
   13f54:	ldr	r0, [r6, #200]	; 0xc8
   13f58:	mov	r1, r5
   13f5c:	bl	11520 <strcmp@plt>
   13f60:	cmp	r0, #0
   13f64:	beq	13ff8 <__assert_fail@plt+0x270c>
   13f68:	ldr	r0, [r6, #228]	; 0xe4
   13f6c:	mov	r1, r5
   13f70:	bl	11520 <strcmp@plt>
   13f74:	cmp	r0, #0
   13f78:	beq	14000 <__assert_fail@plt+0x2714>
   13f7c:	ldr	r0, [r6, #256]	; 0x100
   13f80:	mov	r1, r5
   13f84:	bl	11520 <strcmp@plt>
   13f88:	cmp	r0, #0
   13f8c:	beq	14008 <__assert_fail@plt+0x271c>
   13f90:	ldr	r0, [r6, #284]	; 0x11c
   13f94:	mov	r1, r5
   13f98:	bl	11520 <strcmp@plt>
   13f9c:	cmp	r0, #0
   13fa0:	beq	14010 <__assert_fail@plt+0x2724>
   13fa4:	ldr	r0, [r6, #312]	; 0x138
   13fa8:	mov	r1, r5
   13fac:	bl	11520 <strcmp@plt>
   13fb0:	mov	r1, #11
   13fb4:	cmp	r0, #0
   13fb8:	beq	14014 <__assert_fail@plt+0x2728>
   13fbc:	b	14190 <__assert_fail@plt+0x28a4>
   13fc0:	mov	r1, #0
   13fc4:	b	14014 <__assert_fail@plt+0x2728>
   13fc8:	mov	r1, #1
   13fcc:	b	14014 <__assert_fail@plt+0x2728>
   13fd0:	mov	r1, #2
   13fd4:	b	14014 <__assert_fail@plt+0x2728>
   13fd8:	mov	r1, #3
   13fdc:	b	14014 <__assert_fail@plt+0x2728>
   13fe0:	mov	r1, #4
   13fe4:	b	14014 <__assert_fail@plt+0x2728>
   13fe8:	mov	r1, #5
   13fec:	b	14014 <__assert_fail@plt+0x2728>
   13ff0:	mov	r1, #6
   13ff4:	b	14014 <__assert_fail@plt+0x2728>
   13ff8:	mov	r1, #7
   13ffc:	b	14014 <__assert_fail@plt+0x2728>
   14000:	mov	r1, #8
   14004:	b	14014 <__assert_fail@plt+0x2728>
   14008:	mov	r1, #9
   1400c:	b	14014 <__assert_fail@plt+0x2728>
   14010:	mov	r1, #10
   14014:	rsb	r0, r1, r1, lsl #3
   14018:	add	r9, r6, r0, lsl #2
   1401c:	mov	r5, r9
   14020:	ldrb	r0, [r5, #24]!
   14024:	cmp	r0, #0
   14028:	bne	14114 <__assert_fail@plt+0x2828>
   1402c:	cmp	r1, #11
   14030:	bhi	14150 <__assert_fail@plt+0x2864>
   14034:	movw	r0, #4075	; 0xfeb
   14038:	tst	r0, sl, lsl r1
   1403c:	beq	14084 <__assert_fail@plt+0x2798>
   14040:	ldr	r0, [r4]
   14044:	mov	r2, #4
   14048:	add	r1, r0, #1
   1404c:	ldr	r0, [r7]
   14050:	str	r1, [r4]
   14054:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   14058:	ldr	r1, [r4]
   1405c:	str	r0, [r7]
   14060:	add	r0, r0, r1, lsl #2
   14064:	str	r9, [r0, #-4]
   14068:	ldrb	r0, [r5]
   1406c:	cmp	r0, #0
   14070:	bne	14170 <__assert_fail@plt+0x2884>
   14074:	cmp	r8, #0
   14078:	strb	sl, [r5]
   1407c:	bne	13ea4 <__assert_fail@plt+0x25b8>
   14080:	b	14104 <__assert_fail@plt+0x2818>
   14084:	cmp	r1, #2
   14088:	bne	140c8 <__assert_fail@plt+0x27dc>
   1408c:	ldr	r0, [r4]
   14090:	mov	r2, #4
   14094:	add	r1, r0, #1
   14098:	ldr	r0, [r7]
   1409c:	str	r1, [r4]
   140a0:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   140a4:	ldr	r1, [r4]
   140a8:	str	r0, [r7]
   140ac:	add	r0, r0, r1, lsl #2
   140b0:	ldr	r1, [sp, #8]
   140b4:	str	r1, [r0, #-4]
   140b8:	movw	r0, #65127	; 0xfe67
   140bc:	movt	r0, #1
   140c0:	str	r0, [r6, #68]	; 0x44
   140c4:	b	14068 <__assert_fail@plt+0x277c>
   140c8:	ldr	r0, [r4]
   140cc:	mov	r2, #4
   140d0:	add	r1, r0, #1
   140d4:	ldr	r0, [r7]
   140d8:	str	r1, [r4]
   140dc:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   140e0:	ldr	r1, [r4]
   140e4:	str	r0, [r7]
   140e8:	add	r0, r0, r1, lsl #2
   140ec:	add	r1, r6, #112	; 0x70
   140f0:	str	r1, [r0, #-4]
   140f4:	movw	r0, #65132	; 0xfe6c
   140f8:	movt	r0, #1
   140fc:	str	r0, [r6, #124]	; 0x7c
   14100:	b	14068 <__assert_fail@plt+0x277c>
   14104:	ldr	r0, [sp, #4]
   14108:	sub	sp, fp, #28
   1410c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14110:	b	16040 <__assert_fail@plt+0x4754>
   14114:	movw	r1, #65081	; 0xfe39
   14118:	mov	r0, #0
   1411c:	mov	r2, #5
   14120:	movt	r1, #1
   14124:	bl	115a4 <dcgettext@plt>
   14128:	mov	r4, r0
   1412c:	ldr	r0, [r9, #4]
   14130:	bl	1b3a0 <__assert_fail@plt+0x9ab4>
   14134:	mov	r3, r0
   14138:	mov	r0, #0
   1413c:	mov	r1, #0
   14140:	mov	r2, r4
   14144:	bl	11670 <error@plt>
   14148:	mov	r0, #1
   1414c:	bl	119f0 <__assert_fail@plt+0x104>
   14150:	movw	r0, #65138	; 0xfe72
   14154:	movw	r1, #65155	; 0xfe83
   14158:	movw	r3, #65164	; 0xfe8c
   1415c:	mov	r2, #496	; 0x1f0
   14160:	movt	r0, #1
   14164:	movt	r1, #1
   14168:	movt	r3, #1
   1416c:	bl	118ec <__assert_fail@plt>
   14170:	movw	r0, #65201	; 0xfeb1
   14174:	movw	r1, #65155	; 0xfe83
   14178:	movw	r3, #65215	; 0xfebf
   1417c:	movw	r2, #425	; 0x1a9
   14180:	movt	r0, #1
   14184:	movt	r1, #1
   14188:	movt	r3, #1
   1418c:	bl	118ec <__assert_fail@plt>
   14190:	movw	r1, #65047	; 0xfe17
   14194:	mov	r0, #0
   14198:	mov	r2, #5
   1419c:	movt	r1, #1
   141a0:	bl	115a4 <dcgettext@plt>
   141a4:	mov	r4, r0
   141a8:	mov	r0, r5
   141ac:	b	14130 <__assert_fail@plt+0x2844>
   141b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141b4:	add	fp, sp, #28
   141b8:	sub	sp, sp, #4
   141bc:	vpush	{d8-d12}
   141c0:	sub	sp, sp, #936	; 0x3a8
   141c4:	ldr	sl, [fp, #16]
   141c8:	mov	r7, r3
   141cc:	mov	r8, r0
   141d0:	str	r2, [sp, #76]	; 0x4c
   141d4:	str	r1, [sp, #80]	; 0x50
   141d8:	cmp	sl, #0
   141dc:	beq	141f4 <__assert_fail@plt+0x2908>
   141e0:	movw	r0, #5020	; 0x139c
   141e4:	movt	r0, #3
   141e8:	ldrb	r0, [r0]
   141ec:	cmp	r0, #0
   141f0:	bne	14e50 <__assert_fail@plt+0x3564>
   141f4:	ldr	r0, [fp, #12]
   141f8:	cmp	r0, #0
   141fc:	beq	14228 <__assert_fail@plt+0x293c>
   14200:	movw	r0, #4936	; 0x1348
   14204:	movt	r0, #3
   14208:	ldrb	r0, [r0]
   1420c:	cmp	r0, #0
   14210:	bne	14228 <__assert_fail@plt+0x293c>
   14214:	movw	r0, #4937	; 0x1349
   14218:	movt	r0, #3
   1421c:	ldrb	r0, [r0]
   14220:	cmp	r0, #1
   14224:	bne	14e50 <__assert_fail@plt+0x3564>
   14228:	ldr	r9, [fp, #8]
   1422c:	cmp	r9, #0
   14230:	beq	1426c <__assert_fail@plt+0x2980>
   14234:	movw	r0, #4928	; 0x1340
   14238:	movt	r0, #3
   1423c:	ldr	r4, [r0]
   14240:	cmp	r4, #0
   14244:	beq	1426c <__assert_fail@plt+0x2980>
   14248:	ldr	r1, [r4]
   1424c:	mov	r0, r9
   14250:	bl	11520 <strcmp@plt>
   14254:	cmp	r0, #0
   14258:	beq	1426c <__assert_fail@plt+0x2980>
   1425c:	ldr	r4, [r4, #4]
   14260:	cmp	r4, #0
   14264:	bne	14248 <__assert_fail@plt+0x295c>
   14268:	b	14e50 <__assert_fail@plt+0x3564>
   1426c:	cmp	r9, #0
   14270:	beq	142a8 <__assert_fail@plt+0x29bc>
   14274:	movw	r0, #4932	; 0x1344
   14278:	movt	r0, #3
   1427c:	ldr	r4, [r0]
   14280:	cmp	r4, #0
   14284:	beq	142a8 <__assert_fail@plt+0x29bc>
   14288:	ldr	r1, [r4]
   1428c:	mov	r0, r9
   14290:	bl	11520 <strcmp@plt>
   14294:	cmp	r0, #0
   14298:	beq	14e50 <__assert_fail@plt+0x3564>
   1429c:	ldr	r4, [r4, #4]
   142a0:	cmp	r4, #0
   142a4:	bne	14288 <__assert_fail@plt+0x299c>
   142a8:	ldr	r1, [sp, #80]	; 0x50
   142ac:	ldr	r2, [fp, #24]
   142b0:	ldr	r0, [fp, #20]
   142b4:	sub	r6, fp, #136	; 0x88
   142b8:	add	r5, r6, #16
   142bc:	cmp	r1, #0
   142c0:	beq	142f0 <__assert_fail@plt+0x2a04>
   142c4:	cmp	r0, #0
   142c8:	bne	142f0 <__assert_fail@plt+0x2a04>
   142cc:	ldr	r0, [sp, #80]	; 0x50
   142d0:	ldrb	r0, [r0]
   142d4:	cmp	r0, #47	; 0x2f
   142d8:	bne	14e50 <__assert_fail@plt+0x3564>
   142dc:	ldr	r0, [sp, #80]	; 0x50
   142e0:	cmp	r7, #0
   142e4:	moveq	r7, r0
   142e8:	mov	r4, r7
   142ec:	b	1434c <__assert_fail@plt+0x2a60>
   142f0:	ldr	r1, [sp, #80]	; 0x50
   142f4:	mov	r4, r8
   142f8:	cmp	r1, #0
   142fc:	movne	r4, r1
   14300:	cmp	r7, #0
   14304:	movne	r4, r7
   14308:	cmp	r0, #0
   1430c:	beq	1434c <__assert_fail@plt+0x2a60>
   14310:	mov	r7, #48	; 0x30
   14314:	add	r1, r0, #32
   14318:	add	r3, r0, #16
   1431c:	vld1.64	{d16-d17}, [r0], r7
   14320:	vld1.64	{d18-d19}, [r1]
   14324:	vld1.64	{d20-d21}, [r3]
   14328:	add	r1, r6, #32
   1432c:	mov	r3, #1
   14330:	vldr	d22, [r0]
   14334:	mov	r0, r6
   14338:	vst1.64	{d16-d17}, [r0], r7
   1433c:	vst1.64	{d18-d19}, [r1]
   14340:	vst1.64	{d20-d21}, [r5]
   14344:	vstr	d22, [r0]
   14348:	b	14480 <__assert_fail@plt+0x2b94>
   1434c:	sub	r2, fp, #136	; 0x88
   14350:	mov	r0, r4
   14354:	mov	r1, r8
   14358:	mov	r7, r5
   1435c:	bl	16068 <__assert_fail@plt+0x477c>
   14360:	cmp	r0, #0
   14364:	beq	1442c <__assert_fail@plt+0x2b40>
   14368:	bl	11748 <__errno_location@plt>
   1436c:	ldr	r2, [fp, #24]
   14370:	cmp	r2, #0
   14374:	beq	143ec <__assert_fail@plt+0x2b00>
   14378:	ldr	r1, [r0]
   1437c:	cmp	r1, #13
   14380:	cmpne	r1, #2
   14384:	bne	143ec <__assert_fail@plt+0x2b00>
   14388:	movw	r0, #4936	; 0x1348
   1438c:	sub	r6, fp, #136	; 0x88
   14390:	movt	r0, #3
   14394:	ldrb	r0, [r0]
   14398:	cmp	r0, #1
   1439c:	bne	14e50 <__assert_fail@plt+0x3564>
   143a0:	mvn	r0, #0
   143a4:	mov	r3, #0
   143a8:	mov	r5, r7
   143ac:	str	r0, [fp, #-136]	; 0xffffff78
   143b0:	strb	r3, [fp, #-104]	; 0xffffff98
   143b4:	movw	r9, #2246	; 0x8c6
   143b8:	str	r0, [fp, #-132]	; 0xffffff7c
   143bc:	str	r0, [fp, #-128]	; 0xffffff80
   143c0:	str	r0, [fp, #-124]	; 0xffffff84
   143c4:	str	r0, [fp, #-120]	; 0xffffff88
   143c8:	str	r0, [fp, #-116]	; 0xffffff8c
   143cc:	str	r0, [fp, #-112]	; 0xffffff90
   143d0:	str	r0, [fp, #-108]	; 0xffffff94
   143d4:	str	r0, [fp, #-96]	; 0xffffffa0
   143d8:	str	r0, [fp, #-92]	; 0xffffffa4
   143dc:	str	r0, [fp, #-88]	; 0xffffffa8
   143e0:	str	r0, [fp, #-84]	; 0xffffffac
   143e4:	movt	r9, #2
   143e8:	b	14480 <__assert_fail@plt+0x2b94>
   143ec:	ldr	r5, [r0]
   143f0:	mov	r0, #0
   143f4:	mov	r1, #3
   143f8:	mov	r2, r4
   143fc:	bl	1b0f4 <__assert_fail@plt+0x9808>
   14400:	movw	r2, #2580	; 0xa14
   14404:	mov	r3, r0
   14408:	mov	r0, #0
   1440c:	mov	r1, r5
   14410:	movt	r2, #2
   14414:	bl	11670 <error@plt>
   14418:	movw	r0, #4948	; 0x1354
   1441c:	mov	r1, #1
   14420:	movt	r0, #3
   14424:	strb	r1, [r0]
   14428:	b	14e50 <__assert_fail@plt+0x3564>
   1442c:	ldr	r2, [fp, #24]
   14430:	mov	r3, #0
   14434:	cmp	r2, #0
   14438:	beq	14478 <__assert_fail@plt+0x2b8c>
   1443c:	movw	r0, #4936	; 0x1348
   14440:	movt	r0, #3
   14444:	ldrb	r0, [r0]
   14448:	cmp	r0, #1
   1444c:	bne	14478 <__assert_fail@plt+0x2b8c>
   14450:	add	r2, sp, #88	; 0x58
   14454:	mov	r0, #3
   14458:	mov	r1, r4
   1445c:	bl	11898 <__xstat64@plt>
   14460:	cmp	r0, #0
   14464:	beq	14e60 <__assert_fail@plt+0x3574>
   14468:	ldr	r2, [fp, #24]
   1446c:	sub	r6, fp, #136	; 0x88
   14470:	mov	r3, #0
   14474:	b	1447c <__assert_fail@plt+0x2b90>
   14478:	sub	r6, fp, #136	; 0x88
   1447c:	mov	r5, r7
   14480:	add	r7, r6, #8
   14484:	ldrd	r0, [r7]
   14488:	orrs	r0, r0, r1
   1448c:	bne	144b8 <__assert_fail@plt+0x2bcc>
   14490:	movw	r0, #4936	; 0x1348
   14494:	movt	r0, #3
   14498:	ldrb	r0, [r0]
   1449c:	cmp	r0, #0
   144a0:	bne	144b8 <__assert_fail@plt+0x2bcc>
   144a4:	movw	r0, #4937	; 0x1349
   144a8:	movt	r0, #3
   144ac:	ldrb	r0, [r0]
   144b0:	cmp	r0, #1
   144b4:	bne	14e50 <__assert_fail@plt+0x3564>
   144b8:	cmp	r3, #0
   144bc:	movw	r4, #5040	; 0x13b0
   144c0:	str	r5, [sp, #68]	; 0x44
   144c4:	str	r7, [sp, #60]	; 0x3c
   144c8:	movw	r7, #5036	; 0x13ac
   144cc:	mov	sl, r2
   144d0:	mov	r2, #4
   144d4:	str	r3, [sp, #64]	; 0x40
   144d8:	movweq	r0, #4945	; 0x1351
   144dc:	moveq	r1, #1
   144e0:	movt	r4, #3
   144e4:	movt	r7, #3
   144e8:	movteq	r0, #3
   144ec:	strbeq	r1, [r0]
   144f0:	sub	r0, fp, #264	; 0x108
   144f4:	add	r1, r0, #16
   144f8:	add	r5, r0, #48	; 0x30
   144fc:	str	r1, [sp, #48]	; 0x30
   14500:	add	r1, r0, #24
   14504:	str	r1, [sp, #56]	; 0x38
   14508:	add	r1, r0, #40	; 0x28
   1450c:	add	r0, r6, #40	; 0x28
   14510:	str	r0, [sp, #40]	; 0x28
   14514:	add	r0, r6, #48	; 0x30
   14518:	str	r1, [sp, #52]	; 0x34
   1451c:	str	r0, [sp, #44]	; 0x2c
   14520:	ldr	r0, [r4]
   14524:	add	r1, r0, #1
   14528:	ldr	r0, [r7]
   1452c:	str	r1, [r4]
   14530:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   14534:	str	r0, [r7]
   14538:	movw	r0, #5028	; 0x13a4
   1453c:	mov	r1, #4
   14540:	movt	r0, #3
   14544:	ldr	r0, [r0]
   14548:	bl	1be98 <__assert_fail@plt+0xa5ac>
   1454c:	ldr	r1, [r4]
   14550:	ldr	r2, [r7]
   14554:	ldr	r6, [sp, #76]	; 0x4c
   14558:	add	r1, r2, r1, lsl #2
   1455c:	cmp	r6, #0
   14560:	str	r0, [r1, #-4]
   14564:	movw	r0, #2246	; 0x8c6
   14568:	movt	r0, #2
   1456c:	moveq	r6, r0
   14570:	cmp	r8, #0
   14574:	moveq	r8, r0
   14578:	str	r6, [sp, #76]	; 0x4c
   1457c:	mov	r0, r8
   14580:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   14584:	mov	r4, r0
   14588:	cmp	sl, #0
   1458c:	beq	145e8 <__assert_fail@plt+0x2cfc>
   14590:	mov	r0, r4
   14594:	bl	11718 <strlen@plt>
   14598:	cmp	r0, #37	; 0x25
   1459c:	sub	r6, fp, #200	; 0xc8
   145a0:	bcc	145f8 <__assert_fail@plt+0x2d0c>
   145a4:	movw	r1, #201	; 0xc9
   145a8:	add	r0, r4, r0
   145ac:	movt	r1, #2
   145b0:	sub	r0, r0, #36	; 0x24
   145b4:	bl	118d4 <strspn@plt>
   145b8:	cmp	r0, #36	; 0x24
   145bc:	bne	145f8 <__assert_fail@plt+0x2d0c>
   145c0:	mov	r0, r4
   145c4:	mov	r1, #0
   145c8:	bl	1568c <__assert_fail@plt+0x3da0>
   145cc:	cmp	r0, #0
   145d0:	str	r0, [sp, #72]	; 0x48
   145d4:	beq	145f8 <__assert_fail@plt+0x2d0c>
   145d8:	mov	r0, r4
   145dc:	mov	sl, r5
   145e0:	bl	16040 <__assert_fail@plt+0x4754>
   145e4:	b	14600 <__assert_fail@plt+0x2d14>
   145e8:	mov	sl, r5
   145ec:	str	r4, [sp, #72]	; 0x48
   145f0:	sub	r6, fp, #200	; 0xc8
   145f4:	b	14600 <__assert_fail@plt+0x2d14>
   145f8:	mov	sl, r5
   145fc:	str	r4, [sp, #72]	; 0x48
   14600:	add	r0, r6, #16
   14604:	sub	r1, fp, #136	; 0x88
   14608:	add	ip, r6, #8
   1460c:	sub	r2, fp, #264	; 0x108
   14610:	mov	r7, #0
   14614:	mvn	lr, #0
   14618:	cmp	r9, #0
   1461c:	str	r0, [sp, #24]
   14620:	add	r0, r6, #24
   14624:	str	r0, [sp, #28]
   14628:	add	r0, r6, #40	; 0x28
   1462c:	str	r0, [sp, #32]
   14630:	add	r0, r6, #48	; 0x30
   14634:	str	r0, [sp, #36]	; 0x24
   14638:	add	r0, r1, #24
   1463c:	str	r0, [sp, #20]
   14640:	add	r1, pc, #968	; 0x3c8
   14644:	ldr	r0, [sp, #40]	; 0x28
   14648:	vld1.64	{d16-d17}, [r1 :128]
   1464c:	mov	r1, #56	; 0x38
   14650:	ldm	r0, {r5, r6}
   14654:	ldr	r0, [sp, #48]	; 0x30
   14658:	vst1.64	{d16-d17}, [r2], r1
   1465c:	stm	r0, {r5, r6}
   14660:	ldr	r0, [sp, #44]	; 0x2c
   14664:	ldr	r4, [r0]
   14668:	ldr	r3, [r0, #4]
   1466c:	ldr	r0, [sp, #52]	; 0x34
   14670:	str	r4, [r0]
   14674:	str	r3, [r0, #4]
   14678:	ldr	r0, [sp, #56]	; 0x38
   1467c:	str	r5, [sp, #56]	; 0x38
   14680:	str	r4, [r0]
   14684:	str	r3, [r0, #4]
   14688:	mvn	r0, #1
   1468c:	strb	r7, [fp, #-232]	; 0xffffff18
   14690:	orr	r1, r0, #1
   14694:	stm	sl, {r1, lr}
   14698:	movw	r1, #2246	; 0x8c6
   1469c:	strb	r7, [r2]
   146a0:	movt	r1, #2
   146a4:	moveq	r9, r1
   146a8:	mvn	r1, #2
   146ac:	subs	r1, r1, r5
   146b0:	ldr	r5, [sp, #60]	; 0x3c
   146b4:	sbcs	r1, lr, r6
   146b8:	bcc	146f0 <__assert_fail@plt+0x2e04>
   146bc:	mvn	r0, #1
   146c0:	subs	r1, r4, r0
   146c4:	sbcs	r1, r3, lr
   146c8:	bcs	146f0 <__assert_fail@plt+0x2e04>
   146cc:	ldr	r1, [sp, #56]	; 0x38
   146d0:	mov	r8, sl
   146d4:	subs	r2, r1, r4
   146d8:	sbcs	r1, r6, r3
   146dc:	str	r2, [r8]
   146e0:	str	r1, [r8, #4]
   146e4:	mov	r1, #0
   146e8:	movwcc	r1, #1
   146ec:	strb	r1, [fp, #-208]	; 0xffffff30
   146f0:	ldr	r2, [fp, #-132]	; 0xffffff7c
   146f4:	ldr	r0, [fp, #-136]	; 0xffffff78
   146f8:	str	r6, [sp, #44]	; 0x2c
   146fc:	ldrb	r7, [fp, #-104]	; 0xffffff98
   14700:	str	r3, [sp, #40]	; 0x28
   14704:	mvn	r3, #1
   14708:	mov	r1, r2
   1470c:	movw	r1, #5008	; 0x1390
   14710:	str	r2, [sp, #48]	; 0x30
   14714:	str	r2, [fp, #-196]	; 0xffffff3c
   14718:	str	r0, [sp, #52]	; 0x34
   1471c:	str	r0, [fp, #-200]	; 0xffffff38
   14720:	ldr	r0, [sp, #24]
   14724:	cmp	r7, #0
   14728:	movt	r1, #3
   1472c:	movwne	r7, #1
   14730:	ldr	r2, [r1]
   14734:	ldr	r1, [r1, #4]
   14738:	str	r2, [ip]
   1473c:	str	r1, [ip, #4]
   14740:	ldr	r2, [r5]
   14744:	ldr	r1, [r5, #4]
   14748:	str	r2, [r0]
   1474c:	str	r1, [r0, #4]
   14750:	ldr	r0, [sp, #20]
   14754:	ldr	r6, [r0]
   14758:	ldr	r5, [r0, #4]
   1475c:	ldr	r0, [sp, #28]
   14760:	str	r6, [r0]
   14764:	str	r5, [r0, #4]
   14768:	ldr	r0, [sp, #68]	; 0x44
   1476c:	str	r6, [sp, #60]	; 0x3c
   14770:	subs	ip, r6, r3
   14774:	ldr	r6, [sp, #36]	; 0x24
   14778:	str	r5, [sp, #68]	; 0x44
   1477c:	ldr	sl, [r0]
   14780:	ldr	r8, [r0, #4]
   14784:	ldr	r0, [sp, #32]
   14788:	str	sl, [r0]
   1478c:	str	r8, [r0, #4]
   14790:	mov	r0, r5
   14794:	sbcs	r5, r5, lr
   14798:	mov	r5, #0
   1479c:	movwcc	r5, #1
   147a0:	adds	r0, r3, #1
   147a4:	and	ip, r5, r7
   147a8:	adc	r5, lr, #0
   147ac:	mvn	r7, #0
   147b0:	strb	ip, [fp, #-168]	; 0xffffff58
   147b4:	stm	r6, {r0, r5}
   147b8:	mov	r0, #0
   147bc:	strb	r0, [fp, #-144]	; 0xffffff70
   147c0:	subs	r0, r2, r3
   147c4:	sbcs	r0, r1, lr
   147c8:	bcs	147f4 <__assert_fail@plt+0x2f08>
   147cc:	mvn	r0, #1
   147d0:	subs	r0, sl, r0
   147d4:	sbcs	r0, r8, r7
   147d8:	bcs	147f4 <__assert_fail@plt+0x2f08>
   147dc:	subs	r0, r2, sl
   147e0:	sbcs	r5, r1, r8
   147e4:	stm	r6, {r0, r5}
   147e8:	mov	r0, #0
   147ec:	movwcc	r0, #1
   147f0:	strb	r0, [fp, #-144]	; 0xffffff70
   147f4:	movw	r0, #4949	; 0x1355
   147f8:	ldr	r6, [sp, #64]	; 0x40
   147fc:	movt	r0, #3
   14800:	ldrb	r0, [r0]
   14804:	mvn	r0, r0
   14808:	orr	r0, r6, r0
   1480c:	tst	r0, #1
   14810:	bne	149cc <__assert_fail@plt+0x30e0>
   14814:	ldr	r5, [sp, #56]	; 0x38
   14818:	ldr	r6, [sp, #44]	; 0x2c
   1481c:	mvn	r0, #1
   14820:	subs	r0, r5, r0
   14824:	sbcs	r0, r6, r7
   14828:	bcs	14850 <__assert_fail@plt+0x2f64>
   1482c:	movw	lr, #4952	; 0x1358
   14830:	movt	lr, #3
   14834:	ldr	r0, [lr, #40]	; 0x28
   14838:	ldr	r7, [lr, #44]	; 0x2c
   1483c:	adds	r0, r0, r5
   14840:	adc	r5, r7, r6
   14844:	mvn	r7, #0
   14848:	str	r0, [lr, #40]	; 0x28
   1484c:	str	r5, [lr, #44]	; 0x2c
   14850:	ldr	r3, [sp, #40]	; 0x28
   14854:	mvn	r6, #1
   14858:	subs	r0, r4, r6
   1485c:	sbcs	r0, r3, r7
   14860:	bcs	14888 <__assert_fail@plt+0x2f9c>
   14864:	movw	lr, #4952	; 0x1358
   14868:	mov	r0, r8
   1486c:	movt	lr, #3
   14870:	ldr	r8, [lr, #48]	; 0x30
   14874:	ldr	r5, [lr, #52]	; 0x34
   14878:	adds	r4, r8, r4
   1487c:	mov	r8, r0
   14880:	adc	r5, r5, r3
   14884:	strd	r4, [lr, #48]	; 0x30
   14888:	subs	r0, r2, r6
   1488c:	sbcs	r0, r1, r7
   14890:	bcs	148c4 <__assert_fail@plt+0x2fd8>
   14894:	ldr	r7, [sp, #52]	; 0x34
   14898:	movw	lr, #4952	; 0x1358
   1489c:	movt	lr, #3
   148a0:	ldrd	r4, [lr, #8]
   148a4:	umull	r0, r3, r2, r7
   148a8:	adds	r0, r4, r0
   148ac:	ldr	r4, [sp, #48]	; 0x30
   148b0:	mla	r2, r2, r4, r3
   148b4:	mla	r1, r1, r7, r2
   148b8:	mvn	r7, #0
   148bc:	adc	r1, r5, r1
   148c0:	strd	r0, [lr, #8]
   148c4:	subs	r0, sl, r6
   148c8:	sbcs	r0, r8, r7
   148cc:	bcs	148fc <__assert_fail@plt+0x3010>
   148d0:	ldr	r3, [sp, #52]	; 0x34
   148d4:	movw	r2, #4952	; 0x1358
   148d8:	movt	r2, #3
   148dc:	ldrd	r4, [r2, #16]
   148e0:	umull	r0, r1, sl, r3
   148e4:	adds	r0, r4, r0
   148e8:	ldr	r4, [sp, #48]	; 0x30
   148ec:	mla	r1, sl, r4, r1
   148f0:	mla	r1, r8, r3, r1
   148f4:	adc	r1, r5, r1
   148f8:	strd	r0, [r2, #16]
   148fc:	ldr	r0, [sp, #60]	; 0x3c
   14900:	subs	r0, r0, r6
   14904:	ldr	r0, [sp, #68]	; 0x44
   14908:	sbcs	r0, r0, r7
   1490c:	bcs	149cc <__assert_fail@plt+0x30e0>
   14910:	ldr	r1, [sp, #52]	; 0x34
   14914:	ldr	r3, [sp, #60]	; 0x3c
   14918:	ldr	r2, [sp, #48]	; 0x30
   1491c:	umull	r4, r0, r3, r1
   14920:	mla	r0, r3, r2, r0
   14924:	ldr	r2, [sp, #68]	; 0x44
   14928:	mla	r2, r2, r1, r0
   1492c:	movw	r0, #4952	; 0x1358
   14930:	movt	r0, #3
   14934:	ldrb	r1, [r0, #32]
   14938:	cmp	r1, ip
   1493c:	bne	14958 <__assert_fail@plt+0x306c>
   14940:	ldr	r8, [r0, #24]
   14944:	ldr	r1, [r0, #28]
   14948:	adds	r4, r8, r4
   1494c:	adc	r5, r1, r2
   14950:	strd	r4, [r0, #24]
   14954:	b	149cc <__assert_fail@plt+0x30e0>
   14958:	ldr	r8, [r0, #24]
   1495c:	ldr	r3, [r0, #28]
   14960:	cmp	r1, #0
   14964:	beq	14978 <__assert_fail@plt+0x308c>
   14968:	rsbs	r8, r8, #0
   1496c:	rsc	r3, r3, #0
   14970:	str	r8, [r0, #24]
   14974:	str	r3, [r0, #28]
   14978:	rsbs	r5, r4, #0
   1497c:	rsc	r7, r2, #0
   14980:	cmp	ip, #0
   14984:	moveq	r5, r4
   14988:	moveq	r7, r2
   1498c:	subs	r2, r5, r8
   14990:	sbcs	r2, r7, r3
   14994:	bcs	149a4 <__assert_fail@plt+0x30b8>
   14998:	subs	r2, r8, r5
   1499c:	sbc	r3, r3, r7
   149a0:	b	149b4 <__assert_fail@plt+0x30c8>
   149a4:	subs	r2, r5, r8
   149a8:	mov	r1, ip
   149ac:	strb	ip, [r0, #32]
   149b0:	sbc	r3, r7, r3
   149b4:	strd	r2, [r0, #24]
   149b8:	cmp	r1, #0
   149bc:	beq	149cc <__assert_fail@plt+0x30e0>
   149c0:	rsbs	r2, r2, #0
   149c4:	rsc	r3, r3, #0
   149c8:	strd	r2, [r0, #24]
   149cc:	movw	r0, #5028	; 0x13a4
   149d0:	sub	r6, fp, #200	; 0xc8
   149d4:	movt	r0, #3
   149d8:	ldr	r0, [r0]
   149dc:	cmp	r0, #0
   149e0:	beq	14e48 <__assert_fail@plt+0x355c>
   149e4:	movw	r0, #5032	; 0x13a8
   149e8:	vldr	d8, [pc, #48]	; 14a20 <__assert_fail@plt+0x3134>
   149ec:	movw	sl, #4808	; 0x12c8
   149f0:	vmov.f64	d9, #112	; 0x3f800000  1.0
   149f4:	vmov.f64	d10, #240	; 0xbf800000 -1.0
   149f8:	vmov.i32	d11, #0	; 0x00000000
   149fc:	mov	r7, #0
   14a00:	movt	r0, #3
   14a04:	movt	sl, #3
   14a08:	ldr	r1, [r0]
   14a0c:	b	14ab4 <__assert_fail@plt+0x31c8>
   14a10:	andeq	r0, r0, r1
   14a14:	andeq	r0, r0, r0
   14a18:	andeq	r0, r0, r1
	...
   14a24:	subsmi	r0, r9, r0
   14a28:	cmp	r0, #0
   14a2c:	movw	r0, #20484	; 0x5004
   14a30:	movw	r1, #20300	; 0x4f4c
   14a34:	movt	r0, #1
   14a38:	movt	r1, #1
   14a3c:	moveq	r1, r0
   14a40:	mov	r0, r4
   14a44:	blx	r1
   14a48:	ldr	r0, [sp, #84]	; 0x54
   14a4c:	mov	r1, #0
   14a50:	bl	18720 <__assert_fail@plt+0x6e34>
   14a54:	movw	r1, #5032	; 0x13a8
   14a58:	movt	r1, #3
   14a5c:	ldr	r1, [r1]
   14a60:	ldr	r2, [r1, r7, lsl #2]
   14a64:	ldr	r3, [r2, #16]
   14a68:	cmp	r3, r0
   14a6c:	movhi	r0, r3
   14a70:	str	r0, [r2, #16]
   14a74:	movw	r0, #5040	; 0x13b0
   14a78:	movw	r2, #5036	; 0x13ac
   14a7c:	movt	r0, #3
   14a80:	movt	r2, #3
   14a84:	ldr	r0, [r0]
   14a88:	ldr	r2, [r2]
   14a8c:	add	r0, r2, r0, lsl #2
   14a90:	ldr	r2, [sp, #84]	; 0x54
   14a94:	ldr	r0, [r0, #-4]
   14a98:	str	r2, [r0, r7, lsl #2]
   14a9c:	movw	r0, #5028	; 0x13a4
   14aa0:	add	r7, r7, #1
   14aa4:	movt	r0, #3
   14aa8:	ldr	r0, [r0]
   14aac:	cmp	r7, r0
   14ab0:	bcs	14e48 <__assert_fail@plt+0x355c>
   14ab4:	ldr	r0, [r1, r7, lsl #2]
   14ab8:	mov	r4, r6
   14abc:	ldr	r1, [r0, #8]
   14ac0:	cmp	r1, #0
   14ac4:	beq	14ae4 <__assert_fail@plt+0x31f8>
   14ac8:	cmp	r1, #2
   14acc:	beq	14ae0 <__assert_fail@plt+0x31f4>
   14ad0:	cmp	r1, #1
   14ad4:	bne	14f04 <__assert_fail@plt+0x3618>
   14ad8:	sub	r4, fp, #264	; 0x108
   14adc:	b	14ae4 <__assert_fail@plt+0x31f8>
   14ae0:	mov	r4, #0
   14ae4:	ldr	r0, [r0]
   14ae8:	cmp	r0, #11
   14aec:	bhi	14f1c <__assert_fail@plt+0x3630>
   14af0:	add	r5, pc, #12
   14af4:	add	r1, r4, #8
   14af8:	add	r2, r4, #24
   14afc:	add	r3, r4, #48	; 0x30
   14b00:	ldr	pc, [r5, r0, lsl #2]
   14b04:	muleq	r1, r0, ip
   14b08:	muleq	r1, r8, ip
   14b0c:	andeq	r4, r1, r4, lsr fp
   14b10:	andeq	r4, r1, r4, lsr #23
   14b14:	andeq	r4, r1, ip, lsl #23
   14b18:	andeq	r4, r1, r0, lsr ip
   14b1c:	andeq	r4, r1, r4, lsr fp
   14b20:	andeq	r4, r1, r4, lsr #23
   14b24:	andeq	r4, r1, ip, lsl #23
   14b28:	andeq	r4, r1, r0, lsr ip
   14b2c:	andeq	r4, r1, r0, lsl #25
   14b30:	andeq	r4, r1, r8, lsl #25
   14b34:	add	r0, r4, #16
   14b38:	ldm	r0, {r2, r5}
   14b3c:	mvn	r0, #1
   14b40:	subs	r0, r2, r0
   14b44:	mvn	r0, #0
   14b48:	sbcs	r0, r5, r0
   14b4c:	movw	r0, #2246	; 0x8c6
   14b50:	movt	r0, #2
   14b54:	bcs	14c9c <__assert_fail@plt+0x33b0>
   14b58:	movw	r0, #4940	; 0x134c
   14b5c:	ldr	r8, [r1]
   14b60:	ldr	r1, [r1, #4]
   14b64:	movt	r0, #3
   14b68:	ldr	r3, [r0]
   14b6c:	ldm	r4, {r0, r4}
   14b70:	stm	sp, {r0, r4, r8}
   14b74:	str	r1, [sp, #12]
   14b78:	mov	r0, r2
   14b7c:	mov	r1, r5
   14b80:	add	r2, sp, #88	; 0x58
   14b84:	bl	17520 <__assert_fail@plt+0x5c34>
   14b88:	b	14c9c <__assert_fail@plt+0x33b0>
   14b8c:	ldrb	r5, [r4, #32]
   14b90:	ldr	r8, [r2]
   14b94:	ldr	r2, [r2, #4]
   14b98:	cmp	r5, #0
   14b9c:	beq	14bb8 <__assert_fail@plt+0x32cc>
   14ba0:	b	14bd4 <__assert_fail@plt+0x32e8>
   14ba4:	ldrb	r5, [r4, #56]	; 0x38
   14ba8:	ldr	r8, [r3]
   14bac:	ldr	r2, [r3, #4]
   14bb0:	cmp	r5, #0
   14bb4:	bne	14bd4 <__assert_fail@plt+0x32e8>
   14bb8:	mvn	r0, #1
   14bbc:	subs	r0, r8, r0
   14bc0:	mvn	r0, #0
   14bc4:	sbcs	r0, r2, r0
   14bc8:	movw	r0, #2246	; 0x8c6
   14bcc:	movt	r0, #2
   14bd0:	bcs	14c9c <__assert_fail@plt+0x33b0>
   14bd4:	movw	r0, #4940	; 0x134c
   14bd8:	movt	r0, #3
   14bdc:	ldr	r3, [r0]
   14be0:	ldm	r1, {r0, r6}
   14be4:	ldr	r1, [r4, #4]
   14be8:	ldr	r4, [r4]
   14bec:	str	r6, [sp, #12]
   14bf0:	str	r0, [sp, #8]
   14bf4:	rsbs	r0, r8, #0
   14bf8:	str	r1, [sp, #4]
   14bfc:	rsc	r1, r2, #0
   14c00:	cmp	r5, #0
   14c04:	str	r4, [sp]
   14c08:	moveq	r1, r2
   14c0c:	add	r2, sp, #88	; 0x58
   14c10:	moveq	r0, r8
   14c14:	add	r2, r2, r5
   14c18:	bl	17520 <__assert_fail@plt+0x5c34>
   14c1c:	cmp	r5, #0
   14c20:	sub	r6, fp, #200	; 0xc8
   14c24:	movne	r1, #45	; 0x2d
   14c28:	strbne	r1, [r0, #-1]!
   14c2c:	b	14c9c <__assert_fail@plt+0x33b0>
   14c30:	ldrd	r0, [r3]
   14c34:	mvn	r3, #1
   14c38:	subs	r3, r0, r3
   14c3c:	mvn	r3, #0
   14c40:	sbcs	r3, r1, r3
   14c44:	bcs	14df8 <__assert_fail@plt+0x350c>
   14c48:	ldm	r2, {r8, sl}
   14c4c:	mvn	r2, #1
   14c50:	subs	r2, r8, r2
   14c54:	mvn	r2, #0
   14c58:	sbcs	r2, sl, r2
   14c5c:	bcs	14df8 <__assert_fail@plt+0x350c>
   14c60:	ldrb	r2, [r4, #56]	; 0x38
   14c64:	cmp	r2, #0
   14c68:	beq	14cc4 <__assert_fail@plt+0x33d8>
   14c6c:	rsbs	r0, r0, #0
   14c70:	rsc	r1, r1, #0
   14c74:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   14c78:	eor	r1, r1, #-2147483648	; 0x80000000
   14c7c:	b	14d68 <__assert_fail@plt+0x347c>
   14c80:	ldr	r0, [sp, #80]	; 0x50
   14c84:	b	14c9c <__assert_fail@plt+0x33b0>
   14c88:	ldr	r0, [sp, #76]	; 0x4c
   14c8c:	b	14c9c <__assert_fail@plt+0x33b0>
   14c90:	ldr	r0, [sp, #72]	; 0x48
   14c94:	b	14c9c <__assert_fail@plt+0x33b0>
   14c98:	mov	r0, r9
   14c9c:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   14ca0:	mov	r4, r0
   14ca4:	str	r0, [sp, #84]	; 0x54
   14ca8:	ldr	r0, [sl]
   14cac:	cmn	r0, #1
   14cb0:	bgt	14a28 <__assert_fail@plt+0x313c>
   14cb4:	mov	r0, #1
   14cb8:	bl	118a4 <isatty@plt>
   14cbc:	str	r0, [sl]
   14cc0:	b	14a28 <__assert_fail@plt+0x313c>
   14cc4:	movw	r2, #36700	; 0x8f5c
   14cc8:	movt	r2, #62914	; 0xf5c2
   14ccc:	subs	r2, r2, r0
   14cd0:	movw	r2, #23592	; 0x5c28
   14cd4:	movt	r2, #655	; 0x28f
   14cd8:	sbcs	r2, r2, r1
   14cdc:	bcc	14d64 <__assert_fail@plt+0x3478>
   14ce0:	adds	r2, r8, r0
   14ce4:	adc	r3, sl, r1
   14ce8:	orrs	r5, r2, r3
   14cec:	beq	14d64 <__assert_fail@plt+0x3478>
   14cf0:	subs	r5, r2, r0
   14cf4:	mov	ip, #0
   14cf8:	sbcs	r5, r3, r1
   14cfc:	ldrb	r5, [r4, #32]
   14d00:	movwcc	ip, #1
   14d04:	cmp	ip, r5
   14d08:	bne	14d64 <__assert_fail@plt+0x3478>
   14d0c:	mov	r5, #100	; 0x64
   14d10:	mov	r4, r2
   14d14:	mov	r8, r3
   14d18:	umull	r6, r0, r0, r5
   14d1c:	mla	r5, r1, r5, r0
   14d20:	mov	r0, r6
   14d24:	mov	r1, r5
   14d28:	bl	1f004 <__assert_fail@plt+0xd718>
   14d2c:	umull	r2, r3, r0, r4
   14d30:	adds	ip, r0, #1
   14d34:	adc	lr, r1, #0
   14d38:	mla	r3, r0, r8, r3
   14d3c:	mla	r3, r1, r4, r3
   14d40:	subs	r2, r6, r2
   14d44:	sub	r6, fp, #200	; 0xc8
   14d48:	sbc	r3, r5, r3
   14d4c:	orrs	r2, r2, r3
   14d50:	movne	r1, lr
   14d54:	movne	r0, ip
   14d58:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   14d5c:	vmov	d16, r0, r1
   14d60:	b	14e20 <__assert_fail@plt+0x3534>
   14d64:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   14d68:	vmov	d12, r0, r1
   14d6c:	ldrb	r0, [r4, #32]
   14d70:	cmp	r0, #0
   14d74:	beq	14d8c <__assert_fail@plt+0x34a0>
   14d78:	rsbs	r0, r8, #0
   14d7c:	rsc	r1, sl, #0
   14d80:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   14d84:	eor	r1, r1, #-2147483648	; 0x80000000
   14d88:	b	14d98 <__assert_fail@plt+0x34ac>
   14d8c:	mov	r0, r8
   14d90:	mov	r1, sl
   14d94:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   14d98:	vmov	d16, r0, r1
   14d9c:	vadd.f64	d16, d12, d16
   14da0:	vcmp.f64	d16, #0.0
   14da4:	vmrs	APSR_nzcv, fpscr
   14da8:	beq	14df8 <__assert_fail@plt+0x350c>
   14dac:	vmul.f64	d17, d12, d8
   14db0:	vdiv.f64	d16, d17, d16
   14db4:	vcvt.s32.f64	s0, d16
   14db8:	vcvt.f64.s32	d17, s0
   14dbc:	vadd.f64	d18, d17, d10
   14dc0:	vcmpe.f64	d18, d16
   14dc4:	vmrs	APSR_nzcv, fpscr
   14dc8:	bpl	14dec <__assert_fail@plt+0x3500>
   14dcc:	vadd.f64	d18, d17, d9
   14dd0:	vcmpe.f64	d16, d18
   14dd4:	vmrs	APSR_nzcv, fpscr
   14dd8:	bhi	14dec <__assert_fail@plt+0x3500>
   14ddc:	vcmpe.f64	d16, d17
   14de0:	vmrs	APSR_nzcv, fpscr
   14de4:	vselgt.f64	d16, d9, d11
   14de8:	vadd.f64	d16, d17, d16
   14dec:	vcmpe.f64	d16, #0.0
   14df0:	vmrs	APSR_nzcv, fpscr
   14df4:	bge	14e20 <__assert_fail@plt+0x3534>
   14df8:	movw	r0, #2246	; 0x8c6
   14dfc:	movt	r0, #2
   14e00:	bl	115b0 <strdup@plt>
   14e04:	mov	r4, r0
   14e08:	str	r0, [sp, #84]	; 0x54
   14e0c:	movw	sl, #4808	; 0x12c8
   14e10:	cmp	r4, #0
   14e14:	movt	sl, #3
   14e18:	bne	14ca8 <__assert_fail@plt+0x33bc>
   14e1c:	b	14f3c <__assert_fail@plt+0x3650>
   14e20:	movw	r2, #175	; 0xaf
   14e24:	add	r0, sp, #84	; 0x54
   14e28:	mov	r1, #1
   14e2c:	vstr	d16, [sp]
   14e30:	movt	r2, #2
   14e34:	bl	11694 <__asprintf_chk@plt>
   14e38:	cmn	r0, #1
   14e3c:	beq	14f40 <__assert_fail@plt+0x3654>
   14e40:	ldr	r4, [sp, #84]	; 0x54
   14e44:	b	14e0c <__assert_fail@plt+0x3520>
   14e48:	ldr	r0, [sp, #72]	; 0x48
   14e4c:	bl	16040 <__assert_fail@plt+0x4754>
   14e50:	sub	sp, fp, #72	; 0x48
   14e54:	vpop	{d8-d12}
   14e58:	add	sp, sp, #4
   14e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e60:	movw	r0, #5044	; 0x13b4
   14e64:	movt	r0, #3
   14e68:	ldr	r0, [r0]
   14e6c:	cmp	r0, #0
   14e70:	beq	14468 <__assert_fail@plt+0x2b7c>
   14e74:	ldr	r1, [sp, #88]	; 0x58
   14e78:	ldr	r2, [sp, #92]	; 0x5c
   14e7c:	str	r1, [fp, #-200]	; 0xffffff38
   14e80:	sub	r1, fp, #200	; 0xc8
   14e84:	str	r2, [fp, #-196]	; 0xffffff3c
   14e88:	bl	16370 <__assert_fail@plt+0x4a84>
   14e8c:	cmp	r0, #0
   14e90:	beq	14468 <__assert_fail@plt+0x2b7c>
   14e94:	ldr	r0, [r0, #16]
   14e98:	ldr	r2, [fp, #24]
   14e9c:	sub	r6, fp, #136	; 0x88
   14ea0:	mov	r3, #0
   14ea4:	mov	r5, r7
   14ea8:	cmp	r0, #0
   14eac:	beq	14480 <__assert_fail@plt+0x2b94>
   14eb0:	ldr	r4, [r0, #8]
   14eb4:	cmp	r4, #0
   14eb8:	beq	14480 <__assert_fail@plt+0x2b94>
   14ebc:	ldr	r0, [r4]
   14ec0:	mov	r1, r8
   14ec4:	bl	11520 <strcmp@plt>
   14ec8:	cmp	r0, #0
   14ecc:	beq	14468 <__assert_fail@plt+0x2b7c>
   14ed0:	ldrb	r0, [r4, #24]
   14ed4:	ldr	r2, [fp, #24]
   14ed8:	sub	r6, fp, #136	; 0x88
   14edc:	mov	r3, #0
   14ee0:	mov	r5, r7
   14ee4:	tst	r0, #2
   14ee8:	cmpne	sl, #0
   14eec:	bne	14480 <__assert_fail@plt+0x2b94>
   14ef0:	mvn	r0, #0
   14ef4:	mov	r1, #0
   14ef8:	str	r0, [fp, #-136]	; 0xffffff78
   14efc:	strb	r1, [fp, #-104]	; 0xffffff98
   14f00:	b	143b4 <__assert_fail@plt+0x2ac8>
   14f04:	movw	r0, #28
   14f08:	movw	r1, #65155	; 0xfe83
   14f0c:	movw	r3, #46	; 0x2e
   14f10:	movw	r2, #1158	; 0x486
   14f14:	movt	r0, #2
   14f18:	b	14f30 <__assert_fail@plt+0x3644>
   14f1c:	movw	r0, #182	; 0xb6
   14f20:	movw	r1, #65155	; 0xfe83
   14f24:	movw	r3, #46	; 0x2e
   14f28:	movw	r2, #1260	; 0x4ec
   14f2c:	movt	r0, #2
   14f30:	movt	r1, #1
   14f34:	movt	r3, #2
   14f38:	bl	118ec <__assert_fail@plt>
   14f3c:	bl	1c304 <__assert_fail@plt+0xaa18>
   14f40:	mov	r0, #0
   14f44:	str	r0, [sp, #84]	; 0x54
   14f48:	bl	1c304 <__assert_fail@plt+0xaa18>
   14f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f50:	add	fp, sp, #28
   14f54:	sub	sp, sp, #20
   14f58:	mov	r4, r0
   14f5c:	bl	11718 <strlen@plt>
   14f60:	mov	sl, #0
   14f64:	cmp	r0, #0
   14f68:	str	sl, [sp, #12]
   14f6c:	str	sl, [sp, #8]
   14f70:	beq	14ff8 <__assert_fail@plt+0x370c>
   14f74:	add	r8, r4, r0
   14f78:	add	r9, sp, #8
   14f7c:	mov	r7, r4
   14f80:	b	14fa4 <__assert_fail@plt+0x36b8>
   14f84:	mov	r0, r5
   14f88:	mov	r1, #63	; 0x3f
   14f8c:	strb	r1, [r4], #1
   14f90:	str	sl, [sp, #12]
   14f94:	str	sl, [sp, #8]
   14f98:	add	r7, r7, r0
   14f9c:	cmp	r7, r8
   14fa0:	beq	14ff8 <__assert_fail@plt+0x370c>
   14fa4:	sub	r6, r8, r7
   14fa8:	add	r0, sp, #4
   14fac:	mov	r1, r7
   14fb0:	mov	r3, r9
   14fb4:	mov	r2, r6
   14fb8:	bl	18234 <__assert_fail@plt+0x6948>
   14fbc:	mov	r5, r0
   14fc0:	mov	r0, #1
   14fc4:	cmp	r5, r6
   14fc8:	bhi	14f88 <__assert_fail@plt+0x369c>
   14fcc:	ldr	r0, [sp, #4]
   14fd0:	bl	115d4 <iswcntrl@plt>
   14fd4:	cmp	r0, #0
   14fd8:	bne	14f84 <__assert_fail@plt+0x3698>
   14fdc:	mov	r0, r4
   14fe0:	mov	r1, r7
   14fe4:	mov	r2, r5
   14fe8:	bl	11544 <memmove@plt>
   14fec:	add	r4, r4, r5
   14ff0:	mov	r0, r5
   14ff4:	b	14f98 <__assert_fail@plt+0x36ac>
   14ff8:	strb	sl, [r4]
   14ffc:	sub	sp, fp, #28
   15000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15004:	push	{r4, r5, fp, lr}
   15008:	add	fp, sp, #8
   1500c:	ldrb	r1, [r0]
   15010:	cmp	r1, #0
   15014:	popeq	{r4, r5, fp, pc}
   15018:	add	r4, r0, #1
   1501c:	mov	r5, #63	; 0x3f
   15020:	uxtb	r0, r1
   15024:	bl	153ec <__assert_fail@plt+0x3b00>
   15028:	cmp	r0, #0
   1502c:	strbne	r5, [r4, #-1]
   15030:	ldrb	r1, [r4], #1
   15034:	cmp	r1, #0
   15038:	bne	15020 <__assert_fail@plt+0x3734>
   1503c:	pop	{r4, r5, fp, pc}
   15040:	push	{fp, lr}
   15044:	mov	fp, sp
   15048:	mov	r2, r1
   1504c:	ldrd	r0, [r0]
   15050:	mov	r3, #0
   15054:	bl	1f004 <__assert_fail@plt+0xd718>
   15058:	mov	r0, r2
   1505c:	pop	{fp, pc}
   15060:	ldrd	r2, [r1]
   15064:	ldrd	r0, [r0]
   15068:	eor	r1, r1, r3
   1506c:	eor	r0, r0, r2
   15070:	orr	r0, r0, r1
   15074:	clz	r0, r0
   15078:	lsr	r0, r0, #5
   1507c:	bx	lr
   15080:	b	16040 <__assert_fail@plt+0x4754>
   15084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15088:	add	fp, sp, #28
   1508c:	sub	sp, sp, #220	; 0xdc
   15090:	mov	r5, r0
   15094:	sub	r0, fp, #40	; 0x28
   15098:	mov	r4, r1
   1509c:	bl	1b4ec <__assert_fail@plt+0x9c00>
   150a0:	cmp	r0, #0
   150a4:	beq	150dc <__assert_fail@plt+0x37f0>
   150a8:	bl	11748 <__errno_location@plt>
   150ac:	movw	r1, #560	; 0x230
   150b0:	ldr	r5, [r0]
   150b4:	mov	r0, #0
   150b8:	mov	r2, #5
   150bc:	mov	r4, #0
   150c0:	movt	r1, #2
   150c4:	bl	115a4 <dcgettext@plt>
   150c8:	mov	r2, r0
   150cc:	mov	r0, #0
   150d0:	mov	r1, r5
   150d4:	bl	11670 <error@plt>
   150d8:	b	15334 <__assert_fail@plt+0x3a48>
   150dc:	ldr	r0, [r4, #16]
   150e0:	and	r0, r0, #61440	; 0xf000
   150e4:	cmp	r0, #16384	; 0x4000
   150e8:	bne	15110 <__assert_fail@plt+0x3824>
   150ec:	sub	r0, fp, #144	; 0x90
   150f0:	mov	r1, r4
   150f4:	mov	r2, #104	; 0x68
   150f8:	bl	11574 <memcpy@plt>
   150fc:	mov	r0, r5
   15100:	bl	115ec <chdir@plt>
   15104:	cmn	r0, #1
   15108:	bgt	15174 <__assert_fail@plt+0x3888>
   1510c:	b	1522c <__assert_fail@plt+0x3940>
   15110:	mov	r0, r5
   15114:	bl	15e80 <__assert_fail@plt+0x4594>
   15118:	mov	r4, r0
   1511c:	bl	11718 <strlen@plt>
   15120:	add	r1, r0, #8
   15124:	bic	r1, r1, #7
   15128:	sub	r5, sp, r1
   1512c:	mov	sp, r5
   15130:	add	r2, r0, #1
   15134:	mov	r0, r5
   15138:	mov	r1, r4
   1513c:	bl	11574 <memcpy@plt>
   15140:	mov	r0, r4
   15144:	bl	16040 <__assert_fail@plt+0x4754>
   15148:	mov	r0, r5
   1514c:	bl	115ec <chdir@plt>
   15150:	cmn	r0, #1
   15154:	ble	1522c <__assert_fail@plt+0x3940>
   15158:	movw	r1, #659	; 0x293
   1515c:	sub	r2, fp, #144	; 0x90
   15160:	mov	r0, #3
   15164:	movt	r1, #2
   15168:	bl	11898 <__xstat64@plt>
   1516c:	cmn	r0, #1
   15170:	ble	15280 <__assert_fail@plt+0x3994>
   15174:	movw	r1, #658	; 0x292
   15178:	sub	r4, fp, #248	; 0xf8
   1517c:	mov	r0, #3
   15180:	movt	r1, #2
   15184:	mov	r2, r4
   15188:	bl	11898 <__xstat64@plt>
   1518c:	movw	r8, #661	; 0x295
   15190:	cmp	r0, #0
   15194:	movt	r8, #2
   15198:	bmi	152c8 <__assert_fail@plt+0x39dc>
   1519c:	movw	r7, #658	; 0x292
   151a0:	movw	sl, #589	; 0x24d
   151a4:	sub	r9, fp, #144	; 0x90
   151a8:	add	r6, r4, #96	; 0x60
   151ac:	movt	r7, #2
   151b0:	movt	sl, #2
   151b4:	add	r5, r9, #96	; 0x60
   151b8:	ldr	r0, [fp, #-144]	; 0xffffff70
   151bc:	ldr	r2, [fp, #-248]	; 0xffffff08
   151c0:	ldr	r1, [fp, #-140]	; 0xffffff74
   151c4:	ldr	r3, [fp, #-244]	; 0xffffff0c
   151c8:	eor	r1, r3, r1
   151cc:	eor	r0, r2, r0
   151d0:	orrs	r0, r0, r1
   151d4:	bne	15274 <__assert_fail@plt+0x3988>
   151d8:	ldrd	r0, [r5]
   151dc:	ldrd	r2, [r6]
   151e0:	eor	r1, r3, r1
   151e4:	eor	r0, r2, r0
   151e8:	orrs	r0, r0, r1
   151ec:	beq	15274 <__assert_fail@plt+0x3988>
   151f0:	mov	r0, r7
   151f4:	bl	115ec <chdir@plt>
   151f8:	cmn	r0, #1
   151fc:	ble	152c4 <__assert_fail@plt+0x39d8>
   15200:	mov	r0, r9
   15204:	mov	r1, r4
   15208:	mov	r2, #104	; 0x68
   1520c:	bl	11574 <memcpy@plt>
   15210:	mov	r0, #3
   15214:	mov	r1, r7
   15218:	mov	r2, r4
   1521c:	bl	11898 <__xstat64@plt>
   15220:	cmp	r0, #0
   15224:	bpl	151b8 <__assert_fail@plt+0x38cc>
   15228:	b	152c8 <__assert_fail@plt+0x39dc>
   1522c:	bl	11748 <__errno_location@plt>
   15230:	movw	r1, #589	; 0x24d
   15234:	ldr	r6, [r0]
   15238:	mov	r0, #0
   1523c:	mov	r2, #5
   15240:	mov	r4, #0
   15244:	movt	r1, #2
   15248:	bl	115a4 <dcgettext@plt>
   1524c:	mov	r7, r0
   15250:	mov	r0, #4
   15254:	mov	r1, r5
   15258:	bl	1ae78 <__assert_fail@plt+0x958c>
   1525c:	mov	r3, r0
   15260:	mov	r0, #0
   15264:	mov	r1, r6
   15268:	mov	r2, r7
   1526c:	bl	11670 <error@plt>
   15270:	b	15334 <__assert_fail@plt+0x3a48>
   15274:	bl	1c348 <__assert_fail@plt+0xaa5c>
   15278:	mov	r4, r0
   1527c:	b	1530c <__assert_fail@plt+0x3a20>
   15280:	bl	11748 <__errno_location@plt>
   15284:	movw	r1, #619	; 0x26b
   15288:	ldr	r6, [r0]
   1528c:	mov	r0, #0
   15290:	mov	r2, #5
   15294:	mov	r4, #0
   15298:	movt	r1, #2
   1529c:	bl	115a4 <dcgettext@plt>
   152a0:	mov	r7, r0
   152a4:	mov	r0, #4
   152a8:	mov	r1, r5
   152ac:	bl	1ae78 <__assert_fail@plt+0x958c>
   152b0:	mov	r3, r0
   152b4:	mov	r0, #0
   152b8:	mov	r1, r6
   152bc:	mov	r2, r7
   152c0:	b	15308 <__assert_fail@plt+0x3a1c>
   152c4:	mov	r8, sl
   152c8:	bl	11748 <__errno_location@plt>
   152cc:	ldr	r6, [r0]
   152d0:	mov	r0, #0
   152d4:	mov	r1, r8
   152d8:	mov	r2, #5
   152dc:	mov	r4, #0
   152e0:	bl	115a4 <dcgettext@plt>
   152e4:	movw	r1, #658	; 0x292
   152e8:	mov	r5, r0
   152ec:	mov	r0, #4
   152f0:	movt	r1, #2
   152f4:	bl	1ae78 <__assert_fail@plt+0x958c>
   152f8:	mov	r3, r0
   152fc:	mov	r0, #0
   15300:	mov	r1, r6
   15304:	mov	r2, r5
   15308:	bl	11670 <error@plt>
   1530c:	bl	11748 <__errno_location@plt>
   15310:	ldr	r6, [r0]
   15314:	mov	r5, r0
   15318:	sub	r0, fp, #40	; 0x28
   1531c:	bl	1b548 <__assert_fail@plt+0x9c5c>
   15320:	cmp	r0, #0
   15324:	bne	15340 <__assert_fail@plt+0x3a54>
   15328:	sub	r0, fp, #40	; 0x28
   1532c:	bl	1b564 <__assert_fail@plt+0x9c78>
   15330:	str	r6, [r5]
   15334:	mov	r0, r4
   15338:	sub	sp, fp, #28
   1533c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15340:	movw	r1, #676	; 0x2a4
   15344:	ldr	r4, [r5]
   15348:	mov	r0, #0
   1534c:	mov	r2, #5
   15350:	movt	r1, #2
   15354:	bl	115a4 <dcgettext@plt>
   15358:	mov	r2, r0
   1535c:	mov	r0, #1
   15360:	mov	r1, r4
   15364:	bl	11670 <error@plt>
   15368:	sub	r2, r0, #65	; 0x41
   1536c:	mov	r1, r0
   15370:	mov	r0, #1
   15374:	cmp	r2, #26
   15378:	subcs	r2, r1, #97	; 0x61
   1537c:	cmpcs	r2, #26
   15380:	bcs	15388 <__assert_fail@plt+0x3a9c>
   15384:	bx	lr
   15388:	sub	r1, r1, #48	; 0x30
   1538c:	cmp	r1, #10
   15390:	movcs	r0, #0
   15394:	bx	lr
   15398:	sub	r2, r0, #65	; 0x41
   1539c:	mov	r1, r0
   153a0:	mov	r0, #1
   153a4:	cmp	r2, #26
   153a8:	subcs	r1, r1, #97	; 0x61
   153ac:	cmpcs	r1, #26
   153b0:	movcs	r0, #0
   153b4:	bx	lr
   153b8:	cmp	r0, #128	; 0x80
   153bc:	mov	r1, #0
   153c0:	movwcc	r1, #1
   153c4:	mov	r0, r1
   153c8:	bx	lr
   153cc:	sub	r1, r0, #9
   153d0:	sub	r0, r0, #32
   153d4:	clz	r1, r1
   153d8:	clz	r0, r0
   153dc:	lsr	r1, r1, #5
   153e0:	lsr	r0, r0, #5
   153e4:	orr	r0, r0, r1
   153e8:	bx	lr
   153ec:	mov	r1, r0
   153f0:	mov	r0, #1
   153f4:	cmp	r1, #32
   153f8:	bxcc	lr
   153fc:	cmp	r1, #127	; 0x7f
   15400:	movne	r0, #0
   15404:	bx	lr
   15408:	sub	r1, r0, #48	; 0x30
   1540c:	mov	r0, #0
   15410:	cmp	r1, #10
   15414:	movwcc	r0, #1
   15418:	bx	lr
   1541c:	sub	r1, r0, #33	; 0x21
   15420:	mov	r0, #0
   15424:	cmp	r1, #94	; 0x5e
   15428:	movwcc	r0, #1
   1542c:	bx	lr
   15430:	sub	r1, r0, #97	; 0x61
   15434:	mov	r0, #0
   15438:	cmp	r1, #26
   1543c:	movwcc	r0, #1
   15440:	bx	lr
   15444:	sub	r1, r0, #32
   15448:	mov	r0, #0
   1544c:	cmp	r1, #95	; 0x5f
   15450:	movwcc	r0, #1
   15454:	bx	lr
   15458:	sub	r1, r0, #33	; 0x21
   1545c:	cmp	r1, #93	; 0x5d
   15460:	bhi	155ec <__assert_fail@plt+0x3d00>
   15464:	add	r2, pc, #4
   15468:	mov	r0, #1
   1546c:	ldr	pc, [r2, r1, lsl #2]
   15470:	andeq	r5, r1, r8, ror #11
   15474:	andeq	r5, r1, r8, ror #11
   15478:	andeq	r5, r1, r8, ror #11
   1547c:	andeq	r5, r1, r8, ror #11
   15480:	andeq	r5, r1, r8, ror #11
   15484:	andeq	r5, r1, r8, ror #11
   15488:	andeq	r5, r1, r8, ror #11
   1548c:	andeq	r5, r1, r8, ror #11
   15490:	andeq	r5, r1, r8, ror #11
   15494:	andeq	r5, r1, r8, ror #11
   15498:	andeq	r5, r1, r8, ror #11
   1549c:	andeq	r5, r1, r8, ror #11
   154a0:	andeq	r5, r1, r8, ror #11
   154a4:	andeq	r5, r1, r8, ror #11
   154a8:	andeq	r5, r1, r8, ror #11
   154ac:	andeq	r5, r1, ip, ror #11
   154b0:	andeq	r5, r1, ip, ror #11
   154b4:	andeq	r5, r1, ip, ror #11
   154b8:	andeq	r5, r1, ip, ror #11
   154bc:	andeq	r5, r1, ip, ror #11
   154c0:	andeq	r5, r1, ip, ror #11
   154c4:	andeq	r5, r1, ip, ror #11
   154c8:	andeq	r5, r1, ip, ror #11
   154cc:	andeq	r5, r1, ip, ror #11
   154d0:	andeq	r5, r1, ip, ror #11
   154d4:	andeq	r5, r1, r8, ror #11
   154d8:	andeq	r5, r1, r8, ror #11
   154dc:	andeq	r5, r1, r8, ror #11
   154e0:	andeq	r5, r1, r8, ror #11
   154e4:	andeq	r5, r1, r8, ror #11
   154e8:	andeq	r5, r1, r8, ror #11
   154ec:	andeq	r5, r1, r8, ror #11
   154f0:	andeq	r5, r1, ip, ror #11
   154f4:	andeq	r5, r1, ip, ror #11
   154f8:	andeq	r5, r1, ip, ror #11
   154fc:	andeq	r5, r1, ip, ror #11
   15500:	andeq	r5, r1, ip, ror #11
   15504:	andeq	r5, r1, ip, ror #11
   15508:	andeq	r5, r1, ip, ror #11
   1550c:	andeq	r5, r1, ip, ror #11
   15510:	andeq	r5, r1, ip, ror #11
   15514:	andeq	r5, r1, ip, ror #11
   15518:	andeq	r5, r1, ip, ror #11
   1551c:	andeq	r5, r1, ip, ror #11
   15520:	andeq	r5, r1, ip, ror #11
   15524:	andeq	r5, r1, ip, ror #11
   15528:	andeq	r5, r1, ip, ror #11
   1552c:	andeq	r5, r1, ip, ror #11
   15530:	andeq	r5, r1, ip, ror #11
   15534:	andeq	r5, r1, ip, ror #11
   15538:	andeq	r5, r1, ip, ror #11
   1553c:	andeq	r5, r1, ip, ror #11
   15540:	andeq	r5, r1, ip, ror #11
   15544:	andeq	r5, r1, ip, ror #11
   15548:	andeq	r5, r1, ip, ror #11
   1554c:	andeq	r5, r1, ip, ror #11
   15550:	andeq	r5, r1, ip, ror #11
   15554:	andeq	r5, r1, ip, ror #11
   15558:	andeq	r5, r1, r8, ror #11
   1555c:	andeq	r5, r1, r8, ror #11
   15560:	andeq	r5, r1, r8, ror #11
   15564:	andeq	r5, r1, r8, ror #11
   15568:	andeq	r5, r1, r8, ror #11
   1556c:	andeq	r5, r1, r8, ror #11
   15570:	andeq	r5, r1, ip, ror #11
   15574:	andeq	r5, r1, ip, ror #11
   15578:	andeq	r5, r1, ip, ror #11
   1557c:	andeq	r5, r1, ip, ror #11
   15580:	andeq	r5, r1, ip, ror #11
   15584:	andeq	r5, r1, ip, ror #11
   15588:	andeq	r5, r1, ip, ror #11
   1558c:	andeq	r5, r1, ip, ror #11
   15590:	andeq	r5, r1, ip, ror #11
   15594:	andeq	r5, r1, ip, ror #11
   15598:	andeq	r5, r1, ip, ror #11
   1559c:	andeq	r5, r1, ip, ror #11
   155a0:	andeq	r5, r1, ip, ror #11
   155a4:	andeq	r5, r1, ip, ror #11
   155a8:	andeq	r5, r1, ip, ror #11
   155ac:	andeq	r5, r1, ip, ror #11
   155b0:	andeq	r5, r1, ip, ror #11
   155b4:	andeq	r5, r1, ip, ror #11
   155b8:	andeq	r5, r1, ip, ror #11
   155bc:	andeq	r5, r1, ip, ror #11
   155c0:	andeq	r5, r1, ip, ror #11
   155c4:	andeq	r5, r1, ip, ror #11
   155c8:	andeq	r5, r1, ip, ror #11
   155cc:	andeq	r5, r1, ip, ror #11
   155d0:	andeq	r5, r1, ip, ror #11
   155d4:	andeq	r5, r1, ip, ror #11
   155d8:	andeq	r5, r1, r8, ror #11
   155dc:	andeq	r5, r1, r8, ror #11
   155e0:	andeq	r5, r1, r8, ror #11
   155e4:	andeq	r5, r1, r8, ror #11
   155e8:	bx	lr
   155ec:	mov	r0, #0
   155f0:	bx	lr
   155f4:	sub	r0, r0, #9
   155f8:	cmp	r0, #23
   155fc:	movhi	r0, #0
   15600:	bxhi	lr
   15604:	movw	r1, #31
   15608:	bic	r0, r0, #-16777216	; 0xff000000
   1560c:	mov	r2, #1
   15610:	movt	r1, #128	; 0x80
   15614:	and	r0, r2, r1, lsr r0
   15618:	bx	lr
   1561c:	sub	r1, r0, #65	; 0x41
   15620:	mov	r0, #0
   15624:	cmp	r1, #26
   15628:	movwcc	r0, #1
   1562c:	bx	lr
   15630:	sub	r2, r0, #48	; 0x30
   15634:	mov	r1, r0
   15638:	mov	r0, #1
   1563c:	cmp	r2, #22
   15640:	bhi	15658 <__assert_fail@plt+0x3d6c>
   15644:	movw	r3, #1023	; 0x3ff
   15648:	mov	ip, #1
   1564c:	movt	r3, #126	; 0x7e
   15650:	tst	r3, ip, lsl r2
   15654:	bxne	lr
   15658:	sub	r1, r1, #97	; 0x61
   1565c:	cmp	r1, #6
   15660:	movcs	r0, #0
   15664:	bxcs	lr
   15668:	bx	lr
   1566c:	sub	r1, r0, #65	; 0x41
   15670:	cmp	r1, #26
   15674:	addcc	r0, r0, #32
   15678:	bx	lr
   1567c:	sub	r1, r0, #97	; 0x61
   15680:	cmp	r1, #26
   15684:	subcc	r0, r0, #32
   15688:	bx	lr
   1568c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15690:	add	fp, sp, #28
   15694:	sub	sp, sp, #180	; 0xb4
   15698:	sub	sp, sp, #3072	; 0xc00
   1569c:	and	r7, r1, #3
   156a0:	mov	r8, r0
   156a4:	sub	r0, r7, #1
   156a8:	tst	r7, r0
   156ac:	bne	15738 <__assert_fail@plt+0x3e4c>
   156b0:	cmp	r8, #0
   156b4:	beq	15738 <__assert_fail@plt+0x3e4c>
   156b8:	ldrb	r0, [r8]
   156bc:	cmp	r0, #0
   156c0:	beq	15754 <__assert_fail@plt+0x3e68>
   156c4:	mov	r4, r1
   156c8:	mov	r1, #1024	; 0x400
   156cc:	sub	lr, fp, #1024	; 0x400
   156d0:	cmp	r0, #47	; 0x2f
   156d4:	str	r1, [fp, #-1060]	; 0xfffffbdc
   156d8:	str	r1, [sp, #52]	; 0x34
   156dc:	str	r1, [sp, #1188]	; 0x4a4
   156e0:	add	r1, sp, #1184	; 0x4a0
   156e4:	sub	r2, lr, #40	; 0x28
   156e8:	add	r1, r1, #8
   156ec:	add	r2, r2, #8
   156f0:	str	r1, [sp, #16]
   156f4:	str	r1, [sp, #1184]	; 0x4a0
   156f8:	add	r1, sp, #48	; 0x30
   156fc:	str	r2, [sp, #12]
   15700:	str	r2, [fp, #-1064]	; 0xfffffbd8
   15704:	add	r5, r1, #8
   15708:	mov	r0, r5
   1570c:	str	r5, [sp, #48]	; 0x30
   15710:	str	r5, [sp, #8]
   15714:	bne	15760 <__assert_fail@plt+0x3e74>
   15718:	mov	r1, r8
   1571c:	mov	r2, #0
   15720:	mov	r3, #1024	; 0x400
   15724:	bl	118e0 <__mempcpy_chk@plt>
   15728:	mov	r6, r0
   1572c:	mov	r0, #47	; 0x2f
   15730:	strb	r0, [r6], #1
   15734:	b	15780 <__assert_fail@plt+0x3e94>
   15738:	bl	11748 <__errno_location@plt>
   1573c:	mov	r1, #22
   15740:	mov	r4, #0
   15744:	str	r1, [r0]
   15748:	mov	r0, r4
   1574c:	sub	sp, fp, #28
   15750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15754:	bl	11748 <__errno_location@plt>
   15758:	mov	r1, #2
   1575c:	b	15740 <__assert_fail@plt+0x3e54>
   15760:	mov	r1, #1024	; 0x400
   15764:	bl	116f4 <getcwd@plt>
   15768:	cmp	r0, #0
   1576c:	beq	15c9c <__assert_fail@plt+0x43b0>
   15770:	mov	r0, r5
   15774:	mov	r1, #0
   15778:	bl	115e0 <rawmemchr@plt>
   1577c:	mov	r6, r0
   15780:	ldrb	r0, [r8]
   15784:	cmp	r0, #0
   15788:	beq	15c60 <__assert_fail@plt+0x4374>
   1578c:	and	r1, r4, #4
   15790:	add	r9, sp, #48	; 0x30
   15794:	str	r7, [sp, #32]
   15798:	str	r1, [sp, #40]	; 0x28
   1579c:	mov	r1, #0
   157a0:	str	r1, [sp, #24]
   157a4:	mov	r1, #0
   157a8:	str	r1, [sp, #36]	; 0x24
   157ac:	mov	r1, #0
   157b0:	str	r1, [sp, #20]
   157b4:	b	157d0 <__assert_fail@plt+0x3ee4>
   157b8:	cmp	r0, #0
   157bc:	beq	15ad8 <__assert_fail@plt+0x41ec>
   157c0:	mov	r8, sl
   157c4:	ldrb	r0, [r8]
   157c8:	cmp	r0, #0
   157cc:	beq	15c68 <__assert_fail@plt+0x437c>
   157d0:	uxtb	r1, r0
   157d4:	cmp	r1, #47	; 0x2f
   157d8:	bne	157e8 <__assert_fail@plt+0x3efc>
   157dc:	ldrb	r0, [r8, #1]!
   157e0:	cmp	r0, #47	; 0x2f
   157e4:	beq	157dc <__assert_fail@plt+0x3ef0>
   157e8:	mov	r1, r0
   157ec:	mov	sl, r8
   157f0:	b	157f8 <__assert_fail@plt+0x3f0c>
   157f4:	ldrb	r1, [sl, #1]!
   157f8:	uxtb	r1, r1
   157fc:	cmp	r1, #0
   15800:	cmpne	r1, #47	; 0x2f
   15804:	bne	157f4 <__assert_fail@plt+0x3f08>
   15808:	sub	r2, sl, r8
   1580c:	cmp	r2, #1
   15810:	beq	15828 <__assert_fail@plt+0x3f3c>
   15814:	cmp	r2, #2
   15818:	beq	15838 <__assert_fail@plt+0x3f4c>
   1581c:	cmp	r2, #0
   15820:	bne	15880 <__assert_fail@plt+0x3f94>
   15824:	b	15c68 <__assert_fail@plt+0x437c>
   15828:	uxtb	r0, r0
   1582c:	cmp	r0, #46	; 0x2e
   15830:	bne	15880 <__assert_fail@plt+0x3f94>
   15834:	b	157c0 <__assert_fail@plt+0x3ed4>
   15838:	uxtb	r0, r0
   1583c:	cmp	r0, #46	; 0x2e
   15840:	bne	15880 <__assert_fail@plt+0x3f94>
   15844:	ldrb	r0, [r8, #1]
   15848:	cmp	r0, #46	; 0x2e
   1584c:	bne	15880 <__assert_fail@plt+0x3f94>
   15850:	add	r0, r5, #1
   15854:	cmp	r6, r0
   15858:	bls	157c0 <__assert_fail@plt+0x3ed4>
   1585c:	sub	r0, r6, #1
   15860:	mov	r6, r0
   15864:	cmp	r0, r5
   15868:	bls	157c0 <__assert_fail@plt+0x3ed4>
   1586c:	mov	r0, r6
   15870:	ldrb	r1, [r0, #-1]!
   15874:	cmp	r1, #47	; 0x2f
   15878:	bne	15860 <__assert_fail@plt+0x3f74>
   1587c:	b	157c0 <__assert_fail@plt+0x3ed4>
   15880:	ldrb	r0, [r6, #-1]
   15884:	add	r4, r2, #2
   15888:	str	r2, [sp, #44]	; 0x2c
   1588c:	cmp	r0, #47	; 0x2f
   15890:	movne	r0, #47	; 0x2f
   15894:	strbne	r0, [r6], #1
   15898:	ldr	r0, [sp, #52]	; 0x34
   1589c:	add	r0, r5, r0
   158a0:	sub	r0, r0, r6
   158a4:	cmp	r0, r4
   158a8:	bcs	158e0 <__assert_fail@plt+0x3ff4>
   158ac:	mov	r0, r9
   158b0:	bl	1b668 <__assert_fail@plt+0x9d7c>
   158b4:	cmp	r0, #0
   158b8:	beq	15d60 <__assert_fail@plt+0x4474>
   158bc:	sub	r0, r6, r5
   158c0:	ldr	r5, [sp, #48]	; 0x30
   158c4:	ldr	r1, [sp, #52]	; 0x34
   158c8:	add	r6, r5, r0
   158cc:	add	r0, r5, r1
   158d0:	sub	r0, r0, r6
   158d4:	cmp	r0, r4
   158d8:	bcc	158ac <__assert_fail@plt+0x3fc0>
   158dc:	ldr	r2, [sp, #44]	; 0x2c
   158e0:	mov	r0, r6
   158e4:	mov	r1, r8
   158e8:	mvn	r3, #0
   158ec:	bl	118e0 <__mempcpy_chk@plt>
   158f0:	mov	r6, r0
   158f4:	mov	r0, #0
   158f8:	strb	r0, [r6]
   158fc:	ldr	r0, [sp, #40]	; 0x28
   15900:	cmp	r0, #0
   15904:	bne	15968 <__assert_fail@plt+0x407c>
   15908:	ldr	r0, [sp, #1188]	; 0x4a4
   1590c:	ldr	r7, [sp, #1184]	; 0x4a0
   15910:	sub	r9, r0, #1
   15914:	mov	r0, r5
   15918:	mov	r1, r7
   1591c:	mov	r2, r9
   15920:	bl	11610 <readlink@plt>
   15924:	cmp	r0, r9
   15928:	blt	15940 <__assert_fail@plt+0x4054>
   1592c:	add	r0, sp, #1184	; 0x4a0
   15930:	bl	1b5f8 <__assert_fail@plt+0x9d0c>
   15934:	cmp	r0, #0
   15938:	bne	15908 <__assert_fail@plt+0x401c>
   1593c:	b	15d60 <__assert_fail@plt+0x4474>
   15940:	mov	r4, r0
   15944:	cmp	r0, #0
   15948:	add	r9, sp, #48	; 0x30
   1594c:	bmi	15968 <__assert_fail@plt+0x407c>
   15950:	ldr	r0, [sp, #24]
   15954:	cmp	r0, #19
   15958:	bgt	159e8 <__assert_fail@plt+0x40fc>
   1595c:	add	r0, r0, #1
   15960:	str	r0, [sp, #24]
   15964:	b	15b48 <__assert_fail@plt+0x425c>
   15968:	ldr	r7, [sp, #32]
   1596c:	cmp	r7, #2
   15970:	beq	157c0 <__assert_fail@plt+0x3ed4>
   15974:	ldrb	r0, [sl]
   15978:	cmp	r0, #47	; 0x2f
   1597c:	bne	15ab8 <__assert_fail@plt+0x41cc>
   15980:	mov	r2, sl
   15984:	mov	r1, r2
   15988:	ldrb	r3, [r2, #1]!
   1598c:	cmp	r3, #47	; 0x2f
   15990:	beq	15984 <__assert_fail@plt+0x4098>
   15994:	cmp	r3, #46	; 0x2e
   15998:	bne	15ab0 <__assert_fail@plt+0x41c4>
   1599c:	add	r2, r1, #2
   159a0:	ldrb	r3, [r2]
   159a4:	cmp	r3, #47	; 0x2f
   159a8:	beq	15984 <__assert_fail@plt+0x4098>
   159ac:	cmp	r3, #0
   159b0:	beq	159cc <__assert_fail@plt+0x40e0>
   159b4:	cmp	r3, #46	; 0x2e
   159b8:	bne	15ab8 <__assert_fail@plt+0x41cc>
   159bc:	ldrb	r1, [r1, #3]
   159c0:	cmp	r1, #47	; 0x2f
   159c4:	cmpne	r1, #0
   159c8:	bne	15ab8 <__assert_fail@plt+0x41cc>
   159cc:	mov	r0, #47	; 0x2f
   159d0:	mov	r1, r5
   159d4:	mov	r2, #0
   159d8:	mov	r3, #512	; 0x200
   159dc:	strh	r0, [r6]
   159e0:	mvn	r0, #99	; 0x63
   159e4:	b	15ae8 <__assert_fail@plt+0x41fc>
   159e8:	ldrb	r0, [r8]
   159ec:	add	lr, sp, #1024	; 0x400
   159f0:	add	r2, lr, #56	; 0x38
   159f4:	cmp	r0, #0
   159f8:	beq	15b48 <__assert_fail@plt+0x425c>
   159fc:	ldr	r9, [sp, #44]	; 0x2c
   15a00:	mov	r0, #0
   15a04:	mov	r1, r5
   15a08:	strb	r0, [r6, -r9]
   15a0c:	ldrb	r0, [r5]
   15a10:	cmp	r0, #0
   15a14:	movw	r0, #659	; 0x293
   15a18:	movt	r0, #2
   15a1c:	moveq	r1, r0
   15a20:	mov	r0, #3
   15a24:	bl	11898 <__xstat64@plt>
   15a28:	cmp	r0, #0
   15a2c:	bne	15d70 <__assert_fail@plt+0x4484>
   15a30:	rsb	r0, r9, #0
   15a34:	ldr	r9, [sp, #20]
   15a38:	ldrb	r1, [r8]
   15a3c:	cmp	r9, #0
   15a40:	strb	r1, [r6, r0]
   15a44:	bne	15a7c <__assert_fail@plt+0x4190>
   15a48:	movw	r0, #29952	; 0x7500
   15a4c:	movw	r2, #29792	; 0x7460
   15a50:	movw	r3, #29848	; 0x7498
   15a54:	mov	r1, #0
   15a58:	movt	r0, #1
   15a5c:	movt	r2, #1
   15a60:	movt	r3, #1
   15a64:	str	r0, [sp]
   15a68:	mov	r0, #7
   15a6c:	bl	16624 <__assert_fail@plt+0x4d38>
   15a70:	mov	r9, r0
   15a74:	cmp	r0, #0
   15a78:	beq	15d60 <__assert_fail@plt+0x4474>
   15a7c:	add	lr, sp, #1024	; 0x400
   15a80:	mov	r0, r9
   15a84:	mov	r1, r8
   15a88:	add	r2, lr, #56	; 0x38
   15a8c:	bl	15ff0 <__assert_fail@plt+0x4704>
   15a90:	cmp	r0, #0
   15a94:	str	r9, [sp, #20]
   15a98:	beq	15b34 <__assert_fail@plt+0x4248>
   15a9c:	ldr	r7, [sp, #32]
   15aa0:	cmp	r7, #2
   15aa4:	bne	15d64 <__assert_fail@plt+0x4478>
   15aa8:	mov	r8, sl
   15aac:	b	15c1c <__assert_fail@plt+0x4330>
   15ab0:	cmp	r3, #0
   15ab4:	beq	159cc <__assert_fail@plt+0x40e0>
   15ab8:	ldr	r1, [sp, #40]	; 0x28
   15abc:	cmp	r1, #0
   15ac0:	bne	157b8 <__assert_fail@plt+0x3ecc>
   15ac4:	bl	11748 <__errno_location@plt>
   15ac8:	ldr	r0, [r0]
   15acc:	cmp	r0, #22
   15ad0:	beq	157c0 <__assert_fail@plt+0x3ed4>
   15ad4:	b	15af4 <__assert_fail@plt+0x4208>
   15ad8:	mvn	r0, #99	; 0x63
   15adc:	mov	r1, r5
   15ae0:	mov	r2, #0
   15ae4:	mov	r3, #512	; 0x200
   15ae8:	bl	1155c <faccessat@plt>
   15aec:	cmp	r0, #0
   15af0:	beq	157c0 <__assert_fail@plt+0x3ed4>
   15af4:	mov	r4, #1
   15af8:	cmp	r7, #1
   15afc:	bne	15c88 <__assert_fail@plt+0x439c>
   15b00:	bl	11748 <__errno_location@plt>
   15b04:	ldr	r0, [r0]
   15b08:	cmp	r0, #2
   15b0c:	bne	15c88 <__assert_fail@plt+0x439c>
   15b10:	movw	r1, #2179	; 0x883
   15b14:	mov	r0, sl
   15b18:	movt	r1, #2
   15b1c:	bl	118d4 <strspn@plt>
   15b20:	ldrb	r0, [sl, r0]
   15b24:	mov	r8, sl
   15b28:	cmp	r0, #0
   15b2c:	beq	157c4 <__assert_fail@plt+0x3ed8>
   15b30:	b	15c88 <__assert_fail@plt+0x439c>
   15b34:	add	lr, sp, #1024	; 0x400
   15b38:	mov	r0, r9
   15b3c:	mov	r1, r8
   15b40:	add	r2, lr, #56	; 0x38
   15b44:	bl	15f74 <__assert_fail@plt+0x4688>
   15b48:	mov	r0, #0
   15b4c:	strb	r0, [r7, r4]
   15b50:	ldr	r0, [sp, #36]	; 0x24
   15b54:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   15b58:	tst	r0, #1
   15b5c:	ldr	r0, [sp, #28]
   15b60:	subne	r0, sl, r8
   15b64:	str	r0, [sp, #28]
   15b68:	mov	r0, sl
   15b6c:	bl	11718 <strlen@plt>
   15b70:	mvn	r1, r4
   15b74:	cmp	r0, r1
   15b78:	bhi	15d60 <__assert_fail@plt+0x4474>
   15b7c:	str	r0, [sp, #44]	; 0x2c
   15b80:	add	r9, r0, r4
   15b84:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   15b88:	cmp	r0, r9
   15b8c:	bhi	15bb4 <__assert_fail@plt+0x42c8>
   15b90:	sub	lr, fp, #1024	; 0x400
   15b94:	sub	r0, lr, #40	; 0x28
   15b98:	bl	1b668 <__assert_fail@plt+0x9d7c>
   15b9c:	cmp	r0, #0
   15ba0:	beq	15d60 <__assert_fail@plt+0x4474>
   15ba4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   15ba8:	cmp	r0, r9
   15bac:	bls	15b90 <__assert_fail@plt+0x42a4>
   15bb0:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   15bb4:	ldr	r0, [sp, #36]	; 0x24
   15bb8:	ldr	r1, [sp, #44]	; 0x2c
   15bbc:	tst	r0, #1
   15bc0:	ldr	r0, [sp, #28]
   15bc4:	add	r2, r1, #1
   15bc8:	addne	sl, r8, r0
   15bcc:	add	r0, r8, r4
   15bd0:	mov	r1, sl
   15bd4:	bl	11544 <memmove@plt>
   15bd8:	mov	r0, r8
   15bdc:	mov	r1, r7
   15be0:	mov	r2, r4
   15be4:	bl	11574 <memcpy@plt>
   15be8:	ldrb	r0, [r7]
   15bec:	cmp	r0, #47	; 0x2f
   15bf0:	bne	15c24 <__assert_fail@plt+0x4338>
   15bf4:	mov	r0, r5
   15bf8:	mov	r1, r7
   15bfc:	mov	r2, #0
   15c00:	mvn	r3, #0
   15c04:	bl	118e0 <__mempcpy_chk@plt>
   15c08:	mov	r6, r0
   15c0c:	mov	r0, #47	; 0x2f
   15c10:	strb	r0, [r6], #1
   15c14:	mov	r0, #1
   15c18:	str	r0, [sp, #36]	; 0x24
   15c1c:	add	r9, sp, #48	; 0x30
   15c20:	b	157c4 <__assert_fail@plt+0x3ed8>
   15c24:	add	r0, r5, #1
   15c28:	mov	r1, #1
   15c2c:	add	r9, sp, #48	; 0x30
   15c30:	cmp	r6, r0
   15c34:	str	r1, [sp, #36]	; 0x24
   15c38:	bls	157c4 <__assert_fail@plt+0x3ed8>
   15c3c:	sub	r0, r6, #1
   15c40:	mov	r6, r0
   15c44:	cmp	r0, r5
   15c48:	bls	157c4 <__assert_fail@plt+0x3ed8>
   15c4c:	mov	r0, r6
   15c50:	ldrb	r1, [r0, #-1]!
   15c54:	cmp	r1, #47	; 0x2f
   15c58:	bne	15c40 <__assert_fail@plt+0x4354>
   15c5c:	b	157c4 <__assert_fail@plt+0x3ed8>
   15c60:	mov	r0, #0
   15c64:	str	r0, [sp, #20]
   15c68:	add	r0, r5, #1
   15c6c:	cmp	r6, r0
   15c70:	bls	15c84 <__assert_fail@plt+0x4398>
   15c74:	mov	r0, r6
   15c78:	ldrb	r1, [r0, #-1]!
   15c7c:	cmp	r1, #47	; 0x2f
   15c80:	moveq	r6, r0
   15c84:	mov	r4, #0
   15c88:	ldr	r0, [sp, #20]
   15c8c:	cmp	r0, #0
   15c90:	beq	15cf4 <__assert_fail@plt+0x4408>
   15c94:	bl	16928 <__assert_fail@plt+0x503c>
   15c98:	b	15cf4 <__assert_fail@plt+0x4408>
   15c9c:	bl	11748 <__errno_location@plt>
   15ca0:	ldr	r5, [sp, #8]
   15ca4:	mov	r6, r0
   15ca8:	add	r9, sp, #48	; 0x30
   15cac:	ldr	r0, [r6]
   15cb0:	cmp	r0, #34	; 0x22
   15cb4:	bne	15ce4 <__assert_fail@plt+0x43f8>
   15cb8:	mov	r0, r9
   15cbc:	bl	1b5f8 <__assert_fail@plt+0x9d0c>
   15cc0:	cmp	r0, #0
   15cc4:	beq	15d60 <__assert_fail@plt+0x4474>
   15cc8:	ldr	r5, [sp, #48]	; 0x30
   15ccc:	ldr	r1, [sp, #52]	; 0x34
   15cd0:	mov	r0, r5
   15cd4:	bl	116f4 <getcwd@plt>
   15cd8:	cmp	r0, #0
   15cdc:	beq	15cac <__assert_fail@plt+0x43c0>
   15ce0:	b	15770 <__assert_fail@plt+0x3e84>
   15ce4:	cmp	r0, #12
   15ce8:	beq	15d60 <__assert_fail@plt+0x4474>
   15cec:	mov	r4, #1
   15cf0:	mov	r6, r5
   15cf4:	ldr	r1, [sp, #12]
   15cf8:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   15cfc:	ldr	r7, [sp, #16]
   15d00:	cmp	r0, r1
   15d04:	beq	15d0c <__assert_fail@plt+0x4420>
   15d08:	bl	16040 <__assert_fail@plt+0x4754>
   15d0c:	ldr	r0, [sp, #1184]	; 0x4a0
   15d10:	cmp	r0, r7
   15d14:	beq	15d1c <__assert_fail@plt+0x4430>
   15d18:	bl	16040 <__assert_fail@plt+0x4754>
   15d1c:	cmp	r4, #0
   15d20:	beq	15d40 <__assert_fail@plt+0x4454>
   15d24:	ldr	r0, [sp, #48]	; 0x30
   15d28:	ldr	r1, [sp, #8]
   15d2c:	mov	r4, #0
   15d30:	cmp	r0, r1
   15d34:	beq	15748 <__assert_fail@plt+0x3e5c>
   15d38:	bl	16040 <__assert_fail@plt+0x4754>
   15d3c:	b	15748 <__assert_fail@plt+0x3e5c>
   15d40:	mov	r0, #0
   15d44:	strb	r0, [r6], -r5
   15d48:	add	r0, sp, #48	; 0x30
   15d4c:	add	r1, r6, #1
   15d50:	bl	1b58c <__assert_fail@plt+0x9ca0>
   15d54:	mov	r4, r0
   15d58:	cmp	r0, #0
   15d5c:	bne	15748 <__assert_fail@plt+0x3e5c>
   15d60:	bl	1c304 <__assert_fail@plt+0xaa18>
   15d64:	bl	11748 <__errno_location@plt>
   15d68:	mov	r1, #40	; 0x28
   15d6c:	str	r1, [r0]
   15d70:	mov	r4, #1
   15d74:	b	15c88 <__assert_fail@plt+0x439c>
   15d78:	movw	r1, #5048	; 0x13b8
   15d7c:	movt	r1, #3
   15d80:	str	r0, [r1]
   15d84:	bx	lr
   15d88:	movw	r1, #5052	; 0x13bc
   15d8c:	movt	r1, #3
   15d90:	strb	r0, [r1]
   15d94:	bx	lr
   15d98:	push	{r4, r5, r6, sl, fp, lr}
   15d9c:	add	fp, sp, #16
   15da0:	sub	sp, sp, #8
   15da4:	movw	r0, #4916	; 0x1334
   15da8:	movt	r0, #3
   15dac:	ldr	r0, [r0]
   15db0:	bl	1e5f4 <__assert_fail@plt+0xcd08>
   15db4:	cmp	r0, #0
   15db8:	beq	15de0 <__assert_fail@plt+0x44f4>
   15dbc:	movw	r0, #5052	; 0x13bc
   15dc0:	movt	r0, #3
   15dc4:	ldrb	r0, [r0]
   15dc8:	cmp	r0, #0
   15dcc:	beq	15e00 <__assert_fail@plt+0x4514>
   15dd0:	bl	11748 <__errno_location@plt>
   15dd4:	ldr	r0, [r0]
   15dd8:	cmp	r0, #32
   15ddc:	bne	15e00 <__assert_fail@plt+0x4514>
   15de0:	movw	r0, #4912	; 0x1330
   15de4:	movt	r0, #3
   15de8:	ldr	r0, [r0]
   15dec:	bl	1e5f4 <__assert_fail@plt+0xcd08>
   15df0:	cmp	r0, #0
   15df4:	subeq	sp, fp, #16
   15df8:	popeq	{r4, r5, r6, sl, fp, pc}
   15dfc:	b	15e70 <__assert_fail@plt+0x4584>
   15e00:	movw	r1, #737	; 0x2e1
   15e04:	mov	r0, #0
   15e08:	mov	r2, #5
   15e0c:	movt	r1, #2
   15e10:	bl	115a4 <dcgettext@plt>
   15e14:	mov	r4, r0
   15e18:	movw	r0, #5048	; 0x13b8
   15e1c:	movt	r0, #3
   15e20:	ldr	r6, [r0]
   15e24:	bl	11748 <__errno_location@plt>
   15e28:	ldr	r5, [r0]
   15e2c:	cmp	r6, #0
   15e30:	bne	15e4c <__assert_fail@plt+0x4560>
   15e34:	movw	r2, #2580	; 0xa14
   15e38:	mov	r0, #0
   15e3c:	mov	r1, r5
   15e40:	mov	r3, r4
   15e44:	movt	r2, #2
   15e48:	b	15e6c <__assert_fail@plt+0x4580>
   15e4c:	mov	r0, r6
   15e50:	bl	1b018 <__assert_fail@plt+0x972c>
   15e54:	movw	r2, #749	; 0x2ed
   15e58:	mov	r3, r0
   15e5c:	str	r4, [sp]
   15e60:	mov	r0, #0
   15e64:	mov	r1, r5
   15e68:	movt	r2, #2
   15e6c:	bl	11670 <error@plt>
   15e70:	movw	r0, #4816	; 0x12d0
   15e74:	movt	r0, #3
   15e78:	ldr	r0, [r0]
   15e7c:	bl	11568 <_exit@plt>
   15e80:	push	{fp, lr}
   15e84:	mov	fp, sp
   15e88:	bl	15ee0 <__assert_fail@plt+0x45f4>
   15e8c:	cmp	r0, #0
   15e90:	popne	{fp, pc}
   15e94:	bl	1c304 <__assert_fail@plt+0xaa18>
   15e98:	push	{r4, r5, r6, sl, fp, lr}
   15e9c:	add	fp, sp, #16
   15ea0:	mov	r5, r0
   15ea4:	mov	r4, r0
   15ea8:	ldrb	r6, [r5], #-1
   15eac:	bl	1e218 <__assert_fail@plt+0xc92c>
   15eb0:	sub	r2, r0, r4
   15eb4:	sub	r0, r6, #47	; 0x2f
   15eb8:	clz	r0, r0
   15ebc:	lsr	r1, r0, #5
   15ec0:	mov	r0, r2
   15ec4:	cmp	r2, r1
   15ec8:	bls	15edc <__assert_fail@plt+0x45f0>
   15ecc:	ldrb	r3, [r5, r0]
   15ed0:	sub	r2, r0, #1
   15ed4:	cmp	r3, #47	; 0x2f
   15ed8:	beq	15ec0 <__assert_fail@plt+0x45d4>
   15edc:	pop	{r4, r5, r6, sl, fp, pc}
   15ee0:	push	{r4, r5, r6, sl, fp, lr}
   15ee4:	add	fp, sp, #16
   15ee8:	mov	r6, r0
   15eec:	mov	r4, r0
   15ef0:	ldrb	r5, [r6], #-1
   15ef4:	bl	1e218 <__assert_fail@plt+0xc92c>
   15ef8:	sub	r1, r0, r4
   15efc:	sub	r0, r5, #47	; 0x2f
   15f00:	clz	r0, r0
   15f04:	lsr	r0, r0, #5
   15f08:	mov	r5, r1
   15f0c:	cmp	r1, r0
   15f10:	bls	15f24 <__assert_fail@plt+0x4638>
   15f14:	ldrb	r2, [r6, r5]
   15f18:	sub	r1, r5, #1
   15f1c:	cmp	r2, #47	; 0x2f
   15f20:	beq	15f08 <__assert_fail@plt+0x461c>
   15f24:	cmp	r5, #0
   15f28:	mov	r0, r5
   15f2c:	addeq	r0, r0, #1
   15f30:	add	r0, r0, #1
   15f34:	bl	1d13c <__assert_fail@plt+0xb850>
   15f38:	mov	r6, r0
   15f3c:	cmp	r0, #0
   15f40:	beq	15f6c <__assert_fail@plt+0x4680>
   15f44:	mov	r0, r6
   15f48:	mov	r1, r4
   15f4c:	mov	r2, r5
   15f50:	bl	11574 <memcpy@plt>
   15f54:	cmp	r5, #0
   15f58:	moveq	r0, #46	; 0x2e
   15f5c:	moveq	r5, #1
   15f60:	strbeq	r0, [r6]
   15f64:	mov	r0, #0
   15f68:	strb	r0, [r6, r5]
   15f6c:	mov	r0, r6
   15f70:	pop	{r4, r5, r6, sl, fp, pc}
   15f74:	push	{r4, r5, r6, r7, fp, lr}
   15f78:	add	fp, sp, #16
   15f7c:	cmp	r0, #0
   15f80:	beq	15fe8 <__assert_fail@plt+0x46fc>
   15f84:	mov	r5, r0
   15f88:	mov	r0, #24
   15f8c:	mov	r6, r2
   15f90:	mov	r7, r1
   15f94:	bl	1bdc8 <__assert_fail@plt+0xa4dc>
   15f98:	mov	r4, r0
   15f9c:	mov	r0, r7
   15fa0:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   15fa4:	str	r0, [r4]
   15fa8:	ldrd	r0, [r6, #96]	; 0x60
   15fac:	str	r0, [r4, #8]
   15fb0:	str	r1, [r4, #12]
   15fb4:	ldrd	r0, [r6]
   15fb8:	str	r1, [r4, #20]
   15fbc:	str	r0, [r4, #16]
   15fc0:	mov	r0, r5
   15fc4:	mov	r1, r4
   15fc8:	bl	17178 <__assert_fail@plt+0x588c>
   15fcc:	cmp	r0, #0
   15fd0:	beq	15fec <__assert_fail@plt+0x4700>
   15fd4:	cmp	r0, r4
   15fd8:	beq	15fe8 <__assert_fail@plt+0x46fc>
   15fdc:	mov	r0, r4
   15fe0:	pop	{r4, r5, r6, r7, fp, lr}
   15fe4:	b	17500 <__assert_fail@plt+0x5c14>
   15fe8:	pop	{r4, r5, r6, r7, fp, pc}
   15fec:	bl	1c304 <__assert_fail@plt+0xaa18>
   15ff0:	cmp	r0, #0
   15ff4:	moveq	r0, #0
   15ff8:	bxeq	lr
   15ffc:	push	{r4, r5, fp, lr}
   16000:	add	fp, sp, #8
   16004:	sub	sp, sp, #24
   16008:	str	r1, [sp]
   1600c:	mov	ip, sp
   16010:	mov	r1, sp
   16014:	ldrd	r4, [r2, #96]	; 0x60
   16018:	add	r3, ip, #8
   1601c:	add	ip, ip, #16
   16020:	strd	r4, [r3]
   16024:	ldrd	r2, [r2]
   16028:	strd	r2, [ip]
   1602c:	bl	16370 <__assert_fail@plt+0x4a84>
   16030:	cmp	r0, #0
   16034:	movwne	r0, #1
   16038:	sub	sp, fp, #8
   1603c:	pop	{r4, r5, fp, pc}
   16040:	push	{r4, r5, r6, sl, fp, lr}
   16044:	add	fp, sp, #16
   16048:	mov	r4, r0
   1604c:	bl	11748 <__errno_location@plt>
   16050:	ldr	r6, [r0]
   16054:	mov	r5, r0
   16058:	mov	r0, r4
   1605c:	bl	11550 <free@plt>
   16060:	str	r6, [r5]
   16064:	pop	{r4, r5, r6, sl, fp, pc}
   16068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1606c:	add	fp, sp, #28
   16070:	sub	sp, sp, #404	; 0x194
   16074:	movw	r6, #4820	; 0x12d4
   16078:	mov	r4, r2
   1607c:	mov	r5, r0
   16080:	add	r7, sp, #8
   16084:	movt	r6, #3
   16088:	ldr	r1, [r6]
   1608c:	cmn	r1, #1
   16090:	bgt	160c8 <__assert_fail@plt+0x47dc>
   16094:	add	r8, sp, #8
   16098:	mov	r0, r8
   1609c:	bl	11598 <uname@plt>
   160a0:	mov	r1, #0
   160a4:	cmp	r0, #0
   160a8:	bne	160c4 <__assert_fail@plt+0x47d8>
   160ac:	movw	r1, #756	; 0x2f4
   160b0:	add	r0, r8, #130	; 0x82
   160b4:	movt	r1, #2
   160b8:	bl	11508 <strverscmp@plt>
   160bc:	mvn	r0, r0
   160c0:	lsr	r1, r0, #31
   160c4:	str	r1, [r6]
   160c8:	add	r0, r7, #32
   160cc:	add	r6, r7, #8
   160d0:	add	sl, r7, #24
   160d4:	add	r8, r4, #8
   160d8:	add	r7, r4, #24
   160dc:	add	r9, r4, #40	; 0x28
   160e0:	cmp	r1, #0
   160e4:	str	r0, [sp, #4]
   160e8:	beq	16124 <__assert_fail@plt+0x4838>
   160ec:	add	r1, sp, #8
   160f0:	mov	r0, r5
   160f4:	bl	11784 <statvfs64@plt>
   160f8:	cmp	r0, #0
   160fc:	bmi	16174 <__assert_fail@plt+0x4888>
   16100:	ldr	r1, [sp, #12]
   16104:	ldr	r0, [sp, #8]
   16108:	cmp	r1, #0
   1610c:	movne	r0, r1
   16110:	cmn	r0, #1
   16114:	mov	r1, r0
   16118:	movwne	r1, #0
   1611c:	movne	r0, r0
   16120:	b	16140 <__assert_fail@plt+0x4854>
   16124:	add	r1, sp, #8
   16128:	mov	r0, r5
   1612c:	bl	11814 <statfs64@plt>
   16130:	cmp	r0, #0
   16134:	bmi	16174 <__assert_fail@plt+0x4888>
   16138:	ldr	r0, [sp, #68]	; 0x44
   1613c:	asr	r1, r0, #31
   16140:	strd	r0, [r4]
   16144:	vld1.64	{d16-d17}, [r6]
   16148:	vst1.64	{d16-d17}, [r8]
   1614c:	ldrd	r0, [sl]
   16150:	strd	r0, [r7]
   16154:	lsr	r0, r1, #31
   16158:	strb	r0, [r4, #32]
   1615c:	ldr	r0, [sp, #4]
   16160:	vld1.64	{d16-d17}, [r0]
   16164:	mov	r0, #0
   16168:	vst1.64	{d16-d17}, [r9]
   1616c:	sub	sp, fp, #28
   16170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16174:	mvn	r0, #0
   16178:	sub	sp, fp, #28
   1617c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16180:	ldr	r0, [r0, #8]
   16184:	bx	lr
   16188:	ldr	r0, [r0, #12]
   1618c:	bx	lr
   16190:	ldr	r0, [r0, #16]
   16194:	bx	lr
   16198:	ldm	r0, {r2, ip}
   1619c:	mov	r0, #0
   161a0:	cmp	r2, ip
   161a4:	bxcs	lr
   161a8:	mov	r0, #0
   161ac:	b	161bc <__assert_fail@plt+0x48d0>
   161b0:	add	r2, r2, #8
   161b4:	cmp	r2, ip
   161b8:	bcs	161ec <__assert_fail@plt+0x4900>
   161bc:	ldr	r1, [r2]
   161c0:	cmp	r1, #0
   161c4:	beq	161b0 <__assert_fail@plt+0x48c4>
   161c8:	mov	r3, #0
   161cc:	mov	r1, r2
   161d0:	ldr	r1, [r1, #4]
   161d4:	add	r3, r3, #1
   161d8:	cmp	r1, #0
   161dc:	bne	161d0 <__assert_fail@plt+0x48e4>
   161e0:	cmp	r3, r0
   161e4:	movhi	r0, r3
   161e8:	b	161b0 <__assert_fail@plt+0x48c4>
   161ec:	bx	lr
   161f0:	push	{fp, lr}
   161f4:	mov	fp, sp
   161f8:	ldm	r0, {r3, ip}
   161fc:	mov	lr, #0
   16200:	mov	r1, #0
   16204:	cmp	r3, ip
   16208:	bcs	1624c <__assert_fail@plt+0x4960>
   1620c:	mov	r1, #0
   16210:	mov	lr, #0
   16214:	b	16224 <__assert_fail@plt+0x4938>
   16218:	add	r3, r3, #8
   1621c:	cmp	r3, ip
   16220:	bcs	1624c <__assert_fail@plt+0x4960>
   16224:	ldr	r2, [r3]
   16228:	cmp	r2, #0
   1622c:	beq	16218 <__assert_fail@plt+0x492c>
   16230:	mov	r2, r3
   16234:	ldr	r2, [r2, #4]
   16238:	add	r1, r1, #1
   1623c:	cmp	r2, #0
   16240:	bne	16234 <__assert_fail@plt+0x4948>
   16244:	add	lr, lr, #1
   16248:	b	16218 <__assert_fail@plt+0x492c>
   1624c:	ldr	r2, [r0, #12]
   16250:	cmp	lr, r2
   16254:	bne	1626c <__assert_fail@plt+0x4980>
   16258:	ldr	r2, [r0, #16]
   1625c:	mov	r0, #1
   16260:	cmp	r1, r2
   16264:	movne	r0, #0
   16268:	pop	{fp, pc}
   1626c:	mov	r0, #0
   16270:	pop	{fp, pc}
   16274:	nop	{0}
   16278:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1627c:	add	fp, sp, #24
   16280:	sub	sp, sp, #8
   16284:	ldr	r6, [r0]
   16288:	ldmib	r0, {r2, r7, r8}
   1628c:	ldr	r3, [r0, #16]
   16290:	mov	r4, r1
   16294:	mov	r5, #0
   16298:	cmp	r6, r2
   1629c:	bcs	162e4 <__assert_fail@plt+0x49f8>
   162a0:	mov	r5, #0
   162a4:	b	162b4 <__assert_fail@plt+0x49c8>
   162a8:	add	r6, r6, #8
   162ac:	cmp	r6, r2
   162b0:	bcs	162e4 <__assert_fail@plt+0x49f8>
   162b4:	ldr	r0, [r6]
   162b8:	cmp	r0, #0
   162bc:	beq	162a8 <__assert_fail@plt+0x49bc>
   162c0:	mov	r0, #0
   162c4:	mov	r1, r6
   162c8:	ldr	r1, [r1, #4]
   162cc:	add	r0, r0, #1
   162d0:	cmp	r1, #0
   162d4:	bne	162c8 <__assert_fail@plt+0x49dc>
   162d8:	cmp	r0, r5
   162dc:	movhi	r5, r0
   162e0:	b	162a8 <__assert_fail@plt+0x49bc>
   162e4:	movw	r2, #763	; 0x2fb
   162e8:	mov	r0, r4
   162ec:	mov	r1, #1
   162f0:	movt	r2, #2
   162f4:	bl	1179c <__fprintf_chk@plt>
   162f8:	movw	r2, #787	; 0x313
   162fc:	mov	r0, r4
   16300:	mov	r1, #1
   16304:	mov	r3, r7
   16308:	movt	r2, #2
   1630c:	bl	1179c <__fprintf_chk@plt>
   16310:	vmov	s0, r8
   16314:	vldr	d16, [pc, #76]	; 16368 <__assert_fail@plt+0x4a7c>
   16318:	movw	r2, #811	; 0x32b
   1631c:	mov	r0, r4
   16320:	mov	r1, #1
   16324:	mov	r3, r8
   16328:	movt	r2, #2
   1632c:	vcvt.f64.u32	d17, s0
   16330:	vmov	s0, r7
   16334:	vcvt.f64.u32	d18, s0
   16338:	vmul.f64	d16, d17, d16
   1633c:	vdiv.f64	d16, d16, d18
   16340:	vstr	d16, [sp]
   16344:	bl	1179c <__fprintf_chk@plt>
   16348:	movw	r2, #844	; 0x34c
   1634c:	mov	r0, r4
   16350:	mov	r1, #1
   16354:	mov	r3, r5
   16358:	movt	r2, #2
   1635c:	sub	sp, fp, #24
   16360:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16364:	b	1179c <__fprintf_chk@plt>
   16368:	andeq	r0, r0, r0
   1636c:	subsmi	r0, r9, r0
   16370:	push	{r4, r5, r6, r7, fp, lr}
   16374:	add	fp, sp, #16
   16378:	mov	r4, r1
   1637c:	ldr	r1, [r0, #8]
   16380:	ldr	r2, [r0, #24]
   16384:	mov	r5, r0
   16388:	mov	r0, r4
   1638c:	blx	r2
   16390:	ldr	r1, [r5, #8]
   16394:	cmp	r0, r1
   16398:	bcs	16400 <__assert_fail@plt+0x4b14>
   1639c:	ldr	r7, [r5]
   163a0:	mov	r6, #0
   163a4:	ldr	r1, [r7, r0, lsl #3]!
   163a8:	cmp	r1, #0
   163ac:	cmpne	r7, #0
   163b0:	bne	163e0 <__assert_fail@plt+0x4af4>
   163b4:	mov	r0, r6
   163b8:	pop	{r4, r5, r6, r7, fp, pc}
   163bc:	ldr	r2, [r5, #28]
   163c0:	mov	r0, r4
   163c4:	blx	r2
   163c8:	cmp	r0, #0
   163cc:	bne	163f4 <__assert_fail@plt+0x4b08>
   163d0:	ldr	r7, [r7, #4]
   163d4:	cmp	r7, #0
   163d8:	beq	163b4 <__assert_fail@plt+0x4ac8>
   163dc:	ldr	r1, [r7]
   163e0:	cmp	r1, r4
   163e4:	bne	163bc <__assert_fail@plt+0x4ad0>
   163e8:	mov	r6, r4
   163ec:	mov	r0, r6
   163f0:	pop	{r4, r5, r6, r7, fp, pc}
   163f4:	ldr	r6, [r7]
   163f8:	mov	r0, r6
   163fc:	pop	{r4, r5, r6, r7, fp, pc}
   16400:	bl	118bc <abort@plt>
   16404:	push	{fp, lr}
   16408:	mov	fp, sp
   1640c:	ldr	r1, [r0, #16]
   16410:	cmp	r1, #0
   16414:	beq	16434 <__assert_fail@plt+0x4b48>
   16418:	ldm	r0, {r1, r2}
   1641c:	cmp	r1, r2
   16420:	bcs	1643c <__assert_fail@plt+0x4b50>
   16424:	ldr	r0, [r1], #8
   16428:	cmp	r0, #0
   1642c:	beq	1641c <__assert_fail@plt+0x4b30>
   16430:	pop	{fp, pc}
   16434:	mov	r0, #0
   16438:	pop	{fp, pc}
   1643c:	bl	118bc <abort@plt>
   16440:	push	{r4, r5, fp, lr}
   16444:	add	fp, sp, #8
   16448:	mov	r5, r1
   1644c:	ldr	r1, [r0, #8]
   16450:	ldr	r2, [r0, #24]
   16454:	mov	r4, r0
   16458:	mov	r0, r5
   1645c:	blx	r2
   16460:	ldr	r1, [r4, #8]
   16464:	cmp	r0, r1
   16468:	bcs	164cc <__assert_fail@plt+0x4be0>
   1646c:	ldr	r1, [r4]
   16470:	add	r2, r1, r0, lsl #3
   16474:	ldr	r3, [r2]
   16478:	ldr	r2, [r2, #4]
   1647c:	cmp	r3, r5
   16480:	beq	16490 <__assert_fail@plt+0x4ba4>
   16484:	cmp	r2, #0
   16488:	bne	16474 <__assert_fail@plt+0x4b88>
   1648c:	b	164a0 <__assert_fail@plt+0x4bb4>
   16490:	cmp	r2, #0
   16494:	beq	164a0 <__assert_fail@plt+0x4bb4>
   16498:	ldr	r0, [r2]
   1649c:	pop	{r4, r5, fp, pc}
   164a0:	ldr	r2, [r4, #4]
   164a4:	add	r0, r1, r0, lsl #3
   164a8:	add	r1, r0, #8
   164ac:	cmp	r1, r2
   164b0:	bcs	164c4 <__assert_fail@plt+0x4bd8>
   164b4:	ldr	r0, [r1], #8
   164b8:	cmp	r0, #0
   164bc:	beq	164ac <__assert_fail@plt+0x4bc0>
   164c0:	pop	{r4, r5, fp, pc}
   164c4:	mov	r0, #0
   164c8:	pop	{r4, r5, fp, pc}
   164cc:	bl	118bc <abort@plt>
   164d0:	push	{r4, r5, fp, lr}
   164d4:	add	fp, sp, #8
   164d8:	ldm	r0, {r5, lr}
   164dc:	mov	ip, r0
   164e0:	mov	r0, #0
   164e4:	cmp	r5, lr
   164e8:	popcs	{r4, r5, fp, pc}
   164ec:	mov	r0, #0
   164f0:	b	16504 <__assert_fail@plt+0x4c18>
   164f4:	ldr	lr, [ip, #4]
   164f8:	add	r5, r5, #8
   164fc:	cmp	r5, lr
   16500:	bcs	1653c <__assert_fail@plt+0x4c50>
   16504:	ldr	r3, [r5]
   16508:	cmp	r3, #0
   1650c:	cmpne	r5, #0
   16510:	beq	164f8 <__assert_fail@plt+0x4c0c>
   16514:	mov	r3, r5
   16518:	cmp	r0, r2
   1651c:	bcs	1653c <__assert_fail@plt+0x4c50>
   16520:	ldr	r4, [r3]
   16524:	str	r4, [r1, r0, lsl #2]
   16528:	add	r0, r0, #1
   1652c:	ldr	r3, [r3, #4]
   16530:	cmp	r3, #0
   16534:	bne	16518 <__assert_fail@plt+0x4c2c>
   16538:	b	164f4 <__assert_fail@plt+0x4c08>
   1653c:	pop	{r4, r5, fp, pc}
   16540:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16544:	add	fp, sp, #24
   16548:	mov	r5, r1
   1654c:	ldr	r4, [r0]
   16550:	ldr	r1, [r0, #4]
   16554:	mov	r6, #0
   16558:	cmp	r4, r1
   1655c:	bcs	165c8 <__assert_fail@plt+0x4cdc>
   16560:	mov	r9, r2
   16564:	mov	r8, r0
   16568:	mov	r6, #0
   1656c:	b	16580 <__assert_fail@plt+0x4c94>
   16570:	ldr	r1, [r8, #4]
   16574:	add	r4, r4, #8
   16578:	cmp	r4, r1
   1657c:	bcs	165c8 <__assert_fail@plt+0x4cdc>
   16580:	ldr	r0, [r4]
   16584:	cmp	r0, #0
   16588:	cmpne	r4, #0
   1658c:	beq	16574 <__assert_fail@plt+0x4c88>
   16590:	mov	r1, r9
   16594:	blx	r5
   16598:	cmp	r0, #0
   1659c:	beq	165c8 <__assert_fail@plt+0x4cdc>
   165a0:	mov	r7, r4
   165a4:	ldr	r7, [r7, #4]
   165a8:	add	r6, r6, #1
   165ac:	cmp	r7, #0
   165b0:	beq	16570 <__assert_fail@plt+0x4c84>
   165b4:	ldr	r0, [r7]
   165b8:	mov	r1, r9
   165bc:	blx	r5
   165c0:	cmp	r0, #0
   165c4:	bne	165a4 <__assert_fail@plt+0x4cb8>
   165c8:	mov	r0, r6
   165cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   165d0:	ldrb	r2, [r0]
   165d4:	cmp	r2, #0
   165d8:	moveq	r0, #0
   165dc:	bxeq	lr
   165e0:	add	r3, r0, #1
   165e4:	mov	r0, #0
   165e8:	rsb	r0, r0, r0, lsl #5
   165ec:	uxtab	r0, r0, r2
   165f0:	udiv	r2, r0, r1
   165f4:	mls	r0, r2, r1, r0
   165f8:	ldrb	r2, [r3], #1
   165fc:	cmp	r2, #0
   16600:	bne	165e8 <__assert_fail@plt+0x4cfc>
   16604:	bx	lr
   16608:	movw	r1, #872	; 0x368
   1660c:	movt	r1, #2
   16610:	vld1.32	{d16-d17}, [r1]!
   16614:	ldr	r1, [r1]
   16618:	vst1.32	{d16-d17}, [r0]!
   1661c:	str	r1, [r0]
   16620:	bx	lr
   16624:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16628:	add	fp, sp, #24
   1662c:	movw	r9, #26700	; 0x684c
   16630:	cmp	r3, #0
   16634:	movw	r5, #26680	; 0x6838
   16638:	mov	r6, r0
   1663c:	mov	r0, #40	; 0x28
   16640:	mov	r7, r1
   16644:	movt	r9, #1
   16648:	movne	r9, r3
   1664c:	cmp	r2, #0
   16650:	movt	r5, #1
   16654:	movne	r5, r2
   16658:	bl	1d13c <__assert_fail@plt+0xb850>
   1665c:	mov	r8, #0
   16660:	cmp	r0, #0
   16664:	beq	16820 <__assert_fail@plt+0x4f34>
   16668:	mov	r4, r0
   1666c:	movw	r0, #872	; 0x368
   16670:	cmp	r7, #0
   16674:	movt	r0, #2
   16678:	moveq	r7, r0
   1667c:	cmp	r7, r0
   16680:	str	r7, [r4, #20]
   16684:	beq	16700 <__assert_fail@plt+0x4e14>
   16688:	vldr	s2, [pc, #408]	; 16828 <__assert_fail@plt+0x4f3c>
   1668c:	vldr	s0, [r7, #8]
   16690:	vcmpe.f32	s0, s2
   16694:	vmrs	APSR_nzcv, fpscr
   16698:	ble	167ac <__assert_fail@plt+0x4ec0>
   1669c:	vldr	s4, [pc, #392]	; 1682c <__assert_fail@plt+0x4f40>
   166a0:	vcmpe.f32	s0, s4
   166a4:	vmrs	APSR_nzcv, fpscr
   166a8:	bpl	167ac <__assert_fail@plt+0x4ec0>
   166ac:	vldr	s4, [pc, #380]	; 16830 <__assert_fail@plt+0x4f44>
   166b0:	vldr	s6, [r7, #12]
   166b4:	vcmpe.f32	s6, s4
   166b8:	vmrs	APSR_nzcv, fpscr
   166bc:	ble	167ac <__assert_fail@plt+0x4ec0>
   166c0:	vldr	s4, [r7]
   166c4:	vcmpe.f32	s4, #0.0
   166c8:	vmrs	APSR_nzcv, fpscr
   166cc:	blt	167ac <__assert_fail@plt+0x4ec0>
   166d0:	vadd.f32	s2, s4, s2
   166d4:	vcmpe.f32	s2, s0
   166d8:	vmrs	APSR_nzcv, fpscr
   166dc:	bpl	167ac <__assert_fail@plt+0x4ec0>
   166e0:	vldr	s0, [r7, #4]
   166e4:	vmov.f32	s4, #112	; 0x3f800000  1.0
   166e8:	vcmpe.f32	s0, s4
   166ec:	vmrs	APSR_nzcv, fpscr
   166f0:	bhi	167ac <__assert_fail@plt+0x4ec0>
   166f4:	vcmpe.f32	s2, s0
   166f8:	vmrs	APSR_nzcv, fpscr
   166fc:	bpl	167ac <__assert_fail@plt+0x4ec0>
   16700:	ldrb	r0, [r7, #16]
   16704:	cmp	r0, #0
   16708:	bne	16734 <__assert_fail@plt+0x4e48>
   1670c:	vmov	s2, r6
   16710:	vldr	s0, [r7, #8]
   16714:	vldr	s4, [pc, #280]	; 16834 <__assert_fail@plt+0x4f48>
   16718:	vcvt.f32.u32	s2, s2
   1671c:	vdiv.f32	s2, s2, s0
   16720:	vcvt.u32.f32	s0, s2
   16724:	vcmpe.f32	s2, s4
   16728:	vmrs	APSR_nzcv, fpscr
   1672c:	bge	167bc <__assert_fail@plt+0x4ed0>
   16730:	vmov	r6, s0
   16734:	cmp	r6, #10
   16738:	movls	r6, #10
   1673c:	orr	r0, r6, #1
   16740:	cmn	r0, #1
   16744:	beq	167bc <__assert_fail@plt+0x4ed0>
   16748:	ldr	r6, [fp, #8]
   1674c:	mov	r1, #3
   16750:	cmp	r0, #10
   16754:	bcc	1678c <__assert_fail@plt+0x4ea0>
   16758:	mov	r1, #3
   1675c:	mov	r3, #9
   16760:	mov	r2, #12
   16764:	udiv	r7, r0, r1
   16768:	mls	r7, r7, r1, r0
   1676c:	cmp	r7, #0
   16770:	beq	1678c <__assert_fail@plt+0x4ea0>
   16774:	add	r3, r3, r2
   16778:	add	r2, r2, #8
   1677c:	add	r1, r1, #2
   16780:	add	r3, r3, #4
   16784:	cmp	r3, r0
   16788:	bcc	16764 <__assert_fail@plt+0x4e78>
   1678c:	udiv	r2, r0, r1
   16790:	mls	r1, r2, r1, r0
   16794:	cmp	r1, #0
   16798:	bne	167b4 <__assert_fail@plt+0x4ec8>
   1679c:	add	r0, r0, #2
   167a0:	cmn	r0, #1
   167a4:	bne	1674c <__assert_fail@plt+0x4e60>
   167a8:	b	167bc <__assert_fail@plt+0x4ed0>
   167ac:	str	r0, [r4, #20]
   167b0:	b	167c4 <__assert_fail@plt+0x4ed8>
   167b4:	cmp	r0, #536870912	; 0x20000000
   167b8:	bcc	167d4 <__assert_fail@plt+0x4ee8>
   167bc:	mov	r0, #0
   167c0:	str	r0, [r4, #8]
   167c4:	mov	r0, r4
   167c8:	bl	16040 <__assert_fail@plt+0x4754>
   167cc:	mov	r0, r8
   167d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   167d4:	cmp	r0, #0
   167d8:	str	r0, [r4, #8]
   167dc:	beq	167c4 <__assert_fail@plt+0x4ed8>
   167e0:	mov	r1, #8
   167e4:	bl	1d0e8 <__assert_fail@plt+0xb7fc>
   167e8:	cmp	r0, #0
   167ec:	str	r0, [r4]
   167f0:	beq	167c4 <__assert_fail@plt+0x4ed8>
   167f4:	mov	r1, #0
   167f8:	str	r5, [r4, #24]
   167fc:	str	r9, [r4, #28]
   16800:	str	r6, [r4, #32]
   16804:	mov	r8, r4
   16808:	str	r1, [r4, #36]	; 0x24
   1680c:	str	r1, [r4, #12]
   16810:	str	r1, [r4, #16]
   16814:	ldr	r1, [r4, #8]
   16818:	add	r0, r0, r1, lsl #3
   1681c:	str	r0, [r4, #4]
   16820:	mov	r0, r8
   16824:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16828:	stclcc	12, cr12, [ip, #820]	; 0x334
   1682c:	svccc	0x00666666
   16830:	svccc	0x008ccccd
   16834:	svcmi	0x00800000
   16838:	ror	r2, r0, #3
   1683c:	udiv	r2, r2, r1
   16840:	mul	r1, r2, r1
   16844:	rsb	r0, r1, r0, ror #3
   16848:	bx	lr
   1684c:	sub	r0, r0, r1
   16850:	clz	r0, r0
   16854:	lsr	r0, r0, #5
   16858:	bx	lr
   1685c:	push	{r4, r5, r6, r7, fp, lr}
   16860:	add	fp, sp, #16
   16864:	mov	r4, r0
   16868:	ldr	r5, [r0]
   1686c:	ldr	r0, [r0, #4]
   16870:	cmp	r5, r0
   16874:	bcs	16918 <__assert_fail@plt+0x502c>
   16878:	mov	r6, #0
   1687c:	b	16898 <__assert_fail@plt+0x4fac>
   16880:	str	r6, [r5]
   16884:	str	r6, [r5, #4]
   16888:	ldr	r0, [r4, #4]
   1688c:	add	r5, r5, #8
   16890:	cmp	r5, r0
   16894:	bcs	16918 <__assert_fail@plt+0x502c>
   16898:	ldr	r1, [r5]
   1689c:	cmp	r1, #0
   168a0:	beq	1688c <__assert_fail@plt+0x4fa0>
   168a4:	ldr	r1, [r4, #32]
   168a8:	ldr	r7, [r5, #4]
   168ac:	cmp	r1, #0
   168b0:	mov	r0, r1
   168b4:	movwne	r0, #1
   168b8:	cmp	r7, #0
   168bc:	bne	16900 <__assert_fail@plt+0x5014>
   168c0:	cmp	r0, #0
   168c4:	beq	16880 <__assert_fail@plt+0x4f94>
   168c8:	ldr	r0, [r5]
   168cc:	blx	r1
   168d0:	b	16880 <__assert_fail@plt+0x4f94>
   168d4:	str	r6, [r7]
   168d8:	cmp	r1, #0
   168dc:	ldr	r2, [r7, #4]
   168e0:	ldr	r0, [r4, #36]	; 0x24
   168e4:	str	r0, [r7, #4]
   168e8:	mov	r0, r1
   168ec:	str	r7, [r4, #36]	; 0x24
   168f0:	movwne	r0, #1
   168f4:	cmp	r2, #0
   168f8:	mov	r7, r2
   168fc:	beq	168c0 <__assert_fail@plt+0x4fd4>
   16900:	tst	r0, #1
   16904:	beq	168d4 <__assert_fail@plt+0x4fe8>
   16908:	ldr	r0, [r7]
   1690c:	blx	r1
   16910:	ldr	r1, [r4, #32]
   16914:	b	168d4 <__assert_fail@plt+0x4fe8>
   16918:	mov	r0, #0
   1691c:	str	r0, [r4, #12]
   16920:	str	r0, [r4, #16]
   16924:	pop	{r4, r5, r6, r7, fp, pc}
   16928:	push	{r4, r5, r6, sl, fp, lr}
   1692c:	add	fp, sp, #16
   16930:	mov	r4, r0
   16934:	ldr	r0, [r0, #32]
   16938:	cmp	r0, #0
   1693c:	beq	169b0 <__assert_fail@plt+0x50c4>
   16940:	ldr	r0, [r4, #16]
   16944:	cmp	r0, #0
   16948:	beq	169b0 <__assert_fail@plt+0x50c4>
   1694c:	ldr	r5, [r4]
   16950:	ldr	r1, [r4, #4]
   16954:	cmp	r5, r1
   16958:	bcc	16970 <__assert_fail@plt+0x5084>
   1695c:	b	169b0 <__assert_fail@plt+0x50c4>
   16960:	ldr	r1, [r4, #4]
   16964:	add	r5, r5, #8
   16968:	cmp	r5, r1
   1696c:	bcs	169b0 <__assert_fail@plt+0x50c4>
   16970:	ldr	r0, [r5]
   16974:	cmp	r0, #0
   16978:	cmpne	r5, #0
   1697c:	beq	16964 <__assert_fail@plt+0x5078>
   16980:	ldr	r1, [r4, #32]
   16984:	blx	r1
   16988:	ldr	r6, [r5, #4]
   1698c:	cmp	r6, #0
   16990:	beq	16960 <__assert_fail@plt+0x5074>
   16994:	ldr	r1, [r4, #32]
   16998:	ldr	r0, [r6]
   1699c:	blx	r1
   169a0:	ldr	r6, [r6, #4]
   169a4:	cmp	r6, #0
   169a8:	bne	16994 <__assert_fail@plt+0x50a8>
   169ac:	b	16960 <__assert_fail@plt+0x5074>
   169b0:	ldr	r5, [r4]
   169b4:	ldr	r1, [r4, #4]
   169b8:	cmp	r5, r1
   169bc:	bcc	169d0 <__assert_fail@plt+0x50e4>
   169c0:	b	169f8 <__assert_fail@plt+0x510c>
   169c4:	add	r5, r5, #8
   169c8:	cmp	r5, r1
   169cc:	bcs	169f8 <__assert_fail@plt+0x510c>
   169d0:	ldr	r0, [r5, #4]
   169d4:	cmp	r0, #0
   169d8:	beq	169c4 <__assert_fail@plt+0x50d8>
   169dc:	ldr	r6, [r0, #4]
   169e0:	bl	16040 <__assert_fail@plt+0x4754>
   169e4:	cmp	r6, #0
   169e8:	mov	r0, r6
   169ec:	bne	169dc <__assert_fail@plt+0x50f0>
   169f0:	ldr	r1, [r4, #4]
   169f4:	b	169c4 <__assert_fail@plt+0x50d8>
   169f8:	ldr	r0, [r4, #36]	; 0x24
   169fc:	cmp	r0, #0
   16a00:	beq	16a18 <__assert_fail@plt+0x512c>
   16a04:	ldr	r5, [r0, #4]
   16a08:	bl	16040 <__assert_fail@plt+0x4754>
   16a0c:	cmp	r5, #0
   16a10:	mov	r0, r5
   16a14:	bne	16a04 <__assert_fail@plt+0x5118>
   16a18:	ldr	r0, [r4]
   16a1c:	bl	16040 <__assert_fail@plt+0x4754>
   16a20:	mov	r0, r4
   16a24:	pop	{r4, r5, r6, sl, fp, lr}
   16a28:	b	16040 <__assert_fail@plt+0x4754>
   16a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a30:	add	fp, sp, #28
   16a34:	sub	sp, sp, #44	; 0x2c
   16a38:	mov	r7, r0
   16a3c:	mov	r4, r0
   16a40:	ldr	r0, [r7, #20]!
   16a44:	ldrb	r2, [r0, #16]
   16a48:	cmp	r2, #0
   16a4c:	bne	16a7c <__assert_fail@plt+0x5190>
   16a50:	vmov	s2, r1
   16a54:	vldr	s0, [r0, #8]
   16a58:	vldr	s4, [pc, #564]	; 16c94 <__assert_fail@plt+0x53a8>
   16a5c:	mov	r5, #0
   16a60:	vcvt.f32.u32	s2, s2
   16a64:	vdiv.f32	s2, s2, s0
   16a68:	vcvt.u32.f32	s0, s2
   16a6c:	vcmpe.f32	s2, s4
   16a70:	vmrs	APSR_nzcv, fpscr
   16a74:	bge	16c84 <__assert_fail@plt+0x5398>
   16a78:	vmov	r1, s0
   16a7c:	cmp	r1, #10
   16a80:	mov	r5, #0
   16a84:	movls	r1, #10
   16a88:	orr	r6, r1, #1
   16a8c:	cmn	r6, #1
   16a90:	beq	16c84 <__assert_fail@plt+0x5398>
   16a94:	mov	r0, #3
   16a98:	cmp	r6, #10
   16a9c:	bcc	16ad4 <__assert_fail@plt+0x51e8>
   16aa0:	mov	r0, #3
   16aa4:	mov	r2, #9
   16aa8:	mov	r1, #12
   16aac:	udiv	r3, r6, r0
   16ab0:	mls	r3, r3, r0, r6
   16ab4:	cmp	r3, #0
   16ab8:	beq	16ad4 <__assert_fail@plt+0x51e8>
   16abc:	add	r2, r2, r1
   16ac0:	add	r1, r1, #8
   16ac4:	add	r0, r0, #2
   16ac8:	add	r2, r2, #4
   16acc:	cmp	r2, r6
   16ad0:	bcc	16aac <__assert_fail@plt+0x51c0>
   16ad4:	udiv	r1, r6, r0
   16ad8:	mls	r0, r1, r0, r6
   16adc:	cmp	r0, #0
   16ae0:	bne	16af4 <__assert_fail@plt+0x5208>
   16ae4:	add	r6, r6, #2
   16ae8:	cmn	r6, #1
   16aec:	bne	16a94 <__assert_fail@plt+0x51a8>
   16af0:	b	16c84 <__assert_fail@plt+0x5398>
   16af4:	sub	r0, r6, #1
   16af8:	cmn	r0, #-536870910	; 0xe0000002
   16afc:	bhi	16c84 <__assert_fail@plt+0x5398>
   16b00:	ldr	r0, [r4, #8]
   16b04:	cmp	r6, r0
   16b08:	bne	16b14 <__assert_fail@plt+0x5228>
   16b0c:	mov	r5, #1
   16b10:	b	16c84 <__assert_fail@plt+0x5398>
   16b14:	mov	r0, r6
   16b18:	mov	r1, #8
   16b1c:	bl	1d0e8 <__assert_fail@plt+0xb7fc>
   16b20:	cmp	r0, #0
   16b24:	str	r0, [sp, #4]
   16b28:	beq	16c84 <__assert_fail@plt+0x5398>
   16b2c:	add	r0, r0, r6, lsl #3
   16b30:	mov	r1, #0
   16b34:	add	r5, sp, #4
   16b38:	mov	sl, r4
   16b3c:	mov	r2, #0
   16b40:	str	r1, [sp, #20]
   16b44:	str	r1, [sp, #16]
   16b48:	str	r6, [sp, #12]
   16b4c:	mov	r1, r4
   16b50:	str	r0, [sp, #8]
   16b54:	add	r0, r5, #20
   16b58:	vld1.32	{d16-d17}, [r7]
   16b5c:	vst1.32	{d16-d17}, [r0]
   16b60:	ldr	r0, [sl, #36]!	; 0x24
   16b64:	str	r0, [sp, #40]	; 0x28
   16b68:	mov	r0, r5
   16b6c:	bl	16c98 <__assert_fail@plt+0x53ac>
   16b70:	cmp	r0, #0
   16b74:	beq	16b9c <__assert_fail@plt+0x52b0>
   16b78:	ldr	r0, [r4]
   16b7c:	bl	16040 <__assert_fail@plt+0x4754>
   16b80:	mov	r0, #36	; 0x24
   16b84:	vld1.32	{d16-d17}, [r5], r0
   16b88:	vst1.32	{d16-d17}, [r4], r0
   16b8c:	ldr	r0, [r5]
   16b90:	mov	r5, #1
   16b94:	str	r0, [r4]
   16b98:	b	16c84 <__assert_fail@plt+0x5398>
   16b9c:	ldr	r0, [sp, #40]	; 0x28
   16ba0:	str	r0, [sl]
   16ba4:	ldr	r0, [sp, #8]
   16ba8:	ldr	r8, [sp, #4]
   16bac:	cmp	r8, r0
   16bb0:	str	r0, [sp]
   16bb4:	bcs	16c60 <__assert_fail@plt+0x5374>
   16bb8:	mov	r9, #0
   16bbc:	b	16bd4 <__assert_fail@plt+0x52e8>
   16bc0:	str	r9, [r8, #4]
   16bc4:	ldr	r0, [sp]
   16bc8:	add	r8, r8, #8
   16bcc:	cmp	r8, r0
   16bd0:	bcs	16c60 <__assert_fail@plt+0x5374>
   16bd4:	ldr	r0, [r8]
   16bd8:	cmp	r0, #0
   16bdc:	beq	16bc4 <__assert_fail@plt+0x52d8>
   16be0:	ldr	r6, [r8, #4]
   16be4:	cmp	r6, #0
   16be8:	beq	16bc0 <__assert_fail@plt+0x52d4>
   16bec:	ldr	r1, [r4, #8]
   16bf0:	b	16c14 <__assert_fail@plt+0x5328>
   16bf4:	add	r0, r3, r0, lsl #3
   16bf8:	add	r0, r0, #4
   16bfc:	ldr	r3, [r0]
   16c00:	cmp	r2, #0
   16c04:	str	r3, [r6, #4]
   16c08:	str	r6, [r0]
   16c0c:	mov	r6, r2
   16c10:	beq	16bc0 <__assert_fail@plt+0x52d4>
   16c14:	ldr	r5, [r6]
   16c18:	ldr	r2, [r4, #24]
   16c1c:	mov	r0, r5
   16c20:	blx	r2
   16c24:	ldr	r1, [r4, #8]
   16c28:	cmp	r0, r1
   16c2c:	bcs	16c90 <__assert_fail@plt+0x53a4>
   16c30:	ldr	r3, [r4]
   16c34:	ldr	r2, [r6, #4]
   16c38:	ldr	r7, [r3, r0, lsl #3]
   16c3c:	cmp	r7, #0
   16c40:	bne	16bf4 <__assert_fail@plt+0x5308>
   16c44:	str	r5, [r3, r0, lsl #3]
   16c48:	ldr	r0, [r4, #12]
   16c4c:	add	r0, r0, #1
   16c50:	str	r0, [r4, #12]
   16c54:	mov	r0, sl
   16c58:	str	r9, [r6]
   16c5c:	b	16bfc <__assert_fail@plt+0x5310>
   16c60:	add	r1, sp, #4
   16c64:	mov	r0, r4
   16c68:	mov	r2, #0
   16c6c:	mov	r5, #0
   16c70:	bl	16c98 <__assert_fail@plt+0x53ac>
   16c74:	cmp	r0, #0
   16c78:	beq	16c90 <__assert_fail@plt+0x53a4>
   16c7c:	ldr	r0, [sp, #4]
   16c80:	bl	16040 <__assert_fail@plt+0x4754>
   16c84:	mov	r0, r5
   16c88:	sub	sp, fp, #28
   16c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c90:	bl	118bc <abort@plt>
   16c94:	svcmi	0x00800000
   16c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c9c:	add	fp, sp, #28
   16ca0:	sub	sp, sp, #12
   16ca4:	ldr	sl, [r1]
   16ca8:	str	r1, [sp, #8]
   16cac:	ldr	r1, [r1, #4]
   16cb0:	mov	r7, r0
   16cb4:	mov	r0, #1
   16cb8:	str	r2, [sp, #4]
   16cbc:	cmp	sl, r1
   16cc0:	bcs	16e1c <__assert_fail@plt+0x5530>
   16cc4:	add	r8, r7, #36	; 0x24
   16cc8:	mov	r9, #0
   16ccc:	b	16d08 <__assert_fail@plt+0x541c>
   16cd0:	str	r4, [r6, r5, lsl #3]
   16cd4:	ldr	r0, [r7, #12]
   16cd8:	add	r0, r0, #1
   16cdc:	str	r0, [r7, #12]
   16ce0:	ldr	r1, [sp, #8]
   16ce4:	str	r9, [sl]
   16ce8:	ldr	r0, [r1, #12]
   16cec:	sub	r0, r0, #1
   16cf0:	str	r0, [r1, #12]
   16cf4:	ldr	r0, [sp, #8]
   16cf8:	add	sl, sl, #8
   16cfc:	ldr	r0, [r0, #4]
   16d00:	cmp	sl, r0
   16d04:	bcs	16e18 <__assert_fail@plt+0x552c>
   16d08:	ldr	r4, [sl]
   16d0c:	cmp	r4, #0
   16d10:	beq	16cf4 <__assert_fail@plt+0x5408>
   16d14:	ldr	r5, [sl, #4]
   16d18:	cmp	r5, #0
   16d1c:	beq	16d98 <__assert_fail@plt+0x54ac>
   16d20:	ldr	r1, [r7, #8]
   16d24:	b	16d58 <__assert_fail@plt+0x546c>
   16d28:	str	r4, [r3, r0, lsl #3]
   16d2c:	ldr	r0, [r7, #12]
   16d30:	add	r0, r0, #1
   16d34:	str	r0, [r7, #12]
   16d38:	mov	r0, r8
   16d3c:	str	r9, [r5]
   16d40:	ldr	r3, [r0]
   16d44:	cmp	r2, #0
   16d48:	str	r3, [r5, #4]
   16d4c:	str	r5, [r0]
   16d50:	mov	r5, r2
   16d54:	beq	16d94 <__assert_fail@plt+0x54a8>
   16d58:	ldr	r4, [r5]
   16d5c:	ldr	r2, [r7, #24]
   16d60:	mov	r0, r4
   16d64:	blx	r2
   16d68:	ldr	r1, [r7, #8]
   16d6c:	cmp	r0, r1
   16d70:	bcs	16e30 <__assert_fail@plt+0x5544>
   16d74:	ldr	r3, [r7]
   16d78:	ldr	r2, [r5, #4]
   16d7c:	ldr	r6, [r3, r0, lsl #3]
   16d80:	cmp	r6, #0
   16d84:	beq	16d28 <__assert_fail@plt+0x543c>
   16d88:	add	r0, r3, r0, lsl #3
   16d8c:	add	r0, r0, #4
   16d90:	b	16d40 <__assert_fail@plt+0x5454>
   16d94:	ldr	r4, [sl]
   16d98:	ldr	r0, [sp, #4]
   16d9c:	str	r9, [sl, #4]
   16da0:	cmp	r0, #0
   16da4:	bne	16cf4 <__assert_fail@plt+0x5408>
   16da8:	ldr	r1, [r7, #8]
   16dac:	ldr	r2, [r7, #24]
   16db0:	mov	r0, r4
   16db4:	blx	r2
   16db8:	mov	r5, r0
   16dbc:	ldr	r0, [r7, #8]
   16dc0:	cmp	r5, r0
   16dc4:	bcs	16e30 <__assert_fail@plt+0x5544>
   16dc8:	ldr	r6, [r7]
   16dcc:	ldr	r0, [r6, r5, lsl #3]
   16dd0:	cmp	r0, #0
   16dd4:	beq	16cd0 <__assert_fail@plt+0x53e4>
   16dd8:	ldr	r0, [r8]
   16ddc:	cmp	r0, #0
   16de0:	beq	16df0 <__assert_fail@plt+0x5504>
   16de4:	ldr	r1, [r0, #4]
   16de8:	str	r1, [r8]
   16dec:	b	16e00 <__assert_fail@plt+0x5514>
   16df0:	mov	r0, #8
   16df4:	bl	1d13c <__assert_fail@plt+0xb850>
   16df8:	cmp	r0, #0
   16dfc:	beq	16e24 <__assert_fail@plt+0x5538>
   16e00:	add	r1, r6, r5, lsl #3
   16e04:	str	r4, [r0]
   16e08:	ldr	r2, [r1, #4]
   16e0c:	str	r2, [r0, #4]
   16e10:	str	r0, [r1, #4]
   16e14:	b	16ce0 <__assert_fail@plt+0x53f4>
   16e18:	mov	r0, #1
   16e1c:	sub	sp, fp, #28
   16e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e24:	mov	r0, #0
   16e28:	sub	sp, fp, #28
   16e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e30:	bl	118bc <abort@plt>
   16e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e38:	add	fp, sp, #28
   16e3c:	sub	sp, sp, #4
   16e40:	cmp	r1, #0
   16e44:	beq	17160 <__assert_fail@plt+0x5874>
   16e48:	mov	r8, r2
   16e4c:	mov	sl, r1
   16e50:	ldr	r1, [r0, #8]
   16e54:	ldr	r2, [r0, #24]
   16e58:	mov	r4, r0
   16e5c:	mov	r0, sl
   16e60:	blx	r2
   16e64:	mov	r7, r0
   16e68:	ldr	r0, [r4, #8]
   16e6c:	cmp	r7, r0
   16e70:	bcs	17160 <__assert_fail@plt+0x5874>
   16e74:	ldr	r5, [r4]
   16e78:	mov	r9, r5
   16e7c:	ldr	r1, [r9, r7, lsl #3]!
   16e80:	cmp	r1, #0
   16e84:	beq	16f10 <__assert_fail@plt+0x5624>
   16e88:	cmp	r1, sl
   16e8c:	beq	16eb8 <__assert_fail@plt+0x55cc>
   16e90:	ldr	r2, [r4, #28]
   16e94:	mov	r0, sl
   16e98:	blx	r2
   16e9c:	cmp	r0, #0
   16ea0:	mov	r6, r9
   16ea4:	beq	16ecc <__assert_fail@plt+0x55e0>
   16ea8:	ldr	r0, [r6]
   16eac:	cmp	r0, #0
   16eb0:	bne	16ebc <__assert_fail@plt+0x55d0>
   16eb4:	b	16f10 <__assert_fail@plt+0x5624>
   16eb8:	mov	r0, sl
   16ebc:	cmp	r8, #0
   16ec0:	mov	r7, #0
   16ec4:	strne	r0, [r8]
   16ec8:	b	170fc <__assert_fail@plt+0x5810>
   16ecc:	add	r6, r5, r7, lsl #3
   16ed0:	ldr	r0, [r6, #4]!
   16ed4:	cmp	r0, #0
   16ed8:	beq	16f10 <__assert_fail@plt+0x5624>
   16edc:	ldr	r1, [r0]
   16ee0:	cmp	r1, sl
   16ee4:	beq	16f04 <__assert_fail@plt+0x5618>
   16ee8:	ldr	r2, [r4, #28]
   16eec:	mov	r0, sl
   16ef0:	blx	r2
   16ef4:	ldr	r6, [r6]
   16ef8:	cmp	r0, #0
   16efc:	beq	16ed0 <__assert_fail@plt+0x55e4>
   16f00:	b	16ea8 <__assert_fail@plt+0x55bc>
   16f04:	mov	r0, sl
   16f08:	cmp	r0, #0
   16f0c:	bne	16ebc <__assert_fail@plt+0x55d0>
   16f10:	vldr	s0, [r4, #8]
   16f14:	vldr	s2, [r4, #12]
   16f18:	ldr	r0, [r4, #20]
   16f1c:	vcvt.f32.u32	s0, s0
   16f20:	vcvt.f32.u32	s4, s2
   16f24:	vldr	s2, [r0, #8]
   16f28:	vmul.f32	s6, s2, s0
   16f2c:	vcmpe.f32	s6, s4
   16f30:	vmrs	APSR_nzcv, fpscr
   16f34:	bpl	17088 <__assert_fail@plt+0x579c>
   16f38:	movw	r1, #872	; 0x368
   16f3c:	movt	r1, #2
   16f40:	cmp	r0, r1
   16f44:	beq	16fd0 <__assert_fail@plt+0x56e4>
   16f48:	vldr	s6, [pc, #532]	; 17164 <__assert_fail@plt+0x5878>
   16f4c:	vcmpe.f32	s2, s6
   16f50:	vmrs	APSR_nzcv, fpscr
   16f54:	ble	16fbc <__assert_fail@plt+0x56d0>
   16f58:	vldr	s8, [pc, #520]	; 17168 <__assert_fail@plt+0x587c>
   16f5c:	vcmpe.f32	s2, s8
   16f60:	vmrs	APSR_nzcv, fpscr
   16f64:	bpl	16fbc <__assert_fail@plt+0x56d0>
   16f68:	vldr	s8, [pc, #508]	; 1716c <__assert_fail@plt+0x5880>
   16f6c:	vldr	s10, [r0, #12]
   16f70:	vcmpe.f32	s10, s8
   16f74:	vmrs	APSR_nzcv, fpscr
   16f78:	ble	16fbc <__assert_fail@plt+0x56d0>
   16f7c:	vldr	s8, [r0]
   16f80:	vcmpe.f32	s8, #0.0
   16f84:	vmrs	APSR_nzcv, fpscr
   16f88:	blt	16fbc <__assert_fail@plt+0x56d0>
   16f8c:	vadd.f32	s6, s8, s6
   16f90:	vcmpe.f32	s6, s2
   16f94:	vmrs	APSR_nzcv, fpscr
   16f98:	bpl	16fbc <__assert_fail@plt+0x56d0>
   16f9c:	vldr	s8, [r0, #4]
   16fa0:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16fa4:	vcmpe.f32	s8, s10
   16fa8:	vmrs	APSR_nzcv, fpscr
   16fac:	bhi	16fbc <__assert_fail@plt+0x56d0>
   16fb0:	vcmpe.f32	s6, s8
   16fb4:	vmrs	APSR_nzcv, fpscr
   16fb8:	bmi	16fd4 <__assert_fail@plt+0x56e8>
   16fbc:	vldr	s2, [pc, #428]	; 17170 <__assert_fail@plt+0x5884>
   16fc0:	movw	r0, #872	; 0x368
   16fc4:	movt	r0, #2
   16fc8:	str	r0, [r4, #20]
   16fcc:	b	16fd4 <__assert_fail@plt+0x56e8>
   16fd0:	mov	r0, r1
   16fd4:	vmul.f32	s6, s2, s0
   16fd8:	vcmpe.f32	s6, s4
   16fdc:	vmrs	APSR_nzcv, fpscr
   16fe0:	bpl	17088 <__assert_fail@plt+0x579c>
   16fe4:	vldr	s4, [r0, #12]
   16fe8:	ldrb	r0, [r0, #16]
   16fec:	mvn	r7, #0
   16ff0:	cmp	r0, #0
   16ff4:	vmul.f32	s0, s4, s0
   16ff8:	vldr	s4, [pc, #372]	; 17174 <__assert_fail@plt+0x5888>
   16ffc:	vmul.f32	s2, s2, s0
   17000:	vseleq.f32	s0, s2, s0
   17004:	vcmpe.f32	s0, s4
   17008:	vmrs	APSR_nzcv, fpscr
   1700c:	bge	170fc <__assert_fail@plt+0x5810>
   17010:	vcvt.u32.f32	s0, s0
   17014:	mov	r0, r4
   17018:	vmov	r1, s0
   1701c:	bl	16a2c <__assert_fail@plt+0x5140>
   17020:	cmp	r0, #0
   17024:	beq	170fc <__assert_fail@plt+0x5810>
   17028:	ldr	r1, [r4, #8]
   1702c:	ldr	r2, [r4, #24]
   17030:	mov	r0, sl
   17034:	blx	r2
   17038:	mov	r7, r0
   1703c:	ldr	r0, [r4, #8]
   17040:	cmp	r7, r0
   17044:	bcs	17160 <__assert_fail@plt+0x5874>
   17048:	ldr	r5, [r4]
   1704c:	mov	r9, r5
   17050:	ldr	r1, [r9, r7, lsl #3]!
   17054:	cmp	r1, #0
   17058:	beq	17088 <__assert_fail@plt+0x579c>
   1705c:	cmp	r1, sl
   17060:	mov	r0, sl
   17064:	beq	17080 <__assert_fail@plt+0x5794>
   17068:	ldr	r2, [r4, #28]
   1706c:	mov	r0, sl
   17070:	blx	r2
   17074:	cmp	r0, #0
   17078:	beq	17110 <__assert_fail@plt+0x5824>
   1707c:	ldr	r0, [r9]
   17080:	cmp	r0, #0
   17084:	bne	17160 <__assert_fail@plt+0x5874>
   17088:	ldr	r0, [r9]
   1708c:	cmp	r0, #0
   17090:	beq	170ac <__assert_fail@plt+0x57c0>
   17094:	ldr	r0, [r4, #36]	; 0x24
   17098:	cmp	r0, #0
   1709c:	beq	170cc <__assert_fail@plt+0x57e0>
   170a0:	ldr	r1, [r0, #4]
   170a4:	str	r1, [r4, #36]	; 0x24
   170a8:	b	170dc <__assert_fail@plt+0x57f0>
   170ac:	str	sl, [r9]
   170b0:	ldr	r0, [r4, #12]
   170b4:	ldr	r1, [r4, #16]
   170b8:	add	r0, r0, #1
   170bc:	add	r1, r1, #1
   170c0:	str	r0, [r4, #12]
   170c4:	str	r1, [r4, #16]
   170c8:	b	170f8 <__assert_fail@plt+0x580c>
   170cc:	mov	r0, #8
   170d0:	bl	1d13c <__assert_fail@plt+0xb850>
   170d4:	cmp	r0, #0
   170d8:	beq	17108 <__assert_fail@plt+0x581c>
   170dc:	str	sl, [r0]
   170e0:	ldr	r1, [r9, #4]
   170e4:	str	r1, [r0, #4]
   170e8:	str	r0, [r9, #4]
   170ec:	ldr	r0, [r4, #16]
   170f0:	add	r0, r0, #1
   170f4:	str	r0, [r4, #16]
   170f8:	mov	r7, #1
   170fc:	mov	r0, r7
   17100:	sub	sp, fp, #28
   17104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17108:	mvn	r7, #0
   1710c:	b	170fc <__assert_fail@plt+0x5810>
   17110:	add	r6, r5, r7, lsl #3
   17114:	ldr	r0, [r6, #4]!
   17118:	cmp	r0, #0
   1711c:	beq	17088 <__assert_fail@plt+0x579c>
   17120:	ldr	r1, [r0]
   17124:	cmp	r1, sl
   17128:	beq	17154 <__assert_fail@plt+0x5868>
   1712c:	ldr	r2, [r4, #28]
   17130:	mov	r0, sl
   17134:	blx	r2
   17138:	ldr	r6, [r6]
   1713c:	cmp	r0, #0
   17140:	beq	17114 <__assert_fail@plt+0x5828>
   17144:	ldr	r0, [r6]
   17148:	cmp	r0, #0
   1714c:	beq	17088 <__assert_fail@plt+0x579c>
   17150:	b	17160 <__assert_fail@plt+0x5874>
   17154:	mov	r0, sl
   17158:	cmp	r0, #0
   1715c:	beq	17088 <__assert_fail@plt+0x579c>
   17160:	bl	118bc <abort@plt>
   17164:	stclcc	12, cr12, [ip, #820]	; 0x334
   17168:	svccc	0x00666666
   1716c:	svccc	0x008ccccd
   17170:	svccc	0x004ccccd
   17174:	svcmi	0x00800000
   17178:	push	{r4, sl, fp, lr}
   1717c:	add	fp, sp, #8
   17180:	sub	sp, sp, #8
   17184:	add	r2, sp, #4
   17188:	mov	r4, r1
   1718c:	bl	16e34 <__assert_fail@plt+0x5548>
   17190:	cmn	r0, #1
   17194:	beq	171a8 <__assert_fail@plt+0x58bc>
   17198:	ldr	r1, [sp, #4]
   1719c:	cmp	r0, #0
   171a0:	moveq	r4, r1
   171a4:	b	171ac <__assert_fail@plt+0x58c0>
   171a8:	mov	r4, #0
   171ac:	mov	r0, r4
   171b0:	sub	sp, fp, #8
   171b4:	pop	{r4, sl, fp, pc}
   171b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   171bc:	add	fp, sp, #24
   171c0:	mov	r9, r1
   171c4:	ldr	r1, [r0, #8]
   171c8:	ldr	r2, [r0, #24]
   171cc:	mov	r5, r0
   171d0:	mov	r0, r9
   171d4:	blx	r2
   171d8:	mov	r7, r0
   171dc:	ldr	r0, [r5, #8]
   171e0:	cmp	r7, r0
   171e4:	bcs	17448 <__assert_fail@plt+0x5b5c>
   171e8:	ldr	r6, [r5]
   171ec:	mov	r8, #0
   171f0:	mov	r4, r6
   171f4:	ldr	r1, [r4, r7, lsl #3]!
   171f8:	cmp	r1, #0
   171fc:	beq	172b0 <__assert_fail@plt+0x59c4>
   17200:	cmp	r1, r9
   17204:	beq	17220 <__assert_fail@plt+0x5934>
   17208:	ldr	r2, [r5, #28]
   1720c:	mov	r0, r9
   17210:	blx	r2
   17214:	cmp	r0, #0
   17218:	beq	17258 <__assert_fail@plt+0x596c>
   1721c:	ldr	r9, [r4]
   17220:	add	r0, r6, r7, lsl #3
   17224:	ldr	r0, [r0, #4]
   17228:	cmp	r0, #0
   1722c:	beq	172a0 <__assert_fail@plt+0x59b4>
   17230:	ldm	r0, {r1, r2}
   17234:	stm	r4, {r1, r2}
   17238:	mov	r1, #0
   1723c:	str	r1, [r0]
   17240:	ldr	r1, [r5, #36]	; 0x24
   17244:	str	r1, [r0, #4]
   17248:	str	r0, [r5, #36]	; 0x24
   1724c:	cmp	r9, #0
   17250:	bne	172e8 <__assert_fail@plt+0x59fc>
   17254:	b	172b0 <__assert_fail@plt+0x59c4>
   17258:	add	r7, r6, r7, lsl #3
   1725c:	ldr	r0, [r7, #4]!
   17260:	cmp	r0, #0
   17264:	beq	172b0 <__assert_fail@plt+0x59c4>
   17268:	ldr	r1, [r0]
   1726c:	cmp	r1, r9
   17270:	beq	172b8 <__assert_fail@plt+0x59cc>
   17274:	ldr	r2, [r5, #28]
   17278:	mov	r0, r9
   1727c:	blx	r2
   17280:	ldr	r1, [r7]
   17284:	cmp	r0, #0
   17288:	bne	172c0 <__assert_fail@plt+0x59d4>
   1728c:	ldr	r0, [r1, #4]!
   17290:	mov	r7, r1
   17294:	cmp	r0, #0
   17298:	bne	17268 <__assert_fail@plt+0x597c>
   1729c:	b	172b0 <__assert_fail@plt+0x59c4>
   172a0:	mov	r0, #0
   172a4:	str	r0, [r4]
   172a8:	cmp	r9, #0
   172ac:	bne	172e8 <__assert_fail@plt+0x59fc>
   172b0:	mov	r0, r8
   172b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172b8:	mov	r1, r0
   172bc:	b	172c4 <__assert_fail@plt+0x59d8>
   172c0:	ldr	r9, [r1]
   172c4:	ldr	r0, [r1, #4]
   172c8:	str	r0, [r7]
   172cc:	mov	r0, #0
   172d0:	str	r0, [r1]
   172d4:	ldr	r0, [r5, #36]	; 0x24
   172d8:	str	r0, [r1, #4]
   172dc:	str	r1, [r5, #36]	; 0x24
   172e0:	cmp	r9, #0
   172e4:	beq	172b0 <__assert_fail@plt+0x59c4>
   172e8:	ldr	r0, [r5, #16]
   172ec:	sub	r0, r0, #1
   172f0:	str	r0, [r5, #16]
   172f4:	ldr	r0, [r4]
   172f8:	cmp	r0, #0
   172fc:	bne	1743c <__assert_fail@plt+0x5b50>
   17300:	ldr	r0, [r5, #12]
   17304:	vldr	s0, [r5, #8]
   17308:	sub	r1, r0, #1
   1730c:	str	r1, [r5, #12]
   17310:	vmov	s2, r1
   17314:	ldr	r0, [r5, #20]
   17318:	vcvt.f32.u32	s0, s0
   1731c:	vcvt.f32.u32	s2, s2
   17320:	vldr	s4, [r0]
   17324:	vmul.f32	s6, s4, s0
   17328:	vcmpe.f32	s6, s2
   1732c:	vmrs	APSR_nzcv, fpscr
   17330:	ble	1743c <__assert_fail@plt+0x5b50>
   17334:	movw	r1, #872	; 0x368
   17338:	movt	r1, #2
   1733c:	cmp	r0, r1
   17340:	beq	173cc <__assert_fail@plt+0x5ae0>
   17344:	vldr	s8, [pc, #256]	; 1744c <__assert_fail@plt+0x5b60>
   17348:	vldr	s6, [r0, #8]
   1734c:	vcmpe.f32	s6, s8
   17350:	vmrs	APSR_nzcv, fpscr
   17354:	ble	173b8 <__assert_fail@plt+0x5acc>
   17358:	vldr	s10, [pc, #240]	; 17450 <__assert_fail@plt+0x5b64>
   1735c:	vcmpe.f32	s6, s10
   17360:	vmrs	APSR_nzcv, fpscr
   17364:	bpl	173b8 <__assert_fail@plt+0x5acc>
   17368:	vcmpe.f32	s4, #0.0
   1736c:	vmrs	APSR_nzcv, fpscr
   17370:	blt	173b8 <__assert_fail@plt+0x5acc>
   17374:	vldr	s10, [r0, #12]
   17378:	vldr	s12, [pc, #212]	; 17454 <__assert_fail@plt+0x5b68>
   1737c:	vcmpe.f32	s10, s12
   17380:	vmrs	APSR_nzcv, fpscr
   17384:	ble	173b8 <__assert_fail@plt+0x5acc>
   17388:	vadd.f32	s8, s4, s8
   1738c:	vcmpe.f32	s8, s6
   17390:	vmrs	APSR_nzcv, fpscr
   17394:	bpl	173b8 <__assert_fail@plt+0x5acc>
   17398:	vldr	s6, [r0, #4]
   1739c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   173a0:	vcmpe.f32	s6, s10
   173a4:	vmrs	APSR_nzcv, fpscr
   173a8:	bhi	173b8 <__assert_fail@plt+0x5acc>
   173ac:	vcmpe.f32	s8, s6
   173b0:	vmrs	APSR_nzcv, fpscr
   173b4:	bmi	173d0 <__assert_fail@plt+0x5ae4>
   173b8:	vldr	s4, [pc, #152]	; 17458 <__assert_fail@plt+0x5b6c>
   173bc:	movw	r0, #872	; 0x368
   173c0:	movt	r0, #2
   173c4:	str	r0, [r5, #20]
   173c8:	b	173d0 <__assert_fail@plt+0x5ae4>
   173cc:	mov	r0, r1
   173d0:	vmul.f32	s4, s4, s0
   173d4:	vcmpe.f32	s4, s2
   173d8:	vmrs	APSR_nzcv, fpscr
   173dc:	ble	1743c <__assert_fail@plt+0x5b50>
   173e0:	vldr	s2, [r0, #4]
   173e4:	ldrb	r1, [r0, #16]
   173e8:	cmp	r1, #0
   173ec:	vmul.f32	s0, s2, s0
   173f0:	bne	173fc <__assert_fail@plt+0x5b10>
   173f4:	vldr	s2, [r0, #8]
   173f8:	vmul.f32	s0, s0, s2
   173fc:	vcvt.u32.f32	s0, s0
   17400:	mov	r0, r5
   17404:	vmov	r1, s0
   17408:	bl	16a2c <__assert_fail@plt+0x5140>
   1740c:	cmp	r0, #0
   17410:	bne	1743c <__assert_fail@plt+0x5b50>
   17414:	ldr	r0, [r5, #36]	; 0x24
   17418:	cmp	r0, #0
   1741c:	beq	17434 <__assert_fail@plt+0x5b48>
   17420:	ldr	r4, [r0, #4]
   17424:	bl	16040 <__assert_fail@plt+0x4754>
   17428:	cmp	r4, #0
   1742c:	mov	r0, r4
   17430:	bne	17420 <__assert_fail@plt+0x5b34>
   17434:	mov	r0, #0
   17438:	str	r0, [r5, #36]	; 0x24
   1743c:	mov	r8, r9
   17440:	mov	r0, r8
   17444:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17448:	bl	118bc <abort@plt>
   1744c:	stclcc	12, cr12, [ip, #820]	; 0x334
   17450:	svccc	0x00666666
   17454:	svccc	0x008ccccd
   17458:	andeq	r0, r0, r0
   1745c:	b	171b8 <__assert_fail@plt+0x58cc>
   17460:	push	{r4, r5, fp, lr}
   17464:	add	fp, sp, #8
   17468:	mov	r5, r0
   1746c:	ldr	r0, [r0]
   17470:	mov	r4, r1
   17474:	bl	1e8c0 <__assert_fail@plt+0xcfd4>
   17478:	ldrd	r2, [r5, #8]
   1747c:	eor	r0, r2, r0
   17480:	mov	r1, r3
   17484:	mov	r2, r4
   17488:	mov	r3, #0
   1748c:	bl	1f004 <__assert_fail@plt+0xd718>
   17490:	mov	r0, r2
   17494:	pop	{r4, r5, fp, pc}
   17498:	push	{r4, r5, fp, lr}
   1749c:	add	fp, sp, #8
   174a0:	mov	lr, r1
   174a4:	mov	r2, r0
   174a8:	ldr	r3, [r2, #8]!
   174ac:	ldr	ip, [lr, #8]!
   174b0:	ldr	r4, [r2, #4]
   174b4:	eor	ip, r3, ip
   174b8:	ldr	r3, [lr, #4]
   174bc:	eor	r3, r4, r3
   174c0:	orrs	r3, ip, r3
   174c4:	mov	ip, #0
   174c8:	bne	174f8 <__assert_fail@plt+0x5c0c>
   174cc:	ldrd	r4, [lr, #8]
   174d0:	ldrd	r2, [r2, #8]
   174d4:	eor	r3, r3, r5
   174d8:	eor	r2, r2, r4
   174dc:	orrs	r2, r2, r3
   174e0:	bne	174f8 <__assert_fail@plt+0x5c0c>
   174e4:	ldr	r1, [r1]
   174e8:	ldr	r0, [r0]
   174ec:	bl	11520 <strcmp@plt>
   174f0:	clz	r0, r0
   174f4:	lsr	ip, r0, #5
   174f8:	mov	r0, ip
   174fc:	pop	{r4, r5, fp, pc}
   17500:	push	{r4, sl, fp, lr}
   17504:	add	fp, sp, #8
   17508:	mov	r4, r0
   1750c:	ldr	r0, [r0]
   17510:	bl	16040 <__assert_fail@plt+0x4754>
   17514:	mov	r0, r4
   17518:	pop	{r4, sl, fp, lr}
   1751c:	b	16040 <__assert_fail@plt+0x4754>
   17520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17524:	add	fp, sp, #28
   17528:	sub	sp, sp, #4
   1752c:	vpush	{d8-d9}
   17530:	sub	sp, sp, #104	; 0x68
   17534:	mov	r7, r3
   17538:	mov	r5, r2
   1753c:	mov	r8, r1
   17540:	mov	sl, r0
   17544:	bl	11838 <localeconv@plt>
   17548:	ldr	r6, [r0]
   1754c:	mov	r4, r0
   17550:	mov	r0, r6
   17554:	bl	11718 <strlen@plt>
   17558:	sub	r1, r0, #1
   1755c:	movw	r2, #659	; 0x293
   17560:	cmp	r1, #16
   17564:	movt	r2, #2
   17568:	movcs	r0, #1
   1756c:	movcc	r2, r6
   17570:	ldr	r6, [r4, #4]
   17574:	str	r0, [sp, #48]	; 0x30
   17578:	ldr	r0, [r4, #8]
   1757c:	str	r2, [sp, #16]
   17580:	str	r0, [sp, #24]
   17584:	mov	r0, r6
   17588:	bl	11718 <strlen@plt>
   1758c:	cmp	r0, #17
   17590:	movw	r0, #647	; 0x287
   17594:	movw	r1, #64943	; 0xfdaf
   17598:	str	r5, [sp, #36]	; 0x24
   1759c:	str	r7, [sp, #40]	; 0x28
   175a0:	ldr	r4, [fp, #20]
   175a4:	add	r0, r5, r0
   175a8:	movt	r1, #1
   175ac:	movcc	r1, r6
   175b0:	ldr	r5, [fp, #16]
   175b4:	ldr	r6, [fp, #8]
   175b8:	str	r0, [sp, #32]
   175bc:	ands	r0, r7, #32
   175c0:	str	r1, [sp, #20]
   175c4:	str	r0, [sp, #28]
   175c8:	mov	r0, #1000	; 0x3e8
   175cc:	movwne	r0, #1024	; 0x400
   175d0:	str	r0, [sp, #44]	; 0x2c
   175d4:	and	r0, r7, #3
   175d8:	ldr	r7, [fp, #12]
   175dc:	str	r0, [sp, #52]	; 0x34
   175e0:	subs	r0, r6, r5
   175e4:	sbcs	r0, r7, r4
   175e8:	bcs	176d8 <__assert_fail@plt+0x5dec>
   175ec:	orrs	r0, r6, r7
   175f0:	beq	1782c <__assert_fail@plt+0x5f40>
   175f4:	ldr	r9, [fp, #16]
   175f8:	ldr	r5, [fp, #20]
   175fc:	mov	r2, r6
   17600:	mov	r3, r7
   17604:	mov	r0, r9
   17608:	mov	r1, r5
   1760c:	bl	1f004 <__assert_fail@plt+0xd718>
   17610:	mov	r4, r0
   17614:	mov	r3, r1
   17618:	umull	r0, r1, r0, r6
   1761c:	mla	r1, r4, r7, r1
   17620:	mla	r1, r3, r6, r1
   17624:	subs	r0, r9, r0
   17628:	sbc	r1, r5, r1
   1762c:	orrs	r0, r0, r1
   17630:	bne	1782c <__assert_fail@plt+0x5f40>
   17634:	mov	r0, sl
   17638:	mov	r1, r8
   1763c:	mov	r2, r4
   17640:	mov	r6, r8
   17644:	mov	r8, r3
   17648:	bl	1f004 <__assert_fail@plt+0xd718>
   1764c:	mov	r5, r0
   17650:	mov	r9, r1
   17654:	umull	r0, r1, r0, r4
   17658:	mov	r2, #10
   1765c:	mov	r3, r8
   17660:	mla	r1, r5, r8, r1
   17664:	mla	r1, r9, r4, r1
   17668:	subs	r0, sl, r0
   1766c:	umull	sl, r0, r0, r2
   17670:	mov	r2, r4
   17674:	sbc	r1, r6, r1
   17678:	add	r1, r1, r1, lsl #2
   1767c:	add	r7, r0, r1, lsl #1
   17680:	mov	r0, sl
   17684:	mov	r1, r7
   17688:	bl	1f004 <__assert_fail@plt+0xd718>
   1768c:	mov	r6, r0
   17690:	umull	r0, r2, r0, r4
   17694:	mla	r2, r6, r8, r2
   17698:	mla	r1, r1, r4, r2
   1769c:	mov	r2, #2
   176a0:	subs	r0, sl, r0
   176a4:	sbc	r1, r7, r1
   176a8:	subs	r3, r4, r0, lsl #1
   176ac:	lsl	r1, r1, #1
   176b0:	orr	r1, r1, r0, lsr #31
   176b4:	orr	r7, r1, r0, lsl #1
   176b8:	sbcs	r3, r8, r1
   176bc:	movwcc	r2, #3
   176c0:	cmp	r7, #0
   176c4:	movwne	r7, #1
   176c8:	rsbs	r0, r4, r0, lsl #1
   176cc:	sbcs	r0, r1, r8
   176d0:	movcs	r7, r2
   176d4:	b	17744 <__assert_fail@plt+0x5e58>
   176d8:	mov	r0, r6
   176dc:	mov	r1, r7
   176e0:	mov	r2, r5
   176e4:	mov	r3, r4
   176e8:	bl	1f004 <__assert_fail@plt+0xd718>
   176ec:	mov	r2, r0
   176f0:	mov	r3, r1
   176f4:	umull	r0, r1, r0, r5
   176f8:	mla	r1, r2, r4, r1
   176fc:	mla	r1, r3, r5, r1
   17700:	subs	r0, r6, r0
   17704:	sbc	r1, r7, r1
   17708:	orrs	r0, r0, r1
   1770c:	bne	1782c <__assert_fail@plt+0x5f40>
   17710:	umull	r5, r0, r2, sl
   17714:	mov	r4, r8
   17718:	mla	r0, r2, r8, r0
   1771c:	mla	r9, r3, sl, r0
   17720:	mov	r0, r5
   17724:	mov	r1, r9
   17728:	bl	1f004 <__assert_fail@plt+0xd718>
   1772c:	eor	r1, r1, r8
   17730:	eor	r0, r0, sl
   17734:	orrs	r0, r0, r1
   17738:	bne	1782c <__assert_fail@plt+0x5f40>
   1773c:	mov	r7, #0
   17740:	mov	r6, #0
   17744:	ldr	r0, [sp, #40]	; 0x28
   17748:	ldr	r1, [sp, #32]
   1774c:	ldr	r2, [sp, #44]	; 0x2c
   17750:	ands	r4, r0, #16
   17754:	beq	17aa0 <__assert_fail@plt+0x61b4>
   17758:	subs	r0, r5, r2
   1775c:	mov	r8, #0
   17760:	sbcs	r0, r9, #0
   17764:	bcs	17778 <__assert_fail@plt+0x5e8c>
   17768:	ldr	r0, [sp, #32]
   1776c:	mov	sl, r5
   17770:	str	r0, [sp, #12]
   17774:	b	17dc0 <__assert_fail@plt+0x64d4>
   17778:	ldr	r2, [sp, #44]	; 0x2c
   1777c:	mov	r0, r5
   17780:	mov	r1, r9
   17784:	mov	r3, #0
   17788:	bl	1f004 <__assert_fail@plt+0xd718>
   1778c:	ldr	r2, [sp, #44]	; 0x2c
   17790:	mov	sl, r0
   17794:	mov	r9, r1
   17798:	mls	r0, r0, r2, r5
   1779c:	add	r0, r0, r0, lsl #2
   177a0:	add	r0, r6, r0, lsl #1
   177a4:	udiv	r6, r0, r2
   177a8:	mls	r0, r6, r2, r0
   177ac:	lsl	r0, r0, #1
   177b0:	add	r0, r0, r7, lsr #1
   177b4:	cmp	r0, r2
   177b8:	bcs	177cc <__assert_fail@plt+0x5ee0>
   177bc:	rsb	r1, r7, #0
   177c0:	subs	r7, r0, r1
   177c4:	movwne	r7, #1
   177c8:	b	177dc <__assert_fail@plt+0x5ef0>
   177cc:	add	r0, r0, r7
   177d0:	mov	r7, #2
   177d4:	cmp	r2, r0
   177d8:	movwcc	r7, #3
   177dc:	mov	r0, r8
   177e0:	add	r0, r8, #1
   177e4:	mov	r8, r0
   177e8:	cmp	r0, #7
   177ec:	bhi	17800 <__assert_fail@plt+0x5f14>
   177f0:	subs	r0, sl, r2
   177f4:	mov	r5, sl
   177f8:	sbcs	r0, r9, #0
   177fc:	bcs	17778 <__assert_fail@plt+0x5e8c>
   17800:	rsbs	r0, sl, #9
   17804:	rscs	r0, r9, #0
   17808:	bcc	17d20 <__assert_fail@plt+0x6434>
   1780c:	ldr	r0, [sp, #52]	; 0x34
   17810:	cmp	r0, #1
   17814:	bne	17d2c <__assert_fail@plt+0x6440>
   17818:	and	r0, r6, #1
   1781c:	add	r0, r7, r0
   17820:	cmp	r0, #2
   17824:	bhi	17d3c <__assert_fail@plt+0x6450>
   17828:	b	17d74 <__assert_fail@plt+0x6488>
   1782c:	ldr	r9, [fp, #20]
   17830:	ldr	r0, [fp, #16]
   17834:	mov	r1, r9
   17838:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   1783c:	vmov	d8, r0, r1
   17840:	mov	r0, sl
   17844:	mov	r1, r8
   17848:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   1784c:	mov	r4, r0
   17850:	mov	r5, r1
   17854:	mov	r0, r6
   17858:	mov	r1, r7
   1785c:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   17860:	vmov	d16, r0, r1
   17864:	vmov	d17, r4, r5
   17868:	ldr	r7, [sp, #40]	; 0x28
   1786c:	tst	r7, #16
   17870:	vdiv.f64	d16, d16, d8
   17874:	vmul.f64	d8, d16, d17
   17878:	bne	178f8 <__assert_fail@plt+0x600c>
   1787c:	ldr	r6, [sp, #52]	; 0x34
   17880:	cmp	r6, #1
   17884:	beq	17ab4 <__assert_fail@plt+0x61c8>
   17888:	vldr	d16, [pc, #568]	; 17ac8 <__assert_fail@plt+0x61dc>
   1788c:	ldr	sl, [sp, #36]	; 0x24
   17890:	ldr	r8, [sp, #32]
   17894:	vcmpe.f64	d8, d16
   17898:	vmrs	APSR_nzcv, fpscr
   1789c:	bpl	17abc <__assert_fail@plt+0x61d0>
   178a0:	vmov	r0, r1, d8
   178a4:	bl	1f050 <__assert_fail@plt+0xd764>
   178a8:	mov	r4, r0
   178ac:	mov	r5, r1
   178b0:	mov	r0, #0
   178b4:	cmp	r6, #0
   178b8:	mov	r2, #0
   178bc:	bne	178e4 <__assert_fail@plt+0x5ff8>
   178c0:	mov	r0, r4
   178c4:	mov	r1, r5
   178c8:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   178cc:	vmov	d16, r0, r1
   178d0:	mov	r2, #0
   178d4:	mov	r0, #0
   178d8:	vcmp.f64	d8, d16
   178dc:	vmrs	APSR_nzcv, fpscr
   178e0:	movwne	r0, #1
   178e4:	adds	r0, r0, r4
   178e8:	adc	r1, r2, r5
   178ec:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   178f0:	vmov	d8, r0, r1
   178f4:	b	17abc <__assert_fail@plt+0x61d0>
   178f8:	ldr	r0, [sp, #44]	; 0x2c
   178fc:	mov	r6, #1
   17900:	vmov	s0, r0
   17904:	vcvt.f64.u32	d16, s0
   17908:	vmul.f64	d17, d16, d16
   1790c:	vcmpe.f64	d17, d8
   17910:	vmrs	APSR_nzcv, fpscr
   17914:	bls	17928 <__assert_fail@plt+0x603c>
   17918:	ldr	sl, [sp, #48]	; 0x30
   1791c:	ldr	r8, [sp, #32]
   17920:	vmov.f64	d17, d16
   17924:	b	179c0 <__assert_fail@plt+0x60d4>
   17928:	vmul.f64	d18, d17, d16
   1792c:	ldr	sl, [sp, #48]	; 0x30
   17930:	ldr	r8, [sp, #32]
   17934:	mov	r6, #2
   17938:	vcmpe.f64	d18, d8
   1793c:	vmrs	APSR_nzcv, fpscr
   17940:	bhi	179c0 <__assert_fail@plt+0x60d4>
   17944:	vmul.f64	d19, d18, d16
   17948:	vmov.f64	d17, d18
   1794c:	mov	r6, #3
   17950:	vcmpe.f64	d19, d8
   17954:	vmrs	APSR_nzcv, fpscr
   17958:	bhi	179c0 <__assert_fail@plt+0x60d4>
   1795c:	vmul.f64	d18, d19, d16
   17960:	vmov.f64	d17, d19
   17964:	mov	r6, #4
   17968:	vcmpe.f64	d18, d8
   1796c:	vmrs	APSR_nzcv, fpscr
   17970:	bhi	179c0 <__assert_fail@plt+0x60d4>
   17974:	vmul.f64	d19, d18, d16
   17978:	vmov.f64	d17, d18
   1797c:	mov	r6, #5
   17980:	vcmpe.f64	d19, d8
   17984:	vmrs	APSR_nzcv, fpscr
   17988:	bhi	179c0 <__assert_fail@plt+0x60d4>
   1798c:	vmul.f64	d18, d19, d16
   17990:	vmov.f64	d17, d19
   17994:	mov	r6, #6
   17998:	vcmpe.f64	d18, d8
   1799c:	vmrs	APSR_nzcv, fpscr
   179a0:	bhi	179c0 <__assert_fail@plt+0x60d4>
   179a4:	vmul.f64	d16, d18, d16
   179a8:	mov	r6, #7
   179ac:	vmov.f64	d17, d18
   179b0:	vcmpe.f64	d16, d8
   179b4:	vmrs	APSR_nzcv, fpscr
   179b8:	movls	r6, #8
   179bc:	vmovls.f64	d17, d16
   179c0:	vdiv.f64	d8, d8, d17
   179c4:	ldr	r0, [sp, #52]	; 0x34
   179c8:	cmp	r0, #1
   179cc:	vmov.f64	d16, d8
   179d0:	beq	17a40 <__assert_fail@plt+0x6154>
   179d4:	vldr	d16, [pc, #236]	; 17ac8 <__assert_fail@plt+0x61dc>
   179d8:	vcmpe.f64	d8, d16
   179dc:	vmov.f64	d16, d8
   179e0:	vmrs	APSR_nzcv, fpscr
   179e4:	bpl	17a40 <__assert_fail@plt+0x6154>
   179e8:	vmov	r0, r1, d8
   179ec:	bl	1f050 <__assert_fail@plt+0xd764>
   179f0:	mov	r5, r1
   179f4:	ldr	r1, [sp, #52]	; 0x34
   179f8:	mov	r4, r0
   179fc:	mov	r0, #0
   17a00:	mov	r2, #0
   17a04:	cmp	r1, #0
   17a08:	bne	17a30 <__assert_fail@plt+0x6144>
   17a0c:	mov	r0, r4
   17a10:	mov	r1, r5
   17a14:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   17a18:	vmov	d16, r0, r1
   17a1c:	mov	r2, #0
   17a20:	mov	r0, #0
   17a24:	vcmp.f64	d8, d16
   17a28:	vmrs	APSR_nzcv, fpscr
   17a2c:	movwne	r0, #1
   17a30:	adds	r0, r0, r4
   17a34:	adc	r1, r2, r5
   17a38:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   17a3c:	vmov	d16, r0, r1
   17a40:	ldr	r5, [sp, #36]	; 0x24
   17a44:	movw	r3, #898	; 0x382
   17a48:	mov	r1, #1
   17a4c:	mvn	r2, #0
   17a50:	vstr	d16, [sp]
   17a54:	movt	r3, #2
   17a58:	mov	r0, r5
   17a5c:	bl	11754 <__sprintf_chk@plt>
   17a60:	ldr	r1, [sp, #28]
   17a64:	mov	r0, #3
   17a68:	cmp	r1, #0
   17a6c:	movwne	r0, #2
   17a70:	add	r4, r0, sl
   17a74:	mov	r0, r5
   17a78:	bl	11718 <strlen@plt>
   17a7c:	cmp	r4, r0
   17a80:	bcc	17ae4 <__assert_fail@plt+0x61f8>
   17a84:	ldr	r7, [sp, #40]	; 0x28
   17a88:	mov	r2, r0
   17a8c:	add	r5, sl, #1
   17a90:	tst	r7, #8
   17a94:	bne	17ad0 <__assert_fail@plt+0x61e4>
   17a98:	ldr	sl, [sp, #36]	; 0x24
   17a9c:	b	17b94 <__assert_fail@plt+0x62a8>
   17aa0:	mov	r0, r1
   17aa4:	mvn	r8, #0
   17aa8:	str	r1, [sp, #12]
   17aac:	mov	sl, r5
   17ab0:	b	17dc0 <__assert_fail@plt+0x64d4>
   17ab4:	ldr	sl, [sp, #36]	; 0x24
   17ab8:	ldr	r8, [sp, #32]
   17abc:	vstr	d8, [sp]
   17ac0:	mvn	r6, #0
   17ac4:	b	17b6c <__assert_fail@plt+0x6280>
   17ac8:	andeq	r0, r0, r0
   17acc:	mvnsmi	r0, #0
   17ad0:	ldr	r0, [sp, #36]	; 0x24
   17ad4:	add	r0, r2, r0
   17ad8:	ldrb	r0, [r0, #-1]
   17adc:	cmp	r0, #48	; 0x30
   17ae0:	bne	17d14 <__assert_fail@plt+0x6428>
   17ae4:	vmov.f64	d9, #36	; 0x41200000  10.0
   17ae8:	ldr	r4, [sp, #52]	; 0x34
   17aec:	vmul.f64	d8, d8, d9
   17af0:	cmp	r4, #1
   17af4:	beq	17b5c <__assert_fail@plt+0x6270>
   17af8:	vldr	d16, [pc, #-56]	; 17ac8 <__assert_fail@plt+0x61dc>
   17afc:	vcmpe.f64	d8, d16
   17b00:	vmrs	APSR_nzcv, fpscr
   17b04:	bpl	17b5c <__assert_fail@plt+0x6270>
   17b08:	vmov	r0, r1, d8
   17b0c:	bl	1f050 <__assert_fail@plt+0xd764>
   17b10:	mov	sl, r0
   17b14:	mov	r5, r1
   17b18:	mov	r0, #0
   17b1c:	cmp	r4, #0
   17b20:	mov	r2, #0
   17b24:	bne	17b4c <__assert_fail@plt+0x6260>
   17b28:	mov	r0, sl
   17b2c:	mov	r1, r5
   17b30:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   17b34:	vmov	d16, r0, r1
   17b38:	mov	r2, #0
   17b3c:	mov	r0, #0
   17b40:	vcmp.f64	d8, d16
   17b44:	vmrs	APSR_nzcv, fpscr
   17b48:	movwne	r0, #1
   17b4c:	adds	r0, r0, sl
   17b50:	adc	r1, r2, r5
   17b54:	bl	1ef90 <__assert_fail@plt+0xd6a4>
   17b58:	vmov	d8, r0, r1
   17b5c:	vdiv.f64	d16, d8, d9
   17b60:	ldr	sl, [sp, #36]	; 0x24
   17b64:	ldr	r7, [sp, #40]	; 0x28
   17b68:	vstr	d16, [sp]
   17b6c:	movw	r3, #892	; 0x37c
   17b70:	mov	r0, sl
   17b74:	mov	r1, #1
   17b78:	mvn	r2, #0
   17b7c:	movt	r3, #2
   17b80:	bl	11754 <__sprintf_chk@plt>
   17b84:	mov	r0, sl
   17b88:	bl	11718 <strlen@plt>
   17b8c:	mov	r2, r0
   17b90:	mov	r5, #0
   17b94:	sub	r4, r8, r2
   17b98:	mov	r1, sl
   17b9c:	mov	r0, r4
   17ba0:	bl	11544 <memmove@plt>
   17ba4:	sub	r5, r8, r5
   17ba8:	tst	r7, #4
   17bac:	bne	17ecc <__assert_fail@plt+0x65e0>
   17bb0:	tst	r7, #128	; 0x80
   17bb4:	beq	17fe4 <__assert_fail@plt+0x66f8>
   17bb8:	cmn	r6, #1
   17bbc:	bgt	17ca8 <__assert_fail@plt+0x63bc>
   17bc0:	ldr	r0, [fp, #16]
   17bc4:	mov	r6, #0
   17bc8:	subs	r0, r0, #2
   17bcc:	sbcs	r0, r9, #0
   17bd0:	bcc	17ca8 <__assert_fail@plt+0x63bc>
   17bd4:	ldr	r0, [sp, #44]	; 0x2c
   17bd8:	ldr	r1, [fp, #16]
   17bdc:	mov	r6, #1
   17be0:	subs	r0, r0, r1
   17be4:	rscs	r0, r9, #0
   17be8:	bcs	17ca8 <__assert_fail@plt+0x63bc>
   17bec:	ldr	r0, [sp, #44]	; 0x2c
   17bf0:	ldr	r2, [fp, #16]
   17bf4:	mov	r6, #2
   17bf8:	umull	r1, r0, r0, r0
   17bfc:	subs	r2, r1, r2
   17c00:	sbcs	r2, r0, r9
   17c04:	bcs	17ca8 <__assert_fail@plt+0x63bc>
   17c08:	ldr	r3, [sp, #44]	; 0x2c
   17c0c:	mov	r6, #3
   17c10:	umull	r1, r2, r1, r3
   17c14:	mla	r2, r0, r3, r2
   17c18:	ldr	r0, [fp, #16]
   17c1c:	subs	r0, r1, r0
   17c20:	sbcs	r0, r2, r9
   17c24:	bcs	17ca8 <__assert_fail@plt+0x63bc>
   17c28:	ldr	r3, [sp, #44]	; 0x2c
   17c2c:	mov	r6, #4
   17c30:	umull	r0, r1, r1, r3
   17c34:	mla	r1, r2, r3, r1
   17c38:	ldr	r2, [fp, #16]
   17c3c:	subs	r2, r0, r2
   17c40:	sbcs	r2, r1, r9
   17c44:	bcs	17ca8 <__assert_fail@plt+0x63bc>
   17c48:	ldr	r3, [sp, #44]	; 0x2c
   17c4c:	mov	r6, #5
   17c50:	umull	r0, r2, r0, r3
   17c54:	mla	r1, r1, r3, r2
   17c58:	ldr	r2, [fp, #16]
   17c5c:	subs	r2, r0, r2
   17c60:	sbcs	r2, r1, r9
   17c64:	bcs	17ca8 <__assert_fail@plt+0x63bc>
   17c68:	ldr	r3, [sp, #44]	; 0x2c
   17c6c:	mov	r6, #6
   17c70:	umull	r0, r2, r0, r3
   17c74:	mla	r1, r1, r3, r2
   17c78:	ldr	r2, [fp, #16]
   17c7c:	subs	r2, r0, r2
   17c80:	sbcs	r2, r1, r9
   17c84:	bcs	17ca8 <__assert_fail@plt+0x63bc>
   17c88:	ldr	r3, [sp, #44]	; 0x2c
   17c8c:	mov	r6, #7
   17c90:	umull	r0, r2, r0, r3
   17c94:	mla	r1, r1, r3, r2
   17c98:	ldr	r2, [fp, #16]
   17c9c:	subs	r0, r0, r2
   17ca0:	sbcs	r0, r1, r9
   17ca4:	movwcc	r6, #8
   17ca8:	and	r0, r7, #256	; 0x100
   17cac:	tst	r7, #64	; 0x40
   17cb0:	orrsne	r1, r6, r0
   17cb4:	movne	r1, #32
   17cb8:	addne	r8, sl, #648	; 0x288
   17cbc:	strbne	r1, [sl, #647]	; 0x287
   17cc0:	cmp	r6, #0
   17cc4:	beq	17cec <__assert_fail@plt+0x6400>
   17cc8:	ldr	r1, [sp, #28]
   17ccc:	cmp	r1, #0
   17cd0:	moveq	r1, #107	; 0x6b
   17cd4:	cmpeq	r6, #1
   17cd8:	beq	17ce8 <__assert_fail@plt+0x63fc>
   17cdc:	movw	r1, #932	; 0x3a4
   17ce0:	movt	r1, #2
   17ce4:	ldrb	r1, [r1, r6]
   17ce8:	strb	r1, [r8], #1
   17cec:	cmp	r0, #0
   17cf0:	beq	17fe4 <__assert_fail@plt+0x66f8>
   17cf4:	ldr	r0, [sp, #28]
   17cf8:	cmp	r0, #0
   17cfc:	cmpne	r6, #0
   17d00:	movne	r0, #105	; 0x69
   17d04:	strbne	r0, [r8], #1
   17d08:	mov	r0, #66	; 0x42
   17d0c:	strb	r0, [r8], #1
   17d10:	b	17fe4 <__assert_fail@plt+0x66f8>
   17d14:	ldr	sl, [sp, #36]	; 0x24
   17d18:	ldr	r7, [sp, #40]	; 0x28
   17d1c:	b	17b94 <__assert_fail@plt+0x62a8>
   17d20:	ldr	r0, [sp, #32]
   17d24:	str	r0, [sp, #12]
   17d28:	b	17dc0 <__assert_fail@plt+0x64d4>
   17d2c:	cmp	r0, #0
   17d30:	bne	17d74 <__assert_fail@plt+0x6488>
   17d34:	cmp	r7, #0
   17d38:	beq	17d74 <__assert_fail@plt+0x6488>
   17d3c:	adds	r0, sl, #1
   17d40:	add	r6, r6, #1
   17d44:	mov	r7, #0
   17d48:	adc	r1, r9, #0
   17d4c:	cmp	r6, #10
   17d50:	bne	17d74 <__assert_fail@plt+0x6488>
   17d54:	rsbs	r2, r0, #9
   17d58:	mov	r6, #0
   17d5c:	mov	sl, r0
   17d60:	mov	r9, r1
   17d64:	mov	r7, #0
   17d68:	rscs	r2, r1, #0
   17d6c:	ldr	r2, [sp, #44]	; 0x2c
   17d70:	bcc	18000 <__assert_fail@plt+0x6714>
   17d74:	ldr	r0, [sp, #40]	; 0x28
   17d78:	tst	r0, #8
   17d7c:	beq	17d94 <__assert_fail@plt+0x64a8>
   17d80:	cmp	r6, #0
   17d84:	bne	17d94 <__assert_fail@plt+0x64a8>
   17d88:	ldr	r0, [sp, #32]
   17d8c:	str	r0, [sp, #12]
   17d90:	b	17dbc <__assert_fail@plt+0x64d0>
   17d94:	ldr	r1, [sp, #36]	; 0x24
   17d98:	ldr	r2, [sp, #48]	; 0x30
   17d9c:	add	r0, r6, #48	; 0x30
   17da0:	strb	r0, [r1, #646]!	; 0x286
   17da4:	sub	r0, r1, r2
   17da8:	ldr	r1, [sp, #16]
   17dac:	str	r0, [sp, #12]
   17db0:	bl	11574 <memcpy@plt>
   17db4:	ldr	r2, [sp, #44]	; 0x2c
   17db8:	mov	r7, #0
   17dbc:	mov	r6, #0
   17dc0:	ldr	r0, [sp, #52]	; 0x34
   17dc4:	cmp	r0, #0
   17dc8:	beq	17e08 <__assert_fail@plt+0x651c>
   17dcc:	cmp	r0, #1
   17dd0:	bne	17dfc <__assert_fail@plt+0x6510>
   17dd4:	mov	r0, #0
   17dd8:	rsbs	r1, r7, #0
   17ddc:	and	r2, sl, #1
   17de0:	eor	r1, r2, r1
   17de4:	sbc	r0, r0, #0
   17de8:	ldr	r2, [sp, #44]	; 0x2c
   17dec:	orrs	r0, r1, r0
   17df0:	addne	r6, r6, #1
   17df4:	cmp	r6, #5
   17df8:	bgt	17e14 <__assert_fail@plt+0x6528>
   17dfc:	ldr	r7, [sp, #36]	; 0x24
   17e00:	ldr	r5, [sp, #40]	; 0x28
   17e04:	b	17e70 <__assert_fail@plt+0x6584>
   17e08:	add	r0, r6, r7
   17e0c:	cmp	r0, #1
   17e10:	blt	17dfc <__assert_fail@plt+0x6510>
   17e14:	ldr	r7, [sp, #36]	; 0x24
   17e18:	ldr	r5, [sp, #40]	; 0x28
   17e1c:	adds	sl, sl, #1
   17e20:	adc	r9, r9, #0
   17e24:	cmp	r8, #7
   17e28:	bgt	17e70 <__assert_fail@plt+0x6584>
   17e2c:	cmp	r4, #0
   17e30:	beq	17e70 <__assert_fail@plt+0x6584>
   17e34:	eor	r0, sl, r2
   17e38:	orrs	r0, r0, r9
   17e3c:	addeq	r8, r8, #1
   17e40:	moveq	r9, #0
   17e44:	moveq	sl, #1
   17e48:	tsteq	r5, #8
   17e4c:	bne	17e70 <__assert_fail@plt+0x6584>
   17e50:	ldr	r0, [sp, #12]
   17e54:	mov	r1, #48	; 0x30
   17e58:	ldr	r2, [sp, #48]	; 0x30
   17e5c:	strb	r1, [r0, #-1]!
   17e60:	ldr	r1, [sp, #16]
   17e64:	sub	r0, r0, r2
   17e68:	str	r0, [sp, #12]
   17e6c:	bl	11574 <memcpy@plt>
   17e70:	ldr	r4, [sp, #12]
   17e74:	mov	r0, sl
   17e78:	mov	r1, r9
   17e7c:	mov	r2, #10
   17e80:	mov	r3, #0
   17e84:	bl	1f004 <__assert_fail@plt+0xd718>
   17e88:	add	r2, r0, r0, lsl #2
   17e8c:	sub	r2, sl, r2, lsl #1
   17e90:	orr	r2, r2, #48	; 0x30
   17e94:	strb	r2, [r4, #-1]!
   17e98:	rsbs	r2, sl, #9
   17e9c:	mov	sl, r0
   17ea0:	rscs	r2, r9, #0
   17ea4:	mov	r9, r1
   17ea8:	bcc	17e74 <__assert_fail@plt+0x6588>
   17eac:	mov	r6, r8
   17eb0:	mov	sl, r7
   17eb4:	mov	r7, r5
   17eb8:	ldr	r9, [fp, #20]
   17ebc:	ldr	r8, [sp, #32]
   17ec0:	ldr	r5, [sp, #12]
   17ec4:	tst	r7, #4
   17ec8:	beq	17bb0 <__assert_fail@plt+0x62c4>
   17ecc:	ldr	r9, [sp, #20]
   17ed0:	str	r6, [sp, #16]
   17ed4:	sub	r7, r5, r4
   17ed8:	mov	r0, r9
   17edc:	bl	11718 <strlen@plt>
   17ee0:	str	r0, [sp, #52]	; 0x34
   17ee4:	add	r0, sp, #56	; 0x38
   17ee8:	mov	r1, r4
   17eec:	mov	r2, r7
   17ef0:	bl	11574 <memcpy@plt>
   17ef4:	ldr	r6, [sp, #24]
   17ef8:	add	r0, sp, #56	; 0x38
   17efc:	ldrb	r8, [r6]
   17f00:	cmp	r8, #255	; 0xff
   17f04:	mov	sl, r8
   17f08:	moveq	sl, r7
   17f0c:	cmp	r8, #0
   17f10:	mvneq	sl, #0
   17f14:	cmp	sl, r7
   17f18:	movhi	sl, r7
   17f1c:	sub	r4, r5, sl
   17f20:	sub	r5, r7, sl
   17f24:	mov	r2, sl
   17f28:	add	r1, r0, r5
   17f2c:	mov	r0, r4
   17f30:	bl	11574 <memcpy@plt>
   17f34:	cmp	r5, #0
   17f38:	beq	17fc8 <__assert_fail@plt+0x66dc>
   17f3c:	clz	r0, r8
   17f40:	lsr	r8, r0, #5
   17f44:	ldr	r0, [sp, #52]	; 0x34
   17f48:	rsb	r0, r0, #0
   17f4c:	str	r0, [sp, #48]	; 0x30
   17f50:	ldr	r0, [sp, #48]	; 0x30
   17f54:	ldr	r2, [sp, #52]	; 0x34
   17f58:	mov	r1, r9
   17f5c:	add	r4, r4, r0
   17f60:	mov	r0, r4
   17f64:	bl	11574 <memcpy@plt>
   17f68:	tst	r8, #1
   17f6c:	add	r0, sp, #56	; 0x38
   17f70:	addeq	r6, r6, #1
   17f74:	mov	r8, r6
   17f78:	ldrb	r6, [r6]
   17f7c:	cmp	r6, #255	; 0xff
   17f80:	mov	r7, r6
   17f84:	moveq	r7, r5
   17f88:	cmp	r6, #0
   17f8c:	moveq	r7, sl
   17f90:	cmp	r5, r7
   17f94:	movcc	r7, r5
   17f98:	sub	r5, r5, r7
   17f9c:	sub	r4, r4, r7
   17fa0:	mov	r2, r7
   17fa4:	add	r1, r0, r5
   17fa8:	mov	r0, r4
   17fac:	bl	11574 <memcpy@plt>
   17fb0:	clz	r0, r6
   17fb4:	mov	r6, r8
   17fb8:	cmp	r5, #0
   17fbc:	mov	sl, r7
   17fc0:	lsr	r8, r0, #5
   17fc4:	bne	17f50 <__assert_fail@plt+0x6664>
   17fc8:	ldr	r8, [sp, #32]
   17fcc:	ldr	sl, [sp, #36]	; 0x24
   17fd0:	ldr	r7, [sp, #40]	; 0x28
   17fd4:	ldr	r9, [fp, #20]
   17fd8:	ldr	r6, [sp, #16]
   17fdc:	tst	r7, #128	; 0x80
   17fe0:	bne	17bb8 <__assert_fail@plt+0x62cc>
   17fe4:	mov	r0, #0
   17fe8:	strb	r0, [r8]
   17fec:	mov	r0, r4
   17ff0:	sub	sp, fp, #48	; 0x30
   17ff4:	vpop	{d8-d9}
   17ff8:	add	sp, sp, #4
   17ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18000:	ldr	r0, [sp, #32]
   18004:	mov	r7, #0
   18008:	mov	sl, #10
   1800c:	mov	r9, #0
   18010:	str	r0, [sp, #12]
   18014:	b	17dc0 <__assert_fail@plt+0x64d4>
   18018:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1801c:	add	fp, sp, #24
   18020:	sub	sp, sp, #8
   18024:	mov	r4, r2
   18028:	mov	r8, r1
   1802c:	cmp	r0, #0
   18030:	bne	1805c <__assert_fail@plt+0x6770>
   18034:	movw	r0, #63982	; 0xf9ee
   18038:	movt	r0, #1
   1803c:	bl	116a0 <getenv@plt>
   18040:	cmp	r0, #0
   18044:	bne	1805c <__assert_fail@plt+0x6770>
   18048:	movw	r0, #904	; 0x388
   1804c:	movt	r0, #2
   18050:	bl	116a0 <getenv@plt>
   18054:	cmp	r0, #0
   18058:	beq	18180 <__assert_fail@plt+0x6894>
   1805c:	mov	r6, r0
   18060:	movw	r7, #956	; 0x3bc
   18064:	movw	r1, #944	; 0x3b0
   18068:	mov	r3, #4
   1806c:	ldrb	r5, [r6], #1
   18070:	movt	r7, #2
   18074:	movt	r1, #2
   18078:	mov	r2, r7
   1807c:	cmp	r5, #39	; 0x27
   18080:	movne	r6, r0
   18084:	mov	r0, r6
   18088:	bl	1dc98 <__assert_fail@plt+0xc3ac>
   1808c:	sub	r1, r5, #39	; 0x27
   18090:	cmp	r0, #0
   18094:	clz	r1, r1
   18098:	lsr	r1, r1, #5
   1809c:	lsl	r5, r1, #2
   180a0:	bmi	180c8 <__assert_fail@plt+0x67dc>
   180a4:	ldr	r0, [r7, r0, lsl #2]
   180a8:	mov	r2, #1
   180ac:	mov	r1, #0
   180b0:	str	r2, [r4]
   180b4:	str	r1, [r4, #4]
   180b8:	orr	r1, r0, r5
   180bc:	mov	r0, #0
   180c0:	str	r1, [r8]
   180c4:	b	180f8 <__assert_fail@plt+0x680c>
   180c8:	movw	r0, #914	; 0x392
   180cc:	add	r1, sp, #4
   180d0:	mov	r2, #0
   180d4:	mov	r3, r4
   180d8:	mov	r7, #0
   180dc:	movt	r0, #2
   180e0:	str	r0, [sp]
   180e4:	mov	r0, r6
   180e8:	bl	1c448 <__assert_fail@plt+0xab5c>
   180ec:	cmp	r0, #0
   180f0:	beq	1813c <__assert_fail@plt+0x6850>
   180f4:	str	r7, [r8]
   180f8:	ldrd	r2, [r4]
   180fc:	orrs	r1, r2, r3
   18100:	beq	1810c <__assert_fail@plt+0x6820>
   18104:	sub	sp, fp, #24
   18108:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1810c:	movw	r0, #63963	; 0xf9db
   18110:	movt	r0, #1
   18114:	bl	116a0 <getenv@plt>
   18118:	cmp	r0, #0
   1811c:	mov	r2, #512	; 0x200
   18120:	mov	r0, #4
   18124:	mov	r1, #0
   18128:	movweq	r2, #1024	; 0x400
   1812c:	str	r2, [r4]
   18130:	str	r1, [r4, #4]
   18134:	sub	sp, fp, #24
   18138:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1813c:	ldrb	r0, [r6]
   18140:	sub	r0, r0, #48	; 0x30
   18144:	uxtb	r0, r0
   18148:	cmp	r0, #10
   1814c:	bcc	18178 <__assert_fail@plt+0x688c>
   18150:	ldr	r0, [sp, #4]
   18154:	cmp	r0, r6
   18158:	beq	181a8 <__assert_fail@plt+0x68bc>
   1815c:	ldrb	r2, [r6, #1]
   18160:	add	r1, r6, #1
   18164:	mov	r6, r1
   18168:	sub	r2, r2, #48	; 0x30
   1816c:	uxtb	r2, r2
   18170:	cmp	r2, #10
   18174:	bcs	18154 <__assert_fail@plt+0x6868>
   18178:	mov	r1, r5
   1817c:	b	180bc <__assert_fail@plt+0x67d0>
   18180:	movw	r0, #63963	; 0xf9db
   18184:	movt	r0, #1
   18188:	bl	116a0 <getenv@plt>
   1818c:	cmp	r0, #0
   18190:	mov	r2, #512	; 0x200
   18194:	mov	r1, #0
   18198:	movweq	r2, #1024	; 0x400
   1819c:	str	r2, [r4]
   181a0:	str	r1, [r4, #4]
   181a4:	b	180bc <__assert_fail@plt+0x67d0>
   181a8:	ldrb	r2, [r0, #-1]
   181ac:	orr	r1, r5, #384	; 0x180
   181b0:	cmp	r2, #66	; 0x42
   181b4:	mov	r2, r1
   181b8:	orrne	r2, r5, #128	; 0x80
   181bc:	bne	181d0 <__assert_fail@plt+0x68e4>
   181c0:	ldrb	r0, [r0, #-2]
   181c4:	cmp	r0, #105	; 0x69
   181c8:	orreq	r1, r2, #32
   181cc:	b	180bc <__assert_fail@plt+0x67d0>
   181d0:	orr	r1, r2, #32
   181d4:	b	180bc <__assert_fail@plt+0x67d0>
   181d8:	push	{r4, r5, r6, sl, fp, lr}
   181dc:	add	fp, sp, #16
   181e0:	mov	r5, r0
   181e4:	mov	r0, #0
   181e8:	mov	r4, r1
   181ec:	add	r6, r2, #19
   181f0:	strb	r0, [r2, #20]
   181f4:	mov	r0, r5
   181f8:	mov	r1, r4
   181fc:	mov	r2, #10
   18200:	mov	r3, #0
   18204:	bl	1f004 <__assert_fail@plt+0xd718>
   18208:	add	r2, r0, r0, lsl #2
   1820c:	sub	r2, r5, r2, lsl #1
   18210:	orr	r2, r2, #48	; 0x30
   18214:	strb	r2, [r6], #-1
   18218:	rsbs	r2, r5, #9
   1821c:	mov	r5, r0
   18220:	rscs	r2, r4, #0
   18224:	mov	r4, r1
   18228:	bcc	181f4 <__assert_fail@plt+0x6908>
   1822c:	add	r0, r6, #1
   18230:	pop	{r4, r5, r6, sl, fp, pc}
   18234:	push	{r4, r5, r6, r7, fp, lr}
   18238:	add	fp, sp, #16
   1823c:	sub	sp, sp, #8
   18240:	cmp	r0, #0
   18244:	add	r5, sp, #4
   18248:	mov	r7, r2
   1824c:	mov	r4, r1
   18250:	movne	r5, r0
   18254:	mov	r0, r5
   18258:	bl	11658 <mbrtowc@plt>
   1825c:	mov	r6, r0
   18260:	cmp	r7, #0
   18264:	beq	1828c <__assert_fail@plt+0x69a0>
   18268:	cmn	r6, #2
   1826c:	bcc	1828c <__assert_fail@plt+0x69a0>
   18270:	mov	r0, #0
   18274:	bl	1e854 <__assert_fail@plt+0xcf68>
   18278:	cmp	r0, #0
   1827c:	bne	1828c <__assert_fail@plt+0x69a0>
   18280:	ldrb	r0, [r4]
   18284:	mov	r6, #1
   18288:	str	r0, [r5]
   1828c:	mov	r0, r6
   18290:	sub	sp, fp, #16
   18294:	pop	{r4, r5, r6, r7, fp, pc}
   18298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1829c:	add	fp, sp, #28
   182a0:	sub	sp, sp, #20
   182a4:	mov	r4, r3
   182a8:	str	r2, [sp, #16]
   182ac:	str	r1, [sp, #12]
   182b0:	mov	r5, r0
   182b4:	bl	11718 <strlen@plt>
   182b8:	ldr	r3, [fp, #12]
   182bc:	mov	r8, r0
   182c0:	mov	sl, #0
   182c4:	tst	r3, #2
   182c8:	bne	1839c <__assert_fail@plt+0x6ab0>
   182cc:	bl	11634 <__ctype_get_mb_cur_max@plt>
   182d0:	mov	r6, #0
   182d4:	cmp	r0, #2
   182d8:	bcc	183ac <__assert_fail@plt+0x6ac0>
   182dc:	mov	r0, #0
   182e0:	mov	r1, r5
   182e4:	mov	r2, #0
   182e8:	bl	11844 <mbstowcs@plt>
   182ec:	cmn	r0, #1
   182f0:	beq	18554 <__assert_fail@plt+0x6c68>
   182f4:	add	r9, r0, #1
   182f8:	mov	r7, r0
   182fc:	lsl	r0, r9, #2
   18300:	bl	1d13c <__assert_fail@plt+0xb850>
   18304:	cmp	r0, #0
   18308:	beq	18550 <__assert_fail@plt+0x6c64>
   1830c:	mov	r1, r5
   18310:	mov	r2, r9
   18314:	mov	r6, r0
   18318:	bl	11844 <mbstowcs@plt>
   1831c:	cmp	r0, #0
   18320:	beq	18574 <__assert_fail@plt+0x6c88>
   18324:	str	r5, [sp, #4]
   18328:	mov	r5, #0
   1832c:	mov	r1, r6
   18330:	str	r6, [sp]
   18334:	str	r5, [r6, r7, lsl #2]
   18338:	ldr	r0, [r6]
   1833c:	cmp	r0, #0
   18340:	beq	18584 <__assert_fail@plt+0x6c98>
   18344:	add	r6, r1, #4
   18348:	movw	r7, #65533	; 0xfffd
   1834c:	bl	115f8 <iswprint@plt>
   18350:	cmp	r0, #0
   18354:	streq	r7, [r6, #-4]
   18358:	moveq	r5, #1
   1835c:	ldr	r0, [r6], #4
   18360:	cmp	r0, #0
   18364:	bne	1834c <__assert_fail@plt+0x6a60>
   18368:	ldr	r6, [sp]
   1836c:	mov	r1, r9
   18370:	mov	r0, r6
   18374:	bl	117fc <wcswidth@plt>
   18378:	mov	r7, r0
   1837c:	tst	r5, #1
   18380:	beq	18594 <__assert_fail@plt+0x6ca8>
   18384:	mov	r0, #0
   18388:	mov	r1, r6
   1838c:	mov	r2, #0
   18390:	bl	11664 <wcstombs@plt>
   18394:	ldr	r5, [sp, #4]
   18398:	b	185ac <__assert_fail@plt+0x6cc0>
   1839c:	mov	r6, #0
   183a0:	mov	r2, #0
   183a4:	mov	r7, r8
   183a8:	b	183b8 <__assert_fail@plt+0x6acc>
   183ac:	mov	r2, #0
   183b0:	mov	r7, r8
   183b4:	ldr	r3, [fp, #12]
   183b8:	ldr	r0, [r4]
   183bc:	str	r5, [sp, #4]
   183c0:	ldr	r5, [fp, #8]
   183c4:	mov	r1, r7
   183c8:	str	r6, [sp, #8]
   183cc:	cmp	r7, r0
   183d0:	movhi	r1, r0
   183d4:	movhi	r8, r0
   183d8:	cmp	r0, r7
   183dc:	subhi	sl, r0, r1
   183e0:	cmp	r5, #0
   183e4:	str	r1, [r4]
   183e8:	beq	18400 <__assert_fail@plt+0x6b14>
   183ec:	cmp	r5, #1
   183f0:	bne	18408 <__assert_fail@plt+0x6b1c>
   183f4:	mov	r9, #0
   183f8:	mov	r5, sl
   183fc:	b	18414 <__assert_fail@plt+0x6b28>
   18400:	mov	r9, sl
   18404:	b	18414 <__assert_fail@plt+0x6b28>
   18408:	and	r0, sl, #1
   1840c:	lsr	r9, sl, #1
   18410:	add	r5, r0, sl, lsr #1
   18414:	ldr	r0, [sp, #16]
   18418:	ldr	r4, [sp, #12]
   1841c:	tst	r3, #8
   18420:	mov	r6, #0
   18424:	mov	r7, #0
   18428:	moveq	r6, r9
   1842c:	tst	r3, #4
   18430:	moveq	r7, r5
   18434:	cmp	r0, #0
   18438:	beq	18528 <__assert_fail@plt+0x6c3c>
   1843c:	add	r0, r4, r0
   18440:	str	r2, [sp]
   18444:	sub	sl, r0, #1
   18448:	mov	r0, r4
   1844c:	cmp	sl, r4
   18450:	bls	184a0 <__assert_fail@plt+0x6bb4>
   18454:	cmp	r7, #0
   18458:	mov	r0, r4
   1845c:	beq	184a0 <__assert_fail@plt+0x6bb4>
   18460:	mvn	r0, r4
   18464:	sub	r1, r7, #1
   18468:	add	r0, sl, r0
   1846c:	cmp	r1, r0
   18470:	movhi	r1, r0
   18474:	mov	r0, r4
   18478:	add	r2, r1, #1
   1847c:	mov	r1, #32
   18480:	bl	1176c <memset@plt>
   18484:	ldr	r1, [sp, #16]
   18488:	sub	r0, r5, #1
   1848c:	sub	r1, r1, #2
   18490:	cmp	r0, r1
   18494:	movcc	r1, r0
   18498:	add	r0, r1, r4
   1849c:	add	r0, r0, #1
   184a0:	ldr	r1, [sp, #4]
   184a4:	sub	r2, sl, r0
   184a8:	mov	r4, #0
   184ac:	mvn	r3, #0
   184b0:	cmp	r8, r2
   184b4:	strb	r4, [r0]
   184b8:	movcc	r2, r8
   184bc:	bl	118e0 <__mempcpy_chk@plt>
   184c0:	mov	r5, r0
   184c4:	cmp	r6, #0
   184c8:	beq	18520 <__assert_fail@plt+0x6c34>
   184cc:	cmp	r5, sl
   184d0:	bcs	18520 <__assert_fail@plt+0x6c34>
   184d4:	mvn	r0, r5
   184d8:	sub	r1, r6, #1
   184dc:	add	r0, sl, r0
   184e0:	cmp	r1, r0
   184e4:	movhi	r1, r0
   184e8:	mov	r0, r5
   184ec:	add	r2, r1, #1
   184f0:	mov	r1, #32
   184f4:	bl	1176c <memset@plt>
   184f8:	ldr	r0, [sp, #16]
   184fc:	ldr	r1, [sp, #12]
   18500:	sub	r0, r0, r5
   18504:	add	r0, r0, r1
   18508:	sub	r1, r9, #1
   1850c:	sub	r0, r0, #2
   18510:	cmp	r1, r0
   18514:	movhi	r1, r0
   18518:	add	r0, r1, r5
   1851c:	add	r5, r0, #1
   18520:	ldr	r2, [sp]
   18524:	strb	r4, [r5]
   18528:	add	r0, r7, r8
   1852c:	add	r9, r0, r6
   18530:	ldr	r6, [sp, #8]
   18534:	mov	r0, r2
   18538:	bl	16040 <__assert_fail@plt+0x4754>
   1853c:	mov	r0, r6
   18540:	bl	16040 <__assert_fail@plt+0x4754>
   18544:	mov	r0, r9
   18548:	sub	sp, fp, #28
   1854c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18550:	mov	r6, #0
   18554:	ldr	r3, [fp, #12]
   18558:	mvn	r9, #0
   1855c:	mov	r2, #0
   18560:	mov	r7, r8
   18564:	mov	r0, #0
   18568:	tst	r3, #1
   1856c:	bne	183b8 <__assert_fail@plt+0x6acc>
   18570:	b	18538 <__assert_fail@plt+0x6c4c>
   18574:	mov	r2, r6
   18578:	mov	r7, r8
   1857c:	mov	r6, #0
   18580:	b	183b4 <__assert_fail@plt+0x6ac8>
   18584:	mov	r0, r1
   18588:	mov	r1, r9
   1858c:	bl	117fc <wcswidth@plt>
   18590:	mov	r7, r0
   18594:	ldr	r0, [r4]
   18598:	ldr	r5, [sp, #4]
   1859c:	mov	r6, #0
   185a0:	cmp	r7, r0
   185a4:	mov	r0, r8
   185a8:	bls	18618 <__assert_fail@plt+0x6d2c>
   185ac:	add	r6, r0, #1
   185b0:	mov	r0, r6
   185b4:	bl	1d13c <__assert_fail@plt+0xb850>
   185b8:	cmp	r0, #0
   185bc:	beq	18620 <__assert_fail@plt+0x6d34>
   185c0:	ldr	r1, [sp]
   185c4:	str	r0, [sp, #8]
   185c8:	str	r6, [sp, #4]
   185cc:	ldr	r0, [r1]
   185d0:	cmp	r0, #0
   185d4:	beq	18640 <__assert_fail@plt+0x6d54>
   185d8:	ldr	r5, [r4]
   185dc:	mov	r8, #0
   185e0:	movw	r9, #65533	; 0xfffd
   185e4:	mov	r6, r1
   185e8:	bl	11538 <wcwidth@plt>
   185ec:	cmn	r0, #1
   185f0:	moveq	r0, #1
   185f4:	streq	r9, [r6]
   185f8:	add	r7, r0, r8
   185fc:	cmp	r7, r5
   18600:	bhi	1864c <__assert_fail@plt+0x6d60>
   18604:	ldr	r0, [r6, #4]!
   18608:	mov	r8, r7
   1860c:	cmp	r0, #0
   18610:	bne	185e8 <__assert_fail@plt+0x6cfc>
   18614:	b	18650 <__assert_fail@plt+0x6d64>
   18618:	ldr	r2, [sp]
   1861c:	b	183b4 <__assert_fail@plt+0x6ac8>
   18620:	ldr	r3, [fp, #12]
   18624:	ldr	r2, [sp]
   18628:	mov	r6, #0
   1862c:	mvn	r9, #0
   18630:	tst	r3, #1
   18634:	mov	r0, r2
   18638:	bne	183b8 <__assert_fail@plt+0x6acc>
   1863c:	b	18538 <__assert_fail@plt+0x6c4c>
   18640:	mov	r6, r1
   18644:	mov	r7, #0
   18648:	b	18650 <__assert_fail@plt+0x6d64>
   1864c:	mov	r7, r8
   18650:	mov	r0, #0
   18654:	ldr	r5, [sp]
   18658:	ldr	r2, [sp, #4]
   1865c:	str	r0, [r6]
   18660:	ldr	r6, [sp, #8]
   18664:	mov	r1, r5
   18668:	mov	r0, r6
   1866c:	bl	11664 <wcstombs@plt>
   18670:	mov	r2, r5
   18674:	mov	r8, r0
   18678:	mov	r5, r6
   1867c:	b	183b4 <__assert_fail@plt+0x6ac8>
   18680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18684:	add	fp, sp, #28
   18688:	sub	sp, sp, #12
   1868c:	ldr	r8, [r1]
   18690:	mov	sl, r0
   18694:	mov	r9, r2
   18698:	mov	r6, r1
   1869c:	mov	r7, #0
   186a0:	str	r3, [sp, #8]
   186a4:	mov	r0, r8
   186a8:	mov	r5, r8
   186ac:	cmp	r0, r5
   186b0:	bcc	18714 <__assert_fail@plt+0x6e28>
   186b4:	add	r5, r0, #1
   186b8:	mov	r0, r7
   186bc:	mov	r1, r5
   186c0:	bl	1d16c <__assert_fail@plt+0xb880>
   186c4:	cmp	r0, #0
   186c8:	beq	18708 <__assert_fail@plt+0x6e1c>
   186cc:	mov	r4, r0
   186d0:	ldr	r0, [sp, #8]
   186d4:	str	r8, [r6]
   186d8:	mov	r2, r5
   186dc:	mov	r3, r6
   186e0:	str	r9, [sp]
   186e4:	mov	r1, r4
   186e8:	str	r0, [sp, #4]
   186ec:	mov	r0, sl
   186f0:	bl	18298 <__assert_fail@plt+0x69ac>
   186f4:	cmn	r0, #1
   186f8:	mov	r7, r4
   186fc:	bne	186ac <__assert_fail@plt+0x6dc0>
   18700:	mov	r0, r4
   18704:	b	1870c <__assert_fail@plt+0x6e20>
   18708:	mov	r0, r7
   1870c:	bl	16040 <__assert_fail@plt+0x4754>
   18710:	mov	r7, #0
   18714:	mov	r0, r7
   18718:	sub	sp, fp, #28
   1871c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18720:	push	{r4, r5, fp, lr}
   18724:	add	fp, sp, #8
   18728:	mov	r4, r1
   1872c:	mov	r5, r0
   18730:	bl	11718 <strlen@plt>
   18734:	mov	r1, r0
   18738:	mov	r0, r5
   1873c:	mov	r2, r4
   18740:	pop	{r4, r5, fp, lr}
   18744:	b	18748 <__assert_fail@plt+0x6e5c>
   18748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1874c:	add	fp, sp, #28
   18750:	sub	sp, sp, #20
   18754:	mov	r5, r2
   18758:	mov	r6, r1
   1875c:	mov	r4, r0
   18760:	add	r7, r0, r1
   18764:	bl	11634 <__ctype_get_mb_cur_max@plt>
   18768:	cmp	r0, #1
   1876c:	bls	18a14 <__assert_fail@plt+0x7128>
   18770:	cmp	r6, #1
   18774:	blt	18a6c <__assert_fail@plt+0x7180>
   18778:	and	r2, r5, #1
   1877c:	and	sl, r5, #2
   18780:	mov	r3, #0
   18784:	add	r8, sp, #4
   18788:	add	r9, sp, #8
   1878c:	mov	r5, #0
   18790:	ldrb	r0, [r4]
   18794:	sub	r0, r0, #32
   18798:	cmp	r0, #94	; 0x5e
   1879c:	bhi	18938 <__assert_fail@plt+0x704c>
   187a0:	add	r1, pc, #0
   187a4:	ldr	pc, [r1, r0, lsl #2]
   187a8:	andeq	r8, r1, r4, lsr #18
   187ac:	andeq	r8, r1, r4, lsr #18
   187b0:	andeq	r8, r1, r4, lsr #18
   187b4:	andeq	r8, r1, r4, lsr #18
   187b8:	andeq	r8, r1, r8, lsr r9
   187bc:	andeq	r8, r1, r4, lsr #18
   187c0:	andeq	r8, r1, r4, lsr #18
   187c4:	andeq	r8, r1, r4, lsr #18
   187c8:	andeq	r8, r1, r4, lsr #18
   187cc:	andeq	r8, r1, r4, lsr #18
   187d0:	andeq	r8, r1, r4, lsr #18
   187d4:	andeq	r8, r1, r4, lsr #18
   187d8:	andeq	r8, r1, r4, lsr #18
   187dc:	andeq	r8, r1, r4, lsr #18
   187e0:	andeq	r8, r1, r4, lsr #18
   187e4:	andeq	r8, r1, r4, lsr #18
   187e8:	andeq	r8, r1, r4, lsr #18
   187ec:	andeq	r8, r1, r4, lsr #18
   187f0:	andeq	r8, r1, r4, lsr #18
   187f4:	andeq	r8, r1, r4, lsr #18
   187f8:	andeq	r8, r1, r4, lsr #18
   187fc:	andeq	r8, r1, r4, lsr #18
   18800:	andeq	r8, r1, r4, lsr #18
   18804:	andeq	r8, r1, r4, lsr #18
   18808:	andeq	r8, r1, r4, lsr #18
   1880c:	andeq	r8, r1, r4, lsr #18
   18810:	andeq	r8, r1, r4, lsr #18
   18814:	andeq	r8, r1, r4, lsr #18
   18818:	andeq	r8, r1, r4, lsr #18
   1881c:	andeq	r8, r1, r4, lsr #18
   18820:	andeq	r8, r1, r4, lsr #18
   18824:	andeq	r8, r1, r4, lsr #18
   18828:	andeq	r8, r1, r8, lsr r9
   1882c:	andeq	r8, r1, r4, lsr #18
   18830:	andeq	r8, r1, r4, lsr #18
   18834:	andeq	r8, r1, r4, lsr #18
   18838:	andeq	r8, r1, r4, lsr #18
   1883c:	andeq	r8, r1, r4, lsr #18
   18840:	andeq	r8, r1, r4, lsr #18
   18844:	andeq	r8, r1, r4, lsr #18
   18848:	andeq	r8, r1, r4, lsr #18
   1884c:	andeq	r8, r1, r4, lsr #18
   18850:	andeq	r8, r1, r4, lsr #18
   18854:	andeq	r8, r1, r4, lsr #18
   18858:	andeq	r8, r1, r4, lsr #18
   1885c:	andeq	r8, r1, r4, lsr #18
   18860:	andeq	r8, r1, r4, lsr #18
   18864:	andeq	r8, r1, r4, lsr #18
   18868:	andeq	r8, r1, r4, lsr #18
   1886c:	andeq	r8, r1, r4, lsr #18
   18870:	andeq	r8, r1, r4, lsr #18
   18874:	andeq	r8, r1, r4, lsr #18
   18878:	andeq	r8, r1, r4, lsr #18
   1887c:	andeq	r8, r1, r4, lsr #18
   18880:	andeq	r8, r1, r4, lsr #18
   18884:	andeq	r8, r1, r4, lsr #18
   18888:	andeq	r8, r1, r4, lsr #18
   1888c:	andeq	r8, r1, r4, lsr #18
   18890:	andeq	r8, r1, r4, lsr #18
   18894:	andeq	r8, r1, r4, lsr #18
   18898:	andeq	r8, r1, r4, lsr #18
   1889c:	andeq	r8, r1, r4, lsr #18
   188a0:	andeq	r8, r1, r4, lsr #18
   188a4:	andeq	r8, r1, r4, lsr #18
   188a8:	andeq	r8, r1, r8, lsr r9
   188ac:	andeq	r8, r1, r4, lsr #18
   188b0:	andeq	r8, r1, r4, lsr #18
   188b4:	andeq	r8, r1, r4, lsr #18
   188b8:	andeq	r8, r1, r4, lsr #18
   188bc:	andeq	r8, r1, r4, lsr #18
   188c0:	andeq	r8, r1, r4, lsr #18
   188c4:	andeq	r8, r1, r4, lsr #18
   188c8:	andeq	r8, r1, r4, lsr #18
   188cc:	andeq	r8, r1, r4, lsr #18
   188d0:	andeq	r8, r1, r4, lsr #18
   188d4:	andeq	r8, r1, r4, lsr #18
   188d8:	andeq	r8, r1, r4, lsr #18
   188dc:	andeq	r8, r1, r4, lsr #18
   188e0:	andeq	r8, r1, r4, lsr #18
   188e4:	andeq	r8, r1, r4, lsr #18
   188e8:	andeq	r8, r1, r4, lsr #18
   188ec:	andeq	r8, r1, r4, lsr #18
   188f0:	andeq	r8, r1, r4, lsr #18
   188f4:	andeq	r8, r1, r4, lsr #18
   188f8:	andeq	r8, r1, r4, lsr #18
   188fc:	andeq	r8, r1, r4, lsr #18
   18900:	andeq	r8, r1, r4, lsr #18
   18904:	andeq	r8, r1, r4, lsr #18
   18908:	andeq	r8, r1, r4, lsr #18
   1890c:	andeq	r8, r1, r4, lsr #18
   18910:	andeq	r8, r1, r4, lsr #18
   18914:	andeq	r8, r1, r4, lsr #18
   18918:	andeq	r8, r1, r4, lsr #18
   1891c:	andeq	r8, r1, r4, lsr #18
   18920:	andeq	r8, r1, r4, lsr #18
   18924:	add	r5, r5, #1
   18928:	add	r4, r4, #1
   1892c:	cmp	r4, r7
   18930:	bcc	18790 <__assert_fail@plt+0x6ea4>
   18934:	b	18a80 <__assert_fail@plt+0x7194>
   18938:	str	r2, [sp]
   1893c:	str	r3, [sp, #12]
   18940:	str	r3, [sp, #8]
   18944:	b	18970 <__assert_fail@plt+0x7084>
   18948:	mvn	r1, #-2147483648	; 0x80000000
   1894c:	sub	r1, r1, r5
   18950:	cmp	r0, r1
   18954:	bgt	18a74 <__assert_fail@plt+0x7188>
   18958:	add	r5, r0, r5
   1895c:	mov	r0, r9
   18960:	add	r4, r4, r6
   18964:	bl	1158c <mbsinit@plt>
   18968:	cmp	r0, #0
   1896c:	bne	18a08 <__assert_fail@plt+0x711c>
   18970:	sub	r2, r7, r4
   18974:	mov	r0, r8
   18978:	mov	r1, r4
   1897c:	mov	r3, r9
   18980:	bl	18234 <__assert_fail@plt+0x6948>
   18984:	cmp	r0, #0
   18988:	beq	189a4 <__assert_fail@plt+0x70b8>
   1898c:	mov	r6, r0
   18990:	cmn	r0, #2
   18994:	beq	189e0 <__assert_fail@plt+0x70f4>
   18998:	cmn	r6, #1
   1899c:	bne	189a8 <__assert_fail@plt+0x70bc>
   189a0:	b	189f4 <__assert_fail@plt+0x7108>
   189a4:	mov	r6, #1
   189a8:	ldr	r0, [sp, #4]
   189ac:	bl	11538 <wcwidth@plt>
   189b0:	cmp	r0, #0
   189b4:	bpl	18948 <__assert_fail@plt+0x705c>
   189b8:	cmp	sl, #0
   189bc:	bne	18a7c <__assert_fail@plt+0x7190>
   189c0:	ldr	r0, [sp, #4]
   189c4:	bl	115d4 <iswcntrl@plt>
   189c8:	cmp	r0, #0
   189cc:	bne	1895c <__assert_fail@plt+0x7070>
   189d0:	cmn	r5, #-2147483647	; 0x80000001
   189d4:	beq	18a74 <__assert_fail@plt+0x7188>
   189d8:	add	r5, r5, #1
   189dc:	b	1895c <__assert_fail@plt+0x7070>
   189e0:	ldr	r0, [sp]
   189e4:	mov	r4, r7
   189e8:	cmp	r0, #0
   189ec:	beq	18a04 <__assert_fail@plt+0x7118>
   189f0:	b	18a7c <__assert_fail@plt+0x7190>
   189f4:	ldr	r0, [sp]
   189f8:	cmp	r0, #0
   189fc:	bne	18a7c <__assert_fail@plt+0x7190>
   18a00:	add	r4, r4, #1
   18a04:	add	r5, r5, #1
   18a08:	ldr	r2, [sp]
   18a0c:	mov	r3, #0
   18a10:	b	1892c <__assert_fail@plt+0x7040>
   18a14:	cmp	r6, #1
   18a18:	blt	18a6c <__assert_fail@plt+0x7180>
   18a1c:	and	r6, r5, #2
   18a20:	bl	116e8 <__ctype_b_loc@plt>
   18a24:	ldr	r0, [r0]
   18a28:	mov	r5, #0
   18a2c:	b	18a38 <__assert_fail@plt+0x714c>
   18a30:	cmp	r4, r7
   18a34:	bcs	18a80 <__assert_fail@plt+0x7194>
   18a38:	ldrb	r1, [r4], #1
   18a3c:	add	r1, r0, r1, lsl #1
   18a40:	ldrh	r1, [r1]
   18a44:	tst	r1, #16384	; 0x4000
   18a48:	bne	18a5c <__assert_fail@plt+0x7170>
   18a4c:	cmp	r6, #0
   18a50:	bne	18a7c <__assert_fail@plt+0x7190>
   18a54:	tst	r1, #2
   18a58:	bne	18a30 <__assert_fail@plt+0x7144>
   18a5c:	cmn	r5, #-2147483647	; 0x80000001
   18a60:	beq	18a74 <__assert_fail@plt+0x7188>
   18a64:	add	r5, r5, #1
   18a68:	b	18a30 <__assert_fail@plt+0x7144>
   18a6c:	mov	r5, #0
   18a70:	b	18a80 <__assert_fail@plt+0x7194>
   18a74:	mvn	r5, #-2147483648	; 0x80000000
   18a78:	b	18a80 <__assert_fail@plt+0x7194>
   18a7c:	mvn	r5, #0
   18a80:	mov	r0, r5
   18a84:	sub	sp, fp, #28
   18a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a90:	add	fp, sp, #28
   18a94:	sub	sp, sp, #36	; 0x24
   18a98:	movw	r0, #964	; 0x3c4
   18a9c:	movw	r1, #1100	; 0x44c
   18aa0:	movt	r0, #2
   18aa4:	movt	r1, #2
   18aa8:	bl	11868 <fopen64@plt>
   18aac:	cmp	r0, #0
   18ab0:	beq	19234 <__assert_fail@plt+0x7948>
   18ab4:	mov	r3, r0
   18ab8:	mov	r0, #0
   18abc:	add	r1, sp, #24
   18ac0:	mov	r2, #10
   18ac4:	str	r0, [sp, #28]
   18ac8:	str	r0, [sp, #24]
   18acc:	add	r0, sp, #28
   18ad0:	mov	r9, r3
   18ad4:	bl	11514 <__getdelim@plt>
   18ad8:	cmn	r0, #1
   18adc:	beq	19608 <__assert_fail@plt+0x7d1c>
   18ae0:	movw	r8, #985	; 0x3d9
   18ae4:	add	r0, sp, #32
   18ae8:	add	sl, sp, #12
   18aec:	add	r6, sp, #20
   18af0:	add	r7, sp, #16
   18af4:	add	r5, sp, #28
   18af8:	add	r4, sp, #24
   18afc:	str	r9, [sp, #4]
   18b00:	movt	r8, #2
   18b04:	str	r0, [sp, #8]
   18b08:	b	18b3c <__assert_fail@plt+0x7250>
   18b0c:	add	r6, sp, #20
   18b10:	add	r7, sp, #16
   18b14:	add	r5, sp, #28
   18b18:	add	r4, sp, #24
   18b1c:	mov	r3, r9
   18b20:	mov	r0, r5
   18b24:	mov	r1, r4
   18b28:	mov	r2, #10
   18b2c:	mov	r9, r3
   18b30:	bl	11514 <__getdelim@plt>
   18b34:	cmn	r0, #1
   18b38:	beq	19610 <__assert_fail@plt+0x7d24>
   18b3c:	ldr	r0, [sp, #28]
   18b40:	mov	r1, r8
   18b44:	mov	r2, r6
   18b48:	mov	r3, r7
   18b4c:	str	sl, [sp]
   18b50:	bl	1182c <sscanf@plt>
   18b54:	orr	r0, r0, #1
   18b58:	cmp	r0, #3
   18b5c:	bne	18b1c <__assert_fail@plt+0x7230>
   18b60:	ldr	r0, [sp, #12]
   18b64:	ldr	r1, [sp, #28]
   18b68:	add	r0, r1, r0
   18b6c:	mov	r1, #32
   18b70:	mov	r5, r0
   18b74:	bl	11724 <strchr@plt>
   18b78:	cmp	r0, #0
   18b7c:	beq	18b0c <__assert_fail@plt+0x7220>
   18b80:	mov	r6, r0
   18b84:	mov	r4, #0
   18b88:	mov	r1, #32
   18b8c:	strb	r4, [r6], #1
   18b90:	mov	r0, r6
   18b94:	bl	11724 <strchr@plt>
   18b98:	cmp	r0, #0
   18b9c:	beq	18b0c <__assert_fail@plt+0x7220>
   18ba0:	movw	r1, #1002	; 0x3ea
   18ba4:	strb	r4, [r0], #1
   18ba8:	movt	r1, #2
   18bac:	bl	1d1c0 <__assert_fail@plt+0xb8d4>
   18bb0:	cmp	r0, #0
   18bb4:	beq	18b0c <__assert_fail@plt+0x7220>
   18bb8:	add	sl, r0, #3
   18bbc:	mov	r1, #32
   18bc0:	mov	r0, sl
   18bc4:	bl	11724 <strchr@plt>
   18bc8:	cmp	r0, #0
   18bcc:	beq	18c8c <__assert_fail@plt+0x73a0>
   18bd0:	mov	r9, r0
   18bd4:	mov	r4, #0
   18bd8:	mov	r1, #32
   18bdc:	strb	r4, [r9], #1
   18be0:	mov	r0, r9
   18be4:	bl	11724 <strchr@plt>
   18be8:	cmp	r0, #0
   18bec:	beq	18c8c <__assert_fail@plt+0x73a0>
   18bf0:	strb	r4, [r0]
   18bf4:	mov	r0, r9
   18bf8:	bl	11718 <strlen@plt>
   18bfc:	adds	r0, r0, #1
   18c00:	mov	r8, r5
   18c04:	bcs	18ca4 <__assert_fail@plt+0x73b8>
   18c08:	mov	r2, #0
   18c0c:	mov	r1, r9
   18c10:	b	18c24 <__assert_fail@plt+0x7338>
   18c14:	add	r2, r2, #1
   18c18:	strb	r3, [r1], #1
   18c1c:	cmp	r2, r0
   18c20:	bcs	18ca4 <__assert_fail@plt+0x73b8>
   18c24:	ldrb	r3, [r9, r2]
   18c28:	add	r7, r2, #4
   18c2c:	cmp	r7, r0
   18c30:	bcs	18c14 <__assert_fail@plt+0x7328>
   18c34:	cmp	r3, #92	; 0x5c
   18c38:	bne	18c14 <__assert_fail@plt+0x7328>
   18c3c:	add	r7, r2, r9
   18c40:	ldrb	r5, [r7, #1]
   18c44:	and	r4, r5, #252	; 0xfc
   18c48:	cmp	r4, #48	; 0x30
   18c4c:	bne	18c14 <__assert_fail@plt+0x7328>
   18c50:	ldrb	r4, [r7, #2]
   18c54:	and	r7, r4, #248	; 0xf8
   18c58:	cmp	r7, #48	; 0x30
   18c5c:	bne	18c14 <__assert_fail@plt+0x7328>
   18c60:	add	ip, r2, #3
   18c64:	ldrb	lr, [r9, ip]
   18c68:	and	r7, lr, #248	; 0xf8
   18c6c:	cmp	r7, #48	; 0x30
   18c70:	bne	18c14 <__assert_fail@plt+0x7328>
   18c74:	lsl	r2, r5, #6
   18c78:	add	r2, r2, r4, lsl #3
   18c7c:	add	r2, r2, lr
   18c80:	add	r3, r2, #80	; 0x50
   18c84:	mov	r2, ip
   18c88:	b	18c14 <__assert_fail@plt+0x7328>
   18c8c:	ldr	r3, [sp, #4]
   18c90:	movw	r8, #985	; 0x3d9
   18c94:	add	sl, sp, #12
   18c98:	add	r6, sp, #20
   18c9c:	movt	r8, #2
   18ca0:	b	19224 <__assert_fail@plt+0x7938>
   18ca4:	mov	r0, r6
   18ca8:	bl	11718 <strlen@plt>
   18cac:	adds	r0, r0, #1
   18cb0:	bcs	18d38 <__assert_fail@plt+0x744c>
   18cb4:	mov	r2, #0
   18cb8:	mov	r1, r6
   18cbc:	b	18cd0 <__assert_fail@plt+0x73e4>
   18cc0:	add	r2, r2, #1
   18cc4:	strb	r3, [r1], #1
   18cc8:	cmp	r2, r0
   18ccc:	bcs	18d38 <__assert_fail@plt+0x744c>
   18cd0:	ldrb	r3, [r6, r2]
   18cd4:	add	r7, r2, #4
   18cd8:	cmp	r7, r0
   18cdc:	bcs	18cc0 <__assert_fail@plt+0x73d4>
   18ce0:	cmp	r3, #92	; 0x5c
   18ce4:	bne	18cc0 <__assert_fail@plt+0x73d4>
   18ce8:	add	r7, r2, r6
   18cec:	ldrb	r5, [r7, #1]
   18cf0:	and	r4, r5, #252	; 0xfc
   18cf4:	cmp	r4, #48	; 0x30
   18cf8:	bne	18cc0 <__assert_fail@plt+0x73d4>
   18cfc:	ldrb	r4, [r7, #2]
   18d00:	and	r7, r4, #248	; 0xf8
   18d04:	cmp	r7, #48	; 0x30
   18d08:	bne	18cc0 <__assert_fail@plt+0x73d4>
   18d0c:	add	ip, r2, #3
   18d10:	ldrb	lr, [r6, ip]
   18d14:	and	r7, lr, #248	; 0xf8
   18d18:	cmp	r7, #48	; 0x30
   18d1c:	bne	18cc0 <__assert_fail@plt+0x73d4>
   18d20:	lsl	r2, r5, #6
   18d24:	add	r2, r2, r4, lsl #3
   18d28:	add	r2, r2, lr
   18d2c:	add	r3, r2, #80	; 0x50
   18d30:	mov	r2, ip
   18d34:	b	18cc0 <__assert_fail@plt+0x73d4>
   18d38:	mov	r0, r8
   18d3c:	bl	11718 <strlen@plt>
   18d40:	adds	r0, r0, #1
   18d44:	bcs	18dcc <__assert_fail@plt+0x74e0>
   18d48:	mov	r2, #0
   18d4c:	mov	r1, r8
   18d50:	b	18d64 <__assert_fail@plt+0x7478>
   18d54:	add	r2, r2, #1
   18d58:	strb	r3, [r1], #1
   18d5c:	cmp	r2, r0
   18d60:	bcs	18dcc <__assert_fail@plt+0x74e0>
   18d64:	ldrb	r3, [r8, r2]
   18d68:	add	r7, r2, #4
   18d6c:	cmp	r7, r0
   18d70:	bcs	18d54 <__assert_fail@plt+0x7468>
   18d74:	cmp	r3, #92	; 0x5c
   18d78:	bne	18d54 <__assert_fail@plt+0x7468>
   18d7c:	add	r7, r2, r8
   18d80:	ldrb	r5, [r7, #1]
   18d84:	and	r4, r5, #252	; 0xfc
   18d88:	cmp	r4, #48	; 0x30
   18d8c:	bne	18d54 <__assert_fail@plt+0x7468>
   18d90:	ldrb	r4, [r7, #2]
   18d94:	and	r7, r4, #248	; 0xf8
   18d98:	cmp	r7, #48	; 0x30
   18d9c:	bne	18d54 <__assert_fail@plt+0x7468>
   18da0:	add	ip, r2, #3
   18da4:	ldrb	lr, [r8, ip]
   18da8:	and	r7, lr, #248	; 0xf8
   18dac:	cmp	r7, #48	; 0x30
   18db0:	bne	18d54 <__assert_fail@plt+0x7468>
   18db4:	lsl	r2, r5, #6
   18db8:	add	r2, r2, r4, lsl #3
   18dbc:	add	r2, r2, lr
   18dc0:	add	r3, r2, #80	; 0x50
   18dc4:	mov	r2, ip
   18dc8:	b	18d54 <__assert_fail@plt+0x7468>
   18dcc:	mov	r0, sl
   18dd0:	bl	11718 <strlen@plt>
   18dd4:	adds	r0, r0, #1
   18dd8:	bcs	18e60 <__assert_fail@plt+0x7574>
   18ddc:	mov	r2, #0
   18de0:	mov	r1, sl
   18de4:	b	18df8 <__assert_fail@plt+0x750c>
   18de8:	add	r2, r2, #1
   18dec:	strb	r3, [r1], #1
   18df0:	cmp	r2, r0
   18df4:	bcs	18e60 <__assert_fail@plt+0x7574>
   18df8:	ldrb	r3, [sl, r2]
   18dfc:	add	r7, r2, #4
   18e00:	cmp	r7, r0
   18e04:	bcs	18de8 <__assert_fail@plt+0x74fc>
   18e08:	cmp	r3, #92	; 0x5c
   18e0c:	bne	18de8 <__assert_fail@plt+0x74fc>
   18e10:	add	r7, r2, sl
   18e14:	ldrb	r5, [r7, #1]
   18e18:	and	r4, r5, #252	; 0xfc
   18e1c:	cmp	r4, #48	; 0x30
   18e20:	bne	18de8 <__assert_fail@plt+0x74fc>
   18e24:	ldrb	r4, [r7, #2]
   18e28:	and	r7, r4, #248	; 0xf8
   18e2c:	cmp	r7, #48	; 0x30
   18e30:	bne	18de8 <__assert_fail@plt+0x74fc>
   18e34:	add	ip, r2, #3
   18e38:	ldrb	lr, [sl, ip]
   18e3c:	and	r7, lr, #248	; 0xf8
   18e40:	cmp	r7, #48	; 0x30
   18e44:	bne	18de8 <__assert_fail@plt+0x74fc>
   18e48:	lsl	r2, r5, #6
   18e4c:	add	r2, r2, r4, lsl #3
   18e50:	add	r2, r2, lr
   18e54:	add	r3, r2, #80	; 0x50
   18e58:	mov	r2, ip
   18e5c:	b	18de8 <__assert_fail@plt+0x74fc>
   18e60:	mov	r0, #32
   18e64:	bl	1bdc8 <__assert_fail@plt+0xa4dc>
   18e68:	mov	r7, r0
   18e6c:	mov	r0, r9
   18e70:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   18e74:	str	r0, [r7]
   18e78:	mov	r0, r6
   18e7c:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   18e80:	str	r0, [r7, #4]
   18e84:	mov	r0, r8
   18e88:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   18e8c:	str	r0, [r7, #8]
   18e90:	mov	r0, sl
   18e94:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   18e98:	str	r0, [r7, #12]
   18e9c:	mov	r6, r0
   18ea0:	ldr	r2, [sp, #20]
   18ea4:	ldrb	r0, [r7, #24]
   18ea8:	mov	r3, r2
   18eac:	orr	r4, r0, #4
   18eb0:	ldr	r0, [sp, #16]
   18eb4:	bfc	r3, #0, #12
   18eb8:	strb	r4, [r7, #24]
   18ebc:	bic	r1, r0, #255	; 0xff
   18ec0:	uxtb	r0, r0
   18ec4:	orr	r3, r3, r1, lsr #20
   18ec8:	bfi	r0, r2, #8, #12
   18ecc:	str	r3, [r7, #20]
   18ed0:	orr	r0, r0, r1, lsl #12
   18ed4:	movw	r1, #1006	; 0x3ee
   18ed8:	movt	r1, #2
   18edc:	str	r0, [r7, #16]
   18ee0:	mov	r0, r6
   18ee4:	bl	11520 <strcmp@plt>
   18ee8:	cmp	r0, #0
   18eec:	mov	r8, #1
   18ef0:	mov	r0, #1
   18ef4:	beq	19060 <__assert_fail@plt+0x7774>
   18ef8:	movw	r1, #1013	; 0x3f5
   18efc:	mov	r0, r6
   18f00:	movt	r1, #2
   18f04:	bl	11520 <strcmp@plt>
   18f08:	cmp	r0, #0
   18f0c:	mov	r0, #1
   18f10:	beq	19060 <__assert_fail@plt+0x7774>
   18f14:	movw	r1, #1018	; 0x3fa
   18f18:	mov	r0, r6
   18f1c:	movt	r1, #2
   18f20:	bl	11520 <strcmp@plt>
   18f24:	cmp	r0, #0
   18f28:	mov	r0, #1
   18f2c:	beq	19060 <__assert_fail@plt+0x7774>
   18f30:	movw	r1, #1024	; 0x400
   18f34:	mov	r0, r6
   18f38:	movt	r1, #2
   18f3c:	bl	11520 <strcmp@plt>
   18f40:	cmp	r0, #0
   18f44:	mov	r0, #1
   18f48:	beq	19060 <__assert_fail@plt+0x7774>
   18f4c:	movw	r1, #1032	; 0x408
   18f50:	mov	r0, r6
   18f54:	movt	r1, #2
   18f58:	bl	11520 <strcmp@plt>
   18f5c:	cmp	r0, #0
   18f60:	mov	r0, #1
   18f64:	beq	19060 <__assert_fail@plt+0x7774>
   18f68:	movw	r1, #1039	; 0x40f
   18f6c:	mov	r0, r6
   18f70:	movt	r1, #2
   18f74:	bl	11520 <strcmp@plt>
   18f78:	cmp	r0, #0
   18f7c:	mov	r0, #1
   18f80:	beq	19060 <__assert_fail@plt+0x7774>
   18f84:	movw	r1, #1047	; 0x417
   18f88:	mov	r0, r6
   18f8c:	movt	r1, #2
   18f90:	bl	11520 <strcmp@plt>
   18f94:	cmp	r0, #0
   18f98:	mov	r0, #1
   18f9c:	beq	19060 <__assert_fail@plt+0x7774>
   18fa0:	movw	r1, #1059	; 0x423
   18fa4:	mov	r0, r6
   18fa8:	movt	r1, #2
   18fac:	bl	11520 <strcmp@plt>
   18fb0:	cmp	r0, #0
   18fb4:	mov	r0, #1
   18fb8:	beq	19060 <__assert_fail@plt+0x7774>
   18fbc:	movw	r1, #1066	; 0x42a
   18fc0:	mov	r0, r6
   18fc4:	movt	r1, #2
   18fc8:	bl	11520 <strcmp@plt>
   18fcc:	cmp	r0, #0
   18fd0:	mov	r0, #1
   18fd4:	beq	19060 <__assert_fail@plt+0x7774>
   18fd8:	movw	r1, #1077	; 0x435
   18fdc:	mov	r0, r6
   18fe0:	movt	r1, #2
   18fe4:	bl	11520 <strcmp@plt>
   18fe8:	cmp	r0, #0
   18fec:	mov	r0, #1
   18ff0:	beq	19060 <__assert_fail@plt+0x7774>
   18ff4:	movw	r1, #1083	; 0x43b
   18ff8:	mov	r0, r6
   18ffc:	movt	r1, #2
   19000:	bl	11520 <strcmp@plt>
   19004:	cmp	r0, #0
   19008:	mov	r0, #1
   1900c:	beq	19060 <__assert_fail@plt+0x7774>
   19010:	movw	r1, #1089	; 0x441
   19014:	mov	r0, r6
   19018:	movt	r1, #2
   1901c:	bl	11520 <strcmp@plt>
   19020:	cmp	r0, #0
   19024:	mov	r0, #1
   19028:	beq	19060 <__assert_fail@plt+0x7774>
   1902c:	movw	r1, #1096	; 0x448
   19030:	mov	r0, r6
   19034:	movt	r1, #2
   19038:	bl	11520 <strcmp@plt>
   1903c:	cmp	r0, #0
   19040:	mov	r0, #1
   19044:	beq	19060 <__assert_fail@plt+0x7774>
   19048:	movw	r1, #1103	; 0x44f
   1904c:	mov	r0, r6
   19050:	movt	r1, #2
   19054:	bl	11520 <strcmp@plt>
   19058:	clz	r0, r0
   1905c:	lsr	r0, r0, #5
   19060:	bic	r1, r4, #1
   19064:	orr	r5, r1, r0
   19068:	mov	r1, #58	; 0x3a
   1906c:	strb	r5, [r7, #24]
   19070:	ldr	r4, [r7]
   19074:	mov	r0, r4
   19078:	bl	11724 <strchr@plt>
   1907c:	ldr	r3, [sp, #4]
   19080:	cmp	r0, #0
   19084:	beq	19090 <__assert_fail@plt+0x77a4>
   19088:	add	r6, sp, #20
   1908c:	b	191fc <__assert_fail@plt+0x7910>
   19090:	ldrb	r0, [r4]
   19094:	mov	r9, r3
   19098:	cmp	r0, #47	; 0x2f
   1909c:	bne	190f4 <__assert_fail@plt+0x7808>
   190a0:	ldrb	r0, [r4, #1]
   190a4:	cmp	r0, #47	; 0x2f
   190a8:	bne	190f4 <__assert_fail@plt+0x7808>
   190ac:	movw	r1, #1108	; 0x454
   190b0:	mov	r0, r6
   190b4:	movt	r1, #2
   190b8:	bl	11520 <strcmp@plt>
   190bc:	cmp	r0, #0
   190c0:	beq	191f4 <__assert_fail@plt+0x7908>
   190c4:	movw	r1, #1114	; 0x45a
   190c8:	mov	r0, r6
   190cc:	movt	r1, #2
   190d0:	bl	11520 <strcmp@plt>
   190d4:	cmp	r0, #0
   190d8:	beq	191f4 <__assert_fail@plt+0x7908>
   190dc:	movw	r1, #1119	; 0x45f
   190e0:	mov	r0, r6
   190e4:	movt	r1, #2
   190e8:	bl	11520 <strcmp@plt>
   190ec:	cmp	r0, #0
   190f0:	beq	191f4 <__assert_fail@plt+0x7908>
   190f4:	movw	r1, #1124	; 0x464
   190f8:	mov	r0, r6
   190fc:	movt	r1, #2
   19100:	bl	11520 <strcmp@plt>
   19104:	cmp	r0, #0
   19108:	beq	191f4 <__assert_fail@plt+0x7908>
   1910c:	movw	r1, #1129	; 0x469
   19110:	mov	r0, r6
   19114:	movt	r1, #2
   19118:	bl	11520 <strcmp@plt>
   1911c:	cmp	r0, #0
   19120:	beq	191f4 <__assert_fail@plt+0x7908>
   19124:	movw	r1, #1133	; 0x46d
   19128:	mov	r0, r6
   1912c:	movt	r1, #2
   19130:	bl	11520 <strcmp@plt>
   19134:	cmp	r0, #0
   19138:	beq	191f4 <__assert_fail@plt+0x7908>
   1913c:	movw	r1, #1138	; 0x472
   19140:	mov	r0, r6
   19144:	movt	r1, #2
   19148:	bl	11520 <strcmp@plt>
   1914c:	cmp	r0, #0
   19150:	beq	191f4 <__assert_fail@plt+0x7908>
   19154:	movw	r1, #1149	; 0x47d
   19158:	mov	r0, r6
   1915c:	movt	r1, #2
   19160:	bl	11520 <strcmp@plt>
   19164:	cmp	r0, #0
   19168:	beq	191f4 <__assert_fail@plt+0x7908>
   1916c:	movw	r1, #1155	; 0x483
   19170:	mov	r0, r6
   19174:	movt	r1, #2
   19178:	bl	11520 <strcmp@plt>
   1917c:	cmp	r0, #0
   19180:	beq	191f4 <__assert_fail@plt+0x7908>
   19184:	movw	r1, #1160	; 0x488
   19188:	mov	r0, r6
   1918c:	movt	r1, #2
   19190:	bl	11520 <strcmp@plt>
   19194:	cmp	r0, #0
   19198:	beq	191f4 <__assert_fail@plt+0x7908>
   1919c:	movw	r1, #1166	; 0x48e
   191a0:	mov	r0, r6
   191a4:	movt	r1, #2
   191a8:	bl	11520 <strcmp@plt>
   191ac:	cmp	r0, #0
   191b0:	beq	191f4 <__assert_fail@plt+0x7908>
   191b4:	movw	r1, #1172	; 0x494
   191b8:	mov	r0, r6
   191bc:	movt	r1, #2
   191c0:	bl	11520 <strcmp@plt>
   191c4:	cmp	r0, #0
   191c8:	add	r6, sp, #20
   191cc:	mov	r3, r9
   191d0:	beq	191fc <__assert_fail@plt+0x7910>
   191d4:	movw	r0, #1177	; 0x499
   191d8:	mov	r1, r4
   191dc:	movt	r0, #2
   191e0:	bl	11520 <strcmp@plt>
   191e4:	clz	r0, r0
   191e8:	mov	r3, r9
   191ec:	lsr	r8, r0, #5
   191f0:	b	191fc <__assert_fail@plt+0x7910>
   191f4:	add	r6, sp, #20
   191f8:	mov	r3, r9
   191fc:	and	r0, r5, #253	; 0xfd
   19200:	add	sl, sp, #12
   19204:	orr	r0, r0, r8, lsl #1
   19208:	movw	r8, #985	; 0x3d9
   1920c:	movt	r8, #2
   19210:	strb	r0, [r7, #24]
   19214:	ldr	r0, [sp, #8]
   19218:	str	r7, [r0]
   1921c:	add	r0, r7, #28
   19220:	str	r0, [sp, #8]
   19224:	add	r7, sp, #16
   19228:	add	r5, sp, #28
   1922c:	add	r4, sp, #24
   19230:	b	18b20 <__assert_fail@plt+0x7234>
   19234:	movw	r0, #1184	; 0x4a0
   19238:	movw	r1, #747	; 0x2eb
   1923c:	movt	r0, #2
   19240:	movt	r1, #2
   19244:	bl	11874 <setmntent@plt>
   19248:	cmp	r0, #0
   1924c:	beq	1965c <__assert_fail@plt+0x7d70>
   19250:	mov	r8, r0
   19254:	bl	1167c <getmntent@plt>
   19258:	cmp	r0, #0
   1925c:	beq	19664 <__assert_fail@plt+0x7d78>
   19260:	mov	r5, r0
   19264:	add	sl, sp, #32
   19268:	b	192c4 <__assert_fail@plt+0x79d8>
   1926c:	bic	r1, r4, #1
   19270:	orr	r4, r1, r0
   19274:	mov	r1, #58	; 0x3a
   19278:	strb	r4, [r9, #24]
   1927c:	ldr	r5, [r9]
   19280:	mov	r0, r5
   19284:	bl	11724 <strchr@plt>
   19288:	cmp	r0, #0
   1928c:	beq	194b4 <__assert_fail@plt+0x7bc8>
   19290:	mvn	r0, #0
   19294:	str	r0, [r9, #16]
   19298:	str	r0, [r9, #20]
   1929c:	and	r0, r4, #253	; 0xfd
   192a0:	orr	r0, r0, r6, lsl #1
   192a4:	strb	r0, [r9, #24]
   192a8:	mov	r0, r8
   192ac:	str	r9, [sl]
   192b0:	add	sl, r9, #28
   192b4:	bl	1167c <getmntent@plt>
   192b8:	mov	r5, r0
   192bc:	cmp	r0, #0
   192c0:	beq	19668 <__assert_fail@plt+0x7d7c>
   192c4:	movw	r1, #1194	; 0x4aa
   192c8:	mov	r0, r5
   192cc:	movt	r1, #2
   192d0:	bl	11640 <hasmntopt@plt>
   192d4:	str	r0, [sp, #8]
   192d8:	mov	r0, #32
   192dc:	bl	1bdc8 <__assert_fail@plt+0xa4dc>
   192e0:	mov	r9, r0
   192e4:	ldr	r0, [r5]
   192e8:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   192ec:	str	r0, [r9]
   192f0:	ldr	r0, [r5, #4]
   192f4:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   192f8:	str	r0, [r9, #4]
   192fc:	mov	r0, #0
   19300:	str	r0, [r9, #8]
   19304:	ldr	r0, [r5, #8]
   19308:	bl	1c2cc <__assert_fail@plt+0xa9e0>
   1930c:	str	r0, [r9, #12]
   19310:	mov	r7, r0
   19314:	movw	r1, #1006	; 0x3ee
   19318:	ldrb	r0, [r9, #24]
   1931c:	movt	r1, #2
   19320:	orr	r4, r0, #4
   19324:	mov	r0, r7
   19328:	strb	r4, [r9, #24]
   1932c:	bl	11520 <strcmp@plt>
   19330:	cmp	r0, #0
   19334:	mov	r6, #1
   19338:	mov	r0, #1
   1933c:	beq	1926c <__assert_fail@plt+0x7980>
   19340:	movw	r1, #1013	; 0x3f5
   19344:	mov	r0, r7
   19348:	movt	r1, #2
   1934c:	bl	11520 <strcmp@plt>
   19350:	cmp	r0, #0
   19354:	mov	r0, #1
   19358:	beq	1926c <__assert_fail@plt+0x7980>
   1935c:	movw	r1, #1018	; 0x3fa
   19360:	mov	r0, r7
   19364:	movt	r1, #2
   19368:	bl	11520 <strcmp@plt>
   1936c:	cmp	r0, #0
   19370:	mov	r0, #1
   19374:	beq	1926c <__assert_fail@plt+0x7980>
   19378:	movw	r1, #1024	; 0x400
   1937c:	mov	r0, r7
   19380:	movt	r1, #2
   19384:	bl	11520 <strcmp@plt>
   19388:	cmp	r0, #0
   1938c:	mov	r0, #1
   19390:	beq	1926c <__assert_fail@plt+0x7980>
   19394:	movw	r1, #1032	; 0x408
   19398:	mov	r0, r7
   1939c:	movt	r1, #2
   193a0:	bl	11520 <strcmp@plt>
   193a4:	cmp	r0, #0
   193a8:	mov	r0, #1
   193ac:	beq	1926c <__assert_fail@plt+0x7980>
   193b0:	movw	r1, #1039	; 0x40f
   193b4:	mov	r0, r7
   193b8:	movt	r1, #2
   193bc:	bl	11520 <strcmp@plt>
   193c0:	cmp	r0, #0
   193c4:	mov	r0, #1
   193c8:	beq	1926c <__assert_fail@plt+0x7980>
   193cc:	movw	r1, #1047	; 0x417
   193d0:	mov	r0, r7
   193d4:	movt	r1, #2
   193d8:	bl	11520 <strcmp@plt>
   193dc:	cmp	r0, #0
   193e0:	mov	r0, #1
   193e4:	beq	1926c <__assert_fail@plt+0x7980>
   193e8:	movw	r1, #1059	; 0x423
   193ec:	mov	r0, r7
   193f0:	movt	r1, #2
   193f4:	bl	11520 <strcmp@plt>
   193f8:	cmp	r0, #0
   193fc:	mov	r0, #1
   19400:	beq	1926c <__assert_fail@plt+0x7980>
   19404:	movw	r1, #1066	; 0x42a
   19408:	mov	r0, r7
   1940c:	movt	r1, #2
   19410:	bl	11520 <strcmp@plt>
   19414:	cmp	r0, #0
   19418:	mov	r0, #1
   1941c:	beq	1926c <__assert_fail@plt+0x7980>
   19420:	movw	r1, #1077	; 0x435
   19424:	mov	r0, r7
   19428:	movt	r1, #2
   1942c:	bl	11520 <strcmp@plt>
   19430:	cmp	r0, #0
   19434:	mov	r0, #1
   19438:	beq	1926c <__assert_fail@plt+0x7980>
   1943c:	movw	r1, #1083	; 0x43b
   19440:	mov	r0, r7
   19444:	movt	r1, #2
   19448:	bl	11520 <strcmp@plt>
   1944c:	cmp	r0, #0
   19450:	mov	r0, #1
   19454:	beq	1926c <__assert_fail@plt+0x7980>
   19458:	movw	r1, #1089	; 0x441
   1945c:	mov	r0, r7
   19460:	movt	r1, #2
   19464:	bl	11520 <strcmp@plt>
   19468:	cmp	r0, #0
   1946c:	mov	r0, #1
   19470:	beq	1926c <__assert_fail@plt+0x7980>
   19474:	movw	r1, #1096	; 0x448
   19478:	mov	r0, r7
   1947c:	movt	r1, #2
   19480:	bl	11520 <strcmp@plt>
   19484:	cmp	r0, #0
   19488:	mov	r0, #1
   1948c:	beq	1926c <__assert_fail@plt+0x7980>
   19490:	movw	r1, #1103	; 0x44f
   19494:	mov	r0, r7
   19498:	movt	r1, #2
   1949c:	bl	11520 <strcmp@plt>
   194a0:	ldr	r1, [sp, #8]
   194a4:	orr	r0, r1, r0
   194a8:	clz	r0, r0
   194ac:	lsr	r0, r0, #5
   194b0:	b	1926c <__assert_fail@plt+0x7980>
   194b4:	ldrb	r0, [r5]
   194b8:	cmp	r0, #47	; 0x2f
   194bc:	bne	19514 <__assert_fail@plt+0x7c28>
   194c0:	ldrb	r0, [r5, #1]
   194c4:	cmp	r0, #47	; 0x2f
   194c8:	bne	19514 <__assert_fail@plt+0x7c28>
   194cc:	movw	r1, #1108	; 0x454
   194d0:	mov	r0, r7
   194d4:	movt	r1, #2
   194d8:	bl	11520 <strcmp@plt>
   194dc:	cmp	r0, #0
   194e0:	beq	19290 <__assert_fail@plt+0x79a4>
   194e4:	movw	r1, #1114	; 0x45a
   194e8:	mov	r0, r7
   194ec:	movt	r1, #2
   194f0:	bl	11520 <strcmp@plt>
   194f4:	cmp	r0, #0
   194f8:	beq	19290 <__assert_fail@plt+0x79a4>
   194fc:	movw	r1, #1119	; 0x45f
   19500:	mov	r0, r7
   19504:	movt	r1, #2
   19508:	bl	11520 <strcmp@plt>
   1950c:	cmp	r0, #0
   19510:	beq	19290 <__assert_fail@plt+0x79a4>
   19514:	movw	r1, #1124	; 0x464
   19518:	mov	r0, r7
   1951c:	movt	r1, #2
   19520:	bl	11520 <strcmp@plt>
   19524:	cmp	r0, #0
   19528:	beq	19290 <__assert_fail@plt+0x79a4>
   1952c:	movw	r1, #1129	; 0x469
   19530:	mov	r0, r7
   19534:	movt	r1, #2
   19538:	bl	11520 <strcmp@plt>
   1953c:	cmp	r0, #0
   19540:	beq	19290 <__assert_fail@plt+0x79a4>
   19544:	movw	r1, #1133	; 0x46d
   19548:	mov	r0, r7
   1954c:	movt	r1, #2
   19550:	bl	11520 <strcmp@plt>
   19554:	cmp	r0, #0
   19558:	beq	19290 <__assert_fail@plt+0x79a4>
   1955c:	movw	r1, #1138	; 0x472
   19560:	mov	r0, r7
   19564:	movt	r1, #2
   19568:	bl	11520 <strcmp@plt>
   1956c:	cmp	r0, #0
   19570:	beq	19290 <__assert_fail@plt+0x79a4>
   19574:	movw	r1, #1149	; 0x47d
   19578:	mov	r0, r7
   1957c:	movt	r1, #2
   19580:	bl	11520 <strcmp@plt>
   19584:	cmp	r0, #0
   19588:	beq	19290 <__assert_fail@plt+0x79a4>
   1958c:	movw	r1, #1155	; 0x483
   19590:	mov	r0, r7
   19594:	movt	r1, #2
   19598:	bl	11520 <strcmp@plt>
   1959c:	cmp	r0, #0
   195a0:	beq	19290 <__assert_fail@plt+0x79a4>
   195a4:	movw	r1, #1160	; 0x488
   195a8:	mov	r0, r7
   195ac:	movt	r1, #2
   195b0:	bl	11520 <strcmp@plt>
   195b4:	cmp	r0, #0
   195b8:	beq	19290 <__assert_fail@plt+0x79a4>
   195bc:	movw	r1, #1166	; 0x48e
   195c0:	mov	r0, r7
   195c4:	movt	r1, #2
   195c8:	bl	11520 <strcmp@plt>
   195cc:	cmp	r0, #0
   195d0:	beq	19290 <__assert_fail@plt+0x79a4>
   195d4:	movw	r1, #1172	; 0x494
   195d8:	mov	r0, r7
   195dc:	movt	r1, #2
   195e0:	bl	11520 <strcmp@plt>
   195e4:	cmp	r0, #0
   195e8:	beq	19290 <__assert_fail@plt+0x79a4>
   195ec:	movw	r0, #1177	; 0x499
   195f0:	mov	r1, r5
   195f4:	movt	r0, #2
   195f8:	bl	11520 <strcmp@plt>
   195fc:	clz	r0, r0
   19600:	lsr	r6, r0, #5
   19604:	b	19290 <__assert_fail@plt+0x79a4>
   19608:	add	r0, sp, #32
   1960c:	str	r0, [sp, #8]
   19610:	ldr	r0, [sp, #28]
   19614:	bl	16040 <__assert_fail@plt+0x4754>
   19618:	ldrb	r1, [r9]
   1961c:	tst	r1, #32
   19620:	bne	1963c <__assert_fail@plt+0x7d50>
   19624:	mov	r0, r9
   19628:	bl	1e678 <__assert_fail@plt+0xcd8c>
   1962c:	ldr	sl, [sp, #8]
   19630:	cmn	r0, #1
   19634:	bne	19678 <__assert_fail@plt+0x7d8c>
   19638:	b	19688 <__assert_fail@plt+0x7d9c>
   1963c:	bl	11748 <__errno_location@plt>
   19640:	ldr	r6, [r0]
   19644:	mov	r5, r0
   19648:	mov	r0, r9
   1964c:	bl	1e678 <__assert_fail@plt+0xcd8c>
   19650:	ldr	sl, [sp, #8]
   19654:	str	r6, [r5]
   19658:	b	19688 <__assert_fail@plt+0x7d9c>
   1965c:	mov	r4, #0
   19660:	b	196fc <__assert_fail@plt+0x7e10>
   19664:	add	sl, sp, #32
   19668:	mov	r0, r8
   1966c:	bl	117cc <endmntent@plt>
   19670:	cmp	r0, #0
   19674:	beq	19688 <__assert_fail@plt+0x7d9c>
   19678:	mov	r0, #0
   1967c:	str	r0, [sl]
   19680:	ldr	r4, [sp, #32]
   19684:	b	196fc <__assert_fail@plt+0x7e10>
   19688:	bl	11748 <__errno_location@plt>
   1968c:	mov	r4, #0
   19690:	ldr	r8, [r0]
   19694:	mov	r5, r0
   19698:	str	r4, [sl]
   1969c:	ldr	r6, [sp, #32]
   196a0:	cmp	r6, #0
   196a4:	bne	196c4 <__assert_fail@plt+0x7dd8>
   196a8:	b	196f8 <__assert_fail@plt+0x7e0c>
   196ac:	mov	r0, r6
   196b0:	bl	16040 <__assert_fail@plt+0x4754>
   196b4:	cmp	r7, #0
   196b8:	mov	r6, r7
   196bc:	str	r7, [sp, #32]
   196c0:	beq	196f8 <__assert_fail@plt+0x7e0c>
   196c4:	ldr	r0, [r6]
   196c8:	ldr	r7, [r6, #28]
   196cc:	bl	16040 <__assert_fail@plt+0x4754>
   196d0:	ldr	r0, [r6, #4]
   196d4:	bl	16040 <__assert_fail@plt+0x4754>
   196d8:	ldr	r0, [r6, #8]
   196dc:	bl	16040 <__assert_fail@plt+0x4754>
   196e0:	ldrb	r0, [r6, #24]
   196e4:	tst	r0, #4
   196e8:	beq	196ac <__assert_fail@plt+0x7dc0>
   196ec:	ldr	r0, [r6, #12]
   196f0:	bl	16040 <__assert_fail@plt+0x4754>
   196f4:	b	196ac <__assert_fail@plt+0x7dc0>
   196f8:	str	r8, [r5]
   196fc:	mov	r0, r4
   19700:	sub	sp, fp, #28
   19704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19708:	push	{r4, sl, fp, lr}
   1970c:	add	fp, sp, #8
   19710:	mov	r4, r0
   19714:	ldr	r0, [r0]
   19718:	bl	16040 <__assert_fail@plt+0x4754>
   1971c:	ldr	r0, [r4, #4]
   19720:	bl	16040 <__assert_fail@plt+0x4754>
   19724:	ldr	r0, [r4, #8]
   19728:	bl	16040 <__assert_fail@plt+0x4754>
   1972c:	ldrb	r0, [r4, #24]
   19730:	tst	r0, #4
   19734:	beq	19740 <__assert_fail@plt+0x7e54>
   19738:	ldr	r0, [r4, #12]
   1973c:	bl	16040 <__assert_fail@plt+0x4754>
   19740:	mov	r0, r4
   19744:	pop	{r4, sl, fp, lr}
   19748:	b	16040 <__assert_fail@plt+0x4754>
   1974c:	push	{r4, r5, fp, lr}
   19750:	add	fp, sp, #8
   19754:	cmp	r0, #0
   19758:	beq	197ec <__assert_fail@plt+0x7f00>
   1975c:	mov	r1, #47	; 0x2f
   19760:	mov	r4, r0
   19764:	bl	11808 <strrchr@plt>
   19768:	cmp	r0, #0
   1976c:	mov	r5, r4
   19770:	addne	r5, r0, #1
   19774:	sub	r0, r5, r4
   19778:	cmp	r0, #7
   1977c:	blt	197d0 <__assert_fail@plt+0x7ee4>
   19780:	movw	r1, #1255	; 0x4e7
   19784:	sub	r0, r5, #7
   19788:	mov	r2, #7
   1978c:	movt	r1, #2
   19790:	bl	118b0 <strncmp@plt>
   19794:	cmp	r0, #0
   19798:	bne	197d0 <__assert_fail@plt+0x7ee4>
   1979c:	movw	r1, #1263	; 0x4ef
   197a0:	mov	r0, r5
   197a4:	mov	r2, #3
   197a8:	movt	r1, #2
   197ac:	bl	118b0 <strncmp@plt>
   197b0:	cmp	r0, #0
   197b4:	beq	197c0 <__assert_fail@plt+0x7ed4>
   197b8:	mov	r4, r5
   197bc:	b	197d0 <__assert_fail@plt+0x7ee4>
   197c0:	movw	r0, #4896	; 0x1320
   197c4:	add	r4, r5, #3
   197c8:	movt	r0, #3
   197cc:	str	r4, [r0]
   197d0:	movw	r0, #4900	; 0x1324
   197d4:	movt	r0, #3
   197d8:	str	r4, [r0]
   197dc:	movw	r0, #5056	; 0x13c0
   197e0:	movt	r0, #3
   197e4:	str	r4, [r0]
   197e8:	pop	{r4, r5, fp, pc}
   197ec:	movw	r0, #4912	; 0x1330
   197f0:	mov	r1, #55	; 0x37
   197f4:	mov	r2, #1
   197f8:	movt	r0, #3
   197fc:	ldr	r3, [r0]
   19800:	movw	r0, #1199	; 0x4af
   19804:	movt	r0, #2
   19808:	bl	1161c <fwrite@plt>
   1980c:	bl	118bc <abort@plt>
   19810:	push	{r4, r5, r6, sl, fp, lr}
   19814:	add	fp, sp, #16
   19818:	mov	r4, r0
   1981c:	movw	r0, #5064	; 0x13c8
   19820:	movt	r0, #3
   19824:	cmp	r4, #0
   19828:	moveq	r4, r0
   1982c:	bl	11748 <__errno_location@plt>
   19830:	ldr	r6, [r0]
   19834:	mov	r5, r0
   19838:	mov	r0, r4
   1983c:	mov	r1, #48	; 0x30
   19840:	bl	1c228 <__assert_fail@plt+0xa93c>
   19844:	str	r6, [r5]
   19848:	pop	{r4, r5, r6, sl, fp, pc}
   1984c:	movw	r1, #5064	; 0x13c8
   19850:	cmp	r0, #0
   19854:	movt	r1, #3
   19858:	movne	r1, r0
   1985c:	ldr	r0, [r1]
   19860:	bx	lr
   19864:	movw	r2, #5064	; 0x13c8
   19868:	cmp	r0, #0
   1986c:	movt	r2, #3
   19870:	movne	r2, r0
   19874:	str	r1, [r2]
   19878:	bx	lr
   1987c:	movw	r3, #5064	; 0x13c8
   19880:	cmp	r0, #0
   19884:	and	r2, r2, #1
   19888:	movt	r3, #3
   1988c:	movne	r3, r0
   19890:	ubfx	r0, r1, #5, #3
   19894:	and	r1, r1, #31
   19898:	add	ip, r3, r0, lsl #2
   1989c:	mov	r0, #1
   198a0:	ldr	r3, [ip, #8]
   198a4:	and	r0, r0, r3, lsr r1
   198a8:	eor	r2, r0, r2
   198ac:	eor	r1, r3, r2, lsl r1
   198b0:	str	r1, [ip, #8]
   198b4:	bx	lr
   198b8:	movw	r2, #5064	; 0x13c8
   198bc:	cmp	r0, #0
   198c0:	movt	r2, #3
   198c4:	movne	r2, r0
   198c8:	ldr	r0, [r2, #4]
   198cc:	str	r1, [r2, #4]
   198d0:	bx	lr
   198d4:	push	{fp, lr}
   198d8:	mov	fp, sp
   198dc:	movw	r3, #5064	; 0x13c8
   198e0:	cmp	r0, #0
   198e4:	movt	r3, #3
   198e8:	movne	r3, r0
   198ec:	cmp	r1, #0
   198f0:	mov	r0, #10
   198f4:	cmpne	r2, #0
   198f8:	str	r0, [r3]
   198fc:	bne	19904 <__assert_fail@plt+0x8018>
   19900:	bl	118bc <abort@plt>
   19904:	str	r1, [r3, #40]	; 0x28
   19908:	str	r2, [r3, #44]	; 0x2c
   1990c:	pop	{fp, pc}
   19910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19914:	add	fp, sp, #28
   19918:	sub	sp, sp, #20
   1991c:	mov	r7, r0
   19920:	ldr	r0, [fp, #8]
   19924:	movw	r5, #5064	; 0x13c8
   19928:	mov	r8, r3
   1992c:	mov	r9, r2
   19930:	mov	sl, r1
   19934:	movt	r5, #3
   19938:	cmp	r0, #0
   1993c:	movne	r5, r0
   19940:	bl	11748 <__errno_location@plt>
   19944:	ldr	r2, [r5, #40]	; 0x28
   19948:	ldr	r3, [r5, #44]	; 0x2c
   1994c:	mov	r4, r0
   19950:	ldm	r5, {r0, r1}
   19954:	add	r5, r5, #8
   19958:	ldr	r6, [r4]
   1995c:	stm	sp, {r0, r1, r5}
   19960:	mov	r0, r7
   19964:	mov	r1, sl
   19968:	str	r2, [sp, #12]
   1996c:	str	r3, [sp, #16]
   19970:	mov	r2, r9
   19974:	mov	r3, r8
   19978:	bl	19988 <__assert_fail@plt+0x809c>
   1997c:	str	r6, [r4]
   19980:	sub	sp, fp, #28
   19984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1998c:	add	fp, sp, #28
   19990:	sub	sp, sp, #156	; 0x9c
   19994:	mov	r5, r0
   19998:	add	r0, r2, #1
   1999c:	mov	r6, r1
   199a0:	mov	sl, r3
   199a4:	str	r2, [fp, #-80]	; 0xffffffb0
   199a8:	str	r0, [sp, #72]	; 0x48
   199ac:	ldr	r0, [fp, #12]
   199b0:	and	r1, r0, #1
   199b4:	str	r1, [sp, #36]	; 0x24
   199b8:	and	r1, r0, #4
   199bc:	str	r1, [sp, #32]
   199c0:	ubfx	r9, r0, #1, #1
   199c4:	bl	11634 <__ctype_get_mb_cur_max@plt>
   199c8:	str	r0, [sp, #40]	; 0x28
   199cc:	ldr	r0, [fp, #24]
   199d0:	ldr	r7, [fp, #8]
   199d4:	mov	r1, #0
   199d8:	str	r5, [fp, #-84]	; 0xffffffac
   199dc:	str	r1, [fp, #-56]	; 0xffffffc8
   199e0:	mov	r1, #0
   199e4:	str	r1, [sp, #60]	; 0x3c
   199e8:	mov	r1, #1
   199ec:	str	r1, [fp, #-48]	; 0xffffffd0
   199f0:	str	r0, [sp, #80]	; 0x50
   199f4:	ldr	r0, [fp, #20]
   199f8:	str	r0, [sp, #76]	; 0x4c
   199fc:	mov	r0, #0
   19a00:	str	r0, [sp, #56]	; 0x38
   19a04:	mov	r0, #0
   19a08:	str	r0, [fp, #-88]	; 0xffffffa8
   19a0c:	mov	r0, #0
   19a10:	str	r0, [fp, #-72]	; 0xffffffb8
   19a14:	mov	r0, #0
   19a18:	cmp	r7, #10
   19a1c:	bhi	1a9b0 <__assert_fail@plt+0x90c4>
   19a20:	add	r1, pc, #24
   19a24:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19a28:	mov	r4, r6
   19a2c:	mov	r8, #0
   19a30:	mov	r2, #1
   19a34:	mov	r3, #0
   19a38:	mov	lr, sl
   19a3c:	ldr	pc, [r1, r7, lsl #2]
   19a40:	andeq	r9, r1, r4, lsl #22
   19a44:	andeq	r9, r1, r8, asr fp
   19a48:	andeq	r9, r1, r8, lsl fp
   19a4c:	strdeq	r9, [r1], -ip
   19a50:	andeq	r9, r1, ip, asr #22
   19a54:	andeq	r9, r1, r0, lsl #23
   19a58:	andeq	r9, r1, r8, lsr #22
   19a5c:	andeq	r9, r1, r4, lsl #24
   19a60:	andeq	r9, r1, ip, ror #20
   19a64:	andeq	r9, r1, ip, ror #20
   19a68:	muleq	r1, r4, sl
   19a6c:	movw	r0, #1343	; 0x53f
   19a70:	mov	r1, r7
   19a74:	movt	r0, #2
   19a78:	bl	1b3b8 <__assert_fail@plt+0x9acc>
   19a7c:	str	r0, [sp, #76]	; 0x4c
   19a80:	movw	r0, #2653	; 0xa5d
   19a84:	mov	r1, r7
   19a88:	movt	r0, #2
   19a8c:	bl	1b3b8 <__assert_fail@plt+0x9acc>
   19a90:	str	r0, [sp, #80]	; 0x50
   19a94:	mov	r8, #0
   19a98:	tst	r9, #1
   19a9c:	bne	19ad4 <__assert_fail@plt+0x81e8>
   19aa0:	ldr	r0, [sp, #76]	; 0x4c
   19aa4:	ldrb	r0, [r0]
   19aa8:	cmp	r0, #0
   19aac:	beq	19ad4 <__assert_fail@plt+0x81e8>
   19ab0:	ldr	r1, [sp, #76]	; 0x4c
   19ab4:	mov	r8, #0
   19ab8:	add	r1, r1, #1
   19abc:	cmp	r8, r4
   19ac0:	strbcc	r0, [r5, r8]
   19ac4:	ldrb	r0, [r1, r8]
   19ac8:	add	r8, r8, #1
   19acc:	cmp	r0, #0
   19ad0:	bne	19abc <__assert_fail@plt+0x81d0>
   19ad4:	ldr	r6, [sp, #80]	; 0x50
   19ad8:	mov	r0, r6
   19adc:	bl	11718 <strlen@plt>
   19ae0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19ae4:	str	r0, [fp, #-72]	; 0xffffffb8
   19ae8:	str	r6, [fp, #-88]	; 0xffffffa8
   19aec:	mov	r2, #1
   19af0:	mov	r3, r9
   19af4:	mov	lr, sl
   19af8:	b	19c04 <__assert_fail@plt+0x8318>
   19afc:	mov	r0, #1
   19b00:	b	19b58 <__assert_fail@plt+0x826c>
   19b04:	mov	r7, #0
   19b08:	mov	r8, #0
   19b0c:	mov	r2, r0
   19b10:	mov	r3, #0
   19b14:	b	19c04 <__assert_fail@plt+0x8318>
   19b18:	tst	r9, #1
   19b1c:	bne	19b58 <__assert_fail@plt+0x826c>
   19b20:	mov	r2, r0
   19b24:	b	19bb0 <__assert_fail@plt+0x82c4>
   19b28:	mov	r0, #1
   19b2c:	mov	r8, #0
   19b30:	mov	r7, #5
   19b34:	mov	r2, #1
   19b38:	str	r0, [fp, #-72]	; 0xffffffb8
   19b3c:	movw	r0, #65213	; 0xfebd
   19b40:	movt	r0, #1
   19b44:	str	r0, [fp, #-88]	; 0xffffffa8
   19b48:	b	19b78 <__assert_fail@plt+0x828c>
   19b4c:	mov	r2, #1
   19b50:	tst	r9, #1
   19b54:	beq	19bb0 <__assert_fail@plt+0x82c4>
   19b58:	mov	r1, #1
   19b5c:	mov	r8, #0
   19b60:	mov	r7, #2
   19b64:	mov	r2, r0
   19b68:	str	r1, [fp, #-72]	; 0xffffffb8
   19b6c:	movw	r1, #2653	; 0xa5d
   19b70:	movt	r1, #2
   19b74:	str	r1, [fp, #-88]	; 0xffffffa8
   19b78:	mov	r3, #1
   19b7c:	b	19c04 <__assert_fail@plt+0x8318>
   19b80:	tst	r9, #1
   19b84:	beq	19bd4 <__assert_fail@plt+0x82e8>
   19b88:	mov	r0, #1
   19b8c:	mov	r8, #0
   19b90:	mov	r2, #1
   19b94:	mov	r3, #1
   19b98:	mov	r7, #5
   19b9c:	str	r0, [fp, #-72]	; 0xffffffb8
   19ba0:	movw	r0, #65213	; 0xfebd
   19ba4:	movt	r0, #1
   19ba8:	str	r0, [fp, #-88]	; 0xffffffa8
   19bac:	b	19c04 <__assert_fail@plt+0x8318>
   19bb0:	cmp	r4, #0
   19bb4:	mov	r8, #1
   19bb8:	mov	r3, #0
   19bbc:	mov	r7, #2
   19bc0:	movne	r0, #39	; 0x27
   19bc4:	strbne	r0, [r5]
   19bc8:	movw	r0, #2653	; 0xa5d
   19bcc:	movt	r0, #2
   19bd0:	b	19bf8 <__assert_fail@plt+0x830c>
   19bd4:	cmp	r4, #0
   19bd8:	mov	r8, #1
   19bdc:	mov	r2, #1
   19be0:	mov	r7, #5
   19be4:	mov	r3, #0
   19be8:	movne	r0, #34	; 0x22
   19bec:	strbne	r0, [r5]
   19bf0:	movw	r0, #65213	; 0xfebd
   19bf4:	movt	r0, #1
   19bf8:	str	r0, [fp, #-88]	; 0xffffffa8
   19bfc:	mov	r0, #1
   19c00:	str	r0, [fp, #-72]	; 0xffffffb8
   19c04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19c08:	eor	r6, r3, #1
   19c0c:	str	r7, [fp, #-68]	; 0xffffffbc
   19c10:	str	r3, [fp, #-76]	; 0xffffffb4
   19c14:	str	r2, [sp, #84]	; 0x54
   19c18:	str	r6, [sp, #92]	; 0x5c
   19c1c:	cmp	r0, #0
   19c20:	movwne	r0, #1
   19c24:	and	r1, r0, r3
   19c28:	and	r1, r2, r1
   19c2c:	str	r1, [sp, #48]	; 0x30
   19c30:	sub	r1, r7, #2
   19c34:	clz	r1, r1
   19c38:	lsr	r1, r1, #5
   19c3c:	and	r1, r1, r3
   19c40:	str	r1, [sp, #64]	; 0x40
   19c44:	subs	r1, r7, #2
   19c48:	mov	r7, #0
   19c4c:	movwne	r1, #1
   19c50:	orr	r6, r1, r6
   19c54:	and	r1, r1, r2
   19c58:	and	r0, r0, r1
   19c5c:	str	r6, [sp, #68]	; 0x44
   19c60:	str	r0, [fp, #-60]	; 0xffffffc4
   19c64:	orr	r0, r1, r3
   19c68:	ldr	r1, [fp, #16]
   19c6c:	eor	r0, r0, #1
   19c70:	clz	r1, r1
   19c74:	lsr	r1, r1, #5
   19c78:	orr	r0, r1, r0
   19c7c:	str	r0, [fp, #-64]	; 0xffffffc0
   19c80:	eor	r0, r2, #1
   19c84:	str	r0, [sp, #52]	; 0x34
   19c88:	cmn	lr, #1
   19c8c:	beq	19c9c <__assert_fail@plt+0x83b0>
   19c90:	cmp	r7, lr
   19c94:	bne	19ca8 <__assert_fail@plt+0x83bc>
   19c98:	b	1a7f0 <__assert_fail@plt+0x8f04>
   19c9c:	ldrb	r0, [ip, r7]
   19ca0:	cmp	r0, #0
   19ca4:	beq	1a7f8 <__assert_fail@plt+0x8f0c>
   19ca8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19cac:	mov	sl, #0
   19cb0:	cmp	r0, #0
   19cb4:	beq	19cec <__assert_fail@plt+0x8400>
   19cb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19cbc:	add	r5, r7, r0
   19cc0:	cmp	r0, #2
   19cc4:	bcc	19ce0 <__assert_fail@plt+0x83f4>
   19cc8:	cmn	lr, #1
   19ccc:	bne	19ce0 <__assert_fail@plt+0x83f4>
   19cd0:	mov	r0, ip
   19cd4:	bl	11718 <strlen@plt>
   19cd8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19cdc:	mov	lr, r0
   19ce0:	cmp	r5, lr
   19ce4:	bls	19cf4 <__assert_fail@plt+0x8408>
   19ce8:	ldr	r5, [fp, #-84]	; 0xffffffac
   19cec:	mov	r0, #0
   19cf0:	b	19d40 <__assert_fail@plt+0x8454>
   19cf4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   19cf8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   19cfc:	add	r0, ip, r7
   19d00:	mov	r6, r4
   19d04:	mov	r4, lr
   19d08:	bl	1170c <bcmp@plt>
   19d0c:	ldr	r2, [sp, #92]	; 0x5c
   19d10:	cmp	r0, #0
   19d14:	ldr	r5, [fp, #-84]	; 0xffffffac
   19d18:	mov	r1, r0
   19d1c:	movwne	r1, #1
   19d20:	orr	r1, r1, r2
   19d24:	tst	r1, #1
   19d28:	beq	1a880 <__assert_fail@plt+0x8f94>
   19d2c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19d30:	clz	r0, r0
   19d34:	mov	lr, r4
   19d38:	mov	r4, r6
   19d3c:	lsr	r0, r0, #5
   19d40:	str	r0, [fp, #-52]	; 0xffffffcc
   19d44:	ldrb	r6, [ip, r7]
   19d48:	cmp	r6, #126	; 0x7e
   19d4c:	bhi	1a27c <__assert_fail@plt+0x8990>
   19d50:	add	r3, pc, #16
   19d54:	mov	r9, #1
   19d58:	mov	r2, #110	; 0x6e
   19d5c:	mov	r0, #97	; 0x61
   19d60:	mov	r1, #0
   19d64:	ldr	pc, [r3, r6, lsl #2]
   19d68:	ldrdeq	sl, [r1], -ip
   19d6c:	andeq	sl, r1, ip, ror r2
   19d70:	andeq	sl, r1, ip, ror r2
   19d74:	andeq	sl, r1, ip, ror r2
   19d78:	andeq	sl, r1, ip, ror r2
   19d7c:	andeq	sl, r1, ip, ror r2
   19d80:	andeq	sl, r1, ip, ror r2
   19d84:	andeq	sl, r1, r8, asr r3
   19d88:	strheq	sl, [r1], -ip
   19d8c:	strheq	sl, [r1], -r4
   19d90:	andeq	sl, r1, r8, asr #1
   19d94:	andeq	sl, r1, r4, ror #3
   19d98:	andeq	sl, r1, ip, lsr #1
   19d9c:	andeq	sl, r1, r4, asr #1
   19da0:	andeq	sl, r1, ip, ror r2
   19da4:	andeq	sl, r1, ip, ror r2
   19da8:	andeq	sl, r1, ip, ror r2
   19dac:	andeq	sl, r1, ip, ror r2
   19db0:	andeq	sl, r1, ip, ror r2
   19db4:	andeq	sl, r1, ip, ror r2
   19db8:	andeq	sl, r1, ip, ror r2
   19dbc:	andeq	sl, r1, ip, ror r2
   19dc0:	andeq	sl, r1, ip, ror r2
   19dc4:	andeq	sl, r1, ip, ror r2
   19dc8:	andeq	sl, r1, ip, ror r2
   19dcc:	andeq	sl, r1, ip, ror r2
   19dd0:	andeq	sl, r1, ip, ror r2
   19dd4:	andeq	sl, r1, ip, ror r2
   19dd8:	andeq	sl, r1, ip, ror r2
   19ddc:	andeq	sl, r1, ip, ror r2
   19de0:	andeq	sl, r1, ip, ror r2
   19de4:	andeq	sl, r1, ip, ror r2
   19de8:	andeq	sl, r1, r0, rrx
   19dec:	andeq	sl, r1, r4, rrx
   19df0:	andeq	sl, r1, r4, rrx
   19df4:	andeq	sl, r1, ip, asr #32
   19df8:	andeq	sl, r1, r4, rrx
   19dfc:	andeq	r9, r1, r4, ror #30
   19e00:	andeq	sl, r1, r4, rrx
   19e04:	andeq	sl, r1, ip, ror #3
   19e08:	andeq	sl, r1, r4, rrx
   19e0c:	andeq	sl, r1, r4, rrx
   19e10:	andeq	sl, r1, r4, rrx
   19e14:	andeq	r9, r1, r4, ror #30
   19e18:	andeq	r9, r1, r4, ror #30
   19e1c:	andeq	r9, r1, r4, ror #30
   19e20:	andeq	r9, r1, r4, ror #30
   19e24:	andeq	r9, r1, r4, ror #30
   19e28:	andeq	r9, r1, r4, ror #30
   19e2c:	andeq	r9, r1, r4, ror #30
   19e30:	andeq	r9, r1, r4, ror #30
   19e34:	andeq	r9, r1, r4, ror #30
   19e38:	andeq	r9, r1, r4, ror #30
   19e3c:	andeq	r9, r1, r4, ror #30
   19e40:	andeq	r9, r1, r4, ror #30
   19e44:	andeq	r9, r1, r4, ror #30
   19e48:	andeq	r9, r1, r4, ror #30
   19e4c:	andeq	r9, r1, r4, ror #30
   19e50:	andeq	r9, r1, r4, ror #30
   19e54:	andeq	sl, r1, r4, rrx
   19e58:	andeq	sl, r1, r4, rrx
   19e5c:	andeq	sl, r1, r4, rrx
   19e60:	andeq	sl, r1, r4, rrx
   19e64:			; <UNDEFINED> instruction: 0x0001a1b4
   19e68:	andeq	sl, r1, ip, ror r2
   19e6c:	andeq	r9, r1, r4, ror #30
   19e70:	andeq	r9, r1, r4, ror #30
   19e74:	andeq	r9, r1, r4, ror #30
   19e78:	andeq	r9, r1, r4, ror #30
   19e7c:	andeq	r9, r1, r4, ror #30
   19e80:	andeq	r9, r1, r4, ror #30
   19e84:	andeq	r9, r1, r4, ror #30
   19e88:	andeq	r9, r1, r4, ror #30
   19e8c:	andeq	r9, r1, r4, ror #30
   19e90:	andeq	r9, r1, r4, ror #30
   19e94:	andeq	r9, r1, r4, ror #30
   19e98:	andeq	r9, r1, r4, ror #30
   19e9c:	andeq	r9, r1, r4, ror #30
   19ea0:	andeq	r9, r1, r4, ror #30
   19ea4:	andeq	r9, r1, r4, ror #30
   19ea8:	andeq	r9, r1, r4, ror #30
   19eac:	andeq	r9, r1, r4, ror #30
   19eb0:	andeq	r9, r1, r4, ror #30
   19eb4:	andeq	r9, r1, r4, ror #30
   19eb8:	andeq	r9, r1, r4, ror #30
   19ebc:	andeq	r9, r1, r4, ror #30
   19ec0:	andeq	r9, r1, r4, ror #30
   19ec4:	andeq	r9, r1, r4, ror #30
   19ec8:	andeq	r9, r1, r4, ror #30
   19ecc:	andeq	r9, r1, r4, ror #30
   19ed0:	andeq	r9, r1, r4, ror #30
   19ed4:	andeq	sl, r1, r4, rrx
   19ed8:	andeq	sl, r1, ip, lsl #1
   19edc:	andeq	r9, r1, r4, ror #30
   19ee0:	andeq	sl, r1, r4, rrx
   19ee4:	andeq	r9, r1, r4, ror #30
   19ee8:	andeq	sl, r1, r4, rrx
   19eec:	andeq	r9, r1, r4, ror #30
   19ef0:	andeq	r9, r1, r4, ror #30
   19ef4:	andeq	r9, r1, r4, ror #30
   19ef8:	andeq	r9, r1, r4, ror #30
   19efc:	andeq	r9, r1, r4, ror #30
   19f00:	andeq	r9, r1, r4, ror #30
   19f04:	andeq	r9, r1, r4, ror #30
   19f08:	andeq	r9, r1, r4, ror #30
   19f0c:	andeq	r9, r1, r4, ror #30
   19f10:	andeq	r9, r1, r4, ror #30
   19f14:	andeq	r9, r1, r4, ror #30
   19f18:	andeq	r9, r1, r4, ror #30
   19f1c:	andeq	r9, r1, r4, ror #30
   19f20:	andeq	r9, r1, r4, ror #30
   19f24:	andeq	r9, r1, r4, ror #30
   19f28:	andeq	r9, r1, r4, ror #30
   19f2c:	andeq	r9, r1, r4, ror #30
   19f30:	andeq	r9, r1, r4, ror #30
   19f34:	andeq	r9, r1, r4, ror #30
   19f38:	andeq	r9, r1, r4, ror #30
   19f3c:	andeq	r9, r1, r4, ror #30
   19f40:	andeq	r9, r1, r4, ror #30
   19f44:	andeq	r9, r1, r4, ror #30
   19f48:	andeq	r9, r1, r4, ror #30
   19f4c:	andeq	r9, r1, r4, ror #30
   19f50:	andeq	r9, r1, r4, ror #30
   19f54:	andeq	sl, r1, r0, lsr #32
   19f58:	andeq	sl, r1, r4, rrx
   19f5c:	andeq	sl, r1, r0, lsr #32
   19f60:	andeq	sl, r1, ip, asr #32
   19f64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19f68:	tst	r0, #1
   19f6c:	bne	19f98 <__assert_fail@plt+0x86ac>
   19f70:	ldr	r1, [fp, #16]
   19f74:	ubfx	r0, r6, #5, #3
   19f78:	mov	r2, #1
   19f7c:	ldr	r0, [r1, r0, lsl #2]
   19f80:	and	r1, r6, #31
   19f84:	tst	r0, r2, lsl r1
   19f88:	beq	19f98 <__assert_fail@plt+0x86ac>
   19f8c:	mov	r0, r6
   19f90:	mov	r1, r9
   19f94:	b	19fac <__assert_fail@plt+0x86c0>
   19f98:	ldr	r0, [fp, #-52]	; 0xffffffcc
   19f9c:	mov	r1, r9
   19fa0:	cmp	r0, #0
   19fa4:	mov	r0, r6
   19fa8:	beq	1a2ec <__assert_fail@plt+0x8a00>
   19fac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19fb0:	tst	r2, #1
   19fb4:	bne	1a8bc <__assert_fail@plt+0x8fd0>
   19fb8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   19fbc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19fc0:	subs	r2, r2, #2
   19fc4:	movwne	r2, #1
   19fc8:	orr	r2, r2, r3
   19fcc:	tst	r2, #1
   19fd0:	bne	1a00c <__assert_fail@plt+0x8720>
   19fd4:	cmp	r8, r4
   19fd8:	movcc	r2, #39	; 0x27
   19fdc:	strbcc	r2, [r5, r8]
   19fe0:	add	r2, r8, #1
   19fe4:	cmp	r2, r4
   19fe8:	movcc	r3, #36	; 0x24
   19fec:	strbcc	r3, [r5, r2]
   19ff0:	add	r2, r8, #2
   19ff4:	add	r8, r8, #3
   19ff8:	cmp	r2, r4
   19ffc:	movcc	r3, #39	; 0x27
   1a000:	strbcc	r3, [r5, r2]
   1a004:	mov	r2, #1
   1a008:	str	r2, [fp, #-56]	; 0xffffffc8
   1a00c:	cmp	r8, r4
   1a010:	movcc	r2, #92	; 0x5c
   1a014:	strbcc	r2, [r5, r8]
   1a018:	add	r8, r8, #1
   1a01c:	b	1a330 <__assert_fail@plt+0x8a44>
   1a020:	cmp	lr, #1
   1a024:	beq	1a04c <__assert_fail@plt+0x8760>
   1a028:	mov	r9, #0
   1a02c:	cmn	lr, #1
   1a030:	bne	1a058 <__assert_fail@plt+0x876c>
   1a034:	ldrb	r0, [ip, #1]
   1a038:	cmp	r0, #0
   1a03c:	beq	1a04c <__assert_fail@plt+0x8760>
   1a040:	mvn	lr, #0
   1a044:	mov	sl, #0
   1a048:	b	19f64 <__assert_fail@plt+0x8678>
   1a04c:	mov	r9, #0
   1a050:	cmp	r7, #0
   1a054:	beq	1a060 <__assert_fail@plt+0x8774>
   1a058:	mov	sl, #0
   1a05c:	b	19f64 <__assert_fail@plt+0x8678>
   1a060:	mov	r1, #1
   1a064:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a068:	cmp	r0, #2
   1a06c:	bne	1a084 <__assert_fail@plt+0x8798>
   1a070:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a074:	mov	r9, r1
   1a078:	tst	r0, #1
   1a07c:	beq	19f64 <__assert_fail@plt+0x8678>
   1a080:	b	1a8bc <__assert_fail@plt+0x8fd0>
   1a084:	mov	r9, r1
   1a088:	b	19f64 <__assert_fail@plt+0x8678>
   1a08c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a090:	cmp	r0, #2
   1a094:	bne	1a2d0 <__assert_fail@plt+0x89e4>
   1a098:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a09c:	tst	r0, #1
   1a0a0:	bne	1a8bc <__assert_fail@plt+0x8fd0>
   1a0a4:	mov	sl, #0
   1a0a8:	b	1a2e4 <__assert_fail@plt+0x89f8>
   1a0ac:	mov	r0, #102	; 0x66
   1a0b0:	b	1a358 <__assert_fail@plt+0x8a6c>
   1a0b4:	mov	r2, #116	; 0x74
   1a0b8:	b	1a0c8 <__assert_fail@plt+0x87dc>
   1a0bc:	mov	r0, #98	; 0x62
   1a0c0:	b	1a358 <__assert_fail@plt+0x8a6c>
   1a0c4:	mov	r2, #114	; 0x72
   1a0c8:	ldr	r0, [sp, #68]	; 0x44
   1a0cc:	tst	r0, #1
   1a0d0:	mov	r0, r2
   1a0d4:	bne	1a358 <__assert_fail@plt+0x8a6c>
   1a0d8:	b	1a8bc <__assert_fail@plt+0x8fd0>
   1a0dc:	ldr	r0, [sp, #84]	; 0x54
   1a0e0:	tst	r0, #1
   1a0e4:	beq	1a374 <__assert_fail@plt+0x8a88>
   1a0e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a0ec:	tst	r0, #1
   1a0f0:	bne	1a9a8 <__assert_fail@plt+0x90bc>
   1a0f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a0f8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1a0fc:	subs	r0, r0, #2
   1a100:	movwne	r0, #1
   1a104:	orr	r0, r0, r1
   1a108:	tst	r0, #1
   1a10c:	bne	1a148 <__assert_fail@plt+0x885c>
   1a110:	cmp	r8, r4
   1a114:	movcc	r0, #39	; 0x27
   1a118:	strbcc	r0, [r5, r8]
   1a11c:	add	r0, r8, #1
   1a120:	cmp	r0, r4
   1a124:	movcc	r1, #36	; 0x24
   1a128:	strbcc	r1, [r5, r0]
   1a12c:	add	r0, r8, #2
   1a130:	add	r8, r8, #3
   1a134:	cmp	r0, r4
   1a138:	movcc	r1, #39	; 0x27
   1a13c:	strbcc	r1, [r5, r0]
   1a140:	mov	r0, #1
   1a144:	str	r0, [fp, #-56]	; 0xffffffc8
   1a148:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a14c:	cmp	r8, r4
   1a150:	mov	r9, #0
   1a154:	mov	sl, #1
   1a158:	mov	r6, #48	; 0x30
   1a15c:	movcc	r0, #92	; 0x5c
   1a160:	strbcc	r0, [r5, r8]
   1a164:	add	r0, r8, #1
   1a168:	cmp	r1, #2
   1a16c:	beq	1a53c <__assert_fail@plt+0x8c50>
   1a170:	add	r1, r7, #1
   1a174:	cmp	r1, lr
   1a178:	bcs	1a53c <__assert_fail@plt+0x8c50>
   1a17c:	ldrb	r1, [ip, r1]
   1a180:	sub	r1, r1, #48	; 0x30
   1a184:	uxtb	r1, r1
   1a188:	cmp	r1, #9
   1a18c:	bhi	1a53c <__assert_fail@plt+0x8c50>
   1a190:	cmp	r0, r4
   1a194:	movcc	r1, #48	; 0x30
   1a198:	strbcc	r1, [r5, r0]
   1a19c:	add	r0, r8, #2
   1a1a0:	add	r8, r8, #3
   1a1a4:	cmp	r0, r4
   1a1a8:	movcc	r1, #48	; 0x30
   1a1ac:	strbcc	r1, [r5, r0]
   1a1b0:	b	19f64 <__assert_fail@plt+0x8678>
   1a1b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a1b8:	mov	sl, #0
   1a1bc:	mov	r6, #63	; 0x3f
   1a1c0:	cmp	r0, #5
   1a1c4:	beq	1a544 <__assert_fail@plt+0x8c58>
   1a1c8:	cmp	r0, #2
   1a1cc:	bne	1a5ec <__assert_fail@plt+0x8d00>
   1a1d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a1d4:	mov	r9, #0
   1a1d8:	tst	r0, #1
   1a1dc:	beq	19f64 <__assert_fail@plt+0x8678>
   1a1e0:	b	1a8bc <__assert_fail@plt+0x8fd0>
   1a1e4:	mov	r0, #118	; 0x76
   1a1e8:	b	1a358 <__assert_fail@plt+0x8a6c>
   1a1ec:	mov	r0, #1
   1a1f0:	mov	r6, #39	; 0x27
   1a1f4:	str	r0, [sp, #60]	; 0x3c
   1a1f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a1fc:	cmp	r0, #2
   1a200:	bne	1a390 <__assert_fail@plt+0x8aa4>
   1a204:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a208:	tst	r0, #1
   1a20c:	bne	1a8bc <__assert_fail@plt+0x8fd0>
   1a210:	ldr	r2, [sp, #56]	; 0x38
   1a214:	clz	r1, r4
   1a218:	mov	sl, #0
   1a21c:	mov	r9, #1
   1a220:	lsr	r1, r1, #5
   1a224:	cmp	r2, #0
   1a228:	mov	r0, r2
   1a22c:	movwne	r0, #1
   1a230:	orrs	r0, r0, r1
   1a234:	moveq	r2, r4
   1a238:	moveq	r4, r0
   1a23c:	cmp	r8, r4
   1a240:	str	r2, [sp, #56]	; 0x38
   1a244:	movcc	r0, #39	; 0x27
   1a248:	strbcc	r0, [r5, r8]
   1a24c:	add	r0, r8, #1
   1a250:	cmp	r0, r4
   1a254:	movcc	r1, #92	; 0x5c
   1a258:	strbcc	r1, [r5, r0]
   1a25c:	add	r0, r8, #2
   1a260:	add	r8, r8, #3
   1a264:	cmp	r0, r4
   1a268:	movcc	r1, #39	; 0x27
   1a26c:	strbcc	r1, [r5, r0]
   1a270:	mov	r0, #0
   1a274:	str	r0, [fp, #-56]	; 0xffffffc8
   1a278:	b	19f64 <__assert_fail@plt+0x8678>
   1a27c:	ldr	r0, [sp, #40]	; 0x28
   1a280:	str	r4, [sp, #88]	; 0x58
   1a284:	cmp	r0, #1
   1a288:	bne	1a398 <__assert_fail@plt+0x8aac>
   1a28c:	str	lr, [sp, #28]
   1a290:	bl	116e8 <__ctype_b_loc@plt>
   1a294:	ldr	r0, [r0]
   1a298:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a29c:	mov	r2, #1
   1a2a0:	add	r0, r0, r6, lsl #1
   1a2a4:	ldrb	r0, [r0, #1]
   1a2a8:	ubfx	r9, r0, #6, #1
   1a2ac:	ldr	r0, [sp, #52]	; 0x34
   1a2b0:	cmp	r2, #1
   1a2b4:	orr	r0, r9, r0
   1a2b8:	bhi	1a5f4 <__assert_fail@plt+0x8d08>
   1a2bc:	tst	r0, #1
   1a2c0:	beq	1a5f4 <__assert_fail@plt+0x8d08>
   1a2c4:	ldr	lr, [sp, #28]
   1a2c8:	ldr	r4, [sp, #88]	; 0x58
   1a2cc:	b	19f64 <__assert_fail@plt+0x8678>
   1a2d0:	ldr	r1, [sp, #48]	; 0x30
   1a2d4:	mov	sl, #0
   1a2d8:	mov	r0, #92	; 0x5c
   1a2dc:	cmp	r1, #0
   1a2e0:	beq	1a358 <__assert_fail@plt+0x8a6c>
   1a2e4:	mov	r6, #92	; 0x5c
   1a2e8:	mov	r9, #0
   1a2ec:	cmp	sl, #0
   1a2f0:	bne	1a328 <__assert_fail@plt+0x8a3c>
   1a2f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a2f8:	tst	r0, #1
   1a2fc:	beq	1a328 <__assert_fail@plt+0x8a3c>
   1a300:	cmp	r8, r4
   1a304:	movcc	r0, #39	; 0x27
   1a308:	strbcc	r0, [r5, r8]
   1a30c:	add	r0, r8, #1
   1a310:	add	r8, r8, #2
   1a314:	cmp	r0, r4
   1a318:	movcc	r1, #39	; 0x27
   1a31c:	strbcc	r1, [r5, r0]
   1a320:	mov	r0, #0
   1a324:	str	r0, [fp, #-56]	; 0xffffffc8
   1a328:	mov	r1, r9
   1a32c:	mov	r0, r6
   1a330:	cmp	r8, r4
   1a334:	strbcc	r0, [r5, r8]
   1a338:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a33c:	add	r8, r8, #1
   1a340:	and	r0, r0, r1
   1a344:	str	r0, [fp, #-48]	; 0xffffffd0
   1a348:	add	r7, r7, #1
   1a34c:	cmn	lr, #1
   1a350:	bne	19c90 <__assert_fail@plt+0x83a4>
   1a354:	b	19c9c <__assert_fail@plt+0x83b0>
   1a358:	ldr	r1, [sp, #84]	; 0x54
   1a35c:	mov	sl, #0
   1a360:	mov	r9, #0
   1a364:	tst	r1, #1
   1a368:	mov	r1, #0
   1a36c:	beq	19f64 <__assert_fail@plt+0x8678>
   1a370:	b	19fac <__assert_fail@plt+0x86c0>
   1a374:	ldr	r0, [sp, #36]	; 0x24
   1a378:	mov	r6, #0
   1a37c:	mov	sl, #0
   1a380:	mov	r9, #0
   1a384:	cmp	r0, #0
   1a388:	beq	19f64 <__assert_fail@plt+0x8678>
   1a38c:	b	1a348 <__assert_fail@plt+0x8a5c>
   1a390:	mov	r9, #1
   1a394:	b	19f64 <__assert_fail@plt+0x8678>
   1a398:	mov	r0, #0
   1a39c:	cmn	lr, #1
   1a3a0:	sub	r4, fp, #40	; 0x28
   1a3a4:	str	r0, [fp, #-36]	; 0xffffffdc
   1a3a8:	str	r0, [fp, #-40]	; 0xffffffd8
   1a3ac:	bne	1a3c0 <__assert_fail@plt+0x8ad4>
   1a3b0:	mov	r0, ip
   1a3b4:	bl	11718 <strlen@plt>
   1a3b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a3bc:	mov	lr, r0
   1a3c0:	ldr	r0, [sp, #72]	; 0x48
   1a3c4:	mov	r9, #1
   1a3c8:	mov	r2, #0
   1a3cc:	str	lr, [sp, #28]
   1a3d0:	add	r0, r0, r7
   1a3d4:	str	r0, [sp, #20]
   1a3d8:	b	1a41c <__assert_fail@plt+0x8b30>
   1a3dc:	ldr	r5, [sp, #44]	; 0x2c
   1a3e0:	add	r5, r0, r5
   1a3e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a3e8:	bl	115f8 <iswprint@plt>
   1a3ec:	cmp	r0, #0
   1a3f0:	sub	r4, fp, #40	; 0x28
   1a3f4:	movwne	r0, #1
   1a3f8:	and	r9, r9, r0
   1a3fc:	mov	r0, r4
   1a400:	bl	1158c <mbsinit@plt>
   1a404:	mov	r2, r5
   1a408:	ldr	lr, [sp, #28]
   1a40c:	ldr	r5, [fp, #-84]	; 0xffffffac
   1a410:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a414:	cmp	r0, #0
   1a418:	bne	1a2ac <__assert_fail@plt+0x89c0>
   1a41c:	add	r0, r2, r7
   1a420:	str	r2, [sp, #44]	; 0x2c
   1a424:	mov	r3, r4
   1a428:	add	r1, ip, r0
   1a42c:	str	r0, [sp, #24]
   1a430:	sub	r2, lr, r0
   1a434:	sub	r0, fp, #44	; 0x2c
   1a438:	bl	18234 <__assert_fail@plt+0x6948>
   1a43c:	cmp	r0, #0
   1a440:	beq	1a7e4 <__assert_fail@plt+0x8ef8>
   1a444:	cmn	r0, #1
   1a448:	beq	1a7a0 <__assert_fail@plt+0x8eb4>
   1a44c:	ldr	lr, [sp, #28]
   1a450:	cmn	r0, #2
   1a454:	beq	1a7a8 <__assert_fail@plt+0x8ebc>
   1a458:	ldr	r2, [sp, #64]	; 0x40
   1a45c:	ldr	r4, [sp, #88]	; 0x58
   1a460:	ldr	ip, [sp, #84]	; 0x54
   1a464:	cmp	r0, #2
   1a468:	mov	r1, #0
   1a46c:	movwcc	r1, #1
   1a470:	eor	r2, r2, #1
   1a474:	orrs	r1, r2, r1
   1a478:	bne	1a3dc <__assert_fail@plt+0x8af0>
   1a47c:	ldr	r1, [sp, #44]	; 0x2c
   1a480:	ldr	r2, [sp, #20]
   1a484:	add	r1, r2, r1
   1a488:	sub	r2, r0, #1
   1a48c:	b	1a49c <__assert_fail@plt+0x8bb0>
   1a490:	add	r1, r1, #1
   1a494:	subs	r2, r2, #1
   1a498:	beq	1a3dc <__assert_fail@plt+0x8af0>
   1a49c:	ldrb	r3, [r1]
   1a4a0:	sub	r3, r3, #91	; 0x5b
   1a4a4:	cmp	r3, #33	; 0x21
   1a4a8:	bhi	1a490 <__assert_fail@plt+0x8ba4>
   1a4ac:	add	r5, pc, #0
   1a4b0:	ldr	pc, [r5, r3, lsl #2]
   1a4b4:	muleq	r1, r8, r8
   1a4b8:	muleq	r1, r8, r8
   1a4bc:	muleq	r1, r0, r4
   1a4c0:	muleq	r1, r8, r8
   1a4c4:	muleq	r1, r0, r4
   1a4c8:	muleq	r1, r8, r8
   1a4cc:	muleq	r1, r0, r4
   1a4d0:	muleq	r1, r0, r4
   1a4d4:	muleq	r1, r0, r4
   1a4d8:	muleq	r1, r0, r4
   1a4dc:	muleq	r1, r0, r4
   1a4e0:	muleq	r1, r0, r4
   1a4e4:	muleq	r1, r0, r4
   1a4e8:	muleq	r1, r0, r4
   1a4ec:	muleq	r1, r0, r4
   1a4f0:	muleq	r1, r0, r4
   1a4f4:	muleq	r1, r0, r4
   1a4f8:	muleq	r1, r0, r4
   1a4fc:	muleq	r1, r0, r4
   1a500:	muleq	r1, r0, r4
   1a504:	muleq	r1, r0, r4
   1a508:	muleq	r1, r0, r4
   1a50c:	muleq	r1, r0, r4
   1a510:	muleq	r1, r0, r4
   1a514:	muleq	r1, r0, r4
   1a518:	muleq	r1, r0, r4
   1a51c:	muleq	r1, r0, r4
   1a520:	muleq	r1, r0, r4
   1a524:	muleq	r1, r0, r4
   1a528:	muleq	r1, r0, r4
   1a52c:	muleq	r1, r0, r4
   1a530:	muleq	r1, r0, r4
   1a534:	muleq	r1, r0, r4
   1a538:	muleq	r1, r8, r8
   1a53c:	mov	r8, r0
   1a540:	b	19f64 <__assert_fail@plt+0x8678>
   1a544:	ldr	r0, [sp, #32]
   1a548:	cmp	r0, #0
   1a54c:	beq	1a5ec <__assert_fail@plt+0x8d00>
   1a550:	add	r0, r7, #2
   1a554:	cmp	r0, lr
   1a558:	bcs	1a5ec <__assert_fail@plt+0x8d00>
   1a55c:	add	r1, r7, ip
   1a560:	ldrb	r1, [r1, #1]
   1a564:	cmp	r1, #63	; 0x3f
   1a568:	bne	1a5ec <__assert_fail@plt+0x8d00>
   1a56c:	ldrb	r9, [ip, r0]
   1a570:	sub	r2, r9, #33	; 0x21
   1a574:	cmp	r2, #29
   1a578:	bhi	1a5ec <__assert_fail@plt+0x8d00>
   1a57c:	movw	r1, #20929	; 0x51c1
   1a580:	mov	r3, #1
   1a584:	movt	r1, #14336	; 0x3800
   1a588:	tst	r1, r3, lsl r2
   1a58c:	beq	1a5ec <__assert_fail@plt+0x8d00>
   1a590:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1a594:	tst	r1, #1
   1a598:	bne	1a8bc <__assert_fail@plt+0x8fd0>
   1a59c:	cmp	r8, r4
   1a5a0:	add	r2, r8, #1
   1a5a4:	mov	r6, r9
   1a5a8:	mov	r7, r0
   1a5ac:	mov	r9, #0
   1a5b0:	movcc	r1, #63	; 0x3f
   1a5b4:	strbcc	r1, [r5, r8]
   1a5b8:	cmp	r2, r4
   1a5bc:	movcc	r1, #34	; 0x22
   1a5c0:	strbcc	r1, [r5, r2]
   1a5c4:	add	r2, r8, #2
   1a5c8:	cmp	r2, r4
   1a5cc:	movcc	r1, #34	; 0x22
   1a5d0:	strbcc	r1, [r5, r2]
   1a5d4:	add	r2, r8, #3
   1a5d8:	add	r8, r8, #4
   1a5dc:	cmp	r2, r4
   1a5e0:	movcc	r1, #63	; 0x3f
   1a5e4:	strbcc	r1, [r5, r2]
   1a5e8:	b	19f64 <__assert_fail@plt+0x8678>
   1a5ec:	mov	r9, #0
   1a5f0:	b	19f64 <__assert_fail@plt+0x8678>
   1a5f4:	ldr	lr, [sp, #28]
   1a5f8:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1a5fc:	add	r1, r2, r7
   1a600:	mov	r2, #0
   1a604:	str	r1, [sp, #44]	; 0x2c
   1a608:	tst	r0, #1
   1a60c:	bne	1a728 <__assert_fail@plt+0x8e3c>
   1a610:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1a614:	tst	r1, #1
   1a618:	bne	1a8b8 <__assert_fail@plt+0x8fcc>
   1a61c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a620:	subs	r2, r1, #2
   1a624:	movwne	r2, #1
   1a628:	orr	r2, r2, r4
   1a62c:	tst	r2, #1
   1a630:	bne	1a674 <__assert_fail@plt+0x8d88>
   1a634:	ldr	r1, [sp, #88]	; 0x58
   1a638:	add	r2, r8, #1
   1a63c:	mov	r4, #1
   1a640:	cmp	r8, r1
   1a644:	movcc	r1, #39	; 0x27
   1a648:	strbcc	r1, [r5, r8]
   1a64c:	ldr	r1, [sp, #88]	; 0x58
   1a650:	cmp	r2, r1
   1a654:	movcc	r1, #36	; 0x24
   1a658:	strbcc	r1, [r5, r2]
   1a65c:	ldr	r1, [sp, #88]	; 0x58
   1a660:	add	r2, r8, #2
   1a664:	add	r8, r8, #3
   1a668:	cmp	r2, r1
   1a66c:	movcc	r1, #39	; 0x27
   1a670:	strbcc	r1, [r5, r2]
   1a674:	ldr	r1, [sp, #88]	; 0x58
   1a678:	add	r2, r8, #1
   1a67c:	cmp	r8, r1
   1a680:	movcc	r1, #92	; 0x5c
   1a684:	strbcc	r1, [r5, r8]
   1a688:	ldr	r1, [sp, #88]	; 0x58
   1a68c:	cmp	r2, r1
   1a690:	bcs	1a6a4 <__assert_fail@plt+0x8db8>
   1a694:	uxtb	r3, r6
   1a698:	mov	r1, #48	; 0x30
   1a69c:	orr	r3, r1, r3, lsr #6
   1a6a0:	strb	r3, [r5, r2]
   1a6a4:	ldr	r1, [sp, #88]	; 0x58
   1a6a8:	add	r2, r8, #2
   1a6ac:	add	r8, r8, #3
   1a6b0:	cmp	r2, r1
   1a6b4:	lsrcc	r3, r6, #3
   1a6b8:	movcc	r1, #6
   1a6bc:	bficc	r3, r1, #3, #29
   1a6c0:	mov	r1, #6
   1a6c4:	bfi	r6, r1, #3, #29
   1a6c8:	strbcc	r3, [r5, r2]
   1a6cc:	mov	r2, #1
   1a6d0:	b	1a750 <__assert_fail@plt+0x8e64>
   1a6d4:	ldr	r1, [sp, #88]	; 0x58
   1a6d8:	ldr	r5, [fp, #-84]	; 0xffffffac
   1a6dc:	ldr	r4, [sp, #88]	; 0x58
   1a6e0:	cmp	r8, r1
   1a6e4:	movcc	r1, #39	; 0x27
   1a6e8:	strbcc	r1, [r5, r8]
   1a6ec:	add	r1, r8, #1
   1a6f0:	add	r8, r8, #2
   1a6f4:	cmp	r1, r4
   1a6f8:	movcc	r4, #39	; 0x27
   1a6fc:	strbcc	r4, [r5, r1]
   1a700:	mov	r4, #0
   1a704:	ldr	r1, [sp, #88]	; 0x58
   1a708:	cmp	r8, r1
   1a70c:	ldr	r1, [sp, #72]	; 0x48
   1a710:	strbcc	r6, [r5, r8]
   1a714:	add	r8, r8, #1
   1a718:	ldrb	r6, [r1, r7]
   1a71c:	mov	r7, r3
   1a720:	tst	r0, #1
   1a724:	beq	1a610 <__assert_fail@plt+0x8d24>
   1a728:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a72c:	tst	r1, #1
   1a730:	beq	1a748 <__assert_fail@plt+0x8e5c>
   1a734:	ldr	r1, [sp, #88]	; 0x58
   1a738:	cmp	r8, r1
   1a73c:	movcc	r1, #92	; 0x5c
   1a740:	strbcc	r1, [r5, r8]
   1a744:	add	r8, r8, #1
   1a748:	mov	r1, #0
   1a74c:	str	r1, [fp, #-52]	; 0xffffffcc
   1a750:	ldr	r1, [sp, #44]	; 0x2c
   1a754:	add	r3, r7, #1
   1a758:	and	sl, r2, #1
   1a75c:	cmp	r1, r3
   1a760:	bls	1a784 <__assert_fail@plt+0x8e98>
   1a764:	cmp	sl, #0
   1a768:	mvn	r5, r4
   1a76c:	movwne	sl, #1
   1a770:	orr	r5, r5, sl
   1a774:	tst	r5, #1
   1a778:	beq	1a6d4 <__assert_fail@plt+0x8de8>
   1a77c:	ldr	r5, [fp, #-84]	; 0xffffffac
   1a780:	b	1a704 <__assert_fail@plt+0x8e18>
   1a784:	str	r4, [fp, #-56]	; 0xffffffc8
   1a788:	ldr	r4, [sp, #88]	; 0x58
   1a78c:	cmp	sl, #0
   1a790:	movwne	sl, #1
   1a794:	cmp	sl, #0
   1a798:	beq	1a2f4 <__assert_fail@plt+0x8a08>
   1a79c:	b	1a328 <__assert_fail@plt+0x8a3c>
   1a7a0:	mov	r9, #0
   1a7a4:	b	1a7e4 <__assert_fail@plt+0x8ef8>
   1a7a8:	ldr	r0, [sp, #24]
   1a7ac:	mov	r9, #0
   1a7b0:	cmp	lr, r0
   1a7b4:	bls	1a7e4 <__assert_fail@plt+0x8ef8>
   1a7b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a7bc:	ldr	r2, [sp, #44]	; 0x2c
   1a7c0:	add	r0, ip, r7
   1a7c4:	ldrb	r1, [r0, r2]
   1a7c8:	cmp	r1, #0
   1a7cc:	beq	1a2ac <__assert_fail@plt+0x89c0>
   1a7d0:	add	r2, r2, #1
   1a7d4:	add	r1, r7, r2
   1a7d8:	cmp	r1, lr
   1a7dc:	bcc	1a7c4 <__assert_fail@plt+0x8ed8>
   1a7e0:	b	1a2ac <__assert_fail@plt+0x89c0>
   1a7e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a7e8:	ldr	r2, [sp, #44]	; 0x2c
   1a7ec:	b	1a2ac <__assert_fail@plt+0x89c0>
   1a7f0:	mov	lr, r7
   1a7f4:	b	1a7fc <__assert_fail@plt+0x8f10>
   1a7f8:	mvn	lr, #0
   1a7fc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a800:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a804:	eor	r0, r1, #2
   1a808:	orr	r0, r0, r8
   1a80c:	clz	r0, r0
   1a810:	lsr	r0, r0, #5
   1a814:	tst	r2, r0
   1a818:	bne	1a8bc <__assert_fail@plt+0x8fd0>
   1a81c:	subs	r0, r1, #2
   1a820:	movwne	r0, #1
   1a824:	orr	r0, r2, r0
   1a828:	tst	r0, #1
   1a82c:	ldreq	r0, [sp, #60]	; 0x3c
   1a830:	eoreq	r0, r0, #1
   1a834:	tsteq	r0, #1
   1a838:	bne	1a950 <__assert_fail@plt+0x9064>
   1a83c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a840:	mov	sl, lr
   1a844:	tst	r0, #1
   1a848:	bne	1a91c <__assert_fail@plt+0x9030>
   1a84c:	ldr	r6, [sp, #56]	; 0x38
   1a850:	mov	r9, #0
   1a854:	cmp	r6, #0
   1a858:	beq	1a948 <__assert_fail@plt+0x905c>
   1a85c:	ldr	r0, [sp, #84]	; 0x54
   1a860:	mov	r1, #0
   1a864:	mov	r7, #2
   1a868:	cmp	r4, #0
   1a86c:	str	r1, [fp, #-48]	; 0xffffffd0
   1a870:	mov	r1, #0
   1a874:	str	r1, [fp, #-76]	; 0xffffffb4
   1a878:	beq	19a18 <__assert_fail@plt+0x812c>
   1a87c:	b	1a950 <__assert_fail@plt+0x9064>
   1a880:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a884:	ldr	r1, [fp, #12]
   1a888:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a88c:	mov	lr, r4
   1a890:	mov	r4, r6
   1a894:	b	1a8dc <__assert_fail@plt+0x8ff0>
   1a898:	tst	ip, #1
   1a89c:	ldr	r5, [fp, #-84]	; 0xffffffac
   1a8a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a8a4:	ldr	r1, [fp, #12]
   1a8a8:	mov	r0, #2
   1a8ac:	movwne	r0, #4
   1a8b0:	mov	r2, r0
   1a8b4:	b	1a8dc <__assert_fail@plt+0x8ff0>
   1a8b8:	ldr	r4, [sp, #88]	; 0x58
   1a8bc:	ldr	r1, [sp, #84]	; 0x54
   1a8c0:	mov	r0, #2
   1a8c4:	tst	r1, #1
   1a8c8:	movwne	r0, #4
   1a8cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a8d0:	ldr	r1, [fp, #12]
   1a8d4:	cmp	r2, #2
   1a8d8:	moveq	r2, r0
   1a8dc:	mov	r0, #0
   1a8e0:	bic	r1, r1, #2
   1a8e4:	str	r2, [sp]
   1a8e8:	mov	r2, ip
   1a8ec:	mov	r3, lr
   1a8f0:	str	r0, [sp, #8]
   1a8f4:	ldr	r0, [sp, #76]	; 0x4c
   1a8f8:	str	r1, [sp, #4]
   1a8fc:	mov	r1, r4
   1a900:	str	r0, [sp, #12]
   1a904:	ldr	r0, [sp, #80]	; 0x50
   1a908:	str	r0, [sp, #16]
   1a90c:	mov	r0, r5
   1a910:	bl	19988 <__assert_fail@plt+0x809c>
   1a914:	mov	r8, r0
   1a918:	b	1a99c <__assert_fail@plt+0x90b0>
   1a91c:	mov	r0, #5
   1a920:	ldr	r1, [sp, #56]	; 0x38
   1a924:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1a928:	mov	r3, sl
   1a92c:	str	r0, [sp]
   1a930:	ldr	r0, [fp, #12]
   1a934:	str	r0, [sp, #4]
   1a938:	ldr	r0, [fp, #16]
   1a93c:	str	r0, [sp, #8]
   1a940:	ldr	r0, [sp, #76]	; 0x4c
   1a944:	b	1a900 <__assert_fail@plt+0x9014>
   1a948:	mov	r0, #0
   1a94c:	str	r0, [fp, #-76]	; 0xffffffb4
   1a950:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1a954:	cmp	r1, #0
   1a958:	beq	1a990 <__assert_fail@plt+0x90a4>
   1a95c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a960:	tst	r0, #1
   1a964:	bne	1a990 <__assert_fail@plt+0x90a4>
   1a968:	ldrb	r0, [r1]
   1a96c:	cmp	r0, #0
   1a970:	beq	1a990 <__assert_fail@plt+0x90a4>
   1a974:	add	r1, r1, #1
   1a978:	cmp	r8, r4
   1a97c:	strbcc	r0, [r5, r8]
   1a980:	add	r8, r8, #1
   1a984:	ldrb	r0, [r1], #1
   1a988:	cmp	r0, #0
   1a98c:	bne	1a978 <__assert_fail@plt+0x908c>
   1a990:	cmp	r8, r4
   1a994:	movcc	r0, #0
   1a998:	strbcc	r0, [r5, r8]
   1a99c:	mov	r0, r8
   1a9a0:	sub	sp, fp, #28
   1a9a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9a8:	mov	r0, #4
   1a9ac:	b	1a8cc <__assert_fail@plt+0x8fe0>
   1a9b0:	bl	118bc <abort@plt>
   1a9b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9b8:	add	fp, sp, #28
   1a9bc:	sub	sp, sp, #28
   1a9c0:	movw	r5, #5064	; 0x13c8
   1a9c4:	cmp	r2, #0
   1a9c8:	mov	r4, r1
   1a9cc:	mov	r7, r0
   1a9d0:	str	r0, [sp, #20]
   1a9d4:	movt	r5, #3
   1a9d8:	movne	r5, r2
   1a9dc:	bl	11748 <__errno_location@plt>
   1a9e0:	mov	sl, r0
   1a9e4:	ldr	r2, [r5, #40]	; 0x28
   1a9e8:	ldr	r3, [r5, #44]	; 0x2c
   1a9ec:	ldm	r5, {r0, r1}
   1a9f0:	orr	r8, r1, #1
   1a9f4:	add	r9, r5, #8
   1a9f8:	mov	r1, #0
   1a9fc:	ldr	r6, [sl]
   1aa00:	stm	sp, {r0, r8, r9}
   1aa04:	mov	r0, #0
   1aa08:	str	r2, [sp, #12]
   1aa0c:	str	r3, [sp, #16]
   1aa10:	mov	r2, r7
   1aa14:	mov	r3, r4
   1aa18:	str	r6, [sp, #24]
   1aa1c:	mov	r6, r4
   1aa20:	bl	19988 <__assert_fail@plt+0x809c>
   1aa24:	add	r7, r0, #1
   1aa28:	mov	r0, r7
   1aa2c:	bl	1bdf8 <__assert_fail@plt+0xa50c>
   1aa30:	mov	r4, r0
   1aa34:	ldr	r0, [r5]
   1aa38:	ldr	r2, [r5, #44]	; 0x2c
   1aa3c:	ldr	r1, [r5, #40]	; 0x28
   1aa40:	mov	r3, r6
   1aa44:	stm	sp, {r0, r8, r9}
   1aa48:	str	r2, [sp, #16]
   1aa4c:	ldr	r2, [sp, #20]
   1aa50:	str	r1, [sp, #12]
   1aa54:	mov	r0, r4
   1aa58:	mov	r1, r7
   1aa5c:	bl	19988 <__assert_fail@plt+0x809c>
   1aa60:	ldr	r0, [sp, #24]
   1aa64:	str	r0, [sl]
   1aa68:	mov	r0, r4
   1aa6c:	sub	sp, fp, #28
   1aa70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa78:	add	fp, sp, #28
   1aa7c:	sub	sp, sp, #36	; 0x24
   1aa80:	movw	r8, #5064	; 0x13c8
   1aa84:	cmp	r3, #0
   1aa88:	mov	r4, r2
   1aa8c:	str	r2, [sp, #24]
   1aa90:	mov	r5, r1
   1aa94:	mov	r6, r0
   1aa98:	str	r0, [sp, #20]
   1aa9c:	movt	r8, #3
   1aaa0:	movne	r8, r3
   1aaa4:	bl	11748 <__errno_location@plt>
   1aaa8:	str	r0, [sp, #28]
   1aaac:	ldr	r1, [r8, #40]	; 0x28
   1aab0:	ldr	r2, [r8, #44]	; 0x2c
   1aab4:	ldr	r7, [r0]
   1aab8:	cmp	r4, #0
   1aabc:	add	sl, r8, #8
   1aac0:	mov	r0, #0
   1aac4:	ldm	r8, {r3, r9}
   1aac8:	orreq	r9, r9, #1
   1aacc:	stm	sp, {r3, r9, sl}
   1aad0:	str	r1, [sp, #12]
   1aad4:	str	r2, [sp, #16]
   1aad8:	mov	r1, #0
   1aadc:	mov	r2, r6
   1aae0:	mov	r3, r5
   1aae4:	str	r7, [sp, #32]
   1aae8:	mov	r7, r5
   1aaec:	bl	19988 <__assert_fail@plt+0x809c>
   1aaf0:	add	r4, r0, #1
   1aaf4:	mov	r5, r0
   1aaf8:	mov	r0, r4
   1aafc:	bl	1bdf8 <__assert_fail@plt+0xa50c>
   1ab00:	mov	r6, r0
   1ab04:	ldr	r0, [r8]
   1ab08:	ldr	r2, [r8, #44]	; 0x2c
   1ab0c:	ldr	r1, [r8, #40]	; 0x28
   1ab10:	mov	r3, r7
   1ab14:	stm	sp, {r0, r9, sl}
   1ab18:	str	r2, [sp, #16]
   1ab1c:	ldr	r2, [sp, #20]
   1ab20:	str	r1, [sp, #12]
   1ab24:	mov	r0, r6
   1ab28:	mov	r1, r4
   1ab2c:	bl	19988 <__assert_fail@plt+0x809c>
   1ab30:	ldr	r0, [sp, #24]
   1ab34:	ldr	r1, [sp, #32]
   1ab38:	ldr	r2, [sp, #28]
   1ab3c:	cmp	r0, #0
   1ab40:	str	r1, [r2]
   1ab44:	strne	r5, [r0]
   1ab48:	mov	r0, r6
   1ab4c:	sub	sp, fp, #28
   1ab50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ab58:	add	fp, sp, #24
   1ab5c:	movw	r5, #4828	; 0x12dc
   1ab60:	movw	r8, #4824	; 0x12d8
   1ab64:	movt	r5, #3
   1ab68:	movt	r8, #3
   1ab6c:	ldr	r0, [r5]
   1ab70:	ldr	r4, [r8]
   1ab74:	cmp	r0, #2
   1ab78:	blt	1aba4 <__assert_fail@plt+0x92b8>
   1ab7c:	add	r7, r4, #12
   1ab80:	mov	r6, #0
   1ab84:	ldr	r0, [r7, r6, lsl #3]
   1ab88:	bl	16040 <__assert_fail@plt+0x4754>
   1ab8c:	ldr	r1, [r5]
   1ab90:	add	r2, r6, #2
   1ab94:	add	r0, r6, #1
   1ab98:	mov	r6, r0
   1ab9c:	cmp	r2, r1
   1aba0:	blt	1ab84 <__assert_fail@plt+0x9298>
   1aba4:	ldr	r0, [r4, #4]
   1aba8:	movw	r9, #5112	; 0x13f8
   1abac:	movw	r7, #4832	; 0x12e0
   1abb0:	movt	r9, #3
   1abb4:	movt	r7, #3
   1abb8:	cmp	r0, r9
   1abbc:	beq	1abcc <__assert_fail@plt+0x92e0>
   1abc0:	bl	16040 <__assert_fail@plt+0x4754>
   1abc4:	mov	r0, #256	; 0x100
   1abc8:	stm	r7, {r0, r9}
   1abcc:	cmp	r4, r7
   1abd0:	beq	1abe0 <__assert_fail@plt+0x92f4>
   1abd4:	mov	r0, r4
   1abd8:	bl	16040 <__assert_fail@plt+0x4754>
   1abdc:	str	r7, [r8]
   1abe0:	mov	r0, #1
   1abe4:	str	r0, [r5]
   1abe8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1abec:	movw	r3, #5064	; 0x13c8
   1abf0:	mvn	r2, #0
   1abf4:	movt	r3, #3
   1abf8:	b	1abfc <__assert_fail@plt+0x9310>
   1abfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac00:	add	fp, sp, #28
   1ac04:	sub	sp, sp, #44	; 0x2c
   1ac08:	mov	r7, r3
   1ac0c:	str	r2, [sp, #36]	; 0x24
   1ac10:	str	r1, [sp, #32]
   1ac14:	mov	r5, r0
   1ac18:	bl	11748 <__errno_location@plt>
   1ac1c:	cmp	r5, #0
   1ac20:	bmi	1ad90 <__assert_fail@plt+0x94a4>
   1ac24:	cmn	r5, #-2147483647	; 0x80000001
   1ac28:	beq	1ad90 <__assert_fail@plt+0x94a4>
   1ac2c:	movw	r8, #4828	; 0x12dc
   1ac30:	movw	r4, #4824	; 0x12d8
   1ac34:	str	r0, [sp, #28]
   1ac38:	ldr	r0, [r0]
   1ac3c:	movt	r8, #3
   1ac40:	movt	r4, #3
   1ac44:	ldr	r1, [r8]
   1ac48:	ldr	r6, [r4]
   1ac4c:	str	r0, [sp, #24]
   1ac50:	cmp	r1, r5
   1ac54:	ble	1ac60 <__assert_fail@plt+0x9374>
   1ac58:	mov	sl, r6
   1ac5c:	b	1accc <__assert_fail@plt+0x93e0>
   1ac60:	movw	r9, #4832	; 0x12e0
   1ac64:	mov	r0, #8
   1ac68:	str	r1, [fp, #-32]	; 0xffffffe0
   1ac6c:	sub	r1, r5, r1
   1ac70:	mvn	r3, #-2147483648	; 0x80000000
   1ac74:	movt	r9, #3
   1ac78:	str	r0, [sp]
   1ac7c:	add	r2, r1, #1
   1ac80:	sub	r1, fp, #32
   1ac84:	subs	r0, r6, r9
   1ac88:	movne	r0, r6
   1ac8c:	bl	1bff8 <__assert_fail@plt+0xa70c>
   1ac90:	mov	sl, r0
   1ac94:	cmp	r6, r9
   1ac98:	str	r0, [r4]
   1ac9c:	bne	1aca8 <__assert_fail@plt+0x93bc>
   1aca0:	ldrd	r0, [r9]
   1aca4:	stm	sl, {r0, r1}
   1aca8:	ldr	r1, [r8]
   1acac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1acb0:	add	r0, sl, r1, lsl #3
   1acb4:	sub	r1, r2, r1
   1acb8:	lsl	r2, r1, #3
   1acbc:	mov	r1, #0
   1acc0:	bl	1176c <memset@plt>
   1acc4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1acc8:	str	r0, [r8]
   1accc:	mov	r9, sl
   1acd0:	ldm	r7, {r0, r1}
   1acd4:	orr	r8, r1, #1
   1acd8:	add	r1, r7, #8
   1acdc:	ldr	r2, [r7, #40]	; 0x28
   1ace0:	ldr	r3, [r7, #44]	; 0x2c
   1ace4:	ldr	r6, [r9, r5, lsl #3]!
   1ace8:	str	r1, [sp, #20]
   1acec:	ldr	r4, [r9, #4]!
   1acf0:	stm	sp, {r0, r8}
   1acf4:	add	r0, sp, #8
   1acf8:	stm	r0, {r1, r2, r3}
   1acfc:	ldr	r2, [sp, #32]
   1ad00:	ldr	r3, [sp, #36]	; 0x24
   1ad04:	mov	r1, r6
   1ad08:	mov	r0, r4
   1ad0c:	bl	19988 <__assert_fail@plt+0x809c>
   1ad10:	cmp	r6, r0
   1ad14:	bhi	1ad78 <__assert_fail@plt+0x948c>
   1ad18:	add	r6, r0, #1
   1ad1c:	movw	r0, #5112	; 0x13f8
   1ad20:	movt	r0, #3
   1ad24:	str	r6, [sl, r5, lsl #3]
   1ad28:	cmp	r4, r0
   1ad2c:	beq	1ad38 <__assert_fail@plt+0x944c>
   1ad30:	mov	r0, r4
   1ad34:	bl	16040 <__assert_fail@plt+0x4754>
   1ad38:	mov	r0, r6
   1ad3c:	bl	1bdf8 <__assert_fail@plt+0xa50c>
   1ad40:	str	r0, [r9]
   1ad44:	mov	r4, r0
   1ad48:	add	r3, sp, #8
   1ad4c:	ldr	r0, [r7]
   1ad50:	ldr	r1, [r7, #40]	; 0x28
   1ad54:	ldr	r2, [r7, #44]	; 0x2c
   1ad58:	stm	sp, {r0, r8}
   1ad5c:	ldr	r0, [sp, #20]
   1ad60:	stm	r3, {r0, r1, r2}
   1ad64:	ldr	r2, [sp, #32]
   1ad68:	ldr	r3, [sp, #36]	; 0x24
   1ad6c:	mov	r0, r4
   1ad70:	mov	r1, r6
   1ad74:	bl	19988 <__assert_fail@plt+0x809c>
   1ad78:	ldr	r0, [sp, #28]
   1ad7c:	ldr	r1, [sp, #24]
   1ad80:	str	r1, [r0]
   1ad84:	mov	r0, r4
   1ad88:	sub	sp, fp, #28
   1ad8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad90:	bl	118bc <abort@plt>
   1ad94:	movw	r3, #5064	; 0x13c8
   1ad98:	movt	r3, #3
   1ad9c:	b	1abfc <__assert_fail@plt+0x9310>
   1ada0:	movw	r3, #5064	; 0x13c8
   1ada4:	mov	r1, r0
   1ada8:	mov	r0, #0
   1adac:	mvn	r2, #0
   1adb0:	movt	r3, #3
   1adb4:	b	1abfc <__assert_fail@plt+0x9310>
   1adb8:	movw	r3, #5064	; 0x13c8
   1adbc:	mov	r2, r1
   1adc0:	mov	r1, r0
   1adc4:	mov	r0, #0
   1adc8:	movt	r3, #3
   1adcc:	b	1abfc <__assert_fail@plt+0x9310>
   1add0:	push	{fp, lr}
   1add4:	mov	fp, sp
   1add8:	sub	sp, sp, #48	; 0x30
   1addc:	vmov.i32	q8, #0	; 0x00000000
   1ade0:	mov	ip, #32
   1ade4:	mov	r3, sp
   1ade8:	mov	lr, r2
   1adec:	cmp	r1, #10
   1adf0:	add	r2, r3, #16
   1adf4:	vst1.64	{d16-d17}, [r3], ip
   1adf8:	vst1.64	{d16-d17}, [r2]
   1adfc:	vst1.64	{d16-d17}, [r3]
   1ae00:	beq	1ae20 <__assert_fail@plt+0x9534>
   1ae04:	str	r1, [sp]
   1ae08:	mov	r3, sp
   1ae0c:	mov	r1, lr
   1ae10:	mvn	r2, #0
   1ae14:	bl	1abfc <__assert_fail@plt+0x9310>
   1ae18:	mov	sp, fp
   1ae1c:	pop	{fp, pc}
   1ae20:	bl	118bc <abort@plt>
   1ae24:	push	{r4, sl, fp, lr}
   1ae28:	add	fp, sp, #8
   1ae2c:	sub	sp, sp, #48	; 0x30
   1ae30:	vmov.i32	q8, #0	; 0x00000000
   1ae34:	mov	ip, r3
   1ae38:	mov	r3, sp
   1ae3c:	mov	lr, #32
   1ae40:	cmp	r1, #10
   1ae44:	add	r4, r3, #16
   1ae48:	vst1.64	{d16-d17}, [r3], lr
   1ae4c:	vst1.64	{d16-d17}, [r4]
   1ae50:	vst1.64	{d16-d17}, [r3]
   1ae54:	beq	1ae74 <__assert_fail@plt+0x9588>
   1ae58:	str	r1, [sp]
   1ae5c:	mov	r1, r2
   1ae60:	mov	r3, sp
   1ae64:	mov	r2, ip
   1ae68:	bl	1abfc <__assert_fail@plt+0x9310>
   1ae6c:	sub	sp, fp, #8
   1ae70:	pop	{r4, sl, fp, pc}
   1ae74:	bl	118bc <abort@plt>
   1ae78:	push	{fp, lr}
   1ae7c:	mov	fp, sp
   1ae80:	sub	sp, sp, #48	; 0x30
   1ae84:	vmov.i32	q8, #0	; 0x00000000
   1ae88:	mov	r3, sp
   1ae8c:	mov	ip, #32
   1ae90:	cmp	r0, #10
   1ae94:	add	r2, r3, #16
   1ae98:	vst1.64	{d16-d17}, [r3], ip
   1ae9c:	vst1.64	{d16-d17}, [r2]
   1aea0:	vst1.64	{d16-d17}, [r3]
   1aea4:	beq	1aec4 <__assert_fail@plt+0x95d8>
   1aea8:	str	r0, [sp]
   1aeac:	mov	r3, sp
   1aeb0:	mov	r0, #0
   1aeb4:	mvn	r2, #0
   1aeb8:	bl	1abfc <__assert_fail@plt+0x9310>
   1aebc:	mov	sp, fp
   1aec0:	pop	{fp, pc}
   1aec4:	bl	118bc <abort@plt>
   1aec8:	push	{fp, lr}
   1aecc:	mov	fp, sp
   1aed0:	sub	sp, sp, #48	; 0x30
   1aed4:	vmov.i32	q8, #0	; 0x00000000
   1aed8:	mov	r3, sp
   1aedc:	mov	ip, #32
   1aee0:	cmp	r0, #10
   1aee4:	add	lr, r3, #16
   1aee8:	vst1.64	{d16-d17}, [r3], ip
   1aeec:	vst1.64	{d16-d17}, [lr]
   1aef0:	vst1.64	{d16-d17}, [r3]
   1aef4:	beq	1af10 <__assert_fail@plt+0x9624>
   1aef8:	str	r0, [sp]
   1aefc:	mov	r3, sp
   1af00:	mov	r0, #0
   1af04:	bl	1abfc <__assert_fail@plt+0x9310>
   1af08:	mov	sp, fp
   1af0c:	pop	{fp, pc}
   1af10:	bl	118bc <abort@plt>
   1af14:	push	{r4, sl, fp, lr}
   1af18:	add	fp, sp, #8
   1af1c:	sub	sp, sp, #48	; 0x30
   1af20:	mov	lr, r0
   1af24:	movw	r0, #5064	; 0x13c8
   1af28:	mov	ip, r1
   1af2c:	mov	r1, #32
   1af30:	mov	r4, #1
   1af34:	movt	r0, #3
   1af38:	add	r3, r0, #16
   1af3c:	vld1.64	{d16-d17}, [r0], r1
   1af40:	vld1.64	{d20-d21}, [r0]
   1af44:	vld1.64	{d18-d19}, [r3]
   1af48:	mov	r3, sp
   1af4c:	add	r0, r3, #32
   1af50:	add	r1, r3, #16
   1af54:	vst1.64	{d20-d21}, [r0]
   1af58:	mov	r0, #28
   1af5c:	vst1.64	{d18-d19}, [r1]
   1af60:	mov	r1, r3
   1af64:	and	r0, r0, r2, lsr #3
   1af68:	and	r2, r2, #31
   1af6c:	vst1.64	{d16-d17}, [r1], r0
   1af70:	ldr	r0, [r1, #8]
   1af74:	bic	r4, r4, r0, lsr r2
   1af78:	eor	r0, r0, r4, lsl r2
   1af7c:	mov	r2, ip
   1af80:	str	r0, [r1, #8]
   1af84:	mov	r0, #0
   1af88:	mov	r1, lr
   1af8c:	bl	1abfc <__assert_fail@plt+0x9310>
   1af90:	sub	sp, fp, #8
   1af94:	pop	{r4, sl, fp, pc}
   1af98:	push	{fp, lr}
   1af9c:	mov	fp, sp
   1afa0:	sub	sp, sp, #48	; 0x30
   1afa4:	mov	ip, r0
   1afa8:	movw	r0, #5064	; 0x13c8
   1afac:	mov	r2, #32
   1afb0:	movt	r0, #3
   1afb4:	add	r3, r0, #16
   1afb8:	vld1.64	{d16-d17}, [r0], r2
   1afbc:	vld1.64	{d20-d21}, [r0]
   1afc0:	vld1.64	{d18-d19}, [r3]
   1afc4:	mov	r3, sp
   1afc8:	add	r0, r3, #32
   1afcc:	add	r2, r3, #16
   1afd0:	vst1.64	{d20-d21}, [r0]
   1afd4:	mov	r0, #28
   1afd8:	vst1.64	{d18-d19}, [r2]
   1afdc:	mov	r2, r3
   1afe0:	and	r0, r0, r1, lsr #3
   1afe4:	and	r1, r1, #31
   1afe8:	vst1.64	{d16-d17}, [r2], r0
   1afec:	mov	r0, #1
   1aff0:	ldr	lr, [r2, #8]
   1aff4:	bic	r0, r0, lr, lsr r1
   1aff8:	eor	r0, lr, r0, lsl r1
   1affc:	mov	r1, ip
   1b000:	str	r0, [r2, #8]
   1b004:	mov	r0, #0
   1b008:	mvn	r2, #0
   1b00c:	bl	1abfc <__assert_fail@plt+0x9310>
   1b010:	mov	sp, fp
   1b014:	pop	{fp, pc}
   1b018:	push	{fp, lr}
   1b01c:	mov	fp, sp
   1b020:	sub	sp, sp, #48	; 0x30
   1b024:	mov	r1, r0
   1b028:	movw	r0, #5064	; 0x13c8
   1b02c:	mov	r3, #32
   1b030:	movt	r0, #3
   1b034:	add	r2, r0, #16
   1b038:	vld1.64	{d16-d17}, [r0], r3
   1b03c:	mov	r3, sp
   1b040:	vld1.64	{d18-d19}, [r2]
   1b044:	vld1.64	{d20-d21}, [r0]
   1b048:	add	r2, r3, #16
   1b04c:	add	r0, r3, #32
   1b050:	vst1.64	{d18-d19}, [r2]
   1b054:	vst1.64	{d20-d21}, [r0]
   1b058:	mov	r0, #12
   1b05c:	mov	r2, r3
   1b060:	vst1.64	{d16-d17}, [r2], r0
   1b064:	ldr	r0, [r2]
   1b068:	orr	r0, r0, #67108864	; 0x4000000
   1b06c:	str	r0, [r2]
   1b070:	mov	r0, #0
   1b074:	mvn	r2, #0
   1b078:	bl	1abfc <__assert_fail@plt+0x9310>
   1b07c:	mov	sp, fp
   1b080:	pop	{fp, pc}
   1b084:	push	{fp, lr}
   1b088:	mov	fp, sp
   1b08c:	sub	sp, sp, #48	; 0x30
   1b090:	mov	ip, r1
   1b094:	mov	r1, r0
   1b098:	movw	r0, #5064	; 0x13c8
   1b09c:	mov	r2, #32
   1b0a0:	movt	r0, #3
   1b0a4:	add	r3, r0, #16
   1b0a8:	vld1.64	{d16-d17}, [r0], r2
   1b0ac:	vld1.64	{d18-d19}, [r3]
   1b0b0:	vld1.64	{d20-d21}, [r0]
   1b0b4:	mov	r3, sp
   1b0b8:	add	r2, r3, #16
   1b0bc:	add	r0, r3, #32
   1b0c0:	vst1.64	{d18-d19}, [r2]
   1b0c4:	vst1.64	{d20-d21}, [r0]
   1b0c8:	mov	r0, #12
   1b0cc:	mov	r2, r3
   1b0d0:	vst1.64	{d16-d17}, [r2], r0
   1b0d4:	ldr	r0, [r2]
   1b0d8:	orr	r0, r0, #67108864	; 0x4000000
   1b0dc:	str	r0, [r2]
   1b0e0:	mov	r0, #0
   1b0e4:	mov	r2, ip
   1b0e8:	bl	1abfc <__assert_fail@plt+0x9310>
   1b0ec:	mov	sp, fp
   1b0f0:	pop	{fp, pc}
   1b0f4:	push	{r4, sl, fp, lr}
   1b0f8:	add	fp, sp, #8
   1b0fc:	sub	sp, sp, #96	; 0x60
   1b100:	vmov.i32	q8, #0	; 0x00000000
   1b104:	mov	ip, r2
   1b108:	mov	r2, sp
   1b10c:	mov	r4, #28
   1b110:	cmp	r1, #10
   1b114:	mov	r3, r2
   1b118:	add	lr, r2, #16
   1b11c:	vst1.64	{d16-d17}, [r3], r4
   1b120:	vst1.64	{d16-d17}, [lr]
   1b124:	vst1.32	{d16-d17}, [r3]
   1b128:	beq	1b178 <__assert_fail@plt+0x988c>
   1b12c:	vld1.64	{d16-d17}, [r2], r4
   1b130:	vld1.64	{d18-d19}, [lr]
   1b134:	add	r3, sp, #48	; 0x30
   1b138:	vld1.32	{d20-d21}, [r2]
   1b13c:	add	r2, r3, #20
   1b140:	add	r4, r3, #4
   1b144:	vst1.32	{d18-d19}, [r2]
   1b148:	add	r2, r3, #32
   1b14c:	vst1.32	{d16-d17}, [r4]
   1b150:	vst1.32	{d20-d21}, [r2]
   1b154:	str	r1, [sp, #48]	; 0x30
   1b158:	mvn	r2, #0
   1b15c:	ldr	r1, [sp, #60]	; 0x3c
   1b160:	orr	r1, r1, #67108864	; 0x4000000
   1b164:	str	r1, [sp, #60]	; 0x3c
   1b168:	mov	r1, ip
   1b16c:	bl	1abfc <__assert_fail@plt+0x9310>
   1b170:	sub	sp, fp, #8
   1b174:	pop	{r4, sl, fp, pc}
   1b178:	bl	118bc <abort@plt>
   1b17c:	push	{r4, r5, r6, sl, fp, lr}
   1b180:	add	fp, sp, #16
   1b184:	sub	sp, sp, #48	; 0x30
   1b188:	mov	ip, r3
   1b18c:	movw	r3, #5064	; 0x13c8
   1b190:	mov	r6, #32
   1b194:	cmp	r1, #0
   1b198:	mov	r4, sp
   1b19c:	movt	r3, #3
   1b1a0:	cmpne	r2, #0
   1b1a4:	add	r5, r4, #16
   1b1a8:	add	lr, r3, #16
   1b1ac:	vld1.64	{d16-d17}, [r3], r6
   1b1b0:	vld1.64	{d18-d19}, [lr]
   1b1b4:	vld1.64	{d20-d21}, [r3]
   1b1b8:	mov	r3, #10
   1b1bc:	vst1.64	{d16-d17}, [r4], r6
   1b1c0:	vst1.64	{d18-d19}, [r5]
   1b1c4:	vst1.64	{d20-d21}, [r4]
   1b1c8:	str	r3, [sp]
   1b1cc:	bne	1b1d4 <__assert_fail@plt+0x98e8>
   1b1d0:	bl	118bc <abort@plt>
   1b1d4:	str	r2, [sp, #44]	; 0x2c
   1b1d8:	str	r1, [sp, #40]	; 0x28
   1b1dc:	mov	r3, sp
   1b1e0:	mov	r1, ip
   1b1e4:	mvn	r2, #0
   1b1e8:	bl	1abfc <__assert_fail@plt+0x9310>
   1b1ec:	sub	sp, fp, #16
   1b1f0:	pop	{r4, r5, r6, sl, fp, pc}
   1b1f4:	push	{r4, r5, r6, sl, fp, lr}
   1b1f8:	add	fp, sp, #16
   1b1fc:	sub	sp, sp, #48	; 0x30
   1b200:	mov	lr, r3
   1b204:	movw	r3, #5064	; 0x13c8
   1b208:	mov	r6, #32
   1b20c:	cmp	r1, #0
   1b210:	mov	r4, sp
   1b214:	movt	r3, #3
   1b218:	cmpne	r2, #0
   1b21c:	add	r5, r4, #16
   1b220:	add	ip, r3, #16
   1b224:	vld1.64	{d16-d17}, [r3], r6
   1b228:	vld1.64	{d18-d19}, [ip]
   1b22c:	vld1.64	{d20-d21}, [r3]
   1b230:	mov	r3, #10
   1b234:	vst1.64	{d16-d17}, [r4], r6
   1b238:	vst1.64	{d18-d19}, [r5]
   1b23c:	vst1.64	{d20-d21}, [r4]
   1b240:	str	r3, [sp]
   1b244:	bne	1b24c <__assert_fail@plt+0x9960>
   1b248:	bl	118bc <abort@plt>
   1b24c:	ldr	ip, [fp, #8]
   1b250:	str	r2, [sp, #44]	; 0x2c
   1b254:	str	r1, [sp, #40]	; 0x28
   1b258:	mov	r3, sp
   1b25c:	mov	r1, lr
   1b260:	mov	r2, ip
   1b264:	bl	1abfc <__assert_fail@plt+0x9310>
   1b268:	sub	sp, fp, #16
   1b26c:	pop	{r4, r5, r6, sl, fp, pc}
   1b270:	push	{r4, sl, fp, lr}
   1b274:	add	fp, sp, #8
   1b278:	sub	sp, sp, #48	; 0x30
   1b27c:	movw	r3, #5064	; 0x13c8
   1b280:	mov	lr, #32
   1b284:	mov	ip, r2
   1b288:	cmp	r0, #0
   1b28c:	movt	r3, #3
   1b290:	cmpne	r1, #0
   1b294:	add	r2, r3, #16
   1b298:	vld1.64	{d16-d17}, [r3], lr
   1b29c:	vld1.64	{d20-d21}, [r3]
   1b2a0:	vld1.64	{d18-d19}, [r2]
   1b2a4:	mov	r2, sp
   1b2a8:	add	r4, r2, #16
   1b2ac:	vst1.64	{d16-d17}, [r2], lr
   1b2b0:	vst1.64	{d20-d21}, [r2]
   1b2b4:	mov	r2, #10
   1b2b8:	vst1.64	{d18-d19}, [r4]
   1b2bc:	str	r2, [sp]
   1b2c0:	bne	1b2c8 <__assert_fail@plt+0x99dc>
   1b2c4:	bl	118bc <abort@plt>
   1b2c8:	str	r1, [sp, #44]	; 0x2c
   1b2cc:	str	r0, [sp, #40]	; 0x28
   1b2d0:	mov	r3, sp
   1b2d4:	mov	r0, #0
   1b2d8:	mov	r1, ip
   1b2dc:	mvn	r2, #0
   1b2e0:	bl	1abfc <__assert_fail@plt+0x9310>
   1b2e4:	sub	sp, fp, #8
   1b2e8:	pop	{r4, sl, fp, pc}
   1b2ec:	push	{r4, r5, fp, lr}
   1b2f0:	add	fp, sp, #8
   1b2f4:	sub	sp, sp, #48	; 0x30
   1b2f8:	mov	ip, r3
   1b2fc:	movw	r3, #5064	; 0x13c8
   1b300:	mov	r4, #32
   1b304:	mov	lr, r2
   1b308:	cmp	r0, #0
   1b30c:	movt	r3, #3
   1b310:	cmpne	r1, #0
   1b314:	add	r2, r3, #16
   1b318:	vld1.64	{d16-d17}, [r3], r4
   1b31c:	vld1.64	{d20-d21}, [r3]
   1b320:	vld1.64	{d18-d19}, [r2]
   1b324:	mov	r2, sp
   1b328:	add	r5, r2, #16
   1b32c:	vst1.64	{d16-d17}, [r2], r4
   1b330:	vst1.64	{d20-d21}, [r2]
   1b334:	mov	r2, #10
   1b338:	vst1.64	{d18-d19}, [r5]
   1b33c:	str	r2, [sp]
   1b340:	bne	1b348 <__assert_fail@plt+0x9a5c>
   1b344:	bl	118bc <abort@plt>
   1b348:	str	r1, [sp, #44]	; 0x2c
   1b34c:	str	r0, [sp, #40]	; 0x28
   1b350:	mov	r3, sp
   1b354:	mov	r0, #0
   1b358:	mov	r1, lr
   1b35c:	mov	r2, ip
   1b360:	bl	1abfc <__assert_fail@plt+0x9310>
   1b364:	sub	sp, fp, #8
   1b368:	pop	{r4, r5, fp, pc}
   1b36c:	movw	r3, #4840	; 0x12e8
   1b370:	movt	r3, #3
   1b374:	b	1abfc <__assert_fail@plt+0x9310>
   1b378:	movw	r3, #4840	; 0x12e8
   1b37c:	mov	r2, r1
   1b380:	mov	r1, r0
   1b384:	mov	r0, #0
   1b388:	movt	r3, #3
   1b38c:	b	1abfc <__assert_fail@plt+0x9310>
   1b390:	movw	r3, #4840	; 0x12e8
   1b394:	mvn	r2, #0
   1b398:	movt	r3, #3
   1b39c:	b	1abfc <__assert_fail@plt+0x9310>
   1b3a0:	movw	r3, #4840	; 0x12e8
   1b3a4:	mov	r1, r0
   1b3a8:	mov	r0, #0
   1b3ac:	mvn	r2, #0
   1b3b0:	movt	r3, #3
   1b3b4:	b	1abfc <__assert_fail@plt+0x9310>
   1b3b8:	push	{r4, r5, fp, lr}
   1b3bc:	add	fp, sp, #8
   1b3c0:	mov	r5, r0
   1b3c4:	mov	r4, r1
   1b3c8:	mov	r0, #0
   1b3cc:	mov	r2, #5
   1b3d0:	mov	r1, r5
   1b3d4:	bl	115a4 <dcgettext@plt>
   1b3d8:	cmp	r0, r5
   1b3dc:	popne	{r4, r5, fp, pc}
   1b3e0:	bl	1e8fc <__assert_fail@plt+0xd010>
   1b3e4:	ldrb	r1, [r0]
   1b3e8:	and	r1, r1, #223	; 0xdf
   1b3ec:	cmp	r1, #71	; 0x47
   1b3f0:	beq	1b458 <__assert_fail@plt+0x9b6c>
   1b3f4:	cmp	r1, #85	; 0x55
   1b3f8:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b3fc:	ldrb	r1, [r0, #1]
   1b400:	and	r1, r1, #223	; 0xdf
   1b404:	cmp	r1, #84	; 0x54
   1b408:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b40c:	ldrb	r1, [r0, #2]
   1b410:	and	r1, r1, #223	; 0xdf
   1b414:	cmp	r1, #70	; 0x46
   1b418:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b41c:	ldrb	r1, [r0, #3]
   1b420:	cmp	r1, #45	; 0x2d
   1b424:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b428:	ldrb	r1, [r0, #4]
   1b42c:	cmp	r1, #56	; 0x38
   1b430:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b434:	ldrb	r0, [r0, #5]
   1b438:	cmp	r0, #0
   1b43c:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b440:	ldrb	r1, [r5]
   1b444:	movw	r2, #1345	; 0x541
   1b448:	movw	r0, #1349	; 0x545
   1b44c:	movt	r2, #2
   1b450:	movt	r0, #2
   1b454:	b	1b4e0 <__assert_fail@plt+0x9bf4>
   1b458:	ldrb	r1, [r0, #1]
   1b45c:	and	r1, r1, #223	; 0xdf
   1b460:	cmp	r1, #66	; 0x42
   1b464:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b468:	ldrb	r1, [r0, #2]
   1b46c:	cmp	r1, #49	; 0x31
   1b470:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b474:	ldrb	r1, [r0, #3]
   1b478:	cmp	r1, #56	; 0x38
   1b47c:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b480:	ldrb	r1, [r0, #4]
   1b484:	cmp	r1, #48	; 0x30
   1b488:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b48c:	ldrb	r1, [r0, #5]
   1b490:	cmp	r1, #51	; 0x33
   1b494:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b498:	ldrb	r1, [r0, #6]
   1b49c:	cmp	r1, #48	; 0x30
   1b4a0:	bne	1b4b0 <__assert_fail@plt+0x9bc4>
   1b4a4:	ldrb	r0, [r0, #7]
   1b4a8:	cmp	r0, #0
   1b4ac:	beq	1b4cc <__assert_fail@plt+0x9be0>
   1b4b0:	movw	r1, #65213	; 0xfebd
   1b4b4:	movw	r0, #2653	; 0xa5d
   1b4b8:	cmp	r4, #9
   1b4bc:	movt	r1, #1
   1b4c0:	movt	r0, #2
   1b4c4:	moveq	r0, r1
   1b4c8:	pop	{r4, r5, fp, pc}
   1b4cc:	ldrb	r1, [r5]
   1b4d0:	movw	r2, #1353	; 0x549
   1b4d4:	movw	r0, #1357	; 0x54d
   1b4d8:	movt	r2, #2
   1b4dc:	movt	r0, #2
   1b4e0:	cmp	r1, #96	; 0x60
   1b4e4:	moveq	r0, r2
   1b4e8:	pop	{r4, r5, fp, pc}
   1b4ec:	push	{r4, r5, fp, lr}
   1b4f0:	add	fp, sp, #8
   1b4f4:	mov	r4, #0
   1b4f8:	mov	r5, r0
   1b4fc:	mov	r1, #524288	; 0x80000
   1b500:	str	r4, [r0, #4]
   1b504:	movw	r0, #659	; 0x293
   1b508:	movt	r0, #2
   1b50c:	bl	1e714 <__assert_fail@plt+0xce28>
   1b510:	cmn	r0, #1
   1b514:	str	r0, [r5]
   1b518:	ble	1b524 <__assert_fail@plt+0x9c38>
   1b51c:	mov	r0, r4
   1b520:	pop	{r4, r5, fp, pc}
   1b524:	mov	r0, #0
   1b528:	mov	r1, #0
   1b52c:	mov	r4, #0
   1b530:	bl	116f4 <getcwd@plt>
   1b534:	cmp	r0, #0
   1b538:	str	r0, [r5, #4]
   1b53c:	mvneq	r4, #0
   1b540:	mov	r0, r4
   1b544:	pop	{r4, r5, fp, pc}
   1b548:	ldr	r1, [r0]
   1b54c:	cmp	r1, #0
   1b550:	bmi	1b55c <__assert_fail@plt+0x9c70>
   1b554:	mov	r0, r1
   1b558:	b	11850 <fchdir@plt>
   1b55c:	ldr	r0, [r0, #4]
   1b560:	b	1e29c <__assert_fail@plt+0xc9b0>
   1b564:	push	{r4, sl, fp, lr}
   1b568:	add	fp, sp, #8
   1b56c:	mov	r4, r0
   1b570:	ldr	r0, [r0]
   1b574:	cmp	r0, #0
   1b578:	bmi	1b580 <__assert_fail@plt+0x9c94>
   1b57c:	bl	118c8 <close@plt>
   1b580:	ldr	r0, [r4, #4]
   1b584:	pop	{r4, sl, fp, lr}
   1b588:	b	16040 <__assert_fail@plt+0x4754>
   1b58c:	push	{r4, r5, r6, sl, fp, lr}
   1b590:	add	fp, sp, #16
   1b594:	ldr	r4, [r0], #8
   1b598:	mov	r5, r1
   1b59c:	cmp	r4, r0
   1b5a0:	beq	1b5c4 <__assert_fail@plt+0x9cd8>
   1b5a4:	mov	r0, r4
   1b5a8:	mov	r1, r5
   1b5ac:	bl	1d16c <__assert_fail@plt+0xb880>
   1b5b0:	cmp	r0, #0
   1b5b4:	mov	r6, r0
   1b5b8:	moveq	r6, r4
   1b5bc:	mov	r0, r6
   1b5c0:	pop	{r4, r5, r6, sl, fp, pc}
   1b5c4:	mov	r0, r5
   1b5c8:	bl	1d13c <__assert_fail@plt+0xb850>
   1b5cc:	cmp	r0, #0
   1b5d0:	beq	1b5ec <__assert_fail@plt+0x9d00>
   1b5d4:	mov	r1, r4
   1b5d8:	mov	r2, r5
   1b5dc:	mov	r6, r0
   1b5e0:	bl	11574 <memcpy@plt>
   1b5e4:	mov	r0, r6
   1b5e8:	pop	{r4, r5, r6, sl, fp, pc}
   1b5ec:	mov	r6, #0
   1b5f0:	mov	r0, r6
   1b5f4:	pop	{r4, r5, r6, sl, fp, pc}
   1b5f8:	push	{r4, r5, r6, sl, fp, lr}
   1b5fc:	add	fp, sp, #16
   1b600:	mov	r4, r0
   1b604:	add	r6, r0, #8
   1b608:	ldrd	r0, [r0]
   1b60c:	lsl	r5, r1, #1
   1b610:	cmp	r0, r6
   1b614:	beq	1b620 <__assert_fail@plt+0x9d34>
   1b618:	bl	16040 <__assert_fail@plt+0x4754>
   1b61c:	ldr	r1, [r4, #4]
   1b620:	cmp	r5, r1
   1b624:	bcc	1b648 <__assert_fail@plt+0x9d5c>
   1b628:	mov	r0, r5
   1b62c:	bl	1d13c <__assert_fail@plt+0xb850>
   1b630:	cmp	r0, #0
   1b634:	strne	r0, [r4]
   1b638:	movne	r0, #1
   1b63c:	strne	r5, [r4, #4]
   1b640:	popne	{r4, r5, r6, sl, fp, pc}
   1b644:	b	1b654 <__assert_fail@plt+0x9d68>
   1b648:	bl	11748 <__errno_location@plt>
   1b64c:	mov	r1, #12
   1b650:	str	r1, [r0]
   1b654:	mov	r0, #0
   1b658:	mov	r5, #1024	; 0x400
   1b65c:	str	r6, [r4]
   1b660:	str	r5, [r4, #4]
   1b664:	pop	{r4, r5, r6, sl, fp, pc}
   1b668:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b66c:	add	fp, sp, #24
   1b670:	ldrd	r8, [r0]
   1b674:	add	r7, r0, #8
   1b678:	mov	r4, r0
   1b67c:	lsl	r5, r9, #1
   1b680:	cmp	r8, r7
   1b684:	beq	1b6b0 <__assert_fail@plt+0x9dc4>
   1b688:	cmp	r5, r9
   1b68c:	bcc	1b6e8 <__assert_fail@plt+0x9dfc>
   1b690:	mov	r0, r8
   1b694:	mov	r1, r5
   1b698:	bl	1d16c <__assert_fail@plt+0xb880>
   1b69c:	mov	r6, r0
   1b6a0:	cmp	r0, #0
   1b6a4:	bne	1b6d0 <__assert_fail@plt+0x9de4>
   1b6a8:	ldr	r8, [r4]
   1b6ac:	b	1b6f4 <__assert_fail@plt+0x9e08>
   1b6b0:	mov	r0, r5
   1b6b4:	bl	1d13c <__assert_fail@plt+0xb850>
   1b6b8:	cmp	r0, #0
   1b6bc:	beq	1b6e0 <__assert_fail@plt+0x9df4>
   1b6c0:	ldr	r2, [r4, #4]
   1b6c4:	mov	r1, r8
   1b6c8:	mov	r6, r0
   1b6cc:	bl	11574 <memcpy@plt>
   1b6d0:	mov	r0, #1
   1b6d4:	str	r6, [r4]
   1b6d8:	str	r5, [r4, #4]
   1b6dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b6e0:	mov	r0, #0
   1b6e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b6e8:	bl	11748 <__errno_location@plt>
   1b6ec:	mov	r1, #12
   1b6f0:	str	r1, [r0]
   1b6f4:	mov	r0, r8
   1b6f8:	bl	16040 <__assert_fail@plt+0x4754>
   1b6fc:	mov	r0, #0
   1b700:	mov	r5, #1024	; 0x400
   1b704:	str	r7, [r4]
   1b708:	str	r5, [r4, #4]
   1b70c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b710:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b714:	add	fp, sp, #24
   1b718:	sub	sp, sp, #32
   1b71c:	ldr	r6, [fp, #12]
   1b720:	ldr	r7, [fp, #8]
   1b724:	mov	r4, r2
   1b728:	mov	r8, r0
   1b72c:	cmp	r1, #0
   1b730:	beq	1b758 <__assert_fail@plt+0x9e6c>
   1b734:	movw	r2, #1444	; 0x5a4
   1b738:	mov	r5, r1
   1b73c:	str	r3, [sp, #4]
   1b740:	str	r4, [sp]
   1b744:	mov	r0, r8
   1b748:	mov	r1, #1
   1b74c:	movt	r2, #2
   1b750:	mov	r3, r5
   1b754:	b	1b770 <__assert_fail@plt+0x9e84>
   1b758:	movw	r2, #1456	; 0x5b0
   1b75c:	str	r3, [sp]
   1b760:	mov	r0, r8
   1b764:	mov	r1, #1
   1b768:	mov	r3, r4
   1b76c:	movt	r2, #2
   1b770:	bl	1179c <__fprintf_chk@plt>
   1b774:	movw	r1, #1463	; 0x5b7
   1b778:	mov	r0, #0
   1b77c:	mov	r2, #5
   1b780:	movt	r1, #2
   1b784:	bl	115a4 <dcgettext@plt>
   1b788:	movw	r2, #2181	; 0x885
   1b78c:	mov	r3, r0
   1b790:	movw	r0, #2022	; 0x7e6
   1b794:	mov	r1, #1
   1b798:	movt	r2, #2
   1b79c:	str	r0, [sp]
   1b7a0:	mov	r0, r8
   1b7a4:	bl	1179c <__fprintf_chk@plt>
   1b7a8:	movw	r4, #64942	; 0xfdae
   1b7ac:	mov	r1, r8
   1b7b0:	movt	r4, #1
   1b7b4:	mov	r0, r4
   1b7b8:	bl	114f0 <fputs_unlocked@plt>
   1b7bc:	movw	r1, #1467	; 0x5bb
   1b7c0:	mov	r0, #0
   1b7c4:	mov	r2, #5
   1b7c8:	movt	r1, #2
   1b7cc:	bl	115a4 <dcgettext@plt>
   1b7d0:	movw	r3, #1638	; 0x666
   1b7d4:	mov	r2, r0
   1b7d8:	mov	r0, r8
   1b7dc:	mov	r1, #1
   1b7e0:	movt	r3, #2
   1b7e4:	bl	1179c <__fprintf_chk@plt>
   1b7e8:	mov	r0, r4
   1b7ec:	mov	r1, r8
   1b7f0:	bl	114f0 <fputs_unlocked@plt>
   1b7f4:	cmp	r6, #9
   1b7f8:	bhi	1b834 <__assert_fail@plt+0x9f48>
   1b7fc:	add	r0, pc, #0
   1b800:	ldr	pc, [r0, r6, lsl #2]
   1b804:	andeq	fp, r1, ip, lsr #16
   1b808:	andeq	fp, r1, r0, asr #16
   1b80c:	andeq	fp, r1, r0, ror r8
   1b810:	muleq	r1, r8, r8
   1b814:	andeq	fp, r1, r0, asr #17
   1b818:	andeq	fp, r1, r8, ror #17
   1b81c:	andeq	fp, r1, r0, lsl r9
   1b820:	andeq	fp, r1, r8, asr #18
   1b824:	andeq	fp, r1, r8, ror #19
   1b828:	muleq	r1, r0, r9
   1b82c:	sub	sp, fp, #24
   1b830:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b834:	movw	r1, #1991	; 0x7c7
   1b838:	movt	r1, #2
   1b83c:	b	1b998 <__assert_fail@plt+0xa0ac>
   1b840:	movw	r1, #1672	; 0x688
   1b844:	mov	r0, #0
   1b848:	mov	r2, #5
   1b84c:	movt	r1, #2
   1b850:	bl	115a4 <dcgettext@plt>
   1b854:	ldr	r3, [r7]
   1b858:	mov	r2, r0
   1b85c:	mov	r0, r8
   1b860:	mov	r1, #1
   1b864:	sub	sp, fp, #24
   1b868:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b86c:	b	1179c <__fprintf_chk@plt>
   1b870:	movw	r1, #1688	; 0x698
   1b874:	mov	r0, #0
   1b878:	mov	r2, #5
   1b87c:	movt	r1, #2
   1b880:	bl	115a4 <dcgettext@plt>
   1b884:	mov	r2, r0
   1b888:	ldr	r3, [r7]
   1b88c:	ldr	r0, [r7, #4]
   1b890:	str	r0, [sp]
   1b894:	b	1b984 <__assert_fail@plt+0xa098>
   1b898:	movw	r1, #1711	; 0x6af
   1b89c:	mov	r0, #0
   1b8a0:	mov	r2, #5
   1b8a4:	movt	r1, #2
   1b8a8:	bl	115a4 <dcgettext@plt>
   1b8ac:	mov	r2, r0
   1b8b0:	ldr	r3, [r7]
   1b8b4:	ldmib	r7, {r0, r1}
   1b8b8:	stm	sp, {r0, r1}
   1b8bc:	b	1b984 <__assert_fail@plt+0xa098>
   1b8c0:	movw	r1, #1739	; 0x6cb
   1b8c4:	mov	r0, #0
   1b8c8:	mov	r2, #5
   1b8cc:	movt	r1, #2
   1b8d0:	bl	115a4 <dcgettext@plt>
   1b8d4:	ldr	r3, [r7]
   1b8d8:	mov	r2, r0
   1b8dc:	ldmib	r7, {r0, r1, r7}
   1b8e0:	stm	sp, {r0, r1, r7}
   1b8e4:	b	1b984 <__assert_fail@plt+0xa098>
   1b8e8:	movw	r1, #1771	; 0x6eb
   1b8ec:	mov	r0, #0
   1b8f0:	mov	r2, #5
   1b8f4:	movt	r1, #2
   1b8f8:	bl	115a4 <dcgettext@plt>
   1b8fc:	ldr	r3, [r7]
   1b900:	mov	r2, r0
   1b904:	ldmib	r7, {r0, r1, r6, r7}
   1b908:	stm	sp, {r0, r1, r6, r7}
   1b90c:	b	1b984 <__assert_fail@plt+0xa098>
   1b910:	movw	r1, #1807	; 0x70f
   1b914:	mov	r0, #0
   1b918:	mov	r2, #5
   1b91c:	movt	r1, #2
   1b920:	bl	115a4 <dcgettext@plt>
   1b924:	mov	r2, r0
   1b928:	ldr	r3, [r7]
   1b92c:	ldmib	r7, {r0, r1, r6}
   1b930:	ldr	r5, [r7, #16]
   1b934:	ldr	r7, [r7, #20]
   1b938:	stm	sp, {r0, r1, r6}
   1b93c:	str	r5, [sp, #12]
   1b940:	str	r7, [sp, #16]
   1b944:	b	1b984 <__assert_fail@plt+0xa098>
   1b948:	movw	r1, #1847	; 0x737
   1b94c:	mov	r0, #0
   1b950:	mov	r2, #5
   1b954:	movt	r1, #2
   1b958:	bl	115a4 <dcgettext@plt>
   1b95c:	mov	r2, r0
   1b960:	ldr	r3, [r7]
   1b964:	ldmib	r7, {r0, r1, r6}
   1b968:	ldr	r5, [r7, #16]
   1b96c:	ldr	r4, [r7, #20]
   1b970:	ldr	r7, [r7, #24]
   1b974:	stm	sp, {r0, r1, r6}
   1b978:	str	r5, [sp, #12]
   1b97c:	str	r4, [sp, #16]
   1b980:	str	r7, [sp, #20]
   1b984:	mov	r0, r8
   1b988:	mov	r1, #1
   1b98c:	b	1ba38 <__assert_fail@plt+0xa14c>
   1b990:	movw	r1, #1939	; 0x793
   1b994:	movt	r1, #2
   1b998:	mov	r0, #0
   1b99c:	mov	r2, #5
   1b9a0:	bl	115a4 <dcgettext@plt>
   1b9a4:	mov	ip, r0
   1b9a8:	ldr	r3, [r7]
   1b9ac:	ldr	r0, [r7, #4]
   1b9b0:	ldr	r1, [r7, #8]
   1b9b4:	ldr	r6, [r7, #12]
   1b9b8:	ldr	r5, [r7, #16]
   1b9bc:	ldr	r4, [r7, #20]
   1b9c0:	ldr	r2, [r7, #24]
   1b9c4:	ldr	lr, [r7, #28]
   1b9c8:	ldr	r7, [r7, #32]
   1b9cc:	stm	sp, {r0, r1, r6}
   1b9d0:	str	r5, [sp, #12]
   1b9d4:	str	r4, [sp, #16]
   1b9d8:	str	r2, [sp, #20]
   1b9dc:	str	lr, [sp, #24]
   1b9e0:	str	r7, [sp, #28]
   1b9e4:	b	1ba2c <__assert_fail@plt+0xa140>
   1b9e8:	movw	r1, #1891	; 0x763
   1b9ec:	mov	r0, #0
   1b9f0:	mov	r2, #5
   1b9f4:	movt	r1, #2
   1b9f8:	bl	115a4 <dcgettext@plt>
   1b9fc:	mov	ip, r0
   1ba00:	ldr	r3, [r7]
   1ba04:	ldmib	r7, {r0, r1, r6}
   1ba08:	ldr	r5, [r7, #16]
   1ba0c:	ldr	r4, [r7, #20]
   1ba10:	ldr	r2, [r7, #24]
   1ba14:	ldr	r7, [r7, #28]
   1ba18:	stm	sp, {r0, r1, r6}
   1ba1c:	str	r5, [sp, #12]
   1ba20:	str	r4, [sp, #16]
   1ba24:	str	r2, [sp, #20]
   1ba28:	str	r7, [sp, #24]
   1ba2c:	mov	r0, r8
   1ba30:	mov	r1, #1
   1ba34:	mov	r2, ip
   1ba38:	bl	1179c <__fprintf_chk@plt>
   1ba3c:	sub	sp, fp, #24
   1ba40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ba44:	push	{r4, sl, fp, lr}
   1ba48:	add	fp, sp, #8
   1ba4c:	sub	sp, sp, #8
   1ba50:	ldr	ip, [fp, #8]
   1ba54:	mov	lr, #0
   1ba58:	ldr	r4, [ip, lr, lsl #2]
   1ba5c:	add	lr, lr, #1
   1ba60:	cmp	r4, #0
   1ba64:	bne	1ba58 <__assert_fail@plt+0xa16c>
   1ba68:	sub	r4, lr, #1
   1ba6c:	str	ip, [sp]
   1ba70:	str	r4, [sp, #4]
   1ba74:	bl	1b710 <__assert_fail@plt+0x9e24>
   1ba78:	sub	sp, fp, #8
   1ba7c:	pop	{r4, sl, fp, pc}
   1ba80:	push	{fp, lr}
   1ba84:	mov	fp, sp
   1ba88:	sub	sp, sp, #48	; 0x30
   1ba8c:	ldr	ip, [fp, #8]
   1ba90:	ldr	lr, [ip]
   1ba94:	cmp	lr, #0
   1ba98:	str	lr, [sp, #8]
   1ba9c:	beq	1bb38 <__assert_fail@plt+0xa24c>
   1baa0:	ldr	lr, [ip, #4]
   1baa4:	cmp	lr, #0
   1baa8:	str	lr, [sp, #12]
   1baac:	beq	1bb40 <__assert_fail@plt+0xa254>
   1bab0:	ldr	lr, [ip, #8]
   1bab4:	cmp	lr, #0
   1bab8:	str	lr, [sp, #16]
   1babc:	beq	1bb48 <__assert_fail@plt+0xa25c>
   1bac0:	ldr	lr, [ip, #12]
   1bac4:	cmp	lr, #0
   1bac8:	str	lr, [sp, #20]
   1bacc:	beq	1bb50 <__assert_fail@plt+0xa264>
   1bad0:	ldr	lr, [ip, #16]
   1bad4:	cmp	lr, #0
   1bad8:	str	lr, [sp, #24]
   1badc:	beq	1bb58 <__assert_fail@plt+0xa26c>
   1bae0:	ldr	lr, [ip, #20]
   1bae4:	cmp	lr, #0
   1bae8:	str	lr, [sp, #28]
   1baec:	beq	1bb60 <__assert_fail@plt+0xa274>
   1baf0:	ldr	lr, [ip, #24]
   1baf4:	cmp	lr, #0
   1baf8:	str	lr, [sp, #32]
   1bafc:	beq	1bb68 <__assert_fail@plt+0xa27c>
   1bb00:	ldr	lr, [ip, #28]
   1bb04:	cmp	lr, #0
   1bb08:	str	lr, [sp, #36]	; 0x24
   1bb0c:	beq	1bb70 <__assert_fail@plt+0xa284>
   1bb10:	ldr	lr, [ip, #32]
   1bb14:	cmp	lr, #0
   1bb18:	str	lr, [sp, #40]	; 0x28
   1bb1c:	beq	1bb78 <__assert_fail@plt+0xa28c>
   1bb20:	ldr	lr, [ip, #36]	; 0x24
   1bb24:	mov	ip, #10
   1bb28:	cmp	lr, #0
   1bb2c:	str	lr, [sp, #44]	; 0x2c
   1bb30:	movweq	ip, #9
   1bb34:	b	1bb7c <__assert_fail@plt+0xa290>
   1bb38:	mov	ip, #0
   1bb3c:	b	1bb7c <__assert_fail@plt+0xa290>
   1bb40:	mov	ip, #1
   1bb44:	b	1bb7c <__assert_fail@plt+0xa290>
   1bb48:	mov	ip, #2
   1bb4c:	b	1bb7c <__assert_fail@plt+0xa290>
   1bb50:	mov	ip, #3
   1bb54:	b	1bb7c <__assert_fail@plt+0xa290>
   1bb58:	mov	ip, #4
   1bb5c:	b	1bb7c <__assert_fail@plt+0xa290>
   1bb60:	mov	ip, #5
   1bb64:	b	1bb7c <__assert_fail@plt+0xa290>
   1bb68:	mov	ip, #6
   1bb6c:	b	1bb7c <__assert_fail@plt+0xa290>
   1bb70:	mov	ip, #7
   1bb74:	b	1bb7c <__assert_fail@plt+0xa290>
   1bb78:	mov	ip, #8
   1bb7c:	add	lr, sp, #8
   1bb80:	str	ip, [sp, #4]
   1bb84:	str	lr, [sp]
   1bb88:	bl	1b710 <__assert_fail@plt+0x9e24>
   1bb8c:	mov	sp, fp
   1bb90:	pop	{fp, pc}
   1bb94:	push	{fp, lr}
   1bb98:	mov	fp, sp
   1bb9c:	sub	sp, sp, #56	; 0x38
   1bba0:	add	ip, fp, #8
   1bba4:	str	ip, [sp, #12]
   1bba8:	ldr	lr, [fp, #8]
   1bbac:	cmp	lr, #0
   1bbb0:	str	lr, [sp, #16]
   1bbb4:	beq	1bc50 <__assert_fail@plt+0xa364>
   1bbb8:	ldr	lr, [ip, #4]
   1bbbc:	cmp	lr, #0
   1bbc0:	str	lr, [sp, #20]
   1bbc4:	beq	1bc58 <__assert_fail@plt+0xa36c>
   1bbc8:	ldr	lr, [ip, #8]
   1bbcc:	cmp	lr, #0
   1bbd0:	str	lr, [sp, #24]
   1bbd4:	beq	1bc60 <__assert_fail@plt+0xa374>
   1bbd8:	ldr	lr, [ip, #12]
   1bbdc:	cmp	lr, #0
   1bbe0:	str	lr, [sp, #28]
   1bbe4:	beq	1bc68 <__assert_fail@plt+0xa37c>
   1bbe8:	ldr	lr, [ip, #16]
   1bbec:	cmp	lr, #0
   1bbf0:	str	lr, [sp, #32]
   1bbf4:	beq	1bc70 <__assert_fail@plt+0xa384>
   1bbf8:	ldr	lr, [ip, #20]
   1bbfc:	cmp	lr, #0
   1bc00:	str	lr, [sp, #36]	; 0x24
   1bc04:	beq	1bc78 <__assert_fail@plt+0xa38c>
   1bc08:	ldr	lr, [ip, #24]
   1bc0c:	cmp	lr, #0
   1bc10:	str	lr, [sp, #40]	; 0x28
   1bc14:	beq	1bc80 <__assert_fail@plt+0xa394>
   1bc18:	ldr	lr, [ip, #28]
   1bc1c:	cmp	lr, #0
   1bc20:	str	lr, [sp, #44]	; 0x2c
   1bc24:	beq	1bc88 <__assert_fail@plt+0xa39c>
   1bc28:	ldr	lr, [ip, #32]
   1bc2c:	cmp	lr, #0
   1bc30:	str	lr, [sp, #48]	; 0x30
   1bc34:	beq	1bc90 <__assert_fail@plt+0xa3a4>
   1bc38:	ldr	lr, [ip, #36]	; 0x24
   1bc3c:	mov	ip, #10
   1bc40:	cmp	lr, #0
   1bc44:	str	lr, [sp, #52]	; 0x34
   1bc48:	movweq	ip, #9
   1bc4c:	b	1bc94 <__assert_fail@plt+0xa3a8>
   1bc50:	mov	ip, #0
   1bc54:	b	1bc94 <__assert_fail@plt+0xa3a8>
   1bc58:	mov	ip, #1
   1bc5c:	b	1bc94 <__assert_fail@plt+0xa3a8>
   1bc60:	mov	ip, #2
   1bc64:	b	1bc94 <__assert_fail@plt+0xa3a8>
   1bc68:	mov	ip, #3
   1bc6c:	b	1bc94 <__assert_fail@plt+0xa3a8>
   1bc70:	mov	ip, #4
   1bc74:	b	1bc94 <__assert_fail@plt+0xa3a8>
   1bc78:	mov	ip, #5
   1bc7c:	b	1bc94 <__assert_fail@plt+0xa3a8>
   1bc80:	mov	ip, #6
   1bc84:	b	1bc94 <__assert_fail@plt+0xa3a8>
   1bc88:	mov	ip, #7
   1bc8c:	b	1bc94 <__assert_fail@plt+0xa3a8>
   1bc90:	mov	ip, #8
   1bc94:	add	lr, sp, #16
   1bc98:	str	ip, [sp, #4]
   1bc9c:	str	lr, [sp]
   1bca0:	bl	1b710 <__assert_fail@plt+0x9e24>
   1bca4:	mov	sp, fp
   1bca8:	pop	{fp, pc}
   1bcac:	push	{fp, lr}
   1bcb0:	mov	fp, sp
   1bcb4:	movw	r0, #4916	; 0x1334
   1bcb8:	movt	r0, #3
   1bcbc:	ldr	r1, [r0]
   1bcc0:	movw	r0, #64942	; 0xfdae
   1bcc4:	movt	r0, #1
   1bcc8:	bl	114f0 <fputs_unlocked@plt>
   1bccc:	movw	r1, #2051	; 0x803
   1bcd0:	mov	r0, #0
   1bcd4:	mov	r2, #5
   1bcd8:	movt	r1, #2
   1bcdc:	bl	115a4 <dcgettext@plt>
   1bce0:	movw	r2, #2071	; 0x817
   1bce4:	mov	r1, r0
   1bce8:	mov	r0, #1
   1bcec:	movt	r2, #2
   1bcf0:	bl	11778 <__printf_chk@plt>
   1bcf4:	movw	r1, #2093	; 0x82d
   1bcf8:	mov	r0, #0
   1bcfc:	mov	r2, #5
   1bd00:	movt	r1, #2
   1bd04:	bl	115a4 <dcgettext@plt>
   1bd08:	movw	r2, #63903	; 0xf99f
   1bd0c:	movw	r3, #64751	; 0xfcef
   1bd10:	mov	r1, r0
   1bd14:	mov	r0, #1
   1bd18:	movt	r2, #1
   1bd1c:	movt	r3, #1
   1bd20:	bl	11778 <__printf_chk@plt>
   1bd24:	movw	r1, #2113	; 0x841
   1bd28:	mov	r0, #0
   1bd2c:	mov	r2, #5
   1bd30:	movt	r1, #2
   1bd34:	bl	115a4 <dcgettext@plt>
   1bd38:	movw	r2, #2152	; 0x868
   1bd3c:	mov	r1, r0
   1bd40:	mov	r0, #1
   1bd44:	movt	r2, #2
   1bd48:	pop	{fp, lr}
   1bd4c:	b	11778 <__printf_chk@plt>
   1bd50:	push	{r4, r5, r6, sl, fp, lr}
   1bd54:	add	fp, sp, #16
   1bd58:	mov	r4, r2
   1bd5c:	mov	r5, r1
   1bd60:	mov	r6, r0
   1bd64:	bl	1e934 <__assert_fail@plt+0xd048>
   1bd68:	cmp	r0, #0
   1bd6c:	popne	{r4, r5, r6, sl, fp, pc}
   1bd70:	cmp	r6, #0
   1bd74:	beq	1bd88 <__assert_fail@plt+0xa49c>
   1bd78:	cmp	r5, #0
   1bd7c:	cmpne	r4, #0
   1bd80:	bne	1bd88 <__assert_fail@plt+0xa49c>
   1bd84:	pop	{r4, r5, r6, sl, fp, pc}
   1bd88:	bl	1c304 <__assert_fail@plt+0xaa18>
   1bd8c:	push	{r4, r5, r6, sl, fp, lr}
   1bd90:	add	fp, sp, #16
   1bd94:	mov	r4, r2
   1bd98:	mov	r5, r1
   1bd9c:	mov	r6, r0
   1bda0:	bl	1e934 <__assert_fail@plt+0xd048>
   1bda4:	cmp	r0, #0
   1bda8:	popne	{r4, r5, r6, sl, fp, pc}
   1bdac:	cmp	r6, #0
   1bdb0:	beq	1bdc4 <__assert_fail@plt+0xa4d8>
   1bdb4:	cmp	r5, #0
   1bdb8:	cmpne	r4, #0
   1bdbc:	bne	1bdc4 <__assert_fail@plt+0xa4d8>
   1bdc0:	pop	{r4, r5, r6, sl, fp, pc}
   1bdc4:	bl	1c304 <__assert_fail@plt+0xaa18>
   1bdc8:	push	{fp, lr}
   1bdcc:	mov	fp, sp
   1bdd0:	bl	1d13c <__assert_fail@plt+0xb850>
   1bdd4:	cmp	r0, #0
   1bdd8:	popne	{fp, pc}
   1bddc:	bl	1c304 <__assert_fail@plt+0xaa18>
   1bde0:	push	{fp, lr}
   1bde4:	mov	fp, sp
   1bde8:	bl	1d13c <__assert_fail@plt+0xb850>
   1bdec:	cmp	r0, #0
   1bdf0:	popne	{fp, pc}
   1bdf4:	bl	1c304 <__assert_fail@plt+0xaa18>
   1bdf8:	push	{fp, lr}
   1bdfc:	mov	fp, sp
   1be00:	bl	1d13c <__assert_fail@plt+0xb850>
   1be04:	cmp	r0, #0
   1be08:	popne	{fp, pc}
   1be0c:	bl	1c304 <__assert_fail@plt+0xaa18>
   1be10:	push	{r4, r5, fp, lr}
   1be14:	add	fp, sp, #8
   1be18:	mov	r4, r1
   1be1c:	mov	r5, r0
   1be20:	bl	1d16c <__assert_fail@plt+0xb880>
   1be24:	cmp	r0, #0
   1be28:	popne	{r4, r5, fp, pc}
   1be2c:	cmp	r5, #0
   1be30:	beq	1be40 <__assert_fail@plt+0xa554>
   1be34:	cmp	r4, #0
   1be38:	bne	1be40 <__assert_fail@plt+0xa554>
   1be3c:	pop	{r4, r5, fp, pc}
   1be40:	bl	1c304 <__assert_fail@plt+0xaa18>
   1be44:	push	{fp, lr}
   1be48:	mov	fp, sp
   1be4c:	cmp	r1, #0
   1be50:	orreq	r1, r1, #1
   1be54:	bl	1d16c <__assert_fail@plt+0xb880>
   1be58:	cmp	r0, #0
   1be5c:	popne	{fp, pc}
   1be60:	bl	1c304 <__assert_fail@plt+0xaa18>
   1be64:	push	{fp, lr}
   1be68:	mov	fp, sp
   1be6c:	clz	r3, r2
   1be70:	lsr	ip, r3, #5
   1be74:	clz	r3, r1
   1be78:	lsr	r3, r3, #5
   1be7c:	orrs	r3, r3, ip
   1be80:	movwne	r1, #1
   1be84:	movwne	r2, #1
   1be88:	bl	1e934 <__assert_fail@plt+0xd048>
   1be8c:	cmp	r0, #0
   1be90:	popne	{fp, pc}
   1be94:	bl	1c304 <__assert_fail@plt+0xaa18>
   1be98:	push	{fp, lr}
   1be9c:	mov	fp, sp
   1bea0:	mov	r2, r1
   1bea4:	mov	r1, r0
   1bea8:	mov	r0, #0
   1beac:	bl	1e934 <__assert_fail@plt+0xd048>
   1beb0:	cmp	r0, #0
   1beb4:	popne	{fp, pc}
   1beb8:	bl	1c304 <__assert_fail@plt+0xaa18>
   1bebc:	push	{fp, lr}
   1bec0:	mov	fp, sp
   1bec4:	mov	r2, r1
   1bec8:	mov	r1, r0
   1becc:	clz	r0, r2
   1bed0:	clz	r3, r1
   1bed4:	lsr	r0, r0, #5
   1bed8:	lsr	r3, r3, #5
   1bedc:	orrs	r0, r3, r0
   1bee0:	mov	r0, #0
   1bee4:	movwne	r1, #1
   1bee8:	movwne	r2, #1
   1beec:	bl	1e934 <__assert_fail@plt+0xd048>
   1bef0:	cmp	r0, #0
   1bef4:	popne	{fp, pc}
   1bef8:	bl	1c304 <__assert_fail@plt+0xaa18>
   1befc:	push	{r4, r5, r6, sl, fp, lr}
   1bf00:	add	fp, sp, #16
   1bf04:	ldr	r5, [r1]
   1bf08:	mov	r4, r1
   1bf0c:	mov	r6, r0
   1bf10:	cmp	r0, #0
   1bf14:	beq	1bf2c <__assert_fail@plt+0xa640>
   1bf18:	mov	r0, #1
   1bf1c:	add	r0, r0, r5, lsr #1
   1bf20:	adds	r5, r5, r0
   1bf24:	bcc	1bf34 <__assert_fail@plt+0xa648>
   1bf28:	b	1bf70 <__assert_fail@plt+0xa684>
   1bf2c:	cmp	r5, #0
   1bf30:	movweq	r5, #64	; 0x40
   1bf34:	mov	r0, r6
   1bf38:	mov	r1, r5
   1bf3c:	mov	r2, #1
   1bf40:	bl	1e934 <__assert_fail@plt+0xd048>
   1bf44:	cmp	r5, #0
   1bf48:	mov	r1, r5
   1bf4c:	movwne	r1, #1
   1bf50:	cmp	r0, #0
   1bf54:	bne	1bf68 <__assert_fail@plt+0xa67c>
   1bf58:	clz	r2, r6
   1bf5c:	lsr	r2, r2, #5
   1bf60:	orrs	r1, r2, r1
   1bf64:	bne	1bf70 <__assert_fail@plt+0xa684>
   1bf68:	str	r5, [r4]
   1bf6c:	pop	{r4, r5, r6, sl, fp, pc}
   1bf70:	bl	1c304 <__assert_fail@plt+0xaa18>
   1bf74:	push	{r4, r5, r6, r7, fp, lr}
   1bf78:	add	fp, sp, #16
   1bf7c:	ldr	r5, [r1]
   1bf80:	mov	r6, r2
   1bf84:	mov	r4, r1
   1bf88:	mov	r7, r0
   1bf8c:	cmp	r0, #0
   1bf90:	beq	1bfa8 <__assert_fail@plt+0xa6bc>
   1bf94:	mov	r0, #1
   1bf98:	add	r0, r0, r5, lsr #1
   1bf9c:	adds	r5, r5, r0
   1bfa0:	bcc	1bfc0 <__assert_fail@plt+0xa6d4>
   1bfa4:	b	1bff4 <__assert_fail@plt+0xa708>
   1bfa8:	cmp	r5, #0
   1bfac:	bne	1bfc0 <__assert_fail@plt+0xa6d4>
   1bfb0:	mov	r0, #64	; 0x40
   1bfb4:	cmp	r6, #64	; 0x40
   1bfb8:	udiv	r5, r0, r6
   1bfbc:	addhi	r5, r5, #1
   1bfc0:	mov	r0, r7
   1bfc4:	mov	r1, r5
   1bfc8:	mov	r2, r6
   1bfcc:	bl	1e934 <__assert_fail@plt+0xd048>
   1bfd0:	cmp	r0, #0
   1bfd4:	bne	1bfec <__assert_fail@plt+0xa700>
   1bfd8:	cmp	r7, #0
   1bfdc:	beq	1bff4 <__assert_fail@plt+0xa708>
   1bfe0:	cmp	r6, #0
   1bfe4:	cmpne	r5, #0
   1bfe8:	bne	1bff4 <__assert_fail@plt+0xa708>
   1bfec:	str	r5, [r4]
   1bff0:	pop	{r4, r5, r6, r7, fp, pc}
   1bff4:	bl	1c304 <__assert_fail@plt+0xaa18>
   1bff8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bffc:	add	fp, sp, #24
   1c000:	mov	r8, r1
   1c004:	ldr	r1, [r1]
   1c008:	mov	r5, r0
   1c00c:	add	r0, r1, r1, asr #1
   1c010:	cmp	r0, r1
   1c014:	mvnvs	r0, #-2147483648	; 0x80000000
   1c018:	cmp	r0, r3
   1c01c:	mov	r7, r0
   1c020:	movgt	r7, r3
   1c024:	cmn	r3, #1
   1c028:	movle	r7, r0
   1c02c:	ldr	r0, [fp, #8]
   1c030:	cmn	r0, #1
   1c034:	ble	1c05c <__assert_fail@plt+0xa770>
   1c038:	cmp	r0, #0
   1c03c:	beq	1c0b0 <__assert_fail@plt+0xa7c4>
   1c040:	cmn	r7, #1
   1c044:	ble	1c084 <__assert_fail@plt+0xa798>
   1c048:	mvn	r4, #-2147483648	; 0x80000000
   1c04c:	udiv	r6, r4, r0
   1c050:	cmp	r6, r7
   1c054:	bge	1c0b0 <__assert_fail@plt+0xa7c4>
   1c058:	b	1c0c0 <__assert_fail@plt+0xa7d4>
   1c05c:	cmn	r7, #1
   1c060:	ble	1c0a0 <__assert_fail@plt+0xa7b4>
   1c064:	cmn	r0, #1
   1c068:	beq	1c0b0 <__assert_fail@plt+0xa7c4>
   1c06c:	mov	r6, #-2147483648	; 0x80000000
   1c070:	mvn	r4, #-2147483648	; 0x80000000
   1c074:	sdiv	r6, r6, r0
   1c078:	cmp	r6, r7
   1c07c:	bge	1c0b0 <__assert_fail@plt+0xa7c4>
   1c080:	b	1c0c0 <__assert_fail@plt+0xa7d4>
   1c084:	beq	1c0b0 <__assert_fail@plt+0xa7c4>
   1c088:	mov	r6, #-2147483648	; 0x80000000
   1c08c:	mvn	r4, #-2147483648	; 0x80000000
   1c090:	sdiv	r6, r6, r7
   1c094:	cmp	r6, r0
   1c098:	bge	1c0b0 <__assert_fail@plt+0xa7c4>
   1c09c:	b	1c0c0 <__assert_fail@plt+0xa7d4>
   1c0a0:	mvn	r4, #-2147483648	; 0x80000000
   1c0a4:	sdiv	r6, r4, r0
   1c0a8:	cmp	r7, r6
   1c0ac:	blt	1c0c0 <__assert_fail@plt+0xa7d4>
   1c0b0:	mul	r6, r7, r0
   1c0b4:	mov	r4, #64	; 0x40
   1c0b8:	cmp	r6, #63	; 0x3f
   1c0bc:	bgt	1c0c8 <__assert_fail@plt+0xa7dc>
   1c0c0:	sdiv	r7, r4, r0
   1c0c4:	mul	r6, r7, r0
   1c0c8:	cmp	r5, #0
   1c0cc:	moveq	r4, #0
   1c0d0:	streq	r4, [r8]
   1c0d4:	sub	r4, r7, r1
   1c0d8:	cmp	r4, r2
   1c0dc:	bge	1c188 <__assert_fail@plt+0xa89c>
   1c0e0:	add	r7, r1, r2
   1c0e4:	mov	r6, #0
   1c0e8:	mov	r2, #0
   1c0ec:	cmp	r7, r3
   1c0f0:	movwgt	r6, #1
   1c0f4:	cmn	r3, #1
   1c0f8:	movwgt	r2, #1
   1c0fc:	cmp	r7, r1
   1c100:	bvs	1c1bc <__assert_fail@plt+0xa8d0>
   1c104:	ands	r1, r2, r6
   1c108:	bne	1c1bc <__assert_fail@plt+0xa8d0>
   1c10c:	cmn	r0, #1
   1c110:	ble	1c138 <__assert_fail@plt+0xa84c>
   1c114:	cmp	r0, #0
   1c118:	beq	1c184 <__assert_fail@plt+0xa898>
   1c11c:	cmn	r7, #1
   1c120:	ble	1c15c <__assert_fail@plt+0xa870>
   1c124:	mvn	r1, #-2147483648	; 0x80000000
   1c128:	udiv	r1, r1, r0
   1c12c:	cmp	r1, r7
   1c130:	bge	1c184 <__assert_fail@plt+0xa898>
   1c134:	b	1c1bc <__assert_fail@plt+0xa8d0>
   1c138:	cmn	r7, #1
   1c13c:	ble	1c174 <__assert_fail@plt+0xa888>
   1c140:	cmn	r0, #1
   1c144:	beq	1c184 <__assert_fail@plt+0xa898>
   1c148:	mov	r1, #-2147483648	; 0x80000000
   1c14c:	sdiv	r1, r1, r0
   1c150:	cmp	r1, r7
   1c154:	bge	1c184 <__assert_fail@plt+0xa898>
   1c158:	b	1c1bc <__assert_fail@plt+0xa8d0>
   1c15c:	beq	1c184 <__assert_fail@plt+0xa898>
   1c160:	mov	r1, #-2147483648	; 0x80000000
   1c164:	sdiv	r1, r1, r7
   1c168:	cmp	r1, r0
   1c16c:	bge	1c184 <__assert_fail@plt+0xa898>
   1c170:	b	1c1bc <__assert_fail@plt+0xa8d0>
   1c174:	mvn	r1, #-2147483648	; 0x80000000
   1c178:	sdiv	r1, r1, r0
   1c17c:	cmp	r7, r1
   1c180:	blt	1c1bc <__assert_fail@plt+0xa8d0>
   1c184:	mul	r6, r7, r0
   1c188:	mov	r0, r5
   1c18c:	mov	r1, r6
   1c190:	bl	1d16c <__assert_fail@plt+0xb880>
   1c194:	cmp	r6, #0
   1c198:	movwne	r6, #1
   1c19c:	cmp	r0, #0
   1c1a0:	bne	1c1b4 <__assert_fail@plt+0xa8c8>
   1c1a4:	clz	r1, r5
   1c1a8:	lsr	r1, r1, #5
   1c1ac:	orrs	r1, r1, r6
   1c1b0:	bne	1c1bc <__assert_fail@plt+0xa8d0>
   1c1b4:	str	r7, [r8]
   1c1b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c1bc:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c1c0:	push	{fp, lr}
   1c1c4:	mov	fp, sp
   1c1c8:	mov	r1, #1
   1c1cc:	bl	1d0e8 <__assert_fail@plt+0xb7fc>
   1c1d0:	cmp	r0, #0
   1c1d4:	popne	{fp, pc}
   1c1d8:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c1dc:	push	{fp, lr}
   1c1e0:	mov	fp, sp
   1c1e4:	bl	1d0e8 <__assert_fail@plt+0xb7fc>
   1c1e8:	cmp	r0, #0
   1c1ec:	popne	{fp, pc}
   1c1f0:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c1f4:	push	{fp, lr}
   1c1f8:	mov	fp, sp
   1c1fc:	mov	r1, #1
   1c200:	bl	1d0e8 <__assert_fail@plt+0xb7fc>
   1c204:	cmp	r0, #0
   1c208:	popne	{fp, pc}
   1c20c:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c210:	push	{fp, lr}
   1c214:	mov	fp, sp
   1c218:	bl	1d0e8 <__assert_fail@plt+0xb7fc>
   1c21c:	cmp	r0, #0
   1c220:	popne	{fp, pc}
   1c224:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c228:	push	{r4, r5, fp, lr}
   1c22c:	add	fp, sp, #8
   1c230:	mov	r5, r0
   1c234:	mov	r0, r1
   1c238:	mov	r4, r1
   1c23c:	bl	1d13c <__assert_fail@plt+0xb850>
   1c240:	cmp	r0, #0
   1c244:	beq	1c258 <__assert_fail@plt+0xa96c>
   1c248:	mov	r1, r5
   1c24c:	mov	r2, r4
   1c250:	pop	{r4, r5, fp, lr}
   1c254:	b	11574 <memcpy@plt>
   1c258:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c25c:	push	{r4, r5, fp, lr}
   1c260:	add	fp, sp, #8
   1c264:	mov	r5, r0
   1c268:	mov	r0, r1
   1c26c:	mov	r4, r1
   1c270:	bl	1d13c <__assert_fail@plt+0xb850>
   1c274:	cmp	r0, #0
   1c278:	beq	1c28c <__assert_fail@plt+0xa9a0>
   1c27c:	mov	r1, r5
   1c280:	mov	r2, r4
   1c284:	pop	{r4, r5, fp, lr}
   1c288:	b	11574 <memcpy@plt>
   1c28c:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c290:	push	{r4, r5, fp, lr}
   1c294:	add	fp, sp, #8
   1c298:	mov	r5, r0
   1c29c:	add	r0, r1, #1
   1c2a0:	mov	r4, r1
   1c2a4:	bl	1d13c <__assert_fail@plt+0xb850>
   1c2a8:	cmp	r0, #0
   1c2ac:	beq	1c2c8 <__assert_fail@plt+0xa9dc>
   1c2b0:	mov	r1, #0
   1c2b4:	mov	r2, r4
   1c2b8:	strb	r1, [r0, r4]
   1c2bc:	mov	r1, r5
   1c2c0:	pop	{r4, r5, fp, lr}
   1c2c4:	b	11574 <memcpy@plt>
   1c2c8:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c2cc:	push	{r4, r5, fp, lr}
   1c2d0:	add	fp, sp, #8
   1c2d4:	mov	r4, r0
   1c2d8:	bl	11718 <strlen@plt>
   1c2dc:	add	r5, r0, #1
   1c2e0:	mov	r0, r5
   1c2e4:	bl	1d13c <__assert_fail@plt+0xb850>
   1c2e8:	cmp	r0, #0
   1c2ec:	beq	1c300 <__assert_fail@plt+0xaa14>
   1c2f0:	mov	r1, r4
   1c2f4:	mov	r2, r5
   1c2f8:	pop	{r4, r5, fp, lr}
   1c2fc:	b	11574 <memcpy@plt>
   1c300:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c304:	push	{fp, lr}
   1c308:	mov	fp, sp
   1c30c:	movw	r0, #4816	; 0x12d0
   1c310:	movw	r1, #2228	; 0x8b4
   1c314:	mov	r2, #5
   1c318:	movt	r0, #3
   1c31c:	movt	r1, #2
   1c320:	ldr	r4, [r0]
   1c324:	mov	r0, #0
   1c328:	bl	115a4 <dcgettext@plt>
   1c32c:	movw	r2, #2580	; 0xa14
   1c330:	mov	r3, r0
   1c334:	mov	r0, r4
   1c338:	mov	r1, #0
   1c33c:	movt	r2, #2
   1c340:	bl	11670 <error@plt>
   1c344:	bl	118bc <abort@plt>
   1c348:	push	{r4, sl, fp, lr}
   1c34c:	add	fp, sp, #8
   1c350:	mov	r0, #0
   1c354:	mov	r1, #0
   1c358:	bl	116f4 <getcwd@plt>
   1c35c:	mov	r4, r0
   1c360:	cmp	r0, #0
   1c364:	bne	1c378 <__assert_fail@plt+0xaa8c>
   1c368:	bl	11748 <__errno_location@plt>
   1c36c:	ldr	r0, [r0]
   1c370:	cmp	r0, #12
   1c374:	beq	1c380 <__assert_fail@plt+0xaa94>
   1c378:	mov	r0, r4
   1c37c:	pop	{r4, sl, fp, pc}
   1c380:	bl	1c304 <__assert_fail@plt+0xaa18>
   1c384:	push	{fp, lr}
   1c388:	mov	fp, sp
   1c38c:	sub	sp, sp, #8
   1c390:	movw	ip, #4816	; 0x12d0
   1c394:	movt	ip, #3
   1c398:	ldr	ip, [ip]
   1c39c:	str	ip, [sp, #4]
   1c3a0:	ldr	ip, [fp, #8]
   1c3a4:	str	ip, [sp]
   1c3a8:	bl	1c3b0 <__assert_fail@plt+0xaac4>
   1c3ac:	bl	118bc <abort@plt>
   1c3b0:	push	{r4, r5, r6, r7, fp, lr}
   1c3b4:	add	fp, sp, #16
   1c3b8:	sub	sp, sp, #16
   1c3bc:	sub	r0, r0, #1
   1c3c0:	cmp	r0, #4
   1c3c4:	bcs	1c444 <__assert_fail@plt+0xab58>
   1c3c8:	mov	r5, r1
   1c3cc:	movw	r1, #2344	; 0x928
   1c3d0:	ldr	r4, [fp, #12]
   1c3d4:	ldr	r6, [fp, #8]
   1c3d8:	movt	r1, #2
   1c3dc:	cmn	r5, #1
   1c3e0:	ldr	r1, [r1, r0, lsl #2]
   1c3e4:	ble	1c3f8 <__assert_fail@plt+0xab0c>
   1c3e8:	ldr	r7, [r3, r5, lsl #4]
   1c3ec:	movw	r5, #2245	; 0x8c5
   1c3f0:	movt	r5, #2
   1c3f4:	b	1c414 <__assert_fail@plt+0xab28>
   1c3f8:	mov	r0, #0
   1c3fc:	add	r7, sp, #14
   1c400:	strb	r0, [sp, #15]
   1c404:	movw	r0, #2245	; 0x8c5
   1c408:	strb	r2, [sp, #14]
   1c40c:	movt	r0, #2
   1c410:	sub	r5, r0, r5
   1c414:	mov	r0, #0
   1c418:	mov	r2, #5
   1c41c:	bl	115a4 <dcgettext@plt>
   1c420:	mov	r2, r0
   1c424:	mov	r0, r4
   1c428:	mov	r1, #0
   1c42c:	mov	r3, r5
   1c430:	str	r7, [sp]
   1c434:	str	r6, [sp, #4]
   1c438:	bl	11670 <error@plt>
   1c43c:	sub	sp, fp, #16
   1c440:	pop	{r4, r5, r6, r7, fp, pc}
   1c444:	bl	118bc <abort@plt>
   1c448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c44c:	add	fp, sp, #28
   1c450:	sub	sp, sp, #44	; 0x2c
   1c454:	cmp	r2, #37	; 0x25
   1c458:	bcs	1d0c8 <__assert_fail@plt+0xb7dc>
   1c45c:	ldr	sl, [fp, #8]
   1c460:	mov	r6, r2
   1c464:	mov	r7, r1
   1c468:	mov	r4, r0
   1c46c:	str	r3, [sp, #36]	; 0x24
   1c470:	bl	11748 <__errno_location@plt>
   1c474:	mov	r5, r0
   1c478:	mov	r0, #0
   1c47c:	str	r0, [r5]
   1c480:	bl	116e8 <__ctype_b_loc@plt>
   1c484:	ldr	r1, [r0]
   1c488:	mov	r2, r4
   1c48c:	ldrb	r0, [r2], #1
   1c490:	add	r3, r1, r0, lsl #1
   1c494:	ldrb	r3, [r3, #1]
   1c498:	tst	r3, #32
   1c49c:	bne	1c48c <__assert_fail@plt+0xaba0>
   1c4a0:	cmp	r7, #0
   1c4a4:	sub	r9, fp, #32
   1c4a8:	mov	r8, #4
   1c4ac:	movne	r9, r7
   1c4b0:	cmp	r0, #45	; 0x2d
   1c4b4:	beq	1d0bc <__assert_fail@plt+0xb7d0>
   1c4b8:	mov	r0, r4
   1c4bc:	mov	r1, r9
   1c4c0:	mov	r2, r6
   1c4c4:	mov	r3, #0
   1c4c8:	bl	11580 <__strtoull_internal@plt>
   1c4cc:	mov	r7, r1
   1c4d0:	ldr	r1, [r9]
   1c4d4:	cmp	r1, r4
   1c4d8:	beq	1c504 <__assert_fail@plt+0xac18>
   1c4dc:	mov	r6, r0
   1c4e0:	ldr	r0, [r5]
   1c4e4:	cmp	r0, #0
   1c4e8:	beq	1c540 <__assert_fail@plt+0xac54>
   1c4ec:	cmp	r0, #34	; 0x22
   1c4f0:	bne	1d0bc <__assert_fail@plt+0xb7d0>
   1c4f4:	mov	r8, #1
   1c4f8:	cmp	sl, #0
   1c4fc:	bne	1c54c <__assert_fail@plt+0xac60>
   1c500:	b	1d0b4 <__assert_fail@plt+0xb7c8>
   1c504:	cmp	sl, #0
   1c508:	beq	1d0bc <__assert_fail@plt+0xb7d0>
   1c50c:	mov	r5, r1
   1c510:	ldrb	r1, [r4]
   1c514:	cmp	r1, #0
   1c518:	beq	1d0bc <__assert_fail@plt+0xb7d0>
   1c51c:	mov	r0, sl
   1c520:	bl	11724 <strchr@plt>
   1c524:	cmp	r0, #0
   1c528:	beq	1d0bc <__assert_fail@plt+0xb7d0>
   1c52c:	mov	r1, r5
   1c530:	mov	r8, #0
   1c534:	mov	r6, #1
   1c538:	mov	r7, #0
   1c53c:	b	1c54c <__assert_fail@plt+0xac60>
   1c540:	mov	r8, r0
   1c544:	cmp	sl, #0
   1c548:	beq	1d0b4 <__assert_fail@plt+0xb7c8>
   1c54c:	ldrb	r4, [r1]
   1c550:	cmp	r4, #0
   1c554:	beq	1d0b4 <__assert_fail@plt+0xb7c8>
   1c558:	str	r1, [sp, #32]
   1c55c:	mov	r0, sl
   1c560:	mov	r1, r4
   1c564:	bl	11724 <strchr@plt>
   1c568:	cmp	r0, #0
   1c56c:	beq	1c834 <__assert_fail@plt+0xaf48>
   1c570:	sub	r0, r4, #69	; 0x45
   1c574:	mov	r1, #1
   1c578:	mov	r3, #0
   1c57c:	mov	r5, #1024	; 0x400
   1c580:	cmp	r0, #47	; 0x2f
   1c584:	str	r1, [sp, #28]
   1c588:	bhi	1c68c <__assert_fail@plt+0xada0>
   1c58c:	add	r1, pc, #0
   1c590:	ldr	pc, [r1, r0, lsl #2]
   1c594:	andeq	ip, r1, r4, asr r6
   1c598:	andeq	ip, r1, ip, lsl #13
   1c59c:	andeq	ip, r1, r4, asr r6
   1c5a0:	andeq	ip, r1, ip, lsl #13
   1c5a4:	andeq	ip, r1, ip, lsl #13
   1c5a8:	andeq	ip, r1, ip, lsl #13
   1c5ac:	andeq	ip, r1, r4, asr r6
   1c5b0:	andeq	ip, r1, ip, lsl #13
   1c5b4:	andeq	ip, r1, r4, asr r6
   1c5b8:	andeq	ip, r1, ip, lsl #13
   1c5bc:	andeq	ip, r1, ip, lsl #13
   1c5c0:	andeq	ip, r1, r4, asr r6
   1c5c4:	andeq	ip, r1, ip, lsl #13
   1c5c8:	andeq	ip, r1, ip, lsl #13
   1c5cc:	andeq	ip, r1, ip, lsl #13
   1c5d0:	andeq	ip, r1, r4, asr r6
   1c5d4:	andeq	ip, r1, ip, lsl #13
   1c5d8:	andeq	ip, r1, ip, lsl #13
   1c5dc:	andeq	ip, r1, ip, lsl #13
   1c5e0:	andeq	ip, r1, ip, lsl #13
   1c5e4:	andeq	ip, r1, r4, asr r6
   1c5e8:	andeq	ip, r1, r4, asr r6
   1c5ec:	andeq	ip, r1, ip, lsl #13
   1c5f0:	andeq	ip, r1, ip, lsl #13
   1c5f4:	andeq	ip, r1, ip, lsl #13
   1c5f8:	andeq	ip, r1, ip, lsl #13
   1c5fc:	andeq	ip, r1, ip, lsl #13
   1c600:	andeq	ip, r1, ip, lsl #13
   1c604:	andeq	ip, r1, ip, lsl #13
   1c608:	andeq	ip, r1, ip, lsl #13
   1c60c:	andeq	ip, r1, ip, lsl #13
   1c610:	andeq	ip, r1, ip, lsl #13
   1c614:	andeq	ip, r1, ip, lsl #13
   1c618:	andeq	ip, r1, ip, lsl #13
   1c61c:	andeq	ip, r1, r4, asr r6
   1c620:	andeq	ip, r1, ip, lsl #13
   1c624:	andeq	ip, r1, ip, lsl #13
   1c628:	andeq	ip, r1, ip, lsl #13
   1c62c:	andeq	ip, r1, r4, asr r6
   1c630:	andeq	ip, r1, ip, lsl #13
   1c634:	andeq	ip, r1, r4, asr r6
   1c638:	andeq	ip, r1, ip, lsl #13
   1c63c:	andeq	ip, r1, ip, lsl #13
   1c640:	andeq	ip, r1, ip, lsl #13
   1c644:	andeq	ip, r1, ip, lsl #13
   1c648:	andeq	ip, r1, ip, lsl #13
   1c64c:	andeq	ip, r1, ip, lsl #13
   1c650:	andeq	ip, r1, r4, asr r6
   1c654:	mov	r0, sl
   1c658:	mov	r1, #48	; 0x30
   1c65c:	bl	11724 <strchr@plt>
   1c660:	cmp	r0, #0
   1c664:	beq	1c688 <__assert_fail@plt+0xad9c>
   1c668:	ldr	r1, [sp, #32]
   1c66c:	ldrb	r0, [r1, #1]
   1c670:	cmp	r0, #66	; 0x42
   1c674:	cmpne	r0, #68	; 0x44
   1c678:	bne	1c840 <__assert_fail@plt+0xaf54>
   1c67c:	mov	r5, #1000	; 0x3e8
   1c680:	mov	r0, #2
   1c684:	str	r0, [sp, #28]
   1c688:	mov	r3, #0
   1c68c:	sub	r0, r4, #66	; 0x42
   1c690:	cmp	r0, #53	; 0x35
   1c694:	bhi	1c834 <__assert_fail@plt+0xaf48>
   1c698:	add	r1, pc, #0
   1c69c:	ldr	pc, [r1, r0, lsl #2]
   1c6a0:			; <UNDEFINED> instruction: 0x0001cbbc
   1c6a4:	andeq	ip, r1, r4, lsr r8
   1c6a8:	andeq	ip, r1, r4, lsr r8
   1c6ac:	andeq	ip, r1, r4, ror #23
   1c6b0:	andeq	ip, r1, r4, lsr r8
   1c6b4:	andeq	ip, r1, r8, ror r7
   1c6b8:	andeq	ip, r1, r4, lsr r8
   1c6bc:	andeq	ip, r1, r4, lsr r8
   1c6c0:	andeq	ip, r1, r4, lsr r8
   1c6c4:	andeq	ip, r1, r4, ror #16
   1c6c8:	andeq	ip, r1, r4, lsr r8
   1c6cc:	andeq	ip, r1, ip, lsr #17
   1c6d0:	andeq	ip, r1, r4, lsr r8
   1c6d4:	andeq	ip, r1, r4, lsr r8
   1c6d8:	andeq	ip, r1, ip, lsr sp
   1c6dc:	andeq	ip, r1, r4, lsr r8
   1c6e0:	andeq	ip, r1, r4, lsr r8
   1c6e4:	andeq	ip, r1, r4, lsr r8
   1c6e8:	andeq	ip, r1, r8, lsr r9
   1c6ec:	andeq	ip, r1, r4, lsr r8
   1c6f0:	andeq	ip, r1, r4, lsr r8
   1c6f4:	andeq	ip, r1, r4, lsr r8
   1c6f8:	andeq	ip, r1, r4, lsr r8
   1c6fc:	andeq	ip, r1, r4, ror #28
   1c700:	andeq	ip, r1, r0, lsr #20
   1c704:	andeq	ip, r1, r4, lsr r8
   1c708:	andeq	ip, r1, r4, lsr r8
   1c70c:	andeq	ip, r1, r4, lsr r8
   1c710:	andeq	ip, r1, r4, lsr r8
   1c714:	andeq	ip, r1, r4, lsr r8
   1c718:	andeq	ip, r1, r4, lsr r8
   1c71c:	andeq	ip, r1, r4, lsr r8
   1c720:	andeq	sp, r1, ip, lsr r0
   1c724:	muleq	r1, r4, r0
   1c728:	andeq	ip, r1, r4, lsr r8
   1c72c:	andeq	ip, r1, r4, lsr r8
   1c730:	andeq	ip, r1, r4, lsr r8
   1c734:	andeq	ip, r1, r8, ror r7
   1c738:	andeq	ip, r1, r4, lsr r8
   1c73c:	andeq	ip, r1, r4, lsr r8
   1c740:	andeq	ip, r1, r4, lsr r8
   1c744:	andeq	ip, r1, r4, ror #16
   1c748:	andeq	ip, r1, r4, lsr r8
   1c74c:	andeq	ip, r1, ip, lsr #17
   1c750:	andeq	ip, r1, r4, lsr r8
   1c754:	andeq	ip, r1, r4, lsr r8
   1c758:	andeq	ip, r1, r4, lsr r8
   1c75c:	andeq	ip, r1, r4, lsr r8
   1c760:	andeq	ip, r1, r4, lsr r8
   1c764:	andeq	ip, r1, r4, lsr r8
   1c768:	andeq	ip, r1, r8, lsr r9
   1c76c:	andeq	ip, r1, r4, lsr r8
   1c770:	andeq	ip, r1, r4, lsr r8
   1c774:	andeq	sp, r1, r0, ror r0
   1c778:	mvn	r0, #0
   1c77c:	mvn	r1, #0
   1c780:	mov	r2, r5
   1c784:	mov	sl, r3
   1c788:	bl	1f004 <__assert_fail@plt+0xd718>
   1c78c:	subs	r3, r0, r6
   1c790:	umull	r4, r2, r6, r5
   1c794:	mov	lr, #0
   1c798:	str	r1, [sp, #20]
   1c79c:	sbcs	r3, r1, r7
   1c7a0:	movwcc	lr, #1
   1c7a4:	mla	ip, r6, sl, r2
   1c7a8:	mov	r2, r1
   1c7ac:	mov	r2, #0
   1c7b0:	cmp	lr, #0
   1c7b4:	mla	r7, r7, r5, ip
   1c7b8:	mvnne	r4, #0
   1c7bc:	mvnne	r7, #0
   1c7c0:	subs	r6, r0, r4
   1c7c4:	sbcs	r6, r1, r7
   1c7c8:	umull	r3, r6, r4, r5
   1c7cc:	movwcc	r2, #1
   1c7d0:	cmp	r2, #0
   1c7d4:	mvnne	r3, #0
   1c7d8:	cmp	r2, #0
   1c7dc:	str	r6, [sp, #16]
   1c7e0:	umull	r6, ip, r3, r5
   1c7e4:	mla	r1, r3, sl, ip
   1c7e8:	ldr	ip, [sp, #16]
   1c7ec:	str	r1, [sp, #12]
   1c7f0:	mla	r4, r4, sl, ip
   1c7f4:	mla	r4, r7, r5, r4
   1c7f8:	mvnne	r4, #0
   1c7fc:	subs	r0, r0, r3
   1c800:	ldr	r0, [sp, #20]
   1c804:	ldr	r7, [sp, #12]
   1c808:	sbcs	r0, r0, r4
   1c80c:	mov	r0, #0
   1c810:	mla	r7, r4, r5, r7
   1c814:	movwcc	r0, #1
   1c818:	cmp	r0, #0
   1c81c:	mov	r1, r0
   1c820:	orr	r0, lr, r2
   1c824:	mvnne	r7, #0
   1c828:	mvnne	r6, #0
   1c82c:	orr	r3, r0, r1
   1c830:	b	1d094 <__assert_fail@plt+0xb7a8>
   1c834:	ldr	r0, [sp, #36]	; 0x24
   1c838:	orr	r8, r8, #2
   1c83c:	b	1d0b8 <__assert_fail@plt+0xb7cc>
   1c840:	cmp	r0, #105	; 0x69
   1c844:	mov	r3, #0
   1c848:	bne	1c68c <__assert_fail@plt+0xada0>
   1c84c:	ldrb	r0, [r1, #2]
   1c850:	mov	r1, #1
   1c854:	cmp	r0, #66	; 0x42
   1c858:	movweq	r1, #3
   1c85c:	str	r1, [sp, #28]
   1c860:	b	1c68c <__assert_fail@plt+0xada0>
   1c864:	mvn	r0, #0
   1c868:	mvn	r1, #0
   1c86c:	mov	r2, r5
   1c870:	mov	r4, r3
   1c874:	bl	1f004 <__assert_fail@plt+0xd718>
   1c878:	subs	r0, r0, r6
   1c87c:	mov	r2, #0
   1c880:	sbcs	r0, r1, r7
   1c884:	umull	r0, r1, r6, r5
   1c888:	movwcc	r2, #1
   1c88c:	cmp	r2, #0
   1c890:	mla	r1, r6, r4, r1
   1c894:	mov	r3, r2
   1c898:	mvnne	r0, #0
   1c89c:	mla	r7, r7, r5, r1
   1c8a0:	mvnne	r7, #0
   1c8a4:	mov	r6, r0
   1c8a8:	b	1d094 <__assert_fail@plt+0xb7a8>
   1c8ac:	mvn	r0, #0
   1c8b0:	mvn	r1, #0
   1c8b4:	mov	r2, r5
   1c8b8:	str	r3, [sp, #24]
   1c8bc:	bl	1f004 <__assert_fail@plt+0xd718>
   1c8c0:	subs	r3, r0, r6
   1c8c4:	mov	ip, r0
   1c8c8:	umull	r4, r0, r6, r5
   1c8cc:	mov	sl, #0
   1c8d0:	sbcs	r3, r1, r7
   1c8d4:	mov	r3, #0
   1c8d8:	movwcc	r3, #1
   1c8dc:	cmp	r3, #0
   1c8e0:	str	r0, [sp, #20]
   1c8e4:	ldr	r0, [sp, #24]
   1c8e8:	mvnne	r4, #0
   1c8ec:	cmp	r3, #0
   1c8f0:	umull	lr, r2, r4, r5
   1c8f4:	mla	r2, r4, r0, r2
   1c8f8:	str	r2, [sp, #16]
   1c8fc:	ldr	r2, [sp, #20]
   1c900:	mla	r6, r6, r0, r2
   1c904:	ldr	r0, [sp, #16]
   1c908:	mla	r6, r7, r5, r6
   1c90c:	mvnne	r6, #0
   1c910:	mla	r7, r6, r5, r0
   1c914:	subs	r0, ip, r4
   1c918:	sbcs	r0, r1, r6
   1c91c:	movwcc	sl, #1
   1c920:	cmp	sl, #0
   1c924:	orr	r3, r3, sl
   1c928:	mvnne	lr, #0
   1c92c:	mvnne	r7, #0
   1c930:	mov	r6, lr
   1c934:	b	1d094 <__assert_fail@plt+0xb7a8>
   1c938:	mvn	r0, #0
   1c93c:	mvn	r1, #0
   1c940:	mov	r2, r5
   1c944:	mov	sl, r3
   1c948:	bl	1f004 <__assert_fail@plt+0xd718>
   1c94c:	subs	r3, r0, r6
   1c950:	mov	ip, r1
   1c954:	umull	r2, lr, r6, r5
   1c958:	str	r0, [sp, #20]
   1c95c:	sbcs	r3, r1, r7
   1c960:	mov	r1, #0
   1c964:	str	ip, [sp, #16]
   1c968:	movwcc	r1, #1
   1c96c:	mla	r6, r6, sl, lr
   1c970:	mov	lr, #0
   1c974:	cmp	r1, #0
   1c978:	mla	r7, r7, r5, r6
   1c97c:	mvnne	r2, #0
   1c980:	cmp	r1, #0
   1c984:	umull	r3, r4, r2, r5
   1c988:	mvnne	r7, #0
   1c98c:	mla	r4, r2, sl, r4
   1c990:	subs	r2, r0, r2
   1c994:	sbcs	r2, ip, r7
   1c998:	mla	r4, r7, r5, r4
   1c99c:	mov	r2, #0
   1c9a0:	movwcc	lr, #1
   1c9a4:	cmp	lr, #0
   1c9a8:	mvnne	r3, #0
   1c9ac:	mvnne	r4, #0
   1c9b0:	subs	r7, r0, r3
   1c9b4:	mov	r0, r5
   1c9b8:	sbcs	r7, ip, r4
   1c9bc:	umull	r5, r7, r3, r5
   1c9c0:	movwcc	r2, #1
   1c9c4:	cmp	r2, #0
   1c9c8:	mla	r3, r3, sl, r7
   1c9cc:	mvnne	r5, #0
   1c9d0:	cmp	r2, #0
   1c9d4:	mla	r3, r4, r0, r3
   1c9d8:	umull	r6, ip, r5, r0
   1c9dc:	mvnne	r3, #0
   1c9e0:	mla	ip, r5, sl, ip
   1c9e4:	mla	r7, r3, r0, ip
   1c9e8:	ldr	r0, [sp, #20]
   1c9ec:	subs	r0, r0, r5
   1c9f0:	ldr	r0, [sp, #16]
   1c9f4:	sbcs	r0, r0, r3
   1c9f8:	mov	r0, #0
   1c9fc:	movwcc	r0, #1
   1ca00:	cmp	r0, #0
   1ca04:	mov	r3, r0
   1ca08:	orr	r0, r1, lr
   1ca0c:	orr	r0, r0, r2
   1ca10:	mvnne	r7, #0
   1ca14:	mvnne	r6, #0
   1ca18:	orr	r3, r0, r3
   1ca1c:	b	1d094 <__assert_fail@plt+0xb7a8>
   1ca20:	mvn	r0, #0
   1ca24:	mvn	r1, #0
   1ca28:	mov	r2, r5
   1ca2c:	mov	r4, r3
   1ca30:	str	r3, [sp, #24]
   1ca34:	bl	1f004 <__assert_fail@plt+0xd718>
   1ca38:	umull	r3, r2, r6, r5
   1ca3c:	mla	r2, r6, r4, r2
   1ca40:	subs	r6, r0, r6
   1ca44:	sbcs	r6, r1, r7
   1ca48:	mov	r6, #0
   1ca4c:	mla	ip, r7, r5, r2
   1ca50:	ldr	r2, [sp, #24]
   1ca54:	movwcc	r6, #1
   1ca58:	cmp	r6, #0
   1ca5c:	str	r6, [sp, #20]
   1ca60:	mov	r6, #0
   1ca64:	mvnne	r3, #0
   1ca68:	mvnne	ip, #0
   1ca6c:	subs	r4, r0, r3
   1ca70:	umull	r7, lr, r3, r5
   1ca74:	sbcs	r4, r1, ip
   1ca78:	movwcc	r6, #1
   1ca7c:	mla	r3, r3, r2, lr
   1ca80:	cmp	r6, #0
   1ca84:	str	r6, [sp, #16]
   1ca88:	mvnne	r7, #0
   1ca8c:	cmp	r6, #0
   1ca90:	umull	sl, r4, r7, r5
   1ca94:	mla	r4, r7, r2, r4
   1ca98:	mla	r2, ip, r5, r3
   1ca9c:	mvnne	r2, #0
   1caa0:	subs	r3, r0, r7
   1caa4:	mov	ip, #0
   1caa8:	mla	r6, r2, r5, r4
   1caac:	sbcs	r2, r1, r2
   1cab0:	mov	r4, r0
   1cab4:	mov	r0, #0
   1cab8:	movwcc	r0, #1
   1cabc:	mov	r3, r4
   1cac0:	cmp	r0, #0
   1cac4:	str	r0, [sp, #12]
   1cac8:	mov	r0, r1
   1cacc:	str	r3, [sp, #4]
   1cad0:	mvnne	sl, #0
   1cad4:	mvnne	r6, #0
   1cad8:	str	r0, [sp, #8]
   1cadc:	subs	r2, r4, sl
   1cae0:	ldr	r4, [sp, #24]
   1cae4:	sbcs	r2, r1, r6
   1cae8:	umull	r7, r2, sl, r5
   1caec:	movwcc	ip, #1
   1caf0:	cmp	ip, #0
   1caf4:	mvnne	r7, #0
   1caf8:	mla	r2, sl, r4, r2
   1cafc:	cmp	ip, #0
   1cb00:	mov	sl, #0
   1cb04:	umull	r1, lr, r7, r5
   1cb08:	mla	r2, r6, r5, r2
   1cb0c:	mvnne	r2, #0
   1cb10:	subs	r6, r3, r7
   1cb14:	mla	lr, r7, r4, lr
   1cb18:	mla	lr, r2, r5, lr
   1cb1c:	sbcs	r2, r0, r2
   1cb20:	mov	r2, #0
   1cb24:	movwcc	sl, #1
   1cb28:	cmp	sl, #0
   1cb2c:	mvnne	r1, #0
   1cb30:	mvnne	lr, #0
   1cb34:	subs	r6, r3, r1
   1cb38:	ldr	r3, [sp, #24]
   1cb3c:	sbcs	r6, r0, lr
   1cb40:	umull	r0, r7, r1, r5
   1cb44:	movwcc	r2, #1
   1cb48:	cmp	r2, #0
   1cb4c:	mvnne	r0, #0
   1cb50:	mla	r1, r1, r3, r7
   1cb54:	cmp	r2, #0
   1cb58:	umull	r6, r4, r0, r5
   1cb5c:	mla	r1, lr, r5, r1
   1cb60:	mvnne	r1, #0
   1cb64:	mla	r4, r0, r3, r4
   1cb68:	ldr	r3, [sp, #4]
   1cb6c:	mla	r7, r1, r5, r4
   1cb70:	ldr	r5, [sp, #16]
   1cb74:	subs	r0, r3, r0
   1cb78:	ldr	r0, [sp, #8]
   1cb7c:	sbcs	r0, r0, r1
   1cb80:	mov	r0, #0
   1cb84:	movwcc	r0, #1
   1cb88:	cmp	r0, #0
   1cb8c:	mov	r1, r0
   1cb90:	ldr	r0, [sp, #20]
   1cb94:	mvnne	r7, #0
   1cb98:	mvnne	r6, #0
   1cb9c:	orr	r0, r0, r5
   1cba0:	ldr	r5, [sp, #12]
   1cba4:	orr	r0, r0, r5
   1cba8:	orr	r0, r0, ip
   1cbac:	orr	r0, r0, sl
   1cbb0:	orr	r0, r0, r2
   1cbb4:	orr	r0, r0, r1
   1cbb8:	b	1d034 <__assert_fail@plt+0xb748>
   1cbbc:	mov	r1, #0
   1cbc0:	lsl	r2, r7, #10
   1cbc4:	lsl	r0, r6, #10
   1cbc8:	lsr	r3, r7, #22
   1cbcc:	cmp	r1, r7, lsr #22
   1cbd0:	orr	r2, r2, r6, lsr #22
   1cbd4:	mvnne	r0, #0
   1cbd8:	movwne	r3, #1
   1cbdc:	cmp	r1, r7, lsr #22
   1cbe0:	b	1d060 <__assert_fail@plt+0xb774>
   1cbe4:	mvn	r0, #0
   1cbe8:	mvn	r1, #0
   1cbec:	mov	r2, r5
   1cbf0:	mov	sl, r3
   1cbf4:	bl	1f004 <__assert_fail@plt+0xd718>
   1cbf8:	subs	r2, r0, r6
   1cbfc:	mov	ip, r0
   1cc00:	mov	r0, #0
   1cc04:	sbcs	r2, r1, r7
   1cc08:	umull	r4, r2, r6, r5
   1cc0c:	movwcc	r0, #1
   1cc10:	cmp	r0, #0
   1cc14:	mla	r2, r6, sl, r2
   1cc18:	str	r0, [sp, #20]
   1cc1c:	mvnne	r4, #0
   1cc20:	cmp	r0, #0
   1cc24:	mla	r2, r7, r5, r2
   1cc28:	mov	r0, #0
   1cc2c:	umull	lr, r3, r4, r5
   1cc30:	mvnne	r2, #0
   1cc34:	mla	r3, r4, sl, r3
   1cc38:	mla	r6, r2, r5, r3
   1cc3c:	subs	r3, ip, r4
   1cc40:	mov	r3, r1
   1cc44:	sbcs	r2, r1, r2
   1cc48:	str	r3, [sp, #8]
   1cc4c:	movwcc	r0, #1
   1cc50:	cmp	r0, #0
   1cc54:	str	r0, [sp, #16]
   1cc58:	mov	r0, ip
   1cc5c:	mvnne	lr, #0
   1cc60:	mvnne	r6, #0
   1cc64:	str	r0, [sp, #12]
   1cc68:	subs	r2, ip, lr
   1cc6c:	umull	r7, r4, lr, r5
   1cc70:	sbcs	r2, r1, r6
   1cc74:	mov	r2, #0
   1cc78:	movwcc	r2, #1
   1cc7c:	mla	r4, lr, sl, r4
   1cc80:	cmp	r2, #0
   1cc84:	mla	r6, r6, r5, r4
   1cc88:	mov	r4, #0
   1cc8c:	mvnne	r7, #0
   1cc90:	cmp	r2, #0
   1cc94:	umull	r1, ip, r7, r5
   1cc98:	mvnne	r6, #0
   1cc9c:	mla	ip, r7, sl, ip
   1cca0:	subs	r7, r0, r7
   1cca4:	sbcs	r7, r3, r6
   1cca8:	mla	lr, r6, r5, ip
   1ccac:	mov	ip, #0
   1ccb0:	movwcc	ip, #1
   1ccb4:	cmp	ip, #0
   1ccb8:	mvnne	r1, #0
   1ccbc:	mvnne	lr, #0
   1ccc0:	subs	r7, r0, r1
   1ccc4:	sbcs	r7, r3, lr
   1ccc8:	umull	r0, r7, r1, r5
   1cccc:	movwcc	r4, #1
   1ccd0:	cmp	r4, #0
   1ccd4:	mla	r1, r1, sl, r7
   1ccd8:	mvnne	r0, #0
   1ccdc:	cmp	r4, #0
   1cce0:	mla	r1, lr, r5, r1
   1cce4:	umull	r6, r3, r0, r5
   1cce8:	mvnne	r1, #0
   1ccec:	mla	r3, r0, sl, r3
   1ccf0:	mla	r7, r1, r5, r3
   1ccf4:	ldr	r3, [sp, #12]
   1ccf8:	subs	r0, r3, r0
   1ccfc:	ldr	r0, [sp, #8]
   1cd00:	ldr	r3, [sp, #16]
   1cd04:	sbcs	r0, r0, r1
   1cd08:	mov	r0, #0
   1cd0c:	movwcc	r0, #1
   1cd10:	cmp	r0, #0
   1cd14:	mov	r1, r0
   1cd18:	ldr	r0, [sp, #20]
   1cd1c:	mvnne	r7, #0
   1cd20:	mvnne	r6, #0
   1cd24:	orr	r0, r0, r3
   1cd28:	orr	r0, r0, r2
   1cd2c:	orr	r0, r0, ip
   1cd30:	orr	r0, r0, r4
   1cd34:	orr	r3, r0, r1
   1cd38:	b	1d094 <__assert_fail@plt+0xb7a8>
   1cd3c:	mvn	r0, #0
   1cd40:	mvn	r1, #0
   1cd44:	mov	r2, r5
   1cd48:	mov	sl, r3
   1cd4c:	bl	1f004 <__assert_fail@plt+0xd718>
   1cd50:	umull	r3, r2, r6, r5
   1cd54:	mov	lr, r1
   1cd58:	mov	r1, r0
   1cd5c:	mla	r2, r6, sl, r2
   1cd60:	subs	r6, r0, r6
   1cd64:	mov	r0, #0
   1cd68:	sbcs	r6, lr, r7
   1cd6c:	mla	r2, r7, r5, r2
   1cd70:	movwcc	r0, #1
   1cd74:	cmp	r0, #0
   1cd78:	str	r0, [sp, #20]
   1cd7c:	mov	r0, r1
   1cd80:	mvnne	r3, #0
   1cd84:	mvnne	r2, #0
   1cd88:	str	r0, [sp, #16]
   1cd8c:	subs	r4, r1, r3
   1cd90:	umull	r7, ip, r3, r5
   1cd94:	sbcs	r4, lr, r2
   1cd98:	mov	r4, #0
   1cd9c:	movwcc	r4, #1
   1cda0:	mla	r3, r3, sl, ip
   1cda4:	mov	ip, #0
   1cda8:	cmp	r4, #0
   1cdac:	mla	r2, r2, r5, r3
   1cdb0:	mvnne	r7, #0
   1cdb4:	cmp	r4, #0
   1cdb8:	umull	r1, r6, r7, r5
   1cdbc:	mvnne	r2, #0
   1cdc0:	mla	r6, r7, sl, r6
   1cdc4:	mla	r3, r2, r5, r6
   1cdc8:	subs	r6, r0, r7
   1cdcc:	sbcs	r2, lr, r2
   1cdd0:	mov	r2, #0
   1cdd4:	movwcc	ip, #1
   1cdd8:	cmp	ip, #0
   1cddc:	mvnne	r1, #0
   1cde0:	mvnne	r3, #0
   1cde4:	subs	r6, r0, r1
   1cde8:	sbcs	r6, lr, r3
   1cdec:	umull	r0, r6, r1, r5
   1cdf0:	movwcc	r2, #1
   1cdf4:	cmp	r2, #0
   1cdf8:	mvnne	r0, #0
   1cdfc:	cmp	r2, #0
   1ce00:	str	r6, [sp, #12]
   1ce04:	umull	r6, r7, r0, r5
   1ce08:	mla	r7, r0, sl, r7
   1ce0c:	str	r7, [sp, #8]
   1ce10:	ldr	r7, [sp, #12]
   1ce14:	mla	r1, r1, sl, r7
   1ce18:	mla	r1, r3, r5, r1
   1ce1c:	ldr	r3, [sp, #8]
   1ce20:	mvnne	r1, #0
   1ce24:	mla	r7, r1, r5, r3
   1ce28:	ldr	r3, [sp, #16]
   1ce2c:	subs	r0, r3, r0
   1ce30:	sbcs	r0, lr, r1
   1ce34:	mov	r0, #0
   1ce38:	movwcc	r0, #1
   1ce3c:	cmp	r0, #0
   1ce40:	mov	r1, r0
   1ce44:	ldr	r0, [sp, #20]
   1ce48:	mvnne	r7, #0
   1ce4c:	mvnne	r6, #0
   1ce50:	orr	r0, r0, r4
   1ce54:	orr	r0, r0, ip
   1ce58:	orr	r0, r0, r2
   1ce5c:	orr	r3, r0, r1
   1ce60:	b	1d094 <__assert_fail@plt+0xb7a8>
   1ce64:	mvn	r0, #0
   1ce68:	mvn	r1, #0
   1ce6c:	mov	r2, r5
   1ce70:	mov	sl, r3
   1ce74:	bl	1f004 <__assert_fail@plt+0xd718>
   1ce78:	mov	lr, r0
   1ce7c:	subs	r0, r0, r6
   1ce80:	mov	r2, #0
   1ce84:	mov	ip, r1
   1ce88:	str	sl, [sp, #24]
   1ce8c:	sbcs	r0, r1, r7
   1ce90:	umull	r3, r1, r6, r5
   1ce94:	str	lr, [sp, #4]
   1ce98:	movwcc	r2, #1
   1ce9c:	cmp	r2, #0
   1cea0:	mla	r6, r6, sl, r1
   1cea4:	mov	r1, #0
   1cea8:	str	r2, [sp, #20]
   1ceac:	mvnne	r3, #0
   1ceb0:	cmp	r2, #0
   1ceb4:	mla	r7, r7, r5, r6
   1ceb8:	mov	r2, #0
   1cebc:	umull	r0, r4, r3, r5
   1cec0:	mvnne	r7, #0
   1cec4:	mla	r4, r3, sl, r4
   1cec8:	subs	r3, lr, r3
   1cecc:	sbcs	r3, ip, r7
   1ced0:	mla	r4, r7, r5, r4
   1ced4:	movwcc	r1, #1
   1ced8:	cmp	r1, #0
   1cedc:	str	r1, [sp, #16]
   1cee0:	mvnne	r0, #0
   1cee4:	mvnne	r4, #0
   1cee8:	subs	r3, lr, r0
   1ceec:	sbcs	r3, ip, r4
   1cef0:	umull	r6, r3, r0, r5
   1cef4:	movwcc	r2, #1
   1cef8:	cmp	r2, #0
   1cefc:	mla	r0, r0, sl, r3
   1cf00:	str	r2, [sp, #12]
   1cf04:	mvnne	r6, #0
   1cf08:	cmp	r2, #0
   1cf0c:	mla	r0, r4, r5, r0
   1cf10:	ldr	r4, [sp, #24]
   1cf14:	umull	r1, r7, r6, r5
   1cf18:	mvnne	r0, #0
   1cf1c:	subs	r3, lr, r6
   1cf20:	mov	r3, ip
   1cf24:	str	r3, [sp]
   1cf28:	mla	r7, r6, sl, r7
   1cf2c:	mla	r7, r0, r5, r7
   1cf30:	sbcs	r0, ip, r0
   1cf34:	mov	r0, #0
   1cf38:	movwcc	r0, #1
   1cf3c:	cmp	r0, #0
   1cf40:	str	r0, [sp, #8]
   1cf44:	mvnne	r1, #0
   1cf48:	mvnne	r7, #0
   1cf4c:	subs	r0, lr, r1
   1cf50:	sbcs	r0, ip, r7
   1cf54:	mov	ip, #0
   1cf58:	umull	r6, r0, r1, r5
   1cf5c:	movwcc	ip, #1
   1cf60:	cmp	ip, #0
   1cf64:	mla	r1, r1, r4, r0
   1cf68:	mov	r0, lr
   1cf6c:	mvnne	r6, #0
   1cf70:	cmp	ip, #0
   1cf74:	mla	r1, r7, r5, r1
   1cf78:	umull	r2, sl, r6, r5
   1cf7c:	mvnne	r1, #0
   1cf80:	mla	sl, r6, r4, sl
   1cf84:	subs	r6, lr, r6
   1cf88:	mov	lr, #0
   1cf8c:	mla	r7, r1, r5, sl
   1cf90:	sbcs	r1, r3, r1
   1cf94:	ldr	r1, [sp, #24]
   1cf98:	movwcc	lr, #1
   1cf9c:	cmp	lr, #0
   1cfa0:	mvnne	r2, #0
   1cfa4:	mvnne	r7, #0
   1cfa8:	subs	r6, r0, r2
   1cfac:	umull	r0, sl, r2, r5
   1cfb0:	sbcs	r6, r3, r7
   1cfb4:	mov	r3, #0
   1cfb8:	movwcc	r3, #1
   1cfbc:	mla	r2, r2, r1, sl
   1cfc0:	cmp	r3, #0
   1cfc4:	mla	r2, r7, r5, r2
   1cfc8:	mvnne	r0, #0
   1cfcc:	cmp	r3, #0
   1cfd0:	umull	r6, r4, r0, r5
   1cfd4:	mvnne	r2, #0
   1cfd8:	mla	r4, r0, r1, r4
   1cfdc:	ldr	r1, [sp, #4]
   1cfe0:	mla	r7, r2, r5, r4
   1cfe4:	ldr	r5, [sp, #16]
   1cfe8:	subs	r0, r1, r0
   1cfec:	ldr	r0, [sp]
   1cff0:	sbcs	r0, r0, r2
   1cff4:	mov	r0, #0
   1cff8:	movwcc	r0, #1
   1cffc:	cmp	r0, #0
   1d000:	mov	r2, r0
   1d004:	ldr	r0, [sp, #20]
   1d008:	mvnne	r7, #0
   1d00c:	mvnne	r6, #0
   1d010:	orr	r0, r0, r5
   1d014:	ldr	r5, [sp, #12]
   1d018:	orr	r0, r0, r5
   1d01c:	ldr	r5, [sp, #8]
   1d020:	orr	r0, r0, r5
   1d024:	orr	r0, r0, ip
   1d028:	orr	r0, r0, lr
   1d02c:	orr	r0, r0, r3
   1d030:	orr	r0, r0, r2
   1d034:	and	r3, r0, #1
   1d038:	b	1d094 <__assert_fail@plt+0xb7a8>
   1d03c:	mov	r1, #0
   1d040:	lsl	r2, r7, #9
   1d044:	lsl	r0, r6, #9
   1d048:	lsr	r3, r7, #23
   1d04c:	cmp	r1, r7, lsr #23
   1d050:	orr	r2, r2, r6, lsr #23
   1d054:	mvnne	r0, #0
   1d058:	movwne	r3, #1
   1d05c:	cmp	r1, r7, lsr #23
   1d060:	mvnne	r2, #0
   1d064:	mov	r6, r0
   1d068:	mov	r7, r2
   1d06c:	b	1d094 <__assert_fail@plt+0xb7a8>
   1d070:	lsl	r1, r7, #1
   1d074:	cmp	r7, #0
   1d078:	lsl	r0, r6, #1
   1d07c:	lsr	r3, r7, #31
   1d080:	orr	r1, r1, r6, lsr #31
   1d084:	mvnmi	r0, #0
   1d088:	mvnmi	r1, #0
   1d08c:	mov	r6, r0
   1d090:	mov	r7, r1
   1d094:	ldr	r1, [sp, #32]
   1d098:	ldr	r2, [sp, #28]
   1d09c:	orr	r8, r3, r8
   1d0a0:	add	r0, r1, r2
   1d0a4:	str	r0, [r9]
   1d0a8:	ldrb	r0, [r1, r2]
   1d0ac:	cmp	r0, #0
   1d0b0:	orrne	r8, r8, #2
   1d0b4:	ldr	r0, [sp, #36]	; 0x24
   1d0b8:	strd	r6, [r0]
   1d0bc:	mov	r0, r8
   1d0c0:	sub	sp, fp, #28
   1d0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0c8:	movw	r0, #2360	; 0x938
   1d0cc:	movw	r1, #2398	; 0x95e
   1d0d0:	movw	r3, #2414	; 0x96e
   1d0d4:	mov	r2, #85	; 0x55
   1d0d8:	movt	r0, #2
   1d0dc:	movt	r1, #2
   1d0e0:	movt	r3, #2
   1d0e4:	bl	118ec <__assert_fail@plt>
   1d0e8:	clz	r2, r1
   1d0ec:	clz	r3, r0
   1d0f0:	lsr	r2, r2, #5
   1d0f4:	lsr	r3, r3, #5
   1d0f8:	orrs	r2, r3, r2
   1d0fc:	movwne	r1, #1
   1d100:	movwne	r0, #1
   1d104:	cmp	r1, #0
   1d108:	beq	1d138 <__assert_fail@plt+0xb84c>
   1d10c:	mvn	r2, #-2147483648	; 0x80000000
   1d110:	udiv	r2, r2, r1
   1d114:	cmp	r2, r0
   1d118:	bcs	1d138 <__assert_fail@plt+0xb84c>
   1d11c:	push	{fp, lr}
   1d120:	mov	fp, sp
   1d124:	bl	11748 <__errno_location@plt>
   1d128:	mov	r1, #12
   1d12c:	str	r1, [r0]
   1d130:	mov	r0, #0
   1d134:	pop	{fp, pc}
   1d138:	b	114e4 <calloc@plt>
   1d13c:	cmp	r0, #0
   1d140:	movweq	r0, #1
   1d144:	cmn	r0, #1
   1d148:	ble	1d150 <__assert_fail@plt+0xb864>
   1d14c:	b	116ac <malloc@plt>
   1d150:	push	{fp, lr}
   1d154:	mov	fp, sp
   1d158:	bl	11748 <__errno_location@plt>
   1d15c:	mov	r1, #12
   1d160:	str	r1, [r0]
   1d164:	mov	r0, #0
   1d168:	pop	{fp, pc}
   1d16c:	push	{fp, lr}
   1d170:	mov	fp, sp
   1d174:	cmp	r0, #0
   1d178:	beq	1d194 <__assert_fail@plt+0xb8a8>
   1d17c:	cmp	r1, #0
   1d180:	beq	1d1a0 <__assert_fail@plt+0xb8b4>
   1d184:	cmn	r1, #1
   1d188:	ble	1d1ac <__assert_fail@plt+0xb8c0>
   1d18c:	pop	{fp, lr}
   1d190:	b	115bc <realloc@plt>
   1d194:	mov	r0, r1
   1d198:	pop	{fp, lr}
   1d19c:	b	1d13c <__assert_fail@plt+0xb850>
   1d1a0:	bl	16040 <__assert_fail@plt+0x4754>
   1d1a4:	mov	r0, #0
   1d1a8:	pop	{fp, pc}
   1d1ac:	bl	11748 <__errno_location@plt>
   1d1b0:	mov	r1, #12
   1d1b4:	str	r1, [r0]
   1d1b8:	mov	r0, #0
   1d1bc:	pop	{fp, pc}
   1d1c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1c4:	add	fp, sp, #28
   1d1c8:	sub	sp, sp, #44	; 0x2c
   1d1cc:	sub	sp, sp, #1024	; 0x400
   1d1d0:	mov	r6, r1
   1d1d4:	ldrb	r1, [r0]
   1d1d8:	mov	r5, r0
   1d1dc:	cmp	r1, #0
   1d1e0:	beq	1d2b0 <__assert_fail@plt+0xb9c4>
   1d1e4:	add	r0, sp, #40	; 0x28
   1d1e8:	mov	r2, #0
   1d1ec:	add	r8, r0, #16
   1d1f0:	mov	r0, #1
   1d1f4:	ldrb	r3, [r6, r2]
   1d1f8:	cmp	r3, #0
   1d1fc:	uxtbne	r1, r1
   1d200:	subne	r1, r1, r3
   1d204:	clzne	r1, r1
   1d208:	lsrne	r1, r1, #5
   1d20c:	andne	r0, r0, r1
   1d210:	addne	r1, r5, r2
   1d214:	addne	r2, r2, #1
   1d218:	ldrbne	r1, [r1, #1]
   1d21c:	cmpne	r1, #0
   1d220:	bne	1d1f4 <__assert_fail@plt+0xb908>
   1d224:	add	r2, r6, r2
   1d228:	mov	r4, r5
   1d22c:	ldrb	r1, [r2]
   1d230:	cmp	r1, #0
   1d234:	movwne	r4, #0
   1d238:	tst	r0, #1
   1d23c:	cmpeq	r1, #0
   1d240:	bne	1d2c0 <__assert_fail@plt+0xb9d4>
   1d244:	ldrb	r1, [r6]
   1d248:	add	r0, r5, #1
   1d24c:	str	r2, [sp, #28]
   1d250:	sub	r4, r2, r6
   1d254:	bl	11724 <strchr@plt>
   1d258:	cmp	r4, #1
   1d25c:	str	r4, [sp, #32]
   1d260:	beq	1d2cc <__assert_fail@plt+0xb9e0>
   1d264:	ldr	r3, [sp, #28]
   1d268:	cmp	r0, #0
   1d26c:	mov	r4, r0
   1d270:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1d274:	ldr	r1, [sp, #32]
   1d278:	str	r0, [sp, #36]	; 0x24
   1d27c:	add	r2, r5, r1
   1d280:	mov	r5, r1
   1d284:	subs	r1, r2, r0
   1d288:	sub	sl, r3, r5
   1d28c:	movwcc	r1, #1
   1d290:	cmp	r5, #31
   1d294:	bhi	1d2d4 <__assert_fail@plt+0xb9e8>
   1d298:	mov	r8, r1
   1d29c:	cmp	r5, #3
   1d2a0:	bcs	1d3d0 <__assert_fail@plt+0xbae4>
   1d2a4:	sub	r7, r5, #1
   1d2a8:	mov	r9, #1
   1d2ac:	b	1da58 <__assert_fail@plt+0xc16c>
   1d2b0:	ldrb	r0, [r6]
   1d2b4:	cmp	r0, #0
   1d2b8:	movne	r5, #0
   1d2bc:	mov	r4, r5
   1d2c0:	mov	r0, r4
   1d2c4:	sub	sp, fp, #28
   1d2c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2cc:	mov	r4, r0
   1d2d0:	b	1d2c0 <__assert_fail@plt+0xb9d4>
   1d2d4:	rsb	r0, r5, #0
   1d2d8:	str	r1, [sp, #16]
   1d2dc:	mov	r2, #0
   1d2e0:	mov	r1, #1
   1d2e4:	mov	ip, #1
   1d2e8:	mov	r3, #1
   1d2ec:	str	r0, [sp, #12]
   1d2f0:	mvn	r0, #0
   1d2f4:	b	1d310 <__assert_fail@plt+0xba24>
   1d2f8:	sub	ip, r1, r0
   1d2fc:	mov	r3, #1
   1d300:	mov	r2, r1
   1d304:	add	r1, r3, r2
   1d308:	cmp	r1, r5
   1d30c:	bcs	1d350 <__assert_fail@plt+0xba64>
   1d310:	add	r4, r0, r3
   1d314:	ldrb	r7, [sl, r1]
   1d318:	ldrb	r4, [sl, r4]
   1d31c:	cmp	r7, r4
   1d320:	bcc	1d2f8 <__assert_fail@plt+0xba0c>
   1d324:	bne	1d33c <__assert_fail@plt+0xba50>
   1d328:	cmp	r3, ip
   1d32c:	addne	r3, r3, #1
   1d330:	addeq	r2, r2, ip
   1d334:	moveq	r3, #1
   1d338:	b	1d304 <__assert_fail@plt+0xba18>
   1d33c:	add	r1, r2, #1
   1d340:	mov	r0, r2
   1d344:	mov	r3, #1
   1d348:	mov	ip, #1
   1d34c:	b	1d300 <__assert_fail@plt+0xba14>
   1d350:	cmp	r5, #2
   1d354:	bcc	1d440 <__assert_fail@plt+0xbb54>
   1d358:	mvn	lr, #0
   1d35c:	mov	r2, #0
   1d360:	mov	r3, #1
   1d364:	mov	r9, #1
   1d368:	mov	r4, #1
   1d36c:	b	1d388 <__assert_fail@plt+0xba9c>
   1d370:	sub	r9, r3, lr
   1d374:	mov	r4, #1
   1d378:	mov	r2, r3
   1d37c:	add	r3, r4, r2
   1d380:	cmp	r3, r5
   1d384:	bcs	1d448 <__assert_fail@plt+0xbb5c>
   1d388:	add	r7, lr, r4
   1d38c:	ldrb	r1, [sl, r3]
   1d390:	ldrb	r7, [sl, r7]
   1d394:	cmp	r7, r1
   1d398:	bcc	1d370 <__assert_fail@plt+0xba84>
   1d39c:	cmp	r1, r7
   1d3a0:	bne	1d3b8 <__assert_fail@plt+0xbacc>
   1d3a4:	cmp	r4, r9
   1d3a8:	addne	r4, r4, #1
   1d3ac:	addeq	r2, r2, r9
   1d3b0:	moveq	r4, #1
   1d3b4:	b	1d37c <__assert_fail@plt+0xba90>
   1d3b8:	add	r1, r2, #1
   1d3bc:	mov	lr, r2
   1d3c0:	mov	r4, #1
   1d3c4:	mov	r9, #1
   1d3c8:	mov	r2, r1
   1d3cc:	b	1d37c <__assert_fail@plt+0xba90>
   1d3d0:	mvn	r1, #0
   1d3d4:	mov	r0, #0
   1d3d8:	mov	r2, #1
   1d3dc:	mov	ip, #1
   1d3e0:	mov	r3, #1
   1d3e4:	b	1d400 <__assert_fail@plt+0xbb14>
   1d3e8:	sub	ip, r2, r1
   1d3ec:	mov	r3, #1
   1d3f0:	mov	r0, r2
   1d3f4:	add	r2, r3, r0
   1d3f8:	cmp	r2, r5
   1d3fc:	bcs	1d84c <__assert_fail@plt+0xbf60>
   1d400:	add	r4, r1, r3
   1d404:	ldrb	r7, [sl, r2]
   1d408:	ldrb	r4, [sl, r4]
   1d40c:	cmp	r7, r4
   1d410:	bcc	1d3e8 <__assert_fail@plt+0xbafc>
   1d414:	bne	1d42c <__assert_fail@plt+0xbb40>
   1d418:	cmp	r3, ip
   1d41c:	addne	r3, r3, #1
   1d420:	addeq	r0, r0, ip
   1d424:	moveq	r3, #1
   1d428:	b	1d3f4 <__assert_fail@plt+0xbb08>
   1d42c:	add	r2, r0, #1
   1d430:	mov	r1, r0
   1d434:	mov	r3, #1
   1d438:	mov	ip, #1
   1d43c:	b	1d3f0 <__assert_fail@plt+0xbb04>
   1d440:	mov	r9, #1
   1d444:	mvn	lr, #0
   1d448:	vdup.32	q8, r5
   1d44c:	add	r2, sp, #40	; 0x28
   1d450:	add	r1, r8, #976	; 0x3d0
   1d454:	vst1.32	{d16-d17}, [r2]
   1d458:	vst1.32	{d16-d17}, [r1]
   1d45c:	add	r1, r8, #960	; 0x3c0
   1d460:	vst1.32	{d16-d17}, [r1]
   1d464:	add	r1, r8, #944	; 0x3b0
   1d468:	vst1.32	{d16-d17}, [r1]
   1d46c:	add	r1, r8, #928	; 0x3a0
   1d470:	vst1.32	{d16-d17}, [r1]
   1d474:	add	r1, r8, #912	; 0x390
   1d478:	vst1.32	{d16-d17}, [r1]
   1d47c:	add	r1, r8, #896	; 0x380
   1d480:	vst1.32	{d16-d17}, [r1]
   1d484:	add	r1, r8, #880	; 0x370
   1d488:	vst1.32	{d16-d17}, [r1]
   1d48c:	add	r1, r8, #864	; 0x360
   1d490:	vst1.32	{d16-d17}, [r1]
   1d494:	add	r1, r8, #848	; 0x350
   1d498:	vst1.32	{d16-d17}, [r1]
   1d49c:	add	r1, r8, #832	; 0x340
   1d4a0:	vst1.32	{d16-d17}, [r1]
   1d4a4:	add	r1, r8, #816	; 0x330
   1d4a8:	vst1.32	{d16-d17}, [r1]
   1d4ac:	add	r1, r8, #800	; 0x320
   1d4b0:	vst1.32	{d16-d17}, [r1]
   1d4b4:	add	r1, r8, #784	; 0x310
   1d4b8:	vst1.32	{d16-d17}, [r1]
   1d4bc:	add	r1, r8, #768	; 0x300
   1d4c0:	vst1.32	{d16-d17}, [r1]
   1d4c4:	add	r1, r8, #752	; 0x2f0
   1d4c8:	vst1.32	{d16-d17}, [r1]
   1d4cc:	add	r1, r8, #736	; 0x2e0
   1d4d0:	vst1.32	{d16-d17}, [r1]
   1d4d4:	add	r1, r8, #720	; 0x2d0
   1d4d8:	vst1.32	{d16-d17}, [r1]
   1d4dc:	add	r1, r8, #704	; 0x2c0
   1d4e0:	vst1.32	{d16-d17}, [r1]
   1d4e4:	add	r1, r8, #688	; 0x2b0
   1d4e8:	vst1.32	{d16-d17}, [r1]
   1d4ec:	add	r1, r8, #672	; 0x2a0
   1d4f0:	vst1.32	{d16-d17}, [r1]
   1d4f4:	add	r1, r8, #656	; 0x290
   1d4f8:	vst1.32	{d16-d17}, [r1]
   1d4fc:	add	r1, r8, #640	; 0x280
   1d500:	vst1.32	{d16-d17}, [r1]
   1d504:	add	r1, r8, #624	; 0x270
   1d508:	vst1.32	{d16-d17}, [r1]
   1d50c:	add	r1, r8, #608	; 0x260
   1d510:	vst1.32	{d16-d17}, [r1]
   1d514:	add	r1, r8, #592	; 0x250
   1d518:	vst1.32	{d16-d17}, [r1]
   1d51c:	add	r1, r8, #576	; 0x240
   1d520:	vst1.32	{d16-d17}, [r1]
   1d524:	add	r1, r8, #560	; 0x230
   1d528:	vst1.32	{d16-d17}, [r1]
   1d52c:	add	r1, r8, #544	; 0x220
   1d530:	vst1.32	{d16-d17}, [r1]
   1d534:	add	r1, r8, #528	; 0x210
   1d538:	vst1.32	{d16-d17}, [r1]
   1d53c:	add	r1, r8, #512	; 0x200
   1d540:	vst1.32	{d16-d17}, [r1]
   1d544:	add	r1, r8, #496	; 0x1f0
   1d548:	vst1.32	{d16-d17}, [r1]
   1d54c:	add	r1, r8, #480	; 0x1e0
   1d550:	vst1.32	{d16-d17}, [r1]
   1d554:	add	r1, r8, #464	; 0x1d0
   1d558:	vst1.32	{d16-d17}, [r1]
   1d55c:	add	r1, r8, #448	; 0x1c0
   1d560:	vst1.32	{d16-d17}, [r1]
   1d564:	add	r1, r8, #432	; 0x1b0
   1d568:	vst1.32	{d16-d17}, [r1]
   1d56c:	add	r1, r8, #416	; 0x1a0
   1d570:	vst1.32	{d16-d17}, [r1]
   1d574:	add	r1, r8, #400	; 0x190
   1d578:	vst1.32	{d16-d17}, [r1]
   1d57c:	add	r1, r8, #384	; 0x180
   1d580:	vst1.32	{d16-d17}, [r1]
   1d584:	add	r1, r8, #368	; 0x170
   1d588:	vst1.32	{d16-d17}, [r1]
   1d58c:	add	r1, r8, #352	; 0x160
   1d590:	vst1.32	{d16-d17}, [r1]
   1d594:	add	r1, r8, #336	; 0x150
   1d598:	vst1.32	{d16-d17}, [r1]
   1d59c:	add	r1, r8, #320	; 0x140
   1d5a0:	vst1.32	{d16-d17}, [r1]
   1d5a4:	add	r1, r8, #304	; 0x130
   1d5a8:	vst1.32	{d16-d17}, [r1]
   1d5ac:	add	r1, r8, #288	; 0x120
   1d5b0:	vst1.32	{d16-d17}, [r1]
   1d5b4:	add	r1, r8, #272	; 0x110
   1d5b8:	vst1.32	{d16-d17}, [r1]
   1d5bc:	add	r1, r8, #256	; 0x100
   1d5c0:	vst1.32	{d16-d17}, [r1]
   1d5c4:	add	r1, r8, #240	; 0xf0
   1d5c8:	vst1.32	{d16-d17}, [r1]
   1d5cc:	add	r1, r8, #224	; 0xe0
   1d5d0:	vst1.32	{d16-d17}, [r1]
   1d5d4:	add	r1, r8, #208	; 0xd0
   1d5d8:	vst1.32	{d16-d17}, [r1]
   1d5dc:	add	r1, r8, #192	; 0xc0
   1d5e0:	vst1.32	{d16-d17}, [r1]
   1d5e4:	add	r1, r8, #176	; 0xb0
   1d5e8:	vst1.32	{d16-d17}, [r1]
   1d5ec:	add	r1, r8, #160	; 0xa0
   1d5f0:	vst1.32	{d16-d17}, [r1]
   1d5f4:	add	r1, r8, #144	; 0x90
   1d5f8:	vst1.32	{d16-d17}, [r1]
   1d5fc:	add	r1, r8, #128	; 0x80
   1d600:	vst1.32	{d16-d17}, [r1]
   1d604:	add	r1, r8, #112	; 0x70
   1d608:	vst1.32	{d16-d17}, [r1]
   1d60c:	add	r1, r8, #96	; 0x60
   1d610:	vst1.32	{d16-d17}, [r1]
   1d614:	add	r1, r8, #80	; 0x50
   1d618:	vst1.32	{d16-d17}, [r1]
   1d61c:	add	r1, r8, #64	; 0x40
   1d620:	vst1.32	{d16-d17}, [r1]
   1d624:	add	r1, r8, #48	; 0x30
   1d628:	vst1.32	{d16-d17}, [r1]
   1d62c:	add	r1, r8, #32
   1d630:	vst1.32	{d16-d17}, [r1]
   1d634:	add	r1, r8, #16
   1d638:	vst1.32	{d16-d17}, [r1]
   1d63c:	mov	r1, #992	; 0x3e0
   1d640:	vst1.32	{d16-d17}, [r8], r1
   1d644:	add	r1, r0, #1
   1d648:	vst1.32	{d16-d17}, [r8]
   1d64c:	add	r8, lr, #1
   1d650:	cmp	r8, r1
   1d654:	movcc	r9, ip
   1d658:	movcc	r8, r1
   1d65c:	cmp	r5, #0
   1d660:	str	r9, [sp, #24]
   1d664:	beq	1d6dc <__assert_fail@plt+0xbdf0>
   1d668:	ldr	r3, [sp, #28]
   1d66c:	mov	r0, r2
   1d670:	mvn	r2, r6
   1d674:	and	ip, r5, #1
   1d678:	mov	r1, #0
   1d67c:	cmn	r2, r3
   1d680:	beq	1d6bc <__assert_fail@plt+0xbdd0>
   1d684:	ldr	r1, [sp, #32]
   1d688:	sub	r2, r1, ip
   1d68c:	sub	r3, r1, #2
   1d690:	mov	r1, #0
   1d694:	mov	r5, sl
   1d698:	add	r4, r3, #1
   1d69c:	ldrb	r7, [r5, r1]!
   1d6a0:	add	r1, r1, #2
   1d6a4:	cmp	r2, r1
   1d6a8:	str	r4, [r0, r7, lsl #2]
   1d6ac:	ldrb	r7, [r5, #1]
   1d6b0:	str	r3, [r0, r7, lsl #2]
   1d6b4:	sub	r3, r3, #2
   1d6b8:	bne	1d694 <__assert_fail@plt+0xbda8>
   1d6bc:	ldr	r5, [sp, #32]
   1d6c0:	ldr	r9, [sp, #24]
   1d6c4:	cmp	ip, #0
   1d6c8:	beq	1d6dc <__assert_fail@plt+0xbdf0>
   1d6cc:	ldrb	r2, [sl, r1]
   1d6d0:	mvn	r1, r1
   1d6d4:	add	r1, r5, r1
   1d6d8:	str	r1, [r0, r2, lsl #2]
   1d6dc:	add	r1, sl, r9
   1d6e0:	mov	r0, sl
   1d6e4:	mov	r2, r8
   1d6e8:	bl	1170c <bcmp@plt>
   1d6ec:	cmp	r0, #0
   1d6f0:	str	r8, [sp, #20]
   1d6f4:	beq	1d8cc <__assert_fail@plt+0xbfe0>
   1d6f8:	ldr	r1, [sp, #16]
   1d6fc:	ldr	r0, [sp, #36]	; 0x24
   1d700:	mov	r4, #0
   1d704:	add	r0, r0, r1
   1d708:	sub	r2, r5, r1
   1d70c:	mov	r1, #0
   1d710:	bl	117a8 <memchr@plt>
   1d714:	sub	r1, r5, r8
   1d718:	cmp	r8, r1
   1d71c:	movcs	r1, r8
   1d720:	cmp	r5, #0
   1d724:	str	r1, [sp, #8]
   1d728:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1d72c:	ldr	r7, [sp, #36]	; 0x24
   1d730:	cmp	r0, #0
   1d734:	bne	1d2c0 <__assert_fail@plt+0xb9d4>
   1d738:	ldr	r2, [sp, #20]
   1d73c:	ldr	r3, [sp, #28]
   1d740:	mov	r8, #0
   1d744:	mov	ip, r5
   1d748:	add	r0, r7, r2
   1d74c:	str	r0, [sp, #4]
   1d750:	ldr	r0, [sp, #12]
   1d754:	add	r0, r3, r0
   1d758:	add	r1, r0, r2
   1d75c:	sub	r0, r6, r3
   1d760:	add	r0, r0, r2
   1d764:	str	r1, [sp, #28]
   1d768:	add	r6, r0, #1
   1d76c:	rsb	r0, r2, #1
   1d770:	str	r0, [sp, #12]
   1d774:	sub	r0, r5, #1
   1d778:	str	r6, [sp, #24]
   1d77c:	str	r0, [sp, #16]
   1d780:	add	r0, ip, r7
   1d784:	add	r3, sp, #40	; 0x28
   1d788:	ldrb	r2, [r0, #-1]
   1d78c:	ldr	r2, [r3, r2, lsl #2]
   1d790:	cmp	r2, #0
   1d794:	beq	1d7a0 <__assert_fail@plt+0xbeb4>
   1d798:	add	r8, r2, r8
   1d79c:	b	1d814 <__assert_fail@plt+0xbf28>
   1d7a0:	ldr	r2, [sp, #20]
   1d7a4:	ldr	r3, [sp, #16]
   1d7a8:	cmp	r2, r3
   1d7ac:	bcs	1d7d8 <__assert_fail@plt+0xbeec>
   1d7b0:	ldr	r2, [sp, #4]
   1d7b4:	add	r3, r2, r8
   1d7b8:	mov	r2, #0
   1d7bc:	ldrb	r5, [r3, -r2]
   1d7c0:	ldrb	r4, [r1, -r2]
   1d7c4:	cmp	r4, r5
   1d7c8:	bne	1d804 <__assert_fail@plt+0xbf18>
   1d7cc:	sub	r2, r2, #1
   1d7d0:	cmp	r6, r2
   1d7d4:	bne	1d7bc <__assert_fail@plt+0xbed0>
   1d7d8:	ldr	r2, [sp, #12]
   1d7dc:	add	r4, r7, r8
   1d7e0:	cmp	r2, #1
   1d7e4:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1d7e8:	ldrb	r3, [r4, -r2]
   1d7ec:	ldrb	r5, [sl, -r2]
   1d7f0:	add	r2, r2, #1
   1d7f4:	cmp	r5, r3
   1d7f8:	beq	1d7e0 <__assert_fail@plt+0xbef4>
   1d7fc:	ldr	r2, [sp, #8]
   1d800:	b	1d808 <__assert_fail@plt+0xbf1c>
   1d804:	rsb	r2, r2, #0
   1d808:	ldr	r5, [sp, #32]
   1d80c:	add	r2, r8, r2
   1d810:	add	r8, r2, #1
   1d814:	add	r9, r8, r5
   1d818:	mov	r1, #0
   1d81c:	mov	r4, #0
   1d820:	sub	r2, r9, ip
   1d824:	bl	117a8 <memchr@plt>
   1d828:	cmp	r9, #0
   1d82c:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1d830:	ldr	r7, [sp, #36]	; 0x24
   1d834:	ldr	r1, [sp, #28]
   1d838:	ldr	r6, [sp, #24]
   1d83c:	cmp	r0, #0
   1d840:	mov	ip, r9
   1d844:	beq	1d780 <__assert_fail@plt+0xbe94>
   1d848:	b	1d2c0 <__assert_fail@plt+0xb9d4>
   1d84c:	cmp	r5, #2
   1d850:	bcc	1da3c <__assert_fail@plt+0xc150>
   1d854:	mvn	lr, #0
   1d858:	mov	r2, #0
   1d85c:	mov	r3, #1
   1d860:	mov	r9, #1
   1d864:	mov	r4, #1
   1d868:	b	1d884 <__assert_fail@plt+0xbf98>
   1d86c:	sub	r9, r3, lr
   1d870:	mov	r4, #1
   1d874:	mov	r2, r3
   1d878:	add	r3, r4, r2
   1d87c:	cmp	r3, r5
   1d880:	bcs	1da44 <__assert_fail@plt+0xc158>
   1d884:	add	r7, lr, r4
   1d888:	ldrb	r0, [sl, r3]
   1d88c:	ldrb	r7, [sl, r7]
   1d890:	cmp	r7, r0
   1d894:	bcc	1d86c <__assert_fail@plt+0xbf80>
   1d898:	cmp	r0, r7
   1d89c:	bne	1d8b4 <__assert_fail@plt+0xbfc8>
   1d8a0:	cmp	r4, r9
   1d8a4:	addne	r4, r4, #1
   1d8a8:	addeq	r2, r2, r9
   1d8ac:	moveq	r4, #1
   1d8b0:	b	1d878 <__assert_fail@plt+0xbf8c>
   1d8b4:	add	r0, r2, #1
   1d8b8:	mov	lr, r2
   1d8bc:	mov	r4, #1
   1d8c0:	mov	r9, #1
   1d8c4:	mov	r2, r0
   1d8c8:	b	1d878 <__assert_fail@plt+0xbf8c>
   1d8cc:	ldr	r1, [sp, #16]
   1d8d0:	ldr	r0, [sp, #36]	; 0x24
   1d8d4:	mov	r4, #0
   1d8d8:	add	r0, r0, r1
   1d8dc:	sub	r2, r5, r1
   1d8e0:	mov	r1, #0
   1d8e4:	bl	117a8 <memchr@plt>
   1d8e8:	cmp	r5, #0
   1d8ec:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1d8f0:	ldr	r8, [sp, #36]	; 0x24
   1d8f4:	cmp	r0, #0
   1d8f8:	bne	1d2c0 <__assert_fail@plt+0xb9d4>
   1d8fc:	ldr	r0, [sp, #24]
   1d900:	sub	lr, r5, #1
   1d904:	mov	r9, #0
   1d908:	mov	ip, r5
   1d90c:	sub	r0, r5, r0
   1d910:	str	r0, [sp, #28]
   1d914:	ldr	r0, [sp, #20]
   1d918:	sub	r1, r0, #1
   1d91c:	rsb	r0, r0, #1
   1d920:	str	r1, [sp, #16]
   1d924:	mov	r1, #0
   1d928:	str	r0, [sp, #12]
   1d92c:	add	r0, ip, r8
   1d930:	add	r3, sp, #40	; 0x28
   1d934:	ldrb	r2, [r0, #-1]
   1d938:	ldr	r3, [r3, r2, lsl #2]
   1d93c:	cmp	r3, #0
   1d940:	beq	1d968 <__assert_fail@plt+0xc07c>
   1d944:	ldr	r2, [sp, #24]
   1d948:	ldr	r7, [sp, #28]
   1d94c:	cmp	r3, r2
   1d950:	mov	r2, r3
   1d954:	movcc	r2, r7
   1d958:	cmp	r9, #0
   1d95c:	mov	r9, #0
   1d960:	moveq	r2, r3
   1d964:	b	1d9f0 <__assert_fail@plt+0xc104>
   1d968:	ldr	r2, [sp, #20]
   1d96c:	cmp	r2, r9
   1d970:	movcc	r2, r9
   1d974:	cmp	r2, lr
   1d978:	bcs	1d99c <__assert_fail@plt+0xc0b0>
   1d97c:	add	r3, r8, r1
   1d980:	ldrb	r5, [r3, r2]
   1d984:	ldrb	r4, [sl, r2]
   1d988:	cmp	r4, r5
   1d98c:	bne	1d9e0 <__assert_fail@plt+0xc0f4>
   1d990:	add	r2, r2, #1
   1d994:	cmp	r2, lr
   1d998:	bcc	1d980 <__assert_fail@plt+0xc094>
   1d99c:	ldr	r2, [sp, #16]
   1d9a0:	add	r4, r8, r1
   1d9a4:	add	r3, r2, #1
   1d9a8:	cmp	r9, r3
   1d9ac:	bcs	1d9c4 <__assert_fail@plt+0xc0d8>
   1d9b0:	ldrb	r5, [r4, r2]
   1d9b4:	ldrb	r7, [sl, r2]
   1d9b8:	sub	r2, r2, #1
   1d9bc:	cmp	r7, r5
   1d9c0:	beq	1d9a4 <__assert_fail@plt+0xc0b8>
   1d9c4:	add	r2, r9, #1
   1d9c8:	ldr	r9, [sp, #28]
   1d9cc:	ldr	r5, [sp, #32]
   1d9d0:	cmp	r3, r2
   1d9d4:	ldr	r2, [sp, #24]
   1d9d8:	bcs	1d9f0 <__assert_fail@plt+0xc104>
   1d9dc:	b	1d2c0 <__assert_fail@plt+0xb9d4>
   1d9e0:	ldr	r3, [sp, #12]
   1d9e4:	ldr	r5, [sp, #32]
   1d9e8:	mov	r9, #0
   1d9ec:	add	r2, r3, r2
   1d9f0:	add	r1, r2, r1
   1d9f4:	mov	r6, sl
   1d9f8:	mov	sl, lr
   1d9fc:	mov	r4, #0
   1da00:	add	r8, r1, r5
   1da04:	mov	r7, r1
   1da08:	mov	r1, #0
   1da0c:	sub	r2, r8, ip
   1da10:	bl	117a8 <memchr@plt>
   1da14:	cmp	r8, #0
   1da18:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1da1c:	mov	ip, r8
   1da20:	ldr	r8, [sp, #36]	; 0x24
   1da24:	mov	lr, sl
   1da28:	cmp	r0, #0
   1da2c:	mov	sl, r6
   1da30:	mov	r1, r7
   1da34:	beq	1d92c <__assert_fail@plt+0xc040>
   1da38:	b	1d2c0 <__assert_fail@plt+0xb9d4>
   1da3c:	mov	r9, #1
   1da40:	mvn	lr, #0
   1da44:	add	r0, r1, #1
   1da48:	add	r7, lr, #1
   1da4c:	cmp	r7, r0
   1da50:	movcc	r9, ip
   1da54:	movcc	r7, r0
   1da58:	add	r1, sl, r9
   1da5c:	mov	r0, sl
   1da60:	mov	r2, r7
   1da64:	bl	1170c <bcmp@plt>
   1da68:	cmp	r0, #0
   1da6c:	beq	1db74 <__assert_fail@plt+0xc288>
   1da70:	ldr	r0, [sp, #36]	; 0x24
   1da74:	sub	r2, r5, r8
   1da78:	mov	r1, #0
   1da7c:	mov	r4, #0
   1da80:	add	r0, r0, r8
   1da84:	bl	117a8 <memchr@plt>
   1da88:	sub	r1, r5, r7
   1da8c:	cmp	r7, r1
   1da90:	movcs	r1, r7
   1da94:	cmp	r5, #0
   1da98:	str	r1, [sp, #24]
   1da9c:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1daa0:	cmp	r0, #0
   1daa4:	ldr	r5, [sp, #36]	; 0x24
   1daa8:	ldr	r0, [sp, #28]
   1daac:	bne	1d2c0 <__assert_fail@plt+0xb9d4>
   1dab0:	add	r1, r5, r7
   1dab4:	sub	r0, r0, r7
   1dab8:	add	r9, r7, r6
   1dabc:	mov	r8, #0
   1dac0:	str	r7, [sp, #12]
   1dac4:	str	r1, [sp, #20]
   1dac8:	ldr	r1, [sp, #32]
   1dacc:	sub	r6, r0, r6
   1dad0:	rsb	r0, r7, #1
   1dad4:	str	r0, [sp, #28]
   1dad8:	ldr	ip, [sp, #32]
   1dadc:	cmp	ip, r7
   1dae0:	bls	1db0c <__assert_fail@plt+0xc220>
   1dae4:	ldr	r0, [sp, #20]
   1dae8:	mov	r2, #0
   1daec:	add	r0, r0, r8
   1daf0:	ldrb	r3, [r0, r2]
   1daf4:	ldrb	r7, [r9, r2]
   1daf8:	cmp	r7, r3
   1dafc:	bne	1db34 <__assert_fail@plt+0xc248>
   1db00:	add	r2, r2, #1
   1db04:	cmp	r6, r2
   1db08:	bne	1daf0 <__assert_fail@plt+0xc204>
   1db0c:	ldr	r0, [sp, #28]
   1db10:	add	r4, r5, r8
   1db14:	cmp	r0, #1
   1db18:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1db1c:	ldrb	r2, [r4, -r0]
   1db20:	ldrb	r3, [sl, -r0]
   1db24:	add	r0, r0, #1
   1db28:	cmp	r3, r2
   1db2c:	beq	1db14 <__assert_fail@plt+0xc228>
   1db30:	ldr	r2, [sp, #24]
   1db34:	add	r2, r8, r2
   1db38:	add	r0, r5, r1
   1db3c:	mov	r4, #0
   1db40:	add	r8, r2, #1
   1db44:	add	r7, r8, ip
   1db48:	sub	r2, r7, r1
   1db4c:	mov	r1, #0
   1db50:	bl	117a8 <memchr@plt>
   1db54:	cmp	r0, #0
   1db58:	bne	1d2c0 <__assert_fail@plt+0xb9d4>
   1db5c:	cmp	r7, #0
   1db60:	mov	r1, r7
   1db64:	ldr	r5, [sp, #36]	; 0x24
   1db68:	ldr	r7, [sp, #12]
   1db6c:	bne	1dad8 <__assert_fail@plt+0xc1ec>
   1db70:	b	1d2c0 <__assert_fail@plt+0xb9d4>
   1db74:	ldr	r0, [sp, #36]	; 0x24
   1db78:	sub	r2, r5, r8
   1db7c:	mov	r1, #0
   1db80:	mov	r4, #0
   1db84:	add	r0, r0, r8
   1db88:	bl	117a8 <memchr@plt>
   1db8c:	cmp	r5, #0
   1db90:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1db94:	ldr	ip, [sp, #36]	; 0x24
   1db98:	cmp	r0, #0
   1db9c:	str	r9, [sp, #28]
   1dba0:	bne	1d2c0 <__assert_fail@plt+0xb9d4>
   1dba4:	ldr	r1, [sp, #32]
   1dba8:	ldr	r0, [sp, #28]
   1dbac:	ldr	r5, [sp, #32]
   1dbb0:	mov	r6, #0
   1dbb4:	mov	r8, #0
   1dbb8:	sub	r0, r1, r0
   1dbbc:	str	r0, [sp, #24]
   1dbc0:	sub	r0, r7, #1
   1dbc4:	str	r0, [sp, #20]
   1dbc8:	rsb	r0, r7, #1
   1dbcc:	str	r0, [sp, #16]
   1dbd0:	cmp	r7, r6
   1dbd4:	mov	r0, r7
   1dbd8:	mov	r9, r7
   1dbdc:	movcc	r0, r6
   1dbe0:	cmp	r0, r5
   1dbe4:	bcs	1dc08 <__assert_fail@plt+0xc31c>
   1dbe8:	add	r2, ip, r8
   1dbec:	ldrb	r3, [r2, r0]
   1dbf0:	ldrb	r7, [sl, r0]
   1dbf4:	cmp	r7, r3
   1dbf8:	bne	1dc48 <__assert_fail@plt+0xc35c>
   1dbfc:	add	r0, r0, #1
   1dc00:	cmp	r0, r5
   1dc04:	bcc	1dbec <__assert_fail@plt+0xc300>
   1dc08:	ldr	r0, [sp, #20]
   1dc0c:	add	r4, ip, r8
   1dc10:	add	r2, r0, #1
   1dc14:	cmp	r6, r2
   1dc18:	bcs	1dc30 <__assert_fail@plt+0xc344>
   1dc1c:	ldrb	r3, [r4, r0]
   1dc20:	ldrb	r7, [sl, r0]
   1dc24:	sub	r0, r0, #1
   1dc28:	cmp	r7, r3
   1dc2c:	beq	1dc10 <__assert_fail@plt+0xc324>
   1dc30:	add	r0, r6, #1
   1dc34:	ldr	r6, [sp, #24]
   1dc38:	cmp	r2, r0
   1dc3c:	ldr	r2, [sp, #28]
   1dc40:	bcs	1dc54 <__assert_fail@plt+0xc368>
   1dc44:	b	1d2c0 <__assert_fail@plt+0xb9d4>
   1dc48:	ldr	r2, [sp, #16]
   1dc4c:	mov	r6, #0
   1dc50:	add	r2, r2, r0
   1dc54:	add	r8, r2, r8
   1dc58:	add	r0, ip, r1
   1dc5c:	mov	r4, #0
   1dc60:	add	r7, r8, r5
   1dc64:	sub	r2, r7, r1
   1dc68:	mov	r1, #0
   1dc6c:	bl	117a8 <memchr@plt>
   1dc70:	cmp	r7, #0
   1dc74:	beq	1d2c0 <__assert_fail@plt+0xb9d4>
   1dc78:	ldr	ip, [sp, #36]	; 0x24
   1dc7c:	mov	r1, r7
   1dc80:	cmp	r0, #0
   1dc84:	mov	r7, r9
   1dc88:	beq	1dbd0 <__assert_fail@plt+0xc2e4>
   1dc8c:	b	1d2c0 <__assert_fail@plt+0xb9d4>
   1dc90:	mov	r0, #1
   1dc94:	b	119f0 <__assert_fail@plt+0x104>
   1dc98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc9c:	add	fp, sp, #28
   1dca0:	sub	sp, sp, #12
   1dca4:	mov	r4, r3
   1dca8:	mov	r6, r2
   1dcac:	mov	r5, r1
   1dcb0:	mov	sl, r0
   1dcb4:	bl	11718 <strlen@plt>
   1dcb8:	ldr	r8, [r5]
   1dcbc:	cmp	r8, #0
   1dcc0:	beq	1dd80 <__assert_fail@plt+0xc494>
   1dcc4:	mov	r7, r0
   1dcc8:	mov	r0, #0
   1dccc:	add	r9, r5, #4
   1dcd0:	mov	r5, #0
   1dcd4:	str	r6, [sp, #4]
   1dcd8:	str	r0, [sp]
   1dcdc:	mvn	r0, #0
   1dce0:	str	r0, [sp, #8]
   1dce4:	b	1dd00 <__assert_fail@plt+0xc414>
   1dce8:	str	r5, [sp, #8]
   1dcec:	ldr	r8, [r9, r5, lsl #2]
   1dcf0:	add	r6, r6, r4
   1dcf4:	add	r5, r5, #1
   1dcf8:	cmp	r8, #0
   1dcfc:	beq	1dd68 <__assert_fail@plt+0xc47c>
   1dd00:	mov	r0, r8
   1dd04:	mov	r1, sl
   1dd08:	mov	r2, r7
   1dd0c:	bl	118b0 <strncmp@plt>
   1dd10:	cmp	r0, #0
   1dd14:	bne	1dcec <__assert_fail@plt+0xc400>
   1dd18:	mov	r0, r8
   1dd1c:	bl	11718 <strlen@plt>
   1dd20:	cmp	r0, r7
   1dd24:	beq	1dd84 <__assert_fail@plt+0xc498>
   1dd28:	ldr	r0, [sp, #8]
   1dd2c:	cmn	r0, #1
   1dd30:	beq	1dce8 <__assert_fail@plt+0xc3fc>
   1dd34:	ldr	r0, [sp, #4]
   1dd38:	cmp	r0, #0
   1dd3c:	beq	1dd5c <__assert_fail@plt+0xc470>
   1dd40:	ldr	r1, [sp, #8]
   1dd44:	mov	r2, r4
   1dd48:	mla	r0, r1, r4, r0
   1dd4c:	mov	r1, r6
   1dd50:	bl	1170c <bcmp@plt>
   1dd54:	cmp	r0, #0
   1dd58:	beq	1dcec <__assert_fail@plt+0xc400>
   1dd5c:	mov	r0, #1
   1dd60:	str	r0, [sp]
   1dd64:	b	1dcec <__assert_fail@plt+0xc400>
   1dd68:	ldr	r0, [sp]
   1dd6c:	tst	r0, #1
   1dd70:	ldr	r0, [sp, #8]
   1dd74:	mvnne	r0, #1
   1dd78:	sub	sp, fp, #28
   1dd7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd80:	mvn	r5, #0
   1dd84:	mov	r0, r5
   1dd88:	sub	sp, fp, #28
   1dd8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd90:	push	{r4, r5, r6, r7, fp, lr}
   1dd94:	add	fp, sp, #16
   1dd98:	mov	r5, r0
   1dd9c:	ldr	r0, [r1]
   1dda0:	mvn	r4, #0
   1dda4:	cmp	r0, #0
   1dda8:	beq	1ddd4 <__assert_fail@plt+0xc4e8>
   1ddac:	add	r7, r1, #4
   1ddb0:	mov	r6, #0
   1ddb4:	mov	r1, r5
   1ddb8:	bl	11520 <strcmp@plt>
   1ddbc:	cmp	r0, #0
   1ddc0:	beq	1dddc <__assert_fail@plt+0xc4f0>
   1ddc4:	ldr	r0, [r7, r6, lsl #2]
   1ddc8:	add	r6, r6, #1
   1ddcc:	cmp	r0, #0
   1ddd0:	bne	1ddb4 <__assert_fail@plt+0xc4c8>
   1ddd4:	mov	r0, r4
   1ddd8:	pop	{r4, r5, r6, r7, fp, pc}
   1dddc:	mov	r0, r6
   1dde0:	pop	{r4, r5, r6, r7, fp, pc}
   1dde4:	push	{r4, r5, r6, sl, fp, lr}
   1dde8:	add	fp, sp, #16
   1ddec:	sub	sp, sp, #8
   1ddf0:	mov	r5, r0
   1ddf4:	movw	r0, #2493	; 0x9bd
   1ddf8:	mov	r4, r1
   1ddfc:	movw	r1, #2520	; 0x9d8
   1de00:	cmn	r2, #1
   1de04:	mov	r2, #5
   1de08:	movt	r0, #2
   1de0c:	movt	r1, #2
   1de10:	moveq	r1, r0
   1de14:	mov	r0, #0
   1de18:	bl	115a4 <dcgettext@plt>
   1de1c:	mov	r6, r0
   1de20:	mov	r0, #0
   1de24:	mov	r1, #8
   1de28:	mov	r2, r4
   1de2c:	bl	1add0 <__assert_fail@plt+0x94e4>
   1de30:	mov	r4, r0
   1de34:	mov	r0, #1
   1de38:	mov	r1, r5
   1de3c:	bl	1b390 <__assert_fail@plt+0x9aa4>
   1de40:	str	r0, [sp]
   1de44:	mov	r0, #0
   1de48:	mov	r1, #0
   1de4c:	mov	r2, r6
   1de50:	mov	r3, r4
   1de54:	bl	11670 <error@plt>
   1de58:	sub	sp, fp, #16
   1de5c:	pop	{r4, r5, r6, sl, fp, pc}
   1de60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de64:	add	fp, sp, #28
   1de68:	sub	sp, sp, #4
   1de6c:	mov	sl, r1
   1de70:	movw	r1, #2549	; 0x9f5
   1de74:	mov	r4, r2
   1de78:	mov	r6, r0
   1de7c:	mov	r0, #0
   1de80:	mov	r2, #5
   1de84:	mov	r8, #0
   1de88:	movt	r1, #2
   1de8c:	bl	115a4 <dcgettext@plt>
   1de90:	movw	r1, #4912	; 0x1330
   1de94:	movt	r1, #3
   1de98:	ldr	r1, [r1]
   1de9c:	bl	114f0 <fputs_unlocked@plt>
   1dea0:	ldr	r7, [r6]
   1dea4:	cmp	r7, #0
   1dea8:	beq	1df64 <__assert_fail@plt+0xc678>
   1deac:	add	r0, r6, #4
   1deb0:	mov	r9, #0
   1deb4:	mov	r6, #0
   1deb8:	str	r0, [sp]
   1debc:	cmp	r9, #0
   1dec0:	bne	1df18 <__assert_fail@plt+0xc62c>
   1dec4:	mov	r5, #0
   1dec8:	movw	r0, #4912	; 0x1330
   1decc:	movt	r0, #3
   1ded0:	ldr	r6, [r0]
   1ded4:	mov	r0, r7
   1ded8:	bl	1b3a0 <__assert_fail@plt+0x9ab4>
   1dedc:	movw	r2, #2570	; 0xa0a
   1dee0:	mov	r3, r0
   1dee4:	mov	r0, r6
   1dee8:	mov	r1, #1
   1deec:	movt	r2, #2
   1def0:	bl	1179c <__fprintf_chk@plt>
   1def4:	add	r6, sl, r5
   1def8:	ldr	r0, [sp]
   1defc:	add	r8, r8, r4
   1df00:	ldr	r7, [r0, -r9, lsl #2]
   1df04:	sub	r9, r9, #1
   1df08:	cmp	r7, #0
   1df0c:	beq	1df64 <__assert_fail@plt+0xc678>
   1df10:	cmp	r9, #0
   1df14:	beq	1dec4 <__assert_fail@plt+0xc5d8>
   1df18:	add	r1, sl, r8
   1df1c:	mov	r0, r6
   1df20:	mov	r2, r4
   1df24:	bl	1170c <bcmp@plt>
   1df28:	cmp	r0, #0
   1df2c:	mov	r5, r8
   1df30:	bne	1dec8 <__assert_fail@plt+0xc5dc>
   1df34:	movw	r0, #4912	; 0x1330
   1df38:	movt	r0, #3
   1df3c:	ldr	r5, [r0]
   1df40:	mov	r0, r7
   1df44:	bl	1b3a0 <__assert_fail@plt+0x9ab4>
   1df48:	movw	r2, #2578	; 0xa12
   1df4c:	mov	r3, r0
   1df50:	mov	r0, r5
   1df54:	mov	r1, #1
   1df58:	movt	r2, #2
   1df5c:	bl	1179c <__fprintf_chk@plt>
   1df60:	b	1def8 <__assert_fail@plt+0xc60c>
   1df64:	movw	r0, #4912	; 0x1330
   1df68:	movt	r0, #3
   1df6c:	ldr	r0, [r0]
   1df70:	ldr	r1, [r0, #20]
   1df74:	ldr	r2, [r0, #24]
   1df78:	cmp	r1, r2
   1df7c:	addcc	r2, r1, #1
   1df80:	strcc	r2, [r0, #20]
   1df84:	movcc	r0, #10
   1df88:	strbcc	r0, [r1]
   1df8c:	subcc	sp, fp, #28
   1df90:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df94:	mov	r1, #10
   1df98:	sub	sp, fp, #28
   1df9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfa0:	b	117e4 <__overflow@plt>
   1dfa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfa8:	add	fp, sp, #28
   1dfac:	sub	sp, sp, #20
   1dfb0:	mov	r9, r0
   1dfb4:	ldr	r0, [fp, #16]
   1dfb8:	mov	r8, r3
   1dfbc:	mov	sl, r2
   1dfc0:	mov	r7, r1
   1dfc4:	cmp	r0, #0
   1dfc8:	beq	1e088 <__assert_fail@plt+0xc79c>
   1dfcc:	mov	r0, r7
   1dfd0:	str	r9, [sp, #8]
   1dfd4:	str	r8, [sp, #16]
   1dfd8:	bl	11718 <strlen@plt>
   1dfdc:	ldr	r9, [sl]
   1dfe0:	cmp	r9, #0
   1dfe4:	beq	1e0f8 <__assert_fail@plt+0xc80c>
   1dfe8:	str	sl, [sp, #4]
   1dfec:	add	r8, sl, #4
   1dff0:	ldr	sl, [sp, #16]
   1dff4:	mov	r4, r0
   1dff8:	mov	r0, #0
   1dffc:	mvn	r6, #0
   1e000:	mov	r5, #0
   1e004:	str	r0, [sp, #12]
   1e008:	b	1e028 <__assert_fail@plt+0xc73c>
   1e00c:	mov	r6, r5
   1e010:	ldr	r9, [r8, r5, lsl #2]
   1e014:	ldr	r0, [fp, #8]
   1e018:	add	r5, r5, #1
   1e01c:	add	sl, sl, r0
   1e020:	cmp	r9, #0
   1e024:	beq	1e0c8 <__assert_fail@plt+0xc7dc>
   1e028:	mov	r0, r9
   1e02c:	mov	r1, r7
   1e030:	mov	r2, r4
   1e034:	bl	118b0 <strncmp@plt>
   1e038:	cmp	r0, #0
   1e03c:	bne	1e010 <__assert_fail@plt+0xc724>
   1e040:	mov	r0, r9
   1e044:	bl	11718 <strlen@plt>
   1e048:	cmp	r0, r4
   1e04c:	beq	1e17c <__assert_fail@plt+0xc890>
   1e050:	cmn	r6, #1
   1e054:	beq	1e00c <__assert_fail@plt+0xc720>
   1e058:	ldr	r0, [sp, #16]
   1e05c:	cmp	r0, #0
   1e060:	beq	1e07c <__assert_fail@plt+0xc790>
   1e064:	ldr	r2, [fp, #8]
   1e068:	mov	r1, sl
   1e06c:	mla	r0, r6, r2, r0
   1e070:	bl	1170c <bcmp@plt>
   1e074:	cmp	r0, #0
   1e078:	beq	1e010 <__assert_fail@plt+0xc724>
   1e07c:	mov	r0, #1
   1e080:	str	r0, [sp, #12]
   1e084:	b	1e010 <__assert_fail@plt+0xc724>
   1e088:	ldr	r0, [sl]
   1e08c:	movw	r4, #2493	; 0x9bd
   1e090:	movt	r4, #2
   1e094:	cmp	r0, #0
   1e098:	beq	1e108 <__assert_fail@plt+0xc81c>
   1e09c:	add	r5, sl, #4
   1e0a0:	mov	r6, #0
   1e0a4:	mov	r1, r7
   1e0a8:	bl	11520 <strcmp@plt>
   1e0ac:	cmp	r0, #0
   1e0b0:	beq	1e0e0 <__assert_fail@plt+0xc7f4>
   1e0b4:	ldr	r0, [r5, r6, lsl #2]
   1e0b8:	add	r6, r6, #1
   1e0bc:	cmp	r0, #0
   1e0c0:	bne	1e0a4 <__assert_fail@plt+0xc7b8>
   1e0c4:	b	1e108 <__assert_fail@plt+0xc81c>
   1e0c8:	ldr	r0, [sp, #12]
   1e0cc:	ldr	r8, [sp, #16]
   1e0d0:	ldr	sl, [sp, #4]
   1e0d4:	ldr	r9, [sp, #8]
   1e0d8:	tst	r0, #1
   1e0dc:	bne	1e0ec <__assert_fail@plt+0xc800>
   1e0e0:	cmn	r6, #1
   1e0e4:	bgt	1e170 <__assert_fail@plt+0xc884>
   1e0e8:	beq	1e100 <__assert_fail@plt+0xc814>
   1e0ec:	movw	r4, #2520	; 0x9d8
   1e0f0:	movt	r4, #2
   1e0f4:	b	1e108 <__assert_fail@plt+0xc81c>
   1e0f8:	ldr	r8, [sp, #16]
   1e0fc:	ldr	r9, [sp, #8]
   1e100:	movw	r4, #2493	; 0x9bd
   1e104:	movt	r4, #2
   1e108:	ldr	r6, [fp, #12]
   1e10c:	mov	r0, #0
   1e110:	mov	r1, r4
   1e114:	mov	r2, #5
   1e118:	bl	115a4 <dcgettext@plt>
   1e11c:	mov	r4, r0
   1e120:	mov	r0, #0
   1e124:	mov	r1, #8
   1e128:	mov	r2, r7
   1e12c:	bl	1add0 <__assert_fail@plt+0x94e4>
   1e130:	mov	r5, r0
   1e134:	mov	r0, #1
   1e138:	mov	r1, r9
   1e13c:	bl	1b390 <__assert_fail@plt+0x9aa4>
   1e140:	str	r0, [sp]
   1e144:	mov	r0, #0
   1e148:	mov	r1, #0
   1e14c:	mov	r2, r4
   1e150:	mov	r3, r5
   1e154:	bl	11670 <error@plt>
   1e158:	ldr	r2, [fp, #8]
   1e15c:	mov	r0, sl
   1e160:	mov	r1, r8
   1e164:	bl	1de60 <__assert_fail@plt+0xc574>
   1e168:	blx	r6
   1e16c:	mvn	r6, #0
   1e170:	mov	r0, r6
   1e174:	sub	sp, fp, #28
   1e178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e17c:	ldr	r8, [sp, #16]
   1e180:	ldr	sl, [sp, #4]
   1e184:	ldr	r9, [sp, #8]
   1e188:	mov	r6, r5
   1e18c:	cmn	r6, #1
   1e190:	bgt	1e170 <__assert_fail@plt+0xc884>
   1e194:	b	1e0e8 <__assert_fail@plt+0xc7fc>
   1e198:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e19c:	add	fp, sp, #24
   1e1a0:	ldr	r6, [r1]
   1e1a4:	cmp	r6, #0
   1e1a8:	beq	1e20c <__assert_fail@plt+0xc920>
   1e1ac:	mov	r8, r1
   1e1b0:	mov	r7, r2
   1e1b4:	mov	r1, r2
   1e1b8:	mov	r2, r3
   1e1bc:	mov	r4, r3
   1e1c0:	mov	r9, r0
   1e1c4:	bl	1170c <bcmp@plt>
   1e1c8:	cmp	r0, #0
   1e1cc:	beq	1e204 <__assert_fail@plt+0xc918>
   1e1d0:	add	r7, r7, r4
   1e1d4:	add	r5, r8, #4
   1e1d8:	ldr	r6, [r5]
   1e1dc:	cmp	r6, #0
   1e1e0:	beq	1e20c <__assert_fail@plt+0xc920>
   1e1e4:	mov	r0, r9
   1e1e8:	mov	r1, r7
   1e1ec:	mov	r2, r4
   1e1f0:	bl	1170c <bcmp@plt>
   1e1f4:	add	r7, r7, r4
   1e1f8:	add	r5, r5, #4
   1e1fc:	cmp	r0, #0
   1e200:	bne	1e1d8 <__assert_fail@plt+0xc8ec>
   1e204:	mov	r0, r6
   1e208:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e20c:	mov	r6, #0
   1e210:	mov	r0, r6
   1e214:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e218:	sub	r0, r0, #1
   1e21c:	ldrb	r3, [r0, #1]!
   1e220:	cmp	r3, #47	; 0x2f
   1e224:	beq	1e21c <__assert_fail@plt+0xc930>
   1e228:	mov	r2, #0
   1e22c:	mov	r1, r0
   1e230:	b	1e23c <__assert_fail@plt+0xc950>
   1e234:	ldrb	r3, [r1, #1]!
   1e238:	mov	r2, #1
   1e23c:	uxtb	r3, r3
   1e240:	cmp	r3, #47	; 0x2f
   1e244:	beq	1e234 <__assert_fail@plt+0xc948>
   1e248:	cmp	r3, #0
   1e24c:	bxeq	lr
   1e250:	tst	r2, #1
   1e254:	mov	r2, #0
   1e258:	movne	r0, r1
   1e25c:	ldrb	r3, [r1, #1]!
   1e260:	b	1e23c <__assert_fail@plt+0xc950>
   1e264:	push	{r4, sl, fp, lr}
   1e268:	add	fp, sp, #8
   1e26c:	mov	r4, r0
   1e270:	bl	11718 <strlen@plt>
   1e274:	mov	r1, r0
   1e278:	sub	r2, r4, #1
   1e27c:	mov	r0, r1
   1e280:	cmp	r1, #2
   1e284:	bcc	1e298 <__assert_fail@plt+0xc9ac>
   1e288:	ldrb	r3, [r2, r0]
   1e28c:	sub	r1, r0, #1
   1e290:	cmp	r3, #47	; 0x2f
   1e294:	beq	1e27c <__assert_fail@plt+0xc990>
   1e298:	pop	{r4, sl, fp, pc}
   1e29c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2a0:	add	fp, sp, #28
   1e2a4:	sub	sp, sp, #4
   1e2a8:	mov	r4, r0
   1e2ac:	bl	115ec <chdir@plt>
   1e2b0:	cmp	r0, #0
   1e2b4:	beq	1e378 <__assert_fail@plt+0xca8c>
   1e2b8:	mov	r6, r0
   1e2bc:	bl	11748 <__errno_location@plt>
   1e2c0:	mov	r9, r0
   1e2c4:	ldr	r0, [r0]
   1e2c8:	cmp	r0, #36	; 0x24
   1e2cc:	bne	1e568 <__assert_fail@plt+0xcc7c>
   1e2d0:	mov	r0, r4
   1e2d4:	bl	11718 <strlen@plt>
   1e2d8:	cmp	r0, #0
   1e2dc:	beq	1e58c <__assert_fail@plt+0xcca0>
   1e2e0:	mov	r7, r0
   1e2e4:	mov	r0, #0
   1e2e8:	cmp	r0, r7, lsr #12
   1e2ec:	beq	1e5a4 <__assert_fail@plt+0xccb8>
   1e2f0:	movw	r1, #2179	; 0x883
   1e2f4:	mov	r0, r4
   1e2f8:	movt	r1, #2
   1e2fc:	bl	118d4 <strspn@plt>
   1e300:	cmp	r0, #0
   1e304:	beq	1e380 <__assert_fail@plt+0xca94>
   1e308:	mov	r6, r0
   1e30c:	cmp	r0, #2
   1e310:	bne	1e38c <__assert_fail@plt+0xcaa0>
   1e314:	add	r0, r4, #3
   1e318:	sub	r2, r7, #3
   1e31c:	mov	r1, #47	; 0x2f
   1e320:	mov	r8, #47	; 0x2f
   1e324:	bl	117a8 <memchr@plt>
   1e328:	cmp	r0, #0
   1e32c:	beq	1e514 <__assert_fail@plt+0xcc28>
   1e330:	mov	r6, r0
   1e334:	mov	r0, #0
   1e338:	mov	r1, r4
   1e33c:	mov	r2, #18688	; 0x4900
   1e340:	strb	r0, [r6]
   1e344:	mvn	r0, #99	; 0x63
   1e348:	bl	11730 <openat64@plt>
   1e34c:	cmp	r0, #0
   1e350:	strb	r8, [r6]
   1e354:	bmi	1e50c <__assert_fail@plt+0xcc20>
   1e358:	movw	r1, #2179	; 0x883
   1e35c:	add	r6, r6, #1
   1e360:	mov	r5, r0
   1e364:	movt	r1, #2
   1e368:	mov	r0, r6
   1e36c:	bl	118d4 <strspn@plt>
   1e370:	add	r6, r6, r0
   1e374:	b	1e3b0 <__assert_fail@plt+0xcac4>
   1e378:	mov	r6, #0
   1e37c:	b	1e568 <__assert_fail@plt+0xcc7c>
   1e380:	mvn	r5, #99	; 0x63
   1e384:	mov	r6, r4
   1e388:	b	1e3b0 <__assert_fail@plt+0xcac4>
   1e38c:	movw	r1, #2179	; 0x883
   1e390:	mvn	r0, #99	; 0x63
   1e394:	mov	r2, #18688	; 0x4900
   1e398:	movt	r1, #2
   1e39c:	bl	11730 <openat64@plt>
   1e3a0:	cmp	r0, #0
   1e3a4:	bmi	1e50c <__assert_fail@plt+0xcc20>
   1e3a8:	mov	r5, r0
   1e3ac:	add	r6, r4, r6
   1e3b0:	ldrb	r0, [r6]
   1e3b4:	cmp	r0, #47	; 0x2f
   1e3b8:	beq	1e5bc <__assert_fail@plt+0xccd0>
   1e3bc:	add	sl, r4, r7
   1e3c0:	cmp	r6, sl
   1e3c4:	bhi	1e5d4 <__assert_fail@plt+0xcce8>
   1e3c8:	sub	r0, sl, r6
   1e3cc:	str	r9, [sp]
   1e3d0:	cmp	r0, #4096	; 0x1000
   1e3d4:	blt	1e48c <__assert_fail@plt+0xcba0>
   1e3d8:	movw	r9, #2179	; 0x883
   1e3dc:	mov	r8, #0
   1e3e0:	movt	r9, #2
   1e3e4:	b	1e410 <__assert_fail@plt+0xcb24>
   1e3e8:	mov	r0, #47	; 0x2f
   1e3ec:	mov	r1, r9
   1e3f0:	strb	r0, [r4], #1
   1e3f4:	mov	r0, r4
   1e3f8:	bl	118d4 <strspn@plt>
   1e3fc:	add	r6, r4, r0
   1e400:	mov	r5, r7
   1e404:	sub	r0, sl, r6
   1e408:	cmp	r0, #4096	; 0x1000
   1e40c:	blt	1e490 <__assert_fail@plt+0xcba4>
   1e410:	mov	r0, r6
   1e414:	mov	r1, #47	; 0x2f
   1e418:	mov	r2, #4096	; 0x1000
   1e41c:	bl	1173c <memrchr@plt>
   1e420:	cmp	r0, #0
   1e424:	beq	1e520 <__assert_fail@plt+0xcc34>
   1e428:	mov	r4, r0
   1e42c:	strb	r8, [r0], -r6
   1e430:	cmp	r0, #4096	; 0x1000
   1e434:	bge	1e574 <__assert_fail@plt+0xcc88>
   1e438:	mov	r0, r5
   1e43c:	mov	r1, r6
   1e440:	mov	r2, #18688	; 0x4900
   1e444:	bl	11730 <openat64@plt>
   1e448:	cmp	r0, #0
   1e44c:	bmi	1e530 <__assert_fail@plt+0xcc44>
   1e450:	mov	r7, r0
   1e454:	cmp	r5, #0
   1e458:	bmi	1e3e8 <__assert_fail@plt+0xcafc>
   1e45c:	mov	r0, r5
   1e460:	bl	118c8 <close@plt>
   1e464:	cmp	r0, #0
   1e468:	beq	1e3e8 <__assert_fail@plt+0xcafc>
   1e46c:	movw	r0, #2689	; 0xa81
   1e470:	movw	r1, #2591	; 0xa1f
   1e474:	movw	r3, #2702	; 0xa8e
   1e478:	mov	r2, #64	; 0x40
   1e47c:	movt	r0, #2
   1e480:	movt	r1, #2
   1e484:	movt	r3, #2
   1e488:	bl	118ec <__assert_fail@plt>
   1e48c:	mov	r7, r5
   1e490:	cmp	r6, sl
   1e494:	bcs	1e4d4 <__assert_fail@plt+0xcbe8>
   1e498:	mov	r0, r7
   1e49c:	mov	r1, r6
   1e4a0:	mov	r2, #18688	; 0x4900
   1e4a4:	bl	11730 <openat64@plt>
   1e4a8:	ldr	r9, [sp]
   1e4ac:	cmp	r0, #0
   1e4b0:	bmi	1e540 <__assert_fail@plt+0xcc54>
   1e4b4:	mov	r5, r0
   1e4b8:	cmp	r7, #0
   1e4bc:	bmi	1e4dc <__assert_fail@plt+0xcbf0>
   1e4c0:	mov	r0, r7
   1e4c4:	bl	118c8 <close@plt>
   1e4c8:	cmp	r0, #0
   1e4cc:	beq	1e4dc <__assert_fail@plt+0xcbf0>
   1e4d0:	b	1e46c <__assert_fail@plt+0xcb80>
   1e4d4:	ldr	r9, [sp]
   1e4d8:	mov	r5, r7
   1e4dc:	mov	r0, r5
   1e4e0:	bl	11850 <fchdir@plt>
   1e4e4:	cmp	r0, #0
   1e4e8:	bne	1e544 <__assert_fail@plt+0xcc58>
   1e4ec:	mov	r6, #0
   1e4f0:	cmp	r5, #0
   1e4f4:	bmi	1e568 <__assert_fail@plt+0xcc7c>
   1e4f8:	mov	r0, r5
   1e4fc:	bl	118c8 <close@plt>
   1e500:	cmp	r0, #0
   1e504:	beq	1e568 <__assert_fail@plt+0xcc7c>
   1e508:	b	1e46c <__assert_fail@plt+0xcb80>
   1e50c:	ldr	r4, [r9]
   1e510:	b	1e560 <__assert_fail@plt+0xcc74>
   1e514:	mov	r0, #36	; 0x24
   1e518:	str	r0, [r9]
   1e51c:	b	1e564 <__assert_fail@plt+0xcc78>
   1e520:	ldr	r1, [sp]
   1e524:	mov	r0, #36	; 0x24
   1e528:	str	r0, [r1]
   1e52c:	b	1e564 <__assert_fail@plt+0xcc78>
   1e530:	ldr	r9, [sp]
   1e534:	mov	r0, #47	; 0x2f
   1e538:	strb	r0, [r4]
   1e53c:	b	1e544 <__assert_fail@plt+0xcc58>
   1e540:	mov	r5, r7
   1e544:	ldr	r4, [r9]
   1e548:	cmp	r5, #0
   1e54c:	bmi	1e560 <__assert_fail@plt+0xcc74>
   1e550:	mov	r0, r5
   1e554:	bl	118c8 <close@plt>
   1e558:	cmp	r0, #0
   1e55c:	bne	1e46c <__assert_fail@plt+0xcb80>
   1e560:	str	r4, [r9]
   1e564:	mvn	r6, #0
   1e568:	mov	r0, r6
   1e56c:	sub	sp, fp, #28
   1e570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e574:	movw	r0, #2670	; 0xa6e
   1e578:	movw	r1, #2591	; 0xa1f
   1e57c:	movw	r3, #2608	; 0xa30
   1e580:	mov	r2, #179	; 0xb3
   1e584:	movt	r0, #2
   1e588:	b	1e5e8 <__assert_fail@plt+0xccfc>
   1e58c:	movw	r0, #2583	; 0xa17
   1e590:	movw	r1, #2591	; 0xa1f
   1e594:	movw	r3, #2608	; 0xa30
   1e598:	mov	r2, #126	; 0x7e
   1e59c:	movt	r0, #2
   1e5a0:	b	1e5e8 <__assert_fail@plt+0xccfc>
   1e5a4:	movw	r0, #2631	; 0xa47
   1e5a8:	movw	r1, #2591	; 0xa1f
   1e5ac:	movw	r3, #2608	; 0xa30
   1e5b0:	mov	r2, #127	; 0x7f
   1e5b4:	movt	r0, #2
   1e5b8:	b	1e5e8 <__assert_fail@plt+0xccfc>
   1e5bc:	movw	r0, #2643	; 0xa53
   1e5c0:	movw	r1, #2591	; 0xa1f
   1e5c4:	movw	r3, #2608	; 0xa30
   1e5c8:	mov	r2, #162	; 0xa2
   1e5cc:	movt	r0, #2
   1e5d0:	b	1e5e8 <__assert_fail@plt+0xccfc>
   1e5d4:	movw	r0, #2655	; 0xa5f
   1e5d8:	movw	r1, #2591	; 0xa1f
   1e5dc:	movw	r3, #2608	; 0xa30
   1e5e0:	mov	r2, #163	; 0xa3
   1e5e4:	movt	r0, #2
   1e5e8:	movt	r1, #2
   1e5ec:	movt	r3, #2
   1e5f0:	bl	118ec <__assert_fail@plt>
   1e5f4:	push	{r4, r5, r6, sl, fp, lr}
   1e5f8:	add	fp, sp, #16
   1e5fc:	mov	r4, r0
   1e600:	bl	1164c <__fpending@plt>
   1e604:	ldr	r6, [r4]
   1e608:	mov	r5, r0
   1e60c:	mov	r0, r4
   1e610:	bl	1e678 <__assert_fail@plt+0xcd8c>
   1e614:	tst	r6, #32
   1e618:	bne	1e650 <__assert_fail@plt+0xcd64>
   1e61c:	cmp	r0, #0
   1e620:	mov	r4, r0
   1e624:	mvnne	r4, #0
   1e628:	cmp	r5, #0
   1e62c:	bne	1e65c <__assert_fail@plt+0xcd70>
   1e630:	cmp	r0, #0
   1e634:	beq	1e65c <__assert_fail@plt+0xcd70>
   1e638:	bl	11748 <__errno_location@plt>
   1e63c:	ldr	r0, [r0]
   1e640:	subs	r4, r0, #9
   1e644:	mvnne	r4, #0
   1e648:	mov	r0, r4
   1e64c:	pop	{r4, r5, r6, sl, fp, pc}
   1e650:	mvn	r4, #0
   1e654:	cmp	r0, #0
   1e658:	beq	1e664 <__assert_fail@plt+0xcd78>
   1e65c:	mov	r0, r4
   1e660:	pop	{r4, r5, r6, sl, fp, pc}
   1e664:	bl	11748 <__errno_location@plt>
   1e668:	mov	r1, #0
   1e66c:	str	r1, [r0]
   1e670:	mov	r0, r4
   1e674:	pop	{r4, r5, r6, sl, fp, pc}
   1e678:	push	{r4, r5, r6, sl, fp, lr}
   1e67c:	add	fp, sp, #16
   1e680:	sub	sp, sp, #8
   1e684:	mov	r4, r0
   1e688:	bl	11790 <fileno@plt>
   1e68c:	cmn	r0, #1
   1e690:	ble	1e704 <__assert_fail@plt+0xce18>
   1e694:	mov	r0, r4
   1e698:	bl	116c4 <__freading@plt>
   1e69c:	cmp	r0, #0
   1e6a0:	beq	1e6cc <__assert_fail@plt+0xcde0>
   1e6a4:	mov	r0, r4
   1e6a8:	bl	11790 <fileno@plt>
   1e6ac:	mov	r1, #1
   1e6b0:	mov	r2, #0
   1e6b4:	mov	r3, #0
   1e6b8:	str	r1, [sp]
   1e6bc:	bl	11628 <lseek64@plt>
   1e6c0:	and	r0, r0, r1
   1e6c4:	cmn	r0, #1
   1e6c8:	beq	1e704 <__assert_fail@plt+0xce18>
   1e6cc:	mov	r0, r4
   1e6d0:	bl	1e750 <__assert_fail@plt+0xce64>
   1e6d4:	cmp	r0, #0
   1e6d8:	beq	1e704 <__assert_fail@plt+0xce18>
   1e6dc:	bl	11748 <__errno_location@plt>
   1e6e0:	ldr	r6, [r0]
   1e6e4:	mov	r5, r0
   1e6e8:	mov	r0, r4
   1e6ec:	bl	117b4 <fclose@plt>
   1e6f0:	cmp	r6, #0
   1e6f4:	strne	r6, [r5]
   1e6f8:	mvnne	r0, #0
   1e6fc:	sub	sp, fp, #16
   1e700:	pop	{r4, r5, r6, sl, fp, pc}
   1e704:	mov	r0, r4
   1e708:	sub	sp, fp, #16
   1e70c:	pop	{r4, r5, r6, sl, fp, lr}
   1e710:	b	117b4 <fclose@plt>
   1e714:	sub	sp, sp, #8
   1e718:	push	{fp, lr}
   1e71c:	mov	fp, sp
   1e720:	sub	sp, sp, #8
   1e724:	str	r2, [fp, #8]
   1e728:	str	r3, [fp, #12]
   1e72c:	tst	r1, #64	; 0x40
   1e730:	mov	r2, #0
   1e734:	ldrne	r2, [fp, #8]
   1e738:	bl	11688 <open64@plt>
   1e73c:	bl	1ea10 <__assert_fail@plt+0xd124>
   1e740:	mov	sp, fp
   1e744:	pop	{fp, lr}
   1e748:	add	sp, sp, #8
   1e74c:	bx	lr
   1e750:	push	{r4, sl, fp, lr}
   1e754:	add	fp, sp, #8
   1e758:	sub	sp, sp, #8
   1e75c:	mov	r4, r0
   1e760:	cmp	r0, #0
   1e764:	beq	1e79c <__assert_fail@plt+0xceb0>
   1e768:	mov	r0, r4
   1e76c:	bl	116c4 <__freading@plt>
   1e770:	cmp	r0, #0
   1e774:	beq	1e79c <__assert_fail@plt+0xceb0>
   1e778:	ldrb	r0, [r4, #1]
   1e77c:	tst	r0, #1
   1e780:	beq	1e79c <__assert_fail@plt+0xceb0>
   1e784:	mov	r0, #1
   1e788:	mov	r2, #0
   1e78c:	mov	r3, #0
   1e790:	str	r0, [sp]
   1e794:	mov	r0, r4
   1e798:	bl	1e7ac <__assert_fail@plt+0xcec0>
   1e79c:	mov	r0, r4
   1e7a0:	sub	sp, fp, #8
   1e7a4:	pop	{r4, sl, fp, lr}
   1e7a8:	b	1152c <fflush@plt>
   1e7ac:	push	{r4, r5, r6, r7, fp, lr}
   1e7b0:	add	fp, sp, #16
   1e7b4:	sub	sp, sp, #8
   1e7b8:	mov	r4, r0
   1e7bc:	ldr	r0, [r0, #4]
   1e7c0:	mov	r5, r3
   1e7c4:	mov	r6, r2
   1e7c8:	ldr	r1, [r4, #8]
   1e7cc:	cmp	r1, r0
   1e7d0:	bne	1e7ec <__assert_fail@plt+0xcf00>
   1e7d4:	ldrd	r0, [r4, #16]
   1e7d8:	cmp	r1, r0
   1e7dc:	bne	1e7ec <__assert_fail@plt+0xcf00>
   1e7e0:	ldr	r0, [r4, #36]	; 0x24
   1e7e4:	cmp	r0, #0
   1e7e8:	beq	1e804 <__assert_fail@plt+0xcf18>
   1e7ec:	mov	r0, r4
   1e7f0:	mov	r2, r6
   1e7f4:	mov	r3, r5
   1e7f8:	sub	sp, fp, #16
   1e7fc:	pop	{r4, r5, r6, r7, fp, lr}
   1e800:	b	117c0 <fseeko64@plt>
   1e804:	ldr	r7, [fp, #8]
   1e808:	mov	r0, r4
   1e80c:	bl	11790 <fileno@plt>
   1e810:	mov	r2, r6
   1e814:	mov	r3, r5
   1e818:	str	r7, [sp]
   1e81c:	bl	11628 <lseek64@plt>
   1e820:	and	r2, r0, r1
   1e824:	cmn	r2, #1
   1e828:	beq	1e848 <__assert_fail@plt+0xcf5c>
   1e82c:	strd	r0, [r4, #80]	; 0x50
   1e830:	ldr	r0, [r4]
   1e834:	bic	r0, r0, #16
   1e838:	str	r0, [r4]
   1e83c:	mov	r0, #0
   1e840:	sub	sp, fp, #16
   1e844:	pop	{r4, r5, r6, r7, fp, pc}
   1e848:	mvn	r0, #0
   1e84c:	sub	sp, fp, #16
   1e850:	pop	{r4, r5, r6, r7, fp, pc}
   1e854:	push	{r4, sl, fp, lr}
   1e858:	add	fp, sp, #8
   1e85c:	sub	sp, sp, #264	; 0x108
   1e860:	add	r1, sp, #7
   1e864:	movw	r2, #257	; 0x101
   1e868:	bl	1e970 <__assert_fail@plt+0xd084>
   1e86c:	mov	r4, #0
   1e870:	cmp	r0, #0
   1e874:	bne	1e8b4 <__assert_fail@plt+0xcfc8>
   1e878:	movw	r1, #2739	; 0xab3
   1e87c:	add	r0, sp, #7
   1e880:	mov	r2, #2
   1e884:	movt	r1, #2
   1e888:	bl	1170c <bcmp@plt>
   1e88c:	cmp	r0, #0
   1e890:	beq	1e8b4 <__assert_fail@plt+0xcfc8>
   1e894:	movw	r1, #2741	; 0xab5
   1e898:	add	r0, sp, #7
   1e89c:	mov	r2, #6
   1e8a0:	movt	r1, #2
   1e8a4:	bl	1170c <bcmp@plt>
   1e8a8:	cmp	r0, #0
   1e8ac:	mov	r4, r0
   1e8b0:	movwne	r4, #1
   1e8b4:	mov	r0, r4
   1e8b8:	sub	sp, fp, #8
   1e8bc:	pop	{r4, sl, fp, pc}
   1e8c0:	ldrb	r2, [r0]
   1e8c4:	cmp	r2, #0
   1e8c8:	beq	1e8ec <__assert_fail@plt+0xd000>
   1e8cc:	add	r3, r0, #1
   1e8d0:	mov	r0, #0
   1e8d4:	ror	r0, r0, #23
   1e8d8:	uxtab	r0, r0, r2
   1e8dc:	ldrb	r2, [r3], #1
   1e8e0:	cmp	r2, #0
   1e8e4:	bne	1e8d4 <__assert_fail@plt+0xcfe8>
   1e8e8:	b	1e8f0 <__assert_fail@plt+0xd004>
   1e8ec:	mov	r0, #0
   1e8f0:	udiv	r2, r0, r1
   1e8f4:	mls	r0, r2, r1, r0
   1e8f8:	bx	lr
   1e8fc:	push	{fp, lr}
   1e900:	mov	fp, sp
   1e904:	mov	r0, #14
   1e908:	bl	11820 <nl_langinfo@plt>
   1e90c:	movw	r1, #64943	; 0xfdaf
   1e910:	cmp	r0, #0
   1e914:	movt	r1, #1
   1e918:	movne	r1, r0
   1e91c:	movw	r0, #2747	; 0xabb
   1e920:	ldrb	r2, [r1]
   1e924:	movt	r0, #2
   1e928:	cmp	r2, #0
   1e92c:	movne	r0, r1
   1e930:	pop	{fp, pc}
   1e934:	cmp	r2, #0
   1e938:	beq	1e968 <__assert_fail@plt+0xd07c>
   1e93c:	mvn	r3, #0
   1e940:	udiv	r3, r3, r2
   1e944:	cmp	r3, r1
   1e948:	bcs	1e968 <__assert_fail@plt+0xd07c>
   1e94c:	push	{fp, lr}
   1e950:	mov	fp, sp
   1e954:	bl	11748 <__errno_location@plt>
   1e958:	mov	r1, #12
   1e95c:	str	r1, [r0]
   1e960:	mov	r0, #0
   1e964:	pop	{fp, pc}
   1e968:	mul	r1, r2, r1
   1e96c:	b	1d16c <__assert_fail@plt+0xb880>
   1e970:	push	{r4, r5, r6, r7, fp, lr}
   1e974:	add	fp, sp, #16
   1e978:	mov	r4, r1
   1e97c:	mov	r1, #0
   1e980:	mov	r6, r2
   1e984:	bl	117f0 <setlocale@plt>
   1e988:	cmp	r0, #0
   1e98c:	beq	1e9bc <__assert_fail@plt+0xd0d0>
   1e990:	mov	r7, r0
   1e994:	bl	11718 <strlen@plt>
   1e998:	cmp	r0, r6
   1e99c:	bcs	1e9d8 <__assert_fail@plt+0xd0ec>
   1e9a0:	add	r2, r0, #1
   1e9a4:	mov	r0, r4
   1e9a8:	mov	r1, r7
   1e9ac:	bl	11574 <memcpy@plt>
   1e9b0:	mov	r5, #0
   1e9b4:	mov	r0, r5
   1e9b8:	pop	{r4, r5, r6, r7, fp, pc}
   1e9bc:	mov	r5, #22
   1e9c0:	cmp	r6, #0
   1e9c4:	beq	1ea00 <__assert_fail@plt+0xd114>
   1e9c8:	mov	r0, #0
   1e9cc:	strb	r0, [r4]
   1e9d0:	mov	r0, r5
   1e9d4:	pop	{r4, r5, r6, r7, fp, pc}
   1e9d8:	mov	r5, #34	; 0x22
   1e9dc:	cmp	r6, #0
   1e9e0:	beq	1ea00 <__assert_fail@plt+0xd114>
   1e9e4:	sub	r6, r6, #1
   1e9e8:	mov	r0, r4
   1e9ec:	mov	r1, r7
   1e9f0:	mov	r2, r6
   1e9f4:	bl	11574 <memcpy@plt>
   1e9f8:	mov	r0, #0
   1e9fc:	strb	r0, [r4, r6]
   1ea00:	mov	r0, r5
   1ea04:	pop	{r4, r5, r6, r7, fp, pc}
   1ea08:	mov	r1, #0
   1ea0c:	b	117f0 <setlocale@plt>
   1ea10:	push	{r4, r5, r6, r7, fp, lr}
   1ea14:	add	fp, sp, #16
   1ea18:	mov	r4, r0
   1ea1c:	cmp	r0, #2
   1ea20:	bhi	1ea50 <__assert_fail@plt+0xd164>
   1ea24:	mov	r0, r4
   1ea28:	bl	1ea58 <__assert_fail@plt+0xd16c>
   1ea2c:	mov	r5, r0
   1ea30:	bl	11748 <__errno_location@plt>
   1ea34:	ldr	r7, [r0]
   1ea38:	mov	r6, r0
   1ea3c:	mov	r0, r4
   1ea40:	bl	118c8 <close@plt>
   1ea44:	mov	r0, r5
   1ea48:	str	r7, [r6]
   1ea4c:	pop	{r4, r5, r6, r7, fp, pc}
   1ea50:	mov	r0, r4
   1ea54:	pop	{r4, r5, r6, r7, fp, pc}
   1ea58:	mov	r1, #0
   1ea5c:	mov	r2, #3
   1ea60:	b	1ea64 <__assert_fail@plt+0xd178>
   1ea64:	sub	sp, sp, #8
   1ea68:	push	{r4, r5, r6, r7, fp, lr}
   1ea6c:	add	fp, sp, #16
   1ea70:	sub	sp, sp, #8
   1ea74:	mov	r5, r0
   1ea78:	add	r0, fp, #8
   1ea7c:	cmp	r1, #11
   1ea80:	str	r2, [fp, #8]
   1ea84:	str	r3, [fp, #12]
   1ea88:	str	r0, [sp, #4]
   1ea8c:	bhi	1eac8 <__assert_fail@plt+0xd1dc>
   1ea90:	mov	r0, #1
   1ea94:	movw	r2, #1300	; 0x514
   1ea98:	tst	r2, r0, lsl r1
   1ea9c:	bne	1eb88 <__assert_fail@plt+0xd29c>
   1eaa0:	movw	r2, #2570	; 0xa0a
   1eaa4:	tst	r2, r0, lsl r1
   1eaa8:	bne	1eaf0 <__assert_fail@plt+0xd204>
   1eaac:	cmp	r1, #0
   1eab0:	bne	1eac8 <__assert_fail@plt+0xd1dc>
   1eab4:	ldr	r0, [sp, #4]
   1eab8:	add	r1, r0, #4
   1eabc:	str	r1, [sp, #4]
   1eac0:	mov	r1, #0
   1eac4:	b	1eb94 <__assert_fail@plt+0xd2a8>
   1eac8:	sub	r0, r1, #1024	; 0x400
   1eacc:	cmp	r0, #10
   1ead0:	bhi	1eb88 <__assert_fail@plt+0xd29c>
   1ead4:	mov	r2, #1
   1ead8:	movw	r3, #645	; 0x285
   1eadc:	tst	r3, r2, lsl r0
   1eae0:	bne	1eb88 <__assert_fail@plt+0xd29c>
   1eae4:	movw	r3, #1282	; 0x502
   1eae8:	tst	r3, r2, lsl r0
   1eaec:	beq	1eafc <__assert_fail@plt+0xd210>
   1eaf0:	mov	r0, r5
   1eaf4:	bl	117d8 <fcntl64@plt>
   1eaf8:	b	1eba0 <__assert_fail@plt+0xd2b4>
   1eafc:	cmp	r0, #6
   1eb00:	bne	1eb88 <__assert_fail@plt+0xd29c>
   1eb04:	ldr	r0, [sp, #4]
   1eb08:	movw	r7, #5368	; 0x14f8
   1eb0c:	movt	r7, #3
   1eb10:	add	r1, r0, #4
   1eb14:	str	r1, [sp, #4]
   1eb18:	ldr	r6, [r0]
   1eb1c:	ldr	r0, [r7]
   1eb20:	cmp	r0, #0
   1eb24:	bmi	1ebc4 <__assert_fail@plt+0xd2d8>
   1eb28:	mov	r0, r5
   1eb2c:	movw	r1, #1030	; 0x406
   1eb30:	mov	r2, r6
   1eb34:	bl	117d8 <fcntl64@plt>
   1eb38:	mov	r4, r0
   1eb3c:	cmn	r0, #1
   1eb40:	bgt	1ebb8 <__assert_fail@plt+0xd2cc>
   1eb44:	bl	11748 <__errno_location@plt>
   1eb48:	ldr	r0, [r0]
   1eb4c:	cmp	r0, #22
   1eb50:	bne	1ebb8 <__assert_fail@plt+0xd2cc>
   1eb54:	mov	r0, r5
   1eb58:	mov	r1, #0
   1eb5c:	mov	r2, r6
   1eb60:	bl	117d8 <fcntl64@plt>
   1eb64:	mov	r4, r0
   1eb68:	cmp	r0, #0
   1eb6c:	bmi	1eba4 <__assert_fail@plt+0xd2b8>
   1eb70:	mvn	r0, #0
   1eb74:	str	r0, [r7]
   1eb78:	mov	r0, #1
   1eb7c:	cmp	r0, #0
   1eb80:	bne	1ebf0 <__assert_fail@plt+0xd304>
   1eb84:	b	1eba4 <__assert_fail@plt+0xd2b8>
   1eb88:	ldr	r0, [sp, #4]
   1eb8c:	add	r2, r0, #4
   1eb90:	str	r2, [sp, #4]
   1eb94:	ldr	r2, [r0]
   1eb98:	mov	r0, r5
   1eb9c:	bl	117d8 <fcntl64@plt>
   1eba0:	mov	r4, r0
   1eba4:	mov	r0, r4
   1eba8:	sub	sp, fp, #16
   1ebac:	pop	{r4, r5, r6, r7, fp, lr}
   1ebb0:	add	sp, sp, #8
   1ebb4:	bx	lr
   1ebb8:	mov	r0, #1
   1ebbc:	str	r0, [r7]
   1ebc0:	b	1eba4 <__assert_fail@plt+0xd2b8>
   1ebc4:	mov	r0, r5
   1ebc8:	mov	r1, #0
   1ebcc:	mov	r2, r6
   1ebd0:	bl	117d8 <fcntl64@plt>
   1ebd4:	mov	r4, r0
   1ebd8:	ldr	r0, [r7]
   1ebdc:	add	r0, r0, #1
   1ebe0:	clz	r0, r0
   1ebe4:	lsr	r0, r0, #5
   1ebe8:	cmp	r0, #0
   1ebec:	beq	1eba4 <__assert_fail@plt+0xd2b8>
   1ebf0:	cmp	r4, #0
   1ebf4:	bmi	1eba4 <__assert_fail@plt+0xd2b8>
   1ebf8:	mov	r0, r4
   1ebfc:	mov	r1, #1
   1ec00:	bl	117d8 <fcntl64@plt>
   1ec04:	cmp	r0, #0
   1ec08:	bmi	1ec24 <__assert_fail@plt+0xd338>
   1ec0c:	orr	r2, r0, #1
   1ec10:	mov	r0, r4
   1ec14:	mov	r1, #2
   1ec18:	bl	117d8 <fcntl64@plt>
   1ec1c:	cmn	r0, #1
   1ec20:	bne	1eba4 <__assert_fail@plt+0xd2b8>
   1ec24:	bl	11748 <__errno_location@plt>
   1ec28:	ldr	r6, [r0]
   1ec2c:	mov	r5, r0
   1ec30:	mov	r0, r4
   1ec34:	bl	118c8 <close@plt>
   1ec38:	str	r6, [r5]
   1ec3c:	mvn	r4, #0
   1ec40:	b	1eba4 <__assert_fail@plt+0xd2b8>
   1ec44:	eor	r1, r1, #-2147483648	; 0x80000000
   1ec48:	b	1ec50 <__assert_fail@plt+0xd364>
   1ec4c:	eor	r3, r3, #-2147483648	; 0x80000000
   1ec50:	push	{r4, r5, lr}
   1ec54:	lsl	r4, r1, #1
   1ec58:	lsl	r5, r3, #1
   1ec5c:	teq	r4, r5
   1ec60:	teqeq	r0, r2
   1ec64:	orrsne	ip, r4, r0
   1ec68:	orrsne	ip, r5, r2
   1ec6c:	mvnsne	ip, r4, asr #21
   1ec70:	mvnsne	ip, r5, asr #21
   1ec74:	beq	1ee60 <__assert_fail@plt+0xd574>
   1ec78:	lsr	r4, r4, #21
   1ec7c:	rsbs	r5, r4, r5, lsr #21
   1ec80:	rsblt	r5, r5, #0
   1ec84:	ble	1eca4 <__assert_fail@plt+0xd3b8>
   1ec88:	add	r4, r4, r5
   1ec8c:	eor	r2, r0, r2
   1ec90:	eor	r3, r1, r3
   1ec94:	eor	r0, r2, r0
   1ec98:	eor	r1, r3, r1
   1ec9c:	eor	r2, r0, r2
   1eca0:	eor	r3, r1, r3
   1eca4:	cmp	r5, #54	; 0x36
   1eca8:	pophi	{r4, r5, pc}
   1ecac:	tst	r1, #-2147483648	; 0x80000000
   1ecb0:	lsl	r1, r1, #12
   1ecb4:	mov	ip, #1048576	; 0x100000
   1ecb8:	orr	r1, ip, r1, lsr #12
   1ecbc:	beq	1ecc8 <__assert_fail@plt+0xd3dc>
   1ecc0:	rsbs	r0, r0, #0
   1ecc4:	rsc	r1, r1, #0
   1ecc8:	tst	r3, #-2147483648	; 0x80000000
   1eccc:	lsl	r3, r3, #12
   1ecd0:	orr	r3, ip, r3, lsr #12
   1ecd4:	beq	1ece0 <__assert_fail@plt+0xd3f4>
   1ecd8:	rsbs	r2, r2, #0
   1ecdc:	rsc	r3, r3, #0
   1ece0:	teq	r4, r5
   1ece4:	beq	1ee48 <__assert_fail@plt+0xd55c>
   1ece8:	sub	r4, r4, #1
   1ecec:	rsbs	lr, r5, #32
   1ecf0:	blt	1ed0c <__assert_fail@plt+0xd420>
   1ecf4:	lsl	ip, r2, lr
   1ecf8:	adds	r0, r0, r2, lsr r5
   1ecfc:	adc	r1, r1, #0
   1ed00:	adds	r0, r0, r3, lsl lr
   1ed04:	adcs	r1, r1, r3, asr r5
   1ed08:	b	1ed28 <__assert_fail@plt+0xd43c>
   1ed0c:	sub	r5, r5, #32
   1ed10:	add	lr, lr, #32
   1ed14:	cmp	r2, #1
   1ed18:	lsl	ip, r3, lr
   1ed1c:	orrcs	ip, ip, #2
   1ed20:	adds	r0, r0, r3, asr r5
   1ed24:	adcs	r1, r1, r3, asr #31
   1ed28:	and	r5, r1, #-2147483648	; 0x80000000
   1ed2c:	bpl	1ed3c <__assert_fail@plt+0xd450>
   1ed30:	rsbs	ip, ip, #0
   1ed34:	rscs	r0, r0, #0
   1ed38:	rsc	r1, r1, #0
   1ed3c:	cmp	r1, #1048576	; 0x100000
   1ed40:	bcc	1ed80 <__assert_fail@plt+0xd494>
   1ed44:	cmp	r1, #2097152	; 0x200000
   1ed48:	bcc	1ed68 <__assert_fail@plt+0xd47c>
   1ed4c:	lsrs	r1, r1, #1
   1ed50:	rrxs	r0, r0
   1ed54:	rrx	ip, ip
   1ed58:	add	r4, r4, #1
   1ed5c:	lsl	r2, r4, #21
   1ed60:	cmn	r2, #4194304	; 0x400000
   1ed64:	bcs	1eec0 <__assert_fail@plt+0xd5d4>
   1ed68:	cmp	ip, #-2147483648	; 0x80000000
   1ed6c:	lsrseq	ip, r0, #1
   1ed70:	adcs	r0, r0, #0
   1ed74:	adc	r1, r1, r4, lsl #20
   1ed78:	orr	r1, r1, r5
   1ed7c:	pop	{r4, r5, pc}
   1ed80:	lsls	ip, ip, #1
   1ed84:	adcs	r0, r0, r0
   1ed88:	adc	r1, r1, r1
   1ed8c:	tst	r1, #1048576	; 0x100000
   1ed90:	sub	r4, r4, #1
   1ed94:	bne	1ed68 <__assert_fail@plt+0xd47c>
   1ed98:	teq	r1, #0
   1ed9c:	moveq	r1, r0
   1eda0:	moveq	r0, #0
   1eda4:	clz	r3, r1
   1eda8:	addeq	r3, r3, #32
   1edac:	sub	r3, r3, #11
   1edb0:	subs	r2, r3, #32
   1edb4:	bge	1edd8 <__assert_fail@plt+0xd4ec>
   1edb8:	adds	r2, r2, #12
   1edbc:	ble	1edd4 <__assert_fail@plt+0xd4e8>
   1edc0:	add	ip, r2, #20
   1edc4:	rsb	r2, r2, #12
   1edc8:	lsl	r0, r1, ip
   1edcc:	lsr	r1, r1, r2
   1edd0:	b	1ede8 <__assert_fail@plt+0xd4fc>
   1edd4:	add	r2, r2, #20
   1edd8:	rsble	ip, r2, #32
   1eddc:	lsl	r1, r1, r2
   1ede0:	orrle	r1, r1, r0, lsr ip
   1ede4:	lslle	r0, r0, r2
   1ede8:	subs	r4, r4, r3
   1edec:	addge	r1, r1, r4, lsl #20
   1edf0:	orrge	r1, r1, r5
   1edf4:	popge	{r4, r5, pc}
   1edf8:	mvn	r4, r4
   1edfc:	subs	r4, r4, #31
   1ee00:	bge	1ee3c <__assert_fail@plt+0xd550>
   1ee04:	adds	r4, r4, #12
   1ee08:	bgt	1ee24 <__assert_fail@plt+0xd538>
   1ee0c:	add	r4, r4, #20
   1ee10:	rsb	r2, r4, #32
   1ee14:	lsr	r0, r0, r4
   1ee18:	orr	r0, r0, r1, lsl r2
   1ee1c:	orr	r1, r5, r1, lsr r4
   1ee20:	pop	{r4, r5, pc}
   1ee24:	rsb	r4, r4, #12
   1ee28:	rsb	r2, r4, #32
   1ee2c:	lsr	r0, r0, r2
   1ee30:	orr	r0, r0, r1, lsl r4
   1ee34:	mov	r1, r5
   1ee38:	pop	{r4, r5, pc}
   1ee3c:	lsr	r0, r1, r4
   1ee40:	mov	r1, r5
   1ee44:	pop	{r4, r5, pc}
   1ee48:	teq	r4, #0
   1ee4c:	eor	r3, r3, #1048576	; 0x100000
   1ee50:	eoreq	r1, r1, #1048576	; 0x100000
   1ee54:	addeq	r4, r4, #1
   1ee58:	subne	r5, r5, #1
   1ee5c:	b	1ece8 <__assert_fail@plt+0xd3fc>
   1ee60:	mvns	ip, r4, asr #21
   1ee64:	mvnsne	ip, r5, asr #21
   1ee68:	beq	1eed0 <__assert_fail@plt+0xd5e4>
   1ee6c:	teq	r4, r5
   1ee70:	teqeq	r0, r2
   1ee74:	beq	1ee88 <__assert_fail@plt+0xd59c>
   1ee78:	orrs	ip, r4, r0
   1ee7c:	moveq	r1, r3
   1ee80:	moveq	r0, r2
   1ee84:	pop	{r4, r5, pc}
   1ee88:	teq	r1, r3
   1ee8c:	movne	r1, #0
   1ee90:	movne	r0, #0
   1ee94:	popne	{r4, r5, pc}
   1ee98:	lsrs	ip, r4, #21
   1ee9c:	bne	1eeb0 <__assert_fail@plt+0xd5c4>
   1eea0:	lsls	r0, r0, #1
   1eea4:	adcs	r1, r1, r1
   1eea8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1eeac:	pop	{r4, r5, pc}
   1eeb0:	adds	r4, r4, #4194304	; 0x400000
   1eeb4:	addcc	r1, r1, #1048576	; 0x100000
   1eeb8:	popcc	{r4, r5, pc}
   1eebc:	and	r5, r1, #-2147483648	; 0x80000000
   1eec0:	orr	r1, r5, #2130706432	; 0x7f000000
   1eec4:	orr	r1, r1, #15728640	; 0xf00000
   1eec8:	mov	r0, #0
   1eecc:	pop	{r4, r5, pc}
   1eed0:	mvns	ip, r4, asr #21
   1eed4:	movne	r1, r3
   1eed8:	movne	r0, r2
   1eedc:	mvnseq	ip, r5, asr #21
   1eee0:	movne	r3, r1
   1eee4:	movne	r2, r0
   1eee8:	orrs	r4, r0, r1, lsl #12
   1eeec:	orrseq	r5, r2, r3, lsl #12
   1eef0:	teqeq	r1, r3
   1eef4:	orrne	r1, r1, #524288	; 0x80000
   1eef8:	pop	{r4, r5, pc}
   1eefc:	teq	r0, #0
   1ef00:	moveq	r1, #0
   1ef04:	bxeq	lr
   1ef08:	push	{r4, r5, lr}
   1ef0c:	mov	r4, #1024	; 0x400
   1ef10:	add	r4, r4, #50	; 0x32
   1ef14:	mov	r5, #0
   1ef18:	mov	r1, #0
   1ef1c:	b	1ed98 <__assert_fail@plt+0xd4ac>
   1ef20:	teq	r0, #0
   1ef24:	moveq	r1, #0
   1ef28:	bxeq	lr
   1ef2c:	push	{r4, r5, lr}
   1ef30:	mov	r4, #1024	; 0x400
   1ef34:	add	r4, r4, #50	; 0x32
   1ef38:	ands	r5, r0, #-2147483648	; 0x80000000
   1ef3c:	rsbmi	r0, r0, #0
   1ef40:	mov	r1, #0
   1ef44:	b	1ed98 <__assert_fail@plt+0xd4ac>
   1ef48:	lsls	r2, r0, #1
   1ef4c:	asr	r1, r2, #3
   1ef50:	rrx	r1, r1
   1ef54:	lsl	r0, r2, #28
   1ef58:	andsne	r3, r2, #-16777216	; 0xff000000
   1ef5c:	teqne	r3, #-16777216	; 0xff000000
   1ef60:	eorne	r1, r1, #939524096	; 0x38000000
   1ef64:	bxne	lr
   1ef68:	bics	r2, r2, #-16777216	; 0xff000000
   1ef6c:	bxeq	lr
   1ef70:	teq	r3, #-16777216	; 0xff000000
   1ef74:	orreq	r1, r1, #524288	; 0x80000
   1ef78:	bxeq	lr
   1ef7c:	push	{r4, r5, lr}
   1ef80:	mov	r4, #896	; 0x380
   1ef84:	and	r5, r1, #-2147483648	; 0x80000000
   1ef88:	bic	r1, r1, #-2147483648	; 0x80000000
   1ef8c:	b	1ed98 <__assert_fail@plt+0xd4ac>
   1ef90:	orrs	r2, r0, r1
   1ef94:	bxeq	lr
   1ef98:	push	{r4, r5, lr}
   1ef9c:	mov	r5, #0
   1efa0:	b	1efc0 <__assert_fail@plt+0xd6d4>
   1efa4:	orrs	r2, r0, r1
   1efa8:	bxeq	lr
   1efac:	push	{r4, r5, lr}
   1efb0:	ands	r5, r1, #-2147483648	; 0x80000000
   1efb4:	bpl	1efc0 <__assert_fail@plt+0xd6d4>
   1efb8:	rsbs	r0, r0, #0
   1efbc:	rsc	r1, r1, #0
   1efc0:	mov	r4, #1024	; 0x400
   1efc4:	add	r4, r4, #50	; 0x32
   1efc8:	lsrs	ip, r1, #22
   1efcc:	beq	1ed3c <__assert_fail@plt+0xd450>
   1efd0:	mov	r2, #3
   1efd4:	lsrs	ip, ip, #3
   1efd8:	addne	r2, r2, #3
   1efdc:	lsrs	ip, ip, #3
   1efe0:	addne	r2, r2, #3
   1efe4:	add	r2, r2, ip, lsr #3
   1efe8:	rsb	r3, r2, #32
   1efec:	lsl	ip, r0, r3
   1eff0:	lsr	r0, r0, r2
   1eff4:	orr	r0, r0, r1, lsl r3
   1eff8:	lsr	r1, r1, r2
   1effc:	add	r4, r4, r2
   1f000:	b	1ed3c <__assert_fail@plt+0xd450>
   1f004:	cmp	r3, #0
   1f008:	cmpeq	r2, #0
   1f00c:	bne	1f024 <__assert_fail@plt+0xd738>
   1f010:	cmp	r1, #0
   1f014:	cmpeq	r0, #0
   1f018:	mvnne	r1, #0
   1f01c:	mvnne	r0, #0
   1f020:	b	1f040 <__assert_fail@plt+0xd754>
   1f024:	sub	sp, sp, #8
   1f028:	push	{sp, lr}
   1f02c:	bl	1f090 <__assert_fail@plt+0xd7a4>
   1f030:	ldr	lr, [sp, #4]
   1f034:	add	sp, sp, #8
   1f038:	pop	{r2, r3}
   1f03c:	bx	lr
   1f040:	push	{r1, lr}
   1f044:	mov	r0, #8
   1f048:	bl	114fc <raise@plt>
   1f04c:	pop	{r1, pc}
   1f050:	vmov	d6, r0, r1
   1f054:	vldr	d7, [pc, #36]	; 1f080 <__assert_fail@plt+0xd794>
   1f058:	vldr	d5, [pc, #40]	; 1f088 <__assert_fail@plt+0xd79c>
   1f05c:	vmul.f64	d7, d6, d7
   1f060:	vcvt.u32.f64	s14, d7
   1f064:	vcvt.f64.u32	d4, s14
   1f068:	vmov	r1, s14
   1f06c:	vmls.f64	d6, d4, d5
   1f070:	vcvt.u32.f64	s15, d6
   1f074:	vmov	r0, s15
   1f078:	bx	lr
   1f07c:	nop			; (mov r0, r0)
   1f080:	andeq	r0, r0, r0
   1f084:	ldclcc	0, cr0, [r0]
   1f088:	andeq	r0, r0, r0
   1f08c:	mvnsmi	r0, r0
   1f090:	cmp	r1, r3
   1f094:	cmpeq	r0, r2
   1f098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f09c:	mov	r4, r0
   1f0a0:	movcc	r0, #0
   1f0a4:	mov	r5, r1
   1f0a8:	ldr	lr, [sp, #36]	; 0x24
   1f0ac:	movcc	r1, r0
   1f0b0:	bcc	1f1ac <__assert_fail@plt+0xd8c0>
   1f0b4:	cmp	r3, #0
   1f0b8:	clzeq	ip, r2
   1f0bc:	clzne	ip, r3
   1f0c0:	addeq	ip, ip, #32
   1f0c4:	cmp	r5, #0
   1f0c8:	clzeq	r1, r4
   1f0cc:	addeq	r1, r1, #32
   1f0d0:	clzne	r1, r5
   1f0d4:	sub	ip, ip, r1
   1f0d8:	sub	sl, ip, #32
   1f0dc:	lsl	r9, r3, ip
   1f0e0:	rsb	fp, ip, #32
   1f0e4:	orr	r9, r9, r2, lsl sl
   1f0e8:	orr	r9, r9, r2, lsr fp
   1f0ec:	lsl	r8, r2, ip
   1f0f0:	cmp	r5, r9
   1f0f4:	cmpeq	r4, r8
   1f0f8:	movcc	r0, #0
   1f0fc:	movcc	r1, r0
   1f100:	bcc	1f11c <__assert_fail@plt+0xd830>
   1f104:	mov	r0, #1
   1f108:	subs	r4, r4, r8
   1f10c:	lsl	r1, r0, sl
   1f110:	orr	r1, r1, r0, lsr fp
   1f114:	lsl	r0, r0, ip
   1f118:	sbc	r5, r5, r9
   1f11c:	cmp	ip, #0
   1f120:	beq	1f1ac <__assert_fail@plt+0xd8c0>
   1f124:	lsr	r6, r8, #1
   1f128:	orr	r6, r6, r9, lsl #31
   1f12c:	lsr	r7, r9, #1
   1f130:	mov	r2, ip
   1f134:	b	1f158 <__assert_fail@plt+0xd86c>
   1f138:	subs	r3, r4, r6
   1f13c:	sbc	r8, r5, r7
   1f140:	adds	r3, r3, r3
   1f144:	adc	r8, r8, r8
   1f148:	adds	r4, r3, #1
   1f14c:	adc	r5, r8, #0
   1f150:	subs	r2, r2, #1
   1f154:	beq	1f174 <__assert_fail@plt+0xd888>
   1f158:	cmp	r5, r7
   1f15c:	cmpeq	r4, r6
   1f160:	bcs	1f138 <__assert_fail@plt+0xd84c>
   1f164:	adds	r4, r4, r4
   1f168:	adc	r5, r5, r5
   1f16c:	subs	r2, r2, #1
   1f170:	bne	1f158 <__assert_fail@plt+0xd86c>
   1f174:	lsr	r3, r4, ip
   1f178:	orr	r3, r3, r5, lsl fp
   1f17c:	lsr	r2, r5, ip
   1f180:	orr	r3, r3, r5, lsr sl
   1f184:	adds	r0, r0, r4
   1f188:	mov	r4, r3
   1f18c:	lsl	r3, r2, ip
   1f190:	orr	r3, r3, r4, lsl sl
   1f194:	lsl	ip, r4, ip
   1f198:	orr	r3, r3, r4, lsr fp
   1f19c:	adc	r1, r1, r5
   1f1a0:	subs	r0, r0, ip
   1f1a4:	mov	r5, r2
   1f1a8:	sbc	r1, r1, r3
   1f1ac:	cmp	lr, #0
   1f1b0:	strdne	r4, [lr]
   1f1b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f1bc:	mov	r7, r0
   1f1c0:	ldr	r6, [pc, #72]	; 1f210 <__assert_fail@plt+0xd924>
   1f1c4:	ldr	r5, [pc, #72]	; 1f214 <__assert_fail@plt+0xd928>
   1f1c8:	add	r6, pc, r6
   1f1cc:	add	r5, pc, r5
   1f1d0:	sub	r6, r6, r5
   1f1d4:	mov	r8, r1
   1f1d8:	mov	r9, r2
   1f1dc:	bl	114c4 <calloc@plt-0x20>
   1f1e0:	asrs	r6, r6, #2
   1f1e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f1e8:	mov	r4, #0
   1f1ec:	add	r4, r4, #1
   1f1f0:	ldr	r3, [r5], #4
   1f1f4:	mov	r2, r9
   1f1f8:	mov	r1, r8
   1f1fc:	mov	r0, r7
   1f200:	blx	r3
   1f204:	cmp	r6, r4
   1f208:	bne	1f1ec <__assert_fail@plt+0xd900>
   1f20c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f210:	andeq	r1, r1, ip, lsr sp
   1f214:	andeq	r1, r1, r4, lsr sp
   1f218:	bx	lr
   1f21c:	ldr	r3, [pc, #12]	; 1f230 <__assert_fail@plt+0xd944>
   1f220:	mov	r1, #0
   1f224:	add	r3, pc, r3
   1f228:	ldr	r2, [r3]
   1f22c:	b	11760 <__cxa_atexit@plt>
   1f230:	andeq	r1, r1, r8, asr #30

Disassembly of section .fini:

0001f234 <.fini>:
   1f234:	push	{r3, lr}
   1f238:	pop	{r3, pc}
