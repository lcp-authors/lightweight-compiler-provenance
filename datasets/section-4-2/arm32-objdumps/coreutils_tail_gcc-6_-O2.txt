
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

0001107c <.init>:
   1107c:	push	{r3, lr}
   11080:	bl	13da0 <__assert_fail@plt+0x298c>
   11084:	pop	{r3, pc}

Disassembly of section .plt:

00011088 <fstatfs64@plt-0x14>:
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	ldr	lr, [pc, #4]	; 11098 <fstatfs64@plt-0x4>
   11090:	add	lr, pc, lr
   11094:	ldr	pc, [lr, #8]!
   11098:	andeq	ip, r1, r8, ror #30

0001109c <fstatfs64@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #28, 20	; 0x1c000
   110a4:	ldr	pc, [ip, #3944]!	; 0xf68

000110a8 <calloc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #28, 20	; 0x1c000
   110b0:	ldr	pc, [ip, #3936]!	; 0xf60

000110b4 <fputs_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #3928]!	; 0xf58

000110c0 <raise@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #3920]!	; 0xf50

000110cc <strcmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #3912]!	; 0xf48

000110d8 <strtol@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #3904]!	; 0xf40

000110e4 <pause@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #3896]!	; 0xf38

000110f0 <read@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #3888]!	; 0xf30

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #3880]!	; 0xf28

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #3872]!	; 0xf20

00011114 <nanosleep@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #3864]!	; 0xf18

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #3856]!	; 0xf10

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #3848]!	; 0xf08

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #3840]!	; 0xf00

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3832]!	; 0xef8

00011150 <fwrite_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3824]!	; 0xef0

0001115c <memcmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3816]!	; 0xee8

00011168 <fputc_unlocked@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3808]!	; 0xee0

00011174 <dcgettext@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3800]!	; 0xed8

00011180 <realloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3792]!	; 0xed0

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3784]!	; 0xec8

00011198 <rawmemchr@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3776]!	; 0xec0

000111a4 <fflush_unlocked@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111bc <poll@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3752]!	; 0xea8

000111c8 <__fxstat64@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3744]!	; 0xea0

000111d4 <__poll_chk@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3736]!	; 0xe98

000111e0 <fwrite@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ec <lseek64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3720]!	; 0xe88

000111f8 <__ctype_get_mb_cur_max@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3712]!	; 0xe80

00011204 <__fpending@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3704]!	; 0xe78

00011210 <mbrtowc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3696]!	; 0xe70

0001121c <error@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3688]!	; 0xe68

00011228 <open64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3680]!	; 0xe60

00011234 <getenv@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3672]!	; 0xe58

00011240 <malloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3664]!	; 0xe50

0001124c <__libc_start_main@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3656]!	; 0xe48

00011258 <__freading@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3648]!	; 0xe40

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3640]!	; 0xe38

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3632]!	; 0xe30

0001127c <kill@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3624]!	; 0xe28

00011288 <__ctype_b_loc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3616]!	; 0xe20

00011294 <exit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3608]!	; 0xe18

000112a0 <strlen@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3600]!	; 0xe10

000112ac <inotify_init@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3592]!	; 0xe08

000112b8 <strchr@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3584]!	; 0xe00

000112c4 <memrchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d0 <inotify_add_watch@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112dc <__errno_location@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3560]!	; 0xde8

000112e8 <__cxa_atexit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3552]!	; 0xde0

000112f4 <memset@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00011300 <__printf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3536]!	; 0xdd0

0001130c <strtod@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3528]!	; 0xdc8

00011318 <fileno@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3520]!	; 0xdc0

00011324 <__fprintf_chk@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011330 <memchr@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3504]!	; 0xdb0

0001133c <fclose@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3496]!	; 0xda8

00011348 <fseeko64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3488]!	; 0xda0

00011354 <strtod_l@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3480]!	; 0xd98

00011360 <fcntl64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3472]!	; 0xd90

0001136c <__overflow@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3464]!	; 0xd88

00011378 <setlocale@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3456]!	; 0xd80

00011384 <strrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3448]!	; 0xd78

00011390 <nl_langinfo@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3440]!	; 0xd70

0001139c <newlocale@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3432]!	; 0xd68

000113a8 <clearerr_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3424]!	; 0xd60

000113b4 <bindtextdomain@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3416]!	; 0xd58

000113c0 <__xstat64@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3408]!	; 0xd50

000113cc <isatty@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3400]!	; 0xd48

000113d8 <inotify_rm_watch@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3392]!	; 0xd40

000113e4 <strncmp@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3384]!	; 0xd38

000113f0 <abort@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3376]!	; 0xd30

000113fc <close@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3368]!	; 0xd28

00011408 <__lxstat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3360]!	; 0xd20

00011414 <__assert_fail@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3352]!	; 0xd18

Disassembly of section .text:

00011420 <.text>:
   11420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11424:	vpush	{d8-d11}
   11428:	mov	r2, #10
   1142c:	mov	r3, #0
   11430:	mov	r5, r0
   11434:	sub	sp, sp, #348	; 0x15c
   11438:	ldr	r0, [r1]
   1143c:	strd	r2, [sp, #120]	; 0x78
   11440:	mov	r6, r1
   11444:	bl	17468 <__assert_fail@plt+0x6054>
   11448:	ldr	r1, [pc, #1260]	; 1193c <__assert_fail@plt+0x528>
   1144c:	mov	r0, #6
   11450:	bl	11378 <setlocale@plt>
   11454:	ldr	r1, [pc, #1076]	; 11890 <__assert_fail@plt+0x47c>
   11458:	ldr	r0, [pc, #1076]	; 11894 <__assert_fail@plt+0x480>
   1145c:	bl	113b4 <bindtextdomain@plt>
   11460:	ldr	sl, [pc, #1072]	; 11898 <__assert_fail@plt+0x484>
   11464:	ldr	r0, [pc, #1064]	; 11894 <__assert_fail@plt+0x480>
   11468:	bl	1118c <textdomain@plt>
   1146c:	ldr	r0, [pc, #1064]	; 1189c <__assert_fail@plt+0x488>
   11470:	bl	1b460 <__assert_fail@plt+0xa04c>
   11474:	mov	r3, #0
   11478:	mov	r1, #1
   1147c:	mov	r2, #10
   11480:	cmp	r5, #2
   11484:	strb	r1, [sl, #5]
   11488:	strb	r2, [sl]
   1148c:	strb	r3, [sl, #4]
   11490:	strb	r3, [sl, #1]
   11494:	strb	r3, [sl, #6]
   11498:	strb	r3, [sl, #7]
   1149c:	beq	11784 <__assert_fail@plt+0x370>
   114a0:	cmp	r5, #3
   114a4:	beq	11754 <__assert_fail@plt+0x340>
   114a8:	cmp	r5, #4
   114ac:	beq	11770 <__assert_fail@plt+0x35c>
   114b0:	mov	r3, #0
   114b4:	ldr	r7, [pc, #996]	; 118a0 <__assert_fail@plt+0x48c>
   114b8:	vldr	d8, [pc, #960]	; 11880 <__assert_fail@plt+0x46c>
   114bc:	vldr	d9, [pc, #964]	; 11888 <__assert_fail@plt+0x474>
   114c0:	ldr	r8, [pc, #988]	; 118a4 <__assert_fail@plt+0x490>
   114c4:	ldr	r9, [pc, #988]	; 118a8 <__assert_fail@plt+0x494>
   114c8:	sub	r5, r5, r3
   114cc:	add	r6, r6, r3, lsl #2
   114d0:	sub	r3, r7, #20
   114d4:	str	r3, [sp, #32]
   114d8:	mov	r3, #0
   114dc:	str	r3, [sp, #28]
   114e0:	mov	r4, #0
   114e4:	str	r4, [sp]
   114e8:	mov	r3, r7
   114ec:	mov	r2, r8
   114f0:	mov	r1, r6
   114f4:	mov	r0, r5
   114f8:	bl	11270 <getopt_long@plt>
   114fc:	cmn	r0, #1
   11500:	beq	11a6c <__assert_fail@plt+0x658>
   11504:	cmp	r0, #113	; 0x71
   11508:	beq	11a3c <__assert_fail@plt+0x628>
   1150c:	ble	11548 <__assert_fail@plt+0x134>
   11510:	ldr	r3, [pc, #916]	; 118ac <__assert_fail@plt+0x498>
   11514:	cmp	r0, r3
   11518:	beq	119f0 <__assert_fail@plt+0x5dc>
   1151c:	bgt	11574 <__assert_fail@plt+0x160>
   11520:	cmp	r0, #118	; 0x76
   11524:	beq	119d8 <__assert_fail@plt+0x5c4>
   11528:	ble	116a8 <__assert_fail@plt+0x294>
   1152c:	cmp	r0, #122	; 0x7a
   11530:	beq	119d0 <__assert_fail@plt+0x5bc>
   11534:	cmp	r0, #256	; 0x100
   11538:	bne	119c8 <__assert_fail@plt+0x5b4>
   1153c:	mov	r3, #1
   11540:	strb	r3, [sl, #2]
   11544:	b	114e0 <__assert_fail@plt+0xcc>
   11548:	cmp	r0, #57	; 0x39
   1154c:	bgt	115a4 <__assert_fail@plt+0x190>
   11550:	cmp	r0, #48	; 0x30
   11554:	mov	fp, r0
   11558:	bge	119a4 <__assert_fail@plt+0x590>
   1155c:	cmn	r0, #3
   11560:	beq	115d0 <__assert_fail@plt+0x1bc>
   11564:	cmn	r0, #2
   11568:	bne	119c8 <__assert_fail@plt+0x5b4>
   1156c:	mov	r0, r4
   11570:	bl	15684 <__assert_fail@plt+0x4270>
   11574:	ldr	r3, [pc, #820]	; 118b0 <__assert_fail@plt+0x49c>
   11578:	cmp	r0, r3
   1157c:	beq	119e4 <__assert_fail@plt+0x5d0>
   11580:	blt	1170c <__assert_fail@plt+0x2f8>
   11584:	cmp	r0, #260	; 0x104
   11588:	beq	11954 <__assert_fail@plt+0x540>
   1158c:	add	r3, r3, #2
   11590:	cmp	r0, r3
   11594:	bne	119c8 <__assert_fail@plt+0x5b4>
   11598:	mov	r3, #1
   1159c:	strb	r3, [sl, #3]
   115a0:	b	114e0 <__assert_fail@plt+0xcc>
   115a4:	cmp	r0, #99	; 0x63
   115a8:	beq	11620 <__assert_fail@plt+0x20c>
   115ac:	bgt	11610 <__assert_fail@plt+0x1fc>
   115b0:	cmp	r0, #70	; 0x46
   115b4:	bne	119c8 <__assert_fail@plt+0x5b4>
   115b8:	ldr	r2, [pc, #876]	; 1192c <__assert_fail@plt+0x518>
   115bc:	mov	r3, #1
   115c0:	strb	r3, [sl, #7]
   115c4:	str	r3, [r2, #4]
   115c8:	strb	r3, [sl, #2]
   115cc:	b	114e0 <__assert_fail@plt+0xcc>
   115d0:	ldr	lr, [pc, #732]	; 118b4 <__assert_fail@plt+0x4a0>
   115d4:	ldr	ip, [pc, #732]	; 118b8 <__assert_fail@plt+0x4a4>
   115d8:	ldr	r1, [pc, #732]	; 118bc <__assert_fail@plt+0x4a8>
   115dc:	ldr	r3, [pc, #732]	; 118c0 <__assert_fail@plt+0x4ac>
   115e0:	ldr	r0, [pc, #732]	; 118c4 <__assert_fail@plt+0x4b0>
   115e4:	ldr	r2, [pc, #732]	; 118c8 <__assert_fail@plt+0x4b4>
   115e8:	str	r4, [sp, #16]
   115ec:	ldr	r0, [r0]
   115f0:	ldr	r3, [r3]
   115f4:	stmib	sp, {r1, ip, lr}
   115f8:	str	r2, [sp]
   115fc:	ldr	r1, [pc, #712]	; 118cc <__assert_fail@plt+0x4b8>
   11600:	ldr	r2, [pc, #712]	; 118d0 <__assert_fail@plt+0x4bc>
   11604:	bl	19808 <__assert_fail@plt+0x83f4>
   11608:	mov	r0, r4
   1160c:	bl	11294 <exit@plt>
   11610:	cmp	r0, #102	; 0x66
   11614:	beq	11954 <__assert_fail@plt+0x540>
   11618:	cmp	r0, #110	; 0x6e
   1161c:	bne	119c8 <__assert_fail@plt+0x5b4>
   11620:	ldr	r2, [r9]
   11624:	sub	r3, r0, #110	; 0x6e
   11628:	clz	r3, r3
   1162c:	lsr	r3, r3, #5
   11630:	strb	r3, [sl, #5]
   11634:	ldrb	r3, [r2]
   11638:	cmp	r3, #43	; 0x2b
   1163c:	moveq	r3, #1
   11640:	strbeq	r3, [sl, #6]
   11644:	beq	11654 <__assert_fail@plt+0x240>
   11648:	cmp	r3, #45	; 0x2d
   1164c:	addeq	r2, r2, #1
   11650:	streq	r2, [r9]
   11654:	cmp	r0, #110	; 0x6e
   11658:	mov	r2, #5
   1165c:	ldreq	r1, [pc, #624]	; 118d4 <__assert_fail@plt+0x4c0>
   11660:	ldrne	r1, [pc, #624]	; 118d8 <__assert_fail@plt+0x4c4>
   11664:	mov	r0, #0
   11668:	ldr	r4, [r9]
   1166c:	bl	11174 <dcgettext@plt>
   11670:	ldr	r3, [pc, #612]	; 118dc <__assert_fail@plt+0x4c8>
   11674:	mvn	r2, #0
   11678:	str	r3, [sp, #8]
   1167c:	mvn	r3, #0
   11680:	mov	r1, #0
   11684:	strd	r2, [sp]
   11688:	str	r1, [sp, #16]
   1168c:	mov	r2, #0
   11690:	mov	r3, #0
   11694:	str	r0, [sp, #12]
   11698:	mov	r0, r4
   1169c:	bl	19fc8 <__assert_fail@plt+0x8bb4>
   116a0:	strd	r0, [sp, #120]	; 0x78
   116a4:	b	114e0 <__assert_fail@plt+0xcc>
   116a8:	cmp	r0, #115	; 0x73
   116ac:	bne	119c8 <__assert_fail@plt+0x5b4>
   116b0:	mov	r1, r4
   116b4:	ldr	r3, [pc, #548]	; 118e0 <__assert_fail@plt+0x4cc>
   116b8:	add	r2, sp, #240	; 0xf0
   116bc:	ldr	r0, [r9]
   116c0:	bl	1a078 <__assert_fail@plt+0x8c64>
   116c4:	cmp	r0, #0
   116c8:	beq	116dc <__assert_fail@plt+0x2c8>
   116cc:	vldr	d8, [sp, #240]	; 0xf0
   116d0:	vcmpe.f64	d8, d9
   116d4:	vmrs	APSR_nzcv, fpscr
   116d8:	bge	114e0 <__assert_fail@plt+0xcc>
   116dc:	mov	r2, #5
   116e0:	ldr	r1, [pc, #508]	; 118e4 <__assert_fail@plt+0x4d0>
   116e4:	mov	r0, #0
   116e8:	bl	11174 <dcgettext@plt>
   116ec:	mov	r4, r0
   116f0:	ldr	r0, [r9]
   116f4:	bl	19328 <__assert_fail@plt+0x7f14>
   116f8:	mov	r2, r4
   116fc:	mov	r1, #0
   11700:	mov	r3, r0
   11704:	mov	r0, #1
   11708:	bl	1121c <error@plt>
   1170c:	mov	r2, #5
   11710:	ldr	r1, [pc, #464]	; 118e8 <__assert_fail@plt+0x4d4>
   11714:	mov	r0, r4
   11718:	ldr	fp, [r9]
   1171c:	bl	11174 <dcgettext@plt>
   11720:	ldr	r1, [pc, #532]	; 1193c <__assert_fail@plt+0x528>
   11724:	mvn	r2, #-2147483648	; 0x80000000
   11728:	mov	r3, #0
   1172c:	str	r4, [sp, #16]
   11730:	strd	r2, [sp]
   11734:	str	r1, [sp, #8]
   11738:	mov	r2, #0
   1173c:	mov	r3, #0
   11740:	str	r0, [sp, #12]
   11744:	mov	r0, fp
   11748:	bl	19fc8 <__assert_fail@plt+0x8bb4>
   1174c:	str	r0, [sl, #8]
   11750:	b	114e0 <__assert_fail@plt+0xcc>
   11754:	ldr	r3, [r6, #8]
   11758:	ldrb	r2, [r3]
   1175c:	cmp	r2, #45	; 0x2d
   11760:	bne	11784 <__assert_fail@plt+0x370>
   11764:	ldrb	r3, [r3, #1]
   11768:	cmp	r3, #0
   1176c:	beq	11784 <__assert_fail@plt+0x370>
   11770:	ldr	r1, [pc, #372]	; 118ec <__assert_fail@plt+0x4d8>
   11774:	ldr	r0, [r6, #8]
   11778:	bl	110cc <strcmp@plt>
   1177c:	cmp	r0, #0
   11780:	bne	114b0 <__assert_fail@plt+0x9c>
   11784:	bl	17408 <__assert_fail@plt+0x5ff4>
   11788:	ldr	r3, [r6, #4]
   1178c:	add	ip, r3, #1
   11790:	ldrb	r1, [r3]
   11794:	cmp	r1, #43	; 0x2b
   11798:	sub	r2, r0, #199680	; 0x30c00
   1179c:	sub	r2, r2, #432	; 0x1b0
   117a0:	beq	11a58 <__assert_fail@plt+0x644>
   117a4:	cmp	r1, #45	; 0x2d
   117a8:	bne	114b0 <__assert_fail@plt+0x9c>
   117ac:	ldr	r2, [pc, #316]	; 118f0 <__assert_fail@plt+0x4dc>
   117b0:	ldrb	r3, [r3, #1]
   117b4:	cmp	r0, r2
   117b8:	ble	117d4 <__assert_fail@plt+0x3c0>
   117bc:	sub	r2, r3, #99	; 0x63
   117c0:	clz	r2, r2
   117c4:	lsr	r2, r2, #5
   117c8:	ldrb	r2, [ip, r2]
   117cc:	cmp	r2, #0
   117d0:	beq	114b0 <__assert_fail@plt+0x9c>
   117d4:	mov	r4, #0
   117d8:	sub	r2, r3, #48	; 0x30
   117dc:	cmp	r2, #9
   117e0:	mov	r2, ip
   117e4:	bhi	117f8 <__assert_fail@plt+0x3e4>
   117e8:	ldrb	r3, [r2, #1]!
   117ec:	sub	r1, r3, #48	; 0x30
   117f0:	cmp	r1, #9
   117f4:	bls	117e8 <__assert_fail@plt+0x3d4>
   117f8:	cmp	r3, #99	; 0x63
   117fc:	beq	11eb0 <__assert_fail@plt+0xa9c>
   11800:	cmp	r3, #108	; 0x6c
   11804:	beq	11ea4 <__assert_fail@plt+0xa90>
   11808:	cmp	r3, #98	; 0x62
   1180c:	movne	r3, r2
   11810:	movne	r9, #1
   11814:	movne	r0, #10
   11818:	beq	11e94 <__assert_fail@plt+0xa80>
   1181c:	ldrb	r1, [r3]
   11820:	cmp	r1, #102	; 0x66
   11824:	addeq	r3, r3, #1
   11828:	moveq	r8, #1
   1182c:	ldrb	r7, [r3]
   11830:	movne	r8, #0
   11834:	cmp	r7, #0
   11838:	bne	114b0 <__assert_fail@plt+0x9c>
   1183c:	cmp	ip, r2
   11840:	beq	1270c <__assert_fail@plt+0x12f8>
   11844:	ldr	r3, [pc, #168]	; 118f4 <__assert_fail@plt+0x4e0>
   11848:	mov	r0, ip
   1184c:	str	r3, [sp]
   11850:	mov	r2, #10
   11854:	add	r3, sp, #120	; 0x78
   11858:	mov	r1, r7
   1185c:	bl	1a1b8 <__assert_fail@plt+0x8da4>
   11860:	bics	r3, r0, #2
   11864:	bne	13ca8 <__assert_fail@plt+0x2894>
   11868:	strb	r4, [sl, #6]
   1186c:	strb	r9, [sl, #5]
   11870:	strb	r8, [sl, #7]
   11874:	mov	r3, #1
   11878:	b	114b4 <__assert_fail@plt+0xa0>
   1187c:	nop			; (mov r0, r0)
   11880:	andeq	r0, r0, r0
   11884:	svccc	0x00f00000	; IMB
	...
   11890:	ldrdeq	ip, [r1], -r8
   11894:	andeq	ip, r1, ip, lsr #6
   11898:	ldrdeq	lr, [r2], -r0
   1189c:	andeq	r5, r1, r4, ror #30
   118a0:	ldrdeq	fp, [r1], -r8
   118a4:	andeq	ip, r1, r8, lsr #10
   118a8:	andeq	lr, r2, r8, asr #3
   118ac:	andeq	r0, r0, r1, lsl #2
   118b0:	andeq	r0, r0, r3, lsl #2
   118b4:	andeq	ip, r1, r0, asr #9
   118b8:	ldrdeq	ip, [r1], -r0
   118bc:	andeq	ip, r1, r4, ror #9
   118c0:	andeq	lr, r2, r0, ror #2
   118c4:	andeq	lr, r2, r4, asr #3
   118c8:	strdeq	ip, [r1], -r4
   118cc:	andeq	fp, r1, r4, lsl #17
   118d0:	andeq	ip, r1, r8, lsr #6
   118d4:	andeq	ip, r1, r0, lsl r4
   118d8:	andeq	ip, r1, r8, lsr #8
   118dc:	andeq	ip, r1, r0, asr #8
   118e0:	andeq	r5, r1, r8, asr #29
   118e4:	andeq	ip, r1, r0, lsr #9
   118e8:	muleq	r1, r4, r4
   118ec:	strdeq	ip, [r1], -r0
   118f0:	andeq	r0, r3, pc, lsr #27
   118f4:	strdeq	ip, [r1], -r4
   118f8:	andeq	lr, r2, r4, ror #2
   118fc:	andeq	ip, r1, r0, asr r4
   11900:	andeq	fp, r1, ip, asr #9
   11904:	andeq	fp, r1, r4, lsl #9
   11908:	andeq	ip, r1, r0, lsl #10
   1190c:	andeq	ip, r1, ip, asr r4
   11910:	strdeq	ip, [r1], -r8
   11914:			; <UNDEFINED> instruction: 0x0002e1b8
   11918:	andeq	lr, r2, r0, asr r1
   1191c:	andeq	ip, r1, r0, lsl #11
   11920:			; <UNDEFINED> instruction: 0x0001c5b8
   11924:	andeq	ip, r1, r8, lsl #13
   11928:	andeq	r2, r0, ip
   1192c:	andeq	lr, r2, r8, asr #2
   11930:	andeq	fp, r1, r4, asr #12
   11934:	andeq	fp, r1, r8, lsr r6
   11938:			; <UNDEFINED> instruction: 0x0001c6b4
   1193c:	andeq	ip, r1, ip, lsr #2
   11940:	andeq	fp, r1, r4, lsr #12
   11944:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11948:	andeq	r2, r0, r8
   1194c:	andeq	ip, r1, r4, lsr #13
   11950:	ldrdeq	fp, [r1], -r8
   11954:	ldr	r1, [r9]
   11958:	mov	r3, #1
   1195c:	cmp	r1, #0
   11960:	strb	r3, [sl, #7]
   11964:	beq	11a48 <__assert_fail@plt+0x634>
   11968:	ldr	r0, [pc, #-120]	; 118f8 <__assert_fail@plt+0x4e4>
   1196c:	str	r3, [sp, #8]
   11970:	mov	r2, #4
   11974:	ldr	r3, [r0]
   11978:	ldr	r0, [pc, #-132]	; 118fc <__assert_fail@plt+0x4e8>
   1197c:	stm	sp, {r2, r3}
   11980:	ldr	r3, [sp, #32]
   11984:	ldr	r2, [pc, #-140]	; 11900 <__assert_fail@plt+0x4ec>
   11988:	bl	15d44 <__assert_fail@plt+0x4930>
   1198c:	ldr	r2, [pc, #-144]	; 11904 <__assert_fail@plt+0x4f0>
   11990:	ldr	r3, [pc, #-108]	; 1192c <__assert_fail@plt+0x518>
   11994:	add	r0, r2, r0, lsl #2
   11998:	ldr	r2, [r0, #64]	; 0x40
   1199c:	str	r2, [r3, #4]
   119a0:	b	114e0 <__assert_fail@plt+0xcc>
   119a4:	mov	r2, #5
   119a8:	ldr	r1, [pc, #-168]	; 11908 <__assert_fail@plt+0x4f4>
   119ac:	mov	r0, r4
   119b0:	bl	11174 <dcgettext@plt>
   119b4:	mov	r3, fp
   119b8:	mov	r1, r4
   119bc:	mov	r2, r0
   119c0:	mov	r0, #1
   119c4:	bl	1121c <error@plt>
   119c8:	mov	r0, #1
   119cc:	bl	15684 <__assert_fail@plt+0x4270>
   119d0:	strb	r4, [sl]
   119d4:	b	114e0 <__assert_fail@plt+0xcc>
   119d8:	mov	r3, #1
   119dc:	str	r3, [sp, #28]
   119e0:	b	114e0 <__assert_fail@plt+0xcc>
   119e4:	mov	r3, #1
   119e8:	strb	r3, [sl, #12]
   119ec:	b	114e0 <__assert_fail@plt+0xcc>
   119f0:	mov	r2, #5
   119f4:	ldr	r1, [pc, #-240]	; 1190c <__assert_fail@plt+0x4f8>
   119f8:	mov	r0, r4
   119fc:	ldr	fp, [r9]
   11a00:	bl	11174 <dcgettext@plt>
   11a04:	ldr	r1, [pc, #-208]	; 1193c <__assert_fail@plt+0x528>
   11a08:	mvn	r2, #0
   11a0c:	mvn	r3, #0
   11a10:	str	r4, [sp, #16]
   11a14:	strd	r2, [sp]
   11a18:	str	r1, [sp, #8]
   11a1c:	mov	r3, #0
   11a20:	mov	r2, #0
   11a24:	str	r0, [sp, #12]
   11a28:	mov	r0, fp
   11a2c:	bl	19fc8 <__assert_fail@plt+0x8bb4>
   11a30:	ldr	r3, [pc, #-268]	; 1192c <__assert_fail@plt+0x518>
   11a34:	strd	r0, [r3, #16]
   11a38:	b	114e0 <__assert_fail@plt+0xcc>
   11a3c:	mov	r3, #2
   11a40:	str	r3, [sp, #28]
   11a44:	b	114e0 <__assert_fail@plt+0xcc>
   11a48:	ldr	r3, [pc, #-292]	; 1192c <__assert_fail@plt+0x518>
   11a4c:	mov	r2, #2
   11a50:	str	r2, [r3, #4]
   11a54:	b	114e0 <__assert_fail@plt+0xcc>
   11a58:	cmp	r2, #696	; 0x2b8
   11a5c:	movhi	r4, #1
   11a60:	ldrbhi	r3, [r3, #1]
   11a64:	bhi	117d8 <__assert_fail@plt+0x3c4>
   11a68:	b	114b0 <__assert_fail@plt+0x9c>
   11a6c:	ldrb	r3, [sl, #2]
   11a70:	mov	fp, r0
   11a74:	cmp	r3, r4
   11a78:	beq	11e58 <__assert_fail@plt+0xa44>
   11a7c:	ldrb	r7, [sl, #7]
   11a80:	cmp	r7, r4
   11a84:	beq	12d14 <__assert_fail@plt+0x1900>
   11a88:	ldr	r3, [pc, #-356]	; 1192c <__assert_fail@plt+0x518>
   11a8c:	ldr	r3, [r3, #4]
   11a90:	cmp	r3, #2
   11a94:	beq	11e38 <__assert_fail@plt+0xa24>
   11a98:	ldr	r0, [sl, #8]
   11a9c:	cmp	r0, #0
   11aa0:	beq	11aec <__assert_fail@plt+0x6d8>
   11aa4:	mov	r1, #0
   11aa8:	bl	1127c <kill@plt>
   11aac:	cmp	r0, #0
   11ab0:	beq	11aec <__assert_fail@plt+0x6d8>
   11ab4:	bl	112dc <__errno_location@plt>
   11ab8:	ldr	r3, [r0]
   11abc:	cmp	r3, #38	; 0x26
   11ac0:	bne	11aec <__assert_fail@plt+0x6d8>
   11ac4:	mov	r2, #5
   11ac8:	ldr	r1, [pc, #-448]	; 11910 <__assert_fail@plt+0x4fc>
   11acc:	mov	r0, #0
   11ad0:	bl	11174 <dcgettext@plt>
   11ad4:	mov	r1, #0
   11ad8:	mov	r2, r0
   11adc:	mov	r0, r1
   11ae0:	bl	1121c <error@plt>
   11ae4:	mov	r3, #0
   11ae8:	str	r3, [sl, #8]
   11aec:	ldrb	r3, [sl, #6]
   11af0:	cmp	r3, #0
   11af4:	beq	11b10 <__assert_fail@plt+0x6fc>
   11af8:	ldrd	r2, [sp, #120]	; 0x78
   11afc:	orrs	r1, r2, r3
   11b00:	beq	11b10 <__assert_fail@plt+0x6fc>
   11b04:	subs	r2, r2, #1
   11b08:	sbc	r3, r3, #0
   11b0c:	strd	r2, [sp, #120]	; 0x78
   11b10:	ldr	r3, [pc, #-516]	; 11914 <__assert_fail@plt+0x500>
   11b14:	ldr	r3, [r3]
   11b18:	cmp	r5, r3
   11b1c:	bgt	11ebc <__assert_fail@plt+0xaa8>
   11b20:	ldr	r6, [pc, #-528]	; 11918 <__assert_fail@plt+0x504>
   11b24:	mov	r3, #1
   11b28:	str	r3, [sp, #76]	; 0x4c
   11b2c:	mov	r5, #0
   11b30:	ldr	r7, [pc, #-488]	; 11950 <__assert_fail@plt+0x53c>
   11b34:	ldr	r9, [sp, #76]	; 0x4c
   11b38:	mov	r4, r5
   11b3c:	sub	r8, r6, #4
   11b40:	mov	r1, r7
   11b44:	ldr	r0, [r8, #4]!
   11b48:	bl	110cc <strcmp@plt>
   11b4c:	add	r4, r4, #1
   11b50:	cmp	r0, #0
   11b54:	moveq	r5, #1
   11b58:	cmp	r4, r9
   11b5c:	bcc	11b40 <__assert_fail@plt+0x72c>
   11b60:	cmp	r5, #0
   11b64:	beq	11bb0 <__assert_fail@plt+0x79c>
   11b68:	ldr	r3, [pc, #-580]	; 1192c <__assert_fail@plt+0x518>
   11b6c:	ldr	r4, [r3, #4]
   11b70:	cmp	r4, #1
   11b74:	beq	13c4c <__assert_fail@plt+0x2838>
   11b78:	ldrb	r3, [sl, #7]
   11b7c:	cmp	r3, #0
   11b80:	beq	11bb0 <__assert_fail@plt+0x79c>
   11b84:	ldr	r1, [sl, #8]
   11b88:	cmp	r1, #0
   11b8c:	bne	11ba0 <__assert_fail@plt+0x78c>
   11b90:	ldr	r3, [sp, #76]	; 0x4c
   11b94:	cmp	r4, #2
   11b98:	cmpeq	r3, #1
   11b9c:	beq	13c80 <__assert_fail@plt+0x286c>
   11ba0:	mov	r0, #0
   11ba4:	bl	113cc <isatty@plt>
   11ba8:	cmp	r0, #0
   11bac:	bne	13274 <__assert_fail@plt+0x1e60>
   11bb0:	ldrd	r2, [sp, #120]	; 0x78
   11bb4:	orrs	r3, r2, r3
   11bb8:	bne	1282c <__assert_fail@plt+0x1418>
   11bbc:	ldrb	r3, [sl, #7]
   11bc0:	cmp	r3, #0
   11bc4:	bne	11bd4 <__assert_fail@plt+0x7c0>
   11bc8:	ldrb	r0, [sl, #6]
   11bcc:	cmp	r0, #0
   11bd0:	beq	11ecc <__assert_fail@plt+0xab8>
   11bd4:	ldr	r4, [sp, #76]	; 0x4c
   11bd8:	mov	r1, #80	; 0x50
   11bdc:	mov	r0, r4
   11be0:	bl	199ec <__assert_fail@plt+0x85d8>
   11be4:	cmp	r4, #0
   11be8:	str	r0, [sp, #84]	; 0x54
   11bec:	beq	12e18 <__assert_fail@plt+0x1a04>
   11bf0:	ldr	ip, [sp, #76]	; 0x4c
   11bf4:	ldr	lr, [sp, #84]	; 0x54
   11bf8:	mov	r3, #0
   11bfc:	mov	r0, #80	; 0x50
   11c00:	mul	r2, r0, r3
   11c04:	ldr	r1, [r6, r3, lsl #2]
   11c08:	add	r3, r3, #1
   11c0c:	cmp	r3, ip
   11c10:	str	r1, [lr, r2]
   11c14:	bne	11c00 <__assert_fail@plt+0x7ec>
   11c18:	ldr	r3, [sp, #28]
   11c1c:	cmp	r3, #1
   11c20:	beq	11c48 <__assert_fail@plt+0x834>
   11c24:	ldr	r3, [sp, #76]	; 0x4c
   11c28:	ldr	r2, [sp, #28]
   11c2c:	cmp	r3, #1
   11c30:	movls	r3, #0
   11c34:	movhi	r3, #1
   11c38:	cmp	r2, #0
   11c3c:	movne	r3, #0
   11c40:	cmp	r3, #0
   11c44:	beq	11c5c <__assert_fail@plt+0x848>
   11c48:	ldr	r3, [sp, #76]	; 0x4c
   11c4c:	cmp	r3, #0
   11c50:	mov	r3, #1
   11c54:	strb	r3, [sl, #1]
   11c58:	beq	12e28 <__assert_fail@plt+0x1a14>
   11c5c:	ldr	r3, [sp, #84]	; 0x54
   11c60:	str	fp, [sp, #92]	; 0x5c
   11c64:	str	r3, [sp, #28]
   11c68:	mov	r3, #0
   11c6c:	str	r3, [sp, #64]	; 0x40
   11c70:	mov	r3, #1
   11c74:	str	r3, [sp, #72]	; 0x48
   11c78:	b	11de4 <__assert_fail@plt+0x9d0>
   11c7c:	ldr	r2, [sp, #28]
   11c80:	strb	r3, [r2, #46]	; 0x2e
   11c84:	ldr	r3, [sp, #60]	; 0x3c
   11c88:	str	r3, [sp, #48]	; 0x30
   11c8c:	ldrb	r3, [sl, #1]
   11c90:	cmp	r3, #0
   11c94:	bne	1212c <__assert_fail@plt+0xd18>
   11c98:	ldr	r3, [sp, #28]
   11c9c:	ldr	r0, [r3]
   11ca0:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   11ca4:	ldrb	r3, [sl, #5]
   11ca8:	mov	r1, #0
   11cac:	add	r2, sp, #240	; 0xf0
   11cb0:	cmp	r3, #0
   11cb4:	str	r3, [sp, #56]	; 0x38
   11cb8:	str	r0, [sp, #80]	; 0x50
   11cbc:	mov	r0, #0
   11cc0:	strd	r0, [sp, #136]	; 0x88
   11cc4:	ldr	r1, [sp, #48]	; 0x30
   11cc8:	mov	r0, #3
   11ccc:	bne	11f9c <__assert_fail@plt+0xb88>
   11cd0:	bl	111c8 <__fxstat64@plt>
   11cd4:	cmp	r0, #0
   11cd8:	bne	126bc <__assert_fail@plt+0x12a8>
   11cdc:	ldrb	r3, [sl, #6]
   11ce0:	cmp	r3, #0
   11ce4:	str	r3, [sp, #56]	; 0x38
   11ce8:	ldrb	r3, [sl, #12]
   11cec:	beq	12270 <__assert_fail@plt+0xe5c>
   11cf0:	cmp	r3, #0
   11cf4:	bne	12648 <__assert_fail@plt+0x1234>
   11cf8:	ldrd	r2, [sp, #40]	; 0x28
   11cfc:	cmp	r2, #0
   11d00:	sbcs	r3, r3, #0
   11d04:	blt	12648 <__assert_fail@plt+0x1234>
   11d08:	ldr	r3, [sp, #256]	; 0x100
   11d0c:	and	r3, r3, #61440	; 0xf000
   11d10:	cmp	r3, #32768	; 0x8000
   11d14:	beq	12bf4 <__assert_fail@plt+0x17e0>
   11d18:	mov	r3, #1
   11d1c:	str	r3, [sp]
   11d20:	ldr	r0, [sp, #48]	; 0x30
   11d24:	ldrd	r2, [sp, #40]	; 0x28
   11d28:	bl	111ec <lseek64@plt>
   11d2c:	mvn	r3, #0
   11d30:	mvn	r2, #0
   11d34:	cmp	r1, r3
   11d38:	cmpeq	r0, r2
   11d3c:	beq	12648 <__assert_fail@plt+0x1234>
   11d40:	ldrd	r2, [sp, #136]	; 0x88
   11d44:	ldrd	r0, [sp, #40]	; 0x28
   11d48:	adds	r0, r0, r2
   11d4c:	adc	r1, r1, r3
   11d50:	mov	r2, r0
   11d54:	mov	r3, r1
   11d58:	mvn	r0, #0
   11d5c:	mvn	r1, #0
   11d60:	strd	r2, [sp, #136]	; 0x88
   11d64:	strd	r0, [sp, #40]	; 0x28
   11d68:	ldrd	r2, [sp, #40]	; 0x28
   11d6c:	ldr	r1, [sp, #80]	; 0x50
   11d70:	mov	r0, #0
   11d74:	strd	r2, [sp]
   11d78:	ldr	r2, [sp, #48]	; 0x30
   11d7c:	bl	14108 <__assert_fail@plt+0x2cf4>
   11d80:	ldrd	r2, [sp, #136]	; 0x88
   11d84:	mov	ip, #1
   11d88:	str	ip, [sp, #56]	; 0x38
   11d8c:	adds	r2, r2, r0
   11d90:	adc	r3, r3, r1
   11d94:	strd	r2, [sp, #136]	; 0x88
   11d98:	ldrb	r4, [sl, #7]
   11d9c:	cmp	r4, #0
   11da0:	bne	12170 <__assert_fail@plt+0xd5c>
   11da4:	ldr	r3, [sp, #60]	; 0x3c
   11da8:	cmp	r3, #0
   11dac:	bne	124d8 <__assert_fail@plt+0x10c4>
   11db0:	ldr	r3, [sp, #64]	; 0x40
   11db4:	ldr	r2, [sp, #76]	; 0x4c
   11db8:	add	r3, r3, #1
   11dbc:	cmp	r3, r2
   11dc0:	str	r3, [sp, #64]	; 0x40
   11dc4:	ldr	r2, [sp, #72]	; 0x48
   11dc8:	ldr	r3, [sp, #56]	; 0x38
   11dcc:	and	r3, r3, r2
   11dd0:	str	r3, [sp, #72]	; 0x48
   11dd4:	ldr	r3, [sp, #28]
   11dd8:	add	r3, r3, #80	; 0x50
   11ddc:	str	r3, [sp, #28]
   11de0:	beq	12680 <__assert_fail@plt+0x126c>
   11de4:	ldr	r3, [sp, #28]
   11de8:	ldr	r1, [pc, #-1184]	; 11950 <__assert_fail@plt+0x53c>
   11dec:	ldr	r4, [r3]
   11df0:	mov	r0, r4
   11df4:	bl	110cc <strcmp@plt>
   11df8:	ldrd	r2, [sp, #120]	; 0x78
   11dfc:	strd	r2, [sp, #40]	; 0x28
   11e00:	subs	r3, r0, #0
   11e04:	str	r3, [sp, #60]	; 0x3c
   11e08:	bne	11ed8 <__assert_fail@plt+0xac4>
   11e0c:	ldrb	r2, [sl, #2]
   11e10:	mov	r3, #1
   11e14:	strb	r3, [sl, #4]
   11e18:	cmp	r2, #0
   11e1c:	beq	11c7c <__assert_fail@plt+0x868>
   11e20:	ldr	r3, [sp, #60]	; 0x3c
   11e24:	str	r3, [sp, #48]	; 0x30
   11e28:	ldr	r2, [sp, #28]
   11e2c:	mov	r3, #1
   11e30:	strb	r3, [r2, #46]	; 0x2e
   11e34:	b	11c8c <__assert_fail@plt+0x878>
   11e38:	mov	r2, #5
   11e3c:	ldr	r1, [pc, #-1320]	; 1191c <__assert_fail@plt+0x508>
   11e40:	mov	r0, r4
   11e44:	bl	11174 <dcgettext@plt>
   11e48:	mov	r1, r4
   11e4c:	mov	r2, r0
   11e50:	mov	r0, r4
   11e54:	bl	1121c <error@plt>
   11e58:	ldr	r0, [sl, #8]
   11e5c:	cmp	r0, #0
   11e60:	beq	11aec <__assert_fail@plt+0x6d8>
   11e64:	ldrb	r4, [sl, #7]
   11e68:	cmp	r4, #0
   11e6c:	bne	11aa4 <__assert_fail@plt+0x690>
   11e70:	mov	r2, #5
   11e74:	ldr	r1, [pc, #-1372]	; 11920 <__assert_fail@plt+0x50c>
   11e78:	mov	r0, r4
   11e7c:	bl	11174 <dcgettext@plt>
   11e80:	mov	r1, r4
   11e84:	mov	r2, r0
   11e88:	mov	r0, r4
   11e8c:	bl	1121c <error@plt>
   11e90:	b	11aec <__assert_fail@plt+0x6d8>
   11e94:	mov	r9, #0
   11e98:	mov	r0, #5120	; 0x1400
   11e9c:	add	r3, r2, #1
   11ea0:	b	1181c <__assert_fail@plt+0x408>
   11ea4:	mov	r9, #1
   11ea8:	mov	r0, #10
   11eac:	b	11e9c <__assert_fail@plt+0xa88>
   11eb0:	mov	r9, #0
   11eb4:	mov	r0, #10
   11eb8:	b	11e9c <__assert_fail@plt+0xa88>
   11ebc:	sub	r2, r5, r3
   11ec0:	str	r2, [sp, #76]	; 0x4c
   11ec4:	add	r6, r6, r3, lsl #2
   11ec8:	b	11b2c <__assert_fail@plt+0x718>
   11ecc:	add	sp, sp, #348	; 0x15c
   11ed0:	vpop	{d8-d11}
   11ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ed8:	mov	r0, r4
   11edc:	mov	r1, #0
   11ee0:	bl	162ec <__assert_fail@plt+0x4ed8>
   11ee4:	ldrb	r3, [sl, #2]
   11ee8:	cmp	r3, #0
   11eec:	str	r0, [sp, #48]	; 0x30
   11ef0:	beq	12538 <__assert_fail@plt+0x1124>
   11ef4:	cmn	r0, #1
   11ef8:	bne	11e28 <__assert_fail@plt+0xa14>
   11efc:	mov	r3, #0
   11f00:	ldr	r2, [sp, #28]
   11f04:	mov	r4, r3
   11f08:	strb	r3, [r2, #46]	; 0x2e
   11f0c:	ldrb	r3, [sl, #7]
   11f10:	cmp	r3, #0
   11f14:	beq	11f48 <__assert_fail@plt+0xb34>
   11f18:	ldr	r5, [sp, #28]
   11f1c:	mvn	r3, #0
   11f20:	str	r3, [r5, #48]	; 0x30
   11f24:	bl	112dc <__errno_location@plt>
   11f28:	strb	r4, [r5, #44]	; 0x2c
   11f2c:	mov	r2, r5
   11f30:	mov	r4, #0
   11f34:	mov	r5, #0
   11f38:	strd	r4, [r2, #32]
   11f3c:	strd	r4, [r2, #24]
   11f40:	ldr	r3, [r0]
   11f44:	str	r3, [r2, #52]	; 0x34
   11f48:	bl	112dc <__errno_location@plt>
   11f4c:	mov	r3, #0
   11f50:	mov	r2, #5
   11f54:	ldr	r1, [pc, #-1592]	; 11924 <__assert_fail@plt+0x510>
   11f58:	str	r3, [sp, #56]	; 0x38
   11f5c:	ldr	r4, [r0]
   11f60:	mov	r0, r3
   11f64:	bl	11174 <dcgettext@plt>
   11f68:	ldr	r3, [sp, #28]
   11f6c:	mov	r5, r0
   11f70:	ldr	r0, [r3]
   11f74:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   11f78:	mov	r1, r0
   11f7c:	mov	r0, #4
   11f80:	bl	190e8 <__assert_fail@plt+0x7cd4>
   11f84:	mov	r2, r5
   11f88:	mov	r1, r4
   11f8c:	mov	r3, r0
   11f90:	mov	r0, #0
   11f94:	bl	1121c <error@plt>
   11f98:	b	11db0 <__assert_fail@plt+0x99c>
   11f9c:	bl	111c8 <__fxstat64@plt>
   11fa0:	cmp	r0, #0
   11fa4:	bne	12744 <__assert_fail@plt+0x1330>
   11fa8:	ldrb	r3, [sl, #6]
   11fac:	cmp	r3, #0
   11fb0:	str	r3, [sp, #88]	; 0x58
   11fb4:	bne	12718 <__assert_fail@plt+0x1304>
   11fb8:	ldrb	r3, [sl, #12]
   11fbc:	cmp	r3, #0
   11fc0:	bne	11fd4 <__assert_fail@plt+0xbc0>
   11fc4:	ldr	r3, [sp, #256]	; 0x100
   11fc8:	and	r3, r3, #61440	; 0xf000
   11fcc:	cmp	r3, #32768	; 0x8000
   11fd0:	beq	12d50 <__assert_fail@plt+0x193c>
   11fd4:	ldr	r0, [pc, #-1716]	; 11928 <__assert_fail@plt+0x514>
   11fd8:	bl	19904 <__assert_fail@plt+0x84f0>
   11fdc:	mov	fp, #0
   11fe0:	str	fp, [sp, #32]
   11fe4:	add	r3, r0, #8192	; 0x2000
   11fe8:	str	r0, [sp, #52]	; 0x34
   11fec:	mov	r7, r0
   11ff0:	str	fp, [r3, #4]
   11ff4:	str	fp, [r3]
   11ff8:	str	fp, [r3, #8]
   11ffc:	ldr	r0, [pc, #-1756]	; 11928 <__assert_fail@plt+0x514>
   12000:	bl	19904 <__assert_fail@plt+0x84f0>
   12004:	mov	r8, r0
   12008:	mov	r2, #8192	; 0x2000
   1200c:	mov	r1, r8
   12010:	ldr	r0, [sp, #48]	; 0x30
   12014:	bl	19340 <__assert_fail@plt+0x7f2c>
   12018:	sub	r3, r0, #1
   1201c:	cmn	r3, #3
   12020:	mov	r9, r0
   12024:	bhi	12330 <__assert_fail@plt+0xf1c>
   12028:	ldrd	r2, [sp, #136]	; 0x88
   1202c:	add	r4, r8, #8192	; 0x2000
   12030:	add	r5, r8, r0
   12034:	adds	r2, r2, r0
   12038:	adc	r3, r3, #0
   1203c:	str	r0, [r4]
   12040:	strd	r2, [sp, #136]	; 0x88
   12044:	mov	r3, #0
   12048:	ldrb	r6, [sl]
   1204c:	mov	r0, r8
   12050:	str	r3, [r4, #4]
   12054:	str	r3, [r4, #8]
   12058:	mov	fp, r3
   1205c:	b	1206c <__assert_fail@plt+0xc58>
   12060:	add	r0, r0, #1
   12064:	mov	fp, r3
   12068:	str	r3, [r4, #4]
   1206c:	sub	r2, r5, r0
   12070:	mov	r1, r6
   12074:	bl	11330 <memchr@plt>
   12078:	add	r3, fp, #1
   1207c:	cmp	r0, #0
   12080:	bne	12060 <__assert_fail@plt+0xc4c>
   12084:	ldr	r3, [sp, #52]	; 0x34
   12088:	ldr	r2, [pc, #-1868]	; 11944 <__assert_fail@plt+0x530>
   1208c:	add	r5, r3, #8192	; 0x2000
   12090:	ldr	r3, [sp, #32]
   12094:	ldr	r0, [r5]
   12098:	add	r3, r3, fp
   1209c:	str	r3, [sp, #32]
   120a0:	add	r3, r9, r0
   120a4:	cmp	r3, r2
   120a8:	bls	120e8 <__assert_fail@plt+0xcd4>
   120ac:	add	r2, r7, #8192	; 0x2000
   120b0:	ldr	r1, [sp, #32]
   120b4:	str	r8, [r5, #8]
   120b8:	ldr	r3, [r2, #4]
   120bc:	ldrd	r4, [sp, #40]	; 0x28
   120c0:	sub	r3, r1, r3
   120c4:	mov	r1, #0
   120c8:	cmp	r5, r1
   120cc:	cmpeq	r4, r3
   120d0:	bcs	12118 <__assert_fail@plt+0xd04>
   120d4:	str	r8, [sp, #52]	; 0x34
   120d8:	str	r3, [sp, #32]
   120dc:	mov	r8, r7
   120e0:	ldr	r7, [r2, #8]
   120e4:	b	12008 <__assert_fail@plt+0xbf4>
   120e8:	ldr	r3, [sp, #52]	; 0x34
   120ec:	mov	r2, r9
   120f0:	add	r0, r3, r0
   120f4:	mov	r1, r8
   120f8:	bl	1112c <memcpy@plt>
   120fc:	ldm	r4, {r0, r1}
   12100:	ldr	r2, [r5]
   12104:	ldr	r3, [r5, #4]
   12108:	add	r2, r2, r0
   1210c:	add	r3, r3, r1
   12110:	stm	r5, {r2, r3}
   12114:	b	12008 <__assert_fail@plt+0xbf4>
   12118:	ldr	r0, [pc, #-2040]	; 11928 <__assert_fail@plt+0x514>
   1211c:	bl	19904 <__assert_fail@plt+0x84f0>
   12120:	str	r8, [sp, #52]	; 0x34
   12124:	mov	r8, r0
   12128:	b	12008 <__assert_fail@plt+0xbf4>
   1212c:	ldr	r3, [sp, #28]
   12130:	ldr	r4, [pc, #-2060]	; 1192c <__assert_fail@plt+0x518>
   12134:	ldr	r0, [r3]
   12138:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   1213c:	ldrb	r2, [r4]
   12140:	ldr	r3, [pc, #-2072]	; 11930 <__assert_fail@plt+0x51c>
   12144:	ldr	ip, [pc, #-2064]	; 1193c <__assert_fail@plt+0x528>
   12148:	cmp	r2, #0
   1214c:	moveq	ip, r3
   12150:	ldr	r1, [pc, #-2084]	; 11934 <__assert_fail@plt+0x520>
   12154:	mov	r2, ip
   12158:	mov	r3, r0
   1215c:	mov	r0, #1
   12160:	bl	11300 <__printf_chk@plt>
   12164:	mov	r3, #0
   12168:	strb	r3, [r4]
   1216c:	b	11c98 <__assert_fail@plt+0x884>
   12170:	ldr	r2, [sp, #28]
   12174:	ldr	r3, [sp, #56]	; 0x38
   12178:	ldr	r1, [sp, #48]	; 0x30
   1217c:	sub	r3, r3, #1
   12180:	str	r3, [r2, #52]	; 0x34
   12184:	mov	r0, #3
   12188:	add	r2, sp, #240	; 0xf0
   1218c:	bl	111c8 <__fxstat64@plt>
   12190:	cmp	r0, #0
   12194:	blt	12ba4 <__assert_fail@plt+0x1790>
   12198:	ldr	r1, [sp, #256]	; 0x100
   1219c:	and	r3, r1, #61440	; 0xf000
   121a0:	sub	r3, r3, #4096	; 0x1000
   121a4:	and	ip, r1, #45056	; 0xb000
   121a8:	bic	r3, r3, #4096	; 0x1000
   121ac:	cmp	r3, #0
   121b0:	cmpne	ip, #32768	; 0x8000
   121b4:	movne	ip, #1
   121b8:	moveq	ip, #0
   121bc:	beq	12450 <__assert_fail@plt+0x103c>
   121c0:	ldrb	r3, [sl, #2]
   121c4:	ldr	r7, [sp, #28]
   121c8:	mov	r4, #0
   121cc:	eor	r3, r3, #1
   121d0:	mvn	r2, #0
   121d4:	strb	r3, [r7, #44]	; 0x2c
   121d8:	ldr	r1, [pc, #-2216]	; 11938 <__assert_fail@plt+0x524>
   121dc:	str	r2, [r7, #52]	; 0x34
   121e0:	strb	r4, [r7, #46]	; 0x2e
   121e4:	mov	r2, #5
   121e8:	mov	r0, r4
   121ec:	bl	11174 <dcgettext@plt>
   121f0:	mov	r6, r0
   121f4:	ldr	r0, [r7]
   121f8:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   121fc:	mov	r1, #3
   12200:	mov	r2, r0
   12204:	mov	r0, r4
   12208:	bl	191a4 <__assert_fail@plt+0x7d90>
   1220c:	ldrb	r3, [r7, #44]	; 0x2c
   12210:	cmp	r3, r4
   12214:	mov	r5, r0
   12218:	ldreq	r0, [pc, #-2276]	; 1193c <__assert_fail@plt+0x528>
   1221c:	bne	12e04 <__assert_fail@plt+0x19f0>
   12220:	mov	r1, #0
   12224:	str	r0, [sp]
   12228:	mov	r3, r5
   1222c:	mov	r2, r6
   12230:	mov	r0, r1
   12234:	bl	1121c <error@plt>
   12238:	ldrb	r3, [sl, #2]
   1223c:	ldr	r4, [sp, #28]
   12240:	eor	r3, r3, #1
   12244:	strb	r3, [r4, #44]	; 0x2c
   12248:	ldr	r0, [r4]
   1224c:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   12250:	mov	r1, r0
   12254:	ldr	r0, [sp, #48]	; 0x30
   12258:	bl	13ef0 <__assert_fail@plt+0x2adc>
   1225c:	mvn	r3, #0
   12260:	str	r3, [r4, #48]	; 0x30
   12264:	mov	r3, #0
   12268:	str	r3, [sp, #56]	; 0x38
   1226c:	b	11db0 <__assert_fail@plt+0x99c>
   12270:	cmp	r3, #0
   12274:	bne	12558 <__assert_fail@plt+0x1144>
   12278:	ldrd	r2, [sp, #40]	; 0x28
   1227c:	cmp	r2, #0
   12280:	sbcs	r3, r3, #0
   12284:	blt	12558 <__assert_fail@plt+0x1144>
   12288:	ldr	r3, [sp, #256]	; 0x100
   1228c:	and	r3, r3, #53248	; 0xd000
   12290:	cmp	r3, #32768	; 0x8000
   12294:	bne	12cc8 <__assert_fail@plt+0x18b4>
   12298:	add	r3, sp, #288	; 0x120
   1229c:	mvn	r4, #0
   122a0:	ldrd	r6, [r3]
   122a4:	mvn	r5, #0
   122a8:	ldr	r2, [sp, #296]	; 0x128
   122ac:	sub	r3, r2, #1
   122b0:	cmn	r3, #-536870911	; 0xe0000001
   122b4:	movhi	r2, #512	; 0x200
   122b8:	cmp	r2, r6
   122bc:	asr	r3, r2, #31
   122c0:	sbcs	r3, r3, r7
   122c4:	bge	12558 <__assert_fail@plt+0x1144>
   122c8:	mvn	r3, #0
   122cc:	mvn	r2, #0
   122d0:	cmp	r5, r3
   122d4:	cmpeq	r4, r2
   122d8:	bne	12304 <__assert_fail@plt+0xef0>
   122dc:	ldr	r2, [sp, #80]	; 0x50
   122e0:	mov	r3, #1
   122e4:	str	r2, [sp, #4]
   122e8:	str	r3, [sp]
   122ec:	mov	r2, #0
   122f0:	mov	r3, #0
   122f4:	ldr	r0, [sp, #48]	; 0x30
   122f8:	bl	14388 <__assert_fail@plt+0x2f74>
   122fc:	mov	r4, r0
   12300:	mov	r5, r1
   12304:	cmp	r4, r6
   12308:	sbcs	r3, r5, r7
   1230c:	bge	12328 <__assert_fail@plt+0xf14>
   12310:	ldrd	r0, [sp, #40]	; 0x28
   12314:	subs	r2, r6, r4
   12318:	sbc	r3, r7, r5
   1231c:	cmp	r1, r3
   12320:	cmpeq	r0, r2
   12324:	bcc	12c68 <__assert_fail@plt+0x1854>
   12328:	strd	r4, [sp, #136]	; 0x88
   1232c:	b	11d68 <__assert_fail@plt+0x954>
   12330:	mov	r0, r8
   12334:	bl	16324 <__assert_fail@plt+0x4f10>
   12338:	cmn	r9, #1
   1233c:	beq	12c20 <__assert_fail@plt+0x180c>
   12340:	ldr	ip, [sp, #52]	; 0x34
   12344:	ldrd	r0, [sp, #40]	; 0x28
   12348:	add	r2, ip, #8192	; 0x2000
   1234c:	orr	r3, r0, r1
   12350:	ldr	r1, [r2]
   12354:	cmp	r3, #0
   12358:	cmpne	r1, #0
   1235c:	beq	1242c <__assert_fail@plt+0x1018>
   12360:	add	r3, ip, r1
   12364:	ldrb	r4, [sl]
   12368:	ldrb	r3, [r3, #-1]
   1236c:	cmp	r3, r4
   12370:	beq	1238c <__assert_fail@plt+0xf78>
   12374:	ldr	r3, [r2, #4]
   12378:	ldr	r1, [sp, #32]
   1237c:	add	r3, r3, #1
   12380:	add	r1, r1, #1
   12384:	str	r1, [sp, #32]
   12388:	str	r3, [r2, #4]
   1238c:	ldr	r2, [sp, #32]
   12390:	mov	ip, r7
   12394:	ldrd	r0, [sp, #40]	; 0x28
   12398:	b	123a4 <__assert_fail@plt+0xf90>
   1239c:	ldr	ip, [r6, #8]
   123a0:	mov	r2, r3
   123a4:	add	r6, ip, #8192	; 0x2000
   123a8:	mov	r9, #0
   123ac:	ldr	r3, [r6, #4]
   123b0:	cmp	r1, r9
   123b4:	sub	r3, r2, r3
   123b8:	cmpeq	r0, r3
   123bc:	bcc	1239c <__assert_fail@plt+0xf88>
   123c0:	ldrd	r8, [sp, #40]	; 0x28
   123c4:	mov	r3, #0
   123c8:	ldr	r5, [r6]
   123cc:	cmp	r9, r3
   123d0:	cmpeq	r8, r2
   123d4:	mov	r1, r2
   123d8:	mov	r0, ip
   123dc:	add	r5, ip, r5
   123e0:	bcs	12404 <__assert_fail@plt+0xff0>
   123e4:	sub	fp, r1, r8
   123e8:	b	123fc <__assert_fail@plt+0xfe8>
   123ec:	mov	r1, r4
   123f0:	bl	11198 <rawmemchr@plt>
   123f4:	sub	fp, fp, #1
   123f8:	add	r0, r0, #1
   123fc:	cmp	fp, #0
   12400:	bne	123ec <__assert_fail@plt+0xfd8>
   12404:	sub	r1, r5, r0
   12408:	bl	13f6c <__assert_fail@plt+0x2b58>
   1240c:	ldr	r0, [r6, #8]
   12410:	b	12424 <__assert_fail@plt+0x1010>
   12414:	add	r4, r0, #8192	; 0x2000
   12418:	ldr	r1, [r4]
   1241c:	bl	13f6c <__assert_fail@plt+0x2b58>
   12420:	ldr	r0, [r4, #8]
   12424:	cmp	r0, #0
   12428:	bne	12414 <__assert_fail@plt+0x1000>
   1242c:	cmp	r7, #0
   12430:	movne	r0, r7
   12434:	beq	11d98 <__assert_fail@plt+0x984>
   12438:	add	r3, r0, #8192	; 0x2000
   1243c:	ldr	r4, [r3, #8]
   12440:	bl	16324 <__assert_fail@plt+0x4f10>
   12444:	subs	r0, r4, #0
   12448:	bne	12438 <__assert_fail@plt+0x1024>
   1244c:	b	11d98 <__assert_fail@plt+0x984>
   12450:	ldr	r3, [sp, #56]	; 0x38
   12454:	cmp	r3, #0
   12458:	beq	12238 <__assert_fail@plt+0xe24>
   1245c:	ldr	lr, [sp, #60]	; 0x3c
   12460:	ldr	r4, [sp, #28]
   12464:	ldrd	r2, [sp, #136]	; 0x88
   12468:	ldr	r0, [sp, #92]	; 0x5c
   1246c:	cmp	lr, #0
   12470:	movne	r0, #1
   12474:	strd	r2, [r4, #8]
   12478:	str	r0, [r4, #56]	; 0x38
   1247c:	str	r1, [r4, #40]	; 0x28
   12480:	add	r3, sp, #336	; 0x150
   12484:	ldrd	r0, [sp, #240]	; 0xf0
   12488:	ldrd	r2, [r3]
   1248c:	ldr	r5, [sp, #48]	; 0x30
   12490:	strd	r0, [r4, #24]
   12494:	mov	r6, #0
   12498:	ldr	r0, [sp, #324]	; 0x144
   1249c:	ldr	r1, [sp, #320]	; 0x140
   124a0:	mov	r7, #0
   124a4:	strb	ip, [r4, #44]	; 0x2c
   124a8:	strd	r2, [r4, #32]
   124ac:	str	r0, [r4, #20]
   124b0:	str	r1, [r4, #16]
   124b4:	str	r5, [r4, #48]	; 0x30
   124b8:	strd	r6, [r4, #72]	; 0x48
   124bc:	ldr	r0, [r4]
   124c0:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   124c4:	mov	r1, r0
   124c8:	mov	r0, r5
   124cc:	bl	14994 <__assert_fail@plt+0x3580>
   124d0:	strb	r0, [r4, #45]	; 0x2d
   124d4:	b	11db0 <__assert_fail@plt+0x99c>
   124d8:	ldr	r0, [sp, #48]	; 0x30
   124dc:	bl	113fc <close@plt>
   124e0:	cmp	r0, #0
   124e4:	beq	11db0 <__assert_fail@plt+0x99c>
   124e8:	bl	112dc <__errno_location@plt>
   124ec:	mov	r2, #5
   124f0:	ldr	r1, [pc, #-3000]	; 11940 <__assert_fail@plt+0x52c>
   124f4:	str	r4, [sp, #56]	; 0x38
   124f8:	ldr	r5, [r0]
   124fc:	mov	r0, r4
   12500:	bl	11174 <dcgettext@plt>
   12504:	ldr	r3, [sp, #28]
   12508:	mov	r6, r0
   1250c:	ldr	r0, [r3]
   12510:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   12514:	mov	r1, r0
   12518:	mov	r0, #4
   1251c:	bl	190e8 <__assert_fail@plt+0x7cd4>
   12520:	mov	r2, r6
   12524:	mov	r1, r5
   12528:	mov	r3, r0
   1252c:	mov	r0, r4
   12530:	bl	1121c <error@plt>
   12534:	b	11db0 <__assert_fail@plt+0x99c>
   12538:	ldr	r3, [sp, #48]	; 0x30
   1253c:	ldr	r2, [sp, #28]
   12540:	cmn	r3, #1
   12544:	mov	r3, #1
   12548:	strb	r3, [r2, #46]	; 0x2e
   1254c:	bne	11c8c <__assert_fail@plt+0x878>
   12550:	mov	r4, r3
   12554:	b	11f0c <__assert_fail@plt+0xaf8>
   12558:	ldr	r0, [pc, #-3096]	; 11948 <__assert_fail@plt+0x534>
   1255c:	bl	19904 <__assert_fail@plt+0x84f0>
   12560:	mov	r5, #0
   12564:	add	r3, r0, #8192	; 0x2000
   12568:	mov	r7, r0
   1256c:	str	r5, [r3]
   12570:	str	r5, [r3, #4]
   12574:	ldr	r0, [pc, #-3124]	; 11948 <__assert_fail@plt+0x534>
   12578:	bl	19904 <__assert_fail@plt+0x84f0>
   1257c:	mov	r4, r7
   12580:	ldr	fp, [sp, #48]	; 0x30
   12584:	mov	r6, r0
   12588:	b	125c4 <__assert_fail@plt+0x11b0>
   1258c:	add	r2, r4, #8192	; 0x2000
   12590:	str	r6, [r8, #4]
   12594:	ldrd	r8, [sp, #40]	; 0x28
   12598:	ldr	r3, [r2]
   1259c:	mov	r1, #0
   125a0:	sub	r3, r5, r3
   125a4:	cmp	r9, r1
   125a8:	cmpeq	r8, r3
   125ac:	bcs	12700 <__assert_fail@plt+0x12ec>
   125b0:	mov	r0, r4
   125b4:	ldr	r4, [r2, #4]
   125b8:	mov	r5, r3
   125bc:	mov	r7, r6
   125c0:	mov	r6, r0
   125c4:	mov	r2, #8192	; 0x2000
   125c8:	mov	r1, r6
   125cc:	mov	r0, fp
   125d0:	bl	19340 <__assert_fail@plt+0x7f2c>
   125d4:	sub	r3, r0, #1
   125d8:	cmn	r3, #3
   125dc:	bhi	12764 <__assert_fail@plt+0x1350>
   125e0:	ldrd	r2, [sp, #136]	; 0x88
   125e4:	add	r9, r6, #8192	; 0x2000
   125e8:	add	r8, r7, #8192	; 0x2000
   125ec:	adds	r2, r2, r0
   125f0:	adc	r3, r3, #0
   125f4:	ldr	r1, [pc, #-3256]	; 11944 <__assert_fail@plt+0x530>
   125f8:	strd	r2, [sp, #136]	; 0x88
   125fc:	str	r0, [r9]
   12600:	ldr	r3, [r8]
   12604:	mov	r2, #0
   12608:	str	r2, [r9, #4]
   1260c:	add	r2, r0, r3
   12610:	cmp	r2, r1
   12614:	add	r5, r5, r0
   12618:	bhi	1258c <__assert_fail@plt+0x1178>
   1261c:	mov	r2, r0
   12620:	mov	r1, r6
   12624:	add	r0, r7, r3
   12628:	bl	1112c <memcpy@plt>
   1262c:	ldr	r2, [r9]
   12630:	ldr	r3, [r8]
   12634:	mov	r0, r6
   12638:	add	r3, r3, r2
   1263c:	mov	r6, r7
   12640:	str	r3, [r8]
   12644:	b	125bc <__assert_fail@plt+0x11a8>
   12648:	add	r1, sp, #136	; 0x88
   1264c:	ldrd	r2, [sp, #40]	; 0x28
   12650:	str	r1, [sp]
   12654:	ldr	r0, [sp, #80]	; 0x50
   12658:	ldr	r1, [sp, #48]	; 0x30
   1265c:	bl	14284 <__assert_fail@plt+0x2e70>
   12660:	cmp	r0, #0
   12664:	lsrne	r3, r0, #31
   12668:	strne	r3, [sp, #56]	; 0x38
   1266c:	bne	11d98 <__assert_fail@plt+0x984>
   12670:	mvn	r2, #0
   12674:	mvn	r3, #0
   12678:	strd	r2, [sp, #40]	; 0x28
   1267c:	b	11d68 <__assert_fail@plt+0x954>
   12680:	ldr	fp, [sp, #92]	; 0x5c
   12684:	ldrb	r3, [sl, #7]
   12688:	cmp	r3, #0
   1268c:	str	r3, [sp, #60]	; 0x3c
   12690:	bne	12840 <__assert_fail@plt+0x142c>
   12694:	ldrb	r3, [sl, #4]
   12698:	cmp	r3, #0
   1269c:	beq	126b0 <__assert_fail@plt+0x129c>
   126a0:	mov	r0, #0
   126a4:	bl	113fc <close@plt>
   126a8:	cmp	r0, #0
   126ac:	blt	12d3c <__assert_fail@plt+0x1928>
   126b0:	ldr	r3, [sp, #72]	; 0x48
   126b4:	eor	r0, r3, #1
   126b8:	bl	11294 <exit@plt>
   126bc:	bl	112dc <__errno_location@plt>
   126c0:	ldr	r6, [sp, #56]	; 0x38
   126c4:	ldr	r1, [pc, #-3456]	; 1194c <__assert_fail@plt+0x538>
   126c8:	mov	r2, #5
   126cc:	ldr	r4, [r0]
   126d0:	mov	r0, r6
   126d4:	bl	11174 <dcgettext@plt>
   126d8:	ldr	r1, [sp, #80]	; 0x50
   126dc:	mov	r5, r0
   126e0:	mov	r0, #4
   126e4:	bl	190e8 <__assert_fail@plt+0x7cd4>
   126e8:	mov	r2, r5
   126ec:	mov	r1, r4
   126f0:	mov	r3, r0
   126f4:	mov	r0, #0
   126f8:	bl	1121c <error@plt>
   126fc:	b	11d98 <__assert_fail@plt+0x984>
   12700:	ldr	r0, [pc, #-3520]	; 11948 <__assert_fail@plt+0x534>
   12704:	bl	19904 <__assert_fail@plt+0x84f0>
   12708:	b	125bc <__assert_fail@plt+0x11a8>
   1270c:	asr	r1, r0, #31
   12710:	strd	r0, [sp, #120]	; 0x78
   12714:	b	11868 <__assert_fail@plt+0x454>
   12718:	add	r1, sp, #136	; 0x88
   1271c:	ldrd	r2, [sp, #40]	; 0x28
   12720:	str	r1, [sp]
   12724:	ldr	r0, [sp, #80]	; 0x50
   12728:	ldr	r1, [sp, #48]	; 0x30
   1272c:	bl	13fe4 <__assert_fail@plt+0x2bd0>
   12730:	subs	r3, r0, #0
   12734:	beq	12c94 <__assert_fail@plt+0x1880>
   12738:	lsr	r3, r3, #31
   1273c:	str	r3, [sp, #56]	; 0x38
   12740:	b	11d98 <__assert_fail@plt+0x984>
   12744:	bl	112dc <__errno_location@plt>
   12748:	mov	r3, #0
   1274c:	mov	r2, #5
   12750:	ldr	r1, [pc, #-3596]	; 1194c <__assert_fail@plt+0x538>
   12754:	str	r3, [sp, #56]	; 0x38
   12758:	ldr	r4, [r0]
   1275c:	mov	r0, r3
   12760:	b	126d4 <__assert_fail@plt+0x12c0>
   12764:	mov	fp, r0
   12768:	mov	r0, r6
   1276c:	bl	16324 <__assert_fail@plt+0x4f10>
   12770:	cmn	fp, #1
   12774:	beq	13230 <__assert_fail@plt+0x1e1c>
   12778:	mov	r0, r4
   1277c:	mov	r2, r5
   12780:	mov	ip, r4
   12784:	ldrd	r4, [sp, #40]	; 0x28
   12788:	b	12794 <__assert_fail@plt+0x1380>
   1278c:	ldr	r0, [r6, #4]
   12790:	mov	r2, r3
   12794:	add	r6, r0, #8192	; 0x2000
   12798:	mov	r9, #0
   1279c:	ldr	r1, [r6]
   127a0:	cmp	r5, r9
   127a4:	sub	r3, r2, r1
   127a8:	cmpeq	r4, r3
   127ac:	bcc	1278c <__assert_fail@plt+0x1378>
   127b0:	ldrd	r8, [sp, #40]	; 0x28
   127b4:	mov	r3, #0
   127b8:	mov	r5, r2
   127bc:	cmp	r9, r3
   127c0:	cmpeq	r8, r2
   127c4:	movcc	r3, r8
   127c8:	subcc	r5, r2, r3
   127cc:	movcs	r5, #0
   127d0:	add	r0, r0, r5
   127d4:	sub	r1, r1, r5
   127d8:	mov	r4, ip
   127dc:	bl	13f6c <__assert_fail@plt+0x2b58>
   127e0:	ldr	r0, [r6, #4]
   127e4:	b	127f8 <__assert_fail@plt+0x13e4>
   127e8:	add	r5, r0, #8192	; 0x2000
   127ec:	ldr	r1, [r5]
   127f0:	bl	13f6c <__assert_fail@plt+0x2b58>
   127f4:	ldr	r0, [r5, #4]
   127f8:	cmp	r0, #0
   127fc:	bne	127e8 <__assert_fail@plt+0x13d4>
   12800:	mov	r3, #1
   12804:	str	r3, [sp, #56]	; 0x38
   12808:	mov	r0, r4
   1280c:	b	12820 <__assert_fail@plt+0x140c>
   12810:	add	r3, r0, #8192	; 0x2000
   12814:	ldr	r4, [r3, #4]
   12818:	bl	16324 <__assert_fail@plt+0x4f10>
   1281c:	mov	r0, r4
   12820:	cmp	r0, #0
   12824:	bne	12810 <__assert_fail@plt+0x13fc>
   12828:	b	11d98 <__assert_fail@plt+0x984>
   1282c:	mov	r1, #80	; 0x50
   12830:	ldr	r0, [sp, #76]	; 0x4c
   12834:	bl	199ec <__assert_fail@plt+0x85d8>
   12838:	str	r0, [sp, #84]	; 0x54
   1283c:	b	11bf0 <__assert_fail@plt+0x7dc>
   12840:	ldr	r1, [sp, #76]	; 0x4c
   12844:	mov	r3, #80	; 0x50
   12848:	ldr	r2, [sp, #84]	; 0x54
   1284c:	mul	r3, r3, r1
   12850:	mov	r9, r2
   12854:	str	r3, [sp, #100]	; 0x64
   12858:	mov	r8, #0
   1285c:	add	r4, r2, r3
   12860:	ldr	r5, [pc, #-3864]	; 11950 <__assert_fail@plt+0x53c>
   12864:	mvn	r7, #0
   12868:	mov	r6, #1
   1286c:	b	128b4 <__assert_fail@plt+0x14a0>
   12870:	mov	r1, r5
   12874:	ldr	r0, [r9]
   12878:	bl	110cc <strcmp@plt>
   1287c:	cmp	r0, #0
   12880:	bne	128ac <__assert_fail@plt+0x1498>
   12884:	ldrb	r3, [r9, #44]	; 0x2c
   12888:	cmp	r3, #0
   1288c:	bne	128ac <__assert_fail@plt+0x1498>
   12890:	ldr	r3, [r9, #48]	; 0x30
   12894:	cmp	r3, #0
   12898:	blt	128ac <__assert_fail@plt+0x1498>
   1289c:	ldr	r3, [r9, #40]	; 0x28
   128a0:	and	r3, r3, #61440	; 0xf000
   128a4:	cmp	r3, #4096	; 0x1000
   128a8:	beq	12b98 <__assert_fail@plt+0x1784>
   128ac:	add	r8, r8, #1
   128b0:	add	r9, r9, #80	; 0x50
   128b4:	cmp	r9, r4
   128b8:	bne	12870 <__assert_fail@plt+0x145c>
   128bc:	cmp	r8, #0
   128c0:	beq	12694 <__assert_fail@plt+0x1280>
   128c4:	add	r2, sp, #136	; 0x88
   128c8:	mov	r1, #1
   128cc:	mov	r0, #3
   128d0:	bl	111c8 <__fxstat64@plt>
   128d4:	cmp	r0, #0
   128d8:	blt	13d2c <__assert_fail@plt+0x2918>
   128dc:	ldr	r3, [sp, #152]	; 0x98
   128e0:	ldrb	r8, [sl, #3]
   128e4:	and	r3, r3, #61440	; 0xf000
   128e8:	sub	r3, r3, #4096	; 0x1000
   128ec:	cmp	r8, #0
   128f0:	clz	r3, r3
   128f4:	lsr	r3, r3, #5
   128f8:	strb	r3, [sl, #13]
   128fc:	bne	129a0 <__assert_fail@plt+0x158c>
   12900:	ldr	r4, [pc, #3856]	; 13818 <__assert_fail@plt+0x2404>
   12904:	ldr	r6, [sp, #100]	; 0x64
   12908:	ldr	r5, [sp, #84]	; 0x54
   1290c:	b	12938 <__assert_fail@plt+0x1524>
   12910:	add	r3, r5, r8
   12914:	ldrb	r3, [r3, #44]	; 0x2c
   12918:	cmp	r3, #0
   1291c:	bne	12934 <__assert_fail@plt+0x1520>
   12920:	mov	r1, r4
   12924:	ldr	r0, [r5, r8]
   12928:	bl	110cc <strcmp@plt>
   1292c:	cmp	r0, #0
   12930:	beq	129a0 <__assert_fail@plt+0x158c>
   12934:	add	r8, r8, #80	; 0x50
   12938:	cmp	r8, r6
   1293c:	bne	12910 <__assert_fail@plt+0x14fc>
   12940:	ldr	r3, [sp, #84]	; 0x54
   12944:	b	12964 <__assert_fail@plt+0x1550>
   12948:	ldr	r2, [r3, #48]	; 0x30
   1294c:	cmp	r2, #0
   12950:	blt	12960 <__assert_fail@plt+0x154c>
   12954:	ldrb	r2, [r3, #45]	; 0x2d
   12958:	cmp	r2, #0
   1295c:	bne	129a0 <__assert_fail@plt+0x158c>
   12960:	add	r3, r3, #80	; 0x50
   12964:	cmp	r3, r9
   12968:	bne	12948 <__assert_fail@plt+0x1534>
   1296c:	str	r3, [sp, #32]
   12970:	ldr	r3, [sp, #84]	; 0x54
   12974:	b	12994 <__assert_fail@plt+0x1580>
   12978:	ldr	r2, [r3, #48]	; 0x30
   1297c:	cmp	r2, #0
   12980:	blt	12990 <__assert_fail@plt+0x157c>
   12984:	ldrb	r2, [r3, #45]	; 0x2d
   12988:	cmp	r2, #0
   1298c:	beq	13298 <__assert_fail@plt+0x1e84>
   12990:	add	r3, r3, #80	; 0x50
   12994:	ldr	r2, [sp, #32]
   12998:	cmp	r2, r3
   1299c:	bne	12978 <__assert_fail@plt+0x1564>
   129a0:	ldr	r2, [sl, #8]
   129a4:	mov	r3, #1
   129a8:	cmp	r2, #0
   129ac:	strb	r3, [sl, #3]
   129b0:	bne	129cc <__assert_fail@plt+0x15b8>
   129b4:	ldr	r3, [pc, #3680]	; 1381c <__assert_fail@plt+0x2408>
   129b8:	ldr	r1, [sp, #76]	; 0x4c
   129bc:	ldr	r3, [r3, #4]
   129c0:	cmp	r3, #2
   129c4:	cmpeq	r1, #1
   129c8:	beq	13d3c <__assert_fail@plt+0x2928>
   129cc:	mov	r9, #0
   129d0:	ldr	r3, [sp, #100]	; 0x64
   129d4:	ldr	r2, [sp, #84]	; 0x54
   129d8:	sub	r3, r3, #80	; 0x50
   129dc:	add	r3, r2, r3
   129e0:	str	r3, [sp, #52]	; 0x34
   129e4:	ldr	r3, [sp, #76]	; 0x4c
   129e8:	mov	r8, r9
   129ec:	sub	r2, r3, #1
   129f0:	mov	fp, r3
   129f4:	str	r2, [sp, #48]	; 0x30
   129f8:	mov	r2, #0
   129fc:	str	r9, [sp, #40]	; 0x28
   12a00:	str	r2, [sp, #56]	; 0x38
   12a04:	cmp	fp, #0
   12a08:	beq	1320c <__assert_fail@plt+0x1df8>
   12a0c:	mov	r7, #0
   12a10:	str	r7, [sp, #28]
   12a14:	ldr	r5, [sp, #84]	; 0x54
   12a18:	b	12ad4 <__assert_fail@plt+0x16c0>
   12a1c:	ldr	r0, [r5]
   12a20:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   12a24:	ldr	r9, [r5, #56]	; 0x38
   12a28:	ldr	r3, [r5, #40]	; 0x28
   12a2c:	cmp	r8, r9
   12a30:	str	r3, [sp, #32]
   12a34:	mov	r6, r0
   12a38:	beq	12a80 <__assert_fail@plt+0x166c>
   12a3c:	mov	r1, #3
   12a40:	mov	r0, r4
   12a44:	bl	16118 <__assert_fail@plt+0x4d04>
   12a48:	cmp	r8, #0
   12a4c:	bne	12efc <__assert_fail@plt+0x1ae8>
   12a50:	cmp	r0, #0
   12a54:	blt	12f04 <__assert_fail@plt+0x1af0>
   12a58:	orr	r2, r0, #2048	; 0x800
   12a5c:	cmp	r0, r2
   12a60:	beq	12a78 <__assert_fail@plt+0x1664>
   12a64:	mov	r1, #4
   12a68:	mov	r0, r4
   12a6c:	bl	16118 <__assert_fail@plt+0x4d04>
   12a70:	cmn	r0, #1
   12a74:	beq	12f04 <__assert_fail@plt+0x1af0>
   12a78:	mov	r9, r8
   12a7c:	str	r8, [r5, #56]	; 0x38
   12a80:	cmp	r9, #0
   12a84:	beq	12e30 <__assert_fail@plt+0x1a1c>
   12a88:	mvn	r2, #1
   12a8c:	mvn	r3, #0
   12a90:	strd	r2, [sp]
   12a94:	mov	r1, r6
   12a98:	mov	r2, r4
   12a9c:	mov	r0, #0
   12aa0:	bl	14108 <__assert_fail@plt+0x2cf4>
   12aa4:	ldrd	r2, [r5, #8]
   12aa8:	orrs	ip, r0, r1
   12aac:	ldr	ip, [sp, #28]
   12ab0:	orrne	ip, ip, #1
   12ab4:	adds	r2, r2, r0
   12ab8:	adc	r3, r3, r1
   12abc:	str	ip, [sp, #28]
   12ac0:	strd	r2, [r5, #8]
   12ac4:	add	r7, r7, #1
   12ac8:	cmp	r7, fp
   12acc:	add	r5, r5, #80	; 0x50
   12ad0:	beq	12b08 <__assert_fail@plt+0x16f4>
   12ad4:	ldrb	r3, [r5, #44]	; 0x2c
   12ad8:	cmp	r3, #0
   12adc:	bne	12ac4 <__assert_fail@plt+0x16b0>
   12ae0:	ldr	r4, [r5, #48]	; 0x30
   12ae4:	cmp	r4, #0
   12ae8:	bge	12a1c <__assert_fail@plt+0x1608>
   12aec:	mov	r0, r5
   12af0:	ldr	r1, [sp, #40]	; 0x28
   12af4:	add	r7, r7, #1
   12af8:	bl	15100 <__assert_fail@plt+0x3cec>
   12afc:	cmp	r7, fp
   12b00:	add	r5, r5, #80	; 0x50
   12b04:	bne	12ad4 <__assert_fail@plt+0x16c0>
   12b08:	ldrb	r0, [sl, #2]
   12b0c:	cmp	r0, #0
   12b10:	beq	12f98 <__assert_fail@plt+0x1b84>
   12b14:	ldr	r3, [pc, #3328]	; 1381c <__assert_fail@plt+0x2408>
   12b18:	ldr	r3, [r3, #4]
   12b1c:	cmp	r3, #1
   12b20:	beq	12fa8 <__assert_fail@plt+0x1b94>
   12b24:	ldr	r2, [sp, #84]	; 0x54
   12b28:	ldr	r3, [r2, #48]	; 0x30
   12b2c:	cmp	r3, #0
   12b30:	bge	12fa8 <__assert_fail@plt+0x1b94>
   12b34:	ldrb	r0, [r2, #44]	; 0x2c
   12b38:	cmp	r0, #0
   12b3c:	beq	12fa8 <__assert_fail@plt+0x1b94>
   12b40:	ldr	r3, [sp, #84]	; 0x54
   12b44:	ldr	ip, [sp, #52]	; 0x34
   12b48:	b	12b6c <__assert_fail@plt+0x1758>
   12b4c:	ldr	r2, [r3, #128]	; 0x80
   12b50:	cmp	r2, #0
   12b54:	bge	12fa8 <__assert_fail@plt+0x1b94>
   12b58:	ldrb	r2, [r3, #124]	; 0x7c
   12b5c:	add	r3, r3, #80	; 0x50
   12b60:	eor	r2, r2, #1
   12b64:	tst	r0, r2
   12b68:	bne	12fa8 <__assert_fail@plt+0x1b94>
   12b6c:	cmp	r3, ip
   12b70:	bne	12b4c <__assert_fail@plt+0x1738>
   12b74:	mov	r2, #5
   12b78:	ldr	r1, [pc, #3316]	; 13874 <__assert_fail@plt+0x2460>
   12b7c:	mov	r0, #0
   12b80:	bl	11174 <dcgettext@plt>
   12b84:	mov	r1, #0
   12b88:	mov	r2, r0
   12b8c:	mov	r0, r1
   12b90:	bl	1121c <error@plt>
   12b94:	b	12694 <__assert_fail@plt+0x1280>
   12b98:	str	r7, [r9, #48]	; 0x30
   12b9c:	strb	r6, [r9, #44]	; 0x2c
   12ba0:	b	128b0 <__assert_fail@plt+0x149c>
   12ba4:	bl	112dc <__errno_location@plt>
   12ba8:	ldr	r6, [sp, #28]
   12bac:	mov	r2, #5
   12bb0:	ldr	r1, [pc, #3176]	; 13820 <__assert_fail@plt+0x240c>
   12bb4:	ldr	r4, [r0]
   12bb8:	mov	r0, #0
   12bbc:	str	r4, [r6, #52]	; 0x34
   12bc0:	bl	11174 <dcgettext@plt>
   12bc4:	mov	r5, r0
   12bc8:	ldr	r0, [r6]
   12bcc:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   12bd0:	mov	r1, r0
   12bd4:	mov	r0, #4
   12bd8:	bl	190e8 <__assert_fail@plt+0x7cd4>
   12bdc:	mov	r2, r5
   12be0:	mov	r1, r4
   12be4:	mov	r3, r0
   12be8:	mov	r0, #0
   12bec:	bl	1121c <error@plt>
   12bf0:	b	12238 <__assert_fail@plt+0xe24>
   12bf4:	ldr	r2, [sp, #80]	; 0x50
   12bf8:	mov	r3, #1
   12bfc:	str	r2, [sp, #4]
   12c00:	str	r3, [sp]
   12c04:	ldr	r0, [sp, #48]	; 0x30
   12c08:	ldrd	r2, [sp, #40]	; 0x28
   12c0c:	bl	14388 <__assert_fail@plt+0x2f74>
   12c10:	cmp	r0, #0
   12c14:	sbcs	r3, r1, #0
   12c18:	bge	11d40 <__assert_fail@plt+0x92c>
   12c1c:	b	11d18 <__assert_fail@plt+0x904>
   12c20:	bl	112dc <__errno_location@plt>
   12c24:	ldr	r3, [sp, #88]	; 0x58
   12c28:	mov	r2, #5
   12c2c:	ldr	r1, [pc, #3052]	; 13820 <__assert_fail@plt+0x240c>
   12c30:	str	r3, [sp, #56]	; 0x38
   12c34:	ldr	r4, [r0]
   12c38:	mov	r0, #0
   12c3c:	bl	11174 <dcgettext@plt>
   12c40:	ldr	r1, [sp, #80]	; 0x50
   12c44:	mov	r5, r0
   12c48:	mov	r0, #4
   12c4c:	bl	190e8 <__assert_fail@plt+0x7cd4>
   12c50:	mov	r2, r5
   12c54:	mov	r1, r4
   12c58:	mov	r3, r0
   12c5c:	mov	r0, #0
   12c60:	bl	1121c <error@plt>
   12c64:	b	1242c <__assert_fail@plt+0x1018>
   12c68:	subs	r4, r6, r0
   12c6c:	ldr	r3, [sp, #80]	; 0x50
   12c70:	sbc	r5, r7, r1
   12c74:	mov	r1, #0
   12c78:	str	r3, [sp, #4]
   12c7c:	mov	r2, r4
   12c80:	mov	r3, r5
   12c84:	str	r1, [sp]
   12c88:	ldr	r0, [sp, #48]	; 0x30
   12c8c:	bl	14388 <__assert_fail@plt+0x2f74>
   12c90:	b	12328 <__assert_fail@plt+0xf14>
   12c94:	mvn	r3, #0
   12c98:	mvn	r2, #0
   12c9c:	ldr	r1, [sp, #80]	; 0x50
   12ca0:	strd	r2, [sp]
   12ca4:	ldr	r2, [sp, #48]	; 0x30
   12ca8:	bl	14108 <__assert_fail@plt+0x2cf4>
   12cac:	ldrd	r2, [sp, #136]	; 0x88
   12cb0:	ldr	ip, [sp, #88]	; 0x58
   12cb4:	str	ip, [sp, #56]	; 0x38
   12cb8:	adds	r2, r2, r0
   12cbc:	adc	r3, r3, r1
   12cc0:	strd	r2, [sp, #136]	; 0x88
   12cc4:	b	11d98 <__assert_fail@plt+0x984>
   12cc8:	ldrd	r6, [sp, #40]	; 0x28
   12ccc:	mov	r3, #2
   12cd0:	str	r3, [sp]
   12cd4:	rsbs	r2, r6, #0
   12cd8:	rsc	r3, r7, #0
   12cdc:	ldr	r0, [sp, #48]	; 0x30
   12ce0:	bl	111ec <lseek64@plt>
   12ce4:	mov	r5, r1
   12ce8:	mvn	r1, #0
   12cec:	mov	r4, r0
   12cf0:	cmp	r5, r1
   12cf4:	mvn	r0, #0
   12cf8:	cmpeq	r4, r0
   12cfc:	beq	12558 <__assert_fail@plt+0x1144>
   12d00:	adds	r2, r6, r4
   12d04:	adc	r3, r7, r5
   12d08:	mov	r6, r2
   12d0c:	mov	r7, r3
   12d10:	b	122a8 <__assert_fail@plt+0xe94>
   12d14:	mov	r2, #5
   12d18:	ldr	r1, [pc, #2820]	; 13824 <__assert_fail@plt+0x2410>
   12d1c:	mov	r0, r7
   12d20:	strb	r7, [sl, #2]
   12d24:	bl	11174 <dcgettext@plt>
   12d28:	mov	r1, r7
   12d2c:	mov	r2, r0
   12d30:	mov	r0, r7
   12d34:	bl	1121c <error@plt>
   12d38:	b	11e58 <__assert_fail@plt+0xa44>
   12d3c:	bl	112dc <__errno_location@plt>
   12d40:	ldr	r2, [pc, #2768]	; 13818 <__assert_fail@plt+0x2404>
   12d44:	ldr	r1, [r0]
   12d48:	mov	r0, #1
   12d4c:	bl	1121c <error@plt>
   12d50:	ldr	r6, [sp, #48]	; 0x30
   12d54:	mov	r3, #1
   12d58:	str	r3, [sp]
   12d5c:	mov	r2, #0
   12d60:	mov	r3, #0
   12d64:	mov	r0, r6
   12d68:	bl	111ec <lseek64@plt>
   12d6c:	mvn	r3, #0
   12d70:	mvn	r2, #0
   12d74:	cmp	r1, r3
   12d78:	cmpeq	r0, r2
   12d7c:	mov	r4, r0
   12d80:	mov	r5, r1
   12d84:	beq	11fd4 <__assert_fail@plt+0xbc0>
   12d88:	mov	r3, #2
   12d8c:	str	r3, [sp]
   12d90:	mov	r2, #0
   12d94:	mov	r3, #0
   12d98:	mov	r0, r6
   12d9c:	bl	111ec <lseek64@plt>
   12da0:	cmp	r4, r0
   12da4:	sbcs	r3, r5, r1
   12da8:	bge	12de0 <__assert_fail@plt+0x19cc>
   12dac:	orrs	r3, r0, r1
   12db0:	strd	r0, [sp, #136]	; 0x88
   12db4:	beq	11d98 <__assert_fail@plt+0x984>
   12db8:	add	ip, sp, #136	; 0x88
   12dbc:	strd	r0, [sp, #8]
   12dc0:	strd	r4, [sp]
   12dc4:	ldrd	r2, [sp, #40]	; 0x28
   12dc8:	ldr	r0, [sp, #80]	; 0x50
   12dcc:	str	ip, [sp, #16]
   12dd0:	ldr	r1, [sp, #48]	; 0x30
   12dd4:	bl	14498 <__assert_fail@plt+0x3084>
   12dd8:	str	r0, [sp, #56]	; 0x38
   12ddc:	b	11d98 <__assert_fail@plt+0x984>
   12de0:	ldr	r3, [sp, #80]	; 0x50
   12de4:	mov	r2, r4
   12de8:	str	r3, [sp, #4]
   12dec:	ldr	r3, [sp, #88]	; 0x58
   12df0:	ldr	r0, [sp, #48]	; 0x30
   12df4:	str	r3, [sp]
   12df8:	mov	r3, r5
   12dfc:	bl	14388 <__assert_fail@plt+0x2f74>
   12e00:	b	11fd4 <__assert_fail@plt+0xbc0>
   12e04:	mov	r0, r4
   12e08:	mov	r2, #5
   12e0c:	ldr	r1, [pc, #2580]	; 13828 <__assert_fail@plt+0x2414>
   12e10:	bl	11174 <dcgettext@plt>
   12e14:	b	12220 <__assert_fail@plt+0xe0c>
   12e18:	ldr	r3, [sp, #28]
   12e1c:	cmp	r3, #1
   12e20:	beq	11c48 <__assert_fail@plt+0x834>
   12e24:	mov	r3, #1
   12e28:	str	r3, [sp, #72]	; 0x48
   12e2c:	b	12684 <__assert_fail@plt+0x1270>
   12e30:	add	r2, sp, #240	; 0xf0
   12e34:	mov	r1, r4
   12e38:	mov	r0, #3
   12e3c:	bl	111c8 <__fxstat64@plt>
   12e40:	cmp	r0, #0
   12e44:	bne	12f54 <__assert_fail@plt+0x1b40>
   12e48:	ldr	ip, [sp, #256]	; 0x100
   12e4c:	ldr	r3, [r5, #40]	; 0x28
   12e50:	cmp	r3, ip
   12e54:	beq	13038 <__assert_fail@plt+0x1c24>
   12e58:	ldr	r2, [sp, #320]	; 0x140
   12e5c:	ldr	r3, [sp, #324]	; 0x144
   12e60:	ldr	r1, [sp, #32]
   12e64:	str	r2, [r5, #16]
   12e68:	and	r9, r1, #61440	; 0xf000
   12e6c:	str	r3, [r5, #20]
   12e70:	mov	r2, #0
   12e74:	mov	r3, #0
   12e78:	cmp	r9, #32768	; 0x8000
   12e7c:	str	ip, [r5, #40]	; 0x28
   12e80:	strd	r2, [r5, #72]	; 0x48
   12e84:	beq	130f8 <__assert_fail@plt+0x1ce4>
   12e88:	ldr	r3, [sp, #48]	; 0x30
   12e8c:	cmp	r3, r7
   12e90:	beq	12ed8 <__assert_fail@plt+0x1ac4>
   12e94:	ldrb	r3, [sl, #1]
   12e98:	cmp	r3, #0
   12e9c:	beq	12ed8 <__assert_fail@plt+0x1ac4>
   12ea0:	ldr	r3, [pc, #2420]	; 1381c <__assert_fail@plt+0x2408>
   12ea4:	ldr	ip, [pc, #2432]	; 1382c <__assert_fail@plt+0x2418>
   12ea8:	ldr	r0, [pc, #2432]	; 13830 <__assert_fail@plt+0x241c>
   12eac:	ldrb	r2, [r3]
   12eb0:	ldr	r1, [pc, #2428]	; 13834 <__assert_fail@plt+0x2420>
   12eb4:	mov	r3, r6
   12eb8:	cmp	r2, #0
   12ebc:	movne	r0, ip
   12ec0:	mov	r2, r0
   12ec4:	mov	r0, #1
   12ec8:	bl	11300 <__printf_chk@plt>
   12ecc:	ldr	r2, [pc, #2376]	; 1381c <__assert_fail@plt+0x2408>
   12ed0:	mov	r3, #0
   12ed4:	strb	r3, [r2]
   12ed8:	ldr	r3, [r5, #56]	; 0x38
   12edc:	cmp	r3, #0
   12ee0:	bne	13ce4 <__assert_fail@plt+0x28d0>
   12ee4:	cmp	r9, #32768	; 0x8000
   12ee8:	beq	12f2c <__assert_fail@plt+0x1b18>
   12eec:	mvn	r2, #0
   12ef0:	mov	r3, r2
   12ef4:	str	r7, [sp, #48]	; 0x30
   12ef8:	b	12a90 <__assert_fail@plt+0x167c>
   12efc:	cmp	r0, #0
   12f00:	bge	12a78 <__assert_fail@plt+0x1664>
   12f04:	ldr	r3, [r5, #40]	; 0x28
   12f08:	and	r3, r3, #61440	; 0xf000
   12f0c:	cmp	r3, #32768	; 0x8000
   12f10:	bne	13cec <__assert_fail@plt+0x28d8>
   12f14:	bl	112dc <__errno_location@plt>
   12f18:	ldr	r3, [r0]
   12f1c:	cmp	r3, #1
   12f20:	bne	13cec <__assert_fail@plt+0x28d8>
   12f24:	ldr	r9, [r5, #56]	; 0x38
   12f28:	b	12a80 <__assert_fail@plt+0x166c>
   12f2c:	ldrb	r3, [r5, #45]	; 0x2d
   12f30:	cmp	r3, #0
   12f34:	beq	12eec <__assert_fail@plt+0x1ad8>
   12f38:	add	r3, sp, #288	; 0x120
   12f3c:	ldrd	r0, [r5, #8]
   12f40:	ldrd	r2, [r3]
   12f44:	str	r7, [sp, #48]	; 0x30
   12f48:	subs	r2, r2, r0
   12f4c:	sbc	r3, r3, r1
   12f50:	b	12a90 <__assert_fail@plt+0x167c>
   12f54:	mvn	r3, #0
   12f58:	str	r3, [r5, #48]	; 0x30
   12f5c:	bl	112dc <__errno_location@plt>
   12f60:	mov	r2, r6
   12f64:	mov	r1, #3
   12f68:	ldr	r6, [r0]
   12f6c:	mov	r0, r9
   12f70:	str	r6, [r5, #52]	; 0x34
   12f74:	bl	191a4 <__assert_fail@plt+0x7d90>
   12f78:	mov	r1, r6
   12f7c:	ldr	r2, [pc, #2228]	; 13838 <__assert_fail@plt+0x2424>
   12f80:	mov	r3, r0
   12f84:	mov	r0, r9
   12f88:	bl	1121c <error@plt>
   12f8c:	mov	r0, r4
   12f90:	bl	113fc <close@plt>
   12f94:	b	12ac4 <__assert_fail@plt+0x16b0>
   12f98:	ldr	r3, [sp, #84]	; 0x54
   12f9c:	ldr	r3, [r3, #48]	; 0x30
   12fa0:	cmp	r3, #0
   12fa4:	blt	12b40 <__assert_fail@plt+0x172c>
   12fa8:	ldr	r3, [sp, #28]
   12fac:	ldr	r2, [sp, #40]	; 0x28
   12fb0:	eor	r3, r3, #1
   12fb4:	orrs	r3, r2, r3
   12fb8:	beq	13170 <__assert_fail@plt+0x1d5c>
   12fbc:	ldr	r3, [pc, #2168]	; 1383c <__assert_fail@plt+0x2428>
   12fc0:	ldr	r0, [r3]
   12fc4:	bl	111a4 <fflush_unlocked@plt>
   12fc8:	cmp	r0, #0
   12fcc:	bne	13c3c <__assert_fail@plt+0x2828>
   12fd0:	ldrb	r3, [sl, #13]
   12fd4:	cmp	r3, #0
   12fd8:	bne	13180 <__assert_fail@plt+0x1d6c>
   12fdc:	ldr	r3, [sp, #28]
   12fe0:	cmp	r3, #0
   12fe4:	bne	12a04 <__assert_fail@plt+0x15f0>
   12fe8:	ldr	r3, [sp, #56]	; 0x38
   12fec:	cmp	r3, #0
   12ff0:	bne	12694 <__assert_fail@plt+0x1280>
   12ff4:	ldr	r0, [sl, #8]
   12ff8:	cmp	r0, #0
   12ffc:	bne	131e0 <__assert_fail@plt+0x1dcc>
   13000:	vmov.f64	d0, d8
   13004:	bl	19fd8 <__assert_fail@plt+0x8bc4>
   13008:	cmp	r0, #0
   1300c:	beq	12a04 <__assert_fail@plt+0x15f0>
   13010:	bl	112dc <__errno_location@plt>
   13014:	ldr	r1, [pc, #2084]	; 13840 <__assert_fail@plt+0x242c>
   13018:	mov	r2, #5
   1301c:	ldr	r4, [r0]
   13020:	mov	r0, #0
   13024:	bl	11174 <dcgettext@plt>
   13028:	mov	r1, r4
   1302c:	mov	r2, r0
   13030:	mov	r0, #1
   13034:	bl	1121c <error@plt>
   13038:	and	r3, ip, #61440	; 0xf000
   1303c:	cmp	r3, #32768	; 0x8000
   13040:	beq	131c4 <__assert_fail@plt+0x1db0>
   13044:	ldr	r1, [r5, #16]
   13048:	ldr	r2, [sp, #320]	; 0x140
   1304c:	ldr	r3, [sp, #324]	; 0x144
   13050:	cmp	r2, r1
   13054:	ldr	lr, [r5, #20]
   13058:	movle	r0, #0
   1305c:	movgt	r0, #1
   13060:	cmp	r2, r1
   13064:	rsbge	r0, r0, #0
   13068:	rsblt	r0, r0, #1
   1306c:	cmp	r3, lr
   13070:	movle	r1, #0
   13074:	movgt	r1, #1
   13078:	cmp	r3, lr
   1307c:	rsbge	r1, r1, #0
   13080:	rsblt	r1, r1, #1
   13084:	add	r1, r1, r0, lsl #1
   13088:	cmp	r1, #0
   1308c:	bne	12e60 <__assert_fail@plt+0x1a4c>
   13090:	ldr	r3, [pc, #1924]	; 1381c <__assert_fail@plt+0x2408>
   13094:	ldrd	r0, [r5, #72]	; 0x48
   13098:	ldrd	r2, [r3, #16]
   1309c:	strd	r2, [sp, #64]	; 0x40
   130a0:	adds	r2, r0, #1
   130a4:	adc	r3, r1, #0
   130a8:	strd	r2, [sp, #32]
   130ac:	ldrd	r2, [sp, #64]	; 0x40
   130b0:	cmp	r1, r3
   130b4:	cmpeq	r0, r2
   130b8:	ldrd	r2, [sp, #32]
   130bc:	strd	r2, [r5, #72]	; 0x48
   130c0:	bcc	12ac4 <__assert_fail@plt+0x16b0>
   130c4:	ldr	r3, [pc, #1872]	; 1381c <__assert_fail@plt+0x2408>
   130c8:	ldr	r3, [r3, #4]
   130cc:	cmp	r3, #1
   130d0:	bne	12ac4 <__assert_fail@plt+0x16b0>
   130d4:	ldr	r1, [r5, #56]	; 0x38
   130d8:	mov	r0, r5
   130dc:	adds	r1, r1, #0
   130e0:	movne	r1, #1
   130e4:	bl	15100 <__assert_fail@plt+0x3cec>
   130e8:	mov	r2, #0
   130ec:	mov	r3, #0
   130f0:	strd	r2, [r5, #72]	; 0x48
   130f4:	b	12ac4 <__assert_fail@plt+0x16b0>
   130f8:	add	r3, sp, #288	; 0x120
   130fc:	ldrd	r0, [r3]
   13100:	ldrd	r2, [r5, #8]
   13104:	cmp	r0, r2
   13108:	sbcs	r3, r1, r3
   1310c:	bge	12e88 <__assert_fail@plt+0x1a74>
   13110:	mov	r2, #5
   13114:	ldr	r1, [pc, #1832]	; 13844 <__assert_fail@plt+0x2430>
   13118:	mov	r0, #0
   1311c:	bl	11174 <dcgettext@plt>
   13120:	mov	r2, r6
   13124:	mov	r1, #3
   13128:	str	r0, [sp, #32]
   1312c:	mov	r0, #0
   13130:	bl	191a4 <__assert_fail@plt+0x7d90>
   13134:	mov	r1, #0
   13138:	ldr	r2, [sp, #32]
   1313c:	mov	r3, r0
   13140:	mov	r0, r1
   13144:	bl	1121c <error@plt>
   13148:	mov	r3, #0
   1314c:	mov	r2, #0
   13150:	stm	sp, {r3, r6}
   13154:	mov	r0, r4
   13158:	mov	r3, #0
   1315c:	bl	14388 <__assert_fail@plt+0x2f74>
   13160:	mov	r2, #0
   13164:	mov	r3, #0
   13168:	strd	r2, [r5, #8]
   1316c:	b	12e88 <__assert_fail@plt+0x1a74>
   13170:	ldrb	r3, [sl, #13]
   13174:	cmp	r3, #0
   13178:	str	r3, [sp, #28]
   1317c:	beq	12a04 <__assert_fail@plt+0x15f0>
   13180:	mov	r3, #1
   13184:	mov	ip, #8
   13188:	mov	r1, r3
   1318c:	mov	r2, #0
   13190:	add	r0, sp, #128	; 0x80
   13194:	str	r3, [sp, #128]	; 0x80
   13198:	strh	ip, [sp, #132]	; 0x84
   1319c:	bl	111bc <poll@plt>
   131a0:	cmp	r0, #0
   131a4:	blt	12fdc <__assert_fail@plt+0x1bc8>
   131a8:	ldrh	r3, [sp, #134]	; 0x86
   131ac:	tst	r3, #8
   131b0:	beq	12fdc <__assert_fail@plt+0x1bc8>
   131b4:	mov	r0, #13
   131b8:	bl	110c0 <raise@plt>
   131bc:	mov	r0, #1
   131c0:	bl	11294 <exit@plt>
   131c4:	add	r3, sp, #288	; 0x120
   131c8:	ldrd	r0, [r5, #8]
   131cc:	ldrd	r2, [r3]
   131d0:	cmp	r1, r3
   131d4:	cmpeq	r0, r2
   131d8:	bne	12e58 <__assert_fail@plt+0x1a44>
   131dc:	b	13044 <__assert_fail@plt+0x1c30>
   131e0:	mov	r1, r3
   131e4:	bl	1127c <kill@plt>
   131e8:	cmp	r0, #0
   131ec:	beq	13000 <__assert_fail@plt+0x1bec>
   131f0:	bl	112dc <__errno_location@plt>
   131f4:	ldr	r3, [r0]
   131f8:	cmp	r3, #1
   131fc:	ldrne	r3, [sp, #60]	; 0x3c
   13200:	strne	r3, [sp, #56]	; 0x38
   13204:	bne	12a04 <__assert_fail@plt+0x15f0>
   13208:	b	13000 <__assert_fail@plt+0x1bec>
   1320c:	ldrb	r3, [sl, #2]
   13210:	cmp	r3, #0
   13214:	beq	12b74 <__assert_fail@plt+0x1760>
   13218:	ldr	r3, [pc, #1532]	; 1381c <__assert_fail@plt+0x2408>
   1321c:	ldr	r3, [r3, #4]
   13220:	cmp	r3, #1
   13224:	bne	12b74 <__assert_fail@plt+0x1760>
   13228:	str	fp, [sp, #28]
   1322c:	b	12fbc <__assert_fail@plt+0x1ba8>
   13230:	bl	112dc <__errno_location@plt>
   13234:	mov	r2, #5
   13238:	ldr	r1, [pc, #1504]	; 13820 <__assert_fail@plt+0x240c>
   1323c:	ldr	r5, [r0]
   13240:	mov	r0, #0
   13244:	bl	11174 <dcgettext@plt>
   13248:	ldr	r1, [sp, #80]	; 0x50
   1324c:	mov	r6, r0
   13250:	mov	r0, #4
   13254:	bl	190e8 <__assert_fail@plt+0x7cd4>
   13258:	mov	r2, r6
   1325c:	mov	r1, r5
   13260:	mov	r3, r0
   13264:	mov	r0, #0
   13268:	bl	1121c <error@plt>
   1326c:	mov	r0, r4
   13270:	b	12820 <__assert_fail@plt+0x140c>
   13274:	mov	r2, #5
   13278:	ldr	r1, [pc, #1480]	; 13848 <__assert_fail@plt+0x2434>
   1327c:	mov	r0, #0
   13280:	bl	11174 <dcgettext@plt>
   13284:	mov	r1, #0
   13288:	mov	r2, r0
   1328c:	mov	r0, r1
   13290:	bl	1121c <error@plt>
   13294:	b	11bb0 <__assert_fail@plt+0x79c>
   13298:	mov	r5, #80	; 0x50
   1329c:	mov	r4, #3
   132a0:	mov	r6, r2
   132a4:	str	r2, [sp, #88]	; 0x58
   132a8:	ldr	r3, [sp, #76]	; 0x4c
   132ac:	cmp	r6, r3
   132b0:	beq	132ec <__assert_fail@plt+0x1ed8>
   132b4:	mul	r3, r5, r6
   132b8:	ldr	r1, [sp, #84]	; 0x54
   132bc:	add	r2, sp, #240	; 0xf0
   132c0:	mov	r0, r4
   132c4:	ldr	r1, [r1, r3]
   132c8:	bl	11408 <__lxstat64@plt>
   132cc:	cmp	r0, #0
   132d0:	bne	132e4 <__assert_fail@plt+0x1ed0>
   132d4:	ldr	r3, [sp, #256]	; 0x100
   132d8:	and	r3, r3, #61440	; 0xf000
   132dc:	cmp	r3, #40960	; 0xa000
   132e0:	beq	129a0 <__assert_fail@plt+0x158c>
   132e4:	add	r6, r6, #1
   132e8:	b	132a8 <__assert_fail@plt+0x1e94>
   132ec:	str	r6, [sp, #92]	; 0x5c
   132f0:	ldr	r3, [sp, #84]	; 0x54
   132f4:	b	1331c <__assert_fail@plt+0x1f08>
   132f8:	ldr	r2, [r3, #48]	; 0x30
   132fc:	cmp	r2, #0
   13300:	blt	13318 <__assert_fail@plt+0x1f04>
   13304:	ldr	r2, [r3, #40]	; 0x28
   13308:	and	r2, r2, #61440	; 0xf000
   1330c:	cmp	r2, #32768	; 0x8000
   13310:	cmpne	r2, #4096	; 0x1000
   13314:	bne	129a0 <__assert_fail@plt+0x158c>
   13318:	add	r3, r3, #80	; 0x50
   1331c:	ldr	r2, [sp, #32]
   13320:	cmp	r2, r3
   13324:	bne	132f8 <__assert_fail@plt+0x1ee4>
   13328:	ldr	r3, [sp, #72]	; 0x48
   1332c:	cmp	r3, #0
   13330:	bne	13344 <__assert_fail@plt+0x1f30>
   13334:	ldr	r3, [pc, #1248]	; 1381c <__assert_fail@plt+0x2408>
   13338:	ldr	r3, [r3, #4]
   1333c:	cmp	r3, #2
   13340:	beq	129a0 <__assert_fail@plt+0x158c>
   13344:	bl	112ac <inotify_init@plt>
   13348:	subs	r9, r0, #0
   1334c:	blt	13550 <__assert_fail@plt+0x213c>
   13350:	ldr	r3, [pc, #1252]	; 1383c <__assert_fail@plt+0x2428>
   13354:	ldr	r0, [r3]
   13358:	bl	111a4 <fflush_unlocked@plt>
   1335c:	subs	r3, r0, #0
   13360:	str	r3, [sp, #56]	; 0x38
   13364:	bne	13c3c <__assert_fail@plt+0x2828>
   13368:	ldr	r1, [sp, #56]	; 0x38
   1336c:	ldr	r3, [pc, #1240]	; 1384c <__assert_fail@plt+0x2438>
   13370:	str	r1, [sp]
   13374:	ldr	r2, [pc, #1236]	; 13850 <__assert_fail@plt+0x243c>
   13378:	ldr	r0, [sp, #92]	; 0x5c
   1337c:	bl	16c00 <__assert_fail@plt+0x57ec>
   13380:	subs	r3, r0, #0
   13384:	str	r3, [sp, #28]
   13388:	beq	13ba0 <__assert_fail@plt+0x278c>
   1338c:	ldr	r7, [pc, #1160]	; 1381c <__assert_fail@plt+0x2408>
   13390:	ldr	r3, [pc, #1212]	; 13854 <__assert_fail@plt+0x2440>
   13394:	ldr	r1, [sp, #88]	; 0x58
   13398:	ldr	r2, [r7, #4]
   1339c:	ldr	r4, [sp, #84]	; 0x54
   133a0:	cmp	r2, #1
   133a4:	movne	r3, #2
   133a8:	str	r3, [sp, #96]	; 0x60
   133ac:	ldr	r3, [sp, #56]	; 0x38
   133b0:	str	r1, [sp, #48]	; 0x30
   133b4:	str	r1, [sp, #52]	; 0x34
   133b8:	str	r3, [sp, #40]	; 0x28
   133bc:	str	r8, [sp, #64]	; 0x40
   133c0:	b	133e4 <__assert_fail@plt+0x1fd0>
   133c4:	mov	r1, r4
   133c8:	ldr	r0, [sp, #28]
   133cc:	bl	171f4 <__assert_fail@plt+0x5de0>
   133d0:	cmp	r0, #0
   133d4:	beq	13ba0 <__assert_fail@plt+0x278c>
   133d8:	ldr	r3, [sp, #60]	; 0x3c
   133dc:	str	r3, [sp, #52]	; 0x34
   133e0:	add	r4, r4, #80	; 0x50
   133e4:	ldr	r3, [sp, #32]
   133e8:	cmp	r3, r4
   133ec:	beq	135c4 <__assert_fail@plt+0x21b0>
   133f0:	ldrb	r6, [r4, #44]	; 0x2c
   133f4:	cmp	r6, #0
   133f8:	bne	133e0 <__assert_fail@plt+0x1fcc>
   133fc:	ldr	r8, [r4]
   13400:	mov	r0, r8
   13404:	bl	112a0 <strlen@plt>
   13408:	mvn	r2, #0
   1340c:	str	r2, [r4, #60]	; 0x3c
   13410:	ldr	r2, [sp, #40]	; 0x28
   13414:	ldr	r3, [r7, #4]
   13418:	cmp	r2, r0
   1341c:	movcc	r2, r0
   13420:	cmp	r3, #1
   13424:	str	r2, [sp, #40]	; 0x28
   13428:	bne	13488 <__assert_fail@plt+0x2074>
   1342c:	mov	r0, r8
   13430:	bl	16048 <__assert_fail@plt+0x4c34>
   13434:	mov	r5, r0
   13438:	mov	r0, r8
   1343c:	bl	15e1c <__assert_fail@plt+0x4a08>
   13440:	ldrb	r3, [r8, r5]
   13444:	cmp	r5, #0
   13448:	ldr	r2, [pc, #1032]	; 13858 <__assert_fail@plt+0x2444>
   1344c:	ldreq	r1, [pc, #1032]	; 1385c <__assert_fail@plt+0x2448>
   13450:	str	r3, [sp, #80]	; 0x50
   13454:	sub	r0, r0, r8
   13458:	str	r0, [r4, #68]	; 0x44
   1345c:	strb	r6, [r8, r5]
   13460:	mov	r0, r9
   13464:	ldrne	r1, [r4]
   13468:	bl	112d0 <inotify_add_watch@plt>
   1346c:	ldr	r2, [r4]
   13470:	ldr	r3, [sp, #80]	; 0x50
   13474:	str	r0, [r4, #64]	; 0x40
   13478:	strb	r3, [r2, r5]
   1347c:	ldr	r3, [r4, #64]	; 0x40
   13480:	cmp	r3, #0
   13484:	blt	1357c <__assert_fail@plt+0x2168>
   13488:	ldr	r2, [sp, #96]	; 0x60
   1348c:	ldr	r1, [r4]
   13490:	mov	r0, r9
   13494:	bl	112d0 <inotify_add_watch@plt>
   13498:	cmp	r0, #0
   1349c:	str	r0, [r4, #60]	; 0x3c
   134a0:	bge	133c4 <__assert_fail@plt+0x1fb0>
   134a4:	ldr	r3, [r4, #48]	; 0x30
   134a8:	ldr	r1, [sp, #60]	; 0x3c
   134ac:	cmn	r3, #1
   134b0:	ldr	r2, [sp, #48]	; 0x30
   134b4:	movne	r2, r1
   134b8:	str	r2, [sp, #48]	; 0x30
   134bc:	bl	112dc <__errno_location@plt>
   134c0:	ldr	r5, [r0]
   134c4:	bic	r3, r5, #16
   134c8:	cmp	r3, #12
   134cc:	beq	13514 <__assert_fail@plt+0x2100>
   134d0:	ldr	r3, [r4, #52]	; 0x34
   134d4:	cmp	r5, r3
   134d8:	beq	133e0 <__assert_fail@plt+0x1fcc>
   134dc:	mov	r2, #5
   134e0:	ldr	r1, [pc, #916]	; 1387c <__assert_fail@plt+0x2468>
   134e4:	mov	r0, #0
   134e8:	bl	11174 <dcgettext@plt>
   134ec:	ldr	r1, [r4]
   134f0:	mov	r6, r0
   134f4:	mov	r0, #4
   134f8:	bl	190e8 <__assert_fail@plt+0x7cd4>
   134fc:	mov	r2, r6
   13500:	mov	r1, r5
   13504:	mov	r3, r0
   13508:	mov	r0, #0
   1350c:	bl	1121c <error@plt>
   13510:	b	133e0 <__assert_fail@plt+0x1fcc>
   13514:	mov	r2, #5
   13518:	ldr	r1, [pc, #832]	; 13860 <__assert_fail@plt+0x244c>
   1351c:	mov	r0, #0
   13520:	bl	11174 <dcgettext@plt>
   13524:	mov	r1, #0
   13528:	mov	r2, r0
   1352c:	mov	r0, r1
   13530:	bl	1121c <error@plt>
   13534:	ldr	r0, [sp, #28]
   13538:	bl	16dfc <__assert_fail@plt+0x59e8>
   1353c:	mov	r0, r9
   13540:	bl	113fc <close@plt>
   13544:	bl	112dc <__errno_location@plt>
   13548:	mov	r3, #0
   1354c:	str	r3, [r0]
   13550:	bl	112dc <__errno_location@plt>
   13554:	mov	r2, #5
   13558:	ldr	r1, [pc, #772]	; 13864 <__assert_fail@plt+0x2450>
   1355c:	ldr	r4, [r0]
   13560:	mov	r0, #0
   13564:	bl	11174 <dcgettext@plt>
   13568:	mov	r1, r4
   1356c:	mov	r2, r0
   13570:	mov	r0, #0
   13574:	bl	1121c <error@plt>
   13578:	b	129a0 <__assert_fail@plt+0x158c>
   1357c:	bl	112dc <__errno_location@plt>
   13580:	mov	r2, #5
   13584:	ldr	r5, [r0]
   13588:	cmp	r5, #28
   1358c:	beq	13518 <__assert_fail@plt+0x2104>
   13590:	ldr	r1, [pc, #720]	; 13868 <__assert_fail@plt+0x2454>
   13594:	mov	r0, #0
   13598:	bl	11174 <dcgettext@plt>
   1359c:	ldr	r1, [r4]
   135a0:	mov	r6, r0
   135a4:	mov	r0, #4
   135a8:	bl	190e8 <__assert_fail@plt+0x7cd4>
   135ac:	mov	r2, r6
   135b0:	mov	r1, r5
   135b4:	mov	r3, r0
   135b8:	mov	r0, #0
   135bc:	bl	1121c <error@plt>
   135c0:	b	13534 <__assert_fail@plt+0x2120>
   135c4:	ldr	r3, [r7, #4]
   135c8:	ldr	r8, [sp, #64]	; 0x40
   135cc:	cmp	r3, #2
   135d0:	beq	13bc4 <__assert_fail@plt+0x27b0>
   135d4:	ldr	r2, [sp, #84]	; 0x54
   135d8:	sub	r3, r8, #80	; 0x50
   135dc:	add	r5, sp, #344	; 0x158
   135e0:	add	r3, r2, r3
   135e4:	str	r3, [r5, #-228]!	; 0xffffff1c
   135e8:	mov	r4, r2
   135ec:	mov	r6, #3
   135f0:	ldr	r8, [sp, #32]
   135f4:	b	13658 <__assert_fail@plt+0x2244>
   135f8:	ldr	r3, [r4, #48]	; 0x30
   135fc:	cmn	r3, #1
   13600:	beq	13648 <__assert_fail@plt+0x2234>
   13604:	add	r2, sp, #240	; 0xf0
   13608:	ldr	r1, [r4]
   1360c:	mov	r0, r6
   13610:	bl	113c0 <__xstat64@plt>
   13614:	cmp	r0, #0
   13618:	bne	13648 <__assert_fail@plt+0x2234>
   1361c:	ldrd	r0, [r4, #24]
   13620:	ldrd	r2, [sp, #240]	; 0xf0
   13624:	cmp	r1, r3
   13628:	cmpeq	r0, r2
   1362c:	bne	13c10 <__assert_fail@plt+0x27fc>
   13630:	add	r3, sp, #336	; 0x150
   13634:	ldrd	r0, [r4, #32]
   13638:	ldrd	r2, [r3]
   1363c:	cmp	r1, r3
   13640:	cmpeq	r0, r2
   13644:	bne	13c10 <__assert_fail@plt+0x27fc>
   13648:	mov	r1, r5
   1364c:	mov	r0, r4
   13650:	bl	147a8 <__assert_fail@plt+0x3394>
   13654:	add	r4, r4, #80	; 0x50
   13658:	cmp	r4, r8
   1365c:	beq	13684 <__assert_fail@plt+0x2270>
   13660:	ldrb	r1, [r4, #44]	; 0x2c
   13664:	cmp	r1, #0
   13668:	bne	13654 <__assert_fail@plt+0x2240>
   1366c:	ldr	r3, [r7, #4]
   13670:	cmp	r3, #1
   13674:	bne	135f8 <__assert_fail@plt+0x21e4>
   13678:	mov	r0, r4
   1367c:	bl	15100 <__assert_fail@plt+0x3cec>
   13680:	b	13648 <__assert_fail@plt+0x2234>
   13684:	ldr	r3, [sp, #40]	; 0x28
   13688:	vldr	d9, [pc, #368]	; 13800 <__assert_fail@plt+0x23ec>
   1368c:	add	r3, r3, #17
   13690:	str	r3, [sp, #64]	; 0x40
   13694:	mov	r0, r3
   13698:	mov	r3, #0
   1369c:	mov	r4, r3
   136a0:	str	r3, [sp, #80]	; 0x50
   136a4:	bl	19904 <__assert_fail@plt+0x84f0>
   136a8:	vldr	d11, [pc, #344]	; 13808 <__assert_fail@plt+0x23f4>
   136ac:	vldr	d10, [pc, #348]	; 13810 <__assert_fail@plt+0x23fc>
   136b0:	mov	r3, #3
   136b4:	str	r4, [sp, #48]	; 0x30
   136b8:	str	r3, [sp, #52]	; 0x34
   136bc:	str	r0, [sp, #40]	; 0x28
   136c0:	ldr	r4, [r7, #4]
   136c4:	cmp	r4, #1
   136c8:	beq	13a0c <__assert_fail@plt+0x25f8>
   136cc:	ldr	r3, [sp, #48]	; 0x30
   136d0:	ldr	r2, [sp, #80]	; 0x50
   136d4:	cmp	r3, r2
   136d8:	bcc	137a8 <__assert_fail@plt+0x2394>
   136dc:	mov	r5, #1
   136e0:	ldr	r8, [sp, #56]	; 0x38
   136e4:	ldr	r6, [sp, #88]	; 0x58
   136e8:	b	13750 <__assert_fail@plt+0x233c>
   136ec:	cmp	r6, #0
   136f0:	bne	13be0 <__assert_fail@plt+0x27cc>
   136f4:	mov	r1, r6
   136f8:	bl	1127c <kill@plt>
   136fc:	cmp	r0, #0
   13700:	beq	13764 <__assert_fail@plt+0x2350>
   13704:	bl	112dc <__errno_location@plt>
   13708:	ldr	r3, [r0]
   1370c:	cmp	r3, #1
   13710:	movne	r2, r8
   13714:	ldrne	r6, [sp, #60]	; 0x3c
   13718:	beq	13764 <__assert_fail@plt+0x2350>
   1371c:	ldrb	r1, [sl, #13]
   13720:	mov	r4, #0
   13724:	mov	r3, #16
   13728:	add	r1, r1, #1
   1372c:	add	r0, sp, #240	; 0xf0
   13730:	str	r9, [sp, #240]	; 0xf0
   13734:	strh	r5, [sp, #244]	; 0xf4
   13738:	str	r5, [sp, #248]	; 0xf8
   1373c:	strh	r4, [sp, #254]	; 0xfe
   13740:	strh	r4, [sp, #252]	; 0xfc
   13744:	bl	111d4 <__poll_chk@plt>
   13748:	cmp	r0, r4
   1374c:	bne	139b0 <__assert_fail@plt+0x259c>
   13750:	ldr	r0, [sl, #8]
   13754:	cmp	r0, #0
   13758:	bne	136ec <__assert_fail@plt+0x22d8>
   1375c:	mov	r2, fp
   13760:	b	1371c <__assert_fail@plt+0x2308>
   13764:	vcmpe.f64	d8, d9
   13768:	vmrs	APSR_nzcv, fpscr
   1376c:	movls	r2, r8
   13770:	bls	1371c <__assert_fail@plt+0x2308>
   13774:	vcmpe.f64	d8, d11
   13778:	vmrs	APSR_nzcv, fpscr
   1377c:	bpl	1375c <__assert_fail@plt+0x2348>
   13780:	vmul.f64	d6, d8, d10
   13784:	vcvt.s32.f64	s15, d6
   13788:	vcvt.f64.s32	d5, s15
   1378c:	vmov	r3, s15
   13790:	vcmpe.f64	d6, d5
   13794:	vmrs	APSR_nzcv, fpscr
   13798:	movgt	r2, #1
   1379c:	movle	r2, #0
   137a0:	add	r2, r3, r2
   137a4:	b	1371c <__assert_fail@plt+0x2308>
   137a8:	ldr	r3, [sp, #48]	; 0x30
   137ac:	ldr	r2, [sp, #40]	; 0x28
   137b0:	add	r5, r2, r3
   137b4:	add	r2, r3, #16
   137b8:	ldr	r8, [r5, #4]
   137bc:	ldr	r3, [r5, #12]
   137c0:	ands	r4, r8, #1024	; 0x400
   137c4:	add	r2, r3, r2
   137c8:	str	r2, [sp, #48]	; 0x30
   137cc:	bne	13960 <__assert_fail@plt+0x254c>
   137d0:	cmp	r3, #0
   137d4:	ldreq	r2, [r5]
   137d8:	beq	13998 <__assert_fail@plt+0x2584>
   137dc:	ldr	r6, [sp, #84]	; 0x54
   137e0:	add	r3, r5, #16
   137e4:	str	r8, [sp, #108]	; 0x6c
   137e8:	str	r7, [sp, #104]	; 0x68
   137ec:	mov	r8, r3
   137f0:	mov	r7, r5
   137f4:	ldr	r5, [sp, #92]	; 0x5c
   137f8:	b	138ac <__assert_fail@plt+0x2498>
   137fc:	nop			; (mov r0, r0)
	...
   1380c:	cmpmi	r0, sp, asr #4
   13810:	andeq	r0, r0, r0
   13814:	addmi	r4, pc, r0
   13818:	ldrdeq	fp, [r1], -r8
   1381c:	andeq	lr, r2, r8, asr #2
   13820:	andeq	fp, r1, r4, lsr #12
   13824:	andeq	ip, r1, r0, asr #10
   13828:			; <UNDEFINED> instruction: 0x0001b7b8
   1382c:	andeq	ip, r1, ip, lsr #2
   13830:	andeq	fp, r1, r4, asr #12
   13834:	andeq	fp, r1, r8, lsr r6
   13838:	andeq	ip, r1, ip, lsl #8
   1383c:	andeq	lr, r2, r4, asr #3
   13840:	andeq	ip, r1, r4, lsr #16
   13844:			; <UNDEFINED> instruction: 0x0001b6bc
   13848:	andeq	ip, r1, r8, asr #12
   1384c:	andeq	r3, r1, r0, lsr #29
   13850:	andeq	r3, r1, ip, lsl #29
   13854:	andeq	r0, r0, r6, lsl #24
   13858:	andeq	r0, r0, r4, lsl #15
   1385c:	ldrdeq	ip, [r1], -r4
   13860:	andeq	ip, r1, r8, lsl #14
   13864:	ldrdeq	ip, [r1], -r0
   13868:	andeq	ip, r1, r4, ror #13
   1386c:	andeq	r0, r0, r4, lsl #28
   13870:	andeq	ip, r1, r4, lsl #15
   13874:	andeq	ip, r1, r4, asr #14
   13878:	andeq	ip, r1, r0, lsr #15
   1387c:	andeq	ip, r1, r4, lsr #14
   13880:	andeq	ip, r1, r8, asr r7
   13884:	andeq	ip, r1, r4, lsr r7
   13888:	ldrdeq	fp, [r1], -r0
   1388c:	andeq	ip, r1, ip, lsr #12
   13890:	ldrdeq	fp, [r1], -r8
   13894:	strdeq	ip, [r1], -r8
   13898:	andeq	ip, r1, r8, lsl #8
   1389c:	andeq	ip, r1, r0, lsl #16
   138a0:	andeq	fp, r1, r4, lsl r6
   138a4:	add	r4, r4, #1
   138a8:	add	r6, r6, #80	; 0x50
   138ac:	cmp	r5, r4
   138b0:	beq	13958 <__assert_fail@plt+0x2544>
   138b4:	ldr	r0, [r6, #64]	; 0x40
   138b8:	ldr	r1, [r7]
   138bc:	cmp	r0, r1
   138c0:	bne	138a4 <__assert_fail@plt+0x2490>
   138c4:	ldr	ip, [r6]
   138c8:	ldr	r1, [r6, #68]	; 0x44
   138cc:	mov	r0, r8
   138d0:	add	r1, ip, r1
   138d4:	bl	110cc <strcmp@plt>
   138d8:	cmp	r0, #0
   138dc:	bne	138a4 <__assert_fail@plt+0x2490>
   138e0:	mov	r3, #80	; 0x50
   138e4:	ldr	r8, [sp, #108]	; 0x6c
   138e8:	mul	r3, r3, r4
   138ec:	ldr	r2, [sp, #84]	; 0x54
   138f0:	ands	r8, r8, #512	; 0x200
   138f4:	mov	r5, r7
   138f8:	add	r4, r2, r3
   138fc:	ldr	r7, [sp, #104]	; 0x68
   13900:	beq	13a98 <__assert_fail@plt+0x2684>
   13904:	ldr	r3, [r7, #4]
   13908:	cmp	r3, #1
   1390c:	beq	13bb4 <__assert_fail@plt+0x27a0>
   13910:	cmp	r4, #0
   13914:	beq	136c0 <__assert_fail@plt+0x22ac>
   13918:	ldr	r3, [r5, #4]
   1391c:	ldr	r2, [pc, #-184]	; 1386c <__assert_fail@plt+0x2458>
   13920:	tst	r3, r2
   13924:	beq	13ba4 <__assert_fail@plt+0x2790>
   13928:	tst	r3, #1024	; 0x400
   1392c:	beq	13948 <__assert_fail@plt+0x2534>
   13930:	ldr	r1, [r4, #60]	; 0x3c
   13934:	mov	r0, r9
   13938:	bl	113d8 <inotify_rm_watch@plt>
   1393c:	mov	r1, r4
   13940:	ldr	r0, [sp, #28]
   13944:	bl	1722c <__assert_fail@plt+0x5e18>
   13948:	mov	r0, r4
   1394c:	mov	r1, #0
   13950:	bl	15100 <__assert_fail@plt+0x3cec>
   13954:	b	136c0 <__assert_fail@plt+0x22ac>
   13958:	ldr	r7, [sp, #104]	; 0x68
   1395c:	b	136c0 <__assert_fail@plt+0x22ac>
   13960:	cmp	r3, #0
   13964:	movne	r4, #0
   13968:	ldrne	r6, [sp, #84]	; 0x54
   1396c:	bne	137e0 <__assert_fail@plt+0x23cc>
   13970:	ldr	r2, [r5]
   13974:	ldr	r3, [sp, #84]	; 0x54
   13978:	b	1398c <__assert_fail@plt+0x2578>
   1397c:	add	r3, r3, #80	; 0x50
   13980:	ldr	r1, [r3, #-16]
   13984:	cmp	r2, r1
   13988:	beq	13a8c <__assert_fail@plt+0x2678>
   1398c:	ldr	r1, [sp, #32]
   13990:	cmp	r1, r3
   13994:	bne	1397c <__assert_fail@plt+0x2568>
   13998:	add	r1, sp, #240	; 0xf0
   1399c:	ldr	r0, [sp, #28]
   139a0:	str	r2, [sp, #300]	; 0x12c
   139a4:	bl	16960 <__assert_fail@plt+0x554c>
   139a8:	mov	r4, r0
   139ac:	b	13910 <__assert_fail@plt+0x24fc>
   139b0:	str	r6, [sp, #88]	; 0x58
   139b4:	blt	13be8 <__assert_fail@plt+0x27d4>
   139b8:	ldrsh	r4, [sp, #254]	; 0xfe
   139bc:	cmp	r4, #0
   139c0:	bne	131b4 <__assert_fail@plt+0x1da0>
   139c4:	ldr	r2, [sp, #64]	; 0x40
   139c8:	ldr	r1, [sp, #40]	; 0x28
   139cc:	mov	r0, r9
   139d0:	bl	19340 <__assert_fail@plt+0x7f2c>
   139d4:	subs	r3, r0, #0
   139d8:	str	r3, [sp, #80]	; 0x50
   139dc:	beq	13a44 <__assert_fail@plt+0x2630>
   139e0:	cmn	r3, #1
   139e4:	strne	r4, [sp, #48]	; 0x30
   139e8:	bne	137a8 <__assert_fail@plt+0x2394>
   139ec:	bl	112dc <__errno_location@plt>
   139f0:	ldr	r3, [r0]
   139f4:	cmp	r3, #22
   139f8:	beq	13a44 <__assert_fail@plt+0x2630>
   139fc:	bl	112dc <__errno_location@plt>
   13a00:	mov	r2, #5
   13a04:	ldr	r1, [pc, #-412]	; 13870 <__assert_fail@plt+0x245c>
   13a08:	b	1301c <__assert_fail@plt+0x1c08>
   13a0c:	ldrb	r3, [sl, #2]
   13a10:	cmp	r3, #0
   13a14:	bne	136cc <__assert_fail@plt+0x22b8>
   13a18:	ldr	r0, [sp, #28]
   13a1c:	bl	16798 <__assert_fail@plt+0x5384>
   13a20:	subs	r5, r0, #0
   13a24:	bne	136cc <__assert_fail@plt+0x22b8>
   13a28:	mov	r2, #5
   13a2c:	ldr	r1, [pc, #-448]	; 13874 <__assert_fail@plt+0x2460>
   13a30:	bl	11174 <dcgettext@plt>
   13a34:	mov	r1, r5
   13a38:	mov	r2, r0
   13a3c:	mov	r0, r4
   13a40:	bl	1121c <error@plt>
   13a44:	ldr	r3, [sp, #52]	; 0x34
   13a48:	cmp	r3, #0
   13a4c:	beq	139fc <__assert_fail@plt+0x25e8>
   13a50:	ldr	r3, [sp, #64]	; 0x40
   13a54:	ldr	r0, [sp, #40]	; 0x28
   13a58:	lsl	r3, r3, #1
   13a5c:	str	r3, [sp, #64]	; 0x40
   13a60:	mov	r1, r3
   13a64:	mov	r3, #0
   13a68:	mov	r4, r3
   13a6c:	str	r3, [sp, #80]	; 0x50
   13a70:	ldr	r3, [sp, #52]	; 0x34
   13a74:	sub	r3, r3, #1
   13a78:	str	r3, [sp, #52]	; 0x34
   13a7c:	bl	19940 <__assert_fail@plt+0x852c>
   13a80:	str	r4, [sp, #48]	; 0x30
   13a84:	str	r0, [sp, #40]	; 0x28
   13a88:	b	136c0 <__assert_fail@plt+0x22ac>
   13a8c:	mov	r2, #5
   13a90:	ldr	r1, [pc, #-544]	; 13878 <__assert_fail@plt+0x2464>
   13a94:	b	1351c <__assert_fail@plt+0x2108>
   13a98:	ldr	r2, [sp, #84]	; 0x54
   13a9c:	mov	r0, r9
   13aa0:	ldr	r1, [r2, r3]
   13aa4:	ldr	r2, [sp, #96]	; 0x60
   13aa8:	bl	112d0 <inotify_add_watch@plt>
   13aac:	subs	r6, r0, #0
   13ab0:	bge	13b00 <__assert_fail@plt+0x26ec>
   13ab4:	bl	112dc <__errno_location@plt>
   13ab8:	mov	r2, #5
   13abc:	ldr	r3, [r0]
   13ac0:	str	r3, [sp, #104]	; 0x68
   13ac4:	bic	r3, r3, #16
   13ac8:	cmp	r3, #12
   13acc:	beq	13518 <__assert_fail@plt+0x2104>
   13ad0:	ldr	r1, [pc, #-604]	; 1387c <__assert_fail@plt+0x2468>
   13ad4:	mov	r0, r8
   13ad8:	bl	11174 <dcgettext@plt>
   13adc:	ldr	r1, [r4]
   13ae0:	str	r0, [sp, #108]	; 0x6c
   13ae4:	mov	r0, #4
   13ae8:	bl	190e8 <__assert_fail@plt+0x7cd4>
   13aec:	ldr	r2, [sp, #108]	; 0x6c
   13af0:	ldr	r1, [sp, #104]	; 0x68
   13af4:	mov	r3, r0
   13af8:	mov	r0, r8
   13afc:	bl	1121c <error@plt>
   13b00:	ldr	r1, [r4, #60]	; 0x3c
   13b04:	subs	r3, r6, r1
   13b08:	movne	r3, #1
   13b0c:	orrs	r3, r3, r1, lsr #31
   13b10:	beq	13904 <__assert_fail@plt+0x24f0>
   13b14:	cmp	r1, #0
   13b18:	blt	13b30 <__assert_fail@plt+0x271c>
   13b1c:	mov	r0, r9
   13b20:	bl	113d8 <inotify_rm_watch@plt>
   13b24:	mov	r1, r4
   13b28:	ldr	r0, [sp, #28]
   13b2c:	bl	1722c <__assert_fail@plt+0x5e18>
   13b30:	cmn	r6, #1
   13b34:	str	r6, [r4, #60]	; 0x3c
   13b38:	beq	136c0 <__assert_fail@plt+0x22ac>
   13b3c:	mov	r1, r4
   13b40:	ldr	r0, [sp, #28]
   13b44:	bl	1722c <__assert_fail@plt+0x5e18>
   13b48:	cmp	r0, #0
   13b4c:	cmpne	r4, r0
   13b50:	mov	r6, r0
   13b54:	beq	13b8c <__assert_fail@plt+0x2778>
   13b58:	ldr	r3, [r7, #4]
   13b5c:	cmp	r3, #1
   13b60:	bne	13b6c <__assert_fail@plt+0x2758>
   13b64:	mov	r1, #0
   13b68:	bl	15100 <__assert_fail@plt+0x3cec>
   13b6c:	mvn	r3, #0
   13b70:	str	r3, [r6, #60]	; 0x3c
   13b74:	ldr	r0, [r6]
   13b78:	ldr	r8, [r6, #48]	; 0x30
   13b7c:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   13b80:	mov	r1, r0
   13b84:	mov	r0, r8
   13b88:	bl	13ef0 <__assert_fail@plt+0x2adc>
   13b8c:	mov	r1, r4
   13b90:	ldr	r0, [sp, #28]
   13b94:	bl	171f4 <__assert_fail@plt+0x5de0>
   13b98:	cmp	r0, #0
   13b9c:	bne	13904 <__assert_fail@plt+0x24f0>
   13ba0:	bl	19e4c <__assert_fail@plt+0x8a38>
   13ba4:	mov	r0, r4
   13ba8:	add	r1, sp, #116	; 0x74
   13bac:	bl	147a8 <__assert_fail@plt+0x3394>
   13bb0:	b	136c0 <__assert_fail@plt+0x22ac>
   13bb4:	mov	r1, #0
   13bb8:	mov	r0, r4
   13bbc:	bl	15100 <__assert_fail@plt+0x3cec>
   13bc0:	b	13910 <__assert_fail@plt+0x24fc>
   13bc4:	ldr	r3, [sp, #48]	; 0x30
   13bc8:	cmp	r3, #0
   13bcc:	bne	13534 <__assert_fail@plt+0x2120>
   13bd0:	ldr	r3, [sp, #52]	; 0x34
   13bd4:	cmp	r3, #0
   13bd8:	bne	135d4 <__assert_fail@plt+0x21c0>
   13bdc:	b	131bc <__assert_fail@plt+0x1da8>
   13be0:	mov	r0, #0
   13be4:	bl	11294 <exit@plt>
   13be8:	bl	112dc <__errno_location@plt>
   13bec:	mov	r2, #5
   13bf0:	ldr	r1, [pc, #-888]	; 13880 <__assert_fail@plt+0x246c>
   13bf4:	ldr	r5, [r0]
   13bf8:	mov	r0, r4
   13bfc:	bl	11174 <dcgettext@plt>
   13c00:	mov	r1, r5
   13c04:	mov	r2, r0
   13c08:	mov	r0, #1
   13c0c:	bl	1121c <error@plt>
   13c10:	bl	112dc <__errno_location@plt>
   13c14:	ldr	r1, [pc, #-920]	; 13884 <__assert_fail@plt+0x2470>
   13c18:	mov	r2, #5
   13c1c:	ldr	r5, [r0]
   13c20:	mov	r0, #0
   13c24:	bl	11174 <dcgettext@plt>
   13c28:	mov	r6, r0
   13c2c:	ldr	r0, [r4]
   13c30:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   13c34:	mov	r1, r0
   13c38:	b	135a4 <__assert_fail@plt+0x2190>
   13c3c:	bl	112dc <__errno_location@plt>
   13c40:	mov	r2, #5
   13c44:	ldr	r1, [pc, #-964]	; 13888 <__assert_fail@plt+0x2474>
   13c48:	b	1301c <__assert_fail@plt+0x1c08>
   13c4c:	mov	r2, #5
   13c50:	ldr	r1, [pc, #-972]	; 1388c <__assert_fail@plt+0x2478>
   13c54:	mov	r0, #0
   13c58:	bl	11174 <dcgettext@plt>
   13c5c:	ldr	r1, [pc, #-980]	; 13890 <__assert_fail@plt+0x247c>
   13c60:	mov	r5, r0
   13c64:	mov	r0, #4
   13c68:	bl	190e8 <__assert_fail@plt+0x7cd4>
   13c6c:	mov	r2, r5
   13c70:	mov	r1, #0
   13c74:	mov	r3, r0
   13c78:	mov	r0, r4
   13c7c:	bl	1121c <error@plt>
   13c80:	add	r2, sp, #240	; 0xf0
   13c84:	mov	r0, #3
   13c88:	bl	111c8 <__fxstat64@plt>
   13c8c:	cmp	r0, #0
   13c90:	bne	11ba0 <__assert_fail@plt+0x78c>
   13c94:	ldr	r3, [sp, #256]	; 0x100
   13c98:	and	r3, r3, #61440	; 0xf000
   13c9c:	cmp	r3, #32768	; 0x8000
   13ca0:	bne	11bb0 <__assert_fail@plt+0x79c>
   13ca4:	b	11ba0 <__assert_fail@plt+0x78c>
   13ca8:	bl	112dc <__errno_location@plt>
   13cac:	mov	r2, #5
   13cb0:	ldr	r1, [pc, #-1060]	; 13894 <__assert_fail@plt+0x2480>
   13cb4:	ldr	r5, [r0]
   13cb8:	mov	r0, r7
   13cbc:	bl	11174 <dcgettext@plt>
   13cc0:	mov	r4, r0
   13cc4:	ldr	r0, [r6, #4]
   13cc8:	bl	19328 <__assert_fail@plt+0x7f14>
   13ccc:	mov	r1, r5
   13cd0:	mov	r3, r4
   13cd4:	ldr	r2, [pc, #-1092]	; 13898 <__assert_fail@plt+0x2484>
   13cd8:	str	r0, [sp]
   13cdc:	mov	r0, #1
   13ce0:	bl	1121c <error@plt>
   13ce4:	str	r7, [sp, #48]	; 0x30
   13ce8:	b	12a88 <__assert_fail@plt+0x1674>
   13cec:	bl	112dc <__errno_location@plt>
   13cf0:	mov	r2, #5
   13cf4:	ldr	r1, [pc, #-1120]	; 1389c <__assert_fail@plt+0x2488>
   13cf8:	ldr	r4, [r0]
   13cfc:	mov	r0, #0
   13d00:	bl	11174 <dcgettext@plt>
   13d04:	mov	r2, r6
   13d08:	mov	r1, #3
   13d0c:	mov	r5, r0
   13d10:	mov	r0, #0
   13d14:	bl	191a4 <__assert_fail@plt+0x7d90>
   13d18:	mov	r2, r5
   13d1c:	mov	r1, r4
   13d20:	mov	r3, r0
   13d24:	mov	r0, #1
   13d28:	bl	1121c <error@plt>
   13d2c:	bl	112dc <__errno_location@plt>
   13d30:	mov	r2, #5
   13d34:	ldr	r1, [pc, #-1180]	; 138a0 <__assert_fail@plt+0x248c>
   13d38:	b	1301c <__assert_fail@plt+0x1c08>
   13d3c:	ldr	r1, [sp, #84]	; 0x54
   13d40:	ldr	r3, [r1, #48]	; 0x30
   13d44:	cmn	r3, #1
   13d48:	moveq	r9, r2
   13d4c:	beq	129d0 <__assert_fail@plt+0x15bc>
   13d50:	ldr	r3, [r1, #40]	; 0x28
   13d54:	and	r3, r3, #61440	; 0xf000
   13d58:	subs	r9, r3, #32768	; 0x8000
   13d5c:	movne	r9, #1
   13d60:	b	129d0 <__assert_fail@plt+0x15bc>
   13d64:	mov	fp, #0
   13d68:	mov	lr, #0
   13d6c:	pop	{r1}		; (ldr r1, [sp], #4)
   13d70:	mov	r2, sp
   13d74:	push	{r2}		; (str r2, [sp, #-4]!)
   13d78:	push	{r0}		; (str r0, [sp, #-4]!)
   13d7c:	ldr	ip, [pc, #16]	; 13d94 <__assert_fail@plt+0x2980>
   13d80:	push	{ip}		; (str ip, [sp, #-4]!)
   13d84:	ldr	r0, [pc, #12]	; 13d98 <__assert_fail@plt+0x2984>
   13d88:	ldr	r3, [pc, #12]	; 13d9c <__assert_fail@plt+0x2988>
   13d8c:	bl	1124c <__libc_start_main@plt>
   13d90:	bl	113f0 <abort@plt>
   13d94:	andeq	fp, r1, ip, asr r4
   13d98:	andeq	r1, r1, r0, lsr #8
   13d9c:	strdeq	fp, [r1], -ip
   13da0:	ldr	r3, [pc, #20]	; 13dbc <__assert_fail@plt+0x29a8>
   13da4:	ldr	r2, [pc, #20]	; 13dc0 <__assert_fail@plt+0x29ac>
   13da8:	add	r3, pc, r3
   13dac:	ldr	r2, [r3, r2]
   13db0:	cmp	r2, #0
   13db4:	bxeq	lr
   13db8:	b	11264 <__gmon_start__@plt>
   13dbc:	andeq	sl, r1, r0, asr r2
   13dc0:	andeq	r0, r0, r8, lsr r1
   13dc4:	ldr	r3, [pc, #28]	; 13de8 <__assert_fail@plt+0x29d4>
   13dc8:	ldr	r0, [pc, #28]	; 13dec <__assert_fail@plt+0x29d8>
   13dcc:	sub	r3, r3, r0
   13dd0:	cmp	r3, #6
   13dd4:	bxls	lr
   13dd8:	ldr	r3, [pc, #16]	; 13df0 <__assert_fail@plt+0x29dc>
   13ddc:	cmp	r3, #0
   13de0:	bxeq	lr
   13de4:	bx	r3
   13de8:	andeq	lr, r2, pc, lsr #3
   13dec:	andeq	lr, r2, ip, lsr #3
   13df0:	andeq	r0, r0, r0
   13df4:	ldr	r1, [pc, #36]	; 13e20 <__assert_fail@plt+0x2a0c>
   13df8:	ldr	r0, [pc, #36]	; 13e24 <__assert_fail@plt+0x2a10>
   13dfc:	sub	r1, r1, r0
   13e00:	asr	r1, r1, #2
   13e04:	add	r1, r1, r1, lsr #31
   13e08:	asrs	r1, r1, #1
   13e0c:	bxeq	lr
   13e10:	ldr	r3, [pc, #16]	; 13e28 <__assert_fail@plt+0x2a14>
   13e14:	cmp	r3, #0
   13e18:	bxeq	lr
   13e1c:	bx	r3
   13e20:	andeq	lr, r2, ip, lsr #3
   13e24:	andeq	lr, r2, ip, lsr #3
   13e28:	andeq	r0, r0, r0
   13e2c:	push	{r4, lr}
   13e30:	ldr	r4, [pc, #24]	; 13e50 <__assert_fail@plt+0x2a3c>
   13e34:	ldrb	r3, [r4]
   13e38:	cmp	r3, #0
   13e3c:	popne	{r4, pc}
   13e40:	bl	13dc4 <__assert_fail@plt+0x29b0>
   13e44:	mov	r3, #1
   13e48:	strb	r3, [r4]
   13e4c:	pop	{r4, pc}
   13e50:	andeq	lr, r2, ip, asr #3
   13e54:	ldr	r0, [pc, #40]	; 13e84 <__assert_fail@plt+0x2a70>
   13e58:	ldr	r3, [r0]
   13e5c:	cmp	r3, #0
   13e60:	bne	13e68 <__assert_fail@plt+0x2a54>
   13e64:	b	13df4 <__assert_fail@plt+0x29e0>
   13e68:	ldr	r3, [pc, #24]	; 13e88 <__assert_fail@plt+0x2a74>
   13e6c:	cmp	r3, #0
   13e70:	beq	13e64 <__assert_fail@plt+0x2a50>
   13e74:	push	{r4, lr}
   13e78:	blx	r3
   13e7c:	pop	{r4, lr}
   13e80:	b	13df4 <__assert_fail@plt+0x29e0>
   13e84:	andeq	sp, r2, r4, lsl pc
   13e88:	andeq	r0, r0, r0
   13e8c:	push	{r4, lr}
   13e90:	ldr	r0, [r0, #60]	; 0x3c
   13e94:	bl	1af54 <__assert_fail@plt+0x9b40>
   13e98:	mov	r0, r1
   13e9c:	pop	{r4, pc}
   13ea0:	ldr	r0, [r0, #60]	; 0x3c
   13ea4:	ldr	r3, [r1, #60]	; 0x3c
   13ea8:	sub	r0, r0, r3
   13eac:	clz	r0, r0
   13eb0:	lsr	r0, r0, #5
   13eb4:	bx	lr
   13eb8:	push	{r4, lr}
   13ebc:	mov	r4, r0
   13ec0:	ldr	r1, [pc, #32]	; 13ee8 <__assert_fail@plt+0x2ad4>
   13ec4:	bl	110cc <strcmp@plt>
   13ec8:	cmp	r0, #0
   13ecc:	beq	13ed8 <__assert_fail@plt+0x2ac4>
   13ed0:	mov	r0, r4
   13ed4:	pop	{r4, pc}
   13ed8:	mov	r2, #5
   13edc:	ldr	r1, [pc, #8]	; 13eec <__assert_fail@plt+0x2ad8>
   13ee0:	pop	{r4, lr}
   13ee4:	b	11174 <dcgettext@plt>
   13ee8:	ldrdeq	fp, [r1], -r8
   13eec:	ldrdeq	fp, [r1], -ip
   13ef0:	add	r2, r0, #1
   13ef4:	cmp	r2, #1
   13ef8:	bxls	lr
   13efc:	push	{r4, r5, r6, r7, lr}
   13f00:	sub	sp, sp, #12
   13f04:	mov	r4, r0
   13f08:	mov	r5, r1
   13f0c:	bl	113fc <close@plt>
   13f10:	cmp	r0, #0
   13f14:	bne	13f20 <__assert_fail@plt+0x2b0c>
   13f18:	add	sp, sp, #12
   13f1c:	pop	{r4, r5, r6, r7, pc}
   13f20:	bl	112dc <__errno_location@plt>
   13f24:	mov	r2, #5
   13f28:	ldr	r1, [pc, #56]	; 13f68 <__assert_fail@plt+0x2b54>
   13f2c:	ldr	r7, [r0]
   13f30:	mov	r0, #0
   13f34:	bl	11174 <dcgettext@plt>
   13f38:	mov	r1, r5
   13f3c:	mov	r6, r0
   13f40:	mov	r0, #4
   13f44:	bl	190e8 <__assert_fail@plt+0x7cd4>
   13f48:	mov	r1, r7
   13f4c:	mov	r2, r6
   13f50:	str	r4, [sp]
   13f54:	mov	r3, r0
   13f58:	mov	r0, #0
   13f5c:	bl	1121c <error@plt>
   13f60:	add	sp, sp, #12
   13f64:	pop	{r4, r5, r6, r7, pc}
   13f68:	andeq	fp, r1, ip, ror #11
   13f6c:	push	{r4, r5, r6, lr}
   13f70:	subs	r4, r1, #0
   13f74:	popeq	{r4, r5, r6, pc}
   13f78:	ldr	r5, [pc, #88]	; 13fd8 <__assert_fail@plt+0x2bc4>
   13f7c:	mov	r2, r4
   13f80:	mov	r1, #1
   13f84:	ldr	r3, [r5]
   13f88:	bl	11150 <fwrite_unlocked@plt>
   13f8c:	cmp	r4, r0
   13f90:	popls	{r4, r5, r6, pc}
   13f94:	ldr	r0, [r5]
   13f98:	bl	113a8 <clearerr_unlocked@plt>
   13f9c:	bl	112dc <__errno_location@plt>
   13fa0:	mov	r2, #5
   13fa4:	ldr	r1, [pc, #48]	; 13fdc <__assert_fail@plt+0x2bc8>
   13fa8:	ldr	r4, [r0]
   13fac:	mov	r0, #0
   13fb0:	bl	11174 <dcgettext@plt>
   13fb4:	ldr	r1, [pc, #36]	; 13fe0 <__assert_fail@plt+0x2bcc>
   13fb8:	mov	r5, r0
   13fbc:	mov	r0, #4
   13fc0:	bl	190e8 <__assert_fail@plt+0x7cd4>
   13fc4:	mov	r2, r5
   13fc8:	mov	r1, r4
   13fcc:	mov	r3, r0
   13fd0:	mov	r0, #1
   13fd4:	bl	1121c <error@plt>
   13fd8:	andeq	lr, r2, r4, asr #3
   13fdc:	andeq	fp, r1, r0, lsl #12
   13fe0:	andeq	fp, r1, r4, lsl r6
   13fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fe8:	sub	sp, sp, #8192	; 0x2000
   13fec:	sub	sp, sp, #12
   13ff0:	mov	r5, r3
   13ff4:	mov	r4, r2
   13ff8:	orrs	r3, r4, r5
   13ffc:	add	r3, sp, #8192	; 0x2000
   14000:	add	r3, r3, #48	; 0x30
   14004:	str	r0, [sp, #4]
   14008:	ldr	r8, [r3]
   1400c:	beq	1408c <__assert_fail@plt+0x2c78>
   14010:	ldr	fp, [pc, #232]	; 14100 <__assert_fail@plt+0x2cec>
   14014:	mov	r9, r1
   14018:	mov	sl, #8192	; 0x2000
   1401c:	mov	r2, sl
   14020:	add	r1, sp, #8
   14024:	mov	r0, r9
   14028:	bl	19340 <__assert_fail@plt+0x7f2c>
   1402c:	cmp	r0, #0
   14030:	beq	140b4 <__assert_fail@plt+0x2ca0>
   14034:	cmn	r0, #1
   14038:	beq	140bc <__assert_fail@plt+0x2ca8>
   1403c:	ldrd	r2, [r8]
   14040:	ldrb	r7, [fp]
   14044:	add	r1, sp, #8
   14048:	adds	r2, r2, r0
   1404c:	add	r6, r1, r0
   14050:	adc	r3, r3, #0
   14054:	mov	r0, r1
   14058:	strd	r2, [r8]
   1405c:	sub	r2, r6, r0
   14060:	mov	r1, r7
   14064:	bl	11330 <memchr@plt>
   14068:	cmp	r0, #0
   1406c:	beq	1401c <__assert_fail@plt+0x2c08>
   14070:	subs	r4, r4, #1
   14074:	sbc	r5, r5, #0
   14078:	orrs	r3, r4, r5
   1407c:	add	r0, r0, #1
   14080:	bne	1405c <__assert_fail@plt+0x2c48>
   14084:	cmp	r6, r0
   14088:	bhi	1409c <__assert_fail@plt+0x2c88>
   1408c:	mov	r0, #0
   14090:	add	sp, sp, #8192	; 0x2000
   14094:	add	sp, sp, #12
   14098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1409c:	sub	r1, r6, r0
   140a0:	bl	13f6c <__assert_fail@plt+0x2b58>
   140a4:	mov	r0, #0
   140a8:	add	sp, sp, #8192	; 0x2000
   140ac:	add	sp, sp, #12
   140b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140b4:	mvn	r0, #0
   140b8:	b	14090 <__assert_fail@plt+0x2c7c>
   140bc:	bl	112dc <__errno_location@plt>
   140c0:	mov	r2, #5
   140c4:	ldr	r1, [pc, #56]	; 14104 <__assert_fail@plt+0x2cf0>
   140c8:	ldr	r4, [r0]
   140cc:	mov	r0, #0
   140d0:	bl	11174 <dcgettext@plt>
   140d4:	ldr	r1, [sp, #4]
   140d8:	mov	r5, r0
   140dc:	mov	r0, #4
   140e0:	bl	190e8 <__assert_fail@plt+0x7cd4>
   140e4:	mov	r2, r5
   140e8:	mov	r1, r4
   140ec:	mov	r3, r0
   140f0:	mov	r0, #0
   140f4:	bl	1121c <error@plt>
   140f8:	mov	r0, #1
   140fc:	b	14090 <__assert_fail@plt+0x2c7c>
   14100:	ldrdeq	lr, [r2], -r0
   14104:	andeq	fp, r1, r4, lsr #12
   14108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1410c:	sub	sp, sp, #8192	; 0x2000
   14110:	sub	sp, sp, #12
   14114:	add	r3, sp, #8192	; 0x2000
   14118:	add	r3, r3, #48	; 0x30
   1411c:	str	r1, [sp, #4]
   14120:	ldrd	r6, [r3]
   14124:	mov	sl, #0
   14128:	mov	fp, #0
   1412c:	mov	r4, r0
   14130:	mov	r5, r2
   14134:	b	141f0 <__assert_fail@plt+0x2ddc>
   14138:	cmp	r0, #0
   1413c:	beq	14228 <__assert_fail@plt+0x2e14>
   14140:	cmp	r4, #0
   14144:	beq	14180 <__assert_fail@plt+0x2d6c>
   14148:	ldr	r3, [pc, #288]	; 14270 <__assert_fail@plt+0x2e5c>
   1414c:	ldr	ip, [pc, #288]	; 14274 <__assert_fail@plt+0x2e60>
   14150:	ldr	r0, [pc, #288]	; 14278 <__assert_fail@plt+0x2e64>
   14154:	ldrb	r2, [r3]
   14158:	ldr	r1, [pc, #284]	; 1427c <__assert_fail@plt+0x2e68>
   1415c:	ldr	r3, [sp, #4]
   14160:	cmp	r2, #0
   14164:	moveq	r0, ip
   14168:	mov	r2, r0
   1416c:	mov	r0, #1
   14170:	bl	11300 <__printf_chk@plt>
   14174:	ldr	r2, [pc, #244]	; 14270 <__assert_fail@plt+0x2e5c>
   14178:	mov	r3, #0
   1417c:	strb	r3, [r2]
   14180:	mov	r1, r8
   14184:	add	r0, sp, #8
   14188:	bl	13f6c <__assert_fail@plt+0x2b58>
   1418c:	add	ip, sp, #8192	; 0x2000
   14190:	add	ip, ip, #48	; 0x30
   14194:	adds	sl, sl, r8
   14198:	mov	r2, r8
   1419c:	ldrd	r8, [ip]
   141a0:	mov	r3, #0
   141a4:	mvn	r1, #0
   141a8:	mvn	r0, #0
   141ac:	adc	fp, fp, r3
   141b0:	cmp	r9, r1
   141b4:	cmpeq	r8, r0
   141b8:	beq	141ec <__assert_fail@plt+0x2dd8>
   141bc:	subs	r6, r6, r2
   141c0:	sbc	r7, r7, r3
   141c4:	orrs	r3, r6, r7
   141c8:	mvn	r1, #0
   141cc:	moveq	r3, #1
   141d0:	movne	r3, #0
   141d4:	mvn	r0, #1
   141d8:	cmp	r9, r1
   141dc:	cmpeq	r8, r0
   141e0:	orreq	r3, r3, #1
   141e4:	cmp	r3, #0
   141e8:	bne	14228 <__assert_fail@plt+0x2e14>
   141ec:	mov	r4, #0
   141f0:	cmp	r7, #0
   141f4:	cmpeq	r6, #8192	; 0x2000
   141f8:	mov	r2, r6
   141fc:	add	r1, sp, #8
   14200:	movhi	r2, #8192	; 0x2000
   14204:	mov	r0, r5
   14208:	bl	19340 <__assert_fail@plt+0x7f2c>
   1420c:	cmn	r0, #1
   14210:	mov	r8, r0
   14214:	bne	14138 <__assert_fail@plt+0x2d24>
   14218:	bl	112dc <__errno_location@plt>
   1421c:	ldr	r4, [r0]
   14220:	cmp	r4, #11
   14224:	bne	1423c <__assert_fail@plt+0x2e28>
   14228:	mov	r0, sl
   1422c:	mov	r1, fp
   14230:	add	sp, sp, #8192	; 0x2000
   14234:	add	sp, sp, #12
   14238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1423c:	mov	r2, #5
   14240:	ldr	r1, [pc, #56]	; 14280 <__assert_fail@plt+0x2e6c>
   14244:	mov	r0, #0
   14248:	bl	11174 <dcgettext@plt>
   1424c:	ldr	r1, [sp, #4]
   14250:	mov	r5, r0
   14254:	mov	r0, #4
   14258:	bl	190e8 <__assert_fail@plt+0x7cd4>
   1425c:	mov	r2, r5
   14260:	mov	r1, r4
   14264:	mov	r3, r0
   14268:	mov	r0, #1
   1426c:	bl	1121c <error@plt>
   14270:	andeq	lr, r2, r8, asr #2
   14274:	andeq	fp, r1, r4, asr #12
   14278:	andeq	ip, r1, ip, lsr #2
   1427c:	andeq	fp, r1, r8, lsr r6
   14280:	andeq	fp, r1, r4, lsr #12
   14284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14288:	sub	sp, sp, #8192	; 0x2000
   1428c:	mov	r5, r3
   14290:	sub	sp, sp, #4
   14294:	mov	r4, r2
   14298:	orrs	r3, r4, r5
   1429c:	add	r3, sp, #8192	; 0x2000
   142a0:	add	r3, r3, #40	; 0x28
   142a4:	ldr	r8, [r3]
   142a8:	beq	14328 <__assert_fail@plt+0x2f14>
   142ac:	mov	fp, r0
   142b0:	mov	r9, r1
   142b4:	mov	sl, #8192	; 0x2000
   142b8:	b	142f0 <__assert_fail@plt+0x2edc>
   142bc:	cmn	r0, #1
   142c0:	beq	14338 <__assert_fail@plt+0x2f24>
   142c4:	ldrd	r2, [r8]
   142c8:	adds	r2, r2, r0
   142cc:	adc	r3, r3, r7
   142d0:	cmp	r7, r5
   142d4:	cmpeq	r0, r4
   142d8:	strd	r2, [r8]
   142dc:	bhi	1431c <__assert_fail@plt+0x2f08>
   142e0:	subs	r4, r4, r0
   142e4:	sbc	r5, r5, r7
   142e8:	orrs	r3, r4, r5
   142ec:	beq	14328 <__assert_fail@plt+0x2f14>
   142f0:	mov	r2, sl
   142f4:	mov	r1, sp
   142f8:	mov	r0, r9
   142fc:	bl	19340 <__assert_fail@plt+0x7f2c>
   14300:	mov	r7, #0
   14304:	cmp	r0, #0
   14308:	bne	142bc <__assert_fail@plt+0x2ea8>
   1430c:	mvn	r0, #0
   14310:	add	sp, sp, #8192	; 0x2000
   14314:	add	sp, sp, #4
   14318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1431c:	sub	r1, r0, r4
   14320:	add	r0, sp, r4
   14324:	bl	13f6c <__assert_fail@plt+0x2b58>
   14328:	mov	r0, #0
   1432c:	add	sp, sp, #8192	; 0x2000
   14330:	add	sp, sp, #4
   14334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14338:	bl	112dc <__errno_location@plt>
   1433c:	mov	r2, #5
   14340:	ldr	r1, [pc, #60]	; 14384 <__assert_fail@plt+0x2f70>
   14344:	ldr	r4, [r0]
   14348:	mov	r0, #0
   1434c:	bl	11174 <dcgettext@plt>
   14350:	mov	r1, fp
   14354:	mov	r5, r0
   14358:	mov	r0, #4
   1435c:	bl	190e8 <__assert_fail@plt+0x7cd4>
   14360:	mov	r2, r5
   14364:	mov	r1, r4
   14368:	mov	r3, r0
   1436c:	mov	r0, #0
   14370:	bl	1121c <error@plt>
   14374:	mov	r0, #1
   14378:	add	sp, sp, #8192	; 0x2000
   1437c:	add	sp, sp, #4
   14380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14384:	andeq	fp, r1, r4, lsr #12
   14388:	push	{r4, r5, r6, r7, lr}
   1438c:	sub	sp, sp, #36	; 0x24
   14390:	mov	r7, r3
   14394:	ldr	r4, [sp, #56]	; 0x38
   14398:	mov	r6, r2
   1439c:	str	r4, [sp]
   143a0:	bl	111ec <lseek64@plt>
   143a4:	cmp	r0, #0
   143a8:	sbcs	r3, r1, #0
   143ac:	blt	143b8 <__assert_fail@plt+0x2fa4>
   143b0:	add	sp, sp, #36	; 0x24
   143b4:	pop	{r4, r5, r6, r7, pc}
   143b8:	mov	r0, r6
   143bc:	mov	r1, r7
   143c0:	add	r2, sp, #8
   143c4:	bl	17338 <__assert_fail@plt+0x5f24>
   143c8:	cmp	r4, #1
   143cc:	mov	r5, r0
   143d0:	beq	1447c <__assert_fail@plt+0x3068>
   143d4:	cmp	r4, #2
   143d8:	beq	14434 <__assert_fail@plt+0x3020>
   143dc:	cmp	r4, #0
   143e0:	beq	143e8 <__assert_fail@plt+0x2fd4>
   143e4:	bl	113f0 <abort@plt>
   143e8:	bl	112dc <__errno_location@plt>
   143ec:	mov	r2, #5
   143f0:	ldr	r1, [pc, #148]	; 1448c <__assert_fail@plt+0x3078>
   143f4:	ldr	r7, [r0]
   143f8:	mov	r0, r4
   143fc:	bl	11174 <dcgettext@plt>
   14400:	ldr	r2, [sp, #60]	; 0x3c
   14404:	mov	r1, #3
   14408:	mov	r6, r0
   1440c:	mov	r0, r4
   14410:	bl	191a4 <__assert_fail@plt+0x7d90>
   14414:	mov	r1, r7
   14418:	mov	r2, r6
   1441c:	str	r5, [sp]
   14420:	mov	r3, r0
   14424:	mov	r0, r4
   14428:	bl	1121c <error@plt>
   1442c:	mov	r0, #1
   14430:	bl	11294 <exit@plt>
   14434:	bl	112dc <__errno_location@plt>
   14438:	ldr	r1, [pc, #80]	; 14490 <__assert_fail@plt+0x307c>
   1443c:	mov	r2, #5
   14440:	ldr	r6, [r0]
   14444:	mov	r0, #0
   14448:	bl	11174 <dcgettext@plt>
   1444c:	ldr	r2, [sp, #60]	; 0x3c
   14450:	mov	r1, #3
   14454:	mov	r4, r0
   14458:	mov	r0, #0
   1445c:	bl	191a4 <__assert_fail@plt+0x7d90>
   14460:	mov	r1, r6
   14464:	mov	r2, r4
   14468:	str	r5, [sp]
   1446c:	mov	r3, r0
   14470:	mov	r0, #0
   14474:	bl	1121c <error@plt>
   14478:	b	1442c <__assert_fail@plt+0x3018>
   1447c:	bl	112dc <__errno_location@plt>
   14480:	mov	r2, #5
   14484:	ldr	r1, [pc, #8]	; 14494 <__assert_fail@plt+0x3080>
   14488:	b	14440 <__assert_fail@plt+0x302c>
   1448c:	andeq	fp, r1, r8, asr #12
   14490:	muleq	r1, r0, r6
   14494:	andeq	fp, r1, r8, ror #12
   14498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1449c:	sub	sp, sp, #8192	; 0x2000
   144a0:	mov	r5, r3
   144a4:	sub	sp, sp, #28
   144a8:	mov	r4, r2
   144ac:	orrs	r3, r4, r5
   144b0:	add	r3, sp, #8256	; 0x2040
   144b4:	add	r3, r3, #16
   144b8:	ldr	fp, [r3]
   144bc:	beq	146f8 <__assert_fail@plt+0x32e4>
   144c0:	add	r3, sp, #8256	; 0x2040
   144c4:	mov	r6, r1
   144c8:	add	r3, r3, #8
   144cc:	add	r1, sp, #8256	; 0x2040
   144d0:	ldrd	r2, [r3]
   144d4:	mov	r7, r0
   144d8:	ldrd	r0, [r1]
   144dc:	ldr	r8, [pc, #696]	; 1479c <__assert_fail@plt+0x3388>
   144e0:	mov	r9, #0
   144e4:	subs	r2, r2, r0
   144e8:	sbc	r3, r3, r1
   144ec:	asr	r0, r3, #31
   144f0:	eor	r2, r2, r0
   144f4:	subs	r2, r2, r0
   144f8:	add	r3, sp, #8256	; 0x2040
   144fc:	and	r2, r2, r8
   14500:	add	r3, r3, #8
   14504:	eor	r2, r2, r0
   14508:	subs	r0, r2, r0
   1450c:	ldrd	r2, [r3]
   14510:	cmp	r0, #0
   14514:	mov	sl, r0
   14518:	moveq	r0, #8192	; 0x2000
   1451c:	movne	r1, #0
   14520:	moveq	r1, #0
   14524:	moveq	sl, #8192	; 0x2000
   14528:	subs	r2, r2, r0
   1452c:	sbc	r3, r3, r1
   14530:	str	r7, [sp, #4]
   14534:	str	r9, [sp]
   14538:	mov	r0, r6
   1453c:	add	r8, sp, #24
   14540:	strd	r2, [sp, #8]
   14544:	bl	14388 <__assert_fail@plt+0x2f74>
   14548:	mov	r2, sl
   1454c:	mov	r1, r8
   14550:	mov	r0, r6
   14554:	bl	19340 <__assert_fail@plt+0x7f2c>
   14558:	cmn	r0, #1
   1455c:	mov	sl, r0
   14560:	beq	1470c <__assert_fail@plt+0x32f8>
   14564:	mov	r3, #0
   14568:	mov	r1, r3
   1456c:	ldrd	r2, [sp, #8]
   14570:	strd	r0, [sp, #16]
   14574:	adds	r2, r2, r0
   14578:	adc	r3, r3, r1
   1457c:	cmp	r0, #0
   14580:	strd	r2, [fp]
   14584:	bne	146c0 <__assert_fail@plt+0x32ac>
   14588:	add	r1, sp, #8256	; 0x2040
   1458c:	ldrd	r2, [sp, #8]
   14590:	ldrd	r0, [r1]
   14594:	cmp	r3, r1
   14598:	cmpeq	r2, r0
   1459c:	beq	1474c <__assert_fail@plt+0x3338>
   145a0:	ldrd	r2, [sp, #8]
   145a4:	mov	r9, #0
   145a8:	str	r7, [sp, #4]
   145ac:	subs	r2, r2, #8192	; 0x2000
   145b0:	sbc	r3, r3, #0
   145b4:	str	r9, [sp]
   145b8:	mov	r0, r6
   145bc:	strd	r2, [sp, #8]
   145c0:	bl	14388 <__assert_fail@plt+0x2f74>
   145c4:	mov	r2, #8192	; 0x2000
   145c8:	mov	r1, r8
   145cc:	mov	r0, r6
   145d0:	bl	19340 <__assert_fail@plt+0x7f2c>
   145d4:	cmn	r0, #1
   145d8:	mov	sl, r0
   145dc:	beq	1470c <__assert_fail@plt+0x32f8>
   145e0:	mov	r3, #0
   145e4:	mov	r1, r3
   145e8:	ldrd	r2, [sp, #8]
   145ec:	strd	r0, [sp, #16]
   145f0:	adds	r2, r2, r0
   145f4:	adc	r3, r3, r1
   145f8:	cmp	r0, #0
   145fc:	strd	r2, [fp]
   14600:	beq	146f8 <__assert_fail@plt+0x32e4>
   14604:	ldr	r3, [pc, #404]	; 147a0 <__assert_fail@plt+0x338c>
   14608:	ldrb	r9, [r3]
   1460c:	mov	r2, sl
   14610:	b	1461c <__assert_fail@plt+0x3208>
   14614:	cmp	r2, #0
   14618:	beq	146ec <__assert_fail@plt+0x32d8>
   1461c:	mov	r1, r9
   14620:	mov	r0, r8
   14624:	bl	112c4 <memrchr@plt>
   14628:	subs	r3, r0, #0
   1462c:	beq	14588 <__assert_fail@plt+0x3174>
   14630:	subs	r0, r4, #1
   14634:	sbc	r1, r5, #0
   14638:	orrs	r2, r4, r5
   1463c:	mov	r4, r0
   14640:	mov	r5, r1
   14644:	sub	r2, r3, r8
   14648:	bne	14614 <__assert_fail@plt+0x3200>
   1464c:	sub	r1, sl, #1
   14650:	sub	r1, r1, r2
   14654:	add	r0, r3, #1
   14658:	bl	13f6c <__assert_fail@plt+0x2b58>
   1465c:	ldrd	r2, [sp, #8]
   14660:	ldrd	r0, [sp, #16]
   14664:	mov	r9, #1
   14668:	adds	r0, r0, r2
   1466c:	adc	r1, r1, r3
   14670:	add	r3, sp, #8256	; 0x2040
   14674:	add	r3, r3, #8
   14678:	ldrd	r2, [r3]
   1467c:	subs	r2, r2, r0
   14680:	sbc	r3, r3, r1
   14684:	mov	r1, r3
   14688:	mov	r0, r2
   1468c:	mov	r2, r6
   14690:	strd	r0, [sp]
   14694:	mov	r1, r7
   14698:	mov	r0, #0
   1469c:	bl	14108 <__assert_fail@plt+0x2cf4>
   146a0:	ldrd	r2, [fp]
   146a4:	adds	r0, r0, r2
   146a8:	adc	r1, r1, r3
   146ac:	strd	r0, [fp]
   146b0:	mov	r0, r9
   146b4:	add	sp, sp, #8192	; 0x2000
   146b8:	add	sp, sp, #28
   146bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146c0:	ldr	r3, [pc, #216]	; 147a0 <__assert_fail@plt+0x338c>
   146c4:	add	r2, r8, r0
   146c8:	ldrb	r1, [r3]
   146cc:	ldrb	r2, [r2, #-1]
   146d0:	cmp	r2, r1
   146d4:	beq	146e0 <__assert_fail@plt+0x32cc>
   146d8:	subs	r4, r4, #1
   146dc:	sbc	r5, r5, #0
   146e0:	cmp	sl, #0
   146e4:	bne	14608 <__assert_fail@plt+0x31f4>
   146e8:	b	14588 <__assert_fail@plt+0x3174>
   146ec:	mov	r4, r0
   146f0:	mov	r5, r1
   146f4:	b	14588 <__assert_fail@plt+0x3174>
   146f8:	mov	r9, #1
   146fc:	mov	r0, r9
   14700:	add	sp, sp, #8192	; 0x2000
   14704:	add	sp, sp, #28
   14708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1470c:	bl	112dc <__errno_location@plt>
   14710:	mov	r2, #5
   14714:	ldr	r1, [pc, #136]	; 147a4 <__assert_fail@plt+0x3390>
   14718:	ldr	r4, [r0]
   1471c:	mov	r0, r9
   14720:	bl	11174 <dcgettext@plt>
   14724:	mov	r1, r7
   14728:	mov	r5, r0
   1472c:	mov	r0, #4
   14730:	bl	190e8 <__assert_fail@plt+0x7cd4>
   14734:	mov	r2, r5
   14738:	mov	r1, r4
   1473c:	mov	r3, r0
   14740:	mov	r0, r9
   14744:	bl	1121c <error@plt>
   14748:	b	146b0 <__assert_fail@plt+0x329c>
   1474c:	mov	r4, #0
   14750:	mov	r0, r6
   14754:	stm	sp, {r4, r7}
   14758:	bl	14388 <__assert_fail@plt+0x2f74>
   1475c:	add	r3, sp, #8256	; 0x2040
   14760:	add	r3, r3, #8
   14764:	mov	r0, r4
   14768:	ldrd	r4, [r3]
   1476c:	mov	r2, r6
   14770:	mov	r1, r7
   14774:	strd	r4, [sp]
   14778:	bl	14108 <__assert_fail@plt+0x2cf4>
   1477c:	ldrd	r2, [sp, #8]
   14780:	mov	r9, #1
   14784:	adds	r2, r2, r0
   14788:	adc	r3, r3, r1
   1478c:	mov	r0, r2
   14790:	mov	r1, r3
   14794:	strd	r0, [fp]
   14798:	b	146b0 <__assert_fail@plt+0x329c>
   1479c:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   147a0:	ldrdeq	lr, [r2], -r0
   147a4:	andeq	fp, r1, r4, lsr #12
   147a8:	ldr	r3, [r0, #48]	; 0x30
   147ac:	cmn	r3, #1
   147b0:	bxeq	lr
   147b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   147b8:	mov	r4, r0
   147bc:	sub	sp, sp, #116	; 0x74
   147c0:	ldr	r0, [r0]
   147c4:	mov	r5, r1
   147c8:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   147cc:	add	r2, sp, #8
   147d0:	ldr	r1, [r4, #48]	; 0x30
   147d4:	mov	r6, r0
   147d8:	mov	r0, #3
   147dc:	bl	111c8 <__fxstat64@plt>
   147e0:	subs	r7, r0, #0
   147e4:	bne	14850 <__assert_fail@plt+0x343c>
   147e8:	ldr	r3, [r4, #40]	; 0x28
   147ec:	and	r3, r3, #61440	; 0xf000
   147f0:	cmp	r3, #32768	; 0x8000
   147f4:	beq	148b8 <__assert_fail@plt+0x34a4>
   147f8:	ldr	r3, [pc, #388]	; 14984 <__assert_fail@plt+0x3570>
   147fc:	ldrb	r0, [r3, #1]
   14800:	cmp	r0, #0
   14804:	bne	14840 <__assert_fail@plt+0x342c>
   14808:	mvn	r8, #0
   1480c:	mvn	r9, #0
   14810:	ldr	r2, [r4, #48]	; 0x30
   14814:	mov	r1, r6
   14818:	strd	r8, [sp]
   1481c:	bl	14108 <__assert_fail@plt+0x2cf4>
   14820:	ldrd	r2, [r4, #8]
   14824:	adds	r2, r2, r0
   14828:	adc	r3, r3, r1
   1482c:	orrs	r1, r0, r1
   14830:	strd	r2, [r4, #8]
   14834:	bne	14878 <__assert_fail@plt+0x3464>
   14838:	add	sp, sp, #116	; 0x74
   1483c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14840:	ldr	r0, [r5]
   14844:	subs	r0, r0, r4
   14848:	movne	r0, #1
   1484c:	b	14808 <__assert_fail@plt+0x33f4>
   14850:	bl	112dc <__errno_location@plt>
   14854:	mov	r1, r6
   14858:	ldr	r3, [r0]
   1485c:	ldr	r0, [r4, #48]	; 0x30
   14860:	str	r3, [r4, #52]	; 0x34
   14864:	bl	13ef0 <__assert_fail@plt+0x2adc>
   14868:	mvn	r3, #0
   1486c:	str	r3, [r4, #48]	; 0x30
   14870:	add	sp, sp, #116	; 0x74
   14874:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14878:	ldr	r3, [pc, #264]	; 14988 <__assert_fail@plt+0x3574>
   1487c:	str	r4, [r5]
   14880:	ldr	r0, [r3]
   14884:	bl	111a4 <fflush_unlocked@plt>
   14888:	cmp	r0, #0
   1488c:	beq	14838 <__assert_fail@plt+0x3424>
   14890:	bl	112dc <__errno_location@plt>
   14894:	mov	r2, #5
   14898:	ldr	r1, [pc, #236]	; 1498c <__assert_fail@plt+0x3578>
   1489c:	ldr	r4, [r0]
   148a0:	mov	r0, #0
   148a4:	bl	11174 <dcgettext@plt>
   148a8:	mov	r1, r4
   148ac:	mov	r2, r0
   148b0:	mov	r0, #1
   148b4:	bl	1121c <error@plt>
   148b8:	ldrd	r8, [sp, #56]	; 0x38
   148bc:	ldrd	r2, [r4, #8]
   148c0:	cmp	r8, r2
   148c4:	sbcs	r1, r9, r3
   148c8:	blt	14928 <__assert_fail@plt+0x3514>
   148cc:	cmp	r9, r3
   148d0:	cmpeq	r8, r2
   148d4:	bne	147f8 <__assert_fail@plt+0x33e4>
   148d8:	ldr	r3, [r4, #16]
   148dc:	ldr	ip, [sp, #88]	; 0x58
   148e0:	ldr	r0, [sp, #92]	; 0x5c
   148e4:	cmp	ip, r3
   148e8:	ldr	r1, [r4, #20]
   148ec:	movle	r2, #0
   148f0:	movgt	r2, #1
   148f4:	cmp	ip, r3
   148f8:	rsbge	r2, r2, #0
   148fc:	rsblt	r2, r2, #1
   14900:	cmp	r0, r1
   14904:	movle	r3, #0
   14908:	movgt	r3, #1
   1490c:	cmp	r0, r1
   14910:	rsbge	r3, r3, #0
   14914:	rsblt	r3, r3, #1
   14918:	add	r3, r3, r2, lsl #1
   1491c:	cmp	r3, #0
   14920:	beq	14838 <__assert_fail@plt+0x3424>
   14924:	b	147f8 <__assert_fail@plt+0x33e4>
   14928:	mov	r2, #5
   1492c:	ldr	r1, [pc, #92]	; 14990 <__assert_fail@plt+0x357c>
   14930:	bl	11174 <dcgettext@plt>
   14934:	mov	r2, r6
   14938:	mov	r1, #3
   1493c:	mov	r8, r0
   14940:	mov	r0, r7
   14944:	bl	191a4 <__assert_fail@plt+0x7d90>
   14948:	mov	r2, r8
   1494c:	mov	r1, r7
   14950:	mov	r3, r0
   14954:	mov	r0, r7
   14958:	bl	1121c <error@plt>
   1495c:	ldr	r0, [r4, #48]	; 0x30
   14960:	mov	r2, #0
   14964:	mov	r3, #0
   14968:	str	r6, [sp, #4]
   1496c:	str	r7, [sp]
   14970:	bl	14388 <__assert_fail@plt+0x2f74>
   14974:	mov	r2, #0
   14978:	mov	r3, #0
   1497c:	strd	r2, [r4, #8]
   14980:	b	147f8 <__assert_fail@plt+0x33e4>
   14984:	ldrdeq	lr, [r2], -r0
   14988:	andeq	lr, r2, r4, asr #3
   1498c:	ldrdeq	fp, [r1], -r0
   14990:			; <UNDEFINED> instruction: 0x0001b6bc
   14994:	push	{r4, r5, r6, lr}
   14998:	sub	sp, sp, #88	; 0x58
   1499c:	mov	r5, r1
   149a0:	mov	r1, sp
   149a4:	bl	1109c <fstatfs64@plt>
   149a8:	cmp	r0, #0
   149ac:	beq	14a30 <__assert_fail@plt+0x361c>
   149b0:	bl	112dc <__errno_location@plt>
   149b4:	ldr	r4, [r0]
   149b8:	cmp	r4, #38	; 0x26
   149bc:	beq	14a24 <__assert_fail@plt+0x3610>
   149c0:	mov	r2, #5
   149c4:	ldr	r1, [pc, #1516]	; 14fb8 <__assert_fail@plt+0x3ba4>
   149c8:	mov	r0, #0
   149cc:	bl	11174 <dcgettext@plt>
   149d0:	mov	r1, r5
   149d4:	mov	r6, r0
   149d8:	mov	r0, #4
   149dc:	bl	190e8 <__assert_fail@plt+0x7cd4>
   149e0:	mov	r2, r6
   149e4:	mov	r1, r4
   149e8:	mov	r3, r0
   149ec:	mov	r0, #0
   149f0:	bl	1121c <error@plt>
   149f4:	mov	r0, #1
   149f8:	add	sp, sp, #88	; 0x58
   149fc:	pop	{r4, r5, r6, pc}
   14a00:	ldr	r2, [pc, #1460]	; 14fbc <__assert_fail@plt+0x3ba8>
   14a04:	cmp	r3, r2
   14a08:	beq	14c84 <__assert_fail@plt+0x3870>
   14a0c:	ldr	r2, [pc, #1452]	; 14fc0 <__assert_fail@plt+0x3bac>
   14a10:	cmp	r3, r2
   14a14:	beq	14c84 <__assert_fail@plt+0x3870>
   14a18:	ldr	r2, [pc, #1444]	; 14fc4 <__assert_fail@plt+0x3bb0>
   14a1c:	cmp	r3, r2
   14a20:	beq	14c84 <__assert_fail@plt+0x3870>
   14a24:	mov	r0, #1
   14a28:	add	sp, sp, #88	; 0x58
   14a2c:	pop	{r4, r5, r6, pc}
   14a30:	ldr	r3, [sp]
   14a34:	ldr	r2, [pc, #1420]	; 14fc8 <__assert_fail@plt+0x3bb4>
   14a38:	cmp	r3, r2
   14a3c:	beq	14c84 <__assert_fail@plt+0x3870>
   14a40:	bhi	14aa4 <__assert_fail@plt+0x3690>
   14a44:	ldr	r2, [pc, #1408]	; 14fcc <__assert_fail@plt+0x3bb8>
   14a48:	cmp	r3, r2
   14a4c:	bhi	14b4c <__assert_fail@plt+0x3738>
   14a50:	sub	r2, r2, #2
   14a54:	cmp	r3, r2
   14a58:	bcs	14c84 <__assert_fail@plt+0x3870>
   14a5c:	ldr	r2, [pc, #1388]	; 14fd0 <__assert_fail@plt+0x3bbc>
   14a60:	cmp	r3, r2
   14a64:	beq	14c84 <__assert_fail@plt+0x3870>
   14a68:	bhi	14b98 <__assert_fail@plt+0x3784>
   14a6c:	ldr	r2, [pc, #1376]	; 14fd4 <__assert_fail@plt+0x3bc0>
   14a70:	cmp	r3, r2
   14a74:	beq	14c84 <__assert_fail@plt+0x3870>
   14a78:	bhi	14d6c <__assert_fail@plt+0x3958>
   14a7c:	ldr	r2, [pc, #1364]	; 14fd8 <__assert_fail@plt+0x3bc4>
   14a80:	cmp	r3, r2
   14a84:	beq	14c84 <__assert_fail@plt+0x3870>
   14a88:	cmp	r3, #392	; 0x188
   14a8c:	bcs	14f4c <__assert_fail@plt+0x3b38>
   14a90:	cmp	r3, #47	; 0x2f
   14a94:	beq	14c84 <__assert_fail@plt+0x3870>
   14a98:	cmp	r3, #51	; 0x33
   14a9c:	bne	14a24 <__assert_fail@plt+0x3610>
   14aa0:	b	14c84 <__assert_fail@plt+0x3870>
   14aa4:	ldr	r2, [pc, #1328]	; 14fdc <__assert_fail@plt+0x3bc8>
   14aa8:	cmp	r3, r2
   14aac:	beq	14c84 <__assert_fail@plt+0x3870>
   14ab0:	bls	14b00 <__assert_fail@plt+0x36ec>
   14ab4:	ldr	r2, [pc, #1316]	; 14fe0 <__assert_fail@plt+0x3bcc>
   14ab8:	cmp	r3, r2
   14abc:	beq	14c84 <__assert_fail@plt+0x3870>
   14ac0:	bhi	14c10 <__assert_fail@plt+0x37fc>
   14ac4:	ldr	r2, [pc, #1304]	; 14fe4 <__assert_fail@plt+0x3bd0>
   14ac8:	cmp	r3, r2
   14acc:	beq	14c84 <__assert_fail@plt+0x3870>
   14ad0:	bls	14cb8 <__assert_fail@plt+0x38a4>
   14ad4:	ldr	r2, [pc, #1292]	; 14fe8 <__assert_fail@plt+0x3bd4>
   14ad8:	cmp	r3, r2
   14adc:	beq	14c84 <__assert_fail@plt+0x3870>
   14ae0:	bhi	14e38 <__assert_fail@plt+0x3a24>
   14ae4:	ldr	r2, [pc, #1280]	; 14fec <__assert_fail@plt+0x3bd8>
   14ae8:	cmp	r3, r2
   14aec:	beq	14c84 <__assert_fail@plt+0x3870>
   14af0:	ldr	r2, [pc, #1272]	; 14ff0 <__assert_fail@plt+0x3bdc>
   14af4:	cmp	r3, r2
   14af8:	bne	14a24 <__assert_fail@plt+0x3610>
   14afc:	b	14c84 <__assert_fail@plt+0x3870>
   14b00:	ldr	r2, [pc, #1260]	; 14ff4 <__assert_fail@plt+0x3be0>
   14b04:	cmp	r3, r2
   14b08:	beq	14c84 <__assert_fail@plt+0x3870>
   14b0c:	bhi	14bd4 <__assert_fail@plt+0x37c0>
   14b10:	ldr	r2, [pc, #1248]	; 14ff8 <__assert_fail@plt+0x3be4>
   14b14:	cmp	r3, r2
   14b18:	beq	14c84 <__assert_fail@plt+0x3870>
   14b1c:	bhi	14d98 <__assert_fail@plt+0x3984>
   14b20:	ldr	r2, [pc, #1236]	; 14ffc <__assert_fail@plt+0x3be8>
   14b24:	cmp	r3, r2
   14b28:	beq	14c84 <__assert_fail@plt+0x3870>
   14b2c:	bhi	14f2c <__assert_fail@plt+0x3b18>
   14b30:	ldr	r2, [pc, #1224]	; 15000 <__assert_fail@plt+0x3bec>
   14b34:	cmp	r3, r2
   14b38:	beq	14c84 <__assert_fail@plt+0x3870>
   14b3c:	ldr	r2, [pc, #1216]	; 15004 <__assert_fail@plt+0x3bf0>
   14b40:	cmp	r3, r2
   14b44:	bne	14a24 <__assert_fail@plt+0x3610>
   14b48:	b	14c84 <__assert_fail@plt+0x3870>
   14b4c:	ldr	r2, [pc, #1204]	; 15008 <__assert_fail@plt+0x3bf4>
   14b50:	cmp	r3, r2
   14b54:	beq	14c84 <__assert_fail@plt+0x3870>
   14b58:	bhi	14c4c <__assert_fail@plt+0x3838>
   14b5c:	ldr	r2, [pc, #1192]	; 1500c <__assert_fail@plt+0x3bf8>
   14b60:	cmp	r3, r2
   14b64:	beq	14c84 <__assert_fail@plt+0x3870>
   14b68:	bhi	14d40 <__assert_fail@plt+0x392c>
   14b6c:	ldr	r2, [pc, #1180]	; 15010 <__assert_fail@plt+0x3bfc>
   14b70:	cmp	r3, r2
   14b74:	beq	14c84 <__assert_fail@plt+0x3870>
   14b78:	bhi	14f00 <__assert_fail@plt+0x3aec>
   14b7c:	ldr	r2, [pc, #1168]	; 15014 <__assert_fail@plt+0x3c00>
   14b80:	cmp	r3, r2
   14b84:	beq	14c84 <__assert_fail@plt+0x3870>
   14b88:	add	r2, r2, #10
   14b8c:	cmp	r3, r2
   14b90:	bne	14a24 <__assert_fail@plt+0x3610>
   14b94:	b	14c84 <__assert_fail@plt+0x3870>
   14b98:	ldr	r2, [pc, #1144]	; 15018 <__assert_fail@plt+0x3c04>
   14b9c:	cmp	r3, r2
   14ba0:	beq	14c84 <__assert_fail@plt+0x3870>
   14ba4:	bls	14ce4 <__assert_fail@plt+0x38d0>
   14ba8:	ldr	r2, [pc, #1132]	; 1501c <__assert_fail@plt+0x3c08>
   14bac:	cmp	r3, r2
   14bb0:	beq	14c84 <__assert_fail@plt+0x3870>
   14bb4:	bhi	14e10 <__assert_fail@plt+0x39fc>
   14bb8:	ldr	r2, [pc, #1120]	; 15020 <__assert_fail@plt+0x3c0c>
   14bbc:	cmp	r3, r2
   14bc0:	beq	14c84 <__assert_fail@plt+0x3870>
   14bc4:	add	r2, r2, #22
   14bc8:	cmp	r3, r2
   14bcc:	bne	14a24 <__assert_fail@plt+0x3610>
   14bd0:	b	14c84 <__assert_fail@plt+0x3870>
   14bd4:	ldr	r2, [pc, #1096]	; 15024 <__assert_fail@plt+0x3c10>
   14bd8:	cmp	r3, r2
   14bdc:	beq	14c84 <__assert_fail@plt+0x3870>
   14be0:	bls	14d0c <__assert_fail@plt+0x38f8>
   14be4:	ldr	r2, [pc, #1084]	; 15028 <__assert_fail@plt+0x3c14>
   14be8:	cmp	r3, r2
   14bec:	beq	14c84 <__assert_fail@plt+0x3870>
   14bf0:	bhi	14e64 <__assert_fail@plt+0x3a50>
   14bf4:	ldr	r2, [pc, #1072]	; 1502c <__assert_fail@plt+0x3c18>
   14bf8:	cmp	r3, r2
   14bfc:	beq	14c84 <__assert_fail@plt+0x3870>
   14c00:	ldr	r2, [pc, #1064]	; 15030 <__assert_fail@plt+0x3c1c>
   14c04:	cmp	r3, r2
   14c08:	bne	14a24 <__assert_fail@plt+0x3610>
   14c0c:	b	14c84 <__assert_fail@plt+0x3870>
   14c10:	ldr	r2, [pc, #1052]	; 15034 <__assert_fail@plt+0x3c20>
   14c14:	cmp	r3, r2
   14c18:	beq	14c84 <__assert_fail@plt+0x3870>
   14c1c:	bls	14c8c <__assert_fail@plt+0x3878>
   14c20:	ldr	r2, [pc, #1040]	; 15038 <__assert_fail@plt+0x3c24>
   14c24:	cmp	r3, r2
   14c28:	beq	14c84 <__assert_fail@plt+0x3870>
   14c2c:	bhi	14a00 <__assert_fail@plt+0x35ec>
   14c30:	ldr	r2, [pc, #1028]	; 1503c <__assert_fail@plt+0x3c28>
   14c34:	cmp	r3, r2
   14c38:	beq	14c84 <__assert_fail@plt+0x3870>
   14c3c:	ldr	r2, [pc, #1020]	; 15040 <__assert_fail@plt+0x3c2c>
   14c40:	cmp	r3, r2
   14c44:	bne	14a24 <__assert_fail@plt+0x3610>
   14c48:	b	14c84 <__assert_fail@plt+0x3870>
   14c4c:	ldr	r2, [pc, #1008]	; 15044 <__assert_fail@plt+0x3c30>
   14c50:	cmp	r3, r2
   14c54:	beq	14c84 <__assert_fail@plt+0x3870>
   14c58:	bls	14dc4 <__assert_fail@plt+0x39b0>
   14c5c:	ldr	r2, [pc, #996]	; 15048 <__assert_fail@plt+0x3c34>
   14c60:	cmp	r3, r2
   14c64:	beq	14c84 <__assert_fail@plt+0x3870>
   14c68:	bhi	14de8 <__assert_fail@plt+0x39d4>
   14c6c:	ldr	r2, [pc, #984]	; 1504c <__assert_fail@plt+0x3c38>
   14c70:	cmp	r3, r2
   14c74:	beq	14c84 <__assert_fail@plt+0x3870>
   14c78:	ldr	r2, [pc, #976]	; 15050 <__assert_fail@plt+0x3c3c>
   14c7c:	cmp	r3, r2
   14c80:	bne	14a24 <__assert_fail@plt+0x3610>
   14c84:	mov	r0, #0
   14c88:	b	14a28 <__assert_fail@plt+0x3614>
   14c8c:	ldr	r2, [pc, #960]	; 15054 <__assert_fail@plt+0x3c40>
   14c90:	cmp	r3, r2
   14c94:	beq	14c84 <__assert_fail@plt+0x3870>
   14c98:	bhi	14ec4 <__assert_fail@plt+0x3ab0>
   14c9c:	add	r2, r2, #-268435456	; 0xf0000000
   14ca0:	cmp	r3, r2
   14ca4:	beq	14c84 <__assert_fail@plt+0x3870>
   14ca8:	ldr	r2, [pc, #936]	; 15058 <__assert_fail@plt+0x3c44>
   14cac:	cmp	r3, r2
   14cb0:	bne	14a24 <__assert_fail@plt+0x3610>
   14cb4:	b	14c84 <__assert_fail@plt+0x3870>
   14cb8:	ldr	r2, [pc, #924]	; 1505c <__assert_fail@plt+0x3c48>
   14cbc:	cmp	r3, r2
   14cc0:	beq	14c84 <__assert_fail@plt+0x3870>
   14cc4:	bhi	14ee0 <__assert_fail@plt+0x3acc>
   14cc8:	ldr	r2, [pc, #912]	; 15060 <__assert_fail@plt+0x3c4c>
   14ccc:	cmp	r3, r2
   14cd0:	beq	14c84 <__assert_fail@plt+0x3870>
   14cd4:	add	r2, r2, #2
   14cd8:	cmp	r3, r2
   14cdc:	bne	14a24 <__assert_fail@plt+0x3610>
   14ce0:	b	14c84 <__assert_fail@plt+0x3870>
   14ce4:	ldr	r2, [pc, #888]	; 15064 <__assert_fail@plt+0x3c50>
   14ce8:	cmp	r3, r2
   14cec:	beq	14c84 <__assert_fail@plt+0x3870>
   14cf0:	bhi	14e8c <__assert_fail@plt+0x3a78>
   14cf4:	cmp	r3, #16384	; 0x4000
   14cf8:	beq	14c84 <__assert_fail@plt+0x3870>
   14cfc:	sub	r2, r2, #2
   14d00:	cmp	r3, r2
   14d04:	bne	14a24 <__assert_fail@plt+0x3610>
   14d08:	b	14c84 <__assert_fail@plt+0x3870>
   14d0c:	ldr	r2, [pc, #852]	; 15068 <__assert_fail@plt+0x3c54>
   14d10:	cmp	r3, r2
   14d14:	beq	14c84 <__assert_fail@plt+0x3870>
   14d18:	bhi	14ea8 <__assert_fail@plt+0x3a94>
   14d1c:	sub	r2, r2, #8960	; 0x2300
   14d20:	sub	r2, r2, #1
   14d24:	cmp	r3, r2
   14d28:	beq	14c84 <__assert_fail@plt+0x3870>
   14d2c:	add	r2, r2, #5824	; 0x16c0
   14d30:	add	r2, r2, #57	; 0x39
   14d34:	cmp	r3, r2
   14d38:	bne	14a24 <__assert_fail@plt+0x3610>
   14d3c:	b	14c84 <__assert_fail@plt+0x3870>
   14d40:	ldr	r2, [pc, #804]	; 1506c <__assert_fail@plt+0x3c58>
   14d44:	cmp	r3, r2
   14d48:	beq	14c84 <__assert_fail@plt+0x3870>
   14d4c:	bhi	14f9c <__assert_fail@plt+0x3b88>
   14d50:	ldr	r2, [pc, #792]	; 15070 <__assert_fail@plt+0x3c5c>
   14d54:	cmp	r3, r2
   14d58:	beq	14c84 <__assert_fail@plt+0x3870>
   14d5c:	ldr	r2, [pc, #784]	; 15074 <__assert_fail@plt+0x3c60>
   14d60:	cmp	r3, r2
   14d64:	bne	14a24 <__assert_fail@plt+0x3610>
   14d68:	b	14c84 <__assert_fail@plt+0x3870>
   14d6c:	ldr	r2, [pc, #772]	; 15078 <__assert_fail@plt+0x3c64>
   14d70:	cmp	r3, r2
   14d74:	beq	14c84 <__assert_fail@plt+0x3870>
   14d78:	bhi	14f1c <__assert_fail@plt+0x3b08>
   14d7c:	ldr	r2, [pc, #760]	; 1507c <__assert_fail@plt+0x3c68>
   14d80:	cmp	r3, r2
   14d84:	beq	14c84 <__assert_fail@plt+0x3870>
   14d88:	add	r2, r2, #16
   14d8c:	cmp	r3, r2
   14d90:	bne	14a24 <__assert_fail@plt+0x3610>
   14d94:	b	14c84 <__assert_fail@plt+0x3870>
   14d98:	ldr	r2, [pc, #736]	; 15080 <__assert_fail@plt+0x3c6c>
   14d9c:	cmp	r3, r2
   14da0:	beq	14c84 <__assert_fail@plt+0x3870>
   14da4:	bhi	14f80 <__assert_fail@plt+0x3b6c>
   14da8:	ldr	r2, [pc, #724]	; 15084 <__assert_fail@plt+0x3c70>
   14dac:	cmp	r3, r2
   14db0:	beq	14c84 <__assert_fail@plt+0x3870>
   14db4:	ldr	r2, [pc, #716]	; 15088 <__assert_fail@plt+0x3c74>
   14db8:	cmp	r3, r2
   14dbc:	bne	14a24 <__assert_fail@plt+0x3610>
   14dc0:	b	14c84 <__assert_fail@plt+0x3870>
   14dc4:	ldr	r2, [pc, #704]	; 1508c <__assert_fail@plt+0x3c78>
   14dc8:	cmp	r3, r2
   14dcc:	beq	14c84 <__assert_fail@plt+0x3870>
   14dd0:	bhi	14f64 <__assert_fail@plt+0x3b50>
   14dd4:	ldr	r2, [pc, #692]	; 15090 <__assert_fail@plt+0x3c7c>
   14dd8:	add	r2, r3, r2
   14ddc:	cmp	r2, #3
   14de0:	bhi	14a24 <__assert_fail@plt+0x3610>
   14de4:	b	14c84 <__assert_fail@plt+0x3870>
   14de8:	ldr	r2, [pc, #676]	; 15094 <__assert_fail@plt+0x3c80>
   14dec:	cmp	r3, r2
   14df0:	beq	14c84 <__assert_fail@plt+0x3870>
   14df4:	ldr	r2, [pc, #668]	; 15098 <__assert_fail@plt+0x3c84>
   14df8:	cmp	r3, r2
   14dfc:	beq	14c84 <__assert_fail@plt+0x3870>
   14e00:	ldr	r2, [pc, #660]	; 1509c <__assert_fail@plt+0x3c88>
   14e04:	cmp	r3, r2
   14e08:	bne	14a24 <__assert_fail@plt+0x3610>
   14e0c:	b	14c84 <__assert_fail@plt+0x3870>
   14e10:	ldr	r2, [pc, #648]	; 150a0 <__assert_fail@plt+0x3c8c>
   14e14:	cmp	r3, r2
   14e18:	beq	14c84 <__assert_fail@plt+0x3870>
   14e1c:	ldr	r2, [pc, #640]	; 150a4 <__assert_fail@plt+0x3c90>
   14e20:	cmp	r3, r2
   14e24:	beq	14c84 <__assert_fail@plt+0x3870>
   14e28:	ldr	r2, [pc, #632]	; 150a8 <__assert_fail@plt+0x3c94>
   14e2c:	cmp	r3, r2
   14e30:	bne	14a24 <__assert_fail@plt+0x3610>
   14e34:	b	14c84 <__assert_fail@plt+0x3870>
   14e38:	ldr	r2, [pc, #620]	; 150ac <__assert_fail@plt+0x3c98>
   14e3c:	cmp	r3, r2
   14e40:	beq	14c84 <__assert_fail@plt+0x3870>
   14e44:	add	r2, r2, #65280	; 0xff00
   14e48:	add	r2, r2, #17
   14e4c:	cmp	r3, r2
   14e50:	beq	14c84 <__assert_fail@plt+0x3870>
   14e54:	ldr	r2, [pc, #596]	; 150b0 <__assert_fail@plt+0x3c9c>
   14e58:	cmp	r3, r2
   14e5c:	bne	14a24 <__assert_fail@plt+0x3610>
   14e60:	b	14c84 <__assert_fail@plt+0x3870>
   14e64:	ldr	r2, [pc, #584]	; 150b4 <__assert_fail@plt+0x3ca0>
   14e68:	cmp	r3, r2
   14e6c:	beq	14c84 <__assert_fail@plt+0x3870>
   14e70:	ldr	r2, [pc, #576]	; 150b8 <__assert_fail@plt+0x3ca4>
   14e74:	cmp	r3, r2
   14e78:	beq	14c84 <__assert_fail@plt+0x3870>
   14e7c:	ldr	r2, [pc, #568]	; 150bc <__assert_fail@plt+0x3ca8>
   14e80:	cmp	r3, r2
   14e84:	bne	14a24 <__assert_fail@plt+0x3610>
   14e88:	b	14c84 <__assert_fail@plt+0x3870>
   14e8c:	ldr	r2, [pc, #556]	; 150c0 <__assert_fail@plt+0x3cac>
   14e90:	cmp	r3, r2
   14e94:	beq	14c84 <__assert_fail@plt+0x3870>
   14e98:	ldr	r2, [pc, #548]	; 150c4 <__assert_fail@plt+0x3cb0>
   14e9c:	cmp	r3, r2
   14ea0:	bne	14a24 <__assert_fail@plt+0x3610>
   14ea4:	b	14c84 <__assert_fail@plt+0x3870>
   14ea8:	ldr	r2, [pc, #536]	; 150c8 <__assert_fail@plt+0x3cb4>
   14eac:	cmp	r3, r2
   14eb0:	beq	14c84 <__assert_fail@plt+0x3870>
   14eb4:	ldr	r2, [pc, #528]	; 150cc <__assert_fail@plt+0x3cb8>
   14eb8:	cmp	r3, r2
   14ebc:	bne	14a24 <__assert_fail@plt+0x3610>
   14ec0:	b	14c84 <__assert_fail@plt+0x3870>
   14ec4:	ldr	r2, [pc, #516]	; 150d0 <__assert_fail@plt+0x3cbc>
   14ec8:	cmp	r3, r2
   14ecc:	beq	14c84 <__assert_fail@plt+0x3870>
   14ed0:	ldr	r2, [pc, #508]	; 150d4 <__assert_fail@plt+0x3cc0>
   14ed4:	cmp	r3, r2
   14ed8:	bne	14a24 <__assert_fail@plt+0x3610>
   14edc:	b	14c84 <__assert_fail@plt+0x3870>
   14ee0:	ldr	r2, [pc, #496]	; 150d8 <__assert_fail@plt+0x3cc4>
   14ee4:	cmp	r3, r2
   14ee8:	beq	14c84 <__assert_fail@plt+0x3870>
   14eec:	add	r2, r2, #129024	; 0x1f800
   14ef0:	add	r2, r2, #600	; 0x258
   14ef4:	cmp	r3, r2
   14ef8:	bne	14a24 <__assert_fail@plt+0x3610>
   14efc:	b	14c84 <__assert_fail@plt+0x3870>
   14f00:	ldr	r2, [pc, #468]	; 150dc <__assert_fail@plt+0x3cc8>
   14f04:	cmp	r3, r2
   14f08:	beq	14c84 <__assert_fail@plt+0x3870>
   14f0c:	add	r2, r2, #524	; 0x20c
   14f10:	cmp	r3, r2
   14f14:	bne	14a24 <__assert_fail@plt+0x3610>
   14f18:	b	14c84 <__assert_fail@plt+0x3870>
   14f1c:	ldr	r2, [pc, #444]	; 150e0 <__assert_fail@plt+0x3ccc>
   14f20:	cmp	r3, r2
   14f24:	bne	14d88 <__assert_fail@plt+0x3974>
   14f28:	b	14c84 <__assert_fail@plt+0x3870>
   14f2c:	ldr	r2, [pc, #432]	; 150e4 <__assert_fail@plt+0x3cd0>
   14f30:	cmp	r3, r2
   14f34:	beq	14c84 <__assert_fail@plt+0x3870>
   14f38:	add	r2, r2, #194560	; 0x2f800
   14f3c:	add	r2, r2, #796	; 0x31c
   14f40:	cmp	r3, r2
   14f44:	bne	14a24 <__assert_fail@plt+0x3610>
   14f48:	b	14c84 <__assert_fail@plt+0x3870>
   14f4c:	cmp	r3, #1984	; 0x7c0
   14f50:	beq	14c84 <__assert_fail@plt+0x3870>
   14f54:	ldr	r2, [pc, #396]	; 150e8 <__assert_fail@plt+0x3cd4>
   14f58:	cmp	r3, r2
   14f5c:	bne	14a24 <__assert_fail@plt+0x3610>
   14f60:	b	14c84 <__assert_fail@plt+0x3870>
   14f64:	ldr	r2, [pc, #384]	; 150ec <__assert_fail@plt+0x3cd8>
   14f68:	cmp	r3, r2
   14f6c:	beq	14c84 <__assert_fail@plt+0x3870>
   14f70:	ldr	r2, [pc, #376]	; 150f0 <__assert_fail@plt+0x3cdc>
   14f74:	cmp	r3, r2
   14f78:	bne	14a24 <__assert_fail@plt+0x3610>
   14f7c:	b	14c84 <__assert_fail@plt+0x3870>
   14f80:	ldr	r2, [pc, #364]	; 150f4 <__assert_fail@plt+0x3ce0>
   14f84:	cmp	r3, r2
   14f88:	beq	14c84 <__assert_fail@plt+0x3870>
   14f8c:	ldr	r2, [pc, #356]	; 150f8 <__assert_fail@plt+0x3ce4>
   14f90:	cmp	r3, r2
   14f94:	bne	14a24 <__assert_fail@plt+0x3610>
   14f98:	b	14c84 <__assert_fail@plt+0x3870>
   14f9c:	ldr	r2, [pc, #344]	; 150fc <__assert_fail@plt+0x3ce8>
   14fa0:	cmp	r3, r2
   14fa4:	beq	14c84 <__assert_fail@plt+0x3870>
   14fa8:	add	r2, r2, #3
   14fac:	cmp	r3, r2
   14fb0:	bne	14a24 <__assert_fail@plt+0x3610>
   14fb4:	b	14c84 <__assert_fail@plt+0x3870>
   14fb8:	ldrdeq	fp, [r1], -ip
   14fbc:			; <UNDEFINED> instruction: 0xf97cff8c
   14fc0:			; <UNDEFINED> instruction: 0xf995e849
   14fc4:	vshr.s32	d18, d0, #11
   14fc8:	stmiacs	sp, {r0, r2, r6, r8, sl, fp, ip, sp}^
   14fcc:	andeq	r9, r0, r2, lsr #31
   14fd0:	andeq	r3, r0, r4, lsr r4
   14fd4:	andeq	r1, r0, sp, ror r3
   14fd8:	andeq	r0, r0, r7, lsl #3
   14fdc:	rsbvs	r6, r4, #494927872	; 0x1d800000
   14fe0:	ldrbtvc	r6, [r2], #-355	; 0xfffffe9d
   14fe4:	ldrbvs	r6, [r9, -r9, ror #18]
   14fe8:	mrcvs	6, 3, r6, cr3, cr3, {3}
   14fec:	ldmdavs	r9, {r1, r5, r8, ip}
   14ff0:	stclvs	15, cr6, [pc], #-448	; 14e38 <__assert_fail@plt+0x3a24>
   14ff4:	movtpl	r4, #21325	; 0x534d
   14ff8:	movtmi	r5, #7507	; 0x1d53
   14ffc:	cmpcc	r3, sl, asr #12
   15000:	blcs	feb5c7b0 <optarg@@GLIBC_2.4+0xfeb2e5e8>
   15004:	svccs	0x00c12fc1
   15008:			; <UNDEFINED> instruction: 0x012fd16d
   1500c:	andeq	r1, r1, r4, asr r9
   15010:	andeq	lr, r0, r1, asr pc
   15014:	strdeq	sl, [r0], -r5
   15018:	andeq	r4, r0, r8, asr r8
   1501c:	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   15020:	andeq	r4, r0, r4, asr #26
   15024:			; <UNDEFINED> instruction: 0x565a4653
   15028:	bpl	f2f7f0 <optarg@@GLIBC_2.4+0xf01628>
   1502c:	stmdapl	r9!, {r0, r3, r5, fp, ip, lr}
   15030:	stmdapl	r6, {r1, r6, r8, r9, ip, lr}^
   15034:	ldmdbgt	lr!, {r3, r5, r6, r8, pc}^
   15038:	rscs	lr, r5, r2, ror #3
   1503c:	bgt	fffa7888 <optarg@@GLIBC_2.4+0xfff796c0>
   15040:	logle<illegal precision>z	f0, f4
   15044:	teqne	r0, r4, asr r8
   15048:	stmibne	r0, {r1, r9}
   1504c:	cmnne	r6, #-1744830463	; 0x98000001
   15050:	strne	r3, [r1, #-838]	; 0xfffffcba
   15054:	strls	r5, [r4, #2294]	; 0x8f6
   15058:			; <UNDEFINED> instruction: 0x9123683e
   1505c:	cmnvs	r7, #112, 4
   15060:	rsbvs	r6, r5, #112, 10	; 0x1c000000
   15064:	andeq	r4, r0, r6
   15068:	movtpl	r5, #25678	; 0x644e
   1506c:	sbceq	pc, r0, lr, ror #31
   15070:	eoreq	lr, r7, fp, ror #1
   15074:	subeq	r4, r1, r3, asr sl
   15078:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   1507c:	andeq	r1, r0, pc, ror r3
   15080:	strbmi	r4, [sp, #-1101]	; 0xfffffbb3
   15084:	strbmi	r4, [sp], #-322	; 0xfffffebe
   15088:	ldrmi	ip, [sp, #-3368]!	; 0xfffff2d8
   1508c:	strbeq	r5, [r5, -r1, lsr #16]!
   15090:	vcmla.f32	q8, q0, d12[0], #90
   15094:			; <UNDEFINED> instruction: 0x2011bab0
   15098:	strcs	r1, [r5], #-2309	; 0xfffff6fb
   1509c:	blne	feb93bdc <optarg@@GLIBC_2.4+0xfeb65a14>
   150a0:			; <UNDEFINED> instruction: 0x000072b6
   150a4:	andeq	r9, r0, r0, ror #12
   150a8:	andeq	r7, r0, r5, ror r2
   150ac:	cmnvc	r1, #104, 6	; 0xa0000001
   150b0:	cmnvc	r3, #120586240	; 0x7300000
   150b4:	stclpl	13, cr2, [sl, #980]	; 0x3d4
   150b8:	cmnvs	r5, ip, ror #14
   150bc:	bpl	13e6a10 <optarg@@GLIBC_2.4+0x13b8848>
   150c0:	andeq	r4, r0, r4, asr #4
   150c4:	andeq	r4, r0, fp, lsr #16
   150c8:	movtpl	r4, #62283	; 0xf34b
   150cc:	ldrpl	r0, [r9], #-256	; 0xffffff00
   150d0:	blge	fee9b6a8 <optarg@@GLIBC_2.4+0xfee6d4e0>
   150d4:			; <UNDEFINED> instruction: 0xc7571590
   150d8:	strbtvs	r6, [r2], #-1824	; 0xfffff8e0
   150dc:	andeq	lr, r0, r3, asr pc
   150e0:	andeq	r2, r0, r8, ror #8
   150e4:	submi	r5, r6, #-1006632960	; 0xc4000000
   150e8:	andeq	r1, r0, r3, ror r3
   150ec:	stmdbeq	r4, {r2, r4, r5, r8, fp, ip}
   150f0:	bleq	feb5c8a0 <optarg@@GLIBC_2.4+0xfeb2e6d8>
   150f4:	ldrbmi	r4, [r8, #-1619]	; 0xfffff9ad
   150f8:	rsbpl	r4, r5, #1884160	; 0x1cc000
   150fc:			; <UNDEFINED> instruction: 0x01021994
   15100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15104:	mov	r4, r0
   15108:	ldr	r5, [r0]
   1510c:	sub	sp, sp, #124	; 0x7c
   15110:	mov	r0, r5
   15114:	mov	r6, r1
   15118:	ldr	r1, [pc, #1304]	; 15638 <__assert_fail@plt+0x4224>
   1511c:	bl	110cc <strcmp@plt>
   15120:	ldr	r8, [r4, #52]	; 0x34
   15124:	ldrb	r9, [r4, #46]	; 0x2e
   15128:	subs	r7, r0, #0
   1512c:	moveq	r3, r8
   15130:	moveq	r5, r7
   15134:	beq	15154 <__assert_fail@plt+0x3d40>
   15138:	cmp	r6, #0
   1513c:	mov	r0, r5
   15140:	moveq	r1, #2048	; 0x800
   15144:	movne	r1, #0
   15148:	bl	162ec <__assert_fail@plt+0x4ed8>
   1514c:	ldr	r3, [r4, #52]	; 0x34
   15150:	mov	r5, r0
   15154:	ldr	r2, [r4, #48]	; 0x30
   15158:	clz	r3, r3
   1515c:	cmn	r2, #1
   15160:	movne	r2, #0
   15164:	moveq	r2, #1
   15168:	lsr	r3, r3, #5
   1516c:	cmp	r2, r3
   15170:	beq	15610 <__assert_fail@plt+0x41fc>
   15174:	ldr	sl, [pc, #1216]	; 1563c <__assert_fail@plt+0x4228>
   15178:	adds	r2, r5, #1
   1517c:	movne	r2, #1
   15180:	ldrb	fp, [sl, #2]
   15184:	ldrb	r1, [sl, #3]
   15188:	eor	r0, fp, #1
   1518c:	orr	r2, r2, r0
   15190:	cmp	r1, #0
   15194:	strb	r2, [r4, #46]	; 0x2e
   15198:	beq	15300 <__assert_fail@plt+0x3eec>
   1519c:	cmn	r5, #1
   151a0:	beq	15268 <__assert_fail@plt+0x3e54>
   151a4:	add	r2, sp, #16
   151a8:	mov	r1, r5
   151ac:	mov	r0, #3
   151b0:	bl	111c8 <__fxstat64@plt>
   151b4:	cmp	r0, #0
   151b8:	blt	15268 <__assert_fail@plt+0x3e54>
   151bc:	ldr	r1, [sp, #32]
   151c0:	and	r2, r1, #61440	; 0xf000
   151c4:	sub	r2, r2, #4096	; 0x1000
   151c8:	bic	r2, r2, #4096	; 0x1000
   151cc:	and	r1, r1, #45056	; 0xb000
   151d0:	cmp	r2, #0
   151d4:	cmpne	r1, #32768	; 0x8000
   151d8:	movne	r2, #1
   151dc:	moveq	r2, #0
   151e0:	beq	15378 <__assert_fail@plt+0x3f64>
   151e4:	mvn	r1, #0
   151e8:	mov	r3, #0
   151ec:	cmp	fp, #0
   151f0:	str	r1, [r4, #52]	; 0x34
   151f4:	strb	r3, [r4, #46]	; 0x2e
   151f8:	bne	15568 <__assert_fail@plt+0x4154>
   151fc:	adds	r8, r8, #1
   15200:	movne	r8, #1
   15204:	orrs	r3, r9, r8
   15208:	strb	r2, [r4, #44]	; 0x2c
   1520c:	beq	15288 <__assert_fail@plt+0x3e74>
   15210:	mov	r2, #5
   15214:	ldr	r1, [pc, #1060]	; 15640 <__assert_fail@plt+0x422c>
   15218:	mov	r0, #0
   1521c:	bl	11174 <dcgettext@plt>
   15220:	mov	r6, r0
   15224:	ldr	r0, [r4]
   15228:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   1522c:	mov	r1, r0
   15230:	mov	r0, #4
   15234:	bl	190e8 <__assert_fail@plt+0x7cd4>
   15238:	ldrb	r3, [r4, #44]	; 0x2c
   1523c:	cmp	r3, #0
   15240:	mov	r7, r0
   15244:	ldreq	r0, [pc, #1016]	; 15644 <__assert_fail@plt+0x4230>
   15248:	bne	155fc <__assert_fail@plt+0x41e8>
   1524c:	mov	r1, #0
   15250:	str	r0, [sp]
   15254:	mov	r3, r7
   15258:	mov	r2, r6
   1525c:	mov	r0, r1
   15260:	bl	1121c <error@plt>
   15264:	b	15288 <__assert_fail@plt+0x3e74>
   15268:	bl	112dc <__errno_location@plt>
   1526c:	ldrb	r6, [r4, #46]	; 0x2e
   15270:	cmp	r6, #0
   15274:	ldr	r7, [r0]
   15278:	str	r7, [r4, #52]	; 0x34
   1527c:	bne	152c4 <__assert_fail@plt+0x3eb0>
   15280:	cmp	r9, #0
   15284:	bne	1557c <__assert_fail@plt+0x4168>
   15288:	ldr	r0, [r4]
   1528c:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   15290:	mov	r1, r0
   15294:	mov	r0, r5
   15298:	bl	13ef0 <__assert_fail@plt+0x2adc>
   1529c:	ldr	r0, [r4]
   152a0:	ldr	r5, [r4, #48]	; 0x30
   152a4:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   152a8:	mov	r1, r0
   152ac:	mov	r0, r5
   152b0:	bl	13ef0 <__assert_fail@plt+0x2adc>
   152b4:	mvn	r3, #0
   152b8:	str	r3, [r4, #48]	; 0x30
   152bc:	add	sp, sp, #124	; 0x7c
   152c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152c4:	ldr	r6, [r0]
   152c8:	cmp	r8, r6
   152cc:	beq	15288 <__assert_fail@plt+0x3e74>
   152d0:	ldr	r0, [r4]
   152d4:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   152d8:	mov	r1, #3
   152dc:	mov	r2, r0
   152e0:	mov	r0, #0
   152e4:	bl	191a4 <__assert_fail@plt+0x7d90>
   152e8:	mov	r1, r6
   152ec:	ldr	r2, [pc, #852]	; 15648 <__assert_fail@plt+0x4234>
   152f0:	mov	r3, r0
   152f4:	mov	r0, #0
   152f8:	bl	1121c <error@plt>
   152fc:	b	15288 <__assert_fail@plt+0x3e74>
   15300:	add	r2, sp, #16
   15304:	ldr	r1, [r4]
   15308:	mov	r0, #3
   1530c:	bl	11408 <__lxstat64@plt>
   15310:	subs	r3, r0, #0
   15314:	str	r3, [sp, #12]
   15318:	bne	1519c <__assert_fail@plt+0x3d88>
   1531c:	ldr	r2, [sp, #32]
   15320:	and	r2, r2, #61440	; 0xf000
   15324:	cmp	r2, #40960	; 0xa000
   15328:	bne	1519c <__assert_fail@plt+0x3d88>
   1532c:	mov	r3, #1
   15330:	mvn	r2, #0
   15334:	strb	r3, [r4, #44]	; 0x2c
   15338:	str	r2, [r4, #52]	; 0x34
   1533c:	ldr	r1, [pc, #776]	; 1564c <__assert_fail@plt+0x4238>
   15340:	mov	r2, #5
   15344:	bl	11174 <dcgettext@plt>
   15348:	mov	r6, r0
   1534c:	ldr	r0, [r4]
   15350:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   15354:	mov	r1, r0
   15358:	mov	r0, #4
   1535c:	bl	190e8 <__assert_fail@plt+0x7cd4>
   15360:	ldr	r1, [sp, #12]
   15364:	mov	r2, r6
   15368:	mov	r3, r0
   1536c:	mov	r0, r1
   15370:	bl	1121c <error@plt>
   15374:	b	15288 <__assert_fail@plt+0x3e74>
   15378:	ldr	r0, [r4]
   1537c:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   15380:	mov	r1, r0
   15384:	mov	r0, r5
   15388:	bl	14994 <__assert_fail@plt+0x3580>
   1538c:	cmp	r0, #0
   15390:	strb	r0, [r4, #45]	; 0x2d
   15394:	bne	15508 <__assert_fail@plt+0x40f4>
   15398:	mov	r9, #0
   1539c:	bics	r8, r8, #2
   153a0:	str	r9, [r4, #52]	; 0x34
   153a4:	ldr	r3, [r4, #48]	; 0x30
   153a8:	beq	15468 <__assert_fail@plt+0x4054>
   153ac:	cmn	r3, #1
   153b0:	bne	15624 <__assert_fail@plt+0x4210>
   153b4:	mov	r2, #5
   153b8:	ldr	r1, [pc, #656]	; 15650 <__assert_fail@plt+0x423c>
   153bc:	mov	r0, r9
   153c0:	bl	11174 <dcgettext@plt>
   153c4:	mov	r8, r0
   153c8:	ldr	r0, [r4]
   153cc:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   153d0:	mov	r1, r0
   153d4:	mov	r0, #4
   153d8:	bl	190e8 <__assert_fail@plt+0x7cd4>
   153dc:	mov	r2, r8
   153e0:	mov	r1, r9
   153e4:	mov	r3, r0
   153e8:	mov	r0, r9
   153ec:	bl	1121c <error@plt>
   153f0:	ldrd	r2, [sp, #16]
   153f4:	cmp	r7, #0
   153f8:	ldrd	r0, [sp, #112]	; 0x70
   153fc:	mvneq	r6, #0
   15400:	ldr	ip, [sp, #100]	; 0x64
   15404:	mov	r7, #0
   15408:	strd	r2, [r4, #24]
   1540c:	str	r6, [r4, #56]	; 0x38
   15410:	ldr	r2, [sp, #96]	; 0x60
   15414:	mov	r6, #0
   15418:	ldr	r3, [sp, #32]
   1541c:	mov	r8, #0
   15420:	strd	r0, [r4, #32]
   15424:	str	ip, [r4, #20]
   15428:	str	r2, [r4, #16]
   1542c:	str	r3, [r4, #40]	; 0x28
   15430:	str	r5, [r4, #48]	; 0x30
   15434:	strd	r6, [r4, #8]
   15438:	strd	r6, [r4, #72]	; 0x48
   1543c:	strb	r8, [r4, #44]	; 0x2c
   15440:	ldr	r0, [r4]
   15444:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   15448:	str	r8, [sp]
   1544c:	mov	r2, r6
   15450:	mov	r3, r7
   15454:	str	r0, [sp, #4]
   15458:	mov	r0, r5
   1545c:	bl	14388 <__assert_fail@plt+0x2f74>
   15460:	add	sp, sp, #124	; 0x7c
   15464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15468:	cmn	r3, #1
   1546c:	beq	155bc <__assert_fail@plt+0x41a8>
   15470:	ldrd	r0, [r4, #32]
   15474:	ldrd	r2, [sp, #112]	; 0x70
   15478:	cmp	r1, r3
   1547c:	cmpeq	r0, r2
   15480:	beq	154dc <__assert_fail@plt+0x40c8>
   15484:	mov	r2, #5
   15488:	ldr	r1, [pc, #452]	; 15654 <__assert_fail@plt+0x4240>
   1548c:	mov	r0, #0
   15490:	bl	11174 <dcgettext@plt>
   15494:	mov	r8, r0
   15498:	ldr	r0, [r4]
   1549c:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   154a0:	mov	r1, r0
   154a4:	mov	r0, #4
   154a8:	bl	190e8 <__assert_fail@plt+0x7cd4>
   154ac:	mov	r1, #0
   154b0:	mov	r2, r8
   154b4:	mov	r3, r0
   154b8:	mov	r0, r1
   154bc:	bl	1121c <error@plt>
   154c0:	ldr	r0, [r4]
   154c4:	ldr	r8, [r4, #48]	; 0x30
   154c8:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   154cc:	mov	r1, r0
   154d0:	mov	r0, r8
   154d4:	bl	13ef0 <__assert_fail@plt+0x2adc>
   154d8:	b	153f0 <__assert_fail@plt+0x3fdc>
   154dc:	ldrd	r0, [r4, #24]
   154e0:	ldrd	r2, [sp, #16]
   154e4:	cmp	r1, r3
   154e8:	cmpeq	r0, r2
   154ec:	bne	15484 <__assert_fail@plt+0x4070>
   154f0:	ldr	r0, [r4]
   154f4:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   154f8:	mov	r1, r0
   154fc:	mov	r0, r5
   15500:	bl	13ef0 <__assert_fail@plt+0x2adc>
   15504:	b	152bc <__assert_fail@plt+0x3ea8>
   15508:	ldrb	r9, [sl, #3]
   1550c:	cmp	r9, #0
   15510:	bne	15398 <__assert_fail@plt+0x3f84>
   15514:	mvn	r3, #0
   15518:	str	r3, [r4, #52]	; 0x34
   1551c:	mov	r2, #5
   15520:	ldr	r1, [pc, #304]	; 15658 <__assert_fail@plt+0x4244>
   15524:	mov	r0, r9
   15528:	bl	11174 <dcgettext@plt>
   1552c:	mov	r6, r0
   15530:	ldr	r0, [r4]
   15534:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   15538:	mov	r1, r0
   1553c:	mov	r0, #4
   15540:	bl	190e8 <__assert_fail@plt+0x7cd4>
   15544:	mov	r2, r6
   15548:	mov	r1, r9
   1554c:	mov	r3, r0
   15550:	mov	r0, r9
   15554:	bl	1121c <error@plt>
   15558:	mov	r3, #1
   1555c:	strb	r3, [r4, #44]	; 0x2c
   15560:	strb	r3, [r4, #45]	; 0x2d
   15564:	b	15288 <__assert_fail@plt+0x3e74>
   15568:	ldr	r3, [pc, #236]	; 1565c <__assert_fail@plt+0x4248>
   1556c:	ldr	r2, [r3, #4]
   15570:	subs	r2, r2, #1
   15574:	movne	r2, #1
   15578:	b	151fc <__assert_fail@plt+0x3de8>
   1557c:	mov	r2, #5
   15580:	ldr	r1, [pc, #216]	; 15660 <__assert_fail@plt+0x424c>
   15584:	mov	r0, r6
   15588:	bl	11174 <dcgettext@plt>
   1558c:	mov	r8, r0
   15590:	ldr	r0, [r4]
   15594:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   15598:	mov	r1, r0
   1559c:	mov	r0, #4
   155a0:	bl	190e8 <__assert_fail@plt+0x7cd4>
   155a4:	mov	r2, r8
   155a8:	mov	r1, r7
   155ac:	mov	r3, r0
   155b0:	mov	r0, r6
   155b4:	bl	1121c <error@plt>
   155b8:	b	15288 <__assert_fail@plt+0x3e74>
   155bc:	mov	r2, #5
   155c0:	ldr	r1, [pc, #156]	; 15664 <__assert_fail@plt+0x4250>
   155c4:	mov	r0, r8
   155c8:	bl	11174 <dcgettext@plt>
   155cc:	mov	r9, r0
   155d0:	ldr	r0, [r4]
   155d4:	bl	13eb8 <__assert_fail@plt+0x2aa4>
   155d8:	mov	r1, r0
   155dc:	mov	r0, #4
   155e0:	bl	190e8 <__assert_fail@plt+0x7cd4>
   155e4:	mov	r2, r9
   155e8:	mov	r1, r8
   155ec:	mov	r3, r0
   155f0:	mov	r0, r8
   155f4:	bl	1121c <error@plt>
   155f8:	b	153f0 <__assert_fail@plt+0x3fdc>
   155fc:	mov	r2, #5
   15600:	ldr	r1, [pc, #96]	; 15668 <__assert_fail@plt+0x4254>
   15604:	mov	r0, #0
   15608:	bl	11174 <dcgettext@plt>
   1560c:	b	1524c <__assert_fail@plt+0x3e38>
   15610:	ldr	r3, [pc, #84]	; 1566c <__assert_fail@plt+0x4258>
   15614:	ldr	r2, [pc, #84]	; 15670 <__assert_fail@plt+0x425c>
   15618:	ldr	r1, [pc, #84]	; 15674 <__assert_fail@plt+0x4260>
   1561c:	ldr	r0, [pc, #84]	; 15678 <__assert_fail@plt+0x4264>
   15620:	bl	11414 <__assert_fail@plt>
   15624:	ldr	r3, [pc, #64]	; 1566c <__assert_fail@plt+0x4258>
   15628:	ldr	r2, [pc, #76]	; 1567c <__assert_fail@plt+0x4268>
   1562c:	ldr	r1, [pc, #64]	; 15674 <__assert_fail@plt+0x4260>
   15630:	ldr	r0, [pc, #72]	; 15680 <__assert_fail@plt+0x426c>
   15634:	bl	11414 <__assert_fail@plt>
   15638:	ldrdeq	fp, [r1], -r8
   1563c:	ldrdeq	lr, [r2], -r0
   15640:	andeq	fp, r1, r8, lsl #15
   15644:	andeq	ip, r1, ip, lsr #2
   15648:	andeq	ip, r1, ip, lsl #8
   1564c:	andeq	fp, r1, r4, lsr r7
   15650:	andeq	fp, r1, r4, lsl r8
   15654:	andeq	fp, r1, r8, asr r8
   15658:	ldrdeq	fp, [r1], -r4
   1565c:	andeq	lr, r2, r8, asr #2
   15660:	andeq	fp, r1, ip, ror #14
   15664:	andeq	fp, r1, r0, lsr r8
   15668:			; <UNDEFINED> instruction: 0x0001b7b8
   1566c:	andeq	fp, r1, r4, lsl #9
   15670:	andeq	r0, r0, r2, ror #7
   15674:	andeq	fp, r1, r4, lsl r7
   15678:	andeq	fp, r1, r0, lsr #14
   1567c:	andeq	r0, r0, pc, lsr #8
   15680:	andeq	fp, r1, r8, lsl #16
   15684:	subs	r5, r0, #0
   15688:	push	{r7, lr}
   1568c:	sub	sp, sp, #56	; 0x38
   15690:	beq	156cc <__assert_fail@plt+0x42b8>
   15694:	ldr	r3, [pc, #872]	; 15a04 <__assert_fail@plt+0x45f0>
   15698:	mov	r2, #5
   1569c:	ldr	r1, [pc, #868]	; 15a08 <__assert_fail@plt+0x45f4>
   156a0:	mov	r0, #0
   156a4:	ldr	r4, [r3]
   156a8:	bl	11174 <dcgettext@plt>
   156ac:	ldr	r3, [pc, #856]	; 15a0c <__assert_fail@plt+0x45f8>
   156b0:	mov	r1, #1
   156b4:	ldr	r3, [r3]
   156b8:	mov	r2, r0
   156bc:	mov	r0, r4
   156c0:	bl	11324 <__fprintf_chk@plt>
   156c4:	mov	r0, r5
   156c8:	bl	11294 <exit@plt>
   156cc:	mov	r2, #5
   156d0:	ldr	r1, [pc, #824]	; 15a10 <__assert_fail@plt+0x45fc>
   156d4:	bl	11174 <dcgettext@plt>
   156d8:	ldr	r3, [pc, #812]	; 15a0c <__assert_fail@plt+0x45f8>
   156dc:	ldr	r6, [pc, #816]	; 15a14 <__assert_fail@plt+0x4600>
   156e0:	ldr	r4, [pc, #816]	; 15a18 <__assert_fail@plt+0x4604>
   156e4:	ldr	r2, [r3]
   156e8:	mov	r1, r0
   156ec:	mov	r0, #1
   156f0:	bl	11300 <__printf_chk@plt>
   156f4:	mov	r2, #5
   156f8:	ldr	r1, [pc, #796]	; 15a1c <__assert_fail@plt+0x4608>
   156fc:	mov	r0, r5
   15700:	bl	11174 <dcgettext@plt>
   15704:	mov	r2, #10
   15708:	mov	r1, r0
   1570c:	mov	r0, #1
   15710:	bl	11300 <__printf_chk@plt>
   15714:	mov	r2, #5
   15718:	ldr	r1, [pc, #768]	; 15a20 <__assert_fail@plt+0x460c>
   1571c:	mov	r0, r5
   15720:	bl	11174 <dcgettext@plt>
   15724:	ldr	r1, [r6]
   15728:	bl	110b4 <fputs_unlocked@plt>
   1572c:	mov	r2, #5
   15730:	ldr	r1, [pc, #748]	; 15a24 <__assert_fail@plt+0x4610>
   15734:	mov	r0, r5
   15738:	bl	11174 <dcgettext@plt>
   1573c:	ldr	r1, [r6]
   15740:	bl	110b4 <fputs_unlocked@plt>
   15744:	mov	r2, #5
   15748:	ldr	r1, [pc, #728]	; 15a28 <__assert_fail@plt+0x4614>
   1574c:	mov	r0, r5
   15750:	bl	11174 <dcgettext@plt>
   15754:	ldr	r1, [r6]
   15758:	bl	110b4 <fputs_unlocked@plt>
   1575c:	mov	r2, #5
   15760:	ldr	r1, [pc, #708]	; 15a2c <__assert_fail@plt+0x4618>
   15764:	mov	r0, r5
   15768:	bl	11174 <dcgettext@plt>
   1576c:	ldr	r1, [r6]
   15770:	bl	110b4 <fputs_unlocked@plt>
   15774:	mov	r2, #5
   15778:	ldr	r1, [pc, #688]	; 15a30 <__assert_fail@plt+0x461c>
   1577c:	mov	r0, r5
   15780:	bl	11174 <dcgettext@plt>
   15784:	mov	r3, #5
   15788:	mov	r2, #10
   1578c:	mov	r1, r0
   15790:	mov	r0, #1
   15794:	bl	11300 <__printf_chk@plt>
   15798:	mov	r2, #5
   1579c:	ldr	r1, [pc, #656]	; 15a34 <__assert_fail@plt+0x4620>
   157a0:	mov	r0, r5
   157a4:	bl	11174 <dcgettext@plt>
   157a8:	ldr	r1, [r6]
   157ac:	bl	110b4 <fputs_unlocked@plt>
   157b0:	mov	r2, #5
   157b4:	ldr	r1, [pc, #636]	; 15a38 <__assert_fail@plt+0x4624>
   157b8:	mov	r0, r5
   157bc:	bl	11174 <dcgettext@plt>
   157c0:	ldr	r1, [r6]
   157c4:	bl	110b4 <fputs_unlocked@plt>
   157c8:	mov	r2, #5
   157cc:	ldr	r1, [pc, #616]	; 15a3c <__assert_fail@plt+0x4628>
   157d0:	mov	r0, r5
   157d4:	bl	11174 <dcgettext@plt>
   157d8:	ldr	r1, [r6]
   157dc:	bl	110b4 <fputs_unlocked@plt>
   157e0:	mov	r2, #5
   157e4:	ldr	r1, [pc, #596]	; 15a40 <__assert_fail@plt+0x462c>
   157e8:	mov	r0, r5
   157ec:	bl	11174 <dcgettext@plt>
   157f0:	ldr	r1, [r6]
   157f4:	bl	110b4 <fputs_unlocked@plt>
   157f8:	mov	r2, #5
   157fc:	ldr	r1, [pc, #576]	; 15a44 <__assert_fail@plt+0x4630>
   15800:	mov	r0, r5
   15804:	bl	11174 <dcgettext@plt>
   15808:	ldr	r1, [r6]
   1580c:	bl	110b4 <fputs_unlocked@plt>
   15810:	mov	r2, #5
   15814:	ldr	r1, [pc, #556]	; 15a48 <__assert_fail@plt+0x4634>
   15818:	mov	r0, r5
   1581c:	bl	11174 <dcgettext@plt>
   15820:	ldr	r1, [r6]
   15824:	bl	110b4 <fputs_unlocked@plt>
   15828:	mov	r2, #5
   1582c:	ldr	r1, [pc, #536]	; 15a4c <__assert_fail@plt+0x4638>
   15830:	mov	r0, r5
   15834:	bl	11174 <dcgettext@plt>
   15838:	ldr	r1, [r6]
   1583c:	bl	110b4 <fputs_unlocked@plt>
   15840:	ldm	r4!, {r0, r1, r2, r3}
   15844:	mov	lr, sp
   15848:	stmia	lr!, {r0, r1, r2, r3}
   1584c:	ldm	r4!, {r0, r1, r2, r3}
   15850:	ldr	ip, [sp]
   15854:	stmia	lr!, {r0, r1, r2, r3}
   15858:	cmp	ip, #0
   1585c:	ldm	r4!, {r0, r1, r2, r3}
   15860:	stmia	lr!, {r0, r1, r2, r3}
   15864:	ldm	r4, {r0, r1}
   15868:	moveq	r4, sp
   1586c:	stm	lr, {r0, r1}
   15870:	beq	158a0 <__assert_fail@plt+0x448c>
   15874:	ldr	r7, [pc, #468]	; 15a50 <__assert_fail@plt+0x463c>
   15878:	mov	r4, sp
   1587c:	b	1588c <__assert_fail@plt+0x4478>
   15880:	ldr	ip, [r4, #8]!
   15884:	cmp	ip, #0
   15888:	beq	158a0 <__assert_fail@plt+0x448c>
   1588c:	mov	r1, ip
   15890:	mov	r0, r7
   15894:	bl	110cc <strcmp@plt>
   15898:	cmp	r0, #0
   1589c:	bne	15880 <__assert_fail@plt+0x446c>
   158a0:	ldr	r4, [r4, #4]
   158a4:	mov	r2, #5
   158a8:	cmp	r4, #0
   158ac:	ldr	r1, [pc, #416]	; 15a54 <__assert_fail@plt+0x4640>
   158b0:	beq	15958 <__assert_fail@plt+0x4544>
   158b4:	mov	r0, #0
   158b8:	bl	11174 <dcgettext@plt>
   158bc:	ldr	r3, [pc, #404]	; 15a58 <__assert_fail@plt+0x4644>
   158c0:	ldr	r2, [pc, #404]	; 15a5c <__assert_fail@plt+0x4648>
   158c4:	mov	r1, r0
   158c8:	mov	r0, #1
   158cc:	bl	11300 <__printf_chk@plt>
   158d0:	mov	r1, #0
   158d4:	mov	r0, #5
   158d8:	bl	11378 <setlocale@plt>
   158dc:	cmp	r0, #0
   158e0:	ldreq	r7, [pc, #360]	; 15a50 <__assert_fail@plt+0x463c>
   158e4:	beq	15900 <__assert_fail@plt+0x44ec>
   158e8:	mov	r2, #3
   158ec:	ldr	r1, [pc, #364]	; 15a60 <__assert_fail@plt+0x464c>
   158f0:	bl	113e4 <strncmp@plt>
   158f4:	ldr	r7, [pc, #340]	; 15a50 <__assert_fail@plt+0x463c>
   158f8:	cmp	r0, #0
   158fc:	bne	159e8 <__assert_fail@plt+0x45d4>
   15900:	mov	r2, #5
   15904:	ldr	r1, [pc, #344]	; 15a64 <__assert_fail@plt+0x4650>
   15908:	mov	r0, #0
   1590c:	bl	11174 <dcgettext@plt>
   15910:	ldr	r3, [pc, #312]	; 15a50 <__assert_fail@plt+0x463c>
   15914:	ldr	r2, [pc, #316]	; 15a58 <__assert_fail@plt+0x4644>
   15918:	mov	r1, r0
   1591c:	mov	r0, #1
   15920:	bl	11300 <__printf_chk@plt>
   15924:	mov	r2, #5
   15928:	ldr	r1, [pc, #312]	; 15a68 <__assert_fail@plt+0x4654>
   1592c:	mov	r0, #0
   15930:	bl	11174 <dcgettext@plt>
   15934:	ldr	r2, [pc, #304]	; 15a6c <__assert_fail@plt+0x4658>
   15938:	cmp	r4, r7
   1593c:	ldr	r3, [pc, #300]	; 15a70 <__assert_fail@plt+0x465c>
   15940:	movne	r3, r2
   15944:	mov	r1, r0
   15948:	mov	r2, r4
   1594c:	mov	r0, #1
   15950:	bl	11300 <__printf_chk@plt>
   15954:	b	156c4 <__assert_fail@plt+0x42b0>
   15958:	mov	r0, r4
   1595c:	bl	11174 <dcgettext@plt>
   15960:	ldr	r3, [pc, #240]	; 15a58 <__assert_fail@plt+0x4644>
   15964:	ldr	r2, [pc, #240]	; 15a5c <__assert_fail@plt+0x4648>
   15968:	mov	r1, r0
   1596c:	mov	r0, #1
   15970:	bl	11300 <__printf_chk@plt>
   15974:	mov	r1, r4
   15978:	mov	r0, #5
   1597c:	bl	11378 <setlocale@plt>
   15980:	cmp	r0, #0
   15984:	beq	1599c <__assert_fail@plt+0x4588>
   15988:	mov	r2, #3
   1598c:	ldr	r1, [pc, #204]	; 15a60 <__assert_fail@plt+0x464c>
   15990:	bl	113e4 <strncmp@plt>
   15994:	cmp	r0, #0
   15998:	bne	159e0 <__assert_fail@plt+0x45cc>
   1599c:	mov	r2, #5
   159a0:	ldr	r1, [pc, #188]	; 15a64 <__assert_fail@plt+0x4650>
   159a4:	mov	r0, #0
   159a8:	bl	11174 <dcgettext@plt>
   159ac:	ldr	r3, [pc, #156]	; 15a50 <__assert_fail@plt+0x463c>
   159b0:	ldr	r2, [pc, #160]	; 15a58 <__assert_fail@plt+0x4644>
   159b4:	mov	r4, r3
   159b8:	mov	r1, r0
   159bc:	mov	r0, #1
   159c0:	bl	11300 <__printf_chk@plt>
   159c4:	ldr	r1, [pc, #156]	; 15a68 <__assert_fail@plt+0x4654>
   159c8:	mov	r2, #5
   159cc:	mov	r0, #0
   159d0:	bl	11174 <dcgettext@plt>
   159d4:	ldr	r3, [pc, #148]	; 15a70 <__assert_fail@plt+0x465c>
   159d8:	mov	r1, r0
   159dc:	b	15948 <__assert_fail@plt+0x4534>
   159e0:	ldr	r7, [pc, #104]	; 15a50 <__assert_fail@plt+0x463c>
   159e4:	mov	r4, r7
   159e8:	mov	r2, #5
   159ec:	ldr	r1, [pc, #128]	; 15a74 <__assert_fail@plt+0x4660>
   159f0:	mov	r0, #0
   159f4:	bl	11174 <dcgettext@plt>
   159f8:	ldr	r1, [r6]
   159fc:	bl	110b4 <fputs_unlocked@plt>
   15a00:	b	15900 <__assert_fail@plt+0x44ec>
   15a04:	andeq	lr, r2, r0, asr #3
   15a08:	andeq	fp, r1, ip, lsl #17
   15a0c:	andeq	lr, r2, ip, ror #3
   15a10:			; <UNDEFINED> instruction: 0x0001b8b4
   15a14:	andeq	lr, r2, r4, asr #3
   15a18:	andeq	fp, r1, ip, lsl #9
   15a1c:	ldrdeq	fp, [r1], -r8
   15a20:	andeq	fp, r1, ip, asr r9
   15a24:	muleq	r1, r4, r9
   15a28:	andeq	fp, r1, r0, ror #19
   15a2c:	andeq	fp, r1, r4, ror sl
   15a30:	andeq	fp, r1, r0, ror #22
   15a34:	andeq	fp, r1, ip, lsl #27
   15a38:	andeq	fp, r1, r4, ror #28
   15a3c:			; <UNDEFINED> instruction: 0x0001bfb0
   15a40:	strdeq	fp, [r1], -r0
   15a44:	andeq	ip, r1, r0, lsr #32
   15a48:	andeq	ip, r1, r8, asr r0
   15a4c:	andeq	ip, r1, r0, lsr r1
   15a50:	andeq	fp, r1, r4, lsl #17
   15a54:	andeq	ip, r1, r8, ror #5
   15a58:	andeq	ip, r1, r0, lsl #6
   15a5c:	andeq	ip, r1, r8, lsr #6
   15a60:	andeq	ip, r1, r8, lsr r3
   15a64:	andeq	ip, r1, r4, lsl #7
   15a68:	andeq	ip, r1, r0, lsr #7
   15a6c:	andeq	ip, r1, ip, lsr #2
   15a70:	andeq	ip, r1, r8, asr #16
   15a74:	andeq	ip, r1, ip, lsr r3
   15a78:	mov	r0, #1
   15a7c:	b	15684 <__assert_fail@plt+0x4270>
   15a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a84:	mov	r5, r1
   15a88:	sub	sp, sp, #12
   15a8c:	mov	r4, r2
   15a90:	str	r2, [sp]
   15a94:	mov	r7, r3
   15a98:	mov	sl, r0
   15a9c:	bl	112a0 <strlen@plt>
   15aa0:	ldr	fp, [r5]
   15aa4:	cmp	fp, #0
   15aa8:	beq	15b70 <__assert_fail@plt+0x475c>
   15aac:	mov	r3, #0
   15ab0:	mov	r8, r0
   15ab4:	str	r3, [sp, #4]
   15ab8:	mov	r6, r3
   15abc:	mvn	r9, #0
   15ac0:	b	15aec <__assert_fail@plt+0x46d8>
   15ac4:	bl	1115c <memcmp@plt>
   15ac8:	ldr	r3, [sp, #4]
   15acc:	cmp	r0, #0
   15ad0:	movne	r3, #1
   15ad4:	str	r3, [sp, #4]
   15ad8:	ldr	fp, [r5, #4]!
   15adc:	add	r6, r6, #1
   15ae0:	cmp	fp, #0
   15ae4:	add	r4, r4, r7
   15ae8:	beq	15b48 <__assert_fail@plt+0x4734>
   15aec:	mov	r2, r8
   15af0:	mov	r1, sl
   15af4:	mov	r0, fp
   15af8:	bl	113e4 <strncmp@plt>
   15afc:	cmp	r0, #0
   15b00:	mov	r0, fp
   15b04:	bne	15ad8 <__assert_fail@plt+0x46c4>
   15b08:	bl	112a0 <strlen@plt>
   15b0c:	ldr	r3, [sp]
   15b10:	mov	r2, r7
   15b14:	mov	r1, r4
   15b18:	cmp	r8, r0
   15b1c:	mla	r0, r7, r9, r3
   15b20:	beq	15b60 <__assert_fail@plt+0x474c>
   15b24:	cmn	r9, #1
   15b28:	moveq	r9, r6
   15b2c:	beq	15ad8 <__assert_fail@plt+0x46c4>
   15b30:	ldr	r3, [sp]
   15b34:	cmp	r3, #0
   15b38:	bne	15ac4 <__assert_fail@plt+0x46b0>
   15b3c:	mov	r3, #1
   15b40:	str	r3, [sp, #4]
   15b44:	b	15ad8 <__assert_fail@plt+0x46c4>
   15b48:	ldr	r3, [sp, #4]
   15b4c:	cmp	r3, #0
   15b50:	mvnne	r9, #1
   15b54:	mov	r0, r9
   15b58:	add	sp, sp, #12
   15b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b60:	mov	r9, r6
   15b64:	mov	r0, r9
   15b68:	add	sp, sp, #12
   15b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b70:	mvn	r9, #0
   15b74:	b	15b54 <__assert_fail@plt+0x4740>
   15b78:	push	{r4, r5, r6, lr}
   15b7c:	mov	r6, r0
   15b80:	ldr	r0, [r1]
   15b84:	cmp	r0, #0
   15b88:	beq	15bc0 <__assert_fail@plt+0x47ac>
   15b8c:	mov	r4, r1
   15b90:	mov	r5, #0
   15b94:	b	15ba8 <__assert_fail@plt+0x4794>
   15b98:	ldr	r0, [r4, #4]!
   15b9c:	add	r5, r5, #1
   15ba0:	cmp	r0, #0
   15ba4:	beq	15bc0 <__assert_fail@plt+0x47ac>
   15ba8:	mov	r1, r6
   15bac:	bl	110cc <strcmp@plt>
   15bb0:	cmp	r0, #0
   15bb4:	bne	15b98 <__assert_fail@plt+0x4784>
   15bb8:	mov	r0, r5
   15bbc:	pop	{r4, r5, r6, pc}
   15bc0:	mvn	r0, #0
   15bc4:	pop	{r4, r5, r6, pc}
   15bc8:	cmn	r2, #1
   15bcc:	push	{r4, r5, r6, lr}
   15bd0:	mov	r2, #5
   15bd4:	sub	sp, sp, #8
   15bd8:	mov	r4, r1
   15bdc:	mov	r5, r0
   15be0:	ldreq	r1, [pc, #76]	; 15c34 <__assert_fail@plt+0x4820>
   15be4:	ldrne	r1, [pc, #76]	; 15c38 <__assert_fail@plt+0x4824>
   15be8:	mov	r0, #0
   15bec:	bl	11174 <dcgettext@plt>
   15bf0:	mov	r2, r4
   15bf4:	mov	r1, #8
   15bf8:	mov	r6, r0
   15bfc:	mov	r0, #0
   15c00:	bl	1907c <__assert_fail@plt+0x7c68>
   15c04:	mov	r1, r5
   15c08:	mov	r4, r0
   15c0c:	mov	r0, #1
   15c10:	bl	19318 <__assert_fail@plt+0x7f04>
   15c14:	mov	r1, #0
   15c18:	mov	r3, r4
   15c1c:	mov	r2, r6
   15c20:	str	r0, [sp]
   15c24:	mov	r0, r1
   15c28:	bl	1121c <error@plt>
   15c2c:	add	sp, sp, #8
   15c30:	pop	{r4, r5, r6, pc}
   15c34:	andeq	ip, r1, r0, ror r9
   15c38:	andeq	ip, r1, ip, lsl #19
   15c3c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c40:	mov	r6, r0
   15c44:	ldr	r9, [pc, #232]	; 15d34 <__assert_fail@plt+0x4920>
   15c48:	mov	r4, r1
   15c4c:	mov	r7, r2
   15c50:	ldr	r1, [pc, #224]	; 15d38 <__assert_fail@plt+0x4924>
   15c54:	mov	r2, #5
   15c58:	mov	r0, #0
   15c5c:	bl	11174 <dcgettext@plt>
   15c60:	ldr	r1, [r9]
   15c64:	bl	110b4 <fputs_unlocked@plt>
   15c68:	ldr	fp, [r6]
   15c6c:	cmp	fp, #0
   15c70:	movne	r8, #0
   15c74:	movne	r5, r8
   15c78:	movne	sl, #1
   15c7c:	bne	15cbc <__assert_fail@plt+0x48a8>
   15c80:	b	15d00 <__assert_fail@plt+0x48ec>
   15c84:	mov	r0, fp
   15c88:	ldr	r8, [r9]
   15c8c:	bl	19328 <__assert_fail@plt+0x7f14>
   15c90:	ldr	r2, [pc, #164]	; 15d3c <__assert_fail@plt+0x4928>
   15c94:	mov	r1, sl
   15c98:	mov	r3, r0
   15c9c:	mov	r0, r8
   15ca0:	bl	11324 <__fprintf_chk@plt>
   15ca4:	mov	r8, r4
   15ca8:	ldr	fp, [r6, #4]!
   15cac:	add	r5, r5, #1
   15cb0:	cmp	fp, #0
   15cb4:	add	r4, r4, r7
   15cb8:	beq	15d00 <__assert_fail@plt+0x48ec>
   15cbc:	cmp	r5, #0
   15cc0:	mov	r1, r4
   15cc4:	mov	r2, r7
   15cc8:	mov	r0, r8
   15ccc:	beq	15c84 <__assert_fail@plt+0x4870>
   15cd0:	bl	1115c <memcmp@plt>
   15cd4:	cmp	r0, #0
   15cd8:	bne	15c84 <__assert_fail@plt+0x4870>
   15cdc:	mov	r0, fp
   15ce0:	ldr	fp, [r9]
   15ce4:	bl	19328 <__assert_fail@plt+0x7f14>
   15ce8:	ldr	r2, [pc, #80]	; 15d40 <__assert_fail@plt+0x492c>
   15cec:	mov	r1, sl
   15cf0:	mov	r3, r0
   15cf4:	mov	r0, fp
   15cf8:	bl	11324 <__fprintf_chk@plt>
   15cfc:	b	15ca8 <__assert_fail@plt+0x4894>
   15d00:	ldr	r0, [r9]
   15d04:	ldr	r3, [r0, #20]
   15d08:	ldr	r2, [r0, #24]
   15d0c:	cmp	r3, r2
   15d10:	bcs	15d28 <__assert_fail@plt+0x4914>
   15d14:	add	r1, r3, #1
   15d18:	mov	r2, #10
   15d1c:	str	r1, [r0, #20]
   15d20:	strb	r2, [r3]
   15d24:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d28:	mov	r1, #10
   15d2c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d30:	b	1136c <__overflow@plt>
   15d34:	andeq	lr, r2, r0, asr #3
   15d38:	andeq	ip, r1, ip, lsr #19
   15d3c:	andeq	ip, r1, r4, asr #19
   15d40:	andeq	ip, r1, ip, asr #19
   15d44:	push	{r4, r5, r6, r7, r8, lr}
   15d48:	mov	r7, r0
   15d4c:	ldrb	ip, [sp, #32]
   15d50:	mov	r5, r1
   15d54:	mov	r4, r2
   15d58:	cmp	ip, #0
   15d5c:	mov	r6, r3
   15d60:	beq	15db0 <__assert_fail@plt+0x499c>
   15d64:	ldr	r3, [sp, #24]
   15d68:	mov	r2, r6
   15d6c:	mov	r1, r4
   15d70:	mov	r0, r5
   15d74:	bl	15a80 <__assert_fail@plt+0x466c>
   15d78:	cmp	r0, #0
   15d7c:	popge	{r4, r5, r6, r7, r8, pc}
   15d80:	mov	r2, r0
   15d84:	mov	r1, r5
   15d88:	mov	r0, r7
   15d8c:	bl	15bc8 <__assert_fail@plt+0x47b4>
   15d90:	mov	r0, r4
   15d94:	ldr	r2, [sp, #24]
   15d98:	mov	r1, r6
   15d9c:	bl	15c3c <__assert_fail@plt+0x4828>
   15da0:	ldr	r3, [sp, #28]
   15da4:	blx	r3
   15da8:	mvn	r0, #0
   15dac:	pop	{r4, r5, r6, r7, r8, pc}
   15db0:	mov	r1, r2
   15db4:	mov	r0, r5
   15db8:	bl	15b78 <__assert_fail@plt+0x4764>
   15dbc:	cmp	r0, #0
   15dc0:	popge	{r4, r5, r6, r7, r8, pc}
   15dc4:	b	15d80 <__assert_fail@plt+0x496c>
   15dc8:	push	{r4, r5, r6, r7, r8, lr}
   15dcc:	ldr	r7, [r1]
   15dd0:	cmp	r7, #0
   15dd4:	beq	15e14 <__assert_fail@plt+0x4a00>
   15dd8:	mov	r6, r3
   15ddc:	mov	r8, r0
   15de0:	mov	r4, r2
   15de4:	mov	r5, r1
   15de8:	b	15df8 <__assert_fail@plt+0x49e4>
   15dec:	ldr	r7, [r5, #4]!
   15df0:	cmp	r7, #0
   15df4:	beq	15e14 <__assert_fail@plt+0x4a00>
   15df8:	mov	r1, r4
   15dfc:	mov	r2, r6
   15e00:	mov	r0, r8
   15e04:	bl	1115c <memcmp@plt>
   15e08:	add	r4, r4, r6
   15e0c:	cmp	r0, #0
   15e10:	bne	15dec <__assert_fail@plt+0x49d8>
   15e14:	mov	r0, r7
   15e18:	pop	{r4, r5, r6, r7, r8, pc}
   15e1c:	ldrb	r3, [r0]
   15e20:	cmp	r3, #47	; 0x2f
   15e24:	bne	15e34 <__assert_fail@plt+0x4a20>
   15e28:	ldrb	r3, [r0, #1]!
   15e2c:	cmp	r3, #47	; 0x2f
   15e30:	beq	15e28 <__assert_fail@plt+0x4a14>
   15e34:	cmp	r3, #0
   15e38:	bxeq	lr
   15e3c:	mov	r2, #0
   15e40:	push	{lr}		; (str lr, [sp, #-4]!)
   15e44:	mov	ip, r2
   15e48:	mov	r1, r0
   15e4c:	mov	lr, #1
   15e50:	cmp	r3, #47	; 0x2f
   15e54:	moveq	r2, lr
   15e58:	beq	15e68 <__assert_fail@plt+0x4a54>
   15e5c:	cmp	r2, #0
   15e60:	movne	r0, r1
   15e64:	movne	r2, ip
   15e68:	ldrb	r3, [r1, #1]!
   15e6c:	cmp	r3, #0
   15e70:	bne	15e50 <__assert_fail@plt+0x4a3c>
   15e74:	pop	{pc}		; (ldr pc, [sp], #4)
   15e78:	push	{r4, lr}
   15e7c:	mov	r4, r0
   15e80:	bl	112a0 <strlen@plt>
   15e84:	cmp	r0, #1
   15e88:	popls	{r4, pc}
   15e8c:	sub	r3, r0, #1
   15e90:	add	r2, r4, r3
   15e94:	ldrb	r1, [r4, r3]
   15e98:	cmp	r1, #47	; 0x2f
   15e9c:	popne	{r4, pc}
   15ea0:	cmp	r3, #1
   15ea4:	beq	15eb8 <__assert_fail@plt+0x4aa4>
   15ea8:	ldrb	r1, [r2, #-1]!
   15eac:	sub	r0, r3, #1
   15eb0:	cmp	r1, #47	; 0x2f
   15eb4:	beq	15ec0 <__assert_fail@plt+0x4aac>
   15eb8:	mov	r0, r3
   15ebc:	pop	{r4, pc}
   15ec0:	mov	r3, r0
   15ec4:	b	15ea0 <__assert_fail@plt+0x4a8c>
   15ec8:	push	{r4, r5, r6, lr}
   15ecc:	vpush	{d8}
   15ed0:	mov	r4, r1
   15ed4:	mov	r5, r0
   15ed8:	sub	sp, sp, #8
   15edc:	mov	r1, sp
   15ee0:	bl	1130c <strtod@plt>
   15ee4:	ldr	r3, [sp]
   15ee8:	ldrb	r3, [r3]
   15eec:	cmp	r3, #0
   15ef0:	vmov.f64	d8, d0
   15ef4:	bne	15f14 <__assert_fail@plt+0x4b00>
   15ef8:	cmp	r4, #0
   15efc:	vmov.f64	d0, d8
   15f00:	ldrne	r3, [sp]
   15f04:	strne	r3, [r4]
   15f08:	add	sp, sp, #8
   15f0c:	vpop	{d8}
   15f10:	pop	{r4, r5, r6, pc}
   15f14:	bl	112dc <__errno_location@plt>
   15f18:	add	r1, sp, #4
   15f1c:	mov	r6, r0
   15f20:	mov	r0, r5
   15f24:	ldr	r5, [r6]
   15f28:	bl	1a830 <__assert_fail@plt+0x941c>
   15f2c:	ldm	sp, {r2, r3}
   15f30:	cmp	r2, r3
   15f34:	strcc	r3, [sp]
   15f38:	strcs	r5, [r6]
   15f3c:	vmovcc.f64	d8, d0
   15f40:	b	15ef8 <__assert_fail@plt+0x4ae4>
   15f44:	ldr	r3, [pc, #4]	; 15f50 <__assert_fail@plt+0x4b3c>
   15f48:	str	r0, [r3]
   15f4c:	bx	lr
   15f50:	andeq	lr, r2, r0, ror #3
   15f54:	ldr	r3, [pc, #4]	; 15f60 <__assert_fail@plt+0x4b4c>
   15f58:	strb	r0, [r3, #4]
   15f5c:	bx	lr
   15f60:	andeq	lr, r2, r0, ror #3
   15f64:	ldr	r3, [pc, #192]	; 1602c <__assert_fail@plt+0x4c18>
   15f68:	push	{r4, r5, r6, lr}
   15f6c:	sub	sp, sp, #8
   15f70:	ldr	r0, [r3]
   15f74:	bl	1a8ac <__assert_fail@plt+0x9498>
   15f78:	cmp	r0, #0
   15f7c:	beq	15fa0 <__assert_fail@plt+0x4b8c>
   15f80:	ldr	r4, [pc, #168]	; 16030 <__assert_fail@plt+0x4c1c>
   15f84:	ldrb	r3, [r4, #4]
   15f88:	cmp	r3, #0
   15f8c:	beq	15fbc <__assert_fail@plt+0x4ba8>
   15f90:	bl	112dc <__errno_location@plt>
   15f94:	ldr	r3, [r0]
   15f98:	cmp	r3, #32
   15f9c:	bne	15fbc <__assert_fail@plt+0x4ba8>
   15fa0:	ldr	r3, [pc, #140]	; 16034 <__assert_fail@plt+0x4c20>
   15fa4:	ldr	r0, [r3]
   15fa8:	bl	1a8ac <__assert_fail@plt+0x9498>
   15fac:	cmp	r0, #0
   15fb0:	bne	16004 <__assert_fail@plt+0x4bf0>
   15fb4:	add	sp, sp, #8
   15fb8:	pop	{r4, r5, r6, pc}
   15fbc:	mov	r2, #5
   15fc0:	ldr	r1, [pc, #112]	; 16038 <__assert_fail@plt+0x4c24>
   15fc4:	mov	r0, #0
   15fc8:	bl	11174 <dcgettext@plt>
   15fcc:	ldr	r4, [r4]
   15fd0:	cmp	r4, #0
   15fd4:	mov	r5, r0
   15fd8:	beq	16010 <__assert_fail@plt+0x4bfc>
   15fdc:	bl	112dc <__errno_location@plt>
   15fe0:	ldr	r6, [r0]
   15fe4:	mov	r0, r4
   15fe8:	bl	19190 <__assert_fail@plt+0x7d7c>
   15fec:	mov	r1, r6
   15ff0:	str	r5, [sp]
   15ff4:	ldr	r2, [pc, #64]	; 1603c <__assert_fail@plt+0x4c28>
   15ff8:	mov	r3, r0
   15ffc:	mov	r0, #0
   16000:	bl	1121c <error@plt>
   16004:	ldr	r3, [pc, #52]	; 16040 <__assert_fail@plt+0x4c2c>
   16008:	ldr	r0, [r3]
   1600c:	bl	11120 <_exit@plt>
   16010:	bl	112dc <__errno_location@plt>
   16014:	mov	r3, r5
   16018:	ldr	r2, [pc, #36]	; 16044 <__assert_fail@plt+0x4c30>
   1601c:	ldr	r1, [r0]
   16020:	mov	r0, r4
   16024:	bl	1121c <error@plt>
   16028:	b	16004 <__assert_fail@plt+0x4bf0>
   1602c:	andeq	lr, r2, r4, asr #3
   16030:	andeq	lr, r2, r0, ror #3
   16034:	andeq	lr, r2, r0, asr #3
   16038:	ldrdeq	fp, [r1], -r0
   1603c:	andeq	ip, r1, r8, lsl #8
   16040:	andeq	lr, r2, r8, ror #2
   16044:	andeq	ip, r1, ip, lsl #8
   16048:	push	{r4, r5, r6, lr}
   1604c:	mov	r5, r0
   16050:	ldrb	r4, [r0]
   16054:	bl	15e1c <__assert_fail@plt+0x4a08>
   16058:	sub	r4, r4, #47	; 0x2f
   1605c:	clz	r4, r4
   16060:	lsr	r4, r4, #5
   16064:	sub	r0, r0, r5
   16068:	cmp	r0, r4
   1606c:	bls	160b8 <__assert_fail@plt+0x4ca4>
   16070:	sub	r3, r0, #1
   16074:	add	r2, r5, r3
   16078:	ldrb	r1, [r5, r3]
   1607c:	cmp	r1, #47	; 0x2f
   16080:	beq	1609c <__assert_fail@plt+0x4c88>
   16084:	b	160b8 <__assert_fail@plt+0x4ca4>
   16088:	ldrb	r1, [r2, #-1]!
   1608c:	sub	r0, r3, #1
   16090:	cmp	r1, #47	; 0x2f
   16094:	bne	160ac <__assert_fail@plt+0x4c98>
   16098:	mov	r3, r0
   1609c:	cmp	r4, r3
   160a0:	bne	16088 <__assert_fail@plt+0x4c74>
   160a4:	mov	r0, r4
   160a8:	pop	{r4, r5, r6, pc}
   160ac:	mov	r4, r3
   160b0:	mov	r0, r4
   160b4:	pop	{r4, r5, r6, pc}
   160b8:	mov	r4, r0
   160bc:	b	160a4 <__assert_fail@plt+0x4c90>
   160c0:	push	{r4, r5, r6, lr}
   160c4:	mov	r6, r0
   160c8:	bl	16048 <__assert_fail@plt+0x4c34>
   160cc:	add	r3, r0, #1
   160d0:	mov	r4, r0
   160d4:	cmp	r0, #0
   160d8:	movne	r0, r3
   160dc:	addeq	r0, r3, #1
   160e0:	bl	1a7a8 <__assert_fail@plt+0x9394>
   160e4:	subs	r5, r0, #0
   160e8:	beq	16110 <__assert_fail@plt+0x4cfc>
   160ec:	mov	r2, r4
   160f0:	mov	r1, r6
   160f4:	bl	1112c <memcpy@plt>
   160f8:	cmp	r4, #0
   160fc:	moveq	r3, #46	; 0x2e
   16100:	moveq	r4, #1
   16104:	strbeq	r3, [r5]
   16108:	mov	r3, #0
   1610c:	strb	r3, [r5, r4]
   16110:	mov	r0, r5
   16114:	pop	{r4, r5, r6, pc}
   16118:	push	{r1, r2, r3}
   1611c:	push	{r4, r5, r6, r7, lr}
   16120:	sub	sp, sp, #8
   16124:	add	r3, sp, #32
   16128:	ldr	r1, [sp, #28]
   1612c:	str	r3, [sp, #4]
   16130:	cmp	r1, #0
   16134:	beq	161cc <__assert_fail@plt+0x4db8>
   16138:	ldr	r2, [pc, #412]	; 162dc <__assert_fail@plt+0x4ec8>
   1613c:	mov	r5, r0
   16140:	cmp	r1, r2
   16144:	bne	16190 <__assert_fail@plt+0x4d7c>
   16148:	ldr	r6, [pc, #400]	; 162e0 <__assert_fail@plt+0x4ecc>
   1614c:	ldr	r7, [r3]
   16150:	add	r2, sp, #36	; 0x24
   16154:	ldr	r3, [r6]
   16158:	str	r2, [sp, #4]
   1615c:	cmp	r3, #0
   16160:	mov	r2, r7
   16164:	blt	16290 <__assert_fail@plt+0x4e7c>
   16168:	bl	11360 <fcntl64@plt>
   1616c:	subs	r4, r0, #0
   16170:	blt	16214 <__assert_fail@plt+0x4e00>
   16174:	mov	r3, #1
   16178:	str	r3, [r6]
   1617c:	mov	r0, r4
   16180:	add	sp, sp, #8
   16184:	pop	{r4, r5, r6, r7, lr}
   16188:	add	sp, sp, #12
   1618c:	bx	lr
   16190:	cmp	r1, #11
   16194:	beq	161bc <__assert_fail@plt+0x4da8>
   16198:	bgt	161dc <__assert_fail@plt+0x4dc8>
   1619c:	cmp	r1, #3
   161a0:	beq	161bc <__assert_fail@plt+0x4da8>
   161a4:	ble	162d0 <__assert_fail@plt+0x4ebc>
   161a8:	cmp	r1, #8
   161ac:	beq	161fc <__assert_fail@plt+0x4de8>
   161b0:	ble	161fc <__assert_fail@plt+0x4de8>
   161b4:	cmp	r1, #9
   161b8:	bne	161fc <__assert_fail@plt+0x4de8>
   161bc:	mov	r0, r5
   161c0:	bl	11360 <fcntl64@plt>
   161c4:	mov	r4, r0
   161c8:	b	1617c <__assert_fail@plt+0x4d68>
   161cc:	ldr	r2, [sp, #32]
   161d0:	bl	11360 <fcntl64@plt>
   161d4:	mov	r4, r0
   161d8:	b	1617c <__assert_fail@plt+0x4d68>
   161dc:	ldr	r3, [pc, #256]	; 162e4 <__assert_fail@plt+0x4ed0>
   161e0:	cmp	r1, r3
   161e4:	bgt	162b0 <__assert_fail@plt+0x4e9c>
   161e8:	cmp	r1, r2
   161ec:	bge	161fc <__assert_fail@plt+0x4de8>
   161f0:	sub	r3, r3, #6
   161f4:	cmp	r1, r3
   161f8:	beq	161bc <__assert_fail@plt+0x4da8>
   161fc:	ldr	r3, [sp, #4]
   16200:	mov	r0, r5
   16204:	ldr	r2, [r3]
   16208:	bl	11360 <fcntl64@plt>
   1620c:	mov	r4, r0
   16210:	b	1617c <__assert_fail@plt+0x4d68>
   16214:	bl	112dc <__errno_location@plt>
   16218:	ldr	r3, [r0]
   1621c:	cmp	r3, #22
   16220:	bne	16174 <__assert_fail@plt+0x4d60>
   16224:	mov	r2, r7
   16228:	mov	r0, r5
   1622c:	mov	r1, #0
   16230:	bl	11360 <fcntl64@plt>
   16234:	subs	r4, r0, #0
   16238:	blt	1617c <__assert_fail@plt+0x4d68>
   1623c:	mvn	r3, #0
   16240:	str	r3, [r6]
   16244:	mov	r1, #1
   16248:	mov	r0, r4
   1624c:	bl	11360 <fcntl64@plt>
   16250:	subs	r2, r0, #0
   16254:	blt	16270 <__assert_fail@plt+0x4e5c>
   16258:	orr	r2, r2, #1
   1625c:	mov	r1, #2
   16260:	mov	r0, r4
   16264:	bl	11360 <fcntl64@plt>
   16268:	cmn	r0, #1
   1626c:	bne	1617c <__assert_fail@plt+0x4d68>
   16270:	bl	112dc <__errno_location@plt>
   16274:	mov	r5, r0
   16278:	mov	r0, r4
   1627c:	ldr	r6, [r5]
   16280:	mvn	r4, #0
   16284:	bl	113fc <close@plt>
   16288:	str	r6, [r5]
   1628c:	b	1617c <__assert_fail@plt+0x4d68>
   16290:	mov	r1, #0
   16294:	bl	11360 <fcntl64@plt>
   16298:	subs	r4, r0, #0
   1629c:	blt	1617c <__assert_fail@plt+0x4d68>
   162a0:	ldr	r3, [r6]
   162a4:	cmn	r3, #1
   162a8:	beq	16244 <__assert_fail@plt+0x4e30>
   162ac:	b	1617c <__assert_fail@plt+0x4d68>
   162b0:	ldr	r3, [pc, #48]	; 162e8 <__assert_fail@plt+0x4ed4>
   162b4:	cmp	r1, r3
   162b8:	beq	161fc <__assert_fail@plt+0x4de8>
   162bc:	blt	161bc <__assert_fail@plt+0x4da8>
   162c0:	add	r3, r3, #1
   162c4:	cmp	r1, r3
   162c8:	bne	161fc <__assert_fail@plt+0x4de8>
   162cc:	b	161bc <__assert_fail@plt+0x4da8>
   162d0:	cmp	r1, #1
   162d4:	bne	161fc <__assert_fail@plt+0x4de8>
   162d8:	b	161bc <__assert_fail@plt+0x4da8>
   162dc:	andeq	r0, r0, r6, lsl #8
   162e0:	andeq	lr, r2, r8, ror #3
   162e4:	andeq	r0, r0, r7, lsl #8
   162e8:	andeq	r0, r0, r9, lsl #8
   162ec:	push	{r1, r2, r3}
   162f0:	push	{lr}		; (str lr, [sp, #-4]!)
   162f4:	sub	sp, sp, #8
   162f8:	ldr	r1, [sp, #12]
   162fc:	ands	r2, r1, #64	; 0x40
   16300:	addne	r3, sp, #16
   16304:	ldrne	r2, [sp, #16]
   16308:	strne	r3, [sp, #4]
   1630c:	bl	11228 <open64@plt>
   16310:	bl	193a8 <__assert_fail@plt+0x7f94>
   16314:	add	sp, sp, #8
   16318:	pop	{lr}		; (ldr lr, [sp], #4)
   1631c:	add	sp, sp, #12
   16320:	bx	lr
   16324:	push	{r4, r5, lr}
   16328:	sub	sp, sp, #12
   1632c:	mov	r5, r0
   16330:	bl	112dc <__errno_location@plt>
   16334:	mov	r2, #0
   16338:	mov	r4, r0
   1633c:	ldr	r3, [r0]
   16340:	str	r2, [r4]
   16344:	mov	r0, r5
   16348:	str	r3, [sp]
   1634c:	str	r3, [sp, #4]
   16350:	bl	11108 <free@plt>
   16354:	ldr	r3, [r4]
   16358:	add	r2, sp, #8
   1635c:	cmp	r3, #0
   16360:	moveq	r3, #4
   16364:	movne	r3, #0
   16368:	add	r3, r2, r3
   1636c:	ldr	r3, [r3, #-8]
   16370:	str	r3, [r4]
   16374:	add	sp, sp, #12
   16378:	pop	{r4, r5, pc}
   1637c:	andeq	r0, r0, r0
   16380:	cmp	r0, #10
   16384:	movcc	r0, #10
   16388:	push	{r4, r5, r6, r7, r8, lr}
   1638c:	orr	r7, r0, #1
   16390:	cmn	r7, #1
   16394:	ldrne	r8, [pc, #132]	; 16420 <__assert_fail@plt+0x500c>
   16398:	beq	16410 <__assert_fail@plt+0x4ffc>
   1639c:	cmp	r7, #9
   163a0:	bls	16418 <__assert_fail@plt+0x5004>
   163a4:	umull	r2, r3, r8, r7
   163a8:	lsr	r3, r3, #1
   163ac:	add	r3, r3, r3, lsl #1
   163b0:	cmp	r7, r3
   163b4:	beq	16404 <__assert_fail@plt+0x4ff0>
   163b8:	mov	r6, #16
   163bc:	mov	r5, #9
   163c0:	mov	r4, #3
   163c4:	b	163d8 <__assert_fail@plt+0x4fc4>
   163c8:	bl	1af54 <__assert_fail@plt+0x9b40>
   163cc:	add	r6, r6, #8
   163d0:	cmp	r1, #0
   163d4:	beq	16404 <__assert_fail@plt+0x4ff0>
   163d8:	add	r5, r5, r6
   163dc:	add	r4, r4, #2
   163e0:	cmp	r5, r7
   163e4:	mov	r0, r7
   163e8:	mov	r1, r4
   163ec:	bcc	163c8 <__assert_fail@plt+0x4fb4>
   163f0:	mov	r1, r4
   163f4:	mov	r0, r7
   163f8:	bl	1af54 <__assert_fail@plt+0x9b40>
   163fc:	cmp	r1, #0
   16400:	bne	16410 <__assert_fail@plt+0x4ffc>
   16404:	add	r7, r7, #2
   16408:	cmn	r7, #1
   1640c:	bne	1639c <__assert_fail@plt+0x4f88>
   16410:	mov	r0, r7
   16414:	pop	{r4, r5, r6, r7, r8, pc}
   16418:	mov	r4, #3
   1641c:	b	163f0 <__assert_fail@plt+0x4fdc>
   16420:	bge	feac0ed4 <optarg@@GLIBC_2.4+0xfea92d0c>
   16424:	push	{r4, lr}
   16428:	ror	r0, r0, #3
   1642c:	bl	1af54 <__assert_fail@plt+0x9b40>
   16430:	mov	r0, r1
   16434:	pop	{r4, pc}
   16438:	sub	r0, r1, r0
   1643c:	clz	r0, r0
   16440:	lsr	r0, r0, #5
   16444:	bx	lr
   16448:	push	{r4, lr}
   1644c:	mov	r4, r0
   16450:	mov	r0, r1
   16454:	ldr	r3, [r4, #24]
   16458:	ldr	r1, [r4, #8]
   1645c:	blx	r3
   16460:	ldr	r3, [r4, #8]
   16464:	cmp	r0, r3
   16468:	bcs	16478 <__assert_fail@plt+0x5064>
   1646c:	ldr	r3, [r4]
   16470:	add	r0, r3, r0, lsl #3
   16474:	pop	{r4, pc}
   16478:	bl	113f0 <abort@plt>
   1647c:	push	{r4, r5, r6, r7, r8, lr}
   16480:	mov	r7, r2
   16484:	mov	r8, r3
   16488:	mov	r6, r0
   1648c:	mov	r5, r1
   16490:	bl	16448 <__assert_fail@plt+0x5034>
   16494:	str	r0, [r7]
   16498:	ldr	r3, [r0]
   1649c:	cmp	r3, #0
   164a0:	beq	16538 <__assert_fail@plt+0x5124>
   164a4:	cmp	r5, r3
   164a8:	mov	r4, r0
   164ac:	beq	164cc <__assert_fail@plt+0x50b8>
   164b0:	mov	r1, r3
   164b4:	mov	r0, r5
   164b8:	ldr	r3, [r6, #28]
   164bc:	blx	r3
   164c0:	cmp	r0, #0
   164c4:	beq	1652c <__assert_fail@plt+0x5118>
   164c8:	ldr	r3, [r4]
   164cc:	cmp	r8, #0
   164d0:	beq	164fc <__assert_fail@plt+0x50e8>
   164d4:	ldr	r2, [r4, #4]
   164d8:	cmp	r2, #0
   164dc:	movne	ip, #0
   164e0:	ldmne	r2, {r0, r1}
   164e4:	streq	r2, [r4]
   164e8:	stmne	r4, {r0, r1}
   164ec:	strne	ip, [r2]
   164f0:	ldrne	r1, [r6, #36]	; 0x24
   164f4:	strne	r1, [r2, #4]
   164f8:	strne	r2, [r6, #36]	; 0x24
   164fc:	mov	r0, r3
   16500:	pop	{r4, r5, r6, r7, r8, pc}
   16504:	ldr	r3, [r2]
   16508:	cmp	r5, r3
   1650c:	beq	1654c <__assert_fail@plt+0x5138>
   16510:	mov	r1, r3
   16514:	mov	r0, r5
   16518:	ldr	r3, [r6, #28]
   1651c:	blx	r3
   16520:	cmp	r0, #0
   16524:	bne	16544 <__assert_fail@plt+0x5130>
   16528:	ldr	r4, [r4, #4]
   1652c:	ldr	r2, [r4, #4]
   16530:	cmp	r2, #0
   16534:	bne	16504 <__assert_fail@plt+0x50f0>
   16538:	mov	r3, #0
   1653c:	mov	r0, r3
   16540:	pop	{r4, r5, r6, r7, r8, pc}
   16544:	ldr	r2, [r4, #4]
   16548:	ldr	r3, [r2]
   1654c:	cmp	r8, #0
   16550:	beq	164fc <__assert_fail@plt+0x50e8>
   16554:	ldr	r0, [r2, #4]
   16558:	mov	r1, #0
   1655c:	str	r0, [r4, #4]
   16560:	str	r1, [r2]
   16564:	ldr	r1, [r6, #36]	; 0x24
   16568:	mov	r0, r3
   1656c:	str	r1, [r2, #4]
   16570:	str	r2, [r6, #36]	; 0x24
   16574:	pop	{r4, r5, r6, r7, r8, pc}
   16578:	ldr	r2, [pc, #164]	; 16624 <__assert_fail@plt+0x5210>
   1657c:	ldr	r3, [r0]
   16580:	cmp	r3, r2
   16584:	beq	1660c <__assert_fail@plt+0x51f8>
   16588:	vldr	s15, [r3, #8]
   1658c:	vldr	s14, [pc, #128]	; 16614 <__assert_fail@plt+0x5200>
   16590:	vcmpe.f32	s15, s14
   16594:	vmrs	APSR_nzcv, fpscr
   16598:	ble	16600 <__assert_fail@plt+0x51ec>
   1659c:	vldr	s13, [pc, #116]	; 16618 <__assert_fail@plt+0x5204>
   165a0:	vcmpe.f32	s15, s13
   165a4:	vmrs	APSR_nzcv, fpscr
   165a8:	bpl	16600 <__assert_fail@plt+0x51ec>
   165ac:	vldr	s13, [pc, #104]	; 1661c <__assert_fail@plt+0x5208>
   165b0:	vldr	s12, [r3, #12]
   165b4:	vcmpe.f32	s12, s13
   165b8:	vmrs	APSR_nzcv, fpscr
   165bc:	ble	16600 <__assert_fail@plt+0x51ec>
   165c0:	vldr	s13, [r3]
   165c4:	vcmpe.f32	s13, #0.0
   165c8:	vmrs	APSR_nzcv, fpscr
   165cc:	blt	16600 <__assert_fail@plt+0x51ec>
   165d0:	vadd.f32	s14, s13, s14
   165d4:	vldr	s13, [r3, #4]
   165d8:	vcmpe.f32	s14, s13
   165dc:	vmrs	APSR_nzcv, fpscr
   165e0:	bpl	16600 <__assert_fail@plt+0x51ec>
   165e4:	vldr	s12, [pc, #52]	; 16620 <__assert_fail@plt+0x520c>
   165e8:	vcmpe.f32	s13, s12
   165ec:	vmrs	APSR_nzcv, fpscr
   165f0:	bhi	16600 <__assert_fail@plt+0x51ec>
   165f4:	vcmpe.f32	s15, s14
   165f8:	vmrs	APSR_nzcv, fpscr
   165fc:	bgt	1660c <__assert_fail@plt+0x51f8>
   16600:	str	r2, [r0]
   16604:	mov	r0, #0
   16608:	bx	lr
   1660c:	mov	r0, #1
   16610:	bx	lr
   16614:	stclcc	12, cr12, [ip, #820]	; 0x334
   16618:	svccc	0x00666666
   1661c:	svccc	0x008ccccd
   16620:	svccc	0x00800000
   16624:	ldrdeq	ip, [r1], -r4
   16628:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1662c:	ldm	r1, {r6, ip}
   16630:	cmp	r6, ip
   16634:	bcs	166f0 <__assert_fail@plt+0x52dc>
   16638:	mov	sl, r2
   1663c:	mov	r5, r0
   16640:	mov	r8, r1
   16644:	add	r6, r6, #8
   16648:	mov	r9, #0
   1664c:	ldr	fp, [r6, #-8]
   16650:	mov	r7, r6
   16654:	cmp	fp, #0
   16658:	beq	166e4 <__assert_fail@plt+0x52d0>
   1665c:	ldr	r4, [r6, #-4]
   16660:	cmp	r4, #0
   16664:	bne	16684 <__assert_fail@plt+0x5270>
   16668:	b	166d4 <__assert_fail@plt+0x52c0>
   1666c:	ldr	r3, [r0, #4]
   16670:	cmp	r2, #0
   16674:	str	r3, [r4, #4]
   16678:	str	r4, [r0, #4]
   1667c:	mov	r4, r2
   16680:	beq	166d0 <__assert_fail@plt+0x52bc>
   16684:	ldr	fp, [r4]
   16688:	mov	r0, r5
   1668c:	mov	r1, fp
   16690:	bl	16448 <__assert_fail@plt+0x5034>
   16694:	ldr	r2, [r4, #4]
   16698:	ldr	r1, [r0]
   1669c:	cmp	r1, #0
   166a0:	bne	1666c <__assert_fail@plt+0x5258>
   166a4:	ldr	ip, [r5, #12]
   166a8:	str	fp, [r0]
   166ac:	add	r3, ip, #1
   166b0:	str	r3, [r5, #12]
   166b4:	str	r1, [r4]
   166b8:	ldr	r3, [r5, #36]	; 0x24
   166bc:	cmp	r2, #0
   166c0:	str	r3, [r4, #4]
   166c4:	str	r4, [r5, #36]	; 0x24
   166c8:	mov	r4, r2
   166cc:	bne	16684 <__assert_fail@plt+0x5270>
   166d0:	ldr	fp, [r6, #-8]
   166d4:	cmp	sl, #0
   166d8:	str	r9, [r6, #-4]
   166dc:	beq	166f8 <__assert_fail@plt+0x52e4>
   166e0:	ldr	ip, [r8, #4]
   166e4:	cmp	ip, r7
   166e8:	add	r6, r6, #8
   166ec:	bhi	1664c <__assert_fail@plt+0x5238>
   166f0:	mov	r0, #1
   166f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166f8:	mov	r1, fp
   166fc:	mov	r0, r5
   16700:	bl	16448 <__assert_fail@plt+0x5034>
   16704:	ldr	r2, [r0]
   16708:	mov	r4, r0
   1670c:	cmp	r2, #0
   16710:	beq	1675c <__assert_fail@plt+0x5348>
   16714:	ldr	r0, [r5, #36]	; 0x24
   16718:	cmp	r0, #0
   1671c:	beq	16770 <__assert_fail@plt+0x535c>
   16720:	ldr	r2, [r0, #4]
   16724:	str	r2, [r5, #36]	; 0x24
   16728:	ldr	r2, [r4, #4]
   1672c:	str	fp, [r0]
   16730:	str	r2, [r0, #4]
   16734:	str	r0, [r4, #4]
   16738:	str	r9, [r6, #-8]
   1673c:	ldr	r3, [r8, #12]
   16740:	ldr	ip, [r8, #4]
   16744:	sub	r3, r3, #1
   16748:	cmp	ip, r7
   1674c:	str	r3, [r8, #12]
   16750:	add	r6, r6, #8
   16754:	bhi	1664c <__assert_fail@plt+0x5238>
   16758:	b	166f0 <__assert_fail@plt+0x52dc>
   1675c:	ldr	r2, [r5, #12]
   16760:	str	fp, [r0]
   16764:	add	r3, r2, #1
   16768:	str	r3, [r5, #12]
   1676c:	b	16738 <__assert_fail@plt+0x5324>
   16770:	mov	r0, #8
   16774:	bl	1a7a8 <__assert_fail@plt+0x9394>
   16778:	cmp	r0, #0
   1677c:	bne	16728 <__assert_fail@plt+0x5314>
   16780:	mov	r0, sl
   16784:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16788:	ldr	r0, [r0, #8]
   1678c:	bx	lr
   16790:	ldr	r0, [r0, #12]
   16794:	bx	lr
   16798:	ldr	r0, [r0, #16]
   1679c:	bx	lr
   167a0:	ldm	r0, {r1, ip}
   167a4:	mov	r0, #0
   167a8:	cmp	r1, ip
   167ac:	bcs	167f4 <__assert_fail@plt+0x53e0>
   167b0:	ldr	r3, [r1]
   167b4:	cmp	r3, #0
   167b8:	beq	167e4 <__assert_fail@plt+0x53d0>
   167bc:	ldr	r3, [r1, #4]
   167c0:	mov	r2, #1
   167c4:	cmp	r3, #0
   167c8:	beq	167dc <__assert_fail@plt+0x53c8>
   167cc:	ldr	r3, [r3, #4]
   167d0:	add	r2, r2, #1
   167d4:	cmp	r3, #0
   167d8:	bne	167cc <__assert_fail@plt+0x53b8>
   167dc:	cmp	r0, r2
   167e0:	movcc	r0, r2
   167e4:	add	r1, r1, #8
   167e8:	cmp	r1, ip
   167ec:	bcc	167b0 <__assert_fail@plt+0x539c>
   167f0:	bx	lr
   167f4:	bx	lr
   167f8:	push	{lr}		; (str lr, [sp, #-4]!)
   167fc:	mov	r2, #0
   16800:	ldm	r0, {r1, lr}
   16804:	mov	ip, r2
   16808:	cmp	r1, lr
   1680c:	bcs	1684c <__assert_fail@plt+0x5438>
   16810:	ldr	r3, [r1]
   16814:	cmp	r3, #0
   16818:	beq	16840 <__assert_fail@plt+0x542c>
   1681c:	ldr	r3, [r1, #4]
   16820:	add	ip, ip, #1
   16824:	cmp	r3, #0
   16828:	add	r2, r2, #1
   1682c:	beq	16840 <__assert_fail@plt+0x542c>
   16830:	ldr	r3, [r3, #4]
   16834:	add	r2, r2, #1
   16838:	cmp	r3, #0
   1683c:	bne	16830 <__assert_fail@plt+0x541c>
   16840:	add	r1, r1, #8
   16844:	cmp	r1, lr
   16848:	bcc	16810 <__assert_fail@plt+0x53fc>
   1684c:	ldr	r3, [r0, #12]
   16850:	cmp	r3, ip
   16854:	ldreq	r0, [r0, #16]
   16858:	subeq	r0, r0, r2
   1685c:	clzeq	r0, r0
   16860:	lsreq	r0, r0, #5
   16864:	movne	r0, #0
   16868:	pop	{pc}		; (ldr pc, [sp], #4)
   1686c:	push	{r4, r5, r6, r7, lr}
   16870:	mov	r5, r1
   16874:	ldm	r0, {ip, lr}
   16878:	sub	sp, sp, #12
   1687c:	ldr	r3, [r0, #16]
   16880:	cmp	ip, lr
   16884:	mov	r4, #0
   16888:	ldr	r6, [r0, #8]
   1688c:	ldr	r7, [r0, #12]
   16890:	bcs	168d4 <__assert_fail@plt+0x54c0>
   16894:	ldr	r2, [ip]
   16898:	cmp	r2, #0
   1689c:	beq	168c8 <__assert_fail@plt+0x54b4>
   168a0:	ldr	r2, [ip, #4]
   168a4:	mov	r1, #1
   168a8:	cmp	r2, #0
   168ac:	beq	168c0 <__assert_fail@plt+0x54ac>
   168b0:	ldr	r2, [r2, #4]
   168b4:	add	r1, r1, #1
   168b8:	cmp	r2, #0
   168bc:	bne	168b0 <__assert_fail@plt+0x549c>
   168c0:	cmp	r4, r1
   168c4:	movcc	r4, r1
   168c8:	add	ip, ip, #8
   168cc:	cmp	ip, lr
   168d0:	bcc	16894 <__assert_fail@plt+0x5480>
   168d4:	ldr	r2, [pc, #116]	; 16950 <__assert_fail@plt+0x553c>
   168d8:	mov	r1, #1
   168dc:	mov	r0, r5
   168e0:	bl	11324 <__fprintf_chk@plt>
   168e4:	mov	r3, r6
   168e8:	ldr	r2, [pc, #100]	; 16954 <__assert_fail@plt+0x5540>
   168ec:	mov	r1, #1
   168f0:	mov	r0, r5
   168f4:	bl	11324 <__fprintf_chk@plt>
   168f8:	vmov	s15, r7
   168fc:	vldr	d5, [pc, #68]	; 16948 <__assert_fail@plt+0x5534>
   16900:	mov	r3, r7
   16904:	ldr	r2, [pc, #76]	; 16958 <__assert_fail@plt+0x5544>
   16908:	vcvt.f64.u32	d6, s15
   1690c:	vmov	s15, r6
   16910:	mov	r1, #1
   16914:	mov	r0, r5
   16918:	vcvt.f64.u32	d7, s15
   1691c:	vmul.f64	d6, d6, d5
   16920:	vdiv.f64	d5, d6, d7
   16924:	vstr	d5, [sp]
   16928:	bl	11324 <__fprintf_chk@plt>
   1692c:	mov	r3, r4
   16930:	mov	r0, r5
   16934:	ldr	r2, [pc, #32]	; 1695c <__assert_fail@plt+0x5548>
   16938:	mov	r1, #1
   1693c:	add	sp, sp, #12
   16940:	pop	{r4, r5, r6, r7, lr}
   16944:	b	11324 <__fprintf_chk@plt>
   16948:	andeq	r0, r0, r0
   1694c:	subsmi	r0, r9, r0
   16950:	andeq	ip, r1, r8, ror #19
   16954:	andeq	ip, r1, r0, lsl #20
   16958:	andeq	ip, r1, r8, lsl sl
   1695c:	andeq	ip, r1, ip, lsr sl
   16960:	push	{r4, r5, r6, lr}
   16964:	mov	r6, r0
   16968:	mov	r5, r1
   1696c:	bl	16448 <__assert_fail@plt+0x5034>
   16970:	ldr	r3, [r0]
   16974:	cmp	r3, #0
   16978:	movne	r4, r0
   1697c:	bne	16988 <__assert_fail@plt+0x5574>
   16980:	b	169b4 <__assert_fail@plt+0x55a0>
   16984:	ldr	r3, [r4]
   16988:	cmp	r5, r3
   1698c:	mov	r1, r3
   16990:	mov	r0, r5
   16994:	beq	169bc <__assert_fail@plt+0x55a8>
   16998:	ldr	r3, [r6, #28]
   1699c:	blx	r3
   169a0:	cmp	r0, #0
   169a4:	bne	169c4 <__assert_fail@plt+0x55b0>
   169a8:	ldr	r4, [r4, #4]
   169ac:	cmp	r4, #0
   169b0:	bne	16984 <__assert_fail@plt+0x5570>
   169b4:	mov	r0, #0
   169b8:	pop	{r4, r5, r6, pc}
   169bc:	mov	r0, r5
   169c0:	pop	{r4, r5, r6, pc}
   169c4:	ldr	r0, [r4]
   169c8:	pop	{r4, r5, r6, pc}
   169cc:	ldr	r3, [r0, #16]
   169d0:	cmp	r3, #0
   169d4:	beq	16a08 <__assert_fail@plt+0x55f4>
   169d8:	ldr	r3, [r0]
   169dc:	ldr	r2, [r0, #4]
   169e0:	cmp	r3, r2
   169e4:	bcc	169f8 <__assert_fail@plt+0x55e4>
   169e8:	b	16a10 <__assert_fail@plt+0x55fc>
   169ec:	add	r3, r3, #8
   169f0:	cmp	r3, r2
   169f4:	bcs	16a10 <__assert_fail@plt+0x55fc>
   169f8:	ldr	r0, [r3]
   169fc:	cmp	r0, #0
   16a00:	beq	169ec <__assert_fail@plt+0x55d8>
   16a04:	bx	lr
   16a08:	mov	r0, r3
   16a0c:	bx	lr
   16a10:	push	{r4, lr}
   16a14:	bl	113f0 <abort@plt>
   16a18:	push	{r4, r5, r6, lr}
   16a1c:	mov	r5, r0
   16a20:	mov	r4, r1
   16a24:	bl	16448 <__assert_fail@plt+0x5034>
   16a28:	mov	r2, r0
   16a2c:	mov	r3, r0
   16a30:	b	16a3c <__assert_fail@plt+0x5628>
   16a34:	cmp	r3, #0
   16a38:	beq	16a50 <__assert_fail@plt+0x563c>
   16a3c:	ldm	r3, {r1, r3}
   16a40:	cmp	r4, r1
   16a44:	bne	16a34 <__assert_fail@plt+0x5620>
   16a48:	cmp	r3, #0
   16a4c:	bne	16a78 <__assert_fail@plt+0x5664>
   16a50:	ldr	r3, [r5, #4]
   16a54:	b	16a64 <__assert_fail@plt+0x5650>
   16a58:	ldr	r0, [r2]
   16a5c:	cmp	r0, #0
   16a60:	popne	{r4, r5, r6, pc}
   16a64:	add	r2, r2, #8
   16a68:	cmp	r2, r3
   16a6c:	bcc	16a58 <__assert_fail@plt+0x5644>
   16a70:	mov	r0, #0
   16a74:	pop	{r4, r5, r6, pc}
   16a78:	ldr	r0, [r3]
   16a7c:	pop	{r4, r5, r6, pc}
   16a80:	push	{r4, r5, r6, lr}
   16a84:	ldm	r0, {r5, lr}
   16a88:	cmp	r5, lr
   16a8c:	bcs	16b10 <__assert_fail@plt+0x56fc>
   16a90:	add	r5, r5, #8
   16a94:	mov	ip, #0
   16a98:	ldr	r3, [r5, #-8]
   16a9c:	mov	r6, r5
   16aa0:	cmp	r3, #0
   16aa4:	beq	16af0 <__assert_fail@plt+0x56dc>
   16aa8:	cmp	r2, ip
   16aac:	bls	16afc <__assert_fail@plt+0x56e8>
   16ab0:	str	r3, [r1, ip, lsl #2]
   16ab4:	ldr	r3, [r5, #-4]
   16ab8:	add	r4, ip, #1
   16abc:	cmp	r3, #0
   16ac0:	add	lr, r1, ip, lsl #2
   16ac4:	beq	16b04 <__assert_fail@plt+0x56f0>
   16ac8:	mov	ip, r4
   16acc:	cmp	r2, ip
   16ad0:	beq	16afc <__assert_fail@plt+0x56e8>
   16ad4:	ldr	r4, [r3]
   16ad8:	add	ip, ip, #1
   16adc:	str	r4, [lr, #4]!
   16ae0:	ldr	r3, [r3, #4]
   16ae4:	cmp	r3, #0
   16ae8:	bne	16acc <__assert_fail@plt+0x56b8>
   16aec:	ldr	lr, [r0, #4]
   16af0:	cmp	lr, r6
   16af4:	add	r5, r5, #8
   16af8:	bhi	16a98 <__assert_fail@plt+0x5684>
   16afc:	mov	r0, ip
   16b00:	pop	{r4, r5, r6, pc}
   16b04:	ldr	lr, [r0, #4]
   16b08:	mov	ip, r4
   16b0c:	b	16af0 <__assert_fail@plt+0x56dc>
   16b10:	mov	ip, #0
   16b14:	b	16afc <__assert_fail@plt+0x56e8>
   16b18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b1c:	ldr	r3, [r0, #4]
   16b20:	ldr	r8, [r0]
   16b24:	cmp	r8, r3
   16b28:	bcs	16b8c <__assert_fail@plt+0x5778>
   16b2c:	mov	r7, r2
   16b30:	mov	r6, r1
   16b34:	mov	r9, r0
   16b38:	mov	r5, #0
   16b3c:	ldr	r0, [r8]
   16b40:	cmp	r0, #0
   16b44:	beq	16b78 <__assert_fail@plt+0x5764>
   16b48:	mov	r4, r8
   16b4c:	b	16b54 <__assert_fail@plt+0x5740>
   16b50:	ldr	r0, [r4]
   16b54:	mov	r1, r7
   16b58:	blx	r6
   16b5c:	cmp	r0, #0
   16b60:	beq	16b84 <__assert_fail@plt+0x5770>
   16b64:	ldr	r4, [r4, #4]
   16b68:	add	r5, r5, #1
   16b6c:	cmp	r4, #0
   16b70:	bne	16b50 <__assert_fail@plt+0x573c>
   16b74:	ldr	r3, [r9, #4]
   16b78:	add	r8, r8, #8
   16b7c:	cmp	r3, r8
   16b80:	bhi	16b3c <__assert_fail@plt+0x5728>
   16b84:	mov	r0, r5
   16b88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b8c:	mov	r5, #0
   16b90:	b	16b84 <__assert_fail@plt+0x5770>
   16b94:	push	{r4, r5, r6, lr}
   16b98:	mov	r4, r0
   16b9c:	ldrb	r0, [r0]
   16ba0:	cmp	r0, #0
   16ba4:	beq	16bd4 <__assert_fail@plt+0x57c0>
   16ba8:	mov	r5, r1
   16bac:	mov	r1, #0
   16bb0:	rsb	r1, r1, r1, lsl #5
   16bb4:	add	r0, r1, r0
   16bb8:	mov	r1, r5
   16bbc:	bl	1af54 <__assert_fail@plt+0x9b40>
   16bc0:	ldrb	r0, [r4, #1]!
   16bc4:	cmp	r0, #0
   16bc8:	bne	16bb0 <__assert_fail@plt+0x579c>
   16bcc:	mov	r0, r1
   16bd0:	pop	{r4, r5, r6, pc}
   16bd4:	mov	r1, r0
   16bd8:	b	16bcc <__assert_fail@plt+0x57b8>
   16bdc:	push	{lr}		; (str lr, [sp, #-4]!)
   16be0:	mov	ip, r0
   16be4:	ldr	lr, [pc, #16]	; 16bfc <__assert_fail@plt+0x57e8>
   16be8:	ldm	lr!, {r0, r1, r2, r3}
   16bec:	ldr	lr, [lr]
   16bf0:	stmia	ip!, {r0, r1, r2, r3}
   16bf4:	str	lr, [ip]
   16bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bfc:	ldrdeq	ip, [r1], -r4
   16c00:	push	{r4, r5, r6, r7, lr}
   16c04:	sub	sp, sp, #12
   16c08:	cmp	r2, #0
   16c0c:	str	r0, [sp, #4]
   16c10:	ldr	r6, [pc, #304]	; 16d48 <__assert_fail@plt+0x5934>
   16c14:	mov	r0, #40	; 0x28
   16c18:	movne	r6, r2
   16c1c:	cmp	r3, #0
   16c20:	ldr	r7, [pc, #292]	; 16d4c <__assert_fail@plt+0x5938>
   16c24:	mov	r5, r1
   16c28:	movne	r7, r3
   16c2c:	bl	1a7a8 <__assert_fail@plt+0x9394>
   16c30:	subs	r4, r0, #0
   16c34:	beq	16ccc <__assert_fail@plt+0x58b8>
   16c38:	cmp	r5, #0
   16c3c:	beq	16d20 <__assert_fail@plt+0x590c>
   16c40:	mov	r0, r4
   16c44:	str	r5, [r0, #20]!
   16c48:	bl	16578 <__assert_fail@plt+0x5164>
   16c4c:	cmp	r0, #0
   16c50:	beq	16d08 <__assert_fail@plt+0x58f4>
   16c54:	ldrb	r3, [r5, #16]
   16c58:	cmp	r3, #0
   16c5c:	beq	16cd8 <__assert_fail@plt+0x58c4>
   16c60:	ldr	r0, [sp, #4]
   16c64:	bl	16380 <__assert_fail@plt+0x4f6c>
   16c68:	lsrs	r2, r0, #30
   16c6c:	movne	r5, #1
   16c70:	moveq	r5, #0
   16c74:	tst	r0, #536870912	; 0x20000000
   16c78:	bne	16d00 <__assert_fail@plt+0x58ec>
   16c7c:	cmp	r5, #0
   16c80:	bne	16d00 <__assert_fail@plt+0x58ec>
   16c84:	cmp	r0, #0
   16c88:	str	r0, [r4, #8]
   16c8c:	beq	16d08 <__assert_fail@plt+0x58f4>
   16c90:	mov	r1, #8
   16c94:	bl	1a760 <__assert_fail@plt+0x934c>
   16c98:	cmp	r0, #0
   16c9c:	str	r0, [r4]
   16ca0:	beq	16d08 <__assert_fail@plt+0x58f4>
   16ca4:	ldr	r3, [r4, #8]
   16ca8:	str	r5, [r4, #12]
   16cac:	str	r5, [r4, #16]
   16cb0:	add	r0, r0, r3, lsl #3
   16cb4:	ldr	r3, [sp, #32]
   16cb8:	str	r6, [r4, #24]
   16cbc:	str	r7, [r4, #28]
   16cc0:	str	r3, [r4, #32]
   16cc4:	str	r5, [r4, #36]	; 0x24
   16cc8:	str	r0, [r4, #4]
   16ccc:	mov	r0, r4
   16cd0:	add	sp, sp, #12
   16cd4:	pop	{r4, r5, r6, r7, pc}
   16cd8:	vldr	s12, [r5, #8]
   16cdc:	vldr	s15, [sp, #4]
   16ce0:	vldr	s14, [pc, #88]	; 16d40 <__assert_fail@plt+0x592c>
   16ce4:	vcvt.f32.u32	s13, s15
   16ce8:	vdiv.f32	s15, s13, s12
   16cec:	vcmpe.f32	s15, s14
   16cf0:	vmrs	APSR_nzcv, fpscr
   16cf4:	vcvtlt.u32.f32	s15, s15
   16cf8:	vstrlt	s15, [sp, #4]
   16cfc:	blt	16c60 <__assert_fail@plt+0x584c>
   16d00:	mov	r3, #0
   16d04:	str	r3, [r4, #8]
   16d08:	mov	r0, r4
   16d0c:	bl	16324 <__assert_fail@plt+0x4f10>
   16d10:	mov	r4, #0
   16d14:	mov	r0, r4
   16d18:	add	sp, sp, #12
   16d1c:	pop	{r4, r5, r6, r7, pc}
   16d20:	ldr	r3, [pc, #40]	; 16d50 <__assert_fail@plt+0x593c>
   16d24:	mov	r0, r4
   16d28:	str	r3, [r0, #20]!
   16d2c:	bl	16578 <__assert_fail@plt+0x5164>
   16d30:	cmp	r0, #0
   16d34:	vldrne	s12, [pc, #8]	; 16d44 <__assert_fail@plt+0x5930>
   16d38:	bne	16cdc <__assert_fail@plt+0x58c8>
   16d3c:	b	16d08 <__assert_fail@plt+0x58f4>
   16d40:	svcmi	0x00800000
   16d44:	svccc	0x004ccccd
   16d48:	andeq	r6, r1, r4, lsr #8
   16d4c:	andeq	r6, r1, r8, lsr r4
   16d50:	ldrdeq	ip, [r1], -r4
   16d54:	push	{r4, r5, r6, r7, r8, lr}
   16d58:	mov	r5, r0
   16d5c:	ldr	r7, [r0]
   16d60:	ldr	r3, [r0, #4]
   16d64:	cmp	r7, r3
   16d68:	addcc	r7, r7, #8
   16d6c:	movcc	r6, #0
   16d70:	bcs	16dec <__assert_fail@plt+0x59d8>
   16d74:	ldr	r2, [r7, #-8]
   16d78:	mov	r8, r7
   16d7c:	cmp	r2, #0
   16d80:	beq	16de0 <__assert_fail@plt+0x59cc>
   16d84:	ldr	r4, [r7, #-4]
   16d88:	ldr	r2, [r5, #32]
   16d8c:	cmp	r4, #0
   16d90:	beq	16dc4 <__assert_fail@plt+0x59b0>
   16d94:	cmp	r2, #0
   16d98:	beq	16da8 <__assert_fail@plt+0x5994>
   16d9c:	ldr	r0, [r4]
   16da0:	blx	r2
   16da4:	ldr	r2, [r5, #32]
   16da8:	ldr	r3, [r4, #4]
   16dac:	ldr	r1, [r5, #36]	; 0x24
   16db0:	str	r6, [r4]
   16db4:	str	r1, [r4, #4]
   16db8:	str	r4, [r5, #36]	; 0x24
   16dbc:	subs	r4, r3, #0
   16dc0:	bne	16d94 <__assert_fail@plt+0x5980>
   16dc4:	cmp	r2, #0
   16dc8:	beq	16dd4 <__assert_fail@plt+0x59c0>
   16dcc:	ldr	r0, [r7, #-8]
   16dd0:	blx	r2
   16dd4:	str	r6, [r7, #-8]
   16dd8:	str	r6, [r7, #-4]
   16ddc:	ldr	r3, [r5, #4]
   16de0:	cmp	r3, r8
   16de4:	add	r7, r7, #8
   16de8:	bhi	16d74 <__assert_fail@plt+0x5960>
   16dec:	mov	r3, #0
   16df0:	str	r3, [r5, #12]
   16df4:	str	r3, [r5, #16]
   16df8:	pop	{r4, r5, r6, r7, r8, pc}
   16dfc:	ldr	r3, [r0, #32]
   16e00:	push	{r4, r5, r6, lr}
   16e04:	cmp	r3, #0
   16e08:	mov	r5, r0
   16e0c:	beq	16e6c <__assert_fail@plt+0x5a58>
   16e10:	ldr	r3, [r0, #16]
   16e14:	cmp	r3, #0
   16e18:	beq	16e6c <__assert_fail@plt+0x5a58>
   16e1c:	ldr	r6, [r0]
   16e20:	ldr	r3, [r0, #4]
   16e24:	cmp	r6, r3
   16e28:	bcs	16ea8 <__assert_fail@plt+0x5a94>
   16e2c:	ldr	r0, [r6]
   16e30:	cmp	r0, #0
   16e34:	movne	r4, r6
   16e38:	bne	16e44 <__assert_fail@plt+0x5a30>
   16e3c:	b	16e5c <__assert_fail@plt+0x5a48>
   16e40:	ldr	r0, [r4]
   16e44:	ldr	r3, [r5, #32]
   16e48:	blx	r3
   16e4c:	ldr	r4, [r4, #4]
   16e50:	cmp	r4, #0
   16e54:	bne	16e40 <__assert_fail@plt+0x5a2c>
   16e58:	ldr	r3, [r5, #4]
   16e5c:	add	r6, r6, #8
   16e60:	cmp	r3, r6
   16e64:	bhi	16e2c <__assert_fail@plt+0x5a18>
   16e68:	b	16e70 <__assert_fail@plt+0x5a5c>
   16e6c:	ldr	r3, [r5, #4]
   16e70:	ldr	r6, [r5]
   16e74:	cmp	r3, r6
   16e78:	bls	16ea8 <__assert_fail@plt+0x5a94>
   16e7c:	ldr	r0, [r6, #4]
   16e80:	cmp	r0, #0
   16e84:	beq	16e9c <__assert_fail@plt+0x5a88>
   16e88:	ldr	r4, [r0, #4]
   16e8c:	bl	16324 <__assert_fail@plt+0x4f10>
   16e90:	subs	r0, r4, #0
   16e94:	bne	16e88 <__assert_fail@plt+0x5a74>
   16e98:	ldr	r3, [r5, #4]
   16e9c:	add	r6, r6, #8
   16ea0:	cmp	r3, r6
   16ea4:	bhi	16e7c <__assert_fail@plt+0x5a68>
   16ea8:	ldr	r0, [r5, #36]	; 0x24
   16eac:	cmp	r0, #0
   16eb0:	beq	16ec4 <__assert_fail@plt+0x5ab0>
   16eb4:	ldr	r4, [r0, #4]
   16eb8:	bl	16324 <__assert_fail@plt+0x4f10>
   16ebc:	subs	r0, r4, #0
   16ec0:	bne	16eb4 <__assert_fail@plt+0x5aa0>
   16ec4:	ldr	r0, [r5]
   16ec8:	bl	16324 <__assert_fail@plt+0x4f10>
   16ecc:	mov	r0, r5
   16ed0:	pop	{r4, r5, r6, lr}
   16ed4:	b	16324 <__assert_fail@plt+0x4f10>
   16ed8:	ldr	r3, [r0, #20]
   16edc:	push	{r4, r5, r6, r7, lr}
   16ee0:	sub	sp, sp, #52	; 0x34
   16ee4:	ldrb	r2, [r3, #16]
   16ee8:	mov	r5, r0
   16eec:	str	r1, [sp, #4]
   16ef0:	cmp	r2, #0
   16ef4:	bne	16f20 <__assert_fail@plt+0x5b0c>
   16ef8:	vmov	s15, r1
   16efc:	vldr	s13, [r3, #8]
   16f00:	vldr	s14, [pc, #352]	; 17068 <__assert_fail@plt+0x5c54>
   16f04:	vcvt.f32.u32	s12, s15
   16f08:	vdiv.f32	s15, s12, s13
   16f0c:	vcmpe.f32	s15, s14
   16f10:	vmrs	APSR_nzcv, fpscr
   16f14:	bge	17024 <__assert_fail@plt+0x5c10>
   16f18:	vcvt.u32.f32	s15, s15
   16f1c:	vstr	s15, [sp, #4]
   16f20:	ldr	r0, [sp, #4]
   16f24:	bl	16380 <__assert_fail@plt+0x4f6c>
   16f28:	lsrs	r3, r0, #30
   16f2c:	movne	r2, #1
   16f30:	moveq	r2, #0
   16f34:	tst	r0, #536870912	; 0x20000000
   16f38:	movne	r2, #1
   16f3c:	cmp	r0, #0
   16f40:	movne	r4, r2
   16f44:	orreq	r4, r2, #1
   16f48:	cmp	r4, #0
   16f4c:	mov	r6, r0
   16f50:	bne	17024 <__assert_fail@plt+0x5c10>
   16f54:	ldr	r3, [r5, #8]
   16f58:	cmp	r3, r0
   16f5c:	beq	17014 <__assert_fail@plt+0x5c00>
   16f60:	mov	r1, #8
   16f64:	bl	1a760 <__assert_fail@plt+0x934c>
   16f68:	cmp	r0, #0
   16f6c:	str	r0, [sp, #8]
   16f70:	beq	17024 <__assert_fail@plt+0x5c10>
   16f74:	ldr	r1, [r5, #24]
   16f78:	ldr	r7, [r5, #20]
   16f7c:	ldr	lr, [r5, #28]
   16f80:	ldr	ip, [r5, #32]
   16f84:	add	r0, r0, r6, lsl #3
   16f88:	ldr	r3, [r5, #36]	; 0x24
   16f8c:	str	r0, [sp, #12]
   16f90:	mov	r2, r4
   16f94:	str	r1, [sp, #32]
   16f98:	add	r0, sp, #8
   16f9c:	mov	r1, r5
   16fa0:	str	r4, [sp, #20]
   16fa4:	str	r4, [sp, #24]
   16fa8:	str	r6, [sp, #16]
   16fac:	str	r7, [sp, #28]
   16fb0:	str	lr, [sp, #36]	; 0x24
   16fb4:	str	ip, [sp, #40]	; 0x28
   16fb8:	str	r3, [sp, #44]	; 0x2c
   16fbc:	bl	16628 <__assert_fail@plt+0x5214>
   16fc0:	subs	r4, r0, #0
   16fc4:	bne	17034 <__assert_fail@plt+0x5c20>
   16fc8:	ldr	r3, [sp, #44]	; 0x2c
   16fcc:	mov	r2, #1
   16fd0:	str	r3, [r5, #36]	; 0x24
   16fd4:	add	r1, sp, #8
   16fd8:	mov	r0, r5
   16fdc:	bl	16628 <__assert_fail@plt+0x5214>
   16fe0:	cmp	r0, #0
   16fe4:	beq	17064 <__assert_fail@plt+0x5c50>
   16fe8:	add	r1, sp, #8
   16fec:	mov	r0, r5
   16ff0:	mov	r2, r4
   16ff4:	bl	16628 <__assert_fail@plt+0x5214>
   16ff8:	cmp	r0, #0
   16ffc:	beq	17064 <__assert_fail@plt+0x5c50>
   17000:	ldr	r0, [sp, #8]
   17004:	bl	16324 <__assert_fail@plt+0x4f10>
   17008:	mov	r0, r4
   1700c:	add	sp, sp, #52	; 0x34
   17010:	pop	{r4, r5, r6, r7, pc}
   17014:	mov	r4, #1
   17018:	mov	r0, r4
   1701c:	add	sp, sp, #52	; 0x34
   17020:	pop	{r4, r5, r6, r7, pc}
   17024:	mov	r4, #0
   17028:	mov	r0, r4
   1702c:	add	sp, sp, #52	; 0x34
   17030:	pop	{r4, r5, r6, r7, pc}
   17034:	ldr	r0, [r5]
   17038:	bl	16324 <__assert_fail@plt+0x4f10>
   1703c:	add	r0, sp, #12
   17040:	ldr	ip, [sp, #8]
   17044:	ldm	r0, {r0, r1, r2}
   17048:	ldr	r3, [sp, #44]	; 0x2c
   1704c:	str	ip, [r5]
   17050:	stmib	r5, {r0, r1, r2}
   17054:	mov	r0, r4
   17058:	str	r3, [r5, #36]	; 0x24
   1705c:	add	sp, sp, #52	; 0x34
   17060:	pop	{r4, r5, r6, r7, pc}
   17064:	bl	113f0 <abort@plt>
   17068:	svcmi	0x00800000
   1706c:	push	{r4, r5, r6, lr}
   17070:	subs	r6, r1, #0
   17074:	sub	sp, sp, #8
   17078:	beq	171ac <__assert_fail@plt+0x5d98>
   1707c:	mov	r4, r2
   17080:	mov	r3, #0
   17084:	add	r2, sp, #4
   17088:	mov	r5, r0
   1708c:	bl	1647c <__assert_fail@plt+0x5068>
   17090:	cmp	r0, #0
   17094:	beq	170b0 <__assert_fail@plt+0x5c9c>
   17098:	cmp	r4, #0
   1709c:	moveq	r0, r4
   170a0:	strne	r0, [r4]
   170a4:	movne	r0, #0
   170a8:	add	sp, sp, #8
   170ac:	pop	{r4, r5, r6, pc}
   170b0:	vldr	s15, [r5, #8]
   170b4:	ldr	r3, [r5, #20]
   170b8:	vldr	s14, [r5, #12]
   170bc:	vcvt.f32.u32	s15, s15
   170c0:	vldr	s13, [r3, #8]
   170c4:	vcvt.f32.u32	s14, s14
   170c8:	vmul.f32	s15, s15, s13
   170cc:	vcmpe.f32	s14, s15
   170d0:	vmrs	APSR_nzcv, fpscr
   170d4:	bgt	17124 <__assert_fail@plt+0x5d10>
   170d8:	ldr	r2, [sp, #4]
   170dc:	ldr	r3, [r2]
   170e0:	cmp	r3, #0
   170e4:	beq	171b0 <__assert_fail@plt+0x5d9c>
   170e8:	ldr	r3, [r5, #36]	; 0x24
   170ec:	cmp	r3, #0
   170f0:	beq	171d4 <__assert_fail@plt+0x5dc0>
   170f4:	ldr	r1, [r3, #4]
   170f8:	str	r1, [r5, #36]	; 0x24
   170fc:	ldr	r1, [r5, #16]
   17100:	ldr	r0, [r2, #4]
   17104:	add	r1, r1, #1
   17108:	str	r0, [r3, #4]
   1710c:	str	r6, [r3]
   17110:	mov	r0, #1
   17114:	str	r3, [r2, #4]
   17118:	str	r1, [r5, #16]
   1711c:	add	sp, sp, #8
   17120:	pop	{r4, r5, r6, pc}
   17124:	add	r0, r5, #20
   17128:	bl	16578 <__assert_fail@plt+0x5164>
   1712c:	vldr	s15, [r5, #8]
   17130:	ldr	r3, [r5, #20]
   17134:	vldr	s14, [r5, #12]
   17138:	vcvt.f32.u32	s15, s15
   1713c:	vldr	s13, [r3, #8]
   17140:	vcvt.f32.u32	s14, s14
   17144:	vmul.f32	s12, s13, s15
   17148:	vcmpe.f32	s14, s12
   1714c:	vmrs	APSR_nzcv, fpscr
   17150:	ble	170d8 <__assert_fail@plt+0x5cc4>
   17154:	vldr	s14, [r3, #12]
   17158:	ldrb	r2, [r3, #16]
   1715c:	vmul.f32	s15, s15, s14
   17160:	cmp	r2, #0
   17164:	vldr	s14, [pc, #132]	; 171f0 <__assert_fail@plt+0x5ddc>
   17168:	vmuleq.f32	s15, s15, s13
   1716c:	vcmpe.f32	s15, s14
   17170:	vmrs	APSR_nzcv, fpscr
   17174:	bge	171e8 <__assert_fail@plt+0x5dd4>
   17178:	vcvt.u32.f32	s15, s15
   1717c:	mov	r0, r5
   17180:	vmov	r1, s15
   17184:	bl	16ed8 <__assert_fail@plt+0x5ac4>
   17188:	cmp	r0, #0
   1718c:	beq	171e8 <__assert_fail@plt+0x5dd4>
   17190:	add	r2, sp, #4
   17194:	mov	r3, #0
   17198:	mov	r1, r6
   1719c:	mov	r0, r5
   171a0:	bl	1647c <__assert_fail@plt+0x5068>
   171a4:	cmp	r0, #0
   171a8:	beq	170d8 <__assert_fail@plt+0x5cc4>
   171ac:	bl	113f0 <abort@plt>
   171b0:	ldr	r1, [r5, #16]
   171b4:	ldr	r3, [r5, #12]
   171b8:	add	r1, r1, #1
   171bc:	add	r3, r3, #1
   171c0:	str	r6, [r2]
   171c4:	mov	r0, #1
   171c8:	str	r1, [r5, #16]
   171cc:	str	r3, [r5, #12]
   171d0:	b	170a8 <__assert_fail@plt+0x5c94>
   171d4:	mov	r0, #8
   171d8:	bl	1a7a8 <__assert_fail@plt+0x9394>
   171dc:	subs	r3, r0, #0
   171e0:	ldrne	r2, [sp, #4]
   171e4:	bne	170fc <__assert_fail@plt+0x5ce8>
   171e8:	mvn	r0, #0
   171ec:	b	170a8 <__assert_fail@plt+0x5c94>
   171f0:	svcmi	0x00800000
   171f4:	push	{r4, lr}
   171f8:	sub	sp, sp, #8
   171fc:	add	r2, sp, #4
   17200:	mov	r4, r1
   17204:	bl	1706c <__assert_fail@plt+0x5c58>
   17208:	cmn	r0, #1
   1720c:	beq	17224 <__assert_fail@plt+0x5e10>
   17210:	cmp	r0, #0
   17214:	movne	r0, r4
   17218:	ldreq	r0, [sp, #4]
   1721c:	add	sp, sp, #8
   17220:	pop	{r4, pc}
   17224:	mov	r0, #0
   17228:	b	1721c <__assert_fail@plt+0x5e08>
   1722c:	push	{r4, r5, r6, lr}
   17230:	sub	sp, sp, #8
   17234:	mov	r3, #1
   17238:	add	r2, sp, #4
   1723c:	mov	r4, r0
   17240:	bl	1647c <__assert_fail@plt+0x5068>
   17244:	subs	r5, r0, #0
   17248:	beq	17268 <__assert_fail@plt+0x5e54>
   1724c:	ldr	r2, [sp, #4]
   17250:	ldr	r3, [r4, #16]
   17254:	ldr	r2, [r2]
   17258:	sub	r3, r3, #1
   1725c:	cmp	r2, #0
   17260:	str	r3, [r4, #16]
   17264:	beq	17274 <__assert_fail@plt+0x5e60>
   17268:	mov	r0, r5
   1726c:	add	sp, sp, #8
   17270:	pop	{r4, r5, r6, pc}
   17274:	vldr	s15, [r4, #8]
   17278:	ldr	r3, [r4, #12]
   1727c:	ldr	r2, [r4, #20]
   17280:	sub	r3, r3, #1
   17284:	vcvt.f32.u32	s14, s15
   17288:	vldr	s13, [r2]
   1728c:	vmov	s15, r3
   17290:	str	r3, [r4, #12]
   17294:	vcvt.f32.u32	s15, s15
   17298:	vmul.f32	s14, s14, s13
   1729c:	vcmpe.f32	s15, s14
   172a0:	vmrs	APSR_nzcv, fpscr
   172a4:	bpl	17268 <__assert_fail@plt+0x5e54>
   172a8:	add	r0, r4, #20
   172ac:	bl	16578 <__assert_fail@plt+0x5164>
   172b0:	vldr	s15, [r4, #8]
   172b4:	ldr	r3, [r4, #20]
   172b8:	vldr	s13, [r4, #12]
   172bc:	vcvt.f32.u32	s15, s15
   172c0:	vldr	s14, [r3]
   172c4:	vcvt.f32.u32	s13, s13
   172c8:	vmul.f32	s14, s15, s14
   172cc:	vcmpe.f32	s13, s14
   172d0:	vmrs	APSR_nzcv, fpscr
   172d4:	bpl	17268 <__assert_fail@plt+0x5e54>
   172d8:	ldrb	r2, [r3, #16]
   172dc:	mov	r0, r4
   172e0:	cmp	r2, #0
   172e4:	vldreq	s13, [r3, #4]
   172e8:	vldrne	s14, [r3, #4]
   172ec:	vldreq	s14, [r3, #8]
   172f0:	vmuleq.f32	s15, s15, s13
   172f4:	vmul.f32	s15, s15, s14
   172f8:	vcvt.u32.f32	s15, s15
   172fc:	vmov	r1, s15
   17300:	bl	16ed8 <__assert_fail@plt+0x5ac4>
   17304:	cmp	r0, #0
   17308:	bne	17268 <__assert_fail@plt+0x5e54>
   1730c:	ldr	r0, [r4, #36]	; 0x24
   17310:	cmp	r0, #0
   17314:	beq	17328 <__assert_fail@plt+0x5f14>
   17318:	ldr	r6, [r0, #4]
   1731c:	bl	16324 <__assert_fail@plt+0x4f10>
   17320:	subs	r0, r6, #0
   17324:	bne	17318 <__assert_fail@plt+0x5f04>
   17328:	mov	r3, #0
   1732c:	str	r3, [r4, #36]	; 0x24
   17330:	b	17268 <__assert_fail@plt+0x5e54>
   17334:	b	1722c <__assert_fail@plt+0x5e18>
   17338:	cmp	r0, #0
   1733c:	sbcs	r3, r1, #0
   17340:	mov	r3, #0
   17344:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17348:	mov	r4, r0
   1734c:	mov	r5, r1
   17350:	strb	r3, [r2, #20]
   17354:	add	r6, r2, #20
   17358:	mov	r8, #10
   1735c:	mov	r9, #0
   17360:	blt	173b0 <__assert_fail@plt+0x5f9c>
   17364:	mov	r0, r4
   17368:	mov	r1, r5
   1736c:	mov	r2, r8
   17370:	mov	r3, r9
   17374:	bl	1b1b4 <__assert_fail@plt+0x9da0>
   17378:	mov	r0, r4
   1737c:	mov	r1, r5
   17380:	mov	r3, r9
   17384:	add	r2, r2, #48	; 0x30
   17388:	strb	r2, [r6, #-1]!
   1738c:	mov	r2, r8
   17390:	bl	1b1b4 <__assert_fail@plt+0x9da0>
   17394:	mov	r4, r0
   17398:	mov	r5, r1
   1739c:	orrs	r3, r4, r5
   173a0:	bne	17364 <__assert_fail@plt+0x5f50>
   173a4:	mov	r0, r6
   173a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   173ac:	mov	r6, r7
   173b0:	mov	r0, r4
   173b4:	mov	r1, r5
   173b8:	mov	r2, r8
   173bc:	mov	r3, r9
   173c0:	bl	1b1b4 <__assert_fail@plt+0x9da0>
   173c4:	mov	r0, r4
   173c8:	mov	r1, r5
   173cc:	mov	r3, r9
   173d0:	sub	r7, r6, #1
   173d4:	rsb	r2, r2, #48	; 0x30
   173d8:	strb	r2, [r6, #-1]
   173dc:	mov	r2, r8
   173e0:	bl	1b1b4 <__assert_fail@plt+0x9da0>
   173e4:	mov	r4, r0
   173e8:	mov	r5, r1
   173ec:	orrs	r3, r4, r5
   173f0:	bne	173ac <__assert_fail@plt+0x5f98>
   173f4:	mov	r3, #45	; 0x2d
   173f8:	sub	r6, r6, #2
   173fc:	strb	r3, [r7, #-1]
   17400:	mov	r0, r6
   17404:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17408:	push	{lr}		; (str lr, [sp, #-4]!)
   1740c:	sub	sp, sp, #12
   17410:	ldr	r0, [pc, #72]	; 17460 <__assert_fail@plt+0x604c>
   17414:	bl	11234 <getenv@plt>
   17418:	subs	r3, r0, #0
   1741c:	beq	1742c <__assert_fail@plt+0x6018>
   17420:	ldrb	r3, [r3]
   17424:	cmp	r3, #0
   17428:	bne	17438 <__assert_fail@plt+0x6024>
   1742c:	ldr	r0, [pc, #48]	; 17464 <__assert_fail@plt+0x6050>
   17430:	add	sp, sp, #12
   17434:	pop	{pc}		; (ldr pc, [sp], #4)
   17438:	mov	r2, #10
   1743c:	add	r1, sp, #4
   17440:	bl	110d8 <strtol@plt>
   17444:	ldr	r2, [sp, #4]
   17448:	ldr	r3, [pc, #20]	; 17464 <__assert_fail@plt+0x6050>
   1744c:	ldrb	r2, [r2]
   17450:	cmp	r2, #0
   17454:	movne	r0, r3
   17458:	add	sp, sp, #12
   1745c:	pop	{pc}		; (ldr pc, [sp], #4)
   17460:	andeq	ip, r1, r4, asr sl
   17464:	andeq	r1, r3, r9, rrx
   17468:	push	{r4, r5, r6, lr}
   1746c:	subs	r4, r0, #0
   17470:	beq	174e4 <__assert_fail@plt+0x60d0>
   17474:	mov	r1, #47	; 0x2f
   17478:	bl	11384 <strrchr@plt>
   1747c:	subs	r5, r0, #0
   17480:	beq	174d0 <__assert_fail@plt+0x60bc>
   17484:	add	r6, r5, #1
   17488:	sub	r3, r6, r4
   1748c:	cmp	r3, #6
   17490:	ble	174d0 <__assert_fail@plt+0x60bc>
   17494:	mov	r2, #7
   17498:	ldr	r1, [pc, #96]	; 17500 <__assert_fail@plt+0x60ec>
   1749c:	sub	r0, r5, #6
   174a0:	bl	113e4 <strncmp@plt>
   174a4:	cmp	r0, #0
   174a8:	bne	174d0 <__assert_fail@plt+0x60bc>
   174ac:	mov	r2, #3
   174b0:	ldr	r1, [pc, #76]	; 17504 <__assert_fail@plt+0x60f0>
   174b4:	mov	r0, r6
   174b8:	bl	113e4 <strncmp@plt>
   174bc:	cmp	r0, #0
   174c0:	movne	r4, r6
   174c4:	ldreq	r3, [pc, #60]	; 17508 <__assert_fail@plt+0x60f4>
   174c8:	addeq	r4, r5, #4
   174cc:	streq	r4, [r3]
   174d0:	ldr	r2, [pc, #52]	; 1750c <__assert_fail@plt+0x60f8>
   174d4:	ldr	r3, [pc, #52]	; 17510 <__assert_fail@plt+0x60fc>
   174d8:	str	r4, [r2]
   174dc:	str	r4, [r3]
   174e0:	pop	{r4, r5, r6, pc}
   174e4:	ldr	r3, [pc, #40]	; 17514 <__assert_fail@plt+0x6100>
   174e8:	mov	r2, #55	; 0x37
   174ec:	mov	r1, #1
   174f0:	ldr	r3, [r3]
   174f4:	ldr	r0, [pc, #28]	; 17518 <__assert_fail@plt+0x6104>
   174f8:	bl	111e0 <fwrite@plt>
   174fc:	bl	113f0 <abort@plt>
   17500:	muleq	r1, ip, sl
   17504:	andeq	ip, r1, r4, lsr #21
   17508:			; <UNDEFINED> instruction: 0x0002e1b0
   1750c:	andeq	lr, r2, ip, ror #3
   17510:			; <UNDEFINED> instruction: 0x0002e1b4
   17514:	andeq	lr, r2, r0, asr #3
   17518:	andeq	ip, r1, r4, ror #20
   1751c:	push	{r4, r5, r6, lr}
   17520:	mov	r2, #48	; 0x30
   17524:	mov	r4, r1
   17528:	mov	r1, #0
   1752c:	mov	r5, r0
   17530:	bl	112f4 <memset@plt>
   17534:	cmp	r4, #10
   17538:	beq	17548 <__assert_fail@plt+0x6134>
   1753c:	str	r4, [r5]
   17540:	mov	r0, r5
   17544:	pop	{r4, r5, r6, pc}
   17548:	bl	113f0 <abort@plt>
   1754c:	push	{r4, r5, r6, lr}
   17550:	mov	r4, r0
   17554:	mov	r5, r1
   17558:	bl	1ab94 <__assert_fail@plt+0x9780>
   1755c:	ldrb	r3, [r0]
   17560:	bic	r3, r3, #32
   17564:	cmp	r3, #85	; 0x55
   17568:	bne	175c8 <__assert_fail@plt+0x61b4>
   1756c:	ldrb	r3, [r0, #1]
   17570:	bic	r3, r3, #32
   17574:	cmp	r3, #84	; 0x54
   17578:	bne	17604 <__assert_fail@plt+0x61f0>
   1757c:	ldrb	r3, [r0, #2]
   17580:	bic	r3, r3, #32
   17584:	cmp	r3, #70	; 0x46
   17588:	bne	17604 <__assert_fail@plt+0x61f0>
   1758c:	ldrb	r3, [r0, #3]
   17590:	cmp	r3, #45	; 0x2d
   17594:	bne	17604 <__assert_fail@plt+0x61f0>
   17598:	ldrb	r3, [r0, #4]
   1759c:	cmp	r3, #56	; 0x38
   175a0:	bne	17604 <__assert_fail@plt+0x61f0>
   175a4:	ldrb	r3, [r0, #5]
   175a8:	cmp	r3, #0
   175ac:	bne	17604 <__assert_fail@plt+0x61f0>
   175b0:	ldrb	r2, [r4]
   175b4:	ldr	r3, [pc, #152]	; 17654 <__assert_fail@plt+0x6240>
   175b8:	ldr	r0, [pc, #152]	; 17658 <__assert_fail@plt+0x6244>
   175bc:	cmp	r2, #96	; 0x60
   175c0:	movne	r0, r3
   175c4:	pop	{r4, r5, r6, pc}
   175c8:	cmp	r3, #71	; 0x47
   175cc:	bne	17604 <__assert_fail@plt+0x61f0>
   175d0:	ldrb	r3, [r0, #1]
   175d4:	bic	r3, r3, #32
   175d8:	cmp	r3, #66	; 0x42
   175dc:	bne	17604 <__assert_fail@plt+0x61f0>
   175e0:	ldrb	r3, [r0, #2]
   175e4:	cmp	r3, #49	; 0x31
   175e8:	bne	17604 <__assert_fail@plt+0x61f0>
   175ec:	ldrb	r3, [r0, #3]
   175f0:	cmp	r3, #56	; 0x38
   175f4:	bne	17604 <__assert_fail@plt+0x61f0>
   175f8:	ldrb	r3, [r0, #4]
   175fc:	cmp	r3, #48	; 0x30
   17600:	beq	17618 <__assert_fail@plt+0x6204>
   17604:	ldr	r3, [pc, #80]	; 1765c <__assert_fail@plt+0x6248>
   17608:	cmp	r5, #9
   1760c:	ldr	r0, [pc, #76]	; 17660 <__assert_fail@plt+0x624c>
   17610:	movne	r0, r3
   17614:	pop	{r4, r5, r6, pc}
   17618:	ldrb	r3, [r0, #5]
   1761c:	cmp	r3, #51	; 0x33
   17620:	bne	17604 <__assert_fail@plt+0x61f0>
   17624:	ldrb	r3, [r0, #6]
   17628:	cmp	r3, #48	; 0x30
   1762c:	bne	17604 <__assert_fail@plt+0x61f0>
   17630:	ldrb	r3, [r0, #7]
   17634:	cmp	r3, #0
   17638:	bne	17604 <__assert_fail@plt+0x61f0>
   1763c:	ldrb	r2, [r4]
   17640:	ldr	r3, [pc, #28]	; 17664 <__assert_fail@plt+0x6250>
   17644:	ldr	r0, [pc, #28]	; 17668 <__assert_fail@plt+0x6254>
   17648:	cmp	r2, #96	; 0x60
   1764c:	movne	r0, r3
   17650:	pop	{r4, r5, r6, pc}
   17654:	andeq	ip, r1, r0, lsl #22
   17658:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1765c:	andeq	ip, r1, r0, lsl fp
   17660:	andeq	ip, r1, ip, lsl #22
   17664:	andeq	ip, r1, r8, lsl #22
   17668:	andeq	ip, r1, r4, lsl #22
   1766c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17670:	sub	sp, sp, #116	; 0x74
   17674:	mov	sl, r0
   17678:	str	r3, [sp, #24]
   1767c:	mov	r3, #1
   17680:	mov	r8, r1
   17684:	str	r2, [sp, #56]	; 0x38
   17688:	str	r3, [sp, #36]	; 0x24
   1768c:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   17690:	ldr	r3, [sp, #156]	; 0x9c
   17694:	mov	fp, r8
   17698:	mov	r2, #0
   1769c:	lsr	r3, r3, #1
   176a0:	and	r3, r3, #1
   176a4:	str	r2, [sp, #68]	; 0x44
   176a8:	str	r3, [sp, #28]
   176ac:	str	r2, [sp, #40]	; 0x28
   176b0:	str	r2, [sp, #44]	; 0x2c
   176b4:	str	r2, [sp, #52]	; 0x34
   176b8:	str	r2, [sp, #64]	; 0x40
   176bc:	str	r2, [sp, #72]	; 0x48
   176c0:	str	sl, [sp, #32]
   176c4:	str	r0, [sp, #76]	; 0x4c
   176c8:	ldr	r3, [sp, #152]	; 0x98
   176cc:	cmp	r3, #10
   176d0:	ldrls	pc, [pc, r3, lsl #2]
   176d4:	b	18894 <__assert_fail@plt+0x7480>
   176d8:	andeq	r7, r1, r4, lsl #14
   176dc:	andeq	r7, r1, ip, ror #19
   176e0:	andeq	r7, r1, r0, lsl sl
   176e4:	andeq	r7, r1, r4, lsr sl
   176e8:	andeq	r7, r1, r0, ror #22
   176ec:	andeq	r7, r1, r4, lsr fp
   176f0:	andeq	r7, r1, ip, lsl #22
   176f4:	andeq	r7, r1, r8, asr #20
   176f8:	andeq	r7, r1, r0, ror #20
   176fc:	andeq	r7, r1, r0, ror #20
   17700:	andeq	r7, r1, r0, ror #20
   17704:	mov	r3, #0
   17708:	mov	r7, r3
   1770c:	str	r3, [sp, #28]
   17710:	ldr	r3, [sp, #44]	; 0x2c
   17714:	mov	sl, #0
   17718:	eor	r3, r3, #1
   1771c:	str	r3, [sp, #60]	; 0x3c
   17720:	ldr	r3, [sp, #24]
   17724:	cmn	r3, #1
   17728:	beq	17c8c <__assert_fail@plt+0x6878>
   1772c:	ldr	r3, [sp, #24]
   17730:	subs	r5, r3, sl
   17734:	movne	r5, #1
   17738:	cmp	r5, #0
   1773c:	beq	17ca4 <__assert_fail@plt+0x6890>
   17740:	ldr	r3, [sp, #152]	; 0x98
   17744:	ldr	r8, [sp, #44]	; 0x2c
   17748:	cmp	r3, #2
   1774c:	moveq	r8, #0
   17750:	andne	r8, r8, #1
   17754:	ldr	r3, [sp, #52]	; 0x34
   17758:	adds	r9, r3, #0
   1775c:	movne	r9, #1
   17760:	ands	r6, r9, r8
   17764:	beq	1810c <__assert_fail@plt+0x6cf8>
   17768:	ldr	r2, [sp, #52]	; 0x34
   1776c:	ldr	r1, [sp, #24]
   17770:	cmp	r2, #1
   17774:	mov	r3, r2
   17778:	movls	r3, #0
   1777c:	movhi	r3, #1
   17780:	cmn	r1, #1
   17784:	movne	r3, #0
   17788:	cmp	r3, #0
   1778c:	add	r4, sl, r2
   17790:	beq	177a0 <__assert_fail@plt+0x638c>
   17794:	ldr	r0, [sp, #56]	; 0x38
   17798:	bl	112a0 <strlen@plt>
   1779c:	str	r0, [sp, #24]
   177a0:	ldr	r3, [sp, #24]
   177a4:	cmp	r3, r4
   177a8:	ldr	r3, [sp, #56]	; 0x38
   177ac:	add	r3, r3, sl
   177b0:	str	r3, [sp, #48]	; 0x30
   177b4:	bcc	18118 <__assert_fail@plt+0x6d04>
   177b8:	mov	r0, r3
   177bc:	ldr	r2, [sp, #52]	; 0x34
   177c0:	ldr	r1, [sp, #64]	; 0x40
   177c4:	bl	1115c <memcmp@plt>
   177c8:	cmp	r0, #0
   177cc:	bne	18118 <__assert_fail@plt+0x6d04>
   177d0:	ldr	r3, [sp, #28]
   177d4:	cmp	r3, #0
   177d8:	bne	18994 <__assert_fail@plt+0x7580>
   177dc:	ldr	r3, [sp, #48]	; 0x30
   177e0:	ldrb	r4, [r3]
   177e4:	cmp	r4, #126	; 0x7e
   177e8:	ldrls	pc, [pc, r4, lsl #2]
   177ec:	b	180ac <__assert_fail@plt+0x6c98>
   177f0:	ldrdeq	r7, [r1], -r0
   177f4:	andeq	r8, r1, ip, lsr #1
   177f8:	andeq	r8, r1, ip, lsr #1
   177fc:	andeq	r8, r1, ip, lsr #1
   17800:	andeq	r8, r1, ip, lsr #1
   17804:	andeq	r8, r1, ip, lsr #1
   17808:	andeq	r8, r1, ip, lsr #1
   1780c:			; <UNDEFINED> instruction: 0x00017eb4
   17810:	muleq	r1, r8, lr
   17814:	muleq	r1, r4, r0
   17818:	strdeq	r7, [r1], -r8
   1781c:	ldrdeq	r7, [r1], -ip
   17820:	andeq	r8, r1, r0, ror r0
   17824:	andeq	r8, r1, ip, asr #32
   17828:	andeq	r8, r1, ip, lsr #1
   1782c:	andeq	r8, r1, ip, lsr #1
   17830:	andeq	r8, r1, ip, lsr #1
   17834:	andeq	r8, r1, ip, lsr #1
   17838:	andeq	r8, r1, ip, lsr #1
   1783c:	andeq	r8, r1, ip, lsr #1
   17840:	andeq	r8, r1, ip, lsr #1
   17844:	andeq	r8, r1, ip, lsr #1
   17848:	andeq	r8, r1, ip, lsr #1
   1784c:	andeq	r8, r1, ip, lsr #1
   17850:	andeq	r8, r1, ip, lsr #1
   17854:	andeq	r8, r1, ip, lsr #1
   17858:	andeq	r8, r1, ip, lsr #1
   1785c:	andeq	r8, r1, ip, lsr #1
   17860:	andeq	r8, r1, ip, lsr #1
   17864:	andeq	r8, r1, ip, lsr #1
   17868:	andeq	r8, r1, ip, lsr #1
   1786c:	andeq	r8, r1, ip, lsr #1
   17870:	andeq	r8, r1, ip, lsl #1
   17874:	andeq	r7, r1, r0, asr #31
   17878:	andeq	r7, r1, r0, asr #31
   1787c:	ldrdeq	r7, [r1], -r0
   17880:	andeq	r7, r1, r0, asr #31
   17884:	andeq	r8, r1, r8, asr r0
   17888:	andeq	r7, r1, r0, asr #31
   1788c:	andeq	r8, r1, ip, lsr #32
   17890:	andeq	r7, r1, r0, asr #31
   17894:	andeq	r7, r1, r0, asr #31
   17898:	andeq	r7, r1, r0, asr #31
   1789c:	andeq	r8, r1, r8, asr r0
   178a0:	andeq	r8, r1, r8, asr r0
   178a4:	andeq	r8, r1, r8, asr r0
   178a8:	andeq	r8, r1, r8, asr r0
   178ac:	andeq	r8, r1, r8, asr r0
   178b0:	andeq	r8, r1, r8, asr r0
   178b4:	andeq	r8, r1, r8, asr r0
   178b8:	andeq	r8, r1, r8, asr r0
   178bc:	andeq	r8, r1, r8, asr r0
   178c0:	andeq	r8, r1, r8, asr r0
   178c4:	andeq	r8, r1, r8, asr r0
   178c8:	andeq	r8, r1, r8, asr r0
   178cc:	andeq	r8, r1, r8, asr r0
   178d0:	andeq	r8, r1, r8, asr r0
   178d4:	andeq	r8, r1, r8, asr r0
   178d8:	andeq	r8, r1, r8, asr r0
   178dc:	andeq	r7, r1, r0, asr #31
   178e0:	andeq	r7, r1, r0, asr #31
   178e4:	andeq	r7, r1, r0, asr #31
   178e8:	andeq	r7, r1, r0, asr #31
   178ec:	strdeq	r7, [r1], -ip
   178f0:	andeq	r8, r1, ip, lsr #1
   178f4:	andeq	r8, r1, r8, asr r0
   178f8:	andeq	r8, r1, r8, asr r0
   178fc:	andeq	r8, r1, r8, asr r0
   17900:	andeq	r8, r1, r8, asr r0
   17904:	andeq	r8, r1, r8, asr r0
   17908:	andeq	r8, r1, r8, asr r0
   1790c:	andeq	r8, r1, r8, asr r0
   17910:	andeq	r8, r1, r8, asr r0
   17914:	andeq	r8, r1, r8, asr r0
   17918:	andeq	r8, r1, r8, asr r0
   1791c:	andeq	r8, r1, r8, asr r0
   17920:	andeq	r8, r1, r8, asr r0
   17924:	andeq	r8, r1, r8, asr r0
   17928:	andeq	r8, r1, r8, asr r0
   1792c:	andeq	r8, r1, r8, asr r0
   17930:	andeq	r8, r1, r8, asr r0
   17934:	andeq	r8, r1, r8, asr r0
   17938:	andeq	r8, r1, r8, asr r0
   1793c:	andeq	r8, r1, r8, asr r0
   17940:	andeq	r8, r1, r8, asr r0
   17944:	andeq	r8, r1, r8, asr r0
   17948:	andeq	r8, r1, r8, asr r0
   1794c:	andeq	r8, r1, r8, asr r0
   17950:	andeq	r8, r1, r8, asr r0
   17954:	andeq	r8, r1, r8, asr r0
   17958:	andeq	r8, r1, r8, asr r0
   1795c:	andeq	r7, r1, r0, asr #31
   17960:	andeq	r7, r1, ip, lsl sp
   17964:	andeq	r8, r1, r8, asr r0
   17968:	andeq	r7, r1, r0, asr #31
   1796c:	andeq	r8, r1, r8, asr r0
   17970:	andeq	r7, r1, r0, asr #31
   17974:	andeq	r8, r1, r8, asr r0
   17978:	andeq	r8, r1, r8, asr r0
   1797c:	andeq	r8, r1, r8, asr r0
   17980:	andeq	r8, r1, r8, asr r0
   17984:	andeq	r8, r1, r8, asr r0
   17988:	andeq	r8, r1, r8, asr r0
   1798c:	andeq	r8, r1, r8, asr r0
   17990:	andeq	r8, r1, r8, asr r0
   17994:	andeq	r8, r1, r8, asr r0
   17998:	andeq	r8, r1, r8, asr r0
   1799c:	andeq	r8, r1, r8, asr r0
   179a0:	andeq	r8, r1, r8, asr r0
   179a4:	andeq	r8, r1, r8, asr r0
   179a8:	andeq	r8, r1, r8, asr r0
   179ac:	andeq	r8, r1, r8, asr r0
   179b0:	andeq	r8, r1, r8, asr r0
   179b4:	andeq	r8, r1, r8, asr r0
   179b8:	andeq	r8, r1, r8, asr r0
   179bc:	andeq	r8, r1, r8, asr r0
   179c0:	andeq	r8, r1, r8, asr r0
   179c4:	andeq	r8, r1, r8, asr r0
   179c8:	andeq	r8, r1, r8, asr r0
   179cc:	andeq	r8, r1, r8, asr r0
   179d0:	andeq	r8, r1, r8, asr r0
   179d4:	andeq	r8, r1, r8, asr r0
   179d8:	andeq	r8, r1, r8, asr r0
   179dc:			; <UNDEFINED> instruction: 0x00017bb0
   179e0:	andeq	r7, r1, r0, asr #31
   179e4:			; <UNDEFINED> instruction: 0x00017bb0
   179e8:	ldrdeq	r7, [r1], -r0
   179ec:	mov	r3, #1
   179f0:	str	r3, [sp, #28]
   179f4:	str	r3, [sp, #52]	; 0x34
   179f8:	ldr	r3, [pc, #4000]	; 189a0 <__assert_fail@plt+0x758c>
   179fc:	mov	r7, #0
   17a00:	str	r3, [sp, #64]	; 0x40
   17a04:	mov	r3, #2
   17a08:	str	r3, [sp, #152]	; 0x98
   17a0c:	b	17710 <__assert_fail@plt+0x62fc>
   17a10:	ldr	r3, [sp, #28]
   17a14:	cmp	r3, #0
   17a18:	beq	17b74 <__assert_fail@plt+0x6760>
   17a1c:	mov	r3, #1
   17a20:	str	r3, [sp, #52]	; 0x34
   17a24:	ldr	r3, [pc, #3956]	; 189a0 <__assert_fail@plt+0x758c>
   17a28:	mov	r7, #0
   17a2c:	str	r3, [sp, #64]	; 0x40
   17a30:	b	17710 <__assert_fail@plt+0x62fc>
   17a34:	mov	r3, #1
   17a38:	str	r3, [sp, #44]	; 0x2c
   17a3c:	str	r3, [sp, #52]	; 0x34
   17a40:	str	r3, [sp, #28]
   17a44:	b	179f8 <__assert_fail@plt+0x65e4>
   17a48:	mov	r3, #0
   17a4c:	str	r3, [sp, #28]
   17a50:	mov	r3, #1
   17a54:	str	r3, [sp, #44]	; 0x2c
   17a58:	mov	r7, #0
   17a5c:	b	17710 <__assert_fail@plt+0x62fc>
   17a60:	ldr	r3, [sp, #152]	; 0x98
   17a64:	cmp	r3, #10
   17a68:	beq	17aac <__assert_fail@plt+0x6698>
   17a6c:	mov	r2, #5
   17a70:	ldr	r1, [pc, #3884]	; 189a4 <__assert_fail@plt+0x7590>
   17a74:	mov	r0, #0
   17a78:	bl	11174 <dcgettext@plt>
   17a7c:	ldr	r2, [pc, #3872]	; 189a4 <__assert_fail@plt+0x7590>
   17a80:	cmp	r0, r2
   17a84:	str	r0, [sp, #164]	; 0xa4
   17a88:	beq	18a90 <__assert_fail@plt+0x767c>
   17a8c:	mov	r2, #5
   17a90:	ldr	r1, [pc, #3848]	; 189a0 <__assert_fail@plt+0x758c>
   17a94:	mov	r0, #0
   17a98:	bl	11174 <dcgettext@plt>
   17a9c:	ldr	r2, [pc, #3836]	; 189a0 <__assert_fail@plt+0x758c>
   17aa0:	cmp	r0, r2
   17aa4:	str	r0, [sp, #168]	; 0xa8
   17aa8:	beq	18a80 <__assert_fail@plt+0x766c>
   17aac:	ldr	r7, [sp, #28]
   17ab0:	cmp	r7, #0
   17ab4:	movne	r7, #0
   17ab8:	bne	17aec <__assert_fail@plt+0x66d8>
   17abc:	ldr	r3, [sp, #164]	; 0xa4
   17ac0:	ldrb	r3, [r3]
   17ac4:	cmp	r3, #0
   17ac8:	beq	18aa0 <__assert_fail@plt+0x768c>
   17acc:	ldr	r2, [sp, #164]	; 0xa4
   17ad0:	ldr	r1, [sp, #32]
   17ad4:	cmp	fp, r7
   17ad8:	strbhi	r3, [r1, r7]
   17adc:	ldrb	r3, [r2, #1]!
   17ae0:	add	r7, r7, #1
   17ae4:	cmp	r3, #0
   17ae8:	bne	17ad4 <__assert_fail@plt+0x66c0>
   17aec:	ldr	r0, [sp, #168]	; 0xa8
   17af0:	bl	112a0 <strlen@plt>
   17af4:	ldr	r3, [sp, #168]	; 0xa8
   17af8:	str	r3, [sp, #64]	; 0x40
   17afc:	mov	r3, #1
   17b00:	str	r3, [sp, #44]	; 0x2c
   17b04:	str	r0, [sp, #52]	; 0x34
   17b08:	b	17710 <__assert_fail@plt+0x62fc>
   17b0c:	mov	r3, #1
   17b10:	str	r3, [sp, #44]	; 0x2c
   17b14:	str	r3, [sp, #52]	; 0x34
   17b18:	str	r3, [sp, #28]
   17b1c:	ldr	r3, [pc, #3716]	; 189a8 <__assert_fail@plt+0x7594>
   17b20:	mov	r7, #0
   17b24:	str	r3, [sp, #64]	; 0x40
   17b28:	mov	r3, #5
   17b2c:	str	r3, [sp, #152]	; 0x98
   17b30:	b	17710 <__assert_fail@plt+0x62fc>
   17b34:	ldr	r3, [sp, #28]
   17b38:	cmp	r3, #0
   17b3c:	beq	1883c <__assert_fail@plt+0x7428>
   17b40:	ldr	r3, [sp, #28]
   17b44:	mov	r7, #0
   17b48:	str	r3, [sp, #44]	; 0x2c
   17b4c:	mov	r3, #1
   17b50:	str	r3, [sp, #52]	; 0x34
   17b54:	ldr	r3, [pc, #3660]	; 189a8 <__assert_fail@plt+0x7594>
   17b58:	str	r3, [sp, #64]	; 0x40
   17b5c:	b	17710 <__assert_fail@plt+0x62fc>
   17b60:	ldr	r3, [sp, #28]
   17b64:	cmp	r3, #0
   17b68:	mov	r3, #1
   17b6c:	streq	r3, [sp, #44]	; 0x2c
   17b70:	bne	179f4 <__assert_fail@plt+0x65e0>
   17b74:	cmp	fp, #0
   17b78:	beq	1886c <__assert_fail@plt+0x7458>
   17b7c:	ldr	r3, [sp, #32]
   17b80:	mov	r2, #39	; 0x27
   17b84:	mov	r7, #1
   17b88:	strb	r2, [r3]
   17b8c:	mov	r3, #0
   17b90:	str	r3, [sp, #28]
   17b94:	mov	r3, #1
   17b98:	str	r3, [sp, #52]	; 0x34
   17b9c:	ldr	r3, [pc, #3580]	; 189a0 <__assert_fail@plt+0x758c>
   17ba0:	str	r3, [sp, #64]	; 0x40
   17ba4:	mov	r3, #2
   17ba8:	str	r3, [sp, #152]	; 0x98
   17bac:	b	17710 <__assert_fail@plt+0x62fc>
   17bb0:	ldr	r3, [sp, #24]
   17bb4:	cmn	r3, #1
   17bb8:	beq	187d0 <__assert_fail@plt+0x73bc>
   17bbc:	ldr	r3, [sp, #24]
   17bc0:	subs	r3, r3, #1
   17bc4:	movne	r3, #1
   17bc8:	cmp	r3, #0
   17bcc:	bne	17bd8 <__assert_fail@plt+0x67c4>
   17bd0:	cmp	sl, #0
   17bd4:	beq	17fc4 <__assert_fail@plt+0x6bb0>
   17bd8:	ldr	r3, [sp, #152]	; 0x98
   17bdc:	mov	r5, #0
   17be0:	sub	r2, r3, #2
   17be4:	mov	r8, r5
   17be8:	clz	r2, r2
   17bec:	lsr	r2, r2, #5
   17bf0:	ldr	r3, [sp, #60]	; 0x3c
   17bf4:	ldr	r1, [sp, #28]
   17bf8:	orr	r3, r2, r3
   17bfc:	eor	r3, r3, #1
   17c00:	orr	r3, r1, r3
   17c04:	tst	r3, #255	; 0xff
   17c08:	bne	18334 <__assert_fail@plt+0x6f20>
   17c0c:	cmp	r6, #0
   17c10:	bne	17d60 <__assert_fail@plt+0x694c>
   17c14:	ldr	r3, [sp, #40]	; 0x28
   17c18:	eor	r8, r8, #1
   17c1c:	and	r8, r8, r3
   17c20:	add	sl, sl, #1
   17c24:	uxtb	r6, r8
   17c28:	cmp	r6, #0
   17c2c:	beq	17c60 <__assert_fail@plt+0x684c>
   17c30:	cmp	fp, r7
   17c34:	movhi	r2, #39	; 0x27
   17c38:	ldrhi	r3, [sp, #32]
   17c3c:	strbhi	r2, [r3, r7]
   17c40:	add	r3, r7, #1
   17c44:	cmp	fp, r3
   17c48:	movhi	r1, #39	; 0x27
   17c4c:	ldrhi	r2, [sp, #32]
   17c50:	add	r7, r7, #2
   17c54:	strbhi	r1, [r2, r3]
   17c58:	mov	r3, #0
   17c5c:	str	r3, [sp, #40]	; 0x28
   17c60:	cmp	r7, fp
   17c64:	ldrcc	r3, [sp, #32]
   17c68:	strbcc	r4, [r3, r7]
   17c6c:	ldr	r3, [sp, #36]	; 0x24
   17c70:	cmp	r5, #0
   17c74:	moveq	r3, #0
   17c78:	str	r3, [sp, #36]	; 0x24
   17c7c:	ldr	r3, [sp, #24]
   17c80:	add	r7, r7, #1
   17c84:	cmn	r3, #1
   17c88:	bne	1772c <__assert_fail@plt+0x6318>
   17c8c:	ldr	r3, [sp, #56]	; 0x38
   17c90:	ldrb	r5, [r3, sl]
   17c94:	adds	r5, r5, #0
   17c98:	movne	r5, #1
   17c9c:	cmp	r5, #0
   17ca0:	bne	17740 <__assert_fail@plt+0x632c>
   17ca4:	ldr	r3, [sp, #152]	; 0x98
   17ca8:	ldr	r1, [sp, #28]
   17cac:	sub	r3, r3, #2
   17cb0:	clz	r3, r3
   17cb4:	lsr	r3, r3, #5
   17cb8:	and	r9, r1, r3
   17cbc:	cmp	r7, #0
   17cc0:	movne	r2, #0
   17cc4:	andeq	r2, r9, #1
   17cc8:	cmp	r2, #0
   17ccc:	bne	186a8 <__assert_fail@plt+0x7294>
   17cd0:	eor	r2, r1, #1
   17cd4:	ands	r3, r3, r2
   17cd8:	beq	18b64 <__assert_fail@plt+0x7750>
   17cdc:	ldr	r2, [sp, #68]	; 0x44
   17ce0:	cmp	r2, #0
   17ce4:	beq	18b50 <__assert_fail@plt+0x773c>
   17ce8:	ldr	r3, [sp, #36]	; 0x24
   17cec:	cmp	r3, #0
   17cf0:	bne	18b08 <__assert_fail@plt+0x76f4>
   17cf4:	ldr	r2, [sp, #72]	; 0x48
   17cf8:	clz	r3, fp
   17cfc:	cmp	r2, #0
   17d00:	lsr	r3, r3, #5
   17d04:	moveq	r3, #0
   17d08:	cmp	r3, #0
   17d0c:	beq	18aa8 <__assert_fail@plt+0x7694>
   17d10:	str	r3, [sp, #68]	; 0x44
   17d14:	ldr	fp, [sp, #72]	; 0x48
   17d18:	b	176c8 <__assert_fail@plt+0x62b4>
   17d1c:	ldr	r3, [sp, #152]	; 0x98
   17d20:	cmp	r3, #2
   17d24:	beq	18378 <__assert_fail@plt+0x6f64>
   17d28:	ldr	r3, [sp, #44]	; 0x2c
   17d2c:	ldr	r2, [sp, #28]
   17d30:	and	r2, r3, r2
   17d34:	ands	r2, r9, r2
   17d38:	bne	18384 <__assert_fail@plt+0x6f70>
   17d3c:	mov	r4, #92	; 0x5c
   17d40:	mov	r3, r4
   17d44:	ldr	r1, [sp, #44]	; 0x2c
   17d48:	cmp	r1, #0
   17d4c:	moveq	r5, #0
   17d50:	moveq	r8, r1
   17d54:	beq	17bf0 <__assert_fail@plt+0x67dc>
   17d58:	mov	r4, r3
   17d5c:	mov	r5, #0
   17d60:	ldr	r3, [sp, #28]
   17d64:	cmp	r3, #0
   17d68:	bne	1836c <__assert_fail@plt+0x6f58>
   17d6c:	ldr	r3, [sp, #40]	; 0x28
   17d70:	eor	r9, r3, #1
   17d74:	and	r9, r9, r2
   17d78:	ands	r9, r9, #255	; 0xff
   17d7c:	beq	17dc0 <__assert_fail@plt+0x69ac>
   17d80:	cmp	fp, r7
   17d84:	movhi	r2, #39	; 0x27
   17d88:	ldrhi	r3, [sp, #32]
   17d8c:	str	r9, [sp, #40]	; 0x28
   17d90:	strbhi	r2, [r3, r7]
   17d94:	add	r3, r7, #1
   17d98:	cmp	fp, r3
   17d9c:	movhi	r1, #36	; 0x24
   17da0:	ldrhi	r2, [sp, #32]
   17da4:	strbhi	r1, [r2, r3]
   17da8:	add	r3, r7, #2
   17dac:	cmp	fp, r3
   17db0:	add	r7, r7, #3
   17db4:	ldrhi	r2, [sp, #32]
   17db8:	movhi	r1, #39	; 0x27
   17dbc:	strbhi	r1, [r2, r3]
   17dc0:	cmp	fp, r7
   17dc4:	movhi	r2, #92	; 0x5c
   17dc8:	ldrhi	r3, [sp, #32]
   17dcc:	add	sl, sl, #1
   17dd0:	strbhi	r2, [r3, r7]
   17dd4:	add	r7, r7, #1
   17dd8:	b	17c60 <__assert_fail@plt+0x684c>
   17ddc:	ldr	r3, [sp, #152]	; 0x98
   17de0:	mov	r4, #11
   17de4:	sub	r2, r3, #2
   17de8:	mov	r3, #118	; 0x76
   17dec:	clz	r2, r2
   17df0:	lsr	r2, r2, #5
   17df4:	b	17d44 <__assert_fail@plt+0x6930>
   17df8:	mov	r4, #10
   17dfc:	mov	r3, #110	; 0x6e
   17e00:	ldr	r2, [sp, #152]	; 0x98
   17e04:	ldr	r1, [sp, #28]
   17e08:	sub	r2, r2, #2
   17e0c:	clz	r2, r2
   17e10:	lsr	r2, r2, #5
   17e14:	ands	r1, r1, r2
   17e18:	beq	17d44 <__assert_fail@plt+0x6930>
   17e1c:	ldr	sl, [sp, #32]
   17e20:	mov	r8, fp
   17e24:	mov	r2, r1
   17e28:	mov	r3, #2
   17e2c:	str	r3, [sp, #152]	; 0x98
   17e30:	ldr	r9, [sp, #44]	; 0x2c
   17e34:	ldr	r3, [sp, #152]	; 0x98
   17e38:	and	r9, r9, r2
   17e3c:	tst	r9, #255	; 0xff
   17e40:	movne	r3, #4
   17e44:	str	r3, [sp, #152]	; 0x98
   17e48:	ldr	r3, [sp, #156]	; 0x9c
   17e4c:	mov	ip, #0
   17e50:	bic	r3, r3, #2
   17e54:	str	r3, [sp, #4]
   17e58:	ldr	r3, [sp, #168]	; 0xa8
   17e5c:	ldr	r2, [sp, #56]	; 0x38
   17e60:	str	r3, [sp, #16]
   17e64:	ldr	r3, [sp, #164]	; 0xa4
   17e68:	mov	r1, r8
   17e6c:	str	r3, [sp, #12]
   17e70:	ldr	r3, [sp, #152]	; 0x98
   17e74:	mov	r0, sl
   17e78:	str	r3, [sp]
   17e7c:	str	ip, [sp, #8]
   17e80:	ldr	r3, [sp, #24]
   17e84:	bl	1766c <__assert_fail@plt+0x6258>
   17e88:	mov	fp, r0
   17e8c:	mov	r0, fp
   17e90:	add	sp, sp, #116	; 0x74
   17e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e98:	ldr	r3, [sp, #152]	; 0x98
   17e9c:	mov	r4, #8
   17ea0:	sub	r2, r3, #2
   17ea4:	mov	r3, #98	; 0x62
   17ea8:	clz	r2, r2
   17eac:	lsr	r2, r2, #5
   17eb0:	b	17d44 <__assert_fail@plt+0x6930>
   17eb4:	ldr	r3, [sp, #152]	; 0x98
   17eb8:	mov	r4, #7
   17ebc:	sub	r2, r3, #2
   17ec0:	mov	r3, #97	; 0x61
   17ec4:	clz	r2, r2
   17ec8:	lsr	r2, r2, #5
   17ecc:	b	17d44 <__assert_fail@plt+0x6930>
   17ed0:	ldr	r3, [sp, #44]	; 0x2c
   17ed4:	cmp	r3, #0
   17ed8:	beq	186bc <__assert_fail@plt+0x72a8>
   17edc:	ldr	r3, [sp, #28]
   17ee0:	cmp	r3, #0
   17ee4:	bne	18994 <__assert_fail@plt+0x7580>
   17ee8:	ldr	r3, [sp, #152]	; 0x98
   17eec:	sub	r2, r3, #2
   17ef0:	ldr	r3, [sp, #40]	; 0x28
   17ef4:	clz	r2, r2
   17ef8:	eor	r3, r3, #1
   17efc:	lsr	r2, r2, #5
   17f00:	ands	r3, r2, r3
   17f04:	moveq	r1, r7
   17f08:	beq	17f4c <__assert_fail@plt+0x6b38>
   17f0c:	cmp	fp, r7
   17f10:	movhi	r0, #39	; 0x27
   17f14:	ldrhi	r1, [sp, #32]
   17f18:	str	r3, [sp, #40]	; 0x28
   17f1c:	strbhi	r0, [r1, r7]
   17f20:	add	r1, r7, #1
   17f24:	cmp	fp, r1
   17f28:	movhi	ip, #36	; 0x24
   17f2c:	ldrhi	r0, [sp, #32]
   17f30:	strbhi	ip, [r0, r1]
   17f34:	add	r1, r7, #2
   17f38:	cmp	fp, r1
   17f3c:	movhi	ip, #39	; 0x27
   17f40:	ldrhi	r0, [sp, #32]
   17f44:	strbhi	ip, [r0, r1]
   17f48:	add	r1, r7, #3
   17f4c:	cmp	fp, r1
   17f50:	movhi	r0, #92	; 0x5c
   17f54:	ldrhi	r3, [sp, #32]
   17f58:	add	r7, r1, #1
   17f5c:	strbhi	r0, [r3, r1]
   17f60:	cmp	r8, #0
   17f64:	beq	188a8 <__assert_fail@plt+0x7494>
   17f68:	ldr	r0, [sp, #24]
   17f6c:	add	r3, sl, #1
   17f70:	cmp	r3, r0
   17f74:	bcs	187e4 <__assert_fail@plt+0x73d0>
   17f78:	ldr	r0, [sp, #56]	; 0x38
   17f7c:	ldrb	r3, [r0, r3]
   17f80:	sub	r3, r3, #48	; 0x30
   17f84:	cmp	r3, #9
   17f88:	bhi	187e4 <__assert_fail@plt+0x73d0>
   17f8c:	cmp	fp, r7
   17f90:	movhi	r3, #48	; 0x30
   17f94:	ldrhi	r0, [sp, #32]
   17f98:	ldr	r5, [sp, #28]
   17f9c:	mov	r4, #48	; 0x30
   17fa0:	strbhi	r3, [r0, r7]
   17fa4:	add	r3, r1, #2
   17fa8:	cmp	fp, r3
   17fac:	movhi	r0, #48	; 0x30
   17fb0:	ldrhi	ip, [sp, #32]
   17fb4:	add	r7, r1, #3
   17fb8:	strbhi	r0, [ip, r3]
   17fbc:	b	17bf0 <__assert_fail@plt+0x67dc>
   17fc0:	mov	r5, #0
   17fc4:	ldr	r3, [sp, #152]	; 0x98
   17fc8:	sub	r2, r3, #2
   17fcc:	ldr	r3, [sp, #28]
   17fd0:	clz	r2, r2
   17fd4:	lsr	r2, r2, #5
   17fd8:	ands	r8, r3, r2
   17fdc:	beq	17bf0 <__assert_fail@plt+0x67dc>
   17fe0:	mov	r3, r8
   17fe4:	mov	r2, r3
   17fe8:	mov	r3, #2
   17fec:	ldr	sl, [sp, #32]
   17ff0:	mov	r8, fp
   17ff4:	str	r3, [sp, #152]	; 0x98
   17ff8:	b	17e30 <__assert_fail@plt+0x6a1c>
   17ffc:	ldr	r3, [sp, #152]	; 0x98
   18000:	cmp	r3, #2
   18004:	beq	18728 <__assert_fail@plt+0x7314>
   18008:	cmp	r3, #5
   1800c:	beq	186e8 <__assert_fail@plt+0x72d4>
   18010:	mov	r5, #0
   18014:	sub	r2, r3, #2
   18018:	mov	r8, r5
   1801c:	clz	r2, r2
   18020:	mov	r4, #63	; 0x3f
   18024:	lsr	r2, r2, #5
   18028:	b	17bf0 <__assert_fail@plt+0x67dc>
   1802c:	ldr	r3, [sp, #152]	; 0x98
   18030:	cmp	r3, #2
   18034:	beq	18748 <__assert_fail@plt+0x7334>
   18038:	mov	r2, #0
   1803c:	str	r5, [sp, #68]	; 0x44
   18040:	mov	r8, r2
   18044:	mov	r4, #39	; 0x27
   18048:	b	17bf0 <__assert_fail@plt+0x67dc>
   1804c:	mov	r4, #13
   18050:	mov	r3, #114	; 0x72
   18054:	b	17e00 <__assert_fail@plt+0x69ec>
   18058:	ldr	r3, [sp, #152]	; 0x98
   1805c:	mov	r8, #0
   18060:	sub	r2, r3, #2
   18064:	clz	r2, r2
   18068:	lsr	r2, r2, #5
   1806c:	b	17bf0 <__assert_fail@plt+0x67dc>
   18070:	ldr	r3, [sp, #152]	; 0x98
   18074:	mov	r4, #12
   18078:	sub	r2, r3, #2
   1807c:	mov	r3, #102	; 0x66
   18080:	clz	r2, r2
   18084:	lsr	r2, r2, #5
   18088:	b	17d44 <__assert_fail@plt+0x6930>
   1808c:	mov	r5, r6
   18090:	b	17fc4 <__assert_fail@plt+0x6bb0>
   18094:	ldr	r3, [sp, #152]	; 0x98
   18098:	sub	r2, r3, #2
   1809c:	mov	r3, #116	; 0x74
   180a0:	clz	r2, r2
   180a4:	lsr	r2, r2, #5
   180a8:	b	17d44 <__assert_fail@plt+0x6930>
   180ac:	ldr	r8, [sp, #76]	; 0x4c
   180b0:	cmp	r8, #1
   180b4:	bne	18564 <__assert_fail@plt+0x7150>
   180b8:	bl	11288 <__ctype_b_loc@plt>
   180bc:	sxth	r3, r4
   180c0:	mov	ip, r8
   180c4:	lsl	r3, r3, #1
   180c8:	ldr	r2, [r0]
   180cc:	ldrh	r3, [r2, r3]
   180d0:	and	r3, r3, #16384	; 0x4000
   180d4:	cmp	r3, #0
   180d8:	movne	r5, #1
   180dc:	moveq	r5, #0
   180e0:	moveq	r3, #1
   180e4:	movne	r3, #0
   180e8:	ldr	r2, [sp, #44]	; 0x2c
   180ec:	and	r3, r3, r2
   180f0:	ands	r8, r3, #255	; 0xff
   180f4:	bne	183f8 <__assert_fail@plt+0x6fe4>
   180f8:	ldr	r3, [sp, #152]	; 0x98
   180fc:	sub	r2, r3, #2
   18100:	clz	r2, r2
   18104:	lsr	r2, r2, #5
   18108:	b	17bf0 <__assert_fail@plt+0x67dc>
   1810c:	ldr	r3, [sp, #56]	; 0x38
   18110:	add	r3, r3, sl
   18114:	str	r3, [sp, #48]	; 0x30
   18118:	ldr	r3, [sp, #48]	; 0x30
   1811c:	mov	r6, #0
   18120:	ldrb	r4, [r3]
   18124:	cmp	r4, #126	; 0x7e
   18128:	ldrls	pc, [pc, r4, lsl #2]
   1812c:	b	180ac <__assert_fail@plt+0x6c98>
   18130:	ldrdeq	r7, [r1], -r0
   18134:	andeq	r8, r1, ip, lsr #1
   18138:	andeq	r8, r1, ip, lsr #1
   1813c:	andeq	r8, r1, ip, lsr #1
   18140:	andeq	r8, r1, ip, lsr #1
   18144:	andeq	r8, r1, ip, lsr #1
   18148:	andeq	r8, r1, ip, lsr #1
   1814c:			; <UNDEFINED> instruction: 0x00017eb4
   18150:	muleq	r1, r8, lr
   18154:	andeq	r8, r1, ip, lsr #6
   18158:	strdeq	r7, [r1], -r8
   1815c:	ldrdeq	r7, [r1], -ip
   18160:	andeq	r8, r1, r0, ror r0
   18164:	andeq	r8, r1, ip, asr #32
   18168:	andeq	r8, r1, ip, lsr #1
   1816c:	andeq	r8, r1, ip, lsr #1
   18170:	andeq	r8, r1, ip, lsr #1
   18174:	andeq	r8, r1, ip, lsr #1
   18178:	andeq	r8, r1, ip, lsr #1
   1817c:	andeq	r8, r1, ip, lsr #1
   18180:	andeq	r8, r1, ip, lsr #1
   18184:	andeq	r8, r1, ip, lsr #1
   18188:	andeq	r8, r1, ip, lsr #1
   1818c:	andeq	r8, r1, ip, lsr #1
   18190:	andeq	r8, r1, ip, lsr #1
   18194:	andeq	r8, r1, ip, lsr #1
   18198:	andeq	r8, r1, ip, lsr #1
   1819c:	andeq	r8, r1, ip, lsr #1
   181a0:	andeq	r8, r1, ip, lsr #1
   181a4:	andeq	r8, r1, ip, lsr #1
   181a8:	andeq	r8, r1, ip, lsr #1
   181ac:	andeq	r8, r1, ip, lsr #1
   181b0:	andeq	r7, r1, r4, asr #31
   181b4:	andeq	r7, r1, r0, asr #31
   181b8:	andeq	r7, r1, r0, asr #31
   181bc:	ldrdeq	r7, [r1], -r0
   181c0:	andeq	r7, r1, r0, asr #31
   181c4:	andeq	r8, r1, r8, asr r0
   181c8:	andeq	r7, r1, r0, asr #31
   181cc:	andeq	r8, r1, ip, lsr #32
   181d0:	andeq	r7, r1, r0, asr #31
   181d4:	andeq	r7, r1, r0, asr #31
   181d8:	andeq	r7, r1, r0, asr #31
   181dc:	andeq	r8, r1, r8, asr r0
   181e0:	andeq	r8, r1, r8, asr r0
   181e4:	andeq	r8, r1, r8, asr r0
   181e8:	andeq	r8, r1, r8, asr r0
   181ec:	andeq	r8, r1, r8, asr r0
   181f0:	andeq	r8, r1, r8, asr r0
   181f4:	andeq	r8, r1, r8, asr r0
   181f8:	andeq	r8, r1, r8, asr r0
   181fc:	andeq	r8, r1, r8, asr r0
   18200:	andeq	r8, r1, r8, asr r0
   18204:	andeq	r8, r1, r8, asr r0
   18208:	andeq	r8, r1, r8, asr r0
   1820c:	andeq	r8, r1, r8, asr r0
   18210:	andeq	r8, r1, r8, asr r0
   18214:	andeq	r8, r1, r8, asr r0
   18218:	andeq	r8, r1, r8, asr r0
   1821c:	andeq	r7, r1, r0, asr #31
   18220:	andeq	r7, r1, r0, asr #31
   18224:	andeq	r7, r1, r0, asr #31
   18228:	andeq	r7, r1, r0, asr #31
   1822c:	strdeq	r7, [r1], -ip
   18230:	andeq	r8, r1, ip, lsr #1
   18234:	andeq	r8, r1, r8, asr r0
   18238:	andeq	r8, r1, r8, asr r0
   1823c:	andeq	r8, r1, r8, asr r0
   18240:	andeq	r8, r1, r8, asr r0
   18244:	andeq	r8, r1, r8, asr r0
   18248:	andeq	r8, r1, r8, asr r0
   1824c:	andeq	r8, r1, r8, asr r0
   18250:	andeq	r8, r1, r8, asr r0
   18254:	andeq	r8, r1, r8, asr r0
   18258:	andeq	r8, r1, r8, asr r0
   1825c:	andeq	r8, r1, r8, asr r0
   18260:	andeq	r8, r1, r8, asr r0
   18264:	andeq	r8, r1, r8, asr r0
   18268:	andeq	r8, r1, r8, asr r0
   1826c:	andeq	r8, r1, r8, asr r0
   18270:	andeq	r8, r1, r8, asr r0
   18274:	andeq	r8, r1, r8, asr r0
   18278:	andeq	r8, r1, r8, asr r0
   1827c:	andeq	r8, r1, r8, asr r0
   18280:	andeq	r8, r1, r8, asr r0
   18284:	andeq	r8, r1, r8, asr r0
   18288:	andeq	r8, r1, r8, asr r0
   1828c:	andeq	r8, r1, r8, asr r0
   18290:	andeq	r8, r1, r8, asr r0
   18294:	andeq	r8, r1, r8, asr r0
   18298:	andeq	r8, r1, r8, asr r0
   1829c:	andeq	r7, r1, r0, asr #31
   182a0:	andeq	r7, r1, ip, lsl sp
   182a4:	andeq	r8, r1, r8, asr r0
   182a8:	andeq	r7, r1, r0, asr #31
   182ac:	andeq	r8, r1, r8, asr r0
   182b0:	andeq	r7, r1, r0, asr #31
   182b4:	andeq	r8, r1, r8, asr r0
   182b8:	andeq	r8, r1, r8, asr r0
   182bc:	andeq	r8, r1, r8, asr r0
   182c0:	andeq	r8, r1, r8, asr r0
   182c4:	andeq	r8, r1, r8, asr r0
   182c8:	andeq	r8, r1, r8, asr r0
   182cc:	andeq	r8, r1, r8, asr r0
   182d0:	andeq	r8, r1, r8, asr r0
   182d4:	andeq	r8, r1, r8, asr r0
   182d8:	andeq	r8, r1, r8, asr r0
   182dc:	andeq	r8, r1, r8, asr r0
   182e0:	andeq	r8, r1, r8, asr r0
   182e4:	andeq	r8, r1, r8, asr r0
   182e8:	andeq	r8, r1, r8, asr r0
   182ec:	andeq	r8, r1, r8, asr r0
   182f0:	andeq	r8, r1, r8, asr r0
   182f4:	andeq	r8, r1, r8, asr r0
   182f8:	andeq	r8, r1, r8, asr r0
   182fc:	andeq	r8, r1, r8, asr r0
   18300:	andeq	r8, r1, r8, asr r0
   18304:	andeq	r8, r1, r8, asr r0
   18308:	andeq	r8, r1, r8, asr r0
   1830c:	andeq	r8, r1, r8, asr r0
   18310:	andeq	r8, r1, r8, asr r0
   18314:	andeq	r8, r1, r8, asr r0
   18318:	andeq	r8, r1, r8, asr r0
   1831c:			; <UNDEFINED> instruction: 0x00017bb0
   18320:	andeq	r7, r1, r0, asr #31
   18324:			; <UNDEFINED> instruction: 0x00017bb0
   18328:	ldrdeq	r7, [r1], -r0
   1832c:	mov	r3, #116	; 0x74
   18330:	b	17e00 <__assert_fail@plt+0x69ec>
   18334:	ldr	r3, [sp, #160]	; 0xa0
   18338:	cmp	r3, #0
   1833c:	beq	17c0c <__assert_fail@plt+0x67f8>
   18340:	lsr	r3, r4, #5
   18344:	ldr	r0, [sp, #160]	; 0xa0
   18348:	uxtb	r3, r3
   1834c:	and	r1, r4, #31
   18350:	ldr	r0, [r0, r3, lsl #2]
   18354:	lsr	r3, r0, r1
   18358:	tst	r3, #1
   1835c:	beq	17c0c <__assert_fail@plt+0x67f8>
   18360:	ldr	r3, [sp, #28]
   18364:	cmp	r3, #0
   18368:	beq	17d6c <__assert_fail@plt+0x6958>
   1836c:	ldr	sl, [sp, #32]
   18370:	mov	r8, fp
   18374:	b	17e30 <__assert_fail@plt+0x6a1c>
   18378:	ldr	r3, [sp, #28]
   1837c:	cmp	r3, #0
   18380:	bne	188d4 <__assert_fail@plt+0x74c0>
   18384:	add	sl, sl, #1
   18388:	ldr	r6, [sp, #40]	; 0x28
   1838c:	mov	r5, #0
   18390:	mov	r4, #92	; 0x5c
   18394:	b	17c28 <__assert_fail@plt+0x6814>
   18398:	cmp	r9, r8
   1839c:	bne	1860c <__assert_fail@plt+0x71f8>
   183a0:	ldr	r0, [sp, #100]	; 0x64
   183a4:	bl	111b0 <iswprint@plt>
   183a8:	add	r5, r5, r4
   183ac:	cmp	r0, #0
   183b0:	add	r0, sp, #104	; 0x68
   183b4:	moveq	r6, #0
   183b8:	bl	11144 <mbsinit@plt>
   183bc:	cmp	r0, #0
   183c0:	beq	185a0 <__assert_fail@plt+0x718c>
   183c4:	mov	r2, r6
   183c8:	mov	ip, r5
   183cc:	eor	r5, r2, #1
   183d0:	ldr	r4, [sp, #80]	; 0x50
   183d4:	ldr	r6, [sp, #84]	; 0x54
   183d8:	ldr	r7, [sp, #88]	; 0x58
   183dc:	uxtb	r5, r5
   183e0:	cmp	ip, #1
   183e4:	bls	188e4 <__assert_fail@plt+0x74d0>
   183e8:	ldr	r3, [sp, #44]	; 0x2c
   183ec:	and	r8, r3, r5
   183f0:	mov	r5, r2
   183f4:	uxtb	r8, r8
   183f8:	add	r2, sl, ip
   183fc:	ldr	r0, [sp, #48]	; 0x30
   18400:	mov	r1, #0
   18404:	str	r5, [sp, #48]	; 0x30
   18408:	ldr	r9, [sp, #28]
   1840c:	ldr	ip, [sp, #40]	; 0x28
   18410:	ldr	r3, [sp, #32]
   18414:	ldr	r5, [sp, #152]	; 0x98
   18418:	b	184d4 <__assert_fail@plt+0x70c0>
   1841c:	cmp	r9, #0
   18420:	bne	187f8 <__assert_fail@plt+0x73e4>
   18424:	eor	r1, ip, #1
   18428:	cmp	r5, #2
   1842c:	movne	r1, #0
   18430:	andeq	r1, r1, #1
   18434:	cmp	r1, #0
   18438:	beq	18470 <__assert_fail@plt+0x705c>
   1843c:	cmp	fp, r7
   18440:	movhi	ip, #39	; 0x27
   18444:	strbhi	ip, [r3, r7]
   18448:	add	ip, r7, #1
   1844c:	cmp	fp, ip
   18450:	movhi	lr, #36	; 0x24
   18454:	strbhi	lr, [r3, ip]
   18458:	add	ip, r7, #2
   1845c:	cmp	fp, ip
   18460:	movhi	lr, #39	; 0x27
   18464:	strbhi	lr, [r3, ip]
   18468:	add	r7, r7, #3
   1846c:	mov	ip, r1
   18470:	cmp	fp, r7
   18474:	movhi	r1, #92	; 0x5c
   18478:	strbhi	r1, [r3, r7]
   1847c:	add	r1, r7, #1
   18480:	cmp	fp, r1
   18484:	lsrhi	lr, r4, #6
   18488:	addhi	lr, lr, #48	; 0x30
   1848c:	strbhi	lr, [r3, r1]
   18490:	add	lr, r7, #2
   18494:	cmp	fp, lr
   18498:	lsrhi	r1, r4, #3
   1849c:	andhi	r1, r1, #7
   184a0:	addhi	r1, r1, #48	; 0x30
   184a4:	add	sl, sl, #1
   184a8:	strbhi	r1, [r3, lr]
   184ac:	and	r4, r4, #7
   184b0:	cmp	r2, sl
   184b4:	add	r4, r4, #48	; 0x30
   184b8:	add	r7, r7, #3
   184bc:	bls	1881c <__assert_fail@plt+0x7408>
   184c0:	mov	r1, r8
   184c4:	cmp	fp, r7
   184c8:	strbhi	r4, [r3, r7]
   184cc:	ldrb	r4, [r0, #1]!
   184d0:	add	r7, r7, #1
   184d4:	cmp	r8, #0
   184d8:	bne	1841c <__assert_fail@plt+0x7008>
   184dc:	cmp	r6, #0
   184e0:	bne	18530 <__assert_fail@plt+0x711c>
   184e4:	eor	r6, r1, #1
   184e8:	and	r6, r6, ip
   184ec:	add	sl, sl, #1
   184f0:	cmp	r2, sl
   184f4:	uxtb	r6, r6
   184f8:	bls	18558 <__assert_fail@plt+0x7144>
   184fc:	cmp	r6, #0
   18500:	beq	184c4 <__assert_fail@plt+0x70b0>
   18504:	cmp	fp, r7
   18508:	movhi	ip, #39	; 0x27
   1850c:	strbhi	ip, [r3, r7]
   18510:	add	ip, r7, #1
   18514:	cmp	fp, ip
   18518:	movhi	lr, #39	; 0x27
   1851c:	strbhi	lr, [r3, ip]
   18520:	add	r7, r7, #2
   18524:	mov	r6, r8
   18528:	mov	ip, r8
   1852c:	b	184c4 <__assert_fail@plt+0x70b0>
   18530:	cmp	fp, r7
   18534:	eor	r6, r1, #1
   18538:	movhi	lr, #92	; 0x5c
   1853c:	and	r6, r6, ip
   18540:	add	sl, sl, #1
   18544:	strbhi	lr, [r3, r7]
   18548:	cmp	r2, sl
   1854c:	add	r7, r7, #1
   18550:	uxtb	r6, r6
   18554:	bhi	184fc <__assert_fail@plt+0x70e8>
   18558:	str	ip, [sp, #40]	; 0x28
   1855c:	ldr	r5, [sp, #48]	; 0x30
   18560:	b	17c28 <__assert_fail@plt+0x6814>
   18564:	ldr	r3, [sp, #24]
   18568:	cmn	r3, #1
   1856c:	mov	r3, #0
   18570:	str	r3, [sp, #104]	; 0x68
   18574:	str	r3, [sp, #108]	; 0x6c
   18578:	beq	18898 <__assert_fail@plt+0x7484>
   1857c:	mov	r2, r5
   18580:	mov	r3, #0
   18584:	str	r7, [sp, #88]	; 0x58
   18588:	ldr	r7, [sp, #152]	; 0x98
   1858c:	str	r5, [sp, #92]	; 0x5c
   18590:	str	r6, [sp, #84]	; 0x54
   18594:	mov	r5, r3
   18598:	mov	r6, r2
   1859c:	str	r4, [sp, #80]	; 0x50
   185a0:	ldr	r3, [sp, #56]	; 0x38
   185a4:	add	r9, sl, r5
   185a8:	add	r8, r3, r9
   185ac:	ldr	r3, [sp, #24]
   185b0:	mov	r1, r8
   185b4:	sub	r2, r3, r9
   185b8:	add	r0, sp, #100	; 0x64
   185bc:	add	r3, sp, #104	; 0x68
   185c0:	bl	1abc8 <__assert_fail@plt+0x97b4>
   185c4:	subs	r4, r0, #0
   185c8:	beq	18970 <__assert_fail@plt+0x755c>
   185cc:	cmn	r4, #1
   185d0:	beq	18950 <__assert_fail@plt+0x753c>
   185d4:	cmn	r4, #2
   185d8:	beq	188f0 <__assert_fail@plt+0x74dc>
   185dc:	ldr	r2, [sp, #28]
   185e0:	cmp	r7, #2
   185e4:	movne	r2, #0
   185e8:	andeq	r2, r2, #1
   185ec:	cmp	r2, #0
   185f0:	beq	183a0 <__assert_fail@plt+0x6f8c>
   185f4:	cmp	r4, #1
   185f8:	beq	183a0 <__assert_fail@plt+0x6f8c>
   185fc:	sub	r3, r4, #1
   18600:	add	r9, r3, r9
   18604:	ldr	r3, [sp, #56]	; 0x38
   18608:	add	r9, r3, r9
   1860c:	ldrb	r3, [r8, #1]!
   18610:	sub	r3, r3, #91	; 0x5b
   18614:	cmp	r3, #33	; 0x21
   18618:	ldrls	pc, [pc, r3, lsl #2]
   1861c:	b	18398 <__assert_fail@plt+0x6f84>
   18620:	andeq	r8, r1, r8, lsr #13
   18624:	andeq	r8, r1, r8, lsr #13
   18628:	muleq	r1, r8, r3
   1862c:	andeq	r8, r1, r8, lsr #13
   18630:	muleq	r1, r8, r3
   18634:	andeq	r8, r1, r8, lsr #13
   18638:	muleq	r1, r8, r3
   1863c:	muleq	r1, r8, r3
   18640:	muleq	r1, r8, r3
   18644:	muleq	r1, r8, r3
   18648:	muleq	r1, r8, r3
   1864c:	muleq	r1, r8, r3
   18650:	muleq	r1, r8, r3
   18654:	muleq	r1, r8, r3
   18658:	muleq	r1, r8, r3
   1865c:	muleq	r1, r8, r3
   18660:	muleq	r1, r8, r3
   18664:	muleq	r1, r8, r3
   18668:	muleq	r1, r8, r3
   1866c:	muleq	r1, r8, r3
   18670:	muleq	r1, r8, r3
   18674:	muleq	r1, r8, r3
   18678:	muleq	r1, r8, r3
   1867c:	muleq	r1, r8, r3
   18680:	muleq	r1, r8, r3
   18684:	muleq	r1, r8, r3
   18688:	muleq	r1, r8, r3
   1868c:	muleq	r1, r8, r3
   18690:	muleq	r1, r8, r3
   18694:	muleq	r1, r8, r3
   18698:	muleq	r1, r8, r3
   1869c:	muleq	r1, r8, r3
   186a0:	muleq	r1, r8, r3
   186a4:	andeq	r8, r1, r8, lsr #13
   186a8:	mov	r3, #2
   186ac:	ldr	sl, [sp, #32]
   186b0:	mov	r8, fp
   186b4:	str	r3, [sp, #152]	; 0x98
   186b8:	b	17e30 <__assert_fail@plt+0x6a1c>
   186bc:	ldr	r3, [sp, #156]	; 0x9c
   186c0:	tst	r3, #1
   186c4:	bne	187f0 <__assert_fail@plt+0x73dc>
   186c8:	ldr	r3, [sp, #152]	; 0x98
   186cc:	ldr	r4, [sp, #44]	; 0x2c
   186d0:	sub	r2, r3, #2
   186d4:	mov	r5, #0
   186d8:	clz	r2, r2
   186dc:	mov	r8, r4
   186e0:	lsr	r2, r2, #5
   186e4:	b	17bf0 <__assert_fail@plt+0x67dc>
   186e8:	ldr	r3, [sp, #156]	; 0x9c
   186ec:	ands	r9, r3, #4
   186f0:	beq	18828 <__assert_fail@plt+0x7414>
   186f4:	ldr	r2, [sp, #24]
   186f8:	add	r3, sl, #2
   186fc:	cmp	r3, r2
   18700:	bcs	18714 <__assert_fail@plt+0x7300>
   18704:	ldr	r2, [sp, #48]	; 0x30
   18708:	ldrb	r4, [r2, #1]
   1870c:	cmp	r4, #63	; 0x3f
   18710:	beq	189b0 <__assert_fail@plt+0x759c>
   18714:	mov	r2, #0
   18718:	mov	r8, r2
   1871c:	mov	r5, r2
   18720:	mov	r4, #63	; 0x3f
   18724:	b	17bf0 <__assert_fail@plt+0x67dc>
   18728:	ldr	r3, [sp, #28]
   1872c:	cmp	r3, #0
   18730:	bne	18a54 <__assert_fail@plt+0x7640>
   18734:	mov	r2, r5
   18738:	mov	r8, r3
   1873c:	mov	r5, #0
   18740:	mov	r4, #63	; 0x3f
   18744:	b	17bf0 <__assert_fail@plt+0x67dc>
   18748:	ldr	r3, [sp, #28]
   1874c:	cmp	r3, #0
   18750:	bne	18a54 <__assert_fail@plt+0x7640>
   18754:	ldr	r2, [sp, #72]	; 0x48
   18758:	adds	r3, fp, #0
   1875c:	movne	r3, #1
   18760:	cmp	r2, #0
   18764:	movne	r3, #0
   18768:	cmp	r3, #0
   1876c:	strne	fp, [sp, #72]	; 0x48
   18770:	movne	fp, #0
   18774:	bne	187b0 <__assert_fail@plt+0x739c>
   18778:	cmp	fp, r7
   1877c:	movhi	r2, #39	; 0x27
   18780:	ldrhi	r3, [sp, #32]
   18784:	strbhi	r2, [r3, r7]
   18788:	add	r3, r7, #1
   1878c:	cmp	fp, r3
   18790:	movhi	r1, #92	; 0x5c
   18794:	ldrhi	r2, [sp, #32]
   18798:	strbhi	r1, [r2, r3]
   1879c:	add	r3, r7, #2
   187a0:	cmp	fp, r3
   187a4:	movhi	r1, #39	; 0x27
   187a8:	ldrhi	r2, [sp, #32]
   187ac:	strbhi	r1, [r2, r3]
   187b0:	ldr	r3, [sp, #28]
   187b4:	add	r7, r7, #3
   187b8:	mov	r2, r5
   187bc:	mov	r8, r3
   187c0:	str	r5, [sp, #68]	; 0x44
   187c4:	str	r3, [sp, #40]	; 0x28
   187c8:	mov	r4, #39	; 0x27
   187cc:	b	17bf0 <__assert_fail@plt+0x67dc>
   187d0:	ldr	r3, [sp, #56]	; 0x38
   187d4:	ldrb	r3, [r3, #1]
   187d8:	adds	r3, r3, #0
   187dc:	movne	r3, #1
   187e0:	b	17bc8 <__assert_fail@plt+0x67b4>
   187e4:	ldr	r5, [sp, #28]
   187e8:	mov	r4, #48	; 0x30
   187ec:	b	17bf0 <__assert_fail@plt+0x67dc>
   187f0:	add	sl, sl, #1
   187f4:	b	17720 <__assert_fail@plt+0x630c>
   187f8:	mov	sl, r3
   187fc:	ldr	r3, [sp, #28]
   18800:	mov	r8, fp
   18804:	str	r3, [sp, #44]	; 0x2c
   18808:	ldr	r3, [sp, #152]	; 0x98
   1880c:	sub	r2, r3, #2
   18810:	clz	r2, r2
   18814:	lsr	r2, r2, #5
   18818:	b	17e30 <__assert_fail@plt+0x6a1c>
   1881c:	str	ip, [sp, #40]	; 0x28
   18820:	ldr	r5, [sp, #48]	; 0x30
   18824:	b	17c60 <__assert_fail@plt+0x684c>
   18828:	mov	r2, r9
   1882c:	mov	r8, r9
   18830:	mov	r5, #0
   18834:	mov	r4, #63	; 0x3f
   18838:	b	17bf0 <__assert_fail@plt+0x67dc>
   1883c:	cmp	fp, #0
   18840:	beq	188b8 <__assert_fail@plt+0x74a4>
   18844:	ldr	r1, [sp, #32]
   18848:	mov	r3, #34	; 0x22
   1884c:	mov	r2, #1
   18850:	strb	r3, [r1]
   18854:	ldr	r3, [pc, #332]	; 189a8 <__assert_fail@plt+0x7594>
   18858:	str	r2, [sp, #52]	; 0x34
   1885c:	mov	r7, r2
   18860:	str	r2, [sp, #44]	; 0x2c
   18864:	str	r3, [sp, #64]	; 0x40
   18868:	b	17710 <__assert_fail@plt+0x62fc>
   1886c:	ldr	r3, [pc, #300]	; 189a0 <__assert_fail@plt+0x758c>
   18870:	str	r3, [sp, #64]	; 0x40
   18874:	mov	r3, #0
   18878:	str	r3, [sp, #28]
   1887c:	mov	r3, #1
   18880:	str	r3, [sp, #52]	; 0x34
   18884:	mov	r7, r3
   18888:	mov	r3, #2
   1888c:	str	r3, [sp, #152]	; 0x98
   18890:	b	17710 <__assert_fail@plt+0x62fc>
   18894:	bl	113f0 <abort@plt>
   18898:	ldr	r0, [sp, #56]	; 0x38
   1889c:	bl	112a0 <strlen@plt>
   188a0:	str	r0, [sp, #24]
   188a4:	b	1857c <__assert_fail@plt+0x7168>
   188a8:	mov	r5, r8
   188ac:	mov	r4, #48	; 0x30
   188b0:	ldr	r8, [sp, #44]	; 0x2c
   188b4:	b	17bf0 <__assert_fail@plt+0x67dc>
   188b8:	mov	r3, #1
   188bc:	str	r3, [sp, #52]	; 0x34
   188c0:	mov	r7, r3
   188c4:	str	r3, [sp, #44]	; 0x2c
   188c8:	ldr	r3, [pc, #216]	; 189a8 <__assert_fail@plt+0x7594>
   188cc:	str	r3, [sp, #64]	; 0x40
   188d0:	b	17710 <__assert_fail@plt+0x62fc>
   188d4:	ldr	sl, [sp, #32]
   188d8:	mov	r8, fp
   188dc:	mov	r2, r3
   188e0:	b	17e30 <__assert_fail@plt+0x6a1c>
   188e4:	mov	r3, r5
   188e8:	mov	r5, r2
   188ec:	b	180e8 <__assert_fail@plt+0x6cd4>
   188f0:	ldr	r1, [sp, #24]
   188f4:	mov	r2, r5
   188f8:	cmp	r1, r9
   188fc:	mov	ip, r5
   18900:	ldr	r4, [sp, #80]	; 0x50
   18904:	ldr	r5, [sp, #92]	; 0x5c
   18908:	ldr	r6, [sp, #84]	; 0x54
   1890c:	ldr	r7, [sp, #88]	; 0x58
   18910:	bls	18944 <__assert_fail@plt+0x7530>
   18914:	ldrb	r3, [r8]
   18918:	cmp	r3, #0
   1891c:	bne	18930 <__assert_fail@plt+0x751c>
   18920:	b	18948 <__assert_fail@plt+0x7534>
   18924:	ldrb	r3, [r8, #1]!
   18928:	cmp	r3, #0
   1892c:	beq	18a48 <__assert_fail@plt+0x7634>
   18930:	add	r2, r2, #1
   18934:	add	r3, sl, r2
   18938:	cmp	r1, r3
   1893c:	bhi	18924 <__assert_fail@plt+0x7510>
   18940:	mov	ip, r2
   18944:	mov	r3, #0
   18948:	mov	r2, r3
   1894c:	b	183e0 <__assert_fail@plt+0x6fcc>
   18950:	mov	r3, #0
   18954:	mov	ip, r5
   18958:	ldr	r4, [sp, #80]	; 0x50
   1895c:	ldr	r5, [sp, #92]	; 0x5c
   18960:	ldr	r6, [sp, #84]	; 0x54
   18964:	ldr	r7, [sp, #88]	; 0x58
   18968:	mov	r2, r3
   1896c:	b	183e0 <__assert_fail@plt+0x6fcc>
   18970:	mov	r3, r6
   18974:	mov	ip, r5
   18978:	eor	r5, r3, #1
   1897c:	mov	r2, r6
   18980:	ldr	r4, [sp, #80]	; 0x50
   18984:	ldr	r6, [sp, #84]	; 0x54
   18988:	ldr	r7, [sp, #88]	; 0x58
   1898c:	uxtb	r5, r5
   18990:	b	183e0 <__assert_fail@plt+0x6fcc>
   18994:	ldr	sl, [sp, #32]
   18998:	mov	r8, fp
   1899c:	b	18804 <__assert_fail@plt+0x73f0>
   189a0:	andeq	ip, r1, r0, lsl fp
   189a4:	andeq	ip, r1, r4, lsl fp
   189a8:	andeq	ip, r1, ip, lsl #22
   189ac:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   189b0:	ldr	r2, [sp, #56]	; 0x38
   189b4:	ldrb	r1, [r2, r3]
   189b8:	sub	r2, r1, #33	; 0x21
   189bc:	uxtb	r2, r2
   189c0:	cmp	r2, #29
   189c4:	bhi	18a64 <__assert_fail@plt+0x7650>
   189c8:	ldr	r0, [pc, #-36]	; 189ac <__assert_fail@plt+0x7598>
   189cc:	mov	ip, #1
   189d0:	ands	r2, r0, ip, lsl r2
   189d4:	beq	18a74 <__assert_fail@plt+0x7660>
   189d8:	ldr	r2, [sp, #28]
   189dc:	cmp	r2, #0
   189e0:	bne	18b74 <__assert_fail@plt+0x7760>
   189e4:	cmp	fp, r7
   189e8:	ldr	r8, [sp, #28]
   189ec:	ldrhi	r2, [sp, #32]
   189f0:	mov	sl, r3
   189f4:	mov	r5, r8
   189f8:	strbhi	r4, [r2, r7]
   189fc:	add	r2, r7, #1
   18a00:	cmp	fp, r2
   18a04:	movhi	r0, #34	; 0x22
   18a08:	ldrhi	ip, [sp, #32]
   18a0c:	mov	r4, r1
   18a10:	strbhi	r0, [ip, r2]
   18a14:	add	r2, r7, #2
   18a18:	cmp	fp, r2
   18a1c:	movhi	r0, #34	; 0x22
   18a20:	ldrhi	ip, [sp, #32]
   18a24:	strbhi	r0, [ip, r2]
   18a28:	add	r2, r7, #3
   18a2c:	cmp	fp, r2
   18a30:	movhi	r0, #63	; 0x3f
   18a34:	ldrhi	ip, [sp, #32]
   18a38:	add	r7, r7, #4
   18a3c:	strbhi	r0, [ip, r2]
   18a40:	mov	r2, r8
   18a44:	b	17bf0 <__assert_fail@plt+0x67dc>
   18a48:	mov	ip, r2
   18a4c:	mov	r2, r3
   18a50:	b	183e0 <__assert_fail@plt+0x6fcc>
   18a54:	ldr	sl, [sp, #32]
   18a58:	mov	r8, fp
   18a5c:	ldr	r2, [sp, #28]
   18a60:	b	17e30 <__assert_fail@plt+0x6a1c>
   18a64:	mov	r2, #0
   18a68:	mov	r8, r2
   18a6c:	mov	r5, r2
   18a70:	b	17bf0 <__assert_fail@plt+0x67dc>
   18a74:	mov	r8, r2
   18a78:	mov	r5, #0
   18a7c:	b	17bf0 <__assert_fail@plt+0x67dc>
   18a80:	ldr	r1, [sp, #152]	; 0x98
   18a84:	bl	1754c <__assert_fail@plt+0x6138>
   18a88:	str	r0, [sp, #168]	; 0xa8
   18a8c:	b	17aac <__assert_fail@plt+0x6698>
   18a90:	ldr	r1, [sp, #152]	; 0x98
   18a94:	bl	1754c <__assert_fail@plt+0x6138>
   18a98:	str	r0, [sp, #164]	; 0xa4
   18a9c:	b	17a8c <__assert_fail@plt+0x6678>
   18aa0:	ldr	r7, [sp, #28]
   18aa4:	b	17aec <__assert_fail@plt+0x66d8>
   18aa8:	ldr	sl, [sp, #32]
   18aac:	ldr	r2, [sp, #68]	; 0x44
   18ab0:	mov	r8, fp
   18ab4:	mov	fp, r7
   18ab8:	ldr	r3, [sp, #64]	; 0x40
   18abc:	cmp	r3, #0
   18ac0:	moveq	r2, #0
   18ac4:	andne	r2, r2, #1
   18ac8:	cmp	r2, #0
   18acc:	beq	18af8 <__assert_fail@plt+0x76e4>
   18ad0:	mov	r2, r3
   18ad4:	ldrb	r3, [r3]
   18ad8:	cmp	r3, #0
   18adc:	beq	18af8 <__assert_fail@plt+0x76e4>
   18ae0:	cmp	r8, fp
   18ae4:	strbhi	r3, [sl, fp]
   18ae8:	ldrb	r3, [r2, #1]!
   18aec:	add	fp, fp, #1
   18af0:	cmp	r3, #0
   18af4:	bne	18ae0 <__assert_fail@plt+0x76cc>
   18af8:	cmp	r8, fp
   18afc:	movhi	r3, #0
   18b00:	strbhi	r3, [sl, fp]
   18b04:	b	17e8c <__assert_fail@plt+0x6a78>
   18b08:	ldr	r3, [sp, #168]	; 0xa8
   18b0c:	ldr	sl, [sp, #32]
   18b10:	str	r3, [sp, #16]
   18b14:	ldr	r3, [sp, #164]	; 0xa4
   18b18:	mov	ip, #5
   18b1c:	str	r3, [sp, #12]
   18b20:	ldr	r3, [sp, #160]	; 0xa0
   18b24:	ldr	r2, [sp, #56]	; 0x38
   18b28:	str	r3, [sp, #8]
   18b2c:	ldr	r3, [sp, #156]	; 0x9c
   18b30:	ldr	r1, [sp, #72]	; 0x48
   18b34:	str	r3, [sp, #4]
   18b38:	mov	r0, sl
   18b3c:	ldr	r3, [sp, #24]
   18b40:	str	ip, [sp]
   18b44:	bl	1766c <__assert_fail@plt+0x6258>
   18b48:	mov	fp, r0
   18b4c:	b	17e8c <__assert_fail@plt+0x6a78>
   18b50:	mov	r8, fp
   18b54:	ldr	sl, [sp, #32]
   18b58:	mov	fp, r7
   18b5c:	mov	r2, r3
   18b60:	b	18ab8 <__assert_fail@plt+0x76a4>
   18b64:	mov	r8, fp
   18b68:	ldr	sl, [sp, #32]
   18b6c:	mov	fp, r7
   18b70:	b	18ab8 <__assert_fail@plt+0x76a4>
   18b74:	ldr	sl, [sp, #32]
   18b78:	mov	r8, fp
   18b7c:	b	17e48 <__assert_fail@plt+0x6a34>
   18b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b84:	sub	sp, sp, #52	; 0x34
   18b88:	mov	r4, r0
   18b8c:	mov	r5, r3
   18b90:	mov	sl, r1
   18b94:	mov	fp, r2
   18b98:	bl	112dc <__errno_location@plt>
   18b9c:	ldr	r7, [pc, #412]	; 18d40 <__assert_fail@plt+0x792c>
   18ba0:	cmn	r4, #-2147483647	; 0x80000001
   18ba4:	ldr	r6, [r7]
   18ba8:	mov	r8, r0
   18bac:	movne	r0, #0
   18bb0:	moveq	r0, #1
   18bb4:	ldr	r3, [r8]
   18bb8:	orrs	r0, r0, r4, lsr #31
   18bbc:	str	r3, [sp, #24]
   18bc0:	bne	18d3c <__assert_fail@plt+0x7928>
   18bc4:	ldr	r2, [r7, #4]
   18bc8:	cmp	r4, r2
   18bcc:	blt	18c2c <__assert_fail@plt+0x7818>
   18bd0:	add	r9, r7, #8
   18bd4:	cmp	r6, r9
   18bd8:	str	r2, [sp, #44]	; 0x2c
   18bdc:	beq	18d0c <__assert_fail@plt+0x78f8>
   18be0:	mov	r3, #8
   18be4:	sub	r2, r4, r2
   18be8:	mov	r0, r6
   18bec:	str	r3, [sp]
   18bf0:	add	r2, r2, #1
   18bf4:	mvn	r3, #-2147483648	; 0x80000000
   18bf8:	add	r1, sp, #44	; 0x2c
   18bfc:	bl	19a90 <__assert_fail@plt+0x867c>
   18c00:	mov	r6, r0
   18c04:	str	r0, [r7]
   18c08:	ldr	r0, [r7, #4]
   18c0c:	ldr	r2, [sp, #44]	; 0x2c
   18c10:	mov	r1, #0
   18c14:	sub	r2, r2, r0
   18c18:	add	r0, r6, r0, lsl #3
   18c1c:	lsl	r2, r2, #3
   18c20:	bl	112f4 <memset@plt>
   18c24:	ldr	r3, [sp, #44]	; 0x2c
   18c28:	str	r3, [r7, #4]
   18c2c:	add	r3, r6, r4, lsl #3
   18c30:	ldr	r1, [r5, #4]
   18c34:	ldr	r7, [r3, #4]
   18c38:	ldr	r9, [r6, r4, lsl #3]
   18c3c:	ldr	r2, [r5, #40]	; 0x28
   18c40:	ldr	ip, [r5, #44]	; 0x2c
   18c44:	add	r0, r5, #8
   18c48:	str	r3, [sp, #28]
   18c4c:	ldr	r3, [r5]
   18c50:	orr	r1, r1, #1
   18c54:	mov	lr, r0
   18c58:	str	r1, [sp, #32]
   18c5c:	str	r0, [sp, #36]	; 0x24
   18c60:	str	r1, [sp, #4]
   18c64:	str	r2, [sp, #12]
   18c68:	str	r3, [sp]
   18c6c:	mov	r0, r7
   18c70:	mov	r1, r9
   18c74:	str	ip, [sp, #16]
   18c78:	str	lr, [sp, #8]
   18c7c:	mov	r3, fp
   18c80:	mov	r2, sl
   18c84:	bl	1766c <__assert_fail@plt+0x6258>
   18c88:	cmp	r9, r0
   18c8c:	bhi	18cf8 <__assert_fail@plt+0x78e4>
   18c90:	ldr	r3, [pc, #172]	; 18d44 <__assert_fail@plt+0x7930>
   18c94:	add	r9, r0, #1
   18c98:	cmp	r7, r3
   18c9c:	str	r9, [r6, r4, lsl #3]
   18ca0:	beq	18cac <__assert_fail@plt+0x7898>
   18ca4:	mov	r0, r7
   18ca8:	bl	16324 <__assert_fail@plt+0x4f10>
   18cac:	mov	r0, r9
   18cb0:	bl	1992c <__assert_fail@plt+0x8518>
   18cb4:	ldr	lr, [sp, #28]
   18cb8:	ldr	ip, [r5, #44]	; 0x2c
   18cbc:	ldr	r4, [r5, #40]	; 0x28
   18cc0:	mov	r3, fp
   18cc4:	mov	r2, sl
   18cc8:	mov	r1, r9
   18ccc:	str	r0, [lr, #4]
   18cd0:	ldr	lr, [r5]
   18cd4:	ldr	r5, [sp, #36]	; 0x24
   18cd8:	str	ip, [sp, #16]
   18cdc:	str	r5, [sp, #8]
   18ce0:	ldr	r5, [sp, #32]
   18ce4:	str	r4, [sp, #12]
   18ce8:	str	r5, [sp, #4]
   18cec:	str	lr, [sp]
   18cf0:	mov	r7, r0
   18cf4:	bl	1766c <__assert_fail@plt+0x6258>
   18cf8:	ldr	r3, [sp, #24]
   18cfc:	mov	r0, r7
   18d00:	str	r3, [r8]
   18d04:	add	sp, sp, #52	; 0x34
   18d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d0c:	mov	r3, #8
   18d10:	sub	r2, r4, r2
   18d14:	str	r3, [sp]
   18d18:	add	r1, sp, #44	; 0x2c
   18d1c:	add	r2, r2, #1
   18d20:	mvn	r3, #-2147483648	; 0x80000000
   18d24:	bl	19a90 <__assert_fail@plt+0x867c>
   18d28:	mov	r6, r0
   18d2c:	ldm	r9, {r0, r1}
   18d30:	str	r6, [r7]
   18d34:	stm	r6, {r0, r1}
   18d38:	b	18c08 <__assert_fail@plt+0x77f4>
   18d3c:	bl	113f0 <abort@plt>
   18d40:	andeq	lr, r2, ip, ror #2
   18d44:	strdeq	lr, [r2], -r0
   18d48:	push	{r4, r5, r6, lr}
   18d4c:	mov	r5, r0
   18d50:	bl	112dc <__errno_location@plt>
   18d54:	cmp	r5, #0
   18d58:	mov	r1, #48	; 0x30
   18d5c:	mov	r4, r0
   18d60:	ldr	r0, [pc, #16]	; 18d78 <__assert_fail@plt+0x7964>
   18d64:	ldr	r6, [r4]
   18d68:	movne	r0, r5
   18d6c:	bl	19d8c <__assert_fail@plt+0x8978>
   18d70:	str	r6, [r4]
   18d74:	pop	{r4, r5, r6, pc}
   18d78:	strdeq	lr, [r2], -r0
   18d7c:	ldr	r3, [pc, #12]	; 18d90 <__assert_fail@plt+0x797c>
   18d80:	cmp	r0, #0
   18d84:	moveq	r0, r3
   18d88:	ldr	r0, [r0]
   18d8c:	bx	lr
   18d90:	strdeq	lr, [r2], -r0
   18d94:	ldr	r3, [pc, #12]	; 18da8 <__assert_fail@plt+0x7994>
   18d98:	cmp	r0, #0
   18d9c:	moveq	r0, r3
   18da0:	str	r1, [r0]
   18da4:	bx	lr
   18da8:	strdeq	lr, [r2], -r0
   18dac:	ldr	r3, [pc, #52]	; 18de8 <__assert_fail@plt+0x79d4>
   18db0:	cmp	r0, #0
   18db4:	moveq	r0, r3
   18db8:	add	r3, r0, #8
   18dbc:	push	{lr}		; (str lr, [sp, #-4]!)
   18dc0:	lsr	lr, r1, #5
   18dc4:	and	r1, r1, #31
   18dc8:	ldr	ip, [r3, lr, lsl #2]
   18dcc:	lsr	r0, ip, r1
   18dd0:	eor	r2, r2, r0
   18dd4:	and	r2, r2, #1
   18dd8:	and	r0, r0, #1
   18ddc:	eor	r1, ip, r2, lsl r1
   18de0:	str	r1, [r3, lr, lsl #2]
   18de4:	pop	{pc}		; (ldr pc, [sp], #4)
   18de8:	strdeq	lr, [r2], -r0
   18dec:	ldr	r3, [pc, #16]	; 18e04 <__assert_fail@plt+0x79f0>
   18df0:	cmp	r0, #0
   18df4:	movne	r3, r0
   18df8:	ldr	r0, [r3, #4]
   18dfc:	str	r1, [r3, #4]
   18e00:	bx	lr
   18e04:	strdeq	lr, [r2], -r0
   18e08:	ldr	r3, [pc, #44]	; 18e3c <__assert_fail@plt+0x7a28>
   18e0c:	cmp	r0, #0
   18e10:	moveq	r0, r3
   18e14:	mov	ip, #10
   18e18:	cmp	r2, #0
   18e1c:	cmpne	r1, #0
   18e20:	str	ip, [r0]
   18e24:	beq	18e34 <__assert_fail@plt+0x7a20>
   18e28:	str	r1, [r0, #40]	; 0x28
   18e2c:	str	r2, [r0, #44]	; 0x2c
   18e30:	bx	lr
   18e34:	push	{r4, lr}
   18e38:	bl	113f0 <abort@plt>
   18e3c:	strdeq	lr, [r2], -r0
   18e40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18e44:	sub	sp, sp, #24
   18e48:	ldr	ip, [pc, #108]	; 18ebc <__assert_fail@plt+0x7aa8>
   18e4c:	ldr	r4, [sp, #56]	; 0x38
   18e50:	mov	r9, r2
   18e54:	cmp	r4, #0
   18e58:	moveq	r4, ip
   18e5c:	mov	sl, r3
   18e60:	mov	r7, r0
   18e64:	mov	r8, r1
   18e68:	bl	112dc <__errno_location@plt>
   18e6c:	ldr	r3, [r4, #44]	; 0x2c
   18e70:	mov	r1, r8
   18e74:	ldr	r6, [r0]
   18e78:	str	r3, [sp, #16]
   18e7c:	ldr	r2, [r4, #40]	; 0x28
   18e80:	add	r3, r4, #8
   18e84:	str	r3, [sp, #8]
   18e88:	str	r2, [sp, #12]
   18e8c:	ldr	r2, [r4, #4]
   18e90:	mov	r5, r0
   18e94:	str	r2, [sp, #4]
   18e98:	ldr	ip, [r4]
   18e9c:	mov	r3, sl
   18ea0:	mov	r2, r9
   18ea4:	mov	r0, r7
   18ea8:	str	ip, [sp]
   18eac:	bl	1766c <__assert_fail@plt+0x6258>
   18eb0:	str	r6, [r5]
   18eb4:	add	sp, sp, #24
   18eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ebc:	strdeq	lr, [r2], -r0
   18ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ec4:	cmp	r3, #0
   18ec8:	sub	sp, sp, #44	; 0x2c
   18ecc:	ldr	r4, [pc, #192]	; 18f94 <__assert_fail@plt+0x7b80>
   18ed0:	mov	r6, r2
   18ed4:	movne	r4, r3
   18ed8:	mov	r9, r1
   18edc:	mov	r8, r0
   18ee0:	bl	112dc <__errno_location@plt>
   18ee4:	ldr	r3, [r4, #44]	; 0x2c
   18ee8:	ldr	r5, [r4, #4]
   18eec:	add	sl, r4, #8
   18ef0:	cmp	r6, #0
   18ef4:	orreq	r5, r5, #1
   18ef8:	mov	r1, #0
   18efc:	ldr	r2, [r0]
   18f00:	str	r3, [sp, #16]
   18f04:	ldr	r3, [r4, #40]	; 0x28
   18f08:	stmib	sp, {r5, sl}
   18f0c:	str	r3, [sp, #12]
   18f10:	ldr	r3, [r4]
   18f14:	mov	r7, r0
   18f18:	str	r2, [sp, #28]
   18f1c:	str	r3, [sp]
   18f20:	mov	r2, r8
   18f24:	mov	r3, r9
   18f28:	mov	r0, r1
   18f2c:	bl	1766c <__assert_fail@plt+0x6258>
   18f30:	add	r1, r0, #1
   18f34:	mov	fp, r0
   18f38:	mov	r0, r1
   18f3c:	str	r1, [sp, #36]	; 0x24
   18f40:	bl	1992c <__assert_fail@plt+0x8518>
   18f44:	ldr	r3, [r4, #44]	; 0x2c
   18f48:	mov	r2, r8
   18f4c:	str	r3, [sp, #16]
   18f50:	ldr	r3, [r4, #40]	; 0x28
   18f54:	str	r5, [sp, #4]
   18f58:	str	r3, [sp, #12]
   18f5c:	str	sl, [sp, #8]
   18f60:	ldr	ip, [r4]
   18f64:	ldr	r1, [sp, #36]	; 0x24
   18f68:	mov	r3, r9
   18f6c:	str	ip, [sp]
   18f70:	str	r0, [sp, #32]
   18f74:	bl	1766c <__assert_fail@plt+0x6258>
   18f78:	ldr	r2, [sp, #28]
   18f7c:	cmp	r6, #0
   18f80:	str	r2, [r7]
   18f84:	ldr	r0, [sp, #32]
   18f88:	strne	fp, [r6]
   18f8c:	add	sp, sp, #44	; 0x2c
   18f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f94:	strdeq	lr, [r2], -r0
   18f98:	mov	r3, r2
   18f9c:	mov	r2, #0
   18fa0:	b	18ec0 <__assert_fail@plt+0x7aac>
   18fa4:	push	{r4, r5, r6, r7, r8, lr}
   18fa8:	ldr	r6, [pc, #116]	; 19024 <__assert_fail@plt+0x7c10>
   18fac:	ldr	r3, [r6, #4]
   18fb0:	ldr	r7, [r6]
   18fb4:	cmp	r3, #1
   18fb8:	movgt	r5, r7
   18fbc:	movgt	r4, #1
   18fc0:	ble	18fe0 <__assert_fail@plt+0x7bcc>
   18fc4:	ldr	r0, [r5, #12]
   18fc8:	bl	16324 <__assert_fail@plt+0x4f10>
   18fcc:	ldr	r3, [r6, #4]
   18fd0:	add	r4, r4, #1
   18fd4:	cmp	r3, r4
   18fd8:	add	r5, r5, #8
   18fdc:	bgt	18fc4 <__assert_fail@plt+0x7bb0>
   18fe0:	ldr	r0, [r7, #4]
   18fe4:	ldr	r4, [pc, #60]	; 19028 <__assert_fail@plt+0x7c14>
   18fe8:	cmp	r0, r4
   18fec:	beq	19000 <__assert_fail@plt+0x7bec>
   18ff0:	bl	16324 <__assert_fail@plt+0x4f10>
   18ff4:	mov	r3, #256	; 0x100
   18ff8:	str	r4, [r6, #12]
   18ffc:	str	r3, [r6, #8]
   19000:	ldr	r4, [pc, #36]	; 1902c <__assert_fail@plt+0x7c18>
   19004:	cmp	r7, r4
   19008:	beq	19018 <__assert_fail@plt+0x7c04>
   1900c:	mov	r0, r7
   19010:	bl	16324 <__assert_fail@plt+0x4f10>
   19014:	str	r4, [r6]
   19018:	mov	r3, #1
   1901c:	str	r3, [r6, #4]
   19020:	pop	{r4, r5, r6, r7, r8, pc}
   19024:	andeq	lr, r2, ip, ror #2
   19028:	strdeq	lr, [r2], -r0
   1902c:	andeq	lr, r2, r4, ror r1
   19030:	ldr	r3, [pc, #4]	; 1903c <__assert_fail@plt+0x7c28>
   19034:	mvn	r2, #0
   19038:	b	18b80 <__assert_fail@plt+0x776c>
   1903c:	strdeq	lr, [r2], -r0
   19040:	ldr	r3, [pc]	; 19048 <__assert_fail@plt+0x7c34>
   19044:	b	18b80 <__assert_fail@plt+0x776c>
   19048:	strdeq	lr, [r2], -r0
   1904c:	mov	r1, r0
   19050:	ldr	r3, [pc, #8]	; 19060 <__assert_fail@plt+0x7c4c>
   19054:	mvn	r2, #0
   19058:	mov	r0, #0
   1905c:	b	18b80 <__assert_fail@plt+0x776c>
   19060:	strdeq	lr, [r2], -r0
   19064:	mov	r2, r1
   19068:	ldr	r3, [pc, #8]	; 19078 <__assert_fail@plt+0x7c64>
   1906c:	mov	r1, r0
   19070:	mov	r0, #0
   19074:	b	18b80 <__assert_fail@plt+0x776c>
   19078:	strdeq	lr, [r2], -r0
   1907c:	push	{r4, r5, lr}
   19080:	sub	sp, sp, #52	; 0x34
   19084:	mov	r5, r2
   19088:	mov	r4, r0
   1908c:	mov	r0, sp
   19090:	bl	1751c <__assert_fail@plt+0x6108>
   19094:	mov	r3, sp
   19098:	mov	r1, r5
   1909c:	mov	r0, r4
   190a0:	mvn	r2, #0
   190a4:	bl	18b80 <__assert_fail@plt+0x776c>
   190a8:	add	sp, sp, #52	; 0x34
   190ac:	pop	{r4, r5, pc}
   190b0:	push	{r4, r5, r6, lr}
   190b4:	sub	sp, sp, #48	; 0x30
   190b8:	mov	r5, r2
   190bc:	mov	r6, r3
   190c0:	mov	r4, r0
   190c4:	mov	r0, sp
   190c8:	bl	1751c <__assert_fail@plt+0x6108>
   190cc:	mov	r3, sp
   190d0:	mov	r2, r6
   190d4:	mov	r1, r5
   190d8:	mov	r0, r4
   190dc:	bl	18b80 <__assert_fail@plt+0x776c>
   190e0:	add	sp, sp, #48	; 0x30
   190e4:	pop	{r4, r5, r6, pc}
   190e8:	mov	r2, r1
   190ec:	mov	r1, r0
   190f0:	mov	r0, #0
   190f4:	b	1907c <__assert_fail@plt+0x7c68>
   190f8:	mov	r3, r2
   190fc:	mov	r2, r1
   19100:	mov	r1, r0
   19104:	mov	r0, #0
   19108:	b	190b0 <__assert_fail@plt+0x7c9c>
   1910c:	push	{r4, r5, r6, r7, r8, lr}
   19110:	mov	r7, r0
   19114:	ldr	lr, [pc, #100]	; 19180 <__assert_fail@plt+0x7d6c>
   19118:	mov	r8, r1
   1911c:	mov	r4, r2
   19120:	ldm	lr!, {r0, r1, r2, r3}
   19124:	sub	sp, sp, #48	; 0x30
   19128:	mov	ip, sp
   1912c:	lsr	r5, r4, #5
   19130:	stmia	ip!, {r0, r1, r2, r3}
   19134:	add	r6, sp, #8
   19138:	ldm	lr!, {r0, r1, r2, r3}
   1913c:	and	r4, r4, #31
   19140:	stmia	ip!, {r0, r1, r2, r3}
   19144:	ldm	lr, {r0, r1, r2, r3}
   19148:	stm	ip, {r0, r1, r2, r3}
   1914c:	mov	r2, r8
   19150:	ldr	lr, [r6, r5, lsl #2]
   19154:	mov	r1, r7
   19158:	mov	r3, sp
   1915c:	lsr	ip, lr, r4
   19160:	eor	ip, ip, #1
   19164:	and	ip, ip, #1
   19168:	mov	r0, #0
   1916c:	eor	r4, lr, ip, lsl r4
   19170:	str	r4, [r6, r5, lsl #2]
   19174:	bl	18b80 <__assert_fail@plt+0x776c>
   19178:	add	sp, sp, #48	; 0x30
   1917c:	pop	{r4, r5, r6, r7, r8, pc}
   19180:	strdeq	lr, [r2], -r0
   19184:	mov	r2, r1
   19188:	mvn	r1, #0
   1918c:	b	1910c <__assert_fail@plt+0x7cf8>
   19190:	mov	r2, #58	; 0x3a
   19194:	mvn	r1, #0
   19198:	b	1910c <__assert_fail@plt+0x7cf8>
   1919c:	mov	r2, #58	; 0x3a
   191a0:	b	1910c <__assert_fail@plt+0x7cf8>
   191a4:	push	{r4, r5, r6, r7, lr}
   191a8:	sub	sp, sp, #100	; 0x64
   191ac:	mov	r6, r0
   191b0:	mov	r0, sp
   191b4:	mov	r7, r2
   191b8:	bl	1751c <__assert_fail@plt+0x6108>
   191bc:	mov	ip, sp
   191c0:	add	lr, sp, #48	; 0x30
   191c4:	ldm	ip!, {r0, r1, r2, r3}
   191c8:	stmia	lr!, {r0, r1, r2, r3}
   191cc:	ldm	ip!, {r0, r1, r2, r3}
   191d0:	ldr	r5, [sp, #60]	; 0x3c
   191d4:	stmia	lr!, {r0, r1, r2, r3}
   191d8:	mvn	r4, r5
   191dc:	ldm	ip, {r0, r1, r2, r3}
   191e0:	and	ip, r4, #67108864	; 0x4000000
   191e4:	eor	ip, ip, r5
   191e8:	str	ip, [sp, #60]	; 0x3c
   191ec:	stm	lr, {r0, r1, r2, r3}
   191f0:	mov	r1, r7
   191f4:	mov	r0, r6
   191f8:	add	r3, sp, #48	; 0x30
   191fc:	mvn	r2, #0
   19200:	bl	18b80 <__assert_fail@plt+0x776c>
   19204:	add	sp, sp, #100	; 0x64
   19208:	pop	{r4, r5, r6, r7, pc}
   1920c:	push	{r4, r5, r6, r7, r8, lr}
   19210:	mov	r5, r1
   19214:	ldr	lr, [pc, #100]	; 19280 <__assert_fail@plt+0x7e6c>
   19218:	mov	r4, r2
   1921c:	mov	r7, r0
   19220:	mov	r8, r3
   19224:	ldm	lr!, {r0, r1, r2, r3}
   19228:	sub	sp, sp, #48	; 0x30
   1922c:	mov	ip, sp
   19230:	mov	r6, #10
   19234:	stmia	ip!, {r0, r1, r2, r3}
   19238:	cmp	r4, #0
   1923c:	cmpne	r5, #0
   19240:	ldm	lr!, {r0, r1, r2, r3}
   19244:	str	r6, [sp]
   19248:	stmia	ip!, {r0, r1, r2, r3}
   1924c:	ldm	lr, {r0, r1, r2, r3}
   19250:	stm	ip, {r0, r1, r2, r3}
   19254:	beq	1927c <__assert_fail@plt+0x7e68>
   19258:	mov	r3, sp
   1925c:	mov	r1, r8
   19260:	mov	r0, r7
   19264:	ldr	r2, [sp, #72]	; 0x48
   19268:	str	r5, [sp, #40]	; 0x28
   1926c:	str	r4, [sp, #44]	; 0x2c
   19270:	bl	18b80 <__assert_fail@plt+0x776c>
   19274:	add	sp, sp, #48	; 0x30
   19278:	pop	{r4, r5, r6, r7, r8, pc}
   1927c:	bl	113f0 <abort@plt>
   19280:	strdeq	lr, [r2], -r0
   19284:	push	{lr}		; (str lr, [sp, #-4]!)
   19288:	sub	sp, sp, #12
   1928c:	mvn	ip, #0
   19290:	str	ip, [sp]
   19294:	bl	1920c <__assert_fail@plt+0x7df8>
   19298:	add	sp, sp, #12
   1929c:	pop	{pc}		; (ldr pc, [sp], #4)
   192a0:	push	{lr}		; (str lr, [sp, #-4]!)
   192a4:	sub	sp, sp, #12
   192a8:	mvn	ip, #0
   192ac:	mov	r3, r2
   192b0:	str	ip, [sp]
   192b4:	mov	r2, r1
   192b8:	mov	r1, r0
   192bc:	mov	r0, #0
   192c0:	bl	1920c <__assert_fail@plt+0x7df8>
   192c4:	add	sp, sp, #12
   192c8:	pop	{pc}		; (ldr pc, [sp], #4)
   192cc:	push	{lr}		; (str lr, [sp, #-4]!)
   192d0:	sub	sp, sp, #12
   192d4:	str	r3, [sp]
   192d8:	mov	r3, r2
   192dc:	mov	r2, r1
   192e0:	mov	r1, r0
   192e4:	mov	r0, #0
   192e8:	bl	1920c <__assert_fail@plt+0x7df8>
   192ec:	add	sp, sp, #12
   192f0:	pop	{pc}		; (ldr pc, [sp], #4)
   192f4:	ldr	r3, [pc]	; 192fc <__assert_fail@plt+0x7ee8>
   192f8:	b	18b80 <__assert_fail@plt+0x776c>
   192fc:	andeq	lr, r2, ip, ror r1
   19300:	mov	r2, r1
   19304:	ldr	r3, [pc, #8]	; 19314 <__assert_fail@plt+0x7f00>
   19308:	mov	r1, r0
   1930c:	mov	r0, #0
   19310:	b	18b80 <__assert_fail@plt+0x776c>
   19314:	andeq	lr, r2, ip, ror r1
   19318:	ldr	r3, [pc, #4]	; 19324 <__assert_fail@plt+0x7f10>
   1931c:	mvn	r2, #0
   19320:	b	18b80 <__assert_fail@plt+0x776c>
   19324:	andeq	lr, r2, ip, ror r1
   19328:	mov	r1, r0
   1932c:	ldr	r3, [pc, #8]	; 1933c <__assert_fail@plt+0x7f28>
   19330:	mvn	r2, #0
   19334:	mov	r0, #0
   19338:	b	18b80 <__assert_fail@plt+0x776c>
   1933c:	andeq	lr, r2, ip, ror r1
   19340:	push	{r4, r5, r6, r7, r8, lr}
   19344:	mov	r8, r0
   19348:	ldr	r5, [pc, #84]	; 193a4 <__assert_fail@plt+0x7f90>
   1934c:	mov	r7, r1
   19350:	mov	r4, r2
   19354:	mov	r2, r4
   19358:	mov	r1, r7
   1935c:	mov	r0, r8
   19360:	bl	110f0 <read@plt>
   19364:	subs	r6, r0, #0
   19368:	bge	1939c <__assert_fail@plt+0x7f88>
   1936c:	bl	112dc <__errno_location@plt>
   19370:	ldr	r3, [r0]
   19374:	cmp	r3, #4
   19378:	beq	19354 <__assert_fail@plt+0x7f40>
   1937c:	cmp	r4, r5
   19380:	movls	r2, #0
   19384:	movhi	r2, #1
   19388:	cmp	r3, #22
   1938c:	movne	r2, #0
   19390:	cmp	r2, #0
   19394:	mov	r4, r5
   19398:	bne	19354 <__assert_fail@plt+0x7f40>
   1939c:	mov	r0, r6
   193a0:	pop	{r4, r5, r6, r7, r8, pc}
   193a4:	svcvc	0x00f00000	; IMB
   193a8:	cmp	r0, #2
   193ac:	push	{r4, r5, r6, r7, r8, lr}
   193b0:	mov	r4, r0
   193b4:	bhi	193dc <__assert_fail@plt+0x7fc8>
   193b8:	bl	1ac68 <__assert_fail@plt+0x9854>
   193bc:	mov	r7, r0
   193c0:	bl	112dc <__errno_location@plt>
   193c4:	mov	r5, r0
   193c8:	mov	r0, r4
   193cc:	ldr	r6, [r5]
   193d0:	mov	r4, r7
   193d4:	bl	113fc <close@plt>
   193d8:	str	r6, [r5]
   193dc:	mov	r0, r4
   193e0:	pop	{r4, r5, r6, r7, r8, pc}
   193e4:	push	{r4, r5, r6, lr}
   193e8:	sub	sp, sp, #32
   193ec:	cmp	r1, #0
   193f0:	mov	r4, r0
   193f4:	ldr	r5, [sp, #48]	; 0x30
   193f8:	ldr	r6, [sp, #52]	; 0x34
   193fc:	beq	19714 <__assert_fail@plt+0x8300>
   19400:	stm	sp, {r2, r3}
   19404:	mov	r3, r1
   19408:	ldr	r2, [pc, #808]	; 19738 <__assert_fail@plt+0x8324>
   1940c:	mov	r1, #1
   19410:	bl	11324 <__fprintf_chk@plt>
   19414:	mov	r2, #5
   19418:	ldr	r1, [pc, #796]	; 1973c <__assert_fail@plt+0x8328>
   1941c:	mov	r0, #0
   19420:	bl	11174 <dcgettext@plt>
   19424:	ldr	r3, [pc, #788]	; 19740 <__assert_fail@plt+0x832c>
   19428:	ldr	r2, [pc, #788]	; 19744 <__assert_fail@plt+0x8330>
   1942c:	str	r3, [sp]
   19430:	mov	r1, #1
   19434:	mov	r3, r0
   19438:	mov	r0, r4
   1943c:	bl	11324 <__fprintf_chk@plt>
   19440:	mov	r1, r4
   19444:	mov	r0, #10
   19448:	bl	11168 <fputc_unlocked@plt>
   1944c:	mov	r2, #5
   19450:	ldr	r1, [pc, #752]	; 19748 <__assert_fail@plt+0x8334>
   19454:	mov	r0, #0
   19458:	bl	11174 <dcgettext@plt>
   1945c:	mov	r1, #1
   19460:	ldr	r3, [pc, #740]	; 1974c <__assert_fail@plt+0x8338>
   19464:	mov	r2, r0
   19468:	mov	r0, r4
   1946c:	bl	11324 <__fprintf_chk@plt>
   19470:	mov	r1, r4
   19474:	mov	r0, #10
   19478:	bl	11168 <fputc_unlocked@plt>
   1947c:	cmp	r6, #9
   19480:	ldrls	pc, [pc, r6, lsl #2]
   19484:	b	1972c <__assert_fail@plt+0x8318>
   19488:	andeq	r9, r1, ip, lsl #10
   1948c:	andeq	r9, r1, r4, lsl r5
   19490:	andeq	r9, r1, r0, asr #10
   19494:	andeq	r9, r1, r4, ror r5
   19498:			; <UNDEFINED> instruction: 0x000195b0
   1949c:	andeq	r9, r1, ip, ror #11
   194a0:	andeq	r9, r1, r8, lsr #12
   194a4:	andeq	r9, r1, ip, ror #12
   194a8:			; <UNDEFINED> instruction: 0x000196bc
   194ac:			; <UNDEFINED> instruction: 0x000194b0
   194b0:	ldr	r1, [pc, #664]	; 19750 <__assert_fail@plt+0x833c>
   194b4:	mov	r2, #5
   194b8:	mov	r0, #0
   194bc:	bl	11174 <dcgettext@plt>
   194c0:	ldr	ip, [r5, #32]
   194c4:	ldr	r1, [r5, #28]
   194c8:	ldr	r2, [r5, #24]
   194cc:	ldr	r3, [r5]
   194d0:	ldr	r6, [r5, #20]
   194d4:	str	ip, [sp, #28]
   194d8:	ldr	lr, [r5, #16]
   194dc:	str	r1, [sp, #24]
   194e0:	ldr	ip, [r5, #12]
   194e4:	str	r2, [sp, #20]
   194e8:	ldr	r1, [r5, #8]
   194ec:	ldr	r2, [r5, #4]
   194f0:	str	r6, [sp, #16]
   194f4:	stmib	sp, {r1, ip, lr}
   194f8:	mov	r1, #1
   194fc:	str	r2, [sp]
   19500:	mov	r2, r0
   19504:	mov	r0, r4
   19508:	bl	11324 <__fprintf_chk@plt>
   1950c:	add	sp, sp, #32
   19510:	pop	{r4, r5, r6, pc}
   19514:	mov	r2, #5
   19518:	ldr	r1, [pc, #564]	; 19754 <__assert_fail@plt+0x8340>
   1951c:	mov	r0, #0
   19520:	bl	11174 <dcgettext@plt>
   19524:	ldr	r3, [r5]
   19528:	mov	r1, #1
   1952c:	mov	r2, r0
   19530:	mov	r0, r4
   19534:	add	sp, sp, #32
   19538:	pop	{r4, r5, r6, lr}
   1953c:	b	11324 <__fprintf_chk@plt>
   19540:	mov	r2, #5
   19544:	ldr	r1, [pc, #524]	; 19758 <__assert_fail@plt+0x8344>
   19548:	mov	r0, #0
   1954c:	bl	11174 <dcgettext@plt>
   19550:	ldr	r2, [r5, #4]
   19554:	ldr	r3, [r5]
   19558:	mov	r1, #1
   1955c:	str	r2, [sp, #48]	; 0x30
   19560:	mov	r2, r0
   19564:	mov	r0, r4
   19568:	add	sp, sp, #32
   1956c:	pop	{r4, r5, r6, lr}
   19570:	b	11324 <__fprintf_chk@plt>
   19574:	mov	r2, #5
   19578:	ldr	r1, [pc, #476]	; 1975c <__assert_fail@plt+0x8348>
   1957c:	mov	r0, #0
   19580:	bl	11174 <dcgettext@plt>
   19584:	ldr	r1, [r5, #8]
   19588:	ldr	r2, [r5, #4]
   1958c:	ldr	r3, [r5]
   19590:	str	r1, [sp, #52]	; 0x34
   19594:	str	r2, [sp, #48]	; 0x30
   19598:	mov	r1, #1
   1959c:	mov	r2, r0
   195a0:	mov	r0, r4
   195a4:	add	sp, sp, #32
   195a8:	pop	{r4, r5, r6, lr}
   195ac:	b	11324 <__fprintf_chk@plt>
   195b0:	mov	r2, #5
   195b4:	ldr	r1, [pc, #420]	; 19760 <__assert_fail@plt+0x834c>
   195b8:	mov	r0, #0
   195bc:	bl	11174 <dcgettext@plt>
   195c0:	ldr	r1, [r5, #8]
   195c4:	ldr	ip, [r5, #12]
   195c8:	ldr	r2, [r5, #4]
   195cc:	ldr	r3, [r5]
   195d0:	stmib	sp, {r1, ip}
   195d4:	str	r2, [sp]
   195d8:	mov	r1, #1
   195dc:	mov	r2, r0
   195e0:	mov	r0, r4
   195e4:	bl	11324 <__fprintf_chk@plt>
   195e8:	b	1950c <__assert_fail@plt+0x80f8>
   195ec:	mov	r2, #5
   195f0:	ldr	r1, [pc, #364]	; 19764 <__assert_fail@plt+0x8350>
   195f4:	mov	r0, #0
   195f8:	bl	11174 <dcgettext@plt>
   195fc:	add	r1, r5, #8
   19600:	ldr	r2, [r5, #4]
   19604:	ldm	r1, {r1, ip, lr}
   19608:	ldr	r3, [r5]
   1960c:	str	r2, [sp]
   19610:	stmib	sp, {r1, ip, lr}
   19614:	mov	r1, #1
   19618:	mov	r2, r0
   1961c:	mov	r0, r4
   19620:	bl	11324 <__fprintf_chk@plt>
   19624:	b	1950c <__assert_fail@plt+0x80f8>
   19628:	mov	r2, #5
   1962c:	ldr	r1, [pc, #308]	; 19768 <__assert_fail@plt+0x8354>
   19630:	mov	r0, #0
   19634:	bl	11174 <dcgettext@plt>
   19638:	add	r1, r5, #8
   1963c:	ldr	r2, [r5, #4]
   19640:	ldm	r1, {r1, ip, lr}
   19644:	ldr	r6, [r5, #20]
   19648:	ldr	r3, [r5]
   1964c:	stmib	sp, {r1, ip, lr}
   19650:	mov	r1, #1
   19654:	str	r2, [sp]
   19658:	str	r6, [sp, #16]
   1965c:	mov	r2, r0
   19660:	mov	r0, r4
   19664:	bl	11324 <__fprintf_chk@plt>
   19668:	b	1950c <__assert_fail@plt+0x80f8>
   1966c:	mov	r2, #5
   19670:	ldr	r1, [pc, #244]	; 1976c <__assert_fail@plt+0x8358>
   19674:	mov	r0, #0
   19678:	bl	11174 <dcgettext@plt>
   1967c:	ldr	r2, [r5, #24]
   19680:	ldr	r3, [r5]
   19684:	ldr	r6, [r5, #20]
   19688:	ldr	lr, [r5, #16]
   1968c:	ldr	ip, [r5, #12]
   19690:	str	r2, [sp, #20]
   19694:	ldr	r1, [r5, #8]
   19698:	ldr	r2, [r5, #4]
   1969c:	str	r6, [sp, #16]
   196a0:	stmib	sp, {r1, ip, lr}
   196a4:	mov	r1, #1
   196a8:	str	r2, [sp]
   196ac:	mov	r2, r0
   196b0:	mov	r0, r4
   196b4:	bl	11324 <__fprintf_chk@plt>
   196b8:	b	1950c <__assert_fail@plt+0x80f8>
   196bc:	mov	r2, #5
   196c0:	ldr	r1, [pc, #168]	; 19770 <__assert_fail@plt+0x835c>
   196c4:	mov	r0, #0
   196c8:	bl	11174 <dcgettext@plt>
   196cc:	ldr	r1, [r5, #28]
   196d0:	ldr	r2, [r5, #24]
   196d4:	ldr	r3, [r5]
   196d8:	ldr	r6, [r5, #20]
   196dc:	ldr	lr, [r5, #16]
   196e0:	str	r1, [sp, #24]
   196e4:	ldr	ip, [r5, #12]
   196e8:	str	r2, [sp, #20]
   196ec:	ldr	r1, [r5, #8]
   196f0:	ldr	r2, [r5, #4]
   196f4:	str	r6, [sp, #16]
   196f8:	stmib	sp, {r1, ip, lr}
   196fc:	mov	r1, #1
   19700:	str	r2, [sp]
   19704:	mov	r2, r0
   19708:	mov	r0, r4
   1970c:	bl	11324 <__fprintf_chk@plt>
   19710:	b	1950c <__assert_fail@plt+0x80f8>
   19714:	str	r3, [sp]
   19718:	mov	r1, #1
   1971c:	mov	r3, r2
   19720:	ldr	r2, [pc, #76]	; 19774 <__assert_fail@plt+0x8360>
   19724:	bl	11324 <__fprintf_chk@plt>
   19728:	b	19414 <__assert_fail@plt+0x8000>
   1972c:	mov	r2, #5
   19730:	ldr	r1, [pc, #64]	; 19778 <__assert_fail@plt+0x8364>
   19734:	b	194b8 <__assert_fail@plt+0x80a4>
   19738:	andeq	ip, r1, ip, ror fp
   1973c:	muleq	r1, r0, fp
   19740:	andeq	r0, r0, r6, ror #15
   19744:	andeq	ip, r1, r8, ror #28
   19748:	muleq	r1, r4, fp
   1974c:	andeq	ip, r1, r0, asr #24
   19750:	andeq	ip, r1, r0, ror sp
   19754:	andeq	ip, r1, r4, ror #24
   19758:	andeq	ip, r1, r4, ror ip
   1975c:	andeq	ip, r1, ip, lsl #25
   19760:	andeq	ip, r1, r8, lsr #25
   19764:	andeq	ip, r1, r8, asr #25
   19768:	andeq	ip, r1, ip, ror #25
   1976c:	andeq	ip, r1, r4, lsl sp
   19770:	andeq	ip, r1, r0, asr #26
   19774:	andeq	ip, r1, r8, lsl #23
   19778:	andeq	ip, r1, r4, lsr #27
   1977c:	push	{r4, r5, lr}
   19780:	sub	sp, sp, #12
   19784:	ldr	r5, [sp, #24]
   19788:	ldr	ip, [r5]
   1978c:	cmp	ip, #0
   19790:	beq	197ac <__assert_fail@plt+0x8398>
   19794:	mov	lr, r5
   19798:	mov	ip, #0
   1979c:	ldr	r4, [lr, #4]!
   197a0:	add	ip, ip, #1
   197a4:	cmp	r4, #0
   197a8:	bne	1979c <__assert_fail@plt+0x8388>
   197ac:	stm	sp, {r5, ip}
   197b0:	bl	193e4 <__assert_fail@plt+0x7fd0>
   197b4:	add	sp, sp, #12
   197b8:	pop	{r4, r5, pc}
   197bc:	push	{r4, r5, lr}
   197c0:	sub	sp, sp, #52	; 0x34
   197c4:	add	r5, sp, #4
   197c8:	ldr	r4, [sp, #64]	; 0x40
   197cc:	mov	ip, #0
   197d0:	sub	r4, r4, #4
   197d4:	ldr	lr, [r4, #4]!
   197d8:	cmp	lr, #0
   197dc:	str	lr, [r5, #4]!
   197e0:	beq	197f0 <__assert_fail@plt+0x83dc>
   197e4:	add	ip, ip, #1
   197e8:	cmp	ip, #10
   197ec:	bne	197d4 <__assert_fail@plt+0x83c0>
   197f0:	add	lr, sp, #8
   197f4:	str	ip, [sp, #4]
   197f8:	str	lr, [sp]
   197fc:	bl	193e4 <__assert_fail@plt+0x7fd0>
   19800:	add	sp, sp, #52	; 0x34
   19804:	pop	{r4, r5, pc}
   19808:	push	{r3}		; (str r3, [sp, #-4]!)
   1980c:	push	{r4, lr}
   19810:	sub	sp, sp, #60	; 0x3c
   19814:	add	lr, sp, #56	; 0x38
   19818:	add	r3, sp, #72	; 0x48
   1981c:	str	r3, [lr, #-44]!	; 0xffffffd4
   19820:	add	r4, sp, #68	; 0x44
   19824:	mov	r3, #0
   19828:	ldr	ip, [r4, #4]!
   1982c:	cmp	ip, #0
   19830:	str	ip, [lr, #4]!
   19834:	beq	19844 <__assert_fail@plt+0x8430>
   19838:	add	r3, r3, #1
   1983c:	cmp	r3, #10
   19840:	bne	19828 <__assert_fail@plt+0x8414>
   19844:	add	ip, sp, #16
   19848:	str	r3, [sp, #4]
   1984c:	str	ip, [sp]
   19850:	ldr	r3, [sp, #68]	; 0x44
   19854:	bl	193e4 <__assert_fail@plt+0x7fd0>
   19858:	add	sp, sp, #60	; 0x3c
   1985c:	pop	{r4, lr}
   19860:	add	sp, sp, #4
   19864:	bx	lr
   19868:	ldr	r3, [pc, #116]	; 198e4 <__assert_fail@plt+0x84d0>
   1986c:	push	{r4, lr}
   19870:	mov	r0, #10
   19874:	ldr	r1, [r3]
   19878:	bl	11168 <fputc_unlocked@plt>
   1987c:	mov	r2, #5
   19880:	ldr	r1, [pc, #96]	; 198e8 <__assert_fail@plt+0x84d4>
   19884:	mov	r0, #0
   19888:	bl	11174 <dcgettext@plt>
   1988c:	ldr	r2, [pc, #88]	; 198ec <__assert_fail@plt+0x84d8>
   19890:	mov	r1, r0
   19894:	mov	r0, #1
   19898:	bl	11300 <__printf_chk@plt>
   1989c:	mov	r2, #5
   198a0:	ldr	r1, [pc, #72]	; 198f0 <__assert_fail@plt+0x84dc>
   198a4:	mov	r0, #0
   198a8:	bl	11174 <dcgettext@plt>
   198ac:	ldr	r3, [pc, #64]	; 198f4 <__assert_fail@plt+0x84e0>
   198b0:	ldr	r2, [pc, #64]	; 198f8 <__assert_fail@plt+0x84e4>
   198b4:	mov	r1, r0
   198b8:	mov	r0, #1
   198bc:	bl	11300 <__printf_chk@plt>
   198c0:	mov	r2, #5
   198c4:	ldr	r1, [pc, #48]	; 198fc <__assert_fail@plt+0x84e8>
   198c8:	mov	r0, #0
   198cc:	bl	11174 <dcgettext@plt>
   198d0:	ldr	r2, [pc, #40]	; 19900 <__assert_fail@plt+0x84ec>
   198d4:	pop	{r4, lr}
   198d8:	mov	r1, r0
   198dc:	mov	r0, #1
   198e0:	b	11300 <__printf_chk@plt>
   198e4:	andeq	lr, r2, r4, asr #3
   198e8:	andeq	ip, r1, r0, ror #27
   198ec:	strdeq	ip, [r1], -r4
   198f0:	andeq	ip, r1, ip, lsl #28
   198f4:	andeq	ip, r1, r0, lsl #6
   198f8:	andeq	ip, r1, r8, lsr #6
   198fc:	andeq	ip, r1, r0, lsr #28
   19900:	andeq	ip, r1, r8, asr #28
   19904:	push	{r4, lr}
   19908:	bl	1a7a8 <__assert_fail@plt+0x9394>
   1990c:	cmp	r0, #0
   19910:	popne	{r4, pc}
   19914:	bl	19e4c <__assert_fail@plt+0x8a38>
   19918:	push	{r4, lr}
   1991c:	bl	1a7a8 <__assert_fail@plt+0x9394>
   19920:	cmp	r0, #0
   19924:	popne	{r4, pc}
   19928:	bl	19e4c <__assert_fail@plt+0x8a38>
   1992c:	push	{r4, lr}
   19930:	bl	1a7a8 <__assert_fail@plt+0x9394>
   19934:	cmp	r0, #0
   19938:	popne	{r4, pc}
   1993c:	bl	19e4c <__assert_fail@plt+0x8a38>
   19940:	push	{r4, r5, r6, lr}
   19944:	mov	r5, r0
   19948:	mov	r4, r1
   1994c:	bl	1a7d4 <__assert_fail@plt+0x93c0>
   19950:	cmp	r0, #0
   19954:	popne	{r4, r5, r6, pc}
   19958:	adds	r4, r4, #0
   1995c:	movne	r4, #1
   19960:	cmp	r5, #0
   19964:	orreq	r4, r4, #1
   19968:	cmp	r4, #0
   1996c:	popeq	{r4, r5, r6, pc}
   19970:	bl	19e4c <__assert_fail@plt+0x8a38>
   19974:	push	{r4, lr}
   19978:	cmp	r1, #0
   1997c:	orreq	r1, r1, #1
   19980:	bl	1a7d4 <__assert_fail@plt+0x93c0>
   19984:	cmp	r0, #0
   19988:	popne	{r4, pc}
   1998c:	bl	19e4c <__assert_fail@plt+0x8a38>
   19990:	push	{r4, r5, r6, lr}
   19994:	mov	r6, r0
   19998:	mov	r5, r1
   1999c:	mov	r4, r2
   199a0:	bl	1ac1c <__assert_fail@plt+0x9808>
   199a4:	cmp	r0, #0
   199a8:	popne	{r4, r5, r6, pc}
   199ac:	cmp	r6, #0
   199b0:	beq	199c0 <__assert_fail@plt+0x85ac>
   199b4:	cmp	r5, #0
   199b8:	cmpne	r4, #0
   199bc:	popeq	{r4, r5, r6, pc}
   199c0:	bl	19e4c <__assert_fail@plt+0x8a38>
   199c4:	b	19990 <__assert_fail@plt+0x857c>
   199c8:	cmp	r2, #0
   199cc:	cmpne	r1, #0
   199d0:	moveq	r2, #1
   199d4:	moveq	r1, r2
   199d8:	push	{r4, lr}
   199dc:	bl	1ac1c <__assert_fail@plt+0x9808>
   199e0:	cmp	r0, #0
   199e4:	popne	{r4, pc}
   199e8:	bl	19e4c <__assert_fail@plt+0x8a38>
   199ec:	mov	r2, r1
   199f0:	mov	r1, r0
   199f4:	mov	r0, #0
   199f8:	b	19990 <__assert_fail@plt+0x857c>
   199fc:	mov	r2, r1
   19a00:	mov	r1, r0
   19a04:	mov	r0, #0
   19a08:	b	199c8 <__assert_fail@plt+0x85b4>
   19a0c:	push	{r4, r5, r6, lr}
   19a10:	subs	r6, r0, #0
   19a14:	sub	sp, sp, #8
   19a18:	mov	r5, r1
   19a1c:	ldr	r4, [r1]
   19a20:	beq	19a5c <__assert_fail@plt+0x8648>
   19a24:	lsr	r1, r4, #1
   19a28:	add	r3, r1, #1
   19a2c:	mvn	r3, r3
   19a30:	cmp	r4, r3
   19a34:	bhi	19a58 <__assert_fail@plt+0x8644>
   19a38:	add	r4, r4, #1
   19a3c:	add	r4, r4, r1
   19a40:	mov	r0, r6
   19a44:	mov	r1, r4
   19a48:	bl	19990 <__assert_fail@plt+0x857c>
   19a4c:	str	r4, [r5]
   19a50:	add	sp, sp, #8
   19a54:	pop	{r4, r5, r6, pc}
   19a58:	bl	19e4c <__assert_fail@plt+0x8a38>
   19a5c:	cmp	r4, #0
   19a60:	bne	19a40 <__assert_fail@plt+0x862c>
   19a64:	mov	r1, r2
   19a68:	mov	r0, #64	; 0x40
   19a6c:	str	r2, [sp, #4]
   19a70:	bl	1ad68 <__assert_fail@plt+0x9954>
   19a74:	ldr	r2, [sp, #4]
   19a78:	cmp	r0, #0
   19a7c:	movne	r4, r0
   19a80:	addeq	r4, r0, #1
   19a84:	b	19a40 <__assert_fail@plt+0x862c>
   19a88:	mov	r2, #1
   19a8c:	b	19a0c <__assert_fail@plt+0x85f8>
   19a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a94:	sub	sp, sp, #12
   19a98:	ldr	r6, [r1]
   19a9c:	mov	sl, r1
   19aa0:	mov	r9, r0
   19aa4:	asrs	r4, r6, #1
   19aa8:	mov	r5, r2
   19aac:	mov	fp, r3
   19ab0:	ldr	r7, [sp, #48]	; 0x30
   19ab4:	bmi	19c20 <__assert_fail@plt+0x880c>
   19ab8:	mvn	r3, #-2147483648	; 0x80000000
   19abc:	sub	r3, r3, r4
   19ac0:	cmp	r6, r3
   19ac4:	movle	r3, #0
   19ac8:	movgt	r3, #1
   19acc:	mvn	r8, fp
   19ad0:	cmp	r3, #0
   19ad4:	addeq	r4, r4, r6
   19ad8:	mvnne	r4, #-2147483648	; 0x80000000
   19adc:	lsr	r8, r8, #31
   19ae0:	cmp	fp, r4
   19ae4:	movge	r3, #0
   19ae8:	andlt	r3, r8, #1
   19aec:	cmp	r3, #0
   19af0:	beq	19bd8 <__assert_fail@plt+0x87c4>
   19af4:	cmp	r7, #0
   19af8:	blt	19ca8 <__assert_fail@plt+0x8894>
   19afc:	bne	19ca0 <__assert_fail@plt+0x888c>
   19b00:	mov	r2, #64	; 0x40
   19b04:	mov	r1, r7
   19b08:	mov	r0, r2
   19b0c:	str	r2, [sp, #4]
   19b10:	bl	1af74 <__assert_fail@plt+0x9b60>
   19b14:	ldr	r2, [sp, #4]
   19b18:	mov	r1, r7
   19b1c:	mov	r4, r0
   19b20:	mov	r0, r2
   19b24:	bl	1b194 <__assert_fail@plt+0x9d80>
   19b28:	ldr	r2, [sp, #4]
   19b2c:	sub	r1, r2, r1
   19b30:	cmp	r9, #0
   19b34:	sub	r3, r4, r6
   19b38:	streq	r9, [sl]
   19b3c:	cmp	r3, r5
   19b40:	bge	19bc4 <__assert_fail@plt+0x87b0>
   19b44:	cmp	r5, #0
   19b48:	blt	19c34 <__assert_fail@plt+0x8820>
   19b4c:	cmp	r6, #0
   19b50:	blt	19b70 <__assert_fail@plt+0x875c>
   19b54:	mvn	r3, #-2147483648	; 0x80000000
   19b58:	sub	r3, r3, r5
   19b5c:	cmp	r6, r3
   19b60:	movle	r3, #0
   19b64:	movgt	r3, #1
   19b68:	cmp	r3, #0
   19b6c:	bne	19d30 <__assert_fail@plt+0x891c>
   19b70:	add	r5, r6, r5
   19b74:	cmp	fp, r5
   19b78:	movge	r8, #0
   19b7c:	andlt	r8, r8, #1
   19b80:	cmp	r8, #0
   19b84:	mov	r4, r5
   19b88:	bne	19d30 <__assert_fail@plt+0x891c>
   19b8c:	cmp	r7, #0
   19b90:	blt	19c48 <__assert_fail@plt+0x8834>
   19b94:	beq	19bc0 <__assert_fail@plt+0x87ac>
   19b98:	cmp	r5, #0
   19b9c:	blt	19cf0 <__assert_fail@plt+0x88dc>
   19ba0:	mov	r1, r7
   19ba4:	mvn	r0, #-2147483648	; 0x80000000
   19ba8:	bl	1af74 <__assert_fail@plt+0x9b60>
   19bac:	cmp	r5, r0
   19bb0:	movle	r0, #0
   19bb4:	movgt	r0, #1
   19bb8:	cmp	r0, #0
   19bbc:	bne	19d30 <__assert_fail@plt+0x891c>
   19bc0:	mul	r1, r5, r7
   19bc4:	mov	r0, r9
   19bc8:	bl	19940 <__assert_fail@plt+0x852c>
   19bcc:	str	r4, [sl]
   19bd0:	add	sp, sp, #12
   19bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bd8:	cmp	r7, #0
   19bdc:	blt	19c74 <__assert_fail@plt+0x8860>
   19be0:	beq	19b00 <__assert_fail@plt+0x86ec>
   19be4:	cmp	r4, #0
   19be8:	blt	19cb0 <__assert_fail@plt+0x889c>
   19bec:	mov	r1, r7
   19bf0:	mvn	r0, #-2147483648	; 0x80000000
   19bf4:	bl	1af74 <__assert_fail@plt+0x9b60>
   19bf8:	cmp	r0, r4
   19bfc:	movge	r0, #0
   19c00:	movlt	r0, #1
   19c04:	cmp	r0, #0
   19c08:	mvnne	r2, #-2147483648	; 0x80000000
   19c0c:	bne	19b04 <__assert_fail@plt+0x86f0>
   19c10:	mul	r1, r7, r4
   19c14:	cmp	r1, #63	; 0x3f
   19c18:	bgt	19b30 <__assert_fail@plt+0x871c>
   19c1c:	b	19b00 <__assert_fail@plt+0x86ec>
   19c20:	rsb	r3, r4, #-2147483648	; 0x80000000
   19c24:	cmp	r6, r3
   19c28:	movge	r3, #0
   19c2c:	movlt	r3, #1
   19c30:	b	19acc <__assert_fail@plt+0x86b8>
   19c34:	rsb	r3, r5, #-2147483648	; 0x80000000
   19c38:	cmp	r6, r3
   19c3c:	movge	r3, #0
   19c40:	movlt	r3, #1
   19c44:	b	19b68 <__assert_fail@plt+0x8754>
   19c48:	cmp	r5, #0
   19c4c:	blt	19cd4 <__assert_fail@plt+0x88c0>
   19c50:	cmn	r7, #1
   19c54:	beq	19bc0 <__assert_fail@plt+0x87ac>
   19c58:	mov	r1, r7
   19c5c:	mov	r0, #-2147483648	; 0x80000000
   19c60:	bl	1af74 <__assert_fail@plt+0x9b60>
   19c64:	cmp	r5, r0
   19c68:	movle	r0, #0
   19c6c:	movgt	r0, #1
   19c70:	b	19bb8 <__assert_fail@plt+0x87a4>
   19c74:	cmp	r4, #0
   19c78:	blt	19d14 <__assert_fail@plt+0x8900>
   19c7c:	cmn	r7, #1
   19c80:	beq	19c10 <__assert_fail@plt+0x87fc>
   19c84:	mov	r1, r7
   19c88:	mov	r0, #-2147483648	; 0x80000000
   19c8c:	bl	1af74 <__assert_fail@plt+0x9b60>
   19c90:	cmp	r0, r4
   19c94:	movge	r0, #0
   19c98:	movlt	r0, #1
   19c9c:	b	19c04 <__assert_fail@plt+0x87f0>
   19ca0:	mov	r4, fp
   19ca4:	b	19bec <__assert_fail@plt+0x87d8>
   19ca8:	mov	r4, fp
   19cac:	b	19c7c <__assert_fail@plt+0x8868>
   19cb0:	cmn	r4, #1
   19cb4:	beq	19c10 <__assert_fail@plt+0x87fc>
   19cb8:	mov	r1, r4
   19cbc:	mov	r0, #-2147483648	; 0x80000000
   19cc0:	bl	1af74 <__assert_fail@plt+0x9b60>
   19cc4:	cmp	r7, r0
   19cc8:	movle	r0, #0
   19ccc:	movgt	r0, #1
   19cd0:	b	19c04 <__assert_fail@plt+0x87f0>
   19cd4:	mov	r1, r7
   19cd8:	mvn	r0, #-2147483648	; 0x80000000
   19cdc:	bl	1af74 <__assert_fail@plt+0x9b60>
   19ce0:	cmp	r5, r0
   19ce4:	movge	r0, #0
   19ce8:	movlt	r0, #1
   19cec:	b	19bb8 <__assert_fail@plt+0x87a4>
   19cf0:	cmn	r5, #1
   19cf4:	beq	19bc0 <__assert_fail@plt+0x87ac>
   19cf8:	mov	r1, r5
   19cfc:	mov	r0, #-2147483648	; 0x80000000
   19d00:	bl	1af74 <__assert_fail@plt+0x9b60>
   19d04:	cmp	r7, r0
   19d08:	movle	r0, #0
   19d0c:	movgt	r0, #1
   19d10:	b	19bb8 <__assert_fail@plt+0x87a4>
   19d14:	mov	r1, r7
   19d18:	mvn	r0, #-2147483648	; 0x80000000
   19d1c:	bl	1af74 <__assert_fail@plt+0x9b60>
   19d20:	cmp	r0, r4
   19d24:	movle	r0, #0
   19d28:	movgt	r0, #1
   19d2c:	b	19c04 <__assert_fail@plt+0x87f0>
   19d30:	bl	19e4c <__assert_fail@plt+0x8a38>
   19d34:	push	{r4, lr}
   19d38:	mov	r1, #1
   19d3c:	bl	1a760 <__assert_fail@plt+0x934c>
   19d40:	cmp	r0, #0
   19d44:	popne	{r4, pc}
   19d48:	bl	19e4c <__assert_fail@plt+0x8a38>
   19d4c:	push	{r4, lr}
   19d50:	mov	r1, #1
   19d54:	bl	1a760 <__assert_fail@plt+0x934c>
   19d58:	cmp	r0, #0
   19d5c:	popne	{r4, pc}
   19d60:	bl	19e4c <__assert_fail@plt+0x8a38>
   19d64:	push	{r4, lr}
   19d68:	bl	1a760 <__assert_fail@plt+0x934c>
   19d6c:	cmp	r0, #0
   19d70:	popne	{r4, pc}
   19d74:	bl	19e4c <__assert_fail@plt+0x8a38>
   19d78:	push	{r4, lr}
   19d7c:	bl	1a760 <__assert_fail@plt+0x934c>
   19d80:	cmp	r0, #0
   19d84:	popne	{r4, pc}
   19d88:	bl	19e4c <__assert_fail@plt+0x8a38>
   19d8c:	push	{r4, r5, r6, lr}
   19d90:	mov	r6, r0
   19d94:	mov	r0, r1
   19d98:	mov	r4, r1
   19d9c:	bl	1a7a8 <__assert_fail@plt+0x9394>
   19da0:	subs	r5, r0, #0
   19da4:	beq	19dbc <__assert_fail@plt+0x89a8>
   19da8:	mov	r2, r4
   19dac:	mov	r1, r6
   19db0:	bl	1112c <memcpy@plt>
   19db4:	mov	r0, r5
   19db8:	pop	{r4, r5, r6, pc}
   19dbc:	bl	19e4c <__assert_fail@plt+0x8a38>
   19dc0:	push	{r4, r5, r6, lr}
   19dc4:	mov	r6, r0
   19dc8:	mov	r0, r1
   19dcc:	mov	r4, r1
   19dd0:	bl	1a7a8 <__assert_fail@plt+0x9394>
   19dd4:	subs	r5, r0, #0
   19dd8:	beq	19df0 <__assert_fail@plt+0x89dc>
   19ddc:	mov	r2, r4
   19de0:	mov	r1, r6
   19de4:	bl	1112c <memcpy@plt>
   19de8:	mov	r0, r5
   19dec:	pop	{r4, r5, r6, pc}
   19df0:	bl	19e4c <__assert_fail@plt+0x8a38>
   19df4:	push	{r4, r5, r6, lr}
   19df8:	mov	r6, r0
   19dfc:	add	r0, r1, #1
   19e00:	mov	r4, r1
   19e04:	bl	1a7a8 <__assert_fail@plt+0x9394>
   19e08:	subs	r5, r0, #0
   19e0c:	beq	19e2c <__assert_fail@plt+0x8a18>
   19e10:	mov	r3, #0
   19e14:	mov	r1, r6
   19e18:	strb	r3, [r5, r4]
   19e1c:	mov	r2, r4
   19e20:	bl	1112c <memcpy@plt>
   19e24:	mov	r0, r5
   19e28:	pop	{r4, r5, r6, pc}
   19e2c:	bl	19e4c <__assert_fail@plt+0x8a38>
   19e30:	push	{r4, lr}
   19e34:	mov	r4, r0
   19e38:	bl	112a0 <strlen@plt>
   19e3c:	add	r1, r0, #1
   19e40:	mov	r0, r4
   19e44:	pop	{r4, lr}
   19e48:	b	19d8c <__assert_fail@plt+0x8978>
   19e4c:	ldr	r3, [pc, #44]	; 19e80 <__assert_fail@plt+0x8a6c>
   19e50:	push	{r4, lr}
   19e54:	mov	r2, #5
   19e58:	ldr	r1, [pc, #36]	; 19e84 <__assert_fail@plt+0x8a70>
   19e5c:	mov	r0, #0
   19e60:	ldr	r4, [r3]
   19e64:	bl	11174 <dcgettext@plt>
   19e68:	ldr	r2, [pc, #24]	; 19e88 <__assert_fail@plt+0x8a74>
   19e6c:	mov	r1, #0
   19e70:	mov	r3, r0
   19e74:	mov	r0, r4
   19e78:	bl	1121c <error@plt>
   19e7c:	bl	113f0 <abort@plt>
   19e80:	andeq	lr, r2, r8, ror #2
   19e84:	muleq	r1, r8, lr
   19e88:	andeq	ip, r1, ip, lsl #8
   19e8c:	push	{r4, r5, r6, r7, lr}
   19e90:	sub	sp, sp, #20
   19e94:	mov	r6, r2
   19e98:	ldr	ip, [sp, #48]	; 0x30
   19e9c:	mov	r2, r1
   19ea0:	mov	r7, r3
   19ea4:	str	ip, [sp]
   19ea8:	add	r3, sp, #8
   19eac:	mov	r1, #0
   19eb0:	mov	r5, r0
   19eb4:	ldr	r4, [sp, #56]	; 0x38
   19eb8:	bl	1a1b8 <__assert_fail@plt+0x8da4>
   19ebc:	cmp	r0, #0
   19ec0:	bne	19f44 <__assert_fail@plt+0x8b30>
   19ec4:	ldrd	r0, [sp, #8]
   19ec8:	cmp	r1, r7
   19ecc:	cmpeq	r0, r6
   19ed0:	ldrd	r6, [sp, #40]	; 0x28
   19ed4:	movcc	r3, #1
   19ed8:	movcs	r3, #0
   19edc:	cmp	r1, r7
   19ee0:	cmpeq	r0, r6
   19ee4:	orrhi	r3, r3, #1
   19ee8:	cmp	r3, #0
   19eec:	beq	19f3c <__assert_fail@plt+0x8b28>
   19ef0:	mov	r3, #0
   19ef4:	mvn	r2, #-1073741824	; 0xc0000000
   19ef8:	cmp	r1, r3
   19efc:	cmpeq	r0, r2
   19f00:	bhi	19f70 <__assert_fail@plt+0x8b5c>
   19f04:	bl	112dc <__errno_location@plt>
   19f08:	mov	r3, #34	; 0x22
   19f0c:	mov	r6, r3
   19f10:	str	r3, [r0]
   19f14:	cmp	r4, #0
   19f18:	moveq	r4, #1
   19f1c:	mov	r0, r5
   19f20:	bl	19328 <__assert_fail@plt+0x7f14>
   19f24:	mov	r1, r6
   19f28:	ldr	r3, [sp, #52]	; 0x34
   19f2c:	ldr	r2, [pc, #144]	; 19fc4 <__assert_fail@plt+0x8bb0>
   19f30:	str	r0, [sp]
   19f34:	mov	r0, r4
   19f38:	bl	1121c <error@plt>
   19f3c:	add	sp, sp, #20
   19f40:	pop	{r4, r5, r6, r7, pc}
   19f44:	cmp	r0, #1
   19f48:	beq	19f84 <__assert_fail@plt+0x8b70>
   19f4c:	cmp	r0, #3
   19f50:	beq	19fb4 <__assert_fail@plt+0x8ba0>
   19f54:	cmp	r4, #0
   19f58:	beq	19fa4 <__assert_fail@plt+0x8b90>
   19f5c:	bl	112dc <__errno_location@plt>
   19f60:	ldr	r6, [r0]
   19f64:	cmp	r6, #22
   19f68:	moveq	r6, #0
   19f6c:	b	19f1c <__assert_fail@plt+0x8b08>
   19f70:	bl	112dc <__errno_location@plt>
   19f74:	mov	r3, #75	; 0x4b
   19f78:	mov	r6, r3
   19f7c:	str	r3, [r0]
   19f80:	b	19f14 <__assert_fail@plt+0x8b00>
   19f84:	bl	112dc <__errno_location@plt>
   19f88:	mov	r3, #75	; 0x4b
   19f8c:	mov	r6, r3
   19f90:	str	r3, [r0]
   19f94:	cmp	r4, #0
   19f98:	moveq	r4, #1
   19f9c:	bne	19f64 <__assert_fail@plt+0x8b50>
   19fa0:	b	19f1c <__assert_fail@plt+0x8b08>
   19fa4:	bl	112dc <__errno_location@plt>
   19fa8:	mov	r4, #1
   19fac:	ldr	r6, [r0]
   19fb0:	b	19f64 <__assert_fail@plt+0x8b50>
   19fb4:	bl	112dc <__errno_location@plt>
   19fb8:	mov	r6, #0
   19fbc:	str	r6, [r0]
   19fc0:	b	19f94 <__assert_fail@plt+0x8b80>
   19fc4:	andeq	ip, r1, r8, lsl #8
   19fc8:	push	{r4, r5}
   19fcc:	mov	r1, #10
   19fd0:	pop	{r4, r5}
   19fd4:	b	19e8c <__assert_fail@plt+0x8a78>
   19fd8:	vldr	d7, [pc, #144]	; 1a070 <__assert_fail@plt+0x8c5c>
   19fdc:	push	{r4, r5, lr}
   19fe0:	vpush	{d8}
   19fe4:	vmov.f64	d8, d0
   19fe8:	vcmpe.f64	d0, d7
   19fec:	sub	sp, sp, #12
   19ff0:	vmrs	APSR_nzcv, fpscr
   19ff4:	bge	1a044 <__assert_fail@plt+0x8c30>
   19ff8:	bl	112dc <__errno_location@plt>
   19ffc:	mov	r4, r0
   1a000:	vmov.f64	d0, d8
   1a004:	mov	r0, sp
   1a008:	bl	1a928 <__assert_fail@plt+0x9514>
   1a00c:	mov	r5, #0
   1a010:	b	1a020 <__assert_fail@plt+0x8c0c>
   1a014:	ldr	r3, [r4]
   1a018:	bics	r3, r3, #4
   1a01c:	bne	1a060 <__assert_fail@plt+0x8c4c>
   1a020:	str	r5, [r4]
   1a024:	mov	r1, sp
   1a028:	mov	r0, sp
   1a02c:	bl	11114 <nanosleep@plt>
   1a030:	cmp	r0, #0
   1a034:	bne	1a014 <__assert_fail@plt+0x8c00>
   1a038:	add	sp, sp, #12
   1a03c:	vpop	{d8}
   1a040:	pop	{r4, r5, pc}
   1a044:	bl	112dc <__errno_location@plt>
   1a048:	mov	r4, r0
   1a04c:	bl	110e4 <pause@plt>
   1a050:	ldr	r3, [r4]
   1a054:	cmp	r3, #4
   1a058:	beq	1a04c <__assert_fail@plt+0x8c38>
   1a05c:	b	1a000 <__assert_fail@plt+0x8bec>
   1a060:	mvn	r0, #0
   1a064:	add	sp, sp, #12
   1a068:	vpop	{d8}
   1a06c:	pop	{r4, r5, pc}
   1a070:	andeq	r0, r0, r0
   1a074:	mvnmi	r0, r0
   1a078:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a07c:	sub	sp, sp, #12
   1a080:	mov	r6, r0
   1a084:	mov	r9, r3
   1a088:	mov	r5, r1
   1a08c:	mov	r8, r2
   1a090:	bl	112dc <__errno_location@plt>
   1a094:	mov	r4, #0
   1a098:	add	r1, sp, #4
   1a09c:	str	r4, [r0]
   1a0a0:	mov	r7, r0
   1a0a4:	mov	r0, r6
   1a0a8:	blx	r9
   1a0ac:	ldr	r3, [sp, #4]
   1a0b0:	cmp	r6, r3
   1a0b4:	beq	1a0f4 <__assert_fail@plt+0x8ce0>
   1a0b8:	cmp	r5, r4
   1a0bc:	beq	1a0fc <__assert_fail@plt+0x8ce8>
   1a0c0:	vcmp.f64	d0, #0.0
   1a0c4:	vmrs	APSR_nzcv, fpscr
   1a0c8:	moveq	r0, #1
   1a0cc:	beq	1a0e4 <__assert_fail@plt+0x8cd0>
   1a0d0:	ldr	r0, [r7]
   1a0d4:	subs	r0, r0, #34	; 0x22
   1a0d8:	movne	r0, #1
   1a0dc:	cmp	r5, #0
   1a0e0:	beq	1a0e8 <__assert_fail@plt+0x8cd4>
   1a0e4:	str	r3, [r5]
   1a0e8:	vstr	d0, [r8]
   1a0ec:	add	sp, sp, #12
   1a0f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a0f4:	mov	r0, r4
   1a0f8:	b	1a0dc <__assert_fail@plt+0x8cc8>
   1a0fc:	ldrb	r2, [r3]
   1a100:	cmp	r2, r4
   1a104:	movne	r0, r5
   1a108:	bne	1a0e8 <__assert_fail@plt+0x8cd4>
   1a10c:	vcmp.f64	d0, #0.0
   1a110:	vmrs	APSR_nzcv, fpscr
   1a114:	bne	1a0d0 <__assert_fail@plt+0x8cbc>
   1a118:	mov	r0, #1
   1a11c:	b	1a0e8 <__assert_fail@plt+0x8cd4>
   1a120:	push	{r4, r5, r6, r7, r8, lr}
   1a124:	subs	r5, r1, #0
   1a128:	mov	r4, r0
   1a12c:	blt	1a1a0 <__assert_fail@plt+0x8d8c>
   1a130:	moveq	r6, #0
   1a134:	moveq	r7, #0
   1a138:	bne	1a160 <__assert_fail@plt+0x8d4c>
   1a13c:	ldr	r2, [r4]
   1a140:	ldr	r1, [r4, #4]
   1a144:	mov	r0, #0
   1a148:	mul	ip, r2, r7
   1a14c:	umull	r2, r3, r2, r5
   1a150:	mla	r5, r5, r1, ip
   1a154:	add	r3, r5, r3
   1a158:	strd	r2, [r4]
   1a15c:	pop	{r4, r5, r6, r7, r8, pc}
   1a160:	asr	r7, r5, #31
   1a164:	mov	r2, r5
   1a168:	mov	r3, r7
   1a16c:	mvn	r0, #0
   1a170:	mvn	r1, #0
   1a174:	bl	1b288 <__assert_fail@plt+0x9e74>
   1a178:	ldrd	r2, [r4]
   1a17c:	mov	r6, r5
   1a180:	cmp	r1, r3
   1a184:	cmpeq	r0, r2
   1a188:	bcs	1a13c <__assert_fail@plt+0x8d28>
   1a18c:	mvn	r2, #0
   1a190:	mvn	r3, #0
   1a194:	mov	r0, #1
   1a198:	strd	r2, [r4]
   1a19c:	pop	{r4, r5, r6, r7, r8, pc}
   1a1a0:	ldrd	r2, [r0]
   1a1a4:	orrs	r3, r2, r3
   1a1a8:	moveq	r6, r5
   1a1ac:	asreq	r7, r6, #31
   1a1b0:	bne	1a18c <__assert_fail@plt+0x8d78>
   1a1b4:	b	1a13c <__assert_fail@plt+0x8d28>
   1a1b8:	cmp	r2, #36	; 0x24
   1a1bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1c0:	sub	sp, sp, #20
   1a1c4:	bhi	1a738 <__assert_fail@plt+0x9324>
   1a1c8:	cmp	r1, #0
   1a1cc:	mov	r8, r2
   1a1d0:	mov	r7, r0
   1a1d4:	mov	r5, r1
   1a1d8:	mov	r6, r3
   1a1dc:	addeq	r5, sp, #4
   1a1e0:	bl	112dc <__errno_location@plt>
   1a1e4:	mov	r3, #0
   1a1e8:	str	r3, [r0]
   1a1ec:	mov	r9, r0
   1a1f0:	bl	11288 <__ctype_b_loc@plt>
   1a1f4:	ldrb	r3, [r7]
   1a1f8:	mov	r2, r7
   1a1fc:	ldr	r0, [r0]
   1a200:	b	1a208 <__assert_fail@plt+0x8df4>
   1a204:	ldrb	r3, [r2, #1]!
   1a208:	lsl	r1, r3, #1
   1a20c:	ldrh	r4, [r0, r1]
   1a210:	ands	r4, r4, #8192	; 0x2000
   1a214:	bne	1a204 <__assert_fail@plt+0x8df0>
   1a218:	cmp	r3, #45	; 0x2d
   1a21c:	bne	1a230 <__assert_fail@plt+0x8e1c>
   1a220:	mov	r4, #4
   1a224:	mov	r0, r4
   1a228:	add	sp, sp, #20
   1a22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a230:	mov	r2, r8
   1a234:	mov	r3, r4
   1a238:	mov	r1, r5
   1a23c:	mov	r0, r7
   1a240:	bl	11138 <__strtoull_internal@plt>
   1a244:	ldr	r8, [r5]
   1a248:	cmp	r7, r8
   1a24c:	mov	r2, r0
   1a250:	str	r0, [sp, #8]
   1a254:	str	r1, [sp, #12]
   1a258:	beq	1a2a4 <__assert_fail@plt+0x8e90>
   1a25c:	ldr	r4, [r9]
   1a260:	cmp	r4, #0
   1a264:	bne	1a294 <__assert_fail@plt+0x8e80>
   1a268:	ldr	r3, [sp, #56]	; 0x38
   1a26c:	cmp	r3, #0
   1a270:	beq	1a280 <__assert_fail@plt+0x8e6c>
   1a274:	ldrb	r9, [r8]
   1a278:	cmp	r9, #0
   1a27c:	bne	1a2dc <__assert_fail@plt+0x8ec8>
   1a280:	mov	r0, r4
   1a284:	str	r2, [r6]
   1a288:	str	r1, [r6, #4]
   1a28c:	add	sp, sp, #20
   1a290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a294:	cmp	r4, #34	; 0x22
   1a298:	bne	1a220 <__assert_fail@plt+0x8e0c>
   1a29c:	mov	r4, #1
   1a2a0:	b	1a268 <__assert_fail@plt+0x8e54>
   1a2a4:	ldr	r3, [sp, #56]	; 0x38
   1a2a8:	cmp	r3, #0
   1a2ac:	beq	1a220 <__assert_fail@plt+0x8e0c>
   1a2b0:	ldrb	r1, [r8]
   1a2b4:	cmp	r1, #0
   1a2b8:	beq	1a220 <__assert_fail@plt+0x8e0c>
   1a2bc:	mov	r0, r3
   1a2c0:	bl	112b8 <strchr@plt>
   1a2c4:	cmp	r0, #0
   1a2c8:	beq	1a220 <__assert_fail@plt+0x8e0c>
   1a2cc:	ldrb	r9, [r8]
   1a2d0:	mov	r2, #1
   1a2d4:	mov	r3, #0
   1a2d8:	strd	r2, [sp, #8]
   1a2dc:	mov	r1, r9
   1a2e0:	ldr	r0, [sp, #56]	; 0x38
   1a2e4:	bl	112b8 <strchr@plt>
   1a2e8:	cmp	r0, #0
   1a2ec:	beq	1a6f4 <__assert_fail@plt+0x92e0>
   1a2f0:	sub	r3, r9, #69	; 0x45
   1a2f4:	cmp	r3, #47	; 0x2f
   1a2f8:	ldrls	pc, [pc, r3, lsl #2]
   1a2fc:	b	1a3c0 <__assert_fail@plt+0x8fac>
   1a300:			; <UNDEFINED> instruction: 0x0001a4b0
   1a304:	andeq	sl, r1, r0, asr #7
   1a308:			; <UNDEFINED> instruction: 0x0001a4b0
   1a30c:	andeq	sl, r1, r0, asr #7
   1a310:	andeq	sl, r1, r0, asr #7
   1a314:	andeq	sl, r1, r0, asr #7
   1a318:			; <UNDEFINED> instruction: 0x0001a4b0
   1a31c:	andeq	sl, r1, r0, asr #7
   1a320:			; <UNDEFINED> instruction: 0x0001a4b0
   1a324:	andeq	sl, r1, r0, asr #7
   1a328:	andeq	sl, r1, r0, asr #7
   1a32c:			; <UNDEFINED> instruction: 0x0001a4b0
   1a330:	andeq	sl, r1, r0, asr #7
   1a334:	andeq	sl, r1, r0, asr #7
   1a338:	andeq	sl, r1, r0, asr #7
   1a33c:			; <UNDEFINED> instruction: 0x0001a4b0
   1a340:	andeq	sl, r1, r0, asr #7
   1a344:	andeq	sl, r1, r0, asr #7
   1a348:	andeq	sl, r1, r0, asr #7
   1a34c:	andeq	sl, r1, r0, asr #7
   1a350:			; <UNDEFINED> instruction: 0x0001a4b0
   1a354:			; <UNDEFINED> instruction: 0x0001a4b0
   1a358:	andeq	sl, r1, r0, asr #7
   1a35c:	andeq	sl, r1, r0, asr #7
   1a360:	andeq	sl, r1, r0, asr #7
   1a364:	andeq	sl, r1, r0, asr #7
   1a368:	andeq	sl, r1, r0, asr #7
   1a36c:	andeq	sl, r1, r0, asr #7
   1a370:	andeq	sl, r1, r0, asr #7
   1a374:	andeq	sl, r1, r0, asr #7
   1a378:	andeq	sl, r1, r0, asr #7
   1a37c:	andeq	sl, r1, r0, asr #7
   1a380:	andeq	sl, r1, r0, asr #7
   1a384:	andeq	sl, r1, r0, asr #7
   1a388:			; <UNDEFINED> instruction: 0x0001a4b0
   1a38c:	andeq	sl, r1, r0, asr #7
   1a390:	andeq	sl, r1, r0, asr #7
   1a394:	andeq	sl, r1, r0, asr #7
   1a398:			; <UNDEFINED> instruction: 0x0001a4b0
   1a39c:	andeq	sl, r1, r0, asr #7
   1a3a0:			; <UNDEFINED> instruction: 0x0001a4b0
   1a3a4:	andeq	sl, r1, r0, asr #7
   1a3a8:	andeq	sl, r1, r0, asr #7
   1a3ac:	andeq	sl, r1, r0, asr #7
   1a3b0:	andeq	sl, r1, r0, asr #7
   1a3b4:	andeq	sl, r1, r0, asr #7
   1a3b8:	andeq	sl, r1, r0, asr #7
   1a3bc:			; <UNDEFINED> instruction: 0x0001a4b0
   1a3c0:	mov	r7, #1
   1a3c4:	mov	sl, #1024	; 0x400
   1a3c8:	sub	r9, r9, #66	; 0x42
   1a3cc:	cmp	r9, #53	; 0x35
   1a3d0:	ldrls	pc, [pc, r9, lsl #2]
   1a3d4:	b	1a6f4 <__assert_fail@plt+0x92e0>
   1a3d8:	andeq	sl, r1, r0, asr #12
   1a3dc:	strdeq	sl, [r1], -r4
   1a3e0:	strdeq	sl, [r1], -r4
   1a3e4:	andeq	sl, r1, r8, lsl r6
   1a3e8:	strdeq	sl, [r1], -r4
   1a3ec:	strdeq	sl, [r1], -r0
   1a3f0:	strdeq	sl, [r1], -r4
   1a3f4:	strdeq	sl, [r1], -r4
   1a3f8:	strdeq	sl, [r1], -r4
   1a3fc:	ldrdeq	sl, [r1], -r0
   1a400:	strdeq	sl, [r1], -r4
   1a404:	muleq	r1, ip, r6
   1a408:	strdeq	sl, [r1], -r4
   1a40c:	strdeq	sl, [r1], -r4
   1a410:	andeq	sl, r1, r4, ror r6
   1a414:	strdeq	sl, [r1], -r4
   1a418:	strdeq	sl, [r1], -r4
   1a41c:	strdeq	sl, [r1], -r4
   1a420:	andeq	sl, r1, ip, asr #13
   1a424:	strdeq	sl, [r1], -r4
   1a428:	strdeq	sl, [r1], -r4
   1a42c:	strdeq	sl, [r1], -r4
   1a430:	strdeq	sl, [r1], -r4
   1a434:	andeq	sl, r1, r8, lsr #11
   1a438:	andeq	sl, r1, r4, ror r5
   1a43c:	strdeq	sl, [r1], -r4
   1a440:	strdeq	sl, [r1], -r4
   1a444:	strdeq	sl, [r1], -r4
   1a448:	strdeq	sl, [r1], -r4
   1a44c:	strdeq	sl, [r1], -r4
   1a450:	strdeq	sl, [r1], -r4
   1a454:	strdeq	sl, [r1], -r4
   1a458:	andeq	sl, r1, r0, asr #10
   1a45c:	andeq	sl, r1, r0, lsr r5
   1a460:	strdeq	sl, [r1], -r4
   1a464:	strdeq	sl, [r1], -r4
   1a468:	strdeq	sl, [r1], -r4
   1a46c:	strdeq	sl, [r1], -r0
   1a470:	strdeq	sl, [r1], -r4
   1a474:	strdeq	sl, [r1], -r4
   1a478:	strdeq	sl, [r1], -r4
   1a47c:	ldrdeq	sl, [r1], -r0
   1a480:	strdeq	sl, [r1], -r4
   1a484:	muleq	r1, ip, r6
   1a488:	strdeq	sl, [r1], -r4
   1a48c:	strdeq	sl, [r1], -r4
   1a490:	strdeq	sl, [r1], -r4
   1a494:	strdeq	sl, [r1], -r4
   1a498:	strdeq	sl, [r1], -r4
   1a49c:	strdeq	sl, [r1], -r4
   1a4a0:	andeq	sl, r1, ip, asr #13
   1a4a4:	strdeq	sl, [r1], -r4
   1a4a8:	strdeq	sl, [r1], -r4
   1a4ac:	andeq	sl, r1, ip, ror #9
   1a4b0:	mov	r1, #48	; 0x30
   1a4b4:	ldr	r0, [sp, #56]	; 0x38
   1a4b8:	bl	112b8 <strchr@plt>
   1a4bc:	cmp	r0, #0
   1a4c0:	beq	1a3c0 <__assert_fail@plt+0x8fac>
   1a4c4:	ldrb	r3, [r8, #1]
   1a4c8:	cmp	r3, #68	; 0x44
   1a4cc:	beq	1a4e0 <__assert_fail@plt+0x90cc>
   1a4d0:	cmp	r3, #105	; 0x69
   1a4d4:	beq	1a704 <__assert_fail@plt+0x92f0>
   1a4d8:	cmp	r3, #66	; 0x42
   1a4dc:	bne	1a3c0 <__assert_fail@plt+0x8fac>
   1a4e0:	mov	r7, #2
   1a4e4:	mov	sl, #1000	; 0x3e8
   1a4e8:	b	1a3c8 <__assert_fail@plt+0x8fb4>
   1a4ec:	ldrd	r2, [sp, #8]
   1a4f0:	cmp	r2, #0
   1a4f4:	sbcs	r1, r3, #0
   1a4f8:	blt	1a71c <__assert_fail@plt+0x9308>
   1a4fc:	adds	r2, r2, r2
   1a500:	adc	r3, r3, r3
   1a504:	mov	r1, r3
   1a508:	mov	r9, #0
   1a50c:	str	r2, [sp, #8]
   1a510:	str	r3, [sp, #12]
   1a514:	add	r3, r8, r7
   1a518:	str	r3, [r5]
   1a51c:	ldrb	r3, [r8, r7]
   1a520:	orr	r4, r4, r9
   1a524:	cmp	r3, #0
   1a528:	orrne	r4, r4, #2
   1a52c:	b	1a280 <__assert_fail@plt+0x8e6c>
   1a530:	ldr	r2, [sp, #8]
   1a534:	ldr	r1, [sp, #12]
   1a538:	mov	r9, #0
   1a53c:	b	1a514 <__assert_fail@plt+0x9100>
   1a540:	ldrd	r2, [sp, #8]
   1a544:	ldr	r1, [pc, #512]	; 1a74c <__assert_fail@plt+0x9338>
   1a548:	mvn	r0, #0
   1a54c:	cmp	r3, r1
   1a550:	cmpeq	r2, r0
   1a554:	bhi	1a71c <__assert_fail@plt+0x9308>
   1a558:	lsl	r1, r3, #9
   1a55c:	orr	r1, r1, r2, lsr #23
   1a560:	lsl	r2, r2, #9
   1a564:	str	r1, [sp, #12]
   1a568:	str	r2, [sp, #8]
   1a56c:	mov	r9, #0
   1a570:	b	1a514 <__assert_fail@plt+0x9100>
   1a574:	mov	fp, #7
   1a578:	mov	r9, #0
   1a57c:	add	r8, sp, #8
   1a580:	mov	r1, sl
   1a584:	mov	r0, r8
   1a588:	bl	1a120 <__assert_fail@plt+0x8d0c>
   1a58c:	subs	fp, fp, #1
   1a590:	orr	r9, r9, r0
   1a594:	bne	1a580 <__assert_fail@plt+0x916c>
   1a598:	ldr	r8, [r5]
   1a59c:	ldr	r2, [sp, #8]
   1a5a0:	ldr	r1, [sp, #12]
   1a5a4:	b	1a514 <__assert_fail@plt+0x9100>
   1a5a8:	mov	fp, #8
   1a5ac:	mov	r9, #0
   1a5b0:	add	r8, sp, fp
   1a5b4:	mov	r1, sl
   1a5b8:	mov	r0, r8
   1a5bc:	bl	1a120 <__assert_fail@plt+0x8d0c>
   1a5c0:	subs	fp, fp, #1
   1a5c4:	orr	r9, r9, r0
   1a5c8:	bne	1a5b4 <__assert_fail@plt+0x91a0>
   1a5cc:	b	1a598 <__assert_fail@plt+0x9184>
   1a5d0:	mov	r1, sl
   1a5d4:	add	r0, sp, #8
   1a5d8:	bl	1a120 <__assert_fail@plt+0x8d0c>
   1a5dc:	ldr	r8, [r5]
   1a5e0:	ldr	r2, [sp, #8]
   1a5e4:	ldr	r1, [sp, #12]
   1a5e8:	mov	r9, r0
   1a5ec:	b	1a514 <__assert_fail@plt+0x9100>
   1a5f0:	mov	fp, #3
   1a5f4:	mov	r9, #0
   1a5f8:	add	r8, sp, #8
   1a5fc:	mov	r1, sl
   1a600:	mov	r0, r8
   1a604:	bl	1a120 <__assert_fail@plt+0x8d0c>
   1a608:	subs	fp, fp, #1
   1a60c:	orr	r9, r9, r0
   1a610:	bne	1a5fc <__assert_fail@plt+0x91e8>
   1a614:	b	1a598 <__assert_fail@plt+0x9184>
   1a618:	mov	fp, #6
   1a61c:	mov	r9, #0
   1a620:	add	r8, sp, #8
   1a624:	mov	r1, sl
   1a628:	mov	r0, r8
   1a62c:	bl	1a120 <__assert_fail@plt+0x8d0c>
   1a630:	subs	fp, fp, #1
   1a634:	orr	r9, r9, r0
   1a638:	bne	1a624 <__assert_fail@plt+0x9210>
   1a63c:	b	1a598 <__assert_fail@plt+0x9184>
   1a640:	ldrd	r0, [sp, #8]
   1a644:	ldr	r3, [pc, #260]	; 1a750 <__assert_fail@plt+0x933c>
   1a648:	mvn	r2, #0
   1a64c:	cmp	r1, r3
   1a650:	cmpeq	r0, r2
   1a654:	bhi	1a71c <__assert_fail@plt+0x9308>
   1a658:	lsl	r1, r1, #10
   1a65c:	orr	r1, r1, r0, lsr #22
   1a660:	lsl	r2, r0, #10
   1a664:	str	r1, [sp, #12]
   1a668:	str	r2, [sp, #8]
   1a66c:	mov	r9, #0
   1a670:	b	1a514 <__assert_fail@plt+0x9100>
   1a674:	mov	fp, #5
   1a678:	mov	r9, #0
   1a67c:	add	r8, sp, #8
   1a680:	mov	r1, sl
   1a684:	mov	r0, r8
   1a688:	bl	1a120 <__assert_fail@plt+0x8d0c>
   1a68c:	subs	fp, fp, #1
   1a690:	orr	r9, r9, r0
   1a694:	bne	1a680 <__assert_fail@plt+0x926c>
   1a698:	b	1a598 <__assert_fail@plt+0x9184>
   1a69c:	mov	r1, sl
   1a6a0:	add	r0, sp, #8
   1a6a4:	bl	1a120 <__assert_fail@plt+0x8d0c>
   1a6a8:	mov	r1, sl
   1a6ac:	mov	r9, r0
   1a6b0:	add	r0, sp, #8
   1a6b4:	bl	1a120 <__assert_fail@plt+0x8d0c>
   1a6b8:	ldr	r8, [r5]
   1a6bc:	ldr	r2, [sp, #8]
   1a6c0:	ldr	r1, [sp, #12]
   1a6c4:	orr	r9, r9, r0
   1a6c8:	b	1a514 <__assert_fail@plt+0x9100>
   1a6cc:	mov	fp, #4
   1a6d0:	mov	r9, #0
   1a6d4:	add	r8, sp, #8
   1a6d8:	mov	r1, sl
   1a6dc:	mov	r0, r8
   1a6e0:	bl	1a120 <__assert_fail@plt+0x8d0c>
   1a6e4:	subs	fp, fp, #1
   1a6e8:	orr	r9, r9, r0
   1a6ec:	bne	1a6d8 <__assert_fail@plt+0x92c4>
   1a6f0:	b	1a598 <__assert_fail@plt+0x9184>
   1a6f4:	ldrd	r2, [sp, #8]
   1a6f8:	orr	r4, r4, #2
   1a6fc:	strd	r2, [r6]
   1a700:	b	1a224 <__assert_fail@plt+0x8e10>
   1a704:	ldrb	r7, [r8, #2]
   1a708:	mov	sl, #1024	; 0x400
   1a70c:	cmp	r7, #66	; 0x42
   1a710:	movne	r7, #1
   1a714:	moveq	r7, #3
   1a718:	b	1a3c8 <__assert_fail@plt+0x8fb4>
   1a71c:	mvn	r1, #0
   1a720:	mvn	r0, #0
   1a724:	mvn	r2, #0
   1a728:	strd	r0, [sp, #8]
   1a72c:	mov	r9, #1
   1a730:	mov	r1, r2
   1a734:	b	1a514 <__assert_fail@plt+0x9100>
   1a738:	ldr	r3, [pc, #20]	; 1a754 <__assert_fail@plt+0x9340>
   1a73c:	mov	r2, #85	; 0x55
   1a740:	ldr	r1, [pc, #16]	; 1a758 <__assert_fail@plt+0x9344>
   1a744:	ldr	r0, [pc, #16]	; 1a75c <__assert_fail@plt+0x9348>
   1a748:	bl	11414 <__assert_fail@plt>
   1a74c:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1a750:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1a754:	andeq	ip, r1, ip, lsr #29
   1a758:			; <UNDEFINED> instruction: 0x0001ceb8
   1a75c:	andeq	ip, r1, r8, asr #29
   1a760:	cmp	r1, #0
   1a764:	cmpne	r0, #0
   1a768:	moveq	r1, #1
   1a76c:	moveq	r0, r1
   1a770:	umull	r2, r3, r0, r1
   1a774:	adds	r3, r3, #0
   1a778:	movne	r3, #1
   1a77c:	cmp	r2, #0
   1a780:	blt	1a790 <__assert_fail@plt+0x937c>
   1a784:	cmp	r3, #0
   1a788:	bne	1a790 <__assert_fail@plt+0x937c>
   1a78c:	b	110a8 <calloc@plt>
   1a790:	push	{r4, lr}
   1a794:	bl	112dc <__errno_location@plt>
   1a798:	mov	r3, #12
   1a79c:	str	r3, [r0]
   1a7a0:	mov	r0, #0
   1a7a4:	pop	{r4, pc}
   1a7a8:	cmp	r0, #0
   1a7ac:	moveq	r0, #1
   1a7b0:	cmp	r0, #0
   1a7b4:	blt	1a7bc <__assert_fail@plt+0x93a8>
   1a7b8:	b	11240 <malloc@plt>
   1a7bc:	push	{r4, lr}
   1a7c0:	bl	112dc <__errno_location@plt>
   1a7c4:	mov	r3, #12
   1a7c8:	str	r3, [r0]
   1a7cc:	mov	r0, #0
   1a7d0:	pop	{r4, pc}
   1a7d4:	cmp	r0, #0
   1a7d8:	beq	1a7fc <__assert_fail@plt+0x93e8>
   1a7dc:	cmp	r1, #0
   1a7e0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a7e4:	sub	sp, sp, #12
   1a7e8:	beq	1a804 <__assert_fail@plt+0x93f0>
   1a7ec:	blt	1a81c <__assert_fail@plt+0x9408>
   1a7f0:	add	sp, sp, #12
   1a7f4:	pop	{lr}		; (ldr lr, [sp], #4)
   1a7f8:	b	11180 <realloc@plt>
   1a7fc:	mov	r0, r1
   1a800:	b	1a7a8 <__assert_fail@plt+0x9394>
   1a804:	str	r1, [sp, #4]
   1a808:	bl	16324 <__assert_fail@plt+0x4f10>
   1a80c:	ldr	r3, [sp, #4]
   1a810:	mov	r0, r3
   1a814:	add	sp, sp, #12
   1a818:	pop	{pc}		; (ldr pc, [sp], #4)
   1a81c:	bl	112dc <__errno_location@plt>
   1a820:	mov	r2, #12
   1a824:	mov	r3, #0
   1a828:	str	r2, [r0]
   1a82c:	b	1a810 <__assert_fail@plt+0x93fc>
   1a830:	push	{r4, r5, r6, lr}
   1a834:	mov	r6, r0
   1a838:	ldr	r4, [pc, #96]	; 1a8a0 <__assert_fail@plt+0x948c>
   1a83c:	mov	r5, r1
   1a840:	ldr	r2, [r4]
   1a844:	cmp	r2, #0
   1a848:	beq	1a87c <__assert_fail@plt+0x9468>
   1a84c:	ldr	r2, [r4]
   1a850:	cmp	r2, #0
   1a854:	beq	1a868 <__assert_fail@plt+0x9454>
   1a858:	mov	r1, r5
   1a85c:	mov	r0, r6
   1a860:	pop	{r4, r5, r6, lr}
   1a864:	b	11354 <strtod_l@plt>
   1a868:	cmp	r5, #0
   1a86c:	beq	1a890 <__assert_fail@plt+0x947c>
   1a870:	str	r6, [r5]
   1a874:	vldr	d0, [pc, #28]	; 1a898 <__assert_fail@plt+0x9484>
   1a878:	pop	{r4, r5, r6, pc}
   1a87c:	ldr	r1, [pc, #32]	; 1a8a4 <__assert_fail@plt+0x9490>
   1a880:	ldr	r0, [pc, #32]	; 1a8a8 <__assert_fail@plt+0x9494>
   1a884:	bl	1139c <newlocale@plt>
   1a888:	str	r0, [r4]
   1a88c:	b	1a84c <__assert_fail@plt+0x9438>
   1a890:	vldr	d0, [pc]	; 1a898 <__assert_fail@plt+0x9484>
   1a894:	pop	{r4, r5, r6, pc}
	...
   1a8a0:	andeq	lr, r2, r0, lsr #6
   1a8a4:	strdeq	ip, [r1], -r0
   1a8a8:			; <UNDEFINED> instruction: 0x00001fbf
   1a8ac:	push	{r4, r5, r6, lr}
   1a8b0:	mov	r4, r0
   1a8b4:	bl	11204 <__fpending@plt>
   1a8b8:	ldr	r5, [r4]
   1a8bc:	and	r5, r5, #32
   1a8c0:	mov	r6, r0
   1a8c4:	mov	r0, r4
   1a8c8:	bl	1a9f4 <__assert_fail@plt+0x95e0>
   1a8cc:	cmp	r5, #0
   1a8d0:	mov	r4, r0
   1a8d4:	bne	1a8f4 <__assert_fail@plt+0x94e0>
   1a8d8:	cmp	r0, #0
   1a8dc:	beq	1a8ec <__assert_fail@plt+0x94d8>
   1a8e0:	cmp	r6, #0
   1a8e4:	beq	1a910 <__assert_fail@plt+0x94fc>
   1a8e8:	mvn	r4, #0
   1a8ec:	mov	r0, r4
   1a8f0:	pop	{r4, r5, r6, pc}
   1a8f4:	cmp	r0, #0
   1a8f8:	bne	1a8e8 <__assert_fail@plt+0x94d4>
   1a8fc:	bl	112dc <__errno_location@plt>
   1a900:	str	r4, [r0]
   1a904:	mvn	r4, #0
   1a908:	mov	r0, r4
   1a90c:	pop	{r4, r5, r6, pc}
   1a910:	bl	112dc <__errno_location@plt>
   1a914:	ldr	r4, [r0]
   1a918:	subs	r4, r4, #9
   1a91c:	mvnne	r4, #0
   1a920:	mov	r0, r4
   1a924:	pop	{r4, r5, r6, pc}
   1a928:	vldr	d7, [pc, #160]	; 1a9d0 <__assert_fail@plt+0x95bc>
   1a92c:	vcmpe.f64	d0, d7
   1a930:	vmrs	APSR_nzcv, fpscr
   1a934:	ble	1a9c0 <__assert_fail@plt+0x95ac>
   1a938:	vldr	d7, [pc, #152]	; 1a9d8 <__assert_fail@plt+0x95c4>
   1a93c:	vcmpe.f64	d0, d7
   1a940:	vmrs	APSR_nzcv, fpscr
   1a944:	bpl	1a9b0 <__assert_fail@plt+0x959c>
   1a948:	vcvt.s32.f64	s14, d0
   1a94c:	vldr	d6, [pc, #140]	; 1a9e0 <__assert_fail@plt+0x95cc>
   1a950:	ldr	r2, [pc, #144]	; 1a9e8 <__assert_fail@plt+0x95d4>
   1a954:	ldr	ip, [pc, #144]	; 1a9ec <__assert_fail@plt+0x95d8>
   1a958:	vcvt.f64.s32	d5, s14
   1a95c:	vsub.f64	d0, d0, d5
   1a960:	vmul.f64	d0, d0, d6
   1a964:	vcvt.s32.f64	s15, d0
   1a968:	vcvt.f64.s32	d6, s15
   1a96c:	vmov	r1, s15
   1a970:	vcmpe.f64	d0, d6
   1a974:	vmrs	APSR_nzcv, fpscr
   1a978:	movgt	r3, #1
   1a97c:	movle	r3, #0
   1a980:	add	r3, r1, r3
   1a984:	smull	r2, r1, r2, r3
   1a988:	asr	r2, r3, #31
   1a98c:	rsb	r2, r2, r1, asr #28
   1a990:	vmov	r1, s14
   1a994:	add	r1, r2, r1
   1a998:	mul	r2, ip, r2
   1a99c:	subs	r3, r3, r2
   1a9a0:	submi	r1, r1, #1
   1a9a4:	addmi	r3, r3, ip
   1a9a8:	stm	r0, {r1, r3}
   1a9ac:	bx	lr
   1a9b0:	ldr	r3, [pc, #56]	; 1a9f0 <__assert_fail@plt+0x95dc>
   1a9b4:	mvn	r2, #-2147483648	; 0x80000000
   1a9b8:	stm	r0, {r2, r3}
   1a9bc:	bx	lr
   1a9c0:	mov	r2, #-2147483648	; 0x80000000
   1a9c4:	mov	r3, #0
   1a9c8:	stm	r0, {r2, r3}
   1a9cc:	bx	lr
   1a9d0:	andeq	r0, r0, r0
   1a9d4:	mvngt	r0, r0
   1a9d8:	andeq	r0, r0, r0
   1a9dc:	mvnmi	r0, r0
   1a9e0:	andeq	r0, r0, r0
   1a9e4:	bicmi	ip, sp, r5, ror #26
   1a9e8:	ldrtmi	r2, [r8], #4001	; 0xfa1
   1a9ec:	blcc	fe6cd1f4 <optarg@@GLIBC_2.4+0xfe69f02c>
   1a9f0:	blcc	fe6cd1f4 <optarg@@GLIBC_2.4+0xfe69f02c>
   1a9f4:	push	{r4, r5, lr}
   1a9f8:	sub	sp, sp, #12
   1a9fc:	mov	r4, r0
   1aa00:	bl	11318 <fileno@plt>
   1aa04:	cmp	r0, #0
   1aa08:	mov	r0, r4
   1aa0c:	blt	1aa88 <__assert_fail@plt+0x9674>
   1aa10:	bl	11258 <__freading@plt>
   1aa14:	cmp	r0, #0
   1aa18:	bne	1aa54 <__assert_fail@plt+0x9640>
   1aa1c:	mov	r0, r4
   1aa20:	bl	1aa94 <__assert_fail@plt+0x9680>
   1aa24:	cmp	r0, #0
   1aa28:	beq	1aa84 <__assert_fail@plt+0x9670>
   1aa2c:	bl	112dc <__errno_location@plt>
   1aa30:	mov	r5, r0
   1aa34:	mov	r0, r4
   1aa38:	ldr	r4, [r5]
   1aa3c:	bl	1133c <fclose@plt>
   1aa40:	cmp	r4, #0
   1aa44:	mvnne	r0, #0
   1aa48:	strne	r4, [r5]
   1aa4c:	add	sp, sp, #12
   1aa50:	pop	{r4, r5, pc}
   1aa54:	mov	r0, r4
   1aa58:	bl	11318 <fileno@plt>
   1aa5c:	mov	r3, #1
   1aa60:	str	r3, [sp]
   1aa64:	mov	r2, #0
   1aa68:	mov	r3, #0
   1aa6c:	bl	111ec <lseek64@plt>
   1aa70:	mvn	r3, #0
   1aa74:	mvn	r2, #0
   1aa78:	cmp	r1, r3
   1aa7c:	cmpeq	r0, r2
   1aa80:	bne	1aa1c <__assert_fail@plt+0x9608>
   1aa84:	mov	r0, r4
   1aa88:	add	sp, sp, #12
   1aa8c:	pop	{r4, r5, lr}
   1aa90:	b	1133c <fclose@plt>
   1aa94:	push	{r4, lr}
   1aa98:	subs	r4, r0, #0
   1aa9c:	sub	sp, sp, #8
   1aaa0:	beq	1aabc <__assert_fail@plt+0x96a8>
   1aaa4:	bl	11258 <__freading@plt>
   1aaa8:	cmp	r0, #0
   1aaac:	beq	1aabc <__assert_fail@plt+0x96a8>
   1aab0:	ldr	r3, [r4]
   1aab4:	tst	r3, #256	; 0x100
   1aab8:	bne	1aacc <__assert_fail@plt+0x96b8>
   1aabc:	mov	r0, r4
   1aac0:	add	sp, sp, #8
   1aac4:	pop	{r4, lr}
   1aac8:	b	110fc <fflush@plt>
   1aacc:	mov	r3, #1
   1aad0:	str	r3, [sp]
   1aad4:	mov	r2, #0
   1aad8:	mov	r3, #0
   1aadc:	mov	r0, r4
   1aae0:	bl	1aaf4 <__assert_fail@plt+0x96e0>
   1aae4:	mov	r0, r4
   1aae8:	add	sp, sp, #8
   1aaec:	pop	{r4, lr}
   1aaf0:	b	110fc <fflush@plt>
   1aaf4:	push	{r4, r5, r6, r7, r8, lr}
   1aaf8:	sub	sp, sp, #8
   1aafc:	ldmib	r0, {ip, lr}
   1ab00:	mov	r4, r0
   1ab04:	ldr	r5, [sp, #32]
   1ab08:	cmp	lr, ip
   1ab0c:	beq	1ab24 <__assert_fail@plt+0x9710>
   1ab10:	str	r5, [sp, #32]
   1ab14:	mov	r0, r4
   1ab18:	add	sp, sp, #8
   1ab1c:	pop	{r4, r5, r6, r7, r8, lr}
   1ab20:	b	11348 <fseeko64@plt>
   1ab24:	ldr	lr, [r0, #20]
   1ab28:	ldr	ip, [r0, #16]
   1ab2c:	cmp	lr, ip
   1ab30:	bne	1ab10 <__assert_fail@plt+0x96fc>
   1ab34:	ldr	r8, [r0, #36]	; 0x24
   1ab38:	cmp	r8, #0
   1ab3c:	bne	1ab10 <__assert_fail@plt+0x96fc>
   1ab40:	mov	r6, r2
   1ab44:	mov	r7, r3
   1ab48:	bl	11318 <fileno@plt>
   1ab4c:	mov	r2, r6
   1ab50:	mov	r3, r7
   1ab54:	str	r5, [sp]
   1ab58:	bl	111ec <lseek64@plt>
   1ab5c:	mvn	r3, #0
   1ab60:	mvn	r2, #0
   1ab64:	cmp	r1, r3
   1ab68:	cmpeq	r0, r2
   1ab6c:	beq	1ab8c <__assert_fail@plt+0x9778>
   1ab70:	ldr	r3, [r4]
   1ab74:	strd	r0, [r4, #80]	; 0x50
   1ab78:	mov	r0, r8
   1ab7c:	bic	r3, r3, #16
   1ab80:	str	r3, [r4]
   1ab84:	add	sp, sp, #8
   1ab88:	pop	{r4, r5, r6, r7, r8, pc}
   1ab8c:	mvn	r0, #0
   1ab90:	b	1ab84 <__assert_fail@plt+0x9770>
   1ab94:	push	{r4, lr}
   1ab98:	mov	r0, #14
   1ab9c:	bl	11390 <nl_langinfo@plt>
   1aba0:	cmp	r0, #0
   1aba4:	beq	1abbc <__assert_fail@plt+0x97a8>
   1aba8:	ldrb	r2, [r0]
   1abac:	ldr	r3, [pc, #16]	; 1abc4 <__assert_fail@plt+0x97b0>
   1abb0:	cmp	r2, #0
   1abb4:	moveq	r0, r3
   1abb8:	pop	{r4, pc}
   1abbc:	ldr	r0, [pc]	; 1abc4 <__assert_fail@plt+0x97b0>
   1abc0:	pop	{r4, pc}
   1abc4:	strdeq	ip, [r1], -r4
   1abc8:	push	{r4, r5, r6, r7, lr}
   1abcc:	subs	r6, r0, #0
   1abd0:	sub	sp, sp, #12
   1abd4:	addeq	r6, sp, #4
   1abd8:	mov	r0, r6
   1abdc:	mov	r5, r2
   1abe0:	mov	r7, r1
   1abe4:	bl	11210 <mbrtowc@plt>
   1abe8:	cmp	r5, #0
   1abec:	cmnne	r0, #3
   1abf0:	mov	r4, r0
   1abf4:	bls	1ac10 <__assert_fail@plt+0x97fc>
   1abf8:	mov	r0, #0
   1abfc:	bl	1ac74 <__assert_fail@plt+0x9860>
   1ac00:	cmp	r0, #0
   1ac04:	moveq	r4, #1
   1ac08:	ldrbeq	r3, [r7]
   1ac0c:	streq	r3, [r6]
   1ac10:	mov	r0, r4
   1ac14:	add	sp, sp, #12
   1ac18:	pop	{r4, r5, r6, r7, pc}
   1ac1c:	push	{r4, r5, r6, lr}
   1ac20:	subs	r4, r2, #0
   1ac24:	mov	r6, r0
   1ac28:	mov	r5, r1
   1ac2c:	beq	1ac58 <__assert_fail@plt+0x9844>
   1ac30:	mov	r1, r4
   1ac34:	mvn	r0, #0
   1ac38:	bl	1ad68 <__assert_fail@plt+0x9954>
   1ac3c:	cmp	r0, r5
   1ac40:	bcs	1ac58 <__assert_fail@plt+0x9844>
   1ac44:	bl	112dc <__errno_location@plt>
   1ac48:	mov	r3, #12
   1ac4c:	str	r3, [r0]
   1ac50:	mov	r0, #0
   1ac54:	pop	{r4, r5, r6, pc}
   1ac58:	mul	r1, r5, r4
   1ac5c:	mov	r0, r6
   1ac60:	pop	{r4, r5, r6, lr}
   1ac64:	b	1a7d4 <__assert_fail@plt+0x93c0>
   1ac68:	mov	r2, #3
   1ac6c:	mov	r1, #0
   1ac70:	b	16118 <__assert_fail@plt+0x4d04>
   1ac74:	push	{lr}		; (str lr, [sp, #-4]!)
   1ac78:	sub	sp, sp, #268	; 0x10c
   1ac7c:	add	r1, sp, #4
   1ac80:	ldr	r2, [pc, #60]	; 1acc4 <__assert_fail@plt+0x98b0>
   1ac84:	bl	1acd0 <__assert_fail@plt+0x98bc>
   1ac88:	cmp	r0, #0
   1ac8c:	movne	r0, #0
   1ac90:	bne	1acbc <__assert_fail@plt+0x98a8>
   1ac94:	ldr	r1, [pc, #44]	; 1acc8 <__assert_fail@plt+0x98b4>
   1ac98:	add	r0, sp, #4
   1ac9c:	bl	110cc <strcmp@plt>
   1aca0:	cmp	r0, #0
   1aca4:	beq	1acbc <__assert_fail@plt+0x98a8>
   1aca8:	add	r0, sp, #4
   1acac:	ldr	r1, [pc, #24]	; 1accc <__assert_fail@plt+0x98b8>
   1acb0:	bl	110cc <strcmp@plt>
   1acb4:	adds	r0, r0, #0
   1acb8:	movne	r0, #1
   1acbc:	add	sp, sp, #268	; 0x10c
   1acc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1acc4:	andeq	r0, r0, r1, lsl #2
   1acc8:	strdeq	ip, [r1], -r0
   1accc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1acd0:	push	{r4, r5, r6, lr}
   1acd4:	mov	r5, r1
   1acd8:	mov	r1, #0
   1acdc:	mov	r4, r2
   1ace0:	bl	11378 <setlocale@plt>
   1ace4:	subs	r6, r0, #0
   1ace8:	beq	1ad44 <__assert_fail@plt+0x9930>
   1acec:	bl	112a0 <strlen@plt>
   1acf0:	cmp	r4, r0
   1acf4:	bhi	1ad2c <__assert_fail@plt+0x9918>
   1acf8:	cmp	r4, #0
   1acfc:	bne	1ad08 <__assert_fail@plt+0x98f4>
   1ad00:	mov	r0, #34	; 0x22
   1ad04:	pop	{r4, r5, r6, pc}
   1ad08:	sub	r4, r4, #1
   1ad0c:	mov	r1, r6
   1ad10:	mov	r2, r4
   1ad14:	mov	r0, r5
   1ad18:	bl	1112c <memcpy@plt>
   1ad1c:	mov	r3, #0
   1ad20:	strb	r3, [r5, r4]
   1ad24:	mov	r0, #34	; 0x22
   1ad28:	pop	{r4, r5, r6, pc}
   1ad2c:	add	r2, r0, #1
   1ad30:	mov	r1, r6
   1ad34:	mov	r0, r5
   1ad38:	bl	1112c <memcpy@plt>
   1ad3c:	mov	r0, #0
   1ad40:	pop	{r4, r5, r6, pc}
   1ad44:	cmp	r4, #0
   1ad48:	beq	1ad58 <__assert_fail@plt+0x9944>
   1ad4c:	strb	r6, [r5]
   1ad50:	mov	r0, #22
   1ad54:	pop	{r4, r5, r6, pc}
   1ad58:	mov	r0, #22
   1ad5c:	pop	{r4, r5, r6, pc}
   1ad60:	mov	r1, #0
   1ad64:	b	11378 <setlocale@plt>
   1ad68:	subs	r2, r1, #1
   1ad6c:	bxeq	lr
   1ad70:	bcc	1af48 <__assert_fail@plt+0x9b34>
   1ad74:	cmp	r0, r1
   1ad78:	bls	1af2c <__assert_fail@plt+0x9b18>
   1ad7c:	tst	r1, r2
   1ad80:	beq	1af38 <__assert_fail@plt+0x9b24>
   1ad84:	clz	r3, r0
   1ad88:	clz	r2, r1
   1ad8c:	sub	r3, r2, r3
   1ad90:	rsbs	r3, r3, #31
   1ad94:	addne	r3, r3, r3, lsl #1
   1ad98:	mov	r2, #0
   1ad9c:	addne	pc, pc, r3, lsl #2
   1ada0:	nop			; (mov r0, r0)
   1ada4:	cmp	r0, r1, lsl #31
   1ada8:	adc	r2, r2, r2
   1adac:	subcs	r0, r0, r1, lsl #31
   1adb0:	cmp	r0, r1, lsl #30
   1adb4:	adc	r2, r2, r2
   1adb8:	subcs	r0, r0, r1, lsl #30
   1adbc:	cmp	r0, r1, lsl #29
   1adc0:	adc	r2, r2, r2
   1adc4:	subcs	r0, r0, r1, lsl #29
   1adc8:	cmp	r0, r1, lsl #28
   1adcc:	adc	r2, r2, r2
   1add0:	subcs	r0, r0, r1, lsl #28
   1add4:	cmp	r0, r1, lsl #27
   1add8:	adc	r2, r2, r2
   1addc:	subcs	r0, r0, r1, lsl #27
   1ade0:	cmp	r0, r1, lsl #26
   1ade4:	adc	r2, r2, r2
   1ade8:	subcs	r0, r0, r1, lsl #26
   1adec:	cmp	r0, r1, lsl #25
   1adf0:	adc	r2, r2, r2
   1adf4:	subcs	r0, r0, r1, lsl #25
   1adf8:	cmp	r0, r1, lsl #24
   1adfc:	adc	r2, r2, r2
   1ae00:	subcs	r0, r0, r1, lsl #24
   1ae04:	cmp	r0, r1, lsl #23
   1ae08:	adc	r2, r2, r2
   1ae0c:	subcs	r0, r0, r1, lsl #23
   1ae10:	cmp	r0, r1, lsl #22
   1ae14:	adc	r2, r2, r2
   1ae18:	subcs	r0, r0, r1, lsl #22
   1ae1c:	cmp	r0, r1, lsl #21
   1ae20:	adc	r2, r2, r2
   1ae24:	subcs	r0, r0, r1, lsl #21
   1ae28:	cmp	r0, r1, lsl #20
   1ae2c:	adc	r2, r2, r2
   1ae30:	subcs	r0, r0, r1, lsl #20
   1ae34:	cmp	r0, r1, lsl #19
   1ae38:	adc	r2, r2, r2
   1ae3c:	subcs	r0, r0, r1, lsl #19
   1ae40:	cmp	r0, r1, lsl #18
   1ae44:	adc	r2, r2, r2
   1ae48:	subcs	r0, r0, r1, lsl #18
   1ae4c:	cmp	r0, r1, lsl #17
   1ae50:	adc	r2, r2, r2
   1ae54:	subcs	r0, r0, r1, lsl #17
   1ae58:	cmp	r0, r1, lsl #16
   1ae5c:	adc	r2, r2, r2
   1ae60:	subcs	r0, r0, r1, lsl #16
   1ae64:	cmp	r0, r1, lsl #15
   1ae68:	adc	r2, r2, r2
   1ae6c:	subcs	r0, r0, r1, lsl #15
   1ae70:	cmp	r0, r1, lsl #14
   1ae74:	adc	r2, r2, r2
   1ae78:	subcs	r0, r0, r1, lsl #14
   1ae7c:	cmp	r0, r1, lsl #13
   1ae80:	adc	r2, r2, r2
   1ae84:	subcs	r0, r0, r1, lsl #13
   1ae88:	cmp	r0, r1, lsl #12
   1ae8c:	adc	r2, r2, r2
   1ae90:	subcs	r0, r0, r1, lsl #12
   1ae94:	cmp	r0, r1, lsl #11
   1ae98:	adc	r2, r2, r2
   1ae9c:	subcs	r0, r0, r1, lsl #11
   1aea0:	cmp	r0, r1, lsl #10
   1aea4:	adc	r2, r2, r2
   1aea8:	subcs	r0, r0, r1, lsl #10
   1aeac:	cmp	r0, r1, lsl #9
   1aeb0:	adc	r2, r2, r2
   1aeb4:	subcs	r0, r0, r1, lsl #9
   1aeb8:	cmp	r0, r1, lsl #8
   1aebc:	adc	r2, r2, r2
   1aec0:	subcs	r0, r0, r1, lsl #8
   1aec4:	cmp	r0, r1, lsl #7
   1aec8:	adc	r2, r2, r2
   1aecc:	subcs	r0, r0, r1, lsl #7
   1aed0:	cmp	r0, r1, lsl #6
   1aed4:	adc	r2, r2, r2
   1aed8:	subcs	r0, r0, r1, lsl #6
   1aedc:	cmp	r0, r1, lsl #5
   1aee0:	adc	r2, r2, r2
   1aee4:	subcs	r0, r0, r1, lsl #5
   1aee8:	cmp	r0, r1, lsl #4
   1aeec:	adc	r2, r2, r2
   1aef0:	subcs	r0, r0, r1, lsl #4
   1aef4:	cmp	r0, r1, lsl #3
   1aef8:	adc	r2, r2, r2
   1aefc:	subcs	r0, r0, r1, lsl #3
   1af00:	cmp	r0, r1, lsl #2
   1af04:	adc	r2, r2, r2
   1af08:	subcs	r0, r0, r1, lsl #2
   1af0c:	cmp	r0, r1, lsl #1
   1af10:	adc	r2, r2, r2
   1af14:	subcs	r0, r0, r1, lsl #1
   1af18:	cmp	r0, r1
   1af1c:	adc	r2, r2, r2
   1af20:	subcs	r0, r0, r1
   1af24:	mov	r0, r2
   1af28:	bx	lr
   1af2c:	moveq	r0, #1
   1af30:	movne	r0, #0
   1af34:	bx	lr
   1af38:	clz	r2, r1
   1af3c:	rsb	r2, r2, #31
   1af40:	lsr	r0, r0, r2
   1af44:	bx	lr
   1af48:	cmp	r0, #0
   1af4c:	mvnne	r0, #0
   1af50:	b	1b2c4 <__assert_fail@plt+0x9eb0>
   1af54:	cmp	r1, #0
   1af58:	beq	1af48 <__assert_fail@plt+0x9b34>
   1af5c:	push	{r0, r1, lr}
   1af60:	bl	1ad68 <__assert_fail@plt+0x9954>
   1af64:	pop	{r1, r2, lr}
   1af68:	mul	r3, r2, r0
   1af6c:	sub	r1, r1, r3
   1af70:	bx	lr
   1af74:	cmp	r1, #0
   1af78:	beq	1b184 <__assert_fail@plt+0x9d70>
   1af7c:	eor	ip, r0, r1
   1af80:	rsbmi	r1, r1, #0
   1af84:	subs	r2, r1, #1
   1af88:	beq	1b150 <__assert_fail@plt+0x9d3c>
   1af8c:	movs	r3, r0
   1af90:	rsbmi	r3, r0, #0
   1af94:	cmp	r3, r1
   1af98:	bls	1b15c <__assert_fail@plt+0x9d48>
   1af9c:	tst	r1, r2
   1afa0:	beq	1b16c <__assert_fail@plt+0x9d58>
   1afa4:	clz	r2, r3
   1afa8:	clz	r0, r1
   1afac:	sub	r2, r0, r2
   1afb0:	rsbs	r2, r2, #31
   1afb4:	addne	r2, r2, r2, lsl #1
   1afb8:	mov	r0, #0
   1afbc:	addne	pc, pc, r2, lsl #2
   1afc0:	nop			; (mov r0, r0)
   1afc4:	cmp	r3, r1, lsl #31
   1afc8:	adc	r0, r0, r0
   1afcc:	subcs	r3, r3, r1, lsl #31
   1afd0:	cmp	r3, r1, lsl #30
   1afd4:	adc	r0, r0, r0
   1afd8:	subcs	r3, r3, r1, lsl #30
   1afdc:	cmp	r3, r1, lsl #29
   1afe0:	adc	r0, r0, r0
   1afe4:	subcs	r3, r3, r1, lsl #29
   1afe8:	cmp	r3, r1, lsl #28
   1afec:	adc	r0, r0, r0
   1aff0:	subcs	r3, r3, r1, lsl #28
   1aff4:	cmp	r3, r1, lsl #27
   1aff8:	adc	r0, r0, r0
   1affc:	subcs	r3, r3, r1, lsl #27
   1b000:	cmp	r3, r1, lsl #26
   1b004:	adc	r0, r0, r0
   1b008:	subcs	r3, r3, r1, lsl #26
   1b00c:	cmp	r3, r1, lsl #25
   1b010:	adc	r0, r0, r0
   1b014:	subcs	r3, r3, r1, lsl #25
   1b018:	cmp	r3, r1, lsl #24
   1b01c:	adc	r0, r0, r0
   1b020:	subcs	r3, r3, r1, lsl #24
   1b024:	cmp	r3, r1, lsl #23
   1b028:	adc	r0, r0, r0
   1b02c:	subcs	r3, r3, r1, lsl #23
   1b030:	cmp	r3, r1, lsl #22
   1b034:	adc	r0, r0, r0
   1b038:	subcs	r3, r3, r1, lsl #22
   1b03c:	cmp	r3, r1, lsl #21
   1b040:	adc	r0, r0, r0
   1b044:	subcs	r3, r3, r1, lsl #21
   1b048:	cmp	r3, r1, lsl #20
   1b04c:	adc	r0, r0, r0
   1b050:	subcs	r3, r3, r1, lsl #20
   1b054:	cmp	r3, r1, lsl #19
   1b058:	adc	r0, r0, r0
   1b05c:	subcs	r3, r3, r1, lsl #19
   1b060:	cmp	r3, r1, lsl #18
   1b064:	adc	r0, r0, r0
   1b068:	subcs	r3, r3, r1, lsl #18
   1b06c:	cmp	r3, r1, lsl #17
   1b070:	adc	r0, r0, r0
   1b074:	subcs	r3, r3, r1, lsl #17
   1b078:	cmp	r3, r1, lsl #16
   1b07c:	adc	r0, r0, r0
   1b080:	subcs	r3, r3, r1, lsl #16
   1b084:	cmp	r3, r1, lsl #15
   1b088:	adc	r0, r0, r0
   1b08c:	subcs	r3, r3, r1, lsl #15
   1b090:	cmp	r3, r1, lsl #14
   1b094:	adc	r0, r0, r0
   1b098:	subcs	r3, r3, r1, lsl #14
   1b09c:	cmp	r3, r1, lsl #13
   1b0a0:	adc	r0, r0, r0
   1b0a4:	subcs	r3, r3, r1, lsl #13
   1b0a8:	cmp	r3, r1, lsl #12
   1b0ac:	adc	r0, r0, r0
   1b0b0:	subcs	r3, r3, r1, lsl #12
   1b0b4:	cmp	r3, r1, lsl #11
   1b0b8:	adc	r0, r0, r0
   1b0bc:	subcs	r3, r3, r1, lsl #11
   1b0c0:	cmp	r3, r1, lsl #10
   1b0c4:	adc	r0, r0, r0
   1b0c8:	subcs	r3, r3, r1, lsl #10
   1b0cc:	cmp	r3, r1, lsl #9
   1b0d0:	adc	r0, r0, r0
   1b0d4:	subcs	r3, r3, r1, lsl #9
   1b0d8:	cmp	r3, r1, lsl #8
   1b0dc:	adc	r0, r0, r0
   1b0e0:	subcs	r3, r3, r1, lsl #8
   1b0e4:	cmp	r3, r1, lsl #7
   1b0e8:	adc	r0, r0, r0
   1b0ec:	subcs	r3, r3, r1, lsl #7
   1b0f0:	cmp	r3, r1, lsl #6
   1b0f4:	adc	r0, r0, r0
   1b0f8:	subcs	r3, r3, r1, lsl #6
   1b0fc:	cmp	r3, r1, lsl #5
   1b100:	adc	r0, r0, r0
   1b104:	subcs	r3, r3, r1, lsl #5
   1b108:	cmp	r3, r1, lsl #4
   1b10c:	adc	r0, r0, r0
   1b110:	subcs	r3, r3, r1, lsl #4
   1b114:	cmp	r3, r1, lsl #3
   1b118:	adc	r0, r0, r0
   1b11c:	subcs	r3, r3, r1, lsl #3
   1b120:	cmp	r3, r1, lsl #2
   1b124:	adc	r0, r0, r0
   1b128:	subcs	r3, r3, r1, lsl #2
   1b12c:	cmp	r3, r1, lsl #1
   1b130:	adc	r0, r0, r0
   1b134:	subcs	r3, r3, r1, lsl #1
   1b138:	cmp	r3, r1
   1b13c:	adc	r0, r0, r0
   1b140:	subcs	r3, r3, r1
   1b144:	cmp	ip, #0
   1b148:	rsbmi	r0, r0, #0
   1b14c:	bx	lr
   1b150:	teq	ip, r0
   1b154:	rsbmi	r0, r0, #0
   1b158:	bx	lr
   1b15c:	movcc	r0, #0
   1b160:	asreq	r0, ip, #31
   1b164:	orreq	r0, r0, #1
   1b168:	bx	lr
   1b16c:	clz	r2, r1
   1b170:	rsb	r2, r2, #31
   1b174:	cmp	ip, #0
   1b178:	lsr	r0, r3, r2
   1b17c:	rsbmi	r0, r0, #0
   1b180:	bx	lr
   1b184:	cmp	r0, #0
   1b188:	mvngt	r0, #-2147483648	; 0x80000000
   1b18c:	movlt	r0, #-2147483648	; 0x80000000
   1b190:	b	1b2c4 <__assert_fail@plt+0x9eb0>
   1b194:	cmp	r1, #0
   1b198:	beq	1b184 <__assert_fail@plt+0x9d70>
   1b19c:	push	{r0, r1, lr}
   1b1a0:	bl	1af7c <__assert_fail@plt+0x9b68>
   1b1a4:	pop	{r1, r2, lr}
   1b1a8:	mul	r3, r2, r0
   1b1ac:	sub	r1, r1, r3
   1b1b0:	bx	lr
   1b1b4:	cmp	r3, #0
   1b1b8:	cmpeq	r2, #0
   1b1bc:	bne	1b1e0 <__assert_fail@plt+0x9dcc>
   1b1c0:	cmp	r1, #0
   1b1c4:	movlt	r1, #-2147483648	; 0x80000000
   1b1c8:	movlt	r0, #0
   1b1cc:	blt	1b1dc <__assert_fail@plt+0x9dc8>
   1b1d0:	cmpeq	r0, #0
   1b1d4:	mvnne	r1, #-2147483648	; 0x80000000
   1b1d8:	mvnne	r0, #0
   1b1dc:	b	1b2c4 <__assert_fail@plt+0x9eb0>
   1b1e0:	sub	sp, sp, #8
   1b1e4:	push	{sp, lr}
   1b1e8:	cmp	r1, #0
   1b1ec:	blt	1b20c <__assert_fail@plt+0x9df8>
   1b1f0:	cmp	r3, #0
   1b1f4:	blt	1b240 <__assert_fail@plt+0x9e2c>
   1b1f8:	bl	1b2d4 <__assert_fail@plt+0x9ec0>
   1b1fc:	ldr	lr, [sp, #4]
   1b200:	add	sp, sp, #8
   1b204:	pop	{r2, r3}
   1b208:	bx	lr
   1b20c:	rsbs	r0, r0, #0
   1b210:	sbc	r1, r1, r1, lsl #1
   1b214:	cmp	r3, #0
   1b218:	blt	1b264 <__assert_fail@plt+0x9e50>
   1b21c:	bl	1b2d4 <__assert_fail@plt+0x9ec0>
   1b220:	ldr	lr, [sp, #4]
   1b224:	add	sp, sp, #8
   1b228:	pop	{r2, r3}
   1b22c:	rsbs	r0, r0, #0
   1b230:	sbc	r1, r1, r1, lsl #1
   1b234:	rsbs	r2, r2, #0
   1b238:	sbc	r3, r3, r3, lsl #1
   1b23c:	bx	lr
   1b240:	rsbs	r2, r2, #0
   1b244:	sbc	r3, r3, r3, lsl #1
   1b248:	bl	1b2d4 <__assert_fail@plt+0x9ec0>
   1b24c:	ldr	lr, [sp, #4]
   1b250:	add	sp, sp, #8
   1b254:	pop	{r2, r3}
   1b258:	rsbs	r0, r0, #0
   1b25c:	sbc	r1, r1, r1, lsl #1
   1b260:	bx	lr
   1b264:	rsbs	r2, r2, #0
   1b268:	sbc	r3, r3, r3, lsl #1
   1b26c:	bl	1b2d4 <__assert_fail@plt+0x9ec0>
   1b270:	ldr	lr, [sp, #4]
   1b274:	add	sp, sp, #8
   1b278:	pop	{r2, r3}
   1b27c:	rsbs	r2, r2, #0
   1b280:	sbc	r3, r3, r3, lsl #1
   1b284:	bx	lr
   1b288:	cmp	r3, #0
   1b28c:	cmpeq	r2, #0
   1b290:	bne	1b2a8 <__assert_fail@plt+0x9e94>
   1b294:	cmp	r1, #0
   1b298:	cmpeq	r0, #0
   1b29c:	mvnne	r1, #0
   1b2a0:	mvnne	r0, #0
   1b2a4:	b	1b2c4 <__assert_fail@plt+0x9eb0>
   1b2a8:	sub	sp, sp, #8
   1b2ac:	push	{sp, lr}
   1b2b0:	bl	1b2d4 <__assert_fail@plt+0x9ec0>
   1b2b4:	ldr	lr, [sp, #4]
   1b2b8:	add	sp, sp, #8
   1b2bc:	pop	{r2, r3}
   1b2c0:	bx	lr
   1b2c4:	push	{r1, lr}
   1b2c8:	mov	r0, #8
   1b2cc:	bl	110c0 <raise@plt>
   1b2d0:	pop	{r1, pc}
   1b2d4:	cmp	r1, r3
   1b2d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b2dc:	cmpeq	r0, r2
   1b2e0:	mov	r4, r0
   1b2e4:	mov	r5, r1
   1b2e8:	ldr	r9, [sp, #28]
   1b2ec:	movcc	r0, #0
   1b2f0:	movcc	r1, #0
   1b2f4:	bcc	1b3ec <__assert_fail@plt+0x9fd8>
   1b2f8:	cmp	r3, #0
   1b2fc:	clzeq	ip, r2
   1b300:	clzne	ip, r3
   1b304:	addeq	ip, ip, #32
   1b308:	cmp	r5, #0
   1b30c:	clzeq	r1, r4
   1b310:	addeq	r1, r1, #32
   1b314:	clzne	r1, r5
   1b318:	sub	ip, ip, r1
   1b31c:	sub	lr, ip, #32
   1b320:	lsl	r7, r3, ip
   1b324:	rsb	r8, ip, #32
   1b328:	orr	r7, r7, r2, lsl lr
   1b32c:	orr	r7, r7, r2, lsr r8
   1b330:	lsl	r6, r2, ip
   1b334:	cmp	r5, r7
   1b338:	cmpeq	r4, r6
   1b33c:	movcc	r0, #0
   1b340:	movcc	r1, #0
   1b344:	bcc	1b360 <__assert_fail@plt+0x9f4c>
   1b348:	mov	r3, #1
   1b34c:	subs	r4, r4, r6
   1b350:	lsl	r1, r3, lr
   1b354:	lsl	r0, r3, ip
   1b358:	orr	r1, r1, r3, lsr r8
   1b35c:	sbc	r5, r5, r7
   1b360:	cmp	ip, #0
   1b364:	beq	1b3ec <__assert_fail@plt+0x9fd8>
   1b368:	lsrs	r3, r7, #1
   1b36c:	rrx	r2, r6
   1b370:	mov	r6, ip
   1b374:	b	1b398 <__assert_fail@plt+0x9f84>
   1b378:	subs	r4, r4, r2
   1b37c:	sbc	r5, r5, r3
   1b380:	adds	r4, r4, r4
   1b384:	adc	r5, r5, r5
   1b388:	adds	r4, r4, #1
   1b38c:	adc	r5, r5, #0
   1b390:	subs	r6, r6, #1
   1b394:	beq	1b3b4 <__assert_fail@plt+0x9fa0>
   1b398:	cmp	r5, r3
   1b39c:	cmpeq	r4, r2
   1b3a0:	bcs	1b378 <__assert_fail@plt+0x9f64>
   1b3a4:	adds	r4, r4, r4
   1b3a8:	adc	r5, r5, r5
   1b3ac:	subs	r6, r6, #1
   1b3b0:	bne	1b398 <__assert_fail@plt+0x9f84>
   1b3b4:	lsr	r6, r4, ip
   1b3b8:	lsr	r7, r5, ip
   1b3bc:	orr	r6, r6, r5, lsl r8
   1b3c0:	adds	r2, r0, r4
   1b3c4:	orr	r6, r6, r5, lsr lr
   1b3c8:	adc	r3, r1, r5
   1b3cc:	lsl	r1, r7, ip
   1b3d0:	orr	r1, r1, r6, lsl lr
   1b3d4:	lsl	r0, r6, ip
   1b3d8:	orr	r1, r1, r6, lsr r8
   1b3dc:	subs	r0, r2, r0
   1b3e0:	mov	r4, r6
   1b3e4:	mov	r5, r7
   1b3e8:	sbc	r1, r3, r1
   1b3ec:	cmp	r9, #0
   1b3f0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1b3f4:	strd	r4, [r9]
   1b3f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b3fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b400:	mov	r7, r0
   1b404:	ldr	r6, [pc, #72]	; 1b454 <__assert_fail@plt+0xa040>
   1b408:	ldr	r5, [pc, #72]	; 1b458 <__assert_fail@plt+0xa044>
   1b40c:	add	r6, pc, r6
   1b410:	add	r5, pc, r5
   1b414:	sub	r6, r6, r5
   1b418:	mov	r8, r1
   1b41c:	mov	r9, r2
   1b420:	bl	1107c <fstatfs64@plt-0x20>
   1b424:	asrs	r6, r6, #2
   1b428:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b42c:	mov	r4, #0
   1b430:	add	r4, r4, #1
   1b434:	ldr	r3, [r5], #4
   1b438:	mov	r2, r9
   1b43c:	mov	r1, r8
   1b440:	mov	r0, r7
   1b444:	blx	r3
   1b448:	cmp	r6, r4
   1b44c:	bne	1b430 <__assert_fail@plt+0xa01c>
   1b450:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b454:	strdeq	r2, [r1], -ip
   1b458:	strdeq	r2, [r1], -r4
   1b45c:	bx	lr
   1b460:	ldr	r3, [pc, #12]	; 1b474 <__assert_fail@plt+0xa060>
   1b464:	mov	r1, #0
   1b468:	add	r3, pc, r3
   1b46c:	ldr	r2, [r3]
   1b470:	b	112e8 <__cxa_atexit@plt>
   1b474:	ldrdeq	r2, [r1], -r4

Disassembly of section .fini:

0001b478 <.fini>:
   1b478:	push	{r3, lr}
   1b47c:	pop	{r3, pc}
