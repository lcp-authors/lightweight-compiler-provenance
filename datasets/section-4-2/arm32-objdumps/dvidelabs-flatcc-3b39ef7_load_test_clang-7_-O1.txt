
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012398 <.init>:
   12398:	push	{r3, lr}
   1239c:	bl	124e4 <_start@@Base+0x3c>
   123a0:	pop	{r3, pc}

Disassembly of section .plt:

000123a4 <strcmp@plt-0x14>:
   123a4:	push	{lr}		; (str lr, [sp, #-4]!)
   123a8:	ldr	lr, [pc, #4]	; 123b4 <strcmp@plt-0x4>
   123ac:	add	lr, pc, lr
   123b0:	ldr	pc, [lr, #8]!
   123b4:	andeq	r6, r1, ip, asr #24

000123b8 <strcmp@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #90112	; 0x16000
   123c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000123c4 <printf@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #90112	; 0x16000
   123cc:	ldr	pc, [ip, #3140]!	; 0xc44

000123d0 <fopen@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #90112	; 0x16000
   123d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000123dc <free@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #90112	; 0x16000
   123e4:	ldr	pc, [ip, #3124]!	; 0xc34

000123e8 <memcpy@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #90112	; 0x16000
   123f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000123f4 <fwrite_unlocked@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #90112	; 0x16000
   123fc:	ldr	pc, [ip, #3108]!	; 0xc24

00012400 <memcmp@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #90112	; 0x16000
   12408:	ldr	pc, [ip, #3100]!	; 0xc1c

0001240c <realloc@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #90112	; 0x16000
   12414:	ldr	pc, [ip, #3092]!	; 0xc14

00012418 <gettimeofday@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #90112	; 0x16000
   12420:	ldr	pc, [ip, #3084]!	; 0xc0c

00012424 <puts@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #90112	; 0x16000
   1242c:	ldr	pc, [ip, #3076]!	; 0xc04

00012430 <malloc@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #90112	; 0x16000
   12438:	ldr	pc, [ip, #3068]!	; 0xbfc

0001243c <__libc_start_main@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #90112	; 0x16000
   12444:	ldr	pc, [ip, #3060]!	; 0xbf4

00012448 <__gmon_start__@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #90112	; 0x16000
   12450:	ldr	pc, [ip, #3052]!	; 0xbec

00012454 <strlen@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #90112	; 0x16000
   1245c:	ldr	pc, [ip, #3044]!	; 0xbe4

00012460 <posix_memalign@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #90112	; 0x16000
   12468:	ldr	pc, [ip, #3036]!	; 0xbdc

0001246c <memset@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #90112	; 0x16000
   12474:	ldr	pc, [ip, #3028]!	; 0xbd4

00012478 <memchr@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #90112	; 0x16000
   12480:	ldr	pc, [ip, #3020]!	; 0xbcc

00012484 <fclose@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #90112	; 0x16000
   1248c:	ldr	pc, [ip, #3012]!	; 0xbc4

00012490 <abort@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #90112	; 0x16000
   12498:	ldr	pc, [ip, #3004]!	; 0xbbc

0001249c <__assert_fail@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #90112	; 0x16000
   124a4:	ldr	pc, [ip, #2996]!	; 0xbb4

Disassembly of section .text:

000124a8 <_start@@Base>:
   124a8:	mov	fp, #0
   124ac:	mov	lr, #0
   124b0:	pop	{r1}		; (ldr r1, [sp], #4)
   124b4:	mov	r2, sp
   124b8:	push	{r2}		; (str r2, [sp, #-4]!)
   124bc:	push	{r0}		; (str r0, [sp, #-4]!)
   124c0:	ldr	ip, [pc, #16]	; 124d8 <_start@@Base+0x30>
   124c4:	push	{ip}		; (str ip, [sp, #-4]!)
   124c8:	ldr	r0, [pc, #12]	; 124dc <_start@@Base+0x34>
   124cc:	ldr	r3, [pc, #12]	; 124e0 <_start@@Base+0x38>
   124d0:	bl	1243c <__libc_start_main@plt>
   124d4:	bl	12490 <abort@plt>
   124d8:	andeq	r6, r1, r4, asr #21
   124dc:	muleq	r1, r8, r5
   124e0:	andeq	r6, r1, r4, ror #20
   124e4:	ldr	r3, [pc, #20]	; 12500 <_start@@Base+0x58>
   124e8:	ldr	r2, [pc, #20]	; 12504 <_start@@Base+0x5c>
   124ec:	add	r3, pc, r3
   124f0:	ldr	r2, [r3, r2]
   124f4:	cmp	r2, #0
   124f8:	bxeq	lr
   124fc:	b	12448 <__gmon_start__@plt>
   12500:	andeq	r6, r1, ip, lsl #22
   12504:	andeq	r0, r0, ip, asr r0
   12508:	ldr	r0, [pc, #24]	; 12528 <_start@@Base+0x80>
   1250c:	ldr	r3, [pc, #24]	; 1252c <_start@@Base+0x84>
   12510:	cmp	r3, r0
   12514:	bxeq	lr
   12518:	ldr	r3, [pc, #16]	; 12530 <_start@@Base+0x88>
   1251c:	cmp	r3, #0
   12520:	bxeq	lr
   12524:	bx	r3
   12528:	andeq	r9, r2, r8, rrx
   1252c:	andeq	r9, r2, r8, rrx
   12530:	andeq	r0, r0, r0
   12534:	ldr	r0, [pc, #36]	; 12560 <_start@@Base+0xb8>
   12538:	ldr	r1, [pc, #36]	; 12564 <_start@@Base+0xbc>
   1253c:	sub	r1, r1, r0
   12540:	asr	r1, r1, #2
   12544:	add	r1, r1, r1, lsr #31
   12548:	asrs	r1, r1, #1
   1254c:	bxeq	lr
   12550:	ldr	r3, [pc, #16]	; 12568 <_start@@Base+0xc0>
   12554:	cmp	r3, #0
   12558:	bxeq	lr
   1255c:	bx	r3
   12560:	andeq	r9, r2, r8, rrx
   12564:	andeq	r9, r2, r8, rrx
   12568:	andeq	r0, r0, r0
   1256c:	push	{r4, lr}
   12570:	ldr	r4, [pc, #24]	; 12590 <_start@@Base+0xe8>
   12574:	ldrb	r3, [r4]
   12578:	cmp	r3, #0
   1257c:	popne	{r4, pc}
   12580:	bl	12508 <_start@@Base+0x60>
   12584:	mov	r3, #1
   12588:	strb	r3, [r4]
   1258c:	pop	{r4, pc}
   12590:	andeq	r9, r2, r8, rrx
   12594:	b	12534 <_start@@Base+0x8c>

00012598 <main@@Base>:
   12598:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1259c:	add	fp, sp, #24
   125a0:	vpush	{d8}
   125a4:	sub	sp, sp, #240	; 0xf0
   125a8:	mov	r4, sp
   125ac:	mov	r0, r4
   125b0:	bl	131f8 <flatcc_builder_init@@Base>
   125b4:	mov	r0, r4
   125b8:	bl	12774 <main@@Base+0x1dc>
   125bc:	sub	r1, fp, #40	; 0x28
   125c0:	mov	r0, r4
   125c4:	bl	1611c <flatcc_builder_finalize_buffer@@Base>
   125c8:	mov	r4, r0
   125cc:	movw	r0, #27348	; 0x6ad4
   125d0:	movt	r0, #1
   125d4:	movw	r1, #27370	; 0x6aea
   125d8:	movt	r1, #1
   125dc:	bl	123d0 <fopen@plt>
   125e0:	cmp	r0, #0
   125e4:	beq	126fc <main@@Base+0x164>
   125e8:	mov	r6, r0
   125ec:	ldr	r7, [fp, #-40]	; 0xffffffd8
   125f0:	mov	r5, #1
   125f4:	mov	r0, r4
   125f8:	mov	r1, #1
   125fc:	mov	r2, r7
   12600:	mov	r3, r6
   12604:	bl	123f4 <fwrite_unlocked@plt>
   12608:	mov	r8, r0
   1260c:	mov	r0, r6
   12610:	bl	12484 <fclose@plt>
   12614:	cmp	r7, r8
   12618:	bne	12700 <main@@Base+0x168>
   1261c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12620:	movw	r0, #27373	; 0x6aed
   12624:	movt	r0, #1
   12628:	bl	123c4 <printf@plt>
   1262c:	movw	r0, #28992	; 0x7140
   12630:	movt	r0, #1
   12634:	bl	12424 <puts@plt>
   12638:	mov	r5, #0
   1263c:	bl	127e0 <main@@Base+0x248>
   12640:	vmov.f64	d8, d0
   12644:	mov	r9, sp
   12648:	movw	r8, #27391	; 0x6aff
   1264c:	movt	r8, #1
   12650:	mov	r0, r9
   12654:	bl	12774 <main@@Base+0x1dc>
   12658:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1265c:	mov	r0, r9
   12660:	mov	r1, r4
   12664:	bl	160d0 <flatcc_builder_copy_buffer@@Base>
   12668:	mov	r0, r4
   1266c:	bl	12850 <main@@Base+0x2b8>
   12670:	mov	r7, r0
   12674:	bl	12888 <main@@Base+0x2f0>
   12678:	mov	r1, r8
   1267c:	bl	123b8 <strcmp@plt>
   12680:	cmp	r0, #0
   12684:	bne	12734 <main@@Base+0x19c>
   12688:	mov	r6, r0
   1268c:	mov	r0, r7
   12690:	bl	12908 <main@@Base+0x370>
   12694:	mov	r7, r0
   12698:	bl	12984 <main@@Base+0x3ec>
   1269c:	cmp	r0, #1000	; 0x3e8
   126a0:	orrne	r6, r6, #1
   126a4:	cmp	r6, #0
   126a8:	bne	12754 <main@@Base+0x1bc>
   126ac:	mov	r6, #0
   126b0:	mov	r0, r7
   126b4:	mov	r1, r6
   126b8:	bl	12afc <main@@Base+0x564>
   126bc:	mov	r1, r0
   126c0:	mov	r0, r4
   126c4:	bl	12998 <main@@Base+0x400>
   126c8:	add	r6, r6, #1
   126cc:	cmp	r6, #1000	; 0x3e8
   126d0:	bne	126b0 <main@@Base+0x118>
   126d4:	add	r5, r5, #1
   126d8:	cmp	r5, #10
   126dc:	bcc	12650 <main@@Base+0xb8>
   126e0:	bl	127e0 <main@@Base+0x248>
   126e4:	vmov.f64	d1, d0
   126e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   126ec:	vmov.f64	d0, d8
   126f0:	bl	12b50 <main@@Base+0x5b8>
   126f4:	mov	r5, #0
   126f8:	b	12700 <main@@Base+0x168>
   126fc:	mvn	r5, #0
   12700:	mov	r0, sp
   12704:	bl	13370 <flatcc_builder_clear@@Base>
   12708:	mov	r0, r4
   1270c:	bl	123dc <free@plt>
   12710:	cmp	r5, #0
   12714:	beq	12724 <main@@Base+0x18c>
   12718:	movw	r0, #28960	; 0x7120
   1271c:	movt	r0, #1
   12720:	bl	12424 <puts@plt>
   12724:	mov	r0, r5
   12728:	sub	sp, fp, #32
   1272c:	vpop	{d8}
   12730:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12734:	movw	r0, #27404	; 0x6b0c
   12738:	movt	r0, #1
   1273c:	movw	r1, #27413	; 0x6b15
   12740:	movt	r1, #1
   12744:	movw	r3, #27488	; 0x6b60
   12748:	movt	r3, #1
   1274c:	mov	r2, #139	; 0x8b
   12750:	bl	1249c <__assert_fail@plt>
   12754:	movw	r0, #27404	; 0x6b0c
   12758:	movt	r0, #1
   1275c:	movw	r1, #27413	; 0x6b15
   12760:	movt	r1, #1
   12764:	movw	r3, #27488	; 0x6b60
   12768:	movt	r3, #1
   1276c:	mov	r2, #143	; 0x8f
   12770:	bl	1249c <__assert_fail@plt>
   12774:	push	{r4, sl, fp, lr}
   12778:	add	fp, sp, #8
   1277c:	mov	r4, r0
   12780:	bl	13364 <flatcc_builder_reset@@Base>
   12784:	mov	r0, r4
   12788:	bl	12c90 <main@@Base+0x6f8>
   1278c:	mov	r0, r4
   12790:	bl	12cb4 <main@@Base+0x71c>
   12794:	mov	r0, r4
   12798:	bl	12cdc <main@@Base+0x744>
   1279c:	cmp	r0, #0
   127a0:	beq	127bc <main@@Base+0x224>
   127a4:	mov	r1, r0
   127a8:	mov	r0, r4
   127ac:	bl	12d44 <main@@Base+0x7ac>
   127b0:	mov	r0, r4
   127b4:	pop	{r4, sl, fp, lr}
   127b8:	b	12d6c <main@@Base+0x7d4>
   127bc:	movw	r0, #27552	; 0x6ba0
   127c0:	movt	r0, #1
   127c4:	movw	r1, #27413	; 0x6b15
   127c8:	movt	r1, #1
   127cc:	movw	r3, #27555	; 0x6ba3
   127d0:	movt	r3, #1
   127d4:	mov	r2, #56	; 0x38
   127d8:	bl	1249c <__assert_fail@plt>
   127dc:	nop	{0}
   127e0:	push	{fp, lr}
   127e4:	mov	fp, sp
   127e8:	sub	sp, sp, #8
   127ec:	mov	r0, sp
   127f0:	mov	r1, #0
   127f4:	bl	12418 <gettimeofday@plt>
   127f8:	movw	r0, #37976	; 0x9458
   127fc:	movt	r0, #2
   12800:	ldr	r1, [r0]
   12804:	cmp	r1, #0
   12808:	ldmeq	sp, {r2, r3}
   1280c:	strdeq	r2, [r0]
   12810:	ldrd	r0, [r0]
   12814:	ldm	sp, {r2, r3}
   12818:	vldr	d16, [pc, #40]	; 12848 <main@@Base+0x2b0>
   1281c:	sub	r0, r2, r0
   12820:	sub	r1, r3, r1
   12824:	vmov	s0, r1
   12828:	vcvt.f64.s32	d17, s0
   1282c:	vmov	s0, r0
   12830:	vcvt.f64.s32	d18, s0
   12834:	vdiv.f64	d16, d17, d16
   12838:	vadd.f64	d0, d16, d18
   1283c:	mov	sp, fp
   12840:	pop	{fp, pc}
   12844:	nop	{0}
   12848:	andeq	r0, r0, r0
   1284c:	smlawbmi	lr, r0, r4, r8
   12850:	push	{r4, r5, fp, lr}
   12854:	add	fp, sp, #8
   12858:	mov	r5, #0
   1285c:	cmp	r0, #0
   12860:	beq	12880 <main@@Base+0x2e8>
   12864:	mov	r4, r0
   12868:	bl	12f40 <main@@Base+0x9a8>
   1286c:	cmp	r0, #0
   12870:	beq	12880 <main@@Base+0x2e8>
   12874:	mov	r0, r4
   12878:	bl	12f68 <main@@Base+0x9d0>
   1287c:	add	r5, r4, r0
   12880:	mov	r0, r5
   12884:	pop	{r4, r5, fp, pc}
   12888:	push	{r4, r5, fp, lr}
   1288c:	add	fp, sp, #8
   12890:	cmp	r0, #0
   12894:	beq	128e8 <main@@Base+0x350>
   12898:	mov	r4, r0
   1289c:	bl	12f80 <main@@Base+0x9e8>
   128a0:	sub	r5, r4, r0
   128a4:	mov	r0, r5
   128a8:	bl	12f88 <main@@Base+0x9f0>
   128ac:	cmp	r0, #12
   128b0:	bcc	128dc <main@@Base+0x344>
   128b4:	add	r0, r5, #10
   128b8:	bl	12f88 <main@@Base+0x9f0>
   128bc:	cmp	r0, #0
   128c0:	beq	128dc <main@@Base+0x344>
   128c4:	add	r4, r4, r0
   128c8:	mov	r0, r4
   128cc:	bl	12f68 <main@@Base+0x9d0>
   128d0:	add	r0, r4, r0
   128d4:	add	r0, r0, #4
   128d8:	pop	{r4, r5, fp, pc}
   128dc:	movw	r0, #28236	; 0x6e4c
   128e0:	movt	r0, #1
   128e4:	b	128f0 <main@@Base+0x358>
   128e8:	movw	r0, #28022	; 0x6d76
   128ec:	movt	r0, #1
   128f0:	movw	r1, #28060	; 0x6d9c
   128f4:	movt	r1, #1
   128f8:	movw	r3, #28155	; 0x6dfb
   128fc:	movt	r3, #1
   12900:	movw	r2, #699	; 0x2bb
   12904:	bl	1249c <__assert_fail@plt>
   12908:	push	{r4, r5, r6, sl, fp, lr}
   1290c:	add	fp, sp, #16
   12910:	cmp	r0, #0
   12914:	beq	12964 <main@@Base+0x3cc>
   12918:	mov	r4, r0
   1291c:	bl	12f80 <main@@Base+0x9e8>
   12920:	sub	r6, r4, r0
   12924:	mov	r0, r6
   12928:	bl	12f88 <main@@Base+0x9f0>
   1292c:	mov	r5, #0
   12930:	cmp	r0, #28
   12934:	bcc	1295c <main@@Base+0x3c4>
   12938:	add	r0, r6, #26
   1293c:	bl	12f88 <main@@Base+0x9f0>
   12940:	cmp	r0, #0
   12944:	beq	1295c <main@@Base+0x3c4>
   12948:	add	r4, r4, r0
   1294c:	mov	r0, r4
   12950:	bl	12f68 <main@@Base+0x9d0>
   12954:	add	r0, r4, r0
   12958:	add	r5, r0, #4
   1295c:	mov	r0, r5
   12960:	pop	{r4, r5, r6, sl, fp, pc}
   12964:	movw	r0, #28022	; 0x6d76
   12968:	movt	r0, #1
   1296c:	movw	r1, #28060	; 0x6d9c
   12970:	movt	r1, #1
   12974:	movw	r3, #28269	; 0x6e6d
   12978:	movt	r3, #1
   1297c:	movw	r2, #711	; 0x2c7
   12980:	bl	1249c <__assert_fail@plt>
   12984:	cmp	r0, #0
   12988:	moveq	r0, #0
   1298c:	bxeq	lr
   12990:	sub	r0, r0, #4
   12994:	b	12f68 <main@@Base+0x9d0>
   12998:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1299c:	add	fp, sp, #24
   129a0:	mov	r4, r1
   129a4:	mov	r8, r0
   129a8:	mov	r0, r1
   129ac:	bl	12888 <main@@Base+0x2f0>
   129b0:	mov	r9, r0
   129b4:	mov	r0, r4
   129b8:	bl	12f98 <main@@Base+0xa00>
   129bc:	mov	r4, r0
   129c0:	mov	r0, r9
   129c4:	bl	13014 <main@@Base+0xa7c>
   129c8:	cmp	r0, #700	; 0x2bc
   129cc:	bne	12abc <main@@Base+0x524>
   129d0:	mov	r0, r4
   129d4:	bl	13028 <main@@Base+0xa90>
   129d8:	movw	r1, #34464	; 0x86a0
   129dc:	movt	r1, #1
   129e0:	cmp	r0, r1
   129e4:	bne	12adc <main@@Base+0x544>
   129e8:	mov	r5, #0
   129ec:	movw	r6, #27675	; 0x6c1b
   129f0:	movt	r6, #1
   129f4:	mov	r7, r9
   129f8:	mov	r0, r7
   129fc:	mov	r1, r6
   12a00:	mov	r2, #7
   12a04:	bl	12400 <memcmp@plt>
   12a08:	cmp	r0, #0
   12a0c:	bne	12a78 <main@@Base+0x4e0>
   12a10:	add	r7, r7, #7
   12a14:	add	r5, r5, #1
   12a18:	cmp	r5, #100	; 0x64
   12a1c:	bcc	129f8 <main@@Base+0x460>
   12a20:	mov	r6, #0
   12a24:	movw	r5, #36976	; 0x9070
   12a28:	movt	r5, #2
   12a2c:	b	12a40 <main@@Base+0x4a8>
   12a30:	add	r6, r6, #1
   12a34:	add	r4, r4, #1000	; 0x3e8
   12a38:	cmp	r6, #99	; 0x63
   12a3c:	pophi	{r4, r5, r6, r7, r8, r9, fp, pc}
   12a40:	mov	r0, r4
   12a44:	mov	r1, r5
   12a48:	mov	r2, #1000	; 0x3e8
   12a4c:	bl	12400 <memcmp@plt>
   12a50:	cmp	r0, #0
   12a54:	beq	12a30 <main@@Base+0x498>
   12a58:	movw	r0, #34072	; 0x8518
   12a5c:	movt	r0, #1
   12a60:	movw	r1, #27413	; 0x6b15
   12a64:	movt	r1, #1
   12a68:	movw	r3, #28371	; 0x6ed3
   12a6c:	movt	r3, #1
   12a70:	mov	r2, #91	; 0x5b
   12a74:	bl	1249c <__assert_fail@plt>
   12a78:	movw	r0, #28436	; 0x6f14
   12a7c:	movt	r0, #1
   12a80:	mov	r1, r5
   12a84:	mov	r2, r9
   12a88:	bl	123c4 <printf@plt>
   12a8c:	sub	r1, r7, r8
   12a90:	movw	r0, #28468	; 0x6f34
   12a94:	movt	r0, #1
   12a98:	bl	123c4 <printf@plt>
   12a9c:	movw	r0, #34072	; 0x8518
   12aa0:	movt	r0, #1
   12aa4:	movw	r1, #27413	; 0x6b15
   12aa8:	movt	r1, #1
   12aac:	movw	r3, #28371	; 0x6ed3
   12ab0:	movt	r3, #1
   12ab4:	mov	r2, #85	; 0x55
   12ab8:	bl	1249c <__assert_fail@plt>
   12abc:	movw	r0, #34072	; 0x8518
   12ac0:	movt	r0, #1
   12ac4:	movw	r1, #27413	; 0x6b15
   12ac8:	movt	r1, #1
   12acc:	movw	r3, #28371	; 0x6ed3
   12ad0:	movt	r3, #1
   12ad4:	mov	r2, #74	; 0x4a
   12ad8:	bl	1249c <__assert_fail@plt>
   12adc:	movw	r0, #34072	; 0x8518
   12ae0:	movt	r0, #1
   12ae4:	movw	r1, #27413	; 0x6b15
   12ae8:	movt	r1, #1
   12aec:	movw	r3, #28371	; 0x6ed3
   12af0:	movt	r3, #1
   12af4:	mov	r2, #78	; 0x4e
   12af8:	bl	1249c <__assert_fail@plt>
   12afc:	push	{r4, r5, fp, lr}
   12b00:	add	fp, sp, #8
   12b04:	mov	r4, r1
   12b08:	mov	r5, r0
   12b0c:	bl	1302c <main@@Base+0xa94>
   12b10:	cmp	r0, r4
   12b14:	bls	12b2c <main@@Base+0x594>
   12b18:	add	r4, r5, r4, lsl #2
   12b1c:	mov	r0, r4
   12b20:	bl	12f68 <main@@Base+0x9d0>
   12b24:	add	r0, r4, r0
   12b28:	pop	{r4, r5, fp, pc}
   12b2c:	movw	r0, #28570	; 0x6f9a
   12b30:	movt	r0, #1
   12b34:	movw	r1, #28060	; 0x6d9c
   12b38:	movt	r1, #1
   12b3c:	movw	r3, #28625	; 0x6fd1
   12b40:	movt	r3, #1
   12b44:	movw	r2, #693	; 0x2b5
   12b48:	bl	1249c <__assert_fail@plt>
   12b4c:	nop	{0}
   12b50:	push	{r4, sl, fp, lr}
   12b54:	add	fp, sp, #8
   12b58:	vpush	{d8-d10}
   12b5c:	mov	r4, r0
   12b60:	vmov.f64	d8, d1
   12b64:	vmov.f64	d9, d0
   12b68:	movw	r0, #28724	; 0x7034
   12b6c:	movt	r0, #1
   12b70:	movw	r1, #27511	; 0x6b77
   12b74:	movt	r1, #1
   12b78:	bl	123c4 <printf@plt>
   12b7c:	vsub.f64	d9, d8, d9
   12b80:	vmov	r2, r3, d9
   12b84:	movw	r0, #28739	; 0x7043
   12b88:	movt	r0, #1
   12b8c:	bl	123c4 <printf@plt>
   12b90:	movw	r0, #28763	; 0x705b
   12b94:	movt	r0, #1
   12b98:	mov	r1, #10
   12b9c:	bl	123c4 <printf@plt>
   12ba0:	movw	r0, #28779	; 0x706b
   12ba4:	movt	r0, #1
   12ba8:	mov	r1, r4
   12bac:	bl	123c4 <printf@plt>
   12bb0:	vldr	d8, [pc, #192]	; 12c78 <main@@Base+0x6e0>
   12bb4:	vmov.f64	d10, #36	; 0x41200000  10.0
   12bb8:	vmov	s0, r4
   12bbc:	vcvt.f64.u32	d16, s0
   12bc0:	vmul.f64	d16, d16, d10
   12bc4:	vdiv.f64	d16, d16, d8
   12bc8:	vdiv.f64	d16, d16, d9
   12bcc:	vmov	r2, r3, d16
   12bd0:	movw	r0, #28798	; 0x707e
   12bd4:	movt	r0, #1
   12bd8:	bl	123c4 <printf@plt>
   12bdc:	vdiv.f64	d16, d10, d9
   12be0:	vmov	r2, r3, d16
   12be4:	movw	r0, #28822	; 0x7096
   12be8:	movt	r0, #1
   12bec:	bl	123c4 <printf@plt>
   12bf0:	vldr	d17, [pc, #136]	; 12c80 <main@@Base+0x6e8>
   12bf4:	vmul.f64	d16, d9, d17
   12bf8:	vldr	d18, [pc, #136]	; 12c88 <main@@Base+0x6f0>
   12bfc:	vdiv.f64	d16, d16, d10
   12c00:	vcmpe.f64	d16, d18
   12c04:	vmrs	APSR_nzcv, fpscr
   12c08:	bpl	12c1c <main@@Base+0x684>
   12c0c:	vmov	r2, r3, d16
   12c10:	movw	r0, #28855	; 0x70b7
   12c14:	movt	r0, #1
   12c18:	b	12c6c <main@@Base+0x6d4>
   12c1c:	vcmpe.f64	d16, d8
   12c20:	vmrs	APSR_nzcv, fpscr
   12c24:	bpl	12c3c <main@@Base+0x6a4>
   12c28:	vdiv.f64	d16, d16, d18
   12c2c:	vmov	r2, r3, d16
   12c30:	movw	r0, #28879	; 0x70cf
   12c34:	movt	r0, #1
   12c38:	b	12c6c <main@@Base+0x6d4>
   12c3c:	vcmpe.f64	d16, d17
   12c40:	vmrs	APSR_nzcv, fpscr
   12c44:	bpl	12c5c <main@@Base+0x6c4>
   12c48:	vdiv.f64	d16, d16, d8
   12c4c:	vmov	r2, r3, d16
   12c50:	movw	r0, #28903	; 0x70e7
   12c54:	movt	r0, #1
   12c58:	b	12c6c <main@@Base+0x6d4>
   12c5c:	vdiv.f64	d16, d16, d17
   12c60:	vmov	r2, r3, d16
   12c64:	movw	r0, #28927	; 0x70ff
   12c68:	movt	r0, #1
   12c6c:	vpop	{d8-d10}
   12c70:	pop	{r4, sl, fp, lr}
   12c74:	b	123c4 <printf@plt>
   12c78:	andeq	r0, r0, r0
   12c7c:	smlawbmi	lr, r0, r4, r8
   12c80:	andeq	r0, r0, r0
   12c84:	bicmi	ip, sp, r5, ror #26
   12c88:	andeq	r0, r0, r0
   12c8c:	addmi	r4, pc, r0
   12c90:	push	{r4, sl, fp, lr}
   12c94:	add	fp, sp, #8
   12c98:	mov	r4, r0
   12c9c:	bl	12d8c <main@@Base+0x7f4>
   12ca0:	cmp	r0, #0
   12ca4:	popne	{r4, sl, fp, pc}
   12ca8:	mov	r0, r4
   12cac:	pop	{r4, sl, fp, lr}
   12cb0:	b	12da0 <main@@Base+0x808>
   12cb4:	push	{r4, sl, fp, lr}
   12cb8:	add	fp, sp, #8
   12cbc:	mov	r4, r0
   12cc0:	movw	r1, #27391	; 0x6aff
   12cc4:	movt	r1, #1
   12cc8:	bl	15d04 <flatcc_builder_create_string_str@@Base>
   12ccc:	mov	r1, r0
   12cd0:	mov	r0, r4
   12cd4:	pop	{r4, sl, fp, lr}
   12cd8:	b	12da8 <main@@Base+0x810>
   12cdc:	push	{r4, r5, fp, lr}
   12ce0:	add	fp, sp, #8
   12ce4:	mov	r4, r0
   12ce8:	bl	12dd0 <main@@Base+0x838>
   12cec:	mov	r5, #0
   12cf0:	mov	r0, r4
   12cf4:	bl	12dd4 <main@@Base+0x83c>
   12cf8:	cmp	r0, #0
   12cfc:	beq	12d24 <main@@Base+0x78c>
   12d00:	mov	r1, r0
   12d04:	mov	r0, r4
   12d08:	bl	12e38 <main@@Base+0x8a0>
   12d0c:	add	r5, r5, #1
   12d10:	cmp	r5, #1000	; 0x3e8
   12d14:	bcc	12cf0 <main@@Base+0x758>
   12d18:	mov	r0, r4
   12d1c:	pop	{r4, r5, fp, lr}
   12d20:	b	12e44 <main@@Base+0x8ac>
   12d24:	movw	r0, #27604	; 0x6bd4
   12d28:	movt	r0, #1
   12d2c:	movw	r1, #27413	; 0x6b15
   12d30:	movt	r1, #1
   12d34:	movw	r3, #27606	; 0x6bd6
   12d38:	movt	r3, #1
   12d3c:	mov	r2, #42	; 0x2a
   12d40:	bl	1249c <__assert_fail@plt>
   12d44:	push	{r4, sl, fp, lr}
   12d48:	add	fp, sp, #8
   12d4c:	cmp	r1, #0
   12d50:	popeq	{r4, sl, fp, pc}
   12d54:	mov	r4, r1
   12d58:	mov	r1, #11
   12d5c:	bl	15540 <flatcc_builder_table_add_offset@@Base>
   12d60:	cmp	r0, #0
   12d64:	strne	r4, [r0]
   12d68:	pop	{r4, sl, fp, pc}
   12d6c:	push	{r4, sl, fp, lr}
   12d70:	add	fp, sp, #8
   12d74:	mov	r4, r0
   12d78:	bl	12eb0 <main@@Base+0x918>
   12d7c:	mov	r1, r0
   12d80:	mov	r0, r4
   12d84:	pop	{r4, sl, fp, lr}
   12d88:	b	12f3c <main@@Base+0x9a4>
   12d8c:	movw	r1, #27599	; 0x6bcf
   12d90:	movt	r1, #1
   12d94:	mov	r2, #0
   12d98:	mov	r3, #0
   12d9c:	b	13b08 <flatcc_builder_start_buffer@@Base>
   12da0:	mov	r1, #36	; 0x24
   12da4:	b	147f0 <flatcc_builder_start_table@@Base>
   12da8:	push	{r4, sl, fp, lr}
   12dac:	add	fp, sp, #8
   12db0:	cmp	r1, #0
   12db4:	popeq	{r4, sl, fp, pc}
   12db8:	mov	r4, r1
   12dbc:	mov	r1, #3
   12dc0:	bl	15540 <flatcc_builder_table_add_offset@@Base>
   12dc4:	cmp	r0, #0
   12dc8:	strne	r4, [r0]
   12dcc:	pop	{r4, sl, fp, pc}
   12dd0:	b	145ac <flatcc_builder_start_offset_vector@@Base>
   12dd4:	push	{r4, r5, fp, lr}
   12dd8:	add	fp, sp, #8
   12ddc:	mov	r4, r0
   12de0:	bl	12da0 <main@@Base+0x808>
   12de4:	mov	r0, r4
   12de8:	bl	12e48 <main@@Base+0x8b0>
   12dec:	mov	r5, #100	; 0x64
   12df0:	mov	r0, r4
   12df4:	bl	12e4c <main@@Base+0x8b4>
   12df8:	subs	r5, r5, #1
   12dfc:	bne	12df0 <main@@Base+0x858>
   12e00:	mov	r0, r4
   12e04:	bl	12e5c <main@@Base+0x8c4>
   12e08:	mov	r0, r4
   12e0c:	bl	12e7c <main@@Base+0x8e4>
   12e10:	mov	r5, #100	; 0x64
   12e14:	mov	r0, r4
   12e18:	bl	12e80 <main@@Base+0x8e8>
   12e1c:	subs	r5, r5, #1
   12e20:	bne	12e14 <main@@Base+0x87c>
   12e24:	mov	r0, r4
   12e28:	bl	12e90 <main@@Base+0x8f8>
   12e2c:	mov	r0, r4
   12e30:	pop	{r4, r5, fp, lr}
   12e34:	b	12eb0 <main@@Base+0x918>
   12e38:	cmp	r1, #0
   12e3c:	bxeq	lr
   12e40:	b	14130 <flatcc_builder_offset_vector_push@@Base>
   12e44:	b	14660 <flatcc_builder_end_offset_vector@@Base>
   12e48:	b	146c4 <flatcc_builder_start_string@@Base>
   12e4c:	movw	r1, #27675	; 0x6c1b
   12e50:	movt	r1, #1
   12e54:	mov	r2, #7
   12e58:	b	14280 <flatcc_builder_append_string@@Base>
   12e5c:	push	{r4, sl, fp, lr}
   12e60:	add	fp, sp, #8
   12e64:	mov	r4, r0
   12e68:	bl	15d60 <flatcc_builder_end_string@@Base>
   12e6c:	mov	r1, r0
   12e70:	mov	r0, r4
   12e74:	pop	{r4, sl, fp, lr}
   12e78:	b	12da8 <main@@Base+0x810>
   12e7c:	b	12f00 <main@@Base+0x968>
   12e80:	movw	r1, #36976	; 0x9070
   12e84:	movt	r1, #2
   12e88:	mov	r2, #1000	; 0x3e8
   12e8c:	b	1407c <flatcc_builder_append_vector@@Base>
   12e90:	push	{r4, sl, fp, lr}
   12e94:	add	fp, sp, #8
   12e98:	mov	r4, r0
   12e9c:	bl	12f38 <main@@Base+0x9a0>
   12ea0:	mov	r1, r0
   12ea4:	mov	r0, r4
   12ea8:	pop	{r4, sl, fp, lr}
   12eac:	b	12f10 <main@@Base+0x978>
   12eb0:	push	{r4, sl, fp, lr}
   12eb4:	add	fp, sp, #8
   12eb8:	mov	r4, r0
   12ebc:	movw	r1, #28950	; 0x7116
   12ec0:	movt	r1, #1
   12ec4:	mov	r2, #1
   12ec8:	bl	14e80 <flatcc_builder_check_required@@Base>
   12ecc:	cmp	r0, #0
   12ed0:	beq	12ee0 <main@@Base+0x948>
   12ed4:	mov	r0, r4
   12ed8:	pop	{r4, sl, fp, lr}
   12edc:	b	14f10 <flatcc_builder_end_table@@Base>
   12ee0:	movw	r0, #27683	; 0x6c23
   12ee4:	movt	r0, #1
   12ee8:	movw	r1, #27845	; 0x6cc5
   12eec:	movt	r1, #1
   12ef0:	movw	r3, #27941	; 0x6d25
   12ef4:	movt	r3, #1
   12ef8:	mov	r2, #235	; 0xeb
   12efc:	bl	1249c <__assert_fail@plt>
   12f00:	mov	r1, #1
   12f04:	mov	r2, #1
   12f08:	mvn	r3, #0
   12f0c:	b	1451c <flatcc_builder_start_vector@@Base>
   12f10:	push	{r4, sl, fp, lr}
   12f14:	add	fp, sp, #8
   12f18:	cmp	r1, #0
   12f1c:	popeq	{r4, sl, fp, pc}
   12f20:	mov	r4, r1
   12f24:	mov	r1, #5
   12f28:	bl	15540 <flatcc_builder_table_add_offset@@Base>
   12f2c:	cmp	r0, #0
   12f30:	strne	r4, [r0]
   12f34:	pop	{r4, sl, fp, pc}
   12f38:	b	1516c <flatcc_builder_end_vector@@Base>
   12f3c:	b	13cbc <flatcc_builder_end_buffer@@Base>
   12f40:	push	{fp, lr}
   12f44:	mov	fp, sp
   12f48:	add	r0, r0, #4
   12f4c:	bl	12f70 <main@@Base+0x9d8>
   12f50:	movw	r1, #45235	; 0xb0b3
   12f54:	movt	r1, #44209	; 0xacb1
   12f58:	add	r0, r0, r1
   12f5c:	clz	r0, r0
   12f60:	lsr	r0, r0, #5
   12f64:	pop	{fp, pc}
   12f68:	ldr	r0, [r0]
   12f6c:	b	12f7c <main@@Base+0x9e4>
   12f70:	ldr	r0, [r0]
   12f74:	b	12f78 <main@@Base+0x9e0>
   12f78:	bx	lr
   12f7c:	bx	lr
   12f80:	ldr	r0, [r0]
   12f84:	b	12f90 <main@@Base+0x9f8>
   12f88:	ldrh	r0, [r0]
   12f8c:	b	12f94 <main@@Base+0x9fc>
   12f90:	bx	lr
   12f94:	bx	lr
   12f98:	push	{r4, r5, r6, sl, fp, lr}
   12f9c:	add	fp, sp, #16
   12fa0:	cmp	r0, #0
   12fa4:	beq	12ff4 <main@@Base+0xa5c>
   12fa8:	mov	r4, r0
   12fac:	bl	12f80 <main@@Base+0x9e8>
   12fb0:	sub	r6, r4, r0
   12fb4:	mov	r0, r6
   12fb8:	bl	12f88 <main@@Base+0x9f0>
   12fbc:	mov	r5, #0
   12fc0:	cmp	r0, #16
   12fc4:	bcc	12fec <main@@Base+0xa54>
   12fc8:	add	r0, r6, #14
   12fcc:	bl	12f88 <main@@Base+0x9f0>
   12fd0:	cmp	r0, #0
   12fd4:	beq	12fec <main@@Base+0xa54>
   12fd8:	add	r4, r4, r0
   12fdc:	mov	r0, r4
   12fe0:	bl	12f68 <main@@Base+0x9d0>
   12fe4:	add	r0, r4, r0
   12fe8:	add	r5, r0, #4
   12fec:	mov	r0, r5
   12ff0:	pop	{r4, r5, r6, sl, fp, pc}
   12ff4:	movw	r0, #28022	; 0x6d76
   12ff8:	movt	r0, #1
   12ffc:	movw	r1, #28060	; 0x6d9c
   13000:	movt	r1, #1
   13004:	movw	r3, #28481	; 0x6f41
   13008:	movt	r3, #1
   1300c:	movw	r2, #706	; 0x2c2
   13010:	bl	1249c <__assert_fail@plt>
   13014:	cmp	r0, #0
   13018:	moveq	r0, #0
   1301c:	bxeq	lr
   13020:	sub	r0, r0, #4
   13024:	b	12f68 <main@@Base+0x9d0>
   13028:	b	1302c <main@@Base+0xa94>
   1302c:	cmp	r0, #0
   13030:	moveq	r0, #0
   13034:	bxeq	lr
   13038:	sub	r0, r0, #4
   1303c:	b	12f68 <main@@Base+0x9d0>

00013040 <flatcc_builder_default_alloc@@Base>:
   13040:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13044:	add	fp, sp, #24
   13048:	mov	r4, r1
   1304c:	cmp	r2, #0
   13050:	beq	13098 <flatcc_builder_default_alloc@@Base+0x58>
   13054:	mov	r8, r3
   13058:	ldr	r0, [fp, #8]
   1305c:	sub	r1, r0, #1
   13060:	cmp	r1, #6
   13064:	bhi	130c4 <flatcc_builder_default_alloc@@Base+0x84>
   13068:	mov	r0, #256	; 0x100
   1306c:	add	r3, pc, #0
   13070:	ldr	pc, [r3, r1, lsl #2]
   13074:	ldrdeq	r3, [r1], -r8
   13078:	andeq	r3, r1, r4, asr #1
   1307c:	andeq	r3, r1, r4, asr #1
   13080:	muleq	r1, r0, r0
   13084:	andeq	r3, r1, ip, asr #1
   13088:	andeq	r3, r1, r4, asr #1
   1308c:	ldrdeq	r3, [r1], -r4
   13090:	mov	r0, #288	; 0x120
   13094:	b	130d8 <flatcc_builder_default_alloc@@Base+0x98>
   13098:	ldr	r0, [r4]
   1309c:	cmp	r0, #0
   130a0:	moveq	r6, #0
   130a4:	moveq	r0, r6
   130a8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   130ac:	bl	123dc <free@plt>
   130b0:	mov	r6, #0
   130b4:	str	r6, [r4]
   130b8:	str	r6, [r4, #4]
   130bc:	mov	r0, r6
   130c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130c4:	mov	r0, #32
   130c8:	b	130d8 <flatcc_builder_default_alloc@@Base+0x98>
   130cc:	mov	r0, r2
   130d0:	b	130d8 <flatcc_builder_default_alloc@@Base+0x98>
   130d4:	mov	r0, #64	; 0x40
   130d8:	mov	r7, r0
   130dc:	lsl	r0, r0, #1
   130e0:	cmp	r7, r2
   130e4:	bcc	130d8 <flatcc_builder_default_alloc@@Base+0x98>
   130e8:	ldr	r0, [r4, #4]
   130ec:	mov	r6, #0
   130f0:	cmp	r0, r2
   130f4:	lsrcs	r0, r0, #1
   130f8:	cmpcs	r0, r7
   130fc:	bcs	13134 <flatcc_builder_default_alloc@@Base+0xf4>
   13100:	ldr	r0, [r4]
   13104:	mov	r1, r7
   13108:	bl	1240c <realloc@plt>
   1310c:	cmp	r0, #0
   13110:	mvneq	r6, #0
   13114:	moveq	r0, r6
   13118:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1311c:	mov	r5, r0
   13120:	cmp	r8, #0
   13124:	ldrne	r1, [r4, #4]
   13128:	cmpne	r7, r1
   1312c:	bhi	1313c <flatcc_builder_default_alloc@@Base+0xfc>
   13130:	stm	r4, {r5, r7}
   13134:	mov	r0, r6
   13138:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1313c:	add	r0, r5, r1
   13140:	sub	r2, r7, r1
   13144:	mov	r1, #0
   13148:	bl	1246c <memset@plt>
   1314c:	b	13130 <flatcc_builder_default_alloc@@Base+0xf0>

00013150 <flatcc_builder_flush_vtable_cache@@Base>:
   13150:	push	{r4, r5, fp, lr}
   13154:	add	fp, sp, #8
   13158:	mov	r4, r0
   1315c:	ldr	r0, [r0, #116]	; 0x74
   13160:	cmp	r0, #0
   13164:	popeq	{r4, r5, fp, pc}
   13168:	ldr	r0, [r4, #92]	; 0x5c
   1316c:	ldr	r2, [r4, #96]	; 0x60
   13170:	mov	r5, #0
   13174:	mov	r1, #0
   13178:	bl	1246c <memset@plt>
   1317c:	mov	r0, #16
   13180:	str	r5, [r4, #120]	; 0x78
   13184:	str	r0, [r4, #124]	; 0x7c
   13188:	pop	{r4, r5, fp, pc}

0001318c <flatcc_builder_custom_init@@Base>:
   1318c:	push	{r4, r5, r6, r7, fp, lr}
   13190:	add	fp, sp, #16
   13194:	mov	r5, r3
   13198:	mov	r6, r2
   1319c:	mov	r7, r1
   131a0:	mov	r4, r0
   131a4:	mov	r1, #0
   131a8:	mov	r2, #232	; 0xe8
   131ac:	bl	1246c <memset@plt>
   131b0:	ldr	r0, [fp, #8]
   131b4:	cmp	r7, #0
   131b8:	bne	131d0 <flatcc_builder_custom_init@@Base+0x44>
   131bc:	mov	r1, #1
   131c0:	str	r1, [r4, #184]	; 0xb8
   131c4:	add	r6, r4, #188	; 0xbc
   131c8:	movw	r7, #25956	; 0x6564
   131cc:	movt	r7, #1
   131d0:	movw	r1, #12352	; 0x3040
   131d4:	movt	r1, #1
   131d8:	cmp	r5, #0
   131dc:	movne	r1, r5
   131e0:	str	r6, [r4, #36]	; 0x24
   131e4:	str	r0, [r4, #40]	; 0x28
   131e8:	str	r7, [r4, #44]	; 0x2c
   131ec:	str	r1, [r4, #48]	; 0x30
   131f0:	mov	r0, #0
   131f4:	pop	{r4, r5, r6, r7, fp, pc}

000131f8 <flatcc_builder_init@@Base>:
   131f8:	push	{fp, lr}
   131fc:	mov	fp, sp
   13200:	sub	sp, sp, #8
   13204:	mov	r1, #0
   13208:	str	r1, [sp]
   1320c:	mov	r1, #0
   13210:	mov	r2, #0
   13214:	mov	r3, #0
   13218:	bl	1318c <flatcc_builder_custom_init@@Base>
   1321c:	mov	r0, #0
   13220:	mov	sp, fp
   13224:	pop	{fp, pc}

00013228 <flatcc_builder_custom_reset@@Base>:
   13228:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1322c:	add	fp, sp, #24
   13230:	sub	sp, sp, #8
   13234:	mov	r9, r2
   13238:	mov	r8, r1
   1323c:	mov	r4, r0
   13240:	add	r7, r0, #52	; 0x34
   13244:	mov	r5, #0
   13248:	ldr	r0, [r7]
   1324c:	cmp	r0, #0
   13250:	beq	13294 <flatcc_builder_custom_reset@@Base+0x6c>
   13254:	cmp	r9, #0
   13258:	cmpne	r5, #5
   1325c:	beq	13284 <flatcc_builder_custom_reset@@Base+0x5c>
   13260:	ldr	r0, [r4, #40]	; 0x28
   13264:	ldr	r6, [r4, #48]	; 0x30
   13268:	str	r5, [sp]
   1326c:	mov	r1, r7
   13270:	mov	r2, #1
   13274:	mov	r3, #1
   13278:	blx	r6
   1327c:	cmp	r0, #0
   13280:	bne	13334 <flatcc_builder_custom_reset@@Base+0x10c>
   13284:	ldm	r7, {r0, r2}
   13288:	mov	r1, #0
   1328c:	bl	1246c <memset@plt>
   13290:	b	132a0 <flatcc_builder_custom_reset@@Base+0x78>
   13294:	ldr	r0, [r7, #4]
   13298:	cmp	r0, #0
   1329c:	bne	13344 <flatcc_builder_custom_reset@@Base+0x11c>
   132a0:	add	r7, r7, #8
   132a4:	add	r5, r5, #1
   132a8:	cmp	r5, #8
   132ac:	bcc	13248 <flatcc_builder_custom_reset@@Base+0x20>
   132b0:	mov	r0, #0
   132b4:	str	r0, [r4, #120]	; 0x78
   132b8:	ldr	r1, [r4, #124]	; 0x7c
   132bc:	cmp	r1, #0
   132c0:	movne	r1, #16
   132c4:	strne	r1, [r4, #124]	; 0x7c
   132c8:	vmov.i32	q8, #0	; 0x00000000
   132cc:	strh	r0, [r4, #128]	; 0x80
   132d0:	str	r0, [r4, #136]	; 0x88
   132d4:	str	r0, [r4, #140]	; 0x8c
   132d8:	str	r0, [r4, #32]
   132dc:	add	r1, r4, #148	; 0x94
   132e0:	vst1.32	{d16-d17}, [r1]
   132e4:	ldr	r1, [r4, #52]	; 0x34
   132e8:	ldr	r2, [r4, #60]	; 0x3c
   132ec:	ldr	r3, [r4, #76]	; 0x4c
   132f0:	str	r2, [r4, #16]
   132f4:	str	r0, [r4, #20]
   132f8:	str	r0, [r4, #24]
   132fc:	str	r3, [r4]
   13300:	str	r1, [r4, #4]
   13304:	cmp	r8, #0
   13308:	movne	r0, #0
   1330c:	strne	r0, [r4, #172]	; 0xac
   13310:	strne	r0, [r4, #176]	; 0xb0
   13314:	strne	r0, [r4, #180]	; 0xb4
   13318:	ldr	r0, [r4, #184]	; 0xb8
   1331c:	mov	r5, #0
   13320:	cmp	r0, #0
   13324:	beq	13338 <flatcc_builder_custom_reset@@Base+0x110>
   13328:	add	r0, r4, #188	; 0xbc
   1332c:	bl	16444 <flatcc_emitter_reset@@Base>
   13330:	b	13338 <flatcc_builder_custom_reset@@Base+0x110>
   13334:	mvn	r5, #0
   13338:	mov	r0, r5
   1333c:	sub	sp, fp, #24
   13340:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13344:	movw	r0, #29536	; 0x7360
   13348:	movt	r0, #1
   1334c:	movw	r1, #29554	; 0x7372
   13350:	movt	r1, #1
   13354:	movw	r3, #29624	; 0x73b8
   13358:	movt	r3, #1
   1335c:	movw	r2, #434	; 0x1b2
   13360:	bl	1249c <__assert_fail@plt>

00013364 <flatcc_builder_reset@@Base>:
   13364:	mov	r1, #0
   13368:	mov	r2, #0
   1336c:	b	13228 <flatcc_builder_custom_reset@@Base>

00013370 <flatcc_builder_clear@@Base>:
   13370:	push	{r4, r5, r6, r7, fp, lr}
   13374:	add	fp, sp, #16
   13378:	sub	sp, sp, #8
   1337c:	mov	r7, r0
   13380:	add	r5, r0, #52	; 0x34
   13384:	mov	r6, #0
   13388:	ldr	r0, [r7, #40]	; 0x28
   1338c:	ldr	r4, [r7, #48]	; 0x30
   13390:	str	r6, [sp]
   13394:	mov	r1, r5
   13398:	mov	r2, #0
   1339c:	mov	r3, #0
   133a0:	blx	r4
   133a4:	add	r5, r5, #8
   133a8:	add	r6, r6, #1
   133ac:	cmp	r6, #8
   133b0:	bne	13388 <flatcc_builder_clear@@Base+0x18>
   133b4:	ldr	r0, [r7, #184]	; 0xb8
   133b8:	cmp	r0, #0
   133bc:	beq	133c8 <flatcc_builder_clear@@Base+0x58>
   133c0:	add	r0, r7, #188	; 0xbc
   133c4:	bl	16500 <flatcc_emitter_clear@@Base>
   133c8:	mov	r0, r7
   133cc:	mov	r1, #0
   133d0:	mov	r2, #232	; 0xe8
   133d4:	sub	sp, fp, #16
   133d8:	pop	{r4, r5, r6, r7, fp, lr}
   133dc:	b	1246c <memset@plt>

000133e0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   133e0:	push	{r4, r5, r6, r7, fp, lr}
   133e4:	add	fp, sp, #16
   133e8:	sub	sp, sp, #8
   133ec:	mov	r4, r0
   133f0:	ldr	r2, [r0, #228]	; 0xe4
   133f4:	mov	r7, #0
   133f8:	str	r7, [sp]
   133fc:	add	r0, r1, #7
   13400:	bic	r5, r0, #3
   13404:	mov	r0, r4
   13408:	mov	r1, #7
   1340c:	mov	r3, r5
   13410:	bl	13458 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13414:	cmp	r0, #0
   13418:	beq	1344c <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   1341c:	mov	r6, r0
   13420:	mov	r1, #0
   13424:	mov	r2, r5
   13428:	bl	1246c <memset@plt>
   1342c:	ldr	r0, [r4, #224]	; 0xe0
   13430:	str	r0, [r6], #4
   13434:	ldr	r0, [r4, #228]	; 0xe4
   13438:	add	r1, r0, #4
   1343c:	add	r0, r0, r5
   13440:	str	r1, [r4, #224]	; 0xe0
   13444:	str	r0, [r4, #228]	; 0xe4
   13448:	mov	r7, r6
   1344c:	mov	r0, r7
   13450:	sub	sp, fp, #16
   13454:	pop	{r4, r5, r6, r7, fp, pc}
   13458:	push	{r4, r5, fp, lr}
   1345c:	add	fp, sp, #8
   13460:	sub	sp, sp, #8
   13464:	mov	r4, r2
   13468:	add	r2, r3, r2
   1346c:	add	r3, r0, r1, lsl #3
   13470:	add	r5, r3, #52	; 0x34
   13474:	ldr	r3, [r3, #56]	; 0x38
   13478:	cmp	r2, r3
   1347c:	bls	134a4 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13480:	ldr	r3, [fp, #8]
   13484:	ldr	ip, [r0, #40]	; 0x28
   13488:	ldr	lr, [r0, #48]	; 0x30
   1348c:	str	r1, [sp]
   13490:	mov	r0, ip
   13494:	mov	r1, r5
   13498:	blx	lr
   1349c:	cmp	r0, #0
   134a0:	bne	134b4 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   134a4:	ldr	r0, [r5]
   134a8:	add	r0, r0, r4
   134ac:	sub	sp, fp, #8
   134b0:	pop	{r4, r5, fp, pc}
   134b4:	movw	r0, #34072	; 0x8518
   134b8:	movt	r0, #1
   134bc:	movw	r1, #29554	; 0x7372
   134c0:	movt	r1, #1
   134c4:	movw	r3, #33618	; 0x8352
   134c8:	movt	r3, #1
   134cc:	mov	r2, #308	; 0x134
   134d0:	bl	1249c <__assert_fail@plt>

000134d4 <flatcc_builder_enter_user_frame@@Base>:
   134d4:	push	{r4, r5, r6, r7, fp, lr}
   134d8:	add	fp, sp, #16
   134dc:	sub	sp, sp, #8
   134e0:	mov	r4, r0
   134e4:	ldr	r2, [r0, #228]	; 0xe4
   134e8:	mov	r6, #0
   134ec:	str	r6, [sp]
   134f0:	add	r0, r1, #7
   134f4:	bic	r5, r0, #3
   134f8:	mov	r0, r4
   134fc:	mov	r1, #7
   13500:	mov	r3, r5
   13504:	bl	13458 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13508:	cmp	r0, #0
   1350c:	beq	1353c <flatcc_builder_enter_user_frame@@Base+0x68>
   13510:	mov	r7, r0
   13514:	mov	r1, #0
   13518:	mov	r2, r5
   1351c:	bl	1246c <memset@plt>
   13520:	ldr	r0, [r4, #224]	; 0xe0
   13524:	str	r0, [r7]
   13528:	ldr	r0, [r4, #228]	; 0xe4
   1352c:	add	r6, r0, #4
   13530:	add	r0, r0, r5
   13534:	str	r6, [r4, #224]	; 0xe0
   13538:	str	r0, [r4, #228]	; 0xe4
   1353c:	mov	r0, r6
   13540:	sub	sp, fp, #16
   13544:	pop	{r4, r5, r6, r7, fp, pc}

00013548 <flatcc_builder_exit_user_frame@@Base>:
   13548:	ldr	r1, [r0, #224]	; 0xe0
   1354c:	cmp	r1, #0
   13550:	subne	r2, r1, #4
   13554:	strne	r2, [r0, #228]	; 0xe4
   13558:	ldrne	r2, [r0, #108]	; 0x6c
   1355c:	addne	r1, r2, r1
   13560:	ldrne	r1, [r1, #-4]
   13564:	strne	r1, [r0, #224]	; 0xe0
   13568:	movne	r0, r1
   1356c:	bxne	lr
   13570:	push	{fp, lr}
   13574:	mov	fp, sp
   13578:	movw	r0, #29686	; 0x73f6
   1357c:	movt	r0, #1
   13580:	movw	r1, #29554	; 0x7372
   13584:	movt	r1, #1
   13588:	movw	r3, #29711	; 0x740f
   1358c:	movt	r3, #1
   13590:	movw	r2, #542	; 0x21e
   13594:	bl	1249c <__assert_fail@plt>

00013598 <flatcc_builder_exit_user_frame_at@@Base>:
   13598:	ldr	r2, [r0, #224]	; 0xe0
   1359c:	cmp	r2, r1
   135a0:	bcc	135ac <flatcc_builder_exit_user_frame_at@@Base+0x14>
   135a4:	str	r1, [r0, #224]	; 0xe0
   135a8:	b	13548 <flatcc_builder_exit_user_frame@@Base>
   135ac:	push	{fp, lr}
   135b0:	mov	fp, sp
   135b4:	movw	r0, #29769	; 0x7449
   135b8:	movt	r0, #1
   135bc:	movw	r1, #29554	; 0x7372
   135c0:	movt	r1, #1
   135c4:	movw	r3, #29800	; 0x7468
   135c8:	movt	r3, #1
   135cc:	movw	r2, #551	; 0x227
   135d0:	bl	1249c <__assert_fail@plt>

000135d4 <flatcc_builder_get_current_user_frame@@Base>:
   135d4:	ldr	r0, [r0, #224]	; 0xe0
   135d8:	bx	lr

000135dc <flatcc_builder_get_user_frame_ptr@@Base>:
   135dc:	ldr	r0, [r0, #108]	; 0x6c
   135e0:	add	r0, r0, r1
   135e4:	bx	lr

000135e8 <flatcc_builder_embed_buffer@@Base>:
   135e8:	push	{r4, r5, r6, r7, fp, lr}
   135ec:	add	fp, sp, #16
   135f0:	sub	sp, sp, #80	; 0x50
   135f4:	mov	r5, r3
   135f8:	mov	r6, r2
   135fc:	mov	r2, r1
   13600:	mov	r4, r0
   13604:	ldr	r0, [fp, #8]
   13608:	strh	r0, [fp, #-18]	; 0xffffffee
   1360c:	ldr	r3, [r4, #152]	; 0x98
   13610:	cmp	r3, #0
   13614:	movwne	r3, #1
   13618:	sub	r1, fp, #18
   1361c:	mov	r0, r4
   13620:	bl	136f4 <flatcc_builder_embed_buffer@@Base+0x10c>
   13624:	ldr	r0, [fp, #12]
   13628:	and	r0, r0, #2
   1362c:	add	r1, r5, r0, lsl #1
   13630:	ldrh	r2, [fp, #-18]	; 0xffffffee
   13634:	mov	r0, r4
   13638:	bl	137b0 <flatcc_builder_embed_buffer@@Base+0x1c8>
   1363c:	mov	r7, r0
   13640:	add	r0, r0, r5
   13644:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   13648:	mov	r1, #0
   1364c:	str	r1, [sp]
   13650:	str	r0, [fp, #-24]	; 0xffffffe8
   13654:	str	r1, [sp, #4]
   13658:	ldr	r0, [r4, #152]	; 0x98
   1365c:	cmp	r0, #0
   13660:	beq	13680 <flatcc_builder_embed_buffer@@Base+0x98>
   13664:	sub	r0, fp, #24
   13668:	str	r0, [sp, #8]
   1366c:	mov	r0, #4
   13670:	str	r0, [sp]
   13674:	str	r0, [sp, #12]
   13678:	mov	r0, #1
   1367c:	str	r0, [sp, #4]
   13680:	cmp	r5, #0
   13684:	beq	136ac <flatcc_builder_embed_buffer@@Base+0xc4>
   13688:	ldm	sp, {r0, r1}
   1368c:	add	r0, r0, r5
   13690:	str	r0, [sp]
   13694:	mov	r0, sp
   13698:	add	r0, r0, r1, lsl #3
   1369c:	str	r6, [r0, #8]
   136a0:	str	r5, [r0, #12]
   136a4:	add	r0, r1, #1
   136a8:	str	r0, [sp, #4]
   136ac:	cmp	r7, #0
   136b0:	beq	136e0 <flatcc_builder_embed_buffer@@Base+0xf8>
   136b4:	ldm	sp, {r0, r1}
   136b8:	add	r0, r0, r7
   136bc:	str	r0, [sp]
   136c0:	mov	r0, sp
   136c4:	add	r0, r0, r1, lsl #3
   136c8:	movw	r2, #29024	; 0x7160
   136cc:	movt	r2, #1
   136d0:	str	r2, [r0, #8]
   136d4:	str	r7, [r0, #12]
   136d8:	add	r0, r1, #1
   136dc:	str	r0, [sp, #4]
   136e0:	mov	r1, sp
   136e4:	mov	r0, r4
   136e8:	bl	137c8 <flatcc_builder_embed_buffer@@Base+0x1e0>
   136ec:	sub	sp, fp, #16
   136f0:	pop	{r4, r5, r6, r7, fp, pc}
   136f4:	push	{r4, r5, r6, r7, fp, lr}
   136f8:	add	fp, sp, #16
   136fc:	sub	sp, sp, #72	; 0x48
   13700:	mov	r6, r3
   13704:	mov	r5, r2
   13708:	mov	r7, r1
   1370c:	mov	r4, r0
   13710:	cmp	r2, #0
   13714:	bne	13724 <flatcc_builder_embed_buffer@@Base+0x13c>
   13718:	ldrh	r5, [r4, #132]	; 0x84
   1371c:	cmp	r5, #0
   13720:	movweq	r5, #1
   13724:	mov	r0, r7
   13728:	mov	r1, #4
   1372c:	bl	1459c <flatcc_builder_start_vector@@Base+0x80>
   13730:	mov	r0, r7
   13734:	mov	r1, r5
   13738:	bl	1459c <flatcc_builder_start_vector@@Base+0x80>
   1373c:	cmp	r6, #0
   13740:	bne	13788 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13744:	mov	r0, r4
   13748:	mov	r1, r5
   1374c:	bl	16298 <flatcc_builder_get_emit_context@@Base+0x8>
   13750:	cmp	r0, #0
   13754:	beq	13788 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13758:	movw	r1, #29024	; 0x7160
   1375c:	movt	r1, #1
   13760:	str	r1, [sp, #8]
   13764:	str	r0, [sp]
   13768:	str	r0, [sp, #12]
   1376c:	mov	r0, #1
   13770:	str	r0, [sp, #4]
   13774:	mov	r1, sp
   13778:	mov	r0, r4
   1377c:	bl	14928 <flatcc_builder_create_vtable@@Base+0x80>
   13780:	cmp	r0, #0
   13784:	beq	13790 <flatcc_builder_embed_buffer@@Base+0x1a8>
   13788:	sub	sp, fp, #16
   1378c:	pop	{r4, r5, r6, r7, fp, pc}
   13790:	movw	r0, #34072	; 0x8518
   13794:	movt	r0, #1
   13798:	movw	r1, #29554	; 0x7372
   1379c:	movt	r1, #1
   137a0:	movw	r3, #33685	; 0x8395
   137a4:	movt	r3, #1
   137a8:	movw	r2, #702	; 0x2be
   137ac:	bl	1249c <__assert_fail@plt>
   137b0:	ldr	r0, [r0, #136]	; 0x88
   137b4:	sub	r0, r0, r1
   137b8:	sub	r1, r2, #1
   137bc:	and	r0, r0, r1
   137c0:	bx	lr
   137c4:	bx	lr
   137c8:	push	{r4, r5, fp, lr}
   137cc:	add	fp, sp, #8
   137d0:	sub	sp, sp, #8
   137d4:	ldr	r3, [r1]
   137d8:	cmp	r3, #0
   137dc:	ble	1383c <flatcc_builder_embed_buffer@@Base+0x254>
   137e0:	mov	r4, r0
   137e4:	ldr	r0, [r0, #136]	; 0x88
   137e8:	sub	r5, r0, r3
   137ec:	ldr	r2, [r1, #4]
   137f0:	ldr	r0, [r4, #36]	; 0x24
   137f4:	ldr	ip, [r4, #44]	; 0x2c
   137f8:	str	r3, [sp]
   137fc:	add	r1, r1, #8
   13800:	mov	r3, r5
   13804:	blx	ip
   13808:	cmp	r0, #0
   1380c:	streq	r5, [r4, #136]	; 0x88
   13810:	moveq	r0, r5
   13814:	subeq	sp, fp, #8
   13818:	popeq	{r4, r5, fp, pc}
   1381c:	movw	r0, #34072	; 0x8518
   13820:	movt	r0, #1
   13824:	movw	r1, #29554	; 0x7372
   13828:	movt	r1, #1
   1382c:	movw	r3, #33751	; 0x83d7
   13830:	movt	r3, #1
   13834:	movw	r2, #651	; 0x28b
   13838:	bl	1249c <__assert_fail@plt>
   1383c:	movw	r0, #34072	; 0x8518
   13840:	movt	r0, #1
   13844:	movw	r1, #29554	; 0x7372
   13848:	movt	r1, #1
   1384c:	movw	r3, #33751	; 0x83d7
   13850:	movt	r3, #1
   13854:	movw	r2, #647	; 0x287
   13858:	bl	1249c <__assert_fail@plt>

0001385c <flatcc_builder_create_buffer@@Base>:
   1385c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13860:	add	fp, sp, #28
   13864:	sub	sp, sp, #92	; 0x5c
   13868:	mov	r6, r3
   1386c:	mov	r7, r1
   13870:	mov	r4, r0
   13874:	ldr	r0, [fp, #8]
   13878:	strh	r0, [fp, #-30]	; 0xffffffe2
   1387c:	mov	r0, #0
   13880:	str	r0, [sp, #4]
   13884:	ldr	sl, [fp, #12]
   13888:	and	r9, sl, #1
   1388c:	sub	r1, fp, #30
   13890:	mov	r0, r4
   13894:	mov	r3, r9
   13898:	bl	136f4 <flatcc_builder_embed_buffer@@Base+0x10c>
   1389c:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   138a0:	mov	r0, r4
   138a4:	mov	r1, r5
   138a8:	bl	13a2c <flatcc_builder_create_buffer@@Base+0x1d0>
   138ac:	cmp	r7, #0
   138b0:	str	r6, [sp]
   138b4:	beq	138d0 <flatcc_builder_create_buffer@@Base+0x74>
   138b8:	ldr	r7, [r7]
   138bc:	mov	r0, r7
   138c0:	bl	13a3c <flatcc_builder_create_buffer@@Base+0x1e0>
   138c4:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   138c8:	str	r7, [sp, #4]
   138cc:	b	138d4 <flatcc_builder_create_buffer@@Base+0x78>
   138d0:	ldr	r7, [sp, #4]
   138d4:	mov	r8, #4
   138d8:	and	r0, r8, sl, lsl #1
   138dc:	cmp	r7, #0
   138e0:	mov	r6, r7
   138e4:	movwne	r6, #1
   138e8:	add	r0, r0, r6, lsl #2
   138ec:	add	r1, r0, #4
   138f0:	mov	r0, r4
   138f4:	mov	r2, r5
   138f8:	bl	137b0 <flatcc_builder_embed_buffer@@Base+0x1c8>
   138fc:	mov	r1, #0
   13900:	str	r1, [sp, #8]
   13904:	str	r1, [sp, #12]
   13908:	ands	ip, sl, #3
   1390c:	beq	13928 <flatcc_builder_create_buffer@@Base+0xcc>
   13910:	sub	r1, fp, #40	; 0x28
   13914:	str	r1, [sp, #16]
   13918:	str	r8, [sp, #8]
   1391c:	str	r8, [sp, #20]
   13920:	mov	r1, #1
   13924:	str	r1, [sp, #12]
   13928:	ldr	r1, [sp, #8]
   1392c:	ldr	r3, [sp, #12]
   13930:	add	r5, r1, #4
   13934:	str	r5, [sp, #8]
   13938:	add	lr, sp, #8
   1393c:	add	r1, lr, r3, lsl #3
   13940:	sub	r2, fp, #36	; 0x24
   13944:	str	r2, [r1, #8]
   13948:	str	r8, [r1, #12]
   1394c:	add	r1, r3, #1
   13950:	str	r1, [sp, #12]
   13954:	cmp	r7, #0
   13958:	beq	13980 <flatcc_builder_create_buffer@@Base+0x124>
   1395c:	lsl	r2, r6, #2
   13960:	add	r5, r5, r2
   13964:	str	r5, [sp, #8]
   13968:	add	r1, lr, r1, lsl #3
   1396c:	add	r5, sp, #4
   13970:	str	r5, [r1, #8]
   13974:	str	r2, [r1, #12]
   13978:	add	r1, r3, #2
   1397c:	str	r1, [sp, #12]
   13980:	cmp	r0, #0
   13984:	beq	139b4 <flatcc_builder_create_buffer@@Base+0x158>
   13988:	ldr	r1, [sp, #8]
   1398c:	ldr	r2, [sp, #12]
   13990:	add	r1, r1, r0
   13994:	str	r1, [sp, #8]
   13998:	add	r1, lr, r2, lsl #3
   1399c:	movw	r3, #29024	; 0x7160
   139a0:	movt	r3, #1
   139a4:	str	r3, [r1, #8]
   139a8:	str	r0, [r1, #12]
   139ac:	add	r0, r2, #1
   139b0:	str	r0, [sp, #12]
   139b4:	ldr	r0, [r4, #136]	; 0x88
   139b8:	ldr	r1, [sp, #8]
   139bc:	sub	r5, r0, r1
   139c0:	cmp	ip, #0
   139c4:	addne	r5, r5, #4
   139c8:	mov	r0, #144	; 0x90
   139cc:	cmp	r9, #0
   139d0:	movweq	r0, #140	; 0x8c
   139d4:	ldr	r0, [r4, r0]
   139d8:	sub	r0, r0, r5
   139dc:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   139e0:	str	r0, [fp, #-40]	; 0xffffffd8
   139e4:	ldr	r0, [sp]
   139e8:	sub	r0, r0, r5
   139ec:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   139f0:	str	r0, [fp, #-36]	; 0xffffffdc
   139f4:	add	r1, sp, #8
   139f8:	mov	r0, r4
   139fc:	bl	137c8 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13a00:	cmp	r0, #0
   13a04:	subne	sp, fp, #28
   13a08:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a0c:	movw	r0, #34072	; 0x8518
   13a10:	movt	r0, #1
   13a14:	movw	r1, #29554	; 0x7372
   13a18:	movt	r1, #1
   13a1c:	movw	r3, #29869	; 0x74ad
   13a20:	movt	r3, #1
   13a24:	mov	r2, #772	; 0x304
   13a28:	bl	1249c <__assert_fail@plt>
   13a2c:	ldrh	r2, [r0, #128]	; 0x80
   13a30:	cmp	r2, r1
   13a34:	strhcc	r1, [r0, #128]	; 0x80
   13a38:	bx	lr
   13a3c:	bx	lr

00013a40 <flatcc_builder_create_struct@@Base>:
   13a40:	push	{r4, r5, r6, r7, fp, lr}
   13a44:	add	fp, sp, #16
   13a48:	sub	sp, sp, #72	; 0x48
   13a4c:	cmp	r3, #0
   13a50:	beq	13ae8 <flatcc_builder_create_struct@@Base+0xa8>
   13a54:	mov	r7, r3
   13a58:	mov	r5, r2
   13a5c:	mov	r6, r1
   13a60:	mov	r4, r0
   13a64:	mov	r1, r3
   13a68:	bl	13a2c <flatcc_builder_create_buffer@@Base+0x1d0>
   13a6c:	mov	r0, r4
   13a70:	mov	r1, r5
   13a74:	mov	r2, r7
   13a78:	bl	137b0 <flatcc_builder_embed_buffer@@Base+0x1c8>
   13a7c:	mov	r1, #0
   13a80:	str	r1, [sp]
   13a84:	str	r1, [sp, #4]
   13a88:	cmp	r5, #0
   13a8c:	strne	r6, [sp, #8]
   13a90:	strne	r5, [sp]
   13a94:	strne	r5, [sp, #12]
   13a98:	movne	r1, #1
   13a9c:	strne	r1, [sp, #4]
   13aa0:	cmp	r0, #0
   13aa4:	beq	13ad4 <flatcc_builder_create_struct@@Base+0x94>
   13aa8:	ldm	sp, {r1, r2}
   13aac:	add	r1, r1, r0
   13ab0:	str	r1, [sp]
   13ab4:	mov	r1, sp
   13ab8:	add	r1, r1, r2, lsl #3
   13abc:	movw	r3, #29024	; 0x7160
   13ac0:	movt	r3, #1
   13ac4:	str	r3, [r1, #8]
   13ac8:	str	r0, [r1, #12]
   13acc:	add	r0, r2, #1
   13ad0:	str	r0, [sp, #4]
   13ad4:	mov	r1, sp
   13ad8:	mov	r0, r4
   13adc:	bl	137c8 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13ae0:	sub	sp, fp, #16
   13ae4:	pop	{r4, r5, r6, r7, fp, pc}
   13ae8:	movw	r0, #30000	; 0x7530
   13aec:	movt	r0, #1
   13af0:	movw	r1, #29554	; 0x7372
   13af4:	movt	r1, #1
   13af8:	movw	r3, #30011	; 0x753b
   13afc:	movt	r3, #1
   13b00:	movw	r2, #783	; 0x30f
   13b04:	bl	1249c <__assert_fail@plt>

00013b08 <flatcc_builder_start_buffer@@Base>:
   13b08:	push	{r4, r5, r6, r7, fp, lr}
   13b0c:	add	fp, sp, #16
   13b10:	mov	r6, r3
   13b14:	mov	r7, r2
   13b18:	mov	r5, r1
   13b1c:	mov	r4, r0
   13b20:	ldrh	r1, [r0, #128]	; 0x80
   13b24:	bl	13bc4 <flatcc_builder_start_buffer@@Base+0xbc>
   13b28:	mov	r1, r0
   13b2c:	mvn	r0, #0
   13b30:	cmp	r1, #0
   13b34:	popne	{r4, r5, r6, r7, fp, pc}
   13b38:	mov	r0, #1
   13b3c:	strh	r0, [r4, #128]	; 0x80
   13b40:	ldrh	r1, [r4, #132]	; 0x84
   13b44:	ldr	r2, [r4, #32]
   13b48:	strh	r1, [r2, #34]	; 0x22
   13b4c:	strh	r7, [r4, #132]	; 0x84
   13b50:	ldrh	r1, [r4, #164]	; 0xa4
   13b54:	ldr	r2, [r4, #32]
   13b58:	strh	r1, [r2, #32]
   13b5c:	strh	r6, [r4, #164]	; 0xa4
   13b60:	ldr	r1, [r4, #32]
   13b64:	ldr	r2, [r4, #144]	; 0x90
   13b68:	str	r2, [r1, #20]
   13b6c:	ldr	r1, [r4, #32]
   13b70:	ldr	r2, [r4, #152]	; 0x98
   13b74:	str	r2, [r1, #28]
   13b78:	ldr	r1, [r4, #32]
   13b7c:	ldr	r2, [r4, #136]	; 0x88
   13b80:	ldr	r3, [r4, #148]	; 0x94
   13b84:	ldr	r7, [r4, #168]	; 0xa8
   13b88:	add	r6, r3, #1
   13b8c:	str	r2, [r4, #144]	; 0x90
   13b90:	str	r6, [r4, #148]	; 0x94
   13b94:	str	r3, [r4, #152]	; 0x98
   13b98:	str	r7, [r1, #16]
   13b9c:	movw	r1, #29024	; 0x7160
   13ba0:	movt	r1, #1
   13ba4:	cmp	r5, #0
   13ba8:	movne	r1, r5
   13bac:	ldr	r1, [r1]
   13bb0:	str	r1, [r4, #168]	; 0xa8
   13bb4:	ldr	r1, [r4, #32]
   13bb8:	strh	r0, [r1, #14]
   13bbc:	mov	r0, #0
   13bc0:	pop	{r4, r5, r6, r7, fp, pc}
   13bc4:	push	{r4, r5, r6, sl, fp, lr}
   13bc8:	add	fp, sp, #16
   13bcc:	sub	sp, sp, #8
   13bd0:	mov	r5, r1
   13bd4:	mov	r4, r0
   13bd8:	ldr	r1, [r0, #156]	; 0x9c
   13bdc:	ldr	r2, [r0, #160]	; 0xa0
   13be0:	add	r0, r1, #1
   13be4:	str	r0, [r4, #156]	; 0x9c
   13be8:	cmp	r1, r2
   13bec:	bge	13c00 <flatcc_builder_start_buffer@@Base+0xf8>
   13bf0:	ldr	r0, [r4, #32]
   13bf4:	add	r0, r0, #36	; 0x24
   13bf8:	str	r0, [r4, #32]
   13bfc:	b	13c74 <flatcc_builder_start_buffer@@Base+0x16c>
   13c00:	ldr	r2, [r4, #176]	; 0xb0
   13c04:	mvn	r6, #0
   13c08:	cmp	r2, #1
   13c0c:	cmpge	r1, r2
   13c10:	bge	13cb0 <flatcc_builder_start_buffer@@Base+0x1a8>
   13c14:	mov	r1, #0
   13c18:	str	r1, [sp]
   13c1c:	add	r0, r0, r0, lsl #3
   13c20:	mvn	r1, #35	; 0x23
   13c24:	add	r2, r1, r0, lsl #2
   13c28:	mov	r0, r4
   13c2c:	mov	r1, #4
   13c30:	mov	r3, #36	; 0x24
   13c34:	bl	13458 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13c38:	str	r0, [r4, #32]
   13c3c:	cmp	r0, #0
   13c40:	beq	13cb0 <flatcc_builder_start_buffer@@Base+0x1a8>
   13c44:	ldr	r0, [r4, #88]	; 0x58
   13c48:	ldr	r1, [r4, #176]	; 0xb0
   13c4c:	movw	r2, #36409	; 0x8e39
   13c50:	movt	r2, #14563	; 0x38e3
   13c54:	umull	r0, r2, r0, r2
   13c58:	lsr	r0, r2, #3
   13c5c:	cmp	r1, r2, lsr #3
   13c60:	mov	r2, r0
   13c64:	movlt	r2, r1
   13c68:	cmp	r1, #0
   13c6c:	movle	r2, r0
   13c70:	str	r2, [r4, #160]	; 0xa0
   13c74:	ldr	r0, [r4, #20]
   13c78:	ldr	r1, [r4, #32]
   13c7c:	str	r0, [r1, #8]
   13c80:	ldrh	r2, [r4, #130]	; 0x82
   13c84:	strh	r2, [r1, #12]
   13c88:	strh	r5, [r4, #130]	; 0x82
   13c8c:	ldr	r2, [r4, #28]
   13c90:	mvn	r3, #3
   13c94:	stm	r1, {r2, r3}
   13c98:	mov	r6, #0
   13c9c:	str	r6, [r4, #20]
   13ca0:	add	r0, r0, r2
   13ca4:	add	r0, r0, #7
   13ca8:	bic	r0, r0, #7
   13cac:	str	r0, [r4, #28]
   13cb0:	mov	r0, r6
   13cb4:	sub	sp, fp, #16
   13cb8:	pop	{r4, r5, r6, sl, fp, pc}

00013cbc <flatcc_builder_end_buffer@@Base>:
   13cbc:	push	{r4, r5, r6, r7, fp, lr}
   13cc0:	add	fp, sp, #16
   13cc4:	sub	sp, sp, #8
   13cc8:	mov	r4, r0
   13ccc:	ldr	r0, [r0, #32]
   13cd0:	ldrh	r0, [r0, #14]
   13cd4:	cmp	r0, #1
   13cd8:	bne	13d64 <flatcc_builder_end_buffer@@Base+0xa8>
   13cdc:	mov	r5, r1
   13ce0:	ldr	r6, [r4, #152]	; 0x98
   13ce4:	ldrh	r7, [r4, #164]	; 0xa4
   13ce8:	ldrh	r1, [r4, #132]	; 0x84
   13cec:	mov	r0, r4
   13cf0:	bl	13a2c <flatcc_builder_create_buffer@@Base+0x1d0>
   13cf4:	and	r0, r7, #2
   13cf8:	cmp	r6, #0
   13cfc:	orrne	r0, r0, #1
   13d00:	ldrh	r2, [r4, #132]	; 0x84
   13d04:	ldrh	r1, [r4, #128]	; 0x80
   13d08:	str	r1, [sp]
   13d0c:	str	r0, [sp, #4]
   13d10:	add	r1, r4, #168	; 0xa8
   13d14:	mov	r0, r4
   13d18:	mov	r3, r5
   13d1c:	bl	1385c <flatcc_builder_create_buffer@@Base>
   13d20:	mov	r5, r0
   13d24:	cmp	r0, #0
   13d28:	beq	13d58 <flatcc_builder_end_buffer@@Base+0x9c>
   13d2c:	ldr	r0, [r4, #32]
   13d30:	ldr	r1, [r0, #20]
   13d34:	str	r1, [r4, #144]	; 0x90
   13d38:	ldr	r1, [r0, #28]
   13d3c:	str	r1, [r4, #152]	; 0x98
   13d40:	ldr	r1, [r0, #16]
   13d44:	str	r1, [r4, #168]	; 0xa8
   13d48:	ldrh	r0, [r0, #32]
   13d4c:	strh	r0, [r4, #164]	; 0xa4
   13d50:	mov	r0, r4
   13d54:	bl	13d84 <flatcc_builder_end_buffer@@Base+0xc8>
   13d58:	mov	r0, r5
   13d5c:	sub	sp, fp, #16
   13d60:	pop	{r4, r5, r6, r7, fp, pc}
   13d64:	movw	r0, #30113	; 0x75a1
   13d68:	movt	r0, #1
   13d6c:	movw	r1, #29554	; 0x7372
   13d70:	movt	r1, #1
   13d74:	movw	r3, #30157	; 0x75cd
   13d78:	movt	r3, #1
   13d7c:	movw	r2, #838	; 0x346
   13d80:	bl	1249c <__assert_fail@plt>
   13d84:	push	{r4, sl, fp, lr}
   13d88:	add	fp, sp, #8
   13d8c:	mov	r4, r0
   13d90:	ldr	r0, [r0, #16]
   13d94:	ldr	r2, [r4, #20]
   13d98:	mov	r1, #0
   13d9c:	bl	1246c <memset@plt>
   13da0:	ldr	r0, [r4, #32]
   13da4:	ldr	r1, [r0, #8]
   13da8:	str	r1, [r4, #20]
   13dac:	ldr	r1, [r0]
   13db0:	str	r1, [r4, #28]
   13db4:	ldr	r1, [r0, #4]
   13db8:	mov	r0, r4
   13dbc:	bl	13e3c <flatcc_builder_start_struct@@Base+0x4c>
   13dc0:	ldrh	r1, [r4, #130]	; 0x82
   13dc4:	mov	r0, r4
   13dc8:	bl	13a2c <flatcc_builder_create_buffer@@Base+0x1d0>
   13dcc:	ldr	r0, [r4, #32]
   13dd0:	ldr	r1, [r4, #156]	; 0x9c
   13dd4:	ldrh	r2, [r0, #12]
   13dd8:	sub	r0, r0, #36	; 0x24
   13ddc:	str	r0, [r4, #32]
   13de0:	sub	r0, r1, #1
   13de4:	str	r0, [r4, #156]	; 0x9c
   13de8:	strh	r2, [r4, #130]	; 0x82
   13dec:	pop	{r4, sl, fp, pc}

00013df0 <flatcc_builder_start_struct@@Base>:
   13df0:	push	{r4, r5, fp, lr}
   13df4:	add	fp, sp, #8
   13df8:	mov	r4, r1
   13dfc:	mov	r5, r0
   13e00:	mov	r1, r2
   13e04:	bl	13bc4 <flatcc_builder_start_buffer@@Base+0xbc>
   13e08:	cmp	r0, #0
   13e0c:	movne	r0, #0
   13e10:	popne	{r4, r5, fp, pc}
   13e14:	ldr	r0, [r5, #32]
   13e18:	mov	r1, #2
   13e1c:	strh	r1, [r0, #14]
   13e20:	mov	r0, r5
   13e24:	mvn	r1, #3
   13e28:	bl	13e3c <flatcc_builder_start_struct@@Base+0x4c>
   13e2c:	mov	r0, r5
   13e30:	mov	r1, r4
   13e34:	pop	{r4, r5, fp, lr}
   13e38:	b	13e74 <flatcc_builder_start_struct@@Base+0x84>
   13e3c:	push	{fp, lr}
   13e40:	mov	fp, sp
   13e44:	ldr	r2, [r0, #28]
   13e48:	ldr	ip, [r0, #32]
   13e4c:	ldr	r3, [r0, #60]	; 0x3c
   13e50:	ldr	lr, [r0, #64]	; 0x40
   13e54:	add	r3, r3, r2
   13e58:	str	r3, [r0, #16]
   13e5c:	sub	r2, lr, r2
   13e60:	cmp	r2, r1
   13e64:	movhi	r2, r1
   13e68:	str	r2, [r0, #24]
   13e6c:	str	r1, [ip, #4]
   13e70:	pop	{fp, pc}
   13e74:	push	{r4, r5, fp, lr}
   13e78:	add	fp, sp, #8
   13e7c:	mov	r4, r0
   13e80:	ldr	r5, [r0, #20]
   13e84:	ldr	r2, [r0, #24]
   13e88:	add	r0, r5, r1
   13e8c:	str	r0, [r4, #20]
   13e90:	cmp	r0, r2
   13e94:	bcc	13eb8 <flatcc_builder_start_struct@@Base+0xc8>
   13e98:	add	r1, r0, #1
   13e9c:	mov	r0, r4
   13ea0:	mvn	r2, #3
   13ea4:	bl	162a8 <flatcc_builder_get_emit_context@@Base+0x18>
   13ea8:	mov	r1, r0
   13eac:	mov	r0, #0
   13eb0:	cmp	r1, #0
   13eb4:	popne	{r4, r5, fp, pc}
   13eb8:	ldr	r0, [r4, #16]
   13ebc:	add	r0, r0, r5
   13ec0:	pop	{r4, r5, fp, pc}

00013ec4 <flatcc_builder_struct_edit@@Base>:
   13ec4:	ldr	r0, [r0, #16]
   13ec8:	bx	lr

00013ecc <flatcc_builder_end_struct@@Base>:
   13ecc:	push	{r4, r5, fp, lr}
   13ed0:	add	fp, sp, #8
   13ed4:	mov	r4, r0
   13ed8:	ldr	r0, [r0, #32]
   13edc:	ldrh	r0, [r0, #14]
   13ee0:	cmp	r0, #2
   13ee4:	bne	13f14 <flatcc_builder_end_struct@@Base+0x48>
   13ee8:	ldrh	r3, [r4, #130]	; 0x82
   13eec:	ldr	r1, [r4, #16]
   13ef0:	ldr	r2, [r4, #20]
   13ef4:	mov	r0, r4
   13ef8:	bl	13a40 <flatcc_builder_create_struct@@Base>
   13efc:	mov	r5, r0
   13f00:	cmp	r0, #0
   13f04:	movne	r0, r4
   13f08:	blne	13d84 <flatcc_builder_end_buffer@@Base+0xc8>
   13f0c:	mov	r0, r5
   13f10:	pop	{r4, r5, fp, pc}
   13f14:	movw	r0, #30246	; 0x7626
   13f18:	movt	r0, #1
   13f1c:	movw	r1, #29554	; 0x7372
   13f20:	movt	r1, #1
   13f24:	movw	r3, #30290	; 0x7652
   13f28:	movt	r3, #1
   13f2c:	mov	r2, #872	; 0x368
   13f30:	bl	1249c <__assert_fail@plt>

00013f34 <flatcc_builder_extend_vector@@Base>:
   13f34:	push	{r4, r5, fp, lr}
   13f38:	add	fp, sp, #8
   13f3c:	mov	r5, r1
   13f40:	mov	r4, r0
   13f44:	ldr	r0, [r0, #32]
   13f48:	ldr	r2, [r0, #24]
   13f4c:	mov	r0, r4
   13f50:	bl	13f78 <flatcc_builder_extend_vector@@Base+0x44>
   13f54:	cmp	r0, #0
   13f58:	movne	r0, #0
   13f5c:	popne	{r4, r5, fp, pc}
   13f60:	ldr	r0, [r4, #32]
   13f64:	ldr	r0, [r0, #16]
   13f68:	mul	r1, r0, r5
   13f6c:	mov	r0, r4
   13f70:	pop	{r4, r5, fp, lr}
   13f74:	b	13e74 <flatcc_builder_start_struct@@Base+0x84>
   13f78:	ldr	r0, [r0, #32]
   13f7c:	ldr	r3, [r0, #20]
   13f80:	adds	r1, r3, r1
   13f84:	bcs	13f98 <flatcc_builder_extend_vector@@Base+0x64>
   13f88:	cmp	r1, r2
   13f8c:	strls	r1, [r0, #20]
   13f90:	movls	r0, #0
   13f94:	bxls	lr
   13f98:	push	{fp, lr}
   13f9c:	mov	fp, sp
   13fa0:	movw	r0, #33825	; 0x8421
   13fa4:	movt	r0, #1
   13fa8:	movw	r1, #29554	; 0x7372
   13fac:	movt	r1, #1
   13fb0:	movw	r3, #33852	; 0x843c
   13fb4:	movt	r3, #1
   13fb8:	mov	r2, #892	; 0x37c
   13fbc:	bl	1249c <__assert_fail@plt>

00013fc0 <flatcc_builder_vector_push@@Base>:
   13fc0:	push	{fp, lr}
   13fc4:	mov	fp, sp
   13fc8:	ldr	r2, [r0, #32]
   13fcc:	ldrh	r3, [r2, #14]
   13fd0:	cmp	r3, #4
   13fd4:	bne	14000 <flatcc_builder_vector_push@@Base+0x40>
   13fd8:	ldr	ip, [r2, #20]
   13fdc:	ldr	r3, [r2, #24]
   13fe0:	cmp	ip, r3
   13fe4:	bhi	14020 <flatcc_builder_vector_push@@Base+0x60>
   13fe8:	add	r3, ip, #1
   13fec:	str	r3, [r2, #20]
   13ff0:	ldr	r2, [r0, #32]
   13ff4:	ldr	r2, [r2, #16]
   13ff8:	pop	{fp, lr}
   13ffc:	b	14040 <flatcc_builder_vector_push@@Base+0x80>
   14000:	movw	r0, #30357	; 0x7695
   14004:	movt	r0, #1
   14008:	movw	r1, #29554	; 0x7372
   1400c:	movt	r1, #1
   14010:	movw	r3, #30401	; 0x76c1
   14014:	movt	r3, #1
   14018:	movw	r2, #907	; 0x38b
   1401c:	bl	1249c <__assert_fail@plt>
   14020:	movw	r0, #30468	; 0x7704
   14024:	movt	r0, #1
   14028:	movw	r1, #29554	; 0x7372
   1402c:	movt	r1, #1
   14030:	movw	r3, #30401	; 0x76c1
   14034:	movt	r3, #1
   14038:	mov	r2, #908	; 0x38c
   1403c:	bl	1249c <__assert_fail@plt>
   14040:	push	{r4, r5, r6, sl, fp, lr}
   14044:	add	fp, sp, #16
   14048:	mov	r4, r2
   1404c:	mov	r5, r1
   14050:	mov	r1, r2
   14054:	bl	13e74 <flatcc_builder_start_struct@@Base+0x84>
   14058:	mov	r6, r0
   1405c:	cmp	r0, #0
   14060:	beq	14074 <flatcc_builder_vector_push@@Base+0xb4>
   14064:	mov	r0, r6
   14068:	mov	r1, r5
   1406c:	mov	r2, r4
   14070:	bl	123e8 <memcpy@plt>
   14074:	mov	r0, r6
   14078:	pop	{r4, r5, r6, sl, fp, pc}

0001407c <flatcc_builder_append_vector@@Base>:
   1407c:	push	{r4, r5, r6, sl, fp, lr}
   14080:	add	fp, sp, #16
   14084:	mov	r4, r1
   14088:	mov	r6, r0
   1408c:	ldr	r0, [r0, #32]
   14090:	ldrh	r1, [r0, #14]
   14094:	cmp	r1, #4
   14098:	bne	140d8 <flatcc_builder_append_vector@@Base+0x5c>
   1409c:	mov	r5, r2
   140a0:	ldr	r2, [r0, #24]
   140a4:	mov	r0, r6
   140a8:	mov	r1, r5
   140ac:	bl	13f78 <flatcc_builder_extend_vector@@Base+0x44>
   140b0:	cmp	r0, #0
   140b4:	movne	r0, #0
   140b8:	popne	{r4, r5, r6, sl, fp, pc}
   140bc:	ldr	r0, [r6, #32]
   140c0:	ldr	r0, [r0, #16]
   140c4:	mul	r2, r0, r5
   140c8:	mov	r0, r6
   140cc:	mov	r1, r4
   140d0:	pop	{r4, r5, r6, sl, fp, lr}
   140d4:	b	14040 <flatcc_builder_vector_push@@Base+0x80>
   140d8:	movw	r0, #30357	; 0x7695
   140dc:	movt	r0, #1
   140e0:	movw	r1, #29554	; 0x7372
   140e4:	movt	r1, #1
   140e8:	movw	r3, #30529	; 0x7741
   140ec:	movt	r3, #1
   140f0:	movw	r2, #915	; 0x393
   140f4:	bl	1249c <__assert_fail@plt>

000140f8 <flatcc_builder_extend_offset_vector@@Base>:
   140f8:	push	{r4, r5, fp, lr}
   140fc:	add	fp, sp, #8
   14100:	mov	r5, r1
   14104:	mov	r4, r0
   14108:	mvn	r2, #-1073741824	; 0xc0000000
   1410c:	bl	13f78 <flatcc_builder_extend_vector@@Base+0x44>
   14110:	mov	r1, r0
   14114:	mov	r0, #0
   14118:	cmp	r1, #0
   1411c:	popne	{r4, r5, fp, pc}
   14120:	lsl	r1, r5, #2
   14124:	mov	r0, r4
   14128:	bl	13e74 <flatcc_builder_start_struct@@Base+0x84>
   1412c:	pop	{r4, r5, fp, pc}

00014130 <flatcc_builder_offset_vector_push@@Base>:
   14130:	push	{r4, r5, fp, lr}
   14134:	add	fp, sp, #8
   14138:	mov	r4, r1
   1413c:	ldr	r1, [r0, #32]
   14140:	ldrh	r2, [r1, #14]
   14144:	cmp	r2, #5
   14148:	bne	14180 <flatcc_builder_offset_vector_push@@Base+0x50>
   1414c:	ldr	r2, [r1, #20]
   14150:	mov	r5, #0
   14154:	cmn	r2, #-1073741823	; 0xc0000001
   14158:	beq	14178 <flatcc_builder_offset_vector_push@@Base+0x48>
   1415c:	add	r2, r2, #1
   14160:	str	r2, [r1, #20]
   14164:	mov	r1, #4
   14168:	bl	13e74 <flatcc_builder_start_struct@@Base+0x84>
   1416c:	cmp	r0, #0
   14170:	strne	r4, [r0]
   14174:	movne	r5, r0
   14178:	mov	r0, r5
   1417c:	pop	{r4, r5, fp, pc}
   14180:	movw	r0, #30606	; 0x778e
   14184:	movt	r0, #1
   14188:	movw	r1, #29554	; 0x7372
   1418c:	movt	r1, #1
   14190:	movw	r3, #30657	; 0x77c1
   14194:	movt	r3, #1
   14198:	movw	r2, #934	; 0x3a6
   1419c:	bl	1249c <__assert_fail@plt>

000141a0 <flatcc_builder_append_offset_vector@@Base>:
   141a0:	push	{r4, r5, r6, sl, fp, lr}
   141a4:	add	fp, sp, #16
   141a8:	mov	r6, r0
   141ac:	ldr	r0, [r0, #32]
   141b0:	ldrh	r0, [r0, #14]
   141b4:	cmp	r0, #5
   141b8:	bne	141f8 <flatcc_builder_append_offset_vector@@Base+0x58>
   141bc:	mov	r5, r2
   141c0:	mov	r4, r1
   141c4:	mov	r0, r6
   141c8:	mov	r1, r2
   141cc:	mvn	r2, #-1073741824	; 0xc0000000
   141d0:	bl	13f78 <flatcc_builder_extend_vector@@Base+0x44>
   141d4:	mov	r1, r0
   141d8:	mov	r0, #0
   141dc:	cmp	r1, #0
   141e0:	popne	{r4, r5, r6, sl, fp, pc}
   141e4:	lsl	r2, r5, #2
   141e8:	mov	r0, r6
   141ec:	mov	r1, r4
   141f0:	bl	14040 <flatcc_builder_vector_push@@Base+0x80>
   141f4:	pop	{r4, r5, r6, sl, fp, pc}
   141f8:	movw	r0, #30606	; 0x778e
   141fc:	movt	r0, #1
   14200:	movw	r1, #29554	; 0x7372
   14204:	movt	r1, #1
   14208:	movw	r3, #30755	; 0x7823
   1420c:	movt	r3, #1
   14210:	mov	r2, #948	; 0x3b4
   14214:	bl	1249c <__assert_fail@plt>

00014218 <flatcc_builder_extend_string@@Base>:
   14218:	push	{r4, r5, fp, lr}
   1421c:	add	fp, sp, #8
   14220:	mov	r5, r0
   14224:	ldr	r0, [r0, #32]
   14228:	ldrh	r0, [r0, #14]
   1422c:	cmp	r0, #6
   14230:	bne	14260 <flatcc_builder_extend_string@@Base+0x48>
   14234:	mov	r4, r1
   14238:	mov	r0, r5
   1423c:	mvn	r2, #0
   14240:	bl	13f78 <flatcc_builder_extend_vector@@Base+0x44>
   14244:	cmp	r0, #0
   14248:	movne	r0, #0
   1424c:	popne	{r4, r5, fp, pc}
   14250:	mov	r0, r5
   14254:	mov	r1, r4
   14258:	pop	{r4, r5, fp, lr}
   1425c:	b	13e74 <flatcc_builder_start_struct@@Base+0x84>
   14260:	movw	r0, #30871	; 0x7897
   14264:	movt	r0, #1
   14268:	movw	r1, #29554	; 0x7372
   1426c:	movt	r1, #1
   14270:	movw	r3, #30915	; 0x78c3
   14274:	movt	r3, #1
   14278:	movw	r2, #957	; 0x3bd
   1427c:	bl	1249c <__assert_fail@plt>

00014280 <flatcc_builder_append_string@@Base>:
   14280:	push	{r4, r5, r6, sl, fp, lr}
   14284:	add	fp, sp, #16
   14288:	mov	r6, r0
   1428c:	ldr	r0, [r0, #32]
   14290:	ldrh	r0, [r0, #14]
   14294:	cmp	r0, #6
   14298:	bne	142d4 <flatcc_builder_append_string@@Base+0x54>
   1429c:	mov	r4, r2
   142a0:	mov	r5, r1
   142a4:	mov	r0, r6
   142a8:	mov	r1, r2
   142ac:	mvn	r2, #0
   142b0:	bl	13f78 <flatcc_builder_extend_vector@@Base+0x44>
   142b4:	cmp	r0, #0
   142b8:	movne	r0, #0
   142bc:	popne	{r4, r5, r6, sl, fp, pc}
   142c0:	mov	r0, r6
   142c4:	mov	r1, r5
   142c8:	mov	r2, r4
   142cc:	pop	{r4, r5, r6, sl, fp, lr}
   142d0:	b	14040 <flatcc_builder_vector_push@@Base+0x80>
   142d4:	movw	r0, #30871	; 0x7897
   142d8:	movt	r0, #1
   142dc:	movw	r1, #29554	; 0x7372
   142e0:	movt	r1, #1
   142e4:	movw	r3, #30978	; 0x7902
   142e8:	movt	r3, #1
   142ec:	movw	r2, #966	; 0x3c6
   142f0:	bl	1249c <__assert_fail@plt>

000142f4 <flatcc_builder_append_string_str@@Base>:
   142f4:	push	{r4, r5, fp, lr}
   142f8:	add	fp, sp, #8
   142fc:	mov	r4, r1
   14300:	mov	r5, r0
   14304:	mov	r0, r1
   14308:	bl	12454 <strlen@plt>
   1430c:	mov	r2, r0
   14310:	mov	r0, r5
   14314:	mov	r1, r4
   14318:	pop	{r4, r5, fp, lr}
   1431c:	b	14280 <flatcc_builder_append_string@@Base>

00014320 <flatcc_builder_append_string_strn@@Base>:
   14320:	push	{r4, r5, fp, lr}
   14324:	add	fp, sp, #8
   14328:	mov	r4, r1
   1432c:	mov	r5, r0
   14330:	mov	r0, r1
   14334:	mov	r1, r2
   14338:	bl	14350 <flatcc_builder_append_string_strn@@Base+0x30>
   1433c:	mov	r2, r0
   14340:	mov	r0, r5
   14344:	mov	r1, r4
   14348:	pop	{r4, r5, fp, lr}
   1434c:	b	14280 <flatcc_builder_append_string@@Base>
   14350:	push	{r4, r5, fp, lr}
   14354:	add	fp, sp, #8
   14358:	mov	r4, r1
   1435c:	mov	r5, r0
   14360:	mov	r1, #0
   14364:	mov	r2, r4
   14368:	bl	12478 <memchr@plt>
   1436c:	cmp	r0, #0
   14370:	subne	r4, r0, r5
   14374:	mov	r0, r4
   14378:	pop	{r4, r5, fp, pc}

0001437c <flatcc_builder_truncate_vector@@Base>:
   1437c:	push	{fp, lr}
   14380:	mov	fp, sp
   14384:	ldr	r2, [r0, #32]
   14388:	ldrh	r3, [r2, #14]
   1438c:	cmp	r3, #4
   14390:	bne	143c0 <flatcc_builder_truncate_vector@@Base+0x44>
   14394:	ldr	r3, [r2, #20]
   14398:	cmp	r3, r1
   1439c:	bcc	143e0 <flatcc_builder_truncate_vector@@Base+0x64>
   143a0:	sub	r3, r3, r1
   143a4:	str	r3, [r2, #20]
   143a8:	ldr	r2, [r0, #32]
   143ac:	ldr	r2, [r2, #16]
   143b0:	mul	r1, r2, r1
   143b4:	bl	14400 <flatcc_builder_truncate_vector@@Base+0x84>
   143b8:	mov	r0, #0
   143bc:	pop	{fp, pc}
   143c0:	movw	r0, #30357	; 0x7695
   143c4:	movt	r0, #1
   143c8:	movw	r1, #29554	; 0x7372
   143cc:	movt	r1, #1
   143d0:	movw	r3, #31055	; 0x794f
   143d4:	movt	r3, #1
   143d8:	movw	r2, #985	; 0x3d9
   143dc:	bl	1249c <__assert_fail@plt>
   143e0:	movw	r0, #31118	; 0x798e
   143e4:	movt	r0, #1
   143e8:	movw	r1, #29554	; 0x7372
   143ec:	movt	r1, #1
   143f0:	movw	r3, #31055	; 0x794f
   143f4:	movt	r3, #1
   143f8:	movw	r2, #986	; 0x3da
   143fc:	bl	1249c <__assert_fail@plt>
   14400:	mov	r2, r1
   14404:	ldr	r1, [r0, #16]
   14408:	ldr	r3, [r0, #20]
   1440c:	sub	r3, r3, r2
   14410:	str	r3, [r0, #20]
   14414:	add	r0, r1, r3
   14418:	mov	r1, #0
   1441c:	b	1246c <memset@plt>

00014420 <flatcc_builder_truncate_offset_vector@@Base>:
   14420:	push	{fp, lr}
   14424:	mov	fp, sp
   14428:	ldr	r2, [r0, #32]
   1442c:	ldrh	r3, [r2, #14]
   14430:	cmp	r3, #5
   14434:	bne	14464 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   14438:	ldr	r3, [r2, #20]
   1443c:	cmp	r3, r1
   14440:	bcc	14484 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14444:	sub	r3, r3, r1
   14448:	str	r3, [r2, #20]
   1444c:	ldr	r2, [r0, #32]
   14450:	ldr	r2, [r2, #16]
   14454:	mul	r1, r2, r1
   14458:	bl	14400 <flatcc_builder_truncate_vector@@Base+0x84>
   1445c:	mov	r0, #0
   14460:	pop	{fp, pc}
   14464:	movw	r0, #30606	; 0x778e
   14468:	movt	r0, #1
   1446c:	movw	r1, #29554	; 0x7372
   14470:	movt	r1, #1
   14474:	movw	r3, #31154	; 0x79b2
   14478:	movt	r3, #1
   1447c:	movw	r2, #994	; 0x3e2
   14480:	bl	1249c <__assert_fail@plt>
   14484:	movw	r0, #31224	; 0x79f8
   14488:	movt	r0, #1
   1448c:	movw	r1, #29554	; 0x7372
   14490:	movt	r1, #1
   14494:	movw	r3, #31154	; 0x79b2
   14498:	movt	r3, #1
   1449c:	movw	r2, #995	; 0x3e3
   144a0:	bl	1249c <__assert_fail@plt>

000144a4 <flatcc_builder_truncate_string@@Base>:
   144a4:	push	{fp, lr}
   144a8:	mov	fp, sp
   144ac:	ldr	r2, [r0, #32]
   144b0:	ldrh	r3, [r2, #14]
   144b4:	cmp	r3, #6
   144b8:	bne	144dc <flatcc_builder_truncate_string@@Base+0x38>
   144bc:	ldr	r3, [r2, #20]
   144c0:	cmp	r3, r1
   144c4:	bcc	144fc <flatcc_builder_truncate_string@@Base+0x58>
   144c8:	sub	r3, r3, r1
   144cc:	str	r3, [r2, #20]
   144d0:	bl	14400 <flatcc_builder_truncate_vector@@Base+0x84>
   144d4:	mov	r0, #0
   144d8:	pop	{fp, pc}
   144dc:	movw	r0, #30871	; 0x7897
   144e0:	movt	r0, #1
   144e4:	movw	r1, #29554	; 0x7372
   144e8:	movt	r1, #1
   144ec:	movw	r3, #31283	; 0x7a33
   144f0:	movt	r3, #1
   144f4:	movw	r2, #1003	; 0x3eb
   144f8:	bl	1249c <__assert_fail@plt>
   144fc:	movw	r0, #31346	; 0x7a72
   14500:	movt	r0, #1
   14504:	movw	r1, #29554	; 0x7372
   14508:	movt	r1, #1
   1450c:	movw	r3, #31283	; 0x7a33
   14510:	movt	r3, #1
   14514:	mov	r2, #1004	; 0x3ec
   14518:	bl	1249c <__assert_fail@plt>

0001451c <flatcc_builder_start_vector@@Base>:
   1451c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14520:	add	fp, sp, #24
   14524:	sub	sp, sp, #8
   14528:	mov	r5, r3
   1452c:	mov	r6, r1
   14530:	mov	r4, r0
   14534:	strh	r2, [sp, #6]
   14538:	add	r0, sp, #6
   1453c:	mov	r8, #4
   14540:	mov	r1, #4
   14544:	bl	1459c <flatcc_builder_start_vector@@Base+0x80>
   14548:	ldrh	r1, [sp, #6]
   1454c:	mov	r0, r4
   14550:	bl	13bc4 <flatcc_builder_start_buffer@@Base+0xbc>
   14554:	mvn	r7, #0
   14558:	cmp	r0, #0
   1455c:	bne	14590 <flatcc_builder_start_vector@@Base+0x74>
   14560:	ldr	r0, [r4, #32]
   14564:	str	r6, [r0, #16]
   14568:	ldr	r0, [r4, #32]
   1456c:	mov	r7, #0
   14570:	str	r7, [r0, #20]
   14574:	ldr	r0, [r4, #32]
   14578:	str	r5, [r0, #24]
   1457c:	ldr	r0, [r4, #32]
   14580:	strh	r8, [r0, #14]
   14584:	mov	r0, r4
   14588:	mvn	r1, #3
   1458c:	bl	13e3c <flatcc_builder_start_struct@@Base+0x4c>
   14590:	mov	r0, r7
   14594:	sub	sp, fp, #24
   14598:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1459c:	ldrh	r2, [r0]
   145a0:	cmp	r2, r1
   145a4:	strhcc	r1, [r0]
   145a8:	bx	lr

000145ac <flatcc_builder_start_offset_vector@@Base>:
   145ac:	push	{r4, r5, r6, sl, fp, lr}
   145b0:	add	fp, sp, #16
   145b4:	mov	r4, r0
   145b8:	mov	r6, #4
   145bc:	mov	r1, #4
   145c0:	bl	13bc4 <flatcc_builder_start_buffer@@Base+0xbc>
   145c4:	mvn	r5, #0
   145c8:	cmp	r0, #0
   145cc:	beq	145d8 <flatcc_builder_start_offset_vector@@Base+0x2c>
   145d0:	mov	r0, r5
   145d4:	pop	{r4, r5, r6, sl, fp, pc}
   145d8:	ldr	r0, [r4, #32]
   145dc:	str	r6, [r0, #16]
   145e0:	ldr	r0, [r4, #32]
   145e4:	mov	r5, #0
   145e8:	str	r5, [r0, #20]
   145ec:	ldr	r0, [r4, #32]
   145f0:	mov	r1, #5
   145f4:	strh	r1, [r0, #14]
   145f8:	mov	r0, r4
   145fc:	mvn	r1, #3
   14600:	bl	13e3c <flatcc_builder_start_struct@@Base+0x4c>
   14604:	mov	r0, r5
   14608:	pop	{r4, r5, r6, sl, fp, pc}

0001460c <flatcc_builder_create_offset_vector@@Base>:
   1460c:	push	{r4, r5, r6, sl, fp, lr}
   14610:	add	fp, sp, #16
   14614:	mov	r6, r2
   14618:	mov	r5, r1
   1461c:	mov	r4, r0
   14620:	bl	145ac <flatcc_builder_start_offset_vector@@Base>
   14624:	cmp	r0, #0
   14628:	beq	14634 <flatcc_builder_create_offset_vector@@Base+0x28>
   1462c:	mov	r0, #0
   14630:	pop	{r4, r5, r6, sl, fp, pc}
   14634:	mov	r0, r4
   14638:	mov	r1, r6
   1463c:	bl	140f8 <flatcc_builder_extend_offset_vector@@Base>
   14640:	cmp	r0, #0
   14644:	beq	1462c <flatcc_builder_create_offset_vector@@Base+0x20>
   14648:	lsl	r2, r6, #2
   1464c:	mov	r1, r5
   14650:	bl	123e8 <memcpy@plt>
   14654:	mov	r0, r4
   14658:	pop	{r4, r5, r6, sl, fp, lr}
   1465c:	b	14660 <flatcc_builder_end_offset_vector@@Base>

00014660 <flatcc_builder_end_offset_vector@@Base>:
   14660:	push	{r4, r5, fp, lr}
   14664:	add	fp, sp, #8
   14668:	mov	r4, r0
   1466c:	ldr	r0, [r0, #32]
   14670:	ldrh	r1, [r0, #14]
   14674:	cmp	r1, #5
   14678:	bne	146a4 <flatcc_builder_end_offset_vector@@Base+0x44>
   1467c:	ldr	r2, [r0, #20]
   14680:	ldr	r1, [r4, #16]
   14684:	mov	r0, r4
   14688:	bl	15200 <flatcc_builder_create_offset_vector_direct@@Base>
   1468c:	mov	r5, r0
   14690:	cmp	r0, #0
   14694:	movne	r0, r4
   14698:	blne	13d84 <flatcc_builder_end_buffer@@Base+0xc8>
   1469c:	mov	r0, r5
   146a0:	pop	{r4, r5, fp, pc}
   146a4:	movw	r0, #30606	; 0x778e
   146a8:	movt	r0, #1
   146ac:	movw	r1, #29554	; 0x7372
   146b0:	movt	r1, #1
   146b4:	movw	r3, #32189	; 0x7dbd
   146b8:	movt	r3, #1
   146bc:	movw	r2, #1480	; 0x5c8
   146c0:	bl	1249c <__assert_fail@plt>

000146c4 <flatcc_builder_start_string@@Base>:
   146c4:	push	{r4, r5, r6, sl, fp, lr}
   146c8:	add	fp, sp, #16
   146cc:	mov	r4, r0
   146d0:	mov	r6, #1
   146d4:	mov	r1, #1
   146d8:	bl	13bc4 <flatcc_builder_start_buffer@@Base+0xbc>
   146dc:	mvn	r5, #0
   146e0:	cmp	r0, #0
   146e4:	beq	146f0 <flatcc_builder_start_string@@Base+0x2c>
   146e8:	mov	r0, r5
   146ec:	pop	{r4, r5, r6, sl, fp, pc}
   146f0:	ldr	r0, [r4, #32]
   146f4:	str	r6, [r0, #16]
   146f8:	ldr	r0, [r4, #32]
   146fc:	mov	r5, #0
   14700:	str	r5, [r0, #20]
   14704:	ldr	r0, [r4, #32]
   14708:	mov	r1, #6
   1470c:	strh	r1, [r0, #14]
   14710:	mov	r0, r4
   14714:	mvn	r1, #3
   14718:	bl	13e3c <flatcc_builder_start_struct@@Base+0x4c>
   1471c:	mov	r0, r5
   14720:	pop	{r4, r5, r6, sl, fp, pc}

00014724 <flatcc_builder_reserve_table@@Base>:
   14724:	cmn	r1, #1
   14728:	ble	14730 <flatcc_builder_reserve_table@@Base+0xc>
   1472c:	b	14758 <flatcc_builder_reserve_table@@Base+0x34>
   14730:	push	{fp, lr}
   14734:	mov	fp, sp
   14738:	movw	r0, #31445	; 0x7ad5
   1473c:	movt	r0, #1
   14740:	movw	r1, #29554	; 0x7372
   14744:	movt	r1, #1
   14748:	movw	r3, #31380	; 0x7a94
   1474c:	movt	r3, #1
   14750:	movw	r2, #1065	; 0x429
   14754:	bl	1249c <__assert_fail@plt>
   14758:	push	{r4, r5, r6, sl, fp, lr}
   1475c:	add	fp, sp, #16
   14760:	sub	sp, sp, #8
   14764:	mov	r6, r1
   14768:	mov	r4, r0
   1476c:	ldr	r0, [r0, #32]
   14770:	ldrh	r1, [r0, #28]
   14774:	ldr	r0, [r0, #16]
   14778:	mov	r2, #1
   1477c:	str	r2, [sp]
   14780:	mov	r2, #4
   14784:	add	r3, r2, r6, lsl #1
   14788:	add	r2, r0, r1, lsl #1
   1478c:	mov	r5, #0
   14790:	mov	r0, r4
   14794:	mov	r1, #0
   14798:	bl	13458 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1479c:	str	r0, [r4, #4]
   147a0:	cmp	r0, #0
   147a4:	beq	147e0 <flatcc_builder_reserve_table@@Base+0xbc>
   147a8:	lsl	r1, r6, #1
   147ac:	add	r0, r0, #4
   147b0:	str	r0, [r4, #4]
   147b4:	ldr	r0, [r4, #32]
   147b8:	ldr	r2, [r0, #20]
   147bc:	str	r5, [sp]
   147c0:	orr	r3, r1, #1
   147c4:	mov	r0, r4
   147c8:	mov	r1, #3
   147cc:	bl	13458 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   147d0:	str	r0, [r4]
   147d4:	cmp	r0, #0
   147d8:	mvneq	r5, #0
   147dc:	b	147e4 <flatcc_builder_reserve_table@@Base+0xc0>
   147e0:	mvn	r5, #0
   147e4:	mov	r0, r5
   147e8:	sub	sp, fp, #16
   147ec:	pop	{r4, r5, r6, sl, fp, pc}

000147f0 <flatcc_builder_start_table@@Base>:
   147f0:	push	{r4, r5, r6, sl, fp, lr}
   147f4:	add	fp, sp, #16
   147f8:	mov	r6, r1
   147fc:	mov	r4, r0
   14800:	mov	r1, #4
   14804:	bl	13bc4 <flatcc_builder_start_buffer@@Base+0xbc>
   14808:	mvn	r5, #0
   1480c:	cmp	r0, #0
   14810:	bne	14888 <flatcc_builder_start_table@@Base+0x98>
   14814:	ldr	r0, [r4, #4]
   14818:	ldr	r1, [r4, #32]
   1481c:	ldr	r2, [r4, #52]	; 0x34
   14820:	sub	r0, r0, r2
   14824:	str	r0, [r1, #16]
   14828:	ldr	r0, [r4]
   1482c:	ldr	r1, [r4, #32]
   14830:	ldr	r2, [r4, #76]	; 0x4c
   14834:	sub	r0, r0, r2
   14838:	str	r0, [r1, #20]
   1483c:	ldr	r0, [r4, #12]
   14840:	ldr	r1, [r4, #32]
   14844:	str	r0, [r1, #24]
   14848:	ldr	r0, [r4, #32]
   1484c:	ldrh	r1, [r4, #8]
   14850:	strh	r1, [r0, #28]
   14854:	mov	r0, #0
   14858:	strh	r0, [r4, #8]
   1485c:	movw	r0, #15186	; 0x3b52
   14860:	movt	r0, #12137	; 0x2f69
   14864:	str	r0, [r4, #12]
   14868:	ldr	r0, [r4, #32]
   1486c:	mov	r1, #3
   14870:	strh	r1, [r0, #14]
   14874:	mov	r0, r4
   14878:	mov	r1, r6
   1487c:	bl	14758 <flatcc_builder_reserve_table@@Base+0x34>
   14880:	cmp	r0, #0
   14884:	beq	14890 <flatcc_builder_start_table@@Base+0xa0>
   14888:	mov	r0, r5
   1488c:	pop	{r4, r5, r6, sl, fp, pc}
   14890:	mov	r0, r4
   14894:	movw	r1, #65532	; 0xfffc
   14898:	bl	13e3c <flatcc_builder_start_struct@@Base+0x4c>
   1489c:	mov	r5, #0
   148a0:	mov	r0, r5
   148a4:	pop	{r4, r5, r6, sl, fp, pc}

000148a8 <flatcc_builder_create_vtable@@Base>:
   148a8:	push	{fp, lr}
   148ac:	mov	fp, sp
   148b0:	sub	sp, sp, #72	; 0x48
   148b4:	mov	r3, #0
   148b8:	str	r3, [sp, #4]
   148bc:	str	r3, [sp]
   148c0:	cmp	r2, #0
   148c4:	strne	r1, [sp, #8]
   148c8:	strne	r2, [sp]
   148cc:	strne	r2, [sp, #12]
   148d0:	movne	r1, #1
   148d4:	strne	r1, [sp, #4]
   148d8:	ldr	r1, [r0, #152]	; 0x98
   148dc:	cmp	r1, #0
   148e0:	bne	148f0 <flatcc_builder_create_vtable@@Base+0x48>
   148e4:	ldr	r1, [r0, #180]	; 0xb4
   148e8:	cmp	r1, #0
   148ec:	beq	1490c <flatcc_builder_create_vtable@@Base+0x64>
   148f0:	mov	r1, sp
   148f4:	bl	137c8 <flatcc_builder_embed_buffer@@Base+0x1e0>
   148f8:	cmp	r0, #0
   148fc:	beq	1491c <flatcc_builder_create_vtable@@Base+0x74>
   14900:	add	r0, r0, #1
   14904:	mov	sp, fp
   14908:	pop	{fp, pc}
   1490c:	mov	r1, sp
   14910:	bl	14928 <flatcc_builder_create_vtable@@Base+0x80>
   14914:	cmp	r0, #0
   14918:	bne	14904 <flatcc_builder_create_vtable@@Base+0x5c>
   1491c:	mov	r0, #0
   14920:	mov	sp, fp
   14924:	pop	{fp, pc}
   14928:	push	{r4, sl, fp, lr}
   1492c:	add	fp, sp, #8
   14930:	sub	sp, sp, #8
   14934:	ldr	r4, [r0, #140]	; 0x8c
   14938:	ldr	r3, [r1]
   1493c:	add	r2, r3, r4
   14940:	str	r2, [r0, #140]	; 0x8c
   14944:	cmn	r3, #1
   14948:	ble	1499c <flatcc_builder_create_vtable@@Base+0xf4>
   1494c:	ldr	r2, [r1, #4]
   14950:	ldr	ip, [r0, #36]	; 0x24
   14954:	ldr	lr, [r0, #44]	; 0x2c
   14958:	str	r3, [sp]
   1495c:	add	r1, r1, #8
   14960:	mov	r0, ip
   14964:	mov	r3, r4
   14968:	blx	lr
   1496c:	cmp	r0, #0
   14970:	addeq	r0, r4, #1
   14974:	subeq	sp, fp, #8
   14978:	popeq	{r4, sl, fp, pc}
   1497c:	movw	r0, #34072	; 0x8518
   14980:	movt	r0, #1
   14984:	movw	r1, #29554	; 0x7372
   14988:	movt	r1, #1
   1498c:	movw	r3, #33939	; 0x8493
   14990:	movt	r3, #1
   14994:	movw	r2, #677	; 0x2a5
   14998:	bl	1249c <__assert_fail@plt>
   1499c:	movw	r0, #34072	; 0x8518
   149a0:	movt	r0, #1
   149a4:	movw	r1, #29554	; 0x7372
   149a8:	movt	r1, #1
   149ac:	movw	r3, #33939	; 0x8493
   149b0:	movt	r3, #1
   149b4:	movw	r2, #673	; 0x2a1
   149b8:	bl	1249c <__assert_fail@plt>

000149bc <flatcc_builder_create_cached_vtable@@Base>:
   149bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149c0:	add	fp, sp, #28
   149c4:	sub	sp, sp, #20
   149c8:	mov	r4, r2
   149cc:	mov	r9, r1
   149d0:	mov	sl, r0
   149d4:	mov	r1, r3
   149d8:	bl	14bb0 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   149dc:	cmp	r0, #0
   149e0:	beq	14b04 <flatcc_builder_create_cached_vtable@@Base+0x148>
   149e4:	mov	r7, r0
   149e8:	ldr	r6, [r0]
   149ec:	mov	r5, #0
   149f0:	cmp	r6, #0
   149f4:	mov	r8, #0
   149f8:	beq	14a90 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   149fc:	ldr	r5, [sl, #68]	; 0x44
   14a00:	str	sl, [sp, #16]
   14a04:	ldr	sl, [sl, #100]	; 0x64
   14a08:	mov	r0, #0
   14a0c:	str	r7, [sp, #8]
   14a10:	str	r0, [sp, #12]
   14a14:	add	r8, sl, r6
   14a18:	ldr	r0, [r8, #8]
   14a1c:	mov	r1, r5
   14a20:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   14a24:	cmp	r0, r4
   14a28:	bne	14a40 <flatcc_builder_create_cached_vtable@@Base+0x84>
   14a2c:	mov	r0, r9
   14a30:	mov	r2, r4
   14a34:	bl	12400 <memcmp@plt>
   14a38:	cmp	r0, #0
   14a3c:	beq	14a54 <flatcc_builder_create_cached_vtable@@Base+0x98>
   14a40:	ldr	r6, [r8, #12]!
   14a44:	cmp	r6, #0
   14a48:	mov	r7, r8
   14a4c:	bne	14a14 <flatcc_builder_create_cached_vtable@@Base+0x58>
   14a50:	b	14a80 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   14a54:	ldr	r0, [sp, #16]
   14a58:	ldr	r0, [r0, #152]	; 0x98
   14a5c:	ldr	r1, [r8, #4]
   14a60:	cmp	r1, r0
   14a64:	beq	14b8c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14a68:	mov	r7, r8
   14a6c:	ldr	r6, [r7, #12]!
   14a70:	cmp	r6, #0
   14a74:	mov	r0, r8
   14a78:	bne	14a10 <flatcc_builder_create_cached_vtable@@Base+0x54>
   14a7c:	b	14a84 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14a80:	ldr	r8, [sp, #12]
   14a84:	ldr	sl, [sp, #16]
   14a88:	mov	r5, #0
   14a8c:	ldr	r7, [sp, #8]
   14a90:	ldr	r2, [sl, #124]	; 0x7c
   14a94:	str	r5, [sp]
   14a98:	mov	r0, sl
   14a9c:	mov	r1, #6
   14aa0:	mov	r3, #16
   14aa4:	bl	13458 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14aa8:	cmp	r0, #0
   14aac:	beq	14b78 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14ab0:	mov	r6, r0
   14ab4:	ldr	r0, [sl, #124]	; 0x7c
   14ab8:	ldr	r1, [sl, #152]	; 0x98
   14abc:	add	r2, r0, #16
   14ac0:	str	r2, [sl, #124]	; 0x7c
   14ac4:	str	r1, [r6, #4]
   14ac8:	ldr	r1, [r7]
   14acc:	str	r1, [r6, #12]
   14ad0:	str	r0, [r7]
   14ad4:	mov	r0, sl
   14ad8:	mov	r1, r9
   14adc:	mov	r2, r4
   14ae0:	bl	148a8 <flatcc_builder_create_vtable@@Base>
   14ae4:	str	r0, [r6]
   14ae8:	cmp	r0, #0
   14aec:	beq	14b78 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14af0:	cmp	r8, #0
   14af4:	beq	14b0c <flatcc_builder_create_cached_vtable@@Base+0x150>
   14af8:	ldr	r0, [r8, #8]
   14afc:	str	r0, [r6, #8]
   14b00:	b	14b74 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   14b04:	mov	r5, #0
   14b08:	b	14b78 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14b0c:	ldr	r0, [sl, #172]	; 0xac
   14b10:	cmp	r0, #0
   14b14:	beq	14b34 <flatcc_builder_create_cached_vtable@@Base+0x178>
   14b18:	ldr	r1, [sl, #120]	; 0x78
   14b1c:	add	r1, r1, r4
   14b20:	cmp	r0, r1
   14b24:	bcs	14b34 <flatcc_builder_create_cached_vtable@@Base+0x178>
   14b28:	mov	r0, sl
   14b2c:	bl	13150 <flatcc_builder_flush_vtable_cache@@Base>
   14b30:	b	14b74 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   14b34:	ldr	r2, [sl, #120]	; 0x78
   14b38:	mov	r0, #0
   14b3c:	str	r0, [sp]
   14b40:	mov	r0, sl
   14b44:	mov	r1, #2
   14b48:	mov	r3, r4
   14b4c:	bl	13458 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14b50:	cmp	r0, #0
   14b54:	beq	14b84 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   14b58:	ldr	r1, [sl, #120]	; 0x78
   14b5c:	str	r1, [r6, #8]
   14b60:	add	r1, r1, r4
   14b64:	str	r1, [sl, #120]	; 0x78
   14b68:	mov	r1, r9
   14b6c:	mov	r2, r4
   14b70:	bl	123e8 <memcpy@plt>
   14b74:	ldr	r5, [r6]
   14b78:	mov	r0, r5
   14b7c:	sub	sp, fp, #28
   14b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b84:	mvn	r5, #0
   14b88:	b	14b78 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14b8c:	ldr	r1, [sp, #8]
   14b90:	cmp	r7, r1
   14b94:	ldrne	r0, [r8, #12]
   14b98:	strne	r0, [r7]
   14b9c:	ldrne	r0, [r1]
   14ba0:	strne	r0, [r8, #12]
   14ba4:	strne	r6, [r1]
   14ba8:	ldr	r5, [r8]
   14bac:	b	14b78 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14bb0:	push	{r4, r5, fp, lr}
   14bb4:	add	fp, sp, #8
   14bb8:	mov	r4, r1
   14bbc:	mov	r5, r0
   14bc0:	ldr	r0, [r0, #116]	; 0x74
   14bc4:	cmp	r0, #0
   14bc8:	bne	14be4 <flatcc_builder_create_cached_vtable@@Base+0x228>
   14bcc:	mov	r0, r5
   14bd0:	bl	16310 <flatcc_builder_get_emit_context@@Base+0x80>
   14bd4:	mov	r1, r0
   14bd8:	mov	r0, #0
   14bdc:	cmp	r1, #0
   14be0:	popne	{r4, r5, fp, pc}
   14be4:	ldr	r0, [r5, #92]	; 0x5c
   14be8:	ldr	r1, [r5, #116]	; 0x74
   14bec:	rsb	r1, r1, #32
   14bf0:	lsr	r1, r4, r1
   14bf4:	add	r0, r0, r1, lsl #2
   14bf8:	pop	{r4, r5, fp, pc}

00014bfc <flatcc_builder_create_table@@Base>:
   14bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c00:	add	fp, sp, #28
   14c04:	sub	sp, sp, #84	; 0x54
   14c08:	strh	r3, [fp, #-30]	; 0xffffffe2
   14c0c:	ldr	r4, [fp, #12]
   14c10:	cmn	r4, #1
   14c14:	ble	14d44 <flatcc_builder_create_table@@Base+0x148>
   14c18:	ldr	r8, [fp, #16]
   14c1c:	tst	r8, #1
   14c20:	beq	14d64 <flatcc_builder_create_table@@Base+0x168>
   14c24:	mov	sl, r2
   14c28:	mov	r6, r1
   14c2c:	mov	r5, r0
   14c30:	sub	r0, fp, #30
   14c34:	mov	r1, #4
   14c38:	bl	1459c <flatcc_builder_start_vector@@Base+0x80>
   14c3c:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   14c40:	mov	r0, r5
   14c44:	mov	r1, r7
   14c48:	bl	13a2c <flatcc_builder_create_buffer@@Base+0x1d0>
   14c4c:	mov	r0, r5
   14c50:	mov	r1, sl
   14c54:	mov	r2, r7
   14c58:	bl	137b0 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14c5c:	mov	r9, r0
   14c60:	mvn	r0, #3
   14c64:	sub	r0, r0, sl
   14c68:	sub	r0, r0, r9
   14c6c:	str	r5, [sp]
   14c70:	ldr	r1, [r5, #136]	; 0x88
   14c74:	add	r5, r0, r1
   14c78:	rsb	r0, r8, #1
   14c7c:	add	r0, r0, r5
   14c80:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14c84:	str	r0, [fp, #-36]	; 0xffffffdc
   14c88:	cmp	r4, #1
   14c8c:	blt	14cbc <flatcc_builder_create_table@@Base+0xc0>
   14c90:	mvn	r0, #3
   14c94:	ldr	r7, [fp, #8]
   14c98:	sub	r5, r0, r5
   14c9c:	ldrh	r8, [r7], #2
   14ca0:	ldr	r0, [r8, r6]
   14ca4:	add	r0, r5, r0
   14ca8:	sub	r0, r0, r8
   14cac:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14cb0:	str	r0, [r8, r6]
   14cb4:	subs	r4, r4, #1
   14cb8:	bne	14c9c <flatcc_builder_create_table@@Base+0xa0>
   14cbc:	sub	r0, fp, #36	; 0x24
   14cc0:	str	r0, [sp, #12]
   14cc4:	mov	r0, #4
   14cc8:	str	r0, [sp, #4]
   14ccc:	str	r0, [sp, #16]
   14cd0:	mov	r0, #1
   14cd4:	str	r0, [sp, #8]
   14cd8:	cmp	sl, #0
   14cdc:	beq	14cf8 <flatcc_builder_create_table@@Base+0xfc>
   14ce0:	str	r6, [sp, #20]
   14ce4:	str	sl, [sp, #24]
   14ce8:	mov	r0, #2
   14cec:	str	r0, [sp, #8]
   14cf0:	add	r0, sl, #4
   14cf4:	str	r0, [sp, #4]
   14cf8:	cmp	r9, #0
   14cfc:	ldr	r0, [sp]
   14d00:	beq	14d34 <flatcc_builder_create_table@@Base+0x138>
   14d04:	ldr	r2, [sp, #4]
   14d08:	ldr	r1, [sp, #8]
   14d0c:	add	r2, r2, r9
   14d10:	str	r2, [sp, #4]
   14d14:	add	r2, sp, #4
   14d18:	add	r3, r2, r1, lsl #3
   14d1c:	movw	r2, #29024	; 0x7160
   14d20:	movt	r2, #1
   14d24:	str	r2, [r3, #8]
   14d28:	str	r9, [r3, #12]
   14d2c:	add	r1, r1, #1
   14d30:	str	r1, [sp, #8]
   14d34:	add	r1, sp, #4
   14d38:	bl	137c8 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14d3c:	sub	sp, fp, #28
   14d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d44:	movw	r0, #31438	; 0x7ace
   14d48:	movt	r0, #1
   14d4c:	movw	r1, #29554	; 0x7372
   14d50:	movt	r1, #1
   14d54:	movw	r3, #31456	; 0x7ae0
   14d58:	movt	r3, #1
   14d5c:	movw	r2, #1237	; 0x4d5
   14d60:	bl	1249c <__assert_fail@plt>
   14d64:	movw	r0, #31612	; 0x7b7c
   14d68:	movt	r0, #1
   14d6c:	movw	r1, #29554	; 0x7372
   14d70:	movt	r1, #1
   14d74:	movw	r3, #31456	; 0x7ae0
   14d78:	movt	r3, #1
   14d7c:	movw	r2, #1243	; 0x4db
   14d80:	bl	1249c <__assert_fail@plt>

00014d84 <flatcc_builder_check_required_field@@Base>:
   14d84:	ldr	r2, [r0, #32]
   14d88:	ldrh	r2, [r2, #14]
   14d8c:	cmp	r2, #3
   14d90:	bne	14dc0 <flatcc_builder_check_required_field@@Base+0x3c>
   14d94:	ldrh	r3, [r0, #8]
   14d98:	mov	r2, #0
   14d9c:	cmp	r3, r1
   14da0:	bls	14db8 <flatcc_builder_check_required_field@@Base+0x34>
   14da4:	ldr	r0, [r0, #4]
   14da8:	add	r0, r0, r1, lsl #1
   14dac:	ldrh	r2, [r0]
   14db0:	cmp	r2, #0
   14db4:	movwne	r2, #1
   14db8:	mov	r0, r2
   14dbc:	bx	lr
   14dc0:	push	{fp, lr}
   14dc4:	mov	fp, sp
   14dc8:	movw	r0, #31623	; 0x7b87
   14dcc:	movt	r0, #1
   14dd0:	movw	r1, #29554	; 0x7372
   14dd4:	movt	r1, #1
   14dd8:	movw	r3, #31666	; 0x7bb2
   14ddc:	movt	r3, #1
   14de0:	movw	r2, #1272	; 0x4f8
   14de4:	bl	1249c <__assert_fail@plt>

00014de8 <flatcc_builder_check_union_field@@Base>:
   14de8:	mov	r2, r0
   14dec:	ldr	r0, [r0, #32]
   14df0:	ldrh	r0, [r0, #14]
   14df4:	cmp	r0, #3
   14df8:	bne	14e58 <flatcc_builder_check_union_field@@Base+0x70>
   14dfc:	mov	r0, #0
   14e00:	cmp	r1, #0
   14e04:	ldrhne	r3, [r2, #8]
   14e08:	cmpne	r3, r1
   14e0c:	bhi	14e14 <flatcc_builder_check_union_field@@Base+0x2c>
   14e10:	bx	lr
   14e14:	ldr	r0, [r2, #4]
   14e18:	add	r0, r0, r1, lsl #1
   14e1c:	ldrh	r1, [r0, #-2]
   14e20:	cmp	r1, #0
   14e24:	beq	14e48 <flatcc_builder_check_union_field@@Base+0x60>
   14e28:	ldr	r2, [r2, #16]
   14e2c:	ldrb	r1, [r2, r1]
   14e30:	ldrh	r0, [r0]
   14e34:	cmp	r1, #0
   14e38:	beq	14e4c <flatcc_builder_check_union_field@@Base+0x64>
   14e3c:	cmp	r0, #0
   14e40:	movwne	r0, #1
   14e44:	bx	lr
   14e48:	ldrh	r0, [r0]
   14e4c:	clz	r0, r0
   14e50:	lsr	r0, r0, #5
   14e54:	bx	lr
   14e58:	push	{fp, lr}
   14e5c:	mov	fp, sp
   14e60:	movw	r0, #31623	; 0x7b87
   14e64:	movt	r0, #1
   14e68:	movw	r1, #29554	; 0x7372
   14e6c:	movt	r1, #1
   14e70:	movw	r3, #31749	; 0x7c05
   14e74:	movt	r3, #1
   14e78:	movw	r2, #1279	; 0x4ff
   14e7c:	bl	1249c <__assert_fail@plt>

00014e80 <flatcc_builder_check_required@@Base>:
   14e80:	push	{fp, lr}
   14e84:	mov	fp, sp
   14e88:	mov	r3, r0
   14e8c:	ldr	r0, [r0, #32]
   14e90:	ldrh	r0, [r0, #14]
   14e94:	cmp	r0, #3
   14e98:	bne	14ef0 <flatcc_builder_check_required@@Base+0x70>
   14e9c:	ldrh	ip, [r3, #8]
   14ea0:	mov	r0, #0
   14ea4:	cmp	ip, r2
   14ea8:	movge	r0, #1
   14eac:	cmpge	r2, #1
   14eb0:	bge	14eb8 <flatcc_builder_check_required@@Base+0x38>
   14eb4:	pop	{fp, pc}
   14eb8:	ldr	ip, [r3, #4]
   14ebc:	mov	lr, #0
   14ec0:	b	14ed4 <flatcc_builder_check_required@@Base+0x54>
   14ec4:	add	lr, lr, #1
   14ec8:	add	r1, r1, #2
   14ecc:	cmp	lr, r2
   14ed0:	popge	{fp, pc}
   14ed4:	ldrh	r3, [r1]
   14ed8:	add	r3, ip, r3, lsl #1
   14edc:	ldrh	r3, [r3]
   14ee0:	cmp	r3, #0
   14ee4:	bne	14ec4 <flatcc_builder_check_required@@Base+0x44>
   14ee8:	mov	r0, #0
   14eec:	pop	{fp, pc}
   14ef0:	movw	r0, #31623	; 0x7b87
   14ef4:	movt	r0, #1
   14ef8:	movw	r1, #29554	; 0x7372
   14efc:	movt	r1, #1
   14f00:	movw	r3, #31829	; 0x7c55
   14f04:	movt	r3, #1
   14f08:	movw	r2, #1297	; 0x511
   14f0c:	bl	1249c <__assert_fail@plt>

00014f10 <flatcc_builder_end_table@@Base>:
   14f10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f14:	add	fp, sp, #24
   14f18:	sub	sp, sp, #16
   14f1c:	mov	r4, r0
   14f20:	ldr	r0, [r0, #32]
   14f24:	ldrh	r0, [r0, #14]
   14f28:	cmp	r0, #3
   14f2c:	bne	1503c <flatcc_builder_end_table@@Base+0x12c>
   14f30:	ldrh	r0, [r4, #8]
   14f34:	mov	r1, #4
   14f38:	add	r0, r1, r0, lsl #1
   14f3c:	ldr	r6, [r4, #4]
   14f40:	strh	r0, [r6, #-4]!
   14f44:	ldrh	r1, [r4, #20]
   14f48:	add	r1, r1, #4
   14f4c:	strh	r1, [r6, #2]
   14f50:	uxth	r5, r0
   14f54:	ldr	r0, [r4, #12]
   14f58:	eor	r0, r0, r5
   14f5c:	movw	r2, #31153	; 0x79b1
   14f60:	movt	r2, #40503	; 0x9e37
   14f64:	mul	r0, r0, r2
   14f68:	uxth	r1, r1
   14f6c:	eor	r0, r0, r1
   14f70:	mul	r3, r0, r2
   14f74:	str	r3, [r4, #12]
   14f78:	mov	r0, r4
   14f7c:	mov	r1, r6
   14f80:	mov	r2, r5
   14f84:	bl	149bc <flatcc_builder_create_cached_vtable@@Base>
   14f88:	cmp	r0, #0
   14f8c:	beq	1502c <flatcc_builder_end_table@@Base+0x11c>
   14f90:	mov	r7, r0
   14f94:	mov	r8, #0
   14f98:	mov	r0, r6
   14f9c:	mov	r1, #0
   14fa0:	mov	r2, r5
   14fa4:	bl	1246c <memset@plt>
   14fa8:	ldrh	r3, [r4, #130]	; 0x82
   14fac:	ldr	r0, [r4, #76]	; 0x4c
   14fb0:	ldr	r6, [r4]
   14fb4:	ldr	r1, [r4, #16]
   14fb8:	ldr	r2, [r4, #20]
   14fbc:	ldr	r5, [r4, #32]
   14fc0:	ldr	r5, [r5, #20]
   14fc4:	add	r0, r0, r5
   14fc8:	sub	r6, r6, r0
   14fcc:	asr	r6, r6, #1
   14fd0:	stm	sp, {r0, r6, r7}
   14fd4:	mov	r0, r4
   14fd8:	bl	14bfc <flatcc_builder_create_table@@Base>
   14fdc:	cmp	r0, #0
   14fe0:	beq	15030 <flatcc_builder_end_table@@Base+0x120>
   14fe4:	mov	r5, r0
   14fe8:	ldr	r0, [r4, #32]
   14fec:	ldr	r1, [r4, #52]	; 0x34
   14ff0:	ldr	r2, [r4, #76]	; 0x4c
   14ff4:	ldr	r3, [r0, #24]
   14ff8:	str	r3, [r4, #12]
   14ffc:	ldrh	r3, [r0, #28]
   15000:	strh	r3, [r4, #8]
   15004:	ldr	r3, [r0, #16]
   15008:	add	r1, r1, r3
   1500c:	str	r1, [r4, #4]
   15010:	ldr	r0, [r0, #20]
   15014:	add	r0, r2, r0
   15018:	str	r0, [r4]
   1501c:	mov	r0, r4
   15020:	bl	13d84 <flatcc_builder_end_buffer@@Base+0xc8>
   15024:	mov	r8, r5
   15028:	b	15030 <flatcc_builder_end_table@@Base+0x120>
   1502c:	mov	r8, #0
   15030:	mov	r0, r8
   15034:	sub	sp, fp, #24
   15038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1503c:	movw	r0, #31623	; 0x7b87
   15040:	movt	r0, #1
   15044:	movw	r1, #29554	; 0x7372
   15048:	movt	r1, #1
   1504c:	movw	r3, #31919	; 0x7caf
   15050:	movt	r3, #1
   15054:	movw	r2, #1317	; 0x525
   15058:	bl	1249c <__assert_fail@plt>

0001505c <flatcc_builder_create_vector@@Base>:
   1505c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15060:	add	fp, sp, #24
   15064:	sub	sp, sp, #80	; 0x50
   15068:	mov	r4, r0
   1506c:	ldr	r0, [fp, #8]
   15070:	strh	r0, [fp, #-26]	; 0xffffffe6
   15074:	ldr	r0, [fp, #12]
   15078:	cmp	r2, r0
   1507c:	bhi	1514c <flatcc_builder_create_vector@@Base+0xf0>
   15080:	mov	r6, r3
   15084:	mov	r7, r2
   15088:	mov	r8, r1
   1508c:	sub	r0, fp, #26
   15090:	mov	r9, #4
   15094:	mov	r1, #4
   15098:	bl	1459c <flatcc_builder_start_vector@@Base+0x80>
   1509c:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   150a0:	mov	r0, r4
   150a4:	mov	r1, r5
   150a8:	bl	13a2c <flatcc_builder_create_buffer@@Base+0x1d0>
   150ac:	mov	r0, r7
   150b0:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   150b4:	str	r7, [fp, #-32]	; 0xffffffe0
   150b8:	mul	r6, r6, r7
   150bc:	mov	r0, r4
   150c0:	mov	r1, r6
   150c4:	mov	r2, r5
   150c8:	bl	137b0 <flatcc_builder_embed_buffer@@Base+0x1c8>
   150cc:	str	r9, [sp]
   150d0:	sub	r1, fp, #32
   150d4:	str	r1, [sp, #8]
   150d8:	str	r9, [sp, #12]
   150dc:	mov	r1, #1
   150e0:	str	r1, [sp, #4]
   150e4:	cmp	r6, #0
   150e8:	beq	15104 <flatcc_builder_create_vector@@Base+0xa8>
   150ec:	str	r8, [sp, #16]
   150f0:	str	r6, [sp, #20]
   150f4:	mov	r1, #2
   150f8:	str	r1, [sp, #4]
   150fc:	add	r1, r6, #4
   15100:	str	r1, [sp]
   15104:	cmp	r0, #0
   15108:	beq	15138 <flatcc_builder_create_vector@@Base+0xdc>
   1510c:	ldm	sp, {r1, r2}
   15110:	add	r1, r1, r0
   15114:	str	r1, [sp]
   15118:	mov	r1, sp
   1511c:	add	r1, r1, r2, lsl #3
   15120:	movw	r3, #29024	; 0x7160
   15124:	movt	r3, #1
   15128:	str	r3, [r1, #8]
   1512c:	str	r0, [r1, #12]
   15130:	add	r0, r2, #1
   15134:	str	r0, [sp, #4]
   15138:	mov	r1, sp
   1513c:	mov	r0, r4
   15140:	bl	137c8 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15144:	sub	sp, fp, #24
   15148:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1514c:	movw	r0, #31985	; 0x7cf1
   15150:	movt	r0, #1
   15154:	movw	r1, #29554	; 0x7372
   15158:	movt	r1, #1
   1515c:	movw	r3, #32004	; 0x7d04
   15160:	movt	r3, #1
   15164:	movw	r2, #1365	; 0x555
   15168:	bl	1249c <__assert_fail@plt>

0001516c <flatcc_builder_end_vector@@Base>:
   1516c:	push	{r4, r5, fp, lr}
   15170:	add	fp, sp, #8
   15174:	sub	sp, sp, #8
   15178:	mov	r4, r0
   1517c:	ldr	r0, [r0, #32]
   15180:	ldrh	r1, [r0, #14]
   15184:	cmp	r1, #4
   15188:	bne	151cc <flatcc_builder_end_vector@@Base+0x60>
   1518c:	ldr	r1, [r4, #16]
   15190:	ldrh	r5, [r4, #130]	; 0x82
   15194:	ldr	r3, [r0, #16]
   15198:	ldr	r2, [r0, #20]
   1519c:	ldr	r0, [r0, #24]
   151a0:	str	r5, [sp]
   151a4:	str	r0, [sp, #4]
   151a8:	mov	r0, r4
   151ac:	bl	1505c <flatcc_builder_create_vector@@Base>
   151b0:	mov	r5, r0
   151b4:	cmp	r0, #0
   151b8:	movne	r0, r4
   151bc:	blne	13d84 <flatcc_builder_end_buffer@@Base+0xc8>
   151c0:	mov	r0, r5
   151c4:	sub	sp, fp, #8
   151c8:	pop	{r4, r5, fp, pc}
   151cc:	movw	r0, #30357	; 0x7695
   151d0:	movt	r0, #1
   151d4:	movw	r1, #29554	; 0x7372
   151d8:	movt	r1, #1
   151dc:	movw	r3, #32122	; 0x7d7a
   151e0:	movt	r3, #1
   151e4:	movw	r2, #1400	; 0x578
   151e8:	bl	1249c <__assert_fail@plt>

000151ec <flatcc_builder_vector_count@@Base>:
   151ec:	ldr	r0, [r0, #32]
   151f0:	ldr	r0, [r0, #20]
   151f4:	bx	lr

000151f8 <flatcc_builder_vector_edit@@Base>:
   151f8:	ldr	r0, [r0, #16]
   151fc:	bx	lr

00015200 <flatcc_builder_create_offset_vector_direct@@Base>:
   15200:	mov	r3, #0
   15204:	b	15208 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15208:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1520c:	add	fp, sp, #24
   15210:	sub	sp, sp, #80	; 0x50
   15214:	mov	r8, r0
   15218:	mov	r0, #0
   1521c:	cmn	r2, #-1073741823	; 0xc0000001
   15220:	bhi	15350 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   15224:	mov	r5, r3
   15228:	mov	r9, r2
   1522c:	mov	r7, r1
   15230:	mov	r6, #4
   15234:	mov	r0, r8
   15238:	mov	r1, #4
   1523c:	bl	13a2c <flatcc_builder_create_buffer@@Base+0x1d0>
   15240:	mov	r0, r9
   15244:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15248:	str	r9, [fp, #-28]	; 0xffffffe4
   1524c:	lsl	r4, r9, #2
   15250:	mov	r0, r8
   15254:	mov	r1, r4
   15258:	mov	r2, #4
   1525c:	bl	137b0 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15260:	str	r6, [sp, #4]
   15264:	sub	r1, fp, #28
   15268:	str	r1, [sp, #12]
   1526c:	str	r6, [sp, #16]
   15270:	mov	r1, #1
   15274:	str	r1, [sp, #8]
   15278:	mov	r1, #0
   1527c:	cmp	r1, r9, lsl #2
   15280:	beq	1529c <flatcc_builder_create_offset_vector_direct@@Base+0x9c>
   15284:	str	r7, [sp, #20]
   15288:	str	r4, [sp, #24]
   1528c:	mov	r1, #2
   15290:	str	r1, [sp, #8]
   15294:	add	r1, r4, #4
   15298:	str	r1, [sp, #4]
   1529c:	cmp	r0, #0
   152a0:	beq	152d0 <flatcc_builder_create_offset_vector_direct@@Base+0xd0>
   152a4:	ldmib	sp, {r1, r2}
   152a8:	add	r1, r1, r0
   152ac:	str	r1, [sp, #4]
   152b0:	add	r1, sp, #4
   152b4:	add	r1, r1, r2, lsl #3
   152b8:	movw	r3, #29024	; 0x7160
   152bc:	movt	r3, #1
   152c0:	str	r3, [r1, #8]
   152c4:	str	r0, [r1, #12]
   152c8:	add	r0, r2, #1
   152cc:	str	r0, [sp, #8]
   152d0:	cmp	r9, #0
   152d4:	beq	15344 <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   152d8:	ldr	r0, [r8, #136]	; 0x88
   152dc:	mvn	r1, #3
   152e0:	sub	r0, r1, r0
   152e4:	ldr	r1, [sp, #4]
   152e8:	add	r4, r0, r1
   152ec:	mov	r6, #0
   152f0:	ldr	r0, [r7, r6, lsl #2]
   152f4:	cmp	r0, #0
   152f8:	beq	15320 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   152fc:	add	r0, r4, r0
   15300:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15304:	str	r0, [r7, r6, lsl #2]
   15308:	cmp	r5, #0
   1530c:	beq	15334 <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   15310:	ldrb	r0, [r5, r6]
   15314:	cmp	r0, #0
   15318:	bne	15334 <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   1531c:	b	15358 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   15320:	cmp	r5, #0
   15324:	beq	15378 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   15328:	ldrb	r0, [r5, r6]
   1532c:	cmp	r0, #0
   15330:	bne	15398 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   15334:	sub	r4, r4, #4
   15338:	add	r6, r6, #1
   1533c:	cmp	r6, r9
   15340:	bcc	152f0 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   15344:	add	r1, sp, #4
   15348:	mov	r0, r8
   1534c:	bl	137c8 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15350:	sub	sp, fp, #24
   15354:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15358:	movw	r0, #34060	; 0x850c
   1535c:	movt	r0, #1
   15360:	movw	r1, #29554	; 0x7372
   15364:	movt	r1, #1
   15368:	movw	r3, #34074	; 0x851a
   1536c:	movt	r3, #1
   15370:	movw	r2, #1457	; 0x5b1
   15374:	bl	1249c <__assert_fail@plt>
   15378:	movw	r0, #34072	; 0x8518
   1537c:	movt	r0, #1
   15380:	movw	r1, #29554	; 0x7372
   15384:	movt	r1, #1
   15388:	movw	r3, #34074	; 0x851a
   1538c:	movt	r3, #1
   15390:	movw	r2, #1463	; 0x5b7
   15394:	bl	1249c <__assert_fail@plt>
   15398:	movw	r0, #34205	; 0x859d
   1539c:	movt	r0, #1
   153a0:	movw	r1, #29554	; 0x7372
   153a4:	movt	r1, #1
   153a8:	movw	r3, #34074	; 0x851a
   153ac:	movt	r3, #1
   153b0:	movw	r2, #1461	; 0x5b5
   153b4:	bl	1249c <__assert_fail@plt>

000153b8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   153b8:	push	{r4, r5, fp, lr}
   153bc:	add	fp, sp, #8
   153c0:	mov	r3, r1
   153c4:	mov	r4, r0
   153c8:	ldr	r0, [r0, #32]
   153cc:	ldrh	r1, [r0, #14]
   153d0:	cmp	r1, #5
   153d4:	bne	15400 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   153d8:	ldr	r2, [r0, #20]
   153dc:	ldr	r1, [r4, #16]
   153e0:	mov	r0, r4
   153e4:	bl	15208 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   153e8:	mov	r5, r0
   153ec:	cmp	r0, #0
   153f0:	movne	r0, r4
   153f4:	blne	13d84 <flatcc_builder_end_buffer@@Base+0xc8>
   153f8:	mov	r0, r5
   153fc:	pop	{r4, r5, fp, pc}
   15400:	movw	r0, #30606	; 0x778e
   15404:	movt	r0, #1
   15408:	movw	r1, #29554	; 0x7372
   1540c:	movt	r1, #1
   15410:	movw	r3, #32263	; 0x7e07
   15414:	movt	r3, #1
   15418:	movw	r2, #1493	; 0x5d5
   1541c:	bl	1249c <__assert_fail@plt>

00015420 <flatcc_builder_offset_vector_edit@@Base>:
   15420:	ldr	r0, [r0, #16]
   15424:	bx	lr

00015428 <flatcc_builder_offset_vector_count@@Base>:
   15428:	ldr	r0, [r0, #32]
   1542c:	ldr	r0, [r0, #20]
   15430:	bx	lr

00015434 <flatcc_builder_table_add_union@@Base>:
   15434:	push	{r4, r5, r6, r7, fp, lr}
   15438:	add	fp, sp, #16
   1543c:	mov	r5, r0
   15440:	ldr	r0, [r0, #32]
   15444:	ldrh	r0, [r0, #14]
   15448:	cmp	r0, #3
   1544c:	bne	154c0 <flatcc_builder_table_add_union@@Base+0x8c>
   15450:	mov	r7, r3
   15454:	mov	r6, r1
   15458:	uxtb	r4, r2
   1545c:	cmp	r3, #0
   15460:	beq	1546c <flatcc_builder_table_add_union@@Base+0x38>
   15464:	cmp	r4, #0
   15468:	beq	154e0 <flatcc_builder_table_add_union@@Base+0xac>
   1546c:	cmp	r7, #0
   15470:	beq	1548c <flatcc_builder_table_add_union@@Base+0x58>
   15474:	mov	r0, r5
   15478:	mov	r1, r6
   1547c:	bl	15540 <flatcc_builder_table_add_offset@@Base>
   15480:	cmp	r0, #0
   15484:	beq	15520 <flatcc_builder_table_add_union@@Base+0xec>
   15488:	str	r7, [r0]
   1548c:	sub	r1, r6, #1
   15490:	mov	r0, r5
   15494:	mov	r2, #1
   15498:	mov	r3, #1
   1549c:	bl	15604 <flatcc_builder_table_add@@Base>
   154a0:	cmp	r0, #0
   154a4:	beq	15500 <flatcc_builder_table_add_union@@Base+0xcc>
   154a8:	mov	r5, r0
   154ac:	mov	r0, r4
   154b0:	bl	156e4 <flatcc_builder_table_add@@Base+0xe0>
   154b4:	strb	r4, [r5]
   154b8:	mov	r0, #0
   154bc:	pop	{r4, r5, r6, r7, fp, pc}
   154c0:	movw	r0, #31623	; 0x7b87
   154c4:	movt	r0, #1
   154c8:	movw	r1, #29554	; 0x7372
   154cc:	movt	r1, #1
   154d0:	movw	r3, #32377	; 0x7e79
   154d4:	movt	r3, #1
   154d8:	movw	r2, #1518	; 0x5ee
   154dc:	bl	1249c <__assert_fail@plt>
   154e0:	movw	r0, #32465	; 0x7ed1
   154e4:	movt	r0, #1
   154e8:	movw	r1, #29554	; 0x7372
   154ec:	movt	r1, #1
   154f0:	movw	r3, #32377	; 0x7e79
   154f4:	movt	r3, #1
   154f8:	movw	r2, #1519	; 0x5ef
   154fc:	bl	1249c <__assert_fail@plt>
   15500:	movw	r0, #32509	; 0x7efd
   15504:	movt	r0, #1
   15508:	movw	r1, #29554	; 0x7372
   1550c:	movt	r1, #1
   15510:	movw	r3, #32377	; 0x7e79
   15514:	movt	r3, #1
   15518:	movw	r2, #1526	; 0x5f6
   1551c:	bl	1249c <__assert_fail@plt>
   15520:	movw	r0, #32499	; 0x7ef3
   15524:	movt	r0, #1
   15528:	movw	r1, #29554	; 0x7372
   1552c:	movt	r1, #1
   15530:	movw	r3, #32377	; 0x7e79
   15534:	movt	r3, #1
   15538:	movw	r2, #1522	; 0x5f2
   1553c:	bl	1249c <__assert_fail@plt>

00015540 <flatcc_builder_table_add_offset@@Base>:
   15540:	push	{fp, lr}
   15544:	mov	fp, sp
   15548:	ldr	r2, [r0, #32]
   1554c:	ldrh	r2, [r2, #14]
   15550:	cmp	r2, #3
   15554:	bne	155a4 <flatcc_builder_table_add_offset@@Base+0x64>
   15558:	movw	r2, #32765	; 0x7ffd
   1555c:	cmp	r1, r2
   15560:	bcs	155c4 <flatcc_builder_table_add_offset@@Base+0x84>
   15564:	ldr	r2, [r0, #4]
   15568:	add	r2, r2, r1, lsl #1
   1556c:	ldrh	r2, [r2]
   15570:	cmp	r2, #0
   15574:	bne	155e4 <flatcc_builder_table_add_offset@@Base+0xa4>
   15578:	ldr	r2, [r0, #12]
   1557c:	eor	r2, r2, r1
   15580:	movw	r3, #31153	; 0x79b1
   15584:	movt	r3, #40503	; 0x9e37
   15588:	mul	r2, r2, r3
   1558c:	eor	r2, r2, #4
   15590:	mul	r2, r2, r3
   15594:	str	r2, [r0, #12]
   15598:	uxth	r1, r1
   1559c:	pop	{fp, lr}
   155a0:	b	15f10 <flatcc_builder_table_add_copy@@Base+0x40>
   155a4:	movw	r0, #31623	; 0x7b87
   155a8:	movt	r0, #1
   155ac:	movw	r1, #29554	; 0x7372
   155b0:	movt	r1, #1
   155b4:	movw	r3, #33403	; 0x827b
   155b8:	movt	r3, #1
   155bc:	movw	r2, #1811	; 0x713
   155c0:	bl	1249c <__assert_fail@plt>
   155c4:	movw	r0, #33275	; 0x81fb
   155c8:	movt	r0, #1
   155cc:	movw	r1, #29554	; 0x7372
   155d0:	movt	r1, #1
   155d4:	movw	r3, #33403	; 0x827b
   155d8:	movt	r3, #1
   155dc:	movw	r2, #1812	; 0x714
   155e0:	bl	1249c <__assert_fail@plt>
   155e4:	movw	r0, #34072	; 0x8518
   155e8:	movt	r0, #1
   155ec:	movw	r1, #29554	; 0x7372
   155f0:	movt	r1, #1
   155f4:	movw	r3, #33403	; 0x827b
   155f8:	movt	r3, #1
   155fc:	movw	r2, #1819	; 0x71b
   15600:	bl	1249c <__assert_fail@plt>

00015604 <flatcc_builder_table_add@@Base>:
   15604:	push	{fp, lr}
   15608:	mov	fp, sp
   1560c:	mov	ip, r3
   15610:	ldr	r3, [r0, #32]
   15614:	ldrh	r3, [r3, #14]
   15618:	cmp	r3, #3
   1561c:	bne	15684 <flatcc_builder_table_add@@Base+0x80>
   15620:	movw	r3, #32765	; 0x7ffd
   15624:	cmp	r1, r3
   15628:	bcs	156a4 <flatcc_builder_table_add@@Base+0xa0>
   1562c:	mov	lr, r2
   15630:	ldrh	r3, [r0, #130]	; 0x82
   15634:	cmp	r3, ip
   15638:	strhcc	ip, [r0, #130]	; 0x82
   1563c:	ldr	r3, [r0, #4]
   15640:	add	r3, r3, r1, lsl #1
   15644:	ldrh	r3, [r3]
   15648:	cmp	r3, #0
   1564c:	bne	156c4 <flatcc_builder_table_add@@Base+0xc0>
   15650:	ldr	r3, [r0, #12]
   15654:	eor	r3, r3, r1
   15658:	movw	r2, #31153	; 0x79b1
   1565c:	movt	r2, #40503	; 0x9e37
   15660:	mul	r3, r3, r2
   15664:	eor	r3, r3, lr
   15668:	mul	r2, r3, r2
   1566c:	str	r2, [r0, #12]
   15670:	uxth	r3, r1
   15674:	mov	r1, lr
   15678:	mov	r2, ip
   1567c:	pop	{fp, lr}
   15680:	b	15e04 <flatcc_builder_string_len@@Base+0xc>
   15684:	movw	r0, #31623	; 0x7b87
   15688:	movt	r0, #1
   1568c:	movw	r1, #29554	; 0x7372
   15690:	movt	r1, #1
   15694:	movw	r3, #33201	; 0x81b1
   15698:	movt	r3, #1
   1569c:	movw	r2, #1773	; 0x6ed
   156a0:	bl	1249c <__assert_fail@plt>
   156a4:	movw	r0, #33275	; 0x81fb
   156a8:	movt	r0, #1
   156ac:	movw	r1, #29554	; 0x7372
   156b0:	movt	r1, #1
   156b4:	movw	r3, #33201	; 0x81b1
   156b8:	movt	r3, #1
   156bc:	movw	r2, #1774	; 0x6ee
   156c0:	bl	1249c <__assert_fail@plt>
   156c4:	movw	r0, #34072	; 0x8518
   156c8:	movt	r0, #1
   156cc:	movw	r1, #29554	; 0x7372
   156d0:	movt	r1, #1
   156d4:	movw	r3, #33201	; 0x81b1
   156d8:	movt	r3, #1
   156dc:	movw	r2, #1784	; 0x6f8
   156e0:	bl	1249c <__assert_fail@plt>
   156e4:	bx	lr

000156e8 <flatcc_builder_table_add_union_vector@@Base>:
   156e8:	push	{r4, r5, r6, r7, fp, lr}
   156ec:	add	fp, sp, #16
   156f0:	mov	r6, r0
   156f4:	ldr	r0, [r0, #32]
   156f8:	ldrh	r0, [r0, #14]
   156fc:	cmp	r0, #3
   15700:	bne	15768 <flatcc_builder_table_add_union_vector@@Base+0x80>
   15704:	mov	r4, r3
   15708:	mov	r7, r2
   1570c:	mov	r5, r1
   15710:	clz	r0, r3
   15714:	lsr	r0, r0, #5
   15718:	clz	r1, r2
   1571c:	lsr	r1, r1, #5
   15720:	cmp	r1, r0
   15724:	bne	15788 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   15728:	cmp	r7, #0
   1572c:	beq	15760 <flatcc_builder_table_add_union_vector@@Base+0x78>
   15730:	sub	r1, r5, #1
   15734:	mov	r0, r6
   15738:	bl	15540 <flatcc_builder_table_add_offset@@Base>
   1573c:	cmp	r0, #0
   15740:	beq	157a8 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   15744:	str	r7, [r0]
   15748:	mov	r0, r6
   1574c:	mov	r1, r5
   15750:	bl	15540 <flatcc_builder_table_add_offset@@Base>
   15754:	cmp	r0, #0
   15758:	beq	157c8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1575c:	str	r4, [r0]
   15760:	mov	r0, #0
   15764:	pop	{r4, r5, r6, r7, fp, pc}
   15768:	movw	r0, #31623	; 0x7b87
   1576c:	movt	r0, #1
   15770:	movw	r1, #29554	; 0x7372
   15774:	movt	r1, #1
   15778:	movw	r3, #32521	; 0x7f09
   1577c:	movt	r3, #1
   15780:	mov	r2, #1536	; 0x600
   15784:	bl	1249c <__assert_fail@plt>
   15788:	movw	r0, #32620	; 0x7f6c
   1578c:	movt	r0, #1
   15790:	movw	r1, #29554	; 0x7372
   15794:	movt	r1, #1
   15798:	movw	r3, #32521	; 0x7f09
   1579c:	movt	r3, #1
   157a0:	movw	r2, #1537	; 0x601
   157a4:	bl	1249c <__assert_fail@plt>
   157a8:	movw	r0, #32499	; 0x7ef3
   157ac:	movt	r0, #1
   157b0:	movw	r1, #29554	; 0x7372
   157b4:	movt	r1, #1
   157b8:	movw	r3, #32521	; 0x7f09
   157bc:	movt	r3, #1
   157c0:	movw	r2, #1540	; 0x604
   157c4:	bl	1249c <__assert_fail@plt>
   157c8:	movw	r0, #32499	; 0x7ef3
   157cc:	movt	r0, #1
   157d0:	movw	r1, #29554	; 0x7372
   157d4:	movt	r1, #1
   157d8:	movw	r3, #32521	; 0x7f09
   157dc:	movt	r3, #1
   157e0:	movw	r2, #1544	; 0x608
   157e4:	bl	1249c <__assert_fail@plt>

000157e8 <flatcc_builder_create_union_vector@@Base>:
   157e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   157ec:	add	fp, sp, #24
   157f0:	sub	sp, sp, #16
   157f4:	mov	r6, r3
   157f8:	mov	r7, r2
   157fc:	mov	r4, r1
   15800:	mov	r5, r0
   15804:	mov	r0, #0
   15808:	str	r0, [r5]
   1580c:	str	r0, [r5, #4]
   15810:	mov	r0, r1
   15814:	bl	145ac <flatcc_builder_start_offset_vector@@Base>
   15818:	cmp	r0, #0
   1581c:	beq	15828 <flatcc_builder_create_union_vector@@Base+0x40>
   15820:	sub	sp, fp, #24
   15824:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15828:	mov	r0, r4
   1582c:	mov	r1, r6
   15830:	bl	140f8 <flatcc_builder_extend_offset_vector@@Base>
   15834:	cmp	r0, #0
   15838:	beq	15820 <flatcc_builder_create_union_vector@@Base+0x38>
   1583c:	mov	r0, r4
   15840:	mov	r1, r6
   15844:	bl	13e74 <flatcc_builder_start_struct@@Base+0x84>
   15848:	cmp	r0, #0
   1584c:	beq	15820 <flatcc_builder_create_union_vector@@Base+0x38>
   15850:	mov	r8, r0
   15854:	mov	r0, r4
   15858:	bl	15420 <flatcc_builder_offset_vector_edit@@Base>
   1585c:	mov	ip, r0
   15860:	cmp	r6, #0
   15864:	beq	15894 <flatcc_builder_create_union_vector@@Base+0xac>
   15868:	add	r0, r7, #4
   1586c:	mov	r1, r6
   15870:	mov	r2, ip
   15874:	mov	r7, r8
   15878:	ldrb	r3, [r0, #-4]
   1587c:	strb	r3, [r7], #1
   15880:	ldr	r3, [r0]
   15884:	str	r3, [r2], #4
   15888:	add	r0, r0, #8
   1588c:	subs	r1, r1, #1
   15890:	bne	15878 <flatcc_builder_create_union_vector@@Base+0x90>
   15894:	str	r6, [sp]
   15898:	add	r0, sp, #8
   1589c:	mov	r1, r4
   158a0:	mov	r2, r8
   158a4:	mov	r3, ip
   158a8:	bl	158c8 <flatcc_builder_create_union_vector_direct@@Base>
   158ac:	ldr	r0, [sp, #8]
   158b0:	ldr	r1, [sp, #12]
   158b4:	stm	r5, {r0, r1}
   158b8:	mov	r0, r4
   158bc:	bl	13d84 <flatcc_builder_end_buffer@@Base+0xc8>
   158c0:	sub	sp, fp, #24
   158c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000158c8 <flatcc_builder_create_union_vector_direct@@Base>:
   158c8:	push	{r4, r5, r6, r7, fp, lr}
   158cc:	add	fp, sp, #16
   158d0:	sub	sp, sp, #8
   158d4:	mov	r5, r2
   158d8:	mov	r6, r1
   158dc:	mov	r4, r0
   158e0:	mov	r0, #0
   158e4:	str	r0, [r4]
   158e8:	str	r0, [r4, #4]
   158ec:	ldr	r7, [fp, #8]
   158f0:	mov	r0, r1
   158f4:	mov	r1, r3
   158f8:	mov	r2, r7
   158fc:	mov	r3, r5
   15900:	bl	15208 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15904:	str	r0, [r4, #4]
   15908:	cmp	r0, #0
   1590c:	beq	15938 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   15910:	mvn	r0, #0
   15914:	mov	r1, #1
   15918:	str	r1, [sp]
   1591c:	str	r0, [sp, #4]
   15920:	mov	r0, r6
   15924:	mov	r1, r5
   15928:	mov	r2, r7
   1592c:	mov	r3, #1
   15930:	bl	1505c <flatcc_builder_create_vector@@Base>
   15934:	str	r0, [r4]
   15938:	sub	sp, fp, #16
   1593c:	pop	{r4, r5, r6, r7, fp, pc}

00015940 <flatcc_builder_start_union_vector@@Base>:
   15940:	push	{r4, r5, fp, lr}
   15944:	add	fp, sp, #8
   15948:	mov	r4, r0
   1594c:	mov	r1, #4
   15950:	bl	13bc4 <flatcc_builder_start_buffer@@Base+0xbc>
   15954:	mvn	r5, #0
   15958:	cmp	r0, #0
   1595c:	beq	15968 <flatcc_builder_start_union_vector@@Base+0x28>
   15960:	mov	r0, r5
   15964:	pop	{r4, r5, fp, pc}
   15968:	ldr	r0, [r4, #32]
   1596c:	mov	r1, #8
   15970:	str	r1, [r0, #16]
   15974:	ldr	r0, [r4, #32]
   15978:	mov	r5, #0
   1597c:	str	r5, [r0, #20]
   15980:	ldr	r0, [r4, #32]
   15984:	mov	r1, #7
   15988:	strh	r1, [r0, #14]
   1598c:	mov	r0, r4
   15990:	mvn	r1, #3
   15994:	bl	13e3c <flatcc_builder_start_struct@@Base+0x4c>
   15998:	mov	r0, r5
   1599c:	pop	{r4, r5, fp, pc}

000159a0 <flatcc_builder_end_union_vector@@Base>:
   159a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   159a4:	add	fp, sp, #24
   159a8:	sub	sp, sp, #16
   159ac:	mov	r9, r0
   159b0:	mov	r0, #0
   159b4:	str	r0, [r9]
   159b8:	str	r0, [r9, #4]
   159bc:	ldr	r0, [r1, #32]
   159c0:	ldrh	r0, [r0, #14]
   159c4:	cmp	r0, #7
   159c8:	bne	15a68 <flatcc_builder_end_union_vector@@Base+0xc8>
   159cc:	mov	r4, r1
   159d0:	mov	r0, r1
   159d4:	bl	15a88 <flatcc_builder_union_vector_count@@Base>
   159d8:	mov	r6, r0
   159dc:	add	r1, r0, r0, lsl #2
   159e0:	mov	r0, r4
   159e4:	bl	13e74 <flatcc_builder_start_struct@@Base+0x84>
   159e8:	cmp	r0, #0
   159ec:	beq	15a60 <flatcc_builder_end_union_vector@@Base+0xc0>
   159f0:	mov	r7, r0
   159f4:	add	r8, r0, r6, lsl #2
   159f8:	mov	r0, r4
   159fc:	bl	15a94 <flatcc_builder_union_vector_edit@@Base>
   15a00:	cmp	r6, #0
   15a04:	beq	15a34 <flatcc_builder_end_union_vector@@Base+0x94>
   15a08:	add	r0, r0, #4
   15a0c:	mov	r1, r6
   15a10:	mov	r2, r7
   15a14:	mov	r3, r8
   15a18:	ldrb	r5, [r0, #-4]
   15a1c:	strb	r5, [r3], #1
   15a20:	ldr	r5, [r0]
   15a24:	str	r5, [r2], #4
   15a28:	add	r0, r0, #8
   15a2c:	subs	r1, r1, #1
   15a30:	bne	15a18 <flatcc_builder_end_union_vector@@Base+0x78>
   15a34:	str	r6, [sp]
   15a38:	add	r0, sp, #8
   15a3c:	mov	r1, r4
   15a40:	mov	r2, r8
   15a44:	mov	r3, r7
   15a48:	bl	158c8 <flatcc_builder_create_union_vector_direct@@Base>
   15a4c:	ldr	r0, [sp, #8]
   15a50:	ldr	r1, [sp, #12]
   15a54:	stm	r9, {r0, r1}
   15a58:	mov	r0, r4
   15a5c:	bl	13d84 <flatcc_builder_end_buffer@@Base+0xc8>
   15a60:	sub	sp, fp, #24
   15a64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15a68:	movw	r0, #32660	; 0x7f94
   15a6c:	movt	r0, #1
   15a70:	movw	r1, #29554	; 0x7372
   15a74:	movt	r1, #1
   15a78:	movw	r3, #32710	; 0x7fc6
   15a7c:	movt	r3, #1
   15a80:	movw	r2, #1617	; 0x651
   15a84:	bl	1249c <__assert_fail@plt>

00015a88 <flatcc_builder_union_vector_count@@Base>:
   15a88:	ldr	r0, [r0, #32]
   15a8c:	ldr	r0, [r0, #20]
   15a90:	bx	lr

00015a94 <flatcc_builder_union_vector_edit@@Base>:
   15a94:	ldr	r0, [r0, #16]
   15a98:	bx	lr

00015a9c <flatcc_builder_extend_union_vector@@Base>:
   15a9c:	push	{r4, r5, fp, lr}
   15aa0:	add	fp, sp, #8
   15aa4:	mov	r5, r1
   15aa8:	mov	r4, r0
   15aac:	mvn	r2, #-536870912	; 0xe0000000
   15ab0:	bl	13f78 <flatcc_builder_extend_vector@@Base+0x44>
   15ab4:	mov	r1, r0
   15ab8:	mov	r0, #0
   15abc:	cmp	r1, #0
   15ac0:	popne	{r4, r5, fp, pc}
   15ac4:	lsl	r1, r5, #3
   15ac8:	mov	r0, r4
   15acc:	bl	13e74 <flatcc_builder_start_struct@@Base+0x84>
   15ad0:	pop	{r4, r5, fp, pc}

00015ad4 <flatcc_builder_truncate_union_vector@@Base>:
   15ad4:	push	{fp, lr}
   15ad8:	mov	fp, sp
   15adc:	ldr	r2, [r0, #32]
   15ae0:	ldrh	r3, [r2, #14]
   15ae4:	cmp	r3, #7
   15ae8:	bne	15b18 <flatcc_builder_truncate_union_vector@@Base+0x44>
   15aec:	ldr	r3, [r2, #20]
   15af0:	cmp	r3, r1
   15af4:	bcc	15b38 <flatcc_builder_truncate_union_vector@@Base+0x64>
   15af8:	sub	r3, r3, r1
   15afc:	str	r3, [r2, #20]
   15b00:	ldr	r2, [r0, #32]
   15b04:	ldr	r2, [r2, #16]
   15b08:	mul	r1, r2, r1
   15b0c:	bl	14400 <flatcc_builder_truncate_vector@@Base+0x84>
   15b10:	mov	r0, #0
   15b14:	pop	{fp, pc}
   15b18:	movw	r0, #32660	; 0x7f94
   15b1c:	movt	r0, #1
   15b20:	movw	r1, #29554	; 0x7372
   15b24:	movt	r1, #1
   15b28:	movw	r3, #32793	; 0x8019
   15b2c:	movt	r3, #1
   15b30:	movw	r2, #1665	; 0x681
   15b34:	bl	1249c <__assert_fail@plt>
   15b38:	movw	r0, #31224	; 0x79f8
   15b3c:	movt	r0, #1
   15b40:	movw	r1, #29554	; 0x7372
   15b44:	movt	r1, #1
   15b48:	movw	r3, #32793	; 0x8019
   15b4c:	movt	r3, #1
   15b50:	movw	r2, #1666	; 0x682
   15b54:	bl	1249c <__assert_fail@plt>

00015b58 <flatcc_builder_union_vector_push@@Base>:
   15b58:	push	{r4, r5, r6, sl, fp, lr}
   15b5c:	add	fp, sp, #16
   15b60:	mov	r4, r2
   15b64:	mov	r5, r1
   15b68:	ldr	r1, [r0, #32]
   15b6c:	ldrh	r2, [r1, #14]
   15b70:	cmp	r2, #7
   15b74:	bne	15bb0 <flatcc_builder_union_vector_push@@Base+0x58>
   15b78:	ldr	r2, [r1, #20]
   15b7c:	mov	r6, #0
   15b80:	cmn	r2, #-536870911	; 0xe0000001
   15b84:	beq	15ba8 <flatcc_builder_union_vector_push@@Base+0x50>
   15b88:	add	r2, r2, #1
   15b8c:	str	r2, [r1, #20]
   15b90:	mov	r1, #8
   15b94:	bl	13e74 <flatcc_builder_start_struct@@Base+0x84>
   15b98:	cmp	r0, #0
   15b9c:	strne	r5, [r0]
   15ba0:	strne	r4, [r0, #4]
   15ba4:	movne	r6, r0
   15ba8:	mov	r0, r6
   15bac:	pop	{r4, r5, r6, sl, fp, pc}
   15bb0:	movw	r0, #32660	; 0x7f94
   15bb4:	movt	r0, #1
   15bb8:	movw	r1, #29554	; 0x7372
   15bbc:	movt	r1, #1
   15bc0:	movw	r3, #32862	; 0x805e
   15bc4:	movt	r3, #1
   15bc8:	movw	r2, #1677	; 0x68d
   15bcc:	bl	1249c <__assert_fail@plt>

00015bd0 <flatcc_builder_append_union_vector@@Base>:
   15bd0:	push	{r4, r5, r6, sl, fp, lr}
   15bd4:	add	fp, sp, #16
   15bd8:	mov	r6, r0
   15bdc:	ldr	r0, [r0, #32]
   15be0:	ldrh	r0, [r0, #14]
   15be4:	cmp	r0, #7
   15be8:	bne	15c28 <flatcc_builder_append_union_vector@@Base+0x58>
   15bec:	mov	r5, r2
   15bf0:	mov	r4, r1
   15bf4:	mov	r0, r6
   15bf8:	mov	r1, r2
   15bfc:	mvn	r2, #-536870912	; 0xe0000000
   15c00:	bl	13f78 <flatcc_builder_extend_vector@@Base+0x44>
   15c04:	mov	r1, r0
   15c08:	mov	r0, #0
   15c0c:	cmp	r1, #0
   15c10:	popne	{r4, r5, r6, sl, fp, pc}
   15c14:	lsl	r2, r5, #3
   15c18:	mov	r0, r6
   15c1c:	mov	r1, r4
   15c20:	bl	14040 <flatcc_builder_vector_push@@Base+0x80>
   15c24:	pop	{r4, r5, r6, sl, fp, pc}
   15c28:	movw	r0, #32660	; 0x7f94
   15c2c:	movt	r0, #1
   15c30:	movw	r1, #29554	; 0x7372
   15c34:	movt	r1, #1
   15c38:	movw	r3, #32971	; 0x80cb
   15c3c:	movt	r3, #1
   15c40:	movw	r2, #1692	; 0x69c
   15c44:	bl	1249c <__assert_fail@plt>

00015c48 <flatcc_builder_create_string@@Base>:
   15c48:	push	{r4, r5, r6, r7, fp, lr}
   15c4c:	add	fp, sp, #16
   15c50:	sub	sp, sp, #80	; 0x50
   15c54:	mov	r5, r2
   15c58:	mov	r6, r1
   15c5c:	mov	r4, r0
   15c60:	mov	r0, r2
   15c64:	bl	137c4 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15c68:	str	r5, [fp, #-20]	; 0xffffffec
   15c6c:	add	r1, r5, #1
   15c70:	mov	r7, #4
   15c74:	mov	r0, r4
   15c78:	mov	r2, #4
   15c7c:	bl	137b0 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15c80:	str	r7, [sp, #4]
   15c84:	sub	r1, fp, #20
   15c88:	str	r1, [sp, #12]
   15c8c:	str	r7, [sp, #16]
   15c90:	mov	r1, #1
   15c94:	str	r1, [sp, #8]
   15c98:	add	r0, r0, #1
   15c9c:	cmp	r5, #0
   15ca0:	beq	15cbc <flatcc_builder_create_string@@Base+0x74>
   15ca4:	str	r6, [sp, #20]
   15ca8:	str	r5, [sp, #24]
   15cac:	mov	r1, #2
   15cb0:	str	r1, [sp, #8]
   15cb4:	add	r1, r5, #4
   15cb8:	str	r1, [sp, #4]
   15cbc:	cmp	r0, #0
   15cc0:	beq	15cf0 <flatcc_builder_create_string@@Base+0xa8>
   15cc4:	ldmib	sp, {r1, r2}
   15cc8:	add	r1, r1, r0
   15ccc:	str	r1, [sp, #4]
   15cd0:	add	r1, sp, #4
   15cd4:	add	r1, r1, r2, lsl #3
   15cd8:	movw	r3, #29024	; 0x7160
   15cdc:	movt	r3, #1
   15ce0:	str	r3, [r1, #8]
   15ce4:	str	r0, [r1, #12]
   15ce8:	add	r0, r2, #1
   15cec:	str	r0, [sp, #8]
   15cf0:	add	r1, sp, #4
   15cf4:	mov	r0, r4
   15cf8:	bl	137c8 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15cfc:	sub	sp, fp, #16
   15d00:	pop	{r4, r5, r6, r7, fp, pc}

00015d04 <flatcc_builder_create_string_str@@Base>:
   15d04:	push	{r4, r5, fp, lr}
   15d08:	add	fp, sp, #8
   15d0c:	mov	r4, r1
   15d10:	mov	r5, r0
   15d14:	mov	r0, r1
   15d18:	bl	12454 <strlen@plt>
   15d1c:	mov	r2, r0
   15d20:	mov	r0, r5
   15d24:	mov	r1, r4
   15d28:	pop	{r4, r5, fp, lr}
   15d2c:	b	15c48 <flatcc_builder_create_string@@Base>

00015d30 <flatcc_builder_create_string_strn@@Base>:
   15d30:	push	{r4, r5, fp, lr}
   15d34:	add	fp, sp, #8
   15d38:	mov	r4, r1
   15d3c:	mov	r5, r0
   15d40:	mov	r0, r1
   15d44:	mov	r1, r2
   15d48:	bl	14350 <flatcc_builder_append_string_strn@@Base+0x30>
   15d4c:	mov	r2, r0
   15d50:	mov	r0, r5
   15d54:	mov	r1, r4
   15d58:	pop	{r4, r5, fp, lr}
   15d5c:	b	15c48 <flatcc_builder_create_string@@Base>

00015d60 <flatcc_builder_end_string@@Base>:
   15d60:	push	{r4, r5, fp, lr}
   15d64:	add	fp, sp, #8
   15d68:	mov	r4, r0
   15d6c:	ldr	r0, [r0, #32]
   15d70:	ldrh	r1, [r0, #14]
   15d74:	cmp	r1, #6
   15d78:	bne	15db0 <flatcc_builder_end_string@@Base+0x50>
   15d7c:	ldr	r2, [r4, #20]
   15d80:	ldr	r0, [r0, #20]
   15d84:	cmp	r0, r2
   15d88:	bne	15dd0 <flatcc_builder_end_string@@Base+0x70>
   15d8c:	ldr	r1, [r4, #16]
   15d90:	mov	r0, r4
   15d94:	bl	15c48 <flatcc_builder_create_string@@Base>
   15d98:	mov	r5, r0
   15d9c:	cmp	r0, #0
   15da0:	movne	r0, r4
   15da4:	blne	13d84 <flatcc_builder_end_buffer@@Base+0xc8>
   15da8:	mov	r0, r5
   15dac:	pop	{r4, r5, fp, pc}
   15db0:	movw	r0, #30871	; 0x7897
   15db4:	movt	r0, #1
   15db8:	movw	r1, #29554	; 0x7372
   15dbc:	movt	r1, #1
   15dc0:	movw	r3, #33098	; 0x814a
   15dc4:	movt	r3, #1
   15dc8:	movw	r2, #1732	; 0x6c4
   15dcc:	bl	1249c <__assert_fail@plt>
   15dd0:	movw	r0, #33165	; 0x818d
   15dd4:	movt	r0, #1
   15dd8:	movw	r1, #29554	; 0x7372
   15ddc:	movt	r1, #1
   15de0:	movw	r3, #33098	; 0x814a
   15de4:	movt	r3, #1
   15de8:	movw	r2, #1733	; 0x6c5
   15dec:	bl	1249c <__assert_fail@plt>

00015df0 <flatcc_builder_string_edit@@Base>:
   15df0:	ldr	r0, [r0, #16]
   15df4:	bx	lr

00015df8 <flatcc_builder_string_len@@Base>:
   15df8:	ldr	r0, [r0, #32]
   15dfc:	ldr	r0, [r0, #20]
   15e00:	bx	lr
   15e04:	push	{r4, r5, r6, sl, fp, lr}
   15e08:	add	fp, sp, #16
   15e0c:	mov	r5, r3
   15e10:	mov	r4, r0
   15e14:	ldr	r0, [r0, #20]
   15e18:	ldr	r3, [r4, #24]
   15e1c:	add	r0, r2, r0
   15e20:	sub	r0, r0, #1
   15e24:	rsb	r2, r2, #0
   15e28:	and	r6, r0, r2
   15e2c:	add	r0, r6, r1
   15e30:	str	r0, [r4, #20]
   15e34:	cmp	r0, r3
   15e38:	bcc	15e5c <flatcc_builder_string_len@@Base+0x64>
   15e3c:	add	r1, r0, #1
   15e40:	mov	r0, r4
   15e44:	movw	r2, #65532	; 0xfffc
   15e48:	bl	162a8 <flatcc_builder_get_emit_context@@Base+0x18>
   15e4c:	mov	r1, r0
   15e50:	mov	r0, #0
   15e54:	cmp	r1, #0
   15e58:	popne	{r4, r5, r6, sl, fp, pc}
   15e5c:	ldr	r0, [r4, #4]
   15e60:	add	r0, r0, r5, lsl #1
   15e64:	add	r1, r6, #4
   15e68:	strh	r1, [r0]
   15e6c:	ldrh	r0, [r4, #8]
   15e70:	cmp	r0, r5
   15e74:	addls	r0, r5, #1
   15e78:	strhls	r0, [r4, #8]
   15e7c:	ldr	r0, [r4, #16]
   15e80:	add	r0, r0, r6
   15e84:	pop	{r4, r5, r6, sl, fp, pc}

00015e88 <flatcc_builder_table_edit@@Base>:
   15e88:	ldr	r2, [r0, #32]
   15e8c:	ldrh	r2, [r2, #14]
   15e90:	cmp	r2, #3
   15e94:	ldreq	r2, [r0, #16]
   15e98:	ldreq	r0, [r0, #20]
   15e9c:	addeq	r0, r2, r0
   15ea0:	subeq	r0, r0, r1
   15ea4:	bxeq	lr
   15ea8:	push	{fp, lr}
   15eac:	mov	fp, sp
   15eb0:	movw	r0, #31623	; 0x7b87
   15eb4:	movt	r0, #1
   15eb8:	movw	r1, #29554	; 0x7372
   15ebc:	movt	r1, #1
   15ec0:	movw	r3, #33343	; 0x823f
   15ec4:	movt	r3, #1
   15ec8:	movw	r2, #1794	; 0x702
   15ecc:	bl	1249c <__assert_fail@plt>

00015ed0 <flatcc_builder_table_add_copy@@Base>:
   15ed0:	push	{r4, r5, r6, sl, fp, lr}
   15ed4:	add	fp, sp, #16
   15ed8:	mov	r4, r3
   15edc:	mov	r5, r2
   15ee0:	ldr	r3, [fp, #8]
   15ee4:	mov	r2, r4
   15ee8:	bl	15604 <flatcc_builder_table_add@@Base>
   15eec:	mov	r6, r0
   15ef0:	cmp	r0, #0
   15ef4:	beq	15f08 <flatcc_builder_table_add_copy@@Base+0x38>
   15ef8:	mov	r0, r6
   15efc:	mov	r1, r5
   15f00:	mov	r2, r4
   15f04:	bl	123e8 <memcpy@plt>
   15f08:	mov	r0, r6
   15f0c:	pop	{r4, r5, r6, sl, fp, pc}
   15f10:	push	{r4, r5, r6, r7, fp, lr}
   15f14:	add	fp, sp, #16
   15f18:	mov	r5, r1
   15f1c:	mov	r4, r0
   15f20:	ldr	r0, [r0, #20]
   15f24:	ldr	r1, [r4, #24]
   15f28:	add	r0, r0, #3
   15f2c:	bic	r7, r0, #3
   15f30:	add	r6, r7, #4
   15f34:	str	r6, [r4, #20]
   15f38:	cmp	r6, r1
   15f3c:	bls	15f60 <flatcc_builder_table_add_copy@@Base+0x90>
   15f40:	mov	r0, r4
   15f44:	mov	r1, r6
   15f48:	movw	r2, #65532	; 0xfffc
   15f4c:	bl	162a8 <flatcc_builder_get_emit_context@@Base+0x18>
   15f50:	mov	r1, r0
   15f54:	mov	r0, #0
   15f58:	cmp	r1, #0
   15f5c:	popne	{r4, r5, r6, r7, fp, pc}
   15f60:	ldr	r0, [r4, #4]
   15f64:	add	r0, r0, r5, lsl #1
   15f68:	strh	r6, [r0]
   15f6c:	ldrh	r0, [r4, #8]
   15f70:	cmp	r0, r5
   15f74:	addls	r0, r5, #1
   15f78:	strhls	r0, [r4, #8]
   15f7c:	ldr	r0, [r4]
   15f80:	add	r1, r0, #2
   15f84:	str	r1, [r4]
   15f88:	strh	r7, [r0]
   15f8c:	ldr	r0, [r4, #16]
   15f90:	add	r0, r0, r7
   15f94:	pop	{r4, r5, r6, r7, fp, pc}

00015f98 <flatcc_builder_push_buffer_alignment@@Base>:
   15f98:	ldrh	r1, [r0, #128]	; 0x80
   15f9c:	mov	r2, #4
   15fa0:	strh	r2, [r0, #128]	; 0x80
   15fa4:	mov	r0, r1
   15fa8:	bx	lr

00015fac <flatcc_builder_pop_buffer_alignment@@Base>:
   15fac:	b	13a2c <flatcc_builder_create_buffer@@Base+0x1d0>

00015fb0 <flatcc_builder_get_buffer_alignment@@Base>:
   15fb0:	ldrh	r0, [r0, #128]	; 0x80
   15fb4:	bx	lr

00015fb8 <flatcc_builder_set_vtable_clustering@@Base>:
   15fb8:	clz	r1, r1
   15fbc:	lsr	r1, r1, #5
   15fc0:	str	r1, [r0, #180]	; 0xb4
   15fc4:	bx	lr

00015fc8 <flatcc_builder_set_block_align@@Base>:
   15fc8:	strh	r1, [r0, #132]	; 0x84
   15fcc:	bx	lr

00015fd0 <flatcc_builder_get_level@@Base>:
   15fd0:	ldr	r0, [r0, #156]	; 0x9c
   15fd4:	bx	lr

00015fd8 <flatcc_builder_set_max_level@@Base>:
   15fd8:	str	r1, [r0, #176]	; 0xb0
   15fdc:	ldr	r2, [r0, #160]	; 0xa0
   15fe0:	cmp	r2, r1
   15fe4:	strlt	r1, [r0, #160]	; 0xa0
   15fe8:	bx	lr

00015fec <flatcc_builder_get_buffer_size@@Base>:
   15fec:	ldr	r1, [r0, #136]	; 0x88
   15ff0:	ldr	r0, [r0, #140]	; 0x8c
   15ff4:	sub	r0, r0, r1
   15ff8:	bx	lr

00015ffc <flatcc_builder_get_buffer_start@@Base>:
   15ffc:	ldr	r0, [r0, #136]	; 0x88
   16000:	bx	lr

00016004 <flatcc_builder_get_buffer_end@@Base>:
   16004:	ldr	r0, [r0, #140]	; 0x8c
   16008:	bx	lr

0001600c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1600c:	str	r1, [r0, #172]	; 0xac
   16010:	bx	lr

00016014 <flatcc_builder_set_identifier@@Base>:
   16014:	movw	r2, #29024	; 0x7160
   16018:	movt	r2, #1
   1601c:	cmp	r1, #0
   16020:	movne	r2, r1
   16024:	ldr	r1, [r2]
   16028:	str	r1, [r0, #168]	; 0xa8
   1602c:	bx	lr

00016030 <flatcc_builder_get_type@@Base>:
   16030:	ldr	r0, [r0, #32]
   16034:	cmp	r0, #0
   16038:	ldrhne	r0, [r0, #14]
   1603c:	moveq	r0, #0
   16040:	bx	lr

00016044 <flatcc_builder_get_type_at@@Base>:
   16044:	mov	r2, r0
   16048:	mov	r0, #0
   1604c:	cmp	r1, #1
   16050:	ldrge	r3, [r2, #156]	; 0x9c
   16054:	cmpge	r3, r1
   16058:	bge	16060 <flatcc_builder_get_type_at@@Base+0x1c>
   1605c:	bx	lr
   16060:	sub	r0, r1, r3
   16064:	add	r0, r0, r0, lsl #3
   16068:	ldr	r1, [r2, #32]
   1606c:	add	r0, r1, r0, lsl #2
   16070:	ldrh	r0, [r0, #14]
   16074:	bx	lr

00016078 <flatcc_builder_get_direct_buffer@@Base>:
   16078:	ldr	r2, [r0, #184]	; 0xb8
   1607c:	cmp	r2, #0
   16080:	beq	1608c <flatcc_builder_get_direct_buffer@@Base+0x14>
   16084:	add	r0, r0, #188	; 0xbc
   16088:	b	160a0 <flatcc_builder_get_direct_buffer@@Base+0x28>
   1608c:	cmp	r1, #0
   16090:	movne	r0, #0
   16094:	strne	r0, [r1]
   16098:	mov	r0, #0
   1609c:	bx	lr
   160a0:	ldm	r0, {r2, r3}
   160a4:	cmp	r2, r3
   160a8:	beq	160bc <flatcc_builder_get_direct_buffer@@Base+0x44>
   160ac:	mov	r0, #0
   160b0:	cmp	r1, #0
   160b4:	strne	r0, [r1]
   160b8:	bx	lr
   160bc:	cmp	r1, #0
   160c0:	ldrne	r2, [r0, #24]
   160c4:	strne	r2, [r1]
   160c8:	ldr	r0, [r0, #8]
   160cc:	bx	lr

000160d0 <flatcc_builder_copy_buffer@@Base>:
   160d0:	push	{fp, lr}
   160d4:	mov	fp, sp
   160d8:	ldr	r3, [r0, #184]	; 0xb8
   160dc:	cmp	r3, #0
   160e0:	beq	16114 <flatcc_builder_copy_buffer@@Base+0x44>
   160e4:	add	r0, r0, #188	; 0xbc
   160e8:	bl	167ec <flatcc_emitter_copy_buffer@@Base>
   160ec:	cmp	r0, #0
   160f0:	popne	{fp, pc}
   160f4:	movw	r0, #27545	; 0x6b99
   160f8:	movt	r0, #1
   160fc:	movw	r1, #29554	; 0x7372
   16100:	movt	r1, #1
   16104:	movw	r3, #33482	; 0x82ca
   16108:	movt	r3, #1
   1610c:	movw	r2, #1926	; 0x786
   16110:	bl	1249c <__assert_fail@plt>
   16114:	mov	r0, #0
   16118:	pop	{fp, pc}

0001611c <flatcc_builder_finalize_buffer@@Base>:
   1611c:	push	{r4, r5, r6, sl, fp, lr}
   16120:	add	fp, sp, #16
   16124:	mov	r6, r1
   16128:	mov	r4, r0
   1612c:	bl	15fec <flatcc_builder_get_buffer_size@@Base>
   16130:	mov	r5, r0
   16134:	cmp	r6, #0
   16138:	strne	r5, [r6]
   1613c:	mov	r0, r5
   16140:	bl	12430 <malloc@plt>
   16144:	cmp	r0, #0
   16148:	beq	1618c <flatcc_builder_finalize_buffer@@Base+0x70>
   1614c:	mov	r6, r0
   16150:	mov	r0, r4
   16154:	mov	r1, r6
   16158:	mov	r2, r5
   1615c:	bl	160d0 <flatcc_builder_copy_buffer@@Base>
   16160:	cmp	r0, #0
   16164:	movne	r0, r6
   16168:	popne	{r4, r5, r6, sl, fp, pc}
   1616c:	movw	r0, #34072	; 0x8518
   16170:	movt	r0, #1
   16174:	movw	r1, #29554	; 0x7372
   16178:	movt	r1, #1
   1617c:	movw	r3, #33551	; 0x830f
   16180:	movt	r3, #1
   16184:	movw	r2, #1948	; 0x79c
   16188:	bl	1249c <__assert_fail@plt>
   1618c:	movw	r0, #34072	; 0x8518
   16190:	movt	r0, #1
   16194:	movw	r1, #29554	; 0x7372
   16198:	movt	r1, #1
   1619c:	movw	r3, #33551	; 0x830f
   161a0:	movt	r3, #1
   161a4:	movw	r2, #1944	; 0x798
   161a8:	bl	1249c <__assert_fail@plt>

000161ac <flatcc_builder_finalize_aligned_buffer@@Base>:
   161ac:	push	{r4, r5, r6, r7, fp, lr}
   161b0:	add	fp, sp, #16
   161b4:	mov	r4, r1
   161b8:	mov	r5, r0
   161bc:	bl	15fec <flatcc_builder_get_buffer_size@@Base>
   161c0:	mov	r6, r0
   161c4:	cmp	r4, #0
   161c8:	strne	r6, [r4]
   161cc:	mov	r0, r5
   161d0:	bl	15fb0 <flatcc_builder_get_buffer_alignment@@Base>
   161d4:	add	r1, r6, r0
   161d8:	sub	r1, r1, #1
   161dc:	rsb	r2, r0, #0
   161e0:	and	r7, r1, r2
   161e4:	mov	r1, r7
   161e8:	bl	16234 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   161ec:	cmp	r0, #0
   161f0:	beq	16220 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   161f4:	mov	r6, r0
   161f8:	mov	r0, r5
   161fc:	mov	r1, r6
   16200:	mov	r2, r7
   16204:	bl	160d0 <flatcc_builder_copy_buffer@@Base>
   16208:	cmp	r0, #0
   1620c:	beq	16218 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   16210:	mov	r0, r6
   16214:	pop	{r4, r5, r6, r7, fp, pc}
   16218:	mov	r0, r6
   1621c:	bl	123dc <free@plt>
   16220:	mov	r6, #0
   16224:	cmp	r4, #0
   16228:	strne	r6, [r4]
   1622c:	mov	r0, r6
   16230:	pop	{r4, r5, r6, r7, fp, pc}
   16234:	push	{fp, lr}
   16238:	mov	fp, sp
   1623c:	sub	sp, sp, #8
   16240:	mov	r2, r1
   16244:	mov	r1, r0
   16248:	mov	r0, #0
   1624c:	str	r0, [sp, #4]
   16250:	cmp	r1, #4
   16254:	movls	r1, #4
   16258:	add	r0, sp, #4
   1625c:	bl	12460 <posix_memalign@plt>
   16260:	cmp	r0, #0
   16264:	ldrne	r0, [sp, #4]
   16268:	cmpne	r0, #0
   1626c:	beq	1627c <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   16270:	bl	123dc <free@plt>
   16274:	mov	r0, #0
   16278:	str	r0, [sp, #4]
   1627c:	ldr	r0, [sp, #4]
   16280:	mov	sp, fp
   16284:	pop	{fp, pc}

00016288 <flatcc_builder_aligned_alloc@@Base>:
   16288:	b	16234 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

0001628c <flatcc_builder_aligned_free@@Base>:
   1628c:	b	123dc <free@plt>

00016290 <flatcc_builder_get_emit_context@@Base>:
   16290:	ldr	r0, [r0, #36]	; 0x24
   16294:	bx	lr
   16298:	ldr	r0, [r0, #140]	; 0x8c
   1629c:	sub	r1, r1, #1
   162a0:	and	r0, r0, r1
   162a4:	bx	lr
   162a8:	push	{r4, r5, r6, sl, fp, lr}
   162ac:	add	fp, sp, #16
   162b0:	sub	sp, sp, #8
   162b4:	mov	r6, r2
   162b8:	mov	r5, r0
   162bc:	ldr	r2, [r0, #28]
   162c0:	ldr	r0, [r0, #40]	; 0x28
   162c4:	ldr	r4, [r5, #48]	; 0x30
   162c8:	mov	r3, #1
   162cc:	str	r3, [sp]
   162d0:	add	r2, r2, r1
   162d4:	add	r1, r5, #60	; 0x3c
   162d8:	mov	r3, #1
   162dc:	blx	r4
   162e0:	mov	r1, r0
   162e4:	mvn	r0, #0
   162e8:	cmp	r1, #0
   162ec:	beq	162f8 <flatcc_builder_get_emit_context@@Base+0x68>
   162f0:	sub	sp, fp, #16
   162f4:	pop	{r4, r5, r6, sl, fp, pc}
   162f8:	mov	r0, r5
   162fc:	mov	r1, r6
   16300:	bl	13e3c <flatcc_builder_start_struct@@Base+0x4c>
   16304:	mov	r0, #0
   16308:	sub	sp, fp, #16
   1630c:	pop	{r4, r5, r6, sl, fp, pc}
   16310:	push	{r4, r5, r6, sl, fp, lr}
   16314:	add	fp, sp, #16
   16318:	sub	sp, sp, #8
   1631c:	ldr	r2, [r0, #124]	; 0x7c
   16320:	cmp	r2, #0
   16324:	bne	163c4 <flatcc_builder_get_emit_context@@Base+0x134>
   16328:	mov	r4, r0
   1632c:	mov	r0, #0
   16330:	str	r0, [sp]
   16334:	mov	r6, #16
   16338:	mov	r0, r4
   1633c:	mov	r1, #6
   16340:	mov	r3, #16
   16344:	bl	13458 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   16348:	mvn	r5, #0
   1634c:	cmp	r0, #0
   16350:	beq	163b8 <flatcc_builder_get_emit_context@@Base+0x128>
   16354:	add	r1, r4, #92	; 0x5c
   16358:	str	r6, [r4, #124]	; 0x7c
   1635c:	ldr	r0, [r4, #40]	; 0x28
   16360:	ldr	ip, [r4, #48]	; 0x30
   16364:	mov	r2, #5
   16368:	str	r2, [sp]
   1636c:	mov	r6, #256	; 0x100
   16370:	mov	r2, #256	; 0x100
   16374:	mov	r3, #1
   16378:	blx	ip
   1637c:	cmp	r0, #0
   16380:	bne	163b8 <flatcc_builder_get_emit_context@@Base+0x128>
   16384:	ldr	r0, [r4, #96]	; 0x60
   16388:	mov	r1, r6
   1638c:	lsl	r6, r6, #1
   16390:	cmp	r0, r1, lsl #1
   16394:	bcs	16388 <flatcc_builder_get_emit_context@@Base+0xf8>
   16398:	lsr	r1, r1, #2
   1639c:	mvn	r0, #0
   163a0:	mov	r2, #1
   163a4:	add	r0, r0, #1
   163a8:	cmp	r1, r2, lsl r0
   163ac:	bhi	163a4 <flatcc_builder_get_emit_context@@Base+0x114>
   163b0:	str	r0, [r4, #116]	; 0x74
   163b4:	mov	r5, #0
   163b8:	mov	r0, r5
   163bc:	sub	sp, fp, #16
   163c0:	pop	{r4, r5, r6, sl, fp, pc}
   163c4:	movw	r0, #34012	; 0x84dc
   163c8:	movt	r0, #1
   163cc:	movw	r1, #29554	; 0x7372
   163d0:	movt	r1, #1
   163d4:	movw	r3, #34027	; 0x84eb
   163d8:	movt	r3, #1
   163dc:	movw	r2, #342	; 0x156
   163e0:	bl	1249c <__assert_fail@plt>

000163e4 <flatcc_emitter_recycle_page@@Base>:
   163e4:	ldr	ip, [r0]
   163e8:	mvn	r2, #0
   163ec:	cmp	ip, r1
   163f0:	ldrne	r3, [r0, #4]
   163f4:	cmpne	r3, r1
   163f8:	bne	16404 <flatcc_emitter_recycle_page@@Base+0x20>
   163fc:	mov	r0, r2
   16400:	bx	lr
   16404:	ldr	r2, [r1, #2944]	; 0xb80
   16408:	ldr	r3, [r1, #2948]	; 0xb84
   1640c:	str	r3, [r2, #2948]	; 0xb84
   16410:	ldr	r2, [r1, #2944]	; 0xb80
   16414:	ldr	r3, [r1, #2948]	; 0xb84
   16418:	str	r2, [r3, #2944]	; 0xb80
   1641c:	ldr	r2, [ip, #2948]	; 0xb84
   16420:	str	r2, [r1, #2948]	; 0xb84
   16424:	ldr	r0, [r0]
   16428:	str	r0, [r1, #2944]	; 0xb80
   1642c:	str	r1, [r2, #2944]	; 0xb80
   16430:	ldr	r0, [r1, #2944]	; 0xb80
   16434:	str	r1, [r0, #2948]	; 0xb84
   16438:	mov	r2, #0
   1643c:	mov	r0, r2
   16440:	bx	lr

00016444 <flatcc_emitter_reset@@Base>:
   16444:	push	{r4, sl, fp, lr}
   16448:	add	fp, sp, #8
   1644c:	mov	r4, r0
   16450:	ldr	r0, [r0]
   16454:	cmp	r0, #0
   16458:	beq	164fc <flatcc_emitter_reset@@Base+0xb8>
   1645c:	mov	r1, #1472	; 0x5c0
   16460:	add	r2, r0, #1472	; 0x5c0
   16464:	stmib	r4, {r0, r2}
   16468:	str	r1, [r4, #12]
   1646c:	str	r2, [r4, #16]
   16470:	str	r1, [r4, #20]
   16474:	movw	r1, #64064	; 0xfa40
   16478:	movt	r1, #65535	; 0xffff
   1647c:	str	r1, [r0, #2952]	; 0xb88
   16480:	ldr	r0, [r4, #32]
   16484:	cmp	r0, #0
   16488:	ldreq	r0, [r4, #24]
   1648c:	streq	r0, [r4, #32]
   16490:	add	r2, r4, #24
   16494:	ldm	r2, {r0, r1, r2}
   16498:	mov	r3, #0
   1649c:	str	r3, [r4, #24]
   164a0:	add	r2, r2, r2, lsl #1
   164a4:	lsr	r2, r2, #2
   164a8:	add	r0, r2, r0, lsr #2
   164ac:	str	r0, [r4, #32]
   164b0:	cmp	r1, r0, lsl #1
   164b4:	bls	164fc <flatcc_emitter_reset@@Base+0xb8>
   164b8:	ldr	r2, [r4]
   164bc:	ldr	r1, [r4, #4]
   164c0:	ldr	r0, [r1, #2944]	; 0xb80
   164c4:	cmp	r0, r2
   164c8:	popeq	{r4, sl, fp, pc}
   164cc:	ldr	r2, [r0, #2944]	; 0xb80
   164d0:	str	r2, [r1, #2944]	; 0xb80
   164d4:	ldr	r1, [r0, #2944]	; 0xb80
   164d8:	ldr	r2, [r4, #4]
   164dc:	str	r2, [r1, #2948]	; 0xb84
   164e0:	bl	123dc <free@plt>
   164e4:	ldr	r0, [r4, #28]
   164e8:	ldr	r1, [r4, #32]
   164ec:	sub	r0, r0, #2944	; 0xb80
   164f0:	str	r0, [r4, #28]
   164f4:	cmp	r0, r1, lsl #1
   164f8:	bhi	164b8 <flatcc_emitter_reset@@Base+0x74>
   164fc:	pop	{r4, sl, fp, pc}

00016500 <flatcc_emitter_clear@@Base>:
   16500:	push	{r4, r5, r6, sl, fp, lr}
   16504:	add	fp, sp, #16
   16508:	ldr	r5, [r0]
   1650c:	cmp	r5, #0
   16510:	popeq	{r4, r5, r6, sl, fp, pc}
   16514:	mov	r4, r0
   16518:	ldr	r0, [r5, #2948]	; 0xb84
   1651c:	mov	r6, #0
   16520:	str	r6, [r0, #2944]	; 0xb80
   16524:	b	16534 <flatcc_emitter_clear@@Base+0x34>
   16528:	mov	r5, r0
   1652c:	ldr	r0, [r0, #2948]	; 0xb84
   16530:	bl	123dc <free@plt>
   16534:	ldr	r0, [r5, #2944]	; 0xb80
   16538:	cmp	r0, #0
   1653c:	bne	16528 <flatcc_emitter_clear@@Base+0x28>
   16540:	mov	r0, r5
   16544:	bl	123dc <free@plt>
   16548:	vmov.i32	q8, #0	; 0x00000000
   1654c:	add	r0, r4, #16
   16550:	vst1.32	{d16-d17}, [r0]
   16554:	mov	r0, #32
   16558:	vst1.32	{d16-d17}, [r4], r0
   1655c:	str	r6, [r4]
   16560:	pop	{r4, r5, r6, sl, fp, pc}

00016564 <flatcc_emitter@@Base>:
   16564:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16568:	add	fp, sp, #24
   1656c:	mov	r4, r2
   16570:	mov	r5, r1
   16574:	mov	r6, r0
   16578:	ldr	r1, [r0, #24]
   1657c:	ldr	r0, [fp, #8]
   16580:	add	r1, r1, r0
   16584:	str	r1, [r6, #24]
   16588:	mov	r1, r6
   1658c:	cmn	r3, #1
   16590:	ble	165d0 <flatcc_emitter@@Base+0x6c>
   16594:	ldr	r2, [r1, #20]!
   16598:	cmp	r2, r0
   1659c:	bcs	16618 <flatcc_emitter@@Base+0xb4>
   165a0:	mov	r8, #0
   165a4:	cmp	r4, #0
   165a8:	beq	16668 <flatcc_emitter@@Base+0x104>
   165ac:	ldm	r5, {r1, r2}
   165b0:	mov	r0, r6
   165b4:	bl	16734 <flatcc_emitter@@Base+0x1d0>
   165b8:	cmp	r0, #0
   165bc:	bne	1660c <flatcc_emitter@@Base+0xa8>
   165c0:	subs	r4, r4, #1
   165c4:	add	r5, r5, #8
   165c8:	bne	165ac <flatcc_emitter@@Base+0x48>
   165cc:	b	16668 <flatcc_emitter@@Base+0x104>
   165d0:	ldr	r2, [r1, #12]!
   165d4:	cmp	r2, r0
   165d8:	bcs	16628 <flatcc_emitter@@Base+0xc4>
   165dc:	add	r0, r5, r4, lsl #3
   165e0:	sub	r5, r0, #4
   165e4:	rsb	r4, r4, #1
   165e8:	cmp	r4, #1
   165ec:	beq	16670 <flatcc_emitter@@Base+0x10c>
   165f0:	ldmda	r5, {r1, r2}
   165f4:	mov	r0, r6
   165f8:	bl	1667c <flatcc_emitter@@Base+0x118>
   165fc:	sub	r5, r5, #8
   16600:	add	r4, r4, #1
   16604:	cmp	r0, #0
   16608:	beq	165e8 <flatcc_emitter@@Base+0x84>
   1660c:	mvn	r8, #0
   16610:	mov	r0, r8
   16614:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16618:	ldr	r7, [r6, #16]
   1661c:	add	r3, r7, r0
   16620:	str	r3, [r6, #16]
   16624:	b	16634 <flatcc_emitter@@Base+0xd0>
   16628:	ldr	r3, [r6, #8]
   1662c:	sub	r7, r3, r0
   16630:	str	r7, [r6, #8]
   16634:	sub	r0, r2, r0
   16638:	str	r0, [r1]
   1663c:	mov	r8, #0
   16640:	cmp	r4, #0
   16644:	beq	16668 <flatcc_emitter@@Base+0x104>
   16648:	ldm	r5, {r1, r2}
   1664c:	mov	r0, r7
   16650:	bl	123e8 <memcpy@plt>
   16654:	ldr	r0, [r5, #4]
   16658:	add	r7, r7, r0
   1665c:	add	r5, r5, #8
   16660:	subs	r4, r4, #1
   16664:	bne	16648 <flatcc_emitter@@Base+0xe4>
   16668:	mov	r0, r8
   1666c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16670:	mov	r8, #0
   16674:	mov	r0, r8
   16678:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1667c:	push	{r4, r5, r6, r7, fp, lr}
   16680:	add	fp, sp, #16
   16684:	cmp	r2, #0
   16688:	moveq	r0, #0
   1668c:	popeq	{r4, r5, r6, r7, fp, pc}
   16690:	mov	r4, r2
   16694:	mov	r5, r0
   16698:	clz	r0, r2
   1669c:	lsr	r7, r0, #5
   166a0:	add	r6, r1, r2
   166a4:	b	166e0 <flatcc_emitter@@Base+0x17c>
   166a8:	sub	r0, r0, r7
   166ac:	str	r0, [r5, #12]
   166b0:	ldr	r0, [r5, #8]
   166b4:	sub	r0, r0, r7
   166b8:	str	r0, [r5, #8]
   166bc:	sub	r6, r6, r7
   166c0:	mov	r1, r6
   166c4:	mov	r2, r7
   166c8:	bl	123e8 <memcpy@plt>
   166cc:	subs	r4, r4, r7
   166d0:	clz	r0, r4
   166d4:	lsr	r7, r0, #5
   166d8:	moveq	r0, #0
   166dc:	popeq	{r4, r5, r6, r7, fp, pc}
   166e0:	ldr	r0, [r5, #12]
   166e4:	cmp	r4, r0
   166e8:	bls	16718 <flatcc_emitter@@Base+0x1b4>
   166ec:	cmp	r0, #0
   166f0:	bne	16720 <flatcc_emitter@@Base+0x1bc>
   166f4:	mov	r0, r5
   166f8:	bl	168a8 <flatcc_emitter_copy_buffer@@Base+0xbc>
   166fc:	cmp	r0, #0
   16700:	mov	r1, r0
   16704:	movwne	r1, #1
   16708:	orr	r1, r1, r7
   1670c:	tst	r1, #1
   16710:	beq	166e0 <flatcc_emitter@@Base+0x17c>
   16714:	b	16728 <flatcc_emitter@@Base+0x1c4>
   16718:	mov	r7, r4
   1671c:	b	166a8 <flatcc_emitter@@Base+0x144>
   16720:	mov	r7, r0
   16724:	b	166a8 <flatcc_emitter@@Base+0x144>
   16728:	cmp	r0, #0
   1672c:	mvnne	r0, #0
   16730:	pop	{r4, r5, r6, r7, fp, pc}
   16734:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16738:	add	fp, sp, #24
   1673c:	cmp	r2, #0
   16740:	moveq	r0, #0
   16744:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16748:	mov	r4, r2
   1674c:	mov	r8, r1
   16750:	mov	r6, r0
   16754:	clz	r0, r2
   16758:	lsr	r5, r0, #5
   1675c:	b	167a0 <flatcc_emitter@@Base+0x23c>
   16760:	ldr	r0, [r6, #16]
   16764:	mov	r1, r8
   16768:	mov	r2, r7
   1676c:	bl	123e8 <memcpy@plt>
   16770:	ldr	r0, [r6, #16]
   16774:	ldr	r1, [r6, #20]
   16778:	add	r0, r0, r7
   1677c:	sub	r1, r1, r7
   16780:	str	r0, [r6, #16]
   16784:	str	r1, [r6, #20]
   16788:	add	r8, r8, r7
   1678c:	subs	r4, r4, r7
   16790:	clz	r0, r4
   16794:	lsr	r5, r0, #5
   16798:	moveq	r0, #0
   1679c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   167a0:	ldr	r7, [r6, #20]
   167a4:	cmp	r4, r7
   167a8:	bls	167d8 <flatcc_emitter@@Base+0x274>
   167ac:	cmp	r7, #0
   167b0:	bne	16760 <flatcc_emitter@@Base+0x1fc>
   167b4:	mov	r0, r6
   167b8:	bl	16994 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   167bc:	cmp	r0, #0
   167c0:	mov	r1, r0
   167c4:	movwne	r1, #1
   167c8:	orr	r1, r1, r5
   167cc:	tst	r1, #1
   167d0:	beq	167a0 <flatcc_emitter@@Base+0x23c>
   167d4:	b	167e0 <flatcc_emitter@@Base+0x27c>
   167d8:	mov	r7, r4
   167dc:	b	16760 <flatcc_emitter@@Base+0x1fc>
   167e0:	cmp	r0, #0
   167e4:	mvnne	r0, #0
   167e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000167ec <flatcc_emitter_copy_buffer@@Base>:
   167ec:	push	{r4, r5, r6, sl, fp, lr}
   167f0:	add	fp, sp, #16
   167f4:	mov	r3, r2
   167f8:	ldr	r2, [r0, #24]
   167fc:	mov	r5, #0
   16800:	cmp	r2, r3
   16804:	bhi	1688c <flatcc_emitter_copy_buffer@@Base+0xa0>
   16808:	mov	r4, r0
   1680c:	ldr	r0, [r0]
   16810:	cmp	r0, #0
   16814:	beq	1688c <flatcc_emitter_copy_buffer@@Base+0xa0>
   16818:	mov	r6, r1
   1681c:	ldr	r1, [r4, #4]
   16820:	cmp	r0, r1
   16824:	beq	16894 <flatcc_emitter_copy_buffer@@Base+0xa8>
   16828:	ldr	r1, [r4, #8]
   1682c:	ldr	r0, [r4, #12]
   16830:	rsb	r5, r0, #2944	; 0xb80
   16834:	mov	r0, r6
   16838:	mov	r2, r5
   1683c:	bl	123e8 <memcpy@plt>
   16840:	add	r5, r6, r5
   16844:	ldm	r4, {r0, r1}
   16848:	ldr	r6, [r0, #2944]	; 0xb80
   1684c:	cmp	r6, r1
   16850:	beq	16878 <flatcc_emitter_copy_buffer@@Base+0x8c>
   16854:	mov	r0, r5
   16858:	mov	r1, r6
   1685c:	mov	r2, #2944	; 0xb80
   16860:	bl	123e8 <memcpy@plt>
   16864:	add	r5, r5, #2944	; 0xb80
   16868:	ldr	r6, [r6, #2944]	; 0xb80
   1686c:	ldr	r0, [r4, #4]
   16870:	cmp	r6, r0
   16874:	bne	16854 <flatcc_emitter_copy_buffer@@Base+0x68>
   16878:	ldr	r0, [r4, #20]
   1687c:	rsb	r2, r0, #2944	; 0xb80
   16880:	mov	r0, r5
   16884:	mov	r1, r6
   16888:	bl	123e8 <memcpy@plt>
   1688c:	mov	r0, r5
   16890:	pop	{r4, r5, r6, sl, fp, pc}
   16894:	ldr	r1, [r4, #8]
   16898:	mov	r0, r6
   1689c:	bl	123e8 <memcpy@plt>
   168a0:	mov	r0, r6
   168a4:	pop	{r4, r5, r6, sl, fp, pc}
   168a8:	push	{r4, r5, fp, lr}
   168ac:	add	fp, sp, #8
   168b0:	mov	r4, r0
   168b4:	ldr	r5, [r0]
   168b8:	cmp	r5, #0
   168bc:	beq	168e4 <flatcc_emitter_copy_buffer@@Base+0xf8>
   168c0:	ldr	r0, [r5, #2948]	; 0xb84
   168c4:	ldr	r1, [r4, #4]
   168c8:	cmp	r0, r1
   168cc:	beq	168e4 <flatcc_emitter_copy_buffer@@Base+0xf8>
   168d0:	ldr	r1, [r5, #2952]	; 0xb88
   168d4:	sub	r1, r1, #2944	; 0xb80
   168d8:	str	r1, [r0, #2952]	; 0xb88
   168dc:	ldr	r0, [r5, #2948]	; 0xb84
   168e0:	b	16924 <flatcc_emitter_copy_buffer@@Base+0x138>
   168e4:	movw	r0, #2956	; 0xb8c
   168e8:	bl	12430 <malloc@plt>
   168ec:	cmp	r0, #0
   168f0:	mvneq	r0, #0
   168f4:	popeq	{r4, r5, fp, pc}
   168f8:	ldr	r1, [r4, #28]
   168fc:	add	r1, r1, #2944	; 0xb80
   16900:	str	r1, [r4, #28]
   16904:	cmp	r5, #0
   16908:	beq	16954 <flatcc_emitter_copy_buffer@@Base+0x168>
   1690c:	ldm	r4, {r1, r2}
   16910:	str	r1, [r0, #2944]	; 0xb80
   16914:	str	r2, [r0, #2948]	; 0xb84
   16918:	str	r0, [r1, #2948]	; 0xb84
   1691c:	ldr	r1, [r4, #4]
   16920:	str	r0, [r1, #2944]	; 0xb80
   16924:	str	r0, [r4]
   16928:	mov	r0, #2944	; 0xb80
   1692c:	ldr	r1, [r4]
   16930:	add	r2, r1, #2944	; 0xb80
   16934:	str	r2, [r4, #8]
   16938:	str	r0, [r4, #12]
   1693c:	ldr	r0, [r1, #2944]	; 0xb80
   16940:	ldr	r0, [r0, #2952]	; 0xb88
   16944:	sub	r0, r0, #2944	; 0xb80
   16948:	str	r0, [r1, #2952]	; 0xb88
   1694c:	mov	r0, #0
   16950:	pop	{r4, r5, fp, pc}
   16954:	str	r0, [r4, #4]
   16958:	str	r0, [r4]
   1695c:	mov	r1, #1472	; 0x5c0
   16960:	str	r1, [r4, #12]
   16964:	str	r1, [r4, #20]
   16968:	ldr	r1, [r4]
   1696c:	add	r1, r1, #1472	; 0x5c0
   16970:	str	r1, [r4, #8]
   16974:	str	r1, [r4, #16]
   16978:	movw	r1, #64064	; 0xfa40
   1697c:	movt	r1, #65535	; 0xffff
   16980:	str	r0, [r0, #2944]	; 0xb80
   16984:	str	r0, [r0, #2948]	; 0xb84
   16988:	str	r1, [r0, #2952]	; 0xb88
   1698c:	mov	r0, #0
   16990:	pop	{r4, r5, fp, pc}
   16994:	push	{r4, r5, fp, lr}
   16998:	add	fp, sp, #8
   1699c:	mov	r4, r0
   169a0:	ldr	r5, [r0, #4]
   169a4:	cmp	r5, #0
   169a8:	beq	169bc <flatcc_emitter_copy_buffer@@Base+0x1d0>
   169ac:	ldr	r0, [r5, #2944]	; 0xb80
   169b0:	ldr	r1, [r4]
   169b4:	cmp	r0, r1
   169b8:	bne	169f8 <flatcc_emitter_copy_buffer@@Base+0x20c>
   169bc:	movw	r0, #2956	; 0xb8c
   169c0:	bl	12430 <malloc@plt>
   169c4:	cmp	r0, #0
   169c8:	mvneq	r0, #0
   169cc:	popeq	{r4, r5, fp, pc}
   169d0:	ldr	r1, [r4, #28]
   169d4:	add	r1, r1, #2944	; 0xb80
   169d8:	str	r1, [r4, #28]
   169dc:	cmp	r5, #0
   169e0:	beq	16a24 <flatcc_emitter_copy_buffer@@Base+0x238>
   169e4:	ldr	r1, [r4]
   169e8:	str	r1, [r0, #2944]	; 0xb80
   169ec:	str	r5, [r0, #2948]	; 0xb84
   169f0:	str	r0, [r1, #2948]	; 0xb84
   169f4:	str	r0, [r5, #2944]	; 0xb80
   169f8:	str	r0, [r4, #4]
   169fc:	mov	r0, #2944	; 0xb80
   16a00:	ldr	r1, [r4, #4]
   16a04:	str	r1, [r4, #16]
   16a08:	str	r0, [r4, #20]
   16a0c:	ldr	r0, [r1, #2948]	; 0xb84
   16a10:	ldr	r0, [r0, #2952]	; 0xb88
   16a14:	add	r0, r0, #2944	; 0xb80
   16a18:	str	r0, [r1, #2952]	; 0xb88
   16a1c:	mov	r0, #0
   16a20:	pop	{r4, r5, fp, pc}
   16a24:	str	r0, [r4, #4]
   16a28:	str	r0, [r4]
   16a2c:	mov	r1, #1472	; 0x5c0
   16a30:	str	r1, [r4, #12]
   16a34:	str	r1, [r4, #20]
   16a38:	ldr	r1, [r4]
   16a3c:	add	r1, r1, #1472	; 0x5c0
   16a40:	str	r1, [r4, #8]
   16a44:	str	r1, [r4, #16]
   16a48:	movw	r1, #64064	; 0xfa40
   16a4c:	movt	r1, #65535	; 0xffff
   16a50:	str	r0, [r0, #2944]	; 0xb80
   16a54:	str	r0, [r0, #2948]	; 0xb84
   16a58:	str	r1, [r0, #2952]	; 0xb88
   16a5c:	mov	r0, #0
   16a60:	pop	{r4, r5, fp, pc}

00016a64 <__libc_csu_init@@Base>:
   16a64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a68:	mov	r7, r0
   16a6c:	ldr	r6, [pc, #72]	; 16abc <__libc_csu_init@@Base+0x58>
   16a70:	ldr	r5, [pc, #72]	; 16ac0 <__libc_csu_init@@Base+0x5c>
   16a74:	add	r6, pc, r6
   16a78:	add	r5, pc, r5
   16a7c:	sub	r6, r6, r5
   16a80:	mov	r8, r1
   16a84:	mov	r9, r2
   16a88:	bl	12398 <strcmp@plt-0x20>
   16a8c:	asrs	r6, r6, #2
   16a90:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a94:	mov	r4, #0
   16a98:	add	r4, r4, #1
   16a9c:	ldr	r3, [r5], #4
   16aa0:	mov	r2, r9
   16aa4:	mov	r1, r8
   16aa8:	mov	r0, r7
   16aac:	blx	r3
   16ab0:	cmp	r6, r4
   16ab4:	bne	16a98 <__libc_csu_init@@Base+0x34>
   16ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16abc:	muleq	r1, r0, r4
   16ac0:	andeq	r2, r1, r8, lsl #9

00016ac4 <__libc_csu_fini@@Base>:
   16ac4:	bx	lr

Disassembly of section .fini:

00016ac8 <.fini>:
   16ac8:	push	{r3, lr}
   16acc:	pop	{r3, pc}
