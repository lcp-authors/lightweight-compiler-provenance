
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00012410 <.init>:
   12410:	push	{r3, lr}
   12414:	bl	12c04 <__assert_fail@plt+0x48>
   12418:	pop	{r3, pc}

Disassembly of section .plt:

0001241c <pthread_mutex_unlock@plt-0x14>:
   1241c:	push	{lr}		; (str lr, [sp, #-4]!)
   12420:	ldr	lr, [pc, #4]	; 1242c <pthread_mutex_unlock@plt-0x4>
   12424:	add	lr, pc, lr
   12428:	ldr	pc, [lr, #8]!
   1242c:	ldrdeq	r1, [r4], -r4

00012430 <pthread_mutex_unlock@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #266240	; 0x41000
   12438:	ldr	pc, [ip, #3028]!	; 0xbd4

0001243c <fdopen@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #266240	; 0x41000
   12444:	ldr	pc, [ip, #3020]!	; 0xbcc

00012448 <fstatfs64@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #266240	; 0x41000
   12450:	ldr	pc, [ip, #3012]!	; 0xbc4

00012454 <calloc@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #266240	; 0x41000
   1245c:	ldr	pc, [ip, #3004]!	; 0xbbc

00012460 <endgrent@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #266240	; 0x41000
   12468:	ldr	pc, [ip, #2996]!	; 0xbb4

0001246c <wctype@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #266240	; 0x41000
   12474:	ldr	pc, [ip, #2988]!	; 0xbac

00012478 <gnu_dev_major@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #266240	; 0x41000
   12480:	ldr	pc, [ip, #2980]!	; 0xba4

00012484 <raise@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #266240	; 0x41000
   1248c:	ldr	pc, [ip, #2972]!	; 0xb9c

00012490 <wcrtomb@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #266240	; 0x41000
   12498:	ldr	pc, [ip, #2964]!	; 0xb94

0001249c <gmtime_r@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #266240	; 0x41000
   124a4:	ldr	pc, [ip, #2956]!	; 0xb8c

000124a8 <getpwnam@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #266240	; 0x41000
   124b0:	ldr	pc, [ip, #2948]!	; 0xb84

000124b4 <is_selinux_enabled@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #266240	; 0x41000
   124bc:	ldr	pc, [ip, #2940]!	; 0xb7c

000124c0 <iswctype@plt>:
   124c0:	add	ip, pc, #0, 12
   124c4:	add	ip, ip, #266240	; 0x41000
   124c8:	ldr	pc, [ip, #2932]!	; 0xb74

000124cc <strcmp@plt>:
   124cc:	add	ip, pc, #0, 12
   124d0:	add	ip, ip, #266240	; 0x41000
   124d4:	ldr	pc, [ip, #2924]!	; 0xb6c

000124d8 <strtol@plt>:
   124d8:	add	ip, pc, #0, 12
   124dc:	add	ip, ip, #266240	; 0x41000
   124e0:	ldr	pc, [ip, #2916]!	; 0xb64

000124e4 <getpwuid@plt>:
   124e4:	add	ip, pc, #0, 12
   124e8:	add	ip, ip, #266240	; 0x41000
   124ec:	ldr	pc, [ip, #2908]!	; 0xb5c

000124f0 <gnu_dev_makedev@plt>:
   124f0:	add	ip, pc, #0, 12
   124f4:	add	ip, ip, #266240	; 0x41000
   124f8:	ldr	pc, [ip, #2900]!	; 0xb54

000124fc <printf@plt>:
   124fc:	add	ip, pc, #0, 12
   12500:	add	ip, ip, #266240	; 0x41000
   12504:	ldr	pc, [ip, #2892]!	; 0xb4c

00012508 <gnu_dev_minor@plt>:
   12508:	add	ip, pc, #0, 12
   1250c:	add	ip, ip, #266240	; 0x41000
   12510:	ldr	pc, [ip, #2884]!	; 0xb44

00012514 <pthread_mutex_destroy@plt>:
   12514:	add	ip, pc, #0, 12
   12518:	add	ip, ip, #266240	; 0x41000
   1251c:	ldr	pc, [ip, #2876]!	; 0xb3c

00012520 <mktime@plt>:
   12520:	add	ip, pc, #0, 12
   12524:	add	ip, ip, #266240	; 0x41000
   12528:	ldr	pc, [ip, #2868]!	; 0xb34

0001252c <fflush@plt>:
   1252c:	add	ip, pc, #0, 12
   12530:	add	ip, ip, #266240	; 0x41000
   12534:	ldr	pc, [ip, #2860]!	; 0xb2c

00012538 <unlinkat@plt>:
   12538:	add	ip, pc, #0, 12
   1253c:	add	ip, ip, #266240	; 0x41000
   12540:	ldr	pc, [ip, #2852]!	; 0xb24

00012544 <wcwidth@plt>:
   12544:	add	ip, pc, #0, 12
   12548:	add	ip, ip, #266240	; 0x41000
   1254c:	ldr	pc, [ip, #2844]!	; 0xb1c

00012550 <lsetfilecon@plt>:
   12550:	add	ip, pc, #0, 12
   12554:	add	ip, ip, #266240	; 0x41000
   12558:	ldr	pc, [ip, #2836]!	; 0xb14

0001255c <memmove@plt>:
   1255c:	add	ip, pc, #0, 12
   12560:	add	ip, ip, #266240	; 0x41000
   12564:	ldr	pc, [ip, #2828]!	; 0xb0c

00012568 <free@plt>:
   12568:	add	ip, pc, #0, 12
   1256c:	add	ip, ip, #266240	; 0x41000
   12570:	ldr	pc, [ip, #2820]!	; 0xb04

00012574 <pthread_mutex_lock@plt>:
   12574:	add	ip, pc, #0, 12
   12578:	add	ip, ip, #266240	; 0x41000
   1257c:	ldr	pc, [ip, #2812]!	; 0xafc

00012580 <faccessat@plt>:
   12580:	add	ip, pc, #0, 12
   12584:	add	ip, ip, #266240	; 0x41000
   12588:	ldr	pc, [ip, #2804]!	; 0xaf4

0001258c <ferror@plt>:
   1258c:	add	ip, pc, #0, 12
   12590:	add	ip, ip, #266240	; 0x41000
   12594:	ldr	pc, [ip, #2796]!	; 0xaec

00012598 <thrd_exit@plt>:
   12598:	add	ip, pc, #0, 12
   1259c:	add	ip, ip, #266240	; 0x41000
   125a0:	ldr	pc, [ip, #2788]!	; 0xae4

000125a4 <strndup@plt>:
   125a4:	add	ip, pc, #0, 12
   125a8:	add	ip, ip, #266240	; 0x41000
   125ac:	ldr	pc, [ip, #2780]!	; 0xadc

000125b0 <clock_gettime@plt>:
   125b0:	add	ip, pc, #0, 12
   125b4:	add	ip, ip, #266240	; 0x41000
   125b8:	ldr	pc, [ip, #2772]!	; 0xad4

000125bc <_exit@plt>:
   125bc:	add	ip, pc, #0, 12
   125c0:	add	ip, ip, #266240	; 0x41000
   125c4:	ldr	pc, [ip, #2764]!	; 0xacc

000125c8 <memcpy@plt>:
   125c8:	add	ip, pc, #0, 12
   125cc:	add	ip, ip, #266240	; 0x41000
   125d0:	ldr	pc, [ip, #2756]!	; 0xac4

000125d4 <execvp@plt>:
   125d4:	add	ip, pc, #0, 12
   125d8:	add	ip, ip, #266240	; 0x41000
   125dc:	ldr	pc, [ip, #2748]!	; 0xabc

000125e0 <tolower@plt>:
   125e0:	add	ip, pc, #0, 12
   125e4:	add	ip, ip, #266240	; 0x41000
   125e8:	ldr	pc, [ip, #2740]!	; 0xab4

000125ec <pthread_mutex_init@plt>:
   125ec:	add	ip, pc, #0, 12
   125f0:	add	ip, ip, #266240	; 0x41000
   125f4:	ldr	pc, [ip, #2732]!	; 0xaac

000125f8 <towlower@plt>:
   125f8:	add	ip, pc, #0, 12
   125fc:	add	ip, ip, #266240	; 0x41000
   12600:	ldr	pc, [ip, #2724]!	; 0xaa4

00012604 <mbsinit@plt>:
   12604:	add	ip, pc, #0, 12
   12608:	add	ip, ip, #266240	; 0x41000
   1260c:	ldr	pc, [ip, #2716]!	; 0xa9c

00012610 <signal@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #266240	; 0x41000
   12618:	ldr	pc, [ip, #2708]!	; 0xa94

0001261c <time@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #266240	; 0x41000
   12624:	ldr	pc, [ip, #2700]!	; 0xa8c

00012628 <memcmp@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #266240	; 0x41000
   12630:	ldr	pc, [ip, #2692]!	; 0xa84

00012634 <uname@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #266240	; 0x41000
   1263c:	ldr	pc, [ip, #2684]!	; 0xa7c

00012640 <ctime@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #266240	; 0x41000
   12648:	ldr	pc, [ip, #2676]!	; 0xa74

0001264c <dcgettext@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #266240	; 0x41000
   12654:	ldr	pc, [ip, #2668]!	; 0xa6c

00012658 <strdup@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #266240	; 0x41000
   12660:	ldr	pc, [ip, #2660]!	; 0xa64

00012664 <sysconf@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #266240	; 0x41000
   1266c:	ldr	pc, [ip, #2652]!	; 0xa5c

00012670 <getrlimit64@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #266240	; 0x41000
   12678:	ldr	pc, [ip, #2644]!	; 0xa54

0001267c <realloc@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #266240	; 0x41000
   12684:	ldr	pc, [ip, #2636]!	; 0xa4c

00012688 <fgetfilecon@plt>:
   12688:	add	ip, pc, #0, 12
   1268c:	add	ip, ip, #266240	; 0x41000
   12690:	ldr	pc, [ip, #2628]!	; 0xa44

00012694 <localtime_r@plt>:
   12694:	add	ip, pc, #0, 12
   12698:	add	ip, ip, #266240	; 0x41000
   1269c:	ldr	pc, [ip, #2620]!	; 0xa3c

000126a0 <textdomain@plt>:
   126a0:	add	ip, pc, #0, 12
   126a4:	add	ip, ip, #266240	; 0x41000
   126a8:	ldr	pc, [ip, #2612]!	; 0xa34

000126ac <iswcntrl@plt>:
   126ac:	add	ip, pc, #0, 12
   126b0:	add	ip, ip, #266240	; 0x41000
   126b4:	ldr	pc, [ip, #2604]!	; 0xa2c

000126b8 <chdir@plt>:
   126b8:	add	ip, pc, #0, 12
   126bc:	add	ip, ip, #266240	; 0x41000
   126c0:	ldr	pc, [ip, #2596]!	; 0xa24

000126c4 <__fxstatat64@plt>:
   126c4:	add	ip, pc, #0, 12
   126c8:	add	ip, ip, #266240	; 0x41000
   126cc:	ldr	pc, [ip, #2588]!	; 0xa1c

000126d0 <iswprint@plt>:
   126d0:	add	ip, pc, #0, 12
   126d4:	add	ip, ip, #266240	; 0x41000
   126d8:	ldr	pc, [ip, #2580]!	; 0xa14

000126dc <tzset@plt>:
   126dc:	add	ip, pc, #0, 12
   126e0:	add	ip, ip, #266240	; 0x41000
   126e4:	ldr	pc, [ip, #2572]!	; 0xa0c

000126e8 <poll@plt>:
   126e8:	add	ip, pc, #0, 12
   126ec:	add	ip, ip, #266240	; 0x41000
   126f0:	ldr	pc, [ip, #2564]!	; 0xa04

000126f4 <__fxstat64@plt>:
   126f4:	add	ip, pc, #0, 12
   126f8:	add	ip, ip, #266240	; 0x41000
   126fc:	ldr	pc, [ip, #2556]!	; 0x9fc

00012700 <fwrite@plt>:
   12700:	add	ip, pc, #0, 12
   12704:	add	ip, ip, #266240	; 0x41000
   12708:	ldr	pc, [ip, #2548]!	; 0x9f4

0001270c <strcat@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #266240	; 0x41000
   12714:	ldr	pc, [ip, #2540]!	; 0x9ec

00012718 <lseek64@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #266240	; 0x41000
   12720:	ldr	pc, [ip, #2532]!	; 0x9e4

00012724 <waitpid@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #266240	; 0x41000
   1272c:	ldr	pc, [ip, #2524]!	; 0x9dc

00012730 <__ctype_get_mb_cur_max@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #266240	; 0x41000
   12738:	ldr	pc, [ip, #2516]!	; 0x9d4

0001273c <hasmntopt@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #266240	; 0x41000
   12744:	ldr	pc, [ip, #2508]!	; 0x9cc

00012748 <strcpy@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #266240	; 0x41000
   12750:	ldr	pc, [ip, #2500]!	; 0x9c4

00012754 <gettimeofday@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #266240	; 0x41000
   1275c:	ldr	pc, [ip, #2492]!	; 0x9bc

00012760 <__fpending@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #266240	; 0x41000
   12768:	ldr	pc, [ip, #2484]!	; 0x9b4

0001276c <ferror_unlocked@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #266240	; 0x41000
   12774:	ldr	pc, [ip, #2476]!	; 0x9ac

00012778 <mbrtowc@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #266240	; 0x41000
   12780:	ldr	pc, [ip, #2468]!	; 0x9a4

00012784 <strtok_r@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #266240	; 0x41000
   1278c:	ldr	pc, [ip, #2460]!	; 0x99c

00012790 <error@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #266240	; 0x41000
   12798:	ldr	pc, [ip, #2452]!	; 0x994

0001279c <getmntent@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #266240	; 0x41000
   127a4:	ldr	pc, [ip, #2444]!	; 0x98c

000127a8 <opendir@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #266240	; 0x41000
   127b0:	ldr	pc, [ip, #2436]!	; 0x984

000127b4 <fnmatch@plt>:
   127b4:	add	ip, pc, #0, 12
   127b8:	add	ip, ip, #266240	; 0x41000
   127bc:	ldr	pc, [ip, #2428]!	; 0x97c

000127c0 <open64@plt>:
   127c0:	add	ip, pc, #0, 12
   127c4:	add	ip, ip, #266240	; 0x41000
   127c8:	ldr	pc, [ip, #2420]!	; 0x974

000127cc <getenv@plt>:
   127cc:	add	ip, pc, #0, 12
   127d0:	add	ip, ip, #266240	; 0x41000
   127d4:	ldr	pc, [ip, #2412]!	; 0x96c

000127d8 <lgetfilecon@plt>:
   127d8:	add	ip, pc, #0, 12
   127dc:	add	ip, ip, #266240	; 0x41000
   127e0:	ldr	pc, [ip, #2404]!	; 0x964

000127e4 <malloc@plt>:
   127e4:	add	ip, pc, #0, 12
   127e8:	add	ip, ip, #266240	; 0x41000
   127ec:	ldr	pc, [ip, #2396]!	; 0x95c

000127f0 <__libc_start_main@plt>:
   127f0:	add	ip, pc, #0, 12
   127f4:	add	ip, ip, #266240	; 0x41000
   127f8:	ldr	pc, [ip, #2388]!	; 0x954

000127fc <readlinkat@plt>:
   127fc:	add	ip, pc, #0, 12
   12800:	add	ip, ip, #266240	; 0x41000
   12804:	ldr	pc, [ip, #2380]!	; 0x94c

00012808 <strftime@plt>:
   12808:	add	ip, pc, #0, 12
   1280c:	add	ip, ip, #266240	; 0x41000
   12810:	ldr	pc, [ip, #2372]!	; 0x944

00012814 <__freading@plt>:
   12814:	add	ip, pc, #0, 12
   12818:	add	ip, ip, #266240	; 0x41000
   1281c:	ldr	pc, [ip, #2364]!	; 0x93c

00012820 <localtime@plt>:
   12820:	add	ip, pc, #0, 12
   12824:	add	ip, ip, #266240	; 0x41000
   12828:	ldr	pc, [ip, #2356]!	; 0x934

0001282c <modf@plt>:
   1282c:	add	ip, pc, #0, 12
   12830:	add	ip, ip, #266240	; 0x41000
   12834:	ldr	pc, [ip, #2348]!	; 0x92c

00012838 <__gmon_start__@plt>:
   12838:	add	ip, pc, #0, 12
   1283c:	add	ip, ip, #266240	; 0x41000
   12840:	ldr	pc, [ip, #2340]!	; 0x924

00012844 <__ctype_b_loc@plt>:
   12844:	add	ip, pc, #0, 12
   12848:	add	ip, ip, #266240	; 0x41000
   1284c:	ldr	pc, [ip, #2332]!	; 0x91c

00012850 <getcwd@plt>:
   12850:	add	ip, pc, #0, 12
   12854:	add	ip, ip, #266240	; 0x41000
   12858:	ldr	pc, [ip, #2324]!	; 0x914

0001285c <exit@plt>:
   1285c:	add	ip, pc, #0, 12
   12860:	add	ip, ip, #266240	; 0x41000
   12864:	ldr	pc, [ip, #2316]!	; 0x90c

00012868 <feof@plt>:
   12868:	add	ip, pc, #0, 12
   1286c:	add	ip, ip, #266240	; 0x41000
   12870:	ldr	pc, [ip, #2308]!	; 0x904

00012874 <getfilecon@plt>:
   12874:	add	ip, pc, #0, 12
   12878:	add	ip, ip, #266240	; 0x41000
   1287c:	ldr	pc, [ip, #2300]!	; 0x8fc

00012880 <strtoul@plt>:
   12880:	add	ip, pc, #0, 12
   12884:	add	ip, ip, #266240	; 0x41000
   12888:	ldr	pc, [ip, #2292]!	; 0x8f4

0001288c <strlen@plt>:
   1288c:	add	ip, pc, #0, 12
   12890:	add	ip, ip, #266240	; 0x41000
   12894:	ldr	pc, [ip, #2284]!	; 0x8ec

00012898 <strchr@plt>:
   12898:	add	ip, pc, #0, 12
   1289c:	add	ip, ip, #266240	; 0x41000
   128a0:	ldr	pc, [ip, #2276]!	; 0x8e4

000128a4 <setenv@plt>:
   128a4:	add	ip, pc, #0, 12
   128a8:	add	ip, ip, #266240	; 0x41000
   128ac:	ldr	pc, [ip, #2268]!	; 0x8dc

000128b0 <openat64@plt>:
   128b0:	add	ip, pc, #0, 12
   128b4:	add	ip, ip, #266240	; 0x41000
   128b8:	ldr	pc, [ip, #2260]!	; 0x8d4

000128bc <memrchr@plt>:
   128bc:	add	ip, pc, #0, 12
   128c0:	add	ip, ip, #266240	; 0x41000
   128c4:	ldr	pc, [ip, #2252]!	; 0x8cc

000128c8 <fprintf@plt>:
   128c8:	add	ip, pc, #0, 12
   128cc:	add	ip, ip, #266240	; 0x41000
   128d0:	ldr	pc, [ip, #2244]!	; 0x8c4

000128d4 <__errno_location@plt>:
   128d4:	add	ip, pc, #0, 12
   128d8:	add	ip, ip, #266240	; 0x41000
   128dc:	ldr	pc, [ip, #2236]!	; 0x8bc

000128e0 <iswalnum@plt>:
   128e0:	add	ip, pc, #0, 12
   128e4:	add	ip, ip, #266240	; 0x41000
   128e8:	ldr	pc, [ip, #2228]!	; 0x8b4

000128ec <snprintf@plt>:
   128ec:	add	ip, pc, #0, 12
   128f0:	add	ip, ip, #266240	; 0x41000
   128f4:	ldr	pc, [ip, #2220]!	; 0x8ac

000128f8 <__cxa_atexit@plt>:
   128f8:	add	ip, pc, #0, 12
   128fc:	add	ip, ip, #266240	; 0x41000
   12900:	ldr	pc, [ip, #2212]!	; 0x8a4

00012904 <memset@plt>:
   12904:	add	ip, pc, #0, 12
   12908:	add	ip, ip, #266240	; 0x41000
   1290c:	ldr	pc, [ip, #2204]!	; 0x89c

00012910 <bsearch@plt>:
   12910:	add	ip, pc, #0, 12
   12914:	add	ip, ip, #266240	; 0x41000
   12918:	ldr	pc, [ip, #2196]!	; 0x894

0001291c <putchar@plt>:
   1291c:	add	ip, pc, #0, 12
   12920:	add	ip, ip, #266240	; 0x41000
   12924:	ldr	pc, [ip, #2188]!	; 0x88c

00012928 <strncpy@plt>:
   12928:	add	ip, pc, #0, 12
   1292c:	add	ip, ip, #266240	; 0x41000
   12930:	ldr	pc, [ip, #2180]!	; 0x884

00012934 <pthread_mutexattr_gettype@plt>:
   12934:	add	ip, pc, #0, 12
   12938:	add	ip, ip, #266240	; 0x41000
   1293c:	ldr	pc, [ip, #2172]!	; 0x87c

00012940 <btowc@plt>:
   12940:	add	ip, pc, #0, 12
   12944:	add	ip, ip, #266240	; 0x41000
   12948:	ldr	pc, [ip, #2164]!	; 0x874

0001294c <strtod@plt>:
   1294c:	add	ip, pc, #0, 12
   12950:	add	ip, ip, #266240	; 0x41000
   12954:	ldr	pc, [ip, #2156]!	; 0x86c

00012958 <fileno@plt>:
   12958:	add	ip, pc, #0, 12
   1295c:	add	ip, ip, #266240	; 0x41000
   12960:	ldr	pc, [ip, #2148]!	; 0x864

00012964 <difftime@plt>:
   12964:	add	ip, pc, #0, 12
   12968:	add	ip, ip, #266240	; 0x41000
   1296c:	ldr	pc, [ip, #2140]!	; 0x85c

00012970 <strtoumax@plt>:
   12970:	add	ip, pc, #0, 12
   12974:	add	ip, ip, #266240	; 0x41000
   12978:	ldr	pc, [ip, #2132]!	; 0x854

0001297c <memchr@plt>:
   1297c:	add	ip, pc, #0, 12
   12980:	add	ip, ip, #266240	; 0x41000
   12984:	ldr	pc, [ip, #2124]!	; 0x84c

00012988 <setfilecon@plt>:
   12988:	add	ip, pc, #0, 12
   1298c:	add	ip, ip, #266240	; 0x41000
   12990:	ldr	pc, [ip, #2116]!	; 0x844

00012994 <access@plt>:
   12994:	add	ip, pc, #0, 12
   12998:	add	ip, ip, #266240	; 0x41000
   1299c:	ldr	pc, [ip, #2108]!	; 0x83c

000129a0 <fclose@plt>:
   129a0:	add	ip, pc, #0, 12
   129a4:	add	ip, ip, #266240	; 0x41000
   129a8:	ldr	pc, [ip, #2100]!	; 0x834

000129ac <strnlen@plt>:
   129ac:	add	ip, pc, #0, 12
   129b0:	add	ip, ip, #266240	; 0x41000
   129b4:	ldr	pc, [ip, #2092]!	; 0x82c

000129b8 <fseeko64@plt>:
   129b8:	add	ip, pc, #0, 12
   129bc:	add	ip, ip, #266240	; 0x41000
   129c0:	ldr	pc, [ip, #2084]!	; 0x824

000129c4 <endmntent@plt>:
   129c4:	add	ip, pc, #0, 12
   129c8:	add	ip, ip, #266240	; 0x41000
   129cc:	ldr	pc, [ip, #2076]!	; 0x81c

000129d0 <fcntl64@plt>:
   129d0:	add	ip, pc, #0, 12
   129d4:	add	ip, ip, #266240	; 0x41000
   129d8:	ldr	pc, [ip, #2068]!	; 0x814

000129dc <rpmatch@plt>:
   129dc:	add	ip, pc, #0, 12
   129e0:	add	ip, ip, #266240	; 0x41000
   129e4:	ldr	pc, [ip, #2060]!	; 0x80c

000129e8 <setlocale@plt>:
   129e8:	add	ip, pc, #0, 12
   129ec:	add	ip, ip, #266240	; 0x41000
   129f0:	ldr	pc, [ip, #2052]!	; 0x804

000129f4 <fork@plt>:
   129f4:	add	ip, pc, #0, 12
   129f8:	add	ip, ip, #266240	; 0x41000
   129fc:	ldr	pc, [ip, #2044]!	; 0x7fc

00012a00 <endpwent@plt>:
   12a00:	add	ip, pc, #0, 12
   12a04:	add	ip, ip, #266240	; 0x41000
   12a08:	ldr	pc, [ip, #2036]!	; 0x7f4

00012a0c <toupper@plt>:
   12a0c:	add	ip, pc, #0, 12
   12a10:	add	ip, ip, #266240	; 0x41000
   12a14:	ldr	pc, [ip, #2028]!	; 0x7ec

00012a18 <strrchr@plt>:
   12a18:	add	ip, pc, #0, 12
   12a1c:	add	ip, ip, #266240	; 0x41000
   12a20:	ldr	pc, [ip, #2020]!	; 0x7e4

00012a24 <vfprintf@plt>:
   12a24:	add	ip, pc, #0, 12
   12a28:	add	ip, ip, #266240	; 0x41000
   12a2c:	ldr	pc, [ip, #2012]!	; 0x7dc

00012a30 <nl_langinfo@plt>:
   12a30:	add	ip, pc, #0, 12
   12a34:	add	ip, ip, #266240	; 0x41000
   12a38:	ldr	pc, [ip, #2004]!	; 0x7d4

00012a3c <fputc@plt>:
   12a3c:	add	ip, pc, #0, 12
   12a40:	add	ip, ip, #266240	; 0x41000
   12a44:	ldr	pc, [ip, #1996]!	; 0x7cc

00012a48 <sscanf@plt>:
   12a48:	add	ip, pc, #0, 12
   12a4c:	add	ip, ip, #266240	; 0x41000
   12a50:	ldr	pc, [ip, #1988]!	; 0x7c4

00012a54 <localeconv@plt>:
   12a54:	add	ip, pc, #0, 12
   12a58:	add	ip, ip, #266240	; 0x41000
   12a5c:	ldr	pc, [ip, #1980]!	; 0x7bc

00012a60 <sprintf@plt>:
   12a60:	add	ip, pc, #0, 12
   12a64:	add	ip, ip, #266240	; 0x41000
   12a68:	ldr	pc, [ip, #1972]!	; 0x7b4

00012a6c <readdir64@plt>:
   12a6c:	add	ip, pc, #0, 12
   12a70:	add	ip, ip, #266240	; 0x41000
   12a74:	ldr	pc, [ip, #1964]!	; 0x7ac

00012a78 <fdopendir@plt>:
   12a78:	add	ip, pc, #0, 12
   12a7c:	add	ip, ip, #266240	; 0x41000
   12a80:	ldr	pc, [ip, #1956]!	; 0x7a4

00012a84 <timegm@plt>:
   12a84:	add	ip, pc, #0, 12
   12a88:	add	ip, ip, #266240	; 0x41000
   12a8c:	ldr	pc, [ip, #1948]!	; 0x79c

00012a90 <putc@plt>:
   12a90:	add	ip, pc, #0, 12
   12a94:	add	ip, ip, #266240	; 0x41000
   12a98:	ldr	pc, [ip, #1940]!	; 0x794

00012a9c <dirfd@plt>:
   12a9c:	add	ip, pc, #0, 12
   12aa0:	add	ip, ip, #266240	; 0x41000
   12aa4:	ldr	pc, [ip, #1932]!	; 0x78c

00012aa8 <fchdir@plt>:
   12aa8:	add	ip, pc, #0, 12
   12aac:	add	ip, ip, #266240	; 0x41000
   12ab0:	ldr	pc, [ip, #1924]!	; 0x784

00012ab4 <fopen64@plt>:
   12ab4:	add	ip, pc, #0, 12
   12ab8:	add	ip, ip, #266240	; 0x41000
   12abc:	ldr	pc, [ip, #1916]!	; 0x77c

00012ac0 <qsort@plt>:
   12ac0:	add	ip, pc, #0, 12
   12ac4:	add	ip, ip, #266240	; 0x41000
   12ac8:	ldr	pc, [ip, #1908]!	; 0x774

00012acc <freecon@plt>:
   12acc:	add	ip, pc, #0, 12
   12ad0:	add	ip, ip, #266240	; 0x41000
   12ad4:	ldr	pc, [ip, #1900]!	; 0x76c

00012ad8 <strpbrk@plt>:
   12ad8:	add	ip, pc, #0, 12
   12adc:	add	ip, ip, #266240	; 0x41000
   12ae0:	ldr	pc, [ip, #1892]!	; 0x764

00012ae4 <setmntent@plt>:
   12ae4:	add	ip, pc, #0, 12
   12ae8:	add	ip, ip, #266240	; 0x41000
   12aec:	ldr	pc, [ip, #1884]!	; 0x75c

00012af0 <bindtextdomain@plt>:
   12af0:	add	ip, pc, #0, 12
   12af4:	add	ip, ip, #266240	; 0x41000
   12af8:	ldr	pc, [ip, #1876]!	; 0x754

00012afc <atof@plt>:
   12afc:	add	ip, pc, #0, 12
   12b00:	add	ip, ip, #266240	; 0x41000
   12b04:	ldr	pc, [ip, #1868]!	; 0x74c

00012b08 <getline@plt>:
   12b08:	add	ip, pc, #0, 12
   12b0c:	add	ip, ip, #266240	; 0x41000
   12b10:	ldr	pc, [ip, #1860]!	; 0x744

00012b14 <getdelim@plt>:
   12b14:	add	ip, pc, #0, 12
   12b18:	add	ip, ip, #266240	; 0x41000
   12b1c:	ldr	pc, [ip, #1852]!	; 0x73c

00012b20 <__xstat64@plt>:
   12b20:	add	ip, pc, #0, 12
   12b24:	add	ip, ip, #266240	; 0x41000
   12b28:	ldr	pc, [ip, #1844]!	; 0x734

00012b2c <isatty@plt>:
   12b2c:	add	ip, pc, #0, 12
   12b30:	add	ip, ip, #266240	; 0x41000
   12b34:	ldr	pc, [ip, #1836]!	; 0x72c

00012b38 <unsetenv@plt>:
   12b38:	add	ip, pc, #0, 12
   12b3c:	add	ip, ip, #266240	; 0x41000
   12b40:	ldr	pc, [ip, #1828]!	; 0x724

00012b44 <towupper@plt>:
   12b44:	add	ip, pc, #0, 12
   12b48:	add	ip, ip, #266240	; 0x41000
   12b4c:	ldr	pc, [ip, #1820]!	; 0x71c

00012b50 <fputs@plt>:
   12b50:	add	ip, pc, #0, 12
   12b54:	add	ip, ip, #266240	; 0x41000
   12b58:	ldr	pc, [ip, #1812]!	; 0x714

00012b5c <strncmp@plt>:
   12b5c:	add	ip, pc, #0, 12
   12b60:	add	ip, ip, #266240	; 0x41000
   12b64:	ldr	pc, [ip, #1804]!	; 0x70c

00012b68 <abort@plt>:
   12b68:	add	ip, pc, #0, 12
   12b6c:	add	ip, ip, #266240	; 0x41000
   12b70:	ldr	pc, [ip, #1796]!	; 0x704

00012b74 <close@plt>:
   12b74:	add	ip, pc, #0, 12
   12b78:	add	ip, ip, #266240	; 0x41000
   12b7c:	ldr	pc, [ip, #1788]!	; 0x6fc

00012b80 <__lxstat64@plt>:
   12b80:	add	ip, pc, #0, 12
   12b84:	add	ip, ip, #266240	; 0x41000
   12b88:	ldr	pc, [ip, #1780]!	; 0x6f4

00012b8c <closedir@plt>:
   12b8c:	add	ip, pc, #0, 12
   12b90:	add	ip, ip, #266240	; 0x41000
   12b94:	ldr	pc, [ip, #1772]!	; 0x6ec

00012b98 <getgrgid@plt>:
   12b98:	add	ip, pc, #0, 12
   12b9c:	add	ip, ip, #266240	; 0x41000
   12ba0:	ldr	pc, [ip, #1764]!	; 0x6e4

00012ba4 <getgrnam@plt>:
   12ba4:	add	ip, pc, #0, 12
   12ba8:	add	ip, ip, #266240	; 0x41000
   12bac:	ldr	pc, [ip, #1756]!	; 0x6dc

00012bb0 <strspn@plt>:
   12bb0:	add	ip, pc, #0, 12
   12bb4:	add	ip, ip, #266240	; 0x41000
   12bb8:	ldr	pc, [ip, #1748]!	; 0x6d4

00012bbc <__assert_fail@plt>:
   12bbc:	add	ip, pc, #0, 12
   12bc0:	add	ip, ip, #266240	; 0x41000
   12bc4:	ldr	pc, [ip, #1740]!	; 0x6cc

Disassembly of section .text:

00012bc8 <.text>:
   12bc8:	mov	fp, #0
   12bcc:	mov	lr, #0
   12bd0:	pop	{r1}		; (ldr r1, [sp], #4)
   12bd4:	mov	r2, sp
   12bd8:	push	{r2}		; (str r2, [sp, #-4]!)
   12bdc:	push	{r0}		; (str r0, [sp, #-4]!)
   12be0:	ldr	ip, [pc, #16]	; 12bf8 <__assert_fail@plt+0x3c>
   12be4:	push	{ip}		; (str ip, [sp, #-4]!)
   12be8:	ldr	r0, [pc, #12]	; 12bfc <__assert_fail@plt+0x40>
   12bec:	ldr	r3, [pc, #12]	; 12c00 <__assert_fail@plt+0x44>
   12bf0:	bl	127f0 <__libc_start_main@plt>
   12bf4:	bl	12b68 <abort@plt>
   12bf8:	andeq	sp, r3, r8, ror #13
   12bfc:			; <UNDEFINED> instruction: 0x00012cb8
   12c00:	andeq	sp, r3, r8, lsl #13
   12c04:	ldr	r3, [pc, #20]	; 12c20 <__assert_fail@plt+0x64>
   12c08:	ldr	r2, [pc, #20]	; 12c24 <__assert_fail@plt+0x68>
   12c0c:	add	r3, pc, r3
   12c10:	ldr	r2, [r3, r2]
   12c14:	cmp	r2, #0
   12c18:	bxeq	lr
   12c1c:	b	12838 <__gmon_start__@plt>
   12c20:	andeq	r1, r4, ip, ror #7
   12c24:	muleq	r0, r4, r2
   12c28:	ldr	r0, [pc, #24]	; 12c48 <__assert_fail@plt+0x8c>
   12c2c:	ldr	r3, [pc, #24]	; 12c4c <__assert_fail@plt+0x90>
   12c30:	cmp	r3, r0
   12c34:	bxeq	lr
   12c38:	ldr	r3, [pc, #16]	; 12c50 <__assert_fail@plt+0x94>
   12c3c:	cmp	r3, #0
   12c40:	bxeq	lr
   12c44:	bx	r3
   12c48:	andeq	r4, r5, ip, asr #10
   12c4c:	andeq	r4, r5, ip, asr #10
   12c50:	andeq	r0, r0, r0
   12c54:	ldr	r0, [pc, #36]	; 12c80 <__assert_fail@plt+0xc4>
   12c58:	ldr	r1, [pc, #36]	; 12c84 <__assert_fail@plt+0xc8>
   12c5c:	sub	r1, r1, r0
   12c60:	asr	r1, r1, #2
   12c64:	add	r1, r1, r1, lsr #31
   12c68:	asrs	r1, r1, #1
   12c6c:	bxeq	lr
   12c70:	ldr	r3, [pc, #16]	; 12c88 <__assert_fail@plt+0xcc>
   12c74:	cmp	r3, #0
   12c78:	bxeq	lr
   12c7c:	bx	r3
   12c80:	andeq	r4, r5, ip, asr #10
   12c84:	andeq	r4, r5, ip, asr #10
   12c88:	andeq	r0, r0, r0
   12c8c:	push	{r4, lr}
   12c90:	ldr	r4, [pc, #24]	; 12cb0 <__assert_fail@plt+0xf4>
   12c94:	ldrb	r3, [r4]
   12c98:	cmp	r3, #0
   12c9c:	popne	{r4, pc}
   12ca0:	bl	12c28 <__assert_fail@plt+0x6c>
   12ca4:	mov	r3, #1
   12ca8:	strb	r3, [r4]
   12cac:	pop	{r4, pc}
   12cb0:	andeq	r4, r5, r0, ror r5
   12cb4:	b	12c54 <__assert_fail@plt+0x98>
   12cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cbc:	add	fp, sp, #28
   12cc0:	sub	sp, sp, #236	; 0xec
   12cc4:	mov	r5, r0
   12cc8:	ldr	r0, [r1]
   12ccc:	mov	r6, r1
   12cd0:	cmp	r0, #0
   12cd4:	movweq	r0, #55156	; 0xd774
   12cd8:	movteq	r0, #3
   12cdc:	bl	28210 <__assert_fail@plt+0x15654>
   12ce0:	bl	1820c <__assert_fail@plt+0x5650>
   12ce4:	movw	r8, #20056	; 0x4e58
   12ce8:	mov	r0, #0
   12cec:	movt	r8, #5
   12cf0:	str	r0, [r8, #28]
   12cf4:	strb	r0, [r8, #40]	; 0x28
   12cf8:	strb	r0, [r8, #32]
   12cfc:	mvn	r0, #99	; 0x63
   12d00:	str	r0, [r8, #16]
   12d04:	bl	1fd54 <__assert_fail@plt+0xd198>
   12d08:	cmp	r0, #0
   12d0c:	beq	12d14 <__assert_fail@plt+0x158>
   12d10:	bl	1f93c <__assert_fail@plt+0xcd80>
   12d14:	movw	r0, #1806	; 0x70e
   12d18:	movt	r0, #4
   12d1c:	bl	19118 <__assert_fail@plt+0x655c>
   12d20:	cmp	r0, #0
   12d24:	str	r0, [r8, #36]	; 0x24
   12d28:	beq	13164 <__assert_fail@plt+0x5a8>
   12d2c:	movw	r4, #20100	; 0x4e84
   12d30:	movt	r4, #5
   12d34:	mov	r0, r4
   12d38:	bl	18d40 <__assert_fail@plt+0x6184>
   12d3c:	movw	r1, #63055	; 0xf64f
   12d40:	mov	r0, #6
   12d44:	movt	r1, #3
   12d48:	bl	129e8 <setlocale@plt>
   12d4c:	movw	r7, #7805	; 0x1e7d
   12d50:	movw	r1, #55205	; 0xd7a5
   12d54:	movt	r7, #4
   12d58:	movt	r1, #3
   12d5c:	mov	r0, r7
   12d60:	bl	12af0 <bindtextdomain@plt>
   12d64:	mov	r0, r7
   12d68:	bl	126a0 <textdomain@plt>
   12d6c:	movw	r0, #5060	; 0x13c4
   12d70:	movt	r0, #2
   12d74:	bl	3d6ec <__assert_fail@plt+0x2ab30>
   12d78:	cmp	r0, #0
   12d7c:	bne	13178 <__assert_fail@plt+0x5bc>
   12d80:	mov	r0, r5
   12d84:	mov	r1, r6
   12d88:	bl	189ac <__assert_fail@plt+0x5df0>
   12d8c:	mov	r7, r0
   12d90:	ldr	r0, [r4, #44]	; 0x2c
   12d94:	tst	r0, #2
   12d98:	movwne	r1, #34548	; 0x86f4
   12d9c:	movtne	r1, #1
   12da0:	strne	r1, [r4, #52]	; 0x34
   12da4:	tst	r0, #128	; 0x80
   12da8:	bne	1312c <__assert_fail@plt+0x570>
   12dac:	mov	r0, r5
   12db0:	mov	r1, r6
   12db4:	mov	r2, r7
   12db8:	bl	16060 <__assert_fail@plt+0x34a4>
   12dbc:	mov	r9, r0
   12dc0:	add	r6, r6, r7, lsl #2
   12dc4:	mov	r0, #0
   12dc8:	cmp	r7, r5
   12dcc:	bge	12de0 <__assert_fail@plt+0x224>
   12dd0:	ldr	r0, [r6]
   12dd4:	mov	r1, #1
   12dd8:	bl	18934 <__assert_fail@plt+0x5d78>
   12ddc:	eor	r0, r0, #1
   12de0:	ldr	r5, [r4, #76]	; 0x4c
   12de4:	cmp	r5, #0
   12de8:	beq	12ecc <__assert_fail@plt+0x310>
   12dec:	cmp	r0, #0
   12df0:	bne	131a4 <__assert_fail@plt+0x5e8>
   12df4:	movw	r1, #63418	; 0xf7ba
   12df8:	mov	r0, r5
   12dfc:	movt	r1, #3
   12e00:	bl	124cc <strcmp@plt>
   12e04:	cmp	r0, #0
   12e08:	beq	12ef0 <__assert_fail@plt+0x334>
   12e0c:	mov	r0, #0
   12e10:	mov	r1, r5
   12e14:	bl	19020 <__assert_fail@plt+0x6464>
   12e18:	str	r0, [sp, #20]
   12e1c:	ldr	r0, [r4, #76]	; 0x4c
   12e20:	movw	r1, #7972	; 0x1f24
   12e24:	movt	r1, #4
   12e28:	bl	12ab4 <fopen64@plt>
   12e2c:	cmp	r0, #0
   12e30:	beq	13248 <__assert_fail@plt+0x68c>
   12e34:	mov	r6, r0
   12e38:	bl	12958 <fileno@plt>
   12e3c:	cmn	r0, #1
   12e40:	ble	13278 <__assert_fail@plt+0x6bc>
   12e44:	mov	r5, r0
   12e48:	ldrb	r0, [r4, #80]	; 0x50
   12e4c:	cmp	r0, #0
   12e50:	beq	12ebc <__assert_fail@plt+0x300>
   12e54:	add	r1, sp, #128	; 0x80
   12e58:	mov	r0, r5
   12e5c:	bl	3d714 <__assert_fail@plt+0x2ab58>
   12e60:	cmp	r0, #0
   12e64:	bne	12ebc <__assert_fail@plt+0x300>
   12e68:	add	r1, sp, #24
   12e6c:	mov	r0, #0
   12e70:	bl	3d714 <__assert_fail@plt+0x2ab58>
   12e74:	cmp	r0, #0
   12e78:	bne	12ebc <__assert_fail@plt+0x300>
   12e7c:	ldr	r0, [sp, #120]	; 0x78
   12e80:	ldr	r2, [sp, #224]	; 0xe0
   12e84:	ldr	r1, [sp, #124]	; 0x7c
   12e88:	ldr	r3, [sp, #228]	; 0xe4
   12e8c:	eor	r1, r3, r1
   12e90:	eor	r0, r2, r0
   12e94:	orrs	r0, r0, r1
   12e98:	bne	12ebc <__assert_fail@plt+0x300>
   12e9c:	ldr	r0, [sp, #24]
   12ea0:	ldr	r2, [sp, #128]	; 0x80
   12ea4:	ldr	r1, [sp, #28]
   12ea8:	ldr	r3, [sp, #132]	; 0x84
   12eac:	eor	r1, r3, r1
   12eb0:	eor	r0, r2, r0
   12eb4:	orrs	r0, r0, r1
   12eb8:	beq	132c4 <__assert_fail@plt+0x708>
   12ebc:	mov	r0, r5
   12ec0:	mov	r1, #1
   12ec4:	bl	21338 <__assert_fail@plt+0xe77c>
   12ec8:	b	12f2c <__assert_fail@plt+0x370>
   12ecc:	cmp	r0, #0
   12ed0:	beq	130a8 <__assert_fail@plt+0x4ec>
   12ed4:	mov	r0, r6
   12ed8:	bl	21030 <__assert_fail@plt+0xe474>
   12edc:	mov	r5, r0
   12ee0:	mov	r0, #0
   12ee4:	mov	r6, #0
   12ee8:	str	r0, [sp, #20]
   12eec:	b	12f38 <__assert_fail@plt+0x37c>
   12ef0:	ldrb	r0, [r4, #80]	; 0x50
   12ef4:	cmp	r0, #0
   12ef8:	bne	13298 <__assert_fail@plt+0x6dc>
   12efc:	movw	r1, #55435	; 0xd88b
   12f00:	mov	r0, #0
   12f04:	mov	r2, #5
   12f08:	movt	r1, #3
   12f0c:	bl	1264c <dcgettext@plt>
   12f10:	mov	r1, r0
   12f14:	mov	r0, #0
   12f18:	bl	19020 <__assert_fail@plt+0x6464>
   12f1c:	str	r0, [sp, #20]
   12f20:	movw	r0, #17768	; 0x4568
   12f24:	movt	r0, #5
   12f28:	ldr	r6, [r0]
   12f2c:	mov	r0, r6
   12f30:	bl	21064 <__assert_fail@plt+0xe4a8>
   12f34:	mov	r5, r0
   12f38:	cmp	r5, #0
   12f3c:	beq	13160 <__assert_fail@plt+0x5a4>
   12f40:	add	r1, sp, #128	; 0x80
   12f44:	mov	r0, r5
   12f48:	str	r6, [sp, #12]
   12f4c:	str	r9, [sp, #16]
   12f50:	bl	21098 <__assert_fail@plt+0xe4dc>
   12f54:	cmp	r0, #0
   12f58:	beq	1304c <__assert_fail@plt+0x490>
   12f5c:	mov	sl, r0
   12f60:	mov	r6, #1
   12f64:	add	r9, sp, #128	; 0x80
   12f68:	mov	r7, #1
   12f6c:	ldrb	r1, [sl]
   12f70:	ldr	r0, [r4, #76]	; 0x4c
   12f74:	cmp	r1, #0
   12f78:	beq	12fbc <__assert_fail@plt+0x400>
   12f7c:	cmp	r0, #0
   12f80:	bne	12f98 <__assert_fail@plt+0x3dc>
   12f84:	mov	r0, sl
   12f88:	mov	r1, #1
   12f8c:	bl	18934 <__assert_fail@plt+0x5d78>
   12f90:	cmp	r0, #0
   12f94:	bne	130c8 <__assert_fail@plt+0x50c>
   12f98:	mov	r0, sl
   12f9c:	bl	1288c <strlen@plt>
   12fa0:	str	r0, [r8, #20]
   12fa4:	mov	r0, sl
   12fa8:	bl	13308 <__assert_fail@plt+0x74c>
   12fac:	cmp	r0, #0
   12fb0:	beq	130c4 <__assert_fail@plt+0x508>
   12fb4:	and	r7, r7, r0
   12fb8:	b	13030 <__assert_fail@plt+0x474>
   12fbc:	cmp	r0, #0
   12fc0:	beq	13004 <__assert_fail@plt+0x448>
   12fc4:	mov	r0, r5
   12fc8:	bl	21144 <__assert_fail@plt+0xe588>
   12fcc:	movw	r1, #55706	; 0xd99a
   12fd0:	mov	r7, r0
   12fd4:	mov	r0, #0
   12fd8:	mov	r2, #5
   12fdc:	movt	r1, #3
   12fe0:	bl	1264c <dcgettext@plt>
   12fe4:	ldr	r3, [sp, #20]
   12fe8:	movw	r2, #55695	; 0xd98f
   12fec:	str	r0, [sp, #4]
   12ff0:	mov	r0, #0
   12ff4:	mov	r1, #0
   12ff8:	str	r7, [sp]
   12ffc:	movt	r2, #3
   13000:	b	13024 <__assert_fail@plt+0x468>
   13004:	mov	r0, #0
   13008:	mov	r1, sl
   1300c:	bl	19020 <__assert_fail@plt+0x6464>
   13010:	movw	r2, #14847	; 0x39ff
   13014:	mov	r3, r0
   13018:	mov	r0, #0
   1301c:	mov	r1, #2
   13020:	movt	r2, #4
   13024:	bl	12790 <error@plt>
   13028:	str	r6, [r8, #28]
   1302c:	mov	r7, #0
   13030:	mov	r0, r5
   13034:	mov	r1, r9
   13038:	bl	21098 <__assert_fail@plt+0xe4dc>
   1303c:	mov	sl, r0
   13040:	cmp	r0, #0
   13044:	bne	12f6c <__assert_fail@plt+0x3b0>
   13048:	b	13050 <__assert_fail@plt+0x494>
   1304c:	mov	r7, #1
   13050:	ldr	r0, [sp, #128]	; 0x80
   13054:	ldr	r9, [sp, #16]
   13058:	cmp	r0, #2
   1305c:	beq	130cc <__assert_fail@plt+0x510>
   13060:	cmp	r0, #4
   13064:	bne	13158 <__assert_fail@plt+0x59c>
   13068:	bl	128d4 <__errno_location@plt>
   1306c:	ldr	r6, [r0]
   13070:	movw	r1, #55640	; 0xd958
   13074:	mov	r0, #0
   13078:	mov	r2, #5
   1307c:	mov	r7, #0
   13080:	movt	r1, #3
   13084:	bl	1264c <dcgettext@plt>
   13088:	ldr	r3, [sp, #20]
   1308c:	mov	r2, r0
   13090:	mov	r0, #0
   13094:	mov	r1, r6
   13098:	bl	12790 <error@plt>
   1309c:	mov	r0, #1
   130a0:	str	r0, [r8, #28]
   130a4:	b	130cc <__assert_fail@plt+0x510>
   130a8:	mov	r0, #46	; 0x2e
   130ac:	strh	r0, [sp, #128]	; 0x80
   130b0:	add	r0, sp, #128	; 0x80
   130b4:	bl	13308 <__assert_fail@plt+0x74c>
   130b8:	cmp	r0, #0
   130bc:	bne	13114 <__assert_fail@plt+0x558>
   130c0:	b	13120 <__assert_fail@plt+0x564>
   130c4:	mov	r7, #0
   130c8:	ldr	r9, [sp, #16]
   130cc:	mov	r0, r5
   130d0:	bl	21168 <__assert_fail@plt+0xe5ac>
   130d4:	tst	r7, #1
   130d8:	ldrne	r0, [r4, #76]	; 0x4c
   130dc:	cmpne	r0, #0
   130e0:	bne	130f0 <__assert_fail@plt+0x534>
   130e4:	tst	r7, #1
   130e8:	bne	13114 <__assert_fail@plt+0x558>
   130ec:	b	13120 <__assert_fail@plt+0x564>
   130f0:	ldr	r4, [sp, #12]
   130f4:	mov	r0, r4
   130f8:	bl	1258c <ferror@plt>
   130fc:	cmp	r0, #0
   13100:	bne	13220 <__assert_fail@plt+0x664>
   13104:	mov	r0, r4
   13108:	bl	129a0 <fclose@plt>
   1310c:	cmp	r0, #0
   13110:	bne	13220 <__assert_fail@plt+0x664>
   13114:	mov	r0, r9
   13118:	bl	1531c <__assert_fail@plt+0x2760>
   1311c:	bl	182ac <__assert_fail@plt+0x56f0>
   13120:	ldr	r0, [r8, #28]
   13124:	sub	sp, fp, #28
   13128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1312c:	movw	r0, #17760	; 0x4560
   13130:	movt	r0, #5
   13134:	ldr	r9, [r0]
   13138:	add	r0, r4, #28
   1313c:	bl	12640 <ctime@plt>
   13140:	movw	r1, #55264	; 0xd7e0
   13144:	mov	r2, r0
   13148:	mov	r0, r9
   1314c:	movt	r1, #3
   13150:	bl	128c8 <fprintf@plt>
   13154:	b	12dac <__assert_fail@plt+0x1f0>
   13158:	cmp	r0, #3
   1315c:	bne	13200 <__assert_fail@plt+0x644>
   13160:	bl	2ae30 <__assert_fail@plt+0x18274>
   13164:	bl	128d4 <__errno_location@plt>
   13168:	ldr	r4, [r0]
   1316c:	movw	r1, #55161	; 0xd779
   13170:	movt	r1, #3
   13174:	b	13188 <__assert_fail@plt+0x5cc>
   13178:	bl	128d4 <__errno_location@plt>
   1317c:	ldr	r4, [r0]
   13180:	movw	r1, #55229	; 0xd7bd
   13184:	movt	r1, #3
   13188:	mov	r0, #0
   1318c:	mov	r2, #5
   13190:	bl	1264c <dcgettext@plt>
   13194:	mov	r2, r0
   13198:	mov	r0, #1
   1319c:	mov	r1, r4
   131a0:	bl	12790 <error@plt>
   131a4:	movw	r1, #55283	; 0xd7f3
   131a8:	mov	r0, #0
   131ac:	mov	r2, #5
   131b0:	movt	r1, #3
   131b4:	bl	1264c <dcgettext@plt>
   131b8:	ldr	r1, [r6]
   131bc:	mov	r4, r0
   131c0:	mov	r0, #0
   131c4:	bl	19020 <__assert_fail@plt+0x6464>
   131c8:	mov	r3, r0
   131cc:	mov	r0, #0
   131d0:	mov	r1, #0
   131d4:	mov	r2, r4
   131d8:	bl	12790 <error@plt>
   131dc:	movw	r1, #55300	; 0xd804
   131e0:	mov	r0, #0
   131e4:	mov	r2, #5
   131e8:	movt	r1, #3
   131ec:	bl	1264c <dcgettext@plt>
   131f0:	movw	r2, #14847	; 0x39ff
   131f4:	mov	r3, r0
   131f8:	movt	r2, #4
   131fc:	b	132b8 <__assert_fail@plt+0x6fc>
   13200:	movw	r0, #55655	; 0xd967
   13204:	movw	r1, #55479	; 0xd8b7
   13208:	movw	r3, #55489	; 0xd8c1
   1320c:	movw	r2, #675	; 0x2a3
   13210:	movt	r0, #3
   13214:	movt	r1, #3
   13218:	movt	r3, #3
   1321c:	bl	12bbc <__assert_fail@plt>
   13220:	movw	r1, #55736	; 0xd9b8
   13224:	mov	r0, #0
   13228:	mov	r2, #5
   1322c:	movt	r1, #3
   13230:	bl	1264c <dcgettext@plt>
   13234:	ldr	r3, [sp, #20]
   13238:	mov	r2, r0
   1323c:	mov	r0, #1
   13240:	mov	r1, #0
   13244:	bl	12790 <error@plt>
   13248:	bl	128d4 <__errno_location@plt>
   1324c:	ldr	r4, [r0]
   13250:	movw	r1, #55452	; 0xd89c
   13254:	mov	r0, #0
   13258:	mov	r2, #5
   1325c:	movt	r1, #3
   13260:	bl	1264c <dcgettext@plt>
   13264:	ldr	r3, [sp, #20]
   13268:	mov	r2, r0
   1326c:	mov	r0, #1
   13270:	mov	r1, r4
   13274:	bl	12790 <error@plt>
   13278:	movw	r0, #55958	; 0xda96
   1327c:	movw	r1, #55479	; 0xd8b7
   13280:	movw	r3, #55489	; 0xd8c1
   13284:	movw	r2, #610	; 0x262
   13288:	movt	r0, #3
   1328c:	movt	r1, #3
   13290:	movt	r3, #3
   13294:	bl	12bbc <__assert_fail@plt>
   13298:	movw	r1, #55351	; 0xd837
   1329c:	mov	r0, #0
   132a0:	mov	r2, #5
   132a4:	movt	r1, #3
   132a8:	bl	1264c <dcgettext@plt>
   132ac:	movw	r2, #12740	; 0x31c4
   132b0:	mov	r3, r0
   132b4:	movt	r2, #4
   132b8:	mov	r0, #1
   132bc:	mov	r1, #0
   132c0:	bl	12790 <error@plt>
   132c4:	movw	r1, #55541	; 0xd8f5
   132c8:	mov	r0, #0
   132cc:	mov	r2, #5
   132d0:	movt	r1, #3
   132d4:	bl	1264c <dcgettext@plt>
   132d8:	mov	r3, r0
   132dc:	ldr	r0, [sp, #20]
   132e0:	movw	r2, #55533	; 0xd8ed
   132e4:	movt	r2, #3
   132e8:	str	r0, [sp]
   132ec:	b	132b8 <__assert_fail@plt+0x6fc>
   132f0:	movw	r1, #17056	; 0x42a0
   132f4:	movt	r1, #5
   132f8:	ldr	r1, [r1]
   132fc:	str	r1, [r0]
   13300:	mov	r0, #1
   13304:	bx	lr
   13308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1330c:	add	fp, sp, #28
   13310:	sub	sp, sp, #268	; 0x10c
   13314:	mov	r7, r0
   13318:	bl	1288c <strlen@plt>
   1331c:	movw	sl, #17056	; 0x42a0
   13320:	movw	r5, #20056	; 0x4e58
   13324:	movt	sl, #5
   13328:	movt	r5, #5
   1332c:	ldr	r1, [sl]
   13330:	str	r0, [r5, #20]
   13334:	tst	r1, #512	; 0x200
   13338:	beq	13358 <__assert_fail@plt+0x79c>
   1333c:	movw	r2, #17060	; 0x42a4
   13340:	mvn	r0, #99	; 0x63
   13344:	movt	r2, #5
   13348:	str	r0, [r5, #16]
   1334c:	ldr	r3, [r2]
   13350:	cmn	r3, #1
   13354:	strle	r0, [r2]
   13358:	movw	r2, #20100	; 0x4e84
   1335c:	mov	r0, #0
   13360:	movt	r2, #5
   13364:	str	r0, [sp, #52]	; 0x34
   13368:	str	r7, [sp, #48]	; 0x30
   1336c:	ldr	r0, [r2, #48]	; 0x30
   13370:	cmp	r0, #0
   13374:	beq	13398 <__assert_fail@plt+0x7dc>
   13378:	cmp	r0, #1
   1337c:	beq	13390 <__assert_fail@plt+0x7d4>
   13380:	cmp	r0, #2
   13384:	bne	133a4 <__assert_fail@plt+0x7e8>
   13388:	mov	r0, #17
   1338c:	b	1339c <__assert_fail@plt+0x7e0>
   13390:	mov	r0, #3
   13394:	b	1339c <__assert_fail@plt+0x7e0>
   13398:	mov	r0, #16
   1339c:	orr	r1, r1, r0
   133a0:	str	r1, [sl]
   133a4:	ldrb	r0, [r2, #13]
   133a8:	mov	r2, #0
   133ac:	mov	r4, #0
   133b0:	cmp	r0, #0
   133b4:	add	r0, sp, #48	; 0x30
   133b8:	orrne	r1, r1, #64	; 0x40
   133bc:	strne	r1, [sl]
   133c0:	bl	2c114 <__assert_fail@plt+0x19558>
   133c4:	mov	r6, r0
   133c8:	bl	128d4 <__errno_location@plt>
   133cc:	mov	r9, r0
   133d0:	cmp	r6, #0
   133d4:	beq	1341c <__assert_fail@plt+0x860>
   133d8:	mov	r0, r6
   133dc:	str	r7, [sp, #16]
   133e0:	str	r4, [r9]
   133e4:	bl	2c9cc <__assert_fail@plt+0x19e10>
   133e8:	movw	r4, #20100	; 0x4e84
   133ec:	cmp	r0, #0
   133f0:	movt	r4, #5
   133f4:	beq	13b2c <__assert_fail@plt+0xf70>
   133f8:	mov	r8, r0
   133fc:	add	r0, sp, #56	; 0x38
   13400:	str	r9, [sp, #32]
   13404:	str	r6, [sp, #36]	; 0x24
   13408:	add	r0, r0, #96	; 0x60
   1340c:	str	r0, [sp, #40]	; 0x28
   13410:	mov	r0, #-2147483648	; 0x80000000
   13414:	str	r0, [sp, #44]	; 0x2c
   13418:	b	134cc <__assert_fail@plt+0x910>
   1341c:	ldr	r4, [r9]
   13420:	movw	r1, #55753	; 0xd9c9
   13424:	mov	r0, #0
   13428:	mov	r2, #5
   1342c:	movt	r1, #3
   13430:	bl	1264c <dcgettext@plt>
   13434:	mov	r6, r0
   13438:	mov	r0, #0
   1343c:	mov	r1, r7
   13440:	bl	19020 <__assert_fail@plt+0x6464>
   13444:	mov	r3, r0
   13448:	mov	r0, #0
   1344c:	mov	r1, r4
   13450:	mov	r2, r6
   13454:	bl	12790 <error@plt>
   13458:	mov	r4, #1
   1345c:	b	13ba0 <__assert_fail@plt+0xfe4>
   13460:	mov	r9, #0
   13464:	b	13900 <__assert_fail@plt+0xd44>
   13468:	movw	r0, #17760	; 0x4560
   1346c:	ldr	r2, [r8, #28]
   13470:	movt	r0, #5
   13474:	ldr	r6, [r0]
   13478:	movw	r0, #20100	; 0x4e84
   1347c:	movt	r0, #5
   13480:	ldr	r1, [r0, #72]	; 0x48
   13484:	mov	r0, #0
   13488:	bl	29834 <__assert_fail@plt+0x16c78>
   1348c:	str	r0, [sp, #28]
   13490:	ldrh	r0, [r8, #56]	; 0x38
   13494:	bl	13c3c <__assert_fail@plt+0x1080>
   13498:	ldrb	r1, [r5, #5]
   1349c:	mov	r3, r0
   134a0:	ldrb	r0, [r5, #4]
   134a4:	ldr	r2, [sp, #28]
   134a8:	str	r9, [sp]
   134ac:	str	r4, [sp, #4]
   134b0:	str	r1, [sp, #12]
   134b4:	movw	r1, #56215	; 0xdb97
   134b8:	str	r0, [sp, #8]
   134bc:	mov	r0, r6
   134c0:	movt	r1, #3
   134c4:	bl	128c8 <fprintf@plt>
   134c8:	b	13974 <__assert_fail@plt+0xdb8>
   134cc:	ldrb	r0, [r5, #32]
   134d0:	cmp	r0, #0
   134d4:	beq	134ec <__assert_fail@plt+0x930>
   134d8:	ldr	r0, [r8, #48]	; 0x30
   134dc:	ldr	r1, [sp, #44]	; 0x2c
   134e0:	cmp	r0, r1
   134e4:	beq	134ec <__assert_fail@plt+0x930>
   134e8:	bl	18090 <__assert_fail@plt+0x54d4>
   134ec:	ldr	r0, [r8, #48]	; 0x30
   134f0:	str	r0, [sp, #44]	; 0x2c
   134f4:	mov	r0, #0
   134f8:	strb	r0, [r5, #4]
   134fc:	strb	r0, [r5, #40]	; 0x28
   13500:	ldr	r0, [r8, #80]	; 0x50
   13504:	cmp	r0, #0
   13508:	str	r0, [r5, #8]
   1350c:	movwne	r0, #1
   13510:	strb	r0, [r5, #5]
   13514:	ldrb	r0, [r4, #44]	; 0x2c
   13518:	tst	r0, #4
   1351c:	bne	139f4 <__assert_fail@plt+0xe38>
   13520:	add	r7, r8, #56	; 0x38
   13524:	ldrh	r0, [r7]
   13528:	cmp	r0, #6
   1352c:	ldrne	r0, [r8, #48]	; 0x30
   13530:	cmpne	r0, #0
   13534:	bne	13570 <__assert_fail@plt+0x9b4>
   13538:	ldr	r0, [sl]
   1353c:	tst	r0, #512	; 0x200
   13540:	beq	13584 <__assert_fail@plt+0x9c8>
   13544:	movw	r0, #17060	; 0x42a4
   13548:	movt	r0, #5
   1354c:	ldr	r0, [r0]
   13550:	cmp	r0, #0
   13554:	blt	13584 <__assert_fail@plt+0x9c8>
   13558:	bl	12b74 <close@plt>
   1355c:	movw	r0, #17060	; 0x42a4
   13560:	mvn	r1, #0
   13564:	movt	r0, #5
   13568:	str	r1, [r0]
   1356c:	b	13584 <__assert_fail@plt+0x9c8>
   13570:	movw	r1, #17064	; 0x42a8
   13574:	movt	r1, #5
   13578:	ldr	r1, [r1]
   1357c:	cmp	r0, r1
   13580:	bgt	13538 <__assert_fail@plt+0x97c>
   13584:	ldrb	r0, [sl, #1]
   13588:	tst	r0, #2
   1358c:	beq	135f0 <__assert_fail@plt+0xa34>
   13590:	ldr	r0, [r6, #32]
   13594:	cmn	r0, #100	; 0x64
   13598:	beq	135a4 <__assert_fail@plt+0x9e8>
   1359c:	cmn	r0, #1
   135a0:	ble	13bbc <__assert_fail@plt+0x1000>
   135a4:	movw	r1, #17060	; 0x42a4
   135a8:	str	r0, [r5, #16]
   135ac:	movt	r1, #5
   135b0:	ldr	r1, [r1]
   135b4:	cmn	r1, #1
   135b8:	bgt	135f0 <__assert_fail@plt+0xa34>
   135bc:	cmn	r0, #100	; 0x64
   135c0:	bne	135d8 <__assert_fail@plt+0xa1c>
   135c4:	movw	r0, #17060	; 0x42a4
   135c8:	mvn	r1, #99	; 0x63
   135cc:	movt	r0, #5
   135d0:	str	r1, [r0]
   135d4:	b	135f0 <__assert_fail@plt+0xa34>
   135d8:	cmp	r0, #0
   135dc:	blt	13c1c <__assert_fail@plt+0x1060>
   135e0:	bl	21398 <__assert_fail@plt+0xe7dc>
   135e4:	movw	r1, #17060	; 0x42a4
   135e8:	movt	r1, #5
   135ec:	str	r0, [r1]
   135f0:	ldr	r0, [r8, #48]	; 0x30
   135f4:	movw	r1, #17064	; 0x42a8
   135f8:	movt	r1, #5
   135fc:	str	r0, [r1]
   13600:	ldr	r1, [sp, #40]	; 0x28
   13604:	ldrd	r2, [r8, #160]	; 0xa0
   13608:	strd	r2, [r1]
   1360c:	ldrh	r1, [r8, #56]	; 0x38
   13610:	sub	r1, r1, #2
   13614:	cmp	r1, #11
   13618:	bhi	13740 <__assert_fail@plt+0xb84>
   1361c:	add	r2, pc, #0
   13620:	ldr	pc, [r2, r1, lsl #2]
   13624:	andeq	r3, r1, r4, asr r6
   13628:	andeq	r3, r1, r0, asr #14
   1362c:	andeq	r3, r1, r8, lsr #13
   13630:	andeq	r3, r1, r0, asr #14
   13634:	andeq	r3, r1, r0, asr #14
   13638:	andeq	r3, r1, r0, lsl #14
   1363c:	andeq	r3, r1, r0, asr #14
   13640:	andeq	r3, r1, r0, asr #14
   13644:	andeq	r3, r1, r4, asr #13
   13648:	andeq	r3, r1, r0, asr #14
   1364c:	andeq	r3, r1, r0, asr #14
   13650:	andeq	r3, r1, ip, lsl #14
   13654:	ldr	r0, [r8, #80]	; 0x50
   13658:	and	r0, r0, #61440	; 0xf000
   1365c:	cmp	r0, #40960	; 0xa000
   13660:	bne	137b0 <__assert_fail@plt+0xbf4>
   13664:	movw	r1, #56423	; 0xdc67
   13668:	mov	r0, #0
   1366c:	mov	r2, #5
   13670:	movt	r1, #3
   13674:	bl	1264c <dcgettext@plt>
   13678:	ldr	r1, [r8, #28]
   1367c:	mov	r4, r0
   13680:	mov	r0, #0
   13684:	bl	19020 <__assert_fail@plt+0x6464>
   13688:	mov	r3, r0
   1368c:	mov	r2, r4
   13690:	movw	r4, #20100	; 0x4e84
   13694:	mov	r0, #0
   13698:	mov	r1, #0
   1369c:	movt	r4, #5
   136a0:	bl	12790 <error@plt>
   136a4:	b	13b08 <__assert_fail@plt+0xf4c>
   136a8:	ldr	r1, [r8, #28]
   136ac:	ldr	r0, [r8, #32]
   136b0:	bl	17fcc <__assert_fail@plt+0x5410>
   136b4:	ldrb	r0, [r4]
   136b8:	cmp	r0, #0
   136bc:	bne	13b10 <__assert_fail@plt+0xf54>
   136c0:	b	13740 <__assert_fail@plt+0xb84>
   136c4:	cmp	r0, #0
   136c8:	beq	13700 <__assert_fail@plt+0xb44>
   136cc:	ldr	r0, [r8, #24]
   136d0:	ldr	r2, [r4, #52]	; 0x34
   136d4:	sub	r1, fp, #136	; 0x88
   136d8:	blx	r2
   136dc:	cmp	r0, #0
   136e0:	beq	136f0 <__assert_fail@plt+0xb34>
   136e4:	ldr	r0, [r9]
   136e8:	cmp	r0, #40	; 0x28
   136ec:	beq	13730 <__assert_fail@plt+0xb74>
   136f0:	ldr	r1, [r8, #28]
   136f4:	ldr	r0, [r8, #32]
   136f8:	bl	17fcc <__assert_fail@plt+0x5410>
   136fc:	b	13740 <__assert_fail@plt+0xb84>
   13700:	ldr	r1, [r8, #28]
   13704:	ldr	r0, [r8, #32]
   13708:	b	13738 <__assert_fail@plt+0xb7c>
   1370c:	ldr	r0, [r8, #24]
   13710:	ldr	r2, [r4, #52]	; 0x34
   13714:	sub	r1, fp, #136	; 0x88
   13718:	blx	r2
   1371c:	cmp	r0, #0
   13720:	beq	13740 <__assert_fail@plt+0xb84>
   13724:	ldr	r0, [r9]
   13728:	cmp	r0, #40	; 0x28
   1372c:	bne	13740 <__assert_fail@plt+0xb84>
   13730:	ldr	r1, [r8, #28]
   13734:	mov	r0, #40	; 0x28
   13738:	bl	17fcc <__assert_fail@plt+0x5410>
   1373c:	b	13b10 <__assert_fail@plt+0xf54>
   13740:	ldrh	r1, [r7]
   13744:	movw	r0, #65534	; 0xfffe
   13748:	and	r0, r1, r0
   1374c:	cmp	r0, #10
   13750:	bne	13778 <__assert_fail@plt+0xbbc>
   13754:	ldrb	r0, [r5, #4]
   13758:	cmp	r0, #0
   1375c:	bne	13bdc <__assert_fail@plt+0x1020>
   13760:	ldr	r0, [r5, #8]
   13764:	cmp	r1, #11
   13768:	cmpne	r0, #0
   1376c:	bne	13bfc <__assert_fail@plt+0x1040>
   13770:	str	r0, [fp, #-136]	; 0xffffff78
   13774:	b	13870 <__assert_fail@plt+0xcb4>
   13778:	movw	r0, #257	; 0x101
   1377c:	add	r1, r8, #64	; 0x40
   13780:	mov	r2, #104	; 0x68
   13784:	strh	r0, [r5, #4]
   13788:	add	r0, sp, #56	; 0x38
   1378c:	bl	125c8 <memcpy@plt>
   13790:	ldr	r0, [sp, #72]	; 0x48
   13794:	cmp	r0, #0
   13798:	str	r0, [r5, #8]
   1379c:	str	r0, [fp, #-136]	; 0xffffff78
   137a0:	beq	13820 <__assert_fail@plt+0xc64>
   137a4:	ldr	r0, [r8, #48]	; 0x30
   137a8:	str	r0, [r5]
   137ac:	b	13880 <__assert_fail@plt+0xcc4>
   137b0:	movw	r1, #56544	; 0xdce0
   137b4:	mov	r0, #0
   137b8:	mov	r2, #5
   137bc:	movt	r1, #3
   137c0:	bl	1264c <dcgettext@plt>
   137c4:	ldr	r1, [r8, #28]
   137c8:	mov	r6, r0
   137cc:	mov	r0, #0
   137d0:	bl	19020 <__assert_fail@plt+0x6464>
   137d4:	mov	r9, r0
   137d8:	ldr	r0, [r8]
   137dc:	ldr	r1, [r4, #72]	; 0x48
   137e0:	ldr	r4, [r0, #40]	; 0x28
   137e4:	cmp	r4, #0
   137e8:	beq	13ad0 <__assert_fail@plt+0xf14>
   137ec:	ldr	r7, [r0, #28]
   137f0:	mov	r8, sl
   137f4:	mov	sl, r6
   137f8:	mov	r0, #0
   137fc:	ldrb	r6, [r7, r4]
   13800:	strb	r0, [r7, r4]
   13804:	mov	r0, #1
   13808:	mov	r2, r7
   1380c:	bl	29834 <__assert_fail@plt+0x16c78>
   13810:	strb	r6, [r7, r4]
   13814:	mov	r6, sl
   13818:	mov	sl, r8
   1381c:	b	13ae0 <__assert_fail@plt+0xf24>
   13820:	movw	r1, #56172	; 0xdb6c
   13824:	mov	r0, #0
   13828:	mov	r2, #5
   1382c:	movt	r1, #3
   13830:	bl	1264c <dcgettext@plt>
   13834:	mov	r4, r0
   13838:	movw	r0, #20100	; 0x4e84
   1383c:	ldr	r2, [r8, #28]
   13840:	movt	r0, #5
   13844:	ldr	r1, [r0, #72]	; 0x48
   13848:	mov	r0, #0
   1384c:	bl	29834 <__assert_fail@plt+0x16c78>
   13850:	mov	r3, r0
   13854:	mov	r2, r4
   13858:	movw	r4, #20100	; 0x4e84
   1385c:	mov	r0, #0
   13860:	mov	r1, #0
   13864:	movt	r4, #5
   13868:	bl	12790 <error@plt>
   1386c:	ldr	r0, [fp, #-136]	; 0xffffff78
   13870:	ldr	r1, [r8, #48]	; 0x30
   13874:	cmp	r0, #0
   13878:	str	r1, [r5]
   1387c:	beq	138e0 <__assert_fail@plt+0xd24>
   13880:	ldr	r1, [r8, #28]
   13884:	mov	r0, #0
   13888:	add	r2, r8, #168	; 0xa8
   1388c:	add	r3, sp, #56	; 0x38
   13890:	str	r0, [sp]
   13894:	sub	r0, fp, #136	; 0x88
   13898:	bl	187e8 <__assert_fail@plt+0x5c2c>
   1389c:	cmp	r0, #0
   138a0:	beq	13b10 <__assert_fail@plt+0xf54>
   138a4:	ldr	r1, [fp, #-136]	; 0xffffff78
   138a8:	ldrh	r0, [r7]
   138ac:	and	r1, r1, #61440	; 0xf000
   138b0:	cmp	r1, #16384	; 0x4000
   138b4:	bne	138e4 <__assert_fail@plt+0xd28>
   138b8:	mov	r9, #1
   138bc:	cmp	r0, #11
   138c0:	bne	13900 <__assert_fail@plt+0xd44>
   138c4:	ldr	r6, [sp, #36]	; 0x24
   138c8:	mov	r1, r8
   138cc:	mov	r2, #1
   138d0:	mov	r0, r6
   138d4:	bl	2dd90 <__assert_fail@plt+0x1b1d4>
   138d8:	ldr	r9, [sp, #32]
   138dc:	b	13b10 <__assert_fail@plt+0xf54>
   138e0:	ldrh	r0, [r7]
   138e4:	cmp	r0, #6
   138e8:	bhi	13460 <__assert_fail@plt+0x8a4>
   138ec:	mov	r1, #1
   138f0:	mov	r2, #70	; 0x46
   138f4:	mov	r9, #1
   138f8:	tst	r2, r1, lsl r0
   138fc:	moveq	r9, #0
   13900:	ldr	r2, [r4, #4]
   13904:	mov	r1, #0
   13908:	cmp	r2, #0
   1390c:	ldrge	r3, [r8, #48]	; 0x30
   13910:	cmpge	r3, r2
   13914:	bge	13aa4 <__assert_fail@plt+0xee8>
   13918:	ldrb	r3, [r4]
   1391c:	subs	r2, r0, #6
   13920:	sub	r0, r0, #1
   13924:	clz	r0, r0
   13928:	movwne	r2, #1
   1392c:	lsr	r0, r0, #5
   13930:	clz	r3, r3
   13934:	lsr	r3, r3, #5
   13938:	orr	r2, r2, r3
   1393c:	and	r0, r0, r3
   13940:	mov	r3, r4
   13944:	mov	r4, #1
   13948:	eor	r0, r0, r2
   1394c:	cmp	r0, #1
   13950:	bne	13968 <__assert_fail@plt+0xdac>
   13954:	ldr	r0, [r3, #8]
   13958:	ldr	r2, [r8, #48]	; 0x30
   1395c:	cmp	r2, r0
   13960:	movwlt	r1, #1
   13964:	mov	r4, r1
   13968:	ldrb	r0, [r3, #44]	; 0x2c
   1396c:	tst	r0, #4
   13970:	bne	13468 <__assert_fail@plt+0x8ac>
   13974:	ldr	r6, [sp, #36]	; 0x24
   13978:	cmp	r4, #0
   1397c:	bne	139d4 <__assert_fail@plt+0xe18>
   13980:	ldrh	r0, [r8, #56]	; 0x38
   13984:	orr	r0, r0, #1
   13988:	subs	r0, r0, #11
   1398c:	movwne	r0, #1
   13990:	strb	r0, [r5, #4]
   13994:	ldr	r0, [r8, #24]
   13998:	str	r0, [r5, #12]
   1399c:	ldr	r0, [r6, #32]
   139a0:	str	r0, [r5, #16]
   139a4:	bl	15d80 <__assert_fail@plt+0x31c4>
   139a8:	mov	r2, r0
   139ac:	ldr	r0, [r8, #28]
   139b0:	add	r1, sp, #56	; 0x38
   139b4:	bl	18eb8 <__assert_fail@plt+0x62fc>
   139b8:	ldrb	r0, [r5, #24]
   139bc:	cmp	r0, #0
   139c0:	beq	139d4 <__assert_fail@plt+0xe18>
   139c4:	mov	r0, r6
   139c8:	mov	r1, r8
   139cc:	mov	r2, #4
   139d0:	bl	2dd90 <__assert_fail@plt+0x1b1d4>
   139d4:	ldrh	r0, [r7]
   139d8:	ldr	r9, [sp, #32]
   139dc:	movw	r4, #20100	; 0x4e84
   139e0:	movt	r4, #5
   139e4:	cmp	r0, #6
   139e8:	moveq	r0, #0
   139ec:	strbeq	r0, [r5, #24]
   139f0:	b	13b10 <__assert_fail@plt+0xf54>
   139f4:	movw	r0, #17760	; 0x4560
   139f8:	ldr	r2, [r8, #28]
   139fc:	ldr	r1, [r4, #72]	; 0x48
   13a00:	movt	r0, #5
   13a04:	ldr	r0, [r0]
   13a08:	str	r0, [sp, #28]
   13a0c:	mov	r0, #0
   13a10:	bl	29834 <__assert_fail@plt+0x16c78>
   13a14:	mov	r7, r8
   13a18:	str	r0, [sp, #24]
   13a1c:	ldrh	r0, [r7, #56]!	; 0x38
   13a20:	bl	13c3c <__assert_fail@plt+0x1080>
   13a24:	str	r0, [sp, #20]
   13a28:	movw	r0, #17064	; 0x42a8
   13a2c:	ldr	r2, [r8, #28]
   13a30:	ldr	r4, [r7, #-8]
   13a34:	movt	r0, #5
   13a38:	ldr	r6, [r0]
   13a3c:	movw	r0, #20100	; 0x4e84
   13a40:	movt	r0, #5
   13a44:	ldr	r1, [r0, #72]	; 0x48
   13a48:	mov	r0, #1
   13a4c:	bl	29834 <__assert_fail@plt+0x16c78>
   13a50:	mov	r9, r0
   13a54:	movw	r0, #20100	; 0x4e84
   13a58:	ldr	r2, [r7, #-32]	; 0xffffffe0
   13a5c:	movt	r0, #5
   13a60:	ldr	r1, [r0, #72]	; 0x48
   13a64:	mov	r0, #2
   13a68:	bl	29834 <__assert_fail@plt+0x16c78>
   13a6c:	str	r4, [sp]
   13a70:	stmib	sp, {r6, r9}
   13a74:	str	r0, [sp, #12]
   13a78:	movw	r1, #55966	; 0xda9e
   13a7c:	movw	r4, #20100	; 0x4e84
   13a80:	ldr	r0, [sp, #28]
   13a84:	ldr	r2, [sp, #24]
   13a88:	ldr	r3, [sp, #20]
   13a8c:	ldr	r6, [sp, #36]	; 0x24
   13a90:	ldr	r9, [sp, #32]
   13a94:	movt	r1, #3
   13a98:	movt	r4, #5
   13a9c:	bl	128c8 <fprintf@plt>
   13aa0:	b	13524 <__assert_fail@plt+0x968>
   13aa4:	ldr	r0, [sp, #36]	; 0x24
   13aa8:	mov	r1, r8
   13aac:	mov	r2, #4
   13ab0:	bl	2dd90 <__assert_fail@plt+0x1b1d4>
   13ab4:	ldr	r0, [r4, #4]
   13ab8:	ldr	r1, [r8, #48]	; 0x30
   13abc:	cmp	r1, r0
   13ac0:	ldrh	r0, [r8, #56]	; 0x38
   13ac4:	mov	r1, #0
   13ac8:	movwgt	r1, #1
   13acc:	b	13918 <__assert_fail@plt+0xd5c>
   13ad0:	movw	r2, #63055	; 0xf64f
   13ad4:	mov	r0, #1
   13ad8:	movt	r2, #3
   13adc:	bl	29834 <__assert_fail@plt+0x16c78>
   13ae0:	str	r0, [sp]
   13ae4:	mov	r0, #0
   13ae8:	mov	r1, #0
   13aec:	mov	r2, r6
   13af0:	mov	r3, r9
   13af4:	bl	12790 <error@plt>
   13af8:	ldr	r9, [sp, #32]
   13afc:	ldr	r6, [sp, #36]	; 0x24
   13b00:	movw	r4, #20100	; 0x4e84
   13b04:	movt	r4, #5
   13b08:	mov	r0, #1
   13b0c:	str	r0, [r5, #28]
   13b10:	mov	r0, #0
   13b14:	str	r0, [r9]
   13b18:	mov	r0, r6
   13b1c:	bl	2c9cc <__assert_fail@plt+0x19e10>
   13b20:	mov	r8, r0
   13b24:	cmp	r0, #0
   13b28:	bne	134cc <__assert_fail@plt+0x910>
   13b2c:	ldr	r7, [r9]
   13b30:	cmp	r7, #0
   13b34:	beq	13b60 <__assert_fail@plt+0xfa4>
   13b38:	ldr	r1, [sp, #16]
   13b3c:	mov	r0, #0
   13b40:	mov	r4, #0
   13b44:	bl	19020 <__assert_fail@plt+0x6464>
   13b48:	movw	r2, #55770	; 0xd9da
   13b4c:	mov	r3, r0
   13b50:	mov	r0, #0
   13b54:	mov	r1, r7
   13b58:	movt	r2, #3
   13b5c:	b	13b9c <__assert_fail@plt+0xfe0>
   13b60:	mov	r0, r6
   13b64:	bl	2c84c <__assert_fail@plt+0x19c90>
   13b68:	cmp	r0, #0
   13b6c:	beq	13bb4 <__assert_fail@plt+0xff8>
   13b70:	ldr	r6, [r9]
   13b74:	movw	r1, #55828	; 0xda14
   13b78:	mov	r0, #0
   13b7c:	mov	r2, #5
   13b80:	mov	r4, #0
   13b84:	movt	r1, #3
   13b88:	bl	1264c <dcgettext@plt>
   13b8c:	ldr	r3, [sp, #16]
   13b90:	mov	r2, r0
   13b94:	mov	r0, #0
   13b98:	mov	r1, r6
   13b9c:	bl	12790 <error@plt>
   13ba0:	mov	r0, #1
   13ba4:	str	r0, [r5, #28]
   13ba8:	mov	r0, r4
   13bac:	sub	sp, fp, #28
   13bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb4:	mov	r4, #1
   13bb8:	b	13ba8 <__assert_fail@plt+0xfec>
   13bbc:	movw	r0, #55883	; 0xda4b
   13bc0:	movw	r1, #55479	; 0xd8b7
   13bc4:	movw	r3, #55917	; 0xda6d
   13bc8:	mov	r2, #107	; 0x6b
   13bcc:	movt	r0, #3
   13bd0:	movt	r1, #3
   13bd4:	movt	r3, #3
   13bd8:	bl	12bbc <__assert_fail@plt>
   13bdc:	movw	r0, #56070	; 0xdb06
   13be0:	movw	r1, #55479	; 0xd8b7
   13be4:	movw	r3, #56087	; 0xdb17
   13be8:	mov	r2, #380	; 0x17c
   13bec:	movt	r0, #3
   13bf0:	movt	r1, #3
   13bf4:	movt	r3, #3
   13bf8:	bl	12bbc <__assert_fail@plt>
   13bfc:	movw	r0, #56127	; 0xdb3f
   13c00:	movw	r1, #55479	; 0xd8b7
   13c04:	movw	r3, #56087	; 0xdb17
   13c08:	movw	r2, #381	; 0x17d
   13c0c:	movt	r0, #3
   13c10:	movt	r1, #3
   13c14:	movt	r3, #3
   13c18:	bl	12bbc <__assert_fail@plt>
   13c1c:	movw	r0, #55938	; 0xda82
   13c20:	movw	r1, #55479	; 0xd8b7
   13c24:	movw	r3, #55917	; 0xda6d
   13c28:	mov	r2, #125	; 0x7d
   13c2c:	movt	r0, #3
   13c30:	movt	r1, #3
   13c34:	movt	r3, #3
   13c38:	bl	12bbc <__assert_fail@plt>
   13c3c:	mov	r2, r0
   13c40:	sub	r0, r0, #1
   13c44:	cmp	r0, #14
   13c48:	movwcc	r1, #56624	; 0xdd30
   13c4c:	movtcc	r1, #3
   13c50:	ldrcc	r0, [r1, r0, lsl #2]
   13c54:	bxcc	lr
   13c58:	push	{r4, sl, fp, lr}
   13c5c:	add	fp, sp, #8
   13c60:	movw	r4, #17777	; 0x4571
   13c64:	movw	r1, #56418	; 0xdc62
   13c68:	movt	r4, #5
   13c6c:	movt	r1, #3
   13c70:	mov	r0, r4
   13c74:	bl	12a60 <sprintf@plt>
   13c78:	mov	r0, r4
   13c7c:	pop	{r4, sl, fp, pc}
   13c80:	ldrd	r0, [r1, #72]	; 0x48
   13c84:	mov	r3, #60	; 0x3c
   13c88:	b	13c90 <__assert_fail@plt+0x10d4>
   13c8c:	nop	{0}
   13c90:	push	{r4, r5, r7, sl, fp, lr}
   13c94:	add	fp, sp, #16
   13c98:	mov	r4, r1
   13c9c:	ldr	r1, [r2, #44]	; 0x2c
   13ca0:	cmp	r1, #2
   13ca4:	beq	13cec <__assert_fail@plt+0x1130>
   13ca8:	cmp	r1, #1
   13cac:	beq	13cd8 <__assert_fail@plt+0x111c>
   13cb0:	cmp	r1, #0
   13cb4:	bne	13d44 <__assert_fail@plt+0x1188>
   13cb8:	ldrd	r2, [r2, #48]	; 0x30
   13cbc:	mov	r1, r4
   13cc0:	bl	13e10 <__assert_fail@plt+0x1254>
   13cc4:	mov	r1, r0
   13cc8:	mov	r0, #0
   13ccc:	cmp	r1, #0
   13cd0:	movwgt	r0, #1
   13cd4:	pop	{r4, r5, r7, sl, fp, pc}
   13cd8:	ldrd	r2, [r2, #48]	; 0x30
   13cdc:	mov	r1, r4
   13ce0:	bl	13e10 <__assert_fail@plt+0x1254>
   13ce4:	lsr	r0, r0, #31
   13ce8:	pop	{r4, r5, r7, sl, fp, pc}
   13cec:	ldr	r7, [r2, #52]	; 0x34
   13cf0:	ldr	r2, [r2, #48]	; 0x30
   13cf4:	mov	r5, r3
   13cf8:	mov	r1, r2
   13cfc:	bl	12964 <difftime@plt>
   13d00:	vldr	d16, [pc, #96]	; 13d68 <__assert_fail@plt+0x11ac>
   13d04:	sub	r0, r4, r7
   13d08:	vmov	s4, r5
   13d0c:	mov	r1, #0
   13d10:	vmov	s2, r0
   13d14:	mov	r0, #0
   13d18:	vcvt.f64.s32	d17, s2
   13d1c:	vcvt.f64.s32	d18, s4
   13d20:	vmla.f64	d0, d17, d16
   13d24:	vcmpe.f64	d0, d18
   13d28:	vmrs	APSR_nzcv, fpscr
   13d2c:	vcmpe.f64	d0, #0.0
   13d30:	movwls	r1, #1
   13d34:	vmrs	APSR_nzcv, fpscr
   13d38:	movwgt	r0, #1
   13d3c:	and	r0, r0, r1
   13d40:	pop	{r4, r5, r7, sl, fp, pc}
   13d44:	movw	r0, #60281	; 0xeb79
   13d48:	movw	r1, #56719	; 0xdd8f
   13d4c:	movw	r3, #57698	; 0xe162
   13d50:	mov	r2, #138	; 0x8a
   13d54:	movt	r0, #3
   13d58:	movt	r1, #3
   13d5c:	movt	r3, #3
   13d60:	bl	12bbc <__assert_fail@plt>
   13d64:	nop	{0}
   13d68:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13d6c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13d70:	push	{r4, r5, r6, sl, fp, lr}
   13d74:	add	fp, sp, #16
   13d78:	mov	r5, r2
   13d7c:	ldr	r2, [r2, #156]	; 0x9c
   13d80:	mov	r4, r1
   13d84:	mov	r6, r0
   13d88:	cmp	r2, #0
   13d8c:	beq	13da8 <__assert_fail@plt+0x11ec>
   13d90:	mov	r0, r6
   13d94:	mov	r1, r4
   13d98:	bl	18eb8 <__assert_fail@plt+0x62fc>
   13d9c:	cmp	r0, #0
   13da0:	moveq	r0, #0
   13da4:	popeq	{r4, r5, r6, sl, fp, pc}
   13da8:	ldr	r2, [r5, #160]	; 0xa0
   13dac:	mov	r0, r6
   13db0:	mov	r1, r4
   13db4:	pop	{r4, r5, r6, sl, fp, lr}
   13db8:	b	18eb8 <__assert_fail@plt+0x62fc>
   13dbc:	push	{fp, lr}
   13dc0:	mov	fp, sp
   13dc4:	ldr	r0, [r2, #44]	; 0x2c
   13dc8:	cmp	r0, #0
   13dcc:	bne	13df0 <__assert_fail@plt+0x1234>
   13dd0:	ldrd	r0, [r1, #72]	; 0x48
   13dd4:	ldrd	r2, [r2, #48]	; 0x30
   13dd8:	bl	13e10 <__assert_fail@plt+0x1254>
   13ddc:	mov	r1, #0
   13de0:	cmp	r0, #0
   13de4:	movwgt	r1, #1
   13de8:	mov	r0, r1
   13dec:	pop	{fp, pc}
   13df0:	movw	r0, #56680	; 0xdd68
   13df4:	movw	r1, #56719	; 0xdd8f
   13df8:	movw	r3, #56726	; 0xdd96
   13dfc:	mov	r2, #166	; 0xa6
   13e00:	movt	r0, #3
   13e04:	movt	r1, #3
   13e08:	movt	r3, #3
   13e0c:	bl	12bbc <__assert_fail@plt>
   13e10:	push	{r4, r5, fp, lr}
   13e14:	add	fp, sp, #8
   13e18:	mov	r4, r3
   13e1c:	mov	r5, r1
   13e20:	cmp	r0, r2
   13e24:	moveq	r1, #0
   13e28:	cmpeq	r5, r4
   13e2c:	beq	13e5c <__assert_fail@plt+0x12a0>
   13e30:	mov	r1, r2
   13e34:	bl	12964 <difftime@plt>
   13e38:	vldr	d16, [pc, #40]	; 13e68 <__assert_fail@plt+0x12ac>
   13e3c:	sub	r0, r5, r4
   13e40:	mov	r1, #1
   13e44:	vmov	s2, r0
   13e48:	vcvt.f64.s32	d17, s2
   13e4c:	vmla.f64	d0, d17, d16
   13e50:	vcmpe.f64	d0, #0.0
   13e54:	vmrs	APSR_nzcv, fpscr
   13e58:	mvnmi	r1, #0
   13e5c:	mov	r0, r1
   13e60:	pop	{r4, r5, fp, pc}
   13e64:	nop	{0}
   13e68:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13e6c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13e70:	ldrd	r0, [r1, #72]	; 0x48
   13e74:	movw	r3, #20864	; 0x5180
   13e78:	movt	r3, #1
   13e7c:	b	13c90 <__assert_fail@plt+0x10d4>
   13e80:	mov	r0, #1
   13e84:	bx	lr
   13e88:	ldrd	r0, [r1, #88]	; 0x58
   13e8c:	mov	r3, #60	; 0x3c
   13e90:	b	13c90 <__assert_fail@plt+0x10d4>
   13e94:	push	{fp, lr}
   13e98:	mov	fp, sp
   13e9c:	ldr	r0, [r2, #44]	; 0x2c
   13ea0:	cmp	r0, #0
   13ea4:	bne	13ec8 <__assert_fail@plt+0x130c>
   13ea8:	ldrd	r0, [r1, #88]	; 0x58
   13eac:	ldrd	r2, [r2, #48]	; 0x30
   13eb0:	bl	13e10 <__assert_fail@plt+0x1254>
   13eb4:	mov	r1, #0
   13eb8:	cmp	r0, #0
   13ebc:	movwgt	r1, #1
   13ec0:	mov	r0, r1
   13ec4:	pop	{fp, pc}
   13ec8:	movw	r0, #56680	; 0xdd68
   13ecc:	movw	r1, #56719	; 0xdd8f
   13ed0:	movw	r3, #56793	; 0xddd9
   13ed4:	mov	r2, #199	; 0xc7
   13ed8:	movt	r0, #3
   13edc:	movt	r1, #3
   13ee0:	movt	r3, #3
   13ee4:	bl	12bbc <__assert_fail@plt>
   13ee8:	push	{r4, r5, r6, sl, fp, lr}
   13eec:	add	fp, sp, #16
   13ef0:	mov	r5, r2
   13ef4:	ldr	r2, [r2, #156]	; 0x9c
   13ef8:	mov	r4, r1
   13efc:	mov	r6, r0
   13f00:	cmp	r2, #0
   13f04:	beq	13f14 <__assert_fail@plt+0x1358>
   13f08:	mov	r0, r6
   13f0c:	mov	r1, r4
   13f10:	bl	18eb8 <__assert_fail@plt+0x62fc>
   13f14:	ldr	r2, [r5, #160]	; 0xa0
   13f18:	mov	r0, r6
   13f1c:	mov	r1, r4
   13f20:	pop	{r4, r5, r6, sl, fp, lr}
   13f24:	b	18eb8 <__assert_fail@plt+0x62fc>
   13f28:	ldrd	r0, [r1, #88]	; 0x58
   13f2c:	movw	r3, #20864	; 0x5180
   13f30:	movt	r3, #1
   13f34:	b	13c90 <__assert_fail@plt+0x10d4>
   13f38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f3c:	add	fp, sp, #24
   13f40:	movw	r9, #20056	; 0x4e58
   13f44:	mov	r5, r1
   13f48:	movw	r1, #59684	; 0xe924
   13f4c:	mov	r8, r0
   13f50:	movt	r9, #5
   13f54:	movt	r1, #3
   13f58:	ldr	r6, [r9, #12]
   13f5c:	mov	r0, r6
   13f60:	bl	124cc <strcmp@plt>
   13f64:	mov	r4, #1
   13f68:	cmp	r0, #0
   13f6c:	beq	14038 <__assert_fail@plt+0x147c>
   13f70:	ldrb	r0, [r9, #4]
   13f74:	cmp	r0, #0
   13f78:	beq	13f98 <__assert_fail@plt+0x13dc>
   13f7c:	ldr	r0, [r5, #16]
   13f80:	and	r0, r0, #61440	; 0xf000
   13f84:	sub	r0, r0, #16384	; 0x4000
   13f88:	clz	r0, r0
   13f8c:	lsr	r0, r0, #5
   13f90:	lsl	r5, r0, #9
   13f94:	b	13f9c <__assert_fail@plt+0x13e0>
   13f98:	mov	r5, #0
   13f9c:	ldr	r0, [r9, #16]
   13fa0:	mov	r1, r6
   13fa4:	mov	r2, r5
   13fa8:	bl	12538 <unlinkat@plt>
   13fac:	cmp	r0, #0
   13fb0:	beq	14038 <__assert_fail@plt+0x147c>
   13fb4:	bl	128d4 <__errno_location@plt>
   13fb8:	ldr	r6, [r0]
   13fbc:	mov	r7, r0
   13fc0:	cmp	r6, #2
   13fc4:	bne	13fe8 <__assert_fail@plt+0x142c>
   13fc8:	movw	r0, #20100	; 0x4e84
   13fcc:	movt	r0, #5
   13fd0:	ldrb	r0, [r0, #14]
   13fd4:	cmp	r0, #0
   13fd8:	beq	13fe8 <__assert_fail@plt+0x142c>
   13fdc:	mov	r0, #0
   13fe0:	str	r0, [r7]
   13fe4:	b	14038 <__assert_fail@plt+0x147c>
   13fe8:	cmp	r5, #0
   13fec:	cmpeq	r6, #21
   13ff0:	beq	14040 <__assert_fail@plt+0x1484>
   13ff4:	movw	r1, #56860	; 0xde1c
   13ff8:	mov	r0, #0
   13ffc:	mov	r2, #5
   14000:	mov	r4, #0
   14004:	movt	r1, #3
   14008:	bl	1264c <dcgettext@plt>
   1400c:	mov	r5, r0
   14010:	mov	r0, #0
   14014:	mov	r1, r8
   14018:	bl	19020 <__assert_fail@plt+0x6464>
   1401c:	mov	r3, r0
   14020:	mov	r0, #0
   14024:	mov	r1, r6
   14028:	mov	r2, r5
   1402c:	bl	12790 <error@plt>
   14030:	mov	r0, #1
   14034:	str	r0, [r9, #28]
   14038:	mov	r0, r4
   1403c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14040:	ldr	r1, [r9, #12]
   14044:	ldr	r0, [r9, #16]
   14048:	mov	r2, #512	; 0x200
   1404c:	bl	12538 <unlinkat@plt>
   14050:	cmp	r0, #0
   14054:	beq	14038 <__assert_fail@plt+0x147c>
   14058:	ldr	r6, [r7]
   1405c:	b	13ff4 <__assert_fail@plt+0x1438>
   14060:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14064:	add	fp, sp, #24
   14068:	mov	r8, r0
   1406c:	ldr	r0, [r1, #16]
   14070:	and	r0, r0, #61440	; 0xf000
   14074:	cmp	r0, #32768	; 0x8000
   14078:	beq	14170 <__assert_fail@plt+0x15b4>
   1407c:	mov	r4, #0
   14080:	cmp	r0, #16384	; 0x4000
   14084:	bne	14210 <__assert_fail@plt+0x1654>
   14088:	bl	128d4 <__errno_location@plt>
   1408c:	movw	r9, #20056	; 0x4e58
   14090:	mov	r4, #0
   14094:	mov	r6, r0
   14098:	movw	r2, #18688	; 0x4900
   1409c:	str	r4, [r0]
   140a0:	movt	r9, #5
   140a4:	movt	r2, #10
   140a8:	ldr	r1, [r9, #12]
   140ac:	ldr	r0, [r9, #16]
   140b0:	bl	24c08 <__assert_fail@plt+0x1204c>
   140b4:	cmn	r0, #1
   140b8:	ble	14184 <__assert_fail@plt+0x15c8>
   140bc:	mov	r5, r0
   140c0:	bl	12a78 <fdopendir@plt>
   140c4:	cmp	r0, #0
   140c8:	beq	1418c <__assert_fail@plt+0x15d0>
   140cc:	mov	r7, r0
   140d0:	mov	r0, #0
   140d4:	str	r0, [r6]
   140d8:	mov	r0, r7
   140dc:	bl	12a6c <readdir64@plt>
   140e0:	cmp	r0, #0
   140e4:	beq	14124 <__assert_fail@plt+0x1568>
   140e8:	mov	r4, #0
   140ec:	ldrb	r1, [r0, #19]
   140f0:	cmp	r1, #46	; 0x2e
   140f4:	bne	14128 <__assert_fail@plt+0x156c>
   140f8:	ldrb	r1, [r0, #20]
   140fc:	cmp	r1, #0
   14100:	beq	14114 <__assert_fail@plt+0x1558>
   14104:	cmp	r1, #46	; 0x2e
   14108:	ldrbeq	r0, [r0, #21]
   1410c:	cmpeq	r0, #0
   14110:	bne	14128 <__assert_fail@plt+0x156c>
   14114:	mov	r0, r7
   14118:	bl	12a6c <readdir64@plt>
   1411c:	cmp	r0, #0
   14120:	bne	140ec <__assert_fail@plt+0x1530>
   14124:	mov	r4, #1
   14128:	ldr	r5, [r6]
   1412c:	cmp	r5, #0
   14130:	beq	141cc <__assert_fail@plt+0x1610>
   14134:	mov	r0, #0
   14138:	mov	r1, r8
   1413c:	mov	r4, #0
   14140:	bl	19020 <__assert_fail@plt+0x6464>
   14144:	movw	r2, #14847	; 0x39ff
   14148:	mov	r3, r0
   1414c:	mov	r0, #0
   14150:	mov	r1, r5
   14154:	movt	r2, #4
   14158:	bl	12790 <error@plt>
   1415c:	mov	r0, #1
   14160:	str	r0, [r9, #28]
   14164:	mov	r0, r7
   14168:	bl	12b8c <closedir@plt>
   1416c:	b	14210 <__assert_fail@plt+0x1654>
   14170:	ldrd	r0, [r1, #48]	; 0x30
   14174:	orr	r0, r0, r1
   14178:	clz	r0, r0
   1417c:	lsr	r4, r0, #5
   14180:	b	14210 <__assert_fail@plt+0x1654>
   14184:	ldr	r5, [r6]
   14188:	b	141e4 <__assert_fail@plt+0x1628>
   1418c:	ldr	r6, [r6]
   14190:	mov	r0, #0
   14194:	mov	r1, r8
   14198:	mov	r4, #0
   1419c:	bl	19020 <__assert_fail@plt+0x6464>
   141a0:	movw	r2, #14847	; 0x39ff
   141a4:	mov	r3, r0
   141a8:	mov	r0, #0
   141ac:	mov	r1, r6
   141b0:	movt	r2, #4
   141b4:	bl	12790 <error@plt>
   141b8:	mov	r0, #1
   141bc:	str	r0, [r9, #28]
   141c0:	mov	r0, r5
   141c4:	bl	12b74 <close@plt>
   141c8:	b	14210 <__assert_fail@plt+0x1654>
   141cc:	mov	r0, r7
   141d0:	bl	12b8c <closedir@plt>
   141d4:	cmp	r0, #0
   141d8:	beq	14210 <__assert_fail@plt+0x1654>
   141dc:	ldr	r5, [r6]
   141e0:	mov	r4, #0
   141e4:	mov	r0, #0
   141e8:	mov	r1, r8
   141ec:	bl	19020 <__assert_fail@plt+0x6464>
   141f0:	movw	r2, #14847	; 0x39ff
   141f4:	mov	r3, r0
   141f8:	mov	r0, #0
   141fc:	mov	r1, r5
   14200:	movt	r2, #4
   14204:	bl	12790 <error@plt>
   14208:	mov	r0, #1
   1420c:	str	r0, [r9, #28]
   14210:	mov	r0, r4
   14214:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14218:	b	15560 <__assert_fail@plt+0x29a4>
   1421c:	movw	r0, #20056	; 0x4e58
   14220:	movt	r0, #5
   14224:	ldr	r0, [r0, #12]
   14228:	b	15560 <__assert_fail@plt+0x29a4>
   1422c:	mov	r0, #0
   14230:	bx	lr
   14234:	push	{r4, r5, fp, lr}
   14238:	add	fp, sp, #8
   1423c:	sub	sp, sp, #16
   14240:	movw	r3, #20100	; 0x4e84
   14244:	mov	ip, r1
   14248:	movw	r1, #20056	; 0x4e58
   1424c:	ldrb	r5, [r2, #32]
   14250:	ldr	r2, [r2, #44]	; 0x2c
   14254:	movt	r1, #5
   14258:	movt	r3, #5
   1425c:	ldr	r4, [r3, #20]
   14260:	ldr	lr, [r1, #12]
   14264:	ldr	r3, [r3, #40]	; 0x28
   14268:	ldr	r1, [r1, #16]
   1426c:	str	r4, [sp]
   14270:	stmib	sp, {r3, r5}
   14274:	str	r2, [sp, #12]
   14278:	mov	r2, lr
   1427c:	mov	r3, ip
   14280:	bl	1ff3c <__assert_fail@plt+0xd380>
   14284:	mov	r0, #1
   14288:	sub	sp, fp, #8
   1428c:	pop	{r4, r5, fp, pc}
   14290:	push	{fp, lr}
   14294:	mov	fp, sp
   14298:	sub	sp, sp, #8
   1429c:	ldrb	ip, [r2, #52]	; 0x34
   142a0:	ldr	r1, [r2, #56]	; 0x38
   142a4:	ldr	r2, [r2, #44]	; 0x2c
   142a8:	movw	r3, #12740	; 0x31c4
   142ac:	str	r0, [sp]
   142b0:	movt	r3, #4
   142b4:	mov	r0, r2
   142b8:	mov	r2, ip
   142bc:	bl	20858 <__assert_fail@plt+0xdc9c>
   142c0:	mov	r0, #1
   142c4:	mov	sp, fp
   142c8:	pop	{fp, pc}
   142cc:	push	{r4, sl, fp, lr}
   142d0:	add	fp, sp, #8
   142d4:	ldr	r4, [r2, #44]	; 0x2c
   142d8:	mov	r1, r4
   142dc:	bl	12b50 <fputs@plt>
   142e0:	mov	r0, #0
   142e4:	mov	r1, r4
   142e8:	bl	12a90 <putc@plt>
   142ec:	mov	r0, #1
   142f0:	pop	{r4, sl, fp, pc}
   142f4:	push	{r4, sl, fp, lr}
   142f8:	add	fp, sp, #8
   142fc:	mov	r4, r2
   14300:	mov	r2, r0
   14304:	mov	r0, r1
   14308:	mov	r1, r2
   1430c:	bl	1ac88 <__assert_fail@plt+0x80cc>
   14310:	ldr	r1, [r4, #40]	; 0x28
   14314:	bl	124cc <strcmp@plt>
   14318:	clz	r0, r0
   1431c:	lsr	r0, r0, #5
   14320:	pop	{r4, sl, fp, pc}
   14324:	ldr	r0, [r2, #40]	; 0x28
   14328:	cmp	r0, #2
   1432c:	beq	1435c <__assert_fail@plt+0x17a0>
   14330:	cmp	r0, #1
   14334:	beq	1437c <__assert_fail@plt+0x17c0>
   14338:	cmp	r0, #0
   1433c:	bne	14374 <__assert_fail@plt+0x17b8>
   14340:	ldr	r1, [r1, #28]
   14344:	ldrd	r2, [r2, #48]	; 0x30
   14348:	mov	r0, #1
   1434c:	subs	r1, r2, r1
   14350:	sbcs	r1, r3, #0
   14354:	bcs	14374 <__assert_fail@plt+0x17b8>
   14358:	bx	lr
   1435c:	ldr	r0, [r1, #28]
   14360:	ldrd	r2, [r2, #48]	; 0x30
   14364:	eor	r0, r2, r0
   14368:	orrs	r0, r0, r3
   1436c:	mov	r0, #1
   14370:	bxeq	lr
   14374:	mov	r0, #0
   14378:	bx	lr
   1437c:	ldrd	r2, [r2, #48]	; 0x30
   14380:	ldr	r1, [r1, #28]
   14384:	mov	r0, #1
   14388:	subs	r1, r1, r2
   1438c:	rscs	r1, r3, #0
   14390:	movcs	r0, #0
   14394:	bx	lr
   14398:	ldr	r0, [r1, #28]
   1439c:	ldr	r1, [r2, #40]	; 0x28
   143a0:	sub	r0, r1, r0
   143a4:	clz	r0, r0
   143a8:	lsr	r0, r0, #5
   143ac:	bx	lr
   143b0:	mov	r3, #1
   143b4:	b	143b8 <__assert_fail@plt+0x17fc>
   143b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143bc:	add	fp, sp, #24
   143c0:	mov	r8, r0
   143c4:	ldr	r0, [r1, #16]
   143c8:	mov	r6, #0
   143cc:	and	r0, r0, #61440	; 0xf000
   143d0:	cmp	r0, #40960	; 0xa000
   143d4:	bne	14448 <__assert_fail@plt+0x188c>
   143d8:	movw	r6, #20056	; 0x4e58
   143dc:	mov	r5, r3
   143e0:	mov	r7, r2
   143e4:	movt	r6, #5
   143e8:	ldr	r1, [r6, #12]
   143ec:	ldr	r0, [r6, #16]
   143f0:	bl	20ffc <__assert_fail@plt+0xe440>
   143f4:	mov	r4, r0
   143f8:	cmp	r0, #0
   143fc:	beq	14424 <__assert_fail@plt+0x1868>
   14400:	ldr	r0, [r7, #40]	; 0x28
   14404:	cmp	r5, #0
   14408:	mov	r1, r4
   1440c:	movwne	r5, #16
   14410:	mov	r2, r5
   14414:	bl	127b4 <fnmatch@plt>
   14418:	clz	r0, r0
   1441c:	lsr	r6, r0, #5
   14420:	b	14440 <__assert_fail@plt+0x1884>
   14424:	bl	128d4 <__errno_location@plt>
   14428:	ldr	r0, [r0]
   1442c:	mov	r1, r8
   14430:	bl	17fcc <__assert_fail@plt+0x5410>
   14434:	mov	r0, #1
   14438:	str	r0, [r6, #28]
   1443c:	mov	r6, #0
   14440:	mov	r0, r4
   14444:	bl	2c048 <__assert_fail@plt+0x1948c>
   14448:	mov	r0, r6
   1444c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14450:	ldr	r1, [r2, #40]	; 0x28
   14454:	mov	r2, #16
   14458:	b	1445c <__assert_fail@plt+0x18a0>
   1445c:	push	{r4, r5, r6, sl, fp, lr}
   14460:	add	fp, sp, #16
   14464:	mov	r4, r2
   14468:	mov	r5, r1
   1446c:	bl	21544 <__assert_fail@plt+0xe988>
   14470:	mov	r6, r0
   14474:	bl	21694 <__assert_fail@plt+0xead8>
   14478:	mov	r0, r5
   1447c:	mov	r1, r6
   14480:	mov	r2, r4
   14484:	bl	127b4 <fnmatch@plt>
   14488:	mov	r4, r0
   1448c:	mov	r0, r6
   14490:	bl	2c048 <__assert_fail@plt+0x1948c>
   14494:	clz	r0, r4
   14498:	lsr	r0, r0, #5
   1449c:	pop	{r4, r5, r6, sl, fp, pc}
   144a0:	push	{r4, r5, fp, lr}
   144a4:	add	fp, sp, #8
   144a8:	ldr	r0, [r2, #40]	; 0x28
   144ac:	cmp	r0, #2
   144b0:	beq	144e0 <__assert_fail@plt+0x1924>
   144b4:	cmp	r0, #1
   144b8:	beq	1450c <__assert_fail@plt+0x1950>
   144bc:	cmp	r0, #0
   144c0:	bne	14504 <__assert_fail@plt+0x1948>
   144c4:	ldrd	r4, [r1, #96]	; 0x60
   144c8:	ldrd	r2, [r2, #48]	; 0x30
   144cc:	mov	r0, #1
   144d0:	subs	r1, r2, r4
   144d4:	sbcs	r1, r3, r5
   144d8:	bcs	14504 <__assert_fail@plt+0x1948>
   144dc:	pop	{r4, r5, fp, pc}
   144e0:	ldr	r0, [r2, #48]	; 0x30
   144e4:	ldr	r3, [r2, #52]	; 0x34
   144e8:	ldr	r2, [r1, #96]	; 0x60
   144ec:	ldr	r1, [r1, #100]	; 0x64
   144f0:	eor	r1, r1, r3
   144f4:	eor	r0, r2, r0
   144f8:	orrs	r0, r0, r1
   144fc:	mov	r0, #1
   14500:	popeq	{r4, r5, fp, pc}
   14504:	mov	r0, #0
   14508:	pop	{r4, r5, fp, pc}
   1450c:	ldrd	r2, [r2, #48]	; 0x30
   14510:	ldrd	r4, [r1, #96]	; 0x60
   14514:	mov	r0, #1
   14518:	subs	r1, r4, r2
   1451c:	sbcs	r1, r5, r3
   14520:	movcs	r0, #0
   14524:	pop	{r4, r5, fp, pc}
   14528:	push	{fp, lr}
   1452c:	mov	fp, sp
   14530:	mov	r1, r0
   14534:	ldr	r0, [r2, #40]	; 0x28
   14538:	mov	r2, #16
   1453c:	bl	127b4 <fnmatch@plt>
   14540:	clz	r0, r0
   14544:	lsr	r0, r0, #5
   14548:	pop	{fp, pc}
   1454c:	ldr	r0, [r2, #40]	; 0x28
   14550:	cmp	r0, #2
   14554:	beq	14584 <__assert_fail@plt+0x19c8>
   14558:	cmp	r0, #1
   1455c:	beq	145a4 <__assert_fail@plt+0x19e8>
   14560:	cmp	r0, #0
   14564:	bne	1459c <__assert_fail@plt+0x19e0>
   14568:	ldr	r1, [r1, #20]
   1456c:	ldrd	r2, [r2, #48]	; 0x30
   14570:	mov	r0, #1
   14574:	subs	r1, r2, r1
   14578:	sbcs	r1, r3, #0
   1457c:	bcs	1459c <__assert_fail@plt+0x19e0>
   14580:	bx	lr
   14584:	ldr	r0, [r1, #20]
   14588:	ldrd	r2, [r2, #48]	; 0x30
   1458c:	eor	r0, r2, r0
   14590:	orrs	r0, r0, r3
   14594:	mov	r0, #1
   14598:	bxeq	lr
   1459c:	mov	r0, #0
   145a0:	bx	lr
   145a4:	ldrd	r2, [r2, #48]	; 0x30
   145a8:	ldr	r1, [r1, #20]
   145ac:	mov	r0, #1
   145b0:	subs	r1, r1, r2
   145b4:	rscs	r1, r3, #0
   145b8:	movcs	r0, #0
   145bc:	bx	lr
   145c0:	mov	r3, #0
   145c4:	b	143b8 <__assert_fail@plt+0x17fc>
   145c8:	push	{r4, r5, fp, lr}
   145cc:	add	fp, sp, #8
   145d0:	sub	sp, sp, #16
   145d4:	movw	r3, #20100	; 0x4e84
   145d8:	mov	ip, r1
   145dc:	movw	r1, #20056	; 0x4e58
   145e0:	ldrb	r5, [r2, #32]
   145e4:	ldr	r2, [r2, #44]	; 0x2c
   145e8:	movt	r1, #5
   145ec:	movt	r3, #5
   145f0:	ldr	r4, [r3, #20]
   145f4:	ldr	lr, [r1, #12]
   145f8:	ldr	r3, [r3, #40]	; 0x28
   145fc:	ldr	r1, [r1, #16]
   14600:	str	r4, [sp]
   14604:	stmib	sp, {r3, r5}
   14608:	str	r2, [sp, #12]
   1460c:	mov	r2, lr
   14610:	mov	r3, ip
   14614:	bl	1ff3c <__assert_fail@plt+0xd380>
   14618:	mov	r0, #1
   1461c:	sub	sp, fp, #8
   14620:	pop	{r4, r5, fp, pc}
   14624:	ldrd	r0, [r1, #80]	; 0x50
   14628:	mov	r3, #60	; 0x3c
   1462c:	b	13c90 <__assert_fail@plt+0x10d4>
   14630:	ldrd	r0, [r1, #80]	; 0x50
   14634:	movw	r3, #20864	; 0x5180
   14638:	movt	r3, #1
   1463c:	b	13c90 <__assert_fail@plt+0x10d4>
   14640:	ldr	r1, [r2, #40]	; 0x28
   14644:	mov	r2, #0
   14648:	b	1445c <__assert_fail@plt+0x18a0>
   1464c:	push	{fp, lr}
   14650:	mov	fp, sp
   14654:	ldr	r2, [r2, #160]	; 0xa0
   14658:	bl	18eb8 <__assert_fail@plt+0x62fc>
   1465c:	eor	r0, r0, #1
   14660:	pop	{fp, pc}
   14664:	push	{fp, lr}
   14668:	mov	fp, sp
   1466c:	ldr	r0, [r2, #44]	; 0x2c
   14670:	cmp	r0, #0
   14674:	bne	14698 <__assert_fail@plt+0x1adc>
   14678:	ldrd	r0, [r1, #80]	; 0x50
   1467c:	ldrd	r2, [r2, #48]	; 0x30
   14680:	bl	13e10 <__assert_fail@plt+0x1254>
   14684:	mov	r1, #0
   14688:	cmp	r0, #0
   1468c:	movwgt	r1, #1
   14690:	mov	r0, r1
   14694:	pop	{fp, pc}
   14698:	movw	r0, #56680	; 0xdd68
   1469c:	movw	r1, #56719	; 0xdd8f
   146a0:	movw	r3, #56877	; 0xde2d
   146a4:	movw	r2, #621	; 0x26d
   146a8:	movt	r0, #3
   146ac:	movt	r1, #3
   146b0:	movt	r3, #3
   146b4:	bl	12bbc <__assert_fail@plt>
   146b8:	push	{r4, r5, r6, sl, fp, lr}
   146bc:	add	fp, sp, #16
   146c0:	mov	r5, r0
   146c4:	ldr	r0, [r2, #44]	; 0x2c
   146c8:	cmp	r0, #0
   146cc:	bne	1476c <__assert_fail@plt+0x1bb0>
   146d0:	ldr	r0, [r2, #40]	; 0x28
   146d4:	cmp	r0, #4
   146d8:	bhi	1478c <__assert_fail@plt+0x1bd0>
   146dc:	add	r3, pc, #0
   146e0:	ldr	pc, [r3, r0, lsl #2]
   146e4:	strdeq	r4, [r1], -r8
   146e8:	andeq	r4, r1, r8, lsr #14
   146ec:	andeq	r4, r1, r0, lsl #14
   146f0:	andeq	r4, r1, r8, lsl #14
   146f4:	andeq	r4, r1, ip, lsr #15
   146f8:	add	r0, r1, #72	; 0x48
   146fc:	b	1470c <__assert_fail@plt+0x1b50>
   14700:	add	r0, r1, #88	; 0x58
   14704:	b	1470c <__assert_fail@plt+0x1b50>
   14708:	add	r0, r1, #80	; 0x50
   1470c:	ldrd	r0, [r0]
   14710:	ldrd	r2, [r2, #48]	; 0x30
   14714:	bl	13e10 <__assert_fail@plt+0x1254>
   14718:	mov	r4, #0
   1471c:	cmp	r0, #0
   14720:	movwgt	r4, #1
   14724:	b	14764 <__assert_fail@plt+0x1ba8>
   14728:	movw	r1, #57052	; 0xdedc
   1472c:	mov	r0, #0
   14730:	mov	r2, #5
   14734:	mov	r4, #0
   14738:	movt	r1, #3
   1473c:	bl	1264c <dcgettext@plt>
   14740:	mov	r6, r0
   14744:	mov	r0, #0
   14748:	mov	r1, r5
   1474c:	bl	19020 <__assert_fail@plt+0x6464>
   14750:	mov	r3, r0
   14754:	mov	r0, #0
   14758:	mov	r1, #0
   1475c:	mov	r2, r6
   14760:	bl	12790 <error@plt>
   14764:	mov	r0, r4
   14768:	pop	{r4, r5, r6, sl, fp, pc}
   1476c:	movw	r0, #56680	; 0xdd68
   14770:	movw	r1, #56719	; 0xdd8f
   14774:	movw	r3, #56943	; 0xde6f
   14778:	movw	r2, #631	; 0x277
   1477c:	movt	r0, #3
   14780:	movt	r1, #3
   14784:	movt	r3, #3
   14788:	bl	12bbc <__assert_fail@plt>
   1478c:	movw	r0, #57100	; 0xdf0c
   14790:	movw	r1, #56719	; 0xdd8f
   14794:	movw	r3, #56943	; 0xde6f
   14798:	movw	r2, #667	; 0x29b
   1479c:	movt	r0, #3
   147a0:	movt	r1, #3
   147a4:	movt	r3, #3
   147a8:	bl	12bbc <__assert_fail@plt>
   147ac:	movw	r0, #57011	; 0xdeb3
   147b0:	movw	r1, #56719	; 0xdd8f
   147b4:	movw	r3, #56943	; 0xde6f
   147b8:	mov	r2, #636	; 0x27c
   147bc:	movt	r0, #3
   147c0:	movt	r1, #3
   147c4:	movt	r3, #3
   147c8:	bl	12bbc <__assert_fail@plt>
   147cc:	push	{fp, lr}
   147d0:	mov	fp, sp
   147d4:	ldr	r0, [r1, #28]
   147d8:	bl	12b98 <getgrgid@plt>
   147dc:	clz	r0, r0
   147e0:	lsr	r0, r0, #5
   147e4:	pop	{fp, pc}
   147e8:	push	{fp, lr}
   147ec:	mov	fp, sp
   147f0:	ldr	r0, [r1, #24]
   147f4:	bl	124e4 <getpwuid@plt>
   147f8:	clz	r0, r0
   147fc:	lsr	r0, r0, #5
   14800:	pop	{fp, pc}
   14804:	push	{r4, r5, r6, sl, fp, lr}
   14808:	add	fp, sp, #16
   1480c:	mov	r6, r0
   14810:	ldr	r0, [r2, #132]	; 0x84
   14814:	mov	r5, r1
   14818:	mov	r4, r2
   1481c:	mov	r1, r6
   14820:	ldr	r0, [r0]
   14824:	bl	14848 <__assert_fail@plt+0x1c8c>
   14828:	cmp	r0, #0
   1482c:	moveq	r0, #0
   14830:	popeq	{r4, r5, r6, sl, fp, pc}
   14834:	mov	r0, r6
   14838:	mov	r1, r5
   1483c:	mov	r2, r4
   14840:	pop	{r4, r5, r6, sl, fp, lr}
   14844:	b	15560 <__assert_fail@plt+0x29a4>
   14848:	push	{r4, r5, r6, r7, fp, lr}
   1484c:	add	fp, sp, #16
   14850:	mov	r5, r0
   14854:	movw	r0, #17772	; 0x456c
   14858:	mov	r4, r1
   1485c:	movt	r0, #5
   14860:	ldr	r0, [r0]
   14864:	bl	2bfec <__assert_fail@plt+0x19430>
   14868:	movw	r7, #17760	; 0x4560
   1486c:	movw	r1, #57768	; 0xe1a8
   14870:	mov	r0, #0
   14874:	mov	r2, #5
   14878:	movt	r7, #5
   1487c:	movt	r1, #3
   14880:	ldr	r6, [r7]
   14884:	bl	1264c <dcgettext@plt>
   14888:	mov	r1, r0
   1488c:	mov	r0, r6
   14890:	mov	r2, r5
   14894:	mov	r3, r4
   14898:	bl	128c8 <fprintf@plt>
   1489c:	cmn	r0, #1
   148a0:	ble	148b4 <__assert_fail@plt+0x1cf8>
   148a4:	ldr	r0, [r7]
   148a8:	bl	2bfec <__assert_fail@plt+0x19430>
   148ac:	pop	{r4, r5, r6, r7, fp, lr}
   148b0:	b	2ba2c <__assert_fail@plt+0x18e70>
   148b4:	bl	128d4 <__errno_location@plt>
   148b8:	ldr	r4, [r0]
   148bc:	movw	r1, #57785	; 0xe1b9
   148c0:	mov	r0, #0
   148c4:	mov	r2, #5
   148c8:	movt	r1, #3
   148cc:	bl	1264c <dcgettext@plt>
   148d0:	mov	r2, r0
   148d4:	mov	r0, #1
   148d8:	mov	r1, r4
   148dc:	bl	12790 <error@plt>
   148e0:	push	{r4, r5, fp, lr}
   148e4:	add	fp, sp, #8
   148e8:	mov	r5, r1
   148ec:	mov	r1, r0
   148f0:	ldr	r0, [r2, #132]	; 0x84
   148f4:	mov	r4, r2
   148f8:	ldr	r0, [r0]
   148fc:	bl	14848 <__assert_fail@plt+0x1c8c>
   14900:	cmp	r0, #0
   14904:	moveq	r0, #0
   14908:	popeq	{r4, r5, fp, pc}
   1490c:	movw	r0, #20056	; 0x4e58
   14910:	mov	r1, r5
   14914:	mov	r2, r4
   14918:	movt	r0, #5
   1491c:	ldr	r0, [r0, #12]
   14920:	pop	{r4, r5, fp, lr}
   14924:	b	15560 <__assert_fail@plt+0x29a4>
   14928:	mov	r0, #1
   1492c:	bx	lr
   14930:	push	{r4, r5, r6, sl, fp, lr}
   14934:	add	fp, sp, #16
   14938:	mov	r5, r2
   1493c:	ldr	r2, [r2, #156]	; 0x9c
   14940:	mov	r4, r1
   14944:	mov	r6, r0
   14948:	cmp	r2, #0
   1494c:	beq	14968 <__assert_fail@plt+0x1dac>
   14950:	mov	r0, r6
   14954:	mov	r1, r4
   14958:	bl	18eb8 <__assert_fail@plt+0x62fc>
   1495c:	cmp	r0, #0
   14960:	movne	r0, #1
   14964:	popne	{r4, r5, r6, sl, fp, pc}
   14968:	ldr	r2, [r5, #160]	; 0xa0
   1496c:	mov	r0, r6
   14970:	mov	r1, r4
   14974:	pop	{r4, r5, r6, sl, fp, lr}
   14978:	b	18eb8 <__assert_fail@plt+0x62fc>
   1497c:	push	{fp, lr}
   14980:	mov	fp, sp
   14984:	mov	r1, r0
   14988:	ldr	r0, [r2, #40]	; 0x28
   1498c:	mov	r2, #0
   14990:	bl	127b4 <fnmatch@plt>
   14994:	clz	r0, r0
   14998:	lsr	r0, r0, #5
   1499c:	pop	{fp, pc}
   149a0:	ldr	r0, [r1, #16]
   149a4:	ldr	r3, [r2, #40]!	; 0x28
   149a8:	and	r1, r0, #61440	; 0xf000
   149ac:	cmp	r3, #2
   149b0:	sub	r1, r1, #16384	; 0x4000
   149b4:	clz	r1, r1
   149b8:	lsr	r1, r1, #5
   149bc:	add	r1, r2, r1, lsl #2
   149c0:	ldr	r1, [r1, #4]
   149c4:	beq	149f8 <__assert_fail@plt+0x1e3c>
   149c8:	cmp	r3, #1
   149cc:	beq	149e0 <__assert_fail@plt+0x1e24>
   149d0:	cmp	r3, #0
   149d4:	bne	14a0c <__assert_fail@plt+0x1e50>
   149d8:	and	r0, r1, r0
   149dc:	b	149fc <__assert_fail@plt+0x1e40>
   149e0:	cmp	r1, #0
   149e4:	moveq	r0, #1
   149e8:	bxeq	lr
   149ec:	ands	r0, r1, r0
   149f0:	movwne	r0, #1
   149f4:	bx	lr
   149f8:	bfc	r0, #12, #20
   149fc:	sub	r0, r0, r1
   14a00:	clz	r0, r0
   14a04:	lsr	r0, r0, #5
   14a08:	bx	lr
   14a0c:	push	{fp, lr}
   14a10:	mov	fp, sp
   14a14:	bl	12b68 <abort@plt>
   14a18:	push	{fp, lr}
   14a1c:	mov	fp, sp
   14a20:	movw	r0, #20056	; 0x4e58
   14a24:	mov	r2, #1
   14a28:	mov	r3, #0
   14a2c:	movt	r0, #5
   14a30:	ldr	r1, [r0, #12]
   14a34:	ldr	r0, [r0, #16]
   14a38:	bl	12580 <faccessat@plt>
   14a3c:	clz	r0, r0
   14a40:	lsr	r0, r0, #5
   14a44:	pop	{fp, pc}
   14a48:	push	{fp, lr}
   14a4c:	mov	fp, sp
   14a50:	movw	r0, #20056	; 0x4e58
   14a54:	mov	r2, #4
   14a58:	mov	r3, #0
   14a5c:	movt	r0, #5
   14a60:	ldr	r1, [r0, #12]
   14a64:	ldr	r0, [r0, #16]
   14a68:	bl	12580 <faccessat@plt>
   14a6c:	clz	r0, r0
   14a70:	lsr	r0, r0, #5
   14a74:	pop	{fp, pc}
   14a78:	push	{fp, lr}
   14a7c:	mov	fp, sp
   14a80:	movw	r0, #20056	; 0x4e58
   14a84:	mov	r2, #2
   14a88:	mov	r3, #0
   14a8c:	movt	r0, #5
   14a90:	ldr	r1, [r0, #12]
   14a94:	ldr	r0, [r0, #16]
   14a98:	bl	12580 <faccessat@plt>
   14a9c:	clz	r0, r0
   14aa0:	lsr	r0, r0, #5
   14aa4:	pop	{fp, pc}
   14aa8:	push	{fp, lr}
   14aac:	mov	fp, sp
   14ab0:	sub	sp, sp, #8
   14ab4:	ldrb	ip, [r2, #52]	; 0x34
   14ab8:	ldr	r1, [r2, #56]	; 0x38
   14abc:	ldr	r2, [r2, #44]	; 0x2c
   14ac0:	movw	r3, #12740	; 0x31c4
   14ac4:	str	r0, [sp]
   14ac8:	movt	r3, #4
   14acc:	mov	r0, r2
   14ad0:	mov	r2, ip
   14ad4:	bl	20858 <__assert_fail@plt+0xdc9c>
   14ad8:	mov	r0, #1
   14adc:	mov	sp, fp
   14ae0:	pop	{fp, pc}
   14ae4:	push	{r4, sl, fp, lr}
   14ae8:	add	fp, sp, #8
   14aec:	ldr	r4, [r2, #44]	; 0x2c
   14af0:	mov	r1, r4
   14af4:	bl	12b50 <fputs@plt>
   14af8:	mov	r0, #0
   14afc:	mov	r1, r4
   14b00:	bl	12a90 <putc@plt>
   14b04:	mov	r0, #1
   14b08:	pop	{r4, sl, fp, pc}
   14b0c:	movw	r0, #20100	; 0x4e84
   14b10:	movt	r0, #5
   14b14:	ldrb	r0, [r0]
   14b18:	cmp	r0, #0
   14b1c:	beq	14b50 <__assert_fail@plt+0x1f94>
   14b20:	movw	r0, #20056	; 0x4e58
   14b24:	movt	r0, #5
   14b28:	ldrb	r2, [r0, #4]
   14b2c:	cmp	r2, #0
   14b30:	beq	14b58 <__assert_fail@plt+0x1f9c>
   14b34:	cmp	r1, #0
   14b38:	beq	14b50 <__assert_fail@plt+0x1f94>
   14b3c:	ldr	r1, [r1, #16]
   14b40:	and	r1, r1, #61440	; 0xf000
   14b44:	cmp	r1, #16384	; 0x4000
   14b48:	moveq	r1, #1
   14b4c:	strbeq	r1, [r0, #24]
   14b50:	mov	r0, #1
   14b54:	bx	lr
   14b58:	push	{fp, lr}
   14b5c:	mov	fp, sp
   14b60:	movw	r0, #56071	; 0xdb07
   14b64:	movw	r1, #56719	; 0xdd8f
   14b68:	movw	r3, #57110	; 0xdf16
   14b6c:	movw	r2, #853	; 0x355
   14b70:	movt	r0, #3
   14b74:	movt	r1, #3
   14b78:	movt	r3, #3
   14b7c:	bl	12bbc <__assert_fail@plt>
   14b80:	push	{fp, lr}
   14b84:	mov	fp, sp
   14b88:	bl	182ac <__assert_fail@plt+0x56f0>
   14b8c:	movw	r0, #20056	; 0x4e58
   14b90:	movt	r0, #5
   14b94:	ldr	r0, [r0, #28]
   14b98:	bl	1285c <exit@plt>
   14b9c:	push	{r4, r5, r6, sl, fp, lr}
   14ba0:	add	fp, sp, #16
   14ba4:	sub	sp, sp, #8
   14ba8:	mov	r4, r2
   14bac:	mov	r5, r0
   14bb0:	bl	1288c <strlen@plt>
   14bb4:	mov	r6, r0
   14bb8:	ldr	r0, [r4, #40]	; 0x28
   14bbc:	mov	r1, #0
   14bc0:	mov	r3, #0
   14bc4:	str	r1, [sp]
   14bc8:	mov	r1, r5
   14bcc:	mov	r2, r6
   14bd0:	bl	31c7c <__assert_fail@plt+0x1f0c0>
   14bd4:	sub	r0, r0, r6
   14bd8:	clz	r0, r0
   14bdc:	lsr	r0, r0, #5
   14be0:	sub	sp, fp, #16
   14be4:	pop	{r4, r5, r6, sl, fp, pc}
   14be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bec:	add	fp, sp, #28
   14bf0:	sub	sp, sp, #4
   14bf4:	ldrd	r6, [r2, #40]	; 0x28
   14bf8:	ldrd	r8, [r1, #48]	; 0x30
   14bfc:	mov	sl, r2
   14c00:	asr	r5, r7, #31
   14c04:	mov	r0, r8
   14c08:	mov	r1, r9
   14c0c:	mov	r2, r7
   14c10:	mov	r3, r5
   14c14:	bl	3d400 <__assert_fail@plt+0x2a844>
   14c18:	umull	r4, r2, r0, r7
   14c1c:	mla	r2, r0, r5, r2
   14c20:	mla	r7, r1, r7, r2
   14c24:	adds	r2, r0, #1
   14c28:	adc	r3, r1, #0
   14c2c:	subs	r5, r8, r4
   14c30:	sbc	r7, r9, r7
   14c34:	orrs	r7, r5, r7
   14c38:	moveq	r3, r1
   14c3c:	moveq	r2, r0
   14c40:	cmp	r6, #2
   14c44:	beq	14c70 <__assert_fail@plt+0x20b4>
   14c48:	cmp	r6, #1
   14c4c:	beq	14c90 <__assert_fail@plt+0x20d4>
   14c50:	cmp	r6, #0
   14c54:	bne	14c88 <__assert_fail@plt+0x20cc>
   14c58:	ldrd	r4, [sl, #48]	; 0x30
   14c5c:	mov	r0, #1
   14c60:	subs	r1, r4, r2
   14c64:	sbcs	r1, r5, r3
   14c68:	bcs	14c88 <__assert_fail@plt+0x20cc>
   14c6c:	b	14ca4 <__assert_fail@plt+0x20e8>
   14c70:	ldrd	r0, [sl, #48]	; 0x30
   14c74:	eor	r1, r3, r1
   14c78:	eor	r0, r2, r0
   14c7c:	orrs	r0, r0, r1
   14c80:	mov	r0, #1
   14c84:	beq	14ca4 <__assert_fail@plt+0x20e8>
   14c88:	mov	r0, #0
   14c8c:	b	14ca4 <__assert_fail@plt+0x20e8>
   14c90:	ldrd	r4, [sl, #48]	; 0x30
   14c94:	mov	r0, #1
   14c98:	subs	r1, r2, r4
   14c9c:	sbcs	r1, r3, r5
   14ca0:	movcs	r0, #0
   14ca4:	sub	sp, fp, #28
   14ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14cb0:	add	fp, sp, #24
   14cb4:	mov	r6, r1
   14cb8:	mov	r5, r2
   14cbc:	mov	r2, r0
   14cc0:	mov	r4, r1
   14cc4:	ldr	r0, [r6, #96]!	; 0x60
   14cc8:	ldr	r1, [r6, #4]
   14ccc:	orrs	r3, r0, r1
   14cd0:	beq	14cec <__assert_fail@plt+0x2130>
   14cd4:	ldrd	r8, [r5, #40]	; 0x28
   14cd8:	eor	r1, r1, r9
   14cdc:	eor	r0, r0, r8
   14ce0:	orrs	r0, r0, r1
   14ce4:	mov	r0, #0
   14ce8:	bne	14d14 <__assert_fail@plt+0x2158>
   14cec:	movw	r0, #20056	; 0x4e58
   14cf0:	movt	r0, #5
   14cf4:	ldr	r1, [r0, #12]
   14cf8:	mov	r0, r2
   14cfc:	mov	r2, r4
   14d00:	bl	17ed4 <__assert_fail@plt+0x5318>
   14d04:	mov	r1, r0
   14d08:	mov	r0, #0
   14d0c:	cmp	r1, #0
   14d10:	beq	14d18 <__assert_fail@plt+0x215c>
   14d14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d18:	ldrd	r2, [r5, #40]	; 0x28
   14d1c:	ldrd	r6, [r6]
   14d20:	eor	r1, r7, r3
   14d24:	eor	r2, r6, r2
   14d28:	orrs	r1, r2, r1
   14d2c:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d30:	ldrd	r0, [r5, #48]	; 0x30
   14d34:	ldrd	r2, [r4]
   14d38:	eor	r1, r3, r1
   14d3c:	eor	r0, r2, r0
   14d40:	orr	r0, r0, r1
   14d44:	clz	r0, r0
   14d48:	lsr	r0, r0, #5
   14d4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d50:	mov	r0, #1
   14d54:	bx	lr
   14d58:	movw	ip, #20056	; 0x4e58
   14d5c:	movt	ip, #5
   14d60:	ldrb	r0, [ip, #5]
   14d64:	cmp	r0, #0
   14d68:	beq	14dd8 <__assert_fail@plt+0x221c>
   14d6c:	ldr	r3, [ip, #8]
   14d70:	mov	r0, #0
   14d74:	cmp	r3, #0
   14d78:	bxeq	lr
   14d7c:	ldrb	r0, [ip, #4]
   14d80:	cmp	r0, #0
   14d84:	ldrne	r3, [r1, #16]
   14d88:	and	r0, r3, #61440	; 0xf000
   14d8c:	sub	r1, r0, #4096	; 0x1000
   14d90:	lsr	r0, r1, #12
   14d94:	cmp	r0, #11
   14d98:	bhi	14db0 <__assert_fail@plt+0x21f4>
   14d9c:	uxth	r3, r0
   14da0:	movw	ip, #2731	; 0xaab
   14da4:	mov	r0, #1
   14da8:	tst	r0, ip, lsr r3
   14dac:	bne	14db8 <__assert_fail@plt+0x21fc>
   14db0:	mov	r0, #0
   14db4:	bx	lr
   14db8:	movw	r3, #57824	; 0xe1e0
   14dbc:	movt	r3, #3
   14dc0:	ldr	r1, [r3, r1, asr #10]
   14dc4:	add	r1, r2, r1
   14dc8:	ldrb	r1, [r1, #40]	; 0x28
   14dcc:	cmp	r1, #0
   14dd0:	moveq	r0, #0
   14dd4:	bx	lr
   14dd8:	push	{fp, lr}
   14ddc:	mov	fp, sp
   14de0:	movw	r0, #57176	; 0xdf58
   14de4:	movw	r1, #56719	; 0xdd8f
   14de8:	movw	r3, #57192	; 0xdf68
   14dec:	movw	r2, #977	; 0x3d1
   14df0:	movt	r0, #3
   14df4:	movt	r1, #3
   14df8:	movt	r3, #3
   14dfc:	bl	12bbc <__assert_fail@plt>
   14e00:	ldr	r0, [r2, #40]	; 0x28
   14e04:	cmp	r0, #2
   14e08:	beq	14e38 <__assert_fail@plt+0x227c>
   14e0c:	cmp	r0, #1
   14e10:	beq	14e58 <__assert_fail@plt+0x229c>
   14e14:	cmp	r0, #0
   14e18:	bne	14e50 <__assert_fail@plt+0x2294>
   14e1c:	ldr	r1, [r1, #24]
   14e20:	ldrd	r2, [r2, #48]	; 0x30
   14e24:	mov	r0, #1
   14e28:	subs	r1, r2, r1
   14e2c:	sbcs	r1, r3, #0
   14e30:	bcs	14e50 <__assert_fail@plt+0x2294>
   14e34:	bx	lr
   14e38:	ldr	r0, [r1, #24]
   14e3c:	ldrd	r2, [r2, #48]	; 0x30
   14e40:	eor	r0, r2, r0
   14e44:	orrs	r0, r0, r3
   14e48:	mov	r0, #1
   14e4c:	bxeq	lr
   14e50:	mov	r0, #0
   14e54:	bx	lr
   14e58:	ldrd	r2, [r2, #48]	; 0x30
   14e5c:	ldr	r1, [r1, #24]
   14e60:	mov	r0, #1
   14e64:	subs	r1, r1, r2
   14e68:	rscs	r1, r3, #0
   14e6c:	movcs	r0, #0
   14e70:	bx	lr
   14e74:	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   14e78:	add	fp, sp, #24
   14e7c:	ldrd	r6, [r1, #72]	; 0x48
   14e80:	ldrd	r8, [r1, #88]	; 0x58
   14e84:	mov	r4, r2
   14e88:	mov	r0, r6
   14e8c:	mov	r1, r7
   14e90:	mov	r2, r8
   14e94:	mov	r3, r9
   14e98:	bl	13e10 <__assert_fail@plt+0x1254>
   14e9c:	cmp	r0, #0
   14ea0:	movlt	r0, #0
   14ea4:	poplt	{r4, r6, r7, r8, r9, sl, fp, pc}
   14ea8:	movw	r2, #51712	; 0xca00
   14eac:	sub	r1, r9, r7
   14eb0:	sub	r0, r8, r6
   14eb4:	movw	r3, #20864	; 0x5180
   14eb8:	movt	r2, #15258	; 0x3b9a
   14ebc:	cmp	r1, #0
   14ec0:	add	r0, r0, r1, asr #31
   14ec4:	movt	r3, #1
   14ec8:	addlt	r1, r1, r2
   14ecc:	mov	r2, r4
   14ed0:	pop	{r4, r6, r7, r8, r9, sl, fp, lr}
   14ed4:	b	13c90 <__assert_fail@plt+0x10d4>
   14ed8:	ldr	r0, [r1, #24]
   14edc:	ldr	r1, [r2, #40]	; 0x28
   14ee0:	sub	r0, r1, r0
   14ee4:	clz	r0, r0
   14ee8:	lsr	r0, r0, #5
   14eec:	bx	lr
   14ef0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ef4:	add	fp, sp, #24
   14ef8:	sub	sp, sp, #104	; 0x68
   14efc:	mov	r4, r2
   14f00:	mov	r8, r1
   14f04:	mov	r5, r0
   14f08:	bl	187ac <__assert_fail@plt+0x5bf0>
   14f0c:	mov	r6, sp
   14f10:	mov	r7, r0
   14f14:	mov	r0, r6
   14f18:	bl	17ed0 <__assert_fail@plt+0x5314>
   14f1c:	movw	r0, #34464	; 0x86a0
   14f20:	movw	r2, #34340	; 0x8624
   14f24:	cmp	r7, #0
   14f28:	movw	r7, #20056	; 0x4e58
   14f2c:	mov	r1, r6
   14f30:	movt	r0, #1
   14f34:	movt	r2, #1
   14f38:	movt	r7, #5
   14f3c:	movne	r2, r0
   14f40:	ldr	r0, [r7, #12]
   14f44:	blx	r2
   14f48:	cmp	r0, #0
   14f4c:	beq	14fb0 <__assert_fail@plt+0x23f4>
   14f50:	bl	187ac <__assert_fail@plt+0x5bf0>
   14f54:	mov	r6, r0
   14f58:	bl	128d4 <__errno_location@plt>
   14f5c:	cmp	r6, #0
   14f60:	beq	14f78 <__assert_fail@plt+0x23bc>
   14f64:	ldr	r1, [r0]
   14f68:	cmp	r1, #2
   14f6c:	bne	14f78 <__assert_fail@plt+0x23bc>
   14f70:	mov	r1, r8
   14f74:	b	14fb4 <__assert_fail@plt+0x23f8>
   14f78:	ldr	r6, [r0]
   14f7c:	mov	r0, #0
   14f80:	mov	r1, r5
   14f84:	mov	r4, #0
   14f88:	bl	19020 <__assert_fail@plt+0x6464>
   14f8c:	movw	r2, #14847	; 0x39ff
   14f90:	mov	r3, r0
   14f94:	mov	r0, #0
   14f98:	mov	r1, r6
   14f9c:	movt	r2, #4
   14fa0:	bl	12790 <error@plt>
   14fa4:	mov	r0, #1
   14fa8:	str	r0, [r7, #28]
   14fac:	b	14fc0 <__assert_fail@plt+0x2404>
   14fb0:	mov	r1, sp
   14fb4:	mov	r2, r4
   14fb8:	bl	14d58 <__assert_fail@plt+0x219c>
   14fbc:	mov	r4, r0
   14fc0:	mov	r0, r4
   14fc4:	sub	sp, fp, #24
   14fc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fcc:	push	{r4, r5, r6, r7, fp, lr}
   14fd0:	add	fp, sp, #16
   14fd4:	sub	sp, sp, #8
   14fd8:	mov	r5, r2
   14fdc:	movw	r2, #20100	; 0x4e84
   14fe0:	mov	r4, r0
   14fe4:	movw	r0, #20056	; 0x4e58
   14fe8:	movt	r0, #5
   14fec:	movt	r2, #5
   14ff0:	ldr	r1, [r0, #12]
   14ff4:	ldr	r3, [r2, #64]	; 0x40
   14ff8:	ldr	r0, [r0, #16]
   14ffc:	add	r2, sp, #4
   15000:	blx	r3
   15004:	cmn	r0, #1
   15008:	ble	15034 <__assert_fail@plt+0x2478>
   1500c:	ldr	r0, [r5, #40]	; 0x28
   15010:	ldr	r1, [sp, #4]
   15014:	mov	r2, #0
   15018:	bl	127b4 <fnmatch@plt>
   1501c:	mov	r4, r0
   15020:	ldr	r0, [sp, #4]
   15024:	bl	12acc <freecon@plt>
   15028:	clz	r0, r4
   1502c:	lsr	r5, r0, #5
   15030:	b	15078 <__assert_fail@plt+0x24bc>
   15034:	bl	128d4 <__errno_location@plt>
   15038:	ldr	r6, [r0]
   1503c:	movw	r1, #57257	; 0xdfa9
   15040:	mov	r0, #0
   15044:	mov	r2, #5
   15048:	mov	r5, #0
   1504c:	movt	r1, #3
   15050:	bl	1264c <dcgettext@plt>
   15054:	mov	r7, r0
   15058:	mov	r0, #0
   1505c:	mov	r1, r4
   15060:	bl	19020 <__assert_fail@plt+0x6464>
   15064:	mov	r3, r0
   15068:	mov	r0, #0
   1506c:	mov	r1, r6
   15070:	mov	r2, r7
   15074:	bl	12790 <error@plt>
   15078:	mov	r0, r5
   1507c:	sub	sp, fp, #16
   15080:	pop	{r4, r5, r6, r7, fp, pc}
   15084:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15088:	add	fp, sp, #24
   1508c:	sub	sp, sp, #264	; 0x108
   15090:	mov	r4, r0
   15094:	cmp	r1, #0
   15098:	beq	1512c <__assert_fail@plt+0x2570>
   1509c:	movw	r8, #57279	; 0xdfbf
   150a0:	add	r6, sp, #4
   150a4:	mov	r5, r1
   150a8:	mov	r9, #0
   150ac:	sub	r7, r6, #1
   150b0:	movt	r8, #3
   150b4:	ldr	r1, [r5, #4]
   150b8:	mov	r2, #0
   150bc:	cmp	r1, #0
   150c0:	beq	15114 <__assert_fail@plt+0x2558>
   150c4:	mov	r0, r6
   150c8:	bl	12748 <strcpy@plt>
   150cc:	mov	r0, r6
   150d0:	bl	1288c <strlen@plt>
   150d4:	sub	r1, r0, #1
   150d8:	cmp	r1, #0
   150dc:	blt	15108 <__assert_fail@plt+0x254c>
   150e0:	ldrb	r1, [r7, r0]
   150e4:	cmp	r1, #32
   150e8:	cmpne	r1, #9
   150ec:	bne	15108 <__assert_fail@plt+0x254c>
   150f0:	sub	r1, r0, #1
   150f4:	sub	r0, r0, #2
   150f8:	cmn	r0, #1
   150fc:	mov	r0, r1
   15100:	bgt	150e0 <__assert_fail@plt+0x2524>
   15104:	b	1510c <__assert_fail@plt+0x2550>
   15108:	mov	r1, r0
   1510c:	mov	r2, r6
   15110:	strb	r9, [r6, r1]
   15114:	mov	r0, r4
   15118:	mov	r1, r8
   1511c:	bl	128c8 <fprintf@plt>
   15120:	ldr	r5, [r5, #152]	; 0x98
   15124:	cmp	r5, #0
   15128:	bne	150b4 <__assert_fail@plt+0x24f8>
   1512c:	mov	r0, #10
   15130:	mov	r1, r4
   15134:	bl	12a3c <fputc@plt>
   15138:	sub	sp, fp, #24
   1513c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15140:	cmp	r1, #0
   15144:	bxeq	lr
   15148:	push	{r4, r5, fp, lr}
   1514c:	add	fp, sp, #8
   15150:	sub	sp, sp, #8
   15154:	mov	r5, r1
   15158:	ldr	r1, [r1, #156]	; 0x9c
   1515c:	mov	r4, r0
   15160:	bl	15274 <__assert_fail@plt+0x26b8>
   15164:	ldrb	r2, [r5, #20]
   15168:	ldrb	r0, [r5, #18]
   1516c:	movw	ip, #63055	; 0xf64f
   15170:	movw	r3, #57318	; 0xdfe6
   15174:	ldrb	r1, [r5, #19]
   15178:	movt	ip, #3
   1517c:	movt	r3, #3
   15180:	cmp	r2, #0
   15184:	movw	r2, #57292	; 0xdfcc
   15188:	moveq	r3, ip
   1518c:	cmp	r0, #0
   15190:	movt	r2, #3
   15194:	mov	r0, r4
   15198:	str	r3, [sp]
   1519c:	movw	r3, #57305	; 0xdfd9
   151a0:	moveq	r2, ip
   151a4:	cmp	r1, #0
   151a8:	movw	r1, #57285	; 0xdfc5
   151ac:	movt	r3, #3
   151b0:	movt	r1, #3
   151b4:	moveq	r3, ip
   151b8:	bl	128c8 <fprintf@plt>
   151bc:	mov	r0, r4
   151c0:	mov	r1, r5
   151c4:	bl	15d50 <__assert_fail@plt+0x3194>
   151c8:	vldr	s0, [r5, #28]
   151cc:	movw	r1, #57331	; 0xdff3
   151d0:	mov	r0, r4
   151d4:	movt	r1, #3
   151d8:	vcvt.f64.f32	d16, s0
   151dc:	vmov	r2, r3, d16
   151e0:	bl	128c8 <fprintf@plt>
   151e4:	movw	r0, #20100	; 0x4e84
   151e8:	movt	r0, #5
   151ec:	ldrb	r0, [r0, #44]	; 0x2c
   151f0:	tst	r0, #64	; 0x40
   151f4:	beq	15260 <__assert_fail@plt+0x26a4>
   151f8:	ldr	r3, [r5, #164]	; 0xa4
   151fc:	ldr	r2, [r5, #168]	; 0xa8
   15200:	movw	r1, #57357	; 0xe00d
   15204:	mov	r0, r4
   15208:	movt	r1, #3
   1520c:	bl	128c8 <fprintf@plt>
   15210:	ldr	r0, [r5, #164]	; 0xa4
   15214:	cmp	r0, #0
   15218:	beq	15248 <__assert_fail@plt+0x268c>
   1521c:	vldr	s0, [r5, #168]	; 0xa8
   15220:	vmov	s2, r0
   15224:	movw	r1, #57384	; 0xe028
   15228:	mov	r0, r4
   1522c:	vcvt.f64.u32	d16, s2
   15230:	movt	r1, #3
   15234:	vcvt.f64.u32	d17, s0
   15238:	vdiv.f64	d16, d17, d16
   1523c:	vmov	r2, r3, d16
   15240:	bl	128c8 <fprintf@plt>
   15244:	b	15260 <__assert_fail@plt+0x26a4>
   15248:	movw	r0, #57392	; 0xe030
   1524c:	mov	r1, #4
   15250:	mov	r2, #1
   15254:	mov	r3, r4
   15258:	movt	r0, #3
   1525c:	bl	12700 <fwrite@plt>
   15260:	ldr	r1, [r5, #160]	; 0xa0
   15264:	mov	r0, r4
   15268:	sub	sp, fp, #8
   1526c:	pop	{r4, r5, fp, lr}
   15270:	b	15274 <__assert_fail@plt+0x26b8>
   15274:	push	{r4, r5, fp, lr}
   15278:	add	fp, sp, #8
   1527c:	cmp	r1, #0
   15280:	popeq	{r4, r5, fp, pc}
   15284:	mov	r5, r1
   15288:	movw	r1, #15728	; 0x3d70
   1528c:	mov	r4, r0
   15290:	movw	r0, #18736	; 0x4930
   15294:	movt	r0, #1
   15298:	movt	r1, #1
   1529c:	ldr	r3, [r5]
   152a0:	ldr	r2, [r5, #156]	; 0x9c
   152a4:	cmp	r3, r0
   152a8:	cmpne	r3, r1
   152ac:	bne	152c8 <__assert_fail@plt+0x270c>
   152b0:	cmp	r2, #0
   152b4:	bne	152dc <__assert_fail@plt+0x2720>
   152b8:	ldr	r5, [r5, #160]	; 0xa0
   152bc:	cmp	r5, #0
   152c0:	bne	1529c <__assert_fail@plt+0x26e0>
   152c4:	pop	{r4, r5, fp, pc}
   152c8:	cmp	r2, #0
   152cc:	bne	152dc <__assert_fail@plt+0x2720>
   152d0:	ldr	r0, [r5, #160]	; 0xa0
   152d4:	cmp	r0, #0
   152d8:	beq	1530c <__assert_fail@plt+0x2750>
   152dc:	movw	r0, #57816	; 0xe1d8
   152e0:	mov	r1, r4
   152e4:	movt	r0, #3
   152e8:	bl	12b50 <fputs@plt>
   152ec:	mov	r0, r4
   152f0:	mov	r1, r5
   152f4:	bl	15140 <__assert_fail@plt+0x2584>
   152f8:	movw	r0, #57820	; 0xe1dc
   152fc:	mov	r1, r4
   15300:	movt	r0, #3
   15304:	pop	{r4, r5, fp, lr}
   15308:	b	12b50 <fputs@plt>
   1530c:	mov	r0, r4
   15310:	mov	r1, r5
   15314:	pop	{r4, r5, fp, lr}
   15318:	b	15140 <__assert_fail@plt+0x2584>
   1531c:	push	{r4, r5, fp, lr}
   15320:	add	fp, sp, #8
   15324:	mov	r4, r0
   15328:	movw	r0, #20100	; 0x4e84
   1532c:	movt	r0, #5
   15330:	ldrb	r0, [r0, #44]	; 0x2c
   15334:	tst	r0, #64	; 0x40
   15338:	popeq	{r4, r5, fp, pc}
   1533c:	movw	r5, #17760	; 0x4560
   15340:	movw	r0, #57397	; 0xe035
   15344:	mov	r1, #42	; 0x2a
   15348:	mov	r2, #1
   1534c:	movt	r5, #5
   15350:	movt	r0, #3
   15354:	ldr	r3, [r5]
   15358:	bl	12700 <fwrite@plt>
   1535c:	ldr	r0, [r5]
   15360:	mov	r1, r4
   15364:	bl	15140 <__assert_fail@plt+0x2584>
   15368:	ldr	r1, [r5]
   1536c:	mov	r0, #10
   15370:	pop	{r4, r5, fp, lr}
   15374:	b	12a3c <fputc@plt>
   15378:	push	{fp, lr}
   1537c:	mov	fp, sp
   15380:	cmp	r0, #0
   15384:	popeq	{fp, pc}
   15388:	movw	lr, #19212	; 0x4b0c
   1538c:	movw	ip, #19328	; 0x4b80
   15390:	movt	lr, #1
   15394:	movt	ip, #1
   15398:	ldr	r3, [r0]
   1539c:	cmp	r3, #0
   153a0:	beq	15480 <__assert_fail@plt+0x28c4>
   153a4:	ldr	r2, [r0, #172]	; 0xac
   153a8:	cmp	r2, #0
   153ac:	beq	154a0 <__assert_fail@plt+0x28e4>
   153b0:	ldr	r1, [r2, #12]
   153b4:	cmp	r1, #0
   153b8:	cmpne	r1, r3
   153bc:	bne	15460 <__assert_fail@plt+0x28a4>
   153c0:	ldr	r1, [r2]
   153c4:	cmp	r1, #6
   153c8:	bhi	15408 <__assert_fail@plt+0x284c>
   153cc:	add	r2, pc, #0
   153d0:	ldr	pc, [r2, r1, lsl #2]
   153d4:	andeq	r5, r1, r0, asr #9
   153d8:	strdeq	r5, [r1], -r0
   153dc:	andeq	r5, r1, r0, ror #9
   153e0:	strdeq	r5, [r1], -r0
   153e4:	strdeq	r5, [r1], -r0
   153e8:	strdeq	r5, [r1], -r0
   153ec:	andeq	r5, r1, r8, lsl r4
   153f0:	ldrb	r1, [r0, #17]
   153f4:	cmp	r1, #0
   153f8:	bne	15500 <__assert_fail@plt+0x2944>
   153fc:	ldrb	r1, [r0, #16]
   15400:	cmp	r1, #0
   15404:	bne	15520 <__assert_fail@plt+0x2964>
   15408:	ldr	r0, [r0, #152]	; 0x98
   1540c:	cmp	r0, #0
   15410:	bne	15398 <__assert_fail@plt+0x27dc>
   15414:	b	1545c <__assert_fail@plt+0x28a0>
   15418:	ldrb	r1, [r0, #16]
   1541c:	cmp	r1, #0
   15420:	beq	15540 <__assert_fail@plt+0x2984>
   15424:	cmp	r3, lr
   15428:	cmpne	r3, ip
   1542c:	beq	15408 <__assert_fail@plt+0x284c>
   15430:	ldrb	r1, [r0, #17]
   15434:	cmp	r1, #0
   15438:	bne	15408 <__assert_fail@plt+0x284c>
   1543c:	movw	r0, #57661	; 0xe13d
   15440:	movw	r1, #56719	; 0xdd8f
   15444:	movw	r3, #57461	; 0xe075
   15448:	movw	r2, #1349	; 0x545
   1544c:	movt	r0, #3
   15450:	movt	r1, #3
   15454:	movt	r3, #3
   15458:	bl	12bbc <__assert_fail@plt>
   1545c:	pop	{fp, pc}
   15460:	movw	r0, #57534	; 0xe0be
   15464:	movw	r1, #56719	; 0xdd8f
   15468:	movw	r3, #57461	; 0xe075
   1546c:	movw	r2, #1322	; 0x52a
   15470:	movt	r0, #3
   15474:	movt	r1, #3
   15478:	movt	r3, #3
   1547c:	bl	12bbc <__assert_fail@plt>
   15480:	movw	r0, #57440	; 0xe060
   15484:	movw	r1, #56719	; 0xdd8f
   15488:	movw	r3, #57461	; 0xe075
   1548c:	movw	r2, #1310	; 0x51e
   15490:	movt	r0, #3
   15494:	movt	r1, #3
   15498:	movt	r3, #3
   1549c:	bl	12bbc <__assert_fail@plt>
   154a0:	movw	r0, #57510	; 0xe0a6
   154a4:	movw	r1, #56719	; 0xdd8f
   154a8:	movw	r3, #57461	; 0xe075
   154ac:	movw	r2, #1313	; 0x521
   154b0:	movt	r0, #3
   154b4:	movt	r1, #3
   154b8:	movt	r3, #3
   154bc:	bl	12bbc <__assert_fail@plt>
   154c0:	movw	r0, #57577	; 0xe0e9
   154c4:	movw	r1, #56719	; 0xdd8f
   154c8:	movw	r3, #57461	; 0xe075
   154cc:	movw	r2, #1338	; 0x53a
   154d0:	movt	r0, #3
   154d4:	movt	r1, #3
   154d8:	movt	r3, #3
   154dc:	bl	12bbc <__assert_fail@plt>
   154e0:	movw	r0, #57613	; 0xe10d
   154e4:	movw	r1, #56719	; 0xdd8f
   154e8:	movw	r3, #57461	; 0xe075
   154ec:	movw	r2, #1339	; 0x53b
   154f0:	movt	r0, #3
   154f4:	movt	r1, #3
   154f8:	movt	r3, #3
   154fc:	bl	12bbc <__assert_fail@plt>
   15500:	movw	r0, #57660	; 0xe13c
   15504:	movw	r1, #56719	; 0xdd8f
   15508:	movw	r3, #57461	; 0xe075
   1550c:	movw	r2, #1363	; 0x553
   15510:	movt	r0, #3
   15514:	movt	r1, #3
   15518:	movt	r3, #3
   1551c:	bl	12bbc <__assert_fail@plt>
   15520:	movw	r0, #57681	; 0xe151
   15524:	movw	r1, #56719	; 0xdd8f
   15528:	movw	r3, #57461	; 0xe075
   1552c:	movw	r2, #1364	; 0x554
   15530:	movt	r0, #3
   15534:	movt	r1, #3
   15538:	movt	r3, #3
   1553c:	bl	12bbc <__assert_fail@plt>
   15540:	movw	r0, #57682	; 0xe152
   15544:	movw	r1, #56719	; 0xdd8f
   15548:	movw	r3, #57461	; 0xe075
   1554c:	movw	r2, #1343	; 0x53f
   15550:	movt	r0, #3
   15554:	movt	r1, #3
   15558:	movt	r3, #3
   1555c:	bl	12bbc <__assert_fail@plt>
   15560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15564:	add	fp, sp, #28
   15568:	sub	sp, sp, #36	; 0x24
   1556c:	mov	r5, r2
   15570:	mov	r9, r0
   15574:	mov	r4, r2
   15578:	ldr	r0, [r5], #40	; 0x28
   1557c:	bl	18ff0 <__assert_fail@plt+0x6434>
   15580:	mov	r8, r0
   15584:	cmp	r0, #0
   15588:	beq	1561c <__assert_fail@plt+0x2a60>
   1558c:	ldr	r0, [r4, #116]	; 0x74
   15590:	cmp	r0, #0
   15594:	bne	155e8 <__assert_fail@plt+0x2a2c>
   15598:	movw	r7, #20056	; 0x4e58
   1559c:	mov	r1, #47	; 0x2f
   155a0:	movt	r7, #5
   155a4:	ldr	r6, [r7, #12]
   155a8:	mov	r0, r6
   155ac:	bl	12898 <strchr@plt>
   155b0:	cmp	r0, #0
   155b4:	beq	15778 <__assert_fail@plt+0x2bbc>
   155b8:	mov	r0, r6
   155bc:	bl	21600 <__assert_fail@plt+0xea44>
   155c0:	ldr	r1, [r7, #16]
   155c4:	mov	sl, r0
   155c8:	mov	r0, r5
   155cc:	mov	r2, sl
   155d0:	bl	15c64 <__assert_fail@plt+0x30a8>
   155d4:	mov	r6, r0
   155d8:	mov	r0, sl
   155dc:	bl	2c048 <__assert_fail@plt+0x1948c>
   155e0:	cmp	r6, #0
   155e4:	beq	15794 <__assert_fail@plt+0x2bd8>
   155e8:	movw	r0, #20056	; 0x4e58
   155ec:	movt	r0, #5
   155f0:	ldr	r0, [r0, #12]
   155f4:	bl	21544 <__assert_fail@plt+0xe988>
   155f8:	mov	r9, r0
   155fc:	ldrb	r0, [r0]
   15600:	movw	r6, #57937	; 0xe251
   15604:	movt	r6, #3
   15608:	mov	sl, r9
   1560c:	subs	r7, r0, #47	; 0x2f
   15610:	moveq	r6, r7
   15614:	movwne	r7, #2
   15618:	b	15640 <__assert_fail@plt+0x2a84>
   1561c:	movw	r0, #17792	; 0x4580
   15620:	ldr	r1, [r4, #144]	; 0x90
   15624:	mov	sl, #0
   15628:	mov	r6, #0
   1562c:	mov	r7, #0
   15630:	movt	r0, #5
   15634:	ldr	r0, [r0]
   15638:	cmp	r1, r0
   1563c:	bne	157f4 <__assert_fail@plt+0x2c38>
   15640:	ldrb	r0, [r5]
   15644:	cmp	r0, #0
   15648:	beq	15698 <__assert_fail@plt+0x2adc>
   1564c:	mov	r0, r9
   15650:	bl	1288c <strlen@plt>
   15654:	mov	r1, #0
   15658:	add	r2, r5, #4
   1565c:	stm	sp, {r6, r7}
   15660:	add	r3, r0, #1
   15664:	str	r1, [sp, #8]
   15668:	mov	r0, r2
   1566c:	add	r1, r4, #88	; 0x58
   15670:	mov	r2, r9
   15674:	bl	1ee38 <__assert_fail@plt+0xc27c>
   15678:	ldr	r0, [r4, #116]	; 0x74
   1567c:	cmp	r0, #0
   15680:	beq	15750 <__assert_fail@plt+0x2b94>
   15684:	movw	r0, #20056	; 0x4e58
   15688:	mov	r5, #1
   1568c:	movt	r0, #5
   15690:	strb	r5, [r0, #32]
   15694:	b	15754 <__assert_fail@plt+0x2b98>
   15698:	add	r0, r4, #88	; 0x58
   1569c:	str	sl, [sp, #20]
   156a0:	add	sl, r5, #4
   156a4:	str	r8, [sp, #24]
   156a8:	str	r6, [sp, #28]
   156ac:	str	r0, [sp, #32]
   156b0:	ldr	r0, [r4, #136]	; 0x88
   156b4:	cmp	r0, #1
   156b8:	blt	15714 <__assert_fail@plt+0x2b58>
   156bc:	mov	r5, #0
   156c0:	ldr	r0, [r4, #132]	; 0x84
   156c4:	ldr	r6, [r0, r5, lsl #2]
   156c8:	mov	r0, r6
   156cc:	bl	1288c <strlen@plt>
   156d0:	mov	r8, r0
   156d4:	mov	r0, r9
   156d8:	bl	1288c <strlen@plt>
   156dc:	ldr	r1, [sp, #28]
   156e0:	mov	r2, r6
   156e4:	mov	r3, r8
   156e8:	stm	sp, {r1, r7, r9}
   156ec:	str	r0, [sp, #12]
   156f0:	mov	r0, #0
   156f4:	ldr	r1, [sp, #32]
   156f8:	str	r0, [sp, #16]
   156fc:	mov	r0, sl
   15700:	bl	1ecc0 <__assert_fail@plt+0xc104>
   15704:	ldr	r0, [r4, #136]	; 0x88
   15708:	add	r5, r5, #1
   1570c:	cmp	r5, r0
   15710:	blt	156c0 <__assert_fail@plt+0x2b04>
   15714:	ldr	r1, [sp, #32]
   15718:	mov	r0, sl
   1571c:	bl	1f0a8 <__assert_fail@plt+0xc4ec>
   15720:	ldrh	r0, [r4, #148]	; 0x94
   15724:	ldr	r8, [sp, #24]
   15728:	movw	r1, #65407	; 0xff7f
   1572c:	and	r0, r0, r1
   15730:	cmp	r8, #0
   15734:	clz	r0, r0
   15738:	lsr	r5, r0, #5
   1573c:	beq	15748 <__assert_fail@plt+0x2b8c>
   15740:	ldr	r0, [r4, #144]	; 0x90
   15744:	bl	29dbc <__assert_fail@plt+0x17200>
   15748:	ldr	sl, [sp, #20]
   1574c:	b	15754 <__assert_fail@plt+0x2b98>
   15750:	mov	r5, #1
   15754:	cmp	sl, #0
   15758:	beq	1576c <__assert_fail@plt+0x2bb0>
   1575c:	cmp	r8, #0
   15760:	beq	157d4 <__assert_fail@plt+0x2c18>
   15764:	mov	r0, sl
   15768:	bl	2c048 <__assert_fail@plt+0x1948c>
   1576c:	mov	r0, r5
   15770:	sub	sp, fp, #28
   15774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15778:	ldr	r1, [r7, #16]
   1577c:	movw	r2, #59684	; 0xe924
   15780:	mov	r0, r5
   15784:	movt	r2, #3
   15788:	bl	15c64 <__assert_fail@plt+0x30a8>
   1578c:	cmp	r0, #0
   15790:	bne	155e8 <__assert_fail@plt+0x2a2c>
   15794:	bl	128d4 <__errno_location@plt>
   15798:	ldr	r4, [r0]
   1579c:	movw	r1, #57872	; 0xe210
   157a0:	mov	r0, #0
   157a4:	mov	r2, #5
   157a8:	movt	r1, #3
   157ac:	bl	1264c <dcgettext@plt>
   157b0:	mov	r5, r0
   157b4:	mov	r0, #0
   157b8:	mov	r1, r9
   157bc:	bl	19020 <__assert_fail@plt+0x6464>
   157c0:	mov	r3, r0
   157c4:	mov	r0, #1
   157c8:	mov	r1, r4
   157cc:	mov	r2, r5
   157d0:	bl	12790 <error@plt>
   157d4:	movw	r0, #58050	; 0xe2c2
   157d8:	movw	r1, #57973	; 0xe275
   157dc:	movw	r3, #57980	; 0xe27c
   157e0:	mov	r2, #208	; 0xd0
   157e4:	movt	r0, #3
   157e8:	movt	r1, #3
   157ec:	movt	r3, #3
   157f0:	bl	12bbc <__assert_fail@plt>
   157f4:	movw	r0, #57940	; 0xe254
   157f8:	movw	r1, #57973	; 0xe275
   157fc:	movw	r3, #57980	; 0xe27c
   15800:	mov	r2, #148	; 0x94
   15804:	movt	r0, #3
   15808:	movt	r1, #3
   1580c:	movt	r3, #3
   15810:	bl	12bbc <__assert_fail@plt>
   15814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15818:	add	fp, sp, #28
   1581c:	sub	sp, sp, #20
   15820:	movw	r9, #20100	; 0x4e84
   15824:	mov	r8, r3
   15828:	mov	r5, r1
   1582c:	movt	r9, #5
   15830:	ldrb	r0, [r9, #44]	; 0x2c
   15834:	tst	r0, #32
   15838:	bne	159cc <__assert_fail@plt+0x2e10>
   1583c:	movw	r0, #17772	; 0x456c
   15840:	movt	r0, #5
   15844:	ldr	r0, [r0]
   15848:	bl	2bfec <__assert_fail@plt+0x19430>
   1584c:	movw	sl, #17760	; 0x4560
   15850:	movt	sl, #5
   15854:	ldr	r0, [sl]
   15858:	bl	2bfec <__assert_fail@plt+0x19430>
   1585c:	movw	r0, #17796	; 0x4584
   15860:	movt	r0, #5
   15864:	ldrb	r1, [r0]
   15868:	cmp	r1, #0
   1586c:	bne	15884 <__assert_fail@plt+0x2cc8>
   15870:	mov	r1, #1
   15874:	strb	r1, [r0]
   15878:	mov	r0, #17
   1587c:	mov	r1, #0
   15880:	bl	12610 <signal@plt>
   15884:	bl	129f4 <fork@plt>
   15888:	cmn	r0, #1
   1588c:	beq	15a70 <__assert_fail@plt+0x2eb4>
   15890:	mov	r6, r0
   15894:	cmp	r0, #0
   15898:	beq	15a9c <__assert_fail@plt+0x2ee0>
   1589c:	add	r7, r5, #108	; 0x6c
   158a0:	mov	r0, r6
   158a4:	mov	r1, r7
   158a8:	mov	r2, #0
   158ac:	bl	12724 <waitpid@plt>
   158b0:	cmn	r0, #1
   158b4:	bne	15918 <__assert_fail@plt+0x2d5c>
   158b8:	bl	128d4 <__errno_location@plt>
   158bc:	ldr	r4, [r0]
   158c0:	cmp	r4, #4
   158c4:	beq	158a0 <__assert_fail@plt+0x2ce4>
   158c8:	movw	r1, #58197	; 0xe355
   158cc:	mov	r0, #0
   158d0:	mov	r2, #5
   158d4:	mov	r6, #0
   158d8:	movt	r1, #3
   158dc:	bl	1264c <dcgettext@plt>
   158e0:	ldr	r1, [r8]
   158e4:	mov	r5, r0
   158e8:	mov	r0, #0
   158ec:	bl	19020 <__assert_fail@plt+0x6464>
   158f0:	mov	r3, r0
   158f4:	mov	r0, #0
   158f8:	mov	r1, r4
   158fc:	mov	r2, r5
   15900:	bl	12790 <error@plt>
   15904:	movw	r0, #20056	; 0x4e58
   15908:	mov	r1, #1
   1590c:	movt	r0, #5
   15910:	str	r1, [r0, #28]
   15914:	b	159c0 <__assert_fail@plt+0x2e04>
   15918:	ldr	r0, [r7]
   1591c:	mov	r1, #2130706432	; 0x7f000000
   15920:	and	r1, r1, r0, lsl #24
   15924:	add	r1, r1, #16777216	; 0x1000000
   15928:	cmp	r1, #33554432	; 0x2000000
   1592c:	blt	1598c <__assert_fail@plt+0x2dd0>
   15930:	movw	r1, #58218	; 0xe36a
   15934:	mov	r0, #0
   15938:	mov	r2, #5
   1593c:	movt	r1, #3
   15940:	bl	1264c <dcgettext@plt>
   15944:	ldr	r1, [r9, #72]	; 0x48
   15948:	ldr	r2, [r8]
   1594c:	mov	r4, r0
   15950:	mov	r0, #0
   15954:	bl	29834 <__assert_fail@plt+0x16c78>
   15958:	mov	r3, r0
   1595c:	ldr	r0, [r5, #108]	; 0x6c
   15960:	mov	r1, #0
   15964:	mov	r2, r4
   15968:	and	r0, r0, #127	; 0x7f
   1596c:	str	r0, [sp]
   15970:	mov	r0, #0
   15974:	bl	12790 <error@plt>
   15978:	ldrb	r0, [r5]
   1597c:	cmp	r0, #0
   15980:	bne	159b0 <__assert_fail@plt+0x2df4>
   15984:	mov	r6, #1
   15988:	b	159c0 <__assert_fail@plt+0x2e04>
   1598c:	ldrb	r1, [r9, #44]	; 0x2c
   15990:	ubfx	r4, r0, #8, #8
   15994:	tst	r1, #32
   15998:	bne	15a54 <__assert_fail@plt+0x2e98>
   1599c:	cmp	r4, #0
   159a0:	mov	r6, #1
   159a4:	ldrbne	r0, [r5]
   159a8:	cmpne	r0, #0
   159ac:	beq	159c0 <__assert_fail@plt+0x2e04>
   159b0:	movw	r0, #20056	; 0x4e58
   159b4:	mov	r6, #1
   159b8:	movt	r0, #5
   159bc:	str	r6, [r0, #28]
   159c0:	mov	r0, r6
   159c4:	sub	sp, fp, #28
   159c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159cc:	ldr	r0, [r5, #48]	; 0x30
   159d0:	movw	r7, #17760	; 0x4560
   159d4:	movw	r1, #58056	; 0xe2c8
   159d8:	mov	r4, #0
   159dc:	movt	r7, #5
   159e0:	movt	r1, #3
   159e4:	subs	r2, r0, #1
   159e8:	ldr	r0, [r7]
   159ec:	sbc	r3, r4, #0
   159f0:	bl	128c8 <fprintf@plt>
   159f4:	ldr	r0, [r5, #48]	; 0x30
   159f8:	ldr	r6, [r7]
   159fc:	cmp	r0, #1
   15a00:	beq	15a44 <__assert_fail@plt+0x2e88>
   15a04:	movw	sl, #14846	; 0x39fe
   15a08:	movt	sl, #4
   15a0c:	ldr	r0, [r5, #52]	; 0x34
   15a10:	ldr	r1, [r0, r4, lsl #2]
   15a14:	mov	r0, #0
   15a18:	bl	19020 <__assert_fail@plt+0x6464>
   15a1c:	mov	r2, r0
   15a20:	mov	r0, r6
   15a24:	mov	r1, sl
   15a28:	bl	128c8 <fprintf@plt>
   15a2c:	ldr	r0, [r5, #48]	; 0x30
   15a30:	ldr	r6, [r7]
   15a34:	add	r4, r4, #1
   15a38:	sub	r0, r0, #1
   15a3c:	cmp	r4, r0
   15a40:	bcc	15a0c <__assert_fail@plt+0x2e50>
   15a44:	mov	r0, #10
   15a48:	mov	r1, r6
   15a4c:	bl	12a3c <fputc@plt>
   15a50:	b	1583c <__assert_fail@plt+0x2c80>
   15a54:	ldr	r0, [sl]
   15a58:	movw	r1, #58245	; 0xe385
   15a5c:	mov	r2, r6
   15a60:	mov	r3, r4
   15a64:	movt	r1, #3
   15a68:	bl	128c8 <fprintf@plt>
   15a6c:	b	1599c <__assert_fail@plt+0x2de0>
   15a70:	bl	128d4 <__errno_location@plt>
   15a74:	ldr	r4, [r0]
   15a78:	movw	r1, #58098	; 0xe2f2
   15a7c:	mov	r0, #0
   15a80:	mov	r2, #5
   15a84:	movt	r1, #3
   15a88:	bl	1264c <dcgettext@plt>
   15a8c:	mov	r2, r0
   15a90:	mov	r0, #1
   15a94:	mov	r1, r4
   15a98:	bl	12790 <error@plt>
   15a9c:	ldr	r6, [r5, #104]	; 0x68
   15aa0:	cmp	r6, #0
   15aa4:	bne	15ac8 <__assert_fail@plt+0x2f0c>
   15aa8:	movw	r0, #58110	; 0xe2fe
   15aac:	movw	r1, #57973	; 0xe275
   15ab0:	movw	r3, #58137	; 0xe319
   15ab4:	movw	r2, #321	; 0x141
   15ab8:	movt	r0, #3
   15abc:	movt	r1, #3
   15ac0:	movt	r3, #3
   15ac4:	bl	12bbc <__assert_fail@plt>
   15ac8:	ldrb	r0, [r5, #100]	; 0x64
   15acc:	mov	r5, #1
   15ad0:	cmp	r0, #0
   15ad4:	beq	15b78 <__assert_fail@plt+0x2fbc>
   15ad8:	movw	r0, #58368	; 0xe400
   15adc:	mov	r5, #0
   15ae0:	movt	r0, #3
   15ae4:	vldr	d16, [r0]
   15ae8:	mov	r0, #108	; 0x6c
   15aec:	strh	r0, [sp, #16]
   15af0:	mov	r0, #0
   15af4:	vstr	d16, [sp, #8]
   15af8:	bl	12b74 <close@plt>
   15afc:	cmn	r0, #1
   15b00:	bgt	15b34 <__assert_fail@plt+0x2f78>
   15b04:	bl	128d4 <__errno_location@plt>
   15b08:	ldr	r4, [r0]
   15b0c:	movw	r1, #58307	; 0xe3c3
   15b10:	mov	r0, #0
   15b14:	mov	r2, #5
   15b18:	movt	r1, #3
   15b1c:	bl	1264c <dcgettext@plt>
   15b20:	mov	r2, r0
   15b24:	mov	r0, #0
   15b28:	mov	r1, r4
   15b2c:	bl	12790 <error@plt>
   15b30:	b	15b78 <__assert_fail@plt+0x2fbc>
   15b34:	add	r0, sp, #8
   15b38:	mov	r1, #131072	; 0x20000
   15b3c:	bl	216d8 <__assert_fail@plt+0xeb1c>
   15b40:	mov	r5, #1
   15b44:	cmn	r0, #1
   15b48:	bgt	15b78 <__assert_fail@plt+0x2fbc>
   15b4c:	bl	128d4 <__errno_location@plt>
   15b50:	ldr	r4, [r0]
   15b54:	add	r1, sp, #8
   15b58:	mov	r0, #0
   15b5c:	bl	19020 <__assert_fail@plt+0x6464>
   15b60:	movw	r2, #14847	; 0x39ff
   15b64:	mov	r3, r0
   15b68:	mov	r0, #0
   15b6c:	mov	r1, r4
   15b70:	movt	r2, #4
   15b74:	bl	12790 <error@plt>
   15b78:	mov	r0, r6
   15b7c:	bl	29da0 <__assert_fail@plt+0x171e4>
   15b80:	cmp	r0, #0
   15b84:	bne	15bc0 <__assert_fail@plt+0x3004>
   15b88:	cmp	r5, #0
   15b8c:	beq	15c5c <__assert_fail@plt+0x30a0>
   15b90:	bl	1fd54 <__assert_fail@plt+0xd198>
   15b94:	cmp	r0, #0
   15b98:	beq	15ba0 <__assert_fail@plt+0x2fe4>
   15b9c:	bl	1fd74 <__assert_fail@plt+0xd1b8>
   15ba0:	mov	r0, r8
   15ba4:	bl	1f594 <__assert_fail@plt+0xc9d8>
   15ba8:	cmp	r0, #0
   15bac:	beq	15c24 <__assert_fail@plt+0x3068>
   15bb0:	bl	128d4 <__errno_location@plt>
   15bb4:	mov	r1, #7
   15bb8:	str	r1, [r0]
   15bbc:	b	15c34 <__assert_fail@plt+0x3078>
   15bc0:	bl	128d4 <__errno_location@plt>
   15bc4:	ldr	r4, [r0]
   15bc8:	movw	r1, #58335	; 0xe3df
   15bcc:	mov	r0, #0
   15bd0:	mov	r2, #5
   15bd4:	movt	r1, #3
   15bd8:	bl	1264c <dcgettext@plt>
   15bdc:	mov	r2, r0
   15be0:	ldr	r0, [r6]
   15be4:	cmn	r0, #1
   15be8:	bgt	15c10 <__assert_fail@plt+0x3054>
   15bec:	ldr	r0, [r6, #4]
   15bf0:	movw	r1, #63055	; 0xf64f
   15bf4:	movw	r3, #5032	; 0x13a8
   15bf8:	movt	r1, #3
   15bfc:	movt	r3, #4
   15c00:	cmp	r0, #0
   15c04:	moveq	r3, r1
   15c08:	moveq	r0, r1
   15c0c:	b	15c1c <__assert_fail@plt+0x3060>
   15c10:	movw	r3, #63055	; 0xf64f
   15c14:	movt	r3, #3
   15c18:	mov	r0, r3
   15c1c:	str	r0, [sp]
   15c20:	b	15c50 <__assert_fail@plt+0x3094>
   15c24:	ldr	r0, [r8]
   15c28:	mov	r1, r8
   15c2c:	bl	125d4 <execvp@plt>
   15c30:	bl	128d4 <__errno_location@plt>
   15c34:	ldr	r1, [r8]
   15c38:	ldr	r4, [r0]
   15c3c:	mov	r0, #0
   15c40:	bl	19020 <__assert_fail@plt+0x6464>
   15c44:	movw	r2, #14847	; 0x39ff
   15c48:	mov	r3, r0
   15c4c:	movt	r2, #4
   15c50:	mov	r0, #0
   15c54:	mov	r1, r4
   15c58:	bl	12790 <error@plt>
   15c5c:	mov	r0, #1
   15c60:	bl	125bc <_exit@plt>
   15c64:	push	{r4, r5, r6, r7, fp, lr}
   15c68:	add	fp, sp, #16
   15c6c:	mov	r7, r0
   15c70:	mov	r0, #8
   15c74:	mov	r5, r2
   15c78:	mov	r6, r1
   15c7c:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   15c80:	mov	r4, #0
   15c84:	str	r0, [r7, #104]	; 0x68
   15c88:	mov	r1, r5
   15c8c:	mov	r2, #0
   15c90:	str	r4, [r0, #4]
   15c94:	mov	r0, r6
   15c98:	bl	24c08 <__assert_fail@plt+0x1204c>
   15c9c:	ldr	r1, [r7, #104]	; 0x68
   15ca0:	cmp	r0, #0
   15ca4:	str	r0, [r1]
   15ca8:	blt	15cb8 <__assert_fail@plt+0x30fc>
   15cac:	mov	r1, #1
   15cb0:	mov	r4, #1
   15cb4:	bl	21338 <__assert_fail@plt+0xe77c>
   15cb8:	mov	r0, r4
   15cbc:	pop	{r4, r5, r6, r7, fp, pc}
   15cc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cc4:	add	fp, sp, #24
   15cc8:	movw	r8, #17800	; 0x4588
   15ccc:	mov	r5, r0
   15cd0:	mov	r4, r1
   15cd4:	cmp	r1, #0
   15cd8:	movt	r8, #5
   15cdc:	movwne	r4, #16
   15ce0:	ldr	r0, [r8]
   15ce4:	cmp	r0, #0
   15ce8:	beq	15d30 <__assert_fail@plt+0x3174>
   15cec:	movw	r6, #17804	; 0x458c
   15cf0:	mov	r7, #0
   15cf4:	movt	r6, #5
   15cf8:	ldr	r0, [r6]
   15cfc:	mov	r2, r4
   15d00:	ldr	r1, [r0, r7, lsl #2]
   15d04:	mov	r0, r5
   15d08:	bl	127b4 <fnmatch@plt>
   15d0c:	cmp	r0, #0
   15d10:	moveq	r0, #1
   15d14:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d18:	ldr	r0, [r8]
   15d1c:	add	r7, r7, #1
   15d20:	cmp	r7, r0
   15d24:	movcs	r0, #0
   15d28:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d2c:	b	15cf8 <__assert_fail@plt+0x313c>
   15d30:	movw	r1, #59684	; 0xe924
   15d34:	mov	r0, r5
   15d38:	mov	r2, r4
   15d3c:	movt	r1, #3
   15d40:	bl	127b4 <fnmatch@plt>
   15d44:	clz	r0, r0
   15d48:	lsr	r0, r0, #5
   15d4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d50:	ldr	r3, [r1, #36]	; 0x24
   15d54:	ldr	r2, [r1, #4]
   15d58:	mov	ip, r0
   15d5c:	cmp	r3, #0
   15d60:	beq	15d74 <__assert_fail@plt+0x31b8>
   15d64:	movw	r1, #58378	; 0xe40a
   15d68:	mov	r0, ip
   15d6c:	movt	r1, #3
   15d70:	b	128c8 <fprintf@plt>
   15d74:	mov	r0, r2
   15d78:	mov	r1, ip
   15d7c:	b	12b50 <fputs@plt>
   15d80:	movw	r0, #17808	; 0x4590
   15d84:	movt	r0, #5
   15d88:	ldr	r0, [r0]
   15d8c:	bx	lr
   15d90:	push	{r4, sl, fp, lr}
   15d94:	add	fp, sp, #8
   15d98:	cmp	r0, #0
   15d9c:	beq	15f1c <__assert_fail@plt+0x3360>
   15da0:	mov	r4, r0
   15da4:	ldr	r0, [r0, #160]	; 0xa0
   15da8:	cmp	r0, #0
   15dac:	blne	15d90 <__assert_fail@plt+0x31d4>
   15db0:	ldr	r0, [r4, #156]	; 0x9c
   15db4:	cmp	r0, #0
   15db8:	blne	15d90 <__assert_fail@plt+0x31d4>
   15dbc:	ldr	r0, [r4, #8]
   15dc0:	cmp	r0, #5
   15dc4:	bhi	15f3c <__assert_fail@plt+0x3380>
   15dc8:	add	r1, pc, #0
   15dcc:	ldr	pc, [r1, r0, lsl #2]
   15dd0:	andeq	r5, r1, r8, ror #27
   15dd4:			; <UNDEFINED> instruction: 0x00015eb0
   15dd8:	andeq	r5, r1, r0, lsr #28
   15ddc:	andeq	r5, r1, r4, asr lr
   15de0:	andeq	r5, r1, ip, asr pc
   15de4:	andeq	r5, r1, ip, ror pc
   15de8:	ldr	r0, [r4, #160]	; 0xa0
   15dec:	cmp	r0, #0
   15df0:	bne	15f9c <__assert_fail@plt+0x33e0>
   15df4:	ldr	r0, [r4, #156]	; 0x9c
   15df8:	cmp	r0, #0
   15dfc:	beq	15ec8 <__assert_fail@plt+0x330c>
   15e00:	movw	r0, #58522	; 0xe49a
   15e04:	movw	r1, #58394	; 0xe41a
   15e08:	movw	r3, #58401	; 0xe421
   15e0c:	movw	r2, #1170	; 0x492
   15e10:	movt	r0, #3
   15e14:	movt	r1, #3
   15e18:	movt	r3, #3
   15e1c:	bl	12bbc <__assert_fail@plt>
   15e20:	ldr	r0, [r4]
   15e24:	movw	r1, #17996	; 0x464c
   15e28:	movt	r1, #1
   15e2c:	cmp	r0, r1
   15e30:	bne	15fbc <__assert_fail@plt+0x3400>
   15e34:	ldr	r0, [r4, #156]	; 0x9c
   15e38:	cmp	r0, #0
   15e3c:	bne	15fdc <__assert_fail@plt+0x3420>
   15e40:	ldr	r0, [r4, #160]	; 0xa0
   15e44:	vmov.f32	s2, #112	; 0x3f800000  1.0
   15e48:	vldr	s0, [r0, #28]
   15e4c:	vsub.f32	s0, s2, s0
   15e50:	b	15f14 <__assert_fail@plt+0x3358>
   15e54:	ldr	r0, [r4]
   15e58:	movw	r1, #15728	; 0x3d70
   15e5c:	movt	r1, #1
   15e60:	cmp	r0, r1
   15e64:	beq	15ed0 <__assert_fail@plt+0x3314>
   15e68:	movw	r1, #16104	; 0x3ee8
   15e6c:	movt	r1, #1
   15e70:	cmp	r0, r1
   15e74:	beq	15ef8 <__assert_fail@plt+0x333c>
   15e78:	movw	r1, #18736	; 0x4930
   15e7c:	movt	r1, #1
   15e80:	cmp	r0, r1
   15e84:	bne	1603c <__assert_fail@plt+0x3480>
   15e88:	ldr	r0, [r4, #160]	; 0xa0
   15e8c:	vmov.f32	s0, #112	; 0x3f800000  1.0
   15e90:	vmov.f32	s2, s0
   15e94:	cmp	r0, #0
   15e98:	vldrne	s2, [r0, #28]
   15e9c:	ldr	r0, [r4, #156]	; 0x9c
   15ea0:	cmp	r0, #0
   15ea4:	vldrne	s0, [r0, #28]
   15ea8:	vadd.f32	s0, s2, s0
   15eac:	b	15efc <__assert_fail@plt+0x3340>
   15eb0:	ldr	r0, [r4, #160]	; 0xa0
   15eb4:	cmp	r0, #0
   15eb8:	bne	15ffc <__assert_fail@plt+0x3440>
   15ebc:	ldr	r0, [r4, #156]	; 0x9c
   15ec0:	cmp	r0, #0
   15ec4:	bne	1601c <__assert_fail@plt+0x3460>
   15ec8:	vldr	s0, [r4, #28]
   15ecc:	pop	{r4, sl, fp, pc}
   15ed0:	ldr	r0, [r4, #160]	; 0xa0
   15ed4:	vmov.f32	s0, #112	; 0x3f800000  1.0
   15ed8:	vmov.f32	s2, s0
   15edc:	cmp	r0, #0
   15ee0:	vldrne	s2, [r0, #28]
   15ee4:	ldr	r0, [r4, #156]	; 0x9c
   15ee8:	cmp	r0, #0
   15eec:	vldrne	s0, [r0, #28]
   15ef0:	vmul.f32	s0, s2, s0
   15ef4:	b	15efc <__assert_fail@plt+0x3340>
   15ef8:	vmov.f32	s0, #112	; 0x3f800000  1.0
   15efc:	vldr	s2, [pc, #344]	; 1605c <__assert_fail@plt+0x34a0>
   15f00:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15f04:	vcmpe.f32	s0, s4
   15f08:	vmrs	APSR_nzcv, fpscr
   15f0c:	vmax.f32	d1, d0, d1
   15f10:	vselgt.f32	s0, s4, s2
   15f14:	vstr	s0, [r4, #28]
   15f18:	pop	{r4, sl, fp, pc}
   15f1c:	movw	r0, #58384	; 0xe410
   15f20:	movw	r1, #58394	; 0xe41a
   15f24:	movw	r3, #58401	; 0xe421
   15f28:	movw	r2, #1156	; 0x484
   15f2c:	movt	r0, #3
   15f30:	movt	r1, #3
   15f34:	movt	r3, #3
   15f38:	bl	12bbc <__assert_fail@plt>
   15f3c:	movw	r0, #60281	; 0xeb79
   15f40:	movw	r1, #58394	; 0xe41a
   15f44:	movw	r3, #58401	; 0xe421
   15f48:	mov	r2, #1216	; 0x4c0
   15f4c:	movt	r0, #3
   15f50:	movt	r1, #3
   15f54:	movt	r3, #3
   15f58:	bl	12bbc <__assert_fail@plt>
   15f5c:	movw	r0, #58476	; 0xe46c
   15f60:	movw	r1, #58394	; 0xe41a
   15f64:	movw	r3, #58401	; 0xe421
   15f68:	movw	r2, #1164	; 0x48c
   15f6c:	movt	r0, #3
   15f70:	movt	r1, #3
   15f74:	movt	r3, #3
   15f78:	bl	12bbc <__assert_fail@plt>
   15f7c:	movw	r0, #58451	; 0xe453
   15f80:	movw	r1, #58394	; 0xe41a
   15f84:	movw	r3, #58401	; 0xe421
   15f88:	movw	r2, #1163	; 0x48b
   15f8c:	movt	r0, #3
   15f90:	movt	r1, #3
   15f94:	movt	r3, #3
   15f98:	bl	12bbc <__assert_fail@plt>
   15f9c:	movw	r0, #58500	; 0xe484
   15fa0:	movw	r1, #58394	; 0xe41a
   15fa4:	movw	r3, #58401	; 0xe421
   15fa8:	movw	r2, #1169	; 0x491
   15fac:	movt	r0, #3
   15fb0:	movt	r1, #3
   15fb4:	movt	r3, #3
   15fb8:	bl	12bbc <__assert_fail@plt>
   15fbc:	movw	r0, #58543	; 0xe4af
   15fc0:	movw	r1, #58394	; 0xe41a
   15fc4:	movw	r3, #58401	; 0xe421
   15fc8:	movw	r2, #1180	; 0x49c
   15fcc:	movt	r0, #3
   15fd0:	movt	r1, #3
   15fd4:	movt	r3, #3
   15fd8:	bl	12bbc <__assert_fail@plt>
   15fdc:	movw	r0, #58522	; 0xe49a
   15fe0:	movw	r1, #58394	; 0xe41a
   15fe4:	movw	r3, #58401	; 0xe421
   15fe8:	movw	r2, #1181	; 0x49d
   15fec:	movt	r0, #3
   15ff0:	movt	r1, #3
   15ff4:	movt	r3, #3
   15ff8:	bl	12bbc <__assert_fail@plt>
   15ffc:	movw	r0, #58500	; 0xe484
   16000:	movw	r1, #58394	; 0xe41a
   16004:	movw	r3, #58401	; 0xe421
   16008:	movw	r2, #1174	; 0x496
   1600c:	movt	r0, #3
   16010:	movt	r1, #3
   16014:	movt	r3, #3
   16018:	bl	12bbc <__assert_fail@plt>
   1601c:	movw	r0, #58522	; 0xe49a
   16020:	movw	r1, #58394	; 0xe41a
   16024:	movw	r3, #58401	; 0xe421
   16028:	movw	r2, #1175	; 0x497
   1602c:	movt	r0, #3
   16030:	movt	r1, #3
   16034:	movt	r3, #3
   16038:	bl	12bbc <__assert_fail@plt>
   1603c:	movw	r0, #60281	; 0xeb79
   16040:	movw	r1, #58394	; 0xe41a
   16044:	movw	r3, #58401	; 0xe421
   16048:	movw	r2, #1204	; 0x4b4
   1604c:	movt	r0, #3
   16050:	movt	r1, #3
   16054:	movt	r3, #3
   16058:	bl	12bbc <__assert_fail@plt>
   1605c:	andeq	r0, r0, r0
   16060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16064:	add	fp, sp, #28
   16068:	sub	sp, sp, #28
   1606c:	mov	r6, r0
   16070:	str	r0, [sp, #24]
   16074:	mov	r4, r1
   16078:	add	r0, r1, r2, lsl #2
   1607c:	movw	r1, #17804	; 0x458c
   16080:	movw	r7, #17812	; 0x4594
   16084:	str	r2, [sp, #16]
   16088:	movt	r1, #5
   1608c:	movt	r7, #5
   16090:	cmp	r6, r2
   16094:	str	r0, [r1]
   16098:	mov	r0, #0
   1609c:	str	r0, [r7]
   160a0:	ble	160e0 <__assert_fail@plt+0x3524>
   160a4:	movw	r8, #17800	; 0x4588
   160a8:	mov	r5, r2
   160ac:	movt	r8, #5
   160b0:	ldr	r0, [r4, r5, lsl #2]
   160b4:	mov	r1, #1
   160b8:	bl	18934 <__assert_fail@plt+0x5d78>
   160bc:	cmp	r0, #0
   160c0:	bne	160e0 <__assert_fail@plt+0x3524>
   160c4:	ldr	r0, [r8]
   160c8:	add	r5, r5, #1
   160cc:	cmp	r5, r6
   160d0:	str	r5, [sp, #16]
   160d4:	add	r0, r0, #1
   160d8:	str	r0, [r8]
   160dc:	blt	160b0 <__assert_fail@plt+0x34f4>
   160e0:	movw	r8, #5107	; 0x13f3
   160e4:	movt	r8, #4
   160e8:	mov	r0, r8
   160ec:	bl	1b23c <__assert_fail@plt+0x8680>
   160f0:	mov	r6, r0
   160f4:	movw	r0, #60361	; 0xebc9
   160f8:	movt	r0, #3
   160fc:	bl	1b23c <__assert_fail@plt+0x8680>
   16100:	mov	r5, r0
   16104:	movw	r0, #58872	; 0xe5f8
   16108:	movt	r0, #3
   1610c:	bl	1b23c <__assert_fail@plt+0x8680>
   16110:	cmp	r6, #0
   16114:	beq	1657c <__assert_fail@plt+0x39c0>
   16118:	cmp	r5, #0
   1611c:	beq	1659c <__assert_fail@plt+0x39e0>
   16120:	cmp	r0, #0
   16124:	str	r5, [sp, #8]
   16128:	str	r0, [sp, #12]
   1612c:	beq	165bc <__assert_fail@plt+0x3a00>
   16130:	add	r2, sp, #24
   16134:	mov	r0, r6
   16138:	mov	r1, r4
   1613c:	bl	1b3dc <__assert_fail@plt+0x8820>
   16140:	movw	sl, #17816	; 0x4598
   16144:	mov	r0, #1
   16148:	movt	sl, #5
   1614c:	ldr	r2, [sl]
   16150:	str	r8, [r2, #4]
   16154:	ldr	r3, [r7]
   16158:	strb	r0, [r3, #33]	; 0x21
   1615c:	mov	r0, r4
   16160:	ldr	r1, [sp, #24]
   16164:	bl	1b224 <__assert_fail@plt+0x8668>
   16168:	ldr	r0, [sl]
   1616c:	bl	15378 <__assert_fail@plt+0x27bc>
   16170:	ldr	r1, [sp, #24]
   16174:	ldr	r0, [sp, #16]
   16178:	cmp	r0, r1
   1617c:	bge	16228 <__assert_fail@plt+0x366c>
   16180:	mov	r8, #0
   16184:	movw	r1, #20056	; 0x4e58
   16188:	movt	r1, #5
   1618c:	strb	r8, [r1, #40]	; 0x28
   16190:	mov	r1, #0
   16194:	ldr	r0, [r4, r0, lsl #2]
   16198:	bl	18934 <__assert_fail@plt+0x5d78>
   1619c:	cmp	r0, #0
   161a0:	beq	16474 <__assert_fail@plt+0x38b8>
   161a4:	ldr	r0, [sp, #16]
   161a8:	ldr	r6, [r4, r0, lsl #2]
   161ac:	mov	r0, r6
   161b0:	bl	1b23c <__assert_fail@plt+0x8680>
   161b4:	cmp	r0, #0
   161b8:	beq	16508 <__assert_fail@plt+0x394c>
   161bc:	mov	r5, r0
   161c0:	ldr	r0, [r0]
   161c4:	ldr	r9, [sp, #16]
   161c8:	mov	r1, r4
   161cc:	add	r2, sp, #16
   161d0:	cmp	r0, #4
   161d4:	mov	r0, r5
   161d8:	addne	r9, r9, #1
   161dc:	strne	r9, [sp, #16]
   161e0:	ldr	r3, [r5, #8]
   161e4:	blx	r3
   161e8:	cmp	r0, #0
   161ec:	beq	164ec <__assert_fail@plt+0x3930>
   161f0:	ldr	r0, [sl]
   161f4:	str	r6, [r0, #4]
   161f8:	ldr	r1, [sp, #16]
   161fc:	cmp	r1, r9
   16200:	streq	r8, [r0, #36]	; 0x24
   16204:	ldrne	r1, [r4, r9, lsl #2]
   16208:	strne	r1, [r0, #36]	; 0x24
   1620c:	bl	15378 <__assert_fail@plt+0x27bc>
   16210:	ldr	r0, [r7]
   16214:	bl	15378 <__assert_fail@plt+0x27bc>
   16218:	ldr	r1, [sp, #24]
   1621c:	ldr	r0, [sp, #16]
   16220:	cmp	r0, r1
   16224:	blt	16184 <__assert_fail@plt+0x35c8>
   16228:	ldr	r3, [r7]
   1622c:	ldr	r2, [sl]
   16230:	mov	r0, r4
   16234:	bl	1b238 <__assert_fail@plt+0x867c>
   16238:	ldr	r0, [r7]
   1623c:	ldr	r1, [r0, #152]	; 0x98
   16240:	cmp	r1, #0
   16244:	beq	162a4 <__assert_fail@plt+0x36e8>
   16248:	mov	r0, r1
   1624c:	bl	18908 <__assert_fail@plt+0x5d4c>
   16250:	cmp	r0, #0
   16254:	beq	162e4 <__assert_fail@plt+0x3728>
   16258:	ldr	r0, [sp, #8]
   1625c:	add	r8, sp, #24
   16260:	mov	r1, r4
   16264:	mov	r2, r8
   16268:	bl	1b3ac <__assert_fail@plt+0x87f0>
   1626c:	ldr	r0, [sl]
   16270:	movw	r1, #60361	; 0xebc9
   16274:	mov	r6, #1
   16278:	movt	r1, #3
   1627c:	strb	r6, [r0, #33]	; 0x21
   16280:	str	r1, [r0, #4]
   16284:	bl	15378 <__assert_fail@plt+0x27bc>
   16288:	ldr	r0, [sp, #12]
   1628c:	mov	r1, r4
   16290:	mov	r2, r8
   16294:	bl	1b410 <__assert_fail@plt+0x8854>
   16298:	ldr	r0, [sl]
   1629c:	strb	r6, [r0, #33]	; 0x21
   162a0:	b	162c8 <__assert_fail@plt+0x370c>
   162a4:	str	r1, [sl]
   162a8:	str	r1, [r7]
   162ac:	str	r0, [sp, #20]
   162b0:	bl	2c048 <__assert_fail@plt+0x1948c>
   162b4:	ldr	r0, [sp, #12]
   162b8:	add	r2, sp, #24
   162bc:	mov	r1, r4
   162c0:	bl	1b410 <__assert_fail@plt+0x8854>
   162c4:	ldr	r0, [sl]
   162c8:	movw	r1, #58871	; 0xe5f7
   162cc:	movt	r1, #3
   162d0:	str	r1, [r0, #4]
   162d4:	bl	15378 <__assert_fail@plt+0x27bc>
   162d8:	ldr	r0, [r7]
   162dc:	bl	15378 <__assert_fail@plt+0x27bc>
   162e0:	b	16300 <__assert_fail@plt+0x3744>
   162e4:	ldr	r0, [r7]
   162e8:	str	r0, [sp, #20]
   162ec:	ldr	r0, [r0, #152]	; 0x98
   162f0:	str	r0, [r7]
   162f4:	bl	15378 <__assert_fail@plt+0x27bc>
   162f8:	ldr	r0, [sp, #20]
   162fc:	bl	2c048 <__assert_fail@plt+0x1948c>
   16300:	movw	r5, #20100	; 0x4e84
   16304:	movt	r5, #5
   16308:	ldrb	r0, [r5, #44]	; 0x2c
   1630c:	tst	r0, #9
   16310:	bne	163ac <__assert_fail@plt+0x37f0>
   16314:	ldr	r0, [r7]
   16318:	bl	1b038 <__assert_fail@plt+0x847c>
   1631c:	ldr	r0, [r7]
   16320:	bl	15378 <__assert_fail@plt+0x27bc>
   16324:	ldr	r0, [r7]
   16328:	mov	r1, #0
   1632c:	mov	r2, #0
   16330:	str	r0, [sp, #20]
   16334:	add	r0, sp, #20
   16338:	bl	16650 <__assert_fail@plt+0x3a94>
   1633c:	movw	r4, #17808	; 0x4590
   16340:	movt	r4, #5
   16344:	str	r0, [r4]
   16348:	bl	15d90 <__assert_fail@plt+0x31d4>
   1634c:	ldr	r0, [sp, #20]
   16350:	cmp	r0, #0
   16354:	bne	165dc <__assert_fail@plt+0x3a20>
   16358:	ldrb	r0, [r5, #44]	; 0x2c
   1635c:	tst	r0, #9
   16360:	bne	163dc <__assert_fail@plt+0x3820>
   16364:	ldr	r0, [r4]
   16368:	bl	16c78 <__assert_fail@plt+0x40bc>
   1636c:	mov	r0, r4
   16370:	bl	16e80 <__assert_fail@plt+0x42c4>
   16374:	ldr	r0, [r4]
   16378:	mov	r1, #1
   1637c:	bl	1733c <__assert_fail@plt+0x4780>
   16380:	ldr	r0, [r4]
   16384:	bl	173cc <__assert_fail@plt+0x4810>
   16388:	ldr	r0, [r4]
   1638c:	mov	r1, #1
   16390:	bl	1733c <__assert_fail@plt+0x4780>
   16394:	ldrb	r0, [r5, #44]	; 0x2c
   16398:	tst	r0, #9
   1639c:	bne	16410 <__assert_fail@plt+0x3854>
   163a0:	ldr	r0, [r4]
   163a4:	sub	sp, fp, #28
   163a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163ac:	movw	r4, #17760	; 0x4560
   163b0:	movw	r0, #58878	; 0xe5fe
   163b4:	mov	r1, #16
   163b8:	mov	r2, #1
   163bc:	movt	r4, #5
   163c0:	movt	r0, #3
   163c4:	ldr	r3, [r4]
   163c8:	bl	12700 <fwrite@plt>
   163cc:	ldr	r0, [r4]
   163d0:	ldr	r1, [r7]
   163d4:	bl	15084 <__assert_fail@plt+0x24c8>
   163d8:	b	16314 <__assert_fail@plt+0x3758>
   163dc:	movw	r6, #17760	; 0x4560
   163e0:	movw	r0, #60374	; 0xebd6
   163e4:	mov	r1, #11
   163e8:	mov	r2, #1
   163ec:	movt	r6, #5
   163f0:	movt	r0, #3
   163f4:	ldr	r3, [r6]
   163f8:	bl	12700 <fwrite@plt>
   163fc:	ldr	r0, [r6]
   16400:	ldr	r1, [r4]
   16404:	mov	r2, #0
   16408:	bl	168f4 <__assert_fail@plt+0x3d38>
   1640c:	b	16364 <__assert_fail@plt+0x37a8>
   16410:	movw	r5, #17760	; 0x4560
   16414:	movw	r0, #58954	; 0xe64a
   16418:	mov	r1, #21
   1641c:	mov	r2, #1
   16420:	movt	r5, #5
   16424:	movt	r0, #3
   16428:	ldr	r3, [r5]
   1642c:	bl	12700 <fwrite@plt>
   16430:	ldr	r0, [r5]
   16434:	ldr	r1, [r4]
   16438:	mov	r2, #0
   1643c:	bl	168f4 <__assert_fail@plt+0x3d38>
   16440:	ldr	r3, [r5]
   16444:	movw	r0, #58976	; 0xe660
   16448:	mov	r1, #24
   1644c:	mov	r2, #1
   16450:	movt	r0, #3
   16454:	bl	12700 <fwrite@plt>
   16458:	ldr	r0, [r5]
   1645c:	ldr	r1, [r4]
   16460:	bl	15140 <__assert_fail@plt+0x2584>
   16464:	ldr	r1, [r5]
   16468:	mov	r0, #10
   1646c:	bl	12a3c <fputc@plt>
   16470:	b	163a0 <__assert_fail@plt+0x37e4>
   16474:	movw	r1, #58686	; 0xe53e
   16478:	mov	r0, #0
   1647c:	mov	r2, #5
   16480:	movt	r1, #3
   16484:	bl	1264c <dcgettext@plt>
   16488:	mov	r2, r0
   1648c:	ldr	r0, [sp, #16]
   16490:	mov	r1, #0
   16494:	ldr	r3, [r4, r0, lsl #2]
   16498:	mov	r0, #0
   1649c:	bl	12790 <error@plt>
   164a0:	ldr	r0, [sp, #16]
   164a4:	mov	r1, #0
   164a8:	ldr	r0, [r4, r0, lsl #2]
   164ac:	bl	12994 <access@plt>
   164b0:	cmp	r0, #0
   164b4:	bne	164e4 <__assert_fail@plt+0x3928>
   164b8:	movw	r1, #58722	; 0xe562
   164bc:	mov	r0, #0
   164c0:	mov	r2, #5
   164c4:	movt	r1, #3
   164c8:	bl	1264c <dcgettext@plt>
   164cc:	mov	r2, r0
   164d0:	ldr	r0, [sl]
   164d4:	mov	r1, #0
   164d8:	ldr	r3, [r0, #4]
   164dc:	mov	r0, #0
   164e0:	bl	12790 <error@plt>
   164e4:	mov	r0, #1
   164e8:	bl	1285c <exit@plt>
   164ec:	ldr	r0, [sp, #16]
   164f0:	ldr	r1, [r4, r0, lsl #2]
   164f4:	cmp	r1, #0
   164f8:	bne	16530 <__assert_fail@plt+0x3974>
   164fc:	movw	r1, #58846	; 0xe5de
   16500:	movt	r1, #3
   16504:	b	16510 <__assert_fail@plt+0x3954>
   16508:	movw	r1, #58770	; 0xe592
   1650c:	movt	r1, #3
   16510:	mov	r0, #0
   16514:	mov	r2, #5
   16518:	bl	1264c <dcgettext@plt>
   1651c:	mov	r2, r0
   16520:	mov	r0, #1
   16524:	mov	r1, #0
   16528:	mov	r3, r6
   1652c:	bl	12790 <error@plt>
   16530:	cmp	r0, r9
   16534:	ldreq	r0, [r5]
   16538:	cmpeq	r0, #4
   1653c:	beq	16570 <__assert_fail@plt+0x39b4>
   16540:	movw	r1, #58816	; 0xe5c0
   16544:	mov	r0, #0
   16548:	mov	r2, #5
   1654c:	movt	r1, #3
   16550:	bl	1264c <dcgettext@plt>
   16554:	mov	r2, r0
   16558:	ldr	r0, [sp, #16]
   1655c:	ldr	r3, [r4, r0, lsl #2]
   16560:	str	r6, [sp]
   16564:	mov	r0, #1
   16568:	mov	r1, #0
   1656c:	bl	12790 <error@plt>
   16570:	movw	r1, #58793	; 0xe5a9
   16574:	movt	r1, #3
   16578:	b	16510 <__assert_fail@plt+0x3954>
   1657c:	movw	r0, #58568	; 0xe4c8
   16580:	movw	r1, #58394	; 0xe41a
   16584:	movw	r3, #58587	; 0xe4db
   16588:	movw	r2, #1270	; 0x4f6
   1658c:	movt	r0, #3
   16590:	movt	r1, #3
   16594:	movt	r3, #3
   16598:	bl	12bbc <__assert_fail@plt>
   1659c:	movw	r0, #58646	; 0xe516
   165a0:	movw	r1, #58394	; 0xe41a
   165a4:	movw	r3, #58587	; 0xe4db
   165a8:	movw	r2, #1271	; 0x4f7
   165ac:	movt	r0, #3
   165b0:	movt	r1, #3
   165b4:	movt	r3, #3
   165b8:	bl	12bbc <__assert_fail@plt>
   165bc:	movw	r0, #58666	; 0xe52a
   165c0:	movw	r1, #58394	; 0xe41a
   165c4:	movw	r3, #58587	; 0xe4db
   165c8:	movw	r2, #1272	; 0x4f8
   165cc:	movt	r0, #3
   165d0:	movt	r1, #3
   165d4:	movt	r3, #3
   165d8:	bl	12bbc <__assert_fail@plt>
   165dc:	ldr	r1, [r0]
   165e0:	movw	r2, #16000	; 0x3e80
   165e4:	movt	r2, #1
   165e8:	cmp	r1, r2
   165ec:	bne	165fc <__assert_fail@plt+0x3a40>
   165f0:	movw	r1, #59784	; 0xe988
   165f4:	movt	r1, #3
   165f8:	b	16610 <__assert_fail@plt+0x3a54>
   165fc:	ldr	r0, [r0, #4]
   16600:	cmp	r0, #0
   16604:	bne	1662c <__assert_fail@plt+0x3a70>
   16608:	movw	r1, #58927	; 0xe62f
   1660c:	movt	r1, #3
   16610:	mov	r0, #0
   16614:	mov	r2, #5
   16618:	bl	1264c <dcgettext@plt>
   1661c:	mov	r2, r0
   16620:	mov	r0, #1
   16624:	mov	r1, #0
   16628:	bl	12790 <error@plt>
   1662c:	movw	r1, #58895	; 0xe60f
   16630:	mov	r0, #0
   16634:	mov	r2, #5
   16638:	movt	r1, #3
   1663c:	bl	1264c <dcgettext@plt>
   16640:	mov	r2, r0
   16644:	ldr	r0, [sp, #20]
   16648:	ldr	r3, [r0, #4]
   1664c:	b	16564 <__assert_fail@plt+0x39a8>
   16650:	push	{r4, r5, r6, r7, fp, lr}
   16654:	add	fp, sp, #16
   16658:	ldr	r4, [r0]
   1665c:	cmp	r4, #0
   16660:	beq	167b4 <__assert_fail@plt+0x3bf8>
   16664:	mov	r5, r0
   16668:	ldr	r0, [r4, #8]
   1666c:	cmp	r0, #5
   16670:	bhi	167d8 <__assert_fail@plt+0x3c1c>
   16674:	mov	r6, r1
   16678:	add	r1, pc, #0
   1667c:	ldr	pc, [r1, r0, lsl #2]
   16680:			; <UNDEFINED> instruction: 0x000167b4
   16684:	muleq	r1, r8, r6
   16688:	andeq	r6, r1, r0, lsr #13
   1668c:	strdeq	r6, [r1], -ip
   16690:	andeq	r6, r1, r4, asr #13
   16694:	andeq	r6, r1, r4, ror #15
   16698:	ldr	r2, [r4, #152]	; 0x98
   1669c:	b	1671c <__assert_fail@plt+0x3b60>
   166a0:	ldr	r0, [r4, #152]	; 0x98
   166a4:	mov	r1, #4
   166a8:	mov	r2, r4
   166ac:	str	r0, [r5]
   166b0:	mov	r0, r5
   166b4:	bl	16650 <__assert_fail@plt+0x3a94>
   166b8:	str	r0, [r4, #160]	; 0xa0
   166bc:	ldr	r2, [r5]
   166c0:	b	16720 <__assert_fail@plt+0x3b64>
   166c4:	ldr	r0, [r4, #152]	; 0x98
   166c8:	cmp	r0, #0
   166cc:	beq	16808 <__assert_fail@plt+0x3c4c>
   166d0:	ldrb	r1, [r0, #33]	; 0x21
   166d4:	cmp	r1, #0
   166d8:	bne	16808 <__assert_fail@plt+0x3c4c>
   166dc:	str	r0, [r5]
   166e0:	ldr	r0, [r0, #8]
   166e4:	cmp	r0, #5
   166e8:	beq	16888 <__assert_fail@plt+0x3ccc>
   166ec:	mov	r0, r5
   166f0:	mov	r1, #0
   166f4:	mov	r2, r4
   166f8:	bl	16650 <__assert_fail@plt+0x3a94>
   166fc:	mov	r4, r0
   16700:	ldr	r0, [r5]
   16704:	cmp	r0, #0
   16708:	beq	16830 <__assert_fail@plt+0x3c74>
   1670c:	ldr	r1, [r0, #8]
   16710:	cmp	r1, #5
   16714:	bne	16830 <__assert_fail@plt+0x3c74>
   16718:	ldr	r2, [r0, #152]	; 0x98
   1671c:	str	r2, [r5]
   16720:	cmp	r2, #0
   16724:	beq	167ac <__assert_fail@plt+0x3bf0>
   16728:	ldr	r0, [r2, #12]
   1672c:	cmp	r0, r6
   16730:	ble	167ac <__assert_fail@plt+0x3bf0>
   16734:	ldr	r0, [r2, #8]
   16738:	cmp	r0, #5
   1673c:	beq	167b4 <__assert_fail@plt+0x3bf8>
   16740:	ldr	r0, [r2, #12]
   16744:	cmp	r0, r6
   16748:	ble	167a4 <__assert_fail@plt+0x3be8>
   1674c:	ldr	r0, [r2, #8]
   16750:	cmp	r0, #5
   16754:	bhi	1683c <__assert_fail@plt+0x3c80>
   16758:	add	r1, pc, #0
   1675c:	ldr	pc, [r1, r0, lsl #2]
   16760:			; <UNDEFINED> instruction: 0x000167b4
   16764:			; <UNDEFINED> instruction: 0x000167b4
   16768:			; <UNDEFINED> instruction: 0x000167b4
   1676c:	andeq	r6, r1, r8, ror r7
   16770:			; <UNDEFINED> instruction: 0x000167b4
   16774:	andeq	r6, r1, r4, lsr #15
   16778:	str	r4, [r2, #156]	; 0x9c
   1677c:	ldr	r4, [r5]
   16780:	ldr	r0, [r4, #152]	; 0x98
   16784:	str	r0, [r5]
   16788:	mov	r0, r5
   1678c:	ldrsh	r1, [r4, #12]
   16790:	bl	16650 <__assert_fail@plt+0x3a94>
   16794:	str	r0, [r4, #160]	; 0xa0
   16798:	ldr	r2, [r5]
   1679c:	cmp	r2, #0
   167a0:	bne	16740 <__assert_fail@plt+0x3b84>
   167a4:	cmp	r4, #0
   167a8:	beq	167b4 <__assert_fail@plt+0x3bf8>
   167ac:	mov	r0, r4
   167b0:	pop	{r4, r5, r6, r7, fp, pc}
   167b4:	movw	r1, #59513	; 0xe879
   167b8:	movt	r1, #3
   167bc:	mov	r0, #0
   167c0:	mov	r2, #5
   167c4:	bl	1264c <dcgettext@plt>
   167c8:	mov	r2, r0
   167cc:	mov	r0, #1
   167d0:	mov	r1, #0
   167d4:	bl	12790 <error@plt>
   167d8:	movw	r1, #60052	; 0xea94
   167dc:	movt	r1, #3
   167e0:	b	167bc <__assert_fail@plt+0x3c00>
   167e4:	mov	r7, r2
   167e8:	cmp	r2, #0
   167ec:	bne	16860 <__assert_fail@plt+0x3ca4>
   167f0:	movw	r1, #59613	; 0xe8dd
   167f4:	movt	r1, #3
   167f8:	b	16810 <__assert_fail@plt+0x3c54>
   167fc:	movw	r1, #59532	; 0xe88c
   16800:	movt	r1, #3
   16804:	b	16810 <__assert_fail@plt+0x3c54>
   16808:	movw	r1, #59806	; 0xe99e
   1680c:	movt	r1, #3
   16810:	mov	r0, #0
   16814:	mov	r2, #5
   16818:	bl	1264c <dcgettext@plt>
   1681c:	ldr	r3, [r4, #4]
   16820:	mov	r2, r0
   16824:	mov	r0, #1
   16828:	mov	r1, #0
   1682c:	bl	12790 <error@plt>
   16830:	movw	r1, #59971	; 0xea43
   16834:	movt	r1, #3
   16838:	b	167bc <__assert_fail@plt+0x3c00>
   1683c:	movw	r1, #60085	; 0xeab5
   16840:	mov	r0, #0
   16844:	mov	r2, #5
   16848:	movt	r1, #3
   1684c:	bl	1264c <dcgettext@plt>
   16850:	mov	r2, r0
   16854:	ldr	r0, [r5]
   16858:	ldr	r3, [r0, #8]
   1685c:	b	16824 <__assert_fail@plt+0x3c68>
   16860:	ldr	r1, [r7, #8]
   16864:	ldrb	r0, [r4, #33]	; 0x21
   16868:	bic	r1, r1, #1
   1686c:	cmp	r1, #2
   16870:	bne	168a0 <__assert_fail@plt+0x3ce4>
   16874:	cmp	r0, #0
   16878:	bne	168b4 <__assert_fail@plt+0x3cf8>
   1687c:	movw	r1, #59686	; 0xe926
   16880:	movt	r1, #3
   16884:	b	168bc <__assert_fail@plt+0x3d00>
   16888:	ldrb	r0, [r4, #33]	; 0x21
   1688c:	cmp	r0, #0
   16890:	bne	168d0 <__assert_fail@plt+0x3d14>
   16894:	movw	r1, #59916	; 0xea0c
   16898:	movt	r1, #3
   1689c:	b	167bc <__assert_fail@plt+0x3c00>
   168a0:	cmp	r0, #0
   168a4:	bne	168b4 <__assert_fail@plt+0x3cf8>
   168a8:	movw	r1, #59764	; 0xe974
   168ac:	movt	r1, #3
   168b0:	b	167bc <__assert_fail@plt+0x3c00>
   168b4:	movw	r1, #59730	; 0xe952
   168b8:	movt	r1, #3
   168bc:	mov	r0, #0
   168c0:	mov	r2, #5
   168c4:	bl	1264c <dcgettext@plt>
   168c8:	ldr	r3, [r7, #4]
   168cc:	b	16820 <__assert_fail@plt+0x3c64>
   168d0:	movw	r1, #59613	; 0xe8dd
   168d4:	mov	r0, #0
   168d8:	mov	r2, #5
   168dc:	movt	r1, #3
   168e0:	bl	1264c <dcgettext@plt>
   168e4:	mov	r2, r0
   168e8:	ldr	r0, [r5]
   168ec:	ldr	r3, [r0, #4]
   168f0:	b	16824 <__assert_fail@plt+0x3c68>
   168f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168f8:	add	fp, sp, #28
   168fc:	sub	sp, sp, #12
   16900:	cmp	r1, #0
   16904:	beq	16c40 <__assert_fail@plt+0x4084>
   16908:	movw	sl, #59357	; 0xe7dd
   1690c:	movw	r7, #61072	; 0xee90
   16910:	mov	r5, r2
   16914:	mov	r8, r1
   16918:	mov	r4, r0
   1691c:	movt	sl, #3
   16920:	movt	r7, #3
   16924:	cmp	r5, #1
   16928:	blt	16950 <__assert_fail@plt+0x3d94>
   1692c:	mov	r6, #0
   16930:	mov	r0, sl
   16934:	mov	r1, #4
   16938:	mov	r2, #1
   1693c:	mov	r3, r4
   16940:	bl	12700 <fwrite@plt>
   16944:	add	r6, r6, #1
   16948:	cmp	r5, r6
   1694c:	bne	16930 <__assert_fail@plt+0x3d74>
   16950:	movw	r0, #59362	; 0xe7e2
   16954:	mov	r1, #6
   16958:	mov	r2, #1
   1695c:	mov	r3, r4
   16960:	movt	r0, #3
   16964:	bl	12700 <fwrite@plt>
   16968:	mov	r0, r4
   1696c:	mov	r1, r8
   16970:	bl	15d50 <__assert_fail@plt+0x3194>
   16974:	ldr	r1, [r8, #8]
   16978:	mov	r0, #0
   1697c:	mov	r2, r7
   16980:	ldrh	r3, [r2]
   16984:	uxth	r6, r1
   16988:	cmp	r3, r6
   1698c:	beq	169a4 <__assert_fail@plt+0x3de8>
   16990:	add	r0, r0, #1
   16994:	add	r2, r2, #8
   16998:	cmp	r0, #6
   1699c:	bne	16980 <__assert_fail@plt+0x3dc4>
   169a0:	mov	r0, #6
   169a4:	add	r0, r7, r0, lsl #3
   169a8:	ldr	r1, [r8, #12]
   169ac:	movw	r3, #61128	; 0xeec8
   169b0:	mov	r9, r7
   169b4:	ldr	r2, [r0, #4]
   169b8:	mov	r0, #0
   169bc:	movt	r3, #3
   169c0:	ldrh	r6, [r3]
   169c4:	uxth	r7, r1
   169c8:	cmp	r6, r7
   169cc:	beq	169e4 <__assert_fail@plt+0x3e28>
   169d0:	add	r0, r0, #1
   169d4:	add	r3, r3, #8
   169d8:	cmp	r0, #6
   169dc:	bne	169c0 <__assert_fail@plt+0x3e04>
   169e0:	mov	r0, #6
   169e4:	movw	r1, #61128	; 0xeec8
   169e8:	movw	r6, #17068	; 0x42ac
   169ec:	movt	r1, #3
   169f0:	movt	r6, #5
   169f4:	add	r0, r1, r0, lsl #3
   169f8:	movw	r1, #59369	; 0xe7e9
   169fc:	ldr	r3, [r0, #4]
   16a00:	mov	r0, r4
   16a04:	movt	r1, #3
   16a08:	bl	128c8 <fprintf@plt>
   16a0c:	ldr	r1, [r8, #24]
   16a10:	mov	r0, #0
   16a14:	ldr	r2, [r6, r0, lsl #3]
   16a18:	cmp	r2, r1
   16a1c:	beq	16a38 <__assert_fail@plt+0x3e7c>
   16a20:	add	r0, r0, #1
   16a24:	cmp	r0, #11
   16a28:	bcc	16a14 <__assert_fail@plt+0x3e58>
   16a2c:	movw	r2, #61036	; 0xee6c
   16a30:	movt	r2, #3
   16a34:	b	16a40 <__assert_fail@plt+0x3e84>
   16a38:	add	r0, r6, r0, lsl #3
   16a3c:	ldr	r2, [r0, #4]
   16a40:	ldrb	r0, [r8, #16]
   16a44:	movw	r6, #63055	; 0xf64f
   16a48:	vldr	s0, [r8, #28]
   16a4c:	movw	r1, #59435	; 0xe82b
   16a50:	mov	r7, r9
   16a54:	movt	r6, #3
   16a58:	movt	r1, #3
   16a5c:	cmp	r0, #0
   16a60:	mov	r0, r6
   16a64:	vcvt.f64.f32	d16, s0
   16a68:	moveq	r0, r1
   16a6c:	movw	r1, #59387	; 0xe7fb
   16a70:	vstr	d16, [sp]
   16a74:	str	r0, [sp, #8]
   16a78:	mov	r0, r4
   16a7c:	movt	r1, #3
   16a80:	bl	128c8 <fprintf@plt>
   16a84:	ldrb	r0, [r8, #18]
   16a88:	cmp	r0, #0
   16a8c:	bne	16aa8 <__assert_fail@plt+0x3eec>
   16a90:	ldrb	r0, [r8, #19]
   16a94:	cmp	r0, #0
   16a98:	bne	16aa8 <__assert_fail@plt+0x3eec>
   16a9c:	ldrb	r0, [r8, #20]
   16aa0:	cmp	r0, #0
   16aa4:	beq	16b4c <__assert_fail@plt+0x3f90>
   16aa8:	movw	r0, #59439	; 0xe82f
   16aac:	mov	r1, #6
   16ab0:	mov	r2, #1
   16ab4:	mov	r3, r4
   16ab8:	movt	r0, #3
   16abc:	bl	12700 <fwrite@plt>
   16ac0:	ldrb	r0, [r8, #18]
   16ac4:	cmp	r0, #0
   16ac8:	beq	16aec <__assert_fail@plt+0x3f30>
   16acc:	movw	r0, #1652	; 0x674
   16ad0:	mov	r1, #4
   16ad4:	mov	r2, #1
   16ad8:	mov	r3, r4
   16adc:	mov	r9, #1
   16ae0:	movt	r0, #4
   16ae4:	bl	12700 <fwrite@plt>
   16ae8:	b	16af0 <__assert_fail@plt+0x3f34>
   16aec:	mov	r9, #0
   16af0:	ldrb	r0, [r8, #20]
   16af4:	cmp	r0, #0
   16af8:	beq	16b20 <__assert_fail@plt+0x3f64>
   16afc:	movw	r2, #59454	; 0xe83e
   16b00:	movw	r1, #59446	; 0xe836
   16b04:	cmp	r9, #0
   16b08:	mov	r0, r4
   16b0c:	movt	r2, #3
   16b10:	movt	r1, #3
   16b14:	moveq	r2, r6
   16b18:	bl	128c8 <fprintf@plt>
   16b1c:	mov	r9, #1
   16b20:	ldrb	r0, [r8, #19]
   16b24:	cmp	r0, #0
   16b28:	beq	16b4c <__assert_fail@plt+0x3f90>
   16b2c:	movw	r2, #59454	; 0xe83e
   16b30:	movw	r1, #59456	; 0xe840
   16b34:	cmp	r9, #0
   16b38:	mov	r0, r4
   16b3c:	movt	r2, #3
   16b40:	movt	r1, #3
   16b44:	moveq	r2, r6
   16b48:	bl	128c8 <fprintf@plt>
   16b4c:	mov	r0, #10
   16b50:	mov	r1, r4
   16b54:	bl	12a3c <fputc@plt>
   16b58:	cmp	r5, #1
   16b5c:	blt	16b84 <__assert_fail@plt+0x3fc8>
   16b60:	mov	r6, #0
   16b64:	mov	r0, sl
   16b68:	mov	r1, #4
   16b6c:	mov	r2, #1
   16b70:	mov	r3, r4
   16b74:	bl	12700 <fwrite@plt>
   16b78:	add	r6, r6, #1
   16b7c:	cmp	r5, r6
   16b80:	bne	16b64 <__assert_fail@plt+0x3fa8>
   16b84:	ldr	r0, [r8, #156]	; 0x9c
   16b88:	cmp	r0, #0
   16b8c:	beq	16bbc <__assert_fail@plt+0x4000>
   16b90:	movw	r0, #59477	; 0xe855
   16b94:	mov	r1, #6
   16b98:	mov	r2, #1
   16b9c:	mov	r3, r4
   16ba0:	movt	r0, #3
   16ba4:	bl	12700 <fwrite@plt>
   16ba8:	ldr	r1, [r8, #156]	; 0x9c
   16bac:	add	r2, r5, #1
   16bb0:	mov	r0, r4
   16bb4:	bl	168f4 <__assert_fail@plt+0x3d38>
   16bb8:	b	16be0 <__assert_fail@plt+0x4024>
   16bbc:	ldr	r0, [r8, #160]	; 0xa0
   16bc0:	cmp	r0, #0
   16bc4:	beq	16c58 <__assert_fail@plt+0x409c>
   16bc8:	movw	r0, #59484	; 0xe85c
   16bcc:	mov	r1, #9
   16bd0:	mov	r2, #1
   16bd4:	mov	r3, r4
   16bd8:	movt	r0, #3
   16bdc:	bl	12700 <fwrite@plt>
   16be0:	cmp	r5, #1
   16be4:	blt	16c0c <__assert_fail@plt+0x4050>
   16be8:	mov	r6, #0
   16bec:	mov	r0, sl
   16bf0:	mov	r1, #4
   16bf4:	mov	r2, #1
   16bf8:	mov	r3, r4
   16bfc:	bl	12700 <fwrite@plt>
   16c00:	add	r6, r6, #1
   16c04:	cmp	r5, r6
   16c08:	bne	16bec <__assert_fail@plt+0x4030>
   16c0c:	ldr	r0, [r8, #160]	; 0xa0
   16c10:	cmp	r0, #0
   16c14:	beq	16c48 <__assert_fail@plt+0x408c>
   16c18:	movw	r0, #59494	; 0xe866
   16c1c:	mov	r1, #7
   16c20:	mov	r2, #1
   16c24:	mov	r3, r4
   16c28:	movt	r0, #3
   16c2c:	bl	12700 <fwrite@plt>
   16c30:	ldr	r8, [r8, #160]	; 0xa0
   16c34:	add	r5, r5, #1
   16c38:	cmp	r8, #0
   16c3c:	bne	16924 <__assert_fail@plt+0x3d68>
   16c40:	sub	sp, fp, #28
   16c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c48:	movw	r0, #59502	; 0xe86e
   16c4c:	mov	r1, #10
   16c50:	movt	r0, #3
   16c54:	b	16c64 <__assert_fail@plt+0x40a8>
   16c58:	movw	r0, #59463	; 0xe847
   16c5c:	mov	r1, #13
   16c60:	movt	r0, #3
   16c64:	mov	r2, #1
   16c68:	mov	r3, r4
   16c6c:	sub	sp, fp, #28
   16c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c74:	b	12700 <fwrite@plt>
   16c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c7c:	add	fp, sp, #28
   16c80:	sub	sp, sp, #20
   16c84:	cmp	r0, #0
   16c88:	beq	16e44 <__assert_fail@plt+0x4288>
   16c8c:	mov	r4, r0
   16c90:	ldr	r0, [r0, #160]	; 0xa0
   16c94:	bl	16c78 <__assert_fail@plt+0x40bc>
   16c98:	ldr	r0, [r4, #156]	; 0x9c
   16c9c:	bl	16c78 <__assert_fail@plt+0x40bc>
   16ca0:	ldrb	r0, [r4, #18]
   16ca4:	mov	r5, #3
   16ca8:	cmp	r0, #0
   16cac:	bne	16ccc <__assert_fail@plt+0x4110>
   16cb0:	ldrb	r0, [r4, #20]
   16cb4:	mov	r5, #1
   16cb8:	cmp	r0, #0
   16cbc:	bne	16ccc <__assert_fail@plt+0x4110>
   16cc0:	ldrb	r5, [r4, #19]
   16cc4:	cmp	r5, #0
   16cc8:	movwne	r5, #2
   16ccc:	ldr	r0, [r4]
   16cd0:	movw	r1, #16920	; 0x4218
   16cd4:	movt	r1, #1
   16cd8:	cmp	r0, r1
   16cdc:	movwne	r1, #16924	; 0x421c
   16ce0:	movtne	r1, #1
   16ce4:	cmpne	r0, r1
   16ce8:	bne	16d00 <__assert_fail@plt+0x4144>
   16cec:	ldrb	r1, [r4, #40]	; 0x28
   16cf0:	mov	r0, #7
   16cf4:	cmp	r1, #0
   16cf8:	movweq	r0, #8
   16cfc:	b	16e38 <__assert_fail@plt+0x427c>
   16d00:	movw	r1, #39904	; 0x9be0
   16d04:	movt	r1, #1
   16d08:	cmp	r0, r1
   16d0c:	beq	16e04 <__assert_fail@plt+0x4248>
   16d10:	movw	r1, #17824	; 0x45a0
   16d14:	movt	r1, #5
   16d18:	ldrb	r1, [r1]
   16d1c:	cmp	r1, #0
   16d20:	bne	16dcc <__assert_fail@plt+0x4210>
   16d24:	movw	sl, #17156	; 0x4304
   16d28:	movw	r3, #30768	; 0x7830
   16d2c:	mov	r1, #59	; 0x3b
   16d30:	mov	r2, #8
   16d34:	str	r5, [sp, #4]
   16d38:	movt	sl, #5
   16d3c:	movt	r3, #1
   16d40:	mov	r0, sl
   16d44:	bl	12ac0 <qsort@plt>
   16d48:	mov	r5, #0
   16d4c:	add	r6, sp, #8
   16d50:	add	r7, sp, #16
   16d54:	mov	r0, sl
   16d58:	mov	r1, r7
   16d5c:	mov	r2, #4
   16d60:	ldr	r9, [r0, r5, lsl #3]!
   16d64:	ldr	r8, [r0, #8]
   16d68:	mov	r0, r6
   16d6c:	str	r9, [sp, #16]
   16d70:	str	r8, [sp, #8]
   16d74:	bl	12628 <memcmp@plt>
   16d78:	cmp	r0, #0
   16d7c:	blt	16e4c <__assert_fail@plt+0x4290>
   16d80:	mov	r0, r6
   16d84:	mov	r1, r7
   16d88:	mov	r2, #4
   16d8c:	str	r8, [sp, #16]
   16d90:	str	r9, [sp, #8]
   16d94:	bl	12628 <memcmp@plt>
   16d98:	cmp	r0, #1
   16d9c:	bge	16e60 <__assert_fail@plt+0x42a4>
   16da0:	add	r1, r5, #2
   16da4:	add	r0, r5, #1
   16da8:	cmp	r1, #58	; 0x3a
   16dac:	mov	r5, r0
   16db0:	bls	16d54 <__assert_fail@plt+0x4198>
   16db4:	movw	r1, #17824	; 0x45a0
   16db8:	mov	r0, #1
   16dbc:	ldr	r5, [sp, #4]
   16dc0:	movt	r1, #5
   16dc4:	strb	r0, [r1]
   16dc8:	ldr	r0, [r4]
   16dcc:	str	r0, [sp, #8]
   16dd0:	movw	r0, #30768	; 0x7830
   16dd4:	movw	r1, #17156	; 0x4304
   16dd8:	mov	r2, #59	; 0x3b
   16ddc:	mov	r3, #8
   16de0:	movt	r0, #1
   16de4:	movt	r1, #5
   16de8:	str	r0, [sp]
   16dec:	add	r0, sp, #8
   16df0:	bl	12910 <bsearch@plt>
   16df4:	cmp	r0, #0
   16df8:	beq	16e0c <__assert_fail@plt+0x4250>
   16dfc:	ldr	r0, [r0, #4]
   16e00:	b	16e38 <__assert_fail@plt+0x427c>
   16e04:	ldr	r0, [r4, #24]
   16e08:	b	16e38 <__assert_fail@plt+0x427c>
   16e0c:	movw	r1, #60159	; 0xeaff
   16e10:	mov	r0, #0
   16e14:	mov	r2, #5
   16e18:	movt	r1, #3
   16e1c:	bl	1264c <dcgettext@plt>
   16e20:	ldr	r3, [r4, #4]
   16e24:	mov	r2, r0
   16e28:	mov	r0, #0
   16e2c:	mov	r1, #0
   16e30:	bl	12790 <error@plt>
   16e34:	mov	r0, #10
   16e38:	cmp	r0, r5
   16e3c:	movhi	r5, r0
   16e40:	str	r5, [r4, #24]
   16e44:	sub	sp, fp, #28
   16e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e4c:	movw	r2, #60123	; 0xeadb
   16e50:	mov	r0, #1
   16e54:	mov	r1, #0
   16e58:	movt	r2, #3
   16e5c:	bl	12790 <error@plt>
   16e60:	movw	r0, #60271	; 0xeb6f
   16e64:	movw	r1, #58394	; 0xe41a
   16e68:	movw	r3, #60283	; 0xeb7b
   16e6c:	movw	r2, #1013	; 0x3f5
   16e70:	movt	r0, #3
   16e74:	movt	r1, #3
   16e78:	movt	r3, #3
   16e7c:	bl	12bbc <__assert_fail@plt>
   16e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e84:	add	fp, sp, #28
   16e88:	sub	sp, sp, #124	; 0x7c
   16e8c:	mov	r4, #0
   16e90:	cmp	r0, #0
   16e94:	str	r4, [fp, #-36]	; 0xffffffdc
   16e98:	str	r4, [fp, #-40]	; 0xffffffd8
   16e9c:	str	r4, [fp, #-44]	; 0xffffffd4
   16ea0:	str	r4, [fp, #-48]	; 0xffffffd0
   16ea4:	beq	172d0 <__assert_fail@plt+0x4714>
   16ea8:	ldr	r5, [r0]
   16eac:	mov	r7, r0
   16eb0:	cmp	r5, #0
   16eb4:	beq	172d0 <__assert_fail@plt+0x4714>
   16eb8:	add	r0, sp, #16
   16ebc:	mov	r1, #0
   16ec0:	mov	r2, #88	; 0x58
   16ec4:	str	r0, [sp, #4]
   16ec8:	bl	12904 <memset@plt>
   16ecc:	mov	r0, r5
   16ed0:	ldr	r1, [r0, #156]!	; 0x9c
   16ed4:	cmp	r1, #0
   16ed8:	beq	16f00 <__assert_fail@plt+0x4344>
   16edc:	mov	r2, r0
   16ee0:	mov	r0, r1
   16ee4:	mov	r3, r5
   16ee8:	mov	r5, r1
   16eec:	ldr	r1, [r0, #156]!	; 0x9c
   16ef0:	cmp	r1, #0
   16ef4:	bne	16edc <__assert_fail@plt+0x4320>
   16ef8:	ldr	r1, [r3, #12]
   16efc:	b	16f08 <__assert_fail@plt+0x434c>
   16f00:	mov	r1, #3
   16f04:	mov	r2, r7
   16f08:	ldr	r0, [r5, #8]
   16f0c:	cmp	r0, #3
   16f10:	movne	r0, r5
   16f14:	blne	17864 <__assert_fail@plt+0x4ca8>
   16f18:	movw	r4, #20100	; 0x4e84
   16f1c:	movt	r4, #5
   16f20:	ldrb	r0, [r4, #44]	; 0x2c
   16f24:	tst	r0, #9
   16f28:	bne	172dc <__assert_fail@plt+0x4720>
   16f2c:	ldr	r0, [r7]
   16f30:	cmp	r0, #0
   16f34:	beq	172a0 <__assert_fail@plt+0x46e4>
   16f38:	ldr	r1, [r0, #8]
   16f3c:	mov	r3, #0
   16f40:	mov	r9, #0
   16f44:	mov	sl, #0
   16f48:	cmp	r1, #3
   16f4c:	mov	r1, #0
   16f50:	ldreq	r3, [r0, #12]
   16f54:	str	r1, [sp, #8]
   16f58:	str	r3, [sp, #12]
   16f5c:	mov	r8, r0
   16f60:	ldr	r0, [r8, #8]
   16f64:	cmp	r0, #3
   16f68:	bne	16f90 <__assert_fail@plt+0x43d4>
   16f6c:	ldr	r0, [r8, #12]
   16f70:	cmp	r0, r3
   16f74:	beq	16f90 <__assert_fail@plt+0x43d4>
   16f78:	mov	r0, r8
   16f7c:	mov	r1, r3
   16f80:	mov	r2, r7
   16f84:	bl	17864 <__assert_fail@plt+0x4ca8>
   16f88:	ldr	r3, [sp, #12]
   16f8c:	mov	r8, r0
   16f90:	mov	r5, r8
   16f94:	ldr	r1, [r5, #160]!	; 0xa0
   16f98:	ldr	r0, [r1, #8]
   16f9c:	cmp	r0, #2
   16fa0:	bcs	17218 <__assert_fail@plt+0x465c>
   16fa4:	ldrb	r0, [r1, #16]
   16fa8:	cmp	r3, #1
   16fac:	beq	17294 <__assert_fail@plt+0x46d8>
   16fb0:	cmp	r0, #0
   16fb4:	bne	17290 <__assert_fail@plt+0x46d4>
   16fb8:	ldr	r0, [r1]
   16fbc:	movw	r2, #17704	; 0x4528
   16fc0:	movt	r2, #1
   16fc4:	cmp	r0, r2
   16fc8:	movwne	r2, #17488	; 0x4450
   16fcc:	movtne	r2, #1
   16fd0:	cmpne	r0, r2
   16fd4:	beq	16ff4 <__assert_fail@plt+0x4438>
   16fd8:	movw	r2, #17984	; 0x4640
   16fdc:	movt	r2, #1
   16fe0:	cmp	r0, r2
   16fe4:	movwne	r2, #18812	; 0x497c
   16fe8:	movtne	r2, #1
   16fec:	cmpne	r0, r2
   16ff0:	bne	1702c <__assert_fail@plt+0x4470>
   16ff4:	ldrb	r0, [r4, #44]	; 0x2c
   16ff8:	tst	r0, #8
   16ffc:	bne	17140 <__assert_fail@plt+0x4584>
   17000:	ldr	r0, [r8, #156]	; 0x9c
   17004:	cmp	r9, #0
   17008:	moveq	r9, r8
   1700c:	str	r0, [r7]
   17010:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17014:	str	r0, [r8, #156]	; 0x9c
   17018:	str	r8, [fp, #-48]	; 0xffffffd0
   1701c:	ldr	r8, [r7]
   17020:	cmp	r8, #0
   17024:	bne	16f60 <__assert_fail@plt+0x43a4>
   17028:	b	172b0 <__assert_fail@plt+0x46f4>
   1702c:	ldrh	r2, [r4, #68]	; 0x44
   17030:	cmp	r2, #0
   17034:	beq	17080 <__assert_fail@plt+0x44c4>
   17038:	movw	r6, #18736	; 0x4930
   1703c:	movt	r6, #1
   17040:	cmp	r0, r6
   17044:	movwne	r6, #16104	; 0x3ee8
   17048:	movtne	r6, #1
   1704c:	cmpne	r0, r6
   17050:	beq	17080 <__assert_fail@plt+0x44c4>
   17054:	movw	r6, #15728	; 0x3d70
   17058:	movt	r6, #1
   1705c:	cmp	r0, r6
   17060:	movwne	r6, #17996	; 0x464c
   17064:	movtne	r6, #1
   17068:	cmpne	r0, r6
   1706c:	beq	17080 <__assert_fail@plt+0x44c4>
   17070:	ldr	r3, [r1, #24]
   17074:	cmp	r3, #0
   17078:	ldr	r3, [sp, #12]
   1707c:	beq	16ff4 <__assert_fail@plt+0x4438>
   17080:	movw	r6, #19356	; 0x4b9c
   17084:	movt	r6, #1
   17088:	cmp	r0, r6
   1708c:	beq	170cc <__assert_fail@plt+0x4510>
   17090:	mov	r0, #0
   17094:	cmp	r2, #2
   17098:	bcc	17294 <__assert_fail@plt+0x46d8>
   1709c:	ldr	r3, [r1, #24]
   170a0:	sub	r6, r3, #1
   170a4:	cmp	r6, #1
   170a8:	bhi	170ec <__assert_fail@plt+0x4530>
   170ac:	movw	r4, #20100	; 0x4e84
   170b0:	cmp	r2, #2
   170b4:	movt	r4, #5
   170b8:	bhi	170fc <__assert_fail@plt+0x4540>
   170bc:	ldrb	r1, [r1, #18]
   170c0:	cmp	r1, #0
   170c4:	beq	170fc <__assert_fail@plt+0x4540>
   170c8:	b	17294 <__assert_fail@plt+0x46d8>
   170cc:	ldr	r0, [r8, #156]	; 0x9c
   170d0:	cmp	sl, #0
   170d4:	moveq	sl, r8
   170d8:	str	r0, [r7]
   170dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   170e0:	str	r0, [r8, #156]	; 0x9c
   170e4:	str	r8, [fp, #-40]	; 0xffffffd8
   170e8:	b	1701c <__assert_fail@plt+0x4460>
   170ec:	movw	r4, #20100	; 0x4e84
   170f0:	cmp	r2, #3
   170f4:	movt	r4, #5
   170f8:	bcc	17294 <__assert_fail@plt+0x46d8>
   170fc:	ldrb	r0, [r4, #44]	; 0x2c
   17100:	tst	r0, #8
   17104:	bne	1718c <__assert_fail@plt+0x45d0>
   17108:	ldr	r0, [r8, #156]	; 0x9c
   1710c:	str	r0, [r7]
   17110:	add	r0, sp, #16
   17114:	mov	r1, r0
   17118:	ldr	r0, [r0, r3, lsl #3]
   1711c:	str	r0, [r8, #156]	; 0x9c
   17120:	str	r8, [r1, r3, lsl #3]
   17124:	add	r0, r1, r3, lsl #3
   17128:	ldr	r3, [sp, #12]
   1712c:	ldr	r1, [r0, #4]
   17130:	cmp	r1, #0
   17134:	orreq	r0, r0, #4
   17138:	streq	r8, [r0]
   1713c:	b	1701c <__assert_fail@plt+0x4460>
   17140:	movw	r0, #17760	; 0x4560
   17144:	ldrh	r2, [r4, #68]	; 0x44
   17148:	movw	r1, #60386	; 0xebe2
   1714c:	movt	r0, #5
   17150:	movt	r1, #3
   17154:	mov	r6, r0
   17158:	ldr	r0, [r0]
   1715c:	bl	128c8 <fprintf@plt>
   17160:	ldr	r0, [r6]
   17164:	ldr	r1, [r5]
   17168:	bl	15d50 <__assert_fail@plt+0x3194>
   1716c:	ldr	r3, [r6]
   17170:	movw	r0, #60419	; 0xec03
   17174:	mov	r1, #16
   17178:	mov	r2, #1
   1717c:	movt	r0, #3
   17180:	bl	12700 <fwrite@plt>
   17184:	ldr	r3, [sp, #12]
   17188:	b	17000 <__assert_fail@plt+0x4444>
   1718c:	movw	r0, #17760	; 0x4560
   17190:	movw	r1, #60436	; 0xec14
   17194:	movt	r0, #5
   17198:	movt	r1, #3
   1719c:	mov	r6, r0
   171a0:	ldr	r0, [r0]
   171a4:	bl	128c8 <fprintf@plt>
   171a8:	ldr	r0, [r6]
   171ac:	ldr	r1, [r5]
   171b0:	bl	15d50 <__assert_fail@plt+0x3194>
   171b4:	ldr	r1, [r5]
   171b8:	ldr	r0, [r6]
   171bc:	ldr	r2, [r1, #24]
   171c0:	mov	r1, #0
   171c4:	movw	r3, #17068	; 0x42ac
   171c8:	movt	r3, #5
   171cc:	ldr	r3, [r3, r1, lsl #3]
   171d0:	cmp	r3, r2
   171d4:	beq	171f0 <__assert_fail@plt+0x4634>
   171d8:	add	r1, r1, #1
   171dc:	cmp	r1, #11
   171e0:	bcc	171c4 <__assert_fail@plt+0x4608>
   171e4:	movw	r2, #61036	; 0xee6c
   171e8:	movt	r2, #3
   171ec:	b	17200 <__assert_fail@plt+0x4644>
   171f0:	movw	r2, #17068	; 0x42ac
   171f4:	movt	r2, #5
   171f8:	add	r1, r2, r1, lsl #3
   171fc:	ldr	r2, [r1, #4]
   17200:	movw	r1, #60466	; 0xec32
   17204:	movt	r1, #3
   17208:	bl	128c8 <fprintf@plt>
   1720c:	ldr	r0, [r5]
   17210:	ldr	r3, [r0, #24]
   17214:	b	17108 <__assert_fail@plt+0x454c>
   17218:	beq	17234 <__assert_fail@plt+0x4678>
   1721c:	cmp	r0, #3
   17220:	bne	17318 <__assert_fail@plt+0x475c>
   17224:	str	r9, [fp, #-44]	; 0xffffffd4
   17228:	str	sl, [fp, #-36]	; 0xffffffdc
   1722c:	mov	r0, r5
   17230:	b	17240 <__assert_fail@plt+0x4684>
   17234:	add	r0, r1, #160	; 0xa0
   17238:	str	r9, [fp, #-44]	; 0xffffffd4
   1723c:	str	sl, [fp, #-36]	; 0xffffffdc
   17240:	bl	16e80 <__assert_fail@plt+0x42c4>
   17244:	ldr	r1, [r5]
   17248:	strb	r0, [r1, #16]
   1724c:	cmp	r0, #0
   17250:	beq	17270 <__assert_fail@plt+0x46b4>
   17254:	add	r0, sp, #16
   17258:	sub	r1, fp, #48	; 0x30
   1725c:	sub	r2, fp, #40	; 0x28
   17260:	mov	r3, r7
   17264:	bl	17924 <__assert_fail@plt+0x4d68>
   17268:	mov	r0, #1
   1726c:	str	r0, [sp, #8]
   17270:	ldr	r0, [r8, #156]!	; 0x9c
   17274:	cmp	r0, #0
   17278:	beq	172a8 <__assert_fail@plt+0x46ec>
   1727c:	ldr	r9, [fp, #-44]	; 0xffffffd4
   17280:	ldr	sl, [fp, #-36]	; 0xffffffdc
   17284:	ldr	r3, [sp, #12]
   17288:	mov	r7, r8
   1728c:	b	16f5c <__assert_fail@plt+0x43a0>
   17290:	mov	r0, #1
   17294:	str	r9, [fp, #-44]	; 0xffffffd4
   17298:	str	sl, [fp, #-36]	; 0xffffffdc
   1729c:	b	1724c <__assert_fail@plt+0x4690>
   172a0:	mov	r4, #0
   172a4:	b	172bc <__assert_fail@plt+0x4700>
   172a8:	mov	r7, r8
   172ac:	b	172b8 <__assert_fail@plt+0x46fc>
   172b0:	str	r9, [fp, #-44]	; 0xffffffd4
   172b4:	str	sl, [fp, #-36]	; 0xffffffdc
   172b8:	ldr	r4, [sp, #8]
   172bc:	ldr	r0, [sp, #4]
   172c0:	sub	r1, fp, #48	; 0x30
   172c4:	sub	r2, fp, #40	; 0x28
   172c8:	mov	r3, r7
   172cc:	bl	17924 <__assert_fail@plt+0x4d68>
   172d0:	and	r0, r4, #1
   172d4:	sub	sp, fp, #28
   172d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172dc:	movw	r4, #17760	; 0x4560
   172e0:	movw	r0, #60363	; 0xebcb
   172e4:	mov	r1, #22
   172e8:	mov	r2, #1
   172ec:	movt	r4, #5
   172f0:	movt	r0, #3
   172f4:	ldr	r3, [r4]
   172f8:	bl	12700 <fwrite@plt>
   172fc:	ldr	r0, [r4]
   17300:	ldr	r1, [r7]
   17304:	movw	r4, #20100	; 0x4e84
   17308:	mov	r2, #0
   1730c:	movt	r4, #5
   17310:	bl	168f4 <__assert_fail@plt+0x3d38>
   17314:	b	16f2c <__assert_fail@plt+0x4370>
   17318:	movw	r1, #60052	; 0xea94
   1731c:	mov	r0, #0
   17320:	mov	r2, #5
   17324:	movt	r1, #3
   17328:	bl	1264c <dcgettext@plt>
   1732c:	mov	r2, r0
   17330:	mov	r0, #1
   17334:	mov	r1, #0
   17338:	bl	12790 <error@plt>
   1733c:	push	{r4, sl, fp, lr}
   17340:	add	fp, sp, #8
   17344:	mov	r4, r0
   17348:	b	1737c <__assert_fail@plt+0x47c0>
   1734c:	ldr	r0, [r4, #156]	; 0x9c
   17350:	cmp	r0, #0
   17354:	beq	1736c <__assert_fail@plt+0x47b0>
   17358:	ldr	r1, [r0, #8]
   1735c:	cmp	r1, #3
   17360:	bne	173ac <__assert_fail@plt+0x47f0>
   17364:	mov	r1, #0
   17368:	bl	1733c <__assert_fail@plt+0x4780>
   1736c:	ldr	r4, [r4, #160]	; 0xa0
   17370:	mov	r1, #0
   17374:	cmp	r4, #0
   17378:	popeq	{r4, sl, fp, pc}
   1737c:	tst	r1, #1
   17380:	ldrne	r0, [r4, #8]
   17384:	cmpne	r0, #3
   17388:	beq	1734c <__assert_fail@plt+0x4790>
   1738c:	movw	r0, #60542	; 0xec7e
   17390:	movw	r1, #58394	; 0xe41a
   17394:	movw	r3, #60561	; 0xec91
   17398:	movw	r2, #1230	; 0x4ce
   1739c:	movt	r0, #3
   173a0:	movt	r1, #3
   173a4:	movt	r3, #3
   173a8:	bl	12bbc <__assert_fail@plt>
   173ac:	movw	r0, #60613	; 0xecc5
   173b0:	movw	r1, #58394	; 0xe41a
   173b4:	movw	r3, #60561	; 0xec91
   173b8:	movw	r2, #1235	; 0x4d3
   173bc:	movt	r0, #3
   173c0:	movt	r1, #3
   173c4:	movt	r3, #3
   173c8:	bl	12bbc <__assert_fail@plt>
   173cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173d0:	add	fp, sp, #28
   173d4:	sub	sp, sp, #4
   173d8:	vpush	{d8-d9}
   173dc:	sub	sp, sp, #8
   173e0:	cmp	r0, #0
   173e4:	beq	1760c <__assert_fail@plt+0x4a50>
   173e8:	movw	r8, #60643	; 0xece3
   173ec:	movw	sl, #20100	; 0x4e84
   173f0:	movw	r9, #18736	; 0x4930
   173f4:	mov	r4, r0
   173f8:	movt	r8, #3
   173fc:	movt	sl, #5
   17400:	movt	r9, #1
   17404:	b	17438 <__assert_fail@plt+0x487c>
   17408:	movw	r0, #17760	; 0x4560
   1740c:	movw	r1, #60953	; 0xee19
   17410:	movt	r0, #5
   17414:	movt	r1, #3
   17418:	mov	r5, r0
   1741c:	ldr	r0, [r0]
   17420:	bl	128c8 <fprintf@plt>
   17424:	ldr	r0, [r5]
   17428:	mov	r1, r4
   1742c:	mov	r2, #0
   17430:	bl	168f4 <__assert_fail@plt+0x3d38>
   17434:	b	175f8 <__assert_fail@plt+0x4a3c>
   17438:	ldr	r0, [r4, #8]
   1743c:	mov	r2, r8
   17440:	cmp	r0, #3
   17444:	bne	175ec <__assert_fail@plt+0x4a30>
   17448:	ldr	r0, [r4, #156]	; 0x9c
   1744c:	b	174b4 <__assert_fail@plt+0x48f8>
   17450:	movw	r0, #17760	; 0x4560
   17454:	mov	r1, #24
   17458:	mov	r2, #1
   1745c:	movt	r0, #5
   17460:	ldr	r3, [r0]
   17464:	mov	r5, r0
   17468:	movw	r0, #60928	; 0xee00
   1746c:	movt	r0, #3
   17470:	bl	12700 <fwrite@plt>
   17474:	ldr	r0, [r5]
   17478:	mov	r1, r4
   1747c:	mov	r2, #0
   17480:	bl	168f4 <__assert_fail@plt+0x3d38>
   17484:	b	17568 <__assert_fail@plt+0x49ac>
   17488:	movw	r0, #17760	; 0x4560
   1748c:	movw	r1, #60794	; 0xed7a
   17490:	vcvt.f64.f32	d17, s18
   17494:	vcvt.f64.f32	d16, s16
   17498:	movt	r0, #5
   1749c:	vmov	r2, r3, d17
   174a0:	movt	r1, #3
   174a4:	vstr	d16, [sp]
   174a8:	ldr	r0, [r0]
   174ac:	bl	128c8 <fprintf@plt>
   174b0:	b	17524 <__assert_fail@plt+0x4968>
   174b4:	cmp	r0, #0
   174b8:	ldrne	r5, [r4, #160]	; 0xa0
   174bc:	cmpne	r5, #0
   174c0:	beq	17590 <__assert_fail@plt+0x49d4>
   174c4:	ldr	r7, [r0, #160]	; 0xa0
   174c8:	cmp	r7, #0
   174cc:	beq	1759c <__assert_fail@plt+0x49e0>
   174d0:	mov	r0, r7
   174d4:	bl	17b20 <__assert_fail@plt+0x4f64>
   174d8:	cmp	r0, #0
   174dc:	bne	175a8 <__assert_fail@plt+0x49ec>
   174e0:	mov	r0, r5
   174e4:	bl	17b20 <__assert_fail@plt+0x4f64>
   174e8:	cmp	r0, #0
   174ec:	bne	175b4 <__assert_fail@plt+0x49f8>
   174f0:	mov	r0, r7
   174f4:	bl	17b6c <__assert_fail@plt+0x4fb0>
   174f8:	mov	r6, r0
   174fc:	mov	r0, r5
   17500:	bl	17b6c <__assert_fail@plt+0x4fb0>
   17504:	cmp	r6, r0
   17508:	blt	175c0 <__assert_fail@plt+0x4a04>
   1750c:	bne	1755c <__assert_fail@plt+0x49a0>
   17510:	ldrb	r0, [sl, #44]	; 0x2c
   17514:	vldr	s16, [r5, #28]
   17518:	vldr	s18, [r7, #28]
   1751c:	tst	r0, #8
   17520:	bne	17488 <__assert_fail@plt+0x48cc>
   17524:	ldr	r0, [r4]
   17528:	cmp	r0, r9
   1752c:	beq	17550 <__assert_fail@plt+0x4994>
   17530:	movw	r1, #15728	; 0x3d70
   17534:	movt	r1, #1
   17538:	cmp	r0, r1
   1753c:	bne	175cc <__assert_fail@plt+0x4a10>
   17540:	vcmpe.f32	s16, s18
   17544:	vmrs	APSR_nzcv, fpscr
   17548:	bgt	1755c <__assert_fail@plt+0x49a0>
   1754c:	b	175d8 <__assert_fail@plt+0x4a1c>
   17550:	vcmpe.f32	s16, s18
   17554:	vmrs	APSR_nzcv, fpscr
   17558:	bpl	175e4 <__assert_fail@plt+0x4a28>
   1755c:	ldrb	r0, [sl, #44]	; 0x2c
   17560:	tst	r0, #8
   17564:	bne	17450 <__assert_fail@plt+0x4894>
   17568:	ldr	r0, [r4, #156]	; 0x9c
   1756c:	ldr	r1, [r4, #160]	; 0xa0
   17570:	ldr	r2, [r0, #160]	; 0xa0
   17574:	str	r1, [r0, #160]	; 0xa0
   17578:	str	r2, [r4, #160]	; 0xa0
   1757c:	ldr	r1, [r4, #8]
   17580:	cmp	r1, #3
   17584:	beq	174b4 <__assert_fail@plt+0x48f8>
   17588:	mov	r2, r8
   1758c:	b	175ec <__assert_fail@plt+0x4a30>
   17590:	movw	r2, #60666	; 0xecfa
   17594:	movt	r2, #3
   17598:	b	175ec <__assert_fail@plt+0x4a30>
   1759c:	movw	r2, #60688	; 0xed10
   175a0:	movt	r2, #3
   175a4:	b	175ec <__assert_fail@plt+0x4a30>
   175a8:	movw	r2, #60717	; 0xed2d
   175ac:	movt	r2, #3
   175b0:	b	175ec <__assert_fail@plt+0x4a30>
   175b4:	movw	r2, #60747	; 0xed4b
   175b8:	movt	r2, #3
   175bc:	b	175ec <__assert_fail@plt+0x4a30>
   175c0:	movw	r2, #60778	; 0xed6a
   175c4:	movt	r2, #3
   175c8:	b	175ec <__assert_fail@plt+0x4a30>
   175cc:	movw	r2, #60910	; 0xedee
   175d0:	movt	r2, #3
   175d4:	b	175ec <__assert_fail@plt+0x4a30>
   175d8:	movw	r2, #60865	; 0xedc1
   175dc:	movt	r2, #3
   175e0:	b	175ec <__assert_fail@plt+0x4a30>
   175e4:	movw	r2, #60821	; 0xed95
   175e8:	movt	r2, #3
   175ec:	ldrb	r0, [sl, #44]	; 0x2c
   175f0:	tst	r0, #8
   175f4:	bne	17408 <__assert_fail@plt+0x484c>
   175f8:	ldr	r0, [r4, #156]	; 0x9c
   175fc:	bl	173cc <__assert_fail@plt+0x4810>
   17600:	ldr	r4, [r4, #160]	; 0xa0
   17604:	cmp	r4, #0
   17608:	bne	17438 <__assert_fail@plt+0x487c>
   1760c:	sub	sp, fp, #48	; 0x30
   17610:	vpop	{d8-d9}
   17614:	add	sp, sp, #4
   17618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1761c:	push	{fp, lr}
   17620:	mov	fp, sp
   17624:	bl	17638 <__assert_fail@plt+0x4a7c>
   17628:	cmp	r0, #0
   1762c:	movne	r1, #0
   17630:	strne	r1, [r0, #36]	; 0x24
   17634:	pop	{fp, pc}
   17638:	push	{r4, r5, fp, lr}
   1763c:	add	fp, sp, #8
   17640:	mov	r4, r0
   17644:	ldr	r0, [r0]
   17648:	cmp	r0, #2
   1764c:	beq	176e8 <__assert_fail@plt+0x4b2c>
   17650:	cmp	r0, #0
   17654:	beq	17708 <__assert_fail@plt+0x4b4c>
   17658:	mov	r0, #176	; 0xb0
   1765c:	bl	2acc8 <__assert_fail@plt+0x1810c>
   17660:	movw	r1, #17812	; 0x4594
   17664:	movt	r1, #5
   17668:	ldr	r2, [r1]
   1766c:	cmp	r2, #0
   17670:	beq	17688 <__assert_fail@plt+0x4acc>
   17674:	movw	r1, #17816	; 0x4598
   17678:	movt	r1, #5
   1767c:	ldr	r1, [r1]
   17680:	str	r0, [r1, #152]	; 0x98
   17684:	b	1768c <__assert_fail@plt+0x4ad0>
   17688:	str	r0, [r1]
   1768c:	movw	r1, #17816	; 0x4598
   17690:	movw	r3, #59061	; 0xe6b5
   17694:	movw	r2, #257	; 0x101
   17698:	str	r4, [r0, #172]	; 0xac
   1769c:	mov	r5, #1065353216	; 0x3f800000
   176a0:	movt	r1, #5
   176a4:	movt	r3, #3
   176a8:	str	r0, [r1]
   176ac:	mov	r1, #0
   176b0:	str	r1, [r0, #8]
   176b4:	str	r1, [r0, #12]
   176b8:	strh	r2, [r0, #18]
   176bc:	str	r3, [r0, #36]	; 0x24
   176c0:	movw	r3, #20100	; 0x4e84
   176c4:	mov	r2, #10
   176c8:	movt	r3, #5
   176cc:	ldrb	r3, [r3, #15]
   176d0:	str	r2, [r0, #24]
   176d4:	str	r5, [r0, #28]
   176d8:	str	r1, [r0, #168]	; 0xa8
   176dc:	str	r1, [r0, #164]	; 0xa4
   176e0:	strb	r3, [r0, #32]
   176e4:	pop	{r4, r5, fp, pc}
   176e8:	movw	r0, #57623	; 0xe117
   176ec:	movw	r1, #58394	; 0xe41a
   176f0:	movw	r3, #59001	; 0xe679
   176f4:	movw	r2, #1486	; 0x5ce
   176f8:	movt	r0, #3
   176fc:	movt	r1, #3
   17700:	movt	r3, #3
   17704:	bl	12bbc <__assert_fail@plt>
   17708:	movw	r0, #57587	; 0xe0f3
   1770c:	movw	r1, #58394	; 0xe41a
   17710:	movw	r3, #59001	; 0xe679
   17714:	movw	r2, #1485	; 0x5cd
   17718:	movt	r0, #3
   1771c:	movt	r1, #3
   17720:	movt	r3, #3
   17724:	bl	12bbc <__assert_fail@plt>
   17728:	push	{r4, r5, r6, sl, fp, lr}
   1772c:	add	fp, sp, #16
   17730:	movw	r6, #17820	; 0x459c
   17734:	mov	r4, r0
   17738:	mov	r5, r1
   1773c:	movt	r6, #5
   17740:	ldr	r0, [r6]
   17744:	cmp	r0, #0
   17748:	bne	17764 <__assert_fail@plt+0x4ba8>
   1774c:	movw	r0, #59092	; 0xe6d4
   17750:	movt	r0, #3
   17754:	bl	1b23c <__assert_fail@plt+0x8680>
   17758:	cmp	r0, #0
   1775c:	str	r0, [r6]
   17760:	beq	17810 <__assert_fail@plt+0x4c54>
   17764:	movw	r1, #17816	; 0x4598
   17768:	movt	r1, #5
   1776c:	ldr	r1, [r1]
   17770:	cmp	r1, #0
   17774:	beq	177d8 <__assert_fail@plt+0x4c1c>
   17778:	ldr	r1, [r1, #8]
   1777c:	cmp	r1, #1
   17780:	cmpne	r1, #5
   17784:	bne	177d0 <__assert_fail@plt+0x4c14>
   17788:	bl	17638 <__assert_fail@plt+0x4a7c>
   1778c:	cmp	r0, #0
   17790:	movw	r2, #15728	; 0x3d70
   17794:	mov	r3, #3
   17798:	mov	r6, #0
   1779c:	movne	r1, #0
   177a0:	movt	r2, #1
   177a4:	strne	r1, [r0, #36]	; 0x24
   177a8:	movw	r1, #59237	; 0xe765
   177ac:	strb	r6, [r0, #20]
   177b0:	str	r6, [r0, #36]	; 0x24
   177b4:	str	r6, [r0, #40]	; 0x28
   177b8:	str	r2, [r0]
   177bc:	movt	r1, #3
   177c0:	stmib	r0, {r1, r3}
   177c4:	str	r3, [r0, #12]
   177c8:	str	r6, [r0, #16]
   177cc:	b	177d8 <__assert_fail@plt+0x4c1c>
   177d0:	cmp	r1, #0
   177d4:	beq	177ec <__assert_fail@plt+0x4c30>
   177d8:	mov	r0, r4
   177dc:	bl	17638 <__assert_fail@plt+0x4a7c>
   177e0:	str	r5, [r0, #36]	; 0x24
   177e4:	str	r4, [r0, #172]	; 0xac
   177e8:	pop	{r4, r5, r6, sl, fp, pc}
   177ec:	movw	r1, #59195	; 0xe73b
   177f0:	mov	r0, #0
   177f4:	mov	r2, #5
   177f8:	movt	r1, #3
   177fc:	bl	1264c <dcgettext@plt>
   17800:	mov	r2, r0
   17804:	mov	r0, #1
   17808:	mov	r1, #0
   1780c:	bl	12790 <error@plt>
   17810:	movw	r0, #59096	; 0xe6d8
   17814:	movw	r1, #58394	; 0xe41a
   17818:	movw	r3, #59114	; 0xe6ea
   1781c:	movw	r2, #1528	; 0x5f8
   17820:	movt	r0, #3
   17824:	movt	r1, #3
   17828:	movt	r3, #3
   1782c:	bl	12bbc <__assert_fail@plt>
   17830:	push	{fp, lr}
   17834:	mov	fp, sp
   17838:	sub	sp, sp, #8
   1783c:	ldr	r0, [r0]
   17840:	mov	r2, #4
   17844:	str	r0, [sp, #4]
   17848:	ldr	r0, [r1]
   1784c:	mov	r1, sp
   17850:	str	r0, [sp]
   17854:	add	r0, sp, #4
   17858:	bl	12628 <memcmp@plt>
   1785c:	mov	sp, fp
   17860:	pop	{fp, pc}
   17864:	push	{r4, r5, r6, r7, fp, lr}
   17868:	add	fp, sp, #16
   1786c:	mov	r5, r0
   17870:	mov	r0, #176	; 0xb0
   17874:	mov	r4, r2
   17878:	mov	r7, r1
   1787c:	bl	2acc8 <__assert_fail@plt+0x1810c>
   17880:	mov	r6, #3
   17884:	cmp	r7, #3
   17888:	mov	r1, #0
   1788c:	strd	r6, [r0, #8]
   17890:	str	r1, [r0, #24]
   17894:	beq	178c8 <__assert_fail@plt+0x4d0c>
   17898:	cmp	r7, #2
   1789c:	beq	178dc <__assert_fail@plt+0x4d20>
   178a0:	cmp	r7, #1
   178a4:	bne	17914 <__assert_fail@plt+0x4d58>
   178a8:	movw	r1, #59454	; 0xe83e
   178ac:	movw	r2, #16104	; 0x3ee8
   178b0:	vmov.f32	s0, #112	; 0x3f800000  1.0
   178b4:	movt	r2, #1
   178b8:	movt	r1, #3
   178bc:	str	r2, [r0]
   178c0:	str	r1, [r0, #4]
   178c4:	b	17910 <__assert_fail@plt+0x4d54>
   178c8:	movw	r1, #59237	; 0xe765
   178cc:	movw	r2, #15728	; 0x3d70
   178d0:	movt	r1, #3
   178d4:	movt	r2, #1
   178d8:	b	178ec <__assert_fail@plt+0x4d30>
   178dc:	movw	r1, #60481	; 0xec41
   178e0:	movw	r2, #18736	; 0x4930
   178e4:	movt	r1, #3
   178e8:	movt	r2, #1
   178ec:	str	r2, [r0]
   178f0:	str	r1, [r0, #4]
   178f4:	vldr	s0, [pc, #36]	; 17920 <__assert_fail@plt+0x4d64>
   178f8:	vmov.f32	s4, #112	; 0x3f800000  1.0
   178fc:	vldr	s2, [r5, #28]
   17900:	vcmpe.f32	s2, s4
   17904:	vmax.f32	d0, d1, d0
   17908:	vmrs	APSR_nzcv, fpscr
   1790c:	vselgt.f32	s0, s4, s0
   17910:	vstr	s0, [r0, #28]
   17914:	str	r5, [r0, #160]	; 0xa0
   17918:	str	r0, [r4]
   1791c:	pop	{r4, r5, r6, r7, fp, pc}
   17920:	andeq	r0, r0, r0
   17924:	push	{r4, r5, r6, sl, fp, lr}
   17928:	add	fp, sp, #16
   1792c:	mov	r5, r0
   17930:	mov	r0, r1
   17934:	mov	r1, r3
   17938:	mov	r4, r3
   1793c:	mov	r6, r2
   17940:	bl	17970 <__assert_fail@plt+0x4db4>
   17944:	mov	r0, r6
   17948:	mov	r1, r4
   1794c:	bl	17970 <__assert_fail@plt+0x4db4>
   17950:	mov	r6, #0
   17954:	add	r0, r5, r6
   17958:	mov	r1, r4
   1795c:	bl	17970 <__assert_fail@plt+0x4db4>
   17960:	add	r6, r6, #8
   17964:	cmp	r6, #88	; 0x58
   17968:	bne	17954 <__assert_fail@plt+0x4d98>
   1796c:	pop	{r4, r5, r6, sl, fp, pc}
   17970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17974:	add	fp, sp, #28
   17978:	sub	sp, sp, #4
   1797c:	mov	sl, r0
   17980:	ldr	r0, [r0]
   17984:	cmp	r0, #0
   17988:	beq	17aac <__assert_fail@plt+0x4ef0>
   1798c:	movw	r5, #20100	; 0x4e84
   17990:	mov	r9, r1
   17994:	movt	r5, #5
   17998:	ldrb	r1, [r5, #44]	; 0x2c
   1799c:	tst	r1, #8
   179a0:	bne	17ab4 <__assert_fail@plt+0x4ef8>
   179a4:	bl	15d90 <__assert_fail@plt+0x31d4>
   179a8:	ldr	r1, [sl]
   179ac:	cmp	r1, #0
   179b0:	beq	17a78 <__assert_fail@plt+0x4ebc>
   179b4:	mov	lr, r5
   179b8:	mov	ip, #0
   179bc:	mov	r6, #0
   179c0:	mov	r8, #0
   179c4:	ldr	r2, [r1, #156]	; 0x9c
   179c8:	cmp	r6, #0
   179cc:	str	ip, [r1, #156]	; 0x9c
   179d0:	beq	17a3c <__assert_fail@plt+0x4e80>
   179d4:	ldr	r5, [r1, #160]	; 0xa0
   179d8:	mov	r3, r6
   179dc:	ldr	r4, [r5, #24]
   179e0:	ldr	r0, [r3, #160]	; 0xa0
   179e4:	ldr	r7, [r0, #24]
   179e8:	cmp	r7, r4
   179ec:	bne	17a20 <__assert_fail@plt+0x4e64>
   179f0:	vldr	s0, [r5, #28]
   179f4:	vldr	s2, [r0, #28]
   179f8:	vcmp.f32	s2, s0
   179fc:	vmrs	APSR_nzcv, fpscr
   17a00:	beq	17a4c <__assert_fail@plt+0x4e90>
   17a04:	ldr	r0, [r3, #12]
   17a08:	vcmpe.f32	s2, s0
   17a0c:	cmp	r0, #2
   17a10:	bne	17a28 <__assert_fail@plt+0x4e6c>
   17a14:	vmrs	APSR_nzcv, fpscr
   17a18:	bpl	17a30 <__assert_fail@plt+0x4e74>
   17a1c:	b	17a4c <__assert_fail@plt+0x4e90>
   17a20:	bcc	17a30 <__assert_fail@plt+0x4e74>
   17a24:	b	17a4c <__assert_fail@plt+0x4e90>
   17a28:	vmrs	APSR_nzcv, fpscr
   17a2c:	bpl	17a4c <__assert_fail@plt+0x4e90>
   17a30:	ldr	r3, [r3, #156]	; 0x9c
   17a34:	cmp	r3, #0
   17a38:	bne	179e0 <__assert_fail@plt+0x4e24>
   17a3c:	cmp	r8, #0
   17a40:	str	r6, [r1, #156]	; 0x9c
   17a44:	mov	r6, r1
   17a48:	b	17a5c <__assert_fail@plt+0x4ea0>
   17a4c:	ldr	r0, [r3, #156]	; 0x9c
   17a50:	cmp	r0, #0
   17a54:	str	r0, [r1, #156]	; 0x9c
   17a58:	str	r1, [r3, #156]	; 0x9c
   17a5c:	moveq	r8, r1
   17a60:	cmp	r2, #0
   17a64:	mov	r1, r2
   17a68:	bne	179c4 <__assert_fail@plt+0x4e08>
   17a6c:	mov	r5, lr
   17a70:	str	r2, [sl]
   17a74:	b	17a80 <__assert_fail@plt+0x4ec4>
   17a78:	mov	r8, #0
   17a7c:	mov	r6, #0
   17a80:	ldrb	r0, [r5, #44]	; 0x2c
   17a84:	tst	r0, #8
   17a88:	bne	17aec <__assert_fail@plt+0x4f30>
   17a8c:	mov	r0, r6
   17a90:	bl	15d90 <__assert_fail@plt+0x31d4>
   17a94:	ldr	r0, [r9]
   17a98:	str	r0, [r8, #156]	; 0x9c
   17a9c:	mov	r0, #0
   17aa0:	str	r6, [r9]
   17aa4:	str	r0, [sl]
   17aa8:	str	r0, [sl, #4]
   17aac:	sub	sp, fp, #28
   17ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ab4:	movw	r4, #17760	; 0x4560
   17ab8:	movw	r1, #60484	; 0xec44
   17abc:	movw	r2, #60489	; 0xec49
   17ac0:	movt	r4, #5
   17ac4:	movt	r1, #3
   17ac8:	movt	r2, #3
   17acc:	ldr	r0, [r4]
   17ad0:	bl	128c8 <fprintf@plt>
   17ad4:	ldr	r0, [r4]
   17ad8:	ldr	r1, [sl]
   17adc:	mov	r2, #2
   17ae0:	bl	168f4 <__assert_fail@plt+0x3d38>
   17ae4:	ldr	r0, [sl]
   17ae8:	b	179a4 <__assert_fail@plt+0x4de8>
   17aec:	movw	r4, #17760	; 0x4560
   17af0:	movw	r1, #60484	; 0xec44
   17af4:	movw	r2, #60516	; 0xec64
   17af8:	movt	r4, #5
   17afc:	movt	r1, #3
   17b00:	movt	r2, #3
   17b04:	ldr	r0, [r4]
   17b08:	bl	128c8 <fprintf@plt>
   17b0c:	ldr	r0, [r4]
   17b10:	mov	r1, r6
   17b14:	mov	r2, #2
   17b18:	bl	168f4 <__assert_fail@plt+0x3d38>
   17b1c:	b	17a8c <__assert_fail@plt+0x4ed0>
   17b20:	push	{r4, r5, fp, lr}
   17b24:	add	fp, sp, #8
   17b28:	cmp	r0, #0
   17b2c:	beq	17b60 <__assert_fail@plt+0x4fa4>
   17b30:	mov	r4, r0
   17b34:	mov	r5, #1
   17b38:	ldrb	r0, [r4, #16]
   17b3c:	cmp	r0, #0
   17b40:	bne	17b64 <__assert_fail@plt+0x4fa8>
   17b44:	ldr	r0, [r4, #156]	; 0x9c
   17b48:	bl	17b20 <__assert_fail@plt+0x4f64>
   17b4c:	cmp	r0, #0
   17b50:	bne	17b64 <__assert_fail@plt+0x4fa8>
   17b54:	ldr	r4, [r4, #160]	; 0xa0
   17b58:	cmp	r4, #0
   17b5c:	bne	17b38 <__assert_fail@plt+0x4f7c>
   17b60:	mov	r5, #0
   17b64:	mov	r0, r5
   17b68:	pop	{r4, r5, fp, pc}
   17b6c:	cmp	r0, #0
   17b70:	moveq	r0, #0
   17b74:	bxeq	lr
   17b78:	push	{r4, r5, fp, lr}
   17b7c:	add	fp, sp, #8
   17b80:	mov	r4, r0
   17b84:	ldr	r0, [r0, #156]	; 0x9c
   17b88:	bl	17b6c <__assert_fail@plt+0x4fb0>
   17b8c:	mov	r5, r0
   17b90:	ldr	r0, [r4, #160]	; 0xa0
   17b94:	bl	17b6c <__assert_fail@plt+0x4fb0>
   17b98:	ldr	r1, [r4, #24]
   17b9c:	cmp	r5, r0
   17ba0:	movhi	r0, r5
   17ba4:	cmp	r0, r1
   17ba8:	movcc	r0, r1
   17bac:	pop	{r4, r5, fp, pc}
   17bb0:	push	{r4, r5, fp, lr}
   17bb4:	add	fp, sp, #8
   17bb8:	mov	r4, r1
   17bbc:	mov	r1, r2
   17bc0:	mov	r5, r0
   17bc4:	bl	17728 <__assert_fail@plt+0x4b6c>
   17bc8:	str	r4, [r0]
   17bcc:	mov	r2, #0
   17bd0:	mov	r3, #1
   17bd4:	ldr	r1, [r5, #4]
   17bd8:	str	r2, [r0, #40]	; 0x28
   17bdc:	str	r2, [r0, #12]
   17be0:	stmib	r0, {r1, r3}
   17be4:	pop	{r4, r5, fp, pc}
   17be8:	push	{r4, r5, fp, lr}
   17bec:	add	fp, sp, #8
   17bf0:	ldr	r5, [r0, #12]
   17bf4:	cmp	r5, #0
   17bf8:	beq	17c24 <__assert_fail@plt+0x5068>
   17bfc:	mov	r4, r0
   17c00:	bl	17728 <__assert_fail@plt+0x4b6c>
   17c04:	str	r5, [r0]
   17c08:	mov	r2, #0
   17c0c:	mov	r3, #1
   17c10:	ldr	r1, [r4, #4]
   17c14:	str	r2, [r0, #40]	; 0x28
   17c18:	str	r2, [r0, #12]
   17c1c:	stmib	r0, {r1, r3}
   17c20:	pop	{r4, r5, fp, pc}
   17c24:	movw	r0, #61184	; 0xef00
   17c28:	movw	r1, #61209	; 0xef19
   17c2c:	movw	r3, #61216	; 0xef20
   17c30:	mov	r2, #123	; 0x7b
   17c34:	movt	r0, #3
   17c38:	movt	r1, #3
   17c3c:	movt	r3, #3
   17c40:	bl	12bbc <__assert_fail@plt>
   17c44:	mov	r1, #0
   17c48:	b	17be8 <__assert_fail@plt+0x502c>
   17c4c:	push	{fp, lr}
   17c50:	mov	fp, sp
   17c54:	cmp	r0, #0
   17c58:	bne	17dc8 <__assert_fail@plt+0x520c>
   17c5c:	movw	r5, #17772	; 0x456c
   17c60:	movw	r1, #61331	; 0xef93
   17c64:	mov	r0, #0
   17c68:	mov	r2, #5
   17c6c:	movt	r5, #5
   17c70:	movt	r1, #3
   17c74:	ldr	r4, [r5]
   17c78:	bl	1264c <dcgettext@plt>
   17c7c:	movw	r6, #19740	; 0x4d1c
   17c80:	mov	r1, r0
   17c84:	mov	r0, r4
   17c88:	movt	r6, #5
   17c8c:	ldr	r2, [r6]
   17c90:	bl	128c8 <fprintf@plt>
   17c94:	movw	r1, #61405	; 0xefdd
   17c98:	mov	r0, #0
   17c9c:	mov	r2, #5
   17ca0:	movt	r1, #3
   17ca4:	bl	1264c <dcgettext@plt>
   17ca8:	ldr	r1, [r5]
   17cac:	bl	12b50 <fputs@plt>
   17cb0:	movw	r1, #61543	; 0xf067
   17cb4:	mov	r0, #0
   17cb8:	mov	r2, #5
   17cbc:	movt	r1, #3
   17cc0:	bl	1264c <dcgettext@plt>
   17cc4:	ldr	r1, [r5]
   17cc8:	bl	12b50 <fputs@plt>
   17ccc:	movw	r1, #61751	; 0xf137
   17cd0:	mov	r0, #0
   17cd4:	mov	r2, #5
   17cd8:	movt	r1, #3
   17cdc:	bl	1264c <dcgettext@plt>
   17ce0:	ldr	r1, [r5]
   17ce4:	bl	12b50 <fputs@plt>
   17ce8:	movw	r1, #61836	; 0xf18c
   17cec:	mov	r0, #0
   17cf0:	mov	r2, #5
   17cf4:	movt	r1, #3
   17cf8:	bl	1264c <dcgettext@plt>
   17cfc:	ldr	r1, [r5]
   17d00:	bl	12b50 <fputs@plt>
   17d04:	movw	r1, #62041	; 0xf259
   17d08:	mov	r0, #0
   17d0c:	mov	r2, #5
   17d10:	movt	r1, #3
   17d14:	bl	1264c <dcgettext@plt>
   17d18:	ldr	r1, [r5]
   17d1c:	bl	12b50 <fputs@plt>
   17d20:	movw	r1, #62582	; 0xf476
   17d24:	mov	r0, #0
   17d28:	mov	r2, #5
   17d2c:	movt	r1, #3
   17d30:	bl	1264c <dcgettext@plt>
   17d34:	ldr	r1, [r5]
   17d38:	bl	12b50 <fputs@plt>
   17d3c:	movw	r1, #62838	; 0xf576
   17d40:	mov	r0, #0
   17d44:	mov	r2, #5
   17d48:	movt	r1, #3
   17d4c:	bl	1264c <dcgettext@plt>
   17d50:	ldr	r1, [r5]
   17d54:	bl	12b50 <fputs@plt>
   17d58:	movw	r1, #62862	; 0xf58e
   17d5c:	mov	r0, #0
   17d60:	mov	r2, #5
   17d64:	movt	r1, #3
   17d68:	bl	1264c <dcgettext@plt>
   17d6c:	ldr	r1, [r5]
   17d70:	bl	12b50 <fputs@plt>
   17d74:	movw	r1, #62921	; 0xf5c9
   17d78:	mov	r0, #0
   17d7c:	mov	r2, #5
   17d80:	movt	r1, #3
   17d84:	bl	1264c <dcgettext@plt>
   17d88:	ldr	r1, [r5]
   17d8c:	bl	12b50 <fputs@plt>
   17d90:	mov	r0, #0
   17d94:	bl	17e0c <__assert_fail@plt+0x5250>
   17d98:	movw	r1, #62990	; 0xf60e
   17d9c:	mov	r0, #0
   17da0:	mov	r2, #5
   17da4:	movt	r1, #3
   17da8:	bl	1264c <dcgettext@plt>
   17dac:	ldr	r1, [r5]
   17db0:	bl	12b50 <fputs@plt>
   17db4:	ldr	r0, [r5]
   17db8:	ldr	r1, [r6]
   17dbc:	bl	20f90 <__assert_fail@plt+0xe3d4>
   17dc0:	mov	r0, #0
   17dc4:	bl	1285c <exit@plt>
   17dc8:	mov	r4, r0
   17dcc:	movw	r0, #17760	; 0x4560
   17dd0:	movw	r1, #61292	; 0xef6c
   17dd4:	mov	r2, #5
   17dd8:	movt	r0, #5
   17ddc:	movt	r1, #3
   17de0:	ldr	r5, [r0]
   17de4:	mov	r0, #0
   17de8:	bl	1264c <dcgettext@plt>
   17dec:	mov	r1, r0
   17df0:	movw	r0, #19740	; 0x4d1c
   17df4:	movt	r0, #5
   17df8:	ldr	r2, [r0]
   17dfc:	mov	r0, r5
   17e00:	bl	128c8 <fprintf@plt>
   17e04:	mov	r0, r4
   17e08:	bl	1285c <exit@plt>
   17e0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17e10:	add	fp, sp, #24
   17e14:	movw	r1, #63639	; 0xf897
   17e18:	mov	r4, r0
   17e1c:	mov	r0, #0
   17e20:	mov	r2, #5
   17e24:	mov	r6, #0
   17e28:	movt	r1, #3
   17e2c:	bl	1264c <dcgettext@plt>
   17e30:	movw	r5, #17772	; 0x456c
   17e34:	movt	r5, #5
   17e38:	ldr	r1, [r5]
   17e3c:	bl	12b50 <fputs@plt>
   17e40:	cmp	r4, #0
   17e44:	beq	17e80 <__assert_fail@plt+0x52c4>
   17e48:	movw	r7, #64664	; 0xfc98
   17e4c:	movw	r4, #63664	; 0xf8b0
   17e50:	movt	r7, #3
   17e54:	movt	r4, #3
   17e58:	mov	r0, r7
   17e5c:	mov	r1, r4
   17e60:	ldr	r2, [r0, r6]!
   17e64:	ldr	r3, [r0, #8]
   17e68:	ldr	r0, [r5]
   17e6c:	bl	128c8 <fprintf@plt>
   17e70:	add	r6, r6, #12
   17e74:	cmp	r6, #108	; 0x6c
   17e78:	bne	17e58 <__assert_fail@plt+0x529c>
   17e7c:	b	17ecc <__assert_fail@plt+0x5310>
   17e80:	movw	r8, #63055	; 0xf64f
   17e84:	movw	r9, #63674	; 0xf8ba
   17e88:	movw	r7, #64664	; 0xfc98
   17e8c:	movw	r4, #57287	; 0xdfc7
   17e90:	mov	r6, #0
   17e94:	movt	r8, #3
   17e98:	movt	r9, #3
   17e9c:	movt	r7, #3
   17ea0:	movt	r4, #3
   17ea4:	ldr	r3, [r7, -r6]
   17ea8:	ldr	r0, [r5]
   17eac:	cmp	r6, #0
   17eb0:	mov	r2, r9
   17eb4:	mov	r1, r4
   17eb8:	moveq	r2, r8
   17ebc:	bl	128c8 <fprintf@plt>
   17ec0:	sub	r6, r6, #12
   17ec4:	cmn	r6, #108	; 0x6c
   17ec8:	bne	17ea4 <__assert_fail@plt+0x52e8>
   17ecc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17ed0:	bx	lr
   17ed4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17ed8:	add	fp, sp, #24
   17edc:	movw	r7, #20056	; 0x4e58
   17ee0:	mov	r5, r0
   17ee4:	mov	r4, r2
   17ee8:	movt	r7, #5
   17eec:	ldrb	r0, [r7, #4]
   17ef0:	cmp	r0, #0
   17ef4:	beq	17f18 <__assert_fail@plt+0x535c>
   17ef8:	add	r4, r4, #16
   17efc:	movw	r0, #257	; 0x101
   17f00:	mov	r1, #0
   17f04:	strh	r0, [r7, #4]
   17f08:	ldr	r0, [r4]
   17f0c:	str	r0, [r7, #8]
   17f10:	mov	r0, r1
   17f14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f18:	movw	r8, #20100	; 0x4e84
   17f1c:	mov	r6, r1
   17f20:	mov	r0, r1
   17f24:	mov	r1, r4
   17f28:	movt	r8, #5
   17f2c:	ldr	r2, [r8, #52]	; 0x34
   17f30:	blx	r2
   17f34:	cmp	r0, #0
   17f38:	beq	17f78 <__assert_fail@plt+0x53bc>
   17f3c:	ldrb	r4, [r8, #14]
   17f40:	bl	128d4 <__errno_location@plt>
   17f44:	cmp	r4, #0
   17f48:	beq	17f5c <__assert_fail@plt+0x53a0>
   17f4c:	ldr	r2, [r0]
   17f50:	mvn	r1, #0
   17f54:	cmp	r2, #2
   17f58:	beq	17f10 <__assert_fail@plt+0x5354>
   17f5c:	ldr	r1, [r0]
   17f60:	mov	r0, #0
   17f64:	mov	r2, #1
   17f68:	mov	r3, r5
   17f6c:	bl	19034 <__assert_fail@plt+0x6478>
   17f70:	mvn	r1, #0
   17f74:	b	17f10 <__assert_fail@plt+0x5354>
   17f78:	ldr	r0, [r4, #16]!
   17f7c:	cmp	r0, #0
   17f80:	bne	17efc <__assert_fail@plt+0x5340>
   17f84:	movw	r1, #56172	; 0xdb6c
   17f88:	mov	r0, #0
   17f8c:	mov	r2, #5
   17f90:	movt	r1, #3
   17f94:	bl	1264c <dcgettext@plt>
   17f98:	ldr	r1, [r8, #72]	; 0x48
   17f9c:	mov	r5, r0
   17fa0:	mov	r0, #0
   17fa4:	mov	r2, r6
   17fa8:	bl	29834 <__assert_fail@plt+0x16c78>
   17fac:	mov	r3, r0
   17fb0:	mov	r0, #0
   17fb4:	mov	r1, #0
   17fb8:	mov	r2, r5
   17fbc:	bl	12790 <error@plt>
   17fc0:	mov	r0, #1
   17fc4:	str	r0, [r7, #28]
   17fc8:	b	17efc <__assert_fail@plt+0x5340>
   17fcc:	mov	r3, r1
   17fd0:	mov	r1, r0
   17fd4:	mov	r0, #0
   17fd8:	mov	r2, #1
   17fdc:	b	19034 <__assert_fail@plt+0x6478>
   17fe0:	push	{r4, sl, fp, lr}
   17fe4:	add	fp, sp, #8
   17fe8:	vpush	{d8}
   17fec:	sub	sp, sp, #392	; 0x188
   17ff0:	mov	r4, sp
   17ff4:	mov	r0, r4
   17ff8:	bl	12634 <uname@plt>
   17ffc:	cmp	r0, #0
   18000:	beq	1800c <__assert_fail@plt+0x5450>
   18004:	mov	r4, #1
   18008:	b	18078 <__assert_fail@plt+0x54bc>
   1800c:	add	r0, r4, #130	; 0x82
   18010:	bl	12afc <atof@plt>
   18014:	movw	r0, #63056	; 0xf650
   18018:	mov	r1, r4
   1801c:	vmov.f64	d8, d0
   18020:	movt	r0, #3
   18024:	bl	124cc <strcmp@plt>
   18028:	vcvt.f32.f64	s0, d8
   1802c:	cmp	r0, #0
   18030:	beq	18064 <__assert_fail@plt+0x54a8>
   18034:	vldr	s2, [pc, #76]	; 18088 <__assert_fail@plt+0x54cc>
   18038:	movw	r0, #63062	; 0xf656
   1803c:	mov	r4, #0
   18040:	mov	r1, sp
   18044:	movt	r0, #3
   18048:	vcmpe.f32	s0, s2
   1804c:	vmrs	APSR_nzcv, fpscr
   18050:	movwge	r4, #1
   18054:	bl	124cc <strcmp@plt>
   18058:	cmp	r0, #0
   1805c:	movne	r4, #1
   18060:	b	18078 <__assert_fail@plt+0x54bc>
   18064:	vldr	s2, [pc, #32]	; 1808c <__assert_fail@plt+0x54d0>
   18068:	mov	r4, #0
   1806c:	vcmpe.f32	s0, s2
   18070:	vmrs	APSR_nzcv, fpscr
   18074:	movwge	r4, #1
   18078:	mov	r0, r4
   1807c:	sub	sp, fp, #16
   18080:	vpop	{d8}
   18084:	pop	{r4, sl, fp, pc}
   18088:	submi	r6, r6, r6, ror #12
   1808c:	andmi	ip, ip, sp, asr #25
   18090:	push	{r4, sl, fp, lr}
   18094:	add	fp, sp, #8
   18098:	movw	r4, #20056	; 0x4e58
   1809c:	movt	r4, #5
   180a0:	ldrb	r0, [r4, #32]
   180a4:	cmp	r0, #0
   180a8:	popeq	{r4, sl, fp, pc}
   180ac:	bl	15d80 <__assert_fail@plt+0x31c4>
   180b0:	bl	180c0 <__assert_fail@plt+0x5504>
   180b4:	mov	r0, #0
   180b8:	strb	r0, [r4, #32]
   180bc:	pop	{r4, sl, fp, pc}
   180c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c4:	add	fp, sp, #28
   180c8:	sub	sp, sp, #4
   180cc:	cmp	r0, #0
   180d0:	beq	18180 <__assert_fail@plt+0x55c4>
   180d4:	movw	r6, #20056	; 0x4e58
   180d8:	movw	r7, #16924	; 0x421c
   180dc:	movw	r8, #37112	; 0x90f8
   180e0:	movw	sl, #17792	; 0x4580
   180e4:	movw	r5, #18656	; 0x48e0
   180e8:	mov	r4, r0
   180ec:	mov	r9, #0
   180f0:	movt	r6, #5
   180f4:	movt	r7, #1
   180f8:	movt	r8, #1
   180fc:	movt	sl, #5
   18100:	movt	r5, #1
   18104:	b	18138 <__assert_fail@plt+0x557c>
   18108:	ldr	r0, [r4, #144]	; 0x90
   1810c:	mov	r1, r8
   18110:	bl	1f6a8 <__assert_fail@plt+0xcaec>
   18114:	ldr	r0, [r4, #144]	; 0x90
   18118:	ldr	r1, [sl]
   1811c:	cmp	r0, r1
   18120:	beq	18174 <__assert_fail@plt+0x55b8>
   18124:	bl	29dbc <__assert_fail@plt+0x17200>
   18128:	ldr	r0, [r4, #144]	; 0x90
   1812c:	bl	2c048 <__assert_fail@plt+0x1948c>
   18130:	str	r9, [r4, #144]	; 0x90
   18134:	b	18174 <__assert_fail@plt+0x55b8>
   18138:	ldrb	r0, [r6, #32]
   1813c:	cmp	r0, #0
   18140:	beq	18188 <__assert_fail@plt+0x55cc>
   18144:	ldr	r0, [r4, #156]	; 0x9c
   18148:	bl	180c0 <__assert_fail@plt+0x5504>
   1814c:	ldr	r0, [r4]
   18150:	cmp	r0, r7
   18154:	cmpne	r0, r5
   18158:	bne	18174 <__assert_fail@plt+0x55b8>
   1815c:	mov	r2, r4
   18160:	ldrb	r0, [r2, #40]!	; 0x28
   18164:	cmp	r0, #0
   18168:	ldrne	r0, [r4, #116]	; 0x74
   1816c:	cmpne	r0, #0
   18170:	bne	18108 <__assert_fail@plt+0x554c>
   18174:	ldr	r4, [r4, #160]	; 0xa0
   18178:	cmp	r4, #0
   1817c:	bne	18138 <__assert_fail@plt+0x557c>
   18180:	sub	sp, fp, #28
   18184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18188:	movw	r0, #64112	; 0xfa70
   1818c:	movw	r1, #61209	; 0xef19
   18190:	movw	r3, #64139	; 0xfa8b
   18194:	mov	r2, #396	; 0x18c
   18198:	movt	r0, #3
   1819c:	movt	r1, #3
   181a0:	movt	r3, #3
   181a4:	bl	12bbc <__assert_fail@plt>
   181a8:	push	{r4, r5, fp, lr}
   181ac:	add	fp, sp, #8
   181b0:	cmp	r0, #0
   181b4:	popeq	{r4, r5, fp, pc}
   181b8:	movw	r5, #16920	; 0x4218
   181bc:	mov	r4, r0
   181c0:	movt	r5, #1
   181c4:	ldr	r0, [r4, #156]	; 0x9c
   181c8:	bl	181a8 <__assert_fail@plt+0x55ec>
   181cc:	ldr	r0, [r4]
   181d0:	cmp	r0, r5
   181d4:	bne	181fc <__assert_fail@plt+0x5640>
   181d8:	mov	r0, r4
   181dc:	ldrb	r1, [r0, #40]!	; 0x28
   181e0:	cmp	r1, #0
   181e4:	ldrne	r1, [r4, #116]	; 0x74
   181e8:	cmpne	r1, #0
   181ec:	beq	181fc <__assert_fail@plt+0x5640>
   181f0:	add	r0, r0, #4
   181f4:	add	r1, r4, #88	; 0x58
   181f8:	bl	1f0a8 <__assert_fail@plt+0xc4ec>
   181fc:	ldr	r4, [r4, #160]	; 0xa0
   18200:	cmp	r4, #0
   18204:	bne	181c4 <__assert_fail@plt+0x5608>
   18208:	pop	{r4, r5, fp, pc}
   1820c:	push	{r4, r5, fp, lr}
   18210:	add	fp, sp, #8
   18214:	sub	sp, sp, #8
   18218:	mov	r0, #8
   1821c:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   18220:	movw	r5, #17792	; 0x4580
   18224:	movt	r5, #5
   18228:	str	r0, [r5]
   1822c:	bl	29d4c <__assert_fail@plt+0x17190>
   18230:	cmp	r0, #0
   18234:	subeq	sp, fp, #8
   18238:	popeq	{r4, r5, fp, pc}
   1823c:	bl	128d4 <__errno_location@plt>
   18240:	ldr	r4, [r0]
   18244:	movw	r1, #63070	; 0xf65e
   18248:	mov	r0, #0
   1824c:	mov	r2, #5
   18250:	movt	r1, #3
   18254:	bl	1264c <dcgettext@plt>
   18258:	mov	r2, r0
   1825c:	ldr	r0, [r5]
   18260:	ldr	r1, [r0]
   18264:	cmn	r1, #1
   18268:	bgt	18290 <__assert_fail@plt+0x56d4>
   1826c:	ldr	r0, [r0, #4]
   18270:	movw	r1, #63055	; 0xf64f
   18274:	movw	r3, #5032	; 0x13a8
   18278:	movt	r1, #3
   1827c:	movt	r3, #4
   18280:	cmp	r0, #0
   18284:	moveq	r3, r1
   18288:	moveq	r0, r1
   1828c:	b	1829c <__assert_fail@plt+0x56e0>
   18290:	movw	r3, #63055	; 0xf64f
   18294:	movt	r3, #3
   18298:	mov	r0, r3
   1829c:	str	r0, [sp]
   182a0:	mov	r0, #1
   182a4:	mov	r1, r4
   182a8:	bl	12790 <error@plt>
   182ac:	push	{r4, r5, fp, lr}
   182b0:	add	fp, sp, #8
   182b4:	sub	sp, sp, #8
   182b8:	bl	15d80 <__assert_fail@plt+0x31c4>
   182bc:	cmp	r0, #0
   182c0:	beq	182fc <__assert_fail@plt+0x5740>
   182c4:	movw	r1, #33192	; 0x81a8
   182c8:	mov	r4, r0
   182cc:	movt	r1, #1
   182d0:	bl	18434 <__assert_fail@plt+0x5878>
   182d4:	bl	18090 <__assert_fail@plt+0x54d4>
   182d8:	movw	r0, #20056	; 0x4e58
   182dc:	movt	r0, #5
   182e0:	ldr	r0, [r0, #36]	; 0x24
   182e4:	bl	19278 <__assert_fail@plt+0x66bc>
   182e8:	movw	r1, #33900	; 0x846c
   182ec:	mov	r0, r4
   182f0:	movt	r1, #1
   182f4:	bl	18434 <__assert_fail@plt+0x5878>
   182f8:	b	1830c <__assert_fail@plt+0x5750>
   182fc:	movw	r0, #20056	; 0x4e58
   18300:	movt	r0, #5
   18304:	ldr	r0, [r0, #36]	; 0x24
   18308:	bl	19278 <__assert_fail@plt+0x66bc>
   1830c:	movw	r5, #17792	; 0x4580
   18310:	movt	r5, #5
   18314:	ldr	r0, [r5]
   18318:	bl	29da0 <__assert_fail@plt+0x171e4>
   1831c:	cmp	r0, #0
   18320:	bne	183bc <__assert_fail@plt+0x5800>
   18324:	ldr	r0, [r5]
   18328:	bl	29dbc <__assert_fail@plt+0x17200>
   1832c:	ldr	r0, [r5]
   18330:	bl	2c048 <__assert_fail@plt+0x1948c>
   18334:	mov	r0, #0
   18338:	str	r0, [r5]
   1833c:	bl	1fd54 <__assert_fail@plt+0xd198>
   18340:	cmp	r0, #0
   18344:	beq	18350 <__assert_fail@plt+0x5794>
   18348:	bl	1fd74 <__assert_fail@plt+0xd1b8>
   1834c:	bl	1fd24 <__assert_fail@plt+0xd168>
   18350:	movw	r0, #17772	; 0x456c
   18354:	movt	r0, #5
   18358:	ldr	r0, [r0]
   1835c:	bl	2bfec <__assert_fail@plt+0x19430>
   18360:	cmn	r0, #1
   18364:	bne	183b4 <__assert_fail@plt+0x57f8>
   18368:	bl	128d4 <__errno_location@plt>
   1836c:	ldr	r4, [r0]
   18370:	movw	r0, #20100	; 0x4e84
   18374:	movw	r2, #63115	; 0xf68b
   18378:	movt	r0, #5
   1837c:	movt	r2, #3
   18380:	ldr	r1, [r0, #72]	; 0x48
   18384:	mov	r0, #0
   18388:	bl	29834 <__assert_fail@plt+0x16c78>
   1838c:	movw	r2, #14847	; 0x39ff
   18390:	mov	r3, r0
   18394:	mov	r0, #0
   18398:	mov	r1, r4
   1839c:	movt	r2, #4
   183a0:	bl	12790 <error@plt>
   183a4:	movw	r0, #20056	; 0x4e58
   183a8:	mov	r1, #1
   183ac:	movt	r0, #5
   183b0:	str	r1, [r0, #28]
   183b4:	sub	sp, fp, #8
   183b8:	pop	{r4, r5, fp, pc}
   183bc:	bl	128d4 <__errno_location@plt>
   183c0:	ldr	r4, [r0]
   183c4:	movw	r1, #64193	; 0xfac1
   183c8:	mov	r0, #0
   183cc:	mov	r2, #5
   183d0:	movt	r1, #3
   183d4:	bl	1264c <dcgettext@plt>
   183d8:	mov	r2, r0
   183dc:	ldr	r0, [r5]
   183e0:	ldr	r1, [r0]
   183e4:	cmn	r1, #1
   183e8:	bgt	18410 <__assert_fail@plt+0x5854>
   183ec:	ldr	r0, [r0, #4]
   183f0:	movw	r1, #63055	; 0xf64f
   183f4:	movw	r3, #5032	; 0x13a8
   183f8:	movt	r1, #3
   183fc:	movt	r3, #4
   18400:	cmp	r0, #0
   18404:	moveq	r3, r1
   18408:	moveq	r0, r1
   1840c:	b	1841c <__assert_fail@plt+0x5860>
   18410:	movw	r3, #63055	; 0xf64f
   18414:	movt	r3, #3
   18418:	mov	r0, r3
   1841c:	str	r0, [sp]
   18420:	mov	r0, #0
   18424:	mov	r1, r4
   18428:	bl	12790 <error@plt>
   1842c:	mov	r0, #1
   18430:	bl	125bc <_exit@plt>
   18434:	push	{r4, r5, fp, lr}
   18438:	add	fp, sp, #8
   1843c:	mov	r4, r1
   18440:	mov	r5, r0
   18444:	ldr	r0, [r5, #156]	; 0x9c
   18448:	cmp	r0, #0
   1844c:	movne	r1, r4
   18450:	blne	18434 <__assert_fail@plt+0x5878>
   18454:	mov	r0, r5
   18458:	blx	r4
   1845c:	ldr	r5, [r5, #160]	; 0xa0
   18460:	cmp	r5, #0
   18464:	popeq	{r4, r5, fp, pc}
   18468:	b	18444 <__assert_fail@plt+0x5888>
   1846c:	ldr	r1, [r0]
   18470:	movw	r2, #17100	; 0x42cc
   18474:	movt	r2, #1
   18478:	cmp	r1, r2
   1847c:	beq	184ac <__assert_fail@plt+0x58f0>
   18480:	movw	r2, #16948	; 0x4234
   18484:	movt	r2, #1
   18488:	cmp	r1, r2
   1848c:	movwne	r2, #17040	; 0x4290
   18490:	movtne	r2, #1
   18494:	cmpne	r1, r2
   18498:	beq	184ac <__assert_fail@plt+0x58f0>
   1849c:	movw	r2, #39904	; 0x9be0
   184a0:	movt	r2, #1
   184a4:	cmp	r1, r2
   184a8:	bxne	lr
   184ac:	mov	r1, #0
   184b0:	str	r1, [r0, #44]	; 0x2c
   184b4:	bx	lr
   184b8:	push	{r4, sl, fp, lr}
   184bc:	add	fp, sp, #8
   184c0:	mov	r4, r0
   184c4:	movw	r0, #20100	; 0x4e84
   184c8:	mov	r2, r1
   184cc:	movt	r0, #5
   184d0:	ldr	r1, [r0, #72]	; 0x48
   184d4:	mov	r0, #0
   184d8:	bl	29834 <__assert_fail@plt+0x16c78>
   184dc:	movw	r2, #14847	; 0x39ff
   184e0:	mov	r3, r0
   184e4:	mov	r0, #0
   184e8:	mov	r1, r4
   184ec:	movt	r2, #4
   184f0:	bl	12790 <error@plt>
   184f4:	movw	r0, #20056	; 0x4e58
   184f8:	mov	r1, #1
   184fc:	movt	r0, #5
   18500:	str	r1, [r0, #28]
   18504:	pop	{r4, sl, fp, pc}
   18508:	push	{r4, r5, fp, lr}
   1850c:	add	fp, sp, #8
   18510:	mov	r4, r1
   18514:	movw	r1, #20056	; 0x4e58
   18518:	mov	r5, r0
   1851c:	movt	r1, #5
   18520:	ldr	r0, [r1, #16]
   18524:	cmn	r0, #100	; 0x64
   18528:	beq	18534 <__assert_fail@plt+0x5978>
   1852c:	cmn	r0, #1
   18530:	ble	18584 <__assert_fail@plt+0x59c8>
   18534:	ldr	r1, [r1]
   18538:	cmp	r1, #0
   1853c:	beq	18554 <__assert_fail@plt+0x5998>
   18540:	mov	r1, r5
   18544:	mov	r2, r4
   18548:	mov	r3, #256	; 0x100
   1854c:	pop	{r4, r5, fp, lr}
   18550:	b	3d734 <__assert_fail@plt+0x2ab78>
   18554:	mov	r1, r5
   18558:	mov	r2, r4
   1855c:	mov	r3, #0
   18560:	bl	3d734 <__assert_fail@plt+0x2ab78>
   18564:	cmp	r0, #0
   18568:	moveq	r0, #0
   1856c:	popeq	{r4, r5, fp, pc}
   18570:	mov	r2, r0
   18574:	mov	r0, r5
   18578:	mov	r1, r4
   1857c:	pop	{r4, r5, fp, lr}
   18580:	b	185a4 <__assert_fail@plt+0x59e8>
   18584:	movw	r0, #63131	; 0xf69b
   18588:	movw	r1, #61209	; 0xef19
   1858c:	movw	r3, #63153	; 0xf6b1
   18590:	movw	r2, #605	; 0x25d
   18594:	movt	r0, #3
   18598:	movt	r1, #3
   1859c:	movt	r3, #3
   185a0:	bl	12bbc <__assert_fail@plt>
   185a4:	push	{r4, r5, r6, sl, fp, lr}
   185a8:	add	fp, sp, #16
   185ac:	mov	r6, r2
   185b0:	mov	r4, r1
   185b4:	mov	r5, r0
   185b8:	bl	128d4 <__errno_location@plt>
   185bc:	ldr	r0, [r0]
   185c0:	cmp	r0, #20
   185c4:	cmpne	r0, #2
   185c8:	movne	r0, r6
   185cc:	popne	{r4, r5, r6, sl, fp, pc}
   185d0:	movw	r0, #20100	; 0x4e84
   185d4:	movt	r0, #5
   185d8:	ldrb	r0, [r0, #44]	; 0x2c
   185dc:	tst	r0, #2
   185e0:	bne	18604 <__assert_fail@plt+0x5a48>
   185e4:	movw	r0, #20056	; 0x4e58
   185e8:	mov	r1, r5
   185ec:	mov	r2, r4
   185f0:	mov	r3, #256	; 0x100
   185f4:	movt	r0, #5
   185f8:	ldr	r0, [r0, #16]
   185fc:	pop	{r4, r5, r6, sl, fp, lr}
   18600:	b	3d734 <__assert_fail@plt+0x2ab78>
   18604:	movw	r0, #17760	; 0x4560
   18608:	movw	r1, #64241	; 0xfaf1
   1860c:	mov	r2, r5
   18610:	movt	r0, #5
   18614:	movt	r1, #3
   18618:	ldr	r0, [r0]
   1861c:	bl	128c8 <fprintf@plt>
   18620:	b	185e4 <__assert_fail@plt+0x5a28>
   18624:	push	{r4, r5, fp, lr}
   18628:	add	fp, sp, #8
   1862c:	mov	r5, r0
   18630:	movw	r0, #20056	; 0x4e58
   18634:	mov	r4, r1
   18638:	movt	r0, #5
   1863c:	ldr	r0, [r0, #16]
   18640:	cmn	r0, #100	; 0x64
   18644:	beq	18650 <__assert_fail@plt+0x5a94>
   18648:	cmn	r0, #1
   1864c:	ble	18680 <__assert_fail@plt+0x5ac4>
   18650:	mov	r1, r5
   18654:	mov	r2, r4
   18658:	mov	r3, #0
   1865c:	bl	3d734 <__assert_fail@plt+0x2ab78>
   18660:	cmp	r0, #0
   18664:	moveq	r0, #0
   18668:	popeq	{r4, r5, fp, pc}
   1866c:	mov	r2, r0
   18670:	mov	r0, r5
   18674:	mov	r1, r4
   18678:	pop	{r4, r5, fp, lr}
   1867c:	b	185a4 <__assert_fail@plt+0x59e8>
   18680:	movw	r0, #63131	; 0xf69b
   18684:	movw	r1, #61209	; 0xef19
   18688:	movw	r3, #63199	; 0xf6df
   1868c:	mov	r2, #636	; 0x27c
   18690:	movt	r0, #3
   18694:	movt	r1, #3
   18698:	movt	r3, #3
   1869c:	bl	12bbc <__assert_fail@plt>
   186a0:	mov	r2, r1
   186a4:	mov	r1, r0
   186a8:	movw	r0, #20056	; 0x4e58
   186ac:	movt	r0, #5
   186b0:	ldr	r0, [r0, #16]
   186b4:	cmn	r0, #1
   186b8:	bgt	186c4 <__assert_fail@plt+0x5b08>
   186bc:	cmn	r0, #100	; 0x64
   186c0:	bne	186cc <__assert_fail@plt+0x5b10>
   186c4:	mov	r3, #256	; 0x100
   186c8:	b	3d734 <__assert_fail@plt+0x2ab78>
   186cc:	push	{fp, lr}
   186d0:	mov	fp, sp
   186d4:	movw	r0, #63245	; 0xf70d
   186d8:	movw	r1, #61209	; 0xef19
   186dc:	movw	r3, #63301	; 0xf745
   186e0:	movw	r2, #653	; 0x28d
   186e4:	movt	r0, #3
   186e8:	movt	r1, #3
   186ec:	movt	r3, #3
   186f0:	bl	12bbc <__assert_fail@plt>
   186f4:	push	{r4, r5, fp, lr}
   186f8:	add	fp, sp, #8
   186fc:	mov	r5, r0
   18700:	movw	r0, #17832	; 0x45a8
   18704:	mov	r4, r1
   18708:	movw	r1, #63347	; 0xf773
   1870c:	movt	r0, #5
   18710:	movt	r1, #3
   18714:	ldrd	r2, [r0]
   18718:	adds	r2, r2, #1
   1871c:	adc	r3, r3, #0
   18720:	strd	r2, [r0]
   18724:	movw	r0, #17760	; 0x4560
   18728:	mov	r2, r5
   1872c:	movt	r0, #5
   18730:	ldr	r0, [r0]
   18734:	bl	128c8 <fprintf@plt>
   18738:	movw	r0, #20100	; 0x4e84
   1873c:	movt	r0, #5
   18740:	ldr	r0, [r0, #48]	; 0x30
   18744:	cmp	r0, #0
   18748:	beq	1877c <__assert_fail@plt+0x5bc0>
   1874c:	cmp	r0, #2
   18750:	beq	1876c <__assert_fail@plt+0x5bb0>
   18754:	cmp	r0, #1
   18758:	bne	1878c <__assert_fail@plt+0x5bd0>
   1875c:	mov	r0, r5
   18760:	mov	r1, r4
   18764:	pop	{r4, r5, fp, lr}
   18768:	b	18624 <__assert_fail@plt+0x5a68>
   1876c:	mov	r0, r5
   18770:	mov	r1, r4
   18774:	pop	{r4, r5, fp, lr}
   18778:	b	18508 <__assert_fail@plt+0x594c>
   1877c:	mov	r0, r5
   18780:	mov	r1, r4
   18784:	pop	{r4, r5, fp, lr}
   18788:	b	186a0 <__assert_fail@plt+0x5ae4>
   1878c:	movw	r0, #60281	; 0xeb79
   18790:	movw	r1, #61209	; 0xef19
   18794:	movw	r3, #63364	; 0xf784
   18798:	movw	r2, #677	; 0x2a5
   1879c:	movt	r0, #3
   187a0:	movt	r1, #3
   187a4:	movt	r3, #3
   187a8:	bl	12bbc <__assert_fail@plt>
   187ac:	movw	r0, #20100	; 0x4e84
   187b0:	movt	r0, #5
   187b4:	ldr	r0, [r0, #48]	; 0x30
   187b8:	cmp	r0, #1
   187bc:	moveq	r0, #1
   187c0:	bxeq	lr
   187c4:	cmp	r0, #2
   187c8:	movne	r0, #0
   187cc:	bxne	lr
   187d0:	movw	r0, #20056	; 0x4e58
   187d4:	movt	r0, #5
   187d8:	ldr	r0, [r0]
   187dc:	clz	r0, r0
   187e0:	lsr	r0, r0, #5
   187e4:	bx	lr
   187e8:	push	{r4, r5, fp, lr}
   187ec:	add	fp, sp, #8
   187f0:	mov	r4, r3
   187f4:	ldr	r3, [r0]
   187f8:	mov	r5, r0
   187fc:	cmp	r3, #0
   18800:	beq	1885c <__assert_fail@plt+0x5ca0>
   18804:	and	r0, r3, #61440	; 0xf000
   18808:	cmp	r0, #40960	; 0xa000
   1880c:	bne	18840 <__assert_fail@plt+0x5c84>
   18810:	movw	r0, #20100	; 0x4e84
   18814:	movt	r0, #5
   18818:	ldr	r0, [r0, #48]	; 0x30
   1881c:	cmp	r0, #1
   18820:	beq	188c4 <__assert_fail@plt+0x5d08>
   18824:	cmp	r0, #2
   18828:	bne	18840 <__assert_fail@plt+0x5c84>
   1882c:	movw	r0, #20056	; 0x4e58
   18830:	movt	r0, #5
   18834:	ldr	r0, [r0]
   18838:	cmp	r0, #0
   1883c:	beq	188c4 <__assert_fail@plt+0x5d08>
   18840:	movw	r1, #20056	; 0x4e58
   18844:	mov	r0, #1
   18848:	movt	r1, #5
   1884c:	str	r3, [r1, #8]
   18850:	strb	r0, [r1, #5]
   18854:	str	r3, [r4, #16]
   18858:	pop	{r4, r5, fp, pc}
   1885c:	ldr	r0, [fp, #8]
   18860:	cmp	r0, #0
   18864:	beq	18884 <__assert_fail@plt+0x5cc8>
   18868:	movw	r0, #20056	; 0x4e58
   1886c:	mov	r1, #0
   18870:	movt	r0, #5
   18874:	str	r1, [r0, #8]
   18878:	strh	r1, [r0, #4]
   1887c:	mov	r0, #1
   18880:	pop	{r4, r5, fp, pc}
   18884:	mov	r0, r1
   18888:	mov	r1, r2
   1888c:	mov	r2, r4
   18890:	bl	17ed4 <__assert_fail@plt+0x5318>
   18894:	mov	r1, r0
   18898:	mov	r0, #0
   1889c:	cmp	r1, #0
   188a0:	popne	{r4, r5, fp, pc}
   188a4:	ldr	r1, [r4, #16]
   188a8:	movw	r2, #20056	; 0x4e58
   188ac:	mov	r0, #1
   188b0:	movt	r2, #5
   188b4:	str	r1, [r5]
   188b8:	strb	r0, [r2, #5]
   188bc:	str	r1, [r2, #8]
   188c0:	pop	{r4, r5, fp, pc}
   188c4:	mov	r0, r1
   188c8:	mov	r1, r2
   188cc:	mov	r2, r4
   188d0:	bl	17ed4 <__assert_fail@plt+0x5318>
   188d4:	mov	r1, r0
   188d8:	mov	r0, #0
   188dc:	cmp	r1, #0
   188e0:	beq	188e8 <__assert_fail@plt+0x5d2c>
   188e4:	pop	{r4, r5, fp, pc}
   188e8:	ldr	r0, [r4, #16]
   188ec:	movw	r1, #20056	; 0x4e58
   188f0:	movt	r1, #5
   188f4:	str	r0, [r1, #8]
   188f8:	str	r0, [r5]
   188fc:	mov	r0, #1
   18900:	strb	r0, [r1, #5]
   18904:	pop	{r4, r5, fp, pc}
   18908:	mov	r1, r0
   1890c:	mov	r0, #1
   18910:	b	18918 <__assert_fail@plt+0x5d5c>
   18914:	ldr	r1, [r1, #152]	; 0x98
   18918:	cmp	r1, #0
   1891c:	bxeq	lr
   18920:	ldrb	r2, [r1, #17]
   18924:	cmp	r2, #0
   18928:	beq	18914 <__assert_fail@plt+0x5d58>
   1892c:	mov	r0, #0
   18930:	bx	lr
   18934:	ldrb	r2, [r0]
   18938:	mov	ip, r0
   1893c:	mov	r0, #0
   18940:	sub	r3, r2, #40	; 0x28
   18944:	cmp	r3, #5
   18948:	bhi	18984 <__assert_fail@plt+0x5dc8>
   1894c:	add	r2, pc, #0
   18950:	ldr	pc, [r2, r3, lsl #2]
   18954:	andeq	r8, r1, ip, lsl #19
   18958:	andeq	r8, r1, ip, ror #18
   1895c:	muleq	r1, r8, r9
   18960:	muleq	r1, r8, r9
   18964:	andeq	r8, r1, ip, ror #18
   18968:	muleq	r1, ip, r9
   1896c:	eor	r0, r1, #1
   18970:	ldrb	r1, [ip, #1]
   18974:	clz	r1, r1
   18978:	lsr	r1, r1, #5
   1897c:	and	r0, r1, r0
   18980:	bx	lr
   18984:	cmp	r2, #33	; 0x21
   18988:	bxne	lr
   1898c:	ldrb	r0, [ip, #1]
   18990:	clz	r0, r0
   18994:	lsr	r0, r0, #5
   18998:	bx	lr
   1899c:	ldrb	r0, [ip, #1]
   189a0:	cmp	r0, #0
   189a4:	movwne	r0, #1
   189a8:	bx	lr
   189ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189b0:	add	fp, sp, #28
   189b4:	sub	sp, sp, #20
   189b8:	mov	r4, #1
   189bc:	cmp	r0, #2
   189c0:	str	r1, [sp, #4]
   189c4:	blt	18c30 <__assert_fail@plt+0x6074>
   189c8:	mov	r5, r0
   189cc:	movw	r0, #64664	; 0xfc98
   189d0:	movw	r6, #63408	; 0xf7b0
   189d4:	movw	r8, #63411	; 0xf7b3
   189d8:	movw	sl, #20100	; 0x4e84
   189dc:	mov	r4, #1
   189e0:	movt	r0, #3
   189e4:	movt	r6, #3
   189e8:	movt	r8, #3
   189ec:	movt	sl, #5
   189f0:	str	r5, [sp]
   189f4:	add	r9, r0, #4
   189f8:	ldr	r0, [sp, #4]
   189fc:	ldr	r7, [r0, r4, lsl #2]
   18a00:	mov	r0, r6
   18a04:	mov	r1, r7
   18a08:	bl	124cc <strcmp@plt>
   18a0c:	cmp	r0, #0
   18a10:	beq	18b10 <__assert_fail@plt+0x5f54>
   18a14:	mov	r0, r8
   18a18:	mov	r1, r7
   18a1c:	bl	124cc <strcmp@plt>
   18a20:	cmp	r0, #0
   18a24:	beq	18b18 <__assert_fail@plt+0x5f5c>
   18a28:	movw	r0, #63414	; 0xf7b6
   18a2c:	mov	r1, r7
   18a30:	movt	r0, #3
   18a34:	bl	124cc <strcmp@plt>
   18a38:	cmp	r0, #0
   18a3c:	beq	18b20 <__assert_fail@plt+0x5f64>
   18a40:	movw	r0, #63417	; 0xf7b9
   18a44:	mov	r1, r7
   18a48:	movt	r0, #3
   18a4c:	bl	124cc <strcmp@plt>
   18a50:	cmp	r0, #0
   18a54:	beq	18c3c <__assert_fail@plt+0x6080>
   18a58:	movw	r0, #63420	; 0xf7bc
   18a5c:	mov	r1, r7
   18a60:	movt	r0, #3
   18a64:	bl	124cc <strcmp@plt>
   18a68:	cmp	r0, #0
   18a6c:	beq	18b2c <__assert_fail@plt+0x5f70>
   18a70:	movw	r0, #64483	; 0xfbe3
   18a74:	mov	r1, r7
   18a78:	mov	r2, #2
   18a7c:	movt	r0, #3
   18a80:	bl	12b5c <strncmp@plt>
   18a84:	cmp	r0, #0
   18a88:	bne	18c30 <__assert_fail@plt+0x6074>
   18a8c:	ldrb	r5, [r7, #2]!
   18a90:	cmp	r5, #0
   18a94:	beq	18c50 <__assert_fail@plt+0x6094>
   18a98:	bl	12844 <__ctype_b_loc@plt>
   18a9c:	ldr	r0, [r0]
   18aa0:	add	r0, r0, r5, lsl #1
   18aa4:	ldrb	r0, [r0, #1]
   18aa8:	tst	r0, #8
   18aac:	beq	18c44 <__assert_fail@plt+0x6088>
   18ab0:	bl	128d4 <__errno_location@plt>
   18ab4:	ldr	r6, [r0]
   18ab8:	mov	r5, r0
   18abc:	mov	r0, #0
   18ac0:	add	r1, sp, #16
   18ac4:	mov	r2, #10
   18ac8:	str	r0, [r5]
   18acc:	mov	r0, r7
   18ad0:	bl	12880 <strtoul@plt>
   18ad4:	mov	r8, r0
   18ad8:	ldr	r0, [sp, #16]
   18adc:	cmp	r8, #0
   18ae0:	cmpeq	r0, r7
   18ae4:	beq	18c44 <__assert_fail@plt+0x6088>
   18ae8:	ldrb	r0, [r0]
   18aec:	cmp	r0, #0
   18af0:	bne	18c74 <__assert_fail@plt+0x60b8>
   18af4:	cmn	r8, #1
   18af8:	beq	18c9c <__assert_fail@plt+0x60e0>
   18afc:	cmp	r8, #65536	; 0x10000
   18b00:	bcs	18ca8 <__assert_fail@plt+0x60ec>
   18b04:	strh	r8, [sl, #68]	; 0x44
   18b08:	str	r6, [r5]
   18b0c:	b	18c10 <__assert_fail@plt+0x6054>
   18b10:	mov	r0, #2
   18b14:	b	18b24 <__assert_fail@plt+0x5f68>
   18b18:	mov	r0, #1
   18b1c:	b	18b24 <__assert_fail@plt+0x5f68>
   18b20:	mov	r0, #0
   18b24:	bl	1b0cc <__assert_fail@plt+0x8510>
   18b28:	b	18c24 <__assert_fail@plt+0x6068>
   18b2c:	add	r4, r4, #1
   18b30:	cmp	r4, r5
   18b34:	bge	18cf8 <__assert_fail@plt+0x613c>
   18b38:	ldr	r0, [sp, #4]
   18b3c:	add	r1, sp, #10
   18b40:	add	r2, sp, #12
   18b44:	ldr	r8, [r0, r4, lsl #2]
   18b48:	mov	r0, #0
   18b4c:	str	r0, [sp, #12]
   18b50:	mov	r0, #44	; 0x2c
   18b54:	strh	r0, [sp, #10]
   18b58:	mov	r0, r8
   18b5c:	bl	12784 <strtok_r@plt>
   18b60:	cmp	r0, #0
   18b64:	beq	18d04 <__assert_fail@plt+0x6148>
   18b68:	mov	r5, r0
   18b6c:	mov	r7, #0
   18b70:	mov	r6, r9
   18b74:	ldr	r0, [r6, #-4]
   18b78:	mov	r1, r5
   18b7c:	bl	124cc <strcmp@plt>
   18b80:	cmp	r0, #0
   18b84:	beq	18bd8 <__assert_fail@plt+0x601c>
   18b88:	add	r7, r7, #1
   18b8c:	add	r6, r6, #12
   18b90:	cmp	r7, #9
   18b94:	bcc	18b74 <__assert_fail@plt+0x5fb8>
   18b98:	movw	r1, #64300	; 0xfb2c
   18b9c:	mov	r0, #0
   18ba0:	mov	r2, #5
   18ba4:	movt	r1, #3
   18ba8:	bl	1264c <dcgettext@plt>
   18bac:	ldr	r1, [sl, #72]	; 0x48
   18bb0:	mov	r5, r0
   18bb4:	mov	r0, #0
   18bb8:	mov	r2, r8
   18bbc:	bl	29834 <__assert_fail@plt+0x16c78>
   18bc0:	mov	r3, r0
   18bc4:	mov	r0, #0
   18bc8:	mov	r1, #0
   18bcc:	mov	r2, r5
   18bd0:	bl	12790 <error@plt>
   18bd4:	b	18be8 <__assert_fail@plt+0x602c>
   18bd8:	ldr	r0, [r6]
   18bdc:	ldr	r1, [sl, #44]	; 0x2c
   18be0:	orr	r0, r1, r0
   18be4:	str	r0, [sl, #44]	; 0x2c
   18be8:	mov	r0, #0
   18bec:	add	r1, sp, #10
   18bf0:	add	r2, sp, #12
   18bf4:	bl	12784 <strtok_r@plt>
   18bf8:	mov	r5, r0
   18bfc:	cmp	r0, #0
   18c00:	bne	18b6c <__assert_fail@plt+0x5fb0>
   18c04:	ldrb	r0, [sl, #44]	; 0x2c
   18c08:	tst	r0, #16
   18c0c:	bne	18d30 <__assert_fail@plt+0x6174>
   18c10:	ldr	r5, [sp]
   18c14:	movw	r6, #63408	; 0xf7b0
   18c18:	movw	r8, #63411	; 0xf7b3
   18c1c:	movt	r6, #3
   18c20:	movt	r8, #3
   18c24:	add	r4, r4, #1
   18c28:	cmp	r4, r5
   18c2c:	blt	189f8 <__assert_fail@plt+0x5e3c>
   18c30:	mov	r0, r4
   18c34:	sub	sp, fp, #28
   18c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c3c:	add	r4, r4, #1
   18c40:	b	18c30 <__assert_fail@plt+0x6074>
   18c44:	movw	r1, #64433	; 0xfbb1
   18c48:	movt	r1, #3
   18c4c:	b	18c58 <__assert_fail@plt+0x609c>
   18c50:	movw	r1, #64369	; 0xfb71
   18c54:	movt	r1, #3
   18c58:	mov	r0, #0
   18c5c:	mov	r2, #5
   18c60:	bl	1264c <dcgettext@plt>
   18c64:	mov	r2, r0
   18c68:	mov	r0, #1
   18c6c:	mov	r1, #0
   18c70:	bl	12790 <error@plt>
   18c74:	movw	r1, #64486	; 0xfbe6
   18c78:	mov	r0, #0
   18c7c:	mov	r2, #5
   18c80:	movt	r1, #3
   18c84:	bl	1264c <dcgettext@plt>
   18c88:	mov	r2, r0
   18c8c:	mov	r0, #1
   18c90:	mov	r1, #0
   18c94:	mov	r3, r7
   18c98:	bl	12790 <error@plt>
   18c9c:	ldr	r4, [r5]
   18ca0:	cmp	r4, #0
   18ca4:	bne	18cd0 <__assert_fail@plt+0x6114>
   18ca8:	movw	r1, #64516	; 0xfc04
   18cac:	mov	r0, #0
   18cb0:	mov	r2, #5
   18cb4:	movt	r1, #3
   18cb8:	bl	1264c <dcgettext@plt>
   18cbc:	mov	r2, r0
   18cc0:	mov	r0, #1
   18cc4:	mov	r1, #0
   18cc8:	mov	r3, r8
   18ccc:	bl	12790 <error@plt>
   18cd0:	movw	r1, #64486	; 0xfbe6
   18cd4:	mov	r0, #0
   18cd8:	mov	r2, #5
   18cdc:	movt	r1, #3
   18ce0:	bl	1264c <dcgettext@plt>
   18ce4:	mov	r2, r0
   18ce8:	mov	r0, #1
   18cec:	mov	r1, r4
   18cf0:	mov	r3, r7
   18cf4:	bl	12790 <error@plt>
   18cf8:	movw	r1, #63423	; 0xf7bf
   18cfc:	movt	r1, #3
   18d00:	b	18d0c <__assert_fail@plt+0x6150>
   18d04:	movw	r1, #64336	; 0xfb50
   18d08:	movt	r1, #3
   18d0c:	mov	r0, #0
   18d10:	mov	r2, #5
   18d14:	bl	1264c <dcgettext@plt>
   18d18:	mov	r2, r0
   18d1c:	mov	r0, #0
   18d20:	mov	r1, #0
   18d24:	bl	12790 <error@plt>
   18d28:	mov	r0, #1
   18d2c:	bl	17c4c <__assert_fail@plt+0x5090>
   18d30:	mov	r0, #1
   18d34:	bl	17e0c <__assert_fail@plt+0x5250>
   18d38:	mov	r0, #0
   18d3c:	bl	1285c <exit@plt>
   18d40:	push	{r4, r5, fp, lr}
   18d44:	add	fp, sp, #8
   18d48:	sub	sp, sp, #8
   18d4c:	mov	r4, r0
   18d50:	movw	r0, #63461	; 0xf7e5
   18d54:	movt	r0, #3
   18d58:	bl	127cc <getenv@plt>
   18d5c:	cmp	r0, #0
   18d60:	movwne	r0, #1
   18d64:	strb	r0, [r4, #17]
   18d68:	bl	17fe0 <__assert_fail@plt+0x5424>
   18d6c:	strb	r0, [r4, #56]	; 0x38
   18d70:	mov	r5, #0
   18d74:	mov	r0, #0
   18d78:	str	r5, [r4, #60]	; 0x3c
   18d7c:	bl	12b2c <isatty@plt>
   18d80:	cmp	r0, #0
   18d84:	strb	r5, [r4, #15]
   18d88:	mov	r1, #1
   18d8c:	movwne	r0, #1
   18d90:	strb	r0, [r4, #16]
   18d94:	ldrb	r0, [r4, #17]
   18d98:	cmp	r0, #0
   18d9c:	mvn	r0, #0
   18da0:	strbne	r5, [r4, #16]
   18da4:	strh	r1, [r4]
   18da8:	str	r0, [r4, #4]
   18dac:	str	r0, [r4, #8]
   18db0:	mov	r0, sp
   18db4:	mov	r1, #0
   18db8:	mov	r5, #0
   18dbc:	bl	12754 <gettimeofday@plt>
   18dc0:	cmp	r0, #0
   18dc4:	beq	18de0 <__assert_fail@plt+0x6224>
   18dc8:	mov	r0, #0
   18dcc:	bl	1261c <time@plt>
   18dd0:	cmn	r0, #1
   18dd4:	beq	18e98 <__assert_fail@plt+0x62dc>
   18dd8:	mov	r1, #0
   18ddc:	b	18df0 <__assert_fail@plt+0x6234>
   18de0:	ldm	sp, {r0, r1}
   18de4:	mov	r2, #1000	; 0x3e8
   18de8:	mov	r5, #0
   18dec:	mul	r1, r1, r2
   18df0:	orr	r3, r5, r0
   18df4:	sub	r0, r0, #4480	; 0x1180
   18df8:	add	r2, r4, #20
   18dfc:	mov	r5, #0
   18e00:	sub	r0, r0, #81920	; 0x14000
   18e04:	str	r3, [r2]
   18e08:	str	r1, [r2, #4]
   18e0c:	str	r0, [r4, #28]
   18e10:	mov	r0, #2
   18e14:	str	r1, [r4, #32]
   18e18:	strb	r5, [r4, #36]	; 0x24
   18e1c:	strh	r5, [r4, #13]
   18e20:	mov	r1, #512	; 0x200
   18e24:	strh	r0, [r4, #68]	; 0x44
   18e28:	ldrb	r0, [r4, #17]
   18e2c:	cmp	r0, #0
   18e30:	movw	r0, #63477	; 0xf7f5
   18e34:	movweq	r1, #1024	; 0x400
   18e38:	movt	r0, #3
   18e3c:	str	r1, [r4, #40]	; 0x28
   18e40:	str	r5, [r4, #44]	; 0x2c
   18e44:	bl	127cc <getenv@plt>
   18e48:	cmp	r0, #0
   18e4c:	bne	18e74 <__assert_fail@plt+0x62b8>
   18e50:	mov	r0, #0
   18e54:	strb	r5, [r4, #12]
   18e58:	bl	1b0cc <__assert_fail@plt+0x8510>
   18e5c:	mov	r0, #8
   18e60:	str	r0, [r4, #72]	; 0x48
   18e64:	str	r5, [r4, #76]	; 0x4c
   18e68:	strb	r5, [r4, #80]	; 0x50
   18e6c:	sub	sp, fp, #8
   18e70:	pop	{r4, r5, fp, pc}
   18e74:	movw	r1, #63493	; 0xf805
   18e78:	mov	r0, #0
   18e7c:	mov	r2, #5
   18e80:	movt	r1, #3
   18e84:	bl	1264c <dcgettext@plt>
   18e88:	mov	r2, r0
   18e8c:	mov	r0, #1
   18e90:	mov	r1, #0
   18e94:	bl	12790 <error@plt>
   18e98:	movw	r0, #64620	; 0xfc6c
   18e9c:	movw	r1, #61209	; 0xef19
   18ea0:	movw	r3, #64636	; 0xfc7c
   18ea4:	movw	r2, #978	; 0x3d2
   18ea8:	movt	r0, #3
   18eac:	movt	r1, #3
   18eb0:	movt	r3, #3
   18eb4:	bl	12bbc <__assert_fail@plt>
   18eb8:	push	{r4, r5, r6, sl, fp, lr}
   18ebc:	add	fp, sp, #16
   18ec0:	mov	r6, r0
   18ec4:	ldr	r0, [r2, #164]	; 0xa4
   18ec8:	mov	r4, r2
   18ecc:	mov	r5, r1
   18ed0:	add	r0, r0, #1
   18ed4:	str	r0, [r2, #164]	; 0xa4
   18ed8:	ldrb	r0, [r2, #18]
   18edc:	cmp	r0, #0
   18ee0:	beq	18f08 <__assert_fail@plt+0x634c>
   18ee4:	movw	r0, #20056	; 0x4e58
   18ee8:	movt	r0, #5
   18eec:	ldrb	r0, [r0, #4]
   18ef0:	cmp	r0, #0
   18ef4:	beq	18f94 <__assert_fail@plt+0x63d8>
   18ef8:	ldrb	r1, [r4, #19]
   18efc:	cmp	r1, #0
   18f00:	movwne	r1, #1
   18f04:	b	18f18 <__assert_fail@plt+0x635c>
   18f08:	ldrb	r0, [r4, #19]
   18f0c:	mov	r1, #1
   18f10:	cmp	r0, #0
   18f14:	beq	18f40 <__assert_fail@plt+0x6384>
   18f18:	movw	r0, #20056	; 0x4e58
   18f1c:	cmp	r1, #0
   18f20:	movt	r0, #5
   18f24:	ldrb	r2, [r0, #5]
   18f28:	clz	r0, r2
   18f2c:	lsr	r0, r0, #5
   18f30:	beq	18f60 <__assert_fail@plt+0x63a4>
   18f34:	cmp	r2, #0
   18f38:	beq	18f94 <__assert_fail@plt+0x63d8>
   18f3c:	b	18f60 <__assert_fail@plt+0x63a4>
   18f40:	ldrb	r0, [r4, #20]
   18f44:	cmp	r0, #0
   18f48:	beq	18fbc <__assert_fail@plt+0x6400>
   18f4c:	movw	r0, #20056	; 0x4e58
   18f50:	movt	r0, #5
   18f54:	ldrb	r0, [r0, #5]
   18f58:	clz	r0, r0
   18f5c:	lsr	r0, r0, #5
   18f60:	ldrb	r1, [r4, #20]
   18f64:	cmp	r1, #0
   18f68:	beq	18fbc <__assert_fail@plt+0x6400>
   18f6c:	ldrd	r2, [r5, #96]	; 0x60
   18f70:	orr	r1, r2, r3
   18f74:	clz	r1, r1
   18f78:	lsr	r1, r1, #5
   18f7c:	orrs	r0, r0, r1
   18f80:	bne	18f94 <__assert_fail@plt+0x63d8>
   18f84:	ldr	r0, [r5, #16]
   18f88:	and	r0, r0, #61440	; 0xf000
   18f8c:	cmp	r0, #16384	; 0x4000
   18f90:	bne	18fbc <__assert_fail@plt+0x6400>
   18f94:	movw	r0, #20056	; 0x4e58
   18f98:	mov	r2, r5
   18f9c:	movt	r0, #5
   18fa0:	ldr	r1, [r0, #12]
   18fa4:	mov	r0, r6
   18fa8:	bl	17ed4 <__assert_fail@plt+0x5318>
   18fac:	mov	r1, r0
   18fb0:	mov	r0, #0
   18fb4:	cmp	r1, #0
   18fb8:	popne	{r4, r5, r6, sl, fp, pc}
   18fbc:	ldr	r3, [r4]
   18fc0:	mov	r0, r6
   18fc4:	mov	r1, r5
   18fc8:	mov	r2, r4
   18fcc:	blx	r3
   18fd0:	mov	r1, r0
   18fd4:	mov	r0, #0
   18fd8:	cmp	r1, #0
   18fdc:	ldrne	r0, [r4, #168]	; 0xa8
   18fe0:	addne	r0, r0, #1
   18fe4:	strne	r0, [r4, #168]	; 0xa8
   18fe8:	movne	r0, #1
   18fec:	pop	{r4, r5, r6, sl, fp, pc}
   18ff0:	movw	r1, #18656	; 0x48e0
   18ff4:	movw	r2, #16924	; 0x421c
   18ff8:	movt	r1, #1
   18ffc:	movt	r2, #1
   19000:	sub	r1, r0, r1
   19004:	sub	r0, r0, r2
   19008:	clz	r1, r1
   1900c:	clz	r0, r0
   19010:	lsr	r1, r1, #5
   19014:	lsr	r0, r0, #5
   19018:	orr	r0, r0, r1
   1901c:	bx	lr
   19020:	mov	r2, r1
   19024:	movw	r1, #20100	; 0x4e84
   19028:	movt	r1, #5
   1902c:	ldr	r1, [r1, #72]	; 0x48
   19030:	b	29834 <__assert_fail@plt+0x16c78>
   19034:	push	{r4, r5, r6, r7, fp, lr}
   19038:	add	fp, sp, #16
   1903c:	movw	r7, #20056	; 0x4e58
   19040:	mov	r6, r0
   19044:	mov	r4, r2
   19048:	mov	r5, r1
   1904c:	movt	r7, #5
   19050:	ldrb	r0, [r7, #40]	; 0x28
   19054:	cmp	r0, #0
   19058:	cmpne	r4, #0
   1905c:	bne	19098 <__assert_fail@plt+0x64dc>
   19060:	movw	r0, #20100	; 0x4e84
   19064:	mov	r2, r3
   19068:	movt	r0, #5
   1906c:	ldr	r1, [r0, #72]	; 0x48
   19070:	mov	r0, #0
   19074:	bl	29834 <__assert_fail@plt+0x16c78>
   19078:	movw	r2, #14847	; 0x39ff
   1907c:	mov	r3, r0
   19080:	mov	r0, r6
   19084:	mov	r1, r5
   19088:	movt	r2, #4
   1908c:	bl	12790 <error@plt>
   19090:	mov	r0, #1
   19094:	str	r0, [r7, #28]
   19098:	cmp	r4, #0
   1909c:	movne	r0, #1
   190a0:	strbne	r0, [r7, #40]	; 0x28
   190a4:	pop	{r4, r5, r6, r7, fp, pc}
   190a8:	push	{fp, lr}
   190ac:	mov	fp, sp
   190b0:	mov	r3, r1
   190b4:	mov	r1, r0
   190b8:	mov	r0, #1
   190bc:	mov	r2, #1
   190c0:	bl	19034 <__assert_fail@plt+0x6478>
   190c4:	bl	12b68 <abort@plt>
   190c8:	push	{fp, lr}
   190cc:	mov	fp, sp
   190d0:	mov	r3, r1
   190d4:	mov	r1, r0
   190d8:	movw	r0, #20056	; 0x4e58
   190dc:	mov	r2, #0
   190e0:	movt	r0, #5
   190e4:	strb	r2, [r0, #40]	; 0x28
   190e8:	mov	r0, #1
   190ec:	mov	r2, #0
   190f0:	bl	19034 <__assert_fail@plt+0x6478>
   190f4:	bl	12b68 <abort@plt>
   190f8:	push	{fp, lr}
   190fc:	mov	fp, sp
   19100:	add	r2, r0, #4
   19104:	add	r1, r0, #48	; 0x30
   19108:	mov	r0, r2
   1910c:	bl	1f0a8 <__assert_fail@plt+0xc4ec>
   19110:	mov	r0, #0
   19114:	pop	{fp, pc}
   19118:	push	{r4, r5, r6, sl, fp, lr}
   1911c:	add	fp, sp, #16
   19120:	sub	sp, sp, #8
   19124:	mov	r6, r0
   19128:	mov	r0, #8
   1912c:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   19130:	mov	r4, #0
   19134:	cmp	r0, #0
   19138:	beq	191a4 <__assert_fail@plt+0x65e8>
   1913c:	mov	r5, r0
   19140:	mov	r0, r6
   19144:	bl	12658 <strdup@plt>
   19148:	cmp	r0, #0
   1914c:	str	r0, [r5]
   19150:	beq	1919c <__assert_fail@plt+0x65e0>
   19154:	movw	r0, #37424	; 0x9230
   19158:	movw	r2, #37296	; 0x91b0
   1915c:	movw	r3, #37352	; 0x91e8
   19160:	mov	r1, #0
   19164:	mov	r4, #0
   19168:	movt	r0, #1
   1916c:	movt	r2, #1
   19170:	movt	r3, #1
   19174:	str	r0, [sp]
   19178:	mov	r0, #11
   1917c:	bl	21d98 <__assert_fail@plt+0xf1dc>
   19180:	cmp	r0, #0
   19184:	str	r0, [r5, #4]
   19188:	beq	19194 <__assert_fail@plt+0x65d8>
   1918c:	mov	r4, r5
   19190:	b	191a4 <__assert_fail@plt+0x65e8>
   19194:	ldr	r0, [r5]
   19198:	bl	2c048 <__assert_fail@plt+0x1948c>
   1919c:	mov	r0, r5
   191a0:	bl	2c048 <__assert_fail@plt+0x1948c>
   191a4:	mov	r0, r4
   191a8:	sub	sp, fp, #16
   191ac:	pop	{r4, r5, r6, sl, fp, pc}
   191b0:	push	{fp, lr}
   191b4:	mov	fp, sp
   191b8:	mov	ip, r1
   191bc:	ldr	lr, [r0]
   191c0:	ldr	r3, [r0, #4]
   191c4:	ldr	r1, [r0, #12]
   191c8:	ldr	r2, [r0, #8]
   191cc:	eor	r0, r2, lr
   191d0:	eor	r1, r1, r3
   191d4:	mov	r2, ip
   191d8:	mov	r3, #0
   191dc:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   191e0:	mov	r0, r2
   191e4:	pop	{fp, pc}
   191e8:	push	{r4, r5, fp, lr}
   191ec:	add	fp, sp, #8
   191f0:	ldrd	r2, [r1, #8]
   191f4:	ldrd	r4, [r0, #8]
   191f8:	eor	r3, r5, r3
   191fc:	eor	r2, r4, r2
   19200:	orrs	r2, r2, r3
   19204:	mov	r2, #0
   19208:	bne	19228 <__assert_fail@plt+0x666c>
   1920c:	ldrd	r2, [r1]
   19210:	ldrd	r0, [r0]
   19214:	eor	r1, r1, r3
   19218:	eor	r0, r0, r2
   1921c:	orr	r0, r0, r1
   19220:	clz	r0, r0
   19224:	lsr	r2, r0, #5
   19228:	mov	r0, r2
   1922c:	pop	{r4, r5, fp, pc}
   19230:	push	{r4, sl, fp, lr}
   19234:	add	fp, sp, #8
   19238:	mov	r4, r0
   1923c:	ldr	r0, [r0, #20]
   19240:	cmp	r0, #0
   19244:	beq	19254 <__assert_fail@plt+0x6698>
   19248:	bl	129a0 <fclose@plt>
   1924c:	cmp	r0, #0
   19250:	bne	19268 <__assert_fail@plt+0x66ac>
   19254:	ldr	r0, [r4, #16]
   19258:	bl	2c048 <__assert_fail@plt+0x1948c>
   1925c:	mov	r0, r4
   19260:	pop	{r4, sl, fp, lr}
   19264:	b	2c048 <__assert_fail@plt+0x1948c>
   19268:	bl	128d4 <__errno_location@plt>
   1926c:	ldr	r0, [r0]
   19270:	ldr	r1, [r4, #16]
   19274:	bl	190c8 <__assert_fail@plt+0x650c>
   19278:	push	{r4, sl, fp, lr}
   1927c:	add	fp, sp, #8
   19280:	mov	r4, r0
   19284:	ldr	r0, [r0]
   19288:	bl	2c048 <__assert_fail@plt+0x1948c>
   1928c:	ldr	r0, [r4, #4]
   19290:	pop	{r4, sl, fp, lr}
   19294:	b	220c4 <__assert_fail@plt+0xf508>
   19298:	push	{r4, r5, r6, r7, fp, lr}
   1929c:	add	fp, sp, #16
   192a0:	sub	sp, sp, #104	; 0x68
   192a4:	mov	r5, r0
   192a8:	mov	r0, #24
   192ac:	mov	r7, r1
   192b0:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   192b4:	mov	r6, #0
   192b8:	cmp	r0, #0
   192bc:	beq	19394 <__assert_fail@plt+0x67d8>
   192c0:	mov	r4, r0
   192c4:	mov	r0, r7
   192c8:	bl	12658 <strdup@plt>
   192cc:	cmp	r0, #0
   192d0:	str	r0, [r4, #16]
   192d4:	beq	19354 <__assert_fail@plt+0x6798>
   192d8:	ldr	r1, [r5]
   192dc:	mov	r0, r7
   192e0:	bl	21884 <__assert_fail@plt+0xecc8>
   192e4:	cmp	r0, #0
   192e8:	str	r0, [r4, #20]
   192ec:	beq	19360 <__assert_fail@plt+0x67a4>
   192f0:	bl	12958 <fileno@plt>
   192f4:	cmn	r0, #1
   192f8:	ble	193bc <__assert_fail@plt+0x6800>
   192fc:	mov	r1, #1
   19300:	mov	r6, r0
   19304:	bl	21338 <__assert_fail@plt+0xe77c>
   19308:	mov	r1, sp
   1930c:	mov	r0, r6
   19310:	bl	3d714 <__assert_fail@plt+0x2ab58>
   19314:	cmn	r0, #1
   19318:	ble	1936c <__assert_fail@plt+0x67b0>
   1931c:	ldm	sp, {r0, r1}
   19320:	ldr	r2, [sp, #96]	; 0x60
   19324:	ldr	r3, [sp, #100]	; 0x64
   19328:	stm	r4, {r0, r1, r2, r3}
   1932c:	mov	r1, r4
   19330:	ldr	r0, [r5, #4]
   19334:	bl	21af8 <__assert_fail@plt+0xef3c>
   19338:	cmp	r0, #0
   1933c:	beq	1937c <__assert_fail@plt+0x67c0>
   19340:	mov	r6, r0
   19344:	mov	r0, r4
   19348:	bl	19230 <__assert_fail@plt+0x6674>
   1934c:	ldr	r6, [r6, #20]
   19350:	b	19394 <__assert_fail@plt+0x67d8>
   19354:	mov	r0, r4
   19358:	bl	2c048 <__assert_fail@plt+0x1948c>
   1935c:	b	19394 <__assert_fail@plt+0x67d8>
   19360:	mov	r0, r4
   19364:	bl	19230 <__assert_fail@plt+0x6674>
   19368:	b	19394 <__assert_fail@plt+0x67d8>
   1936c:	mov	r0, r4
   19370:	bl	19230 <__assert_fail@plt+0x6674>
   19374:	mov	r6, #0
   19378:	b	19394 <__assert_fail@plt+0x67d8>
   1937c:	ldr	r0, [r5, #4]
   19380:	mov	r1, r4
   19384:	bl	22720 <__assert_fail@plt+0xfb64>
   19388:	cmp	r0, #0
   1938c:	beq	193a0 <__assert_fail@plt+0x67e4>
   19390:	ldr	r6, [r4, #20]
   19394:	mov	r0, r6
   19398:	sub	sp, fp, #16
   1939c:	pop	{r4, r5, r6, r7, fp, pc}
   193a0:	bl	128d4 <__errno_location@plt>
   193a4:	ldr	r6, [r0]
   193a8:	mov	r5, r0
   193ac:	mov	r0, r4
   193b0:	bl	19230 <__assert_fail@plt+0x6674>
   193b4:	str	r6, [r5]
   193b8:	b	19374 <__assert_fail@plt+0x67b8>
   193bc:	movw	r0, #55958	; 0xda96
   193c0:	movw	r1, #64772	; 0xfd04
   193c4:	movw	r3, #64784	; 0xfd10
   193c8:	mov	r2, #166	; 0xa6
   193cc:	movt	r0, #3
   193d0:	movt	r1, #3
   193d4:	movt	r3, #3
   193d8:	bl	12bbc <__assert_fail@plt>
   193dc:	andeq	r0, r0, r0
   193e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193e4:	add	fp, sp, #28
   193e8:	sub	sp, sp, #4
   193ec:	ldr	r7, [fp, #8]
   193f0:	cmp	r7, #40	; 0x28
   193f4:	beq	19664 <__assert_fail@plt+0x6aa8>
   193f8:	cmp	r7, #91	; 0x5b
   193fc:	beq	19684 <__assert_fail@plt+0x6ac8>
   19400:	cmp	r7, #123	; 0x7b
   19404:	beq	196a4 <__assert_fail@plt+0x6ae8>
   19408:	ldr	sl, [fp, #12]
   1940c:	mov	r8, r0
   19410:	mov	r0, #20
   19414:	mov	r5, r3
   19418:	mov	r6, r2
   1941c:	mov	r9, r1
   19420:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   19424:	mov	r1, #0
   19428:	str	r0, [r8]
   1942c:	str	r5, [r0]
   19430:	str	r6, [r0, #12]
   19434:	str	r1, [r0, #16]
   19438:	strb	sl, [r0, #5]
   1943c:	strb	r7, [r0, #4]
   19440:	add	r0, r6, #2
   19444:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   19448:	mov	r4, r0
   1944c:	ldr	r0, [r8]
   19450:	mov	r1, r9
   19454:	mov	r2, r6
   19458:	str	r4, [r0, #8]
   1945c:	mov	r0, r4
   19460:	bl	12928 <strncpy@plt>
   19464:	add	r0, r4, r6
   19468:	cmp	r5, #1
   1946c:	bhi	1948c <__assert_fail@plt+0x68d0>
   19470:	cmp	r7, #0
   19474:	bne	196c4 <__assert_fail@plt+0x6b08>
   19478:	cmp	sl, #0
   1947c:	bne	196e4 <__assert_fail@plt+0x6b28>
   19480:	mov	r1, #0
   19484:	strb	r1, [r0]
   19488:	b	195b8 <__assert_fail@plt+0x69fc>
   1948c:	cmp	r5, #2
   19490:	bne	19704 <__assert_fail@plt+0x6b48>
   19494:	sub	r2, r7, #65	; 0x41
   19498:	cmp	r2, #56	; 0x38
   1949c:	bhi	195d4 <__assert_fail@plt+0x6a18>
   194a0:	ldr	r1, [fp, #16]
   194a4:	add	r3, pc, #0
   194a8:	ldr	pc, [r3, r2, lsl #2]
   194ac:	muleq	r1, r0, r5
   194b0:	muleq	r1, r0, r5
   194b4:	muleq	r1, r0, r5
   194b8:	muleq	r1, r0, r5
   194bc:	andeq	r9, r1, r0, lsl #9
   194c0:	muleq	r1, r0, r5
   194c4:	muleq	r1, r0, r5
   194c8:	andeq	r9, r1, r8, asr #11
   194cc:	andeq	r9, r1, r0, lsl #9
   194d0:	andeq	r9, r1, r0, lsl #9
   194d4:	andeq	r9, r1, r0, lsl #9
   194d8:	andeq	r9, r1, r0, lsl #9
   194dc:	muleq	r1, r0, r5
   194e0:	andeq	r9, r1, r0, lsl #9
   194e4:	andeq	r9, r1, r0, lsl #9
   194e8:	andeq	r9, r1, r8, asr #11
   194ec:	andeq	r9, r1, r0, lsl #9
   194f0:	andeq	r9, r1, r0, lsl #9
   194f4:	andeq	r9, r1, r4, lsl #12
   194f8:	muleq	r1, r0, r5
   194fc:	muleq	r1, r0, r5
   19500:	andeq	r9, r1, r0, lsl #9
   19504:	andeq	r9, r1, r0, lsl #9
   19508:	andeq	r9, r1, r0, lsl #9
   1950c:	andeq	r9, r1, r4, lsr r6
   19510:	andeq	r9, r1, r0, ror #11
   19514:	andeq	r9, r1, r0, lsl #9
   19518:	andeq	r9, r1, r0, lsl #9
   1951c:	andeq	r9, r1, r0, lsl #9
   19520:	andeq	r9, r1, r0, lsl #9
   19524:	andeq	r9, r1, r0, lsl #9
   19528:	andeq	r9, r1, r0, lsl #9
   1952c:	muleq	r1, r0, r5
   19530:	muleq	r1, r0, r5
   19534:	muleq	r1, r0, r5
   19538:	andeq	r9, r1, ip, asr #11
   1953c:	andeq	r9, r1, r0, lsl #9
   19540:	andeq	r9, r1, r8, asr #11
   19544:	muleq	r1, r0, r5
   19548:	andeq	r9, r1, r8, asr #11
   1954c:	strdeq	r9, [r1], -r0
   19550:	andeq	r9, r1, r0, lsl #9
   19554:	muleq	r1, r0, r5
   19558:	andeq	r9, r1, ip, asr #12
   1955c:	andeq	r9, r1, r4, lsl r6
   19560:	muleq	r1, r0, r5
   19564:	andeq	r9, r1, r0, lsl #9
   19568:	andeq	r9, r1, r8, asr #11
   1956c:	andeq	r9, r1, r0, lsl #9
   19570:	andeq	r9, r1, r0, lsl #9
   19574:	muleq	r1, r0, r5
   19578:	muleq	r1, r0, r5
   1957c:	muleq	r1, r0, r5
   19580:	andeq	r9, r1, r0, lsl #9
   19584:	andeq	r9, r1, r0, lsl #9
   19588:	andeq	r9, r1, r0, lsl #9
   1958c:	andeq	r9, r1, r8, lsr #12
   19590:	mov	r2, #1
   19594:	strb	r2, [r1, #18]
   19598:	mov	r2, #115	; 0x73
   1959c:	strb	r2, [r0]
   195a0:	mov	r2, #3
   195a4:	mov	r3, #0
   195a8:	strb	r3, [r0, #1]
   195ac:	ldr	r0, [r1, #24]
   195b0:	cmp	r2, r0
   195b4:	strhi	r2, [r1, #24]
   195b8:	ldr	r0, [r8]
   195bc:	add	r0, r0, #16
   195c0:	sub	sp, fp, #28
   195c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195c8:	mov	r7, #115	; 0x73
   195cc:	strb	r7, [r0], #1
   195d0:	b	19480 <__assert_fail@plt+0x68c4>
   195d4:	cmp	r7, #37	; 0x25
   195d8:	strbeq	r7, [r0], #1
   195dc:	b	19480 <__assert_fail@plt+0x68c4>
   195e0:	mov	r2, #115	; 0x73
   195e4:	strb	r2, [r0]
   195e8:	mov	r2, #5
   195ec:	b	195a4 <__assert_fail@plt+0x69e8>
   195f0:	mov	r2, #1
   195f4:	mov	r3, #115	; 0x73
   195f8:	strb	r2, [r1, #20]
   195fc:	strb	r3, [r0]
   19600:	b	195a4 <__assert_fail@plt+0x69e8>
   19604:	mov	r2, #1
   19608:	strb	r2, [r1, #18]
   1960c:	mov	r2, #103	; 0x67
   19610:	b	1959c <__assert_fail@plt+0x69e0>
   19614:	mov	r2, #111	; 0x6f
   19618:	strb	r2, [r0]
   1961c:	mov	r2, #1
   19620:	strb	r2, [r1, #18]
   19624:	b	195a0 <__assert_fail@plt+0x69e4>
   19628:	mov	r2, #1
   1962c:	strb	r2, [r1, #19]
   19630:	b	1963c <__assert_fail@plt+0x6a80>
   19634:	mov	r2, #1
   19638:	strb	r2, [r1, #18]
   1963c:	mov	r2, #115	; 0x73
   19640:	strb	r2, [r0]
   19644:	mov	r2, #2
   19648:	b	195a4 <__assert_fail@plt+0x69e8>
   1964c:	mov	r2, #1
   19650:	strb	r2, [r1, #18]
   19654:	mov	r2, #115	; 0x73
   19658:	strb	r2, [r0]
   1965c:	mov	r2, #4
   19660:	b	195a4 <__assert_fail@plt+0x69e8>
   19664:	movw	r0, #64983	; 0xfdd7
   19668:	movw	r1, #64857	; 0xfd59
   1966c:	movw	r3, #64865	; 0xfd61
   19670:	mov	r2, #80	; 0x50
   19674:	movt	r0, #3
   19678:	movt	r1, #3
   1967c:	movt	r3, #3
   19680:	bl	12bbc <__assert_fail@plt>
   19684:	movw	r0, #64964	; 0xfdc4
   19688:	movw	r1, #64857	; 0xfd59
   1968c:	movw	r3, #64865	; 0xfd61
   19690:	mov	r2, #79	; 0x4f
   19694:	movt	r0, #3
   19698:	movt	r1, #3
   1969c:	movt	r3, #3
   196a0:	bl	12bbc <__assert_fail@plt>
   196a4:	movw	r0, #64838	; 0xfd46
   196a8:	movw	r1, #64857	; 0xfd59
   196ac:	movw	r3, #64865	; 0xfd61
   196b0:	mov	r2, #78	; 0x4e
   196b4:	movt	r0, #3
   196b8:	movt	r1, #3
   196bc:	movt	r3, #3
   196c0:	bl	12bbc <__assert_fail@plt>
   196c4:	movw	r0, #65002	; 0xfdea
   196c8:	movw	r1, #64857	; 0xfd59
   196cc:	movw	r3, #64865	; 0xfd61
   196d0:	mov	r2, #97	; 0x61
   196d4:	movt	r0, #3
   196d8:	movt	r1, #3
   196dc:	movt	r3, #3
   196e0:	bl	12bbc <__assert_fail@plt>
   196e4:	movw	r0, #65019	; 0xfdfb
   196e8:	movw	r1, #64857	; 0xfd59
   196ec:	movw	r3, #64865	; 0xfd61
   196f0:	mov	r2, #98	; 0x62
   196f4:	movt	r0, #3
   196f8:	movt	r1, #3
   196fc:	movt	r3, #3
   19700:	bl	12bbc <__assert_fail@plt>
   19704:	movw	r0, #65040	; 0xfe10
   19708:	movw	r1, #64857	; 0xfd59
   1970c:	movw	r3, #64865	; 0xfd61
   19710:	mov	r2, #105	; 0x69
   19714:	movt	r0, #3
   19718:	movt	r1, #3
   1971c:	movt	r3, #3
   19720:	bl	12bbc <__assert_fail@plt>
   19724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19728:	add	fp, sp, #28
   1972c:	sub	sp, sp, #20
   19730:	mov	r7, r2
   19734:	mov	r2, r1
   19738:	movw	r1, #39904	; 0x9be0
   1973c:	mov	r4, r0
   19740:	mov	r0, r2
   19744:	movt	r1, #1
   19748:	mov	r2, r7
   1974c:	bl	17bb0 <__assert_fail@plt+0x4ff4>
   19750:	mov	r5, r0
   19754:	movw	r0, #257	; 0x101
   19758:	mov	r1, #0
   1975c:	mov	r9, r7
   19760:	strh	r0, [r5, #16]
   19764:	add	r6, r5, #40	; 0x28
   19768:	vld1.32	{d16-d17}, [r4]!
   1976c:	vst1.32	{d16-d17}, [r6]
   19770:	ldr	r0, [r4]
   19774:	strh	r1, [r5, #18]
   19778:	str	r1, [r5, #24]
   1977c:	str	r1, [r5, #40]	; 0x28
   19780:	str	r0, [r5, #56]	; 0x38
   19784:	b	19b00 <__assert_fail@plt+0x6f44>
   19788:	mov	r4, r7
   1978c:	b	19afc <__assert_fail@plt+0x6f40>
   19790:	mov	r4, r7
   19794:	ldrb	r0, [r4, #1]!
   19798:	cmp	r0, #0
   1979c:	beq	19930 <__assert_fail@plt+0x6d74>
   197a0:	cmp	r0, #99	; 0x63
   197a4:	beq	19b48 <__assert_fail@plt+0x6f8c>
   197a8:	and	r1, r0, #248	; 0xf8
   197ac:	cmp	r1, #48	; 0x30
   197b0:	bne	1995c <__assert_fail@plt+0x6da0>
   197b4:	mov	r1, #0
   197b8:	mov	r4, #0
   197bc:	bne	197f4 <__assert_fail@plt+0x6c38>
   197c0:	mov	r1, #0
   197c4:	mov	r2, #2
   197c8:	lsl	r1, r1, #3
   197cc:	sub	r4, r2, #1
   197d0:	uxtab	r0, r1, r0
   197d4:	cmp	r4, #2
   197d8:	sub	r1, r0, #48	; 0x30
   197dc:	bhi	197f4 <__assert_fail@plt+0x6c38>
   197e0:	ldrb	r0, [r7, r2]
   197e4:	add	r2, r2, #1
   197e8:	and	r3, r0, #248	; 0xf8
   197ec:	cmp	r3, #48	; 0x30
   197f0:	beq	197c8 <__assert_fail@plt+0x6c0c>
   197f4:	strb	r1, [r7]
   197f8:	b	19acc <__assert_fail@plt+0x6f10>
   197fc:	mov	sl, r7
   19800:	str	r6, [sp, #16]
   19804:	ldrb	r8, [sl, #1]!
   19808:	cmp	r8, #37	; 0x25
   1980c:	beq	198a8 <__assert_fail@plt+0x6cec>
   19810:	movw	r6, #65429	; 0xff95
   19814:	cmp	r8, #0
   19818:	movt	r6, #3
   1981c:	beq	19b90 <__assert_fail@plt+0x6fd4>
   19820:	mov	r1, #1
   19824:	ldrb	r8, [r7, r1]
   19828:	mov	r4, r1
   1982c:	cmp	r8, #0
   19830:	beq	19850 <__assert_fail@plt+0x6c94>
   19834:	mov	r0, r6
   19838:	mov	r1, r8
   1983c:	mov	r2, #5
   19840:	bl	1297c <memchr@plt>
   19844:	add	r1, r4, #1
   19848:	cmp	r0, #0
   1984c:	bne	19824 <__assert_fail@plt+0x6c68>
   19850:	bl	12844 <__ctype_b_loc@plt>
   19854:	ldr	r0, [r0]
   19858:	add	r1, r0, r8, lsl #1
   1985c:	ldrb	r1, [r1, #1]
   19860:	tst	r1, #8
   19864:	beq	19888 <__assert_fail@plt+0x6ccc>
   19868:	add	r1, r4, #1
   1986c:	ldrb	r8, [r7, r1]
   19870:	add	r1, r1, #1
   19874:	add	r2, r0, r8, lsl #1
   19878:	ldrb	r2, [r2, #1]
   1987c:	tst	r2, #8
   19880:	bne	1986c <__assert_fail@plt+0x6cb0>
   19884:	sub	r4, r1, #1
   19888:	add	sl, r7, r4
   1988c:	cmp	r8, #46	; 0x2e
   19890:	bne	198a8 <__assert_fail@plt+0x6cec>
   19894:	ldrb	r8, [sl, #1]!
   19898:	add	r1, r0, r8, lsl #1
   1989c:	ldrb	r1, [r1, #1]
   198a0:	tst	r1, #8
   198a4:	bne	19894 <__assert_fail@plt+0x6cd8>
   198a8:	movw	r0, #65434	; 0xff9a
   198ac:	mov	r1, r8
   198b0:	mov	r2, #29
   198b4:	movt	r0, #3
   198b8:	bl	1297c <memchr@plt>
   198bc:	cmp	r0, #0
   198c0:	mov	r4, #1
   198c4:	mov	r0, r8
   198c8:	bne	198f0 <__assert_fail@plt+0x6d34>
   198cc:	movw	r0, #65463	; 0xffb7
   198d0:	mov	r1, r8
   198d4:	mov	r2, #5
   198d8:	movt	r0, #3
   198dc:	bl	1297c <memchr@plt>
   198e0:	cmp	r0, #0
   198e4:	beq	19984 <__assert_fail@plt+0x6dc8>
   198e8:	ldrb	r0, [sl, #1]
   198ec:	mov	r4, #2
   198f0:	cmp	r0, #0
   198f4:	beq	19988 <__assert_fail@plt+0x6dcc>
   198f8:	mov	r0, #0
   198fc:	cmp	r4, #2
   19900:	add	r7, sl, r4
   19904:	sub	r2, sl, r9
   19908:	mov	r1, r9
   1990c:	mov	r3, #2
   19910:	ldrbeq	r0, [sl, #1]
   19914:	str	r8, [sp]
   19918:	sub	r4, r7, #1
   1991c:	stmib	sp, {r0, r5}
   19920:	ldr	r0, [sp, #16]
   19924:	bl	193e0 <__assert_fail@plt+0x6824>
   19928:	mov	r6, r0
   1992c:	b	19a0c <__assert_fail@plt+0x6e50>
   19930:	movw	r1, #65060	; 0xfe24
   19934:	mov	r0, #0
   19938:	mov	r2, #5
   1993c:	mov	r4, #0
   19940:	movt	r1, #3
   19944:	bl	1264c <dcgettext@plt>
   19948:	mov	r2, r0
   1994c:	mov	r0, #0
   19950:	mov	r1, #0
   19954:	bl	12790 <error@plt>
   19958:	b	19acc <__assert_fail@plt+0x6f10>
   1995c:	cmp	r0, #101	; 0x65
   19960:	bgt	19a14 <__assert_fail@plt+0x6e58>
   19964:	cmp	r0, #92	; 0x5c
   19968:	beq	19a64 <__assert_fail@plt+0x6ea8>
   1996c:	cmp	r0, #97	; 0x61
   19970:	beq	19a6c <__assert_fail@plt+0x6eb0>
   19974:	cmp	r0, #98	; 0x62
   19978:	bne	19a84 <__assert_fail@plt+0x6ec8>
   1997c:	mov	r0, #8
   19980:	b	19ac4 <__assert_fail@plt+0x6f08>
   19984:	mov	r4, #0
   19988:	movw	r0, #65176	; 0xfe98
   1998c:	mov	r1, r8
   19990:	mov	r2, #4
   19994:	movt	r0, #3
   19998:	bl	1297c <memchr@plt>
   1999c:	cmp	r0, #0
   199a0:	bne	19bb8 <__assert_fail@plt+0x6ffc>
   199a4:	cmp	r4, #2
   199a8:	add	r7, sl, #1
   199ac:	ldr	r4, [sp, #16]
   199b0:	ldrbeq	r0, [r7]
   199b4:	cmpeq	r0, #0
   199b8:	beq	19a54 <__assert_fail@plt+0x6e98>
   199bc:	movw	r1, #65315	; 0xff23
   199c0:	mov	r0, #0
   199c4:	movt	r1, #3
   199c8:	mov	r2, #5
   199cc:	bl	1264c <dcgettext@plt>
   199d0:	ldrb	r3, [sl]
   199d4:	mov	r2, r0
   199d8:	mov	r0, #0
   199dc:	mov	r1, #0
   199e0:	bl	12790 <error@plt>
   199e4:	mov	r0, #0
   199e8:	sub	r2, r7, r9
   199ec:	mov	r1, r9
   199f0:	mov	r3, #0
   199f4:	str	r0, [sp]
   199f8:	stmib	sp, {r0, r5}
   199fc:	mov	r0, r4
   19a00:	bl	193e0 <__assert_fail@plt+0x6824>
   19a04:	mov	r6, r0
   19a08:	mov	r4, sl
   19a0c:	mov	r9, r7
   19a10:	b	19afc <__assert_fail@plt+0x6f40>
   19a14:	sub	r1, r0, #110	; 0x6e
   19a18:	cmp	r1, #8
   19a1c:	bhi	19a74 <__assert_fail@plt+0x6eb8>
   19a20:	add	r0, pc, #0
   19a24:	ldr	pc, [r0, r1, lsl #2]
   19a28:	andeq	r9, r1, ip, asr #20
   19a2c:	andeq	r9, r1, r4, lsl #21
   19a30:	andeq	r9, r1, r4, lsl #21
   19a34:	andeq	r9, r1, r4, lsl #21
   19a38:			; <UNDEFINED> instruction: 0x00019ab0
   19a3c:	andeq	r9, r1, r4, lsl #21
   19a40:	andeq	r9, r1, r0, asr #21
   19a44:	andeq	r9, r1, r4, lsl #21
   19a48:			; <UNDEFINED> instruction: 0x00019ab8
   19a4c:	mov	r0, #10
   19a50:	b	19ac4 <__assert_fail@plt+0x6f08>
   19a54:	movw	r1, #65242	; 0xfeda
   19a58:	mov	r0, #0
   19a5c:	movt	r1, #3
   19a60:	b	199c8 <__assert_fail@plt+0x6e0c>
   19a64:	mov	r0, #92	; 0x5c
   19a68:	b	19ac4 <__assert_fail@plt+0x6f08>
   19a6c:	mov	r0, #7
   19a70:	b	19ac4 <__assert_fail@plt+0x6f08>
   19a74:	cmp	r0, #102	; 0x66
   19a78:	bne	19a84 <__assert_fail@plt+0x6ec8>
   19a7c:	mov	r0, #12
   19a80:	b	19ac4 <__assert_fail@plt+0x6f08>
   19a84:	movw	r1, #65107	; 0xfe53
   19a88:	mov	r0, #0
   19a8c:	mov	r2, #5
   19a90:	movt	r1, #3
   19a94:	bl	1264c <dcgettext@plt>
   19a98:	ldrb	r3, [r4]
   19a9c:	mov	r2, r0
   19aa0:	mov	r0, #0
   19aa4:	mov	r1, #0
   19aa8:	bl	12790 <error@plt>
   19aac:	b	19afc <__assert_fail@plt+0x6f40>
   19ab0:	mov	r0, #13
   19ab4:	b	19ac4 <__assert_fail@plt+0x6f08>
   19ab8:	mov	r0, #11
   19abc:	b	19ac4 <__assert_fail@plt+0x6f08>
   19ac0:	mov	r0, #9
   19ac4:	strb	r0, [r7]
   19ac8:	mov	r4, #1
   19acc:	mov	r0, #0
   19ad0:	mov	r1, r9
   19ad4:	mov	r3, #0
   19ad8:	str	r0, [sp]
   19adc:	stmib	sp, {r0, r5}
   19ae0:	add	r0, r7, #1
   19ae4:	sub	r2, r0, r9
   19ae8:	mov	r0, r6
   19aec:	bl	193e0 <__assert_fail@plt+0x6824>
   19af0:	add	r4, r7, r4
   19af4:	mov	r6, r0
   19af8:	add	r9, r4, #1
   19afc:	add	r7, r4, #1
   19b00:	ldrb	r0, [r7]
   19b04:	cmp	r0, #37	; 0x25
   19b08:	beq	197fc <__assert_fail@plt+0x6c40>
   19b0c:	cmp	r0, #92	; 0x5c
   19b10:	beq	19790 <__assert_fail@plt+0x6bd4>
   19b14:	cmp	r0, #0
   19b18:	bne	19788 <__assert_fail@plt+0x6bcc>
   19b1c:	cmp	r7, r9
   19b20:	bls	19b84 <__assert_fail@plt+0x6fc8>
   19b24:	mov	r0, #0
   19b28:	sub	r2, r7, r9
   19b2c:	mov	r1, r9
   19b30:	mov	r3, #0
   19b34:	str	r0, [sp]
   19b38:	stmib	sp, {r0, r5}
   19b3c:	mov	r0, r6
   19b40:	bl	193e0 <__assert_fail@plt+0x6824>
   19b44:	b	19b84 <__assert_fail@plt+0x6fc8>
   19b48:	mov	r0, #0
   19b4c:	sub	r2, r7, r9
   19b50:	mov	r1, r9
   19b54:	mov	r3, #1
   19b58:	str	r0, [sp]
   19b5c:	stmib	sp, {r0, r5}
   19b60:	mov	r0, r6
   19b64:	bl	193e0 <__assert_fail@plt+0x6824>
   19b68:	ldrb	r0, [r5, #18]
   19b6c:	cmp	r0, #0
   19b70:	beq	19b84 <__assert_fail@plt+0x6fc8>
   19b74:	ldr	r0, [r5, #24]
   19b78:	cmp	r0, #2
   19b7c:	movls	r0, #3
   19b80:	strls	r0, [r5, #24]
   19b84:	mov	r0, #1
   19b88:	sub	sp, fp, #28
   19b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b90:	movw	r1, #65142	; 0xfe76
   19b94:	mov	r0, #0
   19b98:	mov	r2, #5
   19b9c:	movt	r1, #3
   19ba0:	bl	1264c <dcgettext@plt>
   19ba4:	mov	r2, r0
   19ba8:	mov	r0, #1
   19bac:	mov	r1, #0
   19bb0:	mov	r3, r7
   19bb4:	bl	12790 <error@plt>
   19bb8:	movw	r1, #65180	; 0xfe9c
   19bbc:	mov	r0, #0
   19bc0:	mov	r2, #5
   19bc4:	movt	r1, #3
   19bc8:	bl	1264c <dcgettext@plt>
   19bcc:	ldrb	r3, [sl]
   19bd0:	mov	r2, r0
   19bd4:	mov	r0, #1
   19bd8:	mov	r1, #0
   19bdc:	bl	12790 <error@plt>
   19be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19be4:	add	fp, sp, #28
   19be8:	sub	sp, sp, #4
   19bec:	vpush	{d8-d9}
   19bf0:	sub	sp, sp, #808	; 0x328
   19bf4:	mov	r7, r2
   19bf8:	ldr	r8, [r7, #40]!	; 0x28
   19bfc:	cmp	r8, #0
   19c00:	beq	1a3c8 <__assert_fail@plt+0x780c>
   19c04:	mov	sl, r0
   19c08:	add	r0, r1, #48	; 0x30
   19c0c:	mov	r5, r2
   19c10:	mov	r9, r1
   19c14:	str	r0, [sp, #28]
   19c18:	add	r0, r1, #96	; 0x60
   19c1c:	str	r0, [sp, #24]
   19c20:	add	r0, r1, #64	; 0x40
   19c24:	str	r0, [sp, #32]
   19c28:	add	r0, r1, #80	; 0x50
   19c2c:	str	r0, [sp, #44]	; 0x2c
   19c30:	add	r0, r1, #88	; 0x58
   19c34:	str	r0, [sp, #40]	; 0x28
   19c38:	add	r0, r1, #72	; 0x48
   19c3c:	str	r0, [sp, #36]	; 0x24
   19c40:	b	1a1c0 <__assert_fail@plt+0x7604>
   19c44:	cmp	r0, #37	; 0x25
   19c48:	beq	1a204 <__assert_fail@plt+0x7648>
   19c4c:	cmp	r0, #0
   19c50:	bne	1a3bc <__assert_fail@plt+0x7800>
   19c54:	b	1a3fc <__assert_fail@plt+0x7840>
   19c58:	ldr	r4, [r8, #8]
   19c5c:	ldr	r0, [r9, #16]
   19c60:	and	r0, r0, #61440	; 0xf000
   19c64:	b	1a0a0 <__assert_fail@plt+0x74e4>
   19c68:	movw	r0, #20056	; 0x4e58
   19c6c:	movw	r2, #63055	; 0xf64f
   19c70:	movt	r0, #5
   19c74:	movt	r2, #3
   19c78:	ldr	r1, [r0]
   19c7c:	cmp	r1, #1
   19c80:	blt	19c98 <__assert_fail@plt+0x70dc>
   19c84:	ldr	r0, [r0, #20]
   19c88:	mov	r2, sl
   19c8c:	ldrb	r0, [r2, r0]!
   19c90:	cmp	r0, #47	; 0x2f
   19c94:	addeq	r2, r2, #1
   19c98:	ldr	r1, [r8, #8]
   19c9c:	mov	r0, r7
   19ca0:	b	19ef4 <__assert_fail@plt+0x7338>
   19ca4:	ldr	r4, [r8, #8]
   19ca8:	ldr	r0, [r9, #20]
   19cac:	b	1a074 <__assert_fail@plt+0x74b8>
   19cb0:	movw	r4, #20056	; 0x4e58
   19cb4:	movt	r4, #5
   19cb8:	ldr	r0, [r4, #20]
   19cbc:	add	r0, r0, #1
   19cc0:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   19cc4:	ldr	r4, [r4, #20]
   19cc8:	mov	r1, sl
   19ccc:	mov	r6, r0
   19cd0:	mov	r2, r4
   19cd4:	bl	125c8 <memcpy@plt>
   19cd8:	mov	r0, #0
   19cdc:	mov	r2, r6
   19ce0:	strb	r0, [r6, r4]
   19ce4:	mov	r0, r7
   19ce8:	ldr	r1, [r8, #8]
   19cec:	bl	1a438 <__assert_fail@plt+0x787c>
   19cf0:	b	19ff4 <__assert_fail@plt+0x7438>
   19cf4:	add	r4, sp, #48	; 0x30
   19cf8:	mov	r0, r9
   19cfc:	mov	r1, r4
   19d00:	bl	2187c <__assert_fail@plt+0xecc0>
   19d04:	mov	r0, #0
   19d08:	mov	r2, r4
   19d0c:	strb	r0, [sp, #58]	; 0x3a
   19d10:	mov	r0, r7
   19d14:	ldr	r1, [r8, #8]
   19d18:	b	1a3b8 <__assert_fail@plt+0x77fc>
   19d1c:	ldr	r6, [r8, #8]
   19d20:	ldr	r0, [sp, #40]	; 0x28
   19d24:	b	19f60 <__assert_fail@plt+0x73a4>
   19d28:	movw	r0, #20056	; 0x4e58
   19d2c:	movt	r0, #5
   19d30:	b	1a05c <__assert_fail@plt+0x74a0>
   19d34:	ldr	r0, [r9, #28]
   19d38:	bl	12b98 <getgrgid@plt>
   19d3c:	cmp	r0, #0
   19d40:	bne	1a04c <__assert_fail@plt+0x7490>
   19d44:	ldr	r6, [r8, #8]
   19d48:	ldr	r0, [r9, #28]
   19d4c:	mov	r2, #1
   19d50:	mov	r1, #0
   19d54:	str	r2, [sp]
   19d58:	stmib	sp, {r1, r2}
   19d5c:	str	r1, [sp, #12]
   19d60:	add	r2, sp, #152	; 0x98
   19d64:	mov	r1, #0
   19d68:	b	19e78 <__assert_fail@plt+0x72bc>
   19d6c:	ldr	r0, [r9, #16]
   19d70:	and	r0, r0, #61440	; 0xf000
   19d74:	cmp	r0, #40960	; 0xa000
   19d78:	bne	19db0 <__assert_fail@plt+0x71f4>
   19d7c:	movw	r4, #20056	; 0x4e58
   19d80:	movt	r4, #5
   19d84:	ldr	r1, [r4, #12]
   19d88:	ldr	r0, [r4, #16]
   19d8c:	bl	20ffc <__assert_fail@plt+0xe440>
   19d90:	cmp	r0, #0
   19d94:	bne	19f74 <__assert_fail@plt+0x73b8>
   19d98:	bl	128d4 <__errno_location@plt>
   19d9c:	ldr	r0, [r0]
   19da0:	mov	r1, sl
   19da4:	bl	17fcc <__assert_fail@plt+0x5410>
   19da8:	mov	r0, #1
   19dac:	str	r0, [r4, #28]
   19db0:	ldr	r1, [r8, #8]
   19db4:	movw	r2, #63055	; 0xf64f
   19db8:	mov	r0, r7
   19dbc:	movt	r2, #3
   19dc0:	bl	1ac0c <__assert_fail@plt+0x8050>
   19dc4:	mov	r6, #0
   19dc8:	b	19ff4 <__assert_fail@plt+0x7438>
   19dcc:	ldr	r4, [r8, #8]
   19dd0:	ldr	r0, [sp, #28]
   19dd4:	b	19e8c <__assert_fail@plt+0x72d0>
   19dd8:	ldr	r6, [r8, #8]
   19ddc:	mov	r0, r9
   19de0:	mov	r1, sl
   19de4:	bl	1ac88 <__assert_fail@plt+0x80cc>
   19de8:	mov	r2, r0
   19dec:	mov	r0, r7
   19df0:	mov	r1, r6
   19df4:	b	19ef4 <__assert_fail@plt+0x7338>
   19df8:	ldr	r0, [r9, #16]
   19dfc:	and	r0, r0, #61440	; 0xf000
   19e00:	cmp	r0, #40960	; 0xa000
   19e04:	bne	1a09c <__assert_fail@plt+0x74e0>
   19e08:	movw	r0, #20056	; 0x4e58
   19e0c:	add	r2, sp, #48	; 0x30
   19e10:	mov	r3, #0
   19e14:	movt	r0, #5
   19e18:	ldr	r1, [r0, #12]
   19e1c:	ldr	r0, [r0, #16]
   19e20:	bl	3d734 <__assert_fail@plt+0x2ab78>
   19e24:	cmp	r0, #0
   19e28:	beq	1a144 <__assert_fail@plt+0x7588>
   19e2c:	bl	128d4 <__errno_location@plt>
   19e30:	mov	r6, r0
   19e34:	ldr	r0, [r0]
   19e38:	cmp	r0, #20
   19e3c:	cmpne	r0, #2
   19e40:	bne	1a16c <__assert_fail@plt+0x75b0>
   19e44:	ldr	r1, [r8, #8]
   19e48:	movw	r2, #491	; 0x1eb
   19e4c:	movt	r2, #4
   19e50:	b	1a064 <__assert_fail@plt+0x74a8>
   19e54:	ldr	r0, [sp, #32]
   19e58:	ldr	r6, [r8, #8]
   19e5c:	mov	r2, #0
   19e60:	mov	r3, #512	; 0x200
   19e64:	ldrd	r0, [r0]
   19e68:	str	r3, [sp]
   19e6c:	stmib	sp, {r2, r3}
   19e70:	str	r2, [sp, #12]
   19e74:	add	r2, sp, #152	; 0x98
   19e78:	mov	r3, #0
   19e7c:	bl	22870 <__assert_fail@plt+0xfcb4>
   19e80:	b	1a3ac <__assert_fail@plt+0x77f0>
   19e84:	ldr	r4, [r8, #8]
   19e88:	ldr	r0, [sp, #24]
   19e8c:	ldrd	r0, [r0]
   19e90:	mov	r3, #1
   19e94:	mov	r2, #0
   19e98:	str	r3, [sp]
   19e9c:	b	1a02c <__assert_fail@plt+0x7470>
   19ea0:	ldr	r2, [sp, #28]
   19ea4:	ldr	r0, [sp, #32]
   19ea8:	str	r5, [sp, #20]
   19eac:	ldr	r6, [r8, #8]
   19eb0:	ldrd	r4, [r2]
   19eb4:	ldrd	r0, [r0]
   19eb8:	orrs	r2, r4, r5
   19ebc:	beq	1a0b4 <__assert_fail@plt+0x74f8>
   19ec0:	bl	3d3a0 <__assert_fail@plt+0x2a7e4>
   19ec4:	vldr	d8, [pc, #868]	; 1a230 <__assert_fail@plt+0x7674>
   19ec8:	vmov	d9, r0, r1
   19ecc:	mov	r0, r4
   19ed0:	mov	r1, r5
   19ed4:	bl	3d3a0 <__assert_fail@plt+0x2a7e4>
   19ed8:	vmov	d16, r0, r1
   19edc:	vmul.f64	d17, d9, d8
   19ee0:	vdiv.f64	d16, d17, d16
   19ee4:	b	1a154 <__assert_fail@plt+0x7598>
   19ee8:	ldr	r1, [r8, #8]
   19eec:	mov	r0, r7
   19ef0:	mov	r2, sl
   19ef4:	bl	1ac0c <__assert_fail@plt+0x8050>
   19ef8:	b	1a3bc <__assert_fail@plt+0x7800>
   19efc:	ldr	r0, [sp, #44]	; 0x2c
   19f00:	ldr	r4, [r8, #8]
   19f04:	ldrd	r0, [r0]
   19f08:	bl	1a9e8 <__assert_fail@plt+0x7e2c>
   19f0c:	b	1a0a4 <__assert_fail@plt+0x74e8>
   19f10:	movw	r4, #20056	; 0x4e58
   19f14:	movw	r2, #20100	; 0x4e84
   19f18:	movt	r4, #5
   19f1c:	movt	r2, #5
   19f20:	ldr	r3, [r2, #64]	; 0x40
   19f24:	ldr	r1, [r4, #12]
   19f28:	ldr	r0, [r4, #16]
   19f2c:	add	r2, sp, #48	; 0x30
   19f30:	blx	r3
   19f34:	ldr	r1, [r8, #8]
   19f38:	cmn	r0, #1
   19f3c:	ble	1a0d0 <__assert_fail@plt+0x7514>
   19f40:	ldr	r2, [sp, #48]	; 0x30
   19f44:	mov	r0, r7
   19f48:	bl	1a438 <__assert_fail@plt+0x787c>
   19f4c:	ldr	r0, [sp, #48]	; 0x30
   19f50:	bl	12acc <freecon@plt>
   19f54:	b	1a3bc <__assert_fail@plt+0x7800>
   19f58:	ldr	r6, [r8, #8]
   19f5c:	ldr	r0, [sp, #36]	; 0x24
   19f60:	ldrd	r0, [r0]
   19f64:	bl	1a9e8 <__assert_fail@plt+0x7e2c>
   19f68:	b	1a3ac <__assert_fail@plt+0x77f0>
   19f6c:	mov	r0, sl
   19f70:	bl	21544 <__assert_fail@plt+0xe988>
   19f74:	mov	r6, r0
   19f78:	b	19fe4 <__assert_fail@plt+0x7428>
   19f7c:	mov	r0, sl
   19f80:	bl	2adf0 <__assert_fail@plt+0x18234>
   19f84:	mov	r6, r0
   19f88:	bl	1288c <strlen@plt>
   19f8c:	add	r0, r6, r0
   19f90:	sub	r1, r0, #1
   19f94:	mov	r0, r1
   19f98:	cmp	r6, r1
   19f9c:	bhi	19fb0 <__assert_fail@plt+0x73f4>
   19fa0:	mov	r1, r0
   19fa4:	ldrb	r2, [r1], #-1
   19fa8:	cmp	r2, #47	; 0x2f
   19fac:	beq	19f94 <__assert_fail@plt+0x73d8>
   19fb0:	cmp	r6, r0
   19fb4:	bcs	19fc8 <__assert_fail@plt+0x740c>
   19fb8:	ldrb	r1, [r0, #1]
   19fbc:	cmp	r1, #47	; 0x2f
   19fc0:	moveq	r1, #0
   19fc4:	strbeq	r1, [r0, #1]
   19fc8:	mov	r0, r6
   19fcc:	mov	r1, #47	; 0x2f
   19fd0:	bl	12a18 <strrchr@plt>
   19fd4:	cmp	r0, #0
   19fd8:	beq	1a130 <__assert_fail@plt+0x7574>
   19fdc:	mov	r1, #0
   19fe0:	strb	r1, [r0]
   19fe4:	ldr	r1, [r8, #8]
   19fe8:	mov	r0, r7
   19fec:	mov	r2, r6
   19ff0:	bl	1ac0c <__assert_fail@plt+0x8050>
   19ff4:	mov	r0, r6
   19ff8:	bl	2c048 <__assert_fail@plt+0x1948c>
   19ffc:	b	1a3bc <__assert_fail@plt+0x7800>
   1a000:	ldr	r2, [r9, #16]
   1a004:	ldr	r1, [r8, #8]
   1a008:	bfc	r2, #12, #20
   1a00c:	b	1a064 <__assert_fail@plt+0x74a8>
   1a010:	ldr	r0, [sp, #32]
   1a014:	ldr	r4, [r8, #8]
   1a018:	mov	r6, #512	; 0x200
   1a01c:	mov	r2, #0
   1a020:	mov	r3, #1024	; 0x400
   1a024:	ldrd	r0, [r0]
   1a028:	str	r6, [sp]
   1a02c:	stmib	sp, {r2, r3}
   1a030:	str	r2, [sp, #12]
   1a034:	add	r2, sp, #152	; 0x98
   1a038:	b	1a090 <__assert_fail@plt+0x74d4>
   1a03c:	ldr	r0, [r9, #24]
   1a040:	bl	124e4 <getpwuid@plt>
   1a044:	cmp	r0, #0
   1a048:	beq	1a06c <__assert_fail@plt+0x74b0>
   1a04c:	ldr	r1, [r8, #8]
   1a050:	ldr	r2, [r8, #12]
   1a054:	mov	r3, #115	; 0x73
   1a058:	strb	r3, [r1, r2]
   1a05c:	ldr	r2, [r0]
   1a060:	ldr	r1, [r8, #8]
   1a064:	mov	r0, r7
   1a068:	b	1a3b8 <__assert_fail@plt+0x77fc>
   1a06c:	ldr	r4, [r8, #8]
   1a070:	ldr	r0, [r9, #24]
   1a074:	mov	r2, #1
   1a078:	mov	r1, #0
   1a07c:	str	r2, [sp]
   1a080:	stmib	sp, {r1, r2}
   1a084:	str	r1, [sp, #12]
   1a088:	add	r2, sp, #152	; 0x98
   1a08c:	mov	r1, #0
   1a090:	mov	r3, #0
   1a094:	bl	22870 <__assert_fail@plt+0xfcb4>
   1a098:	b	1a0a4 <__assert_fail@plt+0x74e8>
   1a09c:	ldr	r4, [r8, #8]
   1a0a0:	bl	1ac60 <__assert_fail@plt+0x80a4>
   1a0a4:	mov	r2, r0
   1a0a8:	mov	r0, r7
   1a0ac:	mov	r1, r4
   1a0b0:	b	1a3b8 <__assert_fail@plt+0x77fc>
   1a0b4:	orrs	r0, r0, r1
   1a0b8:	beq	1a150 <__assert_fail@plt+0x7594>
   1a0bc:	add	r0, pc, #868	; 0x364
   1a0c0:	cmp	r1, #0
   1a0c4:	addlt	r0, r0, #8
   1a0c8:	vldr	d16, [r0]
   1a0cc:	b	1a154 <__assert_fail@plt+0x7598>
   1a0d0:	movw	r2, #63055	; 0xf64f
   1a0d4:	mov	r0, r7
   1a0d8:	movt	r2, #3
   1a0dc:	bl	1a438 <__assert_fail@plt+0x787c>
   1a0e0:	bl	128d4 <__errno_location@plt>
   1a0e4:	ldr	r0, [r0]
   1a0e8:	movw	r1, #57257	; 0xdfa9
   1a0ec:	mov	r2, #5
   1a0f0:	movt	r1, #3
   1a0f4:	str	r0, [sp, #20]
   1a0f8:	mov	r0, #0
   1a0fc:	bl	1264c <dcgettext@plt>
   1a100:	mov	r6, r0
   1a104:	mov	r0, #0
   1a108:	mov	r1, sl
   1a10c:	bl	19020 <__assert_fail@plt+0x6464>
   1a110:	ldr	r1, [sp, #20]
   1a114:	mov	r3, r0
   1a118:	mov	r0, #0
   1a11c:	mov	r2, r6
   1a120:	bl	12790 <error@plt>
   1a124:	mov	r0, #1
   1a128:	str	r0, [r4, #28]
   1a12c:	b	1a3bc <__assert_fail@plt+0x7800>
   1a130:	ldr	r1, [r8, #8]
   1a134:	movw	r2, #59684	; 0xe924
   1a138:	mov	r0, r7
   1a13c:	movt	r2, #3
   1a140:	b	19ff0 <__assert_fail@plt+0x7434>
   1a144:	ldr	r4, [r8, #8]
   1a148:	ldr	r0, [sp, #64]	; 0x40
   1a14c:	b	19c60 <__assert_fail@plt+0x70a4>
   1a150:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1a154:	vmov	r2, r3, d16
   1a158:	mov	r0, r7
   1a15c:	mov	r1, r6
   1a160:	bl	1a438 <__assert_fail@plt+0x787c>
   1a164:	ldr	r5, [sp, #20]
   1a168:	b	1a3bc <__assert_fail@plt+0x7800>
   1a16c:	ldr	r1, [r8, #8]
   1a170:	cmp	r0, #40	; 0x28
   1a174:	bne	1a184 <__assert_fail@plt+0x75c8>
   1a178:	movw	r2, #63412	; 0xf7b4
   1a17c:	movt	r2, #3
   1a180:	b	1a064 <__assert_fail@plt+0x74a8>
   1a184:	movw	r2, #2362	; 0x93a
   1a188:	mov	r0, r7
   1a18c:	movt	r2, #4
   1a190:	bl	1a438 <__assert_fail@plt+0x787c>
   1a194:	ldr	r4, [r6]
   1a198:	mov	r0, #0
   1a19c:	mov	r1, sl
   1a1a0:	bl	19020 <__assert_fail@plt+0x6464>
   1a1a4:	movw	r2, #14847	; 0x39ff
   1a1a8:	mov	r3, r0
   1a1ac:	mov	r0, #0
   1a1b0:	mov	r1, r4
   1a1b4:	movt	r2, #4
   1a1b8:	bl	12790 <error@plt>
   1a1bc:	b	1a3bc <__assert_fail@plt+0x7800>
   1a1c0:	ldr	r0, [r8]
   1a1c4:	cmp	r0, #2
   1a1c8:	bne	1a1f4 <__assert_fail@plt+0x7638>
   1a1cc:	ldrb	r2, [r8, #5]
   1a1d0:	cmp	r2, #0
   1a1d4:	beq	1a218 <__assert_fail@plt+0x765c>
   1a1d8:	ldrb	r0, [r8, #4]
   1a1dc:	cmp	r0, #66	; 0x42
   1a1e0:	bgt	1a358 <__assert_fail@plt+0x779c>
   1a1e4:	cmp	r0, #65	; 0x41
   1a1e8:	bne	1a368 <__assert_fail@plt+0x77ac>
   1a1ec:	ldr	r0, [sp, #36]	; 0x24
   1a1f0:	b	1a3a0 <__assert_fail@plt+0x77e4>
   1a1f4:	cmp	r0, #1
   1a1f8:	beq	1a324 <__assert_fail@plt+0x7768>
   1a1fc:	cmp	r0, #0
   1a200:	bne	1a3bc <__assert_fail@plt+0x7800>
   1a204:	ldr	r0, [r8, #8]
   1a208:	ldr	r1, [r8, #12]
   1a20c:	mov	r2, r7
   1a210:	bl	1a9ac <__assert_fail@plt+0x7df0>
   1a214:	b	1a3bc <__assert_fail@plt+0x7800>
   1a218:	ldrb	r0, [r8, #4]
   1a21c:	sub	r1, r0, #68	; 0x44
   1a220:	cmp	r1, #53	; 0x35
   1a224:	bhi	19c44 <__assert_fail@plt+0x7088>
   1a228:	add	r0, pc, #8
   1a22c:	ldr	pc, [r0, r1, lsl #2]
   1a230:	andeq	r0, r0, r0
   1a234:	addmi	r0, r0, r0
   1a238:	andeq	sl, r1, r0, lsl r3
   1a23c:			; <UNDEFINED> instruction: 0x0001a3bc
   1a240:	ldrdeq	r9, [r1], -r8
   1a244:	andeq	r9, r1, r4, asr #26
   1a248:			; <UNDEFINED> instruction: 0x00019cb0
   1a24c:			; <UNDEFINED> instruction: 0x0001a3bc
   1a250:			; <UNDEFINED> instruction: 0x0001a3bc
   1a254:			; <UNDEFINED> instruction: 0x0001a3bc
   1a258:			; <UNDEFINED> instruction: 0x0001a3bc
   1a25c:	strdeq	r9, [r1], -r4
   1a260:			; <UNDEFINED> instruction: 0x0001a3bc
   1a264:			; <UNDEFINED> instruction: 0x0001a3bc
   1a268:	andeq	r9, r1, r8, ror #24
   1a26c:			; <UNDEFINED> instruction: 0x0001a3bc
   1a270:			; <UNDEFINED> instruction: 0x0001a3bc
   1a274:	andeq	r9, r1, r0, lsr #29
   1a278:			; <UNDEFINED> instruction: 0x0001a3bc
   1a27c:	andeq	sl, r1, ip, rrx
   1a280:			; <UNDEFINED> instruction: 0x0001a3bc
   1a284:			; <UNDEFINED> instruction: 0x0001a3bc
   1a288:			; <UNDEFINED> instruction: 0x0001a3bc
   1a28c:	strdeq	r9, [r1], -r8
   1a290:	andeq	r9, r1, r0, lsl pc
   1a294:			; <UNDEFINED> instruction: 0x0001a3bc
   1a298:			; <UNDEFINED> instruction: 0x0001a3bc
   1a29c:			; <UNDEFINED> instruction: 0x0001a3bc
   1a2a0:			; <UNDEFINED> instruction: 0x0001a3bc
   1a2a4:			; <UNDEFINED> instruction: 0x0001a3bc
   1a2a8:			; <UNDEFINED> instruction: 0x0001a3bc
   1a2ac:	andeq	r9, r1, r8, asr pc
   1a2b0:	andeq	r9, r1, r4, asr lr
   1a2b4:	andeq	r9, r1, ip, lsl sp
   1a2b8:	andeq	r9, r1, r8, lsr #26
   1a2bc:			; <UNDEFINED> instruction: 0x0001a3bc
   1a2c0:	andeq	r9, r1, ip, ror #30
   1a2c4:	andeq	r9, r1, r4, lsr sp
   1a2c8:	andeq	r9, r1, ip, ror pc
   1a2cc:	andeq	r9, r1, r4, lsl #29
   1a2d0:			; <UNDEFINED> instruction: 0x0001a3bc
   1a2d4:	andeq	sl, r1, r0, lsl r0
   1a2d8:	andeq	r9, r1, ip, ror #26
   1a2dc:	andeq	sl, r1, r0
   1a2e0:	andeq	r9, r1, r4, lsr #25
   1a2e4:			; <UNDEFINED> instruction: 0x0001a3bc
   1a2e8:	andeq	r9, r1, r8, ror #29
   1a2ec:			; <UNDEFINED> instruction: 0x0001a3bc
   1a2f0:			; <UNDEFINED> instruction: 0x0001a3bc
   1a2f4:	andeq	r9, r1, ip, asr #27
   1a2f8:	strdeq	r9, [r1], -ip
   1a2fc:	andeq	sl, r1, ip, lsr r0
   1a300:			; <UNDEFINED> instruction: 0x0001a3bc
   1a304:			; <UNDEFINED> instruction: 0x0001a3bc
   1a308:			; <UNDEFINED> instruction: 0x0001a3bc
   1a30c:	andeq	r9, r1, r8, asr ip
   1a310:	ldr	r6, [r8, #8]
   1a314:	ldrd	r0, [r9]
   1a318:	mov	r2, #0
   1a31c:	mov	r3, #1
   1a320:	b	19e68 <__assert_fail@plt+0x72ac>
   1a324:	ldr	r0, [r8, #8]
   1a328:	ldr	r1, [r8, #12]
   1a32c:	mov	r2, r7
   1a330:	bl	1a9ac <__assert_fail@plt+0x7df0>
   1a334:	ldr	r0, [r7, #4]
   1a338:	bl	2bfec <__assert_fail@plt+0x19430>
   1a33c:	cmp	r0, #0
   1a340:	beq	1a3bc <__assert_fail@plt+0x7800>
   1a344:	bl	128d4 <__errno_location@plt>
   1a348:	ldr	r0, [r0]
   1a34c:	ldr	r1, [r5, #48]	; 0x30
   1a350:	bl	184b8 <__assert_fail@plt+0x58fc>
   1a354:	b	1a3bc <__assert_fail@plt+0x7800>
   1a358:	cmp	r0, #67	; 0x43
   1a35c:	bne	1a394 <__assert_fail@plt+0x77d8>
   1a360:	ldr	r0, [sp, #40]	; 0x28
   1a364:	b	1a3a0 <__assert_fail@plt+0x77e4>
   1a368:	cmp	r0, #66	; 0x42
   1a36c:	bne	1a3dc <__assert_fail@plt+0x7820>
   1a370:	mvn	r1, #0
   1a374:	cmp	r2, #64	; 0x40
   1a378:	mvn	r0, #0
   1a37c:	beq	1a3a4 <__assert_fail@plt+0x77e8>
   1a380:	ldr	r1, [r8, #8]
   1a384:	movw	r2, #63055	; 0xf64f
   1a388:	mov	r0, r7
   1a38c:	movt	r2, #3
   1a390:	b	1a3b8 <__assert_fail@plt+0x77fc>
   1a394:	cmp	r0, #84	; 0x54
   1a398:	bne	1a3dc <__assert_fail@plt+0x7820>
   1a39c:	ldr	r0, [sp, #44]	; 0x2c
   1a3a0:	ldrd	r0, [r0]
   1a3a4:	ldr	r6, [r8, #8]
   1a3a8:	bl	1a48c <__assert_fail@plt+0x78d0>
   1a3ac:	mov	r2, r0
   1a3b0:	mov	r0, r7
   1a3b4:	mov	r1, r6
   1a3b8:	bl	1a438 <__assert_fail@plt+0x787c>
   1a3bc:	ldr	r8, [r8, #16]
   1a3c0:	cmp	r8, #0
   1a3c4:	bne	1a1c0 <__assert_fail@plt+0x7604>
   1a3c8:	mov	r0, #1
   1a3cc:	sub	sp, fp, #48	; 0x30
   1a3d0:	vpop	{d8-d9}
   1a3d4:	add	sp, sp, #4
   1a3d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3dc:	movw	r0, #60281	; 0xeb79
   1a3e0:	movw	r1, #64857	; 0xfd59
   1a3e4:	movw	r3, #65361	; 0xff51
   1a3e8:	movw	r2, #1304	; 0x518
   1a3ec:	movt	r0, #3
   1a3f0:	movt	r1, #3
   1a3f4:	movt	r3, #3
   1a3f8:	bl	12bbc <__assert_fail@plt>
   1a3fc:	movw	r1, #65142	; 0xfe76
   1a400:	mov	r0, #0
   1a404:	mov	r2, #5
   1a408:	movt	r1, #3
   1a40c:	bl	1264c <dcgettext@plt>
   1a410:	movw	r3, #65461	; 0xffb5
   1a414:	mov	r2, r0
   1a418:	mov	r0, #1
   1a41c:	mov	r1, #0
   1a420:	movt	r3, #3
   1a424:	bl	12790 <error@plt>
   1a428:	andeq	r0, r0, r0
   1a42c:	svcvc	0x00f00000	; IMB
   1a430:	andeq	r0, r0, r0
   1a434:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1a438:	sub	sp, sp, #8
   1a43c:	push	{r4, sl, fp, lr}
   1a440:	add	fp, sp, #8
   1a444:	sub	sp, sp, #8
   1a448:	str	r2, [fp, #8]
   1a44c:	add	r2, fp, #8
   1a450:	str	r3, [fp, #12]
   1a454:	mov	r4, r0
   1a458:	str	r2, [sp, #4]
   1a45c:	ldr	r0, [r0, #4]
   1a460:	bl	12a24 <vfprintf@plt>
   1a464:	cmn	r0, #1
   1a468:	bgt	1a47c <__assert_fail@plt+0x78c0>
   1a46c:	bl	128d4 <__errno_location@plt>
   1a470:	ldr	r0, [r0]
   1a474:	ldr	r1, [r4, #8]
   1a478:	bl	184b8 <__assert_fail@plt+0x58fc>
   1a47c:	sub	sp, fp, #8
   1a480:	pop	{r4, sl, fp, lr}
   1a484:	add	sp, sp, #8
   1a488:	bx	lr
   1a48c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a490:	add	fp, sp, #28
   1a494:	sub	sp, sp, #148	; 0x94
   1a498:	mov	r4, r2
   1a49c:	mov	r3, r1
   1a4a0:	cmp	r2, #43	; 0x2b
   1a4a4:	str	r1, [fp, #-76]	; 0xffffffb4
   1a4a8:	str	r0, [fp, #-80]	; 0xffffffb0
   1a4ac:	bne	1a4d0 <__assert_fail@plt+0x7914>
   1a4b0:	movw	r0, #576	; 0x240
   1a4b4:	movt	r0, #4
   1a4b8:	vldr	d16, [r0]
   1a4bc:	movw	r0, #9515	; 0x252b
   1a4c0:	movt	r0, #84	; 0x54
   1a4c4:	str	r0, [sp, #56]	; 0x38
   1a4c8:	vstr	d16, [sp, #48]	; 0x30
   1a4cc:	b	1a504 <__assert_fail@plt+0x7948>
   1a4d0:	mov	r0, #37	; 0x25
   1a4d4:	strb	r4, [sp, #49]	; 0x31
   1a4d8:	mov	r5, #0
   1a4dc:	strb	r0, [sp, #48]	; 0x30
   1a4e0:	sub	r0, r4, #64	; 0x40
   1a4e4:	strb	r5, [sp, #50]	; 0x32
   1a4e8:	cmp	r0, #24
   1a4ec:	bhi	1a6e8 <__assert_fail@plt+0x7b2c>
   1a4f0:	movw	r2, #1
   1a4f4:	mov	r1, #1
   1a4f8:	movt	r2, #280	; 0x118
   1a4fc:	tst	r2, r1, lsl r0
   1a500:	beq	1a6e8 <__assert_fail@plt+0x7b2c>
   1a504:	movw	r2, #65468	; 0xffbc
   1a508:	add	r0, sp, #64	; 0x40
   1a50c:	mov	r1, #32
   1a510:	movt	r2, #3
   1a514:	bl	128ec <snprintf@plt>
   1a518:	cmp	r0, #32
   1a51c:	bge	1a6f4 <__assert_fail@plt+0x7b38>
   1a520:	mov	r9, r0
   1a524:	mov	r5, #1
   1a528:	cmp	r4, #64	; 0x40
   1a52c:	beq	1a5fc <__assert_fail@plt+0x7a40>
   1a530:	sub	r0, fp, #80	; 0x50
   1a534:	bl	12820 <localtime@plt>
   1a538:	cmp	r0, #0
   1a53c:	beq	1a5fc <__assert_fail@plt+0x7a40>
   1a540:	add	r6, sp, #48	; 0x30
   1a544:	mov	r8, r0
   1a548:	mov	r0, r6
   1a54c:	bl	1288c <strlen@plt>
   1a550:	mov	r7, r0
   1a554:	add	r0, r0, #2
   1a558:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1a55c:	mov	r1, #95	; 0x5f
   1a560:	mov	sl, r0
   1a564:	add	r2, r7, #1
   1a568:	strb	r1, [r0], #1
   1a56c:	mov	r1, r6
   1a570:	bl	125c8 <memcpy@plt>
   1a574:	mov	r1, r8
   1a578:	sub	r0, fp, #72	; 0x48
   1a57c:	ldm	r1!, {r2, r3, r5, r6, r7}
   1a580:	stmia	r0!, {r2, r3, r5, r6, r7}
   1a584:	ldm	r1, {r2, r3, r4, r5, r6, r7}
   1a588:	mov	r1, #11
   1a58c:	stm	r0, {r2, r3, r4, r5, r6, r7}
   1a590:	movw	r5, #18632	; 0x48c8
   1a594:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a598:	movt	r5, #5
   1a59c:	cmp	r0, #10
   1a5a0:	mvngt	r1, #10
   1a5a4:	add	r0, r1, r0
   1a5a8:	str	r0, [fp, #-72]	; 0xffffffb8
   1a5ac:	ldr	r0, [r5]
   1a5b0:	cmp	r0, #0
   1a5b4:	bne	1a5d4 <__assert_fail@plt+0x7a18>
   1a5b8:	movw	r0, #18636	; 0x48cc
   1a5bc:	mov	r1, #1
   1a5c0:	movt	r0, #5
   1a5c4:	str	r1, [r0]
   1a5c8:	mov	r0, #1
   1a5cc:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1a5d0:	str	r0, [r5]
   1a5d4:	movw	r7, #18636	; 0x48cc
   1a5d8:	mov	r2, sl
   1a5dc:	mov	r3, r8
   1a5e0:	movt	r7, #5
   1a5e4:	ldr	r1, [r7]
   1a5e8:	bl	12808 <strftime@plt>
   1a5ec:	cmp	r0, #0
   1a5f0:	beq	1a79c <__assert_fail@plt+0x7be0>
   1a5f4:	ldr	r1, [r7]
   1a5f8:	b	1a794 <__assert_fail@plt+0x7bd8>
   1a5fc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1a600:	mov	r2, #1
   1a604:	mov	r1, #0
   1a608:	movw	r6, #17840	; 0x45b0
   1a60c:	mov	r3, #0
   1a610:	str	r2, [sp]
   1a614:	stmib	sp, {r1, r2}
   1a618:	str	r1, [sp, #12]
   1a61c:	movt	r6, #5
   1a620:	asr	r1, r0, #31
   1a624:	adds	r2, r0, r0, asr #31
   1a628:	adc	r1, r1, r0, asr #31
   1a62c:	eor	r1, r1, r0, asr #31
   1a630:	eor	r0, r2, r0, asr #31
   1a634:	add	r2, r6, #1
   1a638:	bl	22870 <__assert_fail@plt+0xfcb4>
   1a63c:	cmp	r0, r6
   1a640:	bls	1a714 <__assert_fail@plt+0x7b58>
   1a644:	mov	r4, r0
   1a648:	movw	r0, #791	; 0x317
   1a64c:	add	r0, r6, r0
   1a650:	cmp	r4, r0
   1a654:	bcs	1a734 <__assert_fail@plt+0x7b78>
   1a658:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1a65c:	cmn	r0, #1
   1a660:	movle	r0, #45	; 0x2d
   1a664:	strble	r0, [r4, #-1]!
   1a668:	cmp	r5, #0
   1a66c:	beq	1a90c <__assert_fail@plt+0x7d50>
   1a670:	mov	r0, r4
   1a674:	sub	r5, r4, r6
   1a678:	bl	1288c <strlen@plt>
   1a67c:	add	r0, r0, r5
   1a680:	movw	r1, #791	; 0x317
   1a684:	cmp	r0, r1
   1a688:	bcs	1a754 <__assert_fail@plt+0x7b98>
   1a68c:	movw	r1, #790	; 0x316
   1a690:	add	r5, sp, #64	; 0x40
   1a694:	sub	r6, r1, r0
   1a698:	mov	r0, r5
   1a69c:	bl	1288c <strlen@plt>
   1a6a0:	cmp	r0, r6
   1a6a4:	bcc	1a6c8 <__assert_fail@plt+0x7b0c>
   1a6a8:	movw	r2, #57	; 0x39
   1a6ac:	mov	r0, #0
   1a6b0:	mov	r1, #0
   1a6b4:	mov	r3, r9
   1a6b8:	str	r6, [sp]
   1a6bc:	str	r5, [sp, #4]
   1a6c0:	movt	r2, #4
   1a6c4:	bl	12790 <error@plt>
   1a6c8:	add	r0, sp, #64	; 0x40
   1a6cc:	bl	1288c <strlen@plt>
   1a6d0:	cmp	r0, r6
   1a6d4:	bcs	1a774 <__assert_fail@plt+0x7bb8>
   1a6d8:	add	r1, sp, #64	; 0x40
   1a6dc:	mov	r0, r4
   1a6e0:	bl	1270c <strcat@plt>
   1a6e4:	b	1a90c <__assert_fail@plt+0x7d50>
   1a6e8:	mov	r9, #0
   1a6ec:	strb	r5, [sp, #64]	; 0x40
   1a6f0:	b	1a528 <__assert_fail@plt+0x796c>
   1a6f4:	movw	r0, #65476	; 0xffc4
   1a6f8:	movw	r1, #64857	; 0xfd59
   1a6fc:	movw	r3, #65502	; 0xffde
   1a700:	movw	r2, #665	; 0x299
   1a704:	movt	r0, #3
   1a708:	movt	r1, #3
   1a70c:	movt	r3, #3
   1a710:	bl	12bbc <__assert_fail@plt>
   1a714:	movw	r0, #6
   1a718:	movw	r1, #64857	; 0xfd59
   1a71c:	movw	r3, #65502	; 0xffde
   1a720:	movw	r2, #697	; 0x2b9
   1a724:	movt	r0, #4
   1a728:	movt	r1, #3
   1a72c:	movt	r3, #3
   1a730:	bl	12bbc <__assert_fail@plt>
   1a734:	movw	r0, #14
   1a738:	movw	r1, #64857	; 0xfd59
   1a73c:	movw	r3, #65502	; 0xffde
   1a740:	movw	r2, #698	; 0x2ba
   1a744:	movt	r0, #4
   1a748:	movt	r1, #3
   1a74c:	movt	r3, #3
   1a750:	bl	12bbc <__assert_fail@plt>
   1a754:	movw	r0, #39	; 0x27
   1a758:	movw	r1, #64857	; 0xfd59
   1a75c:	movw	r3, #65502	; 0xffde
   1a760:	movw	r2, #711	; 0x2c7
   1a764:	movt	r0, #4
   1a768:	movt	r1, #3
   1a76c:	movt	r3, #3
   1a770:	bl	12bbc <__assert_fail@plt>
   1a774:	movw	r0, #103	; 0x67
   1a778:	movw	r1, #64857	; 0xfd59
   1a77c:	movw	r3, #65502	; 0xffde
   1a780:	mov	r2, #720	; 0x2d0
   1a784:	movt	r0, #4
   1a788:	movt	r1, #3
   1a78c:	movt	r3, #3
   1a790:	bl	12bbc <__assert_fail@plt>
   1a794:	cmp	r0, r1
   1a798:	bcc	1a7d0 <__assert_fail@plt+0x7c14>
   1a79c:	ldr	r0, [r5]
   1a7a0:	mov	r1, r7
   1a7a4:	mov	r2, #1
   1a7a8:	bl	2aaec <__assert_fail@plt+0x17f30>
   1a7ac:	ldr	r1, [r7]
   1a7b0:	mov	r2, sl
   1a7b4:	mov	r3, r8
   1a7b8:	str	r0, [r5]
   1a7bc:	bl	12808 <strftime@plt>
   1a7c0:	ldr	r1, [r7]
   1a7c4:	cmp	r0, #0
   1a7c8:	bne	1a794 <__assert_fail@plt+0x7bd8>
   1a7cc:	b	1a79c <__assert_fail@plt+0x7be0>
   1a7d0:	str	r0, [sp, #20]
   1a7d4:	add	r0, r9, r0
   1a7d8:	str	r9, [sp, #28]
   1a7dc:	add	r4, r0, #1
   1a7e0:	ldr	r0, [r5]
   1a7e4:	mov	r1, r4
   1a7e8:	bl	2aa28 <__assert_fail@plt+0x17e6c>
   1a7ec:	str	r0, [r5]
   1a7f0:	mov	r0, r4
   1a7f4:	str	r4, [r7]
   1a7f8:	str	r4, [sp, #24]
   1a7fc:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1a800:	ldr	r1, [r7]
   1a804:	sub	r3, fp, #72	; 0x48
   1a808:	mov	r2, sl
   1a80c:	str	r0, [sp, #40]	; 0x28
   1a810:	str	sl, [sp, #36]	; 0x24
   1a814:	bl	12808 <strftime@plt>
   1a818:	ldr	r0, [r5]
   1a81c:	ldrb	r1, [r0]
   1a820:	str	r0, [sp, #32]
   1a824:	cmp	r1, #0
   1a828:	beq	1a8ec <__assert_fail@plt+0x7d30>
   1a82c:	ldr	r2, [sp, #40]	; 0x28
   1a830:	ldr	r3, [sp, #32]
   1a834:	mov	r8, #0
   1a838:	mov	r7, #0
   1a83c:	mov	r6, #0
   1a840:	ldrb	r0, [r2]
   1a844:	add	sl, r2, #1
   1a848:	add	r5, r3, #1
   1a84c:	mov	r3, #0
   1a850:	str	r3, [sp, #44]	; 0x2c
   1a854:	clz	r2, r0
   1a858:	lsr	r2, r2, #5
   1a85c:	tst	r2, #1
   1a860:	bne	1a8ec <__assert_fail@plt+0x7d30>
   1a864:	uxtb	r4, r1
   1a868:	uxtb	r9, r0
   1a86c:	cmp	r4, r9
   1a870:	beq	1a8c4 <__assert_fail@plt+0x7d08>
   1a874:	bl	12844 <__ctype_b_loc@plt>
   1a878:	ldr	r0, [r0]
   1a87c:	add	r1, r0, r4, lsl #1
   1a880:	ldrb	r1, [r1, #1]
   1a884:	tst	r1, #8
   1a888:	addne	r0, r0, r9, lsl #1
   1a88c:	ldrbne	r0, [r0, #1]
   1a890:	tstne	r0, #8
   1a894:	beq	1a8ec <__assert_fail@plt+0x7d30>
   1a898:	tst	r6, #1
   1a89c:	beq	1a8b8 <__assert_fail@plt+0x7cfc>
   1a8a0:	ldr	r0, [sp, #44]	; 0x2c
   1a8a4:	sub	r0, r7, r0
   1a8a8:	cmp	r0, r8
   1a8ac:	bne	1a8ec <__assert_fail@plt+0x7d30>
   1a8b0:	add	r8, r8, #1
   1a8b4:	b	1a8c0 <__assert_fail@plt+0x7d04>
   1a8b8:	str	r7, [sp, #44]	; 0x2c
   1a8bc:	mov	r8, #1
   1a8c0:	mov	r6, #1
   1a8c4:	ldrb	r0, [sl, r7]
   1a8c8:	ldrb	r1, [r5, r7]
   1a8cc:	add	r7, r7, #1
   1a8d0:	clz	r2, r0
   1a8d4:	cmp	r1, #0
   1a8d8:	lsr	r2, r2, #5
   1a8dc:	bne	1a85c <__assert_fail@plt+0x7ca0>
   1a8e0:	cmp	r8, #2
   1a8e4:	cmpeq	r0, #0
   1a8e8:	beq	1a918 <__assert_fail@plt+0x7d5c>
   1a8ec:	ldr	r0, [sp, #36]	; 0x24
   1a8f0:	bl	2c048 <__assert_fail@plt+0x1948c>
   1a8f4:	ldr	r0, [sp, #40]	; 0x28
   1a8f8:	bl	2c048 <__assert_fail@plt+0x1948c>
   1a8fc:	movw	r0, #18632	; 0x48c8
   1a900:	movt	r0, #5
   1a904:	ldr	r0, [r0]
   1a908:	add	r4, r0, #1
   1a90c:	mov	r0, r4
   1a910:	sub	sp, fp, #28
   1a914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a918:	ldr	r0, [sp, #44]	; 0x2c
   1a91c:	add	r4, r0, #2
   1a920:	bl	12844 <__ctype_b_loc@plt>
   1a924:	ldr	r1, [sp, #32]
   1a928:	ldr	r0, [r0]
   1a92c:	ldrb	r2, [r1, r4]!
   1a930:	add	r0, r0, r2, lsl #1
   1a934:	ldrb	r0, [r0, #1]
   1a938:	tst	r0, #8
   1a93c:	bne	1a8ec <__assert_fail@plt+0x7d30>
   1a940:	ldr	r2, [sp, #20]
   1a944:	ldr	r7, [sp, #28]
   1a948:	ldr	r3, [sp, #24]
   1a94c:	sub	r2, r2, r4
   1a950:	add	r0, r4, r7
   1a954:	add	r2, r2, #1
   1a958:	add	r0, r0, r2
   1a95c:	cmp	r0, r3
   1a960:	bne	1a98c <__assert_fail@plt+0x7dd0>
   1a964:	add	r0, r1, r7
   1a968:	bl	1255c <memmove@plt>
   1a96c:	ldr	r0, [sp, #32]
   1a970:	ldr	r1, [sp, #44]	; 0x2c
   1a974:	mov	r2, r7
   1a978:	add	r0, r0, r1
   1a97c:	add	r1, sp, #64	; 0x40
   1a980:	add	r0, r0, #2
   1a984:	bl	125c8 <memcpy@plt>
   1a988:	b	1a8ec <__assert_fail@plt+0x7d30>
   1a98c:	movw	r0, #131	; 0x83
   1a990:	movw	r1, #64857	; 0xfd59
   1a994:	movw	r3, #182	; 0xb6
   1a998:	movw	r2, #549	; 0x225
   1a99c:	movt	r0, #4
   1a9a0:	movt	r1, #3
   1a9a4:	movt	r3, #4
   1a9a8:	bl	12bbc <__assert_fail@plt>
   1a9ac:	push	{r4, r5, fp, lr}
   1a9b0:	add	fp, sp, #8
   1a9b4:	ldr	r3, [r2, #4]
   1a9b8:	mov	r5, r1
   1a9bc:	mov	r4, r2
   1a9c0:	mov	r1, #1
   1a9c4:	mov	r2, r5
   1a9c8:	bl	12700 <fwrite@plt>
   1a9cc:	cmp	r0, r5
   1a9d0:	popcs	{r4, r5, fp, pc}
   1a9d4:	bl	128d4 <__errno_location@plt>
   1a9d8:	ldr	r0, [r0]
   1a9dc:	ldr	r1, [r4, #8]
   1a9e0:	pop	{r4, r5, fp, lr}
   1a9e4:	b	184b8 <__assert_fail@plt+0x58fc>
   1a9e8:	push	{r4, r5, fp, lr}
   1a9ec:	add	fp, sp, #8
   1a9f0:	sub	sp, sp, #40	; 0x28
   1a9f4:	str	r1, [fp, #-12]
   1a9f8:	str	r0, [fp, #-16]
   1a9fc:	sub	r0, fp, #16
   1aa00:	bl	12820 <localtime@plt>
   1aa04:	cmp	r0, #0
   1aa08:	beq	1aaec <__assert_fail@plt+0x7f30>
   1aa0c:	ldr	ip, [r0, #24]
   1aa10:	cmn	ip, #1
   1aa14:	ble	1ab0c <__assert_fail@plt+0x7f50>
   1aa18:	cmp	ip, #7
   1aa1c:	bge	1ab2c <__assert_fail@plt+0x7f70>
   1aa20:	ldr	r2, [r0, #16]
   1aa24:	cmn	r2, #1
   1aa28:	ble	1ab4c <__assert_fail@plt+0x7f90>
   1aa2c:	cmp	r2, #12
   1aa30:	bge	1ab6c <__assert_fail@plt+0x7fb0>
   1aa34:	ldr	r3, [r0, #8]
   1aa38:	cmn	r3, #1
   1aa3c:	ble	1ab8c <__assert_fail@plt+0x7fd0>
   1aa40:	cmp	r3, #24
   1aa44:	bge	1abac <__assert_fail@plt+0x7ff0>
   1aa48:	ldr	r4, [r0, #4]
   1aa4c:	cmp	r4, #60	; 0x3c
   1aa50:	bge	1abcc <__assert_fail@plt+0x8010>
   1aa54:	ldr	r1, [r0]
   1aa58:	cmp	r1, #62	; 0x3e
   1aa5c:	bge	1abec <__assert_fail@plt+0x8030>
   1aa60:	ldr	lr, [r0, #12]
   1aa64:	ldr	r0, [r0, #20]
   1aa68:	str	r1, [sp, #16]
   1aa6c:	movw	r1, #620	; 0x26c
   1aa70:	ldr	r5, [fp, #-12]
   1aa74:	str	r3, [sp, #8]
   1aa78:	str	r4, [sp, #12]
   1aa7c:	movw	r4, #18640	; 0x48d0
   1aa80:	movt	r1, #4
   1aa84:	movt	r4, #5
   1aa88:	ldr	r1, [r1, r2, lsl #2]
   1aa8c:	movw	r2, #434	; 0x1b2
   1aa90:	movt	r2, #4
   1aa94:	str	r5, [sp, #20]
   1aa98:	str	lr, [sp, #4]
   1aa9c:	str	r1, [sp]
   1aaa0:	movw	r1, #1900	; 0x76c
   1aaa4:	add	r0, r0, r1
   1aaa8:	mov	r1, #1024	; 0x400
   1aaac:	str	r0, [sp, #24]
   1aab0:	movw	r0, #592	; 0x250
   1aab4:	movt	r0, #4
   1aab8:	ldr	r3, [r0, ip, lsl #2]
   1aabc:	mov	r0, r4
   1aac0:	bl	128ec <snprintf@plt>
   1aac4:	cmp	r0, #1024	; 0x400
   1aac8:	blt	1ab00 <__assert_fail@plt+0x7f44>
   1aacc:	movw	r0, #473	; 0x1d9
   1aad0:	movw	r1, #64857	; 0xfd59
   1aad4:	movw	r3, #276	; 0x114
   1aad8:	movw	r2, #770	; 0x302
   1aadc:	movt	r0, #4
   1aae0:	movt	r1, #3
   1aae4:	movt	r3, #4
   1aae8:	bl	12bbc <__assert_fail@plt>
   1aaec:	ldr	r0, [fp, #-16]
   1aaf0:	ldr	r1, [fp, #-12]
   1aaf4:	mov	r2, #64	; 0x40
   1aaf8:	bl	1a48c <__assert_fail@plt+0x78d0>
   1aafc:	mov	r4, r0
   1ab00:	mov	r0, r4
   1ab04:	sub	sp, fp, #8
   1ab08:	pop	{r4, r5, fp, pc}
   1ab0c:	movw	r0, #258	; 0x102
   1ab10:	movw	r1, #64857	; 0xfd59
   1ab14:	movw	r3, #276	; 0x114
   1ab18:	movw	r2, #749	; 0x2ed
   1ab1c:	movt	r0, #4
   1ab20:	movt	r1, #3
   1ab24:	movt	r3, #4
   1ab28:	bl	12bbc <__assert_fail@plt>
   1ab2c:	movw	r0, #312	; 0x138
   1ab30:	movw	r1, #64857	; 0xfd59
   1ab34:	movw	r3, #276	; 0x114
   1ab38:	movw	r2, #750	; 0x2ee
   1ab3c:	movt	r0, #4
   1ab40:	movt	r1, #3
   1ab44:	movt	r3, #4
   1ab48:	bl	12bbc <__assert_fail@plt>
   1ab4c:	movw	r0, #329	; 0x149
   1ab50:	movw	r1, #64857	; 0xfd59
   1ab54:	movw	r3, #276	; 0x114
   1ab58:	movw	r2, #751	; 0x2ef
   1ab5c:	movt	r0, #4
   1ab60:	movt	r1, #3
   1ab64:	movt	r3, #4
   1ab68:	bl	12bbc <__assert_fail@plt>
   1ab6c:	movw	r0, #346	; 0x15a
   1ab70:	movw	r1, #64857	; 0xfd59
   1ab74:	movw	r3, #276	; 0x114
   1ab78:	mov	r2, #752	; 0x2f0
   1ab7c:	movt	r0, #4
   1ab80:	movt	r1, #3
   1ab84:	movt	r3, #4
   1ab88:	bl	12bbc <__assert_fail@plt>
   1ab8c:	movw	r0, #363	; 0x16b
   1ab90:	movw	r1, #64857	; 0xfd59
   1ab94:	movw	r3, #276	; 0x114
   1ab98:	movw	r2, #753	; 0x2f1
   1ab9c:	movt	r0, #4
   1aba0:	movt	r1, #3
   1aba4:	movt	r3, #4
   1aba8:	bl	12bbc <__assert_fail@plt>
   1abac:	movw	r0, #381	; 0x17d
   1abb0:	movw	r1, #64857	; 0xfd59
   1abb4:	movw	r3, #276	; 0x114
   1abb8:	movw	r2, #754	; 0x2f2
   1abbc:	movt	r0, #4
   1abc0:	movt	r1, #3
   1abc4:	movt	r3, #4
   1abc8:	bl	12bbc <__assert_fail@plt>
   1abcc:	movw	r0, #399	; 0x18f
   1abd0:	movw	r1, #64857	; 0xfd59
   1abd4:	movw	r3, #276	; 0x114
   1abd8:	movw	r2, #755	; 0x2f3
   1abdc:	movt	r0, #4
   1abe0:	movt	r1, #3
   1abe4:	movt	r3, #4
   1abe8:	bl	12bbc <__assert_fail@plt>
   1abec:	movw	r0, #416	; 0x1a0
   1abf0:	movw	r1, #64857	; 0xfd59
   1abf4:	movw	r3, #276	; 0x114
   1abf8:	mov	r2, #756	; 0x2f4
   1abfc:	movt	r0, #4
   1ac00:	movt	r1, #3
   1ac04:	movt	r3, #4
   1ac08:	bl	12bbc <__assert_fail@plt>
   1ac0c:	push	{r4, sl, fp, lr}
   1ac10:	add	fp, sp, #8
   1ac14:	sub	sp, sp, #8
   1ac18:	ldrb	r3, [r0, #12]
   1ac1c:	mov	ip, r1
   1ac20:	mov	r4, r0
   1ac24:	ldr	r1, [r0, #16]
   1ac28:	ldr	r0, [r0, #4]
   1ac2c:	str	r2, [sp]
   1ac30:	mov	r2, r3
   1ac34:	mov	r3, ip
   1ac38:	bl	20858 <__assert_fail@plt+0xdc9c>
   1ac3c:	cmn	r0, #1
   1ac40:	subgt	sp, fp, #8
   1ac44:	popgt	{r4, sl, fp, pc}
   1ac48:	bl	128d4 <__errno_location@plt>
   1ac4c:	ldr	r0, [r0]
   1ac50:	ldr	r1, [r4, #8]
   1ac54:	sub	sp, fp, #8
   1ac58:	pop	{r4, sl, fp, lr}
   1ac5c:	b	184b8 <__assert_fail@plt+0x58fc>
   1ac60:	sub	r0, r0, #4096	; 0x1000
   1ac64:	ror	r0, r0, #12
   1ac68:	cmp	r0, #11
   1ac6c:	movwhi	r0, #569	; 0x239
   1ac70:	movthi	r0, #4
   1ac74:	bxhi	lr
   1ac78:	movw	r1, #672	; 0x2a0
   1ac7c:	movt	r1, #4
   1ac80:	ldr	r0, [r1, r0, lsl #2]
   1ac84:	bx	lr
   1ac88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ac8c:	add	fp, sp, #24
   1ac90:	movw	r8, #19668	; 0x4cd4
   1ac94:	mov	r4, r0
   1ac98:	movt	r8, #5
   1ac9c:	ldr	r0, [r8]
   1aca0:	cmp	r0, #0
   1aca4:	beq	1ace0 <__assert_fail@plt+0x8124>
   1aca8:	movw	r1, #19664	; 0x4cd0
   1acac:	movt	r1, #5
   1acb0:	ldrb	r1, [r1]
   1acb4:	cmp	r1, #1
   1acb8:	bne	1acdc <__assert_fail@plt+0x8120>
   1acbc:	movw	r1, #19672	; 0x4cd8
   1acc0:	ldrd	r6, [r4]
   1acc4:	movt	r1, #5
   1acc8:	ldrd	r2, [r1]
   1accc:	eor	r1, r7, r3
   1acd0:	eor	r2, r6, r2
   1acd4:	orrs	r1, r2, r1
   1acd8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1acdc:	bl	2c048 <__assert_fail@plt+0x1948c>
   1ace0:	ldrd	r0, [r4]
   1ace4:	movw	r2, #19672	; 0x4cd8
   1ace8:	movt	r2, #5
   1acec:	strd	r0, [r2]
   1acf0:	mov	r0, #1
   1acf4:	bl	1ae60 <__assert_fail@plt+0x82a4>
   1acf8:	cmp	r0, #0
   1acfc:	beq	1adac <__assert_fail@plt+0x81f0>
   1ad00:	movw	r6, #761	; 0x2f9
   1ad04:	mov	r5, r0
   1ad08:	mov	r7, #0
   1ad0c:	movt	r6, #4
   1ad10:	ldr	r0, [r5, #12]
   1ad14:	mov	r1, r6
   1ad18:	bl	124cc <strcmp@plt>
   1ad1c:	cmp	r0, #0
   1ad20:	beq	1ad4c <__assert_fail@plt+0x8190>
   1ad24:	mov	r0, r5
   1ad28:	bl	1afc4 <__assert_fail@plt+0x8408>
   1ad2c:	cmp	r0, #0
   1ad30:	bne	1ad4c <__assert_fail@plt+0x8190>
   1ad34:	ldrd	r0, [r4]
   1ad38:	ldrd	r2, [r5, #16]
   1ad3c:	eor	r1, r3, r1
   1ad40:	eor	r0, r2, r0
   1ad44:	orrs	r0, r0, r1
   1ad48:	moveq	r7, r5
   1ad4c:	ldr	r5, [r5, #28]
   1ad50:	cmp	r5, #0
   1ad54:	bne	1ad10 <__assert_fail@plt+0x8154>
   1ad58:	cmp	r7, #0
   1ad5c:	beq	1ad7c <__assert_fail@plt+0x81c0>
   1ad60:	ldr	r0, [r7, #12]
   1ad64:	bl	2adf0 <__assert_fail@plt+0x18234>
   1ad68:	movw	r1, #19664	; 0x4cd0
   1ad6c:	mov	r2, #1
   1ad70:	movt	r1, #5
   1ad74:	strb	r2, [r1]
   1ad78:	b	1ada4 <__assert_fail@plt+0x81e8>
   1ad7c:	movw	r0, #19664	; 0x4cd0
   1ad80:	mov	r1, #0
   1ad84:	mov	r2, #5
   1ad88:	movt	r0, #5
   1ad8c:	strb	r1, [r0]
   1ad90:	movw	r1, #61036	; 0xee6c
   1ad94:	mov	r0, #0
   1ad98:	movt	r1, #3
   1ad9c:	bl	1264c <dcgettext@plt>
   1ada0:	bl	2adf0 <__assert_fail@plt+0x18234>
   1ada4:	str	r0, [r8]
   1ada8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1adac:	movw	r1, #724	; 0x2d4
   1adb0:	mov	r0, #0
   1adb4:	mov	r2, #5
   1adb8:	movt	r1, #4
   1adbc:	bl	1264c <dcgettext@plt>
   1adc0:	mov	r2, r0
   1adc4:	mov	r0, #1
   1adc8:	mov	r1, #0
   1adcc:	bl	12790 <error@plt>
   1add0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1add4:	add	fp, sp, #24
   1add8:	mov	r5, r0
   1addc:	movw	r0, #720	; 0x2d0
   1ade0:	movt	r0, #4
   1ade4:	mov	r1, r5
   1ade8:	bl	124cc <strcmp@plt>
   1adec:	mov	r4, #1
   1adf0:	cmp	r0, #0
   1adf4:	beq	1ae58 <__assert_fail@plt+0x829c>
   1adf8:	movw	r7, #19680	; 0x4ce0
   1adfc:	movt	r7, #5
   1ae00:	ldr	r6, [r7]
   1ae04:	cmp	r6, #0
   1ae08:	bne	1ae34 <__assert_fail@plt+0x8278>
   1ae0c:	mov	r0, #0
   1ae10:	mov	r8, #0
   1ae14:	bl	2e274 <__assert_fail@plt+0x1b6b8>
   1ae18:	mov	r6, r0
   1ae1c:	str	r0, [r7]
   1ae20:	movw	r0, #19684	; 0x4ce4
   1ae24:	movt	r0, #5
   1ae28:	cmp	r6, #0
   1ae2c:	strb	r8, [r0]
   1ae30:	beq	1ae58 <__assert_fail@plt+0x829c>
   1ae34:	ldr	r1, [r6, #12]
   1ae38:	mov	r0, r5
   1ae3c:	bl	124cc <strcmp@plt>
   1ae40:	cmp	r0, #0
   1ae44:	beq	1ae58 <__assert_fail@plt+0x829c>
   1ae48:	ldr	r6, [r6, #28]
   1ae4c:	cmp	r6, #0
   1ae50:	bne	1ae34 <__assert_fail@plt+0x8278>
   1ae54:	mov	r4, #0
   1ae58:	mov	r0, r4
   1ae5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ae60:	push	{r4, r5, r6, r7, fp, lr}
   1ae64:	add	fp, sp, #16
   1ae68:	movw	r6, #19680	; 0x4ce0
   1ae6c:	mov	r4, r0
   1ae70:	movw	r5, #19684	; 0x4ce4
   1ae74:	movt	r6, #5
   1ae78:	movt	r5, #5
   1ae7c:	ldr	r0, [r6]
   1ae80:	cmp	r0, #0
   1ae84:	beq	1aebc <__assert_fail@plt+0x8300>
   1ae88:	ldrb	r1, [r5]
   1ae8c:	cmp	r1, #0
   1ae90:	bne	1aebc <__assert_fail@plt+0x8300>
   1ae94:	cmp	r4, #0
   1ae98:	beq	1aebc <__assert_fail@plt+0x8300>
   1ae9c:	ldr	r7, [r0, #28]
   1aea0:	bl	2ec98 <__assert_fail@plt+0x1c0dc>
   1aea4:	cmp	r7, #0
   1aea8:	mov	r0, r7
   1aeac:	bne	1ae9c <__assert_fail@plt+0x82e0>
   1aeb0:	mov	r0, #0
   1aeb4:	str	r0, [r6]
   1aeb8:	b	1aec4 <__assert_fail@plt+0x8308>
   1aebc:	cmp	r0, #0
   1aec0:	popne	{r4, r5, r6, r7, fp, pc}
   1aec4:	mov	r0, r4
   1aec8:	bl	2e274 <__assert_fail@plt+0x1b6b8>
   1aecc:	str	r0, [r6]
   1aed0:	strb	r4, [r5]
   1aed4:	pop	{r4, r5, r6, r7, fp, pc}
   1aed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aedc:	add	fp, sp, #28
   1aee0:	sub	sp, sp, #12
   1aee4:	mov	r4, r0
   1aee8:	mov	r6, #0
   1aeec:	mov	r0, #0
   1aef0:	str	r6, [sp, #8]
   1aef4:	bl	2e274 <__assert_fail@plt+0x1b6b8>
   1aef8:	cmp	r0, #0
   1aefc:	beq	1afb8 <__assert_fail@plt+0x83fc>
   1af00:	str	r4, [sp, #4]
   1af04:	mov	r5, r0
   1af08:	mov	r8, #0
   1af0c:	add	r9, sp, #8
   1af10:	mov	r4, #0
   1af14:	mov	r7, r0
   1af18:	add	sl, r8, #1
   1af1c:	mov	r0, r4
   1af20:	mov	r2, r9
   1af24:	mov	r6, r4
   1af28:	lsl	r1, sl, #3
   1af2c:	bl	1f828 <__assert_fail@plt+0xcc6c>
   1af30:	mov	r4, r0
   1af34:	cmp	r0, #0
   1af38:	beq	1af54 <__assert_fail@plt+0x8398>
   1af3c:	mov	r0, r7
   1af40:	bl	1afc4 <__assert_fail@plt+0x8408>
   1af44:	cmp	r0, #0
   1af48:	beq	1af64 <__assert_fail@plt+0x83a8>
   1af4c:	mov	r6, r4
   1af50:	b	1af7c <__assert_fail@plt+0x83c0>
   1af54:	mov	r0, r6
   1af58:	bl	2c048 <__assert_fail@plt+0x1948c>
   1af5c:	mov	r6, #0
   1af60:	b	1af7c <__assert_fail@plt+0x83c0>
   1af64:	ldrd	r0, [r7, #16]
   1af68:	mov	r2, r4
   1af6c:	mov	r6, r4
   1af70:	str	r0, [r2, r8, lsl #3]!
   1af74:	mov	r8, sl
   1af78:	str	r1, [r2, #4]
   1af7c:	ldr	r7, [r7, #28]
   1af80:	cmp	r7, #0
   1af84:	bne	1af18 <__assert_fail@plt+0x835c>
   1af88:	cmp	r5, #0
   1af8c:	beq	1afa8 <__assert_fail@plt+0x83ec>
   1af90:	ldr	r4, [r5, #28]
   1af94:	mov	r0, r5
   1af98:	bl	2ec98 <__assert_fail@plt+0x1c0dc>
   1af9c:	cmp	r4, #0
   1afa0:	mov	r5, r4
   1afa4:	bne	1af90 <__assert_fail@plt+0x83d4>
   1afa8:	cmp	r6, #0
   1afac:	ldrne	r0, [sp, #4]
   1afb0:	moveq	r6, #0
   1afb4:	strne	r8, [r0]
   1afb8:	mov	r0, r6
   1afbc:	sub	sp, fp, #28
   1afc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afc4:	push	{r4, r5, r6, sl, fp, lr}
   1afc8:	add	fp, sp, #16
   1afcc:	sub	sp, sp, #104	; 0x68
   1afd0:	mov	r6, r0
   1afd4:	mov	r4, r0
   1afd8:	ldr	r0, [r6, #16]!
   1afdc:	ldr	r1, [r6, #4]
   1afe0:	and	r1, r0, r1
   1afe4:	mov	r0, #0
   1afe8:	cmn	r1, #1
   1afec:	bne	1b02c <__assert_fail@plt+0x8470>
   1aff0:	mov	r5, sp
   1aff4:	mov	r0, r5
   1aff8:	bl	17ed0 <__assert_fail@plt+0x5314>
   1affc:	movw	r1, #20100	; 0x4e84
   1b000:	ldr	r0, [r4, #4]
   1b004:	movt	r1, #5
   1b008:	ldr	r2, [r1, #52]	; 0x34
   1b00c:	mov	r1, r5
   1b010:	blx	r2
   1b014:	mov	r1, r0
   1b018:	mvn	r0, #0
   1b01c:	cmp	r1, #0
   1b020:	ldmeq	sp, {r0, r1}
   1b024:	strdeq	r0, [r6]
   1b028:	moveq	r0, #0
   1b02c:	sub	sp, fp, #16
   1b030:	pop	{r4, r5, r6, sl, fp, pc}
   1b034:	andeq	r0, r0, r0
   1b038:	cmp	r0, #0
   1b03c:	beq	1b09c <__assert_fail@plt+0x84e0>
   1b040:	movw	r2, #16184	; 0x3f38
   1b044:	movw	ip, #19212	; 0x4b0c
   1b048:	mov	r1, #0
   1b04c:	movt	r2, #1
   1b050:	movt	ip, #1
   1b054:	ldr	r3, [r0]
   1b058:	cmp	r3, r2
   1b05c:	beq	1b06c <__assert_fail@plt+0x84b0>
   1b060:	cmp	r3, ip
   1b064:	orreq	r1, r1, #2
   1b068:	b	1b070 <__assert_fail@plt+0x84b4>
   1b06c:	orr	r1, r1, #1
   1b070:	ldr	r0, [r0, #152]	; 0x98
   1b074:	cmp	r0, #0
   1b078:	bne	1b054 <__assert_fail@plt+0x8498>
   1b07c:	and	r0, r1, #3
   1b080:	cmp	r0, #3
   1b084:	bxne	lr
   1b088:	movw	r0, #20100	; 0x4e84
   1b08c:	movt	r0, #5
   1b090:	ldrb	r0, [r0, #1]
   1b094:	cmp	r0, #0
   1b098:	beq	1b0a0 <__assert_fail@plt+0x84e4>
   1b09c:	bx	lr
   1b0a0:	push	{fp, lr}
   1b0a4:	mov	fp, sp
   1b0a8:	movw	r1, #768	; 0x300
   1b0ac:	mov	r0, #0
   1b0b0:	mov	r2, #5
   1b0b4:	movt	r1, #4
   1b0b8:	bl	1264c <dcgettext@plt>
   1b0bc:	mov	r2, r0
   1b0c0:	mov	r0, #1
   1b0c4:	mov	r1, #0
   1b0c8:	bl	12790 <error@plt>
   1b0cc:	cmp	r0, #0
   1b0d0:	beq	1b104 <__assert_fail@plt+0x8548>
   1b0d4:	cmp	r0, #2
   1b0d8:	beq	1b128 <__assert_fail@plt+0x856c>
   1b0dc:	cmp	r0, #1
   1b0e0:	bne	1b150 <__assert_fail@plt+0x8594>
   1b0e4:	movw	r1, #20100	; 0x4e84
   1b0e8:	movw	r2, #45428	; 0xb174
   1b0ec:	movt	r1, #5
   1b0f0:	movt	r2, #1
   1b0f4:	str	r2, [r1, #64]	; 0x40
   1b0f8:	movw	r2, #34340	; 0x8624
   1b0fc:	movt	r2, #1
   1b100:	b	1b144 <__assert_fail@plt+0x8588>
   1b104:	movw	r1, #20100	; 0x4e84
   1b108:	movw	r2, #45488	; 0xb1b0
   1b10c:	movt	r1, #5
   1b110:	movt	r2, #1
   1b114:	str	r2, [r1, #64]	; 0x40
   1b118:	movw	r2, #34464	; 0x86a0
   1b11c:	movt	r2, #1
   1b120:	str	r2, [r1, #52]	; 0x34
   1b124:	b	1b150 <__assert_fail@plt+0x8594>
   1b128:	movw	r1, #20100	; 0x4e84
   1b12c:	movw	r2, #45492	; 0xb1b4
   1b130:	movt	r1, #5
   1b134:	movt	r2, #1
   1b138:	str	r2, [r1, #64]	; 0x40
   1b13c:	movw	r2, #34056	; 0x8508
   1b140:	movt	r2, #1
   1b144:	str	r2, [r1, #52]	; 0x34
   1b148:	mov	r2, #1
   1b14c:	strb	r2, [r1, #12]
   1b150:	movw	r1, #20100	; 0x4e84
   1b154:	movt	r1, #5
   1b158:	str	r0, [r1, #48]	; 0x30
   1b15c:	ldrb	r0, [r1, #44]	; 0x2c
   1b160:	tst	r0, #2
   1b164:	movwne	r0, #34548	; 0x86f4
   1b168:	movtne	r0, #1
   1b16c:	strne	r0, [r1, #52]	; 0x34
   1b170:	bx	lr
   1b174:	push	{r4, r5, r6, sl, fp, lr}
   1b178:	add	fp, sp, #16
   1b17c:	mov	r4, r2
   1b180:	mov	r5, r1
   1b184:	mov	r6, r0
   1b188:	bl	29de4 <__assert_fail@plt+0x17228>
   1b18c:	cmp	r0, #0
   1b190:	moveq	r0, #0
   1b194:	popeq	{r4, r5, r6, sl, fp, pc}
   1b198:	mov	r3, r0
   1b19c:	mov	r0, r6
   1b1a0:	mov	r1, r5
   1b1a4:	mov	r2, r4
   1b1a8:	pop	{r4, r5, r6, sl, fp, lr}
   1b1ac:	b	1b43c <__assert_fail@plt+0x8880>
   1b1b0:	b	29f9c <__assert_fail@plt+0x173e0>
   1b1b4:	push	{r4, r5, r6, sl, fp, lr}
   1b1b8:	add	fp, sp, #16
   1b1bc:	mov	r6, r0
   1b1c0:	movw	r0, #20056	; 0x4e58
   1b1c4:	mov	r4, r2
   1b1c8:	mov	r5, r1
   1b1cc:	movt	r0, #5
   1b1d0:	ldr	r0, [r0]
   1b1d4:	cmp	r0, #0
   1b1d8:	beq	1b1f0 <__assert_fail@plt+0x8634>
   1b1dc:	mov	r0, r6
   1b1e0:	mov	r1, r5
   1b1e4:	mov	r2, r4
   1b1e8:	pop	{r4, r5, r6, sl, fp, lr}
   1b1ec:	b	29f9c <__assert_fail@plt+0x173e0>
   1b1f0:	mov	r0, r6
   1b1f4:	mov	r1, r5
   1b1f8:	mov	r2, r4
   1b1fc:	bl	29de4 <__assert_fail@plt+0x17228>
   1b200:	cmp	r0, #0
   1b204:	moveq	r0, #0
   1b208:	popeq	{r4, r5, r6, sl, fp, pc}
   1b20c:	mov	r3, r0
   1b210:	mov	r0, r6
   1b214:	mov	r1, r5
   1b218:	mov	r2, r4
   1b21c:	pop	{r4, r5, r6, sl, fp, lr}
   1b220:	b	1b43c <__assert_fail@plt+0x8880>
   1b224:	movw	r0, #19688	; 0x4ce8
   1b228:	mov	r1, #0
   1b22c:	movt	r0, #5
   1b230:	str	r1, [r0]
   1b234:	bx	lr
   1b238:	bx	lr
   1b23c:	push	{r4, r5, r6, r7, fp, lr}
   1b240:	add	fp, sp, #16
   1b244:	mov	r4, r0
   1b248:	movw	r0, #940	; 0x3ac
   1b24c:	mov	r2, #6
   1b250:	movt	r0, #4
   1b254:	mov	r1, r4
   1b258:	bl	12b5c <strncmp@plt>
   1b25c:	cmp	r0, #0
   1b260:	bne	1b280 <__assert_fail@plt+0x86c4>
   1b264:	mov	r0, r4
   1b268:	bl	1288c <strlen@plt>
   1b26c:	cmp	r0, #8
   1b270:	bne	1b280 <__assert_fail@plt+0x86c4>
   1b274:	movw	r1, #5136	; 0x1410
   1b278:	movt	r1, #4
   1b27c:	b	1b2ec <__assert_fail@plt+0x8730>
   1b280:	mov	r5, r4
   1b284:	ldrb	r0, [r5], #1
   1b288:	cmp	r0, #45	; 0x2d
   1b28c:	movw	r0, #60121	; 0xead9
   1b290:	movne	r5, r4
   1b294:	movt	r0, #3
   1b298:	mov	r1, r5
   1b29c:	bl	124cc <strcmp@plt>
   1b2a0:	cmp	r0, #0
   1b2a4:	beq	1b2e4 <__assert_fail@plt+0x8728>
   1b2a8:	movw	r7, #5152	; 0x1420
   1b2ac:	mov	r6, #0
   1b2b0:	movt	r7, #4
   1b2b4:	cmn	r6, #1360	; 0x550
   1b2b8:	moveq	r0, #0
   1b2bc:	popeq	{r4, r5, r6, r7, fp, pc}
   1b2c0:	sub	r0, r7, r6
   1b2c4:	mov	r1, r5
   1b2c8:	ldr	r0, [r0, #20]
   1b2cc:	bl	124cc <strcmp@plt>
   1b2d0:	sub	r6, r6, #16
   1b2d4:	cmp	r0, #0
   1b2d8:	bne	1b2b4 <__assert_fail@plt+0x86f8>
   1b2dc:	sub	r1, r7, r6
   1b2e0:	b	1b2ec <__assert_fail@plt+0x8730>
   1b2e4:	movw	r1, #5152	; 0x1420
   1b2e8:	movt	r1, #4
   1b2ec:	mov	r0, r4
   1b2f0:	pop	{r4, r5, r6, r7, fp, lr}
   1b2f4:	b	1b2f8 <__assert_fail@plt+0x873c>
   1b2f8:	push	{r4, r5, r6, sl, fp, lr}
   1b2fc:	add	fp, sp, #16
   1b300:	sub	sp, sp, #8
   1b304:	mov	r5, r0
   1b308:	ldr	r0, [r1]
   1b30c:	cmp	r0, #1
   1b310:	beq	1b340 <__assert_fail@plt+0x8784>
   1b314:	mov	r4, r1
   1b318:	cmp	r0, #2
   1b31c:	beq	1b344 <__assert_fail@plt+0x8788>
   1b320:	movw	r6, #19688	; 0x4ce8
   1b324:	cmp	r0, #0
   1b328:	movt	r6, #5
   1b32c:	ldr	r1, [r6]
   1b330:	beq	1b350 <__assert_fail@plt+0x8794>
   1b334:	cmp	r1, #0
   1b338:	streq	r5, [r6]
   1b33c:	b	1b344 <__assert_fail@plt+0x8788>
   1b340:	mov	r4, #0
   1b344:	mov	r0, r4
   1b348:	sub	sp, fp, #16
   1b34c:	pop	{r4, r5, r6, sl, fp, pc}
   1b350:	cmp	r1, #0
   1b354:	beq	1b344 <__assert_fail@plt+0x8788>
   1b358:	movw	r0, #20100	; 0x4e84
   1b35c:	movt	r0, #5
   1b360:	ldrb	r1, [r0, #17]
   1b364:	cmp	r1, #0
   1b368:	bne	1b344 <__assert_fail@plt+0x8788>
   1b36c:	ldrb	r0, [r0, #16]
   1b370:	cmp	r0, #0
   1b374:	beq	1b344 <__assert_fail@plt+0x8788>
   1b378:	movw	r1, #1024	; 0x400
   1b37c:	mov	r0, #0
   1b380:	mov	r2, #5
   1b384:	movt	r1, #4
   1b388:	bl	1264c <dcgettext@plt>
   1b38c:	mov	r2, r0
   1b390:	ldr	r0, [r6]
   1b394:	mov	r1, #0
   1b398:	mov	r3, r5
   1b39c:	stm	sp, {r0, r5}
   1b3a0:	mov	r0, #0
   1b3a4:	bl	12790 <error@plt>
   1b3a8:	b	1b344 <__assert_fail@plt+0x8788>
   1b3ac:	push	{fp, lr}
   1b3b0:	mov	fp, sp
   1b3b4:	bl	1761c <__assert_fail@plt+0x4a60>
   1b3b8:	movw	r1, #16000	; 0x3e80
   1b3bc:	mov	r2, #5
   1b3c0:	mov	r3, #0
   1b3c4:	movt	r1, #1
   1b3c8:	str	r1, [r0]
   1b3cc:	strd	r2, [r0, #8]
   1b3d0:	strh	r3, [r0, #18]
   1b3d4:	mov	r0, #1
   1b3d8:	pop	{fp, pc}
   1b3dc:	push	{r4, r5, fp, lr}
   1b3e0:	add	fp, sp, #8
   1b3e4:	mov	r1, #0
   1b3e8:	mov	r5, #0
   1b3ec:	bl	17728 <__assert_fail@plt+0x4b6c>
   1b3f0:	movw	r1, #18728	; 0x4928
   1b3f4:	mov	r4, #4
   1b3f8:	movt	r1, #1
   1b3fc:	str	r1, [r0]
   1b400:	strd	r4, [r0, #8]
   1b404:	strh	r5, [r0, #18]
   1b408:	mov	r0, #1
   1b40c:	pop	{r4, r5, fp, pc}
   1b410:	push	{fp, lr}
   1b414:	mov	fp, sp
   1b418:	bl	17c44 <__assert_fail@plt+0x5088>
   1b41c:	movw	r1, #257	; 0x101
   1b420:	str	r1, [r0, #16]
   1b424:	add	r1, r0, #40	; 0x28
   1b428:	movw	r0, #3448	; 0xd78
   1b42c:	movt	r0, #4
   1b430:	bl	1e23c <__assert_fail@plt+0xb680>
   1b434:	mov	r0, #1
   1b438:	pop	{fp, pc}
   1b43c:	push	{r4, r5, r6, r7, fp, lr}
   1b440:	add	fp, sp, #16
   1b444:	mov	r7, r3
   1b448:	mov	r4, r2
   1b44c:	mov	r5, r1
   1b450:	mov	r6, r0
   1b454:	bl	128d4 <__errno_location@plt>
   1b458:	ldr	r0, [r0]
   1b45c:	cmp	r0, #20
   1b460:	cmpne	r0, #2
   1b464:	movne	r0, r7
   1b468:	popne	{r4, r5, r6, r7, fp, pc}
   1b46c:	movw	r0, #20100	; 0x4e84
   1b470:	movt	r0, #5
   1b474:	ldrb	r0, [r0, #44]	; 0x2c
   1b478:	tst	r0, #2
   1b47c:	bne	1b494 <__assert_fail@plt+0x88d8>
   1b480:	mov	r0, r6
   1b484:	mov	r1, r5
   1b488:	mov	r2, r4
   1b48c:	pop	{r4, r5, r6, r7, fp, lr}
   1b490:	b	29f9c <__assert_fail@plt+0x173e0>
   1b494:	movw	r0, #17760	; 0x4560
   1b498:	movw	r1, #947	; 0x3b3
   1b49c:	mov	r2, r5
   1b4a0:	movt	r0, #5
   1b4a4:	movt	r1, #4
   1b4a8:	ldr	r0, [r0]
   1b4ac:	bl	128c8 <fprintf@plt>
   1b4b0:	b	1b480 <__assert_fail@plt+0x88c4>
   1b4b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4b8:	add	fp, sp, #28
   1b4bc:	sub	sp, sp, #116	; 0x74
   1b4c0:	mov	r6, #0
   1b4c4:	cmp	r1, #0
   1b4c8:	beq	1b564 <__assert_fail@plt+0x89a8>
   1b4cc:	ldr	r8, [r2]
   1b4d0:	mov	sl, r2
   1b4d4:	mov	r5, r1
   1b4d8:	ldr	r4, [r1, r8, lsl #2]
   1b4dc:	cmp	r4, #0
   1b4e0:	beq	1b564 <__assert_fail@plt+0x89a8>
   1b4e4:	mov	r7, r0
   1b4e8:	mov	r0, r4
   1b4ec:	bl	1288c <strlen@plt>
   1b4f0:	cmp	r0, #8
   1b4f4:	bne	1b564 <__assert_fail@plt+0x89a8>
   1b4f8:	mov	r0, #116	; 0x74
   1b4fc:	mov	r1, r4
   1b500:	mov	r2, #6
   1b504:	strh	r0, [fp, #-32]	; 0xffffffe0
   1b508:	movw	r0, #16993	; 0x4261
   1b50c:	movt	r0, #28003	; 0x6d63
   1b510:	str	r0, [fp, #-36]	; 0xffffffdc
   1b514:	movw	r0, #940	; 0x3ac
   1b518:	movt	r0, #4
   1b51c:	bl	12b5c <strncmp@plt>
   1b520:	cmp	r0, #0
   1b524:	bne	1b758 <__assert_fail@plt+0x8b9c>
   1b528:	ldrb	r9, [r4, #6]
   1b52c:	cmp	r9, #66	; 0x42
   1b530:	ldrbne	r4, [r4, #7]
   1b534:	cmpne	r4, #66	; 0x42
   1b538:	bne	1b570 <__assert_fail@plt+0x89b4>
   1b53c:	movw	r1, #1393	; 0x571
   1b540:	mov	r0, #0
   1b544:	mov	r2, #5
   1b548:	mov	r6, #0
   1b54c:	movt	r1, #4
   1b550:	bl	1264c <dcgettext@plt>
   1b554:	mov	r2, r0
   1b558:	mov	r0, #0
   1b55c:	mov	r1, #0
   1b560:	bl	12790 <error@plt>
   1b564:	mov	r0, r6
   1b568:	sub	sp, fp, #28
   1b56c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b570:	mov	r6, #0
   1b574:	cmp	r9, #116	; 0x74
   1b578:	beq	1b564 <__assert_fail@plt+0x89a8>
   1b57c:	sub	r0, fp, #36	; 0x24
   1b580:	mov	r1, r9
   1b584:	bl	12898 <strchr@plt>
   1b588:	cmp	r0, #0
   1b58c:	beq	1b564 <__assert_fail@plt+0x89a8>
   1b590:	sub	r0, fp, #36	; 0x24
   1b594:	mov	r1, r4
   1b598:	bl	12898 <strchr@plt>
   1b59c:	cmp	r0, #0
   1b5a0:	beq	1b564 <__assert_fail@plt+0x89a8>
   1b5a4:	add	r0, r8, #1
   1b5a8:	ldr	r1, [r5, r0, lsl #2]
   1b5ac:	cmp	r1, #0
   1b5b0:	beq	1b778 <__assert_fail@plt+0x8bbc>
   1b5b4:	str	r0, [sl]
   1b5b8:	mov	r0, r7
   1b5bc:	bl	17be8 <__assert_fail@plt+0x502c>
   1b5c0:	mov	r6, r0
   1b5c4:	cmp	r9, #97	; 0x61
   1b5c8:	beq	1b5ec <__assert_fail@plt+0x8a30>
   1b5cc:	cmp	r9, #109	; 0x6d
   1b5d0:	beq	1b5e4 <__assert_fail@plt+0x8a28>
   1b5d4:	cmp	r9, #99	; 0x63
   1b5d8:	bne	1b7c0 <__assert_fail@plt+0x8c04>
   1b5dc:	mov	r0, #2
   1b5e0:	b	1b5f0 <__assert_fail@plt+0x8a34>
   1b5e4:	mov	r0, #3
   1b5e8:	b	1b5f0 <__assert_fail@plt+0x8a34>
   1b5ec:	mov	r0, #0
   1b5f0:	cmp	r4, #116	; 0x74
   1b5f4:	str	r0, [r6, #40]	; 0x28
   1b5f8:	bne	1b64c <__assert_fail@plt+0x8a90>
   1b5fc:	ldr	r0, [sl]
   1b600:	movw	r7, #20100	; 0x4e84
   1b604:	add	r4, r6, #48	; 0x30
   1b608:	movt	r7, #5
   1b60c:	add	r2, r7, #20
   1b610:	ldr	r1, [r5, r0, lsl #2]
   1b614:	mov	r0, r4
   1b618:	bl	270d8 <__assert_fail@plt+0x1451c>
   1b61c:	cmp	r0, #0
   1b620:	bne	1b6b4 <__assert_fail@plt+0x8af8>
   1b624:	movw	r1, #1515	; 0x5eb
   1b628:	mov	r0, #0
   1b62c:	mov	r2, #5
   1b630:	movt	r1, #4
   1b634:	bl	1264c <dcgettext@plt>
   1b638:	mov	r4, r0
   1b63c:	ldr	r0, [sl]
   1b640:	ldr	r1, [r7, #72]	; 0x48
   1b644:	ldr	r2, [r5, r0, lsl #2]
   1b648:	b	1b7a4 <__assert_fail@plt+0x8be8>
   1b64c:	mov	r7, sp
   1b650:	mov	r0, r7
   1b654:	bl	17ed0 <__assert_fail@plt+0x5314>
   1b658:	ldr	r0, [sl]
   1b65c:	movw	r1, #20100	; 0x4e84
   1b660:	movt	r1, #5
   1b664:	ldr	r2, [r1, #52]	; 0x34
   1b668:	mov	r1, r7
   1b66c:	ldr	r0, [r5, r0, lsl #2]
   1b670:	blx	r2
   1b674:	cmp	r0, #0
   1b678:	bne	1b834 <__assert_fail@plt+0x8c78>
   1b67c:	cmp	r4, #109	; 0x6d
   1b680:	beq	1b6a4 <__assert_fail@plt+0x8ae8>
   1b684:	cmp	r4, #99	; 0x63
   1b688:	beq	1b69c <__assert_fail@plt+0x8ae0>
   1b68c:	cmp	r4, #97	; 0x61
   1b690:	bne	1b848 <__assert_fail@plt+0x8c8c>
   1b694:	add	r0, r7, #72	; 0x48
   1b698:	b	1b6a8 <__assert_fail@plt+0x8aec>
   1b69c:	add	r0, r7, #88	; 0x58
   1b6a0:	b	1b6a8 <__assert_fail@plt+0x8aec>
   1b6a4:	add	r0, r7, #80	; 0x50
   1b6a8:	ldrd	r0, [r0]
   1b6ac:	add	r4, r6, #48	; 0x30
   1b6b0:	stm	r4, {r0, r1}
   1b6b4:	movw	r1, #20100	; 0x4e84
   1b6b8:	mov	r0, #0
   1b6bc:	movw	r2, #10111	; 0x277f
   1b6c0:	vldr	s0, [pc, #456]	; 1b890 <__assert_fail@plt+0x8cd4>
   1b6c4:	str	r0, [r6, #44]	; 0x2c
   1b6c8:	movt	r1, #5
   1b6cc:	movt	r2, #133	; 0x85
   1b6d0:	ldr	r0, [r4]
   1b6d4:	ldr	r1, [r1, #28]
   1b6d8:	sub	r0, r1, r0
   1b6dc:	add	r1, pc, #420	; 0x1a4
   1b6e0:	cmp	r0, r2
   1b6e4:	addgt	r1, r1, #4
   1b6e8:	vldr	s2, [r1]
   1b6ec:	movw	r1, #20864	; 0x5180
   1b6f0:	movt	r1, #1
   1b6f4:	cmp	r0, r1
   1b6f8:	vselge.f32	s0, s2, s0
   1b6fc:	vstr	s0, [r6, #28]
   1b700:	ldr	r0, [sl]
   1b704:	add	r0, r0, #1
   1b708:	str	r0, [sl]
   1b70c:	ldr	r0, [r6]
   1b710:	cmp	r0, #0
   1b714:	beq	1b7f4 <__assert_fail@plt+0x8c38>
   1b718:	movw	r1, #18104	; 0x46b8
   1b71c:	movt	r1, #1
   1b720:	cmp	r0, r1
   1b724:	bne	1b814 <__assert_fail@plt+0x8c58>
   1b728:	ldrb	r0, [r6, #18]
   1b72c:	mov	r6, #1
   1b730:	cmp	r0, #0
   1b734:	bne	1b564 <__assert_fail@plt+0x89a8>
   1b738:	movw	r0, #1637	; 0x665
   1b73c:	movw	r1, #1319	; 0x527
   1b740:	movw	r3, #1328	; 0x530
   1b744:	movw	r2, #1649	; 0x671
   1b748:	movt	r0, #4
   1b74c:	movt	r1, #4
   1b750:	movt	r3, #4
   1b754:	bl	12bbc <__assert_fail@plt>
   1b758:	movw	r0, #1276	; 0x4fc
   1b75c:	movw	r1, #1319	; 0x527
   1b760:	movw	r3, #1328	; 0x530
   1b764:	movw	r2, #1555	; 0x613
   1b768:	movt	r0, #4
   1b76c:	movt	r1, #4
   1b770:	movt	r3, #4
   1b774:	bl	12bbc <__assert_fail@plt>
   1b778:	movw	r1, #1462	; 0x5b6
   1b77c:	mov	r0, #0
   1b780:	mov	r2, #5
   1b784:	movt	r1, #4
   1b788:	bl	1264c <dcgettext@plt>
   1b78c:	mov	r4, r0
   1b790:	ldr	r0, [sl]
   1b794:	ldr	r2, [r5, r0, lsl #2]
   1b798:	movw	r0, #20100	; 0x4e84
   1b79c:	movt	r0, #5
   1b7a0:	ldr	r1, [r0, #72]	; 0x48
   1b7a4:	mov	r0, #0
   1b7a8:	bl	29834 <__assert_fail@plt+0x16c78>
   1b7ac:	mov	r3, r0
   1b7b0:	mov	r0, #1
   1b7b4:	mov	r1, #0
   1b7b8:	mov	r2, r4
   1b7bc:	bl	12790 <error@plt>
   1b7c0:	sub	r0, fp, #36	; 0x24
   1b7c4:	mov	r1, r9
   1b7c8:	bl	12898 <strchr@plt>
   1b7cc:	cmp	r0, #0
   1b7d0:	bne	1b868 <__assert_fail@plt+0x8cac>
   1b7d4:	movw	r0, #1492	; 0x5d4
   1b7d8:	movw	r1, #1319	; 0x527
   1b7dc:	movw	r3, #1328	; 0x530
   1b7e0:	movw	r2, #1611	; 0x64b
   1b7e4:	movt	r0, #4
   1b7e8:	movt	r1, #4
   1b7ec:	movt	r3, #4
   1b7f0:	bl	12bbc <__assert_fail@plt>
   1b7f4:	movw	r0, #1573	; 0x625
   1b7f8:	movw	r1, #1319	; 0x527
   1b7fc:	movw	r3, #1328	; 0x530
   1b800:	movw	r2, #1647	; 0x66f
   1b804:	movt	r0, #4
   1b808:	movt	r1, #4
   1b80c:	movt	r3, #4
   1b810:	bl	12bbc <__assert_fail@plt>
   1b814:	movw	r0, #1601	; 0x641
   1b818:	movw	r1, #1319	; 0x527
   1b81c:	movw	r3, #1328	; 0x530
   1b820:	mov	r2, #1648	; 0x670
   1b824:	movt	r0, #4
   1b828:	movt	r1, #4
   1b82c:	movt	r3, #4
   1b830:	bl	12bbc <__assert_fail@plt>
   1b834:	bl	128d4 <__errno_location@plt>
   1b838:	ldr	r1, [sl]
   1b83c:	ldr	r0, [r0]
   1b840:	ldr	r1, [r5, r1, lsl #2]
   1b844:	bl	190a8 <__assert_fail@plt+0x64ec>
   1b848:	movw	r0, #60281	; 0xeb79
   1b84c:	movw	r1, #1319	; 0x527
   1b850:	movw	r3, #1657	; 0x679
   1b854:	movw	r2, #498	; 0x1f2
   1b858:	movt	r0, #3
   1b85c:	movt	r1, #4
   1b860:	movt	r3, #4
   1b864:	bl	12bbc <__assert_fail@plt>
   1b868:	movw	r0, #60281	; 0xeb79
   1b86c:	movw	r1, #1319	; 0x527
   1b870:	movw	r3, #1328	; 0x530
   1b874:	movw	r2, #1612	; 0x64c
   1b878:	movt	r0, #3
   1b87c:	movt	r1, #4
   1b880:	movt	r3, #4
   1b884:	bl	12bbc <__assert_fail@plt>
   1b888:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1b88c:			; <UNDEFINED> instruction: 0x3e99999a
   1b890:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b894:	push	{r4, sl, fp, lr}
   1b898:	add	fp, sp, #8
   1b89c:	mov	r1, #0
   1b8a0:	mov	r4, #0
   1b8a4:	bl	17728 <__assert_fail@plt+0x4b6c>
   1b8a8:	movw	r1, #17996	; 0x464c
   1b8ac:	mov	r2, #2
   1b8b0:	mov	r3, #4
   1b8b4:	movt	r1, #1
   1b8b8:	str	r1, [r0]
   1b8bc:	strd	r2, [r0, #8]
   1b8c0:	strh	r4, [r0, #18]
   1b8c4:	mov	r0, #1
   1b8c8:	pop	{r4, sl, fp, pc}
   1b8cc:	push	{fp, lr}
   1b8d0:	mov	fp, sp
   1b8d4:	bl	1761c <__assert_fail@plt+0x4a60>
   1b8d8:	movw	r1, #16104	; 0x3ee8
   1b8dc:	mov	r2, #3
   1b8e0:	mov	r3, #1
   1b8e4:	movt	r1, #1
   1b8e8:	str	r1, [r0]
   1b8ec:	mov	r1, #0
   1b8f0:	strd	r2, [r0, #8]
   1b8f4:	strh	r1, [r0, #18]
   1b8f8:	mov	r1, #1065353216	; 0x3f800000
   1b8fc:	str	r1, [r0, #28]
   1b900:	mov	r0, #1
   1b904:	pop	{fp, pc}
   1b908:	push	{fp, lr}
   1b90c:	mov	fp, sp
   1b910:	bl	1761c <__assert_fail@plt+0x4a60>
   1b914:	movw	r1, #15728	; 0x3d70
   1b918:	movt	r1, #1
   1b91c:	str	r1, [r0]
   1b920:	mov	r1, #3
   1b924:	str	r1, [r0, #8]
   1b928:	str	r1, [r0, #12]
   1b92c:	mov	r1, #0
   1b930:	strh	r1, [r0, #18]
   1b934:	mov	r0, #1
   1b938:	pop	{fp, pc}
   1b93c:	mov	r3, #0
   1b940:	b	1d8f0 <__assert_fail@plt+0xad34>
   1b944:	push	{r4, r5, r6, r7, fp, lr}
   1b948:	add	fp, sp, #16
   1b94c:	sub	sp, sp, #112	; 0x70
   1b950:	add	r7, sp, #8
   1b954:	mov	r4, r0
   1b958:	mov	r5, r2
   1b95c:	mov	r6, r1
   1b960:	mov	r0, r7
   1b964:	bl	17ed0 <__assert_fail@plt+0x5314>
   1b968:	add	r3, sp, #4
   1b96c:	mov	r0, r6
   1b970:	mov	r1, r5
   1b974:	mov	r2, r7
   1b978:	bl	1db68 <__assert_fail@plt+0xafac>
   1b97c:	mov	r1, r0
   1b980:	mov	r0, #0
   1b984:	cmp	r1, #0
   1b988:	beq	1b9f8 <__assert_fail@plt+0x8e3c>
   1b98c:	ldr	r1, [sp, #4]
   1b990:	mov	r0, r4
   1b994:	bl	17be8 <__assert_fail@plt+0x502c>
   1b998:	mov	r1, #0
   1b99c:	add	ip, r0, #44	; 0x2c
   1b9a0:	vldr	s0, [pc, #96]	; 1ba08 <__assert_fail@plt+0x8e4c>
   1b9a4:	str	r1, [r0, #40]	; 0x28
   1b9a8:	ldr	r2, [sp, #88]	; 0x58
   1b9ac:	ldr	r3, [sp, #92]	; 0x5c
   1b9b0:	stm	ip, {r1, r2, r3}
   1b9b4:	movw	r1, #20100	; 0x4e84
   1b9b8:	movw	r3, #10111	; 0x277f
   1b9bc:	movt	r1, #5
   1b9c0:	ldr	r2, [sp, #88]	; 0x58
   1b9c4:	movt	r3, #133	; 0x85
   1b9c8:	ldr	r1, [r1, #28]
   1b9cc:	sub	r1, r1, r2
   1b9d0:	add	r2, pc, #40	; 0x28
   1b9d4:	cmp	r1, r3
   1b9d8:	addgt	r2, r2, #4
   1b9dc:	vldr	s2, [r2]
   1b9e0:	movw	r2, #20864	; 0x5180
   1b9e4:	movt	r2, #1
   1b9e8:	cmp	r1, r2
   1b9ec:	vselge.f32	s0, s2, s0
   1b9f0:	vstr	s0, [r0, #28]
   1b9f4:	mov	r0, #1
   1b9f8:	sub	sp, fp, #16
   1b9fc:	pop	{r4, r5, r6, r7, fp, pc}
   1ba00:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1ba04:			; <UNDEFINED> instruction: 0x3e99999a
   1ba08:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ba0c:	nop	{0}
   1ba10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba14:	add	fp, sp, #28
   1ba18:	sub	sp, sp, #28
   1ba1c:	mov	r4, r1
   1ba20:	movw	r1, #2243	; 0x8c3
   1ba24:	mov	r5, r2
   1ba28:	mov	r6, r0
   1ba2c:	mov	r0, #0
   1ba30:	mov	r2, #5
   1ba34:	mov	r8, #0
   1ba38:	movt	r1, #4
   1ba3c:	bl	1264c <dcgettext@plt>
   1ba40:	cmp	r4, #0
   1ba44:	beq	1bb60 <__assert_fail@plt+0x8fa4>
   1ba48:	ldr	r9, [r5]
   1ba4c:	ldr	r7, [r4, r9, lsl #2]
   1ba50:	cmp	r7, #0
   1ba54:	beq	1bb60 <__assert_fail@plt+0x8fa4>
   1ba58:	add	r1, r9, #1
   1ba5c:	movw	sl, #20100	; 0x4e84
   1ba60:	vldr	d0, [pc, #456]	; 1bc30 <__assert_fail@plt+0x9074>
   1ba64:	add	r4, sp, #8
   1ba68:	str	r1, [r5]
   1ba6c:	movt	sl, #5
   1ba70:	ldrb	r1, [r7]
   1ba74:	ldr	r2, [sl, #28]
   1ba78:	ldr	r3, [sl, #32]
   1ba7c:	str	r0, [sp]
   1ba80:	movw	r0, #20863	; 0x517f
   1ba84:	movt	r0, #1
   1ba88:	cmp	r1, #45	; 0x2d
   1ba8c:	mov	r1, r4
   1ba90:	addeq	r2, r2, r0
   1ba94:	mov	r0, r7
   1ba98:	bl	1d9f8 <__assert_fail@plt+0xae3c>
   1ba9c:	cmp	r0, #0
   1baa0:	beq	1bb5c <__assert_fail@plt+0x8fa0>
   1baa4:	mov	r0, r6
   1baa8:	mov	r1, r7
   1baac:	bl	17be8 <__assert_fail@plt+0x502c>
   1bab0:	mov	r5, r0
   1bab4:	mov	r0, #8
   1bab8:	movw	r2, #10111	; 0x277f
   1babc:	movw	r7, #20863	; 0x517f
   1bac0:	vldr	s0, [pc, #376]	; 1bc40 <__assert_fail@plt+0x9084>
   1bac4:	mov	r8, #1
   1bac8:	vld1.64	{d16-d17}, [r4], r0
   1bacc:	add	r0, r5, #40	; 0x28
   1bad0:	movt	r2, #133	; 0x85
   1bad4:	movt	r7, #1
   1bad8:	vst1.64	{d16-d17}, [r0]
   1badc:	ldr	r0, [r4]
   1bae0:	ldr	r1, [sl, #28]
   1bae4:	sub	r0, r1, r0
   1bae8:	add	r1, pc, #328	; 0x148
   1baec:	cmp	r0, r2
   1baf0:	addgt	r1, r1, #4
   1baf4:	vldr	s2, [r1]
   1baf8:	add	r1, r7, #1
   1bafc:	cmp	r0, r1
   1bb00:	vselge.f32	s0, s2, s0
   1bb04:	vstr	s0, [r5, #28]
   1bb08:	ldrb	r0, [sl, #44]	; 0x2c
   1bb0c:	tst	r0, #1
   1bb10:	beq	1bb60 <__assert_fail@plt+0x8fa4>
   1bb14:	movw	sl, #17760	; 0x4560
   1bb18:	ldr	r2, [r5, #4]
   1bb1c:	movw	r1, #2311	; 0x907
   1bb20:	movt	sl, #5
   1bb24:	movt	r1, #4
   1bb28:	ldr	r0, [sl]
   1bb2c:	bl	128c8 <fprintf@plt>
   1bb30:	ldr	r9, [sp, #12]
   1bb34:	ldr	r0, [sl]
   1bb38:	cmp	r9, #0
   1bb3c:	beq	1bb6c <__assert_fail@plt+0x8fb0>
   1bb40:	cmp	r9, #1
   1bb44:	bne	1bb80 <__assert_fail@plt+0x8fc4>
   1bb48:	movw	r3, #2355	; 0x933
   1bb4c:	movw	r2, #8219	; 0x201b
   1bb50:	movt	r3, #4
   1bb54:	movt	r2, #4
   1bb58:	b	1bbac <__assert_fail@plt+0x8ff0>
   1bb5c:	str	r9, [r5]
   1bb60:	mov	r0, r8
   1bb64:	sub	sp, fp, #28
   1bb68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb6c:	movw	r3, #2352	; 0x930
   1bb70:	movw	r2, #2346	; 0x92a
   1bb74:	movt	r3, #4
   1bb78:	movt	r2, #4
   1bb7c:	b	1bbac <__assert_fail@plt+0x8ff0>
   1bb80:	movw	r1, #2358	; 0x936
   1bb84:	movw	r3, #2361	; 0x939
   1bb88:	cmp	r9, #2
   1bb8c:	movw	r2, #2362	; 0x93a
   1bb90:	movt	r1, #4
   1bb94:	movt	r3, #4
   1bb98:	movt	r2, #4
   1bb9c:	moveq	r3, r1
   1bba0:	movw	r1, #2349	; 0x92d
   1bba4:	movt	r1, #4
   1bba8:	moveq	r2, r1
   1bbac:	movw	r1, #2325	; 0x915
   1bbb0:	movt	r1, #4
   1bbb4:	bl	128c8 <fprintf@plt>
   1bbb8:	ldr	r4, [r5, #48]	; 0x30
   1bbbc:	ldr	r6, [sl]
   1bbc0:	add	r0, sp, #4
   1bbc4:	str	r4, [sp, #4]
   1bbc8:	bl	12640 <ctime@plt>
   1bbcc:	movw	r1, #2384	; 0x950
   1bbd0:	str	r0, [sp]
   1bbd4:	asr	r3, r4, #31
   1bbd8:	mov	r0, r6
   1bbdc:	mov	r2, r4
   1bbe0:	movt	r1, #4
   1bbe4:	bl	128c8 <fprintf@plt>
   1bbe8:	cmp	r9, #2
   1bbec:	bne	1bb60 <__assert_fail@plt+0x8fa4>
   1bbf0:	ldr	r0, [r5, #48]	; 0x30
   1bbf4:	ldr	r5, [sl]
   1bbf8:	add	r0, r0, r7
   1bbfc:	add	r4, r0, #1
   1bc00:	add	r0, sp, #4
   1bc04:	str	r4, [sp, #4]
   1bc08:	bl	12640 <ctime@plt>
   1bc0c:	movw	r1, #2364	; 0x93c
   1bc10:	str	r0, [sp]
   1bc14:	asr	r3, r4, #31
   1bc18:	mov	r0, r5
   1bc1c:	mov	r2, r4
   1bc20:	movt	r1, #4
   1bc24:	bl	128c8 <fprintf@plt>
   1bc28:	b	1bb60 <__assert_fail@plt+0x8fa4>
   1bc2c:	nop	{0}
   1bc30:	andeq	r0, r0, r0
   1bc34:	rscsmi	r1, r5, r0, lsl #16
   1bc38:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1bc3c:			; <UNDEFINED> instruction: 0x3e99999a
   1bc40:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1bc44:	mov	r3, #2
   1bc48:	b	1d8f0 <__assert_fail@plt+0xad34>
   1bc4c:	push	{r4, r5, r6, r7, fp, lr}
   1bc50:	add	fp, sp, #16
   1bc54:	sub	sp, sp, #112	; 0x70
   1bc58:	add	r7, sp, #8
   1bc5c:	mov	r4, r0
   1bc60:	mov	r5, r2
   1bc64:	mov	r6, r1
   1bc68:	mov	r0, r7
   1bc6c:	bl	17ed0 <__assert_fail@plt+0x5314>
   1bc70:	add	r3, sp, #4
   1bc74:	mov	r0, r6
   1bc78:	mov	r1, r5
   1bc7c:	mov	r2, r7
   1bc80:	bl	1db68 <__assert_fail@plt+0xafac>
   1bc84:	mov	r1, r0
   1bc88:	mov	r0, #0
   1bc8c:	cmp	r1, #0
   1bc90:	beq	1bd08 <__assert_fail@plt+0x914c>
   1bc94:	ldr	r1, [sp, #4]
   1bc98:	mov	r0, r4
   1bc9c:	bl	17be8 <__assert_fail@plt+0x502c>
   1bca0:	mov	r1, #2
   1bca4:	mov	r3, #0
   1bca8:	vldr	s0, [pc, #104]	; 1bd18 <__assert_fail@plt+0x915c>
   1bcac:	str	r1, [r0, #40]	; 0x28
   1bcb0:	ldr	r1, [sp, #88]	; 0x58
   1bcb4:	ldr	r2, [sp, #92]	; 0x5c
   1bcb8:	str	r3, [r0, #44]	; 0x2c
   1bcbc:	movw	r3, #10111	; 0x277f
   1bcc0:	movt	r3, #133	; 0x85
   1bcc4:	str	r1, [r0, #48]	; 0x30
   1bcc8:	movw	r1, #20100	; 0x4e84
   1bccc:	str	r2, [r0, #52]	; 0x34
   1bcd0:	movt	r1, #5
   1bcd4:	ldr	r2, [sp, #88]	; 0x58
   1bcd8:	ldr	r1, [r1, #28]
   1bcdc:	sub	r1, r1, r2
   1bce0:	add	r2, pc, #40	; 0x28
   1bce4:	cmp	r1, r3
   1bce8:	addgt	r2, r2, #4
   1bcec:	vldr	s2, [r2]
   1bcf0:	movw	r2, #20864	; 0x5180
   1bcf4:	movt	r2, #1
   1bcf8:	cmp	r1, r2
   1bcfc:	vselge.f32	s0, s2, s0
   1bd00:	vstr	s0, [r0, #28]
   1bd04:	mov	r0, #1
   1bd08:	sub	sp, fp, #16
   1bd0c:	pop	{r4, r5, r6, r7, fp, pc}
   1bd10:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1bd14:			; <UNDEFINED> instruction: 0x3e99999a
   1bd18:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1bd1c:	push	{r4, r5, r6, r7, fp, lr}
   1bd20:	add	fp, sp, #16
   1bd24:	mov	r6, r0
   1bd28:	mov	r0, #0
   1bd2c:	cmp	r1, #0
   1bd30:	beq	1bd94 <__assert_fail@plt+0x91d8>
   1bd34:	mov	r5, r1
   1bd38:	ldr	r1, [r2]
   1bd3c:	mov	r4, r2
   1bd40:	ldr	r1, [r5, r1, lsl #2]
   1bd44:	cmp	r1, #0
   1bd48:	popeq	{r4, r5, r6, r7, fp, pc}
   1bd4c:	bl	124b4 <is_selinux_enabled@plt>
   1bd50:	cmp	r0, #0
   1bd54:	ble	1bd98 <__assert_fail@plt+0x91dc>
   1bd58:	mov	r0, r6
   1bd5c:	mov	r1, #0
   1bd60:	mov	r7, #0
   1bd64:	bl	17be8 <__assert_fail@plt+0x502c>
   1bd68:	movw	r1, #55050	; 0xd70a
   1bd6c:	movt	r1, #15395	; 0x3c23
   1bd70:	str	r1, [r0, #28]
   1bd74:	strb	r7, [r0, #18]
   1bd78:	ldr	r1, [r4]
   1bd7c:	ldr	r1, [r5, r1, lsl #2]
   1bd80:	str	r1, [r0, #40]	; 0x28
   1bd84:	ldr	r0, [r4]
   1bd88:	add	r0, r0, #1
   1bd8c:	str	r0, [r4]
   1bd90:	mov	r0, #1
   1bd94:	pop	{r4, r5, r6, r7, fp, pc}
   1bd98:	movw	r1, #2392	; 0x958
   1bd9c:	mov	r0, #0
   1bda0:	mov	r2, #5
   1bda4:	movt	r1, #4
   1bda8:	bl	1264c <dcgettext@plt>
   1bdac:	mov	r2, r0
   1bdb0:	mov	r0, #1
   1bdb4:	mov	r1, #0
   1bdb8:	bl	12790 <error@plt>
   1bdbc:	push	{r4, sl, fp, lr}
   1bdc0:	add	fp, sp, #8
   1bdc4:	movw	r4, #20100	; 0x4e84
   1bdc8:	movt	r4, #5
   1bdcc:	ldrb	r0, [r4, #36]	; 0x24
   1bdd0:	cmp	r0, #0
   1bdd4:	bne	1be50 <__assert_fail@plt+0x9294>
   1bdd8:	mov	r0, r4
   1bddc:	mov	r2, #0
   1bde0:	ldr	r1, [r0, #28]!
   1bde4:	add	r1, r1, #4480	; 0x1180
   1bde8:	add	r1, r1, #81920	; 0x14000
   1bdec:	stm	r0, {r1, r2}
   1bdf0:	bl	12820 <localtime@plt>
   1bdf4:	cmp	r0, #0
   1bdf8:	beq	1be1c <__assert_fail@plt+0x9260>
   1bdfc:	ldm	r0, {r1, r2}
   1be00:	ldr	r0, [r0, #8]
   1be04:	rsb	r2, r2, r2, lsl #4
   1be08:	add	r1, r1, r2, lsl #2
   1be0c:	mov	r2, #3600	; 0xe10
   1be10:	mla	r1, r0, r2, r1
   1be14:	ldr	r0, [r4, #28]
   1be18:	b	1be40 <__assert_fail@plt+0x9284>
   1be1c:	ldr	r0, [r4, #28]
   1be20:	movw	r1, #17671	; 0x4507
   1be24:	movt	r1, #49710	; 0xc22e
   1be28:	smmla	r1, r0, r1, r0
   1be2c:	asr	r2, r1, #16
   1be30:	add	r1, r2, r1, lsr #31
   1be34:	movw	r2, #675	; 0x2a3
   1be38:	mul	r1, r1, r2
   1be3c:	sub	r1, r0, r1, lsl #7
   1be40:	mov	r2, #1
   1be44:	sub	r0, r0, r1
   1be48:	strb	r2, [r4, #36]	; 0x24
   1be4c:	str	r0, [r4, #28]
   1be50:	mov	r0, #1
   1be54:	pop	{r4, sl, fp, pc}
   1be58:	push	{fp, lr}
   1be5c:	mov	fp, sp
   1be60:	bl	17c44 <__assert_fail@plt+0x5088>
   1be64:	movw	r1, #257	; 0x101
   1be68:	mov	r2, #0
   1be6c:	strh	r1, [r0, #16]
   1be70:	movw	r1, #20100	; 0x4e84
   1be74:	movt	r1, #5
   1be78:	strb	r2, [r1]
   1be7c:	mov	r1, #1065353216	; 0x3f800000
   1be80:	str	r1, [r0, #28]
   1be84:	strh	r2, [r0, #18]
   1be88:	mov	r0, #1
   1be8c:	pop	{fp, pc}
   1be90:	push	{r4, sl, fp, lr}
   1be94:	add	fp, sp, #8
   1be98:	movw	r4, #20100	; 0x4e84
   1be9c:	movt	r4, #5
   1bea0:	ldrb	r0, [r4, #17]
   1bea4:	cmp	r0, #0
   1bea8:	bne	1bedc <__assert_fail@plt+0x9320>
   1beac:	ldrb	r0, [r4, #16]
   1beb0:	cmp	r0, #0
   1beb4:	beq	1bedc <__assert_fail@plt+0x9320>
   1beb8:	movw	r1, #2444	; 0x98c
   1bebc:	mov	r0, #0
   1bec0:	mov	r2, #5
   1bec4:	movt	r1, #4
   1bec8:	bl	1264c <dcgettext@plt>
   1becc:	mov	r2, r0
   1bed0:	mov	r0, #0
   1bed4:	mov	r1, #0
   1bed8:	bl	12790 <error@plt>
   1bedc:	movw	r1, #19692	; 0x4cec
   1bee0:	mov	r0, #256	; 0x100
   1bee4:	movt	r1, #5
   1bee8:	strh	r0, [r4]
   1beec:	ldr	r0, [r1]
   1bef0:	cmp	r0, #0
   1bef4:	bne	1bf08 <__assert_fail@plt+0x934c>
   1bef8:	movw	r0, #5152	; 0x1420
   1befc:	movt	r0, #4
   1bf00:	add	r0, r0, #1296	; 0x510
   1bf04:	str	r0, [r1]
   1bf08:	bl	17c44 <__assert_fail@plt+0x5088>
   1bf0c:	mov	r1, #0
   1bf10:	strh	r1, [r0, #18]
   1bf14:	mov	r1, #1065353216	; 0x3f800000
   1bf18:	str	r1, [r0, #28]
   1bf1c:	mov	r0, #1
   1bf20:	pop	{r4, sl, fp, pc}
   1bf24:	movw	r0, #20100	; 0x4e84
   1bf28:	mov	r1, #256	; 0x100
   1bf2c:	movt	r0, #5
   1bf30:	strh	r1, [r0]
   1bf34:	movw	r1, #19692	; 0x4cec
   1bf38:	movt	r1, #5
   1bf3c:	ldr	r0, [r1]
   1bf40:	cmp	r0, #0
   1bf44:	bne	1bf58 <__assert_fail@plt+0x939c>
   1bf48:	movw	r0, #5152	; 0x1420
   1bf4c:	movt	r0, #4
   1bf50:	add	r0, r0, #1296	; 0x510
   1bf54:	str	r0, [r1]
   1bf58:	push	{fp, lr}
   1bf5c:	mov	fp, sp
   1bf60:	bl	17c44 <__assert_fail@plt+0x5088>
   1bf64:	mov	r1, #0
   1bf68:	strh	r1, [r0, #18]
   1bf6c:	mov	r1, #1065353216	; 0x3f800000
   1bf70:	str	r1, [r0, #28]
   1bf74:	mov	r0, #1
   1bf78:	pop	{fp, pc}
   1bf7c:	push	{fp, lr}
   1bf80:	mov	fp, sp
   1bf84:	bl	17c44 <__assert_fail@plt+0x5088>
   1bf88:	movw	r1, #55050	; 0xd70a
   1bf8c:	movt	r1, #15395	; 0x3c23
   1bf90:	str	r1, [r0, #28]
   1bf94:	mov	r0, #1
   1bf98:	pop	{fp, pc}
   1bf9c:	mov	r3, r2
   1bfa0:	mov	r2, r1
   1bfa4:	mov	r1, r0
   1bfa8:	movw	r0, #2558	; 0x9fe
   1bfac:	movt	r0, #4
   1bfb0:	b	1dbd8 <__assert_fail@plt+0xb01c>
   1bfb4:	push	{fp, lr}
   1bfb8:	mov	fp, sp
   1bfbc:	bl	17c44 <__assert_fail@plt+0x5088>
   1bfc0:	ldr	r1, [r0]
   1bfc4:	movw	r3, #18968	; 0x4a18
   1bfc8:	add	r2, pc, #32
   1bfcc:	movt	r3, #1
   1bfd0:	cmp	r1, r3
   1bfd4:	mov	r1, #0
   1bfd8:	addeq	r2, r2, #4
   1bfdc:	str	r1, [r0, #16]
   1bfe0:	vldr	s0, [r2]
   1bfe4:	vstr	s0, [r0, #28]
   1bfe8:	mov	r0, #1
   1bfec:	pop	{fp, pc}
   1bff0:	svccc	0x00666666
   1bff4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1bff8:	mov	r3, r2
   1bffc:	mov	r2, r1
   1c000:	mov	r1, r0
   1c004:	movw	r0, #3412	; 0xd54
   1c008:	movt	r0, #4
   1c00c:	b	1dbd8 <__assert_fail@plt+0xb01c>
   1c010:	mov	r0, #0
   1c014:	cmp	r1, #0
   1c018:	beq	1c044 <__assert_fail@plt+0x9488>
   1c01c:	ldr	r3, [r2]
   1c020:	ldr	r1, [r1, r3, lsl #2]
   1c024:	cmp	r1, #0
   1c028:	bxeq	lr
   1c02c:	add	r0, r3, #1
   1c030:	str	r0, [r2]
   1c034:	movw	r0, #20100	; 0x4e84
   1c038:	movt	r0, #5
   1c03c:	str	r1, [r0, #76]	; 0x4c
   1c040:	mov	r0, #1
   1c044:	bx	lr
   1c048:	mov	ip, r0
   1c04c:	mov	r0, #0
   1c050:	cmp	r1, #0
   1c054:	beq	1c088 <__assert_fail@plt+0x94cc>
   1c058:	ldr	r3, [r2]
   1c05c:	ldr	r1, [r1, r3, lsl #2]
   1c060:	cmp	r1, #0
   1c064:	bxeq	lr
   1c068:	push	{fp, lr}
   1c06c:	mov	fp, sp
   1c070:	add	r0, r3, #1
   1c074:	str	r0, [r2]
   1c078:	mov	r0, ip
   1c07c:	bl	1e1fc <__assert_fail@plt+0xb640>
   1c080:	mov	r0, #1
   1c084:	pop	{fp, lr}
   1c088:	bx	lr
   1c08c:	movw	r0, #20100	; 0x4e84
   1c090:	movw	r1, #45428	; 0xb174
   1c094:	mov	r2, #1
   1c098:	movt	r0, #5
   1c09c:	movt	r1, #1
   1c0a0:	str	r1, [r0, #64]	; 0x40
   1c0a4:	movw	r1, #34340	; 0x8624
   1c0a8:	strb	r2, [r0, #12]
   1c0ac:	str	r2, [r0, #48]	; 0x30
   1c0b0:	movt	r1, #1
   1c0b4:	str	r1, [r0, #52]	; 0x34
   1c0b8:	ldrb	r1, [r0, #44]	; 0x2c
   1c0bc:	tst	r1, #2
   1c0c0:	movwne	r1, #34548	; 0x86f4
   1c0c4:	movtne	r1, #1
   1c0c8:	strne	r1, [r0, #52]	; 0x34
   1c0cc:	movw	r1, #19692	; 0x4cec
   1c0d0:	movt	r1, #5
   1c0d4:	ldr	r0, [r1]
   1c0d8:	cmp	r0, #0
   1c0dc:	bne	1c0f0 <__assert_fail@plt+0x9534>
   1c0e0:	movw	r0, #5152	; 0x1420
   1c0e4:	movt	r0, #4
   1c0e8:	add	r0, r0, #1296	; 0x510
   1c0ec:	str	r0, [r1]
   1c0f0:	push	{fp, lr}
   1c0f4:	mov	fp, sp
   1c0f8:	bl	17c44 <__assert_fail@plt+0x5088>
   1c0fc:	mov	r1, #0
   1c100:	strh	r1, [r0, #18]
   1c104:	mov	r1, #1065353216	; 0x3f800000
   1c108:	str	r1, [r0, #28]
   1c10c:	mov	r0, #1
   1c110:	pop	{fp, pc}
   1c114:	push	{r4, r5, fp, lr}
   1c118:	add	fp, sp, #8
   1c11c:	mov	r3, r0
   1c120:	mov	r0, #0
   1c124:	cmp	r1, #0
   1c128:	beq	1c174 <__assert_fail@plt+0x95b8>
   1c12c:	ldr	r5, [r2]
   1c130:	ldr	r4, [r1, r5, lsl #2]
   1c134:	cmp	r4, #0
   1c138:	popeq	{r4, r5, fp, pc}
   1c13c:	add	r0, r5, #1
   1c140:	mov	r1, r4
   1c144:	str	r0, [r2]
   1c148:	mov	r0, r3
   1c14c:	bl	17be8 <__assert_fail@plt+0x502c>
   1c150:	mov	r5, r0
   1c154:	add	r1, r0, #40	; 0x28
   1c158:	mov	r0, r4
   1c15c:	bl	1e23c <__assert_fail@plt+0xb680>
   1c160:	mov	r0, #1065353216	; 0x3f800000
   1c164:	str	r0, [r5, #28]
   1c168:	movw	r0, #257	; 0x101
   1c16c:	str	r0, [r5, #16]
   1c170:	mov	r0, #1
   1c174:	pop	{r4, r5, fp, pc}
   1c178:	mov	ip, r0
   1c17c:	mov	r0, #0
   1c180:	cmp	r1, #0
   1c184:	beq	1c1b8 <__assert_fail@plt+0x95fc>
   1c188:	ldr	r3, [r2]
   1c18c:	ldr	r1, [r1, r3, lsl #2]
   1c190:	cmp	r1, #0
   1c194:	bxeq	lr
   1c198:	push	{fp, lr}
   1c19c:	mov	fp, sp
   1c1a0:	add	r0, r3, #1
   1c1a4:	str	r0, [r2]
   1c1a8:	mov	r0, ip
   1c1ac:	bl	1e334 <__assert_fail@plt+0xb778>
   1c1b0:	mov	r0, #1
   1c1b4:	pop	{fp, lr}
   1c1b8:	bx	lr
   1c1bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c1c0:	add	fp, sp, #24
   1c1c4:	sub	sp, sp, #24
   1c1c8:	ldr	r7, [r2]
   1c1cc:	mov	r4, r2
   1c1d0:	cmp	r1, #0
   1c1d4:	beq	1c234 <__assert_fail@plt+0x9678>
   1c1d8:	mov	r5, r0
   1c1dc:	ldr	r0, [r1, r7, lsl #2]
   1c1e0:	cmp	r0, #0
   1c1e4:	beq	1c234 <__assert_fail@plt+0x9678>
   1c1e8:	add	r2, r7, #1
   1c1ec:	str	r2, [r4]
   1c1f0:	ldr	r6, [r1, r2, lsl #2]
   1c1f4:	cmp	r6, #0
   1c1f8:	beq	1c234 <__assert_fail@plt+0x9678>
   1c1fc:	add	r1, r7, #2
   1c200:	add	r8, sp, #4
   1c204:	str	r1, [r4]
   1c208:	mov	r1, r8
   1c20c:	bl	1e23c <__assert_fail@plt+0xb680>
   1c210:	ldr	r7, [r4]
   1c214:	mov	r0, r8
   1c218:	mov	r1, r5
   1c21c:	mov	r2, r6
   1c220:	bl	19724 <__assert_fail@plt+0x6b68>
   1c224:	mov	r1, r0
   1c228:	mov	r0, #1
   1c22c:	cmp	r1, #0
   1c230:	bne	1c23c <__assert_fail@plt+0x9680>
   1c234:	mov	r0, #0
   1c238:	str	r7, [r4]
   1c23c:	sub	sp, fp, #24
   1c240:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c244:	push	{r4, r5, r6, sl, fp, lr}
   1c248:	add	fp, sp, #16
   1c24c:	sub	sp, sp, #104	; 0x68
   1c250:	mov	r5, r0
   1c254:	mov	r0, #0
   1c258:	cmp	r1, #0
   1c25c:	beq	1c330 <__assert_fail@plt+0x9774>
   1c260:	ldr	r3, [r2]
   1c264:	ldr	r4, [r1, r3, lsl #2]
   1c268:	cmp	r4, #0
   1c26c:	beq	1c330 <__assert_fail@plt+0x9774>
   1c270:	movw	r6, #20100	; 0x4e84
   1c274:	add	r0, r3, #1
   1c278:	str	r0, [r2]
   1c27c:	movt	r6, #5
   1c280:	ldrh	r0, [r6, #68]	; 0x44
   1c284:	cmp	r0, #2
   1c288:	bcc	1c29c <__assert_fail@plt+0x96e0>
   1c28c:	mov	r0, r4
   1c290:	bl	1add0 <__assert_fail@plt+0x8214>
   1c294:	cmp	r0, #0
   1c298:	beq	1c304 <__assert_fail@plt+0x9748>
   1c29c:	mov	r0, r5
   1c2a0:	mov	r1, r4
   1c2a4:	bl	17be8 <__assert_fail@plt+0x502c>
   1c2a8:	mov	r5, r0
   1c2ac:	str	r4, [r0, #40]	; 0x28
   1c2b0:	movw	r0, #57938	; 0xe252
   1c2b4:	mov	r1, sp
   1c2b8:	movt	r0, #3
   1c2bc:	bl	3d704 <__assert_fail@plt+0x2ab48>
   1c2c0:	cmp	r0, #0
   1c2c4:	beq	1c2d0 <__assert_fail@plt+0x9714>
   1c2c8:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1c2cc:	b	1c2fc <__assert_fail@plt+0x9740>
   1c2d0:	movw	r1, #57938	; 0xe252
   1c2d4:	mov	r0, sp
   1c2d8:	movt	r1, #3
   1c2dc:	bl	1ac88 <__assert_fail@plt+0x80cc>
   1c2e0:	mov	r1, r0
   1c2e4:	mov	r0, r4
   1c2e8:	bl	124cc <strcmp@plt>
   1c2ec:	add	r1, pc, #100	; 0x64
   1c2f0:	cmp	r0, #0
   1c2f4:	addeq	r1, r1, #4
   1c2f8:	vldr	s0, [r1]
   1c2fc:	vstr	s0, [r5, #28]
   1c300:	b	1c32c <__assert_fail@plt+0x9770>
   1c304:	ldrb	r0, [r6, #44]	; 0x2c
   1c308:	tst	r0, #8
   1c30c:	bne	1c338 <__assert_fail@plt+0x977c>
   1c310:	movw	r0, #2012	; 0x7dc
   1c314:	movt	r0, #4
   1c318:	bl	1b23c <__assert_fail@plt+0x8680>
   1c31c:	bl	17c44 <__assert_fail@plt+0x5088>
   1c320:	mov	r1, #0
   1c324:	str	r1, [r0, #28]
   1c328:	str	r1, [r0, #16]
   1c32c:	mov	r0, #1
   1c330:	sub	sp, fp, #16
   1c334:	pop	{r4, r5, r6, sl, fp, pc}
   1c338:	movw	r0, #17760	; 0x4560
   1c33c:	movw	r1, #3460	; 0xd84
   1c340:	mov	r2, r4
   1c344:	movt	r0, #5
   1c348:	movt	r1, #4
   1c34c:	ldr	r0, [r0]
   1c350:	bl	128c8 <fprintf@plt>
   1c354:	b	1c310 <__assert_fail@plt+0x9754>
   1c358:			; <UNDEFINED> instruction: 0x3e99999a
   1c35c:	svccc	0x00333333
   1c360:	push	{r4, sl, fp, lr}
   1c364:	add	fp, sp, #8
   1c368:	mov	r4, r2
   1c36c:	mov	r2, r0
   1c370:	mov	r0, r1
   1c374:	mov	r1, r4
   1c378:	bl	1e374 <__assert_fail@plt+0xb7b8>
   1c37c:	cmp	r0, #0
   1c380:	beq	1c3a8 <__assert_fail@plt+0x97ec>
   1c384:	add	r1, pc, #48	; 0x30
   1c388:	ldrd	r2, [r0, #48]	; 0x30
   1c38c:	subs	r2, r2, #100	; 0x64
   1c390:	sbcs	r2, r3, #0
   1c394:	addcc	r1, r1, #4
   1c398:	vldr	s0, [r1]
   1c39c:	vstr	s0, [r0, #28]
   1c3a0:	mov	r0, #1
   1c3a4:	pop	{r4, sl, fp, pc}
   1c3a8:	ldr	r0, [r4]
   1c3ac:	sub	r0, r0, #1
   1c3b0:	str	r0, [r4]
   1c3b4:	mov	r0, #0
   1c3b8:	pop	{r4, sl, fp, pc}
   1c3bc:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c3c0:	svccc	0x007d70a4
   1c3c4:	push	{r4, r5, r6, r7, fp, lr}
   1c3c8:	add	fp, sp, #16
   1c3cc:	sub	sp, sp, #8
   1c3d0:	mov	r5, r0
   1c3d4:	mov	r0, #0
   1c3d8:	cmp	r1, #0
   1c3dc:	beq	1c488 <__assert_fail@plt+0x98cc>
   1c3e0:	ldr	r3, [r2]
   1c3e4:	ldr	r4, [r1, r3, lsl #2]
   1c3e8:	cmp	r4, #0
   1c3ec:	beq	1c488 <__assert_fail@plt+0x98cc>
   1c3f0:	add	r0, r3, #1
   1c3f4:	str	r0, [r2]
   1c3f8:	mov	r0, r4
   1c3fc:	bl	12ba4 <getgrnam@plt>
   1c400:	mov	r6, r0
   1c404:	bl	12460 <endgrent@plt>
   1c408:	cmp	r6, #0
   1c40c:	beq	1c418 <__assert_fail@plt+0x985c>
   1c410:	ldr	r6, [r6, #8]
   1c414:	b	1c458 <__assert_fail@plt+0x989c>
   1c418:	movw	r1, #3520	; 0xdc0
   1c41c:	mov	r0, r4
   1c420:	movt	r1, #4
   1c424:	bl	12bb0 <strspn@plt>
   1c428:	cmp	r0, #0
   1c42c:	beq	1c490 <__assert_fail@plt+0x98d4>
   1c430:	mov	r6, r4
   1c434:	ldrb	r0, [r6, r0]!
   1c438:	cmp	r0, #0
   1c43c:	bne	1c4c0 <__assert_fail@plt+0x9904>
   1c440:	movw	r0, #20100	; 0x4e84
   1c444:	movt	r0, #5
   1c448:	ldr	r1, [r0, #72]	; 0x48
   1c44c:	mov	r0, r4
   1c450:	bl	20df8 <__assert_fail@plt+0xe23c>
   1c454:	mov	r6, r0
   1c458:	mov	r0, r5
   1c45c:	mov	r1, r4
   1c460:	bl	17be8 <__assert_fail@plt+0x502c>
   1c464:	ldrd	r2, [r0, #48]	; 0x30
   1c468:	add	r1, pc, #240	; 0xf0
   1c46c:	str	r6, [r0, #40]	; 0x28
   1c470:	subs	r2, r2, #100	; 0x64
   1c474:	sbcs	r2, r3, #0
   1c478:	addcc	r1, r1, #4
   1c47c:	vldr	s0, [r1]
   1c480:	vstr	s0, [r0, #28]
   1c484:	mov	r0, #1
   1c488:	sub	sp, fp, #16
   1c48c:	pop	{r4, r5, r6, r7, fp, pc}
   1c490:	ldrb	r0, [r4]
   1c494:	cmp	r0, #0
   1c498:	bne	1c51c <__assert_fail@plt+0x9960>
   1c49c:	movw	r1, #3696	; 0xe70
   1c4a0:	mov	r0, #0
   1c4a4:	mov	r2, #5
   1c4a8:	movt	r1, #4
   1c4ac:	bl	1264c <dcgettext@plt>
   1c4b0:	mov	r2, r0
   1c4b4:	mov	r0, #1
   1c4b8:	mov	r1, #0
   1c4bc:	bl	12790 <error@plt>
   1c4c0:	movw	r1, #3531	; 0xdcb
   1c4c4:	mov	r0, #0
   1c4c8:	mov	r2, #5
   1c4cc:	movt	r1, #4
   1c4d0:	bl	1264c <dcgettext@plt>
   1c4d4:	movw	r7, #20100	; 0x4e84
   1c4d8:	mov	r5, r0
   1c4dc:	mov	r0, #0
   1c4e0:	mov	r2, r4
   1c4e4:	movt	r7, #5
   1c4e8:	ldr	r1, [r7, #72]	; 0x48
   1c4ec:	bl	29834 <__assert_fail@plt+0x16c78>
   1c4f0:	ldr	r1, [r7, #72]	; 0x48
   1c4f4:	mov	r4, r0
   1c4f8:	mov	r0, #1
   1c4fc:	mov	r2, r6
   1c500:	bl	29834 <__assert_fail@plt+0x16c78>
   1c504:	str	r0, [sp]
   1c508:	mov	r0, #1
   1c50c:	mov	r1, #0
   1c510:	mov	r2, r5
   1c514:	mov	r3, r4
   1c518:	bl	12790 <error@plt>
   1c51c:	movw	r1, #3656	; 0xe48
   1c520:	mov	r0, #0
   1c524:	mov	r2, #5
   1c528:	movt	r1, #4
   1c52c:	bl	1264c <dcgettext@plt>
   1c530:	mov	r5, r0
   1c534:	movw	r0, #20100	; 0x4e84
   1c538:	mov	r2, r4
   1c53c:	movt	r0, #5
   1c540:	ldr	r1, [r0, #72]	; 0x48
   1c544:	mov	r0, #0
   1c548:	bl	29834 <__assert_fail@plt+0x16c78>
   1c54c:	mov	r3, r0
   1c550:	mov	r0, #1
   1c554:	mov	r1, #0
   1c558:	mov	r2, r5
   1c55c:	bl	12790 <error@plt>
   1c560:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c564:	svccc	0x007d70a4
   1c568:	movw	r0, #20100	; 0x4e84
   1c56c:	mov	r1, #1
   1c570:	movt	r0, #5
   1c574:	strb	r1, [r0, #14]
   1c578:	movw	r1, #19692	; 0x4cec
   1c57c:	movt	r1, #5
   1c580:	ldr	r0, [r1]
   1c584:	cmp	r0, #0
   1c588:	bne	1c59c <__assert_fail@plt+0x99e0>
   1c58c:	movw	r0, #5152	; 0x1420
   1c590:	movt	r0, #4
   1c594:	add	r0, r0, #1296	; 0x510
   1c598:	str	r0, [r1]
   1c59c:	push	{fp, lr}
   1c5a0:	mov	fp, sp
   1c5a4:	bl	17c44 <__assert_fail@plt+0x5088>
   1c5a8:	mov	r1, #0
   1c5ac:	strh	r1, [r0, #18]
   1c5b0:	mov	r1, #1065353216	; 0x3f800000
   1c5b4:	str	r1, [r0, #28]
   1c5b8:	mov	r0, #1
   1c5bc:	pop	{fp, pc}
   1c5c0:	push	{r4, r5, fp, lr}
   1c5c4:	add	fp, sp, #8
   1c5c8:	mov	r3, r0
   1c5cc:	mov	r0, #0
   1c5d0:	cmp	r1, #0
   1c5d4:	beq	1c62c <__assert_fail@plt+0x9a70>
   1c5d8:	ldr	r5, [r2]
   1c5dc:	ldr	r4, [r1, r5, lsl #2]
   1c5e0:	cmp	r4, #0
   1c5e4:	popeq	{r4, r5, fp, pc}
   1c5e8:	add	r0, r5, #1
   1c5ec:	mov	r1, r4
   1c5f0:	str	r0, [r2]
   1c5f4:	mov	r0, r3
   1c5f8:	bl	17be8 <__assert_fail@plt+0x502c>
   1c5fc:	movw	r1, #3752	; 0xea8
   1c600:	mov	r5, r0
   1c604:	str	r4, [r0, #40]	; 0x28
   1c608:	mov	r0, r4
   1c60c:	movt	r1, #4
   1c610:	bl	12ad8 <strpbrk@plt>
   1c614:	cmp	r0, #0
   1c618:	add	r1, pc, #16
   1c61c:	mov	r0, #1
   1c620:	addeq	r1, r1, #4
   1c624:	vldr	s0, [r1]
   1c628:	vstr	s0, [r5, #28]
   1c62c:	pop	{r4, r5, fp, pc}
   1c630:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1c634:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1c638:	push	{r4, r5, r6, sl, fp, lr}
   1c63c:	add	fp, sp, #16
   1c640:	mov	r6, r2
   1c644:	mov	r4, r1
   1c648:	mov	r5, r0
   1c64c:	bl	1e598 <__assert_fail@plt+0xb9dc>
   1c650:	mov	r0, #0
   1c654:	cmp	r4, #0
   1c658:	beq	1c6d0 <__assert_fail@plt+0x9b14>
   1c65c:	ldr	r1, [r6]
   1c660:	ldr	r4, [r4, r1, lsl #2]
   1c664:	cmp	r4, #0
   1c668:	popeq	{r4, r5, r6, sl, fp, pc}
   1c66c:	add	r0, r1, #1
   1c670:	movw	r1, #3763	; 0xeb3
   1c674:	mov	r2, r4
   1c678:	str	r0, [r6]
   1c67c:	movw	r0, #3756	; 0xeac
   1c680:	movt	r1, #4
   1c684:	movt	r0, #4
   1c688:	bl	1e640 <__assert_fail@plt+0xba84>
   1c68c:	mov	r0, r5
   1c690:	mov	r1, r4
   1c694:	bl	17be8 <__assert_fail@plt+0x502c>
   1c698:	movw	r1, #3752	; 0xea8
   1c69c:	mov	r5, r0
   1c6a0:	mov	r0, #0
   1c6a4:	strh	r0, [r5, #18]
   1c6a8:	movt	r1, #4
   1c6ac:	mov	r0, r4
   1c6b0:	str	r4, [r5, #40]	; 0x28
   1c6b4:	bl	12ad8 <strpbrk@plt>
   1c6b8:	cmp	r0, #0
   1c6bc:	add	r1, pc, #16
   1c6c0:	mov	r0, #1
   1c6c4:	addeq	r1, r1, #4
   1c6c8:	vldr	s0, [r1]
   1c6cc:	vstr	s0, [r5, #28]
   1c6d0:	pop	{r4, r5, r6, sl, fp, pc}
   1c6d4:	svccc	0x004ccccd
   1c6d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c6dc:	push	{r4, sl, fp, lr}
   1c6e0:	add	fp, sp, #8
   1c6e4:	mov	r4, r2
   1c6e8:	mov	r2, r0
   1c6ec:	mov	r0, r1
   1c6f0:	mov	r1, r4
   1c6f4:	bl	1e374 <__assert_fail@plt+0xb7b8>
   1c6f8:	cmp	r0, #0
   1c6fc:	beq	1c724 <__assert_fail@plt+0x9b68>
   1c700:	movw	r2, #14269	; 0x37bd
   1c704:	mov	r1, r0
   1c708:	mov	r0, #1
   1c70c:	movt	r2, #13702	; 0x3586
   1c710:	strb	r0, [r1, #20]
   1c714:	str	r2, [r1, #28]
   1c718:	mov	r2, #0
   1c71c:	strh	r2, [r1, #18]
   1c720:	pop	{r4, sl, fp, pc}
   1c724:	ldr	r0, [r4]
   1c728:	sub	r0, r0, #1
   1c72c:	str	r0, [r4]
   1c730:	mov	r0, #0
   1c734:	pop	{r4, sl, fp, pc}
   1c738:	push	{fp, lr}
   1c73c:	mov	fp, sp
   1c740:	sub	sp, sp, #8
   1c744:	movw	r3, #17704	; 0x4528
   1c748:	movt	r3, #1
   1c74c:	str	r3, [sp]
   1c750:	movw	r3, #1854	; 0x73e
   1c754:	movt	r3, #4
   1c758:	bl	1e6f4 <__assert_fail@plt+0xbb38>
   1c75c:	mov	sp, fp
   1c760:	pop	{fp, pc}
   1c764:	mov	ip, r2
   1c768:	mov	r2, r0
   1c76c:	movw	r0, #20100	; 0x4e84
   1c770:	movt	r0, #5
   1c774:	ldr	r0, [r0, #60]	; 0x3c
   1c778:	orr	r3, r0, #4194304	; 0x400000
   1c77c:	mov	r0, r1
   1c780:	mov	r1, ip
   1c784:	b	1e82c <__assert_fail@plt+0xbc70>
   1c788:	push	{fp, lr}
   1c78c:	mov	fp, sp
   1c790:	sub	sp, sp, #8
   1c794:	movw	r3, #17704	; 0x4528
   1c798:	movt	r3, #1
   1c79c:	str	r3, [sp]
   1c7a0:	movw	r3, #3764	; 0xeb4
   1c7a4:	movt	r3, #4
   1c7a8:	bl	1e6f4 <__assert_fail@plt+0xbb38>
   1c7ac:	mov	sp, fp
   1c7b0:	pop	{fp, pc}
   1c7b4:	push	{r4, sl, fp, lr}
   1c7b8:	add	fp, sp, #8
   1c7bc:	mov	r4, r2
   1c7c0:	mov	r2, r0
   1c7c4:	mov	r0, r1
   1c7c8:	mov	r1, r4
   1c7cc:	bl	1e374 <__assert_fail@plt+0xb7b8>
   1c7d0:	cmp	r0, #0
   1c7d4:	beq	1c7f8 <__assert_fail@plt+0x9c3c>
   1c7d8:	ldr	r2, [r0, #48]	; 0x30
   1c7dc:	ldr	r1, [r0, #52]	; 0x34
   1c7e0:	eor	r3, r2, #1
   1c7e4:	orrs	r3, r3, r1
   1c7e8:	bne	1c80c <__assert_fail@plt+0x9c50>
   1c7ec:	movw	r1, #28836	; 0x70a4
   1c7f0:	movt	r1, #16253	; 0x3f7d
   1c7f4:	b	1c82c <__assert_fail@plt+0x9c70>
   1c7f8:	ldr	r0, [r4]
   1c7fc:	sub	r0, r0, #1
   1c800:	str	r0, [r4]
   1c804:	mov	r0, #0
   1c808:	pop	{r4, sl, fp, pc}
   1c80c:	eor	r2, r2, #2
   1c810:	orrs	r1, r2, r1
   1c814:	bne	1c824 <__assert_fail@plt+0x9c68>
   1c818:	movw	r1, #55050	; 0xd70a
   1c81c:	movt	r1, #15395	; 0x3c23
   1c820:	b	1c82c <__assert_fail@plt+0x9c70>
   1c824:	movw	r1, #4719	; 0x126f
   1c828:	movt	r1, #14979	; 0x3a83
   1c82c:	str	r1, [r0, #28]
   1c830:	mov	r0, #1
   1c834:	pop	{r4, sl, fp, pc}
   1c838:	push	{r4, r5, r6, sl, fp, lr}
   1c83c:	add	fp, sp, #16
   1c840:	mov	r5, r2
   1c844:	mov	r6, r1
   1c848:	mov	r4, r0
   1c84c:	bl	1e598 <__assert_fail@plt+0xb9dc>
   1c850:	mov	r0, #0
   1c854:	cmp	r6, #0
   1c858:	beq	1c8b0 <__assert_fail@plt+0x9cf4>
   1c85c:	ldr	r1, [r5]
   1c860:	ldr	r6, [r6, r1, lsl #2]
   1c864:	cmp	r6, #0
   1c868:	popeq	{r4, r5, r6, sl, fp, pc}
   1c86c:	add	r0, r1, #1
   1c870:	mov	r1, r6
   1c874:	str	r0, [r5]
   1c878:	mov	r0, r4
   1c87c:	bl	17be8 <__assert_fail@plt+0x502c>
   1c880:	movw	r1, #3752	; 0xea8
   1c884:	mov	r4, r0
   1c888:	str	r6, [r0, #40]	; 0x28
   1c88c:	mov	r0, r6
   1c890:	movt	r1, #4
   1c894:	bl	12ad8 <strpbrk@plt>
   1c898:	cmp	r0, #0
   1c89c:	add	r1, pc, #16
   1c8a0:	mov	r0, #1
   1c8a4:	addeq	r1, r1, #4
   1c8a8:	vldr	s0, [r1]
   1c8ac:	vstr	s0, [r4, #28]
   1c8b0:	pop	{r4, r5, r6, sl, fp, pc}
   1c8b4:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1c8b8:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1c8bc:	push	{r4, sl, fp, lr}
   1c8c0:	add	fp, sp, #8
   1c8c4:	bl	17c44 <__assert_fail@plt+0x5088>
   1c8c8:	mov	r4, r0
   1c8cc:	add	r1, r0, #40	; 0x28
   1c8d0:	movw	r0, #3448	; 0xd78
   1c8d4:	movt	r0, #4
   1c8d8:	bl	1e23c <__assert_fail@plt+0xb680>
   1c8dc:	mov	r0, #1065353216	; 0x3f800000
   1c8e0:	str	r0, [r4, #28]
   1c8e4:	movw	r0, #257	; 0x101
   1c8e8:	strh	r0, [r4, #16]
   1c8ec:	mov	r0, #1
   1c8f0:	pop	{r4, sl, fp, pc}
   1c8f4:	mov	r0, r1
   1c8f8:	movw	r1, #20100	; 0x4e84
   1c8fc:	mov	r3, r2
   1c900:	movt	r1, #5
   1c904:	add	r2, r1, #4
   1c908:	mov	r1, r3
   1c90c:	b	1e928 <__assert_fail@plt+0xbd6c>
   1c910:	mov	r0, r1
   1c914:	movw	r1, #20100	; 0x4e84
   1c918:	mov	r3, r2
   1c91c:	movt	r1, #5
   1c920:	add	r2, r1, #8
   1c924:	mov	r1, r3
   1c928:	b	1e928 <__assert_fail@plt+0xbd6c>
   1c92c:	mov	r3, #3
   1c930:	b	1d8f0 <__assert_fail@plt+0xad34>
   1c934:	movw	r0, #20100	; 0x4e84
   1c938:	mov	r1, #1
   1c93c:	movt	r0, #5
   1c940:	strb	r1, [r0, #13]
   1c944:	movw	r1, #19692	; 0x4cec
   1c948:	movt	r1, #5
   1c94c:	ldr	r0, [r1]
   1c950:	cmp	r0, #0
   1c954:	bne	1c968 <__assert_fail@plt+0x9dac>
   1c958:	movw	r0, #5152	; 0x1420
   1c95c:	movt	r0, #4
   1c960:	add	r0, r0, #1296	; 0x510
   1c964:	str	r0, [r1]
   1c968:	push	{fp, lr}
   1c96c:	mov	fp, sp
   1c970:	bl	17c44 <__assert_fail@plt+0x5088>
   1c974:	mov	r1, #0
   1c978:	strh	r1, [r0, #18]
   1c97c:	mov	r1, #1065353216	; 0x3f800000
   1c980:	str	r1, [r0, #28]
   1c984:	mov	r0, #1
   1c988:	pop	{fp, pc}
   1c98c:	push	{r4, r5, fp, lr}
   1c990:	add	fp, sp, #8
   1c994:	mov	r5, r0
   1c998:	mov	r0, #0
   1c99c:	cmp	r1, #0
   1c9a0:	beq	1ca1c <__assert_fail@plt+0x9e60>
   1c9a4:	ldr	r3, [r2]
   1c9a8:	ldr	r4, [r1, r3, lsl #2]
   1c9ac:	cmp	r4, #0
   1c9b0:	popeq	{r4, r5, fp, pc}
   1c9b4:	add	r0, r3, #1
   1c9b8:	str	r0, [r2]
   1c9bc:	bl	1e598 <__assert_fail@plt+0xb9dc>
   1c9c0:	movw	r0, #4189	; 0x105d
   1c9c4:	movw	r1, #4195	; 0x1063
   1c9c8:	mov	r2, r4
   1c9cc:	movt	r0, #4
   1c9d0:	movt	r1, #4
   1c9d4:	bl	1e640 <__assert_fail@plt+0xba84>
   1c9d8:	mov	r0, r5
   1c9dc:	mov	r1, r4
   1c9e0:	bl	17be8 <__assert_fail@plt+0x502c>
   1c9e4:	movw	r1, #3752	; 0xea8
   1c9e8:	mov	r5, r0
   1c9ec:	mov	r0, #0
   1c9f0:	strh	r0, [r5, #18]
   1c9f4:	movt	r1, #4
   1c9f8:	mov	r0, r4
   1c9fc:	str	r4, [r5, #40]	; 0x28
   1ca00:	bl	12ad8 <strpbrk@plt>
   1ca04:	cmp	r0, #0
   1ca08:	add	r1, pc, #16
   1ca0c:	mov	r0, #1
   1ca10:	addeq	r1, r1, #4
   1ca14:	vldr	s0, [r1]
   1ca18:	vstr	s0, [r5, #28]
   1ca1c:	pop	{r4, r5, fp, pc}
   1ca20:	svccc	0x004ccccd
   1ca24:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ca28:	push	{r4, r5, r6, r7, fp, lr}
   1ca2c:	add	fp, sp, #16
   1ca30:	sub	sp, sp, #112	; 0x70
   1ca34:	add	r7, sp, #8
   1ca38:	mov	r4, r0
   1ca3c:	mov	r5, r2
   1ca40:	mov	r6, r1
   1ca44:	mov	r0, r7
   1ca48:	bl	17ed0 <__assert_fail@plt+0x5314>
   1ca4c:	add	r3, sp, #4
   1ca50:	mov	r0, r6
   1ca54:	mov	r1, r5
   1ca58:	mov	r2, r7
   1ca5c:	bl	1db68 <__assert_fail@plt+0xafac>
   1ca60:	mov	r1, r0
   1ca64:	mov	r0, #0
   1ca68:	cmp	r1, #0
   1ca6c:	beq	1cae4 <__assert_fail@plt+0x9f28>
   1ca70:	ldr	r1, [sp, #4]
   1ca74:	mov	r0, r4
   1ca78:	bl	17be8 <__assert_fail@plt+0x502c>
   1ca7c:	ldr	r1, [sp, #88]	; 0x58
   1ca80:	ldr	r2, [sp, #92]	; 0x5c
   1ca84:	mov	r3, #3
   1ca88:	mov	r7, #0
   1ca8c:	vldr	s0, [pc, #96]	; 1caf4 <__assert_fail@plt+0x9f38>
   1ca90:	str	r3, [r0, #40]	; 0x28
   1ca94:	str	r7, [r0, #44]	; 0x2c
   1ca98:	movw	r3, #10111	; 0x277f
   1ca9c:	movt	r3, #133	; 0x85
   1caa0:	str	r1, [r0, #48]	; 0x30
   1caa4:	movw	r1, #20100	; 0x4e84
   1caa8:	str	r2, [r0, #52]	; 0x34
   1caac:	movt	r1, #5
   1cab0:	ldr	r2, [sp, #88]	; 0x58
   1cab4:	ldr	r1, [r1, #28]
   1cab8:	sub	r1, r1, r2
   1cabc:	add	r2, pc, #40	; 0x28
   1cac0:	cmp	r1, r3
   1cac4:	addgt	r2, r2, #4
   1cac8:	vldr	s2, [r2]
   1cacc:	movw	r2, #20864	; 0x5180
   1cad0:	movt	r2, #1
   1cad4:	cmp	r1, r2
   1cad8:	vselge.f32	s0, s2, s0
   1cadc:	vstr	s0, [r0, #28]
   1cae0:	mov	r0, #1
   1cae4:	sub	sp, fp, #16
   1cae8:	pop	{r4, r5, r6, r7, fp, pc}
   1caec:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1caf0:			; <UNDEFINED> instruction: 0x3e99999a
   1caf4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1caf8:	movw	r0, #20100	; 0x4e84
   1cafc:	mov	r1, #1
   1cb00:	movt	r0, #5
   1cb04:	strb	r1, [r0, #12]
   1cb08:	movw	r1, #19692	; 0x4cec
   1cb0c:	movt	r1, #5
   1cb10:	ldr	r0, [r1]
   1cb14:	cmp	r0, #0
   1cb18:	bne	1cb2c <__assert_fail@plt+0x9f70>
   1cb1c:	movw	r0, #5152	; 0x1420
   1cb20:	movt	r0, #4
   1cb24:	add	r0, r0, #1296	; 0x510
   1cb28:	str	r0, [r1]
   1cb2c:	push	{fp, lr}
   1cb30:	mov	fp, sp
   1cb34:	bl	17c44 <__assert_fail@plt+0x5088>
   1cb38:	mov	r1, #0
   1cb3c:	strh	r1, [r0, #18]
   1cb40:	mov	r1, #1065353216	; 0x3f800000
   1cb44:	str	r1, [r0, #28]
   1cb48:	mov	r0, #1
   1cb4c:	pop	{fp, pc}
   1cb50:	push	{fp, lr}
   1cb54:	mov	fp, sp
   1cb58:	mov	r1, #0
   1cb5c:	bl	17be8 <__assert_fail@plt+0x502c>
   1cb60:	movw	r1, #46871	; 0xb717
   1cb64:	movt	r1, #14545	; 0x38d1
   1cb68:	str	r1, [r0, #28]
   1cb6c:	mov	r0, #1
   1cb70:	pop	{fp, pc}
   1cb74:	push	{fp, lr}
   1cb78:	mov	fp, sp
   1cb7c:	bl	17c44 <__assert_fail@plt+0x5088>
   1cb80:	movw	r1, #4719	; 0x126f
   1cb84:	movt	r1, #14979	; 0x3a83
   1cb88:	str	r1, [r0, #28]
   1cb8c:	mov	r0, #1
   1cb90:	pop	{fp, pc}
   1cb94:	push	{r4, sl, fp, lr}
   1cb98:	add	fp, sp, #8
   1cb9c:	movw	r0, #20100	; 0x4e84
   1cba0:	movw	r1, #19692	; 0x4cec
   1cba4:	mov	r4, #0
   1cba8:	movt	r0, #5
   1cbac:	movt	r1, #5
   1cbb0:	strb	r4, [r0, #14]
   1cbb4:	ldr	r0, [r1]
   1cbb8:	cmp	r0, #0
   1cbbc:	bne	1cbd0 <__assert_fail@plt+0xa014>
   1cbc0:	movw	r0, #5152	; 0x1420
   1cbc4:	movt	r0, #4
   1cbc8:	add	r0, r0, #1296	; 0x510
   1cbcc:	str	r0, [r1]
   1cbd0:	bl	17c44 <__assert_fail@plt+0x5088>
   1cbd4:	mov	r1, #1065353216	; 0x3f800000
   1cbd8:	strh	r4, [r0, #18]
   1cbdc:	str	r1, [r0, #28]
   1cbe0:	mov	r0, #1
   1cbe4:	pop	{r4, sl, fp, pc}
   1cbe8:	push	{r4, sl, fp, lr}
   1cbec:	add	fp, sp, #8
   1cbf0:	movw	r0, #20100	; 0x4e84
   1cbf4:	movw	r1, #19692	; 0x4cec
   1cbf8:	mov	r4, #0
   1cbfc:	movt	r0, #5
   1cc00:	movt	r1, #5
   1cc04:	strb	r4, [r0, #16]
   1cc08:	ldr	r0, [r1]
   1cc0c:	cmp	r0, #0
   1cc10:	bne	1cc24 <__assert_fail@plt+0xa068>
   1cc14:	movw	r0, #5152	; 0x1420
   1cc18:	movt	r0, #4
   1cc1c:	add	r0, r0, #1296	; 0x510
   1cc20:	str	r0, [r1]
   1cc24:	bl	17c44 <__assert_fail@plt+0x5088>
   1cc28:	mov	r1, #1065353216	; 0x3f800000
   1cc2c:	strh	r4, [r0, #18]
   1cc30:	str	r1, [r0, #28]
   1cc34:	mov	r0, #1
   1cc38:	pop	{r4, sl, fp, pc}
   1cc3c:	movw	r0, #20100	; 0x4e84
   1cc40:	mov	r1, #1
   1cc44:	movt	r0, #5
   1cc48:	strb	r1, [r0, #16]
   1cc4c:	movw	r1, #19692	; 0x4cec
   1cc50:	movt	r1, #5
   1cc54:	ldr	r0, [r1]
   1cc58:	cmp	r0, #0
   1cc5c:	bne	1cc70 <__assert_fail@plt+0xa0b4>
   1cc60:	movw	r0, #5152	; 0x1420
   1cc64:	movt	r0, #4
   1cc68:	add	r0, r0, #1296	; 0x510
   1cc6c:	str	r0, [r1]
   1cc70:	push	{fp, lr}
   1cc74:	mov	fp, sp
   1cc78:	bl	17c44 <__assert_fail@plt+0x5088>
   1cc7c:	mov	r1, #0
   1cc80:	strh	r1, [r0, #18]
   1cc84:	mov	r1, #1065353216	; 0x3f800000
   1cc88:	str	r1, [r0, #28]
   1cc8c:	mov	r0, #1
   1cc90:	pop	{fp, pc}
   1cc94:	push	{fp, lr}
   1cc98:	mov	fp, sp
   1cc9c:	bl	1761c <__assert_fail@plt+0x4a60>
   1cca0:	movw	r1, #18736	; 0x4930
   1cca4:	mov	r2, #3
   1cca8:	mov	r3, #2
   1ccac:	movt	r1, #1
   1ccb0:	str	r1, [r0]
   1ccb4:	mov	r1, #0
   1ccb8:	strd	r2, [r0, #8]
   1ccbc:	strh	r1, [r0, #18]
   1ccc0:	mov	r0, #1
   1ccc4:	pop	{fp, pc}
   1ccc8:	mov	r3, r2
   1cccc:	mov	r2, r1
   1ccd0:	mov	r1, r0
   1ccd4:	movw	r0, #57812	; 0xe1d4
   1ccd8:	movt	r0, #3
   1ccdc:	b	1dbd8 <__assert_fail@plt+0xb01c>
   1cce0:	mov	r3, r2
   1cce4:	mov	r2, r1
   1cce8:	mov	r1, r0
   1ccec:	movw	r0, #55428	; 0xd884
   1ccf0:	movt	r0, #3
   1ccf4:	b	1dbd8 <__assert_fail@plt+0xb01c>
   1ccf8:	push	{fp, lr}
   1ccfc:	mov	fp, sp
   1cd00:	sub	sp, sp, #8
   1cd04:	movw	r3, #18812	; 0x497c
   1cd08:	movt	r3, #1
   1cd0c:	str	r3, [sp]
   1cd10:	movw	r3, #1855	; 0x73f
   1cd14:	movt	r3, #4
   1cd18:	bl	1e6f4 <__assert_fail@plt+0xbb38>
   1cd1c:	mov	sp, fp
   1cd20:	pop	{fp, pc}
   1cd24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd28:	add	fp, sp, #28
   1cd2c:	sub	sp, sp, #4
   1cd30:	vpush	{d8}
   1cd34:	sub	sp, sp, #8
   1cd38:	mov	r6, #0
   1cd3c:	cmp	r1, #0
   1cd40:	beq	1ce74 <__assert_fail@plt+0xa2b8>
   1cd44:	mov	r8, r0
   1cd48:	ldr	r0, [r2]
   1cd4c:	ldr	r4, [r1, r0, lsl #2]
   1cd50:	cmp	r4, #0
   1cd54:	beq	1ce74 <__assert_fail@plt+0xa2b8>
   1cd58:	add	r0, r0, #1
   1cd5c:	str	r0, [r2]
   1cd60:	ldrb	r0, [r4]
   1cd64:	cmp	r0, #45	; 0x2d
   1cd68:	beq	1cd84 <__assert_fail@plt+0xa1c8>
   1cd6c:	cmp	r0, #47	; 0x2f
   1cd70:	bne	1cd94 <__assert_fail@plt+0xa1d8>
   1cd74:	vldr	s16, [pc, #340]	; 1ced0 <__assert_fail@plt+0xa314>
   1cd78:	mov	r0, #1
   1cd7c:	mov	sl, #1
   1cd80:	b	1cda0 <__assert_fail@plt+0xa1e4>
   1cd84:	vldr	s16, [pc, #320]	; 1cecc <__assert_fail@plt+0xa310>
   1cd88:	mov	sl, #0
   1cd8c:	mov	r0, #1
   1cd90:	b	1cda0 <__assert_fail@plt+0xa1e4>
   1cd94:	vldr	s16, [pc, #312]	; 1ced4 <__assert_fail@plt+0xa318>
   1cd98:	mov	sl, #2
   1cd9c:	mov	r0, #0
   1cda0:	add	r0, r4, r0
   1cda4:	bl	246e0 <__assert_fail@plt+0x11b24>
   1cda8:	cmp	r0, #0
   1cdac:	beq	1ce88 <__assert_fail@plt+0xa2cc>
   1cdb0:	mov	r7, r0
   1cdb4:	ldrb	r0, [r4]
   1cdb8:	cmp	r0, #43	; 0x2b
   1cdbc:	bne	1cdd0 <__assert_fail@plt+0xa214>
   1cdc0:	ldrb	r0, [r4, #1]
   1cdc4:	and	r0, r0, #248	; 0xf8
   1cdc8:	cmp	r0, #48	; 0x30
   1cdcc:	beq	1ce88 <__assert_fail@plt+0xa2cc>
   1cdd0:	mov	r5, #0
   1cdd4:	mov	r0, #0
   1cdd8:	mov	r1, #0
   1cddc:	mov	r2, #0
   1cde0:	mov	r3, r7
   1cde4:	str	r5, [sp]
   1cde8:	bl	24a80 <__assert_fail@plt+0x11ec4>
   1cdec:	mov	r9, r0
   1cdf0:	mov	r0, #0
   1cdf4:	mov	r1, #1
   1cdf8:	mov	r2, #0
   1cdfc:	mov	r3, r7
   1ce00:	str	r5, [sp]
   1ce04:	mov	r6, #1
   1ce08:	bl	24a80 <__assert_fail@plt+0x11ec4>
   1ce0c:	mov	r5, r0
   1ce10:	mov	r0, r7
   1ce14:	bl	2c048 <__assert_fail@plt+0x1948c>
   1ce18:	orrs	r0, r5, r9
   1ce1c:	ldrbeq	r0, [r4]
   1ce20:	cmpeq	r0, #47	; 0x2f
   1ce24:	bne	1ce58 <__assert_fail@plt+0xa29c>
   1ce28:	movw	r1, #4222	; 0x107e
   1ce2c:	mov	r0, #0
   1ce30:	mov	r2, #5
   1ce34:	mov	sl, #0
   1ce38:	movt	r1, #4
   1ce3c:	bl	1264c <dcgettext@plt>
   1ce40:	mov	r2, r0
   1ce44:	mov	r0, #0
   1ce48:	mov	r1, #0
   1ce4c:	mov	r3, r4
   1ce50:	bl	12790 <error@plt>
   1ce54:	vldr	s16, [pc, #124]	; 1ced8 <__assert_fail@plt+0xa31c>
   1ce58:	mov	r0, r8
   1ce5c:	mov	r1, r4
   1ce60:	bl	17be8 <__assert_fail@plt+0x502c>
   1ce64:	vstr	s16, [r0, #28]
   1ce68:	str	sl, [r0, #40]	; 0x28
   1ce6c:	str	r9, [r0, #44]	; 0x2c
   1ce70:	str	r5, [r0, #48]	; 0x30
   1ce74:	mov	r0, r6
   1ce78:	sub	sp, fp, #40	; 0x28
   1ce7c:	vpop	{d8}
   1ce80:	add	sp, sp, #4
   1ce84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce88:	movw	r1, #4206	; 0x106e
   1ce8c:	mov	r0, #0
   1ce90:	mov	r2, #5
   1ce94:	movt	r1, #4
   1ce98:	bl	1264c <dcgettext@plt>
   1ce9c:	mov	r5, r0
   1cea0:	movw	r0, #20100	; 0x4e84
   1cea4:	mov	r2, r4
   1cea8:	movt	r0, #5
   1ceac:	ldr	r1, [r0, #72]	; 0x48
   1ceb0:	mov	r0, #0
   1ceb4:	bl	29834 <__assert_fail@plt+0x16c78>
   1ceb8:	mov	r3, r0
   1cebc:	mov	r0, #1
   1cec0:	mov	r1, #0
   1cec4:	mov	r2, r5
   1cec8:	bl	12790 <error@plt>
   1cecc:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1ced0:			; <UNDEFINED> instruction: 0x3e99999a
   1ced4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ced8:	svccc	0x007fa440
   1cedc:	push	{r4, sl, fp, lr}
   1cee0:	add	fp, sp, #8
   1cee4:	mov	r1, #0
   1cee8:	bl	17be8 <__assert_fail@plt+0x502c>
   1ceec:	mov	r4, r0
   1cef0:	add	r1, r0, #40	; 0x28
   1cef4:	movw	r0, #3448	; 0xd78
   1cef8:	movt	r0, #4
   1cefc:	bl	1e23c <__assert_fail@plt+0xb680>
   1cf00:	mov	r0, #1065353216	; 0x3f800000
   1cf04:	str	r0, [r4, #28]
   1cf08:	movw	r0, #257	; 0x101
   1cf0c:	str	r0, [r4, #16]
   1cf10:	mov	r0, #1
   1cf14:	pop	{r4, sl, fp, pc}
   1cf18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cf1c:	add	fp, sp, #24
   1cf20:	sub	sp, sp, #24
   1cf24:	mov	r5, r0
   1cf28:	mov	r0, #0
   1cf2c:	cmp	r1, #0
   1cf30:	beq	1cf88 <__assert_fail@plt+0xa3cc>
   1cf34:	ldr	r7, [r2]
   1cf38:	mov	r4, r2
   1cf3c:	ldr	r6, [r1, r7, lsl #2]
   1cf40:	cmp	r6, #0
   1cf44:	beq	1cf88 <__assert_fail@plt+0xa3cc>
   1cf48:	add	r0, r7, #1
   1cf4c:	add	r8, sp, #4
   1cf50:	str	r0, [r4]
   1cf54:	movw	r0, #3448	; 0xd78
   1cf58:	mov	r1, r8
   1cf5c:	movt	r0, #4
   1cf60:	bl	1e23c <__assert_fail@plt+0xb680>
   1cf64:	mov	r0, r8
   1cf68:	mov	r1, r5
   1cf6c:	mov	r2, r6
   1cf70:	bl	19724 <__assert_fail@plt+0x6b68>
   1cf74:	mov	r1, r0
   1cf78:	mov	r0, #1
   1cf7c:	cmp	r1, #0
   1cf80:	moveq	r0, #0
   1cf84:	streq	r7, [r4]
   1cf88:	sub	sp, fp, #24
   1cf8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cf90:	push	{fp, lr}
   1cf94:	mov	fp, sp
   1cf98:	bl	17c44 <__assert_fail@plt+0x5088>
   1cf9c:	movw	r1, #20100	; 0x4e84
   1cfa0:	movt	r1, #5
   1cfa4:	ldrb	r1, [r1]
   1cfa8:	cmp	r1, #0
   1cfac:	moveq	r1, #0
   1cfb0:	strheq	r1, [r0, #18]
   1cfb4:	mov	r1, #1
   1cfb8:	strh	r1, [r0, #16]
   1cfbc:	mov	r0, #1
   1cfc0:	pop	{fp, pc}
   1cfc4:	push	{fp, lr}
   1cfc8:	mov	fp, sp
   1cfcc:	bl	17c44 <__assert_fail@plt+0x5088>
   1cfd0:	mov	r1, #1
   1cfd4:	str	r1, [r0, #16]
   1cfd8:	mov	r1, #1065353216	; 0x3f800000
   1cfdc:	str	r1, [r0, #28]
   1cfe0:	mov	r0, #1
   1cfe4:	pop	{fp, pc}
   1cfe8:	mov	ip, r2
   1cfec:	mov	r2, r0
   1cff0:	movw	r0, #20100	; 0x4e84
   1cff4:	movt	r0, #5
   1cff8:	ldr	r3, [r0, #60]	; 0x3c
   1cffc:	mov	r0, r1
   1d000:	mov	r1, ip
   1d004:	b	1e82c <__assert_fail@plt+0xbc70>
   1d008:	mov	r0, #0
   1d00c:	cmp	r1, #0
   1d010:	beq	1d088 <__assert_fail@plt+0xa4cc>
   1d014:	ldr	r3, [r2]
   1d018:	ldr	r1, [r1, r3, lsl #2]
   1d01c:	cmp	r1, #0
   1d020:	bxeq	lr
   1d024:	push	{fp, lr}
   1d028:	mov	fp, sp
   1d02c:	add	r0, r3, #1
   1d030:	str	r0, [r2]
   1d034:	mov	r0, r1
   1d038:	bl	20c14 <__assert_fail@plt+0xe058>
   1d03c:	movw	r1, #20100	; 0x4e84
   1d040:	movt	r1, #5
   1d044:	str	r0, [r1, #60]	; 0x3c
   1d048:	movw	r1, #19692	; 0x4cec
   1d04c:	movt	r1, #5
   1d050:	ldr	r0, [r1]
   1d054:	cmp	r0, #0
   1d058:	bne	1d06c <__assert_fail@plt+0xa4b0>
   1d05c:	movw	r0, #5152	; 0x1420
   1d060:	movt	r0, #4
   1d064:	add	r0, r0, #1296	; 0x510
   1d068:	str	r0, [r1]
   1d06c:	bl	17c44 <__assert_fail@plt+0x5088>
   1d070:	mov	r1, #0
   1d074:	strh	r1, [r0, #18]
   1d078:	mov	r1, #1065353216	; 0x3f800000
   1d07c:	str	r1, [r0, #28]
   1d080:	mov	r0, #1
   1d084:	pop	{fp, lr}
   1d088:	bx	lr
   1d08c:	push	{r4, r5, r6, r7, fp, lr}
   1d090:	add	fp, sp, #16
   1d094:	sub	sp, sp, #216	; 0xd8
   1d098:	add	r7, sp, #112	; 0x70
   1d09c:	mov	r4, r0
   1d0a0:	mov	r5, r2
   1d0a4:	mov	r6, r1
   1d0a8:	mov	r0, r7
   1d0ac:	bl	17ed0 <__assert_fail@plt+0x5314>
   1d0b0:	add	r3, sp, #4
   1d0b4:	mov	r0, r6
   1d0b8:	mov	r1, r5
   1d0bc:	mov	r2, r7
   1d0c0:	bl	1db68 <__assert_fail@plt+0xafac>
   1d0c4:	mov	r1, r0
   1d0c8:	mov	r0, #0
   1d0cc:	cmp	r1, #0
   1d0d0:	beq	1d230 <__assert_fail@plt+0xa674>
   1d0d4:	add	r0, sp, #8
   1d0d8:	bl	17ed0 <__assert_fail@plt+0x5314>
   1d0dc:	movw	r7, #20100	; 0x4e84
   1d0e0:	mov	r1, #0
   1d0e4:	movt	r7, #5
   1d0e8:	ldr	r0, [r7, #48]	; 0x30
   1d0ec:	cmp	r0, #0
   1d0f0:	bne	1d124 <__assert_fail@plt+0xa568>
   1d0f4:	ldrb	r0, [r7, #56]	; 0x38
   1d0f8:	mov	r1, #32768	; 0x8000
   1d0fc:	cmp	r0, #0
   1d100:	bne	1d124 <__assert_fail@plt+0xa568>
   1d104:	ldr	r0, [sp, #128]	; 0x80
   1d108:	mov	r1, #0
   1d10c:	and	r0, r0, #61440	; 0xf000
   1d110:	cmp	r0, #40960	; 0xa000
   1d114:	bne	1d124 <__assert_fail@plt+0xa568>
   1d118:	ldr	r5, [sp, #4]
   1d11c:	mvn	r6, #1
   1d120:	b	1d1ec <__assert_fail@plt+0xa630>
   1d124:	ldr	r5, [sp, #4]
   1d128:	mov	r0, r5
   1d12c:	bl	1fc38 <__assert_fail@plt+0xd07c>
   1d130:	mov	r6, r0
   1d134:	cmp	r0, #0
   1d138:	blt	1d1ec <__assert_fail@plt+0xa630>
   1d13c:	add	r1, sp, #8
   1d140:	mov	r0, r6
   1d144:	bl	3d714 <__assert_fail@plt+0x2ab58>
   1d148:	cmp	r0, #0
   1d14c:	bne	1d238 <__assert_fail@plt+0xa67c>
   1d150:	ldr	r2, [r7, #52]	; 0x34
   1d154:	add	r1, sp, #112	; 0x70
   1d158:	mov	r0, r5
   1d15c:	blx	r2
   1d160:	cmp	r0, #0
   1d164:	bne	1d238 <__assert_fail@plt+0xa67c>
   1d168:	ldr	r0, [r7, #48]	; 0x30
   1d16c:	cmp	r0, #0
   1d170:	ldrbeq	r0, [r7, #56]	; 0x38
   1d174:	cmpeq	r0, #0
   1d178:	beq	1d190 <__assert_fail@plt+0xa5d4>
   1d17c:	add	r0, sp, #112	; 0x70
   1d180:	add	r1, sp, #8
   1d184:	mov	r2, #104	; 0x68
   1d188:	bl	125c8 <memcpy@plt>
   1d18c:	b	1d1ec <__assert_fail@plt+0xa630>
   1d190:	ldr	r0, [sp, #128]	; 0x80
   1d194:	and	r0, r0, #61440	; 0xf000
   1d198:	cmp	r0, #40960	; 0xa000
   1d19c:	beq	1d1e0 <__assert_fail@plt+0xa624>
   1d1a0:	ldr	r0, [sp, #8]
   1d1a4:	ldr	r2, [sp, #112]	; 0x70
   1d1a8:	ldr	r1, [sp, #12]
   1d1ac:	ldr	r3, [sp, #116]	; 0x74
   1d1b0:	eor	r1, r3, r1
   1d1b4:	eor	r0, r2, r0
   1d1b8:	orrs	r0, r0, r1
   1d1bc:	bne	1d1e0 <__assert_fail@plt+0xa624>
   1d1c0:	ldr	r0, [sp, #104]	; 0x68
   1d1c4:	ldr	r2, [sp, #208]	; 0xd0
   1d1c8:	ldr	r1, [sp, #108]	; 0x6c
   1d1cc:	ldr	r3, [sp, #212]	; 0xd4
   1d1d0:	eor	r1, r3, r1
   1d1d4:	eor	r0, r2, r0
   1d1d8:	orrs	r0, r0, r1
   1d1dc:	beq	1d1ec <__assert_fail@plt+0xa630>
   1d1e0:	mov	r0, r6
   1d1e4:	bl	12b74 <close@plt>
   1d1e8:	mvn	r6, #0
   1d1ec:	mov	r0, r4
   1d1f0:	mov	r1, r5
   1d1f4:	bl	17be8 <__assert_fail@plt+0x502c>
   1d1f8:	ldr	r2, [sp, #208]	; 0xd0
   1d1fc:	ldr	r3, [sp, #212]	; 0xd4
   1d200:	ldr	r7, [sp, #112]	; 0x70
   1d204:	ldr	r5, [sp, #116]	; 0x74
   1d208:	mov	r1, r0
   1d20c:	movw	r4, #55050	; 0xd70a
   1d210:	mov	r0, #1
   1d214:	movt	r4, #15395	; 0x3c23
   1d218:	add	ip, r1, #40	; 0x28
   1d21c:	strh	r0, [r1, #18]
   1d220:	str	r4, [r1, #28]
   1d224:	stm	ip, {r2, r3, r7}
   1d228:	str	r5, [r1, #52]	; 0x34
   1d22c:	str	r6, [r1, #56]	; 0x38
   1d230:	sub	sp, fp, #16
   1d234:	pop	{r4, r5, r6, r7, fp, pc}
   1d238:	bl	128d4 <__errno_location@plt>
   1d23c:	ldr	r0, [r0]
   1d240:	mov	r1, r5
   1d244:	bl	190a8 <__assert_fail@plt+0x64ec>
   1d248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d24c:	add	fp, sp, #28
   1d250:	sub	sp, sp, #28
   1d254:	mov	r8, r0
   1d258:	mov	r0, #0
   1d25c:	cmp	r1, #0
   1d260:	beq	1d3e8 <__assert_fail@plt+0xa82c>
   1d264:	mov	r7, r1
   1d268:	ldr	r1, [r2]
   1d26c:	mov	r4, r2
   1d270:	ldr	r5, [r7, r1, lsl #2]
   1d274:	cmp	r5, #0
   1d278:	beq	1d3e8 <__assert_fail@plt+0xa82c>
   1d27c:	mov	r0, r5
   1d280:	bl	1288c <strlen@plt>
   1d284:	cmp	r0, #0
   1d288:	beq	1d3f0 <__assert_fail@plt+0xa834>
   1d28c:	sub	r9, r0, #1
   1d290:	mov	r6, #512	; 0x200
   1d294:	ldrb	r0, [r5, r9]
   1d298:	cmp	r0, #70	; 0x46
   1d29c:	bgt	1d2b4 <__assert_fail@plt+0xa6f8>
   1d2a0:	sub	r0, r0, #48	; 0x30
   1d2a4:	mov	sl, #0
   1d2a8:	cmp	r0, #10
   1d2ac:	bcc	1d348 <__assert_fail@plt+0xa78c>
   1d2b0:	b	1d450 <__assert_fail@plt+0xa894>
   1d2b4:	cmp	r0, #98	; 0x62
   1d2b8:	bgt	1d2dc <__assert_fail@plt+0xa720>
   1d2bc:	cmp	r0, #71	; 0x47
   1d2c0:	beq	1d2fc <__assert_fail@plt+0xa740>
   1d2c4:	cmp	r0, #77	; 0x4d
   1d2c8:	bne	1d31c <__assert_fail@plt+0xa760>
   1d2cc:	mov	r0, #0
   1d2d0:	mov	r6, #1048576	; 0x100000
   1d2d4:	mov	sl, #77	; 0x4d
   1d2d8:	b	1d344 <__assert_fail@plt+0xa788>
   1d2dc:	cmp	r0, #99	; 0x63
   1d2e0:	beq	1d30c <__assert_fail@plt+0xa750>
   1d2e4:	cmp	r0, #107	; 0x6b
   1d2e8:	bne	1d330 <__assert_fail@plt+0xa774>
   1d2ec:	mov	r0, #0
   1d2f0:	mov	r6, #1024	; 0x400
   1d2f4:	mov	sl, #107	; 0x6b
   1d2f8:	b	1d344 <__assert_fail@plt+0xa788>
   1d2fc:	mov	r0, #0
   1d300:	mov	r6, #1073741824	; 0x40000000
   1d304:	mov	sl, #71	; 0x47
   1d308:	b	1d344 <__assert_fail@plt+0xa788>
   1d30c:	mov	r0, #0
   1d310:	mov	r6, #1
   1d314:	mov	sl, #99	; 0x63
   1d318:	b	1d344 <__assert_fail@plt+0xa788>
   1d31c:	cmp	r0, #98	; 0x62
   1d320:	bne	1d450 <__assert_fail@plt+0xa894>
   1d324:	mov	r0, #0
   1d328:	mov	sl, #98	; 0x62
   1d32c:	b	1d344 <__assert_fail@plt+0xa788>
   1d330:	cmp	r0, #119	; 0x77
   1d334:	bne	1d450 <__assert_fail@plt+0xa894>
   1d338:	mov	r0, #0
   1d33c:	mov	r6, #2
   1d340:	mov	sl, #119	; 0x77
   1d344:	strb	r0, [r5, r9]
   1d348:	add	r1, sp, #16
   1d34c:	add	r2, sp, #12
   1d350:	mov	r0, r5
   1d354:	bl	1e4b4 <__assert_fail@plt+0xb8f8>
   1d358:	cmp	r0, #0
   1d35c:	beq	1d414 <__assert_fail@plt+0xa858>
   1d360:	mov	r0, r8
   1d364:	mov	r1, r5
   1d368:	bl	17be8 <__assert_fail@plt+0x502c>
   1d36c:	ldr	r3, [sp, #12]
   1d370:	ldr	r2, [sp, #16]
   1d374:	ldr	r1, [sp, #20]
   1d378:	mov	r7, #1
   1d37c:	strh	r7, [r0, #18]
   1d380:	cmp	r3, #1
   1d384:	str	r3, [r0, #40]	; 0x28
   1d388:	str	r6, [r0, #44]	; 0x2c
   1d38c:	str	r2, [r0, #48]	; 0x30
   1d390:	str	r1, [r0, #52]	; 0x34
   1d394:	beq	1d3b0 <__assert_fail@plt+0xa7f4>
   1d398:	cmp	r3, #0
   1d39c:	bne	1d3d0 <__assert_fail@plt+0xa814>
   1d3a0:	umull	r2, r3, r2, r6
   1d3a4:	mla	r1, r1, r6, r3
   1d3a8:	add	r3, pc, #220	; 0xdc
   1d3ac:	b	1d3bc <__assert_fail@plt+0xa800>
   1d3b0:	umull	r2, r3, r2, r6
   1d3b4:	mla	r1, r1, r6, r3
   1d3b8:	add	r3, pc, #196	; 0xc4
   1d3bc:	rsbs	r2, r2, #20480	; 0x5000
   1d3c0:	rscs	r1, r1, #0
   1d3c4:	addcc	r3, r3, #4
   1d3c8:	vldr	s0, [r3]
   1d3cc:	b	1d3d4 <__assert_fail@plt+0xa818>
   1d3d0:	vldr	s0, [pc, #168]	; 1d480 <__assert_fail@plt+0xa8c4>
   1d3d4:	vstr	s0, [r0, #28]
   1d3d8:	ldr	r0, [r4]
   1d3dc:	add	r0, r0, #1
   1d3e0:	str	r0, [r4]
   1d3e4:	mov	r0, #1
   1d3e8:	sub	sp, fp, #28
   1d3ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3f0:	movw	r1, #4448	; 0x1160
   1d3f4:	mov	r0, #0
   1d3f8:	mov	r2, #5
   1d3fc:	movt	r1, #4
   1d400:	bl	1264c <dcgettext@plt>
   1d404:	mov	r2, r0
   1d408:	mov	r0, #1
   1d40c:	mov	r1, #0
   1d410:	bl	12790 <error@plt>
   1d414:	movw	r1, #4503	; 0x1197
   1d418:	mov	r0, #0
   1d41c:	mov	r2, #5
   1d420:	strb	r0, [sp, #11]
   1d424:	movt	r1, #4
   1d428:	mov	r0, #0
   1d42c:	strb	sl, [sp, #10]
   1d430:	bl	1264c <dcgettext@plt>
   1d434:	mov	r2, r0
   1d438:	add	r0, sp, #10
   1d43c:	mov	r1, #0
   1d440:	mov	r3, r5
   1d444:	str	r0, [sp]
   1d448:	mov	r0, #1
   1d44c:	bl	12790 <error@plt>
   1d450:	movw	r1, #4479	; 0x117f
   1d454:	mov	r0, #0
   1d458:	mov	r2, #5
   1d45c:	movt	r1, #4
   1d460:	bl	1264c <dcgettext@plt>
   1d464:	mov	r2, r0
   1d468:	ldr	r0, [r4]
   1d46c:	mov	r1, #0
   1d470:	ldr	r0, [r7, r0, lsl #2]
   1d474:	ldrb	r3, [r0, r9]
   1d478:	mov	r0, #1
   1d47c:	bl	12790 <error@plt>
   1d480:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d484:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d488:	svccc	0x00666666
   1d48c:	svccc	0x00666666
   1d490:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d494:	movw	r3, #19800	; 0x4d58
   1d498:	mov	ip, r2
   1d49c:	mov	r2, r0
   1d4a0:	mov	r0, r1
   1d4a4:	movt	r3, #1
   1d4a8:	mov	r1, ip
   1d4ac:	b	1ea38 <__assert_fail@plt+0xbe7c>
   1d4b0:	push	{r4, sl, fp, lr}
   1d4b4:	add	fp, sp, #8
   1d4b8:	mov	r4, r2
   1d4bc:	mov	r2, r0
   1d4c0:	mov	r0, r1
   1d4c4:	mov	r1, r4
   1d4c8:	bl	1e374 <__assert_fail@plt+0xb7b8>
   1d4cc:	cmp	r0, #0
   1d4d0:	beq	1d4f8 <__assert_fail@plt+0xa93c>
   1d4d4:	add	r1, pc, #48	; 0x30
   1d4d8:	ldrd	r2, [r0, #48]	; 0x30
   1d4dc:	subs	r2, r2, #100	; 0x64
   1d4e0:	sbcs	r2, r3, #0
   1d4e4:	addcc	r1, r1, #4
   1d4e8:	vldr	s0, [r1]
   1d4ec:	vstr	s0, [r0, #28]
   1d4f0:	mov	r0, #1
   1d4f4:	pop	{r4, sl, fp, pc}
   1d4f8:	ldr	r0, [r4]
   1d4fc:	sub	r0, r0, #1
   1d500:	str	r0, [r4]
   1d504:	mov	r0, #0
   1d508:	pop	{r4, sl, fp, pc}
   1d50c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d510:	svccc	0x007d70a4
   1d514:	nop	{0}
   1d518:	push	{r4, r5, r6, sl, fp, lr}
   1d51c:	add	fp, sp, #16
   1d520:	sub	sp, sp, #24
   1d524:	mov	r5, r0
   1d528:	mov	r0, #0
   1d52c:	cmp	r1, #0
   1d530:	beq	1d5d0 <__assert_fail@plt+0xaa14>
   1d534:	ldr	r3, [r2]
   1d538:	ldr	r4, [r1, r3, lsl #2]
   1d53c:	cmp	r4, #0
   1d540:	beq	1d5d0 <__assert_fail@plt+0xaa14>
   1d544:	add	r0, r3, #1
   1d548:	vldr	d0, [pc, #176]	; 1d600 <__assert_fail@plt+0xaa44>
   1d54c:	add	r6, sp, #8
   1d550:	mov	r3, #0
   1d554:	str	r0, [r2]
   1d558:	movw	r0, #2243	; 0x8c3
   1d55c:	mov	r1, r6
   1d560:	mov	r2, #0
   1d564:	movt	r0, #4
   1d568:	str	r0, [sp]
   1d56c:	mov	r0, r4
   1d570:	bl	1d9f8 <__assert_fail@plt+0xae3c>
   1d574:	cmp	r0, #0
   1d578:	beq	1d5d8 <__assert_fail@plt+0xaa1c>
   1d57c:	mov	r0, r5
   1d580:	mov	r1, r4
   1d584:	bl	17be8 <__assert_fail@plt+0x502c>
   1d588:	mov	r1, #8
   1d58c:	movw	r3, #10111	; 0x277f
   1d590:	vldr	s0, [pc, #120]	; 1d610 <__assert_fail@plt+0xaa54>
   1d594:	vld1.64	{d16-d17}, [r6], r1
   1d598:	add	r1, r0, #40	; 0x28
   1d59c:	movt	r3, #133	; 0x85
   1d5a0:	vst1.64	{d16-d17}, [r1]
   1d5a4:	ldr	r1, [r6]
   1d5a8:	add	r2, pc, #88	; 0x58
   1d5ac:	cmp	r1, r3
   1d5b0:	addgt	r2, r2, #4
   1d5b4:	vldr	s2, [r2]
   1d5b8:	movw	r2, #20864	; 0x5180
   1d5bc:	movt	r2, #1
   1d5c0:	cmp	r1, r2
   1d5c4:	vselge.f32	s0, s2, s0
   1d5c8:	vstr	s0, [r0, #28]
   1d5cc:	mov	r0, #1
   1d5d0:	sub	sp, fp, #16
   1d5d4:	pop	{r4, r5, r6, sl, fp, pc}
   1d5d8:	movw	r1, #4910	; 0x132e
   1d5dc:	mov	r0, #0
   1d5e0:	mov	r2, #5
   1d5e4:	movt	r1, #4
   1d5e8:	bl	1264c <dcgettext@plt>
   1d5ec:	mov	r2, r0
   1d5f0:	mov	r0, #1
   1d5f4:	mov	r1, #0
   1d5f8:	mov	r3, r4
   1d5fc:	bl	12790 <error@plt>
   1d600:	andeq	r0, r0, r0
   1d604:	rscsmi	r1, r5, r0, lsl #16
   1d608:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d60c:			; <UNDEFINED> instruction: 0x3e99999a
   1d610:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d614:	push	{r4, r5, r6, sl, fp, lr}
   1d618:	add	fp, sp, #16
   1d61c:	vpush	{d8}
   1d620:	mov	r5, r0
   1d624:	mov	r0, #0
   1d628:	cmp	r1, #0
   1d62c:	beq	1d6cc <__assert_fail@plt+0xab10>
   1d630:	ldr	r3, [r2]
   1d634:	ldr	r4, [r1, r3, lsl #2]
   1d638:	cmp	r4, #0
   1d63c:	beq	1d6cc <__assert_fail@plt+0xab10>
   1d640:	add	r0, r3, #1
   1d644:	str	r0, [r2]
   1d648:	mov	r0, r4
   1d64c:	bl	124a8 <getpwnam@plt>
   1d650:	mov	r6, r0
   1d654:	bl	12a00 <endpwent@plt>
   1d658:	cmp	r6, #0
   1d65c:	beq	1d668 <__assert_fail@plt+0xaaac>
   1d660:	ldr	r6, [r6, #8]
   1d664:	b	1d6a4 <__assert_fail@plt+0xaae8>
   1d668:	movw	r1, #3520	; 0xdc0
   1d66c:	mov	r0, r4
   1d670:	movt	r1, #4
   1d674:	bl	12bb0 <strspn@plt>
   1d678:	cmp	r0, #0
   1d67c:	beq	1d6d4 <__assert_fail@plt+0xab18>
   1d680:	ldrb	r0, [r4, r0]
   1d684:	cmp	r0, #0
   1d688:	bne	1d6d4 <__assert_fail@plt+0xab18>
   1d68c:	movw	r0, #20100	; 0x4e84
   1d690:	movt	r0, #5
   1d694:	ldr	r1, [r0, #72]	; 0x48
   1d698:	mov	r0, r4
   1d69c:	bl	20df8 <__assert_fail@plt+0xe23c>
   1d6a0:	mov	r6, r0
   1d6a4:	add	r0, pc, #156	; 0x9c
   1d6a8:	cmp	r6, #100	; 0x64
   1d6ac:	mov	r1, r4
   1d6b0:	addcc	r0, r0, #4
   1d6b4:	vldr	s16, [r0]
   1d6b8:	mov	r0, r5
   1d6bc:	bl	17be8 <__assert_fail@plt+0x502c>
   1d6c0:	str	r6, [r0, #40]	; 0x28
   1d6c4:	vstr	s16, [r0, #28]
   1d6c8:	mov	r0, #1
   1d6cc:	vpop	{d8}
   1d6d0:	pop	{r4, r5, r6, sl, fp, pc}
   1d6d4:	ldrb	r0, [r4]
   1d6d8:	cmp	r0, #0
   1d6dc:	bne	1d704 <__assert_fail@plt+0xab48>
   1d6e0:	movw	r1, #4974	; 0x136e
   1d6e4:	mov	r0, #0
   1d6e8:	mov	r2, #5
   1d6ec:	movt	r1, #4
   1d6f0:	bl	1264c <dcgettext@plt>
   1d6f4:	mov	r2, r0
   1d6f8:	mov	r0, #1
   1d6fc:	mov	r1, #0
   1d700:	bl	12790 <error@plt>
   1d704:	movw	r1, #4939	; 0x134b
   1d708:	mov	r0, #0
   1d70c:	mov	r2, #5
   1d710:	movt	r1, #4
   1d714:	bl	1264c <dcgettext@plt>
   1d718:	mov	r5, r0
   1d71c:	movw	r0, #20100	; 0x4e84
   1d720:	mov	r2, r4
   1d724:	movt	r0, #5
   1d728:	ldr	r1, [r0, #72]	; 0x48
   1d72c:	mov	r0, #0
   1d730:	bl	29834 <__assert_fail@plt+0x16c78>
   1d734:	mov	r3, r0
   1d738:	mov	r0, #1
   1d73c:	mov	r1, #0
   1d740:	mov	r2, r5
   1d744:	bl	12790 <error@plt>
   1d748:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d74c:	svccc	0x007d70a4
   1d750:	push	{fp, lr}
   1d754:	mov	fp, sp
   1d758:	sub	sp, sp, #8
   1d75c:	movw	r3, #18812	; 0x497c
   1d760:	movt	r3, #1
   1d764:	str	r3, [sp]
   1d768:	movw	r3, #4196	; 0x1064
   1d76c:	movt	r3, #4
   1d770:	bl	1e6f4 <__assert_fail@plt+0xbb38>
   1d774:	mov	sp, fp
   1d778:	pop	{fp, pc}
   1d77c:	movw	r3, #20208	; 0x4ef0
   1d780:	mov	ip, r2
   1d784:	mov	r2, r0
   1d788:	mov	r0, r1
   1d78c:	movt	r3, #1
   1d790:	mov	r1, ip
   1d794:	b	1ea38 <__assert_fail@plt+0xbe7c>
   1d798:	push	{fp, lr}
   1d79c:	mov	fp, sp
   1d7a0:	movw	r0, #2012	; 0x7dc
   1d7a4:	movt	r0, #4
   1d7a8:	bl	1b23c <__assert_fail@plt+0x8680>
   1d7ac:	bl	17c44 <__assert_fail@plt+0x5088>
   1d7b0:	mov	r1, #0
   1d7b4:	str	r1, [r0, #28]
   1d7b8:	str	r1, [r0, #16]
   1d7bc:	mov	r0, #1
   1d7c0:	pop	{fp, pc}
   1d7c4:	push	{fp, lr}
   1d7c8:	mov	fp, sp
   1d7cc:	bl	17c44 <__assert_fail@plt+0x5088>
   1d7d0:	mov	r1, #0
   1d7d4:	strh	r1, [r0, #18]
   1d7d8:	mov	r1, #1065353216	; 0x3f800000
   1d7dc:	str	r1, [r0, #28]
   1d7e0:	mov	r0, #1
   1d7e4:	pop	{fp, pc}
   1d7e8:	push	{fp, lr}
   1d7ec:	mov	fp, sp
   1d7f0:	mov	r0, #0
   1d7f4:	bl	17c4c <__assert_fail@plt+0x5090>
   1d7f8:	push	{fp, lr}
   1d7fc:	mov	fp, sp
   1d800:	sub	sp, sp, #8
   1d804:	movw	r0, #55156	; 0xd774
   1d808:	movt	r0, #3
   1d80c:	bl	1fe8c <__assert_fail@plt+0xd2d0>
   1d810:	movw	r1, #5016	; 0x1398
   1d814:	mov	r0, #0
   1d818:	mov	r2, #5
   1d81c:	mov	r5, #0
   1d820:	movt	r1, #4
   1d824:	bl	1264c <dcgettext@plt>
   1d828:	bl	124fc <printf@plt>
   1d82c:	movw	r0, #5035	; 0x13ab
   1d830:	movt	r0, #4
   1d834:	bl	124fc <printf@plt>
   1d838:	movw	r4, #20100	; 0x4e84
   1d83c:	movw	r2, #5067	; 0x13cb
   1d840:	movw	r1, #5059	; 0x13c3
   1d844:	movt	r4, #5
   1d848:	movt	r2, #4
   1d84c:	movt	r1, #4
   1d850:	ldrb	r0, [r4, #56]	; 0x38
   1d854:	cmp	r0, #0
   1d858:	movw	r0, #5043	; 0x13b3
   1d85c:	moveq	r1, r2
   1d860:	movt	r0, #4
   1d864:	bl	124fc <printf@plt>
   1d868:	movw	r0, #5076	; 0x13d4
   1d86c:	movt	r0, #4
   1d870:	bl	124fc <printf@plt>
   1d874:	bl	124b4 <is_selinux_enabled@plt>
   1d878:	cmp	r0, #1
   1d87c:	blt	1d88c <__assert_fail@plt+0xacd0>
   1d880:	movw	r0, #5095	; 0x13e7
   1d884:	movt	r0, #4
   1d888:	bl	124fc <printf@plt>
   1d88c:	add	r0, sp, #4
   1d890:	str	r5, [sp, #4]
   1d894:	bl	132f0 <__assert_fail@plt+0x734>
   1d898:	cmp	r0, #0
   1d89c:	beq	1d8d0 <__assert_fail@plt+0xad14>
   1d8a0:	movw	r0, #5104	; 0x13f0
   1d8a4:	movt	r0, #4
   1d8a8:	bl	124fc <printf@plt>
   1d8ac:	ldrb	r0, [sp, #5]
   1d8b0:	tst	r0, #2
   1d8b4:	beq	1d8c4 <__assert_fail@plt+0xad08>
   1d8b8:	movw	r0, #5109	; 0x13f5
   1d8bc:	movt	r0, #4
   1d8c0:	bl	124fc <printf@plt>
   1d8c4:	movw	r0, #57821	; 0xe1dd
   1d8c8:	movt	r0, #3
   1d8cc:	bl	124fc <printf@plt>
   1d8d0:	ldrh	r1, [r4, #68]	; 0x44
   1d8d4:	movw	r0, #5119	; 0x13ff
   1d8d8:	movt	r0, #4
   1d8dc:	bl	124fc <printf@plt>
   1d8e0:	mov	r0, #10
   1d8e4:	bl	1291c <putchar@plt>
   1d8e8:	mov	r0, #0
   1d8ec:	bl	1285c <exit@plt>
   1d8f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8f4:	add	fp, sp, #28
   1d8f8:	sub	sp, sp, #28
   1d8fc:	mov	r4, #0
   1d900:	cmp	r1, #0
   1d904:	beq	1d9d4 <__assert_fail@plt+0xae18>
   1d908:	ldr	r9, [r2]
   1d90c:	mov	r5, r2
   1d910:	ldr	r7, [r1, r9, lsl #2]
   1d914:	cmp	r7, #0
   1d918:	beq	1d9d4 <__assert_fail@plt+0xae18>
   1d91c:	movw	sl, #20100	; 0x4e84
   1d920:	mov	r8, r0
   1d924:	add	r0, r9, #1
   1d928:	movw	r1, #2045	; 0x7fd
   1d92c:	vldr	d0, [pc, #172]	; 1d9e0 <__assert_fail@plt+0xae24>
   1d930:	add	r6, sp, #8
   1d934:	str	r0, [r5]
   1d938:	movt	sl, #5
   1d93c:	str	r3, [sp, #8]
   1d940:	movt	r1, #4
   1d944:	ldr	r0, [sl, #28]
   1d948:	ldr	r3, [sl, #32]
   1d94c:	str	r1, [sp]
   1d950:	movw	r1, #20864	; 0x5180
   1d954:	movt	r1, #1
   1d958:	add	r2, r0, r1
   1d95c:	mov	r0, r7
   1d960:	mov	r1, r6
   1d964:	bl	1d9f8 <__assert_fail@plt+0xae3c>
   1d968:	cmp	r0, #0
   1d96c:	beq	1d9d0 <__assert_fail@plt+0xae14>
   1d970:	mov	r0, r8
   1d974:	mov	r1, r7
   1d978:	bl	17be8 <__assert_fail@plt+0x502c>
   1d97c:	mov	r1, #8
   1d980:	movw	r3, #10111	; 0x277f
   1d984:	vldr	s0, [pc, #100]	; 1d9f0 <__assert_fail@plt+0xae34>
   1d988:	mov	r4, #1
   1d98c:	vld1.64	{d16-d17}, [r6], r1
   1d990:	add	r1, r0, #40	; 0x28
   1d994:	movt	r3, #133	; 0x85
   1d998:	vst1.64	{d16-d17}, [r1]
   1d99c:	ldr	r1, [r6]
   1d9a0:	ldr	r2, [sl, #28]
   1d9a4:	sub	r1, r2, r1
   1d9a8:	add	r2, pc, #56	; 0x38
   1d9ac:	cmp	r1, r3
   1d9b0:	addgt	r2, r2, #4
   1d9b4:	vldr	s2, [r2]
   1d9b8:	movw	r2, #20864	; 0x5180
   1d9bc:	movt	r2, #1
   1d9c0:	cmp	r1, r2
   1d9c4:	vselge.f32	s0, s2, s0
   1d9c8:	vstr	s0, [r0, #28]
   1d9cc:	b	1d9d4 <__assert_fail@plt+0xae18>
   1d9d0:	str	r9, [r5]
   1d9d4:	mov	r0, r4
   1d9d8:	sub	sp, fp, #28
   1d9dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9e0:	andeq	r0, r0, r0
   1d9e4:	submi	r0, lr, r0
   1d9e8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d9ec:			; <UNDEFINED> instruction: 0x3e99999a
   1d9f0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d9f4:	nop	{0}
   1d9f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d9fc:	add	fp, sp, #24
   1da00:	vpush	{d8}
   1da04:	sub	sp, sp, #16
   1da08:	mov	r4, r1
   1da0c:	ldrb	r1, [r0]
   1da10:	vmov.f64	d8, d0
   1da14:	mov	r8, r3
   1da18:	mov	r7, r2
   1da1c:	mov	r5, r0
   1da20:	cmp	r1, #43	; 0x2b
   1da24:	beq	1da3c <__assert_fail@plt+0xae80>
   1da28:	cmp	r1, #45	; 0x2d
   1da2c:	mov	r0, #2
   1da30:	addeq	r5, r5, #1
   1da34:	moveq	r0, #0
   1da38:	b	1da44 <__assert_fail@plt+0xae88>
   1da3c:	add	r5, r5, #1
   1da40:	mov	r0, #1
   1da44:	movw	r3, #10572	; 0x294c
   1da48:	str	r0, [r4, #4]
   1da4c:	add	r2, sp, #8
   1da50:	mov	r0, r5
   1da54:	mov	r1, #0
   1da58:	mov	r6, #0
   1da5c:	movt	r3, #1
   1da60:	bl	2ae74 <__assert_fail@plt+0x182b8>
   1da64:	cmp	r0, #0
   1da68:	beq	1db18 <__assert_fail@plt+0xaf5c>
   1da6c:	vldr	d16, [sp, #8]
   1da70:	mov	r0, sp
   1da74:	vmul.f64	d0, d16, d8
   1da78:	bl	1282c <modf@plt>
   1da7c:	vldr	d17, [pc, #220]	; 1db60 <__assert_fail@plt+0xafa4>
   1da80:	vmul.f64	d16, d0, d17
   1da84:	vcmpe.f64	d16, d17
   1da88:	vmrs	APSR_nzcv, fpscr
   1da8c:	bpl	1db28 <__assert_fail@plt+0xaf6c>
   1da90:	vldr	d17, [sp]
   1da94:	vmov	s0, r7
   1da98:	mov	r2, #0
   1da9c:	mov	r1, #0
   1daa0:	vcvt.f64.s32	d18, s0
   1daa4:	vsub.f64	d18, d18, d17
   1daa8:	vcmpe.f64	d17, #0.0
   1daac:	vcvt.s32.f64	s0, d18
   1dab0:	vcvt.s32.f64	s2, d18
   1dab4:	vmov	r0, s2
   1dab8:	vstr	s0, [r4, #8]
   1dabc:	cmp	r7, r0
   1dac0:	movwlt	r2, #1
   1dac4:	vmrs	APSR_nzcv, fpscr
   1dac8:	movwmi	r1, #1
   1dacc:	cmp	r1, r2
   1dad0:	bne	1db48 <__assert_fail@plt+0xaf8c>
   1dad4:	vmov	s0, r8
   1dad8:	mov	r6, #1
   1dadc:	vcvt.f64.s32	d17, s0
   1dae0:	vsub.f64	d18, d17, d16
   1dae4:	vcmpe.f64	d16, d17
   1dae8:	vcvt.s32.f64	s2, d18
   1daec:	vcvt.s32.f64	s0, d18
   1daf0:	vmrs	APSR_nzcv, fpscr
   1daf4:	vstr	s2, [r4, #12]
   1daf8:	ble	1db18 <__assert_fail@plt+0xaf5c>
   1dafc:	movw	r2, #51712	; 0xca00
   1db00:	vmov	r1, s0
   1db04:	sub	r0, r0, #1
   1db08:	movt	r2, #15258	; 0x3b9a
   1db0c:	str	r0, [r4, #8]
   1db10:	add	r1, r1, r2
   1db14:	str	r1, [r4, #12]
   1db18:	mov	r0, r6
   1db1c:	sub	sp, fp, #32
   1db20:	vpop	{d8}
   1db24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1db28:	movw	r0, #2116	; 0x844
   1db2c:	movw	r1, #1319	; 0x527
   1db30:	movw	r3, #2142	; 0x85e
   1db34:	movw	r2, #3149	; 0xc4d
   1db38:	movt	r0, #4
   1db3c:	movt	r1, #4
   1db40:	movt	r3, #4
   1db44:	bl	12bbc <__assert_fail@plt>
   1db48:	ldr	r2, [fp, #8]
   1db4c:	mov	r0, #1
   1db50:	mov	r1, #0
   1db54:	mov	r3, r5
   1db58:	bl	12790 <error@plt>
   1db5c:	nop	{0}
   1db60:	andeq	r0, r0, r0
   1db64:	bicmi	ip, sp, r5, ror #26
   1db68:	push	{r4, r5, fp, lr}
   1db6c:	add	fp, sp, #8
   1db70:	cmp	r0, #0
   1db74:	beq	1dbcc <__assert_fail@plt+0xb010>
   1db78:	ldr	r4, [r1]
   1db7c:	ldr	r5, [r0, r4, lsl #2]
   1db80:	cmp	r5, #0
   1db84:	beq	1dbcc <__assert_fail@plt+0xb010>
   1db88:	add	r0, r4, #1
   1db8c:	str	r0, [r1]
   1db90:	movw	r0, #20100	; 0x4e84
   1db94:	str	r5, [r3]
   1db98:	mov	r1, r2
   1db9c:	movt	r0, #5
   1dba0:	ldr	r3, [r0, #52]	; 0x34
   1dba4:	mov	r0, r5
   1dba8:	blx	r3
   1dbac:	mov	r1, r0
   1dbb0:	mov	r0, #1
   1dbb4:	cmp	r1, #0
   1dbb8:	popeq	{r4, r5, fp, pc}
   1dbbc:	bl	128d4 <__errno_location@plt>
   1dbc0:	ldr	r0, [r0]
   1dbc4:	mov	r1, r5
   1dbc8:	bl	190a8 <__assert_fail@plt+0x64ec>
   1dbcc:	mov	r0, #0
   1dbd0:	str	r0, [r3]
   1dbd4:	pop	{r4, r5, fp, pc}
   1dbd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbdc:	add	fp, sp, #28
   1dbe0:	sub	sp, sp, #60	; 0x3c
   1dbe4:	mov	r6, r0
   1dbe8:	mov	r0, #0
   1dbec:	cmp	r2, #0
   1dbf0:	beq	1dea0 <__assert_fail@plt+0xb2e4>
   1dbf4:	mov	r7, r2
   1dbf8:	ldr	r2, [r3]
   1dbfc:	mov	sl, r3
   1dc00:	ldr	r2, [r7, r2, lsl #2]
   1dc04:	cmp	r2, #0
   1dc08:	beq	1dea0 <__assert_fail@plt+0xb2e4>
   1dc0c:	ldr	r4, [r1, #12]
   1dc10:	movw	r2, #2564	; 0xa04
   1dc14:	mov	r0, r1
   1dc18:	movt	r2, #4
   1dc1c:	mov	r1, r4
   1dc20:	bl	17bb0 <__assert_fail@plt+0x4ff4>
   1dc24:	mov	r3, r0
   1dc28:	movw	r0, #257	; 0x101
   1dc2c:	mov	r1, #0
   1dc30:	str	r0, [r3, #16]
   1dc34:	movw	r0, #18656	; 0x48e0
   1dc38:	str	r1, [r3, #144]	; 0x90
   1dc3c:	movt	r0, #1
   1dc40:	cmp	r4, r0
   1dc44:	movwne	r2, #18436	; 0x4804
   1dc48:	movne	r5, #1
   1dc4c:	movtne	r2, #1
   1dc50:	cmpne	r4, r2
   1dc54:	bne	1dc6c <__assert_fail@plt+0xb0b0>
   1dc58:	movw	r2, #20100	; 0x4e84
   1dc5c:	mov	r1, #1
   1dc60:	mov	r5, #0
   1dc64:	movt	r2, #5
   1dc68:	strb	r1, [r2, #80]	; 0x50
   1dc6c:	strb	r1, [r3, #140]	; 0x8c
   1dc70:	movw	r1, #16924	; 0x421c
   1dc74:	sub	r0, r4, r0
   1dc78:	str	r3, [sp, #32]
   1dc7c:	str	r4, [sp, #20]
   1dc80:	movt	r1, #1
   1dc84:	clz	r0, r0
   1dc88:	sub	r1, r4, r1
   1dc8c:	lsr	r0, r0, #5
   1dc90:	clz	r1, r1
   1dc94:	lsr	r1, r1, #5
   1dc98:	orr	r9, r1, r0
   1dc9c:	cmp	r9, #1
   1dca0:	bne	1dd68 <__assert_fail@plt+0xb1ac>
   1dca4:	movw	r1, #20100	; 0x4e84
   1dca8:	mov	r0, #0
   1dcac:	str	r5, [sp, #28]
   1dcb0:	str	r6, [sp, #24]
   1dcb4:	movt	r1, #5
   1dcb8:	str	r0, [r3, #144]	; 0x90
   1dcbc:	strb	r0, [r1, #14]
   1dcc0:	movw	r0, #3407	; 0xd4f
   1dcc4:	movt	r0, #4
   1dcc8:	bl	127cc <getenv@plt>
   1dccc:	cmp	r0, #0
   1dcd0:	beq	1dd5c <__assert_fail@plt+0xb1a0>
   1dcd4:	movw	r5, #58096	; 0xe2f0
   1dcd8:	add	r8, sp, #36	; 0x24
   1dcdc:	sub	r6, fp, #32
   1dce0:	mov	r2, #1
   1dce4:	mov	r4, r0
   1dce8:	movt	r5, #3
   1dcec:	mov	r3, r8
   1dcf0:	str	r6, [sp]
   1dcf4:	mov	r1, r5
   1dcf8:	bl	20f04 <__assert_fail@plt+0xe348>
   1dcfc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1dd00:	cmp	r1, #1
   1dd04:	beq	1dd20 <__assert_fail@plt+0xb164>
   1dd08:	cmp	r1, #0
   1dd0c:	beq	1e050 <__assert_fail@plt+0xb494>
   1dd10:	ldr	r2, [sp, #36]	; 0x24
   1dd14:	mov	r0, r4
   1dd18:	ldrb	r2, [r0, r2]!
   1dd1c:	b	1dd34 <__assert_fail@plt+0xb178>
   1dd20:	ldr	r2, [sp, #36]	; 0x24
   1dd24:	mov	r0, r4
   1dd28:	ldrb	r2, [r0, r2]!
   1dd2c:	cmp	r2, #46	; 0x2e
   1dd30:	beq	1e050 <__assert_fail@plt+0xb494>
   1dd34:	cmp	r2, #47	; 0x2f
   1dd38:	bne	1e078 <__assert_fail@plt+0xb4bc>
   1dd3c:	mov	r0, r4
   1dd40:	mov	r1, r5
   1dd44:	mov	r2, #0
   1dd48:	mov	r3, r8
   1dd4c:	str	r6, [sp]
   1dd50:	bl	20f04 <__assert_fail@plt+0xe348>
   1dd54:	cmp	r0, #0
   1dd58:	bne	1dcfc <__assert_fail@plt+0xb140>
   1dd5c:	ldr	r3, [sp, #32]
   1dd60:	ldr	r5, [sp, #28]
   1dd64:	b	1dd80 <__assert_fail@plt+0xb1c4>
   1dd68:	movw	r0, #17792	; 0x4580
   1dd6c:	movt	r0, #5
   1dd70:	ldr	r0, [r0]
   1dd74:	cmp	r0, #0
   1dd78:	beq	1e0f0 <__assert_fail@plt+0xb534>
   1dd7c:	str	r0, [r3, #144]	; 0x90
   1dd80:	add	r2, r3, #40	; 0x28
   1dd84:	mov	r0, #0
   1dd88:	str	sl, [sp, #28]
   1dd8c:	str	r7, [sp, #16]
   1dd90:	strb	r0, [r2]
   1dd94:	ldr	r1, [sl]
   1dd98:	mov	sl, r7
   1dd9c:	ldr	r4, [sl, r1, lsl #2]!
   1dda0:	cmp	r4, #0
   1dda4:	beq	1de8c <__assert_fail@plt+0xb2d0>
   1dda8:	eor	r6, r9, #1
   1ddac:	eor	r5, r5, #1
   1ddb0:	mov	r9, r1
   1ddb4:	mov	r8, #0
   1ddb8:	mov	r7, #0
   1ddbc:	str	r2, [sp, #12]
   1ddc0:	str	r1, [sp, #24]
   1ddc4:	ldrb	r1, [r4]
   1ddc8:	cmp	r1, #59	; 0x3b
   1ddcc:	bne	1dde0 <__assert_fail@plt+0xb224>
   1ddd0:	ldrb	r0, [r4, #1]
   1ddd4:	cmp	r0, #0
   1ddd8:	bne	1de04 <__assert_fail@plt+0xb248>
   1dddc:	b	1de5c <__assert_fail@plt+0xb2a0>
   1dde0:	subs	r1, r1, #43	; 0x2b
   1dde4:	movwne	r1, #1
   1dde8:	orrs	r1, r5, r1
   1ddec:	bne	1de04 <__assert_fail@plt+0xb248>
   1ddf0:	cmp	r0, #0
   1ddf4:	beq	1de04 <__assert_fail@plt+0xb248>
   1ddf8:	ldrb	r0, [r4, #1]
   1ddfc:	cmp	r0, #0
   1de00:	beq	1de64 <__assert_fail@plt+0xb2a8>
   1de04:	movw	r1, #2687	; 0xa7f
   1de08:	mov	r0, r4
   1de0c:	movt	r1, #4
   1de10:	bl	236bc <__assert_fail@plt+0x10b00>
   1de14:	mov	r1, #0
   1de18:	cmp	r0, #0
   1de1c:	beq	1de44 <__assert_fail@plt+0xb288>
   1de20:	cmp	r9, #0
   1de24:	mov	r0, r9
   1de28:	movwne	r0, #1
   1de2c:	orrs	r0, r0, r6
   1de30:	beq	1e0cc <__assert_fail@plt+0xb510>
   1de34:	add	r7, r7, #1
   1de38:	mov	r0, #1
   1de3c:	mov	r8, r4
   1de40:	b	1de48 <__assert_fail@plt+0xb28c>
   1de44:	mov	r0, #0
   1de48:	ldr	r4, [sl, #4]!
   1de4c:	add	r9, r9, #1
   1de50:	cmp	r4, #0
   1de54:	bne	1ddc4 <__assert_fail@plt+0xb208>
   1de58:	b	1de70 <__assert_fail@plt+0xb2b4>
   1de5c:	mov	r1, #0
   1de60:	b	1de70 <__assert_fail@plt+0xb2b4>
   1de64:	ldr	r0, [sp, #12]
   1de68:	mov	r1, #1
   1de6c:	strb	r1, [r0]
   1de70:	ldr	r0, [sp, #24]
   1de74:	cmp	r9, r0
   1de78:	ldrne	r0, [sl]
   1de7c:	cmpne	r0, #0
   1de80:	bne	1dea8 <__assert_fail@plt+0xb2ec>
   1de84:	ldr	r3, [sp, #32]
   1de88:	mov	r1, r9
   1de8c:	ldr	r0, [sp, #28]
   1de90:	str	r1, [r0]
   1de94:	mov	r0, r3
   1de98:	bl	2c048 <__assert_fail@plt+0x1948c>
   1de9c:	mov	r0, #0
   1dea0:	sub	sp, fp, #28
   1dea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dea8:	cmp	r1, #0
   1deac:	beq	1deec <__assert_fail@plt+0xb330>
   1deb0:	ldr	r1, [sp, #20]
   1deb4:	movw	r2, #16924	; 0x421c
   1deb8:	movw	r0, #3417	; 0xd59
   1debc:	movw	r4, #63055	; 0xf64f
   1dec0:	movt	r2, #1
   1dec4:	movt	r0, #4
   1dec8:	movt	r4, #3
   1decc:	cmp	r1, r2
   1ded0:	moveq	r4, r0
   1ded4:	cmp	r7, #2
   1ded8:	bge	1e11c <__assert_fail@plt+0xb560>
   1dedc:	mov	r0, r8
   1dee0:	bl	1288c <strlen@plt>
   1dee4:	cmp	r0, #2
   1dee8:	bne	1e144 <__assert_fail@plt+0xb588>
   1deec:	ldr	r8, [sp, #12]
   1def0:	mov	r1, #2048	; 0x800
   1def4:	add	r7, r8, #4
   1def8:	mov	r0, r7
   1defc:	bl	1f418 <__assert_fail@plt+0xc85c>
   1df00:	sub	r0, r0, #1
   1df04:	cmp	r0, #1
   1df08:	bls	1e110 <__assert_fail@plt+0xb554>
   1df0c:	mov	r0, r7
   1df10:	bl	1f4e8 <__assert_fail@plt+0xc92c>
   1df14:	ldr	r4, [sp, #32]
   1df18:	movw	r0, #22548	; 0x5814
   1df1c:	ldr	r6, [sp, #24]
   1df20:	movt	r0, #1
   1df24:	str	r0, [r4, #76]	; 0x4c
   1df28:	ldrb	r0, [r4, #40]	; 0x28
   1df2c:	cmp	r0, #0
   1df30:	beq	1dfc4 <__assert_fail@plt+0xb408>
   1df34:	mvn	r1, r6
   1df38:	mov	r2, #0
   1df3c:	add	r5, r4, #88	; 0x58
   1df40:	mov	r0, r7
   1df44:	add	r1, r9, r1
   1df48:	str	r2, [r4, #132]	; 0x84
   1df4c:	str	r2, [r4, #80]	; 0x50
   1df50:	str	r2, [r4, #84]	; 0x54
   1df54:	str	r2, [r4, #64]	; 0x40
   1df58:	str	r2, [r4, #68]	; 0x44
   1df5c:	mov	r2, r8
   1df60:	str	r1, [r4, #72]	; 0x48
   1df64:	mov	r1, r5
   1df68:	bl	1f50c <__assert_fail@plt+0xc950>
   1df6c:	sub	r0, r9, #1
   1df70:	cmp	r6, r0
   1df74:	bge	1e034 <__assert_fail@plt+0xb478>
   1df78:	ldr	r1, [sp, #16]
   1df7c:	sub	r8, r0, r6
   1df80:	add	r4, r1, r6, lsl #2
   1df84:	ldr	r6, [r4], #4
   1df88:	mov	r0, r6
   1df8c:	bl	1288c <strlen@plt>
   1df90:	mov	r1, #0
   1df94:	add	r3, r0, #1
   1df98:	mov	r0, r7
   1df9c:	mov	r2, r6
   1dfa0:	str	r1, [sp]
   1dfa4:	str	r1, [sp, #4]
   1dfa8:	mov	r1, #1
   1dfac:	str	r1, [sp, #8]
   1dfb0:	mov	r1, r5
   1dfb4:	bl	1ee38 <__assert_fail@plt+0xc27c>
   1dfb8:	subs	r8, r8, #1
   1dfbc:	bne	1df84 <__assert_fail@plt+0xb3c8>
   1dfc0:	b	1e034 <__assert_fail@plt+0xb478>
   1dfc4:	mov	r0, #2
   1dfc8:	mov	r5, #0
   1dfcc:	str	r0, [r4, #64]	; 0x40
   1dfd0:	movw	r0, #2687	; 0xa7f
   1dfd4:	movt	r0, #4
   1dfd8:	str	r0, [r4, #68]	; 0x44
   1dfdc:	sub	r0, r9, r6
   1dfe0:	str	r5, [r4, #80]	; 0x50
   1dfe4:	str	r5, [r4, #84]	; 0x54
   1dfe8:	str	r0, [r4, #136]	; 0x88
   1dfec:	lsl	r0, r0, #2
   1dff0:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1dff4:	str	r0, [r4, #132]	; 0x84
   1dff8:	add	r1, r4, #88	; 0x58
   1dffc:	mov	r0, r7
   1e000:	mov	r2, r8
   1e004:	bl	1f50c <__assert_fail@plt+0xc950>
   1e008:	ldr	r0, [r4, #136]	; 0x88
   1e00c:	cmp	r0, #1
   1e010:	blt	1e034 <__assert_fail@plt+0xb478>
   1e014:	ldr	r1, [sp, #16]
   1e018:	add	r1, r1, r6, lsl #2
   1e01c:	ldr	r2, [r1, r5, lsl #2]
   1e020:	ldr	r3, [r4, #132]	; 0x84
   1e024:	str	r2, [r3, r5, lsl #2]
   1e028:	add	r5, r5, #1
   1e02c:	cmp	r5, r0
   1e030:	blt	1e01c <__assert_fail@plt+0xb460>
   1e034:	ldr	r0, [sl]
   1e038:	cmp	r0, #0
   1e03c:	ldr	r0, [sp, #28]
   1e040:	addne	r9, r9, #1
   1e044:	str	r9, [r0]
   1e048:	mov	r0, #1
   1e04c:	b	1dea0 <__assert_fail@plt+0xb2e4>
   1e050:	movw	r1, #2996	; 0xbb4
   1e054:	mov	r0, #0
   1e058:	mov	r2, #5
   1e05c:	movt	r1, #4
   1e060:	bl	1264c <dcgettext@plt>
   1e064:	ldr	r3, [sp, #24]
   1e068:	mov	r2, r0
   1e06c:	mov	r0, #1
   1e070:	mov	r1, #0
   1e074:	bl	12790 <error@plt>
   1e078:	bl	125a4 <strndup@plt>
   1e07c:	movw	r1, #3247	; 0xcaf
   1e080:	mov	r5, r0
   1e084:	mov	r0, #0
   1e088:	mov	r2, #5
   1e08c:	movt	r1, #4
   1e090:	bl	1264c <dcgettext@plt>
   1e094:	mov	r6, r0
   1e098:	ldr	r0, [sp, #36]	; 0x24
   1e09c:	cmp	r5, #0
   1e0a0:	addeq	r5, r4, r0
   1e0a4:	mov	r0, #0
   1e0a8:	mov	r1, r5
   1e0ac:	bl	19020 <__assert_fail@plt+0x6464>
   1e0b0:	mov	r3, r0
   1e0b4:	ldr	r0, [sp, #24]
   1e0b8:	mov	r1, #0
   1e0bc:	mov	r2, r6
   1e0c0:	str	r0, [sp]
   1e0c4:	mov	r0, #1
   1e0c8:	bl	12790 <error@plt>
   1e0cc:	movw	r1, #2690	; 0xa82
   1e0d0:	movt	r1, #4
   1e0d4:	mov	r0, #0
   1e0d8:	mov	r2, #5
   1e0dc:	bl	1264c <dcgettext@plt>
   1e0e0:	mov	r2, r0
   1e0e4:	mov	r0, #1
   1e0e8:	mov	r1, #0
   1e0ec:	bl	12790 <error@plt>
   1e0f0:	movw	r0, #2588	; 0xa1c
   1e0f4:	movw	r1, #1319	; 0x527
   1e0f8:	movw	r3, #2607	; 0xa2f
   1e0fc:	movw	r2, #2937	; 0xb79
   1e100:	movt	r0, #4
   1e104:	movt	r1, #4
   1e108:	movt	r3, #4
   1e10c:	bl	12bbc <__assert_fail@plt>
   1e110:	movw	r1, #2955	; 0xb8b
   1e114:	movt	r1, #4
   1e118:	b	1e0d4 <__assert_fail@plt+0xb518>
   1e11c:	movw	r1, #2804	; 0xaf4
   1e120:	mov	r0, #0
   1e124:	mov	r2, #5
   1e128:	movt	r1, #4
   1e12c:	bl	1264c <dcgettext@plt>
   1e130:	mov	r2, r0
   1e134:	mov	r0, #1
   1e138:	mov	r1, #0
   1e13c:	mov	r3, r4
   1e140:	bl	12790 <error@plt>
   1e144:	movw	r2, #2860	; 0xb2c
   1e148:	add	r0, sp, #36	; 0x24
   1e14c:	mov	r1, #19
   1e150:	mov	r3, r4
   1e154:	movt	r2, #4
   1e158:	bl	128ec <snprintf@plt>
   1e15c:	cmp	r0, #20
   1e160:	bcs	1e1dc <__assert_fail@plt+0xb620>
   1e164:	movw	r1, #2898	; 0xb52
   1e168:	mov	r0, #0
   1e16c:	mov	r2, #5
   1e170:	movt	r1, #4
   1e174:	bl	1264c <dcgettext@plt>
   1e178:	movw	r7, #20100	; 0x4e84
   1e17c:	mov	r4, r0
   1e180:	add	r2, sp, #36	; 0x24
   1e184:	mov	r0, #0
   1e188:	movt	r7, #5
   1e18c:	ldr	r1, [r7, #72]	; 0x48
   1e190:	bl	29834 <__assert_fail@plt+0x16c78>
   1e194:	ldr	r1, [r7, #72]	; 0x48
   1e198:	movw	r2, #2687	; 0xa7f
   1e19c:	mov	r5, r0
   1e1a0:	mov	r0, #1
   1e1a4:	movt	r2, #4
   1e1a8:	bl	29834 <__assert_fail@plt+0x16c78>
   1e1ac:	ldr	r1, [r7, #72]	; 0x48
   1e1b0:	mov	r6, r0
   1e1b4:	mov	r0, #2
   1e1b8:	mov	r2, r8
   1e1bc:	bl	29834 <__assert_fail@plt+0x16c78>
   1e1c0:	str	r0, [sp, #4]
   1e1c4:	mov	r0, #1
   1e1c8:	mov	r1, #0
   1e1cc:	mov	r2, r4
   1e1d0:	mov	r3, r5
   1e1d4:	str	r6, [sp]
   1e1d8:	bl	12790 <error@plt>
   1e1dc:	movw	r0, #2877	; 0xb3d
   1e1e0:	movw	r1, #1319	; 0x527
   1e1e4:	movw	r3, #2607	; 0xa2f
   1e1e8:	movw	r2, #3014	; 0xbc6
   1e1ec:	movt	r0, #4
   1e1f0:	movt	r1, #4
   1e1f4:	movt	r3, #4
   1e1f8:	bl	12bbc <__assert_fail@plt>
   1e1fc:	push	{r4, r5, fp, lr}
   1e200:	add	fp, sp, #8
   1e204:	mov	r5, r1
   1e208:	bl	17c44 <__assert_fail@plt+0x5088>
   1e20c:	cmp	r5, #0
   1e210:	mov	r4, r0
   1e214:	add	r1, r0, #40	; 0x28
   1e218:	movweq	r0, #3448	; 0xd78
   1e21c:	movteq	r0, #4
   1e220:	movne	r0, r5
   1e224:	bl	1e23c <__assert_fail@plt+0xb680>
   1e228:	mov	r0, #1065353216	; 0x3f800000
   1e22c:	str	r0, [r4, #28]
   1e230:	movw	r0, #257	; 0x101
   1e234:	strh	r0, [r4, #16]
   1e238:	pop	{r4, r5, fp, pc}
   1e23c:	push	{r4, r5, r6, sl, fp, lr}
   1e240:	add	fp, sp, #16
   1e244:	mov	r5, r0
   1e248:	mov	r0, #0
   1e24c:	mov	r4, r1
   1e250:	str	r0, [r1]
   1e254:	mov	r0, #0
   1e258:	bl	282cc <__assert_fail@plt+0x15710>
   1e25c:	movw	r1, #3421	; 0xd5d
   1e260:	str	r0, [r4, #16]
   1e264:	mov	r0, r5
   1e268:	movt	r1, #4
   1e26c:	bl	124cc <strcmp@plt>
   1e270:	cmp	r0, #0
   1e274:	beq	1e2c8 <__assert_fail@plt+0xb70c>
   1e278:	movw	r1, #3448	; 0xd78
   1e27c:	mov	r0, r5
   1e280:	movt	r1, #4
   1e284:	bl	124cc <strcmp@plt>
   1e288:	cmp	r0, #0
   1e28c:	beq	1e2dc <__assert_fail@plt+0xb720>
   1e290:	movw	r0, #20056	; 0x4e58
   1e294:	mov	r1, r5
   1e298:	movt	r0, #5
   1e29c:	ldr	r0, [r0, #36]	; 0x24
   1e2a0:	bl	19298 <__assert_fail@plt+0x66dc>
   1e2a4:	mov	r6, r4
   1e2a8:	cmp	r0, #0
   1e2ac:	str	r0, [r6, #4]!
   1e2b0:	str	r5, [r6, #4]
   1e2b4:	bne	1e308 <__assert_fail@plt+0xb74c>
   1e2b8:	bl	128d4 <__errno_location@plt>
   1e2bc:	ldr	r0, [r0]
   1e2c0:	mov	r1, r5
   1e2c4:	bl	190c8 <__assert_fail@plt+0x650c>
   1e2c8:	movw	r1, #3433	; 0xd69
   1e2cc:	movw	r0, #17760	; 0x4560
   1e2d0:	movt	r1, #4
   1e2d4:	movt	r0, #5
   1e2d8:	b	1e2ec <__assert_fail@plt+0xb730>
   1e2dc:	movw	r1, #63115	; 0xf68b
   1e2e0:	movw	r0, #17772	; 0x456c
   1e2e4:	movt	r1, #3
   1e2e8:	movt	r0, #5
   1e2ec:	ldr	r0, [r0]
   1e2f0:	mov	r6, r4
   1e2f4:	mov	r2, #5
   1e2f8:	str	r0, [r6, #4]!
   1e2fc:	mov	r0, #0
   1e300:	bl	1264c <dcgettext@plt>
   1e304:	str	r0, [r6, #4]
   1e308:	ldr	r0, [r6]
   1e30c:	bl	12958 <fileno@plt>
   1e310:	cmn	r0, #1
   1e314:	beq	1e328 <__assert_fail@plt+0xb76c>
   1e318:	bl	12b2c <isatty@plt>
   1e31c:	cmp	r0, #0
   1e320:	movwne	r0, #1
   1e324:	b	1e32c <__assert_fail@plt+0xb770>
   1e328:	mov	r0, #0
   1e32c:	strb	r0, [r4, #12]
   1e330:	pop	{r4, r5, r6, sl, fp, pc}
   1e334:	push	{r4, r5, fp, lr}
   1e338:	add	fp, sp, #8
   1e33c:	mov	r5, r1
   1e340:	bl	17be8 <__assert_fail@plt+0x502c>
   1e344:	cmp	r5, #0
   1e348:	mov	r4, r0
   1e34c:	add	r1, r0, #40	; 0x28
   1e350:	movweq	r0, #3448	; 0xd78
   1e354:	movteq	r0, #4
   1e358:	movne	r0, r5
   1e35c:	bl	1e23c <__assert_fail@plt+0xb680>
   1e360:	mov	r0, #1065353216	; 0x3f800000
   1e364:	str	r0, [r4, #28]
   1e368:	movw	r0, #257	; 0x101
   1e36c:	str	r0, [r4, #16]
   1e370:	pop	{r4, r5, fp, pc}
   1e374:	push	{r4, r5, r6, sl, fp, lr}
   1e378:	add	fp, sp, #16
   1e37c:	sub	sp, sp, #16
   1e380:	mov	r4, #0
   1e384:	cmp	r0, #0
   1e388:	beq	1e3f8 <__assert_fail@plt+0xb83c>
   1e38c:	mov	r5, r2
   1e390:	ldr	r2, [r1]
   1e394:	ldr	r6, [r0, r2, lsl #2]
   1e398:	cmp	r6, #0
   1e39c:	beq	1e3f8 <__assert_fail@plt+0xb83c>
   1e3a0:	add	r0, r2, #1
   1e3a4:	add	r2, sp, #4
   1e3a8:	str	r0, [r1]
   1e3ac:	add	r1, sp, #8
   1e3b0:	mov	r0, r6
   1e3b4:	bl	1e4b4 <__assert_fail@plt+0xb8f8>
   1e3b8:	cmp	r0, #0
   1e3bc:	beq	1e3f8 <__assert_fail@plt+0xb83c>
   1e3c0:	mov	r0, r5
   1e3c4:	mov	r1, r6
   1e3c8:	bl	17be8 <__assert_fail@plt+0x502c>
   1e3cc:	mov	r4, r0
   1e3d0:	ldr	r0, [sp, #4]
   1e3d4:	str	r0, [r4, #40]	; 0x28
   1e3d8:	ldr	r0, [sp, #8]
   1e3dc:	ldr	r1, [sp, #12]
   1e3e0:	strd	r0, [r4, #48]	; 0x30
   1e3e4:	movw	r0, #20100	; 0x4e84
   1e3e8:	movt	r0, #5
   1e3ec:	ldrb	r0, [r0, #44]	; 0x2c
   1e3f0:	tst	r0, #1
   1e3f4:	bne	1e404 <__assert_fail@plt+0xb848>
   1e3f8:	mov	r0, r4
   1e3fc:	sub	sp, fp, #16
   1e400:	pop	{r4, r5, r6, sl, fp, pc}
   1e404:	movw	r6, #17760	; 0x4560
   1e408:	ldr	r2, [r4, #4]
   1e40c:	movw	r1, #2311	; 0x907
   1e410:	add	r5, r4, #48	; 0x30
   1e414:	movt	r6, #5
   1e418:	movt	r1, #4
   1e41c:	ldr	r0, [r6]
   1e420:	bl	128c8 <fprintf@plt>
   1e424:	ldr	r1, [sp, #4]
   1e428:	ldr	r0, [r6]
   1e42c:	cmp	r1, #0
   1e430:	beq	1e450 <__assert_fail@plt+0xb894>
   1e434:	cmp	r1, #1
   1e438:	bne	1e464 <__assert_fail@plt+0xb8a8>
   1e43c:	movw	r3, #2355	; 0x933
   1e440:	movw	r2, #8219	; 0x201b
   1e444:	movt	r3, #4
   1e448:	movt	r2, #4
   1e44c:	b	1e490 <__assert_fail@plt+0xb8d4>
   1e450:	movw	r3, #2352	; 0x930
   1e454:	movw	r2, #2346	; 0x92a
   1e458:	movt	r3, #4
   1e45c:	movt	r2, #4
   1e460:	b	1e490 <__assert_fail@plt+0xb8d4>
   1e464:	movw	r2, #3511	; 0xdb7
   1e468:	movw	r3, #2361	; 0x939
   1e46c:	cmp	r1, #2
   1e470:	movw	r1, #2349	; 0x92d
   1e474:	movt	r2, #4
   1e478:	movt	r3, #4
   1e47c:	movt	r1, #4
   1e480:	moveq	r3, r2
   1e484:	movw	r2, #2362	; 0x93a
   1e488:	movt	r2, #4
   1e48c:	moveq	r2, r1
   1e490:	movw	r1, #2325	; 0x915
   1e494:	movt	r1, #4
   1e498:	bl	128c8 <fprintf@plt>
   1e49c:	ldrd	r2, [r5]
   1e4a0:	ldr	r0, [r6]
   1e4a4:	movw	r1, #3514	; 0xdba
   1e4a8:	movt	r1, #4
   1e4ac:	bl	128c8 <fprintf@plt>
   1e4b0:	b	1e3f8 <__assert_fail@plt+0xb83c>
   1e4b4:	cmp	r0, #0
   1e4b8:	moveq	r0, #0
   1e4bc:	bxeq	lr
   1e4c0:	mov	r3, r1
   1e4c4:	cmp	r2, #0
   1e4c8:	beq	1e500 <__assert_fail@plt+0xb944>
   1e4cc:	ldrb	r1, [r0]
   1e4d0:	cmp	r1, #45	; 0x2d
   1e4d4:	beq	1e4e8 <__assert_fail@plt+0xb92c>
   1e4d8:	cmp	r1, #43	; 0x2b
   1e4dc:	bne	1e4f8 <__assert_fail@plt+0xb93c>
   1e4e0:	mov	r1, #0
   1e4e4:	b	1e4ec <__assert_fail@plt+0xb930>
   1e4e8:	mov	r1, #1
   1e4ec:	str	r1, [r2]
   1e4f0:	add	r0, r0, #1
   1e4f4:	b	1e500 <__assert_fail@plt+0xb944>
   1e4f8:	mov	r1, #2
   1e4fc:	str	r1, [r2]
   1e500:	push	{fp, lr}
   1e504:	mov	fp, sp
   1e508:	sub	sp, sp, #8
   1e50c:	movw	r1, #63055	; 0xf64f
   1e510:	mov	r2, #10
   1e514:	movt	r1, #3
   1e518:	str	r1, [sp]
   1e51c:	add	r1, sp, #4
   1e520:	bl	2b374 <__assert_fail@plt+0x187b8>
   1e524:	clz	r0, r0
   1e528:	lsr	r0, r0, #5
   1e52c:	mov	sp, fp
   1e530:	pop	{fp, pc}
   1e534:	push	{r4, r5, fp, lr}
   1e538:	add	fp, sp, #8
   1e53c:	vpush	{d8}
   1e540:	mov	r5, r1
   1e544:	movw	r1, #3752	; 0xea8
   1e548:	mov	r4, r0
   1e54c:	movt	r1, #4
   1e550:	bl	12ad8 <strpbrk@plt>
   1e554:	vldr	s16, [pc, #52]	; 1e590 <__assert_fail@plt+0xb9d4>
   1e558:	cmp	r0, #0
   1e55c:	bne	1e584 <__assert_fail@plt+0xb9c8>
   1e560:	cmp	r5, #0
   1e564:	beq	1e580 <__assert_fail@plt+0xb9c4>
   1e568:	mov	r0, r4
   1e56c:	mov	r1, #46	; 0x2e
   1e570:	bl	12898 <strchr@plt>
   1e574:	cmp	r0, #0
   1e578:	vldreq	s16, [pc, #20]	; 1e594 <__assert_fail@plt+0xb9d8>
   1e57c:	b	1e584 <__assert_fail@plt+0xb9c8>
   1e580:	vldr	s16, [pc, #12]	; 1e594 <__assert_fail@plt+0xb9d8>
   1e584:	vmov.f32	s0, s16
   1e588:	vpop	{d8}
   1e58c:	pop	{r4, r5, fp, pc}
   1e590:	svccc	0x004ccccd
   1e594:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e598:	push	{r4, sl, fp, lr}
   1e59c:	add	fp, sp, #8
   1e5a0:	movw	r4, #19696	; 0x4cf0
   1e5a4:	movt	r4, #5
   1e5a8:	ldrb	r0, [r4]
   1e5ac:	cmp	r0, #0
   1e5b0:	popne	{r4, sl, fp, pc}
   1e5b4:	movw	r0, #3775	; 0xebf
   1e5b8:	mov	r2, #0
   1e5bc:	movt	r0, #4
   1e5c0:	mov	r1, r0
   1e5c4:	bl	127b4 <fnmatch@plt>
   1e5c8:	cmp	r0, #0
   1e5cc:	bne	1e61c <__assert_fail@plt+0xba60>
   1e5d0:	movw	r0, #3779	; 0xec3
   1e5d4:	movw	r1, #3775	; 0xebf
   1e5d8:	mov	r2, #0
   1e5dc:	movt	r0, #4
   1e5e0:	movt	r1, #4
   1e5e4:	bl	127b4 <fnmatch@plt>
   1e5e8:	cmp	r0, #0
   1e5ec:	beq	1e61c <__assert_fail@plt+0xba60>
   1e5f0:	movw	r0, #3779	; 0xec3
   1e5f4:	movw	r1, #3775	; 0xebf
   1e5f8:	mov	r2, #16
   1e5fc:	movt	r0, #4
   1e600:	movt	r1, #4
   1e604:	bl	127b4 <fnmatch@plt>
   1e608:	cmp	r0, #0
   1e60c:	bne	1e61c <__assert_fail@plt+0xba60>
   1e610:	mov	r0, #1
   1e614:	strb	r0, [r4]
   1e618:	pop	{r4, sl, fp, pc}
   1e61c:	movw	r1, #3783	; 0xec7
   1e620:	mov	r0, #0
   1e624:	mov	r2, #5
   1e628:	movt	r1, #4
   1e62c:	bl	1264c <dcgettext@plt>
   1e630:	mov	r2, r0
   1e634:	mov	r0, #1
   1e638:	mov	r1, #0
   1e63c:	bl	12790 <error@plt>
   1e640:	push	{r4, r5, r6, r7, fp, lr}
   1e644:	add	fp, sp, #16
   1e648:	sub	sp, sp, #8
   1e64c:	mov	r5, r0
   1e650:	movw	r0, #20100	; 0x4e84
   1e654:	mov	r4, r1
   1e658:	movt	r0, #5
   1e65c:	ldrb	r1, [r0, #17]
   1e660:	cmp	r1, #0
   1e664:	bne	1e6ec <__assert_fail@plt+0xbb30>
   1e668:	ldrb	r0, [r0, #16]
   1e66c:	cmp	r0, #0
   1e670:	beq	1e6ec <__assert_fail@plt+0xbb30>
   1e674:	mov	r0, r2
   1e678:	mov	r1, #47	; 0x2f
   1e67c:	bl	12898 <strchr@plt>
   1e680:	cmp	r0, #0
   1e684:	beq	1e6ec <__assert_fail@plt+0xbb30>
   1e688:	movw	r1, #3838	; 0xefe
   1e68c:	mov	r0, #0
   1e690:	mov	r2, #5
   1e694:	movt	r1, #4
   1e698:	bl	1264c <dcgettext@plt>
   1e69c:	mov	r6, r0
   1e6a0:	mov	r0, #0
   1e6a4:	mov	r1, r5
   1e6a8:	bl	19020 <__assert_fail@plt+0x6464>
   1e6ac:	movw	r1, #57938	; 0xe252
   1e6b0:	mov	r5, r0
   1e6b4:	mov	r0, #1
   1e6b8:	movt	r1, #3
   1e6bc:	bl	19020 <__assert_fail@plt+0x6464>
   1e6c0:	mov	r7, r0
   1e6c4:	mov	r0, #2
   1e6c8:	mov	r1, r4
   1e6cc:	bl	19020 <__assert_fail@plt+0x6464>
   1e6d0:	str	r0, [sp, #4]
   1e6d4:	mov	r0, #0
   1e6d8:	mov	r1, #0
   1e6dc:	mov	r2, r6
   1e6e0:	mov	r3, r5
   1e6e4:	str	r7, [sp]
   1e6e8:	bl	12790 <error@plt>
   1e6ec:	sub	sp, fp, #16
   1e6f0:	pop	{r4, r5, r6, r7, fp, pc}
   1e6f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e6f8:	add	fp, sp, #24
   1e6fc:	sub	sp, sp, #8
   1e700:	mov	r9, r3
   1e704:	mov	r4, r2
   1e708:	mov	r6, r1
   1e70c:	mov	r7, r0
   1e710:	bl	1e598 <__assert_fail@plt+0xb9dc>
   1e714:	mov	r5, #0
   1e718:	cmp	r6, #0
   1e71c:	beq	1e798 <__assert_fail@plt+0xbbdc>
   1e720:	ldr	r0, [r4]
   1e724:	ldr	r6, [r6, r0, lsl #2]
   1e728:	cmp	r6, #0
   1e72c:	beq	1e798 <__assert_fail@plt+0xbbdc>
   1e730:	ldr	r8, [fp, #8]
   1e734:	add	r0, r0, #1
   1e738:	mov	r2, r6
   1e73c:	str	r0, [r4]
   1e740:	mov	r0, r7
   1e744:	mov	r1, r8
   1e748:	bl	17bb0 <__assert_fail@plt+0x4ff4>
   1e74c:	movw	r1, #3752	; 0xea8
   1e750:	mov	r7, r0
   1e754:	mov	r0, #0
   1e758:	strh	r0, [r7, #18]
   1e75c:	movt	r1, #4
   1e760:	mov	r0, r6
   1e764:	str	r6, [r7, #40]	; 0x28
   1e768:	bl	12ad8 <strpbrk@plt>
   1e76c:	cmp	r0, #0
   1e770:	add	r1, pc, #172	; 0xac
   1e774:	movw	r0, #20100	; 0x4e84
   1e778:	mov	r5, #1
   1e77c:	addeq	r1, r1, #4
   1e780:	movt	r0, #5
   1e784:	vldr	s0, [r1]
   1e788:	vstr	s0, [r7, #28]
   1e78c:	ldrb	r0, [r0, #17]
   1e790:	cmp	r0, #0
   1e794:	beq	1e7a4 <__assert_fail@plt+0xbbe8>
   1e798:	mov	r0, r5
   1e79c:	sub	sp, fp, #24
   1e7a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e7a4:	mov	r0, r6
   1e7a8:	mov	r1, #47	; 0x2f
   1e7ac:	bl	12a18 <strrchr@plt>
   1e7b0:	cmp	r0, #0
   1e7b4:	beq	1e798 <__assert_fail@plt+0xbbdc>
   1e7b8:	ldrb	r0, [r0, #1]
   1e7bc:	cmp	r0, #0
   1e7c0:	bne	1e798 <__assert_fail@plt+0xbbdc>
   1e7c4:	movw	r0, #17704	; 0x4528
   1e7c8:	movt	r0, #1
   1e7cc:	sub	r0, r8, r0
   1e7d0:	clz	r0, r0
   1e7d4:	lsr	r1, r0, #5
   1e7d8:	mov	r0, r6
   1e7dc:	bl	15cc0 <__assert_fail@plt+0x3104>
   1e7e0:	cmp	r0, #0
   1e7e4:	bne	1e798 <__assert_fail@plt+0xbbdc>
   1e7e8:	movw	r1, #4016	; 0xfb0
   1e7ec:	mov	r0, #0
   1e7f0:	mov	r2, #5
   1e7f4:	movt	r1, #4
   1e7f8:	bl	1264c <dcgettext@plt>
   1e7fc:	mov	r2, r0
   1e800:	mov	r0, #0
   1e804:	mov	r1, #0
   1e808:	mov	r3, r9
   1e80c:	str	r6, [sp]
   1e810:	bl	12790 <error@plt>
   1e814:	movw	r0, #52343	; 0xcc77
   1e818:	movt	r0, #12843	; 0x322b
   1e81c:	str	r0, [r7, #28]
   1e820:	b	1e798 <__assert_fail@plt+0xbbdc>
   1e824:	svccc	0x004ccccd
   1e828:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e82c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e830:	add	fp, sp, #24
   1e834:	sub	sp, sp, #8
   1e838:	mov	r7, #0
   1e83c:	cmp	r0, #0
   1e840:	beq	1e8ec <__assert_fail@plt+0xbd30>
   1e844:	mov	r6, r3
   1e848:	ldr	r3, [r1]
   1e84c:	ldr	r4, [r0, r3, lsl #2]
   1e850:	cmp	r4, #0
   1e854:	beq	1e8ec <__assert_fail@plt+0xbd30>
   1e858:	add	r0, r3, #1
   1e85c:	str	r0, [r1]
   1e860:	movw	r1, #19356	; 0x4b9c
   1e864:	mov	r0, r2
   1e868:	mov	r2, r4
   1e86c:	movt	r1, #1
   1e870:	bl	17bb0 <__assert_fail@plt+0x4ff4>
   1e874:	mov	r8, #0
   1e878:	mov	r5, r0
   1e87c:	strh	r8, [r0, #18]
   1e880:	mov	r0, #32
   1e884:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1e888:	mov	r7, r0
   1e88c:	str	r0, [r5, #40]	; 0x28
   1e890:	mov	r0, #100	; 0x64
   1e894:	str	r0, [r7, #4]
   1e898:	mov	r0, #100	; 0x64
   1e89c:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1e8a0:	str	r0, [r7]
   1e8a4:	mov	r0, r6
   1e8a8:	str	r8, [r7, #16]
   1e8ac:	bl	2fa30 <__assert_fail@plt+0x1ce74>
   1e8b0:	mov	r0, r4
   1e8b4:	str	r6, [r7, #12]
   1e8b8:	str	r8, [r7, #20]
   1e8bc:	bl	1288c <strlen@plt>
   1e8c0:	mov	r1, r0
   1e8c4:	mov	r0, r4
   1e8c8:	mov	r2, r7
   1e8cc:	bl	2ed68 <__assert_fail@plt+0x1c1ac>
   1e8d0:	cmp	r0, #0
   1e8d4:	bne	1e8f8 <__assert_fail@plt+0xbd3c>
   1e8d8:	mov	r0, r4
   1e8dc:	mov	r1, #1
   1e8e0:	mov	r7, #1
   1e8e4:	bl	1e534 <__assert_fail@plt+0xb978>
   1e8e8:	vstr	s0, [r5, #28]
   1e8ec:	mov	r0, r7
   1e8f0:	sub	sp, fp, #24
   1e8f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e8f8:	movw	r1, #4080	; 0xff0
   1e8fc:	mov	r6, r0
   1e900:	mov	r0, #0
   1e904:	mov	r2, #5
   1e908:	movt	r1, #4
   1e90c:	bl	1264c <dcgettext@plt>
   1e910:	mov	r2, r0
   1e914:	mov	r0, #1
   1e918:	mov	r1, #0
   1e91c:	mov	r3, r4
   1e920:	str	r6, [sp]
   1e924:	bl	12790 <error@plt>
   1e928:	push	{r4, r5, r6, sl, fp, lr}
   1e92c:	add	fp, sp, #16
   1e930:	sub	sp, sp, #8
   1e934:	mov	r6, r2
   1e938:	mov	r2, r0
   1e93c:	mov	r0, #0
   1e940:	cmp	r2, #0
   1e944:	beq	1e9e8 <__assert_fail@plt+0xbe2c>
   1e948:	ldr	r3, [r1]
   1e94c:	ldr	r5, [r2, r3, lsl #2]
   1e950:	cmp	r5, #0
   1e954:	beq	1e9e8 <__assert_fail@plt+0xbe2c>
   1e958:	add	r0, r2, r3, lsl #2
   1e95c:	ldr	r4, [r0, #-4]
   1e960:	add	r0, r3, #1
   1e964:	str	r0, [r1]
   1e968:	movw	r1, #3520	; 0xdc0
   1e96c:	mov	r0, r5
   1e970:	movt	r1, #4
   1e974:	bl	12bb0 <strspn@plt>
   1e978:	cmp	r0, #1
   1e97c:	blt	1e9f0 <__assert_fail@plt+0xbe34>
   1e980:	ldrb	r0, [r5, r0]
   1e984:	cmp	r0, #0
   1e988:	bne	1e9f0 <__assert_fail@plt+0xbe34>
   1e98c:	movw	r0, #20100	; 0x4e84
   1e990:	movt	r0, #5
   1e994:	ldr	r1, [r0, #72]	; 0x48
   1e998:	mov	r0, r5
   1e99c:	bl	20df8 <__assert_fail@plt+0xe23c>
   1e9a0:	cmp	r0, #0
   1e9a4:	str	r0, [r6]
   1e9a8:	blt	1e9f0 <__assert_fail@plt+0xbe34>
   1e9ac:	movw	r1, #19692	; 0x4cec
   1e9b0:	movt	r1, #5
   1e9b4:	ldr	r0, [r1]
   1e9b8:	cmp	r0, #0
   1e9bc:	bne	1e9d0 <__assert_fail@plt+0xbe14>
   1e9c0:	movw	r0, #5152	; 0x1420
   1e9c4:	movt	r0, #4
   1e9c8:	add	r0, r0, #1296	; 0x510
   1e9cc:	str	r0, [r1]
   1e9d0:	bl	17c44 <__assert_fail@plt+0x5088>
   1e9d4:	mov	r1, #0
   1e9d8:	strh	r1, [r0, #18]
   1e9dc:	mov	r1, #1065353216	; 0x3f800000
   1e9e0:	str	r1, [r0, #28]
   1e9e4:	mov	r0, #1
   1e9e8:	sub	sp, fp, #16
   1e9ec:	pop	{r4, r5, r6, sl, fp, pc}
   1e9f0:	movw	r1, #4126	; 0x101e
   1e9f4:	mov	r0, #0
   1e9f8:	mov	r2, #5
   1e9fc:	movt	r1, #4
   1ea00:	bl	1264c <dcgettext@plt>
   1ea04:	mov	r6, r0
   1ea08:	movw	r0, #20100	; 0x4e84
   1ea0c:	mov	r2, r5
   1ea10:	movt	r0, #5
   1ea14:	ldr	r1, [r0, #72]	; 0x48
   1ea18:	mov	r0, #0
   1ea1c:	bl	29834 <__assert_fail@plt+0x16c78>
   1ea20:	str	r0, [sp]
   1ea24:	mov	r0, #1
   1ea28:	mov	r1, #0
   1ea2c:	mov	r2, r6
   1ea30:	mov	r3, r4
   1ea34:	bl	12790 <error@plt>
   1ea38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ea3c:	add	fp, sp, #24
   1ea40:	sub	sp, sp, #8
   1ea44:	movw	r7, #20208	; 0x4ef0
   1ea48:	movw	r8, #4543	; 0x11bf
   1ea4c:	mov	r6, r3
   1ea50:	mov	r3, r0
   1ea54:	movw	r0, #4536	; 0x11b8
   1ea58:	movt	r7, #1
   1ea5c:	movt	r0, #4
   1ea60:	movt	r8, #4
   1ea64:	cmp	r6, r7
   1ea68:	moveq	r8, r0
   1ea6c:	mov	r0, #0
   1ea70:	cmp	r3, #0
   1ea74:	beq	1ec04 <__assert_fail@plt+0xc048>
   1ea78:	ldr	r4, [r1]
   1ea7c:	ldr	r5, [r3, r4, lsl #2]
   1ea80:	cmp	r5, #0
   1ea84:	beq	1ec04 <__assert_fail@plt+0xc048>
   1ea88:	add	r0, r4, #1
   1ea8c:	str	r0, [r1]
   1ea90:	ldrb	r0, [r5]
   1ea94:	cmp	r0, #0
   1ea98:	beq	1ec98 <__assert_fail@plt+0xc0dc>
   1ea9c:	mov	r0, r2
   1eaa0:	mov	r1, r6
   1eaa4:	mov	r2, r5
   1eaa8:	bl	17bb0 <__assert_fail@plt+0x4ff4>
   1eaac:	mov	r1, #0
   1eab0:	vldr	s0, [pc, #492]	; 1eca4 <__assert_fail@plt+0xc0e8>
   1eab4:	vldr	s2, [pc, #492]	; 1eca8 <__assert_fail@plt+0xc0ec>
   1eab8:	vldr	s4, [pc, #492]	; 1ecac <__assert_fail@plt+0xc0f0>
   1eabc:	vldr	s6, [pc, #504]	; 1ecbc <__assert_fail@plt+0xc100>
   1eac0:	vldr	s8, [pc, #496]	; 1ecb8 <__assert_fail@plt+0xc0fc>
   1eac4:	vldr	s12, [pc, #488]	; 1ecb4 <__assert_fail@plt+0xc0f8>
   1eac8:	vldr	s14, [pc, #480]	; 1ecb0 <__assert_fail@plt+0xc0f4>
   1eacc:	vmov.f32	s10, #108	; 0x3f600000  0.875
   1ead0:	str	r1, [r0, #28]
   1ead4:	subs	r1, r6, r7
   1ead8:	clz	r2, r1
   1eadc:	movwne	r1, #1
   1eae0:	strb	r1, [r0, #19]
   1eae4:	lsr	r1, r2, #5
   1eae8:	mov	r2, #1
   1eaec:	strb	r1, [r0, #18]
   1eaf0:	add	r1, r0, #40	; 0x28
   1eaf4:	ldrb	r3, [r5]
   1eaf8:	uxtb	r3, r3
   1eafc:	mov	r6, r5
   1eb00:	cmp	r3, #97	; 0x61
   1eb04:	ble	1ebf8 <__assert_fail@plt+0xc03c>
   1eb08:	sub	r7, r3, #98	; 0x62
   1eb0c:	cmp	r7, #14
   1eb10:	bhi	1eb90 <__assert_fail@plt+0xbfd4>
   1eb14:	add	r5, pc, #8
   1eb18:	mov	r3, #0
   1eb1c:	vmov.f32	s1, s2
   1eb20:	ldr	pc, [r5, r7, lsl #2]
   1eb24:	andeq	lr, r1, ip, lsr #23
   1eb28:	andeq	lr, r1, r0, ror #22
   1eb2c:	andeq	lr, r1, r8, ror fp
   1eb30:	andeq	lr, r1, r0, lsr #24
   1eb34:	andeq	lr, r1, ip, ror #22
   1eb38:	andeq	lr, r1, r0, lsr #24
   1eb3c:	andeq	lr, r1, r0, lsr #24
   1eb40:	andeq	lr, r1, r0, lsr #24
   1eb44:	andeq	lr, r1, r0, lsr #24
   1eb48:	andeq	lr, r1, r0, lsr #24
   1eb4c:	andeq	lr, r1, r4, lsr #23
   1eb50:	andeq	lr, r1, r0, lsr #24
   1eb54:	andeq	lr, r1, r0, lsr #24
   1eb58:	andeq	lr, r1, r0, lsr #24
   1eb5c:	andeq	lr, r1, r4, lsl #23
   1eb60:	mov	r3, #1
   1eb64:	vmov.f32	s1, s6
   1eb68:	b	1ebac <__assert_fail@plt+0xbff0>
   1eb6c:	mov	r3, #3
   1eb70:	vmov.f32	s1, s10
   1eb74:	b	1ebac <__assert_fail@plt+0xbff0>
   1eb78:	mov	r3, #2
   1eb7c:	vmov.f32	s1, s8
   1eb80:	b	1ebac <__assert_fail@plt+0xbff0>
   1eb84:	mov	r3, #5
   1eb88:	vmov.f32	s1, s14
   1eb8c:	b	1ebac <__assert_fail@plt+0xbff0>
   1eb90:	cmp	r3, #115	; 0x73
   1eb94:	bne	1ec20 <__assert_fail@plt+0xc064>
   1eb98:	mov	r3, #6
   1eb9c:	vmov.f32	s1, s4
   1eba0:	b	1ebac <__assert_fail@plt+0xbff0>
   1eba4:	mov	r3, #4
   1eba8:	vmov.f32	s1, s12
   1ebac:	ldrb	r7, [r1, r3]
   1ebb0:	cmp	r7, #0
   1ebb4:	bne	1ec44 <__assert_fail@plt+0xc088>
   1ebb8:	vadd.f32	s0, s1, s0
   1ebbc:	mov	r5, r6
   1ebc0:	vstr	s0, [r0, #28]
   1ebc4:	strb	r2, [r1, r3]
   1ebc8:	ldrb	r3, [r5, #1]!
   1ebcc:	cmp	r3, #0
   1ebd0:	beq	1eaf8 <__assert_fail@plt+0xbf3c>
   1ebd4:	cmp	r3, #44	; 0x2c
   1ebd8:	bne	1ec70 <__assert_fail@plt+0xc0b4>
   1ebdc:	ldrb	r3, [r6, #2]!
   1ebe0:	cmp	r3, #0
   1ebe4:	mov	r5, r6
   1ebe8:	bne	1eaf8 <__assert_fail@plt+0xbf3c>
   1ebec:	movw	r1, #4831	; 0x12df
   1ebf0:	movt	r1, #4
   1ebf4:	b	1ec78 <__assert_fail@plt+0xc0bc>
   1ebf8:	cmp	r3, #0
   1ebfc:	bne	1ec0c <__assert_fail@plt+0xc050>
   1ec00:	mov	r0, #1
   1ec04:	sub	sp, fp, #24
   1ec08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ec0c:	cmp	r3, #68	; 0x44
   1ec10:	bne	1ec20 <__assert_fail@plt+0xc064>
   1ec14:	movw	r1, #4600	; 0x11f8
   1ec18:	movt	r1, #4
   1ec1c:	b	1ec28 <__assert_fail@plt+0xc06c>
   1ec20:	movw	r1, #4701	; 0x125d
   1ec24:	movt	r1, #4
   1ec28:	mov	r0, #0
   1ec2c:	mov	r2, #5
   1ec30:	bl	1264c <dcgettext@plt>
   1ec34:	mov	r2, r0
   1ec38:	ldrb	r0, [r6]
   1ec3c:	str	r0, [sp]
   1ec40:	b	1ec88 <__assert_fail@plt+0xc0cc>
   1ec44:	movw	r1, #4728	; 0x1278
   1ec48:	mov	r0, #0
   1ec4c:	mov	r2, #5
   1ec50:	movt	r1, #4
   1ec54:	bl	1264c <dcgettext@plt>
   1ec58:	ldrb	r3, [r6]
   1ec5c:	mov	r2, r0
   1ec60:	mov	r0, #1
   1ec64:	mov	r1, #0
   1ec68:	str	r8, [sp]
   1ec6c:	bl	12790 <error@plt>
   1ec70:	movw	r1, #4781	; 0x12ad
   1ec74:	movt	r1, #4
   1ec78:	mov	r0, #0
   1ec7c:	mov	r2, #5
   1ec80:	bl	1264c <dcgettext@plt>
   1ec84:	mov	r2, r0
   1ec88:	mov	r0, #1
   1ec8c:	mov	r1, #0
   1ec90:	mov	r3, r8
   1ec94:	bl	12790 <error@plt>
   1ec98:	movw	r1, #4549	; 0x11c5
   1ec9c:	movt	r1, #4
   1eca0:	b	1ec78 <__assert_fail@plt+0xc0bc>
   1eca4:	andeq	r0, r0, r0
   1eca8:	bcc	1a50f60 <stdout@@GLIBC_2.4+0x19fc9f4>
   1ecac:			; <UNDEFINED> instruction: 0x378560fd
   1ecb0:	usatcc	r7, #29, lr, asr #16
   1ecb4:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1ecb8:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1ecbc:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1ecc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecc4:	add	fp, sp, #28
   1ecc8:	sub	sp, sp, #20
   1eccc:	movw	r5, #19700	; 0x4cf4
   1ecd0:	str	r1, [sp, #12]
   1ecd4:	str	r0, [sp, #16]
   1ecd8:	ldr	r4, [r0, #12]
   1ecdc:	ldr	r0, [fp, #20]
   1ece0:	ldr	r1, [fp, #12]
   1ece4:	mov	r9, r3
   1ece8:	mov	r7, r2
   1ecec:	movt	r5, #5
   1ecf0:	ldr	r6, [r5]
   1ecf4:	cmp	r6, #0
   1ecf8:	bne	1ed18 <__assert_fail@plt+0xc15c>
   1ecfc:	mov	r8, r0
   1ed00:	add	r0, r4, #1
   1ed04:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1ed08:	ldr	r1, [fp, #12]
   1ed0c:	mov	r6, r0
   1ed10:	mov	r0, r8
   1ed14:	str	r6, [r5]
   1ed18:	sub	sl, r4, #1
   1ed1c:	add	r5, r0, r1
   1ed20:	ldr	r0, [sp, #16]
   1ed24:	ldr	r1, [r0, #24]
   1ed28:	mov	r0, r7
   1ed2c:	bl	236bc <__assert_fail@plt+0x10b00>
   1ed30:	cmp	r0, #0
   1ed34:	mov	r4, r9
   1ed38:	subne	r4, r0, r7
   1ed3c:	cmp	sl, r4
   1ed40:	bls	1edcc <__assert_fail@plt+0xc210>
   1ed44:	mov	r8, r0
   1ed48:	mov	r0, r6
   1ed4c:	mov	r1, r7
   1ed50:	mov	r2, r4
   1ed54:	bl	12928 <strncpy@plt>
   1ed58:	sub	r9, r9, r4
   1ed5c:	add	r7, r7, r4
   1ed60:	add	r6, r6, r4
   1ed64:	sub	sl, sl, r4
   1ed68:	cmp	r8, #0
   1ed6c:	beq	1edbc <__assert_fail@plt+0xc200>
   1ed70:	ldr	r4, [fp, #12]
   1ed74:	ldr	r1, [fp, #8]
   1ed78:	cmp	sl, r5
   1ed7c:	bls	1edcc <__assert_fail@plt+0xc210>
   1ed80:	cmp	r1, #0
   1ed84:	beq	1ed94 <__assert_fail@plt+0xc1d8>
   1ed88:	mov	r0, r6
   1ed8c:	bl	12748 <strcpy@plt>
   1ed90:	add	r6, r6, r4
   1ed94:	ldr	r1, [fp, #16]
   1ed98:	mov	r0, r6
   1ed9c:	sub	sl, sl, r5
   1eda0:	bl	12748 <strcpy@plt>
   1eda4:	ldr	r0, [fp, #20]
   1eda8:	add	r6, r6, r0
   1edac:	ldr	r0, [sp, #16]
   1edb0:	ldr	r0, [r0, #20]
   1edb4:	sub	r9, r9, r0
   1edb8:	add	r7, r7, r0
   1edbc:	ldrb	r0, [r7]
   1edc0:	cmp	r0, #0
   1edc4:	bne	1ed20 <__assert_fail@plt+0xc164>
   1edc8:	b	1edd8 <__assert_fail@plt+0xc21c>
   1edcc:	ldrb	r0, [r7]
   1edd0:	cmp	r0, #0
   1edd4:	bne	1ee14 <__assert_fail@plt+0xc258>
   1edd8:	mov	r0, #0
   1eddc:	movw	r1, #19700	; 0x4cf4
   1ede0:	strb	r0, [r6], #1
   1ede4:	str	r0, [sp]
   1ede8:	str	r0, [sp, #4]
   1edec:	ldr	r0, [fp, #24]
   1edf0:	movt	r1, #5
   1edf4:	ldr	r2, [r1]
   1edf8:	ldr	r1, [sp, #12]
   1edfc:	str	r0, [sp, #8]
   1ee00:	ldr	r0, [sp, #16]
   1ee04:	sub	r3, r6, r2
   1ee08:	bl	1ee38 <__assert_fail@plt+0xc27c>
   1ee0c:	sub	sp, fp, #28
   1ee10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee14:	movw	r1, #6544	; 0x1990
   1ee18:	mov	r0, #0
   1ee1c:	mov	r2, #5
   1ee20:	movt	r1, #4
   1ee24:	bl	1264c <dcgettext@plt>
   1ee28:	mov	r2, r0
   1ee2c:	mov	r0, #1
   1ee30:	mov	r1, #0
   1ee34:	bl	12790 <error@plt>
   1ee38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee3c:	add	fp, sp, #28
   1ee40:	sub	sp, sp, #4
   1ee44:	cmp	r2, #0
   1ee48:	beq	1f058 <__assert_fail@plt+0xc49c>
   1ee4c:	mov	r5, r0
   1ee50:	ldr	r6, [fp, #16]
   1ee54:	ldr	r0, [fp, #12]
   1ee58:	movw	sl, #7383	; 0x1cd7
   1ee5c:	mov	r9, r3
   1ee60:	mov	r8, r2
   1ee64:	mov	r4, r1
   1ee68:	movt	sl, #4
   1ee6c:	cmp	r2, sl
   1ee70:	beq	1ef24 <__assert_fail@plt+0xc368>
   1ee74:	ldr	r1, [r4, #16]
   1ee78:	add	r0, r0, r9
   1ee7c:	add	r0, r0, r1
   1ee80:	ldr	r1, [r5, #12]
   1ee84:	cmp	r0, r1
   1ee88:	bls	1eee0 <__assert_fail@plt+0xc324>
   1ee8c:	cmp	r6, #0
   1ee90:	bne	1f078 <__assert_fail@plt+0xc4bc>
   1ee94:	ldr	r0, [r5, #28]
   1ee98:	ldr	r1, [r4]
   1ee9c:	cmp	r1, r0
   1eea0:	beq	1f078 <__assert_fail@plt+0xc4bc>
   1eea4:	ldr	r0, [r5, #24]
   1eea8:	cmp	r0, #0
   1eeac:	bne	1f084 <__assert_fail@plt+0xc4c8>
   1eeb0:	ldr	r0, [r5]
   1eeb4:	cmp	r0, #0
   1eeb8:	beq	1eed0 <__assert_fail@plt+0xc314>
   1eebc:	ldr	r0, [r5, #36]	; 0x24
   1eec0:	cmp	r0, #0
   1eec4:	ldreq	r0, [r5, #40]	; 0x28
   1eec8:	cmpeq	r0, #0
   1eecc:	bne	1f084 <__assert_fail@plt+0xc4c8>
   1eed0:	mov	r0, r5
   1eed4:	mov	r1, r4
   1eed8:	bl	1f0a8 <__assert_fail@plt+0xc4ec>
   1eedc:	b	1eee8 <__assert_fail@plt+0xc32c>
   1eee0:	cmp	r6, #0
   1eee4:	bne	1ef08 <__assert_fail@plt+0xc34c>
   1eee8:	ldr	r0, [r5, #40]	; 0x28
   1eeec:	cmp	r0, #0
   1eef0:	beq	1ef08 <__assert_fail@plt+0xc34c>
   1eef4:	ldr	r1, [r5, #28]
   1eef8:	ldr	r2, [r4]
   1eefc:	sub	r1, r2, r1
   1ef00:	cmp	r1, r0
   1ef04:	beq	1ef18 <__assert_fail@plt+0xc35c>
   1ef08:	ldr	r0, [r5, #16]
   1ef0c:	ldr	r1, [r4]
   1ef10:	cmp	r1, r0
   1ef14:	bne	1ef24 <__assert_fail@plt+0xc368>
   1ef18:	mov	r0, r5
   1ef1c:	mov	r1, r4
   1ef20:	bl	1f0a8 <__assert_fail@plt+0xc4ec>
   1ef24:	cmp	r6, #0
   1ef28:	moveq	r0, #1
   1ef2c:	streq	r0, [r4, #28]
   1ef30:	ldr	r0, [r4]
   1ef34:	ldr	r1, [r4, #8]
   1ef38:	cmp	r0, r1
   1ef3c:	bcc	1ef74 <__assert_fail@plt+0xc3b8>
   1ef40:	ldr	r0, [r4, #4]
   1ef44:	cmp	r0, #0
   1ef48:	beq	1ef60 <__assert_fail@plt+0xc3a4>
   1ef4c:	lsl	r2, r1, #1
   1ef50:	lsl	r1, r1, #3
   1ef54:	str	r2, [r4, #8]
   1ef58:	bl	2aa28 <__assert_fail@plt+0x17e6c>
   1ef5c:	b	1ef70 <__assert_fail@plt+0xc3b4>
   1ef60:	mov	r0, #64	; 0x40
   1ef64:	str	r0, [r4, #8]
   1ef68:	mov	r0, #256	; 0x100
   1ef6c:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1ef70:	str	r0, [r4, #4]
   1ef74:	cmp	r8, sl
   1ef78:	beq	1f000 <__assert_fail@plt+0xc444>
   1ef7c:	ldm	r4, {r2, r3}
   1ef80:	mov	sl, r6
   1ef84:	ldr	r1, [fp, #8]
   1ef88:	ldr	r6, [r4, #12]
   1ef8c:	ldr	r0, [r4, #16]
   1ef90:	add	r7, r2, #1
   1ef94:	cmp	r1, #0
   1ef98:	str	r7, [r4]
   1ef9c:	add	r7, r6, r0
   1efa0:	str	r7, [r3, r2, lsl #2]
   1efa4:	beq	1efc4 <__assert_fail@plt+0xc408>
   1efa8:	ldr	r2, [r4, #12]
   1efac:	add	r0, r2, r0
   1efb0:	bl	12748 <strcpy@plt>
   1efb4:	ldr	r0, [r4, #16]
   1efb8:	ldr	r1, [fp, #12]
   1efbc:	add	r0, r0, r1
   1efc0:	str	r0, [r4, #16]
   1efc4:	ldr	r1, [r4, #12]
   1efc8:	mov	r6, sl
   1efcc:	add	r0, r1, r0
   1efd0:	mov	r1, r8
   1efd4:	bl	12748 <strcpy@plt>
   1efd8:	ldr	r0, [r4, #16]
   1efdc:	cmp	sl, #0
   1efe0:	add	r0, r0, r9
   1efe4:	str	r0, [r4, #16]
   1efe8:	beq	1f018 <__assert_fail@plt+0xc45c>
   1efec:	ldr	r0, [r5, #16]
   1eff0:	ldr	r1, [r4]
   1eff4:	cmp	r1, r0
   1eff8:	beq	1f038 <__assert_fail@plt+0xc47c>
   1effc:	b	1f044 <__assert_fail@plt+0xc488>
   1f000:	ldm	r4, {r0, r1}
   1f004:	add	r2, r0, #1
   1f008:	str	r2, [r4]
   1f00c:	mov	r2, #0
   1f010:	str	r2, [r1, r0, lsl #2]
   1f014:	b	1f044 <__assert_fail@plt+0xc488>
   1f018:	ldr	r0, [r5, #40]	; 0x28
   1f01c:	cmp	r0, #0
   1f020:	beq	1efec <__assert_fail@plt+0xc430>
   1f024:	ldr	r1, [r5, #28]
   1f028:	ldr	r2, [r4]
   1f02c:	sub	r1, r2, r1
   1f030:	cmp	r1, r0
   1f034:	bne	1efec <__assert_fail@plt+0xc430>
   1f038:	mov	r0, r5
   1f03c:	mov	r1, r4
   1f040:	bl	1f0a8 <__assert_fail@plt+0xc4ec>
   1f044:	cmp	r6, #0
   1f048:	ldrne	r0, [r4, #16]
   1f04c:	strne	r0, [r4, #20]
   1f050:	sub	sp, fp, #28
   1f054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f058:	movw	r0, #6755	; 0x1a63
   1f05c:	movw	r1, #6581	; 0x19b5
   1f060:	movw	r3, #6767	; 0x1a6f
   1f064:	movw	r2, #341	; 0x155
   1f068:	movt	r0, #4
   1f06c:	movt	r1, #4
   1f070:	movt	r3, #4
   1f074:	bl	12bbc <__assert_fail@plt>
   1f078:	movw	r1, #6885	; 0x1ae5
   1f07c:	movt	r1, #4
   1f080:	b	1f08c <__assert_fail@plt+0xc4d0>
   1f084:	movw	r1, #6944	; 0x1b20
   1f088:	movt	r1, #4
   1f08c:	mov	r0, #0
   1f090:	mov	r2, #5
   1f094:	bl	1264c <dcgettext@plt>
   1f098:	mov	r2, r0
   1f09c:	mov	r0, #1
   1f0a0:	mov	r1, #0
   1f0a4:	bl	12790 <error@plt>
   1f0a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0ac:	add	fp, sp, #28
   1f0b0:	sub	sp, sp, #12
   1f0b4:	movw	r2, #7383	; 0x1cd7
   1f0b8:	mov	sl, r0
   1f0bc:	mov	r0, #0
   1f0c0:	mov	r3, #0
   1f0c4:	mov	r8, r1
   1f0c8:	str	r0, [sp]
   1f0cc:	str	r0, [sp, #4]
   1f0d0:	str	r0, [sp, #8]
   1f0d4:	movt	r2, #4
   1f0d8:	mov	r0, sl
   1f0dc:	bl	1ee38 <__assert_fail@plt+0xc27c>
   1f0e0:	ldr	r0, [r8]
   1f0e4:	cmp	r0, #0
   1f0e8:	beq	1f298 <__assert_fail@plt+0xc6dc>
   1f0ec:	ldr	r1, [r8, #4]
   1f0f0:	add	r1, r1, r0, lsl #2
   1f0f4:	ldr	r1, [r1, #-4]
   1f0f8:	cmp	r1, #0
   1f0fc:	bne	1f2b8 <__assert_fail@plt+0xc6fc>
   1f100:	mov	r1, #4
   1f104:	add	r0, r1, r0, lsl #2
   1f108:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1f10c:	ldr	r1, [r8]
   1f110:	mov	r9, r0
   1f114:	ldr	r0, [sl, #28]
   1f118:	mov	r5, #0
   1f11c:	mov	r7, r1
   1f120:	cmp	r0, #0
   1f124:	beq	1f144 <__assert_fail@plt+0xc588>
   1f128:	ldr	r2, [r8, #4]
   1f12c:	mov	r3, r0
   1f130:	mov	r6, r9
   1f134:	ldr	r4, [r2], #4
   1f138:	subs	r3, r3, #1
   1f13c:	str	r4, [r6], #4
   1f140:	bne	1f134 <__assert_fail@plt+0xc578>
   1f144:	cmp	r0, r7
   1f148:	mov	r4, r0
   1f14c:	bcs	1f18c <__assert_fail@plt+0xc5d0>
   1f150:	add	r2, r0, r5
   1f154:	mov	r4, r0
   1f158:	cmp	r2, r1
   1f15c:	bcs	1f18c <__assert_fail@plt+0xc5d0>
   1f160:	ldr	r2, [r8, #4]
   1f164:	mov	r4, r0
   1f168:	add	r2, r2, r5, lsl #2
   1f16c:	ldr	r3, [r2, r4, lsl #2]
   1f170:	str	r3, [r9, r4, lsl #2]
   1f174:	add	r3, r5, r4
   1f178:	add	r4, r4, #1
   1f17c:	add	r3, r3, #1
   1f180:	cmp	r3, r1
   1f184:	cmpcc	r4, r7
   1f188:	bcc	1f16c <__assert_fail@plt+0xc5b0>
   1f18c:	cmp	r4, r0
   1f190:	bcc	1f254 <__assert_fail@plt+0xc698>
   1f194:	mov	r0, #0
   1f198:	mov	r2, r4
   1f19c:	mov	r3, r9
   1f1a0:	str	r0, [r9, r4, lsl #2]
   1f1a4:	mov	r0, sl
   1f1a8:	ldr	r1, [r8, #24]
   1f1ac:	ldr	r6, [sl, #32]
   1f1b0:	blx	r6
   1f1b4:	cmp	r0, #0
   1f1b8:	beq	1f1e4 <__assert_fail@plt+0xc628>
   1f1bc:	mov	r0, sl
   1f1c0:	mov	r1, r8
   1f1c4:	mov	r2, #1
   1f1c8:	mov	r3, r7
   1f1cc:	bl	1f2d8 <__assert_fail@plt+0xc71c>
   1f1d0:	mov	r7, r0
   1f1d4:	ldr	r0, [sl, #28]
   1f1d8:	add	r1, r4, r5
   1f1dc:	sub	r5, r1, r0
   1f1e0:	b	1f210 <__assert_fail@plt+0xc654>
   1f1e4:	ldr	r0, [sl, #28]
   1f1e8:	add	r0, r0, #1
   1f1ec:	cmp	r7, r0
   1f1f0:	bls	1f274 <__assert_fail@plt+0xc6b8>
   1f1f4:	mov	r0, sl
   1f1f8:	mov	r1, r8
   1f1fc:	mov	r2, #0
   1f200:	mov	r3, r7
   1f204:	bl	1f2d8 <__assert_fail@plt+0xc71c>
   1f208:	mov	r7, r0
   1f20c:	ldr	r0, [sl, #28]
   1f210:	ldr	r1, [r8]
   1f214:	add	r3, r5, #1
   1f218:	sub	r2, r1, r0
   1f21c:	cmp	r3, r2
   1f220:	bcc	1f120 <__assert_fail@plt+0xc564>
   1f224:	mov	r0, r9
   1f228:	bl	2c048 <__assert_fail@plt+0x1948c>
   1f22c:	ldr	r0, [sl, #28]
   1f230:	mov	r1, #0
   1f234:	mvn	r2, #0
   1f238:	str	r1, [r8, #28]
   1f23c:	str	r2, [r8, #32]
   1f240:	str	r0, [r8]
   1f244:	ldr	r0, [r8, #20]
   1f248:	str	r0, [r8, #16]
   1f24c:	sub	sp, fp, #28
   1f250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f254:	movw	r0, #7260	; 0x1c5c
   1f258:	movw	r1, #6581	; 0x19b5
   1f25c:	movw	r3, #7289	; 0x1c79
   1f260:	mov	r2, #242	; 0xf2
   1f264:	movt	r0, #4
   1f268:	movt	r1, #4
   1f26c:	movt	r3, #4
   1f270:	bl	12bbc <__assert_fail@plt>
   1f274:	movw	r1, #6703	; 0x1a2f
   1f278:	mov	r0, #0
   1f27c:	mov	r2, #5
   1f280:	movt	r1, #4
   1f284:	bl	1264c <dcgettext@plt>
   1f288:	mov	r2, r0
   1f28c:	mov	r0, #1
   1f290:	mov	r1, #0
   1f294:	bl	12790 <error@plt>
   1f298:	movw	r0, #6561	; 0x19a1
   1f29c:	movw	r1, #6581	; 0x19b5
   1f2a0:	movw	r3, #6592	; 0x19c0
   1f2a4:	movw	r2, #261	; 0x105
   1f2a8:	movt	r0, #4
   1f2ac:	movt	r1, #4
   1f2b0:	movt	r3, #4
   1f2b4:	bl	12bbc <__assert_fail@plt>
   1f2b8:	movw	r0, #6660	; 0x1a04
   1f2bc:	movw	r1, #6581	; 0x19b5
   1f2c0:	movw	r3, #6592	; 0x19c0
   1f2c4:	movw	r2, #262	; 0x106
   1f2c8:	movt	r0, #4
   1f2cc:	movt	r1, #4
   1f2d0:	movt	r3, #4
   1f2d4:	bl	12bbc <__assert_fail@plt>
   1f2d8:	cmp	r2, #0
   1f2dc:	beq	1f2f0 <__assert_fail@plt+0xc734>
   1f2e0:	ldr	ip, [r1, #36]	; 0x24
   1f2e4:	cmp	ip, r3
   1f2e8:	strcc	r3, [r1, #36]	; 0x24
   1f2ec:	b	1f300 <__assert_fail@plt+0xc744>
   1f2f0:	ldr	ip, [r1, #40]	; 0x28
   1f2f4:	sub	ip, ip, #1
   1f2f8:	cmp	ip, r3
   1f2fc:	strcs	r3, [r1, #40]	; 0x28
   1f300:	ldr	ip, [r1, #36]	; 0x24
   1f304:	cmp	ip, #0
   1f308:	ldrne	r1, [r1, #40]	; 0x28
   1f30c:	cmpne	r1, ip
   1f310:	bhi	1f330 <__assert_fail@plt+0xc774>
   1f314:	cmp	r2, #0
   1f318:	beq	1f328 <__assert_fail@plt+0xc76c>
   1f31c:	cmn	r3, #1
   1f320:	addne	r3, r3, #1
   1f324:	b	1f35c <__assert_fail@plt+0xc7a0>
   1f328:	lsr	r3, r3, #1
   1f32c:	b	1f35c <__assert_fail@plt+0xc7a0>
   1f330:	sub	r1, r1, ip
   1f334:	cmp	r2, #0
   1f338:	lsr	r1, r1, #1
   1f33c:	beq	1f350 <__assert_fail@plt+0xc794>
   1f340:	cmp	r1, #0
   1f344:	addeq	r3, r3, #1
   1f348:	addne	r3, r1, r3
   1f34c:	b	1f35c <__assert_fail@plt+0xc7a0>
   1f350:	cmp	r1, #0
   1f354:	subeq	r3, r3, #1
   1f358:	subne	r3, r3, r1
   1f35c:	ldr	r0, [r0, #28]
   1f360:	cmp	r0, #0
   1f364:	beq	1f378 <__assert_fail@plt+0xc7bc>
   1f368:	add	r0, r0, #1
   1f36c:	cmp	r3, r0
   1f370:	movhi	r0, r3
   1f374:	b	1f37c <__assert_fail@plt+0xc7c0>
   1f378:	mov	r0, r3
   1f37c:	cmp	r0, #0
   1f380:	movweq	r0, #1
   1f384:	bx	lr
   1f388:	ldr	r0, [r0, #28]
   1f38c:	mov	r2, #0
   1f390:	mvn	r3, #0
   1f394:	str	r2, [r1, #28]
   1f398:	str	r3, [r1, #32]
   1f39c:	str	r0, [r1]
   1f3a0:	ldr	r0, [r1, #20]
   1f3a4:	str	r0, [r1, #16]
   1f3a8:	bx	lr
   1f3ac:	push	{fp, lr}
   1f3b0:	mov	fp, sp
   1f3b4:	mov	r0, #0
   1f3b8:	bl	12664 <sysconf@plt>
   1f3bc:	cmp	r0, #0
   1f3c0:	mvnle	r0, #-2147483648	; 0x80000000
   1f3c4:	pop	{fp, pc}
   1f3c8:	push	{r4, r5, fp, lr}
   1f3cc:	add	fp, sp, #8
   1f3d0:	movw	r0, #17748	; 0x4554
   1f3d4:	movt	r0, #5
   1f3d8:	ldr	r1, [r0]
   1f3dc:	ldr	r0, [r1]
   1f3e0:	cmp	r0, #0
   1f3e4:	beq	1f40c <__assert_fail@plt+0xc850>
   1f3e8:	add	r5, r1, #4
   1f3ec:	mov	r4, #0
   1f3f0:	bl	1288c <strlen@plt>
   1f3f4:	add	r0, r4, r0
   1f3f8:	add	r4, r0, #1
   1f3fc:	ldr	r0, [r5], #4
   1f400:	cmp	r0, #0
   1f404:	bne	1f3f0 <__assert_fail@plt+0xc834>
   1f408:	b	1f410 <__assert_fail@plt+0xc854>
   1f40c:	mov	r4, #0
   1f410:	mov	r0, r4
   1f414:	pop	{r4, r5, fp, pc}
   1f418:	push	{r4, r5, r6, r7, fp, lr}
   1f41c:	add	fp, sp, #16
   1f420:	mov	r5, r1
   1f424:	mov	r4, r0
   1f428:	bl	1f3c8 <__assert_fail@plt+0xc80c>
   1f42c:	mov	r6, r0
   1f430:	mov	r0, #4096	; 0x1000
   1f434:	mov	r7, #0
   1f438:	str	r0, [r4, #8]
   1f43c:	mov	r0, #0
   1f440:	bl	12664 <sysconf@plt>
   1f444:	mov	r1, r0
   1f448:	cmp	r0, #0
   1f44c:	mov	r0, #1
   1f450:	str	r7, [r4]
   1f454:	mvnle	r1, #-2147483648	; 0x80000000
   1f458:	cmp	r1, r6
   1f45c:	str	r1, [r4, #4]
   1f460:	bcc	1f4bc <__assert_fail@plt+0xc900>
   1f464:	add	r2, r6, r5
   1f468:	mov	r0, #2
   1f46c:	cmp	r2, r1
   1f470:	popcs	{r4, r5, r6, r7, fp, pc}
   1f474:	sub	r0, r1, r6
   1f478:	sub	r1, r0, r5
   1f47c:	mvn	r0, #1
   1f480:	add	r0, r0, r1, lsr #2
   1f484:	str	r1, [r4, #4]
   1f488:	cmp	r0, #0
   1f48c:	str	r0, [r4, #16]
   1f490:	beq	1f4c0 <__assert_fail@plt+0xc904>
   1f494:	movw	r2, #62688	; 0xf4e0
   1f498:	mov	r0, #0
   1f49c:	movt	r2, #1
   1f4a0:	str	r0, [r4, #20]
   1f4a4:	str	r0, [r4, #24]
   1f4a8:	str	r0, [r4, #28]
   1f4ac:	str	r2, [r4, #32]
   1f4b0:	str	r0, [r4, #36]	; 0x24
   1f4b4:	str	r0, [r4, #40]	; 0x28
   1f4b8:	str	r1, [r4, #12]
   1f4bc:	pop	{r4, r5, r6, r7, fp, pc}
   1f4c0:	movw	r0, #6967	; 0x1b37
   1f4c4:	movw	r1, #6581	; 0x19b5
   1f4c8:	movw	r3, #6990	; 0x1b4e
   1f4cc:	movw	r2, #518	; 0x206
   1f4d0:	movt	r0, #4
   1f4d4:	movt	r1, #4
   1f4d8:	movt	r3, #4
   1f4dc:	bl	12bbc <__assert_fail@plt>
   1f4e0:	mov	r0, #0
   1f4e4:	bx	lr
   1f4e8:	ldr	r1, [r0, #4]
   1f4ec:	mov	r2, #0
   1f4f0:	cmp	r2, r1, lsr #17
   1f4f4:	beq	1f504 <__assert_fail@plt+0xc948>
   1f4f8:	ldr	r1, [r0, #8]
   1f4fc:	cmp	r1, #131072	; 0x20000
   1f500:	movls	r1, #131072	; 0x20000
   1f504:	str	r1, [r0, #12]
   1f508:	bx	lr
   1f50c:	push	{r4, r5, r6, sl, fp, lr}
   1f510:	add	fp, sp, #16
   1f514:	mov	r6, #0
   1f518:	mov	r4, r1
   1f51c:	str	r6, [r1, #16]
   1f520:	str	r6, [r1]
   1f524:	str	r6, [r1, #4]
   1f528:	str	r6, [r1, #8]
   1f52c:	str	r6, [r1, #36]	; 0x24
   1f530:	str	r6, [r1, #40]	; 0x28
   1f534:	movw	r1, #63488	; 0xf800
   1f538:	ldr	r0, [r0, #12]
   1f53c:	movt	r1, #32767	; 0x7fff
   1f540:	cmp	r0, r1
   1f544:	bcs	1f574 <__assert_fail@plt+0xc9b8>
   1f548:	add	r0, r0, #1
   1f54c:	mov	r5, r2
   1f550:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   1f554:	mvn	r1, #0
   1f558:	str	r0, [r4, #12]
   1f55c:	str	r6, [r4, #16]
   1f560:	str	r6, [r4, #20]
   1f564:	str	r5, [r4, #24]
   1f568:	str	r6, [r4, #28]
   1f56c:	str	r1, [r4, #32]
   1f570:	pop	{r4, r5, r6, sl, fp, pc}
   1f574:	movw	r0, #7065	; 0x1b99
   1f578:	movw	r1, #6581	; 0x19b5
   1f57c:	movw	r3, #7100	; 0x1bbc
   1f580:	mov	r2, #572	; 0x23c
   1f584:	movt	r0, #4
   1f588:	movt	r1, #4
   1f58c:	movt	r3, #4
   1f590:	bl	12bbc <__assert_fail@plt>
   1f594:	push	{r4, r5, r6, sl, fp, lr}
   1f598:	add	fp, sp, #16
   1f59c:	mov	r1, r0
   1f5a0:	ldr	r0, [r0]
   1f5a4:	cmp	r0, #0
   1f5a8:	beq	1f5d4 <__assert_fail@plt+0xca18>
   1f5ac:	add	r6, r1, #4
   1f5b0:	mov	r5, #0
   1f5b4:	mov	r4, #0
   1f5b8:	bl	1288c <strlen@plt>
   1f5bc:	add	r4, r0, r4
   1f5c0:	ldr	r0, [r6, r5, lsl #2]
   1f5c4:	add	r5, r5, #1
   1f5c8:	cmp	r0, #0
   1f5cc:	bne	1f5b8 <__assert_fail@plt+0xc9fc>
   1f5d0:	b	1f5dc <__assert_fail@plt+0xca20>
   1f5d4:	mov	r4, #0
   1f5d8:	mov	r5, #0
   1f5dc:	movw	r0, #7185	; 0x1c11
   1f5e0:	mov	r1, r5
   1f5e4:	movt	r0, #4
   1f5e8:	bl	1f618 <__assert_fail@plt+0xca5c>
   1f5ec:	mov	r1, r0
   1f5f0:	mov	r0, #1
   1f5f4:	cmp	r1, #0
   1f5f8:	popne	{r4, r5, r6, sl, fp, pc}
   1f5fc:	movw	r0, #7222	; 0x1c36
   1f600:	mov	r1, r4
   1f604:	movt	r0, #4
   1f608:	bl	1f618 <__assert_fail@plt+0xca5c>
   1f60c:	cmp	r0, #0
   1f610:	movwne	r0, #1
   1f614:	pop	{r4, r5, r6, sl, fp, pc}
   1f618:	push	{r4, r5, fp, lr}
   1f61c:	add	fp, sp, #8
   1f620:	sub	sp, sp, #16
   1f624:	mov	r5, r1
   1f628:	mov	r4, r0
   1f62c:	bl	127cc <getenv@plt>
   1f630:	cmp	r0, #0
   1f634:	beq	1f66c <__assert_fail@plt+0xcab0>
   1f638:	mov	r1, #0
   1f63c:	add	r3, sp, #8
   1f640:	mov	r2, #10
   1f644:	str	r1, [sp]
   1f648:	add	r1, sp, #12
   1f64c:	bl	2af0c <__assert_fail@plt+0x18350>
   1f650:	cmp	r0, #0
   1f654:	bne	1f678 <__assert_fail@plt+0xcabc>
   1f658:	ldr	r1, [sp, #8]
   1f65c:	mov	r0, #1
   1f660:	cmp	r1, r5
   1f664:	movcs	r0, #0
   1f668:	b	1f670 <__assert_fail@plt+0xcab4>
   1f66c:	mov	r0, #0
   1f670:	sub	sp, fp, #8
   1f674:	pop	{r4, r5, fp, pc}
   1f678:	bl	128d4 <__errno_location@plt>
   1f67c:	ldr	r5, [r0]
   1f680:	movw	r1, #7395	; 0x1ce3
   1f684:	mov	r0, #0
   1f688:	mov	r2, #5
   1f68c:	movt	r1, #4
   1f690:	bl	1264c <dcgettext@plt>
   1f694:	mov	r2, r0
   1f698:	mov	r0, #1
   1f69c:	mov	r1, r5
   1f6a0:	mov	r3, r4
   1f6a4:	bl	12790 <error@plt>
   1f6a8:	push	{r4, r5, r6, sl, fp, lr}
   1f6ac:	add	fp, sp, #16
   1f6b0:	sub	sp, sp, #8
   1f6b4:	mov	r6, r0
   1f6b8:	mov	r0, sp
   1f6bc:	mov	r5, r2
   1f6c0:	mov	r4, r1
   1f6c4:	bl	29d4c <__assert_fail@plt+0x17190>
   1f6c8:	cmp	r0, #0
   1f6cc:	bne	1f740 <__assert_fail@plt+0xcb84>
   1f6d0:	mov	r0, r6
   1f6d4:	bl	29da0 <__assert_fail@plt+0x171e4>
   1f6d8:	cmp	r0, #0
   1f6dc:	bne	1f734 <__assert_fail@plt+0xcb78>
   1f6e0:	mov	r0, r5
   1f6e4:	blx	r4
   1f6e8:	mov	r4, r0
   1f6ec:	mov	r5, #0
   1f6f0:	cmn	r0, #1
   1f6f4:	bgt	1f700 <__assert_fail@plt+0xcb44>
   1f6f8:	bl	128d4 <__errno_location@plt>
   1f6fc:	ldr	r5, [r0]
   1f700:	mov	r0, sp
   1f704:	bl	29da0 <__assert_fail@plt+0x171e4>
   1f708:	cmp	r0, #0
   1f70c:	bne	1f734 <__assert_fail@plt+0xcb78>
   1f710:	mov	r0, sp
   1f714:	bl	29dbc <__assert_fail@plt+0x17200>
   1f718:	cmp	r5, #0
   1f71c:	beq	1f728 <__assert_fail@plt+0xcb6c>
   1f720:	bl	128d4 <__errno_location@plt>
   1f724:	str	r5, [r0]
   1f728:	mov	r0, r4
   1f72c:	sub	sp, fp, #16
   1f730:	pop	{r4, r5, r6, sl, fp, pc}
   1f734:	bl	128d4 <__errno_location@plt>
   1f738:	ldr	r0, [r0]
   1f73c:	bl	24bc8 <__assert_fail@plt+0x1200c>
   1f740:	bl	128d4 <__errno_location@plt>
   1f744:	ldr	r0, [r0]
   1f748:	bl	24b88 <__assert_fail@plt+0x11fcc>
   1f74c:	push	{r4, r5, r6, sl, fp, lr}
   1f750:	add	fp, sp, #16
   1f754:	sub	sp, sp, #8
   1f758:	mov	r4, r2
   1f75c:	cmn	r0, #100	; 0x64
   1f760:	bne	1f774 <__assert_fail@plt+0xcbb8>
   1f764:	mov	r0, r4
   1f768:	sub	sp, fp, #16
   1f76c:	pop	{r4, r5, r6, sl, fp, lr}
   1f770:	bx	r1
   1f774:	mov	r5, r0
   1f778:	mov	r0, sp
   1f77c:	mov	r6, r1
   1f780:	bl	29d4c <__assert_fail@plt+0x17190>
   1f784:	cmp	r0, #0
   1f788:	bne	1f810 <__assert_fail@plt+0xcc54>
   1f78c:	mov	r0, r5
   1f790:	bl	12aa8 <fchdir@plt>
   1f794:	cmp	r0, #0
   1f798:	beq	1f7bc <__assert_fail@plt+0xcc00>
   1f79c:	bl	128d4 <__errno_location@plt>
   1f7a0:	ldr	r5, [r0]
   1f7a4:	mov	r4, r0
   1f7a8:	mov	r0, sp
   1f7ac:	bl	29dbc <__assert_fail@plt+0x17200>
   1f7b0:	str	r5, [r4]
   1f7b4:	mvn	r4, #0
   1f7b8:	b	1f804 <__assert_fail@plt+0xcc48>
   1f7bc:	mov	r0, r4
   1f7c0:	blx	r6
   1f7c4:	mov	r4, r0
   1f7c8:	mov	r5, #0
   1f7cc:	cmn	r0, #1
   1f7d0:	bgt	1f7dc <__assert_fail@plt+0xcc20>
   1f7d4:	bl	128d4 <__errno_location@plt>
   1f7d8:	ldr	r5, [r0]
   1f7dc:	mov	r0, sp
   1f7e0:	bl	29da0 <__assert_fail@plt+0x171e4>
   1f7e4:	cmp	r0, #0
   1f7e8:	bne	1f81c <__assert_fail@plt+0xcc60>
   1f7ec:	mov	r0, sp
   1f7f0:	bl	29dbc <__assert_fail@plt+0x17200>
   1f7f4:	cmp	r5, #0
   1f7f8:	beq	1f804 <__assert_fail@plt+0xcc48>
   1f7fc:	bl	128d4 <__errno_location@plt>
   1f800:	str	r5, [r0]
   1f804:	mov	r0, r4
   1f808:	sub	sp, fp, #16
   1f80c:	pop	{r4, r5, r6, sl, fp, pc}
   1f810:	bl	128d4 <__errno_location@plt>
   1f814:	ldr	r0, [r0]
   1f818:	bl	24b88 <__assert_fail@plt+0x11fcc>
   1f81c:	bl	128d4 <__errno_location@plt>
   1f820:	ldr	r0, [r0]
   1f824:	bl	24bc8 <__assert_fail@plt+0x1200c>
   1f828:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f82c:	add	fp, sp, #24
   1f830:	mov	r6, r2
   1f834:	mov	r7, r1
   1f838:	mov	r4, r0
   1f83c:	bl	128d4 <__errno_location@plt>
   1f840:	cmp	r7, #0
   1f844:	beq	1f8d8 <__assert_fail@plt+0xcd1c>
   1f848:	mov	r5, r0
   1f84c:	ldr	r8, [r0]
   1f850:	ldr	r0, [r6]
   1f854:	cmp	r0, #0
   1f858:	mov	r1, r0
   1f85c:	movweq	r1, #16
   1f860:	cmp	r1, r7
   1f864:	bcs	1f87c <__assert_fail@plt+0xccc0>
   1f868:	lsl	r2, r1, #1
   1f86c:	cmp	r1, r1, lsl #1
   1f870:	mov	r1, r2
   1f874:	bls	1f860 <__assert_fail@plt+0xcca4>
   1f878:	mov	r1, r7
   1f87c:	cmp	r0, #0
   1f880:	beq	1f8ac <__assert_fail@plt+0xccf0>
   1f884:	cmp	r1, r0
   1f888:	beq	1f8c4 <__assert_fail@plt+0xcd08>
   1f88c:	mov	r0, r4
   1f890:	str	r1, [r6]
   1f894:	bl	2ecdc <__assert_fail@plt+0x1c120>
   1f898:	mov	r4, r0
   1f89c:	cmp	r0, #0
   1f8a0:	bne	1f8cc <__assert_fail@plt+0xcd10>
   1f8a4:	mov	r4, #0
   1f8a8:	b	1f8d0 <__assert_fail@plt+0xcd14>
   1f8ac:	cmp	r4, #0
   1f8b0:	bne	1f8f8 <__assert_fail@plt+0xcd3c>
   1f8b4:	mov	r0, r1
   1f8b8:	str	r1, [r6]
   1f8bc:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   1f8c0:	mov	r4, r0
   1f8c4:	cmp	r4, #0
   1f8c8:	beq	1f8a4 <__assert_fail@plt+0xcce8>
   1f8cc:	str	r8, [r5]
   1f8d0:	mov	r0, r4
   1f8d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f8d8:	movw	r0, #7456	; 0x1d20
   1f8dc:	movw	r1, #7468	; 0x1d2c
   1f8e0:	movw	r3, #7480	; 0x1d38
   1f8e4:	mov	r2, #71	; 0x47
   1f8e8:	movt	r0, #4
   1f8ec:	movt	r1, #4
   1f8f0:	movt	r3, #4
   1f8f4:	bl	12bbc <__assert_fail@plt>
   1f8f8:	movw	r0, #7522	; 0x1d62
   1f8fc:	movw	r1, #7468	; 0x1d2c
   1f900:	movw	r3, #7480	; 0x1d38
   1f904:	mov	r2, #79	; 0x4f
   1f908:	movt	r0, #4
   1f90c:	movt	r1, #4
   1f910:	movt	r3, #4
   1f914:	bl	12bbc <__assert_fail@plt>
   1f918:	push	{r4, sl, fp, lr}
   1f91c:	add	fp, sp, #8
   1f920:	mov	r4, r0
   1f924:	bl	1f828 <__assert_fail@plt+0xcc6c>
   1f928:	cmp	r0, #0
   1f92c:	popne	{r4, sl, fp, pc}
   1f930:	mov	r0, r4
   1f934:	bl	2c048 <__assert_fail@plt+0x1948c>
   1f938:	bl	2ae30 <__assert_fail@plt+0x18274>
   1f93c:	push	{fp, lr}
   1f940:	mov	fp, sp
   1f944:	sub	sp, sp, #16
   1f948:	bl	1f998 <__assert_fail@plt+0xcddc>
   1f94c:	mov	r1, #0
   1f950:	cmn	r0, #-2147483647	; 0x80000001
   1f954:	add	r2, sp, #4
   1f958:	str	r1, [sp, #12]
   1f95c:	str	r1, [sp, #4]
   1f960:	str	r1, [sp, #8]
   1f964:	movw	r1, #64464	; 0xfbd0
   1f968:	addne	r0, r0, #1
   1f96c:	movt	r1, #1
   1f970:	bl	1fae8 <__assert_fail@plt+0xcf2c>
   1f974:	ldmib	sp, {r0, r1}
   1f978:	movw	r2, #19704	; 0x4cf8
   1f97c:	movt	r2, #5
   1f980:	str	r0, [r2]
   1f984:	movw	r0, #19708	; 0x4cfc
   1f988:	movt	r0, #5
   1f98c:	str	r1, [r0]
   1f990:	mov	sp, fp
   1f994:	pop	{fp, pc}
   1f998:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f99c:	add	fp, sp, #24
   1f9a0:	sub	sp, sp, #16
   1f9a4:	movw	r0, #7773	; 0x1e5d
   1f9a8:	movt	r0, #4
   1f9ac:	bl	214ac <__assert_fail@plt+0xe8f0>
   1f9b0:	cmp	r0, #0
   1f9b4:	beq	1fa88 <__assert_fail@plt+0xcecc>
   1f9b8:	mov	r4, r0
   1f9bc:	bl	128d4 <__errno_location@plt>
   1f9c0:	mov	r7, #0
   1f9c4:	mov	r6, r0
   1f9c8:	str	r7, [r0]
   1f9cc:	mov	r0, r4
   1f9d0:	bl	12a6c <readdir64@plt>
   1f9d4:	cmp	r0, #0
   1f9d8:	beq	1fa44 <__assert_fail@plt+0xce88>
   1f9dc:	mov	r8, #0
   1f9e0:	mvn	r5, #0
   1f9e4:	mov	r7, #0
   1f9e8:	mov	r1, r0
   1f9ec:	ldrb	r2, [r1, #19]!
   1f9f0:	cmp	r2, #46	; 0x2e
   1f9f4:	bne	1fa14 <__assert_fail@plt+0xce58>
   1f9f8:	ldrb	r2, [r0, #20]
   1f9fc:	cmp	r2, #0
   1fa00:	beq	1fa2c <__assert_fail@plt+0xce70>
   1fa04:	cmp	r2, #46	; 0x2e
   1fa08:	ldrbeq	r0, [r0, #21]
   1fa0c:	cmpeq	r0, #0
   1fa10:	beq	1fa2c <__assert_fail@plt+0xce70>
   1fa14:	mov	r0, r1
   1fa18:	mov	r1, #0
   1fa1c:	bl	20df8 <__assert_fail@plt+0xe23c>
   1fa20:	cmp	r0, r5
   1fa24:	mov	r7, #1
   1fa28:	movgt	r5, r0
   1fa2c:	mov	r0, r4
   1fa30:	str	r8, [r6]
   1fa34:	bl	12a6c <readdir64@plt>
   1fa38:	cmp	r0, #0
   1fa3c:	bne	1f9e8 <__assert_fail@plt+0xce2c>
   1fa40:	b	1fa48 <__assert_fail@plt+0xce8c>
   1fa44:	mvn	r5, #0
   1fa48:	ldr	r6, [r6]
   1fa4c:	cmp	r6, #0
   1fa50:	beq	1fac4 <__assert_fail@plt+0xcf08>
   1fa54:	movw	r2, #7773	; 0x1e5d
   1fa58:	mov	r0, #0
   1fa5c:	mov	r1, #8
   1fa60:	movt	r2, #4
   1fa64:	bl	29834 <__assert_fail@plt+0x16c78>
   1fa68:	movw	r2, #14847	; 0x39ff
   1fa6c:	mov	r3, r0
   1fa70:	mov	r0, #0
   1fa74:	mov	r1, r6
   1fa78:	movt	r2, #4
   1fa7c:	bl	12790 <error@plt>
   1fa80:	mov	r0, r4
   1fa84:	bl	12b8c <closedir@plt>
   1fa88:	mov	r0, #4
   1fa8c:	bl	12664 <sysconf@plt>
   1fa90:	mov	r5, r0
   1fa94:	mov	r1, sp
   1fa98:	mov	r0, #7
   1fa9c:	bl	12670 <getrlimit64@plt>
   1faa0:	cmn	r5, #1
   1faa4:	movweq	r5, #20
   1faa8:	cmp	r0, #0
   1faac:	bne	1fadc <__assert_fail@plt+0xcf20>
   1fab0:	ldm	sp, {r0, r1}
   1fab4:	and	r1, r0, r1
   1fab8:	cmn	r1, #1
   1fabc:	movne	r5, r0
   1fac0:	b	1fadc <__assert_fail@plt+0xcf20>
   1fac4:	mov	r0, r4
   1fac8:	bl	12b8c <closedir@plt>
   1facc:	cmp	r7, #0
   1fad0:	beq	1fa88 <__assert_fail@plt+0xcecc>
   1fad4:	cmn	r5, #1
   1fad8:	ble	1fa88 <__assert_fail@plt+0xcecc>
   1fadc:	mov	r0, r5
   1fae0:	sub	sp, fp, #24
   1fae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1faec:	add	fp, sp, #28
   1faf0:	sub	sp, sp, #532	; 0x214
   1faf4:	cmp	r0, #1
   1faf8:	str	r2, [sp, #12]
   1fafc:	str	r0, [sp, #8]
   1fb00:	blt	1fbc8 <__assert_fail@plt+0xd00c>
   1fb04:	add	r0, sp, #16
   1fb08:	mov	r5, r1
   1fb0c:	mov	r9, #0
   1fb10:	mov	r8, #5
   1fb14:	add	r1, r0, #6
   1fb18:	add	r0, r0, #4
   1fb1c:	str	r1, [sp]
   1fb20:	str	r0, [sp, #4]
   1fb24:	ldr	r0, [sp, #8]
   1fb28:	sub	sl, r0, r9
   1fb2c:	cmp	sl, #64	; 0x40
   1fb30:	mov	r7, sl
   1fb34:	movge	r7, #64	; 0x40
   1fb38:	cmp	sl, #1
   1fb3c:	blt	1fb60 <__assert_fail@plt+0xcfa4>
   1fb40:	ldr	r1, [sp, #4]
   1fb44:	mov	r0, #0
   1fb48:	add	r2, r9, r0
   1fb4c:	add	r0, r0, #1
   1fb50:	stmda	r1, {r2, r8}
   1fb54:	add	r1, r1, #8
   1fb58:	cmp	r0, r7
   1fb5c:	blt	1fb48 <__assert_fail@plt+0xcf8c>
   1fb60:	add	r0, sp, #16
   1fb64:	mov	r1, r7
   1fb68:	mov	r2, #0
   1fb6c:	bl	126e8 <poll@plt>
   1fb70:	cmn	r0, #1
   1fb74:	beq	1fbc8 <__assert_fail@plt+0xd00c>
   1fb78:	cmp	sl, #1
   1fb7c:	blt	1fbb8 <__assert_fail@plt+0xcffc>
   1fb80:	ldr	r4, [sp]
   1fb84:	mov	r6, #0
   1fb88:	ldrh	r0, [r4]
   1fb8c:	cmp	r0, #32
   1fb90:	beq	1fba8 <__assert_fail@plt+0xcfec>
   1fb94:	ldr	r0, [r4, #-6]
   1fb98:	ldr	r1, [sp, #12]
   1fb9c:	blx	r5
   1fba0:	cmp	r0, #0
   1fba4:	bne	1fbc8 <__assert_fail@plt+0xd00c>
   1fba8:	add	r6, r6, #1
   1fbac:	add	r4, r4, #8
   1fbb0:	cmp	r6, r7
   1fbb4:	blt	1fb88 <__assert_fail@plt+0xcfcc>
   1fbb8:	ldr	r0, [sp, #8]
   1fbbc:	add	r9, r7, r9
   1fbc0:	cmp	r9, r0
   1fbc4:	blt	1fb24 <__assert_fail@plt+0xcf68>
   1fbc8:	sub	sp, fp, #28
   1fbcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbd0:	push	{r4, r5, r6, sl, fp, lr}
   1fbd4:	add	fp, sp, #16
   1fbd8:	mov	r5, r1
   1fbdc:	mov	r1, #1
   1fbe0:	mov	r6, r0
   1fbe4:	bl	2be14 <__assert_fail@plt+0x19258>
   1fbe8:	mov	r4, #0
   1fbec:	tst	r0, #1
   1fbf0:	bne	1fc30 <__assert_fail@plt+0xd074>
   1fbf4:	ldm	r5, {r0, r1}
   1fbf8:	mov	r2, #4
   1fbfc:	add	r1, r2, r1, lsl #2
   1fc00:	add	r2, r5, #8
   1fc04:	bl	1f828 <__assert_fail@plt+0xcc6c>
   1fc08:	cmp	r0, #0
   1fc0c:	beq	1fc2c <__assert_fail@plt+0xd070>
   1fc10:	str	r0, [r5]
   1fc14:	ldr	r1, [r5, #4]
   1fc18:	str	r6, [r0, r1, lsl #2]
   1fc1c:	ldr	r0, [r5, #4]
   1fc20:	add	r0, r0, #1
   1fc24:	str	r0, [r5, #4]
   1fc28:	b	1fc30 <__assert_fail@plt+0xd074>
   1fc2c:	mvn	r4, #0
   1fc30:	mov	r0, r4
   1fc34:	pop	{r4, r5, r6, sl, fp, pc}
   1fc38:	sub	sp, sp, #8
   1fc3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fc40:	add	fp, sp, #24
   1fc44:	sub	sp, sp, #8
   1fc48:	tst	r1, #64	; 0x40
   1fc4c:	movw	r9, #19713	; 0x4d01
   1fc50:	mov	r4, r0
   1fc54:	str	r3, [fp, #12]
   1fc58:	str	r2, [fp, #8]
   1fc5c:	mov	r6, #0
   1fc60:	mov	r5, r1
   1fc64:	addne	r0, fp, #8
   1fc68:	movt	r9, #5
   1fc6c:	orrne	r0, r0, #4
   1fc70:	strne	r0, [sp, #4]
   1fc74:	ldrb	r0, [r9]
   1fc78:	ldrne	r6, [fp, #8]
   1fc7c:	cmp	r0, #0
   1fc80:	bne	1fcd4 <__assert_fail@plt+0xd118>
   1fc84:	movw	r0, #57938	; 0xe252
   1fc88:	mov	r1, #524288	; 0x80000
   1fc8c:	movt	r0, #3
   1fc90:	bl	216d8 <__assert_fail@plt+0xeb1c>
   1fc94:	cmp	r0, #0
   1fc98:	blt	1fcbc <__assert_fail@plt+0xd100>
   1fc9c:	mov	r1, #1
   1fca0:	mov	r7, r0
   1fca4:	bl	2be14 <__assert_fail@plt+0x19258>
   1fca8:	mov	r8, r0
   1fcac:	mov	r0, r7
   1fcb0:	bl	12b74 <close@plt>
   1fcb4:	and	r0, r8, #1
   1fcb8:	b	1fcc0 <__assert_fail@plt+0xd104>
   1fcbc:	mov	r0, #0
   1fcc0:	mov	r1, #1
   1fcc4:	strb	r1, [r9]
   1fcc8:	movw	r1, #19712	; 0x4d00
   1fccc:	movt	r1, #5
   1fcd0:	strb	r0, [r1]
   1fcd4:	orr	r1, r5, #524288	; 0x80000
   1fcd8:	mov	r0, r4
   1fcdc:	mov	r2, r6
   1fce0:	bl	216d8 <__assert_fail@plt+0xeb1c>
   1fce4:	mov	r4, r0
   1fce8:	cmp	r0, #0
   1fcec:	blt	1fd10 <__assert_fail@plt+0xd154>
   1fcf0:	movw	r0, #19712	; 0x4d00
   1fcf4:	movt	r0, #5
   1fcf8:	ldrb	r0, [r0]
   1fcfc:	cmp	r0, #0
   1fd00:	bne	1fd10 <__assert_fail@plt+0xd154>
   1fd04:	mov	r0, r4
   1fd08:	mov	r1, #1
   1fd0c:	bl	21338 <__assert_fail@plt+0xe77c>
   1fd10:	mov	r0, r4
   1fd14:	sub	sp, fp, #24
   1fd18:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fd1c:	add	sp, sp, #8
   1fd20:	bx	lr
   1fd24:	push	{r4, sl, fp, lr}
   1fd28:	add	fp, sp, #8
   1fd2c:	movw	r4, #19704	; 0x4cf8
   1fd30:	movt	r4, #5
   1fd34:	ldr	r0, [r4]
   1fd38:	bl	2c048 <__assert_fail@plt+0x1948c>
   1fd3c:	movw	r0, #19708	; 0x4cfc
   1fd40:	mov	r1, #0
   1fd44:	movt	r0, #5
   1fd48:	str	r1, [r4]
   1fd4c:	str	r1, [r0]
   1fd50:	pop	{r4, sl, fp, pc}
   1fd54:	push	{fp, lr}
   1fd58:	mov	fp, sp
   1fd5c:	movw	r0, #7539	; 0x1d73
   1fd60:	movt	r0, #4
   1fd64:	bl	127cc <getenv@plt>
   1fd68:	cmp	r0, #0
   1fd6c:	movwne	r0, #1
   1fd70:	pop	{fp, pc}
   1fd74:	push	{r4, r5, fp, lr}
   1fd78:	add	fp, sp, #8
   1fd7c:	sub	sp, sp, #16
   1fd80:	movw	r0, #19708	; 0x4cfc
   1fd84:	movt	r0, #5
   1fd88:	ldr	r4, [r0]
   1fd8c:	movw	r0, #19704	; 0x4cf8
   1fd90:	movt	r0, #5
   1fd94:	ldr	r5, [r0]
   1fd98:	bl	1f998 <__assert_fail@plt+0xcddc>
   1fd9c:	mov	r1, #0
   1fda0:	str	r5, [sp]
   1fda4:	str	r4, [sp, #4]
   1fda8:	cmn	r0, #-2147483647	; 0x80000001
   1fdac:	mov	r2, sp
   1fdb0:	str	r1, [sp, #8]
   1fdb4:	mvn	r1, #0
   1fdb8:	addne	r0, r0, #1
   1fdbc:	str	r1, [sp, #12]
   1fdc0:	movw	r1, #65060	; 0xfe24
   1fdc4:	movt	r1, #1
   1fdc8:	bl	1fae8 <__assert_fail@plt+0xcf2c>
   1fdcc:	ldr	r4, [sp, #12]
   1fdd0:	cmp	r4, #0
   1fdd4:	sublt	sp, fp, #8
   1fdd8:	poplt	{r4, r5, fp, pc}
   1fddc:	movw	r1, #7567	; 0x1d8f
   1fde0:	mov	r0, #0
   1fde4:	mov	r2, #5
   1fde8:	movt	r1, #4
   1fdec:	bl	1264c <dcgettext@plt>
   1fdf0:	mov	r2, r0
   1fdf4:	mov	r0, #0
   1fdf8:	mov	r1, #0
   1fdfc:	mov	r3, r4
   1fe00:	bl	12790 <error@plt>
   1fe04:	movw	r0, #7719	; 0x1e27
   1fe08:	movw	r1, #7728	; 0x1e30
   1fe0c:	movw	r3, #7737	; 0x1e39
   1fe10:	mov	r2, #396	; 0x18c
   1fe14:	movt	r0, #4
   1fe18:	movt	r1, #4
   1fe1c:	movt	r3, #4
   1fe20:	bl	12bbc <__assert_fail@plt>
   1fe24:	push	{r4, r5, r6, sl, fp, lr}
   1fe28:	add	fp, sp, #16
   1fe2c:	mov	r6, r1
   1fe30:	mov	r1, #1
   1fe34:	mov	r5, r0
   1fe38:	bl	2be14 <__assert_fail@plt+0x19258>
   1fe3c:	mov	r1, r0
   1fe40:	mov	r0, #0
   1fe44:	tst	r1, #1
   1fe48:	bne	1fe88 <__assert_fail@plt+0xd2cc>
   1fe4c:	ldmib	r6, {r1, r2}
   1fe50:	cmp	r2, r1
   1fe54:	bcs	1fe80 <__assert_fail@plt+0xd2c4>
   1fe58:	ldr	r3, [r6]
   1fe5c:	ldr	r4, [r3, r2, lsl #2]
   1fe60:	cmp	r4, r5
   1fe64:	bge	1fe7c <__assert_fail@plt+0xd2c0>
   1fe68:	add	r2, r2, #1
   1fe6c:	cmp	r2, r1
   1fe70:	str	r2, [r6, #8]
   1fe74:	bcc	1fe5c <__assert_fail@plt+0xd2a0>
   1fe78:	b	1fe80 <__assert_fail@plt+0xd2c4>
   1fe7c:	popeq	{r4, r5, r6, sl, fp, pc}
   1fe80:	mvn	r0, #0
   1fe84:	str	r5, [r6, #12]
   1fe88:	pop	{r4, r5, r6, sl, fp, pc}
   1fe8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fe90:	add	fp, sp, #24
   1fe94:	sub	sp, sp, #16
   1fe98:	mov	r8, r0
   1fe9c:	movw	r0, #17760	; 0x4560
   1fea0:	movt	r0, #5
   1fea4:	ldr	r0, [r0]
   1fea8:	bl	2bfec <__assert_fail@plt+0x19430>
   1feac:	movw	r0, #17772	; 0x456c
   1feb0:	movw	r1, #7815	; 0x1e87
   1feb4:	mov	r2, #5
   1feb8:	mov	r9, #0
   1febc:	movt	r0, #5
   1fec0:	movt	r1, #4
   1fec4:	ldr	r6, [r0]
   1fec8:	movw	r0, #17628	; 0x44dc
   1fecc:	movt	r0, #5
   1fed0:	ldr	r5, [r0]
   1fed4:	mov	r0, #0
   1fed8:	bl	1264c <dcgettext@plt>
   1fedc:	movw	r1, #7830	; 0x1e96
   1fee0:	mov	r7, r0
   1fee4:	mov	r0, #0
   1fee8:	mov	r2, #5
   1feec:	movt	r1, #4
   1fef0:	bl	1264c <dcgettext@plt>
   1fef4:	movw	r1, #7845	; 0x1ea5
   1fef8:	mov	r4, r0
   1fefc:	mov	r0, #0
   1ff00:	mov	r2, #5
   1ff04:	movt	r1, #4
   1ff08:	bl	1264c <dcgettext@plt>
   1ff0c:	movw	r2, #7801	; 0x1e79
   1ff10:	str	r0, [sp, #8]
   1ff14:	mov	r0, r6
   1ff18:	mov	r1, r8
   1ff1c:	mov	r3, r5
   1ff20:	str	r7, [sp]
   1ff24:	str	r4, [sp, #4]
   1ff28:	str	r9, [sp, #12]
   1ff2c:	movt	r2, #4
   1ff30:	bl	2a8f0 <__assert_fail@plt+0x17d34>
   1ff34:	sub	sp, fp, #24
   1ff38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff40:	add	fp, sp, #28
   1ff44:	sub	sp, sp, #948	; 0x3b4
   1ff48:	mov	sl, r0
   1ff4c:	ldr	r0, [r3, #16]
   1ff50:	str	r1, [fp, #-964]	; 0xfffffc3c
   1ff54:	sub	r1, fp, #44	; 0x2c
   1ff58:	mov	r6, r3
   1ff5c:	str	r2, [fp, #-960]	; 0xfffffc40
   1ff60:	bl	21720 <__assert_fail@plt+0xeb64>
   1ff64:	movw	r5, #17632	; 0x44e0
   1ff68:	ldrd	r0, [r6, #96]	; 0x60
   1ff6c:	movt	r5, #5
   1ff70:	ldr	r4, [r5]
   1ff74:	sub	sp, sp, #16
   1ff78:	mov	r3, #1
   1ff7c:	mov	r2, #0
   1ff80:	str	r3, [sp]
   1ff84:	stmib	sp, {r2, r3}
   1ff88:	str	r2, [sp, #12]
   1ff8c:	sub	r2, fp, #696	; 0x2b8
   1ff90:	mov	r3, #0
   1ff94:	bl	22870 <__assert_fail@plt+0xfcb4>
   1ff98:	add	sp, sp, #16
   1ff9c:	ldr	r7, [fp, #20]
   1ffa0:	movw	r1, #7858	; 0x1eb2
   1ffa4:	mov	r3, r0
   1ffa8:	mov	r2, r4
   1ffac:	movt	r1, #4
   1ffb0:	mov	r0, r7
   1ffb4:	bl	128c8 <fprintf@plt>
   1ffb8:	cmp	r0, #0
   1ffbc:	blt	20634 <__assert_fail@plt+0xda78>
   1ffc0:	ldr	r1, [r5]
   1ffc4:	ldr	r8, [fp, #12]
   1ffc8:	str	r6, [fp, #-956]	; 0xfffffc44
   1ffcc:	cmp	r0, r1
   1ffd0:	mov	r1, r7
   1ffd4:	strgt	r0, [r5]
   1ffd8:	mov	r0, #32
   1ffdc:	bl	12a90 <putc@plt>
   1ffe0:	mov	r5, r0
   1ffe4:	ldr	r0, [fp, #-956]	; 0xfffffc44
   1ffe8:	movw	r6, #17636	; 0x44e4
   1ffec:	movt	r6, #5
   1fff0:	ldr	r4, [r6]
   1fff4:	ldrd	r0, [r0, #64]	; 0x40
   1fff8:	sub	sp, sp, #16
   1fffc:	asr	r2, r8, #31
   20000:	mov	r9, #0
   20004:	mov	r3, #512	; 0x200
   20008:	stm	sp, {r3, r9}
   2000c:	str	r2, [sp, #12]
   20010:	sub	r2, fp, #696	; 0x2b8
   20014:	mov	r3, #0
   20018:	str	r8, [sp, #8]
   2001c:	bl	22870 <__assert_fail@plt+0xfcb4>
   20020:	add	sp, sp, #16
   20024:	movw	r1, #7858	; 0x1eb2
   20028:	mov	r3, r0
   2002c:	mov	r0, r7
   20030:	mov	r2, r4
   20034:	movt	r1, #4
   20038:	bl	128c8 <fprintf@plt>
   2003c:	cmn	r5, #1
   20040:	movweq	r9, #150	; 0x96
   20044:	cmp	r0, #0
   20048:	blt	2063c <__assert_fail@plt+0xda80>
   2004c:	ldr	r1, [r6]
   20050:	cmp	r0, r1
   20054:	strgt	r0, [r6]
   20058:	ldr	r6, [fp, #-956]	; 0xfffffc44
   2005c:	cmn	r5, #1
   20060:	beq	20644 <__assert_fail@plt+0xda88>
   20064:	mov	r0, #32
   20068:	mov	r1, r7
   2006c:	bl	12a90 <putc@plt>
   20070:	cmn	r0, #1
   20074:	beq	2064c <__assert_fail@plt+0xda90>
   20078:	sub	r0, fp, #44	; 0x2c
   2007c:	mov	r1, r7
   20080:	bl	12b50 <fputs@plt>
   20084:	cmp	r0, #0
   20088:	movwlt	r9, #275	; 0x113
   2008c:	blt	20654 <__assert_fail@plt+0xda98>
   20090:	movw	r4, #17640	; 0x44e8
   20094:	ldr	r3, [r6, #20]
   20098:	movw	r1, #7862	; 0x1eb6
   2009c:	mov	r0, r7
   200a0:	movt	r4, #5
   200a4:	movt	r1, #4
   200a8:	ldr	r2, [r4]
   200ac:	bl	128c8 <fprintf@plt>
   200b0:	cmp	r0, #0
   200b4:	blt	2065c <__assert_fail@plt+0xdaa0>
   200b8:	ldr	r1, [r4]
   200bc:	cmp	r0, r1
   200c0:	mov	r1, r7
   200c4:	strgt	r0, [r4]
   200c8:	mov	r0, #32
   200cc:	bl	12a90 <putc@plt>
   200d0:	cmn	r0, #1
   200d4:	ldr	r0, [r6, #24]
   200d8:	movweq	r9, #250	; 0xfa
   200dc:	bl	23394 <__assert_fail@plt+0x107d8>
   200e0:	cmp	r0, #0
   200e4:	beq	20130 <__assert_fail@plt+0xd574>
   200e8:	mov	r1, #0
   200ec:	mov	r5, r0
   200f0:	bl	240e8 <__assert_fail@plt+0x1152c>
   200f4:	movw	r1, #17644	; 0x44ec
   200f8:	mov	r3, r5
   200fc:	movt	r1, #5
   20100:	ldr	r2, [r1]
   20104:	cmp	r0, r2
   20108:	strgt	r0, [r1]
   2010c:	movw	r1, #7867	; 0x1ebb
   20110:	movgt	r2, r0
   20114:	mov	r0, r7
   20118:	movt	r1, #4
   2011c:	bl	128c8 <fprintf@plt>
   20120:	cmn	r0, #1
   20124:	bgt	20160 <__assert_fail@plt+0xd5a4>
   20128:	mov	r9, #400	; 0x190
   2012c:	b	20584 <__assert_fail@plt+0xd9c8>
   20130:	ldr	r2, [r6, #24]
   20134:	movw	r1, #7873	; 0x1ec1
   20138:	mov	r0, r7
   2013c:	movt	r1, #4
   20140:	bl	128c8 <fprintf@plt>
   20144:	movw	r1, #17644	; 0x44ec
   20148:	movt	r1, #5
   2014c:	ldr	r2, [r1]
   20150:	cmp	r0, r2
   20154:	strgt	r0, [r1]
   20158:	cmp	r0, #1
   2015c:	blt	2068c <__assert_fail@plt+0xdad0>
   20160:	ldr	r0, [r6, #28]
   20164:	bl	23528 <__assert_fail@plt+0x1096c>
   20168:	cmp	r0, #0
   2016c:	beq	201b8 <__assert_fail@plt+0xd5fc>
   20170:	mov	r1, #0
   20174:	mov	r5, r0
   20178:	bl	240e8 <__assert_fail@plt+0x1152c>
   2017c:	movw	r1, #17648	; 0x44f0
   20180:	mov	r3, r5
   20184:	movt	r1, #5
   20188:	ldr	r2, [r1]
   2018c:	cmp	r0, r2
   20190:	strgt	r0, [r1]
   20194:	movw	r1, #7867	; 0x1ebb
   20198:	movgt	r2, r0
   2019c:	mov	r0, r7
   201a0:	movt	r1, #4
   201a4:	bl	128c8 <fprintf@plt>
   201a8:	cmn	r0, #1
   201ac:	bgt	20200 <__assert_fail@plt+0xd644>
   201b0:	mov	r9, #500	; 0x1f4
   201b4:	b	20584 <__assert_fail@plt+0xd9c8>
   201b8:	movw	r4, #17648	; 0x44f0
   201bc:	ldr	r3, [r6, #28]
   201c0:	movw	r1, #7880	; 0x1ec8
   201c4:	mov	r0, r7
   201c8:	movt	r4, #5
   201cc:	movt	r1, #4
   201d0:	ldr	r2, [r4]
   201d4:	bl	128c8 <fprintf@plt>
   201d8:	ldr	r1, [r4]
   201dc:	cmp	r0, r1
   201e0:	strgt	r0, [r4]
   201e4:	cmp	r0, #0
   201e8:	blt	20694 <__assert_fail@plt+0xdad8>
   201ec:	mov	r0, #32
   201f0:	mov	r1, r7
   201f4:	bl	12a90 <putc@plt>
   201f8:	cmn	r0, #1
   201fc:	beq	2069c <__assert_fail@plt+0xdae0>
   20200:	ldr	r0, [r6, #16]
   20204:	and	r0, r0, #45056	; 0xb000
   20208:	orr	r0, r0, #16384	; 0x4000
   2020c:	cmp	r0, #24576	; 0x6000
   20210:	bne	202b0 <__assert_fail@plt+0xd6f4>
   20214:	mov	r4, r6
   20218:	ldr	r0, [r4, #32]!
   2021c:	ldr	r1, [r4, #4]
   20220:	bl	12478 <gnu_dev_major@plt>
   20224:	movw	r5, #17652	; 0x44f4
   20228:	movw	r1, #7862	; 0x1eb6
   2022c:	mov	r3, r0
   20230:	mov	r0, r7
   20234:	movt	r5, #5
   20238:	movt	r1, #4
   2023c:	ldr	r2, [r5]
   20240:	bl	128c8 <fprintf@plt>
   20244:	cmp	r0, #0
   20248:	blt	20674 <__assert_fail@plt+0xdab8>
   2024c:	ldr	r1, [r5]
   20250:	cmp	r1, r0
   20254:	movw	r1, #63674	; 0xf8ba
   20258:	strlt	r0, [r5]
   2025c:	movt	r1, #3
   20260:	mov	r0, r7
   20264:	bl	128c8 <fprintf@plt>
   20268:	cmp	r0, #0
   2026c:	blt	2067c <__assert_fail@plt+0xdac0>
   20270:	ldrd	r0, [r4]
   20274:	bl	12508 <gnu_dev_minor@plt>
   20278:	movw	r4, #17656	; 0x44f8
   2027c:	movw	r1, #7862	; 0x1eb6
   20280:	mov	r3, r0
   20284:	mov	r0, r7
   20288:	movt	r4, #5
   2028c:	movt	r1, #4
   20290:	ldr	r2, [r4]
   20294:	bl	128c8 <fprintf@plt>
   20298:	cmp	r0, #0
   2029c:	blt	20684 <__assert_fail@plt+0xdac8>
   202a0:	ldr	r1, [r4]
   202a4:	cmp	r1, r0
   202a8:	strlt	r0, [r4]
   202ac:	b	20334 <__assert_fail@plt+0xd778>
   202b0:	movw	r5, #17660	; 0x44fc
   202b4:	mov	r2, r6
   202b8:	mov	r6, r9
   202bc:	mov	r0, #1
   202c0:	cmp	r8, #0
   202c4:	movt	r5, #5
   202c8:	movge	r8, r0
   202cc:	ldr	r4, [r5]
   202d0:	ldr	r3, [r2, #48]	; 0x30
   202d4:	ldr	r9, [r2, #52]	; 0x34
   202d8:	asr	r1, r8, #31
   202dc:	sub	sp, sp, #16
   202e0:	mov	r2, #0
   202e4:	stm	sp, {r0, r2, r8}
   202e8:	str	r1, [sp, #12]
   202ec:	mov	r0, r3
   202f0:	sub	r2, fp, #696	; 0x2b8
   202f4:	mov	r1, r9
   202f8:	mov	r3, #0
   202fc:	bl	22870 <__assert_fail@plt+0xfcb4>
   20300:	add	sp, sp, #16
   20304:	movw	r1, #7858	; 0x1eb2
   20308:	mov	r3, r0
   2030c:	mov	r0, r7
   20310:	mov	r2, r4
   20314:	movt	r1, #4
   20318:	bl	128c8 <fprintf@plt>
   2031c:	cmp	r0, #0
   20320:	blt	206a4 <__assert_fail@plt+0xdae8>
   20324:	ldr	r1, [r5]
   20328:	mov	r9, r6
   2032c:	cmp	r0, r1
   20330:	strgt	r0, [r5]
   20334:	mov	r0, #32
   20338:	mov	r1, r7
   2033c:	bl	12a90 <putc@plt>
   20340:	cmn	r0, #1
   20344:	add	r6, r0, #1
   20348:	movwne	r6, #1
   2034c:	movweq	r9, #850	; 0x352
   20350:	beq	20664 <__assert_fail@plt+0xdaa8>
   20354:	ldr	r0, [fp, #-956]	; 0xfffffc44
   20358:	add	r4, r0, #80	; 0x50
   2035c:	mov	r0, r4
   20360:	bl	12820 <localtime@plt>
   20364:	cmp	r0, #0
   20368:	beq	2039c <__assert_fail@plt+0xd7e0>
   2036c:	mov	r5, r0
   20370:	ldr	r0, [fp, #8]
   20374:	str	sl, [fp, #-968]	; 0xfffffc38
   20378:	str	r9, [fp, #-972]	; 0xfffffc34
   2037c:	sub	r1, r0, #19968	; 0x4e00
   20380:	sub	r2, r1, #15532032	; 0xed0000
   20384:	ldr	r1, [r4]
   20388:	cmp	r2, r1
   2038c:	ble	2040c <__assert_fail@plt+0xd850>
   20390:	movw	r8, #7898	; 0x1eda
   20394:	movt	r8, #4
   20398:	b	20428 <__assert_fail@plt+0xd86c>
   2039c:	ldr	r0, [r4]
   203a0:	sub	sp, sp, #16
   203a4:	cmn	r0, #1
   203a8:	ble	205b4 <__assert_fail@plt+0xd9f8>
   203ac:	mov	r4, #0
   203b0:	mov	r1, #1
   203b4:	sub	r2, fp, #696	; 0x2b8
   203b8:	mov	r3, #0
   203bc:	stm	sp, {r1, r4}
   203c0:	str	r1, [sp, #8]
   203c4:	asr	r1, r0, #31
   203c8:	str	r4, [sp, #12]
   203cc:	bl	22870 <__assert_fail@plt+0xfcb4>
   203d0:	add	sp, sp, #16
   203d4:	movw	r1, #7915	; 0x1eeb
   203d8:	mov	r3, r0
   203dc:	mov	r0, r7
   203e0:	mov	r2, #12
   203e4:	movt	r1, #4
   203e8:	bl	128c8 <fprintf@plt>
   203ec:	cmp	r0, #0
   203f0:	movwlt	r9, #1100	; 0x44c
   203f4:	cmn	r0, #1
   203f8:	movwgt	r4, #1
   203fc:	and	r0, r6, r4
   20400:	cmp	r0, #1
   20404:	beq	204b8 <__assert_fail@plt+0xd8fc>
   20408:	b	20584 <__assert_fail@plt+0xd9c8>
   2040c:	movw	r2, #7898	; 0x1eda
   20410:	movw	r8, #7886	; 0x1ece
   20414:	add	r0, r0, #3600	; 0xe10
   20418:	movt	r2, #4
   2041c:	movt	r8, #4
   20420:	cmp	r1, r0
   20424:	movgt	r8, r2
   20428:	sub	sl, fp, #952	; 0x3b8
   2042c:	mov	r1, #256	; 0x100
   20430:	mov	r2, r8
   20434:	mov	r3, r5
   20438:	mov	r9, #256	; 0x100
   2043c:	mov	r0, sl
   20440:	bl	12808 <strftime@plt>
   20444:	cmp	r0, #0
   20448:	bne	20480 <__assert_fail@plt+0xd8c4>
   2044c:	mov	r4, #7
   20450:	add	r0, r4, r9, lsl #1
   20454:	bic	r0, r0, #7
   20458:	sub	sl, sp, r0
   2045c:	mov	sp, sl
   20460:	lsl	r9, r9, #1
   20464:	mov	r0, sl
   20468:	mov	r2, r8
   2046c:	mov	r3, r5
   20470:	mov	r1, r9
   20474:	bl	12808 <strftime@plt>
   20478:	cmp	r0, #0
   2047c:	beq	20450 <__assert_fail@plt+0xd894>
   20480:	movw	r1, #7911	; 0x1ee7
   20484:	mov	r0, r7
   20488:	mov	r2, sl
   2048c:	movt	r1, #4
   20490:	bl	128c8 <fprintf@plt>
   20494:	ldr	r9, [fp, #-972]	; 0xfffffc34
   20498:	cmp	r0, #0
   2049c:	ldr	sl, [fp, #-968]	; 0xfffffc38
   204a0:	mov	r1, #0
   204a4:	movwlt	r9, #900	; 0x384
   204a8:	cmn	r0, #1
   204ac:	movwgt	r1, #1
   204b0:	tst	r6, r1
   204b4:	beq	20584 <__assert_fail@plt+0xd9c8>
   204b8:	ldr	r5, [fp, #16]
   204bc:	mov	r0, sl
   204c0:	mov	r1, r7
   204c4:	mov	r2, r5
   204c8:	bl	206bc <__assert_fail@plt+0xdb00>
   204cc:	cmp	r0, #0
   204d0:	ldr	r0, [fp, #-956]	; 0xfffffc44
   204d4:	beq	2066c <__assert_fail@plt+0xdab0>
   204d8:	ldr	r0, [r0, #16]
   204dc:	and	r0, r0, #61440	; 0xf000
   204e0:	cmp	r0, #40960	; 0xa000
   204e4:	bne	20568 <__assert_fail@plt+0xd9ac>
   204e8:	ldr	r0, [fp, #-964]	; 0xfffffc3c
   204ec:	ldr	r1, [fp, #-960]	; 0xfffffc40
   204f0:	bl	20ffc <__assert_fail@plt+0xe440>
   204f4:	cmp	r0, #0
   204f8:	beq	20544 <__assert_fail@plt+0xd988>
   204fc:	mov	r6, r0
   20500:	movw	r0, #7920	; 0x1ef0
   20504:	mov	r1, r7
   20508:	movt	r0, #4
   2050c:	bl	12b50 <fputs@plt>
   20510:	cmn	r0, #1
   20514:	ble	206ac <__assert_fail@plt+0xdaf0>
   20518:	mov	r0, r6
   2051c:	mov	r1, r7
   20520:	mov	r2, r5
   20524:	bl	206bc <__assert_fail@plt+0xdb00>
   20528:	mov	r4, r0
   2052c:	mov	r0, r6
   20530:	bl	2c048 <__assert_fail@plt+0x1948c>
   20534:	cmp	r4, #0
   20538:	bne	20568 <__assert_fail@plt+0xd9ac>
   2053c:	movw	r9, #1350	; 0x546
   20540:	b	20584 <__assert_fail@plt+0xd9c8>
   20544:	bl	128d4 <__errno_location@plt>
   20548:	ldr	r1, [r0]
   2054c:	movw	r2, #14847	; 0x39ff
   20550:	mov	r0, #0
   20554:	mov	r3, sl
   20558:	movt	r2, #4
   2055c:	bl	12790 <error@plt>
   20560:	mov	r0, #0
   20564:	bl	2c048 <__assert_fail@plt+0x1948c>
   20568:	mov	r0, #10
   2056c:	mov	r1, r7
   20570:	bl	12a90 <putc@plt>
   20574:	cmn	r0, #1
   20578:	subne	sp, fp, #28
   2057c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20580:	movw	r9, #1400	; 0x578
   20584:	bl	128d4 <__errno_location@plt>
   20588:	ldr	r4, [r0]
   2058c:	movw	r1, #7925	; 0x1ef5
   20590:	mov	r0, #0
   20594:	mov	r2, #5
   20598:	movt	r1, #4
   2059c:	bl	1264c <dcgettext@plt>
   205a0:	mov	r2, r0
   205a4:	mov	r0, #1
   205a8:	mov	r1, r4
   205ac:	mov	r3, r9
   205b0:	bl	12790 <error@plt>
   205b4:	mov	r5, #0
   205b8:	mov	r1, #1
   205bc:	rsbs	r3, r0, #0
   205c0:	sub	r2, fp, #696	; 0x2b8
   205c4:	stm	sp, {r1, r5}
   205c8:	str	r1, [sp, #8]
   205cc:	sbc	r1, r5, r0, asr #31
   205d0:	mov	r0, r3
   205d4:	mov	r3, #0
   205d8:	str	r5, [sp, #12]
   205dc:	bl	22870 <__assert_fail@plt+0xfcb4>
   205e0:	add	sp, sp, #16
   205e4:	mov	r4, r0
   205e8:	bl	1288c <strlen@plt>
   205ec:	sub	sp, sp, #8
   205f0:	movw	r1, #7908	; 0x1ee4
   205f4:	movw	r3, #63418	; 0xf7ba
   205f8:	rsb	r0, r0, #12
   205fc:	str	r4, [sp]
   20600:	bic	r2, r0, r0, asr #31
   20604:	movt	r1, #4
   20608:	movt	r3, #3
   2060c:	mov	r0, r7
   20610:	bl	128c8 <fprintf@plt>
   20614:	add	sp, sp, #8
   20618:	cmp	r0, #0
   2061c:	movwlt	r9, #1000	; 0x3e8
   20620:	cmn	r0, #1
   20624:	movwgt	r5, #1
   20628:	tst	r6, r5
   2062c:	bne	204b8 <__assert_fail@plt+0xd8fc>
   20630:	b	20584 <__assert_fail@plt+0xd9c8>
   20634:	mov	r9, #100	; 0x64
   20638:	b	20584 <__assert_fail@plt+0xd9c8>
   2063c:	mov	r9, #200	; 0xc8
   20640:	b	20584 <__assert_fail@plt+0xd9c8>
   20644:	mov	r9, #150	; 0x96
   20648:	b	20584 <__assert_fail@plt+0xd9c8>
   2064c:	mov	r9, #250	; 0xfa
   20650:	b	20584 <__assert_fail@plt+0xd9c8>
   20654:	movw	r9, #275	; 0x113
   20658:	b	20584 <__assert_fail@plt+0xd9c8>
   2065c:	mov	r9, #300	; 0x12c
   20660:	b	20584 <__assert_fail@plt+0xd9c8>
   20664:	movw	r9, #850	; 0x352
   20668:	b	20584 <__assert_fail@plt+0xd9c8>
   2066c:	mov	r9, #1200	; 0x4b0
   20670:	b	20584 <__assert_fail@plt+0xd9c8>
   20674:	mov	r9, #600	; 0x258
   20678:	b	20584 <__assert_fail@plt+0xd9c8>
   2067c:	movw	r9, #625	; 0x271
   20680:	b	20584 <__assert_fail@plt+0xd9c8>
   20684:	movw	r9, #650	; 0x28a
   20688:	b	20584 <__assert_fail@plt+0xd9c8>
   2068c:	movw	r9, #450	; 0x1c2
   20690:	b	20584 <__assert_fail@plt+0xd9c8>
   20694:	movw	r9, #550	; 0x226
   20698:	b	20584 <__assert_fail@plt+0xd9c8>
   2069c:	movw	r9, #525	; 0x20d
   206a0:	b	20584 <__assert_fail@plt+0xd9c8>
   206a4:	mov	r9, #800	; 0x320
   206a8:	b	20584 <__assert_fail@plt+0xd9c8>
   206ac:	mov	r0, r6
   206b0:	bl	2c048 <__assert_fail@plt+0x1948c>
   206b4:	movw	r9, #1300	; 0x514
   206b8:	b	20584 <__assert_fail@plt+0xd9c8>
   206bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206c0:	add	fp, sp, #28
   206c4:	sub	sp, sp, #4
   206c8:	mov	r5, r1
   206cc:	mov	r4, r0
   206d0:	cmp	r2, #0
   206d4:	beq	20700 <__assert_fail@plt+0xdb44>
   206d8:	movw	r1, #14847	; 0x39ff
   206dc:	mov	r0, r5
   206e0:	mov	r2, r4
   206e4:	movt	r1, #4
   206e8:	bl	128c8 <fprintf@plt>
   206ec:	mov	r1, r0
   206f0:	mov	r0, #0
   206f4:	cmn	r1, #1
   206f8:	movwgt	r0, #1
   206fc:	b	20850 <__assert_fail@plt+0xdc94>
   20700:	movw	r7, #7977	; 0x1f29
   20704:	movw	r6, #7971	; 0x1f23
   20708:	movw	r8, #7980	; 0x1f2c
   2070c:	movw	r9, #7983	; 0x1f2f
   20710:	movw	sl, #7962	; 0x1f1a
   20714:	movt	r7, #4
   20718:	movt	r6, #4
   2071c:	movt	r8, #4
   20720:	movt	r9, #4
   20724:	movt	sl, #4
   20728:	ldrb	r2, [r4], #1
   2072c:	cmp	r2, #31
   20730:	bgt	20790 <__assert_fail@plt+0xdbd4>
   20734:	cmp	r2, #13
   20738:	bhi	20810 <__assert_fail@plt+0xdc54>
   2073c:	add	r1, pc, #4
   20740:	mov	r0, #1
   20744:	ldr	pc, [r1, r2, lsl #2]
   20748:	andeq	r0, r2, r0, asr r8
   2074c:	andeq	r0, r2, r0, lsl r8
   20750:	andeq	r0, r2, r0, lsl r8
   20754:	andeq	r0, r2, r0, lsl r8
   20758:	andeq	r0, r2, r0, lsl r8
   2075c:	andeq	r0, r2, r0, lsl r8
   20760:	andeq	r0, r2, r0, lsl r8
   20764:	andeq	r0, r2, r0, lsl r8
   20768:	andeq	r0, r2, r0, lsl #15
   2076c:			; <UNDEFINED> instruction: 0x000207b4
   20770:	andeq	r0, r2, r4, asr #15
   20774:	andeq	r0, r2, r0, lsl r8
   20778:	ldrdeq	r0, [r2], -r4
   2077c:	andeq	r0, r2, r0, ror #15
   20780:	movw	r1, #7968	; 0x1f20
   20784:	mov	r0, r5
   20788:	movt	r1, #4
   2078c:	b	20800 <__assert_fail@plt+0xdc44>
   20790:	cmp	r2, #32
   20794:	beq	207ec <__assert_fail@plt+0xdc30>
   20798:	cmp	r2, #34	; 0x22
   2079c:	beq	207f8 <__assert_fail@plt+0xdc3c>
   207a0:	cmp	r2, #92	; 0x5c
   207a4:	bne	20810 <__assert_fail@plt+0xdc54>
   207a8:	mov	r0, r5
   207ac:	mov	r1, sl
   207b0:	b	20800 <__assert_fail@plt+0xdc44>
   207b4:	movw	r1, #7974	; 0x1f26
   207b8:	mov	r0, r5
   207bc:	movt	r1, #4
   207c0:	b	20800 <__assert_fail@plt+0xdc44>
   207c4:	movw	r1, #7965	; 0x1f1d
   207c8:	mov	r0, r5
   207cc:	movt	r1, #4
   207d0:	b	20800 <__assert_fail@plt+0xdc44>
   207d4:	mov	r0, r5
   207d8:	mov	r1, r7
   207dc:	b	20800 <__assert_fail@plt+0xdc44>
   207e0:	mov	r0, r5
   207e4:	mov	r1, r6
   207e8:	b	20800 <__assert_fail@plt+0xdc44>
   207ec:	mov	r0, r5
   207f0:	mov	r1, r8
   207f4:	b	20800 <__assert_fail@plt+0xdc44>
   207f8:	mov	r0, r5
   207fc:	mov	r1, r9
   20800:	bl	128c8 <fprintf@plt>
   20804:	cmn	r0, #1
   20808:	bgt	20728 <__assert_fail@plt+0xdb6c>
   2080c:	b	2084c <__assert_fail@plt+0xdc90>
   20810:	sub	r0, r2, #33	; 0x21
   20814:	uxtb	r0, r0
   20818:	cmp	r0, #93	; 0x5d
   2081c:	bhi	20838 <__assert_fail@plt+0xdc7c>
   20820:	mov	r0, r2
   20824:	mov	r1, r5
   20828:	bl	12a90 <putc@plt>
   2082c:	cmn	r0, #1
   20830:	bne	20728 <__assert_fail@plt+0xdb6c>
   20834:	b	2084c <__assert_fail@plt+0xdc90>
   20838:	movw	r1, #7986	; 0x1f32
   2083c:	mov	r0, r5
   20840:	movt	r1, #4
   20844:	bl	128c8 <fprintf@plt>
   20848:	b	20804 <__assert_fail@plt+0xdc48>
   2084c:	mov	r0, #0
   20850:	sub	sp, fp, #28
   20854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2085c:	add	fp, sp, #28
   20860:	sub	sp, sp, #12
   20864:	sub	sp, sp, #8192	; 0x2000
   20868:	ldr	r7, [fp, #8]
   2086c:	mov	r9, r3
   20870:	mov	sl, r0
   20874:	cmp	r2, #0
   20878:	beq	20918 <__assert_fail@plt+0xdd5c>
   2087c:	add	r4, sp, #8
   20880:	mov	r8, r1
   20884:	str	r1, [sp]
   20888:	mov	r1, #8192	; 0x2000
   2088c:	mov	r2, r7
   20890:	mvn	r3, #0
   20894:	mov	r0, r4
   20898:	bl	283cc <__assert_fail@plt+0x15810>
   2089c:	mov	r5, r0
   208a0:	cmp	r0, #8192	; 0x2000
   208a4:	mov	r6, r4
   208a8:	bcc	208d4 <__assert_fail@plt+0xdd18>
   208ac:	add	r4, r5, #1
   208b0:	mov	r0, r4
   208b4:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   208b8:	mov	r1, r4
   208bc:	mov	r2, r7
   208c0:	mvn	r3, #0
   208c4:	mov	r6, r0
   208c8:	str	r8, [sp]
   208cc:	add	r4, sp, #8
   208d0:	bl	283cc <__assert_fail@plt+0x15810>
   208d4:	mov	r0, r6
   208d8:	mov	r1, r5
   208dc:	bl	20930 <__assert_fail@plt+0xdd74>
   208e0:	mov	r1, #0
   208e4:	mov	r2, r6
   208e8:	strb	r1, [r6, r0]
   208ec:	mov	r0, sl
   208f0:	mov	r1, r9
   208f4:	bl	128c8 <fprintf@plt>
   208f8:	mov	r5, r0
   208fc:	cmp	r6, r4
   20900:	beq	2090c <__assert_fail@plt+0xdd50>
   20904:	mov	r0, r6
   20908:	bl	2c048 <__assert_fail@plt+0x1948c>
   2090c:	mov	r0, r5
   20910:	sub	sp, fp, #28
   20914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20918:	mov	r0, sl
   2091c:	mov	r1, r9
   20920:	mov	r2, r7
   20924:	sub	sp, fp, #28
   20928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2092c:	b	128c8 <fprintf@plt>
   20930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20934:	add	fp, sp, #28
   20938:	sub	sp, sp, #20
   2093c:	mov	r5, r1
   20940:	mov	r4, r0
   20944:	add	sl, r0, r1
   20948:	bl	12730 <__ctype_get_mb_cur_max@plt>
   2094c:	cmp	r0, #2
   20950:	bcs	2098c <__assert_fail@plt+0xddd0>
   20954:	cmp	r5, #1
   20958:	blt	20c08 <__assert_fail@plt+0xe04c>
   2095c:	bl	12844 <__ctype_b_loc@plt>
   20960:	mov	r1, #63	; 0x3f
   20964:	ldrb	r2, [r4]
   20968:	ldr	r3, [r0]
   2096c:	add	r2, r3, r2, lsl #1
   20970:	ldrb	r2, [r2, #1]
   20974:	tst	r2, #64	; 0x40
   20978:	strbeq	r1, [r4]
   2097c:	add	r4, r4, #1
   20980:	cmp	r4, sl
   20984:	bcc	20964 <__assert_fail@plt+0xdda8>
   20988:	b	20c08 <__assert_fail@plt+0xe04c>
   2098c:	cmp	r5, #1
   20990:	mov	r6, r4
   20994:	blt	20c04 <__assert_fail@plt+0xe048>
   20998:	mov	r3, #0
   2099c:	add	r8, sp, #4
   209a0:	add	r9, sp, #8
   209a4:	mov	r6, r4
   209a8:	mov	r7, r4
   209ac:	b	20a60 <__assert_fail@plt+0xdea4>
   209b0:	str	r3, [sp, #12]
   209b4:	str	r3, [sp, #8]
   209b8:	sub	r2, sl, r7
   209bc:	mov	r0, r8
   209c0:	mov	r1, r7
   209c4:	mov	r3, r9
   209c8:	bl	2e214 <__assert_fail@plt+0x1b658>
   209cc:	cmp	r0, #0
   209d0:	beq	209ec <__assert_fail@plt+0xde30>
   209d4:	mov	r5, r0
   209d8:	cmn	r0, #2
   209dc:	beq	20a44 <__assert_fail@plt+0xde88>
   209e0:	cmn	r5, #1
   209e4:	bne	209f0 <__assert_fail@plt+0xde34>
   209e8:	b	20a4c <__assert_fail@plt+0xde90>
   209ec:	mov	r5, #1
   209f0:	ldr	r0, [sp, #4]
   209f4:	bl	12544 <wcwidth@plt>
   209f8:	cmp	r0, #0
   209fc:	blt	20a24 <__assert_fail@plt+0xde68>
   20a00:	mov	r0, r5
   20a04:	mov	r1, r6
   20a08:	mov	r2, r7
   20a0c:	ldrb	r3, [r2], #1
   20a10:	subs	r0, r0, #1
   20a14:	strb	r3, [r1], #1
   20a18:	bne	20a0c <__assert_fail@plt+0xde50>
   20a1c:	add	r6, r6, r5
   20a20:	b	20a2c <__assert_fail@plt+0xde70>
   20a24:	mov	r0, #63	; 0x3f
   20a28:	strb	r0, [r6], #1
   20a2c:	mov	r0, r9
   20a30:	add	r7, r7, r5
   20a34:	bl	12604 <mbsinit@plt>
   20a38:	cmp	r0, #0
   20a3c:	beq	209b8 <__assert_fail@plt+0xddfc>
   20a40:	b	20a58 <__assert_fail@plt+0xde9c>
   20a44:	mov	r7, sl
   20a48:	b	20a50 <__assert_fail@plt+0xde94>
   20a4c:	add	r7, r7, #1
   20a50:	mov	r0, #63	; 0x3f
   20a54:	strb	r0, [r6], #1
   20a58:	mov	r3, #0
   20a5c:	b	20bfc <__assert_fail@plt+0xe040>
   20a60:	ldrb	r0, [r7]
   20a64:	sub	r1, r0, #32
   20a68:	cmp	r1, #94	; 0x5e
   20a6c:	bhi	209b0 <__assert_fail@plt+0xddf4>
   20a70:	add	r2, pc, #0
   20a74:	ldr	pc, [r2, r1, lsl #2]
   20a78:	strdeq	r0, [r2], -r4
   20a7c:	strdeq	r0, [r2], -r4
   20a80:	strdeq	r0, [r2], -r4
   20a84:	strdeq	r0, [r2], -r4
   20a88:			; <UNDEFINED> instruction: 0x000209b0
   20a8c:	strdeq	r0, [r2], -r4
   20a90:	strdeq	r0, [r2], -r4
   20a94:	strdeq	r0, [r2], -r4
   20a98:	strdeq	r0, [r2], -r4
   20a9c:	strdeq	r0, [r2], -r4
   20aa0:	strdeq	r0, [r2], -r4
   20aa4:	strdeq	r0, [r2], -r4
   20aa8:	strdeq	r0, [r2], -r4
   20aac:	strdeq	r0, [r2], -r4
   20ab0:	strdeq	r0, [r2], -r4
   20ab4:	strdeq	r0, [r2], -r4
   20ab8:	strdeq	r0, [r2], -r4
   20abc:	strdeq	r0, [r2], -r4
   20ac0:	strdeq	r0, [r2], -r4
   20ac4:	strdeq	r0, [r2], -r4
   20ac8:	strdeq	r0, [r2], -r4
   20acc:	strdeq	r0, [r2], -r4
   20ad0:	strdeq	r0, [r2], -r4
   20ad4:	strdeq	r0, [r2], -r4
   20ad8:	strdeq	r0, [r2], -r4
   20adc:	strdeq	r0, [r2], -r4
   20ae0:	strdeq	r0, [r2], -r4
   20ae4:	strdeq	r0, [r2], -r4
   20ae8:	strdeq	r0, [r2], -r4
   20aec:	strdeq	r0, [r2], -r4
   20af0:	strdeq	r0, [r2], -r4
   20af4:	strdeq	r0, [r2], -r4
   20af8:			; <UNDEFINED> instruction: 0x000209b0
   20afc:	strdeq	r0, [r2], -r4
   20b00:	strdeq	r0, [r2], -r4
   20b04:	strdeq	r0, [r2], -r4
   20b08:	strdeq	r0, [r2], -r4
   20b0c:	strdeq	r0, [r2], -r4
   20b10:	strdeq	r0, [r2], -r4
   20b14:	strdeq	r0, [r2], -r4
   20b18:	strdeq	r0, [r2], -r4
   20b1c:	strdeq	r0, [r2], -r4
   20b20:	strdeq	r0, [r2], -r4
   20b24:	strdeq	r0, [r2], -r4
   20b28:	strdeq	r0, [r2], -r4
   20b2c:	strdeq	r0, [r2], -r4
   20b30:	strdeq	r0, [r2], -r4
   20b34:	strdeq	r0, [r2], -r4
   20b38:	strdeq	r0, [r2], -r4
   20b3c:	strdeq	r0, [r2], -r4
   20b40:	strdeq	r0, [r2], -r4
   20b44:	strdeq	r0, [r2], -r4
   20b48:	strdeq	r0, [r2], -r4
   20b4c:	strdeq	r0, [r2], -r4
   20b50:	strdeq	r0, [r2], -r4
   20b54:	strdeq	r0, [r2], -r4
   20b58:	strdeq	r0, [r2], -r4
   20b5c:	strdeq	r0, [r2], -r4
   20b60:	strdeq	r0, [r2], -r4
   20b64:	strdeq	r0, [r2], -r4
   20b68:	strdeq	r0, [r2], -r4
   20b6c:	strdeq	r0, [r2], -r4
   20b70:	strdeq	r0, [r2], -r4
   20b74:	strdeq	r0, [r2], -r4
   20b78:			; <UNDEFINED> instruction: 0x000209b0
   20b7c:	strdeq	r0, [r2], -r4
   20b80:	strdeq	r0, [r2], -r4
   20b84:	strdeq	r0, [r2], -r4
   20b88:	strdeq	r0, [r2], -r4
   20b8c:	strdeq	r0, [r2], -r4
   20b90:	strdeq	r0, [r2], -r4
   20b94:	strdeq	r0, [r2], -r4
   20b98:	strdeq	r0, [r2], -r4
   20b9c:	strdeq	r0, [r2], -r4
   20ba0:	strdeq	r0, [r2], -r4
   20ba4:	strdeq	r0, [r2], -r4
   20ba8:	strdeq	r0, [r2], -r4
   20bac:	strdeq	r0, [r2], -r4
   20bb0:	strdeq	r0, [r2], -r4
   20bb4:	strdeq	r0, [r2], -r4
   20bb8:	strdeq	r0, [r2], -r4
   20bbc:	strdeq	r0, [r2], -r4
   20bc0:	strdeq	r0, [r2], -r4
   20bc4:	strdeq	r0, [r2], -r4
   20bc8:	strdeq	r0, [r2], -r4
   20bcc:	strdeq	r0, [r2], -r4
   20bd0:	strdeq	r0, [r2], -r4
   20bd4:	strdeq	r0, [r2], -r4
   20bd8:	strdeq	r0, [r2], -r4
   20bdc:	strdeq	r0, [r2], -r4
   20be0:	strdeq	r0, [r2], -r4
   20be4:	strdeq	r0, [r2], -r4
   20be8:	strdeq	r0, [r2], -r4
   20bec:	strdeq	r0, [r2], -r4
   20bf0:	strdeq	r0, [r2], -r4
   20bf4:	strb	r0, [r6], #1
   20bf8:	add	r7, r7, #1
   20bfc:	cmp	r7, sl
   20c00:	bcc	20a60 <__assert_fail@plt+0xdea4>
   20c04:	sub	r5, r6, r4
   20c08:	mov	r0, r5
   20c0c:	sub	sp, fp, #28
   20c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c18:	add	fp, sp, #28
   20c1c:	sub	sp, sp, #12
   20c20:	movw	sl, #7992	; 0x1f38
   20c24:	mov	r8, r0
   20c28:	mov	r6, #0
   20c2c:	mov	r7, #0
   20c30:	movt	sl, #4
   20c34:	add	r4, sl, #8
   20c38:	ldr	r5, [r4, #-8]
   20c3c:	mov	r1, r8
   20c40:	mov	r0, r5
   20c44:	bl	124cc <strcmp@plt>
   20c48:	cmp	r0, #0
   20c4c:	beq	20d10 <__assert_fail@plt+0xe154>
   20c50:	mov	r0, r5
   20c54:	bl	29c14 <__assert_fail@plt+0x17058>
   20c58:	bl	1288c <strlen@plt>
   20c5c:	add	r0, r7, r0
   20c60:	add	r6, r6, #1
   20c64:	add	r4, r4, #12
   20c68:	add	r7, r0, #2
   20c6c:	cmp	r6, #13
   20c70:	bcc	20c38 <__assert_fail@plt+0xe07c>
   20c74:	add	r0, r7, #1
   20c78:	str	r8, [sp, #8]
   20c7c:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   20c80:	mov	r6, r0
   20c84:	mov	r4, #0
   20c88:	movw	r8, #8236	; 0x202c
   20c8c:	mov	r9, #0
   20c90:	str	r0, [sp, #4]
   20c94:	ldr	r0, [sl, -r9]
   20c98:	cmp	r9, #0
   20c9c:	strhne	r8, [r6]
   20ca0:	strbne	r4, [r6, #2]!
   20ca4:	bl	29c14 <__assert_fail@plt+0x17058>
   20ca8:	mov	r7, r0
   20cac:	bl	1288c <strlen@plt>
   20cb0:	mov	r5, r0
   20cb4:	add	r2, r0, #1
   20cb8:	mov	r0, r6
   20cbc:	mov	r1, r7
   20cc0:	bl	125c8 <memcpy@plt>
   20cc4:	sub	r9, r9, #12
   20cc8:	add	r6, r6, r5
   20ccc:	cmn	r9, #156	; 0x9c
   20cd0:	bne	20c94 <__assert_fail@plt+0xe0d8>
   20cd4:	movw	r1, #8148	; 0x1fd4
   20cd8:	mov	r0, #0
   20cdc:	mov	r2, #5
   20ce0:	movt	r1, #4
   20ce4:	bl	1264c <dcgettext@plt>
   20ce8:	mov	r5, r0
   20cec:	ldr	r0, [sp, #8]
   20cf0:	bl	29c14 <__assert_fail@plt+0x17058>
   20cf4:	mov	r3, r0
   20cf8:	ldr	r0, [sp, #4]
   20cfc:	mov	r1, #0
   20d00:	mov	r2, r5
   20d04:	str	r0, [sp]
   20d08:	mov	r0, #1
   20d0c:	bl	12790 <error@plt>
   20d10:	ldr	r0, [r4]
   20d14:	sub	sp, fp, #28
   20d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d1c:	mov	r1, r0
   20d20:	mov	r0, #0
   20d24:	cmp	r1, #12
   20d28:	addls	r0, r1, r1, lsl #1
   20d2c:	movwls	r1, #7992	; 0x1f38
   20d30:	movtls	r1, #4
   20d34:	ldrls	r0, [r1, r0, lsl #2]
   20d38:	bx	lr
   20d3c:	mov	r1, r0
   20d40:	mvn	r0, #0
   20d44:	cmp	r1, #12
   20d48:	bxhi	lr
   20d4c:	add	r0, r1, r1, lsl #1
   20d50:	movw	r1, #7992	; 0x1f38
   20d54:	movt	r1, #4
   20d58:	add	r0, r1, r0, lsl #2
   20d5c:	ldr	r0, [r0, #8]
   20d60:	bx	lr
   20d64:	mov	r1, r0
   20d68:	mov	r0, #0
   20d6c:	cmp	r1, #12
   20d70:	bxhi	lr
   20d74:	add	r0, r1, r1, lsl #1
   20d78:	movw	r1, #7992	; 0x1f38
   20d7c:	movt	r1, #4
   20d80:	add	r0, r1, r0, lsl #2
   20d84:	ldr	r0, [r0, #4]
   20d88:	bx	lr
   20d8c:	push	{r4, sl, fp, lr}
   20d90:	add	fp, sp, #8
   20d94:	mov	lr, r0
   20d98:	mvn	r0, #0
   20d9c:	cmp	lr, #12
   20da0:	bhi	20df4 <__assert_fail@plt+0xe238>
   20da4:	cmp	lr, #0
   20da8:	popeq	{r4, sl, fp, pc}
   20dac:	movw	r3, #7992	; 0x1f38
   20db0:	add	r2, lr, lr, lsl #1
   20db4:	movt	r3, #4
   20db8:	add	r2, r3, r2, lsl #2
   20dbc:	ldr	ip, [r2, #8]
   20dc0:	add	r2, r3, #4
   20dc4:	mov	r3, #0
   20dc8:	ldr	r4, [r2]
   20dcc:	tst	r4, r1
   20dd0:	beq	20de4 <__assert_fail@plt+0xe228>
   20dd4:	ldr	r4, [r2, #4]
   20dd8:	cmp	ip, r4
   20ddc:	moveq	r0, r3
   20de0:	popeq	{r4, sl, fp, pc}
   20de4:	add	r3, r3, #1
   20de8:	add	r2, r2, #12
   20dec:	cmp	r3, lr
   20df0:	bcc	20dc8 <__assert_fail@plt+0xe20c>
   20df4:	pop	{r4, sl, fp, pc}
   20df8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20dfc:	add	fp, sp, #24
   20e00:	sub	sp, sp, #8
   20e04:	mov	r5, r1
   20e08:	mov	r4, r0
   20e0c:	bl	128d4 <__errno_location@plt>
   20e10:	mov	r6, r0
   20e14:	mov	r0, #0
   20e18:	add	r1, sp, #4
   20e1c:	mov	r2, #10
   20e20:	str	r0, [r6]
   20e24:	mov	r0, r4
   20e28:	bl	124d8 <strtol@plt>
   20e2c:	add	r1, r0, #-2147483647	; 0x80000001
   20e30:	cmp	r1, #1
   20e34:	bls	20e94 <__assert_fail@plt+0xe2d8>
   20e38:	ldr	r7, [sp, #4]
   20e3c:	ldrb	r1, [r7]
   20e40:	cmp	r1, #0
   20e44:	bne	20eac <__assert_fail@plt+0xe2f0>
   20e48:	cmp	r7, r4
   20e4c:	subne	sp, fp, #24
   20e50:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   20e54:	ldr	r6, [r6]
   20e58:	movw	r1, #8332	; 0x208c
   20e5c:	mov	r0, #0
   20e60:	mov	r2, #5
   20e64:	movt	r1, #4
   20e68:	bl	1264c <dcgettext@plt>
   20e6c:	mov	r7, r0
   20e70:	mov	r0, #0
   20e74:	mov	r1, r5
   20e78:	mov	r2, r4
   20e7c:	bl	29834 <__assert_fail@plt+0x16c78>
   20e80:	mov	r3, r0
   20e84:	mov	r0, #1
   20e88:	mov	r1, r6
   20e8c:	mov	r2, r7
   20e90:	bl	12790 <error@plt>
   20e94:	ldr	r1, [r6]
   20e98:	movw	r2, #14847	; 0x39ff
   20e9c:	mov	r0, #1
   20ea0:	mov	r3, r4
   20ea4:	movt	r2, #4
   20ea8:	bl	12790 <error@plt>
   20eac:	ldr	r8, [r6]
   20eb0:	movw	r1, #8305	; 0x2071
   20eb4:	mov	r0, #0
   20eb8:	mov	r2, #5
   20ebc:	movt	r1, #4
   20ec0:	bl	1264c <dcgettext@plt>
   20ec4:	mov	r6, r0
   20ec8:	mov	r0, #0
   20ecc:	mov	r1, r5
   20ed0:	mov	r2, r7
   20ed4:	bl	29834 <__assert_fail@plt+0x16c78>
   20ed8:	mov	r7, r0
   20edc:	mov	r0, #1
   20ee0:	mov	r1, r5
   20ee4:	mov	r2, r4
   20ee8:	bl	29834 <__assert_fail@plt+0x16c78>
   20eec:	str	r0, [sp]
   20ef0:	mov	r0, #1
   20ef4:	mov	r1, r8
   20ef8:	mov	r2, r6
   20efc:	mov	r3, r7
   20f00:	bl	12790 <error@plt>
   20f04:	push	{r4, r5, fp, lr}
   20f08:	add	fp, sp, #8
   20f0c:	ldr	r5, [fp, #8]
   20f10:	cmp	r2, #0
   20f14:	beq	20f2c <__assert_fail@plt+0xe370>
   20f18:	mov	r2, #0
   20f1c:	str	r2, [r3]
   20f20:	str	r2, [r5]
   20f24:	ldr	r2, [r3]
   20f28:	b	20f54 <__assert_fail@plt+0xe398>
   20f2c:	ldr	r2, [r5]
   20f30:	ldr	r4, [r3]
   20f34:	add	r2, r4, r2
   20f38:	str	r2, [r3]
   20f3c:	ldrb	r4, [r0, r2]
   20f40:	cmp	r4, #0
   20f44:	moveq	r0, #0
   20f48:	popeq	{r4, r5, fp, pc}
   20f4c:	add	r2, r2, #1
   20f50:	str	r2, [r3]
   20f54:	add	r4, r0, r2
   20f58:	ldrb	r0, [r1]
   20f5c:	cmp	r0, #0
   20f60:	beq	20f7c <__assert_fail@plt+0xe3c0>
   20f64:	mov	r0, r4
   20f68:	bl	12ad8 <strpbrk@plt>
   20f6c:	cmp	r0, #0
   20f70:	beq	20f7c <__assert_fail@plt+0xe3c0>
   20f74:	sub	r0, r0, r4
   20f78:	b	20f84 <__assert_fail@plt+0xe3c8>
   20f7c:	mov	r0, r4
   20f80:	bl	1288c <strlen@plt>
   20f84:	str	r0, [r5]
   20f88:	mov	r0, #1
   20f8c:	pop	{r4, r5, fp, pc}
   20f90:	push	{r4, r5, fp, lr}
   20f94:	add	fp, sp, #8
   20f98:	sub	sp, sp, #16
   20f9c:	mov	r4, r1
   20fa0:	movw	r1, #8356	; 0x20a4
   20fa4:	mov	r5, r0
   20fa8:	mov	r0, #0
   20fac:	mov	r2, #5
   20fb0:	movt	r1, #4
   20fb4:	bl	1264c <dcgettext@plt>
   20fb8:	movw	r2, #8601	; 0x2199
   20fbc:	movw	r3, #7801	; 0x1e79
   20fc0:	mov	r1, r0
   20fc4:	movw	r0, #8648	; 0x21c8
   20fc8:	movt	r2, #4
   20fcc:	movt	r0, #4
   20fd0:	movt	r3, #4
   20fd4:	str	r2, [sp, #4]
   20fd8:	movw	r2, #8562	; 0x2172
   20fdc:	str	r3, [sp]
   20fe0:	str	r0, [sp, #8]
   20fe4:	mov	r0, r5
   20fe8:	mov	r3, r4
   20fec:	movt	r2, #4
   20ff0:	bl	128c8 <fprintf@plt>
   20ff4:	sub	sp, fp, #8
   20ff8:	pop	{r4, r5, fp, pc}
   20ffc:	push	{fp, lr}
   21000:	mov	fp, sp
   21004:	sub	sp, sp, #8
   21008:	movw	r2, #10236	; 0x27fc
   2100c:	mov	r3, #0
   21010:	movt	r2, #1
   21014:	str	r3, [sp]
   21018:	mov	r3, #0
   2101c:	str	r2, [sp, #4]
   21020:	mov	r2, #0
   21024:	bl	21194 <__assert_fail@plt+0xe5d8>
   21028:	mov	sp, fp
   2102c:	pop	{fp, pc}
   21030:	push	{r4, sl, fp, lr}
   21034:	add	fp, sp, #8
   21038:	mov	r4, r0
   2103c:	mov	r0, #24
   21040:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   21044:	cmp	r0, #0
   21048:	movne	r1, #0
   2104c:	strne	r1, [r0]
   21050:	strne	r4, [r0, #16]
   21054:	strne	r4, [r0, #20]
   21058:	popne	{r4, sl, fp, pc}
   2105c:	mov	r0, #0
   21060:	pop	{r4, sl, fp, pc}
   21064:	push	{r4, sl, fp, lr}
   21068:	add	fp, sp, #8
   2106c:	mov	r4, r0
   21070:	mov	r0, #24
   21074:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   21078:	cmp	r0, #0
   2107c:	moveq	r0, #0
   21080:	popeq	{r4, sl, fp, pc}
   21084:	mov	r1, r0
   21088:	vmov.i32	q8, #0	; 0x00000000
   2108c:	str	r4, [r1], #4
   21090:	vst1.32	{d16-d17}, [r1]
   21094:	pop	{r4, sl, fp, pc}
   21098:	push	{r4, r5, r6, sl, fp, lr}
   2109c:	add	fp, sp, #16
   210a0:	ldr	r3, [r0]
   210a4:	mov	r4, r1
   210a8:	mov	r5, r0
   210ac:	cmp	r3, #0
   210b0:	beq	210e8 <__assert_fail@plt+0xe52c>
   210b4:	add	r0, r5, #8
   210b8:	add	r1, r5, #12
   210bc:	mov	r2, #0
   210c0:	mov	r6, #0
   210c4:	bl	12b14 <getdelim@plt>
   210c8:	cmn	r0, #1
   210cc:	ble	21114 <__assert_fail@plt+0xe558>
   210d0:	mov	r0, #1
   210d4:	str	r0, [r4]
   210d8:	ldmib	r5, {r0, r6}
   210dc:	add	r0, r0, #1
   210e0:	str	r0, [r5, #4]
   210e4:	b	2113c <__assert_fail@plt+0xe580>
   210e8:	ldr	r0, [r5, #20]
   210ec:	ldr	r0, [r0]
   210f0:	cmp	r0, #0
   210f4:	beq	21130 <__assert_fail@plt+0xe574>
   210f8:	mov	r0, #1
   210fc:	str	r0, [r4]
   21100:	ldr	r0, [r5, #20]
   21104:	add	r1, r0, #4
   21108:	str	r1, [r5, #20]
   2110c:	ldr	r6, [r0]
   21110:	b	2113c <__assert_fail@plt+0xe580>
   21114:	ldr	r0, [r5]
   21118:	bl	12868 <feof@plt>
   2111c:	mov	r1, #2
   21120:	cmp	r0, #0
   21124:	movweq	r1, #4
   21128:	str	r1, [r4]
   2112c:	b	2113c <__assert_fail@plt+0xe580>
   21130:	mov	r0, #2
   21134:	mov	r6, #0
   21138:	str	r0, [r4]
   2113c:	mov	r0, r6
   21140:	pop	{r4, r5, r6, sl, fp, pc}
   21144:	ldr	r1, [r0]
   21148:	cmp	r1, #0
   2114c:	ldrne	r0, [r0, #4]
   21150:	bxne	lr
   21154:	ldr	r1, [r0, #16]
   21158:	ldr	r0, [r0, #20]
   2115c:	sub	r0, r0, r1
   21160:	asr	r0, r0, #2
   21164:	bx	lr
   21168:	push	{r4, sl, fp, lr}
   2116c:	add	fp, sp, #8
   21170:	mov	r4, r0
   21174:	ldr	r0, [r0]
   21178:	cmp	r0, #0
   2117c:	beq	21188 <__assert_fail@plt+0xe5cc>
   21180:	ldr	r0, [r4, #8]
   21184:	bl	2c048 <__assert_fail@plt+0x1948c>
   21188:	mov	r0, r4
   2118c:	pop	{r4, sl, fp, lr}
   21190:	b	2c048 <__assert_fail@plt+0x1948c>
   21194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21198:	add	fp, sp, #28
   2119c:	sub	sp, sp, #4
   211a0:	sub	sp, sp, #1024	; 0x400
   211a4:	mov	r9, r0
   211a8:	mov	r5, r2
   211ac:	mov	r0, sp
   211b0:	cmp	r2, #0
   211b4:	mov	r4, r3
   211b8:	ldr	sl, [fp, #12]
   211bc:	movw	r7, #14744	; 0x3998
   211c0:	mov	r8, r1
   211c4:	moveq	r5, r0
   211c8:	ldr	r0, [fp, #8]
   211cc:	movweq	r4, #1024	; 0x400
   211d0:	movt	r7, #4
   211d4:	cmn	r4, #-2147483647	; 0x80000001
   211d8:	mov	r6, r5
   211dc:	mvncs	r4, #-2147483648	; 0x80000000
   211e0:	cmp	r0, #0
   211e4:	movne	r7, r0
   211e8:	mov	r0, r9
   211ec:	mov	r1, r8
   211f0:	mov	r2, r6
   211f4:	mov	r3, r4
   211f8:	blx	sl
   211fc:	cmn	r0, #1
   21200:	ble	21268 <__assert_fail@plt+0xe6ac>
   21204:	cmp	r0, r4
   21208:	blt	21294 <__assert_fail@plt+0xe6d8>
   2120c:	cmp	r6, r5
   21210:	beq	21220 <__assert_fail@plt+0xe664>
   21214:	ldr	r1, [r7, #8]
   21218:	mov	r0, r6
   2121c:	blx	r1
   21220:	cmn	r4, #-1073741823	; 0xc0000001
   21224:	bge	212e4 <__assert_fail@plt+0xe728>
   21228:	ldr	r1, [r7]
   2122c:	mov	r0, #1
   21230:	orr	r4, r0, r4, lsl #1
   21234:	mov	r0, r4
   21238:	blx	r1
   2123c:	mov	r6, r0
   21240:	cmp	r0, #0
   21244:	bne	211e8 <__assert_fail@plt+0xe62c>
   21248:	ldr	r1, [r7, #12]
   2124c:	cmp	r1, #0
   21250:	beq	2125c <__assert_fail@plt+0xe6a0>
   21254:	mov	r0, r4
   21258:	blx	r1
   2125c:	bl	128d4 <__errno_location@plt>
   21260:	mov	r1, #12
   21264:	b	212ec <__assert_fail@plt+0xe730>
   21268:	mov	r4, #0
   2126c:	cmp	r6, r5
   21270:	beq	212f4 <__assert_fail@plt+0xe738>
   21274:	bl	128d4 <__errno_location@plt>
   21278:	ldr	r1, [r7, #8]
   2127c:	ldr	r8, [r0]
   21280:	mov	r5, r0
   21284:	mov	r0, r6
   21288:	blx	r1
   2128c:	str	r8, [r5]
   21290:	b	212f4 <__assert_fail@plt+0xe738>
   21294:	mov	r1, #0
   21298:	add	r8, r0, #1
   2129c:	strb	r1, [r6, r0]
   212a0:	mov	r0, sp
   212a4:	cmp	r6, r0
   212a8:	beq	21308 <__assert_fail@plt+0xe74c>
   212ac:	cmp	r6, r5
   212b0:	beq	21300 <__assert_fail@plt+0xe744>
   212b4:	cmp	r8, r4
   212b8:	bge	21300 <__assert_fail@plt+0xe744>
   212bc:	ldr	r2, [r7, #4]
   212c0:	cmp	r2, #0
   212c4:	beq	21300 <__assert_fail@plt+0xe744>
   212c8:	mov	r0, r6
   212cc:	mov	r1, r8
   212d0:	blx	r2
   212d4:	mov	r4, r0
   212d8:	cmp	r0, #0
   212dc:	moveq	r4, r6
   212e0:	b	212f4 <__assert_fail@plt+0xe738>
   212e4:	bl	128d4 <__errno_location@plt>
   212e8:	mov	r1, #36	; 0x24
   212ec:	mov	r4, #0
   212f0:	str	r1, [r0]
   212f4:	mov	r0, r4
   212f8:	sub	sp, fp, #28
   212fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21300:	mov	r4, r6
   21304:	b	212f4 <__assert_fail@plt+0xe738>
   21308:	ldr	r1, [r7]
   2130c:	mov	r0, r8
   21310:	blx	r1
   21314:	cmp	r0, #0
   21318:	beq	21330 <__assert_fail@plt+0xe774>
   2131c:	mov	r1, sp
   21320:	mov	r2, r8
   21324:	mov	r4, r0
   21328:	bl	125c8 <memcpy@plt>
   2132c:	b	212f4 <__assert_fail@plt+0xe738>
   21330:	mov	r4, r8
   21334:	b	21248 <__assert_fail@plt+0xe68c>
   21338:	push	{r4, r5, r6, sl, fp, lr}
   2133c:	add	fp, sp, #16
   21340:	mov	r6, r1
   21344:	mov	r1, #1
   21348:	mov	r2, #0
   2134c:	mov	r4, r0
   21350:	mov	r5, #0
   21354:	bl	2be14 <__assert_fail@plt+0x19258>
   21358:	cmp	r0, #0
   2135c:	blt	2138c <__assert_fail@plt+0xe7d0>
   21360:	bic	r2, r0, #1
   21364:	cmp	r6, #0
   21368:	orrne	r2, r0, #1
   2136c:	cmp	r0, r2
   21370:	beq	21390 <__assert_fail@plt+0xe7d4>
   21374:	mov	r0, r4
   21378:	mov	r1, #2
   2137c:	bl	2be14 <__assert_fail@plt+0x19258>
   21380:	cmn	r0, #1
   21384:	movwne	r0, #0
   21388:	pop	{r4, r5, r6, sl, fp, pc}
   2138c:	mvn	r5, #0
   21390:	mov	r0, r5
   21394:	pop	{r4, r5, r6, sl, fp, pc}
   21398:	movw	r1, #1030	; 0x406
   2139c:	mov	r2, #0
   213a0:	b	2be14 <__assert_fail@plt+0x19258>
   213a4:	movw	r1, #19716	; 0x4d04
   213a8:	movt	r1, #5
   213ac:	str	r0, [r1]
   213b0:	bx	lr
   213b4:	movw	r1, #19720	; 0x4d08
   213b8:	movt	r1, #5
   213bc:	strb	r0, [r1]
   213c0:	bx	lr
   213c4:	push	{r4, r5, r6, sl, fp, lr}
   213c8:	add	fp, sp, #16
   213cc:	sub	sp, sp, #8
   213d0:	movw	r0, #17772	; 0x456c
   213d4:	movt	r0, #5
   213d8:	ldr	r0, [r0]
   213dc:	bl	3c994 <__assert_fail@plt+0x29dd8>
   213e0:	cmp	r0, #0
   213e4:	beq	2140c <__assert_fail@plt+0xe850>
   213e8:	movw	r0, #19720	; 0x4d08
   213ec:	movt	r0, #5
   213f0:	ldrb	r0, [r0]
   213f4:	cmp	r0, #0
   213f8:	beq	2142c <__assert_fail@plt+0xe870>
   213fc:	bl	128d4 <__errno_location@plt>
   21400:	ldr	r0, [r0]
   21404:	cmp	r0, #32
   21408:	bne	2142c <__assert_fail@plt+0xe870>
   2140c:	movw	r0, #17760	; 0x4560
   21410:	movt	r0, #5
   21414:	ldr	r0, [r0]
   21418:	bl	3c994 <__assert_fail@plt+0x29dd8>
   2141c:	cmp	r0, #0
   21420:	subeq	sp, fp, #16
   21424:	popeq	{r4, r5, r6, sl, fp, pc}
   21428:	b	2149c <__assert_fail@plt+0xe8e0>
   2142c:	movw	r1, #8670	; 0x21de
   21430:	mov	r0, #0
   21434:	mov	r2, #5
   21438:	movt	r1, #4
   2143c:	bl	1264c <dcgettext@plt>
   21440:	mov	r4, r0
   21444:	movw	r0, #19716	; 0x4d04
   21448:	movt	r0, #5
   2144c:	ldr	r6, [r0]
   21450:	bl	128d4 <__errno_location@plt>
   21454:	ldr	r5, [r0]
   21458:	cmp	r6, #0
   2145c:	bne	21478 <__assert_fail@plt+0xe8bc>
   21460:	movw	r2, #14847	; 0x39ff
   21464:	mov	r0, #0
   21468:	mov	r1, r5
   2146c:	mov	r3, r4
   21470:	movt	r2, #4
   21474:	b	21498 <__assert_fail@plt+0xe8dc>
   21478:	mov	r0, r6
   2147c:	bl	299d4 <__assert_fail@plt+0x16e18>
   21480:	movw	r2, #8682	; 0x21ea
   21484:	mov	r3, r0
   21488:	str	r4, [sp]
   2148c:	mov	r0, #0
   21490:	mov	r1, r5
   21494:	movt	r2, #4
   21498:	bl	12790 <error@plt>
   2149c:	movw	r0, #17664	; 0x4500
   214a0:	movt	r0, #5
   214a4:	ldr	r0, [r0]
   214a8:	bl	125bc <_exit@plt>
   214ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   214b0:	add	fp, sp, #24
   214b4:	bl	127a8 <opendir@plt>
   214b8:	cmp	r0, #0
   214bc:	beq	21510 <__assert_fail@plt+0xe954>
   214c0:	mov	r4, r0
   214c4:	bl	12a9c <dirfd@plt>
   214c8:	cmp	r0, #2
   214cc:	bhi	21518 <__assert_fail@plt+0xe95c>
   214d0:	movw	r1, #1030	; 0x406
   214d4:	mov	r2, #3
   214d8:	bl	2be14 <__assert_fail@plt+0x19258>
   214dc:	cmn	r0, #1
   214e0:	ble	21520 <__assert_fail@plt+0xe964>
   214e4:	mov	r7, r0
   214e8:	bl	12a78 <fdopendir@plt>
   214ec:	mov	r5, r0
   214f0:	bl	128d4 <__errno_location@plt>
   214f4:	ldr	r8, [r0]
   214f8:	mov	r6, r0
   214fc:	cmp	r5, #0
   21500:	bne	21530 <__assert_fail@plt+0xe974>
   21504:	mov	r0, r7
   21508:	bl	12b74 <close@plt>
   2150c:	b	2152c <__assert_fail@plt+0xe970>
   21510:	mov	r5, #0
   21514:	b	2153c <__assert_fail@plt+0xe980>
   21518:	mov	r5, r4
   2151c:	b	2153c <__assert_fail@plt+0xe980>
   21520:	bl	128d4 <__errno_location@plt>
   21524:	ldr	r8, [r0]
   21528:	mov	r6, r0
   2152c:	mov	r5, #0
   21530:	mov	r0, r4
   21534:	bl	12b8c <closedir@plt>
   21538:	str	r8, [r6]
   2153c:	mov	r0, r5
   21540:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21544:	push	{r4, r5, r6, sl, fp, lr}
   21548:	add	fp, sp, #16
   2154c:	mov	r6, r0
   21550:	bl	3c914 <__assert_fail@plt+0x29d58>
   21554:	mov	r4, r0
   21558:	ldrb	r0, [r0]
   2155c:	cmp	r0, #0
   21560:	beq	21580 <__assert_fail@plt+0xe9c4>
   21564:	mov	r0, r4
   21568:	bl	3c95c <__assert_fail@plt+0x29da0>
   2156c:	mov	r5, r0
   21570:	ldrb	r0, [r4, r0]
   21574:	cmp	r0, #47	; 0x2f
   21578:	addeq	r5, r5, #1
   2157c:	b	21590 <__assert_fail@plt+0xe9d4>
   21580:	mov	r0, r6
   21584:	bl	3c95c <__assert_fail@plt+0x29da0>
   21588:	mov	r5, r0
   2158c:	mov	r4, r6
   21590:	add	r0, r5, #1
   21594:	bl	2a9f8 <__assert_fail@plt+0x17e3c>
   21598:	mov	r1, r4
   2159c:	mov	r2, r5
   215a0:	mov	r6, r0
   215a4:	bl	125c8 <memcpy@plt>
   215a8:	mov	r0, #0
   215ac:	strb	r0, [r6, r5]
   215b0:	mov	r0, r6
   215b4:	pop	{r4, r5, r6, sl, fp, pc}
   215b8:	push	{r4, r5, r6, sl, fp, lr}
   215bc:	add	fp, sp, #16
   215c0:	mov	r5, r0
   215c4:	mov	r4, r0
   215c8:	ldrb	r6, [r5], #-1
   215cc:	bl	3c914 <__assert_fail@plt+0x29d58>
   215d0:	sub	r2, r0, r4
   215d4:	sub	r0, r6, #47	; 0x2f
   215d8:	clz	r0, r0
   215dc:	lsr	r1, r0, #5
   215e0:	mov	r0, r2
   215e4:	cmp	r2, r1
   215e8:	popls	{r4, r5, r6, sl, fp, pc}
   215ec:	ldrb	r3, [r5, r0]
   215f0:	sub	r2, r0, #1
   215f4:	cmp	r3, #47	; 0x2f
   215f8:	beq	215e0 <__assert_fail@plt+0xea24>
   215fc:	pop	{r4, r5, r6, sl, fp, pc}
   21600:	push	{r4, r5, r6, sl, fp, lr}
   21604:	add	fp, sp, #16
   21608:	mov	r6, r0
   2160c:	mov	r4, r0
   21610:	ldrb	r5, [r6], #-1
   21614:	bl	3c914 <__assert_fail@plt+0x29d58>
   21618:	sub	r1, r0, r4
   2161c:	sub	r0, r5, #47	; 0x2f
   21620:	clz	r0, r0
   21624:	lsr	r0, r0, #5
   21628:	mov	r5, r1
   2162c:	cmp	r1, r0
   21630:	bls	21644 <__assert_fail@plt+0xea88>
   21634:	ldrb	r2, [r6, r5]
   21638:	sub	r1, r5, #1
   2163c:	cmp	r2, #47	; 0x2f
   21640:	beq	21628 <__assert_fail@plt+0xea6c>
   21644:	cmp	r5, #0
   21648:	mov	r0, r5
   2164c:	addeq	r0, r0, #1
   21650:	add	r0, r0, #1
   21654:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   21658:	mov	r6, r0
   2165c:	cmp	r0, #0
   21660:	beq	2168c <__assert_fail@plt+0xead0>
   21664:	mov	r0, r6
   21668:	mov	r1, r4
   2166c:	mov	r2, r5
   21670:	bl	125c8 <memcpy@plt>
   21674:	cmp	r5, #0
   21678:	moveq	r0, #46	; 0x2e
   2167c:	moveq	r5, #1
   21680:	strbeq	r0, [r6]
   21684:	mov	r0, #0
   21688:	strb	r0, [r6, r5]
   2168c:	mov	r0, r6
   21690:	pop	{r4, r5, r6, sl, fp, pc}
   21694:	push	{r4, r5, fp, lr}
   21698:	add	fp, sp, #8
   2169c:	mov	r4, r0
   216a0:	bl	3c914 <__assert_fail@plt+0x29d58>
   216a4:	mov	r5, r0
   216a8:	ldrb	r0, [r0]
   216ac:	cmp	r0, #0
   216b0:	moveq	r5, r4
   216b4:	mov	r0, r5
   216b8:	bl	3c95c <__assert_fail@plt+0x29da0>
   216bc:	ldrb	r1, [r5, r0]
   216c0:	mov	r2, #0
   216c4:	strb	r2, [r5, r0]
   216c8:	cmp	r1, #0
   216cc:	movwne	r1, #1
   216d0:	mov	r0, r1
   216d4:	pop	{r4, r5, fp, pc}
   216d8:	sub	sp, sp, #8
   216dc:	push	{fp, lr}
   216e0:	mov	fp, sp
   216e4:	sub	sp, sp, #8
   216e8:	str	r2, [fp, #8]
   216ec:	mov	r2, #0
   216f0:	tst	r1, #64	; 0x40
   216f4:	str	r3, [fp, #12]
   216f8:	addne	r2, fp, #8
   216fc:	orrne	r2, r2, #4
   21700:	strne	r2, [sp, #4]
   21704:	ldrne	r2, [fp, #8]
   21708:	bl	127c0 <open64@plt>
   2170c:	bl	2a500 <__assert_fail@plt+0x17944>
   21710:	mov	sp, fp
   21714:	pop	{fp, lr}
   21718:	add	sp, sp, #8
   2171c:	bx	lr
   21720:	and	r2, r0, #61440	; 0xf000
   21724:	sub	r2, r2, #4096	; 0x1000
   21728:	lsr	r3, r2, #12
   2172c:	cmp	r3, #11
   21730:	bhi	21780 <__assert_fail@plt+0xebc4>
   21734:	add	r2, pc, #4
   21738:	mov	ip, #45	; 0x2d
   2173c:	ldr	pc, [r2, r3, lsl #2]
   21740:	andeq	r1, r2, r0, ror r7
   21744:	andeq	r1, r2, r8, ror r7
   21748:	andeq	r1, r2, r0, lsl #15
   2174c:	andeq	r1, r2, r8, lsl #15
   21750:	andeq	r1, r2, r0, lsl #15
   21754:	andeq	r1, r2, r0, lsr #15
   21758:	andeq	r1, r2, r0, lsl #15
   2175c:	andeq	r1, r2, r4, lsr #15
   21760:	andeq	r1, r2, r0, lsl #15
   21764:	muleq	r2, r0, r7
   21768:	andeq	r1, r2, r0, lsl #15
   2176c:	muleq	r2, r8, r7
   21770:	mov	ip, #112	; 0x70
   21774:	b	217a4 <__assert_fail@plt+0xebe8>
   21778:	mov	ip, #99	; 0x63
   2177c:	b	217a4 <__assert_fail@plt+0xebe8>
   21780:	mov	ip, #63	; 0x3f
   21784:	b	217a4 <__assert_fail@plt+0xebe8>
   21788:	mov	ip, #100	; 0x64
   2178c:	b	217a4 <__assert_fail@plt+0xebe8>
   21790:	mov	ip, #108	; 0x6c
   21794:	b	217a4 <__assert_fail@plt+0xebe8>
   21798:	mov	ip, #115	; 0x73
   2179c:	b	217a4 <__assert_fail@plt+0xebe8>
   217a0:	mov	ip, #98	; 0x62
   217a4:	push	{fp, lr}
   217a8:	mov	fp, sp
   217ac:	mov	r2, #32
   217b0:	tst	r0, #256	; 0x100
   217b4:	mov	r3, #114	; 0x72
   217b8:	strb	ip, [r1]
   217bc:	mov	ip, #114	; 0x72
   217c0:	mov	lr, #45	; 0x2d
   217c4:	strh	r2, [r1, #10]
   217c8:	movweq	r3, #45	; 0x2d
   217cc:	tst	r0, #128	; 0x80
   217d0:	mov	r2, #119	; 0x77
   217d4:	movweq	r2, #45	; 0x2d
   217d8:	strb	r3, [r1, #1]
   217dc:	tst	r0, #32
   217e0:	mov	r3, #119	; 0x77
   217e4:	strb	r2, [r1, #2]
   217e8:	mov	r2, #114	; 0x72
   217ec:	movweq	r2, #45	; 0x2d
   217f0:	tst	r0, #16
   217f4:	strb	r2, [r1, #4]
   217f8:	mov	r2, #119	; 0x77
   217fc:	movweq	r2, #45	; 0x2d
   21800:	tst	r0, #4
   21804:	movweq	ip, #45	; 0x2d
   21808:	tst	r0, #2
   2180c:	strb	r2, [r1, #5]
   21810:	movweq	r3, #45	; 0x2d
   21814:	strb	ip, [r1, #7]
   21818:	ands	r2, r0, #64	; 0x40
   2181c:	mov	ip, #45	; 0x2d
   21820:	strb	r3, [r1, #8]
   21824:	mov	r3, #83	; 0x53
   21828:	movwne	lr, #120	; 0x78
   2182c:	mov	r2, #83	; 0x53
   21830:	movwne	r3, #115	; 0x73
   21834:	tst	r0, #2048	; 0x800
   21838:	moveq	r3, lr
   2183c:	strb	r3, [r1, #3]
   21840:	ands	r3, r0, #8
   21844:	mov	r3, #45	; 0x2d
   21848:	movwne	r2, #115	; 0x73
   2184c:	movwne	r3, #120	; 0x78
   21850:	tst	r0, #1024	; 0x400
   21854:	moveq	r2, r3
   21858:	strb	r2, [r1, #6]
   2185c:	ands	r2, r0, #1
   21860:	mov	r2, #84	; 0x54
   21864:	movwne	ip, #120	; 0x78
   21868:	movwne	r2, #116	; 0x74
   2186c:	tst	r0, #512	; 0x200
   21870:	moveq	r2, ip
   21874:	strb	r2, [r1, #9]
   21878:	pop	{fp, pc}
   2187c:	ldr	r0, [r0, #16]
   21880:	b	21720 <__assert_fail@plt+0xeb64>
   21884:	push	{r4, r5, r6, r7, fp, lr}
   21888:	add	fp, sp, #16
   2188c:	mov	r5, r1
   21890:	bl	12ab4 <fopen64@plt>
   21894:	mov	r4, #0
   21898:	cmp	r0, #0
   2189c:	beq	21928 <__assert_fail@plt+0xed6c>
   218a0:	mov	r6, r0
   218a4:	bl	12958 <fileno@plt>
   218a8:	cmp	r0, #2
   218ac:	bhi	21908 <__assert_fail@plt+0xed4c>
   218b0:	bl	2a4f4 <__assert_fail@plt+0x17938>
   218b4:	cmn	r0, #1
   218b8:	ble	21910 <__assert_fail@plt+0xed54>
   218bc:	mov	r7, r0
   218c0:	mov	r0, r6
   218c4:	bl	129a0 <fclose@plt>
   218c8:	cmp	r0, #0
   218cc:	bne	218e8 <__assert_fail@plt+0xed2c>
   218d0:	mov	r0, r7
   218d4:	mov	r1, r5
   218d8:	bl	1243c <fdopen@plt>
   218dc:	mov	r4, r0
   218e0:	cmp	r0, #0
   218e4:	bne	21928 <__assert_fail@plt+0xed6c>
   218e8:	bl	128d4 <__errno_location@plt>
   218ec:	ldr	r5, [r0]
   218f0:	mov	r4, r0
   218f4:	mov	r0, r7
   218f8:	bl	12b74 <close@plt>
   218fc:	str	r5, [r4]
   21900:	mov	r4, #0
   21904:	b	21928 <__assert_fail@plt+0xed6c>
   21908:	mov	r4, r6
   2190c:	b	21928 <__assert_fail@plt+0xed6c>
   21910:	bl	128d4 <__errno_location@plt>
   21914:	ldr	r7, [r0]
   21918:	mov	r5, r0
   2191c:	mov	r0, r6
   21920:	bl	129a0 <fclose@plt>
   21924:	str	r7, [r5]
   21928:	mov	r0, r4
   2192c:	pop	{r4, r5, r6, r7, fp, pc}
   21930:	ldr	r0, [r0, #8]
   21934:	bx	lr
   21938:	ldr	r0, [r0, #12]
   2193c:	bx	lr
   21940:	ldr	r0, [r0, #16]
   21944:	bx	lr
   21948:	ldm	r0, {r2, ip}
   2194c:	mov	r0, #0
   21950:	cmp	r2, ip
   21954:	bxcs	lr
   21958:	mov	r0, #0
   2195c:	ldr	r1, [r2]
   21960:	cmp	r1, #0
   21964:	beq	21988 <__assert_fail@plt+0xedcc>
   21968:	mov	r3, #0
   2196c:	mov	r1, r2
   21970:	ldr	r1, [r1, #4]
   21974:	add	r3, r3, #1
   21978:	cmp	r1, #0
   2197c:	bne	21970 <__assert_fail@plt+0xedb4>
   21980:	cmp	r3, r0
   21984:	movhi	r0, r3
   21988:	add	r2, r2, #8
   2198c:	cmp	r2, ip
   21990:	bcc	2195c <__assert_fail@plt+0xeda0>
   21994:	bx	lr
   21998:	push	{fp, lr}
   2199c:	mov	fp, sp
   219a0:	ldm	r0, {r3, ip}
   219a4:	mov	lr, #0
   219a8:	mov	r1, #0
   219ac:	cmp	r3, ip
   219b0:	bcs	219ec <__assert_fail@plt+0xee30>
   219b4:	mov	r1, #0
   219b8:	mov	lr, #0
   219bc:	ldr	r2, [r3]
   219c0:	cmp	r2, #0
   219c4:	beq	219e0 <__assert_fail@plt+0xee24>
   219c8:	mov	r2, r3
   219cc:	ldr	r2, [r2, #4]
   219d0:	add	r1, r1, #1
   219d4:	cmp	r2, #0
   219d8:	bne	219cc <__assert_fail@plt+0xee10>
   219dc:	add	lr, lr, #1
   219e0:	add	r3, r3, #8
   219e4:	cmp	r3, ip
   219e8:	bcc	219bc <__assert_fail@plt+0xee00>
   219ec:	ldr	r2, [r0, #12]
   219f0:	cmp	lr, r2
   219f4:	bne	21a0c <__assert_fail@plt+0xee50>
   219f8:	ldr	r2, [r0, #16]
   219fc:	mov	r0, #1
   21a00:	cmp	r1, r2
   21a04:	movne	r0, #0
   21a08:	pop	{fp, pc}
   21a0c:	mov	r0, #0
   21a10:	pop	{fp, pc}
   21a14:	nop	{0}
   21a18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21a1c:	add	fp, sp, #24
   21a20:	sub	sp, sp, #8
   21a24:	ldr	r6, [r0]
   21a28:	ldmib	r0, {r3, r7, r8}
   21a2c:	ldr	r2, [r0, #16]
   21a30:	mov	r4, r1
   21a34:	mov	r5, #0
   21a38:	cmp	r6, r3
   21a3c:	bcs	21a7c <__assert_fail@plt+0xeec0>
   21a40:	mov	r5, #0
   21a44:	ldr	r0, [r6]
   21a48:	cmp	r0, #0
   21a4c:	beq	21a70 <__assert_fail@plt+0xeeb4>
   21a50:	mov	r0, #0
   21a54:	mov	r1, r6
   21a58:	ldr	r1, [r1, #4]
   21a5c:	add	r0, r0, #1
   21a60:	cmp	r1, #0
   21a64:	bne	21a58 <__assert_fail@plt+0xee9c>
   21a68:	cmp	r0, r5
   21a6c:	movhi	r5, r0
   21a70:	add	r6, r6, #8
   21a74:	cmp	r6, r3
   21a78:	bcc	21a44 <__assert_fail@plt+0xee88>
   21a7c:	movw	r1, #8689	; 0x21f1
   21a80:	mov	r0, r4
   21a84:	movt	r1, #4
   21a88:	bl	128c8 <fprintf@plt>
   21a8c:	movw	r1, #8713	; 0x2209
   21a90:	mov	r0, r4
   21a94:	mov	r2, r7
   21a98:	movt	r1, #4
   21a9c:	bl	128c8 <fprintf@plt>
   21aa0:	vldr	d16, [pc, #72]	; 21af0 <__assert_fail@plt+0xef34>
   21aa4:	vmov	s0, r8
   21aa8:	movw	r1, #8737	; 0x2221
   21aac:	mov	r0, r4
   21ab0:	mov	r2, r8
   21ab4:	vcvt.f64.u32	d17, s0
   21ab8:	vmov	s0, r7
   21abc:	movt	r1, #4
   21ac0:	vcvt.f64.u32	d18, s0
   21ac4:	vmul.f64	d16, d17, d16
   21ac8:	vdiv.f64	d16, d16, d18
   21acc:	vstr	d16, [sp]
   21ad0:	bl	128c8 <fprintf@plt>
   21ad4:	movw	r1, #8770	; 0x2242
   21ad8:	mov	r0, r4
   21adc:	mov	r2, r5
   21ae0:	movt	r1, #4
   21ae4:	sub	sp, fp, #24
   21ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   21aec:	b	128c8 <fprintf@plt>
   21af0:	andeq	r0, r0, r0
   21af4:	subsmi	r0, r9, r0
   21af8:	push	{r4, r5, r6, r7, fp, lr}
   21afc:	add	fp, sp, #16
   21b00:	mov	r4, r1
   21b04:	ldr	r1, [r0, #8]
   21b08:	ldr	r2, [r0, #24]
   21b0c:	mov	r5, r0
   21b10:	mov	r0, r4
   21b14:	blx	r2
   21b18:	ldr	r1, [r5, #8]
   21b1c:	cmp	r0, r1
   21b20:	bcs	21b80 <__assert_fail@plt+0xefc4>
   21b24:	ldr	r7, [r5]
   21b28:	mov	r6, #0
   21b2c:	ldr	r1, [r7, r0, lsl #3]!
   21b30:	cmp	r1, #0
   21b34:	cmpne	r7, #0
   21b38:	bne	21b68 <__assert_fail@plt+0xefac>
   21b3c:	mov	r0, r6
   21b40:	pop	{r4, r5, r6, r7, fp, pc}
   21b44:	ldr	r2, [r5, #28]
   21b48:	mov	r0, r4
   21b4c:	blx	r2
   21b50:	cmp	r0, #0
   21b54:	bne	21b78 <__assert_fail@plt+0xefbc>
   21b58:	ldr	r7, [r7, #4]
   21b5c:	cmp	r7, #0
   21b60:	beq	21b3c <__assert_fail@plt+0xef80>
   21b64:	ldr	r1, [r7]
   21b68:	cmp	r1, r4
   21b6c:	bne	21b44 <__assert_fail@plt+0xef88>
   21b70:	mov	r6, r4
   21b74:	b	21b3c <__assert_fail@plt+0xef80>
   21b78:	ldr	r6, [r7]
   21b7c:	b	21b3c <__assert_fail@plt+0xef80>
   21b80:	bl	12b68 <abort@plt>
   21b84:	ldr	r1, [r0, #16]
   21b88:	cmp	r1, #0
   21b8c:	moveq	r0, #0
   21b90:	bxeq	lr
   21b94:	ldm	r0, {r1, r2}
   21b98:	b	21ba8 <__assert_fail@plt+0xefec>
   21b9c:	ldr	r0, [r1], #8
   21ba0:	cmp	r0, #0
   21ba4:	bxne	lr
   21ba8:	cmp	r1, r2
   21bac:	bcc	21b9c <__assert_fail@plt+0xefe0>
   21bb0:	push	{fp, lr}
   21bb4:	mov	fp, sp
   21bb8:	bl	12b68 <abort@plt>
   21bbc:	push	{r4, r5, fp, lr}
   21bc0:	add	fp, sp, #8
   21bc4:	mov	r5, r1
   21bc8:	ldr	r1, [r0, #8]
   21bcc:	ldr	r2, [r0, #24]
   21bd0:	mov	r4, r0
   21bd4:	mov	r0, r5
   21bd8:	blx	r2
   21bdc:	ldr	r1, [r4, #8]
   21be0:	cmp	r0, r1
   21be4:	bcs	21c40 <__assert_fail@plt+0xf084>
   21be8:	ldr	r1, [r4]
   21bec:	add	r2, r1, r0, lsl #3
   21bf0:	ldr	r3, [r2]
   21bf4:	ldr	r2, [r2, #4]
   21bf8:	cmp	r3, r5
   21bfc:	beq	21c0c <__assert_fail@plt+0xf050>
   21c00:	cmp	r2, #0
   21c04:	bne	21bf0 <__assert_fail@plt+0xf034>
   21c08:	b	21c18 <__assert_fail@plt+0xf05c>
   21c0c:	cmp	r2, #0
   21c10:	ldrne	r0, [r2]
   21c14:	popne	{r4, r5, fp, pc}
   21c18:	ldr	r2, [r4, #4]
   21c1c:	add	r0, r1, r0, lsl #3
   21c20:	add	r1, r0, #8
   21c24:	cmp	r1, r2
   21c28:	movcs	r0, #0
   21c2c:	popcs	{r4, r5, fp, pc}
   21c30:	ldr	r0, [r1], #8
   21c34:	cmp	r0, #0
   21c38:	popne	{r4, r5, fp, pc}
   21c3c:	b	21c24 <__assert_fail@plt+0xf068>
   21c40:	bl	12b68 <abort@plt>
   21c44:	push	{r4, r5, fp, lr}
   21c48:	add	fp, sp, #8
   21c4c:	ldm	r0, {r5, lr}
   21c50:	mov	ip, r0
   21c54:	mov	r0, #0
   21c58:	cmp	r5, lr
   21c5c:	bcs	21ca8 <__assert_fail@plt+0xf0ec>
   21c60:	mov	r0, #0
   21c64:	ldr	r3, [r5]
   21c68:	cmp	r3, #0
   21c6c:	cmpne	r5, #0
   21c70:	beq	21c9c <__assert_fail@plt+0xf0e0>
   21c74:	mov	r3, r5
   21c78:	cmp	r0, r2
   21c7c:	popcs	{r4, r5, fp, pc}
   21c80:	ldr	r4, [r3]
   21c84:	str	r4, [r1, r0, lsl #2]
   21c88:	add	r0, r0, #1
   21c8c:	ldr	r3, [r3, #4]
   21c90:	cmp	r3, #0
   21c94:	bne	21c78 <__assert_fail@plt+0xf0bc>
   21c98:	ldr	lr, [ip, #4]
   21c9c:	add	r5, r5, #8
   21ca0:	cmp	r5, lr
   21ca4:	bcc	21c64 <__assert_fail@plt+0xf0a8>
   21ca8:	pop	{r4, r5, fp, pc}
   21cac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21cb0:	add	fp, sp, #24
   21cb4:	mov	r5, r1
   21cb8:	ldr	r4, [r0]
   21cbc:	ldr	r1, [r0, #4]
   21cc0:	mov	r6, #0
   21cc4:	cmp	r4, r1
   21cc8:	bcs	21d3c <__assert_fail@plt+0xf180>
   21ccc:	mov	r9, r2
   21cd0:	mov	r8, r0
   21cd4:	mov	r6, #0
   21cd8:	b	21d20 <__assert_fail@plt+0xf164>
   21cdc:	mov	r1, r9
   21ce0:	blx	r5
   21ce4:	cmp	r0, #0
   21ce8:	beq	21d3c <__assert_fail@plt+0xf180>
   21cec:	mov	r7, r4
   21cf0:	ldr	r7, [r7, #4]
   21cf4:	add	r6, r6, #1
   21cf8:	cmp	r7, #0
   21cfc:	beq	21d18 <__assert_fail@plt+0xf15c>
   21d00:	ldr	r0, [r7]
   21d04:	mov	r1, r9
   21d08:	blx	r5
   21d0c:	cmp	r0, #0
   21d10:	bne	21cf0 <__assert_fail@plt+0xf134>
   21d14:	b	21d3c <__assert_fail@plt+0xf180>
   21d18:	ldr	r1, [r8, #4]
   21d1c:	b	21d30 <__assert_fail@plt+0xf174>
   21d20:	ldr	r0, [r4]
   21d24:	cmp	r0, #0
   21d28:	cmpne	r4, #0
   21d2c:	bne	21cdc <__assert_fail@plt+0xf120>
   21d30:	add	r4, r4, #8
   21d34:	cmp	r4, r1
   21d38:	bcc	21d20 <__assert_fail@plt+0xf164>
   21d3c:	mov	r0, r6
   21d40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21d44:	ldrb	r2, [r0]
   21d48:	cmp	r2, #0
   21d4c:	moveq	r0, #0
   21d50:	bxeq	lr
   21d54:	add	r3, r0, #1
   21d58:	mov	r0, #0
   21d5c:	rsb	r0, r0, r0, lsl #5
   21d60:	uxtab	r0, r0, r2
   21d64:	udiv	r2, r0, r1
   21d68:	mls	r0, r2, r1, r0
   21d6c:	ldrb	r2, [r3], #1
   21d70:	cmp	r2, #0
   21d74:	bne	21d5c <__assert_fail@plt+0xf1a0>
   21d78:	bx	lr
   21d7c:	movw	r1, #8800	; 0x2260
   21d80:	movt	r1, #4
   21d84:	vld1.32	{d16-d17}, [r1]!
   21d88:	ldr	r1, [r1]
   21d8c:	vst1.32	{d16-d17}, [r0]!
   21d90:	str	r1, [r0]
   21d94:	bx	lr
   21d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d9c:	add	fp, sp, #28
   21da0:	sub	sp, sp, #4
   21da4:	movw	sl, #7820	; 0x1e8c
   21da8:	movw	r5, #7800	; 0x1e78
   21dac:	cmp	r3, #0
   21db0:	mov	r8, r0
   21db4:	mov	r0, #40	; 0x28
   21db8:	mov	r7, r1
   21dbc:	movt	sl, #2
   21dc0:	movt	r5, #2
   21dc4:	movne	sl, r3
   21dc8:	cmp	r2, #0
   21dcc:	movne	r5, r2
   21dd0:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   21dd4:	mov	r9, #0
   21dd8:	cmp	r0, #0
   21ddc:	beq	21e6c <__assert_fail@plt+0xf2b0>
   21de0:	movw	r6, #8800	; 0x2260
   21de4:	cmp	r7, #0
   21de8:	mov	r4, r0
   21dec:	movt	r6, #4
   21df0:	movne	r6, r7
   21df4:	str	r6, [r0, #20]
   21df8:	bl	21e9c <__assert_fail@plt+0xf2e0>
   21dfc:	cmp	r0, #0
   21e00:	beq	21e64 <__assert_fail@plt+0xf2a8>
   21e04:	mov	r0, r8
   21e08:	mov	r1, r6
   21e0c:	bl	21f48 <__assert_fail@plt+0xf38c>
   21e10:	cmp	r0, #0
   21e14:	str	r0, [r4, #8]
   21e18:	beq	21e64 <__assert_fail@plt+0xf2a8>
   21e1c:	mov	r1, #8
   21e20:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   21e24:	cmp	r0, #0
   21e28:	str	r0, [r4]
   21e2c:	beq	21e64 <__assert_fail@plt+0xf2a8>
   21e30:	ldr	r1, [fp, #8]
   21e34:	mov	r2, #0
   21e38:	mov	r9, r4
   21e3c:	str	r2, [r4, #12]
   21e40:	str	r2, [r4, #16]
   21e44:	str	r5, [r4, #24]
   21e48:	str	sl, [r4, #28]
   21e4c:	str	r1, [r4, #32]
   21e50:	str	r2, [r4, #36]	; 0x24
   21e54:	ldr	r1, [r4, #8]
   21e58:	add	r0, r0, r1, lsl #3
   21e5c:	str	r0, [r4, #4]
   21e60:	b	21e6c <__assert_fail@plt+0xf2b0>
   21e64:	mov	r0, r4
   21e68:	bl	2c048 <__assert_fail@plt+0x1948c>
   21e6c:	mov	r0, r9
   21e70:	sub	sp, fp, #28
   21e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e78:	ror	r2, r0, #3
   21e7c:	udiv	r2, r2, r1
   21e80:	mul	r1, r2, r1
   21e84:	rsb	r0, r1, r0, ror #3
   21e88:	bx	lr
   21e8c:	sub	r0, r0, r1
   21e90:	clz	r0, r0
   21e94:	lsr	r0, r0, #5
   21e98:	bx	lr
   21e9c:	ldr	r3, [r0, #20]
   21ea0:	movw	r2, #8800	; 0x2260
   21ea4:	mov	r1, r0
   21ea8:	mov	r0, #1
   21eac:	movt	r2, #4
   21eb0:	cmp	r3, r2
   21eb4:	beq	21f38 <__assert_fail@plt+0xf37c>
   21eb8:	vldr	s2, [pc, #124]	; 21f3c <__assert_fail@plt+0xf380>
   21ebc:	vldr	s0, [r3, #8]
   21ec0:	vcmpe.f32	s0, s2
   21ec4:	vmrs	APSR_nzcv, fpscr
   21ec8:	ble	21f30 <__assert_fail@plt+0xf374>
   21ecc:	vldr	s4, [pc, #108]	; 21f40 <__assert_fail@plt+0xf384>
   21ed0:	vcmpe.f32	s0, s4
   21ed4:	vmrs	APSR_nzcv, fpscr
   21ed8:	bpl	21f30 <__assert_fail@plt+0xf374>
   21edc:	vldr	s4, [pc, #96]	; 21f44 <__assert_fail@plt+0xf388>
   21ee0:	vldr	s6, [r3, #12]
   21ee4:	vcmpe.f32	s6, s4
   21ee8:	vmrs	APSR_nzcv, fpscr
   21eec:	ble	21f30 <__assert_fail@plt+0xf374>
   21ef0:	vldr	s4, [r3]
   21ef4:	vcmpe.f32	s4, #0.0
   21ef8:	vmrs	APSR_nzcv, fpscr
   21efc:	blt	21f30 <__assert_fail@plt+0xf374>
   21f00:	vadd.f32	s2, s4, s2
   21f04:	vcmpe.f32	s2, s0
   21f08:	vmrs	APSR_nzcv, fpscr
   21f0c:	bpl	21f30 <__assert_fail@plt+0xf374>
   21f10:	vldr	s0, [r3, #4]
   21f14:	vmov.f32	s4, #112	; 0x3f800000  1.0
   21f18:	vcmpe.f32	s0, s4
   21f1c:	vmrs	APSR_nzcv, fpscr
   21f20:	bhi	21f30 <__assert_fail@plt+0xf374>
   21f24:	vcmpe.f32	s2, s0
   21f28:	vmrs	APSR_nzcv, fpscr
   21f2c:	bxmi	lr
   21f30:	mov	r0, #0
   21f34:	str	r2, [r1, #20]
   21f38:	bx	lr
   21f3c:	stclcc	12, cr12, [ip, #820]	; 0x334
   21f40:	svccc	0x00666666
   21f44:	svccc	0x008ccccd
   21f48:	ldrb	r2, [r1, #16]
   21f4c:	cmp	r2, #0
   21f50:	bne	21f80 <__assert_fail@plt+0xf3c4>
   21f54:	vldr	s0, [r1, #8]
   21f58:	vldr	s4, [pc, #160]	; 22000 <__assert_fail@plt+0xf444>
   21f5c:	vmov	s2, r0
   21f60:	mov	r0, #0
   21f64:	vcvt.f32.u32	s2, s2
   21f68:	vdiv.f32	s2, s2, s0
   21f6c:	vcmpe.f32	s2, s4
   21f70:	vcvt.u32.f32	s0, s2
   21f74:	vmrs	APSR_nzcv, fpscr
   21f78:	bxge	lr
   21f7c:	vmov	r0, s0
   21f80:	cmp	r0, #10
   21f84:	movls	r0, #10
   21f88:	orr	r0, r0, #1
   21f8c:	b	21fe4 <__assert_fail@plt+0xf428>
   21f90:	mov	r1, #3
   21f94:	cmp	r0, #10
   21f98:	bcc	21fd0 <__assert_fail@plt+0xf414>
   21f9c:	mov	r1, #3
   21fa0:	mov	ip, #9
   21fa4:	mov	r2, #12
   21fa8:	udiv	r3, r0, r1
   21fac:	mls	r3, r3, r1, r0
   21fb0:	cmp	r3, #0
   21fb4:	beq	21fd0 <__assert_fail@plt+0xf414>
   21fb8:	add	r3, ip, r2
   21fbc:	add	r2, r2, #8
   21fc0:	add	r1, r1, #2
   21fc4:	add	ip, r3, #4
   21fc8:	cmp	ip, r0
   21fcc:	bcc	21fa8 <__assert_fail@plt+0xf3ec>
   21fd0:	udiv	r2, r0, r1
   21fd4:	mls	r1, r2, r1, r0
   21fd8:	cmp	r1, #0
   21fdc:	bne	21ff4 <__assert_fail@plt+0xf438>
   21fe0:	add	r0, r0, #2
   21fe4:	cmn	r0, #1
   21fe8:	bne	21f90 <__assert_fail@plt+0xf3d4>
   21fec:	mov	r0, #0
   21ff0:	bx	lr
   21ff4:	cmp	r0, #536870912	; 0x20000000
   21ff8:	movcs	r0, #0
   21ffc:	bx	lr
   22000:	svcmi	0x00800000
   22004:	push	{r4, r5, r6, r7, fp, lr}
   22008:	add	fp, sp, #16
   2200c:	mov	r4, r0
   22010:	ldr	r5, [r0]
   22014:	ldr	r0, [r0, #4]
   22018:	cmp	r5, r0
   2201c:	bcs	220b4 <__assert_fail@plt+0xf4f8>
   22020:	mov	r6, #0
   22024:	ldr	r1, [r5]
   22028:	cmp	r1, #0
   2202c:	beq	220a8 <__assert_fail@plt+0xf4ec>
   22030:	ldr	r1, [r4, #32]
   22034:	ldr	r7, [r5, #4]
   22038:	cmp	r1, #0
   2203c:	mov	r0, r1
   22040:	movwne	r0, #1
   22044:	cmp	r7, #0
   22048:	beq	2208c <__assert_fail@plt+0xf4d0>
   2204c:	tst	r0, #1
   22050:	beq	22060 <__assert_fail@plt+0xf4a4>
   22054:	ldr	r0, [r7]
   22058:	blx	r1
   2205c:	ldr	r1, [r4, #32]
   22060:	str	r6, [r7]
   22064:	cmp	r1, #0
   22068:	ldr	r0, [r4, #36]	; 0x24
   2206c:	ldr	r2, [r7, #4]
   22070:	str	r0, [r7, #4]
   22074:	mov	r0, r1
   22078:	str	r7, [r4, #36]	; 0x24
   2207c:	mov	r7, r2
   22080:	movwne	r0, #1
   22084:	cmp	r2, #0
   22088:	bne	2204c <__assert_fail@plt+0xf490>
   2208c:	cmp	r0, #0
   22090:	beq	2209c <__assert_fail@plt+0xf4e0>
   22094:	ldr	r0, [r5]
   22098:	blx	r1
   2209c:	str	r6, [r5]
   220a0:	str	r6, [r5, #4]
   220a4:	ldr	r0, [r4, #4]
   220a8:	add	r5, r5, #8
   220ac:	cmp	r5, r0
   220b0:	bcc	22024 <__assert_fail@plt+0xf468>
   220b4:	mov	r0, #0
   220b8:	str	r0, [r4, #12]
   220bc:	str	r0, [r4, #16]
   220c0:	pop	{r4, r5, r6, r7, fp, pc}
   220c4:	push	{r4, r5, r6, sl, fp, lr}
   220c8:	add	fp, sp, #16
   220cc:	mov	r4, r0
   220d0:	ldr	r0, [r0, #32]
   220d4:	cmp	r0, #0
   220d8:	ldrne	r0, [r4, #16]
   220dc:	cmpne	r0, #0
   220e0:	beq	22138 <__assert_fail@plt+0xf57c>
   220e4:	ldr	r5, [r4]
   220e8:	ldr	r1, [r4, #4]
   220ec:	b	22130 <__assert_fail@plt+0xf574>
   220f0:	ldr	r0, [r5]
   220f4:	cmp	r0, #0
   220f8:	cmpne	r5, #0
   220fc:	beq	2212c <__assert_fail@plt+0xf570>
   22100:	ldr	r1, [r4, #32]
   22104:	blx	r1
   22108:	ldr	r6, [r5, #4]
   2210c:	b	22120 <__assert_fail@plt+0xf564>
   22110:	ldr	r1, [r4, #32]
   22114:	ldr	r0, [r6]
   22118:	blx	r1
   2211c:	ldr	r6, [r6, #4]
   22120:	cmp	r6, #0
   22124:	bne	22110 <__assert_fail@plt+0xf554>
   22128:	ldr	r1, [r4, #4]
   2212c:	add	r5, r5, #8
   22130:	cmp	r5, r1
   22134:	bcc	220f0 <__assert_fail@plt+0xf534>
   22138:	ldr	r5, [r4]
   2213c:	ldr	r1, [r4, #4]
   22140:	b	2216c <__assert_fail@plt+0xf5b0>
   22144:	ldr	r0, [r5, #4]
   22148:	cmp	r0, #0
   2214c:	beq	22168 <__assert_fail@plt+0xf5ac>
   22150:	ldr	r6, [r0, #4]
   22154:	bl	2c048 <__assert_fail@plt+0x1948c>
   22158:	cmp	r6, #0
   2215c:	mov	r0, r6
   22160:	bne	22150 <__assert_fail@plt+0xf594>
   22164:	ldr	r1, [r4, #4]
   22168:	add	r5, r5, #8
   2216c:	cmp	r5, r1
   22170:	bcc	22144 <__assert_fail@plt+0xf588>
   22174:	ldr	r0, [r4, #36]	; 0x24
   22178:	cmp	r0, #0
   2217c:	beq	22194 <__assert_fail@plt+0xf5d8>
   22180:	ldr	r5, [r0, #4]
   22184:	bl	2c048 <__assert_fail@plt+0x1948c>
   22188:	cmp	r5, #0
   2218c:	mov	r0, r5
   22190:	bne	22180 <__assert_fail@plt+0xf5c4>
   22194:	ldr	r0, [r4]
   22198:	bl	2c048 <__assert_fail@plt+0x1948c>
   2219c:	mov	r0, r4
   221a0:	pop	{r4, r5, r6, sl, fp, lr}
   221a4:	b	2c048 <__assert_fail@plt+0x1948c>
   221a8:	push	{r4, r5, r6, r7, fp, lr}
   221ac:	add	fp, sp, #16
   221b0:	sub	sp, sp, #40	; 0x28
   221b4:	mov	r7, r0
   221b8:	mov	r2, r1
   221bc:	mov	r4, r0
   221c0:	ldr	r1, [r7, #20]!
   221c4:	mov	r0, r2
   221c8:	bl	21f48 <__assert_fail@plt+0xf38c>
   221cc:	mov	r5, #0
   221d0:	cmp	r0, #0
   221d4:	beq	22268 <__assert_fail@plt+0xf6ac>
   221d8:	mov	r6, r0
   221dc:	ldr	r0, [r4, #8]
   221e0:	cmp	r6, r0
   221e4:	beq	22264 <__assert_fail@plt+0xf6a8>
   221e8:	mov	r0, r6
   221ec:	mov	r1, #8
   221f0:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   221f4:	cmp	r0, #0
   221f8:	str	r0, [sp]
   221fc:	beq	22268 <__assert_fail@plt+0xf6ac>
   22200:	mov	r1, #0
   22204:	add	r0, r0, r6, lsl #3
   22208:	str	r6, [sp, #8]
   2220c:	mov	r5, sp
   22210:	mov	r2, #0
   22214:	str	r1, [sp, #12]
   22218:	str	r1, [sp, #16]
   2221c:	str	r0, [sp, #4]
   22220:	add	r0, r5, #20
   22224:	mov	r1, r4
   22228:	vld1.32	{d16-d17}, [r7]
   2222c:	vst1.32	{d16-d17}, [r0]
   22230:	ldr	r0, [r4, #36]	; 0x24
   22234:	str	r0, [sp, #36]	; 0x24
   22238:	mov	r0, r5
   2223c:	bl	222c0 <__assert_fail@plt+0xf704>
   22240:	cmp	r0, #0
   22244:	beq	22274 <__assert_fail@plt+0xf6b8>
   22248:	ldr	r0, [r4]
   2224c:	bl	2c048 <__assert_fail@plt+0x1948c>
   22250:	mov	r0, #36	; 0x24
   22254:	vld1.32	{d16-d17}, [r5], r0
   22258:	vst1.32	{d16-d17}, [r4], r0
   2225c:	ldr	r0, [r5]
   22260:	str	r0, [r4]
   22264:	mov	r5, #1
   22268:	mov	r0, r5
   2226c:	sub	sp, fp, #16
   22270:	pop	{r4, r5, r6, r7, fp, pc}
   22274:	ldr	r0, [sp, #36]	; 0x24
   22278:	mov	r1, sp
   2227c:	mov	r2, #1
   22280:	str	r0, [r4, #36]	; 0x24
   22284:	mov	r0, r4
   22288:	bl	222c0 <__assert_fail@plt+0xf704>
   2228c:	cmp	r0, #0
   22290:	beq	222bc <__assert_fail@plt+0xf700>
   22294:	mov	r1, sp
   22298:	mov	r0, r4
   2229c:	mov	r2, #0
   222a0:	mov	r5, #0
   222a4:	bl	222c0 <__assert_fail@plt+0xf704>
   222a8:	cmp	r0, #0
   222ac:	beq	222bc <__assert_fail@plt+0xf700>
   222b0:	ldr	r0, [sp]
   222b4:	bl	2c048 <__assert_fail@plt+0x1948c>
   222b8:	b	22268 <__assert_fail@plt+0xf6ac>
   222bc:	bl	12b68 <abort@plt>
   222c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222c4:	add	fp, sp, #28
   222c8:	sub	sp, sp, #12
   222cc:	ldr	sl, [r1]
   222d0:	str	r1, [sp, #8]
   222d4:	ldr	r1, [r1, #4]
   222d8:	mov	r7, r0
   222dc:	mov	r0, #1
   222e0:	str	r2, [sp, #4]
   222e4:	cmp	sl, r1
   222e8:	bcs	22444 <__assert_fail@plt+0xf888>
   222ec:	add	r8, r7, #36	; 0x24
   222f0:	mov	r9, #0
   222f4:	ldr	r4, [sl]
   222f8:	cmp	r4, #0
   222fc:	beq	2242c <__assert_fail@plt+0xf870>
   22300:	ldr	r5, [sl, #4]
   22304:	cmp	r5, #0
   22308:	beq	22380 <__assert_fail@plt+0xf7c4>
   2230c:	ldr	r1, [r7, #8]
   22310:	ldr	r4, [r5]
   22314:	ldr	r2, [r7, #24]
   22318:	mov	r0, r4
   2231c:	blx	r2
   22320:	ldr	r1, [r7, #8]
   22324:	cmp	r0, r1
   22328:	bcs	22454 <__assert_fail@plt+0xf898>
   2232c:	ldr	r3, [r7]
   22330:	ldr	r2, [r5, #4]
   22334:	ldr	r6, [r3, r0, lsl #3]
   22338:	cmp	r6, #0
   2233c:	beq	2234c <__assert_fail@plt+0xf790>
   22340:	add	r0, r3, r0, lsl #3
   22344:	add	r0, r0, #4
   22348:	b	22364 <__assert_fail@plt+0xf7a8>
   2234c:	str	r4, [r3, r0, lsl #3]
   22350:	ldr	r0, [r7, #12]
   22354:	add	r0, r0, #1
   22358:	str	r0, [r7, #12]
   2235c:	mov	r0, r8
   22360:	str	r9, [r5]
   22364:	ldr	r3, [r0]
   22368:	cmp	r2, #0
   2236c:	str	r3, [r5, #4]
   22370:	str	r5, [r0]
   22374:	mov	r5, r2
   22378:	bne	22310 <__assert_fail@plt+0xf754>
   2237c:	ldr	r4, [sl]
   22380:	ldr	r0, [sp, #4]
   22384:	str	r9, [sl, #4]
   22388:	cmp	r0, #0
   2238c:	bne	2242c <__assert_fail@plt+0xf870>
   22390:	ldr	r1, [r7, #8]
   22394:	ldr	r2, [r7, #24]
   22398:	mov	r0, r4
   2239c:	blx	r2
   223a0:	mov	r5, r0
   223a4:	ldr	r0, [r7, #8]
   223a8:	cmp	r5, r0
   223ac:	bcs	22454 <__assert_fail@plt+0xf898>
   223b0:	ldr	r6, [r7]
   223b4:	ldr	r0, [r6, r5, lsl #3]
   223b8:	cmp	r0, #0
   223bc:	beq	223dc <__assert_fail@plt+0xf820>
   223c0:	ldr	r0, [r8]
   223c4:	cmp	r0, #0
   223c8:	beq	223f0 <__assert_fail@plt+0xf834>
   223cc:	mov	r1, r0
   223d0:	ldr	r2, [r1, #4]!
   223d4:	str	r2, [r8]
   223d8:	b	22404 <__assert_fail@plt+0xf848>
   223dc:	str	r4, [r6, r5, lsl #3]
   223e0:	ldr	r0, [r7, #12]
   223e4:	add	r0, r0, #1
   223e8:	str	r0, [r7, #12]
   223ec:	b	22418 <__assert_fail@plt+0xf85c>
   223f0:	mov	r0, #8
   223f4:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   223f8:	cmp	r0, #0
   223fc:	beq	2244c <__assert_fail@plt+0xf890>
   22400:	add	r1, r0, #4
   22404:	str	r4, [r0]
   22408:	add	r2, r6, r5, lsl #3
   2240c:	ldr	r3, [r2, #4]
   22410:	str	r3, [r1]
   22414:	str	r0, [r2, #4]
   22418:	ldr	r1, [sp, #8]
   2241c:	str	r9, [sl]
   22420:	ldr	r0, [r1, #12]
   22424:	sub	r0, r0, #1
   22428:	str	r0, [r1, #12]
   2242c:	ldr	r0, [sp, #8]
   22430:	add	sl, sl, #8
   22434:	ldr	r0, [r0, #4]
   22438:	cmp	sl, r0
   2243c:	bcc	222f4 <__assert_fail@plt+0xf738>
   22440:	mov	r0, #1
   22444:	sub	sp, fp, #28
   22448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2244c:	mov	r0, #0
   22450:	b	22444 <__assert_fail@plt+0xf888>
   22454:	bl	12b68 <abort@plt>
   22458:	push	{r4, r5, r6, r7, fp, lr}
   2245c:	add	fp, sp, #16
   22460:	sub	sp, sp, #8
   22464:	cmp	r1, #0
   22468:	beq	225e8 <__assert_fail@plt+0xfa2c>
   2246c:	mov	r7, r2
   22470:	add	r2, sp, #4
   22474:	mov	r3, #0
   22478:	mov	r5, r1
   2247c:	mov	r4, r0
   22480:	mov	r6, #0
   22484:	bl	225f0 <__assert_fail@plt+0xfa34>
   22488:	cmp	r0, #0
   2248c:	beq	2249c <__assert_fail@plt+0xf8e0>
   22490:	cmp	r7, #0
   22494:	strne	r0, [r7]
   22498:	b	225d4 <__assert_fail@plt+0xfa18>
   2249c:	ldr	r0, [r4, #20]
   224a0:	vldr	s0, [r4, #8]
   224a4:	vldr	s2, [r4, #12]
   224a8:	vldr	s4, [r0, #8]
   224ac:	vcvt.f32.u32	s0, s0
   224b0:	vcvt.f32.u32	s2, s2
   224b4:	vmul.f32	s0, s4, s0
   224b8:	vcmpe.f32	s0, s2
   224bc:	vmrs	APSR_nzcv, fpscr
   224c0:	bpl	22554 <__assert_fail@plt+0xf998>
   224c4:	mov	r0, r4
   224c8:	bl	21e9c <__assert_fail@plt+0xf2e0>
   224cc:	vldr	s0, [r4, #8]
   224d0:	ldr	r0, [r4, #20]
   224d4:	vldr	s4, [r4, #12]
   224d8:	vcvt.f32.u32	s2, s0
   224dc:	vldr	s0, [r0, #8]
   224e0:	vcvt.f32.u32	s4, s4
   224e4:	vmul.f32	s6, s0, s2
   224e8:	vcmpe.f32	s6, s4
   224ec:	vmrs	APSR_nzcv, fpscr
   224f0:	bpl	22554 <__assert_fail@plt+0xf998>
   224f4:	vldr	s4, [r0, #12]
   224f8:	ldrb	r0, [r0, #16]
   224fc:	mvn	r6, #0
   22500:	vmul.f32	s2, s4, s2
   22504:	vldr	s4, [pc, #224]	; 225ec <__assert_fail@plt+0xfa30>
   22508:	cmp	r0, #0
   2250c:	vmul.f32	s0, s0, s2
   22510:	vseleq.f32	s0, s0, s2
   22514:	vcmpe.f32	s0, s4
   22518:	vmrs	APSR_nzcv, fpscr
   2251c:	bge	225d4 <__assert_fail@plt+0xfa18>
   22520:	vcvt.u32.f32	s0, s0
   22524:	mov	r0, r4
   22528:	vmov	r1, s0
   2252c:	bl	221a8 <__assert_fail@plt+0xf5ec>
   22530:	cmp	r0, #0
   22534:	beq	225d4 <__assert_fail@plt+0xfa18>
   22538:	add	r2, sp, #4
   2253c:	mov	r0, r4
   22540:	mov	r1, r5
   22544:	mov	r3, #0
   22548:	bl	225f0 <__assert_fail@plt+0xfa34>
   2254c:	cmp	r0, #0
   22550:	bne	225e8 <__assert_fail@plt+0xfa2c>
   22554:	ldr	r6, [sp, #4]
   22558:	ldr	r0, [r6]
   2255c:	cmp	r0, #0
   22560:	beq	22580 <__assert_fail@plt+0xf9c4>
   22564:	ldr	r0, [r4, #36]	; 0x24
   22568:	cmp	r0, #0
   2256c:	beq	225a0 <__assert_fail@plt+0xf9e4>
   22570:	mov	r1, r0
   22574:	ldr	r2, [r1, #4]!
   22578:	str	r2, [r4, #36]	; 0x24
   2257c:	b	225b4 <__assert_fail@plt+0xf9f8>
   22580:	str	r5, [r6]
   22584:	ldr	r0, [r4, #12]
   22588:	ldr	r1, [r4, #16]
   2258c:	add	r0, r0, #1
   22590:	add	r1, r1, #1
   22594:	str	r0, [r4, #12]
   22598:	str	r1, [r4, #16]
   2259c:	b	225d0 <__assert_fail@plt+0xfa14>
   225a0:	mov	r0, #8
   225a4:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   225a8:	cmp	r0, #0
   225ac:	beq	225e0 <__assert_fail@plt+0xfa24>
   225b0:	add	r1, r0, #4
   225b4:	str	r5, [r0]
   225b8:	ldr	r2, [r6, #4]
   225bc:	str	r2, [r1]
   225c0:	str	r0, [r6, #4]
   225c4:	ldr	r0, [r4, #16]
   225c8:	add	r0, r0, #1
   225cc:	str	r0, [r4, #16]
   225d0:	mov	r6, #1
   225d4:	mov	r0, r6
   225d8:	sub	sp, fp, #16
   225dc:	pop	{r4, r5, r6, r7, fp, pc}
   225e0:	mvn	r6, #0
   225e4:	b	225d4 <__assert_fail@plt+0xfa18>
   225e8:	bl	12b68 <abort@plt>
   225ec:	svcmi	0x00800000
   225f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   225f4:	add	fp, sp, #24
   225f8:	mov	r7, r2
   225fc:	mov	r4, r1
   22600:	ldr	r1, [r0, #8]
   22604:	ldr	r2, [r0, #24]
   22608:	mov	r5, r0
   2260c:	mov	r8, r3
   22610:	mov	r0, r4
   22614:	blx	r2
   22618:	ldr	r1, [r5, #8]
   2261c:	cmp	r0, r1
   22620:	bcs	2271c <__assert_fail@plt+0xfb60>
   22624:	ldr	r1, [r5]
   22628:	add	r6, r1, r0, lsl #3
   2262c:	str	r6, [r7]
   22630:	ldr	r1, [r1, r0, lsl #3]
   22634:	cmp	r1, #0
   22638:	beq	226d0 <__assert_fail@plt+0xfb14>
   2263c:	cmp	r1, r4
   22640:	beq	2265c <__assert_fail@plt+0xfaa0>
   22644:	ldr	r2, [r5, #28]
   22648:	mov	r0, r4
   2264c:	blx	r2
   22650:	cmp	r0, #0
   22654:	beq	22690 <__assert_fail@plt+0xfad4>
   22658:	ldr	r4, [r6]
   2265c:	cmp	r8, #0
   22660:	beq	226d4 <__assert_fail@plt+0xfb18>
   22664:	ldr	r0, [r6, #4]
   22668:	cmp	r0, #0
   2266c:	beq	226dc <__assert_fail@plt+0xfb20>
   22670:	ldm	r0, {r1, r2}
   22674:	stm	r6, {r1, r2}
   22678:	mov	r1, #0
   2267c:	str	r1, [r0]
   22680:	ldr	r1, [r5, #36]	; 0x24
   22684:	str	r1, [r0, #4]
   22688:	str	r0, [r5, #36]	; 0x24
   2268c:	b	226d4 <__assert_fail@plt+0xfb18>
   22690:	ldr	r0, [r6, #4]!
   22694:	cmp	r0, #0
   22698:	beq	226d0 <__assert_fail@plt+0xfb14>
   2269c:	ldr	r1, [r0]
   226a0:	cmp	r1, r4
   226a4:	beq	226e8 <__assert_fail@plt+0xfb2c>
   226a8:	ldr	r2, [r5, #28]
   226ac:	mov	r0, r4
   226b0:	blx	r2
   226b4:	ldr	r1, [r6]
   226b8:	cmp	r0, #0
   226bc:	bne	226f0 <__assert_fail@plt+0xfb34>
   226c0:	ldr	r0, [r1, #4]!
   226c4:	cmp	r0, #0
   226c8:	mov	r6, r1
   226cc:	bne	2269c <__assert_fail@plt+0xfae0>
   226d0:	mov	r4, #0
   226d4:	mov	r0, r4
   226d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   226dc:	mov	r0, #0
   226e0:	str	r0, [r6]
   226e4:	b	226d4 <__assert_fail@plt+0xfb18>
   226e8:	mov	r1, r0
   226ec:	b	226f4 <__assert_fail@plt+0xfb38>
   226f0:	ldr	r4, [r1]
   226f4:	cmp	r8, #0
   226f8:	beq	226d4 <__assert_fail@plt+0xfb18>
   226fc:	ldr	r0, [r1, #4]
   22700:	str	r0, [r6]
   22704:	mov	r0, #0
   22708:	str	r0, [r1]
   2270c:	ldr	r0, [r5, #36]	; 0x24
   22710:	str	r0, [r1, #4]
   22714:	str	r1, [r5, #36]	; 0x24
   22718:	b	226d4 <__assert_fail@plt+0xfb18>
   2271c:	bl	12b68 <abort@plt>
   22720:	push	{r4, sl, fp, lr}
   22724:	add	fp, sp, #8
   22728:	sub	sp, sp, #8
   2272c:	add	r2, sp, #4
   22730:	mov	r4, r1
   22734:	bl	22458 <__assert_fail@plt+0xf89c>
   22738:	cmn	r0, #1
   2273c:	beq	22750 <__assert_fail@plt+0xfb94>
   22740:	ldr	r1, [sp, #4]
   22744:	cmp	r0, #0
   22748:	moveq	r4, r1
   2274c:	b	22754 <__assert_fail@plt+0xfb98>
   22750:	mov	r4, #0
   22754:	mov	r0, r4
   22758:	sub	sp, fp, #8
   2275c:	pop	{r4, sl, fp, pc}
   22760:	push	{r4, r5, r6, sl, fp, lr}
   22764:	add	fp, sp, #16
   22768:	sub	sp, sp, #8
   2276c:	add	r2, sp, #4
   22770:	mov	r3, #1
   22774:	mov	r4, r0
   22778:	bl	225f0 <__assert_fail@plt+0xfa34>
   2277c:	mov	r5, r0
   22780:	cmp	r0, #0
   22784:	beq	22860 <__assert_fail@plt+0xfca4>
   22788:	ldr	r0, [r4, #16]
   2278c:	sub	r0, r0, #1
   22790:	str	r0, [r4, #16]
   22794:	ldr	r0, [sp, #4]
   22798:	ldr	r0, [r0]
   2279c:	cmp	r0, #0
   227a0:	bne	22860 <__assert_fail@plt+0xfca4>
   227a4:	ldr	r0, [r4, #12]
   227a8:	vldr	s0, [r4, #8]
   227ac:	sub	r0, r0, #1
   227b0:	str	r0, [r4, #12]
   227b4:	vmov	s4, r0
   227b8:	ldr	r1, [r4, #20]
   227bc:	vldr	s2, [r1]
   227c0:	vcvt.f32.u32	s0, s0
   227c4:	vcvt.f32.u32	s4, s4
   227c8:	vmul.f32	s0, s2, s0
   227cc:	vcmpe.f32	s0, s4
   227d0:	vmrs	APSR_nzcv, fpscr
   227d4:	ble	22860 <__assert_fail@plt+0xfca4>
   227d8:	mov	r0, r4
   227dc:	bl	21e9c <__assert_fail@plt+0xf2e0>
   227e0:	vldr	s0, [r4, #8]
   227e4:	ldr	r0, [r4, #20]
   227e8:	vldr	s2, [r4, #12]
   227ec:	vcvt.f32.u32	s0, s0
   227f0:	vldr	s4, [r0]
   227f4:	vcvt.f32.u32	s2, s2
   227f8:	vmul.f32	s4, s4, s0
   227fc:	vcmpe.f32	s4, s2
   22800:	vmrs	APSR_nzcv, fpscr
   22804:	ble	22860 <__assert_fail@plt+0xfca4>
   22808:	ldrb	r1, [r0, #16]
   2280c:	vldr	s2, [r0, #4]
   22810:	cmp	r1, #0
   22814:	vmul.f32	s0, s2, s0
   22818:	vldreq	s2, [r0, #8]
   2281c:	mov	r0, r4
   22820:	vmuleq.f32	s0, s0, s2
   22824:	vcvt.u32.f32	s0, s0
   22828:	vmov	r1, s0
   2282c:	bl	221a8 <__assert_fail@plt+0xf5ec>
   22830:	cmp	r0, #0
   22834:	bne	22860 <__assert_fail@plt+0xfca4>
   22838:	ldr	r0, [r4, #36]	; 0x24
   2283c:	cmp	r0, #0
   22840:	beq	22858 <__assert_fail@plt+0xfc9c>
   22844:	ldr	r6, [r0, #4]
   22848:	bl	2c048 <__assert_fail@plt+0x1948c>
   2284c:	cmp	r6, #0
   22850:	mov	r0, r6
   22854:	bne	22844 <__assert_fail@plt+0xfc88>
   22858:	mov	r0, #0
   2285c:	str	r0, [r4, #36]	; 0x24
   22860:	mov	r0, r5
   22864:	sub	sp, fp, #16
   22868:	pop	{r4, r5, r6, sl, fp, pc}
   2286c:	b	22760 <__assert_fail@plt+0xfba4>
   22870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22874:	add	fp, sp, #28
   22878:	sub	sp, sp, #4
   2287c:	vpush	{d8-d9}
   22880:	sub	sp, sp, #96	; 0x60
   22884:	mov	r7, r3
   22888:	mov	r6, r2
   2288c:	mov	r9, r1
   22890:	str	r0, [sp, #36]	; 0x24
   22894:	bl	12a54 <localeconv@plt>
   22898:	ldr	r5, [r0]
   2289c:	mov	r4, r0
   228a0:	mov	r0, r5
   228a4:	bl	1288c <strlen@plt>
   228a8:	movw	r2, #59684	; 0xe924
   228ac:	sub	r1, r0, #1
   228b0:	cmp	r1, #16
   228b4:	movt	r2, #3
   228b8:	movcc	r2, r5
   228bc:	ldr	r5, [r4, #4]
   228c0:	ldr	r4, [r4, #8]
   228c4:	movcs	r0, #1
   228c8:	str	r0, [sp, #8]
   228cc:	str	r2, [sp, #4]
   228d0:	mov	r0, r5
   228d4:	bl	1288c <strlen@plt>
   228d8:	movw	r3, #63055	; 0xf64f
   228dc:	cmp	r0, #17
   228e0:	movw	r0, #647	; 0x287
   228e4:	ldr	r2, [fp, #16]
   228e8:	ldr	sl, [fp, #8]
   228ec:	ldr	r8, [fp, #12]
   228f0:	str	r6, [sp, #20]
   228f4:	str	r7, [sp, #28]
   228f8:	str	r4, [sp, #12]
   228fc:	movt	r3, #3
   22900:	add	r1, r6, r0
   22904:	movcc	r3, r5
   22908:	ands	r0, r7, #32
   2290c:	ldr	r5, [fp, #20]
   22910:	str	r1, [sp, #24]
   22914:	str	r0, [sp, #16]
   22918:	mov	r0, #1000	; 0x3e8
   2291c:	str	r3, [sp, #44]	; 0x2c
   22920:	movwne	r0, #1024	; 0x400
   22924:	str	r0, [sp, #32]
   22928:	and	r0, r7, #3
   2292c:	str	r0, [sp, #40]	; 0x28
   22930:	subs	r0, sl, r2
   22934:	sbcs	r0, r8, r5
   22938:	bcs	22a2c <__assert_fail@plt+0xfe70>
   2293c:	orrs	r0, sl, r8
   22940:	mov	r4, r9
   22944:	beq	22b14 <__assert_fail@plt+0xff58>
   22948:	ldr	r5, [fp, #20]
   2294c:	mov	r0, r2
   22950:	mov	r2, sl
   22954:	mov	r3, r8
   22958:	mov	r1, r5
   2295c:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   22960:	ldr	r2, [fp, #16]
   22964:	mov	r6, r0
   22968:	mov	r3, r1
   2296c:	umull	r0, r1, r0, sl
   22970:	mla	r1, r6, r8, r1
   22974:	mla	r1, r3, sl, r1
   22978:	subs	r0, r2, r0
   2297c:	sbc	r1, r5, r1
   22980:	orrs	r0, r0, r1
   22984:	bne	22b14 <__assert_fail@plt+0xff58>
   22988:	ldr	r5, [sp, #36]	; 0x24
   2298c:	mov	r1, r4
   22990:	mov	r2, r6
   22994:	mov	r8, r3
   22998:	mov	r0, r5
   2299c:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   229a0:	mov	r7, r0
   229a4:	mov	r9, r1
   229a8:	umull	r0, r1, r0, r6
   229ac:	mov	r2, #10
   229b0:	mov	r3, r8
   229b4:	mla	r1, r7, r8, r1
   229b8:	subs	r0, r5, r0
   229bc:	mla	r1, r9, r6, r1
   229c0:	umull	sl, r0, r0, r2
   229c4:	mov	r2, r6
   229c8:	sbc	r1, r4, r1
   229cc:	add	r1, r1, r1, lsl #2
   229d0:	add	r5, r0, r1, lsl #1
   229d4:	mov	r0, sl
   229d8:	mov	r1, r5
   229dc:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   229e0:	mov	r4, r0
   229e4:	umull	r0, r2, r0, r6
   229e8:	mla	r2, r4, r8, r2
   229ec:	subs	r0, sl, r0
   229f0:	mla	r1, r1, r6, r2
   229f4:	mov	r2, #2
   229f8:	sbc	r1, r5, r1
   229fc:	subs	r3, r6, r0, lsl #1
   22a00:	lsl	r1, r1, #1
   22a04:	orr	r1, r1, r0, lsr #31
   22a08:	sbcs	r3, r8, r1
   22a0c:	orr	r5, r1, r0, lsl #1
   22a10:	movwcc	r2, #3
   22a14:	cmp	r5, #0
   22a18:	movwne	r5, #1
   22a1c:	rsbs	r0, r6, r0, lsl #1
   22a20:	sbcs	r0, r1, r8
   22a24:	movcs	r5, r2
   22a28:	b	22aa4 <__assert_fail@plt+0xfee8>
   22a2c:	mov	r0, sl
   22a30:	mov	r1, r8
   22a34:	mov	r3, r5
   22a38:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   22a3c:	ldr	r2, [fp, #16]
   22a40:	mov	r6, r0
   22a44:	mov	r3, r1
   22a48:	mov	r4, r9
   22a4c:	umull	r0, r1, r0, r2
   22a50:	mla	r1, r6, r5, r1
   22a54:	subs	r0, sl, r0
   22a58:	mla	r1, r3, r2, r1
   22a5c:	sbc	r1, r8, r1
   22a60:	orrs	r0, r0, r1
   22a64:	bne	22b14 <__assert_fail@plt+0xff58>
   22a68:	ldr	r5, [sp, #36]	; 0x24
   22a6c:	mov	r2, r6
   22a70:	umull	r7, r0, r6, r5
   22a74:	mla	r0, r6, r4, r0
   22a78:	mla	r9, r3, r5, r0
   22a7c:	mov	r0, r7
   22a80:	mov	r1, r9
   22a84:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   22a88:	ldr	r2, [fp, #16]
   22a8c:	eor	r1, r1, r4
   22a90:	eor	r0, r0, r5
   22a94:	orrs	r0, r0, r1
   22a98:	bne	22b14 <__assert_fail@plt+0xff58>
   22a9c:	mov	r5, #0
   22aa0:	mov	r4, #0
   22aa4:	ldr	r0, [sp, #28]
   22aa8:	ldr	r2, [sp, #32]
   22aac:	mvn	r6, #0
   22ab0:	ands	r8, r0, #16
   22ab4:	beq	22ac8 <__assert_fail@plt+0xff0c>
   22ab8:	subs	r0, r7, r2
   22abc:	mov	r6, #0
   22ac0:	sbcs	r0, r9, #0
   22ac4:	bcs	22ff4 <__assert_fail@plt+0x10438>
   22ac8:	ldr	r0, [sp, #24]
   22acc:	mov	sl, r7
   22ad0:	str	r0, [sp, #36]	; 0x24
   22ad4:	ldr	r0, [sp, #40]	; 0x28
   22ad8:	cmp	r0, #0
   22adc:	beq	22db8 <__assert_fail@plt+0x101fc>
   22ae0:	cmp	r0, #1
   22ae4:	bne	22e24 <__assert_fail@plt+0x10268>
   22ae8:	rsbs	r1, r5, #0
   22aec:	mov	r0, #0
   22af0:	and	r3, sl, #1
   22af4:	ldr	r5, [sp, #36]	; 0x24
   22af8:	sbc	r0, r0, #0
   22afc:	eor	r1, r3, r1
   22b00:	orrs	r0, r1, r0
   22b04:	addne	r4, r4, #1
   22b08:	cmp	r4, #5
   22b0c:	bgt	22dc8 <__assert_fail@plt+0x1020c>
   22b10:	b	22e1c <__assert_fail@plt+0x10260>
   22b14:	ldr	r9, [fp, #20]
   22b18:	mov	r0, r2
   22b1c:	mov	r1, r9
   22b20:	bl	3d38c <__assert_fail@plt+0x2a7d0>
   22b24:	vmov	d8, r0, r1
   22b28:	ldr	r0, [sp, #36]	; 0x24
   22b2c:	mov	r1, r4
   22b30:	bl	3d38c <__assert_fail@plt+0x2a7d0>
   22b34:	mov	r6, r0
   22b38:	mov	r7, r1
   22b3c:	mov	r0, sl
   22b40:	mov	r1, r8
   22b44:	bl	3d38c <__assert_fail@plt+0x2a7d0>
   22b48:	vmov	d17, r6, r7
   22b4c:	ldr	r7, [sp, #28]
   22b50:	vmov	d16, r0, r1
   22b54:	vdiv.f64	d16, d16, d8
   22b58:	vmul.f64	d8, d16, d17
   22b5c:	tst	r7, #16
   22b60:	bne	22bd4 <__assert_fail@plt+0x10018>
   22b64:	ldr	r0, [sp, #40]	; 0x28
   22b68:	ldr	sl, [sp, #20]
   22b6c:	cmp	r0, #1
   22b70:	beq	22d74 <__assert_fail@plt+0x101b8>
   22b74:	vldr	d16, [pc, #780]	; 22e88 <__assert_fail@plt+0x102cc>
   22b78:	ldr	r8, [sp, #24]
   22b7c:	vcmpe.f64	d8, d16
   22b80:	vmrs	APSR_nzcv, fpscr
   22b84:	bpl	22d78 <__assert_fail@plt+0x101bc>
   22b88:	mov	r6, r0
   22b8c:	vmov	r0, r1, d8
   22b90:	bl	3d520 <__assert_fail@plt+0x2a964>
   22b94:	mov	r4, r0
   22b98:	mov	r5, r1
   22b9c:	bl	3d38c <__assert_fail@plt+0x2a7d0>
   22ba0:	vmov	d16, r0, r1
   22ba4:	clz	r0, r6
   22ba8:	mov	r2, #0
   22bac:	vcmp.f64	d8, d16
   22bb0:	lsr	r0, r0, #5
   22bb4:	vmrs	APSR_nzcv, fpscr
   22bb8:	movwne	r2, #1
   22bbc:	and	r0, r0, r2
   22bc0:	adds	r0, r0, r4
   22bc4:	adc	r1, r5, #0
   22bc8:	bl	3d38c <__assert_fail@plt+0x2a7d0>
   22bcc:	vmov	d8, r0, r1
   22bd0:	b	22d78 <__assert_fail@plt+0x101bc>
   22bd4:	ldr	r0, [sp, #32]
   22bd8:	vmov.f64	d16, #112	; 0x3f800000  1.0
   22bdc:	mov	r6, #0
   22be0:	vmov	s0, r0
   22be4:	vcvt.f64.u32	d17, s0
   22be8:	ldr	sl, [sp, #20]
   22bec:	add	r6, r6, #1
   22bf0:	vmul.f64	d16, d16, d17
   22bf4:	cmp	r6, #7
   22bf8:	vmulls.f64	d18, d16, d17
   22bfc:	vcmpels.f64	d18, d8
   22c00:	vmrsls	APSR_nzcv, fpscr
   22c04:	bls	22bec <__assert_fail@plt+0x10030>
   22c08:	ldr	r0, [sp, #40]	; 0x28
   22c0c:	ldr	r8, [sp, #24]
   22c10:	ldr	r5, [sp, #8]
   22c14:	vdiv.f64	d8, d8, d16
   22c18:	vmov.f64	d16, d8
   22c1c:	cmp	r0, #1
   22c20:	beq	22c84 <__assert_fail@plt+0x100c8>
   22c24:	vldr	d16, [pc, #604]	; 22e88 <__assert_fail@plt+0x102cc>
   22c28:	vcmpe.f64	d8, d16
   22c2c:	vmov.f64	d16, d8
   22c30:	vmrs	APSR_nzcv, fpscr
   22c34:	bpl	22c84 <__assert_fail@plt+0x100c8>
   22c38:	vmov	r0, r1, d8
   22c3c:	bl	3d520 <__assert_fail@plt+0x2a964>
   22c40:	mov	r4, r0
   22c44:	mov	r5, r1
   22c48:	bl	3d38c <__assert_fail@plt+0x2a7d0>
   22c4c:	vmov	d16, r0, r1
   22c50:	ldr	r0, [sp, #40]	; 0x28
   22c54:	mov	r2, #0
   22c58:	vcmp.f64	d8, d16
   22c5c:	vmrs	APSR_nzcv, fpscr
   22c60:	movwne	r2, #1
   22c64:	clz	r0, r0
   22c68:	lsr	r0, r0, #5
   22c6c:	and	r0, r0, r2
   22c70:	adds	r0, r0, r4
   22c74:	adc	r1, r5, #0
   22c78:	ldr	r5, [sp, #8]
   22c7c:	bl	3d38c <__assert_fail@plt+0x2a7d0>
   22c80:	vmov	d16, r0, r1
   22c84:	movw	r1, #8826	; 0x227a
   22c88:	vmov	r2, r3, d16
   22c8c:	mov	r0, sl
   22c90:	movt	r1, #4
   22c94:	bl	12a60 <sprintf@plt>
   22c98:	ldr	r1, [sp, #16]
   22c9c:	mov	r0, #3
   22ca0:	cmp	r1, #0
   22ca4:	movwne	r0, #2
   22ca8:	add	r4, r0, r5
   22cac:	mov	r0, sl
   22cb0:	bl	1288c <strlen@plt>
   22cb4:	cmp	r4, r0
   22cb8:	bcc	22cdc <__assert_fail@plt+0x10120>
   22cbc:	mov	r2, r0
   22cc0:	add	r5, r5, #1
   22cc4:	tst	r7, #8
   22cc8:	beq	22da0 <__assert_fail@plt+0x101e4>
   22ccc:	add	r0, sl, r2
   22cd0:	ldrb	r0, [r0, #-1]
   22cd4:	cmp	r0, #48	; 0x30
   22cd8:	bne	22da0 <__assert_fail@plt+0x101e4>
   22cdc:	ldr	r0, [sp, #40]	; 0x28
   22ce0:	vmov.f64	d9, #36	; 0x41200000  10.0
   22ce4:	vmul.f64	d8, d8, d9
   22ce8:	cmp	r0, #1
   22cec:	beq	22d48 <__assert_fail@plt+0x1018c>
   22cf0:	vldr	d16, [pc, #400]	; 22e88 <__assert_fail@plt+0x102cc>
   22cf4:	vcmpe.f64	d8, d16
   22cf8:	vmrs	APSR_nzcv, fpscr
   22cfc:	bpl	22d48 <__assert_fail@plt+0x1018c>
   22d00:	vmov	r0, r1, d8
   22d04:	bl	3d520 <__assert_fail@plt+0x2a964>
   22d08:	mov	r4, r0
   22d0c:	mov	r5, r1
   22d10:	bl	3d38c <__assert_fail@plt+0x2a7d0>
   22d14:	vmov	d16, r0, r1
   22d18:	ldr	r0, [sp, #40]	; 0x28
   22d1c:	mov	r2, #0
   22d20:	vcmp.f64	d8, d16
   22d24:	vmrs	APSR_nzcv, fpscr
   22d28:	movwne	r2, #1
   22d2c:	clz	r0, r0
   22d30:	lsr	r0, r0, #5
   22d34:	and	r0, r0, r2
   22d38:	adds	r0, r0, r4
   22d3c:	adc	r1, r5, #0
   22d40:	bl	3d38c <__assert_fail@plt+0x2a7d0>
   22d44:	vmov	d8, r0, r1
   22d48:	movw	r1, #8820	; 0x2274
   22d4c:	vdiv.f64	d16, d8, d9
   22d50:	mov	r0, sl
   22d54:	vmov	r2, r3, d16
   22d58:	movt	r1, #4
   22d5c:	bl	12a60 <sprintf@plt>
   22d60:	mov	r0, sl
   22d64:	bl	1288c <strlen@plt>
   22d68:	mov	r2, r0
   22d6c:	mov	r5, #0
   22d70:	b	22da0 <__assert_fail@plt+0x101e4>
   22d74:	ldr	r8, [sp, #24]
   22d78:	movw	r1, #8820	; 0x2274
   22d7c:	vmov	r2, r3, d8
   22d80:	mov	r0, sl
   22d84:	movt	r1, #4
   22d88:	bl	12a60 <sprintf@plt>
   22d8c:	mov	r0, sl
   22d90:	bl	1288c <strlen@plt>
   22d94:	mov	r2, r0
   22d98:	mov	r5, #0
   22d9c:	mvn	r6, #0
   22da0:	sub	r4, r8, r2
   22da4:	mov	r1, sl
   22da8:	mov	r0, r4
   22dac:	bl	1255c <memmove@plt>
   22db0:	sub	r5, r8, r5
   22db4:	b	22e74 <__assert_fail@plt+0x102b8>
   22db8:	add	r0, r4, r5
   22dbc:	ldr	r5, [sp, #36]	; 0x24
   22dc0:	cmp	r0, #1
   22dc4:	blt	22e1c <__assert_fail@plt+0x10260>
   22dc8:	adds	sl, sl, #1
   22dcc:	adc	r9, r9, #0
   22dd0:	cmp	r6, #7
   22dd4:	bgt	22e1c <__assert_fail@plt+0x10260>
   22dd8:	cmp	r8, #0
   22ddc:	beq	22e1c <__assert_fail@plt+0x10260>
   22de0:	eor	r0, sl, r2
   22de4:	orrs	r0, r0, r9
   22de8:	ldreq	r0, [sp, #28]
   22dec:	addeq	r6, r6, #1
   22df0:	moveq	r9, #0
   22df4:	moveq	sl, #1
   22df8:	tsteq	r0, #8
   22dfc:	bne	22e1c <__assert_fail@plt+0x10260>
   22e00:	ldr	r2, [sp, #8]
   22e04:	mov	r0, #48	; 0x30
   22e08:	ldr	r1, [sp, #4]
   22e0c:	strb	r0, [r5, #-1]!
   22e10:	sub	r5, r5, r2
   22e14:	mov	r0, r5
   22e18:	bl	125c8 <memcpy@plt>
   22e1c:	ldr	r8, [sp, #24]
   22e20:	b	22e2c <__assert_fail@plt+0x10270>
   22e24:	ldr	r8, [sp, #24]
   22e28:	ldr	r5, [sp, #36]	; 0x24
   22e2c:	mov	r4, r5
   22e30:	mov	r0, sl
   22e34:	mov	r1, r9
   22e38:	mov	r2, #10
   22e3c:	mov	r3, #0
   22e40:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   22e44:	add	r2, r0, r0, lsl #2
   22e48:	sub	r2, sl, r2, lsl #1
   22e4c:	orr	r2, r2, #48	; 0x30
   22e50:	strb	r2, [r4, #-1]!
   22e54:	rsbs	r2, sl, #9
   22e58:	mov	sl, r0
   22e5c:	rscs	r2, r9, #0
   22e60:	mov	r9, r1
   22e64:	bcc	22e30 <__assert_fail@plt+0x10274>
   22e68:	ldr	r7, [sp, #28]
   22e6c:	ldr	r9, [fp, #20]
   22e70:	ldr	sl, [sp, #20]
   22e74:	tst	r7, #4
   22e78:	bne	22e90 <__assert_fail@plt+0x102d4>
   22e7c:	ldr	r3, [sp, #32]
   22e80:	ldr	r5, [fp, #16]
   22e84:	b	22fa4 <__assert_fail@plt+0x103e8>
   22e88:	andeq	r0, r0, r0
   22e8c:	mvnsmi	r0, #0
   22e90:	ldr	r0, [sp, #44]	; 0x2c
   22e94:	mov	r7, r5
   22e98:	str	r6, [sp, #8]
   22e9c:	sub	r5, r5, r4
   22ea0:	bl	1288c <strlen@plt>
   22ea4:	add	r8, sp, #48	; 0x30
   22ea8:	str	r0, [sp, #40]	; 0x28
   22eac:	mov	r1, r4
   22eb0:	mov	r2, r5
   22eb4:	mov	r0, r8
   22eb8:	bl	125c8 <memcpy@plt>
   22ebc:	ldr	r0, [sp, #12]
   22ec0:	ldrb	r6, [r0]
   22ec4:	cmp	r6, #255	; 0xff
   22ec8:	mov	r9, r6
   22ecc:	moveq	r9, r5
   22ed0:	cmp	r6, #0
   22ed4:	mvneq	r9, #0
   22ed8:	cmp	r9, r5
   22edc:	movhi	r9, r5
   22ee0:	sub	r4, r7, r9
   22ee4:	sub	r7, r5, r9
   22ee8:	mov	r2, r9
   22eec:	add	r1, r8, r7
   22ef0:	mov	r0, r4
   22ef4:	bl	125c8 <memcpy@plt>
   22ef8:	cmp	r7, #0
   22efc:	beq	22f88 <__assert_fail@plt+0x103cc>
   22f00:	clz	r0, r6
   22f04:	ldr	r8, [sp, #12]
   22f08:	lsr	sl, r0, #5
   22f0c:	ldr	r0, [sp, #40]	; 0x28
   22f10:	rsb	r0, r0, #0
   22f14:	str	r0, [sp, #36]	; 0x24
   22f18:	ldr	r0, [sp, #36]	; 0x24
   22f1c:	ldr	r1, [sp, #44]	; 0x2c
   22f20:	ldr	r2, [sp, #40]	; 0x28
   22f24:	add	r4, r4, r0
   22f28:	mov	r0, r4
   22f2c:	bl	125c8 <memcpy@plt>
   22f30:	tst	sl, #1
   22f34:	add	r0, sp, #48	; 0x30
   22f38:	addeq	r8, r8, #1
   22f3c:	ldrb	r6, [r8]
   22f40:	cmp	r6, #255	; 0xff
   22f44:	mov	r5, r6
   22f48:	moveq	r5, r7
   22f4c:	cmp	r6, #0
   22f50:	moveq	r5, r9
   22f54:	cmp	r7, r5
   22f58:	movcc	r5, r7
   22f5c:	sub	r7, r7, r5
   22f60:	sub	r4, r4, r5
   22f64:	mov	r2, r5
   22f68:	add	r1, r0, r7
   22f6c:	mov	r0, r4
   22f70:	bl	125c8 <memcpy@plt>
   22f74:	clz	r0, r6
   22f78:	cmp	r7, #0
   22f7c:	mov	r9, r5
   22f80:	lsr	sl, r0, #5
   22f84:	bne	22f18 <__assert_fail@plt+0x1035c>
   22f88:	ldr	r8, [sp, #24]
   22f8c:	ldr	sl, [sp, #20]
   22f90:	ldr	r7, [sp, #28]
   22f94:	ldr	r3, [sp, #32]
   22f98:	ldr	r9, [fp, #20]
   22f9c:	ldr	r5, [fp, #16]
   22fa0:	ldr	r6, [sp, #8]
   22fa4:	tst	r7, #128	; 0x80
   22fa8:	beq	23110 <__assert_fail@plt+0x10554>
   22fac:	cmn	r6, #1
   22fb0:	bgt	230a8 <__assert_fail@plt+0x104ec>
   22fb4:	subs	r0, r5, #2
   22fb8:	mov	r6, #0
   22fbc:	sbcs	r0, r9, #0
   22fc0:	bcc	230a8 <__assert_fail@plt+0x104ec>
   22fc4:	mov	r0, #0
   22fc8:	mov	r1, #1
   22fcc:	mov	r6, #0
   22fd0:	cmp	r6, #7
   22fd4:	beq	230a4 <__assert_fail@plt+0x104e8>
   22fd8:	umull	r1, r2, r1, r3
   22fdc:	add	r6, r6, #1
   22fe0:	mla	r0, r0, r3, r2
   22fe4:	subs	r2, r1, r5
   22fe8:	sbcs	r2, r0, r9
   22fec:	bcc	22fd0 <__assert_fail@plt+0x10414>
   22ff0:	b	230a8 <__assert_fail@plt+0x104ec>
   22ff4:	mov	r6, #0
   22ff8:	mov	r0, r7
   22ffc:	mov	r1, r9
   23000:	mov	r3, #0
   23004:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   23008:	ldr	r2, [sp, #32]
   2300c:	mov	sl, r0
   23010:	mov	r9, r1
   23014:	mls	r0, r0, r2, r7
   23018:	add	r0, r0, r0, lsl #2
   2301c:	add	r0, r4, r0, lsl #1
   23020:	udiv	r4, r0, r2
   23024:	mls	r0, r4, r2, r0
   23028:	lsl	r0, r0, #1
   2302c:	add	r0, r0, r5, lsr #1
   23030:	cmp	r0, r2
   23034:	bcs	2304c <__assert_fail@plt+0x10490>
   23038:	add	r1, r0, r5
   2303c:	cmn	r0, r5
   23040:	movwne	r1, #1
   23044:	mov	r5, r1
   23048:	b	2305c <__assert_fail@plt+0x104a0>
   2304c:	add	r0, r0, r5
   23050:	mov	r5, #2
   23054:	cmp	r2, r0
   23058:	movwcc	r5, #3
   2305c:	add	r6, r6, #1
   23060:	cmp	r6, #7
   23064:	bhi	23078 <__assert_fail@plt+0x104bc>
   23068:	subs	r0, sl, r2
   2306c:	mov	r7, sl
   23070:	sbcs	r0, r9, #0
   23074:	bcs	22ff8 <__assert_fail@plt+0x1043c>
   23078:	rsbs	r0, sl, #9
   2307c:	rscs	r0, r9, #0
   23080:	bcc	2312c <__assert_fail@plt+0x10570>
   23084:	ldr	r0, [sp, #40]	; 0x28
   23088:	cmp	r0, #1
   2308c:	bne	23134 <__assert_fail@plt+0x10578>
   23090:	and	r0, r4, #1
   23094:	add	r0, r5, r0
   23098:	cmp	r0, #2
   2309c:	bhi	23144 <__assert_fail@plt+0x10588>
   230a0:	b	23178 <__assert_fail@plt+0x105bc>
   230a4:	mov	r6, #8
   230a8:	and	r0, r7, #256	; 0x100
   230ac:	tst	r7, #64	; 0x40
   230b0:	orrsne	r1, r6, r0
   230b4:	movne	r1, #32
   230b8:	addne	r8, sl, #648	; 0x288
   230bc:	strbne	r1, [sl, #647]	; 0x287
   230c0:	cmp	r6, #0
   230c4:	beq	230ec <__assert_fail@plt+0x10530>
   230c8:	ldr	r1, [sp, #16]
   230cc:	cmp	r1, #0
   230d0:	moveq	r1, #107	; 0x6b
   230d4:	cmpeq	r6, #1
   230d8:	beq	230e8 <__assert_fail@plt+0x1052c>
   230dc:	movw	r1, #8880	; 0x22b0
   230e0:	movt	r1, #4
   230e4:	ldrb	r1, [r1, r6]
   230e8:	strb	r1, [r8], #1
   230ec:	cmp	r0, #0
   230f0:	beq	23110 <__assert_fail@plt+0x10554>
   230f4:	ldr	r0, [sp, #16]
   230f8:	cmp	r0, #0
   230fc:	cmpne	r6, #0
   23100:	movne	r0, #105	; 0x69
   23104:	strbne	r0, [r8], #1
   23108:	mov	r0, #66	; 0x42
   2310c:	strb	r0, [r8], #1
   23110:	mov	r0, #0
   23114:	strb	r0, [r8]
   23118:	mov	r0, r4
   2311c:	sub	sp, fp, #48	; 0x30
   23120:	vpop	{d8-d9}
   23124:	add	sp, sp, #4
   23128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2312c:	ldr	r0, [sp, #24]
   23130:	b	22ad0 <__assert_fail@plt+0xff14>
   23134:	cmp	r0, #0
   23138:	bne	23178 <__assert_fail@plt+0x105bc>
   2313c:	cmp	r5, #0
   23140:	beq	23178 <__assert_fail@plt+0x105bc>
   23144:	adds	r0, sl, #1
   23148:	add	r4, r4, #1
   2314c:	mov	r5, #0
   23150:	adc	r1, r9, #0
   23154:	cmp	r4, #10
   23158:	bne	23178 <__assert_fail@plt+0x105bc>
   2315c:	rsbs	r3, r0, #9
   23160:	mov	r4, #0
   23164:	mov	sl, r0
   23168:	mov	r9, r1
   2316c:	mov	r5, #0
   23170:	rscs	r3, r1, #0
   23174:	bcc	231c8 <__assert_fail@plt+0x1060c>
   23178:	ldr	r0, [sp, #28]
   2317c:	tst	r0, #8
   23180:	beq	23198 <__assert_fail@plt+0x105dc>
   23184:	cmp	r4, #0
   23188:	bne	23198 <__assert_fail@plt+0x105dc>
   2318c:	ldr	r0, [sp, #24]
   23190:	str	r0, [sp, #36]	; 0x24
   23194:	b	231c0 <__assert_fail@plt+0x10604>
   23198:	ldr	r1, [sp, #20]
   2319c:	ldr	r2, [sp, #8]
   231a0:	add	r0, r4, #48	; 0x30
   231a4:	strb	r0, [r1, #646]!	; 0x286
   231a8:	sub	r0, r1, r2
   231ac:	ldr	r1, [sp, #4]
   231b0:	str	r0, [sp, #36]	; 0x24
   231b4:	bl	125c8 <memcpy@plt>
   231b8:	ldr	r2, [sp, #32]
   231bc:	mov	r5, #0
   231c0:	mov	r4, #0
   231c4:	b	22ad4 <__assert_fail@plt+0xff18>
   231c8:	ldr	r0, [sp, #24]
   231cc:	mov	r5, #0
   231d0:	mov	sl, #10
   231d4:	mov	r9, #0
   231d8:	b	22ad0 <__assert_fail@plt+0xff14>
   231dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   231e0:	add	fp, sp, #24
   231e4:	sub	sp, sp, #8
   231e8:	mov	r4, r2
   231ec:	mov	r8, r1
   231f0:	cmp	r0, #0
   231f4:	bne	23220 <__assert_fail@plt+0x10664>
   231f8:	movw	r0, #63482	; 0xf7fa
   231fc:	movt	r0, #3
   23200:	bl	127cc <getenv@plt>
   23204:	cmp	r0, #0
   23208:	bne	23220 <__assert_fail@plt+0x10664>
   2320c:	movw	r0, #8832	; 0x2280
   23210:	movt	r0, #4
   23214:	bl	127cc <getenv@plt>
   23218:	cmp	r0, #0
   2321c:	beq	2333c <__assert_fail@plt+0x10780>
   23220:	mov	r6, r0
   23224:	movw	r7, #8904	; 0x22c8
   23228:	movw	r1, #8892	; 0x22bc
   2322c:	mov	r3, #4
   23230:	ldrb	r5, [r6], #1
   23234:	movt	r7, #4
   23238:	movt	r1, #4
   2323c:	mov	r2, r7
   23240:	cmp	r5, #39	; 0x27
   23244:	movne	r6, r0
   23248:	mov	r0, r6
   2324c:	bl	3c4b8 <__assert_fail@plt+0x298fc>
   23250:	sub	r1, r5, #39	; 0x27
   23254:	cmp	r0, #0
   23258:	clz	r1, r1
   2325c:	lsr	r1, r1, #5
   23260:	lsl	r5, r1, #2
   23264:	blt	2328c <__assert_fail@plt+0x106d0>
   23268:	ldr	r0, [r7, r0, lsl #2]
   2326c:	mov	r2, #1
   23270:	mov	r1, #0
   23274:	str	r2, [r4]
   23278:	str	r1, [r4, #4]
   2327c:	orr	r1, r0, r5
   23280:	mov	r0, #0
   23284:	str	r1, [r8]
   23288:	b	232bc <__assert_fail@plt+0x10700>
   2328c:	movw	r0, #8842	; 0x228a
   23290:	add	r1, sp, #4
   23294:	mov	r2, #0
   23298:	mov	r3, r4
   2329c:	mov	r7, #0
   232a0:	movt	r0, #4
   232a4:	str	r0, [sp]
   232a8:	mov	r0, r6
   232ac:	bl	2b374 <__assert_fail@plt+0x187b8>
   232b0:	cmp	r0, #0
   232b4:	beq	232f8 <__assert_fail@plt+0x1073c>
   232b8:	str	r7, [r8]
   232bc:	ldrd	r2, [r4]
   232c0:	orrs	r1, r2, r3
   232c4:	bne	232f0 <__assert_fail@plt+0x10734>
   232c8:	movw	r0, #63461	; 0xf7e5
   232cc:	movt	r0, #3
   232d0:	bl	127cc <getenv@plt>
   232d4:	cmp	r0, #0
   232d8:	mov	r2, #512	; 0x200
   232dc:	mov	r0, #4
   232e0:	mov	r1, #0
   232e4:	movweq	r2, #1024	; 0x400
   232e8:	str	r2, [r4]
   232ec:	str	r1, [r4, #4]
   232f0:	sub	sp, fp, #24
   232f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   232f8:	ldrb	r0, [r6]
   232fc:	sub	r0, r0, #48	; 0x30
   23300:	uxtb	r0, r0
   23304:	cmp	r0, #10
   23308:	bcc	23334 <__assert_fail@plt+0x10778>
   2330c:	ldr	r0, [sp, #4]
   23310:	cmp	r0, r6
   23314:	beq	23364 <__assert_fail@plt+0x107a8>
   23318:	ldrb	r2, [r6, #1]
   2331c:	add	r1, r6, #1
   23320:	mov	r6, r1
   23324:	sub	r2, r2, #48	; 0x30
   23328:	uxtb	r2, r2
   2332c:	cmp	r2, #10
   23330:	bcs	23310 <__assert_fail@plt+0x10754>
   23334:	mov	r1, r5
   23338:	b	23280 <__assert_fail@plt+0x106c4>
   2333c:	movw	r0, #63461	; 0xf7e5
   23340:	movt	r0, #3
   23344:	bl	127cc <getenv@plt>
   23348:	mov	r2, #512	; 0x200
   2334c:	cmp	r0, #0
   23350:	mov	r1, #0
   23354:	movweq	r2, #1024	; 0x400
   23358:	str	r2, [r4]
   2335c:	str	r1, [r4, #4]
   23360:	b	23280 <__assert_fail@plt+0x106c4>
   23364:	ldrb	r2, [r0, #-1]
   23368:	orr	r1, r5, #384	; 0x180
   2336c:	cmp	r2, #66	; 0x42
   23370:	mov	r2, r1
   23374:	orrne	r2, r5, #128	; 0x80
   23378:	bne	2338c <__assert_fail@plt+0x107d0>
   2337c:	ldrb	r0, [r0, #-2]
   23380:	cmp	r0, #105	; 0x69
   23384:	orreq	r1, r2, #32
   23388:	b	23280 <__assert_fail@plt+0x106c4>
   2338c:	orr	r1, r2, #32
   23390:	b	23280 <__assert_fail@plt+0x106c4>
   23394:	push	{r4, r5, r6, r7, fp, lr}
   23398:	add	fp, sp, #16
   2339c:	movw	r7, #19724	; 0x4d0c
   233a0:	mov	r4, r0
   233a4:	movt	r7, #5
   233a8:	ldr	r5, [r7]
   233ac:	b	233c0 <__assert_fail@plt+0x10804>
   233b0:	ldr	r0, [r5]
   233b4:	cmp	r0, r4
   233b8:	beq	2341c <__assert_fail@plt+0x10860>
   233bc:	ldr	r5, [r5, #4]
   233c0:	cmp	r5, #0
   233c4:	bne	233b0 <__assert_fail@plt+0x107f4>
   233c8:	mov	r0, r4
   233cc:	bl	124e4 <getpwuid@plt>
   233d0:	cmp	r0, #0
   233d4:	beq	233e0 <__assert_fail@plt+0x10824>
   233d8:	ldr	r6, [r0]
   233dc:	b	233e8 <__assert_fail@plt+0x1082c>
   233e0:	movw	r6, #63055	; 0xf64f
   233e4:	movt	r6, #3
   233e8:	mov	r0, r6
   233ec:	bl	1288c <strlen@plt>
   233f0:	add	r0, r0, #12
   233f4:	bic	r0, r0, #3
   233f8:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   233fc:	mov	r5, r0
   23400:	str	r4, [r0]
   23404:	add	r0, r0, #8
   23408:	mov	r1, r6
   2340c:	bl	12748 <strcpy@plt>
   23410:	ldr	r0, [r7]
   23414:	str	r5, [r7]
   23418:	str	r0, [r5, #4]
   2341c:	ldrb	r0, [r5, #8]!
   23420:	cmp	r0, #0
   23424:	moveq	r5, r0
   23428:	mov	r0, r5
   2342c:	pop	{r4, r5, r6, r7, fp, pc}
   23430:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23434:	add	fp, sp, #24
   23438:	movw	r8, #19724	; 0x4d0c
   2343c:	mov	r4, r0
   23440:	movt	r8, #5
   23444:	ldr	r5, [r8]
   23448:	cmp	r5, #0
   2344c:	beq	23480 <__assert_fail@plt+0x108c4>
   23450:	ldrb	r6, [r4]
   23454:	mov	r0, r5
   23458:	ldrb	r1, [r0, #8]!
   2345c:	cmp	r1, r6
   23460:	bne	23474 <__assert_fail@plt+0x108b8>
   23464:	mov	r1, r4
   23468:	bl	124cc <strcmp@plt>
   2346c:	cmp	r0, #0
   23470:	beq	23520 <__assert_fail@plt+0x10964>
   23474:	ldr	r5, [r5, #4]
   23478:	cmp	r5, #0
   2347c:	bne	23454 <__assert_fail@plt+0x10898>
   23480:	movw	r7, #19728	; 0x4d10
   23484:	movt	r7, #5
   23488:	ldr	r5, [r7]
   2348c:	cmp	r5, #0
   23490:	beq	234c4 <__assert_fail@plt+0x10908>
   23494:	ldrb	r6, [r4]
   23498:	mov	r0, r5
   2349c:	ldrb	r1, [r0, #8]!
   234a0:	cmp	r1, r6
   234a4:	bne	234b8 <__assert_fail@plt+0x108fc>
   234a8:	mov	r1, r4
   234ac:	bl	124cc <strcmp@plt>
   234b0:	cmp	r0, #0
   234b4:	beq	2351c <__assert_fail@plt+0x10960>
   234b8:	ldr	r5, [r5, #4]
   234bc:	cmp	r5, #0
   234c0:	bne	23498 <__assert_fail@plt+0x108dc>
   234c4:	mov	r0, r4
   234c8:	bl	124a8 <getpwnam@plt>
   234cc:	mov	r6, r0
   234d0:	mov	r0, r4
   234d4:	bl	1288c <strlen@plt>
   234d8:	add	r0, r0, #12
   234dc:	bic	r0, r0, #3
   234e0:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   234e4:	mov	r5, r0
   234e8:	add	r0, r0, #8
   234ec:	mov	r1, r4
   234f0:	bl	12748 <strcpy@plt>
   234f4:	cmp	r6, #0
   234f8:	beq	23510 <__assert_fail@plt+0x10954>
   234fc:	ldr	r0, [r6, #8]
   23500:	ldr	r1, [r8]
   23504:	stm	r5, {r0, r1}
   23508:	str	r5, [r8]
   2350c:	b	23520 <__assert_fail@plt+0x10964>
   23510:	ldr	r0, [r7]
   23514:	str	r5, [r7]
   23518:	str	r0, [r5, #4]
   2351c:	mov	r5, #0
   23520:	mov	r0, r5
   23524:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23528:	push	{r4, r5, r6, r7, fp, lr}
   2352c:	add	fp, sp, #16
   23530:	movw	r7, #19732	; 0x4d14
   23534:	mov	r4, r0
   23538:	movt	r7, #5
   2353c:	ldr	r5, [r7]
   23540:	b	23554 <__assert_fail@plt+0x10998>
   23544:	ldr	r0, [r5]
   23548:	cmp	r0, r4
   2354c:	beq	235b0 <__assert_fail@plt+0x109f4>
   23550:	ldr	r5, [r5, #4]
   23554:	cmp	r5, #0
   23558:	bne	23544 <__assert_fail@plt+0x10988>
   2355c:	mov	r0, r4
   23560:	bl	12b98 <getgrgid@plt>
   23564:	cmp	r0, #0
   23568:	beq	23574 <__assert_fail@plt+0x109b8>
   2356c:	ldr	r6, [r0]
   23570:	b	2357c <__assert_fail@plt+0x109c0>
   23574:	movw	r6, #63055	; 0xf64f
   23578:	movt	r6, #3
   2357c:	mov	r0, r6
   23580:	bl	1288c <strlen@plt>
   23584:	add	r0, r0, #12
   23588:	bic	r0, r0, #3
   2358c:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   23590:	mov	r5, r0
   23594:	str	r4, [r0]
   23598:	add	r0, r0, #8
   2359c:	mov	r1, r6
   235a0:	bl	12748 <strcpy@plt>
   235a4:	ldr	r0, [r7]
   235a8:	str	r5, [r7]
   235ac:	str	r0, [r5, #4]
   235b0:	ldrb	r0, [r5, #8]!
   235b4:	cmp	r0, #0
   235b8:	moveq	r5, r0
   235bc:	mov	r0, r5
   235c0:	pop	{r4, r5, r6, r7, fp, pc}
   235c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   235c8:	add	fp, sp, #24
   235cc:	movw	r8, #19732	; 0x4d14
   235d0:	mov	r4, r0
   235d4:	movt	r8, #5
   235d8:	ldr	r5, [r8]
   235dc:	cmp	r5, #0
   235e0:	beq	23614 <__assert_fail@plt+0x10a58>
   235e4:	ldrb	r6, [r4]
   235e8:	mov	r0, r5
   235ec:	ldrb	r1, [r0, #8]!
   235f0:	cmp	r1, r6
   235f4:	bne	23608 <__assert_fail@plt+0x10a4c>
   235f8:	mov	r1, r4
   235fc:	bl	124cc <strcmp@plt>
   23600:	cmp	r0, #0
   23604:	beq	236b4 <__assert_fail@plt+0x10af8>
   23608:	ldr	r5, [r5, #4]
   2360c:	cmp	r5, #0
   23610:	bne	235e8 <__assert_fail@plt+0x10a2c>
   23614:	movw	r7, #19736	; 0x4d18
   23618:	movt	r7, #5
   2361c:	ldr	r5, [r7]
   23620:	cmp	r5, #0
   23624:	beq	23658 <__assert_fail@plt+0x10a9c>
   23628:	ldrb	r6, [r4]
   2362c:	mov	r0, r5
   23630:	ldrb	r1, [r0, #8]!
   23634:	cmp	r1, r6
   23638:	bne	2364c <__assert_fail@plt+0x10a90>
   2363c:	mov	r1, r4
   23640:	bl	124cc <strcmp@plt>
   23644:	cmp	r0, #0
   23648:	beq	236b0 <__assert_fail@plt+0x10af4>
   2364c:	ldr	r5, [r5, #4]
   23650:	cmp	r5, #0
   23654:	bne	2362c <__assert_fail@plt+0x10a70>
   23658:	mov	r0, r4
   2365c:	bl	12ba4 <getgrnam@plt>
   23660:	mov	r6, r0
   23664:	mov	r0, r4
   23668:	bl	1288c <strlen@plt>
   2366c:	add	r0, r0, #12
   23670:	bic	r0, r0, #3
   23674:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   23678:	mov	r5, r0
   2367c:	add	r0, r0, #8
   23680:	mov	r1, r4
   23684:	bl	12748 <strcpy@plt>
   23688:	cmp	r6, #0
   2368c:	beq	236a4 <__assert_fail@plt+0x10ae8>
   23690:	ldr	r0, [r6, #8]
   23694:	ldr	r1, [r8]
   23698:	stm	r5, {r0, r1}
   2369c:	str	r5, [r8]
   236a0:	b	236b4 <__assert_fail@plt+0x10af8>
   236a4:	ldr	r0, [r7]
   236a8:	str	r5, [r7]
   236ac:	str	r0, [r5, #4]
   236b0:	mov	r5, #0
   236b4:	mov	r0, r5
   236b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   236bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236c0:	add	fp, sp, #28
   236c4:	sub	sp, sp, #308	; 0x134
   236c8:	mov	r5, r1
   236cc:	mov	r7, r0
   236d0:	bl	12730 <__ctype_get_mb_cur_max@plt>
   236d4:	cmp	r0, #2
   236d8:	bcc	23a54 <__assert_fail@plt+0x10e98>
   236dc:	mov	r4, #0
   236e0:	sub	r0, fp, #88	; 0x58
   236e4:	str	r4, [fp, #-80]	; 0xffffffb0
   236e8:	str	r4, [fp, #-84]	; 0xffffffac
   236ec:	strb	r4, [fp, #-88]	; 0xffffffa8
   236f0:	str	r5, [fp, #-72]	; 0xffffffb8
   236f4:	strb	r4, [fp, #-76]	; 0xffffffb4
   236f8:	bl	244a4 <__assert_fail@plt+0x118e8>
   236fc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23700:	cmp	r0, #0
   23704:	beq	23714 <__assert_fail@plt+0x10b58>
   23708:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2370c:	cmp	r0, #0
   23710:	beq	23b74 <__assert_fail@plt+0x10fb8>
   23714:	add	r0, sp, #136	; 0x88
   23718:	str	r4, [fp, #-136]	; 0xffffff78
   2371c:	str	r4, [fp, #-140]	; 0xffffff74
   23720:	strb	r4, [fp, #-144]	; 0xffffff70
   23724:	str	r5, [fp, #-128]	; 0xffffff80
   23728:	str	r4, [sp, #144]	; 0x90
   2372c:	str	r4, [sp, #140]	; 0x8c
   23730:	str	r7, [sp, #152]	; 0x98
   23734:	strb	r4, [sp, #136]	; 0x88
   23738:	strb	r4, [fp, #-132]	; 0xffffff7c
   2373c:	str	r7, [sp, #12]
   23740:	strb	r4, [sp, #148]	; 0x94
   23744:	bl	244a4 <__assert_fail@plt+0x118e8>
   23748:	ldrb	r0, [sp, #160]	; 0xa0
   2374c:	cmp	r0, #0
   23750:	beq	23760 <__assert_fail@plt+0x10ba4>
   23754:	ldr	r0, [sp, #164]	; 0xa4
   23758:	cmp	r0, #0
   2375c:	beq	23b80 <__assert_fail@plt+0x10fc4>
   23760:	add	r0, sp, #24
   23764:	mov	sl, #0
   23768:	sub	r7, fp, #144	; 0x90
   2376c:	mov	r1, #0
   23770:	mov	r6, #0
   23774:	mov	r9, #0
   23778:	add	r0, r0, #4
   2377c:	str	r0, [sp, #8]
   23780:	mov	r0, #1
   23784:	str	r0, [sp, #16]
   23788:	add	r0, r9, r9, lsl #2
   2378c:	mov	r8, r6
   23790:	cmp	r6, r0
   23794:	bcc	23844 <__assert_fail@plt+0x10c88>
   23798:	ldr	r0, [sp, #16]
   2379c:	tst	r0, #1
   237a0:	beq	23844 <__assert_fail@plt+0x10c88>
   237a4:	cmp	r9, #10
   237a8:	bcc	23844 <__assert_fail@plt+0x10c88>
   237ac:	subs	r0, r8, r1
   237b0:	beq	237f4 <__assert_fail@plt+0x10c38>
   237b4:	sub	r6, r1, r8
   237b8:	mov	r0, r7
   237bc:	bl	244a4 <__assert_fail@plt+0x118e8>
   237c0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   237c4:	cmp	r0, #0
   237c8:	beq	237d8 <__assert_fail@plt+0x10c1c>
   237cc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   237d0:	cmp	r0, #0
   237d4:	beq	237f4 <__assert_fail@plt+0x10c38>
   237d8:	strb	sl, [fp, #-132]	; 0xffffff7c
   237dc:	adds	r6, r6, #1
   237e0:	ldr	r0, [fp, #-128]	; 0xffffff80
   237e4:	ldr	r1, [fp, #-124]	; 0xffffff84
   237e8:	add	r0, r0, r1
   237ec:	str	r0, [fp, #-128]	; 0xffffff80
   237f0:	bne	237b8 <__assert_fail@plt+0x10bfc>
   237f4:	mov	r0, r7
   237f8:	bl	244a4 <__assert_fail@plt+0x118e8>
   237fc:	ldrb	r0, [fp, #-120]	; 0xffffff88
   23800:	cmp	r0, #0
   23804:	beq	23840 <__assert_fail@plt+0x10c84>
   23808:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2380c:	mov	r1, r8
   23810:	cmp	r0, #0
   23814:	bne	23844 <__assert_fail@plt+0x10c88>
   23818:	ldr	r0, [sp, #12]
   2381c:	mov	r1, r5
   23820:	add	r2, sp, #80	; 0x50
   23824:	bl	23ba8 <__assert_fail@plt+0x10fec>
   23828:	mov	r1, #0
   2382c:	cmp	r0, #0
   23830:	str	r1, [sp, #16]
   23834:	mov	r1, r8
   23838:	beq	23844 <__assert_fail@plt+0x10c88>
   2383c:	b	23b9c <__assert_fail@plt+0x10fe0>
   23840:	mov	r1, r8
   23844:	ldrb	r0, [sp, #160]	; 0xa0
   23848:	add	r6, r8, #1
   2384c:	str	r1, [sp, #20]
   23850:	cmp	r0, #0
   23854:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   23858:	cmpne	r0, #0
   2385c:	bne	23888 <__assert_fail@plt+0x10ccc>
   23860:	ldr	r2, [sp, #156]	; 0x9c
   23864:	ldr	r0, [fp, #-68]	; 0xffffffbc
   23868:	cmp	r2, r0
   2386c:	bne	23a10 <__assert_fail@plt+0x10e54>
   23870:	ldr	r1, [fp, #-72]	; 0xffffffb8
   23874:	ldr	r0, [sp, #152]	; 0x98
   23878:	bl	12628 <memcmp@plt>
   2387c:	cmp	r0, #0
   23880:	bne	23a10 <__assert_fail@plt+0x10e54>
   23884:	b	23898 <__assert_fail@plt+0x10cdc>
   23888:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2388c:	ldr	r1, [sp, #164]	; 0xa4
   23890:	cmp	r1, r0
   23894:	bne	23a10 <__assert_fail@plt+0x10e54>
   23898:	str	r9, [sp, #4]
   2389c:	add	r1, sp, #136	; 0x88
   238a0:	mov	ip, r5
   238a4:	add	r0, sp, #80	; 0x50
   238a8:	ldm	r1!, {r2, r3, r5, r6}
   238ac:	stmia	r0!, {r2, r3, r5, r6}
   238b0:	ldm	r1!, {r2, r3, r4, r5, r6}
   238b4:	stmia	r0!, {r2, r3, r4, r5, r6}
   238b8:	ldm	r1, {r2, r3, r4, r5, r6}
   238bc:	stm	r0, {r2, r3, r4, r5, r6}
   238c0:	strb	sl, [sp, #92]	; 0x5c
   238c4:	str	ip, [sp, #40]	; 0x28
   238c8:	strb	sl, [sp, #24]
   238cc:	mov	r5, ip
   238d0:	ldr	r0, [sp, #96]	; 0x60
   238d4:	ldr	r1, [sp, #100]	; 0x64
   238d8:	add	r0, r0, r1
   238dc:	str	r0, [sp, #96]	; 0x60
   238e0:	ldr	r0, [sp, #8]
   238e4:	str	sl, [r0]
   238e8:	str	sl, [r0, #4]
   238ec:	add	r0, sp, #24
   238f0:	strb	sl, [sp, #36]	; 0x24
   238f4:	bl	244a4 <__assert_fail@plt+0x118e8>
   238f8:	ldrb	r0, [sp, #48]	; 0x30
   238fc:	cmp	r0, #0
   23900:	beq	23910 <__assert_fail@plt+0x10d54>
   23904:	ldr	r0, [sp, #52]	; 0x34
   23908:	cmp	r0, #0
   2390c:	beq	23ba4 <__assert_fail@plt+0x10fe8>
   23910:	strb	sl, [sp, #36]	; 0x24
   23914:	ldr	r0, [sp, #40]	; 0x28
   23918:	ldr	r1, [sp, #44]	; 0x2c
   2391c:	add	r0, r0, r1
   23920:	str	r0, [sp, #40]	; 0x28
   23924:	add	r0, sp, #24
   23928:	bl	244a4 <__assert_fail@plt+0x118e8>
   2392c:	ldrb	r0, [sp, #48]	; 0x30
   23930:	cmp	r0, #0
   23934:	beq	23944 <__assert_fail@plt+0x10d88>
   23938:	ldr	r0, [sp, #52]	; 0x34
   2393c:	cmp	r0, #0
   23940:	beq	23b8c <__assert_fail@plt+0x10fd0>
   23944:	add	r6, r8, #2
   23948:	add	r0, sp, #80	; 0x50
   2394c:	bl	244a4 <__assert_fail@plt+0x118e8>
   23950:	ldr	r0, [sp, #108]	; 0x6c
   23954:	ldrb	r1, [sp, #104]	; 0x68
   23958:	cmp	r0, #0
   2395c:	bne	23968 <__assert_fail@plt+0x10dac>
   23960:	cmp	r1, #0
   23964:	bne	23b7c <__assert_fail@plt+0x10fc0>
   23968:	cmp	r1, #0
   2396c:	ldrbne	r1, [sp, #48]	; 0x30
   23970:	cmpne	r1, #0
   23974:	bne	239b0 <__assert_fail@plt+0x10df4>
   23978:	ldr	r4, [sp, #100]	; 0x64
   2397c:	ldr	r0, [sp, #44]	; 0x2c
   23980:	cmp	r4, r0
   23984:	bne	23a0c <__assert_fail@plt+0x10e50>
   23988:	ldr	r8, [sp, #40]	; 0x28
   2398c:	ldr	r9, [sp, #96]	; 0x60
   23990:	mov	r2, r4
   23994:	mov	r0, r9
   23998:	mov	r1, r8
   2399c:	bl	12628 <memcmp@plt>
   239a0:	cmp	r0, #0
   239a4:	mov	r0, r4
   239a8:	beq	239cc <__assert_fail@plt+0x10e10>
   239ac:	b	23a0c <__assert_fail@plt+0x10e50>
   239b0:	ldr	r1, [sp, #52]	; 0x34
   239b4:	cmp	r0, r1
   239b8:	bne	23a0c <__assert_fail@plt+0x10e50>
   239bc:	ldr	r8, [sp, #40]	; 0x28
   239c0:	ldr	r4, [sp, #44]	; 0x2c
   239c4:	ldr	r9, [sp, #96]	; 0x60
   239c8:	ldr	r0, [sp, #100]	; 0x64
   239cc:	add	r0, r9, r0
   239d0:	strb	sl, [sp, #92]	; 0x5c
   239d4:	strb	sl, [sp, #36]	; 0x24
   239d8:	str	r0, [sp, #96]	; 0x60
   239dc:	add	r0, r8, r4
   239e0:	str	r0, [sp, #40]	; 0x28
   239e4:	add	r0, sp, #24
   239e8:	bl	244a4 <__assert_fail@plt+0x118e8>
   239ec:	ldrb	r0, [sp, #48]	; 0x30
   239f0:	add	r6, r6, #1
   239f4:	cmp	r0, #0
   239f8:	beq	23948 <__assert_fail@plt+0x10d8c>
   239fc:	ldr	r0, [sp, #52]	; 0x34
   23a00:	cmp	r0, #0
   23a04:	bne	23948 <__assert_fail@plt+0x10d8c>
   23a08:	b	23b8c <__assert_fail@plt+0x10fd0>
   23a0c:	ldr	r9, [sp, #4]
   23a10:	mov	r4, #0
   23a14:	add	r9, r9, #1
   23a18:	strb	r4, [sp, #148]	; 0x94
   23a1c:	ldr	r0, [sp, #152]	; 0x98
   23a20:	ldr	r1, [sp, #156]	; 0x9c
   23a24:	add	r0, r0, r1
   23a28:	str	r0, [sp, #152]	; 0x98
   23a2c:	add	r0, sp, #136	; 0x88
   23a30:	bl	244a4 <__assert_fail@plt+0x118e8>
   23a34:	ldrb	r0, [sp, #160]	; 0xa0
   23a38:	ldr	r1, [sp, #20]
   23a3c:	cmp	r0, #0
   23a40:	beq	23788 <__assert_fail@plt+0x10bcc>
   23a44:	ldr	r0, [sp, #164]	; 0xa4
   23a48:	cmp	r0, #0
   23a4c:	bne	23788 <__assert_fail@plt+0x10bcc>
   23a50:	b	23b80 <__assert_fail@plt+0x10fc4>
   23a54:	ldrb	r6, [r5]
   23a58:	cmp	r6, #0
   23a5c:	beq	23b74 <__assert_fail@plt+0x10fb8>
   23a60:	ldrb	r9, [r7]
   23a64:	cmp	r9, #0
   23a68:	beq	23b7c <__assert_fail@plt+0x10fc0>
   23a6c:	mov	r3, #1
   23a70:	mov	ip, #0
   23a74:	mov	lr, r5
   23a78:	mov	r8, #0
   23a7c:	mov	sl, #0
   23a80:	str	r6, [sp, #16]
   23a84:	add	r0, sl, sl, lsl #2
   23a88:	cmp	r8, r0
   23a8c:	bcc	23b1c <__assert_fail@plt+0x10f60>
   23a90:	tst	r3, #1
   23a94:	beq	23b1c <__assert_fail@plt+0x10f60>
   23a98:	cmp	sl, #10
   23a9c:	bcc	23b1c <__assert_fail@plt+0x10f60>
   23aa0:	cmp	lr, #0
   23aa4:	str	r3, [sp, #20]
   23aa8:	beq	23adc <__assert_fail@plt+0x10f20>
   23aac:	sub	r1, r8, ip
   23ab0:	mov	r0, lr
   23ab4:	mov	r6, lr
   23ab8:	bl	129ac <strnlen@plt>
   23abc:	mov	lr, r6
   23ac0:	mov	ip, r8
   23ac4:	ldrb	r0, [lr, r0]!
   23ac8:	cmp	r0, #0
   23acc:	beq	23adc <__assert_fail@plt+0x10f20>
   23ad0:	ldr	r3, [sp, #20]
   23ad4:	mov	ip, r8
   23ad8:	b	23b18 <__assert_fail@plt+0x10f5c>
   23adc:	mov	r0, r5
   23ae0:	mov	r4, ip
   23ae4:	bl	1288c <strlen@plt>
   23ae8:	mov	r2, r0
   23aec:	mov	r0, r7
   23af0:	mov	r1, r5
   23af4:	sub	r3, fp, #88	; 0x58
   23af8:	bl	23fa0 <__assert_fail@plt+0x113e4>
   23afc:	cmp	r0, #0
   23b00:	bne	23b94 <__assert_fail@plt+0x10fd8>
   23b04:	ldr	r3, [sp, #20]
   23b08:	ldrb	r9, [r7]
   23b0c:	mov	lr, #0
   23b10:	mov	ip, r4
   23b14:	and	r3, r3, r0
   23b18:	ldr	r6, [sp, #16]
   23b1c:	uxtb	r0, r9
   23b20:	cmp	r0, r6
   23b24:	bne	23b58 <__assert_fail@plt+0x10f9c>
   23b28:	mov	r0, #1
   23b2c:	ldrb	r1, [r5, r0]
   23b30:	cmp	r1, #0
   23b34:	beq	23b74 <__assert_fail@plt+0x10fb8>
   23b38:	ldrb	r2, [r7, r0]
   23b3c:	cmp	r2, #0
   23b40:	beq	23b7c <__assert_fail@plt+0x10fc0>
   23b44:	add	r0, r0, #1
   23b48:	cmp	r2, r1
   23b4c:	beq	23b2c <__assert_fail@plt+0x10f70>
   23b50:	add	r8, r8, r0
   23b54:	b	23b5c <__assert_fail@plt+0x10fa0>
   23b58:	add	r8, r8, #1
   23b5c:	ldrb	r9, [r7, #1]!
   23b60:	add	sl, sl, #1
   23b64:	mov	r4, #0
   23b68:	cmp	r9, #0
   23b6c:	bne	23a84 <__assert_fail@plt+0x10ec8>
   23b70:	b	23b80 <__assert_fail@plt+0x10fc4>
   23b74:	mov	r4, r7
   23b78:	b	23b80 <__assert_fail@plt+0x10fc4>
   23b7c:	mov	r4, #0
   23b80:	mov	r0, r4
   23b84:	sub	sp, fp, #28
   23b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b8c:	ldr	r4, [sp, #152]	; 0x98
   23b90:	b	23b80 <__assert_fail@plt+0x10fc4>
   23b94:	ldr	r4, [fp, #-88]	; 0xffffffa8
   23b98:	b	23b80 <__assert_fail@plt+0x10fc4>
   23b9c:	ldr	r4, [sp, #80]	; 0x50
   23ba0:	b	23b80 <__assert_fail@plt+0x10fc4>
   23ba4:	bl	12b68 <abort@plt>
   23ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23bac:	add	fp, sp, #28
   23bb0:	sub	sp, sp, #132	; 0x84
   23bb4:	mov	r4, r0
   23bb8:	mov	r0, r1
   23bbc:	mov	r8, r2
   23bc0:	mov	r7, r1
   23bc4:	bl	3ce9c <__assert_fail@plt+0x2a2e0>
   23bc8:	mov	sl, r0
   23bcc:	movw	r0, #47662	; 0xba2e
   23bd0:	mov	r5, #0
   23bd4:	movt	r0, #744	; 0x2e8
   23bd8:	cmp	sl, r0
   23bdc:	bhi	23f90 <__assert_fail@plt+0x113d4>
   23be0:	mov	r0, #44	; 0x2c
   23be4:	mul	r0, sl, r0
   23be8:	cmp	r0, #4016	; 0xfb0
   23bec:	bhi	23c0c <__assert_fail@plt+0x11050>
   23bf0:	add	r0, r0, #22
   23bf4:	bic	r0, r0, #7
   23bf8:	sub	r0, sp, r0
   23bfc:	add	r1, r0, #15
   23c00:	bic	r9, r1, #15
   23c04:	mov	sp, r0
   23c08:	b	23c14 <__assert_fail@plt+0x11058>
   23c0c:	bl	3cd5c <__assert_fail@plt+0x2a1a0>
   23c10:	mov	r9, r0
   23c14:	cmp	r9, #0
   23c18:	beq	23f90 <__assert_fail@plt+0x113d4>
   23c1c:	sub	r6, fp, #88	; 0x58
   23c20:	str	r4, [fp, #-160]	; 0xffffff60
   23c24:	mov	r4, #0
   23c28:	mov	r0, r6
   23c2c:	str	r4, [fp, #-80]	; 0xffffffb0
   23c30:	str	r4, [fp, #-84]	; 0xffffffac
   23c34:	strb	r4, [fp, #-88]	; 0xffffffa8
   23c38:	str	r7, [fp, #-72]	; 0xffffffb8
   23c3c:	strb	r4, [fp, #-76]	; 0xffffffb4
   23c40:	bl	244a4 <__assert_fail@plt+0x118e8>
   23c44:	add	r0, sl, sl, lsl #2
   23c48:	add	r3, r9, r0, lsl #3
   23c4c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23c50:	str	r3, [fp, #-148]	; 0xffffff6c
   23c54:	cmp	r0, #0
   23c58:	beq	23c68 <__assert_fail@plt+0x110ac>
   23c5c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23c60:	cmp	r0, #0
   23c64:	beq	23cec <__assert_fail@plt+0x11130>
   23c68:	add	r7, r9, #16
   23c6c:	add	r5, r6, #32
   23c70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23c74:	cmp	r0, r5
   23c78:	bne	23c90 <__assert_fail@plt+0x110d4>
   23c7c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   23c80:	mov	r0, r7
   23c84:	mov	r1, r5
   23c88:	bl	125c8 <memcpy@plt>
   23c8c:	mov	r0, r7
   23c90:	str	r0, [r7, #-16]
   23c94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   23c98:	str	r0, [r7, #-12]
   23c9c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23ca0:	strb	r0, [r7, #-8]
   23ca4:	cmp	r0, #0
   23ca8:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   23cac:	strne	r0, [r7, #-4]
   23cb0:	strb	r4, [fp, #-76]	; 0xffffffb4
   23cb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23cb8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   23cbc:	add	r0, r0, r1
   23cc0:	str	r0, [fp, #-72]	; 0xffffffb8
   23cc4:	mov	r0, r6
   23cc8:	bl	244a4 <__assert_fail@plt+0x118e8>
   23ccc:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   23cd0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23cd4:	ldr	r3, [fp, #-148]	; 0xffffff6c
   23cd8:	add	r7, r7, #40	; 0x28
   23cdc:	cmp	r1, #0
   23ce0:	beq	23c70 <__assert_fail@plt+0x110b4>
   23ce4:	cmp	r0, #0
   23ce8:	bne	23c70 <__assert_fail@plt+0x110b4>
   23cec:	mov	r0, #1
   23cf0:	cmp	sl, #3
   23cf4:	str	r8, [fp, #-156]	; 0xffffff64
   23cf8:	str	sl, [fp, #-152]	; 0xffffff68
   23cfc:	str	r0, [r3, #4]
   23d00:	bcc	23dc0 <__assert_fail@plt+0x11204>
   23d04:	mov	r4, #2
   23d08:	mov	r5, #0
   23d0c:	add	r0, r4, r4, lsl #2
   23d10:	add	r0, r9, r0, lsl #3
   23d14:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   23d18:	sub	r7, r0, #28
   23d1c:	sub	sl, r0, #40	; 0x28
   23d20:	sub	r6, r0, #36	; 0x24
   23d24:	b	23d30 <__assert_fail@plt+0x11174>
   23d28:	ldr	r0, [r3, r5, lsl #2]
   23d2c:	sub	r5, r5, r0
   23d30:	cmp	r8, #0
   23d34:	beq	23d60 <__assert_fail@plt+0x111a4>
   23d38:	add	r0, r5, r5, lsl #2
   23d3c:	add	r0, r9, r0, lsl #3
   23d40:	ldrb	r1, [r0, #8]
   23d44:	cmp	r1, #0
   23d48:	beq	23d60 <__assert_fail@plt+0x111a4>
   23d4c:	ldr	r0, [r0, #12]
   23d50:	ldr	r1, [r7]
   23d54:	cmp	r1, r0
   23d58:	bne	23d90 <__assert_fail@plt+0x111d4>
   23d5c:	b	23da4 <__assert_fail@plt+0x111e8>
   23d60:	add	r0, r5, r5, lsl #2
   23d64:	ldr	r2, [r6]
   23d68:	add	r1, r9, r0, lsl #3
   23d6c:	ldr	r1, [r1, #4]
   23d70:	cmp	r2, r1
   23d74:	bne	23d90 <__assert_fail@plt+0x111d4>
   23d78:	ldr	r1, [r9, r0, lsl #3]
   23d7c:	ldr	r0, [sl]
   23d80:	bl	12628 <memcmp@plt>
   23d84:	ldr	r3, [fp, #-148]	; 0xffffff6c
   23d88:	cmp	r0, #0
   23d8c:	beq	23da4 <__assert_fail@plt+0x111e8>
   23d90:	cmp	r5, #0
   23d94:	bne	23d28 <__assert_fail@plt+0x1116c>
   23d98:	mov	r5, #0
   23d9c:	mov	r0, r4
   23da0:	b	23dac <__assert_fail@plt+0x111f0>
   23da4:	add	r5, r5, #1
   23da8:	sub	r0, r4, r5
   23dac:	str	r0, [r3, r4, lsl #2]
   23db0:	ldr	r0, [fp, #-152]	; 0xffffff68
   23db4:	add	r4, r4, #1
   23db8:	cmp	r4, r0
   23dbc:	bne	23d0c <__assert_fail@plt+0x11150>
   23dc0:	ldr	r8, [fp, #-156]	; 0xffffff64
   23dc4:	ldr	r0, [fp, #-160]	; 0xffffff60
   23dc8:	mov	r6, #0
   23dcc:	str	r6, [r8]
   23dd0:	str	r6, [fp, #-80]	; 0xffffffb0
   23dd4:	str	r6, [fp, #-84]	; 0xffffffac
   23dd8:	strb	r6, [fp, #-88]	; 0xffffffa8
   23ddc:	str	r0, [fp, #-72]	; 0xffffffb8
   23de0:	str	r6, [fp, #-136]	; 0xffffff78
   23de4:	str	r6, [fp, #-140]	; 0xffffff74
   23de8:	str	r0, [fp, #-128]	; 0xffffff80
   23dec:	sub	r0, fp, #144	; 0x90
   23df0:	strb	r6, [fp, #-144]	; 0xffffff70
   23df4:	strb	r6, [fp, #-76]	; 0xffffffb4
   23df8:	strb	r6, [fp, #-132]	; 0xffffff7c
   23dfc:	bl	244a4 <__assert_fail@plt+0x118e8>
   23e00:	ldr	r0, [fp, #-116]	; 0xffffff8c
   23e04:	ldrb	r1, [fp, #-120]	; 0xffffff88
   23e08:	cmp	r0, #0
   23e0c:	bne	23e18 <__assert_fail@plt+0x1125c>
   23e10:	cmp	r1, #0
   23e14:	bne	23f84 <__assert_fail@plt+0x113c8>
   23e18:	clz	r1, r1
   23e1c:	sub	r4, fp, #88	; 0x58
   23e20:	mov	sl, #0
   23e24:	lsr	r1, r1, #5
   23e28:	add	r2, sl, sl, lsl #2
   23e2c:	tst	r1, #1
   23e30:	add	r3, r9, r2, lsl #3
   23e34:	bne	23e5c <__assert_fail@plt+0x112a0>
   23e38:	ldrb	r1, [r3, #8]
   23e3c:	cmp	r1, #0
   23e40:	beq	23e5c <__assert_fail@plt+0x112a0>
   23e44:	ldr	r1, [r3, #12]
   23e48:	cmp	r1, r0
   23e4c:	bne	23e88 <__assert_fail@plt+0x112cc>
   23e50:	ldr	r7, [fp, #-128]	; 0xffffff80
   23e54:	ldr	r5, [fp, #-124]	; 0xffffff84
   23e58:	b	23ee4 <__assert_fail@plt+0x11328>
   23e5c:	ldr	r5, [r3, #4]
   23e60:	ldr	r0, [fp, #-124]	; 0xffffff84
   23e64:	cmp	r5, r0
   23e68:	bne	23e88 <__assert_fail@plt+0x112cc>
   23e6c:	ldr	r7, [fp, #-128]	; 0xffffff80
   23e70:	ldr	r0, [r9, r2, lsl #3]
   23e74:	mov	r2, r5
   23e78:	mov	r1, r7
   23e7c:	bl	12628 <memcmp@plt>
   23e80:	cmp	r0, #0
   23e84:	beq	23ee4 <__assert_fail@plt+0x11328>
   23e88:	cmp	sl, #0
   23e8c:	beq	23f04 <__assert_fail@plt+0x11348>
   23e90:	ldr	r0, [fp, #-148]	; 0xffffff6c
   23e94:	ldr	r5, [r0, sl, lsl #2]
   23e98:	sub	sl, sl, r5
   23e9c:	cmp	r5, #0
   23ea0:	beq	23f50 <__assert_fail@plt+0x11394>
   23ea4:	mov	r0, r4
   23ea8:	bl	244a4 <__assert_fail@plt+0x118e8>
   23eac:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23eb0:	cmp	r0, #0
   23eb4:	beq	23ec4 <__assert_fail@plt+0x11308>
   23eb8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23ebc:	cmp	r0, #0
   23ec0:	beq	23f9c <__assert_fail@plt+0x113e0>
   23ec4:	strb	r6, [fp, #-76]	; 0xffffffb4
   23ec8:	subs	r5, r5, #1
   23ecc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23ed0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   23ed4:	add	r0, r0, r1
   23ed8:	str	r0, [fp, #-72]	; 0xffffffb8
   23edc:	bne	23ea4 <__assert_fail@plt+0x112e8>
   23ee0:	b	23f50 <__assert_fail@plt+0x11394>
   23ee4:	add	r0, r7, r5
   23ee8:	strb	r6, [fp, #-132]	; 0xffffff7c
   23eec:	add	sl, sl, #1
   23ef0:	str	r0, [fp, #-128]	; 0xffffff80
   23ef4:	ldr	r0, [fp, #-152]	; 0xffffff68
   23ef8:	cmp	sl, r0
   23efc:	bne	23f50 <__assert_fail@plt+0x11394>
   23f00:	b	23f7c <__assert_fail@plt+0x113c0>
   23f04:	mov	r0, r4
   23f08:	bl	244a4 <__assert_fail@plt+0x118e8>
   23f0c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   23f10:	cmp	r0, #0
   23f14:	beq	23f24 <__assert_fail@plt+0x11368>
   23f18:	ldr	r0, [fp, #-60]	; 0xffffffc4
   23f1c:	cmp	r0, #0
   23f20:	beq	23f9c <__assert_fail@plt+0x113e0>
   23f24:	mov	sl, #0
   23f28:	strb	sl, [fp, #-76]	; 0xffffffb4
   23f2c:	strb	sl, [fp, #-132]	; 0xffffff7c
   23f30:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23f34:	ldr	r1, [fp, #-68]	; 0xffffffbc
   23f38:	add	r0, r0, r1
   23f3c:	ldr	r1, [fp, #-124]	; 0xffffff84
   23f40:	str	r0, [fp, #-72]	; 0xffffffb8
   23f44:	ldr	r0, [fp, #-128]	; 0xffffff80
   23f48:	add	r0, r0, r1
   23f4c:	str	r0, [fp, #-128]	; 0xffffff80
   23f50:	sub	r0, fp, #144	; 0x90
   23f54:	bl	244a4 <__assert_fail@plt+0x118e8>
   23f58:	ldrb	r2, [fp, #-120]	; 0xffffff88
   23f5c:	clz	r0, r2
   23f60:	lsr	r1, r0, #5
   23f64:	ldr	r0, [fp, #-116]	; 0xffffff8c
   23f68:	cmp	r0, #0
   23f6c:	bne	23e28 <__assert_fail@plt+0x1126c>
   23f70:	cmp	r2, #0
   23f74:	beq	23e28 <__assert_fail@plt+0x1126c>
   23f78:	b	23f84 <__assert_fail@plt+0x113c8>
   23f7c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   23f80:	str	r0, [r8]
   23f84:	mov	r0, r9
   23f88:	bl	3cdc4 <__assert_fail@plt+0x2a208>
   23f8c:	mov	r5, #1
   23f90:	mov	r0, r5
   23f94:	sub	sp, fp, #28
   23f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f9c:	bl	12b68 <abort@plt>
   23fa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23fa4:	add	fp, sp, #24
   23fa8:	mov	r4, #0
   23fac:	cmn	r2, #-536870911	; 0xe0000001
   23fb0:	bhi	240dc <__assert_fail@plt+0x11520>
   23fb4:	mov	r7, r0
   23fb8:	lsl	r0, r2, #2
   23fbc:	mov	r8, r3
   23fc0:	mov	r5, r2
   23fc4:	mov	r6, r1
   23fc8:	cmp	r0, #4016	; 0xfb0
   23fcc:	bhi	23fec <__assert_fail@plt+0x11430>
   23fd0:	add	r0, r0, #22
   23fd4:	bic	r0, r0, #7
   23fd8:	sub	r1, sp, r0
   23fdc:	add	r0, r1, #15
   23fe0:	bic	r0, r0, #15
   23fe4:	mov	sp, r1
   23fe8:	b	23ff0 <__assert_fail@plt+0x11434>
   23fec:	bl	3cd5c <__assert_fail@plt+0x2a1a0>
   23ff0:	cmp	r0, #0
   23ff4:	beq	240dc <__assert_fail@plt+0x11520>
   23ff8:	mov	r1, #1
   23ffc:	cmp	r5, #3
   24000:	str	r1, [r0, #4]
   24004:	bcc	24060 <__assert_fail@plt+0x114a4>
   24008:	mov	r1, #2
   2400c:	mov	r2, #0
   24010:	add	r3, r6, r1
   24014:	ldrb	r4, [r6, r2]
   24018:	ldrb	r3, [r3, #-1]
   2401c:	b	2402c <__assert_fail@plt+0x11470>
   24020:	ldr	r4, [r0, r2, lsl #2]
   24024:	sub	r2, r2, r4
   24028:	ldrb	r4, [r6, r2]
   2402c:	cmp	r3, r4
   24030:	beq	24048 <__assert_fail@plt+0x1148c>
   24034:	cmp	r2, #0
   24038:	bne	24020 <__assert_fail@plt+0x11464>
   2403c:	mov	r2, #0
   24040:	mov	r3, r1
   24044:	b	24050 <__assert_fail@plt+0x11494>
   24048:	add	r2, r2, #1
   2404c:	sub	r3, r1, r2
   24050:	str	r3, [r0, r1, lsl #2]
   24054:	add	r1, r1, #1
   24058:	cmp	r1, r5
   2405c:	bne	24010 <__assert_fail@plt+0x11454>
   24060:	mov	r1, #0
   24064:	str	r1, [r8]
   24068:	ldrb	r3, [r7]
   2406c:	cmp	r3, #0
   24070:	beq	240d4 <__assert_fail@plt+0x11518>
   24074:	mov	r2, r7
   24078:	ldrb	r4, [r6, r1]
   2407c:	uxtb	r3, r3
   24080:	cmp	r4, r3
   24084:	bne	2409c <__assert_fail@plt+0x114e0>
   24088:	add	r1, r1, #1
   2408c:	cmp	r1, r5
   24090:	beq	240d0 <__assert_fail@plt+0x11514>
   24094:	add	r7, r7, #1
   24098:	b	240c0 <__assert_fail@plt+0x11504>
   2409c:	cmp	r1, #0
   240a0:	beq	240b4 <__assert_fail@plt+0x114f8>
   240a4:	ldr	r3, [r0, r1, lsl #2]
   240a8:	sub	r1, r1, r3
   240ac:	add	r2, r2, r3
   240b0:	b	240c0 <__assert_fail@plt+0x11504>
   240b4:	add	r7, r7, #1
   240b8:	add	r2, r2, #1
   240bc:	mov	r1, #0
   240c0:	ldrb	r3, [r7]
   240c4:	cmp	r3, #0
   240c8:	bne	24078 <__assert_fail@plt+0x114bc>
   240cc:	b	240d4 <__assert_fail@plt+0x11518>
   240d0:	str	r2, [r8]
   240d4:	bl	3cdc4 <__assert_fail@plt+0x2a208>
   240d8:	mov	r4, #1
   240dc:	mov	r0, r4
   240e0:	sub	sp, fp, #24
   240e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   240e8:	push	{r4, r5, fp, lr}
   240ec:	add	fp, sp, #8
   240f0:	mov	r4, r1
   240f4:	mov	r5, r0
   240f8:	bl	1288c <strlen@plt>
   240fc:	mov	r1, r0
   24100:	mov	r0, r5
   24104:	mov	r2, r4
   24108:	pop	{r4, r5, fp, lr}
   2410c:	b	24110 <__assert_fail@plt+0x11554>
   24110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24114:	add	fp, sp, #28
   24118:	sub	sp, sp, #28
   2411c:	mov	r4, r2
   24120:	mov	r5, r1
   24124:	mov	r7, r0
   24128:	add	r6, r0, r1
   2412c:	bl	12730 <__ctype_get_mb_cur_max@plt>
   24130:	cmp	r0, #1
   24134:	bls	24424 <__assert_fail@plt+0x11868>
   24138:	cmp	r5, #1
   2413c:	blt	2448c <__assert_fail@plt+0x118d0>
   24140:	and	r2, r4, #1
   24144:	and	sl, r4, #2
   24148:	mov	r5, #0
   2414c:	add	r8, sp, #12
   24150:	add	r9, sp, #16
   24154:	mov	r4, #0
   24158:	eor	r3, r2, #1
   2415c:	ldrb	r0, [r7]
   24160:	sub	r0, r0, #32
   24164:	cmp	r0, #94	; 0x5e
   24168:	bhi	24304 <__assert_fail@plt+0x11748>
   2416c:	add	r1, pc, #0
   24170:	ldr	pc, [r1, r0, lsl #2]
   24174:	strdeq	r4, [r2], -r0
   24178:	strdeq	r4, [r2], -r0
   2417c:	strdeq	r4, [r2], -r0
   24180:	strdeq	r4, [r2], -r0
   24184:	andeq	r4, r2, r4, lsl #6
   24188:	strdeq	r4, [r2], -r0
   2418c:	strdeq	r4, [r2], -r0
   24190:	strdeq	r4, [r2], -r0
   24194:	strdeq	r4, [r2], -r0
   24198:	strdeq	r4, [r2], -r0
   2419c:	strdeq	r4, [r2], -r0
   241a0:	strdeq	r4, [r2], -r0
   241a4:	strdeq	r4, [r2], -r0
   241a8:	strdeq	r4, [r2], -r0
   241ac:	strdeq	r4, [r2], -r0
   241b0:	strdeq	r4, [r2], -r0
   241b4:	strdeq	r4, [r2], -r0
   241b8:	strdeq	r4, [r2], -r0
   241bc:	strdeq	r4, [r2], -r0
   241c0:	strdeq	r4, [r2], -r0
   241c4:	strdeq	r4, [r2], -r0
   241c8:	strdeq	r4, [r2], -r0
   241cc:	strdeq	r4, [r2], -r0
   241d0:	strdeq	r4, [r2], -r0
   241d4:	strdeq	r4, [r2], -r0
   241d8:	strdeq	r4, [r2], -r0
   241dc:	strdeq	r4, [r2], -r0
   241e0:	strdeq	r4, [r2], -r0
   241e4:	strdeq	r4, [r2], -r0
   241e8:	strdeq	r4, [r2], -r0
   241ec:	strdeq	r4, [r2], -r0
   241f0:	strdeq	r4, [r2], -r0
   241f4:	andeq	r4, r2, r4, lsl #6
   241f8:	strdeq	r4, [r2], -r0
   241fc:	strdeq	r4, [r2], -r0
   24200:	strdeq	r4, [r2], -r0
   24204:	strdeq	r4, [r2], -r0
   24208:	strdeq	r4, [r2], -r0
   2420c:	strdeq	r4, [r2], -r0
   24210:	strdeq	r4, [r2], -r0
   24214:	strdeq	r4, [r2], -r0
   24218:	strdeq	r4, [r2], -r0
   2421c:	strdeq	r4, [r2], -r0
   24220:	strdeq	r4, [r2], -r0
   24224:	strdeq	r4, [r2], -r0
   24228:	strdeq	r4, [r2], -r0
   2422c:	strdeq	r4, [r2], -r0
   24230:	strdeq	r4, [r2], -r0
   24234:	strdeq	r4, [r2], -r0
   24238:	strdeq	r4, [r2], -r0
   2423c:	strdeq	r4, [r2], -r0
   24240:	strdeq	r4, [r2], -r0
   24244:	strdeq	r4, [r2], -r0
   24248:	strdeq	r4, [r2], -r0
   2424c:	strdeq	r4, [r2], -r0
   24250:	strdeq	r4, [r2], -r0
   24254:	strdeq	r4, [r2], -r0
   24258:	strdeq	r4, [r2], -r0
   2425c:	strdeq	r4, [r2], -r0
   24260:	strdeq	r4, [r2], -r0
   24264:	strdeq	r4, [r2], -r0
   24268:	strdeq	r4, [r2], -r0
   2426c:	strdeq	r4, [r2], -r0
   24270:	strdeq	r4, [r2], -r0
   24274:	andeq	r4, r2, r4, lsl #6
   24278:	strdeq	r4, [r2], -r0
   2427c:	strdeq	r4, [r2], -r0
   24280:	strdeq	r4, [r2], -r0
   24284:	strdeq	r4, [r2], -r0
   24288:	strdeq	r4, [r2], -r0
   2428c:	strdeq	r4, [r2], -r0
   24290:	strdeq	r4, [r2], -r0
   24294:	strdeq	r4, [r2], -r0
   24298:	strdeq	r4, [r2], -r0
   2429c:	strdeq	r4, [r2], -r0
   242a0:	strdeq	r4, [r2], -r0
   242a4:	strdeq	r4, [r2], -r0
   242a8:	strdeq	r4, [r2], -r0
   242ac:	strdeq	r4, [r2], -r0
   242b0:	strdeq	r4, [r2], -r0
   242b4:	strdeq	r4, [r2], -r0
   242b8:	strdeq	r4, [r2], -r0
   242bc:	strdeq	r4, [r2], -r0
   242c0:	strdeq	r4, [r2], -r0
   242c4:	strdeq	r4, [r2], -r0
   242c8:	strdeq	r4, [r2], -r0
   242cc:	strdeq	r4, [r2], -r0
   242d0:	strdeq	r4, [r2], -r0
   242d4:	strdeq	r4, [r2], -r0
   242d8:	strdeq	r4, [r2], -r0
   242dc:	strdeq	r4, [r2], -r0
   242e0:	strdeq	r4, [r2], -r0
   242e4:	strdeq	r4, [r2], -r0
   242e8:	strdeq	r4, [r2], -r0
   242ec:	strdeq	r4, [r2], -r0
   242f0:	add	r4, r4, #1
   242f4:	add	r7, r7, #1
   242f8:	cmp	r7, r6
   242fc:	bcc	2415c <__assert_fail@plt+0x115a0>
   24300:	b	24498 <__assert_fail@plt+0x118dc>
   24304:	str	r3, [sp, #4]
   24308:	str	r2, [sp, #8]
   2430c:	str	r5, [sp, #20]
   24310:	str	r5, [sp, #16]
   24314:	sub	r2, r6, r7
   24318:	mov	r0, r8
   2431c:	mov	r1, r7
   24320:	mov	r3, r9
   24324:	mov	r5, r7
   24328:	bl	2e214 <__assert_fail@plt+0x1b658>
   2432c:	cmp	r0, #0
   24330:	beq	2434c <__assert_fail@plt+0x11790>
   24334:	mov	r7, r0
   24338:	cmn	r0, #2
   2433c:	beq	243bc <__assert_fail@plt+0x11800>
   24340:	cmn	r7, #1
   24344:	bne	24350 <__assert_fail@plt+0x11794>
   24348:	b	243dc <__assert_fail@plt+0x11820>
   2434c:	mov	r7, #1
   24350:	ldr	r0, [sp, #12]
   24354:	bl	12544 <wcwidth@plt>
   24358:	cmp	r0, #0
   2435c:	blt	24378 <__assert_fail@plt+0x117bc>
   24360:	mvn	r1, #-2147483648	; 0x80000000
   24364:	sub	r1, r1, r4
   24368:	cmp	r0, r1
   2436c:	bgt	243b4 <__assert_fail@plt+0x117f8>
   24370:	add	r4, r0, r4
   24374:	b	2439c <__assert_fail@plt+0x117e0>
   24378:	cmp	sl, #0
   2437c:	bne	24404 <__assert_fail@plt+0x11848>
   24380:	ldr	r0, [sp, #12]
   24384:	bl	126ac <iswcntrl@plt>
   24388:	cmp	r0, #0
   2438c:	bne	2439c <__assert_fail@plt+0x117e0>
   24390:	cmn	r4, #-2147483647	; 0x80000001
   24394:	beq	243b4 <__assert_fail@plt+0x117f8>
   24398:	add	r4, r4, #1
   2439c:	mov	r0, r9
   243a0:	add	r7, r5, r7
   243a4:	bl	12604 <mbsinit@plt>
   243a8:	cmp	r0, #0
   243ac:	beq	24314 <__assert_fail@plt+0x11758>
   243b0:	b	243f4 <__assert_fail@plt+0x11838>
   243b4:	mov	r0, #7
   243b8:	b	24408 <__assert_fail@plt+0x1184c>
   243bc:	ldr	r0, [sp, #4]
   243c0:	ldr	r1, [sp, #8]
   243c4:	mov	r7, r6
   243c8:	add	r4, r4, r0
   243cc:	mov	r0, #1
   243d0:	cmp	r1, #0
   243d4:	beq	243f4 <__assert_fail@plt+0x11838>
   243d8:	b	24408 <__assert_fail@plt+0x1184c>
   243dc:	ldr	r1, [sp, #8]
   243e0:	mov	r0, #1
   243e4:	cmp	r1, #0
   243e8:	bne	24408 <__assert_fail@plt+0x1184c>
   243ec:	add	r4, r4, #1
   243f0:	add	r7, r5, #1
   243f4:	ldr	r2, [sp, #8]
   243f8:	ldr	r3, [sp, #4]
   243fc:	mov	r5, #0
   24400:	b	242f8 <__assert_fail@plt+0x1173c>
   24404:	mov	r0, #1
   24408:	ldr	r2, [sp, #8]
   2440c:	ldr	r3, [sp, #4]
   24410:	mov	r7, r5
   24414:	cmp	r0, #0
   24418:	mov	r5, #0
   2441c:	beq	242f8 <__assert_fail@plt+0x1173c>
   24420:	b	2447c <__assert_fail@plt+0x118c0>
   24424:	and	r8, r4, #2
   24428:	mov	r4, #0
   2442c:	cmp	r7, r6
   24430:	bcs	24498 <__assert_fail@plt+0x118dc>
   24434:	ldrb	r5, [r7], #1
   24438:	bl	12844 <__ctype_b_loc@plt>
   2443c:	ldr	r0, [r0]
   24440:	add	r0, r0, r5, lsl #1
   24444:	ldrh	r1, [r0]
   24448:	tst	r1, #16384	; 0x4000
   2444c:	bne	24464 <__assert_fail@plt+0x118a8>
   24450:	cmp	r8, #0
   24454:	bne	24494 <__assert_fail@plt+0x118d8>
   24458:	mov	r0, #0
   2445c:	tst	r1, #2
   24460:	bne	24474 <__assert_fail@plt+0x118b8>
   24464:	cmn	r4, #-2147483647	; 0x80000001
   24468:	mov	r0, #0
   2446c:	mvneq	r0, #0
   24470:	addne	r4, r4, #1
   24474:	ands	r0, r0, #7
   24478:	beq	2442c <__assert_fail@plt+0x11870>
   2447c:	mvn	r4, #0
   24480:	cmp	r0, #7
   24484:	mvneq	r4, #-2147483648	; 0x80000000
   24488:	b	24498 <__assert_fail@plt+0x118dc>
   2448c:	mov	r4, #0
   24490:	b	24498 <__assert_fail@plt+0x118dc>
   24494:	mvn	r4, #0
   24498:	mov	r0, r4
   2449c:	sub	sp, fp, #28
   244a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244a4:	push	{r4, r5, r6, r7, fp, lr}
   244a8:	add	fp, sp, #16
   244ac:	mov	r4, r0
   244b0:	ldrb	r0, [r0, #12]
   244b4:	cmp	r0, #0
   244b8:	popne	{r4, r5, r6, r7, fp, pc}
   244bc:	ldrb	r0, [r4]
   244c0:	ldr	r6, [r4, #16]
   244c4:	cmp	r0, #0
   244c8:	beq	24528 <__assert_fail@plt+0x1196c>
   244cc:	add	r5, r4, #4
   244d0:	bl	12730 <__ctype_get_mb_cur_max@plt>
   244d4:	mov	r1, r0
   244d8:	mov	r0, r6
   244dc:	bl	2a4c4 <__assert_fail@plt+0x17908>
   244e0:	add	r7, r4, #28
   244e4:	mov	r2, r0
   244e8:	mov	r1, r6
   244ec:	mov	r3, r5
   244f0:	mov	r0, r7
   244f4:	bl	2e214 <__assert_fail@plt+0x1b658>
   244f8:	cmn	r0, #2
   244fc:	str	r0, [r4, #20]
   24500:	beq	245a4 <__assert_fail@plt+0x119e8>
   24504:	cmp	r0, #0
   24508:	beq	24560 <__assert_fail@plt+0x119a4>
   2450c:	cmn	r0, #1
   24510:	bne	24584 <__assert_fail@plt+0x119c8>
   24514:	mov	r0, #0
   24518:	strb	r0, [r4, #24]
   2451c:	mov	r0, #1
   24520:	str	r0, [r4, #20]
   24524:	b	245b8 <__assert_fail@plt+0x119fc>
   24528:	ldrb	r0, [r6]
   2452c:	movw	r2, #15008	; 0x3aa0
   24530:	movt	r2, #4
   24534:	ubfx	r1, r0, #5, #3
   24538:	ldr	r1, [r2, r1, lsl #2]
   2453c:	and	r2, r0, #31
   24540:	mov	r0, #1
   24544:	tst	r1, r0, lsl r2
   24548:	beq	245c4 <__assert_fail@plt+0x11a08>
   2454c:	str	r0, [r4, #20]
   24550:	ldrb	r1, [r6]
   24554:	strb	r0, [r4, #24]
   24558:	str	r1, [r4, #28]
   2455c:	b	245b8 <__assert_fail@plt+0x119fc>
   24560:	mov	r0, #1
   24564:	str	r0, [r4, #20]
   24568:	ldr	r0, [r4, #16]
   2456c:	ldrb	r0, [r0]
   24570:	cmp	r0, #0
   24574:	bne	245e4 <__assert_fail@plt+0x11a28>
   24578:	ldr	r0, [r7]
   2457c:	cmp	r0, #0
   24580:	bne	24604 <__assert_fail@plt+0x11a48>
   24584:	mov	r0, #1
   24588:	strb	r0, [r4, #24]
   2458c:	mov	r0, r5
   24590:	bl	12604 <mbsinit@plt>
   24594:	cmp	r0, #0
   24598:	movne	r0, #0
   2459c:	strbne	r0, [r4]
   245a0:	b	245b8 <__assert_fail@plt+0x119fc>
   245a4:	ldr	r0, [r4, #16]
   245a8:	bl	1288c <strlen@plt>
   245ac:	str	r0, [r4, #20]
   245b0:	mov	r0, #0
   245b4:	strb	r0, [r4, #24]
   245b8:	mov	r0, #1
   245bc:	strb	r0, [r4, #12]
   245c0:	pop	{r4, r5, r6, r7, fp, pc}
   245c4:	add	r5, r4, #4
   245c8:	mov	r0, r5
   245cc:	bl	12604 <mbsinit@plt>
   245d0:	cmp	r0, #0
   245d4:	beq	24624 <__assert_fail@plt+0x11a68>
   245d8:	mov	r0, #1
   245dc:	strb	r0, [r4]
   245e0:	b	244d0 <__assert_fail@plt+0x11914>
   245e4:	movw	r0, #8995	; 0x2323
   245e8:	movw	r1, #8935	; 0x22e7
   245ec:	movw	r3, #8947	; 0x22f3
   245f0:	mov	r2, #171	; 0xab
   245f4:	movt	r0, #4
   245f8:	movt	r1, #4
   245fc:	movt	r3, #4
   24600:	bl	12bbc <__assert_fail@plt>
   24604:	movw	r0, #9018	; 0x233a
   24608:	movw	r1, #8935	; 0x22e7
   2460c:	movw	r3, #8947	; 0x22f3
   24610:	mov	r2, #172	; 0xac
   24614:	movt	r0, #4
   24618:	movt	r1, #4
   2461c:	movt	r3, #4
   24620:	bl	12bbc <__assert_fail@plt>
   24624:	movw	r0, #8912	; 0x22d0
   24628:	movw	r1, #8935	; 0x22e7
   2462c:	movw	r3, #8947	; 0x22f3
   24630:	mov	r2, #143	; 0x8f
   24634:	movt	r0, #4
   24638:	movt	r1, #4
   2463c:	movt	r3, #4
   24640:	bl	12bbc <__assert_fail@plt>
   24644:	ldr	r2, [r0, #16]
   24648:	add	r1, r2, r1
   2464c:	str	r1, [r0, #16]
   24650:	bx	lr
   24654:	push	{r4, r5, r6, sl, fp, lr}
   24658:	add	fp, sp, #16
   2465c:	mov	r5, r1
   24660:	ldrb	r1, [r1]
   24664:	mov	r4, r0
   24668:	strb	r1, [r0], #4
   2466c:	cmp	r1, #0
   24670:	beq	24680 <__assert_fail@plt+0x11ac4>
   24674:	ldmib	r5, {r1, r2}
   24678:	stm	r0, {r1, r2}
   2467c:	b	2468c <__assert_fail@plt+0x11ad0>
   24680:	mov	r1, #0
   24684:	str	r1, [r0]
   24688:	str	r1, [r0, #4]
   2468c:	ldrb	r0, [r5, #12]
   24690:	strb	r0, [r4, #12]
   24694:	add	r0, r5, #32
   24698:	ldr	r1, [r5, #16]
   2469c:	cmp	r1, r0
   246a0:	beq	246ac <__assert_fail@plt+0x11af0>
   246a4:	mov	r6, r1
   246a8:	b	246bc <__assert_fail@plt+0x11b00>
   246ac:	ldr	r2, [r5, #20]
   246b0:	add	r6, r4, #32
   246b4:	mov	r0, r6
   246b8:	bl	125c8 <memcpy@plt>
   246bc:	str	r6, [r4, #16]
   246c0:	ldr	r0, [r5, #20]
   246c4:	str	r0, [r4, #20]
   246c8:	ldrb	r0, [r5, #24]
   246cc:	strb	r0, [r4, #24]
   246d0:	cmp	r0, #0
   246d4:	ldrne	r0, [r5, #28]
   246d8:	strne	r0, [r4, #28]
   246dc:	pop	{r4, r5, r6, sl, fp, pc}
   246e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246e4:	add	fp, sp, #28
   246e8:	sub	sp, sp, #4
   246ec:	ldrb	r1, [r0]
   246f0:	mov	r4, r0
   246f4:	and	r0, r1, #248	; 0xf8
   246f8:	cmp	r0, #48	; 0x30
   246fc:	bne	24780 <__assert_fail@plt+0x11bc4>
   24700:	mov	r0, #0
   24704:	mov	r5, #0
   24708:	mov	r2, r4
   2470c:	lsl	r3, r5, #3
   24710:	uxtab	r1, r3, r1
   24714:	sub	r5, r1, #48	; 0x30
   24718:	cmp	r0, r5, lsr #12
   2471c:	bne	24a14 <__assert_fail@plt+0x11e58>
   24720:	ldrb	r1, [r2, #1]
   24724:	add	r6, r2, #1
   24728:	and	r2, r1, #248	; 0xf8
   2472c:	cmp	r2, #48	; 0x30
   24730:	mov	r2, r6
   24734:	beq	2470c <__assert_fail@plt+0x11b50>
   24738:	cmp	r1, #0
   2473c:	bne	24a14 <__assert_fail@plt+0x11e58>
   24740:	mov	r0, #32
   24744:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   24748:	movw	r1, #317	; 0x13d
   2474c:	mov	r2, #0
   24750:	and	r3, r5, #3072	; 0xc00
   24754:	movw	r7, #1023	; 0x3ff
   24758:	strh	r1, [r0]
   2475c:	strb	r2, [r0, #17]
   24760:	sub	r2, r6, r4
   24764:	movw	r1, #4095	; 0xfff
   24768:	cmp	r2, #5
   2476c:	str	r1, [r0, #4]
   24770:	str	r5, [r0, #8]
   24774:	orrlt	r1, r3, r7
   24778:	str	r1, [r0, #12]
   2477c:	b	24a14 <__assert_fail@plt+0x11e58>
   24780:	movw	r5, #5
   24784:	mov	r2, #1
   24788:	mvn	r3, #42	; 0x2a
   2478c:	mov	r7, #1
   24790:	mov	r0, #1
   24794:	movt	r5, #4
   24798:	b	247ac <__assert_fail@plt+0x11bf0>
   2479c:	mov	r6, #0
   247a0:	ldrb	r1, [r4, r7]
   247a4:	add	r0, r6, r0
   247a8:	add	r7, r7, #1
   247ac:	uxtab	r6, r3, r1
   247b0:	uxtb	r1, r1
   247b4:	cmp	r6, #18
   247b8:	bhi	247c8 <__assert_fail@plt+0x11c0c>
   247bc:	tst	r5, r2, lsl r6
   247c0:	mov	r6, #1
   247c4:	bne	247a0 <__assert_fail@plt+0x11be4>
   247c8:	cmp	r1, #0
   247cc:	bne	2479c <__assert_fail@plt+0x11be0>
   247d0:	mov	r1, #16
   247d4:	bl	2aab0 <__assert_fail@plt+0x17ef4>
   247d8:	mov	sl, #0
   247dc:	mov	ip, #1
   247e0:	mvn	lr, #113	; 0x71
   247e4:	mov	r9, #0
   247e8:	b	249a8 <__assert_fail@plt+0x11dec>
   247ec:	tst	r5, ip, lsl r1
   247f0:	beq	24a0c <__assert_fail@plt+0x11e50>
   247f4:	ldrb	r3, [r4, #1]
   247f8:	add	r4, r4, #2
   247fc:	sub	r1, r3, #48	; 0x30
   24800:	cmp	r1, #8
   24804:	bcs	2485c <__assert_fail@plt+0x11ca0>
   24808:	mov	r7, #0
   2480c:	lsl	r1, r7, #3
   24810:	uxtab	r1, r1, r3
   24814:	sub	r7, r1, #48	; 0x30
   24818:	cmp	sl, r7, lsr #12
   2481c:	bne	24a0c <__assert_fail@plt+0x11e50>
   24820:	ldrb	r3, [r4], #1
   24824:	and	r1, r3, #248	; 0xf8
   24828:	cmp	r1, #48	; 0x30
   2482c:	beq	2480c <__assert_fail@plt+0x11c50>
   24830:	cmp	r2, #0
   24834:	bne	24a0c <__assert_fail@plt+0x11e50>
   24838:	sub	r4, r4, #1
   2483c:	mov	r8, #1
   24840:	movw	r2, #4095	; 0xfff
   24844:	cmp	r3, #0
   24848:	beq	24884 <__assert_fail@plt+0x11cc8>
   2484c:	cmp	r3, #44	; 0x2c
   24850:	movw	r3, #4095	; 0xfff
   24854:	beq	2492c <__assert_fail@plt+0x11d70>
   24858:	b	24a0c <__assert_fail@plt+0x11e50>
   2485c:	cmp	r3, #103	; 0x67
   24860:	beq	2488c <__assert_fail@plt+0x11cd0>
   24864:	cmp	r3, #111	; 0x6f
   24868:	beq	2489c <__assert_fail@plt+0x11ce0>
   2486c:	cmp	r3, #117	; 0x75
   24870:	bne	248ac <__assert_fail@plt+0x11cf0>
   24874:	mov	r8, #3
   24878:	mov	r3, #0
   2487c:	mov	r7, #448	; 0x1c0
   24880:	b	2492c <__assert_fail@plt+0x11d70>
   24884:	movw	r3, #4095	; 0xfff
   24888:	b	2492c <__assert_fail@plt+0x11d70>
   2488c:	mov	r8, #3
   24890:	mov	r3, #0
   24894:	mov	r7, #56	; 0x38
   24898:	b	2492c <__assert_fail@plt+0x11d70>
   2489c:	mov	r8, #3
   248a0:	mov	r3, #0
   248a4:	mov	r7, #7
   248a8:	b	2492c <__assert_fail@plt+0x11d70>
   248ac:	mov	r8, #1
   248b0:	mov	r7, #0
   248b4:	b	248e0 <__assert_fail@plt+0x11d24>
   248b8:	mov	r8, #2
   248bc:	b	248dc <__assert_fail@plt+0x11d20>
   248c0:	orr	r7, r7, #3072	; 0xc00
   248c4:	b	248dc <__assert_fail@plt+0x11d20>
   248c8:	orr	r7, r7, #512	; 0x200
   248cc:	b	248dc <__assert_fail@plt+0x11d20>
   248d0:	orr	r7, r7, #146	; 0x92
   248d4:	b	248dc <__assert_fail@plt+0x11d20>
   248d8:	orr	r7, r7, #73	; 0x49
   248dc:	ldrb	r3, [r4], #1
   248e0:	uxtab	r1, lr, r3
   248e4:	cmp	r1, #6
   248e8:	bhi	24918 <__assert_fail@plt+0x11d5c>
   248ec:	add	r3, pc, #0
   248f0:	ldr	pc, [r3, r1, lsl #2]
   248f4:	andeq	r4, r2, r0, lsl r9
   248f8:	andeq	r4, r2, r0, asr #17
   248fc:	andeq	r4, r2, r8, asr #17
   24900:	andeq	r4, r2, r4, lsr #18
   24904:	andeq	r4, r2, r4, lsr #18
   24908:	ldrdeq	r4, [r2], -r0
   2490c:	ldrdeq	r4, [r2], -r8
   24910:	orr	r7, r7, #292	; 0x124
   24914:	b	248dc <__assert_fail@plt+0x11d20>
   24918:	uxtb	r1, r3
   2491c:	cmp	r1, #88	; 0x58
   24920:	beq	248b8 <__assert_fail@plt+0x11cfc>
   24924:	sub	r4, r4, #1
   24928:	mov	r3, #0
   2492c:	mov	r1, r0
   24930:	cmp	r3, #0
   24934:	strb	r6, [r1, r9, lsl #4]!
   24938:	strb	r8, [r1, #1]
   2493c:	stmib	r1, {r2, r7}
   24940:	bne	24950 <__assert_fail@plt+0x11d94>
   24944:	cmp	r2, #0
   24948:	andne	r7, r7, r2
   2494c:	mov	r3, r7
   24950:	add	r1, r0, r9, lsl #4
   24954:	add	r7, r9, #1
   24958:	str	r3, [r1, #12]
   2495c:	ldrb	r6, [r4]
   24960:	cmp	r6, #44	; 0x2c
   24964:	ble	24984 <__assert_fail@plt+0x11dc8>
   24968:	cmp	r6, #45	; 0x2d
   2496c:	mov	r9, r7
   24970:	beq	247f4 <__assert_fail@plt+0x11c38>
   24974:	cmp	r6, #61	; 0x3d
   24978:	mov	r9, r7
   2497c:	beq	247f4 <__assert_fail@plt+0x11c38>
   24980:	b	24a0c <__assert_fail@plt+0x11e50>
   24984:	cmp	r6, #43	; 0x2b
   24988:	mov	r9, r7
   2498c:	beq	247f4 <__assert_fail@plt+0x11c38>
   24990:	cmp	r6, #0
   24994:	beq	24a1c <__assert_fail@plt+0x11e60>
   24998:	cmp	r6, #44	; 0x2c
   2499c:	bne	24a0c <__assert_fail@plt+0x11e50>
   249a0:	add	r4, r4, #1
   249a4:	mov	r9, r7
   249a8:	mov	r2, #0
   249ac:	b	249e4 <__assert_fail@plt+0x11e28>
   249b0:	movw	r3, #1080	; 0x438
   249b4:	b	249dc <__assert_fail@plt+0x11e20>
   249b8:	cmp	r6, #111	; 0x6f
   249bc:	beq	249d8 <__assert_fail@plt+0x11e1c>
   249c0:	mov	r3, #2496	; 0x9c0
   249c4:	cmp	r6, #117	; 0x75
   249c8:	beq	249dc <__assert_fail@plt+0x11e20>
   249cc:	b	24a0c <__assert_fail@plt+0x11e50>
   249d0:	movw	r3, #4095	; 0xfff
   249d4:	b	249dc <__assert_fail@plt+0x11e20>
   249d8:	movw	r3, #519	; 0x207
   249dc:	orr	r2, r2, r3
   249e0:	add	r4, r4, #1
   249e4:	ldrb	r6, [r4]
   249e8:	cmp	r6, #110	; 0x6e
   249ec:	bgt	249b8 <__assert_fail@plt+0x11dfc>
   249f0:	cmp	r6, #97	; 0x61
   249f4:	beq	249d0 <__assert_fail@plt+0x11e14>
   249f8:	cmp	r6, #103	; 0x67
   249fc:	beq	249b0 <__assert_fail@plt+0x11df4>
   24a00:	sub	r1, r6, #43	; 0x2b
   24a04:	cmp	r1, #18
   24a08:	bls	247ec <__assert_fail@plt+0x11c30>
   24a0c:	bl	2c048 <__assert_fail@plt+0x1948c>
   24a10:	mov	r0, #0
   24a14:	sub	sp, fp, #28
   24a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a1c:	add	r1, r0, r7, lsl #4
   24a20:	mov	r2, #0
   24a24:	strb	r2, [r1, #1]
   24a28:	b	24a14 <__assert_fail@plt+0x11e58>
   24a2c:	push	{r4, sl, fp, lr}
   24a30:	add	fp, sp, #8
   24a34:	sub	sp, sp, #104	; 0x68
   24a38:	mov	r1, sp
   24a3c:	bl	3d704 <__assert_fail@plt+0x2ab48>
   24a40:	mov	r1, r0
   24a44:	mov	r0, #0
   24a48:	cmp	r1, #0
   24a4c:	bne	24a78 <__assert_fail@plt+0x11ebc>
   24a50:	ldr	r4, [sp, #16]
   24a54:	mov	r0, #32
   24a58:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   24a5c:	movw	r1, #317	; 0x13d
   24a60:	strh	r1, [r0]
   24a64:	movw	r1, #4095	; 0xfff
   24a68:	stmib	r0, {r1, r4}
   24a6c:	str	r1, [r0, #12]
   24a70:	mov	r1, #0
   24a74:	strb	r1, [r0, #17]
   24a78:	sub	sp, fp, #8
   24a7c:	pop	{r4, sl, fp, pc}
   24a80:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24a84:	add	fp, sp, #24
   24a88:	ldrb	r4, [r3, #1]
   24a8c:	ldr	ip, [fp, #8]
   24a90:	bfc	r0, #12, #20
   24a94:	cmp	r4, #0
   24a98:	beq	24b78 <__assert_fail@plt+0x11fbc>
   24a9c:	cmp	r1, #0
   24aa0:	mov	lr, r1
   24aa4:	add	r3, r3, #8
   24aa8:	mov	r9, #0
   24aac:	movw	r8, #4095	; 0xfff
   24ab0:	movwne	lr, #3072	; 0xc00
   24ab4:	mov	r5, r3
   24ab8:	ldr	r7, [r3, #-4]
   24abc:	ldr	r3, [r3]
   24ac0:	uxtb	r4, r4
   24ac4:	ldr	r6, [r5, #4]
   24ac8:	cmp	r4, #2
   24acc:	bic	r6, lr, r6
   24ad0:	beq	24afc <__assert_fail@plt+0x11f40>
   24ad4:	cmp	r4, #3
   24ad8:	bne	24b08 <__assert_fail@plt+0x11f4c>
   24adc:	and	r4, r3, r0
   24ae0:	tst	r4, #146	; 0x92
   24ae4:	mov	r3, r4
   24ae8:	orrne	r3, r3, #146	; 0x92
   24aec:	tst	r4, #292	; 0x124
   24af0:	orrne	r3, r3, #292	; 0x124
   24af4:	tst	r4, #73	; 0x49
   24af8:	b	24b04 <__assert_fail@plt+0x11f48>
   24afc:	and	r4, r0, #73	; 0x49
   24b00:	orrs	r4, r4, r1
   24b04:	orrne	r3, r3, #73	; 0x49
   24b08:	cmp	r7, #0
   24b0c:	mov	r4, r7
   24b10:	mvneq	r4, r2
   24b14:	bic	r4, r4, r6
   24b18:	and	r3, r4, r3
   24b1c:	ldrb	r4, [r5, #-8]
   24b20:	cmp	r4, #43	; 0x2b
   24b24:	beq	24b54 <__assert_fail@plt+0x11f98>
   24b28:	cmp	r4, #45	; 0x2d
   24b2c:	beq	24b5c <__assert_fail@plt+0x11fa0>
   24b30:	cmp	r4, #61	; 0x3d
   24b34:	bne	24b64 <__assert_fail@plt+0x11fa8>
   24b38:	mvn	r4, r7
   24b3c:	cmp	r7, #0
   24b40:	orrne	r6, r6, r4
   24b44:	and	r0, r6, r0
   24b48:	orr	r0, r3, r0
   24b4c:	bic	r3, r8, r6
   24b50:	b	24b60 <__assert_fail@plt+0x11fa4>
   24b54:	orr	r0, r3, r0
   24b58:	b	24b60 <__assert_fail@plt+0x11fa4>
   24b5c:	bic	r0, r0, r3
   24b60:	orr	r9, r3, r9
   24b64:	ldrb	r4, [r5, #9]
   24b68:	add	r3, r5, #16
   24b6c:	cmp	r4, #0
   24b70:	bne	24ab4 <__assert_fail@plt+0x11ef8>
   24b74:	b	24b7c <__assert_fail@plt+0x11fc0>
   24b78:	mov	r9, #0
   24b7c:	cmp	ip, #0
   24b80:	strne	r9, [ip]
   24b84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24b88:	push	{fp, lr}
   24b8c:	mov	fp, sp
   24b90:	mov	r4, r0
   24b94:	movw	r0, #17664	; 0x4500
   24b98:	movw	r1, #9036	; 0x234c
   24b9c:	mov	r2, #5
   24ba0:	movt	r0, #5
   24ba4:	movt	r1, #4
   24ba8:	ldr	r5, [r0]
   24bac:	mov	r0, #0
   24bb0:	bl	1264c <dcgettext@plt>
   24bb4:	mov	r2, r0
   24bb8:	mov	r0, r5
   24bbc:	mov	r1, r4
   24bc0:	bl	12790 <error@plt>
   24bc4:	bl	12b68 <abort@plt>
   24bc8:	push	{fp, lr}
   24bcc:	mov	fp, sp
   24bd0:	mov	r4, r0
   24bd4:	movw	r0, #17664	; 0x4500
   24bd8:	movw	r1, #9079	; 0x2377
   24bdc:	mov	r2, #5
   24be0:	movt	r0, #5
   24be4:	movt	r1, #4
   24be8:	ldr	r5, [r0]
   24bec:	mov	r0, #0
   24bf0:	bl	1264c <dcgettext@plt>
   24bf4:	mov	r2, r0
   24bf8:	mov	r0, r5
   24bfc:	mov	r1, r4
   24c00:	bl	12790 <error@plt>
   24c04:	bl	12b68 <abort@plt>
   24c08:	sub	sp, sp, #4
   24c0c:	push	{fp, lr}
   24c10:	mov	fp, sp
   24c14:	sub	sp, sp, #4
   24c18:	str	r3, [fp, #8]
   24c1c:	mov	r3, #0
   24c20:	tst	r2, #64	; 0x40
   24c24:	addne	r3, fp, #8
   24c28:	addne	r3, r3, #4
   24c2c:	strne	r3, [sp]
   24c30:	ldrne	r3, [fp, #8]
   24c34:	bl	128b0 <openat64@plt>
   24c38:	bl	2a500 <__assert_fail@plt+0x17944>
   24c3c:	mov	sp, fp
   24c40:	pop	{fp, lr}
   24c44:	add	sp, sp, #4
   24c48:	bx	lr
   24c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c50:	add	fp, sp, #28
   24c54:	sub	sp, sp, #372	; 0x174
   24c58:	sub	sp, sp, #1024	; 0x400
   24c5c:	sub	r1, fp, #52	; 0x34
   24c60:	mov	r4, r0
   24c64:	movw	lr, #9184	; 0x23e0
   24c68:	mvn	r6, #1
   24c6c:	add	r9, sp, #208	; 0xd0
   24c70:	sub	sl, fp, #92	; 0x5c
   24c74:	mov	r8, #0
   24c78:	mov	ip, #0
   24c7c:	mov	r5, #0
   24c80:	add	r0, r1, #1
   24c84:	movt	lr, #4
   24c88:	str	r0, [sp, #84]	; 0x54
   24c8c:	add	r0, r1, #19
   24c90:	str	r0, [sp, #152]	; 0x98
   24c94:	add	r0, r4, #32
   24c98:	str	r0, [sp, #88]	; 0x58
   24c9c:	add	r0, r4, #40	; 0x28
   24ca0:	str	r0, [sp, #80]	; 0x50
   24ca4:	add	r0, r4, #64	; 0x40
   24ca8:	str	r0, [sp, #128]	; 0x80
   24cac:	add	r0, r4, #56	; 0x38
   24cb0:	str	r0, [sp, #132]	; 0x84
   24cb4:	add	r0, r4, #8
   24cb8:	str	r0, [sp, #92]	; 0x5c
   24cbc:	add	r0, r4, #80	; 0x50
   24cc0:	str	r0, [sp, #104]	; 0x68
   24cc4:	add	r0, r4, #72	; 0x48
   24cc8:	str	r0, [sp, #100]	; 0x64
   24ccc:	add	r0, r4, #88	; 0x58
   24cd0:	str	r0, [sp, #76]	; 0x4c
   24cd4:	mov	r0, #0
   24cd8:	strh	r0, [fp, #-92]	; 0xffffffa4
   24cdc:	movw	r0, #9128	; 0x23a8
   24ce0:	movt	r0, #4
   24ce4:	add	r0, r0, #20
   24ce8:	str	r0, [sp, #96]	; 0x60
   24cec:	mov	r0, #0
   24cf0:	str	r0, [sp, #108]	; 0x6c
   24cf4:	mov	r0, #0
   24cf8:	str	r0, [sp, #112]	; 0x70
   24cfc:	mov	r0, #0
   24d00:	str	r0, [sp, #116]	; 0x74
   24d04:	mov	r0, #0
   24d08:	str	r0, [sp, #124]	; 0x7c
   24d0c:	mov	r0, #0
   24d10:	str	r0, [sp, #120]	; 0x78
   24d14:	cmp	r8, #12
   24d18:	beq	267e4 <__assert_fail@plt+0x13c28>
   24d1c:	add	r0, lr, r8
   24d20:	ldrsb	r1, [r0]
   24d24:	cmn	r1, #93	; 0x5d
   24d28:	bne	24d34 <__assert_fail@plt+0x12178>
   24d2c:	str	r5, [sp, #156]	; 0x9c
   24d30:	b	2549c <__assert_fail@plt+0x128e0>
   24d34:	cmn	r6, #2
   24d38:	bne	2541c <__assert_fail@plt+0x12860>
   24d3c:	ldr	r0, [r4]
   24d40:	str	r1, [sp, #204]	; 0xcc
   24d44:	b	24d8c <__assert_fail@plt+0x121d0>
   24d48:	mov	r1, #0
   24d4c:	mov	r2, r0
   24d50:	add	r0, r0, #1
   24d54:	str	r0, [r4]
   24d58:	ldrb	r2, [r2]
   24d5c:	cmp	r2, #40	; 0x28
   24d60:	beq	24d78 <__assert_fail@plt+0x121bc>
   24d64:	cmp	r2, #41	; 0x29
   24d68:	beq	24d80 <__assert_fail@plt+0x121c4>
   24d6c:	cmp	r2, #0
   24d70:	bne	24d84 <__assert_fail@plt+0x121c8>
   24d74:	b	24f70 <__assert_fail@plt+0x123b4>
   24d78:	add	r1, r1, #1
   24d7c:	b	24d84 <__assert_fail@plt+0x121c8>
   24d80:	sub	r1, r1, #1
   24d84:	cmp	r1, #0
   24d88:	bne	24d4c <__assert_fail@plt+0x12190>
   24d8c:	ldrb	r2, [r0]
   24d90:	sub	r1, r2, #9
   24d94:	cmp	r1, #5
   24d98:	bcs	24da8 <__assert_fail@plt+0x121ec>
   24d9c:	add	r0, r0, #1
   24da0:	str	r0, [r4]
   24da4:	b	24d8c <__assert_fail@plt+0x121d0>
   24da8:	cmp	r2, #32
   24dac:	beq	24d9c <__assert_fail@plt+0x121e0>
   24db0:	sub	r1, r2, #48	; 0x30
   24db4:	cmp	r1, #10
   24db8:	bcs	24dcc <__assert_fail@plt+0x12210>
   24dbc:	cmp	r2, #45	; 0x2d
   24dc0:	cmpne	r2, #43	; 0x2b
   24dc4:	beq	24f2c <__assert_fail@plt+0x12370>
   24dc8:	b	24f78 <__assert_fail@plt+0x123bc>
   24dcc:	sub	r1, r2, #40	; 0x28
   24dd0:	cmp	r1, #82	; 0x52
   24dd4:	bhi	267c0 <__assert_fail@plt+0x13c04>
   24dd8:	add	r3, pc, #0
   24ddc:	ldr	pc, [r3, r1, lsl #2]
   24de0:	andeq	r4, r2, r8, asr #26
   24de4:	andeq	r6, r2, r0, asr #15
   24de8:	andeq	r6, r2, r0, asr #15
   24dec:	andeq	r4, r2, ip, lsr #30
   24df0:	andeq	r6, r2, r0, asr #15
   24df4:	andeq	r4, r2, ip, lsr #30
   24df8:	andeq	r6, r2, r0, asr #15
   24dfc:	andeq	r6, r2, r0, asr #15
   24e00:	andeq	r6, r2, r0, asr #15
   24e04:	andeq	r6, r2, r0, asr #15
   24e08:	andeq	r6, r2, r0, asr #15
   24e0c:	andeq	r6, r2, r0, asr #15
   24e10:	andeq	r6, r2, r0, asr #15
   24e14:	andeq	r6, r2, r0, asr #15
   24e18:	andeq	r6, r2, r0, asr #15
   24e1c:	andeq	r6, r2, r0, asr #15
   24e20:	andeq	r6, r2, r0, asr #15
   24e24:	andeq	r6, r2, r0, asr #15
   24e28:	andeq	r6, r2, r0, asr #15
   24e2c:	andeq	r6, r2, r0, asr #15
   24e30:	andeq	r6, r2, r0, asr #15
   24e34:	andeq	r6, r2, r0, asr #15
   24e38:	andeq	r6, r2, r0, asr #15
   24e3c:	andeq	r6, r2, r0, asr #15
   24e40:	andeq	r6, r2, r0, asr #15
   24e44:	andeq	r5, r2, r0, asr r0
   24e48:	andeq	r5, r2, r0, asr r0
   24e4c:	andeq	r5, r2, r0, asr r0
   24e50:	andeq	r5, r2, r0, asr r0
   24e54:	andeq	r5, r2, r0, asr r0
   24e58:	andeq	r5, r2, r0, asr r0
   24e5c:	andeq	r5, r2, r0, asr r0
   24e60:	andeq	r5, r2, r0, asr r0
   24e64:	andeq	r5, r2, r0, asr r0
   24e68:	andeq	r5, r2, r0, asr r0
   24e6c:	andeq	r5, r2, r0, asr r0
   24e70:	andeq	r5, r2, r0, asr r0
   24e74:	andeq	r5, r2, r0, asr r0
   24e78:	andeq	r5, r2, r0, asr r0
   24e7c:	andeq	r5, r2, r0, asr r0
   24e80:	andeq	r5, r2, r0, asr r0
   24e84:	andeq	r5, r2, r0, asr r0
   24e88:	andeq	r5, r2, r0, asr r0
   24e8c:	andeq	r5, r2, r0, asr r0
   24e90:	andeq	r5, r2, r0, asr r0
   24e94:	andeq	r5, r2, r0, asr r0
   24e98:	andeq	r5, r2, r0, asr r0
   24e9c:	andeq	r5, r2, r0, asr r0
   24ea0:	andeq	r5, r2, r0, asr r0
   24ea4:	andeq	r5, r2, r0, asr r0
   24ea8:	andeq	r5, r2, r0, asr r0
   24eac:	andeq	r6, r2, r0, asr #15
   24eb0:	andeq	r6, r2, r0, asr #15
   24eb4:	andeq	r6, r2, r0, asr #15
   24eb8:	andeq	r6, r2, r0, asr #15
   24ebc:	andeq	r6, r2, r0, asr #15
   24ec0:	andeq	r6, r2, r0, asr #15
   24ec4:	andeq	r5, r2, r0, asr r0
   24ec8:	andeq	r5, r2, r0, asr r0
   24ecc:	andeq	r5, r2, r0, asr r0
   24ed0:	andeq	r5, r2, r0, asr r0
   24ed4:	andeq	r5, r2, r0, asr r0
   24ed8:	andeq	r5, r2, r0, asr r0
   24edc:	andeq	r5, r2, r0, asr r0
   24ee0:	andeq	r5, r2, r0, asr r0
   24ee4:	andeq	r5, r2, r0, asr r0
   24ee8:	andeq	r5, r2, r0, asr r0
   24eec:	andeq	r5, r2, r0, asr r0
   24ef0:	andeq	r5, r2, r0, asr r0
   24ef4:	andeq	r5, r2, r0, asr r0
   24ef8:	andeq	r5, r2, r0, asr r0
   24efc:	andeq	r5, r2, r0, asr r0
   24f00:	andeq	r5, r2, r0, asr r0
   24f04:	andeq	r5, r2, r0, asr r0
   24f08:	andeq	r5, r2, r0, asr r0
   24f0c:	andeq	r5, r2, r0, asr r0
   24f10:	andeq	r5, r2, r0, asr r0
   24f14:	andeq	r5, r2, r0, asr r0
   24f18:	andeq	r5, r2, r0, asr r0
   24f1c:	andeq	r5, r2, r0, asr r0
   24f20:	andeq	r5, r2, r0, asr r0
   24f24:	andeq	r5, r2, r0, asr r0
   24f28:	andeq	r5, r2, r0, asr r0
   24f2c:	add	r0, r0, #1
   24f30:	str	r0, [r4]
   24f34:	ldrb	r3, [r0]
   24f38:	sub	r1, r3, #9
   24f3c:	cmp	r1, #5
   24f40:	bcc	24f2c <__assert_fail@plt+0x12370>
   24f44:	cmp	r3, #32
   24f48:	beq	24f2c <__assert_fail@plt+0x12370>
   24f4c:	sub	r1, r3, #48	; 0x30
   24f50:	cmp	r1, #9
   24f54:	bhi	24d8c <__assert_fail@plt+0x121d0>
   24f58:	cmp	r2, #45	; 0x2d
   24f5c:	mov	r1, #1
   24f60:	str	ip, [sp, #144]	; 0x90
   24f64:	mov	ip, r5
   24f68:	mvneq	r1, #0
   24f6c:	b	24f88 <__assert_fail@plt+0x123cc>
   24f70:	ldr	r1, [sp, #204]	; 0xcc
   24f74:	b	2544c <__assert_fail@plt+0x12890>
   24f78:	str	ip, [sp, #144]	; 0x90
   24f7c:	mov	ip, r5
   24f80:	mov	r1, #0
   24f84:	mov	r3, r2
   24f88:	mov	r2, #0
   24f8c:	mov	r7, r0
   24f90:	cmn	r2, #1
   24f94:	ble	24fac <__assert_fail@plt+0x123f0>
   24f98:	movw	r5, #52428	; 0xcccc
   24f9c:	movt	r5, #3276	; 0xccc
   24fa0:	cmp	r2, r5
   24fa4:	ble	24fc0 <__assert_fail@plt+0x12404>
   24fa8:	b	2515c <__assert_fail@plt+0x125a0>
   24fac:	beq	24fc0 <__assert_fail@plt+0x12404>
   24fb0:	mov	r5, #-2147483648	; 0x80000000
   24fb4:	sdiv	r6, r5, r2
   24fb8:	cmp	r6, #10
   24fbc:	blt	2515c <__assert_fail@plt+0x125a0>
   24fc0:	mvn	r5, #47	; 0x2f
   24fc4:	cmp	r1, #0
   24fc8:	uxtab	r6, r5, r3
   24fcc:	uxtb	r3, r3
   24fd0:	rsblt	r6, r3, #48	; 0x30
   24fd4:	add	r3, r2, r2, lsl #2
   24fd8:	add	r2, r6, r3, lsl #1
   24fdc:	cmp	r2, r3, lsl #1
   24fe0:	bvs	25148 <__assert_fail@plt+0x1258c>
   24fe4:	ldrb	r3, [r7, #1]!
   24fe8:	sub	r6, r3, #48	; 0x30
   24fec:	cmp	r6, #10
   24ff0:	bcc	24f90 <__assert_fail@plt+0x123d4>
   24ff4:	orr	r3, r3, #2
   24ff8:	cmp	r3, #46	; 0x2e
   24ffc:	bne	25168 <__assert_fail@plt+0x125ac>
   25000:	ldrb	r3, [r7, #1]
   25004:	sub	r3, r3, #48	; 0x30
   25008:	cmp	r3, #9
   2500c:	bhi	25168 <__assert_fail@plt+0x125ac>
   25010:	add	r6, r7, #2
   25014:	mov	r7, #8
   25018:	mov	r0, r6
   2501c:	ldrb	r5, [r0], #1
   25020:	sub	r5, r5, #48	; 0x30
   25024:	cmp	r5, #10
   25028:	movcc	r6, r0
   2502c:	add	r0, r3, r3, lsl #2
   25030:	lsl	r3, r0, #1
   25034:	addcc	r3, r5, r0, lsl #1
   25038:	subs	r7, r7, #1
   2503c:	bne	25018 <__assert_fail@plt+0x1245c>
   25040:	cmn	r1, #1
   25044:	ble	2671c <__assert_fail@plt+0x13b60>
   25048:	mov	r5, ip
   2504c:	b	26754 <__assert_fail@plt+0x13b98>
   25050:	ldr	lr, [sp, #84]	; 0x54
   25054:	str	r5, [sp, #156]	; 0x9c
   25058:	sub	r1, fp, #52	; 0x34
   2505c:	mvn	r5, #96	; 0x60
   25060:	ldr	r3, [sp, #152]	; 0x98
   25064:	cmp	r1, r3
   25068:	mov	r3, #1
   2506c:	strbcc	r2, [r1], #1
   25070:	ldrcc	r2, [r4]
   25074:	movcs	r2, r0
   25078:	add	r0, r2, #1
   2507c:	str	r0, [r4]
   25080:	ldrb	r2, [r2, #1]
   25084:	sub	r7, r2, #65	; 0x41
   25088:	cmp	r7, #26
   2508c:	subcs	r7, r2, #97	; 0x61
   25090:	cmpcs	r7, #26
   25094:	movcs	r3, #0
   25098:	cmp	r2, #46	; 0x2e
   2509c:	beq	25060 <__assert_fail@plt+0x124a4>
   250a0:	cmp	r3, #0
   250a4:	bne	25060 <__assert_fail@plt+0x124a4>
   250a8:	mov	r0, #0
   250ac:	mov	r6, ip
   250b0:	strb	r0, [r1]
   250b4:	ldrb	r0, [fp, #-52]	; 0xffffffcc
   250b8:	cmp	r0, #0
   250bc:	beq	250e4 <__assert_fail@plt+0x12528>
   250c0:	mov	r1, lr
   250c4:	uxtab	r2, r5, r0
   250c8:	cmp	r2, #26
   250cc:	subcc	r0, r0, #32
   250d0:	strb	r0, [r1, #-1]
   250d4:	ldrb	r0, [r1]
   250d8:	add	r1, r1, #1
   250dc:	cmp	r0, #0
   250e0:	bne	250c4 <__assert_fail@plt+0x12508>
   250e4:	movw	r1, #11899	; 0x2e7b
   250e8:	movw	r7, #10152	; 0x27a8
   250ec:	sub	r5, fp, #52	; 0x34
   250f0:	movt	r1, #4
   250f4:	movt	r7, #4
   250f8:	mov	r0, r5
   250fc:	bl	124cc <strcmp@plt>
   25100:	cmp	r0, #0
   25104:	beq	253e8 <__assert_fail@plt+0x1282c>
   25108:	ldr	r1, [r7, #12]!
   2510c:	cmp	r1, #0
   25110:	bne	250f8 <__assert_fail@plt+0x1253c>
   25114:	mov	r0, r5
   25118:	bl	1288c <strlen@plt>
   2511c:	cmp	r0, #3
   25120:	mov	r5, sl
   25124:	str	r0, [sp, #200]	; 0xc8
   25128:	beq	251a0 <__assert_fail@plt+0x125e4>
   2512c:	cmp	r0, #4
   25130:	bne	251a8 <__assert_fail@plt+0x125ec>
   25134:	ldrb	r0, [fp, #-49]	; 0xffffffcf
   25138:	sub	r0, r0, #46	; 0x2e
   2513c:	clz	r0, r0
   25140:	lsr	sl, r0, #5
   25144:	b	251ac <__assert_fail@plt+0x125f0>
   25148:	mov	r5, ip
   2514c:	ldr	ip, [sp, #144]	; 0x90
   25150:	ldr	r1, [sp, #204]	; 0xcc
   25154:	mov	r6, #63	; 0x3f
   25158:	b	2543c <__assert_fail@plt+0x12880>
   2515c:	mov	r6, #63	; 0x3f
   25160:	mov	r5, ip
   25164:	b	25194 <__assert_fail@plt+0x125d8>
   25168:	sub	r0, r7, r0
   2516c:	cmp	r1, #0
   25170:	movw	r3, #274	; 0x112
   25174:	str	r7, [r4]
   25178:	lsr	r5, r1, #31
   2517c:	str	r2, [sp, #108]	; 0x6c
   25180:	movweq	r3, #275	; 0x113
   25184:	str	r0, [sp, #116]	; 0x74
   25188:	asr	r0, r2, #31
   2518c:	str	r0, [sp, #112]	; 0x70
   25190:	mov	r6, r3
   25194:	ldr	ip, [sp, #144]	; 0x90
   25198:	ldr	r1, [sp, #204]	; 0xcc
   2519c:	b	2543c <__assert_fail@plt+0x12880>
   251a0:	mov	sl, #1
   251a4:	b	251ac <__assert_fail@plt+0x125f0>
   251a8:	mov	sl, #0
   251ac:	movw	r1, #11915	; 0x2e8b
   251b0:	movw	r7, #10212	; 0x27e4
   251b4:	movt	r1, #4
   251b8:	movt	r7, #4
   251bc:	sub	r0, fp, #52	; 0x34
   251c0:	cmp	sl, #0
   251c4:	beq	251d4 <__assert_fail@plt+0x12618>
   251c8:	mov	r2, #3
   251cc:	bl	12b5c <strncmp@plt>
   251d0:	b	251d8 <__assert_fail@plt+0x1261c>
   251d4:	bl	124cc <strcmp@plt>
   251d8:	movw	lr, #9184	; 0x23e0
   251dc:	cmp	r0, #0
   251e0:	movt	lr, #4
   251e4:	beq	253f8 <__assert_fail@plt+0x1283c>
   251e8:	ldr	r1, [r7, #12]!
   251ec:	cmp	r1, #0
   251f0:	bne	251bc <__assert_fail@plt+0x12600>
   251f4:	mov	r0, r4
   251f8:	sub	r1, fp, #52	; 0x34
   251fc:	bl	28168 <__assert_fail@plt+0x155ac>
   25200:	movw	lr, #9184	; 0x23e0
   25204:	mov	ip, r6
   25208:	mov	r7, r0
   2520c:	cmp	r0, #0
   25210:	mov	sl, r5
   25214:	movt	lr, #4
   25218:	bne	25400 <__assert_fail@plt+0x12844>
   2521c:	movw	r1, #12283	; 0x2ffb
   25220:	sub	r0, fp, #52	; 0x34
   25224:	movt	r1, #4
   25228:	bl	124cc <strcmp@plt>
   2522c:	movw	lr, #9184	; 0x23e0
   25230:	movw	r7, #10512	; 0x2910
   25234:	mov	ip, r6
   25238:	cmp	r0, #0
   2523c:	movt	lr, #4
   25240:	movt	r7, #4
   25244:	beq	25400 <__assert_fail@plt+0x12844>
   25248:	movw	r1, #12287	; 0x2fff
   2524c:	movw	r7, #10524	; 0x291c
   25250:	sub	r5, fp, #52	; 0x34
   25254:	movt	r1, #4
   25258:	movt	r7, #4
   2525c:	mov	r0, r5
   25260:	bl	124cc <strcmp@plt>
   25264:	cmp	r0, #0
   25268:	beq	253e8 <__assert_fail@plt+0x1282c>
   2526c:	ldr	r1, [r7, #12]!
   25270:	cmp	r1, #0
   25274:	bne	2525c <__assert_fail@plt+0x126a0>
   25278:	ldr	r0, [sp, #200]	; 0xc8
   2527c:	mov	r1, r5
   25280:	mov	r5, sl
   25284:	sub	sl, r0, #1
   25288:	ldrb	r0, [r1, sl]
   2528c:	cmp	r0, #83	; 0x53
   25290:	bne	252d4 <__assert_fail@plt+0x12718>
   25294:	mov	r0, #0
   25298:	movw	r7, #10524	; 0x291c
   2529c:	strb	r0, [r1, sl]
   252a0:	movw	r1, #12287	; 0x2fff
   252a4:	movt	r7, #4
   252a8:	movt	r1, #4
   252ac:	sub	r0, fp, #52	; 0x34
   252b0:	bl	124cc <strcmp@plt>
   252b4:	cmp	r0, #0
   252b8:	beq	267d0 <__assert_fail@plt+0x13c14>
   252bc:	ldr	r1, [r7, #12]!
   252c0:	cmp	r1, #0
   252c4:	bne	252ac <__assert_fail@plt+0x126f0>
   252c8:	mov	r0, #83	; 0x53
   252cc:	sub	r1, fp, #52	; 0x34
   252d0:	strb	r0, [r1, sl]
   252d4:	mov	sl, r5
   252d8:	ldr	r5, [sp, #156]	; 0x9c
   252dc:	movw	r1, #12340	; 0x3034
   252e0:	movw	r7, #10656	; 0x29a0
   252e4:	movt	r1, #4
   252e8:	movt	r7, #4
   252ec:	sub	r0, fp, #52	; 0x34
   252f0:	bl	124cc <strcmp@plt>
   252f4:	cmp	r0, #0
   252f8:	beq	253e8 <__assert_fail@plt+0x1282c>
   252fc:	ldr	r1, [r7, #12]!
   25300:	cmp	r1, #0
   25304:	bne	252ec <__assert_fail@plt+0x12730>
   25308:	ldr	r0, [sp, #200]	; 0xc8
   2530c:	ldrb	r1, [fp, #-52]	; 0xffffffcc
   25310:	movw	lr, #9184	; 0x23e0
   25314:	mov	ip, r6
   25318:	movt	lr, #4
   2531c:	cmp	r0, #1
   25320:	bne	2534c <__assert_fail@plt+0x12790>
   25324:	movw	r0, #12469	; 0x30b5
   25328:	movw	r7, #10908	; 0x2a9c
   2532c:	movt	r0, #4
   25330:	movt	r7, #4
   25334:	ldrb	r0, [r0]
   25338:	cmp	r1, r0
   2533c:	beq	25400 <__assert_fail@plt+0x12844>
   25340:	ldr	r0, [r7, #12]!
   25344:	cmp	r0, #0
   25348:	bne	25334 <__assert_fail@plt+0x12778>
   2534c:	cmp	r1, #0
   25350:	beq	267dc <__assert_fail@plt+0x13c20>
   25354:	ldr	r3, [sp, #84]	; 0x54
   25358:	cmp	r1, #46	; 0x2e
   2535c:	sub	r2, fp, #52	; 0x34
   25360:	sub	r1, r1, #46	; 0x2e
   25364:	clz	r1, r1
   25368:	lsr	r1, r1, #5
   2536c:	mov	r0, r3
   25370:	moveq	r0, r2
   25374:	ldrb	r2, [fp, #-51]	; 0xffffffcd
   25378:	cmp	r2, #0
   2537c:	strb	r2, [r0]
   25380:	beq	253b4 <__assert_fail@plt+0x127f8>
   25384:	mov	r2, r3
   25388:	ldrb	r3, [r2]
   2538c:	ldrb	r7, [r2, #1]!
   25390:	cmp	r3, #46	; 0x2e
   25394:	sub	r3, r3, #46	; 0x2e
   25398:	clz	r3, r3
   2539c:	addne	r0, r0, #1
   253a0:	cmp	r7, #0
   253a4:	lsr	r3, r3, #5
   253a8:	strb	r7, [r0]
   253ac:	orr	r1, r1, r3
   253b0:	bne	25388 <__assert_fail@plt+0x127cc>
   253b4:	tst	r1, #1
   253b8:	beq	267dc <__assert_fail@plt+0x13c20>
   253bc:	mov	r0, r4
   253c0:	sub	r1, fp, #52	; 0x34
   253c4:	bl	28168 <__assert_fail@plt+0x155ac>
   253c8:	movw	lr, #9184	; 0x23e0
   253cc:	mov	ip, r6
   253d0:	mov	r7, r0
   253d4:	cmp	r0, #0
   253d8:	mov	r6, #63	; 0x3f
   253dc:	movt	lr, #4
   253e0:	bne	25400 <__assert_fail@plt+0x12844>
   253e4:	b	25418 <__assert_fail@plt+0x1285c>
   253e8:	movw	lr, #9184	; 0x23e0
   253ec:	mov	ip, r6
   253f0:	movt	lr, #4
   253f4:	b	25400 <__assert_fail@plt+0x12844>
   253f8:	mov	ip, r6
   253fc:	mov	sl, r5
   25400:	ldr	r5, [r7, #8]
   25404:	ldr	r6, [r7, #4]
   25408:	asr	r0, r5, #31
   2540c:	str	r0, [sp, #124]	; 0x7c
   25410:	lsr	r0, r5, #8
   25414:	str	r0, [sp, #120]	; 0x78
   25418:	ldr	r1, [sp, #204]	; 0xcc
   2541c:	cmp	r6, #1
   25420:	blt	2544c <__assert_fail@plt+0x12890>
   25424:	mov	r2, r1
   25428:	lsr	r1, r6, #1
   2542c:	mov	r0, #2
   25430:	cmp	r1, #138	; 0x8a
   25434:	mov	r1, r2
   25438:	bhi	25454 <__assert_fail@plt+0x12898>
   2543c:	movw	r0, #9298	; 0x2452
   25440:	movt	r0, #4
   25444:	ldrb	r0, [r0, r6]
   25448:	b	25454 <__assert_fail@plt+0x12898>
   2544c:	mov	r0, #0
   25450:	mov	r6, #0
   25454:	add	r1, r0, r1
   25458:	str	r5, [sp, #156]	; 0x9c
   2545c:	cmp	r1, #112	; 0x70
   25460:	bhi	2549c <__assert_fail@plt+0x128e0>
   25464:	movw	r2, #9576	; 0x2568
   25468:	movt	r2, #4
   2546c:	add	r2, r2, r1
   25470:	ldrsb	r2, [r2]
   25474:	cmp	r0, r2
   25478:	bne	2549c <__assert_fail@plt+0x128e0>
   2547c:	movw	r0, #9689	; 0x25d9
   25480:	movt	r0, #4
   25484:	ldrb	r8, [r0, r1]
   25488:	orr	r0, r1, #4
   2548c:	cmp	r0, #111	; 0x6f
   25490:	bne	25704 <__assert_fail@plt+0x12b48>
   25494:	rsb	r5, r8, #0
   25498:	b	254b0 <__assert_fail@plt+0x128f4>
   2549c:	movw	r0, #9802	; 0x264a
   254a0:	movt	r0, #4
   254a4:	ldrb	r5, [r0, r8]
   254a8:	cmp	r5, #0
   254ac:	beq	267f4 <__assert_fail@plt+0x13c38>
   254b0:	movw	r0, #9916	; 0x26bc
   254b4:	mov	r1, r9
   254b8:	movt	r0, #4
   254bc:	ldrb	sl, [r0, r5]
   254c0:	rsb	r0, sl, #1
   254c4:	rsb	r0, r0, r0, lsl #3
   254c8:	ldr	r0, [r1, r0, lsl #3]!
   254cc:	str	r0, [sp, #204]	; 0xcc
   254d0:	ldr	r0, [r1, #44]	; 0x2c
   254d4:	ldr	r2, [r1, #8]
   254d8:	ldr	r3, [r1, #52]	; 0x34
   254dc:	str	r0, [sp, #164]	; 0xa4
   254e0:	ldr	r0, [r1, #40]	; 0x28
   254e4:	str	r0, [sp, #172]	; 0xac
   254e8:	ldr	r0, [r1, #36]	; 0x24
   254ec:	str	r0, [sp, #168]	; 0xa8
   254f0:	ldr	r0, [r1, #4]
   254f4:	str	r0, [sp, #200]	; 0xc8
   254f8:	ldr	r0, [r1, #12]
   254fc:	str	r0, [sp, #192]	; 0xc0
   25500:	ldr	r0, [r1, #16]
   25504:	str	r0, [sp, #196]	; 0xc4
   25508:	ldr	r0, [r1, #20]
   2550c:	str	r0, [sp, #188]	; 0xbc
   25510:	ldr	r0, [r1, #24]
   25514:	str	r0, [sp, #184]	; 0xb8
   25518:	ldr	r0, [r1, #28]
   2551c:	str	r0, [sp, #180]	; 0xb4
   25520:	ldr	r0, [r1, #32]
   25524:	ldr	r1, [r1, #48]	; 0x30
   25528:	str	r0, [sp, #176]	; 0xb0
   2552c:	sub	r0, r5, #4
   25530:	str	r1, [sp, #160]	; 0xa0
   25534:	cmp	r0, #87	; 0x57
   25538:	bhi	26620 <__assert_fail@plt+0x13a64>
   2553c:	add	r1, pc, #0
   25540:	ldr	pc, [r1, r0, lsl #2]
   25544:	andeq	r5, r2, r8, ror #16
   25548:	andeq	r6, r2, r0, lsr #12
   2554c:	andeq	r6, r2, r0, lsr #12
   25550:	muleq	r2, r0, r8
   25554:			; <UNDEFINED> instruction: 0x000258b4
   25558:	andeq	r5, r2, ip, asr #17
   2555c:	andeq	r5, r2, r4, ror #17
   25560:	strdeq	r5, [r2], -ip
   25564:	andeq	r5, r2, r4, lsl r9
   25568:	andeq	r5, r2, ip, lsr #18
   2556c:	andeq	r5, r2, r8, lsr r9
   25570:	andeq	r5, r2, r4, asr #18
   25574:	andeq	r6, r2, r0, lsr #12
   25578:	andeq	r6, r2, r0, lsr #12
   2557c:	andeq	r5, r2, r4, lsl #19
   25580:	andeq	r5, r2, r8, lsr #19
   25584:	andeq	r5, r2, r8, ror #19
   25588:	andeq	r6, r2, r0, lsr #12
   2558c:	andeq	r5, r2, r4, asr #20
   25590:	andeq	r5, r2, r8, ror #20
   25594:	andeq	r5, r2, r8, lsr #21
   25598:	andeq	r6, r2, r0, lsr #12
   2559c:	andeq	r6, r2, r0, lsr #12
   255a0:	andeq	r5, r2, r8, lsl #22
   255a4:	andeq	r5, r2, r8, ror #22
   255a8:	andeq	r5, r2, r4, ror fp
   255ac:	andeq	r5, r2, ip, lsl #23
   255b0:	muleq	r2, r4, fp
   255b4:	andeq	r5, r2, r0, lsr #23
   255b8:	andeq	r5, r2, r8, lsr #23
   255bc:	andeq	r5, r2, r0, lsr #25
   255c0:	andeq	r5, r2, ip, ror #26
   255c4:	andeq	r5, r2, r4, ror sp
   255c8:	andeq	r5, r2, r4, lsl #27
   255cc:	muleq	r2, ip, sp
   255d0:			; <UNDEFINED> instruction: 0x00025db4
   255d4:			; <UNDEFINED> instruction: 0x00025dbc
   255d8:	andeq	r5, r2, r4, ror #27
   255dc:	andeq	r5, r2, ip, ror #27
   255e0:	andeq	r5, r2, ip, lsl lr
   255e4:	andeq	r5, r2, ip, ror #28
   255e8:	andeq	r5, r2, r0, ror #29
   255ec:	strdeq	r5, [r2], -ip
   255f0:	andeq	r5, r2, r8, lsl #30
   255f4:	andeq	r5, r2, ip, lsr #30
   255f8:	andeq	r6, r2, r0, lsr #12
   255fc:	andeq	r5, r2, r8, asr #30
   25600:			; <UNDEFINED> instruction: 0x00025fb8
   25604:	andeq	r5, r2, r4, lsr #13
   25608:	andeq	r5, r2, r4, lsr #13
   2560c:	muleq	r2, ip, r0
   25610:	andeq	r5, r2, r8, asr r7
   25614:	andeq	r6, r2, r0, lsl #2
   25618:	andeq	r6, r2, r0, ror #2
   2561c:	andeq	r5, r2, r0, ror #14
   25620:	andeq	r6, r2, ip, ror #2
   25624:	andeq	r6, r2, ip, lsl #3
   25628:	andeq	r5, r2, ip, ror #14
   2562c:	andeq	r5, r2, r8, asr #15
   25630:			; <UNDEFINED> instruction: 0x000261b4
   25634:	andeq	r5, r2, r0, ror #15
   25638:	andeq	r6, r2, r0, ror #3
   2563c:	andeq	r6, r2, r8, lsl #4
   25640:	andeq	r5, r2, r8, ror #15
   25644:	andeq	r6, r2, r4, asr #4
   25648:	andeq	r6, r2, ip, ror r2
   2564c:	strdeq	r5, [r2], -r0
   25650:	strdeq	r5, [r2], -r8
   25654:	strdeq	r5, [r2], -r8
   25658:	andeq	r6, r2, r8, asr #5
   2565c:	andeq	r6, r2, r0, lsr #12
   25660:	andeq	r5, r2, r8, asr r7
   25664:	andeq	r5, r2, r0, ror #14
   25668:	andeq	r5, r2, ip, ror #14
   2566c:	andeq	r5, r2, r0, ror #15
   25670:	andeq	r5, r2, r8, ror #15
   25674:	strdeq	r5, [r2], -r0
   25678:	andeq	r5, r2, r8, asr #15
   2567c:	andeq	r6, r2, r0, lsr #12
   25680:	andeq	r6, r2, r0, lsr #12
   25684:	andeq	r6, r2, r0, lsr #12
   25688:	andeq	r5, r2, ip, asr #16
   2568c:	andeq	r6, r2, r0, lsr #12
   25690:	andeq	r5, r2, ip, asr #16
   25694:	andeq	r6, r2, r0, lsl r3
   25698:	andeq	r6, r2, r0, asr r3
   2569c:	andeq	r6, r2, r4, asr #8
   256a0:	andeq	r6, r2, r4, asr r4
   256a4:	ldr	r0, [r9]
   256a8:	str	r6, [sp, #140]	; 0x8c
   256ac:	str	ip, [sp, #144]	; 0x90
   256b0:	str	r2, [sp, #148]	; 0x94
   256b4:	ldr	r6, [r9, #16]
   256b8:	ldr	ip, [r9, #20]
   256bc:	ldr	lr, [r9, #24]
   256c0:	ldr	r8, [r9, #28]
   256c4:	ldr	r1, [r9, #44]	; 0x2c
   256c8:	ldr	r2, [r9, #48]	; 0x30
   256cc:	str	r3, [sp, #136]	; 0x88
   256d0:	str	r0, [sp, #72]	; 0x48
   256d4:	ldr	r0, [r9, #4]
   256d8:	str	r0, [sp, #68]	; 0x44
   256dc:	ldr	r0, [r9, #8]
   256e0:	str	r0, [sp, #64]	; 0x40
   256e4:	ldr	r0, [r9, #12]
   256e8:	str	r0, [sp, #60]	; 0x3c
   256ec:	ldr	r0, [r9, #32]
   256f0:	str	r0, [sp, #56]	; 0x38
   256f4:	ldr	r0, [r9, #36]	; 0x24
   256f8:	str	r0, [sp, #52]	; 0x34
   256fc:	ldr	r0, [r9, #40]	; 0x28
   25700:	b	263c8 <__assert_fail@plt+0x1380c>
   25704:	ldr	r1, [sp, #120]	; 0x78
   25708:	uxtb	r0, r5
   2570c:	orr	r0, r0, r1, lsl #8
   25710:	ldr	r1, [sp, #96]	; 0x60
   25714:	str	r0, [r9, #56]!	; 0x38
   25718:	ldr	r0, [sp, #124]	; 0x7c
   2571c:	str	r0, [r9, #4]
   25720:	ldr	r0, [sp, #108]	; 0x6c
   25724:	str	r0, [r9, #8]
   25728:	ldr	r0, [sp, #112]	; 0x70
   2572c:	str	r0, [r9, #12]
   25730:	ldr	r0, [sp, #116]	; 0x74
   25734:	str	r0, [r9, #16]
   25738:	add	r0, r9, #20
   2573c:	ldm	r1!, {r2, r3, r6, r7}
   25740:	stmia	r0!, {r2, r3, r6, r7}
   25744:	ldm	r1, {r2, r3, r5, r6, r7}
   25748:	stm	r0, {r2, r3, r5, r6, r7}
   2574c:	mvn	r6, #1
   25750:	mov	r0, ip
   25754:	b	26700 <__assert_fail@plt+0x13b44>
   25758:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   2575c:	b	260a0 <__assert_fail@plt+0x134e4>
   25760:	ldr	r2, [r9, #-48]	; 0xffffffd0
   25764:	ldr	r0, [r9, #-44]	; 0xffffffd4
   25768:	b	26174 <__assert_fail@plt+0x135b8>
   2576c:	ldm	r9, {r2, r8}
   25770:	str	r6, [sp, #140]	; 0x8c
   25774:	cmn	r8, #1
   25778:	ble	26464 <__assert_fail@plt+0x138a8>
   2577c:	orrs	r0, r2, r8
   25780:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   25784:	beq	261a8 <__assert_fail@plt+0x135ec>
   25788:	cmn	r1, #1
   2578c:	ble	264a4 <__assert_fail@plt+0x138e8>
   25790:	mov	r6, r0
   25794:	str	r1, [sp, #204]	; 0xcc
   25798:	str	r3, [sp, #136]	; 0x88
   2579c:	mvn	r0, #0
   257a0:	mvn	r1, #-2147483648	; 0x80000000
   257a4:	mov	r3, r8
   257a8:	mov	r7, r2
   257ac:	str	ip, [sp, #144]	; 0x90
   257b0:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   257b4:	mov	r2, r7
   257b8:	ldr	r3, [sp, #136]	; 0x88
   257bc:	ldr	ip, [sp, #144]	; 0x90
   257c0:	ldr	r7, [sp, #204]	; 0xcc
   257c4:	b	26558 <__assert_fail@plt+0x1399c>
   257c8:	ldrd	r0, [r9]
   257cc:	mov	r2, #0
   257d0:	str	r0, [sp, #196]	; 0xc4
   257d4:	mov	r0, #0
   257d8:	str	r1, [sp, #188]	; 0xbc
   257dc:	b	265d4 <__assert_fail@plt+0x13a18>
   257e0:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   257e4:	b	261b8 <__assert_fail@plt+0x135fc>
   257e8:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   257ec:	b	2620c <__assert_fail@plt+0x13650>
   257f0:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   257f4:	b	26280 <__assert_fail@plt+0x136c4>
   257f8:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   257fc:	mov	r2, #0
   25800:	str	r0, [sp, #172]	; 0xac
   25804:	asr	r0, r0, #31
   25808:	str	r1, [sp, #160]	; 0xa0
   2580c:	str	r0, [sp, #164]	; 0xa4
   25810:	mov	r0, #0
   25814:	str	r0, [sp, #192]	; 0xc0
   25818:	mov	r0, #0
   2581c:	str	r0, [sp, #196]	; 0xc4
   25820:	mov	r0, #0
   25824:	str	r0, [sp, #188]	; 0xbc
   25828:	mov	r0, #0
   2582c:	str	r0, [sp, #184]	; 0xb8
   25830:	mov	r0, #0
   25834:	str	r0, [sp, #180]	; 0xb4
   25838:	mov	r0, #0
   2583c:	str	r0, [sp, #176]	; 0xb0
   25840:	mov	r0, #0
   25844:	str	r0, [sp, #168]	; 0xa8
   25848:	b	26610 <__assert_fail@plt+0x13a54>
   2584c:	ldr	r7, [r9, #8]
   25850:	ldr	r1, [r9, #12]
   25854:	adds	r0, r7, #-2147483648	; 0x80000000
   25858:	adcs	r0, r1, #0
   2585c:	bne	267f4 <__assert_fail@plt+0x13c38>
   25860:	str	r7, [sp, #204]	; 0xcc
   25864:	b	26618 <__assert_fail@plt+0x13a5c>
   25868:	str	r2, [sp, #148]	; 0x94
   2586c:	ldrd	r0, [r9]
   25870:	ldr	r2, [sp, #76]	; 0x4c
   25874:	strd	r0, [r2]
   25878:	movw	r1, #2098	; 0x832
   2587c:	mov	r0, #1
   25880:	strb	r0, [r4, #152]	; 0x98
   25884:	movt	r1, #4
   25888:	mov	r0, #0
   2588c:	b	25954 <__assert_fail@plt+0x12d98>
   25890:	ldr	r1, [r4, #172]	; 0xac
   25894:	ldr	r0, [r4, #156]	; 0x9c
   25898:	add	r1, r1, #1
   2589c:	add	r0, r0, #1
   258a0:	str	r1, [r4, #172]	; 0xac
   258a4:	movw	r1, #11844	; 0x2e44
   258a8:	str	r0, [r4, #156]	; 0x9c
   258ac:	movt	r1, #4
   258b0:	b	2594c <__assert_fail@plt+0x12d90>
   258b4:	ldr	r0, [r4, #172]	; 0xac
   258b8:	movw	r1, #1568	; 0x620
   258bc:	movt	r1, #4
   258c0:	add	r0, r0, #1
   258c4:	str	r0, [r4, #172]	; 0xac
   258c8:	b	2594c <__assert_fail@plt+0x12d90>
   258cc:	ldr	r0, [r4, #164]	; 0xa4
   258d0:	movw	r1, #11853	; 0x2e4d
   258d4:	movt	r1, #4
   258d8:	add	r0, r0, #1
   258dc:	str	r0, [r4, #164]	; 0xa4
   258e0:	b	2594c <__assert_fail@plt+0x12d90>
   258e4:	ldr	r0, [r4, #176]	; 0xb0
   258e8:	movw	r1, #11859	; 0x2e53
   258ec:	movt	r1, #4
   258f0:	add	r0, r0, #1
   258f4:	str	r0, [r4, #176]	; 0xb0
   258f8:	b	2594c <__assert_fail@plt+0x12d90>
   258fc:	ldr	r0, [r4, #156]	; 0x9c
   25900:	movw	r1, #11864	; 0x2e58
   25904:	movt	r1, #4
   25908:	add	r0, r0, #1
   2590c:	str	r0, [r4, #156]	; 0x9c
   25910:	b	2594c <__assert_fail@plt+0x12d90>
   25914:	ldr	r0, [r4, #160]	; 0xa0
   25918:	movw	r1, #11869	; 0x2e5d
   2591c:	movt	r1, #4
   25920:	add	r0, r0, #1
   25924:	str	r0, [r4, #160]	; 0xa0
   25928:	b	2594c <__assert_fail@plt+0x12d90>
   2592c:	movw	r1, #11873	; 0x2e61
   25930:	movt	r1, #4
   25934:	b	2594c <__assert_fail@plt+0x12d90>
   25938:	movw	r1, #7449	; 0x1d19
   2593c:	movt	r1, #4
   25940:	b	2594c <__assert_fail@plt+0x12d90>
   25944:	movw	r1, #11882	; 0x2e6a
   25948:	movt	r1, #4
   2594c:	mov	r0, #0
   25950:	str	r2, [sp, #148]	; 0x94
   25954:	mov	r2, #5
   25958:	mov	r8, r6
   2595c:	mov	r6, ip
   25960:	mov	r7, r3
   25964:	bl	1264c <dcgettext@plt>
   25968:	ldr	r2, [sp, #148]	; 0x94
   2596c:	mov	r3, r7
   25970:	mov	ip, r6
   25974:	mov	r6, r8
   25978:	movw	lr, #9184	; 0x23e0
   2597c:	movt	lr, #4
   25980:	b	26620 <__assert_fail@plt+0x13a64>
   25984:	mov	r7, r2
   25988:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   2598c:	ldr	r2, [sp, #100]	; 0x64
   25990:	vmov.i32	q8, #0	; 0x00000000
   25994:	strd	r0, [r2]
   25998:	mov	r2, r7
   2599c:	ldr	r0, [sp, #104]	; 0x68
   259a0:	vst1.64	{d16-d17}, [r0]
   259a4:	b	25a3c <__assert_fail@plt+0x12e80>
   259a8:	ldrd	r0, [r9, #-160]	; 0xffffff60
   259ac:	ldr	r7, [sp, #100]	; 0x64
   259b0:	mov	r8, r3
   259b4:	mov	lr, r2
   259b8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   259bc:	strd	r0, [r7]
   259c0:	ldr	r0, [sp, #104]	; 0x68
   259c4:	strd	r2, [r0]
   259c8:	mov	r2, lr
   259cc:	movw	lr, #9184	; 0x23e0
   259d0:	mov	r0, #0
   259d4:	mov	r3, r8
   259d8:	str	r0, [r4, #88]	; 0x58
   259dc:	movt	lr, #4
   259e0:	str	r0, [r4, #92]	; 0x5c
   259e4:	b	25a3c <__assert_fail@plt+0x12e80>
   259e8:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   259ec:	mov	lr, r2
   259f0:	ldr	r2, [r9, #-272]	; 0xfffffef0
   259f4:	mov	r8, r6
   259f8:	ldrd	r6, [r9, #-160]	; 0xffffff60
   259fc:	str	r1, [sp, #144]	; 0x90
   25a00:	str	r0, [sp, #148]	; 0x94
   25a04:	mov	r1, r3
   25a08:	ldr	r3, [r9, #-268]	; 0xfffffef4
   25a0c:	ldr	r0, [sp, #100]	; 0x64
   25a10:	strd	r2, [r0]
   25a14:	mov	r3, r1
   25a18:	ldr	r2, [sp, #104]	; 0x68
   25a1c:	strd	r6, [r2]
   25a20:	mov	r2, lr
   25a24:	movw	lr, #9184	; 0x23e0
   25a28:	mov	r6, r8
   25a2c:	ldr	r0, [sp, #148]	; 0x94
   25a30:	ldr	r1, [sp, #144]	; 0x90
   25a34:	movt	lr, #4
   25a38:	strd	r0, [r4, #88]	; 0x58
   25a3c:	ldr	r0, [r9]
   25a40:	b	25b00 <__assert_fail@plt+0x12f44>
   25a44:	mov	r7, r2
   25a48:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   25a4c:	ldr	r2, [sp, #100]	; 0x64
   25a50:	vmov.i32	q8, #0	; 0x00000000
   25a54:	strd	r0, [r2]
   25a58:	mov	r2, r7
   25a5c:	ldr	r0, [sp, #104]	; 0x68
   25a60:	vst1.64	{d16-d17}, [r0]
   25a64:	b	25afc <__assert_fail@plt+0x12f40>
   25a68:	ldrd	r0, [r9, #-160]	; 0xffffff60
   25a6c:	ldr	r7, [sp, #100]	; 0x64
   25a70:	mov	r8, r3
   25a74:	mov	lr, r2
   25a78:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   25a7c:	strd	r0, [r7]
   25a80:	ldr	r0, [sp, #104]	; 0x68
   25a84:	strd	r2, [r0]
   25a88:	mov	r2, lr
   25a8c:	movw	lr, #9184	; 0x23e0
   25a90:	mov	r0, #0
   25a94:	mov	r3, r8
   25a98:	str	r0, [r4, #88]	; 0x58
   25a9c:	movt	lr, #4
   25aa0:	str	r0, [r4, #92]	; 0x5c
   25aa4:	b	25afc <__assert_fail@plt+0x12f40>
   25aa8:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   25aac:	mov	lr, r2
   25ab0:	ldr	r2, [r9, #-272]	; 0xfffffef0
   25ab4:	mov	r8, r6
   25ab8:	ldrd	r6, [r9, #-160]	; 0xffffff60
   25abc:	str	r1, [sp, #144]	; 0x90
   25ac0:	str	r0, [sp, #148]	; 0x94
   25ac4:	mov	r1, r3
   25ac8:	ldr	r3, [r9, #-268]	; 0xfffffef4
   25acc:	ldr	r0, [sp, #100]	; 0x64
   25ad0:	strd	r2, [r0]
   25ad4:	mov	r3, r1
   25ad8:	ldr	r2, [sp, #104]	; 0x68
   25adc:	strd	r6, [r2]
   25ae0:	mov	r2, lr
   25ae4:	movw	lr, #9184	; 0x23e0
   25ae8:	mov	r6, r8
   25aec:	ldr	r0, [sp, #148]	; 0x94
   25af0:	ldr	r1, [sp, #144]	; 0x90
   25af4:	movt	lr, #4
   25af8:	strd	r0, [r4, #88]	; 0x58
   25afc:	mov	r0, #2
   25b00:	str	r0, [r4, #28]
   25b04:	b	26620 <__assert_fail@plt+0x13a64>
   25b08:	ldr	r0, [r4, #176]	; 0xb0
   25b0c:	str	r2, [sp, #148]	; 0x94
   25b10:	str	r3, [sp, #136]	; 0x88
   25b14:	sub	r7, r9, #48	; 0x30
   25b18:	mov	lr, r6
   25b1c:	add	r0, r0, #1
   25b20:	str	r0, [r4, #176]	; 0xb0
   25b24:	ldr	r2, [r9, #-56]	; 0xffffffc8
   25b28:	ldr	r3, [r9, #-52]	; 0xffffffcc
   25b2c:	ldm	r7, {r0, r1, r7}
   25b30:	str	ip, [sp, #144]	; 0x90
   25b34:	ldr	r6, [r9, #-36]	; 0xffffffdc
   25b38:	ldm	r9, {r8, ip}
   25b3c:	stm	sp, {r0, r1, r7}
   25b40:	mov	r0, r4
   25b44:	str	r6, [sp, #12]
   25b48:	mov	r6, lr
   25b4c:	str	r8, [sp, #16]
   25b50:	str	ip, [sp, #20]
   25b54:	bl	26804 <__assert_fail@plt+0x13c48>
   25b58:	ldr	r2, [sp, #148]	; 0x94
   25b5c:	ldr	r3, [sp, #136]	; 0x88
   25b60:	ldr	ip, [sp, #144]	; 0x90
   25b64:	b	26088 <__assert_fail@plt+0x134cc>
   25b68:	ldr	r0, [r9]
   25b6c:	str	r0, [r4, #20]
   25b70:	b	26620 <__assert_fail@plt+0x13a64>
   25b74:	mov	r0, #1
   25b78:	str	r0, [r4, #20]
   25b7c:	ldr	r0, [r4, #168]	; 0xa8
   25b80:	add	r0, r0, #1
   25b84:	str	r0, [r4, #168]	; 0xa8
   25b88:	b	26620 <__assert_fail@plt+0x13a64>
   25b8c:	ldr	r0, [r9]
   25b90:	b	25d7c <__assert_fail@plt+0x131c0>
   25b94:	movw	r0, #40336	; 0x9d90
   25b98:	movt	r0, #65535	; 0xffff
   25b9c:	b	25d7c <__assert_fail@plt+0x131c0>
   25ba0:	ldr	r0, [r9, #-56]	; 0xffffffc8
   25ba4:	b	25bb0 <__assert_fail@plt+0x12ff4>
   25ba8:	movw	r0, #40336	; 0x9d90
   25bac:	movt	r0, #65535	; 0xffff
   25bb0:	str	r0, [r4, #24]
   25bb4:	str	r6, [sp, #140]	; 0x8c
   25bb8:	str	r2, [sp, #148]	; 0x94
   25bbc:	mov	r8, r3
   25bc0:	mov	r7, #1
   25bc4:	str	ip, [sp, #144]	; 0x90
   25bc8:	ldr	r0, [r9]
   25bcc:	ldr	r1, [r9, #44]	; 0x2c
   25bd0:	ldr	r2, [r9, #48]	; 0x30
   25bd4:	ldr	r3, [r9, #52]	; 0x34
   25bd8:	ldr	r6, [r9, #16]
   25bdc:	ldr	ip, [r9, #20]
   25be0:	ldr	lr, [r9, #24]
   25be4:	str	r7, [sp, #48]	; 0x30
   25be8:	str	r0, [sp, #136]	; 0x88
   25bec:	ldr	r0, [r9, #4]
   25bf0:	str	r1, [sp, #36]	; 0x24
   25bf4:	str	r2, [sp, #40]	; 0x28
   25bf8:	str	r3, [sp, #44]	; 0x2c
   25bfc:	str	r0, [sp, #72]	; 0x48
   25c00:	ldr	r0, [r9, #8]
   25c04:	str	r0, [sp, #68]	; 0x44
   25c08:	ldr	r0, [r9, #12]
   25c0c:	str	r0, [sp, #64]	; 0x40
   25c10:	ldr	r0, [r9, #28]
   25c14:	str	r0, [sp, #60]	; 0x3c
   25c18:	ldr	r0, [r9, #32]
   25c1c:	str	r0, [sp, #56]	; 0x38
   25c20:	ldr	r0, [r9, #36]	; 0x24
   25c24:	str	r0, [sp, #52]	; 0x34
   25c28:	ldr	r0, [r9, #40]	; 0x28
   25c2c:	str	r0, [sp, #32]
   25c30:	ldr	r0, [sp, #68]	; 0x44
   25c34:	str	r0, [sp]
   25c38:	ldr	r0, [sp, #64]	; 0x40
   25c3c:	stmib	sp, {r0, r6}
   25c40:	str	ip, [sp, #12]
   25c44:	str	lr, [sp, #16]
   25c48:	ldr	r0, [sp, #60]	; 0x3c
   25c4c:	ldr	r2, [sp, #136]	; 0x88
   25c50:	ldr	r3, [sp, #72]	; 0x48
   25c54:	ldr	r6, [sp, #140]	; 0x8c
   25c58:	str	r0, [sp, #20]
   25c5c:	ldr	r0, [sp, #56]	; 0x38
   25c60:	str	r0, [sp, #24]
   25c64:	ldr	r0, [sp, #52]	; 0x34
   25c68:	str	r0, [sp, #28]
   25c6c:	mov	r0, r4
   25c70:	bl	269e0 <__assert_fail@plt+0x13e24>
   25c74:	cmp	r0, #0
   25c78:	beq	267f8 <__assert_fail@plt+0x13c3c>
   25c7c:	movw	r1, #11873	; 0x2e61
   25c80:	mov	r0, #0
   25c84:	mov	r2, #5
   25c88:	movt	r1, #4
   25c8c:	bl	1264c <dcgettext@plt>
   25c90:	ldr	r2, [sp, #148]	; 0x94
   25c94:	ldr	ip, [sp, #144]	; 0x90
   25c98:	mov	r3, r8
   25c9c:	b	25978 <__assert_fail@plt+0x12dbc>
   25ca0:	add	r0, sp, #136	; 0x88
   25ca4:	str	r2, [sp, #148]	; 0x94
   25ca8:	sub	r7, r9, #48	; 0x30
   25cac:	stm	r0, {r3, r6, ip}
   25cb0:	ldr	r2, [r9, #-56]	; 0xffffffc8
   25cb4:	ldr	r3, [r9, #-52]	; 0xffffffcc
   25cb8:	ldm	r7, {r0, r1, r7}
   25cbc:	ldr	r6, [r9, #-36]	; 0xffffffdc
   25cc0:	ldm	r9, {r8, ip}
   25cc4:	stm	sp, {r0, r1, r7}
   25cc8:	add	r0, sp, #12
   25ccc:	stm	r0, {r6, r8, ip}
   25cd0:	mov	r0, r4
   25cd4:	bl	26804 <__assert_fail@plt+0x13c48>
   25cd8:	mov	r7, #1
   25cdc:	cmp	r0, #0
   25ce0:	beq	267f8 <__assert_fail@plt+0x13c3c>
   25ce4:	ldr	r0, [r4, #24]
   25ce8:	ldr	r6, [r9, #-112]	; 0xffffff90
   25cec:	ldr	ip, [r9, #-108]	; 0xffffff94
   25cf0:	mov	r3, #0
   25cf4:	mov	r2, #0
   25cf8:	asr	r1, r0, #31
   25cfc:	cmn	r1, #1
   25d00:	movwgt	r3, #1
   25d04:	adds	r0, r0, r6
   25d08:	mov	r6, #0
   25d0c:	adc	r1, r1, ip
   25d10:	str	r0, [r4, #24]
   25d14:	cmn	r1, #1
   25d18:	movwgt	r6, #1
   25d1c:	subs	r6, r3, r6
   25d20:	movwne	r6, #1
   25d24:	cmn	ip, #1
   25d28:	movwgt	r2, #1
   25d2c:	sub	r2, r3, r2
   25d30:	clz	r2, r2
   25d34:	lsr	r2, r2, #5
   25d38:	tst	r2, r6
   25d3c:	bne	267f8 <__assert_fail@plt+0x13c3c>
   25d40:	asr	r2, r0, #31
   25d44:	add	ip, sp, #136	; 0x88
   25d48:	movw	lr, #9184	; 0x23e0
   25d4c:	eor	r0, r0, r0
   25d50:	eor	r1, r1, r2
   25d54:	ldm	ip, {r3, r6, ip}
   25d58:	ldr	r2, [sp, #148]	; 0x94
   25d5c:	movt	lr, #4
   25d60:	orrs	r0, r0, r1
   25d64:	beq	26620 <__assert_fail@plt+0x13a64>
   25d68:	b	267f8 <__assert_fail@plt+0x13c3c>
   25d6c:	ldr	r0, [r9]
   25d70:	b	25d78 <__assert_fail@plt+0x131bc>
   25d74:	ldr	r0, [r9, #-56]	; 0xffffffc8
   25d78:	add	r0, r0, #3600	; 0xe10
   25d7c:	str	r0, [r4, #24]
   25d80:	b	26620 <__assert_fail@plt+0x13a64>
   25d84:	ldr	r1, [sp, #92]	; 0x5c
   25d88:	mov	r0, #0
   25d8c:	str	r0, [r1]
   25d90:	str	r0, [r1, #4]
   25d94:	ldr	r0, [r9]
   25d98:	b	25ddc <__assert_fail@plt+0x13220>
   25d9c:	ldr	r1, [sp, #92]	; 0x5c
   25da0:	mov	r0, #0
   25da4:	str	r0, [r1]
   25da8:	str	r0, [r1, #4]
   25dac:	ldr	r0, [r9, #-56]	; 0xffffffc8
   25db0:	b	25ddc <__assert_fail@plt+0x13220>
   25db4:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   25db8:	b	25dc0 <__assert_fail@plt+0x13204>
   25dbc:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   25dc0:	mov	r7, r2
   25dc4:	ldr	r2, [sp, #92]	; 0x5c
   25dc8:	strd	r0, [r2]
   25dcc:	mov	r1, #1
   25dd0:	mov	r2, r7
   25dd4:	ldr	r0, [r9]
   25dd8:	strb	r1, [r4, #187]	; 0xbb
   25ddc:	str	r0, [r4, #16]
   25de0:	b	26620 <__assert_fail@plt+0x13a64>
   25de4:	ldrd	r0, [r9, #-104]	; 0xffffff98
   25de8:	b	25ee4 <__assert_fail@plt+0x13328>
   25dec:	ldr	r0, [r9, #-208]	; 0xffffff30
   25df0:	mov	r7, r2
   25df4:	cmp	r0, #4
   25df8:	blt	2646c <__assert_fail@plt+0x138b0>
   25dfc:	sub	r0, r9, #224	; 0xe0
   25e00:	vldr	d18, [r9, #-208]	; 0xffffff30
   25e04:	vld1.64	{d16-d17}, [r0]
   25e08:	ldr	r0, [sp, #88]	; 0x58
   25e0c:	vst1.64	{d16-d17}, [r0]!
   25e10:	vstr	d18, [r0]
   25e14:	ldrd	r0, [r9, #-104]	; 0xffffff98
   25e18:	b	25ee8 <__assert_fail@plt+0x1332c>
   25e1c:	mov	r8, r2
   25e20:	ldrd	r0, [r9, #-104]	; 0xffffff98
   25e24:	ldr	r2, [sp, #128]	; 0x80
   25e28:	mov	r7, r3
   25e2c:	strd	r0, [r2]
   25e30:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   25e34:	ldr	r2, [sp, #132]	; 0x84
   25e38:	strd	r0, [r2]
   25e3c:	ldrd	r0, [r9, #8]
   25e40:	ldr	r2, [sp, #80]	; 0x50
   25e44:	rsbs	r0, r0, #0
   25e48:	rsc	r3, r1, #0
   25e4c:	stm	r2, {r0, r3}
   25e50:	and	r0, r1, r3
   25e54:	cmp	r0, #0
   25e58:	blt	267f4 <__assert_fail@plt+0x13c38>
   25e5c:	ldr	r0, [r9, #16]
   25e60:	mov	r3, r7
   25e64:	mov	r2, r8
   25e68:	b	25ed8 <__assert_fail@plt+0x1331c>
   25e6c:	mov	lr, r2
   25e70:	ldrd	r0, [r9, #-112]	; 0xffffff90
   25e74:	ldr	r2, [sp, #132]	; 0x84
   25e78:	mov	r8, r3
   25e7c:	mov	r7, #1
   25e80:	strd	r0, [r2]
   25e84:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   25e88:	ldr	r2, [sp, #128]	; 0x80
   25e8c:	rsbs	r0, r0, #0
   25e90:	rsc	r3, r1, #0
   25e94:	stm	r2, {r0, r3}
   25e98:	and	r0, r1, r3
   25e9c:	cmp	r0, #0
   25ea0:	blt	267f8 <__assert_fail@plt+0x13c3c>
   25ea4:	ldrd	r0, [r9, #8]
   25ea8:	ldr	r2, [sp, #80]	; 0x50
   25eac:	rsbs	r0, r0, #0
   25eb0:	rsc	r3, r1, #0
   25eb4:	stm	r2, {r0, r3}
   25eb8:	and	r0, r1, r3
   25ebc:	mov	r2, lr
   25ec0:	movw	lr, #9184	; 0x23e0
   25ec4:	cmp	r0, #0
   25ec8:	movt	lr, #4
   25ecc:	blt	267f8 <__assert_fail@plt+0x13c3c>
   25ed0:	ldr	r0, [r9, #16]
   25ed4:	mov	r3, r8
   25ed8:	str	r0, [r4, #48]	; 0x30
   25edc:	b	26620 <__assert_fail@plt+0x13a64>
   25ee0:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   25ee4:	mov	r7, r2
   25ee8:	ldr	r2, [sp, #132]	; 0x84
   25eec:	strd	r0, [r2]
   25ef0:	ldrd	r0, [r9, #8]
   25ef4:	ldr	r2, [sp, #128]	; 0x80
   25ef8:	b	25f20 <__assert_fail@plt+0x13364>
   25efc:	mov	r7, r2
   25f00:	ldrd	r0, [r9, #-168]	; 0xffffff58
   25f04:	b	26470 <__assert_fail@plt+0x138b4>
   25f08:	mov	r7, r2
   25f0c:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   25f10:	ldr	r2, [sp, #128]	; 0x80
   25f14:	strd	r0, [r2]
   25f18:	ldrd	r0, [r9]
   25f1c:	ldr	r2, [sp, #132]	; 0x84
   25f20:	strd	r0, [r2]
   25f24:	mov	r2, r7
   25f28:	b	26620 <__assert_fail@plt+0x13a64>
   25f2c:	mov	r7, r2
   25f30:	ldrd	r0, [r9, #-104]	; 0xffffff98
   25f34:	ldr	r2, [sp, #128]	; 0x80
   25f38:	strd	r0, [r2]
   25f3c:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   25f40:	ldr	r2, [sp, #132]	; 0x84
   25f44:	b	26480 <__assert_fail@plt+0x138c4>
   25f48:	sub	r0, r9, #112	; 0x70
   25f4c:	vldr	d18, [r9, #-96]	; 0xffffffa0
   25f50:	str	r2, [sp, #148]	; 0x94
   25f54:	ldr	r2, [sp, #132]	; 0x84
   25f58:	mov	r8, r3
   25f5c:	mov	r7, #1
   25f60:	vld1.64	{d16-d17}, [r0]
   25f64:	ldr	r0, [sp, #88]	; 0x58
   25f68:	vst1.64	{d16-d17}, [r0]!
   25f6c:	vstr	d18, [r0]
   25f70:	ldrd	r0, [r9, #-48]	; 0xffffffd0
   25f74:	rsbs	r0, r0, #0
   25f78:	rsc	r3, r1, #0
   25f7c:	stm	r2, {r0, r3}
   25f80:	and	r0, r1, r3
   25f84:	cmp	r0, #0
   25f88:	blt	267f8 <__assert_fail@plt+0x13c3c>
   25f8c:	ldrd	r0, [r9, #8]
   25f90:	ldr	r2, [sp, #128]	; 0x80
   25f94:	rsbs	r0, r0, #0
   25f98:	rsc	r3, r1, #0
   25f9c:	stm	r2, {r0, r3}
   25fa0:	and	r0, r1, r3
   25fa4:	mov	r3, r8
   25fa8:	ldr	r2, [sp, #148]	; 0x94
   25fac:	cmp	r0, #0
   25fb0:	bge	26620 <__assert_fail@plt+0x13a64>
   25fb4:	b	267f8 <__assert_fail@plt+0x13c3c>
   25fb8:	ldr	r0, [r9, #-56]	; 0xffffffc8
   25fbc:	str	r2, [sp, #148]	; 0x94
   25fc0:	ldr	r2, [r9, #-8]
   25fc4:	str	r3, [sp, #136]	; 0x88
   25fc8:	ldr	r3, [r9, #-4]
   25fcc:	str	r6, [sp, #140]	; 0x8c
   25fd0:	ldr	r6, [r9, #-36]	; 0xffffffdc
   25fd4:	ldr	lr, [r9, #-28]	; 0xffffffe4
   25fd8:	ldr	r8, [r9, #-24]	; 0xffffffe8
   25fdc:	ldr	r1, [r9, #-12]
   25fe0:	mov	r7, ip
   25fe4:	ldr	ip, [r9]
   25fe8:	str	r0, [sp, #144]	; 0x90
   25fec:	ldr	r0, [r9, #-52]	; 0xffffffcc
   25ff0:	str	r2, [sp, #40]	; 0x28
   25ff4:	str	r3, [sp, #44]	; 0x2c
   25ff8:	str	r6, [sp, #12]
   25ffc:	ldr	r6, [sp, #140]	; 0x8c
   26000:	str	r1, [sp, #36]	; 0x24
   26004:	str	ip, [sp, #48]	; 0x30
   26008:	str	lr, [sp, #20]
   2600c:	str	r8, [sp, #24]
   26010:	ldr	r2, [sp, #144]	; 0x90
   26014:	str	r0, [sp, #72]	; 0x48
   26018:	ldr	r0, [r9, #-48]	; 0xffffffd0
   2601c:	ldr	r3, [sp, #72]	; 0x48
   26020:	str	r0, [sp, #68]	; 0x44
   26024:	ldr	r0, [r9, #-44]	; 0xffffffd4
   26028:	str	r0, [sp, #64]	; 0x40
   2602c:	ldr	r0, [r9, #-40]	; 0xffffffd8
   26030:	str	r0, [sp, #60]	; 0x3c
   26034:	ldr	r0, [r9, #-32]	; 0xffffffe0
   26038:	str	r0, [sp, #56]	; 0x38
   2603c:	ldr	r0, [r9, #-20]	; 0xffffffec
   26040:	str	r0, [sp, #52]	; 0x34
   26044:	ldr	r0, [r9, #-16]
   26048:	str	r0, [sp, #32]
   2604c:	ldr	r0, [sp, #68]	; 0x44
   26050:	str	r0, [sp]
   26054:	ldr	r0, [sp, #64]	; 0x40
   26058:	str	r0, [sp, #4]
   2605c:	ldr	r0, [sp, #60]	; 0x3c
   26060:	str	r0, [sp, #8]
   26064:	ldr	r0, [sp, #56]	; 0x38
   26068:	str	r0, [sp, #16]
   2606c:	ldr	r0, [sp, #52]	; 0x34
   26070:	str	r0, [sp, #28]
   26074:	mov	r0, r4
   26078:	bl	269e0 <__assert_fail@plt+0x13e24>
   2607c:	ldr	r2, [sp, #148]	; 0x94
   26080:	ldr	r3, [sp, #136]	; 0x88
   26084:	mov	ip, r7
   26088:	movw	lr, #9184	; 0x23e0
   2608c:	cmp	r0, #0
   26090:	movt	lr, #4
   26094:	bne	26620 <__assert_fail@plt+0x13a64>
   26098:	b	267f4 <__assert_fail@plt+0x13c38>
   2609c:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   260a0:	str	r0, [sp, #204]	; 0xcc
   260a4:	mov	r0, #0
   260a8:	str	r1, [sp, #200]	; 0xc8
   260ac:	mov	r2, #0
   260b0:	str	r0, [sp, #192]	; 0xc0
   260b4:	mov	r0, #0
   260b8:	str	r0, [sp, #196]	; 0xc4
   260bc:	mov	r0, #0
   260c0:	str	r0, [sp, #188]	; 0xbc
   260c4:	mov	r0, #0
   260c8:	str	r0, [sp, #184]	; 0xb8
   260cc:	mov	r0, #0
   260d0:	str	r0, [sp, #180]	; 0xb4
   260d4:	mov	r0, #0
   260d8:	str	r0, [sp, #176]	; 0xb0
   260dc:	mov	r0, #0
   260e0:	str	r0, [sp, #168]	; 0xa8
   260e4:	mov	r0, #0
   260e8:	str	r0, [sp, #172]	; 0xac
   260ec:	mov	r0, #0
   260f0:	str	r0, [sp, #164]	; 0xa4
   260f4:	mov	r0, #0
   260f8:	str	r0, [sp, #160]	; 0xa0
   260fc:	b	26620 <__assert_fail@plt+0x13a64>
   26100:	mov	r0, #1
   26104:	mov	r2, #0
   26108:	str	r0, [sp, #204]	; 0xcc
   2610c:	mov	r0, #0
   26110:	str	r0, [sp, #192]	; 0xc0
   26114:	mov	r0, #0
   26118:	str	r0, [sp, #196]	; 0xc4
   2611c:	mov	r0, #0
   26120:	str	r0, [sp, #188]	; 0xbc
   26124:	mov	r0, #0
   26128:	str	r0, [sp, #184]	; 0xb8
   2612c:	mov	r0, #0
   26130:	str	r0, [sp, #180]	; 0xb4
   26134:	mov	r0, #0
   26138:	str	r0, [sp, #176]	; 0xb0
   2613c:	mov	r0, #0
   26140:	str	r0, [sp, #168]	; 0xa8
   26144:	mov	r0, #0
   26148:	str	r0, [sp, #172]	; 0xac
   2614c:	mov	r0, #0
   26150:	str	r0, [sp, #164]	; 0xa4
   26154:	mov	r0, #0
   26158:	str	r0, [sp, #160]	; 0xa0
   2615c:	b	26618 <__assert_fail@plt+0x13a5c>
   26160:	ldr	r2, [r9, #-56]	; 0xffffffc8
   26164:	ldr	r0, [r9, #-52]	; 0xffffffcc
   26168:	b	26174 <__assert_fail@plt+0x135b8>
   2616c:	mov	r0, #0
   26170:	mov	r2, #1
   26174:	str	r0, [sp, #192]	; 0xc0
   26178:	mov	r0, #0
   2617c:	str	r0, [sp, #196]	; 0xc4
   26180:	mov	r0, #0
   26184:	str	r0, [sp, #188]	; 0xbc
   26188:	b	265d8 <__assert_fail@plt+0x13a1c>
   2618c:	ldm	r9, {r2, r8}
   26190:	str	r6, [sp, #140]	; 0x8c
   26194:	cmn	r8, #1
   26198:	ble	26510 <__assert_fail@plt+0x13954>
   2619c:	orrs	r0, r2, r8
   261a0:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   261a4:	bne	25788 <__assert_fail@plt+0x12bcc>
   261a8:	mov	r6, r0
   261ac:	mov	r7, r1
   261b0:	b	265b4 <__assert_fail@plt+0x139f8>
   261b4:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   261b8:	str	r0, [sp, #184]	; 0xb8
   261bc:	mov	r0, #0
   261c0:	str	r1, [sp, #180]	; 0xb4
   261c4:	mov	r2, #0
   261c8:	str	r0, [sp, #192]	; 0xc0
   261cc:	mov	r0, #0
   261d0:	str	r0, [sp, #196]	; 0xc4
   261d4:	mov	r0, #0
   261d8:	str	r0, [sp, #188]	; 0xbc
   261dc:	b	265e8 <__assert_fail@plt+0x13a2c>
   261e0:	mov	r0, #1
   261e4:	mov	r2, #0
   261e8:	str	r0, [sp, #184]	; 0xb8
   261ec:	mov	r0, #0
   261f0:	str	r0, [sp, #192]	; 0xc0
   261f4:	mov	r0, #0
   261f8:	str	r0, [sp, #196]	; 0xc4
   261fc:	mov	r0, #0
   26200:	str	r0, [sp, #188]	; 0xbc
   26204:	b	265e0 <__assert_fail@plt+0x13a24>
   26208:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   2620c:	str	r0, [sp, #176]	; 0xb0
   26210:	mov	r0, #0
   26214:	str	r1, [sp, #168]	; 0xa8
   26218:	mov	r2, #0
   2621c:	str	r0, [sp, #192]	; 0xc0
   26220:	mov	r0, #0
   26224:	str	r0, [sp, #196]	; 0xc4
   26228:	mov	r0, #0
   2622c:	str	r0, [sp, #188]	; 0xbc
   26230:	mov	r0, #0
   26234:	str	r0, [sp, #184]	; 0xb8
   26238:	mov	r0, #0
   2623c:	str	r0, [sp, #180]	; 0xb4
   26240:	b	265f8 <__assert_fail@plt+0x13a3c>
   26244:	mov	r0, #1
   26248:	mov	r2, #0
   2624c:	str	r0, [sp, #176]	; 0xb0
   26250:	mov	r0, #0
   26254:	str	r0, [sp, #192]	; 0xc0
   26258:	mov	r0, #0
   2625c:	str	r0, [sp, #196]	; 0xc4
   26260:	mov	r0, #0
   26264:	str	r0, [sp, #188]	; 0xbc
   26268:	mov	r0, #0
   2626c:	str	r0, [sp, #184]	; 0xb8
   26270:	mov	r0, #0
   26274:	str	r0, [sp, #180]	; 0xb4
   26278:	b	265f0 <__assert_fail@plt+0x13a34>
   2627c:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   26280:	str	r0, [sp, #172]	; 0xac
   26284:	mov	r0, #0
   26288:	str	r1, [sp, #164]	; 0xa4
   2628c:	mov	r2, #0
   26290:	str	r0, [sp, #192]	; 0xc0
   26294:	mov	r0, #0
   26298:	str	r0, [sp, #196]	; 0xc4
   2629c:	mov	r0, #0
   262a0:	str	r0, [sp, #188]	; 0xbc
   262a4:	mov	r0, #0
   262a8:	str	r0, [sp, #184]	; 0xb8
   262ac:	mov	r0, #0
   262b0:	str	r0, [sp, #180]	; 0xb4
   262b4:	mov	r0, #0
   262b8:	str	r0, [sp, #176]	; 0xb0
   262bc:	mov	r0, #0
   262c0:	str	r0, [sp, #168]	; 0xa8
   262c4:	b	26608 <__assert_fail@plt+0x13a4c>
   262c8:	mov	r0, #1
   262cc:	mov	r2, #0
   262d0:	str	r0, [sp, #172]	; 0xac
   262d4:	mov	r0, #0
   262d8:	str	r0, [sp, #192]	; 0xc0
   262dc:	mov	r0, #0
   262e0:	str	r0, [sp, #196]	; 0xc4
   262e4:	mov	r0, #0
   262e8:	str	r0, [sp, #188]	; 0xbc
   262ec:	mov	r0, #0
   262f0:	str	r0, [sp, #184]	; 0xb8
   262f4:	mov	r0, #0
   262f8:	str	r0, [sp, #180]	; 0xb4
   262fc:	mov	r0, #0
   26300:	str	r0, [sp, #176]	; 0xb0
   26304:	mov	r0, #0
   26308:	str	r0, [sp, #168]	; 0xa8
   2630c:	b	26600 <__assert_fail@plt+0x13a44>
   26310:	str	r2, [sp, #148]	; 0x94
   26314:	str	r3, [sp, #136]	; 0x88
   26318:	add	r7, r9, #8
   2631c:	ldr	r2, [r9]
   26320:	ldr	r3, [r9, #4]
   26324:	mov	r8, r6
   26328:	ldm	r7, {r0, r1, r7}
   2632c:	ldr	r6, [r9, #20]
   26330:	stm	sp, {r0, r1, r7}
   26334:	mov	r0, r4
   26338:	str	r6, [sp, #12]
   2633c:	mov	r6, ip
   26340:	bl	26f70 <__assert_fail@plt+0x143b4>
   26344:	ldr	r2, [sp, #148]	; 0x94
   26348:	ldr	r3, [sp, #136]	; 0x88
   2634c:	b	25970 <__assert_fail@plt+0x12db4>
   26350:	str	r2, [sp, #148]	; 0x94
   26354:	str	r3, [sp, #136]	; 0x88
   26358:	sub	r7, r9, #48	; 0x30
   2635c:	ldr	r2, [r9, #-56]	; 0xffffffc8
   26360:	ldr	r3, [r9, #-52]	; 0xffffffcc
   26364:	ldm	r7, {r0, r1, r7}
   26368:	str	r6, [sp, #140]	; 0x8c
   2636c:	ldr	r6, [r9, #-36]	; 0xffffffdc
   26370:	stm	sp, {r0, r1, r7}
   26374:	mov	r0, r4
   26378:	str	r6, [sp, #12]
   2637c:	str	ip, [sp, #144]	; 0x90
   26380:	bl	26f70 <__assert_fail@plt+0x143b4>
   26384:	ldr	r0, [r9]
   26388:	add	lr, r9, #16
   2638c:	add	r2, r9, #40	; 0x28
   26390:	str	r0, [sp, #72]	; 0x48
   26394:	ldr	r0, [r9, #4]
   26398:	str	r0, [sp, #68]	; 0x44
   2639c:	ldr	r0, [r9, #8]
   263a0:	str	r0, [sp, #64]	; 0x40
   263a4:	ldr	r0, [r9, #12]
   263a8:	str	r0, [sp, #60]	; 0x3c
   263ac:	ldm	lr, {r6, ip, lr}
   263b0:	ldr	r0, [r9, #32]
   263b4:	ldr	r8, [r9, #28]
   263b8:	str	r0, [sp, #56]	; 0x38
   263bc:	ldr	r0, [r9, #36]	; 0x24
   263c0:	str	r0, [sp, #52]	; 0x34
   263c4:	ldm	r2, {r0, r1, r2}
   263c8:	str	r0, [sp, #32]
   263cc:	ldr	r0, [sp, #64]	; 0x40
   263d0:	ldr	r3, [r9, #52]	; 0x34
   263d4:	mov	r7, #1
   263d8:	str	r1, [sp, #36]	; 0x24
   263dc:	str	r2, [sp, #40]	; 0x28
   263e0:	str	r7, [sp, #48]	; 0x30
   263e4:	str	r0, [sp]
   263e8:	ldr	r0, [sp, #60]	; 0x3c
   263ec:	str	r3, [sp, #44]	; 0x2c
   263f0:	stmib	sp, {r0, r6}
   263f4:	str	ip, [sp, #12]
   263f8:	str	lr, [sp, #16]
   263fc:	str	r8, [sp, #20]
   26400:	ldr	r0, [sp, #56]	; 0x38
   26404:	ldr	r2, [sp, #72]	; 0x48
   26408:	ldr	r3, [sp, #68]	; 0x44
   2640c:	ldr	r6, [sp, #140]	; 0x8c
   26410:	str	r0, [sp, #24]
   26414:	ldr	r0, [sp, #52]	; 0x34
   26418:	str	r0, [sp, #28]
   2641c:	mov	r0, r4
   26420:	bl	269e0 <__assert_fail@plt+0x13e24>
   26424:	ldr	r2, [sp, #148]	; 0x94
   26428:	ldr	r3, [sp, #136]	; 0x88
   2642c:	ldr	ip, [sp, #144]	; 0x90
   26430:	movw	lr, #9184	; 0x23e0
   26434:	cmp	r0, #0
   26438:	movt	lr, #4
   2643c:	bne	26620 <__assert_fail@plt+0x13a64>
   26440:	b	267f8 <__assert_fail@plt+0x13c3c>
   26444:	mvn	r0, #0
   26448:	str	r0, [sp, #204]	; 0xcc
   2644c:	mvn	r0, #0
   26450:	b	2661c <__assert_fail@plt+0x13a60>
   26454:	ldrd	r0, [r9, #8]
   26458:	str	r1, [sp, #200]	; 0xc8
   2645c:	str	r0, [sp, #204]	; 0xcc
   26460:	b	26620 <__assert_fail@plt+0x13a64>
   26464:	ldrd	r6, [r9, #-48]	; 0xffffffd0
   26468:	b	26514 <__assert_fail@plt+0x13958>
   2646c:	ldrd	r0, [r9, #-216]	; 0xffffff28
   26470:	ldr	r2, [sp, #132]	; 0x84
   26474:	strd	r0, [r2]
   26478:	ldrd	r0, [r9, #-104]	; 0xffffff98
   2647c:	ldr	r2, [sp, #128]	; 0x80
   26480:	strd	r0, [r2]
   26484:	mov	r0, r9
   26488:	mov	r2, r7
   2648c:	vld1.64	{d16-d17}, [r0]!
   26490:	vldr	d18, [r0]
   26494:	ldr	r0, [sp, #88]	; 0x58
   26498:	vst1.64	{d16-d17}, [r0]!
   2649c:	vstr	d18, [r0]
   264a0:	b	26620 <__assert_fail@plt+0x13a64>
   264a4:	str	r0, [sp, #200]	; 0xc8
   264a8:	and	r0, r0, r1
   264ac:	mvn	r6, #0
   264b0:	mvn	r7, #0
   264b4:	cmn	r0, #1
   264b8:	beq	265b4 <__assert_fail@plt+0x139f8>
   264bc:	ldr	r6, [sp, #200]	; 0xc8
   264c0:	mov	r7, r1
   264c4:	str	r8, [sp, #204]	; 0xcc
   264c8:	mov	r8, r2
   264cc:	str	r3, [sp, #136]	; 0x88
   264d0:	mov	r0, #0
   264d4:	mov	r1, #-2147483648	; 0x80000000
   264d8:	str	ip, [sp, #144]	; 0x90
   264dc:	mov	r3, r7
   264e0:	mov	r2, r6
   264e4:	bl	3d400 <__assert_fail@plt+0x2a844>
   264e8:	mov	r2, r8
   264ec:	ldr	r8, [sp, #204]	; 0xcc
   264f0:	ldr	r3, [sp, #136]	; 0x88
   264f4:	ldr	ip, [sp, #144]	; 0x90
   264f8:	movw	lr, #9184	; 0x23e0
   264fc:	subs	r0, r0, r2
   26500:	movt	lr, #4
   26504:	sbcs	r0, r1, r8
   26508:	bge	265b4 <__assert_fail@plt+0x139f8>
   2650c:	b	267f4 <__assert_fail@plt+0x13c38>
   26510:	ldrd	r6, [r9, #-56]	; 0xffffffc8
   26514:	cmn	r7, #1
   26518:	ble	26570 <__assert_fail@plt+0x139b4>
   2651c:	and	r0, r2, r8
   26520:	cmn	r0, #1
   26524:	beq	265b4 <__assert_fail@plt+0x139f8>
   26528:	str	r8, [sp, #204]	; 0xcc
   2652c:	str	r3, [sp, #136]	; 0x88
   26530:	mov	r0, #0
   26534:	mov	r1, #-2147483648	; 0x80000000
   26538:	mov	r8, r2
   2653c:	str	ip, [sp, #144]	; 0x90
   26540:	ldr	r3, [sp, #204]	; 0xcc
   26544:	bl	3d400 <__assert_fail@plt+0x2a844>
   26548:	mov	r2, r8
   2654c:	ldr	r8, [sp, #204]	; 0xcc
   26550:	ldr	r3, [sp, #136]	; 0x88
   26554:	ldr	ip, [sp, #144]	; 0x90
   26558:	movw	lr, #9184	; 0x23e0
   2655c:	subs	r0, r0, r6
   26560:	movt	lr, #4
   26564:	sbcs	r0, r1, r7
   26568:	bge	265b4 <__assert_fail@plt+0x139f8>
   2656c:	b	267f4 <__assert_fail@plt+0x13c38>
   26570:	str	r8, [sp, #204]	; 0xcc
   26574:	str	r3, [sp, #136]	; 0x88
   26578:	mvn	r0, #0
   2657c:	mvn	r1, #-2147483648	; 0x80000000
   26580:	mov	r8, r2
   26584:	str	ip, [sp, #144]	; 0x90
   26588:	ldr	r3, [sp, #204]	; 0xcc
   2658c:	bl	3d400 <__assert_fail@plt+0x2a844>
   26590:	mov	r2, r8
   26594:	ldr	r8, [sp, #204]	; 0xcc
   26598:	ldr	r3, [sp, #136]	; 0x88
   2659c:	ldr	ip, [sp, #144]	; 0x90
   265a0:	subs	r0, r6, r0
   265a4:	movw	lr, #9184	; 0x23e0
   265a8:	movt	lr, #4
   265ac:	sbcs	r0, r7, r1
   265b0:	blt	267f4 <__assert_fail@plt+0x13c38>
   265b4:	umull	r1, r0, r6, r2
   265b8:	mla	r0, r6, r8, r0
   265bc:	ldr	r6, [sp, #140]	; 0x8c
   265c0:	str	r1, [sp, #196]	; 0xc4
   265c4:	mla	r0, r7, r2, r0
   265c8:	mov	r2, #0
   265cc:	str	r0, [sp, #188]	; 0xbc
   265d0:	mov	r0, #0
   265d4:	str	r0, [sp, #192]	; 0xc0
   265d8:	mov	r0, #0
   265dc:	str	r0, [sp, #184]	; 0xb8
   265e0:	mov	r0, #0
   265e4:	str	r0, [sp, #180]	; 0xb4
   265e8:	mov	r0, #0
   265ec:	str	r0, [sp, #176]	; 0xb0
   265f0:	mov	r0, #0
   265f4:	str	r0, [sp, #168]	; 0xa8
   265f8:	mov	r0, #0
   265fc:	str	r0, [sp, #172]	; 0xac
   26600:	mov	r0, #0
   26604:	str	r0, [sp, #164]	; 0xa4
   26608:	mov	r0, #0
   2660c:	str	r0, [sp, #160]	; 0xa0
   26610:	mov	r0, #0
   26614:	str	r0, [sp, #204]	; 0xcc
   26618:	mov	r0, #0
   2661c:	str	r0, [sp, #200]	; 0xc8
   26620:	sub	r0, sl, sl, lsl #3
   26624:	add	r9, r9, r0, lsl #3
   26628:	ldr	r0, [sp, #204]	; 0xcc
   2662c:	str	r0, [r9, #56]!	; 0x38
   26630:	ldr	r0, [sp, #200]	; 0xc8
   26634:	stmib	r9, {r0, r2}
   26638:	ldr	r0, [sp, #192]	; 0xc0
   2663c:	str	r0, [r9, #12]
   26640:	ldr	r0, [sp, #196]	; 0xc4
   26644:	str	r0, [r9, #16]
   26648:	ldr	r0, [sp, #188]	; 0xbc
   2664c:	str	r0, [r9, #20]
   26650:	ldr	r0, [sp, #184]	; 0xb8
   26654:	str	r0, [r9, #24]
   26658:	ldr	r0, [sp, #180]	; 0xb4
   2665c:	str	r0, [r9, #28]
   26660:	ldr	r0, [sp, #176]	; 0xb0
   26664:	str	r0, [r9, #32]
   26668:	ldr	r0, [sp, #168]	; 0xa8
   2666c:	str	r0, [r9, #36]	; 0x24
   26670:	ldr	r0, [sp, #172]	; 0xac
   26674:	str	r0, [r9, #40]	; 0x28
   26678:	ldr	r0, [sp, #164]	; 0xa4
   2667c:	str	r0, [r9, #44]	; 0x2c
   26680:	ldr	r0, [sp, #160]	; 0xa0
   26684:	str	r0, [r9, #48]	; 0x30
   26688:	sub	r0, ip, sl
   2668c:	sub	sl, fp, #92	; 0x5c
   26690:	str	r3, [r9, #52]	; 0x34
   26694:	movw	r3, #10100	; 0x2774
   26698:	add	r1, sl, r0, lsl #1
   2669c:	movt	r3, #4
   266a0:	ldrsh	r2, [r1]
   266a4:	movw	r1, #10008	; 0x2718
   266a8:	movt	r1, #4
   266ac:	ldrb	r1, [r1, r5]
   266b0:	sub	r1, r1, #28
   266b4:	add	r3, r3, r1
   266b8:	ldrsb	r3, [r3]
   266bc:	add	r3, r2, r3
   266c0:	cmp	r3, #112	; 0x70
   266c4:	bhi	266f0 <__assert_fail@plt+0x13b34>
   266c8:	movw	r5, #9576	; 0x2568
   266cc:	movt	r5, #4
   266d0:	add	r7, r5, r3
   266d4:	ldrsb	r7, [r7]
   266d8:	cmp	r7, r2
   266dc:	bne	266f0 <__assert_fail@plt+0x13b34>
   266e0:	movw	r1, #9689	; 0x25d9
   266e4:	movt	r1, #4
   266e8:	ldrb	r8, [r1, r3]
   266ec:	b	26700 <__assert_fail@plt+0x13b44>
   266f0:	movw	r2, #10126	; 0x278e
   266f4:	movt	r2, #4
   266f8:	add	r1, r2, r1
   266fc:	ldrsb	r8, [r1]
   26700:	ldr	r5, [sp, #156]	; 0x9c
   26704:	add	ip, r0, #1
   26708:	cmp	r0, #17
   2670c:	add	r1, sl, ip, lsl #1
   26710:	strh	r8, [r1]
   26714:	ble	24d14 <__assert_fail@plt+0x12158>
   26718:	b	267ec <__assert_fail@plt+0x13c30>
   2671c:	ldrb	r7, [r6]
   26720:	mov	r5, ip
   26724:	sub	r0, r7, #48	; 0x30
   26728:	cmp	r0, #9
   2672c:	bhi	26754 <__assert_fail@plt+0x13b98>
   26730:	ldr	ip, [sp, #144]	; 0x90
   26734:	uxtb	r0, r7
   26738:	cmp	r0, #48	; 0x30
   2673c:	bne	267b8 <__assert_fail@plt+0x13bfc>
   26740:	ldrb	r7, [r6, #1]!
   26744:	sub	r0, r7, #48	; 0x30
   26748:	cmp	r0, #10
   2674c:	bcc	26734 <__assert_fail@plt+0x13b78>
   26750:	b	26758 <__assert_fail@plt+0x13b9c>
   26754:	ldr	ip, [sp, #144]	; 0x90
   26758:	sub	r0, r6, #1
   2675c:	ldrb	r7, [r0, #1]!
   26760:	sub	r7, r7, #48	; 0x30
   26764:	cmp	r7, #10
   26768:	bcc	2675c <__assert_fail@plt+0x13ba0>
   2676c:	cmn	r1, #1
   26770:	bgt	26790 <__assert_fail@plt+0x13bd4>
   26774:	cmp	r3, #0
   26778:	beq	26790 <__assert_fail@plt+0x13bd4>
   2677c:	subs	r2, r2, #1
   26780:	bvs	25150 <__assert_fail@plt+0x12594>
   26784:	movw	r5, #51712	; 0xca00
   26788:	movt	r5, #15258	; 0x3b9a
   2678c:	sub	r3, r5, r3
   26790:	mov	r5, r2
   26794:	str	r3, [sp, #124]	; 0x7c
   26798:	cmp	r1, #0
   2679c:	ldr	r1, [sp, #204]	; 0xcc
   267a0:	mov	r6, #276	; 0x114
   267a4:	str	r0, [r4]
   267a8:	lsr	r0, r5, #8
   267ac:	movweq	r6, #277	; 0x115
   267b0:	str	r0, [sp, #120]	; 0x78
   267b4:	b	2543c <__assert_fail@plt+0x12880>
   267b8:	add	r3, r3, #1
   267bc:	b	26758 <__assert_fail@plt+0x13b9c>
   267c0:	add	r1, r0, #1
   267c4:	str	r1, [r4]
   267c8:	ldrb	r6, [r0]
   267cc:	b	25418 <__assert_fail@plt+0x1285c>
   267d0:	movw	lr, #9184	; 0x23e0
   267d4:	mov	sl, r5
   267d8:	b	253ec <__assert_fail@plt+0x12830>
   267dc:	mov	r6, #63	; 0x3f
   267e0:	b	25418 <__assert_fail@plt+0x1285c>
   267e4:	mov	r7, #0
   267e8:	b	267f8 <__assert_fail@plt+0x13c3c>
   267ec:	mov	r7, #2
   267f0:	b	267f8 <__assert_fail@plt+0x13c3c>
   267f4:	mov	r7, #1
   267f8:	mov	r0, r7
   267fc:	sub	sp, fp, #28
   26800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26808:	add	fp, sp, #28
   2680c:	sub	sp, sp, #12
   26810:	mov	r4, r0
   26814:	ldr	r0, [fp, #16]
   26818:	ldr	sl, [fp, #28]
   2681c:	mov	r1, #0
   26820:	ldr	r6, [fp, #12]
   26824:	mov	r5, #100	; 0x64
   26828:	cmp	r0, #3
   2682c:	mov	r0, #0
   26830:	movwlt	r0, #1
   26834:	cmp	sl, #0
   26838:	movwlt	r1, #1
   2683c:	ands	r0, r1, r0
   26840:	ldr	r0, [fp, #8]
   26844:	umull	r7, r1, r0, r5
   26848:	mlane	r6, r6, r5, r1
   2684c:	moveq	r7, r0
   26850:	cmn	sl, #1
   26854:	ble	2688c <__assert_fail@plt+0x13cd0>
   26858:	ldr	r5, [fp, #24]
   2685c:	cmn	r6, #1
   26860:	stmib	sp, {r2, r4}
   26864:	ble	268d0 <__assert_fail@plt+0x13d14>
   26868:	movw	r1, #8738	; 0x2222
   2686c:	movw	r0, #8738	; 0x2222
   26870:	mov	lr, #1
   26874:	movt	r1, #8738	; 0x2222
   26878:	movt	r0, #546	; 0x222
   2687c:	subs	r1, r1, r7
   26880:	sbcs	r0, r0, r6
   26884:	bge	26904 <__assert_fail@plt+0x13d48>
   26888:	b	26908 <__assert_fail@plt+0x13d4c>
   2688c:	mov	r0, r7
   26890:	mov	r1, r6
   26894:	mov	r2, #100	; 0x64
   26898:	mov	r3, #0
   2689c:	bl	3d400 <__assert_fail@plt+0x2a844>
   268a0:	umull	r2, r3, r0, r5
   268a4:	subs	r2, r7, r2
   268a8:	mov	r7, #60	; 0x3c
   268ac:	mla	r3, r1, r5, r3
   268b0:	rsb	r1, r1, r1, lsl #4
   268b4:	umull	r0, r7, r0, r7
   268b8:	sbc	r3, r6, r3
   268bc:	add	r7, r7, r1, lsl #2
   268c0:	adds	r1, r0, r2
   268c4:	mov	r2, #1
   268c8:	adc	r7, r7, r3
   268cc:	b	269ac <__assert_fail@plt+0x13df0>
   268d0:	and	r0, r7, r6
   268d4:	cmn	r0, #1
   268d8:	beq	26904 <__assert_fail@plt+0x13d48>
   268dc:	mov	r0, #0
   268e0:	mov	r1, #-2147483648	; 0x80000000
   268e4:	mov	r2, r7
   268e8:	mov	r3, r6
   268ec:	bl	3d400 <__assert_fail@plt+0x2a844>
   268f0:	subs	r0, r0, #60	; 0x3c
   268f4:	mov	lr, #1
   268f8:	sbcs	r0, r1, #0
   268fc:	movge	lr, #0
   26900:	b	26908 <__assert_fail@plt+0x13d4c>
   26904:	mov	lr, #0
   26908:	mov	r0, #60	; 0x3c
   2690c:	rsb	r3, r6, r6, lsl #4
   26910:	mov	r2, #0
   26914:	mov	r6, #0
   26918:	umull	r1, r0, r7, r0
   2691c:	add	r7, r0, r3, lsl #2
   26920:	adds	r0, r1, r5
   26924:	mov	r5, #0
   26928:	ldr	r3, [fp, #24]
   2692c:	adc	ip, r7, sl
   26930:	str	r0, [sp]
   26934:	mov	r0, #0
   26938:	cmn	ip, #1
   2693c:	movwgt	r5, #1
   26940:	cmn	r7, #1
   26944:	movwgt	r2, #1
   26948:	subs	r5, r2, r5
   2694c:	movwne	r5, #1
   26950:	cmn	sl, #1
   26954:	movwgt	r0, #1
   26958:	subs	r1, r1, r3
   2695c:	sbc	r7, r7, sl
   26960:	sub	r8, r2, r0
   26964:	cmn	r7, #1
   26968:	clz	r9, r8
   2696c:	movwgt	r6, #1
   26970:	lsr	r4, r9, #5
   26974:	subs	r6, r2, r6
   26978:	movwne	r6, #1
   2697c:	cmp	r2, r0
   26980:	ldr	r2, [sp, #4]
   26984:	movwne	r8, #1
   26988:	and	r0, r8, r6
   2698c:	ands	r2, r2, #1
   26990:	andeq	r0, r4, r5
   26994:	ldr	r4, [sp, #8]
   26998:	moveq	r7, ip
   2699c:	orr	r0, lr, r0
   269a0:	eor	r2, r0, #1
   269a4:	ldr	r0, [sp]
   269a8:	moveq	r1, r0
   269ac:	adds	r3, r1, #1440	; 0x5a0
   269b0:	mov	r0, #0
   269b4:	adc	r7, r7, #0
   269b8:	cmp	r2, #0
   269bc:	beq	269d8 <__assert_fail@plt+0x13e1c>
   269c0:	rsbs	r2, r3, #2880	; 0xb40
   269c4:	rscs	r2, r7, #0
   269c8:	rsbcs	r0, r1, r1, lsl #4
   269cc:	lslcs	r0, r0, #2
   269d0:	strcs	r0, [r4, #24]
   269d4:	movcs	r0, #1
   269d8:	sub	sp, fp, #28
   269dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   269e4:	add	fp, sp, #28
   269e8:	sub	sp, sp, #64	; 0x40
   269ec:	ldr	r1, [fp, #56]	; 0x38
   269f0:	add	r9, fp, #8
   269f4:	ldr	r8, [r0, #144]	; 0x90
   269f8:	ldr	ip, [fp, #24]
   269fc:	ldr	r6, [fp, #48]	; 0x30
   26a00:	add	sl, r0, #96	; 0x60
   26a04:	ldm	r9, {r4, r5, r9}
   26a08:	cmn	r1, #1
   26a0c:	str	r8, [fp, #-32]	; 0xffffffe0
   26a10:	ble	26cdc <__assert_fail@plt+0x14120>
   26a14:	ldr	r6, [r0, #104]	; 0x68
   26a18:	ldr	lr, [r0, #108]	; 0x6c
   26a1c:	ldr	r7, [r0, #112]	; 0x70
   26a20:	str	r3, [sp, #32]
   26a24:	mov	r1, r5
   26a28:	mov	r5, ip
   26a2c:	ldr	ip, [r0, #116]	; 0x74
   26a30:	adds	r3, r6, r4
   26a34:	adc	r4, lr, r1
   26a38:	adds	r6, r7, r9
   26a3c:	ldr	r1, [fp, #20]
   26a40:	str	r6, [r0, #112]	; 0x70
   26a44:	str	r3, [r0, #104]	; 0x68
   26a48:	ldr	r3, [r0, #120]	; 0x78
   26a4c:	ldr	r7, [r0, #124]	; 0x7c
   26a50:	adc	r6, ip, r1
   26a54:	ldr	r1, [fp, #32]
   26a58:	adds	r3, r3, r5
   26a5c:	str	r3, [r0, #120]	; 0x78
   26a60:	ldr	r3, [fp, #28]
   26a64:	adc	r9, r7, r3
   26a68:	ldr	r3, [r0, #128]	; 0x80
   26a6c:	adds	r3, r3, r1
   26a70:	ldr	r1, [r0, #132]	; 0x84
   26a74:	str	r3, [r0, #128]	; 0x80
   26a78:	ldr	r3, [fp, #36]	; 0x24
   26a7c:	str	r1, [sp, #36]	; 0x24
   26a80:	adc	r5, r1, r3
   26a84:	ldr	r3, [r0, #136]	; 0x88
   26a88:	ldr	r1, [fp, #40]	; 0x28
   26a8c:	adds	r3, r3, r1
   26a90:	ldr	r1, [fp, #44]	; 0x2c
   26a94:	str	r3, [r0, #136]	; 0x88
   26a98:	ldr	r3, [r0, #140]	; 0x8c
   26a9c:	adc	r1, r3, r1
   26aa0:	str	r3, [sp, #40]	; 0x28
   26aa4:	ldr	r3, [fp, #48]	; 0x30
   26aa8:	str	r1, [sp, #44]	; 0x2c
   26aac:	add	r3, r8, r3
   26ab0:	str	r3, [r0, #144]	; 0x90
   26ab4:	str	r1, [r0, #140]	; 0x8c
   26ab8:	str	r5, [r0, #132]	; 0x84
   26abc:	str	r9, [r0, #124]	; 0x7c
   26ac0:	str	r6, [r0, #116]	; 0x74
   26ac4:	str	r3, [fp, #-36]	; 0xffffffdc
   26ac8:	str	r4, [r0, #108]	; 0x6c
   26acc:	ldr	r8, [sl]
   26ad0:	ldr	r1, [sl, #4]
   26ad4:	adds	r2, r8, r2
   26ad8:	ldr	r8, [sp, #32]
   26adc:	str	r1, [fp, #-44]	; 0xffffffd4
   26ae0:	adc	r3, r1, r8
   26ae4:	cmn	lr, #1
   26ae8:	ldr	r1, [fp, #12]
   26aec:	mov	lr, #0
   26af0:	str	r3, [fp, #-40]	; 0xffffffd8
   26af4:	strd	r2, [sl]
   26af8:	mov	r3, #0
   26afc:	mov	r2, #0
   26b00:	mov	sl, #0
   26b04:	movwgt	r3, #1
   26b08:	cmn	r4, #1
   26b0c:	mov	r4, #0
   26b10:	movwgt	r2, #1
   26b14:	str	r3, [sp, #8]
   26b18:	subs	r2, r3, r2
   26b1c:	mov	r3, #0
   26b20:	movwne	r2, #1
   26b24:	cmn	r1, #1
   26b28:	mov	r1, #0
   26b2c:	movwgt	r3, #1
   26b30:	str	r2, [sp, #4]
   26b34:	cmn	ip, #1
   26b38:	mov	r2, #0
   26b3c:	movwgt	r2, #1
   26b40:	cmn	r6, #1
   26b44:	str	r3, [sp]
   26b48:	mov	r3, #0
   26b4c:	mov	r6, #0
   26b50:	movwgt	r1, #1
   26b54:	str	r2, [sp, #20]
   26b58:	subs	r1, r2, r1
   26b5c:	ldr	r2, [fp, #36]	; 0x24
   26b60:	movwne	r1, #1
   26b64:	str	r1, [sp, #16]
   26b68:	ldr	r1, [fp, #20]
   26b6c:	cmn	r1, #1
   26b70:	mov	r1, #0
   26b74:	movwgt	r1, #1
   26b78:	cmn	r7, #1
   26b7c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   26b80:	str	r1, [sp, #12]
   26b84:	movwgt	sl, #1
   26b88:	cmn	r9, #1
   26b8c:	mov	r1, #0
   26b90:	mov	r9, #0
   26b94:	movwgt	r1, #1
   26b98:	subs	r1, sl, r1
   26b9c:	movwne	r1, #1
   26ba0:	str	r1, [sp, #28]
   26ba4:	ldr	r1, [fp, #28]
   26ba8:	cmn	r1, #1
   26bac:	mov	r1, #0
   26bb0:	movwgt	r1, #1
   26bb4:	str	r1, [sp, #24]
   26bb8:	ldr	r1, [sp, #36]	; 0x24
   26bbc:	cmn	r1, #1
   26bc0:	mov	r1, #0
   26bc4:	movwgt	r3, #1
   26bc8:	cmn	r5, #1
   26bcc:	mov	r5, #0
   26bd0:	movwgt	r1, #1
   26bd4:	subs	r1, r3, r1
   26bd8:	movwne	r1, #1
   26bdc:	cmn	r2, #1
   26be0:	ldr	r2, [sp, #40]	; 0x28
   26be4:	movwgt	r6, #1
   26be8:	cmn	r2, #1
   26bec:	ldr	r2, [sp, #44]	; 0x2c
   26bf0:	movwgt	r9, #1
   26bf4:	cmn	r2, #1
   26bf8:	ldr	r2, [fp, #44]	; 0x2c
   26bfc:	movwgt	r5, #1
   26c00:	subs	ip, r9, r5
   26c04:	mov	r5, #0
   26c08:	movwne	ip, #1
   26c0c:	cmn	r2, #1
   26c10:	ldr	r2, [fp, #-44]	; 0xffffffd4
   26c14:	movwgt	lr, #1
   26c18:	cmn	r2, #1
   26c1c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   26c20:	movwgt	r5, #1
   26c24:	cmn	r2, #1
   26c28:	ldr	r2, [fp, #-36]	; 0xffffffdc
   26c2c:	movwgt	r4, #1
   26c30:	subs	r4, r5, r4
   26c34:	movwne	r4, #1
   26c38:	cmn	r8, #1
   26c3c:	mov	r8, #0
   26c40:	movwgt	r8, #1
   26c44:	cmp	r2, r7
   26c48:	bvs	26f4c <__assert_fail@plt+0x14390>
   26c4c:	sub	r2, r9, lr
   26c50:	clz	r2, r2
   26c54:	lsr	r2, r2, #5
   26c58:	ands	r2, r2, ip
   26c5c:	bne	26f4c <__assert_fail@plt+0x14390>
   26c60:	sub	r2, r3, r6
   26c64:	clz	r2, r2
   26c68:	lsr	r2, r2, #5
   26c6c:	ands	r1, r2, r1
   26c70:	ldreq	r1, [sp, #24]
   26c74:	ldreq	r2, [sp, #28]
   26c78:	subeq	r1, sl, r1
   26c7c:	clzeq	r1, r1
   26c80:	lsreq	r1, r1, #5
   26c84:	andseq	r1, r1, r2
   26c88:	bne	26f4c <__assert_fail@plt+0x14390>
   26c8c:	ldr	r1, [sp, #20]
   26c90:	ldr	r2, [sp, #12]
   26c94:	sub	r1, r1, r2
   26c98:	ldr	r2, [sp, #16]
   26c9c:	clz	r1, r1
   26ca0:	lsr	r1, r1, #5
   26ca4:	ands	r1, r1, r2
   26ca8:	ldreq	r1, [sp, #8]
   26cac:	ldreq	r2, [sp]
   26cb0:	subeq	r1, r1, r2
   26cb4:	ldreq	r2, [sp, #4]
   26cb8:	clzeq	r1, r1
   26cbc:	lsreq	r1, r1, #5
   26cc0:	andseq	r1, r1, r2
   26cc4:	bne	26f4c <__assert_fail@plt+0x14390>
   26cc8:	sub	r1, r5, r8
   26ccc:	clz	r1, r1
   26cd0:	lsr	r1, r1, #5
   26cd4:	ands	r1, r1, r4
   26cd8:	b	26f58 <__assert_fail@plt+0x1439c>
   26cdc:	sub	r1, r8, r6
   26ce0:	str	r1, [r0, #144]	; 0x90
   26ce4:	ldr	r7, [r0, #104]	; 0x68
   26ce8:	ldr	r8, [r0, #108]	; 0x6c
   26cec:	ldr	r6, [r0, #112]	; 0x70
   26cf0:	ldr	r1, [r0, #116]	; 0x74
   26cf4:	subs	r4, r7, r4
   26cf8:	str	r4, [r0, #104]	; 0x68
   26cfc:	sbc	r4, r8, r5
   26d00:	subs	r7, r6, r9
   26d04:	mov	r9, r1
   26d08:	str	r7, [r0, #112]	; 0x70
   26d0c:	ldr	r7, [fp, #20]
   26d10:	str	r4, [sp, #36]	; 0x24
   26d14:	ldr	r5, [r0, #124]	; 0x7c
   26d18:	sbc	r6, r1, r7
   26d1c:	ldr	r7, [r0, #120]	; 0x78
   26d20:	ldr	r1, [fp, #32]
   26d24:	subs	r7, r7, ip
   26d28:	ldr	ip, [fp, #28]
   26d2c:	str	r7, [r0, #120]	; 0x78
   26d30:	ldr	r4, [r0, #128]	; 0x80
   26d34:	ldr	lr, [r0, #132]	; 0x84
   26d38:	sbc	ip, r5, ip
   26d3c:	subs	r4, r4, r1
   26d40:	ldr	r1, [fp, #40]	; 0x28
   26d44:	str	r4, [r0, #128]	; 0x80
   26d48:	ldr	r4, [fp, #36]	; 0x24
   26d4c:	sbc	r7, lr, r4
   26d50:	ldr	r4, [r0, #136]	; 0x88
   26d54:	str	r7, [sp, #40]	; 0x28
   26d58:	subs	r4, r4, r1
   26d5c:	ldr	r1, [r0, #140]	; 0x8c
   26d60:	str	r4, [r0, #136]	; 0x88
   26d64:	ldr	r4, [fp, #44]	; 0x2c
   26d68:	str	r1, [sp, #44]	; 0x2c
   26d6c:	sbc	r1, r1, r4
   26d70:	str	r1, [r0, #140]	; 0x8c
   26d74:	str	r7, [r0, #132]	; 0x84
   26d78:	ldr	r7, [sp, #36]	; 0x24
   26d7c:	str	ip, [r0, #124]	; 0x7c
   26d80:	str	r6, [r0, #116]	; 0x74
   26d84:	str	r1, [fp, #-44]	; 0xffffffd4
   26d88:	str	r7, [r0, #108]	; 0x6c
   26d8c:	ldr	r4, [sl]
   26d90:	ldr	r1, [sl, #4]
   26d94:	subs	r2, r4, r2
   26d98:	str	r1, [fp, #-40]	; 0xffffffd8
   26d9c:	sbc	r4, r1, r3
   26da0:	ldr	r1, [fp, #12]
   26da4:	str	r4, [fp, #-36]	; 0xffffffdc
   26da8:	stm	sl, {r2, r4}
   26dac:	mov	r2, #0
   26db0:	mov	r4, #0
   26db4:	cmn	r1, #1
   26db8:	ldr	r1, [fp, #20]
   26dbc:	movwgt	r2, #1
   26dc0:	cmn	r8, #1
   26dc4:	movwgt	r4, #1
   26dc8:	subs	r2, r4, r2
   26dcc:	movwne	r2, #1
   26dd0:	cmn	r7, #1
   26dd4:	mov	r7, r3
   26dd8:	mov	r3, #0
   26ddc:	str	r2, [sp, #32]
   26de0:	mov	r2, #0
   26de4:	movwgt	r2, #1
   26de8:	subs	r2, r4, r2
   26dec:	movwne	r2, #1
   26df0:	cmn	r1, #1
   26df4:	mov	r1, #0
   26df8:	str	r2, [sp, #36]	; 0x24
   26dfc:	mov	r2, #0
   26e00:	movwgt	r2, #1
   26e04:	cmn	r9, #1
   26e08:	movwgt	r1, #1
   26e0c:	subs	r9, r1, r2
   26e10:	mov	r2, #0
   26e14:	movwne	r9, #1
   26e18:	cmn	r6, #1
   26e1c:	mov	r6, #0
   26e20:	movwgt	r2, #1
   26e24:	subs	sl, r1, r2
   26e28:	ldr	r1, [fp, #28]
   26e2c:	mov	r2, #0
   26e30:	movwne	sl, #1
   26e34:	cmn	r1, #1
   26e38:	mov	r1, #0
   26e3c:	movwgt	r1, #1
   26e40:	cmn	r5, #1
   26e44:	movwgt	r2, #1
   26e48:	subs	r8, r2, r1
   26e4c:	mov	r1, #0
   26e50:	movwne	r8, #1
   26e54:	cmn	ip, #1
   26e58:	movwgt	r1, #1
   26e5c:	subs	ip, r2, r1
   26e60:	ldr	r1, [fp, #36]	; 0x24
   26e64:	mov	r2, #0
   26e68:	movwne	ip, #1
   26e6c:	cmn	r1, #1
   26e70:	mov	r1, #0
   26e74:	movwgt	r1, #1
   26e78:	cmn	lr, #1
   26e7c:	movwgt	r2, #1
   26e80:	subs	lr, r2, r1
   26e84:	ldr	r1, [sp, #40]	; 0x28
   26e88:	movwne	lr, #1
   26e8c:	cmn	r1, #1
   26e90:	ldr	r1, [fp, #44]	; 0x2c
   26e94:	movwgt	r3, #1
   26e98:	subs	r3, r2, r3
   26e9c:	mov	r2, #0
   26ea0:	movwne	r3, #1
   26ea4:	cmn	r1, #1
   26ea8:	ldr	r1, [sp, #44]	; 0x2c
   26eac:	movwgt	r2, #1
   26eb0:	cmn	r1, #1
   26eb4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   26eb8:	movwgt	r6, #1
   26ebc:	subs	r4, r6, r2
   26ec0:	mov	r2, #0
   26ec4:	movwne	r4, #1
   26ec8:	cmn	r1, #1
   26ecc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   26ed0:	movwgt	r2, #1
   26ed4:	subs	r2, r6, r2
   26ed8:	mov	r6, #0
   26edc:	movwne	r2, #1
   26ee0:	cmn	r7, #1
   26ee4:	mov	r7, #0
   26ee8:	movwgt	r6, #1
   26eec:	cmn	r1, #1
   26ef0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   26ef4:	movwgt	r7, #1
   26ef8:	subs	r5, r7, r6
   26efc:	mov	r6, #0
   26f00:	movwne	r5, #1
   26f04:	cmn	r1, #1
   26f08:	ldr	r1, [fp, #48]	; 0x30
   26f0c:	movwgt	r6, #1
   26f10:	subs	r6, r7, r6
   26f14:	ldr	r7, [fp, #-32]	; 0xffffffe0
   26f18:	movwne	r6, #1
   26f1c:	cmp	r7, r1
   26f20:	bvs	26f4c <__assert_fail@plt+0x14390>
   26f24:	ands	r2, r4, r2
   26f28:	bne	26f4c <__assert_fail@plt+0x14390>
   26f2c:	ands	r1, lr, r3
   26f30:	andseq	r1, r8, ip
   26f34:	bne	26f4c <__assert_fail@plt+0x14390>
   26f38:	ands	r1, r9, sl
   26f3c:	ldreq	r1, [sp, #32]
   26f40:	ldreq	r2, [sp, #36]	; 0x24
   26f44:	andseq	r1, r1, r2
   26f48:	beq	26f54 <__assert_fail@plt+0x14398>
   26f4c:	mov	r1, #0
   26f50:	b	26f64 <__assert_fail@plt+0x143a8>
   26f54:	ands	r1, r5, r6
   26f58:	mov	r1, #0
   26f5c:	moveq	r1, #1
   26f60:	strbeq	r1, [r0, #153]	; 0x99
   26f64:	mov	r0, r1
   26f68:	sub	sp, fp, #28
   26f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26f74:	add	fp, sp, #24
   26f78:	mov	r1, r3
   26f7c:	ldr	r3, [r0, #156]	; 0x9c
   26f80:	mov	r4, r0
   26f84:	ldr	r0, [fp, #16]
   26f88:	ldr	r7, [fp, #12]
   26f8c:	ldr	r8, [fp, #8]
   26f90:	cmp	r3, #0
   26f94:	beq	26fc8 <__assert_fail@plt+0x1440c>
   26f98:	mov	r6, r4
   26f9c:	ldr	r5, [r6, #48]!	; 0x30
   26fa0:	cmp	r5, #0
   26fa4:	bne	26fc8 <__assert_fail@plt+0x1440c>
   26fa8:	ldrb	r5, [r4, #153]	; 0x99
   26fac:	cmp	r5, #0
   26fb0:	bne	26fc8 <__assert_fail@plt+0x1440c>
   26fb4:	cmp	r0, #2
   26fb8:	bgt	270b0 <__assert_fail@plt+0x144f4>
   26fbc:	ldr	r5, [r4, #172]	; 0xac
   26fc0:	cmp	r5, #0
   26fc4:	bne	270b0 <__assert_fail@plt+0x144f4>
   26fc8:	cmp	r0, #5
   26fcc:	blt	27044 <__assert_fail@plt+0x14488>
   26fd0:	add	r1, r3, #1
   26fd4:	sub	r0, r0, #4
   26fd8:	mov	r2, #100	; 0x64
   26fdc:	mov	r3, #0
   26fe0:	str	r1, [r4, #156]	; 0x9c
   26fe4:	str	r0, [r4, #48]	; 0x30
   26fe8:	mov	r0, r8
   26fec:	mov	r1, r7
   26ff0:	bl	3d400 <__assert_fail@plt+0x2a844>
   26ff4:	mov	r5, r0
   26ff8:	mov	r6, r1
   26ffc:	mov	r0, r2
   27000:	mov	r1, r3
   27004:	movw	r2, #10000	; 0x2710
   27008:	mov	r3, #0
   2700c:	strd	r0, [r4, #64]	; 0x40
   27010:	mov	r0, r8
   27014:	mov	r1, r7
   27018:	bl	3d400 <__assert_fail@plt+0x2a844>
   2701c:	strd	r0, [r4, #40]	; 0x28
   27020:	mov	r0, r5
   27024:	mov	r1, r6
   27028:	mov	r2, #100	; 0x64
   2702c:	mov	r3, #0
   27030:	bl	3d400 <__assert_fail@plt+0x2a844>
   27034:	mov	r0, r2
   27038:	mov	r1, r3
   2703c:	strd	r0, [r4, #56]	; 0x38
   27040:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27044:	ldr	r1, [r4, #172]	; 0xac
   27048:	mov	r5, #0
   2704c:	cmp	r0, #3
   27050:	add	r1, r1, #1
   27054:	str	r1, [r4, #172]	; 0xac
   27058:	bge	27070 <__assert_fail@plt+0x144b4>
   2705c:	mov	r0, r8
   27060:	mov	r1, r7
   27064:	mov	r2, #0
   27068:	mov	r3, #0
   2706c:	b	27098 <__assert_fail@plt+0x144dc>
   27070:	mov	r0, r8
   27074:	mov	r1, r7
   27078:	mov	r2, #100	; 0x64
   2707c:	mov	r3, #0
   27080:	mov	r6, #100	; 0x64
   27084:	bl	3d400 <__assert_fail@plt+0x2a844>
   27088:	umull	r2, r3, r0, r6
   2708c:	mla	r3, r1, r6, r3
   27090:	subs	r2, r8, r2
   27094:	sbc	r3, r7, r3
   27098:	mov	r7, #2
   2709c:	add	ip, r4, #72	; 0x48
   270a0:	str	r7, [r4, #28]
   270a4:	stm	ip, {r0, r1, r2, r3, r5}
   270a8:	str	r5, [r4, #92]	; 0x5c
   270ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   270b0:	ldr	r9, [fp, #20]
   270b4:	mov	r3, #1
   270b8:	sub	r5, r6, #16
   270bc:	strb	r3, [r4, #180]	; 0xb4
   270c0:	str	r2, [r5]
   270c4:	str	r1, [r5, #4]
   270c8:	str	r8, [r4, #40]	; 0x28
   270cc:	str	r7, [r4, #44]	; 0x2c
   270d0:	stm	r6, {r0, r9}
   270d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   270d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   270dc:	add	fp, sp, #28
   270e0:	sub	sp, sp, #596	; 0x254
   270e4:	mov	r5, r0
   270e8:	movw	r0, #11889	; 0x2e71
   270ec:	mov	r6, r2
   270f0:	mov	r4, r1
   270f4:	movt	r0, #4
   270f8:	bl	127cc <getenv@plt>
   270fc:	bl	3bfec <__assert_fail@plt+0x29430>
   27100:	cmp	r0, #0
   27104:	beq	2735c <__assert_fail@plt+0x147a0>
   27108:	mov	r7, r0
   2710c:	cmp	r6, #0
   27110:	str	r5, [sp, #48]	; 0x30
   27114:	bne	27124 <__assert_fail@plt+0x14568>
   27118:	sub	r6, fp, #184	; 0xb8
   2711c:	mov	r0, r6
   27120:	bl	3cbbc <__assert_fail@plt+0x2a000>
   27124:	ldm	r6, {r9, sl}
   27128:	add	r8, r4, #4
   2712c:	ldrb	r0, [r8, #-4]
   27130:	sub	r1, r0, #9
   27134:	cmp	r1, #5
   27138:	bcs	27144 <__assert_fail@plt+0x14588>
   2713c:	add	r8, r8, #1
   27140:	b	2712c <__assert_fail@plt+0x14570>
   27144:	cmp	r0, #32
   27148:	beq	2713c <__assert_fail@plt+0x14580>
   2714c:	sub	r5, fp, #240	; 0xf0
   27150:	vmov.i32	q8, #0	; 0x00000000
   27154:	mov	r0, #52	; 0x34
   27158:	mov	r2, #0
   2715c:	sub	r4, r8, #4
   27160:	mov	r1, r5
   27164:	str	r2, [fp, #-192]	; 0xffffff40
   27168:	vst1.64	{d16-d17}, [r1], r0
   2716c:	add	r0, r5, #32
   27170:	vst1.64	{d16-d17}, [r0]
   27174:	add	r0, r5, #16
   27178:	str	r2, [r1]
   2717c:	movw	r1, #12479	; 0x30bf
   27180:	mov	r2, #4
   27184:	vst1.64	{d16-d17}, [r0]
   27188:	mov	r0, #0
   2718c:	movt	r1, #4
   27190:	str	r0, [sp, #60]	; 0x3c
   27194:	mov	r0, r4
   27198:	bl	12b5c <strncmp@plt>
   2719c:	cmp	r0, #0
   271a0:	beq	27364 <__assert_fail@plt+0x147a8>
   271a4:	mov	r0, #0
   271a8:	mov	r1, r7
   271ac:	str	r0, [sp, #52]	; 0x34
   271b0:	sub	r2, fp, #284	; 0x11c
   271b4:	str	r1, [sp, #56]	; 0x38
   271b8:	mov	r0, r1
   271bc:	mov	r1, r6
   271c0:	bl	3c0a0 <__assert_fail@plt+0x294e4>
   271c4:	cmp	r0, #0
   271c8:	beq	27434 <__assert_fail@plt+0x14878>
   271cc:	mov	ip, #0
   271d0:	mov	r1, #2
   271d4:	str	r7, [sp, #44]	; 0x2c
   271d8:	ldrb	lr, [r4]
   271dc:	sub	r7, fp, #284	; 0x11c
   271e0:	vmov.i32	q8, #0	; 0x00000000
   271e4:	str	ip, [sp, #160]	; 0xa0
   271e8:	str	sl, [sp, #204]	; 0xcc
   271ec:	str	r1, [sp, #140]	; 0x8c
   271f0:	movw	sl, #42752	; 0xa700
   271f4:	ldm	r7, {r1, r3, r6, r7}
   271f8:	ldr	r2, [fp, #-264]	; 0xfffffef8
   271fc:	ldr	r8, [fp, #-252]	; 0xffffff04
   27200:	movt	sl, #118	; 0x76
   27204:	str	r7, [sp, #176]	; 0xb0
   27208:	str	r6, [sp, #184]	; 0xb8
   2720c:	str	r3, [sp, #192]	; 0xc0
   27210:	str	r1, [sp, #200]	; 0xc8
   27214:	ldr	r1, [fp, #-268]	; 0xfffffef4
   27218:	asr	r7, r7, #31
   2721c:	str	r8, [fp, #-44]	; 0xffffffd4
   27220:	add	r0, r1, #1
   27224:	movw	r1, #1900	; 0x76c
   27228:	adds	r1, r2, r1
   2722c:	str	r1, [sp, #152]	; 0x98
   27230:	asr	r1, r6, #31
   27234:	str	r0, [sp, #168]	; 0xa8
   27238:	str	r7, [sp, #180]	; 0xb4
   2723c:	asr	r0, r0, #31
   27240:	str	r1, [sp, #188]	; 0xbc
   27244:	asr	r1, r3, #31
   27248:	str	r1, [sp, #196]	; 0xc4
   2724c:	asr	r1, r2, #31
   27250:	adc	r1, r1, #0
   27254:	cmp	lr, #0
   27258:	add	lr, sp, #256	; 0x100
   2725c:	str	r1, [sp, #156]	; 0x9c
   27260:	str	r0, [sp, #172]	; 0xac
   27264:	movw	r0, #60281	; 0xeb79
   27268:	movt	r0, #3
   2726c:	movne	r0, r4
   27270:	str	r0, [sp, #112]	; 0x70
   27274:	add	r0, sp, #112	; 0x70
   27278:	add	r1, r0, #96	; 0x60
   2727c:	str	r1, [sp, #16]
   27280:	ldm	r5!, {r2, r3, r6, r7}
   27284:	stmia	r1!, {r2, r3, r6, r7}
   27288:	ldm	r5!, {r2, r3, r4, r6, r7}
   2728c:	stmia	r1!, {r2, r3, r4, r6, r7}
   27290:	ldm	r5, {r2, r3, r4, r6, r7}
   27294:	mov	r5, #1
   27298:	stm	r1, {r2, r3, r4, r6, r7}
   2729c:	add	r1, r0, #172	; 0xac
   272a0:	add	r2, sp, #304	; 0x130
   272a4:	add	r4, sp, #108	; 0x6c
   272a8:	add	r6, sp, #64	; 0x40
   272ac:	vst1.32	{d16-d17}, [r1]
   272b0:	add	r1, r0, #156	; 0x9c
   272b4:	vst1.32	{d16-d17}, [r1]
   272b8:	movw	r1, #269	; 0x10d
   272bc:	strh	ip, [lr, #8]
   272c0:	stm	r2, {r1, r8, ip}
   272c4:	mov	r8, sl
   272c8:	ldr	r1, [fp, #-244]	; 0xffffff0c
   272cc:	ldr	r7, [sp, #56]	; 0x38
   272d0:	str	r1, [sp, #300]	; 0x12c
   272d4:	add	r1, r0, #88	; 0x58
   272d8:	str	r1, [sp, #60]	; 0x3c
   272dc:	add	r1, r0, #80	; 0x50
   272e0:	str	r1, [sp, #20]
   272e4:	add	r1, r0, #72	; 0x48
   272e8:	str	r1, [sp, #24]
   272ec:	add	r1, r0, #64	; 0x40
   272f0:	str	r1, [sp, #28]
   272f4:	add	r1, r0, #56	; 0x38
   272f8:	str	r1, [sp, #36]	; 0x24
   272fc:	add	r1, r0, #48	; 0x30
   27300:	add	r0, r0, #40	; 0x28
   27304:	str	r1, [sp, #32]
   27308:	str	r0, [sp, #40]	; 0x28
   2730c:	adds	r0, r9, r8
   27310:	str	r0, [sp, #108]	; 0x6c
   27314:	bvs	273e0 <__assert_fail@plt+0x14824>
   27318:	mov	r0, r7
   2731c:	mov	r1, r4
   27320:	mov	r2, r6
   27324:	bl	3c0a0 <__assert_fail@plt+0x294e4>
   27328:	cmp	r0, #0
   2732c:	ldrne	r0, [sp, #104]	; 0x68
   27330:	cmpne	r0, #0
   27334:	beq	27348 <__assert_fail@plt+0x1478c>
   27338:	ldr	r1, [sp, #96]	; 0x60
   2733c:	ldr	r2, [sp, #308]	; 0x134
   27340:	cmp	r1, r2
   27344:	bne	273c8 <__assert_fail@plt+0x1480c>
   27348:	add	r5, r5, #1
   2734c:	add	r8, r8, sl
   27350:	cmp	r5, #4
   27354:	bcc	2730c <__assert_fail@plt+0x14750>
   27358:	b	273e0 <__assert_fail@plt+0x14824>
   2735c:	mov	r5, #0
   27360:	b	2745c <__assert_fail@plt+0x148a0>
   27364:	mov	r0, #1
   27368:	mov	r1, r8
   2736c:	b	27388 <__assert_fail@plt+0x147cc>
   27370:	ldrb	r2, [r1, #1]!
   27374:	cmp	r2, #34	; 0x22
   27378:	cmpne	r2, #92	; 0x5c
   2737c:	bne	271a4 <__assert_fail@plt+0x145e8>
   27380:	add	r0, r0, #1
   27384:	add	r1, r1, #1
   27388:	ldrb	r2, [r1]
   2738c:	cmp	r2, #92	; 0x5c
   27390:	beq	27370 <__assert_fail@plt+0x147b4>
   27394:	cmp	r2, #0
   27398:	beq	271a4 <__assert_fail@plt+0x145e8>
   2739c:	cmp	r2, #34	; 0x22
   273a0:	bne	27380 <__assert_fail@plt+0x147c4>
   273a4:	cmp	r0, #101	; 0x65
   273a8:	bcc	27524 <__assert_fail@plt+0x14968>
   273ac:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   273b0:	cmp	r0, #0
   273b4:	mov	r4, r0
   273b8:	bne	2752c <__assert_fail@plt+0x14970>
   273bc:	mov	r5, #0
   273c0:	mov	r4, #0
   273c4:	b	2744c <__assert_fail@plt+0x14890>
   273c8:	movw	r2, #269	; 0x10d
   273cc:	str	r2, [sp, #316]	; 0x13c
   273d0:	str	r0, [sp, #312]	; 0x138
   273d4:	mov	r0, #0
   273d8:	str	r1, [sp, #320]	; 0x140
   273dc:	str	r0, [sp, #324]	; 0x144
   273e0:	ldr	r0, [sp, #300]	; 0x12c
   273e4:	cmp	r0, #0
   273e8:	ldrne	r1, [sp, #312]	; 0x138
   273ec:	cmpne	r1, #0
   273f0:	bne	27468 <__assert_fail@plt+0x148ac>
   273f4:	add	r0, sp, #112	; 0x70
   273f8:	bl	24c4c <__assert_fail@plt+0x12090>
   273fc:	ldr	r7, [sp, #44]	; 0x2c
   27400:	ldr	r2, [sp, #48]	; 0x30
   27404:	cmp	r0, #0
   27408:	beq	27414 <__assert_fail@plt+0x14858>
   2740c:	mov	r0, #0
   27410:	b	27430 <__assert_fail@plt+0x14874>
   27414:	ldrb	r0, [sp, #264]	; 0x108
   27418:	cmp	r0, #0
   2741c:	beq	27488 <__assert_fail@plt+0x148cc>
   27420:	ldr	r0, [sp, #60]	; 0x3c
   27424:	ldrd	r0, [r0]
   27428:	stm	r2, {r0, r1}
   2742c:	mov	r0, #1
   27430:	str	r0, [sp, #60]	; 0x3c
   27434:	ldr	r0, [sp, #56]	; 0x38
   27438:	cmp	r0, r7
   2743c:	beq	27444 <__assert_fail@plt+0x14888>
   27440:	bl	3c078 <__assert_fail@plt+0x294bc>
   27444:	ldr	r4, [sp, #52]	; 0x34
   27448:	ldr	r5, [sp, #60]	; 0x3c
   2744c:	mov	r0, r4
   27450:	bl	2c048 <__assert_fail@plt+0x1948c>
   27454:	mov	r0, r7
   27458:	bl	3c078 <__assert_fail@plt+0x294bc>
   2745c:	mov	r0, r5
   27460:	sub	sp, fp, #28
   27464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27468:	bl	124cc <strcmp@plt>
   2746c:	cmp	r0, #0
   27470:	bne	273f4 <__assert_fail@plt+0x14838>
   27474:	mov	r0, #0
   27478:	str	r0, [sp, #312]	; 0x138
   2747c:	mvn	r0, #0
   27480:	str	r0, [sp, #308]	; 0x134
   27484:	b	273f4 <__assert_fail@plt+0x14838>
   27488:	mov	r0, #0
   2748c:	add	ip, sp, #268	; 0x10c
   27490:	str	r0, [sp, #60]	; 0x3c
   27494:	ldm	ip, {r1, r2, ip}
   27498:	ldr	r3, [sp, #288]	; 0x120
   2749c:	ldr	r7, [sp, #280]	; 0x118
   274a0:	add	r5, r3, ip
   274a4:	ldr	r3, [sp, #284]	; 0x11c
   274a8:	orr	r2, r2, r1
   274ac:	orr	r1, r2, r3
   274b0:	orr	r7, r1, r7
   274b4:	orr	r7, r7, r5
   274b8:	cmp	r7, #1
   274bc:	bgt	2762c <__assert_fail@plt+0x14a70>
   274c0:	ldr	r0, [sp, #40]	; 0x28
   274c4:	ldrd	r8, [r0]
   274c8:	mvn	r0, #0
   274cc:	cmp	r9, #0
   274d0:	blt	275a8 <__assert_fail@plt+0x149ec>
   274d4:	ldr	r7, [sp, #32]
   274d8:	ldr	r7, [r7]
   274dc:	cmp	r7, #2
   274e0:	bne	27510 <__assert_fail@plt+0x14954>
   274e4:	subs	r5, r8, #69	; 0x45
   274e8:	mov	r7, #0
   274ec:	sbcs	r5, r9, #0
   274f0:	movwlt	r7, #1
   274f4:	movw	r5, #1900	; 0x76c
   274f8:	cmp	r7, #0
   274fc:	movwne	r5, #2000	; 0x7d0
   27500:	adds	r8, r5, r8
   27504:	adc	r9, r9, #0
   27508:	cmn	r9, #1
   2750c:	ble	275a8 <__assert_fail@plt+0x149ec>
   27510:	movw	r7, #1900	; 0x76c
   27514:	subs	sl, r8, r7
   27518:	sbc	r7, r9, #0
   2751c:	str	sl, [fp, #-56]	; 0xffffffc8
   27520:	b	275bc <__assert_fail@plt+0x14a00>
   27524:	mov	r4, #0
   27528:	sub	r0, fp, #176	; 0xb0
   2752c:	ldrb	r2, [r8]
   27530:	mov	r1, r0
   27534:	b	27550 <__assert_fail@plt+0x14994>
   27538:	uxtb	r2, r2
   2753c:	cmp	r2, #92	; 0x5c
   27540:	addeq	r8, r8, #1
   27544:	ldrb	r2, [r8]
   27548:	strb	r2, [r1], #1
   2754c:	ldrb	r2, [r8, #1]!
   27550:	cmp	r2, #34	; 0x22
   27554:	bne	27538 <__assert_fail@plt+0x1497c>
   27558:	mov	r2, #0
   2755c:	strb	r2, [r1]
   27560:	bl	3bfec <__assert_fail@plt+0x29430>
   27564:	cmp	r0, #0
   27568:	beq	275a0 <__assert_fail@plt+0x149e4>
   2756c:	str	r4, [sp, #52]	; 0x34
   27570:	mov	r2, r0
   27574:	add	r4, r8, #1
   27578:	ldrb	r0, [r4]
   2757c:	sub	r1, r0, #9
   27580:	cmp	r1, #5
   27584:	bcs	27590 <__assert_fail@plt+0x149d4>
   27588:	add	r4, r4, #1
   2758c:	b	27578 <__assert_fail@plt+0x149bc>
   27590:	cmp	r0, #32
   27594:	beq	27588 <__assert_fail@plt+0x149cc>
   27598:	mov	r1, r2
   2759c:	b	271b0 <__assert_fail@plt+0x145f4>
   275a0:	mov	r5, #0
   275a4:	b	2744c <__assert_fail@plt+0x14890>
   275a8:	movw	r7, #63636	; 0xf894
   275ac:	movt	r7, #65535	; 0xffff
   275b0:	subs	sl, r7, r8
   275b4:	str	sl, [fp, #-56]	; 0xffffffc8
   275b8:	sbc	r7, r0, r9
   275bc:	teq	r7, sl, asr #31
   275c0:	ldr	r7, [sp, #44]	; 0x2c
   275c4:	bne	27434 <__assert_fail@plt+0x14878>
   275c8:	ldr	r0, [sp, #36]	; 0x24
   275cc:	mov	r4, #0
   275d0:	ldr	r8, [r0]
   275d4:	ldr	r7, [r0, #4]
   275d8:	mov	r0, #0
   275dc:	str	r0, [sp, #60]	; 0x3c
   275e0:	mov	r0, #0
   275e4:	cmn	r7, #1
   275e8:	movwgt	r4, #1
   275ec:	subs	r9, r8, #1
   275f0:	sbc	r5, r7, #0
   275f4:	str	r9, [fp, #-60]	; 0xffffffc4
   275f8:	cmn	r5, #1
   275fc:	movwgt	r0, #1
   27600:	subs	r0, r4, r0
   27604:	movwne	r0, #1
   27608:	cmp	r7, #0
   2760c:	mov	r7, #0
   27610:	movwlt	r7, #1
   27614:	tst	r7, r0
   27618:	asreq	r0, r9, #31
   2761c:	eoreq	r7, r9, r9
   27620:	eoreq	r0, r5, r0
   27624:	orrseq	r0, r7, r0
   27628:	beq	27634 <__assert_fail@plt+0x14a78>
   2762c:	ldr	r7, [sp, #44]	; 0x2c
   27630:	b	27434 <__assert_fail@plt+0x14878>
   27634:	ldr	r0, [sp, #28]
   27638:	ldr	r7, [sp, #44]	; 0x2c
   2763c:	ldrd	r4, [r0]
   27640:	teq	r5, r4, asr #31
   27644:	str	r4, [fp, #-64]	; 0xffffffc0
   27648:	bne	27434 <__assert_fail@plt+0x14878>
   2764c:	cmp	r3, #0
   27650:	bne	27668 <__assert_fail@plt+0x14aac>
   27654:	cmp	r2, #0
   27658:	bne	2770c <__assert_fail@plt+0x14b50>
   2765c:	ldrb	r0, [sp, #265]	; 0x109
   27660:	cmp	r0, #0
   27664:	beq	2770c <__assert_fail@plt+0x14b50>
   27668:	ldr	r0, [sp, #24]
   2766c:	ldr	r8, [r0]
   27670:	ldr	r3, [r0, #4]
   27674:	ldr	r2, [sp, #140]	; 0x8c
   27678:	cmp	r2, #0
   2767c:	beq	276b4 <__assert_fail@plt+0x14af8>
   27680:	cmp	r2, #1
   27684:	bne	276d8 <__assert_fail@plt+0x14b1c>
   27688:	eor	r0, r8, #12
   2768c:	orrs	r0, r0, r3
   27690:	mvn	r0, #0
   27694:	movweq	r0, #12
   27698:	subs	r2, r8, #1
   2769c:	sbc	r3, r3, #0
   276a0:	subs	r2, r2, #11
   276a4:	sbcs	r2, r3, #0
   276a8:	addcc	r0, r8, #12
   276ac:	mov	r8, r0
   276b0:	b	276e4 <__assert_fail@plt+0x14b28>
   276b4:	eor	r0, r8, #12
   276b8:	orrs	r0, r0, r3
   276bc:	mvnne	r0, #0
   276c0:	subs	r2, r8, #1
   276c4:	sbc	r3, r3, #0
   276c8:	subs	r2, r2, #11
   276cc:	sbcs	r2, r3, #0
   276d0:	movcs	r8, r0
   276d4:	b	276e4 <__assert_fail@plt+0x14b28>
   276d8:	subs	r0, r8, #24
   276dc:	sbcs	r0, r3, #0
   276e0:	mvncs	r8, #0
   276e4:	cmp	r8, #0
   276e8:	str	r8, [fp, #-68]	; 0xffffffbc
   276ec:	blt	27434 <__assert_fail@plt+0x14878>
   276f0:	ldr	r0, [sp, #20]
   276f4:	str	r4, [sp, #40]	; 0x28
   276f8:	ldr	r5, [sp, #200]	; 0xc8
   276fc:	ldr	r4, [r0]
   27700:	str	r5, [fp, #-76]	; 0xffffffb4
   27704:	str	r4, [fp, #-72]	; 0xffffffb8
   27708:	b	2772c <__assert_fail@plt+0x14b70>
   2770c:	mov	r8, #0
   27710:	str	r4, [sp, #40]	; 0x28
   27714:	mov	r4, #0
   27718:	mov	r5, #0
   2771c:	str	r8, [fp, #-72]	; 0xffffffb8
   27720:	str	r8, [fp, #-76]	; 0xffffffb4
   27724:	str	r8, [fp, #-68]	; 0xffffffbc
   27728:	str	r8, [sp, #204]	; 0xcc
   2772c:	cmp	r1, #0
   27730:	mvnne	r0, #0
   27734:	strne	r0, [fp, #-44]	; 0xffffffd4
   27738:	cmp	ip, #0
   2773c:	beq	27750 <__assert_fail@plt+0x14b94>
   27740:	ldr	r0, [sp, #132]	; 0x84
   27744:	str	r0, [sp, #32]
   27748:	str	r0, [fp, #-44]	; 0xffffffd4
   2774c:	b	27758 <__assert_fail@plt+0x14b9c>
   27750:	ldr	r0, [fp, #-44]	; 0xffffffd4
   27754:	str	r0, [sp, #32]
   27758:	mvn	r0, #0
   2775c:	sub	r1, fp, #76	; 0x4c
   27760:	str	r0, [fp, #-52]	; 0xffffffcc
   27764:	ldr	r0, [sp, #56]	; 0x38
   27768:	bl	3c370 <__assert_fail@plt+0x297b4>
   2776c:	mov	lr, r0
   27770:	ldr	r0, [fp, #-52]	; 0xffffffcc
   27774:	cmp	r0, #0
   27778:	blt	277c0 <__assert_fail@plt+0x14c04>
   2777c:	sub	r3, fp, #76	; 0x4c
   27780:	ldm	r3, {r0, r1, r2, r3}
   27784:	eor	r0, r0, r5
   27788:	eor	r1, r1, r4
   2778c:	orr	r0, r1, r0
   27790:	eor	r1, r2, r8
   27794:	orr	r0, r0, r1
   27798:	ldr	r1, [sp, #40]	; 0x28
   2779c:	eor	r1, r3, r1
   277a0:	orr	r0, r0, r1
   277a4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   277a8:	eor	r1, r1, r9
   277ac:	orr	r0, r0, r1
   277b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   277b4:	eor	r1, r1, sl
   277b8:	orrs	r0, r0, r1
   277bc:	beq	279dc <__assert_fail@plt+0x14e20>
   277c0:	ldr	r0, [sp, #288]	; 0x120
   277c4:	cmp	r0, #0
   277c8:	beq	27434 <__assert_fail@plt+0x14878>
   277cc:	str	r4, [sp, #36]	; 0x24
   277d0:	mov	r0, #88	; 0x58
   277d4:	ldr	r4, [sp, #136]	; 0x88
   277d8:	str	r5, [sp, #28]
   277dc:	mov	r2, #43	; 0x2b
   277e0:	add	r6, r6, #3
   277e4:	strb	r0, [sp, #66]	; 0x42
   277e8:	movw	r0, #22616	; 0x5858
   277ec:	strh	r0, [sp, #64]	; 0x40
   277f0:	movw	r0, #46021	; 0xb3c5
   277f4:	movt	r0, #37282	; 0x91a2
   277f8:	smmla	r0, r4, r0, r4
   277fc:	asr	r1, r0, #11
   27800:	add	r5, r1, r0, lsr #31
   27804:	movw	r1, #11892	; 0x2e74
   27808:	mov	r0, r6
   2780c:	cmp	r5, #0
   27810:	mov	r3, r5
   27814:	movt	r1, #4
   27818:	rsbmi	r3, r5, #0
   2781c:	cmp	r4, #0
   27820:	movwlt	r2, #45	; 0x2d
   27824:	bl	12a60 <sprintf@plt>
   27828:	mov	r1, #3600	; 0xe10
   2782c:	mls	r2, r5, r1, r4
   27830:	ldr	r4, [sp, #36]	; 0x24
   27834:	cmp	r2, #0
   27838:	mov	r1, r2
   2783c:	rsbmi	r1, r2, #0
   27840:	cmp	r2, #0
   27844:	beq	278f8 <__assert_fail@plt+0x14d3c>
   27848:	movw	r2, #33205	; 0x81b5
   2784c:	mov	lr, r8
   27850:	add	r7, r6, r0
   27854:	mov	r8, #58	; 0x3a
   27858:	mov	ip, r4
   2785c:	movt	r2, #6990	; 0x1b4e
   27860:	strb	r8, [r7]
   27864:	umull	r2, r3, r1, r2
   27868:	mov	r2, #48	; 0x30
   2786c:	add	r3, r2, r3, lsr #6
   27870:	strb	r3, [r7, #1]
   27874:	movw	r3, #34953	; 0x8889
   27878:	movt	r3, #34952	; 0x8888
   2787c:	umull	r3, r6, r1, r3
   27880:	movw	r3, #52429	; 0xcccd
   27884:	lsr	r5, r6, #5
   27888:	movt	r3, #52428	; 0xcccc
   2788c:	umull	r4, r0, r5, r3
   27890:	lsr	r0, r0, #3
   27894:	add	r0, r0, r0, lsl #2
   27898:	sub	r0, r5, r0, lsl #1
   2789c:	orr	r0, r0, #48	; 0x30
   278a0:	strb	r0, [r7, #2]
   278a4:	lsl	r0, r5, #4
   278a8:	sub	r0, r0, r6, lsr #5
   278ac:	sub	r6, r1, r0, lsl #2
   278b0:	add	r1, r7, #3
   278b4:	cmp	r6, #0
   278b8:	beq	278e4 <__assert_fail@plt+0x14d28>
   278bc:	umull	r0, r3, r6, r3
   278c0:	strb	r8, [r1]
   278c4:	orr	r0, r2, r3, lsr #3
   278c8:	strb	r0, [r1, #1]
   278cc:	lsr	r0, r3, #3
   278d0:	add	r0, r0, r0, lsl #2
   278d4:	sub	r0, r6, r0, lsl #1
   278d8:	orr	r0, r0, #48	; 0x30
   278dc:	strb	r0, [r1, #2]
   278e0:	add	r1, r1, #3
   278e4:	ldr	r7, [sp, #44]	; 0x2c
   278e8:	mov	r0, #0
   278ec:	mov	r8, lr
   278f0:	mov	r4, ip
   278f4:	strb	r0, [r1]
   278f8:	add	r0, sp, #64	; 0x40
   278fc:	bl	3bfec <__assert_fail@plt+0x29430>
   27900:	cmp	r0, #0
   27904:	beq	27434 <__assert_fail@plt+0x14878>
   27908:	str	r4, [fp, #-72]	; 0xffffffb8
   2790c:	ldr	r5, [sp, #28]
   27910:	ldr	r4, [sp, #40]	; 0x28
   27914:	mov	r6, r0
   27918:	sub	r0, fp, #64	; 0x40
   2791c:	sub	r1, fp, #76	; 0x4c
   27920:	str	r5, [fp, #-76]	; 0xffffffb4
   27924:	str	r8, [fp, #-68]	; 0xffffffbc
   27928:	stm	r0, {r4, r9, sl}
   2792c:	ldr	r0, [sp, #32]
   27930:	str	r0, [fp, #-44]	; 0xffffffd4
   27934:	mvn	r0, #0
   27938:	str	r0, [fp, #-52]	; 0xffffffcc
   2793c:	mov	r0, r6
   27940:	bl	3c370 <__assert_fail@plt+0x297b4>
   27944:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27948:	cmn	r1, #1
   2794c:	ble	27a28 <__assert_fail@plt+0x14e6c>
   27950:	str	r0, [sp]
   27954:	ldr	r0, [fp, #-56]	; 0xffffffc8
   27958:	str	r8, [sp, #24]
   2795c:	ldr	r7, [fp, #-76]	; 0xffffffb4
   27960:	ldr	r8, [fp, #-72]	; 0xffffffb8
   27964:	str	r0, [sp, #20]
   27968:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2796c:	str	r0, [sp, #12]
   27970:	ldr	r0, [fp, #-68]	; 0xffffffbc
   27974:	str	r0, [sp, #4]
   27978:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2797c:	str	r0, [sp, #8]
   27980:	mov	r0, r6
   27984:	bl	3c078 <__assert_fail@plt+0x294bc>
   27988:	ldr	r1, [sp, #36]	; 0x24
   2798c:	eor	r0, r7, r5
   27990:	eor	r1, r8, r1
   27994:	ldr	r8, [sp, #24]
   27998:	orr	r0, r1, r0
   2799c:	ldr	r1, [sp, #4]
   279a0:	eor	r1, r1, r8
   279a4:	orr	r0, r0, r1
   279a8:	ldr	r1, [sp, #8]
   279ac:	eor	r1, r1, r4
   279b0:	orr	r0, r0, r1
   279b4:	ldr	r1, [sp, #12]
   279b8:	eor	r1, r1, r9
   279bc:	orr	r0, r0, r1
   279c0:	ldr	r1, [sp, #20]
   279c4:	eor	r1, r1, sl
   279c8:	orrs	r0, r0, r1
   279cc:	bne	2762c <__assert_fail@plt+0x14a70>
   279d0:	ldr	r7, [sp, #44]	; 0x2c
   279d4:	ldr	lr, [sp]
   279d8:	b	279e4 <__assert_fail@plt+0x14e28>
   279dc:	str	r5, [sp, #28]
   279e0:	str	r4, [sp, #36]	; 0x24
   279e4:	mvn	r2, #0
   279e8:	ldr	r0, [sp, #272]	; 0x110
   279ec:	cmp	r0, #0
   279f0:	beq	27c7c <__assert_fail@plt+0x150c0>
   279f4:	ldr	r0, [sp, #268]	; 0x10c
   279f8:	cmp	r0, #0
   279fc:	bne	27c7c <__assert_fail@plt+0x150c0>
   27a00:	ldr	r5, [sp, #120]	; 0x78
   27a04:	ldr	r4, [sp, #124]	; 0x7c
   27a08:	subs	r0, r5, #1
   27a0c:	sbcs	r0, r4, #0
   27a10:	blt	27a34 <__assert_fail@plt+0x14e78>
   27a14:	ldr	r0, [sp, #128]	; 0x80
   27a18:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27a1c:	subs	r0, r1, r0
   27a20:	movwne	r0, #1
   27a24:	b	27a38 <__assert_fail@plt+0x14e7c>
   27a28:	mov	r0, r6
   27a2c:	bl	3c078 <__assert_fail@plt+0x294bc>
   27a30:	b	27434 <__assert_fail@plt+0x14878>
   27a34:	mov	r0, #0
   27a38:	subs	r0, r5, r0
   27a3c:	sbcs	r0, r4, #0
   27a40:	bge	27a64 <__assert_fail@plt+0x14ea8>
   27a44:	subs	r0, r5, #1
   27a48:	sbcs	r0, r4, #0
   27a4c:	blt	27a88 <__assert_fail@plt+0x14ecc>
   27a50:	ldr	r0, [sp, #128]	; 0x80
   27a54:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27a58:	subs	r0, r1, r0
   27a5c:	movwne	r0, #1
   27a60:	b	27a8c <__assert_fail@plt+0x14ed0>
   27a64:	subs	r0, r5, #1
   27a68:	mov	r2, #0
   27a6c:	sbcs	r0, r4, #0
   27a70:	blt	27acc <__assert_fail@plt+0x14f10>
   27a74:	ldr	r0, [sp, #128]	; 0x80
   27a78:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27a7c:	subs	r0, r1, r0
   27a80:	movwne	r0, #1
   27a84:	b	27ad0 <__assert_fail@plt+0x14f14>
   27a88:	mov	r0, #0
   27a8c:	subs	r0, r5, r0
   27a90:	sbc	r1, r4, #0
   27a94:	eor	r0, r0, r2
   27a98:	eor	r1, r1, r2
   27a9c:	orrs	r0, r0, r1
   27aa0:	beq	27b28 <__assert_fail@plt+0x14f6c>
   27aa4:	mov	r0, #0
   27aa8:	str	r0, [sp, #60]	; 0x3c
   27aac:	subs	r0, r5, #1
   27ab0:	sbcs	r0, r4, #0
   27ab4:	blt	27afc <__assert_fail@plt+0x14f40>
   27ab8:	ldr	r0, [sp, #128]	; 0x80
   27abc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27ac0:	subs	r0, r1, r0
   27ac4:	movwne	r0, #1
   27ac8:	b	27b00 <__assert_fail@plt+0x14f44>
   27acc:	mov	r0, #0
   27ad0:	movw	r3, #37449	; 0x9249
   27ad4:	subs	r0, r5, r0
   27ad8:	str	r2, [sp, #60]	; 0x3c
   27adc:	sbc	r1, r4, r2
   27ae0:	movw	r2, #9362	; 0x2492
   27ae4:	movt	r3, #18724	; 0x4924
   27ae8:	movt	r2, #4681	; 0x1249
   27aec:	subs	r0, r3, r0
   27af0:	sbcs	r0, r2, r1
   27af4:	blt	27434 <__assert_fail@plt+0x14878>
   27af8:	b	27b28 <__assert_fail@plt+0x14f6c>
   27afc:	mov	r0, #0
   27b00:	subs	r2, r5, r0
   27b04:	ldr	r0, [sp, #60]	; 0x3c
   27b08:	mov	r1, #-2147483648	; 0x80000000
   27b0c:	sbc	r3, r4, r0
   27b10:	mov	r0, #0
   27b14:	bl	3d400 <__assert_fail@plt+0x2a844>
   27b18:	ldr	r7, [sp, #44]	; 0x2c
   27b1c:	subs	r0, r0, #7
   27b20:	sbcs	r0, r1, #0
   27b24:	blt	27434 <__assert_fail@plt+0x14878>
   27b28:	rsbs	r0, r5, #0
   27b2c:	rscs	r0, r4, #0
   27b30:	bge	27b48 <__assert_fail@plt+0x14f8c>
   27b34:	ldr	r0, [sp, #128]	; 0x80
   27b38:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27b3c:	subs	r2, r1, r0
   27b40:	movwne	r2, #1
   27b44:	b	27b54 <__assert_fail@plt+0x14f98>
   27b48:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27b4c:	ldr	r0, [sp, #128]	; 0x80
   27b50:	mov	r2, #0
   27b54:	rsb	r1, r1, #7
   27b58:	mov	r3, #0
   27b5c:	subs	r2, r5, r2
   27b60:	mov	r7, #7
   27b64:	add	r0, r1, r0
   27b68:	movw	r1, #9363	; 0x2493
   27b6c:	sbc	r3, r4, r3
   27b70:	umull	r2, r7, r2, r7
   27b74:	movt	r1, #37449	; 0x9249
   27b78:	rsb	r3, r3, r3, lsl #3
   27b7c:	smmla	r1, r0, r1, r0
   27b80:	add	r3, r7, r3
   27b84:	asr	r7, r1, #2
   27b88:	add	r1, r7, r1, lsr #31
   27b8c:	sub	r1, r1, r1, lsl #3
   27b90:	add	r0, r0, r1
   27b94:	adds	r1, r0, r2
   27b98:	asr	r7, r0, #31
   27b9c:	mov	r2, #0
   27ba0:	adc	r0, r7, r3
   27ba4:	str	r2, [sp, #60]	; 0x3c
   27ba8:	mov	r2, #0
   27bac:	cmn	r0, #1
   27bb0:	movwgt	r2, #1
   27bb4:	cmn	r7, #1
   27bb8:	mov	r7, #0
   27bbc:	movwgt	r7, #1
   27bc0:	subs	r2, r7, r2
   27bc4:	movwne	r2, #1
   27bc8:	cmn	r3, #1
   27bcc:	mov	r3, #0
   27bd0:	movwgt	r3, #1
   27bd4:	sub	r3, r7, r3
   27bd8:	ldr	r7, [sp, #44]	; 0x2c
   27bdc:	clz	r3, r3
   27be0:	lsr	r3, r3, #5
   27be4:	ands	r2, r3, r2
   27be8:	bne	27434 <__assert_fail@plt+0x14878>
   27bec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   27bf0:	mov	r2, #0
   27bf4:	cmn	r0, #1
   27bf8:	mov	r7, #0
   27bfc:	str	r2, [sp, #60]	; 0x3c
   27c00:	mov	r2, #0
   27c04:	movwgt	r2, #1
   27c08:	adds	r1, r1, r3
   27c0c:	adc	r0, r0, r3, asr #31
   27c10:	asr	r3, r3, #31
   27c14:	str	r1, [fp, #-64]	; 0xffffffc0
   27c18:	cmn	r0, #1
   27c1c:	movwgt	r7, #1
   27c20:	subs	r7, r2, r7
   27c24:	movwne	r7, #1
   27c28:	cmn	r3, #1
   27c2c:	mov	r3, #0
   27c30:	movwgt	r3, #1
   27c34:	sub	r2, r2, r3
   27c38:	clz	r2, r2
   27c3c:	lsr	r2, r2, #5
   27c40:	tst	r2, r7
   27c44:	asreq	r2, r1, #31
   27c48:	eoreq	r1, r1, r1
   27c4c:	eoreq	r0, r0, r2
   27c50:	orrseq	r0, r1, r0
   27c54:	bne	2762c <__assert_fail@plt+0x14a70>
   27c58:	mvn	r0, #0
   27c5c:	sub	r1, fp, #76	; 0x4c
   27c60:	str	r0, [fp, #-44]	; 0xffffffd4
   27c64:	ldr	r0, [sp, #56]	; 0x38
   27c68:	bl	3c370 <__assert_fail@plt+0x297b4>
   27c6c:	ldr	r7, [sp, #44]	; 0x2c
   27c70:	mov	lr, r0
   27c74:	cmn	r0, #1
   27c78:	beq	27434 <__assert_fail@plt+0x14878>
   27c7c:	ldr	r0, [sp, #16]
   27c80:	ldr	r6, [sp, #216]	; 0xd8
   27c84:	ldr	r3, [sp, #220]	; 0xdc
   27c88:	ldr	ip, [sp, #224]	; 0xe0
   27c8c:	ldrd	r4, [r0]
   27c90:	ldr	r0, [sp, #228]	; 0xe4
   27c94:	orr	r1, r3, r5
   27c98:	orr	r7, r6, r4
   27c9c:	orr	r1, r1, r0
   27ca0:	orr	r7, r7, ip
   27ca4:	orrs	r1, r7, r1
   27ca8:	ldr	r7, [sp, #44]	; 0x2c
   27cac:	beq	27e3c <__assert_fail@plt+0x15280>
   27cb0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27cb4:	mov	r2, #0
   27cb8:	str	r2, [sp, #60]	; 0x3c
   27cbc:	mov	r2, #0
   27cc0:	asr	r7, r1, #31
   27cc4:	cmn	r7, #1
   27cc8:	movwgt	r2, #1
   27ccc:	adds	r1, r1, r4
   27cd0:	adc	r4, r7, r5
   27cd4:	mov	r7, #0
   27cd8:	cmn	r4, #1
   27cdc:	movwgt	r7, #1
   27ce0:	subs	r7, r2, r7
   27ce4:	movwne	r7, #1
   27ce8:	cmn	r5, #1
   27cec:	mov	r5, #0
   27cf0:	movwgt	r5, #1
   27cf4:	sub	r2, r2, r5
   27cf8:	clz	r2, r2
   27cfc:	lsr	r2, r2, #5
   27d00:	tst	r2, r7
   27d04:	bne	2762c <__assert_fail@plt+0x14a70>
   27d08:	asr	r2, r1, #31
   27d0c:	eor	r7, r1, r1
   27d10:	eor	r2, r4, r2
   27d14:	orrs	r2, r7, r2
   27d18:	ldr	r7, [sp, #44]	; 0x2c
   27d1c:	bne	27434 <__assert_fail@plt+0x14878>
   27d20:	ldr	r2, [fp, #-60]	; 0xffffffc4
   27d24:	mov	r4, #0
   27d28:	mov	r5, #0
   27d2c:	str	r5, [sp, #60]	; 0x3c
   27d30:	asr	r7, r2, #31
   27d34:	cmn	r7, #1
   27d38:	movwgt	r4, #1
   27d3c:	adds	r6, r2, r6
   27d40:	mov	r2, #0
   27d44:	adc	r5, r7, r3
   27d48:	cmn	r5, #1
   27d4c:	movwgt	r2, #1
   27d50:	subs	r2, r4, r2
   27d54:	movwne	r2, #1
   27d58:	cmn	r3, #1
   27d5c:	mov	r3, #0
   27d60:	movwgt	r3, #1
   27d64:	sub	r3, r4, r3
   27d68:	clz	r3, r3
   27d6c:	lsr	r3, r3, #5
   27d70:	tst	r3, r2
   27d74:	bne	2762c <__assert_fail@plt+0x14a70>
   27d78:	ldr	r7, [sp, #44]	; 0x2c
   27d7c:	asr	r2, r6, #31
   27d80:	eor	r3, r6, r6
   27d84:	eor	r2, r5, r2
   27d88:	orrs	r2, r3, r2
   27d8c:	bne	27434 <__assert_fail@plt+0x14878>
   27d90:	ldr	r2, [fp, #-64]	; 0xffffffc0
   27d94:	mov	r7, #0
   27d98:	mov	r5, #0
   27d9c:	str	r7, [sp, #60]	; 0x3c
   27da0:	mov	r7, #0
   27da4:	asr	r3, r2, #31
   27da8:	cmn	r3, #1
   27dac:	movwgt	r7, #1
   27db0:	adds	r2, r2, ip
   27db4:	adc	r3, r3, r0
   27db8:	cmn	r3, #1
   27dbc:	movwgt	r5, #1
   27dc0:	subs	r5, r7, r5
   27dc4:	movwne	r5, #1
   27dc8:	cmn	r0, #1
   27dcc:	mov	r0, #0
   27dd0:	movwgt	r0, #1
   27dd4:	sub	r0, r7, r0
   27dd8:	clz	r0, r0
   27ddc:	lsr	r0, r0, #5
   27de0:	tst	r0, r5
   27de4:	asreq	r0, r2, #31
   27de8:	eoreq	r7, r2, r2
   27dec:	eoreq	r0, r3, r0
   27df0:	orrseq	r0, r7, r0
   27df4:	bne	2762c <__assert_fail@plt+0x14a70>
   27df8:	ldr	r0, [sp, #36]	; 0x24
   27dfc:	str	r6, [fp, #-60]	; 0xffffffc4
   27e00:	str	r1, [fp, #-56]	; 0xffffffc8
   27e04:	str	r2, [fp, #-64]	; 0xffffffc0
   27e08:	str	r8, [fp, #-68]	; 0xffffffbc
   27e0c:	sub	r1, fp, #76	; 0x4c
   27e10:	str	r0, [fp, #-72]	; 0xffffffb8
   27e14:	ldr	r0, [sp, #28]
   27e18:	str	r0, [fp, #-76]	; 0xffffffb4
   27e1c:	ldr	r0, [sp, #32]
   27e20:	str	r0, [fp, #-44]	; 0xffffffd4
   27e24:	ldr	r0, [sp, #56]	; 0x38
   27e28:	bl	3c370 <__assert_fail@plt+0x297b4>
   27e2c:	ldr	r7, [sp, #44]	; 0x2c
   27e30:	mov	lr, r0
   27e34:	cmn	r0, #1
   27e38:	beq	27434 <__assert_fail@plt+0x14878>
   27e3c:	ldr	r0, [sp, #288]	; 0x120
   27e40:	cmp	r0, #0
   27e44:	beq	27e78 <__assert_fail@plt+0x152bc>
   27e48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   27e4c:	ldr	r2, [sp, #136]	; 0x88
   27e50:	asr	r1, r0, #31
   27e54:	subs	r0, r0, r2
   27e58:	sbc	r1, r1, r2, asr #31
   27e5c:	adds	sl, r0, lr
   27e60:	adc	r0, r1, lr, asr #31
   27e64:	teq	r0, sl, asr #31
   27e68:	mov	r0, #0
   27e6c:	str	r0, [sp, #60]	; 0x3c
   27e70:	bne	27434 <__assert_fail@plt+0x14878>
   27e74:	b	27e7c <__assert_fail@plt+0x152c0>
   27e78:	mov	sl, lr
   27e7c:	ldr	r1, [sp, #256]	; 0x100
   27e80:	ldr	r0, [sp, #204]	; 0xcc
   27e84:	movw	r5, #51712	; 0xca00
   27e88:	ldr	r8, [sp, #232]	; 0xe8
   27e8c:	ldr	r9, [sp, #236]	; 0xec
   27e90:	mov	r3, #0
   27e94:	movt	r5, #15258	; 0x3b9a
   27e98:	asr	r2, r1, #31
   27e9c:	adds	r4, r1, r0
   27ea0:	adc	r6, r2, r0, asr #31
   27ea4:	mov	r0, #0
   27ea8:	mov	r2, r5
   27eac:	str	r0, [sp, #60]	; 0x3c
   27eb0:	mov	r0, r4
   27eb4:	mov	r1, r6
   27eb8:	bl	3d400 <__assert_fail@plt+0x2a844>
   27ebc:	adds	r0, r2, r5
   27ec0:	mov	r2, r5
   27ec4:	adc	r1, r3, #0
   27ec8:	mov	r3, #0
   27ecc:	bl	3d400 <__assert_fail@plt+0x2a844>
   27ed0:	subs	r0, r4, r2
   27ed4:	mov	r4, r9
   27ed8:	mov	r9, r2
   27edc:	mov	r3, #0
   27ee0:	sbc	r1, r6, r2, asr #31
   27ee4:	mov	r2, r5
   27ee8:	bl	3d400 <__assert_fail@plt+0x2a844>
   27eec:	cmn	r4, #1
   27ef0:	str	r0, [sp, #40]	; 0x28
   27ef4:	str	r1, [sp, #36]	; 0x24
   27ef8:	ble	27f1c <__assert_fail@plt+0x15360>
   27efc:	movw	r1, #24175	; 0x5e6f
   27f00:	movw	r0, #6699	; 0x1a2b
   27f04:	movt	r1, #15437	; 0x3c4d
   27f08:	movt	r0, #9
   27f0c:	subs	r1, r1, r8
   27f10:	sbcs	r0, r0, r4
   27f14:	blt	27434 <__assert_fail@plt+0x14878>
   27f18:	b	27f58 <__assert_fail@plt+0x1539c>
   27f1c:	mvn	r1, #0
   27f20:	eor	r0, r8, r1
   27f24:	eor	r1, r4, r1
   27f28:	orrs	r0, r0, r1
   27f2c:	beq	27f58 <__assert_fail@plt+0x1539c>
   27f30:	mov	r0, #0
   27f34:	mov	r1, #-2147483648	; 0x80000000
   27f38:	mov	r2, r8
   27f3c:	mov	r3, r4
   27f40:	str	r0, [sp, #60]	; 0x3c
   27f44:	mov	r0, #0
   27f48:	bl	3d400 <__assert_fail@plt+0x2a844>
   27f4c:	subs	r0, r0, #3600	; 0xe10
   27f50:	sbcs	r0, r1, #0
   27f54:	blt	27434 <__assert_fail@plt+0x14878>
   27f58:	mov	r0, #3600	; 0xe10
   27f5c:	umull	r1, r2, r8, r0
   27f60:	mla	r0, r4, r0, r2
   27f64:	adds	r8, sl, r1
   27f68:	asr	r2, sl, #31
   27f6c:	mov	r1, #0
   27f70:	adc	r5, r2, r0
   27f74:	str	r1, [sp, #60]	; 0x3c
   27f78:	mov	r1, #0
   27f7c:	cmn	r5, #1
   27f80:	movwgt	r1, #1
   27f84:	cmn	r2, #1
   27f88:	mov	r2, #0
   27f8c:	movwgt	r2, #1
   27f90:	subs	r1, r2, r1
   27f94:	movwne	r1, #1
   27f98:	cmn	r0, #1
   27f9c:	mov	r0, #0
   27fa0:	movwgt	r0, #1
   27fa4:	sub	r0, r2, r0
   27fa8:	clz	r0, r0
   27fac:	lsr	r0, r0, #5
   27fb0:	tst	r0, r1
   27fb4:	bne	2762c <__assert_fail@plt+0x14a70>
   27fb8:	ldr	r6, [sp, #244]	; 0xf4
   27fbc:	ldr	r4, [sp, #240]	; 0xf0
   27fc0:	cmn	r6, #1
   27fc4:	ble	27fec <__assert_fail@plt+0x15430>
   27fc8:	movw	r1, #8738	; 0x2222
   27fcc:	ldr	r7, [sp, #44]	; 0x2c
   27fd0:	movw	r0, #8738	; 0x2222
   27fd4:	movt	r1, #8738	; 0x2222
   27fd8:	movt	r0, #546	; 0x222
   27fdc:	subs	r1, r1, r4
   27fe0:	sbcs	r0, r0, r6
   27fe4:	blt	27434 <__assert_fail@plt+0x14878>
   27fe8:	b	2802c <__assert_fail@plt+0x15470>
   27fec:	ldr	r7, [sp, #44]	; 0x2c
   27ff0:	mvn	r1, #0
   27ff4:	eor	r0, r4, r1
   27ff8:	eor	r1, r6, r1
   27ffc:	orrs	r0, r0, r1
   28000:	beq	2802c <__assert_fail@plt+0x15470>
   28004:	mov	r0, #0
   28008:	mov	r1, #-2147483648	; 0x80000000
   2800c:	mov	r2, r4
   28010:	mov	r3, r6
   28014:	str	r0, [sp, #60]	; 0x3c
   28018:	mov	r0, #0
   2801c:	bl	3d400 <__assert_fail@plt+0x2a844>
   28020:	subs	r0, r0, #60	; 0x3c
   28024:	sbcs	r0, r1, #0
   28028:	blt	27434 <__assert_fail@plt+0x14878>
   2802c:	mov	r0, #60	; 0x3c
   28030:	rsb	r2, r6, r6, lsl #4
   28034:	mov	r3, #0
   28038:	mov	r7, #0
   2803c:	umull	r0, r1, r4, r0
   28040:	str	r3, [sp, #60]	; 0x3c
   28044:	mov	r3, #0
   28048:	add	r2, r1, r2, lsl #2
   2804c:	adds	r0, r8, r0
   28050:	adc	r1, r5, r2
   28054:	cmn	r1, #1
   28058:	movwgt	r3, #1
   2805c:	cmn	r5, #1
   28060:	movwgt	r7, #1
   28064:	subs	r3, r7, r3
   28068:	movwne	r3, #1
   2806c:	cmn	r2, #1
   28070:	mov	r2, #0
   28074:	movwgt	r2, #1
   28078:	sub	r2, r7, r2
   2807c:	ldr	r7, [sp, #44]	; 0x2c
   28080:	clz	r2, r2
   28084:	lsr	r2, r2, #5
   28088:	ands	r2, r2, r3
   2808c:	bne	27434 <__assert_fail@plt+0x14878>
   28090:	ldr	r3, [sp, #248]	; 0xf8
   28094:	ldr	r7, [sp, #252]	; 0xfc
   28098:	mov	r2, #0
   2809c:	cmn	r1, #1
   280a0:	str	r2, [sp, #60]	; 0x3c
   280a4:	mov	r2, #0
   280a8:	movwgt	r2, #1
   280ac:	adds	r0, r0, r3
   280b0:	mov	r3, #0
   280b4:	adc	r1, r1, r7
   280b8:	cmn	r1, #1
   280bc:	movwgt	r3, #1
   280c0:	subs	r3, r2, r3
   280c4:	movwne	r3, #1
   280c8:	cmn	r7, #1
   280cc:	mov	r7, #0
   280d0:	movwgt	r7, #1
   280d4:	sub	r2, r2, r7
   280d8:	ldr	r7, [sp, #44]	; 0x2c
   280dc:	clz	r2, r2
   280e0:	lsr	r2, r2, #5
   280e4:	ands	r2, r2, r3
   280e8:	bne	27434 <__assert_fail@plt+0x14878>
   280ec:	ldr	r3, [sp, #40]	; 0x28
   280f0:	ldr	r7, [sp, #36]	; 0x24
   280f4:	mov	r2, #0
   280f8:	cmn	r1, #1
   280fc:	str	r2, [sp, #60]	; 0x3c
   28100:	mov	r2, #0
   28104:	movwgt	r2, #1
   28108:	adds	r0, r0, r3
   2810c:	mov	r3, #0
   28110:	adc	r1, r1, r7
   28114:	cmn	r1, #1
   28118:	movwgt	r3, #1
   2811c:	subs	r3, r2, r3
   28120:	movwne	r3, #1
   28124:	cmn	r7, #1
   28128:	mov	r7, #0
   2812c:	movwgt	r7, #1
   28130:	sub	r2, r2, r7
   28134:	clz	r2, r2
   28138:	lsr	r2, r2, #5
   2813c:	tst	r2, r3
   28140:	bne	2762c <__assert_fail@plt+0x14a70>
   28144:	ldr	r7, [sp, #44]	; 0x2c
   28148:	asr	r2, r0, #31
   2814c:	eor	r3, r0, r0
   28150:	eor	r1, r1, r2
   28154:	orrs	r1, r3, r1
   28158:	bne	27434 <__assert_fail@plt+0x14878>
   2815c:	ldr	r1, [sp, #48]	; 0x30
   28160:	stm	r1, {r0, r9}
   28164:	b	2742c <__assert_fail@plt+0x14870>
   28168:	push	{r4, r5, r6, sl, fp, lr}
   2816c:	add	fp, sp, #16
   28170:	movw	r5, #11220	; 0x2bd4
   28174:	mov	r4, r1
   28178:	movw	r1, #12086	; 0x2f36
   2817c:	mov	r6, r0
   28180:	movt	r5, #4
   28184:	movt	r1, #4
   28188:	mov	r0, r4
   2818c:	bl	124cc <strcmp@plt>
   28190:	cmp	r0, #0
   28194:	beq	28208 <__assert_fail@plt+0x1564c>
   28198:	ldr	r1, [r5, #12]!
   2819c:	cmp	r1, #0
   281a0:	bne	28188 <__assert_fail@plt+0x155cc>
   281a4:	ldr	r1, [r6, #188]	; 0xbc
   281a8:	cmp	r1, #0
   281ac:	beq	281d0 <__assert_fail@plt+0x15614>
   281b0:	add	r5, r6, #200	; 0xc8
   281b4:	mov	r0, r4
   281b8:	bl	124cc <strcmp@plt>
   281bc:	cmp	r0, #0
   281c0:	beq	28204 <__assert_fail@plt+0x15648>
   281c4:	ldr	r1, [r5], #12
   281c8:	cmp	r1, #0
   281cc:	bne	281b4 <__assert_fail@plt+0x155f8>
   281d0:	movw	r5, #11268	; 0x2c04
   281d4:	movw	r1, #12097	; 0x2f41
   281d8:	movt	r5, #4
   281dc:	movt	r1, #4
   281e0:	mov	r0, r4
   281e4:	bl	124cc <strcmp@plt>
   281e8:	cmp	r0, #0
   281ec:	beq	28208 <__assert_fail@plt+0x1564c>
   281f0:	ldr	r1, [r5, #12]!
   281f4:	cmp	r1, #0
   281f8:	bne	281e0 <__assert_fail@plt+0x15624>
   281fc:	mov	r5, #0
   28200:	b	28208 <__assert_fail@plt+0x1564c>
   28204:	sub	r5, r5, #12
   28208:	mov	r0, r5
   2820c:	pop	{r4, r5, r6, sl, fp, pc}
   28210:	push	{r4, r5, fp, lr}
   28214:	add	fp, sp, #8
   28218:	cmp	r0, #0
   2821c:	beq	282b0 <__assert_fail@plt+0x156f4>
   28220:	mov	r1, #47	; 0x2f
   28224:	mov	r4, r0
   28228:	bl	12a18 <strrchr@plt>
   2822c:	cmp	r0, #0
   28230:	mov	r5, r4
   28234:	addne	r5, r0, #1
   28238:	sub	r0, r5, r4
   2823c:	cmp	r0, #7
   28240:	blt	28294 <__assert_fail@plt+0x156d8>
   28244:	movw	r1, #12540	; 0x30fc
   28248:	sub	r0, r5, #7
   2824c:	mov	r2, #7
   28250:	movt	r1, #4
   28254:	bl	12b5c <strncmp@plt>
   28258:	cmp	r0, #0
   2825c:	bne	28294 <__assert_fail@plt+0x156d8>
   28260:	movw	r1, #12548	; 0x3104
   28264:	mov	r0, r5
   28268:	mov	r2, #3
   2826c:	movt	r1, #4
   28270:	bl	12b5c <strncmp@plt>
   28274:	cmp	r0, #0
   28278:	beq	28284 <__assert_fail@plt+0x156c8>
   2827c:	mov	r4, r5
   28280:	b	28294 <__assert_fail@plt+0x156d8>
   28284:	movw	r0, #17744	; 0x4550
   28288:	add	r4, r5, #3
   2828c:	movt	r0, #5
   28290:	str	r4, [r0]
   28294:	movw	r0, #17752	; 0x4558
   28298:	movt	r0, #5
   2829c:	str	r4, [r0]
   282a0:	movw	r0, #19740	; 0x4d1c
   282a4:	movt	r0, #5
   282a8:	str	r4, [r0]
   282ac:	pop	{r4, r5, fp, pc}
   282b0:	movw	r0, #17760	; 0x4560
   282b4:	movt	r0, #5
   282b8:	ldr	r1, [r0]
   282bc:	movw	r0, #12484	; 0x30c4
   282c0:	movt	r0, #4
   282c4:	bl	12b50 <fputs@plt>
   282c8:	bl	12b68 <abort@plt>
   282cc:	push	{r4, r5, r6, sl, fp, lr}
   282d0:	add	fp, sp, #16
   282d4:	mov	r4, r0
   282d8:	movw	r0, #19744	; 0x4d20
   282dc:	movt	r0, #5
   282e0:	cmp	r4, #0
   282e4:	moveq	r4, r0
   282e8:	bl	128d4 <__errno_location@plt>
   282ec:	ldr	r6, [r0]
   282f0:	mov	r5, r0
   282f4:	mov	r0, r4
   282f8:	mov	r1, #48	; 0x30
   282fc:	bl	2ad30 <__assert_fail@plt+0x18174>
   28300:	str	r6, [r5]
   28304:	pop	{r4, r5, r6, sl, fp, pc}
   28308:	movw	r1, #19744	; 0x4d20
   2830c:	cmp	r0, #0
   28310:	movt	r1, #5
   28314:	movne	r1, r0
   28318:	ldr	r0, [r1]
   2831c:	bx	lr
   28320:	movw	r2, #19744	; 0x4d20
   28324:	cmp	r0, #0
   28328:	movt	r2, #5
   2832c:	movne	r2, r0
   28330:	str	r1, [r2]
   28334:	bx	lr
   28338:	movw	r3, #19744	; 0x4d20
   2833c:	cmp	r0, #0
   28340:	movt	r3, #5
   28344:	movne	r3, r0
   28348:	ubfx	r0, r1, #5, #3
   2834c:	and	r1, r1, #31
   28350:	add	r0, r3, r0, lsl #2
   28354:	ldr	r3, [r0, #8]
   28358:	eor	r2, r2, r3, lsr r1
   2835c:	and	r2, r2, #1
   28360:	eor	r2, r3, r2, lsl r1
   28364:	str	r2, [r0, #8]
   28368:	mov	r0, #1
   2836c:	and	r0, r0, r3, lsr r1
   28370:	bx	lr
   28374:	movw	r2, #19744	; 0x4d20
   28378:	cmp	r0, #0
   2837c:	movt	r2, #5
   28380:	movne	r2, r0
   28384:	ldr	r0, [r2, #4]
   28388:	str	r1, [r2, #4]
   2838c:	bx	lr
   28390:	movw	r3, #19744	; 0x4d20
   28394:	cmp	r0, #0
   28398:	movt	r3, #5
   2839c:	movne	r3, r0
   283a0:	cmp	r1, #0
   283a4:	mov	r0, #10
   283a8:	cmpne	r2, #0
   283ac:	str	r0, [r3]
   283b0:	bne	283c0 <__assert_fail@plt+0x15804>
   283b4:	push	{fp, lr}
   283b8:	mov	fp, sp
   283bc:	bl	12b68 <abort@plt>
   283c0:	str	r1, [r3, #40]	; 0x28
   283c4:	str	r2, [r3, #44]	; 0x2c
   283c8:	bx	lr
   283cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283d0:	add	fp, sp, #28
   283d4:	sub	sp, sp, #20
   283d8:	mov	r7, r0
   283dc:	ldr	r0, [fp, #8]
   283e0:	movw	r5, #19744	; 0x4d20
   283e4:	mov	r8, r3
   283e8:	mov	r9, r2
   283ec:	mov	sl, r1
   283f0:	movt	r5, #5
   283f4:	cmp	r0, #0
   283f8:	movne	r5, r0
   283fc:	bl	128d4 <__errno_location@plt>
   28400:	mov	r4, r0
   28404:	ldm	r5, {r0, r1}
   28408:	ldr	r2, [r5, #40]	; 0x28
   2840c:	ldr	r3, [r5, #44]	; 0x2c
   28410:	add	r5, r5, #8
   28414:	ldr	r6, [r4]
   28418:	stm	sp, {r0, r1, r5}
   2841c:	str	r2, [sp, #12]
   28420:	str	r3, [sp, #16]
   28424:	mov	r0, r7
   28428:	mov	r1, sl
   2842c:	mov	r2, r9
   28430:	mov	r3, r8
   28434:	bl	28444 <__assert_fail@plt+0x15888>
   28438:	str	r6, [r4]
   2843c:	sub	sp, fp, #28
   28440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28448:	add	fp, sp, #28
   2844c:	sub	sp, sp, #156	; 0x9c
   28450:	str	r0, [fp, #-56]	; 0xffffffc8
   28454:	ldr	r0, [fp, #12]
   28458:	mov	r4, r1
   2845c:	str	r3, [sp, #80]	; 0x50
   28460:	str	r2, [fp, #-84]	; 0xffffffac
   28464:	and	r1, r0, #4
   28468:	str	r1, [sp, #24]
   2846c:	and	r1, r0, #1
   28470:	str	r1, [sp, #28]
   28474:	ubfx	r7, r0, #1, #1
   28478:	bl	12730 <__ctype_get_mb_cur_max@plt>
   2847c:	str	r0, [sp, #32]
   28480:	ldr	r0, [fp, #24]
   28484:	ldr	r9, [fp, #8]
   28488:	mov	r2, #0
   2848c:	mov	r1, #0
   28490:	mov	r5, #0
   28494:	str	r2, [sp, #52]	; 0x34
   28498:	mov	r2, #1
   2849c:	str	r0, [sp, #72]	; 0x48
   284a0:	ldr	r0, [fp, #20]
   284a4:	str	r0, [sp, #64]	; 0x40
   284a8:	mov	r0, #0
   284ac:	str	r0, [sp, #92]	; 0x5c
   284b0:	mov	r0, #0
   284b4:	str	r0, [fp, #-76]	; 0xffffffb4
   284b8:	mov	r0, #0
   284bc:	cmp	r9, #10
   284c0:	str	r1, [sp, #68]	; 0x44
   284c4:	bhi	294c4 <__assert_fail@plt+0x16908>
   284c8:	add	r1, pc, #28
   284cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   284d0:	ldr	lr, [sp, #80]	; 0x50
   284d4:	mov	r6, r4
   284d8:	mov	r8, #0
   284dc:	mov	r3, #1
   284e0:	mov	sl, #0
   284e4:	mov	r4, r2
   284e8:	ldr	pc, [r1, r9, lsl #2]
   284ec:			; <UNDEFINED> instruction: 0x000285bc
   284f0:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   284f4:	andeq	r8, r2, ip, asr #11
   284f8:			; <UNDEFINED> instruction: 0x000285b4
   284fc:	andeq	r8, r2, ip, ror #11
   28500:	andeq	r8, r2, r4, asr #12
   28504:	ldrdeq	r8, [r2], -ip
   28508:	andeq	r8, r2, r4, lsr #13
   2850c:	andeq	r8, r2, r8, lsl r5
   28510:	andeq	r8, r2, r8, lsl r5
   28514:	andeq	r8, r2, r0, asr #10
   28518:	movw	r0, #12628	; 0x3154
   2851c:	mov	r1, r9
   28520:	movt	r0, #4
   28524:	bl	29c2c <__assert_fail@plt+0x17070>
   28528:	str	r0, [sp, #64]	; 0x40
   2852c:	movw	r0, #65000	; 0xfde8
   28530:	mov	r1, r9
   28534:	movt	r0, #3
   28538:	bl	29c2c <__assert_fail@plt+0x17070>
   2853c:	str	r0, [sp, #72]	; 0x48
   28540:	mov	r8, #0
   28544:	mov	sl, r7
   28548:	tst	r7, #1
   2854c:	str	r5, [fp, #-48]	; 0xffffffd0
   28550:	bne	2858c <__assert_fail@plt+0x159d0>
   28554:	ldr	r0, [sp, #64]	; 0x40
   28558:	ldrb	r0, [r0]
   2855c:	cmp	r0, #0
   28560:	beq	2858c <__assert_fail@plt+0x159d0>
   28564:	ldr	r1, [sp, #64]	; 0x40
   28568:	mov	r8, #0
   2856c:	add	r1, r1, #1
   28570:	cmp	r8, r6
   28574:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   28578:	strbcc	r0, [r2, r8]
   2857c:	ldrb	r0, [r1, r8]
   28580:	add	r8, r8, #1
   28584:	cmp	r0, #0
   28588:	bne	28570 <__assert_fail@plt+0x159b4>
   2858c:	ldr	r7, [sp, #72]	; 0x48
   28590:	mov	r0, r7
   28594:	bl	1288c <strlen@plt>
   28598:	ldr	ip, [fp, #-84]	; 0xffffffac
   2859c:	ldr	lr, [sp, #80]	; 0x50
   285a0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   285a4:	str	r0, [fp, #-76]	; 0xffffffb4
   285a8:	str	r7, [sp, #92]	; 0x5c
   285ac:	mov	r3, #1
   285b0:	b	286a4 <__assert_fail@plt+0x15ae8>
   285b4:	mov	r0, #1
   285b8:	b	285f8 <__assert_fail@plt+0x15a3c>
   285bc:	mov	r9, #0
   285c0:	mov	r8, #0
   285c4:	mov	r3, r0
   285c8:	b	286a0 <__assert_fail@plt+0x15ae4>
   285cc:	tst	r7, #1
   285d0:	bne	285f8 <__assert_fail@plt+0x15a3c>
   285d4:	mov	r3, r0
   285d8:	b	28620 <__assert_fail@plt+0x15a64>
   285dc:	mov	r0, #1
   285e0:	mov	r8, #0
   285e4:	mov	r9, #5
   285e8:	b	28658 <__assert_fail@plt+0x15a9c>
   285ec:	mov	r3, #1
   285f0:	tst	r7, #1
   285f4:	beq	28620 <__assert_fail@plt+0x15a64>
   285f8:	mov	r1, #1
   285fc:	mov	r8, #0
   28600:	mov	r9, #2
   28604:	mov	r3, r0
   28608:	mov	sl, #1
   2860c:	str	r1, [fp, #-76]	; 0xffffffb4
   28610:	movw	r1, #65000	; 0xfde8
   28614:	movt	r1, #3
   28618:	str	r1, [sp, #92]	; 0x5c
   2861c:	b	286a4 <__assert_fail@plt+0x15ae8>
   28620:	cmp	r6, #0
   28624:	mov	r8, #1
   28628:	mov	r9, #2
   2862c:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   28630:	movne	r0, #39	; 0x27
   28634:	strbne	r0, [r1]
   28638:	movw	r0, #65000	; 0xfde8
   2863c:	movt	r0, #3
   28640:	b	28694 <__assert_fail@plt+0x15ad8>
   28644:	mov	r9, #5
   28648:	tst	r7, #1
   2864c:	beq	28674 <__assert_fail@plt+0x15ab8>
   28650:	mov	r0, #1
   28654:	mov	r8, #0
   28658:	str	r0, [fp, #-76]	; 0xffffffb4
   2865c:	movw	r0, #12482	; 0x30c2
   28660:	mov	r3, #1
   28664:	mov	sl, #1
   28668:	movt	r0, #4
   2866c:	str	r0, [sp, #92]	; 0x5c
   28670:	b	286a4 <__assert_fail@plt+0x15ae8>
   28674:	cmp	r6, #0
   28678:	mov	r8, #1
   2867c:	mov	r3, #1
   28680:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   28684:	movne	r0, #34	; 0x22
   28688:	strbne	r0, [r1]
   2868c:	movw	r0, #12482	; 0x30c2
   28690:	movt	r0, #4
   28694:	str	r0, [sp, #92]	; 0x5c
   28698:	mov	r0, #1
   2869c:	str	r0, [fp, #-76]	; 0xffffffb4
   286a0:	mov	sl, #0
   286a4:	ldr	r0, [fp, #16]
   286a8:	mov	r7, #0
   286ac:	str	r9, [fp, #-64]	; 0xffffffc0
   286b0:	str	sl, [fp, #-72]	; 0xffffffb8
   286b4:	str	r3, [sp, #84]	; 0x54
   286b8:	cmp	r0, #0
   286bc:	movwne	r0, #1
   286c0:	and	r0, r0, sl
   286c4:	str	r0, [fp, #-88]	; 0xffffffa8
   286c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   286cc:	cmp	r0, #0
   286d0:	movwne	r0, #1
   286d4:	subs	r2, r9, #2
   286d8:	and	r1, r0, sl
   286dc:	str	r2, [fp, #-80]	; 0xffffffb0
   286e0:	and	r1, r3, r1
   286e4:	str	r1, [sp, #44]	; 0x2c
   286e8:	clz	r1, r2
   286ec:	lsr	r1, r1, #5
   286f0:	and	r1, r1, sl
   286f4:	str	r1, [sp, #56]	; 0x38
   286f8:	mov	r1, r2
   286fc:	eor	r2, sl, #1
   28700:	movwne	r1, #1
   28704:	str	r2, [sp, #88]	; 0x58
   28708:	orr	r2, r1, r2
   2870c:	and	r1, r1, r3
   28710:	and	r0, r0, r1
   28714:	str	r2, [sp, #60]	; 0x3c
   28718:	str	r1, [fp, #-68]	; 0xffffffbc
   2871c:	str	r0, [fp, #-60]	; 0xffffffc4
   28720:	eor	r0, r3, #1
   28724:	str	r0, [sp, #48]	; 0x30
   28728:	cmn	lr, #1
   2872c:	beq	2873c <__assert_fail@plt+0x15b80>
   28730:	cmp	r7, lr
   28734:	bne	28748 <__assert_fail@plt+0x15b8c>
   28738:	b	292f4 <__assert_fail@plt+0x16738>
   2873c:	ldrb	r0, [ip, r7]
   28740:	cmp	r0, #0
   28744:	beq	292fc <__assert_fail@plt+0x16740>
   28748:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2874c:	mov	r9, #0
   28750:	str	r5, [fp, #-48]	; 0xffffffd0
   28754:	str	r6, [fp, #-52]	; 0xffffffcc
   28758:	cmp	r0, #0
   2875c:	beq	2879c <__assert_fail@plt+0x15be0>
   28760:	ldr	r0, [fp, #-76]	; 0xffffffb4
   28764:	mov	r5, r4
   28768:	add	r4, r7, r0
   2876c:	cmp	r0, #2
   28770:	bcc	2878c <__assert_fail@plt+0x15bd0>
   28774:	cmn	lr, #1
   28778:	bne	2878c <__assert_fail@plt+0x15bd0>
   2877c:	mov	r0, ip
   28780:	bl	1288c <strlen@plt>
   28784:	ldr	ip, [fp, #-84]	; 0xffffffac
   28788:	mov	lr, r0
   2878c:	cmp	r4, lr
   28790:	bls	287a4 <__assert_fail@plt+0x15be8>
   28794:	mov	r6, #0
   28798:	b	287e4 <__assert_fail@plt+0x15c28>
   2879c:	mov	r6, #0
   287a0:	b	287e8 <__assert_fail@plt+0x15c2c>
   287a4:	ldr	r1, [sp, #92]	; 0x5c
   287a8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   287ac:	add	r0, ip, r7
   287b0:	mov	r4, lr
   287b4:	bl	12628 <memcmp@plt>
   287b8:	ldr	r2, [sp, #88]	; 0x58
   287bc:	cmp	r0, #0
   287c0:	mov	r1, r0
   287c4:	movwne	r1, #1
   287c8:	orr	r1, r1, r2
   287cc:	tst	r1, #1
   287d0:	beq	29390 <__assert_fail@plt+0x167d4>
   287d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   287d8:	clz	r0, r0
   287dc:	mov	lr, r4
   287e0:	lsr	r6, r0, #5
   287e4:	mov	r4, r5
   287e8:	ldrb	r5, [ip, r7]
   287ec:	cmp	r5, #126	; 0x7e
   287f0:	bhi	28bb8 <__assert_fail@plt+0x15ffc>
   287f4:	add	r3, pc, #16
   287f8:	mov	sl, #1
   287fc:	mov	r2, #110	; 0x6e
   28800:	mov	r0, #97	; 0x61
   28804:	mov	r1, #0
   28808:	ldr	pc, [r3, r5, lsl #2]
   2880c:	muleq	r2, ip, sl
   28810:			; <UNDEFINED> instruction: 0x00028bb8
   28814:			; <UNDEFINED> instruction: 0x00028bb8
   28818:			; <UNDEFINED> instruction: 0x00028bb8
   2881c:			; <UNDEFINED> instruction: 0x00028bb8
   28820:			; <UNDEFINED> instruction: 0x00028bb8
   28824:			; <UNDEFINED> instruction: 0x00028bb8
   28828:	andeq	r8, r2, ip, asr ip
   2882c:	andeq	r8, r2, ip, ror sl
   28830:	andeq	r8, r2, r4, ror sl
   28834:	andeq	r8, r2, r8, lsl #21
   28838:	andeq	r8, r2, ip, lsl #22
   2883c:	andeq	r8, r2, ip, ror #20
   28840:	andeq	r8, r2, r4, lsl #21
   28844:			; <UNDEFINED> instruction: 0x00028bb8
   28848:			; <UNDEFINED> instruction: 0x00028bb8
   2884c:			; <UNDEFINED> instruction: 0x00028bb8
   28850:			; <UNDEFINED> instruction: 0x00028bb8
   28854:			; <UNDEFINED> instruction: 0x00028bb8
   28858:			; <UNDEFINED> instruction: 0x00028bb8
   2885c:			; <UNDEFINED> instruction: 0x00028bb8
   28860:			; <UNDEFINED> instruction: 0x00028bb8
   28864:			; <UNDEFINED> instruction: 0x00028bb8
   28868:			; <UNDEFINED> instruction: 0x00028bb8
   2886c:			; <UNDEFINED> instruction: 0x00028bb8
   28870:			; <UNDEFINED> instruction: 0x00028bb8
   28874:			; <UNDEFINED> instruction: 0x00028bb8
   28878:			; <UNDEFINED> instruction: 0x00028bb8
   2887c:			; <UNDEFINED> instruction: 0x00028bb8
   28880:			; <UNDEFINED> instruction: 0x00028bb8
   28884:			; <UNDEFINED> instruction: 0x00028bb8
   28888:			; <UNDEFINED> instruction: 0x00028bb8
   2888c:	andeq	r8, r2, ip, lsl ip
   28890:	andeq	r8, r2, r0, lsr #24
   28894:	andeq	r8, r2, r0, lsr #24
   28898:	andeq	r8, r2, ip, lsl sl
   2889c:	andeq	r8, r2, r0, lsr #24
   288a0:	andeq	r8, r2, r8, lsl #20
   288a4:	andeq	r8, r2, r0, lsr #24
   288a8:	andeq	r8, r2, r4, lsl fp
   288ac:	andeq	r8, r2, r0, lsr #24
   288b0:	andeq	r8, r2, r0, lsr #24
   288b4:	andeq	r8, r2, r0, lsr #24
   288b8:	andeq	r8, r2, r8, lsl #20
   288bc:	andeq	r8, r2, r8, lsl #20
   288c0:	andeq	r8, r2, r8, lsl #20
   288c4:	andeq	r8, r2, r8, lsl #20
   288c8:	andeq	r8, r2, r8, lsl #20
   288cc:	andeq	r8, r2, r8, lsl #20
   288d0:	andeq	r8, r2, r8, lsl #20
   288d4:	andeq	r8, r2, r8, lsl #20
   288d8:	andeq	r8, r2, r8, lsl #20
   288dc:	andeq	r8, r2, r8, lsl #20
   288e0:	andeq	r8, r2, r8, lsl #20
   288e4:	andeq	r8, r2, r8, lsl #20
   288e8:	andeq	r8, r2, r8, lsl #20
   288ec:	andeq	r8, r2, r8, lsl #20
   288f0:	andeq	r8, r2, r8, lsl #20
   288f4:	andeq	r8, r2, r8, lsl #20
   288f8:	andeq	r8, r2, r0, lsr #24
   288fc:	andeq	r8, r2, r0, lsr #24
   28900:	andeq	r8, r2, r0, lsr #24
   28904:	andeq	r8, r2, r0, lsr #24
   28908:	andeq	r8, r2, r0, ror #21
   2890c:			; <UNDEFINED> instruction: 0x00028bb8
   28910:	andeq	r8, r2, r8, lsl #20
   28914:	andeq	r8, r2, r8, lsl #20
   28918:	andeq	r8, r2, r8, lsl #20
   2891c:	andeq	r8, r2, r8, lsl #20
   28920:	andeq	r8, r2, r8, lsl #20
   28924:	andeq	r8, r2, r8, lsl #20
   28928:	andeq	r8, r2, r8, lsl #20
   2892c:	andeq	r8, r2, r8, lsl #20
   28930:	andeq	r8, r2, r8, lsl #20
   28934:	andeq	r8, r2, r8, lsl #20
   28938:	andeq	r8, r2, r8, lsl #20
   2893c:	andeq	r8, r2, r8, lsl #20
   28940:	andeq	r8, r2, r8, lsl #20
   28944:	andeq	r8, r2, r8, lsl #20
   28948:	andeq	r8, r2, r8, lsl #20
   2894c:	andeq	r8, r2, r8, lsl #20
   28950:	andeq	r8, r2, r8, lsl #20
   28954:	andeq	r8, r2, r8, lsl #20
   28958:	andeq	r8, r2, r8, lsl #20
   2895c:	andeq	r8, r2, r8, lsl #20
   28960:	andeq	r8, r2, r8, lsl #20
   28964:	andeq	r8, r2, r8, lsl #20
   28968:	andeq	r8, r2, r8, lsl #20
   2896c:	andeq	r8, r2, r8, lsl #20
   28970:	andeq	r8, r2, r8, lsl #20
   28974:	andeq	r8, r2, r8, lsl #20
   28978:	andeq	r8, r2, r0, lsr #24
   2897c:	andeq	r8, r2, r8, asr #20
   28980:	andeq	r8, r2, r8, lsl #20
   28984:	andeq	r8, r2, r0, lsr #24
   28988:	andeq	r8, r2, r8, lsl #20
   2898c:	andeq	r8, r2, r0, lsr #24
   28990:	andeq	r8, r2, r8, lsl #20
   28994:	andeq	r8, r2, r8, lsl #20
   28998:	andeq	r8, r2, r8, lsl #20
   2899c:	andeq	r8, r2, r8, lsl #20
   289a0:	andeq	r8, r2, r8, lsl #20
   289a4:	andeq	r8, r2, r8, lsl #20
   289a8:	andeq	r8, r2, r8, lsl #20
   289ac:	andeq	r8, r2, r8, lsl #20
   289b0:	andeq	r8, r2, r8, lsl #20
   289b4:	andeq	r8, r2, r8, lsl #20
   289b8:	andeq	r8, r2, r8, lsl #20
   289bc:	andeq	r8, r2, r8, lsl #20
   289c0:	andeq	r8, r2, r8, lsl #20
   289c4:	andeq	r8, r2, r8, lsl #20
   289c8:	andeq	r8, r2, r8, lsl #20
   289cc:	andeq	r8, r2, r8, lsl #20
   289d0:	andeq	r8, r2, r8, lsl #20
   289d4:	andeq	r8, r2, r8, lsl #20
   289d8:	andeq	r8, r2, r8, lsl #20
   289dc:	andeq	r8, r2, r8, lsl #20
   289e0:	andeq	r8, r2, r8, lsl #20
   289e4:	andeq	r8, r2, r8, lsl #20
   289e8:	andeq	r8, r2, r8, lsl #20
   289ec:	andeq	r8, r2, r8, lsl #20
   289f0:	andeq	r8, r2, r8, lsl #20
   289f4:	andeq	r8, r2, r8, lsl #20
   289f8:	andeq	r8, r2, ip, lsr #20
   289fc:	andeq	r8, r2, r0, lsr #24
   28a00:	andeq	r8, r2, ip, lsr #20
   28a04:	andeq	r8, r2, ip, lsl sl
   28a08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   28a0c:	cmp	r0, #0
   28a10:	beq	28c70 <__assert_fail@plt+0x160b4>
   28a14:	ldr	r0, [fp, #16]
   28a18:	b	28c74 <__assert_fail@plt+0x160b8>
   28a1c:	mov	sl, #0
   28a20:	cmp	r7, #0
   28a24:	bne	28e8c <__assert_fail@plt+0x162d0>
   28a28:	b	28c1c <__assert_fail@plt+0x16060>
   28a2c:	mov	sl, #0
   28a30:	cmn	lr, #1
   28a34:	beq	28c08 <__assert_fail@plt+0x1604c>
   28a38:	cmp	r7, #0
   28a3c:	cmpeq	lr, #1
   28a40:	bne	28e8c <__assert_fail@plt+0x162d0>
   28a44:	b	28c1c <__assert_fail@plt+0x16060>
   28a48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28a4c:	cmp	r0, #2
   28a50:	bne	28c40 <__assert_fail@plt+0x16084>
   28a54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28a58:	tst	r0, #1
   28a5c:	bne	293ac <__assert_fail@plt+0x167f0>
   28a60:	mov	r9, #0
   28a64:	mov	r0, #92	; 0x5c
   28a68:	b	28c54 <__assert_fail@plt+0x16098>
   28a6c:	mov	r0, #102	; 0x66
   28a70:	b	28c5c <__assert_fail@plt+0x160a0>
   28a74:	mov	r2, #116	; 0x74
   28a78:	b	28a88 <__assert_fail@plt+0x15ecc>
   28a7c:	mov	r0, #98	; 0x62
   28a80:	b	28c5c <__assert_fail@plt+0x160a0>
   28a84:	mov	r2, #114	; 0x72
   28a88:	ldr	r0, [sp, #60]	; 0x3c
   28a8c:	tst	r0, #1
   28a90:	mov	r0, r2
   28a94:	bne	28c5c <__assert_fail@plt+0x160a0>
   28a98:	b	293ac <__assert_fail@plt+0x167f0>
   28a9c:	ldr	r0, [sp, #84]	; 0x54
   28aa0:	tst	r0, #1
   28aa4:	beq	28d48 <__assert_fail@plt+0x1618c>
   28aa8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28aac:	tst	r0, #1
   28ab0:	bne	294b4 <__assert_fail@plt+0x168f8>
   28ab4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28ab8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   28abc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   28ac0:	cmp	r0, #2
   28ac4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28ac8:	movwne	r0, #1
   28acc:	orr	r0, r0, r3
   28ad0:	tst	r0, #1
   28ad4:	beq	291c8 <__assert_fail@plt+0x1660c>
   28ad8:	mov	r0, r8
   28adc:	b	29208 <__assert_fail@plt+0x1664c>
   28ae0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28ae4:	mov	r9, #0
   28ae8:	mov	r5, #63	; 0x3f
   28aec:	cmp	r0, #5
   28af0:	beq	28e94 <__assert_fail@plt+0x162d8>
   28af4:	cmp	r0, #2
   28af8:	bne	28f54 <__assert_fail@plt+0x16398>
   28afc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28b00:	tst	r0, #1
   28b04:	beq	28f58 <__assert_fail@plt+0x1639c>
   28b08:	b	293ac <__assert_fail@plt+0x167f0>
   28b0c:	mov	r0, #118	; 0x76
   28b10:	b	28c5c <__assert_fail@plt+0x160a0>
   28b14:	mov	r0, #1
   28b18:	mov	r5, #39	; 0x27
   28b1c:	str	r0, [sp, #52]	; 0x34
   28b20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28b24:	cmp	r0, #2
   28b28:	bne	28bb0 <__assert_fail@plt+0x15ff4>
   28b2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28b30:	tst	r0, #1
   28b34:	bne	293ac <__assert_fail@plt+0x167f0>
   28b38:	ldr	r3, [sp, #68]	; 0x44
   28b3c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   28b40:	mov	r9, #0
   28b44:	clz	r1, r2
   28b48:	cmp	r3, #0
   28b4c:	mov	r0, r3
   28b50:	movwne	r0, #1
   28b54:	lsr	r1, r1, #5
   28b58:	orrs	r0, r0, r1
   28b5c:	moveq	r3, r2
   28b60:	moveq	r2, r0
   28b64:	cmp	r8, r2
   28b68:	str	r3, [sp, #68]	; 0x44
   28b6c:	str	r2, [fp, #-52]	; 0xffffffcc
   28b70:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   28b74:	movcc	r0, #39	; 0x27
   28b78:	strbcc	r0, [r1, r8]
   28b7c:	add	r0, r8, #1
   28b80:	cmp	r0, r2
   28b84:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   28b88:	movcc	r1, #92	; 0x5c
   28b8c:	strbcc	r1, [r3, r0]
   28b90:	add	r0, r8, #2
   28b94:	add	r8, r8, #3
   28b98:	cmp	r0, r2
   28b9c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   28ba0:	movcc	r1, #39	; 0x27
   28ba4:	strbcc	r1, [r2, r0]
   28ba8:	mov	r0, #0
   28bac:	str	r0, [fp, #-48]	; 0xffffffd0
   28bb0:	mov	sl, #1
   28bb4:	b	28a08 <__assert_fail@plt+0x15e4c>
   28bb8:	ldr	r0, [sp, #32]
   28bbc:	cmp	r0, #1
   28bc0:	bne	28d6c <__assert_fail@plt+0x161b0>
   28bc4:	str	lr, [sp, #80]	; 0x50
   28bc8:	bl	12844 <__ctype_b_loc@plt>
   28bcc:	ldr	r0, [r0]
   28bd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   28bd4:	mov	r1, #1
   28bd8:	add	r0, r0, r5, lsl #1
   28bdc:	ldrb	r0, [r0, #1]
   28be0:	ubfx	sl, r0, #6, #1
   28be4:	ldr	r0, [sp, #48]	; 0x30
   28be8:	mov	r2, r1
   28bec:	cmp	r1, #1
   28bf0:	orr	r0, sl, r0
   28bf4:	bhi	28f60 <__assert_fail@plt+0x163a4>
   28bf8:	tst	r0, #1
   28bfc:	beq	28f60 <__assert_fail@plt+0x163a4>
   28c00:	ldr	lr, [sp, #80]	; 0x50
   28c04:	b	28a08 <__assert_fail@plt+0x15e4c>
   28c08:	cmp	r7, #0
   28c0c:	bne	28e88 <__assert_fail@plt+0x162cc>
   28c10:	ldrb	r0, [ip, #1]
   28c14:	cmp	r0, #0
   28c18:	bne	28e88 <__assert_fail@plt+0x162cc>
   28c1c:	mov	r1, #1
   28c20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   28c24:	cmp	r0, #2
   28c28:	bne	28c38 <__assert_fail@plt+0x1607c>
   28c2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28c30:	tst	r0, #1
   28c34:	bne	293ac <__assert_fail@plt+0x167f0>
   28c38:	mov	sl, r1
   28c3c:	b	28a08 <__assert_fail@plt+0x15e4c>
   28c40:	ldr	r1, [sp, #44]	; 0x2c
   28c44:	mov	r9, #0
   28c48:	mov	r0, #92	; 0x5c
   28c4c:	cmp	r1, #0
   28c50:	beq	28c5c <__assert_fail@plt+0x160a0>
   28c54:	mov	sl, #0
   28c58:	b	29174 <__assert_fail@plt+0x165b8>
   28c5c:	ldr	r1, [sp, #84]	; 0x54
   28c60:	mov	sl, #0
   28c64:	mov	r9, #0
   28c68:	tst	r1, #1
   28c6c:	bne	28ca8 <__assert_fail@plt+0x160ec>
   28c70:	ldr	r0, [fp, #-88]	; 0xffffffa8
   28c74:	cmp	r0, #0
   28c78:	mov	r0, r5
   28c7c:	beq	28ca0 <__assert_fail@plt+0x160e4>
   28c80:	ldr	r1, [fp, #16]
   28c84:	ubfx	r0, r5, #5, #3
   28c88:	mov	r2, #1
   28c8c:	ldr	r0, [r1, r0, lsl #2]
   28c90:	and	r1, r5, #31
   28c94:	tst	r0, r2, lsl r1
   28c98:	mov	r0, r5
   28c9c:	bne	28ca8 <__assert_fail@plt+0x160ec>
   28ca0:	cmp	r6, #0
   28ca4:	beq	29174 <__assert_fail@plt+0x165b8>
   28ca8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   28cac:	ldr	r6, [fp, #-52]	; 0xffffffcc
   28cb0:	tst	r1, #1
   28cb4:	bne	29388 <__assert_fail@plt+0x167cc>
   28cb8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   28cbc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   28cc0:	cmp	r1, #2
   28cc4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   28cc8:	movwne	r1, #1
   28ccc:	orr	r1, r1, r5
   28cd0:	tst	r1, #1
   28cd4:	bne	28d18 <__assert_fail@plt+0x1615c>
   28cd8:	cmp	r8, r6
   28cdc:	mov	r5, #1
   28ce0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   28ce4:	movcc	r1, #39	; 0x27
   28ce8:	strbcc	r1, [r2, r8]
   28cec:	add	r1, r8, #1
   28cf0:	cmp	r1, r6
   28cf4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   28cf8:	movcc	r2, #36	; 0x24
   28cfc:	strbcc	r2, [r3, r1]
   28d00:	add	r1, r8, #2
   28d04:	add	r8, r8, #3
   28d08:	cmp	r1, r6
   28d0c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   28d10:	movcc	r2, #39	; 0x27
   28d14:	strbcc	r2, [r3, r1]
   28d18:	cmp	r8, r6
   28d1c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   28d20:	movcc	r1, #92	; 0x5c
   28d24:	strbcc	r1, [r2, r8]
   28d28:	add	r8, r8, #1
   28d2c:	cmp	r8, r6
   28d30:	and	r4, r4, sl
   28d34:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   28d38:	strbcc	r0, [r1, r8]
   28d3c:	add	r8, r8, #1
   28d40:	add	r7, r7, #1
   28d44:	b	28728 <__assert_fail@plt+0x15b6c>
   28d48:	ldr	r0, [sp, #28]
   28d4c:	mov	sl, #0
   28d50:	mov	r9, #0
   28d54:	mov	r5, #0
   28d58:	cmp	r0, #0
   28d5c:	beq	28c70 <__assert_fail@plt+0x160b4>
   28d60:	ldr	r6, [fp, #-52]	; 0xffffffcc
   28d64:	ldr	r5, [fp, #-48]	; 0xffffffd0
   28d68:	b	28d40 <__assert_fail@plt+0x16184>
   28d6c:	mov	r0, #0
   28d70:	cmn	lr, #1
   28d74:	str	r6, [sp, #76]	; 0x4c
   28d78:	str	r4, [sp, #20]
   28d7c:	str	r0, [fp, #-36]	; 0xffffffdc
   28d80:	str	r0, [fp, #-40]	; 0xffffffd8
   28d84:	bne	28d98 <__assert_fail@plt+0x161dc>
   28d88:	mov	r0, ip
   28d8c:	bl	1288c <strlen@plt>
   28d90:	ldr	ip, [fp, #-84]	; 0xffffffac
   28d94:	mov	lr, r0
   28d98:	add	r0, ip, r7
   28d9c:	mov	sl, #1
   28da0:	mov	r6, #0
   28da4:	sub	r4, fp, #40	; 0x28
   28da8:	str	lr, [sp, #80]	; 0x50
   28dac:	str	r0, [sp, #36]	; 0x24
   28db0:	str	r6, [sp, #40]	; 0x28
   28db4:	add	r6, r6, r7
   28db8:	sub	r0, fp, #44	; 0x2c
   28dbc:	mov	r3, r4
   28dc0:	add	r1, ip, r6
   28dc4:	sub	r2, lr, r6
   28dc8:	bl	2e214 <__assert_fail@plt+0x1b658>
   28dcc:	cmp	r0, #0
   28dd0:	beq	292dc <__assert_fail@plt+0x16720>
   28dd4:	cmn	r0, #1
   28dd8:	beq	2929c <__assert_fail@plt+0x166e0>
   28ddc:	ldr	lr, [sp, #80]	; 0x50
   28de0:	cmn	r0, #2
   28de4:	beq	292a4 <__assert_fail@plt+0x166e8>
   28de8:	ldr	r2, [sp, #56]	; 0x38
   28dec:	cmp	r0, #2
   28df0:	mov	r1, #0
   28df4:	movwcc	r1, #1
   28df8:	eor	r2, r2, #1
   28dfc:	orrs	r1, r2, r1
   28e00:	bne	28e4c <__assert_fail@plt+0x16290>
   28e04:	ldr	r1, [sp, #40]	; 0x28
   28e08:	ldr	r2, [sp, #36]	; 0x24
   28e0c:	add	ip, r2, r1
   28e10:	mov	r2, #1
   28e14:	ldrb	r3, [ip, r2]
   28e18:	sub	r6, r3, #94	; 0x5e
   28e1c:	cmp	r6, #30
   28e20:	bhi	28e34 <__assert_fail@plt+0x16278>
   28e24:	mov	r4, #1
   28e28:	mov	r1, #1073741829	; 0x40000005
   28e2c:	tst	r1, r4, lsl r6
   28e30:	bne	293a8 <__assert_fail@plt+0x167ec>
   28e34:	sub	r3, r3, #91	; 0x5b
   28e38:	cmp	r3, #2
   28e3c:	bcc	293a8 <__assert_fail@plt+0x167ec>
   28e40:	add	r2, r2, #1
   28e44:	cmp	r2, r0
   28e48:	bcc	28e14 <__assert_fail@plt+0x16258>
   28e4c:	ldr	r6, [sp, #40]	; 0x28
   28e50:	add	r6, r0, r6
   28e54:	ldr	r0, [fp, #-44]	; 0xffffffd4
   28e58:	bl	126d0 <iswprint@plt>
   28e5c:	cmp	r0, #0
   28e60:	sub	r4, fp, #40	; 0x28
   28e64:	movwne	r0, #1
   28e68:	and	sl, sl, r0
   28e6c:	mov	r0, r4
   28e70:	bl	12604 <mbsinit@plt>
   28e74:	ldr	lr, [sp, #80]	; 0x50
   28e78:	ldr	ip, [fp, #-84]	; 0xffffffac
   28e7c:	cmp	r0, #0
   28e80:	beq	28db0 <__assert_fail@plt+0x161f4>
   28e84:	b	292e4 <__assert_fail@plt+0x16728>
   28e88:	mvn	lr, #0
   28e8c:	mov	r9, #0
   28e90:	b	28a08 <__assert_fail@plt+0x15e4c>
   28e94:	ldr	r0, [sp, #24]
   28e98:	cmp	r0, #0
   28e9c:	beq	28f54 <__assert_fail@plt+0x16398>
   28ea0:	add	r0, r7, #2
   28ea4:	cmp	r0, lr
   28ea8:	bcs	28f54 <__assert_fail@plt+0x16398>
   28eac:	add	r1, ip, r7
   28eb0:	ldrb	r1, [r1, #1]
   28eb4:	cmp	r1, #63	; 0x3f
   28eb8:	bne	28f54 <__assert_fail@plt+0x16398>
   28ebc:	ldrb	r5, [ip, r0]
   28ec0:	sub	r1, r5, #33	; 0x21
   28ec4:	cmp	r1, #29
   28ec8:	bhi	28f54 <__assert_fail@plt+0x16398>
   28ecc:	movw	r3, #20929	; 0x51c1
   28ed0:	mov	r2, #1
   28ed4:	movt	r3, #14336	; 0x3800
   28ed8:	tst	r3, r2, lsl r1
   28edc:	beq	28f54 <__assert_fail@plt+0x16398>
   28ee0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   28ee4:	tst	r1, #1
   28ee8:	bne	294bc <__assert_fail@plt+0x16900>
   28eec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   28ef0:	mov	r7, r0
   28ef4:	cmp	r8, r1
   28ef8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   28efc:	movcc	r1, #63	; 0x3f
   28f00:	strbcc	r1, [r2, r8]
   28f04:	ldr	r2, [fp, #-52]	; 0xffffffcc
   28f08:	add	r1, r8, #1
   28f0c:	cmp	r1, r2
   28f10:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   28f14:	movcc	r2, #34	; 0x22
   28f18:	strbcc	r2, [r3, r1]
   28f1c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   28f20:	add	r1, r8, #2
   28f24:	cmp	r1, r2
   28f28:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   28f2c:	movcc	r2, #34	; 0x22
   28f30:	strbcc	r2, [r3, r1]
   28f34:	ldr	r2, [fp, #-52]	; 0xffffffcc
   28f38:	add	r1, r8, #3
   28f3c:	add	r8, r8, #4
   28f40:	cmp	r1, r2
   28f44:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   28f48:	movcc	r2, #63	; 0x3f
   28f4c:	strbcc	r2, [r3, r1]
   28f50:	b	28f58 <__assert_fail@plt+0x1639c>
   28f54:	mov	r5, #63	; 0x3f
   28f58:	mov	sl, #0
   28f5c:	b	28a08 <__assert_fail@plt+0x15e4c>
   28f60:	str	r0, [sp, #40]	; 0x28
   28f64:	add	r0, r2, r7
   28f68:	str	r6, [sp, #76]	; 0x4c
   28f6c:	add	r1, r7, #1
   28f70:	ldr	lr, [sp, #80]	; 0x50
   28f74:	ldr	r7, [fp, #-64]	; 0xffffffc0
   28f78:	ldr	r6, [fp, #-52]	; 0xffffffcc
   28f7c:	mov	r3, #0
   28f80:	str	r0, [sp, #36]	; 0x24
   28f84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   28f88:	b	2901c <__assert_fail@plt+0x16460>
   28f8c:	str	r0, [sp, #76]	; 0x4c
   28f90:	ldr	r0, [fp, #-48]	; 0xffffffd0
   28f94:	cmp	r9, #0
   28f98:	movwne	r9, #1
   28f9c:	mvn	r7, r0
   28fa0:	orr	r7, r7, r9
   28fa4:	tst	r7, #1
   28fa8:	bne	28ff8 <__assert_fail@plt+0x1643c>
   28fac:	ldr	r6, [fp, #-52]	; 0xffffffcc
   28fb0:	cmp	r8, r6
   28fb4:	bcs	28fcc <__assert_fail@plt+0x16410>
   28fb8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   28fbc:	mov	r2, r4
   28fc0:	mov	r4, #39	; 0x27
   28fc4:	strb	r4, [r7, r8]
   28fc8:	mov	r4, r2
   28fcc:	add	r7, r8, #1
   28fd0:	cmp	r7, r6
   28fd4:	bcs	28fec <__assert_fail@plt+0x16430>
   28fd8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   28fdc:	mov	r2, r4
   28fe0:	mov	r4, #39	; 0x27
   28fe4:	strb	r4, [r0, r7]
   28fe8:	mov	r4, r2
   28fec:	add	r8, r8, #2
   28ff0:	mov	r0, #0
   28ff4:	b	29000 <__assert_fail@plt+0x16444>
   28ff8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   28ffc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   29000:	cmp	r8, r6
   29004:	ldr	r7, [fp, #-64]	; 0xffffffc0
   29008:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   2900c:	strbcc	r5, [r2, r8]
   29010:	add	r8, r8, #1
   29014:	ldrb	r5, [ip, r1]
   29018:	add	r1, r1, #1
   2901c:	ldr	r2, [sp, #40]	; 0x28
   29020:	tst	r2, #1
   29024:	beq	29060 <__assert_fail@plt+0x164a4>
   29028:	ldr	r2, [sp, #76]	; 0x4c
   2902c:	str	r0, [fp, #-48]	; 0xffffffd0
   29030:	tst	r2, #1
   29034:	beq	29058 <__assert_fail@plt+0x1649c>
   29038:	cmp	r8, r6
   2903c:	bcs	29054 <__assert_fail@plt+0x16498>
   29040:	ldr	r6, [fp, #-56]	; 0xffffffc8
   29044:	mov	r2, r4
   29048:	mov	r4, #92	; 0x5c
   2904c:	strb	r4, [r6, r8]
   29050:	mov	r4, r2
   29054:	add	r8, r8, #1
   29058:	mov	r0, #0
   2905c:	b	29154 <__assert_fail@plt+0x16598>
   29060:	ldr	r2, [fp, #-72]	; 0xffffffb8
   29064:	tst	r2, #1
   29068:	bne	293b4 <__assert_fail@plt+0x167f8>
   2906c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   29070:	cmp	r7, #2
   29074:	movwne	r3, #1
   29078:	orr	r3, r3, r0
   2907c:	tst	r3, #1
   29080:	bne	290dc <__assert_fail@plt+0x16520>
   29084:	cmp	r8, r6
   29088:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   2908c:	movcc	r3, #39	; 0x27
   29090:	strbcc	r3, [r2, r8]
   29094:	add	r3, r8, #1
   29098:	cmp	r3, r6
   2909c:	bcs	290b4 <__assert_fail@plt+0x164f8>
   290a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   290a4:	mov	r7, r4
   290a8:	mov	r4, #36	; 0x24
   290ac:	strb	r4, [r2, r3]
   290b0:	mov	r4, r7
   290b4:	add	r3, r8, #2
   290b8:	cmp	r3, r6
   290bc:	bcs	290d4 <__assert_fail@plt+0x16518>
   290c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   290c4:	mov	r7, r4
   290c8:	mov	r4, #39	; 0x27
   290cc:	strb	r4, [r2, r3]
   290d0:	mov	r4, r7
   290d4:	add	r8, r8, #3
   290d8:	mov	r0, #1
   290dc:	cmp	r8, r6
   290e0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   290e4:	movcc	r3, #92	; 0x5c
   290e8:	strbcc	r3, [r2, r8]
   290ec:	add	r3, r8, #1
   290f0:	cmp	r3, r6
   290f4:	bcs	29114 <__assert_fail@plt+0x16558>
   290f8:	mov	r2, r4
   290fc:	and	r7, r5, #192	; 0xc0
   29100:	mov	r4, #48	; 0x30
   29104:	orr	r7, r4, r7, lsr #6
   29108:	mov	r4, r2
   2910c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   29110:	strb	r7, [r2, r3]
   29114:	add	r3, r8, #2
   29118:	cmp	r3, r6
   2911c:	bcs	2913c <__assert_fail@plt+0x16580>
   29120:	ldr	r2, [fp, #-56]	; 0xffffffc8
   29124:	mov	r6, r4
   29128:	lsr	r7, r5, #3
   2912c:	mov	r4, #6
   29130:	bfi	r7, r4, #3, #29
   29134:	mov	r4, r6
   29138:	strb	r7, [r2, r3]
   2913c:	str	r0, [fp, #-48]	; 0xffffffd0
   29140:	ldr	r0, [sp, #76]	; 0x4c
   29144:	mov	r3, #6
   29148:	add	r8, r8, #3
   2914c:	bfi	r5, r3, #3, #29
   29150:	mov	r3, #1
   29154:	ldr	r2, [sp, #36]	; 0x24
   29158:	and	r9, r3, #1
   2915c:	cmp	r2, r1
   29160:	bhi	28f8c <__assert_fail@plt+0x163d0>
   29164:	cmp	r9, #0
   29168:	sub	r7, r1, #1
   2916c:	mov	r0, r5
   29170:	movwne	r9, #1
   29174:	cmp	r9, #0
   29178:	bne	291bc <__assert_fail@plt+0x16600>
   2917c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   29180:	ldr	r6, [fp, #-52]	; 0xffffffcc
   29184:	tst	r5, #1
   29188:	beq	28d2c <__assert_fail@plt+0x16170>
   2918c:	cmp	r8, r6
   29190:	mov	r5, #0
   29194:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   29198:	movcc	r1, #39	; 0x27
   2919c:	strbcc	r1, [r2, r8]
   291a0:	add	r1, r8, #1
   291a4:	add	r8, r8, #2
   291a8:	cmp	r1, r6
   291ac:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   291b0:	movcc	r2, #39	; 0x27
   291b4:	strbcc	r2, [r3, r1]
   291b8:	b	28d2c <__assert_fail@plt+0x16170>
   291bc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   291c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   291c4:	b	28d2c <__assert_fail@plt+0x16170>
   291c8:	cmp	r8, r1
   291cc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   291d0:	movcc	r0, #39	; 0x27
   291d4:	strbcc	r0, [r2, r8]
   291d8:	add	r0, r8, #1
   291dc:	cmp	r0, r1
   291e0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   291e4:	movcc	r2, #36	; 0x24
   291e8:	strbcc	r2, [r3, r0]
   291ec:	add	r0, r8, #2
   291f0:	cmp	r0, r1
   291f4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   291f8:	movcc	r2, #39	; 0x27
   291fc:	strbcc	r2, [r3, r0]
   29200:	add	r0, r8, #3
   29204:	mov	r3, #1
   29208:	cmp	r0, r1
   2920c:	add	r8, r0, #1
   29210:	str	r3, [fp, #-48]	; 0xffffffd0
   29214:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   29218:	movcc	r1, #92	; 0x5c
   2921c:	strbcc	r1, [r2, r0]
   29220:	ldr	r1, [fp, #-64]	; 0xffffffc0
   29224:	cmp	r1, #2
   29228:	beq	2928c <__assert_fail@plt+0x166d0>
   2922c:	add	r1, r7, #1
   29230:	mov	sl, #0
   29234:	mov	r9, #1
   29238:	mov	r5, #48	; 0x30
   2923c:	cmp	r1, lr
   29240:	bcs	28a08 <__assert_fail@plt+0x15e4c>
   29244:	ldrb	r1, [ip, r1]
   29248:	sub	r1, r1, #48	; 0x30
   2924c:	uxtb	r1, r1
   29250:	cmp	r1, #9
   29254:	bhi	28a08 <__assert_fail@plt+0x15e4c>
   29258:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2925c:	cmp	r8, r1
   29260:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   29264:	movcc	r1, #48	; 0x30
   29268:	strbcc	r1, [r2, r8]
   2926c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   29270:	add	r1, r0, #2
   29274:	add	r8, r0, #3
   29278:	cmp	r1, r2
   2927c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   29280:	movcc	r2, #48	; 0x30
   29284:	strbcc	r2, [r3, r1]
   29288:	b	28a08 <__assert_fail@plt+0x15e4c>
   2928c:	mov	r0, #48	; 0x30
   29290:	mov	r9, #1
   29294:	mov	sl, #0
   29298:	b	28ca0 <__assert_fail@plt+0x160e4>
   2929c:	mov	sl, #0
   292a0:	b	292dc <__assert_fail@plt+0x16720>
   292a4:	mov	sl, #0
   292a8:	cmp	lr, r6
   292ac:	bls	292dc <__assert_fail@plt+0x16720>
   292b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   292b4:	ldr	r6, [sp, #40]	; 0x28
   292b8:	ldr	r0, [sp, #36]	; 0x24
   292bc:	ldrb	r0, [r0, r6]
   292c0:	cmp	r0, #0
   292c4:	beq	292e4 <__assert_fail@plt+0x16728>
   292c8:	add	r6, r6, #1
   292cc:	add	r0, r7, r6
   292d0:	cmp	r0, lr
   292d4:	bcc	292b8 <__assert_fail@plt+0x166fc>
   292d8:	b	292e4 <__assert_fail@plt+0x16728>
   292dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   292e0:	ldr	r6, [sp, #40]	; 0x28
   292e4:	mov	r1, r6
   292e8:	ldr	r4, [sp, #20]
   292ec:	ldr	r6, [sp, #76]	; 0x4c
   292f0:	b	28be4 <__assert_fail@plt+0x16028>
   292f4:	mov	lr, r7
   292f8:	b	29300 <__assert_fail@plt+0x16744>
   292fc:	mvn	lr, #0
   29300:	ldr	r9, [fp, #-64]	; 0xffffffc0
   29304:	ldr	r1, [fp, #-72]	; 0xffffffb8
   29308:	eor	r0, r9, #2
   2930c:	orr	r0, r0, r8
   29310:	clz	r0, r0
   29314:	lsr	r0, r0, #5
   29318:	tst	r1, r0
   2931c:	bne	29418 <__assert_fail@plt+0x1685c>
   29320:	mov	r0, r1
   29324:	ldr	r1, [fp, #-80]	; 0xffffffb0
   29328:	cmp	r9, #2
   2932c:	movwne	r1, #1
   29330:	orr	r0, r0, r1
   29334:	tst	r0, #1
   29338:	bne	29458 <__assert_fail@plt+0x1689c>
   2933c:	ldr	r0, [sp, #52]	; 0x34
   29340:	ldr	r1, [sp, #68]	; 0x44
   29344:	str	lr, [sp, #80]	; 0x50
   29348:	eor	r0, r0, #1
   2934c:	tst	r0, #1
   29350:	bne	29458 <__assert_fail@plt+0x1689c>
   29354:	tst	r4, #1
   29358:	bne	29420 <__assert_fail@plt+0x16864>
   2935c:	mov	r7, #0
   29360:	cmp	r1, #0
   29364:	beq	29450 <__assert_fail@plt+0x16894>
   29368:	ldr	r0, [sp, #84]	; 0x54
   2936c:	mov	r3, #0
   29370:	cmp	r6, #0
   29374:	mov	r2, #0
   29378:	mov	r4, r1
   2937c:	str	r3, [fp, #-72]	; 0xffffffb8
   29380:	beq	284bc <__assert_fail@plt+0x15900>
   29384:	b	29458 <__assert_fail@plt+0x1689c>
   29388:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2938c:	b	293b4 <__assert_fail@plt+0x167f8>
   29390:	ldr	ip, [fp, #-84]	; 0xffffffac
   29394:	mov	r2, #1
   29398:	mov	lr, r4
   2939c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   293a0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   293a4:	b	293b8 <__assert_fail@plt+0x167fc>
   293a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   293ac:	mov	r7, #2
   293b0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   293b4:	ldr	r2, [sp, #84]	; 0x54
   293b8:	mov	r0, #0
   293bc:	ldr	r1, [fp, #12]
   293c0:	tst	r2, #1
   293c4:	mov	r2, r7
   293c8:	mov	r3, lr
   293cc:	str	r0, [sp, #8]
   293d0:	ldr	r0, [sp, #64]	; 0x40
   293d4:	movwne	r2, #4
   293d8:	cmp	r7, #2
   293dc:	movne	r2, r7
   293e0:	str	r2, [sp]
   293e4:	mov	r2, ip
   293e8:	bic	r1, r1, #2
   293ec:	str	r0, [sp, #12]
   293f0:	ldr	r0, [sp, #72]	; 0x48
   293f4:	str	r1, [sp, #4]
   293f8:	mov	r1, r6
   293fc:	str	r0, [sp, #16]
   29400:	ldr	r0, [fp, #-56]	; 0xffffffc8
   29404:	bl	28444 <__assert_fail@plt+0x15888>
   29408:	mov	r8, r0
   2940c:	mov	r0, r8
   29410:	sub	sp, fp, #28
   29414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29418:	mov	r7, #2
   2941c:	b	293b4 <__assert_fail@plt+0x167f8>
   29420:	mov	r0, #5
   29424:	ldr	r2, [fp, #-84]	; 0xffffffac
   29428:	ldr	r3, [sp, #80]	; 0x50
   2942c:	str	r0, [sp]
   29430:	ldr	r0, [fp, #12]
   29434:	str	r0, [sp, #4]
   29438:	ldr	r0, [fp, #16]
   2943c:	str	r0, [sp, #8]
   29440:	ldr	r0, [sp, #64]	; 0x40
   29444:	str	r0, [sp, #12]
   29448:	ldr	r0, [sp, #72]	; 0x48
   2944c:	b	293fc <__assert_fail@plt+0x16840>
   29450:	mov	r0, #0
   29454:	str	r0, [fp, #-72]	; 0xffffffb8
   29458:	ldr	r1, [sp, #92]	; 0x5c
   2945c:	cmp	r1, #0
   29460:	beq	294a0 <__assert_fail@plt+0x168e4>
   29464:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29468:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2946c:	tst	r0, #1
   29470:	bne	294a4 <__assert_fail@plt+0x168e8>
   29474:	ldrb	r0, [r1]
   29478:	cmp	r0, #0
   2947c:	beq	294a4 <__assert_fail@plt+0x168e8>
   29480:	add	r1, r1, #1
   29484:	cmp	r8, r6
   29488:	strbcc	r0, [r2, r8]
   2948c:	add	r8, r8, #1
   29490:	ldrb	r0, [r1], #1
   29494:	cmp	r0, #0
   29498:	bne	29484 <__assert_fail@plt+0x168c8>
   2949c:	b	294a4 <__assert_fail@plt+0x168e8>
   294a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   294a4:	cmp	r8, r6
   294a8:	movcc	r0, #0
   294ac:	strbcc	r0, [r2, r8]
   294b0:	b	2940c <__assert_fail@plt+0x16850>
   294b4:	mov	r2, #1
   294b8:	b	2939c <__assert_fail@plt+0x167e0>
   294bc:	mov	r7, #5
   294c0:	b	293b0 <__assert_fail@plt+0x167f4>
   294c4:	bl	12b68 <abort@plt>
   294c8:	mov	r3, r2
   294cc:	mov	r2, #0
   294d0:	b	294d4 <__assert_fail@plt+0x16918>
   294d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   294d8:	add	fp, sp, #28
   294dc:	sub	sp, sp, #36	; 0x24
   294e0:	movw	r8, #19744	; 0x4d20
   294e4:	cmp	r3, #0
   294e8:	mov	r4, r2
   294ec:	str	r2, [sp, #24]
   294f0:	mov	r5, r1
   294f4:	mov	r6, r0
   294f8:	str	r0, [sp, #20]
   294fc:	movt	r8, #5
   29500:	movne	r8, r3
   29504:	bl	128d4 <__errno_location@plt>
   29508:	str	r0, [sp, #28]
   2950c:	cmp	r4, #0
   29510:	add	sl, r8, #8
   29514:	ldm	r8, {r3, r9}
   29518:	ldr	r7, [r0]
   2951c:	ldr	r1, [r8, #40]	; 0x28
   29520:	ldr	r2, [r8, #44]	; 0x2c
   29524:	mov	r0, #0
   29528:	orreq	r9, r9, #1
   2952c:	str	r7, [sp, #32]
   29530:	mov	r7, r5
   29534:	stm	sp, {r3, r9, sl}
   29538:	str	r1, [sp, #12]
   2953c:	str	r2, [sp, #16]
   29540:	mov	r1, #0
   29544:	mov	r2, r6
   29548:	mov	r3, r5
   2954c:	bl	28444 <__assert_fail@plt+0x15888>
   29550:	add	r4, r0, #1
   29554:	mov	r5, r0
   29558:	mov	r0, r4
   2955c:	bl	2aa10 <__assert_fail@plt+0x17e54>
   29560:	mov	r6, r0
   29564:	ldr	r0, [r8]
   29568:	ldr	r2, [r8, #44]	; 0x2c
   2956c:	ldr	r1, [r8, #40]	; 0x28
   29570:	mov	r3, r7
   29574:	stm	sp, {r0, r9, sl}
   29578:	str	r2, [sp, #16]
   2957c:	str	r1, [sp, #12]
   29580:	mov	r0, r6
   29584:	mov	r1, r4
   29588:	ldr	r2, [sp, #20]
   2958c:	bl	28444 <__assert_fail@plt+0x15888>
   29590:	ldr	r0, [sp, #24]
   29594:	ldr	r1, [sp, #32]
   29598:	ldr	r2, [sp, #28]
   2959c:	cmp	r0, #0
   295a0:	str	r1, [r2]
   295a4:	strne	r5, [r0]
   295a8:	mov	r0, r6
   295ac:	sub	sp, fp, #28
   295b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   295b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   295b8:	add	fp, sp, #24
   295bc:	movw	r5, #17676	; 0x450c
   295c0:	movw	r8, #17672	; 0x4508
   295c4:	movt	r5, #5
   295c8:	movt	r8, #5
   295cc:	ldr	r0, [r5]
   295d0:	ldr	r4, [r8]
   295d4:	cmp	r0, #2
   295d8:	blt	29604 <__assert_fail@plt+0x16a48>
   295dc:	add	r7, r4, #12
   295e0:	mov	r6, #0
   295e4:	ldr	r0, [r7, r6, lsl #3]
   295e8:	bl	2c048 <__assert_fail@plt+0x1948c>
   295ec:	ldr	r1, [r5]
   295f0:	add	r2, r6, #2
   295f4:	add	r0, r6, #1
   295f8:	mov	r6, r0
   295fc:	cmp	r2, r1
   29600:	blt	295e4 <__assert_fail@plt+0x16a28>
   29604:	ldr	r0, [r4, #4]
   29608:	movw	r7, #19792	; 0x4d50
   2960c:	movt	r7, #5
   29610:	cmp	r0, r7
   29614:	beq	2962c <__assert_fail@plt+0x16a70>
   29618:	bl	2c048 <__assert_fail@plt+0x1948c>
   2961c:	movw	r0, #17680	; 0x4510
   29620:	mov	r6, #256	; 0x100
   29624:	movt	r0, #5
   29628:	strd	r6, [r0]
   2962c:	movw	r6, #17680	; 0x4510
   29630:	movt	r6, #5
   29634:	cmp	r4, r6
   29638:	beq	29648 <__assert_fail@plt+0x16a8c>
   2963c:	mov	r0, r4
   29640:	bl	2c048 <__assert_fail@plt+0x1948c>
   29644:	str	r6, [r8]
   29648:	mov	r0, #1
   2964c:	str	r0, [r5]
   29650:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29654:	movw	r3, #19744	; 0x4d20
   29658:	mvn	r2, #0
   2965c:	movt	r3, #5
   29660:	b	29664 <__assert_fail@plt+0x16aa8>
   29664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29668:	add	fp, sp, #28
   2966c:	sub	sp, sp, #44	; 0x2c
   29670:	mov	r7, r3
   29674:	str	r2, [sp, #36]	; 0x24
   29678:	str	r1, [sp, #32]
   2967c:	mov	r5, r0
   29680:	bl	128d4 <__errno_location@plt>
   29684:	cmp	r5, #0
   29688:	blt	297f4 <__assert_fail@plt+0x16c38>
   2968c:	cmn	r5, #-2147483647	; 0x80000001
   29690:	beq	297f4 <__assert_fail@plt+0x16c38>
   29694:	movw	r8, #17676	; 0x450c
   29698:	movw	r4, #17672	; 0x4508
   2969c:	str	r0, [sp, #28]
   296a0:	ldr	r0, [r0]
   296a4:	movt	r8, #5
   296a8:	movt	r4, #5
   296ac:	ldr	r1, [r8]
   296b0:	ldr	r6, [r4]
   296b4:	str	r0, [sp, #24]
   296b8:	cmp	r1, r5
   296bc:	ble	296c8 <__assert_fail@plt+0x16b0c>
   296c0:	mov	sl, r6
   296c4:	b	29730 <__assert_fail@plt+0x16b74>
   296c8:	movw	r9, #17680	; 0x4510
   296cc:	mov	r0, #8
   296d0:	add	r2, r5, #1
   296d4:	str	r1, [fp, #-32]	; 0xffffffe0
   296d8:	mvn	r3, #-2147483648	; 0x80000000
   296dc:	movt	r9, #5
   296e0:	str	r0, [sp]
   296e4:	sub	r2, r2, r1
   296e8:	sub	r1, fp, #32
   296ec:	subs	r0, r6, r9
   296f0:	movne	r0, r6
   296f4:	bl	2ab40 <__assert_fail@plt+0x17f84>
   296f8:	cmp	r6, r9
   296fc:	mov	sl, r0
   29700:	str	r0, [r4]
   29704:	ldrdeq	r0, [r9]
   29708:	stmeq	sl, {r0, r1}
   2970c:	ldr	r1, [r8]
   29710:	ldr	r2, [fp, #-32]	; 0xffffffe0
   29714:	add	r0, sl, r1, lsl #3
   29718:	sub	r1, r2, r1
   2971c:	lsl	r2, r1, #3
   29720:	mov	r1, #0
   29724:	bl	12904 <memset@plt>
   29728:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2972c:	str	r0, [r8]
   29730:	mov	r9, sl
   29734:	ldr	r6, [r9, r5, lsl #3]!
   29738:	ldr	r4, [r9, #4]!
   2973c:	ldm	r7, {r0, r1}
   29740:	ldr	r2, [r7, #40]	; 0x28
   29744:	ldr	r3, [r7, #44]	; 0x2c
   29748:	orr	r8, r1, #1
   2974c:	add	r1, r7, #8
   29750:	stm	sp, {r0, r8}
   29754:	add	r0, sp, #8
   29758:	str	r1, [sp, #20]
   2975c:	stm	r0, {r1, r2, r3}
   29760:	mov	r0, r4
   29764:	mov	r1, r6
   29768:	ldr	r2, [sp, #32]
   2976c:	ldr	r3, [sp, #36]	; 0x24
   29770:	bl	28444 <__assert_fail@plt+0x15888>
   29774:	cmp	r6, r0
   29778:	bhi	297dc <__assert_fail@plt+0x16c20>
   2977c:	add	r6, r0, #1
   29780:	movw	r0, #19792	; 0x4d50
   29784:	movt	r0, #5
   29788:	str	r6, [sl, r5, lsl #3]
   2978c:	cmp	r4, r0
   29790:	beq	2979c <__assert_fail@plt+0x16be0>
   29794:	mov	r0, r4
   29798:	bl	2c048 <__assert_fail@plt+0x1948c>
   2979c:	mov	r0, r6
   297a0:	bl	2aa10 <__assert_fail@plt+0x17e54>
   297a4:	str	r0, [r9]
   297a8:	mov	r4, r0
   297ac:	add	r3, sp, #8
   297b0:	ldr	r0, [r7]
   297b4:	ldr	r1, [r7, #40]	; 0x28
   297b8:	ldr	r2, [r7, #44]	; 0x2c
   297bc:	stm	sp, {r0, r8}
   297c0:	ldr	r0, [sp, #20]
   297c4:	stm	r3, {r0, r1, r2}
   297c8:	mov	r0, r4
   297cc:	mov	r1, r6
   297d0:	ldr	r2, [sp, #32]
   297d4:	ldr	r3, [sp, #36]	; 0x24
   297d8:	bl	28444 <__assert_fail@plt+0x15888>
   297dc:	ldr	r0, [sp, #28]
   297e0:	ldr	r1, [sp, #24]
   297e4:	str	r1, [r0]
   297e8:	mov	r0, r4
   297ec:	sub	sp, fp, #28
   297f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   297f4:	bl	12b68 <abort@plt>
   297f8:	movw	r3, #19744	; 0x4d20
   297fc:	movt	r3, #5
   29800:	b	29664 <__assert_fail@plt+0x16aa8>
   29804:	movw	r3, #19744	; 0x4d20
   29808:	mov	r1, r0
   2980c:	mov	r0, #0
   29810:	mvn	r2, #0
   29814:	movt	r3, #5
   29818:	b	29664 <__assert_fail@plt+0x16aa8>
   2981c:	movw	r3, #19744	; 0x4d20
   29820:	mov	r2, r1
   29824:	mov	r1, r0
   29828:	mov	r0, #0
   2982c:	movt	r3, #5
   29830:	b	29664 <__assert_fail@plt+0x16aa8>
   29834:	push	{fp, lr}
   29838:	mov	fp, sp
   2983c:	sub	sp, sp, #48	; 0x30
   29840:	vmov.i32	q8, #0	; 0x00000000
   29844:	mov	ip, #32
   29848:	mov	r3, sp
   2984c:	mov	lr, r2
   29850:	cmp	r1, #10
   29854:	add	r2, r3, #16
   29858:	vst1.64	{d16-d17}, [r3], ip
   2985c:	vst1.64	{d16-d17}, [r3]
   29860:	vst1.64	{d16-d17}, [r2]
   29864:	beq	29884 <__assert_fail@plt+0x16cc8>
   29868:	str	r1, [sp]
   2986c:	mov	r3, sp
   29870:	mov	r1, lr
   29874:	mvn	r2, #0
   29878:	bl	29664 <__assert_fail@plt+0x16aa8>
   2987c:	mov	sp, fp
   29880:	pop	{fp, pc}
   29884:	bl	12b68 <abort@plt>
   29888:	push	{r4, sl, fp, lr}
   2988c:	add	fp, sp, #8
   29890:	sub	sp, sp, #48	; 0x30
   29894:	mov	ip, r3
   29898:	mov	r3, sp
   2989c:	vmov.i32	q8, #0	; 0x00000000
   298a0:	mov	lr, #32
   298a4:	cmp	r1, #10
   298a8:	add	r4, r3, #16
   298ac:	vst1.64	{d16-d17}, [r3], lr
   298b0:	vst1.64	{d16-d17}, [r3]
   298b4:	vst1.64	{d16-d17}, [r4]
   298b8:	beq	298d8 <__assert_fail@plt+0x16d1c>
   298bc:	str	r1, [sp]
   298c0:	mov	r1, r2
   298c4:	mov	r3, sp
   298c8:	mov	r2, ip
   298cc:	bl	29664 <__assert_fail@plt+0x16aa8>
   298d0:	sub	sp, fp, #8
   298d4:	pop	{r4, sl, fp, pc}
   298d8:	bl	12b68 <abort@plt>
   298dc:	mov	r2, r1
   298e0:	mov	r1, r0
   298e4:	mov	r0, #0
   298e8:	b	29834 <__assert_fail@plt+0x16c78>
   298ec:	mov	r3, r2
   298f0:	mov	r2, r1
   298f4:	mov	r1, r0
   298f8:	mov	r0, #0
   298fc:	b	29888 <__assert_fail@plt+0x16ccc>
   29900:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29904:	add	fp, sp, #24
   29908:	sub	sp, sp, #48	; 0x30
   2990c:	movw	r8, #19744	; 0x4d20
   29910:	mov	lr, r0
   29914:	mov	r3, sp
   29918:	mov	ip, r1
   2991c:	movt	r8, #5
   29920:	mov	r1, r3
   29924:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   29928:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   2992c:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   29930:	stm	r1, {r0, r4, r5, r6, r7, r9}
   29934:	ubfx	r0, r2, #5, #3
   29938:	and	r2, r2, #31
   2993c:	mov	r4, #1
   29940:	add	r0, r3, r0, lsl #2
   29944:	ldr	r1, [r0, #8]
   29948:	bic	r4, r4, r1, lsr r2
   2994c:	eor	r1, r1, r4, lsl r2
   29950:	mov	r2, ip
   29954:	str	r1, [r0, #8]
   29958:	mov	r0, #0
   2995c:	mov	r1, lr
   29960:	bl	29664 <__assert_fail@plt+0x16aa8>
   29964:	sub	sp, fp, #24
   29968:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2996c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29970:	add	fp, sp, #24
   29974:	sub	sp, sp, #48	; 0x30
   29978:	movw	lr, #19744	; 0x4d20
   2997c:	mov	ip, r0
   29980:	mov	r3, sp
   29984:	movt	lr, #5
   29988:	mov	r2, r3
   2998c:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   29990:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   29994:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   29998:	stm	r2, {r0, r4, r5, r6, r7, r8}
   2999c:	ubfx	r0, r1, #5, #3
   299a0:	and	r1, r1, #31
   299a4:	mov	r7, #1
   299a8:	add	r0, r3, r0, lsl #2
   299ac:	ldr	r2, [r0, #8]
   299b0:	bic	r7, r7, r2, lsr r1
   299b4:	eor	r1, r2, r7, lsl r1
   299b8:	mvn	r2, #0
   299bc:	str	r1, [r0, #8]
   299c0:	mov	r0, #0
   299c4:	mov	r1, ip
   299c8:	bl	29664 <__assert_fail@plt+0x16aa8>
   299cc:	sub	sp, fp, #24
   299d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   299d4:	push	{r4, r5, r6, r7, fp, lr}
   299d8:	add	fp, sp, #16
   299dc:	sub	sp, sp, #48	; 0x30
   299e0:	movw	lr, #19744	; 0x4d20
   299e4:	mov	ip, r0
   299e8:	mov	r3, sp
   299ec:	movt	lr, #5
   299f0:	mov	r2, r3
   299f4:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   299f8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   299fc:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   29a00:	stm	r2, {r0, r1, r4, r5, r6, r7}
   29a04:	mov	r1, ip
   29a08:	mvn	r2, #0
   29a0c:	ldr	r0, [sp, #12]
   29a10:	orr	r0, r0, #67108864	; 0x4000000
   29a14:	str	r0, [sp, #12]
   29a18:	mov	r0, #0
   29a1c:	bl	29664 <__assert_fail@plt+0x16aa8>
   29a20:	sub	sp, fp, #16
   29a24:	pop	{r4, r5, r6, r7, fp, pc}
   29a28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29a2c:	add	fp, sp, #24
   29a30:	sub	sp, sp, #48	; 0x30
   29a34:	movw	r8, #19744	; 0x4d20
   29a38:	mov	ip, r1
   29a3c:	mov	lr, r0
   29a40:	mov	r3, sp
   29a44:	movt	r8, #5
   29a48:	mov	r2, r3
   29a4c:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   29a50:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   29a54:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   29a58:	stm	r2, {r0, r1, r4, r5, r6, r7}
   29a5c:	mov	r1, lr
   29a60:	mov	r2, ip
   29a64:	ldr	r0, [sp, #12]
   29a68:	orr	r0, r0, #67108864	; 0x4000000
   29a6c:	str	r0, [sp, #12]
   29a70:	mov	r0, #0
   29a74:	bl	29664 <__assert_fail@plt+0x16aa8>
   29a78:	sub	sp, fp, #24
   29a7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29a80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29a84:	add	fp, sp, #24
   29a88:	sub	sp, sp, #96	; 0x60
   29a8c:	mov	lr, sp
   29a90:	vmov.i32	q8, #0	; 0x00000000
   29a94:	mov	ip, r2
   29a98:	cmp	r1, #10
   29a9c:	add	r3, lr, #16
   29aa0:	mov	r2, lr
   29aa4:	vst1.64	{d16-d17}, [r3]
   29aa8:	mov	r3, #28
   29aac:	vst1.64	{d16-d17}, [r2], r3
   29ab0:	vst1.32	{d16-d17}, [r2]
   29ab4:	beq	29af4 <__assert_fail@plt+0x16f38>
   29ab8:	str	r1, [sp, #48]	; 0x30
   29abc:	add	r3, sp, #48	; 0x30
   29ac0:	ldm	lr!, {r2, r4, r5, r6, r7}
   29ac4:	add	r1, r3, #4
   29ac8:	stmia	r1!, {r2, r4, r5, r6, r7}
   29acc:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   29ad0:	stm	r1, {r2, r4, r5, r6, r7, r8}
   29ad4:	mvn	r2, #0
   29ad8:	ldr	r1, [sp, #60]	; 0x3c
   29adc:	orr	r1, r1, #67108864	; 0x4000000
   29ae0:	str	r1, [sp, #60]	; 0x3c
   29ae4:	mov	r1, ip
   29ae8:	bl	29664 <__assert_fail@plt+0x16aa8>
   29aec:	sub	sp, fp, #24
   29af0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29af4:	bl	12b68 <abort@plt>
   29af8:	push	{fp, lr}
   29afc:	mov	fp, sp
   29b00:	sub	sp, sp, #8
   29b04:	mvn	ip, #0
   29b08:	str	ip, [sp]
   29b0c:	bl	29b18 <__assert_fail@plt+0x16f5c>
   29b10:	mov	sp, fp
   29b14:	pop	{fp, pc}
   29b18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29b1c:	add	fp, sp, #24
   29b20:	sub	sp, sp, #48	; 0x30
   29b24:	movw	ip, #19744	; 0x4d20
   29b28:	mov	lr, r3
   29b2c:	mov	r3, sp
   29b30:	cmp	r1, #0
   29b34:	movt	ip, #5
   29b38:	cmpne	r2, #0
   29b3c:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   29b40:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   29b44:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   29b48:	stm	r3, {r4, r5, r6, r7, r8, r9}
   29b4c:	mov	r3, #10
   29b50:	str	r3, [sp]
   29b54:	bne	29b5c <__assert_fail@plt+0x16fa0>
   29b58:	bl	12b68 <abort@plt>
   29b5c:	ldr	ip, [fp, #8]
   29b60:	str	r2, [sp, #44]	; 0x2c
   29b64:	str	r1, [sp, #40]	; 0x28
   29b68:	mov	r3, sp
   29b6c:	mov	r1, lr
   29b70:	mov	r2, ip
   29b74:	bl	29664 <__assert_fail@plt+0x16aa8>
   29b78:	sub	sp, fp, #24
   29b7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29b80:	push	{fp, lr}
   29b84:	mov	fp, sp
   29b88:	sub	sp, sp, #8
   29b8c:	mov	r3, r2
   29b90:	mov	r2, r1
   29b94:	mov	r1, r0
   29b98:	mvn	r0, #0
   29b9c:	str	r0, [sp]
   29ba0:	mov	r0, #0
   29ba4:	bl	29b18 <__assert_fail@plt+0x16f5c>
   29ba8:	mov	sp, fp
   29bac:	pop	{fp, pc}
   29bb0:	push	{fp, lr}
   29bb4:	mov	fp, sp
   29bb8:	sub	sp, sp, #8
   29bbc:	mov	ip, r2
   29bc0:	mov	r2, r1
   29bc4:	mov	r1, r0
   29bc8:	str	r3, [sp]
   29bcc:	mov	r0, #0
   29bd0:	mov	r3, ip
   29bd4:	bl	29b18 <__assert_fail@plt+0x16f5c>
   29bd8:	mov	sp, fp
   29bdc:	pop	{fp, pc}
   29be0:	movw	r3, #17688	; 0x4518
   29be4:	movt	r3, #5
   29be8:	b	29664 <__assert_fail@plt+0x16aa8>
   29bec:	movw	r3, #17688	; 0x4518
   29bf0:	mov	r2, r1
   29bf4:	mov	r1, r0
   29bf8:	mov	r0, #0
   29bfc:	movt	r3, #5
   29c00:	b	29664 <__assert_fail@plt+0x16aa8>
   29c04:	movw	r3, #17688	; 0x4518
   29c08:	mvn	r2, #0
   29c0c:	movt	r3, #5
   29c10:	b	29664 <__assert_fail@plt+0x16aa8>
   29c14:	movw	r3, #17688	; 0x4518
   29c18:	mov	r1, r0
   29c1c:	mov	r0, #0
   29c20:	mvn	r2, #0
   29c24:	movt	r3, #5
   29c28:	b	29664 <__assert_fail@plt+0x16aa8>
   29c2c:	push	{r4, r5, fp, lr}
   29c30:	add	fp, sp, #8
   29c34:	mov	r5, r0
   29c38:	mov	r4, r1
   29c3c:	mov	r0, #0
   29c40:	mov	r2, #5
   29c44:	mov	r1, r5
   29c48:	bl	1264c <dcgettext@plt>
   29c4c:	cmp	r0, r5
   29c50:	popne	{r4, r5, fp, pc}
   29c54:	bl	3cd24 <__assert_fail@plt+0x2a168>
   29c58:	ldrb	r1, [r0]
   29c5c:	and	r1, r1, #223	; 0xdf
   29c60:	cmp	r1, #71	; 0x47
   29c64:	beq	29ccc <__assert_fail@plt+0x17110>
   29c68:	cmp	r1, #85	; 0x55
   29c6c:	bne	29cf0 <__assert_fail@plt+0x17134>
   29c70:	ldrb	r1, [r0, #1]
   29c74:	and	r1, r1, #223	; 0xdf
   29c78:	cmp	r1, #84	; 0x54
   29c7c:	bne	29cf0 <__assert_fail@plt+0x17134>
   29c80:	ldrb	r1, [r0, #2]
   29c84:	and	r1, r1, #223	; 0xdf
   29c88:	cmp	r1, #70	; 0x46
   29c8c:	ldrbeq	r1, [r0, #3]
   29c90:	cmpeq	r1, #45	; 0x2d
   29c94:	bne	29cf0 <__assert_fail@plt+0x17134>
   29c98:	ldrb	r1, [r0, #4]
   29c9c:	cmp	r1, #56	; 0x38
   29ca0:	ldrbeq	r0, [r0, #5]
   29ca4:	cmpeq	r0, #0
   29ca8:	bne	29cf0 <__assert_fail@plt+0x17134>
   29cac:	ldrb	r1, [r5]
   29cb0:	movw	r2, #12630	; 0x3156
   29cb4:	movw	r0, #12634	; 0x315a
   29cb8:	movt	r2, #4
   29cbc:	movt	r0, #4
   29cc0:	cmp	r1, #96	; 0x60
   29cc4:	moveq	r0, r2
   29cc8:	pop	{r4, r5, fp, pc}
   29ccc:	ldrb	r1, [r0, #1]
   29cd0:	and	r1, r1, #223	; 0xdf
   29cd4:	cmp	r1, #66	; 0x42
   29cd8:	bne	29cf0 <__assert_fail@plt+0x17134>
   29cdc:	ldrb	r1, [r0, #2]
   29ce0:	cmp	r1, #49	; 0x31
   29ce4:	ldrbeq	r1, [r0, #3]
   29ce8:	cmpeq	r1, #56	; 0x38
   29cec:	beq	29d0c <__assert_fail@plt+0x17150>
   29cf0:	movw	r1, #12482	; 0x30c2
   29cf4:	movw	r0, #65000	; 0xfde8
   29cf8:	cmp	r4, #9
   29cfc:	movt	r1, #4
   29d00:	movt	r0, #3
   29d04:	moveq	r0, r1
   29d08:	pop	{r4, r5, fp, pc}
   29d0c:	ldrb	r1, [r0, #4]
   29d10:	cmp	r1, #48	; 0x30
   29d14:	ldrbeq	r1, [r0, #5]
   29d18:	cmpeq	r1, #51	; 0x33
   29d1c:	bne	29cf0 <__assert_fail@plt+0x17134>
   29d20:	ldrb	r1, [r0, #6]
   29d24:	cmp	r1, #48	; 0x30
   29d28:	ldrbeq	r0, [r0, #7]
   29d2c:	cmpeq	r0, #0
   29d30:	bne	29cf0 <__assert_fail@plt+0x17134>
   29d34:	ldrb	r1, [r5]
   29d38:	movw	r2, #12638	; 0x315e
   29d3c:	movw	r0, #12642	; 0x3162
   29d40:	movt	r2, #4
   29d44:	movt	r0, #4
   29d48:	b	29cc0 <__assert_fail@plt+0x17104>
   29d4c:	push	{r4, r5, fp, lr}
   29d50:	add	fp, sp, #8
   29d54:	mov	r4, #0
   29d58:	mov	r5, r0
   29d5c:	mov	r1, #524288	; 0x80000
   29d60:	str	r4, [r0, #4]
   29d64:	movw	r0, #59684	; 0xe924
   29d68:	movt	r0, #3
   29d6c:	bl	216d8 <__assert_fail@plt+0xeb1c>
   29d70:	cmn	r0, #1
   29d74:	str	r0, [r5]
   29d78:	bgt	29d98 <__assert_fail@plt+0x171dc>
   29d7c:	mov	r0, #0
   29d80:	mov	r1, #0
   29d84:	mov	r4, #0
   29d88:	bl	12850 <getcwd@plt>
   29d8c:	cmp	r0, #0
   29d90:	str	r0, [r5, #4]
   29d94:	mvneq	r4, #0
   29d98:	mov	r0, r4
   29d9c:	pop	{r4, r5, fp, pc}
   29da0:	ldr	r1, [r0]
   29da4:	cmp	r1, #0
   29da8:	blt	29db4 <__assert_fail@plt+0x171f8>
   29dac:	mov	r0, r1
   29db0:	b	12aa8 <fchdir@plt>
   29db4:	ldr	r0, [r0, #4]
   29db8:	b	2baf8 <__assert_fail@plt+0x18f3c>
   29dbc:	push	{r4, sl, fp, lr}
   29dc0:	add	fp, sp, #8
   29dc4:	mov	r4, r0
   29dc8:	ldr	r0, [r0]
   29dcc:	cmp	r0, #0
   29dd0:	blt	29dd8 <__assert_fail@plt+0x1721c>
   29dd4:	bl	12b74 <close@plt>
   29dd8:	ldr	r0, [r4, #4]
   29ddc:	pop	{r4, sl, fp, lr}
   29de0:	b	2c048 <__assert_fail@plt+0x1948c>
   29de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29de8:	add	fp, sp, #28
   29dec:	sub	sp, sp, #964	; 0x3c4
   29df0:	sub	sp, sp, #3072	; 0xc00
   29df4:	mov	r4, r2
   29df8:	mov	r5, r1
   29dfc:	cmn	r0, #100	; 0x64
   29e00:	beq	29e14 <__assert_fail@plt+0x17258>
   29e04:	mov	r7, r0
   29e08:	ldrb	r0, [r5]
   29e0c:	cmp	r0, #47	; 0x2f
   29e10:	bne	29e28 <__assert_fail@plt+0x1726c>
   29e14:	mov	r0, r5
   29e18:	mov	r1, r4
   29e1c:	sub	sp, fp, #28
   29e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e24:	b	2e120 <__assert_fail@plt+0x1b564>
   29e28:	mov	sl, sp
   29e2c:	mov	r1, r7
   29e30:	mov	r2, r5
   29e34:	mov	r0, sl
   29e38:	bl	3c800 <__assert_fail@plt+0x29c44>
   29e3c:	cmp	r0, #0
   29e40:	beq	29ebc <__assert_fail@plt+0x17300>
   29e44:	mov	r1, r4
   29e48:	mov	r6, r0
   29e4c:	bl	2e120 <__assert_fail@plt+0x1b564>
   29e50:	mov	r9, r0
   29e54:	bl	128d4 <__errno_location@plt>
   29e58:	ldr	r3, [r0]
   29e5c:	mov	r8, r0
   29e60:	cmp	r6, sl
   29e64:	beq	29e78 <__assert_fail@plt+0x172bc>
   29e68:	mov	r0, r6
   29e6c:	mov	r6, r3
   29e70:	bl	2c048 <__assert_fail@plt+0x1948c>
   29e74:	mov	r3, r6
   29e78:	cmn	r9, #1
   29e7c:	bne	29f78 <__assert_fail@plt+0x173bc>
   29e80:	sub	r0, r3, #13
   29e84:	cmp	r0, #25
   29e88:	bls	29ea8 <__assert_fail@plt+0x172ec>
   29e8c:	sub	r0, r3, #1
   29e90:	cmp	r0, #2
   29e94:	bcc	29ebc <__assert_fail@plt+0x17300>
   29e98:	cmp	r3, #95	; 0x5f
   29e9c:	beq	29ebc <__assert_fail@plt+0x17300>
   29ea0:	str	r3, [r8]
   29ea4:	b	29f78 <__assert_fail@plt+0x173bc>
   29ea8:	movw	r2, #129	; 0x81
   29eac:	mov	r1, #1
   29eb0:	movt	r2, #512	; 0x200
   29eb4:	tst	r2, r1, lsl r0
   29eb8:	beq	29e8c <__assert_fail@plt+0x172d0>
   29ebc:	mov	r0, sp
   29ec0:	bl	29d4c <__assert_fail@plt+0x17190>
   29ec4:	cmp	r0, #0
   29ec8:	bne	29f84 <__assert_fail@plt+0x173c8>
   29ecc:	cmp	r7, #0
   29ed0:	blt	29efc <__assert_fail@plt+0x17340>
   29ed4:	ldr	r0, [sp]
   29ed8:	cmp	r0, r7
   29edc:	bne	29efc <__assert_fail@plt+0x17340>
   29ee0:	mov	r0, sp
   29ee4:	bl	29dbc <__assert_fail@plt+0x17200>
   29ee8:	bl	128d4 <__errno_location@plt>
   29eec:	mov	r1, #9
   29ef0:	mvn	r9, #0
   29ef4:	str	r1, [r0]
   29ef8:	b	29f78 <__assert_fail@plt+0x173bc>
   29efc:	mov	r0, r7
   29f00:	bl	12aa8 <fchdir@plt>
   29f04:	cmp	r0, #0
   29f08:	beq	29f2c <__assert_fail@plt+0x17370>
   29f0c:	bl	128d4 <__errno_location@plt>
   29f10:	ldr	r5, [r0]
   29f14:	mov	r4, r0
   29f18:	mov	r0, sp
   29f1c:	bl	29dbc <__assert_fail@plt+0x17200>
   29f20:	str	r5, [r4]
   29f24:	mvn	r9, #0
   29f28:	b	29f78 <__assert_fail@plt+0x173bc>
   29f2c:	mov	r0, r5
   29f30:	mov	r1, r4
   29f34:	bl	2e120 <__assert_fail@plt+0x1b564>
   29f38:	mov	r9, r0
   29f3c:	mov	r4, #0
   29f40:	cmn	r0, #1
   29f44:	bne	29f50 <__assert_fail@plt+0x17394>
   29f48:	bl	128d4 <__errno_location@plt>
   29f4c:	ldr	r4, [r0]
   29f50:	mov	r0, sp
   29f54:	bl	29da0 <__assert_fail@plt+0x171e4>
   29f58:	cmp	r0, #0
   29f5c:	bne	29f90 <__assert_fail@plt+0x173d4>
   29f60:	mov	r0, sp
   29f64:	bl	29dbc <__assert_fail@plt+0x17200>
   29f68:	cmp	r4, #0
   29f6c:	beq	29f78 <__assert_fail@plt+0x173bc>
   29f70:	bl	128d4 <__errno_location@plt>
   29f74:	str	r4, [r0]
   29f78:	mov	r0, r9
   29f7c:	sub	sp, fp, #28
   29f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f84:	bl	128d4 <__errno_location@plt>
   29f88:	ldr	r0, [r0]
   29f8c:	bl	24b88 <__assert_fail@plt+0x11fcc>
   29f90:	bl	128d4 <__errno_location@plt>
   29f94:	ldr	r0, [r0]
   29f98:	bl	24bc8 <__assert_fail@plt+0x1200c>
   29f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fa0:	add	fp, sp, #28
   29fa4:	sub	sp, sp, #964	; 0x3c4
   29fa8:	sub	sp, sp, #3072	; 0xc00
   29fac:	mov	r4, r2
   29fb0:	mov	r5, r1
   29fb4:	cmn	r0, #100	; 0x64
   29fb8:	beq	29fcc <__assert_fail@plt+0x17410>
   29fbc:	mov	r7, r0
   29fc0:	ldrb	r0, [r5]
   29fc4:	cmp	r0, #47	; 0x2f
   29fc8:	bne	29fe0 <__assert_fail@plt+0x17424>
   29fcc:	mov	r0, r5
   29fd0:	mov	r1, r4
   29fd4:	sub	sp, fp, #28
   29fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fdc:	b	2e1ac <__assert_fail@plt+0x1b5f0>
   29fe0:	mov	sl, sp
   29fe4:	mov	r1, r7
   29fe8:	mov	r2, r5
   29fec:	mov	r0, sl
   29ff0:	bl	3c800 <__assert_fail@plt+0x29c44>
   29ff4:	cmp	r0, #0
   29ff8:	beq	2a074 <__assert_fail@plt+0x174b8>
   29ffc:	mov	r1, r4
   2a000:	mov	r6, r0
   2a004:	bl	2e1ac <__assert_fail@plt+0x1b5f0>
   2a008:	mov	r9, r0
   2a00c:	bl	128d4 <__errno_location@plt>
   2a010:	ldr	r3, [r0]
   2a014:	mov	r8, r0
   2a018:	cmp	r6, sl
   2a01c:	beq	2a030 <__assert_fail@plt+0x17474>
   2a020:	mov	r0, r6
   2a024:	mov	r6, r3
   2a028:	bl	2c048 <__assert_fail@plt+0x1948c>
   2a02c:	mov	r3, r6
   2a030:	cmn	r9, #1
   2a034:	bne	2a130 <__assert_fail@plt+0x17574>
   2a038:	sub	r0, r3, #13
   2a03c:	cmp	r0, #25
   2a040:	bls	2a060 <__assert_fail@plt+0x174a4>
   2a044:	sub	r0, r3, #1
   2a048:	cmp	r0, #2
   2a04c:	bcc	2a074 <__assert_fail@plt+0x174b8>
   2a050:	cmp	r3, #95	; 0x5f
   2a054:	beq	2a074 <__assert_fail@plt+0x174b8>
   2a058:	str	r3, [r8]
   2a05c:	b	2a130 <__assert_fail@plt+0x17574>
   2a060:	movw	r2, #129	; 0x81
   2a064:	mov	r1, #1
   2a068:	movt	r2, #512	; 0x200
   2a06c:	tst	r2, r1, lsl r0
   2a070:	beq	2a044 <__assert_fail@plt+0x17488>
   2a074:	mov	r0, sp
   2a078:	bl	29d4c <__assert_fail@plt+0x17190>
   2a07c:	cmp	r0, #0
   2a080:	bne	2a13c <__assert_fail@plt+0x17580>
   2a084:	cmp	r7, #0
   2a088:	blt	2a0b4 <__assert_fail@plt+0x174f8>
   2a08c:	ldr	r0, [sp]
   2a090:	cmp	r0, r7
   2a094:	bne	2a0b4 <__assert_fail@plt+0x174f8>
   2a098:	mov	r0, sp
   2a09c:	bl	29dbc <__assert_fail@plt+0x17200>
   2a0a0:	bl	128d4 <__errno_location@plt>
   2a0a4:	mov	r1, #9
   2a0a8:	mvn	r9, #0
   2a0ac:	str	r1, [r0]
   2a0b0:	b	2a130 <__assert_fail@plt+0x17574>
   2a0b4:	mov	r0, r7
   2a0b8:	bl	12aa8 <fchdir@plt>
   2a0bc:	cmp	r0, #0
   2a0c0:	beq	2a0e4 <__assert_fail@plt+0x17528>
   2a0c4:	bl	128d4 <__errno_location@plt>
   2a0c8:	ldr	r5, [r0]
   2a0cc:	mov	r4, r0
   2a0d0:	mov	r0, sp
   2a0d4:	bl	29dbc <__assert_fail@plt+0x17200>
   2a0d8:	str	r5, [r4]
   2a0dc:	mvn	r9, #0
   2a0e0:	b	2a130 <__assert_fail@plt+0x17574>
   2a0e4:	mov	r0, r5
   2a0e8:	mov	r1, r4
   2a0ec:	bl	2e1ac <__assert_fail@plt+0x1b5f0>
   2a0f0:	mov	r9, r0
   2a0f4:	mov	r4, #0
   2a0f8:	cmn	r0, #1
   2a0fc:	bne	2a108 <__assert_fail@plt+0x1754c>
   2a100:	bl	128d4 <__errno_location@plt>
   2a104:	ldr	r4, [r0]
   2a108:	mov	r0, sp
   2a10c:	bl	29da0 <__assert_fail@plt+0x171e4>
   2a110:	cmp	r0, #0
   2a114:	bne	2a148 <__assert_fail@plt+0x1758c>
   2a118:	mov	r0, sp
   2a11c:	bl	29dbc <__assert_fail@plt+0x17200>
   2a120:	cmp	r4, #0
   2a124:	beq	2a130 <__assert_fail@plt+0x17574>
   2a128:	bl	128d4 <__errno_location@plt>
   2a12c:	str	r4, [r0]
   2a130:	mov	r0, r9
   2a134:	sub	sp, fp, #28
   2a138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a13c:	bl	128d4 <__errno_location@plt>
   2a140:	ldr	r0, [r0]
   2a144:	bl	24b88 <__assert_fail@plt+0x11fcc>
   2a148:	bl	128d4 <__errno_location@plt>
   2a14c:	ldr	r0, [r0]
   2a150:	bl	24bc8 <__assert_fail@plt+0x1200c>
   2a154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a158:	add	fp, sp, #28
   2a15c:	sub	sp, sp, #964	; 0x3c4
   2a160:	sub	sp, sp, #3072	; 0xc00
   2a164:	mov	r4, r2
   2a168:	mov	r5, r1
   2a16c:	cmn	r0, #100	; 0x64
   2a170:	beq	2a184 <__assert_fail@plt+0x175c8>
   2a174:	mov	r7, r0
   2a178:	ldrb	r0, [r5]
   2a17c:	cmp	r0, #47	; 0x2f
   2a180:	bne	2a198 <__assert_fail@plt+0x175dc>
   2a184:	mov	r0, r5
   2a188:	mov	r1, r4
   2a18c:	sub	sp, fp, #28
   2a190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a194:	b	12988 <setfilecon@plt>
   2a198:	mov	sl, sp
   2a19c:	mov	r1, r7
   2a1a0:	mov	r2, r5
   2a1a4:	mov	r0, sl
   2a1a8:	bl	3c800 <__assert_fail@plt+0x29c44>
   2a1ac:	cmp	r0, #0
   2a1b0:	beq	2a22c <__assert_fail@plt+0x17670>
   2a1b4:	mov	r1, r4
   2a1b8:	mov	r6, r0
   2a1bc:	bl	12988 <setfilecon@plt>
   2a1c0:	mov	r9, r0
   2a1c4:	bl	128d4 <__errno_location@plt>
   2a1c8:	ldr	r3, [r0]
   2a1cc:	mov	r8, r0
   2a1d0:	cmp	r6, sl
   2a1d4:	beq	2a1e8 <__assert_fail@plt+0x1762c>
   2a1d8:	mov	r0, r6
   2a1dc:	mov	r6, r3
   2a1e0:	bl	2c048 <__assert_fail@plt+0x1948c>
   2a1e4:	mov	r3, r6
   2a1e8:	cmn	r9, #1
   2a1ec:	bne	2a2e8 <__assert_fail@plt+0x1772c>
   2a1f0:	sub	r0, r3, #13
   2a1f4:	cmp	r0, #25
   2a1f8:	bls	2a218 <__assert_fail@plt+0x1765c>
   2a1fc:	sub	r0, r3, #1
   2a200:	cmp	r0, #2
   2a204:	bcc	2a22c <__assert_fail@plt+0x17670>
   2a208:	cmp	r3, #95	; 0x5f
   2a20c:	beq	2a22c <__assert_fail@plt+0x17670>
   2a210:	str	r3, [r8]
   2a214:	b	2a2e8 <__assert_fail@plt+0x1772c>
   2a218:	movw	r2, #129	; 0x81
   2a21c:	mov	r1, #1
   2a220:	movt	r2, #512	; 0x200
   2a224:	tst	r2, r1, lsl r0
   2a228:	beq	2a1fc <__assert_fail@plt+0x17640>
   2a22c:	mov	r0, sp
   2a230:	bl	29d4c <__assert_fail@plt+0x17190>
   2a234:	cmp	r0, #0
   2a238:	bne	2a2f4 <__assert_fail@plt+0x17738>
   2a23c:	cmp	r7, #0
   2a240:	blt	2a26c <__assert_fail@plt+0x176b0>
   2a244:	ldr	r0, [sp]
   2a248:	cmp	r0, r7
   2a24c:	bne	2a26c <__assert_fail@plt+0x176b0>
   2a250:	mov	r0, sp
   2a254:	bl	29dbc <__assert_fail@plt+0x17200>
   2a258:	bl	128d4 <__errno_location@plt>
   2a25c:	mov	r1, #9
   2a260:	mvn	r9, #0
   2a264:	str	r1, [r0]
   2a268:	b	2a2e8 <__assert_fail@plt+0x1772c>
   2a26c:	mov	r0, r7
   2a270:	bl	12aa8 <fchdir@plt>
   2a274:	cmp	r0, #0
   2a278:	beq	2a29c <__assert_fail@plt+0x176e0>
   2a27c:	bl	128d4 <__errno_location@plt>
   2a280:	ldr	r5, [r0]
   2a284:	mov	r4, r0
   2a288:	mov	r0, sp
   2a28c:	bl	29dbc <__assert_fail@plt+0x17200>
   2a290:	str	r5, [r4]
   2a294:	mvn	r9, #0
   2a298:	b	2a2e8 <__assert_fail@plt+0x1772c>
   2a29c:	mov	r0, r5
   2a2a0:	mov	r1, r4
   2a2a4:	bl	12988 <setfilecon@plt>
   2a2a8:	mov	r9, r0
   2a2ac:	mov	r4, #0
   2a2b0:	cmn	r0, #1
   2a2b4:	bne	2a2c0 <__assert_fail@plt+0x17704>
   2a2b8:	bl	128d4 <__errno_location@plt>
   2a2bc:	ldr	r4, [r0]
   2a2c0:	mov	r0, sp
   2a2c4:	bl	29da0 <__assert_fail@plt+0x171e4>
   2a2c8:	cmp	r0, #0
   2a2cc:	bne	2a300 <__assert_fail@plt+0x17744>
   2a2d0:	mov	r0, sp
   2a2d4:	bl	29dbc <__assert_fail@plt+0x17200>
   2a2d8:	cmp	r4, #0
   2a2dc:	beq	2a2e8 <__assert_fail@plt+0x1772c>
   2a2e0:	bl	128d4 <__errno_location@plt>
   2a2e4:	str	r4, [r0]
   2a2e8:	mov	r0, r9
   2a2ec:	sub	sp, fp, #28
   2a2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2f4:	bl	128d4 <__errno_location@plt>
   2a2f8:	ldr	r0, [r0]
   2a2fc:	bl	24b88 <__assert_fail@plt+0x11fcc>
   2a300:	bl	128d4 <__errno_location@plt>
   2a304:	ldr	r0, [r0]
   2a308:	bl	24bc8 <__assert_fail@plt+0x1200c>
   2a30c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a310:	add	fp, sp, #28
   2a314:	sub	sp, sp, #964	; 0x3c4
   2a318:	sub	sp, sp, #3072	; 0xc00
   2a31c:	mov	r4, r2
   2a320:	mov	r5, r1
   2a324:	cmn	r0, #100	; 0x64
   2a328:	beq	2a33c <__assert_fail@plt+0x17780>
   2a32c:	mov	r7, r0
   2a330:	ldrb	r0, [r5]
   2a334:	cmp	r0, #47	; 0x2f
   2a338:	bne	2a350 <__assert_fail@plt+0x17794>
   2a33c:	mov	r0, r5
   2a340:	mov	r1, r4
   2a344:	sub	sp, fp, #28
   2a348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a34c:	b	12550 <lsetfilecon@plt>
   2a350:	mov	sl, sp
   2a354:	mov	r1, r7
   2a358:	mov	r2, r5
   2a35c:	mov	r0, sl
   2a360:	bl	3c800 <__assert_fail@plt+0x29c44>
   2a364:	cmp	r0, #0
   2a368:	beq	2a3e4 <__assert_fail@plt+0x17828>
   2a36c:	mov	r1, r4
   2a370:	mov	r6, r0
   2a374:	bl	12550 <lsetfilecon@plt>
   2a378:	mov	r9, r0
   2a37c:	bl	128d4 <__errno_location@plt>
   2a380:	ldr	r3, [r0]
   2a384:	mov	r8, r0
   2a388:	cmp	r6, sl
   2a38c:	beq	2a3a0 <__assert_fail@plt+0x177e4>
   2a390:	mov	r0, r6
   2a394:	mov	r6, r3
   2a398:	bl	2c048 <__assert_fail@plt+0x1948c>
   2a39c:	mov	r3, r6
   2a3a0:	cmn	r9, #1
   2a3a4:	bne	2a4a0 <__assert_fail@plt+0x178e4>
   2a3a8:	sub	r0, r3, #13
   2a3ac:	cmp	r0, #25
   2a3b0:	bls	2a3d0 <__assert_fail@plt+0x17814>
   2a3b4:	sub	r0, r3, #1
   2a3b8:	cmp	r0, #2
   2a3bc:	bcc	2a3e4 <__assert_fail@plt+0x17828>
   2a3c0:	cmp	r3, #95	; 0x5f
   2a3c4:	beq	2a3e4 <__assert_fail@plt+0x17828>
   2a3c8:	str	r3, [r8]
   2a3cc:	b	2a4a0 <__assert_fail@plt+0x178e4>
   2a3d0:	movw	r2, #129	; 0x81
   2a3d4:	mov	r1, #1
   2a3d8:	movt	r2, #512	; 0x200
   2a3dc:	tst	r2, r1, lsl r0
   2a3e0:	beq	2a3b4 <__assert_fail@plt+0x177f8>
   2a3e4:	mov	r0, sp
   2a3e8:	bl	29d4c <__assert_fail@plt+0x17190>
   2a3ec:	cmp	r0, #0
   2a3f0:	bne	2a4ac <__assert_fail@plt+0x178f0>
   2a3f4:	cmp	r7, #0
   2a3f8:	blt	2a424 <__assert_fail@plt+0x17868>
   2a3fc:	ldr	r0, [sp]
   2a400:	cmp	r0, r7
   2a404:	bne	2a424 <__assert_fail@plt+0x17868>
   2a408:	mov	r0, sp
   2a40c:	bl	29dbc <__assert_fail@plt+0x17200>
   2a410:	bl	128d4 <__errno_location@plt>
   2a414:	mov	r1, #9
   2a418:	mvn	r9, #0
   2a41c:	str	r1, [r0]
   2a420:	b	2a4a0 <__assert_fail@plt+0x178e4>
   2a424:	mov	r0, r7
   2a428:	bl	12aa8 <fchdir@plt>
   2a42c:	cmp	r0, #0
   2a430:	beq	2a454 <__assert_fail@plt+0x17898>
   2a434:	bl	128d4 <__errno_location@plt>
   2a438:	ldr	r5, [r0]
   2a43c:	mov	r4, r0
   2a440:	mov	r0, sp
   2a444:	bl	29dbc <__assert_fail@plt+0x17200>
   2a448:	str	r5, [r4]
   2a44c:	mvn	r9, #0
   2a450:	b	2a4a0 <__assert_fail@plt+0x178e4>
   2a454:	mov	r0, r5
   2a458:	mov	r1, r4
   2a45c:	bl	12550 <lsetfilecon@plt>
   2a460:	mov	r9, r0
   2a464:	mov	r4, #0
   2a468:	cmn	r0, #1
   2a46c:	bne	2a478 <__assert_fail@plt+0x178bc>
   2a470:	bl	128d4 <__errno_location@plt>
   2a474:	ldr	r4, [r0]
   2a478:	mov	r0, sp
   2a47c:	bl	29da0 <__assert_fail@plt+0x171e4>
   2a480:	cmp	r0, #0
   2a484:	bne	2a4b8 <__assert_fail@plt+0x178fc>
   2a488:	mov	r0, sp
   2a48c:	bl	29dbc <__assert_fail@plt+0x17200>
   2a490:	cmp	r4, #0
   2a494:	beq	2a4a0 <__assert_fail@plt+0x178e4>
   2a498:	bl	128d4 <__errno_location@plt>
   2a49c:	str	r4, [r0]
   2a4a0:	mov	r0, r9
   2a4a4:	sub	sp, fp, #28
   2a4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4ac:	bl	128d4 <__errno_location@plt>
   2a4b0:	ldr	r0, [r0]
   2a4b4:	bl	24b88 <__assert_fail@plt+0x11fcc>
   2a4b8:	bl	128d4 <__errno_location@plt>
   2a4bc:	ldr	r0, [r0]
   2a4c0:	bl	24bc8 <__assert_fail@plt+0x1200c>
   2a4c4:	push	{r4, r5, fp, lr}
   2a4c8:	add	fp, sp, #8
   2a4cc:	mov	r4, r1
   2a4d0:	mov	r1, #0
   2a4d4:	mov	r5, r0
   2a4d8:	mov	r2, r4
   2a4dc:	bl	1297c <memchr@plt>
   2a4e0:	rsb	r1, r5, #1
   2a4e4:	cmp	r0, #0
   2a4e8:	addne	r4, r1, r0
   2a4ec:	mov	r0, r4
   2a4f0:	pop	{r4, r5, fp, pc}
   2a4f4:	mov	r1, #0
   2a4f8:	mov	r2, #3
   2a4fc:	b	2be14 <__assert_fail@plt+0x19258>
   2a500:	push	{r4, r5, r6, r7, fp, lr}
   2a504:	add	fp, sp, #16
   2a508:	mov	r4, r0
   2a50c:	cmp	r0, #2
   2a510:	movhi	r0, r4
   2a514:	pophi	{r4, r5, r6, r7, fp, pc}
   2a518:	mov	r0, r4
   2a51c:	bl	2a4f4 <__assert_fail@plt+0x17938>
   2a520:	mov	r5, r0
   2a524:	bl	128d4 <__errno_location@plt>
   2a528:	ldr	r7, [r0]
   2a52c:	mov	r6, r0
   2a530:	mov	r0, r4
   2a534:	bl	12b74 <close@plt>
   2a538:	mov	r0, r5
   2a53c:	str	r7, [r6]
   2a540:	pop	{r4, r5, r6, r7, fp, pc}
   2a544:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a548:	add	fp, sp, #24
   2a54c:	sub	sp, sp, #32
   2a550:	ldr	r7, [fp, #12]
   2a554:	ldr	r6, [fp, #8]
   2a558:	mov	r4, r2
   2a55c:	mov	r5, r0
   2a560:	cmp	r1, #0
   2a564:	beq	2a584 <__assert_fail@plt+0x179c8>
   2a568:	mov	r2, r1
   2a56c:	movw	r1, #12732	; 0x31bc
   2a570:	str	r3, [sp]
   2a574:	mov	r0, r5
   2a578:	mov	r3, r4
   2a57c:	movt	r1, #4
   2a580:	b	2a594 <__assert_fail@plt+0x179d8>
   2a584:	movw	r1, #12744	; 0x31c8
   2a588:	mov	r0, r5
   2a58c:	mov	r2, r4
   2a590:	movt	r1, #4
   2a594:	bl	128c8 <fprintf@plt>
   2a598:	movw	r1, #12751	; 0x31cf
   2a59c:	mov	r0, #0
   2a5a0:	mov	r2, #5
   2a5a4:	movt	r1, #4
   2a5a8:	bl	1264c <dcgettext@plt>
   2a5ac:	movw	r1, #13447	; 0x3487
   2a5b0:	mov	r2, r0
   2a5b4:	mov	r0, r5
   2a5b8:	movw	r3, #2022	; 0x7e6
   2a5bc:	movt	r1, #4
   2a5c0:	bl	128c8 <fprintf@plt>
   2a5c4:	movw	r4, #63054	; 0xf64e
   2a5c8:	mov	r1, r5
   2a5cc:	movt	r4, #3
   2a5d0:	mov	r0, r4
   2a5d4:	bl	12b50 <fputs@plt>
   2a5d8:	movw	r1, #12755	; 0x31d3
   2a5dc:	mov	r0, #0
   2a5e0:	mov	r2, #5
   2a5e4:	movt	r1, #4
   2a5e8:	bl	1264c <dcgettext@plt>
   2a5ec:	movw	r2, #12926	; 0x327e
   2a5f0:	mov	r1, r0
   2a5f4:	mov	r0, r5
   2a5f8:	movt	r2, #4
   2a5fc:	bl	128c8 <fprintf@plt>
   2a600:	mov	r0, r4
   2a604:	mov	r1, r5
   2a608:	bl	12b50 <fputs@plt>
   2a60c:	cmp	r7, #9
   2a610:	bhi	2a670 <__assert_fail@plt+0x17ab4>
   2a614:	add	r0, pc, #0
   2a618:	ldr	pc, [r0, r7, lsl #2]
   2a61c:	andeq	sl, r2, r0, ror #16
   2a620:	andeq	sl, r2, r4, asr #12
   2a624:	andeq	sl, r2, ip, ror r6
   2a628:	andeq	sl, r2, r8, lsr #13
   2a62c:	ldrdeq	sl, [r2], -r0
   2a630:	strdeq	sl, [r2], -ip
   2a634:	andeq	sl, r2, r0, lsr r7
   2a638:	andeq	sl, r2, r0, ror r7
   2a63c:	andeq	sl, r2, ip, lsl #16
   2a640:			; <UNDEFINED> instruction: 0x0002a7b4
   2a644:	movw	r1, #12960	; 0x32a0
   2a648:	mov	r0, #0
   2a64c:	mov	r2, #5
   2a650:	movt	r1, #4
   2a654:	bl	1264c <dcgettext@plt>
   2a658:	ldr	r2, [r6]
   2a65c:	mov	r1, r0
   2a660:	mov	r0, r5
   2a664:	sub	sp, fp, #24
   2a668:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a66c:	b	128c8 <fprintf@plt>
   2a670:	movw	r1, #13279	; 0x33df
   2a674:	movt	r1, #4
   2a678:	b	2a7bc <__assert_fail@plt+0x17c00>
   2a67c:	movw	r1, #12976	; 0x32b0
   2a680:	mov	r0, #0
   2a684:	mov	r2, #5
   2a688:	movt	r1, #4
   2a68c:	bl	1264c <dcgettext@plt>
   2a690:	ldm	r6, {r2, r3}
   2a694:	mov	r1, r0
   2a698:	mov	r0, r5
   2a69c:	sub	sp, fp, #24
   2a6a0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a6a4:	b	128c8 <fprintf@plt>
   2a6a8:	movw	r1, #12999	; 0x32c7
   2a6ac:	mov	r0, #0
   2a6b0:	mov	r2, #5
   2a6b4:	movt	r1, #4
   2a6b8:	bl	1264c <dcgettext@plt>
   2a6bc:	mov	r1, r0
   2a6c0:	ldm	r6, {r2, r3}
   2a6c4:	ldr	r0, [r6, #8]
   2a6c8:	str	r0, [sp]
   2a6cc:	b	2a768 <__assert_fail@plt+0x17bac>
   2a6d0:	movw	r1, #13027	; 0x32e3
   2a6d4:	mov	r0, #0
   2a6d8:	mov	r2, #5
   2a6dc:	movt	r1, #4
   2a6e0:	bl	1264c <dcgettext@plt>
   2a6e4:	ldm	r6, {r2, r3}
   2a6e8:	mov	r1, r0
   2a6ec:	ldr	r0, [r6, #8]
   2a6f0:	ldr	r7, [r6, #12]
   2a6f4:	stm	sp, {r0, r7}
   2a6f8:	b	2a768 <__assert_fail@plt+0x17bac>
   2a6fc:	movw	r1, #13059	; 0x3303
   2a700:	mov	r0, #0
   2a704:	mov	r2, #5
   2a708:	movt	r1, #4
   2a70c:	bl	1264c <dcgettext@plt>
   2a710:	ldm	r6, {r2, r3}
   2a714:	mov	r1, r0
   2a718:	ldr	r0, [r6, #8]
   2a71c:	ldr	r7, [r6, #12]
   2a720:	ldr	r6, [r6, #16]
   2a724:	stm	sp, {r0, r7}
   2a728:	str	r6, [sp, #8]
   2a72c:	b	2a768 <__assert_fail@plt+0x17bac>
   2a730:	movw	r1, #13095	; 0x3327
   2a734:	mov	r0, #0
   2a738:	mov	r2, #5
   2a73c:	movt	r1, #4
   2a740:	bl	1264c <dcgettext@plt>
   2a744:	ldm	r6, {r2, r3}
   2a748:	mov	r1, r0
   2a74c:	ldr	r0, [r6, #8]
   2a750:	ldr	r7, [r6, #12]
   2a754:	ldr	r4, [r6, #16]
   2a758:	ldr	r6, [r6, #20]
   2a75c:	stm	sp, {r0, r7}
   2a760:	str	r4, [sp, #8]
   2a764:	str	r6, [sp, #12]
   2a768:	mov	r0, r5
   2a76c:	b	2a85c <__assert_fail@plt+0x17ca0>
   2a770:	movw	r1, #13135	; 0x334f
   2a774:	mov	r0, #0
   2a778:	mov	r2, #5
   2a77c:	movt	r1, #4
   2a780:	bl	1264c <dcgettext@plt>
   2a784:	ldm	r6, {r2, r3}
   2a788:	mov	ip, r0
   2a78c:	ldr	r0, [r6, #8]
   2a790:	ldr	r7, [r6, #12]
   2a794:	ldr	r4, [r6, #16]
   2a798:	ldr	r1, [r6, #20]
   2a79c:	ldr	r6, [r6, #24]
   2a7a0:	stm	sp, {r0, r7}
   2a7a4:	str	r4, [sp, #8]
   2a7a8:	str	r1, [sp, #12]
   2a7ac:	str	r6, [sp, #16]
   2a7b0:	b	2a854 <__assert_fail@plt+0x17c98>
   2a7b4:	movw	r1, #13227	; 0x33ab
   2a7b8:	movt	r1, #4
   2a7bc:	mov	r0, #0
   2a7c0:	mov	r2, #5
   2a7c4:	bl	1264c <dcgettext@plt>
   2a7c8:	mov	ip, r0
   2a7cc:	ldr	r2, [r6]
   2a7d0:	ldr	r3, [r6, #4]
   2a7d4:	ldr	r0, [r6, #8]
   2a7d8:	ldr	r7, [r6, #12]
   2a7dc:	ldr	r4, [r6, #16]
   2a7e0:	ldr	r1, [r6, #20]
   2a7e4:	ldr	lr, [r6, #24]
   2a7e8:	ldr	r8, [r6, #28]
   2a7ec:	ldr	r6, [r6, #32]
   2a7f0:	stm	sp, {r0, r7}
   2a7f4:	str	r4, [sp, #8]
   2a7f8:	str	r1, [sp, #12]
   2a7fc:	str	lr, [sp, #16]
   2a800:	str	r8, [sp, #20]
   2a804:	str	r6, [sp, #24]
   2a808:	b	2a854 <__assert_fail@plt+0x17c98>
   2a80c:	movw	r1, #13179	; 0x337b
   2a810:	mov	r0, #0
   2a814:	mov	r2, #5
   2a818:	movt	r1, #4
   2a81c:	bl	1264c <dcgettext@plt>
   2a820:	ldm	r6, {r2, r3}
   2a824:	mov	ip, r0
   2a828:	ldr	r0, [r6, #8]
   2a82c:	ldr	r7, [r6, #12]
   2a830:	ldr	r4, [r6, #16]
   2a834:	ldr	r1, [r6, #20]
   2a838:	ldr	lr, [r6, #24]
   2a83c:	ldr	r6, [r6, #28]
   2a840:	stm	sp, {r0, r7}
   2a844:	str	r4, [sp, #8]
   2a848:	str	r1, [sp, #12]
   2a84c:	str	lr, [sp, #16]
   2a850:	str	r6, [sp, #20]
   2a854:	mov	r0, r5
   2a858:	mov	r1, ip
   2a85c:	bl	128c8 <fprintf@plt>
   2a860:	sub	sp, fp, #24
   2a864:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a868:	push	{r4, sl, fp, lr}
   2a86c:	add	fp, sp, #8
   2a870:	sub	sp, sp, #8
   2a874:	ldr	ip, [fp, #8]
   2a878:	mov	lr, #0
   2a87c:	ldr	r4, [ip, lr, lsl #2]
   2a880:	add	lr, lr, #1
   2a884:	cmp	r4, #0
   2a888:	bne	2a87c <__assert_fail@plt+0x17cc0>
   2a88c:	sub	r4, lr, #1
   2a890:	str	ip, [sp]
   2a894:	str	r4, [sp, #4]
   2a898:	bl	2a544 <__assert_fail@plt+0x17988>
   2a89c:	sub	sp, fp, #8
   2a8a0:	pop	{r4, sl, fp, pc}
   2a8a4:	push	{r4, r5, fp, lr}
   2a8a8:	add	fp, sp, #8
   2a8ac:	sub	sp, sp, #48	; 0x30
   2a8b0:	ldr	r4, [fp, #8]
   2a8b4:	mov	ip, #0
   2a8b8:	add	lr, sp, #8
   2a8bc:	ldr	r5, [r4]
   2a8c0:	cmp	r5, #0
   2a8c4:	str	r5, [lr, ip, lsl #2]
   2a8c8:	beq	2a8dc <__assert_fail@plt+0x17d20>
   2a8cc:	add	ip, ip, #1
   2a8d0:	add	r4, r4, #4
   2a8d4:	cmp	ip, #10
   2a8d8:	bcc	2a8bc <__assert_fail@plt+0x17d00>
   2a8dc:	str	lr, [sp]
   2a8e0:	str	ip, [sp, #4]
   2a8e4:	bl	2a544 <__assert_fail@plt+0x17988>
   2a8e8:	sub	sp, fp, #8
   2a8ec:	pop	{r4, r5, fp, pc}
   2a8f0:	push	{fp, lr}
   2a8f4:	mov	fp, sp
   2a8f8:	sub	sp, sp, #8
   2a8fc:	add	ip, fp, #8
   2a900:	str	ip, [sp, #4]
   2a904:	str	ip, [sp]
   2a908:	bl	2a8a4 <__assert_fail@plt+0x17ce8>
   2a90c:	mov	sp, fp
   2a910:	pop	{fp, pc}
   2a914:	push	{fp, lr}
   2a918:	mov	fp, sp
   2a91c:	movw	r0, #17772	; 0x456c
   2a920:	movt	r0, #5
   2a924:	ldr	r1, [r0]
   2a928:	movw	r0, #63054	; 0xf64e
   2a92c:	movt	r0, #3
   2a930:	bl	12b50 <fputs@plt>
   2a934:	movw	r1, #13339	; 0x341b
   2a938:	mov	r0, #0
   2a93c:	mov	r2, #5
   2a940:	movt	r1, #4
   2a944:	bl	1264c <dcgettext@plt>
   2a948:	movw	r1, #8648	; 0x21c8
   2a94c:	movt	r1, #4
   2a950:	bl	124fc <printf@plt>
   2a954:	movw	r1, #13359	; 0x342f
   2a958:	mov	r0, #0
   2a95c:	mov	r2, #5
   2a960:	movt	r1, #4
   2a964:	bl	1264c <dcgettext@plt>
   2a968:	movw	r1, #7801	; 0x1e79
   2a96c:	movw	r2, #8562	; 0x2172
   2a970:	movt	r1, #4
   2a974:	movt	r2, #4
   2a978:	bl	124fc <printf@plt>
   2a97c:	movw	r1, #13379	; 0x3443
   2a980:	mov	r0, #0
   2a984:	mov	r2, #5
   2a988:	movt	r1, #4
   2a98c:	bl	1264c <dcgettext@plt>
   2a990:	movw	r1, #13418	; 0x346a
   2a994:	movt	r1, #4
   2a998:	pop	{fp, lr}
   2a99c:	b	124fc <printf@plt>
   2a9a0:	b	2a9a4 <__assert_fail@plt+0x17de8>
   2a9a4:	push	{r4, r5, r6, sl, fp, lr}
   2a9a8:	add	fp, sp, #16
   2a9ac:	mov	r4, r2
   2a9b0:	mov	r5, r1
   2a9b4:	mov	r6, r0
   2a9b8:	bl	2ed2c <__assert_fail@plt+0x1c170>
   2a9bc:	cmp	r0, #0
   2a9c0:	popne	{r4, r5, r6, sl, fp, pc}
   2a9c4:	cmp	r6, #0
   2a9c8:	beq	2a9dc <__assert_fail@plt+0x17e20>
   2a9cc:	cmp	r5, #0
   2a9d0:	cmpne	r4, #0
   2a9d4:	bne	2a9dc <__assert_fail@plt+0x17e20>
   2a9d8:	pop	{r4, r5, r6, sl, fp, pc}
   2a9dc:	bl	2ae30 <__assert_fail@plt+0x18274>
   2a9e0:	push	{fp, lr}
   2a9e4:	mov	fp, sp
   2a9e8:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2a9ec:	cmp	r0, #0
   2a9f0:	popne	{fp, pc}
   2a9f4:	bl	2ae30 <__assert_fail@plt+0x18274>
   2a9f8:	push	{fp, lr}
   2a9fc:	mov	fp, sp
   2aa00:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2aa04:	cmp	r0, #0
   2aa08:	popne	{fp, pc}
   2aa0c:	bl	2ae30 <__assert_fail@plt+0x18274>
   2aa10:	push	{fp, lr}
   2aa14:	mov	fp, sp
   2aa18:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2aa1c:	cmp	r0, #0
   2aa20:	popne	{fp, pc}
   2aa24:	bl	2ae30 <__assert_fail@plt+0x18274>
   2aa28:	push	{r4, r5, fp, lr}
   2aa2c:	add	fp, sp, #8
   2aa30:	mov	r4, r1
   2aa34:	mov	r5, r0
   2aa38:	bl	2ecdc <__assert_fail@plt+0x1c120>
   2aa3c:	cmp	r0, #0
   2aa40:	popne	{r4, r5, fp, pc}
   2aa44:	cmp	r5, #0
   2aa48:	beq	2aa58 <__assert_fail@plt+0x17e9c>
   2aa4c:	cmp	r4, #0
   2aa50:	bne	2aa58 <__assert_fail@plt+0x17e9c>
   2aa54:	pop	{r4, r5, fp, pc}
   2aa58:	bl	2ae30 <__assert_fail@plt+0x18274>
   2aa5c:	push	{fp, lr}
   2aa60:	mov	fp, sp
   2aa64:	cmp	r1, #0
   2aa68:	orreq	r1, r1, #1
   2aa6c:	bl	2ecdc <__assert_fail@plt+0x1c120>
   2aa70:	cmp	r0, #0
   2aa74:	popne	{fp, pc}
   2aa78:	bl	2ae30 <__assert_fail@plt+0x18274>
   2aa7c:	push	{fp, lr}
   2aa80:	mov	fp, sp
   2aa84:	clz	r3, r2
   2aa88:	lsr	ip, r3, #5
   2aa8c:	clz	r3, r1
   2aa90:	lsr	r3, r3, #5
   2aa94:	orrs	r3, r3, ip
   2aa98:	movwne	r1, #1
   2aa9c:	movwne	r2, #1
   2aaa0:	bl	2ed2c <__assert_fail@plt+0x1c170>
   2aaa4:	cmp	r0, #0
   2aaa8:	popne	{fp, pc}
   2aaac:	bl	2ae30 <__assert_fail@plt+0x18274>
   2aab0:	push	{fp, lr}
   2aab4:	mov	fp, sp
   2aab8:	mov	r2, r1
   2aabc:	mov	r1, r0
   2aac0:	mov	r0, #0
   2aac4:	bl	2ed2c <__assert_fail@plt+0x1c170>
   2aac8:	cmp	r0, #0
   2aacc:	popne	{fp, pc}
   2aad0:	bl	2ae30 <__assert_fail@plt+0x18274>
   2aad4:	mov	r2, r1
   2aad8:	mov	r1, r0
   2aadc:	mov	r0, #0
   2aae0:	b	2aa7c <__assert_fail@plt+0x17ec0>
   2aae4:	mov	r2, #1
   2aae8:	b	2aaec <__assert_fail@plt+0x17f30>
   2aaec:	push	{r4, r5, fp, lr}
   2aaf0:	add	fp, sp, #8
   2aaf4:	ldr	r5, [r1]
   2aaf8:	mov	r4, r1
   2aafc:	cmp	r0, #0
   2ab00:	beq	2ab18 <__assert_fail@plt+0x17f5c>
   2ab04:	mov	r1, #1
   2ab08:	add	r1, r1, r5, lsr #1
   2ab0c:	adds	r5, r5, r1
   2ab10:	bcc	2ab30 <__assert_fail@plt+0x17f74>
   2ab14:	bl	2ae30 <__assert_fail@plt+0x18274>
   2ab18:	cmp	r5, #0
   2ab1c:	bne	2ab30 <__assert_fail@plt+0x17f74>
   2ab20:	mov	r1, #64	; 0x40
   2ab24:	cmp	r2, #64	; 0x40
   2ab28:	udiv	r5, r1, r2
   2ab2c:	addhi	r5, r5, #1
   2ab30:	mov	r1, r5
   2ab34:	bl	2a9a4 <__assert_fail@plt+0x17de8>
   2ab38:	str	r5, [r4]
   2ab3c:	pop	{r4, r5, fp, pc}
   2ab40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ab44:	add	fp, sp, #24
   2ab48:	ldr	r6, [r1]
   2ab4c:	mov	r8, r1
   2ab50:	ldr	r4, [fp, #8]
   2ab54:	add	r1, r6, r6, asr #1
   2ab58:	cmp	r1, r6
   2ab5c:	mvnvs	r1, #-2147483648	; 0x80000000
   2ab60:	cmp	r1, r3
   2ab64:	mov	r5, r1
   2ab68:	movgt	r5, r3
   2ab6c:	cmn	r3, #1
   2ab70:	movle	r5, r1
   2ab74:	cmn	r4, #1
   2ab78:	ble	2ab98 <__assert_fail@plt+0x17fdc>
   2ab7c:	cmp	r4, #0
   2ab80:	beq	2abec <__assert_fail@plt+0x18030>
   2ab84:	cmn	r5, #1
   2ab88:	ble	2abc0 <__assert_fail@plt+0x18004>
   2ab8c:	mvn	r7, #-2147483648	; 0x80000000
   2ab90:	udiv	r1, r7, r4
   2ab94:	b	2abb4 <__assert_fail@plt+0x17ff8>
   2ab98:	cmn	r5, #1
   2ab9c:	ble	2abdc <__assert_fail@plt+0x18020>
   2aba0:	cmn	r4, #1
   2aba4:	beq	2abec <__assert_fail@plt+0x18030>
   2aba8:	mov	r1, #-2147483648	; 0x80000000
   2abac:	mvn	r7, #-2147483648	; 0x80000000
   2abb0:	sdiv	r1, r1, r4
   2abb4:	cmp	r1, r5
   2abb8:	bge	2abec <__assert_fail@plt+0x18030>
   2abbc:	b	2abfc <__assert_fail@plt+0x18040>
   2abc0:	beq	2abec <__assert_fail@plt+0x18030>
   2abc4:	mov	r1, #-2147483648	; 0x80000000
   2abc8:	mvn	r7, #-2147483648	; 0x80000000
   2abcc:	sdiv	r1, r1, r5
   2abd0:	cmp	r1, r4
   2abd4:	bge	2abec <__assert_fail@plt+0x18030>
   2abd8:	b	2abfc <__assert_fail@plt+0x18040>
   2abdc:	mvn	r7, #-2147483648	; 0x80000000
   2abe0:	sdiv	r1, r7, r4
   2abe4:	cmp	r5, r1
   2abe8:	blt	2abfc <__assert_fail@plt+0x18040>
   2abec:	mul	r1, r5, r4
   2abf0:	mov	r7, #64	; 0x40
   2abf4:	cmp	r1, #63	; 0x3f
   2abf8:	bgt	2ac04 <__assert_fail@plt+0x18048>
   2abfc:	sdiv	r5, r7, r4
   2ac00:	mul	r1, r5, r4
   2ac04:	cmp	r0, #0
   2ac08:	moveq	r7, #0
   2ac0c:	streq	r7, [r8]
   2ac10:	sub	r7, r5, r6
   2ac14:	cmp	r7, r2
   2ac18:	bge	2acbc <__assert_fail@plt+0x18100>
   2ac1c:	add	r5, r6, r2
   2ac20:	mov	r2, #0
   2ac24:	mov	r1, #0
   2ac28:	cmp	r5, r3
   2ac2c:	movwgt	r2, #1
   2ac30:	cmn	r3, #1
   2ac34:	movwgt	r1, #1
   2ac38:	cmp	r5, r6
   2ac3c:	bvs	2aca4 <__assert_fail@plt+0x180e8>
   2ac40:	ands	r1, r1, r2
   2ac44:	bne	2aca4 <__assert_fail@plt+0x180e8>
   2ac48:	cmn	r4, #1
   2ac4c:	ble	2ac6c <__assert_fail@plt+0x180b0>
   2ac50:	cmp	r4, #0
   2ac54:	beq	2acb8 <__assert_fail@plt+0x180fc>
   2ac58:	cmn	r5, #1
   2ac5c:	ble	2ac90 <__assert_fail@plt+0x180d4>
   2ac60:	mvn	r1, #-2147483648	; 0x80000000
   2ac64:	udiv	r1, r1, r4
   2ac68:	b	2ac84 <__assert_fail@plt+0x180c8>
   2ac6c:	cmn	r5, #1
   2ac70:	ble	2aca8 <__assert_fail@plt+0x180ec>
   2ac74:	cmn	r4, #1
   2ac78:	beq	2acb8 <__assert_fail@plt+0x180fc>
   2ac7c:	mov	r1, #-2147483648	; 0x80000000
   2ac80:	sdiv	r1, r1, r4
   2ac84:	cmp	r1, r5
   2ac88:	bge	2acb8 <__assert_fail@plt+0x180fc>
   2ac8c:	b	2aca4 <__assert_fail@plt+0x180e8>
   2ac90:	beq	2acb8 <__assert_fail@plt+0x180fc>
   2ac94:	mov	r1, #-2147483648	; 0x80000000
   2ac98:	sdiv	r1, r1, r5
   2ac9c:	cmp	r1, r4
   2aca0:	bge	2acb8 <__assert_fail@plt+0x180fc>
   2aca4:	bl	2ae30 <__assert_fail@plt+0x18274>
   2aca8:	mvn	r1, #-2147483648	; 0x80000000
   2acac:	sdiv	r1, r1, r4
   2acb0:	cmp	r5, r1
   2acb4:	blt	2aca4 <__assert_fail@plt+0x180e8>
   2acb8:	mul	r1, r5, r4
   2acbc:	bl	2aa28 <__assert_fail@plt+0x17e6c>
   2acc0:	str	r5, [r8]
   2acc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2acc8:	push	{fp, lr}
   2accc:	mov	fp, sp
   2acd0:	mov	r1, #1
   2acd4:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   2acd8:	cmp	r0, #0
   2acdc:	popne	{fp, pc}
   2ace0:	bl	2ae30 <__assert_fail@plt+0x18274>
   2ace4:	push	{fp, lr}
   2ace8:	mov	fp, sp
   2acec:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   2acf0:	cmp	r0, #0
   2acf4:	popne	{fp, pc}
   2acf8:	bl	2ae30 <__assert_fail@plt+0x18274>
   2acfc:	push	{fp, lr}
   2ad00:	mov	fp, sp
   2ad04:	mov	r1, #1
   2ad08:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   2ad0c:	cmp	r0, #0
   2ad10:	popne	{fp, pc}
   2ad14:	bl	2ae30 <__assert_fail@plt+0x18274>
   2ad18:	push	{fp, lr}
   2ad1c:	mov	fp, sp
   2ad20:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   2ad24:	cmp	r0, #0
   2ad28:	popne	{fp, pc}
   2ad2c:	bl	2ae30 <__assert_fail@plt+0x18274>
   2ad30:	push	{r4, r5, r6, sl, fp, lr}
   2ad34:	add	fp, sp, #16
   2ad38:	mov	r5, r0
   2ad3c:	mov	r0, r1
   2ad40:	mov	r4, r1
   2ad44:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2ad48:	cmp	r0, #0
   2ad4c:	beq	2ad68 <__assert_fail@plt+0x181ac>
   2ad50:	mov	r1, r5
   2ad54:	mov	r2, r4
   2ad58:	mov	r6, r0
   2ad5c:	bl	125c8 <memcpy@plt>
   2ad60:	mov	r0, r6
   2ad64:	pop	{r4, r5, r6, sl, fp, pc}
   2ad68:	bl	2ae30 <__assert_fail@plt+0x18274>
   2ad6c:	push	{r4, r5, r6, sl, fp, lr}
   2ad70:	add	fp, sp, #16
   2ad74:	mov	r5, r0
   2ad78:	mov	r0, r1
   2ad7c:	mov	r4, r1
   2ad80:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2ad84:	cmp	r0, #0
   2ad88:	beq	2ada4 <__assert_fail@plt+0x181e8>
   2ad8c:	mov	r1, r5
   2ad90:	mov	r2, r4
   2ad94:	mov	r6, r0
   2ad98:	bl	125c8 <memcpy@plt>
   2ad9c:	mov	r0, r6
   2ada0:	pop	{r4, r5, r6, sl, fp, pc}
   2ada4:	bl	2ae30 <__assert_fail@plt+0x18274>
   2ada8:	push	{r4, r5, r6, sl, fp, lr}
   2adac:	add	fp, sp, #16
   2adb0:	mov	r5, r0
   2adb4:	add	r0, r1, #1
   2adb8:	mov	r4, r1
   2adbc:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2adc0:	cmp	r0, #0
   2adc4:	beq	2adec <__assert_fail@plt+0x18230>
   2adc8:	mov	r6, r0
   2adcc:	mov	r0, #0
   2add0:	mov	r1, r5
   2add4:	mov	r2, r4
   2add8:	strb	r0, [r6, r4]
   2addc:	mov	r0, r6
   2ade0:	bl	125c8 <memcpy@plt>
   2ade4:	mov	r0, r6
   2ade8:	pop	{r4, r5, r6, sl, fp, pc}
   2adec:	bl	2ae30 <__assert_fail@plt+0x18274>
   2adf0:	push	{r4, r5, r6, sl, fp, lr}
   2adf4:	add	fp, sp, #16
   2adf8:	mov	r4, r0
   2adfc:	bl	1288c <strlen@plt>
   2ae00:	add	r5, r0, #1
   2ae04:	mov	r0, r5
   2ae08:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2ae0c:	cmp	r0, #0
   2ae10:	beq	2ae2c <__assert_fail@plt+0x18270>
   2ae14:	mov	r1, r4
   2ae18:	mov	r2, r5
   2ae1c:	mov	r6, r0
   2ae20:	bl	125c8 <memcpy@plt>
   2ae24:	mov	r0, r6
   2ae28:	pop	{r4, r5, r6, sl, fp, pc}
   2ae2c:	bl	2ae30 <__assert_fail@plt+0x18274>
   2ae30:	push	{fp, lr}
   2ae34:	mov	fp, sp
   2ae38:	movw	r0, #17664	; 0x4500
   2ae3c:	movw	r1, #13494	; 0x34b6
   2ae40:	mov	r2, #5
   2ae44:	movt	r0, #5
   2ae48:	movt	r1, #4
   2ae4c:	ldr	r4, [r0]
   2ae50:	mov	r0, #0
   2ae54:	bl	1264c <dcgettext@plt>
   2ae58:	movw	r2, #14847	; 0x39ff
   2ae5c:	mov	r3, r0
   2ae60:	mov	r0, r4
   2ae64:	mov	r1, #0
   2ae68:	movt	r2, #4
   2ae6c:	bl	12790 <error@plt>
   2ae70:	bl	12b68 <abort@plt>
   2ae74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ae78:	add	fp, sp, #24
   2ae7c:	sub	sp, sp, #8
   2ae80:	mov	r4, r3
   2ae84:	mov	r8, r2
   2ae88:	mov	r9, r1
   2ae8c:	mov	r5, r0
   2ae90:	bl	128d4 <__errno_location@plt>
   2ae94:	mov	r6, #0
   2ae98:	mov	r7, r0
   2ae9c:	add	r1, sp, #4
   2aea0:	str	r6, [r0]
   2aea4:	mov	r0, r5
   2aea8:	blx	r4
   2aeac:	ldr	r0, [sp, #4]
   2aeb0:	cmp	r0, r5
   2aeb4:	beq	2aef4 <__assert_fail@plt+0x18338>
   2aeb8:	cmp	r9, #0
   2aebc:	beq	2aedc <__assert_fail@plt+0x18320>
   2aec0:	vcmp.f64	d0, #0.0
   2aec4:	vmrs	APSR_nzcv, fpscr
   2aec8:	beq	2aef0 <__assert_fail@plt+0x18334>
   2aecc:	ldr	r1, [r7]
   2aed0:	subs	r6, r1, #34	; 0x22
   2aed4:	movwne	r6, #1
   2aed8:	b	2aef4 <__assert_fail@plt+0x18338>
   2aedc:	ldrb	r1, [r0]
   2aee0:	mov	r6, #0
   2aee4:	cmp	r1, #0
   2aee8:	bne	2aefc <__assert_fail@plt+0x18340>
   2aeec:	b	2aec0 <__assert_fail@plt+0x18304>
   2aef0:	mov	r6, #1
   2aef4:	cmp	r9, #0
   2aef8:	strne	r0, [r9]
   2aefc:	vstr	d0, [r8]
   2af00:	mov	r0, r6
   2af04:	sub	sp, fp, #24
   2af08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2af0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af10:	add	fp, sp, #28
   2af14:	sub	sp, sp, #12
   2af18:	cmp	r2, #37	; 0x25
   2af1c:	bcs	2b354 <__assert_fail@plt+0x18798>
   2af20:	ldr	r9, [fp, #8]
   2af24:	mov	r7, r2
   2af28:	mov	r6, r1
   2af2c:	mov	r4, r0
   2af30:	str	r3, [sp, #4]
   2af34:	bl	128d4 <__errno_location@plt>
   2af38:	mov	r5, r0
   2af3c:	mov	r0, #0
   2af40:	str	r0, [r5]
   2af44:	bl	12844 <__ctype_b_loc@plt>
   2af48:	ldr	r1, [r0]
   2af4c:	mov	r2, r4
   2af50:	ldrb	r0, [r2], #1
   2af54:	add	r3, r1, r0, lsl #1
   2af58:	ldrb	r3, [r3, #1]
   2af5c:	tst	r3, #32
   2af60:	bne	2af50 <__assert_fail@plt+0x18394>
   2af64:	add	r8, sp, #8
   2af68:	cmp	r6, #0
   2af6c:	mov	sl, #4
   2af70:	movne	r8, r6
   2af74:	cmp	r0, #45	; 0x2d
   2af78:	beq	2b348 <__assert_fail@plt+0x1878c>
   2af7c:	mov	r0, r4
   2af80:	mov	r1, r8
   2af84:	mov	r2, r7
   2af88:	bl	12880 <strtoul@plt>
   2af8c:	ldr	r6, [r8]
   2af90:	cmp	r6, r4
   2af94:	beq	2afb8 <__assert_fail@plt+0x183fc>
   2af98:	mov	r7, r0
   2af9c:	ldr	r0, [r5]
   2afa0:	cmp	r0, #0
   2afa4:	beq	2afe4 <__assert_fail@plt+0x18428>
   2afa8:	cmp	r0, #34	; 0x22
   2afac:	bne	2b348 <__assert_fail@plt+0x1878c>
   2afb0:	mov	sl, #1
   2afb4:	b	2afe8 <__assert_fail@plt+0x1842c>
   2afb8:	cmp	r9, #0
   2afbc:	ldrbne	r1, [r4]
   2afc0:	cmpne	r1, #0
   2afc4:	beq	2b348 <__assert_fail@plt+0x1878c>
   2afc8:	mov	r0, r9
   2afcc:	bl	12898 <strchr@plt>
   2afd0:	cmp	r0, #0
   2afd4:	beq	2b348 <__assert_fail@plt+0x1878c>
   2afd8:	mov	r7, #1
   2afdc:	mov	sl, #0
   2afe0:	b	2aff0 <__assert_fail@plt+0x18434>
   2afe4:	mov	sl, r0
   2afe8:	cmp	r9, #0
   2afec:	beq	2b340 <__assert_fail@plt+0x18784>
   2aff0:	ldrb	r4, [r6]
   2aff4:	cmp	r4, #0
   2aff8:	beq	2b340 <__assert_fail@plt+0x18784>
   2affc:	mov	r0, r9
   2b000:	mov	r1, r4
   2b004:	bl	12898 <strchr@plt>
   2b008:	cmp	r0, #0
   2b00c:	beq	2b2c8 <__assert_fail@plt+0x1870c>
   2b010:	sub	r0, r4, #69	; 0x45
   2b014:	mov	r3, #1
   2b018:	mov	r5, #1024	; 0x400
   2b01c:	cmp	r0, #21
   2b020:	bhi	2b038 <__assert_fail@plt+0x1847c>
   2b024:	movw	r2, #35141	; 0x8945
   2b028:	mov	r1, #1
   2b02c:	movt	r2, #48	; 0x30
   2b030:	tst	r2, r1, lsl r0
   2b034:	bne	2b054 <__assert_fail@plt+0x18498>
   2b038:	sub	r0, r4, #103	; 0x67
   2b03c:	cmp	r0, #13
   2b040:	bhi	2b0a4 <__assert_fail@plt+0x184e8>
   2b044:	mov	r1, #1
   2b048:	movw	r2, #8273	; 0x2051
   2b04c:	tst	r2, r1, lsl r0
   2b050:	beq	2b0a4 <__assert_fail@plt+0x184e8>
   2b054:	mov	r0, r9
   2b058:	mov	r1, #48	; 0x30
   2b05c:	bl	12898 <strchr@plt>
   2b060:	cmp	r0, #0
   2b064:	beq	2b0a0 <__assert_fail@plt+0x184e4>
   2b068:	ldrb	r0, [r6, #1]
   2b06c:	cmp	r0, #66	; 0x42
   2b070:	cmpne	r0, #68	; 0x44
   2b074:	bne	2b084 <__assert_fail@plt+0x184c8>
   2b078:	mov	r3, #2
   2b07c:	mov	r5, #1000	; 0x3e8
   2b080:	b	2b0a4 <__assert_fail@plt+0x184e8>
   2b084:	cmp	r0, #105	; 0x69
   2b088:	bne	2b0a0 <__assert_fail@plt+0x184e4>
   2b08c:	ldrb	r0, [r6, #2]
   2b090:	mov	r3, #1
   2b094:	cmp	r0, #66	; 0x42
   2b098:	movweq	r3, #3
   2b09c:	b	2b0a4 <__assert_fail@plt+0x184e8>
   2b0a0:	mov	r3, #1
   2b0a4:	cmp	r4, #89	; 0x59
   2b0a8:	bgt	2b118 <__assert_fail@plt+0x1855c>
   2b0ac:	sub	r0, r4, #66	; 0x42
   2b0b0:	cmp	r0, #14
   2b0b4:	bhi	2b18c <__assert_fail@plt+0x185d0>
   2b0b8:	add	r1, pc, #0
   2b0bc:	ldr	pc, [r1, r0, lsl #2]
   2b0c0:	strdeq	fp, [r2], -ip
   2b0c4:	andeq	fp, r2, r8, asr #5
   2b0c8:	andeq	fp, r2, r8, asr #5
   2b0cc:	ldrdeq	fp, [r2], -r4
   2b0d0:	andeq	fp, r2, r8, asr #5
   2b0d4:	andeq	fp, r2, ip, ror #3
   2b0d8:	andeq	fp, r2, r8, asr #5
   2b0dc:	andeq	fp, r2, r8, asr #5
   2b0e0:	andeq	fp, r2, r8, asr #5
   2b0e4:	andeq	fp, r2, r8, lsl r2
   2b0e8:	andeq	fp, r2, r8, asr #5
   2b0ec:	andeq	fp, r2, ip, lsr r2
   2b0f0:	andeq	fp, r2, r8, asr #5
   2b0f4:	andeq	fp, r2, r8, asr #5
   2b0f8:	andeq	fp, r2, r0, lsl #6
   2b0fc:	mov	r1, #0
   2b100:	lsr	r0, r7, #22
   2b104:	cmp	r1, r7, lsr #22
   2b108:	lsl	r7, r7, #10
   2b10c:	movwne	r0, #1
   2b110:	mvnne	r7, #0
   2b114:	b	2b328 <__assert_fail@plt+0x1876c>
   2b118:	cmp	r4, #115	; 0x73
   2b11c:	bgt	2b1c8 <__assert_fail@plt+0x1860c>
   2b120:	sub	r1, r4, #98	; 0x62
   2b124:	cmp	r1, #11
   2b128:	bhi	2b294 <__assert_fail@plt+0x186d8>
   2b12c:	add	r2, pc, #4
   2b130:	mov	r0, #0
   2b134:	ldr	pc, [r2, r1, lsl #2]
   2b138:	andeq	fp, r2, r8, ror #2
   2b13c:	andeq	fp, r2, r8, lsr #6
   2b140:	andeq	fp, r2, r8, asr #5
   2b144:	andeq	fp, r2, r8, asr #5
   2b148:	andeq	fp, r2, r8, asr #5
   2b14c:	andeq	fp, r2, ip, ror #3
   2b150:	andeq	fp, r2, r8, asr #5
   2b154:	andeq	fp, r2, r8, asr #5
   2b158:	andeq	fp, r2, r8, asr #5
   2b15c:	andeq	fp, r2, r8, lsl r2
   2b160:	andeq	fp, r2, r8, asr #5
   2b164:	andeq	fp, r2, ip, lsr r2
   2b168:	movw	r0, #65535	; 0xffff
   2b16c:	movt	r0, #63	; 0x3f
   2b170:	add	r1, r0, #4194304	; 0x400000
   2b174:	mov	r0, #0
   2b178:	cmp	r7, r1
   2b17c:	lsl	r7, r7, #9
   2b180:	movwhi	r0, #1
   2b184:	mvnhi	r7, #0
   2b188:	b	2b328 <__assert_fail@plt+0x1876c>
   2b18c:	cmp	r4, #84	; 0x54
   2b190:	beq	2b268 <__assert_fail@plt+0x186ac>
   2b194:	cmp	r4, #89	; 0x59
   2b198:	bne	2b2c8 <__assert_fail@plt+0x1870c>
   2b19c:	mvn	r0, #0
   2b1a0:	mvn	r2, #7
   2b1a4:	udiv	r1, r0, r5
   2b1a8:	mov	r0, #0
   2b1ac:	cmp	r1, r7
   2b1b0:	mul	r7, r7, r5
   2b1b4:	orrcc	r0, r0, #1
   2b1b8:	mvncc	r7, #0
   2b1bc:	adds	r2, r2, #1
   2b1c0:	bne	2b1ac <__assert_fail@plt+0x185f0>
   2b1c4:	b	2b328 <__assert_fail@plt+0x1876c>
   2b1c8:	cmp	r4, #116	; 0x74
   2b1cc:	beq	2b268 <__assert_fail@plt+0x186ac>
   2b1d0:	cmp	r4, #119	; 0x77
   2b1d4:	bne	2b2c8 <__assert_fail@plt+0x1870c>
   2b1d8:	lsl	r1, r7, #1
   2b1dc:	cmp	r7, #0
   2b1e0:	lsr	r0, r7, #31
   2b1e4:	mvnlt	r1, #0
   2b1e8:	b	2b234 <__assert_fail@plt+0x18678>
   2b1ec:	mvn	r0, #0
   2b1f0:	mvn	r2, #2
   2b1f4:	udiv	r1, r0, r5
   2b1f8:	mov	r0, #0
   2b1fc:	cmp	r1, r7
   2b200:	mul	r7, r7, r5
   2b204:	orrcc	r0, r0, #1
   2b208:	mvncc	r7, #0
   2b20c:	adds	r2, r2, #1
   2b210:	bne	2b1fc <__assert_fail@plt+0x18640>
   2b214:	b	2b328 <__assert_fail@plt+0x1876c>
   2b218:	mvn	r0, #0
   2b21c:	mul	r1, r7, r5
   2b220:	udiv	r0, r0, r5
   2b224:	cmp	r0, r7
   2b228:	mov	r0, #0
   2b22c:	mvncc	r1, #0
   2b230:	movwcc	r0, #1
   2b234:	mov	r7, r1
   2b238:	b	2b328 <__assert_fail@plt+0x1876c>
   2b23c:	mvn	r0, #0
   2b240:	mvn	r2, #1
   2b244:	udiv	r1, r0, r5
   2b248:	mov	r0, #0
   2b24c:	cmp	r1, r7
   2b250:	mul	r7, r7, r5
   2b254:	orrcc	r0, r0, #1
   2b258:	mvncc	r7, #0
   2b25c:	adds	r2, r2, #1
   2b260:	bne	2b24c <__assert_fail@plt+0x18690>
   2b264:	b	2b328 <__assert_fail@plt+0x1876c>
   2b268:	mvn	r0, #0
   2b26c:	mvn	r2, #3
   2b270:	udiv	r1, r0, r5
   2b274:	mov	r0, #0
   2b278:	cmp	r1, r7
   2b27c:	mul	r7, r7, r5
   2b280:	orrcc	r0, r0, #1
   2b284:	mvncc	r7, #0
   2b288:	adds	r2, r2, #1
   2b28c:	bne	2b278 <__assert_fail@plt+0x186bc>
   2b290:	b	2b328 <__assert_fail@plt+0x1876c>
   2b294:	cmp	r4, #90	; 0x5a
   2b298:	bne	2b2c8 <__assert_fail@plt+0x1870c>
   2b29c:	mvn	r0, #0
   2b2a0:	mvn	r2, #6
   2b2a4:	udiv	r1, r0, r5
   2b2a8:	mov	r0, #0
   2b2ac:	cmp	r1, r7
   2b2b0:	mul	r7, r7, r5
   2b2b4:	orrcc	r0, r0, #1
   2b2b8:	mvncc	r7, #0
   2b2bc:	adds	r2, r2, #1
   2b2c0:	bne	2b2ac <__assert_fail@plt+0x186f0>
   2b2c4:	b	2b328 <__assert_fail@plt+0x1876c>
   2b2c8:	ldr	r0, [sp, #4]
   2b2cc:	orr	sl, sl, #2
   2b2d0:	b	2b344 <__assert_fail@plt+0x18788>
   2b2d4:	mvn	r0, #0
   2b2d8:	mvn	r2, #5
   2b2dc:	udiv	r1, r0, r5
   2b2e0:	mov	r0, #0
   2b2e4:	cmp	r1, r7
   2b2e8:	mul	r7, r7, r5
   2b2ec:	orrcc	r0, r0, #1
   2b2f0:	mvncc	r7, #0
   2b2f4:	adds	r2, r2, #1
   2b2f8:	bne	2b2e4 <__assert_fail@plt+0x18728>
   2b2fc:	b	2b328 <__assert_fail@plt+0x1876c>
   2b300:	mvn	r0, #0
   2b304:	mvn	r2, #4
   2b308:	udiv	r1, r0, r5
   2b30c:	mov	r0, #0
   2b310:	cmp	r1, r7
   2b314:	mul	r7, r7, r5
   2b318:	orrcc	r0, r0, #1
   2b31c:	mvncc	r7, #0
   2b320:	adds	r2, r2, #1
   2b324:	bne	2b310 <__assert_fail@plt+0x18754>
   2b328:	add	r1, r6, r3
   2b32c:	orr	sl, r0, sl
   2b330:	str	r1, [r8]
   2b334:	ldrb	r1, [r6, r3]
   2b338:	cmp	r1, #0
   2b33c:	orrne	sl, sl, #2
   2b340:	ldr	r0, [sp, #4]
   2b344:	str	r7, [r0]
   2b348:	mov	r0, sl
   2b34c:	sub	sp, fp, #28
   2b350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b354:	movw	r0, #13511	; 0x34c7
   2b358:	movw	r1, #13549	; 0x34ed
   2b35c:	movw	r3, #13561	; 0x34f9
   2b360:	mov	r2, #84	; 0x54
   2b364:	movt	r0, #4
   2b368:	movt	r1, #4
   2b36c:	movt	r3, #4
   2b370:	bl	12bbc <__assert_fail@plt>
   2b374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b378:	add	fp, sp, #28
   2b37c:	sub	sp, sp, #20
   2b380:	cmp	r2, #37	; 0x25
   2b384:	bcs	2ba0c <__assert_fail@plt+0x18e50>
   2b388:	mov	r8, r3
   2b38c:	mov	r5, r2
   2b390:	mov	r6, r1
   2b394:	mov	r4, r0
   2b398:	bl	128d4 <__errno_location@plt>
   2b39c:	mov	r7, r0
   2b3a0:	mov	r0, #0
   2b3a4:	str	r0, [r7]
   2b3a8:	bl	12844 <__ctype_b_loc@plt>
   2b3ac:	ldr	r1, [r0]
   2b3b0:	mov	r2, r4
   2b3b4:	ldrb	r0, [r2], #1
   2b3b8:	add	r3, r1, r0, lsl #1
   2b3bc:	ldrb	r3, [r3, #1]
   2b3c0:	tst	r3, #32
   2b3c4:	bne	2b3b4 <__assert_fail@plt+0x187f8>
   2b3c8:	add	sl, sp, #16
   2b3cc:	cmp	r6, #0
   2b3d0:	movne	sl, r6
   2b3d4:	mov	r6, #4
   2b3d8:	cmp	r0, #45	; 0x2d
   2b3dc:	beq	2ba00 <__assert_fail@plt+0x18e44>
   2b3e0:	mov	r0, r4
   2b3e4:	mov	r1, sl
   2b3e8:	mov	r2, r5
   2b3ec:	str	r8, [sp, #12]
   2b3f0:	bl	12970 <strtoumax@plt>
   2b3f4:	ldr	r5, [sl]
   2b3f8:	cmp	r5, r4
   2b3fc:	beq	2b424 <__assert_fail@plt+0x18868>
   2b400:	mov	r8, r0
   2b404:	ldr	r0, [r7]
   2b408:	mov	r9, r1
   2b40c:	cmp	r0, #0
   2b410:	beq	2b454 <__assert_fail@plt+0x18898>
   2b414:	cmp	r0, #34	; 0x22
   2b418:	bne	2ba00 <__assert_fail@plt+0x18e44>
   2b41c:	mov	r6, #1
   2b420:	b	2b458 <__assert_fail@plt+0x1889c>
   2b424:	ldr	r0, [fp, #8]
   2b428:	cmp	r0, #0
   2b42c:	ldrbne	r1, [r4]
   2b430:	cmpne	r1, #0
   2b434:	beq	2ba00 <__assert_fail@plt+0x18e44>
   2b438:	bl	12898 <strchr@plt>
   2b43c:	cmp	r0, #0
   2b440:	beq	2ba00 <__assert_fail@plt+0x18e44>
   2b444:	mov	r6, #0
   2b448:	mov	r8, #1
   2b44c:	mov	r9, #0
   2b450:	b	2b464 <__assert_fail@plt+0x188a8>
   2b454:	mov	r6, r0
   2b458:	ldr	r0, [fp, #8]
   2b45c:	cmp	r0, #0
   2b460:	beq	2b9f8 <__assert_fail@plt+0x18e3c>
   2b464:	ldrb	r7, [r5]
   2b468:	cmp	r7, #0
   2b46c:	beq	2b9f8 <__assert_fail@plt+0x18e3c>
   2b470:	ldr	r0, [fp, #8]
   2b474:	mov	r1, r7
   2b478:	bl	12898 <strchr@plt>
   2b47c:	cmp	r0, #0
   2b480:	beq	2b588 <__assert_fail@plt+0x189cc>
   2b484:	sub	r0, r7, #69	; 0x45
   2b488:	mov	r1, #1
   2b48c:	mov	r3, #0
   2b490:	mov	r4, #1024	; 0x400
   2b494:	cmp	r0, #21
   2b498:	str	r1, [sp, #8]
   2b49c:	bhi	2b4b4 <__assert_fail@plt+0x188f8>
   2b4a0:	movw	r2, #35141	; 0x8945
   2b4a4:	mov	r1, #1
   2b4a8:	movt	r2, #48	; 0x30
   2b4ac:	tst	r2, r1, lsl r0
   2b4b0:	bne	2b4d0 <__assert_fail@plt+0x18914>
   2b4b4:	sub	r0, r7, #103	; 0x67
   2b4b8:	cmp	r0, #13
   2b4bc:	bhi	2b504 <__assert_fail@plt+0x18948>
   2b4c0:	mov	r1, #1
   2b4c4:	movw	r2, #8273	; 0x2051
   2b4c8:	tst	r2, r1, lsl r0
   2b4cc:	beq	2b504 <__assert_fail@plt+0x18948>
   2b4d0:	ldr	r0, [fp, #8]
   2b4d4:	mov	r1, #48	; 0x30
   2b4d8:	bl	12898 <strchr@plt>
   2b4dc:	cmp	r0, #0
   2b4e0:	beq	2b500 <__assert_fail@plt+0x18944>
   2b4e4:	ldrb	r0, [r5, #1]
   2b4e8:	cmp	r0, #66	; 0x42
   2b4ec:	cmpne	r0, #68	; 0x44
   2b4f0:	bne	2b618 <__assert_fail@plt+0x18a5c>
   2b4f4:	mov	r4, #1000	; 0x3e8
   2b4f8:	mov	r0, #2
   2b4fc:	str	r0, [sp, #8]
   2b500:	mov	r3, #0
   2b504:	cmp	r7, #89	; 0x59
   2b508:	stm	sp, {r5, r6}
   2b50c:	bgt	2b594 <__assert_fail@plt+0x189d8>
   2b510:	sub	r0, r7, #66	; 0x42
   2b514:	cmp	r0, #14
   2b518:	bhi	2b63c <__assert_fail@plt+0x18a80>
   2b51c:	add	r1, pc, #0
   2b520:	ldr	pc, [r1, r0, lsl #2]
   2b524:	andeq	fp, r2, r0, ror #10
   2b528:	andeq	fp, r2, ip, ror #17
   2b52c:	andeq	fp, r2, ip, ror #17
   2b530:	andeq	fp, r2, r0, lsl #18
   2b534:	andeq	fp, r2, ip, ror #17
   2b538:	strdeq	fp, [r2], -r0
   2b53c:	andeq	fp, r2, ip, ror #17
   2b540:	andeq	fp, r2, ip, ror #17
   2b544:	andeq	fp, r2, ip, ror #17
   2b548:	andeq	fp, r2, ip, asr r7
   2b54c:	andeq	fp, r2, ip, ror #17
   2b550:	andeq	fp, r2, r0, lsr #15
   2b554:	andeq	fp, r2, ip, ror #17
   2b558:	andeq	fp, r2, ip, ror #17
   2b55c:	andeq	fp, r2, ip, ror #18
   2b560:	mov	r1, #0
   2b564:	lsl	r3, r9, #10
   2b568:	lsl	r0, r8, #10
   2b56c:	lsr	r2, r9, #22
   2b570:	cmp	r1, r9, lsr #22
   2b574:	orr	r3, r3, r8, lsr #22
   2b578:	mvnne	r0, #0
   2b57c:	movwne	r2, #1
   2b580:	cmp	r1, r9, lsr #22
   2b584:	b	2b608 <__assert_fail@plt+0x18a4c>
   2b588:	ldr	r0, [sp, #12]
   2b58c:	orr	r6, r6, #2
   2b590:	b	2b9fc <__assert_fail@plt+0x18e40>
   2b594:	cmp	r7, #115	; 0x73
   2b598:	bgt	2b6b8 <__assert_fail@plt+0x18afc>
   2b59c:	sub	r0, r7, #98	; 0x62
   2b5a0:	cmp	r0, #11
   2b5a4:	bhi	2b878 <__assert_fail@plt+0x18cbc>
   2b5a8:	add	r1, pc, #4
   2b5ac:	mov	r2, #0
   2b5b0:	ldr	pc, [r1, r0, lsl #2]
   2b5b4:	andeq	fp, r2, r4, ror #11
   2b5b8:	ldrdeq	fp, [r2], -r4
   2b5bc:	andeq	fp, r2, ip, ror #17
   2b5c0:	andeq	fp, r2, ip, ror #17
   2b5c4:	andeq	fp, r2, ip, ror #17
   2b5c8:	strdeq	fp, [r2], -r0
   2b5cc:	andeq	fp, r2, ip, ror #17
   2b5d0:	andeq	fp, r2, ip, ror #17
   2b5d4:	andeq	fp, r2, ip, ror #17
   2b5d8:	andeq	fp, r2, ip, asr r7
   2b5dc:	andeq	fp, r2, ip, ror #17
   2b5e0:	andeq	fp, r2, r0, lsr #15
   2b5e4:	mov	r1, #0
   2b5e8:	lsl	r3, r9, #9
   2b5ec:	lsl	r0, r8, #9
   2b5f0:	lsr	r2, r9, #23
   2b5f4:	cmp	r1, r9, lsr #23
   2b5f8:	orr	r3, r3, r8, lsr #23
   2b5fc:	mvnne	r0, #0
   2b600:	movwne	r2, #1
   2b604:	cmp	r1, r9, lsr #23
   2b608:	mvnne	r3, #0
   2b60c:	mov	r8, r0
   2b610:	mov	r9, r3
   2b614:	b	2b9d4 <__assert_fail@plt+0x18e18>
   2b618:	cmp	r0, #105	; 0x69
   2b61c:	mov	r3, #0
   2b620:	bne	2b504 <__assert_fail@plt+0x18948>
   2b624:	ldrb	r0, [r5, #2]
   2b628:	mov	r1, #1
   2b62c:	cmp	r0, #66	; 0x42
   2b630:	movweq	r1, #3
   2b634:	str	r1, [sp, #8]
   2b638:	b	2b504 <__assert_fail@plt+0x18948>
   2b63c:	cmp	r7, #84	; 0x54
   2b640:	beq	2b80c <__assert_fail@plt+0x18c50>
   2b644:	cmp	r7, #89	; 0x59
   2b648:	bne	2b8ec <__assert_fail@plt+0x18d30>
   2b64c:	mvn	r0, #0
   2b650:	mvn	r1, #0
   2b654:	mov	r2, r4
   2b658:	mov	r5, r3
   2b65c:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2b660:	mov	ip, r5
   2b664:	mvn	lr, #0
   2b668:	mov	r2, #0
   2b66c:	mvn	r3, #7
   2b670:	mov	r6, r8
   2b674:	mov	r5, r9
   2b678:	umull	r8, r7, r6, r4
   2b67c:	mvn	r9, #0
   2b680:	mla	r7, r6, ip, r7
   2b684:	subs	r6, r0, r6
   2b688:	sbcs	r6, r1, r5
   2b68c:	mov	r6, #0
   2b690:	movwcc	r6, #1
   2b694:	cmp	r6, #0
   2b698:	mlaeq	r9, r5, r4, r7
   2b69c:	movne	r8, lr
   2b6a0:	orrne	r2, r2, #1
   2b6a4:	adds	r3, r3, #1
   2b6a8:	mov	r6, r8
   2b6ac:	mov	r5, r9
   2b6b0:	bne	2b678 <__assert_fail@plt+0x18abc>
   2b6b4:	b	2b9d4 <__assert_fail@plt+0x18e18>
   2b6b8:	cmp	r7, #116	; 0x74
   2b6bc:	beq	2b80c <__assert_fail@plt+0x18c50>
   2b6c0:	cmp	r7, #119	; 0x77
   2b6c4:	bne	2b8ec <__assert_fail@plt+0x18d30>
   2b6c8:	lsl	r1, r9, #1
   2b6cc:	lsl	r0, r8, #1
   2b6d0:	cmp	r9, #0
   2b6d4:	lsr	r2, r9, #31
   2b6d8:	orr	r1, r1, r8, lsr #31
   2b6dc:	mvnlt	r0, #0
   2b6e0:	mvnlt	r1, #0
   2b6e4:	mov	r8, r0
   2b6e8:	mov	r9, r1
   2b6ec:	b	2b9d4 <__assert_fail@plt+0x18e18>
   2b6f0:	mvn	r0, #0
   2b6f4:	mvn	r1, #0
   2b6f8:	mov	r2, r4
   2b6fc:	mov	r5, r3
   2b700:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2b704:	mov	ip, r5
   2b708:	mvn	lr, #0
   2b70c:	mov	r2, #0
   2b710:	mvn	r3, #2
   2b714:	mov	r6, r8
   2b718:	mov	r5, r9
   2b71c:	umull	r8, r7, r6, r4
   2b720:	mvn	r9, #0
   2b724:	mla	r7, r6, ip, r7
   2b728:	subs	r6, r0, r6
   2b72c:	sbcs	r6, r1, r5
   2b730:	mov	r6, #0
   2b734:	movwcc	r6, #1
   2b738:	cmp	r6, #0
   2b73c:	mlaeq	r9, r5, r4, r7
   2b740:	movne	r8, lr
   2b744:	orrne	r2, r2, #1
   2b748:	adds	r3, r3, #1
   2b74c:	mov	r6, r8
   2b750:	mov	r5, r9
   2b754:	bne	2b71c <__assert_fail@plt+0x18b60>
   2b758:	b	2b9d4 <__assert_fail@plt+0x18e18>
   2b75c:	mvn	r0, #0
   2b760:	mvn	r1, #0
   2b764:	mov	r2, r4
   2b768:	mov	r5, r3
   2b76c:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2b770:	subs	r0, r0, r8
   2b774:	mov	r2, #0
   2b778:	sbcs	r0, r1, r9
   2b77c:	movwcc	r2, #1
   2b780:	umull	r0, r1, r8, r4
   2b784:	mla	r1, r8, r5, r1
   2b788:	cmp	r2, #0
   2b78c:	mla	r9, r9, r4, r1
   2b790:	mvnne	r0, #0
   2b794:	mvnne	r9, #0
   2b798:	mov	r8, r0
   2b79c:	b	2b9d4 <__assert_fail@plt+0x18e18>
   2b7a0:	mvn	r0, #0
   2b7a4:	mvn	r1, #0
   2b7a8:	mov	r2, r4
   2b7ac:	mov	r5, r3
   2b7b0:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2b7b4:	mov	ip, r5
   2b7b8:	mvn	lr, #0
   2b7bc:	mov	r2, #0
   2b7c0:	mvn	r3, #1
   2b7c4:	mov	r6, r8
   2b7c8:	mov	r5, r9
   2b7cc:	umull	r8, r7, r6, r4
   2b7d0:	mvn	r9, #0
   2b7d4:	mla	r7, r6, ip, r7
   2b7d8:	subs	r6, r0, r6
   2b7dc:	sbcs	r6, r1, r5
   2b7e0:	mov	r6, #0
   2b7e4:	movwcc	r6, #1
   2b7e8:	cmp	r6, #0
   2b7ec:	mlaeq	r9, r5, r4, r7
   2b7f0:	movne	r8, lr
   2b7f4:	orrne	r2, r2, #1
   2b7f8:	adds	r3, r3, #1
   2b7fc:	mov	r6, r8
   2b800:	mov	r5, r9
   2b804:	bne	2b7cc <__assert_fail@plt+0x18c10>
   2b808:	b	2b9d4 <__assert_fail@plt+0x18e18>
   2b80c:	mvn	r0, #0
   2b810:	mvn	r1, #0
   2b814:	mov	r2, r4
   2b818:	mov	r5, r3
   2b81c:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2b820:	mov	ip, r5
   2b824:	mvn	lr, #0
   2b828:	mov	r2, #0
   2b82c:	mvn	r3, #3
   2b830:	mov	r6, r8
   2b834:	mov	r5, r9
   2b838:	umull	r8, r7, r6, r4
   2b83c:	mvn	r9, #0
   2b840:	mla	r7, r6, ip, r7
   2b844:	subs	r6, r0, r6
   2b848:	sbcs	r6, r1, r5
   2b84c:	mov	r6, #0
   2b850:	movwcc	r6, #1
   2b854:	cmp	r6, #0
   2b858:	mlaeq	r9, r5, r4, r7
   2b85c:	movne	r8, lr
   2b860:	orrne	r2, r2, #1
   2b864:	adds	r3, r3, #1
   2b868:	mov	r6, r8
   2b86c:	mov	r5, r9
   2b870:	bne	2b838 <__assert_fail@plt+0x18c7c>
   2b874:	b	2b9d4 <__assert_fail@plt+0x18e18>
   2b878:	cmp	r7, #90	; 0x5a
   2b87c:	bne	2b8ec <__assert_fail@plt+0x18d30>
   2b880:	mvn	r0, #0
   2b884:	mvn	r1, #0
   2b888:	mov	r2, r4
   2b88c:	mov	r5, r3
   2b890:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2b894:	mov	ip, r5
   2b898:	mvn	lr, #0
   2b89c:	mov	r2, #0
   2b8a0:	mvn	r3, #6
   2b8a4:	mov	r6, r8
   2b8a8:	mov	r5, r9
   2b8ac:	umull	r8, r7, r6, r4
   2b8b0:	mvn	r9, #0
   2b8b4:	mla	r7, r6, ip, r7
   2b8b8:	subs	r6, r0, r6
   2b8bc:	sbcs	r6, r1, r5
   2b8c0:	mov	r6, #0
   2b8c4:	movwcc	r6, #1
   2b8c8:	cmp	r6, #0
   2b8cc:	mlaeq	r9, r5, r4, r7
   2b8d0:	movne	r8, lr
   2b8d4:	orrne	r2, r2, #1
   2b8d8:	adds	r3, r3, #1
   2b8dc:	mov	r6, r8
   2b8e0:	mov	r5, r9
   2b8e4:	bne	2b8ac <__assert_fail@plt+0x18cf0>
   2b8e8:	b	2b9d4 <__assert_fail@plt+0x18e18>
   2b8ec:	ldr	r0, [sp, #12]
   2b8f0:	strd	r8, [r0]
   2b8f4:	ldr	r6, [sp, #4]
   2b8f8:	orr	r6, r6, #2
   2b8fc:	b	2ba00 <__assert_fail@plt+0x18e44>
   2b900:	mvn	r0, #0
   2b904:	mvn	r1, #0
   2b908:	mov	r2, r4
   2b90c:	mov	r5, r3
   2b910:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2b914:	mov	ip, r5
   2b918:	mvn	lr, #0
   2b91c:	mov	r2, #0
   2b920:	mvn	r3, #5
   2b924:	mov	r5, r8
   2b928:	mov	r7, r9
   2b92c:	umull	r8, r6, r5, r4
   2b930:	mvn	r9, #0
   2b934:	mla	r6, r5, ip, r6
   2b938:	subs	r5, r0, r5
   2b93c:	sbcs	r5, r1, r7
   2b940:	mov	r5, #0
   2b944:	movwcc	r5, #1
   2b948:	cmp	r5, #0
   2b94c:	mlaeq	r9, r7, r4, r6
   2b950:	movne	r8, lr
   2b954:	orrne	r2, r2, #1
   2b958:	adds	r3, r3, #1
   2b95c:	mov	r5, r8
   2b960:	mov	r7, r9
   2b964:	bne	2b92c <__assert_fail@plt+0x18d70>
   2b968:	b	2b9d4 <__assert_fail@plt+0x18e18>
   2b96c:	mvn	r0, #0
   2b970:	mvn	r1, #0
   2b974:	mov	r2, r4
   2b978:	mov	r5, r3
   2b97c:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2b980:	mov	ip, r5
   2b984:	mvn	lr, #0
   2b988:	mov	r2, #0
   2b98c:	mvn	r3, #4
   2b990:	mov	r6, r8
   2b994:	mov	r5, r9
   2b998:	umull	r8, r7, r6, r4
   2b99c:	mvn	r9, #0
   2b9a0:	mla	r7, r6, ip, r7
   2b9a4:	subs	r6, r0, r6
   2b9a8:	sbcs	r6, r1, r5
   2b9ac:	mov	r6, #0
   2b9b0:	movwcc	r6, #1
   2b9b4:	cmp	r6, #0
   2b9b8:	mlaeq	r9, r5, r4, r7
   2b9bc:	movne	r8, lr
   2b9c0:	orrne	r2, r2, #1
   2b9c4:	adds	r3, r3, #1
   2b9c8:	mov	r6, r8
   2b9cc:	mov	r5, r9
   2b9d0:	bne	2b998 <__assert_fail@plt+0x18ddc>
   2b9d4:	ldr	r1, [sp]
   2b9d8:	ldr	r3, [sp, #8]
   2b9dc:	ldr	r6, [sp, #4]
   2b9e0:	add	r0, r1, r3
   2b9e4:	orr	r6, r2, r6
   2b9e8:	str	r0, [sl]
   2b9ec:	ldrb	r0, [r1, r3]
   2b9f0:	cmp	r0, #0
   2b9f4:	orrne	r6, r6, #2
   2b9f8:	ldr	r0, [sp, #12]
   2b9fc:	strd	r8, [r0]
   2ba00:	mov	r0, r6
   2ba04:	sub	sp, fp, #28
   2ba08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba0c:	movw	r0, #13511	; 0x34c7
   2ba10:	movw	r1, #13549	; 0x34ed
   2ba14:	movw	r3, #13642	; 0x354a
   2ba18:	mov	r2, #84	; 0x54
   2ba1c:	movt	r0, #4
   2ba20:	movt	r1, #4
   2ba24:	movt	r3, #4
   2ba28:	bl	12bbc <__assert_fail@plt>
   2ba2c:	push	{r4, sl, fp, lr}
   2ba30:	add	fp, sp, #8
   2ba34:	sub	sp, sp, #8
   2ba38:	movw	r0, #17768	; 0x4568
   2ba3c:	mov	r4, #0
   2ba40:	mov	r1, sp
   2ba44:	movt	r0, #5
   2ba48:	str	r4, [sp, #4]
   2ba4c:	str	r4, [sp]
   2ba50:	ldr	r2, [r0]
   2ba54:	add	r0, sp, #4
   2ba58:	bl	12b08 <getline@plt>
   2ba5c:	cmp	r0, #1
   2ba60:	blt	2ba90 <__assert_fail@plt+0x18ed4>
   2ba64:	sub	r1, r0, #1
   2ba68:	ldr	r0, [sp, #4]
   2ba6c:	ldrb	r2, [r0, r1]
   2ba70:	cmp	r2, #10
   2ba74:	moveq	r2, #0
   2ba78:	strbeq	r2, [r0, r1]
   2ba7c:	ldreq	r0, [sp, #4]
   2ba80:	bl	129dc <rpmatch@plt>
   2ba84:	mov	r4, #0
   2ba88:	cmp	r0, #0
   2ba8c:	movwgt	r4, #1
   2ba90:	ldr	r0, [sp, #4]
   2ba94:	bl	2c048 <__assert_fail@plt+0x1948c>
   2ba98:	mov	r0, r4
   2ba9c:	sub	sp, fp, #8
   2baa0:	pop	{r4, sl, fp, pc}
   2baa4:	clz	r2, r1
   2baa8:	clz	r3, r0
   2baac:	lsr	r2, r2, #5
   2bab0:	lsr	r3, r3, #5
   2bab4:	orrs	r2, r3, r2
   2bab8:	movwne	r1, #1
   2babc:	movwne	r0, #1
   2bac0:	cmp	r1, #0
   2bac4:	beq	2baf4 <__assert_fail@plt+0x18f38>
   2bac8:	mvn	r2, #-2147483648	; 0x80000000
   2bacc:	udiv	r2, r2, r1
   2bad0:	cmp	r2, r0
   2bad4:	bcs	2baf4 <__assert_fail@plt+0x18f38>
   2bad8:	push	{fp, lr}
   2badc:	mov	fp, sp
   2bae0:	bl	128d4 <__errno_location@plt>
   2bae4:	mov	r1, #12
   2bae8:	str	r1, [r0]
   2baec:	mov	r0, #0
   2baf0:	pop	{fp, pc}
   2baf4:	b	12454 <calloc@plt>
   2baf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bafc:	add	fp, sp, #28
   2bb00:	sub	sp, sp, #4
   2bb04:	mov	r5, r0
   2bb08:	bl	126b8 <chdir@plt>
   2bb0c:	cmp	r0, #0
   2bb10:	beq	2bce4 <__assert_fail@plt+0x19128>
   2bb14:	mov	r6, r0
   2bb18:	bl	128d4 <__errno_location@plt>
   2bb1c:	mov	r9, r0
   2bb20:	ldr	r0, [r0]
   2bb24:	cmp	r0, #36	; 0x24
   2bb28:	bne	2bce8 <__assert_fail@plt+0x1912c>
   2bb2c:	mov	r0, r5
   2bb30:	bl	1288c <strlen@plt>
   2bb34:	mov	r6, r0
   2bb38:	mvn	r0, #99	; 0x63
   2bb3c:	cmp	r6, #0
   2bb40:	str	r0, [sp]
   2bb44:	beq	2bd14 <__assert_fail@plt+0x19158>
   2bb48:	mov	r0, #0
   2bb4c:	cmp	r0, r6, lsr #12
   2bb50:	beq	2bd34 <__assert_fail@plt+0x19178>
   2bb54:	movw	r1, #57938	; 0xe252
   2bb58:	mov	r0, r5
   2bb5c:	movt	r1, #3
   2bb60:	bl	12bb0 <strspn@plt>
   2bb64:	cmp	r0, #0
   2bb68:	mov	r7, r5
   2bb6c:	beq	2bbf4 <__assert_fail@plt+0x19038>
   2bb70:	mov	r4, r0
   2bb74:	cmp	r0, #2
   2bb78:	bne	2bbd8 <__assert_fail@plt+0x1901c>
   2bb7c:	add	r0, r5, #3
   2bb80:	sub	r2, r6, #3
   2bb84:	mov	r1, #47	; 0x2f
   2bb88:	mov	r7, #47	; 0x2f
   2bb8c:	bl	1297c <memchr@plt>
   2bb90:	cmp	r0, #0
   2bb94:	beq	2bccc <__assert_fail@plt+0x19110>
   2bb98:	mov	r4, r0
   2bb9c:	mov	r0, #0
   2bba0:	mov	r1, r5
   2bba4:	strb	r0, [r4]
   2bba8:	mov	r0, sp
   2bbac:	bl	2bd94 <__assert_fail@plt+0x191d8>
   2bbb0:	cmp	r0, #0
   2bbb4:	strb	r7, [r4]
   2bbb8:	bne	2bcb8 <__assert_fail@plt+0x190fc>
   2bbbc:	movw	r1, #57938	; 0xe252
   2bbc0:	add	r4, r4, #1
   2bbc4:	movt	r1, #3
   2bbc8:	mov	r0, r4
   2bbcc:	bl	12bb0 <strspn@plt>
   2bbd0:	add	r7, r4, r0
   2bbd4:	b	2bbf4 <__assert_fail@plt+0x19038>
   2bbd8:	movw	r1, #57938	; 0xe252
   2bbdc:	mov	r0, sp
   2bbe0:	movt	r1, #3
   2bbe4:	bl	2bd94 <__assert_fail@plt+0x191d8>
   2bbe8:	cmp	r0, #0
   2bbec:	bne	2bcb8 <__assert_fail@plt+0x190fc>
   2bbf0:	add	r7, r5, r4
   2bbf4:	ldrb	r0, [r7]
   2bbf8:	cmp	r0, #47	; 0x2f
   2bbfc:	beq	2bd54 <__assert_fail@plt+0x19198>
   2bc00:	add	r5, r5, r6
   2bc04:	cmp	r7, r5
   2bc08:	bhi	2bd74 <__assert_fail@plt+0x191b8>
   2bc0c:	sub	r0, r5, r7
   2bc10:	cmp	r0, #4096	; 0x1000
   2bc14:	blt	2bc8c <__assert_fail@plt+0x190d0>
   2bc18:	movw	r8, #57938	; 0xe252
   2bc1c:	mov	sl, sp
   2bc20:	movt	r8, #3
   2bc24:	mov	r0, r7
   2bc28:	mov	r1, #47	; 0x2f
   2bc2c:	mov	r2, #4096	; 0x1000
   2bc30:	bl	128bc <memrchr@plt>
   2bc34:	cmp	r0, #0
   2bc38:	beq	2bccc <__assert_fail@plt+0x19110>
   2bc3c:	mov	r1, #0
   2bc40:	mov	r6, r0
   2bc44:	strb	r1, [r0], -r7
   2bc48:	cmp	r0, #4096	; 0x1000
   2bc4c:	bge	2bcf4 <__assert_fail@plt+0x19138>
   2bc50:	mov	r0, sl
   2bc54:	mov	r1, r7
   2bc58:	bl	2bd94 <__assert_fail@plt+0x191d8>
   2bc5c:	mov	r1, #47	; 0x2f
   2bc60:	cmp	r0, #0
   2bc64:	strb	r1, [r6]
   2bc68:	bne	2bcb8 <__assert_fail@plt+0x190fc>
   2bc6c:	add	r4, r6, #1
   2bc70:	mov	r1, r8
   2bc74:	mov	r0, r4
   2bc78:	bl	12bb0 <strspn@plt>
   2bc7c:	add	r7, r4, r0
   2bc80:	sub	r0, r5, r7
   2bc84:	cmp	r0, #4096	; 0x1000
   2bc88:	bge	2bc24 <__assert_fail@plt+0x19068>
   2bc8c:	cmp	r7, r5
   2bc90:	bcs	2bca8 <__assert_fail@plt+0x190ec>
   2bc94:	mov	r0, sp
   2bc98:	mov	r1, r7
   2bc9c:	bl	2bd94 <__assert_fail@plt+0x191d8>
   2bca0:	cmp	r0, #0
   2bca4:	bne	2bcb8 <__assert_fail@plt+0x190fc>
   2bca8:	ldr	r0, [sp]
   2bcac:	bl	12aa8 <fchdir@plt>
   2bcb0:	cmp	r0, #0
   2bcb4:	beq	2bcdc <__assert_fail@plt+0x19120>
   2bcb8:	ldr	r4, [r9]
   2bcbc:	mov	r0, sp
   2bcc0:	bl	2bdd0 <__assert_fail@plt+0x19214>
   2bcc4:	str	r4, [r9]
   2bcc8:	b	2bcd4 <__assert_fail@plt+0x19118>
   2bccc:	mov	r0, #36	; 0x24
   2bcd0:	str	r0, [r9]
   2bcd4:	mvn	r6, #0
   2bcd8:	b	2bce8 <__assert_fail@plt+0x1912c>
   2bcdc:	mov	r0, sp
   2bce0:	bl	2bdd0 <__assert_fail@plt+0x19214>
   2bce4:	mov	r6, #0
   2bce8:	mov	r0, r6
   2bcec:	sub	sp, fp, #28
   2bcf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bcf4:	movw	r0, #13804	; 0x35ec
   2bcf8:	movw	r1, #13729	; 0x35a1
   2bcfc:	movw	r3, #13742	; 0x35ae
   2bd00:	mov	r2, #179	; 0xb3
   2bd04:	movt	r0, #4
   2bd08:	movt	r1, #4
   2bd0c:	movt	r3, #4
   2bd10:	bl	12bbc <__assert_fail@plt>
   2bd14:	movw	r0, #13721	; 0x3599
   2bd18:	movw	r1, #13729	; 0x35a1
   2bd1c:	movw	r3, #13742	; 0x35ae
   2bd20:	mov	r2, #126	; 0x7e
   2bd24:	movt	r0, #4
   2bd28:	movt	r1, #4
   2bd2c:	movt	r3, #4
   2bd30:	bl	12bbc <__assert_fail@plt>
   2bd34:	movw	r0, #13765	; 0x35c5
   2bd38:	movw	r1, #13729	; 0x35a1
   2bd3c:	movw	r3, #13742	; 0x35ae
   2bd40:	mov	r2, #127	; 0x7f
   2bd44:	movt	r0, #4
   2bd48:	movt	r1, #4
   2bd4c:	movt	r3, #4
   2bd50:	bl	12bbc <__assert_fail@plt>
   2bd54:	movw	r0, #13777	; 0x35d1
   2bd58:	movw	r1, #13729	; 0x35a1
   2bd5c:	movw	r3, #13742	; 0x35ae
   2bd60:	mov	r2, #162	; 0xa2
   2bd64:	movt	r0, #4
   2bd68:	movt	r1, #4
   2bd6c:	movt	r3, #4
   2bd70:	bl	12bbc <__assert_fail@plt>
   2bd74:	movw	r0, #13789	; 0x35dd
   2bd78:	movw	r1, #13729	; 0x35a1
   2bd7c:	movw	r3, #13742	; 0x35ae
   2bd80:	mov	r2, #163	; 0xa3
   2bd84:	movt	r0, #4
   2bd88:	movt	r1, #4
   2bd8c:	movt	r3, #4
   2bd90:	bl	12bbc <__assert_fail@plt>
   2bd94:	push	{r4, r5, fp, lr}
   2bd98:	add	fp, sp, #8
   2bd9c:	mov	r4, r0
   2bda0:	ldr	r0, [r0]
   2bda4:	mov	r2, #18688	; 0x4900
   2bda8:	bl	128b0 <openat64@plt>
   2bdac:	cmp	r0, #0
   2bdb0:	mvnlt	r0, #0
   2bdb4:	poplt	{r4, r5, fp, pc}
   2bdb8:	mov	r5, r0
   2bdbc:	mov	r0, r4
   2bdc0:	bl	2bdd0 <__assert_fail@plt+0x19214>
   2bdc4:	mov	r0, #0
   2bdc8:	str	r5, [r4]
   2bdcc:	pop	{r4, r5, fp, pc}
   2bdd0:	push	{fp, lr}
   2bdd4:	mov	fp, sp
   2bdd8:	ldr	r0, [r0]
   2bddc:	cmp	r0, #0
   2bde0:	poplt	{fp, pc}
   2bde4:	bl	12b74 <close@plt>
   2bde8:	cmp	r0, #0
   2bdec:	bne	2bdf4 <__assert_fail@plt+0x19238>
   2bdf0:	pop	{fp, pc}
   2bdf4:	movw	r0, #13823	; 0x35ff
   2bdf8:	movw	r1, #13729	; 0x35a1
   2bdfc:	movw	r3, #13836	; 0x360c
   2be00:	mov	r2, #64	; 0x40
   2be04:	movt	r0, #4
   2be08:	movt	r1, #4
   2be0c:	movt	r3, #4
   2be10:	bl	12bbc <__assert_fail@plt>
   2be14:	sub	sp, sp, #8
   2be18:	push	{r4, r5, r6, r7, fp, lr}
   2be1c:	add	fp, sp, #16
   2be20:	sub	sp, sp, #8
   2be24:	mov	r5, r0
   2be28:	add	r0, fp, #8
   2be2c:	cmp	r1, #11
   2be30:	str	r3, [fp, #12]
   2be34:	str	r2, [fp, #8]
   2be38:	str	r0, [sp, #4]
   2be3c:	bhi	2be78 <__assert_fail@plt+0x192bc>
   2be40:	mov	r0, #1
   2be44:	movw	r2, #1300	; 0x514
   2be48:	tst	r2, r0, lsl r1
   2be4c:	bne	2bf30 <__assert_fail@plt+0x19374>
   2be50:	movw	r2, #2570	; 0xa0a
   2be54:	tst	r2, r0, lsl r1
   2be58:	bne	2bea0 <__assert_fail@plt+0x192e4>
   2be5c:	cmp	r1, #0
   2be60:	bne	2be78 <__assert_fail@plt+0x192bc>
   2be64:	ldr	r0, [sp, #4]
   2be68:	add	r1, r0, #4
   2be6c:	str	r1, [sp, #4]
   2be70:	mov	r1, #0
   2be74:	b	2bf3c <__assert_fail@plt+0x19380>
   2be78:	sub	r0, r1, #1024	; 0x400
   2be7c:	cmp	r0, #10
   2be80:	bhi	2bf30 <__assert_fail@plt+0x19374>
   2be84:	mov	r2, #1
   2be88:	movw	r3, #645	; 0x285
   2be8c:	tst	r3, r2, lsl r0
   2be90:	bne	2bf30 <__assert_fail@plt+0x19374>
   2be94:	movw	r3, #1282	; 0x502
   2be98:	tst	r3, r2, lsl r0
   2be9c:	beq	2beac <__assert_fail@plt+0x192f0>
   2bea0:	mov	r0, r5
   2bea4:	bl	129d0 <fcntl64@plt>
   2bea8:	b	2bf48 <__assert_fail@plt+0x1938c>
   2beac:	cmp	r0, #6
   2beb0:	bne	2bf30 <__assert_fail@plt+0x19374>
   2beb4:	ldr	r0, [sp, #4]
   2beb8:	movw	r7, #20048	; 0x4e50
   2bebc:	movt	r7, #5
   2bec0:	add	r1, r0, #4
   2bec4:	str	r1, [sp, #4]
   2bec8:	ldr	r6, [r0]
   2becc:	ldr	r0, [r7]
   2bed0:	cmp	r0, #0
   2bed4:	blt	2bf6c <__assert_fail@plt+0x193b0>
   2bed8:	mov	r0, r5
   2bedc:	movw	r1, #1030	; 0x406
   2bee0:	mov	r2, r6
   2bee4:	bl	129d0 <fcntl64@plt>
   2bee8:	mov	r4, r0
   2beec:	cmn	r0, #1
   2bef0:	bgt	2bf60 <__assert_fail@plt+0x193a4>
   2bef4:	bl	128d4 <__errno_location@plt>
   2bef8:	ldr	r0, [r0]
   2befc:	cmp	r0, #22
   2bf00:	bne	2bf60 <__assert_fail@plt+0x193a4>
   2bf04:	mov	r0, r5
   2bf08:	mov	r1, #0
   2bf0c:	mov	r2, r6
   2bf10:	bl	129d0 <fcntl64@plt>
   2bf14:	mov	r4, r0
   2bf18:	cmp	r0, #0
   2bf1c:	blt	2bf4c <__assert_fail@plt+0x19390>
   2bf20:	mvn	r0, #0
   2bf24:	str	r0, [r7]
   2bf28:	mov	r0, #1
   2bf2c:	b	2bf90 <__assert_fail@plt+0x193d4>
   2bf30:	ldr	r0, [sp, #4]
   2bf34:	add	r2, r0, #4
   2bf38:	str	r2, [sp, #4]
   2bf3c:	ldr	r2, [r0]
   2bf40:	mov	r0, r5
   2bf44:	bl	129d0 <fcntl64@plt>
   2bf48:	mov	r4, r0
   2bf4c:	mov	r0, r4
   2bf50:	sub	sp, fp, #16
   2bf54:	pop	{r4, r5, r6, r7, fp, lr}
   2bf58:	add	sp, sp, #8
   2bf5c:	bx	lr
   2bf60:	mov	r0, #1
   2bf64:	str	r0, [r7]
   2bf68:	b	2bf4c <__assert_fail@plt+0x19390>
   2bf6c:	mov	r0, r5
   2bf70:	mov	r1, #0
   2bf74:	mov	r2, r6
   2bf78:	bl	129d0 <fcntl64@plt>
   2bf7c:	mov	r4, r0
   2bf80:	ldr	r0, [r7]
   2bf84:	add	r0, r0, #1
   2bf88:	clz	r0, r0
   2bf8c:	lsr	r0, r0, #5
   2bf90:	cmp	r0, #0
   2bf94:	beq	2bf4c <__assert_fail@plt+0x19390>
   2bf98:	cmp	r4, #0
   2bf9c:	blt	2bf4c <__assert_fail@plt+0x19390>
   2bfa0:	mov	r0, r4
   2bfa4:	mov	r1, #1
   2bfa8:	bl	129d0 <fcntl64@plt>
   2bfac:	cmp	r0, #0
   2bfb0:	blt	2bfcc <__assert_fail@plt+0x19410>
   2bfb4:	orr	r2, r0, #1
   2bfb8:	mov	r0, r4
   2bfbc:	mov	r1, #2
   2bfc0:	bl	129d0 <fcntl64@plt>
   2bfc4:	cmn	r0, #1
   2bfc8:	bne	2bf4c <__assert_fail@plt+0x19390>
   2bfcc:	bl	128d4 <__errno_location@plt>
   2bfd0:	ldr	r6, [r0]
   2bfd4:	mov	r5, r0
   2bfd8:	mov	r0, r4
   2bfdc:	bl	12b74 <close@plt>
   2bfe0:	str	r6, [r5]
   2bfe4:	mvn	r4, #0
   2bfe8:	b	2bf4c <__assert_fail@plt+0x19390>
   2bfec:	push	{r4, sl, fp, lr}
   2bff0:	add	fp, sp, #8
   2bff4:	sub	sp, sp, #8
   2bff8:	mov	r4, r0
   2bffc:	cmp	r0, #0
   2c000:	beq	2c01c <__assert_fail@plt+0x19460>
   2c004:	mov	r0, r4
   2c008:	bl	12814 <__freading@plt>
   2c00c:	cmp	r0, #0
   2c010:	ldrbne	r0, [r4, #1]
   2c014:	tstne	r0, #1
   2c018:	bne	2c02c <__assert_fail@plt+0x19470>
   2c01c:	mov	r0, r4
   2c020:	sub	sp, fp, #8
   2c024:	pop	{r4, sl, fp, lr}
   2c028:	b	1252c <fflush@plt>
   2c02c:	mov	r0, #1
   2c030:	mov	r2, #0
   2c034:	mov	r3, #0
   2c038:	str	r0, [sp]
   2c03c:	mov	r0, r4
   2c040:	bl	2c070 <__assert_fail@plt+0x194b4>
   2c044:	b	2c01c <__assert_fail@plt+0x19460>
   2c048:	push	{r4, r5, r6, sl, fp, lr}
   2c04c:	add	fp, sp, #16
   2c050:	mov	r4, r0
   2c054:	bl	128d4 <__errno_location@plt>
   2c058:	ldr	r6, [r0]
   2c05c:	mov	r5, r0
   2c060:	mov	r0, r4
   2c064:	bl	12568 <free@plt>
   2c068:	str	r6, [r5]
   2c06c:	pop	{r4, r5, r6, sl, fp, pc}
   2c070:	push	{r4, r5, r6, r7, fp, lr}
   2c074:	add	fp, sp, #16
   2c078:	sub	sp, sp, #8
   2c07c:	mov	r4, r0
   2c080:	ldr	r0, [r0, #4]
   2c084:	mov	r5, r3
   2c088:	mov	r6, r2
   2c08c:	ldr	r1, [r4, #8]
   2c090:	cmp	r1, r0
   2c094:	bne	2c0b0 <__assert_fail@plt+0x194f4>
   2c098:	ldrd	r0, [r4, #16]
   2c09c:	cmp	r1, r0
   2c0a0:	bne	2c0b0 <__assert_fail@plt+0x194f4>
   2c0a4:	ldr	r0, [r4, #36]	; 0x24
   2c0a8:	cmp	r0, #0
   2c0ac:	beq	2c0c8 <__assert_fail@plt+0x1950c>
   2c0b0:	mov	r0, r4
   2c0b4:	mov	r2, r6
   2c0b8:	mov	r3, r5
   2c0bc:	sub	sp, fp, #16
   2c0c0:	pop	{r4, r5, r6, r7, fp, lr}
   2c0c4:	b	129b8 <fseeko64@plt>
   2c0c8:	ldr	r7, [fp, #8]
   2c0cc:	mov	r0, r4
   2c0d0:	bl	12958 <fileno@plt>
   2c0d4:	mov	r2, r6
   2c0d8:	mov	r3, r5
   2c0dc:	str	r7, [sp]
   2c0e0:	bl	12718 <lseek64@plt>
   2c0e4:	and	r2, r0, r1
   2c0e8:	cmn	r2, #1
   2c0ec:	beq	2c108 <__assert_fail@plt+0x1954c>
   2c0f0:	strd	r0, [r4, #80]	; 0x50
   2c0f4:	ldr	r0, [r4]
   2c0f8:	bic	r0, r0, #16
   2c0fc:	str	r0, [r4]
   2c100:	mov	r0, #0
   2c104:	b	2c10c <__assert_fail@plt+0x19550>
   2c108:	mvn	r0, #0
   2c10c:	sub	sp, fp, #16
   2c110:	pop	{r4, r5, r6, r7, fp, pc}
   2c114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c118:	add	fp, sp, #28
   2c11c:	sub	sp, sp, #12
   2c120:	cmp	r1, #4096	; 0x1000
   2c124:	bcs	2c140 <__assert_fail@plt+0x19584>
   2c128:	mov	r6, r0
   2c12c:	and	r0, r1, #516	; 0x204
   2c130:	mov	r5, r1
   2c134:	cmp	r0, #516	; 0x204
   2c138:	tstne	r5, #18
   2c13c:	bne	2c15c <__assert_fail@plt+0x195a0>
   2c140:	bl	128d4 <__errno_location@plt>
   2c144:	mov	r1, #22
   2c148:	str	r1, [r0]
   2c14c:	mov	r8, #0
   2c150:	mov	r0, r8
   2c154:	sub	sp, fp, #28
   2c158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c15c:	mov	r0, #1
   2c160:	mov	r1, #96	; 0x60
   2c164:	mov	r9, r2
   2c168:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   2c16c:	cmp	r0, #0
   2c170:	beq	2c14c <__assert_fail@plt+0x19590>
   2c174:	mov	r8, r0
   2c178:	mvn	r0, #99	; 0x63
   2c17c:	tst	r5, #2
   2c180:	mov	r1, r5
   2c184:	str	r0, [r8, #32]
   2c188:	bic	r0, r5, #516	; 0x204
   2c18c:	str	r9, [r8, #44]	; 0x2c
   2c190:	orrne	r1, r0, #4
   2c194:	str	r1, [r8, #48]	; 0x30
   2c198:	ldr	r0, [r6]
   2c19c:	cmp	r0, #0
   2c1a0:	beq	2c1d4 <__assert_fail@plt+0x19618>
   2c1a4:	add	r4, r6, #4
   2c1a8:	mov	r7, #0
   2c1ac:	bl	1288c <strlen@plt>
   2c1b0:	cmp	r0, r7
   2c1b4:	movhi	r7, r0
   2c1b8:	ldr	r0, [r4], #4
   2c1bc:	cmp	r0, #0
   2c1c0:	bne	2c1ac <__assert_fail@plt+0x195f0>
   2c1c4:	add	r1, r7, #1
   2c1c8:	cmp	r1, #4096	; 0x1000
   2c1cc:	movls	r1, #4096	; 0x1000
   2c1d0:	b	2c1d8 <__assert_fail@plt+0x1961c>
   2c1d4:	mov	r1, #4096	; 0x1000
   2c1d8:	mov	r0, r8
   2c1dc:	bl	2c430 <__assert_fail@plt+0x19874>
   2c1e0:	cmp	r0, #0
   2c1e4:	beq	2c424 <__assert_fail@plt+0x19868>
   2c1e8:	ldr	r0, [r6]
   2c1ec:	cmp	r0, #0
   2c1f0:	beq	2c220 <__assert_fail@plt+0x19664>
   2c1f4:	movw	r1, #63055	; 0xf64f
   2c1f8:	mov	r0, r8
   2c1fc:	mov	r2, #0
   2c200:	movt	r1, #3
   2c204:	bl	2c4a4 <__assert_fail@plt+0x198e8>
   2c208:	cmp	r0, #0
   2c20c:	beq	2c41c <__assert_fail@plt+0x19860>
   2c210:	mov	r4, r0
   2c214:	mvn	r0, #0
   2c218:	str	r0, [r4, #48]	; 0x30
   2c21c:	b	2c224 <__assert_fail@plt+0x19668>
   2c220:	mov	r4, #0
   2c224:	cmp	r9, #0
   2c228:	ldrbne	r0, [r8, #49]	; 0x31
   2c22c:	ubfxne	r0, r0, #2, #1
   2c230:	ldr	r7, [r6]
   2c234:	moveq	r0, #1
   2c238:	cmp	r7, #0
   2c23c:	beq	2c35c <__assert_fail@plt+0x197a0>
   2c240:	eor	r0, r0, #1
   2c244:	and	r1, r5, #2048	; 0x800
   2c248:	mov	sl, #0
   2c24c:	mov	r5, #0
   2c250:	str	r0, [sp, #4]
   2c254:	mov	r0, #0
   2c258:	str	r1, [sp, #8]
   2c25c:	str	r0, [sp]
   2c260:	mov	r0, r7
   2c264:	bl	1288c <strlen@plt>
   2c268:	mov	r2, r0
   2c26c:	ldr	r0, [sp, #8]
   2c270:	cmp	r0, #0
   2c274:	bne	2c2ac <__assert_fail@plt+0x196f0>
   2c278:	cmp	r2, #3
   2c27c:	bcc	2c2ac <__assert_fail@plt+0x196f0>
   2c280:	add	r0, r7, r2
   2c284:	ldrb	r0, [r0, #-1]
   2c288:	cmp	r0, #47	; 0x2f
   2c28c:	bne	2c2ac <__assert_fail@plt+0x196f0>
   2c290:	sub	r0, r7, #2
   2c294:	ldrb	r1, [r0, r2]
   2c298:	cmp	r1, #47	; 0x2f
   2c29c:	bne	2c2ac <__assert_fail@plt+0x196f0>
   2c2a0:	sub	r2, r2, #1
   2c2a4:	cmp	r2, #1
   2c2a8:	bhi	2c294 <__assert_fail@plt+0x196d8>
   2c2ac:	mov	r0, r8
   2c2b0:	mov	r1, r7
   2c2b4:	bl	2c4a4 <__assert_fail@plt+0x198e8>
   2c2b8:	cmp	r0, #0
   2c2bc:	beq	2c40c <__assert_fail@plt+0x19850>
   2c2c0:	mov	r1, #0
   2c2c4:	ldr	r2, [sp, #4]
   2c2c8:	str	r4, [r0, #4]
   2c2cc:	mov	r7, r0
   2c2d0:	str	r1, [r0, #48]	; 0x30
   2c2d4:	add	r0, r0, #168	; 0xa8
   2c2d8:	str	r0, [r7, #24]
   2c2dc:	clz	r0, sl
   2c2e0:	lsr	r0, r0, #5
   2c2e4:	orrs	r0, r2, r0
   2c2e8:	bne	2c2fc <__assert_fail@plt+0x19740>
   2c2ec:	mov	r0, #2
   2c2f0:	strd	r0, [r7, #112]	; 0x70
   2c2f4:	mov	r0, #11
   2c2f8:	b	2c310 <__assert_fail@plt+0x19754>
   2c2fc:	mov	r0, r8
   2c300:	mov	r1, r7
   2c304:	mov	r2, #0
   2c308:	bl	2c524 <__assert_fail@plt+0x19968>
   2c30c:	mov	r1, #0
   2c310:	cmp	r9, #0
   2c314:	strh	r0, [r7, #56]	; 0x38
   2c318:	beq	2c328 <__assert_fail@plt+0x1976c>
   2c31c:	str	sl, [r7, #8]
   2c320:	mov	sl, r7
   2c324:	b	2c340 <__assert_fail@plt+0x19784>
   2c328:	cmp	sl, #0
   2c32c:	str	r1, [r7, #8]
   2c330:	beq	2c354 <__assert_fail@plt+0x19798>
   2c334:	ldr	r0, [sp]
   2c338:	str	r7, [sp]
   2c33c:	str	r7, [r0, #8]
   2c340:	ldr	r7, [r6, #4]!
   2c344:	add	r5, r5, #1
   2c348:	cmp	r7, #0
   2c34c:	bne	2c260 <__assert_fail@plt+0x196a4>
   2c350:	b	2c364 <__assert_fail@plt+0x197a8>
   2c354:	str	r7, [sp]
   2c358:	b	2c320 <__assert_fail@plt+0x19764>
   2c35c:	mov	sl, #0
   2c360:	b	2c388 <__assert_fail@plt+0x197cc>
   2c364:	cmp	r9, #0
   2c368:	beq	2c388 <__assert_fail@plt+0x197cc>
   2c36c:	cmp	r5, #2
   2c370:	bcc	2c388 <__assert_fail@plt+0x197cc>
   2c374:	mov	r0, r8
   2c378:	mov	r1, sl
   2c37c:	mov	r2, r5
   2c380:	bl	2c658 <__assert_fail@plt+0x19a9c>
   2c384:	mov	sl, r0
   2c388:	movw	r1, #63055	; 0xf64f
   2c38c:	mov	r0, r8
   2c390:	mov	r2, #0
   2c394:	movt	r1, #3
   2c398:	bl	2c4a4 <__assert_fail@plt+0x198e8>
   2c39c:	cmp	r0, #0
   2c3a0:	str	r0, [r8]
   2c3a4:	beq	2c40c <__assert_fail@plt+0x19850>
   2c3a8:	mov	r1, #9
   2c3ac:	strh	r1, [r0, #56]	; 0x38
   2c3b0:	mov	r1, #1
   2c3b4:	str	sl, [r0, #8]
   2c3b8:	str	r1, [r0, #48]	; 0x30
   2c3bc:	mov	r0, r8
   2c3c0:	bl	2c750 <__assert_fail@plt+0x19b94>
   2c3c4:	cmp	r0, #0
   2c3c8:	beq	2c40c <__assert_fail@plt+0x19850>
   2c3cc:	ldrh	r0, [r8, #48]	; 0x30
   2c3d0:	tst	r0, #516	; 0x204
   2c3d4:	bne	2c3fc <__assert_fail@plt+0x19840>
   2c3d8:	movw	r1, #59684	; 0xe924
   2c3dc:	mov	r0, r8
   2c3e0:	movt	r1, #3
   2c3e4:	bl	2c7dc <__assert_fail@plt+0x19c20>
   2c3e8:	str	r0, [r8, #28]
   2c3ec:	cmn	r0, #1
   2c3f0:	ldrle	r0, [r8, #48]	; 0x30
   2c3f4:	orrle	r0, r0, #4
   2c3f8:	strle	r0, [r8, #48]	; 0x30
   2c3fc:	add	r0, r8, #60	; 0x3c
   2c400:	mvn	r1, #0
   2c404:	bl	3cc44 <__assert_fail@plt+0x2a088>
   2c408:	b	2c150 <__assert_fail@plt+0x19594>
   2c40c:	mov	r0, sl
   2c410:	bl	2c80c <__assert_fail@plt+0x19c50>
   2c414:	mov	r0, r4
   2c418:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c41c:	ldr	r0, [r8, #24]
   2c420:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c424:	mov	r0, r8
   2c428:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c42c:	b	2c14c <__assert_fail@plt+0x19590>
   2c430:	push	{r4, r5, fp, lr}
   2c434:	add	fp, sp, #8
   2c438:	mov	r4, r0
   2c43c:	ldr	r0, [r0, #36]	; 0x24
   2c440:	add	r1, r1, #256	; 0x100
   2c444:	adds	r1, r1, r0
   2c448:	bcc	2c46c <__assert_fail@plt+0x198b0>
   2c44c:	ldr	r0, [r4, #24]
   2c450:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c454:	mov	r5, #0
   2c458:	str	r5, [r4, #24]
   2c45c:	bl	128d4 <__errno_location@plt>
   2c460:	mov	r1, #36	; 0x24
   2c464:	str	r1, [r0]
   2c468:	b	2c49c <__assert_fail@plt+0x198e0>
   2c46c:	str	r1, [r4, #36]	; 0x24
   2c470:	ldr	r0, [r4, #24]
   2c474:	bl	2ecdc <__assert_fail@plt+0x1c120>
   2c478:	cmp	r0, #0
   2c47c:	beq	2c48c <__assert_fail@plt+0x198d0>
   2c480:	mov	r5, #1
   2c484:	str	r0, [r4, #24]
   2c488:	b	2c49c <__assert_fail@plt+0x198e0>
   2c48c:	ldr	r0, [r4, #24]
   2c490:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c494:	mov	r5, #0
   2c498:	str	r5, [r4, #24]
   2c49c:	mov	r0, r5
   2c4a0:	pop	{r4, r5, fp, pc}
   2c4a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c4a8:	add	fp, sp, #24
   2c4ac:	mov	r5, r0
   2c4b0:	add	r0, r2, #176	; 0xb0
   2c4b4:	mov	r6, r2
   2c4b8:	mov	r8, r1
   2c4bc:	bic	r0, r0, #7
   2c4c0:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2c4c4:	cmp	r0, #0
   2c4c8:	beq	2c518 <__assert_fail@plt+0x1995c>
   2c4cc:	add	r7, r0, #168	; 0xa8
   2c4d0:	mov	r4, r0
   2c4d4:	mov	r1, r8
   2c4d8:	mov	r2, r6
   2c4dc:	mov	r0, r7
   2c4e0:	bl	125c8 <memcpy@plt>
   2c4e4:	mov	r0, #0
   2c4e8:	mov	r2, #196608	; 0x30000
   2c4ec:	strb	r0, [r7, r6]
   2c4f0:	str	r6, [r4, #52]	; 0x34
   2c4f4:	str	r5, [r4, #44]	; 0x2c
   2c4f8:	ldr	r1, [r5, #24]
   2c4fc:	str	r2, [r4, #58]	; 0x3a
   2c500:	str	r0, [r4, #12]
   2c504:	str	r0, [r4, #16]
   2c508:	str	r0, [r4, #20]
   2c50c:	str	r1, [r4, #28]
   2c510:	str	r0, [r4, #32]
   2c514:	b	2c51c <__assert_fail@plt+0x19960>
   2c518:	mov	r4, #0
   2c51c:	mov	r0, r4
   2c520:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c524:	push	{r4, r5, r6, sl, fp, lr}
   2c528:	add	fp, sp, #16
   2c52c:	mov	r4, r1
   2c530:	ldr	r1, [r0, #48]	; 0x30
   2c534:	ldr	r3, [r4, #48]	; 0x30
   2c538:	add	r5, r4, #64	; 0x40
   2c53c:	cmp	r3, #0
   2c540:	andeq	r3, r1, #1
   2c544:	orreq	r2, r3, r2
   2c548:	cmp	r2, #0
   2c54c:	andseq	r1, r1, #2
   2c550:	beq	2c5a0 <__assert_fail@plt+0x199e4>
   2c554:	ldr	r0, [r4, #24]
   2c558:	mov	r1, r5
   2c55c:	bl	3d704 <__assert_fail@plt+0x2ab48>
   2c560:	cmp	r0, #0
   2c564:	beq	2c5e4 <__assert_fail@plt+0x19a28>
   2c568:	bl	128d4 <__errno_location@plt>
   2c56c:	mov	r6, r0
   2c570:	ldr	r0, [r0]
   2c574:	cmp	r0, #2
   2c578:	bne	2c5c8 <__assert_fail@plt+0x19a0c>
   2c57c:	ldr	r0, [r4, #24]
   2c580:	mov	r1, r5
   2c584:	bl	3d724 <__assert_fail@plt+0x2ab68>
   2c588:	cmp	r0, #0
   2c58c:	bne	2c5c4 <__assert_fail@plt+0x19a08>
   2c590:	mov	r0, #0
   2c594:	str	r0, [r6]
   2c598:	mov	r0, #13
   2c59c:	pop	{r4, r5, r6, sl, fp, pc}
   2c5a0:	ldr	r1, [r4, #24]
   2c5a4:	ldr	r0, [r0, #32]
   2c5a8:	mov	r2, r5
   2c5ac:	mov	r3, #256	; 0x100
   2c5b0:	bl	3d734 <__assert_fail@plt+0x2ab78>
   2c5b4:	cmp	r0, #0
   2c5b8:	beq	2c5e4 <__assert_fail@plt+0x19a28>
   2c5bc:	bl	128d4 <__errno_location@plt>
   2c5c0:	mov	r6, r0
   2c5c4:	ldr	r0, [r6]
   2c5c8:	str	r0, [r4, #32]
   2c5cc:	mov	r0, r5
   2c5d0:	mov	r1, #0
   2c5d4:	mov	r2, #104	; 0x68
   2c5d8:	bl	12904 <memset@plt>
   2c5dc:	mov	r0, #10
   2c5e0:	pop	{r4, r5, r6, sl, fp, pc}
   2c5e4:	ldr	r0, [r4, #80]	; 0x50
   2c5e8:	and	r0, r0, #61440	; 0xf000
   2c5ec:	cmp	r0, #40960	; 0xa000
   2c5f0:	moveq	r0, #12
   2c5f4:	popeq	{r4, r5, r6, sl, fp, pc}
   2c5f8:	cmp	r0, #32768	; 0x8000
   2c5fc:	moveq	r0, #8
   2c600:	popeq	{r4, r5, r6, sl, fp, pc}
   2c604:	cmp	r0, #16384	; 0x4000
   2c608:	bne	2c63c <__assert_fail@plt+0x19a80>
   2c60c:	ldrb	r1, [r4, #168]	; 0xa8
   2c610:	mov	r0, #1
   2c614:	cmp	r1, #46	; 0x2e
   2c618:	popne	{r4, r5, r6, sl, fp, pc}
   2c61c:	ldrb	r1, [r4, #169]	; 0xa9
   2c620:	cmp	r1, #0
   2c624:	beq	2c644 <__assert_fail@plt+0x19a88>
   2c628:	cmp	r1, #46	; 0x2e
   2c62c:	ldrbeq	r1, [r4, #170]	; 0xaa
   2c630:	cmpeq	r1, #0
   2c634:	beq	2c644 <__assert_fail@plt+0x19a88>
   2c638:	pop	{r4, r5, r6, sl, fp, pc}
   2c63c:	mov	r0, #3
   2c640:	pop	{r4, r5, r6, sl, fp, pc}
   2c644:	ldr	r1, [r4, #48]	; 0x30
   2c648:	mov	r0, #5
   2c64c:	cmp	r1, #0
   2c650:	movweq	r0, #1
   2c654:	pop	{r4, r5, r6, sl, fp, pc}
   2c658:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2c65c:	add	fp, sp, #24
   2c660:	ldrd	r8, [r0, #40]	; 0x28
   2c664:	mov	r5, r2
   2c668:	mov	r4, r1
   2c66c:	mov	r6, r0
   2c670:	cmp	r8, r2
   2c674:	bcs	2c6ac <__assert_fail@plt+0x19af0>
   2c678:	add	r1, r5, #40	; 0x28
   2c67c:	cmn	r1, #-1073741823	; 0xc0000001
   2c680:	str	r1, [r6, #40]	; 0x28
   2c684:	bhi	2c734 <__assert_fail@plt+0x19b78>
   2c688:	add	r7, r6, #8
   2c68c:	lsl	r1, r1, #2
   2c690:	ldr	r0, [r7]
   2c694:	bl	2ecdc <__assert_fail@plt+0x1c120>
   2c698:	cmp	r0, #0
   2c69c:	beq	2c734 <__assert_fail@plt+0x19b78>
   2c6a0:	mov	r6, r7
   2c6a4:	str	r0, [r7]
   2c6a8:	b	2c6b0 <__assert_fail@plt+0x19af4>
   2c6ac:	ldr	r0, [r6, #8]!
   2c6b0:	cmp	r4, #0
   2c6b4:	beq	2c6cc <__assert_fail@plt+0x19b10>
   2c6b8:	str	r4, [r0], #4
   2c6bc:	ldr	r4, [r4, #8]
   2c6c0:	cmp	r4, #0
   2c6c4:	bne	2c6b8 <__assert_fail@plt+0x19afc>
   2c6c8:	ldr	r0, [r6]
   2c6cc:	mov	r1, r5
   2c6d0:	mov	r2, #4
   2c6d4:	mov	r3, r9
   2c6d8:	bl	12ac0 <qsort@plt>
   2c6dc:	ldr	r7, [r6]
   2c6e0:	subs	r0, r5, #1
   2c6e4:	ldr	r4, [r7]
   2c6e8:	mov	r1, r4
   2c6ec:	beq	2c728 <__assert_fail@plt+0x19b6c>
   2c6f0:	mov	r1, r7
   2c6f4:	cmp	r5, #2
   2c6f8:	ldr	r2, [r1, #4]!
   2c6fc:	str	r2, [r4, #8]
   2c700:	beq	2c724 <__assert_fail@plt+0x19b68>
   2c704:	rsb	r3, r5, #2
   2c708:	mov	r2, r1
   2c70c:	ldr	r6, [r2, #4]!
   2c710:	ldr	r1, [r1]
   2c714:	adds	r3, r3, #1
   2c718:	str	r6, [r1, #8]
   2c71c:	mov	r1, r2
   2c720:	bne	2c70c <__assert_fail@plt+0x19b50>
   2c724:	ldr	r1, [r7, r0, lsl #2]
   2c728:	mov	r0, #0
   2c72c:	str	r0, [r1, #8]
   2c730:	b	2c748 <__assert_fail@plt+0x19b8c>
   2c734:	ldr	r0, [r6, #8]
   2c738:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c73c:	mov	r0, #0
   2c740:	str	r0, [r6, #40]	; 0x28
   2c744:	str	r0, [r6, #8]
   2c748:	mov	r0, r4
   2c74c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c750:	push	{r4, r5, fp, lr}
   2c754:	add	fp, sp, #8
   2c758:	sub	sp, sp, #8
   2c75c:	mov	r4, r0
   2c760:	ldrh	r0, [r0, #48]	; 0x30
   2c764:	movw	r1, #258	; 0x102
   2c768:	tst	r0, r1
   2c76c:	beq	2c7ac <__assert_fail@plt+0x19bf0>
   2c770:	movw	r0, #49224	; 0xc048
   2c774:	movw	r2, #57120	; 0xdf20
   2c778:	movw	r3, #57152	; 0xdf40
   2c77c:	mov	r1, #0
   2c780:	mov	r5, #0
   2c784:	movt	r0, #2
   2c788:	movt	r2, #2
   2c78c:	movt	r3, #2
   2c790:	str	r0, [sp]
   2c794:	mov	r0, #31
   2c798:	bl	21d98 <__assert_fail@plt+0xf1dc>
   2c79c:	cmp	r0, #0
   2c7a0:	str	r0, [r4, #56]	; 0x38
   2c7a4:	movne	r5, #1
   2c7a8:	b	2c7d0 <__assert_fail@plt+0x19c14>
   2c7ac:	mov	r0, #32
   2c7b0:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2c7b4:	cmp	r0, #0
   2c7b8:	str	r0, [r4, #56]	; 0x38
   2c7bc:	beq	2c7cc <__assert_fail@plt+0x19c10>
   2c7c0:	bl	3ca14 <__assert_fail@plt+0x29e58>
   2c7c4:	mov	r5, #1
   2c7c8:	b	2c7d0 <__assert_fail@plt+0x19c14>
   2c7cc:	mov	r5, #0
   2c7d0:	mov	r0, r5
   2c7d4:	sub	sp, fp, #8
   2c7d8:	pop	{r4, r5, fp, pc}
   2c7dc:	ldr	r3, [r0, #48]	; 0x30
   2c7e0:	mov	r2, #32768	; 0x8000
   2c7e4:	and	r2, r2, r3, lsl #11
   2c7e8:	tst	r3, #512	; 0x200
   2c7ec:	orr	r2, r2, #18688	; 0x4900
   2c7f0:	orr	r2, r2, #524288	; 0x80000
   2c7f4:	bne	2c804 <__assert_fail@plt+0x19c48>
   2c7f8:	mov	r0, r1
   2c7fc:	mov	r1, r2
   2c800:	b	216d8 <__assert_fail@plt+0xeb1c>
   2c804:	ldr	r0, [r0, #32]
   2c808:	b	24c08 <__assert_fail@plt+0x1204c>
   2c80c:	push	{r4, r6, r7, sl, fp, lr}
   2c810:	add	fp, sp, #16
   2c814:	cmp	r0, #0
   2c818:	popeq	{r4, r6, r7, sl, fp, pc}
   2c81c:	mov	r4, r0
   2c820:	ldrd	r6, [r4, #8]
   2c824:	cmp	r7, #0
   2c828:	beq	2c834 <__assert_fail@plt+0x19c78>
   2c82c:	mov	r0, r7
   2c830:	bl	12b8c <closedir@plt>
   2c834:	mov	r0, r4
   2c838:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c83c:	cmp	r6, #0
   2c840:	mov	r4, r6
   2c844:	bne	2c820 <__assert_fail@plt+0x19c64>
   2c848:	pop	{r4, r6, r7, sl, fp, pc}
   2c84c:	push	{r4, r5, fp, lr}
   2c850:	add	fp, sp, #8
   2c854:	mov	r4, r0
   2c858:	ldr	r0, [r0]
   2c85c:	cmp	r0, #0
   2c860:	beq	2c8a0 <__assert_fail@plt+0x19ce4>
   2c864:	ldr	r1, [r0, #48]	; 0x30
   2c868:	cmp	r1, #0
   2c86c:	blt	2c894 <__assert_fail@plt+0x19cd8>
   2c870:	ldr	r5, [r0, #8]
   2c874:	cmp	r5, #0
   2c878:	ldreq	r5, [r0, #4]
   2c87c:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c880:	ldr	r0, [r5, #48]	; 0x30
   2c884:	cmn	r0, #1
   2c888:	mov	r0, r5
   2c88c:	bgt	2c870 <__assert_fail@plt+0x19cb4>
   2c890:	b	2c898 <__assert_fail@plt+0x19cdc>
   2c894:	mov	r5, r0
   2c898:	mov	r0, r5
   2c89c:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c8a0:	ldr	r0, [r4, #4]
   2c8a4:	cmp	r0, #0
   2c8a8:	blne	2c80c <__assert_fail@plt+0x19c50>
   2c8ac:	ldr	r0, [r4, #8]
   2c8b0:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c8b4:	ldr	r0, [r4, #24]
   2c8b8:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c8bc:	ldr	r0, [r4, #48]	; 0x30
   2c8c0:	tst	r0, #512	; 0x200
   2c8c4:	bne	2c8f0 <__assert_fail@plt+0x19d34>
   2c8c8:	mov	r5, #0
   2c8cc:	tst	r0, #4
   2c8d0:	bne	2c92c <__assert_fail@plt+0x19d70>
   2c8d4:	ldr	r0, [r4, #28]
   2c8d8:	bl	12aa8 <fchdir@plt>
   2c8dc:	cmp	r0, #0
   2c8e0:	beq	2c908 <__assert_fail@plt+0x19d4c>
   2c8e4:	bl	128d4 <__errno_location@plt>
   2c8e8:	ldr	r5, [r0]
   2c8ec:	b	2c90c <__assert_fail@plt+0x19d50>
   2c8f0:	ldr	r0, [r4, #32]
   2c8f4:	mov	r5, #0
   2c8f8:	cmp	r0, #0
   2c8fc:	blt	2c92c <__assert_fail@plt+0x19d70>
   2c900:	bl	12b74 <close@plt>
   2c904:	b	2c91c <__assert_fail@plt+0x19d60>
   2c908:	mov	r5, #0
   2c90c:	ldr	r0, [r4, #28]
   2c910:	bl	12b74 <close@plt>
   2c914:	cmp	r5, #0
   2c918:	bne	2c92c <__assert_fail@plt+0x19d70>
   2c91c:	cmp	r0, #0
   2c920:	beq	2c92c <__assert_fail@plt+0x19d70>
   2c924:	bl	128d4 <__errno_location@plt>
   2c928:	ldr	r5, [r0]
   2c92c:	add	r0, r4, #60	; 0x3c
   2c930:	bl	2c970 <__assert_fail@plt+0x19db4>
   2c934:	ldr	r0, [r4, #52]	; 0x34
   2c938:	cmp	r0, #0
   2c93c:	beq	2c944 <__assert_fail@plt+0x19d88>
   2c940:	bl	220c4 <__assert_fail@plt+0xf508>
   2c944:	mov	r0, r4
   2c948:	bl	2c9a4 <__assert_fail@plt+0x19de8>
   2c94c:	mov	r0, r4
   2c950:	bl	2c048 <__assert_fail@plt+0x1948c>
   2c954:	cmp	r5, #0
   2c958:	moveq	r0, #0
   2c95c:	popeq	{r4, r5, fp, pc}
   2c960:	bl	128d4 <__errno_location@plt>
   2c964:	str	r5, [r0]
   2c968:	mvn	r0, #0
   2c96c:	pop	{r4, r5, fp, pc}
   2c970:	push	{r4, sl, fp, lr}
   2c974:	add	fp, sp, #8
   2c978:	mov	r4, r0
   2c97c:	bl	3cc78 <__assert_fail@plt+0x2a0bc>
   2c980:	cmp	r0, #0
   2c984:	popne	{r4, sl, fp, pc}
   2c988:	mov	r0, r4
   2c98c:	bl	3cccc <__assert_fail@plt+0x2a110>
   2c990:	cmp	r0, #0
   2c994:	blt	2c99c <__assert_fail@plt+0x19de0>
   2c998:	bl	12b74 <close@plt>
   2c99c:	mov	r0, r4
   2c9a0:	b	2c97c <__assert_fail@plt+0x19dc0>
   2c9a4:	ldrh	r1, [r0, #48]	; 0x30
   2c9a8:	movw	r2, #258	; 0x102
   2c9ac:	tst	r1, r2
   2c9b0:	beq	2c9c4 <__assert_fail@plt+0x19e08>
   2c9b4:	ldr	r0, [r0, #56]	; 0x38
   2c9b8:	cmp	r0, #0
   2c9bc:	bxeq	lr
   2c9c0:	b	220c4 <__assert_fail@plt+0xf508>
   2c9c4:	ldr	r0, [r0, #56]	; 0x38
   2c9c8:	b	2c048 <__assert_fail@plt+0x1948c>
   2c9cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c9d0:	add	fp, sp, #24
   2c9d4:	ldr	r6, [r0]
   2c9d8:	mov	r5, #0
   2c9dc:	cmp	r6, #0
   2c9e0:	beq	2cfd4 <__assert_fail@plt+0x1a418>
   2c9e4:	ldr	r1, [r0, #48]	; 0x30
   2c9e8:	mov	r4, r0
   2c9ec:	tst	r1, #8192	; 0x2000
   2c9f0:	bne	2cfd4 <__assert_fail@plt+0x1a418>
   2c9f4:	ldrh	r0, [r6, #60]	; 0x3c
   2c9f8:	mov	r2, #3
   2c9fc:	strh	r2, [r6, #60]	; 0x3c
   2ca00:	cmp	r0, #1
   2ca04:	beq	2ca54 <__assert_fail@plt+0x19e98>
   2ca08:	mov	r7, r6
   2ca0c:	cmp	r0, #2
   2ca10:	bne	2ca6c <__assert_fail@plt+0x19eb0>
   2ca14:	ldrh	r2, [r7, #56]!	; 0x38
   2ca18:	movw	r3, #65534	; 0xfffe
   2ca1c:	and	r3, r2, r3
   2ca20:	cmp	r3, #12
   2ca24:	bne	2ca70 <__assert_fail@plt+0x19eb4>
   2ca28:	mov	r0, r4
   2ca2c:	mov	r1, r6
   2ca30:	mov	r2, #1
   2ca34:	bl	2c524 <__assert_fail@plt+0x19968>
   2ca38:	strh	r0, [r6, #56]	; 0x38
   2ca3c:	cmp	r0, #1
   2ca40:	ldrbeq	r0, [r4, #48]	; 0x30
   2ca44:	tsteq	r0, #4
   2ca48:	beq	2cc3c <__assert_fail@plt+0x1a080>
   2ca4c:	mov	r5, r6
   2ca50:	b	2cd64 <__assert_fail@plt+0x1a1a8>
   2ca54:	mov	r0, r4
   2ca58:	mov	r1, r6
   2ca5c:	mov	r2, #0
   2ca60:	bl	2c524 <__assert_fail@plt+0x19968>
   2ca64:	strh	r0, [r6, #56]	; 0x38
   2ca68:	b	2cac0 <__assert_fail@plt+0x19f04>
   2ca6c:	ldrh	r2, [r7, #56]!	; 0x38
   2ca70:	cmp	r2, #1
   2ca74:	bne	2cac8 <__assert_fail@plt+0x19f0c>
   2ca78:	cmp	r0, #4
   2ca7c:	bne	2cb34 <__assert_fail@plt+0x19f78>
   2ca80:	ldrb	r0, [r6, #58]	; 0x3a
   2ca84:	tst	r0, #2
   2ca88:	beq	2ca94 <__assert_fail@plt+0x19ed8>
   2ca8c:	ldr	r0, [r6, #36]	; 0x24
   2ca90:	bl	12b74 <close@plt>
   2ca94:	ldr	r0, [r4, #4]
   2ca98:	cmp	r0, #0
   2ca9c:	beq	2caac <__assert_fail@plt+0x19ef0>
   2caa0:	bl	2c80c <__assert_fail@plt+0x19c50>
   2caa4:	mov	r0, #0
   2caa8:	str	r0, [r4, #4]
   2caac:	mov	r0, #6
   2cab0:	strh	r0, [r6, #56]	; 0x38
   2cab4:	mov	r0, r4
   2cab8:	mov	r1, r6
   2cabc:	bl	2cfe0 <__assert_fail@plt+0x1a424>
   2cac0:	mov	r5, r6
   2cac4:	b	2cfd4 <__assert_fail@plt+0x1a418>
   2cac8:	ldr	r5, [r6, #8]
   2cacc:	cmp	r5, #0
   2cad0:	beq	2cbcc <__assert_fail@plt+0x1a010>
   2cad4:	mov	r0, r6
   2cad8:	str	r5, [r4]
   2cadc:	bl	2c048 <__assert_fail@plt+0x1948c>
   2cae0:	ldr	r0, [r5, #48]	; 0x30
   2cae4:	cmp	r0, #0
   2cae8:	beq	2cc18 <__assert_fail@plt+0x1a05c>
   2caec:	ldrh	r0, [r5, #60]	; 0x3c
   2caf0:	mov	r6, r5
   2caf4:	cmp	r0, #4
   2caf8:	beq	2cac8 <__assert_fail@plt+0x19f0c>
   2cafc:	cmp	r0, #2
   2cb00:	bne	2cd28 <__assert_fail@plt+0x1a16c>
   2cb04:	mov	r0, r4
   2cb08:	mov	r1, r5
   2cb0c:	mov	r2, #1
   2cb10:	bl	2c524 <__assert_fail@plt+0x19968>
   2cb14:	strh	r0, [r5, #56]	; 0x38
   2cb18:	cmp	r0, #1
   2cb1c:	ldrbeq	r0, [r4, #48]	; 0x30
   2cb20:	tsteq	r0, #4
   2cb24:	beq	2cf38 <__assert_fail@plt+0x1a37c>
   2cb28:	mov	r0, #3
   2cb2c:	strh	r0, [r5, #60]	; 0x3c
   2cb30:	b	2cd28 <__assert_fail@plt+0x1a16c>
   2cb34:	tst	r1, #64	; 0x40
   2cb38:	beq	2cb5c <__assert_fail@plt+0x19fa0>
   2cb3c:	ldr	r0, [r4, #16]
   2cb40:	ldr	r3, [r4, #20]
   2cb44:	ldr	r2, [r6, #64]	; 0x40
   2cb48:	ldr	r5, [r6, #68]	; 0x44
   2cb4c:	eor	r3, r5, r3
   2cb50:	eor	r0, r2, r0
   2cb54:	orrs	r0, r0, r3
   2cb58:	bne	2ca80 <__assert_fail@plt+0x19ec4>
   2cb5c:	ldr	r0, [r4, #4]
   2cb60:	cmp	r0, #0
   2cb64:	beq	2cd04 <__assert_fail@plt+0x1a148>
   2cb68:	tst	r1, #4096	; 0x1000
   2cb6c:	bne	2ccf0 <__assert_fail@plt+0x1a134>
   2cb70:	ldr	r3, [r6, #24]
   2cb74:	mov	r0, r4
   2cb78:	mov	r1, r6
   2cb7c:	mvn	r2, #0
   2cb80:	bl	2d0ac <__assert_fail@plt+0x1a4f0>
   2cb84:	cmp	r0, #0
   2cb88:	beq	2cd1c <__assert_fail@plt+0x1a160>
   2cb8c:	bl	128d4 <__errno_location@plt>
   2cb90:	ldr	r0, [r0]
   2cb94:	str	r0, [r6, #32]
   2cb98:	ldrh	r0, [r6, #58]	; 0x3a
   2cb9c:	orr	r0, r0, #1
   2cba0:	strh	r0, [r6, #58]	; 0x3a
   2cba4:	ldr	r0, [r4, #4]
   2cba8:	cmp	r0, #0
   2cbac:	beq	2cd1c <__assert_fail@plt+0x1a160>
   2cbb0:	ldmib	r0, {r1, r2}
   2cbb4:	ldr	r1, [r1, #24]
   2cbb8:	cmp	r2, #0
   2cbbc:	str	r1, [r0, #24]
   2cbc0:	mov	r0, r2
   2cbc4:	bne	2cbb0 <__assert_fail@plt+0x19ff4>
   2cbc8:	b	2cd1c <__assert_fail@plt+0x1a160>
   2cbcc:	ldr	r5, [r6, #4]
   2cbd0:	ldr	r0, [r5, #12]
   2cbd4:	cmp	r0, #0
   2cbd8:	beq	2ce20 <__assert_fail@plt+0x1a264>
   2cbdc:	str	r5, [r4]
   2cbe0:	ldr	r1, [r5, #40]	; 0x28
   2cbe4:	ldr	r0, [r4, #24]
   2cbe8:	mov	r5, #0
   2cbec:	strb	r5, [r0, r1]
   2cbf0:	mov	r0, r4
   2cbf4:	mov	r1, #3
   2cbf8:	bl	2d284 <__assert_fail@plt+0x1a6c8>
   2cbfc:	cmp	r0, #0
   2cc00:	beq	2ce10 <__assert_fail@plt+0x1a254>
   2cc04:	mov	r7, r0
   2cc08:	mov	r0, r6
   2cc0c:	bl	2c048 <__assert_fail@plt+0x1948c>
   2cc10:	mov	r5, r7
   2cc14:	b	2cd28 <__assert_fail@plt+0x1a16c>
   2cc18:	mov	r0, r4
   2cc1c:	bl	2dc18 <__assert_fail@plt+0x1b05c>
   2cc20:	cmp	r0, #0
   2cc24:	beq	2cc68 <__assert_fail@plt+0x1a0ac>
   2cc28:	ldr	r0, [r4, #48]	; 0x30
   2cc2c:	mov	r5, #0
   2cc30:	orr	r0, r0, #8192	; 0x2000
   2cc34:	str	r0, [r4, #48]	; 0x30
   2cc38:	b	2cfd4 <__assert_fail@plt+0x1a418>
   2cc3c:	movw	r1, #59684	; 0xe924
   2cc40:	mov	r0, r4
   2cc44:	movt	r1, #3
   2cc48:	bl	2c7dc <__assert_fail@plt+0x19c20>
   2cc4c:	cmn	r0, #1
   2cc50:	str	r0, [r6, #36]	; 0x24
   2cc54:	ble	2ceac <__assert_fail@plt+0x1a2f0>
   2cc58:	ldrh	r0, [r6, #58]	; 0x3a
   2cc5c:	orr	r0, r0, #2
   2cc60:	strh	r0, [r6, #58]	; 0x3a
   2cc64:	b	2ca4c <__assert_fail@plt+0x19e90>
   2cc68:	mov	r0, r4
   2cc6c:	bl	2c9a4 <__assert_fail@plt+0x19de8>
   2cc70:	ldr	r1, [r5, #52]	; 0x34
   2cc74:	add	r6, r5, #168	; 0xa8
   2cc78:	str	r1, [r5, #40]	; 0x28
   2cc7c:	add	r2, r1, #1
   2cc80:	mov	r1, r6
   2cc84:	ldr	r0, [r4, #24]
   2cc88:	bl	1255c <memmove@plt>
   2cc8c:	mov	r0, r6
   2cc90:	mov	r1, #47	; 0x2f
   2cc94:	bl	12a18 <strrchr@plt>
   2cc98:	cmp	r0, #0
   2cc9c:	beq	2ccd8 <__assert_fail@plt+0x1a11c>
   2cca0:	cmp	r0, r6
   2cca4:	bne	2ccb4 <__assert_fail@plt+0x1a0f8>
   2cca8:	ldrb	r1, [r5, #169]	; 0xa9
   2ccac:	cmp	r1, #0
   2ccb0:	beq	2ccd8 <__assert_fail@plt+0x1a11c>
   2ccb4:	add	r7, r0, #1
   2ccb8:	mov	r0, r7
   2ccbc:	bl	1288c <strlen@plt>
   2ccc0:	mov	r8, r0
   2ccc4:	add	r2, r0, #1
   2ccc8:	mov	r0, r6
   2cccc:	mov	r1, r7
   2ccd0:	bl	1255c <memmove@plt>
   2ccd4:	str	r8, [r5, #52]	; 0x34
   2ccd8:	ldr	r0, [r4, #24]
   2ccdc:	str	r0, [r5, #24]
   2cce0:	str	r0, [r5, #28]
   2cce4:	mov	r0, r4
   2cce8:	bl	2c750 <__assert_fail@plt+0x19b94>
   2ccec:	b	2cd64 <__assert_fail@plt+0x1a1a8>
   2ccf0:	bic	r1, r1, #4096	; 0x1000
   2ccf4:	str	r1, [r4, #48]	; 0x30
   2ccf8:	bl	2c80c <__assert_fail@plt+0x19c50>
   2ccfc:	mov	r0, #0
   2cd00:	str	r0, [r4, #4]
   2cd04:	mov	r0, r4
   2cd08:	mov	r1, #3
   2cd0c:	bl	2d284 <__assert_fail@plt+0x1a6c8>
   2cd10:	cmp	r0, #0
   2cd14:	str	r0, [r4, #4]
   2cd18:	beq	2cde4 <__assert_fail@plt+0x1a228>
   2cd1c:	ldr	r5, [r4, #4]
   2cd20:	mov	r0, #0
   2cd24:	str	r0, [r4, #4]
   2cd28:	ldr	r0, [r5, #4]
   2cd2c:	ldr	r1, [r0, #28]
   2cd30:	ldr	r0, [r0, #40]	; 0x28
   2cd34:	sub	r2, r0, #1
   2cd38:	ldrb	r1, [r1, r2]
   2cd3c:	cmp	r1, #47	; 0x2f
   2cd40:	ldr	r1, [r4, #24]
   2cd44:	moveq	r0, r2
   2cd48:	mov	r2, #47	; 0x2f
   2cd4c:	strb	r2, [r1, r0]!
   2cd50:	ldr	r2, [r5, #52]	; 0x34
   2cd54:	add	r0, r1, #1
   2cd58:	add	r1, r5, #168	; 0xa8
   2cd5c:	add	r2, r2, #1
   2cd60:	bl	1255c <memmove@plt>
   2cd64:	str	r5, [r4]
   2cd68:	ldrh	r0, [r5, #56]	; 0x38
   2cd6c:	cmp	r0, #11
   2cd70:	bne	2cda4 <__assert_fail@plt+0x1a1e8>
   2cd74:	ldrd	r0, [r5, #112]	; 0x70
   2cd78:	eor	r2, r0, #1
   2cd7c:	orrs	r2, r2, r1
   2cd80:	beq	2cfd4 <__assert_fail@plt+0x1a418>
   2cd84:	eor	r0, r0, #2
   2cd88:	orrs	r0, r0, r1
   2cd8c:	bne	2cfdc <__assert_fail@plt+0x1a420>
   2cd90:	mov	r0, r4
   2cd94:	mov	r1, r5
   2cd98:	mov	r2, #0
   2cd9c:	bl	2c524 <__assert_fail@plt+0x19968>
   2cda0:	strh	r0, [r5, #56]	; 0x38
   2cda4:	cmp	r0, #1
   2cda8:	bne	2cfd4 <__assert_fail@plt+0x1a418>
   2cdac:	ldr	r0, [r5, #48]	; 0x30
   2cdb0:	cmp	r0, #0
   2cdb4:	ldrdeq	r0, [r5, #64]	; 0x40
   2cdb8:	strdeq	r0, [r4, #16]
   2cdbc:	mov	r0, r4
   2cdc0:	mov	r1, r5
   2cdc4:	bl	2dc74 <__assert_fail@plt+0x1b0b8>
   2cdc8:	cmp	r0, #0
   2cdcc:	bne	2cfd4 <__assert_fail@plt+0x1a418>
   2cdd0:	bl	128d4 <__errno_location@plt>
   2cdd4:	mov	r1, #12
   2cdd8:	mov	r5, #0
   2cddc:	str	r1, [r0]
   2cde0:	b	2cfd4 <__assert_fail@plt+0x1a418>
   2cde4:	ldrb	r0, [r4, #49]	; 0x31
   2cde8:	mov	r5, #0
   2cdec:	tst	r0, #32
   2cdf0:	bne	2cfd4 <__assert_fail@plt+0x1a418>
   2cdf4:	ldr	r0, [r6, #32]
   2cdf8:	cmp	r0, #0
   2cdfc:	ldrhne	r0, [r7]
   2ce00:	cmpne	r0, #4
   2ce04:	movne	r0, #7
   2ce08:	strhne	r0, [r7]
   2ce0c:	b	2cab4 <__assert_fail@plt+0x19ef8>
   2ce10:	ldrb	r0, [r4, #49]	; 0x31
   2ce14:	tst	r0, #32
   2ce18:	bne	2cfd4 <__assert_fail@plt+0x1a418>
   2ce1c:	ldr	r5, [r6, #4]
   2ce20:	mov	r0, r6
   2ce24:	str	r5, [r4]
   2ce28:	bl	2c048 <__assert_fail@plt+0x1948c>
   2ce2c:	ldr	r0, [r5, #48]	; 0x30
   2ce30:	cmn	r0, #1
   2ce34:	beq	2ce90 <__assert_fail@plt+0x1a2d4>
   2ce38:	ldrh	r0, [r5, #56]	; 0x38
   2ce3c:	cmp	r0, #11
   2ce40:	beq	2cfdc <__assert_fail@plt+0x1a420>
   2ce44:	ldr	r0, [r5, #40]	; 0x28
   2ce48:	ldr	r1, [r4, #24]
   2ce4c:	mov	r2, #0
   2ce50:	strb	r2, [r1, r0]
   2ce54:	ldr	r0, [r5, #48]	; 0x30
   2ce58:	cmp	r0, #0
   2ce5c:	beq	2cec4 <__assert_fail@plt+0x1a308>
   2ce60:	ldrh	r0, [r5, #58]	; 0x3a
   2ce64:	tst	r0, #2
   2ce68:	bne	2cef0 <__assert_fail@plt+0x1a334>
   2ce6c:	tst	r0, #1
   2ce70:	bne	2cf98 <__assert_fail@plt+0x1a3dc>
   2ce74:	ldr	r1, [r5, #4]
   2ce78:	movw	r3, #13873	; 0x3631
   2ce7c:	mov	r0, r4
   2ce80:	mvn	r2, #0
   2ce84:	movt	r3, #4
   2ce88:	bl	2d0ac <__assert_fail@plt+0x1a4f0>
   2ce8c:	b	2cecc <__assert_fail@plt+0x1a310>
   2ce90:	mov	r0, r5
   2ce94:	bl	2c048 <__assert_fail@plt+0x1948c>
   2ce98:	bl	128d4 <__errno_location@plt>
   2ce9c:	mov	r5, #0
   2cea0:	str	r5, [r0]
   2cea4:	str	r5, [r4]
   2cea8:	b	2cfd4 <__assert_fail@plt+0x1a418>
   2ceac:	bl	128d4 <__errno_location@plt>
   2ceb0:	ldr	r0, [r0]
   2ceb4:	mov	r1, #7
   2ceb8:	strh	r1, [r6, #56]	; 0x38
   2cebc:	str	r0, [r6, #32]
   2cec0:	b	2ca4c <__assert_fail@plt+0x19e90>
   2cec4:	mov	r0, r4
   2cec8:	bl	2dc18 <__assert_fail@plt+0x1b05c>
   2cecc:	cmp	r0, #0
   2ced0:	beq	2cf98 <__assert_fail@plt+0x1a3dc>
   2ced4:	bl	128d4 <__errno_location@plt>
   2ced8:	ldr	r0, [r0]
   2cedc:	str	r0, [r5, #32]
   2cee0:	ldr	r0, [r4, #48]	; 0x30
   2cee4:	orr	r0, r0, #8192	; 0x2000
   2cee8:	str	r0, [r4, #48]	; 0x30
   2ceec:	b	2cf98 <__assert_fail@plt+0x1a3dc>
   2cef0:	ldr	r0, [r4, #48]	; 0x30
   2cef4:	tst	r0, #4
   2cef8:	bne	2cf64 <__assert_fail@plt+0x1a3a8>
   2cefc:	mov	r6, r5
   2cf00:	tst	r0, #512	; 0x200
   2cf04:	ldr	r1, [r6, #36]!	; 0x24
   2cf08:	bne	2cf84 <__assert_fail@plt+0x1a3c8>
   2cf0c:	mov	r0, r1
   2cf10:	bl	12aa8 <fchdir@plt>
   2cf14:	cmp	r0, #0
   2cf18:	beq	2cf90 <__assert_fail@plt+0x1a3d4>
   2cf1c:	bl	128d4 <__errno_location@plt>
   2cf20:	ldr	r0, [r0]
   2cf24:	str	r0, [r5, #32]
   2cf28:	ldr	r0, [r4, #48]	; 0x30
   2cf2c:	orr	r0, r0, #8192	; 0x2000
   2cf30:	str	r0, [r4, #48]	; 0x30
   2cf34:	b	2cf90 <__assert_fail@plt+0x1a3d4>
   2cf38:	movw	r1, #59684	; 0xe924
   2cf3c:	mov	r0, r4
   2cf40:	movt	r1, #3
   2cf44:	bl	2c7dc <__assert_fail@plt+0x19c20>
   2cf48:	cmn	r0, #1
   2cf4c:	str	r0, [r5, #36]	; 0x24
   2cf50:	ble	2cf6c <__assert_fail@plt+0x1a3b0>
   2cf54:	ldrh	r0, [r5, #58]	; 0x3a
   2cf58:	orr	r0, r0, #2
   2cf5c:	strh	r0, [r5, #58]	; 0x3a
   2cf60:	b	2cb28 <__assert_fail@plt+0x19f6c>
   2cf64:	add	r6, r5, #36	; 0x24
   2cf68:	b	2cf90 <__assert_fail@plt+0x1a3d4>
   2cf6c:	bl	128d4 <__errno_location@plt>
   2cf70:	ldr	r0, [r0]
   2cf74:	mov	r1, #7
   2cf78:	strh	r1, [r5, #56]	; 0x38
   2cf7c:	str	r0, [r5, #32]
   2cf80:	b	2cb28 <__assert_fail@plt+0x19f6c>
   2cf84:	mov	r0, r4
   2cf88:	mov	r2, #1
   2cf8c:	bl	2dd28 <__assert_fail@plt+0x1b16c>
   2cf90:	ldr	r0, [r6]
   2cf94:	bl	12b74 <close@plt>
   2cf98:	ldrh	r0, [r5, #56]	; 0x38
   2cf9c:	cmp	r0, #2
   2cfa0:	beq	2cfc8 <__assert_fail@plt+0x1a40c>
   2cfa4:	ldr	r0, [r5, #32]
   2cfa8:	mov	r1, #7
   2cfac:	cmp	r0, #0
   2cfb0:	movweq	r1, #6
   2cfb4:	strh	r1, [r5, #56]	; 0x38
   2cfb8:	bne	2cfc8 <__assert_fail@plt+0x1a40c>
   2cfbc:	mov	r0, r4
   2cfc0:	mov	r1, r5
   2cfc4:	bl	2cfe0 <__assert_fail@plt+0x1a424>
   2cfc8:	ldrb	r0, [r4, #49]	; 0x31
   2cfcc:	tst	r0, #32
   2cfd0:	movne	r5, #0
   2cfd4:	mov	r0, r5
   2cfd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cfdc:	bl	12b68 <abort@plt>
   2cfe0:	push	{r4, r5, r6, r7, fp, lr}
   2cfe4:	add	fp, sp, #16
   2cfe8:	sub	sp, sp, #24
   2cfec:	ldrh	r2, [r0, #48]	; 0x30
   2cff0:	movw	r3, #258	; 0x102
   2cff4:	add	lr, r1, #64	; 0x40
   2cff8:	tst	r2, r3
   2cffc:	beq	2d034 <__assert_fail@plt+0x1a478>
   2d000:	ldrd	r2, [lr]
   2d004:	stm	sp, {r2, r3}
   2d008:	ldrd	r2, [r1, #160]	; 0xa0
   2d00c:	mov	r1, sp
   2d010:	str	r3, [sp, #12]
   2d014:	str	r2, [sp, #8]
   2d018:	ldr	r0, [r0, #56]	; 0x38
   2d01c:	bl	22760 <__assert_fail@plt+0xfba4>
   2d020:	cmp	r0, #0
   2d024:	beq	2d0a8 <__assert_fail@plt+0x1a4ec>
   2d028:	bl	2c048 <__assert_fail@plt+0x1948c>
   2d02c:	sub	sp, fp, #16
   2d030:	pop	{r4, r5, r6, r7, fp, pc}
   2d034:	ldr	r2, [r1, #4]
   2d038:	cmp	r2, #0
   2d03c:	beq	2d02c <__assert_fail@plt+0x1a470>
   2d040:	ldr	r3, [r2, #48]	; 0x30
   2d044:	cmp	r3, #0
   2d048:	blt	2d02c <__assert_fail@plt+0x1a470>
   2d04c:	ldr	ip, [r0, #56]	; 0x38
   2d050:	ldrd	r4, [ip, #16]
   2d054:	orrs	r3, r4, r5
   2d058:	beq	2d0a8 <__assert_fail@plt+0x1a4ec>
   2d05c:	ldrd	r4, [r1, #160]	; 0xa0
   2d060:	ldrd	r6, [ip]
   2d064:	eor	r1, r7, r5
   2d068:	eor	r3, r6, r4
   2d06c:	orrs	r1, r3, r1
   2d070:	bne	2d02c <__assert_fail@plt+0x1a470>
   2d074:	ldr	r1, [ip, #8]!
   2d078:	ldrd	r4, [lr]
   2d07c:	ldr	r3, [ip, #4]
   2d080:	eor	r1, r1, r4
   2d084:	eor	r3, r3, r5
   2d088:	orrs	r1, r1, r3
   2d08c:	bne	2d02c <__assert_fail@plt+0x1a470>
   2d090:	ldrd	r4, [r2, #64]	; 0x40
   2d094:	strd	r4, [ip]
   2d098:	ldr	r0, [r0, #56]	; 0x38
   2d09c:	ldrd	r2, [r2, #160]	; 0xa0
   2d0a0:	strd	r2, [r0]
   2d0a4:	b	2d02c <__assert_fail@plt+0x1a470>
   2d0a8:	bl	12b68 <abort@plt>
   2d0ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d0b0:	add	fp, sp, #28
   2d0b4:	sub	sp, sp, #108	; 0x6c
   2d0b8:	mov	r7, r3
   2d0bc:	mov	r4, r2
   2d0c0:	mov	r8, r1
   2d0c4:	mov	sl, r0
   2d0c8:	cmp	r3, #0
   2d0cc:	beq	2d0f0 <__assert_fail@plt+0x1a534>
   2d0d0:	movw	r1, #13873	; 0x3631
   2d0d4:	mov	r0, r7
   2d0d8:	movt	r1, #4
   2d0dc:	bl	124cc <strcmp@plt>
   2d0e0:	mov	r6, r0
   2d0e4:	cmp	r0, #0
   2d0e8:	movwne	r6, #1
   2d0ec:	b	2d0f4 <__assert_fail@plt+0x1a538>
   2d0f0:	mov	r6, #1
   2d0f4:	ldr	r0, [sl, #48]	; 0x30
   2d0f8:	tst	r0, #4
   2d0fc:	bne	2d154 <__assert_fail@plt+0x1a598>
   2d100:	cmn	r4, #1
   2d104:	mov	r1, #0
   2d108:	mov	r9, #0
   2d10c:	movwgt	r1, #1
   2d110:	orrs	r1, r1, r6
   2d114:	bne	2d174 <__assert_fail@plt+0x1a5b8>
   2d118:	ands	r0, r0, #512	; 0x200
   2d11c:	beq	2d174 <__assert_fail@plt+0x1a5b8>
   2d120:	add	r4, sl, #60	; 0x3c
   2d124:	mov	r0, r4
   2d128:	bl	3cc78 <__assert_fail@plt+0x2a0bc>
   2d12c:	cmp	r0, #0
   2d130:	bne	2d17c <__assert_fail@plt+0x1a5c0>
   2d134:	mov	r0, r4
   2d138:	bl	3cccc <__assert_fail@plt+0x2a110>
   2d13c:	cmn	r0, #1
   2d140:	ble	2d17c <__assert_fail@plt+0x1a5c0>
   2d144:	mov	r4, r0
   2d148:	mov	r9, #0
   2d14c:	mov	r7, #0
   2d150:	b	2d198 <__assert_fail@plt+0x1a5dc>
   2d154:	mov	r5, #0
   2d158:	cmp	r4, #0
   2d15c:	blt	2d278 <__assert_fail@plt+0x1a6bc>
   2d160:	ands	r0, r0, #512	; 0x200
   2d164:	beq	2d278 <__assert_fail@plt+0x1a6bc>
   2d168:	mov	r0, r4
   2d16c:	bl	12b74 <close@plt>
   2d170:	b	2d278 <__assert_fail@plt+0x1a6bc>
   2d174:	cmn	r4, #1
   2d178:	bgt	2d198 <__assert_fail@plt+0x1a5dc>
   2d17c:	mov	r0, sl
   2d180:	mov	r1, r7
   2d184:	bl	2c7dc <__assert_fail@plt+0x19c20>
   2d188:	cmp	r0, #0
   2d18c:	blt	2d228 <__assert_fail@plt+0x1a66c>
   2d190:	mov	r4, r0
   2d194:	mov	r9, #1
   2d198:	ldr	r5, [sl, #48]	; 0x30
   2d19c:	tst	r5, #2
   2d1a0:	bne	2d1c4 <__assert_fail@plt+0x1a608>
   2d1a4:	cmp	r7, #0
   2d1a8:	beq	2d210 <__assert_fail@plt+0x1a654>
   2d1ac:	movw	r1, #13873	; 0x3631
   2d1b0:	mov	r0, r7
   2d1b4:	movt	r1, #4
   2d1b8:	bl	124cc <strcmp@plt>
   2d1bc:	cmp	r0, #0
   2d1c0:	bne	2d210 <__assert_fail@plt+0x1a654>
   2d1c4:	mov	r1, sp
   2d1c8:	mov	r0, r4
   2d1cc:	bl	3d714 <__assert_fail@plt+0x2ab58>
   2d1d0:	cmp	r0, #0
   2d1d4:	bne	2d254 <__assert_fail@plt+0x1a698>
   2d1d8:	ldrd	r0, [r8, #64]	; 0x40
   2d1dc:	ldm	sp, {r2, r3}
   2d1e0:	eor	r1, r1, r3
   2d1e4:	eor	r0, r0, r2
   2d1e8:	orrs	r0, r0, r1
   2d1ec:	bne	2d248 <__assert_fail@plt+0x1a68c>
   2d1f0:	ldrd	r0, [r8, #160]	; 0xa0
   2d1f4:	ldr	r2, [sp, #96]	; 0x60
   2d1f8:	ldr	r3, [sp, #100]	; 0x64
   2d1fc:	eor	r1, r1, r3
   2d200:	eor	r0, r0, r2
   2d204:	orrs	r0, r0, r1
   2d208:	bne	2d248 <__assert_fail@plt+0x1a68c>
   2d20c:	ldr	r5, [sl, #48]	; 0x30
   2d210:	tst	r5, #512	; 0x200
   2d214:	bne	2d230 <__assert_fail@plt+0x1a674>
   2d218:	mov	r0, r4
   2d21c:	bl	12aa8 <fchdir@plt>
   2d220:	mov	r5, r0
   2d224:	b	2d258 <__assert_fail@plt+0x1a69c>
   2d228:	mvn	r5, #0
   2d22c:	b	2d278 <__assert_fail@plt+0x1a6bc>
   2d230:	mov	r0, sl
   2d234:	mov	r1, r4
   2d238:	mov	r2, r6
   2d23c:	bl	2dd28 <__assert_fail@plt+0x1b16c>
   2d240:	mov	r5, #0
   2d244:	b	2d278 <__assert_fail@plt+0x1a6bc>
   2d248:	bl	128d4 <__errno_location@plt>
   2d24c:	mov	r1, #2
   2d250:	str	r1, [r0]
   2d254:	mvn	r5, #0
   2d258:	cmp	r9, #0
   2d25c:	beq	2d278 <__assert_fail@plt+0x1a6bc>
   2d260:	bl	128d4 <__errno_location@plt>
   2d264:	ldr	r7, [r0]
   2d268:	mov	r6, r0
   2d26c:	mov	r0, r4
   2d270:	bl	12b74 <close@plt>
   2d274:	str	r7, [r6]
   2d278:	mov	r0, r5
   2d27c:	sub	sp, fp, #28
   2d280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d288:	add	fp, sp, #28
   2d28c:	sub	sp, sp, #68	; 0x44
   2d290:	ldr	r8, [r0]
   2d294:	mov	r4, r1
   2d298:	mov	r6, r0
   2d29c:	str	r0, [fp, #-40]	; 0xffffffd8
   2d2a0:	ldr	r5, [r8, #12]
   2d2a4:	cmp	r5, #0
   2d2a8:	beq	2d2ec <__assert_fail@plt+0x1a730>
   2d2ac:	mov	r0, r5
   2d2b0:	bl	12a9c <dirfd@plt>
   2d2b4:	cmn	r0, #1
   2d2b8:	str	r0, [fp, #-32]	; 0xffffffe0
   2d2bc:	ble	2d328 <__assert_fail@plt+0x1a76c>
   2d2c0:	ldr	r0, [r6, #44]!	; 0x2c
   2d2c4:	mvn	r2, #0
   2d2c8:	str	r5, [sp, #12]
   2d2cc:	cmp	r0, #0
   2d2d0:	str	r6, [sp, #44]	; 0x2c
   2d2d4:	add	r9, r6, #4
   2d2d8:	mov	r6, #0
   2d2dc:	movweq	r2, #34464	; 0x86a0
   2d2e0:	movteq	r2, #1
   2d2e4:	str	r2, [sp, #24]
   2d2e8:	b	2d51c <__assert_fail@plt+0x1a960>
   2d2ec:	mov	r9, r6
   2d2f0:	mvn	r0, #99	; 0x63
   2d2f4:	mov	r2, #0
   2d2f8:	str	r5, [sp, #12]
   2d2fc:	ldr	r3, [r9, #48]!	; 0x30
   2d300:	and	r1, r3, #516	; 0x204
   2d304:	cmp	r1, #512	; 0x200
   2d308:	ldr	r1, [r8, #24]
   2d30c:	ldreq	r0, [r6, #32]
   2d310:	tst	r3, #16
   2d314:	beq	2d348 <__assert_fail@plt+0x1a78c>
   2d318:	tst	r3, #1
   2d31c:	bne	2d33c <__assert_fail@plt+0x1a780>
   2d320:	mov	r2, #32768	; 0x8000
   2d324:	b	2d348 <__assert_fail@plt+0x1a78c>
   2d328:	ldr	r0, [r8, #12]
   2d32c:	bl	12b8c <closedir@plt>
   2d330:	mov	r5, #0
   2d334:	str	r5, [r8, #12]
   2d338:	b	2d384 <__assert_fail@plt+0x1a7c8>
   2d33c:	ldr	r3, [r8, #48]	; 0x30
   2d340:	cmp	r3, #0
   2d344:	movne	r2, #32768	; 0x8000
   2d348:	sub	r3, fp, #32
   2d34c:	bl	3cf50 <__assert_fail@plt+0x2a394>
   2d350:	cmp	r0, #0
   2d354:	str	r0, [r8, #12]
   2d358:	beq	2d380 <__assert_fail@plt+0x1a7c4>
   2d35c:	ldrh	r0, [r8, #56]	; 0x38
   2d360:	cmp	r0, #11
   2d364:	bne	2d3a4 <__assert_fail@plt+0x1a7e8>
   2d368:	mov	r0, r6
   2d36c:	mov	r1, r8
   2d370:	mov	r2, #0
   2d374:	bl	2c524 <__assert_fail@plt+0x19968>
   2d378:	strh	r0, [r8, #56]	; 0x38
   2d37c:	b	2d3e4 <__assert_fail@plt+0x1a828>
   2d380:	mov	r5, #0
   2d384:	cmp	r4, #3
   2d388:	bne	2dbb4 <__assert_fail@plt+0x1aff8>
   2d38c:	mov	r0, #4
   2d390:	strh	r0, [r8, #56]	; 0x38
   2d394:	bl	128d4 <__errno_location@plt>
   2d398:	ldr	r0, [r0]
   2d39c:	str	r0, [r8, #32]
   2d3a0:	b	2dbb4 <__assert_fail@plt+0x1aff8>
   2d3a4:	ldrb	r0, [r9, #1]
   2d3a8:	tst	r0, #1
   2d3ac:	beq	2d3e4 <__assert_fail@plt+0x1a828>
   2d3b0:	mov	r0, r6
   2d3b4:	mov	r1, r8
   2d3b8:	bl	2cfe0 <__assert_fail@plt+0x1a424>
   2d3bc:	mov	r0, r6
   2d3c0:	mov	r1, r8
   2d3c4:	mov	r2, #0
   2d3c8:	mov	r5, #0
   2d3cc:	bl	2c524 <__assert_fail@plt+0x19968>
   2d3d0:	mov	r0, r6
   2d3d4:	mov	r1, r8
   2d3d8:	bl	2dc74 <__assert_fail@plt+0x1b0b8>
   2d3dc:	cmp	r0, #0
   2d3e0:	beq	2d9c8 <__assert_fail@plt+0x1ae0c>
   2d3e4:	mov	r1, r6
   2d3e8:	mov	sl, r6
   2d3ec:	ldr	r0, [r1, #44]!	; 0x2c
   2d3f0:	str	r1, [sp, #44]	; 0x2c
   2d3f4:	mvn	r1, #0
   2d3f8:	cmp	r0, #0
   2d3fc:	movweq	r1, #34464	; 0x86a0
   2d400:	movteq	r1, #1
   2d404:	cmp	r4, #2
   2d408:	str	r1, [sp, #24]
   2d40c:	bne	2d430 <__assert_fail@plt+0x1a874>
   2d410:	mov	r6, #1
   2d414:	cmp	r4, #3
   2d418:	bne	2d51c <__assert_fail@plt+0x1a960>
   2d41c:	sub	r0, r4, #3
   2d420:	mov	r7, r8
   2d424:	mov	r8, r4
   2d428:	mov	r5, #0
   2d42c:	b	2d458 <__assert_fail@plt+0x1a89c>
   2d430:	ldr	r0, [r9]
   2d434:	and	r0, r0, #56	; 0x38
   2d438:	cmp	r0, #24
   2d43c:	ldreq	r0, [r8, #84]	; 0x54
   2d440:	cmpeq	r0, #2
   2d444:	beq	2dbc0 <__assert_fail@plt+0x1b004>
   2d448:	sub	r0, r4, #3
   2d44c:	mov	r7, r8
   2d450:	mov	r8, r4
   2d454:	mov	r5, #1
   2d458:	clz	r0, r0
   2d45c:	lsr	r4, r0, #5
   2d460:	ldrb	r0, [r9, #1]
   2d464:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2d468:	tst	r0, #2
   2d46c:	beq	2d488 <__assert_fail@plt+0x1a8cc>
   2d470:	mov	r0, r2
   2d474:	movw	r1, #1030	; 0x406
   2d478:	mov	r2, #3
   2d47c:	bl	2be14 <__assert_fail@plt+0x19258>
   2d480:	mov	r2, r0
   2d484:	str	r0, [fp, #-32]	; 0xffffffe0
   2d488:	cmp	r2, #0
   2d48c:	blt	2d4a8 <__assert_fail@plt+0x1a8ec>
   2d490:	mov	r0, sl
   2d494:	mov	r1, r7
   2d498:	mov	r3, #0
   2d49c:	bl	2d0ac <__assert_fail@plt+0x1a4f0>
   2d4a0:	cmp	r0, #0
   2d4a4:	beq	2d510 <__assert_fail@plt+0x1a954>
   2d4a8:	and	r0, r4, r5
   2d4ac:	cmp	r0, #1
   2d4b0:	bne	2d4c0 <__assert_fail@plt+0x1a904>
   2d4b4:	bl	128d4 <__errno_location@plt>
   2d4b8:	ldr	r0, [r0]
   2d4bc:	str	r0, [r7, #32]
   2d4c0:	ldrh	r0, [r7, #58]	; 0x3a
   2d4c4:	orr	r0, r0, #1
   2d4c8:	strh	r0, [r7, #58]	; 0x3a
   2d4cc:	ldr	r0, [r7, #12]
   2d4d0:	bl	12b8c <closedir@plt>
   2d4d4:	mov	r4, #0
   2d4d8:	mov	r5, r7
   2d4dc:	str	r4, [r7, #12]
   2d4e0:	ldr	r0, [r9]
   2d4e4:	tst	r0, #512	; 0x200
   2d4e8:	beq	2d4fc <__assert_fail@plt+0x1a940>
   2d4ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2d4f0:	cmp	r0, #0
   2d4f4:	blt	2d4fc <__assert_fail@plt+0x1a940>
   2d4f8:	bl	12b74 <close@plt>
   2d4fc:	str	r4, [r5, #12]
   2d500:	mov	r4, r8
   2d504:	mov	r6, #1
   2d508:	mov	r8, r5
   2d50c:	b	2d51c <__assert_fail@plt+0x1a960>
   2d510:	mov	r4, r8
   2d514:	mov	r6, #0
   2d518:	mov	r8, r7
   2d51c:	ldr	r0, [r8, #40]	; 0x28
   2d520:	ldr	r1, [r8, #28]
   2d524:	mov	r5, #0
   2d528:	str	r4, [sp, #4]
   2d52c:	sub	r2, r0, #1
   2d530:	ldrb	r1, [r1, r2]
   2d534:	cmp	r1, #47	; 0x2f
   2d538:	ldrb	r1, [r9]
   2d53c:	moveq	r0, r2
   2d540:	tst	r1, #4
   2d544:	mov	r1, #0
   2d548:	str	r1, [sp, #36]	; 0x24
   2d54c:	beq	2d568 <__assert_fail@plt+0x1a9ac>
   2d550:	ldr	r1, [fp, #-40]	; 0xffffffd8
   2d554:	mov	r2, #47	; 0x2f
   2d558:	ldr	r1, [r1, #24]
   2d55c:	strb	r2, [r1, r0]!
   2d560:	add	r1, r1, #1
   2d564:	str	r1, [sp, #36]	; 0x24
   2d568:	ldr	r4, [r8, #12]
   2d56c:	add	r0, r0, #1
   2d570:	str	r0, [sp, #48]	; 0x30
   2d574:	cmp	r4, #0
   2d578:	beq	2d8a0 <__assert_fail@plt+0x1ace4>
   2d57c:	mov	r1, r0
   2d580:	ldr	r0, [r8, #48]	; 0x30
   2d584:	str	r6, [sp]
   2d588:	mov	r6, #0
   2d58c:	add	r0, r0, #1
   2d590:	str	r0, [sp, #20]
   2d594:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2d598:	ldr	r0, [r0, #36]	; 0x24
   2d59c:	sub	r0, r0, r1
   2d5a0:	str	r0, [fp, #-44]	; 0xffffffd4
   2d5a4:	bl	128d4 <__errno_location@plt>
   2d5a8:	str	r0, [sp, #28]
   2d5ac:	mov	r0, #0
   2d5b0:	mov	r5, #0
   2d5b4:	mov	r7, #0
   2d5b8:	str	r8, [sp, #32]
   2d5bc:	str	r9, [fp, #-36]	; 0xffffffdc
   2d5c0:	str	r0, [sp, #40]	; 0x28
   2d5c4:	mov	r0, #0
   2d5c8:	str	r0, [sp, #16]
   2d5cc:	mov	r0, #0
   2d5d0:	str	r0, [sp, #8]
   2d5d4:	ldr	r0, [sp, #28]
   2d5d8:	str	r6, [r0]
   2d5dc:	mov	r0, r4
   2d5e0:	bl	12a6c <readdir64@plt>
   2d5e4:	cmp	r0, #0
   2d5e8:	beq	2d900 <__assert_fail@plt+0x1ad44>
   2d5ec:	mov	sl, r0
   2d5f0:	ldrb	r0, [r9]
   2d5f4:	ldr	r6, [fp, #-40]	; 0xffffffd8
   2d5f8:	add	r4, sl, #19
   2d5fc:	tst	r0, #32
   2d600:	ldrbeq	r0, [r4]
   2d604:	cmpeq	r0, #46	; 0x2e
   2d608:	beq	2d6a8 <__assert_fail@plt+0x1aaec>
   2d60c:	mov	r0, r4
   2d610:	bl	1288c <strlen@plt>
   2d614:	mov	r8, r0
   2d618:	mov	r0, r6
   2d61c:	mov	r1, r4
   2d620:	mov	r2, r8
   2d624:	bl	2c4a4 <__assert_fail@plt+0x198e8>
   2d628:	mov	r9, r0
   2d62c:	cmp	r0, #0
   2d630:	beq	2d8b4 <__assert_fail@plt+0x1acf8>
   2d634:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2d638:	cmp	r8, r1
   2d63c:	bcs	2d650 <__assert_fail@plt+0x1aa94>
   2d640:	ldr	r2, [sp, #48]	; 0x30
   2d644:	add	r4, r8, r2
   2d648:	mov	r8, r6
   2d64c:	b	2d6dc <__assert_fail@plt+0x1ab20>
   2d650:	ldr	r1, [sp, #48]	; 0x30
   2d654:	add	r4, r8, r1
   2d658:	mov	r8, r6
   2d65c:	ldr	r6, [r6, #24]
   2d660:	add	r1, r4, #1
   2d664:	mov	r0, r8
   2d668:	bl	2c430 <__assert_fail@plt+0x19874>
   2d66c:	cmp	r0, #0
   2d670:	beq	2d8b4 <__assert_fail@plt+0x1acf8>
   2d674:	ldr	r0, [r8, #24]
   2d678:	cmp	r6, r0
   2d67c:	beq	2d6d0 <__assert_fail@plt+0x1ab14>
   2d680:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2d684:	ldr	r2, [sp, #48]	; 0x30
   2d688:	ldrb	r1, [r1]
   2d68c:	tst	r1, #4
   2d690:	ldr	r1, [sp, #36]	; 0x24
   2d694:	addne	r1, r0, r2
   2d698:	mov	r0, #1
   2d69c:	str	r1, [sp, #36]	; 0x24
   2d6a0:	str	r0, [sp, #8]
   2d6a4:	b	2d6d4 <__assert_fail@plt+0x1ab18>
   2d6a8:	ldrb	r0, [sl, #20]
   2d6ac:	cmp	r0, #0
   2d6b0:	beq	2d6c4 <__assert_fail@plt+0x1ab08>
   2d6b4:	cmp	r0, #46	; 0x2e
   2d6b8:	ldrbeq	r0, [sl, #21]
   2d6bc:	cmpeq	r0, #0
   2d6c0:	bne	2d60c <__assert_fail@plt+0x1aa50>
   2d6c4:	ldr	r8, [sp, #32]
   2d6c8:	mov	r6, #0
   2d6cc:	b	2d888 <__assert_fail@plt+0x1accc>
   2d6d0:	ldr	r2, [sp, #48]	; 0x30
   2d6d4:	ldr	r0, [r8, #36]	; 0x24
   2d6d8:	sub	r1, r0, r2
   2d6dc:	cmp	r4, r2
   2d6e0:	bcc	2d958 <__assert_fail@plt+0x1ad9c>
   2d6e4:	ldr	r0, [sp, #20]
   2d6e8:	str	r1, [fp, #-44]	; 0xffffffd4
   2d6ec:	str	r0, [r9, #48]	; 0x30
   2d6f0:	ldr	r0, [r8]
   2d6f4:	str	r4, [r9, #40]	; 0x28
   2d6f8:	str	r0, [r9, #4]
   2d6fc:	ldrd	r0, [sl]
   2d700:	strd	r0, [r9, #160]	; 0xa0
   2d704:	ldrb	r0, [r8, #48]	; 0x30
   2d708:	tst	r0, #4
   2d70c:	bne	2d71c <__assert_fail@plt+0x1ab60>
   2d710:	add	r0, r9, #168	; 0xa8
   2d714:	str	r0, [r9, #24]
   2d718:	b	2d738 <__assert_fail@plt+0x1ab7c>
   2d71c:	ldr	r0, [r9, #28]
   2d720:	ldr	r2, [r9, #52]	; 0x34
   2d724:	add	r1, r9, #168	; 0xa8
   2d728:	str	r0, [r9, #24]
   2d72c:	ldr	r0, [sp, #36]	; 0x24
   2d730:	add	r2, r2, #1
   2d734:	bl	1255c <memmove@plt>
   2d738:	ldr	r0, [sp, #44]	; 0x2c
   2d73c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2d740:	ldr	r0, [r0]
   2d744:	ldr	r2, [r1]
   2d748:	cmp	r0, #0
   2d74c:	beq	2d774 <__assert_fail@plt+0x1abb8>
   2d750:	ands	r0, r2, #1024	; 0x400
   2d754:	bne	2d774 <__assert_fail@plt+0x1abb8>
   2d758:	mov	r0, r8
   2d75c:	mov	r1, r9
   2d760:	mov	r2, #0
   2d764:	bl	2c524 <__assert_fail@plt+0x19968>
   2d768:	mov	r6, #0
   2d76c:	strh	r0, [r9, #56]	; 0x38
   2d770:	b	2d7e8 <__assert_fail@plt+0x1ac2c>
   2d774:	ldrb	r3, [sl, #18]
   2d778:	mov	r0, #0
   2d77c:	tst	r2, #8
   2d780:	mov	r1, #0
   2d784:	beq	2d7a8 <__assert_fail@plt+0x1abec>
   2d788:	orr	r1, r3, #4
   2d78c:	cmp	r1, #4
   2d790:	mov	r1, #0
   2d794:	beq	2d7a8 <__assert_fail@plt+0x1abec>
   2d798:	eor	r1, r3, #10
   2d79c:	and	r2, r2, #16
   2d7a0:	orrs	r1, r2, r1
   2d7a4:	movwne	r1, #1
   2d7a8:	mov	r2, #11
   2d7ac:	mov	r6, #0
   2d7b0:	strh	r2, [r9, #56]	; 0x38
   2d7b4:	sub	r2, r3, #1
   2d7b8:	uxtb	r3, r2
   2d7bc:	cmp	r3, #11
   2d7c0:	sxtbls	r0, r2
   2d7c4:	movwls	r2, #13888	; 0x3640
   2d7c8:	movtls	r2, #4
   2d7cc:	ldrls	r0, [r2, r0, lsl #2]
   2d7d0:	cmp	r1, #0
   2d7d4:	str	r0, [r9, #80]	; 0x50
   2d7d8:	mov	r0, #2
   2d7dc:	movwne	r0, #1
   2d7e0:	str	r0, [r9, #112]	; 0x70
   2d7e4:	str	r6, [r9, #116]	; 0x74
   2d7e8:	cmp	r5, #0
   2d7ec:	mov	r4, r9
   2d7f0:	str	r6, [r9, #8]
   2d7f4:	ldrne	r0, [sp, #40]	; 0x28
   2d7f8:	movne	r4, r5
   2d7fc:	strne	r9, [r0, #8]
   2d800:	movw	r0, #10000	; 0x2710
   2d804:	cmp	r7, r0
   2d808:	bne	2d85c <__assert_fail@plt+0x1aca0>
   2d80c:	ldr	r0, [sp, #44]	; 0x2c
   2d810:	ldr	r0, [r0]
   2d814:	cmp	r0, #0
   2d818:	bne	2d85c <__assert_fail@plt+0x1aca0>
   2d81c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2d820:	ldr	r0, [sp, #32]
   2d824:	bl	2dfc0 <__assert_fail@plt+0x1b404>
   2d828:	mov	r1, #0
   2d82c:	str	r1, [sp, #16]
   2d830:	movw	r1, #19778	; 0x4d42
   2d834:	movt	r1, #65363	; 0xff53
   2d838:	cmp	r0, r1
   2d83c:	movwne	r1, #26985	; 0x6969
   2d840:	cmpne	r0, r1
   2d844:	beq	2d85c <__assert_fail@plt+0x1aca0>
   2d848:	movw	r1, #6548	; 0x1994
   2d84c:	movt	r1, #258	; 0x102
   2d850:	cmp	r0, r1
   2d854:	movne	r0, #1
   2d858:	strne	r0, [sp, #16]
   2d85c:	ldr	r0, [sp, #24]
   2d860:	add	r7, r7, #1
   2d864:	cmp	r0, r7
   2d868:	mov	r0, #0
   2d86c:	movwls	r0, #15
   2d870:	cmp	r0, #0
   2d874:	bne	2d9a4 <__assert_fail@plt+0x1ade8>
   2d878:	str	r9, [sp, #40]	; 0x28
   2d87c:	ldr	r9, [fp, #-36]	; 0xffffffdc
   2d880:	ldr	r8, [sp, #32]
   2d884:	mov	r5, r4
   2d888:	ldr	r4, [r8, #12]
   2d88c:	cmp	r4, #0
   2d890:	bne	2d5d4 <__assert_fail@plt+0x1aa18>
   2d894:	ldr	r0, [sp, #8]
   2d898:	ldr	r4, [sp, #4]
   2d89c:	b	2d948 <__assert_fail@plt+0x1ad8c>
   2d8a0:	ldr	r4, [sp, #4]
   2d8a4:	mov	r7, #0
   2d8a8:	mov	r0, #0
   2d8ac:	str	r0, [sp, #16]
   2d8b0:	b	2da70 <__assert_fail@plt+0x1aeb4>
   2d8b4:	ldr	r4, [sp, #28]
   2d8b8:	mov	r0, r9
   2d8bc:	ldr	r8, [r4]
   2d8c0:	bl	2c048 <__assert_fail@plt+0x1948c>
   2d8c4:	mov	r0, r5
   2d8c8:	bl	2c80c <__assert_fail@plt+0x19c50>
   2d8cc:	ldr	r6, [sp, #32]
   2d8d0:	ldr	r0, [r6, #12]
   2d8d4:	bl	12b8c <closedir@plt>
   2d8d8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d8dc:	mov	r5, #0
   2d8e0:	mov	r0, #7
   2d8e4:	str	r5, [r6, #12]
   2d8e8:	strh	r0, [r6, #56]	; 0x38
   2d8ec:	ldr	r0, [r7]
   2d8f0:	orr	r0, r0, #8192	; 0x2000
   2d8f4:	str	r0, [r7]
   2d8f8:	str	r8, [r4]
   2d8fc:	b	2dbb4 <__assert_fail@plt+0x1aff8>
   2d900:	ldr	r0, [sp, #28]
   2d904:	ldr	r0, [r0]
   2d908:	cmp	r0, #0
   2d90c:	beq	2d928 <__assert_fail@plt+0x1ad6c>
   2d910:	str	r0, [r8, #32]
   2d914:	ldr	r0, [sp, #12]
   2d918:	orrs	r0, r0, r7
   2d91c:	mov	r0, #4
   2d920:	movwne	r0, #7
   2d924:	strh	r0, [r8, #56]	; 0x38
   2d928:	ldr	r0, [r8, #12]
   2d92c:	ldr	r4, [sp, #4]
   2d930:	cmp	r0, #0
   2d934:	beq	2d9d8 <__assert_fail@plt+0x1ae1c>
   2d938:	bl	12b8c <closedir@plt>
   2d93c:	mov	r0, #0
   2d940:	str	r0, [r8, #12]
   2d944:	ldr	r0, [sp, #8]
   2d948:	tst	r0, #1
   2d94c:	ldr	r6, [sp]
   2d950:	bne	2d9e8 <__assert_fail@plt+0x1ae2c>
   2d954:	b	2da70 <__assert_fail@plt+0x1aeb4>
   2d958:	mov	r0, r9
   2d95c:	bl	2c048 <__assert_fail@plt+0x1948c>
   2d960:	mov	r0, r5
   2d964:	bl	2c80c <__assert_fail@plt+0x19c50>
   2d968:	ldr	r4, [sp, #32]
   2d96c:	ldr	r0, [r4, #12]
   2d970:	bl	12b8c <closedir@plt>
   2d974:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2d978:	mov	r5, #0
   2d97c:	mov	r0, #7
   2d980:	ldr	r1, [sp, #28]
   2d984:	str	r5, [r4, #12]
   2d988:	strh	r0, [r4, #56]	; 0x38
   2d98c:	ldr	r0, [r7]
   2d990:	orr	r0, r0, #8192	; 0x2000
   2d994:	str	r0, [r7]
   2d998:	mov	r0, #36	; 0x24
   2d99c:	str	r0, [r1]
   2d9a0:	b	2dbb4 <__assert_fail@plt+0x1aff8>
   2d9a4:	ldr	r6, [sp]
   2d9a8:	cmp	r0, #15
   2d9ac:	bne	2dbb0 <__assert_fail@plt+0x1aff4>
   2d9b0:	mov	r5, r4
   2d9b4:	ldr	r9, [fp, #-36]	; 0xffffffdc
   2d9b8:	ldr	r4, [sp, #4]
   2d9bc:	ldr	r0, [sp, #8]
   2d9c0:	ldr	r8, [sp, #32]
   2d9c4:	b	2d9e0 <__assert_fail@plt+0x1ae24>
   2d9c8:	bl	128d4 <__errno_location@plt>
   2d9cc:	mov	r1, #12
   2d9d0:	str	r1, [r0]
   2d9d4:	b	2dbb4 <__assert_fail@plt+0x1aff8>
   2d9d8:	ldr	r6, [sp]
   2d9dc:	ldr	r0, [sp, #8]
   2d9e0:	tst	r0, #1
   2d9e4:	beq	2da70 <__assert_fail@plt+0x1aeb4>
   2d9e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2d9ec:	ldr	r1, [r0, #4]
   2d9f0:	ldr	r0, [r0, #24]
   2d9f4:	b	2da1c <__assert_fail@plt+0x1ae60>
   2d9f8:	ldr	r2, [r1, #24]
   2d9fc:	add	r3, r1, #168	; 0xa8
   2da00:	cmp	r2, r3
   2da04:	ldrne	r3, [r1, #28]
   2da08:	subne	r2, r2, r3
   2da0c:	addne	r2, r0, r2
   2da10:	strne	r2, [r1, #24]
   2da14:	str	r0, [r1, #28]
   2da18:	ldr	r1, [r1, #8]
   2da1c:	cmp	r1, #0
   2da20:	bne	2d9f8 <__assert_fail@plt+0x1ae3c>
   2da24:	ldr	r1, [r5, #48]	; 0x30
   2da28:	cmp	r1, #0
   2da2c:	blt	2da70 <__assert_fail@plt+0x1aeb4>
   2da30:	mov	r1, r5
   2da34:	ldr	r2, [r1, #24]
   2da38:	add	r3, r1, #168	; 0xa8
   2da3c:	cmp	r2, r3
   2da40:	ldrne	r3, [r1, #28]
   2da44:	subne	r2, r2, r3
   2da48:	addne	r2, r0, r2
   2da4c:	strne	r2, [r1, #24]
   2da50:	str	r0, [r1, #28]
   2da54:	ldr	r2, [r1, #8]
   2da58:	cmp	r2, #0
   2da5c:	ldreq	r2, [r1, #4]
   2da60:	ldr	r1, [r2, #48]	; 0x30
   2da64:	cmn	r1, #1
   2da68:	mov	r1, r2
   2da6c:	bgt	2da34 <__assert_fail@plt+0x1ae78>
   2da70:	ldrb	r0, [r9]
   2da74:	tst	r0, #4
   2da78:	beq	2daa8 <__assert_fail@plt+0x1aeec>
   2da7c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2da80:	ldr	r2, [sp, #36]	; 0x24
   2da84:	ldr	r3, [sp, #48]	; 0x30
   2da88:	ldr	r0, [r0, #36]	; 0x24
   2da8c:	sub	r1, r2, #1
   2da90:	cmp	r3, r0
   2da94:	mov	r0, #0
   2da98:	moveq	r2, r1
   2da9c:	cmp	r7, #0
   2daa0:	moveq	r2, r1
   2daa4:	strb	r0, [r2]
   2daa8:	ldr	r0, [sp, #12]
   2daac:	cmp	r0, #0
   2dab0:	movwne	r0, #1
   2dab4:	orrs	r0, r0, r6
   2dab8:	beq	2dae4 <__assert_fail@plt+0x1af28>
   2dabc:	cmp	r7, #0
   2dac0:	bne	2db18 <__assert_fail@plt+0x1af5c>
   2dac4:	cmp	r4, #3
   2dac8:	bne	2dba8 <__assert_fail@plt+0x1afec>
   2dacc:	ldrh	r0, [r8, #56]	; 0x38
   2dad0:	cmp	r0, #4
   2dad4:	cmpne	r0, #7
   2dad8:	movne	r0, #6
   2dadc:	strhne	r0, [r8, #56]	; 0x38
   2dae0:	b	2dba8 <__assert_fail@plt+0x1afec>
   2dae4:	cmp	r4, #1
   2dae8:	cmpne	r7, #0
   2daec:	bne	2db18 <__assert_fail@plt+0x1af5c>
   2daf0:	ldr	r0, [r8, #48]	; 0x30
   2daf4:	cmp	r0, #0
   2daf8:	beq	2db84 <__assert_fail@plt+0x1afc8>
   2dafc:	ldr	r1, [r8, #4]
   2db00:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2db04:	movw	r3, #13873	; 0x3631
   2db08:	mvn	r2, #0
   2db0c:	movt	r3, #4
   2db10:	bl	2d0ac <__assert_fail@plt+0x1a4f0>
   2db14:	b	2db8c <__assert_fail@plt+0x1afd0>
   2db18:	ldr	r0, [sp, #16]
   2db1c:	tst	r0, #1
   2db20:	beq	2db54 <__assert_fail@plt+0x1af98>
   2db24:	ldr	r4, [fp, #-40]	; 0xffffffd8
   2db28:	movw	r0, #57224	; 0xdf88
   2db2c:	mov	r1, r5
   2db30:	mov	r2, r7
   2db34:	movt	r0, #2
   2db38:	str	r0, [r4, #44]	; 0x2c
   2db3c:	mov	r0, r4
   2db40:	bl	2c658 <__assert_fail@plt+0x19a9c>
   2db44:	mov	r5, r0
   2db48:	mov	r0, #0
   2db4c:	str	r0, [r4, #44]	; 0x2c
   2db50:	b	2dbb4 <__assert_fail@plt+0x1aff8>
   2db54:	cmp	r7, #2
   2db58:	bcc	2dbb4 <__assert_fail@plt+0x1aff8>
   2db5c:	ldr	r0, [sp, #44]	; 0x2c
   2db60:	ldr	r0, [r0]
   2db64:	cmp	r0, #0
   2db68:	beq	2dbb4 <__assert_fail@plt+0x1aff8>
   2db6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2db70:	mov	r1, r5
   2db74:	mov	r2, r7
   2db78:	bl	2c658 <__assert_fail@plt+0x19a9c>
   2db7c:	mov	r5, r0
   2db80:	b	2dbb4 <__assert_fail@plt+0x1aff8>
   2db84:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2db88:	bl	2dc18 <__assert_fail@plt+0x1b05c>
   2db8c:	cmp	r0, #0
   2db90:	beq	2dabc <__assert_fail@plt+0x1af00>
   2db94:	mov	r0, #7
   2db98:	strh	r0, [r8, #56]	; 0x38
   2db9c:	ldr	r0, [r9]
   2dba0:	orr	r0, r0, #8192	; 0x2000
   2dba4:	str	r0, [r9]
   2dba8:	mov	r0, r5
   2dbac:	bl	2c80c <__assert_fail@plt+0x19c50>
   2dbb0:	mov	r5, #0
   2dbb4:	mov	r0, r5
   2dbb8:	sub	sp, fp, #28
   2dbbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbc0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2dbc4:	mov	r0, r8
   2dbc8:	bl	2dfc0 <__assert_fail@plt+0x1b404>
   2dbcc:	movw	r1, #26984	; 0x6968
   2dbd0:	cmp	r0, r1
   2dbd4:	ble	2dc00 <__assert_fail@plt+0x1b044>
   2dbd8:	movw	r1, #26985	; 0x6969
   2dbdc:	cmp	r0, r1
   2dbe0:	movwne	r1, #16719	; 0x414f
   2dbe4:	movtne	r1, #21318	; 0x5346
   2dbe8:	cmpne	r0, r1
   2dbec:	beq	2d448 <__assert_fail@plt+0x1a88c>
   2dbf0:	movw	r1, #40864	; 0x9fa0
   2dbf4:	cmp	r0, r1
   2dbf8:	beq	2d448 <__assert_fail@plt+0x1a88c>
   2dbfc:	b	2d410 <__assert_fail@plt+0x1a854>
   2dc00:	movw	r1, #19778	; 0x4d42
   2dc04:	movt	r1, #65363	; 0xff53
   2dc08:	cmp	r0, r1
   2dc0c:	cmpne	r0, #0
   2dc10:	beq	2d448 <__assert_fail@plt+0x1a88c>
   2dc14:	b	2d410 <__assert_fail@plt+0x1a854>
   2dc18:	push	{r4, r5, fp, lr}
   2dc1c:	add	fp, sp, #8
   2dc20:	mov	r4, r0
   2dc24:	ldr	r0, [r0, #48]	; 0x30
   2dc28:	mov	r5, #0
   2dc2c:	tst	r0, #4
   2dc30:	bne	2dc64 <__assert_fail@plt+0x1b0a8>
   2dc34:	tst	r0, #512	; 0x200
   2dc38:	bne	2dc54 <__assert_fail@plt+0x1b098>
   2dc3c:	ldr	r0, [r4, #28]
   2dc40:	bl	12aa8 <fchdir@plt>
   2dc44:	mov	r5, r0
   2dc48:	cmp	r0, #0
   2dc4c:	movwne	r5, #1
   2dc50:	b	2dc64 <__assert_fail@plt+0x1b0a8>
   2dc54:	mov	r0, r4
   2dc58:	mvn	r1, #99	; 0x63
   2dc5c:	mov	r2, #1
   2dc60:	bl	2dd28 <__assert_fail@plt+0x1b16c>
   2dc64:	add	r0, r4, #60	; 0x3c
   2dc68:	bl	2c970 <__assert_fail@plt+0x19db4>
   2dc6c:	mov	r0, r5
   2dc70:	pop	{r4, r5, fp, pc}
   2dc74:	push	{r4, r5, r6, r7, fp, lr}
   2dc78:	add	fp, sp, #16
   2dc7c:	mov	r6, r0
   2dc80:	ldrh	r0, [r0, #48]	; 0x30
   2dc84:	mov	r4, r1
   2dc88:	movw	r1, #258	; 0x102
   2dc8c:	tst	r0, r1
   2dc90:	beq	2dd00 <__assert_fail@plt+0x1b144>
   2dc94:	mov	r0, #24
   2dc98:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2dc9c:	mov	r5, #0
   2dca0:	cmp	r0, #0
   2dca4:	beq	2dd20 <__assert_fail@plt+0x1b164>
   2dca8:	mov	r7, r0
   2dcac:	ldrd	r0, [r4, #64]	; 0x40
   2dcb0:	add	r2, r7, #8
   2dcb4:	stm	r7, {r0, r1}
   2dcb8:	ldrd	r0, [r4, #160]	; 0xa0
   2dcbc:	stm	r2, {r0, r1, r4}
   2dcc0:	mov	r1, r7
   2dcc4:	ldr	r0, [r6, #56]	; 0x38
   2dcc8:	bl	22720 <__assert_fail@plt+0xfb64>
   2dccc:	cmp	r0, r7
   2dcd0:	beq	2dcf8 <__assert_fail@plt+0x1b13c>
   2dcd4:	mov	r6, r0
   2dcd8:	mov	r0, r7
   2dcdc:	bl	2c048 <__assert_fail@plt+0x1948c>
   2dce0:	cmp	r6, #0
   2dce4:	beq	2dd20 <__assert_fail@plt+0x1b164>
   2dce8:	ldr	r0, [r6, #16]
   2dcec:	mov	r1, #2
   2dcf0:	strh	r1, [r4, #56]	; 0x38
   2dcf4:	str	r0, [r4]
   2dcf8:	mov	r5, #1
   2dcfc:	b	2dd20 <__assert_fail@plt+0x1b164>
   2dd00:	ldr	r0, [r6, #56]	; 0x38
   2dd04:	add	r1, r4, #64	; 0x40
   2dd08:	bl	3ca30 <__assert_fail@plt+0x29e74>
   2dd0c:	cmp	r0, #0
   2dd10:	mov	r5, #1
   2dd14:	movne	r0, #2
   2dd18:	strhne	r0, [r4, #56]	; 0x38
   2dd1c:	strne	r4, [r4]
   2dd20:	mov	r0, r5
   2dd24:	pop	{r4, r5, r6, r7, fp, pc}
   2dd28:	push	{r4, r5, fp, lr}
   2dd2c:	add	fp, sp, #8
   2dd30:	mov	r4, r1
   2dd34:	ldr	r1, [r0, #32]
   2dd38:	mov	r5, r0
   2dd3c:	cmp	r1, r4
   2dd40:	bne	2dd4c <__assert_fail@plt+0x1b190>
   2dd44:	cmn	r1, #100	; 0x64
   2dd48:	bne	2dd8c <__assert_fail@plt+0x1b1d0>
   2dd4c:	cmp	r2, #0
   2dd50:	beq	2dd68 <__assert_fail@plt+0x1b1ac>
   2dd54:	add	r0, r5, #60	; 0x3c
   2dd58:	bl	3cc80 <__assert_fail@plt+0x2a0c4>
   2dd5c:	cmp	r0, #0
   2dd60:	bge	2dd80 <__assert_fail@plt+0x1b1c4>
   2dd64:	b	2dd84 <__assert_fail@plt+0x1b1c8>
   2dd68:	cmp	r1, #0
   2dd6c:	blt	2dd84 <__assert_fail@plt+0x1b1c8>
   2dd70:	ldr	r0, [r5, #48]	; 0x30
   2dd74:	ands	r0, r0, #4
   2dd78:	bne	2dd84 <__assert_fail@plt+0x1b1c8>
   2dd7c:	mov	r0, r1
   2dd80:	bl	12b74 <close@plt>
   2dd84:	str	r4, [r5, #32]
   2dd88:	pop	{r4, r5, fp, pc}
   2dd8c:	bl	12b68 <abort@plt>
   2dd90:	cmp	r2, #5
   2dd94:	movcc	r0, #0
   2dd98:	strhcc	r2, [r1, #60]	; 0x3c
   2dd9c:	bxcc	lr
   2dda0:	push	{fp, lr}
   2dda4:	mov	fp, sp
   2dda8:	bl	128d4 <__errno_location@plt>
   2ddac:	mov	r1, #22
   2ddb0:	str	r1, [r0]
   2ddb4:	mov	r0, #1
   2ddb8:	pop	{fp, pc}
   2ddbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ddc0:	add	fp, sp, #28
   2ddc4:	sub	sp, sp, #4
   2ddc8:	mov	r5, r0
   2ddcc:	orr	r0, r1, #4096	; 0x1000
   2ddd0:	cmp	r0, #4096	; 0x1000
   2ddd4:	bne	2de14 <__assert_fail@plt+0x1b258>
   2ddd8:	ldr	r6, [r5]
   2dddc:	mov	r7, r1
   2dde0:	bl	128d4 <__errno_location@plt>
   2dde4:	mov	r4, #0
   2dde8:	mov	sl, r0
   2ddec:	str	r4, [r0]
   2ddf0:	ldrb	r0, [r5, #49]	; 0x31
   2ddf4:	tst	r0, #32
   2ddf8:	bne	2de24 <__assert_fail@plt+0x1b268>
   2ddfc:	ldrh	r0, [r6, #56]	; 0x38
   2de00:	cmp	r0, #1
   2de04:	beq	2de30 <__assert_fail@plt+0x1b274>
   2de08:	cmp	r0, #9
   2de0c:	ldreq	r4, [r6, #8]
   2de10:	b	2de24 <__assert_fail@plt+0x1b268>
   2de14:	bl	128d4 <__errno_location@plt>
   2de18:	mov	r1, #22
   2de1c:	mov	r4, #0
   2de20:	str	r1, [r0]
   2de24:	mov	r0, r4
   2de28:	sub	sp, fp, #28
   2de2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de30:	ldr	r0, [r5, #4]
   2de34:	cmp	r0, #0
   2de38:	blne	2c80c <__assert_fail@plt+0x19c50>
   2de3c:	cmp	r7, #4096	; 0x1000
   2de40:	mov	r9, #1
   2de44:	ldreq	r0, [r5, #48]	; 0x30
   2de48:	moveq	r9, #2
   2de4c:	orreq	r0, r0, #4096	; 0x1000
   2de50:	streq	r0, [r5, #48]	; 0x30
   2de54:	ldr	r0, [r6, #48]	; 0x30
   2de58:	cmp	r0, #0
   2de5c:	bne	2ded8 <__assert_fail@plt+0x1b31c>
   2de60:	ldr	r0, [r6, #24]
   2de64:	ldrb	r0, [r0]
   2de68:	cmp	r0, #47	; 0x2f
   2de6c:	beq	2ded8 <__assert_fail@plt+0x1b31c>
   2de70:	ldrb	r0, [r5, #48]	; 0x30
   2de74:	tst	r0, #4
   2de78:	bne	2ded8 <__assert_fail@plt+0x1b31c>
   2de7c:	movw	r1, #59684	; 0xe924
   2de80:	mov	r0, r5
   2de84:	movt	r1, #3
   2de88:	bl	2c7dc <__assert_fail@plt+0x19c20>
   2de8c:	cmn	r0, #1
   2de90:	ble	2def0 <__assert_fail@plt+0x1b334>
   2de94:	mov	r8, r0
   2de98:	mov	r0, r5
   2de9c:	mov	r1, r9
   2dea0:	bl	2d284 <__assert_fail@plt+0x1a6c8>
   2dea4:	str	r0, [r5, #4]
   2dea8:	ldrb	r0, [r5, #49]	; 0x31
   2deac:	tst	r0, #2
   2deb0:	bne	2defc <__assert_fail@plt+0x1b340>
   2deb4:	mov	r0, r8
   2deb8:	bl	12aa8 <fchdir@plt>
   2debc:	cmp	r0, #0
   2dec0:	beq	2df10 <__assert_fail@plt+0x1b354>
   2dec4:	ldr	r5, [sl]
   2dec8:	mov	r0, r8
   2decc:	bl	12b74 <close@plt>
   2ded0:	str	r5, [sl]
   2ded4:	b	2de24 <__assert_fail@plt+0x1b268>
   2ded8:	mov	r0, r5
   2dedc:	mov	r1, r9
   2dee0:	bl	2d284 <__assert_fail@plt+0x1a6c8>
   2dee4:	mov	r4, r0
   2dee8:	str	r0, [r5, #4]
   2deec:	b	2de24 <__assert_fail@plt+0x1b268>
   2def0:	mov	r4, #0
   2def4:	str	r4, [r5, #4]
   2def8:	b	2de24 <__assert_fail@plt+0x1b268>
   2defc:	mov	r0, r5
   2df00:	mov	r1, r8
   2df04:	mov	r2, #1
   2df08:	bl	2dd28 <__assert_fail@plt+0x1b16c>
   2df0c:	b	2df18 <__assert_fail@plt+0x1b35c>
   2df10:	mov	r0, r8
   2df14:	bl	12b74 <close@plt>
   2df18:	ldr	r4, [r5, #4]
   2df1c:	b	2de24 <__assert_fail@plt+0x1b268>
   2df20:	push	{fp, lr}
   2df24:	mov	fp, sp
   2df28:	mov	r2, r1
   2df2c:	ldrd	r0, [r0, #8]
   2df30:	mov	r3, #0
   2df34:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2df38:	mov	r0, r2
   2df3c:	pop	{fp, pc}
   2df40:	push	{r4, r5, fp, lr}
   2df44:	add	fp, sp, #8
   2df48:	ldrd	r2, [r1, #8]
   2df4c:	ldrd	r4, [r0, #8]
   2df50:	eor	r3, r5, r3
   2df54:	eor	r2, r4, r2
   2df58:	orrs	r2, r2, r3
   2df5c:	mov	r2, #0
   2df60:	bne	2df80 <__assert_fail@plt+0x1b3c4>
   2df64:	ldrd	r2, [r1]
   2df68:	ldrd	r0, [r0]
   2df6c:	eor	r1, r1, r3
   2df70:	eor	r0, r0, r2
   2df74:	orr	r0, r0, r1
   2df78:	clz	r0, r0
   2df7c:	lsr	r2, r0, #5
   2df80:	mov	r0, r2
   2df84:	pop	{r4, r5, fp, pc}
   2df88:	push	{r4, r5, fp, lr}
   2df8c:	add	fp, sp, #8
   2df90:	ldr	r0, [r0]
   2df94:	ldrd	r2, [r0, #160]	; 0xa0
   2df98:	ldr	r0, [r1]
   2df9c:	ldrd	r4, [r0, #160]	; 0xa0
   2dfa0:	mov	r0, #0
   2dfa4:	subs	r1, r4, r2
   2dfa8:	sbcs	r1, r5, r3
   2dfac:	movwcc	r0, #1
   2dfb0:	subs	r1, r2, r4
   2dfb4:	sbcs	r1, r3, r5
   2dfb8:	subcc	r0, r0, #1
   2dfbc:	pop	{r4, r5, fp, pc}
   2dfc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dfc4:	add	fp, sp, #24
   2dfc8:	sub	sp, sp, #96	; 0x60
   2dfcc:	ldr	r7, [r0, #44]	; 0x2c
   2dfd0:	mov	r4, r0
   2dfd4:	mov	r5, #0
   2dfd8:	ldrb	r0, [r7, #49]	; 0x31
   2dfdc:	tst	r0, #2
   2dfe0:	beq	2e0d4 <__assert_fail@plt+0x1b518>
   2dfe4:	ldr	r6, [r7, #52]	; 0x34
   2dfe8:	mov	r9, r1
   2dfec:	cmp	r6, #0
   2dff0:	bne	2e030 <__assert_fail@plt+0x1b474>
   2dff4:	movw	r0, #49224	; 0xc048
   2dff8:	movw	r2, #57568	; 0xe0e0
   2dffc:	movw	r3, #57600	; 0xe100
   2e000:	mov	r1, #0
   2e004:	mov	r8, #0
   2e008:	movt	r0, #2
   2e00c:	movt	r2, #2
   2e010:	movt	r3, #2
   2e014:	str	r0, [sp]
   2e018:	mov	r0, #13
   2e01c:	bl	21d98 <__assert_fail@plt+0xf1dc>
   2e020:	mov	r6, r0
   2e024:	cmp	r0, #0
   2e028:	str	r0, [r7, #52]	; 0x34
   2e02c:	beq	2e060 <__assert_fail@plt+0x1b4a4>
   2e030:	ldrd	r0, [r4, #64]	; 0x40
   2e034:	str	r1, [sp, #12]
   2e038:	str	r0, [sp, #8]
   2e03c:	add	r1, sp, #8
   2e040:	mov	r0, r6
   2e044:	bl	21af8 <__assert_fail@plt+0xef3c>
   2e048:	cmp	r0, #0
   2e04c:	beq	2e058 <__assert_fail@plt+0x1b49c>
   2e050:	ldr	r5, [r0, #8]
   2e054:	b	2e0d4 <__assert_fail@plt+0x1b518>
   2e058:	mov	r8, #1
   2e05c:	b	2e064 <__assert_fail@plt+0x1b4a8>
   2e060:	mov	r6, #0
   2e064:	cmp	r9, #0
   2e068:	blt	2e0d4 <__assert_fail@plt+0x1b518>
   2e06c:	add	r1, sp, #8
   2e070:	mov	r0, r9
   2e074:	bl	12448 <fstatfs64@plt>
   2e078:	cmp	r0, #0
   2e07c:	bne	2e0d4 <__assert_fail@plt+0x1b518>
   2e080:	cmp	r8, #0
   2e084:	beq	2e0d0 <__assert_fail@plt+0x1b514>
   2e088:	mov	r0, #16
   2e08c:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2e090:	cmp	r0, #0
   2e094:	beq	2e0d0 <__assert_fail@plt+0x1b514>
   2e098:	mov	r5, r0
   2e09c:	ldrd	r0, [r4, #64]	; 0x40
   2e0a0:	ldr	r2, [sp, #8]
   2e0a4:	stm	r5, {r0, r1, r2}
   2e0a8:	mov	r0, r6
   2e0ac:	mov	r1, r5
   2e0b0:	bl	22720 <__assert_fail@plt+0xfb64>
   2e0b4:	cmp	r0, #0
   2e0b8:	beq	2e0c8 <__assert_fail@plt+0x1b50c>
   2e0bc:	cmp	r0, r5
   2e0c0:	beq	2e0d0 <__assert_fail@plt+0x1b514>
   2e0c4:	bl	12b68 <abort@plt>
   2e0c8:	mov	r0, r5
   2e0cc:	bl	2c048 <__assert_fail@plt+0x1948c>
   2e0d0:	ldr	r5, [sp, #8]
   2e0d4:	mov	r0, r5
   2e0d8:	sub	sp, fp, #24
   2e0dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e0e0:	push	{fp, lr}
   2e0e4:	mov	fp, sp
   2e0e8:	mov	r2, r1
   2e0ec:	ldrd	r0, [r0]
   2e0f0:	mov	r3, #0
   2e0f4:	bl	3d4d4 <__assert_fail@plt+0x2a918>
   2e0f8:	mov	r0, r2
   2e0fc:	pop	{fp, pc}
   2e100:	ldrd	r2, [r1]
   2e104:	ldrd	r0, [r0]
   2e108:	eor	r1, r1, r3
   2e10c:	eor	r0, r0, r2
   2e110:	orr	r0, r0, r1
   2e114:	clz	r0, r0
   2e118:	lsr	r0, r0, #5
   2e11c:	bx	lr
   2e120:	push	{r4, sl, fp, lr}
   2e124:	add	fp, sp, #8
   2e128:	mov	r4, r1
   2e12c:	bl	12874 <getfilecon@plt>
   2e130:	mov	r1, r4
   2e134:	pop	{r4, sl, fp, lr}
   2e138:	b	2e13c <__assert_fail@plt+0x1b580>
   2e13c:	push	{r4, r5, fp, lr}
   2e140:	add	fp, sp, #8
   2e144:	cmp	r0, #10
   2e148:	beq	2e160 <__assert_fail@plt+0x1b5a4>
   2e14c:	cmp	r0, #0
   2e150:	bne	2e1a8 <__assert_fail@plt+0x1b5ec>
   2e154:	bl	128d4 <__errno_location@plt>
   2e158:	mov	r1, #95	; 0x5f
   2e15c:	b	2e1a0 <__assert_fail@plt+0x1b5e4>
   2e160:	ldr	r5, [r1]
   2e164:	mov	r4, r1
   2e168:	movw	r1, #13936	; 0x3670
   2e16c:	movt	r1, #4
   2e170:	mov	r0, r5
   2e174:	bl	124cc <strcmp@plt>
   2e178:	mov	r1, r0
   2e17c:	mov	r0, #10
   2e180:	cmp	r1, #0
   2e184:	popne	{r4, r5, fp, pc}
   2e188:	mov	r0, r5
   2e18c:	bl	12acc <freecon@plt>
   2e190:	mov	r0, #0
   2e194:	str	r0, [r4]
   2e198:	bl	128d4 <__errno_location@plt>
   2e19c:	mov	r1, #61	; 0x3d
   2e1a0:	str	r1, [r0]
   2e1a4:	mvn	r0, #0
   2e1a8:	pop	{r4, r5, fp, pc}
   2e1ac:	push	{r4, sl, fp, lr}
   2e1b0:	add	fp, sp, #8
   2e1b4:	mov	r4, r1
   2e1b8:	bl	127d8 <lgetfilecon@plt>
   2e1bc:	mov	r1, r4
   2e1c0:	pop	{r4, sl, fp, lr}
   2e1c4:	b	2e13c <__assert_fail@plt+0x1b580>
   2e1c8:	push	{r4, sl, fp, lr}
   2e1cc:	add	fp, sp, #8
   2e1d0:	mov	r4, r1
   2e1d4:	bl	12688 <fgetfilecon@plt>
   2e1d8:	mov	r1, r4
   2e1dc:	pop	{r4, sl, fp, lr}
   2e1e0:	b	2e13c <__assert_fail@plt+0x1b580>
   2e1e4:	cmp	r0, #0
   2e1e8:	movweq	r0, #1
   2e1ec:	cmn	r0, #1
   2e1f0:	ble	2e1f8 <__assert_fail@plt+0x1b63c>
   2e1f4:	b	127e4 <malloc@plt>
   2e1f8:	push	{fp, lr}
   2e1fc:	mov	fp, sp
   2e200:	bl	128d4 <__errno_location@plt>
   2e204:	mov	r1, #12
   2e208:	str	r1, [r0]
   2e20c:	mov	r0, #0
   2e210:	pop	{fp, pc}
   2e214:	push	{r4, r5, r6, r7, fp, lr}
   2e218:	add	fp, sp, #16
   2e21c:	sub	sp, sp, #8
   2e220:	add	r5, sp, #4
   2e224:	cmp	r0, #0
   2e228:	mov	r7, r2
   2e22c:	mov	r4, r1
   2e230:	movne	r5, r0
   2e234:	mov	r0, r5
   2e238:	bl	12778 <mbrtowc@plt>
   2e23c:	mov	r6, r0
   2e240:	cmp	r7, #0
   2e244:	beq	2e268 <__assert_fail@plt+0x1b6ac>
   2e248:	cmn	r6, #2
   2e24c:	bcc	2e268 <__assert_fail@plt+0x1b6ac>
   2e250:	mov	r0, #0
   2e254:	bl	3cbe0 <__assert_fail@plt+0x2a024>
   2e258:	cmp	r0, #0
   2e25c:	ldrbeq	r0, [r4]
   2e260:	moveq	r6, #1
   2e264:	streq	r0, [r5]
   2e268:	mov	r0, r6
   2e26c:	sub	sp, fp, #16
   2e270:	pop	{r4, r5, r6, r7, fp, pc}
   2e274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e278:	add	fp, sp, #28
   2e27c:	sub	sp, sp, #36	; 0x24
   2e280:	movw	r0, #13946	; 0x367a
   2e284:	movw	r1, #7392	; 0x1ce0
   2e288:	movt	r0, #4
   2e28c:	movt	r1, #4
   2e290:	bl	12ab4 <fopen64@plt>
   2e294:	cmp	r0, #0
   2e298:	beq	2e2e0 <__assert_fail@plt+0x1b724>
   2e29c:	mov	r9, r0
   2e2a0:	mov	r7, #0
   2e2a4:	add	r0, sp, #28
   2e2a8:	add	r1, sp, #24
   2e2ac:	mov	r2, r9
   2e2b0:	str	r7, [sp, #28]
   2e2b4:	str	r7, [sp, #24]
   2e2b8:	bl	12b08 <getline@plt>
   2e2bc:	add	r4, sp, #32
   2e2c0:	cmn	r0, #1
   2e2c4:	beq	2eb48 <__assert_fail@plt+0x1bf8c>
   2e2c8:	movw	sl, #13967	; 0x368f
   2e2cc:	add	r8, sp, #12
   2e2d0:	add	r5, sp, #20
   2e2d4:	add	r6, sp, #16
   2e2d8:	movt	sl, #4
   2e2dc:	b	2e814 <__assert_fail@plt+0x1bc58>
   2e2e0:	movw	r0, #14155	; 0x374b
   2e2e4:	movw	r1, #7972	; 0x1f24
   2e2e8:	movt	r0, #4
   2e2ec:	movt	r1, #4
   2e2f0:	bl	12ae4 <setmntent@plt>
   2e2f4:	cmp	r0, #0
   2e2f8:	beq	2ebcc <__assert_fail@plt+0x1c010>
   2e2fc:	mov	r8, r0
   2e300:	bl	1279c <getmntent@plt>
   2e304:	cmp	r0, #0
   2e308:	beq	2ebd4 <__assert_fail@plt+0x1c018>
   2e30c:	mov	r5, r0
   2e310:	add	r4, sp, #32
   2e314:	b	2e46c <__assert_fail@plt+0x1b8b0>
   2e318:	ldrb	r0, [r5]
   2e31c:	cmp	r0, #47	; 0x2f
   2e320:	ldrbeq	r0, [r5, #1]
   2e324:	cmpeq	r0, #47	; 0x2f
   2e328:	beq	2e420 <__assert_fail@plt+0x1b864>
   2e32c:	movw	r1, #14099	; 0x3713
   2e330:	mov	r0, r7
   2e334:	movt	r1, #4
   2e338:	bl	124cc <strcmp@plt>
   2e33c:	cmp	r0, #0
   2e340:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e344:	movw	r1, #720	; 0x2d0
   2e348:	mov	r0, r7
   2e34c:	movt	r1, #4
   2e350:	bl	124cc <strcmp@plt>
   2e354:	cmp	r0, #0
   2e358:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e35c:	movw	r1, #14104	; 0x3718
   2e360:	mov	r0, r7
   2e364:	movt	r1, #4
   2e368:	bl	124cc <strcmp@plt>
   2e36c:	cmp	r0, #0
   2e370:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e374:	movw	r1, #14109	; 0x371d
   2e378:	mov	r0, r7
   2e37c:	movt	r1, #4
   2e380:	bl	124cc <strcmp@plt>
   2e384:	cmp	r0, #0
   2e388:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e38c:	movw	r1, #14120	; 0x3728
   2e390:	mov	r0, r7
   2e394:	movt	r1, #4
   2e398:	bl	124cc <strcmp@plt>
   2e39c:	cmp	r0, #0
   2e3a0:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e3a4:	movw	r1, #14126	; 0x372e
   2e3a8:	mov	r0, r7
   2e3ac:	movt	r1, #4
   2e3b0:	bl	124cc <strcmp@plt>
   2e3b4:	cmp	r0, #0
   2e3b8:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e3bc:	movw	r1, #14131	; 0x3733
   2e3c0:	mov	r0, r7
   2e3c4:	movt	r1, #4
   2e3c8:	bl	124cc <strcmp@plt>
   2e3cc:	cmp	r0, #0
   2e3d0:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e3d4:	movw	r1, #14137	; 0x3739
   2e3d8:	mov	r0, r7
   2e3dc:	movt	r1, #4
   2e3e0:	bl	124cc <strcmp@plt>
   2e3e4:	cmp	r0, #0
   2e3e8:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e3ec:	movw	r1, #14143	; 0x373f
   2e3f0:	mov	r0, r7
   2e3f4:	movt	r1, #4
   2e3f8:	bl	124cc <strcmp@plt>
   2e3fc:	cmp	r0, #0
   2e400:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e404:	movw	r0, #14148	; 0x3744
   2e408:	mov	r1, r5
   2e40c:	movt	r0, #4
   2e410:	bl	124cc <strcmp@plt>
   2e414:	clz	r0, r0
   2e418:	lsr	r6, r0, #5
   2e41c:	b	2e680 <__assert_fail@plt+0x1bac4>
   2e420:	movw	r1, #14083	; 0x3703
   2e424:	mov	r0, r7
   2e428:	movt	r1, #4
   2e42c:	bl	124cc <strcmp@plt>
   2e430:	cmp	r0, #0
   2e434:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e438:	movw	r1, #14089	; 0x3709
   2e43c:	mov	r0, r7
   2e440:	movt	r1, #4
   2e444:	bl	124cc <strcmp@plt>
   2e448:	cmp	r0, #0
   2e44c:	beq	2e680 <__assert_fail@plt+0x1bac4>
   2e450:	movw	r1, #14094	; 0x370e
   2e454:	mov	r0, r7
   2e458:	movt	r1, #4
   2e45c:	bl	124cc <strcmp@plt>
   2e460:	cmp	r0, #0
   2e464:	bne	2e32c <__assert_fail@plt+0x1b770>
   2e468:	b	2e680 <__assert_fail@plt+0x1bac4>
   2e46c:	movw	r1, #14165	; 0x3755
   2e470:	mov	r0, r5
   2e474:	mov	sl, r4
   2e478:	movt	r1, #4
   2e47c:	bl	1273c <hasmntopt@plt>
   2e480:	str	r0, [sp, #8]
   2e484:	mov	r0, #32
   2e488:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   2e48c:	mov	r9, r0
   2e490:	ldr	r0, [r5]
   2e494:	bl	2adf0 <__assert_fail@plt+0x18234>
   2e498:	str	r0, [r9]
   2e49c:	ldr	r0, [r5, #4]
   2e4a0:	bl	2adf0 <__assert_fail@plt+0x18234>
   2e4a4:	str	r0, [r9, #4]
   2e4a8:	mov	r0, #0
   2e4ac:	str	r0, [r9, #8]
   2e4b0:	ldr	r0, [r5, #8]
   2e4b4:	bl	2adf0 <__assert_fail@plt+0x18234>
   2e4b8:	str	r0, [r9, #12]
   2e4bc:	mov	r7, r0
   2e4c0:	movw	r1, #13988	; 0x36a4
   2e4c4:	ldrb	r0, [r9, #24]
   2e4c8:	movt	r1, #4
   2e4cc:	orr	r4, r0, #4
   2e4d0:	mov	r0, r7
   2e4d4:	strb	r4, [r9, #24]
   2e4d8:	bl	124cc <strcmp@plt>
   2e4dc:	cmp	r0, #0
   2e4e0:	mov	r6, #1
   2e4e4:	mov	r0, #1
   2e4e8:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e4ec:	movw	r1, #13995	; 0x36ab
   2e4f0:	mov	r0, r7
   2e4f4:	movt	r1, #4
   2e4f8:	bl	124cc <strcmp@plt>
   2e4fc:	cmp	r0, #0
   2e500:	mov	r0, #1
   2e504:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e508:	movw	r1, #14000	; 0x36b0
   2e50c:	mov	r0, r7
   2e510:	movt	r1, #4
   2e514:	bl	124cc <strcmp@plt>
   2e518:	cmp	r0, #0
   2e51c:	mov	r0, #1
   2e520:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e524:	movw	r1, #14006	; 0x36b6
   2e528:	mov	r0, r7
   2e52c:	movt	r1, #4
   2e530:	bl	124cc <strcmp@plt>
   2e534:	cmp	r0, #0
   2e538:	mov	r0, #1
   2e53c:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e540:	movw	r1, #14014	; 0x36be
   2e544:	mov	r0, r7
   2e548:	movt	r1, #4
   2e54c:	bl	124cc <strcmp@plt>
   2e550:	cmp	r0, #0
   2e554:	mov	r0, #1
   2e558:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e55c:	movw	r1, #14021	; 0x36c5
   2e560:	mov	r0, r7
   2e564:	movt	r1, #4
   2e568:	bl	124cc <strcmp@plt>
   2e56c:	cmp	r0, #0
   2e570:	mov	r0, #1
   2e574:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e578:	movw	r1, #14029	; 0x36cd
   2e57c:	mov	r0, r7
   2e580:	movt	r1, #4
   2e584:	bl	124cc <strcmp@plt>
   2e588:	cmp	r0, #0
   2e58c:	mov	r0, #1
   2e590:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e594:	movw	r1, #14041	; 0x36d9
   2e598:	mov	r0, r7
   2e59c:	movt	r1, #4
   2e5a0:	bl	124cc <strcmp@plt>
   2e5a4:	cmp	r0, #0
   2e5a8:	mov	r0, #1
   2e5ac:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e5b0:	movw	r1, #14048	; 0x36e0
   2e5b4:	mov	r0, r7
   2e5b8:	movt	r1, #4
   2e5bc:	bl	124cc <strcmp@plt>
   2e5c0:	cmp	r0, #0
   2e5c4:	mov	r0, #1
   2e5c8:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e5cc:	movw	r1, #14059	; 0x36eb
   2e5d0:	mov	r0, r7
   2e5d4:	movt	r1, #4
   2e5d8:	bl	124cc <strcmp@plt>
   2e5dc:	cmp	r0, #0
   2e5e0:	mov	r0, #1
   2e5e4:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e5e8:	movw	r1, #14065	; 0x36f1
   2e5ec:	mov	r0, r7
   2e5f0:	movt	r1, #4
   2e5f4:	bl	124cc <strcmp@plt>
   2e5f8:	cmp	r0, #0
   2e5fc:	mov	r0, #1
   2e600:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e604:	movw	r1, #14071	; 0x36f7
   2e608:	mov	r0, r7
   2e60c:	movt	r1, #4
   2e610:	bl	124cc <strcmp@plt>
   2e614:	cmp	r0, #0
   2e618:	mov	r0, #1
   2e61c:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e620:	movw	r1, #761	; 0x2f9
   2e624:	mov	r0, r7
   2e628:	movt	r1, #4
   2e62c:	bl	124cc <strcmp@plt>
   2e630:	cmp	r0, #0
   2e634:	mov	r0, #1
   2e638:	beq	2e65c <__assert_fail@plt+0x1baa0>
   2e63c:	movw	r1, #14078	; 0x36fe
   2e640:	mov	r0, r7
   2e644:	movt	r1, #4
   2e648:	bl	124cc <strcmp@plt>
   2e64c:	ldr	r1, [sp, #8]
   2e650:	orr	r0, r1, r0
   2e654:	clz	r0, r0
   2e658:	lsr	r0, r0, #5
   2e65c:	bic	r1, r4, #1
   2e660:	orr	r4, r1, r0
   2e664:	mov	r1, #58	; 0x3a
   2e668:	strb	r4, [r9, #24]
   2e66c:	ldr	r5, [r9]
   2e670:	mov	r0, r5
   2e674:	bl	12898 <strchr@plt>
   2e678:	cmp	r0, #0
   2e67c:	beq	2e318 <__assert_fail@plt+0x1b75c>
   2e680:	mvn	r0, #0
   2e684:	str	r0, [r9, #16]
   2e688:	str	r0, [r9, #20]
   2e68c:	and	r0, r4, #253	; 0xfd
   2e690:	add	r4, r9, #28
   2e694:	orr	r0, r0, r6, lsl #1
   2e698:	strb	r0, [r9, #24]
   2e69c:	mov	r0, r8
   2e6a0:	str	r9, [sl]
   2e6a4:	bl	1279c <getmntent@plt>
   2e6a8:	mov	r5, r0
   2e6ac:	cmp	r0, #0
   2e6b0:	bne	2e46c <__assert_fail@plt+0x1b8b0>
   2e6b4:	b	2ebd8 <__assert_fail@plt+0x1c01c>
   2e6b8:	ldrb	r0, [r5]
   2e6bc:	cmp	r0, #47	; 0x2f
   2e6c0:	ldrbeq	r0, [r5, #1]
   2e6c4:	cmpeq	r0, #47	; 0x2f
   2e6c8:	beq	2e7c8 <__assert_fail@plt+0x1bc0c>
   2e6cc:	movw	r1, #14099	; 0x3713
   2e6d0:	mov	r0, r7
   2e6d4:	str	r5, [sp, #4]
   2e6d8:	movt	r1, #4
   2e6dc:	bl	124cc <strcmp@plt>
   2e6e0:	cmp	r0, #0
   2e6e4:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e6e8:	movw	r1, #720	; 0x2d0
   2e6ec:	mov	r0, r7
   2e6f0:	movt	r1, #4
   2e6f4:	bl	124cc <strcmp@plt>
   2e6f8:	cmp	r0, #0
   2e6fc:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e700:	movw	r1, #14104	; 0x3718
   2e704:	mov	r0, r7
   2e708:	movt	r1, #4
   2e70c:	bl	124cc <strcmp@plt>
   2e710:	cmp	r0, #0
   2e714:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e718:	movw	r1, #14109	; 0x371d
   2e71c:	mov	r0, r7
   2e720:	movt	r1, #4
   2e724:	bl	124cc <strcmp@plt>
   2e728:	cmp	r0, #0
   2e72c:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e730:	movw	r1, #14120	; 0x3728
   2e734:	mov	r0, r7
   2e738:	movt	r1, #4
   2e73c:	bl	124cc <strcmp@plt>
   2e740:	cmp	r0, #0
   2e744:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e748:	movw	r1, #14126	; 0x372e
   2e74c:	mov	r0, r7
   2e750:	movt	r1, #4
   2e754:	bl	124cc <strcmp@plt>
   2e758:	cmp	r0, #0
   2e75c:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e760:	movw	r1, #14131	; 0x3733
   2e764:	mov	r0, r7
   2e768:	movt	r1, #4
   2e76c:	bl	124cc <strcmp@plt>
   2e770:	cmp	r0, #0
   2e774:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e778:	movw	r1, #14137	; 0x3739
   2e77c:	mov	r0, r7
   2e780:	movt	r1, #4
   2e784:	bl	124cc <strcmp@plt>
   2e788:	cmp	r0, #0
   2e78c:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e790:	movw	r1, #14143	; 0x373f
   2e794:	mov	r0, r7
   2e798:	movt	r1, #4
   2e79c:	bl	124cc <strcmp@plt>
   2e7a0:	cmp	r0, #0
   2e7a4:	mov	r1, #1
   2e7a8:	beq	2eafc <__assert_fail@plt+0x1bf40>
   2e7ac:	ldr	r1, [sp, #4]
   2e7b0:	movw	r0, #14148	; 0x3744
   2e7b4:	movt	r0, #4
   2e7b8:	bl	124cc <strcmp@plt>
   2e7bc:	clz	r0, r0
   2e7c0:	lsr	r1, r0, #5
   2e7c4:	b	2eafc <__assert_fail@plt+0x1bf40>
   2e7c8:	movw	r1, #14083	; 0x3703
   2e7cc:	mov	r0, r7
   2e7d0:	movt	r1, #4
   2e7d4:	bl	124cc <strcmp@plt>
   2e7d8:	cmp	r0, #0
   2e7dc:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e7e0:	movw	r1, #14089	; 0x3709
   2e7e4:	mov	r0, r7
   2e7e8:	movt	r1, #4
   2e7ec:	bl	124cc <strcmp@plt>
   2e7f0:	cmp	r0, #0
   2e7f4:	beq	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e7f8:	movw	r1, #14094	; 0x370e
   2e7fc:	mov	r0, r7
   2e800:	movt	r1, #4
   2e804:	bl	124cc <strcmp@plt>
   2e808:	cmp	r0, #0
   2e80c:	bne	2e6cc <__assert_fail@plt+0x1bb10>
   2e810:	b	2eaf8 <__assert_fail@plt+0x1bf3c>
   2e814:	ldr	r0, [sp, #28]
   2e818:	mov	r1, sl
   2e81c:	mov	r2, r5
   2e820:	mov	r3, r6
   2e824:	str	r8, [sp]
   2e828:	bl	12a48 <sscanf@plt>
   2e82c:	orr	r0, r0, #1
   2e830:	cmp	r0, #3
   2e834:	bne	2eb30 <__assert_fail@plt+0x1bf74>
   2e838:	ldr	r0, [sp, #12]
   2e83c:	ldr	r1, [sp, #28]
   2e840:	add	r5, r1, r0
   2e844:	mov	r1, #32
   2e848:	mov	r0, r5
   2e84c:	bl	12898 <strchr@plt>
   2e850:	cmp	r0, #0
   2e854:	beq	2eb28 <__assert_fail@plt+0x1bf6c>
   2e858:	mov	r6, r0
   2e85c:	mov	r1, #32
   2e860:	strb	r7, [r6], #1
   2e864:	mov	r0, r6
   2e868:	bl	12898 <strchr@plt>
   2e86c:	cmp	r0, #0
   2e870:	beq	2eb28 <__assert_fail@plt+0x1bf6c>
   2e874:	movw	r1, #13984	; 0x36a0
   2e878:	strb	r7, [r0], #1
   2e87c:	movt	r1, #4
   2e880:	bl	3b87c <__assert_fail@plt+0x28cc0>
   2e884:	cmp	r0, #0
   2e888:	beq	2eb28 <__assert_fail@plt+0x1bf6c>
   2e88c:	add	r8, r0, #3
   2e890:	mov	r1, #32
   2e894:	mov	r0, r8
   2e898:	bl	12898 <strchr@plt>
   2e89c:	cmp	r0, #0
   2e8a0:	beq	2eb1c <__assert_fail@plt+0x1bf60>
   2e8a4:	mov	sl, r0
   2e8a8:	mov	r1, #32
   2e8ac:	strb	r7, [sl], #1
   2e8b0:	mov	r0, sl
   2e8b4:	bl	12898 <strchr@plt>
   2e8b8:	cmp	r0, #0
   2e8bc:	beq	2eb1c <__assert_fail@plt+0x1bf60>
   2e8c0:	strb	r7, [r0]
   2e8c4:	mov	r0, sl
   2e8c8:	str	r4, [sp, #8]
   2e8cc:	bl	2ec00 <__assert_fail@plt+0x1c044>
   2e8d0:	mov	r0, r6
   2e8d4:	bl	2ec00 <__assert_fail@plt+0x1c044>
   2e8d8:	mov	r0, r5
   2e8dc:	bl	2ec00 <__assert_fail@plt+0x1c044>
   2e8e0:	mov	r0, r8
   2e8e4:	bl	2ec00 <__assert_fail@plt+0x1c044>
   2e8e8:	mov	r0, #32
   2e8ec:	bl	2a9e0 <__assert_fail@plt+0x17e24>
   2e8f0:	mov	r4, r0
   2e8f4:	mov	r0, sl
   2e8f8:	bl	2adf0 <__assert_fail@plt+0x18234>
   2e8fc:	str	r0, [r4]
   2e900:	mov	r0, r6
   2e904:	bl	2adf0 <__assert_fail@plt+0x18234>
   2e908:	str	r0, [r4, #4]
   2e90c:	mov	r0, r5
   2e910:	bl	2adf0 <__assert_fail@plt+0x18234>
   2e914:	str	r0, [r4, #8]
   2e918:	mov	r0, r8
   2e91c:	bl	2adf0 <__assert_fail@plt+0x18234>
   2e920:	str	r0, [r4, #12]
   2e924:	mov	r7, r0
   2e928:	ldr	r1, [sp, #16]
   2e92c:	ldrb	r0, [r4, #24]
   2e930:	orr	r6, r0, #4
   2e934:	ldr	r0, [sp, #20]
   2e938:	strb	r6, [r4, #24]
   2e93c:	bl	124f0 <gnu_dev_makedev@plt>
   2e940:	strd	r0, [r4, #16]
   2e944:	movw	r1, #13988	; 0x36a4
   2e948:	mov	r0, r7
   2e94c:	movt	r1, #4
   2e950:	bl	124cc <strcmp@plt>
   2e954:	cmp	r0, #0
   2e958:	mov	r0, #1
   2e95c:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2e960:	movw	r1, #13995	; 0x36ab
   2e964:	mov	r0, r7
   2e968:	movt	r1, #4
   2e96c:	bl	124cc <strcmp@plt>
   2e970:	cmp	r0, #0
   2e974:	mov	r0, #1
   2e978:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2e97c:	movw	r1, #14000	; 0x36b0
   2e980:	mov	r0, r7
   2e984:	movt	r1, #4
   2e988:	bl	124cc <strcmp@plt>
   2e98c:	cmp	r0, #0
   2e990:	mov	r0, #1
   2e994:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2e998:	movw	r1, #14006	; 0x36b6
   2e99c:	mov	r0, r7
   2e9a0:	movt	r1, #4
   2e9a4:	bl	124cc <strcmp@plt>
   2e9a8:	cmp	r0, #0
   2e9ac:	mov	r0, #1
   2e9b0:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2e9b4:	movw	r1, #14014	; 0x36be
   2e9b8:	mov	r0, r7
   2e9bc:	movt	r1, #4
   2e9c0:	bl	124cc <strcmp@plt>
   2e9c4:	cmp	r0, #0
   2e9c8:	mov	r0, #1
   2e9cc:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2e9d0:	movw	r1, #14021	; 0x36c5
   2e9d4:	mov	r0, r7
   2e9d8:	movt	r1, #4
   2e9dc:	bl	124cc <strcmp@plt>
   2e9e0:	cmp	r0, #0
   2e9e4:	mov	r0, #1
   2e9e8:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2e9ec:	movw	r1, #14029	; 0x36cd
   2e9f0:	mov	r0, r7
   2e9f4:	movt	r1, #4
   2e9f8:	bl	124cc <strcmp@plt>
   2e9fc:	cmp	r0, #0
   2ea00:	mov	r0, #1
   2ea04:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2ea08:	movw	r1, #14041	; 0x36d9
   2ea0c:	mov	r0, r7
   2ea10:	movt	r1, #4
   2ea14:	bl	124cc <strcmp@plt>
   2ea18:	cmp	r0, #0
   2ea1c:	mov	r0, #1
   2ea20:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2ea24:	movw	r1, #14048	; 0x36e0
   2ea28:	mov	r0, r7
   2ea2c:	movt	r1, #4
   2ea30:	bl	124cc <strcmp@plt>
   2ea34:	cmp	r0, #0
   2ea38:	mov	r0, #1
   2ea3c:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2ea40:	movw	r1, #14059	; 0x36eb
   2ea44:	mov	r0, r7
   2ea48:	movt	r1, #4
   2ea4c:	bl	124cc <strcmp@plt>
   2ea50:	cmp	r0, #0
   2ea54:	mov	r0, #1
   2ea58:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2ea5c:	movw	r1, #14065	; 0x36f1
   2ea60:	mov	r0, r7
   2ea64:	movt	r1, #4
   2ea68:	bl	124cc <strcmp@plt>
   2ea6c:	cmp	r0, #0
   2ea70:	mov	r0, #1
   2ea74:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2ea78:	movw	r1, #14071	; 0x36f7
   2ea7c:	mov	r0, r7
   2ea80:	movt	r1, #4
   2ea84:	bl	124cc <strcmp@plt>
   2ea88:	cmp	r0, #0
   2ea8c:	mov	r0, #1
   2ea90:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2ea94:	movw	r1, #761	; 0x2f9
   2ea98:	mov	r0, r7
   2ea9c:	movt	r1, #4
   2eaa0:	bl	124cc <strcmp@plt>
   2eaa4:	cmp	r0, #0
   2eaa8:	mov	r0, #1
   2eaac:	beq	2eac8 <__assert_fail@plt+0x1bf0c>
   2eab0:	movw	r1, #14078	; 0x36fe
   2eab4:	mov	r0, r7
   2eab8:	movt	r1, #4
   2eabc:	bl	124cc <strcmp@plt>
   2eac0:	clz	r0, r0
   2eac4:	lsr	r0, r0, #5
   2eac8:	bic	r1, r6, #1
   2eacc:	orr	r6, r1, r0
   2ead0:	mov	r1, #58	; 0x3a
   2ead4:	strb	r6, [r4, #24]
   2ead8:	ldr	r5, [r4]
   2eadc:	mov	r0, r5
   2eae0:	bl	12898 <strchr@plt>
   2eae4:	movw	sl, #13967	; 0x368f
   2eae8:	cmp	r0, #0
   2eaec:	add	r8, sp, #12
   2eaf0:	movt	sl, #4
   2eaf4:	beq	2e6b8 <__assert_fail@plt+0x1bafc>
   2eaf8:	mov	r1, #1
   2eafc:	and	r0, r6, #253	; 0xfd
   2eb00:	mov	r7, #0
   2eb04:	orr	r0, r0, r1, lsl #1
   2eb08:	strb	r0, [r4, #24]
   2eb0c:	ldr	r0, [sp, #8]
   2eb10:	str	r4, [r0]
   2eb14:	add	r4, r4, #28
   2eb18:	b	2eb28 <__assert_fail@plt+0x1bf6c>
   2eb1c:	movw	sl, #13967	; 0x368f
   2eb20:	add	r8, sp, #12
   2eb24:	movt	sl, #4
   2eb28:	add	r5, sp, #20
   2eb2c:	add	r6, sp, #16
   2eb30:	add	r0, sp, #28
   2eb34:	add	r1, sp, #24
   2eb38:	mov	r2, r9
   2eb3c:	bl	12b08 <getline@plt>
   2eb40:	cmn	r0, #1
   2eb44:	bne	2e814 <__assert_fail@plt+0x1bc58>
   2eb48:	ldr	r0, [sp, #28]
   2eb4c:	bl	2c048 <__assert_fail@plt+0x1948c>
   2eb50:	mov	r0, r9
   2eb54:	bl	1276c <ferror_unlocked@plt>
   2eb58:	cmp	r0, #0
   2eb5c:	beq	2ebb8 <__assert_fail@plt+0x1bffc>
   2eb60:	bl	128d4 <__errno_location@plt>
   2eb64:	ldr	r6, [r0]
   2eb68:	mov	r5, r0
   2eb6c:	mov	r0, r9
   2eb70:	bl	129a0 <fclose@plt>
   2eb74:	str	r6, [r5]
   2eb78:	bl	128d4 <__errno_location@plt>
   2eb7c:	mov	r6, #0
   2eb80:	ldr	r8, [r0]
   2eb84:	mov	r5, r0
   2eb88:	str	r6, [r4]
   2eb8c:	ldr	r0, [sp, #32]
   2eb90:	cmp	r0, #0
   2eb94:	beq	2ebb0 <__assert_fail@plt+0x1bff4>
   2eb98:	ldr	r7, [r0, #28]
   2eb9c:	bl	2ec98 <__assert_fail@plt+0x1c0dc>
   2eba0:	cmp	r7, #0
   2eba4:	mov	r0, r7
   2eba8:	bne	2eb98 <__assert_fail@plt+0x1bfdc>
   2ebac:	str	r7, [sp, #32]
   2ebb0:	str	r8, [r5]
   2ebb4:	b	2ebf4 <__assert_fail@plt+0x1c038>
   2ebb8:	mov	r0, r9
   2ebbc:	bl	129a0 <fclose@plt>
   2ebc0:	cmn	r0, #1
   2ebc4:	bne	2ebe8 <__assert_fail@plt+0x1c02c>
   2ebc8:	b	2eb78 <__assert_fail@plt+0x1bfbc>
   2ebcc:	mov	r6, #0
   2ebd0:	b	2ebf4 <__assert_fail@plt+0x1c038>
   2ebd4:	add	r4, sp, #32
   2ebd8:	mov	r0, r8
   2ebdc:	bl	129c4 <endmntent@plt>
   2ebe0:	cmp	r0, #0
   2ebe4:	beq	2eb78 <__assert_fail@plt+0x1bfbc>
   2ebe8:	mov	r0, #0
   2ebec:	str	r0, [r4]
   2ebf0:	ldr	r6, [sp, #32]
   2ebf4:	mov	r0, r6
   2ebf8:	sub	sp, fp, #28
   2ebfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec00:	push	{r4, r5, r6, r7, fp, lr}
   2ec04:	add	fp, sp, #16
   2ec08:	mov	r7, r0
   2ec0c:	bl	1288c <strlen@plt>
   2ec10:	adds	r0, r0, #1
   2ec14:	popeq	{r4, r5, r6, r7, fp, pc}
   2ec18:	mov	r2, #0
   2ec1c:	mov	r1, r7
   2ec20:	ldrb	r3, [r7, r2]
   2ec24:	add	r6, r2, #4
   2ec28:	cmp	r6, r0
   2ec2c:	bcs	2ec84 <__assert_fail@plt+0x1c0c8>
   2ec30:	cmp	r3, #92	; 0x5c
   2ec34:	bne	2ec84 <__assert_fail@plt+0x1c0c8>
   2ec38:	add	r6, r7, r2
   2ec3c:	ldrb	r4, [r6, #1]
   2ec40:	and	r5, r4, #252	; 0xfc
   2ec44:	cmp	r5, #48	; 0x30
   2ec48:	bne	2ec84 <__assert_fail@plt+0x1c0c8>
   2ec4c:	ldrb	ip, [r6, #2]
   2ec50:	and	r6, ip, #248	; 0xf8
   2ec54:	cmp	r6, #48	; 0x30
   2ec58:	bne	2ec84 <__assert_fail@plt+0x1c0c8>
   2ec5c:	add	lr, r2, #3
   2ec60:	ldrb	r6, [r7, lr]
   2ec64:	and	r5, r6, #248	; 0xf8
   2ec68:	cmp	r5, #48	; 0x30
   2ec6c:	bne	2ec84 <__assert_fail@plt+0x1c0c8>
   2ec70:	lsl	r2, r4, #6
   2ec74:	add	r2, r2, ip, lsl #3
   2ec78:	add	r2, r2, r6
   2ec7c:	add	r3, r2, #80	; 0x50
   2ec80:	mov	r2, lr
   2ec84:	add	r2, r2, #1
   2ec88:	strb	r3, [r1], #1
   2ec8c:	cmp	r2, r0
   2ec90:	bcc	2ec20 <__assert_fail@plt+0x1c064>
   2ec94:	pop	{r4, r5, r6, r7, fp, pc}
   2ec98:	push	{r4, sl, fp, lr}
   2ec9c:	add	fp, sp, #8
   2eca0:	mov	r4, r0
   2eca4:	ldr	r0, [r0]
   2eca8:	bl	2c048 <__assert_fail@plt+0x1948c>
   2ecac:	ldr	r0, [r4, #4]
   2ecb0:	bl	2c048 <__assert_fail@plt+0x1948c>
   2ecb4:	ldr	r0, [r4, #8]
   2ecb8:	bl	2c048 <__assert_fail@plt+0x1948c>
   2ecbc:	ldrb	r0, [r4, #24]
   2ecc0:	tst	r0, #4
   2ecc4:	beq	2ecd0 <__assert_fail@plt+0x1c114>
   2ecc8:	ldr	r0, [r4, #12]
   2eccc:	bl	2c048 <__assert_fail@plt+0x1948c>
   2ecd0:	mov	r0, r4
   2ecd4:	pop	{r4, sl, fp, lr}
   2ecd8:	b	2c048 <__assert_fail@plt+0x1948c>
   2ecdc:	push	{fp, lr}
   2ece0:	mov	fp, sp
   2ece4:	cmp	r0, #0
   2ece8:	beq	2ed04 <__assert_fail@plt+0x1c148>
   2ecec:	cmp	r1, #0
   2ecf0:	beq	2ed10 <__assert_fail@plt+0x1c154>
   2ecf4:	cmn	r1, #1
   2ecf8:	ble	2ed18 <__assert_fail@plt+0x1c15c>
   2ecfc:	pop	{fp, lr}
   2ed00:	b	1267c <realloc@plt>
   2ed04:	mov	r0, r1
   2ed08:	pop	{fp, lr}
   2ed0c:	b	2e1e4 <__assert_fail@plt+0x1b628>
   2ed10:	bl	2c048 <__assert_fail@plt+0x1948c>
   2ed14:	b	2ed24 <__assert_fail@plt+0x1c168>
   2ed18:	bl	128d4 <__errno_location@plt>
   2ed1c:	mov	r1, #12
   2ed20:	str	r1, [r0]
   2ed24:	mov	r0, #0
   2ed28:	pop	{fp, pc}
   2ed2c:	cmp	r2, #0
   2ed30:	beq	2ed60 <__assert_fail@plt+0x1c1a4>
   2ed34:	mvn	r3, #0
   2ed38:	udiv	r3, r3, r2
   2ed3c:	cmp	r3, r1
   2ed40:	bcs	2ed60 <__assert_fail@plt+0x1c1a4>
   2ed44:	push	{fp, lr}
   2ed48:	mov	fp, sp
   2ed4c:	bl	128d4 <__errno_location@plt>
   2ed50:	mov	r1, #12
   2ed54:	str	r1, [r0]
   2ed58:	mov	r0, #0
   2ed5c:	pop	{fp, pc}
   2ed60:	mul	r1, r2, r1
   2ed64:	b	2ecdc <__assert_fail@plt+0x1c120>
   2ed68:	push	{fp, lr}
   2ed6c:	mov	fp, sp
   2ed70:	mov	lr, r0
   2ed74:	movw	r0, #20184	; 0x4ed8
   2ed78:	mov	ip, r1
   2ed7c:	ldrb	r1, [r2, #28]
   2ed80:	movt	r0, #5
   2ed84:	ldr	r3, [r0]
   2ed88:	mov	r0, #16
   2ed8c:	and	r1, r1, #111	; 0x6f
   2ed90:	and	r0, r0, r3, lsr #21
   2ed94:	orr	r0, r1, r0
   2ed98:	mov	r1, lr
   2ed9c:	orr	r0, r0, #128	; 0x80
   2eda0:	strb	r0, [r2, #28]
   2eda4:	mov	r0, r2
   2eda8:	mov	r2, ip
   2edac:	bl	2ede4 <__assert_fail@plt+0x1c228>
   2edb0:	cmp	r0, #0
   2edb4:	moveq	r0, #0
   2edb8:	popeq	{fp, pc}
   2edbc:	movw	r1, #14560	; 0x38e0
   2edc0:	mov	r2, #5
   2edc4:	movt	r1, #4
   2edc8:	ldr	r0, [r1, r0, lsl #2]
   2edcc:	movw	r1, #14176	; 0x3760
   2edd0:	movt	r1, #4
   2edd4:	add	r1, r1, r0
   2edd8:	mov	r0, #0
   2eddc:	pop	{fp, lr}
   2ede0:	b	1264c <dcgettext@plt>
   2ede4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ede8:	add	fp, sp, #28
   2edec:	sub	sp, sp, #140	; 0x8c
   2edf0:	str	r1, [sp, #24]
   2edf4:	mov	r1, #0
   2edf8:	str	r0, [sp, #28]
   2edfc:	mov	sl, r2
   2ee00:	str	r3, [sp, #20]
   2ee04:	str	r1, [fp, #-52]	; 0xffffffcc
   2ee08:	str	r1, [r0, #8]
   2ee0c:	str	r3, [r0, #12]
   2ee10:	str	r1, [r0, #24]
   2ee14:	ldrb	r1, [r0, #28]
   2ee18:	and	r1, r1, #144	; 0x90
   2ee1c:	strb	r1, [r0, #28]
   2ee20:	ldr	r9, [r0]
   2ee24:	ldr	r0, [r0, #4]
   2ee28:	cmp	r0, #159	; 0x9f
   2ee2c:	bls	2f9dc <__assert_fail@plt+0x1ce20>
   2ee30:	ldr	r1, [sp, #28]
   2ee34:	mov	r0, #160	; 0xa0
   2ee38:	mov	r2, #160	; 0xa0
   2ee3c:	str	r0, [r1, #8]
   2ee40:	mov	r0, r9
   2ee44:	mov	r1, #0
   2ee48:	bl	12904 <memset@plt>
   2ee4c:	mov	r0, #31
   2ee50:	str	r0, [r9, #64]	; 0x40
   2ee54:	movw	r0, #43689	; 0xaaa9
   2ee58:	movt	r0, #2730	; 0xaaa
   2ee5c:	cmp	sl, r0
   2ee60:	bhi	2efd0 <__assert_fail@plt+0x1c414>
   2ee64:	add	r0, sl, #1
   2ee68:	str	r0, [r9, #4]
   2ee6c:	str	r0, [sp, #12]
   2ee70:	lsl	r0, r0, #3
   2ee74:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2ee78:	str	r0, [r9]
   2ee7c:	mov	r0, #1
   2ee80:	mov	r4, r0
   2ee84:	lsl	r0, r0, #1
   2ee88:	cmp	r4, sl
   2ee8c:	bls	2ee80 <__assert_fail@plt+0x1c2c4>
   2ee90:	mov	r0, #12
   2ee94:	mov	r1, r4
   2ee98:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   2ee9c:	str	r0, [r9, #32]
   2eea0:	sub	r0, r4, #1
   2eea4:	str	r0, [r9, #68]	; 0x44
   2eea8:	bl	12730 <__ctype_get_mb_cur_max@plt>
   2eeac:	str	r0, [r9, #92]	; 0x5c
   2eeb0:	mov	r0, #14
   2eeb4:	bl	12a30 <nl_langinfo@plt>
   2eeb8:	ldrb	r1, [r0]
   2eebc:	orr	r1, r1, #32
   2eec0:	cmp	r1, #117	; 0x75
   2eec4:	bne	2ef10 <__assert_fail@plt+0x1c354>
   2eec8:	ldrb	r1, [r0, #1]
   2eecc:	orr	r1, r1, #32
   2eed0:	cmp	r1, #116	; 0x74
   2eed4:	bne	2ef10 <__assert_fail@plt+0x1c354>
   2eed8:	ldrb	r1, [r0, #2]
   2eedc:	orr	r1, r1, #32
   2eee0:	cmp	r1, #102	; 0x66
   2eee4:	bne	2ef10 <__assert_fail@plt+0x1c354>
   2eee8:	ldrb	r1, [r0, #3]!
   2eeec:	cmp	r1, #45	; 0x2d
   2eef0:	movw	r1, #14676	; 0x3954
   2eef4:	addeq	r0, r0, #1
   2eef8:	movt	r1, #4
   2eefc:	bl	124cc <strcmp@plt>
   2ef00:	cmp	r0, #0
   2ef04:	ldrbeq	r0, [r9, #88]	; 0x58
   2ef08:	orreq	r0, r0, #4
   2ef0c:	strbeq	r0, [r9, #88]	; 0x58
   2ef10:	ldrb	r0, [r9, #88]	; 0x58
   2ef14:	and	r1, r0, #247	; 0xf7
   2ef18:	strb	r1, [r9, #88]	; 0x58
   2ef1c:	ldr	r1, [r9, #92]	; 0x5c
   2ef20:	cmp	r1, #2
   2ef24:	blt	2efbc <__assert_fail@plt+0x1c400>
   2ef28:	tst	r0, #4
   2ef2c:	bne	2efb0 <__assert_fail@plt+0x1c3f4>
   2ef30:	mov	r0, #32
   2ef34:	mov	r1, #1
   2ef38:	mov	r8, #1
   2ef3c:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   2ef40:	cmp	r0, #0
   2ef44:	str	r0, [r9, #60]	; 0x3c
   2ef48:	beq	2efd0 <__assert_fail@plt+0x1c414>
   2ef4c:	mov	r7, #0
   2ef50:	mov	r5, #0
   2ef54:	mov	r6, #0
   2ef58:	add	r4, r7, r6
   2ef5c:	mov	r0, r4
   2ef60:	bl	12940 <btowc@plt>
   2ef64:	cmn	r0, #1
   2ef68:	ldrne	r1, [r9, #60]	; 0x3c
   2ef6c:	ldrne	r2, [r1, r5, lsl #2]
   2ef70:	orrne	r2, r2, r8, lsl r6
   2ef74:	strne	r2, [r1, r5, lsl #2]
   2ef78:	cmp	r4, #127	; 0x7f
   2ef7c:	bhi	2ef90 <__assert_fail@plt+0x1c3d4>
   2ef80:	cmp	r4, r0
   2ef84:	ldrbne	r0, [r9, #88]	; 0x58
   2ef88:	orrne	r0, r0, #8
   2ef8c:	strbne	r0, [r9, #88]	; 0x58
   2ef90:	add	r6, r6, #1
   2ef94:	cmp	r6, #32
   2ef98:	bne	2ef58 <__assert_fail@plt+0x1c39c>
   2ef9c:	add	r5, r5, #1
   2efa0:	add	r7, r7, #32
   2efa4:	cmp	r5, #8
   2efa8:	bne	2ef54 <__assert_fail@plt+0x1c398>
   2efac:	b	2efbc <__assert_fail@plt+0x1c400>
   2efb0:	movw	r0, #14628	; 0x3924
   2efb4:	movt	r0, #4
   2efb8:	str	r0, [r9, #60]	; 0x3c
   2efbc:	ldr	r0, [r9]
   2efc0:	cmp	r0, #0
   2efc4:	ldrne	r0, [r9, #32]
   2efc8:	cmpne	r0, #0
   2efcc:	bne	2eff4 <__assert_fail@plt+0x1c438>
   2efd0:	mov	r4, #12
   2efd4:	mov	r0, r9
   2efd8:	str	r4, [fp, #-52]	; 0xffffffcc
   2efdc:	bl	30084 <__assert_fail@plt+0x1d4c8>
   2efe0:	ldr	r0, [sp, #28]
   2efe4:	mov	r1, #0
   2efe8:	str	r1, [r0]
   2efec:	str	r1, [r0, #4]
   2eff0:	b	2f964 <__assert_fail@plt+0x1cda8>
   2eff4:	movw	r0, #9624	; 0x2598
   2eff8:	movw	r1, #10548	; 0x2934
   2effc:	mov	r4, #0
   2f000:	movt	r0, #1
   2f004:	movt	r1, #1
   2f008:	str	r4, [fp, #-52]	; 0xffffffcc
   2f00c:	orrs	r0, r1, r0
   2f010:	str	r0, [sp, #8]
   2f014:	beq	2f02c <__assert_fail@plt+0x1c470>
   2f018:	add	r0, r9, #136	; 0x88
   2f01c:	mov	r1, #0
   2f020:	bl	125ec <pthread_mutex_init@plt>
   2f024:	cmp	r0, #0
   2f028:	bne	2efd0 <__assert_fail@plt+0x1c414>
   2f02c:	ldr	r0, [sp, #28]
   2f030:	add	r5, sp, #32
   2f034:	mov	r1, #0
   2f038:	mov	r2, #76	; 0x4c
   2f03c:	ldr	r8, [r0, #20]
   2f040:	add	r0, r5, #4
   2f044:	bl	12904 <memset@plt>
   2f048:	ldr	r0, [sp, #24]
   2f04c:	ldr	r1, [sp, #20]
   2f050:	add	r3, r5, #44	; 0x2c
   2f054:	vdup.32	q8, sl
   2f058:	str	r0, [sp, #32]
   2f05c:	str	r8, [sp, #96]	; 0x60
   2f060:	ubfx	r0, r1, #22, #1
   2f064:	strb	r0, [sp, #104]	; 0x68
   2f068:	and	r0, r1, #4194304	; 0x400000
   2f06c:	orrs	r1, r0, r8
   2f070:	str	r0, [sp, #16]
   2f074:	movwne	r1, #1
   2f078:	cmp	sl, #1
   2f07c:	strb	r1, [sp, #107]	; 0x6b
   2f080:	ldr	r0, [r9, #92]	; 0x5c
   2f084:	str	r0, [sp, #112]	; 0x70
   2f088:	ldrb	r2, [r9, #88]	; 0x58
   2f08c:	vst1.32	{d16-d17}, [r3]
   2f090:	ubfx	r3, r2, #3, #1
   2f094:	strb	r3, [sp, #106]	; 0x6a
   2f098:	ubfx	r2, r2, #2, #1
   2f09c:	strb	r2, [sp, #105]	; 0x69
   2f0a0:	blt	2f0c4 <__assert_fail@plt+0x1c508>
   2f0a4:	ldr	r1, [sp, #12]
   2f0a8:	add	r0, sp, #32
   2f0ac:	bl	322f8 <__assert_fail@plt+0x1f73c>
   2f0b0:	cmp	r0, #0
   2f0b4:	bne	2f134 <__assert_fail@plt+0x1c578>
   2f0b8:	ldr	r0, [r9, #92]	; 0x5c
   2f0bc:	ldr	r4, [sp, #36]	; 0x24
   2f0c0:	ldrb	r1, [sp, #107]	; 0x6b
   2f0c4:	cmp	r1, #0
   2f0c8:	ldr	r1, [sp, #24]
   2f0cc:	moveq	r4, r1
   2f0d0:	ldr	r1, [sp, #16]
   2f0d4:	str	r4, [sp, #36]	; 0x24
   2f0d8:	cmp	r1, #0
   2f0dc:	beq	2f13c <__assert_fail@plt+0x1c580>
   2f0e0:	cmp	r0, #2
   2f0e4:	blt	2f150 <__assert_fail@plt+0x1c594>
   2f0e8:	add	r4, sp, #32
   2f0ec:	mov	r0, r4
   2f0f0:	bl	32398 <__assert_fail@plt+0x1f7dc>
   2f0f4:	cmp	r0, #0
   2f0f8:	bne	2f134 <__assert_fail@plt+0x1c578>
   2f0fc:	ldr	r0, [sp, #64]	; 0x40
   2f100:	cmp	r0, sl
   2f104:	bge	2f1e4 <__assert_fail@plt+0x1c628>
   2f108:	ldr	r1, [r9, #92]	; 0x5c
   2f10c:	ldr	r2, [sp, #60]	; 0x3c
   2f110:	ldr	r0, [sp, #68]	; 0x44
   2f114:	add	r1, r1, r2
   2f118:	cmp	r0, r1
   2f11c:	bgt	2f1e4 <__assert_fail@plt+0x1c628>
   2f120:	lsl	r1, r0, #1
   2f124:	mov	r0, r4
   2f128:	bl	322f8 <__assert_fail@plt+0x1f73c>
   2f12c:	cmp	r0, #0
   2f130:	beq	2f0ec <__assert_fail@plt+0x1c530>
   2f134:	ldr	sl, [sp, #28]
   2f138:	b	2f338 <__assert_fail@plt+0x1c77c>
   2f13c:	cmp	r0, #2
   2f140:	blt	2f15c <__assert_fail@plt+0x1c5a0>
   2f144:	add	r0, sp, #32
   2f148:	bl	32974 <__assert_fail@plt+0x1fdb8>
   2f14c:	b	2f1e4 <__assert_fail@plt+0x1c628>
   2f150:	add	r0, sp, #32
   2f154:	bl	32908 <__assert_fail@plt+0x1fd4c>
   2f158:	b	2f1e4 <__assert_fail@plt+0x1c628>
   2f15c:	ldr	r0, [sp, #68]	; 0x44
   2f160:	cmp	r8, #0
   2f164:	beq	2f1dc <__assert_fail@plt+0x1c620>
   2f168:	ldr	r2, [sp, #80]	; 0x50
   2f16c:	ldr	r1, [sp, #60]	; 0x3c
   2f170:	cmp	r0, r2
   2f174:	movgt	r0, r2
   2f178:	cmp	r1, r0
   2f17c:	bge	2f1d0 <__assert_fail@plt+0x1c614>
   2f180:	ldr	r3, [sp, #56]	; 0x38
   2f184:	ldr	r2, [sp, #32]
   2f188:	ldr	r7, [sp, #96]	; 0x60
   2f18c:	add	r3, r3, r1
   2f190:	ldrb	r2, [r2, r3]
   2f194:	ldrb	r2, [r7, r2]
   2f198:	strb	r2, [r4, r1]
   2f19c:	b	2f1c0 <__assert_fail@plt+0x1c604>
   2f1a0:	ldr	r2, [sp, #32]
   2f1a4:	ldr	r7, [sp, #56]	; 0x38
   2f1a8:	ldr	r6, [sp, #96]	; 0x60
   2f1ac:	ldr	r3, [sp, #36]	; 0x24
   2f1b0:	add	r2, r2, r7
   2f1b4:	ldrb	r2, [r2, r1]
   2f1b8:	ldrb	r2, [r6, r2]
   2f1bc:	strb	r2, [r3, r1]
   2f1c0:	add	r1, r1, #1
   2f1c4:	cmp	r1, r0
   2f1c8:	blt	2f1a0 <__assert_fail@plt+0x1c5e4>
   2f1cc:	mov	r1, r0
   2f1d0:	str	r1, [sp, #64]	; 0x40
   2f1d4:	str	r1, [sp, #60]	; 0x3c
   2f1d8:	b	2f1e4 <__assert_fail@plt+0x1c628>
   2f1dc:	str	r0, [sp, #64]	; 0x40
   2f1e0:	str	r0, [sp, #60]	; 0x3c
   2f1e4:	ldr	sl, [sp, #28]
   2f1e8:	mov	r5, #0
   2f1ec:	ldr	r6, [sp, #20]
   2f1f0:	sub	r8, fp, #48	; 0x30
   2f1f4:	add	r7, sp, #32
   2f1f8:	str	r5, [fp, #-52]	; 0xffffffcc
   2f1fc:	mov	r0, r8
   2f200:	mov	r1, r7
   2f204:	str	r5, [sl, #24]
   2f208:	orr	r2, r6, #8388608	; 0x800000
   2f20c:	ldr	r4, [sl]
   2f210:	str	r6, [r4, #128]	; 0x80
   2f214:	bl	32d60 <__assert_fail@plt+0x201a4>
   2f218:	ldr	r1, [sp, #72]	; 0x48
   2f21c:	mov	r2, r8
   2f220:	mov	r3, r6
   2f224:	str	r5, [sp]
   2f228:	add	r0, r1, r0
   2f22c:	mov	r1, sl
   2f230:	str	r0, [sp, #72]	; 0x48
   2f234:	sub	r0, fp, #52	; 0x34
   2f238:	str	r0, [sp, #4]
   2f23c:	mov	r0, r7
   2f240:	bl	32bb0 <__assert_fail@plt+0x1fff4>
   2f244:	mov	r6, r0
   2f248:	cmp	r0, #0
   2f24c:	bne	2f25c <__assert_fail@plt+0x1c6a0>
   2f250:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2f254:	cmp	r0, #0
   2f258:	bne	2fa10 <__assert_fail@plt+0x1ce54>
   2f25c:	mov	r0, #2
   2f260:	sub	r3, fp, #40	; 0x28
   2f264:	mov	r1, #0
   2f268:	mov	r2, #0
   2f26c:	str	r0, [fp, #-36]	; 0xffffffdc
   2f270:	mov	r0, r4
   2f274:	str	r5, [fp, #-40]	; 0xffffffd8
   2f278:	bl	34b94 <__assert_fail@plt+0x21fd8>
   2f27c:	mov	r7, r0
   2f280:	cmp	r6, #0
   2f284:	beq	2f2b0 <__assert_fail@plt+0x1c6f4>
   2f288:	mov	r0, #16
   2f28c:	sub	r3, fp, #40	; 0x28
   2f290:	mov	r1, r6
   2f294:	mov	r2, r7
   2f298:	str	r0, [fp, #-36]	; 0xffffffdc
   2f29c:	mov	r0, #0
   2f2a0:	str	r0, [fp, #-40]	; 0xffffffd8
   2f2a4:	mov	r0, r4
   2f2a8:	bl	34b94 <__assert_fail@plt+0x21fd8>
   2f2ac:	b	2f2b4 <__assert_fail@plt+0x1c6f8>
   2f2b0:	mov	r0, r7
   2f2b4:	cmp	r7, #0
   2f2b8:	cmpne	r0, #0
   2f2bc:	beq	2fa08 <__assert_fail@plt+0x1ce4c>
   2f2c0:	str	r0, [r9, #52]	; 0x34
   2f2c4:	ldr	r8, [sl]
   2f2c8:	ldr	r0, [r8, #4]
   2f2cc:	lsl	r0, r0, #2
   2f2d0:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2f2d4:	str	r0, [r8, #12]
   2f2d8:	ldr	r0, [r8, #4]
   2f2dc:	lsl	r0, r0, #2
   2f2e0:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2f2e4:	str	r0, [r8, #16]
   2f2e8:	ldr	r0, [r8, #4]
   2f2ec:	add	r0, r0, r0, lsl #1
   2f2f0:	lsl	r0, r0, #2
   2f2f4:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2f2f8:	str	r0, [r8, #20]
   2f2fc:	ldr	r0, [r8, #4]
   2f300:	add	r0, r0, r0, lsl #1
   2f304:	lsl	r0, r0, #2
   2f308:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2f30c:	str	r0, [r8, #24]
   2f310:	ldr	r1, [r8, #12]
   2f314:	cmp	r1, #0
   2f318:	ldrne	r1, [r8, #16]
   2f31c:	cmpne	r1, #0
   2f320:	beq	2f334 <__assert_fail@plt+0x1c778>
   2f324:	cmp	r0, #0
   2f328:	ldrne	r0, [r8, #20]
   2f32c:	cmpne	r0, #0
   2f330:	bne	2f37c <__assert_fail@plt+0x1c7c0>
   2f334:	mov	r0, #12
   2f338:	str	r0, [fp, #-52]	; 0xffffffcc
   2f33c:	mov	r0, sl
   2f340:	bl	32274 <__assert_fail@plt+0x1f6b8>
   2f344:	add	r0, sp, #32
   2f348:	bl	322c4 <__assert_fail@plt+0x1f708>
   2f34c:	ldr	r0, [sp, #8]
   2f350:	cmp	r0, #0
   2f354:	beq	2f360 <__assert_fail@plt+0x1c7a4>
   2f358:	add	r0, r9, #136	; 0x88
   2f35c:	bl	12514 <pthread_mutex_destroy@plt>
   2f360:	mov	r0, r9
   2f364:	bl	30084 <__assert_fail@plt+0x1d4c8>
   2f368:	mov	r0, #0
   2f36c:	str	r0, [sl]
   2f370:	str	r0, [sl, #4]
   2f374:	ldr	r4, [fp, #-52]	; 0xffffffcc
   2f378:	b	2f964 <__assert_fail@plt+0x1cda8>
   2f37c:	ldr	r0, [sl, #24]
   2f380:	lsl	r0, r0, #2
   2f384:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2f388:	cmp	r0, #0
   2f38c:	str	r0, [r8, #132]	; 0x84
   2f390:	beq	2f404 <__assert_fail@plt+0x1c848>
   2f394:	ldr	r1, [sl, #24]
   2f398:	cmp	r1, #0
   2f39c:	beq	2f3b4 <__assert_fail@plt+0x1c7f8>
   2f3a0:	mov	r2, #0
   2f3a4:	str	r2, [r0, r2, lsl #2]
   2f3a8:	add	r2, r2, #1
   2f3ac:	cmp	r1, r2
   2f3b0:	bne	2f3a4 <__assert_fail@plt+0x1c7e8>
   2f3b4:	mov	r4, r8
   2f3b8:	movw	r1, #23848	; 0x5d28
   2f3bc:	mov	r2, r8
   2f3c0:	ldr	r0, [r4, #52]!	; 0x34
   2f3c4:	movt	r1, #3
   2f3c8:	bl	35ca8 <__assert_fail@plt+0x230ec>
   2f3cc:	ldr	r1, [sl, #24]
   2f3d0:	cmp	r1, #0
   2f3d4:	beq	2f40c <__assert_fail@plt+0x1c850>
   2f3d8:	ldr	r0, [r8, #132]	; 0x84
   2f3dc:	mov	r2, #0
   2f3e0:	ldr	r3, [r0, r2, lsl #2]
   2f3e4:	cmp	r2, r3
   2f3e8:	bne	2f3f8 <__assert_fail@plt+0x1c83c>
   2f3ec:	add	r2, r2, #1
   2f3f0:	cmp	r2, r1
   2f3f4:	bcc	2f3e0 <__assert_fail@plt+0x1c824>
   2f3f8:	cmp	r2, r1
   2f3fc:	beq	2f410 <__assert_fail@plt+0x1c854>
   2f400:	b	2f41c <__assert_fail@plt+0x1c860>
   2f404:	add	r4, r8, #52	; 0x34
   2f408:	b	2f41c <__assert_fail@plt+0x1c860>
   2f40c:	ldr	r0, [r8, #132]	; 0x84
   2f410:	bl	2c048 <__assert_fail@plt+0x1948c>
   2f414:	mov	r0, #0
   2f418:	str	r0, [r8, #132]	; 0x84
   2f41c:	ldr	r0, [r4]
   2f420:	movw	r1, #24000	; 0x5dc0
   2f424:	mov	r2, sl
   2f428:	movt	r1, #3
   2f42c:	bl	33608 <__assert_fail@plt+0x20a4c>
   2f430:	cmp	r0, #0
   2f434:	bne	2f338 <__assert_fail@plt+0x1c77c>
   2f438:	ldr	r0, [r8, #52]	; 0x34
   2f43c:	movw	r1, #24136	; 0x5e48
   2f440:	mov	r2, r8
   2f444:	movt	r1, #3
   2f448:	bl	33608 <__assert_fail@plt+0x20a4c>
   2f44c:	cmp	r0, #0
   2f450:	bne	2f338 <__assert_fail@plt+0x1c77c>
   2f454:	ldr	r0, [r8, #52]	; 0x34
   2f458:	movw	r1, #24276	; 0x5ed4
   2f45c:	mov	r2, r8
   2f460:	movt	r1, #3
   2f464:	bl	35ca8 <__assert_fail@plt+0x230ec>
   2f468:	ldr	r0, [r8, #52]	; 0x34
   2f46c:	movw	r1, #24372	; 0x5f34
   2f470:	mov	r2, r8
   2f474:	movt	r1, #3
   2f478:	bl	35ca8 <__assert_fail@plt+0x230ec>
   2f47c:	cmp	r0, #0
   2f480:	bne	2f338 <__assert_fail@plt+0x1c77c>
   2f484:	ldr	r0, [r8, #8]
   2f488:	cmp	r0, #0
   2f48c:	beq	2f530 <__assert_fail@plt+0x1c974>
   2f490:	mov	r5, #0
   2f494:	sub	r7, fp, #40	; 0x28
   2f498:	mov	r4, #0
   2f49c:	ldr	r0, [r8, #24]
   2f4a0:	add	r6, r4, r4, lsl #1
   2f4a4:	add	r0, r0, r6, lsl #2
   2f4a8:	ldr	r0, [r0, #4]
   2f4ac:	cmp	r0, #0
   2f4b0:	beq	2f4bc <__assert_fail@plt+0x1c900>
   2f4b4:	mov	r1, r5
   2f4b8:	b	2f4fc <__assert_fail@plt+0x1c940>
   2f4bc:	mov	r0, r7
   2f4c0:	mov	r1, r8
   2f4c4:	mov	r2, r4
   2f4c8:	mov	r3, #1
   2f4cc:	bl	363e8 <__assert_fail@plt+0x2382c>
   2f4d0:	cmp	r0, #0
   2f4d4:	bne	2f338 <__assert_fail@plt+0x1c77c>
   2f4d8:	ldr	r0, [r8, #24]
   2f4dc:	mov	r1, r5
   2f4e0:	add	r0, r0, r6, lsl #2
   2f4e4:	ldr	r0, [r0, #4]
   2f4e8:	cmp	r0, #0
   2f4ec:	bne	2f4fc <__assert_fail@plt+0x1c940>
   2f4f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f4f4:	bl	2c048 <__assert_fail@plt+0x1948c>
   2f4f8:	mov	r1, #1
   2f4fc:	ldr	r2, [r8, #8]
   2f500:	add	r0, r4, #1
   2f504:	subs	r3, r0, r2
   2f508:	mov	r4, r3
   2f50c:	movwne	r3, #1
   2f510:	movne	r4, r0
   2f514:	tst	r1, #1
   2f518:	and	r5, r1, r3
   2f51c:	cmpeq	r0, r2
   2f520:	bne	2f49c <__assert_fail@plt+0x1c8e0>
   2f524:	add	r0, r0, r0, lsl #1
   2f528:	lsl	r0, r0, #2
   2f52c:	b	2f534 <__assert_fail@plt+0x1c978>
   2f530:	mov	r0, #0
   2f534:	ldrb	r1, [sl, #28]
   2f538:	tst	r1, #16
   2f53c:	bne	2f554 <__assert_fail@plt+0x1c998>
   2f540:	ldr	r1, [sl, #24]
   2f544:	cmp	r1, #0
   2f548:	ldrbne	r1, [r8, #88]	; 0x58
   2f54c:	tstne	r1, #1
   2f550:	bne	2f560 <__assert_fail@plt+0x1c9a4>
   2f554:	ldr	r1, [r8, #76]	; 0x4c
   2f558:	cmp	r1, #0
   2f55c:	beq	2f638 <__assert_fail@plt+0x1ca7c>
   2f560:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2f564:	cmp	r0, #0
   2f568:	str	r0, [r8, #28]
   2f56c:	beq	2f334 <__assert_fail@plt+0x1c778>
   2f570:	ldr	r1, [r8, #8]
   2f574:	cmp	r1, #0
   2f578:	beq	2f638 <__assert_fail@plt+0x1ca7c>
   2f57c:	mov	r1, #0
   2f580:	str	r1, [r0]
   2f584:	str	r1, [r0, #4]
   2f588:	str	r1, [r0, #8]
   2f58c:	ldr	r0, [r8, #8]
   2f590:	cmp	r0, #2
   2f594:	bcc	2f5c4 <__assert_fail@plt+0x1ca08>
   2f598:	mov	r2, #1
   2f59c:	mov	r3, #12
   2f5a0:	ldr	r0, [r8, #28]
   2f5a4:	add	r2, r2, #1
   2f5a8:	str	r1, [r0, r3]!
   2f5ac:	add	r3, r3, #12
   2f5b0:	str	r1, [r0, #4]
   2f5b4:	str	r1, [r0, #8]
   2f5b8:	ldr	r0, [r8, #8]
   2f5bc:	cmp	r2, r0
   2f5c0:	bcc	2f5a0 <__assert_fail@plt+0x1c9e4>
   2f5c4:	cmp	r0, #0
   2f5c8:	beq	2f638 <__assert_fail@plt+0x1ca7c>
   2f5cc:	ldr	r1, [r8, #24]
   2f5d0:	mov	r4, #0
   2f5d4:	add	r5, r4, r4, lsl #1
   2f5d8:	add	r2, r1, r5, lsl #2
   2f5dc:	ldr	r3, [r2, #4]
   2f5e0:	cmp	r3, #1
   2f5e4:	blt	2f62c <__assert_fail@plt+0x1ca70>
   2f5e8:	ldr	r7, [r2, #8]
   2f5ec:	mov	r6, #0
   2f5f0:	ldr	r0, [r7, r6, lsl #2]
   2f5f4:	ldr	r1, [r8, #28]
   2f5f8:	add	r0, r0, r0, lsl #1
   2f5fc:	add	r0, r1, r0, lsl #2
   2f600:	mov	r1, r4
   2f604:	bl	36c28 <__assert_fail@plt+0x2406c>
   2f608:	cmp	r0, #0
   2f60c:	beq	2f334 <__assert_fail@plt+0x1c778>
   2f610:	ldr	r1, [r8, #24]
   2f614:	add	r6, r6, #1
   2f618:	add	r0, r1, r5, lsl #2
   2f61c:	ldr	r0, [r0, #4]
   2f620:	cmp	r6, r0
   2f624:	blt	2f5f0 <__assert_fail@plt+0x1ca34>
   2f628:	ldr	r0, [r8, #8]
   2f62c:	add	r4, r4, #1
   2f630:	cmp	r4, r0
   2f634:	bcc	2f5d4 <__assert_fail@plt+0x1ca18>
   2f638:	mov	r0, #0
   2f63c:	str	r0, [fp, #-52]	; 0xffffffcc
   2f640:	ldr	r0, [sp, #16]
   2f644:	cmp	r0, #0
   2f648:	bne	2f77c <__assert_fail@plt+0x1cbc0>
   2f64c:	ldrb	r2, [r9, #88]	; 0x58
   2f650:	ands	r0, r2, #4
   2f654:	beq	2f77c <__assert_fail@plt+0x1cbc0>
   2f658:	ldr	r0, [sp, #28]
   2f65c:	ldr	r0, [r0, #20]
   2f660:	cmp	r0, #0
   2f664:	bne	2f77c <__assert_fail@plt+0x1cbc0>
   2f668:	ldr	r7, [r9, #8]
   2f66c:	mov	sl, #0
   2f670:	cmp	r7, #0
   2f674:	beq	2f750 <__assert_fail@plt+0x1cb94>
   2f678:	ldr	r3, [r9]
   2f67c:	mov	r8, #0
   2f680:	mov	ip, #1
   2f684:	mov	lr, #139	; 0x8b
   2f688:	mov	r6, #0
   2f68c:	mov	r4, #0
   2f690:	add	r1, r3, r4, lsl #3
   2f694:	ldrb	r5, [r1, #4]
   2f698:	sub	r5, r5, #1
   2f69c:	cmp	r5, #11
   2f6a0:	bhi	2fa2c <__assert_fail@plt+0x1ce70>
   2f6a4:	add	r0, pc, #0
   2f6a8:	ldr	pc, [r0, r5, lsl #2]
   2f6ac:	andeq	pc, r2, r0, lsr r7	; <UNPREDICTABLE>
   2f6b0:	ldrdeq	pc, [r2], -ip
   2f6b4:	andeq	pc, r2, ip, ror #13
   2f6b8:	ldrdeq	pc, [r2], -ip
   2f6bc:	andeq	pc, r2, r8, asr #14
   2f6c0:	andeq	pc, r2, ip, ror r7	; <UNPREDICTABLE>
   2f6c4:	andeq	pc, r2, ip, lsr #20
   2f6c8:	ldrdeq	pc, [r2], -ip
   2f6cc:	ldrdeq	pc, [r2], -ip
   2f6d0:	ldrdeq	pc, [r2], -ip
   2f6d4:	ldrdeq	pc, [r2], -ip
   2f6d8:	andeq	pc, r2, r0, lsl r7	; <UNPREDICTABLE>
   2f6dc:	add	r4, r4, #1
   2f6e0:	cmp	r4, r7
   2f6e4:	bcc	2f690 <__assert_fail@plt+0x1cad4>
   2f6e8:	b	2f970 <__assert_fail@plt+0x1cdb4>
   2f6ec:	ldr	r5, [r3, r4, lsl #3]
   2f6f0:	mov	r1, #4
   2f6f4:	ldr	r0, [r5, r1, lsl #2]
   2f6f8:	cmp	r0, #0
   2f6fc:	bne	2f77c <__assert_fail@plt+0x1cbc0>
   2f700:	add	r1, r1, #1
   2f704:	cmp	r1, #7
   2f708:	bls	2f6f4 <__assert_fail@plt+0x1cb38>
   2f70c:	b	2f6dc <__assert_fail@plt+0x1cb20>
   2f710:	ldr	r0, [r3, r4, lsl #3]
   2f714:	sub	r0, r0, #16
   2f718:	ror	r1, r0, #4
   2f71c:	cmp	r1, #7
   2f720:	bhi	2f77c <__assert_fail@plt+0x1cbc0>
   2f724:	tst	lr, ip, lsl r1
   2f728:	bne	2f6dc <__assert_fail@plt+0x1cb20>
   2f72c:	b	2f77c <__assert_fail@plt+0x1cbc0>
   2f730:	ldrsb	r0, [r1]
   2f734:	cmp	r0, #0
   2f738:	mov	r0, #0
   2f73c:	movwlt	r0, #1
   2f740:	orr	r6, r6, r0
   2f744:	b	2f6dc <__assert_fail@plt+0x1cb20>
   2f748:	mov	r8, #1
   2f74c:	b	2f6dc <__assert_fail@plt+0x1cb20>
   2f750:	mov	r8, #0
   2f754:	mov	r0, #1
   2f758:	and	r1, r2, #249	; 0xf9
   2f75c:	str	r0, [r9, #92]	; 0x5c
   2f760:	ldr	r0, [r9, #76]	; 0x4c
   2f764:	cmp	r0, #0
   2f768:	movwgt	sl, #1
   2f76c:	orr	r0, r8, sl
   2f770:	and	r0, r0, #1
   2f774:	orr	r0, r1, r0, lsl #1
   2f778:	strb	r0, [r9, #88]	; 0x58
   2f77c:	ldr	r1, [r9, #52]	; 0x34
   2f780:	ldr	r0, [r9, #24]
   2f784:	ldr	r1, [r1, #12]
   2f788:	ldr	r1, [r1, #28]
   2f78c:	str	r1, [r9, #72]	; 0x48
   2f790:	add	r1, r1, r1, lsl #1
   2f794:	add	r1, r0, r1, lsl #2
   2f798:	sub	r0, fp, #40	; 0x28
   2f79c:	bl	36c90 <__assert_fail@plt+0x240d4>
   2f7a0:	cmp	r0, #0
   2f7a4:	str	r0, [fp, #-48]	; 0xffffffd0
   2f7a8:	bne	2fa24 <__assert_fail@plt+0x1ce68>
   2f7ac:	ldr	r0, [r9, #76]	; 0x4c
   2f7b0:	ldr	sl, [sp, #28]
   2f7b4:	cmp	r0, #1
   2f7b8:	ldrge	r7, [fp, #-36]	; 0xffffffdc
   2f7bc:	cmpge	r7, #1
   2f7c0:	blt	2f884 <__assert_fail@plt+0x1ccc8>
   2f7c4:	mov	r6, #0
   2f7c8:	sub	r8, fp, #40	; 0x28
   2f7cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2f7d0:	ldr	r2, [r9]
   2f7d4:	ldr	r0, [r1, r6, lsl #2]
   2f7d8:	add	r3, r2, r0, lsl #3
   2f7dc:	ldrb	r3, [r3, #4]
   2f7e0:	cmp	r3, #4
   2f7e4:	bne	2f878 <__assert_fail@plt+0x1ccbc>
   2f7e8:	mov	r3, #0
   2f7ec:	cmp	r7, #1
   2f7f0:	blt	2f824 <__assert_fail@plt+0x1cc68>
   2f7f4:	ldr	r5, [r1, r3, lsl #2]
   2f7f8:	add	r4, r2, r5, lsl #3
   2f7fc:	ldrb	r4, [r4, #4]
   2f800:	cmp	r4, #9
   2f804:	bne	2f818 <__assert_fail@plt+0x1cc5c>
   2f808:	ldr	r4, [r2, r0, lsl #3]
   2f80c:	ldr	r5, [r2, r5, lsl #3]
   2f810:	cmp	r5, r4
   2f814:	beq	2f824 <__assert_fail@plt+0x1cc68>
   2f818:	add	r3, r3, #1
   2f81c:	cmp	r3, r7
   2f820:	blt	2f7f4 <__assert_fail@plt+0x1cc38>
   2f824:	cmp	r3, r7
   2f828:	beq	2f878 <__assert_fail@plt+0x1ccbc>
   2f82c:	ldr	r1, [r9, #20]
   2f830:	add	r0, r0, r0, lsl #1
   2f834:	add	r0, r1, r0, lsl #2
   2f838:	ldr	r0, [r0, #8]
   2f83c:	ldr	r4, [r0]
   2f840:	mov	r0, r8
   2f844:	mov	r1, r4
   2f848:	bl	36d0c <__assert_fail@plt+0x24150>
   2f84c:	cmp	r0, #0
   2f850:	bne	2f878 <__assert_fail@plt+0x1ccbc>
   2f854:	ldr	r0, [r9, #24]
   2f858:	add	r1, r4, r4, lsl #1
   2f85c:	add	r1, r0, r1, lsl #2
   2f860:	mov	r0, r8
   2f864:	bl	368e0 <__assert_fail@plt+0x23d24>
   2f868:	cmp	r0, #0
   2f86c:	bne	2f940 <__assert_fail@plt+0x1cd84>
   2f870:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2f874:	mov	r6, #0
   2f878:	add	r6, r6, #1
   2f87c:	cmp	r6, r7
   2f880:	blt	2f7cc <__assert_fail@plt+0x1cc10>
   2f884:	sub	r0, fp, #48	; 0x30
   2f888:	sub	r2, fp, #40	; 0x28
   2f88c:	mov	r1, r9
   2f890:	mov	r3, #0
   2f894:	bl	36d70 <__assert_fail@plt+0x241b4>
   2f898:	cmp	r0, #0
   2f89c:	str	r0, [r9, #36]	; 0x24
   2f8a0:	beq	2f920 <__assert_fail@plt+0x1cd64>
   2f8a4:	ldrsb	r1, [r0, #52]	; 0x34
   2f8a8:	cmn	r1, #1
   2f8ac:	ble	2f8c0 <__assert_fail@plt+0x1cd04>
   2f8b0:	str	r0, [r9, #40]	; 0x28
   2f8b4:	str	r0, [r9, #44]	; 0x2c
   2f8b8:	str	r0, [r9, #48]	; 0x30
   2f8bc:	b	2f934 <__assert_fail@plt+0x1cd78>
   2f8c0:	sub	r4, fp, #48	; 0x30
   2f8c4:	sub	r6, fp, #40	; 0x28
   2f8c8:	mov	r1, r9
   2f8cc:	mov	r3, #1
   2f8d0:	mov	r0, r4
   2f8d4:	mov	r2, r6
   2f8d8:	bl	36d70 <__assert_fail@plt+0x241b4>
   2f8dc:	str	r0, [r9, #40]	; 0x28
   2f8e0:	mov	r0, r4
   2f8e4:	mov	r1, r9
   2f8e8:	mov	r2, r6
   2f8ec:	mov	r3, #2
   2f8f0:	bl	36d70 <__assert_fail@plt+0x241b4>
   2f8f4:	str	r0, [r9, #44]	; 0x2c
   2f8f8:	mov	r0, r4
   2f8fc:	mov	r1, r9
   2f900:	mov	r2, r6
   2f904:	mov	r3, #6
   2f908:	bl	36d70 <__assert_fail@plt+0x241b4>
   2f90c:	str	r0, [r9, #48]	; 0x30
   2f910:	ldr	r1, [r9, #40]	; 0x28
   2f914:	cmp	r1, #0
   2f918:	cmpne	r0, #0
   2f91c:	bne	2f928 <__assert_fail@plt+0x1cd6c>
   2f920:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2f924:	b	2f940 <__assert_fail@plt+0x1cd84>
   2f928:	ldr	r0, [r9, #44]	; 0x2c
   2f92c:	cmp	r0, #0
   2f930:	beq	2f920 <__assert_fail@plt+0x1cd64>
   2f934:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2f938:	bl	2c048 <__assert_fail@plt+0x1948c>
   2f93c:	mov	r0, #0
   2f940:	str	r0, [fp, #-52]	; 0xffffffcc
   2f944:	mov	r0, sl
   2f948:	bl	32274 <__assert_fail@plt+0x1f6b8>
   2f94c:	add	r0, sp, #32
   2f950:	bl	322c4 <__assert_fail@plt+0x1f708>
   2f954:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2f958:	mov	r4, #0
   2f95c:	cmp	r0, #0
   2f960:	bne	2f34c <__assert_fail@plt+0x1c790>
   2f964:	mov	r0, r4
   2f968:	sub	sp, fp, #28
   2f96c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f970:	orr	r0, r6, r8
   2f974:	tst	r0, #1
   2f978:	beq	2f754 <__assert_fail@plt+0x1cb98>
   2f97c:	mov	r2, #0
   2f980:	mov	r7, #7
   2f984:	b	2f98c <__assert_fail@plt+0x1cdd0>
   2f988:	ldr	r3, [r9]
   2f98c:	add	r3, r3, r2, lsl #3
   2f990:	ldr	r6, [r3, #4]
   2f994:	uxtb	r1, r6
   2f998:	cmp	r1, #5
   2f99c:	beq	2f9bc <__assert_fail@plt+0x1ce00>
   2f9a0:	cmp	r1, #1
   2f9a4:	bne	2f9c4 <__assert_fail@plt+0x1ce08>
   2f9a8:	ldrsb	r0, [r3]
   2f9ac:	cmn	r0, #1
   2f9b0:	bicle	r0, r6, #2097152	; 0x200000
   2f9b4:	strle	r0, [r3, #4]
   2f9b8:	b	2f9c4 <__assert_fail@plt+0x1ce08>
   2f9bc:	bfi	r6, r7, #0, #8
   2f9c0:	str	r6, [r3, #4]
   2f9c4:	ldr	r0, [r9, #8]
   2f9c8:	add	r2, r2, #1
   2f9cc:	cmp	r2, r0
   2f9d0:	bcc	2f988 <__assert_fail@plt+0x1cdcc>
   2f9d4:	ldrb	r2, [r9, #88]	; 0x58
   2f9d8:	b	2f754 <__assert_fail@plt+0x1cb98>
   2f9dc:	mov	r0, r9
   2f9e0:	mov	r1, #160	; 0xa0
   2f9e4:	mov	r4, #160	; 0xa0
   2f9e8:	bl	2ecdc <__assert_fail@plt+0x1c120>
   2f9ec:	cmp	r0, #0
   2f9f0:	beq	2fa1c <__assert_fail@plt+0x1ce60>
   2f9f4:	mov	r9, r0
   2f9f8:	ldr	r0, [sp, #28]
   2f9fc:	str	r9, [r0]
   2fa00:	str	r4, [r0, #4]
   2fa04:	b	2ee30 <__assert_fail@plt+0x1c274>
   2fa08:	mov	r0, #12
   2fa0c:	str	r0, [fp, #-52]	; 0xffffffcc
   2fa10:	mov	r0, #0
   2fa14:	str	r0, [r9, #52]	; 0x34
   2fa18:	b	2f33c <__assert_fail@plt+0x1c780>
   2fa1c:	mov	r4, #12
   2fa20:	b	2f964 <__assert_fail@plt+0x1cda8>
   2fa24:	ldr	sl, [sp, #28]
   2fa28:	b	2f940 <__assert_fail@plt+0x1cd84>
   2fa2c:	bl	12b68 <abort@plt>
   2fa30:	movw	r2, #20184	; 0x4ed8
   2fa34:	movt	r2, #5
   2fa38:	ldr	r1, [r2]
   2fa3c:	str	r0, [r2]
   2fa40:	mov	r0, r1
   2fa44:	bx	lr
   2fa48:	push	{r4, r5, r6, sl, fp, lr}
   2fa4c:	add	fp, sp, #16
   2fa50:	ldr	r5, [r0, #16]
   2fa54:	ldr	r6, [r0]
   2fa58:	mov	r4, r0
   2fa5c:	mov	r1, #0
   2fa60:	mov	r2, #256	; 0x100
   2fa64:	mov	r0, r5
   2fa68:	bl	12904 <memset@plt>
   2fa6c:	ldr	r1, [r6, #36]	; 0x24
   2fa70:	mov	r0, r4
   2fa74:	mov	r2, r5
   2fa78:	bl	2fae4 <__assert_fail@plt+0x1cf28>
   2fa7c:	ldr	r0, [r6, #36]	; 0x24
   2fa80:	ldr	r1, [r6, #40]	; 0x28
   2fa84:	cmp	r0, r1
   2fa88:	beq	2fa9c <__assert_fail@plt+0x1cee0>
   2fa8c:	mov	r0, r4
   2fa90:	mov	r2, r5
   2fa94:	bl	2fae4 <__assert_fail@plt+0x1cf28>
   2fa98:	ldr	r0, [r6, #36]	; 0x24
   2fa9c:	ldr	r1, [r6, #44]	; 0x2c
   2faa0:	cmp	r0, r1
   2faa4:	beq	2fab8 <__assert_fail@plt+0x1cefc>
   2faa8:	mov	r0, r4
   2faac:	mov	r2, r5
   2fab0:	bl	2fae4 <__assert_fail@plt+0x1cf28>
   2fab4:	ldr	r0, [r6, #36]	; 0x24
   2fab8:	ldr	r1, [r6, #48]	; 0x30
   2fabc:	cmp	r0, r1
   2fac0:	beq	2fad0 <__assert_fail@plt+0x1cf14>
   2fac4:	mov	r0, r4
   2fac8:	mov	r2, r5
   2facc:	bl	2fae4 <__assert_fail@plt+0x1cf28>
   2fad0:	ldrb	r0, [r4, #28]
   2fad4:	orr	r0, r0, #8
   2fad8:	strb	r0, [r4, #28]
   2fadc:	mov	r0, #0
   2fae0:	pop	{r4, r5, r6, sl, fp, pc}
   2fae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fae8:	add	fp, sp, #28
   2faec:	sub	sp, sp, #308	; 0x134
   2faf0:	ldr	r8, [r0]
   2faf4:	str	r0, [sp, #16]
   2faf8:	mov	sl, #0
   2fafc:	str	r2, [sp, #28]
   2fb00:	ldr	r0, [r8, #92]	; 0x5c
   2fb04:	cmp	r0, #1
   2fb08:	ldreq	r0, [sp, #16]
   2fb0c:	ldrbeq	r0, [r0, #14]
   2fb10:	ubfxeq	sl, r0, #6, #1
   2fb14:	ldr	r0, [r1, #8]
   2fb18:	cmp	r0, #1
   2fb1c:	blt	2fe90 <__assert_fail@plt+0x1d2d4>
   2fb20:	add	r0, sp, #32
   2fb24:	mov	r4, #1
   2fb28:	mov	r2, #0
   2fb2c:	str	r1, [sp, #8]
   2fb30:	str	r8, [sp, #20]
   2fb34:	add	r0, r0, #1
   2fb38:	str	r0, [sp, #4]
   2fb3c:	movw	r0, #1
   2fb40:	movt	r0, #32
   2fb44:	add	r0, r0, #254	; 0xfe
   2fb48:	str	r0, [sp]
   2fb4c:	ldr	r0, [r1, #12]
   2fb50:	str	r2, [sp, #12]
   2fb54:	ldr	r9, [r0, r2, lsl #2]
   2fb58:	ldr	r0, [r8]
   2fb5c:	add	r1, r0, r9, lsl #3
   2fb60:	ldrb	r5, [r1, #4]
   2fb64:	sub	r1, r5, #1
   2fb68:	cmp	r1, #6
   2fb6c:	bhi	2fe50 <__assert_fail@plt+0x1d294>
   2fb70:	add	r2, pc, #0
   2fb74:	ldr	pc, [r2, r1, lsl #2]
   2fb78:	muleq	r2, r4, fp
   2fb7c:	andeq	pc, r2, ip, ror #28
   2fb80:	andeq	pc, r2, r0, lsr #25
   2fb84:	andeq	pc, r2, r0, asr lr	; <UNPREDICTABLE>
   2fb88:	andeq	pc, r2, ip, ror #28
   2fb8c:	andeq	pc, r2, r8, lsl sp	; <UNPREDICTABLE>
   2fb90:	andeq	pc, r2, ip, ror #28
   2fb94:	ldrb	r0, [r0, r9, lsl #3]
   2fb98:	ldr	r1, [sp, #28]
   2fb9c:	cmp	sl, #0
   2fba0:	strb	r4, [r1, r0]
   2fba4:	beq	2fbb4 <__assert_fail@plt+0x1cff8>
   2fba8:	bl	125e0 <tolower@plt>
   2fbac:	ldr	r1, [sp, #28]
   2fbb0:	strb	r4, [r1, r0]
   2fbb4:	ldr	r0, [sp, #16]
   2fbb8:	ldrb	r0, [r0, #14]
   2fbbc:	tst	r0, #64	; 0x40
   2fbc0:	beq	2fe50 <__assert_fail@plt+0x1d294>
   2fbc4:	ldr	r0, [r8, #92]	; 0x5c
   2fbc8:	cmp	r0, #2
   2fbcc:	blt	2fe50 <__assert_fail@plt+0x1d294>
   2fbd0:	ldr	r0, [r8]
   2fbd4:	add	r1, r9, #1
   2fbd8:	add	r5, sp, #32
   2fbdc:	mov	r3, r9
   2fbe0:	movw	r6, #1
   2fbe4:	mov	r7, #0
   2fbe8:	movt	r6, #32
   2fbec:	ldrb	r0, [r0, r9, lsl #3]
   2fbf0:	mov	r9, r5
   2fbf4:	ldr	r5, [sp]
   2fbf8:	strb	r0, [sp, #32]
   2fbfc:	ldr	r0, [r8, #8]
   2fc00:	cmp	r1, r0
   2fc04:	ldr	r0, [sp, #4]
   2fc08:	bcs	2fc48 <__assert_fail@plt+0x1d08c>
   2fc0c:	ldr	r0, [sp, #4]
   2fc10:	ldr	r1, [r8]
   2fc14:	add	r1, r1, r3, lsl #3
   2fc18:	ldr	r2, [r1, #12]
   2fc1c:	and	r2, r2, r5
   2fc20:	cmp	r2, r6
   2fc24:	bne	2fc48 <__assert_fail@plt+0x1d08c>
   2fc28:	ldrb	r1, [r1, #8]
   2fc2c:	strb	r1, [r0], #1
   2fc30:	add	r1, r3, #1
   2fc34:	add	r3, r3, #2
   2fc38:	ldr	r2, [r8, #8]
   2fc3c:	cmp	r3, r2
   2fc40:	mov	r3, r1
   2fc44:	bcc	2fc10 <__assert_fail@plt+0x1d054>
   2fc48:	sub	r6, r0, r9
   2fc4c:	sub	r5, fp, #48	; 0x30
   2fc50:	sub	r0, fp, #36	; 0x24
   2fc54:	mov	r1, r9
   2fc58:	str	r7, [fp, #-44]	; 0xffffffd4
   2fc5c:	str	r7, [fp, #-48]	; 0xffffffd0
   2fc60:	mov	r2, r6
   2fc64:	mov	r3, r5
   2fc68:	bl	2e214 <__assert_fail@plt+0x1b658>
   2fc6c:	cmp	r0, r6
   2fc70:	bne	2fe50 <__assert_fail@plt+0x1d294>
   2fc74:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2fc78:	bl	125f8 <towlower@plt>
   2fc7c:	mov	r1, r0
   2fc80:	mov	r0, r9
   2fc84:	mov	r2, r5
   2fc88:	bl	12490 <wcrtomb@plt>
   2fc8c:	cmn	r0, #1
   2fc90:	ldrbne	r0, [sp, #32]
   2fc94:	ldrne	r1, [sp, #28]
   2fc98:	strbne	r4, [r1, r0]
   2fc9c:	b	2fe50 <__assert_fail@plt+0x1d294>
   2fca0:	ldr	r5, [sp, #28]
   2fca4:	mov	r7, #0
   2fca8:	mov	r6, #0
   2fcac:	str	r9, [sp, #24]
   2fcb0:	b	2fcc0 <__assert_fail@plt+0x1d104>
   2fcb4:	ldr	r0, [r8]
   2fcb8:	add	r5, r5, #32
   2fcbc:	add	r7, r7, #32
   2fcc0:	ldr	r0, [r0, r9, lsl #3]
   2fcc4:	mov	r8, #0
   2fcc8:	ldr	r9, [r0, r6, lsl #2]
   2fccc:	b	2fce4 <__assert_fail@plt+0x1d128>
   2fcd0:	add	r0, r7, r8
   2fcd4:	bl	125e0 <tolower@plt>
   2fcd8:	ldr	r1, [sp, #28]
   2fcdc:	strb	r4, [r1, r0]
   2fce0:	b	2fcf4 <__assert_fail@plt+0x1d138>
   2fce4:	tst	r9, r4, lsl r8
   2fce8:	strbne	r4, [r5, r8]
   2fcec:	cmpne	sl, #0
   2fcf0:	bne	2fcd0 <__assert_fail@plt+0x1d114>
   2fcf4:	add	r8, r8, #1
   2fcf8:	cmp	r8, #32
   2fcfc:	bne	2fce4 <__assert_fail@plt+0x1d128>
   2fd00:	ldr	r8, [sp, #20]
   2fd04:	ldr	r9, [sp, #24]
   2fd08:	add	r6, r6, #1
   2fd0c:	cmp	r6, #8
   2fd10:	bne	2fcb4 <__assert_fail@plt+0x1d0f8>
   2fd14:	b	2fe50 <__assert_fail@plt+0x1d294>
   2fd18:	ldr	r6, [r0, r9, lsl #3]
   2fd1c:	ldr	r0, [r8, #92]	; 0x5c
   2fd20:	cmp	r0, #2
   2fd24:	blt	2fd98 <__assert_fail@plt+0x1d1dc>
   2fd28:	ldr	r0, [r6, #36]	; 0x24
   2fd2c:	cmp	r0, #0
   2fd30:	bne	2fd48 <__assert_fail@plt+0x1d18c>
   2fd34:	ldrb	r0, [r6, #16]
   2fd38:	tst	r0, #1
   2fd3c:	ldreq	r0, [r6, #32]
   2fd40:	cmpeq	r0, #0
   2fd44:	beq	2fd98 <__assert_fail@plt+0x1d1dc>
   2fd48:	mov	r6, #0
   2fd4c:	add	r5, sp, #32
   2fd50:	sub	r7, fp, #48	; 0x30
   2fd54:	strb	r6, [fp, #-48]	; 0xffffffd0
   2fd58:	mov	r0, #0
   2fd5c:	mov	r1, r7
   2fd60:	mov	r2, #1
   2fd64:	mov	r3, r5
   2fd68:	str	r6, [sp, #36]	; 0x24
   2fd6c:	str	r6, [sp, #32]
   2fd70:	bl	2e214 <__assert_fail@plt+0x1b658>
   2fd74:	cmn	r0, #2
   2fd78:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   2fd7c:	ldreq	r0, [sp, #28]
   2fd80:	strbeq	r4, [r0, r1]
   2fd84:	add	r0, r1, #1
   2fd88:	tst	r0, #255	; 0xff
   2fd8c:	strb	r0, [fp, #-48]	; 0xffffffd0
   2fd90:	bne	2fd58 <__assert_fail@plt+0x1d19c>
   2fd94:	b	2fe50 <__assert_fail@plt+0x1d294>
   2fd98:	ldr	r0, [r6, #20]
   2fd9c:	cmp	r0, #1
   2fda0:	blt	2fe50 <__assert_fail@plt+0x1d294>
   2fda4:	mov	r9, #0
   2fda8:	mov	r0, #0
   2fdac:	sub	r7, fp, #48	; 0x30
   2fdb0:	add	r5, sp, #32
   2fdb4:	str	r0, [fp, #-44]	; 0xffffffd4
   2fdb8:	str	r0, [fp, #-48]	; 0xffffffd0
   2fdbc:	mov	r2, r7
   2fdc0:	ldr	r0, [r6]
   2fdc4:	ldr	r1, [r0, r9, lsl #2]
   2fdc8:	mov	r0, r5
   2fdcc:	bl	12490 <wcrtomb@plt>
   2fdd0:	cmn	r0, #1
   2fdd4:	beq	2fdf8 <__assert_fail@plt+0x1d23c>
   2fdd8:	ldrb	r0, [sp, #32]
   2fddc:	ldr	r1, [sp, #28]
   2fde0:	cmp	sl, #0
   2fde4:	strb	r4, [r1, r0]
   2fde8:	beq	2fdf8 <__assert_fail@plt+0x1d23c>
   2fdec:	bl	125e0 <tolower@plt>
   2fdf0:	ldr	r1, [sp, #28]
   2fdf4:	strb	r4, [r1, r0]
   2fdf8:	ldr	r0, [sp, #16]
   2fdfc:	ldrb	r0, [r0, #14]
   2fe00:	tst	r0, #64	; 0x40
   2fe04:	beq	2fe40 <__assert_fail@plt+0x1d284>
   2fe08:	ldr	r0, [r8, #92]	; 0x5c
   2fe0c:	cmp	r0, #2
   2fe10:	blt	2fe40 <__assert_fail@plt+0x1d284>
   2fe14:	ldr	r0, [r6]
   2fe18:	ldr	r0, [r0, r9, lsl #2]
   2fe1c:	bl	125f8 <towlower@plt>
   2fe20:	mov	r1, r0
   2fe24:	mov	r0, r5
   2fe28:	mov	r2, r7
   2fe2c:	bl	12490 <wcrtomb@plt>
   2fe30:	cmn	r0, #1
   2fe34:	ldrbne	r0, [sp, #32]
   2fe38:	ldrne	r1, [sp, #28]
   2fe3c:	strbne	r4, [r1, r0]
   2fe40:	ldr	r0, [r6, #20]
   2fe44:	add	r9, r9, #1
   2fe48:	cmp	r9, r0
   2fe4c:	blt	2fda8 <__assert_fail@plt+0x1d1ec>
   2fe50:	ldr	r1, [sp, #8]
   2fe54:	ldr	r2, [sp, #12]
   2fe58:	ldr	r0, [r1, #8]
   2fe5c:	add	r2, r2, #1
   2fe60:	cmp	r2, r0
   2fe64:	blt	2fb4c <__assert_fail@plt+0x1cf90>
   2fe68:	b	2fe90 <__assert_fail@plt+0x1d2d4>
   2fe6c:	ldr	r0, [sp, #28]
   2fe70:	mov	r1, #1
   2fe74:	mov	r2, #256	; 0x100
   2fe78:	bl	12904 <memset@plt>
   2fe7c:	cmp	r5, #2
   2fe80:	ldreq	r1, [sp, #16]
   2fe84:	ldrbeq	r0, [r1, #28]
   2fe88:	orreq	r0, r0, #1
   2fe8c:	strbeq	r0, [r1, #28]
   2fe90:	sub	sp, fp, #28
   2fe94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fe98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2fe9c:	add	fp, sp, #24
   2fea0:	mov	r4, r0
   2fea4:	mov	r0, #0
   2fea8:	mov	r6, r2
   2feac:	mov	r8, r1
   2feb0:	str	r0, [r4]
   2feb4:	str	r0, [r4, #4]
   2feb8:	str	r0, [r4, #8]
   2febc:	mov	r0, #256	; 0x100
   2fec0:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   2fec4:	cmp	r0, #0
   2fec8:	str	r0, [r4, #16]
   2fecc:	beq	2ff7c <__assert_fail@plt+0x1d3c0>
   2fed0:	movw	r0, #45820	; 0xb2fc
   2fed4:	tst	r6, #1
   2fed8:	and	r1, r6, #2
   2fedc:	movt	r0, #3
   2fee0:	movweq	r0, #710	; 0x2c6
   2fee4:	movteq	r0, #257	; 0x101
   2fee8:	tst	r6, #4
   2feec:	orr	r5, r0, r1, lsl #21
   2fef0:	bne	2ff04 <__assert_fail@plt+0x1d348>
   2fef4:	ldrb	r0, [r4, #28]
   2fef8:	and	r0, r0, #127	; 0x7f
   2fefc:	strb	r0, [r4, #28]
   2ff00:	b	2ff24 <__assert_fail@plt+0x1d368>
   2ff04:	ldrb	r0, [r4, #28]
   2ff08:	mvn	r1, #127	; 0x7f
   2ff0c:	orr	r0, r0, r1
   2ff10:	movw	r1, #45758	; 0xb2be
   2ff14:	movt	r1, #323	; 0x143
   2ff18:	strb	r0, [r4, #28]
   2ff1c:	and	r1, r5, r1
   2ff20:	orr	r5, r1, #256	; 0x100
   2ff24:	and	r1, r6, #8
   2ff28:	and	r0, r0, #239	; 0xef
   2ff2c:	mov	r7, #0
   2ff30:	orr	r0, r0, r1, lsl #1
   2ff34:	str	r7, [r4, #20]
   2ff38:	strb	r0, [r4, #28]
   2ff3c:	mov	r0, r8
   2ff40:	bl	1288c <strlen@plt>
   2ff44:	mov	r2, r0
   2ff48:	mov	r0, r4
   2ff4c:	mov	r1, r8
   2ff50:	mov	r3, r5
   2ff54:	bl	2ede4 <__assert_fail@plt+0x1c228>
   2ff58:	mov	r5, r0
   2ff5c:	cmp	r0, #16
   2ff60:	movweq	r5, #8
   2ff64:	cmp	r5, #0
   2ff68:	bne	2ff84 <__assert_fail@plt+0x1d3c8>
   2ff6c:	mov	r0, r4
   2ff70:	bl	2fa48 <__assert_fail@plt+0x1ce8c>
   2ff74:	mov	r0, r7
   2ff78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ff7c:	mov	r7, #12
   2ff80:	b	2ff74 <__assert_fail@plt+0x1d3b8>
   2ff84:	ldr	r0, [r4, #16]
   2ff88:	bl	2c048 <__assert_fail@plt+0x1948c>
   2ff8c:	str	r7, [r4, #16]
   2ff90:	mov	r7, r5
   2ff94:	b	2ff74 <__assert_fail@plt+0x1d3b8>
   2ff98:	push	{r4, r5, r6, r7, fp, lr}
   2ff9c:	add	fp, sp, #16
   2ffa0:	cmp	r0, #17
   2ffa4:	bcs	30018 <__assert_fail@plt+0x1d45c>
   2ffa8:	movw	r1, #14560	; 0x38e0
   2ffac:	mov	r4, r2
   2ffb0:	mov	r2, #5
   2ffb4:	mov	r5, r3
   2ffb8:	movt	r1, #4
   2ffbc:	ldr	r0, [r1, r0, lsl #2]
   2ffc0:	movw	r1, #14176	; 0x3760
   2ffc4:	movt	r1, #4
   2ffc8:	add	r1, r1, r0
   2ffcc:	mov	r0, #0
   2ffd0:	bl	1264c <dcgettext@plt>
   2ffd4:	mov	r6, r0
   2ffd8:	bl	1288c <strlen@plt>
   2ffdc:	add	r7, r0, #1
   2ffe0:	cmp	r5, #0
   2ffe4:	beq	30000 <__assert_fail@plt+0x1d444>
   2ffe8:	cmp	r7, r5
   2ffec:	mov	r2, r7
   2fff0:	bhi	30008 <__assert_fail@plt+0x1d44c>
   2fff4:	mov	r0, r4
   2fff8:	mov	r1, r6
   2fffc:	bl	125c8 <memcpy@plt>
   30000:	mov	r0, r7
   30004:	pop	{r4, r5, r6, r7, fp, pc}
   30008:	sub	r2, r5, #1
   3000c:	mov	r0, #0
   30010:	strb	r0, [r4, r2]
   30014:	b	2fff4 <__assert_fail@plt+0x1d438>
   30018:	bl	12b68 <abort@plt>
   3001c:	push	{r4, r5, fp, lr}
   30020:	add	fp, sp, #8
   30024:	ldr	r5, [r0]
   30028:	mov	r4, r0
   3002c:	cmp	r5, #0
   30030:	beq	3005c <__assert_fail@plt+0x1d4a0>
   30034:	movw	r0, #9624	; 0x2598
   30038:	movw	r1, #10548	; 0x2934
   3003c:	movt	r0, #1
   30040:	movt	r1, #1
   30044:	orrs	r0, r1, r0
   30048:	beq	30054 <__assert_fail@plt+0x1d498>
   3004c:	add	r0, r5, #136	; 0x88
   30050:	bl	12514 <pthread_mutex_destroy@plt>
   30054:	mov	r0, r5
   30058:	bl	30084 <__assert_fail@plt+0x1d4c8>
   3005c:	mov	r5, #0
   30060:	str	r5, [r4]
   30064:	str	r5, [r4, #4]
   30068:	ldr	r0, [r4, #16]
   3006c:	bl	2c048 <__assert_fail@plt+0x1948c>
   30070:	str	r5, [r4, #16]
   30074:	ldr	r0, [r4, #20]
   30078:	bl	2c048 <__assert_fail@plt+0x1948c>
   3007c:	str	r5, [r4, #20]
   30080:	pop	{r4, r5, fp, pc}
   30084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30088:	add	fp, sp, #28
   3008c:	sub	sp, sp, #4
   30090:	mov	sl, r0
   30094:	ldr	r0, [r0]
   30098:	cmp	r0, #0
   3009c:	ldrne	r1, [sl, #8]
   300a0:	cmpne	r1, #0
   300a4:	bne	301f0 <__assert_fail@plt+0x1d634>
   300a8:	ldr	r0, [sl, #12]
   300ac:	bl	2c048 <__assert_fail@plt+0x1948c>
   300b0:	ldr	r0, [sl, #8]
   300b4:	cmp	r0, #0
   300b8:	beq	30124 <__assert_fail@plt+0x1d568>
   300bc:	add	r7, sl, #20
   300c0:	add	r8, sl, #28
   300c4:	add	r9, sl, #24
   300c8:	mov	r5, #0
   300cc:	mov	r6, #8
   300d0:	ldr	r0, [r9]
   300d4:	cmp	r0, #0
   300d8:	beq	300e4 <__assert_fail@plt+0x1d528>
   300dc:	ldr	r0, [r0, r6]
   300e0:	bl	2c048 <__assert_fail@plt+0x1948c>
   300e4:	ldr	r0, [r8]
   300e8:	cmp	r0, #0
   300ec:	beq	300f8 <__assert_fail@plt+0x1d53c>
   300f0:	ldr	r0, [r0, r6]
   300f4:	bl	2c048 <__assert_fail@plt+0x1948c>
   300f8:	ldr	r0, [r7]
   300fc:	cmp	r0, #0
   30100:	beq	3010c <__assert_fail@plt+0x1d550>
   30104:	ldr	r0, [r0, r6]
   30108:	bl	2c048 <__assert_fail@plt+0x1948c>
   3010c:	ldr	r0, [sl, #8]
   30110:	add	r5, r5, #1
   30114:	add	r6, r6, #12
   30118:	cmp	r5, r0
   3011c:	bcc	300d0 <__assert_fail@plt+0x1d514>
   30120:	b	30130 <__assert_fail@plt+0x1d574>
   30124:	add	r8, sl, #28
   30128:	add	r9, sl, #24
   3012c:	add	r7, sl, #20
   30130:	ldr	r0, [r7]
   30134:	bl	2c048 <__assert_fail@plt+0x1948c>
   30138:	ldr	r0, [r9]
   3013c:	bl	2c048 <__assert_fail@plt+0x1948c>
   30140:	ldr	r0, [r8]
   30144:	bl	2c048 <__assert_fail@plt+0x1948c>
   30148:	ldr	r0, [sl]
   3014c:	bl	2c048 <__assert_fail@plt+0x1948c>
   30150:	ldr	r5, [sl, #32]
   30154:	cmp	r5, #0
   30158:	beq	301b8 <__assert_fail@plt+0x1d5fc>
   3015c:	mov	r6, #0
   30160:	b	3016c <__assert_fail@plt+0x1d5b0>
   30164:	ldr	r5, [sl, #32]
   30168:	add	r6, r6, #1
   3016c:	add	r0, r6, r6, lsl #1
   30170:	ldr	r0, [r5, r0, lsl #2]!
   30174:	add	r7, r5, #8
   30178:	cmp	r0, #1
   3017c:	blt	301a0 <__assert_fail@plt+0x1d5e4>
   30180:	mov	r4, #0
   30184:	ldr	r0, [r7]
   30188:	ldr	r0, [r0, r4, lsl #2]
   3018c:	bl	321dc <__assert_fail@plt+0x1f620>
   30190:	ldr	r0, [r5]
   30194:	add	r4, r4, #1
   30198:	cmp	r4, r0
   3019c:	blt	30184 <__assert_fail@plt+0x1d5c8>
   301a0:	ldr	r0, [r7]
   301a4:	bl	2c048 <__assert_fail@plt+0x1948c>
   301a8:	ldr	r0, [sl, #68]	; 0x44
   301ac:	cmp	r6, r0
   301b0:	bcc	30164 <__assert_fail@plt+0x1d5a8>
   301b4:	ldr	r5, [sl, #32]
   301b8:	mov	r0, r5
   301bc:	bl	2c048 <__assert_fail@plt+0x1948c>
   301c0:	ldr	r0, [sl, #60]	; 0x3c
   301c4:	movw	r1, #14628	; 0x3924
   301c8:	movt	r1, #4
   301cc:	cmp	r0, r1
   301d0:	beq	301d8 <__assert_fail@plt+0x1d61c>
   301d4:	bl	2c048 <__assert_fail@plt+0x1948c>
   301d8:	ldr	r0, [sl, #132]	; 0x84
   301dc:	bl	2c048 <__assert_fail@plt+0x1948c>
   301e0:	mov	r0, sl
   301e4:	sub	sp, fp, #28
   301e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   301ec:	b	2c048 <__assert_fail@plt+0x1948c>
   301f0:	bl	321ac <__assert_fail@plt+0x1f5f0>
   301f4:	ldr	r0, [sl, #8]
   301f8:	cmp	r0, #2
   301fc:	bcc	300a8 <__assert_fail@plt+0x1d4ec>
   30200:	mov	r5, #1
   30204:	mov	r6, #8
   30208:	ldr	r0, [sl]
   3020c:	add	r0, r0, r6
   30210:	bl	321ac <__assert_fail@plt+0x1f5f0>
   30214:	ldr	r0, [sl, #8]
   30218:	add	r5, r5, #1
   3021c:	add	r6, r6, #8
   30220:	cmp	r5, r0
   30224:	bcc	30208 <__assert_fail@plt+0x1d64c>
   30228:	b	300a8 <__assert_fail@plt+0x1d4ec>
   3022c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30230:	add	fp, sp, #28
   30234:	sub	sp, sp, #28
   30238:	ldr	sl, [fp, #8]
   3023c:	mov	r7, #2
   30240:	cmp	sl, #7
   30244:	bhi	30318 <__assert_fail@plt+0x1d75c>
   30248:	mov	r5, r0
   3024c:	ldr	r0, [r0]
   30250:	mov	r6, r3
   30254:	mov	r9, r2
   30258:	mov	r4, r1
   3025c:	tst	sl, #4
   30260:	str	r0, [sp, #24]
   30264:	bne	3027c <__assert_fail@plt+0x1d6c0>
   30268:	mov	r0, r4
   3026c:	bl	1288c <strlen@plt>
   30270:	mov	r7, r0
   30274:	mov	r8, #0
   30278:	b	30284 <__assert_fail@plt+0x1d6c8>
   3027c:	ldr	r8, [r6]
   30280:	ldr	r7, [r6, #4]
   30284:	movw	r0, #9624	; 0x2598
   30288:	movw	r1, #10548	; 0x2934
   3028c:	movt	r0, #1
   30290:	movt	r1, #1
   30294:	orrs	r0, r1, r0
   30298:	str	r0, [sp, #20]
   3029c:	beq	302ac <__assert_fail@plt+0x1d6f0>
   302a0:	ldr	r0, [sp, #24]
   302a4:	add	r0, r0, #136	; 0x88
   302a8:	bl	12574 <pthread_mutex_lock@plt>
   302ac:	ldrb	r0, [r5, #28]
   302b0:	tst	r0, #16
   302b4:	bne	302c8 <__assert_fail@plt+0x1d70c>
   302b8:	str	r7, [sp]
   302bc:	stmib	sp, {r7, r9}
   302c0:	str	r6, [sp, #12]
   302c4:	b	302dc <__assert_fail@plt+0x1d720>
   302c8:	mov	r0, #0
   302cc:	str	r7, [sp]
   302d0:	str	r7, [sp, #4]
   302d4:	str	r0, [sp, #8]
   302d8:	str	r0, [sp, #12]
   302dc:	mov	r0, r5
   302e0:	mov	r1, r4
   302e4:	mov	r2, r7
   302e8:	mov	r3, r8
   302ec:	str	sl, [sp, #16]
   302f0:	bl	30324 <__assert_fail@plt+0x1d768>
   302f4:	mov	r7, r0
   302f8:	ldr	r0, [sp, #20]
   302fc:	cmp	r0, #0
   30300:	beq	30310 <__assert_fail@plt+0x1d754>
   30304:	ldr	r0, [sp, #24]
   30308:	add	r0, r0, #136	; 0x88
   3030c:	bl	12430 <pthread_mutex_unlock@plt>
   30310:	cmp	r7, #0
   30314:	movwne	r7, #1
   30318:	mov	r0, r7
   3031c:	sub	sp, fp, #28
   30320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30328:	add	fp, sp, #28
   3032c:	sub	sp, sp, #436	; 0x1b4
   30330:	ldr	r5, [r0]
   30334:	str	r2, [sp, #108]	; 0x6c
   30338:	str	r1, [sp, #104]	; 0x68
   3033c:	mov	r9, r0
   30340:	add	r0, sp, #112	; 0x70
   30344:	mov	r1, #0
   30348:	mov	r2, #136	; 0x88
   3034c:	mov	r7, r3
   30350:	mov	r8, #0
   30354:	bl	12904 <memset@plt>
   30358:	str	r5, [sp, #196]	; 0xc4
   3035c:	ldr	r0, [fp, #8]
   30360:	mov	sl, #0
   30364:	ldr	r1, [r9, #16]
   30368:	cmp	r1, #0
   3036c:	beq	30388 <__assert_fail@plt+0x1d7cc>
   30370:	ldrb	r2, [r9, #28]
   30374:	and	r2, r2, #9
   30378:	cmp	r2, #8
   3037c:	movne	r1, #0
   30380:	subs	sl, r7, r0
   30384:	movne	sl, r1
   30388:	ldr	r2, [r9, #24]
   3038c:	ldr	r6, [fp, #16]
   30390:	ldr	r1, [r9, #8]
   30394:	mov	r4, #1
   30398:	mvn	r3, r2
   3039c:	cmp	r2, r6
   303a0:	addcc	r8, r3, r6
   303a4:	cmp	r1, #0
   303a8:	beq	31bec <__assert_fail@plt+0x1f030>
   303ac:	ldr	r1, [r5, #36]	; 0x24
   303b0:	cmp	r1, #0
   303b4:	ldrne	r2, [r5, #40]	; 0x28
   303b8:	cmpne	r2, #0
   303bc:	beq	31bec <__assert_fail@plt+0x1f030>
   303c0:	ldr	r3, [r5, #44]	; 0x2c
   303c4:	cmp	r3, #0
   303c8:	ldrne	r6, [r5, #48]	; 0x30
   303cc:	cmpne	r6, #0
   303d0:	beq	31bec <__assert_fail@plt+0x1f030>
   303d4:	ldr	r1, [r1, #8]
   303d8:	ldr	r6, [r9, #20]
   303dc:	cmp	r1, #0
   303e0:	beq	303f0 <__assert_fail@plt+0x1d834>
   303e4:	ldr	lr, [sp, #108]	; 0x6c
   303e8:	ldr	ip, [sp, #104]	; 0x68
   303ec:	b	30404 <__assert_fail@plt+0x1d848>
   303f0:	ldr	r1, [r2, #8]
   303f4:	ldr	lr, [sp, #108]	; 0x6c
   303f8:	ldr	ip, [sp, #104]	; 0x68
   303fc:	cmp	r1, #0
   30400:	beq	31414 <__assert_fail@plt+0x1e858>
   30404:	str	r0, [sp, #96]	; 0x60
   30408:	ldr	r0, [fp, #16]
   3040c:	subs	r0, r0, r8
   30410:	str	r0, [sp, #92]	; 0x5c
   30414:	mov	r0, #1
   30418:	str	r0, [sp, #68]	; 0x44
   3041c:	bne	30430 <__assert_fail@plt+0x1d874>
   30420:	ldr	r0, [r5, #76]	; 0x4c
   30424:	cmp	r0, #0
   30428:	movwne	r0, #1
   3042c:	str	r0, [sp, #68]	; 0x44
   30430:	ldr	r0, [r9, #12]
   30434:	ldr	r2, [r5, #92]	; 0x5c
   30438:	ldr	r1, [r5, #8]
   3043c:	str	r6, [sp, #176]	; 0xb0
   30440:	str	ip, [sp, #112]	; 0x70
   30444:	vdup.32	q8, lr
   30448:	str	r2, [sp, #192]	; 0xc0
   3044c:	ubfx	r3, r0, #22, #1
   30450:	and	r0, r0, #4194304	; 0x400000
   30454:	str	r6, [sp, #100]	; 0x64
   30458:	add	r1, r1, #1
   3045c:	orrs	r0, r6, r0
   30460:	strb	r3, [sp, #184]	; 0xb8
   30464:	movwne	r0, #1
   30468:	cmp	r2, r1
   3046c:	strb	r0, [sp, #187]	; 0xbb
   30470:	add	r0, sp, #112	; 0x70
   30474:	movgt	r1, r2
   30478:	add	r2, lr, #1
   3047c:	ldrb	r6, [r5, #88]	; 0x58
   30480:	add	r3, r0, #44	; 0x2c
   30484:	cmp	r2, r1
   30488:	vst1.32	{d16-d17}, [r3]
   3048c:	movlt	r1, r2
   30490:	ubfx	r3, r6, #3, #1
   30494:	strb	r3, [sp, #186]	; 0xba
   30498:	ubfx	r3, r6, #2, #1
   3049c:	strb	r3, [sp, #185]	; 0xb9
   304a0:	bl	322f8 <__assert_fail@plt+0x1f73c>
   304a4:	cmp	r0, #0
   304a8:	bne	31c64 <__assert_fail@plt+0x1f0a8>
   304ac:	add	r1, r5, #96	; 0x60
   304b0:	ldr	r2, [fp, #24]
   304b4:	ldr	r0, [fp, #12]
   304b8:	str	r1, [sp, #180]	; 0xb4
   304bc:	ldrb	r1, [r5, #88]	; 0x58
   304c0:	ubfx	r1, r1, #4, #1
   304c4:	ldr	ip, [sp, #108]	; 0x6c
   304c8:	strb	r1, [sp, #190]	; 0xbe
   304cc:	mov	r1, #0
   304d0:	ldrb	r3, [sp, #187]	; 0xbb
   304d4:	cmp	r3, #0
   304d8:	ldr	r3, [sp, #104]	; 0x68
   304dc:	bne	304f4 <__assert_fail@plt+0x1d938>
   304e0:	str	r3, [sp, #116]	; 0x74
   304e4:	ldr	r1, [r5, #92]	; 0x5c
   304e8:	cmp	r1, #1
   304ec:	mov	r1, ip
   304f0:	movwgt	r1, #0
   304f4:	str	r1, [sp, #144]	; 0x90
   304f8:	str	r1, [sp, #140]	; 0x8c
   304fc:	str	r0, [sp, #168]	; 0xa8
   30500:	str	r0, [sp, #164]	; 0xa4
   30504:	mov	r1, r5
   30508:	str	r9, [sp, #44]	; 0x2c
   3050c:	ldrb	r0, [r9, #28]
   30510:	str	r1, [sp, #84]	; 0x54
   30514:	lsr	r0, r0, #7
   30518:	strb	r0, [sp, #189]	; 0xbd
   3051c:	mov	r0, r5
   30520:	ldr	r5, [sp, #100]	; 0x64
   30524:	ldr	r6, [r0, #76]!	; 0x4c
   30528:	str	r0, [sp, #64]	; 0x40
   3052c:	mvn	r0, #0
   30530:	lsl	r9, r6, #1
   30534:	cmp	r6, #1
   30538:	str	r0, [sp, #204]	; 0xcc
   3053c:	str	r2, [sp, #200]	; 0xc8
   30540:	blt	305a0 <__assert_fail@plt+0x1d9e4>
   30544:	movw	r0, #43690	; 0xaaaa
   30548:	mov	r4, #12
   3054c:	movt	r0, #2730	; 0xaaa
   30550:	cmp	r9, r0
   30554:	bhi	31bb4 <__assert_fail@plt+0x1eff8>
   30558:	add	r0, r6, r6, lsl #1
   3055c:	mov	r5, r8
   30560:	lsl	r0, r0, #4
   30564:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   30568:	mov	r8, r0
   3056c:	str	r0, [sp, #228]	; 0xe4
   30570:	lsl	r0, r6, #3
   30574:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   30578:	cmp	r0, #0
   3057c:	str	r0, [sp, #244]	; 0xf4
   30580:	beq	31bb4 <__assert_fail@plt+0x1eff8>
   30584:	cmp	r8, #0
   30588:	mov	r8, r5
   3058c:	ldr	ip, [sp, #108]	; 0x6c
   30590:	ldr	r3, [sp, #104]	; 0x68
   30594:	ldr	r5, [sp, #100]	; 0x64
   30598:	ldr	r2, [fp, #24]
   3059c:	beq	31bb4 <__assert_fail@plt+0x1eff8>
   305a0:	mov	r0, #1
   305a4:	str	r0, [sp, #232]	; 0xe8
   305a8:	ldr	r0, [sp, #92]	; 0x5c
   305ac:	str	r9, [sp, #224]	; 0xe0
   305b0:	str	r9, [sp, #240]	; 0xf0
   305b4:	cmp	r0, #1
   305b8:	bhi	305cc <__assert_fail@plt+0x1da10>
   305bc:	ldr	r0, [sp, #84]	; 0x54
   305c0:	ldrb	r0, [r0, #88]	; 0x58
   305c4:	tst	r0, #2
   305c8:	beq	30604 <__assert_fail@plt+0x1da48>
   305cc:	ldr	r0, [sp, #148]	; 0x94
   305d0:	mov	r4, #12
   305d4:	cmn	r0, #-1073741822	; 0xc0000002
   305d8:	bhi	31bb4 <__assert_fail@plt+0x1eff8>
   305dc:	mov	r1, #4
   305e0:	add	r0, r1, r0, lsl #2
   305e4:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   305e8:	ldr	r2, [fp, #24]
   305ec:	ldr	r5, [sp, #100]	; 0x64
   305f0:	ldr	r3, [sp, #104]	; 0x68
   305f4:	ldr	ip, [sp, #108]	; 0x6c
   305f8:	cmp	r0, #0
   305fc:	str	r0, [sp, #212]	; 0xd4
   30600:	beq	31bb4 <__assert_fail@plt+0x1eff8>
   30604:	ldr	r6, [sp, #96]	; 0x60
   30608:	tst	r2, #1
   3060c:	mov	r1, #4
   30610:	str	r7, [fp, #-212]	; 0xffffff2c
   30614:	str	r8, [sp, #36]	; 0x24
   30618:	mov	r9, r7
   3061c:	mov	r0, #4
   30620:	movweq	r1, #6
   30624:	str	r1, [sp, #172]	; 0xac
   30628:	mov	r1, #1
   3062c:	cmp	r6, r7
   30630:	mov	r8, r6
   30634:	mvnlt	r1, #0
   30638:	movlt	r8, r7
   3063c:	movlt	r9, r6
   30640:	cmp	sl, #0
   30644:	str	r1, [sp, #80]	; 0x50
   30648:	ldr	r1, [sp, #84]	; 0x54
   3064c:	ldr	r1, [r1, #92]	; 0x5c
   30650:	str	r1, [sp, #76]	; 0x4c
   30654:	beq	30698 <__assert_fail@plt+0x1dadc>
   30658:	cmp	r1, #1
   3065c:	beq	3067c <__assert_fail@plt+0x1dac0>
   30660:	ldr	r0, [sp, #44]	; 0x2c
   30664:	ldr	r0, [r0, #12]
   30668:	and	r0, r0, #4194304	; 0x400000
   3066c:	orr	r0, r5, r0
   30670:	clz	r0, r0
   30674:	lsr	r0, r0, #5
   30678:	lsl	r0, r0, #2
   3067c:	cmp	r5, #0
   30680:	mov	r1, r5
   30684:	movwne	r1, #1
   30688:	cmp	r6, r7
   3068c:	orrge	r1, r1, #2
   30690:	orr	r0, r1, r0
   30694:	b	3069c <__assert_fail@plt+0x1dae0>
   30698:	mov	r0, #8
   3069c:	add	r1, sp, #112	; 0x70
   306a0:	cmp	r6, r7
   306a4:	sub	lr, r0, #4
   306a8:	str	r9, [sp, #56]	; 0x38
   306ac:	add	r1, r1, #32
   306b0:	str	lr, [sp, #60]	; 0x3c
   306b4:	str	r1, [sp, #32]
   306b8:	sub	r1, fp, #212	; 0xd4
   306bc:	movwlt	r1, #0
   306c0:	cmp	r1, #0
   306c4:	str	r1, [sp, #48]	; 0x30
   306c8:	movwne	r1, #1
   306cc:	str	r1, [sp, #52]	; 0x34
   306d0:	sub	r1, fp, #208	; 0xd0
   306d4:	add	r1, r1, #16
   306d8:	str	r1, [sp, #40]	; 0x28
   306dc:	cmp	lr, #4
   306e0:	bhi	307bc <__assert_fail@plt+0x1dc00>
   306e4:	add	r0, pc, #0
   306e8:	ldr	pc, [r0, lr, lsl #2]
   306ec:	andeq	r0, r3, r0, lsl #14
   306f0:	andeq	r0, r3, r0, lsl #14
   306f4:	andeq	r0, r3, r4, ror r7
   306f8:	andeq	r0, r3, ip, asr #14
   306fc:	andeq	r0, r3, r4, asr #16
   30700:	mov	r4, #1
   30704:	cmp	r7, r9
   30708:	blt	31bb4 <__assert_fail@plt+0x1eff8>
   3070c:	mov	r0, #0
   30710:	cmp	r7, ip
   30714:	ldrblt	r0, [r3, r7]
   30718:	cmp	r5, #0
   3071c:	ldrbne	r0, [r5, r0]
   30720:	ldrb	r0, [sl, r0]
   30724:	cmp	r0, #0
   30728:	bne	30844 <__assert_fail@plt+0x1dc88>
   3072c:	sub	r0, r7, #1
   30730:	cmp	r7, r9
   30734:	mov	r7, r0
   30738:	str	r0, [fp, #-212]	; 0xffffff2c
   3073c:	bgt	3070c <__assert_fail@plt+0x1db50>
   30740:	b	31bb4 <__assert_fail@plt+0x1eff8>
   30744:	add	r7, r7, #1
   30748:	str	r7, [fp, #-212]	; 0xffffff2c
   3074c:	cmp	r7, r8
   30750:	bge	3078c <__assert_fail@plt+0x1dbd0>
   30754:	ldrb	r0, [r3, r7]
   30758:	ldrb	r0, [r5, r0]
   3075c:	ldrb	r0, [sl, r0]
   30760:	cmp	r0, #0
   30764:	beq	30744 <__assert_fail@plt+0x1db88>
   30768:	b	3078c <__assert_fail@plt+0x1dbd0>
   3076c:	add	r7, r7, #1
   30770:	str	r7, [fp, #-212]	; 0xffffff2c
   30774:	cmp	r7, r8
   30778:	bge	3078c <__assert_fail@plt+0x1dbd0>
   3077c:	ldrb	r0, [r3, r7]
   30780:	ldrb	r0, [sl, r0]
   30784:	cmp	r0, #0
   30788:	beq	3076c <__assert_fail@plt+0x1dbb0>
   3078c:	cmp	r7, r8
   30790:	bne	30844 <__assert_fail@plt+0x1dc88>
   30794:	mov	r0, #0
   30798:	cmp	r8, ip
   3079c:	mov	r7, r8
   307a0:	ldrblt	r0, [r3, r8]
   307a4:	cmp	r5, #0
   307a8:	ldrbne	r0, [r5, r0]
   307ac:	ldrb	r0, [sl, r0]
   307b0:	cmp	r0, #0
   307b4:	bne	30844 <__assert_fail@plt+0x1dc88>
   307b8:	b	31c74 <__assert_fail@plt+0x1f0b8>
   307bc:	ldr	r0, [sp, #136]	; 0x88
   307c0:	ldr	r5, [sp, #80]	; 0x50
   307c4:	ldr	r3, [sp, #144]	; 0x90
   307c8:	sub	r1, r7, r0
   307cc:	cmp	r1, r3
   307d0:	bcs	30814 <__assert_fail@plt+0x1dc58>
   307d4:	ldr	r3, [sp, #140]	; 0x8c
   307d8:	mov	r6, #0
   307dc:	cmp	r1, r3
   307e0:	ldrcc	r3, [sp, #116]	; 0x74
   307e4:	ldrbcc	r6, [r3, r1]
   307e8:	ldrb	r1, [sl, r6]
   307ec:	cmp	r1, #0
   307f0:	bne	30844 <__assert_fail@plt+0x1dc88>
   307f4:	add	r7, r7, r5
   307f8:	mov	r4, #1
   307fc:	cmp	r7, r9
   30800:	str	r7, [fp, #-212]	; 0xffffff2c
   30804:	blt	31bb4 <__assert_fail@plt+0x1eff8>
   30808:	cmp	r7, r8
   3080c:	ble	307c4 <__assert_fail@plt+0x1dc08>
   30810:	b	31bb4 <__assert_fail@plt+0x1eff8>
   30814:	add	r0, sp, #112	; 0x70
   30818:	mov	r1, r7
   3081c:	mov	r6, lr
   30820:	bl	371b4 <__assert_fail@plt+0x245f8>
   30824:	cmp	r0, #0
   30828:	bne	31c08 <__assert_fail@plt+0x1f04c>
   3082c:	ldr	r0, [sp, #136]	; 0x88
   30830:	ldr	r7, [fp, #-212]	; 0xffffff2c
   30834:	ldr	r2, [fp, #24]
   30838:	mov	lr, r6
   3083c:	sub	r1, r7, r0
   30840:	b	307d4 <__assert_fail@plt+0x1dc18>
   30844:	add	r0, sp, #112	; 0x70
   30848:	mov	r1, r7
   3084c:	bl	371b4 <__assert_fail@plt+0x245f8>
   30850:	cmp	r0, #0
   30854:	bne	31c08 <__assert_fail@plt+0x1f04c>
   30858:	ldr	r0, [sp, #76]	; 0x4c
   3085c:	cmp	r0, #1
   30860:	ldrne	r0, [sp, #140]	; 0x8c
   30864:	cmpne	r0, #0
   30868:	bne	308a0 <__assert_fail@plt+0x1dce4>
   3086c:	mov	r0, #0
   30870:	str	r0, [sp, #220]	; 0xdc
   30874:	str	r0, [sp, #232]	; 0xe8
   30878:	str	r0, [sp, #216]	; 0xd8
   3087c:	str	r0, [fp, #-64]	; 0xffffffc0
   30880:	ldr	r4, [sp, #196]	; 0xc4
   30884:	ldr	r3, [sp, #152]	; 0x98
   30888:	ldr	r7, [r4, #36]	; 0x24
   3088c:	ldrsb	r0, [r7, #52]	; 0x34
   30890:	cmn	r0, #1
   30894:	ble	308b4 <__assert_fail@plt+0x1dcf8>
   30898:	sub	r5, fp, #208	; 0xd0
   3089c:	b	30920 <__assert_fail@plt+0x1dd64>
   308a0:	ldr	r0, [sp, #120]	; 0x78
   308a4:	ldr	r0, [r0]
   308a8:	cmn	r0, #1
   308ac:	bne	3086c <__assert_fail@plt+0x1dcb0>
   308b0:	b	31128 <__assert_fail@plt+0x1e56c>
   308b4:	ldr	r2, [sp, #200]	; 0xc8
   308b8:	sub	r1, r3, #1
   308bc:	add	r0, sp, #112	; 0x70
   308c0:	mov	r6, r3
   308c4:	bl	379e0 <__assert_fail@plt+0x24e24>
   308c8:	tst	r0, #1
   308cc:	sub	r5, fp, #208	; 0xd0
   308d0:	bne	30918 <__assert_fail@plt+0x1dd5c>
   308d4:	mov	r3, r0
   308d8:	cmp	r0, #0
   308dc:	beq	3091c <__assert_fail@plt+0x1dd60>
   308e0:	ands	r1, r3, #2
   308e4:	and	r0, r3, #4
   308e8:	cmpne	r0, #0
   308ec:	bne	31168 <__assert_fail@plt+0x1e5ac>
   308f0:	cmp	r1, #0
   308f4:	bne	31170 <__assert_fail@plt+0x1e5b4>
   308f8:	cmp	r0, #0
   308fc:	beq	3091c <__assert_fail@plt+0x1dd60>
   30900:	ldr	r2, [r7, #40]	; 0x28
   30904:	sub	r0, fp, #64	; 0x40
   30908:	mov	r1, r4
   3090c:	bl	36d70 <__assert_fail@plt+0x241b4>
   30910:	mov	r7, r0
   30914:	b	3091c <__assert_fail@plt+0x1dd60>
   30918:	ldr	r7, [r4, #40]	; 0x28
   3091c:	mov	r3, r6
   30920:	ldr	r1, [sp, #52]	; 0x34
   30924:	cmp	r7, #0
   30928:	beq	31c00 <__assert_fail@plt+0x1f044>
   3092c:	ldr	r0, [sp, #212]	; 0xd4
   30930:	mov	ip, r1
   30934:	cmp	r0, #0
   30938:	beq	30950 <__assert_fail@plt+0x1dd94>
   3093c:	str	r7, [r0, r3, lsl #2]
   30940:	mov	ip, r1
   30944:	ldr	r0, [r4, #76]	; 0x4c
   30948:	cmp	r0, #0
   3094c:	bne	311c0 <__assert_fail@plt+0x1e604>
   30950:	ldrb	r0, [r7, #52]	; 0x34
   30954:	sxtb	r5, r0
   30958:	tst	r0, #16
   3095c:	bne	31178 <__assert_fail@plt+0x1e5bc>
   30960:	mov	r0, #0
   30964:	mvn	r2, #0
   30968:	str	r0, [sp, #72]	; 0x48
   3096c:	ldr	r6, [sp, #152]	; 0x98
   30970:	ldr	r0, [sp, #168]	; 0xa8
   30974:	str	r2, [sp, #96]	; 0x60
   30978:	cmp	r0, r6
   3097c:	ble	30988 <__assert_fail@plt+0x1ddcc>
   30980:	ldr	r1, [sp, #48]	; 0x30
   30984:	b	30c6c <__assert_fail@plt+0x1e0b0>
   30988:	ldr	r1, [sp, #48]	; 0x30
   3098c:	b	30e24 <__assert_fail@plt+0x1e268>
   30990:	ldr	r0, [sp, #212]	; 0xd4
   30994:	ldr	r2, [sp, #152]	; 0x98
   30998:	ldr	r1, [sp, #216]	; 0xd8
   3099c:	add	r2, r2, #1
   309a0:	sub	r3, r2, #1
   309a4:	cmp	r3, r1
   309a8:	bge	30e1c <__assert_fail@plt+0x1e260>
   309ac:	str	r2, [sp, #152]	; 0x98
   309b0:	ldr	r3, [r0, r2, lsl #2]
   309b4:	add	r2, r2, #1
   309b8:	cmp	r3, #0
   309bc:	beq	309a0 <__assert_fail@plt+0x1dde4>
   309c0:	sub	r0, fp, #64	; 0x40
   309c4:	add	r1, sp, #112	; 0x70
   309c8:	mov	r2, #0
   309cc:	bl	383c8 <__assert_fail@plt+0x2580c>
   309d0:	cmp	r0, #0
   309d4:	mov	r7, r0
   309d8:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   309dc:	cmpeq	r0, #0
   309e0:	beq	30990 <__assert_fail@plt+0x1ddd4>
   309e4:	cmp	r7, #0
   309e8:	mov	r3, r5
   309ec:	mov	ip, r6
   309f0:	bne	30d4c <__assert_fail@plt+0x1e190>
   309f4:	b	30e20 <__assert_fail@plt+0x1e264>
   309f8:	ldr	r0, [r4, #8]
   309fc:	cmp	r0, #1
   30a00:	blt	30be4 <__assert_fail@plt+0x1e028>
   30a04:	ldr	r7, [sp, #196]	; 0xc4
   30a08:	mov	r5, #0
   30a0c:	str	r3, [sp, #12]
   30a10:	str	ip, [sp, #24]
   30a14:	str	r4, [sp, #8]
   30a18:	str	r7, [sp, #16]
   30a1c:	ldr	r0, [r4, #12]
   30a20:	ldr	r1, [r0, r5, lsl #2]
   30a24:	ldr	r0, [r7]
   30a28:	add	r0, r0, r1, lsl #3
   30a2c:	ldr	r6, [r0, #4]
   30a30:	tst	r6, #1048576	; 0x100000
   30a34:	beq	30bd4 <__assert_fail@plt+0x1e018>
   30a38:	ldr	lr, [sp, #152]	; 0x98
   30a3c:	movw	r0, #65280	; 0xff00
   30a40:	str	r1, [sp, #28]
   30a44:	movt	r0, #3
   30a48:	tst	r6, r0
   30a4c:	beq	30abc <__assert_fail@plt+0x1df00>
   30a50:	ldr	r2, [sp, #200]	; 0xc8
   30a54:	add	r0, sp, #112	; 0x70
   30a58:	mov	r1, lr
   30a5c:	mov	r7, r3
   30a60:	str	lr, [sp, #20]
   30a64:	bl	379e0 <__assert_fail@plt+0x24e24>
   30a68:	mov	r3, r7
   30a6c:	ldr	lr, [sp, #20]
   30a70:	ldr	r1, [sp, #28]
   30a74:	ldr	ip, [sp, #24]
   30a78:	ldr	r7, [sp, #16]
   30a7c:	and	r2, r0, #1
   30a80:	tst	r6, #1024	; 0x400
   30a84:	beq	30a90 <__assert_fail@plt+0x1ded4>
   30a88:	cmp	r2, #0
   30a8c:	beq	30bd4 <__assert_fail@plt+0x1e018>
   30a90:	tst	r6, #2048	; 0x800
   30a94:	cmpne	r2, #0
   30a98:	bne	30bd4 <__assert_fail@plt+0x1e018>
   30a9c:	tst	r6, #8192	; 0x2000
   30aa0:	beq	30aac <__assert_fail@plt+0x1def0>
   30aa4:	ands	r2, r0, #2
   30aa8:	beq	30bd4 <__assert_fail@plt+0x1e018>
   30aac:	tst	r6, #32768	; 0x8000
   30ab0:	beq	30abc <__assert_fail@plt+0x1df00>
   30ab4:	ands	r0, r0, #8
   30ab8:	beq	30bd4 <__assert_fail@plt+0x1e018>
   30abc:	mov	r0, r7
   30ac0:	add	r2, sp, #112	; 0x70
   30ac4:	mov	r3, lr
   30ac8:	bl	39668 <__assert_fail@plt+0x26aac>
   30acc:	ldr	r4, [sp, #8]
   30ad0:	ldr	ip, [sp, #24]
   30ad4:	ldr	r3, [sp, #12]
   30ad8:	cmp	r0, #0
   30adc:	beq	30bd4 <__assert_fail@plt+0x1e018>
   30ae0:	ldr	r1, [sp, #152]	; 0x98
   30ae4:	ldr	r2, [sp, #232]	; 0xe8
   30ae8:	cmp	r2, r0
   30aec:	add	r6, r1, r0
   30af0:	movlt	r2, r0
   30af4:	add	r0, sp, #112	; 0x70
   30af8:	mov	r1, r6
   30afc:	str	r2, [sp, #232]	; 0xe8
   30b00:	bl	387a8 <__assert_fail@plt+0x25bec>
   30b04:	cmp	r0, #0
   30b08:	str	r0, [fp, #-48]	; 0xffffffd0
   30b0c:	bne	30c4c <__assert_fail@plt+0x1e090>
   30b10:	ldr	r0, [sp, #212]	; 0xd4
   30b14:	ldr	r2, [sp, #28]
   30b18:	ldr	r1, [r7, #24]
   30b1c:	ldr	r4, [r0, r6, lsl #2]
   30b20:	ldr	r0, [r7, #12]
   30b24:	ldr	r0, [r0, r2, lsl #2]
   30b28:	cmp	r4, #0
   30b2c:	add	r0, r0, r0, lsl #1
   30b30:	add	r2, r1, r0, lsl #2
   30b34:	beq	30b58 <__assert_fail@plt+0x1df9c>
   30b38:	ldr	r1, [r4, #40]	; 0x28
   30b3c:	sub	r7, fp, #208	; 0xd0
   30b40:	mov	r0, r7
   30b44:	bl	3851c <__assert_fail@plt+0x25960>
   30b48:	cmp	r0, #0
   30b4c:	str	r0, [fp, #-48]	; 0xffffffd0
   30b50:	beq	30b6c <__assert_fail@plt+0x1dfb0>
   30b54:	b	30c4c <__assert_fail@plt+0x1e090>
   30b58:	vldr	d16, [r2]
   30b5c:	ldr	r0, [r2, #8]
   30b60:	sub	r7, fp, #208	; 0xd0
   30b64:	str	r0, [fp, #-200]	; 0xffffff38
   30b68:	vstr	d16, [fp, #-208]	; 0xffffff30
   30b6c:	ldr	r2, [sp, #200]	; 0xc8
   30b70:	sub	r1, r6, #1
   30b74:	add	r0, sp, #112	; 0x70
   30b78:	bl	379e0 <__assert_fail@plt+0x24e24>
   30b7c:	ldr	r1, [sp, #16]
   30b80:	mov	r3, r0
   30b84:	sub	r0, fp, #48	; 0x30
   30b88:	mov	r2, r7
   30b8c:	bl	36d70 <__assert_fail@plt+0x241b4>
   30b90:	ldr	r1, [sp, #212]	; 0xd4
   30b94:	cmp	r4, #0
   30b98:	str	r0, [r1, r6, lsl #2]
   30b9c:	beq	30ba8 <__assert_fail@plt+0x1dfec>
   30ba0:	ldr	r0, [fp, #-200]	; 0xffffff38
   30ba4:	bl	2c048 <__assert_fail@plt+0x1948c>
   30ba8:	ldr	r0, [sp, #212]	; 0xd4
   30bac:	ldr	r3, [sp, #12]
   30bb0:	ldr	ip, [sp, #24]
   30bb4:	ldr	r4, [sp, #8]
   30bb8:	ldr	r7, [sp, #16]
   30bbc:	ldr	r0, [r0, r6, lsl #2]
   30bc0:	cmp	r0, #0
   30bc4:	bne	30bd4 <__assert_fail@plt+0x1e018>
   30bc8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   30bcc:	cmp	r0, #0
   30bd0:	bne	30c60 <__assert_fail@plt+0x1e0a4>
   30bd4:	ldr	r0, [r4, #8]
   30bd8:	add	r5, r5, #1
   30bdc:	cmp	r5, r0
   30be0:	blt	30a1c <__assert_fail@plt+0x1de60>
   30be4:	mov	r0, #0
   30be8:	str	r0, [fp, #-64]	; 0xffffffc0
   30bec:	b	30cac <__assert_fail@plt+0x1e0f0>
   30bf0:	add	r1, r6, #2
   30bf4:	add	r0, sp, #112	; 0x70
   30bf8:	mov	r5, r3
   30bfc:	mov	r6, ip
   30c00:	bl	382f0 <__assert_fail@plt+0x25734>
   30c04:	cmp	r0, #0
   30c08:	str	r0, [fp, #-64]	; 0xffffffc0
   30c0c:	bne	31c00 <__assert_fail@plt+0x1f044>
   30c10:	mov	r3, r5
   30c14:	ldrb	r5, [r4, #52]	; 0x34
   30c18:	mov	ip, r6
   30c1c:	b	30ca4 <__assert_fail@plt+0x1e0e8>
   30c20:	ldr	r0, [sp, #152]	; 0x98
   30c24:	ldr	r2, [sp, #200]	; 0xc8
   30c28:	sub	r1, r0, #1
   30c2c:	add	r0, sp, #112	; 0x70
   30c30:	bl	379e0 <__assert_fail@plt+0x24e24>
   30c34:	bfi	r5, r0, #8, #1
   30c38:	ldr	r3, [sp, #12]
   30c3c:	ldr	ip, [sp, #24]
   30c40:	ldr	r4, [sp, #8]
   30c44:	ldr	r7, [r6, r5, lsl #2]
   30c48:	b	30d14 <__assert_fail@plt+0x1e158>
   30c4c:	ldr	r2, [sp, #72]	; 0x48
   30c50:	ldr	r3, [sp, #12]
   30c54:	ldr	ip, [sp, #24]
   30c58:	ldr	r4, [sp, #8]
   30c5c:	str	r2, [sp, #72]	; 0x48
   30c60:	mov	r7, #0
   30c64:	str	r0, [fp, #-64]	; 0xffffffc0
   30c68:	b	30d14 <__assert_fail@plt+0x1e158>
   30c6c:	str	r1, [sp, #88]	; 0x58
   30c70:	ldr	r1, [sp, #148]	; 0x94
   30c74:	ldr	r0, [sp, #160]	; 0xa0
   30c78:	add	r9, r6, #1
   30c7c:	mov	r4, r7
   30c80:	cmp	r9, r1
   30c84:	blt	30c90 <__assert_fail@plt+0x1e0d4>
   30c88:	cmp	r1, r0
   30c8c:	blt	30bf0 <__assert_fail@plt+0x1e034>
   30c90:	ldr	r1, [sp, #140]	; 0x8c
   30c94:	cmp	r9, r1
   30c98:	blt	30ca4 <__assert_fail@plt+0x1e0e8>
   30c9c:	cmp	r1, r0
   30ca0:	blt	30bf0 <__assert_fail@plt+0x1e034>
   30ca4:	tst	r5, #32
   30ca8:	bne	309f8 <__assert_fail@plt+0x1de3c>
   30cac:	ldr	r1, [sp, #152]	; 0x98
   30cb0:	ldr	r0, [sp, #116]	; 0x74
   30cb4:	add	r2, r1, #1
   30cb8:	str	r2, [sp, #152]	; 0x98
   30cbc:	ldrb	r5, [r0, r1]
   30cc0:	ldr	r0, [r4, #44]	; 0x2c
   30cc4:	cmp	r0, #0
   30cc8:	bne	30d10 <__assert_fail@plt+0x1e154>
   30ccc:	ldr	r6, [r4, #48]	; 0x30
   30cd0:	str	ip, [sp, #24]
   30cd4:	str	r3, [sp, #12]
   30cd8:	str	r4, [sp, #8]
   30cdc:	cmp	r6, #0
   30ce0:	bne	30c20 <__assert_fail@plt+0x1e064>
   30ce4:	ldr	r6, [sp, #8]
   30ce8:	ldr	r0, [sp, #196]	; 0xc4
   30cec:	mov	r1, r6
   30cf0:	bl	39a8c <__assert_fail@plt+0x26ed0>
   30cf4:	ldr	r3, [sp, #12]
   30cf8:	ldr	ip, [sp, #24]
   30cfc:	mov	r4, r6
   30d00:	cmp	r0, #0
   30d04:	bne	30cc0 <__assert_fail@plt+0x1e104>
   30d08:	mov	r0, #12
   30d0c:	b	30c60 <__assert_fail@plt+0x1e0a4>
   30d10:	ldr	r7, [r0, r5, lsl #2]
   30d14:	ldr	r0, [sp, #212]	; 0xd4
   30d18:	cmp	r0, #0
   30d1c:	beq	30d44 <__assert_fail@plt+0x1e188>
   30d20:	sub	r0, fp, #64	; 0x40
   30d24:	add	r1, sp, #112	; 0x70
   30d28:	mov	r2, r7
   30d2c:	mov	r5, r3
   30d30:	mov	r6, ip
   30d34:	bl	383c8 <__assert_fail@plt+0x2580c>
   30d38:	mov	ip, r6
   30d3c:	mov	r3, r5
   30d40:	mov	r7, r0
   30d44:	cmp	r7, #0
   30d48:	beq	30d7c <__assert_fail@plt+0x1e1c0>
   30d4c:	sub	r0, r4, r7
   30d50:	clz	r0, r0
   30d54:	lsr	r0, r0, #5
   30d58:	ands	ip, ip, r0
   30d5c:	ldrb	r0, [r7, #52]	; 0x34
   30d60:	movne	r3, r9
   30d64:	sxtb	r5, r0
   30d68:	tst	r0, #16
   30d6c:	bne	30dbc <__assert_fail@plt+0x1e200>
   30d70:	ldr	r6, [sp, #152]	; 0x98
   30d74:	ldr	r1, [sp, #88]	; 0x58
   30d78:	b	30e0c <__assert_fail@plt+0x1e250>
   30d7c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30d80:	cmp	r0, #0
   30d84:	bne	31c00 <__assert_fail@plt+0x1f044>
   30d88:	ldr	r0, [sp, #72]	; 0x48
   30d8c:	ldr	r1, [sp, #68]	; 0x44
   30d90:	clz	r0, r0
   30d94:	lsr	r0, r0, #5
   30d98:	orr	r0, r1, r0
   30d9c:	cmp	r0, #1
   30da0:	bne	30e20 <__assert_fail@plt+0x1e264>
   30da4:	ldr	r0, [sp, #212]	; 0xd4
   30da8:	cmp	r0, #0
   30dac:	beq	30e20 <__assert_fail@plt+0x1e264>
   30db0:	mov	r6, ip
   30db4:	mov	r5, r3
   30db8:	b	30994 <__assert_fail@plt+0x1ddd8>
   30dbc:	ldr	r6, [sp, #152]	; 0x98
   30dc0:	cmn	r5, #1
   30dc4:	bgt	30df0 <__assert_fail@plt+0x1e234>
   30dc8:	add	r0, sp, #112	; 0x70
   30dcc:	mov	r1, r7
   30dd0:	mov	r2, r6
   30dd4:	mov	r4, r3
   30dd8:	mov	r9, ip
   30ddc:	bl	37878 <__assert_fail@plt+0x24cbc>
   30de0:	mov	ip, r9
   30de4:	mov	r3, r4
   30de8:	cmp	r0, #0
   30dec:	beq	30d74 <__assert_fail@plt+0x1e1b8>
   30df0:	ldr	r0, [sp, #68]	; 0x44
   30df4:	cmp	r0, #0
   30df8:	beq	3124c <__assert_fail@plt+0x1e690>
   30dfc:	mov	r1, #0
   30e00:	mov	r0, #1
   30e04:	str	r6, [sp, #96]	; 0x60
   30e08:	str	r0, [sp, #72]	; 0x48
   30e0c:	ldr	r0, [sp, #168]	; 0xa8
   30e10:	cmp	r0, r6
   30e14:	bgt	30c6c <__assert_fail@plt+0x1e0b0>
   30e18:	b	30e24 <__assert_fail@plt+0x1e268>
   30e1c:	mov	r3, r5
   30e20:	ldr	r1, [sp, #88]	; 0x58
   30e24:	cmp	r1, #0
   30e28:	ldr	r6, [sp, #96]	; 0x60
   30e2c:	sub	r5, fp, #208	; 0xd0
   30e30:	ldrne	r0, [r1]
   30e34:	addne	r0, r0, r3
   30e38:	strne	r0, [r1]
   30e3c:	cmn	r6, #1
   30e40:	beq	31120 <__assert_fail@plt+0x1e564>
   30e44:	mov	r4, #12
   30e48:	cmn	r6, #2
   30e4c:	beq	31bb4 <__assert_fail@plt+0x1eff8>
   30e50:	ldr	r0, [sp, #92]	; 0x5c
   30e54:	str	r6, [sp, #204]	; 0xcc
   30e58:	cmp	r0, #2
   30e5c:	bcc	30eb0 <__assert_fail@plt+0x1e2f4>
   30e60:	ldr	r0, [sp, #44]	; 0x2c
   30e64:	ldrb	r0, [r0, #28]
   30e68:	ands	r0, r0, #16
   30e6c:	bne	30eb0 <__assert_fail@plt+0x1e2f4>
   30e70:	ldr	r0, [sp, #212]	; 0xd4
   30e74:	mov	r2, r6
   30e78:	ldr	r1, [r0, r6, lsl #2]
   30e7c:	add	r0, sp, #112	; 0x70
   30e80:	bl	37878 <__assert_fail@plt+0x24cbc>
   30e84:	str	r0, [sp, #88]	; 0x58
   30e88:	str	r0, [sp, #208]	; 0xd0
   30e8c:	ldr	r0, [sp, #84]	; 0x54
   30e90:	ldrb	r0, [r0, #88]	; 0x58
   30e94:	tst	r0, #1
   30e98:	bne	30edc <__assert_fail@plt+0x1e320>
   30e9c:	ldr	r0, [sp, #64]	; 0x40
   30ea0:	ldr	r0, [r0]
   30ea4:	cmp	r0, #0
   30ea8:	bne	30edc <__assert_fail@plt+0x1e320>
   30eac:	b	312a4 <__assert_fail@plt+0x1e6e8>
   30eb0:	ldr	r0, [sp, #64]	; 0x40
   30eb4:	ldr	r0, [r0]
   30eb8:	cmp	r0, #0
   30ebc:	beq	312a4 <__assert_fail@plt+0x1e6e8>
   30ec0:	ldr	r0, [sp, #212]	; 0xd4
   30ec4:	mov	r2, r6
   30ec8:	ldr	r1, [r0, r6, lsl #2]
   30ecc:	add	r0, sp, #112	; 0x70
   30ed0:	bl	37878 <__assert_fail@plt+0x24cbc>
   30ed4:	str	r0, [sp, #88]	; 0x58
   30ed8:	str	r0, [sp, #208]	; 0xd0
   30edc:	cmn	r6, #-1073741823	; 0xc0000001
   30ee0:	bcs	31bb4 <__assert_fail@plt+0x1eff8>
   30ee4:	ldr	r0, [sp, #196]	; 0xc4
   30ee8:	mov	r9, r6
   30eec:	str	r0, [sp, #72]	; 0x48
   30ef0:	mov	r0, #4
   30ef4:	add	r6, r0, r6, lsl #2
   30ef8:	mov	r0, r6
   30efc:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   30f00:	mov	r7, r0
   30f04:	cmp	r0, #0
   30f08:	beq	31c50 <__assert_fail@plt+0x1f094>
   30f0c:	ldr	r0, [sp, #72]	; 0x48
   30f10:	ldr	r0, [r0, #76]	; 0x4c
   30f14:	cmp	r0, #0
   30f18:	beq	30fd0 <__assert_fail@plt+0x1e414>
   30f1c:	mov	r0, r6
   30f20:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   30f24:	cmp	r0, #0
   30f28:	beq	31c50 <__assert_fail@plt+0x1f094>
   30f2c:	mov	r6, r0
   30f30:	add	r0, r9, #1
   30f34:	mov	r1, #0
   30f38:	mov	r4, r9
   30f3c:	str	r0, [sp, #28]
   30f40:	lsl	r2, r0, #2
   30f44:	mov	r0, r6
   30f48:	bl	12904 <memset@plt>
   30f4c:	ldr	r0, [sp, #88]	; 0x58
   30f50:	str	r7, [fp, #-208]	; 0xffffff30
   30f54:	str	r6, [fp, #-204]	; 0xffffff34
   30f58:	mov	r1, #0
   30f5c:	str	r0, [fp, #-200]	; 0xffffff38
   30f60:	ldr	r0, [sp, #40]	; 0x28
   30f64:	str	r9, [fp, #-196]	; 0xffffff3c
   30f68:	str	r1, [r0]
   30f6c:	str	r1, [r0, #4]
   30f70:	str	r1, [r0, #8]
   30f74:	add	r0, sp, #112	; 0x70
   30f78:	mov	r1, r5
   30f7c:	bl	3a598 <__assert_fail@plt+0x279dc>
   30f80:	mov	r4, r0
   30f84:	mov	r0, #0
   30f88:	bl	2c048 <__assert_fail@plt+0x1948c>
   30f8c:	cmp	r4, #0
   30f90:	bne	3119c <__assert_fail@plt+0x1e5e0>
   30f94:	ldr	r0, [r7]
   30f98:	cmp	r0, #0
   30f9c:	beq	3102c <__assert_fail@plt+0x1e470>
   30fa0:	ldr	r0, [sp, #72]	; 0x48
   30fa4:	ldr	r3, [sp, #28]
   30fa8:	mov	r1, r7
   30fac:	mov	r2, r6
   30fb0:	bl	3a830 <__assert_fail@plt+0x27c74>
   30fb4:	mov	r4, r0
   30fb8:	mov	r0, r6
   30fbc:	bl	2c048 <__assert_fail@plt+0x1948c>
   30fc0:	cmp	r4, #0
   30fc4:	beq	3127c <__assert_fail@plt+0x1e6c0>
   30fc8:	mov	r6, #0
   30fcc:	b	3119c <__assert_fail@plt+0x1e5e0>
   30fd0:	ldr	r0, [sp, #88]	; 0x58
   30fd4:	mov	r6, #0
   30fd8:	mov	r1, r5
   30fdc:	str	r6, [fp, #-204]	; 0xffffff34
   30fe0:	str	r7, [fp, #-208]	; 0xffffff30
   30fe4:	str	r0, [fp, #-200]	; 0xffffff38
   30fe8:	ldr	r0, [sp, #40]	; 0x28
   30fec:	str	r9, [fp, #-196]	; 0xffffff3c
   30ff0:	str	r6, [r0]
   30ff4:	str	r6, [r0, #4]
   30ff8:	str	r6, [r0, #8]
   30ffc:	add	r0, sp, #112	; 0x70
   31000:	bl	3a598 <__assert_fail@plt+0x279dc>
   31004:	mov	r4, r0
   31008:	mov	r0, #0
   3100c:	bl	2c048 <__assert_fail@plt+0x1948c>
   31010:	cmp	r4, #0
   31014:	bne	3119c <__assert_fail@plt+0x1e5e0>
   31018:	ldr	r0, [r7]
   3101c:	mov	r6, #0
   31020:	cmp	r0, #0
   31024:	beq	31110 <__assert_fail@plt+0x1e554>
   31028:	b	3127c <__assert_fail@plt+0x1e6c0>
   3102c:	ldr	r0, [r6]
   31030:	cmp	r0, #0
   31034:	bne	30fa0 <__assert_fail@plt+0x1e3e4>
   31038:	cmp	r9, #1
   3103c:	blt	31110 <__assert_fail@plt+0x1e554>
   31040:	ldr	r0, [sp, #212]	; 0xd4
   31044:	lsl	r4, r9, #2
   31048:	add	r5, r9, #1
   3104c:	sub	r0, r0, #4
   31050:	ldr	r1, [r0, r4]
   31054:	cmp	r1, #0
   31058:	ldrbne	r2, [r1, #52]	; 0x34
   3105c:	tstne	r2, #16
   31060:	bne	31078 <__assert_fail@plt+0x1e4bc>
   31064:	sub	r5, r5, #1
   31068:	sub	r4, r4, #4
   3106c:	cmp	r5, #2
   31070:	bge	31050 <__assert_fail@plt+0x1e494>
   31074:	b	31110 <__assert_fail@plt+0x1e554>
   31078:	sub	r2, r5, #2
   3107c:	add	r0, sp, #112	; 0x70
   31080:	str	r2, [sp, #96]	; 0x60
   31084:	bl	37878 <__assert_fail@plt+0x24cbc>
   31088:	mov	r9, r0
   3108c:	mov	r0, r6
   31090:	mov	r1, #0
   31094:	mov	r2, r4
   31098:	bl	12904 <memset@plt>
   3109c:	ldr	r0, [sp, #96]	; 0x60
   310a0:	str	r7, [fp, #-208]	; 0xffffff30
   310a4:	str	r6, [fp, #-204]	; 0xffffff34
   310a8:	str	r9, [fp, #-200]	; 0xffffff38
   310ac:	str	r9, [sp, #88]	; 0x58
   310b0:	mov	r1, #0
   310b4:	mov	r9, r0
   310b8:	str	r0, [fp, #-196]	; 0xffffff3c
   310bc:	ldr	r0, [sp, #40]	; 0x28
   310c0:	str	r1, [r0]
   310c4:	str	r1, [r0, #4]
   310c8:	str	r1, [r0, #8]
   310cc:	add	r0, sp, #112	; 0x70
   310d0:	sub	r1, fp, #208	; 0xd0
   310d4:	bl	3a598 <__assert_fail@plt+0x279dc>
   310d8:	mov	r4, r0
   310dc:	mov	r0, #0
   310e0:	bl	2c048 <__assert_fail@plt+0x1948c>
   310e4:	cmp	r4, #0
   310e8:	bne	3119c <__assert_fail@plt+0x1e5e0>
   310ec:	sub	r0, r5, #1
   310f0:	str	r0, [sp, #28]
   310f4:	ldr	r0, [r7]
   310f8:	cmp	r0, #0
   310fc:	beq	3102c <__assert_fail@plt+0x1e470>
   31100:	sub	r9, r5, #2
   31104:	sub	r0, r5, #1
   31108:	str	r0, [sp, #28]
   3110c:	b	30fa0 <__assert_fail@plt+0x1e3e4>
   31110:	mov	r0, r7
   31114:	bl	2c048 <__assert_fail@plt+0x1948c>
   31118:	mov	r0, r6
   3111c:	bl	2c048 <__assert_fail@plt+0x1948c>
   31120:	add	r0, sp, #112	; 0x70
   31124:	bl	37938 <__assert_fail@plt+0x24d7c>
   31128:	ldr	r0, [fp, #-212]	; 0xffffff2c
   3112c:	ldr	r1, [sp, #80]	; 0x50
   31130:	ldr	r9, [sp, #56]	; 0x38
   31134:	ldr	ip, [sp, #108]	; 0x6c
   31138:	ldr	r3, [sp, #104]	; 0x68
   3113c:	ldr	r5, [sp, #100]	; 0x64
   31140:	ldr	r2, [fp, #24]
   31144:	ldr	lr, [sp, #60]	; 0x3c
   31148:	mov	r4, #1
   3114c:	add	r7, r0, r1
   31150:	cmp	r7, r9
   31154:	str	r7, [fp, #-212]	; 0xffffff2c
   31158:	blt	31bb4 <__assert_fail@plt+0x1eff8>
   3115c:	cmp	r8, r7
   31160:	bge	306dc <__assert_fail@plt+0x1db20>
   31164:	b	31bb4 <__assert_fail@plt+0x1eff8>
   31168:	ldr	r7, [r4, #48]	; 0x30
   3116c:	b	3091c <__assert_fail@plt+0x1dd60>
   31170:	ldr	r7, [r4, #44]	; 0x2c
   31174:	b	3091c <__assert_fail@plt+0x1dd60>
   31178:	cmn	r5, #1
   3117c:	ble	311fc <__assert_fail@plt+0x1e640>
   31180:	mov	r0, #1
   31184:	mov	r2, r3
   31188:	str	r0, [sp, #72]	; 0x48
   3118c:	ldr	r0, [sp, #68]	; 0x44
   31190:	cmp	r0, #0
   31194:	bne	3096c <__assert_fail@plt+0x1ddb0>
   31198:	b	31248 <__assert_fail@plt+0x1e68c>
   3119c:	mov	r0, r7
   311a0:	bl	2c048 <__assert_fail@plt+0x1948c>
   311a4:	mov	r0, r6
   311a8:	bl	2c048 <__assert_fail@plt+0x1948c>
   311ac:	cmp	r4, #0
   311b0:	beq	312a4 <__assert_fail@plt+0x1e6e8>
   311b4:	cmp	r4, #1
   311b8:	beq	31120 <__assert_fail@plt+0x1e564>
   311bc:	b	31bb4 <__assert_fail@plt+0x1eff8>
   311c0:	add	r4, r7, #4
   311c4:	add	r0, sp, #112	; 0x70
   311c8:	mov	r2, #0
   311cc:	mov	r9, r3
   311d0:	mov	r1, r4
   311d4:	bl	37ac0 <__assert_fail@plt+0x24f04>
   311d8:	cmp	r0, #0
   311dc:	str	r0, [fp, #-64]	; 0xffffffc0
   311e0:	bne	31274 <__assert_fail@plt+0x1e6b8>
   311e4:	ldrb	r0, [r7, #52]	; 0x34
   311e8:	mov	ip, #0
   311ec:	tst	r0, #64	; 0x40
   311f0:	bne	31254 <__assert_fail@plt+0x1e698>
   311f4:	mov	r3, r9
   311f8:	b	30950 <__assert_fail@plt+0x1dd94>
   311fc:	add	r0, sp, #112	; 0x70
   31200:	mov	r1, r7
   31204:	mov	r2, r3
   31208:	mov	r4, r3
   3120c:	mov	r6, ip
   31210:	bl	37878 <__assert_fail@plt+0x24cbc>
   31214:	clz	r1, r0
   31218:	mov	ip, r6
   3121c:	cmp	r0, #0
   31220:	mov	r2, r4
   31224:	mov	r3, r4
   31228:	lsr	r6, r1, #5
   3122c:	ldr	r1, [sp, #68]	; 0x44
   31230:	movwne	r0, #1
   31234:	mvneq	r2, #0
   31238:	str	r0, [sp, #72]	; 0x48
   3123c:	orr	r1, r1, r6
   31240:	cmp	r1, #0
   31244:	bne	3096c <__assert_fail@plt+0x1ddb0>
   31248:	mov	r6, r3
   3124c:	sub	r5, fp, #208	; 0xd0
   31250:	b	30e3c <__assert_fail@plt+0x1e280>
   31254:	add	r0, sp, #112	; 0x70
   31258:	mov	r1, r4
   3125c:	bl	37bb8 <__assert_fail@plt+0x24ffc>
   31260:	mov	ip, #0
   31264:	cmp	r0, #0
   31268:	mov	r3, r9
   3126c:	str	r0, [fp, #-64]	; 0xffffffc0
   31270:	beq	30950 <__assert_fail@plt+0x1dd94>
   31274:	mov	r6, r0
   31278:	b	30e3c <__assert_fail@plt+0x1e280>
   3127c:	ldr	r0, [sp, #212]	; 0xd4
   31280:	bl	2c048 <__assert_fail@plt+0x1948c>
   31284:	ldr	r0, [sp, #88]	; 0x58
   31288:	str	r0, [sp, #208]	; 0xd0
   3128c:	mov	r0, #0
   31290:	str	r7, [sp, #212]	; 0xd4
   31294:	str	r9, [sp, #204]	; 0xcc
   31298:	bl	2c048 <__assert_fail@plt+0x1948c>
   3129c:	mov	r0, #0
   312a0:	bl	2c048 <__assert_fail@plt+0x1948c>
   312a4:	ldr	r4, [sp, #92]	; 0x5c
   312a8:	cmp	r4, #0
   312ac:	beq	31bb0 <__assert_fail@plt+0x1eff4>
   312b0:	ldr	r8, [sp, #36]	; 0x24
   312b4:	ldr	sl, [fp, #20]
   312b8:	cmp	r4, #1
   312bc:	beq	312dc <__assert_fail@plt+0x1e720>
   312c0:	ldr	r1, [fp, #16]
   312c4:	mvn	r0, r8
   312c8:	add	r0, r0, r1
   312cc:	mov	r1, #255	; 0xff
   312d0:	lsl	r2, r0, #3
   312d4:	add	r0, sl, #8
   312d8:	bl	12904 <memset@plt>
   312dc:	ldr	r0, [sp, #204]	; 0xcc
   312e0:	mov	r5, #0
   312e4:	cmp	r4, #2
   312e8:	str	r5, [sl]
   312ec:	str	r0, [sl, #4]
   312f0:	bcc	31a88 <__assert_fail@plt+0x1eecc>
   312f4:	ldr	r0, [sp, #44]	; 0x2c
   312f8:	ldrb	r0, [r0, #28]
   312fc:	ands	r0, r0, #16
   31300:	bne	31a88 <__assert_fail@plt+0x1eecc>
   31304:	ldr	r0, [sp, #84]	; 0x54
   31308:	ldrb	r1, [r0, #88]	; 0x58
   3130c:	mov	r0, #0
   31310:	tst	r1, #1
   31314:	mov	r1, #0
   31318:	beq	31330 <__assert_fail@plt+0x1e774>
   3131c:	ldr	r1, [sp, #64]	; 0x40
   31320:	ldr	r2, [r1]
   31324:	mov	r1, #0
   31328:	cmp	r2, #0
   3132c:	movwgt	r1, #1
   31330:	ldr	r2, [sp, #44]	; 0x2c
   31334:	ldr	r4, [sp, #92]	; 0x5c
   31338:	cmp	r1, #0
   3133c:	ldr	r6, [r2]
   31340:	movw	r2, #14664	; 0x3948
   31344:	movt	r2, #4
   31348:	vldr	d16, [r2]
   3134c:	ldr	r2, [r2, #8]
   31350:	str	r2, [fp, #-56]	; 0xffffffc8
   31354:	mov	r2, #16
   31358:	vstr	d16, [fp, #-64]	; 0xffffffc0
   3135c:	str	r2, [fp, #-204]	; 0xffffff34
   31360:	sub	r2, fp, #208	; 0xd0
   31364:	str	r0, [fp, #-208]	; 0xffffff30
   31368:	add	r9, r2, #12
   3136c:	mov	r2, #0
   31370:	str	r9, [fp, #-200]	; 0xffffff38
   31374:	beq	31398 <__assert_fail@plt+0x1e7dc>
   31378:	mov	r0, #48	; 0x30
   3137c:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   31380:	cmp	r0, #0
   31384:	str	r0, [fp, #-56]	; 0xffffffc8
   31388:	beq	31aa0 <__assert_fail@plt+0x1eee4>
   3138c:	ldr	r0, [fp, #-208]	; 0xffffff30
   31390:	sub	r1, fp, #64	; 0x40
   31394:	mov	r2, r1
   31398:	ldr	sl, [r6, #72]	; 0x48
   3139c:	mov	r1, #0
   313a0:	cmp	r0, r4
   313a4:	str	r6, [sp, #104]	; 0x68
   313a8:	str	r2, [sp, #108]	; 0x6c
   313ac:	str	r1, [fp, #-44]	; 0xffffffd4
   313b0:	str	r1, [fp, #-48]	; 0xffffffd0
   313b4:	str	r1, [fp, #-40]	; 0xffffffd8
   313b8:	bcs	3144c <__assert_fail@plt+0x1e890>
   313bc:	sub	r0, fp, #208	; 0xd0
   313c0:	mov	r1, r4
   313c4:	mov	r2, r9
   313c8:	mov	r3, #8
   313cc:	bl	3cb00 <__assert_fail@plt+0x29f44>
   313d0:	cmp	r0, #0
   313d4:	bne	31450 <__assert_fail@plt+0x1e894>
   313d8:	ldr	r0, [fp, #-200]	; 0xffffff38
   313dc:	ldr	r6, [sp, #108]	; 0x6c
   313e0:	mov	r4, r9
   313e4:	cmp	r0, r9
   313e8:	beq	313f0 <__assert_fail@plt+0x1e834>
   313ec:	bl	2c048 <__assert_fail@plt+0x1948c>
   313f0:	mov	r0, #16
   313f4:	str	r0, [fp, #-204]	; 0xffffff34
   313f8:	mov	r0, #0
   313fc:	str	r0, [fp, #-208]	; 0xffffff30
   31400:	mov	r0, r6
   31404:	str	r4, [fp, #-200]	; 0xffffff38
   31408:	bl	3b75c <__assert_fail@plt+0x28ba0>
   3140c:	ldr	r8, [sp, #36]	; 0x24
   31410:	b	31a40 <__assert_fail@plt+0x1ee84>
   31414:	ldr	r1, [r3, #8]
   31418:	cmp	r1, #0
   3141c:	beq	3142c <__assert_fail@plt+0x1e870>
   31420:	ldrsb	r1, [r9, #28]
   31424:	cmp	r1, #0
   31428:	blt	30404 <__assert_fail@plt+0x1d848>
   3142c:	mov	r1, #0
   31430:	cmp	r7, #0
   31434:	str	r1, [sp, #96]	; 0x60
   31438:	beq	31a98 <__assert_fail@plt+0x1eedc>
   3143c:	cmp	r0, #0
   31440:	mov	r7, #0
   31444:	bne	31bec <__assert_fail@plt+0x1f030>
   31448:	b	30408 <__assert_fail@plt+0x1d84c>
   3144c:	str	r4, [fp, #-208]	; 0xffffff30
   31450:	ldr	r6, [fp, #20]
   31454:	ldr	r0, [fp, #-200]	; 0xffffff38
   31458:	lsl	r2, r4, #3
   3145c:	str	r2, [sp, #96]	; 0x60
   31460:	mov	r1, r6
   31464:	str	r0, [sp, #100]	; 0x64
   31468:	bl	125c8 <memcpy@plt>
   3146c:	ldr	r7, [r6]
   31470:	ldr	r1, [r6, #4]
   31474:	mov	r0, #0
   31478:	cmp	r7, r1
   3147c:	str	r7, [fp, #-36]	; 0xffffffdc
   31480:	ble	314b4 <__assert_fail@plt+0x1e8f8>
   31484:	bl	2c048 <__assert_fail@plt+0x1948c>
   31488:	ldr	r0, [fp, #-200]	; 0xffffff38
   3148c:	cmp	r0, r9
   31490:	beq	31498 <__assert_fail@plt+0x1e8dc>
   31494:	bl	2c048 <__assert_fail@plt+0x1948c>
   31498:	mov	r0, #16
   3149c:	mov	r4, #0
   314a0:	str	r0, [fp, #-204]	; 0xffffff34
   314a4:	ldr	r0, [sp, #108]	; 0x6c
   314a8:	str	r4, [fp, #-208]	; 0xffffff30
   314ac:	str	r9, [fp, #-200]	; 0xffffff38
   314b0:	b	31a78 <__assert_fail@plt+0x1eebc>
   314b4:	ldr	r1, [sp, #104]	; 0x68
   314b8:	lsl	r0, r4, #4
   314bc:	str	r9, [sp, #88]	; 0x58
   314c0:	str	r0, [sp, #80]	; 0x50
   314c4:	ldr	r0, [r1]
   314c8:	add	r1, r0, sl, lsl #3
   314cc:	ldr	r3, [r1, #4]
   314d0:	uxtb	r2, r3
   314d4:	cmp	r2, #9
   314d8:	beq	31508 <__assert_fail@plt+0x1e94c>
   314dc:	cmp	r2, #8
   314e0:	bne	31570 <__assert_fail@plt+0x1e9b4>
   314e4:	ldr	r0, [r0, sl, lsl #3]
   314e8:	add	r0, r0, #1
   314ec:	cmp	r0, r4
   314f0:	bge	31570 <__assert_fail@plt+0x1e9b4>
   314f4:	ldr	r1, [fp, #20]
   314f8:	str	r7, [r1, r0, lsl #3]!
   314fc:	mvn	r0, #0
   31500:	str	r0, [r1, #4]
   31504:	b	31570 <__assert_fail@plt+0x1e9b4>
   31508:	ldr	r0, [r0, sl, lsl #3]
   3150c:	add	r0, r0, #1
   31510:	cmp	r0, r4
   31514:	bge	31570 <__assert_fail@plt+0x1e9b4>
   31518:	ldr	r1, [fp, #20]
   3151c:	ldr	r2, [r1, r0, lsl #3]
   31520:	cmp	r2, r7
   31524:	bge	31538 <__assert_fail@plt+0x1e97c>
   31528:	add	r0, r1, r0, lsl #3
   3152c:	str	r7, [r0, #4]
   31530:	ldr	r0, [sp, #100]	; 0x64
   31534:	b	31558 <__assert_fail@plt+0x1e99c>
   31538:	tst	r3, #524288	; 0x80000
   3153c:	beq	31564 <__assert_fail@plt+0x1e9a8>
   31540:	ldr	r1, [sp, #100]	; 0x64
   31544:	ldr	r1, [r1, r0, lsl #3]
   31548:	cmn	r1, #1
   3154c:	beq	31564 <__assert_fail@plt+0x1e9a8>
   31550:	ldr	r0, [fp, #20]
   31554:	ldr	r1, [sp, #100]	; 0x64
   31558:	ldr	r2, [sp, #96]	; 0x60
   3155c:	bl	125c8 <memcpy@plt>
   31560:	b	31570 <__assert_fail@plt+0x1e9b4>
   31564:	ldr	r1, [fp, #20]
   31568:	add	r0, r1, r0, lsl #3
   3156c:	str	r7, [r0, #4]
   31570:	ldr	r0, [fp, #20]
   31574:	ldr	r0, [r0, #4]
   31578:	cmp	r7, r0
   3157c:	ldreq	r0, [sp, #208]	; 0xd0
   31580:	cmpeq	sl, r0
   31584:	beq	315ac <__assert_fail@plt+0x1e9f0>
   31588:	ldr	r7, [sp, #108]	; 0x6c
   3158c:	cmp	r7, #0
   31590:	beq	31618 <__assert_fail@plt+0x1ea5c>
   31594:	sub	r0, fp, #48	; 0x30
   31598:	mov	r1, sl
   3159c:	bl	36d0c <__assert_fail@plt+0x24150>
   315a0:	cmp	r0, #0
   315a4:	bne	315b8 <__assert_fail@plt+0x1e9fc>
   315a8:	b	31618 <__assert_fail@plt+0x1ea5c>
   315ac:	ldr	r7, [sp, #108]	; 0x6c
   315b0:	cmp	r7, #0
   315b4:	beq	31a48 <__assert_fail@plt+0x1ee8c>
   315b8:	mov	r0, #0
   315bc:	ldr	r3, [fp, #20]
   315c0:	ldr	r1, [r3, r0, lsl #3]
   315c4:	cmp	r1, #0
   315c8:	blt	315dc <__assert_fail@plt+0x1ea20>
   315cc:	add	r1, r3, r0, lsl #3
   315d0:	ldr	r1, [r1, #4]
   315d4:	cmn	r1, #1
   315d8:	beq	315ec <__assert_fail@plt+0x1ea30>
   315dc:	add	r0, r0, #1
   315e0:	cmp	r0, r4
   315e4:	bcc	315bc <__assert_fail@plt+0x1ea00>
   315e8:	b	31a48 <__assert_fail@plt+0x1ee8c>
   315ec:	ldr	r0, [sp, #100]	; 0x64
   315f0:	sub	r1, fp, #36	; 0x24
   315f4:	mov	r2, r4
   315f8:	str	r0, [sp]
   315fc:	sub	r0, fp, #48	; 0x30
   31600:	str	r0, [sp, #4]
   31604:	mov	r0, r7
   31608:	bl	3b7c4 <__assert_fail@plt+0x28c08>
   3160c:	mov	sl, r0
   31610:	cmn	r0, #1
   31614:	ble	31a48 <__assert_fail@plt+0x1ee8c>
   31618:	ldr	r6, [sp, #196]	; 0xc4
   3161c:	ldr	r0, [r6]
   31620:	add	r1, r0, sl, lsl #3
   31624:	ldr	r1, [r1, #4]
   31628:	tst	r1, #8
   3162c:	bne	316ec <__assert_fail@plt+0x1eb30>
   31630:	tst	r1, #1048576	; 0x100000
   31634:	bne	31784 <__assert_fail@plt+0x1ebc8>
   31638:	uxtb	r1, r1
   3163c:	cmp	r1, #4
   31640:	bne	317a8 <__assert_fail@plt+0x1ebec>
   31644:	ldr	r0, [r0, sl, lsl #3]
   31648:	ldr	r1, [sp, #92]	; 0x5c
   3164c:	mov	r4, #0
   31650:	add	r0, r0, #1
   31654:	cmp	r0, r1
   31658:	ldrlt	r1, [fp, #20]
   3165c:	ldrlt	r2, [r1, r0, lsl #3]!
   31660:	ldrlt	r1, [r1, #4]
   31664:	sublt	r4, r1, r2
   31668:	cmp	r7, #0
   3166c:	beq	3187c <__assert_fail@plt+0x1ecc0>
   31670:	ldr	r1, [sp, #92]	; 0x5c
   31674:	cmp	r0, r1
   31678:	bge	3181c <__assert_fail@plt+0x1ec60>
   3167c:	ldr	r1, [fp, #20]
   31680:	ldr	r1, [r1, r0, lsl #3]
   31684:	cmn	r1, #1
   31688:	beq	3181c <__assert_fail@plt+0x1ec60>
   3168c:	ldr	r2, [fp, #20]
   31690:	add	r0, r2, r0, lsl #3
   31694:	ldr	r0, [r0, #4]
   31698:	cmn	r0, #1
   3169c:	beq	3181c <__assert_fail@plt+0x1ec60>
   316a0:	cmp	r4, #0
   316a4:	beq	31928 <__assert_fail@plt+0x1ed6c>
   316a8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   316ac:	ldr	r0, [sp, #140]	; 0x8c
   316b0:	sub	r0, r0, r7
   316b4:	cmp	r0, r4
   316b8:	blt	3181c <__assert_fail@plt+0x1ec60>
   316bc:	ldr	r2, [sp, #116]	; 0x74
   316c0:	add	r0, r2, r1
   316c4:	add	r1, r2, r7
   316c8:	mov	r2, r4
   316cc:	bl	12628 <memcmp@plt>
   316d0:	cmp	r0, #0
   316d4:	bne	3181c <__assert_fail@plt+0x1ec60>
   316d8:	ldr	r0, [r6, #12]
   316dc:	add	r7, r7, r4
   316e0:	ldr	r9, [r0, sl, lsl #2]
   316e4:	str	r7, [fp, #-36]	; 0xffffffdc
   316e8:	b	317ec <__assert_fail@plt+0x1ec30>
   316ec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   316f0:	ldr	r0, [sp, #212]	; 0xd4
   316f4:	ldr	r4, [r6, #20]
   316f8:	ldr	r7, [r0, r1, lsl #2]
   316fc:	str	r1, [sp, #76]	; 0x4c
   31700:	sub	r0, fp, #48	; 0x30
   31704:	mov	r1, sl
   31708:	bl	36d0c <__assert_fail@plt+0x24150>
   3170c:	cmp	r0, #0
   31710:	bne	31728 <__assert_fail@plt+0x1eb6c>
   31714:	sub	r0, fp, #48	; 0x30
   31718:	mov	r1, sl
   3171c:	bl	36af4 <__assert_fail@plt+0x23f38>
   31720:	cmp	r0, #0
   31724:	beq	31a08 <__assert_fail@plt+0x1ee4c>
   31728:	add	r0, sl, sl, lsl #1
   3172c:	add	r0, r4, r0, lsl #2
   31730:	ldr	r4, [r0, #4]
   31734:	cmp	r4, #1
   31738:	blt	3181c <__assert_fail@plt+0x1ec60>
   3173c:	add	r6, r7, #4
   31740:	ldr	r7, [r0, #8]
   31744:	mov	r8, #0
   31748:	mvn	sl, #0
   3174c:	ldr	r9, [r7, r8, lsl #2]
   31750:	mov	r0, r6
   31754:	mov	r1, r9
   31758:	bl	36d0c <__assert_fail@plt+0x24150>
   3175c:	cmp	r0, #0
   31760:	beq	31770 <__assert_fail@plt+0x1ebb4>
   31764:	cmn	sl, #1
   31768:	bne	3185c <__assert_fail@plt+0x1eca0>
   3176c:	mov	sl, r9
   31770:	add	r8, r8, #1
   31774:	cmp	r8, r4
   31778:	blt	3174c <__assert_fail@plt+0x1eb90>
   3177c:	mov	r9, sl
   31780:	b	31870 <__assert_fail@plt+0x1ecb4>
   31784:	ldr	r7, [fp, #-36]	; 0xffffffdc
   31788:	mov	r0, r6
   3178c:	mov	r1, sl
   31790:	add	r2, sp, #112	; 0x70
   31794:	mov	r3, r7
   31798:	bl	39668 <__assert_fail@plt+0x26aac>
   3179c:	cmp	r0, #0
   317a0:	bne	317d0 <__assert_fail@plt+0x1ec14>
   317a4:	b	317ac <__assert_fail@plt+0x1ebf0>
   317a8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   317ac:	ldr	r0, [r6]
   317b0:	mov	r2, r7
   317b4:	add	r1, r0, sl, lsl #3
   317b8:	add	r0, sp, #112	; 0x70
   317bc:	bl	39958 <__assert_fail@plt+0x26d9c>
   317c0:	mov	r1, r0
   317c4:	mov	r0, #1
   317c8:	cmp	r1, #0
   317cc:	beq	3181c <__assert_fail@plt+0x1ec60>
   317d0:	ldr	r1, [r6, #12]
   317d4:	add	r7, r0, r7
   317d8:	ldr	r0, [sp, #108]	; 0x6c
   317dc:	ldr	r9, [r1, sl, lsl #2]
   317e0:	cmp	r0, #0
   317e4:	str	r7, [fp, #-36]	; 0xffffffdc
   317e8:	beq	31898 <__assert_fail@plt+0x1ecdc>
   317ec:	ldr	r0, [sp, #204]	; 0xcc
   317f0:	cmp	r7, r0
   317f4:	bgt	3181c <__assert_fail@plt+0x1ec60>
   317f8:	ldr	r0, [sp, #212]	; 0xd4
   317fc:	ldr	r0, [r0, r7, lsl #2]
   31800:	cmp	r0, #0
   31804:	beq	3181c <__assert_fail@plt+0x1ec60>
   31808:	add	r0, r0, #4
   3180c:	mov	r1, r9
   31810:	bl	36d0c <__assert_fail@plt+0x24150>
   31814:	cmp	r0, #0
   31818:	bne	31898 <__assert_fail@plt+0x1ecdc>
   3181c:	ldr	r0, [sp, #100]	; 0x64
   31820:	ldr	r4, [sp, #92]	; 0x5c
   31824:	ldr	r6, [sp, #108]	; 0x6c
   31828:	ldr	r3, [fp, #20]
   3182c:	sub	r1, fp, #36	; 0x24
   31830:	str	r0, [sp]
   31834:	sub	r0, fp, #48	; 0x30
   31838:	mov	r2, r4
   3183c:	str	r0, [sp, #4]
   31840:	mov	r0, r6
   31844:	bl	3b7c4 <__assert_fail@plt+0x28c08>
   31848:	cmp	r0, #0
   3184c:	blt	31c10 <__assert_fail@plt+0x1f054>
   31850:	ldr	r7, [fp, #-36]	; 0xffffffdc
   31854:	mov	sl, r0
   31858:	b	318b0 <__assert_fail@plt+0x1ecf4>
   3185c:	sub	r0, fp, #48	; 0x30
   31860:	mov	r1, sl
   31864:	bl	36d0c <__assert_fail@plt+0x24150>
   31868:	cmp	r0, #0
   3186c:	beq	318cc <__assert_fail@plt+0x1ed10>
   31870:	ldr	r8, [sp, #36]	; 0x24
   31874:	ldr	r7, [sp, #76]	; 0x4c
   31878:	b	318a0 <__assert_fail@plt+0x1ece4>
   3187c:	cmp	r4, #0
   31880:	beq	31928 <__assert_fail@plt+0x1ed6c>
   31884:	ldr	r0, [r6, #12]
   31888:	ldr	r9, [r0, sl, lsl #2]
   3188c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   31890:	add	r7, r0, r4
   31894:	str	r7, [fp, #-36]	; 0xffffffdc
   31898:	mov	r0, #0
   3189c:	str	r0, [fp, #-44]	; 0xffffffd4
   318a0:	cmn	r9, #1
   318a4:	ble	31a00 <__assert_fail@plt+0x1ee44>
   318a8:	ldr	r4, [sp, #92]	; 0x5c
   318ac:	mov	sl, r9
   318b0:	ldr	r0, [fp, #20]
   318b4:	ldr	r9, [sp, #88]	; 0x58
   318b8:	ldr	r1, [sp, #104]	; 0x68
   318bc:	ldr	r0, [r0, #4]
   318c0:	cmp	r7, r0
   318c4:	ble	314c4 <__assert_fail@plt+0x1e908>
   318c8:	b	31bf8 <__assert_fail@plt+0x1f03c>
   318cc:	ldr	r4, [sp, #108]	; 0x6c
   318d0:	ldr	r8, [sp, #36]	; 0x24
   318d4:	ldr	r7, [sp, #76]	; 0x4c
   318d8:	cmp	r4, #0
   318dc:	beq	31974 <__assert_fail@plt+0x1edb8>
   318e0:	ldr	r6, [r4]
   318e4:	ldr	r0, [r4, #4]
   318e8:	add	r1, r6, #1
   318ec:	cmp	r1, r0
   318f0:	str	r1, [r4]
   318f4:	bne	3197c <__assert_fail@plt+0x1edc0>
   318f8:	ldr	r0, [r4, #8]
   318fc:	add	r1, r1, r1, lsl #1
   31900:	lsl	r1, r1, #4
   31904:	bl	2ecdc <__assert_fail@plt+0x1c120>
   31908:	cmp	r0, #0
   3190c:	beq	319f8 <__assert_fail@plt+0x1ee3c>
   31910:	str	r0, [r4, #8]
   31914:	ldr	r7, [sp, #76]	; 0x4c
   31918:	ldr	r1, [r4, #4]
   3191c:	lsl	r1, r1, #1
   31920:	str	r1, [r4, #4]
   31924:	b	31980 <__assert_fail@plt+0x1edc4>
   31928:	sub	r0, fp, #48	; 0x30
   3192c:	mov	r1, sl
   31930:	bl	36af4 <__assert_fail@plt+0x23f38>
   31934:	cmp	r0, #0
   31938:	beq	31a08 <__assert_fail@plt+0x1ee4c>
   3193c:	ldr	r0, [r6, #20]
   31940:	add	r1, sl, sl, lsl #1
   31944:	ldr	r7, [fp, #-36]	; 0xffffffdc
   31948:	add	r0, r0, r1, lsl #2
   3194c:	ldr	r0, [r0, #8]
   31950:	ldr	r9, [r0]
   31954:	ldr	r0, [sp, #212]	; 0xd4
   31958:	ldr	r0, [r0, r7, lsl #2]
   3195c:	mov	r1, r9
   31960:	add	r0, r0, #4
   31964:	bl	36d0c <__assert_fail@plt+0x24150>
   31968:	cmp	r0, #0
   3196c:	bne	318a0 <__assert_fail@plt+0x1ece4>
   31970:	b	317ac <__assert_fail@plt+0x1ebf0>
   31974:	mov	r9, sl
   31978:	b	318a0 <__assert_fail@plt+0x1ece4>
   3197c:	ldr	r0, [r4, #8]
   31980:	add	r1, r6, r6, lsl #1
   31984:	str	r7, [r0, r1, lsl #3]!
   31988:	mov	r7, r1
   3198c:	str	r9, [r0, #4]
   31990:	ldr	r0, [sp, #80]	; 0x50
   31994:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   31998:	ldr	r1, [r4, #8]
   3199c:	mvn	r9, #1
   319a0:	cmp	r0, #0
   319a4:	add	r6, r1, r7, lsl #3
   319a8:	str	r0, [r6, #8]!
   319ac:	beq	31874 <__assert_fail@plt+0x1ecb8>
   319b0:	ldr	r1, [fp, #20]
   319b4:	ldr	r2, [sp, #96]	; 0x60
   319b8:	bl	125c8 <memcpy@plt>
   319bc:	ldr	r0, [r6]
   319c0:	ldr	r1, [sp, #92]	; 0x5c
   319c4:	ldr	r2, [sp, #96]	; 0x60
   319c8:	add	r0, r0, r1, lsl #3
   319cc:	ldr	r1, [sp, #100]	; 0x64
   319d0:	bl	125c8 <memcpy@plt>
   319d4:	ldr	r0, [r4, #8]
   319d8:	sub	r1, fp, #48	; 0x30
   319dc:	add	r0, r0, r7, lsl #3
   319e0:	add	r0, r0, #12
   319e4:	bl	36c90 <__assert_fail@plt+0x240d4>
   319e8:	ldr	r7, [sp, #76]	; 0x4c
   319ec:	cmp	r0, #0
   319f0:	moveq	r9, sl
   319f4:	b	318a0 <__assert_fail@plt+0x1ece4>
   319f8:	mvn	r9, #1
   319fc:	b	31874 <__assert_fail@plt+0x1ecb8>
   31a00:	cmn	r9, #2
   31a04:	bne	3181c <__assert_fail@plt+0x1ec60>
   31a08:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31a0c:	bl	2c048 <__assert_fail@plt+0x1948c>
   31a10:	ldr	r0, [fp, #-200]	; 0xffffff38
   31a14:	ldr	r4, [sp, #88]	; 0x58
   31a18:	cmp	r0, r4
   31a1c:	beq	31a24 <__assert_fail@plt+0x1ee68>
   31a20:	bl	2c048 <__assert_fail@plt+0x1948c>
   31a24:	mov	r0, #16
   31a28:	str	r0, [fp, #-204]	; 0xffffff34
   31a2c:	mov	r0, #0
   31a30:	str	r0, [fp, #-208]	; 0xffffff30
   31a34:	ldr	r0, [sp, #108]	; 0x6c
   31a38:	str	r4, [fp, #-200]	; 0xffffff38
   31a3c:	bl	3b75c <__assert_fail@plt+0x28ba0>
   31a40:	mov	r4, #12
   31a44:	b	31a7c <__assert_fail@plt+0x1eec0>
   31a48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31a4c:	bl	2c048 <__assert_fail@plt+0x1948c>
   31a50:	ldr	r0, [fp, #-200]	; 0xffffff38
   31a54:	cmp	r0, r9
   31a58:	beq	31a60 <__assert_fail@plt+0x1eea4>
   31a5c:	bl	2c048 <__assert_fail@plt+0x1948c>
   31a60:	mov	r0, #16
   31a64:	mov	r4, #0
   31a68:	str	r0, [fp, #-204]	; 0xffffff34
   31a6c:	str	r4, [fp, #-208]	; 0xffffff30
   31a70:	str	r9, [fp, #-200]	; 0xffffff38
   31a74:	mov	r0, r7
   31a78:	bl	3b75c <__assert_fail@plt+0x28ba0>
   31a7c:	ldr	sl, [fp, #20]
   31a80:	cmp	r4, #0
   31a84:	bne	31bb4 <__assert_fail@plt+0x1eff8>
   31a88:	ldrb	r1, [sp, #188]	; 0xbc
   31a8c:	ldr	r2, [fp, #16]
   31a90:	add	r0, sl, #4
   31a94:	b	31ae8 <__assert_fail@plt+0x1ef2c>
   31a98:	mov	r7, #0
   31a9c:	b	30408 <__assert_fail@plt+0x1d84c>
   31aa0:	mov	r4, #12
   31aa4:	b	31a80 <__assert_fail@plt+0x1eec4>
   31aa8:	ldr	r7, [sp, #140]	; 0x8c
   31aac:	ldr	r6, [sp, #32]
   31ab0:	ldr	ip, [sp, #124]	; 0x7c
   31ab4:	cmp	r3, r7
   31ab8:	mov	r4, r6
   31abc:	addne	r4, ip, r3, lsl #2
   31ac0:	ldr	r3, [r4]
   31ac4:	str	r3, [r0, #-4]
   31ac8:	ldr	r4, [r0]
   31acc:	cmp	r4, r7
   31ad0:	addne	r6, ip, r4, lsl #2
   31ad4:	ldr	r7, [r6]
   31ad8:	add	r6, sl, r5, lsl #3
   31adc:	add	r6, r6, #4
   31ae0:	str	r7, [r0]
   31ae4:	b	31b04 <__assert_fail@plt+0x1ef48>
   31ae8:	ldr	r3, [r0, #-4]
   31aec:	cmn	r3, #1
   31af0:	beq	31b18 <__assert_fail@plt+0x1ef5c>
   31af4:	cmp	r1, #0
   31af8:	bne	31aa8 <__assert_fail@plt+0x1eeec>
   31afc:	ldr	r7, [r0]
   31b00:	mov	r6, r0
   31b04:	ldr	r4, [fp, #-212]	; 0xffffff2c
   31b08:	add	r3, r3, r4
   31b0c:	str	r3, [r0, #-4]
   31b10:	add	r3, r7, r4
   31b14:	str	r3, [r6]
   31b18:	sub	r2, r2, #1
   31b1c:	add	r0, r0, #8
   31b20:	add	r5, r5, #1
   31b24:	cmp	r8, r2
   31b28:	bne	31ae8 <__assert_fail@plt+0x1ef2c>
   31b2c:	ldr	r0, [sp, #92]	; 0x5c
   31b30:	cmp	r8, #1
   31b34:	blt	31b48 <__assert_fail@plt+0x1ef8c>
   31b38:	add	r0, sl, r0, lsl #3
   31b3c:	lsl	r2, r8, #3
   31b40:	mov	r1, #255	; 0xff
   31b44:	bl	12904 <memset@plt>
   31b48:	ldr	r0, [sp, #84]	; 0x54
   31b4c:	mov	r4, #0
   31b50:	ldr	r0, [r0, #132]	; 0x84
   31b54:	cmp	r0, #0
   31b58:	beq	31bb4 <__assert_fail@plt+0x1eff8>
   31b5c:	ldr	r1, [sp, #92]	; 0x5c
   31b60:	cmp	r1, #2
   31b64:	bcc	31bb4 <__assert_fail@plt+0x1eff8>
   31b68:	ldr	r1, [fp, #16]
   31b6c:	mov	r2, #0
   31b70:	sub	r1, r1, #1
   31b74:	sub	r1, r1, r8
   31b78:	ldr	r3, [r0, r2, lsl #2]
   31b7c:	cmp	r2, r3
   31b80:	beq	31ba4 <__assert_fail@plt+0x1efe8>
   31b84:	add	r3, sl, r3, lsl #3
   31b88:	add	r7, sl, r2, lsl #3
   31b8c:	ldr	r3, [r3, #8]
   31b90:	str	r3, [r7, #8]
   31b94:	ldr	r3, [r0, r2, lsl #2]
   31b98:	add	r3, sl, r3, lsl #3
   31b9c:	ldr	r3, [r3, #12]
   31ba0:	str	r3, [r7, #12]
   31ba4:	add	r2, r2, #1
   31ba8:	cmp	r1, r2
   31bac:	bne	31b78 <__assert_fail@plt+0x1efbc>
   31bb0:	mov	r4, #0
   31bb4:	ldr	r0, [sp, #212]	; 0xd4
   31bb8:	bl	2c048 <__assert_fail@plt+0x1948c>
   31bbc:	ldr	r0, [sp, #64]	; 0x40
   31bc0:	ldr	r0, [r0]
   31bc4:	cmp	r0, #0
   31bc8:	beq	31be4 <__assert_fail@plt+0x1f028>
   31bcc:	add	r0, sp, #112	; 0x70
   31bd0:	bl	37938 <__assert_fail@plt+0x24d7c>
   31bd4:	ldr	r0, [sp, #244]	; 0xf4
   31bd8:	bl	2c048 <__assert_fail@plt+0x1948c>
   31bdc:	ldr	r0, [sp, #228]	; 0xe4
   31be0:	bl	2c048 <__assert_fail@plt+0x1948c>
   31be4:	add	r0, sp, #112	; 0x70
   31be8:	bl	322c4 <__assert_fail@plt+0x1f708>
   31bec:	mov	r0, r4
   31bf0:	sub	sp, fp, #28
   31bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31bf8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31bfc:	b	31484 <__assert_fail@plt+0x1e8c8>
   31c00:	mov	r4, #12
   31c04:	b	31bb4 <__assert_fail@plt+0x1eff8>
   31c08:	mov	r4, r0
   31c0c:	b	31bb4 <__assert_fail@plt+0x1eff8>
   31c10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31c14:	bl	2c048 <__assert_fail@plt+0x1948c>
   31c18:	ldr	r0, [fp, #-200]	; 0xffffff38
   31c1c:	ldr	r4, [sp, #88]	; 0x58
   31c20:	cmp	r0, r4
   31c24:	beq	31c2c <__assert_fail@plt+0x1f070>
   31c28:	bl	2c048 <__assert_fail@plt+0x1948c>
   31c2c:	mov	r0, #16
   31c30:	str	r0, [fp, #-204]	; 0xffffff34
   31c34:	mov	r0, #0
   31c38:	str	r0, [fp, #-208]	; 0xffffff30
   31c3c:	mov	r0, r6
   31c40:	str	r4, [fp, #-200]	; 0xffffff38
   31c44:	bl	3b75c <__assert_fail@plt+0x28ba0>
   31c48:	mov	r4, #1
   31c4c:	b	31a7c <__assert_fail@plt+0x1eec0>
   31c50:	mov	r0, r7
   31c54:	bl	2c048 <__assert_fail@plt+0x1948c>
   31c58:	mov	r0, #0
   31c5c:	bl	2c048 <__assert_fail@plt+0x1948c>
   31c60:	b	31bb4 <__assert_fail@plt+0x1eff8>
   31c64:	mov	r4, r0
   31c68:	add	r0, r5, #76	; 0x4c
   31c6c:	str	r0, [sp, #64]	; 0x40
   31c70:	b	31bb4 <__assert_fail@plt+0x1eff8>
   31c74:	mov	r4, #1
   31c78:	b	31bb4 <__assert_fail@plt+0x1eff8>
   31c7c:	push	{fp, lr}
   31c80:	mov	fp, sp
   31c84:	sub	sp, sp, #16
   31c88:	mov	ip, #1
   31c8c:	str	r2, [sp, #4]
   31c90:	str	ip, [sp, #12]
   31c94:	mov	ip, #0
   31c98:	str	ip, [sp]
   31c9c:	ldr	ip, [fp, #8]
   31ca0:	str	ip, [sp, #8]
   31ca4:	bl	31cb0 <__assert_fail@plt+0x1f0f4>
   31ca8:	mov	sp, fp
   31cac:	pop	{fp, pc}
   31cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31cb4:	add	fp, sp, #28
   31cb8:	sub	sp, sp, #44	; 0x2c
   31cbc:	mvn	r6, #0
   31cc0:	cmp	r3, #0
   31cc4:	blt	31f58 <__assert_fail@plt+0x1f39c>
   31cc8:	mov	r4, r3
   31ccc:	mov	r9, r2
   31cd0:	cmp	r3, r2
   31cd4:	bgt	31f58 <__assert_fail@plt+0x1f39c>
   31cd8:	mov	r7, r0
   31cdc:	ldr	r0, [fp, #8]
   31ce0:	mov	r8, r9
   31ce4:	mov	sl, r1
   31ce8:	movw	r1, #10548	; 0x2934
   31cec:	ldr	r6, [r7]
   31cf0:	movt	r1, #1
   31cf4:	add	r0, r0, r4
   31cf8:	cmp	r0, r9
   31cfc:	bicle	r8, r0, r0, asr #31
   31d00:	movw	r0, #9624	; 0x2598
   31d04:	movt	r0, #1
   31d08:	orrs	r5, r1, r0
   31d0c:	beq	31d18 <__assert_fail@plt+0x1f15c>
   31d10:	add	r0, r6, #136	; 0x88
   31d14:	bl	12574 <pthread_mutex_lock@plt>
   31d18:	ldrb	r0, [r7, #28]
   31d1c:	ldr	r2, [fp, #16]
   31d20:	cmp	r8, r4
   31d24:	ubfx	r1, r0, #5, #2
   31d28:	str	r6, [sp, #20]
   31d2c:	str	r5, [sp, #36]	; 0x24
   31d30:	str	r4, [sp, #32]
   31d34:	str	sl, [sp, #28]
   31d38:	str	r1, [sp, #24]
   31d3c:	ble	31d68 <__assert_fail@plt+0x1f1ac>
   31d40:	tst	r0, #8
   31d44:	bne	31d68 <__assert_fail@plt+0x1f1ac>
   31d48:	ldr	r1, [r7, #16]
   31d4c:	cmp	r1, #0
   31d50:	beq	31d68 <__assert_fail@plt+0x1f1ac>
   31d54:	mov	r0, r7
   31d58:	mov	r4, r2
   31d5c:	bl	2fa48 <__assert_fail@plt+0x1ce8c>
   31d60:	ldrb	r0, [r7, #28]
   31d64:	mov	r2, r4
   31d68:	mov	sl, #1
   31d6c:	mov	r6, #0
   31d70:	cmp	r2, #0
   31d74:	str	r7, [fp, #-32]	; 0xffffffe0
   31d78:	beq	31dc4 <__assert_fail@plt+0x1f208>
   31d7c:	ands	r1, r0, #16
   31d80:	bne	31dc4 <__assert_fail@plt+0x1f208>
   31d84:	and	r0, r0, #6
   31d88:	cmp	r0, #4
   31d8c:	bne	31db4 <__assert_fail@plt+0x1f1f8>
   31d90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31d94:	ldr	sl, [r2]
   31d98:	ldr	r0, [r0, #24]
   31d9c:	cmp	sl, r0
   31da0:	bhi	31dbc <__assert_fail@plt+0x1f200>
   31da4:	cmp	sl, #1
   31da8:	movwlt	r2, #0
   31dac:	movwlt	sl, #1
   31db0:	b	31dc0 <__assert_fail@plt+0x1f204>
   31db4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31db8:	ldr	r0, [r0, #24]
   31dbc:	add	sl, r0, #1
   31dc0:	mov	r6, r2
   31dc4:	lsl	r0, sl, #3
   31dc8:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   31dcc:	cmp	r0, #0
   31dd0:	beq	31f64 <__assert_fail@plt+0x1f3a8>
   31dd4:	mov	r4, r0
   31dd8:	ldr	r0, [fp, #12]
   31ddc:	str	r8, [sp]
   31de0:	mov	r2, r9
   31de4:	stmib	sp, {r0, sl}
   31de8:	str	r4, [sp, #12]
   31dec:	ldr	r0, [sp, #24]
   31df0:	ldr	r5, [sp, #32]
   31df4:	ldr	r1, [sp, #28]
   31df8:	str	r0, [sp, #16]
   31dfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31e00:	mov	r3, r5
   31e04:	bl	30324 <__assert_fail@plt+0x1d768>
   31e08:	cmp	r0, #0
   31e0c:	beq	31e20 <__assert_fail@plt+0x1f264>
   31e10:	mvn	r6, #1
   31e14:	cmp	r0, #1
   31e18:	mvneq	r6, #0
   31e1c:	b	31f38 <__assert_fail@plt+0x1f37c>
   31e20:	cmp	r6, #0
   31e24:	beq	31f1c <__assert_fail@plt+0x1f360>
   31e28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31e2c:	add	r9, sl, #1
   31e30:	ldrb	r0, [r0, #28]
   31e34:	ubfx	r0, r0, #1, #2
   31e38:	cmp	r0, #1
   31e3c:	beq	31e88 <__assert_fail@plt+0x1f2cc>
   31e40:	mov	r8, #2
   31e44:	cmp	r0, #0
   31e48:	bne	31e98 <__assert_fail@plt+0x1f2dc>
   31e4c:	lsl	r8, r9, #2
   31e50:	mov	r0, r8
   31e54:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   31e58:	mov	r7, #0
   31e5c:	cmp	r0, #0
   31e60:	str	r0, [r6, #4]
   31e64:	beq	31f00 <__assert_fail@plt+0x1f344>
   31e68:	mov	r0, r8
   31e6c:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   31e70:	cmp	r0, #0
   31e74:	str	r0, [r6, #8]
   31e78:	beq	31fb8 <__assert_fail@plt+0x1f3fc>
   31e7c:	str	r9, [r6]
   31e80:	mov	r8, #1
   31e84:	b	31e98 <__assert_fail@plt+0x1f2dc>
   31e88:	ldr	r0, [r6]
   31e8c:	mov	r8, #1
   31e90:	cmp	r9, r0
   31e94:	bhi	31f70 <__assert_fail@plt+0x1f3b4>
   31e98:	cmp	sl, #1
   31e9c:	blt	31ecc <__assert_fail@plt+0x1f310>
   31ea0:	ldmib	r6, {r1, r2}
   31ea4:	add	r0, r4, #4
   31ea8:	mov	r3, sl
   31eac:	ldr	r7, [r0, #-4]
   31eb0:	subs	r3, r3, #1
   31eb4:	str	r7, [r1], #4
   31eb8:	ldr	r7, [r0]
   31ebc:	add	r0, r0, #8
   31ec0:	str	r7, [r2], #4
   31ec4:	bne	31eac <__assert_fail@plt+0x1f2f0>
   31ec8:	b	31ed0 <__assert_fail@plt+0x1f314>
   31ecc:	mov	sl, #0
   31ed0:	ldr	r0, [r6]
   31ed4:	cmp	sl, r0
   31ed8:	bcs	31efc <__assert_fail@plt+0x1f340>
   31edc:	ldmib	r6, {r0, r1}
   31ee0:	mvn	r2, #0
   31ee4:	str	r2, [r1, sl, lsl #2]
   31ee8:	str	r2, [r0, sl, lsl #2]
   31eec:	add	sl, sl, #1
   31ef0:	ldr	r3, [r6]
   31ef4:	cmp	sl, r3
   31ef8:	bcc	31ee4 <__assert_fail@plt+0x1f328>
   31efc:	mov	r7, r8
   31f00:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31f04:	cmp	r7, #0
   31f08:	ldrb	r0, [r1, #28]
   31f0c:	and	r0, r0, #249	; 0xf9
   31f10:	orr	r0, r0, r7, lsl #1
   31f14:	strb	r0, [r1, #28]
   31f18:	beq	31f34 <__assert_fail@plt+0x1f378>
   31f1c:	ldr	r0, [fp, #20]
   31f20:	cmp	r0, #0
   31f24:	ldreq	r6, [r4]
   31f28:	ldrne	r0, [r4, #4]
   31f2c:	subne	r6, r0, r5
   31f30:	b	31f38 <__assert_fail@plt+0x1f37c>
   31f34:	mvn	r6, #1
   31f38:	ldr	r5, [sp, #36]	; 0x24
   31f3c:	mov	r0, r4
   31f40:	bl	2c048 <__assert_fail@plt+0x1948c>
   31f44:	cmp	r5, #0
   31f48:	beq	31f58 <__assert_fail@plt+0x1f39c>
   31f4c:	ldr	r0, [sp, #20]
   31f50:	add	r0, r0, #136	; 0x88
   31f54:	bl	12430 <pthread_mutex_unlock@plt>
   31f58:	mov	r0, r6
   31f5c:	sub	sp, fp, #28
   31f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31f64:	ldr	r5, [sp, #36]	; 0x24
   31f68:	mvn	r6, #1
   31f6c:	b	31f44 <__assert_fail@plt+0x1f388>
   31f70:	ldr	r0, [r6, #4]
   31f74:	lsl	r1, r9, #2
   31f78:	str	r1, [sp, #28]
   31f7c:	bl	2ecdc <__assert_fail@plt+0x1c120>
   31f80:	mov	r7, #0
   31f84:	cmp	r0, #0
   31f88:	str	r0, [sp, #24]
   31f8c:	beq	31f00 <__assert_fail@plt+0x1f344>
   31f90:	ldr	r0, [r6, #8]
   31f94:	ldr	r1, [sp, #28]
   31f98:	bl	2ecdc <__assert_fail@plt+0x1c120>
   31f9c:	cmp	r0, #0
   31fa0:	beq	31fc4 <__assert_fail@plt+0x1f408>
   31fa4:	ldr	r1, [sp, #24]
   31fa8:	str	r9, [r6]
   31fac:	str	r1, [r6, #4]
   31fb0:	str	r0, [r6, #8]
   31fb4:	b	31e98 <__assert_fail@plt+0x1f2dc>
   31fb8:	ldr	r0, [r6, #4]
   31fbc:	bl	2c048 <__assert_fail@plt+0x1948c>
   31fc0:	b	31f00 <__assert_fail@plt+0x1f344>
   31fc4:	ldr	r0, [sp, #24]
   31fc8:	b	31fbc <__assert_fail@plt+0x1f400>
   31fcc:	push	{fp, lr}
   31fd0:	mov	fp, sp
   31fd4:	sub	sp, sp, #16
   31fd8:	mov	ip, #0
   31fdc:	str	r2, [sp, #4]
   31fe0:	str	ip, [sp, #12]
   31fe4:	ldr	ip, [fp, #12]
   31fe8:	str	ip, [sp, #8]
   31fec:	ldr	ip, [fp, #8]
   31ff0:	str	ip, [sp]
   31ff4:	bl	31cb0 <__assert_fail@plt+0x1f0f4>
   31ff8:	mov	sp, fp
   31ffc:	pop	{fp, pc}
   32000:	push	{fp, lr}
   32004:	mov	fp, sp
   32008:	sub	sp, sp, #24
   3200c:	mov	ip, #1
   32010:	str	ip, [sp, #20]
   32014:	mov	ip, #0
   32018:	str	ip, [sp, #8]
   3201c:	ldr	ip, [fp, #20]
   32020:	str	ip, [sp, #16]
   32024:	ldr	ip, [fp, #16]
   32028:	str	ip, [sp, #12]
   3202c:	ldr	ip, [fp, #12]
   32030:	str	ip, [sp, #4]
   32034:	ldr	ip, [fp, #8]
   32038:	str	ip, [sp]
   3203c:	bl	32048 <__assert_fail@plt+0x1f48c>
   32040:	mov	sp, fp
   32044:	pop	{fp, pc}
   32048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3204c:	add	fp, sp, #28
   32050:	sub	sp, sp, #20
   32054:	ldr	r4, [fp, #8]
   32058:	mov	r8, r1
   3205c:	mov	r1, r0
   32060:	mov	r6, r2
   32064:	orr	r0, r4, r2
   32068:	ldr	r2, [fp, #24]
   3206c:	orr	r0, r0, r2
   32070:	cmp	r0, #0
   32074:	blt	32128 <__assert_fail@plt+0x1f56c>
   32078:	adds	sl, r6, r4
   3207c:	bvs	32128 <__assert_fail@plt+0x1f56c>
   32080:	mov	r5, #0
   32084:	cmp	r4, #1
   32088:	blt	320dc <__assert_fail@plt+0x1f520>
   3208c:	mov	r9, r3
   32090:	cmp	r6, #1
   32094:	blt	320e4 <__assert_fail@plt+0x1f528>
   32098:	mov	r0, sl
   3209c:	mov	r5, r1
   320a0:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   320a4:	cmp	r0, #0
   320a8:	beq	32128 <__assert_fail@plt+0x1f56c>
   320ac:	mov	r1, r8
   320b0:	mov	r2, r6
   320b4:	mov	r7, r0
   320b8:	bl	125c8 <memcpy@plt>
   320bc:	add	r0, r7, r6
   320c0:	mov	r1, r9
   320c4:	mov	r2, r4
   320c8:	bl	125c8 <memcpy@plt>
   320cc:	ldr	r2, [fp, #24]
   320d0:	mov	r1, r5
   320d4:	mov	r5, r7
   320d8:	b	320e8 <__assert_fail@plt+0x1f52c>
   320dc:	mov	r7, r8
   320e0:	b	320e8 <__assert_fail@plt+0x1f52c>
   320e4:	mov	r7, r9
   320e8:	add	r6, fp, #12
   320ec:	ldr	r0, [fp, #28]
   320f0:	ldm	r6, {r3, r4, r6}
   320f4:	str	r4, [sp]
   320f8:	stmib	sp, {r2, r6}
   320fc:	str	r0, [sp, #12]
   32100:	mov	r0, r1
   32104:	mov	r1, r7
   32108:	mov	r2, sl
   3210c:	bl	31cb0 <__assert_fail@plt+0x1f0f4>
   32110:	mov	r4, r0
   32114:	mov	r0, r5
   32118:	bl	2c048 <__assert_fail@plt+0x1948c>
   3211c:	mov	r0, r4
   32120:	sub	sp, fp, #28
   32124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32128:	mvn	r0, #1
   3212c:	sub	sp, fp, #28
   32130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32134:	push	{fp, lr}
   32138:	mov	fp, sp
   3213c:	sub	sp, sp, #24
   32140:	mov	ip, #0
   32144:	str	ip, [sp, #20]
   32148:	ldr	ip, [fp, #24]
   3214c:	str	ip, [sp, #16]
   32150:	ldr	ip, [fp, #20]
   32154:	str	ip, [sp, #12]
   32158:	ldr	ip, [fp, #16]
   3215c:	str	ip, [sp, #8]
   32160:	ldr	ip, [fp, #12]
   32164:	str	ip, [sp, #4]
   32168:	ldr	ip, [fp, #8]
   3216c:	str	ip, [sp]
   32170:	bl	32048 <__assert_fail@plt+0x1f48c>
   32174:	mov	sp, fp
   32178:	pop	{fp, pc}
   3217c:	ldrb	ip, [r0, #28]
   32180:	cmp	r2, #0
   32184:	bic	ip, ip, #6
   32188:	orrne	ip, ip, #2
   3218c:	strb	ip, [r0, #28]
   32190:	ldr	r0, [sp]
   32194:	moveq	r0, r2
   32198:	cmp	r2, #0
   3219c:	moveq	r3, r2
   321a0:	stm	r1, {r2, r3}
   321a4:	str	r0, [r1, #8]
   321a8:	bx	lr
   321ac:	ldr	r1, [r0, #4]
   321b0:	movw	r2, #255	; 0xff
   321b4:	movt	r2, #4
   321b8:	and	r1, r1, r2
   321bc:	cmp	r1, #3
   321c0:	beq	321d4 <__assert_fail@plt+0x1f618>
   321c4:	cmp	r1, #6
   321c8:	bxne	lr
   321cc:	ldr	r0, [r0]
   321d0:	b	3223c <__assert_fail@plt+0x1f680>
   321d4:	ldr	r0, [r0]
   321d8:	b	2c048 <__assert_fail@plt+0x1948c>
   321dc:	push	{r4, sl, fp, lr}
   321e0:	add	fp, sp, #8
   321e4:	mov	r4, r0
   321e8:	ldr	r0, [r0, #24]
   321ec:	bl	2c048 <__assert_fail@plt+0x1948c>
   321f0:	ldr	r0, [r4, #36]	; 0x24
   321f4:	bl	2c048 <__assert_fail@plt+0x1948c>
   321f8:	ldr	r0, [r4, #40]	; 0x28
   321fc:	add	r1, r4, #4
   32200:	cmp	r0, r1
   32204:	beq	32218 <__assert_fail@plt+0x1f65c>
   32208:	ldr	r0, [r0, #8]
   3220c:	bl	2c048 <__assert_fail@plt+0x1948c>
   32210:	ldr	r0, [r4, #40]	; 0x28
   32214:	bl	2c048 <__assert_fail@plt+0x1948c>
   32218:	ldr	r0, [r4, #12]
   3221c:	bl	2c048 <__assert_fail@plt+0x1948c>
   32220:	ldr	r0, [r4, #48]	; 0x30
   32224:	bl	2c048 <__assert_fail@plt+0x1948c>
   32228:	ldr	r0, [r4, #44]	; 0x2c
   3222c:	bl	2c048 <__assert_fail@plt+0x1948c>
   32230:	mov	r0, r4
   32234:	pop	{r4, sl, fp, lr}
   32238:	b	2c048 <__assert_fail@plt+0x1948c>
   3223c:	push	{r4, sl, fp, lr}
   32240:	add	fp, sp, #8
   32244:	mov	r4, r0
   32248:	ldr	r0, [r0]
   3224c:	bl	2c048 <__assert_fail@plt+0x1948c>
   32250:	ldr	r0, [r4, #4]
   32254:	bl	2c048 <__assert_fail@plt+0x1948c>
   32258:	ldr	r0, [r4, #8]
   3225c:	bl	2c048 <__assert_fail@plt+0x1948c>
   32260:	ldr	r0, [r4, #12]
   32264:	bl	2c048 <__assert_fail@plt+0x1948c>
   32268:	mov	r0, r4
   3226c:	pop	{r4, sl, fp, lr}
   32270:	b	2c048 <__assert_fail@plt+0x1948c>
   32274:	push	{r4, r5, fp, lr}
   32278:	add	fp, sp, #8
   3227c:	ldr	r4, [r0]
   32280:	ldr	r0, [r4, #56]	; 0x38
   32284:	cmp	r0, #0
   32288:	beq	322a0 <__assert_fail@plt+0x1f6e4>
   3228c:	ldr	r5, [r0]
   32290:	bl	2c048 <__assert_fail@plt+0x1948c>
   32294:	cmp	r5, #0
   32298:	mov	r0, r5
   3229c:	bne	3228c <__assert_fail@plt+0x1f6d0>
   322a0:	mov	r0, #31
   322a4:	mov	r5, #0
   322a8:	str	r0, [r4, #64]	; 0x40
   322ac:	str	r5, [r4, #52]	; 0x34
   322b0:	str	r5, [r4, #56]	; 0x38
   322b4:	ldr	r0, [r4, #16]
   322b8:	bl	2c048 <__assert_fail@plt+0x1948c>
   322bc:	str	r5, [r4, #16]
   322c0:	pop	{r4, r5, fp, pc}
   322c4:	push	{r4, sl, fp, lr}
   322c8:	add	fp, sp, #8
   322cc:	mov	r4, r0
   322d0:	ldr	r0, [r0, #8]
   322d4:	bl	2c048 <__assert_fail@plt+0x1948c>
   322d8:	ldr	r0, [r4, #12]
   322dc:	bl	2c048 <__assert_fail@plt+0x1948c>
   322e0:	ldrb	r0, [r4, #75]	; 0x4b
   322e4:	cmp	r0, #0
   322e8:	popeq	{r4, sl, fp, pc}
   322ec:	ldr	r0, [r4, #4]
   322f0:	pop	{r4, sl, fp, lr}
   322f4:	b	2c048 <__assert_fail@plt+0x1948c>
   322f8:	push	{r4, r5, r6, r7, fp, lr}
   322fc:	add	fp, sp, #16
   32300:	mov	r5, r0
   32304:	ldr	r0, [r0, #80]	; 0x50
   32308:	mov	r4, r1
   3230c:	cmp	r0, #2
   32310:	blt	3235c <__assert_fail@plt+0x1f7a0>
   32314:	mov	r6, #12
   32318:	cmn	r4, #-1073741823	; 0xc0000001
   3231c:	bhi	32388 <__assert_fail@plt+0x1f7cc>
   32320:	ldr	r0, [r5, #8]
   32324:	lsl	r7, r4, #2
   32328:	mov	r1, r7
   3232c:	bl	2ecdc <__assert_fail@plt+0x1c120>
   32330:	cmp	r0, #0
   32334:	beq	32388 <__assert_fail@plt+0x1f7cc>
   32338:	str	r0, [r5, #8]
   3233c:	ldr	r0, [r5, #12]
   32340:	cmp	r0, #0
   32344:	beq	3235c <__assert_fail@plt+0x1f7a0>
   32348:	mov	r1, r7
   3234c:	bl	2ecdc <__assert_fail@plt+0x1c120>
   32350:	cmp	r0, #0
   32354:	beq	32388 <__assert_fail@plt+0x1f7cc>
   32358:	str	r0, [r5, #12]
   3235c:	ldrb	r0, [r5, #75]	; 0x4b
   32360:	cmp	r0, #0
   32364:	beq	32380 <__assert_fail@plt+0x1f7c4>
   32368:	ldr	r0, [r5, #4]
   3236c:	mov	r1, r4
   32370:	bl	2ecdc <__assert_fail@plt+0x1c120>
   32374:	cmp	r0, #0
   32378:	beq	32390 <__assert_fail@plt+0x1f7d4>
   3237c:	str	r0, [r5, #4]
   32380:	mov	r6, #0
   32384:	str	r4, [r5, #36]	; 0x24
   32388:	mov	r0, r6
   3238c:	pop	{r4, r5, r6, r7, fp, pc}
   32390:	mov	r6, #12
   32394:	b	32388 <__assert_fail@plt+0x1f7cc>
   32398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3239c:	add	fp, sp, #28
   323a0:	sub	sp, sp, #92	; 0x5c
   323a4:	mov	r4, r0
   323a8:	ldrb	r0, [r0, #74]	; 0x4a
   323ac:	ldr	r2, [r4, #36]	; 0x24
   323b0:	ldr	r1, [r4, #48]	; 0x30
   323b4:	ldr	r5, [r4, #28]
   323b8:	cmp	r2, r1
   323bc:	movgt	r2, r1
   323c0:	cmp	r0, #0
   323c4:	str	r2, [sp, #4]
   323c8:	bne	323e8 <__assert_fail@plt+0x1f82c>
   323cc:	mov	r8, r4
   323d0:	ldr	r0, [r8, #64]!	; 0x40
   323d4:	cmp	r0, #0
   323d8:	bne	323e8 <__assert_fail@plt+0x1f82c>
   323dc:	ldrb	r0, [r4, #76]	; 0x4c
   323e0:	cmp	r0, #0
   323e4:	beq	323f0 <__assert_fail@plt+0x1f834>
   323e8:	ldr	r7, [r4, #32]
   323ec:	b	325bc <__assert_fail@plt+0x1fa00>
   323f0:	ldr	r0, [sp, #4]
   323f4:	cmp	r0, r5
   323f8:	ble	32408 <__assert_fail@plt+0x1f84c>
   323fc:	add	r9, r4, #16
   32400:	mov	sl, r5
   32404:	b	3245c <__assert_fail@plt+0x1f8a0>
   32408:	mov	sl, r5
   3240c:	mov	r7, r5
   32410:	b	326c8 <__assert_fail@plt+0x1fb0c>
   32414:	add	r0, r5, #1
   32418:	cmp	r0, #2
   3241c:	bcc	32430 <__assert_fail@plt+0x1f874>
   32420:	ldr	r0, [r4, #36]	; 0x24
   32424:	ldr	r1, [r4, #48]	; 0x30
   32428:	cmp	r0, r1
   3242c:	blt	325a8 <__assert_fail@plt+0x1f9ec>
   32430:	ldr	r0, [r4, #4]
   32434:	cmn	r5, #1
   32438:	strb	sl, [r0, r7]
   3243c:	ldr	r0, [r4, #8]
   32440:	str	sl, [r0, r7, lsl #2]
   32444:	add	sl, r7, #1
   32448:	bne	3258c <__assert_fail@plt+0x1f9d0>
   3244c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   32450:	ldr	r1, [fp, #-36]	; 0xffffffdc
   32454:	stm	r9, {r0, r1}
   32458:	b	3258c <__assert_fail@plt+0x1f9d0>
   3245c:	ldr	r7, [r4, #24]
   32460:	ldr	r5, [r4]
   32464:	mov	r6, sl
   32468:	add	r0, r7, sl
   3246c:	ldrb	sl, [r5, r0]
   32470:	tst	sl, #128	; 0x80
   32474:	bne	324b8 <__assert_fail@plt+0x1f8fc>
   32478:	mov	r0, r9
   3247c:	bl	12604 <mbsinit@plt>
   32480:	cmp	r0, #0
   32484:	beq	324b8 <__assert_fail@plt+0x1f8fc>
   32488:	mov	r0, sl
   3248c:	bl	12b44 <towupper@plt>
   32490:	cmp	r0, #128	; 0x80
   32494:	bcs	324b0 <__assert_fail@plt+0x1f8f4>
   32498:	ldr	r1, [r4, #4]
   3249c:	add	sl, r6, #1
   324a0:	strb	r0, [r1, r6]
   324a4:	ldr	r1, [r4, #8]
   324a8:	str	r0, [r1, r6, lsl #2]
   324ac:	b	3258c <__assert_fail@plt+0x1f9d0>
   324b0:	ldr	r5, [r4]
   324b4:	ldr	r7, [r4, #24]
   324b8:	ldm	r9, {r0, r1}
   324bc:	mov	r3, r9
   324c0:	str	r0, [fp, #-40]	; 0xffffffd8
   324c4:	ldr	r0, [sp, #4]
   324c8:	str	r1, [fp, #-36]	; 0xffffffdc
   324cc:	sub	r2, r0, r6
   324d0:	add	r0, r5, r7
   324d4:	mov	r7, r6
   324d8:	add	r1, r0, r6
   324dc:	add	r0, sp, #12
   324e0:	bl	2e214 <__assert_fail@plt+0x1b658>
   324e4:	mov	r5, r0
   324e8:	sub	r0, r0, #1
   324ec:	cmn	r0, #4
   324f0:	bhi	32414 <__assert_fail@plt+0x1f858>
   324f4:	ldr	r0, [sp, #12]
   324f8:	bl	12b44 <towupper@plt>
   324fc:	mov	r6, r0
   32500:	ldr	r0, [sp, #12]
   32504:	cmp	r6, r0
   32508:	bne	32528 <__assert_fail@plt+0x1f96c>
   3250c:	ldr	r1, [r4]
   32510:	ldr	r2, [r4, #24]
   32514:	ldr	r0, [r4, #4]
   32518:	add	r1, r1, r2
   3251c:	add	r0, r0, r7
   32520:	add	r1, r1, r7
   32524:	b	32550 <__assert_fail@plt+0x1f994>
   32528:	add	sl, sp, #16
   3252c:	mov	r1, r6
   32530:	sub	r2, fp, #40	; 0x28
   32534:	mov	r0, sl
   32538:	bl	12490 <wcrtomb@plt>
   3253c:	cmp	r5, r0
   32540:	bne	325a0 <__assert_fail@plt+0x1f9e4>
   32544:	ldr	r0, [r4, #4]
   32548:	mov	r1, sl
   3254c:	add	r0, r0, r7
   32550:	mov	r2, r5
   32554:	bl	125c8 <memcpy@plt>
   32558:	ldr	r0, [r4, #8]
   3255c:	add	sl, r7, #1
   32560:	str	r6, [r0, r7, lsl #2]
   32564:	add	r6, r5, r7
   32568:	cmp	sl, r6
   3256c:	bge	3258c <__assert_fail@plt+0x1f9d0>
   32570:	add	r0, r0, r7, lsl #2
   32574:	mvn	r1, #3
   32578:	add	r2, r1, r5, lsl #2
   3257c:	add	r0, r0, #4
   32580:	mov	r1, #255	; 0xff
   32584:	bl	12904 <memset@plt>
   32588:	mov	sl, r6
   3258c:	ldr	r0, [sp, #4]
   32590:	mov	r7, sl
   32594:	cmp	r0, sl
   32598:	bgt	3245c <__assert_fail@plt+0x1f8a0>
   3259c:	b	326c8 <__assert_fail@plt+0x1fb0c>
   325a0:	mov	sl, r7
   325a4:	b	325d4 <__assert_fail@plt+0x1fa18>
   325a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   325ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   325b0:	mov	sl, r7
   325b4:	stm	r9, {r0, r1}
   325b8:	b	326c8 <__assert_fail@plt+0x1fb0c>
   325bc:	ldr	r0, [sp, #4]
   325c0:	cmp	r5, r0
   325c4:	bge	326c4 <__assert_fail@plt+0x1fb08>
   325c8:	add	r8, r4, #64	; 0x40
   325cc:	add	r9, r4, #16
   325d0:	mov	sl, r5
   325d4:	ldm	r9, {r0, r1}
   325d8:	str	r7, [sp]
   325dc:	str	r0, [fp, #-40]	; 0xffffffd8
   325e0:	ldr	r0, [sp, #4]
   325e4:	str	r1, [fp, #-36]	; 0xffffffdc
   325e8:	sub	r2, r0, sl
   325ec:	ldr	r0, [r8]
   325f0:	cmp	r0, #0
   325f4:	bne	326dc <__assert_fail@plt+0x1fb20>
   325f8:	ldr	r0, [r4]
   325fc:	ldr	r1, [r4, #24]
   32600:	add	r0, r0, r1
   32604:	add	r5, r0, r7
   32608:	add	r0, sp, #8
   3260c:	mov	r1, r5
   32610:	mov	r3, r9
   32614:	bl	2e214 <__assert_fail@plt+0x1b658>
   32618:	sub	r8, r0, #1
   3261c:	mov	r6, r0
   32620:	cmn	r8, #4
   32624:	bhi	32730 <__assert_fail@plt+0x1fb74>
   32628:	ldr	r0, [sp, #8]
   3262c:	bl	12b44 <towupper@plt>
   32630:	mov	r7, r0
   32634:	ldr	r0, [sp, #8]
   32638:	cmp	r7, r0
   3263c:	bne	3264c <__assert_fail@plt+0x1fa90>
   32640:	ldr	r0, [r4, #4]
   32644:	mov	r1, r5
   32648:	b	3266c <__assert_fail@plt+0x1fab0>
   3264c:	add	r0, sp, #16
   32650:	sub	r2, fp, #40	; 0x28
   32654:	mov	r1, r7
   32658:	bl	12490 <wcrtomb@plt>
   3265c:	cmp	r0, r6
   32660:	bne	327ac <__assert_fail@plt+0x1fbf0>
   32664:	ldr	r0, [r4, #4]
   32668:	add	r1, sp, #16
   3266c:	add	r0, r0, sl
   32670:	mov	r2, r6
   32674:	bl	125c8 <memcpy@plt>
   32678:	ldrb	r0, [r4, #76]	; 0x4c
   3267c:	cmp	r0, #0
   32680:	bne	328c8 <__assert_fail@plt+0x1fd0c>
   32684:	ldr	r0, [r4, #8]
   32688:	add	r5, r6, sl
   3268c:	add	r1, sl, #1
   32690:	cmp	r1, r5
   32694:	str	r7, [r0, sl, lsl #2]
   32698:	ldr	r7, [sp]
   3269c:	add	r7, r6, r7
   326a0:	bge	326bc <__assert_fail@plt+0x1fb00>
   326a4:	add	r0, r0, r1, lsl #2
   326a8:	mvn	r1, #3
   326ac:	add	r2, r1, r6, lsl #2
   326b0:	mov	r1, #255	; 0xff
   326b4:	bl	12904 <memset@plt>
   326b8:	b	325bc <__assert_fail@plt+0x1fa00>
   326bc:	mov	r5, r1
   326c0:	b	325bc <__assert_fail@plt+0x1fa00>
   326c4:	mov	sl, r5
   326c8:	mov	r0, #0
   326cc:	str	sl, [r4, #28]
   326d0:	str	r7, [r4, #32]
   326d4:	sub	sp, fp, #28
   326d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   326dc:	cmp	r2, #1
   326e0:	add	r5, sp, #16
   326e4:	ldrge	r1, [r4, #80]	; 0x50
   326e8:	cmpge	r1, #1
   326ec:	blt	32608 <__assert_fail@plt+0x1fa4c>
   326f0:	mov	r6, r7
   326f4:	ldr	r7, [r4, #24]
   326f8:	ldr	r3, [r4]
   326fc:	add	r5, sp, #16
   32700:	add	r7, r6, r7
   32704:	add	r3, r3, r7
   32708:	mov	r7, #0
   3270c:	ldrb	r6, [r3, r7]
   32710:	ldrb	r6, [r0, r6]
   32714:	strb	r6, [r5, r7]
   32718:	add	r7, r7, #1
   3271c:	cmp	r7, r2
   32720:	bge	32608 <__assert_fail@plt+0x1fa4c>
   32724:	cmp	r7, r1
   32728:	blt	3270c <__assert_fail@plt+0x1fb50>
   3272c:	b	32608 <__assert_fail@plt+0x1fa4c>
   32730:	add	r0, r6, #1
   32734:	cmp	r0, #2
   32738:	bcc	3274c <__assert_fail@plt+0x1fb90>
   3273c:	ldr	r0, [r4, #36]	; 0x24
   32740:	ldr	r1, [r4, #48]	; 0x30
   32744:	cmp	r0, r1
   32748:	blt	328ec <__assert_fail@plt+0x1fd30>
   3274c:	ldr	r2, [r4, #24]
   32750:	ldr	r7, [sp]
   32754:	ldr	r0, [r4]
   32758:	ldr	r1, [r4, #64]	; 0x40
   3275c:	add	r5, sl, #1
   32760:	add	r2, r2, r7
   32764:	cmp	r1, #0
   32768:	ldrb	r0, [r0, r2]
   3276c:	ldrbne	r0, [r1, r0]
   32770:	ldr	r1, [r4, #4]
   32774:	strb	r0, [r1, sl]
   32778:	ldrb	r1, [r4, #76]	; 0x4c
   3277c:	cmp	r1, #0
   32780:	ldrne	r1, [r4, #12]
   32784:	strne	r7, [r1, sl, lsl #2]
   32788:	add	r7, r7, #1
   3278c:	cmn	r6, #1
   32790:	ldr	r1, [r4, #8]
   32794:	str	r0, [r1, sl, lsl #2]
   32798:	bne	325bc <__assert_fail@plt+0x1fa00>
   3279c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   327a0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   327a4:	stm	r9, {r0, r1}
   327a8:	b	325bc <__assert_fail@plt+0x1fa00>
   327ac:	mov	r2, r0
   327b0:	cmn	r0, #1
   327b4:	beq	32640 <__assert_fail@plt+0x1fa84>
   327b8:	ldr	r1, [r4, #36]	; 0x24
   327bc:	add	r5, r2, sl
   327c0:	cmp	r5, r1
   327c4:	bhi	328ec <__assert_fail@plt+0x1fd30>
   327c8:	ldr	r0, [r4, #12]
   327cc:	cmp	r0, #0
   327d0:	bne	327f0 <__assert_fail@plt+0x1fc34>
   327d4:	lsl	r0, r1, #2
   327d8:	mov	r9, r2
   327dc:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   327e0:	mov	r2, r9
   327e4:	cmp	r0, #0
   327e8:	str	r0, [r4, #12]
   327ec:	beq	32900 <__assert_fail@plt+0x1fd44>
   327f0:	ldrb	r1, [r4, #76]	; 0x4c
   327f4:	cmp	r1, #0
   327f8:	bne	32820 <__assert_fail@plt+0x1fc64>
   327fc:	cmp	sl, #0
   32800:	beq	32818 <__assert_fail@plt+0x1fc5c>
   32804:	mov	r1, #0
   32808:	str	r1, [r0, r1, lsl #2]
   3280c:	add	r1, r1, #1
   32810:	cmp	sl, r1
   32814:	bne	32808 <__assert_fail@plt+0x1fc4c>
   32818:	mov	r0, #1
   3281c:	strb	r0, [r4, #76]	; 0x4c
   32820:	ldr	r0, [r4, #4]
   32824:	add	r1, sp, #16
   32828:	mov	r9, r2
   3282c:	add	r0, r0, sl
   32830:	bl	125c8 <memcpy@plt>
   32834:	ldr	r1, [r4, #8]
   32838:	ldr	r3, [sp]
   3283c:	mov	lr, r9
   32840:	cmp	r9, #2
   32844:	str	r7, [r1, sl, lsl #2]
   32848:	ldr	r0, [r4, #12]
   3284c:	str	r3, [r0, sl, lsl #2]
   32850:	bcc	32888 <__assert_fail@plt+0x1fccc>
   32854:	add	r0, r0, sl, lsl #2
   32858:	add	r1, r1, sl, lsl #2
   3285c:	mov	r2, #1
   32860:	mvn	ip, #0
   32864:	cmp	r2, r6
   32868:	mov	r7, r8
   3286c:	movcc	r7, r2
   32870:	add	r7, r7, r3
   32874:	str	r7, [r0, r2, lsl #2]
   32878:	str	ip, [r1, r2, lsl #2]
   3287c:	add	r2, r2, #1
   32880:	cmp	lr, r2
   32884:	bne	32864 <__assert_fail@plt+0x1fca8>
   32888:	ldr	r0, [r4, #48]	; 0x30
   3288c:	ldr	r2, [r4, #52]	; 0x34
   32890:	sub	r1, lr, r6
   32894:	mov	r7, r3
   32898:	add	r7, r6, r7
   3289c:	add	r0, r0, r1
   328a0:	cmp	r2, r3
   328a4:	str	r0, [r4, #48]	; 0x30
   328a8:	ldrgt	r2, [r4, #56]	; 0x38
   328ac:	addgt	r1, r2, r1
   328b0:	strgt	r1, [r4, #56]	; 0x38
   328b4:	ldr	r1, [r4, #36]	; 0x24
   328b8:	cmp	r1, r0
   328bc:	movgt	r1, r0
   328c0:	str	r1, [sp, #4]
   328c4:	b	325bc <__assert_fail@plt+0x1fa00>
   328c8:	ldr	r0, [r4, #12]
   328cc:	ldr	r1, [sp]
   328d0:	mov	r2, r6
   328d4:	add	r0, r0, sl, lsl #2
   328d8:	str	r1, [r0], #4
   328dc:	add	r1, r1, #1
   328e0:	subs	r2, r2, #1
   328e4:	bne	328d8 <__assert_fail@plt+0x1fd1c>
   328e8:	b	32684 <__assert_fail@plt+0x1fac8>
   328ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   328f0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   328f4:	stm	r9, {r0, r1}
   328f8:	ldr	r7, [sp]
   328fc:	b	326c8 <__assert_fail@plt+0x1fb0c>
   32900:	mov	r0, #12
   32904:	b	326d4 <__assert_fail@plt+0x1fb18>
   32908:	push	{r4, r5, r6, sl, fp, lr}
   3290c:	add	fp, sp, #16
   32910:	mov	r4, r0
   32914:	ldr	r5, [r0, #28]
   32918:	ldr	r6, [r0, #36]	; 0x24
   3291c:	ldr	r0, [r0, #48]	; 0x30
   32920:	cmp	r6, r0
   32924:	movgt	r6, r0
   32928:	cmp	r5, r6
   3292c:	bge	32968 <__assert_fail@plt+0x1fdac>
   32930:	ldr	r0, [r4]
   32934:	ldr	r2, [r4, #24]
   32938:	ldr	r1, [r4, #64]	; 0x40
   3293c:	add	r0, r0, r2
   32940:	cmp	r1, #0
   32944:	ldrb	r0, [r0, r5]
   32948:	ldrbne	r0, [r1, r0]
   3294c:	bl	12a0c <toupper@plt>
   32950:	ldr	r1, [r4, #4]
   32954:	strb	r0, [r1, r5]
   32958:	add	r5, r5, #1
   3295c:	cmp	r5, r6
   32960:	blt	32930 <__assert_fail@plt+0x1fd74>
   32964:	mov	r5, r6
   32968:	str	r5, [r4, #28]
   3296c:	str	r5, [r4, #32]
   32970:	pop	{r4, r5, r6, sl, fp, pc}
   32974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32978:	add	fp, sp, #28
   3297c:	sub	sp, sp, #68	; 0x44
   32980:	mov	r4, r0
   32984:	ldr	r6, [r0, #28]
   32988:	ldr	r7, [r0, #36]	; 0x24
   3298c:	ldr	r0, [r0, #48]	; 0x30
   32990:	cmp	r7, r0
   32994:	movgt	r7, r0
   32998:	cmp	r7, r6
   3299c:	ble	32b3c <__assert_fail@plt+0x1ff80>
   329a0:	add	r8, r4, #16
   329a4:	mov	r5, sp
   329a8:	ldm	r8, {r9, sl}
   329ac:	ldr	r0, [r4, #64]	; 0x40
   329b0:	sub	r2, r7, r6
   329b4:	cmp	r0, #0
   329b8:	bne	32a88 <__assert_fail@plt+0x1fecc>
   329bc:	ldr	r0, [r4]
   329c0:	ldr	r1, [r4, #24]
   329c4:	add	r0, r0, r1
   329c8:	add	r1, r0, r6
   329cc:	mov	r0, r5
   329d0:	mov	r3, r8
   329d4:	bl	2e214 <__assert_fail@plt+0x1b658>
   329d8:	add	r1, r0, #1
   329dc:	cmp	r1, #2
   329e0:	bcc	329fc <__assert_fail@plt+0x1fe40>
   329e4:	cmn	r0, #2
   329e8:	bne	32a38 <__assert_fail@plt+0x1fe7c>
   329ec:	ldr	r0, [r4, #36]	; 0x24
   329f0:	ldr	r1, [r4, #48]	; 0x30
   329f4:	cmp	r0, r1
   329f8:	blt	32b38 <__assert_fail@plt+0x1ff7c>
   329fc:	ldr	r1, [r4, #24]
   32a00:	ldr	r0, [r4]
   32a04:	mov	r2, sl
   32a08:	mov	sl, r5
   32a0c:	add	r1, r1, r6
   32a10:	ldrb	r1, [r0, r1]
   32a14:	str	r1, [sp]
   32a18:	ldr	r0, [r4, #64]	; 0x40
   32a1c:	cmp	r0, #0
   32a20:	ldrbne	r1, [r0, r1]
   32a24:	mov	r0, #1
   32a28:	strne	r1, [sp]
   32a2c:	str	r9, [r8]
   32a30:	str	r2, [r8, #4]
   32a34:	b	32a40 <__assert_fail@plt+0x1fe84>
   32a38:	ldr	r1, [sp]
   32a3c:	mov	sl, r5
   32a40:	ldr	r3, [r4, #8]
   32a44:	add	r5, r0, r6
   32a48:	str	r1, [r3, r6, lsl #2]
   32a4c:	add	r1, r6, #1
   32a50:	cmp	r1, r5
   32a54:	bge	32a74 <__assert_fail@plt+0x1feb8>
   32a58:	mvn	r1, #3
   32a5c:	add	r2, r1, r0, lsl #2
   32a60:	add	r0, r3, r6, lsl #2
   32a64:	mov	r1, #255	; 0xff
   32a68:	add	r0, r0, #4
   32a6c:	bl	12904 <memset@plt>
   32a70:	mov	r1, r5
   32a74:	cmp	r7, r1
   32a78:	mov	r6, r1
   32a7c:	mov	r5, sl
   32a80:	bgt	329a8 <__assert_fail@plt+0x1fdec>
   32a84:	b	32b40 <__assert_fail@plt+0x1ff84>
   32a88:	cmp	r2, #1
   32a8c:	add	r1, sp, #4
   32a90:	blt	329cc <__assert_fail@plt+0x1fe10>
   32a94:	ldr	r1, [r4, #80]	; 0x50
   32a98:	cmp	r1, #1
   32a9c:	add	r1, sp, #4
   32aa0:	blt	329cc <__assert_fail@plt+0x1fe10>
   32aa4:	ldm	r4, {r1, r3}
   32aa8:	mov	lr, r5
   32aac:	ldr	r5, [r4, #24]
   32ab0:	cmp	r2, #2
   32ab4:	add	r5, r6, r5
   32ab8:	ldrb	r1, [r1, r5]
   32abc:	mov	r5, lr
   32ac0:	ldrb	r0, [r0, r1]
   32ac4:	add	r1, sp, #4
   32ac8:	strb	r0, [r3, r6]
   32acc:	strb	r0, [sp, #4]
   32ad0:	blt	329cc <__assert_fail@plt+0x1fe10>
   32ad4:	ldr	r0, [r4, #80]	; 0x50
   32ad8:	add	r1, sp, #4
   32adc:	cmp	r0, #2
   32ae0:	blt	329cc <__assert_fail@plt+0x1fe10>
   32ae4:	mov	r0, #1
   32ae8:	ldm	r4, {r1, ip}
   32aec:	ldr	r5, [r4, #24]
   32af0:	ldr	r3, [r4, #64]	; 0x40
   32af4:	add	r1, r1, r5
   32af8:	add	r1, r1, r6
   32afc:	ldrb	r1, [r1, r0]
   32b00:	ldrb	r1, [r3, r1]
   32b04:	add	r3, ip, r6
   32b08:	strb	r1, [r3, r0]
   32b0c:	add	r3, sp, #4
   32b10:	strb	r1, [r3, r0]
   32b14:	add	r0, r0, #1
   32b18:	cmp	r0, r2
   32b1c:	bge	32b2c <__assert_fail@plt+0x1ff70>
   32b20:	ldr	r1, [r4, #80]	; 0x50
   32b24:	cmp	r0, r1
   32b28:	blt	32ae8 <__assert_fail@plt+0x1ff2c>
   32b2c:	add	r1, sp, #4
   32b30:	mov	r5, lr
   32b34:	b	329cc <__assert_fail@plt+0x1fe10>
   32b38:	stm	r8, {r9, sl}
   32b3c:	mov	r1, r6
   32b40:	str	r1, [r4, #28]
   32b44:	str	r1, [r4, #32]
   32b48:	sub	sp, fp, #28
   32b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32b50:	ldr	ip, [r0, #36]	; 0x24
   32b54:	ldr	r3, [r0, #48]	; 0x30
   32b58:	ldr	r1, [r0, #28]
   32b5c:	cmp	ip, r3
   32b60:	movgt	ip, r3
   32b64:	cmp	r1, ip
   32b68:	bge	32ba4 <__assert_fail@plt+0x1ffe8>
   32b6c:	push	{r4, sl, fp, lr}
   32b70:	add	fp, sp, #8
   32b74:	ldm	r0, {r3, lr}
   32b78:	ldr	r2, [r0, #24]
   32b7c:	ldr	r4, [r0, #64]	; 0x40
   32b80:	add	r2, r3, r2
   32b84:	ldrb	r2, [r2, r1]
   32b88:	ldrb	r2, [r4, r2]
   32b8c:	strb	r2, [lr, r1]
   32b90:	add	r1, r1, #1
   32b94:	cmp	r1, ip
   32b98:	blt	32b74 <__assert_fail@plt+0x1ffb8>
   32b9c:	mov	r1, ip
   32ba0:	pop	{r4, sl, fp, lr}
   32ba4:	str	r1, [r0, #28]
   32ba8:	str	r1, [r0, #32]
   32bac:	bx	lr
   32bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32bb4:	add	fp, sp, #28
   32bb8:	sub	sp, sp, #28
   32bbc:	ldr	r9, [r1]
   32bc0:	mov	r5, r0
   32bc4:	ldr	r8, [fp, #12]
   32bc8:	mov	r6, r2
   32bcc:	str	r1, [sp, #12]
   32bd0:	str	r3, [sp, #16]
   32bd4:	ldr	r0, [r9, #84]	; 0x54
   32bd8:	str	r8, [sp, #4]
   32bdc:	str	r0, [sp, #8]
   32be0:	ldr	r0, [fp, #8]
   32be4:	str	r0, [sp]
   32be8:	mov	r0, r5
   32bec:	bl	333ec <__assert_fail@plt+0x20830>
   32bf0:	mov	r4, r0
   32bf4:	cmp	r0, #0
   32bf8:	bne	32c08 <__assert_fail@plt+0x2004c>
   32bfc:	ldr	r0, [r8]
   32c00:	cmp	r0, #0
   32c04:	bne	32cf8 <__assert_fail@plt+0x2013c>
   32c08:	ldr	r0, [sp, #16]
   32c0c:	ldr	r8, [fp, #8]
   32c10:	mov	r7, #10
   32c14:	orr	sl, r0, #8388608	; 0x800000
   32c18:	ldrb	r0, [r6, #4]
   32c1c:	cmp	r0, #10
   32c20:	bne	32cfc <__assert_fail@plt+0x20140>
   32c24:	mov	r0, r6
   32c28:	mov	r1, r5
   32c2c:	mov	r2, sl
   32c30:	bl	32d60 <__assert_fail@plt+0x201a4>
   32c34:	ldr	r1, [r5, #40]	; 0x28
   32c38:	mov	r2, #0
   32c3c:	add	r0, r1, r0
   32c40:	str	r0, [r5, #40]	; 0x28
   32c44:	ldrb	r0, [r6, #4]
   32c48:	orr	r1, r0, #8
   32c4c:	cmp	r1, #10
   32c50:	bne	32c80 <__assert_fail@plt+0x200c4>
   32c54:	mov	r0, #0
   32c58:	str	r7, [sp, #24]
   32c5c:	mov	r1, r4
   32c60:	add	r3, sp, #20
   32c64:	str	r0, [sp, #20]
   32c68:	mov	r0, r9
   32c6c:	bl	34b94 <__assert_fail@plt+0x21fd8>
   32c70:	mov	r4, r0
   32c74:	cmp	r0, #0
   32c78:	bne	32c18 <__assert_fail@plt+0x2005c>
   32c7c:	b	32cec <__assert_fail@plt+0x20130>
   32c80:	cmp	r8, #0
   32c84:	beq	32c90 <__assert_fail@plt+0x200d4>
   32c88:	cmp	r0, #9
   32c8c:	beq	32c54 <__assert_fail@plt+0x20098>
   32c90:	ldr	r0, [sp, #8]
   32c94:	ldr	r7, [r9, #84]	; 0x54
   32c98:	ldr	r1, [sp, #12]
   32c9c:	ldr	r3, [sp, #16]
   32ca0:	mov	r2, r6
   32ca4:	str	r0, [r9, #84]	; 0x54
   32ca8:	str	r8, [sp]
   32cac:	ldr	r8, [fp, #12]
   32cb0:	mov	r0, r5
   32cb4:	str	r8, [sp, #4]
   32cb8:	bl	333ec <__assert_fail@plt+0x20830>
   32cbc:	mov	r2, r0
   32cc0:	cmp	r0, #0
   32cc4:	bne	32cd4 <__assert_fail@plt+0x20118>
   32cc8:	ldr	r0, [r8]
   32ccc:	cmp	r0, #0
   32cd0:	bne	32d08 <__assert_fail@plt+0x2014c>
   32cd4:	ldr	r0, [r9, #84]	; 0x54
   32cd8:	ldr	r8, [fp, #8]
   32cdc:	orr	r0, r0, r7
   32ce0:	mov	r7, #10
   32ce4:	str	r0, [r9, #84]	; 0x54
   32ce8:	b	32c54 <__assert_fail@plt+0x20098>
   32cec:	ldr	r1, [fp, #12]
   32cf0:	mov	r0, #12
   32cf4:	str	r0, [r1]
   32cf8:	mov	r4, #0
   32cfc:	mov	r0, r4
   32d00:	sub	sp, fp, #28
   32d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d08:	cmp	r4, #0
   32d0c:	beq	32cf8 <__assert_fail@plt+0x2013c>
   32d10:	mov	r5, r4
   32d14:	ldr	r4, [r4, #4]
   32d18:	cmp	r4, #0
   32d1c:	bne	32d10 <__assert_fail@plt+0x20154>
   32d20:	ldr	r4, [r5, #8]
   32d24:	cmp	r4, #0
   32d28:	bne	32d10 <__assert_fail@plt+0x20154>
   32d2c:	add	r0, r5, #20
   32d30:	bl	321ac <__assert_fail@plt+0x1f5f0>
   32d34:	ldr	r0, [r5]
   32d38:	cmp	r0, #0
   32d3c:	beq	32cf8 <__assert_fail@plt+0x2013c>
   32d40:	ldr	r4, [r0, #8]
   32d44:	cmp	r4, r5
   32d48:	mov	r5, r0
   32d4c:	beq	32d2c <__assert_fail@plt+0x20170>
   32d50:	cmp	r4, #0
   32d54:	mov	r5, r0
   32d58:	beq	32d2c <__assert_fail@plt+0x20170>
   32d5c:	b	32d10 <__assert_fail@plt+0x20154>
   32d60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   32d64:	add	fp, sp, #24
   32d68:	sub	sp, sp, #8
   32d6c:	mov	r9, r0
   32d70:	mov	r7, r1
   32d74:	ldr	r0, [r1, #40]	; 0x28
   32d78:	ldr	r1, [r1, #56]	; 0x38
   32d7c:	cmp	r1, r0
   32d80:	ble	32e68 <__assert_fail@plt+0x202ac>
   32d84:	ldr	r1, [r7, #4]
   32d88:	mov	r5, r9
   32d8c:	mov	r8, r2
   32d90:	ldrb	r6, [r1, r0]
   32d94:	strb	r6, [r5], #4
   32d98:	ldr	r0, [r5]
   32d9c:	bic	r1, r0, #6291456	; 0x600000
   32da0:	str	r1, [r5]
   32da4:	ldr	r3, [r7, #80]	; 0x50
   32da8:	cmp	r3, #2
   32dac:	blt	32dd0 <__assert_fail@plt+0x20214>
   32db0:	ldr	r2, [r7, #28]
   32db4:	ldr	r1, [r7, #40]	; 0x28
   32db8:	cmp	r1, r2
   32dbc:	beq	32dd0 <__assert_fail@plt+0x20214>
   32dc0:	ldr	r2, [r7, #8]
   32dc4:	ldr	r1, [r2, r1, lsl #2]
   32dc8:	cmn	r1, #1
   32dcc:	beq	33124 <__assert_fail@plt+0x20568>
   32dd0:	movw	r1, #65280	; 0xff00
   32dd4:	cmp	r6, #92	; 0x5c
   32dd8:	movt	r1, #65439	; 0xff9f
   32ddc:	bne	32e78 <__assert_fail@plt+0x202bc>
   32de0:	ldr	r6, [r7, #40]	; 0x28
   32de4:	ldr	r4, [r7, #48]	; 0x30
   32de8:	add	r2, r6, #1
   32dec:	cmp	r2, r4
   32df0:	bge	32ecc <__assert_fail@plt+0x20310>
   32df4:	ldrb	r4, [r7, #75]	; 0x4b
   32df8:	cmp	r4, #0
   32dfc:	bne	3337c <__assert_fail@plt+0x207c0>
   32e00:	ldr	r3, [r7, #4]
   32e04:	ldrb	r6, [r3, r2]
   32e08:	and	r0, r0, r1
   32e0c:	strb	r6, [r9]
   32e10:	orr	r4, r0, #1
   32e14:	str	r4, [r9, #4]
   32e18:	ldr	r0, [r7, #80]	; 0x50
   32e1c:	cmp	r0, #2
   32e20:	blt	32fdc <__assert_fail@plt+0x20420>
   32e24:	ldr	r0, [r7, #8]
   32e28:	ldr	r1, [r7, #40]	; 0x28
   32e2c:	add	r0, r0, r1, lsl #2
   32e30:	ldr	r4, [r0, #4]
   32e34:	mov	r0, r4
   32e38:	bl	128e0 <iswalnum@plt>
   32e3c:	sub	r1, r4, #95	; 0x5f
   32e40:	cmp	r0, #0
   32e44:	clz	r1, r1
   32e48:	movwne	r0, #1
   32e4c:	lsr	r1, r1, #5
   32e50:	orr	r0, r1, r0
   32e54:	ldr	r1, [r5]
   32e58:	bic	r1, r1, #4194304	; 0x400000
   32e5c:	orr	r0, r1, r0, lsl #22
   32e60:	uxtb	r1, r6
   32e64:	b	33000 <__assert_fail@plt+0x20444>
   32e68:	mov	r0, #2
   32e6c:	mov	r4, #0
   32e70:	strb	r0, [r9, #4]
   32e74:	b	33350 <__assert_fail@plt+0x20794>
   32e78:	and	r0, r0, r1
   32e7c:	orr	r4, r0, #1
   32e80:	str	r4, [r5]
   32e84:	ldr	r0, [r7, #80]	; 0x50
   32e88:	cmp	r0, #2
   32e8c:	blt	32ed8 <__assert_fail@plt+0x2031c>
   32e90:	ldr	r0, [r7, #8]
   32e94:	ldr	r1, [r7, #40]	; 0x28
   32e98:	ldr	r4, [r0, r1, lsl #2]
   32e9c:	mov	r0, r4
   32ea0:	bl	128e0 <iswalnum@plt>
   32ea4:	sub	r1, r4, #95	; 0x5f
   32ea8:	cmp	r0, #0
   32eac:	clz	r1, r1
   32eb0:	movwne	r0, #1
   32eb4:	lsr	r1, r1, #5
   32eb8:	orr	r0, r1, r0
   32ebc:	ldr	r1, [r5]
   32ec0:	bic	r1, r1, #4194304	; 0x400000
   32ec4:	orr	r0, r1, r0, lsl #22
   32ec8:	b	32ef8 <__assert_fail@plt+0x2033c>
   32ecc:	and	r0, r0, r1
   32ed0:	orr	r0, r0, #36	; 0x24
   32ed4:	b	33138 <__assert_fail@plt+0x2057c>
   32ed8:	bl	12844 <__ctype_b_loc@plt>
   32edc:	ldr	r0, [r0]
   32ee0:	cmp	r6, #95	; 0x5f
   32ee4:	add	r0, r0, r6, lsl #1
   32ee8:	ldrh	r0, [r0]
   32eec:	ubfx	r0, r0, #3, #1
   32ef0:	movweq	r0, #1
   32ef4:	orr	r0, r4, r0, lsl #22
   32ef8:	mov	r4, #1
   32efc:	cmp	r6, #62	; 0x3e
   32f00:	str	r0, [r5]
   32f04:	bgt	32fa0 <__assert_fail@plt+0x203e4>
   32f08:	sub	r1, r6, #36	; 0x24
   32f0c:	cmp	r1, #10
   32f10:	bhi	33194 <__assert_fail@plt+0x205d8>
   32f14:	add	r2, pc, #0
   32f18:	ldr	pc, [r2, r1, lsl #2]
   32f1c:	andeq	r2, r3, r8, asr #30
   32f20:	andeq	r3, r3, r0, asr r3
   32f24:	andeq	r3, r3, r0, asr r3
   32f28:	andeq	r3, r3, r0, asr r3
   32f2c:	andeq	r3, r3, r8, lsr #3
   32f30:			; <UNDEFINED> instruction: 0x000331b8
   32f34:	andeq	r3, r3, r8, asr #3
   32f38:	ldrdeq	r3, [r3], -r0
   32f3c:	andeq	r3, r3, r0, asr r3
   32f40:	andeq	r3, r3, r0, asr r3
   32f44:	andeq	r3, r3, r0, ror #3
   32f48:	tst	r8, #8
   32f4c:	bne	32f98 <__assert_fail@plt+0x203dc>
   32f50:	ldr	r1, [r7, #40]	; 0x28
   32f54:	ldr	r2, [r7, #48]	; 0x30
   32f58:	add	r1, r1, #1
   32f5c:	cmp	r1, r2
   32f60:	beq	32f98 <__assert_fail@plt+0x203dc>
   32f64:	str	r1, [r7, #40]	; 0x28
   32f68:	mov	r0, sp
   32f6c:	mov	r1, r7
   32f70:	mov	r2, r8
   32f74:	bl	32d60 <__assert_fail@plt+0x201a4>
   32f78:	ldr	r0, [r7, #40]	; 0x28
   32f7c:	sub	r0, r0, #1
   32f80:	str	r0, [r7, #40]	; 0x28
   32f84:	ldrb	r0, [sp, #4]
   32f88:	sub	r0, r0, #9
   32f8c:	cmp	r0, #1
   32f90:	bhi	33350 <__assert_fail@plt+0x20794>
   32f94:	ldr	r0, [r5]
   32f98:	mov	r1, #32
   32f9c:	b	32fd4 <__assert_fail@plt+0x20418>
   32fa0:	cmp	r6, #122	; 0x7a
   32fa4:	bgt	330fc <__assert_fail@plt+0x20540>
   32fa8:	cmp	r6, #63	; 0x3f
   32fac:	beq	331e8 <__assert_fail@plt+0x2062c>
   32fb0:	cmp	r6, #91	; 0x5b
   32fb4:	beq	331f8 <__assert_fail@plt+0x2063c>
   32fb8:	cmp	r6, #94	; 0x5e
   32fbc:	bne	33350 <__assert_fail@plt+0x20794>
   32fc0:	movw	r1, #8
   32fc4:	movt	r1, #128	; 0x80
   32fc8:	tst	r8, r1
   32fcc:	beq	33240 <__assert_fail@plt+0x20684>
   32fd0:	mov	r1, #16
   32fd4:	mov	r2, #12
   32fd8:	b	330ec <__assert_fail@plt+0x20530>
   32fdc:	bl	12844 <__ctype_b_loc@plt>
   32fe0:	ldr	r0, [r0]
   32fe4:	uxtb	r1, r6
   32fe8:	cmp	r1, #95	; 0x5f
   32fec:	add	r0, r0, r1, lsl #1
   32ff0:	ldrh	r0, [r0]
   32ff4:	ubfx	r0, r0, #3, #1
   32ff8:	movweq	r0, #1
   32ffc:	orr	r0, r4, r0, lsl #22
   33000:	uxtb	r2, r6
   33004:	mov	r4, #2
   33008:	str	r0, [r5]
   3300c:	cmp	r2, #95	; 0x5f
   33010:	bgt	33144 <__assert_fail@plt+0x20588>
   33014:	sub	r3, r2, #39	; 0x27
   33018:	cmp	r3, #44	; 0x2c
   3301c:	bhi	3326c <__assert_fail@plt+0x206b0>
   33020:	add	r2, pc, #0
   33024:	ldr	pc, [r2, r3, lsl #2]
   33028:	ldrdeq	r3, [r3], -r4
   3302c:	andeq	r3, r3, r4, ror #5
   33030:	strdeq	r3, [r3], -r0
   33034:	andeq	r3, r3, r0, asr r3
   33038:	strdeq	r3, [r3], -ip
   3303c:	andeq	r3, r3, r0, asr r3
   33040:	andeq	r3, r3, r0, asr r3
   33044:	andeq	r3, r3, r0, asr r3
   33048:	andeq	r3, r3, r0, asr r3
   3304c:	andeq	r3, r3, r0, asr r3
   33050:	ldrdeq	r3, [r3], -ip
   33054:	ldrdeq	r3, [r3], -ip
   33058:	ldrdeq	r3, [r3], -ip
   3305c:	ldrdeq	r3, [r3], -ip
   33060:	ldrdeq	r3, [r3], -ip
   33064:	ldrdeq	r3, [r3], -ip
   33068:	ldrdeq	r3, [r3], -ip
   3306c:	ldrdeq	r3, [r3], -ip
   33070:	ldrdeq	r3, [r3], -ip
   33074:	andeq	r3, r3, r0, asr r3
   33078:	andeq	r3, r3, r0, asr r3
   3307c:	andeq	r3, r3, r4, lsl r3
   33080:	andeq	r3, r3, r0, asr r3
   33084:	andeq	r3, r3, r4, lsr #6
   33088:	andeq	r3, r3, r4, lsr r3
   3308c:	andeq	r3, r3, r0, asr r3
   33090:	andeq	r3, r3, r0, asr r3
   33094:	andeq	r3, r3, ip, asr r3
   33098:	andeq	r3, r3, r0, asr r3
   3309c:	andeq	r3, r3, r0, asr r3
   330a0:	andeq	r3, r3, r0, asr r3
   330a4:	andeq	r3, r3, r0, asr r3
   330a8:	andeq	r3, r3, r0, asr r3
   330ac:	andeq	r3, r3, r0, asr r3
   330b0:	andeq	r3, r3, r0, asr r3
   330b4:	andeq	r3, r3, r0, asr r3
   330b8:	andeq	r3, r3, r0, asr r3
   330bc:	andeq	r3, r3, r0, asr r3
   330c0:	andeq	r3, r3, r0, asr r3
   330c4:	andeq	r3, r3, r0, asr r3
   330c8:	andeq	r3, r3, r0, asr r3
   330cc:	andeq	r3, r3, r0, asr r3
   330d0:	andeq	r3, r3, r0, asr r3
   330d4:	andeq	r3, r3, r0, asr r3
   330d8:	andeq	r3, r3, ip, ror #6
   330dc:	tst	r8, #16384	; 0x4000
   330e0:	bne	33350 <__assert_fail@plt+0x20794>
   330e4:	sub	r1, r1, #49	; 0x31
   330e8:	mov	r2, #4
   330ec:	bfi	r0, r2, #0, #8
   330f0:	str	r1, [r9]
   330f4:	str	r0, [r9, #4]
   330f8:	b	33350 <__assert_fail@plt+0x20794>
   330fc:	cmp	r6, #123	; 0x7b
   33100:	beq	33200 <__assert_fail@plt+0x20644>
   33104:	cmp	r6, #124	; 0x7c
   33108:	beq	33210 <__assert_fail@plt+0x20654>
   3310c:	cmp	r6, #125	; 0x7d
   33110:	bne	33350 <__assert_fail@plt+0x20794>
   33114:	and	r1, r8, #4608	; 0x1200
   33118:	cmp	r1, #4608	; 0x1200
   3311c:	beq	332bc <__assert_fail@plt+0x20700>
   33120:	b	33350 <__assert_fail@plt+0x20794>
   33124:	movw	r1, #65280	; 0xff00
   33128:	movt	r1, #65439	; 0xff9f
   3312c:	and	r0, r0, r1
   33130:	orr	r0, r0, #1
   33134:	orr	r0, r0, #2097152	; 0x200000
   33138:	str	r0, [r5]
   3313c:	mov	r4, #1
   33140:	b	33350 <__assert_fail@plt+0x20794>
   33144:	sub	r1, r2, #115	; 0x73
   33148:	cmp	r1, #10
   3314c:	bhi	33224 <__assert_fail@plt+0x20668>
   33150:	add	r2, pc, #0
   33154:	ldr	pc, [r2, r1, lsl #2]
   33158:	andeq	r3, r3, r4, lsl #3
   3315c:	andeq	r3, r3, r0, asr r3
   33160:	andeq	r3, r3, r0, asr r3
   33164:	andeq	r3, r3, r0, asr r3
   33168:	andeq	r3, r3, r0, lsl #5
   3316c:	andeq	r3, r3, r0, asr r3
   33170:	andeq	r3, r3, r0, asr r3
   33174:	andeq	r3, r3, r0, asr r3
   33178:	muleq	r3, r0, r2
   3317c:	andeq	r3, r3, r4, lsr #5
   33180:			; <UNDEFINED> instruction: 0x000332b0
   33184:	tst	r8, #524288	; 0x80000
   33188:	bne	33350 <__assert_fail@plt+0x20794>
   3318c:	mov	r1, #34	; 0x22
   33190:	b	33348 <__assert_fail@plt+0x2078c>
   33194:	cmp	r6, #10
   33198:	bne	33350 <__assert_fail@plt+0x20794>
   3319c:	tst	r8, #2048	; 0x800
   331a0:	bne	3321c <__assert_fail@plt+0x20660>
   331a4:	b	33350 <__assert_fail@plt+0x20794>
   331a8:	tst	r8, #8192	; 0x2000
   331ac:	beq	33350 <__assert_fail@plt+0x20794>
   331b0:	mov	r1, #8
   331b4:	b	33348 <__assert_fail@plt+0x2078c>
   331b8:	tst	r8, #8192	; 0x2000
   331bc:	beq	33350 <__assert_fail@plt+0x20794>
   331c0:	mov	r1, #9
   331c4:	b	33348 <__assert_fail@plt+0x2078c>
   331c8:	mov	r1, #11
   331cc:	b	33348 <__assert_fail@plt+0x2078c>
   331d0:	movw	r1, #1026	; 0x402
   331d4:	tst	r8, r1
   331d8:	bne	33350 <__assert_fail@plt+0x20794>
   331dc:	b	3330c <__assert_fail@plt+0x20750>
   331e0:	mov	r1, #5
   331e4:	b	33348 <__assert_fail@plt+0x2078c>
   331e8:	movw	r1, #1026	; 0x402
   331ec:	tst	r8, r1
   331f0:	bne	33350 <__assert_fail@plt+0x20794>
   331f4:	b	33344 <__assert_fail@plt+0x20788>
   331f8:	mov	r1, #20
   331fc:	b	33348 <__assert_fail@plt+0x2078c>
   33200:	and	r1, r8, #4608	; 0x1200
   33204:	cmp	r1, #4608	; 0x1200
   33208:	beq	3329c <__assert_fail@plt+0x206e0>
   3320c:	b	33350 <__assert_fail@plt+0x20794>
   33210:	and	r1, r8, #33792	; 0x8400
   33214:	cmp	r1, #32768	; 0x8000
   33218:	bne	33350 <__assert_fail@plt+0x20794>
   3321c:	mov	r1, #10
   33220:	b	33348 <__assert_fail@plt+0x2078c>
   33224:	cmp	r2, #96	; 0x60
   33228:	beq	332c4 <__assert_fail@plt+0x20708>
   3322c:	cmp	r2, #98	; 0x62
   33230:	tsteq	r8, #524288	; 0x80000
   33234:	bne	33350 <__assert_fail@plt+0x20794>
   33238:	mov	r1, #256	; 0x100
   3323c:	b	32fd4 <__assert_fail@plt+0x20418>
   33240:	ldr	r1, [r7, #40]	; 0x28
   33244:	cmp	r1, #0
   33248:	beq	32fd0 <__assert_fail@plt+0x20414>
   3324c:	tst	r8, #2048	; 0x800
   33250:	beq	33350 <__assert_fail@plt+0x20794>
   33254:	ldr	r2, [r7, #4]
   33258:	add	r1, r2, r1
   3325c:	ldrb	r1, [r1, #-1]
   33260:	cmp	r1, #10
   33264:	beq	32fd0 <__assert_fail@plt+0x20414>
   33268:	b	33350 <__assert_fail@plt+0x20794>
   3326c:	cmp	r2, #87	; 0x57
   33270:	tsteq	r8, #524288	; 0x80000
   33274:	bne	33350 <__assert_fail@plt+0x20794>
   33278:	mov	r1, #33	; 0x21
   3327c:	b	33348 <__assert_fail@plt+0x2078c>
   33280:	tst	r8, #524288	; 0x80000
   33284:	bne	33350 <__assert_fail@plt+0x20794>
   33288:	mov	r1, #32
   3328c:	b	33348 <__assert_fail@plt+0x2078c>
   33290:	and	r1, r8, #4608	; 0x1200
   33294:	cmp	r1, #512	; 0x200
   33298:	bne	33350 <__assert_fail@plt+0x20794>
   3329c:	mov	r1, #23
   332a0:	b	33348 <__assert_fail@plt+0x2078c>
   332a4:	tst	r8, #33792	; 0x8400
   332a8:	bne	33350 <__assert_fail@plt+0x20794>
   332ac:	b	3321c <__assert_fail@plt+0x20660>
   332b0:	and	r1, r8, #4608	; 0x1200
   332b4:	cmp	r1, #512	; 0x200
   332b8:	bne	33350 <__assert_fail@plt+0x20794>
   332bc:	mov	r1, #24
   332c0:	b	33348 <__assert_fail@plt+0x2078c>
   332c4:	tst	r8, #524288	; 0x80000
   332c8:	bne	33350 <__assert_fail@plt+0x20794>
   332cc:	mov	r1, #64	; 0x40
   332d0:	b	32fd4 <__assert_fail@plt+0x20418>
   332d4:	tst	r8, #524288	; 0x80000
   332d8:	bne	33350 <__assert_fail@plt+0x20794>
   332dc:	mov	r1, #128	; 0x80
   332e0:	b	32fd4 <__assert_fail@plt+0x20418>
   332e4:	tst	r8, #8192	; 0x2000
   332e8:	beq	331b0 <__assert_fail@plt+0x205f4>
   332ec:	b	33350 <__assert_fail@plt+0x20794>
   332f0:	tst	r8, #8192	; 0x2000
   332f4:	beq	331c0 <__assert_fail@plt+0x20604>
   332f8:	b	33350 <__assert_fail@plt+0x20794>
   332fc:	movw	r1, #1026	; 0x402
   33300:	and	r1, r8, r1
   33304:	cmp	r1, #2
   33308:	bne	33350 <__assert_fail@plt+0x20794>
   3330c:	mov	r1, #18
   33310:	b	33348 <__assert_fail@plt+0x2078c>
   33314:	tst	r8, #524288	; 0x80000
   33318:	bne	33350 <__assert_fail@plt+0x20794>
   3331c:	mov	r1, #6
   33320:	b	32fd4 <__assert_fail@plt+0x20418>
   33324:	tst	r8, #524288	; 0x80000
   33328:	bne	33350 <__assert_fail@plt+0x20794>
   3332c:	mov	r1, #9
   33330:	b	32fd4 <__assert_fail@plt+0x20418>
   33334:	movw	r1, #1026	; 0x402
   33338:	and	r1, r8, r1
   3333c:	cmp	r1, #2
   33340:	bne	33350 <__assert_fail@plt+0x20794>
   33344:	mov	r1, #19
   33348:	bfi	r0, r1, #0, #8
   3334c:	str	r0, [r5]
   33350:	mov	r0, r4
   33354:	sub	sp, fp, #24
   33358:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3335c:	tst	r8, #524288	; 0x80000
   33360:	bne	33350 <__assert_fail@plt+0x20794>
   33364:	mov	r1, #512	; 0x200
   33368:	b	32fd4 <__assert_fail@plt+0x20418>
   3336c:	tst	r8, #524288	; 0x80000
   33370:	bne	33350 <__assert_fail@plt+0x20794>
   33374:	mov	r1, #35	; 0x23
   33378:	b	33348 <__assert_fail@plt+0x2078c>
   3337c:	cmp	r3, #2
   33380:	blt	333b0 <__assert_fail@plt+0x207f4>
   33384:	ldr	r3, [r7, #8]
   33388:	ldr	r4, [r3, r2, lsl #2]
   3338c:	cmn	r4, #1
   33390:	beq	32e00 <__assert_fail@plt+0x20244>
   33394:	ldr	r4, [r7, #28]
   33398:	add	r6, r6, #2
   3339c:	cmp	r4, r6
   333a0:	beq	333b0 <__assert_fail@plt+0x207f4>
   333a4:	ldr	r3, [r3, r6, lsl #2]
   333a8:	cmn	r3, #1
   333ac:	beq	32e00 <__assert_fail@plt+0x20244>
   333b0:	ldrb	r3, [r7, #76]	; 0x4c
   333b4:	mov	r6, r2
   333b8:	ldr	r4, [r7, #24]
   333bc:	ldr	ip, [r7]
   333c0:	cmp	r3, #0
   333c4:	ldrne	r6, [r7, #12]
   333c8:	ldrne	r6, [r6, r2, lsl #2]
   333cc:	cmp	r3, #0
   333d0:	add	r6, r4, r6
   333d4:	add	r6, ip, r6
   333d8:	ldrsb	r6, [r6]
   333dc:	beq	32e08 <__assert_fail@plt+0x2024c>
   333e0:	cmn	r6, #1
   333e4:	ble	32e00 <__assert_fail@plt+0x20244>
   333e8:	b	32e08 <__assert_fail@plt+0x2024c>
   333ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   333f0:	add	fp, sp, #28
   333f4:	sub	sp, sp, #28
   333f8:	mov	r7, r1
   333fc:	mov	r1, r0
   33400:	ldr	r4, [fp, #12]
   33404:	ldr	r5, [fp, #8]
   33408:	mov	r6, r2
   3340c:	str	r3, [sp, #16]
   33410:	ldr	r0, [r7]
   33414:	str	r1, [sp, #12]
   33418:	str	r4, [sp, #4]
   3341c:	str	r5, [sp]
   33420:	str	r0, [sp, #8]
   33424:	mov	r0, r1
   33428:	mov	r1, r7
   3342c:	bl	33678 <__assert_fail@plt+0x20abc>
   33430:	cmp	r0, #0
   33434:	bne	33444 <__assert_fail@plt+0x20888>
   33438:	ldr	r1, [r4]
   3343c:	cmp	r1, #0
   33440:	bne	335a0 <__assert_fail@plt+0x209e4>
   33444:	mov	r4, r0
   33448:	ldrb	r0, [r6, #4]
   3344c:	orr	r1, r0, #8
   33450:	cmp	r1, #10
   33454:	beq	335a4 <__assert_fail@plt+0x209e8>
   33458:	cmp	r5, #0
   3345c:	beq	33468 <__assert_fail@plt+0x208ac>
   33460:	cmp	r0, #9
   33464:	beq	335a4 <__assert_fail@plt+0x209e8>
   33468:	ldr	r8, [fp, #12]
   3346c:	ldr	r0, [sp, #12]
   33470:	ldr	r3, [sp, #16]
   33474:	mov	r1, r7
   33478:	mov	r2, r6
   3347c:	mov	r9, r5
   33480:	str	r5, [sp]
   33484:	str	r8, [sp, #4]
   33488:	bl	33678 <__assert_fail@plt+0x20abc>
   3348c:	mov	sl, r0
   33490:	cmp	r0, #0
   33494:	bne	334a4 <__assert_fail@plt+0x208e8>
   33498:	ldr	r0, [r8]
   3349c:	cmp	r0, #0
   334a0:	bne	335b0 <__assert_fail@plt+0x209f4>
   334a4:	cmp	r4, #0
   334a8:	cmpne	sl, #0
   334ac:	bne	334c4 <__assert_fail@plt+0x20908>
   334b0:	cmp	r4, #0
   334b4:	mov	r5, r9
   334b8:	movne	sl, r4
   334bc:	mov	r0, sl
   334c0:	b	33444 <__assert_fail@plt+0x20888>
   334c4:	mov	r0, #16
   334c8:	mov	r1, r4
   334cc:	mov	r2, sl
   334d0:	add	r3, sp, #20
   334d4:	str	r0, [sp, #24]
   334d8:	mov	r0, #0
   334dc:	str	r0, [sp, #20]
   334e0:	ldr	r0, [sp, #8]
   334e4:	bl	34b94 <__assert_fail@plt+0x21fd8>
   334e8:	cmp	r0, #0
   334ec:	mov	r5, r9
   334f0:	bne	33444 <__assert_fail@plt+0x20888>
   334f4:	mov	r5, sl
   334f8:	ldr	sl, [sl, #4]
   334fc:	cmp	sl, #0
   33500:	bne	334f4 <__assert_fail@plt+0x20938>
   33504:	ldr	sl, [r5, #8]
   33508:	cmp	sl, #0
   3350c:	bne	334f4 <__assert_fail@plt+0x20938>
   33510:	add	r0, r5, #20
   33514:	bl	321ac <__assert_fail@plt+0x1f5f0>
   33518:	ldr	r0, [r5]
   3351c:	cmp	r0, #0
   33520:	beq	33544 <__assert_fail@plt+0x20988>
   33524:	ldr	sl, [r0, #8]
   33528:	cmp	sl, r5
   3352c:	mov	r5, r0
   33530:	beq	33510 <__assert_fail@plt+0x20954>
   33534:	cmp	sl, #0
   33538:	mov	r5, r0
   3353c:	beq	33510 <__assert_fail@plt+0x20954>
   33540:	b	334f4 <__assert_fail@plt+0x20938>
   33544:	mov	r5, r4
   33548:	ldr	r4, [r4, #4]
   3354c:	cmp	r4, #0
   33550:	bne	33544 <__assert_fail@plt+0x20988>
   33554:	ldr	r4, [r5, #8]
   33558:	cmp	r4, #0
   3355c:	bne	33544 <__assert_fail@plt+0x20988>
   33560:	add	r0, r5, #20
   33564:	bl	321ac <__assert_fail@plt+0x1f5f0>
   33568:	ldr	r0, [r5]
   3356c:	cmp	r0, #0
   33570:	beq	33594 <__assert_fail@plt+0x209d8>
   33574:	ldr	r4, [r0, #8]
   33578:	cmp	r4, r5
   3357c:	mov	r5, r0
   33580:	beq	33560 <__assert_fail@plt+0x209a4>
   33584:	cmp	r4, #0
   33588:	mov	r5, r0
   3358c:	beq	33560 <__assert_fail@plt+0x209a4>
   33590:	b	33544 <__assert_fail@plt+0x20988>
   33594:	ldr	r1, [fp, #12]
   33598:	mov	r0, #12
   3359c:	str	r0, [r1]
   335a0:	mov	r4, #0
   335a4:	mov	r0, r4
   335a8:	sub	sp, fp, #28
   335ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   335b0:	cmp	r4, #0
   335b4:	beq	335a0 <__assert_fail@plt+0x209e4>
   335b8:	mov	r5, r4
   335bc:	ldr	r4, [r4, #4]
   335c0:	cmp	r4, #0
   335c4:	bne	335b8 <__assert_fail@plt+0x209fc>
   335c8:	ldr	r4, [r5, #8]
   335cc:	cmp	r4, #0
   335d0:	bne	335b8 <__assert_fail@plt+0x209fc>
   335d4:	add	r0, r5, #20
   335d8:	bl	321ac <__assert_fail@plt+0x1f5f0>
   335dc:	ldr	r0, [r5]
   335e0:	cmp	r0, #0
   335e4:	beq	335a0 <__assert_fail@plt+0x209e4>
   335e8:	ldr	r4, [r0, #8]
   335ec:	cmp	r4, r5
   335f0:	mov	r5, r0
   335f4:	beq	335d4 <__assert_fail@plt+0x20a18>
   335f8:	cmp	r4, #0
   335fc:	mov	r5, r0
   33600:	beq	335d4 <__assert_fail@plt+0x20a18>
   33604:	b	335b8 <__assert_fail@plt+0x209fc>
   33608:	push	{r4, r5, r6, sl, fp, lr}
   3360c:	add	fp, sp, #16
   33610:	mov	r4, r2
   33614:	mov	r5, r1
   33618:	mov	r6, r0
   3361c:	ldr	r0, [r0, #4]
   33620:	cmp	r0, #0
   33624:	bne	33618 <__assert_fail@plt+0x20a5c>
   33628:	ldr	r0, [r6, #8]
   3362c:	cmp	r0, #0
   33630:	bne	33618 <__assert_fail@plt+0x20a5c>
   33634:	mov	r0, r4
   33638:	mov	r1, r6
   3363c:	blx	r5
   33640:	cmp	r0, #0
   33644:	bne	33674 <__assert_fail@plt+0x20ab8>
   33648:	ldr	r1, [r6]
   3364c:	cmp	r1, #0
   33650:	popeq	{r4, r5, r6, sl, fp, pc}
   33654:	ldr	r0, [r1, #8]
   33658:	cmp	r0, r6
   3365c:	mov	r6, r1
   33660:	beq	33634 <__assert_fail@plt+0x20a78>
   33664:	cmp	r0, #0
   33668:	mov	r6, r1
   3366c:	beq	33634 <__assert_fail@plt+0x20a78>
   33670:	b	33618 <__assert_fail@plt+0x20a5c>
   33674:	pop	{r4, r5, r6, sl, fp, pc}
   33678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3367c:	add	fp, sp, #28
   33680:	sub	sp, sp, #148	; 0x94
   33684:	mov	r5, r1
   33688:	mov	r6, r0
   3368c:	mov	r7, r2
   33690:	ldr	r0, [r2, #4]
   33694:	mvn	r1, #0
   33698:	mov	sl, #0
   3369c:	ldr	r2, [r5]
   336a0:	uxtab	r1, r1, r0
   336a4:	str	r2, [sp, #52]	; 0x34
   336a8:	cmp	r1, #35	; 0x23
   336ac:	ldr	r9, [fp, #12]
   336b0:	str	r6, [sp, #48]	; 0x30
   336b4:	str	r3, [sp, #44]	; 0x2c
   336b8:	str	r7, [sp, #28]
   336bc:	bhi	337e8 <__assert_fail@plt+0x20c2c>
   336c0:	add	r2, pc, #0
   336c4:	ldr	pc, [r2, r1, lsl #2]
   336c8:	andeq	r3, r3, r8, lsr sl
   336cc:	andeq	r4, r3, r4, lsl sl
   336d0:	andeq	r3, r3, r8, ror #15
   336d4:	andeq	r3, r3, ip, asr #16
   336d8:	andeq	r3, r3, r8, lsr #17
   336dc:	andeq	r3, r3, r8, ror #15
   336e0:	andeq	r3, r3, r8, ror #15
   336e4:	andeq	r3, r3, ip, ror #17
   336e8:	strdeq	r3, [r3], -r8
   336ec:	andeq	r4, r3, r4, lsl sl
   336f0:	andeq	r3, r3, r8, ror #15
   336f4:			; <UNDEFINED> instruction: 0x000339b8
   336f8:	andeq	r3, r3, r8, ror #15
   336fc:	andeq	r3, r3, r8, ror #15
   33700:	andeq	r3, r3, r8, ror #15
   33704:	andeq	r3, r3, r8, ror #15
   33708:	andeq	r3, r3, r8, ror #15
   3370c:	andeq	r3, r3, r8, ror #15
   33710:	andeq	r3, r3, r8, ror #15
   33714:	andeq	r3, r3, r8, lsr #22
   33718:	andeq	r3, r3, r8, ror #15
   3371c:	andeq	r3, r3, r8, ror #15
   33720:	andeq	r3, r3, r0, ror #15
   33724:	andeq	r3, r3, r8, lsl #16
   33728:	andeq	r3, r3, r8, ror #15
   3372c:	andeq	r3, r3, r8, ror #15
   33730:	andeq	r3, r3, r8, ror #15
   33734:	andeq	r3, r3, r8, ror #15
   33738:	andeq	r3, r3, r8, ror #15
   3373c:	andeq	r3, r3, r8, ror #15
   33740:	andeq	r3, r3, r8, ror #15
   33744:	andeq	r3, r3, r8, ror #14
   33748:	andeq	r3, r3, r8, ror #14
   3374c:	andeq	r3, r3, ip, lsl #15
   33750:	andeq	r3, r3, ip, lsl #15
   33754:	andeq	r3, r3, r0, lsr #22
   33758:	andeq	r0, r0, r0
   3375c:	mvnseq	r0, #0
   33760:			; <UNDEFINED> instruction: 0x87fffffe
   33764:			; <UNDEFINED> instruction: 0x07fffffe
   33768:	mvn	r2, #32
   3376c:	ldr	r1, [r6, #64]	; 0x40
   33770:	movw	r3, #14684	; 0x395c
   33774:	uxtab	r0, r2, r0
   33778:	movw	r2, #14678	; 0x3956
   3377c:	movt	r3, #4
   33780:	clz	r0, r0
   33784:	movt	r2, #4
   33788:	b	337ac <__assert_fail@plt+0x20bf0>
   3378c:	mvn	r2, #34	; 0x22
   33790:	ldr	r1, [r6, #64]	; 0x40
   33794:	movw	r3, #63055	; 0xf64f
   33798:	uxtab	r0, r2, r0
   3379c:	movw	r2, #14686	; 0x395e
   337a0:	movt	r3, #3
   337a4:	clz	r0, r0
   337a8:	movt	r2, #4
   337ac:	lsr	r0, r0, #5
   337b0:	stm	sp, {r0, r9}
   337b4:	ldr	r0, [sp, #52]	; 0x34
   337b8:	bl	34c38 <__assert_fail@plt+0x2207c>
   337bc:	mov	r4, r0
   337c0:	cmp	r0, #0
   337c4:	bne	34488 <__assert_fail@plt+0x218cc>
   337c8:	ldr	r0, [r9]
   337cc:	ldr	r2, [sp, #44]	; 0x2c
   337d0:	ldr	r3, [sp, #28]
   337d4:	cmp	r0, #0
   337d8:	beq	34490 <__assert_fail@plt+0x218d4>
   337dc:	b	34a14 <__assert_fail@plt+0x21e58>
   337e0:	tst	r3, #16777216	; 0x1000000
   337e4:	bne	33844 <__assert_fail@plt+0x20c88>
   337e8:	tst	r3, #32
   337ec:	bne	33844 <__assert_fail@plt+0x20c88>
   337f0:	tst	r3, #16
   337f4:	bne	33b9c <__assert_fail@plt+0x20fe0>
   337f8:	tst	r3, #131072	; 0x20000
   337fc:	uxtbeq	r1, r0
   33800:	cmpeq	r1, #9
   33804:	beq	33bd8 <__assert_fail@plt+0x2101c>
   33808:	mov	r1, #1
   3380c:	mov	r2, #0
   33810:	mov	r3, r7
   33814:	mov	sl, #0
   33818:	bfi	r0, r1, #0, #8
   3381c:	mov	r1, #0
   33820:	str	r0, [r7, #4]
   33824:	ldr	r0, [sp, #52]	; 0x34
   33828:	bl	34b94 <__assert_fail@plt+0x21fd8>
   3382c:	ldr	r3, [sp, #28]
   33830:	ldr	r2, [sp, #44]	; 0x2c
   33834:	mov	r4, r0
   33838:	cmp	r0, #0
   3383c:	bne	34490 <__assert_fail@plt+0x218d4>
   33840:	b	34344 <__assert_fail@plt+0x21788>
   33844:	mov	r0, #13
   33848:	b	34348 <__assert_fail@plt+0x2178c>
   3384c:	ldr	r5, [sp, #52]	; 0x34
   33850:	ldr	r0, [r7]
   33854:	mov	r1, #1
   33858:	ldr	r2, [r5, #84]	; 0x54
   3385c:	tst	r2, r1, lsl r0
   33860:	beq	34414 <__assert_fail@plt+0x21858>
   33864:	lsl	r0, r1, r0
   33868:	ldr	r1, [r5, #80]	; 0x50
   3386c:	mov	r2, #0
   33870:	mov	r3, r7
   33874:	mov	sl, #0
   33878:	orr	r0, r1, r0
   3387c:	mov	r1, #0
   33880:	str	r0, [r5, #80]	; 0x50
   33884:	mov	r0, r5
   33888:	bl	34b94 <__assert_fail@plt+0x21fd8>
   3388c:	cmp	r0, #0
   33890:	beq	34344 <__assert_fail@plt+0x21788>
   33894:	mov	r4, r0
   33898:	ldr	r0, [r5, #76]	; 0x4c
   3389c:	add	r0, r0, #1
   338a0:	str	r0, [r5, #76]	; 0x4c
   338a4:	b	338dc <__assert_fail@plt+0x20d20>
   338a8:	ldr	r5, [sp, #52]	; 0x34
   338ac:	mov	r1, #0
   338b0:	mov	r2, #0
   338b4:	mov	r3, r7
   338b8:	mov	sl, #0
   338bc:	mov	r0, r5
   338c0:	bl	34b94 <__assert_fail@plt+0x21fd8>
   338c4:	cmp	r0, #0
   338c8:	beq	34344 <__assert_fail@plt+0x21788>
   338cc:	mov	r4, r0
   338d0:	ldr	r0, [r5, #92]	; 0x5c
   338d4:	cmp	r0, #2
   338d8:	blt	34488 <__assert_fail@plt+0x218cc>
   338dc:	ldrb	r0, [r5, #88]	; 0x58
   338e0:	orr	r0, r0, #2
   338e4:	strb	r0, [r5, #88]	; 0x58
   338e8:	b	34488 <__assert_fail@plt+0x218cc>
   338ec:	ldr	r8, [r5, #24]
   338f0:	ldr	r4, [fp, #8]
   338f4:	orr	r2, r3, #8388608	; 0x800000
   338f8:	mov	r1, r6
   338fc:	add	r0, r8, #1
   33900:	str	r0, [r5, #24]
   33904:	mov	r0, r7
   33908:	bl	32d60 <__assert_fail@plt+0x201a4>
   3390c:	ldr	r1, [r6, #40]	; 0x28
   33910:	ldr	r2, [sp, #28]
   33914:	add	r0, r1, r0
   33918:	mov	r1, #0
   3391c:	str	r0, [r6, #40]	; 0x28
   33920:	ldrb	r0, [r2, #4]
   33924:	cmp	r0, #9
   33928:	beq	33968 <__assert_fail@plt+0x20dac>
   3392c:	add	r0, r4, #1
   33930:	mov	r1, r5
   33934:	mov	r5, r2
   33938:	stm	sp, {r0, r9}
   3393c:	mov	r0, r6
   33940:	ldr	r3, [sp, #44]	; 0x2c
   33944:	bl	32bb0 <__assert_fail@plt+0x1fff4>
   33948:	mov	r1, r0
   3394c:	ldr	r0, [r9]
   33950:	mov	sl, #0
   33954:	cmp	r0, #0
   33958:	bne	34a14 <__assert_fail@plt+0x21e58>
   3395c:	ldrb	r0, [r5, #4]
   33960:	cmp	r0, #9
   33964:	bne	34b04 <__assert_fail@plt+0x21f48>
   33968:	ldr	r0, [sp, #52]	; 0x34
   3396c:	cmp	r8, #8
   33970:	mov	sl, #0
   33974:	movls	r2, #1
   33978:	ldrls	r3, [r0, #84]	; 0x54
   3397c:	orrls	r2, r3, r2, lsl r8
   33980:	sub	r3, fp, #80	; 0x50
   33984:	strls	r2, [r0, #84]	; 0x54
   33988:	mov	r2, #17
   3398c:	str	r2, [fp, #-76]	; 0xffffffb4
   33990:	mov	r2, #0
   33994:	str	sl, [fp, #-80]	; 0xffffffb0
   33998:	bl	34b94 <__assert_fail@plt+0x21fd8>
   3399c:	cmp	r0, #0
   339a0:	beq	34344 <__assert_fail@plt+0x21788>
   339a4:	ldr	r2, [sp, #44]	; 0x2c
   339a8:	ldr	r3, [sp, #28]
   339ac:	str	r8, [r0, #20]
   339b0:	mov	r4, r0
   339b4:	b	34490 <__assert_fail@plt+0x218d4>
   339b8:	ldr	r2, [r7]
   339bc:	movw	r1, #783	; 0x30f
   339c0:	tst	r2, r1
   339c4:	beq	33a18 <__assert_fail@plt+0x20e5c>
   339c8:	ldr	r0, [sp, #52]	; 0x34
   339cc:	ldrb	r0, [r0, #88]	; 0x58
   339d0:	tst	r0, #16
   339d4:	bne	33a10 <__assert_fail@plt+0x20e54>
   339d8:	ldr	r2, [sp, #52]	; 0x34
   339dc:	orr	r1, r0, #16
   339e0:	tst	r0, #8
   339e4:	strb	r1, [r2, #88]	; 0x58
   339e8:	bne	34a7c <__assert_fail@plt+0x21ec0>
   339ec:	sub	r1, pc, #668	; 0x29c
   339f0:	tst	r0, #4
   339f4:	vld1.64	{d16-d17}, [r1]
   339f8:	add	r1, r2, #96	; 0x60
   339fc:	vst1.32	{d16-d17}, [r1]
   33a00:	beq	34a88 <__assert_fail@plt+0x21ecc>
   33a04:	vmov.i32	q8, #0	; 0x00000000
   33a08:	add	r0, r2, #112	; 0x70
   33a0c:	vst1.32	{d16-d17}, [r0]
   33a10:	ldr	r2, [r7]
   33a14:	ldr	r6, [sp, #48]	; 0x30
   33a18:	ldr	r0, [sp, #52]	; 0x34
   33a1c:	cmp	r2, #256	; 0x100
   33a20:	beq	342d0 <__assert_fail@plt+0x21714>
   33a24:	cmp	r2, #512	; 0x200
   33a28:	bne	34350 <__assert_fail@plt+0x21794>
   33a2c:	mov	r4, #10
   33a30:	mov	r0, #5
   33a34:	b	342d8 <__assert_fail@plt+0x2171c>
   33a38:	ldr	r5, [sp, #52]	; 0x34
   33a3c:	mov	r1, #0
   33a40:	mov	r2, #0
   33a44:	mov	r3, r7
   33a48:	mov	sl, #0
   33a4c:	mov	r0, r5
   33a50:	bl	34b94 <__assert_fail@plt+0x21fd8>
   33a54:	cmp	r0, #0
   33a58:	beq	34344 <__assert_fail@plt+0x21788>
   33a5c:	mov	r4, r0
   33a60:	ldr	r0, [r5, #92]	; 0x5c
   33a64:	cmp	r0, #2
   33a68:	blt	34488 <__assert_fail@plt+0x218cc>
   33a6c:	ldr	r7, [sp, #52]	; 0x34
   33a70:	mov	sl, #16
   33a74:	sub	r8, fp, #80	; 0x50
   33a78:	ldr	r5, [sp, #48]	; 0x30
   33a7c:	ldr	r0, [r5, #40]	; 0x28
   33a80:	ldr	r1, [r5, #56]	; 0x38
   33a84:	cmp	r1, r0
   33a88:	ble	3439c <__assert_fail@plt+0x217e0>
   33a8c:	ldr	r1, [r5, #28]
   33a90:	ldr	r2, [sp, #44]	; 0x2c
   33a94:	ldr	r3, [sp, #28]
   33a98:	cmp	r0, r1
   33a9c:	beq	34394 <__assert_fail@plt+0x217d8>
   33aa0:	ldr	r1, [r5, #8]
   33aa4:	ldr	r0, [r1, r0, lsl #2]
   33aa8:	cmn	r0, #1
   33aac:	bne	34394 <__assert_fail@plt+0x217d8>
   33ab0:	mov	r0, r3
   33ab4:	mov	r1, r5
   33ab8:	mov	r6, r3
   33abc:	bl	32d60 <__assert_fail@plt+0x201a4>
   33ac0:	ldr	r1, [r5, #40]	; 0x28
   33ac4:	mov	r2, #0
   33ac8:	mov	r3, r6
   33acc:	add	r0, r1, r0
   33ad0:	mov	r1, #0
   33ad4:	str	r0, [r5, #40]	; 0x28
   33ad8:	mov	r0, r7
   33adc:	bl	34b94 <__assert_fail@plt+0x21fd8>
   33ae0:	mov	r5, r0
   33ae4:	mov	r0, #0
   33ae8:	str	sl, [fp, #-76]	; 0xffffffb4
   33aec:	mov	r1, r4
   33af0:	mov	r3, r8
   33af4:	str	r0, [fp, #-80]	; 0xffffffb0
   33af8:	mov	r0, r7
   33afc:	mov	r2, r5
   33b00:	bl	34b94 <__assert_fail@plt+0x21fd8>
   33b04:	cmp	r5, #0
   33b08:	movne	r4, r0
   33b0c:	cmpne	r0, #0
   33b10:	bne	33a78 <__assert_fail@plt+0x20ebc>
   33b14:	mov	r0, #12
   33b18:	str	r0, [r9]
   33b1c:	b	34a10 <__assert_fail@plt+0x21e54>
   33b20:	mov	r0, #5
   33b24:	b	34348 <__assert_fail@plt+0x2178c>
   33b28:	mov	r0, #0
   33b2c:	mov	r1, #1
   33b30:	mov	r7, #0
   33b34:	str	r0, [fp, #-32]	; 0xffffffe0
   33b38:	mov	r0, #32
   33b3c:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   33b40:	mov	r4, r0
   33b44:	mov	r0, #40	; 0x28
   33b48:	mov	r1, #1
   33b4c:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   33b50:	mov	r8, r0
   33b54:	cmp	r4, #0
   33b58:	cmpne	r8, #0
   33b5c:	beq	3441c <__assert_fail@plt+0x21860>
   33b60:	ldr	r7, [sp, #28]
   33b64:	ldr	r5, [sp, #44]	; 0x2c
   33b68:	mov	r1, r6
   33b6c:	mov	r0, r7
   33b70:	mov	r2, r5
   33b74:	bl	34e64 <__assert_fail@plt+0x222a8>
   33b78:	mov	r3, r0
   33b7c:	ldr	r0, [r7, #4]
   33b80:	uxtb	r1, r0
   33b84:	cmp	r1, #25
   33b88:	beq	33be0 <__assert_fail@plt+0x21024>
   33b8c:	cmp	r1, #2
   33b90:	beq	34408 <__assert_fail@plt+0x2184c>
   33b94:	mov	r1, #0
   33b98:	b	33c34 <__assert_fail@plt+0x21078>
   33b9c:	mov	r0, r7
   33ba0:	mov	r1, r6
   33ba4:	mov	r2, r3
   33ba8:	mov	r4, r3
   33bac:	bl	32d60 <__assert_fail@plt+0x201a4>
   33bb0:	ldr	r1, [r6, #40]	; 0x28
   33bb4:	mov	r2, r7
   33bb8:	mov	r3, r4
   33bbc:	add	r0, r1, r0
   33bc0:	mov	r1, r5
   33bc4:	str	r0, [r6, #40]	; 0x28
   33bc8:	mov	r0, r6
   33bcc:	sub	sp, fp, #28
   33bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33bd4:	b	33678 <__assert_fail@plt+0x20abc>
   33bd8:	mov	r0, #16
   33bdc:	b	34348 <__assert_fail@plt+0x2178c>
   33be0:	ldrb	r0, [r8, #16]
   33be4:	tst	r5, #256	; 0x100
   33be8:	ldr	r2, [sp, #44]	; 0x2c
   33bec:	mov	r1, r6
   33bf0:	orr	r0, r0, #1
   33bf4:	strb	r0, [r8, #16]
   33bf8:	ldrne	r0, [r4]
   33bfc:	orrne	r0, r0, #1024	; 0x400
   33c00:	strne	r0, [r4]
   33c04:	ldr	r0, [r6, #40]	; 0x28
   33c08:	add	r0, r0, r3
   33c0c:	str	r0, [r6, #40]	; 0x28
   33c10:	mov	r0, r7
   33c14:	bl	34e64 <__assert_fail@plt+0x222a8>
   33c18:	ldr	r7, [sp, #28]
   33c1c:	mov	r3, r0
   33c20:	ldr	r0, [r7, #4]
   33c24:	uxtb	r1, r0
   33c28:	cmp	r1, #2
   33c2c:	beq	34408 <__assert_fail@plt+0x2184c>
   33c30:	mov	r1, #1
   33c34:	str	r1, [sp, #36]	; 0x24
   33c38:	uxtb	r1, r0
   33c3c:	str	r8, [sp, #40]	; 0x28
   33c40:	mov	r2, r7
   33c44:	cmp	r1, #21
   33c48:	ldr	r5, [sp, #44]	; 0x2c
   33c4c:	moveq	r1, #1
   33c50:	bfieq	r0, r1, #0, #8
   33c54:	mov	r1, r6
   33c58:	streq	r0, [r7, #4]
   33c5c:	mov	r0, #3
   33c60:	str	r0, [fp, #-40]	; 0xffffffd8
   33c64:	sub	r0, fp, #80	; 0x50
   33c68:	str	r0, [fp, #-36]	; 0xffffffdc
   33c6c:	mov	r0, #1
   33c70:	str	r5, [sp]
   33c74:	str	r0, [sp, #4]
   33c78:	sub	r0, fp, #40	; 0x28
   33c7c:	bl	34fcc <__assert_fail@plt+0x22410>
   33c80:	cmp	r0, #0
   33c84:	bne	343f4 <__assert_fail@plt+0x21838>
   33c88:	and	r0, r5, #65536	; 0x10000
   33c8c:	mov	r2, r5
   33c90:	mov	r8, #0
   33c94:	str	r0, [sp, #20]
   33c98:	mov	r0, #0
   33c9c:	str	r0, [sp, #16]
   33ca0:	mov	r0, #0
   33ca4:	str	r0, [sp, #12]
   33ca8:	ldr	r5, [sp, #28]
   33cac:	mov	r0, r5
   33cb0:	mov	r1, r6
   33cb4:	bl	34e64 <__assert_fail@plt+0x222a8>
   33cb8:	ldr	r7, [fp, #-40]	; 0xffffffd8
   33cbc:	mov	sl, r0
   33cc0:	cmp	r7, #2
   33cc4:	beq	33e9c <__assert_fail@plt+0x212e0>
   33cc8:	cmp	r7, #4
   33ccc:	bne	33d10 <__assert_fail@plt+0x21154>
   33cd0:	ldr	r6, [sp, #48]	; 0x30
   33cd4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   33cd8:	sub	r3, fp, #32
   33cdc:	ldr	r0, [r6, #64]	; 0x40
   33ce0:	str	r1, [sp]
   33ce4:	ldr	r1, [sp, #44]	; 0x2c
   33ce8:	str	r1, [sp, #4]
   33cec:	mov	r1, r4
   33cf0:	ldr	r2, [sp, #40]	; 0x28
   33cf4:	bl	35284 <__assert_fail@plt+0x226c8>
   33cf8:	ldr	r2, [sp, #28]
   33cfc:	ldr	r5, [sp, #52]	; 0x34
   33d00:	cmp	r0, #0
   33d04:	str	r0, [r9]
   33d08:	beq	33edc <__assert_fail@plt+0x21320>
   33d0c:	b	3444c <__assert_fail@plt+0x21890>
   33d10:	str	sl, [sp, #32]
   33d14:	mov	sl, #7
   33d18:	ldr	r2, [sp, #28]
   33d1c:	str	r9, [sp, #24]
   33d20:	ldrb	r0, [r2, #4]
   33d24:	cmp	r0, #22
   33d28:	beq	33d38 <__assert_fail@plt+0x2117c>
   33d2c:	cmp	r0, #2
   33d30:	bne	33e3c <__assert_fail@plt+0x21280>
   33d34:	b	34440 <__assert_fail@plt+0x21884>
   33d38:	ldr	r5, [sp, #48]	; 0x30
   33d3c:	ldr	r6, [sp, #32]
   33d40:	ldr	r2, [sp, #44]	; 0x2c
   33d44:	ldr	r0, [r5, #40]	; 0x28
   33d48:	mov	r1, r5
   33d4c:	add	r0, r0, r6
   33d50:	str	r0, [r5, #40]	; 0x28
   33d54:	add	r0, sp, #56	; 0x38
   33d58:	bl	34e64 <__assert_fail@plt+0x222a8>
   33d5c:	mov	r3, r0
   33d60:	ldrb	r0, [sp, #60]	; 0x3c
   33d64:	cmp	r0, #21
   33d68:	beq	33e24 <__assert_fail@plt+0x21268>
   33d6c:	cmp	r0, #2
   33d70:	beq	34440 <__assert_fail@plt+0x21884>
   33d74:	ldr	r8, [sp, #44]	; 0x2c
   33d78:	mov	r0, #3
   33d7c:	add	r2, sp, #56	; 0x38
   33d80:	str	r0, [fp, #-48]	; 0xffffffd0
   33d84:	add	r0, sp, #64	; 0x40
   33d88:	str	r0, [fp, #-44]	; 0xffffffd4
   33d8c:	mov	r0, #1
   33d90:	str	r0, [sp, #4]
   33d94:	sub	r0, fp, #48	; 0x30
   33d98:	str	r8, [sp]
   33d9c:	ldr	r5, [sp, #48]	; 0x30
   33da0:	mov	r1, r5
   33da4:	bl	34fcc <__assert_fail@plt+0x22410>
   33da8:	cmp	r0, #0
   33dac:	bne	34b64 <__assert_fail@plt+0x21fa8>
   33db0:	ldr	r0, [sp, #28]
   33db4:	mov	r1, r5
   33db8:	mov	r2, r8
   33dbc:	bl	34e64 <__assert_fail@plt+0x222a8>
   33dc0:	ldr	r6, [fp, #-48]	; 0xffffffd0
   33dc4:	mov	sl, #11
   33dc8:	str	r0, [sp, #32]
   33dcc:	cmp	r6, #2
   33dd0:	cmpne	r6, #4
   33dd4:	beq	34440 <__assert_fail@plt+0x21884>
   33dd8:	cmp	r7, #3
   33ddc:	bne	33df0 <__assert_fail@plt+0x21234>
   33de0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   33de4:	bl	1288c <strlen@plt>
   33de8:	cmp	r0, #1
   33dec:	bhi	3443c <__assert_fail@plt+0x21880>
   33df0:	cmp	r6, #3
   33df4:	bne	33e08 <__assert_fail@plt+0x2124c>
   33df8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   33dfc:	bl	1288c <strlen@plt>
   33e00:	cmp	r0, #1
   33e04:	bhi	3443c <__assert_fail@plt+0x21880>
   33e08:	ldr	r2, [sp, #28]
   33e0c:	cmp	r7, #3
   33e10:	beq	33f88 <__assert_fail@plt+0x213cc>
   33e14:	mov	r8, #0
   33e18:	cmp	r7, #0
   33e1c:	ldrbeq	r8, [fp, #-36]	; 0xffffffdc
   33e20:	b	33f90 <__assert_fail@plt+0x213d4>
   33e24:	ldr	r0, [r5, #40]	; 0x28
   33e28:	ldr	r2, [sp, #28]
   33e2c:	sub	r0, r0, r6
   33e30:	str	r0, [r5, #40]	; 0x28
   33e34:	mov	r0, #1
   33e38:	strb	r0, [r2, #4]
   33e3c:	cmp	r7, #1
   33e40:	beq	33f2c <__assert_fail@plt+0x21370>
   33e44:	ldr	r9, [sp, #24]
   33e48:	ldr	sl, [sp, #32]
   33e4c:	cmp	r7, #2
   33e50:	mov	r8, #0
   33e54:	beq	33e9c <__assert_fail@plt+0x212e0>
   33e58:	cmp	r7, #3
   33e5c:	mov	r7, #1
   33e60:	bne	33f6c <__assert_fail@plt+0x213b0>
   33e64:	ldr	r5, [fp, #-36]	; 0xffffffdc
   33e68:	mov	r0, r5
   33e6c:	bl	1288c <strlen@plt>
   33e70:	ldr	r6, [sp, #48]	; 0x30
   33e74:	cmp	r0, #1
   33e78:	bne	3443c <__assert_fail@plt+0x21880>
   33e7c:	ldrb	r0, [r5]
   33e80:	ubfx	r1, r0, #5, #3
   33e84:	and	r0, r0, #31
   33e88:	ldr	r2, [r4, r1, lsl #2]
   33e8c:	orr	r0, r2, r7, lsl r0
   33e90:	str	r0, [r4, r1, lsl #2]
   33e94:	str	r8, [r9]
   33e98:	b	33ed4 <__assert_fail@plt+0x21318>
   33e9c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   33ea0:	mov	r0, r5
   33ea4:	bl	1288c <strlen@plt>
   33ea8:	cmp	r0, #1
   33eac:	mov	r3, #1
   33eb0:	bne	34438 <__assert_fail@plt+0x2187c>
   33eb4:	ldrb	r0, [r5]
   33eb8:	ubfx	r1, r0, #5, #3
   33ebc:	and	r0, r0, #31
   33ec0:	ldr	r2, [r4, r1, lsl #2]
   33ec4:	orr	r0, r2, r3, lsl r0
   33ec8:	str	r0, [r4, r1, lsl #2]
   33ecc:	str	r8, [r9]
   33ed0:	ldr	r6, [sp, #48]	; 0x30
   33ed4:	ldr	r2, [sp, #28]
   33ed8:	ldr	r5, [sp, #52]	; 0x34
   33edc:	ldrb	r0, [r2, #4]
   33ee0:	cmp	r0, #21
   33ee4:	beq	34170 <__assert_fail@plt+0x215b4>
   33ee8:	cmp	r0, #2
   33eec:	ldr	r0, [sp, #44]	; 0x2c
   33ef0:	beq	343fc <__assert_fail@plt+0x21840>
   33ef4:	mov	r1, #3
   33ef8:	mov	r3, sl
   33efc:	mov	r5, r2
   33f00:	str	r1, [fp, #-40]	; 0xffffffd8
   33f04:	sub	r1, fp, #80	; 0x50
   33f08:	str	r1, [fp, #-36]	; 0xffffffdc
   33f0c:	stm	sp, {r0, r8}
   33f10:	sub	r0, fp, #40	; 0x28
   33f14:	mov	r1, r6
   33f18:	bl	34fcc <__assert_fail@plt+0x22410>
   33f1c:	ldr	r2, [sp, #44]	; 0x2c
   33f20:	cmp	r0, #0
   33f24:	beq	33cac <__assert_fail@plt+0x210f0>
   33f28:	b	343f4 <__assert_fail@plt+0x21838>
   33f2c:	ldr	r3, [sp, #40]	; 0x28
   33f30:	ldr	r0, [sp, #16]
   33f34:	mov	r8, #0
   33f38:	ldr	r1, [r3, #20]
   33f3c:	cmp	r0, r1
   33f40:	beq	340d0 <__assert_fail@plt+0x21514>
   33f44:	ldr	r0, [r3]
   33f48:	ldr	r9, [sp, #24]
   33f4c:	ldr	r6, [sp, #48]	; 0x30
   33f50:	ldr	r5, [sp, #52]	; 0x34
   33f54:	ldr	ip, [fp, #-36]	; 0xffffffdc
   33f58:	ldr	sl, [sp, #32]
   33f5c:	add	r7, r1, #1
   33f60:	str	r7, [r3, #20]
   33f64:	str	ip, [r0, r1, lsl #2]
   33f68:	b	33edc <__assert_fail@plt+0x21320>
   33f6c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   33f70:	ubfx	r1, r0, #5, #3
   33f74:	and	r0, r0, #31
   33f78:	ldr	r2, [r4, r1, lsl #2]
   33f7c:	orr	r0, r2, r7, lsl r0
   33f80:	str	r0, [r4, r1, lsl #2]
   33f84:	b	33ed0 <__assert_fail@plt+0x21314>
   33f88:	ldr	r0, [fp, #-36]	; 0xffffffdc
   33f8c:	ldrb	r8, [r0]
   33f90:	cmp	r6, #3
   33f94:	beq	33fa8 <__assert_fail@plt+0x213ec>
   33f98:	mov	r9, #0
   33f9c:	cmp	r6, #0
   33fa0:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   33fa4:	b	33fb0 <__assert_fail@plt+0x213f4>
   33fa8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   33fac:	ldrb	r9, [r0]
   33fb0:	cmp	r7, #3
   33fb4:	cmpne	r7, #0
   33fb8:	bne	33fe0 <__assert_fail@plt+0x21424>
   33fbc:	ldr	r0, [sp, #52]	; 0x34
   33fc0:	ldr	r0, [r0, #92]	; 0x5c
   33fc4:	cmp	r0, #2
   33fc8:	blt	33fe4 <__assert_fail@plt+0x21428>
   33fcc:	mov	r0, r8
   33fd0:	bl	12940 <btowc@plt>
   33fd4:	ldr	r2, [sp, #28]
   33fd8:	mov	r8, r0
   33fdc:	b	33fe4 <__assert_fail@plt+0x21428>
   33fe0:	ldr	r8, [fp, #-36]	; 0xffffffdc
   33fe4:	cmp	r6, #3
   33fe8:	cmpne	r6, #0
   33fec:	bne	34014 <__assert_fail@plt+0x21458>
   33ff0:	ldr	r0, [sp, #52]	; 0x34
   33ff4:	ldr	r0, [r0, #92]	; 0x5c
   33ff8:	cmp	r0, #2
   33ffc:	blt	34018 <__assert_fail@plt+0x2145c>
   34000:	mov	r0, r9
   34004:	bl	12940 <btowc@plt>
   34008:	ldr	r2, [sp, #28]
   3400c:	mov	r9, r0
   34010:	b	34018 <__assert_fail@plt+0x2145c>
   34014:	ldr	r9, [fp, #-44]	; 0xffffffd4
   34018:	cmn	r8, #1
   3401c:	mov	sl, #3
   34020:	cmnne	r9, #1
   34024:	beq	34440 <__assert_fail@plt+0x21884>
   34028:	ldr	r0, [sp, #20]
   3402c:	cmp	r0, #0
   34030:	beq	34040 <__assert_fail@plt+0x21484>
   34034:	cmp	r8, r9
   34038:	mov	sl, #11
   3403c:	bhi	34440 <__assert_fail@plt+0x21884>
   34040:	ldr	r0, [sp, #52]	; 0x34
   34044:	ldr	r0, [r0, #92]	; 0x5c
   34048:	cmp	r0, #2
   3404c:	blt	34084 <__assert_fail@plt+0x214c8>
   34050:	ldr	r7, [sp, #40]	; 0x28
   34054:	ldr	r1, [sp, #12]
   34058:	ldr	r6, [sp, #48]	; 0x30
   3405c:	ldr	r0, [r7, #32]
   34060:	cmp	r1, r0
   34064:	beq	34118 <__assert_fail@plt+0x2155c>
   34068:	ldmib	r7, {r5, sl}
   3406c:	str	r8, [r5, r0, lsl #2]
   34070:	ldr	r0, [r7, #32]
   34074:	add	r1, r0, #1
   34078:	str	r1, [r7, #32]
   3407c:	str	r9, [sl, r0, lsl #2]
   34080:	b	34088 <__assert_fail@plt+0x214cc>
   34084:	ldr	r6, [sp, #48]	; 0x30
   34088:	ldr	sl, [sp, #32]
   3408c:	mov	r0, #0
   34090:	mov	r5, #1
   34094:	cmp	r8, r0
   34098:	cmpls	r0, r9
   3409c:	ubfxls	r1, r0, #5, #3
   340a0:	andls	r3, r0, #31
   340a4:	add	r0, r0, #1
   340a8:	ldrls	r7, [r4, r1, lsl #2]
   340ac:	orrls	r3, r7, r5, lsl r3
   340b0:	strls	r3, [r4, r1, lsl #2]
   340b4:	cmp	r0, #256	; 0x100
   340b8:	bne	34094 <__assert_fail@plt+0x214d8>
   340bc:	ldr	r9, [sp, #24]
   340c0:	ldr	r5, [sp, #52]	; 0x34
   340c4:	mov	r8, #0
   340c8:	str	r8, [r9]
   340cc:	b	33edc <__assert_fail@plt+0x21320>
   340d0:	ldr	r1, [sp, #16]
   340d4:	mov	r0, #1
   340d8:	orr	r1, r0, r1, lsl #1
   340dc:	ldr	r0, [r3]
   340e0:	str	r1, [sp, #16]
   340e4:	lsl	r1, r1, #2
   340e8:	bl	2ecdc <__assert_fail@plt+0x1c120>
   340ec:	cmp	r0, #0
   340f0:	beq	34b6c <__assert_fail@plt+0x21fb0>
   340f4:	ldr	r3, [sp, #40]	; 0x28
   340f8:	ldr	r9, [sp, #24]
   340fc:	ldr	r6, [sp, #48]	; 0x30
   34100:	ldr	r2, [sp, #28]
   34104:	ldr	r5, [sp, #52]	; 0x34
   34108:	mov	r8, #0
   3410c:	str	r0, [r3]
   34110:	ldr	r1, [r3, #20]
   34114:	b	33f54 <__assert_fail@plt+0x21398>
   34118:	ldr	r1, [sp, #12]
   3411c:	mov	r0, #1
   34120:	orr	r1, r0, r1, lsl #1
   34124:	ldr	r0, [r7, #4]
   34128:	lsl	r6, r1, #2
   3412c:	str	r1, [sp, #12]
   34130:	mov	r1, r6
   34134:	bl	2ecdc <__assert_fail@plt+0x1c120>
   34138:	mov	r5, r0
   3413c:	ldr	r0, [r7, #8]
   34140:	mov	r1, r6
   34144:	bl	2ecdc <__assert_fail@plt+0x1c120>
   34148:	mov	sl, r0
   3414c:	cmp	r5, #0
   34150:	cmpne	sl, #0
   34154:	beq	34b7c <__assert_fail@plt+0x21fc0>
   34158:	ldr	r7, [sp, #40]	; 0x28
   3415c:	stmib	r7, {r5, sl}
   34160:	ldr	r0, [r7, #32]
   34164:	ldr	r6, [sp, #48]	; 0x30
   34168:	ldr	r2, [sp, #28]
   3416c:	b	3406c <__assert_fail@plt+0x214b0>
   34170:	ldr	r0, [r6, #40]	; 0x28
   34174:	add	r0, r0, sl
   34178:	str	r0, [r6, #40]	; 0x28
   3417c:	ldr	r0, [sp, #36]	; 0x24
   34180:	cmp	r0, #0
   34184:	beq	341a8 <__assert_fail@plt+0x215ec>
   34188:	mov	r0, #0
   3418c:	add	r1, r4, r0
   34190:	add	r0, r0, #16
   34194:	vld1.32	{d16-d17}, [r1]
   34198:	cmp	r0, #32
   3419c:	vmvn	q8, q8
   341a0:	vst1.32	{d16-d17}, [r1]
   341a4:	bne	3418c <__assert_fail@plt+0x215d0>
   341a8:	ldr	r0, [r5, #92]	; 0x5c
   341ac:	ldr	r8, [sp, #40]	; 0x28
   341b0:	cmp	r0, #2
   341b4:	blt	341dc <__assert_fail@plt+0x21620>
   341b8:	ldr	r1, [r5, #60]	; 0x3c
   341bc:	mov	r2, #0
   341c0:	ldr	r3, [r1, r2, lsl #2]
   341c4:	ldr	r7, [r4, r2, lsl #2]
   341c8:	and	r3, r7, r3
   341cc:	str	r3, [r4, r2, lsl #2]
   341d0:	add	r2, r2, #1
   341d4:	cmp	r2, #8
   341d8:	bne	341c0 <__assert_fail@plt+0x21604>
   341dc:	ldr	r1, [r8, #20]
   341e0:	cmp	r1, #0
   341e4:	bne	3420c <__assert_fail@plt+0x21650>
   341e8:	ldr	r1, [r8, #24]
   341ec:	cmp	r1, #0
   341f0:	bne	3420c <__assert_fail@plt+0x21650>
   341f4:	ldr	r1, [r8, #28]
   341f8:	cmp	r1, #0
   341fc:	bne	3420c <__assert_fail@plt+0x21650>
   34200:	ldr	r1, [r8, #32]
   34204:	cmp	r1, #0
   34208:	beq	343a4 <__assert_fail@plt+0x217e8>
   3420c:	ldrb	r0, [r5, #88]	; 0x58
   34210:	add	r3, sp, #64	; 0x40
   34214:	mov	r1, #0
   34218:	mov	r2, #0
   3421c:	orr	r0, r0, #2
   34220:	strb	r0, [r5, #88]	; 0x58
   34224:	mov	r0, #6
   34228:	str	r8, [sp, #64]	; 0x40
   3422c:	str	r0, [sp, #68]	; 0x44
   34230:	mov	r0, r5
   34234:	mov	r5, #0
   34238:	bl	34b94 <__assert_fail@plt+0x21fd8>
   3423c:	ldr	r6, [sp, #48]	; 0x30
   34240:	cmp	r0, #0
   34244:	beq	342c8 <__assert_fail@plt+0x2170c>
   34248:	mov	r7, r0
   3424c:	ldr	r0, [r4, r5, lsl #2]
   34250:	cmp	r0, #0
   34254:	bne	34270 <__assert_fail@plt+0x216b4>
   34258:	add	r5, r5, #1
   3425c:	cmp	r5, #7
   34260:	bls	3424c <__assert_fail@plt+0x21690>
   34264:	mov	r0, r4
   34268:	bl	2c048 <__assert_fail@plt+0x1948c>
   3426c:	b	34464 <__assert_fail@plt+0x218a8>
   34270:	mov	r0, #3
   34274:	str	r4, [sp, #64]	; 0x40
   34278:	add	r3, sp, #64	; 0x40
   3427c:	mov	r1, #0
   34280:	mov	r2, #0
   34284:	mov	r5, #0
   34288:	str	r0, [sp, #68]	; 0x44
   3428c:	ldr	r0, [sp, #52]	; 0x34
   34290:	bl	34b94 <__assert_fail@plt+0x21fd8>
   34294:	cmp	r0, #0
   34298:	beq	342c8 <__assert_fail@plt+0x2170c>
   3429c:	mov	r1, r0
   342a0:	mov	r0, #10
   342a4:	sub	r3, fp, #80	; 0x50
   342a8:	mov	r2, r7
   342ac:	str	r0, [fp, #-76]	; 0xffffffb4
   342b0:	ldr	r0, [sp, #52]	; 0x34
   342b4:	str	r5, [fp, #-80]	; 0xffffffb0
   342b8:	bl	34b94 <__assert_fail@plt+0x21fd8>
   342bc:	mov	r7, r0
   342c0:	cmp	r0, #0
   342c4:	bne	34464 <__assert_fail@plt+0x218a8>
   342c8:	mov	r0, #12
   342cc:	b	3440c <__assert_fail@plt+0x21850>
   342d0:	mov	r4, #9
   342d4:	mov	r0, #6
   342d8:	ldr	r5, [sp, #52]	; 0x34
   342dc:	str	r0, [r7]
   342e0:	mov	r1, #0
   342e4:	mov	r2, #0
   342e8:	mov	r3, r7
   342ec:	mov	sl, #0
   342f0:	mov	r0, r5
   342f4:	bl	34b94 <__assert_fail@plt+0x21fd8>
   342f8:	mov	r8, r0
   342fc:	mov	r0, r5
   34300:	mov	r1, #0
   34304:	mov	r2, #0
   34308:	mov	r3, r7
   3430c:	str	r4, [r7]
   34310:	bl	34b94 <__assert_fail@plt+0x21fd8>
   34314:	mov	r7, r0
   34318:	mov	r0, #10
   3431c:	sub	r3, fp, #80	; 0x50
   34320:	mov	r1, r8
   34324:	str	r0, [fp, #-76]	; 0xffffffb4
   34328:	mov	r0, r5
   3432c:	mov	r2, r7
   34330:	str	sl, [fp, #-80]	; 0xffffffb0
   34334:	bl	34b94 <__assert_fail@plt+0x21fd8>
   34338:	cmp	r8, #0
   3433c:	cmpne	r7, #0
   34340:	bne	34364 <__assert_fail@plt+0x217a8>
   34344:	mov	r0, #12
   34348:	str	r0, [r9]
   3434c:	b	34a14 <__assert_fail@plt+0x21e58>
   34350:	mov	r1, #0
   34354:	mov	r2, #0
   34358:	mov	r3, r7
   3435c:	mov	sl, #0
   34360:	bl	34b94 <__assert_fail@plt+0x21fd8>
   34364:	mov	r5, r0
   34368:	cmp	r0, #0
   3436c:	beq	34344 <__assert_fail@plt+0x21788>
   34370:	ldr	r0, [sp, #28]
   34374:	ldr	r2, [sp, #44]	; 0x2c
   34378:	mov	r1, r6
   3437c:	bl	32d60 <__assert_fail@plt+0x201a4>
   34380:	ldr	r1, [r6, #40]	; 0x28
   34384:	mov	sl, r5
   34388:	add	r0, r1, r0
   3438c:	str	r0, [r6, #40]	; 0x28
   34390:	b	34a14 <__assert_fail@plt+0x21e58>
   34394:	mov	r6, r5
   34398:	b	34490 <__assert_fail@plt+0x218d4>
   3439c:	mov	r6, r5
   343a0:	b	34488 <__assert_fail@plt+0x218cc>
   343a4:	cmp	r0, #2
   343a8:	blt	343c4 <__assert_fail@plt+0x21808>
   343ac:	ldr	r0, [r8, #36]	; 0x24
   343b0:	cmp	r0, #0
   343b4:	bne	3420c <__assert_fail@plt+0x21650>
   343b8:	ldrb	r0, [r8, #16]
   343bc:	tst	r0, #1
   343c0:	bne	3420c <__assert_fail@plt+0x21650>
   343c4:	mov	r0, r8
   343c8:	bl	3223c <__assert_fail@plt+0x1f680>
   343cc:	mov	r0, #3
   343d0:	str	r4, [sp, #64]	; 0x40
   343d4:	add	r3, sp, #64	; 0x40
   343d8:	mov	r1, #0
   343dc:	mov	r2, #0
   343e0:	str	r0, [sp, #68]	; 0x44
   343e4:	mov	r0, r5
   343e8:	bl	34b94 <__assert_fail@plt+0x21fd8>
   343ec:	ldr	r6, [sp, #48]	; 0x30
   343f0:	b	342bc <__assert_fail@plt+0x21700>
   343f4:	mov	sl, r0
   343f8:	b	34400 <__assert_fail@plt+0x21844>
   343fc:	mov	sl, #7
   34400:	str	r9, [sp, #24]
   34404:	b	34440 <__assert_fail@plt+0x21884>
   34408:	mov	r0, #2
   3440c:	str	r0, [r9]
   34410:	b	34450 <__assert_fail@plt+0x21894>
   34414:	mov	r0, #6
   34418:	b	34348 <__assert_fail@plt+0x2178c>
   3441c:	mov	r0, r4
   34420:	bl	2c048 <__assert_fail@plt+0x1948c>
   34424:	mov	r0, r8
   34428:	bl	2c048 <__assert_fail@plt+0x1948c>
   3442c:	mov	r0, #12
   34430:	str	r0, [r9]
   34434:	b	34464 <__assert_fail@plt+0x218a8>
   34438:	str	r9, [sp, #24]
   3443c:	mov	sl, #3
   34440:	ldr	r9, [sp, #24]
   34444:	ldr	r6, [sp, #48]	; 0x30
   34448:	str	sl, [r9]
   3444c:	ldr	r8, [sp, #40]	; 0x28
   34450:	mov	r0, r4
   34454:	bl	2c048 <__assert_fail@plt+0x1948c>
   34458:	mov	r0, r8
   3445c:	bl	3223c <__assert_fail@plt+0x1f680>
   34460:	mov	r7, #0
   34464:	mov	r4, r7
   34468:	cmp	r7, #0
   3446c:	bne	34488 <__assert_fail@plt+0x218cc>
   34470:	ldr	r0, [r9]
   34474:	ldr	r2, [sp, #44]	; 0x2c
   34478:	ldr	r3, [sp, #28]
   3447c:	cmp	r0, #0
   34480:	beq	34490 <__assert_fail@plt+0x218d4>
   34484:	b	34a10 <__assert_fail@plt+0x21e54>
   34488:	ldr	r2, [sp, #44]	; 0x2c
   3448c:	ldr	r3, [sp, #28]
   34490:	mov	r0, r3
   34494:	mov	r1, r6
   34498:	str	r9, [sp, #24]
   3449c:	bl	32d60 <__assert_fail@plt+0x201a4>
   344a0:	ldr	r1, [r6, #40]	; 0x28
   344a4:	ldr	r2, [sp, #44]	; 0x2c
   344a8:	ldr	r3, [sp, #28]
   344ac:	sub	r7, fp, #80	; 0x50
   344b0:	add	r0, r1, r0
   344b4:	str	r0, [r6, #40]	; 0x28
   344b8:	and	r0, r2, #2097152	; 0x200000
   344bc:	str	r0, [sp, #20]
   344c0:	and	r0, r2, #16777216	; 0x1000000
   344c4:	str	r0, [sp, #32]
   344c8:	ldrb	r0, [r3, #4]
   344cc:	cmp	r0, #23
   344d0:	bhi	349a4 <__assert_fail@plt+0x21de8>
   344d4:	movw	r6, #2048	; 0x800
   344d8:	mov	r1, #1
   344dc:	movt	r6, #140	; 0x8c
   344e0:	tst	r6, r1, lsl r0
   344e4:	beq	349a4 <__assert_fail@plt+0x21de8>
   344e8:	cmp	r0, #23
   344ec:	bne	34544 <__assert_fail@plt+0x21988>
   344f0:	ldr	r0, [sp, #48]	; 0x30
   344f4:	ldr	sl, [r3]
   344f8:	ldr	r8, [r3, #4]
   344fc:	mov	r1, r3
   34500:	mov	r5, r3
   34504:	ldr	r9, [r0, #40]	; 0x28
   34508:	bl	35b10 <__assert_fail@plt+0x22f54>
   3450c:	cmn	r0, #1
   34510:	bne	34560 <__assert_fail@plt+0x219a4>
   34514:	ldrb	r0, [r5, #4]
   34518:	mov	r3, r5
   3451c:	cmp	r0, #1
   34520:	ldrbeq	r1, [r3]
   34524:	cmpeq	r1, #44	; 0x2c
   34528:	beq	345c8 <__assert_fail@plt+0x21a0c>
   3452c:	ldr	r0, [sp, #24]
   34530:	ldr	r2, [sp, #44]	; 0x2c
   34534:	mov	r1, #10
   34538:	mov	r5, #0
   3453c:	str	r1, [r0]
   34540:	b	34918 <__assert_fail@plt+0x21d5c>
   34544:	cmp	r0, #19
   34548:	sub	r0, r0, #18
   3454c:	mvn	sl, #0
   34550:	clz	r0, r0
   34554:	movweq	sl, #1
   34558:	lsr	r6, r0, #5
   3455c:	b	34628 <__assert_fail@plt+0x21a6c>
   34560:	str	sl, [sp, #40]	; 0x28
   34564:	mov	r6, r0
   34568:	cmn	r0, #2
   3456c:	mov	r3, r5
   34570:	ldr	r2, [sp, #44]	; 0x2c
   34574:	beq	3459c <__assert_fail@plt+0x219e0>
   34578:	ldr	r0, [r3, #4]
   3457c:	uxtb	r0, r0
   34580:	mov	sl, r6
   34584:	cmp	r0, #24
   34588:	beq	345f8 <__assert_fail@plt+0x21a3c>
   3458c:	cmp	r0, #1
   34590:	ldrbeq	r0, [r3]
   34594:	cmpeq	r0, #44	; 0x2c
   34598:	beq	345d8 <__assert_fail@plt+0x21a1c>
   3459c:	ldr	r0, [sp, #20]
   345a0:	cmp	r0, #0
   345a4:	beq	34970 <__assert_fail@plt+0x21db4>
   345a8:	ldr	r0, [sp, #48]	; 0x30
   345ac:	mov	r5, r4
   345b0:	str	r9, [r0, #40]	; 0x28
   345b4:	mov	r0, #1
   345b8:	bfi	r8, r0, #0, #8
   345bc:	ldr	r0, [sp, #40]	; 0x28
   345c0:	stm	r3, {r0, r8}
   345c4:	b	34918 <__assert_fail@plt+0x21d5c>
   345c8:	str	sl, [sp, #40]	; 0x28
   345cc:	mov	r6, #0
   345d0:	ldr	r2, [sp, #44]	; 0x2c
   345d4:	b	3457c <__assert_fail@plt+0x219c0>
   345d8:	ldr	r0, [sp, #48]	; 0x30
   345dc:	mov	r1, r3
   345e0:	bl	35b10 <__assert_fail@plt+0x22f54>
   345e4:	ldr	r3, [sp, #28]
   345e8:	ldr	r2, [sp, #44]	; 0x2c
   345ec:	mov	sl, r0
   345f0:	cmn	r0, #2
   345f4:	beq	3459c <__assert_fail@plt+0x219e0>
   345f8:	cmn	sl, #1
   345fc:	beq	34608 <__assert_fail@plt+0x21a4c>
   34600:	cmp	r6, sl
   34604:	bgt	34964 <__assert_fail@plt+0x21da8>
   34608:	ldrb	r0, [r3, #4]
   3460c:	cmp	r0, #24
   34610:	bne	34964 <__assert_fail@plt+0x21da8>
   34614:	cmn	sl, #1
   34618:	mov	r0, sl
   3461c:	moveq	r0, r6
   34620:	cmp	r0, #32768	; 0x8000
   34624:	bge	34990 <__assert_fail@plt+0x21dd4>
   34628:	ldr	r5, [sp, #48]	; 0x30
   3462c:	mov	r0, r3
   34630:	mov	r1, r5
   34634:	bl	32d60 <__assert_fail@plt+0x201a4>
   34638:	ldr	r1, [r5, #40]	; 0x28
   3463c:	cmp	r4, #0
   34640:	add	r0, r1, r0
   34644:	str	r0, [r5, #40]	; 0x28
   34648:	mov	r5, #0
   3464c:	beq	34850 <__assert_fail@plt+0x21c94>
   34650:	orrs	r0, sl, r6
   34654:	beq	347fc <__assert_fail@plt+0x21c40>
   34658:	mov	r0, #0
   3465c:	cmp	r6, #1
   34660:	mov	r8, r4
   34664:	str	r0, [sp, #40]	; 0x28
   34668:	str	r4, [sp, #36]	; 0x24
   3466c:	mov	r4, #10
   34670:	bge	3485c <__assert_fail@plt+0x21ca0>
   34674:	ldrb	r0, [r8, #24]
   34678:	cmp	r0, #17
   3467c:	ldr	r0, [sp, #52]	; 0x34
   34680:	bne	346f0 <__assert_fail@plt+0x21b34>
   34684:	ldr	r5, [r8, #20]
   34688:	mov	r2, r8
   3468c:	mov	r1, r2
   34690:	ldr	r2, [r2, #4]
   34694:	cmp	r2, #0
   34698:	bne	3468c <__assert_fail@plt+0x21ad0>
   3469c:	ldr	r2, [r1, #8]
   346a0:	cmp	r2, #0
   346a4:	bne	3468c <__assert_fail@plt+0x21ad0>
   346a8:	ldr	r2, [r1, #24]
   346ac:	uxtb	r3, r2
   346b0:	cmp	r3, #17
   346b4:	ldreq	r3, [r1, #20]
   346b8:	cmpeq	r3, r5
   346bc:	orreq	r2, r2, #524288	; 0x80000
   346c0:	streq	r2, [r1, #24]
   346c4:	ldr	r3, [r1]
   346c8:	cmp	r3, #0
   346cc:	beq	346f0 <__assert_fail@plt+0x21b34>
   346d0:	ldr	r2, [r3, #8]
   346d4:	cmp	r2, r1
   346d8:	mov	r1, r3
   346dc:	beq	346a8 <__assert_fail@plt+0x21aec>
   346e0:	cmp	r2, #0
   346e4:	mov	r1, r3
   346e8:	beq	346a8 <__assert_fail@plt+0x21aec>
   346ec:	b	3468c <__assert_fail@plt+0x21ad0>
   346f0:	mov	r1, #0
   346f4:	cmn	sl, #1
   346f8:	mov	r2, #0
   346fc:	mov	r3, r7
   34700:	str	r1, [fp, #-80]	; 0xffffffb0
   34704:	mov	r1, #10
   34708:	movweq	r1, #11
   3470c:	str	r1, [fp, #-76]	; 0xffffffb4
   34710:	mov	r1, r8
   34714:	bl	34b94 <__assert_fail@plt+0x21fd8>
   34718:	cmp	r0, #0
   3471c:	beq	348fc <__assert_fail@plt+0x21d40>
   34720:	mov	r5, r0
   34724:	add	r0, r6, #2
   34728:	cmp	r0, sl
   3472c:	ble	34764 <__assert_fail@plt+0x21ba8>
   34730:	ldr	r1, [sp, #40]	; 0x28
   34734:	cmp	r1, #0
   34738:	beq	347e8 <__assert_fail@plt+0x21c2c>
   3473c:	mov	r0, #16
   34740:	mov	r2, r5
   34744:	mov	r3, r7
   34748:	str	r0, [fp, #-76]	; 0xffffffb4
   3474c:	mov	r0, #0
   34750:	str	r0, [fp, #-80]	; 0xffffffb0
   34754:	ldr	r0, [sp, #52]	; 0x34
   34758:	bl	34b94 <__assert_fail@plt+0x21fd8>
   3475c:	mov	r5, r0
   34760:	b	3490c <__assert_fail@plt+0x21d50>
   34764:	add	r6, r6, #1
   34768:	ldr	r9, [sp, #52]	; 0x34
   3476c:	mov	r0, r8
   34770:	mov	r1, r9
   34774:	bl	35bc8 <__assert_fail@plt+0x2300c>
   34778:	mov	r8, r0
   3477c:	mov	r0, #16
   34780:	mov	r1, r5
   34784:	mov	r3, r7
   34788:	str	r0, [fp, #-76]	; 0xffffffb4
   3478c:	mov	r0, #0
   34790:	mov	r2, r8
   34794:	str	r0, [fp, #-80]	; 0xffffffb0
   34798:	mov	r0, r9
   3479c:	bl	34b94 <__assert_fail@plt+0x21fd8>
   347a0:	cmp	r8, #0
   347a4:	movne	r1, r0
   347a8:	cmpne	r0, #0
   347ac:	beq	348fc <__assert_fail@plt+0x21d40>
   347b0:	mov	r0, #0
   347b4:	str	r4, [fp, #-76]	; 0xffffffb4
   347b8:	mov	r2, #0
   347bc:	mov	r3, r7
   347c0:	str	r0, [fp, #-80]	; 0xffffffb0
   347c4:	ldr	r0, [sp, #52]	; 0x34
   347c8:	bl	34b94 <__assert_fail@plt+0x21fd8>
   347cc:	cmp	r0, #0
   347d0:	beq	348fc <__assert_fail@plt+0x21d40>
   347d4:	add	r6, r6, #1
   347d8:	mov	r5, r0
   347dc:	cmp	r6, sl
   347e0:	blt	34768 <__assert_fail@plt+0x21bac>
   347e4:	b	34730 <__assert_fail@plt+0x21b74>
   347e8:	ldr	r2, [sp, #44]	; 0x2c
   347ec:	ldr	r3, [sp, #28]
   347f0:	clz	r0, r5
   347f4:	lsr	r0, r0, #5
   347f8:	b	34938 <__assert_fail@plt+0x21d7c>
   347fc:	mov	r0, r4
   34800:	mov	r6, r0
   34804:	ldr	r0, [r0, #4]
   34808:	cmp	r0, #0
   3480c:	bne	34800 <__assert_fail@plt+0x21c44>
   34810:	ldr	r0, [r6, #8]
   34814:	cmp	r0, #0
   34818:	bne	34800 <__assert_fail@plt+0x21c44>
   3481c:	add	r0, r6, #20
   34820:	bl	321ac <__assert_fail@plt+0x1f5f0>
   34824:	ldr	r1, [r6]
   34828:	cmp	r1, #0
   3482c:	beq	34850 <__assert_fail@plt+0x21c94>
   34830:	ldr	r0, [r1, #8]
   34834:	cmp	r0, r6
   34838:	mov	r6, r1
   3483c:	beq	3481c <__assert_fail@plt+0x21c60>
   34840:	cmp	r0, #0
   34844:	mov	r6, r1
   34848:	beq	3481c <__assert_fail@plt+0x21c60>
   3484c:	b	34800 <__assert_fail@plt+0x21c44>
   34850:	ldr	r2, [sp, #44]	; 0x2c
   34854:	ldr	r3, [sp, #28]
   34858:	b	34918 <__assert_fail@plt+0x21d5c>
   3485c:	ldr	r9, [sp, #36]	; 0x24
   34860:	str	r9, [sp, #40]	; 0x28
   34864:	beq	348d0 <__assert_fail@plt+0x21d14>
   34868:	ldr	r0, [sp, #36]	; 0x24
   3486c:	mov	r5, #1
   34870:	mov	r9, r0
   34874:	str	r0, [sp, #40]	; 0x28
   34878:	ldr	r8, [sp, #52]	; 0x34
   3487c:	mov	r0, r9
   34880:	mov	r1, r8
   34884:	bl	35bc8 <__assert_fail@plt+0x2300c>
   34888:	ldr	r1, [sp, #40]	; 0x28
   3488c:	mov	r9, r0
   34890:	mov	r0, #16
   34894:	mov	r3, r7
   34898:	str	r0, [fp, #-76]	; 0xffffffb4
   3489c:	mov	r0, #0
   348a0:	mov	r2, r9
   348a4:	str	r0, [fp, #-80]	; 0xffffffb0
   348a8:	mov	r0, r8
   348ac:	bl	34b94 <__assert_fail@plt+0x21fd8>
   348b0:	str	r0, [sp, #40]	; 0x28
   348b4:	cmp	r9, #0
   348b8:	ldrne	r0, [sp, #40]	; 0x28
   348bc:	cmpne	r0, #0
   348c0:	beq	348fc <__assert_fail@plt+0x21d40>
   348c4:	add	r5, r5, #1
   348c8:	cmp	r5, r6
   348cc:	blt	34878 <__assert_fail@plt+0x21cbc>
   348d0:	cmp	r6, sl
   348d4:	bne	348e4 <__assert_fail@plt+0x21d28>
   348d8:	ldr	r2, [sp, #44]	; 0x2c
   348dc:	ldr	r5, [sp, #40]	; 0x28
   348e0:	b	347ec <__assert_fail@plt+0x21c30>
   348e4:	ldr	r1, [sp, #52]	; 0x34
   348e8:	mov	r0, r9
   348ec:	bl	35bc8 <__assert_fail@plt+0x2300c>
   348f0:	mov	r8, r0
   348f4:	cmp	r0, #0
   348f8:	bne	34674 <__assert_fail@plt+0x21ab8>
   348fc:	ldr	r0, [sp, #24]
   34900:	mov	r1, #12
   34904:	mov	r5, #0
   34908:	str	r1, [r0]
   3490c:	ldr	r2, [sp, #44]	; 0x2c
   34910:	ldr	r3, [sp, #28]
   34914:	ldr	r4, [sp, #36]	; 0x24
   34918:	clz	r0, r5
   3491c:	cmp	r5, #0
   34920:	lsr	r0, r0, #5
   34924:	bne	34938 <__assert_fail@plt+0x21d7c>
   34928:	ldr	r1, [sp, #24]
   3492c:	ldr	r1, [r1]
   34930:	cmp	r1, #0
   34934:	bne	34a20 <__assert_fail@plt+0x21e64>
   34938:	ldr	r1, [sp, #32]
   3493c:	mov	r4, r5
   34940:	cmp	r1, #0
   34944:	beq	344c8 <__assert_fail@plt+0x2190c>
   34948:	ldrb	r1, [r3, #4]
   3494c:	cmp	r1, #23
   34950:	beq	349ac <__assert_fail@plt+0x21df0>
   34954:	cmp	r1, #11
   34958:	mov	r4, r5
   3495c:	bne	344c8 <__assert_fail@plt+0x2190c>
   34960:	b	349ac <__assert_fail@plt+0x21df0>
   34964:	ldr	r0, [sp, #24]
   34968:	mov	r1, #10
   3496c:	b	34998 <__assert_fail@plt+0x21ddc>
   34970:	ldrb	r0, [r3, #4]
   34974:	ldr	r1, [sp, #24]
   34978:	mov	r5, #0
   3497c:	cmp	r0, #2
   34980:	mov	r0, #10
   34984:	movweq	r0, #9
   34988:	str	r0, [r1]
   3498c:	b	34918 <__assert_fail@plt+0x21d5c>
   34990:	ldr	r0, [sp, #24]
   34994:	mov	r1, #15
   34998:	str	r1, [r0]
   3499c:	mov	r5, #0
   349a0:	b	34918 <__assert_fail@plt+0x21d5c>
   349a4:	mov	sl, r4
   349a8:	b	34a14 <__assert_fail@plt+0x21e58>
   349ac:	cmp	r0, #0
   349b0:	bne	34a04 <__assert_fail@plt+0x21e48>
   349b4:	mov	r4, r5
   349b8:	ldr	r5, [r5, #4]
   349bc:	cmp	r5, #0
   349c0:	bne	349b4 <__assert_fail@plt+0x21df8>
   349c4:	ldr	r5, [r4, #8]
   349c8:	cmp	r5, #0
   349cc:	bne	349b4 <__assert_fail@plt+0x21df8>
   349d0:	add	r0, r4, #20
   349d4:	bl	321ac <__assert_fail@plt+0x1f5f0>
   349d8:	ldr	r0, [r4]
   349dc:	cmp	r0, #0
   349e0:	beq	34a04 <__assert_fail@plt+0x21e48>
   349e4:	ldr	r5, [r0, #8]
   349e8:	cmp	r5, r4
   349ec:	mov	r4, r0
   349f0:	beq	349d0 <__assert_fail@plt+0x21e14>
   349f4:	cmp	r5, #0
   349f8:	mov	r4, r0
   349fc:	beq	349d0 <__assert_fail@plt+0x21e14>
   34a00:	b	349b4 <__assert_fail@plt+0x21df8>
   34a04:	ldr	r1, [sp, #24]
   34a08:	mov	r0, #13
   34a0c:	str	r0, [r1]
   34a10:	mov	sl, #0
   34a14:	mov	r0, sl
   34a18:	sub	sp, fp, #28
   34a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34a20:	mov	sl, #0
   34a24:	cmp	r4, #0
   34a28:	beq	34a14 <__assert_fail@plt+0x21e58>
   34a2c:	mov	r5, r4
   34a30:	ldr	r4, [r4, #4]
   34a34:	cmp	r4, #0
   34a38:	bne	34a2c <__assert_fail@plt+0x21e70>
   34a3c:	ldr	r4, [r5, #8]
   34a40:	cmp	r4, #0
   34a44:	bne	34a2c <__assert_fail@plt+0x21e70>
   34a48:	add	r0, r5, #20
   34a4c:	bl	321ac <__assert_fail@plt+0x1f5f0>
   34a50:	ldr	r0, [r5]
   34a54:	cmp	r0, #0
   34a58:	beq	34a14 <__assert_fail@plt+0x21e58>
   34a5c:	ldr	r4, [r0, #8]
   34a60:	cmp	r4, r5
   34a64:	mov	r5, r0
   34a68:	beq	34a48 <__assert_fail@plt+0x21e8c>
   34a6c:	cmp	r4, #0
   34a70:	mov	r5, r0
   34a74:	beq	34a48 <__assert_fail@plt+0x21e8c>
   34a78:	b	34a2c <__assert_fail@plt+0x21e70>
   34a7c:	mov	r4, #0
   34a80:	mov	r8, #0
   34a84:	b	34a90 <__assert_fail@plt+0x21ed4>
   34a88:	mov	r8, #4
   34a8c:	mov	r4, #128	; 0x80
   34a90:	bl	12844 <__ctype_b_loc@plt>
   34a94:	ldr	r0, [r0]
   34a98:	ldr	r7, [sp, #28]
   34a9c:	mov	r1, #1
   34aa0:	add	r5, r0, r4, lsl #1
   34aa4:	ldr	r0, [sp, #52]	; 0x34
   34aa8:	mov	r3, #0
   34aac:	add	r0, r0, r8, lsl #2
   34ab0:	add	r2, r0, #96	; 0x60
   34ab4:	mov	r0, r5
   34ab8:	add	r6, r4, r3
   34abc:	cmp	r6, #95	; 0x5f
   34ac0:	beq	34ad0 <__assert_fail@plt+0x21f14>
   34ac4:	ldrh	r6, [r0]
   34ac8:	ands	r6, r6, #8
   34acc:	beq	34adc <__assert_fail@plt+0x21f20>
   34ad0:	ldr	r6, [r2]
   34ad4:	orr	r6, r6, r1, lsl r3
   34ad8:	str	r6, [r2]
   34adc:	add	r3, r3, #1
   34ae0:	add	r0, r0, #2
   34ae4:	cmp	r3, #32
   34ae8:	bne	34ab8 <__assert_fail@plt+0x21efc>
   34aec:	add	r8, r8, #1
   34af0:	add	r5, r5, #64	; 0x40
   34af4:	add	r4, r4, #32
   34af8:	cmp	r8, #8
   34afc:	bne	34aa4 <__assert_fail@plt+0x21ee8>
   34b00:	b	33a10 <__assert_fail@plt+0x20e54>
   34b04:	cmp	r1, #0
   34b08:	beq	34b5c <__assert_fail@plt+0x21fa0>
   34b0c:	mov	r5, r1
   34b10:	ldr	r1, [r1, #4]
   34b14:	cmp	r1, #0
   34b18:	bne	34b0c <__assert_fail@plt+0x21f50>
   34b1c:	ldr	r1, [r5, #8]
   34b20:	cmp	r1, #0
   34b24:	bne	34b0c <__assert_fail@plt+0x21f50>
   34b28:	add	r0, r5, #20
   34b2c:	bl	321ac <__assert_fail@plt+0x1f5f0>
   34b30:	ldr	r0, [r5]
   34b34:	cmp	r0, #0
   34b38:	beq	34b5c <__assert_fail@plt+0x21fa0>
   34b3c:	ldr	r1, [r0, #8]
   34b40:	cmp	r1, r5
   34b44:	mov	r5, r0
   34b48:	beq	34b28 <__assert_fail@plt+0x21f6c>
   34b4c:	cmp	r1, #0
   34b50:	mov	r5, r0
   34b54:	beq	34b28 <__assert_fail@plt+0x21f6c>
   34b58:	b	34b0c <__assert_fail@plt+0x21f50>
   34b5c:	mov	r0, #8
   34b60:	b	34348 <__assert_fail@plt+0x2178c>
   34b64:	mov	sl, r0
   34b68:	b	34440 <__assert_fail@plt+0x21884>
   34b6c:	ldr	r9, [sp, #24]
   34b70:	ldr	r6, [sp, #48]	; 0x30
   34b74:	ldr	r8, [sp, #40]	; 0x28
   34b78:	b	342c8 <__assert_fail@plt+0x2170c>
   34b7c:	mov	r0, r5
   34b80:	bl	2c048 <__assert_fail@plt+0x1948c>
   34b84:	mov	r0, sl
   34b88:	bl	2c048 <__assert_fail@plt+0x1948c>
   34b8c:	mov	sl, #12
   34b90:	b	34440 <__assert_fail@plt+0x21884>
   34b94:	push	{r4, r5, r6, r7, fp, lr}
   34b98:	add	fp, sp, #16
   34b9c:	mov	r5, r1
   34ba0:	ldr	r1, [r0, #64]	; 0x40
   34ba4:	mov	r6, r3
   34ba8:	mov	r4, r2
   34bac:	mov	r7, r0
   34bb0:	cmp	r1, #31
   34bb4:	beq	34c0c <__assert_fail@plt+0x22050>
   34bb8:	ldr	r0, [r7, #56]	; 0x38
   34bbc:	add	r2, r1, #1
   34bc0:	add	r0, r0, r1, lsl #5
   34bc4:	mov	r1, #0
   34bc8:	cmp	r5, #0
   34bcc:	str	r2, [r7, #64]	; 0x40
   34bd0:	str	r1, [r0, #4]!
   34bd4:	str	r5, [r0, #4]
   34bd8:	str	r4, [r0, #8]
   34bdc:	ldm	r6, {r2, r3}
   34be0:	str	r1, [r0, #12]
   34be4:	str	r1, [r0, #16]
   34be8:	mvn	r1, #0
   34bec:	str	r1, [r0, #28]
   34bf0:	bic	r1, r3, #786432	; 0xc0000
   34bf4:	str	r2, [r0, #20]
   34bf8:	str	r1, [r0, #24]
   34bfc:	strne	r0, [r5]
   34c00:	cmp	r4, #0
   34c04:	strne	r0, [r4]
   34c08:	pop	{r4, r5, r6, r7, fp, pc}
   34c0c:	mov	r0, #996	; 0x3e4
   34c10:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   34c14:	cmp	r0, #0
   34c18:	moveq	r0, #0
   34c1c:	popeq	{r4, r5, r6, r7, fp, pc}
   34c20:	ldr	r1, [r7, #56]	; 0x38
   34c24:	str	r1, [r0]
   34c28:	mov	r1, #0
   34c2c:	str	r1, [r7, #64]	; 0x40
   34c30:	str	r0, [r7, #56]	; 0x38
   34c34:	b	34bbc <__assert_fail@plt+0x22000>
   34c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34c3c:	add	fp, sp, #28
   34c40:	sub	sp, sp, #28
   34c44:	mov	sl, r1
   34c48:	mov	r9, r0
   34c4c:	mov	r7, #0
   34c50:	mov	r0, #32
   34c54:	mov	r1, #1
   34c58:	mov	r8, r3
   34c5c:	mov	r4, r2
   34c60:	str	r7, [sp, #16]
   34c64:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   34c68:	ldr	r1, [fp, #12]
   34c6c:	cmp	r0, #0
   34c70:	beq	34e20 <__assert_fail@plt+0x22264>
   34c74:	mov	r5, r0
   34c78:	mov	r0, #40	; 0x28
   34c7c:	mov	r1, #1
   34c80:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   34c84:	cmp	r0, #0
   34c88:	beq	34e28 <__assert_fail@plt+0x2226c>
   34c8c:	mov	r6, r0
   34c90:	ldrb	r0, [r0, #16]
   34c94:	ldr	r1, [fp, #8]
   34c98:	mov	r7, #0
   34c9c:	add	r3, sp, #16
   34ca0:	mov	r2, r6
   34ca4:	and	r0, r0, #254	; 0xfe
   34ca8:	orr	r0, r0, r1
   34cac:	mov	r1, r5
   34cb0:	strb	r0, [r6, #16]
   34cb4:	mov	r0, sl
   34cb8:	stm	sp, {r4, r7}
   34cbc:	bl	35284 <__assert_fail@plt+0x226c8>
   34cc0:	cmp	r0, #0
   34cc4:	bne	34e44 <__assert_fail@plt+0x22288>
   34cc8:	ldrb	r0, [r8]
   34ccc:	cmp	r0, #0
   34cd0:	beq	34cfc <__assert_fail@plt+0x22140>
   34cd4:	add	r1, r8, #1
   34cd8:	mov	r2, #1
   34cdc:	ubfx	r3, r0, #5, #3
   34ce0:	and	r0, r0, #31
   34ce4:	ldr	r7, [r5, r3, lsl #2]
   34ce8:	orr	r0, r7, r2, lsl r0
   34cec:	str	r0, [r5, r3, lsl #2]
   34cf0:	ldrb	r0, [r1], #1
   34cf4:	cmp	r0, #0
   34cf8:	bne	34cdc <__assert_fail@plt+0x22120>
   34cfc:	ldr	r0, [fp, #8]
   34d00:	cmp	r0, #0
   34d04:	beq	34d28 <__assert_fail@plt+0x2216c>
   34d08:	mov	r0, #0
   34d0c:	add	r1, r5, r0
   34d10:	add	r0, r0, #16
   34d14:	vld1.32	{d16-d17}, [r1]
   34d18:	cmp	r0, #32
   34d1c:	vmvn	q8, q8
   34d20:	vst1.32	{d16-d17}, [r1]
   34d24:	bne	34d0c <__assert_fail@plt+0x22150>
   34d28:	ldr	r0, [r9, #92]	; 0x5c
   34d2c:	cmp	r0, #2
   34d30:	blt	34d58 <__assert_fail@plt+0x2219c>
   34d34:	ldr	r0, [r9, #60]	; 0x3c
   34d38:	mov	r1, #0
   34d3c:	ldr	r2, [r0, r1, lsl #2]
   34d40:	ldr	r3, [r5, r1, lsl #2]
   34d44:	and	r2, r3, r2
   34d48:	str	r2, [r5, r1, lsl #2]
   34d4c:	add	r1, r1, #1
   34d50:	cmp	r1, #8
   34d54:	bne	34d3c <__assert_fail@plt+0x22180>
   34d58:	mov	r0, #3
   34d5c:	add	r3, sp, #8
   34d60:	mov	r1, #0
   34d64:	mov	r2, #0
   34d68:	mov	r7, #0
   34d6c:	str	r0, [sp, #12]
   34d70:	mov	r0, r9
   34d74:	str	r5, [sp, #8]
   34d78:	bl	34b94 <__assert_fail@plt+0x21fd8>
   34d7c:	cmp	r0, #0
   34d80:	beq	34e0c <__assert_fail@plt+0x22250>
   34d84:	mov	r4, r0
   34d88:	ldr	r0, [r9, #92]	; 0x5c
   34d8c:	cmp	r0, #2
   34d90:	blt	34df4 <__assert_fail@plt+0x22238>
   34d94:	mov	r0, #6
   34d98:	str	r6, [sp, #8]
   34d9c:	add	r3, sp, #8
   34da0:	mov	r1, #0
   34da4:	mov	r2, #0
   34da8:	mov	r8, #0
   34dac:	str	r0, [sp, #12]
   34db0:	ldrb	r0, [r9, #88]	; 0x58
   34db4:	orr	r0, r0, #2
   34db8:	strb	r0, [r9, #88]	; 0x58
   34dbc:	mov	r0, r9
   34dc0:	bl	34b94 <__assert_fail@plt+0x21fd8>
   34dc4:	cmp	r0, #0
   34dc8:	beq	34e0c <__assert_fail@plt+0x22250>
   34dcc:	mov	r2, r0
   34dd0:	mov	r0, #10
   34dd4:	add	r3, sp, #20
   34dd8:	mov	r1, r4
   34ddc:	str	r0, [sp, #24]
   34de0:	mov	r0, r9
   34de4:	str	r8, [sp, #20]
   34de8:	bl	34b94 <__assert_fail@plt+0x21fd8>
   34dec:	mov	r7, r0
   34df0:	b	34e00 <__assert_fail@plt+0x22244>
   34df4:	mov	r0, r6
   34df8:	bl	3223c <__assert_fail@plt+0x1f680>
   34dfc:	mov	r7, r4
   34e00:	mov	r0, r7
   34e04:	sub	sp, fp, #28
   34e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e0c:	mov	r0, r5
   34e10:	bl	2c048 <__assert_fail@plt+0x1948c>
   34e14:	mov	r0, r6
   34e18:	bl	3223c <__assert_fail@plt+0x1f680>
   34e1c:	ldr	r1, [fp, #12]
   34e20:	mov	r0, #12
   34e24:	b	34e3c <__assert_fail@plt+0x22280>
   34e28:	mov	r0, r5
   34e2c:	bl	2c048 <__assert_fail@plt+0x1948c>
   34e30:	ldr	r1, [fp, #12]
   34e34:	mov	r0, #12
   34e38:	mov	r7, #0
   34e3c:	str	r0, [r1]
   34e40:	b	34e00 <__assert_fail@plt+0x22244>
   34e44:	mov	r4, r0
   34e48:	mov	r0, r5
   34e4c:	bl	2c048 <__assert_fail@plt+0x1948c>
   34e50:	mov	r0, r6
   34e54:	bl	3223c <__assert_fail@plt+0x1f680>
   34e58:	ldr	r0, [fp, #12]
   34e5c:	str	r4, [r0]
   34e60:	b	34e00 <__assert_fail@plt+0x22244>
   34e64:	push	{fp, lr}
   34e68:	mov	fp, sp
   34e6c:	ldr	ip, [r1, #40]	; 0x28
   34e70:	ldr	r3, [r1, #56]	; 0x38
   34e74:	cmp	r3, ip
   34e78:	ble	34ef4 <__assert_fail@plt+0x22338>
   34e7c:	ldr	r3, [r1, #4]
   34e80:	ldrb	lr, [r3, ip]
   34e84:	strb	lr, [r0]
   34e88:	ldr	r3, [r1, #80]	; 0x50
   34e8c:	cmp	r3, #2
   34e90:	blt	34eb4 <__assert_fail@plt+0x222f8>
   34e94:	ldr	r3, [r1, #28]
   34e98:	ldr	ip, [r1, #40]	; 0x28
   34e9c:	cmp	ip, r3
   34ea0:	beq	34eb4 <__assert_fail@plt+0x222f8>
   34ea4:	ldr	r3, [r1, #8]
   34ea8:	ldr	r3, [r3, ip, lsl #2]
   34eac:	cmn	r3, #1
   34eb0:	beq	34f9c <__assert_fail@plt+0x223e0>
   34eb4:	tst	r2, #1
   34eb8:	beq	34f04 <__assert_fail@plt+0x22348>
   34ebc:	cmp	lr, #92	; 0x5c
   34ec0:	bne	34f04 <__assert_fail@plt+0x22348>
   34ec4:	ldr	r2, [r1, #40]	; 0x28
   34ec8:	ldr	r3, [r1, #48]	; 0x30
   34ecc:	add	r2, r2, #1
   34ed0:	cmp	r2, r3
   34ed4:	bge	34f9c <__assert_fail@plt+0x223e0>
   34ed8:	str	r2, [r1, #40]	; 0x28
   34edc:	ldr	r1, [r1, #4]
   34ee0:	ldrb	r2, [r1, r2]
   34ee4:	mov	r1, #1
   34ee8:	strb	r1, [r0, #4]
   34eec:	strb	r2, [r0]
   34ef0:	b	34fa4 <__assert_fail@plt+0x223e8>
   34ef4:	mov	r1, #2
   34ef8:	strb	r1, [r0, #4]
   34efc:	mov	r1, #0
   34f00:	b	34fa4 <__assert_fail@plt+0x223e8>
   34f04:	cmp	lr, #92	; 0x5c
   34f08:	bgt	34f5c <__assert_fail@plt+0x223a0>
   34f0c:	cmp	lr, #45	; 0x2d
   34f10:	beq	34f74 <__assert_fail@plt+0x223b8>
   34f14:	cmp	lr, #91	; 0x5b
   34f18:	bne	34f9c <__assert_fail@plt+0x223e0>
   34f1c:	ldr	r3, [r1, #40]	; 0x28
   34f20:	ldr	ip, [r1, #48]	; 0x30
   34f24:	add	r3, r3, #1
   34f28:	cmp	r3, ip
   34f2c:	bge	34f8c <__assert_fail@plt+0x223d0>
   34f30:	ldr	r1, [r1, #4]
   34f34:	ldrb	r1, [r1, r3]
   34f38:	cmp	r1, #61	; 0x3d
   34f3c:	strb	r1, [r0]
   34f40:	beq	34fac <__assert_fail@plt+0x223f0>
   34f44:	cmp	r1, #58	; 0x3a
   34f48:	beq	34fb4 <__assert_fail@plt+0x223f8>
   34f4c:	cmp	r1, #46	; 0x2e
   34f50:	bne	34f94 <__assert_fail@plt+0x223d8>
   34f54:	mov	r1, #26
   34f58:	b	34fc0 <__assert_fail@plt+0x22404>
   34f5c:	cmp	lr, #93	; 0x5d
   34f60:	beq	34f7c <__assert_fail@plt+0x223c0>
   34f64:	cmp	lr, #94	; 0x5e
   34f68:	bne	34f9c <__assert_fail@plt+0x223e0>
   34f6c:	mov	r1, #25
   34f70:	b	34f80 <__assert_fail@plt+0x223c4>
   34f74:	mov	r1, #22
   34f78:	b	34f80 <__assert_fail@plt+0x223c4>
   34f7c:	mov	r1, #21
   34f80:	strb	r1, [r0, #4]
   34f84:	mov	r1, #1
   34f88:	b	34fa4 <__assert_fail@plt+0x223e8>
   34f8c:	mov	r1, #0
   34f90:	strb	r1, [r0]
   34f94:	mov	r1, #91	; 0x5b
   34f98:	strb	r1, [r0]
   34f9c:	mov	r1, #1
   34fa0:	strb	r1, [r0, #4]
   34fa4:	mov	r0, r1
   34fa8:	pop	{fp, pc}
   34fac:	mov	r1, #28
   34fb0:	b	34fc0 <__assert_fail@plt+0x22404>
   34fb4:	tst	r2, #4
   34fb8:	beq	34f94 <__assert_fail@plt+0x223d8>
   34fbc:	mov	r1, #30
   34fc0:	strb	r1, [r0, #4]
   34fc4:	mov	r1, #2
   34fc8:	b	34fa4 <__assert_fail@plt+0x223e8>
   34fcc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   34fd0:	add	fp, sp, #24
   34fd4:	sub	sp, sp, #8
   34fd8:	mov	r5, r2
   34fdc:	ldr	r2, [r1, #80]	; 0x50
   34fe0:	mov	r9, r0
   34fe4:	ldr	r0, [r1, #40]	; 0x28
   34fe8:	cmp	r2, #1
   34fec:	beq	35058 <__assert_fail@plt+0x2249c>
   34ff0:	ldr	r4, [r1, #28]
   34ff4:	add	r2, r0, #1
   34ff8:	cmp	r2, r4
   34ffc:	bge	35058 <__assert_fail@plt+0x2249c>
   35000:	ldr	ip, [r1, #8]
   35004:	mov	r2, #1
   35008:	add	r6, ip, r0, lsl #2
   3500c:	ldr	r7, [r6, r2, lsl #2]
   35010:	cmn	r7, #1
   35014:	bne	3502c <__assert_fail@plt+0x22470>
   35018:	add	r2, r2, #1
   3501c:	add	r7, r0, r2
   35020:	cmp	r7, r4
   35024:	blt	3500c <__assert_fail@plt+0x22450>
   35028:	b	35034 <__assert_fail@plt+0x22478>
   3502c:	cmp	r2, #2
   35030:	bcc	35058 <__assert_fail@plt+0x2249c>
   35034:	mov	r3, #1
   35038:	str	r3, [r9]
   3503c:	ldr	r0, [ip, r0, lsl #2]
   35040:	str	r0, [r9, #4]
   35044:	ldr	r0, [r1, #40]	; 0x28
   35048:	add	r0, r0, r2
   3504c:	str	r0, [r1, #40]	; 0x28
   35050:	mov	r0, #0
   35054:	b	3527c <__assert_fail@plt+0x226c0>
   35058:	add	r2, r0, r3
   3505c:	str	r2, [r1, #40]	; 0x28
   35060:	ldrb	r6, [r5, #4]
   35064:	sub	r0, r6, #22
   35068:	cmp	r0, #8
   3506c:	bhi	3526c <__assert_fail@plt+0x226b0>
   35070:	add	r3, pc, #0
   35074:	ldr	pc, [r3, r0, lsl #2]
   35078:	andeq	r5, r3, r4, asr #4
   3507c:	andeq	r5, r3, ip, ror #4
   35080:	andeq	r5, r3, ip, ror #4
   35084:	andeq	r5, r3, ip, ror #4
   35088:	muleq	r3, ip, r0
   3508c:	andeq	r5, r3, ip, ror #4
   35090:	muleq	r3, ip, r0
   35094:	andeq	r5, r3, ip, ror #4
   35098:	muleq	r3, ip, r0
   3509c:	ldr	r3, [r1, #56]	; 0x38
   350a0:	mov	r0, #7
   350a4:	cmp	r3, r2
   350a8:	ble	3527c <__assert_fail@plt+0x226c0>
   350ac:	ldrb	r3, [r5]
   350b0:	mov	r2, #0
   350b4:	uxtb	r7, r6
   350b8:	cmp	r7, #30
   350bc:	bne	350cc <__assert_fail@plt+0x22510>
   350c0:	ldrb	r7, [r1, #75]	; 0x4b
   350c4:	cmp	r7, #0
   350c8:	bne	35124 <__assert_fail@plt+0x22568>
   350cc:	ldr	r4, [r1, #40]	; 0x28
   350d0:	ldr	r7, [r1, #4]
   350d4:	add	r6, r4, #1
   350d8:	str	r6, [r1, #40]	; 0x28
   350dc:	ldrb	r4, [r7, r4]
   350e0:	ldr	r7, [r1, #56]	; 0x38
   350e4:	cmp	r7, r6
   350e8:	ble	3527c <__assert_fail@plt+0x226c0>
   350ec:	uxtb	r7, r4
   350f0:	cmp	r7, r3
   350f4:	bne	35108 <__assert_fail@plt+0x2254c>
   350f8:	ldr	r7, [r1, #4]
   350fc:	ldrb	r7, [r7, r6]
   35100:	cmp	r7, #93	; 0x5d
   35104:	beq	351f8 <__assert_fail@plt+0x2263c>
   35108:	ldr	r7, [r9, #4]
   3510c:	cmp	r2, #30
   35110:	strb	r4, [r7, r2]
   35114:	bhi	3527c <__assert_fail@plt+0x226c0>
   35118:	ldrb	r6, [r5, #4]
   3511c:	add	r2, r2, #1
   35120:	b	350b4 <__assert_fail@plt+0x224f8>
   35124:	ldrb	r7, [r1, #76]	; 0x4c
   35128:	cmp	r7, #0
   3512c:	beq	351c4 <__assert_fail@plt+0x22608>
   35130:	ldr	lr, [r1, #28]
   35134:	ldr	ip, [r1, #40]	; 0x28
   35138:	cmp	ip, lr
   3513c:	beq	35150 <__assert_fail@plt+0x22594>
   35140:	ldr	r4, [r1, #8]
   35144:	ldr	r4, [r4, ip, lsl #2]
   35148:	cmn	r4, #1
   3514c:	beq	351e4 <__assert_fail@plt+0x22628>
   35150:	ldr	r6, [r1, #12]
   35154:	ldr	r7, [r1, #24]
   35158:	ldr	r4, [r1]
   3515c:	ldr	r6, [r6, ip, lsl #2]
   35160:	add	r6, r7, r6
   35164:	add	r4, r4, r6
   35168:	ldrsb	r4, [r4]
   3516c:	cmn	r4, #1
   35170:	ble	351e4 <__assert_fail@plt+0x22628>
   35174:	ldr	r7, [r1, #80]	; 0x50
   35178:	mov	r6, #1
   3517c:	cmp	r7, #1
   35180:	beq	351b8 <__assert_fail@plt+0x225fc>
   35184:	add	r7, ip, #1
   35188:	cmp	r7, lr
   3518c:	bge	351b8 <__assert_fail@plt+0x225fc>
   35190:	ldr	r6, [r1, #8]
   35194:	add	r8, r6, ip, lsl #2
   35198:	mov	r6, #1
   3519c:	ldr	r7, [r8, r6, lsl #2]
   351a0:	cmn	r7, #1
   351a4:	bne	351b8 <__assert_fail@plt+0x225fc>
   351a8:	add	r6, r6, #1
   351ac:	add	r7, ip, r6
   351b0:	cmp	r7, lr
   351b4:	blt	3519c <__assert_fail@plt+0x225e0>
   351b8:	add	r6, r6, ip
   351bc:	str	r6, [r1, #40]	; 0x28
   351c0:	b	350e0 <__assert_fail@plt+0x22524>
   351c4:	ldr	r7, [r1, #40]	; 0x28
   351c8:	ldr	r4, [r1, #24]
   351cc:	ldr	ip, [r1]
   351d0:	add	r6, r7, #1
   351d4:	add	r7, r7, r4
   351d8:	str	r6, [r1, #40]	; 0x28
   351dc:	ldrb	r4, [ip, r7]
   351e0:	b	350e0 <__assert_fail@plt+0x22524>
   351e4:	add	r6, ip, #1
   351e8:	str	r6, [r1, #40]	; 0x28
   351ec:	ldr	r7, [r1, #4]
   351f0:	ldrb	r4, [r7, ip]
   351f4:	b	350e0 <__assert_fail@plt+0x22524>
   351f8:	add	r0, r6, #1
   351fc:	str	r0, [r1, #40]	; 0x28
   35200:	mov	r0, #0
   35204:	ldr	r1, [r9, #4]
   35208:	strb	r0, [r1, r2]
   3520c:	ldrb	r1, [r5, #4]
   35210:	cmp	r1, #30
   35214:	beq	35230 <__assert_fail@plt+0x22674>
   35218:	cmp	r1, #28
   3521c:	beq	35238 <__assert_fail@plt+0x2267c>
   35220:	cmp	r1, #26
   35224:	moveq	r1, #3
   35228:	streq	r1, [r9]
   3522c:	b	3527c <__assert_fail@plt+0x226c0>
   35230:	mov	r1, #4
   35234:	b	3523c <__assert_fail@plt+0x22680>
   35238:	mov	r1, #2
   3523c:	str	r1, [r9]
   35240:	b	3527c <__assert_fail@plt+0x226c0>
   35244:	ldr	r0, [fp, #12]
   35248:	cmp	r0, #0
   3524c:	bne	3526c <__assert_fail@plt+0x226b0>
   35250:	ldr	r2, [fp, #8]
   35254:	mov	r0, sp
   35258:	bl	34e64 <__assert_fail@plt+0x222a8>
   3525c:	ldrb	r1, [sp, #4]
   35260:	mov	r0, #11
   35264:	cmp	r1, #21
   35268:	bne	3527c <__assert_fail@plt+0x226c0>
   3526c:	mov	r0, #0
   35270:	str	r0, [r9]
   35274:	ldrb	r1, [r5]
   35278:	strb	r1, [r9, #4]
   3527c:	sub	sp, fp, #24
   35280:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35284:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   35288:	add	fp, sp, #24
   3528c:	mov	r8, r0
   35290:	ldrb	r0, [fp, #14]
   35294:	ldr	r6, [fp, #8]
   35298:	mov	r5, r3
   3529c:	mov	r7, r2
   352a0:	mov	r4, r1
   352a4:	tst	r0, #64	; 0x40
   352a8:	beq	352e4 <__assert_fail@plt+0x22728>
   352ac:	movw	r1, #14692	; 0x3964
   352b0:	mov	r0, r6
   352b4:	movt	r1, #4
   352b8:	bl	124cc <strcmp@plt>
   352bc:	cmp	r0, #0
   352c0:	beq	352dc <__assert_fail@plt+0x22720>
   352c4:	movw	r1, #14698	; 0x396a
   352c8:	mov	r0, r6
   352cc:	movt	r1, #4
   352d0:	bl	124cc <strcmp@plt>
   352d4:	cmp	r0, #0
   352d8:	bne	352e4 <__assert_fail@plt+0x22728>
   352dc:	movw	r6, #14704	; 0x3970
   352e0:	movt	r6, #4
   352e4:	ldr	r0, [r5]
   352e8:	ldr	r1, [r7, #36]	; 0x24
   352ec:	cmp	r0, r1
   352f0:	beq	357e4 <__assert_fail@plt+0x22c28>
   352f4:	mov	r0, r6
   352f8:	bl	1246c <wctype@plt>
   352fc:	ldr	r2, [r7, #36]	; 0x24
   35300:	ldr	r1, [r7, #12]
   35304:	add	r3, r2, #1
   35308:	str	r3, [r7, #36]	; 0x24
   3530c:	str	r0, [r1, r2, lsl #2]
   35310:	movw	r1, #14678	; 0x3956
   35314:	mov	r0, r6
   35318:	movt	r1, #4
   3531c:	bl	124cc <strcmp@plt>
   35320:	cmp	r0, #0
   35324:	beq	35488 <__assert_fail@plt+0x228cc>
   35328:	movw	r1, #14710	; 0x3976
   3532c:	mov	r0, r6
   35330:	movt	r1, #4
   35334:	bl	124cc <strcmp@plt>
   35338:	cmp	r0, #0
   3533c:	beq	354d4 <__assert_fail@plt+0x22918>
   35340:	movw	r1, #14698	; 0x396a
   35344:	mov	r0, r6
   35348:	movt	r1, #4
   3534c:	bl	124cc <strcmp@plt>
   35350:	cmp	r0, #0
   35354:	beq	35520 <__assert_fail@plt+0x22964>
   35358:	movw	r1, #14686	; 0x395e
   3535c:	mov	r0, r6
   35360:	movt	r1, #4
   35364:	bl	124cc <strcmp@plt>
   35368:	cmp	r0, #0
   3536c:	beq	3556c <__assert_fail@plt+0x229b0>
   35370:	movw	r1, #14704	; 0x3970
   35374:	mov	r0, r6
   35378:	movt	r1, #4
   3537c:	bl	124cc <strcmp@plt>
   35380:	cmp	r0, #0
   35384:	beq	355b8 <__assert_fail@plt+0x229fc>
   35388:	movw	r1, #14735	; 0x398f
   3538c:	mov	r0, r6
   35390:	movt	r1, #4
   35394:	bl	124cc <strcmp@plt>
   35398:	cmp	r0, #0
   3539c:	beq	35604 <__assert_fail@plt+0x22a48>
   353a0:	movw	r1, #58872	; 0xe5f8
   353a4:	mov	r0, r6
   353a8:	movt	r1, #3
   353ac:	bl	124cc <strcmp@plt>
   353b0:	cmp	r0, #0
   353b4:	beq	35654 <__assert_fail@plt+0x22a98>
   353b8:	movw	r1, #14692	; 0x3964
   353bc:	mov	r0, r6
   353c0:	movt	r1, #4
   353c4:	bl	124cc <strcmp@plt>
   353c8:	cmp	r0, #0
   353cc:	beq	356a4 <__assert_fail@plt+0x22ae8>
   353d0:	movw	r1, #14716	; 0x397c
   353d4:	mov	r0, r6
   353d8:	movt	r1, #4
   353dc:	bl	124cc <strcmp@plt>
   353e0:	cmp	r0, #0
   353e4:	beq	356f4 <__assert_fail@plt+0x22b38>
   353e8:	movw	r1, #14722	; 0x3982
   353ec:	mov	r0, r6
   353f0:	movt	r1, #4
   353f4:	bl	124cc <strcmp@plt>
   353f8:	cmp	r0, #0
   353fc:	beq	35744 <__assert_fail@plt+0x22b88>
   35400:	movw	r1, #14728	; 0x3988
   35404:	mov	r0, r6
   35408:	movt	r1, #4
   3540c:	bl	124cc <strcmp@plt>
   35410:	cmp	r0, #0
   35414:	beq	35794 <__assert_fail@plt+0x22bd8>
   35418:	movw	r1, #14734	; 0x398e
   3541c:	mov	r0, r6
   35420:	movt	r1, #4
   35424:	bl	124cc <strcmp@plt>
   35428:	mov	r1, r0
   3542c:	mov	r0, #4
   35430:	cmp	r1, #0
   35434:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   35438:	bl	12844 <__ctype_b_loc@plt>
   3543c:	ldr	r1, [r0]
   35440:	mov	r2, #0
   35444:	mov	r3, #1
   35448:	cmp	r8, #0
   3544c:	bne	3594c <__assert_fail@plt+0x22d90>
   35450:	ldrb	r0, [r1, #1]
   35454:	tst	r0, #16
   35458:	beq	35470 <__assert_fail@plt+0x228b4>
   3545c:	ubfx	r0, r2, #5, #3
   35460:	and	r6, r2, #31
   35464:	ldr	r7, [r4, r0, lsl #2]
   35468:	orr	r7, r7, r3, lsl r6
   3546c:	str	r7, [r4, r0, lsl #2]
   35470:	add	r2, r2, #1
   35474:	add	r1, r1, #2
   35478:	mov	r0, #0
   3547c:	cmp	r2, #256	; 0x100
   35480:	bne	35450 <__assert_fail@plt+0x22894>
   35484:	b	357e0 <__assert_fail@plt+0x22c24>
   35488:	bl	12844 <__ctype_b_loc@plt>
   3548c:	ldr	r1, [r0]
   35490:	cmp	r8, #0
   35494:	bne	35888 <__assert_fail@plt+0x22ccc>
   35498:	mov	r0, #0
   3549c:	mov	r2, #1
   354a0:	ldrb	r3, [r1]
   354a4:	tst	r3, #8
   354a8:	beq	354c0 <__assert_fail@plt+0x22904>
   354ac:	ubfx	r3, r0, #5, #3
   354b0:	and	r6, r0, #31
   354b4:	ldr	r7, [r4, r3, lsl #2]
   354b8:	orr	r7, r7, r2, lsl r6
   354bc:	str	r7, [r4, r3, lsl #2]
   354c0:	add	r0, r0, #1
   354c4:	add	r1, r1, #2
   354c8:	cmp	r0, #256	; 0x100
   354cc:	bne	354a0 <__assert_fail@plt+0x228e4>
   354d0:	b	3564c <__assert_fail@plt+0x22a90>
   354d4:	bl	12844 <__ctype_b_loc@plt>
   354d8:	ldr	r1, [r0]
   354dc:	cmp	r8, #0
   354e0:	bne	35908 <__assert_fail@plt+0x22d4c>
   354e4:	mov	r0, #0
   354e8:	mov	r2, #1
   354ec:	ldrb	r3, [r1]
   354f0:	tst	r3, #2
   354f4:	beq	3550c <__assert_fail@plt+0x22950>
   354f8:	ubfx	r3, r0, #5, #3
   354fc:	and	r6, r0, #31
   35500:	ldr	r7, [r4, r3, lsl #2]
   35504:	orr	r7, r7, r2, lsl r6
   35508:	str	r7, [r4, r3, lsl #2]
   3550c:	add	r0, r0, #1
   35510:	add	r1, r1, #2
   35514:	cmp	r0, #256	; 0x100
   35518:	bne	354ec <__assert_fail@plt+0x22930>
   3551c:	b	3564c <__assert_fail@plt+0x22a90>
   35520:	bl	12844 <__ctype_b_loc@plt>
   35524:	ldr	r1, [r0]
   35528:	cmp	r8, #0
   3552c:	bne	359c4 <__assert_fail@plt+0x22e08>
   35530:	mov	r0, #0
   35534:	mov	r2, #1
   35538:	ldrb	r3, [r1, #1]
   3553c:	tst	r3, #2
   35540:	beq	35558 <__assert_fail@plt+0x2299c>
   35544:	ubfx	r3, r0, #5, #3
   35548:	and	r6, r0, #31
   3554c:	ldr	r7, [r4, r3, lsl #2]
   35550:	orr	r7, r7, r2, lsl r6
   35554:	str	r7, [r4, r3, lsl #2]
   35558:	add	r0, r0, #1
   3555c:	add	r1, r1, #2
   35560:	cmp	r0, #256	; 0x100
   35564:	bne	35538 <__assert_fail@plt+0x2297c>
   35568:	b	3564c <__assert_fail@plt+0x22a90>
   3556c:	bl	12844 <__ctype_b_loc@plt>
   35570:	ldr	r1, [r0]
   35574:	cmp	r8, #0
   35578:	bne	35a44 <__assert_fail@plt+0x22e88>
   3557c:	mov	r0, #0
   35580:	mov	r2, #1
   35584:	ldrb	r3, [r1, #1]
   35588:	tst	r3, #32
   3558c:	beq	355a4 <__assert_fail@plt+0x229e8>
   35590:	ubfx	r3, r0, #5, #3
   35594:	and	r6, r0, #31
   35598:	ldr	r7, [r4, r3, lsl #2]
   3559c:	orr	r7, r7, r2, lsl r6
   355a0:	str	r7, [r4, r3, lsl #2]
   355a4:	add	r0, r0, #1
   355a8:	add	r1, r1, #2
   355ac:	cmp	r0, #256	; 0x100
   355b0:	bne	35584 <__assert_fail@plt+0x229c8>
   355b4:	b	3564c <__assert_fail@plt+0x22a90>
   355b8:	bl	12844 <__ctype_b_loc@plt>
   355bc:	ldr	r1, [r0]
   355c0:	cmp	r8, #0
   355c4:	bne	35a88 <__assert_fail@plt+0x22ecc>
   355c8:	mov	r0, #0
   355cc:	mov	r2, #1
   355d0:	ldrb	r3, [r1, #1]
   355d4:	tst	r3, #4
   355d8:	beq	355f0 <__assert_fail@plt+0x22a34>
   355dc:	ubfx	r3, r0, #5, #3
   355e0:	and	r6, r0, #31
   355e4:	ldr	r7, [r4, r3, lsl #2]
   355e8:	orr	r7, r7, r2, lsl r6
   355ec:	str	r7, [r4, r3, lsl #2]
   355f0:	add	r0, r0, #1
   355f4:	add	r1, r1, #2
   355f8:	cmp	r0, #256	; 0x100
   355fc:	bne	355d0 <__assert_fail@plt+0x22a14>
   35600:	b	3564c <__assert_fail@plt+0x22a90>
   35604:	bl	12844 <__ctype_b_loc@plt>
   35608:	ldr	r1, [r0]
   3560c:	cmp	r8, #0
   35610:	bne	35acc <__assert_fail@plt+0x22f10>
   35614:	mov	r0, #0
   35618:	mov	r2, #1
   3561c:	ldrb	r3, [r1, #1]
   35620:	tst	r3, #8
   35624:	beq	3563c <__assert_fail@plt+0x22a80>
   35628:	ubfx	r3, r0, #5, #3
   3562c:	and	r6, r0, #31
   35630:	ldr	r7, [r4, r3, lsl #2]
   35634:	orr	r7, r7, r2, lsl r6
   35638:	str	r7, [r4, r3, lsl #2]
   3563c:	add	r0, r0, #1
   35640:	add	r1, r1, #2
   35644:	cmp	r0, #256	; 0x100
   35648:	bne	3561c <__assert_fail@plt+0x22a60>
   3564c:	mov	r0, #0
   35650:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35654:	bl	12844 <__ctype_b_loc@plt>
   35658:	ldr	r1, [r0]
   3565c:	mov	r2, #0
   35660:	mov	r3, #1
   35664:	cmp	r8, #0
   35668:	bne	35810 <__assert_fail@plt+0x22c54>
   3566c:	ldrb	r0, [r1, #1]
   35670:	tst	r0, #64	; 0x40
   35674:	beq	3568c <__assert_fail@plt+0x22ad0>
   35678:	ubfx	r0, r2, #5, #3
   3567c:	and	r6, r2, #31
   35680:	ldr	r7, [r4, r0, lsl #2]
   35684:	orr	r7, r7, r3, lsl r6
   35688:	str	r7, [r4, r0, lsl #2]
   3568c:	add	r2, r2, #1
   35690:	add	r1, r1, #2
   35694:	mov	r0, #0
   35698:	cmp	r2, #256	; 0x100
   3569c:	bne	3566c <__assert_fail@plt+0x22ab0>
   356a0:	b	357e0 <__assert_fail@plt+0x22c24>
   356a4:	bl	12844 <__ctype_b_loc@plt>
   356a8:	ldr	r1, [r0]
   356ac:	mov	r2, #0
   356b0:	mov	r3, #1
   356b4:	cmp	r8, #0
   356b8:	bne	3584c <__assert_fail@plt+0x22c90>
   356bc:	ldrb	r0, [r1, #1]
   356c0:	tst	r0, #1
   356c4:	beq	356dc <__assert_fail@plt+0x22b20>
   356c8:	ubfx	r0, r2, #5, #3
   356cc:	and	r6, r2, #31
   356d0:	ldr	r7, [r4, r0, lsl #2]
   356d4:	orr	r7, r7, r3, lsl r6
   356d8:	str	r7, [r4, r0, lsl #2]
   356dc:	add	r2, r2, #1
   356e0:	add	r1, r1, #2
   356e4:	mov	r0, #0
   356e8:	cmp	r2, #256	; 0x100
   356ec:	bne	356bc <__assert_fail@plt+0x22b00>
   356f0:	b	357e0 <__assert_fail@plt+0x22c24>
   356f4:	bl	12844 <__ctype_b_loc@plt>
   356f8:	ldr	r1, [r0]
   356fc:	mov	r2, #0
   35700:	mov	r3, #1
   35704:	cmp	r8, #0
   35708:	bne	358cc <__assert_fail@plt+0x22d10>
   3570c:	ldrb	r0, [r1]
   35710:	tst	r0, #1
   35714:	beq	3572c <__assert_fail@plt+0x22b70>
   35718:	ubfx	r0, r2, #5, #3
   3571c:	and	r6, r2, #31
   35720:	ldr	r7, [r4, r0, lsl #2]
   35724:	orr	r7, r7, r3, lsl r6
   35728:	str	r7, [r4, r0, lsl #2]
   3572c:	add	r2, r2, #1
   35730:	add	r1, r1, #2
   35734:	mov	r0, #0
   35738:	cmp	r2, #256	; 0x100
   3573c:	bne	3570c <__assert_fail@plt+0x22b50>
   35740:	b	357e0 <__assert_fail@plt+0x22c24>
   35744:	bl	12844 <__ctype_b_loc@plt>
   35748:	ldr	r1, [r0]
   3574c:	mov	r2, #0
   35750:	mov	r3, #1
   35754:	cmp	r8, #0
   35758:	bne	35988 <__assert_fail@plt+0x22dcc>
   3575c:	ldrsh	r0, [r1]
   35760:	cmn	r0, #1
   35764:	bgt	3577c <__assert_fail@plt+0x22bc0>
   35768:	ubfx	r0, r2, #5, #3
   3576c:	and	r6, r2, #31
   35770:	ldr	r7, [r4, r0, lsl #2]
   35774:	orr	r7, r7, r3, lsl r6
   35778:	str	r7, [r4, r0, lsl #2]
   3577c:	add	r2, r2, #1
   35780:	add	r1, r1, #2
   35784:	mov	r0, #0
   35788:	cmp	r2, #256	; 0x100
   3578c:	bne	3575c <__assert_fail@plt+0x22ba0>
   35790:	b	357e0 <__assert_fail@plt+0x22c24>
   35794:	bl	12844 <__ctype_b_loc@plt>
   35798:	ldr	r1, [r0]
   3579c:	mov	r2, #0
   357a0:	mov	r3, #1
   357a4:	cmp	r8, #0
   357a8:	bne	35a08 <__assert_fail@plt+0x22e4c>
   357ac:	ldrb	r0, [r1]
   357b0:	tst	r0, #4
   357b4:	beq	357cc <__assert_fail@plt+0x22c10>
   357b8:	ubfx	r0, r2, #5, #3
   357bc:	and	r6, r2, #31
   357c0:	ldr	r7, [r4, r0, lsl #2]
   357c4:	orr	r7, r7, r3, lsl r6
   357c8:	str	r7, [r4, r0, lsl #2]
   357cc:	add	r2, r2, #1
   357d0:	add	r1, r1, #2
   357d4:	mov	r0, #0
   357d8:	cmp	r2, #256	; 0x100
   357dc:	bne	357ac <__assert_fail@plt+0x22bf0>
   357e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   357e4:	mov	r1, #1
   357e8:	orr	r9, r1, r0, lsl #1
   357ec:	ldr	r0, [r7, #12]
   357f0:	lsl	r1, r9, #2
   357f4:	bl	2ecdc <__assert_fail@plt+0x1c120>
   357f8:	cmp	r0, #0
   357fc:	moveq	r0, #12
   35800:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   35804:	str	r0, [r7, #12]
   35808:	str	r9, [r5]
   3580c:	b	352f4 <__assert_fail@plt+0x22738>
   35810:	ldrb	r0, [r1, #1]
   35814:	tst	r0, #64	; 0x40
   35818:	beq	35834 <__assert_fail@plt+0x22c78>
   3581c:	ldrb	r0, [r8, r2]
   35820:	ubfx	r7, r0, #5, #3
   35824:	and	r0, r0, #31
   35828:	ldr	r6, [r4, r7, lsl #2]
   3582c:	orr	r0, r6, r3, lsl r0
   35830:	str	r0, [r4, r7, lsl #2]
   35834:	add	r2, r2, #1
   35838:	add	r1, r1, #2
   3583c:	mov	r0, #0
   35840:	cmp	r2, #256	; 0x100
   35844:	bne	35810 <__assert_fail@plt+0x22c54>
   35848:	b	357e0 <__assert_fail@plt+0x22c24>
   3584c:	ldrb	r0, [r1, #1]
   35850:	tst	r0, #1
   35854:	beq	35870 <__assert_fail@plt+0x22cb4>
   35858:	ldrb	r0, [r8, r2]
   3585c:	ubfx	r7, r0, #5, #3
   35860:	and	r0, r0, #31
   35864:	ldr	r6, [r4, r7, lsl #2]
   35868:	orr	r0, r6, r3, lsl r0
   3586c:	str	r0, [r4, r7, lsl #2]
   35870:	add	r2, r2, #1
   35874:	add	r1, r1, #2
   35878:	mov	r0, #0
   3587c:	cmp	r2, #256	; 0x100
   35880:	bne	3584c <__assert_fail@plt+0x22c90>
   35884:	b	357e0 <__assert_fail@plt+0x22c24>
   35888:	mov	r2, #0
   3588c:	mov	r3, #1
   35890:	ldrb	r0, [r1]
   35894:	tst	r0, #8
   35898:	beq	358b4 <__assert_fail@plt+0x22cf8>
   3589c:	ldrb	r0, [r8, r2]
   358a0:	ubfx	r7, r0, #5, #3
   358a4:	and	r0, r0, #31
   358a8:	ldr	r6, [r4, r7, lsl #2]
   358ac:	orr	r0, r6, r3, lsl r0
   358b0:	str	r0, [r4, r7, lsl #2]
   358b4:	add	r2, r2, #1
   358b8:	add	r1, r1, #2
   358bc:	mov	r0, #0
   358c0:	cmp	r2, #256	; 0x100
   358c4:	bne	35890 <__assert_fail@plt+0x22cd4>
   358c8:	b	357e0 <__assert_fail@plt+0x22c24>
   358cc:	ldrb	r0, [r1]
   358d0:	tst	r0, #1
   358d4:	beq	358f0 <__assert_fail@plt+0x22d34>
   358d8:	ldrb	r0, [r8, r2]
   358dc:	ubfx	r7, r0, #5, #3
   358e0:	and	r0, r0, #31
   358e4:	ldr	r6, [r4, r7, lsl #2]
   358e8:	orr	r0, r6, r3, lsl r0
   358ec:	str	r0, [r4, r7, lsl #2]
   358f0:	add	r2, r2, #1
   358f4:	add	r1, r1, #2
   358f8:	mov	r0, #0
   358fc:	cmp	r2, #256	; 0x100
   35900:	bne	358cc <__assert_fail@plt+0x22d10>
   35904:	b	357e0 <__assert_fail@plt+0x22c24>
   35908:	mov	r2, #0
   3590c:	mov	r3, #1
   35910:	ldrb	r0, [r1]
   35914:	tst	r0, #2
   35918:	beq	35934 <__assert_fail@plt+0x22d78>
   3591c:	ldrb	r0, [r8, r2]
   35920:	ubfx	r7, r0, #5, #3
   35924:	and	r0, r0, #31
   35928:	ldr	r6, [r4, r7, lsl #2]
   3592c:	orr	r0, r6, r3, lsl r0
   35930:	str	r0, [r4, r7, lsl #2]
   35934:	add	r2, r2, #1
   35938:	add	r1, r1, #2
   3593c:	mov	r0, #0
   35940:	cmp	r2, #256	; 0x100
   35944:	bne	35910 <__assert_fail@plt+0x22d54>
   35948:	b	357e0 <__assert_fail@plt+0x22c24>
   3594c:	ldrb	r0, [r1, #1]
   35950:	tst	r0, #16
   35954:	beq	35970 <__assert_fail@plt+0x22db4>
   35958:	ldrb	r0, [r8, r2]
   3595c:	ubfx	r7, r0, #5, #3
   35960:	and	r0, r0, #31
   35964:	ldr	r6, [r4, r7, lsl #2]
   35968:	orr	r0, r6, r3, lsl r0
   3596c:	str	r0, [r4, r7, lsl #2]
   35970:	add	r2, r2, #1
   35974:	add	r1, r1, #2
   35978:	mov	r0, #0
   3597c:	cmp	r2, #256	; 0x100
   35980:	bne	3594c <__assert_fail@plt+0x22d90>
   35984:	b	357e0 <__assert_fail@plt+0x22c24>
   35988:	ldrsh	r0, [r1]
   3598c:	cmn	r0, #1
   35990:	bgt	359ac <__assert_fail@plt+0x22df0>
   35994:	ldrb	r0, [r8, r2]
   35998:	ubfx	r7, r0, #5, #3
   3599c:	and	r0, r0, #31
   359a0:	ldr	r6, [r4, r7, lsl #2]
   359a4:	orr	r0, r6, r3, lsl r0
   359a8:	str	r0, [r4, r7, lsl #2]
   359ac:	add	r2, r2, #1
   359b0:	add	r1, r1, #2
   359b4:	mov	r0, #0
   359b8:	cmp	r2, #256	; 0x100
   359bc:	bne	35988 <__assert_fail@plt+0x22dcc>
   359c0:	b	357e0 <__assert_fail@plt+0x22c24>
   359c4:	mov	r2, #0
   359c8:	mov	r3, #1
   359cc:	ldrb	r0, [r1, #1]
   359d0:	tst	r0, #2
   359d4:	beq	359f0 <__assert_fail@plt+0x22e34>
   359d8:	ldrb	r0, [r8, r2]
   359dc:	ubfx	r7, r0, #5, #3
   359e0:	and	r0, r0, #31
   359e4:	ldr	r6, [r4, r7, lsl #2]
   359e8:	orr	r0, r6, r3, lsl r0
   359ec:	str	r0, [r4, r7, lsl #2]
   359f0:	add	r2, r2, #1
   359f4:	add	r1, r1, #2
   359f8:	mov	r0, #0
   359fc:	cmp	r2, #256	; 0x100
   35a00:	bne	359cc <__assert_fail@plt+0x22e10>
   35a04:	b	357e0 <__assert_fail@plt+0x22c24>
   35a08:	ldrb	r0, [r1]
   35a0c:	tst	r0, #4
   35a10:	beq	35a2c <__assert_fail@plt+0x22e70>
   35a14:	ldrb	r0, [r8, r2]
   35a18:	ubfx	r7, r0, #5, #3
   35a1c:	and	r0, r0, #31
   35a20:	ldr	r6, [r4, r7, lsl #2]
   35a24:	orr	r0, r6, r3, lsl r0
   35a28:	str	r0, [r4, r7, lsl #2]
   35a2c:	add	r2, r2, #1
   35a30:	add	r1, r1, #2
   35a34:	mov	r0, #0
   35a38:	cmp	r2, #256	; 0x100
   35a3c:	bne	35a08 <__assert_fail@plt+0x22e4c>
   35a40:	b	357e0 <__assert_fail@plt+0x22c24>
   35a44:	mov	r2, #0
   35a48:	mov	r3, #1
   35a4c:	ldrb	r0, [r1, #1]
   35a50:	tst	r0, #32
   35a54:	beq	35a70 <__assert_fail@plt+0x22eb4>
   35a58:	ldrb	r0, [r8, r2]
   35a5c:	ubfx	r7, r0, #5, #3
   35a60:	and	r0, r0, #31
   35a64:	ldr	r6, [r4, r7, lsl #2]
   35a68:	orr	r0, r6, r3, lsl r0
   35a6c:	str	r0, [r4, r7, lsl #2]
   35a70:	add	r2, r2, #1
   35a74:	add	r1, r1, #2
   35a78:	mov	r0, #0
   35a7c:	cmp	r2, #256	; 0x100
   35a80:	bne	35a4c <__assert_fail@plt+0x22e90>
   35a84:	b	357e0 <__assert_fail@plt+0x22c24>
   35a88:	mov	r2, #0
   35a8c:	mov	r3, #1
   35a90:	ldrb	r0, [r1, #1]
   35a94:	tst	r0, #4
   35a98:	beq	35ab4 <__assert_fail@plt+0x22ef8>
   35a9c:	ldrb	r0, [r8, r2]
   35aa0:	ubfx	r7, r0, #5, #3
   35aa4:	and	r0, r0, #31
   35aa8:	ldr	r6, [r4, r7, lsl #2]
   35aac:	orr	r0, r6, r3, lsl r0
   35ab0:	str	r0, [r4, r7, lsl #2]
   35ab4:	add	r2, r2, #1
   35ab8:	add	r1, r1, #2
   35abc:	mov	r0, #0
   35ac0:	cmp	r2, #256	; 0x100
   35ac4:	bne	35a90 <__assert_fail@plt+0x22ed4>
   35ac8:	b	357e0 <__assert_fail@plt+0x22c24>
   35acc:	mov	r2, #0
   35ad0:	mov	r3, #1
   35ad4:	ldrb	r0, [r1, #1]
   35ad8:	tst	r0, #8
   35adc:	beq	35af8 <__assert_fail@plt+0x22f3c>
   35ae0:	ldrb	r0, [r8, r2]
   35ae4:	ubfx	r7, r0, #5, #3
   35ae8:	and	r0, r0, #31
   35aec:	ldr	r6, [r4, r7, lsl #2]
   35af0:	orr	r0, r6, r3, lsl r0
   35af4:	str	r0, [r4, r7, lsl #2]
   35af8:	add	r2, r2, #1
   35afc:	add	r1, r1, #2
   35b00:	mov	r0, #0
   35b04:	cmp	r2, #256	; 0x100
   35b08:	bne	35ad4 <__assert_fail@plt+0x22f18>
   35b0c:	b	357e0 <__assert_fail@plt+0x22c24>
   35b10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   35b14:	add	fp, sp, #24
   35b18:	mov	r6, r0
   35b1c:	mov	r4, r2
   35b20:	mov	r5, r1
   35b24:	mvn	r0, #0
   35b28:	movw	r8, #32816	; 0x8030
   35b2c:	b	35b8c <__assert_fail@plt+0x22fd0>
   35b30:	cmp	r2, #2
   35b34:	beq	35bc0 <__assert_fail@plt+0x23004>
   35b38:	ldrb	r1, [r5]
   35b3c:	cmp	r1, #44	; 0x2c
   35b40:	beq	35bb8 <__assert_fail@plt+0x22ffc>
   35b44:	mvn	r0, #1
   35b48:	cmp	r1, #48	; 0x30
   35b4c:	bcc	35b8c <__assert_fail@plt+0x22fd0>
   35b50:	cmp	r2, #1
   35b54:	bne	35b8c <__assert_fail@plt+0x22fd0>
   35b58:	cmn	r7, #2
   35b5c:	beq	35b8c <__assert_fail@plt+0x22fd0>
   35b60:	cmp	r1, #57	; 0x39
   35b64:	bhi	35b8c <__assert_fail@plt+0x22fd0>
   35b68:	cmn	r7, #1
   35b6c:	beq	35b88 <__assert_fail@plt+0x22fcc>
   35b70:	add	r0, r7, r7, lsl #2
   35b74:	add	r1, r1, r0, lsl #1
   35b78:	sub	r0, r1, #48	; 0x30
   35b7c:	cmp	r1, r8
   35b80:	movwgt	r0, #32768	; 0x8000
   35b84:	b	35b8c <__assert_fail@plt+0x22fd0>
   35b88:	sub	r0, r1, #48	; 0x30
   35b8c:	mov	r7, r0
   35b90:	mov	r0, r5
   35b94:	mov	r1, r6
   35b98:	mov	r2, r4
   35b9c:	bl	32d60 <__assert_fail@plt+0x201a4>
   35ba0:	ldr	r1, [r6, #40]	; 0x28
   35ba4:	add	r0, r1, r0
   35ba8:	str	r0, [r6, #40]	; 0x28
   35bac:	ldrb	r2, [r5, #4]
   35bb0:	cmp	r2, #24
   35bb4:	bne	35b30 <__assert_fail@plt+0x22f74>
   35bb8:	mov	r0, r7
   35bbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   35bc0:	mvn	r7, #1
   35bc4:	b	35bb8 <__assert_fail@plt+0x22ffc>
   35bc8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   35bcc:	add	fp, sp, #24
   35bd0:	sub	sp, sp, #8
   35bd4:	mov	r3, r0
   35bd8:	mov	r5, r0
   35bdc:	mov	r8, r1
   35be0:	mov	r0, r1
   35be4:	mov	r1, #0
   35be8:	mov	r2, #0
   35bec:	mov	r7, #0
   35bf0:	ldr	r4, [r3], #20
   35bf4:	bl	34b94 <__assert_fail@plt+0x21fd8>
   35bf8:	cmp	r0, #0
   35bfc:	str	r0, [sp, #4]
   35c00:	beq	35c9c <__assert_fail@plt+0x230e0>
   35c04:	mov	r9, r0
   35c08:	add	r6, sp, #4
   35c0c:	mov	r7, #0
   35c10:	str	r4, [r0]
   35c14:	ldr	r0, [r6]
   35c18:	ldr	r1, [r0, #24]
   35c1c:	orr	r1, r1, #262144	; 0x40000
   35c20:	str	r1, [r0, #24]
   35c24:	ldr	r0, [r5, #4]
   35c28:	ldr	r4, [r6]
   35c2c:	cmp	r0, #0
   35c30:	beq	35c40 <__assert_fail@plt+0x23084>
   35c34:	add	r6, r4, #4
   35c38:	mov	r5, r0
   35c3c:	b	35c74 <__assert_fail@plt+0x230b8>
   35c40:	mov	r1, #0
   35c44:	mov	r0, r5
   35c48:	ldr	r5, [r5, #8]
   35c4c:	cmp	r5, r1
   35c50:	cmpne	r5, #0
   35c54:	bne	35c70 <__assert_fail@plt+0x230b4>
   35c58:	ldr	r5, [r0]
   35c5c:	ldr	r4, [r4]
   35c60:	mov	r1, r0
   35c64:	cmp	r5, #0
   35c68:	bne	35c44 <__assert_fail@plt+0x23088>
   35c6c:	b	35c98 <__assert_fail@plt+0x230dc>
   35c70:	add	r6, r4, #8
   35c74:	add	r3, r5, #20
   35c78:	mov	r0, r8
   35c7c:	mov	r1, #0
   35c80:	mov	r2, #0
   35c84:	bl	34b94 <__assert_fail@plt+0x21fd8>
   35c88:	cmp	r0, #0
   35c8c:	str	r0, [r6]
   35c90:	bne	35c10 <__assert_fail@plt+0x23054>
   35c94:	b	35c9c <__assert_fail@plt+0x230e0>
   35c98:	mov	r7, r9
   35c9c:	mov	r0, r7
   35ca0:	sub	sp, fp, #24
   35ca4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35ca8:	push	{r4, r5, r6, r7, fp, lr}
   35cac:	add	fp, sp, #16
   35cb0:	mov	r6, r0
   35cb4:	mov	r5, r1
   35cb8:	mov	r0, r2
   35cbc:	mov	r4, r2
   35cc0:	mov	r1, r6
   35cc4:	blx	r5
   35cc8:	cmp	r0, #0
   35ccc:	popne	{r4, r5, r6, r7, fp, pc}
   35cd0:	ldr	r7, [r6, #4]
   35cd4:	cmp	r7, #0
   35cd8:	bne	35d0c <__assert_fail@plt+0x23150>
   35cdc:	mov	r1, #0
   35ce0:	b	35cf8 <__assert_fail@plt+0x2313c>
   35ce4:	ldr	r6, [r0]
   35ce8:	mov	r1, r0
   35cec:	cmp	r6, #0
   35cf0:	moveq	r0, #0
   35cf4:	popeq	{r4, r5, r6, r7, fp, pc}
   35cf8:	ldr	r7, [r6, #8]
   35cfc:	mov	r0, r6
   35d00:	cmp	r7, r1
   35d04:	cmpne	r7, #0
   35d08:	beq	35ce4 <__assert_fail@plt+0x23128>
   35d0c:	mov	r0, r4
   35d10:	mov	r1, r7
   35d14:	blx	r5
   35d18:	cmp	r0, #0
   35d1c:	mov	r6, r7
   35d20:	beq	35cd0 <__assert_fail@plt+0x23114>
   35d24:	pop	{r4, r5, r6, r7, fp, pc}
   35d28:	ldrb	r2, [r1, #24]
   35d2c:	cmp	r2, #17
   35d30:	beq	35d64 <__assert_fail@plt+0x231a8>
   35d34:	cmp	r2, #4
   35d38:	bne	35db8 <__assert_fail@plt+0x231fc>
   35d3c:	ldr	r2, [r0, #132]	; 0x84
   35d40:	cmp	r2, #0
   35d44:	beq	35db8 <__assert_fail@plt+0x231fc>
   35d48:	ldr	r3, [r1, #20]
   35d4c:	ldr	r2, [r2, r3, lsl #2]
   35d50:	mov	r3, #1
   35d54:	str	r2, [r1, #20]
   35d58:	ldr	r1, [r0, #80]	; 0x50
   35d5c:	orr	r1, r1, r3, lsl r2
   35d60:	b	35db4 <__assert_fail@plt+0x231f8>
   35d64:	ldr	r2, [r1, #4]
   35d68:	cmp	r2, #0
   35d6c:	beq	35db8 <__assert_fail@plt+0x231fc>
   35d70:	ldrb	r3, [r2, #24]
   35d74:	cmp	r3, #17
   35d78:	bne	35db8 <__assert_fail@plt+0x231fc>
   35d7c:	ldr	r3, [r2, #4]
   35d80:	ldr	r2, [r2, #20]
   35d84:	cmp	r3, #0
   35d88:	str	r3, [r1, #4]
   35d8c:	strne	r1, [r3]
   35d90:	cmp	r2, #31
   35d94:	ldr	r1, [r1, #20]
   35d98:	ldr	r3, [r0, #132]	; 0x84
   35d9c:	ldr	r1, [r3, r1, lsl #2]
   35da0:	str	r1, [r3, r2, lsl #2]
   35da4:	bgt	35db8 <__assert_fail@plt+0x231fc>
   35da8:	ldr	r1, [r0, #80]	; 0x50
   35dac:	mov	r3, #1
   35db0:	bic	r1, r1, r3, lsl r2
   35db4:	str	r1, [r0, #80]	; 0x50
   35db8:	mov	r0, #0
   35dbc:	bx	lr
   35dc0:	push	{r4, r5, fp, lr}
   35dc4:	add	fp, sp, #8
   35dc8:	sub	sp, sp, #8
   35dcc:	mov	r5, r0
   35dd0:	mov	r0, #0
   35dd4:	mov	r4, r1
   35dd8:	str	r0, [sp, #4]
   35ddc:	ldr	r2, [r1, #4]
   35de0:	cmp	r2, #0
   35de4:	beq	35e0c <__assert_fail@plt+0x23250>
   35de8:	ldrb	r0, [r2, #24]
   35dec:	cmp	r0, #17
   35df0:	bne	35e0c <__assert_fail@plt+0x23250>
   35df4:	add	r0, sp, #4
   35df8:	mov	r1, r5
   35dfc:	bl	360c4 <__assert_fail@plt+0x23508>
   35e00:	cmp	r0, #0
   35e04:	str	r0, [r4, #4]
   35e08:	strne	r4, [r0]
   35e0c:	ldr	r2, [r4, #8]
   35e10:	cmp	r2, #0
   35e14:	beq	35e3c <__assert_fail@plt+0x23280>
   35e18:	ldrb	r0, [r2, #24]
   35e1c:	cmp	r0, #17
   35e20:	bne	35e3c <__assert_fail@plt+0x23280>
   35e24:	add	r0, sp, #4
   35e28:	mov	r1, r5
   35e2c:	bl	360c4 <__assert_fail@plt+0x23508>
   35e30:	cmp	r0, #0
   35e34:	str	r0, [r4, #8]
   35e38:	strne	r4, [r0]
   35e3c:	ldr	r0, [sp, #4]
   35e40:	sub	sp, fp, #8
   35e44:	pop	{r4, r5, fp, pc}
   35e48:	push	{r4, r5, fp, lr}
   35e4c:	add	fp, sp, #8
   35e50:	ldr	r2, [r1, #24]
   35e54:	mov	r5, r0
   35e58:	mov	r4, r1
   35e5c:	uxtb	r0, r2
   35e60:	cmp	r0, #16
   35e64:	bne	35e84 <__assert_fail@plt+0x232c8>
   35e68:	ldr	r0, [r4, #4]
   35e6c:	ldr	r1, [r0, #12]
   35e70:	str	r1, [r4, #12]
   35e74:	ldr	r0, [r0, #28]
   35e78:	str	r0, [r4, #28]
   35e7c:	mov	r0, #0
   35e80:	pop	{r4, r5, fp, pc}
   35e84:	str	r4, [r4, #12]
   35e88:	mov	r0, r5
   35e8c:	ldr	r1, [r4, #20]
   35e90:	bl	36218 <__assert_fail@plt+0x2365c>
   35e94:	cmn	r0, #1
   35e98:	str	r0, [r4, #28]
   35e9c:	moveq	r0, #12
   35ea0:	popeq	{r4, r5, fp, pc}
   35ea4:	ldrb	r2, [r4, #24]
   35ea8:	mov	r1, r0
   35eac:	mov	r0, #0
   35eb0:	cmp	r2, #12
   35eb4:	popne	{r4, r5, fp, pc}
   35eb8:	ldr	r2, [r5]
   35ebc:	ldr	r3, [r4, #20]
   35ec0:	add	r1, r2, r1, lsl #3
   35ec4:	ldr	r2, [r1, #4]
   35ec8:	bfi	r2, r3, #8, #10
   35ecc:	str	r2, [r1, #4]
   35ed0:	pop	{r4, r5, fp, pc}
   35ed4:	ldrb	r0, [r1, #24]
   35ed8:	cmp	r0, #16
   35edc:	beq	35ef0 <__assert_fail@plt+0x23334>
   35ee0:	cmp	r0, #11
   35ee4:	bne	35f08 <__assert_fail@plt+0x2334c>
   35ee8:	ldr	r0, [r1, #4]
   35eec:	b	35f28 <__assert_fail@plt+0x2336c>
   35ef0:	ldmib	r1, {r0, r2}
   35ef4:	ldr	r3, [r2, #12]
   35ef8:	str	r3, [r0, #16]
   35efc:	ldr	r0, [r1, #16]
   35f00:	str	r0, [r2, #16]
   35f04:	b	35f2c <__assert_fail@plt+0x23370>
   35f08:	ldr	r0, [r1, #4]
   35f0c:	cmp	r0, #0
   35f10:	ldrne	r2, [r1, #16]
   35f14:	strne	r2, [r0, #16]
   35f18:	ldr	r0, [r1, #8]
   35f1c:	cmp	r0, #0
   35f20:	beq	35f2c <__assert_fail@plt+0x23370>
   35f24:	ldr	r1, [r1, #16]
   35f28:	str	r1, [r0, #16]
   35f2c:	mov	r0, #0
   35f30:	bx	lr
   35f34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   35f38:	add	fp, sp, #24
   35f3c:	ldrb	r3, [r1, #24]
   35f40:	ldr	r2, [r1, #28]
   35f44:	mov	r4, #0
   35f48:	sub	r3, r3, #2
   35f4c:	cmp	r3, #14
   35f50:	bhi	36058 <__assert_fail@plt+0x2349c>
   35f54:	add	r7, pc, #0
   35f58:	ldr	pc, [r7, r3, lsl #2]
   35f5c:	andeq	r6, r3, r8, lsr #1
   35f60:	andeq	r6, r3, r8, asr r0
   35f64:	andeq	r6, r3, ip, rrx
   35f68:	andeq	r6, r3, r8, asr r0
   35f6c:	andeq	r6, r3, r8, asr r0
   35f70:	andeq	r6, r3, r8, asr r0
   35f74:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   35f78:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   35f7c:	ldrdeq	r5, [r3], -r4
   35f80:	ldrdeq	r5, [r3], -r4
   35f84:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   35f88:	andeq	r6, r3, r8, asr r0
   35f8c:	andeq	r6, r3, r8, asr r0
   35f90:	andeq	r6, r3, r8, asr r0
   35f94:	andeq	r6, r3, r8, lsr #1
   35f98:	ldr	r1, [r1, #16]
   35f9c:	ldr	r5, [r1, #28]
   35fa0:	ldr	r6, [r0, #20]
   35fa4:	add	r0, r2, r2, lsl #1
   35fa8:	mov	r1, #1
   35fac:	str	r1, [r6, r0, lsl #2]!
   35fb0:	mov	r0, #4
   35fb4:	mov	r7, r6
   35fb8:	str	r1, [r7, #4]!
   35fbc:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   35fc0:	cmp	r0, #0
   35fc4:	str	r0, [r6, #8]
   35fc8:	beq	360b0 <__assert_fail@plt+0x234f4>
   35fcc:	str	r5, [r0]
   35fd0:	b	360a8 <__assert_fail@plt+0x234ec>
   35fd4:	ldrb	r3, [r0, #88]	; 0x58
   35fd8:	add	r6, r1, #16
   35fdc:	add	r5, r2, r2, lsl #1
   35fe0:	orr	r3, r3, #1
   35fe4:	strb	r3, [r0, #88]	; 0x58
   35fe8:	mov	r3, r6
   35fec:	ldr	r7, [r1, #4]
   35ff0:	ldr	r1, [r1, #8]
   35ff4:	cmp	r1, #0
   35ff8:	addne	r3, r1, #12
   35ffc:	cmp	r7, #0
   36000:	ldr	r1, [r3]
   36004:	addne	r6, r7, #12
   36008:	ldr	r8, [r1, #28]
   3600c:	ldr	r1, [r6]
   36010:	ldr	r6, [r0, #20]
   36014:	mov	r0, #2
   36018:	ldr	r9, [r1, #28]
   3601c:	mov	r7, r6
   36020:	str	r0, [r7, r5, lsl #2]!
   36024:	mov	r0, #8
   36028:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   3602c:	cmp	r0, #0
   36030:	str	r0, [r7, #8]
   36034:	beq	360bc <__assert_fail@plt+0x23500>
   36038:	add	r1, r6, r5, lsl #2
   3603c:	cmp	r9, r8
   36040:	add	r1, r1, #4
   36044:	bne	3608c <__assert_fail@plt+0x234d0>
   36048:	mov	r2, #1
   3604c:	str	r2, [r1]
   36050:	str	r9, [r0]
   36054:	b	360a8 <__assert_fail@plt+0x234ec>
   36058:	ldr	r1, [r1, #16]
   3605c:	ldr	r0, [r0, #12]
   36060:	ldr	r1, [r1, #28]
   36064:	str	r1, [r0, r2, lsl #2]
   36068:	b	360a8 <__assert_fail@plt+0x234ec>
   3606c:	ldr	r7, [r1, #16]
   36070:	ldr	r3, [r0, #12]
   36074:	ldr	r5, [r7, #28]
   36078:	str	r5, [r3, r2, lsl #2]
   3607c:	ldrb	r1, [r1, #24]
   36080:	cmp	r1, #4
   36084:	beq	35fa0 <__assert_fail@plt+0x233e4>
   36088:	b	360a8 <__assert_fail@plt+0x234ec>
   3608c:	mov	r2, #2
   36090:	str	r2, [r1]
   36094:	bge	360a4 <__assert_fail@plt+0x234e8>
   36098:	str	r9, [r0]
   3609c:	str	r8, [r0, #4]
   360a0:	b	360a8 <__assert_fail@plt+0x234ec>
   360a4:	stm	r0, {r8, r9}
   360a8:	mov	r0, r4
   360ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   360b0:	mov	r0, #0
   360b4:	str	r0, [r7]
   360b8:	str	r0, [r6]
   360bc:	mov	r4, #12
   360c0:	b	360a8 <__assert_fail@plt+0x234ec>
   360c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   360c8:	add	fp, sp, #28
   360cc:	sub	sp, sp, #12
   360d0:	ldr	r5, [r2, #4]
   360d4:	ldr	sl, [r1]
   360d8:	mov	r9, r2
   360dc:	cmp	r5, #0
   360e0:	ldrbne	r1, [r1, #28]
   360e4:	andsne	r1, r1, #16
   360e8:	bne	361f0 <__assert_fail@plt+0x23634>
   360ec:	str	r0, [sp]
   360f0:	mov	r0, #8
   360f4:	mov	r8, #0
   360f8:	add	r3, sp, #4
   360fc:	mov	r1, #0
   36100:	mov	r2, #0
   36104:	str	r0, [sp, #8]
   36108:	mov	r0, sl
   3610c:	str	r8, [sp, #4]
   36110:	bl	34b94 <__assert_fail@plt+0x21fd8>
   36114:	mov	r7, r0
   36118:	mov	r0, #9
   3611c:	add	r3, sp, #4
   36120:	mov	r1, #0
   36124:	mov	r2, #0
   36128:	str	r0, [sp, #8]
   3612c:	mov	r0, sl
   36130:	str	r8, [sp, #4]
   36134:	bl	34b94 <__assert_fail@plt+0x21fd8>
   36138:	mov	r4, r0
   3613c:	cmp	r5, #0
   36140:	mov	r6, r0
   36144:	beq	3616c <__assert_fail@plt+0x235b0>
   36148:	mov	r0, #16
   3614c:	add	r3, sp, #4
   36150:	mov	r1, r5
   36154:	mov	r2, r4
   36158:	str	r0, [sp, #8]
   3615c:	mov	r0, sl
   36160:	str	r8, [sp, #4]
   36164:	bl	34b94 <__assert_fail@plt+0x21fd8>
   36168:	mov	r6, r0
   3616c:	mov	r0, #16
   36170:	add	r3, sp, #4
   36174:	mov	r1, r7
   36178:	mov	r2, r6
   3617c:	str	r0, [sp, #8]
   36180:	mov	r0, sl
   36184:	str	r8, [sp, #4]
   36188:	bl	34b94 <__assert_fail@plt+0x21fd8>
   3618c:	cmp	r4, #0
   36190:	beq	361a0 <__assert_fail@plt+0x235e4>
   36194:	cmp	r7, #0
   36198:	cmpne	r6, #0
   3619c:	bne	361b4 <__assert_fail@plt+0x235f8>
   361a0:	ldr	r1, [sp]
   361a4:	mov	r0, #12
   361a8:	mov	r5, #0
   361ac:	str	r0, [r1]
   361b0:	b	3620c <__assert_fail@plt+0x23650>
   361b4:	mov	r5, r0
   361b8:	cmp	r0, #0
   361bc:	beq	361a0 <__assert_fail@plt+0x235e4>
   361c0:	ldr	r0, [r9, #20]
   361c4:	str	r0, [r4, #20]
   361c8:	str	r0, [r7, #20]
   361cc:	ldr	r1, [r9, #24]
   361d0:	ldr	r0, [r4, #24]
   361d4:	lsr	r1, r1, #19
   361d8:	bfi	r0, r1, #19, #1
   361dc:	str	r0, [r4, #24]
   361e0:	ldr	r0, [r7, #24]
   361e4:	bfi	r0, r1, #19, #1
   361e8:	str	r0, [r7, #24]
   361ec:	b	3620c <__assert_fail@plt+0x23650>
   361f0:	ldr	r3, [r9, #20]
   361f4:	cmp	r3, #31
   361f8:	bgt	3620c <__assert_fail@plt+0x23650>
   361fc:	ldr	r1, [sl, #80]	; 0x50
   36200:	mov	r2, #1
   36204:	tst	r1, r2, lsl r3
   36208:	bne	360ec <__assert_fail@plt+0x23530>
   3620c:	mov	r0, r5
   36210:	sub	sp, fp, #28
   36214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3621c:	add	fp, sp, #28
   36220:	sub	sp, sp, #12
   36224:	mov	r4, r0
   36228:	ldr	r7, [r0, #4]
   3622c:	ldr	r0, [r0, #8]
   36230:	mov	r5, r2
   36234:	mov	r9, r1
   36238:	cmp	r0, r7
   3623c:	bcs	36308 <__assert_fail@plt+0x2374c>
   36240:	ldr	r1, [r4]
   36244:	str	r9, [r1, r0, lsl #3]!
   36248:	str	r5, [r1, #4]
   3624c:	ldr	r0, [r4]
   36250:	ldr	r1, [r4, #8]
   36254:	add	r0, r0, r1, lsl #3
   36258:	ldr	r1, [r0, #4]
   3625c:	bfc	r1, #8, #10
   36260:	str	r1, [r0, #4]
   36264:	uxtb	r1, r5
   36268:	cmp	r1, #5
   3626c:	bne	36280 <__assert_fail@plt+0x236c4>
   36270:	ldr	r2, [r4, #92]	; 0x5c
   36274:	mov	r0, #1048576	; 0x100000
   36278:	cmp	r2, #1
   3627c:	bgt	36290 <__assert_fail@plt+0x236d4>
   36280:	sub	r0, r1, #6
   36284:	clz	r0, r0
   36288:	lsr	r0, r0, #5
   3628c:	lsl	r0, r0, #20
   36290:	ldr	r1, [r4]
   36294:	ldr	r2, [r4, #8]
   36298:	add	r1, r1, r2, lsl #3
   3629c:	ldr	r2, [r1, #4]
   362a0:	bic	r2, r2, #1048576	; 0x100000
   362a4:	orr	r0, r2, r0
   362a8:	mvn	r2, #0
   362ac:	str	r0, [r1, #4]
   362b0:	ldr	r0, [r4, #8]
   362b4:	ldr	r1, [r4, #12]
   362b8:	str	r2, [r1, r0, lsl #2]
   362bc:	mov	r2, #0
   362c0:	ldr	r0, [r4, #8]
   362c4:	ldr	r1, [r4, #20]
   362c8:	add	r0, r0, r0, lsl #1
   362cc:	str	r2, [r1, r0, lsl #2]!
   362d0:	str	r2, [r1, #4]
   362d4:	str	r2, [r1, #8]
   362d8:	ldr	r0, [r4, #8]
   362dc:	ldr	r1, [r4, #24]
   362e0:	add	r0, r0, r0, lsl #1
   362e4:	str	r2, [r1, r0, lsl #2]!
   362e8:	str	r2, [r1, #4]
   362ec:	str	r2, [r1, #8]
   362f0:	ldr	r6, [r4, #8]
   362f4:	add	r0, r6, #1
   362f8:	str	r0, [r4, #8]
   362fc:	mov	r0, r6
   36300:	sub	sp, fp, #28
   36304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36308:	movw	r0, #21845	; 0x5555
   3630c:	lsl	r1, r7, #1
   36310:	mvn	r6, #0
   36314:	movt	r0, #5461	; 0x1555
   36318:	cmp	r1, r0
   3631c:	bhi	362fc <__assert_fail@plt+0x23740>
   36320:	ldr	r0, [r4]
   36324:	str	r1, [sp, #8]
   36328:	lsl	r1, r7, #4
   3632c:	bl	2ecdc <__assert_fail@plt+0x1c120>
   36330:	cmp	r0, #0
   36334:	beq	362fc <__assert_fail@plt+0x23740>
   36338:	str	r0, [r4]
   3633c:	lsl	r8, r7, #3
   36340:	ldr	r0, [r4, #12]
   36344:	mov	r1, r8
   36348:	bl	2ecdc <__assert_fail@plt+0x1c120>
   3634c:	str	r0, [sp, #4]
   36350:	ldr	r0, [r4, #16]
   36354:	mov	r1, r8
   36358:	bl	2ecdc <__assert_fail@plt+0x1c120>
   3635c:	mov	r2, r0
   36360:	ldr	r0, [r4, #20]
   36364:	add	r1, r7, r7, lsl #1
   36368:	lsl	r8, r1, #3
   3636c:	mov	r7, r2
   36370:	mov	r1, r8
   36374:	bl	2ecdc <__assert_fail@plt+0x1c120>
   36378:	mov	sl, r0
   3637c:	ldr	r0, [r4, #24]
   36380:	mov	r1, r8
   36384:	bl	2ecdc <__assert_fail@plt+0x1c120>
   36388:	mov	r8, r0
   3638c:	ldr	r0, [sp, #4]
   36390:	cmp	r0, #0
   36394:	beq	363a4 <__assert_fail@plt+0x237e8>
   36398:	cmp	r7, #0
   3639c:	cmpne	sl, #0
   363a0:	bne	363c4 <__assert_fail@plt+0x23808>
   363a4:	bl	2c048 <__assert_fail@plt+0x1948c>
   363a8:	mov	r0, r7
   363ac:	bl	2c048 <__assert_fail@plt+0x1948c>
   363b0:	mov	r0, sl
   363b4:	bl	2c048 <__assert_fail@plt+0x1948c>
   363b8:	mov	r0, r8
   363bc:	bl	2c048 <__assert_fail@plt+0x1948c>
   363c0:	b	362fc <__assert_fail@plt+0x23740>
   363c4:	cmp	r8, #0
   363c8:	beq	363a4 <__assert_fail@plt+0x237e8>
   363cc:	add	r1, r4, #12
   363d0:	stm	r1, {r0, r7, sl}
   363d4:	str	r8, [r4, #24]
   363d8:	ldr	r0, [sp, #8]
   363dc:	str	r0, [r4, #4]
   363e0:	ldr	r0, [r4, #8]
   363e4:	b	36240 <__assert_fail@plt+0x23684>
   363e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   363ec:	add	fp, sp, #28
   363f0:	sub	sp, sp, #44	; 0x2c
   363f4:	mov	r8, r0
   363f8:	ldr	r0, [r1, #20]
   363fc:	add	r4, r2, r2, lsl #1
   36400:	mov	r5, r1
   36404:	mov	r1, #0
   36408:	mov	r9, r3
   3640c:	mov	r6, r2
   36410:	add	r0, r0, r4, lsl #2
   36414:	ldr	r0, [r0, #4]
   36418:	str	r1, [sp, #36]	; 0x24
   3641c:	add	r0, r0, #1
   36420:	str	r0, [sp, #32]
   36424:	lsl	r0, r0, #2
   36428:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   3642c:	cmp	r0, #0
   36430:	str	r0, [sp, #40]	; 0x28
   36434:	beq	365fc <__assert_fail@plt+0x23a40>
   36438:	mov	r1, #1
   3643c:	str	r6, [r0]
   36440:	str	r1, [sp, #36]	; 0x24
   36444:	mvn	r1, #0
   36448:	ldr	r0, [r5, #24]
   3644c:	add	r0, r0, r4, lsl #2
   36450:	str	r1, [r0, #4]
   36454:	ldr	r2, [r5]
   36458:	add	r0, r2, r6, lsl #3
   3645c:	ldr	r0, [r0, #4]
   36460:	ubfx	r1, r0, #8, #10
   36464:	cmp	r1, #0
   36468:	beq	364c4 <__assert_fail@plt+0x23908>
   3646c:	ldr	r3, [r5, #20]
   36470:	add	r3, r3, r4, lsl #2
   36474:	ldr	r7, [r3, #4]
   36478:	cmp	r7, #0
   3647c:	beq	364c4 <__assert_fail@plt+0x23908>
   36480:	ldr	r3, [r3, #8]
   36484:	ldr	r3, [r3]
   36488:	add	r2, r2, r3, lsl #3
   3648c:	ldrb	r2, [r2, #6]
   36490:	tst	r2, #4
   36494:	bne	364c4 <__assert_fail@plt+0x23908>
   36498:	str	r1, [sp]
   3649c:	mov	r0, r5
   364a0:	mov	r1, r6
   364a4:	mov	r2, r6
   364a8:	mov	r3, r6
   364ac:	bl	36604 <__assert_fail@plt+0x23a48>
   364b0:	cmp	r0, #0
   364b4:	bne	365f4 <__assert_fail@plt+0x23a38>
   364b8:	ldr	r0, [r5]
   364bc:	add	r0, r0, r6, lsl #3
   364c0:	ldr	r0, [r0, #4]
   364c4:	tst	r0, #8
   364c8:	beq	365c8 <__assert_fail@plt+0x23a0c>
   364cc:	ldr	r0, [r5, #20]
   364d0:	add	r1, r0, r4, lsl #2
   364d4:	ldr	r1, [r1, #4]
   364d8:	cmp	r1, #1
   364dc:	blt	365c8 <__assert_fail@plt+0x23a0c>
   364e0:	str	r8, [sp, #12]
   364e4:	mov	r8, #0
   364e8:	add	r7, sp, #16
   364ec:	add	sl, sp, #32
   364f0:	mov	r6, #0
   364f4:	str	r9, [sp, #8]
   364f8:	add	r0, r0, r4, lsl #2
   364fc:	ldr	r0, [r0, #8]
   36500:	ldr	r2, [r0, r6, lsl #2]
   36504:	ldr	r0, [r5, #24]
   36508:	add	r9, r2, r2, lsl #1
   3650c:	add	r0, r0, r9, lsl #2
   36510:	ldr	r1, [r0, #4]
   36514:	cmn	r1, #1
   36518:	beq	36580 <__assert_fail@plt+0x239c4>
   3651c:	cmp	r1, #0
   36520:	bne	36540 <__assert_fail@plt+0x23984>
   36524:	mov	r0, r7
   36528:	mov	r1, r5
   3652c:	mov	r3, #0
   36530:	bl	363e8 <__assert_fail@plt+0x2382c>
   36534:	cmp	r0, #0
   36538:	beq	36550 <__assert_fail@plt+0x23994>
   3653c:	b	365f4 <__assert_fail@plt+0x23a38>
   36540:	vldr	d16, [r0]
   36544:	ldr	r0, [r0, #8]
   36548:	str	r0, [sp, #24]
   3654c:	vstr	d16, [sp, #16]
   36550:	mov	r0, sl
   36554:	mov	r1, r7
   36558:	bl	368e0 <__assert_fail@plt+0x23d24>
   3655c:	cmp	r0, #0
   36560:	bne	365f4 <__assert_fail@plt+0x23a38>
   36564:	ldr	r0, [r5, #24]
   36568:	add	r0, r0, r9, lsl #2
   3656c:	ldr	r0, [r0, #4]
   36570:	cmp	r0, #0
   36574:	bne	36584 <__assert_fail@plt+0x239c8>
   36578:	ldr	r0, [sp, #24]
   3657c:	bl	2c048 <__assert_fail@plt+0x1948c>
   36580:	mov	r8, #1
   36584:	ldr	r0, [r5, #20]
   36588:	add	r6, r6, #1
   3658c:	add	r1, r0, r4, lsl #2
   36590:	ldr	r1, [r1, #4]
   36594:	cmp	r6, r1
   36598:	blt	364f8 <__assert_fail@plt+0x2393c>
   3659c:	tst	r8, #1
   365a0:	ldr	r8, [sp, #12]
   365a4:	ldr	r0, [sp, #8]
   365a8:	beq	365c8 <__assert_fail@plt+0x23a0c>
   365ac:	cmp	r0, #0
   365b0:	bne	365c8 <__assert_fail@plt+0x23a0c>
   365b4:	ldr	r0, [r5, #24]
   365b8:	mov	r1, #0
   365bc:	add	r0, r0, r4, lsl #2
   365c0:	str	r1, [r0, #4]
   365c4:	b	365e0 <__assert_fail@plt+0x23a24>
   365c8:	ldr	r0, [r5, #24]
   365cc:	vldr	d16, [sp, #32]
   365d0:	ldr	r1, [sp, #40]	; 0x28
   365d4:	add	r0, r0, r4, lsl #2
   365d8:	str	r1, [r0, #8]
   365dc:	vstr	d16, [r0]
   365e0:	ldr	r0, [sp, #40]	; 0x28
   365e4:	vldr	d16, [sp, #32]
   365e8:	str	r0, [r8, #8]
   365ec:	mov	r0, #0
   365f0:	vstr	d16, [r8]
   365f4:	sub	sp, fp, #28
   365f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   365fc:	mov	r0, #12
   36600:	b	365f4 <__assert_fail@plt+0x23a38>
   36604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36608:	add	fp, sp, #28
   3660c:	sub	sp, sp, #20
   36610:	ldr	sl, [fp, #8]
   36614:	mov	r8, r2
   36618:	mov	r4, r1
   3661c:	mov	r7, r0
   36620:	str	r3, [sp, #8]
   36624:	ldr	r2, [r7]
   36628:	add	r1, r2, r4, lsl #3
   3662c:	ldrb	r0, [r1, #4]!
   36630:	cmp	r0, #4
   36634:	bne	366b4 <__assert_fail@plt+0x23af8>
   36638:	ldr	r0, [r7, #12]
   3663c:	ldr	r1, [r7, #20]
   36640:	add	r9, r8, r8, lsl #1
   36644:	mov	r2, sl
   36648:	mov	r6, r7
   3664c:	ldr	r5, [r0, r4, lsl #2]
   36650:	add	r0, r1, r9, lsl #2
   36654:	mov	r1, #0
   36658:	str	r1, [r0, #4]
   3665c:	mov	r0, r7
   36660:	mov	r1, r5
   36664:	bl	36a6c <__assert_fail@plt+0x23eb0>
   36668:	mov	r7, r0
   3666c:	mov	r0, #12
   36670:	cmn	r7, #1
   36674:	str	r0, [sp, #16]
   36678:	beq	368d4 <__assert_fail@plt+0x23d18>
   3667c:	ldr	r0, [r6, #12]
   36680:	ldr	r1, [r0, r4, lsl #2]
   36684:	str	r1, [r0, r8, lsl #2]
   36688:	mov	r1, r7
   3668c:	ldr	r0, [r6, #20]
   36690:	add	r0, r0, r9, lsl #2
   36694:	bl	36af4 <__assert_fail@plt+0x23f38>
   36698:	mov	r8, r7
   3669c:	mov	r1, #0
   366a0:	cmp	r0, #0
   366a4:	mov	r4, r5
   366a8:	mov	r7, r6
   366ac:	bne	36884 <__assert_fail@plt+0x23cc8>
   366b0:	b	368d4 <__assert_fail@plt+0x23d18>
   366b4:	ldr	r0, [r7, #20]
   366b8:	add	r9, r4, r4, lsl #1
   366bc:	add	r6, r0, r9, lsl #2
   366c0:	ldr	r3, [r6, #4]
   366c4:	cmp	r3, #0
   366c8:	beq	368c0 <__assert_fail@plt+0x23d04>
   366cc:	ldr	r6, [r6, #8]
   366d0:	cmp	r3, #1
   366d4:	ldr	r5, [r6]
   366d8:	add	r6, r8, r8, lsl #1
   366dc:	add	r0, r0, r6, lsl #2
   366e0:	str	r6, [sp, #12]
   366e4:	mov	r6, #0
   366e8:	str	r6, [r0, #4]
   366ec:	bne	36720 <__assert_fail@plt+0x23b64>
   366f0:	ldr	r2, [sp, #8]
   366f4:	cmp	r4, r2
   366f8:	bne	36830 <__assert_fail@plt+0x23c74>
   366fc:	cmp	r8, r4
   36700:	beq	36830 <__assert_fail@plt+0x23c74>
   36704:	mov	r1, r5
   36708:	bl	36af4 <__assert_fail@plt+0x23f38>
   3670c:	ldr	r4, [sp, #8]
   36710:	cmp	r0, #0
   36714:	mov	r1, #1
   36718:	movwne	r1, #2
   3671c:	b	36884 <__assert_fail@plt+0x23cc8>
   36720:	ldr	r1, [r7, #8]
   36724:	sub	r3, r1, #1
   36728:	cmp	r3, #1
   3672c:	blt	3677c <__assert_fail@plt+0x23bc0>
   36730:	add	r3, r2, r3, lsl #3
   36734:	ldr	r6, [r3, #4]
   36738:	ands	r3, r6, #262144	; 0x40000
   3673c:	beq	3677c <__assert_fail@plt+0x23bc0>
   36740:	ldr	r3, [r7, #16]
   36744:	sub	r2, r2, #12
   36748:	sub	r3, r3, #4
   3674c:	ldr	r4, [r3, r1, lsl #2]
   36750:	cmp	r4, r5
   36754:	ubfxeq	r6, r6, #8, #10
   36758:	cmpeq	r6, sl
   3675c:	beq	36890 <__assert_fail@plt+0x23cd4>
   36760:	sub	r6, r1, #2
   36764:	cmp	r6, #1
   36768:	blt	3677c <__assert_fail@plt+0x23bc0>
   3676c:	ldr	r6, [r2, r1, lsl #3]
   36770:	sub	r1, r1, #1
   36774:	ands	r4, r6, #262144	; 0x40000
   36778:	bne	3674c <__assert_fail@plt+0x23b90>
   3677c:	mov	r0, r7
   36780:	mov	r1, r5
   36784:	mov	r2, sl
   36788:	bl	36a6c <__assert_fail@plt+0x23eb0>
   3678c:	mov	r4, r0
   36790:	mov	r0, #12
   36794:	cmn	r4, #1
   36798:	str	r0, [sp, #16]
   3679c:	beq	368d4 <__assert_fail@plt+0x23d18>
   367a0:	ldr	r0, [r7, #20]
   367a4:	ldr	r6, [sp, #12]
   367a8:	mov	r1, r4
   367ac:	add	r0, r0, r6, lsl #2
   367b0:	bl	36af4 <__assert_fail@plt+0x23f38>
   367b4:	cmp	r0, #0
   367b8:	beq	368d4 <__assert_fail@plt+0x23d18>
   367bc:	ldr	r3, [sp, #8]
   367c0:	mov	r0, r7
   367c4:	mov	r1, r5
   367c8:	mov	r2, r4
   367cc:	str	sl, [sp]
   367d0:	bl	36604 <__assert_fail@plt+0x23a48>
   367d4:	cmp	r0, #0
   367d8:	bne	368d0 <__assert_fail@plt+0x23d14>
   367dc:	ldr	r0, [r7, #20]
   367e0:	mov	r2, sl
   367e4:	add	r0, r0, r9, lsl #2
   367e8:	ldr	r0, [r0, #8]
   367ec:	ldr	r4, [r0, #4]
   367f0:	mov	r0, r7
   367f4:	mov	r1, r4
   367f8:	bl	36a6c <__assert_fail@plt+0x23eb0>
   367fc:	mov	r8, r0
   36800:	mov	r0, #12
   36804:	cmn	r8, #1
   36808:	str	r0, [sp, #16]
   3680c:	beq	368d4 <__assert_fail@plt+0x23d18>
   36810:	ldr	r0, [r7, #20]
   36814:	mov	r1, r8
   36818:	add	r0, r0, r6, lsl #2
   3681c:	bl	36af4 <__assert_fail@plt+0x23f38>
   36820:	mov	r1, #0
   36824:	cmp	r0, #0
   36828:	bne	36884 <__assert_fail@plt+0x23cc8>
   3682c:	b	368d4 <__assert_fail@plt+0x23d18>
   36830:	ldr	r0, [r1]
   36834:	mov	r1, r5
   36838:	ubfx	r0, r0, #8, #10
   3683c:	orr	sl, r0, sl
   36840:	mov	r0, r7
   36844:	mov	r2, sl
   36848:	bl	36a6c <__assert_fail@plt+0x23eb0>
   3684c:	mov	r8, r0
   36850:	mov	r0, #12
   36854:	cmn	r8, #1
   36858:	str	r0, [sp, #16]
   3685c:	beq	368d4 <__assert_fail@plt+0x23d18>
   36860:	ldr	r0, [r7, #20]
   36864:	ldr	r1, [sp, #12]
   36868:	add	r0, r0, r1, lsl #2
   3686c:	mov	r1, r8
   36870:	bl	36af4 <__assert_fail@plt+0x23f38>
   36874:	mov	r1, #0
   36878:	cmp	r0, #0
   3687c:	mov	r4, r5
   36880:	beq	368d4 <__assert_fail@plt+0x23d18>
   36884:	cmp	r1, #0
   36888:	beq	36624 <__assert_fail@plt+0x23a68>
   3688c:	b	368ac <__assert_fail@plt+0x23cf0>
   36890:	sub	r1, r1, #1
   36894:	bl	36af4 <__assert_fail@plt+0x23f38>
   36898:	ldr	r6, [sp, #12]
   3689c:	cmp	r0, #0
   368a0:	bne	367dc <__assert_fail@plt+0x23c20>
   368a4:	mov	r0, #12
   368a8:	b	368d0 <__assert_fail@plt+0x23d14>
   368ac:	mov	r0, #12
   368b0:	cmp	r1, #2
   368b4:	str	r0, [sp, #16]
   368b8:	beq	368cc <__assert_fail@plt+0x23d10>
   368bc:	b	368d4 <__assert_fail@plt+0x23d18>
   368c0:	ldr	r0, [r7, #12]
   368c4:	ldr	r1, [r0, r4, lsl #2]
   368c8:	str	r1, [r0, r8, lsl #2]
   368cc:	mov	r0, #0
   368d0:	str	r0, [sp, #16]
   368d4:	ldr	r0, [sp, #16]
   368d8:	sub	sp, fp, #28
   368dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   368e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   368e4:	add	fp, sp, #24
   368e8:	mov	r8, #0
   368ec:	cmp	r1, #0
   368f0:	beq	36a48 <__assert_fail@plt+0x23e8c>
   368f4:	mov	r5, r0
   368f8:	ldr	r0, [r1, #4]
   368fc:	mov	r9, r1
   36900:	cmp	r0, #0
   36904:	beq	36a48 <__assert_fail@plt+0x23e8c>
   36908:	ldr	r1, [r5, #4]
   3690c:	ldr	r2, [r5]
   36910:	add	r3, r1, r0, lsl #1
   36914:	cmp	r2, r3
   36918:	bge	36948 <__assert_fail@plt+0x23d8c>
   3691c:	add	r7, r2, r0
   36920:	ldr	r0, [r5, #8]
   36924:	lsl	r1, r7, #3
   36928:	bl	2ecdc <__assert_fail@plt+0x1c120>
   3692c:	cmp	r0, #0
   36930:	beq	36a64 <__assert_fail@plt+0x23ea8>
   36934:	str	r0, [r5, #8]
   36938:	lsl	r0, r7, #1
   3693c:	str	r0, [r5]
   36940:	ldr	r1, [r5, #4]
   36944:	ldr	r0, [r9, #4]
   36948:	cmp	r1, #0
   3694c:	beq	36a50 <__assert_fail@plt+0x23e94>
   36950:	add	r7, r1, r0, lsl #1
   36954:	sub	r1, r1, #1
   36958:	sub	r0, r0, #1
   3695c:	orr	r2, r0, r1
   36960:	cmp	r2, #0
   36964:	blt	369b0 <__assert_fail@plt+0x23df4>
   36968:	ldr	r2, [r9, #8]
   3696c:	ldr	r3, [r5, #8]
   36970:	ldr	r4, [r2, r0, lsl #2]
   36974:	ldr	r6, [r3, r1, lsl #2]
   36978:	cmp	r6, r4
   3697c:	bne	3698c <__assert_fail@plt+0x23dd0>
   36980:	sub	r1, r1, #1
   36984:	sub	r0, r0, #1
   36988:	b	369a4 <__assert_fail@plt+0x23de8>
   3698c:	bge	369a0 <__assert_fail@plt+0x23de4>
   36990:	sub	r7, r7, #1
   36994:	sub	r0, r0, #1
   36998:	str	r4, [r3, r7, lsl #2]
   3699c:	b	369a4 <__assert_fail@plt+0x23de8>
   369a0:	sub	r1, r1, #1
   369a4:	orr	r6, r0, r1
   369a8:	cmn	r6, #1
   369ac:	bgt	36970 <__assert_fail@plt+0x23db4>
   369b0:	cmp	r0, #0
   369b4:	blt	369d4 <__assert_fail@plt+0x23e18>
   369b8:	add	r2, r0, #1
   369bc:	ldr	r0, [r5, #8]
   369c0:	ldr	r1, [r9, #8]
   369c4:	sub	r7, r7, r2
   369c8:	lsl	r2, r2, #2
   369cc:	add	r0, r0, r7, lsl #2
   369d0:	bl	125c8 <memcpy@plt>
   369d4:	ldr	r0, [r5, #4]
   369d8:	ldr	r2, [r9, #4]
   369dc:	sub	r1, r0, #1
   369e0:	add	r3, r1, r2, lsl #1
   369e4:	sub	r2, r3, r7
   369e8:	adds	r2, r2, #1
   369ec:	beq	36a48 <__assert_fail@plt+0x23e8c>
   369f0:	add	r0, r2, r0
   369f4:	str	r0, [r5, #4]
   369f8:	ldr	r0, [r5, #8]
   369fc:	ldr	r6, [r0, r1, lsl #2]
   36a00:	ldr	r5, [r0, r3, lsl #2]
   36a04:	cmp	r5, r6
   36a08:	ble	36a24 <__assert_fail@plt+0x23e68>
   36a0c:	add	r6, r2, r1
   36a10:	subs	r2, r2, #1
   36a14:	sub	r3, r3, #1
   36a18:	str	r5, [r0, r6, lsl #2]
   36a1c:	bne	369fc <__assert_fail@plt+0x23e40>
   36a20:	b	36a48 <__assert_fail@plt+0x23e8c>
   36a24:	add	r5, r2, r1
   36a28:	cmp	r1, #0
   36a2c:	str	r6, [r0, r5, lsl #2]
   36a30:	sub	r6, r1, #1
   36a34:	mov	r1, r6
   36a38:	bgt	369fc <__assert_fail@plt+0x23e40>
   36a3c:	add	r1, r0, r7, lsl #2
   36a40:	lsl	r2, r2, #2
   36a44:	bl	125c8 <memcpy@plt>
   36a48:	mov	r0, r8
   36a4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   36a50:	str	r0, [r5, #4]
   36a54:	ldr	r0, [r5, #8]
   36a58:	ldr	r2, [r9, #4]
   36a5c:	ldr	r1, [r9, #8]
   36a60:	b	36a40 <__assert_fail@plt+0x23e84>
   36a64:	mov	r8, #12
   36a68:	b	36a48 <__assert_fail@plt+0x23e8c>
   36a6c:	push	{r4, r5, r6, sl, fp, lr}
   36a70:	add	fp, sp, #16
   36a74:	mov	r5, r0
   36a78:	ldr	r0, [r0]
   36a7c:	mov	r4, r1
   36a80:	mov	r6, r2
   36a84:	ldr	r1, [r0, r1, lsl #3]!
   36a88:	ldr	r2, [r0, #4]
   36a8c:	mov	r0, r5
   36a90:	bl	36218 <__assert_fail@plt+0x2365c>
   36a94:	cmn	r0, #1
   36a98:	ldrne	r1, [r5]
   36a9c:	movwne	r3, #65280	; 0xff00
   36aa0:	movtne	r3, #3
   36aa4:	addne	r1, r1, r0, lsl #3
   36aa8:	ldrne	r2, [r1, #4]
   36aac:	bfine	r2, r6, #8, #10
   36ab0:	strne	r2, [r1, #4]
   36ab4:	ldrne	r1, [r5]
   36ab8:	addne	r2, r1, r4, lsl #3
   36abc:	addne	r1, r1, r0, lsl #3
   36ac0:	ldrne	r2, [r2, #4]
   36ac4:	andne	r2, r2, r3
   36ac8:	ldrne	r3, [r1, #4]
   36acc:	orrne	r2, r2, r3
   36ad0:	strne	r2, [r1, #4]
   36ad4:	ldrne	r1, [r5]
   36ad8:	addne	r1, r1, r0, lsl #3
   36adc:	ldrne	r2, [r1, #4]
   36ae0:	orrne	r2, r2, #262144	; 0x40000
   36ae4:	strne	r2, [r1, #4]
   36ae8:	ldrne	r1, [r5, #16]
   36aec:	strne	r4, [r1, r0, lsl #2]
   36af0:	pop	{r4, r5, r6, sl, fp, pc}
   36af4:	push	{r4, r5, r6, sl, fp, lr}
   36af8:	add	fp, sp, #16
   36afc:	ldr	r2, [r0]
   36b00:	mov	r5, r1
   36b04:	mov	r4, r0
   36b08:	cmp	r2, #0
   36b0c:	beq	36b38 <__assert_fail@plt+0x23f7c>
   36b10:	ldr	r1, [r4, #4]
   36b14:	cmp	r1, #0
   36b18:	bne	36b64 <__assert_fail@plt+0x23fa8>
   36b1c:	ldr	r0, [r4, #8]
   36b20:	str	r5, [r0]
   36b24:	ldr	r0, [r4, #4]
   36b28:	mov	r6, #1
   36b2c:	add	r0, r0, #1
   36b30:	str	r0, [r4, #4]
   36b34:	b	36b5c <__assert_fail@plt+0x23fa0>
   36b38:	mov	r6, #1
   36b3c:	mov	r0, #4
   36b40:	str	r6, [r4]
   36b44:	str	r6, [r4, #4]
   36b48:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   36b4c:	cmp	r0, #0
   36b50:	str	r0, [r4, #8]
   36b54:	beq	36b94 <__assert_fail@plt+0x23fd8>
   36b58:	str	r5, [r0]
   36b5c:	mov	r0, r6
   36b60:	pop	{r4, r5, r6, sl, fp, pc}
   36b64:	cmp	r2, r1
   36b68:	bne	36ba4 <__assert_fail@plt+0x23fe8>
   36b6c:	lsl	r0, r2, #1
   36b70:	lsl	r1, r2, #3
   36b74:	str	r0, [r4]
   36b78:	ldr	r0, [r4, #8]
   36b7c:	bl	2ecdc <__assert_fail@plt+0x1c120>
   36b80:	cmp	r0, #0
   36b84:	beq	36c20 <__assert_fail@plt+0x24064>
   36b88:	str	r0, [r4, #8]
   36b8c:	ldr	r1, [r4, #4]
   36b90:	b	36ba8 <__assert_fail@plt+0x23fec>
   36b94:	mov	r6, #0
   36b98:	str	r6, [r4]
   36b9c:	str	r6, [r4, #4]
   36ba0:	b	36b5c <__assert_fail@plt+0x23fa0>
   36ba4:	ldr	r0, [r4, #8]
   36ba8:	ldr	r2, [r0]
   36bac:	cmp	r2, r5
   36bb0:	ble	36be8 <__assert_fail@plt+0x2402c>
   36bb4:	cmp	r1, #1
   36bb8:	blt	36c18 <__assert_fail@plt+0x2405c>
   36bbc:	add	r2, r0, r1, lsl #2
   36bc0:	add	r1, r1, #1
   36bc4:	mov	r3, r2
   36bc8:	ldr	r6, [r3, #-4]!
   36bcc:	sub	r1, r1, #1
   36bd0:	cmp	r1, #1
   36bd4:	str	r6, [r2]
   36bd8:	mov	r2, r3
   36bdc:	bgt	36bc8 <__assert_fail@plt+0x2400c>
   36be0:	sub	r1, r1, #1
   36be4:	b	36c18 <__assert_fail@plt+0x2405c>
   36be8:	add	r2, r0, r1, lsl #2
   36bec:	ldr	r3, [r2, #-4]
   36bf0:	cmp	r3, r5
   36bf4:	ble	36c18 <__assert_fail@plt+0x2405c>
   36bf8:	sub	r1, r1, #2
   36bfc:	str	r3, [r2]
   36c00:	sub	r1, r1, #1
   36c04:	ldr	r3, [r2, #-8]
   36c08:	sub	r2, r2, #4
   36c0c:	cmp	r3, r5
   36c10:	bgt	36bfc <__assert_fail@plt+0x24040>
   36c14:	add	r1, r1, #2
   36c18:	str	r5, [r0, r1, lsl #2]
   36c1c:	b	36b24 <__assert_fail@plt+0x23f68>
   36c20:	mov	r6, #0
   36c24:	b	36b5c <__assert_fail@plt+0x23fa0>
   36c28:	push	{r4, r5, fp, lr}
   36c2c:	add	fp, sp, #8
   36c30:	mov	r5, r0
   36c34:	mov	r4, r1
   36c38:	ldr	r0, [r0]
   36c3c:	ldr	r1, [r5, #4]
   36c40:	cmp	r0, r1
   36c44:	bne	36c78 <__assert_fail@plt+0x240bc>
   36c48:	mov	r1, #2
   36c4c:	add	r0, r1, r0, lsl #1
   36c50:	str	r0, [r5]
   36c54:	lsl	r1, r0, #2
   36c58:	ldr	r0, [r5, #8]
   36c5c:	bl	2ecdc <__assert_fail@plt+0x1c120>
   36c60:	cmp	r0, #0
   36c64:	moveq	r0, #0
   36c68:	popeq	{r4, r5, fp, pc}
   36c6c:	str	r0, [r5, #8]
   36c70:	ldr	r1, [r5, #4]
   36c74:	b	36c7c <__assert_fail@plt+0x240c0>
   36c78:	ldr	r0, [r5, #8]
   36c7c:	add	r2, r1, #1
   36c80:	str	r2, [r5, #4]
   36c84:	str	r4, [r0, r1, lsl #2]
   36c88:	mov	r0, #1
   36c8c:	pop	{r4, r5, fp, pc}
   36c90:	push	{r4, r5, fp, lr}
   36c94:	add	fp, sp, #8
   36c98:	mov	r4, r0
   36c9c:	ldr	r0, [r1, #4]
   36ca0:	mov	r5, r1
   36ca4:	str	r0, [r4, #4]
   36ca8:	ldr	r1, [r1, #4]
   36cac:	cmp	r1, #1
   36cb0:	blt	36ce4 <__assert_fail@plt+0x24128>
   36cb4:	str	r0, [r4]
   36cb8:	lsl	r0, r0, #2
   36cbc:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   36cc0:	cmp	r0, #0
   36cc4:	str	r0, [r4, #8]
   36cc8:	beq	36cf8 <__assert_fail@plt+0x2413c>
   36ccc:	ldr	r2, [r5, #4]
   36cd0:	ldr	r1, [r5, #8]
   36cd4:	lsl	r2, r2, #2
   36cd8:	bl	125c8 <memcpy@plt>
   36cdc:	mov	r0, #0
   36ce0:	pop	{r4, r5, fp, pc}
   36ce4:	mov	r0, #0
   36ce8:	str	r0, [r4]
   36cec:	str	r0, [r4, #4]
   36cf0:	str	r0, [r4, #8]
   36cf4:	pop	{r4, r5, fp, pc}
   36cf8:	mov	r0, #0
   36cfc:	str	r0, [r4]
   36d00:	str	r0, [r4, #4]
   36d04:	mov	r0, #12
   36d08:	pop	{r4, r5, fp, pc}
   36d0c:	ldr	r2, [r0, #4]
   36d10:	cmp	r2, #1
   36d14:	movlt	r0, #0
   36d18:	bxlt	lr
   36d1c:	push	{r4, r5, r6, sl, fp, lr}
   36d20:	add	fp, sp, #16
   36d24:	ldr	ip, [r0, #8]
   36d28:	subs	r2, r2, #1
   36d2c:	mov	r0, #0
   36d30:	mov	r3, #0
   36d34:	beq	36d60 <__assert_fail@plt+0x241a4>
   36d38:	mov	r3, #0
   36d3c:	mov	lr, #1
   36d40:	add	r4, r2, r3
   36d44:	lsr	r5, r4, #1
   36d48:	ldr	r6, [ip, r5, lsl #2]
   36d4c:	cmp	r6, r1
   36d50:	movge	r2, r5
   36d54:	addlt	r3, lr, r4, lsr #1
   36d58:	cmp	r3, r2
   36d5c:	bcc	36d40 <__assert_fail@plt+0x24184>
   36d60:	ldr	r2, [ip, r3, lsl #2]
   36d64:	cmp	r2, r1
   36d68:	addeq	r0, r3, #1
   36d6c:	pop	{r4, r5, r6, sl, fp, pc}
   36d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36d74:	add	fp, sp, #28
   36d78:	sub	sp, sp, #20
   36d7c:	ldr	lr, [r2, #4]
   36d80:	cmp	lr, #0
   36d84:	beq	3708c <__assert_fail@plt+0x244d0>
   36d88:	mov	r8, r3
   36d8c:	mov	sl, r2
   36d90:	add	r7, lr, r3
   36d94:	cmp	lr, #1
   36d98:	str	r0, [sp, #4]
   36d9c:	blt	36db8 <__assert_fail@plt+0x241fc>
   36da0:	ldr	r3, [sl, #8]
   36da4:	mov	r2, lr
   36da8:	ldr	r0, [r3], #4
   36dac:	subs	r2, r2, #1
   36db0:	add	r7, r0, r7
   36db4:	bne	36da8 <__assert_fail@plt+0x241ec>
   36db8:	ldr	r0, [r1, #32]
   36dbc:	str	r1, [sp, #12]
   36dc0:	ldr	r1, [r1, #68]	; 0x44
   36dc4:	and	r1, r1, r7
   36dc8:	add	r2, r1, r1, lsl #1
   36dcc:	ldr	r1, [r0, r2, lsl #2]
   36dd0:	cmp	r1, #1
   36dd4:	blt	36e64 <__assert_fail@plt+0x242a8>
   36dd8:	add	r0, r0, r2, lsl #2
   36ddc:	sub	ip, lr, #1
   36de0:	mov	r3, #0
   36de4:	ldr	r9, [r0, #8]
   36de8:	b	36e28 <__assert_fail@plt+0x2426c>
   36dec:	ldr	r0, [r5, #4]
   36df0:	cmp	r0, lr
   36df4:	bne	36e58 <__assert_fail@plt+0x2429c>
   36df8:	mov	r0, ip
   36dfc:	add	r6, r0, #1
   36e00:	cmp	r6, #1
   36e04:	blt	37094 <__assert_fail@plt+0x244d8>
   36e08:	ldr	r6, [sl, #8]
   36e0c:	ldr	r2, [r5, #8]
   36e10:	ldr	r6, [r6, r0, lsl #2]
   36e14:	ldr	r2, [r2, r0, lsl #2]
   36e18:	sub	r0, r0, #1
   36e1c:	cmp	r2, r6
   36e20:	beq	36dfc <__assert_fail@plt+0x24240>
   36e24:	b	36e58 <__assert_fail@plt+0x2429c>
   36e28:	ldr	r4, [r9, r3, lsl #2]
   36e2c:	ldr	r0, [r4]
   36e30:	cmp	r0, r7
   36e34:	bne	36e58 <__assert_fail@plt+0x2429c>
   36e38:	ldrb	r0, [r4, #52]	; 0x34
   36e3c:	and	r0, r0, #15
   36e40:	cmp	r0, r8
   36e44:	bne	36e58 <__assert_fail@plt+0x2429c>
   36e48:	cmp	sl, #0
   36e4c:	ldrne	r5, [r4, #40]	; 0x28
   36e50:	cmpne	r5, #0
   36e54:	bne	36dec <__assert_fail@plt+0x24230>
   36e58:	add	r3, r3, #1
   36e5c:	cmp	r3, r1
   36e60:	blt	36e28 <__assert_fail@plt+0x2426c>
   36e64:	mov	r0, #56	; 0x38
   36e68:	mov	r1, #1
   36e6c:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   36e70:	cmp	r0, #0
   36e74:	beq	37078 <__assert_fail@plt+0x244bc>
   36e78:	add	r5, r0, #4
   36e7c:	mov	r4, r0
   36e80:	mov	r1, sl
   36e84:	mov	r0, r5
   36e88:	bl	36c90 <__assert_fail@plt+0x240d4>
   36e8c:	cmp	r0, #0
   36e90:	bne	370a0 <__assert_fail@plt+0x244e4>
   36e94:	str	r5, [r4, #40]	; 0x28
   36e98:	and	r0, r8, #15
   36e9c:	ldr	r6, [sp, #12]
   36ea0:	ldrb	r1, [r4, #52]	; 0x34
   36ea4:	and	r1, r1, #240	; 0xf0
   36ea8:	orr	r0, r1, r0
   36eac:	strb	r0, [r4, #52]	; 0x34
   36eb0:	ldr	r0, [sl, #4]
   36eb4:	cmp	r0, #1
   36eb8:	blt	37058 <__assert_fail@plt+0x2449c>
   36ebc:	movw	r9, #65280	; 0xff00
   36ec0:	and	r0, r8, #4
   36ec4:	mov	ip, r5
   36ec8:	and	lr, r8, #1
   36ecc:	str	r0, [sp]
   36ed0:	and	r0, r8, #2
   36ed4:	movt	r9, #3
   36ed8:	mov	r8, #0
   36edc:	str	r0, [sp, #8]
   36ee0:	add	r3, r9, #255	; 0xff
   36ee4:	mov	r0, #0
   36ee8:	str	r3, [sp, #16]
   36eec:	b	36f24 <__assert_fail@plt+0x24368>
   36ef0:	sub	r2, r2, #1
   36ef4:	cmp	r2, r1
   36ef8:	str	r2, [r4, #8]
   36efc:	ble	37040 <__assert_fail@plt+0x24484>
   36f00:	ldr	r2, [r4, #12]
   36f04:	add	r3, r2, r1, lsl #2
   36f08:	ldr	r3, [r3, #4]
   36f0c:	str	r3, [r2, r1, lsl #2]
   36f10:	add	r1, r1, #1
   36f14:	ldr	r3, [r4, #8]
   36f18:	cmp	r1, r3
   36f1c:	blt	36f04 <__assert_fail@plt+0x24348>
   36f20:	b	37040 <__assert_fail@plt+0x24484>
   36f24:	ldr	r1, [sl, #8]
   36f28:	ldr	r2, [r6]
   36f2c:	ldr	r1, [r1, r8, lsl #2]
   36f30:	add	r1, r2, r1, lsl #3
   36f34:	ldr	r5, [r1, #4]
   36f38:	and	r1, r5, r3
   36f3c:	cmp	r1, #1
   36f40:	beq	37048 <__assert_fail@plt+0x2448c>
   36f44:	ldrb	r3, [r4, #52]	; 0x34
   36f48:	mov	r2, #32
   36f4c:	and	r1, r5, r9
   36f50:	and	r2, r2, r5, lsr #15
   36f54:	orr	r2, r3, r2
   36f58:	uxtb	r3, r5
   36f5c:	cmp	r3, #2
   36f60:	strb	r2, [r4, #52]	; 0x34
   36f64:	beq	36f78 <__assert_fail@plt+0x243bc>
   36f68:	cmp	r3, #4
   36f6c:	bne	36f84 <__assert_fail@plt+0x243c8>
   36f70:	mov	r3, #64	; 0x40
   36f74:	b	36f7c <__assert_fail@plt+0x243c0>
   36f78:	mov	r3, #16
   36f7c:	orr	r2, r2, r3
   36f80:	strb	r2, [r4, #52]	; 0x34
   36f84:	cmp	r1, #0
   36f88:	beq	37044 <__assert_fail@plt+0x24488>
   36f8c:	ldr	r1, [r4, #40]	; 0x28
   36f90:	cmp	r1, ip
   36f94:	bne	36fe8 <__assert_fail@plt+0x2442c>
   36f98:	mov	r0, #12
   36f9c:	mov	r6, lr
   36fa0:	mov	r9, ip
   36fa4:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   36fa8:	cmp	r0, #0
   36fac:	beq	37070 <__assert_fail@plt+0x244b4>
   36fb0:	mov	r1, sl
   36fb4:	str	r0, [r4, #40]	; 0x28
   36fb8:	bl	36c90 <__assert_fail@plt+0x240d4>
   36fbc:	cmp	r0, #0
   36fc0:	bne	37070 <__assert_fail@plt+0x244b4>
   36fc4:	ldrb	r0, [r4, #52]	; 0x34
   36fc8:	mov	lr, r6
   36fcc:	ldr	r6, [sp, #12]
   36fd0:	mov	ip, r9
   36fd4:	movw	r9, #65280	; 0xff00
   36fd8:	movt	r9, #3
   36fdc:	orr	r0, r0, #128	; 0x80
   36fe0:	strb	r0, [r4, #52]	; 0x34
   36fe4:	mov	r0, #0
   36fe8:	cmp	lr, #0
   36fec:	bne	36ff8 <__assert_fail@plt+0x2443c>
   36ff0:	ands	r1, r5, #256	; 0x100
   36ff4:	bne	3702c <__assert_fail@plt+0x24470>
   36ff8:	cmp	lr, #0
   36ffc:	andsne	r1, r5, #512	; 0x200
   37000:	bne	3702c <__assert_fail@plt+0x24470>
   37004:	ldr	r1, [sp, #8]
   37008:	cmp	r1, #0
   3700c:	bne	37018 <__assert_fail@plt+0x2445c>
   37010:	ands	r1, r5, #4096	; 0x1000
   37014:	bne	3702c <__assert_fail@plt+0x24470>
   37018:	ldr	r1, [sp]
   3701c:	cmp	r1, #0
   37020:	bne	37044 <__assert_fail@plt+0x24488>
   37024:	ands	r1, r5, #16384	; 0x4000
   37028:	beq	37044 <__assert_fail@plt+0x24488>
   3702c:	sub	r1, r8, r0
   37030:	cmp	r1, #0
   37034:	ldrge	r2, [r4, #8]
   37038:	cmpge	r2, r1
   3703c:	bgt	36ef0 <__assert_fail@plt+0x24334>
   37040:	add	r0, r0, #1
   37044:	ldr	r3, [sp, #16]
   37048:	ldr	r1, [sl, #4]
   3704c:	add	r8, r8, #1
   37050:	cmp	r8, r1
   37054:	blt	36f24 <__assert_fail@plt+0x24368>
   37058:	mov	r0, r6
   3705c:	mov	r1, r4
   37060:	mov	r2, r7
   37064:	bl	370ac <__assert_fail@plt+0x244f0>
   37068:	cmp	r0, #0
   3706c:	beq	37094 <__assert_fail@plt+0x244d8>
   37070:	mov	r0, r4
   37074:	bl	321dc <__assert_fail@plt+0x1f620>
   37078:	ldr	r1, [sp, #4]
   3707c:	mov	r0, #12
   37080:	mov	r4, #0
   37084:	str	r0, [r1]
   37088:	b	37094 <__assert_fail@plt+0x244d8>
   3708c:	mov	r4, #0
   37090:	str	r4, [r0]
   37094:	mov	r0, r4
   37098:	sub	sp, fp, #28
   3709c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   370a0:	mov	r0, r4
   370a4:	bl	2c048 <__assert_fail@plt+0x1948c>
   370a8:	b	37078 <__assert_fail@plt+0x244bc>
   370ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   370b0:	add	fp, sp, #24
   370b4:	str	r2, [r1]
   370b8:	mov	r4, r1
   370bc:	mov	r7, r0
   370c0:	mov	r0, #0
   370c4:	mov	r9, r2
   370c8:	ldr	r1, [r1, #8]
   370cc:	str	r1, [r4, #16]
   370d0:	str	r0, [r4, #20]
   370d4:	lsl	r0, r1, #2
   370d8:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   370dc:	mov	r8, #12
   370e0:	cmp	r0, #0
   370e4:	str	r0, [r4, #24]
   370e8:	beq	3717c <__assert_fail@plt+0x245c0>
   370ec:	ldr	r0, [r4, #8]
   370f0:	cmp	r0, #1
   370f4:	blt	3713c <__assert_fail@plt+0x24580>
   370f8:	add	r5, r4, #16
   370fc:	mov	r6, #0
   37100:	ldr	r1, [r4, #12]
   37104:	ldr	r2, [r7]
   37108:	ldr	r1, [r1, r6, lsl #2]
   3710c:	add	r2, r2, r1, lsl #3
   37110:	ldrb	r2, [r2, #4]
   37114:	tst	r2, #8
   37118:	bne	37130 <__assert_fail@plt+0x24574>
   3711c:	mov	r0, r5
   37120:	bl	36c28 <__assert_fail@plt+0x2406c>
   37124:	cmp	r0, #0
   37128:	beq	3717c <__assert_fail@plt+0x245c0>
   3712c:	ldr	r0, [r4, #8]
   37130:	add	r6, r6, #1
   37134:	cmp	r6, r0
   37138:	blt	37100 <__assert_fail@plt+0x24544>
   3713c:	ldr	r1, [r7, #68]	; 0x44
   37140:	ldr	r0, [r7, #32]
   37144:	and	r1, r1, r9
   37148:	mov	r5, r0
   3714c:	add	r2, r1, r1, lsl #1
   37150:	ldr	r1, [r5, r2, lsl #2]!
   37154:	mov	r6, r5
   37158:	ldr	r3, [r6, #4]!
   3715c:	cmp	r3, r1
   37160:	ble	37184 <__assert_fail@plt+0x245c8>
   37164:	add	r0, r0, r2, lsl #2
   37168:	ldr	r0, [r0, #8]
   3716c:	add	r2, r1, #1
   37170:	mov	r8, #0
   37174:	str	r2, [r5]
   37178:	str	r4, [r0, r1, lsl #2]
   3717c:	mov	r0, r8
   37180:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   37184:	add	r7, r0, r2, lsl #2
   37188:	mov	r2, #2
   3718c:	ldr	r0, [r7, #8]!
   37190:	add	r9, r2, r1, lsl #1
   37194:	lsl	r1, r9, #2
   37198:	bl	2ecdc <__assert_fail@plt+0x1c120>
   3719c:	cmp	r0, #0
   371a0:	beq	3717c <__assert_fail@plt+0x245c0>
   371a4:	str	r0, [r7]
   371a8:	str	r9, [r6]
   371ac:	ldr	r1, [r5]
   371b0:	b	3716c <__assert_fail@plt+0x245b0>
   371b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   371b8:	add	fp, sp, #28
   371bc:	sub	sp, sp, #36	; 0x24
   371c0:	mov	r4, r0
   371c4:	ldr	r0, [r0, #24]
   371c8:	mov	r6, r2
   371cc:	mov	r9, r1
   371d0:	cmp	r0, r1
   371d4:	ble	37338 <__assert_fail@plt+0x2477c>
   371d8:	ldr	r0, [r4, #80]	; 0x50
   371dc:	mov	r1, #4
   371e0:	mov	r5, r9
   371e4:	cmp	r0, #2
   371e8:	movge	r0, #0
   371ec:	strge	r0, [r4, #16]
   371f0:	strge	r0, [r4, #20]
   371f4:	mov	r0, #0
   371f8:	tst	r6, #1
   371fc:	str	r0, [r4, #24]
   37200:	str	r0, [r4, #28]
   37204:	str	r0, [r4, #32]
   37208:	strb	r0, [r4, #76]	; 0x4c
   3720c:	movweq	r1, #6
   37210:	ldr	r2, [r4, #44]	; 0x2c
   37214:	ldr	r3, [r4, #52]	; 0x34
   37218:	str	r2, [r4, #48]	; 0x30
   3721c:	str	r3, [r4, #56]	; 0x38
   37220:	str	r1, [r4, #60]	; 0x3c
   37224:	ldrb	r1, [r4, #75]	; 0x4b
   37228:	cmp	r1, #0
   3722c:	ldreq	r1, [r4]
   37230:	streq	r1, [r4, #4]
   37234:	cmp	r5, #0
   37238:	beq	372c4 <__assert_fail@plt+0x24708>
   3723c:	ldr	r1, [r4, #32]
   37240:	cmp	r5, r1
   37244:	bge	37340 <__assert_fail@plt+0x24784>
   37248:	ldrb	r0, [r4, #76]	; 0x4c
   3724c:	cmp	r0, #0
   37250:	bne	37440 <__assert_fail@plt+0x24884>
   37254:	sub	r1, r5, #1
   37258:	mov	r0, r4
   3725c:	mov	r2, r6
   37260:	bl	379e0 <__assert_fail@plt+0x24e24>
   37264:	str	r0, [r4, #60]	; 0x3c
   37268:	ldr	r0, [r4, #80]	; 0x50
   3726c:	cmp	r0, #2
   37270:	blt	3728c <__assert_fail@plt+0x246d0>
   37274:	ldr	r2, [r4, #28]
   37278:	ldr	r0, [r4, #8]
   3727c:	sub	r2, r2, r5
   37280:	add	r1, r0, r5, lsl #2
   37284:	lsl	r2, r2, #2
   37288:	bl	1255c <memmove@plt>
   3728c:	ldrb	r0, [r4, #75]	; 0x4b
   37290:	cmp	r0, #0
   37294:	bne	37534 <__assert_fail@plt+0x24978>
   37298:	ldr	r0, [r4, #28]
   3729c:	ldr	r1, [r4, #32]
   372a0:	sub	r0, r0, r5
   372a4:	sub	r1, r1, r5
   372a8:	str	r0, [r4, #28]
   372ac:	str	r1, [r4, #32]
   372b0:	ldrb	r0, [r4, #75]	; 0x4b
   372b4:	cmp	r0, #0
   372b8:	ldreq	r0, [r4, #4]
   372bc:	addeq	r0, r0, r5
   372c0:	streq	r0, [r4, #4]
   372c4:	str	r9, [r4, #24]
   372c8:	ldr	r0, [r4, #48]	; 0x30
   372cc:	ldr	r1, [r4, #56]	; 0x38
   372d0:	ldr	r2, [r4, #80]	; 0x50
   372d4:	sub	r0, r0, r5
   372d8:	cmp	r2, #2
   372dc:	sub	r1, r1, r5
   372e0:	str	r0, [r4, #48]	; 0x30
   372e4:	str	r1, [r4, #56]	; 0x38
   372e8:	blt	3730c <__assert_fail@plt+0x24750>
   372ec:	ldrb	r0, [r4, #72]	; 0x48
   372f0:	cmp	r0, #0
   372f4:	beq	37320 <__assert_fail@plt+0x24764>
   372f8:	mov	r0, r4
   372fc:	bl	32398 <__assert_fail@plt+0x1f7dc>
   37300:	cmp	r0, #0
   37304:	bne	37330 <__assert_fail@plt+0x24774>
   37308:	b	37328 <__assert_fail@plt+0x2476c>
   3730c:	ldrb	r1, [r4, #75]	; 0x4b
   37310:	cmp	r1, #0
   37314:	bne	3754c <__assert_fail@plt+0x24990>
   37318:	str	r0, [r4, #28]
   3731c:	b	37328 <__assert_fail@plt+0x2476c>
   37320:	mov	r0, r4
   37324:	bl	32974 <__assert_fail@plt+0x1fdb8>
   37328:	mov	r0, #0
   3732c:	str	r0, [r4, #40]	; 0x28
   37330:	sub	sp, fp, #28
   37334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37338:	sub	r5, r9, r0
   3733c:	b	37234 <__assert_fail@plt+0x24678>
   37340:	ldrb	r2, [r4, #76]	; 0x4c
   37344:	ldr	lr, [r4, #28]
   37348:	cmp	r2, #0
   3734c:	bne	3778c <__assert_fail@plt+0x24bd0>
   37350:	mov	r2, #0
   37354:	str	r2, [r4, #28]
   37358:	ldr	r3, [r4, #80]	; 0x50
   3735c:	cmp	r3, #2
   37360:	blt	37564 <__assert_fail@plt+0x249a8>
   37364:	ldrb	r2, [r4, #73]	; 0x49
   37368:	cmp	r2, #0
   3736c:	beq	37428 <__assert_fail@plt+0x2486c>
   37370:	ldr	r7, [r4]
   37374:	sub	r3, r5, r3
   37378:	add	ip, r7, r0
   3737c:	add	r3, ip, r3
   37380:	add	r8, ip, r5
   37384:	cmp	r3, r7
   37388:	movcc	r3, r7
   3738c:	mov	r7, r8
   37390:	sub	r7, r7, #1
   37394:	cmp	r7, r3
   37398:	bcc	37428 <__assert_fail@plt+0x2486c>
   3739c:	ldrb	r2, [r7]
   373a0:	and	r2, r2, #192	; 0xc0
   373a4:	cmp	r2, #128	; 0x80
   373a8:	beq	37390 <__assert_fail@plt+0x247d4>
   373ac:	ldr	r0, [r4, #48]	; 0x30
   373b0:	mov	sl, lr
   373b4:	mov	r1, r7
   373b8:	add	r3, ip, r0
   373bc:	ldr	r0, [r4, #64]	; 0x40
   373c0:	sub	r2, r3, r7
   373c4:	cmp	r0, #0
   373c8:	bne	37828 <__assert_fail@plt+0x24c6c>
   373cc:	mov	r0, #0
   373d0:	add	r3, sp, #24
   373d4:	str	r0, [sp, #28]
   373d8:	str	r0, [sp, #24]
   373dc:	add	r0, sp, #20
   373e0:	bl	2e214 <__assert_fail@plt+0x1b658>
   373e4:	sub	r1, r8, r7
   373e8:	mvn	r2, #0
   373ec:	cmp	r0, r1
   373f0:	bcc	37414 <__assert_fail@plt+0x24858>
   373f4:	cmn	r0, #3
   373f8:	bhi	37414 <__assert_fail@plt+0x24858>
   373fc:	mov	r2, #0
   37400:	sub	r0, r0, r1
   37404:	str	r2, [r4, #16]
   37408:	str	r2, [r4, #20]
   3740c:	str	r0, [r4, #28]
   37410:	ldr	r2, [sp, #20]
   37414:	cmn	r2, #1
   37418:	bne	37734 <__assert_fail@plt+0x24b78>
   3741c:	ldr	r0, [r4, #24]
   37420:	ldr	r1, [r4, #32]
   37424:	mov	lr, sl
   37428:	add	r8, r1, r0
   3742c:	cmp	r8, r9
   37430:	bge	3760c <__assert_fail@plt+0x24a50>
   37434:	add	sl, r4, #16
   37438:	str	lr, [sp]
   3743c:	b	376d4 <__assert_fail@plt+0x24b18>
   37440:	ldr	r8, [r4, #28]
   37444:	ldr	sl, [r4, #12]
   37448:	mov	r0, #0
   3744c:	mov	r1, r8
   37450:	add	r2, r0, r1
   37454:	add	r2, r2, r2, lsr #31
   37458:	asr	r7, r2, #1
   3745c:	ldr	r2, [sl, r7, lsl #2]
   37460:	mov	r3, r7
   37464:	cmp	r2, r5
   37468:	bgt	37478 <__assert_fail@plt+0x248bc>
   3746c:	bge	37484 <__assert_fail@plt+0x248c8>
   37470:	add	r0, r7, #1
   37474:	mov	r3, r1
   37478:	cmp	r0, r3
   3747c:	mov	r1, r3
   37480:	blt	37450 <__assert_fail@plt+0x24894>
   37484:	cmp	r2, r5
   37488:	mov	r0, r4
   3748c:	mov	r2, r6
   37490:	addlt	r7, r7, #1
   37494:	sub	r1, r7, #1
   37498:	bl	379e0 <__assert_fail@plt+0x24e24>
   3749c:	cmp	r8, r5
   374a0:	str	r0, [r4, #60]	; 0x3c
   374a4:	ble	374b8 <__assert_fail@plt+0x248fc>
   374a8:	cmp	r7, r5
   374ac:	ldreq	r0, [sl, r5, lsl #2]
   374b0:	cmpeq	r0, r5
   374b4:	beq	37630 <__assert_fail@plt+0x24a74>
   374b8:	mov	r0, #0
   374bc:	strb	r0, [r4, #76]	; 0x4c
   374c0:	sub	r0, r5, r9
   374c4:	ldr	r1, [r4, #44]	; 0x2c
   374c8:	ldr	r2, [r4, #52]	; 0x34
   374cc:	add	r1, r0, r1
   374d0:	add	r0, r0, r2
   374d4:	str	r1, [r4, #48]	; 0x30
   374d8:	sub	r1, sl, #4
   374dc:	str	r0, [r4, #56]	; 0x38
   374e0:	mov	r0, r7
   374e4:	cmp	r7, #1
   374e8:	blt	374fc <__assert_fail@plt+0x24940>
   374ec:	ldr	r2, [r1, r0, lsl #2]
   374f0:	sub	r7, r0, #1
   374f4:	cmp	r2, r5
   374f8:	beq	374e0 <__assert_fail@plt+0x24924>
   374fc:	cmp	r0, r8
   37500:	bge	37520 <__assert_fail@plt+0x24964>
   37504:	ldr	r1, [r4, #8]
   37508:	ldr	r2, [r1, r0, lsl #2]
   3750c:	cmn	r2, #1
   37510:	bne	37520 <__assert_fail@plt+0x24964>
   37514:	add	r0, r0, #1
   37518:	cmp	r0, r8
   3751c:	blt	37508 <__assert_fail@plt+0x2494c>
   37520:	cmp	r0, r8
   37524:	bne	375c0 <__assert_fail@plt+0x24a04>
   37528:	mov	r0, #0
   3752c:	str	r0, [r4, #28]
   37530:	b	37784 <__assert_fail@plt+0x24bc8>
   37534:	ldr	r2, [r4, #28]
   37538:	ldr	r0, [r4, #4]
   3753c:	add	r1, r0, r5
   37540:	sub	r2, r2, r5
   37544:	bl	1255c <memmove@plt>
   37548:	b	37298 <__assert_fail@plt+0x246dc>
   3754c:	ldrb	r0, [r4, #72]	; 0x48
   37550:	cmp	r0, #0
   37554:	beq	37618 <__assert_fail@plt+0x24a5c>
   37558:	mov	r0, r4
   3755c:	bl	32908 <__assert_fail@plt+0x1fd4c>
   37560:	b	37328 <__assert_fail@plt+0x2476c>
   37564:	ldr	r3, [r4]
   37568:	add	r0, r5, r0
   3756c:	ldr	r1, [r4, #64]	; 0x40
   37570:	add	r0, r3, r0
   37574:	cmp	r1, #0
   37578:	ldrb	r0, [r0, #-1]
   3757c:	str	r2, [r4, #32]
   37580:	ldrbne	r0, [r1, r0]
   37584:	ldr	r1, [r4, #68]	; 0x44
   37588:	ubfx	r2, r0, #5, #3
   3758c:	and	r3, r0, #31
   37590:	ldr	r2, [r1, r2, lsl #2]
   37594:	mov	r1, #1
   37598:	tst	r2, r1, lsl r3
   3759c:	bne	375b8 <__assert_fail@plt+0x249fc>
   375a0:	mov	r1, #0
   375a4:	cmp	r0, #10
   375a8:	bne	375b8 <__assert_fail@plt+0x249fc>
   375ac:	ldrb	r1, [r4, #77]	; 0x4d
   375b0:	cmp	r1, #0
   375b4:	movwne	r1, #2
   375b8:	str	r1, [r4, #60]	; 0x3c
   375bc:	b	372b0 <__assert_fail@plt+0x246f4>
   375c0:	ldr	r0, [sl, r0, lsl #2]
   375c4:	subs	r2, r0, r5
   375c8:	str	r2, [r4, #28]
   375cc:	beq	376a4 <__assert_fail@plt+0x24ae8>
   375d0:	cmp	r2, #1
   375d4:	blt	375f8 <__assert_fail@plt+0x24a3c>
   375d8:	ldr	r0, [r4, #8]
   375dc:	mov	r1, #0
   375e0:	mvn	r3, #0
   375e4:	str	r3, [r0, r1, lsl #2]
   375e8:	add	r1, r1, #1
   375ec:	ldr	r2, [r4, #28]
   375f0:	cmp	r1, r2
   375f4:	blt	375e4 <__assert_fail@plt+0x24a28>
   375f8:	ldr	r0, [r4, #4]
   375fc:	mov	r1, #255	; 0xff
   37600:	bl	12904 <memset@plt>
   37604:	ldr	r0, [r4, #28]
   37608:	b	37784 <__assert_fail@plt+0x24bc8>
   3760c:	sub	r7, r8, r9
   37610:	str	r7, [r4, #28]
   37614:	b	37764 <__assert_fail@plt+0x24ba8>
   37618:	ldr	r0, [r4, #64]	; 0x40
   3761c:	cmp	r0, #0
   37620:	beq	37328 <__assert_fail@plt+0x2476c>
   37624:	mov	r0, r4
   37628:	bl	32b50 <__assert_fail@plt+0x1ff94>
   3762c:	b	37328 <__assert_fail@plt+0x2476c>
   37630:	ldr	r0, [r4, #8]
   37634:	sub	r2, r8, r5
   37638:	lsl	r2, r2, #2
   3763c:	add	r1, r0, r5, lsl #2
   37640:	bl	1255c <memmove@plt>
   37644:	ldr	r2, [r4, #28]
   37648:	ldr	r0, [r4, #4]
   3764c:	add	r1, r0, r5
   37650:	sub	r2, r2, r5
   37654:	bl	1255c <memmove@plt>
   37658:	ldr	r0, [r4, #28]
   3765c:	ldr	r1, [r4, #32]
   37660:	sub	r0, r0, r5
   37664:	sub	r1, r1, r5
   37668:	cmp	r0, #1
   3766c:	str	r0, [r4, #28]
   37670:	str	r1, [r4, #32]
   37674:	blt	372b0 <__assert_fail@plt+0x246f4>
   37678:	ldr	r0, [r4, #12]
   3767c:	mov	r2, #0
   37680:	add	r1, r0, r5, lsl #2
   37684:	ldr	r3, [r1, r2, lsl #2]
   37688:	sub	r3, r3, r5
   3768c:	str	r3, [r0, r2, lsl #2]
   37690:	add	r2, r2, #1
   37694:	ldr	r3, [r4, #28]
   37698:	cmp	r2, r3
   3769c:	blt	37684 <__assert_fail@plt+0x24ac8>
   376a0:	b	372b0 <__assert_fail@plt+0x246f4>
   376a4:	mov	r0, #0
   376a8:	b	37784 <__assert_fail@plt+0x24bc8>
   376ac:	cmp	r7, #0
   376b0:	ldr	r3, [sp, #4]
   376b4:	ldr	r1, [sp, #8]
   376b8:	mov	r2, #0
   376bc:	cmpne	r0, #0
   376c0:	ldrne	r0, [r4]
   376c4:	ldrbne	r2, [r0, r8]
   376c8:	stm	sl, {r1, r3}
   376cc:	mov	r0, #1
   376d0:	b	37714 <__assert_fail@plt+0x24b58>
   376d4:	ldr	r0, [r4]
   376d8:	ldr	r2, [r4, #44]	; 0x2c
   376dc:	mov	r3, sl
   376e0:	add	r1, r0, r8
   376e4:	ldr	r0, [sl]
   376e8:	sub	r7, r2, r8
   376ec:	mov	r2, r7
   376f0:	str	r0, [sp, #8]
   376f4:	ldr	r0, [sl, #4]
   376f8:	str	r0, [sp, #4]
   376fc:	add	r0, sp, #24
   37700:	bl	2e214 <__assert_fail@plt+0x1b658>
   37704:	sub	r1, r0, #1
   37708:	cmn	r1, #3
   3770c:	bcs	376ac <__assert_fail@plt+0x24af0>
   37710:	ldr	r2, [sp, #24]
   37714:	add	r8, r0, r8
   37718:	cmp	r8, r9
   3771c:	blt	376d4 <__assert_fail@plt+0x24b18>
   37720:	ldr	lr, [sp]
   37724:	sub	r7, r8, r9
   37728:	cmn	r2, #1
   3772c:	str	r7, [r4, #28]
   37730:	beq	37764 <__assert_fail@plt+0x24ba8>
   37734:	ldrb	r0, [r4, #78]	; 0x4e
   37738:	cmp	r0, #0
   3773c:	bne	377f8 <__assert_fail@plt+0x24c3c>
   37740:	mov	r1, #0
   37744:	cmp	r2, #10
   37748:	bne	37758 <__assert_fail@plt+0x24b9c>
   3774c:	ldrb	r1, [r4, #77]	; 0x4d
   37750:	cmp	r1, #0
   37754:	movwne	r1, #2
   37758:	str	r1, [r4, #60]	; 0x3c
   3775c:	ldr	r7, [r4, #28]
   37760:	b	37778 <__assert_fail@plt+0x24bbc>
   37764:	sub	r1, lr, #1
   37768:	mov	r0, r4
   3776c:	mov	r2, r6
   37770:	bl	379e0 <__assert_fail@plt+0x24e24>
   37774:	str	r0, [r4, #60]	; 0x3c
   37778:	mov	r0, #0
   3777c:	cmp	r7, #0
   37780:	bne	377b4 <__assert_fail@plt+0x24bf8>
   37784:	str	r0, [r4, #32]
   37788:	b	372b0 <__assert_fail@plt+0x246f4>
   3778c:	mov	r2, #0
   37790:	strb	r2, [r4, #76]	; 0x4c
   37794:	sub	r2, r5, r9
   37798:	ldr	r3, [r4, #44]	; 0x2c
   3779c:	ldr	r7, [r4, #52]	; 0x34
   377a0:	add	r3, r2, r3
   377a4:	add	r2, r2, r7
   377a8:	str	r3, [r4, #48]	; 0x30
   377ac:	str	r2, [r4, #56]	; 0x38
   377b0:	b	37350 <__assert_fail@plt+0x24794>
   377b4:	cmp	r7, #1
   377b8:	blt	377dc <__assert_fail@plt+0x24c20>
   377bc:	ldr	r0, [r4, #8]
   377c0:	mov	r1, #0
   377c4:	mvn	r2, #0
   377c8:	str	r2, [r0, r1, lsl #2]
   377cc:	add	r1, r1, #1
   377d0:	ldr	r7, [r4, #28]
   377d4:	cmp	r1, r7
   377d8:	blt	377c8 <__assert_fail@plt+0x24c0c>
   377dc:	ldrb	r0, [r4, #75]	; 0x4b
   377e0:	cmp	r0, #0
   377e4:	beq	37820 <__assert_fail@plt+0x24c64>
   377e8:	ldr	r0, [r4, #4]
   377ec:	mov	r1, #255	; 0xff
   377f0:	mov	r2, r7
   377f4:	b	37600 <__assert_fail@plt+0x24a44>
   377f8:	mov	r0, r2
   377fc:	mov	r6, r2
   37800:	bl	128e0 <iswalnum@plt>
   37804:	mov	r1, #1
   37808:	cmp	r6, #95	; 0x5f
   3780c:	beq	37758 <__assert_fail@plt+0x24b9c>
   37810:	mov	r2, r6
   37814:	cmp	r0, #0
   37818:	beq	37740 <__assert_fail@plt+0x24b84>
   3781c:	b	37758 <__assert_fail@plt+0x24b9c>
   37820:	mov	r0, r7
   37824:	b	37784 <__assert_fail@plt+0x24bc8>
   37828:	cmp	r2, #1
   3782c:	blt	37870 <__assert_fail@plt+0x24cb4>
   37830:	sub	r1, r7, #1
   37834:	sub	r1, r1, r3
   37838:	mvn	r3, #1
   3783c:	cmn	r1, #7
   37840:	mvnle	r1, #6
   37844:	sub	ip, r3, r1
   37848:	add	r1, sp, #14
   3784c:	ldrb	r3, [r7, ip]
   37850:	sub	lr, ip, #1
   37854:	ldrb	r3, [r0, r3]
   37858:	strb	r3, [r1, ip]
   3785c:	add	r3, ip, #1
   37860:	mov	ip, lr
   37864:	cmp	r3, #1
   37868:	bgt	3784c <__assert_fail@plt+0x24c90>
   3786c:	b	373cc <__assert_fail@plt+0x24810>
   37870:	add	r1, sp, #14
   37874:	b	373cc <__assert_fail@plt+0x24810>
   37878:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3787c:	add	fp, sp, #24
   37880:	mov	r3, r2
   37884:	ldr	r2, [r0, #88]	; 0x58
   37888:	mov	r5, r1
   3788c:	mov	r4, r0
   37890:	mov	r1, r3
   37894:	bl	379e0 <__assert_fail@plt+0x24e24>
   37898:	ldr	r1, [r5, #8]
   3789c:	cmp	r1, #1
   378a0:	blt	37930 <__assert_fail@plt+0x24d74>
   378a4:	and	ip, r0, #8
   378a8:	and	lr, r0, #2
   378ac:	and	r2, r0, #1
   378b0:	ldr	r0, [r4, #84]	; 0x54
   378b4:	ldr	r5, [r5, #12]
   378b8:	movw	r8, #65280	; 0xff00
   378bc:	mov	r3, #0
   378c0:	movt	r8, #3
   378c4:	ldr	r4, [r0]
   378c8:	ldr	r0, [r5, r3, lsl #2]
   378cc:	add	r7, r4, r0, lsl #3
   378d0:	ldr	r7, [r7, #4]
   378d4:	uxtb	r6, r7
   378d8:	cmp	r6, #2
   378dc:	bne	37924 <__assert_fail@plt+0x24d68>
   378e0:	tst	r7, r8
   378e4:	beq	37934 <__assert_fail@plt+0x24d78>
   378e8:	cmp	r2, #0
   378ec:	bne	378f8 <__assert_fail@plt+0x24d3c>
   378f0:	ands	r6, r7, #1024	; 0x400
   378f4:	bne	37924 <__assert_fail@plt+0x24d68>
   378f8:	cmp	r2, #0
   378fc:	andsne	r6, r7, #2048	; 0x800
   37900:	bne	37924 <__assert_fail@plt+0x24d68>
   37904:	cmp	lr, #0
   37908:	bne	37914 <__assert_fail@plt+0x24d58>
   3790c:	ands	r6, r7, #8192	; 0x2000
   37910:	bne	37924 <__assert_fail@plt+0x24d68>
   37914:	cmp	ip, #0
   37918:	bne	37934 <__assert_fail@plt+0x24d78>
   3791c:	ands	r6, r7, #32768	; 0x8000
   37920:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   37924:	add	r3, r3, #1
   37928:	cmp	r3, r1
   3792c:	blt	378c8 <__assert_fail@plt+0x24d0c>
   37930:	mov	r0, #0
   37934:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   37938:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3793c:	add	fp, sp, #24
   37940:	mov	r8, r0
   37944:	ldr	r0, [r0, #124]	; 0x7c
   37948:	cmp	r0, #1
   3794c:	blt	379d0 <__assert_fail@plt+0x24e14>
   37950:	mov	r7, #0
   37954:	ldr	r0, [r8, #132]	; 0x84
   37958:	ldr	r5, [r0, r7, lsl #2]
   3795c:	ldr	r0, [r5, #16]
   37960:	cmp	r0, #1
   37964:	blt	37994 <__assert_fail@plt+0x24dd8>
   37968:	mov	r4, #0
   3796c:	ldr	r0, [r5, #20]
   37970:	ldr	r6, [r0, r4, lsl #2]
   37974:	ldr	r0, [r6, #16]
   37978:	bl	2c048 <__assert_fail@plt+0x1948c>
   3797c:	mov	r0, r6
   37980:	bl	2c048 <__assert_fail@plt+0x1948c>
   37984:	ldr	r0, [r5, #16]
   37988:	add	r4, r4, #1
   3798c:	cmp	r4, r0
   37990:	blt	3796c <__assert_fail@plt+0x24db0>
   37994:	ldr	r0, [r5, #20]
   37998:	bl	2c048 <__assert_fail@plt+0x1948c>
   3799c:	ldr	r0, [r5, #8]
   379a0:	cmp	r0, #0
   379a4:	beq	379b8 <__assert_fail@plt+0x24dfc>
   379a8:	ldr	r0, [r0, #8]
   379ac:	bl	2c048 <__assert_fail@plt+0x1948c>
   379b0:	ldr	r0, [r5, #8]
   379b4:	bl	2c048 <__assert_fail@plt+0x1948c>
   379b8:	mov	r0, r5
   379bc:	bl	2c048 <__assert_fail@plt+0x1948c>
   379c0:	ldr	r0, [r8, #124]	; 0x7c
   379c4:	add	r7, r7, #1
   379c8:	cmp	r7, r0
   379cc:	blt	37954 <__assert_fail@plt+0x24d98>
   379d0:	mov	r0, #0
   379d4:	str	r0, [r8, #108]	; 0x6c
   379d8:	str	r0, [r8, #124]	; 0x7c
   379dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   379e0:	push	{r4, r5, fp, lr}
   379e4:	add	fp, sp, #8
   379e8:	mov	r4, r0
   379ec:	cmn	r1, #1
   379f0:	ble	37a2c <__assert_fail@plt+0x24e70>
   379f4:	ldr	r0, [r4, #48]	; 0x30
   379f8:	cmp	r0, r1
   379fc:	beq	37a90 <__assert_fail@plt+0x24ed4>
   37a00:	ldr	r0, [r4, #80]	; 0x50
   37a04:	cmp	r0, #2
   37a08:	blt	37a34 <__assert_fail@plt+0x24e78>
   37a0c:	ldr	r0, [r4, #8]
   37a10:	ldr	r5, [r0, r1, lsl #2]
   37a14:	cmn	r5, #1
   37a18:	bne	37a68 <__assert_fail@plt+0x24eac>
   37a1c:	sub	r2, r1, #1
   37a20:	cmp	r1, #0
   37a24:	mov	r1, r2
   37a28:	bgt	37a10 <__assert_fail@plt+0x24e54>
   37a2c:	ldr	r0, [r4, #60]	; 0x3c
   37a30:	pop	{r4, r5, fp, pc}
   37a34:	ldr	r0, [r4, #4]
   37a38:	ldr	r2, [r4, #68]	; 0x44
   37a3c:	ldrb	r1, [r0, r1]
   37a40:	ubfx	r0, r1, #5, #3
   37a44:	and	r3, r1, #31
   37a48:	ldr	r2, [r2, r0, lsl #2]
   37a4c:	mov	r0, #1
   37a50:	tst	r2, r0, lsl r3
   37a54:	bne	37a8c <__assert_fail@plt+0x24ed0>
   37a58:	mov	r0, #0
   37a5c:	cmp	r1, #10
   37a60:	popne	{r4, r5, fp, pc}
   37a64:	b	37a80 <__assert_fail@plt+0x24ec4>
   37a68:	ldrb	r0, [r4, #78]	; 0x4e
   37a6c:	cmp	r0, #0
   37a70:	bne	37a9c <__assert_fail@plt+0x24ee0>
   37a74:	mov	r0, #0
   37a78:	cmp	r5, #10
   37a7c:	bne	37a8c <__assert_fail@plt+0x24ed0>
   37a80:	ldrb	r0, [r4, #77]	; 0x4d
   37a84:	cmp	r0, #0
   37a88:	movwne	r0, #2
   37a8c:	pop	{r4, r5, fp, pc}
   37a90:	and	r0, r2, #2
   37a94:	eor	r0, r0, #10
   37a98:	pop	{r4, r5, fp, pc}
   37a9c:	mov	r0, r5
   37aa0:	bl	128e0 <iswalnum@plt>
   37aa4:	mov	r1, r0
   37aa8:	mov	r0, #1
   37aac:	cmp	r5, #95	; 0x5f
   37ab0:	beq	37a8c <__assert_fail@plt+0x24ed0>
   37ab4:	cmp	r1, #0
   37ab8:	beq	37a74 <__assert_fail@plt+0x24eb8>
   37abc:	b	37a8c <__assert_fail@plt+0x24ed0>
   37ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37ac4:	add	fp, sp, #28
   37ac8:	sub	sp, sp, #4
   37acc:	mov	sl, r0
   37ad0:	ldr	r0, [r1, #4]
   37ad4:	cmp	r0, #1
   37ad8:	blt	37ba4 <__assert_fail@plt+0x24fe8>
   37adc:	ldr	r7, [sl, #84]	; 0x54
   37ae0:	mov	r8, r2
   37ae4:	mov	r5, r1
   37ae8:	mov	r4, #0
   37aec:	b	37b14 <__assert_fail@plt+0x24f58>
   37af0:	ldr	r0, [sl, #132]	; 0x84
   37af4:	lsl	r1, r9, #3
   37af8:	bl	2ecdc <__assert_fail@plt+0x1c120>
   37afc:	cmp	r0, #0
   37b00:	beq	37bb0 <__assert_fail@plt+0x24ff4>
   37b04:	lsl	r1, r9, #1
   37b08:	str	r1, [sl, #128]	; 0x80
   37b0c:	str	r0, [sl, #132]	; 0x84
   37b10:	b	37b5c <__assert_fail@plt+0x24fa0>
   37b14:	ldr	r1, [r5, #8]
   37b18:	ldr	r6, [r1, r4, lsl #2]
   37b1c:	ldr	r1, [r7]
   37b20:	add	r2, r1, r6, lsl #3
   37b24:	ldrb	r2, [r2, #4]
   37b28:	cmp	r2, #8
   37b2c:	bne	37b98 <__assert_fail@plt+0x24fdc>
   37b30:	ldr	r1, [r1, r6, lsl #3]
   37b34:	cmp	r1, #31
   37b38:	bgt	37b98 <__assert_fail@plt+0x24fdc>
   37b3c:	ldr	r2, [r7, #80]	; 0x50
   37b40:	mov	r3, #1
   37b44:	tst	r2, r3, lsl r1
   37b48:	beq	37b98 <__assert_fail@plt+0x24fdc>
   37b4c:	ldr	r9, [sl, #124]	; 0x7c
   37b50:	ldr	r0, [sl, #128]	; 0x80
   37b54:	cmp	r9, r0
   37b58:	beq	37af0 <__assert_fail@plt+0x24f34>
   37b5c:	mov	r0, #1
   37b60:	mov	r1, #24
   37b64:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   37b68:	ldr	r1, [sl, #124]	; 0x7c
   37b6c:	ldr	r2, [sl, #132]	; 0x84
   37b70:	str	r0, [r2, r1, lsl #2]
   37b74:	ldr	r0, [sl, #132]	; 0x84
   37b78:	ldr	r0, [r0, r1, lsl #2]
   37b7c:	cmp	r0, #0
   37b80:	beq	37bb0 <__assert_fail@plt+0x24ff4>
   37b84:	add	r1, r1, #1
   37b88:	str	r6, [r0, #4]
   37b8c:	str	r1, [sl, #124]	; 0x7c
   37b90:	str	r8, [r0]
   37b94:	ldr	r0, [r5, #4]
   37b98:	add	r4, r4, #1
   37b9c:	cmp	r4, r0
   37ba0:	blt	37b14 <__assert_fail@plt+0x24f58>
   37ba4:	mov	r0, #0
   37ba8:	sub	sp, fp, #28
   37bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37bb0:	mov	r0, #12
   37bb4:	b	37ba8 <__assert_fail@plt+0x24fec>
   37bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37bbc:	add	fp, sp, #28
   37bc0:	sub	sp, sp, #76	; 0x4c
   37bc4:	mov	lr, r0
   37bc8:	ldr	r0, [r1, #4]
   37bcc:	cmp	r0, #1
   37bd0:	blt	382b0 <__assert_fail@plt+0x256f4>
   37bd4:	ldr	r2, [lr, #84]	; 0x54
   37bd8:	ldr	r0, [lr, #40]	; 0x28
   37bdc:	mov	r3, #0
   37be0:	str	lr, [sp, #48]	; 0x30
   37be4:	str	r1, [sp, #16]
   37be8:	str	r0, [fp, #-48]	; 0xffffffd0
   37bec:	str	r2, [sp, #32]
   37bf0:	ldr	r0, [r1, #8]
   37bf4:	str	r3, [sp, #36]	; 0x24
   37bf8:	ldr	r3, [r0, r3, lsl #2]
   37bfc:	ldr	r0, [r2]
   37c00:	add	r0, r0, r3, lsl #3
   37c04:	mov	r1, r3
   37c08:	str	r3, [sp, #52]	; 0x34
   37c0c:	ldr	r4, [r0, #4]
   37c10:	uxtb	r0, r4
   37c14:	cmp	r0, #4
   37c18:	bne	38294 <__assert_fail@plt+0x256d8>
   37c1c:	movw	r0, #65280	; 0xff00
   37c20:	movt	r0, #3
   37c24:	tst	r4, r0
   37c28:	beq	37c84 <__assert_fail@plt+0x250c8>
   37c2c:	ldr	r2, [lr, #88]	; 0x58
   37c30:	ldr	r1, [fp, #-48]	; 0xffffffd0
   37c34:	mov	r0, lr
   37c38:	mov	r5, lr
   37c3c:	bl	379e0 <__assert_fail@plt+0x24e24>
   37c40:	mov	lr, r5
   37c44:	and	r1, r0, #1
   37c48:	tst	r4, #1024	; 0x400
   37c4c:	beq	37c58 <__assert_fail@plt+0x2509c>
   37c50:	cmp	r1, #0
   37c54:	beq	38294 <__assert_fail@plt+0x256d8>
   37c58:	tst	r4, #2048	; 0x800
   37c5c:	cmpne	r1, #0
   37c60:	bne	38294 <__assert_fail@plt+0x256d8>
   37c64:	tst	r4, #8192	; 0x2000
   37c68:	beq	37c74 <__assert_fail@plt+0x250b8>
   37c6c:	ands	r1, r0, #2
   37c70:	beq	38294 <__assert_fail@plt+0x256d8>
   37c74:	tst	r4, #32768	; 0x8000
   37c78:	beq	37c84 <__assert_fail@plt+0x250c8>
   37c7c:	ands	r0, r0, #8
   37c80:	beq	38294 <__assert_fail@plt+0x256d8>
   37c84:	ldr	r0, [lr, #108]	; 0x6c
   37c88:	ldr	r1, [fp, #-48]	; 0xffffffd0
   37c8c:	ldr	r4, [lr, #4]
   37c90:	ldr	r7, [lr, #84]	; 0x54
   37c94:	mov	r5, lr
   37c98:	str	r0, [sp, #12]
   37c9c:	mov	r0, lr
   37ca0:	bl	38720 <__assert_fail@plt+0x25b64>
   37ca4:	mov	lr, r5
   37ca8:	cmn	r0, #1
   37cac:	beq	37cdc <__assert_fail@plt+0x25120>
   37cb0:	ldr	r1, [lr, #116]	; 0x74
   37cb4:	add	r0, r0, r0, lsl #1
   37cb8:	add	r0, r1, r0, lsl #3
   37cbc:	ldr	r1, [r0]
   37cc0:	ldr	r2, [sp, #52]	; 0x34
   37cc4:	cmp	r1, r2
   37cc8:	beq	38084 <__assert_fail@plt+0x254c8>
   37ccc:	ldrb	r1, [r0, #20]
   37cd0:	add	r0, r0, #24
   37cd4:	cmp	r1, #0
   37cd8:	bne	37cbc <__assert_fail@plt+0x25100>
   37cdc:	ldr	r0, [lr, #124]	; 0x7c
   37ce0:	cmp	r0, #1
   37ce4:	blt	38084 <__assert_fail@plt+0x254c8>
   37ce8:	ldr	r0, [r7]
   37cec:	ldr	r1, [sp, #52]	; 0x34
   37cf0:	mov	r2, #0
   37cf4:	mov	ip, r4
   37cf8:	str	r7, [sp, #24]
   37cfc:	ldr	r8, [r0, r1, lsl #3]
   37d00:	str	r8, [sp, #28]
   37d04:	ldr	r1, [lr, #132]	; 0x84
   37d08:	str	r2, [sp, #40]	; 0x28
   37d0c:	ldr	r6, [r1, r2, lsl #2]
   37d10:	ldr	r1, [r6, #4]
   37d14:	ldr	r0, [r0, r1, lsl #3]
   37d18:	cmp	r0, r8
   37d1c:	bne	37e40 <__assert_fail@plt+0x25284>
   37d20:	ldr	r0, [r6, #16]
   37d24:	ldr	r9, [r6]
   37d28:	mov	r8, #0
   37d2c:	str	r6, [sp, #44]	; 0x2c
   37d30:	cmp	r0, #1
   37d34:	blt	37d44 <__assert_fail@plt+0x25188>
   37d38:	ldr	r5, [fp, #-48]	; 0xffffffd0
   37d3c:	mov	r7, r9
   37d40:	b	37d78 <__assert_fail@plt+0x251bc>
   37d44:	ldr	r5, [fp, #-48]	; 0xffffffd0
   37d48:	b	37e1c <__assert_fail@plt+0x25260>
   37d4c:	ldr	r2, [lr, #48]	; 0x30
   37d50:	cmp	r1, r2
   37d54:	bgt	37e18 <__assert_fail@plt+0x2525c>
   37d58:	mov	r0, lr
   37d5c:	mov	r6, lr
   37d60:	bl	387a8 <__assert_fail@plt+0x25bec>
   37d64:	cmp	r0, #0
   37d68:	bne	382c0 <__assert_fail@plt+0x25704>
   37d6c:	ldr	ip, [r6, #4]
   37d70:	mov	r1, r6
   37d74:	b	37da0 <__assert_fail@plt+0x251e4>
   37d78:	ldr	r1, [r6, #20]
   37d7c:	ldr	sl, [r1, r8, lsl #2]
   37d80:	ldr	r9, [sl, #4]
   37d84:	sub	r4, r9, r7
   37d88:	cmp	r4, #1
   37d8c:	blt	37dc8 <__assert_fail@plt+0x2520c>
   37d90:	ldr	r2, [lr, #28]
   37d94:	add	r1, r4, r5
   37d98:	cmp	r1, r2
   37d9c:	bgt	37d4c <__assert_fail@plt+0x25190>
   37da0:	add	r0, ip, r5
   37da4:	add	r1, ip, r7
   37da8:	mov	r2, r4
   37dac:	mov	r6, ip
   37db0:	bl	12628 <memcmp@plt>
   37db4:	mov	ip, r6
   37db8:	ldr	r6, [sp, #44]	; 0x2c
   37dbc:	ldr	lr, [sp, #48]	; 0x30
   37dc0:	cmp	r0, #0
   37dc4:	bne	37e14 <__assert_fail@plt+0x25258>
   37dc8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   37dcc:	ldr	r3, [sp, #52]	; 0x34
   37dd0:	mov	r1, r6
   37dd4:	mov	r2, sl
   37dd8:	mov	r7, lr
   37ddc:	str	r0, [sp]
   37de0:	mov	r0, lr
   37de4:	bl	38838 <__assert_fail@plt+0x25c7c>
   37de8:	cmp	r0, #1
   37dec:	bhi	382c0 <__assert_fail@plt+0x25704>
   37df0:	ldr	r0, [r6, #16]
   37df4:	ldr	ip, [r7, #4]
   37df8:	add	r8, r8, #1
   37dfc:	mov	lr, r7
   37e00:	add	r5, r4, r5
   37e04:	mov	r7, r9
   37e08:	cmp	r8, r0
   37e0c:	blt	37d78 <__assert_fail@plt+0x251bc>
   37e10:	b	37e1c <__assert_fail@plt+0x25260>
   37e14:	ldr	r0, [r6, #16]
   37e18:	mov	r9, r7
   37e1c:	cmp	r8, r0
   37e20:	blt	37e38 <__assert_fail@plt+0x2527c>
   37e24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   37e28:	cmp	r8, #0
   37e2c:	addne	r9, r9, #1
   37e30:	cmp	r9, r0
   37e34:	ble	37e5c <__assert_fail@plt+0x252a0>
   37e38:	ldr	r7, [sp, #24]
   37e3c:	ldr	r8, [sp, #28]
   37e40:	ldr	r2, [sp, #40]	; 0x28
   37e44:	ldr	r0, [lr, #124]	; 0x7c
   37e48:	add	r2, r2, #1
   37e4c:	cmp	r2, r0
   37e50:	bge	38090 <__assert_fail@plt+0x254d4>
   37e54:	ldr	r0, [r7]
   37e58:	b	37d04 <__assert_fail@plt+0x25148>
   37e5c:	ldr	r7, [sp, #24]
   37e60:	ldr	r8, [sp, #28]
   37e64:	b	37fd4 <__assert_fail@plt+0x25418>
   37e68:	cmn	r4, #1
   37e6c:	beq	38068 <__assert_fail@plt+0x254ac>
   37e70:	ldr	r1, [r6, #8]
   37e74:	mov	r7, ip
   37e78:	str	r5, [sp, #20]
   37e7c:	cmp	r1, #0
   37e80:	bne	37eb0 <__assert_fail@plt+0x252f4>
   37e84:	ldr	r0, [r6]
   37e88:	add	r1, sl, #1
   37e8c:	mov	r5, #12
   37e90:	sub	r1, r1, r0
   37e94:	mov	r0, #12
   37e98:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   37e9c:	ldr	r6, [sp, #44]	; 0x2c
   37ea0:	mov	r1, r0
   37ea4:	cmp	r0, #0
   37ea8:	str	r0, [r6, #8]
   37eac:	beq	382c4 <__assert_fail@plt+0x25708>
   37eb0:	ldr	r3, [r6]
   37eb4:	ldr	r2, [r6, #4]
   37eb8:	stm	sp, {r4, sl}
   37ebc:	mov	r0, #9
   37ec0:	str	r0, [sp, #8]
   37ec4:	ldr	r0, [sp, #48]	; 0x30
   37ec8:	bl	38988 <__assert_fail@plt+0x25dcc>
   37ecc:	ldr	r6, [sp, #44]	; 0x2c
   37ed0:	ldr	r5, [sp, #20]
   37ed4:	mov	ip, r7
   37ed8:	cmp	r0, #1
   37edc:	mov	r7, r9
   37ee0:	beq	3806c <__assert_fail@plt+0x254b0>
   37ee4:	cmp	r0, #0
   37ee8:	bne	382c0 <__assert_fail@plt+0x25704>
   37eec:	ldr	r1, [r6, #12]
   37ef0:	ldr	r0, [r6, #16]
   37ef4:	ldr	r7, [sp, #48]	; 0x30
   37ef8:	cmp	r0, r1
   37efc:	beq	37fa8 <__assert_fail@plt+0x253ec>
   37f00:	mov	r0, #1
   37f04:	mov	r1, #20
   37f08:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   37f0c:	cmp	r0, #0
   37f10:	beq	382d0 <__assert_fail@plt+0x25714>
   37f14:	ldr	r1, [sp, #44]	; 0x2c
   37f18:	mov	r2, r0
   37f1c:	ldr	r0, [r1, #16]
   37f20:	ldr	r3, [r1, #20]
   37f24:	str	r2, [r3, r0, lsl #2]
   37f28:	stm	r2, {r4, sl}
   37f2c:	add	r0, r0, #1
   37f30:	str	r0, [r1, #16]
   37f34:	ldr	r0, [fp, #-48]	; 0xffffffd0
   37f38:	ldr	r3, [sp, #52]	; 0x34
   37f3c:	str	r0, [sp]
   37f40:	mov	r0, r7
   37f44:	bl	38838 <__assert_fail@plt+0x25c7c>
   37f48:	cmp	r0, #1
   37f4c:	bhi	382c0 <__assert_fail@plt+0x25704>
   37f50:	ldr	ip, [r7, #4]
   37f54:	ldr	r6, [sp, #44]	; 0x2c
   37f58:	ldr	r5, [sp, #20]
   37f5c:	b	38068 <__assert_fail@plt+0x254ac>
   37f60:	ldr	r0, [lr, #48]	; 0x30
   37f64:	cmp	r5, r0
   37f68:	bge	37e40 <__assert_fail@plt+0x25284>
   37f6c:	add	r4, r5, #1
   37f70:	mov	r0, lr
   37f74:	mov	r9, r7
   37f78:	mov	r7, r5
   37f7c:	mov	r5, lr
   37f80:	mov	r1, r4
   37f84:	bl	382f0 <__assert_fail@plt+0x25734>
   37f88:	cmp	r0, #0
   37f8c:	bne	382c0 <__assert_fail@plt+0x25704>
   37f90:	ldr	ip, [r5, #4]
   37f94:	ldr	r6, [sp, #44]	; 0x2c
   37f98:	mov	lr, r5
   37f9c:	mov	r5, r7
   37fa0:	mov	r7, r9
   37fa4:	b	37ff4 <__assert_fail@plt+0x25438>
   37fa8:	mov	r1, #1
   37fac:	orr	r5, r1, r0, lsl #1
   37fb0:	ldr	r0, [r6, #20]
   37fb4:	lsl	r1, r5, #2
   37fb8:	bl	2ecdc <__assert_fail@plt+0x1c120>
   37fbc:	cmp	r0, #0
   37fc0:	beq	382d0 <__assert_fail@plt+0x25714>
   37fc4:	ldr	r8, [sp, #28]
   37fc8:	str	r5, [r6, #12]
   37fcc:	str	r0, [r6, #20]
   37fd0:	b	37f00 <__assert_fail@plt+0x25344>
   37fd4:	ldr	r0, [r6]
   37fd8:	mov	sl, r9
   37fdc:	cmp	r9, r0
   37fe0:	ble	3800c <__assert_fail@plt+0x25450>
   37fe4:	ldr	r0, [lr, #28]
   37fe8:	cmp	r5, r0
   37fec:	bge	37f60 <__assert_fail@plt+0x253a4>
   37ff0:	add	r4, r5, #1
   37ff4:	add	r1, ip, sl
   37ff8:	ldrb	r0, [ip, r5]
   37ffc:	ldrb	r1, [r1, #-1]
   38000:	cmp	r0, r1
   38004:	beq	38010 <__assert_fail@plt+0x25454>
   38008:	b	37e40 <__assert_fail@plt+0x25284>
   3800c:	mov	r4, r5
   38010:	ldr	r0, [lr, #100]	; 0x64
   38014:	mov	r5, r4
   38018:	ldr	r2, [r0, sl, lsl #2]
   3801c:	cmp	r2, #0
   38020:	beq	3806c <__assert_fail@plt+0x254b0>
   38024:	ldr	r0, [r2, #8]
   38028:	cmp	r0, #1
   3802c:	blt	3806c <__assert_fail@plt+0x254b0>
   38030:	ldr	r1, [r7]
   38034:	ldr	r2, [r2, #12]
   38038:	mov	r9, r7
   3803c:	mov	r3, #0
   38040:	ldr	r4, [r2, r3, lsl #2]
   38044:	add	r7, r1, r4, lsl #3
   38048:	ldrb	r7, [r7, #4]
   3804c:	cmp	r7, #9
   38050:	ldreq	r7, [r1, r4, lsl #3]
   38054:	cmpeq	r7, r8
   38058:	beq	37e68 <__assert_fail@plt+0x252ac>
   3805c:	add	r3, r3, #1
   38060:	cmp	r3, r0
   38064:	blt	38040 <__assert_fail@plt+0x25484>
   38068:	mov	r7, r9
   3806c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   38070:	ldr	lr, [sp, #48]	; 0x30
   38074:	add	r9, sl, #1
   38078:	cmp	sl, r0
   3807c:	blt	37fd4 <__assert_fail@plt+0x25418>
   38080:	b	37e40 <__assert_fail@plt+0x25284>
   38084:	mov	r0, #0
   38088:	str	r0, [fp, #-32]	; 0xffffffe0
   3808c:	b	38294 <__assert_fail@plt+0x256d8>
   38090:	ldr	r0, [lr, #108]	; 0x6c
   38094:	ldr	r7, [sp, #12]
   38098:	mov	r1, #0
   3809c:	str	r1, [fp, #-32]	; 0xffffffe0
   380a0:	cmp	r7, r0
   380a4:	bge	38294 <__assert_fail@plt+0x256d8>
   380a8:	add	r0, r7, r7, lsl #1
   380ac:	lsl	r5, r0, #3
   380b0:	ldr	r0, [lr, #116]	; 0x74
   380b4:	ldr	r2, [sp, #52]	; 0x34
   380b8:	ldr	r1, [r0, r5]
   380bc:	cmp	r1, r2
   380c0:	bne	3827c <__assert_fail@plt+0x256c0>
   380c4:	add	r0, r0, r5
   380c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   380cc:	ldr	r1, [r0, #4]
   380d0:	cmp	r1, r2
   380d4:	bne	3827c <__assert_fail@plt+0x256c0>
   380d8:	ldr	r2, [r0, #8]
   380dc:	ldr	r3, [r0, #12]
   380e0:	ldr	r0, [sp, #32]
   380e4:	ldr	r4, [r0, #24]
   380e8:	cmp	r3, r2
   380ec:	bne	38108 <__assert_fail@plt+0x2554c>
   380f0:	ldr	r1, [sp, #52]	; 0x34
   380f4:	ldr	r0, [r0, #20]
   380f8:	add	r1, r1, r1, lsl #1
   380fc:	add	r0, r0, r1, lsl #2
   38100:	ldr	r0, [r0, #8]
   38104:	b	38114 <__assert_fail@plt+0x25558>
   38108:	ldr	r0, [r0, #12]
   3810c:	ldr	r1, [sp, #52]	; 0x34
   38110:	add	r0, r0, r1, lsl #2
   38114:	ldr	r0, [r0]
   38118:	ldr	r8, [fp, #-48]	; 0xffffffd0
   3811c:	ldr	r6, [sp, #48]	; 0x30
   38120:	str	r2, [sp, #44]	; 0x2c
   38124:	str	r3, [sp, #40]	; 0x28
   38128:	add	r9, r0, r0, lsl #1
   3812c:	add	r0, r3, r8
   38130:	sub	sl, r0, r2
   38134:	ldr	r2, [r6, #88]	; 0x58
   38138:	mov	r0, r6
   3813c:	sub	r1, sl, #1
   38140:	bl	379e0 <__assert_fail@plt+0x24e24>
   38144:	mov	r3, r0
   38148:	ldr	r0, [r6, #100]	; 0x64
   3814c:	ldr	r1, [r0, r8, lsl #2]
   38150:	ldr	r2, [r0, sl, lsl #2]
   38154:	add	r8, r4, r9, lsl #2
   38158:	cmp	r1, #0
   3815c:	ldrne	r0, [r1, #8]
   38160:	moveq	r0, #0
   38164:	cmp	r2, #0
   38168:	str	r0, [sp, #28]
   3816c:	sub	r0, fp, #44	; 0x2c
   38170:	beq	381dc <__assert_fail@plt+0x25620>
   38174:	ldr	r1, [r2, #40]	; 0x28
   38178:	mov	r2, r8
   3817c:	mov	r4, r3
   38180:	mov	r6, r0
   38184:	bl	3851c <__assert_fail@plt+0x25960>
   38188:	cmp	r0, #0
   3818c:	str	r0, [fp, #-32]	; 0xffffffe0
   38190:	bne	382d8 <__assert_fail@plt+0x2571c>
   38194:	ldr	r1, [sp, #32]
   38198:	sub	r0, fp, #32
   3819c:	mov	r2, r6
   381a0:	mov	r3, r4
   381a4:	bl	36d70 <__assert_fail@plt+0x241b4>
   381a8:	ldr	r4, [sp, #48]	; 0x30
   381ac:	ldr	r1, [r4, #100]	; 0x64
   381b0:	str	r0, [r1, sl, lsl #2]
   381b4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   381b8:	bl	2c048 <__assert_fail@plt+0x1948c>
   381bc:	ldr	r3, [r4, #100]	; 0x64
   381c0:	ldr	r1, [r3, sl, lsl #2]
   381c4:	cmp	r1, #0
   381c8:	bne	3821c <__assert_fail@plt+0x25660>
   381cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   381d0:	cmp	r0, #0
   381d4:	beq	3821c <__assert_fail@plt+0x25660>
   381d8:	b	382b8 <__assert_fail@plt+0x256fc>
   381dc:	ldr	r1, [sp, #32]
   381e0:	sub	r0, fp, #32
   381e4:	mov	r2, r8
   381e8:	bl	36d70 <__assert_fail@plt+0x241b4>
   381ec:	ldr	r1, [r6, #100]	; 0x64
   381f0:	str	r0, [r1, sl, lsl #2]
   381f4:	ldr	r3, [r6, #100]	; 0x64
   381f8:	ldr	r1, [r3, sl, lsl #2]
   381fc:	cmp	r1, #0
   38200:	bne	3821c <__assert_fail@plt+0x25660>
   38204:	ldr	r0, [fp, #-32]	; 0xffffffe0
   38208:	ldr	r1, [sp, #44]	; 0x2c
   3820c:	ldr	r2, [sp, #40]	; 0x28
   38210:	cmp	r0, #0
   38214:	beq	38224 <__assert_fail@plt+0x25668>
   38218:	b	382b8 <__assert_fail@plt+0x256fc>
   3821c:	ldr	r1, [sp, #44]	; 0x2c
   38220:	ldr	r2, [sp, #40]	; 0x28
   38224:	cmp	r2, r1
   38228:	bne	3827c <__assert_fail@plt+0x256c0>
   3822c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   38230:	ldr	r0, [r3, r1, lsl #2]
   38234:	ldr	r1, [sp, #28]
   38238:	ldr	r0, [r0, #8]
   3823c:	cmp	r0, r1
   38240:	ble	3827c <__assert_fail@plt+0x256c0>
   38244:	ldr	r4, [sp, #48]	; 0x30
   38248:	ldr	r2, [fp, #-48]	; 0xffffffd0
   3824c:	mov	r1, r8
   38250:	mov	r0, r4
   38254:	bl	37ac0 <__assert_fail@plt+0x24f04>
   38258:	cmp	r0, #0
   3825c:	str	r0, [fp, #-32]	; 0xffffffe0
   38260:	bne	382b8 <__assert_fail@plt+0x256fc>
   38264:	mov	r0, r4
   38268:	mov	r1, r8
   3826c:	bl	37bb8 <__assert_fail@plt+0x24ffc>
   38270:	cmp	r0, #0
   38274:	str	r0, [fp, #-32]	; 0xffffffe0
   38278:	bne	382b8 <__assert_fail@plt+0x256fc>
   3827c:	ldr	lr, [sp, #48]	; 0x30
   38280:	add	r7, r7, #1
   38284:	add	r5, r5, #24
   38288:	ldr	r0, [lr, #108]	; 0x6c
   3828c:	cmp	r7, r0
   38290:	blt	380b0 <__assert_fail@plt+0x254f4>
   38294:	ldr	r1, [sp, #16]
   38298:	ldr	r3, [sp, #36]	; 0x24
   3829c:	ldr	r2, [sp, #32]
   382a0:	ldr	r0, [r1, #4]
   382a4:	add	r3, r3, #1
   382a8:	cmp	r3, r0
   382ac:	blt	37bf0 <__assert_fail@plt+0x25034>
   382b0:	mov	r0, #0
   382b4:	str	r0, [fp, #-32]	; 0xffffffe0
   382b8:	sub	sp, fp, #28
   382bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   382c0:	mov	r5, r0
   382c4:	str	r5, [fp, #-32]	; 0xffffffe0
   382c8:	mov	r0, r5
   382cc:	b	382b8 <__assert_fail@plt+0x256fc>
   382d0:	mov	r5, #12
   382d4:	b	382c4 <__assert_fail@plt+0x25708>
   382d8:	mov	r1, r0
   382dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   382e0:	mov	r4, r1
   382e4:	bl	2c048 <__assert_fail@plt+0x1948c>
   382e8:	mov	r0, r4
   382ec:	b	382b8 <__assert_fail@plt+0x256fc>
   382f0:	push	{r4, r5, fp, lr}
   382f4:	add	fp, sp, #8
   382f8:	mov	r4, r0
   382fc:	ldr	r0, [r0, #36]	; 0x24
   38300:	mov	r5, #12
   38304:	cmn	r0, #-536870910	; 0xe0000002
   38308:	bhi	383c0 <__assert_fail@plt+0x25804>
   3830c:	ldr	r2, [r4, #48]	; 0x30
   38310:	cmp	r2, r0, lsl #1
   38314:	lslge	r2, r0, #1
   38318:	mov	r0, r4
   3831c:	cmp	r2, r1
   38320:	movle	r2, r1
   38324:	mov	r1, r2
   38328:	bl	322f8 <__assert_fail@plt+0x1f73c>
   3832c:	cmp	r0, #0
   38330:	bne	38384 <__assert_fail@plt+0x257c8>
   38334:	ldr	r0, [r4, #100]	; 0x64
   38338:	cmp	r0, #0
   3833c:	beq	3835c <__assert_fail@plt+0x257a0>
   38340:	ldr	r1, [r4, #36]	; 0x24
   38344:	mov	r2, #4
   38348:	add	r1, r2, r1, lsl #2
   3834c:	bl	2ecdc <__assert_fail@plt+0x1c120>
   38350:	cmp	r0, #0
   38354:	beq	383c0 <__assert_fail@plt+0x25804>
   38358:	str	r0, [r4, #100]	; 0x64
   3835c:	ldrb	r1, [r4, #72]	; 0x48
   38360:	ldr	r0, [r4, #80]	; 0x50
   38364:	cmp	r1, #0
   38368:	beq	3838c <__assert_fail@plt+0x257d0>
   3836c:	cmp	r0, #2
   38370:	blt	383a0 <__assert_fail@plt+0x257e4>
   38374:	mov	r0, r4
   38378:	bl	32398 <__assert_fail@plt+0x1f7dc>
   3837c:	cmp	r0, #0
   38380:	beq	383bc <__assert_fail@plt+0x25800>
   38384:	mov	r5, r0
   38388:	b	383c0 <__assert_fail@plt+0x25804>
   3838c:	cmp	r0, #2
   38390:	blt	383ac <__assert_fail@plt+0x257f0>
   38394:	mov	r0, r4
   38398:	bl	32974 <__assert_fail@plt+0x1fdb8>
   3839c:	b	383bc <__assert_fail@plt+0x25800>
   383a0:	mov	r0, r4
   383a4:	bl	32908 <__assert_fail@plt+0x1fd4c>
   383a8:	b	383bc <__assert_fail@plt+0x25800>
   383ac:	ldr	r0, [r4, #64]	; 0x40
   383b0:	cmp	r0, #0
   383b4:	movne	r0, r4
   383b8:	blne	32b50 <__assert_fail@plt+0x1ff94>
   383bc:	mov	r5, #0
   383c0:	mov	r0, r5
   383c4:	pop	{r4, r5, fp, pc}
   383c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   383cc:	add	fp, sp, #24
   383d0:	sub	sp, sp, #16
   383d4:	mov	r8, r0
   383d8:	mov	r4, r1
   383dc:	ldr	r5, [r1, #40]	; 0x28
   383e0:	ldr	r7, [r1, #84]	; 0x54
   383e4:	ldr	r0, [r1, #100]	; 0x64
   383e8:	ldr	r1, [r1, #104]	; 0x68
   383ec:	mov	r6, r2
   383f0:	cmp	r5, r1
   383f4:	ble	38404 <__assert_fail@plt+0x25848>
   383f8:	str	r6, [r0, r5, lsl #2]
   383fc:	str	r5, [r4, #104]	; 0x68
   38400:	b	384a8 <__assert_fail@plt+0x258ec>
   38404:	ldr	r1, [r0, r5, lsl #2]
   38408:	cmp	r1, #0
   3840c:	beq	38448 <__assert_fail@plt+0x2588c>
   38410:	ldr	r2, [r1, #40]	; 0x28
   38414:	cmp	r6, #0
   38418:	beq	38450 <__assert_fail@plt+0x25894>
   3841c:	ldr	r6, [r6, #40]	; 0x28
   38420:	mov	r0, sp
   38424:	mov	r1, r6
   38428:	bl	3851c <__assert_fail@plt+0x25960>
   3842c:	cmp	r0, #0
   38430:	str	r0, [r8]
   38434:	bne	38514 <__assert_fail@plt+0x25958>
   38438:	ldr	r0, [r4, #40]	; 0x28
   3843c:	clz	r1, r6
   38440:	lsr	r9, r1, #5
   38444:	b	38468 <__assert_fail@plt+0x258ac>
   38448:	str	r6, [r0, r5, lsl #2]
   3844c:	b	384a8 <__assert_fail@plt+0x258ec>
   38450:	ldr	r0, [r2, #8]
   38454:	vldr	d16, [r2]
   38458:	mov	r9, #1
   3845c:	str	r0, [sp, #8]
   38460:	mov	r0, r5
   38464:	vstr	d16, [sp]
   38468:	ldr	r2, [r4, #88]	; 0x58
   3846c:	sub	r1, r0, #1
   38470:	mov	r0, r4
   38474:	bl	379e0 <__assert_fail@plt+0x24e24>
   38478:	mov	r3, r0
   3847c:	mov	r2, sp
   38480:	mov	r0, r8
   38484:	mov	r1, r7
   38488:	bl	36d70 <__assert_fail@plt+0x241b4>
   3848c:	mov	r6, r0
   38490:	ldr	r0, [r4, #100]	; 0x64
   38494:	cmp	r9, #0
   38498:	str	r6, [r0, r5, lsl #2]
   3849c:	bne	384a8 <__assert_fail@plt+0x258ec>
   384a0:	ldr	r0, [sp, #8]
   384a4:	bl	2c048 <__assert_fail@plt+0x1948c>
   384a8:	cmp	r6, #0
   384ac:	ldrne	r0, [r7, #76]	; 0x4c
   384b0:	cmpne	r0, #0
   384b4:	bne	384c4 <__assert_fail@plt+0x25908>
   384b8:	mov	r0, r6
   384bc:	sub	sp, fp, #24
   384c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   384c4:	add	r7, r6, #4
   384c8:	mov	r0, r4
   384cc:	mov	r2, r5
   384d0:	mov	r1, r7
   384d4:	bl	37ac0 <__assert_fail@plt+0x24f04>
   384d8:	cmp	r0, #0
   384dc:	str	r0, [r8]
   384e0:	bne	38514 <__assert_fail@plt+0x25958>
   384e4:	ldrb	r0, [r6, #52]	; 0x34
   384e8:	tst	r0, #64	; 0x40
   384ec:	beq	384b8 <__assert_fail@plt+0x258fc>
   384f0:	mov	r0, r4
   384f4:	mov	r1, r7
   384f8:	bl	37bb8 <__assert_fail@plt+0x24ffc>
   384fc:	str	r0, [r8]
   38500:	cmp	r0, #0
   38504:	mov	r6, #0
   38508:	ldreq	r0, [r4, #100]	; 0x64
   3850c:	ldreq	r6, [r0, r5, lsl #2]
   38510:	b	384b8 <__assert_fail@plt+0x258fc>
   38514:	mov	r6, #0
   38518:	b	384b8 <__assert_fail@plt+0x258fc>
   3851c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38520:	add	fp, sp, #28
   38524:	sub	sp, sp, #20
   38528:	mov	r8, r2
   3852c:	cmp	r1, #0
   38530:	str	r0, [sp, #16]
   38534:	beq	3856c <__assert_fail@plt+0x259b0>
   38538:	ldr	r0, [r1, #4]
   3853c:	mov	r6, r1
   38540:	cmp	r8, #0
   38544:	beq	38558 <__assert_fail@plt+0x2599c>
   38548:	cmp	r0, #1
   3854c:	ldrge	r1, [r8, #4]
   38550:	cmpge	r1, #1
   38554:	bge	385ac <__assert_fail@plt+0x259f0>
   38558:	cmp	r0, #1
   3855c:	blt	3856c <__assert_fail@plt+0x259b0>
   38560:	ldr	r0, [sp, #16]
   38564:	mov	r1, r6
   38568:	b	38588 <__assert_fail@plt+0x259cc>
   3856c:	cmp	r8, #0
   38570:	beq	38594 <__assert_fail@plt+0x259d8>
   38574:	ldr	r0, [r8, #4]
   38578:	cmp	r0, #1
   3857c:	blt	38594 <__assert_fail@plt+0x259d8>
   38580:	ldr	r0, [sp, #16]
   38584:	mov	r1, r8
   38588:	sub	sp, fp, #28
   3858c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38590:	b	36c90 <__assert_fail@plt+0x240d4>
   38594:	ldr	r1, [sp, #16]
   38598:	mov	r0, #0
   3859c:	str	r0, [r1]
   385a0:	str	r0, [r1, #4]
   385a4:	str	r0, [r1, #8]
   385a8:	b	38710 <__assert_fail@plt+0x25b54>
   385ac:	ldr	r4, [sp, #16]
   385b0:	add	r0, r1, r0
   385b4:	str	r0, [r4]
   385b8:	lsl	r0, r0, #2
   385bc:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   385c0:	cmp	r0, #0
   385c4:	str	r0, [r4, #8]
   385c8:	beq	38718 <__assert_fail@plt+0x25b5c>
   385cc:	ldr	r9, [r8, #4]
   385d0:	ldr	lr, [r6, #4]
   385d4:	mov	r1, #0
   385d8:	mov	r7, #0
   385dc:	cmp	r9, #0
   385e0:	movwgt	r1, #1
   385e4:	cmp	lr, #1
   385e8:	blt	386ac <__assert_fail@plt+0x25af0>
   385ec:	mov	r2, #0
   385f0:	mov	ip, #0
   385f4:	str	r2, [sp, #8]
   385f8:	mov	r2, #0
   385fc:	str	r2, [sp, #12]
   38600:	mov	r2, #0
   38604:	ldr	r4, [sp, #12]
   38608:	mov	r7, ip
   3860c:	tst	r1, #1
   38610:	beq	386dc <__assert_fail@plt+0x25b20>
   38614:	ldr	r1, [r8, #8]
   38618:	ldr	r3, [r1, r7, lsl #2]
   3861c:	ldr	r1, [r6, #8]
   38620:	ldr	sl, [r1, r2, lsl #2]
   38624:	cmp	sl, r3
   38628:	ble	38650 <__assert_fail@plt+0x25a94>
   3862c:	add	r7, r7, #1
   38630:	mov	r1, #0
   38634:	str	r3, [r0, r4, lsl #2]
   38638:	add	r4, r4, #1
   3863c:	cmp	r9, r7
   38640:	movwgt	r1, #1
   38644:	cmp	lr, r2
   38648:	bgt	3860c <__assert_fail@plt+0x25a50>
   3864c:	b	386b0 <__assert_fail@plt+0x25af4>
   38650:	add	r1, r7, #1
   38654:	str	sl, [r0, r4, lsl #2]
   38658:	mov	ip, r7
   3865c:	add	r2, r2, #1
   38660:	str	r1, [sp, #4]
   38664:	ldr	r9, [r8, #4]
   38668:	ldr	lr, [r6, #4]
   3866c:	moveq	ip, r1
   38670:	mov	r1, #0
   38674:	ldr	r5, [sp, #8]
   38678:	cmp	r9, ip
   3867c:	sub	r5, r5, #1
   38680:	movwgt	r1, #1
   38684:	cmp	lr, r2
   38688:	str	r5, [sp, #8]
   3868c:	add	r5, r4, #1
   38690:	str	r5, [sp, #12]
   38694:	bgt	38604 <__assert_fail@plt+0x25a48>
   38698:	ldr	r2, [sp, #4]
   3869c:	cmp	sl, r3
   386a0:	add	r4, r4, #1
   386a4:	moveq	r7, r2
   386a8:	b	386b0 <__assert_fail@plt+0x25af4>
   386ac:	mov	r4, #0
   386b0:	cmp	r1, #0
   386b4:	beq	38704 <__assert_fail@plt+0x25b48>
   386b8:	ldr	r1, [r8, #8]
   386bc:	sub	r2, r9, r7
   386c0:	add	r0, r0, r4, lsl #2
   386c4:	lsl	r2, r2, #2
   386c8:	add	r1, r1, r7, lsl #2
   386cc:	bl	125c8 <memcpy@plt>
   386d0:	sub	r0, r4, r7
   386d4:	add	r4, r0, r9
   386d8:	b	38704 <__assert_fail@plt+0x25b48>
   386dc:	ldr	r1, [r6, #8]
   386e0:	add	r0, r0, r4, lsl #2
   386e4:	add	r1, r1, r2, lsl #2
   386e8:	sub	r2, lr, r2
   386ec:	lsl	r2, r2, #2
   386f0:	bl	125c8 <memcpy@plt>
   386f4:	ldr	r0, [r6, #4]
   386f8:	ldr	r1, [sp, #8]
   386fc:	add	r0, r0, r1
   38700:	add	r4, r0, r4
   38704:	ldr	r0, [sp, #16]
   38708:	str	r4, [r0, #4]
   3870c:	mov	r0, #0
   38710:	sub	sp, fp, #28
   38714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38718:	mov	r0, #12
   3871c:	b	38710 <__assert_fail@plt+0x25b54>
   38720:	push	{r4, r5, r6, r7, fp, lr}
   38724:	add	fp, sp, #16
   38728:	ldr	lr, [r0, #108]	; 0x6c
   3872c:	mov	ip, r0
   38730:	cmp	lr, #1
   38734:	blt	38778 <__assert_fail@plt+0x25bbc>
   38738:	ldr	r2, [ip, #116]	; 0x74
   3873c:	mov	r0, #0
   38740:	mov	r3, #1
   38744:	mov	r4, lr
   38748:	add	r5, r0, r4
   3874c:	add	r5, r5, r5, lsr #31
   38750:	asr	r6, r5, #1
   38754:	add	r7, r6, r6, lsl #1
   38758:	add	r7, r2, r7, lsl #3
   3875c:	ldr	r7, [r7, #4]
   38760:	cmp	r7, r1
   38764:	addlt	r0, r3, r5, asr #1
   38768:	movge	r4, r6
   3876c:	cmp	r0, r4
   38770:	blt	38748 <__assert_fail@plt+0x25b8c>
   38774:	b	3877c <__assert_fail@plt+0x25bc0>
   38778:	mov	r0, #0
   3877c:	cmp	r0, lr
   38780:	bge	387a0 <__assert_fail@plt+0x25be4>
   38784:	ldr	r2, [ip, #116]	; 0x74
   38788:	add	r3, r0, r0, lsl #1
   3878c:	add	r2, r2, r3, lsl #3
   38790:	ldr	r2, [r2, #4]
   38794:	cmp	r2, r1
   38798:	mvnne	r0, #0
   3879c:	pop	{r4, r5, r6, r7, fp, pc}
   387a0:	mvn	r0, #0
   387a4:	pop	{r4, r5, r6, r7, fp, pc}
   387a8:	push	{r4, r5, r6, r7, fp, lr}
   387ac:	add	fp, sp, #16
   387b0:	mov	r5, r0
   387b4:	ldr	r0, [r0, #36]	; 0x24
   387b8:	mov	r4, r1
   387bc:	ldr	r7, [r5, #104]	; 0x68
   387c0:	cmp	r0, r1
   387c4:	ldrle	r1, [r5, #48]	; 0x30
   387c8:	cmple	r0, r1
   387cc:	blt	38818 <__assert_fail@plt+0x25c5c>
   387d0:	ldr	r0, [r5, #28]
   387d4:	cmp	r0, r4
   387d8:	ldrle	r1, [r5, #48]	; 0x30
   387dc:	cmple	r0, r1
   387e0:	blt	38818 <__assert_fail@plt+0x25c5c>
   387e4:	mov	r6, #0
   387e8:	cmp	r7, r4
   387ec:	bge	38830 <__assert_fail@plt+0x25c74>
   387f0:	sub	r0, r4, r7
   387f4:	mov	r1, #0
   387f8:	mov	r6, #0
   387fc:	lsl	r2, r0, #2
   38800:	ldr	r0, [r5, #100]	; 0x64
   38804:	add	r0, r0, r7, lsl #2
   38808:	add	r0, r0, #4
   3880c:	bl	12904 <memset@plt>
   38810:	str	r4, [r5, #104]	; 0x68
   38814:	b	38830 <__assert_fail@plt+0x25c74>
   38818:	add	r1, r4, #1
   3881c:	mov	r0, r5
   38820:	bl	382f0 <__assert_fail@plt+0x25734>
   38824:	mov	r6, r0
   38828:	cmp	r0, #0
   3882c:	beq	387e4 <__assert_fail@plt+0x25c28>
   38830:	mov	r0, r6
   38834:	pop	{r4, r5, r6, r7, fp, pc}
   38838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3883c:	add	fp, sp, #28
   38840:	sub	sp, sp, #12
   38844:	mov	r6, r2
   38848:	mov	r4, r0
   3884c:	mov	r0, #8
   38850:	mov	r7, r3
   38854:	ldr	r2, [r2]
   38858:	mov	r8, r1
   3885c:	ldr	r3, [r6, #4]
   38860:	str	r0, [sp, #8]
   38864:	add	r1, r6, #8
   38868:	mov	r0, r4
   3886c:	ldr	r5, [fp, #8]
   38870:	str	r7, [sp]
   38874:	str	r5, [sp, #4]
   38878:	bl	38988 <__assert_fail@plt+0x25dcc>
   3887c:	cmp	r0, #0
   38880:	beq	3888c <__assert_fail@plt+0x25cd0>
   38884:	sub	sp, fp, #28
   38888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3888c:	ldr	r0, [r4, #108]	; 0x6c
   38890:	ldr	r1, [r4, #112]	; 0x70
   38894:	ldr	r9, [r6, #4]
   38898:	ldr	sl, [r8]
   3889c:	cmp	r0, r1
   388a0:	blt	388f0 <__assert_fail@plt+0x25d34>
   388a4:	ldr	r0, [r4, #116]	; 0x74
   388a8:	add	r1, r1, r1, lsl #1
   388ac:	lsl	r1, r1, #4
   388b0:	bl	2ecdc <__assert_fail@plt+0x1c120>
   388b4:	cmp	r0, #0
   388b8:	beq	38978 <__assert_fail@plt+0x25dbc>
   388bc:	str	r0, [r4, #116]	; 0x74
   388c0:	ldr	r1, [r4, #108]	; 0x6c
   388c4:	ldr	r2, [r4, #112]	; 0x70
   388c8:	add	r1, r1, r1, lsl #1
   388cc:	add	r0, r0, r1, lsl #3
   388d0:	add	r1, r2, r2, lsl #1
   388d4:	lsl	r2, r1, #3
   388d8:	mov	r1, #0
   388dc:	bl	12904 <memset@plt>
   388e0:	ldr	r1, [r4, #112]	; 0x70
   388e4:	ldr	r0, [r4, #108]	; 0x6c
   388e8:	lsl	r1, r1, #1
   388ec:	str	r1, [r4, #112]	; 0x70
   388f0:	ldr	r1, [r4, #116]	; 0x74
   388f4:	cmp	r0, #1
   388f8:	blt	38918 <__assert_fail@plt+0x25d5c>
   388fc:	sub	r2, r0, #1
   38900:	add	r2, r2, r2, lsl #1
   38904:	add	r2, r1, r2, lsl #3
   38908:	ldr	r3, [r2, #4]
   3890c:	cmp	r3, r5
   38910:	moveq	r3, #1
   38914:	strbeq	r3, [r2, #20]
   38918:	add	r2, r0, r0, lsl #1
   3891c:	cmp	r9, sl
   38920:	mov	r3, #0
   38924:	add	r0, r0, #1
   38928:	str	r7, [r1, r2, lsl #3]!
   3892c:	mov	r2, #0
   38930:	mvneq	r3, #0
   38934:	stmib	r1, {r5, sl}
   38938:	str	r9, [r1, #12]
   3893c:	str	r3, [r1, #16]
   38940:	str	r0, [r4, #108]	; 0x6c
   38944:	strb	r2, [r1, #20]
   38948:	sub	r0, r9, sl
   3894c:	ldr	r1, [r4, #120]	; 0x78
   38950:	cmp	r1, r0
   38954:	strlt	r0, [r4, #120]	; 0x78
   38958:	ldr	r0, [r6, #4]
   3895c:	ldr	r1, [r8]
   38960:	add	r0, r0, r5
   38964:	sub	r1, r0, r1
   38968:	mov	r0, r4
   3896c:	sub	sp, fp, #28
   38970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38974:	b	387a8 <__assert_fail@plt+0x25bec>
   38978:	ldr	r0, [r4, #116]	; 0x74
   3897c:	bl	2c048 <__assert_fail@plt+0x1948c>
   38980:	mov	r0, #12
   38984:	b	38884 <__assert_fail@plt+0x25cc8>
   38988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3898c:	add	fp, sp, #28
   38990:	sub	sp, sp, #84	; 0x54
   38994:	ldr	r9, [r0, #84]	; 0x54
   38998:	mov	r6, r3
   3899c:	mov	r3, r1
   389a0:	mov	r1, #0
   389a4:	str	r0, [sp, #44]	; 0x2c
   389a8:	ldr	sl, [fp, #12]
   389ac:	mov	r8, r2
   389b0:	str	r1, [fp, #-52]	; 0xffffffcc
   389b4:	ldr	r0, [r0, #120]	; 0x78
   389b8:	ldr	r5, [r3, #4]
   389bc:	ldr	r1, [r9]
   389c0:	str	r9, [sp, #20]
   389c4:	add	r0, r0, sl
   389c8:	cmp	r5, r0
   389cc:	ldr	r1, [r1, r2, lsl #3]
   389d0:	str	r1, [sp, #24]
   389d4:	ble	38ea8 <__assert_fail@plt+0x262ec>
   389d8:	add	r4, r3, #8
   389dc:	ldr	r0, [sp, #44]	; 0x2c
   389e0:	ldr	r5, [r3]
   389e4:	ldr	r4, [r4]
   389e8:	str	r3, [sp, #16]
   389ec:	ldr	r1, [r0, #40]	; 0x28
   389f0:	ldr	r2, [r0, #88]	; 0x58
   389f4:	cmp	r5, #0
   389f8:	moveq	r5, r6
   389fc:	str	r1, [sp, #12]
   38a00:	ldr	r1, [r0, #100]	; 0x64
   38a04:	str	r4, [r0, #100]	; 0x64
   38a08:	str	r5, [r0, #40]	; 0x28
   38a0c:	str	r1, [sp, #8]
   38a10:	sub	r1, r5, #1
   38a14:	bl	379e0 <__assert_fail@plt+0x24e24>
   38a18:	mov	r7, r0
   38a1c:	cmp	r5, r6
   38a20:	bne	38aec <__assert_fail@plt+0x25f30>
   38a24:	mov	r0, #1
   38a28:	str	r0, [sp, #52]	; 0x34
   38a2c:	str	r0, [sp, #48]	; 0x30
   38a30:	mov	r0, #4
   38a34:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   38a38:	cmp	r0, #0
   38a3c:	str	r0, [sp, #56]	; 0x38
   38a40:	beq	38f2c <__assert_fail@plt+0x26370>
   38a44:	ldr	r6, [sp, #24]
   38a48:	ldr	r4, [fp, #16]
   38a4c:	str	r8, [r0]
   38a50:	mov	r0, #0
   38a54:	add	r1, sp, #48	; 0x30
   38a58:	str	r7, [sp, #40]	; 0x28
   38a5c:	str	r0, [fp, #-52]	; 0xffffffcc
   38a60:	mov	r0, r9
   38a64:	mov	r2, r6
   38a68:	mov	r3, r4
   38a6c:	bl	38f4c <__assert_fail@plt+0x26390>
   38a70:	ldr	r8, [sp, #44]	; 0x2c
   38a74:	cmp	r0, #0
   38a78:	str	r0, [fp, #-52]	; 0xffffffcc
   38a7c:	bne	38f1c <__assert_fail@plt+0x26360>
   38a80:	ldr	r0, [sp, #52]	; 0x34
   38a84:	cmp	r0, #0
   38a88:	beq	38ab0 <__assert_fail@plt+0x25ef4>
   38a8c:	add	r1, sp, #48	; 0x30
   38a90:	mov	r0, r8
   38a94:	mov	r2, r5
   38a98:	mov	r3, r6
   38a9c:	str	r4, [sp]
   38aa0:	bl	39084 <__assert_fail@plt+0x264c8>
   38aa4:	cmp	r0, #0
   38aa8:	str	r0, [fp, #-52]	; 0xffffffcc
   38aac:	bne	38f1c <__assert_fail@plt+0x26360>
   38ab0:	ldr	r3, [sp, #40]	; 0x28
   38ab4:	sub	r0, fp, #52	; 0x34
   38ab8:	add	r2, sp, #48	; 0x30
   38abc:	mov	r1, r9
   38ac0:	bl	36d70 <__assert_fail@plt+0x241b4>
   38ac4:	mov	r6, r0
   38ac8:	cmp	r0, #0
   38acc:	bne	38adc <__assert_fail@plt+0x25f20>
   38ad0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   38ad4:	cmp	r0, #0
   38ad8:	bne	38e98 <__assert_fail@plt+0x262dc>
   38adc:	ldr	r0, [r8, #100]	; 0x64
   38ae0:	mov	r4, r5
   38ae4:	str	r6, [r0, r5, lsl #2]
   38ae8:	b	38b60 <__assert_fail@plt+0x25fa4>
   38aec:	ldr	r6, [r4, r5, lsl #2]
   38af0:	mov	r4, r5
   38af4:	cmp	r6, #0
   38af8:	beq	38b20 <__assert_fail@plt+0x25f64>
   38afc:	ldrb	r0, [r6, #52]	; 0x34
   38b00:	ldr	r8, [sp, #44]	; 0x2c
   38b04:	tst	r0, #64	; 0x40
   38b08:	bne	38b38 <__assert_fail@plt+0x25f7c>
   38b0c:	mov	r0, #0
   38b10:	str	r0, [sp, #52]	; 0x34
   38b14:	str	r0, [sp, #48]	; 0x30
   38b18:	str	r0, [sp, #56]	; 0x38
   38b1c:	b	38b60 <__assert_fail@plt+0x25fa4>
   38b20:	ldr	r8, [sp, #44]	; 0x2c
   38b24:	mov	r6, #0
   38b28:	str	r6, [sp, #52]	; 0x34
   38b2c:	str	r6, [sp, #48]	; 0x30
   38b30:	str	r6, [sp, #56]	; 0x38
   38b34:	b	38b60 <__assert_fail@plt+0x25fa4>
   38b38:	add	r1, r6, #4
   38b3c:	add	r0, sp, #48	; 0x30
   38b40:	str	r7, [sp, #40]	; 0x28
   38b44:	bl	36c90 <__assert_fail@plt+0x240d4>
   38b48:	cmp	r0, #0
   38b4c:	str	r0, [fp, #-52]	; 0xffffffcc
   38b50:	bne	38f44 <__assert_fail@plt+0x26388>
   38b54:	ldrb	r0, [r6, #52]	; 0x34
   38b58:	tst	r0, #64	; 0x40
   38b5c:	bne	38e68 <__assert_fail@plt+0x262ac>
   38b60:	cmp	r4, sl
   38b64:	bge	38e04 <__assert_fail@plt+0x26248>
   38b68:	add	r5, sp, #48	; 0x30
   38b6c:	mov	r2, #0
   38b70:	ldr	r0, [r8, #120]	; 0x78
   38b74:	cmp	r2, r0
   38b78:	bgt	38e04 <__assert_fail@plt+0x26248>
   38b7c:	mov	r0, #0
   38b80:	add	r1, r4, #1
   38b84:	str	r2, [sp, #28]
   38b88:	str	r0, [sp, #52]	; 0x34
   38b8c:	str	r1, [sp, #32]
   38b90:	ldr	r0, [r8, #100]	; 0x64
   38b94:	ldr	r0, [r0, r1, lsl #2]
   38b98:	cmp	r0, #0
   38b9c:	beq	38bb8 <__assert_fail@plt+0x25ffc>
   38ba0:	add	r1, r0, #4
   38ba4:	mov	r0, r5
   38ba8:	bl	368e0 <__assert_fail@plt+0x23d24>
   38bac:	cmp	r0, #0
   38bb0:	str	r0, [fp, #-52]	; 0xffffffcc
   38bb4:	bne	38e98 <__assert_fail@plt+0x262dc>
   38bb8:	cmp	r6, #0
   38bbc:	beq	38d38 <__assert_fail@plt+0x2617c>
   38bc0:	mov	r0, #0
   38bc4:	ldr	r7, [r8, #84]	; 0x54
   38bc8:	str	r0, [fp, #-32]	; 0xffffffe0
   38bcc:	str	r0, [fp, #-44]	; 0xffffffd4
   38bd0:	str	r0, [fp, #-48]	; 0xffffffd0
   38bd4:	str	r0, [fp, #-40]	; 0xffffffd8
   38bd8:	ldr	r1, [r6, #20]
   38bdc:	cmp	r1, #1
   38be0:	blt	38d28 <__assert_fail@plt+0x2616c>
   38be4:	mov	r5, #0
   38be8:	str	r4, [sp, #40]	; 0x28
   38bec:	str	r6, [sp, #36]	; 0x24
   38bf0:	b	38bfc <__assert_fail@plt+0x26040>
   38bf4:	ldr	r0, [r7]
   38bf8:	b	38c18 <__assert_fail@plt+0x2605c>
   38bfc:	ldr	r0, [r6, #24]
   38c00:	ldr	sl, [r0, r5, lsl #2]
   38c04:	ldr	r0, [r7]
   38c08:	add	r1, r0, sl, lsl #3
   38c0c:	ldrb	r1, [r1, #6]
   38c10:	tst	r1, #16
   38c14:	bne	38c34 <__assert_fail@plt+0x26078>
   38c18:	add	r1, r0, sl, lsl #3
   38c1c:	mov	r0, r8
   38c20:	mov	r2, r4
   38c24:	bl	39958 <__assert_fail@plt+0x26d9c>
   38c28:	cmp	r0, #0
   38c2c:	bne	38cf0 <__assert_fail@plt+0x26134>
   38c30:	b	38d08 <__assert_fail@plt+0x2614c>
   38c34:	mov	r0, r7
   38c38:	mov	r1, sl
   38c3c:	mov	r2, r8
   38c40:	mov	r3, r4
   38c44:	bl	39668 <__assert_fail@plt+0x26aac>
   38c48:	cmp	r0, #2
   38c4c:	blt	38ce8 <__assert_fail@plt+0x2612c>
   38c50:	add	r4, r0, r4
   38c54:	ldr	r0, [r8, #100]	; 0x64
   38c58:	ldr	r1, [r7, #12]
   38c5c:	sub	r8, fp, #48	; 0x30
   38c60:	ldr	r0, [r0, r4, lsl #2]
   38c64:	ldr	r6, [r1, sl, lsl #2]
   38c68:	mov	r1, #0
   38c6c:	str	r1, [fp, #-44]	; 0xffffffd4
   38c70:	cmp	r0, #0
   38c74:	beq	38c90 <__assert_fail@plt+0x260d4>
   38c78:	add	r1, r0, #4
   38c7c:	mov	r0, r8
   38c80:	bl	368e0 <__assert_fail@plt+0x23d24>
   38c84:	cmp	r0, #0
   38c88:	str	r0, [fp, #-32]	; 0xffffffe0
   38c8c:	bne	38e88 <__assert_fail@plt+0x262cc>
   38c90:	mov	r0, r8
   38c94:	mov	r1, r6
   38c98:	bl	36af4 <__assert_fail@plt+0x23f38>
   38c9c:	cmp	r0, #0
   38ca0:	beq	38e78 <__assert_fail@plt+0x262bc>
   38ca4:	sub	r0, fp, #32
   38ca8:	mov	r1, r7
   38cac:	mov	r2, r8
   38cb0:	bl	3946c <__assert_fail@plt+0x268b0>
   38cb4:	ldr	r8, [sp, #44]	; 0x2c
   38cb8:	ldr	r6, [sp, #36]	; 0x24
   38cbc:	ldr	r1, [r8, #100]	; 0x64
   38cc0:	str	r0, [r1, r4, lsl #2]
   38cc4:	ldr	r0, [r8, #100]	; 0x64
   38cc8:	ldr	r0, [r0, r4, lsl #2]
   38ccc:	ldr	r4, [sp, #40]	; 0x28
   38cd0:	cmp	r0, #0
   38cd4:	bne	38cf0 <__assert_fail@plt+0x26134>
   38cd8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   38cdc:	cmp	r9, #0
   38ce0:	beq	38cf0 <__assert_fail@plt+0x26134>
   38ce4:	b	38e8c <__assert_fail@plt+0x262d0>
   38ce8:	cmp	r0, #0
   38cec:	beq	38bf4 <__assert_fail@plt+0x26038>
   38cf0:	ldr	r0, [r7, #12]
   38cf4:	ldr	r1, [r0, sl, lsl #2]
   38cf8:	add	r0, sp, #48	; 0x30
   38cfc:	bl	36af4 <__assert_fail@plt+0x23f38>
   38d00:	cmp	r0, #0
   38d04:	beq	38e78 <__assert_fail@plt+0x262bc>
   38d08:	ldr	r0, [r6, #20]
   38d0c:	add	r5, r5, #1
   38d10:	cmp	r5, r0
   38d14:	blt	38bfc <__assert_fail@plt+0x26040>
   38d18:	ldr	r5, [fp, #12]
   38d1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   38d20:	ldr	r9, [sp, #20]
   38d24:	mov	sl, r5
   38d28:	bl	2c048 <__assert_fail@plt+0x1948c>
   38d2c:	mov	r0, #0
   38d30:	add	r5, sp, #48	; 0x30
   38d34:	str	r0, [fp, #-52]	; 0xffffffcc
   38d38:	ldr	r0, [sp, #52]	; 0x34
   38d3c:	cmp	r0, #0
   38d40:	beq	38d98 <__assert_fail@plt+0x261dc>
   38d44:	mov	r6, r4
   38d48:	ldr	r4, [sp, #24]
   38d4c:	ldr	r7, [fp, #16]
   38d50:	mov	r0, r9
   38d54:	mov	r1, r5
   38d58:	mov	r2, r4
   38d5c:	mov	r3, r7
   38d60:	bl	38f4c <__assert_fail@plt+0x26390>
   38d64:	cmp	r0, #0
   38d68:	str	r0, [fp, #-52]	; 0xffffffcc
   38d6c:	bne	38e98 <__assert_fail@plt+0x262dc>
   38d70:	ldr	r2, [sp, #32]
   38d74:	mov	r0, r8
   38d78:	mov	r1, r5
   38d7c:	mov	r3, r4
   38d80:	str	r7, [sp]
   38d84:	bl	39084 <__assert_fail@plt+0x264c8>
   38d88:	cmp	r0, #0
   38d8c:	mov	r4, r6
   38d90:	str	r0, [fp, #-52]	; 0xffffffcc
   38d94:	bne	38e98 <__assert_fail@plt+0x262dc>
   38d98:	ldr	r2, [r8, #88]	; 0x58
   38d9c:	mov	r0, r8
   38da0:	mov	r1, r4
   38da4:	bl	379e0 <__assert_fail@plt+0x24e24>
   38da8:	mov	r3, r0
   38dac:	sub	r0, fp, #52	; 0x34
   38db0:	mov	r1, r9
   38db4:	mov	r2, r5
   38db8:	bl	36d70 <__assert_fail@plt+0x241b4>
   38dbc:	mov	r6, r0
   38dc0:	cmp	r0, #0
   38dc4:	bne	38dd4 <__assert_fail@plt+0x26218>
   38dc8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   38dcc:	cmp	r0, #0
   38dd0:	bne	38e98 <__assert_fail@plt+0x262dc>
   38dd4:	ldr	r1, [sp, #32]
   38dd8:	ldr	r0, [r8, #100]	; 0x64
   38ddc:	ldr	r2, [sp, #28]
   38de0:	cmp	r6, #0
   38de4:	str	r6, [r0, r1, lsl #2]
   38de8:	mov	r0, #0
   38dec:	mov	r4, r1
   38df0:	addeq	r0, r2, #1
   38df4:	cmp	r1, sl
   38df8:	mov	r2, r0
   38dfc:	blt	38b70 <__assert_fail@plt+0x25fb4>
   38e00:	b	38e08 <__assert_fail@plt+0x2624c>
   38e04:	mov	r1, r4
   38e08:	ldr	r0, [sp, #56]	; 0x38
   38e0c:	mov	r4, r1
   38e10:	bl	2c048 <__assert_fail@plt+0x1948c>
   38e14:	ldr	r0, [r8, #100]	; 0x64
   38e18:	ldr	r1, [sp, #16]
   38e1c:	ldr	r0, [r0, sl, lsl #2]
   38e20:	str	r4, [r1]
   38e24:	ldr	r1, [sp, #12]
   38e28:	str	r1, [r8, #40]	; 0x28
   38e2c:	ldr	r1, [sp, #8]
   38e30:	cmp	r0, #0
   38e34:	str	r1, [r8, #100]	; 0x64
   38e38:	beq	38e58 <__assert_fail@plt+0x2629c>
   38e3c:	ldr	r1, [fp, #8]
   38e40:	add	r0, r0, #4
   38e44:	bl	36d0c <__assert_fail@plt+0x24150>
   38e48:	mov	r7, #0
   38e4c:	cmp	r0, #0
   38e50:	moveq	r7, #1
   38e54:	b	38e5c <__assert_fail@plt+0x262a0>
   38e58:	mov	r7, #1
   38e5c:	mov	r0, r7
   38e60:	sub	sp, fp, #28
   38e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e68:	mov	r5, r4
   38e6c:	ldr	r6, [sp, #24]
   38e70:	ldr	r4, [fp, #16]
   38e74:	b	38a80 <__assert_fail@plt+0x25ec4>
   38e78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   38e7c:	bl	2c048 <__assert_fail@plt+0x1948c>
   38e80:	mov	r9, #12
   38e84:	b	38e94 <__assert_fail@plt+0x262d8>
   38e88:	mov	r9, r0
   38e8c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   38e90:	bl	2c048 <__assert_fail@plt+0x1948c>
   38e94:	str	r9, [fp, #-52]	; 0xffffffcc
   38e98:	ldr	r0, [sp, #56]	; 0x38
   38e9c:	bl	2c048 <__assert_fail@plt+0x1948c>
   38ea0:	ldr	r7, [fp, #-52]	; 0xffffffcc
   38ea4:	b	38e5c <__assert_fail@plt+0x262a0>
   38ea8:	mvn	r1, #-2147483648	; 0x80000000
   38eac:	mov	r7, #12
   38eb0:	sub	r1, r1, r5
   38eb4:	cmp	r1, r0
   38eb8:	ble	38e5c <__assert_fail@plt+0x262a0>
   38ebc:	add	r0, r0, #1
   38ec0:	add	sl, r0, r5
   38ec4:	str	r0, [sp, #40]	; 0x28
   38ec8:	cmn	sl, #-1073741823	; 0xc0000001
   38ecc:	bhi	38e5c <__assert_fail@plt+0x262a0>
   38ed0:	mov	r4, r3
   38ed4:	lsl	r1, sl, #2
   38ed8:	mov	r9, r3
   38edc:	ldr	r0, [r4, #8]!
   38ee0:	bl	2ecdc <__assert_fail@plt+0x1c120>
   38ee4:	cmp	r0, #0
   38ee8:	beq	38e5c <__assert_fail@plt+0x262a0>
   38eec:	ldr	r1, [sp, #40]	; 0x28
   38ef0:	str	sl, [r9, #4]
   38ef4:	str	r0, [r9, #8]
   38ef8:	add	r0, r0, r5, lsl #2
   38efc:	lsl	r2, r1, #2
   38f00:	mov	r1, #0
   38f04:	bl	12904 <memset@plt>
   38f08:	ldr	r5, [fp, #12]
   38f0c:	mov	r3, r9
   38f10:	ldr	r9, [sp, #20]
   38f14:	mov	sl, r5
   38f18:	b	389dc <__assert_fail@plt+0x25e20>
   38f1c:	mov	r7, r0
   38f20:	ldr	r0, [sp, #56]	; 0x38
   38f24:	bl	2c048 <__assert_fail@plt+0x1948c>
   38f28:	b	38e5c <__assert_fail@plt+0x262a0>
   38f2c:	mov	r0, #0
   38f30:	mov	r7, #12
   38f34:	str	r0, [sp, #48]	; 0x30
   38f38:	str	r0, [sp, #52]	; 0x34
   38f3c:	str	r7, [fp, #-52]	; 0xffffffcc
   38f40:	b	38e5c <__assert_fail@plt+0x262a0>
   38f44:	mov	r7, r0
   38f48:	b	38e5c <__assert_fail@plt+0x262a0>
   38f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38f50:	add	fp, sp, #28
   38f54:	sub	sp, sp, #28
   38f58:	str	r0, [sp, #12]
   38f5c:	ldr	r0, [r1, #4]
   38f60:	mov	r4, r1
   38f64:	mov	r1, #0
   38f68:	mov	sl, r3
   38f6c:	mov	r8, r2
   38f70:	str	r1, [sp, #20]
   38f74:	str	r0, [sp, #16]
   38f78:	lsl	r0, r0, #2
   38f7c:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   38f80:	cmp	r0, #0
   38f84:	str	r0, [sp, #24]
   38f88:	beq	3907c <__assert_fail@plt+0x264c0>
   38f8c:	ldr	r0, [r4, #4]
   38f90:	cmp	r0, #1
   38f94:	blt	39044 <__assert_fail@plt+0x26488>
   38f98:	mov	r9, #0
   38f9c:	str	r4, [sp, #8]
   38fa0:	b	38fc4 <__assert_fail@plt+0x26408>
   38fa4:	cmn	r4, #1
   38fa8:	beq	39020 <__assert_fail@plt+0x26464>
   38fac:	ldr	r0, [sp, #12]
   38fb0:	add	r1, sp, #16
   38fb4:	mov	r3, r8
   38fb8:	str	sl, [sp]
   38fbc:	bl	39368 <__assert_fail@plt+0x267ac>
   38fc0:	b	39028 <__assert_fail@plt+0x2646c>
   38fc4:	ldr	r0, [r4, #8]
   38fc8:	ldr	r1, [sp, #12]
   38fcc:	ldr	r2, [r0, r9, lsl #2]
   38fd0:	ldr	r1, [r1, #24]
   38fd4:	add	r0, r2, r2, lsl #1
   38fd8:	add	r1, r1, r0, lsl #2
   38fdc:	ldr	r0, [r1, #4]
   38fe0:	cmp	r0, #1
   38fe4:	blt	39020 <__assert_fail@plt+0x26464>
   38fe8:	ldr	r7, [sp, #12]
   38fec:	ldr	r3, [r1, #8]
   38ff0:	mov	r6, #0
   38ff4:	ldr	r7, [r7]
   38ff8:	ldr	r4, [r3, r6, lsl #2]
   38ffc:	add	r5, r7, r4, lsl #3
   39000:	ldrb	r5, [r5, #4]
   39004:	cmp	r5, sl
   39008:	ldreq	r5, [r7, r4, lsl #3]
   3900c:	cmpeq	r5, r8
   39010:	beq	38fa4 <__assert_fail@plt+0x263e8>
   39014:	add	r6, r6, #1
   39018:	cmp	r6, r0
   3901c:	blt	38ff8 <__assert_fail@plt+0x2643c>
   39020:	add	r0, sp, #16
   39024:	bl	368e0 <__assert_fail@plt+0x23d24>
   39028:	cmp	r0, #0
   3902c:	bne	3906c <__assert_fail@plt+0x264b0>
   39030:	ldr	r4, [sp, #8]
   39034:	add	r9, r9, #1
   39038:	ldr	r0, [r4, #4]
   3903c:	cmp	r9, r0
   39040:	blt	38fc4 <__assert_fail@plt+0x26408>
   39044:	ldr	r0, [r4, #8]
   39048:	bl	2c048 <__assert_fail@plt+0x1948c>
   3904c:	vldr	d16, [sp, #16]
   39050:	ldr	r0, [sp, #24]
   39054:	mov	r7, #0
   39058:	str	r0, [r4, #8]
   3905c:	vstr	d16, [r4]
   39060:	mov	r0, r7
   39064:	sub	sp, fp, #28
   39068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3906c:	mov	r7, r0
   39070:	ldr	r0, [sp, #24]
   39074:	bl	2c048 <__assert_fail@plt+0x1948c>
   39078:	b	39060 <__assert_fail@plt+0x264a4>
   3907c:	mov	r7, #12
   39080:	b	39060 <__assert_fail@plt+0x264a4>
   39084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39088:	add	fp, sp, #28
   3908c:	sub	sp, sp, #44	; 0x2c
   39090:	ldr	r6, [r0, #84]	; 0x54
   39094:	mov	r4, r1
   39098:	mov	r1, r2
   3909c:	str	r3, [sp, #4]
   390a0:	mov	r5, r2
   390a4:	str	r0, [sp, #24]
   390a8:	bl	38720 <__assert_fail@plt+0x25b64>
   390ac:	cmn	r0, #1
   390b0:	beq	3935c <__assert_fail@plt+0x267a0>
   390b4:	add	r1, r0, r0, lsl #1
   390b8:	str	r5, [sp, #16]
   390bc:	str	r6, [sp, #12]
   390c0:	str	r4, [sp, #8]
   390c4:	str	r1, [sp]
   390c8:	b	390d0 <__assert_fail@plt+0x26514>
   390cc:	ldr	r1, [sp]
   390d0:	ldr	r0, [sp, #24]
   390d4:	ldr	r0, [r0, #116]	; 0x74
   390d8:	add	r0, r0, r1, lsl #3
   390dc:	add	r0, r0, #8
   390e0:	ldr	r7, [r0, #-8]
   390e4:	mov	sl, r0
   390e8:	mov	r0, r4
   390ec:	mov	r1, r7
   390f0:	bl	36d0c <__assert_fail@plt+0x24150>
   390f4:	cmp	r0, #0
   390f8:	beq	392c0 <__assert_fail@plt+0x26704>
   390fc:	ldm	sl, {r0, r1}
   39100:	add	r1, r1, r5
   39104:	sub	r9, r1, r0
   39108:	cmp	r9, r5
   3910c:	bne	391b4 <__assert_fail@plt+0x265f8>
   39110:	ldr	r0, [r6, #20]
   39114:	add	r1, r7, r7, lsl #1
   39118:	add	r0, r0, r1, lsl #2
   3911c:	ldr	r0, [r0, #8]
   39120:	ldr	r7, [r0]
   39124:	mov	r0, r4
   39128:	mov	r1, r7
   3912c:	bl	36d0c <__assert_fail@plt+0x24150>
   39130:	mov	r1, #4
   39134:	cmp	r0, #0
   39138:	bne	391ac <__assert_fail@plt+0x265f0>
   3913c:	mov	r0, #1
   39140:	str	r0, [sp, #32]
   39144:	str	r0, [sp, #28]
   39148:	mov	r0, #4
   3914c:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   39150:	cmp	r0, #0
   39154:	str	r0, [sp, #36]	; 0x24
   39158:	beq	392d4 <__assert_fail@plt+0x26718>
   3915c:	mov	r5, #0
   39160:	str	r7, [r0]
   39164:	ldr	r2, [sp, #4]
   39168:	ldr	r3, [fp, #8]
   3916c:	add	r7, sp, #28
   39170:	mov	r0, r6
   39174:	str	r5, [fp, #-32]	; 0xffffffe0
   39178:	mov	r1, r7
   3917c:	bl	38f4c <__assert_fail@plt+0x26390>
   39180:	mov	r9, r0
   39184:	mov	r0, r4
   39188:	mov	r1, r7
   3918c:	bl	368e0 <__assert_fail@plt+0x23d24>
   39190:	mov	r8, r0
   39194:	ldr	r0, [sp, #36]	; 0x24
   39198:	bl	2c048 <__assert_fail@plt+0x1948c>
   3919c:	orr	r0, r9, r5
   391a0:	mov	r1, #2
   391a4:	orrs	r0, r0, r8
   391a8:	bne	392e8 <__assert_fail@plt+0x2672c>
   391ac:	ldr	r5, [sp, #16]
   391b0:	b	392b4 <__assert_fail@plt+0x266f8>
   391b4:	ldr	r0, [sp, #24]
   391b8:	ldr	r1, [r6, #12]
   391bc:	ldr	r0, [r0, #100]	; 0x64
   391c0:	ldr	r8, [r1, r7, lsl #2]
   391c4:	ldr	r0, [r0, r9, lsl #2]
   391c8:	cmp	r0, #0
   391cc:	beq	391f4 <__assert_fail@plt+0x26638>
   391d0:	add	r4, r0, #4
   391d4:	mov	r1, r8
   391d8:	mov	r0, r4
   391dc:	bl	36d0c <__assert_fail@plt+0x24150>
   391e0:	mov	r1, #4
   391e4:	cmp	r0, #0
   391e8:	beq	39224 <__assert_fail@plt+0x26668>
   391ec:	ldr	r6, [sp, #12]
   391f0:	b	392b0 <__assert_fail@plt+0x266f4>
   391f4:	mov	r0, #1
   391f8:	str	r0, [sp, #32]
   391fc:	str	r0, [sp, #28]
   39200:	mov	r0, #4
   39204:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   39208:	cmp	r0, #0
   3920c:	str	r0, [sp, #36]	; 0x24
   39210:	beq	39308 <__assert_fail@plt+0x2674c>
   39214:	str	r8, [r0]
   39218:	mov	r0, #0
   3921c:	str	r0, [fp, #-32]	; 0xffffffe0
   39220:	b	39258 <__assert_fail@plt+0x2669c>
   39224:	add	r6, sp, #28
   39228:	mov	r1, r4
   3922c:	mov	r0, r6
   39230:	bl	36c90 <__assert_fail@plt+0x240d4>
   39234:	mov	r4, r0
   39238:	str	r0, [fp, #-32]	; 0xffffffe0
   3923c:	mov	r0, r6
   39240:	mov	r1, r8
   39244:	bl	36af4 <__assert_fail@plt+0x23f38>
   39248:	cmp	r4, #0
   3924c:	bne	3932c <__assert_fail@plt+0x26770>
   39250:	cmp	r0, #0
   39254:	beq	3932c <__assert_fail@plt+0x26770>
   39258:	ldr	r6, [sp, #12]
   3925c:	sub	r0, fp, #32
   39260:	add	r2, sp, #28
   39264:	mov	r1, r6
   39268:	bl	3946c <__assert_fail@plt+0x268b0>
   3926c:	ldr	r4, [sp, #24]
   39270:	ldr	r1, [r4, #100]	; 0x64
   39274:	str	r0, [r1, r9, lsl #2]
   39278:	ldr	r0, [sp, #36]	; 0x24
   3927c:	bl	2c048 <__assert_fail@plt+0x1948c>
   39280:	ldr	r0, [r4, #100]	; 0x64
   39284:	ldr	r2, [fp, #-32]	; 0xffffffe0
   39288:	ldr	r0, [r0, r9, lsl #2]
   3928c:	cmp	r2, #0
   39290:	mov	r1, r2
   39294:	movwne	r1, #1
   39298:	clz	r0, r0
   3929c:	lsr	r0, r0, #5
   392a0:	ands	r1, r0, r1
   392a4:	ldr	r0, [sp, #20]
   392a8:	movne	r0, r2
   392ac:	str	r0, [sp, #20]
   392b0:	ldr	r4, [sp, #8]
   392b4:	cmp	r1, #0
   392b8:	cmpne	r1, #4
   392bc:	bne	3934c <__assert_fail@plt+0x26790>
   392c0:	ldrb	r1, [sl, #12]
   392c4:	add	r0, sl, #24
   392c8:	cmp	r1, #0
   392cc:	bne	390e0 <__assert_fail@plt+0x26524>
   392d0:	b	3935c <__assert_fail@plt+0x267a0>
   392d4:	mov	r0, #0
   392d8:	mov	r5, #12
   392dc:	str	r0, [sp, #28]
   392e0:	str	r0, [sp, #32]
   392e4:	b	39164 <__assert_fail@plt+0x265a8>
   392e8:	cmp	r9, #0
   392ec:	mov	r1, #1
   392f0:	movne	r8, r9
   392f4:	cmp	r5, #0
   392f8:	movne	r8, r5
   392fc:	str	r8, [fp, #-32]	; 0xffffffe0
   39300:	str	r8, [sp, #20]
   39304:	b	391ac <__assert_fail@plt+0x265f0>
   39308:	mov	r0, #0
   3930c:	mov	r1, #12
   39310:	str	r0, [sp, #28]
   39314:	str	r0, [sp, #32]
   39318:	mov	r0, #12
   3931c:	str	r1, [fp, #-32]	; 0xffffffe0
   39320:	mov	r1, #1
   39324:	str	r0, [sp, #20]
   39328:	b	391ec <__assert_fail@plt+0x26630>
   3932c:	ldr	r0, [sp, #36]	; 0x24
   39330:	bl	2c048 <__assert_fail@plt+0x1948c>
   39334:	cmp	r4, #0
   39338:	mov	r1, #1
   3933c:	movweq	r4, #12
   39340:	str	r4, [fp, #-32]	; 0xffffffe0
   39344:	str	r4, [sp, #20]
   39348:	b	391ec <__assert_fail@plt+0x26630>
   3934c:	cmp	r1, #2
   39350:	beq	390cc <__assert_fail@plt+0x26510>
   39354:	ldr	r0, [sp, #20]
   39358:	b	39360 <__assert_fail@plt+0x267a4>
   3935c:	mov	r0, #0
   39360:	sub	sp, fp, #28
   39364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39368:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3936c:	add	fp, sp, #24
   39370:	sub	sp, sp, #8
   39374:	mov	r6, r0
   39378:	mov	r4, r1
   3937c:	mov	r0, r1
   39380:	mov	r1, r2
   39384:	mov	r5, r3
   39388:	mov	r7, r2
   3938c:	bl	36d0c <__assert_fail@plt+0x24150>
   39390:	cmp	r0, #0
   39394:	beq	393a4 <__assert_fail@plt+0x267e8>
   39398:	mov	r0, #0
   3939c:	sub	sp, fp, #24
   393a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   393a4:	ldr	r8, [fp, #8]
   393a8:	ldr	r0, [r6]
   393ac:	add	r1, r0, r7, lsl #3
   393b0:	ldrb	r1, [r1, #4]
   393b4:	cmp	r1, r8
   393b8:	ldreq	r0, [r0, r7, lsl #3]
   393bc:	cmpeq	r0, r5
   393c0:	beq	39448 <__assert_fail@plt+0x2688c>
   393c4:	mov	r0, r4
   393c8:	mov	r1, r7
   393cc:	bl	36af4 <__assert_fail@plt+0x23f38>
   393d0:	cmp	r0, #0
   393d4:	beq	39464 <__assert_fail@plt+0x268a8>
   393d8:	ldr	r0, [r6, #20]
   393dc:	add	r7, r7, r7, lsl #1
   393e0:	add	r1, r0, r7, lsl #2
   393e4:	ldr	r2, [r1, #4]
   393e8:	cmp	r2, #2
   393ec:	beq	393fc <__assert_fail@plt+0x26840>
   393f0:	cmp	r2, #0
   393f4:	bne	39424 <__assert_fail@plt+0x26868>
   393f8:	b	39398 <__assert_fail@plt+0x267dc>
   393fc:	ldr	r0, [r1, #8]
   39400:	mov	r1, r4
   39404:	mov	r3, r5
   39408:	ldr	r2, [r0, #4]
   3940c:	mov	r0, r6
   39410:	str	r8, [sp]
   39414:	bl	39368 <__assert_fail@plt+0x267ac>
   39418:	cmp	r0, #0
   3941c:	bne	3939c <__assert_fail@plt+0x267e0>
   39420:	ldr	r0, [r6, #20]
   39424:	add	r0, r0, r7, lsl #2
   39428:	ldr	r0, [r0, #8]
   3942c:	ldr	r7, [r0]
   39430:	mov	r0, r4
   39434:	mov	r1, r7
   39438:	bl	36d0c <__assert_fail@plt+0x24150>
   3943c:	cmp	r0, #0
   39440:	beq	393a8 <__assert_fail@plt+0x267ec>
   39444:	b	39398 <__assert_fail@plt+0x267dc>
   39448:	cmp	r8, #9
   3944c:	bne	39398 <__assert_fail@plt+0x267dc>
   39450:	mov	r0, r4
   39454:	mov	r1, r7
   39458:	bl	36af4 <__assert_fail@plt+0x23f38>
   3945c:	cmp	r0, #0
   39460:	bne	39398 <__assert_fail@plt+0x267dc>
   39464:	mov	r0, #12
   39468:	b	3939c <__assert_fail@plt+0x267e0>
   3946c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39470:	add	fp, sp, #28
   39474:	sub	sp, sp, #4
   39478:	ldr	sl, [r2, #4]
   3947c:	cmp	sl, #0
   39480:	beq	39634 <__assert_fail@plt+0x26a78>
   39484:	mov	r4, r2
   39488:	mov	r9, r1
   3948c:	cmp	sl, #1
   39490:	mov	r6, sl
   39494:	str	r0, [sp]
   39498:	blt	394b8 <__assert_fail@plt+0x268fc>
   3949c:	ldr	r1, [r4, #8]
   394a0:	mov	r2, sl
   394a4:	mov	r6, sl
   394a8:	ldr	r3, [r1], #4
   394ac:	subs	r2, r2, #1
   394b0:	add	r6, r3, r6
   394b4:	bne	394a8 <__assert_fail@plt+0x268ec>
   394b8:	ldr	r1, [r9, #68]	; 0x44
   394bc:	ldr	r2, [r9, #32]
   394c0:	and	r1, r1, r6
   394c4:	add	r3, r1, r1, lsl #1
   394c8:	ldr	r1, [r2, r3, lsl #2]
   394cc:	cmp	r1, #1
   394d0:	blt	39544 <__assert_fail@plt+0x26988>
   394d4:	add	r2, r2, r3, lsl #2
   394d8:	sub	ip, sl, #1
   394dc:	mov	r5, #0
   394e0:	ldr	lr, [r2, #8]
   394e4:	b	39518 <__assert_fail@plt+0x2695c>
   394e8:	mov	r3, ip
   394ec:	add	r2, r3, #1
   394f0:	cmp	r2, #1
   394f4:	blt	39628 <__assert_fail@plt+0x26a6c>
   394f8:	ldr	r2, [r4, #8]
   394fc:	ldr	r0, [r7, #12]
   39500:	ldr	r2, [r2, r3, lsl #2]
   39504:	ldr	r0, [r0, r3, lsl #2]
   39508:	sub	r3, r3, #1
   3950c:	cmp	r0, r2
   39510:	beq	394ec <__assert_fail@plt+0x26930>
   39514:	b	39538 <__assert_fail@plt+0x2697c>
   39518:	cmp	r4, #0
   3951c:	beq	39538 <__assert_fail@plt+0x2697c>
   39520:	ldr	r7, [lr, r5, lsl #2]
   39524:	ldr	r3, [r7]
   39528:	cmp	r6, r3
   3952c:	ldreq	r3, [r7, #8]
   39530:	cmpeq	r3, sl
   39534:	beq	394e8 <__assert_fail@plt+0x2692c>
   39538:	add	r5, r5, #1
   3953c:	cmp	r5, r1
   39540:	blt	39518 <__assert_fail@plt+0x2695c>
   39544:	mov	r0, #56	; 0x38
   39548:	mov	r1, #1
   3954c:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   39550:	cmp	r0, #0
   39554:	beq	39654 <__assert_fail@plt+0x26a98>
   39558:	add	r5, r0, #4
   3955c:	mov	r7, r0
   39560:	mov	r1, r4
   39564:	mov	r0, r5
   39568:	bl	36c90 <__assert_fail@plt+0x240d4>
   3956c:	cmp	r0, #0
   39570:	bne	39640 <__assert_fail@plt+0x26a84>
   39574:	str	r5, [r7, #40]	; 0x28
   39578:	ldr	r0, [r4, #4]
   3957c:	cmp	r0, #1
   39580:	blt	39610 <__assert_fail@plt+0x26a54>
   39584:	ldr	r1, [r4, #8]
   39588:	ldr	sl, [r9]
   3958c:	movw	ip, #65280	; 0xff00
   39590:	mov	lr, #32
   39594:	movt	ip, #3
   39598:	add	r5, ip, #255	; 0xff
   3959c:	ldr	r2, [r1]
   395a0:	add	r3, sl, r2, lsl #3
   395a4:	ldr	r2, [r3, #4]!
   395a8:	and	r4, r2, r5
   395ac:	cmp	r4, #1
   395b0:	beq	39604 <__assert_fail@plt+0x26a48>
   395b4:	ldrb	r8, [r7, #52]	; 0x34
   395b8:	and	r4, lr, r2, lsr #15
   395bc:	uxtb	r2, r2
   395c0:	cmp	r2, #12
   395c4:	orr	r4, r8, r4
   395c8:	strb	r4, [r7, #52]	; 0x34
   395cc:	beq	395fc <__assert_fail@plt+0x26a40>
   395d0:	cmp	r2, #4
   395d4:	beq	395e8 <__assert_fail@plt+0x26a2c>
   395d8:	cmp	r2, #2
   395dc:	bne	395f0 <__assert_fail@plt+0x26a34>
   395e0:	orr	r2, r4, #16
   395e4:	b	39600 <__assert_fail@plt+0x26a44>
   395e8:	orr	r2, r4, #64	; 0x40
   395ec:	b	39600 <__assert_fail@plt+0x26a44>
   395f0:	ldr	r2, [r3]
   395f4:	tst	r2, ip
   395f8:	beq	39604 <__assert_fail@plt+0x26a48>
   395fc:	orr	r2, r4, #128	; 0x80
   39600:	strb	r2, [r7, #52]	; 0x34
   39604:	add	r1, r1, #4
   39608:	subs	r0, r0, #1
   3960c:	bne	3959c <__assert_fail@plt+0x269e0>
   39610:	mov	r0, r9
   39614:	mov	r1, r7
   39618:	mov	r2, r6
   3961c:	bl	370ac <__assert_fail@plt+0x244f0>
   39620:	cmp	r0, #0
   39624:	bne	3964c <__assert_fail@plt+0x26a90>
   39628:	mov	r0, r7
   3962c:	sub	sp, fp, #28
   39630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39634:	mov	r7, #0
   39638:	str	r7, [r0]
   3963c:	b	39628 <__assert_fail@plt+0x26a6c>
   39640:	mov	r0, r7
   39644:	bl	2c048 <__assert_fail@plt+0x1948c>
   39648:	b	39654 <__assert_fail@plt+0x26a98>
   3964c:	mov	r0, r7
   39650:	bl	321dc <__assert_fail@plt+0x1f620>
   39654:	ldr	r1, [sp]
   39658:	mov	r0, #12
   3965c:	mov	r7, #0
   39660:	str	r0, [r1]
   39664:	b	39628 <__assert_fail@plt+0x26a6c>
   39668:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3966c:	add	fp, sp, #24
   39670:	ldr	lr, [r0]
   39674:	add	r7, lr, r1, lsl #3
   39678:	ldrb	r9, [r7, #4]
   3967c:	cmp	r9, #7
   39680:	beq	39850 <__assert_fail@plt+0x26c94>
   39684:	ldr	ip, [r2, #80]	; 0x50
   39688:	mov	r6, #1
   3968c:	cmp	ip, #1
   39690:	beq	396cc <__assert_fail@plt+0x26b10>
   39694:	ldr	r5, [r2, #28]
   39698:	add	r7, r3, #1
   3969c:	cmp	r7, r5
   396a0:	bge	396cc <__assert_fail@plt+0x26b10>
   396a4:	ldr	r6, [r2, #8]
   396a8:	add	r7, r6, r3, lsl #2
   396ac:	mov	r6, #1
   396b0:	ldr	r4, [r7, r6, lsl #2]
   396b4:	cmn	r4, #1
   396b8:	bne	396cc <__assert_fail@plt+0x26b10>
   396bc:	add	r6, r6, #1
   396c0:	add	r4, r3, r6
   396c4:	cmp	r4, r5
   396c8:	blt	396b0 <__assert_fail@plt+0x26af4>
   396cc:	mov	r8, #0
   396d0:	cmp	r9, #5
   396d4:	bne	39718 <__assert_fail@plt+0x26b5c>
   396d8:	cmp	r6, #2
   396dc:	blt	39840 <__assert_fail@plt+0x26c84>
   396e0:	ldr	r0, [r0, #128]	; 0x80
   396e4:	tst	r0, #64	; 0x40
   396e8:	bne	396fc <__assert_fail@plt+0x26b40>
   396ec:	ldr	r1, [r2, #4]
   396f0:	ldrb	r1, [r1, r3]
   396f4:	cmp	r1, #10
   396f8:	beq	39840 <__assert_fail@plt+0x26c84>
   396fc:	tst	r0, #128	; 0x80
   39700:	beq	3983c <__assert_fail@plt+0x26c80>
   39704:	ldr	r0, [r2, #4]
   39708:	ldrb	r0, [r0, r3]
   3970c:	cmp	r0, #0
   39710:	movne	r8, r6
   39714:	b	39840 <__assert_fail@plt+0x26c84>
   39718:	cmp	r9, #6
   3971c:	bne	39840 <__assert_fail@plt+0x26c84>
   39720:	cmp	r6, #2
   39724:	blt	39840 <__assert_fail@plt+0x26c84>
   39728:	ldr	r7, [lr, r1, lsl #3]
   3972c:	ldr	r0, [r7, #32]
   39730:	cmp	r0, #0
   39734:	bne	39750 <__assert_fail@plt+0x26b94>
   39738:	ldr	r1, [r7, #36]	; 0x24
   3973c:	cmp	r1, #0
   39740:	bne	39750 <__assert_fail@plt+0x26b94>
   39744:	ldr	r1, [r7, #20]
   39748:	cmp	r1, #0
   3974c:	beq	39848 <__assert_fail@plt+0x26c8c>
   39750:	cmp	ip, #1
   39754:	bne	39764 <__assert_fail@plt+0x26ba8>
   39758:	ldr	r1, [r2, #4]
   3975c:	ldrb	r5, [r1, r3]
   39760:	b	3976c <__assert_fail@plt+0x26bb0>
   39764:	ldr	r1, [r2, #8]
   39768:	ldr	r5, [r1, r3, lsl #2]
   3976c:	ldr	r1, [r7, #20]
   39770:	cmp	r1, #1
   39774:	blt	39798 <__assert_fail@plt+0x26bdc>
   39778:	ldr	r2, [r7]
   3977c:	mov	r3, #0
   39780:	ldr	r4, [r2, r3, lsl #2]
   39784:	cmp	r5, r4
   39788:	beq	39814 <__assert_fail@plt+0x26c58>
   3978c:	add	r3, r3, #1
   39790:	cmp	r3, r1
   39794:	blt	39780 <__assert_fail@plt+0x26bc4>
   39798:	ldr	r1, [r7, #36]	; 0x24
   3979c:	cmp	r1, #1
   397a0:	blt	397d4 <__assert_fail@plt+0x26c18>
   397a4:	mov	r4, #0
   397a8:	ldr	r0, [r7, #12]
   397ac:	ldr	r1, [r0, r4, lsl #2]
   397b0:	mov	r0, r5
   397b4:	bl	124c0 <iswctype@plt>
   397b8:	cmp	r0, #0
   397bc:	bne	39814 <__assert_fail@plt+0x26c58>
   397c0:	ldr	r0, [r7, #36]	; 0x24
   397c4:	add	r4, r4, #1
   397c8:	cmp	r4, r0
   397cc:	blt	397a8 <__assert_fail@plt+0x26bec>
   397d0:	ldr	r0, [r7, #32]
   397d4:	cmp	r0, #1
   397d8:	blt	3980c <__assert_fail@plt+0x26c50>
   397dc:	ldr	r1, [r7, #4]
   397e0:	mov	r2, #0
   397e4:	ldr	r3, [r1, r2, lsl #2]
   397e8:	cmp	r3, r5
   397ec:	bhi	39800 <__assert_fail@plt+0x26c44>
   397f0:	ldr	r3, [r7, #8]
   397f4:	ldr	r3, [r3, r2, lsl #2]
   397f8:	cmp	r5, r3
   397fc:	bls	39814 <__assert_fail@plt+0x26c58>
   39800:	add	r2, r2, #1
   39804:	cmp	r2, r0
   39808:	blt	397e4 <__assert_fail@plt+0x26c28>
   3980c:	mov	r0, #0
   39810:	b	39818 <__assert_fail@plt+0x26c5c>
   39814:	mov	r0, r6
   39818:	ldrb	r1, [r7, #16]
   3981c:	tst	r1, #1
   39820:	bne	3982c <__assert_fail@plt+0x26c70>
   39824:	mov	r8, r0
   39828:	b	39840 <__assert_fail@plt+0x26c84>
   3982c:	cmp	r0, #0
   39830:	bgt	39840 <__assert_fail@plt+0x26c84>
   39834:	cmp	r6, #1
   39838:	movle	r6, #1
   3983c:	mov	r8, r6
   39840:	mov	r0, r8
   39844:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39848:	mov	r5, #0
   3984c:	b	3976c <__assert_fail@plt+0x26bb0>
   39850:	ldr	r0, [r2, #4]
   39854:	mov	r8, #0
   39858:	ldrb	r6, [r0, r3]
   3985c:	cmp	r6, #194	; 0xc2
   39860:	bcc	39840 <__assert_fail@plt+0x26c84>
   39864:	ldr	r1, [r2, #48]	; 0x30
   39868:	add	r2, r3, #2
   3986c:	cmp	r2, r1
   39870:	bgt	39840 <__assert_fail@plt+0x26c84>
   39874:	add	r0, r0, r3
   39878:	cmp	r6, #223	; 0xdf
   3987c:	ldrb	r7, [r0, #1]
   39880:	bhi	398a0 <__assert_fail@plt+0x26ce4>
   39884:	mov	r8, #2
   39888:	cmp	r7, #191	; 0xbf
   3988c:	sxtb	r0, r7
   39890:	movwhi	r8, #0
   39894:	cmn	r0, #1
   39898:	movwgt	r8, #0
   3989c:	b	39840 <__assert_fail@plt+0x26c84>
   398a0:	cmp	r6, #239	; 0xef
   398a4:	bhi	398c0 <__assert_fail@plt+0x26d04>
   398a8:	mov	r2, #3
   398ac:	cmp	r6, #224	; 0xe0
   398b0:	bne	3991c <__assert_fail@plt+0x26d60>
   398b4:	cmp	r7, #160	; 0xa0
   398b8:	bcc	39840 <__assert_fail@plt+0x26c84>
   398bc:	b	3991c <__assert_fail@plt+0x26d60>
   398c0:	cmp	r6, #247	; 0xf7
   398c4:	bhi	398e0 <__assert_fail@plt+0x26d24>
   398c8:	mov	r2, #4
   398cc:	cmp	r6, #240	; 0xf0
   398d0:	bne	3991c <__assert_fail@plt+0x26d60>
   398d4:	cmp	r7, #144	; 0x90
   398d8:	bcc	39840 <__assert_fail@plt+0x26c84>
   398dc:	b	3991c <__assert_fail@plt+0x26d60>
   398e0:	cmp	r6, #251	; 0xfb
   398e4:	bhi	39900 <__assert_fail@plt+0x26d44>
   398e8:	mov	r2, #5
   398ec:	cmp	r6, #248	; 0xf8
   398f0:	bne	3991c <__assert_fail@plt+0x26d60>
   398f4:	cmp	r7, #136	; 0x88
   398f8:	bcc	39840 <__assert_fail@plt+0x26c84>
   398fc:	b	3991c <__assert_fail@plt+0x26d60>
   39900:	cmp	r6, #253	; 0xfd
   39904:	bhi	39840 <__assert_fail@plt+0x26c84>
   39908:	mov	r2, #6
   3990c:	cmp	r6, #252	; 0xfc
   39910:	bne	3991c <__assert_fail@plt+0x26d60>
   39914:	cmp	r7, #132	; 0x84
   39918:	bcc	39840 <__assert_fail@plt+0x26c84>
   3991c:	add	r3, r2, r3
   39920:	cmp	r3, r1
   39924:	bgt	39840 <__assert_fail@plt+0x26c84>
   39928:	mov	r1, #1
   3992c:	ldrb	r3, [r0, r1]
   39930:	sxtb	r7, r3
   39934:	cmn	r7, #1
   39938:	bgt	39840 <__assert_fail@plt+0x26c84>
   3993c:	cmp	r3, #191	; 0xbf
   39940:	bhi	39840 <__assert_fail@plt+0x26c84>
   39944:	add	r1, r1, #1
   39948:	cmp	r1, r2
   3994c:	bcc	3992c <__assert_fail@plt+0x26d70>
   39950:	mov	r8, r2
   39954:	b	39840 <__assert_fail@plt+0x26c84>
   39958:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3995c:	add	fp, sp, #24
   39960:	ldr	r5, [r1, #4]
   39964:	mvn	r3, #0
   39968:	mov	r8, #0
   3996c:	uxtab	r4, r3, r5
   39970:	cmp	r4, #6
   39974:	bhi	39a84 <__assert_fail@plt+0x26ec8>
   39978:	ldr	r3, [r0, #4]
   3997c:	ldrb	r3, [r3, r2]
   39980:	add	r7, pc, #4
   39984:	sxtb	r6, r3
   39988:	ldr	pc, [r7, r4, lsl #2]
   3998c:	andeq	r9, r3, r8, lsr #19
   39990:	andeq	r9, r3, r4, lsl #21
   39994:			; <UNDEFINED> instruction: 0x000399bc
   39998:	andeq	r9, r3, r4, lsl #21
   3999c:	andeq	r9, r3, r4, ror #19
   399a0:	andeq	r9, r3, r4, lsl #21
   399a4:	ldrdeq	r9, [r3], -ip
   399a8:	ldrb	r1, [r1]
   399ac:	uxtb	r3, r6
   399b0:	cmp	r1, r3
   399b4:	beq	39a18 <__assert_fail@plt+0x26e5c>
   399b8:	b	39a84 <__assert_fail@plt+0x26ec8>
   399bc:	ldr	r1, [r1]
   399c0:	ubfx	r7, r3, #5, #3
   399c4:	and	r3, r3, #31
   399c8:	ldr	r1, [r1, r7, lsl #2]
   399cc:	mov	r7, #1
   399d0:	tst	r1, r7, lsl r3
   399d4:	bne	39a18 <__assert_fail@plt+0x26e5c>
   399d8:	b	39a84 <__assert_fail@plt+0x26ec8>
   399dc:	cmp	r6, #0
   399e0:	blt	39a84 <__assert_fail@plt+0x26ec8>
   399e4:	cmp	r3, #0
   399e8:	beq	39a08 <__assert_fail@plt+0x26e4c>
   399ec:	cmp	r3, #10
   399f0:	bne	39a18 <__assert_fail@plt+0x26e5c>
   399f4:	ldr	r1, [r0, #84]	; 0x54
   399f8:	ldrb	r1, [r1, #128]	; 0x80
   399fc:	tst	r1, #64	; 0x40
   39a00:	bne	39a18 <__assert_fail@plt+0x26e5c>
   39a04:	b	39a84 <__assert_fail@plt+0x26ec8>
   39a08:	ldr	r1, [r0, #84]	; 0x54
   39a0c:	ldrb	r1, [r1, #128]	; 0x80
   39a10:	tst	r1, #128	; 0x80
   39a14:	bne	39a84 <__assert_fail@plt+0x26ec8>
   39a18:	movw	r1, #65280	; 0xff00
   39a1c:	movt	r1, #3
   39a20:	tst	r5, r1
   39a24:	beq	39a80 <__assert_fail@plt+0x26ec4>
   39a28:	ldr	r3, [r0, #88]	; 0x58
   39a2c:	mov	r1, r2
   39a30:	mov	r2, r3
   39a34:	bl	379e0 <__assert_fail@plt+0x24e24>
   39a38:	and	r1, r0, #1
   39a3c:	tst	r5, #1024	; 0x400
   39a40:	beq	39a4c <__assert_fail@plt+0x26e90>
   39a44:	cmp	r1, #0
   39a48:	beq	39a84 <__assert_fail@plt+0x26ec8>
   39a4c:	tst	r5, #2048	; 0x800
   39a50:	cmpne	r1, #0
   39a54:	bne	39a84 <__assert_fail@plt+0x26ec8>
   39a58:	tst	r5, #8192	; 0x2000
   39a5c:	beq	39a68 <__assert_fail@plt+0x26eac>
   39a60:	ands	r1, r0, #2
   39a64:	beq	39a84 <__assert_fail@plt+0x26ec8>
   39a68:	and	r1, r5, #32768	; 0x8000
   39a6c:	mov	r2, #1
   39a70:	and	r0, r0, #8
   39a74:	eor	r1, r2, r1, lsr #15
   39a78:	orr	r0, r1, r0, lsr #3
   39a7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   39a80:	mov	r8, #1
   39a84:	mov	r0, r8
   39a88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   39a8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39a90:	add	fp, sp, #28
   39a94:	sub	sp, sp, #4
   39a98:	vpush	{d8-d11}
   39a9c:	sub	sp, sp, #2128	; 0x850
   39aa0:	sub	sp, sp, #12288	; 0x3000
   39aa4:	sub	lr, fp, #1024	; 0x400
   39aa8:	mov	r8, #0
   39aac:	vmov.i32	q4, #0	; 0x00000000
   39ab0:	sub	r4, lr, #72	; 0x48
   39ab4:	str	r8, [r1, #44]	; 0x2c
   39ab8:	str	r8, [r1, #48]	; 0x30
   39abc:	mov	r2, r4
   39ac0:	vst1.64	{d8-d9}, [r2]!
   39ac4:	vst1.64	{d8-d9}, [r2]
   39ac8:	ldr	r2, [r1, #8]
   39acc:	cmp	r2, #1
   39ad0:	blt	3a484 <__assert_fail@plt+0x278c8>
   39ad4:	sub	lr, fp, #2048	; 0x800
   39ad8:	add	sl, r0, #96	; 0x60
   39adc:	mov	r3, #0
   39ae0:	mov	r8, #0
   39ae4:	str	r1, [sp, #12]
   39ae8:	str	r0, [sp, #20]
   39aec:	sub	r9, lr, #72	; 0x48
   39af0:	str	sl, [sp]
   39af4:	ldr	r2, [r1, #12]
   39af8:	ldr	r5, [r0]
   39afc:	str	r3, [sp, #16]
   39b00:	ldr	r6, [r2, r3, lsl #2]
   39b04:	add	r2, r5, r6, lsl #3
   39b08:	ldr	r7, [r2, #4]
   39b0c:	uxtb	ip, r7
   39b10:	cmp	ip, #1
   39b14:	bne	39bec <__assert_fail@plt+0x27030>
   39b18:	ldrb	r0, [r5, r6, lsl #3]
   39b1c:	mov	r3, #1
   39b20:	ubfx	r1, r0, #5, #3
   39b24:	and	r0, r0, #31
   39b28:	ldr	r2, [r4, r1, lsl #2]
   39b2c:	orr	r0, r2, r3, lsl r0
   39b30:	str	r0, [r4, r1, lsl #2]
   39b34:	movw	r0, #65280	; 0xff00
   39b38:	sub	lr, fp, #3072	; 0xc00
   39b3c:	movt	r0, #3
   39b40:	sub	r3, lr, #72	; 0x48
   39b44:	ands	r0, r7, r0
   39b48:	beq	39e20 <__assert_fail@plt+0x27264>
   39b4c:	tst	r7, #8192	; 0x2000
   39b50:	beq	39b74 <__assert_fail@plt+0x26fb8>
   39b54:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   39b58:	mov	r1, r4
   39b5c:	vst1.64	{d8-d9}, [r1]!
   39b60:	vst1.64	{d8-d9}, [r1]
   39b64:	tst	r0, #1024	; 0x400
   39b68:	beq	39d74 <__assert_fail@plt+0x271b8>
   39b6c:	mov	r0, #1024	; 0x400
   39b70:	str	r0, [fp, #-1096]	; 0xfffffbb8
   39b74:	tst	r7, #32768	; 0x8000
   39b78:	bne	39d68 <__assert_fail@plt+0x271ac>
   39b7c:	tst	r7, #1024	; 0x400
   39b80:	beq	39d50 <__assert_fail@plt+0x27194>
   39b84:	movw	r0, #255	; 0xff
   39b88:	movt	r0, #64	; 0x40
   39b8c:	and	r0, r7, r0
   39b90:	cmp	r0, #1
   39b94:	beq	39d68 <__assert_fail@plt+0x271ac>
   39b98:	ldr	r1, [sp, #20]
   39b9c:	vmov.i32	q8, #0	; 0x00000000
   39ba0:	ldr	r0, [r1, #92]	; 0x5c
   39ba4:	cmp	r0, #1
   39ba8:	ble	39d00 <__assert_fail@plt+0x27144>
   39bac:	ldr	r0, [r1, #60]	; 0x3c
   39bb0:	mov	r1, #0
   39bb4:	add	r2, sl, r1
   39bb8:	add	r3, r0, r1
   39bbc:	vld1.32	{d20-d21}, [r2]
   39bc0:	vld1.32	{d18-d19}, [r3]
   39bc4:	add	r2, r4, r1
   39bc8:	add	r1, r1, #16
   39bcc:	vld1.32	{d22-d23}, [r2]
   39bd0:	cmp	r1, #32
   39bd4:	vorn	q9, q10, q9
   39bd8:	vand	q9, q11, q9
   39bdc:	vorr	q8, q9, q8
   39be0:	vst1.32	{d18-d19}, [r2]
   39be4:	bne	39bb4 <__assert_fail@plt+0x26ff8>
   39be8:	b	39d2c <__assert_fail@plt+0x27170>
   39bec:	cmp	ip, #7
   39bf0:	beq	39c34 <__assert_fail@plt+0x27078>
   39bf4:	cmp	ip, #5
   39bf8:	beq	39c80 <__assert_fail@plt+0x270c4>
   39bfc:	cmp	ip, #3
   39c00:	bne	3a084 <__assert_fail@plt+0x274c8>
   39c04:	ldr	r0, [r5, r6, lsl #3]
   39c08:	mov	r1, #0
   39c0c:	add	r2, r4, r1
   39c10:	add	r3, r0, r1
   39c14:	add	r1, r1, #16
   39c18:	vld1.32	{d16-d17}, [r3]
   39c1c:	vld1.32	{d18-d19}, [r2]
   39c20:	cmp	r1, #32
   39c24:	vorr	q8, q9, q8
   39c28:	vst1.32	{d16-d17}, [r2]
   39c2c:	bne	39c0c <__assert_fail@plt+0x27050>
   39c30:	b	39b34 <__assert_fail@plt+0x26f78>
   39c34:	mvn	r1, #0
   39c38:	str	r1, [fp, #-1084]	; 0xfffffbc4
   39c3c:	str	r1, [fp, #-1088]	; 0xfffffbc0
   39c40:	str	r1, [fp, #-1092]	; 0xfffffbbc
   39c44:	str	r1, [fp, #-1096]	; 0xfffffbb8
   39c48:	ldr	r1, [r0, #128]	; 0x80
   39c4c:	and	r0, r1, #128	; 0x80
   39c50:	ands	r1, r1, #64	; 0x40
   39c54:	beq	39c60 <__assert_fail@plt+0x270a4>
   39c58:	cmp	r0, #0
   39c5c:	beq	39b34 <__assert_fail@plt+0x26f78>
   39c60:	cmp	r1, #0
   39c64:	mvn	r1, #1
   39c68:	movweq	r1, #64510	; 0xfbfe
   39c6c:	movteq	r1, #65535	; 0xffff
   39c70:	cmp	r0, #0
   39c74:	mvneq	r1, #1024	; 0x400
   39c78:	str	r1, [fp, #-1096]	; 0xfffffbb8
   39c7c:	b	39b34 <__assert_fail@plt+0x26f78>
   39c80:	ldr	r1, [r0, #92]	; 0x5c
   39c84:	cmp	r1, #2
   39c88:	blt	39cbc <__assert_fail@plt+0x27100>
   39c8c:	ldr	r0, [r0, #60]	; 0x3c
   39c90:	mov	r1, #0
   39c94:	add	r2, r4, r1
   39c98:	add	r3, r0, r1
   39c9c:	add	r1, r1, #16
   39ca0:	vld1.32	{d16-d17}, [r3]
   39ca4:	vld1.32	{d18-d19}, [r2]
   39ca8:	cmp	r1, #32
   39cac:	vorr	q8, q9, q8
   39cb0:	vst1.32	{d16-d17}, [r2]
   39cb4:	bne	39c94 <__assert_fail@plt+0x270d8>
   39cb8:	b	39cd4 <__assert_fail@plt+0x27118>
   39cbc:	mov	r0, r4
   39cc0:	mov	r1, #255	; 0xff
   39cc4:	mov	r2, #32
   39cc8:	str	ip, [sp, #8]
   39ccc:	bl	12904 <memset@plt>
   39cd0:	ldr	ip, [sp, #8]
   39cd4:	ldr	r0, [sp, #20]
   39cd8:	ldr	r0, [r0, #128]	; 0x80
   39cdc:	tst	r0, #64	; 0x40
   39ce0:	ldreq	r1, [fp, #-1096]	; 0xfffffbb8
   39ce4:	biceq	r1, r1, #1024	; 0x400
   39ce8:	streq	r1, [fp, #-1096]	; 0xfffffbb8
   39cec:	tst	r0, #128	; 0x80
   39cf0:	ldrne	r0, [fp, #-1096]	; 0xfffffbb8
   39cf4:	bicne	r0, r0, #1
   39cf8:	strne	r0, [fp, #-1096]	; 0xfffffbb8
   39cfc:	b	39b34 <__assert_fail@plt+0x26f78>
   39d00:	mov	r0, #0
   39d04:	add	r1, r4, r0
   39d08:	add	r2, sl, r0
   39d0c:	add	r0, r0, #16
   39d10:	vld1.32	{d18-d19}, [r2]
   39d14:	vld1.32	{d20-d21}, [r1]
   39d18:	cmp	r0, #32
   39d1c:	vand	q9, q10, q9
   39d20:	vorr	q8, q9, q8
   39d24:	vst1.32	{d18-d19}, [r1]
   39d28:	bne	39d04 <__assert_fail@plt+0x27148>
   39d2c:	vext.8	q9, q8, q8, #8
   39d30:	sub	lr, fp, #3072	; 0xc00
   39d34:	vorr	q8, q8, q9
   39d38:	sub	r3, lr, #72	; 0x48
   39d3c:	vdup.32	q9, d16[1]
   39d40:	vorr	q8, q8, q9
   39d44:	vmov.32	r0, d16[0]
   39d48:	cmp	r0, #0
   39d4c:	beq	39d74 <__assert_fail@plt+0x271b8>
   39d50:	tst	r7, #2048	; 0x800
   39d54:	beq	39e20 <__assert_fail@plt+0x27264>
   39d58:	tst	r7, #4194304	; 0x400000
   39d5c:	beq	39d7c <__assert_fail@plt+0x271c0>
   39d60:	cmp	ip, #1
   39d64:	bne	39d7c <__assert_fail@plt+0x271c0>
   39d68:	mov	r0, r4
   39d6c:	vst1.64	{d8-d9}, [r0]!
   39d70:	vst1.64	{d8-d9}, [r0]
   39d74:	ldr	r1, [sp, #12]
   39d78:	b	3a084 <__assert_fail@plt+0x274c8>
   39d7c:	ldr	r1, [sp, #20]
   39d80:	vmov.i32	q8, #0	; 0x00000000
   39d84:	ldr	r0, [r1, #92]	; 0x5c
   39d88:	cmp	r0, #1
   39d8c:	ble	39dd0 <__assert_fail@plt+0x27214>
   39d90:	ldr	r0, [r1, #60]	; 0x3c
   39d94:	mov	r1, #0
   39d98:	add	r2, r0, r1
   39d9c:	add	r3, sl, r1
   39da0:	vld1.32	{d20-d21}, [r2]
   39da4:	vld1.32	{d18-d19}, [r3]
   39da8:	add	r2, r4, r1
   39dac:	add	r1, r1, #16
   39db0:	vld1.32	{d22-d23}, [r2]
   39db4:	cmp	r1, #32
   39db8:	vand	q9, q10, q9
   39dbc:	vbic	q9, q11, q9
   39dc0:	vorr	q8, q9, q8
   39dc4:	vst1.32	{d18-d19}, [r2]
   39dc8:	bne	39d98 <__assert_fail@plt+0x271dc>
   39dcc:	b	39dfc <__assert_fail@plt+0x27240>
   39dd0:	mov	r0, #0
   39dd4:	add	r1, r4, r0
   39dd8:	add	r2, sl, r0
   39ddc:	add	r0, r0, #16
   39de0:	vld1.32	{d18-d19}, [r2]
   39de4:	vld1.32	{d20-d21}, [r1]
   39de8:	cmp	r0, #32
   39dec:	vbic	q9, q10, q9
   39df0:	vorr	q8, q9, q8
   39df4:	vst1.32	{d18-d19}, [r1]
   39df8:	bne	39dd4 <__assert_fail@plt+0x27218>
   39dfc:	vext.8	q9, q8, q8, #8
   39e00:	sub	lr, fp, #3072	; 0xc00
   39e04:	vorr	q8, q8, q9
   39e08:	sub	r3, lr, #72	; 0x48
   39e0c:	vdup.32	q9, d16[1]
   39e10:	vorr	q8, q8, q9
   39e14:	vmov.32	r0, d16[0]
   39e18:	cmp	r0, #0
   39e1c:	beq	39d74 <__assert_fail@plt+0x271b8>
   39e20:	mov	r7, #0
   39e24:	cmp	r8, #1
   39e28:	blt	39ffc <__assert_fail@plt+0x27440>
   39e2c:	add	sl, sp, #24
   39e30:	stmib	sp, {r5, ip}
   39e34:	cmp	ip, #1
   39e38:	bne	39e60 <__assert_fail@plt+0x272a4>
   39e3c:	ldrb	r1, [r5, r6, lsl #3]
   39e40:	add	r0, sp, #24
   39e44:	add	r0, r0, r7, lsl #5
   39e48:	ubfx	r2, r1, #5, #3
   39e4c:	and	r1, r1, #31
   39e50:	ldr	r0, [r0, r2, lsl #2]
   39e54:	mov	r2, #1
   39e58:	tst	r0, r2, lsl r1
   39e5c:	beq	39fe0 <__assert_fail@plt+0x27424>
   39e60:	vmov.i32	q8, #0	; 0x00000000
   39e64:	mov	r0, #0
   39e68:	add	r1, sl, r0
   39e6c:	add	r2, r4, r0
   39e70:	vld1.32	{d20-d21}, [r1]
   39e74:	vld1.32	{d18-d19}, [r2]
   39e78:	add	r1, r9, r0
   39e7c:	add	r0, r0, #16
   39e80:	cmp	r0, #32
   39e84:	vand	q9, q10, q9
   39e88:	vorr	q8, q9, q8
   39e8c:	vst1.32	{d18-d19}, [r1]
   39e90:	bne	39e68 <__assert_fail@plt+0x272ac>
   39e94:	vext.8	q9, q8, q8, #8
   39e98:	vorr	q8, q8, q9
   39e9c:	vdup.32	q9, d16[1]
   39ea0:	vorr	q8, q8, q9
   39ea4:	vmov.32	r0, d16[0]
   39ea8:	cmp	r0, #0
   39eac:	beq	39fe0 <__assert_fail@plt+0x27424>
   39eb0:	vmov.i32	q5, #0	; 0x00000000
   39eb4:	mov	r0, #0
   39eb8:	vmov.i32	q8, #0	; 0x00000000
   39ebc:	add	r1, r4, r0
   39ec0:	add	r2, sl, r0
   39ec4:	vld1.32	{d18-d19}, [r2]
   39ec8:	vld1.32	{d20-d21}, [r1]
   39ecc:	add	r2, r3, r0
   39ed0:	add	r0, r0, #16
   39ed4:	cmp	r0, #32
   39ed8:	vbic	q11, q10, q9
   39edc:	vbic	q9, q9, q10
   39ee0:	vorr	q5, q11, q5
   39ee4:	vorr	q8, q9, q8
   39ee8:	vst1.32	{d18-d19}, [r2]
   39eec:	vst1.32	{d22-d23}, [r1]
   39ef0:	bne	39ebc <__assert_fail@plt+0x27300>
   39ef4:	vext.8	q9, q8, q8, #8
   39ef8:	vorr	q8, q8, q9
   39efc:	vdup.32	q9, d16[1]
   39f00:	vorr	q8, q8, q9
   39f04:	vmov.32	r0, d16[0]
   39f08:	cmp	r0, #0
   39f0c:	beq	39f7c <__assert_fail@plt+0x273c0>
   39f10:	mov	r0, r3
   39f14:	mov	r1, r9
   39f18:	add	r2, sp, #24
   39f1c:	sub	lr, fp, #6144	; 0x1800
   39f20:	vld1.32	{d16-d17}, [r0]!
   39f24:	vld1.32	{d18-d19}, [r1]!
   39f28:	mov	r3, r2
   39f2c:	add	r2, r2, r8, lsl #5
   39f30:	vld1.64	{d20-d21}, [r0]
   39f34:	vst1.32	{d16-d17}, [r2]!
   39f38:	vld1.64	{d16-d17}, [r1]
   39f3c:	add	r0, r3, r7, lsl #5
   39f40:	sub	r1, lr, #120	; 0x78
   39f44:	vst1.32	{d20-d21}, [r2]
   39f48:	vst1.32	{d18-d19}, [r0]!
   39f4c:	mov	r2, r1
   39f50:	vst1.32	{d16-d17}, [r0]
   39f54:	add	r0, r8, r8, lsl #1
   39f58:	add	r0, r1, r0, lsl #2
   39f5c:	add	r1, r7, r7, lsl #1
   39f60:	add	r5, r2, r1, lsl #2
   39f64:	mov	r1, r5
   39f68:	bl	36c90 <__assert_fail@plt+0x240d4>
   39f6c:	cmp	r0, #0
   39f70:	bne	3a450 <__assert_fail@plt+0x27894>
   39f74:	add	r8, r8, #1
   39f78:	b	39f8c <__assert_fail@plt+0x273d0>
   39f7c:	sub	lr, fp, #6144	; 0x1800
   39f80:	add	r0, r7, r7, lsl #1
   39f84:	sub	r1, lr, #120	; 0x78
   39f88:	add	r5, r1, r0, lsl #2
   39f8c:	ldr	r0, [sp, #12]
   39f90:	ldr	r1, [sp, #16]
   39f94:	ldr	r0, [r0, #12]
   39f98:	ldr	r1, [r0, r1, lsl #2]
   39f9c:	mov	r0, r5
   39fa0:	bl	36af4 <__assert_fail@plt+0x23f38>
   39fa4:	cmp	r0, #0
   39fa8:	beq	3a450 <__assert_fail@plt+0x27894>
   39fac:	vext.8	q8, q5, q8, #8
   39fb0:	mov	r1, #0
   39fb4:	vorr	q8, q5, q8
   39fb8:	vdup.32	q9, d16[1]
   39fbc:	vorr	q8, q8, q9
   39fc0:	vmov.32	r0, d16[0]
   39fc4:	cmp	r0, #0
   39fc8:	movweq	r1, #17
   39fcc:	cmp	r1, #0
   39fd0:	bne	39ff4 <__assert_fail@plt+0x27438>
   39fd4:	ldmib	sp, {r5, ip}
   39fd8:	sub	lr, fp, #3072	; 0xc00
   39fdc:	sub	r3, lr, #72	; 0x48
   39fe0:	add	r7, r7, #1
   39fe4:	add	sl, sl, #32
   39fe8:	cmp	r7, r8
   39fec:	blt	39e34 <__assert_fail@plt+0x27278>
   39ff0:	b	39ffc <__assert_fail@plt+0x27440>
   39ff4:	cmp	r1, #17
   39ff8:	bne	3a0a0 <__assert_fail@plt+0x274e4>
   39ffc:	ldr	r1, [sp, #12]
   3a000:	ldr	sl, [sp]
   3a004:	cmp	r7, r8
   3a008:	bne	3a084 <__assert_fail@plt+0x274c8>
   3a00c:	mov	r0, r4
   3a010:	sub	lr, fp, #6144	; 0x1800
   3a014:	vld1.32	{d16-d17}, [r0]!
   3a018:	sub	r2, lr, #120	; 0x78
   3a01c:	vld1.64	{d18-d19}, [r0]
   3a020:	add	r0, sp, #24
   3a024:	add	r0, r0, r7, lsl #5
   3a028:	vst1.32	{d16-d17}, [r0]!
   3a02c:	vst1.32	{d18-d19}, [r0]
   3a030:	ldr	r0, [r1, #12]
   3a034:	ldr	r1, [sp, #16]
   3a038:	ldr	r8, [r0, r1, lsl #2]
   3a03c:	add	r0, r7, r7, lsl #1
   3a040:	mov	r1, #1
   3a044:	add	r5, r2, r0, lsl #2
   3a048:	str	r1, [r2, r0, lsl #2]
   3a04c:	mov	r0, #4
   3a050:	mov	r6, r5
   3a054:	str	r1, [r6, #4]!
   3a058:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   3a05c:	cmp	r0, #0
   3a060:	str	r0, [r5, #8]
   3a064:	beq	3a4bc <__assert_fail@plt+0x27900>
   3a068:	ldr	r1, [sp, #12]
   3a06c:	ldr	sl, [sp]
   3a070:	str	r8, [r0]
   3a074:	mov	r0, r4
   3a078:	add	r8, r7, #1
   3a07c:	vst1.64	{d8-d9}, [r0]!
   3a080:	vst1.64	{d8-d9}, [r0]
   3a084:	ldr	r3, [sp, #16]
   3a088:	ldr	r0, [r1, #8]
   3a08c:	add	r3, r3, #1
   3a090:	cmp	r3, r0
   3a094:	ldr	r0, [sp, #20]
   3a098:	blt	39af4 <__assert_fail@plt+0x26f38>
   3a09c:	b	3a0b4 <__assert_fail@plt+0x274f8>
   3a0a0:	ldr	r1, [sp, #12]
   3a0a4:	ldr	sl, [sp]
   3a0a8:	cmp	r0, #0
   3a0ac:	bne	3a084 <__assert_fail@plt+0x274c8>
   3a0b0:	b	3a0bc <__assert_fail@plt+0x27500>
   3a0b4:	cmp	r8, #0
   3a0b8:	ble	3a484 <__assert_fail@plt+0x278c8>
   3a0bc:	mov	r0, #0
   3a0c0:	str	r0, [fp, #-3152]	; 0xfffff3b0
   3a0c4:	add	r0, r8, #1
   3a0c8:	str	r0, [fp, #-3156]	; 0xfffff3ac
   3a0cc:	lsl	r0, r0, #2
   3a0d0:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   3a0d4:	cmp	r0, #0
   3a0d8:	str	r0, [fp, #-3148]	; 0xfffff3b4
   3a0dc:	mov	r0, #0
   3a0e0:	movweq	r0, #12
   3a0e4:	str	r0, [fp, #-72]	; 0xffffffb8
   3a0e8:	beq	3a4cc <__assert_fail@plt+0x27910>
   3a0ec:	sub	lr, fp, #3072	; 0xc00
   3a0f0:	vmov.i32	q8, #0	; 0x00000000
   3a0f4:	add	r7, sp, #24
   3a0f8:	mov	r6, #0
   3a0fc:	mov	r1, #0
   3a100:	sub	sl, lr, #120	; 0x78
   3a104:	mov	r0, sl
   3a108:	vst1.64	{d16-d17}, [r0]!
   3a10c:	vst1.64	{d16-d17}, [r0]
   3a110:	mov	r0, #0
   3a114:	stmib	sp, {r0, r8}
   3a118:	mov	r0, #0
   3a11c:	sub	lr, fp, #6144	; 0x1800
   3a120:	str	r1, [sp, #16]
   3a124:	str	r0, [fp, #-3152]	; 0xfffff3b0
   3a128:	add	r0, r1, r1, lsl #1
   3a12c:	sub	r2, lr, #120	; 0x78
   3a130:	ldr	r1, [sp, #20]
   3a134:	add	r0, r2, r0, lsl #2
   3a138:	ldr	r5, [r0, #4]
   3a13c:	cmp	r5, #1
   3a140:	blt	3a1a4 <__assert_fail@plt+0x275e8>
   3a144:	ldr	sl, [r0, #8]
   3a148:	mov	r8, #0
   3a14c:	ldr	r0, [sl, r8, lsl #2]
   3a150:	ldr	r2, [r1, #12]
   3a154:	ldr	r0, [r2, r0, lsl #2]
   3a158:	cmn	r0, #1
   3a15c:	beq	3a188 <__assert_fail@plt+0x275cc>
   3a160:	ldr	r1, [r1, #24]
   3a164:	add	r0, r0, r0, lsl #1
   3a168:	sub	lr, fp, #3072	; 0xc00
   3a16c:	add	r1, r1, r0, lsl #2
   3a170:	sub	r0, lr, #84	; 0x54
   3a174:	bl	368e0 <__assert_fail@plt+0x23d24>
   3a178:	ldr	r1, [sp, #20]
   3a17c:	mov	r6, #0
   3a180:	cmp	r0, #0
   3a184:	bne	3a414 <__assert_fail@plt+0x27858>
   3a188:	add	r8, r8, #1
   3a18c:	cmp	r8, r5
   3a190:	blt	3a14c <__assert_fail@plt+0x27590>
   3a194:	ldr	r8, [sp, #8]
   3a198:	sub	lr, fp, #3072	; 0xc00
   3a19c:	str	r6, [fp, #-72]	; 0xffffffb8
   3a1a0:	sub	sl, lr, #120	; 0x78
   3a1a4:	sub	lr, fp, #3072	; 0xc00
   3a1a8:	sub	r0, fp, #72	; 0x48
   3a1ac:	mov	r3, #0
   3a1b0:	sub	r2, lr, #84	; 0x54
   3a1b4:	bl	36d70 <__assert_fail@plt+0x241b4>
   3a1b8:	ldr	r1, [sp, #16]
   3a1bc:	ldr	r6, [fp, #-72]	; 0xffffffb8
   3a1c0:	mov	r5, r0
   3a1c4:	cmp	r0, #0
   3a1c8:	str	r0, [r4, r1, lsl #2]
   3a1cc:	bne	3a1d8 <__assert_fail@plt+0x2761c>
   3a1d0:	cmp	r6, #0
   3a1d4:	bne	3a41c <__assert_fail@plt+0x27860>
   3a1d8:	ldrsb	r0, [r5, #52]	; 0x34
   3a1dc:	cmn	r0, #1
   3a1e0:	ble	3a1f8 <__assert_fail@plt+0x2763c>
   3a1e4:	sub	lr, fp, #3072	; 0xc00
   3a1e8:	str	r5, [r9, r1, lsl #2]
   3a1ec:	sub	r0, lr, #72	; 0x48
   3a1f0:	str	r5, [r0, r1, lsl #2]
   3a1f4:	b	3a298 <__assert_fail@plt+0x276dc>
   3a1f8:	ldr	r1, [sp, #20]
   3a1fc:	sub	lr, fp, #3072	; 0xc00
   3a200:	sub	r0, fp, #72	; 0x48
   3a204:	mov	r3, #1
   3a208:	sub	r2, lr, #84	; 0x54
   3a20c:	bl	36d70 <__assert_fail@plt+0x241b4>
   3a210:	ldr	r1, [sp, #16]
   3a214:	cmp	r0, #0
   3a218:	str	r0, [r9, r1, lsl #2]
   3a21c:	bne	3a22c <__assert_fail@plt+0x27670>
   3a220:	ldr	r1, [fp, #-72]	; 0xffffffb8
   3a224:	cmp	r1, #0
   3a228:	bne	3a41c <__assert_fail@plt+0x27860>
   3a22c:	cmp	r5, r0
   3a230:	beq	3a258 <__assert_fail@plt+0x2769c>
   3a234:	ldr	r1, [sp, #20]
   3a238:	ldr	r2, [sp, #4]
   3a23c:	ldr	r0, [r1, #92]	; 0x5c
   3a240:	cmp	r0, #1
   3a244:	mov	r0, #0
   3a248:	movwgt	r0, #1
   3a24c:	orr	r2, r2, r0
   3a250:	str	r2, [sp, #4]
   3a254:	b	3a25c <__assert_fail@plt+0x276a0>
   3a258:	ldr	r1, [sp, #20]
   3a25c:	sub	lr, fp, #3072	; 0xc00
   3a260:	sub	r0, fp, #72	; 0x48
   3a264:	mov	r3, #2
   3a268:	sub	r2, lr, #84	; 0x54
   3a26c:	bl	36d70 <__assert_fail@plt+0x241b4>
   3a270:	ldr	r2, [sp, #16]
   3a274:	ldr	r6, [fp, #-72]	; 0xffffffb8
   3a278:	sub	lr, fp, #3072	; 0xc00
   3a27c:	cmp	r0, #0
   3a280:	sub	r1, lr, #72	; 0x48
   3a284:	str	r0, [r1, r2, lsl #2]
   3a288:	mov	r1, r2
   3a28c:	bne	3a298 <__assert_fail@plt+0x276dc>
   3a290:	cmp	r6, #0
   3a294:	bne	3a41c <__assert_fail@plt+0x27860>
   3a298:	mov	r0, #0
   3a29c:	add	r2, sl, r0
   3a2a0:	add	r3, r7, r0
   3a2a4:	add	r0, r0, #16
   3a2a8:	vld1.32	{d16-d17}, [r3]
   3a2ac:	vld1.32	{d18-d19}, [r2]
   3a2b0:	cmp	r0, #32
   3a2b4:	vorr	q8, q9, q8
   3a2b8:	vst1.32	{d16-d17}, [r2]
   3a2bc:	bne	3a29c <__assert_fail@plt+0x276e0>
   3a2c0:	add	r1, r1, #1
   3a2c4:	add	r7, r7, #32
   3a2c8:	cmp	r1, r8
   3a2cc:	blt	3a118 <__assert_fail@plt+0x2755c>
   3a2d0:	ldr	r0, [sp, #4]
   3a2d4:	tst	r0, #1
   3a2d8:	bne	3a4d8 <__assert_fail@plt+0x2791c>
   3a2dc:	mov	r0, #4
   3a2e0:	mov	r1, #256	; 0x100
   3a2e4:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   3a2e8:	ldr	r1, [sp, #12]
   3a2ec:	cmp	r0, #0
   3a2f0:	str	r0, [r1, #44]	; 0x2c
   3a2f4:	beq	3a41c <__assert_fail@plt+0x27860>
   3a2f8:	mov	r1, #0
   3a2fc:	add	sl, sp, #24
   3a300:	mov	r3, #0
   3a304:	sub	lr, fp, #3072	; 0xc00
   3a308:	sub	r2, lr, #120	; 0x78
   3a30c:	ldr	r7, [r2, r3, lsl #2]
   3a310:	cmp	r7, #0
   3a314:	beq	3a388 <__assert_fail@plt+0x277cc>
   3a318:	ldr	r2, [sp, #20]
   3a31c:	lsl	r5, r3, #5
   3a320:	add	r6, r2, r3, lsl #2
   3a324:	add	ip, r6, #96	; 0x60
   3a328:	mov	r6, #1
   3a32c:	b	3a368 <__assert_fail@plt+0x277ac>
   3a330:	mov	lr, #0
   3a334:	ldr	r8, [sl, lr, lsl #3]
   3a338:	add	lr, lr, #4
   3a33c:	tst	r8, r6
   3a340:	beq	3a334 <__assert_fail@plt+0x27778>
   3a344:	ldr	r2, [ip]
   3a348:	ldr	r8, [sp, #8]
   3a34c:	tst	r2, r6
   3a350:	mov	r2, r9
   3a354:	moveq	r2, r4
   3a358:	add	r2, r2, lr
   3a35c:	ldr	r2, [r2, #-4]
   3a360:	str	r2, [r0, r5, lsl #2]
   3a364:	b	3a370 <__assert_fail@plt+0x277b4>
   3a368:	tst	r7, #1
   3a36c:	bne	3a330 <__assert_fail@plt+0x27774>
   3a370:	lsr	r2, r7, #1
   3a374:	cmp	r1, r7, lsr #1
   3a378:	add	r5, r5, #1
   3a37c:	lsl	r6, r6, #1
   3a380:	mov	r7, r2
   3a384:	bne	3a368 <__assert_fail@plt+0x277ac>
   3a388:	add	r3, r3, #1
   3a38c:	add	sl, sl, #4
   3a390:	cmp	r3, #8
   3a394:	bne	3a304 <__assert_fail@plt+0x27748>
   3a398:	ldrb	r1, [fp, #-3191]	; 0xfffff389
   3a39c:	sub	lr, fp, #6144	; 0x1800
   3a3a0:	sub	r4, lr, #120	; 0x78
   3a3a4:	tst	r1, #4
   3a3a8:	beq	3a3f0 <__assert_fail@plt+0x27834>
   3a3ac:	mov	r1, #0
   3a3b0:	add	r2, sp, #24
   3a3b4:	add	r3, r2, r1, lsl #5
   3a3b8:	ldrb	r3, [r3, #1]
   3a3bc:	tst	r3, #4
   3a3c0:	bne	3a3d4 <__assert_fail@plt+0x27818>
   3a3c4:	add	r1, r1, #1
   3a3c8:	cmp	r1, r8
   3a3cc:	blt	3a3b4 <__assert_fail@plt+0x277f8>
   3a3d0:	b	3a3f0 <__assert_fail@plt+0x27834>
   3a3d4:	sub	lr, fp, #3072	; 0xc00
   3a3d8:	sub	r2, lr, #72	; 0x48
   3a3dc:	ldr	r1, [r2, r1, lsl #2]
   3a3e0:	ldr	r2, [sp, #4]
   3a3e4:	tst	r2, #1
   3a3e8:	str	r1, [r0, #40]	; 0x28
   3a3ec:	strne	r1, [r0, #1064]	; 0x428
   3a3f0:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   3a3f4:	bl	2c048 <__assert_fail@plt+0x1948c>
   3a3f8:	add	r4, r4, #8
   3a3fc:	ldr	r0, [r4], #12
   3a400:	bl	2c048 <__assert_fail@plt+0x1948c>
   3a404:	subs	r8, r8, #1
   3a408:	bne	3a3fc <__assert_fail@plt+0x27840>
   3a40c:	mov	r0, #1
   3a410:	b	3a4ac <__assert_fail@plt+0x278f0>
   3a414:	ldr	r8, [sp, #8]
   3a418:	str	r0, [fp, #-72]	; 0xffffffb8
   3a41c:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   3a420:	bl	2c048 <__assert_fail@plt+0x1948c>
   3a424:	cmp	r8, #1
   3a428:	blt	3a448 <__assert_fail@plt+0x2788c>
   3a42c:	sub	lr, fp, #6144	; 0x1800
   3a430:	sub	r0, lr, #120	; 0x78
   3a434:	add	r4, r0, #8
   3a438:	ldr	r0, [r4], #12
   3a43c:	bl	2c048 <__assert_fail@plt+0x1948c>
   3a440:	subs	r8, r8, #1
   3a444:	bne	3a438 <__assert_fail@plt+0x2787c>
   3a448:	mov	r0, #0
   3a44c:	b	3a4ac <__assert_fail@plt+0x278f0>
   3a450:	mov	r7, r8
   3a454:	ldr	r1, [sp, #12]
   3a458:	mvn	r8, #0
   3a45c:	cmp	r7, #1
   3a460:	blt	3a484 <__assert_fail@plt+0x278c8>
   3a464:	sub	lr, fp, #6144	; 0x1800
   3a468:	sub	r0, lr, #120	; 0x78
   3a46c:	add	r4, r0, #8
   3a470:	ldr	r0, [r4], #12
   3a474:	bl	2c048 <__assert_fail@plt+0x1948c>
   3a478:	subs	r7, r7, #1
   3a47c:	bne	3a470 <__assert_fail@plt+0x278b4>
   3a480:	ldr	r1, [sp, #12]
   3a484:	mov	r0, #0
   3a488:	cmp	r8, #0
   3a48c:	bne	3a4ac <__assert_fail@plt+0x278f0>
   3a490:	mov	r4, r1
   3a494:	mov	r0, #4
   3a498:	mov	r1, #256	; 0x100
   3a49c:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   3a4a0:	cmp	r0, #0
   3a4a4:	str	r0, [r4, #44]	; 0x2c
   3a4a8:	movwne	r0, #1
   3a4ac:	sub	sp, fp, #64	; 0x40
   3a4b0:	vpop	{d8-d11}
   3a4b4:	add	sp, sp, #4
   3a4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a4bc:	mov	r0, #0
   3a4c0:	str	r0, [r6]
   3a4c4:	str	r0, [r5]
   3a4c8:	b	3a454 <__assert_fail@plt+0x27898>
   3a4cc:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   3a4d0:	bl	2c048 <__assert_fail@plt+0x1948c>
   3a4d4:	b	3a42c <__assert_fail@plt+0x27870>
   3a4d8:	mov	r0, #4
   3a4dc:	mov	r1, #512	; 0x200
   3a4e0:	bl	2baa4 <__assert_fail@plt+0x18ee8>
   3a4e4:	ldr	r1, [sp, #12]
   3a4e8:	cmp	r0, #0
   3a4ec:	str	r0, [r1, #48]	; 0x30
   3a4f0:	beq	3a41c <__assert_fail@plt+0x27860>
   3a4f4:	sub	ip, r4, #4
   3a4f8:	sub	lr, r9, #4
   3a4fc:	mov	r3, #0
   3a500:	add	r7, sp, #24
   3a504:	mov	r6, #0
   3a508:	ldr	r5, [sl, r6, lsl #2]
   3a50c:	cmp	r5, #0
   3a510:	beq	3a584 <__assert_fail@plt+0x279c8>
   3a514:	lsl	r4, r6, #5
   3a518:	mov	r1, #1
   3a51c:	b	3a564 <__assert_fail@plt+0x279a8>
   3a520:	mov	sl, r7
   3a524:	mov	r9, ip
   3a528:	mov	r8, lr
   3a52c:	ldr	r2, [sl], #32
   3a530:	add	r9, r9, #4
   3a534:	add	r8, r8, #4
   3a538:	tst	r2, r1
   3a53c:	beq	3a52c <__assert_fail@plt+0x27970>
   3a540:	ldr	r9, [r9]
   3a544:	mov	sl, r0
   3a548:	str	r9, [sl, r4, lsl #2]!
   3a54c:	ldr	r2, [r8]
   3a550:	ldr	r8, [sp, #8]
   3a554:	str	r2, [sl, #1024]	; 0x400
   3a558:	sub	r2, fp, #3072	; 0xc00
   3a55c:	sub	sl, r2, #120	; 0x78
   3a560:	b	3a56c <__assert_fail@plt+0x279b0>
   3a564:	tst	r5, #1
   3a568:	bne	3a520 <__assert_fail@plt+0x27964>
   3a56c:	lsr	r2, r5, #1
   3a570:	cmp	r3, r5, lsr #1
   3a574:	add	r4, r4, #1
   3a578:	lsl	r1, r1, #1
   3a57c:	mov	r5, r2
   3a580:	bne	3a564 <__assert_fail@plt+0x279a8>
   3a584:	add	r6, r6, #1
   3a588:	add	r7, r7, #4
   3a58c:	cmp	r6, #8
   3a590:	bne	3a508 <__assert_fail@plt+0x2794c>
   3a594:	b	3a398 <__assert_fail@plt+0x277dc>
   3a598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a59c:	add	fp, sp, #28
   3a5a0:	sub	sp, sp, #44	; 0x2c
   3a5a4:	ldr	r4, [r1, #8]
   3a5a8:	ldr	r6, [r1, #12]
   3a5ac:	mov	r9, r0
   3a5b0:	mov	r0, #1
   3a5b4:	mov	sl, r1
   3a5b8:	str	r0, [sp, #36]	; 0x24
   3a5bc:	str	r0, [sp, #32]
   3a5c0:	mov	r0, #4
   3a5c4:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   3a5c8:	cmp	r0, #0
   3a5cc:	str	r0, [sp, #40]	; 0x28
   3a5d0:	beq	3a81c <__assert_fail@plt+0x27c60>
   3a5d4:	str	r4, [r0]
   3a5d8:	add	r3, sp, #32
   3a5dc:	mov	r0, r9
   3a5e0:	mov	r1, sl
   3a5e4:	mov	r2, r6
   3a5e8:	bl	3a8dc <__assert_fail@plt+0x27d20>
   3a5ec:	cmp	r0, #0
   3a5f0:	bne	3a7e0 <__assert_fail@plt+0x27c24>
   3a5f4:	add	r0, sl, #16
   3a5f8:	mov	r1, #0
   3a5fc:	str	r0, [sp, #12]
   3a600:	cmp	r6, #1
   3a604:	blt	3a7f0 <__assert_fail@plt+0x27c34>
   3a608:	ldr	r0, [sl]
   3a60c:	ldr	r2, [r0, r6, lsl #2]
   3a610:	cmp	r2, #0
   3a614:	mov	r2, #0
   3a618:	addeq	r2, r1, #1
   3a61c:	ldr	r1, [r9, #120]	; 0x78
   3a620:	cmp	r2, r1
   3a624:	bgt	3a7f8 <__assert_fail@plt+0x27c3c>
   3a628:	mov	r0, #0
   3a62c:	str	r6, [sp, #16]
   3a630:	sub	r6, r6, #1
   3a634:	str	r2, [sp, #8]
   3a638:	str	r0, [sp, #36]	; 0x24
   3a63c:	ldr	r0, [r9, #100]	; 0x64
   3a640:	ldr	r1, [r0, r6, lsl #2]
   3a644:	cmp	r1, #0
   3a648:	beq	3a7c0 <__assert_fail@plt+0x27c04>
   3a64c:	ldr	r0, [r1, #20]
   3a650:	cmp	r0, #1
   3a654:	blt	3a7c0 <__assert_fail@plt+0x27c04>
   3a658:	ldr	r0, [r9, #84]	; 0x54
   3a65c:	mov	r5, #0
   3a660:	str	r1, [sp, #24]
   3a664:	str	r0, [sp, #28]
   3a668:	ldr	r0, [r1, #24]
   3a66c:	ldr	r7, [r0, r5, lsl #2]
   3a670:	ldr	r0, [sp, #28]
   3a674:	ldr	r0, [r0]
   3a678:	add	r0, r0, r7, lsl #3
   3a67c:	ldrb	r0, [r0, #6]
   3a680:	tst	r0, #16
   3a684:	bne	3a6e0 <__assert_fail@plt+0x27b24>
   3a688:	ldr	r0, [sp, #28]
   3a68c:	mov	r2, r6
   3a690:	ldr	r0, [r0]
   3a694:	add	r1, r0, r7, lsl #3
   3a698:	mov	r0, r9
   3a69c:	bl	39958 <__assert_fail@plt+0x26d9c>
   3a6a0:	cmp	r0, #0
   3a6a4:	beq	3a7ac <__assert_fail@plt+0x27bf0>
   3a6a8:	ldr	r0, [sl]
   3a6ac:	ldr	r1, [sp, #16]
   3a6b0:	ldr	r0, [r0, r1, lsl #2]
   3a6b4:	cmp	r0, #0
   3a6b8:	beq	3a7ac <__assert_fail@plt+0x27bf0>
   3a6bc:	ldr	r1, [sp, #28]
   3a6c0:	add	r0, r0, #4
   3a6c4:	ldr	r1, [r1, #12]
   3a6c8:	ldr	r1, [r1, r7, lsl #2]
   3a6cc:	bl	36d0c <__assert_fail@plt+0x24150>
   3a6d0:	mov	r4, #1
   3a6d4:	cmp	r0, #0
   3a6d8:	bne	3a760 <__assert_fail@plt+0x27ba4>
   3a6dc:	b	3a7ac <__assert_fail@plt+0x27bf0>
   3a6e0:	ldr	r0, [sl, #12]
   3a6e4:	ldr	r8, [r9, #84]	; 0x54
   3a6e8:	mov	r2, r9
   3a6ec:	mov	r1, r7
   3a6f0:	mov	r3, r6
   3a6f4:	str	r0, [sp, #20]
   3a6f8:	mov	r0, r8
   3a6fc:	bl	39668 <__assert_fail@plt+0x26aac>
   3a700:	mov	r4, r0
   3a704:	cmp	r0, #1
   3a708:	blt	3a728 <__assert_fail@plt+0x27b6c>
   3a70c:	ldr	r1, [sp, #20]
   3a710:	add	r0, r4, r6
   3a714:	mov	r2, r6
   3a718:	cmp	r0, r1
   3a71c:	ble	3a734 <__assert_fail@plt+0x27b78>
   3a720:	mov	r6, r2
   3a724:	b	3a760 <__assert_fail@plt+0x27ba4>
   3a728:	cmp	r4, #0
   3a72c:	bne	3a760 <__assert_fail@plt+0x27ba4>
   3a730:	b	3a688 <__assert_fail@plt+0x27acc>
   3a734:	ldr	r1, [sl]
   3a738:	mov	r6, r2
   3a73c:	ldr	r0, [r1, r0, lsl #2]
   3a740:	cmp	r0, #0
   3a744:	beq	3a688 <__assert_fail@plt+0x27acc>
   3a748:	ldr	r1, [r8, #12]
   3a74c:	add	r0, r0, #4
   3a750:	ldr	r1, [r1, r7, lsl #2]
   3a754:	bl	36d0c <__assert_fail@plt+0x24150>
   3a758:	cmp	r0, #0
   3a75c:	beq	3a688 <__assert_fail@plt+0x27acc>
   3a760:	ldr	r0, [sl, #20]
   3a764:	cmp	r0, #0
   3a768:	beq	3a798 <__assert_fail@plt+0x27bdc>
   3a76c:	ldr	r0, [sp, #28]
   3a770:	ldr	r1, [sp, #12]
   3a774:	add	r3, r4, r6
   3a778:	ldr	r0, [r0, #12]
   3a77c:	ldr	r2, [r0, r7, lsl #2]
   3a780:	mov	r0, r9
   3a784:	str	r7, [sp]
   3a788:	str	r6, [sp, #4]
   3a78c:	bl	3b408 <__assert_fail@plt+0x2884c>
   3a790:	cmp	r0, #0
   3a794:	bne	3a7ac <__assert_fail@plt+0x27bf0>
   3a798:	add	r0, sp, #32
   3a79c:	mov	r1, r7
   3a7a0:	bl	36af4 <__assert_fail@plt+0x23f38>
   3a7a4:	cmp	r0, #0
   3a7a8:	beq	3a7e8 <__assert_fail@plt+0x27c2c>
   3a7ac:	ldr	r1, [sp, #24]
   3a7b0:	add	r5, r5, #1
   3a7b4:	ldr	r0, [r1, #20]
   3a7b8:	cmp	r5, r0
   3a7bc:	blt	3a668 <__assert_fail@plt+0x27aac>
   3a7c0:	mov	r0, r9
   3a7c4:	mov	r1, sl
   3a7c8:	mov	r2, r6
   3a7cc:	add	r3, sp, #32
   3a7d0:	bl	3a8dc <__assert_fail@plt+0x27d20>
   3a7d4:	ldr	r1, [sp, #8]
   3a7d8:	cmp	r0, #0
   3a7dc:	beq	3a600 <__assert_fail@plt+0x27a44>
   3a7e0:	mov	r4, r0
   3a7e4:	b	3a808 <__assert_fail@plt+0x27c4c>
   3a7e8:	mov	r4, #12
   3a7ec:	b	3a808 <__assert_fail@plt+0x27c4c>
   3a7f0:	mov	r4, #0
   3a7f4:	b	3a808 <__assert_fail@plt+0x27c4c>
   3a7f8:	lsl	r2, r6, #2
   3a7fc:	mov	r1, #0
   3a800:	mov	r4, #0
   3a804:	bl	12904 <memset@plt>
   3a808:	ldr	r0, [sp, #40]	; 0x28
   3a80c:	bl	2c048 <__assert_fail@plt+0x1948c>
   3a810:	mov	r0, r4
   3a814:	sub	sp, fp, #28
   3a818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a81c:	mov	r0, #0
   3a820:	mov	r4, #12
   3a824:	str	r0, [sp, #32]
   3a828:	str	r0, [sp, #36]	; 0x24
   3a82c:	b	3a810 <__assert_fail@plt+0x27c54>
   3a830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a834:	add	fp, sp, #28
   3a838:	sub	sp, sp, #20
   3a83c:	cmp	r3, #1
   3a840:	blt	3a8d0 <__assert_fail@plt+0x27d14>
   3a844:	mov	r4, r3
   3a848:	mov	r5, r2
   3a84c:	mov	r6, r1
   3a850:	mov	sl, r0
   3a854:	mov	r7, #0
   3a858:	add	r8, sp, #4
   3a85c:	add	r9, sp, #16
   3a860:	ldr	r1, [r6, r7, lsl #2]
   3a864:	ldr	r0, [r5, r7, lsl #2]
   3a868:	cmp	r1, #0
   3a86c:	beq	3a8c0 <__assert_fail@plt+0x27d04>
   3a870:	cmp	r0, #0
   3a874:	beq	3a8c4 <__assert_fail@plt+0x27d08>
   3a878:	add	r2, r0, #4
   3a87c:	add	r1, r1, #4
   3a880:	mov	r0, r8
   3a884:	bl	3851c <__assert_fail@plt+0x25960>
   3a888:	cmp	r0, #0
   3a88c:	str	r0, [sp, #16]
   3a890:	bne	3a8d4 <__assert_fail@plt+0x27d18>
   3a894:	mov	r0, r9
   3a898:	mov	r1, sl
   3a89c:	mov	r2, r8
   3a8a0:	bl	3946c <__assert_fail@plt+0x268b0>
   3a8a4:	str	r0, [r6, r7, lsl #2]
   3a8a8:	ldr	r0, [sp, #12]
   3a8ac:	bl	2c048 <__assert_fail@plt+0x1948c>
   3a8b0:	ldr	r0, [sp, #16]
   3a8b4:	cmp	r0, #0
   3a8b8:	beq	3a8c4 <__assert_fail@plt+0x27d08>
   3a8bc:	b	3a8d4 <__assert_fail@plt+0x27d18>
   3a8c0:	str	r0, [r6, r7, lsl #2]
   3a8c4:	add	r7, r7, #1
   3a8c8:	cmp	r7, r4
   3a8cc:	blt	3a860 <__assert_fail@plt+0x27ca4>
   3a8d0:	mov	r0, #0
   3a8d4:	sub	sp, fp, #28
   3a8d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a8dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a8e0:	add	fp, sp, #28
   3a8e4:	sub	sp, sp, #84	; 0x54
   3a8e8:	mov	r6, r3
   3a8ec:	mov	r3, #0
   3a8f0:	ldr	r7, [r0, #84]	; 0x54
   3a8f4:	mov	r4, r2
   3a8f8:	str	r0, [sp, #44]	; 0x2c
   3a8fc:	str	r1, [sp, #48]	; 0x30
   3a900:	str	r3, [sp, #52]	; 0x34
   3a904:	str	r4, [sp, #40]	; 0x28
   3a908:	ldr	r2, [r0, #100]	; 0x64
   3a90c:	ldr	r8, [r2, r4, lsl #2]
   3a910:	ldr	r2, [r6, #4]
   3a914:	cmp	r8, #0
   3a918:	mov	r0, r8
   3a91c:	addne	r0, r0, #4
   3a920:	cmp	r2, #0
   3a924:	str	r0, [sp, #36]	; 0x24
   3a928:	beq	3aca8 <__assert_fail@plt+0x280ec>
   3a92c:	cmp	r8, #0
   3a930:	beq	3ac7c <__assert_fail@plt+0x280c0>
   3a934:	mov	r0, #0
   3a938:	mov	r1, r7
   3a93c:	mov	r2, r6
   3a940:	str	r7, [sp, #28]
   3a944:	str	r6, [sp, #20]
   3a948:	str	r0, [sp, #56]	; 0x38
   3a94c:	add	r0, sp, #56	; 0x38
   3a950:	bl	3946c <__assert_fail@plt+0x268b0>
   3a954:	ldr	r9, [sp, #56]	; 0x38
   3a958:	cmp	r9, #0
   3a95c:	bne	3afc4 <__assert_fail@plt+0x28408>
   3a960:	mov	r6, r0
   3a964:	mov	r5, r0
   3a968:	ldr	r2, [sp, #20]
   3a96c:	ldr	r0, [r6, #28]!
   3a970:	cmp	r0, #0
   3a974:	bne	3aa08 <__assert_fail@plt+0x27e4c>
   3a978:	ldr	r0, [r2, #4]
   3a97c:	mov	r4, #0
   3a980:	mov	r7, r2
   3a984:	str	r0, [r5, #28]
   3a988:	lsl	r0, r0, #2
   3a98c:	str	r4, [r5, #32]
   3a990:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   3a994:	cmp	r0, #0
   3a998:	mov	r9, #12
   3a99c:	str	r0, [r5, #36]	; 0x24
   3a9a0:	movweq	r4, #12
   3a9a4:	str	r4, [sp, #56]	; 0x38
   3a9a8:	beq	3afc4 <__assert_fail@plt+0x28408>
   3a9ac:	ldr	r0, [r7, #4]
   3a9b0:	mov	r2, r7
   3a9b4:	cmp	r0, #1
   3a9b8:	blt	3aa08 <__assert_fail@plt+0x27e4c>
   3a9bc:	mov	r5, #0
   3a9c0:	ldr	r0, [r2, #8]
   3a9c4:	ldr	r1, [sp, #28]
   3a9c8:	mov	r4, r2
   3a9cc:	ldr	r0, [r0, r5, lsl #2]
   3a9d0:	ldr	r1, [r1, #28]
   3a9d4:	add	r0, r0, r0, lsl #1
   3a9d8:	add	r1, r1, r0, lsl #2
   3a9dc:	mov	r0, r6
   3a9e0:	bl	368e0 <__assert_fail@plt+0x23d24>
   3a9e4:	cmp	r0, #0
   3a9e8:	bne	3afd4 <__assert_fail@plt+0x28418>
   3a9ec:	ldr	r0, [r4, #4]
   3a9f0:	add	r5, r5, #1
   3a9f4:	mov	r2, r4
   3a9f8:	cmp	r5, r0
   3a9fc:	blt	3a9c0 <__assert_fail@plt+0x27e04>
   3aa00:	mov	r0, #0
   3aa04:	str	r0, [sp, #56]	; 0x38
   3aa08:	ldr	r1, [sp, #36]	; 0x24
   3aa0c:	mov	r0, r2
   3aa10:	mov	r2, r6
   3aa14:	bl	3aff0 <__assert_fail@plt+0x28434>
   3aa18:	cmp	r0, #0
   3aa1c:	str	r0, [sp, #52]	; 0x34
   3aa20:	bne	3afe8 <__assert_fail@plt+0x2842c>
   3aa24:	ldr	ip, [sp, #48]	; 0x30
   3aa28:	ldr	r4, [sp, #40]	; 0x28
   3aa2c:	ldr	r7, [sp, #28]
   3aa30:	ldr	r6, [sp, #20]
   3aa34:	ldr	r0, [ip, #20]
   3aa38:	cmp	r0, #0
   3aa3c:	beq	3ac7c <__assert_fail@plt+0x280c0>
   3aa40:	cmp	r0, #1
   3aa44:	str	r8, [sp, #12]
   3aa48:	blt	3ac70 <__assert_fail@plt+0x280b4>
   3aa4c:	ldr	r0, [sp, #44]	; 0x2c
   3aa50:	mov	r8, #0
   3aa54:	ldr	r0, [r0, #116]	; 0x74
   3aa58:	str	r0, [sp, #24]
   3aa5c:	ldr	r0, [ip, #24]
   3aa60:	ldr	r1, [sp, #24]
   3aa64:	ldr	r0, [r0, r8, lsl #2]
   3aa68:	add	r0, r0, r0, lsl #1
   3aa6c:	add	r1, r1, r0, lsl #3
   3aa70:	ldr	r2, [r1, #8]
   3aa74:	cmp	r2, r4
   3aa78:	bge	3ac60 <__assert_fail@plt+0x280a4>
   3aa7c:	ldr	r1, [r1, #4]
   3aa80:	cmp	r1, r4
   3aa84:	blt	3ac60 <__assert_fail@plt+0x280a4>
   3aa88:	ldr	r1, [sp, #24]
   3aa8c:	ldr	r2, [r7]
   3aa90:	ldr	r0, [r1, r0, lsl #3]!
   3aa94:	ldr	r1, [r1, #12]
   3aa98:	ldr	sl, [r2, r0, lsl #3]
   3aa9c:	ldr	r0, [r6, #4]
   3aaa0:	cmp	r1, r4
   3aaa4:	bne	3ab60 <__assert_fail@plt+0x27fa4>
   3aaa8:	cmp	r0, #1
   3aaac:	blt	3ac60 <__assert_fail@plt+0x280a4>
   3aab0:	ldr	r3, [r6, #8]
   3aab4:	mvn	r1, #0
   3aab8:	str	r1, [sp, #32]
   3aabc:	mvn	r1, #0
   3aac0:	ldr	r5, [r3]
   3aac4:	add	r4, r2, r5, lsl #3
   3aac8:	ldrb	r4, [r4, #4]
   3aacc:	cmp	r4, #9
   3aad0:	beq	3aaec <__assert_fail@plt+0x27f30>
   3aad4:	cmp	r4, #8
   3aad8:	bne	3ab00 <__assert_fail@plt+0x27f44>
   3aadc:	ldr	r4, [r2, r5, lsl #3]
   3aae0:	cmp	sl, r4
   3aae4:	moveq	r1, r5
   3aae8:	b	3ab00 <__assert_fail@plt+0x27f44>
   3aaec:	ldr	r4, [r2, r5, lsl #3]
   3aaf0:	cmp	sl, r4
   3aaf4:	ldr	r4, [sp, #32]
   3aaf8:	moveq	r4, r5
   3aafc:	str	r4, [sp, #32]
   3ab00:	add	r3, r3, #4
   3ab04:	subs	r0, r0, #1
   3ab08:	bne	3aac0 <__assert_fail@plt+0x27f04>
   3ab0c:	cmp	r1, #0
   3ab10:	blt	3ab38 <__assert_fail@plt+0x27f7c>
   3ab14:	ldr	r3, [sp, #36]	; 0x24
   3ab18:	mov	r0, r7
   3ab1c:	mov	r2, r6
   3ab20:	bl	3b1f8 <__assert_fail@plt+0x2863c>
   3ab24:	ldr	r6, [sp, #20]
   3ab28:	ldr	r7, [sp, #28]
   3ab2c:	ldr	ip, [sp, #48]	; 0x30
   3ab30:	cmp	r0, #0
   3ab34:	bne	3afc0 <__assert_fail@plt+0x28404>
   3ab38:	ldr	sl, [sp, #32]
   3ab3c:	ldr	r4, [sp, #40]	; 0x28
   3ab40:	cmp	sl, #0
   3ab44:	blt	3ac60 <__assert_fail@plt+0x280a4>
   3ab48:	ldr	r0, [r6, #4]
   3ab4c:	cmp	r0, #1
   3ab50:	str	r0, [sp, #16]
   3ab54:	blt	3ac60 <__assert_fail@plt+0x280a4>
   3ab58:	mov	r5, #0
   3ab5c:	b	3ac08 <__assert_fail@plt+0x2804c>
   3ab60:	cmp	r0, #1
   3ab64:	blt	3ac60 <__assert_fail@plt+0x280a4>
   3ab68:	mov	r5, #0
   3ab6c:	ldr	r1, [r6, #8]
   3ab70:	ldr	r1, [r1, r5, lsl #2]
   3ab74:	add	r3, r2, r1, lsl #3
   3ab78:	ldr	r3, [r3, #4]
   3ab7c:	and	r3, r3, #254	; 0xfe
   3ab80:	orr	r3, r3, #1
   3ab84:	cmp	r3, #9
   3ab88:	ldreq	r2, [r2, r1, lsl #3]
   3ab8c:	cmpeq	sl, r2
   3ab90:	beq	3aba8 <__assert_fail@plt+0x27fec>
   3ab94:	add	r5, r5, #1
   3ab98:	cmp	r5, r0
   3ab9c:	bge	3ac60 <__assert_fail@plt+0x280a4>
   3aba0:	ldr	r2, [r7]
   3aba4:	b	3ab6c <__assert_fail@plt+0x27fb0>
   3aba8:	ldr	r3, [sp, #36]	; 0x24
   3abac:	mov	r0, r7
   3abb0:	mov	r2, r6
   3abb4:	bl	3b1f8 <__assert_fail@plt+0x2863c>
   3abb8:	cmp	r0, #0
   3abbc:	bne	3afc0 <__assert_fail@plt+0x28404>
   3abc0:	ldr	r0, [r6, #4]
   3abc4:	ldr	r4, [sp, #40]	; 0x28
   3abc8:	ldr	ip, [sp, #48]	; 0x30
   3abcc:	ldr	r7, [sp, #28]
   3abd0:	b	3ab94 <__assert_fail@plt+0x27fd8>
   3abd4:	mov	r1, r6
   3abd8:	ldr	r6, [sp, #20]
   3abdc:	ldr	r3, [sp, #36]	; 0x24
   3abe0:	mov	r0, r7
   3abe4:	mov	r2, r6
   3abe8:	bl	3b1f8 <__assert_fail@plt+0x2863c>
   3abec:	cmp	r0, #0
   3abf0:	bne	3afc0 <__assert_fail@plt+0x28404>
   3abf4:	ldr	r0, [r6, #4]
   3abf8:	ldr	r7, [sp, #28]
   3abfc:	sub	r5, r5, #1
   3ac00:	str	r0, [sp, #16]
   3ac04:	b	3ac48 <__assert_fail@plt+0x2808c>
   3ac08:	ldr	r0, [r6, #8]
   3ac0c:	mov	r1, sl
   3ac10:	ldr	r6, [r0, r5, lsl #2]
   3ac14:	ldr	r0, [r7, #28]
   3ac18:	add	r9, r6, r6, lsl #1
   3ac1c:	add	r0, r0, r9, lsl #2
   3ac20:	bl	36d0c <__assert_fail@plt+0x24150>
   3ac24:	cmp	r0, #0
   3ac28:	bne	3ac44 <__assert_fail@plt+0x28088>
   3ac2c:	ldr	r0, [r7, #24]
   3ac30:	mov	r1, sl
   3ac34:	add	r0, r0, r9, lsl #2
   3ac38:	bl	36d0c <__assert_fail@plt+0x24150>
   3ac3c:	cmp	r0, #0
   3ac40:	beq	3abd4 <__assert_fail@plt+0x28018>
   3ac44:	ldr	r6, [sp, #20]
   3ac48:	ldr	r0, [sp, #16]
   3ac4c:	ldr	r4, [sp, #40]	; 0x28
   3ac50:	ldr	ip, [sp, #48]	; 0x30
   3ac54:	add	r5, r5, #1
   3ac58:	cmp	r5, r0
   3ac5c:	blt	3ac08 <__assert_fail@plt+0x2804c>
   3ac60:	ldr	r0, [ip, #20]
   3ac64:	add	r8, r8, #1
   3ac68:	cmp	r8, r0
   3ac6c:	blt	3aa5c <__assert_fail@plt+0x27ea0>
   3ac70:	ldr	r8, [sp, #12]
   3ac74:	mov	r0, #0
   3ac78:	str	r0, [sp, #52]	; 0x34
   3ac7c:	add	r0, sp, #52	; 0x34
   3ac80:	mov	r1, r7
   3ac84:	mov	r2, r6
   3ac88:	bl	3946c <__assert_fail@plt+0x268b0>
   3ac8c:	ldr	r1, [sp, #48]	; 0x30
   3ac90:	ldr	r1, [r1]
   3ac94:	str	r0, [r1, r4, lsl #2]
   3ac98:	ldr	r9, [sp, #52]	; 0x34
   3ac9c:	cmp	r9, #0
   3aca0:	beq	3acb0 <__assert_fail@plt+0x280f4>
   3aca4:	b	3afb4 <__assert_fail@plt+0x283f8>
   3aca8:	ldr	r1, [r1]
   3acac:	str	r3, [r1, r4, lsl #2]
   3acb0:	cmp	r8, #0
   3acb4:	beq	3afb0 <__assert_fail@plt+0x283f4>
   3acb8:	ldr	r0, [sp, #44]	; 0x2c
   3acbc:	ldr	r1, [sp, #40]	; 0x28
   3acc0:	ldr	r0, [r0, #100]	; 0x64
   3acc4:	ldr	r0, [r0, r1, lsl #2]
   3acc8:	ldrb	r0, [r0, #52]	; 0x34
   3accc:	tst	r0, #64	; 0x40
   3acd0:	beq	3afb0 <__assert_fail@plt+0x283f4>
   3acd4:	ldr	r0, [sp, #44]	; 0x2c
   3acd8:	ldr	r9, [sp, #40]	; 0x28
   3acdc:	ldr	r8, [r0, #84]	; 0x54
   3ace0:	mov	r1, r9
   3ace4:	bl	38720 <__assert_fail@plt+0x25b64>
   3ace8:	cmn	r0, #1
   3acec:	str	r0, [sp, #16]
   3acf0:	beq	3afa0 <__assert_fail@plt+0x283e4>
   3acf4:	ldr	r0, [sp, #36]	; 0x24
   3acf8:	mov	r6, #0
   3acfc:	str	r6, [sp, #56]	; 0x38
   3ad00:	ldr	r0, [r0, #4]
   3ad04:	cmp	r0, #0
   3ad08:	ble	3afac <__assert_fail@plt+0x283f0>
   3ad0c:	ldr	r3, [sp, #48]	; 0x30
   3ad10:	add	r1, r9, #1
   3ad14:	mov	r7, #0
   3ad18:	str	r1, [sp, #8]
   3ad1c:	add	r1, sp, #56	; 0x38
   3ad20:	add	r1, r1, #16
   3ad24:	str	r1, [sp, #24]
   3ad28:	add	r1, r3, #16
   3ad2c:	str	r1, [sp, #28]
   3ad30:	ldr	r1, [sp, #16]
   3ad34:	add	r1, r1, r1, lsl #1
   3ad38:	str	r1, [sp, #12]
   3ad3c:	ldr	r1, [sp, #36]	; 0x24
   3ad40:	ldr	r2, [r3, #8]
   3ad44:	ldr	r1, [r1, #8]
   3ad48:	ldr	sl, [r1, r7, lsl #2]
   3ad4c:	ldr	r1, [r8]
   3ad50:	add	r1, r1, sl, lsl #3
   3ad54:	cmp	sl, r2
   3ad58:	ldrb	r1, [r1, #4]
   3ad5c:	bne	3ad78 <__assert_fail@plt+0x281bc>
   3ad60:	cmp	r1, #4
   3ad64:	bne	3af70 <__assert_fail@plt+0x283b4>
   3ad68:	ldr	r1, [r3, #12]
   3ad6c:	cmp	r1, r9
   3ad70:	bne	3ad80 <__assert_fail@plt+0x281c4>
   3ad74:	b	3af70 <__assert_fail@plt+0x283b4>
   3ad78:	cmp	r1, #4
   3ad7c:	bne	3af70 <__assert_fail@plt+0x283b4>
   3ad80:	ldr	r0, [sp, #44]	; 0x2c
   3ad84:	ldr	r1, [sp, #12]
   3ad88:	str	r7, [sp, #20]
   3ad8c:	ldr	r7, [sp, #16]
   3ad90:	str	r6, [sp, #32]
   3ad94:	ldr	r0, [r0, #116]	; 0x74
   3ad98:	add	r5, r0, r1, lsl #3
   3ad9c:	b	3aeb0 <__assert_fail@plt+0x282f4>
   3ada0:	ldr	r0, [sp, #32]
   3ada4:	cmp	r0, #0
   3ada8:	bne	3addc <__assert_fail@plt+0x28220>
   3adac:	ldr	r0, [sp, #48]	; 0x30
   3adb0:	mov	r1, #12
   3adb4:	vld1.32	{d16-d17}, [r0], r1
   3adb8:	vld1.32	{d18-d19}, [r0]
   3adbc:	add	r0, sp, #56	; 0x38
   3adc0:	vst1.64	{d16-d17}, [r0], r1
   3adc4:	ldr	r1, [sp, #28]
   3adc8:	vst1.32	{d18-d19}, [r0]
   3adcc:	ldr	r0, [sp, #24]
   3add0:	bl	36c90 <__assert_fail@plt+0x240d4>
   3add4:	cmp	r0, #0
   3add8:	bne	3afcc <__assert_fail@plt+0x28410>
   3addc:	ldr	r4, [sp, #40]	; 0x28
   3ade0:	ldr	r0, [sp, #24]
   3ade4:	mov	r1, r7
   3ade8:	str	r4, [sp, #68]	; 0x44
   3adec:	str	sl, [sp, #64]	; 0x40
   3adf0:	bl	36af4 <__assert_fail@plt+0x23f38>
   3adf4:	cmp	r0, #0
   3adf8:	beq	3afdc <__assert_fail@plt+0x28420>
   3adfc:	ldr	r5, [sp, #56]	; 0x38
   3ae00:	ldr	r0, [sp, #44]	; 0x2c
   3ae04:	add	r1, sp, #56	; 0x38
   3ae08:	ldr	r4, [r5, r4, lsl #2]
   3ae0c:	bl	3a598 <__assert_fail@plt+0x279dc>
   3ae10:	cmp	r0, #0
   3ae14:	bne	3afcc <__assert_fail@plt+0x28410>
   3ae18:	ldr	r0, [sp, #48]	; 0x30
   3ae1c:	ldr	r1, [r0, #4]
   3ae20:	cmp	r1, #0
   3ae24:	beq	3ae40 <__assert_fail@plt+0x28284>
   3ae28:	ldr	r3, [sp, #8]
   3ae2c:	mov	r0, r8
   3ae30:	mov	r2, r5
   3ae34:	bl	3a830 <__assert_fail@plt+0x27c74>
   3ae38:	cmp	r0, #0
   3ae3c:	bne	3afcc <__assert_fail@plt+0x28410>
   3ae40:	ldr	r9, [sp, #40]	; 0x28
   3ae44:	ldr	r0, [sp, #24]
   3ae48:	mov	r1, r7
   3ae4c:	str	r5, [sp, #32]
   3ae50:	str	r4, [r5, r9, lsl #2]
   3ae54:	bl	36d0c <__assert_fail@plt+0x24150>
   3ae58:	subs	r1, r0, #1
   3ae5c:	blt	3ae74 <__assert_fail@plt+0x282b8>
   3ae60:	ldr	r2, [sp, #76]	; 0x4c
   3ae64:	cmp	r2, r0
   3ae68:	subge	r2, r2, #1
   3ae6c:	strge	r2, [sp, #76]	; 0x4c
   3ae70:	bgt	3ae8c <__assert_fail@plt+0x282d0>
   3ae74:	ldr	r0, [sp, #44]	; 0x2c
   3ae78:	add	r1, r7, r7, lsl #1
   3ae7c:	ldr	r0, [r0, #116]	; 0x74
   3ae80:	add	r0, r0, r1, lsl #3
   3ae84:	ldr	r3, [sp, #48]	; 0x30
   3ae88:	b	3af4c <__assert_fail@plt+0x28390>
   3ae8c:	ldr	r3, [sp, #80]	; 0x50
   3ae90:	add	r0, r3, r0, lsl #2
   3ae94:	ldr	r3, [r0]
   3ae98:	add	r1, r1, #1
   3ae9c:	cmp	r1, r2
   3aea0:	str	r3, [r0, #-4]
   3aea4:	add	r0, r0, #4
   3aea8:	blt	3ae94 <__assert_fail@plt+0x282d8>
   3aeac:	b	3ae74 <__assert_fail@plt+0x282b8>
   3aeb0:	ldr	r0, [r5]
   3aeb4:	cmp	r0, sl
   3aeb8:	bne	3af48 <__assert_fail@plt+0x2838c>
   3aebc:	ldr	r0, [r5, #8]
   3aec0:	ldr	r1, [r5, #12]
   3aec4:	subs	r0, r1, r0
   3aec8:	add	r6, r0, r9
   3aecc:	beq	3aedc <__assert_fail@plt+0x28320>
   3aed0:	ldr	r0, [r8, #12]
   3aed4:	add	r0, r0, sl, lsl #2
   3aed8:	b	3aeec <__assert_fail@plt+0x28330>
   3aedc:	ldr	r0, [r8, #20]
   3aee0:	add	r1, sl, sl, lsl #1
   3aee4:	add	r0, r0, r1, lsl #2
   3aee8:	ldr	r0, [r0, #8]
   3aeec:	ldr	r1, [r3, #12]
   3aef0:	cmp	r6, r1
   3aef4:	bgt	3af48 <__assert_fail@plt+0x2838c>
   3aef8:	ldr	r1, [r3]
   3aefc:	ldr	r1, [r1, r6, lsl #2]
   3af00:	cmp	r1, #0
   3af04:	beq	3af48 <__assert_fail@plt+0x2838c>
   3af08:	ldr	r4, [r0]
   3af0c:	add	r0, r1, #4
   3af10:	mov	r1, r4
   3af14:	bl	36d0c <__assert_fail@plt+0x24150>
   3af18:	cmp	r0, #0
   3af1c:	beq	3af40 <__assert_fail@plt+0x28384>
   3af20:	stm	sp, {r4, r6}
   3af24:	mov	r2, sl
   3af28:	mov	r3, r9
   3af2c:	ldr	r0, [sp, #44]	; 0x2c
   3af30:	ldr	r1, [sp, #28]
   3af34:	bl	3b408 <__assert_fail@plt+0x2884c>
   3af38:	cmp	r0, #0
   3af3c:	beq	3ada0 <__assert_fail@plt+0x281e4>
   3af40:	mov	r0, r5
   3af44:	b	3ae84 <__assert_fail@plt+0x282c8>
   3af48:	mov	r0, r5
   3af4c:	add	r5, r0, #24
   3af50:	ldrb	r0, [r0, #20]
   3af54:	add	r7, r7, #1
   3af58:	cmp	r0, #0
   3af5c:	bne	3aeb0 <__assert_fail@plt+0x282f4>
   3af60:	ldr	r0, [sp, #36]	; 0x24
   3af64:	ldr	r7, [sp, #20]
   3af68:	ldr	r6, [sp, #32]
   3af6c:	ldr	r0, [r0, #4]
   3af70:	add	r7, r7, #1
   3af74:	cmp	r7, r0
   3af78:	blt	3ad3c <__assert_fail@plt+0x28180>
   3af7c:	mov	r9, #0
   3af80:	cmp	r6, #0
   3af84:	beq	3af90 <__assert_fail@plt+0x283d4>
   3af88:	ldr	r0, [sp, #80]	; 0x50
   3af8c:	bl	2c048 <__assert_fail@plt+0x1948c>
   3af90:	cmp	r9, #0
   3af94:	str	r9, [sp, #52]	; 0x34
   3af98:	moveq	r9, #0
   3af9c:	b	3afb4 <__assert_fail@plt+0x283f8>
   3afa0:	mov	r0, #0
   3afa4:	str	r0, [sp, #52]	; 0x34
   3afa8:	b	3afb0 <__assert_fail@plt+0x283f4>
   3afac:	str	r6, [sp, #52]	; 0x34
   3afb0:	mov	r9, #0
   3afb4:	mov	r0, r9
   3afb8:	sub	sp, fp, #28
   3afbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afc0:	mov	r9, r0
   3afc4:	str	r9, [sp, #52]	; 0x34
   3afc8:	b	3afb4 <__assert_fail@plt+0x283f8>
   3afcc:	mov	r9, r0
   3afd0:	b	3afe0 <__assert_fail@plt+0x28424>
   3afd4:	str	r0, [sp, #56]	; 0x38
   3afd8:	b	3afc4 <__assert_fail@plt+0x28408>
   3afdc:	mov	r9, #12
   3afe0:	ldr	r6, [sp, #56]	; 0x38
   3afe4:	b	3af80 <__assert_fail@plt+0x283c4>
   3afe8:	mov	r9, r0
   3afec:	b	3afb4 <__assert_fail@plt+0x283f8>
   3aff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aff4:	add	fp, sp, #28
   3aff8:	sub	sp, sp, #12
   3affc:	ldr	ip, [r1, #4]
   3b000:	mov	sl, r0
   3b004:	mov	r0, #0
   3b008:	cmp	ip, #0
   3b00c:	ldrne	lr, [r2, #4]
   3b010:	cmpne	lr, #0
   3b014:	beq	3b1e8 <__assert_fail@plt+0x2862c>
   3b018:	mov	r7, r1
   3b01c:	ldr	r1, [sl, #4]
   3b020:	ldr	r6, [sl]
   3b024:	add	r3, lr, ip
   3b028:	add	r4, r1, r3
   3b02c:	cmp	r4, r6
   3b030:	ble	3b074 <__assert_fail@plt+0x284b8>
   3b034:	mov	r5, r2
   3b038:	mov	r2, sl
   3b03c:	add	r4, r6, r3
   3b040:	ldr	r0, [r2, #8]!
   3b044:	lsl	r1, r4, #2
   3b048:	str	r2, [sp, #8]
   3b04c:	bl	2ecdc <__assert_fail@plt+0x1c120>
   3b050:	cmp	r0, #0
   3b054:	beq	3b1f0 <__assert_fail@plt+0x28634>
   3b058:	str	r4, [sl]
   3b05c:	str	r0, [sl, #8]
   3b060:	mov	r2, r5
   3b064:	ldr	r1, [sl, #4]
   3b068:	ldr	lr, [r5, #4]
   3b06c:	ldr	ip, [r7, #4]
   3b070:	b	3b07c <__assert_fail@plt+0x284c0>
   3b074:	add	r0, sl, #8
   3b078:	str	r0, [sp, #8]
   3b07c:	str	r2, [sp, #4]
   3b080:	ldr	r2, [r2, #8]
   3b084:	ldr	r4, [r7, #8]
   3b088:	add	r3, ip, r1
   3b08c:	sub	r8, r1, #1
   3b090:	add	r9, r3, lr
   3b094:	sub	ip, ip, #1
   3b098:	sub	r3, lr, #1
   3b09c:	ldr	r1, [r2, r3, lsl #2]
   3b0a0:	ldr	r6, [r4, ip, lsl #2]
   3b0a4:	cmp	r6, r1
   3b0a8:	beq	3b0d4 <__assert_fail@plt+0x28518>
   3b0ac:	blt	3b0c4 <__assert_fail@plt+0x28508>
   3b0b0:	sub	r5, ip, #1
   3b0b4:	cmp	ip, #0
   3b0b8:	mov	ip, r5
   3b0bc:	bgt	3b0a0 <__assert_fail@plt+0x284e4>
   3b0c0:	b	3b148 <__assert_fail@plt+0x2858c>
   3b0c4:	cmp	lr, #2
   3b0c8:	mov	lr, r3
   3b0cc:	bge	3b098 <__assert_fail@plt+0x284dc>
   3b0d0:	b	3b148 <__assert_fail@plt+0x2858c>
   3b0d4:	mov	r0, r9
   3b0d8:	cmp	r8, #0
   3b0dc:	blt	3b120 <__assert_fail@plt+0x28564>
   3b0e0:	ldr	r1, [sp, #8]
   3b0e4:	ldr	r9, [r1]
   3b0e8:	mov	r1, r8
   3b0ec:	ldr	r5, [r9, r1, lsl #2]
   3b0f0:	cmp	r5, r6
   3b0f4:	ble	3b10c <__assert_fail@plt+0x28550>
   3b0f8:	sub	r8, r1, #1
   3b0fc:	cmp	r1, #0
   3b100:	mov	r1, r8
   3b104:	bgt	3b0ec <__assert_fail@plt+0x28530>
   3b108:	b	3b120 <__assert_fail@plt+0x28564>
   3b10c:	mov	r8, r1
   3b110:	bne	3b120 <__assert_fail@plt+0x28564>
   3b114:	mov	r8, r1
   3b118:	mov	r9, r0
   3b11c:	b	3b134 <__assert_fail@plt+0x28578>
   3b120:	ldr	r1, [sp, #8]
   3b124:	mov	r9, r0
   3b128:	sub	r9, r0, #1
   3b12c:	ldr	r1, [r1]
   3b130:	str	r6, [r1, r9, lsl #2]
   3b134:	cmp	ip, #1
   3b138:	blt	3b148 <__assert_fail@plt+0x2858c>
   3b13c:	cmp	lr, #2
   3b140:	mov	lr, r3
   3b144:	bge	3b094 <__assert_fail@plt+0x284d8>
   3b148:	ldr	lr, [r7, #4]
   3b14c:	ldr	r7, [sp, #4]
   3b150:	ldr	r2, [sl, #4]
   3b154:	ldr	r0, [sl, #8]
   3b158:	ldr	r4, [r7, #4]
   3b15c:	subs	r1, r2, #1
   3b160:	add	r3, r1, lr
   3b164:	add	r3, r3, r4
   3b168:	sub	r5, r3, r9
   3b16c:	add	r6, r5, #1
   3b170:	cmpge	r5, #0
   3b174:	add	r7, r6, r2
   3b178:	str	r7, [sl, #4]
   3b17c:	blt	3b1d4 <__assert_fail@plt+0x28618>
   3b180:	add	r2, r2, r4
   3b184:	add	r2, r2, lr
   3b188:	sub	r2, r2, r9
   3b18c:	add	r7, r0, r2, lsl #2
   3b190:	ldr	r2, [r0, r1, lsl #2]
   3b194:	ldr	r5, [r0, r3, lsl #2]
   3b198:	cmp	r5, r2
   3b19c:	bgt	3b1b8 <__assert_fail@plt+0x285fc>
   3b1a0:	str	r2, [r7, r1, lsl #2]
   3b1a4:	sub	r2, r1, #1
   3b1a8:	cmp	r1, #0
   3b1ac:	mov	r1, r2
   3b1b0:	bgt	3b190 <__assert_fail@plt+0x285d4>
   3b1b4:	b	3b1d4 <__assert_fail@plt+0x28618>
   3b1b8:	str	r5, [r7, r1, lsl #2]
   3b1bc:	sub	r7, r7, #4
   3b1c0:	subs	r6, r6, #1
   3b1c4:	sub	r3, r3, #1
   3b1c8:	mov	r2, #0
   3b1cc:	bne	3b190 <__assert_fail@plt+0x285d4>
   3b1d0:	b	3b1d8 <__assert_fail@plt+0x2861c>
   3b1d4:	mov	r2, r6
   3b1d8:	add	r1, r0, r9, lsl #2
   3b1dc:	lsl	r2, r2, #2
   3b1e0:	bl	125c8 <memcpy@plt>
   3b1e4:	mov	r0, #0
   3b1e8:	sub	sp, fp, #28
   3b1ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b1f0:	mov	r0, #12
   3b1f4:	b	3b1e8 <__assert_fail@plt+0x2862c>
   3b1f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b1fc:	add	fp, sp, #28
   3b200:	sub	sp, sp, #36	; 0x24
   3b204:	mov	r5, r2
   3b208:	mov	r2, r0
   3b20c:	ldr	r0, [r0, #28]
   3b210:	str	r1, [sp, #20]
   3b214:	add	r1, r1, r1, lsl #1
   3b218:	mov	r9, #0
   3b21c:	str	r3, [sp, #4]
   3b220:	str	r9, [sp, #28]
   3b224:	str	r9, [sp, #24]
   3b228:	str	r9, [sp, #32]
   3b22c:	add	r1, r0, r1, lsl #2
   3b230:	mov	r0, r1
   3b234:	ldr	r4, [r0, #4]!
   3b238:	cmp	r4, #1
   3b23c:	blt	3b3e0 <__assert_fail@plt+0x28824>
   3b240:	add	r9, r1, #8
   3b244:	mov	r6, #0
   3b248:	str	r0, [sp, #8]
   3b24c:	str	r1, [sp, #16]
   3b250:	ldr	r0, [r9]
   3b254:	ldr	r1, [sp, #20]
   3b258:	ldr	r0, [r0, r6, lsl #2]
   3b25c:	cmp	r0, r1
   3b260:	beq	3b338 <__assert_fail@plt+0x2877c>
   3b264:	ldr	r1, [r2]
   3b268:	add	r1, r1, r0, lsl #3
   3b26c:	ldrb	r1, [r1, #4]
   3b270:	tst	r1, #8
   3b274:	beq	3b338 <__assert_fail@plt+0x2877c>
   3b278:	ldr	r1, [r2, #20]
   3b27c:	add	r0, r0, r0, lsl #1
   3b280:	mvn	sl, #0
   3b284:	mov	r7, r2
   3b288:	str	r0, [sp, #12]
   3b28c:	add	r0, r1, r0, lsl #2
   3b290:	ldr	r1, [r0, #4]
   3b294:	ldr	r0, [r0, #8]
   3b298:	cmp	r1, #2
   3b29c:	ldr	r8, [r0]
   3b2a0:	ldrge	sl, [r0, #4]
   3b2a4:	ldr	r0, [sp, #16]
   3b2a8:	mov	r1, r8
   3b2ac:	bl	36d0c <__assert_fail@plt+0x24150>
   3b2b0:	cmp	r0, #0
   3b2b4:	mov	r2, r7
   3b2b8:	beq	3b2f4 <__assert_fail@plt+0x28738>
   3b2bc:	cmp	sl, #1
   3b2c0:	blt	3b338 <__assert_fail@plt+0x2877c>
   3b2c4:	ldr	r0, [sp, #16]
   3b2c8:	mov	r1, sl
   3b2cc:	bl	36d0c <__assert_fail@plt+0x24150>
   3b2d0:	cmp	r0, #0
   3b2d4:	bne	3b334 <__assert_fail@plt+0x28778>
   3b2d8:	mov	r0, r5
   3b2dc:	mov	r1, sl
   3b2e0:	bl	36d0c <__assert_fail@plt+0x24150>
   3b2e4:	cmp	r0, #0
   3b2e8:	mov	r2, r7
   3b2ec:	bne	3b30c <__assert_fail@plt+0x28750>
   3b2f0:	b	3b338 <__assert_fail@plt+0x2877c>
   3b2f4:	mov	r0, r5
   3b2f8:	mov	r1, r8
   3b2fc:	bl	36d0c <__assert_fail@plt+0x24150>
   3b300:	mov	r2, r7
   3b304:	cmp	r0, #0
   3b308:	beq	3b2bc <__assert_fail@plt+0x28700>
   3b30c:	ldr	r0, [r2, #28]
   3b310:	ldr	r1, [sp, #12]
   3b314:	add	r2, r0, r1, lsl #2
   3b318:	ldr	r1, [sp, #4]
   3b31c:	add	r0, sp, #24
   3b320:	bl	3aff0 <__assert_fail@plt+0x28434>
   3b324:	cmp	r0, #0
   3b328:	bne	3b3f4 <__assert_fail@plt+0x28838>
   3b32c:	ldr	r0, [sp, #8]
   3b330:	ldr	r4, [r0]
   3b334:	mov	r2, r7
   3b338:	add	r6, r6, #1
   3b33c:	cmp	r6, r4
   3b340:	blt	3b250 <__assert_fail@plt+0x28694>
   3b344:	ldr	sl, [sp, #8]
   3b348:	ldr	r0, [sp, #16]
   3b34c:	cmp	r4, #1
   3b350:	mov	r9, #0
   3b354:	blt	3b3e0 <__assert_fail@plt+0x28824>
   3b358:	ldr	r7, [r0, #8]
   3b35c:	mov	r4, #0
   3b360:	add	r8, sp, #24
   3b364:	b	3b390 <__assert_fail@plt+0x287d4>
   3b368:	ldr	r2, [r5, #8]
   3b36c:	add	r0, r2, r0, lsl #2
   3b370:	ldr	r2, [r0]
   3b374:	add	r1, r1, #1
   3b378:	str	r2, [r0, #-4]
   3b37c:	add	r0, r0, #4
   3b380:	ldr	r2, [r5, #4]
   3b384:	cmp	r1, r2
   3b388:	blt	3b370 <__assert_fail@plt+0x287b4>
   3b38c:	b	3b3d0 <__assert_fail@plt+0x28814>
   3b390:	ldr	r6, [r7, r4, lsl #2]
   3b394:	mov	r0, r8
   3b398:	mov	r1, r6
   3b39c:	bl	36d0c <__assert_fail@plt+0x24150>
   3b3a0:	cmp	r0, #0
   3b3a4:	bne	3b3d0 <__assert_fail@plt+0x28814>
   3b3a8:	mov	r0, r5
   3b3ac:	mov	r1, r6
   3b3b0:	bl	36d0c <__assert_fail@plt+0x24150>
   3b3b4:	subs	r1, r0, #1
   3b3b8:	blt	3b3d0 <__assert_fail@plt+0x28814>
   3b3bc:	ldr	r2, [r5, #4]
   3b3c0:	cmp	r2, r0
   3b3c4:	subge	r2, r2, #1
   3b3c8:	strge	r2, [r5, #4]
   3b3cc:	bgt	3b368 <__assert_fail@plt+0x287ac>
   3b3d0:	ldr	r0, [sl]
   3b3d4:	add	r4, r4, #1
   3b3d8:	cmp	r4, r0
   3b3dc:	blt	3b390 <__assert_fail@plt+0x287d4>
   3b3e0:	ldr	r0, [sp, #32]
   3b3e4:	bl	2c048 <__assert_fail@plt+0x1948c>
   3b3e8:	mov	r0, r9
   3b3ec:	sub	sp, fp, #28
   3b3f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b3f4:	mov	r4, r0
   3b3f8:	ldr	r0, [sp, #32]
   3b3fc:	bl	2c048 <__assert_fail@plt+0x1948c>
   3b400:	mov	r9, r4
   3b404:	b	3b3e8 <__assert_fail@plt+0x2882c>
   3b408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b40c:	add	fp, sp, #28
   3b410:	sub	sp, sp, #20
   3b414:	mov	r6, r1
   3b418:	mov	r1, r3
   3b41c:	str	r2, [sp, #12]
   3b420:	mov	r7, r0
   3b424:	str	r3, [sp, #16]
   3b428:	bl	38720 <__assert_fail@plt+0x25b64>
   3b42c:	ldr	r1, [fp, #12]
   3b430:	str	r0, [sp, #8]
   3b434:	mov	r0, r7
   3b438:	bl	38720 <__assert_fail@plt+0x25b64>
   3b43c:	mov	r4, r0
   3b440:	ldr	r0, [r6, #4]
   3b444:	cmp	r0, #1
   3b448:	blt	3b4cc <__assert_fail@plt+0x28910>
   3b44c:	ldr	sl, [r7, #84]	; 0x54
   3b450:	mov	r5, #0
   3b454:	ldr	r0, [r6, #8]
   3b458:	ldr	r2, [r7, #116]	; 0x74
   3b45c:	ldr	r3, [sp, #12]
   3b460:	ldr	r1, [r0, r5, lsl #2]
   3b464:	add	r0, r1, r1, lsl #1
   3b468:	ldr	r0, [r2, r0, lsl #3]
   3b46c:	ldr	r2, [sl]
   3b470:	ldr	r9, [r2, r0, lsl #3]
   3b474:	ldr	r0, [sp, #16]
   3b478:	str	r0, [sp]
   3b47c:	ldr	r0, [sp, #8]
   3b480:	mov	r2, r9
   3b484:	str	r0, [sp, #4]
   3b488:	mov	r0, r7
   3b48c:	bl	3b4e0 <__assert_fail@plt+0x28924>
   3b490:	mov	r8, r0
   3b494:	ldr	r0, [r6, #8]
   3b498:	ldr	r3, [fp, #8]
   3b49c:	mov	r2, r9
   3b4a0:	ldr	r1, [r0, r5, lsl #2]
   3b4a4:	ldr	r0, [fp, #12]
   3b4a8:	stm	sp, {r0, r4}
   3b4ac:	mov	r0, r7
   3b4b0:	bl	3b4e0 <__assert_fail@plt+0x28924>
   3b4b4:	cmp	r0, r8
   3b4b8:	bne	3b4d4 <__assert_fail@plt+0x28918>
   3b4bc:	ldr	r0, [r6, #4]
   3b4c0:	add	r5, r5, #1
   3b4c4:	cmp	r5, r0
   3b4c8:	blt	3b454 <__assert_fail@plt+0x28898>
   3b4cc:	mov	r0, #0
   3b4d0:	b	3b4d8 <__assert_fail@plt+0x2891c>
   3b4d4:	mov	r0, #1
   3b4d8:	sub	sp, fp, #28
   3b4dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b4e0:	push	{r4, r5, fp, lr}
   3b4e4:	add	fp, sp, #8
   3b4e8:	sub	sp, sp, #8
   3b4ec:	ldr	r4, [r0, #116]	; 0x74
   3b4f0:	add	r1, r1, r1, lsl #1
   3b4f4:	ldr	lr, [fp, #8]
   3b4f8:	add	r4, r4, r1, lsl #3
   3b4fc:	mvn	r1, #0
   3b500:	ldr	ip, [r4, #8]
   3b504:	cmp	ip, lr
   3b508:	bgt	3b558 <__assert_fail@plt+0x2899c>
   3b50c:	ldr	r4, [r4, #12]
   3b510:	mov	r1, #1
   3b514:	cmp	r4, lr
   3b518:	blt	3b558 <__assert_fail@plt+0x2899c>
   3b51c:	sub	r1, r4, lr
   3b520:	mov	r5, #1
   3b524:	cmp	ip, lr
   3b528:	clz	r1, r1
   3b52c:	lsr	r4, r1, #5
   3b530:	lsl	r1, r4, #1
   3b534:	orreq	r1, r5, r4, lsl #1
   3b538:	cmp	r1, #0
   3b53c:	beq	3b554 <__assert_fail@plt+0x28998>
   3b540:	ldr	r5, [fp, #12]
   3b544:	str	r5, [sp]
   3b548:	bl	3b564 <__assert_fail@plt+0x289a8>
   3b54c:	sub	sp, fp, #8
   3b550:	pop	{r4, r5, fp, pc}
   3b554:	mov	r1, #0
   3b558:	mov	r0, r1
   3b55c:	sub	sp, fp, #8
   3b560:	pop	{r4, r5, fp, pc}
   3b564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b568:	add	fp, sp, #28
   3b56c:	sub	sp, sp, #36	; 0x24
   3b570:	ldr	r4, [r0, #84]	; 0x54
   3b574:	mov	r7, r0
   3b578:	mov	r5, r1
   3b57c:	add	r1, r3, r3, lsl #1
   3b580:	str	r3, [sp, #32]
   3b584:	ldr	r0, [r4, #24]
   3b588:	add	r1, r0, r1, lsl #2
   3b58c:	mov	lr, r1
   3b590:	ldr	r0, [lr, #4]!
   3b594:	cmp	r0, #1
   3b598:	blt	3b734 <__assert_fail@plt+0x28b78>
   3b59c:	mov	ip, #1
   3b5a0:	mov	r6, r2
   3b5a4:	and	r3, r5, #2
   3b5a8:	mov	sl, #0
   3b5ac:	mvn	r2, ip, lsl r2
   3b5b0:	cmp	r6, #31
   3b5b4:	str	r3, [sp, #16]
   3b5b8:	str	r2, [sp, #24]
   3b5bc:	lsl	r2, ip, r6
   3b5c0:	and	ip, r5, #1
   3b5c4:	str	r2, [sp, #28]
   3b5c8:	mov	r2, #0
   3b5cc:	str	ip, [sp, #12]
   3b5d0:	movwgt	r2, #1
   3b5d4:	orr	r2, r2, r3, lsr #1
   3b5d8:	add	r3, r1, #8
   3b5dc:	str	r2, [sp, #20]
   3b5e0:	stmib	sp, {r3, lr}
   3b5e4:	ldr	r1, [r3]
   3b5e8:	ldr	r9, [r1, sl, lsl #2]
   3b5ec:	ldr	r1, [r4]
   3b5f0:	add	r2, r1, r9, lsl #3
   3b5f4:	ldrb	r2, [r2, #4]
   3b5f8:	cmp	r2, #9
   3b5fc:	beq	3b6f8 <__assert_fail@plt+0x28b3c>
   3b600:	cmp	r2, #8
   3b604:	beq	3b714 <__assert_fail@plt+0x28b58>
   3b608:	cmp	r2, #4
   3b60c:	bne	3b728 <__assert_fail@plt+0x28b6c>
   3b610:	ldr	r1, [fp, #8]
   3b614:	cmn	r1, #1
   3b618:	beq	3b728 <__assert_fail@plt+0x28b6c>
   3b61c:	ldr	r1, [fp, #8]
   3b620:	ldr	r0, [r7, #116]	; 0x74
   3b624:	add	r1, r1, r1, lsl #1
   3b628:	add	r0, r0, r1, lsl #3
   3b62c:	add	r8, r0, #16
   3b630:	ldr	r0, [r8, #-16]
   3b634:	cmp	r0, r9
   3b638:	bne	3b6d4 <__assert_fail@plt+0x28b18>
   3b63c:	cmp	r6, #31
   3b640:	bgt	3b654 <__assert_fail@plt+0x28a98>
   3b644:	ldr	r0, [r8]
   3b648:	ldr	r1, [sp, #28]
   3b64c:	tst	r0, r1
   3b650:	beq	3b6d4 <__assert_fail@plt+0x28b18>
   3b654:	ldr	r0, [r4, #20]
   3b658:	add	r1, r9, r9, lsl #1
   3b65c:	add	r0, r0, r1, lsl #2
   3b660:	ldr	r0, [r0, #8]
   3b664:	ldr	r3, [r0]
   3b668:	ldr	r0, [sp, #32]
   3b66c:	cmp	r3, r0
   3b670:	beq	3b73c <__assert_fail@plt+0x28b80>
   3b674:	ldr	r0, [fp, #8]
   3b678:	mov	r1, r5
   3b67c:	mov	r2, r6
   3b680:	str	r0, [sp]
   3b684:	mov	r0, r7
   3b688:	bl	3b564 <__assert_fail@plt+0x289a8>
   3b68c:	cmp	r0, #0
   3b690:	beq	3b6a8 <__assert_fail@plt+0x28aec>
   3b694:	cmn	r0, #1
   3b698:	beq	3b754 <__assert_fail@plt+0x28b98>
   3b69c:	cmp	r6, #31
   3b6a0:	ble	3b6c4 <__assert_fail@plt+0x28b08>
   3b6a4:	b	3b6d4 <__assert_fail@plt+0x28b18>
   3b6a8:	ldr	r0, [sp, #20]
   3b6ac:	cmp	r0, #0
   3b6b0:	beq	3b6c4 <__assert_fail@plt+0x28b08>
   3b6b4:	ldr	r0, [sp, #16]
   3b6b8:	cmp	r0, #0
   3b6bc:	beq	3b6d4 <__assert_fail@plt+0x28b18>
   3b6c0:	b	3b748 <__assert_fail@plt+0x28b8c>
   3b6c4:	ldr	r0, [r8]
   3b6c8:	ldr	r1, [sp, #24]
   3b6cc:	and	r0, r0, r1
   3b6d0:	str	r0, [r8]
   3b6d4:	ldrb	r0, [r8, #4]
   3b6d8:	add	r8, r8, #24
   3b6dc:	cmp	r0, #0
   3b6e0:	bne	3b630 <__assert_fail@plt+0x28a74>
   3b6e4:	ldr	lr, [sp, #8]
   3b6e8:	ldr	ip, [sp, #12]
   3b6ec:	ldr	r3, [sp, #4]
   3b6f0:	ldr	r0, [lr]
   3b6f4:	b	3b728 <__assert_fail@plt+0x28b6c>
   3b6f8:	ldr	r2, [sp, #16]
   3b6fc:	cmp	r2, #0
   3b700:	beq	3b728 <__assert_fail@plt+0x28b6c>
   3b704:	ldr	r1, [r1, r9, lsl #3]
   3b708:	cmp	r1, r6
   3b70c:	bne	3b728 <__assert_fail@plt+0x28b6c>
   3b710:	b	3b748 <__assert_fail@plt+0x28b8c>
   3b714:	cmp	ip, #0
   3b718:	beq	3b728 <__assert_fail@plt+0x28b6c>
   3b71c:	ldr	r1, [r1, r9, lsl #3]
   3b720:	cmp	r1, r6
   3b724:	beq	3b750 <__assert_fail@plt+0x28b94>
   3b728:	add	sl, sl, #1
   3b72c:	cmp	sl, r0
   3b730:	blt	3b5e4 <__assert_fail@plt+0x28a28>
   3b734:	ubfx	r0, r5, #1, #1
   3b738:	b	3b754 <__assert_fail@plt+0x28b98>
   3b73c:	ldr	r0, [sp, #12]
   3b740:	rsb	r0, r0, #0
   3b744:	b	3b754 <__assert_fail@plt+0x28b98>
   3b748:	mov	r0, #0
   3b74c:	b	3b754 <__assert_fail@plt+0x28b98>
   3b750:	mvn	r0, #0
   3b754:	sub	sp, fp, #28
   3b758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b75c:	cmp	r0, #0
   3b760:	bxeq	lr
   3b764:	push	{r4, r5, r6, sl, fp, lr}
   3b768:	add	fp, sp, #16
   3b76c:	ldr	r1, [r0]
   3b770:	mov	r4, r0
   3b774:	ldr	r0, [r0, #8]
   3b778:	cmp	r1, #1
   3b77c:	blt	3b7bc <__assert_fail@plt+0x28c00>
   3b780:	mov	r5, #0
   3b784:	mov	r6, #0
   3b788:	add	r0, r0, r5
   3b78c:	ldr	r0, [r0, #20]
   3b790:	bl	2c048 <__assert_fail@plt+0x1948c>
   3b794:	ldr	r0, [r4, #8]
   3b798:	add	r0, r0, r5
   3b79c:	ldr	r0, [r0, #8]
   3b7a0:	bl	2c048 <__assert_fail@plt+0x1948c>
   3b7a4:	ldr	r1, [r4]
   3b7a8:	ldr	r0, [r4, #8]
   3b7ac:	add	r6, r6, #1
   3b7b0:	add	r5, r5, #24
   3b7b4:	cmp	r6, r1
   3b7b8:	blt	3b788 <__assert_fail@plt+0x28bcc>
   3b7bc:	pop	{r4, r5, r6, sl, fp, lr}
   3b7c0:	b	2c048 <__assert_fail@plt+0x1948c>
   3b7c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3b7c8:	add	fp, sp, #24
   3b7cc:	mov	r4, r0
   3b7d0:	mvn	r0, #0
   3b7d4:	cmp	r4, #0
   3b7d8:	beq	3b878 <__assert_fail@plt+0x28cbc>
   3b7dc:	mov	r5, r2
   3b7e0:	ldr	r2, [r4]
   3b7e4:	cmp	r2, #0
   3b7e8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3b7ec:	sub	r0, r2, #1
   3b7f0:	ldr	r9, [fp, #12]
   3b7f4:	ldr	r8, [fp, #8]
   3b7f8:	lsl	r7, r5, #3
   3b7fc:	str	r0, [r4]
   3b800:	add	r6, r0, r0, lsl #1
   3b804:	ldr	r2, [r4, #8]
   3b808:	ldr	r0, [r2, r6, lsl #3]!
   3b80c:	str	r0, [r1]
   3b810:	mov	r0, r3
   3b814:	ldr	r1, [r2, #8]
   3b818:	mov	r2, r7
   3b81c:	bl	125c8 <memcpy@plt>
   3b820:	ldr	r0, [r4, #8]
   3b824:	mov	r2, r7
   3b828:	add	r0, r0, r6, lsl #3
   3b82c:	ldr	r0, [r0, #8]
   3b830:	add	r1, r0, r5, lsl #3
   3b834:	mov	r0, r8
   3b838:	bl	125c8 <memcpy@plt>
   3b83c:	ldr	r0, [r9, #8]
   3b840:	bl	2c048 <__assert_fail@plt+0x1948c>
   3b844:	ldr	r0, [r4, #8]
   3b848:	add	r0, r0, r6, lsl #3
   3b84c:	ldr	r0, [r0, #8]
   3b850:	bl	2c048 <__assert_fail@plt+0x1948c>
   3b854:	ldr	r0, [r4, #8]
   3b858:	add	r0, r0, r6, lsl #3
   3b85c:	vldr	d16, [r0, #12]
   3b860:	ldr	r0, [r0, #20]
   3b864:	str	r0, [r9, #8]
   3b868:	vstr	d16, [r9]
   3b86c:	ldr	r0, [r4, #8]
   3b870:	add	r0, r0, r6, lsl #3
   3b874:	ldr	r0, [r0, #4]
   3b878:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3b87c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b880:	add	fp, sp, #28
   3b884:	sub	sp, sp, #44	; 0x2c
   3b888:	sub	sp, sp, #1024	; 0x400
   3b88c:	ldrb	r3, [r0]
   3b890:	mov	r6, r0
   3b894:	cmp	r3, #0
   3b898:	beq	3ba80 <__assert_fail@plt+0x28ec4>
   3b89c:	mov	r0, #1
   3b8a0:	mov	r2, #0
   3b8a4:	ldrb	r7, [r1, r2]
   3b8a8:	cmp	r7, #0
   3b8ac:	uxtbne	r3, r3
   3b8b0:	subne	r3, r3, r7
   3b8b4:	clzne	r3, r3
   3b8b8:	lsrne	r3, r3, #5
   3b8bc:	andne	r0, r0, r3
   3b8c0:	addne	r3, r6, r2
   3b8c4:	addne	r2, r2, #1
   3b8c8:	ldrbne	r3, [r3, #1]
   3b8cc:	cmpne	r3, #0
   3b8d0:	bne	3b8a4 <__assert_fail@plt+0x28ce8>
   3b8d4:	add	r7, r1, r2
   3b8d8:	mov	r5, r6
   3b8dc:	ldrb	r2, [r7]
   3b8e0:	cmp	r2, #0
   3b8e4:	movwne	r5, #0
   3b8e8:	tst	r0, #1
   3b8ec:	cmpeq	r2, #0
   3b8f0:	bne	3ba90 <__assert_fail@plt+0x28ed4>
   3b8f4:	sub	r4, r7, r1
   3b8f8:	ldrb	r1, [r1]
   3b8fc:	add	r0, r6, #1
   3b900:	bl	12898 <strchr@plt>
   3b904:	cmp	r4, #1
   3b908:	beq	3ba9c <__assert_fail@plt+0x28ee0>
   3b90c:	cmp	r0, #0
   3b910:	mov	r5, r0
   3b914:	beq	3ba90 <__assert_fail@plt+0x28ed4>
   3b918:	add	r1, r6, r4
   3b91c:	sub	r6, r7, r4
   3b920:	str	r0, [sp, #32]
   3b924:	subs	r5, r1, r0
   3b928:	movwcc	r5, #1
   3b92c:	cmp	r4, #31
   3b930:	bhi	3baa4 <__assert_fail@plt+0x28ee8>
   3b934:	add	r2, sp, #36	; 0x24
   3b938:	mov	r0, r6
   3b93c:	mov	r1, r4
   3b940:	bl	3beac <__assert_fail@plt+0x292f0>
   3b944:	ldr	r7, [sp, #36]	; 0x24
   3b948:	mov	r2, r6
   3b94c:	mov	r6, r0
   3b950:	str	r2, [sp, #24]
   3b954:	mov	r0, r2
   3b958:	add	r1, r2, r7
   3b95c:	mov	r2, r6
   3b960:	bl	12628 <memcmp@plt>
   3b964:	cmp	r0, #0
   3b968:	str	r6, [sp, #20]
   3b96c:	beq	3bc34 <__assert_fail@plt+0x29078>
   3b970:	sub	r0, r4, r6
   3b974:	sub	r2, r4, r5
   3b978:	mov	r1, #0
   3b97c:	cmp	r6, r0
   3b980:	movcs	r0, r6
   3b984:	add	r0, r0, #1
   3b988:	str	r0, [sp, #16]
   3b98c:	str	r0, [sp, #36]	; 0x24
   3b990:	ldr	r0, [sp, #32]
   3b994:	add	r0, r0, r5
   3b998:	mov	r5, #0
   3b99c:	bl	1297c <memchr@plt>
   3b9a0:	cmp	r4, #0
   3b9a4:	beq	3ba90 <__assert_fail@plt+0x28ed4>
   3b9a8:	ldr	r1, [sp, #32]
   3b9ac:	cmp	r0, #0
   3b9b0:	bne	3ba90 <__assert_fail@plt+0x28ed4>
   3b9b4:	ldr	r0, [sp, #24]
   3b9b8:	mov	sl, #0
   3b9bc:	mov	ip, r4
   3b9c0:	add	r9, r0, r6
   3b9c4:	add	r0, r1, r6
   3b9c8:	str	r0, [sp, #8]
   3b9cc:	rsb	r0, r6, #1
   3b9d0:	str	r0, [sp, #12]
   3b9d4:	cmp	r4, r6
   3b9d8:	bls	3ba08 <__assert_fail@plt+0x28e4c>
   3b9dc:	ldr	r0, [sp, #8]
   3b9e0:	add	r2, r0, sl
   3b9e4:	mov	r0, #0
   3b9e8:	ldrb	r3, [r2, r0]
   3b9ec:	ldrb	r7, [r9, r0]
   3b9f0:	cmp	r7, r3
   3b9f4:	bne	3ba38 <__assert_fail@plt+0x28e7c>
   3b9f8:	add	r0, r0, #1
   3b9fc:	add	r3, r6, r0
   3ba00:	cmp	r3, r4
   3ba04:	bcc	3b9e8 <__assert_fail@plt+0x28e2c>
   3ba08:	ldr	r0, [sp, #12]
   3ba0c:	ldr	r7, [sp, #24]
   3ba10:	add	r5, r1, sl
   3ba14:	cmp	r0, #1
   3ba18:	beq	3ba90 <__assert_fail@plt+0x28ed4>
   3ba1c:	ldrb	r2, [r5, -r0]
   3ba20:	ldrb	r3, [r7, -r0]
   3ba24:	add	r0, r0, #1
   3ba28:	cmp	r3, r2
   3ba2c:	beq	3ba14 <__assert_fail@plt+0x28e58>
   3ba30:	ldr	r2, [sp, #16]
   3ba34:	b	3ba3c <__assert_fail@plt+0x28e80>
   3ba38:	add	r2, r0, #1
   3ba3c:	add	sl, r2, sl
   3ba40:	add	r0, r1, ip
   3ba44:	mov	r1, #0
   3ba48:	mov	r7, r4
   3ba4c:	mov	r5, #0
   3ba50:	add	r8, sl, r4
   3ba54:	sub	r2, r8, ip
   3ba58:	bl	1297c <memchr@plt>
   3ba5c:	cmp	r0, #0
   3ba60:	bne	3ba90 <__assert_fail@plt+0x28ed4>
   3ba64:	ldr	r1, [sp, #32]
   3ba68:	ldr	r6, [sp, #20]
   3ba6c:	cmp	r8, #0
   3ba70:	mov	ip, r8
   3ba74:	mov	r4, r7
   3ba78:	bne	3b9d4 <__assert_fail@plt+0x28e18>
   3ba7c:	b	3ba90 <__assert_fail@plt+0x28ed4>
   3ba80:	ldrb	r0, [r1]
   3ba84:	cmp	r0, #0
   3ba88:	movne	r6, #0
   3ba8c:	mov	r5, r6
   3ba90:	mov	r0, r5
   3ba94:	sub	sp, fp, #28
   3ba98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ba9c:	mov	r5, r0
   3baa0:	b	3ba90 <__assert_fail@plt+0x28ed4>
   3baa4:	sub	r2, fp, #36	; 0x24
   3baa8:	mov	r0, r6
   3baac:	mov	r1, r4
   3bab0:	bl	3beac <__assert_fail@plt+0x292f0>
   3bab4:	mov	r8, r0
   3bab8:	mov	r0, #0
   3babc:	vdup.32	q8, r4
   3bac0:	add	r2, sp, #36	; 0x24
   3bac4:	add	r1, r2, r0
   3bac8:	add	r0, r0, #16
   3bacc:	cmp	r0, #1024	; 0x400
   3bad0:	vst1.32	{d16-d17}, [r1]
   3bad4:	bne	3bac4 <__assert_fail@plt+0x28f08>
   3bad8:	cmp	r4, #0
   3badc:	beq	3baf4 <__assert_fail@plt+0x28f38>
   3bae0:	mov	r0, r4
   3bae4:	ldrb	r1, [r7, -r0]
   3bae8:	subs	r0, r0, #1
   3baec:	str	r0, [r2, r1, lsl #2]
   3baf0:	bne	3bae4 <__assert_fail@plt+0x28f28>
   3baf4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3baf8:	mov	r0, r6
   3bafc:	mov	r2, r8
   3bb00:	add	r1, r6, r7
   3bb04:	bl	12628 <memcmp@plt>
   3bb08:	cmp	r0, #0
   3bb0c:	str	r4, [sp, #28]
   3bb10:	str	r8, [sp, #16]
   3bb14:	beq	3bd58 <__assert_fail@plt+0x2919c>
   3bb18:	sub	r0, r4, r8
   3bb1c:	sub	r2, r4, r5
   3bb20:	mov	r1, #0
   3bb24:	cmp	r8, r0
   3bb28:	movcs	r0, r8
   3bb2c:	add	r0, r0, #1
   3bb30:	str	r0, [sp, #24]
   3bb34:	str	r0, [fp, #-36]	; 0xffffffdc
   3bb38:	ldr	r0, [sp, #32]
   3bb3c:	add	r0, r0, r5
   3bb40:	mov	r5, #0
   3bb44:	bl	1297c <memchr@plt>
   3bb48:	cmp	r4, #0
   3bb4c:	beq	3ba90 <__assert_fail@plt+0x28ed4>
   3bb50:	ldr	lr, [sp, #32]
   3bb54:	cmp	r0, #0
   3bb58:	bne	3ba90 <__assert_fail@plt+0x28ed4>
   3bb5c:	ldr	r0, [sp, #16]
   3bb60:	sub	r8, r4, #1
   3bb64:	mov	r9, #0
   3bb68:	mov	ip, r4
   3bb6c:	add	r7, r6, r0
   3bb70:	add	r1, lr, r0
   3bb74:	rsb	r0, r0, #1
   3bb78:	str	r1, [sp, #12]
   3bb7c:	str	r0, [sp, #20]
   3bb80:	mov	r1, r4
   3bb84:	add	r0, lr, ip
   3bb88:	add	r1, sp, #36	; 0x24
   3bb8c:	ldrb	r2, [r0, #-1]
   3bb90:	ldr	r2, [r1, r2, lsl #2]
   3bb94:	cmp	r2, #0
   3bb98:	bne	3bc00 <__assert_fail@plt+0x29044>
   3bb9c:	ldr	r1, [sp, #16]
   3bba0:	cmp	r1, r8
   3bba4:	bcs	3bbd4 <__assert_fail@plt+0x29018>
   3bba8:	ldr	r2, [sp, #12]
   3bbac:	add	r3, r2, r9
   3bbb0:	mov	r2, #0
   3bbb4:	ldrb	r5, [r3, r2]
   3bbb8:	ldrb	r4, [r7, r2]
   3bbbc:	add	r2, r2, #1
   3bbc0:	cmp	r4, r5
   3bbc4:	bne	3bbfc <__assert_fail@plt+0x29040>
   3bbc8:	add	r5, r1, r2
   3bbcc:	cmp	r5, r8
   3bbd0:	bcc	3bbb4 <__assert_fail@plt+0x28ff8>
   3bbd4:	ldr	r2, [sp, #20]
   3bbd8:	add	r5, lr, r9
   3bbdc:	cmp	r2, #1
   3bbe0:	beq	3ba90 <__assert_fail@plt+0x28ed4>
   3bbe4:	ldrb	r3, [r5, -r2]
   3bbe8:	ldrb	r4, [r6, -r2]
   3bbec:	add	r2, r2, #1
   3bbf0:	cmp	r4, r3
   3bbf4:	beq	3bbdc <__assert_fail@plt+0x29020>
   3bbf8:	ldr	r2, [sp, #24]
   3bbfc:	ldr	r4, [sp, #28]
   3bc00:	add	r9, r2, r9
   3bc04:	mov	r1, #0
   3bc08:	mov	r5, #0
   3bc0c:	add	sl, r9, r4
   3bc10:	sub	r2, sl, ip
   3bc14:	bl	1297c <memchr@plt>
   3bc18:	cmp	r0, #0
   3bc1c:	bne	3ba90 <__assert_fail@plt+0x28ed4>
   3bc20:	ldr	lr, [sp, #32]
   3bc24:	cmp	sl, #0
   3bc28:	mov	ip, sl
   3bc2c:	bne	3bb84 <__assert_fail@plt+0x28fc8>
   3bc30:	b	3ba90 <__assert_fail@plt+0x28ed4>
   3bc34:	ldr	r0, [sp, #32]
   3bc38:	sub	r2, r4, r5
   3bc3c:	mov	r1, #0
   3bc40:	add	r0, r0, r5
   3bc44:	mov	r5, #0
   3bc48:	bl	1297c <memchr@plt>
   3bc4c:	cmp	r4, #0
   3bc50:	beq	3ba90 <__assert_fail@plt+0x28ed4>
   3bc54:	ldr	r1, [sp, #32]
   3bc58:	cmp	r0, #0
   3bc5c:	str	r7, [sp, #16]
   3bc60:	bne	3ba90 <__assert_fail@plt+0x28ed4>
   3bc64:	ldr	r0, [sp, #16]
   3bc68:	mov	sl, #0
   3bc6c:	mov	ip, r4
   3bc70:	mov	r9, #0
   3bc74:	sub	r0, r4, r0
   3bc78:	str	r0, [sp, #12]
   3bc7c:	sub	r0, r6, #1
   3bc80:	str	r0, [sp, #8]
   3bc84:	rsb	r0, r6, #0
   3bc88:	str	r0, [sp, #4]
   3bc8c:	cmp	r6, sl
   3bc90:	mov	r0, r6
   3bc94:	ldr	r6, [sp, #24]
   3bc98:	movcc	r0, sl
   3bc9c:	cmp	r0, r4
   3bca0:	bcs	3bcc4 <__assert_fail@plt+0x29108>
   3bca4:	add	r2, r1, r9
   3bca8:	ldrb	r3, [r2, r0]
   3bcac:	ldrb	r5, [r6, r0]
   3bcb0:	cmp	r5, r3
   3bcb4:	bne	3bd04 <__assert_fail@plt+0x29148>
   3bcb8:	add	r0, r0, #1
   3bcbc:	cmp	r0, r4
   3bcc0:	bcc	3bca8 <__assert_fail@plt+0x290ec>
   3bcc4:	ldr	r0, [sp, #8]
   3bcc8:	add	r5, r1, r9
   3bccc:	add	r2, r0, #1
   3bcd0:	cmp	sl, r2
   3bcd4:	bcs	3bcec <__assert_fail@plt+0x29130>
   3bcd8:	ldrb	r3, [r5, r0]
   3bcdc:	ldrb	r7, [r6, r0]
   3bce0:	sub	r0, r0, #1
   3bce4:	cmp	r7, r3
   3bce8:	beq	3bccc <__assert_fail@plt+0x29110>
   3bcec:	add	r0, sl, #1
   3bcf0:	ldr	sl, [sp, #12]
   3bcf4:	cmp	r2, r0
   3bcf8:	ldr	r2, [sp, #16]
   3bcfc:	bcs	3bd14 <__assert_fail@plt+0x29158>
   3bd00:	b	3ba90 <__assert_fail@plt+0x28ed4>
   3bd04:	ldr	r2, [sp, #4]
   3bd08:	mov	sl, #0
   3bd0c:	add	r0, r2, r0
   3bd10:	add	r2, r0, #1
   3bd14:	add	r9, r2, r9
   3bd18:	add	r0, r1, ip
   3bd1c:	mov	r1, #0
   3bd20:	mov	r7, r4
   3bd24:	mov	r5, #0
   3bd28:	add	r8, r9, r4
   3bd2c:	sub	r2, r8, ip
   3bd30:	bl	1297c <memchr@plt>
   3bd34:	cmp	r8, #0
   3bd38:	beq	3ba90 <__assert_fail@plt+0x28ed4>
   3bd3c:	ldr	r1, [sp, #32]
   3bd40:	ldr	r6, [sp, #20]
   3bd44:	cmp	r0, #0
   3bd48:	mov	ip, r8
   3bd4c:	mov	r4, r7
   3bd50:	beq	3bc8c <__assert_fail@plt+0x290d0>
   3bd54:	b	3ba90 <__assert_fail@plt+0x28ed4>
   3bd58:	ldr	r0, [sp, #32]
   3bd5c:	sub	r2, r4, r5
   3bd60:	mov	r1, #0
   3bd64:	add	r0, r0, r5
   3bd68:	mov	r5, #0
   3bd6c:	bl	1297c <memchr@plt>
   3bd70:	cmp	r4, #0
   3bd74:	beq	3ba90 <__assert_fail@plt+0x28ed4>
   3bd78:	ldr	r4, [sp, #32]
   3bd7c:	cmp	r0, #0
   3bd80:	str	r7, [sp, #24]
   3bd84:	bne	3ba90 <__assert_fail@plt+0x28ed4>
   3bd88:	ldr	r1, [sp, #28]
   3bd8c:	ldr	r0, [sp, #24]
   3bd90:	mov	r9, #0
   3bd94:	mov	r8, #0
   3bd98:	sub	r0, r1, r0
   3bd9c:	sub	sl, r1, #1
   3bda0:	str	r0, [sp, #20]
   3bda4:	ldr	r0, [sp, #16]
   3bda8:	sub	r2, r0, #1
   3bdac:	rsb	r0, r0, #0
   3bdb0:	str	r2, [sp, #12]
   3bdb4:	str	r0, [sp, #8]
   3bdb8:	add	r0, r4, r1
   3bdbc:	add	r3, sp, #36	; 0x24
   3bdc0:	ldrb	r2, [r0, #-1]
   3bdc4:	ldr	r3, [r3, r2, lsl #2]
   3bdc8:	cmp	r3, #0
   3bdcc:	beq	3bdf4 <__assert_fail@plt+0x29238>
   3bdd0:	ldr	r2, [sp, #24]
   3bdd4:	ldr	r7, [sp, #20]
   3bdd8:	cmp	r3, r2
   3bddc:	mov	r2, r3
   3bde0:	movcc	r2, r7
   3bde4:	cmp	r9, #0
   3bde8:	moveq	r2, r3
   3bdec:	mov	r9, #0
   3bdf0:	b	3be64 <__assert_fail@plt+0x292a8>
   3bdf4:	ldr	r2, [sp, #16]
   3bdf8:	cmp	r2, r9
   3bdfc:	movcc	r2, r9
   3be00:	cmp	r2, sl
   3be04:	bcs	3be28 <__assert_fail@plt+0x2926c>
   3be08:	add	r3, r4, r8
   3be0c:	ldrb	r7, [r3, r2]
   3be10:	ldrb	r5, [r6, r2]
   3be14:	cmp	r5, r7
   3be18:	bne	3be9c <__assert_fail@plt+0x292e0>
   3be1c:	add	r2, r2, #1
   3be20:	cmp	r2, sl
   3be24:	bcc	3be0c <__assert_fail@plt+0x29250>
   3be28:	ldr	r2, [sp, #12]
   3be2c:	add	r5, r4, r8
   3be30:	add	r3, r2, #1
   3be34:	cmp	r9, r3
   3be38:	bcs	3be50 <__assert_fail@plt+0x29294>
   3be3c:	ldrb	r7, [r5, r2]
   3be40:	ldrb	r4, [r6, r2]
   3be44:	sub	r2, r2, #1
   3be48:	cmp	r4, r7
   3be4c:	beq	3be30 <__assert_fail@plt+0x29274>
   3be50:	add	r2, r9, #1
   3be54:	ldr	r9, [sp, #20]
   3be58:	cmp	r3, r2
   3be5c:	ldr	r2, [sp, #24]
   3be60:	bcc	3ba90 <__assert_fail@plt+0x28ed4>
   3be64:	add	r8, r2, r8
   3be68:	ldr	r2, [sp, #28]
   3be6c:	mov	r5, #0
   3be70:	add	r7, r8, r2
   3be74:	sub	r2, r7, r1
   3be78:	mov	r1, #0
   3be7c:	bl	1297c <memchr@plt>
   3be80:	cmp	r7, #0
   3be84:	beq	3ba90 <__assert_fail@plt+0x28ed4>
   3be88:	ldr	r4, [sp, #32]
   3be8c:	cmp	r0, #0
   3be90:	mov	r1, r7
   3be94:	beq	3bdb8 <__assert_fail@plt+0x291fc>
   3be98:	b	3ba90 <__assert_fail@plt+0x28ed4>
   3be9c:	ldr	r3, [sp, #8]
   3bea0:	add	r2, r3, r2
   3bea4:	add	r2, r2, #1
   3bea8:	b	3bdec <__assert_fail@plt+0x29230>
   3beac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3beb0:	add	fp, sp, #24
   3beb4:	cmp	r1, #3
   3beb8:	movcc	r0, #1
   3bebc:	strcc	r0, [r2]
   3bec0:	subcc	r0, r1, #1
   3bec4:	popcc	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bec8:	mvn	r8, #0
   3becc:	mov	r6, #0
   3bed0:	mov	r3, #1
   3bed4:	mov	ip, #1
   3bed8:	mov	r5, #1
   3bedc:	b	3bee8 <__assert_fail@plt+0x2932c>
   3bee0:	add	r5, r5, #1
   3bee4:	b	3bf34 <__assert_fail@plt+0x29378>
   3bee8:	add	r4, r5, r8
   3beec:	ldrb	r7, [r0, r3]
   3bef0:	ldrb	r4, [r0, r4]
   3bef4:	cmp	r7, r4
   3bef8:	bcs	3bf08 <__assert_fail@plt+0x2934c>
   3befc:	sub	ip, r3, r8
   3bf00:	mov	r5, #1
   3bf04:	b	3bf30 <__assert_fail@plt+0x29374>
   3bf08:	bne	3bf20 <__assert_fail@plt+0x29364>
   3bf0c:	cmp	r5, ip
   3bf10:	bne	3bee0 <__assert_fail@plt+0x29324>
   3bf14:	add	r6, ip, r6
   3bf18:	mov	r5, #1
   3bf1c:	b	3bf34 <__assert_fail@plt+0x29378>
   3bf20:	add	r3, r6, #1
   3bf24:	mov	r8, r6
   3bf28:	mov	r5, #1
   3bf2c:	mov	ip, #1
   3bf30:	mov	r6, r3
   3bf34:	add	r3, r5, r6
   3bf38:	cmp	r3, r1
   3bf3c:	bcc	3bee8 <__assert_fail@plt+0x2932c>
   3bf40:	cmp	r1, #2
   3bf44:	str	ip, [r2]
   3bf48:	bcc	3bfcc <__assert_fail@plt+0x29410>
   3bf4c:	mvn	ip, #0
   3bf50:	mov	r4, #0
   3bf54:	mov	r5, #1
   3bf58:	mov	lr, #1
   3bf5c:	mov	r3, #1
   3bf60:	add	r7, r3, ip
   3bf64:	ldrb	r6, [r0, r5]
   3bf68:	ldrb	r7, [r0, r7]
   3bf6c:	cmp	r7, r6
   3bf70:	bcs	3bf84 <__assert_fail@plt+0x293c8>
   3bf74:	sub	lr, r5, ip
   3bf78:	mov	r3, #1
   3bf7c:	mov	r4, r5
   3bf80:	b	3bfbc <__assert_fail@plt+0x29400>
   3bf84:	cmp	r6, r7
   3bf88:	bne	3bfa0 <__assert_fail@plt+0x293e4>
   3bf8c:	cmp	r3, lr
   3bf90:	bne	3bfb8 <__assert_fail@plt+0x293fc>
   3bf94:	add	r4, lr, r4
   3bf98:	mov	r3, #1
   3bf9c:	b	3bfbc <__assert_fail@plt+0x29400>
   3bfa0:	add	r7, r4, #1
   3bfa4:	mov	ip, r4
   3bfa8:	mov	r3, #1
   3bfac:	mov	lr, #1
   3bfb0:	mov	r4, r7
   3bfb4:	b	3bfbc <__assert_fail@plt+0x29400>
   3bfb8:	add	r3, r3, #1
   3bfbc:	add	r5, r3, r4
   3bfc0:	cmp	r5, r1
   3bfc4:	bcc	3bf60 <__assert_fail@plt+0x293a4>
   3bfc8:	b	3bfd4 <__assert_fail@plt+0x29418>
   3bfcc:	mov	lr, #1
   3bfd0:	mvn	ip, #0
   3bfd4:	add	r0, r8, #1
   3bfd8:	add	r1, ip, #1
   3bfdc:	cmp	r1, r0
   3bfe0:	movcs	r0, r1
   3bfe4:	strcs	lr, [r2]
   3bfe8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bfec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bff0:	add	fp, sp, #24
   3bff4:	mov	r4, r0
   3bff8:	cmp	r0, #0
   3bffc:	beq	3c020 <__assert_fail@plt+0x29464>
   3c000:	mov	r0, r4
   3c004:	bl	1288c <strlen@plt>
   3c008:	add	r5, r0, #1
   3c00c:	cmp	r5, #58	; 0x3a
   3c010:	bls	3c024 <__assert_fail@plt+0x29468>
   3c014:	add	r0, r0, #10
   3c018:	bic	r0, r0, #3
   3c01c:	b	3c028 <__assert_fail@plt+0x2946c>
   3c020:	mov	r5, #0
   3c024:	mov	r0, #64	; 0x40
   3c028:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   3c02c:	mov	r6, r0
   3c030:	cmp	r0, #0
   3c034:	beq	3c070 <__assert_fail@plt+0x294b4>
   3c038:	cmp	r4, #0
   3c03c:	mov	r0, r4
   3c040:	mov	r8, #0
   3c044:	mov	r7, r6
   3c048:	movwne	r0, #1
   3c04c:	str	r8, [r6]
   3c050:	strb	r0, [r6, #4]
   3c054:	strb	r8, [r7, #5]!
   3c058:	beq	3c070 <__assert_fail@plt+0x294b4>
   3c05c:	mov	r0, r7
   3c060:	mov	r1, r4
   3c064:	mov	r2, r5
   3c068:	bl	125c8 <memcpy@plt>
   3c06c:	strb	r8, [r7, r5]
   3c070:	mov	r0, r6
   3c074:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3c078:	push	{r4, sl, fp, lr}
   3c07c:	add	fp, sp, #8
   3c080:	cmp	r0, #2
   3c084:	popcc	{r4, sl, fp, pc}
   3c088:	ldr	r4, [r0]
   3c08c:	bl	2c048 <__assert_fail@plt+0x1948c>
   3c090:	cmp	r4, #0
   3c094:	mov	r0, r4
   3c098:	bne	3c088 <__assert_fail@plt+0x294cc>
   3c09c:	pop	{r4, sl, fp, pc}
   3c0a0:	push	{r4, r5, r6, r7, fp, lr}
   3c0a4:	add	fp, sp, #16
   3c0a8:	mov	r4, r2
   3c0ac:	mov	r7, r1
   3c0b0:	cmp	r0, #0
   3c0b4:	beq	3c0f8 <__assert_fail@plt+0x2953c>
   3c0b8:	mov	r6, r0
   3c0bc:	bl	3c128 <__assert_fail@plt+0x2956c>
   3c0c0:	cmp	r0, #0
   3c0c4:	moveq	r0, #0
   3c0c8:	popeq	{r4, r5, r6, r7, fp, pc}
   3c0cc:	mov	r5, r0
   3c0d0:	mov	r0, r7
   3c0d4:	mov	r1, r4
   3c0d8:	bl	12694 <localtime_r@plt>
   3c0dc:	cmp	r0, #0
   3c0e0:	beq	3c108 <__assert_fail@plt+0x2954c>
   3c0e4:	mov	r0, r6
   3c0e8:	mov	r1, r4
   3c0ec:	bl	3c1dc <__assert_fail@plt+0x29620>
   3c0f0:	eor	r6, r0, #1
   3c0f4:	b	3c10c <__assert_fail@plt+0x29550>
   3c0f8:	mov	r0, r7
   3c0fc:	mov	r1, r4
   3c100:	pop	{r4, r5, r6, r7, fp, lr}
   3c104:	b	1249c <gmtime_r@plt>
   3c108:	mov	r6, #1
   3c10c:	mov	r0, r5
   3c110:	bl	3c308 <__assert_fail@plt+0x2974c>
   3c114:	cmp	r0, #0
   3c118:	movne	r0, r4
   3c11c:	cmp	r6, #0
   3c120:	movwne	r0, #0
   3c124:	pop	{r4, r5, r6, r7, fp, pc}
   3c128:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3c12c:	add	fp, sp, #24
   3c130:	mov	r5, r0
   3c134:	movw	r0, #11889	; 0x2e71
   3c138:	movt	r0, #4
   3c13c:	bl	127cc <getenv@plt>
   3c140:	mov	r4, r0
   3c144:	ldrb	r0, [r5, #4]
   3c148:	cmp	r4, #0
   3c14c:	beq	3c164 <__assert_fail@plt+0x295a8>
   3c150:	cmp	r0, #0
   3c154:	beq	3c16c <__assert_fail@plt+0x295b0>
   3c158:	add	r0, r5, #5
   3c15c:	mov	r1, r4
   3c160:	bl	124cc <strcmp@plt>
   3c164:	cmp	r0, #0
   3c168:	beq	3c19c <__assert_fail@plt+0x295e0>
   3c16c:	mov	r0, r4
   3c170:	bl	3bfec <__assert_fail@plt+0x29430>
   3c174:	mov	r7, #0
   3c178:	cmp	r0, #0
   3c17c:	beq	3c1d4 <__assert_fail@plt+0x29618>
   3c180:	mov	r4, r0
   3c184:	mov	r0, r5
   3c188:	bl	3c44c <__assert_fail@plt+0x29890>
   3c18c:	cmp	r0, #0
   3c190:	beq	3c1a4 <__assert_fail@plt+0x295e8>
   3c194:	mov	r7, r4
   3c198:	b	3c1d4 <__assert_fail@plt+0x29618>
   3c19c:	mov	r7, #1
   3c1a0:	b	3c1d4 <__assert_fail@plt+0x29618>
   3c1a4:	bl	128d4 <__errno_location@plt>
   3c1a8:	ldr	r8, [r0]
   3c1ac:	mov	r5, r0
   3c1b0:	cmp	r4, #2
   3c1b4:	bcc	3c1d0 <__assert_fail@plt+0x29614>
   3c1b8:	ldr	r6, [r4]
   3c1bc:	mov	r0, r4
   3c1c0:	bl	2c048 <__assert_fail@plt+0x1948c>
   3c1c4:	cmp	r6, #0
   3c1c8:	mov	r4, r6
   3c1cc:	bne	3c1b8 <__assert_fail@plt+0x295fc>
   3c1d0:	str	r8, [r5]
   3c1d4:	mov	r0, r7
   3c1d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3c1dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c1e0:	add	fp, sp, #28
   3c1e4:	sub	sp, sp, #4
   3c1e8:	ldr	r7, [r1, #40]	; 0x28
   3c1ec:	mov	r8, #1
   3c1f0:	cmp	r7, #0
   3c1f4:	beq	3c298 <__assert_fail@plt+0x296dc>
   3c1f8:	mov	r5, r1
   3c1fc:	mov	r6, r0
   3c200:	cmp	r7, r1
   3c204:	bcc	3c214 <__assert_fail@plt+0x29658>
   3c208:	add	r0, r5, #44	; 0x2c
   3c20c:	cmp	r7, r0
   3c210:	bcc	3c298 <__assert_fail@plt+0x296dc>
   3c214:	ldrb	r0, [r7]
   3c218:	cmp	r0, #0
   3c21c:	beq	3c28c <__assert_fail@plt+0x296d0>
   3c220:	add	r4, r6, #5
   3c224:	b	3c274 <__assert_fail@plt+0x296b8>
   3c228:	ldrb	r0, [r4]
   3c22c:	cmp	r0, #0
   3c230:	bne	3c24c <__assert_fail@plt+0x29690>
   3c234:	add	r0, r6, #5
   3c238:	cmp	r4, r0
   3c23c:	bne	3c2a4 <__assert_fail@plt+0x296e8>
   3c240:	ldrb	r0, [r6, #4]
   3c244:	cmp	r0, #0
   3c248:	beq	3c2a4 <__assert_fail@plt+0x296e8>
   3c24c:	mov	r0, r4
   3c250:	bl	1288c <strlen@plt>
   3c254:	add	r4, r4, r0
   3c258:	ldrb	r0, [r4, #1]!
   3c25c:	cmp	r0, #0
   3c260:	bne	3c274 <__assert_fail@plt+0x296b8>
   3c264:	ldr	r0, [r6]
   3c268:	cmp	r0, #0
   3c26c:	addne	r4, r0, #5
   3c270:	movne	r6, r0
   3c274:	mov	r0, r4
   3c278:	mov	r1, r7
   3c27c:	bl	124cc <strcmp@plt>
   3c280:	cmp	r0, #0
   3c284:	bne	3c228 <__assert_fail@plt+0x2966c>
   3c288:	b	3c294 <__assert_fail@plt+0x296d8>
   3c28c:	movw	r4, #63055	; 0xf64f
   3c290:	movt	r4, #3
   3c294:	str	r4, [r5, #40]	; 0x28
   3c298:	mov	r0, r8
   3c29c:	sub	sp, fp, #28
   3c2a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c2a4:	add	r0, r6, #64	; 0x40
   3c2a8:	sub	sl, r0, r4
   3c2ac:	mov	r0, r7
   3c2b0:	bl	1288c <strlen@plt>
   3c2b4:	add	r9, r0, #1
   3c2b8:	cmp	r9, sl
   3c2bc:	bge	3c2dc <__assert_fail@plt+0x29720>
   3c2c0:	mov	r0, r4
   3c2c4:	mov	r1, r7
   3c2c8:	mov	r2, r9
   3c2cc:	bl	125c8 <memcpy@plt>
   3c2d0:	mov	r0, #0
   3c2d4:	strb	r0, [r4, r9]
   3c2d8:	b	3c294 <__assert_fail@plt+0x296d8>
   3c2dc:	mov	r0, r7
   3c2e0:	bl	3bfec <__assert_fail@plt+0x29430>
   3c2e4:	cmp	r0, #0
   3c2e8:	str	r0, [r6]
   3c2ec:	beq	3c300 <__assert_fail@plt+0x29744>
   3c2f0:	mov	r1, #0
   3c2f4:	add	r4, r0, #5
   3c2f8:	strb	r1, [r0, #4]
   3c2fc:	b	3c294 <__assert_fail@plt+0x296d8>
   3c300:	mov	r8, #0
   3c304:	b	3c298 <__assert_fail@plt+0x296dc>
   3c308:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3c30c:	add	fp, sp, #24
   3c310:	cmp	r0, #1
   3c314:	beq	3c364 <__assert_fail@plt+0x297a8>
   3c318:	mov	r7, r0
   3c31c:	bl	128d4 <__errno_location@plt>
   3c320:	ldr	r8, [r0]
   3c324:	mov	r6, r0
   3c328:	mov	r0, r7
   3c32c:	bl	3c44c <__assert_fail@plt+0x29890>
   3c330:	cmp	r0, #0
   3c334:	mov	r5, r0
   3c338:	ldreq	r8, [r6]
   3c33c:	cmp	r7, #2
   3c340:	bcc	3c35c <__assert_fail@plt+0x297a0>
   3c344:	ldr	r4, [r7]
   3c348:	mov	r0, r7
   3c34c:	bl	2c048 <__assert_fail@plt+0x1948c>
   3c350:	cmp	r4, #0
   3c354:	mov	r7, r4
   3c358:	bne	3c344 <__assert_fail@plt+0x29788>
   3c35c:	str	r8, [r6]
   3c360:	b	3c368 <__assert_fail@plt+0x297ac>
   3c364:	mov	r5, #1
   3c368:	mov	r0, r5
   3c36c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3c370:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3c374:	add	fp, sp, #24
   3c378:	sub	sp, sp, #48	; 0x30
   3c37c:	mov	r4, r1
   3c380:	cmp	r0, #0
   3c384:	beq	3c424 <__assert_fail@plt+0x29868>
   3c388:	mov	r6, r0
   3c38c:	bl	3c128 <__assert_fail@plt+0x2956c>
   3c390:	cmp	r0, #0
   3c394:	beq	3c43c <__assert_fail@plt+0x29880>
   3c398:	mov	r1, #32
   3c39c:	mov	r2, r4
   3c3a0:	mov	r7, r0
   3c3a4:	mov	r0, sp
   3c3a8:	vld1.32	{d16-d17}, [r2], r1
   3c3ac:	mov	r3, r0
   3c3b0:	vst1.32	{d16-d17}, [r3], r1
   3c3b4:	ldr	r1, [r4, #16]
   3c3b8:	ldr	r5, [r4, #20]
   3c3bc:	str	r1, [sp, #16]
   3c3c0:	mvn	r1, #0
   3c3c4:	str	r1, [sp, #28]
   3c3c8:	str	r5, [sp, #20]
   3c3cc:	ldr	r1, [r2]
   3c3d0:	str	r1, [r3]
   3c3d4:	bl	12520 <mktime@plt>
   3c3d8:	mov	r5, r0
   3c3dc:	ldr	r0, [sp, #28]
   3c3e0:	cmn	r0, #1
   3c3e4:	ble	3c434 <__assert_fail@plt+0x29878>
   3c3e8:	mov	r8, sp
   3c3ec:	mov	r0, r6
   3c3f0:	mov	r1, r8
   3c3f4:	bl	3c1dc <__assert_fail@plt+0x29620>
   3c3f8:	mov	r6, r0
   3c3fc:	mov	r0, r7
   3c400:	bl	3c308 <__assert_fail@plt+0x2974c>
   3c404:	cmp	r6, #0
   3c408:	cmpne	r0, #0
   3c40c:	beq	3c43c <__assert_fail@plt+0x29880>
   3c410:	ldm	r8!, {r0, r1, r2, r3, r7}
   3c414:	stmia	r4!, {r0, r1, r2, r3, r7}
   3c418:	ldm	r8, {r0, r1, r2, r3, r6, r7}
   3c41c:	stm	r4, {r0, r1, r2, r3, r6, r7}
   3c420:	b	3c440 <__assert_fail@plt+0x29884>
   3c424:	mov	r0, r4
   3c428:	sub	sp, fp, #24
   3c42c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   3c430:	b	12a84 <timegm@plt>
   3c434:	mov	r0, r7
   3c438:	bl	3c308 <__assert_fail@plt+0x2974c>
   3c43c:	mvn	r5, #0
   3c440:	mov	r0, r5
   3c444:	sub	sp, fp, #24
   3c448:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3c44c:	push	{fp, lr}
   3c450:	mov	fp, sp
   3c454:	ldrb	r1, [r0, #4]
   3c458:	cmp	r1, #0
   3c45c:	beq	3c478 <__assert_fail@plt+0x298bc>
   3c460:	add	r1, r0, #5
   3c464:	movw	r0, #11889	; 0x2e71
   3c468:	mov	r2, #1
   3c46c:	movt	r0, #4
   3c470:	bl	128a4 <setenv@plt>
   3c474:	b	3c484 <__assert_fail@plt+0x298c8>
   3c478:	movw	r0, #11889	; 0x2e71
   3c47c:	movt	r0, #4
   3c480:	bl	12b38 <unsetenv@plt>
   3c484:	mov	r1, #0
   3c488:	cmp	r0, #0
   3c48c:	bne	3c498 <__assert_fail@plt+0x298dc>
   3c490:	bl	126dc <tzset@plt>
   3c494:	mov	r1, #1
   3c498:	mov	r0, r1
   3c49c:	pop	{fp, pc}
   3c4a0:	push	{fp, lr}
   3c4a4:	mov	fp, sp
   3c4a8:	movw	r0, #17664	; 0x4500
   3c4ac:	movt	r0, #5
   3c4b0:	ldr	r0, [r0]
   3c4b4:	bl	1285c <exit@plt>
   3c4b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c4bc:	add	fp, sp, #28
   3c4c0:	sub	sp, sp, #12
   3c4c4:	mov	r4, r3
   3c4c8:	mov	r6, r2
   3c4cc:	mov	r5, r1
   3c4d0:	mov	sl, r0
   3c4d4:	bl	1288c <strlen@plt>
   3c4d8:	ldr	r8, [r5]
   3c4dc:	cmp	r8, #0
   3c4e0:	beq	3c59c <__assert_fail@plt+0x299e0>
   3c4e4:	mov	r7, r0
   3c4e8:	mov	r0, #0
   3c4ec:	add	r9, r5, #4
   3c4f0:	mov	r5, #0
   3c4f4:	str	r6, [sp, #4]
   3c4f8:	str	r0, [sp]
   3c4fc:	mvn	r0, #0
   3c500:	str	r0, [sp, #8]
   3c504:	mov	r0, r8
   3c508:	mov	r1, sl
   3c50c:	mov	r2, r7
   3c510:	bl	12b5c <strncmp@plt>
   3c514:	cmp	r0, #0
   3c518:	bne	3c570 <__assert_fail@plt+0x299b4>
   3c51c:	mov	r0, r8
   3c520:	bl	1288c <strlen@plt>
   3c524:	cmp	r0, r7
   3c528:	beq	3c5a0 <__assert_fail@plt+0x299e4>
   3c52c:	ldr	r0, [sp, #8]
   3c530:	cmn	r0, #1
   3c534:	beq	3c56c <__assert_fail@plt+0x299b0>
   3c538:	ldr	r0, [sp, #4]
   3c53c:	cmp	r0, #0
   3c540:	beq	3c560 <__assert_fail@plt+0x299a4>
   3c544:	ldr	r1, [sp, #8]
   3c548:	mov	r2, r4
   3c54c:	mla	r0, r1, r4, r0
   3c550:	mov	r1, r6
   3c554:	bl	12628 <memcmp@plt>
   3c558:	cmp	r0, #0
   3c55c:	beq	3c570 <__assert_fail@plt+0x299b4>
   3c560:	mov	r0, #1
   3c564:	str	r0, [sp]
   3c568:	b	3c570 <__assert_fail@plt+0x299b4>
   3c56c:	str	r5, [sp, #8]
   3c570:	ldr	r8, [r9, r5, lsl #2]
   3c574:	add	r6, r6, r4
   3c578:	add	r5, r5, #1
   3c57c:	cmp	r8, #0
   3c580:	bne	3c504 <__assert_fail@plt+0x29948>
   3c584:	ldr	r0, [sp]
   3c588:	tst	r0, #1
   3c58c:	ldr	r0, [sp, #8]
   3c590:	mvnne	r0, #1
   3c594:	sub	sp, fp, #28
   3c598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c59c:	mvn	r5, #0
   3c5a0:	mov	r0, r5
   3c5a4:	sub	sp, fp, #28
   3c5a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c5ac:	push	{r4, r5, r6, sl, fp, lr}
   3c5b0:	add	fp, sp, #16
   3c5b4:	sub	sp, sp, #8
   3c5b8:	mov	r4, r1
   3c5bc:	movw	r1, #14787	; 0x39c3
   3c5c0:	mov	r5, r0
   3c5c4:	movw	r0, #14760	; 0x39a8
   3c5c8:	cmn	r2, #1
   3c5cc:	mov	r2, #5
   3c5d0:	movt	r0, #4
   3c5d4:	movt	r1, #4
   3c5d8:	moveq	r1, r0
   3c5dc:	mov	r0, #0
   3c5e0:	bl	1264c <dcgettext@plt>
   3c5e4:	mov	r6, r0
   3c5e8:	mov	r0, #0
   3c5ec:	mov	r1, #8
   3c5f0:	mov	r2, r4
   3c5f4:	bl	29834 <__assert_fail@plt+0x16c78>
   3c5f8:	mov	r4, r0
   3c5fc:	mov	r0, #1
   3c600:	mov	r1, r5
   3c604:	bl	29c04 <__assert_fail@plt+0x17048>
   3c608:	str	r0, [sp]
   3c60c:	mov	r0, #0
   3c610:	mov	r1, #0
   3c614:	mov	r2, r6
   3c618:	mov	r3, r4
   3c61c:	bl	12790 <error@plt>
   3c620:	sub	sp, fp, #16
   3c624:	pop	{r4, r5, r6, sl, fp, pc}
   3c628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c62c:	add	fp, sp, #28
   3c630:	sub	sp, sp, #4
   3c634:	mov	r5, r1
   3c638:	movw	r1, #14816	; 0x39e0
   3c63c:	mov	r9, r2
   3c640:	mov	r7, r0
   3c644:	mov	r0, #0
   3c648:	mov	r2, #5
   3c64c:	mov	r8, #0
   3c650:	movt	r1, #4
   3c654:	bl	1264c <dcgettext@plt>
   3c658:	movw	sl, #17760	; 0x4560
   3c65c:	movt	sl, #5
   3c660:	ldr	r1, [sl]
   3c664:	bl	12b50 <fputs@plt>
   3c668:	ldr	r6, [r7]
   3c66c:	cmp	r6, #0
   3c670:	bne	3c688 <__assert_fail@plt+0x29acc>
   3c674:	ldr	r1, [sl]
   3c678:	mov	r0, #10
   3c67c:	sub	sp, fp, #28
   3c680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c684:	b	12a90 <putc@plt>
   3c688:	add	r4, r7, #4
   3c68c:	mov	r7, #0
   3c690:	str	r4, [sp]
   3c694:	cmp	r8, #0
   3c698:	beq	3c6dc <__assert_fail@plt+0x29b20>
   3c69c:	mov	r0, r7
   3c6a0:	mov	r1, r5
   3c6a4:	mov	r2, r9
   3c6a8:	bl	12628 <memcmp@plt>
   3c6ac:	cmp	r0, #0
   3c6b0:	bne	3c6dc <__assert_fail@plt+0x29b20>
   3c6b4:	ldr	r4, [sl]
   3c6b8:	mov	r0, r6
   3c6bc:	bl	29c14 <__assert_fail@plt+0x17058>
   3c6c0:	mov	r2, r0
   3c6c4:	mov	r0, r4
   3c6c8:	ldr	r4, [sp]
   3c6cc:	movw	r1, #14845	; 0x39fd
   3c6d0:	movt	r1, #4
   3c6d4:	bl	128c8 <fprintf@plt>
   3c6d8:	b	3c700 <__assert_fail@plt+0x29b44>
   3c6dc:	ldr	r7, [sl]
   3c6e0:	mov	r0, r6
   3c6e4:	bl	29c14 <__assert_fail@plt+0x17058>
   3c6e8:	movw	r1, #14837	; 0x39f5
   3c6ec:	mov	r2, r0
   3c6f0:	mov	r0, r7
   3c6f4:	movt	r1, #4
   3c6f8:	bl	128c8 <fprintf@plt>
   3c6fc:	mov	r7, r5
   3c700:	ldr	r6, [r4, -r8, lsl #2]
   3c704:	add	r5, r5, r9
   3c708:	sub	r8, r8, #1
   3c70c:	cmp	r6, #0
   3c710:	bne	3c694 <__assert_fail@plt+0x29ad8>
   3c714:	b	3c674 <__assert_fail@plt+0x29ab8>
   3c718:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c71c:	add	fp, sp, #24
   3c720:	ldr	r8, [fp, #8]
   3c724:	mov	r6, r0
   3c728:	mov	r4, r3
   3c72c:	mov	r5, r2
   3c730:	mov	r7, r1
   3c734:	mov	r0, r1
   3c738:	mov	r1, r2
   3c73c:	mov	r2, r3
   3c740:	mov	r3, r8
   3c744:	bl	3c4b8 <__assert_fail@plt+0x298fc>
   3c748:	mov	r2, r0
   3c74c:	cmn	r0, #1
   3c750:	bgt	3c77c <__assert_fail@plt+0x29bc0>
   3c754:	ldr	r9, [fp, #12]
   3c758:	mov	r0, r6
   3c75c:	mov	r1, r7
   3c760:	bl	3c5ac <__assert_fail@plt+0x299f0>
   3c764:	mov	r0, r5
   3c768:	mov	r1, r4
   3c76c:	mov	r2, r8
   3c770:	bl	3c628 <__assert_fail@plt+0x29a6c>
   3c774:	blx	r9
   3c778:	mvn	r2, #0
   3c77c:	mov	r0, r2
   3c780:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c784:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c788:	add	fp, sp, #24
   3c78c:	ldr	r6, [r1]
   3c790:	cmp	r6, #0
   3c794:	beq	3c7f4 <__assert_fail@plt+0x29c38>
   3c798:	mov	r8, r1
   3c79c:	mov	r7, r2
   3c7a0:	mov	r1, r2
   3c7a4:	mov	r2, r3
   3c7a8:	mov	r4, r3
   3c7ac:	mov	r9, r0
   3c7b0:	bl	12628 <memcmp@plt>
   3c7b4:	cmp	r0, #0
   3c7b8:	beq	3c7f8 <__assert_fail@plt+0x29c3c>
   3c7bc:	add	r7, r7, r4
   3c7c0:	add	r5, r8, #4
   3c7c4:	ldr	r6, [r5]
   3c7c8:	cmp	r6, #0
   3c7cc:	beq	3c7f4 <__assert_fail@plt+0x29c38>
   3c7d0:	mov	r0, r9
   3c7d4:	mov	r1, r7
   3c7d8:	mov	r2, r4
   3c7dc:	bl	12628 <memcmp@plt>
   3c7e0:	add	r7, r7, r4
   3c7e4:	add	r5, r5, #4
   3c7e8:	cmp	r0, #0
   3c7ec:	bne	3c7c4 <__assert_fail@plt+0x29c08>
   3c7f0:	b	3c7f8 <__assert_fail@plt+0x29c3c>
   3c7f4:	mov	r6, #0
   3c7f8:	mov	r0, r6
   3c7fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c800:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c804:	add	fp, sp, #24
   3c808:	sub	sp, sp, #32
   3c80c:	mov	r5, r0
   3c810:	ldrb	r0, [r2]
   3c814:	cmp	r0, #0
   3c818:	beq	3c8ec <__assert_fail@plt+0x29d30>
   3c81c:	movw	r9, #20052	; 0x4e54
   3c820:	mov	r4, r2
   3c824:	mov	r6, r1
   3c828:	movt	r9, #5
   3c82c:	ldr	r0, [r9]
   3c830:	cmp	r0, #0
   3c834:	bne	3c898 <__assert_fail@plt+0x29cdc>
   3c838:	movw	r0, #7773	; 0x1e5d
   3c83c:	movw	r1, #18688	; 0x4900
   3c840:	movt	r0, #4
   3c844:	movt	r1, #8
   3c848:	bl	127c0 <open64@plt>
   3c84c:	cmn	r0, #1
   3c850:	ble	3c904 <__assert_fail@plt+0x29d48>
   3c854:	movw	r1, #14850	; 0x3a02
   3c858:	mov	r7, r0
   3c85c:	mov	r8, sp
   3c860:	movt	r1, #4
   3c864:	mov	r0, r8
   3c868:	mov	r2, r7
   3c86c:	bl	12a60 <sprintf@plt>
   3c870:	mov	r0, r8
   3c874:	mov	r1, #0
   3c878:	bl	12994 <access@plt>
   3c87c:	cmp	r0, #0
   3c880:	mvn	r1, #0
   3c884:	mov	r0, r7
   3c888:	movweq	r1, #1
   3c88c:	str	r1, [r9]
   3c890:	bl	12b74 <close@plt>
   3c894:	ldr	r0, [r9]
   3c898:	mov	r7, #0
   3c89c:	cmp	r0, #0
   3c8a0:	blt	3c8f8 <__assert_fail@plt+0x29d3c>
   3c8a4:	mov	r0, r4
   3c8a8:	bl	1288c <strlen@plt>
   3c8ac:	add	r0, r0, #27
   3c8b0:	cmp	r0, #4032	; 0xfc0
   3c8b4:	bls	3c8c8 <__assert_fail@plt+0x29d0c>
   3c8b8:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   3c8bc:	mov	r5, r0
   3c8c0:	cmp	r0, #0
   3c8c4:	beq	3c8f8 <__assert_fail@plt+0x29d3c>
   3c8c8:	movw	r1, #14873	; 0x3a19
   3c8cc:	mov	r0, r5
   3c8d0:	mov	r2, r6
   3c8d4:	movt	r1, #4
   3c8d8:	bl	12a60 <sprintf@plt>
   3c8dc:	add	r0, r5, r0
   3c8e0:	mov	r1, r4
   3c8e4:	bl	12748 <strcpy@plt>
   3c8e8:	b	3c8f4 <__assert_fail@plt+0x29d38>
   3c8ec:	mov	r0, #0
   3c8f0:	strb	r0, [r5]
   3c8f4:	mov	r7, r5
   3c8f8:	mov	r0, r7
   3c8fc:	sub	sp, fp, #24
   3c900:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c904:	mvn	r0, #0
   3c908:	mov	r7, #0
   3c90c:	str	r0, [r9]
   3c910:	b	3c8f8 <__assert_fail@plt+0x29d3c>
   3c914:	sub	r0, r0, #1
   3c918:	ldrb	r3, [r0, #1]!
   3c91c:	cmp	r3, #47	; 0x2f
   3c920:	beq	3c918 <__assert_fail@plt+0x29d5c>
   3c924:	mov	r2, #0
   3c928:	mov	r1, r0
   3c92c:	uxtb	r3, r3
   3c930:	cmp	r3, #47	; 0x2f
   3c934:	beq	3c950 <__assert_fail@plt+0x29d94>
   3c938:	cmp	r3, #0
   3c93c:	bxeq	lr
   3c940:	tst	r2, #1
   3c944:	mov	r2, #0
   3c948:	movne	r0, r1
   3c94c:	b	3c954 <__assert_fail@plt+0x29d98>
   3c950:	mov	r2, #1
   3c954:	ldrb	r3, [r1, #1]!
   3c958:	b	3c92c <__assert_fail@plt+0x29d70>
   3c95c:	push	{r4, sl, fp, lr}
   3c960:	add	fp, sp, #8
   3c964:	mov	r4, r0
   3c968:	bl	1288c <strlen@plt>
   3c96c:	mov	r1, r0
   3c970:	sub	r2, r4, #1
   3c974:	mov	r0, r1
   3c978:	cmp	r1, #2
   3c97c:	popcc	{r4, sl, fp, pc}
   3c980:	ldrb	r3, [r2, r0]
   3c984:	sub	r1, r0, #1
   3c988:	cmp	r3, #47	; 0x2f
   3c98c:	beq	3c974 <__assert_fail@plt+0x29db8>
   3c990:	pop	{r4, sl, fp, pc}
   3c994:	push	{r4, r5, r6, sl, fp, lr}
   3c998:	add	fp, sp, #16
   3c99c:	mov	r4, r0
   3c9a0:	bl	12760 <__fpending@plt>
   3c9a4:	mov	r5, r0
   3c9a8:	mov	r0, r4
   3c9ac:	bl	1258c <ferror@plt>
   3c9b0:	mov	r6, r0
   3c9b4:	mov	r0, r4
   3c9b8:	bl	129a0 <fclose@plt>
   3c9bc:	cmp	r6, #0
   3c9c0:	beq	3c9e0 <__assert_fail@plt+0x29e24>
   3c9c4:	mvn	r4, #0
   3c9c8:	cmp	r0, #0
   3c9cc:	bne	3ca0c <__assert_fail@plt+0x29e50>
   3c9d0:	bl	128d4 <__errno_location@plt>
   3c9d4:	mov	r1, #0
   3c9d8:	str	r1, [r0]
   3c9dc:	b	3ca0c <__assert_fail@plt+0x29e50>
   3c9e0:	cmp	r0, #0
   3c9e4:	mov	r4, r0
   3c9e8:	mvnne	r4, #0
   3c9ec:	cmp	r5, #0
   3c9f0:	bne	3ca0c <__assert_fail@plt+0x29e50>
   3c9f4:	cmp	r0, #0
   3c9f8:	beq	3ca0c <__assert_fail@plt+0x29e50>
   3c9fc:	bl	128d4 <__errno_location@plt>
   3ca00:	ldr	r0, [r0]
   3ca04:	subs	r4, r0, #9
   3ca08:	mvnne	r4, #0
   3ca0c:	mov	r0, r4
   3ca10:	pop	{r4, r5, r6, sl, fp, pc}
   3ca14:	movw	r2, #62998	; 0xf616
   3ca18:	mov	r1, #0
   3ca1c:	movt	r2, #149	; 0x95
   3ca20:	str	r1, [r0, #16]
   3ca24:	str	r1, [r0, #20]
   3ca28:	str	r2, [r0, #24]
   3ca2c:	bx	lr
   3ca30:	push	{r4, r5, r6, r7, fp, lr}
   3ca34:	add	fp, sp, #16
   3ca38:	ldr	r2, [r0, #24]
   3ca3c:	movw	r3, #62998	; 0xf616
   3ca40:	movt	r3, #149	; 0x95
   3ca44:	cmp	r2, r3
   3ca48:	bne	3cae0 <__assert_fail@plt+0x29f24>
   3ca4c:	mov	r3, r0
   3ca50:	ldr	r2, [r3, #16]!
   3ca54:	ldr	lr, [r3, #4]
   3ca58:	orrs	r5, r2, lr
   3ca5c:	beq	3ca94 <__assert_fail@plt+0x29ed8>
   3ca60:	ldrd	r4, [r0]
   3ca64:	ldrd	r6, [r1, #96]	; 0x60
   3ca68:	eor	r7, r7, r5
   3ca6c:	eor	r6, r6, r4
   3ca70:	orrs	r7, r6, r7
   3ca74:	bne	3ca94 <__assert_fail@plt+0x29ed8>
   3ca78:	ldrd	r4, [r0, #8]
   3ca7c:	ldrd	r6, [r1]
   3ca80:	mov	ip, #1
   3ca84:	eor	r7, r7, r5
   3ca88:	eor	r6, r6, r4
   3ca8c:	orrs	r7, r6, r7
   3ca90:	beq	3cad8 <__assert_fail@plt+0x29f1c>
   3ca94:	adds	r4, r2, #1
   3ca98:	mov	ip, #0
   3ca9c:	adc	r5, lr, #0
   3caa0:	and	r2, r4, r2
   3caa4:	strd	r4, [r3]
   3caa8:	and	r3, r5, lr
   3caac:	orrs	r2, r2, r3
   3cab0:	bne	3cad8 <__assert_fail@plt+0x29f1c>
   3cab4:	orrs	r2, r4, r5
   3cab8:	beq	3cad4 <__assert_fail@plt+0x29f18>
   3cabc:	ldrd	r2, [r1]
   3cac0:	str	r3, [r0, #12]
   3cac4:	str	r2, [r0, #8]
   3cac8:	ldrd	r2, [r1, #96]	; 0x60
   3cacc:	stm	r0, {r2, r3}
   3cad0:	b	3cad8 <__assert_fail@plt+0x29f1c>
   3cad4:	mov	ip, #1
   3cad8:	mov	r0, ip
   3cadc:	pop	{r4, r5, r6, r7, fp, pc}
   3cae0:	movw	r0, #14891	; 0x3a2b
   3cae4:	movw	r1, #14915	; 0x3a43
   3cae8:	movw	r3, #14929	; 0x3a51
   3caec:	mov	r2, #60	; 0x3c
   3caf0:	movt	r0, #4
   3caf4:	movt	r1, #4
   3caf8:	movt	r3, #4
   3cafc:	bl	12bbc <__assert_fail@plt>
   3cb00:	push	{r4, r5, r6, r7, fp, lr}
   3cb04:	add	fp, sp, #16
   3cb08:	mov	r4, r0
   3cb0c:	ldr	r0, [r0, #4]
   3cb10:	mov	r5, r1
   3cb14:	cmp	r0, r1
   3cb18:	bcs	3cb48 <__assert_fail@plt+0x29f8c>
   3cb1c:	mov	r6, r3
   3cb20:	cmp	r3, #0
   3cb24:	beq	3cb50 <__assert_fail@plt+0x29f94>
   3cb28:	mvn	r0, #0
   3cb2c:	udiv	r0, r0, r6
   3cb30:	cmp	r0, r5
   3cb34:	bcs	3cb50 <__assert_fail@plt+0x29f94>
   3cb38:	bl	128d4 <__errno_location@plt>
   3cb3c:	mov	r1, #12
   3cb40:	str	r1, [r0]
   3cb44:	b	3cbb4 <__assert_fail@plt+0x29ff8>
   3cb48:	str	r5, [r4]
   3cb4c:	b	3cbac <__assert_fail@plt+0x29ff0>
   3cb50:	ldr	r0, [r4, #8]
   3cb54:	mul	r1, r6, r5
   3cb58:	cmp	r0, r2
   3cb5c:	beq	3cb74 <__assert_fail@plt+0x29fb8>
   3cb60:	bl	2ecdc <__assert_fail@plt+0x1c120>
   3cb64:	mov	r7, r0
   3cb68:	cmp	r0, #0
   3cb6c:	bne	3cba4 <__assert_fail@plt+0x29fe8>
   3cb70:	b	3cbb4 <__assert_fail@plt+0x29ff8>
   3cb74:	mov	r0, r1
   3cb78:	bl	2e1e4 <__assert_fail@plt+0x1b628>
   3cb7c:	cmp	r0, #0
   3cb80:	beq	3cbb4 <__assert_fail@plt+0x29ff8>
   3cb84:	ldr	r1, [r4, #8]
   3cb88:	mov	r7, r0
   3cb8c:	cmp	r1, #0
   3cb90:	beq	3cba4 <__assert_fail@plt+0x29fe8>
   3cb94:	ldr	r0, [r4]
   3cb98:	mul	r2, r0, r6
   3cb9c:	mov	r0, r7
   3cba0:	bl	125c8 <memcpy@plt>
   3cba4:	str	r5, [r4]
   3cba8:	stmib	r4, {r5, r7}
   3cbac:	mov	r0, #1
   3cbb0:	pop	{r4, r5, r6, r7, fp, pc}
   3cbb4:	mov	r0, #0
   3cbb8:	pop	{r4, r5, r6, r7, fp, pc}
   3cbbc:	mov	r1, r0
   3cbc0:	mov	r0, #0
   3cbc4:	b	125b0 <clock_gettime@plt>
   3cbc8:	push	{fp, lr}
   3cbcc:	mov	fp, sp
   3cbd0:	mov	r1, r0
   3cbd4:	mov	r0, #0
   3cbd8:	bl	125b0 <clock_gettime@plt>
   3cbdc:	pop	{fp, pc}
   3cbe0:	push	{r4, sl, fp, lr}
   3cbe4:	add	fp, sp, #8
   3cbe8:	sub	sp, sp, #264	; 0x108
   3cbec:	add	r1, sp, #7
   3cbf0:	movw	r2, #257	; 0x101
   3cbf4:	bl	3cfac <__assert_fail@plt+0x2a3f0>
   3cbf8:	mov	r4, #0
   3cbfc:	cmp	r0, #0
   3cc00:	bne	3cc38 <__assert_fail@plt+0x2a07c>
   3cc04:	movw	r1, #56318	; 0xdbfe
   3cc08:	add	r0, sp, #7
   3cc0c:	movt	r1, #3
   3cc10:	bl	124cc <strcmp@plt>
   3cc14:	cmp	r0, #0
   3cc18:	beq	3cc38 <__assert_fail@plt+0x2a07c>
   3cc1c:	movw	r1, #14996	; 0x3a94
   3cc20:	add	r0, sp, #7
   3cc24:	movt	r1, #4
   3cc28:	bl	124cc <strcmp@plt>
   3cc2c:	mov	r4, r0
   3cc30:	cmp	r0, #0
   3cc34:	movwne	r4, #1
   3cc38:	mov	r0, r4
   3cc3c:	sub	sp, fp, #8
   3cc40:	pop	{r4, sl, fp, pc}
   3cc44:	mov	r3, #1
   3cc48:	mov	r2, #0
   3cc4c:	vdup.32	q8, r1
   3cc50:	strb	r3, [r0, #28]
   3cc54:	str	r2, [r0, #20]
   3cc58:	str	r2, [r0, #24]
   3cc5c:	add	r3, r0, r2
   3cc60:	add	r2, r2, #16
   3cc64:	cmp	r2, #16
   3cc68:	vst1.32	{d16-d17}, [r3]
   3cc6c:	bne	3cc5c <__assert_fail@plt+0x2a0a0>
   3cc70:	str	r1, [r0, #16]
   3cc74:	bx	lr
   3cc78:	ldrb	r0, [r0, #28]
   3cc7c:	bx	lr
   3cc80:	push	{fp, lr}
   3cc84:	mov	fp, sp
   3cc88:	ldrb	r3, [r0, #28]
   3cc8c:	ldr	r2, [r0, #20]
   3cc90:	eor	lr, r3, #1
   3cc94:	add	r2, r2, lr
   3cc98:	and	r3, r2, #3
   3cc9c:	ldr	ip, [r0, r3, lsl #2]
   3cca0:	str	r1, [r0, r3, lsl #2]
   3cca4:	str	r3, [r0, #20]
   3cca8:	ldr	r1, [r0, #24]
   3ccac:	cmp	r3, r1
   3ccb0:	addeq	r1, r2, lr
   3ccb4:	andeq	r1, r1, #3
   3ccb8:	streq	r1, [r0, #24]
   3ccbc:	mov	r1, #0
   3ccc0:	strb	r1, [r0, #28]
   3ccc4:	mov	r0, ip
   3ccc8:	pop	{fp, pc}
   3cccc:	ldrb	r1, [r0, #28]
   3ccd0:	cmp	r1, #0
   3ccd4:	bne	3cd18 <__assert_fail@plt+0x2a15c>
   3ccd8:	ldr	r3, [r0, #20]
   3ccdc:	ldr	r2, [r0, #16]
   3cce0:	ldr	r1, [r0, r3, lsl #2]
   3cce4:	str	r2, [r0, r3, lsl #2]
   3cce8:	ldr	r2, [r0, #20]
   3ccec:	ldr	r3, [r0, #24]
   3ccf0:	cmp	r2, r3
   3ccf4:	bne	3cd04 <__assert_fail@plt+0x2a148>
   3ccf8:	mov	r2, #1
   3ccfc:	strb	r2, [r0, #28]
   3cd00:	b	3cd10 <__assert_fail@plt+0x2a154>
   3cd04:	sub	r2, r2, #1
   3cd08:	and	r2, r2, #3
   3cd0c:	str	r2, [r0, #20]
   3cd10:	mov	r0, r1
   3cd14:	bx	lr
   3cd18:	push	{fp, lr}
   3cd1c:	mov	fp, sp
   3cd20:	bl	12b68 <abort@plt>
   3cd24:	push	{fp, lr}
   3cd28:	mov	fp, sp
   3cd2c:	mov	r0, #14
   3cd30:	bl	12a30 <nl_langinfo@plt>
   3cd34:	movw	r1, #63055	; 0xf64f
   3cd38:	cmp	r0, #0
   3cd3c:	movt	r1, #3
   3cd40:	movne	r1, r0
   3cd44:	movw	r0, #15002	; 0x3a9a
   3cd48:	ldrb	r2, [r1]
   3cd4c:	movt	r0, #4
   3cd50:	cmp	r2, #0
   3cd54:	movne	r0, r1
   3cd58:	pop	{fp, pc}
   3cd5c:	push	{r4, sl, fp, lr}
   3cd60:	add	fp, sp, #8
   3cd64:	mov	r4, #0
   3cd68:	adds	r0, r0, #16
   3cd6c:	adc	r1, r4, #0
   3cd70:	rsb	r2, r1, #0
   3cd74:	eors	r2, r2, r1
   3cd78:	movwne	r2, #1
   3cd7c:	cmp	r0, #0
   3cd80:	blt	3cdbc <__assert_fail@plt+0x2a200>
   3cd84:	cmp	r2, #0
   3cd88:	asreq	r2, r0, #31
   3cd8c:	eoreq	r3, r0, r0
   3cd90:	andeq	r2, r2, #1
   3cd94:	eoreq	r1, r1, r2
   3cd98:	orrseq	r1, r3, r1
   3cd9c:	bne	3cdbc <__assert_fail@plt+0x2a200>
   3cda0:	bl	127e4 <malloc@plt>
   3cda4:	cmp	r0, #0
   3cda8:	addne	r4, r0, #8
   3cdac:	movne	r1, #8
   3cdb0:	bfine	r4, r1, #0, #4
   3cdb4:	subne	r0, r4, r0
   3cdb8:	strbne	r0, [r4, #-1]
   3cdbc:	mov	r0, r4
   3cdc0:	pop	{r4, sl, fp, pc}
   3cdc4:	tst	r0, #7
   3cdc8:	bne	3cde0 <__assert_fail@plt+0x2a224>
   3cdcc:	tst	r0, #8
   3cdd0:	bxeq	lr
   3cdd4:	ldrb	r1, [r0, #-1]
   3cdd8:	sub	r0, r0, r1
   3cddc:	b	2c048 <__assert_fail@plt+0x1948c>
   3cde0:	push	{fp, lr}
   3cde4:	mov	fp, sp
   3cde8:	bl	12b68 <abort@plt>
   3cdec:	push	{r4, sl, fp, lr}
   3cdf0:	add	fp, sp, #8
   3cdf4:	mov	r4, r0
   3cdf8:	bl	12544 <wcwidth@plt>
   3cdfc:	cmn	r0, #1
   3ce00:	popgt	{r4, sl, fp, pc}
   3ce04:	mov	r0, r4
   3ce08:	bl	126ac <iswcntrl@plt>
   3ce0c:	clz	r0, r0
   3ce10:	lsr	r0, r0, #5
   3ce14:	pop	{r4, sl, fp, pc}
   3ce18:	push	{r4, r5, r6, sl, fp, lr}
   3ce1c:	add	fp, sp, #16
   3ce20:	mov	r4, r0
   3ce24:	mov	r0, r1
   3ce28:	mov	r5, r1
   3ce2c:	ldr	r1, [r0], #16
   3ce30:	cmp	r1, r0
   3ce34:	beq	3ce40 <__assert_fail@plt+0x2a284>
   3ce38:	mov	r6, r1
   3ce3c:	b	3ce50 <__assert_fail@plt+0x2a294>
   3ce40:	ldr	r2, [r5, #4]
   3ce44:	add	r6, r4, #16
   3ce48:	mov	r0, r6
   3ce4c:	bl	125c8 <memcpy@plt>
   3ce50:	str	r6, [r4]
   3ce54:	ldr	r0, [r5, #4]
   3ce58:	str	r0, [r4, #4]
   3ce5c:	ldrb	r0, [r5, #8]
   3ce60:	strb	r0, [r4, #8]
   3ce64:	cmp	r0, #0
   3ce68:	ldrne	r0, [r5, #12]
   3ce6c:	strne	r0, [r4, #12]
   3ce70:	pop	{r4, r5, r6, sl, fp, pc}
   3ce74:	movw	r2, #15008	; 0x3aa0
   3ce78:	ubfx	r1, r0, #5, #3
   3ce7c:	and	r0, r0, #31
   3ce80:	movt	r2, #4
   3ce84:	ldr	r1, [r2, r1, lsl #2]
   3ce88:	mov	r2, #1
   3ce8c:	and	r0, r1, r2, lsl r0
   3ce90:	cmp	r0, #0
   3ce94:	movwne	r0, #1
   3ce98:	bx	lr
   3ce9c:	push	{r4, r5, r6, sl, fp, lr}
   3cea0:	add	fp, sp, #16
   3cea4:	sub	sp, sp, #56	; 0x38
   3cea8:	mov	r5, r0
   3ceac:	bl	12730 <__ctype_get_mb_cur_max@plt>
   3ceb0:	cmp	r0, #2
   3ceb4:	bcc	3cf40 <__assert_fail@plt+0x2a384>
   3ceb8:	mov	r4, #0
   3cebc:	mov	r0, sp
   3cec0:	str	r4, [sp, #8]
   3cec4:	str	r4, [sp, #4]
   3cec8:	strb	r4, [sp]
   3cecc:	str	r5, [sp, #16]
   3ced0:	strb	r4, [sp, #12]
   3ced4:	bl	244a4 <__assert_fail@plt+0x118e8>
   3ced8:	ldrb	r0, [sp, #24]
   3cedc:	cmp	r0, #0
   3cee0:	beq	3cef0 <__assert_fail@plt+0x2a334>
   3cee4:	ldr	r0, [sp, #28]
   3cee8:	cmp	r0, #0
   3ceec:	beq	3cf34 <__assert_fail@plt+0x2a378>
   3cef0:	mov	r6, #0
   3cef4:	mov	r5, sp
   3cef8:	mov	r4, #0
   3cefc:	strb	r6, [sp, #12]
   3cf00:	ldr	r0, [sp, #16]
   3cf04:	ldr	r1, [sp, #20]
   3cf08:	add	r0, r0, r1
   3cf0c:	str	r0, [sp, #16]
   3cf10:	mov	r0, r5
   3cf14:	bl	244a4 <__assert_fail@plt+0x118e8>
   3cf18:	ldrb	r1, [sp, #24]
   3cf1c:	ldr	r0, [sp, #28]
   3cf20:	add	r4, r4, #1
   3cf24:	cmp	r1, #0
   3cf28:	beq	3cefc <__assert_fail@plt+0x2a340>
   3cf2c:	cmp	r0, #0
   3cf30:	bne	3cefc <__assert_fail@plt+0x2a340>
   3cf34:	mov	r0, r4
   3cf38:	sub	sp, fp, #16
   3cf3c:	pop	{r4, r5, r6, sl, fp, pc}
   3cf40:	mov	r0, r5
   3cf44:	sub	sp, fp, #16
   3cf48:	pop	{r4, r5, r6, sl, fp, lr}
   3cf4c:	b	1288c <strlen@plt>
   3cf50:	push	{r4, r5, r6, sl, fp, lr}
   3cf54:	add	fp, sp, #16
   3cf58:	orr	r2, r2, #18688	; 0x4900
   3cf5c:	mov	r4, r3
   3cf60:	orr	r2, r2, #524288	; 0x80000
   3cf64:	bl	24c08 <__assert_fail@plt+0x1204c>
   3cf68:	mov	r5, r0
   3cf6c:	mov	r0, #0
   3cf70:	cmp	r5, #0
   3cf74:	poplt	{r4, r5, r6, sl, fp, pc}
   3cf78:	mov	r0, r5
   3cf7c:	bl	12a78 <fdopendir@plt>
   3cf80:	cmp	r0, #0
   3cf84:	strne	r5, [r4]
   3cf88:	popne	{r4, r5, r6, sl, fp, pc}
   3cf8c:	bl	128d4 <__errno_location@plt>
   3cf90:	ldr	r6, [r0]
   3cf94:	mov	r4, r0
   3cf98:	mov	r0, r5
   3cf9c:	bl	12b74 <close@plt>
   3cfa0:	mov	r0, #0
   3cfa4:	str	r6, [r4]
   3cfa8:	pop	{r4, r5, r6, sl, fp, pc}
   3cfac:	push	{r4, r5, r6, r7, fp, lr}
   3cfb0:	add	fp, sp, #16
   3cfb4:	mov	r4, r1
   3cfb8:	mov	r1, #0
   3cfbc:	mov	r6, r2
   3cfc0:	bl	129e8 <setlocale@plt>
   3cfc4:	cmp	r0, #0
   3cfc8:	beq	3cff4 <__assert_fail@plt+0x2a438>
   3cfcc:	mov	r7, r0
   3cfd0:	bl	1288c <strlen@plt>
   3cfd4:	cmp	r0, r6
   3cfd8:	bcs	3d008 <__assert_fail@plt+0x2a44c>
   3cfdc:	add	r2, r0, #1
   3cfe0:	mov	r0, r4
   3cfe4:	mov	r1, r7
   3cfe8:	bl	125c8 <memcpy@plt>
   3cfec:	mov	r5, #0
   3cff0:	b	3d030 <__assert_fail@plt+0x2a474>
   3cff4:	cmp	r6, #0
   3cff8:	mov	r5, #22
   3cffc:	movne	r0, #0
   3d000:	strbne	r0, [r4]
   3d004:	b	3d030 <__assert_fail@plt+0x2a474>
   3d008:	mov	r5, #34	; 0x22
   3d00c:	cmp	r6, #0
   3d010:	beq	3d030 <__assert_fail@plt+0x2a474>
   3d014:	sub	r6, r6, #1
   3d018:	mov	r0, r4
   3d01c:	mov	r1, r7
   3d020:	mov	r2, r6
   3d024:	bl	125c8 <memcpy@plt>
   3d028:	mov	r0, #0
   3d02c:	strb	r0, [r4, r6]
   3d030:	mov	r0, r5
   3d034:	pop	{r4, r5, r6, r7, fp, pc}
   3d038:	mov	r1, #0
   3d03c:	b	129e8 <setlocale@plt>
   3d040:	eor	r1, r1, #-2147483648	; 0x80000000
   3d044:	b	3d04c <__assert_fail@plt+0x2a490>
   3d048:	eor	r3, r3, #-2147483648	; 0x80000000
   3d04c:	push	{r4, r5, lr}
   3d050:	lsl	r4, r1, #1
   3d054:	lsl	r5, r3, #1
   3d058:	teq	r4, r5
   3d05c:	teqeq	r0, r2
   3d060:	orrsne	ip, r4, r0
   3d064:	orrsne	ip, r5, r2
   3d068:	mvnsne	ip, r4, asr #21
   3d06c:	mvnsne	ip, r5, asr #21
   3d070:	beq	3d25c <__assert_fail@plt+0x2a6a0>
   3d074:	lsr	r4, r4, #21
   3d078:	rsbs	r5, r4, r5, lsr #21
   3d07c:	rsblt	r5, r5, #0
   3d080:	ble	3d0a0 <__assert_fail@plt+0x2a4e4>
   3d084:	add	r4, r4, r5
   3d088:	eor	r2, r0, r2
   3d08c:	eor	r3, r1, r3
   3d090:	eor	r0, r2, r0
   3d094:	eor	r1, r3, r1
   3d098:	eor	r2, r0, r2
   3d09c:	eor	r3, r1, r3
   3d0a0:	cmp	r5, #54	; 0x36
   3d0a4:	pophi	{r4, r5, pc}
   3d0a8:	tst	r1, #-2147483648	; 0x80000000
   3d0ac:	lsl	r1, r1, #12
   3d0b0:	mov	ip, #1048576	; 0x100000
   3d0b4:	orr	r1, ip, r1, lsr #12
   3d0b8:	beq	3d0c4 <__assert_fail@plt+0x2a508>
   3d0bc:	rsbs	r0, r0, #0
   3d0c0:	rsc	r1, r1, #0
   3d0c4:	tst	r3, #-2147483648	; 0x80000000
   3d0c8:	lsl	r3, r3, #12
   3d0cc:	orr	r3, ip, r3, lsr #12
   3d0d0:	beq	3d0dc <__assert_fail@plt+0x2a520>
   3d0d4:	rsbs	r2, r2, #0
   3d0d8:	rsc	r3, r3, #0
   3d0dc:	teq	r4, r5
   3d0e0:	beq	3d244 <__assert_fail@plt+0x2a688>
   3d0e4:	sub	r4, r4, #1
   3d0e8:	rsbs	lr, r5, #32
   3d0ec:	blt	3d108 <__assert_fail@plt+0x2a54c>
   3d0f0:	lsl	ip, r2, lr
   3d0f4:	adds	r0, r0, r2, lsr r5
   3d0f8:	adc	r1, r1, #0
   3d0fc:	adds	r0, r0, r3, lsl lr
   3d100:	adcs	r1, r1, r3, asr r5
   3d104:	b	3d124 <__assert_fail@plt+0x2a568>
   3d108:	sub	r5, r5, #32
   3d10c:	add	lr, lr, #32
   3d110:	cmp	r2, #1
   3d114:	lsl	ip, r3, lr
   3d118:	orrcs	ip, ip, #2
   3d11c:	adds	r0, r0, r3, asr r5
   3d120:	adcs	r1, r1, r3, asr #31
   3d124:	and	r5, r1, #-2147483648	; 0x80000000
   3d128:	bpl	3d138 <__assert_fail@plt+0x2a57c>
   3d12c:	rsbs	ip, ip, #0
   3d130:	rscs	r0, r0, #0
   3d134:	rsc	r1, r1, #0
   3d138:	cmp	r1, #1048576	; 0x100000
   3d13c:	bcc	3d17c <__assert_fail@plt+0x2a5c0>
   3d140:	cmp	r1, #2097152	; 0x200000
   3d144:	bcc	3d164 <__assert_fail@plt+0x2a5a8>
   3d148:	lsrs	r1, r1, #1
   3d14c:	rrxs	r0, r0
   3d150:	rrx	ip, ip
   3d154:	add	r4, r4, #1
   3d158:	lsl	r2, r4, #21
   3d15c:	cmn	r2, #4194304	; 0x400000
   3d160:	bcs	3d2bc <__assert_fail@plt+0x2a700>
   3d164:	cmp	ip, #-2147483648	; 0x80000000
   3d168:	lsrseq	ip, r0, #1
   3d16c:	adcs	r0, r0, #0
   3d170:	adc	r1, r1, r4, lsl #20
   3d174:	orr	r1, r1, r5
   3d178:	pop	{r4, r5, pc}
   3d17c:	lsls	ip, ip, #1
   3d180:	adcs	r0, r0, r0
   3d184:	adc	r1, r1, r1
   3d188:	tst	r1, #1048576	; 0x100000
   3d18c:	sub	r4, r4, #1
   3d190:	bne	3d164 <__assert_fail@plt+0x2a5a8>
   3d194:	teq	r1, #0
   3d198:	moveq	r1, r0
   3d19c:	moveq	r0, #0
   3d1a0:	clz	r3, r1
   3d1a4:	addeq	r3, r3, #32
   3d1a8:	sub	r3, r3, #11
   3d1ac:	subs	r2, r3, #32
   3d1b0:	bge	3d1d4 <__assert_fail@plt+0x2a618>
   3d1b4:	adds	r2, r2, #12
   3d1b8:	ble	3d1d0 <__assert_fail@plt+0x2a614>
   3d1bc:	add	ip, r2, #20
   3d1c0:	rsb	r2, r2, #12
   3d1c4:	lsl	r0, r1, ip
   3d1c8:	lsr	r1, r1, r2
   3d1cc:	b	3d1e4 <__assert_fail@plt+0x2a628>
   3d1d0:	add	r2, r2, #20
   3d1d4:	rsble	ip, r2, #32
   3d1d8:	lsl	r1, r1, r2
   3d1dc:	orrle	r1, r1, r0, lsr ip
   3d1e0:	lslle	r0, r0, r2
   3d1e4:	subs	r4, r4, r3
   3d1e8:	addge	r1, r1, r4, lsl #20
   3d1ec:	orrge	r1, r1, r5
   3d1f0:	popge	{r4, r5, pc}
   3d1f4:	mvn	r4, r4
   3d1f8:	subs	r4, r4, #31
   3d1fc:	bge	3d238 <__assert_fail@plt+0x2a67c>
   3d200:	adds	r4, r4, #12
   3d204:	bgt	3d220 <__assert_fail@plt+0x2a664>
   3d208:	add	r4, r4, #20
   3d20c:	rsb	r2, r4, #32
   3d210:	lsr	r0, r0, r4
   3d214:	orr	r0, r0, r1, lsl r2
   3d218:	orr	r1, r5, r1, lsr r4
   3d21c:	pop	{r4, r5, pc}
   3d220:	rsb	r4, r4, #12
   3d224:	rsb	r2, r4, #32
   3d228:	lsr	r0, r0, r2
   3d22c:	orr	r0, r0, r1, lsl r4
   3d230:	mov	r1, r5
   3d234:	pop	{r4, r5, pc}
   3d238:	lsr	r0, r1, r4
   3d23c:	mov	r1, r5
   3d240:	pop	{r4, r5, pc}
   3d244:	teq	r4, #0
   3d248:	eor	r3, r3, #1048576	; 0x100000
   3d24c:	eoreq	r1, r1, #1048576	; 0x100000
   3d250:	addeq	r4, r4, #1
   3d254:	subne	r5, r5, #1
   3d258:	b	3d0e4 <__assert_fail@plt+0x2a528>
   3d25c:	mvns	ip, r4, asr #21
   3d260:	mvnsne	ip, r5, asr #21
   3d264:	beq	3d2cc <__assert_fail@plt+0x2a710>
   3d268:	teq	r4, r5
   3d26c:	teqeq	r0, r2
   3d270:	beq	3d284 <__assert_fail@plt+0x2a6c8>
   3d274:	orrs	ip, r4, r0
   3d278:	moveq	r1, r3
   3d27c:	moveq	r0, r2
   3d280:	pop	{r4, r5, pc}
   3d284:	teq	r1, r3
   3d288:	movne	r1, #0
   3d28c:	movne	r0, #0
   3d290:	popne	{r4, r5, pc}
   3d294:	lsrs	ip, r4, #21
   3d298:	bne	3d2ac <__assert_fail@plt+0x2a6f0>
   3d29c:	lsls	r0, r0, #1
   3d2a0:	adcs	r1, r1, r1
   3d2a4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3d2a8:	pop	{r4, r5, pc}
   3d2ac:	adds	r4, r4, #4194304	; 0x400000
   3d2b0:	addcc	r1, r1, #1048576	; 0x100000
   3d2b4:	popcc	{r4, r5, pc}
   3d2b8:	and	r5, r1, #-2147483648	; 0x80000000
   3d2bc:	orr	r1, r5, #2130706432	; 0x7f000000
   3d2c0:	orr	r1, r1, #15728640	; 0xf00000
   3d2c4:	mov	r0, #0
   3d2c8:	pop	{r4, r5, pc}
   3d2cc:	mvns	ip, r4, asr #21
   3d2d0:	movne	r1, r3
   3d2d4:	movne	r0, r2
   3d2d8:	mvnseq	ip, r5, asr #21
   3d2dc:	movne	r3, r1
   3d2e0:	movne	r2, r0
   3d2e4:	orrs	r4, r0, r1, lsl #12
   3d2e8:	orrseq	r5, r2, r3, lsl #12
   3d2ec:	teqeq	r1, r3
   3d2f0:	orrne	r1, r1, #524288	; 0x80000
   3d2f4:	pop	{r4, r5, pc}
   3d2f8:	teq	r0, #0
   3d2fc:	moveq	r1, #0
   3d300:	bxeq	lr
   3d304:	push	{r4, r5, lr}
   3d308:	mov	r4, #1024	; 0x400
   3d30c:	add	r4, r4, #50	; 0x32
   3d310:	mov	r5, #0
   3d314:	mov	r1, #0
   3d318:	b	3d194 <__assert_fail@plt+0x2a5d8>
   3d31c:	teq	r0, #0
   3d320:	moveq	r1, #0
   3d324:	bxeq	lr
   3d328:	push	{r4, r5, lr}
   3d32c:	mov	r4, #1024	; 0x400
   3d330:	add	r4, r4, #50	; 0x32
   3d334:	ands	r5, r0, #-2147483648	; 0x80000000
   3d338:	rsbmi	r0, r0, #0
   3d33c:	mov	r1, #0
   3d340:	b	3d194 <__assert_fail@plt+0x2a5d8>
   3d344:	lsls	r2, r0, #1
   3d348:	asr	r1, r2, #3
   3d34c:	rrx	r1, r1
   3d350:	lsl	r0, r2, #28
   3d354:	andsne	r3, r2, #-16777216	; 0xff000000
   3d358:	teqne	r3, #-16777216	; 0xff000000
   3d35c:	eorne	r1, r1, #939524096	; 0x38000000
   3d360:	bxne	lr
   3d364:	bics	r2, r2, #-16777216	; 0xff000000
   3d368:	bxeq	lr
   3d36c:	teq	r3, #-16777216	; 0xff000000
   3d370:	orreq	r1, r1, #524288	; 0x80000
   3d374:	bxeq	lr
   3d378:	push	{r4, r5, lr}
   3d37c:	mov	r4, #896	; 0x380
   3d380:	and	r5, r1, #-2147483648	; 0x80000000
   3d384:	bic	r1, r1, #-2147483648	; 0x80000000
   3d388:	b	3d194 <__assert_fail@plt+0x2a5d8>
   3d38c:	orrs	r2, r0, r1
   3d390:	bxeq	lr
   3d394:	push	{r4, r5, lr}
   3d398:	mov	r5, #0
   3d39c:	b	3d3bc <__assert_fail@plt+0x2a800>
   3d3a0:	orrs	r2, r0, r1
   3d3a4:	bxeq	lr
   3d3a8:	push	{r4, r5, lr}
   3d3ac:	ands	r5, r1, #-2147483648	; 0x80000000
   3d3b0:	bpl	3d3bc <__assert_fail@plt+0x2a800>
   3d3b4:	rsbs	r0, r0, #0
   3d3b8:	rsc	r1, r1, #0
   3d3bc:	mov	r4, #1024	; 0x400
   3d3c0:	add	r4, r4, #50	; 0x32
   3d3c4:	lsrs	ip, r1, #22
   3d3c8:	beq	3d138 <__assert_fail@plt+0x2a57c>
   3d3cc:	mov	r2, #3
   3d3d0:	lsrs	ip, ip, #3
   3d3d4:	addne	r2, r2, #3
   3d3d8:	lsrs	ip, ip, #3
   3d3dc:	addne	r2, r2, #3
   3d3e0:	add	r2, r2, ip, lsr #3
   3d3e4:	rsb	r3, r2, #32
   3d3e8:	lsl	ip, r0, r3
   3d3ec:	lsr	r0, r0, r2
   3d3f0:	orr	r0, r0, r1, lsl r3
   3d3f4:	lsr	r1, r1, r2
   3d3f8:	add	r4, r4, r2
   3d3fc:	b	3d138 <__assert_fail@plt+0x2a57c>
   3d400:	cmp	r3, #0
   3d404:	cmpeq	r2, #0
   3d408:	bne	3d42c <__assert_fail@plt+0x2a870>
   3d40c:	cmp	r1, #0
   3d410:	movlt	r1, #-2147483648	; 0x80000000
   3d414:	movlt	r0, #0
   3d418:	blt	3d428 <__assert_fail@plt+0x2a86c>
   3d41c:	cmpeq	r0, #0
   3d420:	mvnne	r1, #-2147483648	; 0x80000000
   3d424:	mvnne	r0, #0
   3d428:	b	3d510 <__assert_fail@plt+0x2a954>
   3d42c:	sub	sp, sp, #8
   3d430:	push	{sp, lr}
   3d434:	cmp	r1, #0
   3d438:	blt	3d458 <__assert_fail@plt+0x2a89c>
   3d43c:	cmp	r3, #0
   3d440:	blt	3d48c <__assert_fail@plt+0x2a8d0>
   3d444:	bl	3d560 <__assert_fail@plt+0x2a9a4>
   3d448:	ldr	lr, [sp, #4]
   3d44c:	add	sp, sp, #8
   3d450:	pop	{r2, r3}
   3d454:	bx	lr
   3d458:	rsbs	r0, r0, #0
   3d45c:	sbc	r1, r1, r1, lsl #1
   3d460:	cmp	r3, #0
   3d464:	blt	3d4b0 <__assert_fail@plt+0x2a8f4>
   3d468:	bl	3d560 <__assert_fail@plt+0x2a9a4>
   3d46c:	ldr	lr, [sp, #4]
   3d470:	add	sp, sp, #8
   3d474:	pop	{r2, r3}
   3d478:	rsbs	r0, r0, #0
   3d47c:	sbc	r1, r1, r1, lsl #1
   3d480:	rsbs	r2, r2, #0
   3d484:	sbc	r3, r3, r3, lsl #1
   3d488:	bx	lr
   3d48c:	rsbs	r2, r2, #0
   3d490:	sbc	r3, r3, r3, lsl #1
   3d494:	bl	3d560 <__assert_fail@plt+0x2a9a4>
   3d498:	ldr	lr, [sp, #4]
   3d49c:	add	sp, sp, #8
   3d4a0:	pop	{r2, r3}
   3d4a4:	rsbs	r0, r0, #0
   3d4a8:	sbc	r1, r1, r1, lsl #1
   3d4ac:	bx	lr
   3d4b0:	rsbs	r2, r2, #0
   3d4b4:	sbc	r3, r3, r3, lsl #1
   3d4b8:	bl	3d560 <__assert_fail@plt+0x2a9a4>
   3d4bc:	ldr	lr, [sp, #4]
   3d4c0:	add	sp, sp, #8
   3d4c4:	pop	{r2, r3}
   3d4c8:	rsbs	r2, r2, #0
   3d4cc:	sbc	r3, r3, r3, lsl #1
   3d4d0:	bx	lr
   3d4d4:	cmp	r3, #0
   3d4d8:	cmpeq	r2, #0
   3d4dc:	bne	3d4f4 <__assert_fail@plt+0x2a938>
   3d4e0:	cmp	r1, #0
   3d4e4:	cmpeq	r0, #0
   3d4e8:	mvnne	r1, #0
   3d4ec:	mvnne	r0, #0
   3d4f0:	b	3d510 <__assert_fail@plt+0x2a954>
   3d4f4:	sub	sp, sp, #8
   3d4f8:	push	{sp, lr}
   3d4fc:	bl	3d560 <__assert_fail@plt+0x2a9a4>
   3d500:	ldr	lr, [sp, #4]
   3d504:	add	sp, sp, #8
   3d508:	pop	{r2, r3}
   3d50c:	bx	lr
   3d510:	push	{r1, lr}
   3d514:	mov	r0, #8
   3d518:	bl	12484 <raise@plt>
   3d51c:	pop	{r1, pc}
   3d520:	vmov	d6, r0, r1
   3d524:	vldr	d7, [pc, #36]	; 3d550 <__assert_fail@plt+0x2a994>
   3d528:	vldr	d5, [pc, #40]	; 3d558 <__assert_fail@plt+0x2a99c>
   3d52c:	vmul.f64	d7, d6, d7
   3d530:	vcvt.u32.f64	s14, d7
   3d534:	vcvt.f64.u32	d4, s14
   3d538:	vmov	r1, s14
   3d53c:	vmls.f64	d6, d4, d5
   3d540:	vcvt.u32.f64	s15, d6
   3d544:	vmov	r0, s15
   3d548:	bx	lr
   3d54c:	nop			; (mov r0, r0)
   3d550:	andeq	r0, r0, r0
   3d554:	ldclcc	0, cr0, [r0]
   3d558:	andeq	r0, r0, r0
   3d55c:	mvnsmi	r0, r0
   3d560:	cmp	r1, r3
   3d564:	cmpeq	r0, r2
   3d568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d56c:	mov	r4, r0
   3d570:	movcc	r0, #0
   3d574:	mov	r5, r1
   3d578:	ldr	lr, [sp, #36]	; 0x24
   3d57c:	movcc	r1, r0
   3d580:	bcc	3d67c <__assert_fail@plt+0x2aac0>
   3d584:	cmp	r3, #0
   3d588:	clzeq	ip, r2
   3d58c:	clzne	ip, r3
   3d590:	addeq	ip, ip, #32
   3d594:	cmp	r5, #0
   3d598:	clzeq	r1, r4
   3d59c:	addeq	r1, r1, #32
   3d5a0:	clzne	r1, r5
   3d5a4:	sub	ip, ip, r1
   3d5a8:	sub	sl, ip, #32
   3d5ac:	lsl	r9, r3, ip
   3d5b0:	rsb	fp, ip, #32
   3d5b4:	orr	r9, r9, r2, lsl sl
   3d5b8:	orr	r9, r9, r2, lsr fp
   3d5bc:	lsl	r8, r2, ip
   3d5c0:	cmp	r5, r9
   3d5c4:	cmpeq	r4, r8
   3d5c8:	movcc	r0, #0
   3d5cc:	movcc	r1, r0
   3d5d0:	bcc	3d5ec <__assert_fail@plt+0x2aa30>
   3d5d4:	mov	r0, #1
   3d5d8:	subs	r4, r4, r8
   3d5dc:	lsl	r1, r0, sl
   3d5e0:	orr	r1, r1, r0, lsr fp
   3d5e4:	lsl	r0, r0, ip
   3d5e8:	sbc	r5, r5, r9
   3d5ec:	cmp	ip, #0
   3d5f0:	beq	3d67c <__assert_fail@plt+0x2aac0>
   3d5f4:	lsr	r6, r8, #1
   3d5f8:	orr	r6, r6, r9, lsl #31
   3d5fc:	lsr	r7, r9, #1
   3d600:	mov	r2, ip
   3d604:	b	3d628 <__assert_fail@plt+0x2aa6c>
   3d608:	subs	r3, r4, r6
   3d60c:	sbc	r8, r5, r7
   3d610:	adds	r3, r3, r3
   3d614:	adc	r8, r8, r8
   3d618:	adds	r4, r3, #1
   3d61c:	adc	r5, r8, #0
   3d620:	subs	r2, r2, #1
   3d624:	beq	3d644 <__assert_fail@plt+0x2aa88>
   3d628:	cmp	r5, r7
   3d62c:	cmpeq	r4, r6
   3d630:	bcs	3d608 <__assert_fail@plt+0x2aa4c>
   3d634:	adds	r4, r4, r4
   3d638:	adc	r5, r5, r5
   3d63c:	subs	r2, r2, #1
   3d640:	bne	3d628 <__assert_fail@plt+0x2aa6c>
   3d644:	lsr	r3, r4, ip
   3d648:	orr	r3, r3, r5, lsl fp
   3d64c:	lsr	r2, r5, ip
   3d650:	orr	r3, r3, r5, lsr sl
   3d654:	adds	r0, r0, r4
   3d658:	mov	r4, r3
   3d65c:	lsl	r3, r2, ip
   3d660:	orr	r3, r3, r4, lsl sl
   3d664:	lsl	ip, r4, ip
   3d668:	orr	r3, r3, r4, lsr fp
   3d66c:	adc	r1, r1, r5
   3d670:	subs	r0, r0, ip
   3d674:	mov	r5, r2
   3d678:	sbc	r1, r1, r3
   3d67c:	cmp	lr, #0
   3d680:	strdne	r4, [lr]
   3d684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d688:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d68c:	mov	r7, r0
   3d690:	ldr	r6, [pc, #72]	; 3d6e0 <__assert_fail@plt+0x2ab24>
   3d694:	ldr	r5, [pc, #72]	; 3d6e4 <__assert_fail@plt+0x2ab28>
   3d698:	add	r6, pc, r6
   3d69c:	add	r5, pc, r5
   3d6a0:	sub	r6, r6, r5
   3d6a4:	mov	r8, r1
   3d6a8:	mov	r9, r2
   3d6ac:	bl	12410 <pthread_mutex_unlock@plt-0x20>
   3d6b0:	asrs	r6, r6, #2
   3d6b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d6b8:	mov	r4, #0
   3d6bc:	add	r4, r4, #1
   3d6c0:	ldr	r3, [r5], #4
   3d6c4:	mov	r2, r9
   3d6c8:	mov	r1, r8
   3d6cc:	mov	r0, r7
   3d6d0:	blx	r3
   3d6d4:	cmp	r6, r4
   3d6d8:	bne	3d6bc <__assert_fail@plt+0x2ab00>
   3d6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d6e0:	andeq	r6, r1, ip, asr r8
   3d6e4:	andeq	r6, r1, r4, asr r8
   3d6e8:	bx	lr
   3d6ec:	ldr	r3, [pc, #12]	; 3d700 <__assert_fail@plt+0x2ab44>
   3d6f0:	mov	r1, #0
   3d6f4:	add	r3, pc, r3
   3d6f8:	ldr	r2, [r3]
   3d6fc:	b	128f8 <__cxa_atexit@plt>
   3d700:	andeq	r6, r1, r0, lsr #23
   3d704:	mov	r2, r1
   3d708:	mov	r1, r0
   3d70c:	mov	r0, #3
   3d710:	b	12b20 <__xstat64@plt>
   3d714:	mov	r2, r1
   3d718:	mov	r1, r0
   3d71c:	mov	r0, #3
   3d720:	b	126f4 <__fxstat64@plt>
   3d724:	mov	r2, r1
   3d728:	mov	r1, r0
   3d72c:	mov	r0, #3
   3d730:	b	12b80 <__lxstat64@plt>
   3d734:	push	{lr}		; (str lr, [sp, #-4]!)
   3d738:	sub	sp, sp, #12
   3d73c:	str	r3, [sp]
   3d740:	mov	r3, r2
   3d744:	mov	r2, r1
   3d748:	mov	r1, r0
   3d74c:	mov	r0, #3
   3d750:	bl	126c4 <__fxstatat64@plt>
   3d754:	add	sp, sp, #12
   3d758:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0003d75c <.fini>:
   3d75c:	push	{r3, lr}
   3d760:	pop	{r3, pc}
