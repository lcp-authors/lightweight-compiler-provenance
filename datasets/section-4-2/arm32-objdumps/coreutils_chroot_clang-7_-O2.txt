
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00011098 <.init>:
   11098:	push	{r3, lr}
   1109c:	bl	113e8 <__assert_fail@plt+0x48>
   110a0:	pop	{r3, pc}

Disassembly of section .plt:

000110a4 <calloc@plt-0x14>:
   110a4:	push	{lr}		; (str lr, [sp, #-4]!)
   110a8:	ldr	lr, [pc, #4]	; 110b4 <calloc@plt-0x4>
   110ac:	add	lr, pc, lr
   110b0:	ldr	pc, [lr, #8]!
   110b4:	andeq	r6, r1, ip, asr #30

000110b8 <calloc@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110c4 <endgrent@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #3908]!	; 0xf44

000110d0 <fputs_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110dc <raise@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #3892]!	; 0xf34

000110e8 <getpwnam@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #3884]!	; 0xf2c

000110f4 <strcmp@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #3876]!	; 0xf24

00011100 <getpwuid@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #3868]!	; 0xf1c

0001110c <fflush@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #3860]!	; 0xf14

00011118 <free@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #3852]!	; 0xf0c

00011124 <_exit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3844]!	; 0xf04

00011130 <memcpy@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3836]!	; 0xefc

0001113c <execvp@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3828]!	; 0xef4

00011148 <__strtoull_internal@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3820]!	; 0xeec

00011154 <mbsinit@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3812]!	; 0xee4

00011160 <memcmp@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3804]!	; 0xedc

0001116c <dcgettext@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3796]!	; 0xed4

00011178 <realloc@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3788]!	; 0xecc

00011184 <textdomain@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3780]!	; 0xec4

00011190 <chdir@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3772]!	; 0xebc

0001119c <iswprint@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111a8 <setgroups@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3756]!	; 0xeac

000111b4 <fwrite@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3748]!	; 0xea4

000111c0 <lseek64@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111cc <__ctype_get_mb_cur_max@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3732]!	; 0xe94

000111d8 <chroot@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111e4 <__fpending@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3716]!	; 0xe84

000111f0 <mbrtowc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111fc <error@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3700]!	; 0xe74

00011208 <getenv@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3692]!	; 0xe6c

00011214 <setgid@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3684]!	; 0xe64

00011220 <malloc@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3676]!	; 0xe5c

0001122c <__libc_start_main@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3668]!	; 0xe54

00011238 <__freading@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3660]!	; 0xe4c

00011244 <__gmon_start__@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3652]!	; 0xe44

00011250 <getopt_long@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3644]!	; 0xe3c

0001125c <__ctype_b_loc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3636]!	; 0xe34

00011268 <exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3628]!	; 0xe2c

00011274 <strtoul@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3620]!	; 0xe24

00011280 <strlen@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3612]!	; 0xe1c

0001128c <strchr@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3604]!	; 0xe14

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112a4 <__cxa_atexit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3588]!	; 0xe04

000112b0 <getgrouplist@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112bc <memset@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3564]!	; 0xdec

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3556]!	; 0xde4

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3532]!	; 0xdcc

00011304 <strtok@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3516]!	; 0xdbc

0001131c <endpwent@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3508]!	; 0xdb4

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3500]!	; 0xdac

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3492]!	; 0xda4

00011340 <setuid@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3484]!	; 0xd9c

0001134c <getgroups@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3476]!	; 0xd94

00011358 <canonicalize_file_name@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3468]!	; 0xd8c

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3460]!	; 0xd84

00011370 <strncmp@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3452]!	; 0xd7c

0001137c <abort@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3444]!	; 0xd74

00011388 <getgrgid@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3436]!	; 0xd6c

00011394 <getgrnam@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3428]!	; 0xd64

000113a0 <__assert_fail@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3420]!	; 0xd5c

Disassembly of section .text:

000113ac <.text>:
   113ac:	mov	fp, #0
   113b0:	mov	lr, #0
   113b4:	pop	{r1}		; (ldr r1, [sp], #4)
   113b8:	mov	r2, sp
   113bc:	push	{r2}		; (str r2, [sp, #-4]!)
   113c0:	push	{r0}		; (str r0, [sp, #-4]!)
   113c4:	ldr	ip, [pc, #16]	; 113dc <__assert_fail@plt+0x3c>
   113c8:	push	{ip}		; (str ip, [sp, #-4]!)
   113cc:	ldr	r0, [pc, #12]	; 113e0 <__assert_fail@plt+0x40>
   113d0:	ldr	r3, [pc, #12]	; 113e4 <__assert_fail@plt+0x44>
   113d4:	bl	1122c <__libc_start_main@plt>
   113d8:	bl	1137c <abort@plt>
   113dc:	andeq	r6, r1, r4, lsr #26
   113e0:	andeq	r1, r1, r0, ror r7
   113e4:	andeq	r6, r1, r4, asr #25
   113e8:	ldr	r3, [pc, #20]	; 11404 <__assert_fail@plt+0x64>
   113ec:	ldr	r2, [pc, #20]	; 11408 <__assert_fail@plt+0x68>
   113f0:	add	r3, pc, r3
   113f4:	ldr	r2, [r3, r2]
   113f8:	cmp	r2, #0
   113fc:	bxeq	lr
   11400:	b	11244 <__gmon_start__@plt>
   11404:	andeq	r6, r1, r8, lsl #24
   11408:	andeq	r0, r0, r8, lsl #2
   1140c:	ldr	r0, [pc, #24]	; 1142c <__assert_fail@plt+0x8c>
   11410:	ldr	r3, [pc, #24]	; 11430 <__assert_fail@plt+0x90>
   11414:	cmp	r3, r0
   11418:	bxeq	lr
   1141c:	ldr	r3, [pc, #16]	; 11434 <__assert_fail@plt+0x94>
   11420:	cmp	r3, #0
   11424:	bxeq	lr
   11428:	bx	r3
   1142c:	andeq	r8, r2, r0, ror #2
   11430:	andeq	r8, r2, r0, ror #2
   11434:	andeq	r0, r0, r0
   11438:	ldr	r0, [pc, #36]	; 11464 <__assert_fail@plt+0xc4>
   1143c:	ldr	r1, [pc, #36]	; 11468 <__assert_fail@plt+0xc8>
   11440:	sub	r1, r1, r0
   11444:	asr	r1, r1, #2
   11448:	add	r1, r1, r1, lsr #31
   1144c:	asrs	r1, r1, #1
   11450:	bxeq	lr
   11454:	ldr	r3, [pc, #16]	; 1146c <__assert_fail@plt+0xcc>
   11458:	cmp	r3, #0
   1145c:	bxeq	lr
   11460:	bx	r3
   11464:	andeq	r8, r2, r0, ror #2
   11468:	andeq	r8, r2, r0, ror #2
   1146c:	andeq	r0, r0, r0
   11470:	push	{r4, lr}
   11474:	ldr	r4, [pc, #24]	; 11494 <__assert_fail@plt+0xf4>
   11478:	ldrb	r3, [r4]
   1147c:	cmp	r3, #0
   11480:	popne	{r4, pc}
   11484:	bl	1140c <__assert_fail@plt+0x6c>
   11488:	mov	r3, #1
   1148c:	strb	r3, [r4]
   11490:	pop	{r4, pc}
   11494:	andeq	r8, r2, ip, ror r1
   11498:	b	11438 <__assert_fail@plt+0x98>
   1149c:	push	{fp, lr}
   114a0:	mov	fp, sp
   114a4:	sub	sp, sp, #56	; 0x38
   114a8:	mov	r4, r0
   114ac:	cmp	r0, #0
   114b0:	bne	1172c <__assert_fail@plt+0x38c>
   114b4:	movw	r1, #28019	; 0x6d73
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	movt	r1, #1
   114c4:	bl	1116c <dcgettext@plt>
   114c8:	mov	r1, r0
   114cc:	movw	r0, #33160	; 0x8188
   114d0:	movt	r0, #2
   114d4:	ldr	r2, [r0]
   114d8:	mov	r0, #1
   114dc:	mov	r3, r2
   114e0:	bl	112c8 <__printf_chk@plt>
   114e4:	movw	r1, #28083	; 0x6db3
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	movt	r1, #1
   114f4:	bl	1116c <dcgettext@plt>
   114f8:	movw	r7, #33140	; 0x8174
   114fc:	movt	r7, #2
   11500:	ldr	r1, [r7]
   11504:	bl	110d0 <fputs_unlocked@plt>
   11508:	movw	r1, #28133	; 0x6de5
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	movt	r1, #1
   11518:	bl	1116c <dcgettext@plt>
   1151c:	ldr	r1, [r7]
   11520:	bl	110d0 <fputs_unlocked@plt>
   11524:	movw	r1, #28207	; 0x6e2f
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	movt	r1, #1
   11534:	bl	1116c <dcgettext@plt>
   11538:	ldr	r1, [r7]
   1153c:	bl	110d0 <fputs_unlocked@plt>
   11540:	movw	r1, #28280	; 0x6e78
   11544:	mov	r0, #0
   11548:	mov	r2, #5
   1154c:	movt	r1, #1
   11550:	bl	1116c <dcgettext@plt>
   11554:	movw	r1, #30507	; 0x772b
   11558:	mov	r5, r0
   1155c:	mov	r0, #4
   11560:	movt	r1, #1
   11564:	bl	1389c <__assert_fail@plt+0x24fc>
   11568:	mov	r2, r0
   1156c:	mov	r0, #1
   11570:	mov	r1, r5
   11574:	bl	112c8 <__printf_chk@plt>
   11578:	movw	r1, #28348	; 0x6ebc
   1157c:	mov	r0, #0
   11580:	mov	r2, #5
   11584:	movt	r1, #1
   11588:	bl	1116c <dcgettext@plt>
   1158c:	ldr	r1, [r7]
   11590:	bl	110d0 <fputs_unlocked@plt>
   11594:	movw	r1, #28393	; 0x6ee9
   11598:	mov	r0, #0
   1159c:	mov	r2, #5
   115a0:	movt	r1, #1
   115a4:	bl	1116c <dcgettext@plt>
   115a8:	ldr	r1, [r7]
   115ac:	bl	110d0 <fputs_unlocked@plt>
   115b0:	movw	r1, #28447	; 0x6f1f
   115b4:	mov	r0, #0
   115b8:	mov	r2, #5
   115bc:	movt	r1, #1
   115c0:	bl	1116c <dcgettext@plt>
   115c4:	ldr	r1, [r7]
   115c8:	bl	110d0 <fputs_unlocked@plt>
   115cc:	movw	r0, #29392	; 0x72d0
   115d0:	mov	r2, #48	; 0x30
   115d4:	mov	r6, sp
   115d8:	movw	r5, #28516	; 0x6f64
   115dc:	movt	r0, #1
   115e0:	movt	r5, #1
   115e4:	add	r1, r0, #32
   115e8:	add	r3, r0, #16
   115ec:	vld1.64	{d18-d19}, [r0], r2
   115f0:	vld1.64	{d16-d17}, [r1]
   115f4:	vld1.64	{d20-d21}, [r3]
   115f8:	add	r1, r6, #32
   115fc:	vldr	d22, [r0]
   11600:	add	r0, r6, #16
   11604:	vst1.64	{d16-d17}, [r1]
   11608:	movw	r1, #28910	; 0x70ee
   1160c:	vst1.64	{d20-d21}, [r0]
   11610:	mov	r0, r6
   11614:	vst1.64	{d18-d19}, [r0], r2
   11618:	movt	r1, #1
   1161c:	vstr	d22, [r0]
   11620:	mov	r0, r5
   11624:	bl	110f4 <strcmp@plt>
   11628:	cmp	r0, #0
   1162c:	ldrne	r1, [r6, #8]!
   11630:	cmpne	r1, #0
   11634:	bne	11620 <__assert_fail@plt+0x280>
   11638:	ldr	r6, [r6, #4]
   1163c:	movw	r1, #29005	; 0x714d
   11640:	mov	r0, #0
   11644:	mov	r2, #5
   11648:	movt	r1, #1
   1164c:	bl	1116c <dcgettext@plt>
   11650:	movw	r2, #28549	; 0x6f85
   11654:	movw	r3, #29028	; 0x7164
   11658:	mov	r1, r0
   1165c:	mov	r0, #1
   11660:	movt	r2, #1
   11664:	movt	r3, #1
   11668:	bl	112c8 <__printf_chk@plt>
   1166c:	cmp	r6, #0
   11670:	mov	r0, #5
   11674:	mov	r1, #0
   11678:	moveq	r6, r5
   1167c:	bl	11310 <setlocale@plt>
   11680:	cmp	r0, #0
   11684:	beq	116bc <__assert_fail@plt+0x31c>
   11688:	movw	r1, #29068	; 0x718c
   1168c:	mov	r2, #3
   11690:	movt	r1, #1
   11694:	bl	11370 <strncmp@plt>
   11698:	cmp	r0, #0
   1169c:	beq	116bc <__assert_fail@plt+0x31c>
   116a0:	movw	r1, #29072	; 0x7190
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	movt	r1, #1
   116b0:	bl	1116c <dcgettext@plt>
   116b4:	ldr	r1, [r7]
   116b8:	bl	110d0 <fputs_unlocked@plt>
   116bc:	movw	r1, #29143	; 0x71d7
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	movt	r1, #1
   116cc:	bl	1116c <dcgettext@plt>
   116d0:	movw	r2, #29028	; 0x7164
   116d4:	mov	r1, r0
   116d8:	mov	r0, #1
   116dc:	mov	r3, r5
   116e0:	movt	r2, #1
   116e4:	bl	112c8 <__printf_chk@plt>
   116e8:	movw	r1, #29170	; 0x71f2
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	1116c <dcgettext@plt>
   116fc:	movw	r3, #28132	; 0x6de4
   11700:	mov	r1, r0
   11704:	movw	r0, #28938	; 0x710a
   11708:	cmp	r6, r5
   1170c:	mov	r2, r6
   11710:	movt	r0, #1
   11714:	movt	r3, #1
   11718:	moveq	r3, r0
   1171c:	mov	r0, #1
   11720:	bl	112c8 <__printf_chk@plt>
   11724:	mov	r0, r4
   11728:	bl	11268 <exit@plt>
   1172c:	movw	r0, #33136	; 0x8170
   11730:	movw	r1, #27980	; 0x6d4c
   11734:	mov	r2, #5
   11738:	movt	r0, #2
   1173c:	movt	r1, #1
   11740:	ldr	r5, [r0]
   11744:	mov	r0, #0
   11748:	bl	1116c <dcgettext@plt>
   1174c:	mov	r2, r0
   11750:	movw	r0, #33160	; 0x8188
   11754:	mov	r1, #1
   11758:	movt	r0, #2
   1175c:	ldr	r3, [r0]
   11760:	mov	r0, r5
   11764:	bl	112e0 <__fprintf_chk@plt>
   11768:	mov	r0, r4
   1176c:	bl	11268 <exit@plt>
   11770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11774:	add	fp, sp, #28
   11778:	sub	sp, sp, #36	; 0x24
   1177c:	mov	r8, #0
   11780:	mov	r6, r0
   11784:	mvn	r0, #0
   11788:	mov	r4, r1
   1178c:	str	r0, [sp, #32]
   11790:	str	r0, [sp, #28]
   11794:	str	r8, [sp, #24]
   11798:	str	r8, [sp, #20]
   1179c:	ldr	r0, [r1]
   117a0:	bl	12190 <__assert_fail@plt+0xdf0>
   117a4:	movw	r1, #28132	; 0x6de4
   117a8:	mov	r0, #6
   117ac:	movt	r1, #1
   117b0:	bl	11310 <setlocale@plt>
   117b4:	movw	r5, #28553	; 0x6f89
   117b8:	movw	r1, #28523	; 0x6f6b
   117bc:	movt	r5, #1
   117c0:	movt	r1, #1
   117c4:	mov	r0, r5
   117c8:	bl	11364 <bindtextdomain@plt>
   117cc:	mov	r0, r5
   117d0:	bl	11184 <textdomain@plt>
   117d4:	movw	r0, #33052	; 0x811c
   117d8:	mov	r1, #125	; 0x7d
   117dc:	movt	r0, #2
   117e0:	str	r1, [r0]
   117e4:	movw	r0, #8320	; 0x2080
   117e8:	movt	r0, #1
   117ec:	bl	16d28 <__assert_fail@plt+0x5988>
   117f0:	movw	r5, #28547	; 0x6f83
   117f4:	movw	r7, #29296	; 0x7270
   117f8:	mov	r0, #0
   117fc:	mov	r9, #0
   11800:	mov	sl, #0
   11804:	movt	r5, #1
   11808:	movt	r7, #1
   1180c:	str	r0, [sp, #12]
   11810:	b	1182c <__assert_fail@plt+0x48c>
   11814:	movw	r0, #33144	; 0x8178
   11818:	movt	r0, #2
   1181c:	ldr	r9, [r0]
   11820:	b	1182c <__assert_fail@plt+0x48c>
   11824:	mov	r0, #1
   11828:	str	r0, [sp, #12]
   1182c:	mov	r0, r6
   11830:	mov	r1, r4
   11834:	mov	r2, r5
   11838:	mov	r3, r7
   1183c:	str	r8, [sp]
   11840:	bl	11250 <getopt_long@plt>
   11844:	cmp	r0, #255	; 0xff
   11848:	ble	1189c <__assert_fail@plt+0x4fc>
   1184c:	cmp	r0, #256	; 0x100
   11850:	beq	11814 <__assert_fail@plt+0x474>
   11854:	movw	r1, #258	; 0x102
   11858:	cmp	r0, r1
   1185c:	beq	11824 <__assert_fail@plt+0x484>
   11860:	movw	r1, #257	; 0x101
   11864:	cmp	r0, r1
   11868:	bne	11cf0 <__assert_fail@plt+0x950>
   1186c:	movw	r0, #33144	; 0x8178
   11870:	movt	r0, #2
   11874:	ldr	sl, [r0]
   11878:	mov	r0, sl
   1187c:	bl	11280 <strlen@plt>
   11880:	cmp	r0, #0
   11884:	beq	1182c <__assert_fail@plt+0x48c>
   11888:	sub	r0, r0, #1
   1188c:	ldrb	r1, [sl, r0]
   11890:	cmp	r1, #58	; 0x3a
   11894:	strbeq	r8, [sl, r0]
   11898:	b	1182c <__assert_fail@plt+0x48c>
   1189c:	cmn	r0, #1
   118a0:	bne	11c90 <__assert_fail@plt+0x8f0>
   118a4:	movw	r0, #33128	; 0x8168
   118a8:	movt	r0, #2
   118ac:	ldr	r0, [r0]
   118b0:	cmp	r0, r6
   118b4:	bge	11cf8 <__assert_fail@plt+0x958>
   118b8:	ldr	r8, [r4, r0, lsl #2]
   118bc:	mov	r0, r8
   118c0:	bl	11358 <canonicalize_file_name@plt>
   118c4:	mov	r7, r0
   118c8:	cmp	r0, #0
   118cc:	beq	118ec <__assert_fail@plt+0x54c>
   118d0:	movw	r0, #30507	; 0x772b
   118d4:	mov	r1, r7
   118d8:	movt	r0, #1
   118dc:	bl	110f4 <strcmp@plt>
   118e0:	clz	r0, r0
   118e4:	lsr	r5, r0, #5
   118e8:	b	118f0 <__assert_fail@plt+0x550>
   118ec:	mov	r5, #0
   118f0:	mov	r0, r7
   118f4:	bl	12168 <__assert_fail@plt+0xdc8>
   118f8:	cmp	r5, #0
   118fc:	bne	11910 <__assert_fail@plt+0x570>
   11900:	ldr	r0, [sp, #12]
   11904:	eor	r0, r0, #1
   11908:	tst	r0, #1
   1190c:	beq	11d24 <__assert_fail@plt+0x984>
   11910:	mov	r7, #0
   11914:	cmp	r5, #0
   11918:	bne	119dc <__assert_fail@plt+0x63c>
   1191c:	cmp	sl, #0
   11920:	beq	11940 <__assert_fail@plt+0x5a0>
   11924:	mov	r0, #0
   11928:	add	r1, sp, #32
   1192c:	add	r2, sp, #28
   11930:	mov	r3, #0
   11934:	str	r0, [sp]
   11938:	mov	r0, sl
   1193c:	bl	13efc <__assert_fail@plt+0x2b5c>
   11940:	ldr	r0, [sp, #32]
   11944:	cmn	r0, #1
   11948:	beq	119b0 <__assert_fail@plt+0x610>
   1194c:	cmp	r9, #0
   11950:	ldrne	r1, [sp, #28]
   11954:	movne	r7, #0
   11958:	cmnne	r1, #1
   1195c:	bne	119bc <__assert_fail@plt+0x61c>
   11960:	bl	11100 <getpwuid@plt>
   11964:	cmp	r0, #0
   11968:	beq	119b0 <__assert_fail@plt+0x610>
   1196c:	ldr	r1, [sp, #28]
   11970:	cmn	r1, #1
   11974:	ldreq	r1, [r0, #12]
   11978:	streq	r1, [sp, #28]
   1197c:	ldr	r7, [r0]
   11980:	cmp	r9, #0
   11984:	bne	119bc <__assert_fail@plt+0x61c>
   11988:	cmp	r7, #0
   1198c:	ldrne	r1, [sp, #28]
   11990:	cmnne	r1, #1
   11994:	beq	119dc <__assert_fail@plt+0x63c>
   11998:	add	r2, sp, #24
   1199c:	mov	r0, r7
   119a0:	bl	14f04 <__assert_fail@plt+0x3b64>
   119a4:	cmp	r0, #1
   119a8:	strge	r0, [sp, #20]
   119ac:	b	119dc <__assert_fail@plt+0x63c>
   119b0:	mov	r7, #0
   119b4:	cmp	r9, #0
   119b8:	beq	11988 <__assert_fail@plt+0x5e8>
   119bc:	ldrb	r0, [r9]
   119c0:	cmp	r0, #0
   119c4:	beq	119dc <__assert_fail@plt+0x63c>
   119c8:	add	r1, sp, #24
   119cc:	add	r2, sp, #20
   119d0:	mov	r0, r9
   119d4:	mov	r3, #0
   119d8:	bl	11e40 <__assert_fail@plt+0xaa0>
   119dc:	mov	r0, r8
   119e0:	bl	111d8 <chroot@plt>
   119e4:	cmp	r0, #0
   119e8:	bne	11d68 <__assert_fail@plt+0x9c8>
   119ec:	ldr	r0, [sp, #12]
   119f0:	tst	r0, #1
   119f4:	bne	11a0c <__assert_fail@plt+0x66c>
   119f8:	movw	r0, #30507	; 0x772b
   119fc:	movt	r0, #1
   11a00:	bl	11190 <chdir@plt>
   11a04:	cmp	r0, #0
   11a08:	bne	11de4 <__assert_fail@plt+0xa44>
   11a0c:	movw	r0, #33128	; 0x8168
   11a10:	movt	r0, #2
   11a14:	ldr	r0, [r0]
   11a18:	add	r0, r0, #1
   11a1c:	cmp	r0, r6
   11a20:	bne	11a60 <__assert_fail@plt+0x6c0>
   11a24:	movw	r0, #28716	; 0x702c
   11a28:	movt	r0, #1
   11a2c:	bl	11208 <getenv@plt>
   11a30:	movw	r3, #28722	; 0x7032
   11a34:	movw	r1, #28730	; 0x703a
   11a38:	cmp	r0, #0
   11a3c:	mov	r2, #0
   11a40:	movt	r3, #1
   11a44:	movt	r1, #1
   11a48:	movne	r3, r0
   11a4c:	str	r3, [r4]
   11a50:	stmib	r4, {r1, r2}
   11a54:	cmp	sl, #0
   11a58:	bne	11a6c <__assert_fail@plt+0x6cc>
   11a5c:	b	11ac8 <__assert_fail@plt+0x728>
   11a60:	add	r4, r4, r0, lsl #2
   11a64:	cmp	sl, #0
   11a68:	beq	11ac8 <__assert_fail@plt+0x728>
   11a6c:	mov	r0, #0
   11a70:	add	r1, sp, #32
   11a74:	add	r2, sp, #28
   11a78:	mov	r3, #0
   11a7c:	str	r0, [sp]
   11a80:	mov	r0, sl
   11a84:	bl	13efc <__assert_fail@plt+0x2b5c>
   11a88:	cmp	r0, #0
   11a8c:	beq	11ac8 <__assert_fail@plt+0x728>
   11a90:	mov	r5, r0
   11a94:	ldr	r0, [sp, #32]
   11a98:	cmn	r0, #1
   11a9c:	bne	11ad4 <__assert_fail@plt+0x734>
   11aa0:	ldr	r0, [sp, #28]
   11aa4:	cmn	r0, #1
   11aa8:	bne	11b20 <__assert_fail@plt+0x780>
   11aac:	bl	11298 <__errno_location@plt>
   11ab0:	ldr	r1, [r0]
   11ab4:	movw	r2, #29479	; 0x7327
   11ab8:	mov	r0, #125	; 0x7d
   11abc:	mov	r3, r5
   11ac0:	movt	r2, #1
   11ac4:	bl	111fc <error@plt>
   11ac8:	ldr	r0, [sp, #32]
   11acc:	cmn	r0, #1
   11ad0:	beq	11b20 <__assert_fail@plt+0x780>
   11ad4:	cmp	r9, #0
   11ad8:	ldrne	r1, [sp, #28]
   11adc:	cmnne	r1, #1
   11ae0:	bne	11b08 <__assert_fail@plt+0x768>
   11ae4:	bl	11100 <getpwuid@plt>
   11ae8:	ldr	r1, [sp, #28]
   11aec:	cmp	r0, #0
   11af0:	beq	11b18 <__assert_fail@plt+0x778>
   11af4:	cmn	r1, #1
   11af8:	ldreq	r1, [r0, #12]
   11afc:	streq	r1, [sp, #28]
   11b00:	ldr	r7, [r0]
   11b04:	b	11b20 <__assert_fail@plt+0x780>
   11b08:	ldr	r5, [sp, #24]
   11b0c:	mov	r0, #0
   11b10:	str	r0, [sp, #16]
   11b14:	b	11b34 <__assert_fail@plt+0x794>
   11b18:	cmn	r1, #1
   11b1c:	beq	11e10 <__assert_fail@plt+0xa70>
   11b20:	ldr	r5, [sp, #24]
   11b24:	mov	r0, #0
   11b28:	cmp	r9, #0
   11b2c:	str	r0, [sp, #16]
   11b30:	beq	11b7c <__assert_fail@plt+0x7dc>
   11b34:	ldrb	r0, [r9]
   11b38:	cmp	r0, #0
   11b3c:	beq	11ba0 <__assert_fail@plt+0x800>
   11b40:	ldr	r0, [sp, #20]
   11b44:	add	r1, sp, #16
   11b48:	add	r2, sp, #20
   11b4c:	clz	r0, r0
   11b50:	lsr	r3, r0, #5
   11b54:	mov	r0, r9
   11b58:	bl	11e40 <__assert_fail@plt+0xaa0>
   11b5c:	cmp	r0, #0
   11b60:	beq	11b9c <__assert_fail@plt+0x7fc>
   11b64:	ldr	r0, [sp, #20]
   11b68:	cmp	r0, #0
   11b6c:	moveq	r0, #125	; 0x7d
   11b70:	subeq	sp, fp, #28
   11b74:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b78:	b	11ba0 <__assert_fail@plt+0x800>
   11b7c:	cmp	r7, #0
   11b80:	ldrne	r1, [sp, #28]
   11b84:	cmnne	r1, #1
   11b88:	bne	11c50 <__assert_fail@plt+0x8b0>
   11b8c:	ldr	r0, [sp, #32]
   11b90:	cmn	r0, #1
   11b94:	bne	11ba0 <__assert_fail@plt+0x800>
   11b98:	b	11bb4 <__assert_fail@plt+0x814>
   11b9c:	ldr	r5, [sp, #16]
   11ba0:	ldr	r0, [sp, #20]
   11ba4:	mov	r1, r5
   11ba8:	bl	111a8 <setgroups@plt>
   11bac:	cmp	r0, #0
   11bb0:	bne	11da8 <__assert_fail@plt+0xa08>
   11bb4:	ldr	r0, [sp, #16]
   11bb8:	bl	12168 <__assert_fail@plt+0xdc8>
   11bbc:	ldr	r0, [sp, #24]
   11bc0:	bl	12168 <__assert_fail@plt+0xdc8>
   11bc4:	ldr	r0, [sp, #28]
   11bc8:	cmn	r0, #1
   11bcc:	beq	11bdc <__assert_fail@plt+0x83c>
   11bd0:	bl	11214 <setgid@plt>
   11bd4:	cmp	r0, #0
   11bd8:	bne	11dbc <__assert_fail@plt+0xa1c>
   11bdc:	ldr	r0, [sp, #32]
   11be0:	cmn	r0, #1
   11be4:	beq	11bf4 <__assert_fail@plt+0x854>
   11be8:	bl	11340 <setuid@plt>
   11bec:	cmp	r0, #0
   11bf0:	bne	11dd0 <__assert_fail@plt+0xa30>
   11bf4:	ldr	r0, [r4]
   11bf8:	mov	r1, r4
   11bfc:	bl	1113c <execvp@plt>
   11c00:	bl	11298 <__errno_location@plt>
   11c04:	ldr	r5, [r0]
   11c08:	movw	r1, #28885	; 0x70d5
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	movt	r1, #1
   11c18:	bl	1116c <dcgettext@plt>
   11c1c:	mov	r6, r0
   11c20:	ldr	r0, [r4]
   11c24:	bl	13dc4 <__assert_fail@plt+0x2a24>
   11c28:	mov	r3, r0
   11c2c:	mov	r0, #0
   11c30:	mov	r1, r5
   11c34:	mov	r2, r6
   11c38:	bl	111fc <error@plt>
   11c3c:	mov	r0, #126	; 0x7e
   11c40:	cmp	r5, #2
   11c44:	movweq	r0, #127	; 0x7f
   11c48:	sub	sp, fp, #28
   11c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c50:	add	r2, sp, #16
   11c54:	mov	r0, r7
   11c58:	bl	14f04 <__assert_fail@plt+0x3b64>
   11c5c:	cmp	r0, #0
   11c60:	ble	11c70 <__assert_fail@plt+0x8d0>
   11c64:	ldr	r5, [sp, #16]
   11c68:	str	r0, [sp, #20]
   11c6c:	b	11b8c <__assert_fail@plt+0x7ec>
   11c70:	ldr	r0, [sp, #20]
   11c74:	cmp	r0, #0
   11c78:	bne	11b8c <__assert_fail@plt+0x7ec>
   11c7c:	bl	11298 <__errno_location@plt>
   11c80:	ldr	r4, [r0]
   11c84:	movw	r1, #28772	; 0x7064
   11c88:	movt	r1, #1
   11c8c:	b	11df4 <__assert_fail@plt+0xa54>
   11c90:	cmn	r0, #3
   11c94:	bne	11ce0 <__assert_fail@plt+0x940>
   11c98:	movw	r0, #33048	; 0x8118
   11c9c:	movw	r2, #28563	; 0x6f93
   11ca0:	mov	r1, #0
   11ca4:	movt	r0, #2
   11ca8:	movt	r2, #1
   11cac:	str	r1, [sp, #4]
   11cb0:	movw	r1, #28516	; 0x6f64
   11cb4:	ldr	r3, [r0]
   11cb8:	movw	r0, #33140	; 0x8174
   11cbc:	str	r2, [sp]
   11cc0:	movw	r2, #28549	; 0x6f85
   11cc4:	movt	r1, #1
   11cc8:	movt	r0, #2
   11ccc:	movt	r2, #1
   11cd0:	ldr	r0, [r0]
   11cd4:	bl	1472c <__assert_fail@plt+0x338c>
   11cd8:	mov	r0, #0
   11cdc:	bl	11268 <exit@plt>
   11ce0:	cmn	r0, #2
   11ce4:	bne	11cf0 <__assert_fail@plt+0x950>
   11ce8:	mov	r0, #0
   11cec:	bl	1149c <__assert_fail@plt+0xfc>
   11cf0:	mov	r0, #125	; 0x7d
   11cf4:	bl	1149c <__assert_fail@plt+0xfc>
   11cf8:	movw	r1, #28578	; 0x6fa2
   11cfc:	mov	r0, #0
   11d00:	mov	r2, #5
   11d04:	movt	r1, #1
   11d08:	bl	1116c <dcgettext@plt>
   11d0c:	mov	r2, r0
   11d10:	mov	r0, #0
   11d14:	mov	r1, #0
   11d18:	bl	111fc <error@plt>
   11d1c:	mov	r0, #125	; 0x7d
   11d20:	bl	1149c <__assert_fail@plt+0xfc>
   11d24:	movw	r1, #28594	; 0x6fb2
   11d28:	mov	r0, #0
   11d2c:	mov	r2, #5
   11d30:	movt	r1, #1
   11d34:	bl	1116c <dcgettext@plt>
   11d38:	movw	r1, #30507	; 0x772b
   11d3c:	mov	r4, r0
   11d40:	mov	r0, #4
   11d44:	movt	r1, #1
   11d48:	bl	1389c <__assert_fail@plt+0x24fc>
   11d4c:	mov	r3, r0
   11d50:	mov	r0, #0
   11d54:	mov	r1, #0
   11d58:	mov	r2, r4
   11d5c:	bl	111fc <error@plt>
   11d60:	mov	r0, #125	; 0x7d
   11d64:	bl	1149c <__assert_fail@plt+0xfc>
   11d68:	bl	11298 <__errno_location@plt>
   11d6c:	ldr	r4, [r0]
   11d70:	movw	r1, #28650	; 0x6fea
   11d74:	mov	r0, #0
   11d78:	mov	r2, #5
   11d7c:	movt	r1, #1
   11d80:	bl	1116c <dcgettext@plt>
   11d84:	mov	r6, r0
   11d88:	mov	r0, #4
   11d8c:	mov	r1, r8
   11d90:	bl	1389c <__assert_fail@plt+0x24fc>
   11d94:	mov	r3, r0
   11d98:	mov	r0, #125	; 0x7d
   11d9c:	mov	r1, r4
   11da0:	mov	r2, r6
   11da4:	bl	111fc <error@plt>
   11da8:	bl	11298 <__errno_location@plt>
   11dac:	ldr	r4, [r0]
   11db0:	movw	r1, #28806	; 0x7086
   11db4:	movt	r1, #1
   11db8:	b	11df4 <__assert_fail@plt+0xa54>
   11dbc:	bl	11298 <__errno_location@plt>
   11dc0:	ldr	r4, [r0]
   11dc4:	movw	r1, #28840	; 0x70a8
   11dc8:	movt	r1, #1
   11dcc:	b	11df4 <__assert_fail@plt+0xa54>
   11dd0:	bl	11298 <__errno_location@plt>
   11dd4:	ldr	r4, [r0]
   11dd8:	movw	r1, #28863	; 0x70bf
   11ddc:	movt	r1, #1
   11de0:	b	11df4 <__assert_fail@plt+0xa54>
   11de4:	bl	11298 <__errno_location@plt>
   11de8:	ldr	r4, [r0]
   11dec:	movw	r1, #28685	; 0x700d
   11df0:	movt	r1, #1
   11df4:	mov	r0, #0
   11df8:	mov	r2, #5
   11dfc:	bl	1116c <dcgettext@plt>
   11e00:	mov	r2, r0
   11e04:	mov	r0, #125	; 0x7d
   11e08:	mov	r1, r4
   11e0c:	bl	111fc <error@plt>
   11e10:	bl	11298 <__errno_location@plt>
   11e14:	ldr	r4, [r0]
   11e18:	movw	r1, #28733	; 0x703d
   11e1c:	mov	r0, #0
   11e20:	mov	r2, #5
   11e24:	movt	r1, #1
   11e28:	bl	1116c <dcgettext@plt>
   11e2c:	ldr	r3, [sp, #32]
   11e30:	mov	r2, r0
   11e34:	mov	r0, #125	; 0x7d
   11e38:	mov	r1, r4
   11e3c:	bl	111fc <error@plt>
   11e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e44:	add	fp, sp, #28
   11e48:	sub	sp, sp, #36	; 0x24
   11e4c:	mov	r8, #0
   11e50:	str	r3, [sp, #20]
   11e54:	str	r2, [sp, #4]
   11e58:	str	r1, [sp, #12]
   11e5c:	str	r0, [sp, #8]
   11e60:	str	r8, [sp, #32]
   11e64:	bl	14e80 <__assert_fail@plt+0x3ae0>
   11e68:	movw	r1, #29254	; 0x7246
   11e6c:	str	r0, [sp, #16]
   11e70:	movt	r1, #1
   11e74:	bl	11304 <strtok@plt>
   11e78:	cmp	r0, #0
   11e7c:	beq	11fd0 <__assert_fail@plt+0xc30>
   11e80:	movw	r7, #28132	; 0x6de4
   11e84:	mov	r4, r0
   11e88:	mov	r6, #0
   11e8c:	add	r5, sp, #24
   11e90:	mov	sl, #0
   11e94:	mov	r9, #0
   11e98:	mov	r8, #0
   11e9c:	movt	r7, #1
   11ea0:	mov	r0, r4
   11ea4:	mov	r1, #0
   11ea8:	mov	r2, #10
   11eac:	mov	r3, r5
   11eb0:	str	r7, [sp]
   11eb4:	bl	1575c <__assert_fail@plt+0x43bc>
   11eb8:	cmp	r0, #0
   11ebc:	ldreq	r0, [sp, #28]
   11ec0:	cmpeq	r0, #0
   11ec4:	beq	11ee8 <__assert_fail@plt+0xb48>
   11ec8:	mov	r0, r4
   11ecc:	bl	11394 <getgrnam@plt>
   11ed0:	cmp	r0, #0
   11ed4:	beq	11f50 <__assert_fail@plt+0xbb0>
   11ed8:	ldr	r0, [r0, #8]
   11edc:	str	r6, [sp, #28]
   11ee0:	str	r0, [sp, #24]
   11ee4:	b	11f20 <__assert_fail@plt+0xb80>
   11ee8:	sub	r4, r4, #1
   11eec:	bl	1125c <__ctype_b_loc@plt>
   11ef0:	ldr	r0, [r0]
   11ef4:	ldrb	r1, [r4, #1]!
   11ef8:	add	r2, r0, r1, lsl #1
   11efc:	ldrb	r2, [r2, #1]
   11f00:	tst	r2, #32
   11f04:	bne	11ef4 <__assert_fail@plt+0xb54>
   11f08:	cmp	r1, #43	; 0x2b
   11f0c:	beq	11f20 <__assert_fail@plt+0xb80>
   11f10:	mov	r0, r4
   11f14:	bl	11394 <getgrnam@plt>
   11f18:	cmp	r0, #0
   11f1c:	bne	11ed8 <__assert_fail@plt+0xb38>
   11f20:	ldr	r0, [sp, #32]
   11f24:	cmp	r8, r0
   11f28:	bne	11f40 <__assert_fail@plt+0xba0>
   11f2c:	mov	r0, r9
   11f30:	add	r1, sp, #32
   11f34:	mov	r2, #4
   11f38:	bl	14b0c <__assert_fail@plt+0x376c>
   11f3c:	mov	r9, r0
   11f40:	ldr	r0, [sp, #24]
   11f44:	str	r0, [r9, r8, lsl #2]
   11f48:	add	r8, r8, #1
   11f4c:	b	11fb0 <__assert_fail@plt+0xc10>
   11f50:	ldr	r0, [sp, #20]
   11f54:	cmp	r0, #0
   11f58:	beq	12024 <__assert_fail@plt+0xc84>
   11f5c:	bl	11298 <__errno_location@plt>
   11f60:	mov	sl, r5
   11f64:	mov	r5, r7
   11f68:	ldr	r7, [r0]
   11f6c:	movw	r1, #29256	; 0x7248
   11f70:	mov	r0, #0
   11f74:	mov	r2, #5
   11f78:	movt	r1, #1
   11f7c:	bl	1116c <dcgettext@plt>
   11f80:	mov	r6, r0
   11f84:	mov	r0, r4
   11f88:	bl	13dc4 <__assert_fail@plt+0x2a24>
   11f8c:	mov	r3, r0
   11f90:	mov	r1, r7
   11f94:	mov	r2, r6
   11f98:	mov	r0, #0
   11f9c:	mov	r7, r5
   11fa0:	mov	r5, sl
   11fa4:	mov	r6, #0
   11fa8:	bl	111fc <error@plt>
   11fac:	mvn	sl, #0
   11fb0:	movw	r1, #29254	; 0x7246
   11fb4:	mov	r0, #0
   11fb8:	movt	r1, #1
   11fbc:	bl	11304 <strtok@plt>
   11fc0:	mov	r4, r0
   11fc4:	cmp	r0, #0
   11fc8:	bne	11ea0 <__assert_fail@plt+0xb00>
   11fcc:	b	11fd8 <__assert_fail@plt+0xc38>
   11fd0:	mov	r9, #0
   11fd4:	mov	sl, #0
   11fd8:	orrs	r0, sl, r8
   11fdc:	mvneq	sl, #0
   11fe0:	bne	12034 <__assert_fail@plt+0xc94>
   11fe4:	ldr	r0, [sp, #20]
   11fe8:	cmp	r0, #0
   11fec:	beq	12034 <__assert_fail@plt+0xc94>
   11ff0:	movw	r1, #29273	; 0x7259
   11ff4:	mov	r0, #0
   11ff8:	mov	r2, #5
   11ffc:	movt	r1, #1
   12000:	bl	1116c <dcgettext@plt>
   12004:	mov	r4, r0
   12008:	ldr	r0, [sp, #8]
   1200c:	bl	13dc4 <__assert_fail@plt+0x2a24>
   12010:	mov	r3, r0
   12014:	mov	r0, #0
   12018:	mov	r1, #0
   1201c:	mov	r2, r4
   12020:	bl	111fc <error@plt>
   12024:	ldr	r0, [sp, #12]
   12028:	mvn	sl, #0
   1202c:	str	r9, [r0]
   12030:	b	1204c <__assert_fail@plt+0xcac>
   12034:	ldr	r0, [sp, #12]
   12038:	cmp	sl, #0
   1203c:	moveq	sl, #0
   12040:	str	r9, [r0]
   12044:	ldreq	r0, [sp, #4]
   12048:	streq	r8, [r0]
   1204c:	ldr	r0, [sp, #16]
   12050:	bl	12168 <__assert_fail@plt+0xdc8>
   12054:	mov	r0, sl
   12058:	sub	sp, fp, #28
   1205c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12060:	movw	r1, #33152	; 0x8180
   12064:	movt	r1, #2
   12068:	str	r0, [r1]
   1206c:	bx	lr
   12070:	movw	r1, #33156	; 0x8184
   12074:	movt	r1, #2
   12078:	strb	r0, [r1]
   1207c:	bx	lr
   12080:	push	{r4, r5, r6, sl, fp, lr}
   12084:	add	fp, sp, #16
   12088:	sub	sp, sp, #8
   1208c:	movw	r0, #33140	; 0x8174
   12090:	movt	r0, #2
   12094:	ldr	r0, [r0]
   12098:	bl	164d4 <__assert_fail@plt+0x5134>
   1209c:	cmp	r0, #0
   120a0:	beq	120c8 <__assert_fail@plt+0xd28>
   120a4:	movw	r0, #33156	; 0x8184
   120a8:	movt	r0, #2
   120ac:	ldrb	r0, [r0]
   120b0:	cmp	r0, #0
   120b4:	beq	120e8 <__assert_fail@plt+0xd48>
   120b8:	bl	11298 <__errno_location@plt>
   120bc:	ldr	r0, [r0]
   120c0:	cmp	r0, #32
   120c4:	bne	120e8 <__assert_fail@plt+0xd48>
   120c8:	movw	r0, #33136	; 0x8170
   120cc:	movt	r0, #2
   120d0:	ldr	r0, [r0]
   120d4:	bl	164d4 <__assert_fail@plt+0x5134>
   120d8:	cmp	r0, #0
   120dc:	subeq	sp, fp, #16
   120e0:	popeq	{r4, r5, r6, sl, fp, pc}
   120e4:	b	12158 <__assert_fail@plt+0xdb8>
   120e8:	movw	r1, #29463	; 0x7317
   120ec:	mov	r0, #0
   120f0:	mov	r2, #5
   120f4:	movt	r1, #1
   120f8:	bl	1116c <dcgettext@plt>
   120fc:	mov	r4, r0
   12100:	movw	r0, #33152	; 0x8180
   12104:	movt	r0, #2
   12108:	ldr	r6, [r0]
   1210c:	bl	11298 <__errno_location@plt>
   12110:	ldr	r5, [r0]
   12114:	cmp	r6, #0
   12118:	bne	12134 <__assert_fail@plt+0xd94>
   1211c:	movw	r2, #29479	; 0x7327
   12120:	mov	r0, #0
   12124:	mov	r1, r5
   12128:	mov	r3, r4
   1212c:	movt	r2, #1
   12130:	b	12154 <__assert_fail@plt+0xdb4>
   12134:	mov	r0, r6
   12138:	bl	13a3c <__assert_fail@plt+0x269c>
   1213c:	movw	r2, #29475	; 0x7323
   12140:	mov	r3, r0
   12144:	str	r4, [sp]
   12148:	mov	r0, #0
   1214c:	mov	r1, r5
   12150:	movt	r2, #1
   12154:	bl	111fc <error@plt>
   12158:	movw	r0, #33052	; 0x811c
   1215c:	movt	r0, #2
   12160:	ldr	r0, [r0]
   12164:	bl	11124 <_exit@plt>
   12168:	push	{r4, r5, r6, sl, fp, lr}
   1216c:	add	fp, sp, #16
   12170:	mov	r4, r0
   12174:	bl	11298 <__errno_location@plt>
   12178:	ldr	r6, [r0]
   1217c:	mov	r5, r0
   12180:	mov	r0, r4
   12184:	bl	11118 <free@plt>
   12188:	str	r6, [r5]
   1218c:	pop	{r4, r5, r6, sl, fp, pc}
   12190:	push	{r4, r5, fp, lr}
   12194:	add	fp, sp, #8
   12198:	cmp	r0, #0
   1219c:	beq	12230 <__assert_fail@plt+0xe90>
   121a0:	mov	r1, #47	; 0x2f
   121a4:	mov	r4, r0
   121a8:	bl	11328 <strrchr@plt>
   121ac:	cmp	r0, #0
   121b0:	mov	r5, r4
   121b4:	addne	r5, r0, #1
   121b8:	sub	r0, r5, r4
   121bc:	cmp	r0, #7
   121c0:	blt	12214 <__assert_fail@plt+0xe74>
   121c4:	movw	r1, #29538	; 0x7362
   121c8:	sub	r0, r5, #7
   121cc:	mov	r2, #7
   121d0:	movt	r1, #1
   121d4:	bl	11370 <strncmp@plt>
   121d8:	cmp	r0, #0
   121dc:	bne	12214 <__assert_fail@plt+0xe74>
   121e0:	movw	r1, #29546	; 0x736a
   121e4:	mov	r0, r5
   121e8:	mov	r2, #3
   121ec:	movt	r1, #1
   121f0:	bl	11370 <strncmp@plt>
   121f4:	cmp	r0, #0
   121f8:	beq	12204 <__assert_fail@plt+0xe64>
   121fc:	mov	r4, r5
   12200:	b	12214 <__assert_fail@plt+0xe74>
   12204:	movw	r0, #33120	; 0x8160
   12208:	add	r4, r5, #3
   1220c:	movt	r0, #2
   12210:	str	r4, [r0]
   12214:	movw	r0, #33124	; 0x8164
   12218:	movt	r0, #2
   1221c:	str	r4, [r0]
   12220:	movw	r0, #33160	; 0x8188
   12224:	movt	r0, #2
   12228:	str	r4, [r0]
   1222c:	pop	{r4, r5, fp, pc}
   12230:	movw	r0, #33136	; 0x8170
   12234:	mov	r1, #55	; 0x37
   12238:	mov	r2, #1
   1223c:	movt	r0, #2
   12240:	ldr	r3, [r0]
   12244:	movw	r0, #29482	; 0x732a
   12248:	movt	r0, #1
   1224c:	bl	111b4 <fwrite@plt>
   12250:	bl	1137c <abort@plt>
   12254:	push	{r4, r5, r6, sl, fp, lr}
   12258:	add	fp, sp, #16
   1225c:	mov	r4, r0
   12260:	movw	r0, #33168	; 0x8190
   12264:	movt	r0, #2
   12268:	cmp	r4, #0
   1226c:	moveq	r4, r0
   12270:	bl	11298 <__errno_location@plt>
   12274:	ldr	r6, [r0]
   12278:	mov	r5, r0
   1227c:	mov	r0, r4
   12280:	mov	r1, #48	; 0x30
   12284:	bl	14dc0 <__assert_fail@plt+0x3a20>
   12288:	str	r6, [r5]
   1228c:	pop	{r4, r5, r6, sl, fp, pc}
   12290:	movw	r1, #33168	; 0x8190
   12294:	cmp	r0, #0
   12298:	movt	r1, #2
   1229c:	movne	r1, r0
   122a0:	ldr	r0, [r1]
   122a4:	bx	lr
   122a8:	movw	r2, #33168	; 0x8190
   122ac:	cmp	r0, #0
   122b0:	movt	r2, #2
   122b4:	movne	r2, r0
   122b8:	str	r1, [r2]
   122bc:	bx	lr
   122c0:	movw	r3, #33168	; 0x8190
   122c4:	cmp	r0, #0
   122c8:	movt	r3, #2
   122cc:	movne	r3, r0
   122d0:	ubfx	r0, r1, #5, #3
   122d4:	and	r1, r1, #31
   122d8:	add	r0, r3, r0, lsl #2
   122dc:	ldr	r3, [r0, #8]
   122e0:	eor	r2, r2, r3, lsr r1
   122e4:	and	r2, r2, #1
   122e8:	eor	r2, r3, r2, lsl r1
   122ec:	str	r2, [r0, #8]
   122f0:	mov	r0, #1
   122f4:	and	r0, r0, r3, lsr r1
   122f8:	bx	lr
   122fc:	movw	r2, #33168	; 0x8190
   12300:	cmp	r0, #0
   12304:	movt	r2, #2
   12308:	movne	r2, r0
   1230c:	ldr	r0, [r2, #4]
   12310:	str	r1, [r2, #4]
   12314:	bx	lr
   12318:	movw	r3, #33168	; 0x8190
   1231c:	cmp	r0, #0
   12320:	movt	r3, #2
   12324:	movne	r3, r0
   12328:	cmp	r1, #0
   1232c:	mov	r0, #10
   12330:	cmpne	r2, #0
   12334:	str	r0, [r3]
   12338:	bne	12348 <__assert_fail@plt+0xfa8>
   1233c:	push	{fp, lr}
   12340:	mov	fp, sp
   12344:	bl	1137c <abort@plt>
   12348:	str	r1, [r3, #40]	; 0x28
   1234c:	str	r2, [r3, #44]	; 0x2c
   12350:	bx	lr
   12354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12358:	add	fp, sp, #28
   1235c:	sub	sp, sp, #20
   12360:	mov	r7, r0
   12364:	ldr	r0, [fp, #8]
   12368:	movw	r5, #33168	; 0x8190
   1236c:	mov	r8, r3
   12370:	mov	r9, r2
   12374:	mov	sl, r1
   12378:	movt	r5, #2
   1237c:	cmp	r0, #0
   12380:	movne	r5, r0
   12384:	bl	11298 <__errno_location@plt>
   12388:	mov	r4, r0
   1238c:	ldm	r5, {r0, r1}
   12390:	ldr	r2, [r5, #40]	; 0x28
   12394:	ldr	r3, [r5, #44]	; 0x2c
   12398:	add	r5, r5, #8
   1239c:	ldr	r6, [r4]
   123a0:	stm	sp, {r0, r1, r5}
   123a4:	str	r2, [sp, #12]
   123a8:	str	r3, [sp, #16]
   123ac:	mov	r0, r7
   123b0:	mov	r1, sl
   123b4:	mov	r2, r9
   123b8:	mov	r3, r8
   123bc:	bl	123cc <__assert_fail@plt+0x102c>
   123c0:	str	r6, [r4]
   123c4:	sub	sp, fp, #28
   123c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d0:	add	fp, sp, #28
   123d4:	sub	sp, sp, #156	; 0x9c
   123d8:	str	r0, [sp, #80]	; 0x50
   123dc:	ldr	r0, [fp, #12]
   123e0:	mov	r6, r1
   123e4:	mov	r9, r3
   123e8:	str	r2, [fp, #-84]	; 0xffffffac
   123ec:	and	r1, r0, #4
   123f0:	str	r1, [sp, #32]
   123f4:	and	r1, r0, #1
   123f8:	str	r1, [sp, #36]	; 0x24
   123fc:	ubfx	r4, r0, #1, #1
   12400:	bl	111cc <__ctype_get_mb_cur_max@plt>
   12404:	str	r0, [sp, #40]	; 0x28
   12408:	ldr	r0, [fp, #24]
   1240c:	ldr	r7, [fp, #8]
   12410:	mov	r1, #0
   12414:	mov	r5, #1
   12418:	str	r1, [fp, #-56]	; 0xffffffc8
   1241c:	mov	r1, #0
   12420:	str	r1, [sp, #60]	; 0x3c
   12424:	str	r0, [sp, #76]	; 0x4c
   12428:	ldr	r0, [fp, #20]
   1242c:	str	r0, [sp, #72]	; 0x48
   12430:	mov	r0, #0
   12434:	str	r0, [sp, #56]	; 0x38
   12438:	mov	r0, #0
   1243c:	str	r0, [sp, #92]	; 0x5c
   12440:	mov	r0, #0
   12444:	str	r0, [fp, #-76]	; 0xffffffb4
   12448:	mov	r0, #0
   1244c:	cmp	r7, #10
   12450:	bhi	133d0 <__assert_fail@plt+0x2030>
   12454:	add	r1, pc, #28
   12458:	mov	sl, r6
   1245c:	ldr	r6, [sp, #80]	; 0x50
   12460:	ldr	ip, [fp, #-84]	; 0xffffffac
   12464:	mov	r8, #0
   12468:	mov	r2, #1
   1246c:	mov	r3, #0
   12470:	mov	lr, r9
   12474:	ldr	pc, [r1, r7, lsl #2]
   12478:	andeq	r2, r1, ip, asr r5
   1247c:	andeq	r2, r1, r8, lsl #11
   12480:	andeq	r2, r1, ip, asr #10
   12484:	andeq	r2, r1, r4, asr #10
   12488:	andeq	r2, r1, ip, ror r5
   1248c:	ldrdeq	r2, [r1], -r0
   12490:	andeq	r2, r1, ip, ror #10
   12494:	andeq	r2, r1, ip, lsr #12
   12498:	andeq	r2, r1, r4, lsr #9
   1249c:	andeq	r2, r1, r4, lsr #9
   124a0:	andeq	r2, r1, ip, asr #9
   124a4:	movw	r0, #29628	; 0x73bc
   124a8:	mov	r1, r7
   124ac:	movt	r0, #1
   124b0:	bl	13ddc <__assert_fail@plt+0x2a3c>
   124b4:	str	r0, [sp, #72]	; 0x48
   124b8:	movw	r0, #29630	; 0x73be
   124bc:	mov	r1, r7
   124c0:	movt	r0, #1
   124c4:	bl	13ddc <__assert_fail@plt+0x2a3c>
   124c8:	str	r0, [sp, #76]	; 0x4c
   124cc:	str	r5, [fp, #-48]	; 0xffffffd0
   124d0:	mov	r8, #0
   124d4:	mov	r5, r7
   124d8:	tst	r4, #1
   124dc:	bne	12514 <__assert_fail@plt+0x1174>
   124e0:	ldr	r0, [sp, #72]	; 0x48
   124e4:	ldrb	r0, [r0]
   124e8:	cmp	r0, #0
   124ec:	beq	12514 <__assert_fail@plt+0x1174>
   124f0:	ldr	r1, [sp, #72]	; 0x48
   124f4:	mov	r8, #0
   124f8:	add	r1, r1, #1
   124fc:	cmp	r8, sl
   12500:	strbcc	r0, [r6, r8]
   12504:	ldrb	r0, [r1, r8]
   12508:	add	r8, r8, #1
   1250c:	cmp	r0, #0
   12510:	bne	124fc <__assert_fail@plt+0x115c>
   12514:	ldr	r7, [sp, #76]	; 0x4c
   12518:	mov	r0, r7
   1251c:	bl	11280 <strlen@plt>
   12520:	str	r7, [sp, #92]	; 0x5c
   12524:	mov	r7, r5
   12528:	ldr	ip, [fp, #-84]	; 0xffffffac
   1252c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12530:	str	r0, [fp, #-76]	; 0xffffffb4
   12534:	mov	r2, #1
   12538:	mov	r3, r4
   1253c:	mov	lr, r9
   12540:	b	1262c <__assert_fail@plt+0x128c>
   12544:	mov	r0, #1
   12548:	b	12588 <__assert_fail@plt+0x11e8>
   1254c:	tst	r4, #1
   12550:	bne	12588 <__assert_fail@plt+0x11e8>
   12554:	mov	r2, r0
   12558:	b	125b0 <__assert_fail@plt+0x1210>
   1255c:	mov	r7, #0
   12560:	mov	r8, #0
   12564:	mov	r2, r0
   12568:	b	12628 <__assert_fail@plt+0x1288>
   1256c:	mov	r0, #1
   12570:	mov	r8, #0
   12574:	mov	r7, #5
   12578:	b	125e4 <__assert_fail@plt+0x1244>
   1257c:	mov	r2, #1
   12580:	tst	r4, #1
   12584:	beq	125b0 <__assert_fail@plt+0x1210>
   12588:	mov	r1, #1
   1258c:	mov	r8, #0
   12590:	mov	r7, #2
   12594:	mov	r2, r0
   12598:	mov	r3, #1
   1259c:	str	r1, [fp, #-76]	; 0xffffffb4
   125a0:	movw	r1, #29630	; 0x73be
   125a4:	movt	r1, #1
   125a8:	str	r1, [sp, #92]	; 0x5c
   125ac:	b	1262c <__assert_fail@plt+0x128c>
   125b0:	cmp	sl, #0
   125b4:	mov	r8, #1
   125b8:	mov	r7, #2
   125bc:	movne	r0, #39	; 0x27
   125c0:	strbne	r0, [r6]
   125c4:	movw	r0, #29630	; 0x73be
   125c8:	movt	r0, #1
   125cc:	b	1261c <__assert_fail@plt+0x127c>
   125d0:	mov	r7, #5
   125d4:	tst	r4, #1
   125d8:	beq	12600 <__assert_fail@plt+0x1260>
   125dc:	mov	r0, #1
   125e0:	mov	r8, #0
   125e4:	str	r0, [fp, #-76]	; 0xffffffb4
   125e8:	movw	r0, #29626	; 0x73ba
   125ec:	mov	r2, #1
   125f0:	mov	r3, #1
   125f4:	movt	r0, #1
   125f8:	str	r0, [sp, #92]	; 0x5c
   125fc:	b	1262c <__assert_fail@plt+0x128c>
   12600:	cmp	sl, #0
   12604:	mov	r8, #1
   12608:	mov	r2, #1
   1260c:	movne	r0, #34	; 0x22
   12610:	strbne	r0, [r6]
   12614:	movw	r0, #29626	; 0x73ba
   12618:	movt	r0, #1
   1261c:	str	r0, [sp, #92]	; 0x5c
   12620:	mov	r0, #1
   12624:	str	r0, [fp, #-76]	; 0xffffffb4
   12628:	mov	r3, #0
   1262c:	ldr	r0, [fp, #16]
   12630:	str	r3, [fp, #-72]	; 0xffffffb8
   12634:	str	r7, [fp, #-64]	; 0xffffffc0
   12638:	str	r2, [sp, #84]	; 0x54
   1263c:	cmp	r0, #0
   12640:	movwne	r0, #1
   12644:	and	r0, r0, r3
   12648:	str	r0, [fp, #-88]	; 0xffffffa8
   1264c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12650:	cmp	r0, #0
   12654:	movwne	r0, #1
   12658:	subs	r4, r7, #2
   1265c:	mov	r7, #0
   12660:	and	r1, r0, r3
   12664:	str	r4, [fp, #-80]	; 0xffffffb0
   12668:	and	r1, r2, r1
   1266c:	str	r1, [sp, #48]	; 0x30
   12670:	clz	r1, r4
   12674:	lsr	r1, r1, #5
   12678:	and	r1, r1, r3
   1267c:	eor	r3, r3, #1
   12680:	str	r1, [sp, #64]	; 0x40
   12684:	mov	r1, r4
   12688:	str	r3, [sp, #88]	; 0x58
   1268c:	movwne	r1, #1
   12690:	orr	r3, r1, r3
   12694:	and	r1, r1, r2
   12698:	and	r0, r0, r1
   1269c:	str	r3, [sp, #68]	; 0x44
   126a0:	str	r1, [fp, #-68]	; 0xffffffbc
   126a4:	str	r0, [fp, #-60]	; 0xffffffc4
   126a8:	eor	r0, r2, #1
   126ac:	str	r0, [sp, #52]	; 0x34
   126b0:	cmn	lr, #1
   126b4:	beq	126c4 <__assert_fail@plt+0x1324>
   126b8:	cmp	r7, lr
   126bc:	bne	126d0 <__assert_fail@plt+0x1330>
   126c0:	b	131f8 <__assert_fail@plt+0x1e58>
   126c4:	ldrb	r0, [ip, r7]
   126c8:	cmp	r0, #0
   126cc:	beq	13200 <__assert_fail@plt+0x1e60>
   126d0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   126d4:	mov	r9, #0
   126d8:	str	r5, [fp, #-48]	; 0xffffffd0
   126dc:	cmp	r0, #0
   126e0:	beq	12714 <__assert_fail@plt+0x1374>
   126e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   126e8:	add	r4, r7, r0
   126ec:	cmp	r0, #2
   126f0:	bcc	1270c <__assert_fail@plt+0x136c>
   126f4:	cmn	lr, #1
   126f8:	bne	1270c <__assert_fail@plt+0x136c>
   126fc:	mov	r0, ip
   12700:	bl	11280 <strlen@plt>
   12704:	ldr	ip, [fp, #-84]	; 0xffffffac
   12708:	mov	lr, r0
   1270c:	cmp	r4, lr
   12710:	bls	1271c <__assert_fail@plt+0x137c>
   12714:	mov	r0, #0
   12718:	b	1275c <__assert_fail@plt+0x13bc>
   1271c:	ldr	r1, [sp, #92]	; 0x5c
   12720:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12724:	add	r0, ip, r7
   12728:	mov	r4, lr
   1272c:	bl	11160 <memcmp@plt>
   12730:	ldr	r2, [sp, #88]	; 0x58
   12734:	cmp	r0, #0
   12738:	mov	r1, r0
   1273c:	movwne	r1, #1
   12740:	orr	r1, r1, r2
   12744:	tst	r1, #1
   12748:	beq	13290 <__assert_fail@plt+0x1ef0>
   1274c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12750:	clz	r0, r0
   12754:	mov	lr, r4
   12758:	lsr	r0, r0, #5
   1275c:	str	r0, [fp, #-52]	; 0xffffffcc
   12760:	ldrb	r5, [ip, r7]
   12764:	cmp	r5, #126	; 0x7e
   12768:	bhi	12b20 <__assert_fail@plt+0x1780>
   1276c:	add	r3, pc, #16
   12770:	mov	r4, #1
   12774:	mov	r2, #110	; 0x6e
   12778:	mov	r0, #97	; 0x61
   1277c:	mov	r1, #0
   12780:	ldr	pc, [r3, r5, lsl #2]
   12784:	andeq	r2, r1, ip, lsl sl
   12788:	andeq	r2, r1, r0, lsr #22
   1278c:	andeq	r2, r1, r0, lsr #22
   12790:	andeq	r2, r1, r0, lsr #22
   12794:	andeq	r2, r1, r0, lsr #22
   12798:	andeq	r2, r1, r0, lsr #22
   1279c:	andeq	r2, r1, r0, lsr #22
   127a0:	ldrdeq	r2, [r1], -r4
   127a4:	strdeq	r2, [r1], -ip
   127a8:	strdeq	r2, [r1], -r4
   127ac:	andeq	r2, r1, r8, lsl #20
   127b0:	andeq	r2, r1, r8, lsl #21
   127b4:	andeq	r2, r1, ip, ror #19
   127b8:	andeq	r2, r1, r4, lsl #20
   127bc:	andeq	r2, r1, r0, lsr #22
   127c0:	andeq	r2, r1, r0, lsr #22
   127c4:	andeq	r2, r1, r0, lsr #22
   127c8:	andeq	r2, r1, r0, lsr #22
   127cc:	andeq	r2, r1, r0, lsr #22
   127d0:	andeq	r2, r1, r0, lsr #22
   127d4:	andeq	r2, r1, r0, lsr #22
   127d8:	andeq	r2, r1, r0, lsr #22
   127dc:	andeq	r2, r1, r0, lsr #22
   127e0:	andeq	r2, r1, r0, lsr #22
   127e4:	andeq	r2, r1, r0, lsr #22
   127e8:	andeq	r2, r1, r0, lsr #22
   127ec:	andeq	r2, r1, r0, lsr #22
   127f0:	andeq	r2, r1, r0, lsr #22
   127f4:	andeq	r2, r1, r0, lsr #22
   127f8:	andeq	r2, r1, r0, lsr #22
   127fc:	andeq	r2, r1, r0, lsr #22
   12800:	andeq	r2, r1, r0, lsr #22
   12804:	andeq	r2, r1, ip, lsl #23
   12808:	muleq	r1, r0, fp
   1280c:	muleq	r1, r0, fp
   12810:	muleq	r1, r4, r9
   12814:	muleq	r1, r0, fp
   12818:	andeq	r2, r1, r0, lsl #19
   1281c:	muleq	r1, r0, fp
   12820:	muleq	r1, r0, sl
   12824:	muleq	r1, r0, fp
   12828:	muleq	r1, r0, fp
   1282c:	muleq	r1, r0, fp
   12830:	andeq	r2, r1, r0, lsl #19
   12834:	andeq	r2, r1, r0, lsl #19
   12838:	andeq	r2, r1, r0, lsl #19
   1283c:	andeq	r2, r1, r0, lsl #19
   12840:	andeq	r2, r1, r0, lsl #19
   12844:	andeq	r2, r1, r0, lsl #19
   12848:	andeq	r2, r1, r0, lsl #19
   1284c:	andeq	r2, r1, r0, lsl #19
   12850:	andeq	r2, r1, r0, lsl #19
   12854:	andeq	r2, r1, r0, lsl #19
   12858:	andeq	r2, r1, r0, lsl #19
   1285c:	andeq	r2, r1, r0, lsl #19
   12860:	andeq	r2, r1, r0, lsl #19
   12864:	andeq	r2, r1, r0, lsl #19
   12868:	andeq	r2, r1, r0, lsl #19
   1286c:	andeq	r2, r1, r0, lsl #19
   12870:	muleq	r1, r0, fp
   12874:	muleq	r1, r0, fp
   12878:	muleq	r1, r0, fp
   1287c:	muleq	r1, r0, fp
   12880:	andeq	r2, r1, ip, asr sl
   12884:	andeq	r2, r1, r0, lsr #22
   12888:	andeq	r2, r1, r0, lsl #19
   1288c:	andeq	r2, r1, r0, lsl #19
   12890:	andeq	r2, r1, r0, lsl #19
   12894:	andeq	r2, r1, r0, lsl #19
   12898:	andeq	r2, r1, r0, lsl #19
   1289c:	andeq	r2, r1, r0, lsl #19
   128a0:	andeq	r2, r1, r0, lsl #19
   128a4:	andeq	r2, r1, r0, lsl #19
   128a8:	andeq	r2, r1, r0, lsl #19
   128ac:	andeq	r2, r1, r0, lsl #19
   128b0:	andeq	r2, r1, r0, lsl #19
   128b4:	andeq	r2, r1, r0, lsl #19
   128b8:	andeq	r2, r1, r0, lsl #19
   128bc:	andeq	r2, r1, r0, lsl #19
   128c0:	andeq	r2, r1, r0, lsl #19
   128c4:	andeq	r2, r1, r0, lsl #19
   128c8:	andeq	r2, r1, r0, lsl #19
   128cc:	andeq	r2, r1, r0, lsl #19
   128d0:	andeq	r2, r1, r0, lsl #19
   128d4:	andeq	r2, r1, r0, lsl #19
   128d8:	andeq	r2, r1, r0, lsl #19
   128dc:	andeq	r2, r1, r0, lsl #19
   128e0:	andeq	r2, r1, r0, lsl #19
   128e4:	andeq	r2, r1, r0, lsl #19
   128e8:	andeq	r2, r1, r0, lsl #19
   128ec:	andeq	r2, r1, r0, lsl #19
   128f0:	muleq	r1, r0, fp
   128f4:	andeq	r2, r1, r8, asr #19
   128f8:	andeq	r2, r1, r0, lsl #19
   128fc:	muleq	r1, r0, fp
   12900:	andeq	r2, r1, r0, lsl #19
   12904:	muleq	r1, r0, fp
   12908:	andeq	r2, r1, r0, lsl #19
   1290c:	andeq	r2, r1, r0, lsl #19
   12910:	andeq	r2, r1, r0, lsl #19
   12914:	andeq	r2, r1, r0, lsl #19
   12918:	andeq	r2, r1, r0, lsl #19
   1291c:	andeq	r2, r1, r0, lsl #19
   12920:	andeq	r2, r1, r0, lsl #19
   12924:	andeq	r2, r1, r0, lsl #19
   12928:	andeq	r2, r1, r0, lsl #19
   1292c:	andeq	r2, r1, r0, lsl #19
   12930:	andeq	r2, r1, r0, lsl #19
   12934:	andeq	r2, r1, r0, lsl #19
   12938:	andeq	r2, r1, r0, lsl #19
   1293c:	andeq	r2, r1, r0, lsl #19
   12940:	andeq	r2, r1, r0, lsl #19
   12944:	andeq	r2, r1, r0, lsl #19
   12948:	andeq	r2, r1, r0, lsl #19
   1294c:	andeq	r2, r1, r0, lsl #19
   12950:	andeq	r2, r1, r0, lsl #19
   12954:	andeq	r2, r1, r0, lsl #19
   12958:	andeq	r2, r1, r0, lsl #19
   1295c:	andeq	r2, r1, r0, lsl #19
   12960:	andeq	r2, r1, r0, lsl #19
   12964:	andeq	r2, r1, r0, lsl #19
   12968:	andeq	r2, r1, r0, lsl #19
   1296c:	andeq	r2, r1, r0, lsl #19
   12970:	andeq	r2, r1, r8, lsr #19
   12974:	muleq	r1, r0, fp
   12978:	andeq	r2, r1, r8, lsr #19
   1297c:	muleq	r1, r4, r9
   12980:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12984:	cmp	r0, #0
   12988:	beq	12be8 <__assert_fail@plt+0x1848>
   1298c:	ldr	r0, [fp, #16]
   12990:	b	12bec <__assert_fail@plt+0x184c>
   12994:	mov	r4, #0
   12998:	cmp	r7, #0
   1299c:	beq	12b8c <__assert_fail@plt+0x17ec>
   129a0:	mov	r9, #0
   129a4:	b	12980 <__assert_fail@plt+0x15e0>
   129a8:	mov	r4, #0
   129ac:	cmn	lr, #1
   129b0:	beq	12b70 <__assert_fail@plt+0x17d0>
   129b4:	cmp	r7, #0
   129b8:	bne	129a0 <__assert_fail@plt+0x1600>
   129bc:	cmp	lr, #1
   129c0:	beq	12b8c <__assert_fail@plt+0x17ec>
   129c4:	b	129a0 <__assert_fail@plt+0x1600>
   129c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129cc:	cmp	r0, #2
   129d0:	bne	12bb0 <__assert_fail@plt+0x1810>
   129d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129d8:	tst	r0, #1
   129dc:	bne	132ac <__assert_fail@plt+0x1f0c>
   129e0:	mov	r9, #0
   129e4:	mov	r0, #92	; 0x5c
   129e8:	b	12bc4 <__assert_fail@plt+0x1824>
   129ec:	mov	r0, #102	; 0x66
   129f0:	b	12bd4 <__assert_fail@plt+0x1834>
   129f4:	mov	r2, #116	; 0x74
   129f8:	b	12a08 <__assert_fail@plt+0x1668>
   129fc:	mov	r0, #98	; 0x62
   12a00:	b	12bd4 <__assert_fail@plt+0x1834>
   12a04:	mov	r2, #114	; 0x72
   12a08:	ldr	r0, [sp, #68]	; 0x44
   12a0c:	tst	r0, #1
   12a10:	mov	r0, r2
   12a14:	bne	12bd4 <__assert_fail@plt+0x1834>
   12a18:	b	132ac <__assert_fail@plt+0x1f0c>
   12a1c:	ldr	r0, [sp, #84]	; 0x54
   12a20:	tst	r0, #1
   12a24:	beq	12cc4 <__assert_fail@plt+0x1924>
   12a28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a2c:	tst	r0, #1
   12a30:	bne	133bc <__assert_fail@plt+0x201c>
   12a34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a38:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12a3c:	cmp	r0, #2
   12a40:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12a44:	movwne	r0, #1
   12a48:	orr	r0, r0, r2
   12a4c:	tst	r0, #1
   12a50:	beq	13094 <__assert_fail@plt+0x1cf4>
   12a54:	mov	r0, r8
   12a58:	b	130c8 <__assert_fail@plt+0x1d28>
   12a5c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a60:	mov	r9, #0
   12a64:	mov	r5, #63	; 0x3f
   12a68:	cmp	r0, #5
   12a6c:	beq	12e78 <__assert_fail@plt+0x1ad8>
   12a70:	cmp	r0, #2
   12a74:	bne	12f1c <__assert_fail@plt+0x1b7c>
   12a78:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a7c:	tst	r0, #1
   12a80:	beq	12f20 <__assert_fail@plt+0x1b80>
   12a84:	b	132ac <__assert_fail@plt+0x1f0c>
   12a88:	mov	r0, #118	; 0x76
   12a8c:	b	12bd4 <__assert_fail@plt+0x1834>
   12a90:	mov	r0, #1
   12a94:	mov	r5, #39	; 0x27
   12a98:	str	r0, [sp, #60]	; 0x3c
   12a9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12aa0:	cmp	r0, #2
   12aa4:	bne	12b18 <__assert_fail@plt+0x1778>
   12aa8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12aac:	tst	r0, #1
   12ab0:	bne	132ac <__assert_fail@plt+0x1f0c>
   12ab4:	ldr	r2, [sp, #56]	; 0x38
   12ab8:	clz	r1, sl
   12abc:	mov	r9, #0
   12ac0:	lsr	r1, r1, #5
   12ac4:	cmp	r2, #0
   12ac8:	mov	r0, r2
   12acc:	movwne	r0, #1
   12ad0:	orrs	r0, r0, r1
   12ad4:	moveq	r2, sl
   12ad8:	moveq	sl, r0
   12adc:	cmp	r8, sl
   12ae0:	str	r2, [sp, #56]	; 0x38
   12ae4:	movcc	r0, #39	; 0x27
   12ae8:	strbcc	r0, [r6, r8]
   12aec:	add	r0, r8, #1
   12af0:	cmp	r0, sl
   12af4:	movcc	r1, #92	; 0x5c
   12af8:	strbcc	r1, [r6, r0]
   12afc:	add	r0, r8, #2
   12b00:	add	r8, r8, #3
   12b04:	cmp	r0, sl
   12b08:	movcc	r1, #39	; 0x27
   12b0c:	strbcc	r1, [r6, r0]
   12b10:	mov	r0, #0
   12b14:	str	r0, [fp, #-56]	; 0xffffffc8
   12b18:	mov	r4, #1
   12b1c:	b	12980 <__assert_fail@plt+0x15e0>
   12b20:	ldr	r0, [sp, #40]	; 0x28
   12b24:	cmp	r0, #1
   12b28:	bne	12cf0 <__assert_fail@plt+0x1950>
   12b2c:	str	lr, [sp, #28]
   12b30:	bl	1125c <__ctype_b_loc@plt>
   12b34:	ldr	r0, [r0]
   12b38:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b3c:	mov	r1, #1
   12b40:	add	r0, r0, r5, lsl #1
   12b44:	ldrb	r0, [r0, #1]
   12b48:	ubfx	r4, r0, #6, #1
   12b4c:	ldr	r0, [sp, #52]	; 0x34
   12b50:	mov	r2, r1
   12b54:	cmp	r1, #1
   12b58:	orr	r0, r4, r0
   12b5c:	bhi	12f28 <__assert_fail@plt+0x1b88>
   12b60:	tst	r0, #1
   12b64:	beq	12f28 <__assert_fail@plt+0x1b88>
   12b68:	ldr	lr, [sp, #28]
   12b6c:	b	12980 <__assert_fail@plt+0x15e0>
   12b70:	cmp	r7, #0
   12b74:	ldrbeq	r0, [ip, #1]
   12b78:	cmpeq	r0, #0
   12b7c:	beq	12b8c <__assert_fail@plt+0x17ec>
   12b80:	mvn	lr, #0
   12b84:	mov	r9, #0
   12b88:	b	12980 <__assert_fail@plt+0x15e0>
   12b8c:	mov	r1, #1
   12b90:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12b94:	cmp	r0, #2
   12b98:	bne	12ba8 <__assert_fail@plt+0x1808>
   12b9c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ba0:	tst	r0, #1
   12ba4:	bne	132ac <__assert_fail@plt+0x1f0c>
   12ba8:	mov	r4, r1
   12bac:	b	12980 <__assert_fail@plt+0x15e0>
   12bb0:	ldr	r1, [sp, #48]	; 0x30
   12bb4:	mov	r9, #0
   12bb8:	mov	r0, #92	; 0x5c
   12bbc:	cmp	r1, #0
   12bc0:	beq	12bd4 <__assert_fail@plt+0x1834>
   12bc4:	mov	r4, #0
   12bc8:	cmp	r9, #0
   12bcc:	beq	13160 <__assert_fail@plt+0x1dc0>
   12bd0:	b	1319c <__assert_fail@plt+0x1dfc>
   12bd4:	ldr	r1, [sp, #84]	; 0x54
   12bd8:	mov	r4, #0
   12bdc:	mov	r9, #0
   12be0:	tst	r1, #1
   12be4:	bne	12c24 <__assert_fail@plt+0x1884>
   12be8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12bec:	cmp	r0, #0
   12bf0:	mov	r0, r5
   12bf4:	beq	12c18 <__assert_fail@plt+0x1878>
   12bf8:	ldr	r1, [fp, #16]
   12bfc:	ubfx	r0, r5, #5, #3
   12c00:	mov	r2, #1
   12c04:	ldr	r0, [r1, r0, lsl #2]
   12c08:	and	r1, r5, #31
   12c0c:	tst	r0, r2, lsl r1
   12c10:	mov	r0, r5
   12c14:	bne	12c24 <__assert_fail@plt+0x1884>
   12c18:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12c1c:	cmp	r1, #0
   12c20:	beq	13158 <__assert_fail@plt+0x1db8>
   12c24:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12c28:	tst	r1, #1
   12c2c:	bne	13284 <__assert_fail@plt+0x1ee4>
   12c30:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12c34:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c38:	cmp	r1, #2
   12c3c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12c40:	movwne	r1, #1
   12c44:	orr	r1, r1, r2
   12c48:	tst	r1, #1
   12c4c:	beq	12c58 <__assert_fail@plt+0x18b8>
   12c50:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c54:	b	12c94 <__assert_fail@plt+0x18f4>
   12c58:	cmp	r8, sl
   12c5c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c60:	movcc	r1, #39	; 0x27
   12c64:	strbcc	r1, [r6, r8]
   12c68:	add	r1, r8, #1
   12c6c:	cmp	r1, sl
   12c70:	movcc	r2, #36	; 0x24
   12c74:	strbcc	r2, [r6, r1]
   12c78:	add	r1, r8, #2
   12c7c:	add	r8, r8, #3
   12c80:	cmp	r1, sl
   12c84:	movcc	r2, #39	; 0x27
   12c88:	strbcc	r2, [r6, r1]
   12c8c:	mov	r1, #1
   12c90:	str	r1, [fp, #-56]	; 0xffffffc8
   12c94:	cmp	r8, sl
   12c98:	movcc	r1, #92	; 0x5c
   12c9c:	strbcc	r1, [r6, r8]
   12ca0:	add	r8, r8, #1
   12ca4:	cmp	r8, sl
   12ca8:	and	r5, r5, r4
   12cac:	add	r7, r7, #1
   12cb0:	strbcc	r0, [r6, r8]
   12cb4:	add	r8, r8, #1
   12cb8:	cmn	lr, #1
   12cbc:	bne	126b8 <__assert_fail@plt+0x1318>
   12cc0:	b	126c4 <__assert_fail@plt+0x1324>
   12cc4:	ldr	r0, [sp, #36]	; 0x24
   12cc8:	mov	r4, #0
   12ccc:	mov	r9, #0
   12cd0:	mov	r5, #0
   12cd4:	cmp	r0, #0
   12cd8:	beq	12be8 <__assert_fail@plt+0x1848>
   12cdc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ce0:	add	r7, r7, #1
   12ce4:	cmn	lr, #1
   12ce8:	bne	126b8 <__assert_fail@plt+0x1318>
   12cec:	b	126c4 <__assert_fail@plt+0x1324>
   12cf0:	mov	r0, #0
   12cf4:	cmn	lr, #1
   12cf8:	str	r0, [fp, #-36]	; 0xffffffdc
   12cfc:	str	r0, [fp, #-40]	; 0xffffffd8
   12d00:	bne	12d14 <__assert_fail@plt+0x1974>
   12d04:	mov	r0, ip
   12d08:	bl	11280 <strlen@plt>
   12d0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d10:	mov	lr, r0
   12d14:	add	r0, ip, r7
   12d18:	mov	r4, #1
   12d1c:	mov	r6, #0
   12d20:	str	lr, [sp, #28]
   12d24:	str	r0, [sp, #24]
   12d28:	sub	r0, fp, #40	; 0x28
   12d2c:	mov	r3, r0
   12d30:	str	r6, [sp, #44]	; 0x2c
   12d34:	add	r6, r6, r7
   12d38:	sub	r0, fp, #44	; 0x2c
   12d3c:	add	r1, ip, r6
   12d40:	sub	r2, lr, r6
   12d44:	bl	16788 <__assert_fail@plt+0x53e8>
   12d48:	cmp	r0, #0
   12d4c:	beq	131e4 <__assert_fail@plt+0x1e44>
   12d50:	cmn	r0, #1
   12d54:	beq	131a4 <__assert_fail@plt+0x1e04>
   12d58:	ldr	lr, [sp, #28]
   12d5c:	cmn	r0, #2
   12d60:	beq	131ac <__assert_fail@plt+0x1e0c>
   12d64:	ldr	r2, [sp, #64]	; 0x40
   12d68:	cmp	r0, #2
   12d6c:	mov	r1, #0
   12d70:	movwcc	r1, #1
   12d74:	eor	r2, r2, #1
   12d78:	orrs	r1, r2, r1
   12d7c:	bne	12e3c <__assert_fail@plt+0x1a9c>
   12d80:	ldr	r1, [sp, #44]	; 0x2c
   12d84:	ldr	r2, [sp, #24]
   12d88:	add	r1, r2, r1
   12d8c:	mov	r2, #1
   12d90:	ldrb	r3, [r1, r2]
   12d94:	sub	r3, r3, #91	; 0x5b
   12d98:	cmp	r3, #33	; 0x21
   12d9c:	bhi	12e30 <__assert_fail@plt+0x1a90>
   12da0:	add	r6, pc, #0
   12da4:	ldr	pc, [r6, r3, lsl #2]
   12da8:	andeq	r3, r1, r4, lsr #5
   12dac:	andeq	r3, r1, r4, lsr #5
   12db0:	andeq	r2, r1, r0, lsr lr
   12db4:	andeq	r3, r1, r4, lsr #5
   12db8:	andeq	r2, r1, r0, lsr lr
   12dbc:	andeq	r3, r1, r4, lsr #5
   12dc0:	andeq	r2, r1, r0, lsr lr
   12dc4:	andeq	r2, r1, r0, lsr lr
   12dc8:	andeq	r2, r1, r0, lsr lr
   12dcc:	andeq	r2, r1, r0, lsr lr
   12dd0:	andeq	r2, r1, r0, lsr lr
   12dd4:	andeq	r2, r1, r0, lsr lr
   12dd8:	andeq	r2, r1, r0, lsr lr
   12ddc:	andeq	r2, r1, r0, lsr lr
   12de0:	andeq	r2, r1, r0, lsr lr
   12de4:	andeq	r2, r1, r0, lsr lr
   12de8:	andeq	r2, r1, r0, lsr lr
   12dec:	andeq	r2, r1, r0, lsr lr
   12df0:	andeq	r2, r1, r0, lsr lr
   12df4:	andeq	r2, r1, r0, lsr lr
   12df8:	andeq	r2, r1, r0, lsr lr
   12dfc:	andeq	r2, r1, r0, lsr lr
   12e00:	andeq	r2, r1, r0, lsr lr
   12e04:	andeq	r2, r1, r0, lsr lr
   12e08:	andeq	r2, r1, r0, lsr lr
   12e0c:	andeq	r2, r1, r0, lsr lr
   12e10:	andeq	r2, r1, r0, lsr lr
   12e14:	andeq	r2, r1, r0, lsr lr
   12e18:	andeq	r2, r1, r0, lsr lr
   12e1c:	andeq	r2, r1, r0, lsr lr
   12e20:	andeq	r2, r1, r0, lsr lr
   12e24:	andeq	r2, r1, r0, lsr lr
   12e28:	andeq	r2, r1, r0, lsr lr
   12e2c:	andeq	r3, r1, r4, lsr #5
   12e30:	add	r2, r2, #1
   12e34:	cmp	r2, r0
   12e38:	bcc	12d90 <__assert_fail@plt+0x19f0>
   12e3c:	ldr	r6, [sp, #44]	; 0x2c
   12e40:	add	r6, r0, r6
   12e44:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12e48:	bl	1119c <iswprint@plt>
   12e4c:	cmp	r0, #0
   12e50:	movwne	r0, #1
   12e54:	and	r4, r4, r0
   12e58:	sub	r0, fp, #40	; 0x28
   12e5c:	bl	11154 <mbsinit@plt>
   12e60:	ldr	lr, [sp, #28]
   12e64:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e68:	sub	r3, fp, #40	; 0x28
   12e6c:	cmp	r0, #0
   12e70:	beq	12d30 <__assert_fail@plt+0x1990>
   12e74:	b	131ec <__assert_fail@plt+0x1e4c>
   12e78:	ldr	r0, [sp, #32]
   12e7c:	cmp	r0, #0
   12e80:	beq	12f1c <__assert_fail@plt+0x1b7c>
   12e84:	add	r0, r7, #2
   12e88:	cmp	r0, lr
   12e8c:	bcs	12f1c <__assert_fail@plt+0x1b7c>
   12e90:	add	r1, ip, r7
   12e94:	ldrb	r1, [r1, #1]
   12e98:	cmp	r1, #63	; 0x3f
   12e9c:	bne	12f1c <__assert_fail@plt+0x1b7c>
   12ea0:	ldrb	r5, [ip, r0]
   12ea4:	sub	r1, r5, #33	; 0x21
   12ea8:	cmp	r1, #29
   12eac:	bhi	12f1c <__assert_fail@plt+0x1b7c>
   12eb0:	movw	r3, #20929	; 0x51c1
   12eb4:	mov	r2, #1
   12eb8:	movt	r3, #14336	; 0x3800
   12ebc:	tst	r3, r2, lsl r1
   12ec0:	beq	12f1c <__assert_fail@plt+0x1b7c>
   12ec4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12ec8:	tst	r1, #1
   12ecc:	bne	133c4 <__assert_fail@plt+0x2024>
   12ed0:	cmp	r8, sl
   12ed4:	mov	r7, r0
   12ed8:	mov	r4, #0
   12edc:	movcc	r1, #63	; 0x3f
   12ee0:	strbcc	r1, [r6, r8]
   12ee4:	add	r1, r8, #1
   12ee8:	cmp	r1, sl
   12eec:	movcc	r2, #34	; 0x22
   12ef0:	strbcc	r2, [r6, r1]
   12ef4:	add	r1, r8, #2
   12ef8:	cmp	r1, sl
   12efc:	movcc	r2, #34	; 0x22
   12f00:	strbcc	r2, [r6, r1]
   12f04:	add	r1, r8, #3
   12f08:	add	r8, r8, #4
   12f0c:	cmp	r1, sl
   12f10:	movcc	r2, #63	; 0x3f
   12f14:	strbcc	r2, [r6, r1]
   12f18:	b	12980 <__assert_fail@plt+0x15e0>
   12f1c:	mov	r5, #63	; 0x3f
   12f20:	mov	r4, #0
   12f24:	b	12980 <__assert_fail@plt+0x15e0>
   12f28:	add	r1, r2, r7
   12f2c:	ldr	lr, [sp, #28]
   12f30:	mov	r3, #0
   12f34:	str	r1, [sp, #44]	; 0x2c
   12f38:	add	r1, r7, #1
   12f3c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12f40:	tst	r0, #1
   12f44:	bne	13018 <__assert_fail@plt+0x1c78>
   12f48:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12f4c:	tst	r2, #1
   12f50:	bne	1330c <__assert_fail@plt+0x1f6c>
   12f54:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12f58:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12f5c:	cmp	r7, #2
   12f60:	movwne	r3, #1
   12f64:	orr	r3, r3, r2
   12f68:	tst	r3, #1
   12f6c:	bne	12fa8 <__assert_fail@plt+0x1c08>
   12f70:	cmp	r8, sl
   12f74:	add	r3, r8, #1
   12f78:	movcc	r2, #39	; 0x27
   12f7c:	strbcc	r2, [r6, r8]
   12f80:	cmp	r3, sl
   12f84:	movcc	r2, #36	; 0x24
   12f88:	strbcc	r2, [r6, r3]
   12f8c:	add	r3, r8, #2
   12f90:	add	r8, r8, #3
   12f94:	cmp	r3, sl
   12f98:	movcc	r2, #39	; 0x27
   12f9c:	strbcc	r2, [r6, r3]
   12fa0:	mov	r2, #1
   12fa4:	str	r2, [fp, #-56]	; 0xffffffc8
   12fa8:	cmp	r8, sl
   12fac:	movcc	r3, #92	; 0x5c
   12fb0:	strbcc	r3, [r6, r8]
   12fb4:	add	r3, r8, #1
   12fb8:	cmp	r3, sl
   12fbc:	andcc	r7, r5, #192	; 0xc0
   12fc0:	movcc	r2, #48	; 0x30
   12fc4:	orrcc	r7, r2, r7, lsr #6
   12fc8:	strbcc	r7, [r6, r3]
   12fcc:	add	r3, r8, #2
   12fd0:	add	r8, r8, #3
   12fd4:	cmp	r3, sl
   12fd8:	lsrcc	r7, r5, #3
   12fdc:	movcc	r2, #6
   12fe0:	bficc	r7, r2, #3, #29
   12fe4:	mov	r2, #6
   12fe8:	strbcc	r7, [r6, r3]
   12fec:	bfi	r5, r2, #3, #29
   12ff0:	mov	r3, #1
   12ff4:	b	1303c <__assert_fail@plt+0x1c9c>
   12ff8:	cmp	r8, sl
   12ffc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13000:	strbcc	r5, [r6, r8]
   13004:	add	r8, r8, #1
   13008:	ldrb	r5, [ip, r1]
   1300c:	add	r1, r1, #1
   13010:	tst	r0, #1
   13014:	beq	12f48 <__assert_fail@plt+0x1ba8>
   13018:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1301c:	tst	r2, #1
   13020:	beq	13034 <__assert_fail@plt+0x1c94>
   13024:	cmp	r8, sl
   13028:	movcc	r7, #92	; 0x5c
   1302c:	strbcc	r7, [r6, r8]
   13030:	add	r8, r8, #1
   13034:	mov	r2, #0
   13038:	str	r2, [fp, #-52]	; 0xffffffcc
   1303c:	ldr	r2, [sp, #44]	; 0x2c
   13040:	and	r9, r3, #1
   13044:	cmp	r2, r1
   13048:	bls	13148 <__assert_fail@plt+0x1da8>
   1304c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13050:	cmp	r9, #0
   13054:	movwne	r9, #1
   13058:	mvn	r7, r2
   1305c:	orr	r7, r7, r9
   13060:	tst	r7, #1
   13064:	bne	12ff8 <__assert_fail@plt+0x1c58>
   13068:	cmp	r8, sl
   1306c:	movcc	r7, #39	; 0x27
   13070:	strbcc	r7, [r6, r8]
   13074:	add	r7, r8, #1
   13078:	add	r8, r8, #2
   1307c:	cmp	r7, sl
   13080:	movcc	r2, #39	; 0x27
   13084:	strbcc	r2, [r6, r7]
   13088:	mov	r2, #0
   1308c:	str	r2, [fp, #-56]	; 0xffffffc8
   13090:	b	12ff8 <__assert_fail@plt+0x1c58>
   13094:	cmp	r8, sl
   13098:	mov	r2, #1
   1309c:	movcc	r0, #39	; 0x27
   130a0:	strbcc	r0, [r6, r8]
   130a4:	add	r0, r8, #1
   130a8:	cmp	r0, sl
   130ac:	movcc	r1, #36	; 0x24
   130b0:	strbcc	r1, [r6, r0]
   130b4:	add	r0, r8, #2
   130b8:	cmp	r0, sl
   130bc:	movcc	r1, #39	; 0x27
   130c0:	strbcc	r1, [r6, r0]
   130c4:	add	r0, r8, #3
   130c8:	cmp	r0, sl
   130cc:	add	r8, r0, #1
   130d0:	str	r2, [fp, #-56]	; 0xffffffc8
   130d4:	movcc	r1, #92	; 0x5c
   130d8:	strbcc	r1, [r6, r0]
   130dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   130e0:	cmp	r1, #2
   130e4:	beq	13138 <__assert_fail@plt+0x1d98>
   130e8:	add	r1, r7, #1
   130ec:	mov	r4, #0
   130f0:	mov	r9, #1
   130f4:	mov	r5, #48	; 0x30
   130f8:	cmp	r1, lr
   130fc:	bcs	12980 <__assert_fail@plt+0x15e0>
   13100:	ldrb	r1, [ip, r1]
   13104:	sub	r1, r1, #48	; 0x30
   13108:	uxtb	r1, r1
   1310c:	cmp	r1, #9
   13110:	bhi	12980 <__assert_fail@plt+0x15e0>
   13114:	cmp	r8, sl
   13118:	movcc	r1, #48	; 0x30
   1311c:	strbcc	r1, [r6, r8]
   13120:	add	r1, r0, #2
   13124:	add	r8, r0, #3
   13128:	cmp	r1, sl
   1312c:	movcc	r2, #48	; 0x30
   13130:	strbcc	r2, [r6, r1]
   13134:	b	12980 <__assert_fail@plt+0x15e0>
   13138:	mov	r0, #48	; 0x30
   1313c:	mov	r9, #1
   13140:	mov	r4, #0
   13144:	b	12c18 <__assert_fail@plt+0x1878>
   13148:	cmp	r9, #0
   1314c:	sub	r7, r1, #1
   13150:	mov	r0, r5
   13154:	movwne	r9, #1
   13158:	cmp	r9, #0
   1315c:	bne	1319c <__assert_fail@plt+0x1dfc>
   13160:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13164:	tst	r1, #1
   13168:	beq	1319c <__assert_fail@plt+0x1dfc>
   1316c:	cmp	r8, sl
   13170:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13174:	movcc	r1, #39	; 0x27
   13178:	strbcc	r1, [r6, r8]
   1317c:	add	r1, r8, #1
   13180:	add	r8, r8, #2
   13184:	cmp	r1, sl
   13188:	movcc	r2, #39	; 0x27
   1318c:	strbcc	r2, [r6, r1]
   13190:	mov	r1, #0
   13194:	str	r1, [fp, #-56]	; 0xffffffc8
   13198:	b	12ca4 <__assert_fail@plt+0x1904>
   1319c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   131a0:	b	12ca4 <__assert_fail@plt+0x1904>
   131a4:	mov	r4, #0
   131a8:	b	131e4 <__assert_fail@plt+0x1e44>
   131ac:	mov	r4, #0
   131b0:	cmp	lr, r6
   131b4:	bls	131e4 <__assert_fail@plt+0x1e44>
   131b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   131bc:	ldr	r6, [sp, #44]	; 0x2c
   131c0:	ldr	r0, [sp, #24]
   131c4:	ldrb	r0, [r0, r6]
   131c8:	cmp	r0, #0
   131cc:	beq	131ec <__assert_fail@plt+0x1e4c>
   131d0:	add	r6, r6, #1
   131d4:	add	r0, r7, r6
   131d8:	cmp	r0, lr
   131dc:	bcc	131c0 <__assert_fail@plt+0x1e20>
   131e0:	b	131ec <__assert_fail@plt+0x1e4c>
   131e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   131e8:	ldr	r6, [sp, #44]	; 0x2c
   131ec:	mov	r1, r6
   131f0:	ldr	r6, [sp, #80]	; 0x50
   131f4:	b	12b4c <__assert_fail@plt+0x17ac>
   131f8:	mov	lr, r7
   131fc:	b	13204 <__assert_fail@plt+0x1e64>
   13200:	mvn	lr, #0
   13204:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13208:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1320c:	eor	r0, r7, #2
   13210:	orr	r0, r0, r8
   13214:	clz	r0, r0
   13218:	lsr	r0, r0, #5
   1321c:	tst	r1, r0
   13220:	bne	132ac <__assert_fail@plt+0x1f0c>
   13224:	mov	r0, r1
   13228:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1322c:	cmp	r7, #2
   13230:	movwne	r1, #1
   13234:	orr	r0, r0, r1
   13238:	tst	r0, #1
   1323c:	ldreq	r0, [sp, #60]	; 0x3c
   13240:	eoreq	r0, r0, #1
   13244:	tsteq	r0, #1
   13248:	bne	13358 <__assert_fail@plt+0x1fb8>
   1324c:	mov	r9, lr
   13250:	tst	r5, #1
   13254:	bne	13314 <__assert_fail@plt+0x1f74>
   13258:	ldr	r6, [sp, #56]	; 0x38
   1325c:	mov	r4, #0
   13260:	cmp	r6, #0
   13264:	beq	13350 <__assert_fail@plt+0x1fb0>
   13268:	ldr	r0, [sp, #84]	; 0x54
   1326c:	mov	r1, #0
   13270:	cmp	sl, #0
   13274:	mov	r5, #0
   13278:	str	r1, [fp, #-72]	; 0xffffffb8
   1327c:	beq	1244c <__assert_fail@plt+0x10ac>
   13280:	b	13358 <__assert_fail@plt+0x1fb8>
   13284:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13288:	ldr	r2, [sp, #84]	; 0x54
   1328c:	b	132b4 <__assert_fail@plt+0x1f14>
   13290:	ldr	ip, [fp, #-84]	; 0xffffffac
   13294:	mov	r2, #1
   13298:	mov	lr, r4
   1329c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   132a0:	b	132b4 <__assert_fail@plt+0x1f14>
   132a4:	ldr	r6, [sp, #80]	; 0x50
   132a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   132ac:	ldr	r2, [sp, #84]	; 0x54
   132b0:	mov	r7, #2
   132b4:	mov	r0, #0
   132b8:	ldr	r1, [fp, #12]
   132bc:	tst	r2, #1
   132c0:	mov	r2, r7
   132c4:	mov	r3, lr
   132c8:	str	r0, [sp, #8]
   132cc:	ldr	r0, [sp, #72]	; 0x48
   132d0:	movwne	r2, #4
   132d4:	cmp	r7, #2
   132d8:	movne	r2, r7
   132dc:	str	r2, [sp]
   132e0:	mov	r2, ip
   132e4:	bic	r1, r1, #2
   132e8:	str	r0, [sp, #12]
   132ec:	ldr	r0, [sp, #76]	; 0x4c
   132f0:	str	r1, [sp, #4]
   132f4:	mov	r1, sl
   132f8:	str	r0, [sp, #16]
   132fc:	mov	r0, r6
   13300:	bl	123cc <__assert_fail@plt+0x102c>
   13304:	mov	r8, r0
   13308:	b	133b0 <__assert_fail@plt+0x2010>
   1330c:	ldr	r2, [sp, #84]	; 0x54
   13310:	b	132b4 <__assert_fail@plt+0x1f14>
   13314:	mov	r0, #5
   13318:	ldr	r1, [sp, #56]	; 0x38
   1331c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13320:	mov	r3, r9
   13324:	str	r0, [sp]
   13328:	ldr	r0, [fp, #12]
   1332c:	str	r0, [sp, #4]
   13330:	ldr	r0, [fp, #16]
   13334:	str	r0, [sp, #8]
   13338:	ldr	r0, [sp, #72]	; 0x48
   1333c:	str	r0, [sp, #12]
   13340:	ldr	r0, [sp, #76]	; 0x4c
   13344:	str	r0, [sp, #16]
   13348:	ldr	r0, [sp, #80]	; 0x50
   1334c:	b	13300 <__assert_fail@plt+0x1f60>
   13350:	mov	r0, #0
   13354:	str	r0, [fp, #-72]	; 0xffffffb8
   13358:	ldr	r1, [sp, #92]	; 0x5c
   1335c:	cmp	r1, #0
   13360:	beq	133a0 <__assert_fail@plt+0x2000>
   13364:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13368:	ldr	r2, [sp, #80]	; 0x50
   1336c:	tst	r0, #1
   13370:	bne	133a4 <__assert_fail@plt+0x2004>
   13374:	ldrb	r0, [r1]
   13378:	cmp	r0, #0
   1337c:	beq	133a4 <__assert_fail@plt+0x2004>
   13380:	add	r1, r1, #1
   13384:	cmp	r8, sl
   13388:	strbcc	r0, [r2, r8]
   1338c:	add	r8, r8, #1
   13390:	ldrb	r0, [r1], #1
   13394:	cmp	r0, #0
   13398:	bne	13384 <__assert_fail@plt+0x1fe4>
   1339c:	b	133a4 <__assert_fail@plt+0x2004>
   133a0:	ldr	r2, [sp, #80]	; 0x50
   133a4:	cmp	r8, sl
   133a8:	movcc	r0, #0
   133ac:	strbcc	r0, [r2, r8]
   133b0:	mov	r0, r8
   133b4:	sub	sp, fp, #28
   133b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133bc:	mov	r2, #1
   133c0:	b	1329c <__assert_fail@plt+0x1efc>
   133c4:	ldr	r2, [sp, #84]	; 0x54
   133c8:	mov	r7, #5
   133cc:	b	132b4 <__assert_fail@plt+0x1f14>
   133d0:	bl	1137c <abort@plt>
   133d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133d8:	add	fp, sp, #28
   133dc:	sub	sp, sp, #28
   133e0:	movw	r5, #33168	; 0x8190
   133e4:	cmp	r2, #0
   133e8:	mov	r4, r1
   133ec:	mov	r7, r0
   133f0:	str	r0, [sp, #20]
   133f4:	movt	r5, #2
   133f8:	movne	r5, r2
   133fc:	bl	11298 <__errno_location@plt>
   13400:	mov	sl, r0
   13404:	ldm	r5, {r0, r1}
   13408:	ldr	r2, [r5, #40]	; 0x28
   1340c:	ldr	r3, [r5, #44]	; 0x2c
   13410:	add	r9, r5, #8
   13414:	ldr	r6, [sl]
   13418:	orr	r8, r1, #1
   1341c:	mov	r1, #0
   13420:	str	r6, [sp, #24]
   13424:	stm	sp, {r0, r8, r9}
   13428:	str	r2, [sp, #12]
   1342c:	str	r3, [sp, #16]
   13430:	mov	r0, #0
   13434:	mov	r2, r7
   13438:	mov	r3, r4
   1343c:	mov	r6, r4
   13440:	bl	123cc <__assert_fail@plt+0x102c>
   13444:	add	r7, r0, #1
   13448:	mov	r0, r7
   1344c:	bl	14990 <__assert_fail@plt+0x35f0>
   13450:	mov	r4, r0
   13454:	ldr	r0, [r5]
   13458:	ldr	r2, [r5, #44]	; 0x2c
   1345c:	ldr	r1, [r5, #40]	; 0x28
   13460:	mov	r3, r6
   13464:	stm	sp, {r0, r8, r9}
   13468:	str	r2, [sp, #16]
   1346c:	str	r1, [sp, #12]
   13470:	mov	r0, r4
   13474:	mov	r1, r7
   13478:	ldr	r2, [sp, #20]
   1347c:	bl	123cc <__assert_fail@plt+0x102c>
   13480:	ldr	r0, [sp, #24]
   13484:	str	r0, [sl]
   13488:	mov	r0, r4
   1348c:	sub	sp, fp, #28
   13490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13498:	add	fp, sp, #28
   1349c:	sub	sp, sp, #36	; 0x24
   134a0:	movw	r8, #33168	; 0x8190
   134a4:	cmp	r3, #0
   134a8:	mov	r4, r2
   134ac:	str	r2, [sp, #24]
   134b0:	mov	r5, r1
   134b4:	mov	r6, r0
   134b8:	str	r0, [sp, #20]
   134bc:	movt	r8, #2
   134c0:	movne	r8, r3
   134c4:	bl	11298 <__errno_location@plt>
   134c8:	str	r0, [sp, #28]
   134cc:	cmp	r4, #0
   134d0:	add	sl, r8, #8
   134d4:	ldm	r8, {r3, r9}
   134d8:	ldr	r7, [r0]
   134dc:	ldr	r1, [r8, #40]	; 0x28
   134e0:	ldr	r2, [r8, #44]	; 0x2c
   134e4:	mov	r0, #0
   134e8:	orreq	r9, r9, #1
   134ec:	str	r7, [sp, #32]
   134f0:	mov	r7, r5
   134f4:	stm	sp, {r3, r9, sl}
   134f8:	str	r1, [sp, #12]
   134fc:	str	r2, [sp, #16]
   13500:	mov	r1, #0
   13504:	mov	r2, r6
   13508:	mov	r3, r5
   1350c:	bl	123cc <__assert_fail@plt+0x102c>
   13510:	add	r4, r0, #1
   13514:	mov	r5, r0
   13518:	mov	r0, r4
   1351c:	bl	14990 <__assert_fail@plt+0x35f0>
   13520:	mov	r6, r0
   13524:	ldr	r0, [r8]
   13528:	ldr	r2, [r8, #44]	; 0x2c
   1352c:	ldr	r1, [r8, #40]	; 0x28
   13530:	mov	r3, r7
   13534:	stm	sp, {r0, r9, sl}
   13538:	str	r2, [sp, #16]
   1353c:	str	r1, [sp, #12]
   13540:	mov	r0, r6
   13544:	mov	r1, r4
   13548:	ldr	r2, [sp, #20]
   1354c:	bl	123cc <__assert_fail@plt+0x102c>
   13550:	ldr	r0, [sp, #24]
   13554:	ldr	r1, [sp, #32]
   13558:	ldr	r2, [sp, #28]
   1355c:	cmp	r0, #0
   13560:	str	r1, [r2]
   13564:	strne	r5, [r0]
   13568:	mov	r0, r6
   1356c:	sub	sp, fp, #28
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13574:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13578:	add	fp, sp, #24
   1357c:	movw	r5, #33060	; 0x8124
   13580:	movw	r8, #33056	; 0x8120
   13584:	movt	r5, #2
   13588:	movt	r8, #2
   1358c:	ldr	r0, [r5]
   13590:	ldr	r4, [r8]
   13594:	cmp	r0, #2
   13598:	blt	135c4 <__assert_fail@plt+0x2224>
   1359c:	add	r7, r4, #12
   135a0:	mov	r6, #0
   135a4:	ldr	r0, [r7, r6, lsl #3]
   135a8:	bl	12168 <__assert_fail@plt+0xdc8>
   135ac:	ldr	r1, [r5]
   135b0:	add	r2, r6, #2
   135b4:	add	r0, r6, #1
   135b8:	mov	r6, r0
   135bc:	cmp	r2, r1
   135c0:	blt	135a4 <__assert_fail@plt+0x2204>
   135c4:	ldr	r0, [r4, #4]
   135c8:	movw	r7, #33216	; 0x81c0
   135cc:	movt	r7, #2
   135d0:	cmp	r0, r7
   135d4:	beq	135ec <__assert_fail@plt+0x224c>
   135d8:	bl	12168 <__assert_fail@plt+0xdc8>
   135dc:	movw	r0, #33064	; 0x8128
   135e0:	mov	r6, #256	; 0x100
   135e4:	movt	r0, #2
   135e8:	strd	r6, [r0]
   135ec:	movw	r6, #33064	; 0x8128
   135f0:	movt	r6, #2
   135f4:	cmp	r4, r6
   135f8:	beq	13608 <__assert_fail@plt+0x2268>
   135fc:	mov	r0, r4
   13600:	bl	12168 <__assert_fail@plt+0xdc8>
   13604:	str	r6, [r8]
   13608:	mov	r0, #1
   1360c:	str	r0, [r5]
   13610:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13614:	movw	r3, #33168	; 0x8190
   13618:	mvn	r2, #0
   1361c:	movt	r3, #2
   13620:	b	13624 <__assert_fail@plt+0x2284>
   13624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13628:	add	fp, sp, #28
   1362c:	sub	sp, sp, #44	; 0x2c
   13630:	mov	r7, r3
   13634:	str	r2, [sp, #36]	; 0x24
   13638:	str	r1, [sp, #32]
   1363c:	mov	r5, r0
   13640:	bl	11298 <__errno_location@plt>
   13644:	cmp	r5, #0
   13648:	blt	137b4 <__assert_fail@plt+0x2414>
   1364c:	cmn	r5, #-2147483647	; 0x80000001
   13650:	beq	137b4 <__assert_fail@plt+0x2414>
   13654:	movw	r8, #33060	; 0x8124
   13658:	movw	r4, #33056	; 0x8120
   1365c:	str	r0, [sp, #28]
   13660:	ldr	r0, [r0]
   13664:	movt	r8, #2
   13668:	movt	r4, #2
   1366c:	ldr	r1, [r8]
   13670:	ldr	r6, [r4]
   13674:	str	r0, [sp, #24]
   13678:	cmp	r1, r5
   1367c:	ble	13688 <__assert_fail@plt+0x22e8>
   13680:	mov	sl, r6
   13684:	b	136f0 <__assert_fail@plt+0x2350>
   13688:	movw	r9, #33064	; 0x8128
   1368c:	mov	r0, #8
   13690:	add	r2, r5, #1
   13694:	str	r1, [fp, #-32]	; 0xffffffe0
   13698:	mvn	r3, #-2147483648	; 0x80000000
   1369c:	movt	r9, #2
   136a0:	str	r0, [sp]
   136a4:	sub	r2, r2, r1
   136a8:	sub	r1, fp, #32
   136ac:	subs	r0, r6, r9
   136b0:	movne	r0, r6
   136b4:	bl	14b90 <__assert_fail@plt+0x37f0>
   136b8:	cmp	r6, r9
   136bc:	mov	sl, r0
   136c0:	str	r0, [r4]
   136c4:	ldrdeq	r0, [r9]
   136c8:	stmeq	sl, {r0, r1}
   136cc:	ldr	r1, [r8]
   136d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   136d4:	add	r0, sl, r1, lsl #3
   136d8:	sub	r1, r2, r1
   136dc:	lsl	r2, r1, #3
   136e0:	mov	r1, #0
   136e4:	bl	112bc <memset@plt>
   136e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   136ec:	str	r0, [r8]
   136f0:	mov	r9, sl
   136f4:	ldr	r6, [r9, r5, lsl #3]!
   136f8:	ldr	r4, [r9, #4]!
   136fc:	ldm	r7, {r0, r1}
   13700:	ldr	r2, [r7, #40]	; 0x28
   13704:	ldr	r3, [r7, #44]	; 0x2c
   13708:	orr	r8, r1, #1
   1370c:	add	r1, r7, #8
   13710:	stm	sp, {r0, r8}
   13714:	add	r0, sp, #8
   13718:	str	r1, [sp, #20]
   1371c:	stm	r0, {r1, r2, r3}
   13720:	mov	r0, r4
   13724:	mov	r1, r6
   13728:	ldr	r2, [sp, #32]
   1372c:	ldr	r3, [sp, #36]	; 0x24
   13730:	bl	123cc <__assert_fail@plt+0x102c>
   13734:	cmp	r6, r0
   13738:	bhi	1379c <__assert_fail@plt+0x23fc>
   1373c:	add	r6, r0, #1
   13740:	movw	r0, #33216	; 0x81c0
   13744:	movt	r0, #2
   13748:	str	r6, [sl, r5, lsl #3]
   1374c:	cmp	r4, r0
   13750:	beq	1375c <__assert_fail@plt+0x23bc>
   13754:	mov	r0, r4
   13758:	bl	12168 <__assert_fail@plt+0xdc8>
   1375c:	mov	r0, r6
   13760:	bl	14990 <__assert_fail@plt+0x35f0>
   13764:	str	r0, [r9]
   13768:	mov	r4, r0
   1376c:	add	r3, sp, #8
   13770:	ldr	r0, [r7]
   13774:	ldr	r1, [r7, #40]	; 0x28
   13778:	ldr	r2, [r7, #44]	; 0x2c
   1377c:	stm	sp, {r0, r8}
   13780:	ldr	r0, [sp, #20]
   13784:	stm	r3, {r0, r1, r2}
   13788:	mov	r0, r4
   1378c:	mov	r1, r6
   13790:	ldr	r2, [sp, #32]
   13794:	ldr	r3, [sp, #36]	; 0x24
   13798:	bl	123cc <__assert_fail@plt+0x102c>
   1379c:	ldr	r0, [sp, #28]
   137a0:	ldr	r1, [sp, #24]
   137a4:	str	r1, [r0]
   137a8:	mov	r0, r4
   137ac:	sub	sp, fp, #28
   137b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137b4:	bl	1137c <abort@plt>
   137b8:	movw	r3, #33168	; 0x8190
   137bc:	movt	r3, #2
   137c0:	b	13624 <__assert_fail@plt+0x2284>
   137c4:	movw	r3, #33168	; 0x8190
   137c8:	mov	r1, r0
   137cc:	mov	r0, #0
   137d0:	mvn	r2, #0
   137d4:	movt	r3, #2
   137d8:	b	13624 <__assert_fail@plt+0x2284>
   137dc:	movw	r3, #33168	; 0x8190
   137e0:	mov	r2, r1
   137e4:	mov	r1, r0
   137e8:	mov	r0, #0
   137ec:	movt	r3, #2
   137f0:	b	13624 <__assert_fail@plt+0x2284>
   137f4:	push	{fp, lr}
   137f8:	mov	fp, sp
   137fc:	sub	sp, sp, #48	; 0x30
   13800:	vmov.i32	q8, #0	; 0x00000000
   13804:	mov	ip, #32
   13808:	mov	r3, sp
   1380c:	mov	lr, r2
   13810:	cmp	r1, #10
   13814:	add	r2, r3, #16
   13818:	vst1.64	{d16-d17}, [r3], ip
   1381c:	vst1.64	{d16-d17}, [r3]
   13820:	vst1.64	{d16-d17}, [r2]
   13824:	beq	13844 <__assert_fail@plt+0x24a4>
   13828:	str	r1, [sp]
   1382c:	mov	r3, sp
   13830:	mov	r1, lr
   13834:	mvn	r2, #0
   13838:	bl	13624 <__assert_fail@plt+0x2284>
   1383c:	mov	sp, fp
   13840:	pop	{fp, pc}
   13844:	bl	1137c <abort@plt>
   13848:	push	{r4, sl, fp, lr}
   1384c:	add	fp, sp, #8
   13850:	sub	sp, sp, #48	; 0x30
   13854:	mov	ip, r3
   13858:	mov	r3, sp
   1385c:	vmov.i32	q8, #0	; 0x00000000
   13860:	mov	lr, #32
   13864:	cmp	r1, #10
   13868:	add	r4, r3, #16
   1386c:	vst1.64	{d16-d17}, [r3], lr
   13870:	vst1.64	{d16-d17}, [r3]
   13874:	vst1.64	{d16-d17}, [r4]
   13878:	beq	13898 <__assert_fail@plt+0x24f8>
   1387c:	str	r1, [sp]
   13880:	mov	r1, r2
   13884:	mov	r3, sp
   13888:	mov	r2, ip
   1388c:	bl	13624 <__assert_fail@plt+0x2284>
   13890:	sub	sp, fp, #8
   13894:	pop	{r4, sl, fp, pc}
   13898:	bl	1137c <abort@plt>
   1389c:	push	{fp, lr}
   138a0:	mov	fp, sp
   138a4:	sub	sp, sp, #48	; 0x30
   138a8:	mov	r3, sp
   138ac:	vmov.i32	q8, #0	; 0x00000000
   138b0:	mov	ip, #32
   138b4:	cmp	r0, #10
   138b8:	add	r2, r3, #16
   138bc:	vst1.64	{d16-d17}, [r3], ip
   138c0:	vst1.64	{d16-d17}, [r3]
   138c4:	vst1.64	{d16-d17}, [r2]
   138c8:	beq	138e8 <__assert_fail@plt+0x2548>
   138cc:	str	r0, [sp]
   138d0:	mov	r3, sp
   138d4:	mov	r0, #0
   138d8:	mvn	r2, #0
   138dc:	bl	13624 <__assert_fail@plt+0x2284>
   138e0:	mov	sp, fp
   138e4:	pop	{fp, pc}
   138e8:	bl	1137c <abort@plt>
   138ec:	push	{fp, lr}
   138f0:	mov	fp, sp
   138f4:	sub	sp, sp, #48	; 0x30
   138f8:	mov	r3, sp
   138fc:	vmov.i32	q8, #0	; 0x00000000
   13900:	mov	ip, #32
   13904:	cmp	r0, #10
   13908:	add	lr, r3, #16
   1390c:	vst1.64	{d16-d17}, [r3], ip
   13910:	vst1.64	{d16-d17}, [r3]
   13914:	vst1.64	{d16-d17}, [lr]
   13918:	beq	13934 <__assert_fail@plt+0x2594>
   1391c:	str	r0, [sp]
   13920:	mov	r3, sp
   13924:	mov	r0, #0
   13928:	bl	13624 <__assert_fail@plt+0x2284>
   1392c:	mov	sp, fp
   13930:	pop	{fp, pc}
   13934:	bl	1137c <abort@plt>
   13938:	push	{r4, sl, fp, lr}
   1393c:	add	fp, sp, #8
   13940:	sub	sp, sp, #48	; 0x30
   13944:	mov	lr, r0
   13948:	movw	r0, #33168	; 0x8190
   1394c:	mov	r3, #32
   13950:	mov	ip, r1
   13954:	mov	r4, #1
   13958:	movt	r0, #2
   1395c:	add	r1, r0, #16
   13960:	vld1.64	{d16-d17}, [r0], r3
   13964:	mov	r3, sp
   13968:	vld1.64	{d18-d19}, [r1]
   1396c:	add	r1, r3, #16
   13970:	vld1.64	{d20-d21}, [r0]
   13974:	add	r0, r3, #32
   13978:	vst1.64	{d18-d19}, [r1]
   1397c:	mov	r1, r3
   13980:	vst1.64	{d20-d21}, [r0]
   13984:	mov	r0, #28
   13988:	and	r0, r0, r2, lsr #3
   1398c:	and	r2, r2, #31
   13990:	vst1.64	{d16-d17}, [r1], r0
   13994:	ldr	r0, [r1, #8]
   13998:	bic	r4, r4, r0, lsr r2
   1399c:	eor	r0, r0, r4, lsl r2
   139a0:	mov	r2, ip
   139a4:	str	r0, [r1, #8]
   139a8:	mov	r0, #0
   139ac:	mov	r1, lr
   139b0:	bl	13624 <__assert_fail@plt+0x2284>
   139b4:	sub	sp, fp, #8
   139b8:	pop	{r4, sl, fp, pc}
   139bc:	push	{fp, lr}
   139c0:	mov	fp, sp
   139c4:	sub	sp, sp, #48	; 0x30
   139c8:	mov	ip, r0
   139cc:	movw	r0, #33168	; 0x8190
   139d0:	mov	r3, #32
   139d4:	movt	r0, #2
   139d8:	add	r2, r0, #16
   139dc:	vld1.64	{d16-d17}, [r0], r3
   139e0:	mov	r3, sp
   139e4:	vld1.64	{d18-d19}, [r2]
   139e8:	add	r2, r3, #16
   139ec:	vld1.64	{d20-d21}, [r0]
   139f0:	add	r0, r3, #32
   139f4:	vst1.64	{d18-d19}, [r2]
   139f8:	mov	r2, r3
   139fc:	vst1.64	{d20-d21}, [r0]
   13a00:	mov	r0, #28
   13a04:	and	r0, r0, r1, lsr #3
   13a08:	and	r1, r1, #31
   13a0c:	vst1.64	{d16-d17}, [r2], r0
   13a10:	mov	r0, #1
   13a14:	ldr	lr, [r2, #8]
   13a18:	bic	r0, r0, lr, lsr r1
   13a1c:	eor	r0, lr, r0, lsl r1
   13a20:	mov	r1, ip
   13a24:	str	r0, [r2, #8]
   13a28:	mov	r0, #0
   13a2c:	mvn	r2, #0
   13a30:	bl	13624 <__assert_fail@plt+0x2284>
   13a34:	mov	sp, fp
   13a38:	pop	{fp, pc}
   13a3c:	push	{fp, lr}
   13a40:	mov	fp, sp
   13a44:	sub	sp, sp, #48	; 0x30
   13a48:	movw	r2, #33168	; 0x8190
   13a4c:	mov	r3, #32
   13a50:	mov	r1, r0
   13a54:	movt	r2, #2
   13a58:	add	r0, r2, #16
   13a5c:	vld1.64	{d16-d17}, [r2], r3
   13a60:	mov	r3, sp
   13a64:	vld1.64	{d18-d19}, [r0]
   13a68:	add	r0, r3, #16
   13a6c:	vld1.64	{d20-d21}, [r2]
   13a70:	mov	r2, r3
   13a74:	vst1.64	{d18-d19}, [r0]
   13a78:	add	r0, r3, #32
   13a7c:	vst1.64	{d20-d21}, [r0]
   13a80:	mov	r0, #12
   13a84:	vst1.64	{d16-d17}, [r2], r0
   13a88:	ldr	r0, [r2]
   13a8c:	orr	r0, r0, #67108864	; 0x4000000
   13a90:	str	r0, [r2]
   13a94:	mov	r0, #0
   13a98:	mvn	r2, #0
   13a9c:	bl	13624 <__assert_fail@plt+0x2284>
   13aa0:	mov	sp, fp
   13aa4:	pop	{fp, pc}
   13aa8:	push	{fp, lr}
   13aac:	mov	fp, sp
   13ab0:	sub	sp, sp, #48	; 0x30
   13ab4:	mov	ip, r1
   13ab8:	mov	r1, r0
   13abc:	movw	r0, #33168	; 0x8190
   13ac0:	mov	r3, #32
   13ac4:	movt	r0, #2
   13ac8:	add	r2, r0, #16
   13acc:	vld1.64	{d16-d17}, [r0], r3
   13ad0:	mov	r3, sp
   13ad4:	vld1.64	{d18-d19}, [r2]
   13ad8:	add	r2, r3, #16
   13adc:	vld1.64	{d20-d21}, [r0]
   13ae0:	add	r0, r3, #32
   13ae4:	vst1.64	{d18-d19}, [r2]
   13ae8:	mov	r2, r3
   13aec:	vst1.64	{d20-d21}, [r0]
   13af0:	mov	r0, #12
   13af4:	vst1.64	{d16-d17}, [r2], r0
   13af8:	ldr	r0, [r2]
   13afc:	orr	r0, r0, #67108864	; 0x4000000
   13b00:	str	r0, [r2]
   13b04:	mov	r0, #0
   13b08:	mov	r2, ip
   13b0c:	bl	13624 <__assert_fail@plt+0x2284>
   13b10:	mov	sp, fp
   13b14:	pop	{fp, pc}
   13b18:	push	{r4, sl, fp, lr}
   13b1c:	add	fp, sp, #8
   13b20:	sub	sp, sp, #96	; 0x60
   13b24:	mov	ip, r2
   13b28:	mov	r2, sp
   13b2c:	vmov.i32	q8, #0	; 0x00000000
   13b30:	mov	r4, #28
   13b34:	cmp	r1, #10
   13b38:	mov	r3, r2
   13b3c:	add	lr, r2, #16
   13b40:	vst1.64	{d16-d17}, [r3], r4
   13b44:	vst1.64	{d16-d17}, [lr]
   13b48:	vst1.32	{d16-d17}, [r3]
   13b4c:	beq	13b9c <__assert_fail@plt+0x27fc>
   13b50:	vld1.64	{d16-d17}, [r2], r4
   13b54:	vld1.64	{d18-d19}, [lr]
   13b58:	add	r3, sp, #48	; 0x30
   13b5c:	add	r4, r3, #4
   13b60:	vld1.32	{d20-d21}, [r2]
   13b64:	add	r2, r3, #20
   13b68:	vst1.32	{d16-d17}, [r4]
   13b6c:	vst1.32	{d18-d19}, [r2]
   13b70:	add	r2, r3, #32
   13b74:	vst1.32	{d20-d21}, [r2]
   13b78:	str	r1, [sp, #48]	; 0x30
   13b7c:	mvn	r2, #0
   13b80:	ldr	r1, [sp, #60]	; 0x3c
   13b84:	orr	r1, r1, #67108864	; 0x4000000
   13b88:	str	r1, [sp, #60]	; 0x3c
   13b8c:	mov	r1, ip
   13b90:	bl	13624 <__assert_fail@plt+0x2284>
   13b94:	sub	sp, fp, #8
   13b98:	pop	{r4, sl, fp, pc}
   13b9c:	bl	1137c <abort@plt>
   13ba0:	push	{r4, r5, fp, lr}
   13ba4:	add	fp, sp, #8
   13ba8:	sub	sp, sp, #48	; 0x30
   13bac:	mov	ip, r3
   13bb0:	movw	r3, #33168	; 0x8190
   13bb4:	mov	lr, #32
   13bb8:	cmp	r1, #0
   13bbc:	mov	r5, sp
   13bc0:	movt	r3, #2
   13bc4:	cmpne	r2, #0
   13bc8:	add	r4, r3, #16
   13bcc:	vld1.64	{d16-d17}, [r3], lr
   13bd0:	vld1.64	{d18-d19}, [r4]
   13bd4:	add	r4, r5, #16
   13bd8:	vld1.64	{d20-d21}, [r3]
   13bdc:	vst1.64	{d16-d17}, [r5], lr
   13be0:	mov	r3, #10
   13be4:	vst1.64	{d18-d19}, [r4]
   13be8:	vst1.64	{d20-d21}, [r5]
   13bec:	str	r3, [sp]
   13bf0:	bne	13bf8 <__assert_fail@plt+0x2858>
   13bf4:	bl	1137c <abort@plt>
   13bf8:	str	r2, [sp, #44]	; 0x2c
   13bfc:	str	r1, [sp, #40]	; 0x28
   13c00:	mov	r3, sp
   13c04:	mov	r1, ip
   13c08:	mvn	r2, #0
   13c0c:	bl	13624 <__assert_fail@plt+0x2284>
   13c10:	sub	sp, fp, #8
   13c14:	pop	{r4, r5, fp, pc}
   13c18:	push	{r4, r5, fp, lr}
   13c1c:	add	fp, sp, #8
   13c20:	sub	sp, sp, #48	; 0x30
   13c24:	mov	lr, r3
   13c28:	movw	r3, #33168	; 0x8190
   13c2c:	mov	ip, #32
   13c30:	cmp	r1, #0
   13c34:	mov	r5, sp
   13c38:	movt	r3, #2
   13c3c:	cmpne	r2, #0
   13c40:	add	r4, r3, #16
   13c44:	vld1.64	{d16-d17}, [r3], ip
   13c48:	vld1.64	{d18-d19}, [r4]
   13c4c:	add	r4, r5, #16
   13c50:	vld1.64	{d20-d21}, [r3]
   13c54:	vst1.64	{d16-d17}, [r5], ip
   13c58:	mov	r3, #10
   13c5c:	vst1.64	{d18-d19}, [r4]
   13c60:	vst1.64	{d20-d21}, [r5]
   13c64:	str	r3, [sp]
   13c68:	bne	13c70 <__assert_fail@plt+0x28d0>
   13c6c:	bl	1137c <abort@plt>
   13c70:	ldr	ip, [fp, #8]
   13c74:	str	r2, [sp, #44]	; 0x2c
   13c78:	str	r1, [sp, #40]	; 0x28
   13c7c:	mov	r3, sp
   13c80:	mov	r1, lr
   13c84:	mov	r2, ip
   13c88:	bl	13624 <__assert_fail@plt+0x2284>
   13c8c:	sub	sp, fp, #8
   13c90:	pop	{r4, r5, fp, pc}
   13c94:	push	{r4, sl, fp, lr}
   13c98:	add	fp, sp, #8
   13c9c:	sub	sp, sp, #48	; 0x30
   13ca0:	mov	ip, r2
   13ca4:	movw	r2, #33168	; 0x8190
   13ca8:	mov	lr, #32
   13cac:	cmp	r0, #0
   13cb0:	mov	r4, sp
   13cb4:	movt	r2, #2
   13cb8:	cmpne	r1, #0
   13cbc:	add	r3, r2, #16
   13cc0:	vld1.64	{d16-d17}, [r2], lr
   13cc4:	vld1.64	{d18-d19}, [r3]
   13cc8:	add	r3, r4, #16
   13ccc:	vld1.64	{d20-d21}, [r2]
   13cd0:	vst1.64	{d16-d17}, [r4], lr
   13cd4:	mov	r2, #10
   13cd8:	vst1.64	{d18-d19}, [r3]
   13cdc:	vst1.64	{d20-d21}, [r4]
   13ce0:	str	r2, [sp]
   13ce4:	bne	13cec <__assert_fail@plt+0x294c>
   13ce8:	bl	1137c <abort@plt>
   13cec:	str	r1, [sp, #44]	; 0x2c
   13cf0:	str	r0, [sp, #40]	; 0x28
   13cf4:	mov	r3, sp
   13cf8:	mov	r0, #0
   13cfc:	mov	r1, ip
   13d00:	mvn	r2, #0
   13d04:	bl	13624 <__assert_fail@plt+0x2284>
   13d08:	sub	sp, fp, #8
   13d0c:	pop	{r4, sl, fp, pc}
   13d10:	push	{r4, r5, fp, lr}
   13d14:	add	fp, sp, #8
   13d18:	sub	sp, sp, #48	; 0x30
   13d1c:	mov	lr, r2
   13d20:	movw	r2, #33168	; 0x8190
   13d24:	mov	ip, r3
   13d28:	mov	r3, #32
   13d2c:	cmp	r0, #0
   13d30:	mov	r5, sp
   13d34:	movt	r2, #2
   13d38:	cmpne	r1, #0
   13d3c:	add	r4, r2, #16
   13d40:	vld1.64	{d16-d17}, [r2], r3
   13d44:	vld1.64	{d18-d19}, [r4]
   13d48:	add	r4, r5, #16
   13d4c:	vld1.64	{d20-d21}, [r2]
   13d50:	vst1.64	{d16-d17}, [r5], r3
   13d54:	mov	r2, #10
   13d58:	vst1.64	{d18-d19}, [r4]
   13d5c:	vst1.64	{d20-d21}, [r5]
   13d60:	str	r2, [sp]
   13d64:	bne	13d6c <__assert_fail@plt+0x29cc>
   13d68:	bl	1137c <abort@plt>
   13d6c:	str	r1, [sp, #44]	; 0x2c
   13d70:	str	r0, [sp, #40]	; 0x28
   13d74:	mov	r3, sp
   13d78:	mov	r0, #0
   13d7c:	mov	r1, lr
   13d80:	mov	r2, ip
   13d84:	bl	13624 <__assert_fail@plt+0x2284>
   13d88:	sub	sp, fp, #8
   13d8c:	pop	{r4, r5, fp, pc}
   13d90:	movw	r3, #33072	; 0x8130
   13d94:	movt	r3, #2
   13d98:	b	13624 <__assert_fail@plt+0x2284>
   13d9c:	movw	r3, #33072	; 0x8130
   13da0:	mov	r2, r1
   13da4:	mov	r1, r0
   13da8:	mov	r0, #0
   13dac:	movt	r3, #2
   13db0:	b	13624 <__assert_fail@plt+0x2284>
   13db4:	movw	r3, #33072	; 0x8130
   13db8:	mvn	r2, #0
   13dbc:	movt	r3, #2
   13dc0:	b	13624 <__assert_fail@plt+0x2284>
   13dc4:	movw	r3, #33072	; 0x8130
   13dc8:	mov	r1, r0
   13dcc:	mov	r0, #0
   13dd0:	mvn	r2, #0
   13dd4:	movt	r3, #2
   13dd8:	b	13624 <__assert_fail@plt+0x2284>
   13ddc:	push	{r4, r5, fp, lr}
   13de0:	add	fp, sp, #8
   13de4:	mov	r5, r0
   13de8:	mov	r4, r1
   13dec:	mov	r0, #0
   13df0:	mov	r2, #5
   13df4:	mov	r1, r5
   13df8:	bl	1116c <dcgettext@plt>
   13dfc:	cmp	r0, r5
   13e00:	popne	{r4, r5, fp, pc}
   13e04:	bl	16750 <__assert_fail@plt+0x53b0>
   13e08:	ldrb	r1, [r0]
   13e0c:	and	r1, r1, #223	; 0xdf
   13e10:	cmp	r1, #71	; 0x47
   13e14:	beq	13e7c <__assert_fail@plt+0x2adc>
   13e18:	cmp	r1, #85	; 0x55
   13e1c:	bne	13ea0 <__assert_fail@plt+0x2b00>
   13e20:	ldrb	r1, [r0, #1]
   13e24:	and	r1, r1, #223	; 0xdf
   13e28:	cmp	r1, #84	; 0x54
   13e2c:	bne	13ea0 <__assert_fail@plt+0x2b00>
   13e30:	ldrb	r1, [r0, #2]
   13e34:	and	r1, r1, #223	; 0xdf
   13e38:	cmp	r1, #70	; 0x46
   13e3c:	ldrbeq	r1, [r0, #3]
   13e40:	cmpeq	r1, #45	; 0x2d
   13e44:	bne	13ea0 <__assert_fail@plt+0x2b00>
   13e48:	ldrb	r1, [r0, #4]
   13e4c:	cmp	r1, #56	; 0x38
   13e50:	ldrbeq	r0, [r0, #5]
   13e54:	cmpeq	r0, #0
   13e58:	bne	13ea0 <__assert_fail@plt+0x2b00>
   13e5c:	ldrb	r1, [r5]
   13e60:	movw	r2, #29632	; 0x73c0
   13e64:	movw	r0, #29636	; 0x73c4
   13e68:	movt	r2, #1
   13e6c:	movt	r0, #1
   13e70:	cmp	r1, #96	; 0x60
   13e74:	moveq	r0, r2
   13e78:	pop	{r4, r5, fp, pc}
   13e7c:	ldrb	r1, [r0, #1]
   13e80:	and	r1, r1, #223	; 0xdf
   13e84:	cmp	r1, #66	; 0x42
   13e88:	bne	13ea0 <__assert_fail@plt+0x2b00>
   13e8c:	ldrb	r1, [r0, #2]
   13e90:	cmp	r1, #49	; 0x31
   13e94:	ldrbeq	r1, [r0, #3]
   13e98:	cmpeq	r1, #56	; 0x38
   13e9c:	beq	13ebc <__assert_fail@plt+0x2b1c>
   13ea0:	movw	r1, #29626	; 0x73ba
   13ea4:	movw	r0, #29630	; 0x73be
   13ea8:	cmp	r4, #9
   13eac:	movt	r1, #1
   13eb0:	movt	r0, #1
   13eb4:	moveq	r0, r1
   13eb8:	pop	{r4, r5, fp, pc}
   13ebc:	ldrb	r1, [r0, #4]
   13ec0:	cmp	r1, #48	; 0x30
   13ec4:	ldrbeq	r1, [r0, #5]
   13ec8:	cmpeq	r1, #51	; 0x33
   13ecc:	bne	13ea0 <__assert_fail@plt+0x2b00>
   13ed0:	ldrb	r1, [r0, #6]
   13ed4:	cmp	r1, #48	; 0x30
   13ed8:	ldrbeq	r0, [r0, #7]
   13edc:	cmpeq	r0, #0
   13ee0:	bne	13ea0 <__assert_fail@plt+0x2b00>
   13ee4:	ldrb	r1, [r5]
   13ee8:	movw	r2, #29640	; 0x73c8
   13eec:	movw	r0, #29644	; 0x73cc
   13ef0:	movt	r2, #1
   13ef4:	movt	r0, #1
   13ef8:	b	13e70 <__assert_fail@plt+0x2ad0>
   13efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f00:	add	fp, sp, #28
   13f04:	sub	sp, sp, #12
   13f08:	ldr	sl, [fp, #8]
   13f0c:	mov	r9, r3
   13f10:	mov	r4, r2
   13f14:	mov	r8, r1
   13f18:	mov	r7, r0
   13f1c:	cmp	r2, #0
   13f20:	beq	13f38 <__assert_fail@plt+0x2b98>
   13f24:	mov	r0, r7
   13f28:	mov	r1, #58	; 0x3a
   13f2c:	bl	1128c <strchr@plt>
   13f30:	mov	r6, r0
   13f34:	b	13f3c <__assert_fail@plt+0x2b9c>
   13f38:	mov	r6, #0
   13f3c:	mov	r0, r7
   13f40:	mov	r1, r6
   13f44:	mov	r2, r8
   13f48:	mov	r3, r4
   13f4c:	stm	sp, {r9, sl}
   13f50:	bl	13fb8 <__assert_fail@plt+0x2c18>
   13f54:	mov	r5, r0
   13f58:	cmp	r4, #0
   13f5c:	beq	13fac <__assert_fail@plt+0x2c0c>
   13f60:	cmp	r6, #0
   13f64:	bne	13fac <__assert_fail@plt+0x2c0c>
   13f68:	cmp	r5, #0
   13f6c:	beq	13fac <__assert_fail@plt+0x2c0c>
   13f70:	mov	r0, r7
   13f74:	mov	r1, #46	; 0x2e
   13f78:	bl	1128c <strchr@plt>
   13f7c:	cmp	r0, #0
   13f80:	beq	13fac <__assert_fail@plt+0x2c0c>
   13f84:	mov	r1, r0
   13f88:	mov	r0, r7
   13f8c:	mov	r2, r8
   13f90:	mov	r3, r4
   13f94:	stm	sp, {r9, sl}
   13f98:	bl	13fb8 <__assert_fail@plt+0x2c18>
   13f9c:	cmp	r0, #0
   13fa0:	movne	r0, r5
   13fa4:	sub	sp, fp, #28
   13fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fac:	mov	r0, r5
   13fb0:	sub	sp, fp, #28
   13fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fbc:	add	fp, sp, #28
   13fc0:	sub	sp, sp, #36	; 0x24
   13fc4:	mov	sl, r3
   13fc8:	ldr	r3, [r2]
   13fcc:	mov	r9, r2
   13fd0:	mov	r4, r1
   13fd4:	ldr	r2, [fp, #8]
   13fd8:	ldr	r8, [fp, #12]
   13fdc:	cmp	sl, #0
   13fe0:	ldrne	r1, [sl]
   13fe4:	str	r3, [sp, #4]
   13fe8:	mvneq	r1, #0
   13fec:	cmp	r2, #0
   13ff0:	str	r1, [sp, #8]
   13ff4:	movne	r1, #0
   13ff8:	strne	r1, [r2]
   13ffc:	cmp	r8, #0
   14000:	movne	r1, #0
   14004:	strne	r1, [r8]
   14008:	cmp	r4, #0
   1400c:	beq	14040 <__assert_fail@plt+0x2ca0>
   14010:	subs	r5, r4, r0
   14014:	beq	140d0 <__assert_fail@plt+0x2d30>
   14018:	add	r1, r5, #1
   1401c:	bl	14dfc <__assert_fail@plt+0x3a5c>
   14020:	mov	r7, r0
   14024:	mov	r0, #0
   14028:	mov	r6, r4
   1402c:	strb	r0, [r7, r5]
   14030:	ldrb	r0, [r6, #1]!
   14034:	cmp	r0, #0
   14038:	moveq	r6, r0
   1403c:	b	14058 <__assert_fail@plt+0x2cb8>
   14040:	ldrb	r1, [r0]
   14044:	cmp	r1, #0
   14048:	beq	141e8 <__assert_fail@plt+0x2e48>
   1404c:	bl	14e80 <__assert_fail@plt+0x3ae0>
   14050:	mov	r7, r0
   14054:	mov	r6, #0
   14058:	ldrb	r0, [r7]
   1405c:	cmp	r0, #43	; 0x2b
   14060:	beq	140b0 <__assert_fail@plt+0x2d10>
   14064:	mov	r0, r7
   14068:	bl	110e8 <getpwnam@plt>
   1406c:	cmp	r0, #0
   14070:	beq	140b0 <__assert_fail@plt+0x2d10>
   14074:	ldr	r1, [r0, #8]
   14078:	mov	r5, #0
   1407c:	cmp	r4, #0
   14080:	str	r1, [sp, #4]
   14084:	beq	141f4 <__assert_fail@plt+0x2e54>
   14088:	cmp	r6, #0
   1408c:	bne	141f4 <__assert_fail@plt+0x2e54>
   14090:	ldr	r4, [r0, #12]
   14094:	mov	r0, r4
   14098:	bl	11388 <getgrgid@plt>
   1409c:	cmp	r0, #0
   140a0:	str	r4, [sp, #8]
   140a4:	beq	141fc <__assert_fail@plt+0x2e5c>
   140a8:	ldr	r0, [r0]
   140ac:	b	1420c <__assert_fail@plt+0x2e6c>
   140b0:	cmp	r4, #0
   140b4:	beq	1418c <__assert_fail@plt+0x2dec>
   140b8:	cmp	r6, #0
   140bc:	bne	1418c <__assert_fail@plt+0x2dec>
   140c0:	movw	r5, #29759	; 0x743f
   140c4:	mov	r4, #0
   140c8:	movt	r5, #1
   140cc:	b	14218 <__assert_fail@plt+0x2e78>
   140d0:	ldrb	r0, [r4, #1]!
   140d4:	mov	r7, #0
   140d8:	mov	r5, #0
   140dc:	cmp	r0, #0
   140e0:	moveq	r4, r0
   140e4:	mov	r6, r4
   140e8:	mov	r4, #0
   140ec:	cmp	r6, #0
   140f0:	beq	14224 <__assert_fail@plt+0x2e84>
   140f4:	cmp	r5, #0
   140f8:	bne	14224 <__assert_fail@plt+0x2e84>
   140fc:	ldrb	r0, [r6]
   14100:	cmp	r0, #43	; 0x2b
   14104:	beq	14124 <__assert_fail@plt+0x2d84>
   14108:	mov	r0, r6
   1410c:	bl	11394 <getgrnam@plt>
   14110:	cmp	r0, #0
   14114:	beq	14124 <__assert_fail@plt+0x2d84>
   14118:	ldr	r0, [r0, #8]
   1411c:	mov	r5, #0
   14120:	b	14174 <__assert_fail@plt+0x2dd4>
   14124:	movw	r0, #28132	; 0x6de4
   14128:	add	r3, sp, #12
   1412c:	mov	r1, #0
   14130:	mov	r2, #10
   14134:	movt	r0, #1
   14138:	str	r0, [sp]
   1413c:	mov	r0, r6
   14140:	bl	14f38 <__assert_fail@plt+0x3b98>
   14144:	ldr	r1, [sp, #12]
   14148:	clz	r0, r0
   1414c:	movw	r5, #29745	; 0x7431
   14150:	lsr	r0, r0, #5
   14154:	movt	r5, #1
   14158:	add	r2, r1, #1
   1415c:	cmn	r1, #1
   14160:	movwne	r2, #1
   14164:	ands	r0, r0, r2
   14168:	ldr	r0, [sp, #8]
   1416c:	movwne	r5, #0
   14170:	movne	r0, r1
   14174:	str	r0, [sp, #8]
   14178:	bl	110c4 <endgrent@plt>
   1417c:	mov	r0, r6
   14180:	bl	14e80 <__assert_fail@plt+0x3ae0>
   14184:	mov	r4, r0
   14188:	b	14224 <__assert_fail@plt+0x2e84>
   1418c:	movw	r0, #28132	; 0x6de4
   14190:	add	r3, sp, #12
   14194:	mov	r1, #0
   14198:	mov	r2, #10
   1419c:	mov	r4, #0
   141a0:	movt	r0, #1
   141a4:	str	r0, [sp]
   141a8:	mov	r0, r7
   141ac:	bl	14f38 <__assert_fail@plt+0x3b98>
   141b0:	ldr	r1, [sp, #12]
   141b4:	clz	r0, r0
   141b8:	movw	r5, #29732	; 0x7424
   141bc:	lsr	r0, r0, #5
   141c0:	movt	r5, #1
   141c4:	add	r2, r1, #1
   141c8:	cmn	r1, #1
   141cc:	movwne	r2, #1
   141d0:	ands	r0, r0, r2
   141d4:	ldr	r0, [sp, #4]
   141d8:	movwne	r5, #0
   141dc:	movne	r0, r1
   141e0:	str	r0, [sp, #4]
   141e4:	b	14218 <__assert_fail@plt+0x2e78>
   141e8:	mov	r4, #0
   141ec:	mov	r7, #0
   141f0:	b	14230 <__assert_fail@plt+0x2e90>
   141f4:	mov	r4, #0
   141f8:	b	14218 <__assert_fail@plt+0x2e78>
   141fc:	add	r2, sp, #12
   14200:	mov	r0, r4
   14204:	mov	r1, #0
   14208:	bl	166f4 <__assert_fail@plt+0x5354>
   1420c:	bl	14e80 <__assert_fail@plt+0x3ae0>
   14210:	mov	r4, r0
   14214:	bl	110c4 <endgrent@plt>
   14218:	bl	1131c <endpwent@plt>
   1421c:	cmp	r6, #0
   14220:	bne	140f4 <__assert_fail@plt+0x2d54>
   14224:	mov	r6, #0
   14228:	cmp	r5, #0
   1422c:	bne	14274 <__assert_fail@plt+0x2ed4>
   14230:	ldr	r0, [sp, #4]
   14234:	cmp	sl, #0
   14238:	mov	r6, #1
   1423c:	str	r0, [r9]
   14240:	ldrne	r0, [sp, #8]
   14244:	strne	r0, [sl]
   14248:	ldr	r0, [fp, #8]
   1424c:	cmp	r0, #0
   14250:	strne	r7, [r0]
   14254:	movne	r7, #0
   14258:	cmp	r8, #0
   1425c:	beq	14270 <__assert_fail@plt+0x2ed0>
   14260:	str	r4, [r8]
   14264:	mov	r5, #0
   14268:	mov	r4, #0
   1426c:	b	14274 <__assert_fail@plt+0x2ed4>
   14270:	mov	r5, #0
   14274:	mov	r0, r7
   14278:	bl	12168 <__assert_fail@plt+0xdc8>
   1427c:	mov	r0, r4
   14280:	bl	12168 <__assert_fail@plt+0xdc8>
   14284:	mov	r0, #0
   14288:	cmp	r6, #0
   1428c:	bne	142a0 <__assert_fail@plt+0x2f00>
   14290:	mov	r0, #0
   14294:	mov	r1, r5
   14298:	mov	r2, #5
   1429c:	bl	1116c <dcgettext@plt>
   142a0:	sub	sp, fp, #28
   142a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142ac:	add	fp, sp, #24
   142b0:	sub	sp, sp, #32
   142b4:	ldr	r6, [fp, #12]
   142b8:	ldr	r7, [fp, #8]
   142bc:	mov	r4, r2
   142c0:	mov	r8, r0
   142c4:	cmp	r1, #0
   142c8:	beq	142f0 <__assert_fail@plt+0x2f50>
   142cc:	movw	r2, #29772	; 0x744c
   142d0:	mov	r5, r1
   142d4:	str	r3, [sp, #4]
   142d8:	str	r4, [sp]
   142dc:	mov	r0, r8
   142e0:	mov	r1, #1
   142e4:	movt	r2, #1
   142e8:	mov	r3, r5
   142ec:	b	14308 <__assert_fail@plt+0x2f68>
   142f0:	movw	r2, #29784	; 0x7458
   142f4:	str	r3, [sp]
   142f8:	mov	r0, r8
   142fc:	mov	r1, #1
   14300:	mov	r3, r4
   14304:	movt	r2, #1
   14308:	bl	112e0 <__fprintf_chk@plt>
   1430c:	movw	r1, #29791	; 0x745f
   14310:	mov	r0, #0
   14314:	mov	r2, #5
   14318:	movt	r1, #1
   1431c:	bl	1116c <dcgettext@plt>
   14320:	movw	r2, #30509	; 0x772d
   14324:	mov	r3, r0
   14328:	movw	r0, #2022	; 0x7e6
   1432c:	mov	r1, #1
   14330:	str	r0, [sp]
   14334:	movt	r2, #1
   14338:	mov	r0, r8
   1433c:	bl	112e0 <__fprintf_chk@plt>
   14340:	movw	r4, #28131	; 0x6de3
   14344:	mov	r1, r8
   14348:	movt	r4, #1
   1434c:	mov	r0, r4
   14350:	bl	110d0 <fputs_unlocked@plt>
   14354:	movw	r1, #29795	; 0x7463
   14358:	mov	r0, #0
   1435c:	mov	r2, #5
   14360:	movt	r1, #1
   14364:	bl	1116c <dcgettext@plt>
   14368:	movw	r3, #29966	; 0x750e
   1436c:	mov	r2, r0
   14370:	mov	r0, r8
   14374:	mov	r1, #1
   14378:	movt	r3, #1
   1437c:	bl	112e0 <__fprintf_chk@plt>
   14380:	mov	r0, r4
   14384:	mov	r1, r8
   14388:	bl	110d0 <fputs_unlocked@plt>
   1438c:	cmp	r6, #9
   14390:	bhi	143cc <__assert_fail@plt+0x302c>
   14394:	add	r0, pc, #0
   14398:	ldr	pc, [r0, r6, lsl #2]
   1439c:	andeq	r4, r1, r4, asr #7
   143a0:	ldrdeq	r4, [r1], -r8
   143a4:	andeq	r4, r1, r8, lsl #8
   143a8:	andeq	r4, r1, r0, lsr r4
   143ac:	andeq	r4, r1, r8, asr r4
   143b0:	andeq	r4, r1, r0, lsl #9
   143b4:	andeq	r4, r1, r8, lsr #9
   143b8:	andeq	r4, r1, r0, ror #9
   143bc:	andeq	r4, r1, r0, lsl #11
   143c0:	andeq	r4, r1, r8, lsr #10
   143c4:	sub	sp, fp, #24
   143c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143cc:	movw	r1, #30319	; 0x766f
   143d0:	movt	r1, #1
   143d4:	b	14530 <__assert_fail@plt+0x3190>
   143d8:	movw	r1, #30000	; 0x7530
   143dc:	mov	r0, #0
   143e0:	mov	r2, #5
   143e4:	movt	r1, #1
   143e8:	bl	1116c <dcgettext@plt>
   143ec:	ldr	r3, [r7]
   143f0:	mov	r2, r0
   143f4:	mov	r0, r8
   143f8:	mov	r1, #1
   143fc:	sub	sp, fp, #24
   14400:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14404:	b	112e0 <__fprintf_chk@plt>
   14408:	movw	r1, #30016	; 0x7540
   1440c:	mov	r0, #0
   14410:	mov	r2, #5
   14414:	movt	r1, #1
   14418:	bl	1116c <dcgettext@plt>
   1441c:	mov	r2, r0
   14420:	ldr	r3, [r7]
   14424:	ldr	r0, [r7, #4]
   14428:	str	r0, [sp]
   1442c:	b	1451c <__assert_fail@plt+0x317c>
   14430:	movw	r1, #30039	; 0x7557
   14434:	mov	r0, #0
   14438:	mov	r2, #5
   1443c:	movt	r1, #1
   14440:	bl	1116c <dcgettext@plt>
   14444:	ldr	r3, [r7]
   14448:	mov	r2, r0
   1444c:	ldmib	r7, {r0, r1}
   14450:	stm	sp, {r0, r1}
   14454:	b	1451c <__assert_fail@plt+0x317c>
   14458:	movw	r1, #30067	; 0x7573
   1445c:	mov	r0, #0
   14460:	mov	r2, #5
   14464:	movt	r1, #1
   14468:	bl	1116c <dcgettext@plt>
   1446c:	ldr	r3, [r7]
   14470:	mov	r2, r0
   14474:	ldmib	r7, {r0, r1, r7}
   14478:	stm	sp, {r0, r1, r7}
   1447c:	b	1451c <__assert_fail@plt+0x317c>
   14480:	movw	r1, #30099	; 0x7593
   14484:	mov	r0, #0
   14488:	mov	r2, #5
   1448c:	movt	r1, #1
   14490:	bl	1116c <dcgettext@plt>
   14494:	ldr	r3, [r7]
   14498:	mov	r2, r0
   1449c:	ldmib	r7, {r0, r1, r6, r7}
   144a0:	stm	sp, {r0, r1, r6, r7}
   144a4:	b	1451c <__assert_fail@plt+0x317c>
   144a8:	movw	r1, #30135	; 0x75b7
   144ac:	mov	r0, #0
   144b0:	mov	r2, #5
   144b4:	movt	r1, #1
   144b8:	bl	1116c <dcgettext@plt>
   144bc:	ldr	r3, [r7]
   144c0:	mov	r2, r0
   144c4:	ldmib	r7, {r0, r1, r6}
   144c8:	ldr	r5, [r7, #16]
   144cc:	ldr	r7, [r7, #20]
   144d0:	stm	sp, {r0, r1, r6}
   144d4:	str	r5, [sp, #12]
   144d8:	str	r7, [sp, #16]
   144dc:	b	1451c <__assert_fail@plt+0x317c>
   144e0:	movw	r1, #30175	; 0x75df
   144e4:	mov	r0, #0
   144e8:	mov	r2, #5
   144ec:	movt	r1, #1
   144f0:	bl	1116c <dcgettext@plt>
   144f4:	ldr	r3, [r7]
   144f8:	mov	r2, r0
   144fc:	ldmib	r7, {r0, r1, r6}
   14500:	ldr	r5, [r7, #16]
   14504:	ldr	r4, [r7, #20]
   14508:	ldr	r7, [r7, #24]
   1450c:	stm	sp, {r0, r1, r6}
   14510:	str	r5, [sp, #12]
   14514:	str	r4, [sp, #16]
   14518:	str	r7, [sp, #20]
   1451c:	mov	r0, r8
   14520:	mov	r1, #1
   14524:	b	145d0 <__assert_fail@plt+0x3230>
   14528:	movw	r1, #30267	; 0x763b
   1452c:	movt	r1, #1
   14530:	mov	r0, #0
   14534:	mov	r2, #5
   14538:	bl	1116c <dcgettext@plt>
   1453c:	mov	ip, r0
   14540:	ldr	r3, [r7]
   14544:	ldr	r0, [r7, #4]
   14548:	ldr	r1, [r7, #8]
   1454c:	ldr	r6, [r7, #12]
   14550:	ldr	r5, [r7, #16]
   14554:	ldr	r4, [r7, #20]
   14558:	ldr	r2, [r7, #24]
   1455c:	ldr	lr, [r7, #28]
   14560:	ldr	r7, [r7, #32]
   14564:	stm	sp, {r0, r1, r6}
   14568:	str	r5, [sp, #12]
   1456c:	str	r4, [sp, #16]
   14570:	str	r2, [sp, #20]
   14574:	str	lr, [sp, #24]
   14578:	str	r7, [sp, #28]
   1457c:	b	145c4 <__assert_fail@plt+0x3224>
   14580:	movw	r1, #30219	; 0x760b
   14584:	mov	r0, #0
   14588:	mov	r2, #5
   1458c:	movt	r1, #1
   14590:	bl	1116c <dcgettext@plt>
   14594:	mov	ip, r0
   14598:	ldr	r3, [r7]
   1459c:	ldmib	r7, {r0, r1, r6}
   145a0:	ldr	r5, [r7, #16]
   145a4:	ldr	r4, [r7, #20]
   145a8:	ldr	r2, [r7, #24]
   145ac:	ldr	r7, [r7, #28]
   145b0:	stm	sp, {r0, r1, r6}
   145b4:	str	r5, [sp, #12]
   145b8:	str	r4, [sp, #16]
   145bc:	str	r2, [sp, #20]
   145c0:	str	r7, [sp, #24]
   145c4:	mov	r0, r8
   145c8:	mov	r1, #1
   145cc:	mov	r2, ip
   145d0:	bl	112e0 <__fprintf_chk@plt>
   145d4:	sub	sp, fp, #24
   145d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145dc:	push	{r4, sl, fp, lr}
   145e0:	add	fp, sp, #8
   145e4:	sub	sp, sp, #8
   145e8:	ldr	ip, [fp, #8]
   145ec:	mov	lr, #0
   145f0:	ldr	r4, [ip, lr, lsl #2]
   145f4:	add	lr, lr, #1
   145f8:	cmp	r4, #0
   145fc:	bne	145f0 <__assert_fail@plt+0x3250>
   14600:	sub	r4, lr, #1
   14604:	str	ip, [sp]
   14608:	str	r4, [sp, #4]
   1460c:	bl	142a8 <__assert_fail@plt+0x2f08>
   14610:	sub	sp, fp, #8
   14614:	pop	{r4, sl, fp, pc}
   14618:	push	{fp, lr}
   1461c:	mov	fp, sp
   14620:	sub	sp, sp, #48	; 0x30
   14624:	ldr	ip, [fp, #8]
   14628:	ldr	lr, [ip]
   1462c:	cmp	lr, #0
   14630:	str	lr, [sp, #8]
   14634:	beq	146d0 <__assert_fail@plt+0x3330>
   14638:	ldr	lr, [ip, #4]
   1463c:	cmp	lr, #0
   14640:	str	lr, [sp, #12]
   14644:	beq	146d8 <__assert_fail@plt+0x3338>
   14648:	ldr	lr, [ip, #8]
   1464c:	cmp	lr, #0
   14650:	str	lr, [sp, #16]
   14654:	beq	146e0 <__assert_fail@plt+0x3340>
   14658:	ldr	lr, [ip, #12]
   1465c:	cmp	lr, #0
   14660:	str	lr, [sp, #20]
   14664:	beq	146e8 <__assert_fail@plt+0x3348>
   14668:	ldr	lr, [ip, #16]
   1466c:	cmp	lr, #0
   14670:	str	lr, [sp, #24]
   14674:	beq	146f0 <__assert_fail@plt+0x3350>
   14678:	ldr	lr, [ip, #20]
   1467c:	cmp	lr, #0
   14680:	str	lr, [sp, #28]
   14684:	beq	146f8 <__assert_fail@plt+0x3358>
   14688:	ldr	lr, [ip, #24]
   1468c:	cmp	lr, #0
   14690:	str	lr, [sp, #32]
   14694:	beq	14700 <__assert_fail@plt+0x3360>
   14698:	ldr	lr, [ip, #28]
   1469c:	cmp	lr, #0
   146a0:	str	lr, [sp, #36]	; 0x24
   146a4:	beq	14708 <__assert_fail@plt+0x3368>
   146a8:	ldr	lr, [ip, #32]
   146ac:	cmp	lr, #0
   146b0:	str	lr, [sp, #40]	; 0x28
   146b4:	beq	14710 <__assert_fail@plt+0x3370>
   146b8:	ldr	lr, [ip, #36]	; 0x24
   146bc:	mov	ip, #10
   146c0:	cmp	lr, #0
   146c4:	str	lr, [sp, #44]	; 0x2c
   146c8:	movweq	ip, #9
   146cc:	b	14714 <__assert_fail@plt+0x3374>
   146d0:	mov	ip, #0
   146d4:	b	14714 <__assert_fail@plt+0x3374>
   146d8:	mov	ip, #1
   146dc:	b	14714 <__assert_fail@plt+0x3374>
   146e0:	mov	ip, #2
   146e4:	b	14714 <__assert_fail@plt+0x3374>
   146e8:	mov	ip, #3
   146ec:	b	14714 <__assert_fail@plt+0x3374>
   146f0:	mov	ip, #4
   146f4:	b	14714 <__assert_fail@plt+0x3374>
   146f8:	mov	ip, #5
   146fc:	b	14714 <__assert_fail@plt+0x3374>
   14700:	mov	ip, #6
   14704:	b	14714 <__assert_fail@plt+0x3374>
   14708:	mov	ip, #7
   1470c:	b	14714 <__assert_fail@plt+0x3374>
   14710:	mov	ip, #8
   14714:	add	lr, sp, #8
   14718:	str	ip, [sp, #4]
   1471c:	str	lr, [sp]
   14720:	bl	142a8 <__assert_fail@plt+0x2f08>
   14724:	mov	sp, fp
   14728:	pop	{fp, pc}
   1472c:	push	{fp, lr}
   14730:	mov	fp, sp
   14734:	sub	sp, sp, #56	; 0x38
   14738:	add	ip, fp, #8
   1473c:	str	ip, [sp, #12]
   14740:	ldr	lr, [fp, #8]
   14744:	cmp	lr, #0
   14748:	str	lr, [sp, #16]
   1474c:	beq	147e8 <__assert_fail@plt+0x3448>
   14750:	ldr	lr, [ip, #4]
   14754:	cmp	lr, #0
   14758:	str	lr, [sp, #20]
   1475c:	beq	147f0 <__assert_fail@plt+0x3450>
   14760:	ldr	lr, [ip, #8]
   14764:	cmp	lr, #0
   14768:	str	lr, [sp, #24]
   1476c:	beq	147f8 <__assert_fail@plt+0x3458>
   14770:	ldr	lr, [ip, #12]
   14774:	cmp	lr, #0
   14778:	str	lr, [sp, #28]
   1477c:	beq	14800 <__assert_fail@plt+0x3460>
   14780:	ldr	lr, [ip, #16]
   14784:	cmp	lr, #0
   14788:	str	lr, [sp, #32]
   1478c:	beq	14808 <__assert_fail@plt+0x3468>
   14790:	ldr	lr, [ip, #20]
   14794:	cmp	lr, #0
   14798:	str	lr, [sp, #36]	; 0x24
   1479c:	beq	14810 <__assert_fail@plt+0x3470>
   147a0:	ldr	lr, [ip, #24]
   147a4:	cmp	lr, #0
   147a8:	str	lr, [sp, #40]	; 0x28
   147ac:	beq	14818 <__assert_fail@plt+0x3478>
   147b0:	ldr	lr, [ip, #28]
   147b4:	cmp	lr, #0
   147b8:	str	lr, [sp, #44]	; 0x2c
   147bc:	beq	14820 <__assert_fail@plt+0x3480>
   147c0:	ldr	lr, [ip, #32]
   147c4:	cmp	lr, #0
   147c8:	str	lr, [sp, #48]	; 0x30
   147cc:	beq	14828 <__assert_fail@plt+0x3488>
   147d0:	ldr	lr, [ip, #36]	; 0x24
   147d4:	mov	ip, #10
   147d8:	cmp	lr, #0
   147dc:	str	lr, [sp, #52]	; 0x34
   147e0:	movweq	ip, #9
   147e4:	b	1482c <__assert_fail@plt+0x348c>
   147e8:	mov	ip, #0
   147ec:	b	1482c <__assert_fail@plt+0x348c>
   147f0:	mov	ip, #1
   147f4:	b	1482c <__assert_fail@plt+0x348c>
   147f8:	mov	ip, #2
   147fc:	b	1482c <__assert_fail@plt+0x348c>
   14800:	mov	ip, #3
   14804:	b	1482c <__assert_fail@plt+0x348c>
   14808:	mov	ip, #4
   1480c:	b	1482c <__assert_fail@plt+0x348c>
   14810:	mov	ip, #5
   14814:	b	1482c <__assert_fail@plt+0x348c>
   14818:	mov	ip, #6
   1481c:	b	1482c <__assert_fail@plt+0x348c>
   14820:	mov	ip, #7
   14824:	b	1482c <__assert_fail@plt+0x348c>
   14828:	mov	ip, #8
   1482c:	add	lr, sp, #16
   14830:	str	ip, [sp, #4]
   14834:	str	lr, [sp]
   14838:	bl	142a8 <__assert_fail@plt+0x2f08>
   1483c:	mov	sp, fp
   14840:	pop	{fp, pc}
   14844:	push	{fp, lr}
   14848:	mov	fp, sp
   1484c:	movw	r0, #33140	; 0x8174
   14850:	movt	r0, #2
   14854:	ldr	r1, [r0]
   14858:	movw	r0, #28131	; 0x6de3
   1485c:	movt	r0, #1
   14860:	bl	110d0 <fputs_unlocked@plt>
   14864:	movw	r1, #30379	; 0x76ab
   14868:	mov	r0, #0
   1486c:	mov	r2, #5
   14870:	movt	r1, #1
   14874:	bl	1116c <dcgettext@plt>
   14878:	movw	r2, #30399	; 0x76bf
   1487c:	mov	r1, r0
   14880:	mov	r0, #1
   14884:	movt	r2, #1
   14888:	bl	112c8 <__printf_chk@plt>
   1488c:	movw	r1, #30421	; 0x76d5
   14890:	mov	r0, #0
   14894:	mov	r2, #5
   14898:	movt	r1, #1
   1489c:	bl	1116c <dcgettext@plt>
   148a0:	movw	r2, #28549	; 0x6f85
   148a4:	movw	r3, #29028	; 0x7164
   148a8:	mov	r1, r0
   148ac:	mov	r0, #1
   148b0:	movt	r2, #1
   148b4:	movt	r3, #1
   148b8:	bl	112c8 <__printf_chk@plt>
   148bc:	movw	r1, #30441	; 0x76e9
   148c0:	mov	r0, #0
   148c4:	mov	r2, #5
   148c8:	movt	r1, #1
   148cc:	bl	1116c <dcgettext@plt>
   148d0:	movw	r2, #30480	; 0x7710
   148d4:	mov	r1, r0
   148d8:	mov	r0, #1
   148dc:	movt	r2, #1
   148e0:	pop	{fp, lr}
   148e4:	b	112c8 <__printf_chk@plt>
   148e8:	push	{r4, r5, r6, sl, fp, lr}
   148ec:	add	fp, sp, #16
   148f0:	mov	r4, r2
   148f4:	mov	r5, r1
   148f8:	mov	r6, r0
   148fc:	bl	16a0c <__assert_fail@plt+0x566c>
   14900:	cmp	r0, #0
   14904:	popne	{r4, r5, r6, sl, fp, pc}
   14908:	cmp	r6, #0
   1490c:	beq	14920 <__assert_fail@plt+0x3580>
   14910:	cmp	r5, #0
   14914:	cmpne	r4, #0
   14918:	bne	14920 <__assert_fail@plt+0x3580>
   1491c:	pop	{r4, r5, r6, sl, fp, pc}
   14920:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14924:	push	{r4, r5, r6, sl, fp, lr}
   14928:	add	fp, sp, #16
   1492c:	mov	r4, r2
   14930:	mov	r5, r1
   14934:	mov	r6, r0
   14938:	bl	16a0c <__assert_fail@plt+0x566c>
   1493c:	cmp	r0, #0
   14940:	popne	{r4, r5, r6, sl, fp, pc}
   14944:	cmp	r6, #0
   14948:	beq	1495c <__assert_fail@plt+0x35bc>
   1494c:	cmp	r5, #0
   14950:	cmpne	r4, #0
   14954:	bne	1495c <__assert_fail@plt+0x35bc>
   14958:	pop	{r4, r5, r6, sl, fp, pc}
   1495c:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14960:	push	{fp, lr}
   14964:	mov	fp, sp
   14968:	bl	16450 <__assert_fail@plt+0x50b0>
   1496c:	cmp	r0, #0
   14970:	popne	{fp, pc}
   14974:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14978:	push	{fp, lr}
   1497c:	mov	fp, sp
   14980:	bl	16450 <__assert_fail@plt+0x50b0>
   14984:	cmp	r0, #0
   14988:	popne	{fp, pc}
   1498c:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14990:	push	{fp, lr}
   14994:	mov	fp, sp
   14998:	bl	16450 <__assert_fail@plt+0x50b0>
   1499c:	cmp	r0, #0
   149a0:	popne	{fp, pc}
   149a4:	bl	14ec0 <__assert_fail@plt+0x3b20>
   149a8:	push	{r4, r5, fp, lr}
   149ac:	add	fp, sp, #8
   149b0:	mov	r4, r1
   149b4:	mov	r5, r0
   149b8:	bl	16480 <__assert_fail@plt+0x50e0>
   149bc:	cmp	r0, #0
   149c0:	popne	{r4, r5, fp, pc}
   149c4:	cmp	r5, #0
   149c8:	beq	149d8 <__assert_fail@plt+0x3638>
   149cc:	cmp	r4, #0
   149d0:	bne	149d8 <__assert_fail@plt+0x3638>
   149d4:	pop	{r4, r5, fp, pc}
   149d8:	bl	14ec0 <__assert_fail@plt+0x3b20>
   149dc:	push	{fp, lr}
   149e0:	mov	fp, sp
   149e4:	cmp	r1, #0
   149e8:	orreq	r1, r1, #1
   149ec:	bl	16480 <__assert_fail@plt+0x50e0>
   149f0:	cmp	r0, #0
   149f4:	popne	{fp, pc}
   149f8:	bl	14ec0 <__assert_fail@plt+0x3b20>
   149fc:	push	{fp, lr}
   14a00:	mov	fp, sp
   14a04:	clz	r3, r2
   14a08:	lsr	ip, r3, #5
   14a0c:	clz	r3, r1
   14a10:	lsr	r3, r3, #5
   14a14:	orrs	r3, r3, ip
   14a18:	movwne	r1, #1
   14a1c:	movwne	r2, #1
   14a20:	bl	16a0c <__assert_fail@plt+0x566c>
   14a24:	cmp	r0, #0
   14a28:	popne	{fp, pc}
   14a2c:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14a30:	push	{fp, lr}
   14a34:	mov	fp, sp
   14a38:	mov	r2, r1
   14a3c:	mov	r1, r0
   14a40:	mov	r0, #0
   14a44:	bl	16a0c <__assert_fail@plt+0x566c>
   14a48:	cmp	r0, #0
   14a4c:	popne	{fp, pc}
   14a50:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14a54:	push	{fp, lr}
   14a58:	mov	fp, sp
   14a5c:	mov	r2, r1
   14a60:	mov	r1, r0
   14a64:	clz	r0, r2
   14a68:	clz	r3, r1
   14a6c:	lsr	r0, r0, #5
   14a70:	lsr	r3, r3, #5
   14a74:	orrs	r0, r3, r0
   14a78:	movwne	r1, #1
   14a7c:	movwne	r2, #1
   14a80:	mov	r0, #0
   14a84:	bl	16a0c <__assert_fail@plt+0x566c>
   14a88:	cmp	r0, #0
   14a8c:	popne	{fp, pc}
   14a90:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14a94:	push	{r4, r5, r6, sl, fp, lr}
   14a98:	add	fp, sp, #16
   14a9c:	ldr	r5, [r1]
   14aa0:	mov	r4, r1
   14aa4:	mov	r6, r0
   14aa8:	cmp	r0, #0
   14aac:	beq	14ac4 <__assert_fail@plt+0x3724>
   14ab0:	mov	r0, #1
   14ab4:	add	r0, r0, r5, lsr #1
   14ab8:	adds	r5, r5, r0
   14abc:	bcc	14acc <__assert_fail@plt+0x372c>
   14ac0:	b	14b08 <__assert_fail@plt+0x3768>
   14ac4:	cmp	r5, #0
   14ac8:	movweq	r5, #64	; 0x40
   14acc:	mov	r0, r6
   14ad0:	mov	r1, r5
   14ad4:	mov	r2, #1
   14ad8:	bl	16a0c <__assert_fail@plt+0x566c>
   14adc:	cmp	r5, #0
   14ae0:	mov	r1, r5
   14ae4:	movwne	r1, #1
   14ae8:	cmp	r0, #0
   14aec:	bne	14b00 <__assert_fail@plt+0x3760>
   14af0:	clz	r2, r6
   14af4:	lsr	r2, r2, #5
   14af8:	orrs	r1, r2, r1
   14afc:	bne	14b08 <__assert_fail@plt+0x3768>
   14b00:	str	r5, [r4]
   14b04:	pop	{r4, r5, r6, sl, fp, pc}
   14b08:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14b0c:	push	{r4, r5, r6, r7, fp, lr}
   14b10:	add	fp, sp, #16
   14b14:	ldr	r5, [r1]
   14b18:	mov	r6, r2
   14b1c:	mov	r4, r1
   14b20:	mov	r7, r0
   14b24:	cmp	r0, #0
   14b28:	beq	14b40 <__assert_fail@plt+0x37a0>
   14b2c:	mov	r0, #1
   14b30:	add	r0, r0, r5, lsr #1
   14b34:	adds	r5, r5, r0
   14b38:	bcc	14b58 <__assert_fail@plt+0x37b8>
   14b3c:	b	14b8c <__assert_fail@plt+0x37ec>
   14b40:	cmp	r5, #0
   14b44:	bne	14b58 <__assert_fail@plt+0x37b8>
   14b48:	mov	r0, #64	; 0x40
   14b4c:	cmp	r6, #64	; 0x40
   14b50:	udiv	r5, r0, r6
   14b54:	addhi	r5, r5, #1
   14b58:	mov	r0, r7
   14b5c:	mov	r1, r5
   14b60:	mov	r2, r6
   14b64:	bl	16a0c <__assert_fail@plt+0x566c>
   14b68:	cmp	r0, #0
   14b6c:	bne	14b84 <__assert_fail@plt+0x37e4>
   14b70:	cmp	r7, #0
   14b74:	beq	14b8c <__assert_fail@plt+0x37ec>
   14b78:	cmp	r6, #0
   14b7c:	cmpne	r5, #0
   14b80:	bne	14b8c <__assert_fail@plt+0x37ec>
   14b84:	str	r5, [r4]
   14b88:	pop	{r4, r5, r6, r7, fp, pc}
   14b8c:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14b90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b94:	add	fp, sp, #24
   14b98:	mov	r8, r1
   14b9c:	ldr	r1, [r1]
   14ba0:	mov	r5, r0
   14ba4:	add	r0, r1, r1, asr #1
   14ba8:	cmp	r0, r1
   14bac:	mvnvs	r0, #-2147483648	; 0x80000000
   14bb0:	cmp	r0, r3
   14bb4:	mov	r7, r0
   14bb8:	movgt	r7, r3
   14bbc:	cmn	r3, #1
   14bc0:	movle	r7, r0
   14bc4:	ldr	r0, [fp, #8]
   14bc8:	cmn	r0, #1
   14bcc:	ble	14bf4 <__assert_fail@plt+0x3854>
   14bd0:	cmp	r0, #0
   14bd4:	beq	14c48 <__assert_fail@plt+0x38a8>
   14bd8:	cmn	r7, #1
   14bdc:	ble	14c1c <__assert_fail@plt+0x387c>
   14be0:	mvn	r4, #-2147483648	; 0x80000000
   14be4:	udiv	r6, r4, r0
   14be8:	cmp	r6, r7
   14bec:	bge	14c48 <__assert_fail@plt+0x38a8>
   14bf0:	b	14c58 <__assert_fail@plt+0x38b8>
   14bf4:	cmn	r7, #1
   14bf8:	ble	14c38 <__assert_fail@plt+0x3898>
   14bfc:	cmn	r0, #1
   14c00:	beq	14c48 <__assert_fail@plt+0x38a8>
   14c04:	mov	r6, #-2147483648	; 0x80000000
   14c08:	mvn	r4, #-2147483648	; 0x80000000
   14c0c:	sdiv	r6, r6, r0
   14c10:	cmp	r6, r7
   14c14:	bge	14c48 <__assert_fail@plt+0x38a8>
   14c18:	b	14c58 <__assert_fail@plt+0x38b8>
   14c1c:	beq	14c48 <__assert_fail@plt+0x38a8>
   14c20:	mov	r6, #-2147483648	; 0x80000000
   14c24:	mvn	r4, #-2147483648	; 0x80000000
   14c28:	sdiv	r6, r6, r7
   14c2c:	cmp	r6, r0
   14c30:	bge	14c48 <__assert_fail@plt+0x38a8>
   14c34:	b	14c58 <__assert_fail@plt+0x38b8>
   14c38:	mvn	r4, #-2147483648	; 0x80000000
   14c3c:	sdiv	r6, r4, r0
   14c40:	cmp	r7, r6
   14c44:	blt	14c58 <__assert_fail@plt+0x38b8>
   14c48:	mul	r6, r7, r0
   14c4c:	mov	r4, #64	; 0x40
   14c50:	cmp	r6, #63	; 0x3f
   14c54:	bgt	14c60 <__assert_fail@plt+0x38c0>
   14c58:	sdiv	r7, r4, r0
   14c5c:	mul	r6, r7, r0
   14c60:	cmp	r5, #0
   14c64:	moveq	r4, #0
   14c68:	streq	r4, [r8]
   14c6c:	sub	r4, r7, r1
   14c70:	cmp	r4, r2
   14c74:	bge	14d20 <__assert_fail@plt+0x3980>
   14c78:	add	r7, r1, r2
   14c7c:	mov	r6, #0
   14c80:	mov	r2, #0
   14c84:	cmp	r7, r3
   14c88:	movwgt	r6, #1
   14c8c:	cmn	r3, #1
   14c90:	movwgt	r2, #1
   14c94:	cmp	r7, r1
   14c98:	bvs	14d54 <__assert_fail@plt+0x39b4>
   14c9c:	ands	r1, r2, r6
   14ca0:	bne	14d54 <__assert_fail@plt+0x39b4>
   14ca4:	cmn	r0, #1
   14ca8:	ble	14cd0 <__assert_fail@plt+0x3930>
   14cac:	cmp	r0, #0
   14cb0:	beq	14d1c <__assert_fail@plt+0x397c>
   14cb4:	cmn	r7, #1
   14cb8:	ble	14cf4 <__assert_fail@plt+0x3954>
   14cbc:	mvn	r1, #-2147483648	; 0x80000000
   14cc0:	udiv	r1, r1, r0
   14cc4:	cmp	r1, r7
   14cc8:	bge	14d1c <__assert_fail@plt+0x397c>
   14ccc:	b	14d54 <__assert_fail@plt+0x39b4>
   14cd0:	cmn	r7, #1
   14cd4:	ble	14d0c <__assert_fail@plt+0x396c>
   14cd8:	cmn	r0, #1
   14cdc:	beq	14d1c <__assert_fail@plt+0x397c>
   14ce0:	mov	r1, #-2147483648	; 0x80000000
   14ce4:	sdiv	r1, r1, r0
   14ce8:	cmp	r1, r7
   14cec:	bge	14d1c <__assert_fail@plt+0x397c>
   14cf0:	b	14d54 <__assert_fail@plt+0x39b4>
   14cf4:	beq	14d1c <__assert_fail@plt+0x397c>
   14cf8:	mov	r1, #-2147483648	; 0x80000000
   14cfc:	sdiv	r1, r1, r7
   14d00:	cmp	r1, r0
   14d04:	bge	14d1c <__assert_fail@plt+0x397c>
   14d08:	b	14d54 <__assert_fail@plt+0x39b4>
   14d0c:	mvn	r1, #-2147483648	; 0x80000000
   14d10:	sdiv	r1, r1, r0
   14d14:	cmp	r7, r1
   14d18:	blt	14d54 <__assert_fail@plt+0x39b4>
   14d1c:	mul	r6, r7, r0
   14d20:	mov	r0, r5
   14d24:	mov	r1, r6
   14d28:	bl	16480 <__assert_fail@plt+0x50e0>
   14d2c:	cmp	r6, #0
   14d30:	movwne	r6, #1
   14d34:	cmp	r0, #0
   14d38:	bne	14d4c <__assert_fail@plt+0x39ac>
   14d3c:	clz	r1, r5
   14d40:	lsr	r1, r1, #5
   14d44:	orrs	r1, r1, r6
   14d48:	bne	14d54 <__assert_fail@plt+0x39b4>
   14d4c:	str	r7, [r8]
   14d50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d54:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14d58:	push	{fp, lr}
   14d5c:	mov	fp, sp
   14d60:	mov	r1, #1
   14d64:	bl	163fc <__assert_fail@plt+0x505c>
   14d68:	cmp	r0, #0
   14d6c:	popne	{fp, pc}
   14d70:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14d74:	push	{fp, lr}
   14d78:	mov	fp, sp
   14d7c:	bl	163fc <__assert_fail@plt+0x505c>
   14d80:	cmp	r0, #0
   14d84:	popne	{fp, pc}
   14d88:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14d8c:	push	{fp, lr}
   14d90:	mov	fp, sp
   14d94:	mov	r1, #1
   14d98:	bl	163fc <__assert_fail@plt+0x505c>
   14d9c:	cmp	r0, #0
   14da0:	popne	{fp, pc}
   14da4:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14da8:	push	{fp, lr}
   14dac:	mov	fp, sp
   14db0:	bl	163fc <__assert_fail@plt+0x505c>
   14db4:	cmp	r0, #0
   14db8:	popne	{fp, pc}
   14dbc:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14dc0:	push	{r4, r5, r6, sl, fp, lr}
   14dc4:	add	fp, sp, #16
   14dc8:	mov	r5, r0
   14dcc:	mov	r0, r1
   14dd0:	mov	r4, r1
   14dd4:	bl	16450 <__assert_fail@plt+0x50b0>
   14dd8:	cmp	r0, #0
   14ddc:	beq	14df8 <__assert_fail@plt+0x3a58>
   14de0:	mov	r1, r5
   14de4:	mov	r2, r4
   14de8:	mov	r6, r0
   14dec:	bl	11130 <memcpy@plt>
   14df0:	mov	r0, r6
   14df4:	pop	{r4, r5, r6, sl, fp, pc}
   14df8:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14dfc:	push	{r4, r5, r6, sl, fp, lr}
   14e00:	add	fp, sp, #16
   14e04:	mov	r5, r0
   14e08:	mov	r0, r1
   14e0c:	mov	r4, r1
   14e10:	bl	16450 <__assert_fail@plt+0x50b0>
   14e14:	cmp	r0, #0
   14e18:	beq	14e34 <__assert_fail@plt+0x3a94>
   14e1c:	mov	r1, r5
   14e20:	mov	r2, r4
   14e24:	mov	r6, r0
   14e28:	bl	11130 <memcpy@plt>
   14e2c:	mov	r0, r6
   14e30:	pop	{r4, r5, r6, sl, fp, pc}
   14e34:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14e38:	push	{r4, r5, r6, sl, fp, lr}
   14e3c:	add	fp, sp, #16
   14e40:	mov	r5, r0
   14e44:	add	r0, r1, #1
   14e48:	mov	r4, r1
   14e4c:	bl	16450 <__assert_fail@plt+0x50b0>
   14e50:	cmp	r0, #0
   14e54:	beq	14e7c <__assert_fail@plt+0x3adc>
   14e58:	mov	r6, r0
   14e5c:	mov	r0, #0
   14e60:	mov	r1, r5
   14e64:	mov	r2, r4
   14e68:	strb	r0, [r6, r4]
   14e6c:	mov	r0, r6
   14e70:	bl	11130 <memcpy@plt>
   14e74:	mov	r0, r6
   14e78:	pop	{r4, r5, r6, sl, fp, pc}
   14e7c:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14e80:	push	{r4, r5, r6, sl, fp, lr}
   14e84:	add	fp, sp, #16
   14e88:	mov	r4, r0
   14e8c:	bl	11280 <strlen@plt>
   14e90:	add	r5, r0, #1
   14e94:	mov	r0, r5
   14e98:	bl	16450 <__assert_fail@plt+0x50b0>
   14e9c:	cmp	r0, #0
   14ea0:	beq	14ebc <__assert_fail@plt+0x3b1c>
   14ea4:	mov	r1, r4
   14ea8:	mov	r2, r5
   14eac:	mov	r6, r0
   14eb0:	bl	11130 <memcpy@plt>
   14eb4:	mov	r0, r6
   14eb8:	pop	{r4, r5, r6, sl, fp, pc}
   14ebc:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14ec0:	push	{fp, lr}
   14ec4:	mov	fp, sp
   14ec8:	movw	r0, #33052	; 0x811c
   14ecc:	movw	r1, #30556	; 0x775c
   14ed0:	mov	r2, #5
   14ed4:	movt	r0, #2
   14ed8:	movt	r1, #1
   14edc:	ldr	r4, [r0]
   14ee0:	mov	r0, #0
   14ee4:	bl	1116c <dcgettext@plt>
   14ee8:	movw	r2, #29479	; 0x7327
   14eec:	mov	r3, r0
   14ef0:	mov	r0, r4
   14ef4:	mov	r1, #0
   14ef8:	movt	r2, #1
   14efc:	bl	111fc <error@plt>
   14f00:	bl	1137c <abort@plt>
   14f04:	push	{r4, sl, fp, lr}
   14f08:	add	fp, sp, #8
   14f0c:	bl	167e8 <__assert_fail@plt+0x5448>
   14f10:	mov	r4, r0
   14f14:	cmn	r0, #1
   14f18:	bne	14f2c <__assert_fail@plt+0x3b8c>
   14f1c:	bl	11298 <__errno_location@plt>
   14f20:	ldr	r0, [r0]
   14f24:	cmp	r0, #12
   14f28:	beq	14f34 <__assert_fail@plt+0x3b94>
   14f2c:	mov	r0, r4
   14f30:	pop	{r4, sl, fp, pc}
   14f34:	bl	14ec0 <__assert_fail@plt+0x3b20>
   14f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f3c:	add	fp, sp, #28
   14f40:	sub	sp, sp, #20
   14f44:	cmp	r2, #37	; 0x25
   14f48:	bcs	1573c <__assert_fail@plt+0x439c>
   14f4c:	ldr	r9, [fp, #8]
   14f50:	mov	r5, r2
   14f54:	mov	r4, r1
   14f58:	mov	r7, r0
   14f5c:	str	r3, [sp, #12]
   14f60:	bl	11298 <__errno_location@plt>
   14f64:	mov	r8, r0
   14f68:	mov	r0, #0
   14f6c:	str	r0, [r8]
   14f70:	bl	1125c <__ctype_b_loc@plt>
   14f74:	ldr	r1, [r0]
   14f78:	mov	r2, r7
   14f7c:	ldrb	r0, [r2], #1
   14f80:	add	r3, r1, r0, lsl #1
   14f84:	ldrb	r3, [r3, #1]
   14f88:	tst	r3, #32
   14f8c:	bne	14f7c <__assert_fail@plt+0x3bdc>
   14f90:	add	r6, sp, #16
   14f94:	cmp	r4, #0
   14f98:	mov	sl, #4
   14f9c:	movne	r6, r4
   14fa0:	cmp	r0, #45	; 0x2d
   14fa4:	beq	15730 <__assert_fail@plt+0x4390>
   14fa8:	mov	r0, r7
   14fac:	mov	r1, r6
   14fb0:	mov	r2, r5
   14fb4:	bl	11274 <strtoul@plt>
   14fb8:	ldr	r5, [r6]
   14fbc:	cmp	r5, r7
   14fc0:	beq	14fec <__assert_fail@plt+0x3c4c>
   14fc4:	mov	r4, r0
   14fc8:	ldr	r0, [r8]
   14fcc:	cmp	r0, #0
   14fd0:	beq	15018 <__assert_fail@plt+0x3c78>
   14fd4:	cmp	r0, #34	; 0x22
   14fd8:	bne	15730 <__assert_fail@plt+0x4390>
   14fdc:	mov	sl, #1
   14fe0:	cmp	r9, #0
   14fe4:	bne	15024 <__assert_fail@plt+0x3c84>
   14fe8:	b	15728 <__assert_fail@plt+0x4388>
   14fec:	cmp	r9, #0
   14ff0:	ldrbne	r1, [r7]
   14ff4:	cmpne	r1, #0
   14ff8:	beq	15730 <__assert_fail@plt+0x4390>
   14ffc:	mov	r0, r9
   15000:	bl	1128c <strchr@plt>
   15004:	cmp	r0, #0
   15008:	beq	15730 <__assert_fail@plt+0x4390>
   1500c:	mov	r4, #1
   15010:	mov	sl, #0
   15014:	b	15024 <__assert_fail@plt+0x3c84>
   15018:	mov	sl, r0
   1501c:	cmp	r9, #0
   15020:	beq	15728 <__assert_fail@plt+0x4388>
   15024:	ldrb	r7, [r5]
   15028:	cmp	r7, #0
   1502c:	beq	15728 <__assert_fail@plt+0x4388>
   15030:	mov	r0, r9
   15034:	mov	r1, r7
   15038:	bl	1128c <strchr@plt>
   1503c:	cmp	r0, #0
   15040:	beq	152bc <__assert_fail@plt+0x3f1c>
   15044:	sub	r0, r7, #69	; 0x45
   15048:	mov	lr, #1
   1504c:	mov	r8, #1024	; 0x400
   15050:	cmp	r0, #47	; 0x2f
   15054:	bhi	15170 <__assert_fail@plt+0x3dd0>
   15058:	add	r1, pc, #0
   1505c:	ldr	pc, [r1, r0, lsl #2]
   15060:	andeq	r5, r1, r0, lsr #2
   15064:	andeq	r5, r1, r0, ror r1
   15068:	andeq	r5, r1, r0, lsr #2
   1506c:	andeq	r5, r1, r0, ror r1
   15070:	andeq	r5, r1, r0, ror r1
   15074:	andeq	r5, r1, r0, ror r1
   15078:	andeq	r5, r1, r0, lsr #2
   1507c:	andeq	r5, r1, r0, ror r1
   15080:	andeq	r5, r1, r0, lsr #2
   15084:	andeq	r5, r1, r0, ror r1
   15088:	andeq	r5, r1, r0, ror r1
   1508c:	andeq	r5, r1, r0, lsr #2
   15090:	andeq	r5, r1, r0, ror r1
   15094:	andeq	r5, r1, r0, ror r1
   15098:	andeq	r5, r1, r0, ror r1
   1509c:	andeq	r5, r1, r0, lsr #2
   150a0:	andeq	r5, r1, r0, ror r1
   150a4:	andeq	r5, r1, r0, ror r1
   150a8:	andeq	r5, r1, r0, ror r1
   150ac:	andeq	r5, r1, r0, ror r1
   150b0:	andeq	r5, r1, r0, lsr #2
   150b4:	andeq	r5, r1, r0, lsr #2
   150b8:	andeq	r5, r1, r0, ror r1
   150bc:	andeq	r5, r1, r0, ror r1
   150c0:	andeq	r5, r1, r0, ror r1
   150c4:	andeq	r5, r1, r0, ror r1
   150c8:	andeq	r5, r1, r0, ror r1
   150cc:	andeq	r5, r1, r0, ror r1
   150d0:	andeq	r5, r1, r0, ror r1
   150d4:	andeq	r5, r1, r0, ror r1
   150d8:	andeq	r5, r1, r0, ror r1
   150dc:	andeq	r5, r1, r0, ror r1
   150e0:	andeq	r5, r1, r0, ror r1
   150e4:	andeq	r5, r1, r0, ror r1
   150e8:	andeq	r5, r1, r0, lsr #2
   150ec:	andeq	r5, r1, r0, ror r1
   150f0:	andeq	r5, r1, r0, ror r1
   150f4:	andeq	r5, r1, r0, ror r1
   150f8:	andeq	r5, r1, r0, lsr #2
   150fc:	andeq	r5, r1, r0, ror r1
   15100:	andeq	r5, r1, r0, lsr #2
   15104:	andeq	r5, r1, r0, ror r1
   15108:	andeq	r5, r1, r0, ror r1
   1510c:	andeq	r5, r1, r0, ror r1
   15110:	andeq	r5, r1, r0, ror r1
   15114:	andeq	r5, r1, r0, ror r1
   15118:	andeq	r5, r1, r0, ror r1
   1511c:	andeq	r5, r1, r0, lsr #2
   15120:	mov	r0, r9
   15124:	mov	r1, #48	; 0x30
   15128:	bl	1128c <strchr@plt>
   1512c:	cmp	r0, #0
   15130:	beq	1516c <__assert_fail@plt+0x3dcc>
   15134:	ldrb	r0, [r5, #1]
   15138:	cmp	r0, #66	; 0x42
   1513c:	cmpne	r0, #68	; 0x44
   15140:	bne	15150 <__assert_fail@plt+0x3db0>
   15144:	mov	lr, #2
   15148:	mov	r8, #1000	; 0x3e8
   1514c:	b	15170 <__assert_fail@plt+0x3dd0>
   15150:	cmp	r0, #105	; 0x69
   15154:	bne	1516c <__assert_fail@plt+0x3dcc>
   15158:	ldrb	r0, [r5, #2]
   1515c:	mov	lr, #1
   15160:	cmp	r0, #66	; 0x42
   15164:	movweq	lr, #3
   15168:	b	15170 <__assert_fail@plt+0x3dd0>
   1516c:	mov	lr, #1
   15170:	sub	r1, r7, #66	; 0x42
   15174:	cmp	r1, #53	; 0x35
   15178:	bhi	152bc <__assert_fail@plt+0x3f1c>
   1517c:	add	r2, pc, #4
   15180:	mov	r0, #0
   15184:	ldr	pc, [r2, r1, lsl #2]
   15188:	andeq	r5, r1, r0, ror r4
   1518c:			; <UNDEFINED> instruction: 0x000152bc
   15190:			; <UNDEFINED> instruction: 0x000152bc
   15194:	andeq	r5, r1, ip, lsl #9
   15198:			; <UNDEFINED> instruction: 0x000152bc
   1519c:	andeq	r5, r1, r0, ror #4
   151a0:			; <UNDEFINED> instruction: 0x000152bc
   151a4:			; <UNDEFINED> instruction: 0x000152bc
   151a8:			; <UNDEFINED> instruction: 0x000152bc
   151ac:	andeq	r5, r1, r8, asr #5
   151b0:			; <UNDEFINED> instruction: 0x000152bc
   151b4:	andeq	r5, r1, r8, ror #5
   151b8:			; <UNDEFINED> instruction: 0x000152bc
   151bc:			; <UNDEFINED> instruction: 0x000152bc
   151c0:	andeq	r5, r1, r4, asr #10
   151c4:			; <UNDEFINED> instruction: 0x000152bc
   151c8:			; <UNDEFINED> instruction: 0x000152bc
   151cc:			; <UNDEFINED> instruction: 0x000152bc
   151d0:	andeq	r5, r1, r8, lsr #6
   151d4:			; <UNDEFINED> instruction: 0x000152bc
   151d8:			; <UNDEFINED> instruction: 0x000152bc
   151dc:			; <UNDEFINED> instruction: 0x000152bc
   151e0:			; <UNDEFINED> instruction: 0x000152bc
   151e4:	andeq	r5, r1, r0, ror #11
   151e8:	muleq	r1, ip, r3
   151ec:			; <UNDEFINED> instruction: 0x000152bc
   151f0:			; <UNDEFINED> instruction: 0x000152bc
   151f4:			; <UNDEFINED> instruction: 0x000152bc
   151f8:			; <UNDEFINED> instruction: 0x000152bc
   151fc:			; <UNDEFINED> instruction: 0x000152bc
   15200:			; <UNDEFINED> instruction: 0x000152bc
   15204:			; <UNDEFINED> instruction: 0x000152bc
   15208:	ldrdeq	r5, [r1], -r8
   1520c:	andeq	r5, r1, r0, lsl r7
   15210:			; <UNDEFINED> instruction: 0x000152bc
   15214:			; <UNDEFINED> instruction: 0x000152bc
   15218:			; <UNDEFINED> instruction: 0x000152bc
   1521c:	andeq	r5, r1, r0, ror #4
   15220:			; <UNDEFINED> instruction: 0x000152bc
   15224:			; <UNDEFINED> instruction: 0x000152bc
   15228:			; <UNDEFINED> instruction: 0x000152bc
   1522c:	andeq	r5, r1, r8, asr #5
   15230:			; <UNDEFINED> instruction: 0x000152bc
   15234:	andeq	r5, r1, r8, ror #5
   15238:			; <UNDEFINED> instruction: 0x000152bc
   1523c:			; <UNDEFINED> instruction: 0x000152bc
   15240:			; <UNDEFINED> instruction: 0x000152bc
   15244:			; <UNDEFINED> instruction: 0x000152bc
   15248:			; <UNDEFINED> instruction: 0x000152bc
   1524c:			; <UNDEFINED> instruction: 0x000152bc
   15250:	andeq	r5, r1, r8, lsr #6
   15254:			; <UNDEFINED> instruction: 0x000152bc
   15258:			; <UNDEFINED> instruction: 0x000152bc
   1525c:	strdeq	r5, [r1], -ip
   15260:	mvn	r0, #0
   15264:	mul	r1, r4, r8
   15268:	mov	r7, #0
   1526c:	udiv	r0, r0, r8
   15270:	cmp	r0, r4
   15274:	mvncc	r1, #0
   15278:	mul	r2, r1, r8
   1527c:	cmp	r0, r1
   15280:	mvncc	r2, #0
   15284:	cmp	r0, r2
   15288:	mul	r3, r2, r8
   1528c:	mov	r2, #0
   15290:	mvncc	r3, #0
   15294:	movwcc	r7, #1
   15298:	cmp	r0, r1
   1529c:	mov	r1, #0
   152a0:	movwcc	r1, #1
   152a4:	cmp	r0, r4
   152a8:	mov	r4, r3
   152ac:	movwcc	r2, #1
   152b0:	orr	r0, r2, r1
   152b4:	orr	r0, r0, r7
   152b8:	b	15710 <__assert_fail@plt+0x4370>
   152bc:	ldr	r0, [sp, #12]
   152c0:	orr	sl, sl, #2
   152c4:	b	1572c <__assert_fail@plt+0x438c>
   152c8:	mvn	r0, #0
   152cc:	mul	r1, r4, r8
   152d0:	udiv	r0, r0, r8
   152d4:	cmp	r0, r4
   152d8:	mov	r0, #0
   152dc:	mvncc	r1, #0
   152e0:	movwcc	r0, #1
   152e4:	b	1570c <__assert_fail@plt+0x436c>
   152e8:	mvn	r0, #0
   152ec:	mul	r1, r4, r8
   152f0:	mov	r3, #0
   152f4:	udiv	r0, r0, r8
   152f8:	cmp	r0, r4
   152fc:	mvncc	r1, #0
   15300:	cmp	r0, r1
   15304:	mul	r2, r1, r8
   15308:	mov	r1, #0
   1530c:	mvncc	r2, #0
   15310:	movwcc	r3, #1
   15314:	cmp	r0, r4
   15318:	movwcc	r1, #1
   1531c:	mov	r4, r2
   15320:	orr	r0, r1, r3
   15324:	b	15710 <__assert_fail@plt+0x4370>
   15328:	mvn	r0, #0
   1532c:	mul	r1, r4, r8
   15330:	mov	r7, #0
   15334:	udiv	r0, r0, r8
   15338:	cmp	r0, r4
   1533c:	mvncc	r1, #0
   15340:	mul	r2, r1, r8
   15344:	cmp	r0, r1
   15348:	mvncc	r2, #0
   1534c:	mul	r3, r2, r8
   15350:	cmp	r0, r2
   15354:	mvncc	r3, #0
   15358:	cmp	r0, r3
   1535c:	mul	ip, r3, r8
   15360:	mov	r3, #0
   15364:	mvncc	ip, #0
   15368:	movwcc	r7, #1
   1536c:	cmp	r0, r2
   15370:	mov	r2, #0
   15374:	movwcc	r2, #1
   15378:	cmp	r0, r1
   1537c:	mov	r1, #0
   15380:	movwcc	r1, #1
   15384:	cmp	r0, r4
   15388:	movwcc	r3, #1
   1538c:	orr	r0, r3, r1
   15390:	orr	r0, r0, r2
   15394:	orr	r0, r0, r7
   15398:	b	155d8 <__assert_fail@plt+0x4238>
   1539c:	mvn	r0, #0
   153a0:	str	lr, [sp, #8]
   153a4:	mul	lr, r4, r8
   153a8:	udiv	r0, r0, r8
   153ac:	cmp	r0, r4
   153b0:	mvncc	lr, #0
   153b4:	mul	r9, lr, r8
   153b8:	cmp	r0, lr
   153bc:	mvncc	r9, #0
   153c0:	mul	r7, r9, r8
   153c4:	cmp	r0, r9
   153c8:	mvncc	r7, #0
   153cc:	mul	r3, r7, r8
   153d0:	cmp	r0, r7
   153d4:	mvncc	r3, #0
   153d8:	mul	r1, r3, r8
   153dc:	cmp	r0, r3
   153e0:	mvncc	r1, #0
   153e4:	mul	r2, r1, r8
   153e8:	cmp	r0, r1
   153ec:	mvncc	r2, #0
   153f0:	mul	ip, r2, r8
   153f4:	cmp	r0, r2
   153f8:	mov	r8, #0
   153fc:	mov	r2, #0
   15400:	mvncc	ip, #0
   15404:	movwcc	r8, #1
   15408:	cmp	r0, r1
   1540c:	mov	r1, #0
   15410:	movwcc	r1, #1
   15414:	cmp	r0, r3
   15418:	mov	r3, #0
   1541c:	movwcc	r3, #1
   15420:	cmp	r0, r7
   15424:	mov	r7, #0
   15428:	movwcc	r7, #1
   1542c:	cmp	r0, r9
   15430:	mov	r9, #0
   15434:	movwcc	r9, #1
   15438:	cmp	r0, lr
   1543c:	mov	lr, #0
   15440:	movwcc	lr, #1
   15444:	cmp	r0, r4
   15448:	movwcc	r2, #1
   1544c:	orr	r0, r2, lr
   15450:	ldr	lr, [sp, #8]
   15454:	orr	r0, r0, r9
   15458:	orr	r0, r0, r7
   1545c:	orr	r0, r0, r3
   15460:	orr	r0, r0, r1
   15464:	orr	r0, r0, r8
   15468:	and	r0, r0, #1
   1546c:	b	155d8 <__assert_fail@plt+0x4238>
   15470:	mov	r1, #0
   15474:	lsr	r0, r4, #22
   15478:	cmp	r1, r4, lsr #22
   1547c:	lsl	r4, r4, #10
   15480:	movwne	r0, #1
   15484:	mvnne	r4, #0
   15488:	b	15710 <__assert_fail@plt+0x4370>
   1548c:	mvn	r0, #0
   15490:	mul	ip, r4, r8
   15494:	str	lr, [sp, #8]
   15498:	mov	r9, #0
   1549c:	udiv	r0, r0, r8
   154a0:	cmp	r0, r4
   154a4:	mvncc	ip, #0
   154a8:	mul	r2, ip, r8
   154ac:	cmp	r0, ip
   154b0:	mvncc	r2, #0
   154b4:	mul	r3, r2, r8
   154b8:	cmp	r0, r2
   154bc:	mvncc	r3, #0
   154c0:	mul	r7, r3, r8
   154c4:	cmp	r0, r3
   154c8:	mvncc	r7, #0
   154cc:	mul	r1, r7, r8
   154d0:	cmp	r0, r7
   154d4:	mvncc	r1, #0
   154d8:	mul	lr, r1, r8
   154dc:	cmp	r0, r1
   154e0:	mov	r8, #0
   154e4:	mov	r1, #0
   154e8:	mvncc	lr, #0
   154ec:	movwcc	r8, #1
   154f0:	cmp	r0, r7
   154f4:	mov	r7, #0
   154f8:	movwcc	r7, #1
   154fc:	cmp	r0, r3
   15500:	mov	r3, #0
   15504:	movwcc	r3, #1
   15508:	cmp	r0, r2
   1550c:	mov	r2, #0
   15510:	movwcc	r2, #1
   15514:	cmp	r0, ip
   15518:	movwcc	r1, #1
   1551c:	cmp	r0, r4
   15520:	mov	r4, lr
   15524:	ldr	lr, [sp, #8]
   15528:	movwcc	r9, #1
   1552c:	orr	r0, r9, r1
   15530:	orr	r0, r0, r2
   15534:	orr	r0, r0, r3
   15538:	orr	r0, r0, r7
   1553c:	orr	r0, r0, r8
   15540:	b	15710 <__assert_fail@plt+0x4370>
   15544:	mvn	r0, #0
   15548:	mul	r1, r4, r8
   1554c:	udiv	r0, r0, r8
   15550:	cmp	r0, r4
   15554:	mvncc	r1, #0
   15558:	mul	r2, r1, r8
   1555c:	cmp	r0, r1
   15560:	mvncc	r2, #0
   15564:	mul	r3, r2, r8
   15568:	cmp	r0, r2
   1556c:	mvncc	r3, #0
   15570:	mul	r7, r3, r8
   15574:	cmp	r0, r3
   15578:	mvncc	r7, #0
   1557c:	mul	ip, r7, r8
   15580:	cmp	r0, r7
   15584:	mov	r8, lr
   15588:	mov	lr, #0
   1558c:	mov	r7, #0
   15590:	mvncc	ip, #0
   15594:	movwcc	lr, #1
   15598:	cmp	r0, r3
   1559c:	mov	r3, #0
   155a0:	movwcc	r3, #1
   155a4:	cmp	r0, r2
   155a8:	mov	r2, #0
   155ac:	movwcc	r2, #1
   155b0:	cmp	r0, r1
   155b4:	mov	r1, #0
   155b8:	movwcc	r1, #1
   155bc:	cmp	r0, r4
   155c0:	movwcc	r7, #1
   155c4:	orr	r0, r7, r1
   155c8:	orr	r0, r0, r2
   155cc:	orr	r0, r0, r3
   155d0:	orr	r0, r0, lr
   155d4:	mov	lr, r8
   155d8:	mov	r4, ip
   155dc:	b	15710 <__assert_fail@plt+0x4370>
   155e0:	mvn	r0, #0
   155e4:	str	lr, [sp, #8]
   155e8:	mul	lr, r4, r8
   155ec:	udiv	r0, r0, r8
   155f0:	cmp	r0, r4
   155f4:	mvncc	lr, #0
   155f8:	mul	r9, lr, r8
   155fc:	cmp	r0, lr
   15600:	mvncc	r9, #0
   15604:	mul	r7, r9, r8
   15608:	cmp	r0, r9
   1560c:	mvncc	r7, #0
   15610:	mul	r3, r7, r8
   15614:	cmp	r0, r7
   15618:	mvncc	r3, #0
   1561c:	mul	r1, r3, r8
   15620:	cmp	r0, r3
   15624:	mvncc	r1, #0
   15628:	mul	r2, r1, r8
   1562c:	cmp	r0, r1
   15630:	mvncc	r2, #0
   15634:	mul	ip, r2, r8
   15638:	cmp	r0, r2
   1563c:	mvncc	ip, #0
   15640:	mul	r8, ip, r8
   15644:	cmp	r0, ip
   15648:	mov	ip, #0
   1564c:	mvncc	r8, #0
   15650:	str	r8, [sp, #4]
   15654:	mov	r8, #0
   15658:	movwcc	r8, #1
   1565c:	cmp	r0, r2
   15660:	mov	r2, #0
   15664:	movwcc	r2, #1
   15668:	cmp	r0, r1
   1566c:	mov	r1, #0
   15670:	movwcc	r1, #1
   15674:	cmp	r0, r3
   15678:	mov	r3, #0
   1567c:	movwcc	r3, #1
   15680:	cmp	r0, r7
   15684:	mov	r7, #0
   15688:	movwcc	r7, #1
   1568c:	cmp	r0, r9
   15690:	mov	r9, #0
   15694:	movwcc	r9, #1
   15698:	cmp	r0, lr
   1569c:	mov	lr, #0
   156a0:	movwcc	lr, #1
   156a4:	cmp	r0, r4
   156a8:	ldr	r4, [sp, #4]
   156ac:	movwcc	ip, #1
   156b0:	orr	r0, ip, lr
   156b4:	ldr	lr, [sp, #8]
   156b8:	orr	r0, r0, r9
   156bc:	orr	r0, r0, r7
   156c0:	orr	r0, r0, r3
   156c4:	orr	r0, r0, r1
   156c8:	orr	r0, r0, r2
   156cc:	orr	r0, r0, r8
   156d0:	and	r0, r0, #1
   156d4:	b	15710 <__assert_fail@plt+0x4370>
   156d8:	movw	r0, #65535	; 0xffff
   156dc:	movt	r0, #63	; 0x3f
   156e0:	add	r1, r0, #4194304	; 0x400000
   156e4:	mov	r0, #0
   156e8:	cmp	r4, r1
   156ec:	lsl	r4, r4, #9
   156f0:	movwhi	r0, #1
   156f4:	mvnhi	r4, #0
   156f8:	b	15710 <__assert_fail@plt+0x4370>
   156fc:	lsl	r1, r4, #1
   15700:	cmp	r4, #0
   15704:	lsr	r0, r4, #31
   15708:	mvnlt	r1, #0
   1570c:	mov	r4, r1
   15710:	add	r1, r5, lr
   15714:	orr	sl, r0, sl
   15718:	str	r1, [r6]
   1571c:	ldrb	r1, [r5, lr]
   15720:	cmp	r1, #0
   15724:	orrne	sl, sl, #2
   15728:	ldr	r0, [sp, #12]
   1572c:	str	r4, [r0]
   15730:	mov	r0, sl
   15734:	sub	sp, fp, #28
   15738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1573c:	movw	r0, #30573	; 0x776d
   15740:	movw	r1, #30611	; 0x7793
   15744:	movw	r3, #30627	; 0x77a3
   15748:	mov	r2, #85	; 0x55
   1574c:	movt	r0, #1
   15750:	movt	r1, #1
   15754:	movt	r3, #1
   15758:	bl	113a0 <__assert_fail@plt>
   1575c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15760:	add	fp, sp, #28
   15764:	sub	sp, sp, #44	; 0x2c
   15768:	cmp	r2, #37	; 0x25
   1576c:	bcs	163dc <__assert_fail@plt+0x503c>
   15770:	ldr	sl, [fp, #8]
   15774:	mov	r6, r2
   15778:	mov	r7, r1
   1577c:	mov	r4, r0
   15780:	str	r3, [sp, #36]	; 0x24
   15784:	bl	11298 <__errno_location@plt>
   15788:	mov	r5, r0
   1578c:	mov	r0, #0
   15790:	str	r0, [r5]
   15794:	bl	1125c <__ctype_b_loc@plt>
   15798:	ldr	r1, [r0]
   1579c:	mov	r2, r4
   157a0:	ldrb	r0, [r2], #1
   157a4:	add	r3, r1, r0, lsl #1
   157a8:	ldrb	r3, [r3, #1]
   157ac:	tst	r3, #32
   157b0:	bne	157a0 <__assert_fail@plt+0x4400>
   157b4:	sub	r9, fp, #32
   157b8:	cmp	r7, #0
   157bc:	mov	r8, #4
   157c0:	movne	r9, r7
   157c4:	cmp	r0, #45	; 0x2d
   157c8:	beq	163d0 <__assert_fail@plt+0x5030>
   157cc:	mov	r0, r4
   157d0:	mov	r1, r9
   157d4:	mov	r2, r6
   157d8:	mov	r3, #0
   157dc:	bl	11148 <__strtoull_internal@plt>
   157e0:	mov	r7, r1
   157e4:	ldr	r1, [r9]
   157e8:	cmp	r1, r4
   157ec:	beq	15818 <__assert_fail@plt+0x4478>
   157f0:	mov	r6, r0
   157f4:	ldr	r0, [r5]
   157f8:	cmp	r0, #0
   157fc:	beq	15854 <__assert_fail@plt+0x44b4>
   15800:	cmp	r0, #34	; 0x22
   15804:	bne	163d0 <__assert_fail@plt+0x5030>
   15808:	mov	r8, #1
   1580c:	cmp	sl, #0
   15810:	bne	15860 <__assert_fail@plt+0x44c0>
   15814:	b	163c8 <__assert_fail@plt+0x5028>
   15818:	cmp	sl, #0
   1581c:	beq	163d0 <__assert_fail@plt+0x5030>
   15820:	mov	r5, r1
   15824:	ldrb	r1, [r4]
   15828:	cmp	r1, #0
   1582c:	beq	163d0 <__assert_fail@plt+0x5030>
   15830:	mov	r0, sl
   15834:	bl	1128c <strchr@plt>
   15838:	cmp	r0, #0
   1583c:	beq	163d0 <__assert_fail@plt+0x5030>
   15840:	mov	r1, r5
   15844:	mov	r8, #0
   15848:	mov	r6, #1
   1584c:	mov	r7, #0
   15850:	b	15860 <__assert_fail@plt+0x44c0>
   15854:	mov	r8, r0
   15858:	cmp	sl, #0
   1585c:	beq	163c8 <__assert_fail@plt+0x5028>
   15860:	ldrb	r4, [r1]
   15864:	cmp	r4, #0
   15868:	beq	163c8 <__assert_fail@plt+0x5028>
   1586c:	str	r1, [sp, #32]
   15870:	mov	r0, sl
   15874:	mov	r1, r4
   15878:	bl	1128c <strchr@plt>
   1587c:	cmp	r0, #0
   15880:	beq	15b48 <__assert_fail@plt+0x47a8>
   15884:	sub	r0, r4, #69	; 0x45
   15888:	mov	r1, #1
   1588c:	mov	r3, #0
   15890:	mov	r5, #1024	; 0x400
   15894:	cmp	r0, #47	; 0x2f
   15898:	str	r1, [sp, #28]
   1589c:	bhi	159a0 <__assert_fail@plt+0x4600>
   158a0:	add	r1, pc, #0
   158a4:	ldr	pc, [r1, r0, lsl #2]
   158a8:	andeq	r5, r1, r8, ror #18
   158ac:	andeq	r5, r1, r0, lsr #19
   158b0:	andeq	r5, r1, r8, ror #18
   158b4:	andeq	r5, r1, r0, lsr #19
   158b8:	andeq	r5, r1, r0, lsr #19
   158bc:	andeq	r5, r1, r0, lsr #19
   158c0:	andeq	r5, r1, r8, ror #18
   158c4:	andeq	r5, r1, r0, lsr #19
   158c8:	andeq	r5, r1, r8, ror #18
   158cc:	andeq	r5, r1, r0, lsr #19
   158d0:	andeq	r5, r1, r0, lsr #19
   158d4:	andeq	r5, r1, r8, ror #18
   158d8:	andeq	r5, r1, r0, lsr #19
   158dc:	andeq	r5, r1, r0, lsr #19
   158e0:	andeq	r5, r1, r0, lsr #19
   158e4:	andeq	r5, r1, r8, ror #18
   158e8:	andeq	r5, r1, r0, lsr #19
   158ec:	andeq	r5, r1, r0, lsr #19
   158f0:	andeq	r5, r1, r0, lsr #19
   158f4:	andeq	r5, r1, r0, lsr #19
   158f8:	andeq	r5, r1, r8, ror #18
   158fc:	andeq	r5, r1, r8, ror #18
   15900:	andeq	r5, r1, r0, lsr #19
   15904:	andeq	r5, r1, r0, lsr #19
   15908:	andeq	r5, r1, r0, lsr #19
   1590c:	andeq	r5, r1, r0, lsr #19
   15910:	andeq	r5, r1, r0, lsr #19
   15914:	andeq	r5, r1, r0, lsr #19
   15918:	andeq	r5, r1, r0, lsr #19
   1591c:	andeq	r5, r1, r0, lsr #19
   15920:	andeq	r5, r1, r0, lsr #19
   15924:	andeq	r5, r1, r0, lsr #19
   15928:	andeq	r5, r1, r0, lsr #19
   1592c:	andeq	r5, r1, r0, lsr #19
   15930:	andeq	r5, r1, r8, ror #18
   15934:	andeq	r5, r1, r0, lsr #19
   15938:	andeq	r5, r1, r0, lsr #19
   1593c:	andeq	r5, r1, r0, lsr #19
   15940:	andeq	r5, r1, r8, ror #18
   15944:	andeq	r5, r1, r0, lsr #19
   15948:	andeq	r5, r1, r8, ror #18
   1594c:	andeq	r5, r1, r0, lsr #19
   15950:	andeq	r5, r1, r0, lsr #19
   15954:	andeq	r5, r1, r0, lsr #19
   15958:	andeq	r5, r1, r0, lsr #19
   1595c:	andeq	r5, r1, r0, lsr #19
   15960:	andeq	r5, r1, r0, lsr #19
   15964:	andeq	r5, r1, r8, ror #18
   15968:	mov	r0, sl
   1596c:	mov	r1, #48	; 0x30
   15970:	bl	1128c <strchr@plt>
   15974:	cmp	r0, #0
   15978:	beq	1599c <__assert_fail@plt+0x45fc>
   1597c:	ldr	r1, [sp, #32]
   15980:	ldrb	r0, [r1, #1]
   15984:	cmp	r0, #66	; 0x42
   15988:	cmpne	r0, #68	; 0x44
   1598c:	bne	15b54 <__assert_fail@plt+0x47b4>
   15990:	mov	r5, #1000	; 0x3e8
   15994:	mov	r0, #2
   15998:	str	r0, [sp, #28]
   1599c:	mov	r3, #0
   159a0:	sub	r0, r4, #66	; 0x42
   159a4:	cmp	r0, #53	; 0x35
   159a8:	bhi	15b48 <__assert_fail@plt+0x47a8>
   159ac:	add	r1, pc, #0
   159b0:	ldr	pc, [r1, r0, lsl #2]
   159b4:	ldrdeq	r5, [r1], -r0
   159b8:	andeq	r5, r1, r8, asr #22
   159bc:	andeq	r5, r1, r8, asr #22
   159c0:	strdeq	r5, [r1], -r8
   159c4:	andeq	r5, r1, r8, asr #22
   159c8:	andeq	r5, r1, ip, lsl #21
   159cc:	andeq	r5, r1, r8, asr #22
   159d0:	andeq	r5, r1, r8, asr #22
   159d4:	andeq	r5, r1, r8, asr #22
   159d8:	andeq	r5, r1, r8, ror fp
   159dc:	andeq	r5, r1, r8, asr #22
   159e0:	andeq	r5, r1, r0, asr #23
   159e4:	andeq	r5, r1, r8, asr #22
   159e8:	andeq	r5, r1, r8, asr #22
   159ec:	andeq	r6, r1, r0, asr r0
   159f0:	andeq	r5, r1, r8, asr #22
   159f4:	andeq	r5, r1, r8, asr #22
   159f8:	andeq	r5, r1, r8, asr #22
   159fc:	andeq	r5, r1, ip, asr #24
   15a00:	andeq	r5, r1, r8, asr #22
   15a04:	andeq	r5, r1, r8, asr #22
   15a08:	andeq	r5, r1, r8, asr #22
   15a0c:	andeq	r5, r1, r8, asr #22
   15a10:	andeq	r6, r1, r8, ror r1
   15a14:	andeq	r5, r1, r4, lsr sp
   15a18:	andeq	r5, r1, r8, asr #22
   15a1c:	andeq	r5, r1, r8, asr #22
   15a20:	andeq	r5, r1, r8, asr #22
   15a24:	andeq	r5, r1, r8, asr #22
   15a28:	andeq	r5, r1, r8, asr #22
   15a2c:	andeq	r5, r1, r8, asr #22
   15a30:	andeq	r5, r1, r8, asr #22
   15a34:	andeq	r6, r1, r0, asr r3
   15a38:	andeq	r6, r1, r8, lsr #7
   15a3c:	andeq	r5, r1, r8, asr #22
   15a40:	andeq	r5, r1, r8, asr #22
   15a44:	andeq	r5, r1, r8, asr #22
   15a48:	andeq	r5, r1, ip, lsl #21
   15a4c:	andeq	r5, r1, r8, asr #22
   15a50:	andeq	r5, r1, r8, asr #22
   15a54:	andeq	r5, r1, r8, asr #22
   15a58:	andeq	r5, r1, r8, ror fp
   15a5c:	andeq	r5, r1, r8, asr #22
   15a60:	andeq	r5, r1, r0, asr #23
   15a64:	andeq	r5, r1, r8, asr #22
   15a68:	andeq	r5, r1, r8, asr #22
   15a6c:	andeq	r5, r1, r8, asr #22
   15a70:	andeq	r5, r1, r8, asr #22
   15a74:	andeq	r5, r1, r8, asr #22
   15a78:	andeq	r5, r1, r8, asr #22
   15a7c:	andeq	r5, r1, ip, asr #24
   15a80:	andeq	r5, r1, r8, asr #22
   15a84:	andeq	r5, r1, r8, asr #22
   15a88:	andeq	r6, r1, r4, lsl #7
   15a8c:	mvn	r0, #0
   15a90:	mvn	r1, #0
   15a94:	mov	r2, r5
   15a98:	mov	sl, r3
   15a9c:	bl	16b50 <__assert_fail@plt+0x57b0>
   15aa0:	subs	r3, r0, r6
   15aa4:	mov	lr, #0
   15aa8:	umull	r4, r2, r6, r5
   15aac:	str	r1, [sp, #20]
   15ab0:	sbcs	r3, r1, r7
   15ab4:	mla	ip, r6, sl, r2
   15ab8:	mov	r2, r1
   15abc:	movwcc	lr, #1
   15ac0:	mla	r7, r7, r5, ip
   15ac4:	mov	r2, #0
   15ac8:	cmp	lr, #0
   15acc:	mvnne	r4, #0
   15ad0:	mvnne	r7, #0
   15ad4:	subs	r6, r0, r4
   15ad8:	sbcs	r6, r1, r7
   15adc:	movwcc	r2, #1
   15ae0:	umull	r3, r6, r4, r5
   15ae4:	cmp	r2, #0
   15ae8:	str	r6, [sp, #16]
   15aec:	mvnne	r3, #0
   15af0:	cmp	r2, #0
   15af4:	umull	r6, ip, r3, r5
   15af8:	mla	r1, r3, sl, ip
   15afc:	ldr	ip, [sp, #16]
   15b00:	str	r1, [sp, #12]
   15b04:	mla	r4, r4, sl, ip
   15b08:	mla	r4, r7, r5, r4
   15b0c:	ldr	r7, [sp, #12]
   15b10:	mvnne	r4, #0
   15b14:	subs	r0, r0, r3
   15b18:	ldr	r0, [sp, #20]
   15b1c:	mla	r7, r4, r5, r7
   15b20:	sbcs	r0, r0, r4
   15b24:	mov	r0, #0
   15b28:	movwcc	r0, #1
   15b2c:	cmp	r0, #0
   15b30:	mov	r1, r0
   15b34:	orr	r0, lr, r2
   15b38:	mvnne	r7, #0
   15b3c:	mvnne	r6, #0
   15b40:	orr	r3, r0, r1
   15b44:	b	163a8 <__assert_fail@plt+0x5008>
   15b48:	ldr	r0, [sp, #36]	; 0x24
   15b4c:	orr	r8, r8, #2
   15b50:	b	163cc <__assert_fail@plt+0x502c>
   15b54:	cmp	r0, #105	; 0x69
   15b58:	mov	r3, #0
   15b5c:	bne	159a0 <__assert_fail@plt+0x4600>
   15b60:	ldrb	r0, [r1, #2]
   15b64:	mov	r1, #1
   15b68:	cmp	r0, #66	; 0x42
   15b6c:	movweq	r1, #3
   15b70:	str	r1, [sp, #28]
   15b74:	b	159a0 <__assert_fail@plt+0x4600>
   15b78:	mvn	r0, #0
   15b7c:	mvn	r1, #0
   15b80:	mov	r2, r5
   15b84:	mov	r4, r3
   15b88:	bl	16b50 <__assert_fail@plt+0x57b0>
   15b8c:	subs	r0, r0, r6
   15b90:	mov	r2, #0
   15b94:	sbcs	r0, r1, r7
   15b98:	movwcc	r2, #1
   15b9c:	umull	r0, r1, r6, r5
   15ba0:	mla	r1, r6, r4, r1
   15ba4:	cmp	r2, #0
   15ba8:	mov	r3, r2
   15bac:	mla	r7, r7, r5, r1
   15bb0:	mvnne	r0, #0
   15bb4:	mvnne	r7, #0
   15bb8:	mov	r6, r0
   15bbc:	b	163a8 <__assert_fail@plt+0x5008>
   15bc0:	mvn	r0, #0
   15bc4:	mvn	r1, #0
   15bc8:	mov	r2, r5
   15bcc:	str	r3, [sp, #24]
   15bd0:	bl	16b50 <__assert_fail@plt+0x57b0>
   15bd4:	subs	r3, r0, r6
   15bd8:	mov	ip, r0
   15bdc:	umull	r4, r0, r6, r5
   15be0:	mov	sl, #0
   15be4:	sbcs	r3, r1, r7
   15be8:	str	r0, [sp, #20]
   15bec:	ldr	r0, [sp, #24]
   15bf0:	mov	r3, #0
   15bf4:	movwcc	r3, #1
   15bf8:	cmp	r3, #0
   15bfc:	mvnne	r4, #0
   15c00:	cmp	r3, #0
   15c04:	umull	lr, r2, r4, r5
   15c08:	mla	r2, r4, r0, r2
   15c0c:	str	r2, [sp, #16]
   15c10:	ldr	r2, [sp, #20]
   15c14:	mla	r6, r6, r0, r2
   15c18:	ldr	r0, [sp, #16]
   15c1c:	mla	r6, r7, r5, r6
   15c20:	mvnne	r6, #0
   15c24:	mla	r7, r6, r5, r0
   15c28:	subs	r0, ip, r4
   15c2c:	sbcs	r0, r1, r6
   15c30:	movwcc	sl, #1
   15c34:	cmp	sl, #0
   15c38:	orr	r3, r3, sl
   15c3c:	mvnne	lr, #0
   15c40:	mvnne	r7, #0
   15c44:	mov	r6, lr
   15c48:	b	163a8 <__assert_fail@plt+0x5008>
   15c4c:	mvn	r0, #0
   15c50:	mvn	r1, #0
   15c54:	mov	r2, r5
   15c58:	mov	sl, r3
   15c5c:	bl	16b50 <__assert_fail@plt+0x57b0>
   15c60:	subs	r3, r0, r6
   15c64:	mov	ip, r1
   15c68:	umull	r2, lr, r6, r5
   15c6c:	str	r0, [sp, #20]
   15c70:	sbcs	r3, r1, r7
   15c74:	mov	r1, #0
   15c78:	mla	r6, r6, sl, lr
   15c7c:	mov	lr, #0
   15c80:	str	ip, [sp, #16]
   15c84:	movwcc	r1, #1
   15c88:	mla	r7, r7, r5, r6
   15c8c:	cmp	r1, #0
   15c90:	mvnne	r2, #0
   15c94:	cmp	r1, #0
   15c98:	umull	r3, r4, r2, r5
   15c9c:	mvnne	r7, #0
   15ca0:	mla	r4, r2, sl, r4
   15ca4:	subs	r2, r0, r2
   15ca8:	sbcs	r2, ip, r7
   15cac:	mla	r4, r7, r5, r4
   15cb0:	movwcc	lr, #1
   15cb4:	mov	r2, #0
   15cb8:	cmp	lr, #0
   15cbc:	mvnne	r3, #0
   15cc0:	mvnne	r4, #0
   15cc4:	subs	r7, r0, r3
   15cc8:	mov	r0, r5
   15ccc:	sbcs	r7, ip, r4
   15cd0:	movwcc	r2, #1
   15cd4:	umull	r5, r7, r3, r5
   15cd8:	cmp	r2, #0
   15cdc:	mla	r3, r3, sl, r7
   15ce0:	mvnne	r5, #0
   15ce4:	mla	r3, r4, r0, r3
   15ce8:	cmp	r2, #0
   15cec:	umull	r6, ip, r5, r0
   15cf0:	mvnne	r3, #0
   15cf4:	mla	ip, r5, sl, ip
   15cf8:	mla	r7, r3, r0, ip
   15cfc:	ldr	r0, [sp, #20]
   15d00:	subs	r0, r0, r5
   15d04:	ldr	r0, [sp, #16]
   15d08:	sbcs	r0, r0, r3
   15d0c:	mov	r0, #0
   15d10:	movwcc	r0, #1
   15d14:	cmp	r0, #0
   15d18:	mov	r3, r0
   15d1c:	orr	r0, r1, lr
   15d20:	orr	r0, r0, r2
   15d24:	mvnne	r7, #0
   15d28:	mvnne	r6, #0
   15d2c:	orr	r3, r0, r3
   15d30:	b	163a8 <__assert_fail@plt+0x5008>
   15d34:	mvn	r0, #0
   15d38:	mvn	r1, #0
   15d3c:	mov	r2, r5
   15d40:	mov	r4, r3
   15d44:	str	r3, [sp, #24]
   15d48:	bl	16b50 <__assert_fail@plt+0x57b0>
   15d4c:	umull	r3, r2, r6, r5
   15d50:	mla	r2, r6, r4, r2
   15d54:	subs	r6, r0, r6
   15d58:	sbcs	r6, r1, r7
   15d5c:	mla	ip, r7, r5, r2
   15d60:	ldr	r2, [sp, #24]
   15d64:	mov	r6, #0
   15d68:	movwcc	r6, #1
   15d6c:	cmp	r6, #0
   15d70:	str	r6, [sp, #20]
   15d74:	mov	r6, #0
   15d78:	mvnne	r3, #0
   15d7c:	mvnne	ip, #0
   15d80:	subs	r4, r0, r3
   15d84:	umull	r7, lr, r3, r5
   15d88:	sbcs	r4, r1, ip
   15d8c:	mla	r3, r3, r2, lr
   15d90:	movwcc	r6, #1
   15d94:	cmp	r6, #0
   15d98:	str	r6, [sp, #16]
   15d9c:	mvnne	r7, #0
   15da0:	cmp	r6, #0
   15da4:	umull	sl, r4, r7, r5
   15da8:	mla	r4, r7, r2, r4
   15dac:	mla	r2, ip, r5, r3
   15db0:	mov	ip, #0
   15db4:	mvnne	r2, #0
   15db8:	subs	r3, r0, r7
   15dbc:	mla	r6, r2, r5, r4
   15dc0:	mov	r4, r0
   15dc4:	sbcs	r2, r1, r2
   15dc8:	mov	r0, #0
   15dcc:	movwcc	r0, #1
   15dd0:	mov	r3, r4
   15dd4:	cmp	r0, #0
   15dd8:	str	r0, [sp, #12]
   15ddc:	mov	r0, r1
   15de0:	str	r3, [sp, #4]
   15de4:	mvnne	sl, #0
   15de8:	mvnne	r6, #0
   15dec:	str	r0, [sp, #8]
   15df0:	subs	r2, r4, sl
   15df4:	ldr	r4, [sp, #24]
   15df8:	sbcs	r2, r1, r6
   15dfc:	movwcc	ip, #1
   15e00:	umull	r7, r2, sl, r5
   15e04:	cmp	ip, #0
   15e08:	mla	r2, sl, r4, r2
   15e0c:	mvnne	r7, #0
   15e10:	cmp	ip, #0
   15e14:	mov	sl, #0
   15e18:	umull	r1, lr, r7, r5
   15e1c:	mla	r2, r6, r5, r2
   15e20:	mvnne	r2, #0
   15e24:	mla	lr, r7, r4, lr
   15e28:	subs	r6, r3, r7
   15e2c:	mla	lr, r2, r5, lr
   15e30:	sbcs	r2, r0, r2
   15e34:	movwcc	sl, #1
   15e38:	mov	r2, #0
   15e3c:	cmp	sl, #0
   15e40:	mvnne	r1, #0
   15e44:	mvnne	lr, #0
   15e48:	subs	r6, r3, r1
   15e4c:	ldr	r3, [sp, #24]
   15e50:	sbcs	r6, r0, lr
   15e54:	umull	r0, r7, r1, r5
   15e58:	movwcc	r2, #1
   15e5c:	cmp	r2, #0
   15e60:	mvnne	r0, #0
   15e64:	mla	r1, r1, r3, r7
   15e68:	cmp	r2, #0
   15e6c:	umull	r6, r4, r0, r5
   15e70:	mla	r1, lr, r5, r1
   15e74:	mla	r4, r0, r3, r4
   15e78:	ldr	r3, [sp, #4]
   15e7c:	mvnne	r1, #0
   15e80:	mla	r7, r1, r5, r4
   15e84:	ldr	r5, [sp, #16]
   15e88:	subs	r0, r3, r0
   15e8c:	ldr	r0, [sp, #8]
   15e90:	sbcs	r0, r0, r1
   15e94:	mov	r0, #0
   15e98:	movwcc	r0, #1
   15e9c:	cmp	r0, #0
   15ea0:	mov	r1, r0
   15ea4:	ldr	r0, [sp, #20]
   15ea8:	mvnne	r7, #0
   15eac:	mvnne	r6, #0
   15eb0:	orr	r0, r0, r5
   15eb4:	ldr	r5, [sp, #12]
   15eb8:	orr	r0, r0, r5
   15ebc:	orr	r0, r0, ip
   15ec0:	orr	r0, r0, sl
   15ec4:	orr	r0, r0, r2
   15ec8:	orr	r0, r0, r1
   15ecc:	b	16348 <__assert_fail@plt+0x4fa8>
   15ed0:	mov	r1, #0
   15ed4:	lsl	r2, r7, #10
   15ed8:	lsl	r0, r6, #10
   15edc:	lsr	r3, r7, #22
   15ee0:	cmp	r1, r7, lsr #22
   15ee4:	orr	r2, r2, r6, lsr #22
   15ee8:	mvnne	r0, #0
   15eec:	movwne	r3, #1
   15ef0:	cmp	r1, r7, lsr #22
   15ef4:	b	16374 <__assert_fail@plt+0x4fd4>
   15ef8:	mvn	r0, #0
   15efc:	mvn	r1, #0
   15f00:	mov	r2, r5
   15f04:	mov	sl, r3
   15f08:	bl	16b50 <__assert_fail@plt+0x57b0>
   15f0c:	subs	r2, r0, r6
   15f10:	mov	ip, r0
   15f14:	mov	r0, #0
   15f18:	sbcs	r2, r1, r7
   15f1c:	movwcc	r0, #1
   15f20:	umull	r4, r2, r6, r5
   15f24:	cmp	r0, #0
   15f28:	mla	r2, r6, sl, r2
   15f2c:	str	r0, [sp, #20]
   15f30:	mvnne	r4, #0
   15f34:	cmp	r0, #0
   15f38:	mla	r2, r7, r5, r2
   15f3c:	mov	r0, #0
   15f40:	umull	lr, r3, r4, r5
   15f44:	mvnne	r2, #0
   15f48:	mla	r3, r4, sl, r3
   15f4c:	mla	r6, r2, r5, r3
   15f50:	subs	r3, ip, r4
   15f54:	sbcs	r2, r1, r2
   15f58:	mov	r3, r1
   15f5c:	movwcc	r0, #1
   15f60:	str	r3, [sp, #8]
   15f64:	cmp	r0, #0
   15f68:	str	r0, [sp, #16]
   15f6c:	mov	r0, ip
   15f70:	mvnne	lr, #0
   15f74:	mvnne	r6, #0
   15f78:	str	r0, [sp, #12]
   15f7c:	subs	r2, ip, lr
   15f80:	umull	r7, r4, lr, r5
   15f84:	sbcs	r2, r1, r6
   15f88:	mla	r4, lr, sl, r4
   15f8c:	mov	r2, #0
   15f90:	mla	r6, r6, r5, r4
   15f94:	mov	r4, #0
   15f98:	movwcc	r2, #1
   15f9c:	cmp	r2, #0
   15fa0:	mvnne	r7, #0
   15fa4:	cmp	r2, #0
   15fa8:	umull	r1, ip, r7, r5
   15fac:	mvnne	r6, #0
   15fb0:	mla	ip, r7, sl, ip
   15fb4:	subs	r7, r0, r7
   15fb8:	mla	lr, r6, r5, ip
   15fbc:	sbcs	r7, r3, r6
   15fc0:	mov	ip, #0
   15fc4:	movwcc	ip, #1
   15fc8:	cmp	ip, #0
   15fcc:	mvnne	r1, #0
   15fd0:	mvnne	lr, #0
   15fd4:	subs	r7, r0, r1
   15fd8:	sbcs	r7, r3, lr
   15fdc:	movwcc	r4, #1
   15fe0:	umull	r0, r7, r1, r5
   15fe4:	cmp	r4, #0
   15fe8:	mla	r1, r1, sl, r7
   15fec:	mvnne	r0, #0
   15ff0:	mla	r1, lr, r5, r1
   15ff4:	cmp	r4, #0
   15ff8:	umull	r6, r3, r0, r5
   15ffc:	mvnne	r1, #0
   16000:	mla	r3, r0, sl, r3
   16004:	mla	r7, r1, r5, r3
   16008:	ldr	r3, [sp, #12]
   1600c:	subs	r0, r3, r0
   16010:	ldr	r3, [sp, #16]
   16014:	ldr	r0, [sp, #8]
   16018:	sbcs	r0, r0, r1
   1601c:	mov	r0, #0
   16020:	movwcc	r0, #1
   16024:	cmp	r0, #0
   16028:	mov	r1, r0
   1602c:	ldr	r0, [sp, #20]
   16030:	mvnne	r7, #0
   16034:	mvnne	r6, #0
   16038:	orr	r0, r0, r3
   1603c:	orr	r0, r0, r2
   16040:	orr	r0, r0, ip
   16044:	orr	r0, r0, r4
   16048:	orr	r3, r0, r1
   1604c:	b	163a8 <__assert_fail@plt+0x5008>
   16050:	mvn	r0, #0
   16054:	mvn	r1, #0
   16058:	mov	r2, r5
   1605c:	mov	sl, r3
   16060:	bl	16b50 <__assert_fail@plt+0x57b0>
   16064:	umull	r3, r2, r6, r5
   16068:	mov	lr, r1
   1606c:	mov	r1, r0
   16070:	mla	r2, r6, sl, r2
   16074:	subs	r6, r0, r6
   16078:	mov	r0, #0
   1607c:	sbcs	r6, lr, r7
   16080:	mla	r2, r7, r5, r2
   16084:	movwcc	r0, #1
   16088:	cmp	r0, #0
   1608c:	str	r0, [sp, #20]
   16090:	mov	r0, r1
   16094:	mvnne	r3, #0
   16098:	mvnne	r2, #0
   1609c:	str	r0, [sp, #16]
   160a0:	subs	r4, r1, r3
   160a4:	umull	r7, ip, r3, r5
   160a8:	sbcs	r4, lr, r2
   160ac:	mla	r3, r3, sl, ip
   160b0:	mov	ip, #0
   160b4:	mov	r4, #0
   160b8:	mla	r2, r2, r5, r3
   160bc:	movwcc	r4, #1
   160c0:	cmp	r4, #0
   160c4:	mvnne	r7, #0
   160c8:	cmp	r4, #0
   160cc:	umull	r1, r6, r7, r5
   160d0:	mvnne	r2, #0
   160d4:	mla	r6, r7, sl, r6
   160d8:	mla	r3, r2, r5, r6
   160dc:	subs	r6, r0, r7
   160e0:	sbcs	r2, lr, r2
   160e4:	movwcc	ip, #1
   160e8:	mov	r2, #0
   160ec:	cmp	ip, #0
   160f0:	mvnne	r1, #0
   160f4:	mvnne	r3, #0
   160f8:	subs	r6, r0, r1
   160fc:	sbcs	r6, lr, r3
   16100:	movwcc	r2, #1
   16104:	umull	r0, r6, r1, r5
   16108:	cmp	r2, #0
   1610c:	str	r6, [sp, #12]
   16110:	mvnne	r0, #0
   16114:	cmp	r2, #0
   16118:	umull	r6, r7, r0, r5
   1611c:	mla	r7, r0, sl, r7
   16120:	str	r7, [sp, #8]
   16124:	ldr	r7, [sp, #12]
   16128:	mla	r1, r1, sl, r7
   1612c:	mla	r1, r3, r5, r1
   16130:	ldr	r3, [sp, #8]
   16134:	mvnne	r1, #0
   16138:	mla	r7, r1, r5, r3
   1613c:	ldr	r3, [sp, #16]
   16140:	subs	r0, r3, r0
   16144:	sbcs	r0, lr, r1
   16148:	mov	r0, #0
   1614c:	movwcc	r0, #1
   16150:	cmp	r0, #0
   16154:	mov	r1, r0
   16158:	ldr	r0, [sp, #20]
   1615c:	mvnne	r7, #0
   16160:	mvnne	r6, #0
   16164:	orr	r0, r0, r4
   16168:	orr	r0, r0, ip
   1616c:	orr	r0, r0, r2
   16170:	orr	r3, r0, r1
   16174:	b	163a8 <__assert_fail@plt+0x5008>
   16178:	mvn	r0, #0
   1617c:	mvn	r1, #0
   16180:	mov	r2, r5
   16184:	mov	sl, r3
   16188:	bl	16b50 <__assert_fail@plt+0x57b0>
   1618c:	mov	lr, r0
   16190:	subs	r0, r0, r6
   16194:	mov	r2, #0
   16198:	mov	ip, r1
   1619c:	str	sl, [sp, #24]
   161a0:	sbcs	r0, r1, r7
   161a4:	umull	r3, r1, r6, r5
   161a8:	str	lr, [sp, #4]
   161ac:	movwcc	r2, #1
   161b0:	mla	r6, r6, sl, r1
   161b4:	mov	r1, #0
   161b8:	cmp	r2, #0
   161bc:	mla	r7, r7, r5, r6
   161c0:	str	r2, [sp, #20]
   161c4:	mvnne	r3, #0
   161c8:	cmp	r2, #0
   161cc:	mov	r2, #0
   161d0:	umull	r0, r4, r3, r5
   161d4:	mvnne	r7, #0
   161d8:	mla	r4, r3, sl, r4
   161dc:	subs	r3, lr, r3
   161e0:	sbcs	r3, ip, r7
   161e4:	mla	r4, r7, r5, r4
   161e8:	movwcc	r1, #1
   161ec:	cmp	r1, #0
   161f0:	str	r1, [sp, #16]
   161f4:	mvnne	r0, #0
   161f8:	mvnne	r4, #0
   161fc:	subs	r3, lr, r0
   16200:	sbcs	r3, ip, r4
   16204:	movwcc	r2, #1
   16208:	umull	r6, r3, r0, r5
   1620c:	cmp	r2, #0
   16210:	mla	r0, r0, sl, r3
   16214:	str	r2, [sp, #12]
   16218:	mvnne	r6, #0
   1621c:	mla	r0, r4, r5, r0
   16220:	cmp	r2, #0
   16224:	ldr	r4, [sp, #24]
   16228:	umull	r1, r7, r6, r5
   1622c:	mvnne	r0, #0
   16230:	subs	r3, lr, r6
   16234:	mla	r7, r6, sl, r7
   16238:	mov	r3, ip
   1623c:	mla	r7, r0, r5, r7
   16240:	sbcs	r0, ip, r0
   16244:	str	r3, [sp]
   16248:	mov	r0, #0
   1624c:	movwcc	r0, #1
   16250:	cmp	r0, #0
   16254:	str	r0, [sp, #8]
   16258:	mvnne	r1, #0
   1625c:	mvnne	r7, #0
   16260:	subs	r0, lr, r1
   16264:	sbcs	r0, ip, r7
   16268:	mov	ip, #0
   1626c:	movwcc	ip, #1
   16270:	umull	r6, r0, r1, r5
   16274:	cmp	ip, #0
   16278:	mla	r1, r1, r4, r0
   1627c:	mov	r0, lr
   16280:	mvnne	r6, #0
   16284:	mla	r1, r7, r5, r1
   16288:	cmp	ip, #0
   1628c:	umull	r2, sl, r6, r5
   16290:	mvnne	r1, #0
   16294:	mla	sl, r6, r4, sl
   16298:	subs	r6, lr, r6
   1629c:	mov	lr, #0
   162a0:	mla	r7, r1, r5, sl
   162a4:	sbcs	r1, r3, r1
   162a8:	movwcc	lr, #1
   162ac:	ldr	r1, [sp, #24]
   162b0:	cmp	lr, #0
   162b4:	mvnne	r2, #0
   162b8:	mvnne	r7, #0
   162bc:	subs	r6, r0, r2
   162c0:	umull	r0, sl, r2, r5
   162c4:	sbcs	r6, r3, r7
   162c8:	mov	r3, #0
   162cc:	mla	r2, r2, r1, sl
   162d0:	movwcc	r3, #1
   162d4:	mla	r2, r7, r5, r2
   162d8:	cmp	r3, #0
   162dc:	mvnne	r0, #0
   162e0:	cmp	r3, #0
   162e4:	umull	r6, r4, r0, r5
   162e8:	mvnne	r2, #0
   162ec:	mla	r4, r0, r1, r4
   162f0:	ldr	r1, [sp, #4]
   162f4:	mla	r7, r2, r5, r4
   162f8:	ldr	r5, [sp, #16]
   162fc:	subs	r0, r1, r0
   16300:	ldr	r0, [sp]
   16304:	sbcs	r0, r0, r2
   16308:	mov	r0, #0
   1630c:	movwcc	r0, #1
   16310:	cmp	r0, #0
   16314:	mov	r2, r0
   16318:	ldr	r0, [sp, #20]
   1631c:	mvnne	r7, #0
   16320:	mvnne	r6, #0
   16324:	orr	r0, r0, r5
   16328:	ldr	r5, [sp, #12]
   1632c:	orr	r0, r0, r5
   16330:	ldr	r5, [sp, #8]
   16334:	orr	r0, r0, r5
   16338:	orr	r0, r0, ip
   1633c:	orr	r0, r0, lr
   16340:	orr	r0, r0, r3
   16344:	orr	r0, r0, r2
   16348:	and	r3, r0, #1
   1634c:	b	163a8 <__assert_fail@plt+0x5008>
   16350:	mov	r1, #0
   16354:	lsl	r2, r7, #9
   16358:	lsl	r0, r6, #9
   1635c:	lsr	r3, r7, #23
   16360:	cmp	r1, r7, lsr #23
   16364:	orr	r2, r2, r6, lsr #23
   16368:	mvnne	r0, #0
   1636c:	movwne	r3, #1
   16370:	cmp	r1, r7, lsr #23
   16374:	mvnne	r2, #0
   16378:	mov	r6, r0
   1637c:	mov	r7, r2
   16380:	b	163a8 <__assert_fail@plt+0x5008>
   16384:	lsl	r1, r7, #1
   16388:	lsl	r0, r6, #1
   1638c:	cmp	r7, #0
   16390:	lsr	r3, r7, #31
   16394:	orr	r1, r1, r6, lsr #31
   16398:	mvnlt	r0, #0
   1639c:	mvnlt	r1, #0
   163a0:	mov	r6, r0
   163a4:	mov	r7, r1
   163a8:	ldr	r1, [sp, #32]
   163ac:	ldr	r2, [sp, #28]
   163b0:	orr	r8, r3, r8
   163b4:	add	r0, r1, r2
   163b8:	str	r0, [r9]
   163bc:	ldrb	r0, [r1, r2]
   163c0:	cmp	r0, #0
   163c4:	orrne	r8, r8, #2
   163c8:	ldr	r0, [sp, #36]	; 0x24
   163cc:	strd	r6, [r0]
   163d0:	mov	r0, r8
   163d4:	sub	sp, fp, #28
   163d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163dc:	movw	r0, #30573	; 0x776d
   163e0:	movw	r1, #30611	; 0x7793
   163e4:	movw	r3, #30708	; 0x77f4
   163e8:	mov	r2, #85	; 0x55
   163ec:	movt	r0, #1
   163f0:	movt	r1, #1
   163f4:	movt	r3, #1
   163f8:	bl	113a0 <__assert_fail@plt>
   163fc:	clz	r2, r1
   16400:	clz	r3, r0
   16404:	lsr	r2, r2, #5
   16408:	lsr	r3, r3, #5
   1640c:	orrs	r2, r3, r2
   16410:	movwne	r1, #1
   16414:	movwne	r0, #1
   16418:	cmp	r1, #0
   1641c:	beq	1644c <__assert_fail@plt+0x50ac>
   16420:	mvn	r2, #-2147483648	; 0x80000000
   16424:	udiv	r2, r2, r1
   16428:	cmp	r2, r0
   1642c:	bcs	1644c <__assert_fail@plt+0x50ac>
   16430:	push	{fp, lr}
   16434:	mov	fp, sp
   16438:	bl	11298 <__errno_location@plt>
   1643c:	mov	r1, #12
   16440:	str	r1, [r0]
   16444:	mov	r0, #0
   16448:	pop	{fp, pc}
   1644c:	b	110b8 <calloc@plt>
   16450:	cmp	r0, #0
   16454:	movweq	r0, #1
   16458:	cmn	r0, #1
   1645c:	ble	16464 <__assert_fail@plt+0x50c4>
   16460:	b	11220 <malloc@plt>
   16464:	push	{fp, lr}
   16468:	mov	fp, sp
   1646c:	bl	11298 <__errno_location@plt>
   16470:	mov	r1, #12
   16474:	str	r1, [r0]
   16478:	mov	r0, #0
   1647c:	pop	{fp, pc}
   16480:	push	{fp, lr}
   16484:	mov	fp, sp
   16488:	cmp	r0, #0
   1648c:	beq	164a8 <__assert_fail@plt+0x5108>
   16490:	cmp	r1, #0
   16494:	beq	164b4 <__assert_fail@plt+0x5114>
   16498:	cmn	r1, #1
   1649c:	ble	164c0 <__assert_fail@plt+0x5120>
   164a0:	pop	{fp, lr}
   164a4:	b	11178 <realloc@plt>
   164a8:	mov	r0, r1
   164ac:	pop	{fp, lr}
   164b0:	b	16450 <__assert_fail@plt+0x50b0>
   164b4:	bl	12168 <__assert_fail@plt+0xdc8>
   164b8:	mov	r0, #0
   164bc:	pop	{fp, pc}
   164c0:	bl	11298 <__errno_location@plt>
   164c4:	mov	r1, #12
   164c8:	str	r1, [r0]
   164cc:	mov	r0, #0
   164d0:	pop	{fp, pc}
   164d4:	push	{r4, r5, r6, sl, fp, lr}
   164d8:	add	fp, sp, #16
   164dc:	mov	r4, r0
   164e0:	bl	111e4 <__fpending@plt>
   164e4:	ldr	r6, [r4]
   164e8:	mov	r5, r0
   164ec:	mov	r0, r4
   164f0:	bl	16558 <__assert_fail@plt+0x51b8>
   164f4:	tst	r6, #32
   164f8:	bne	16530 <__assert_fail@plt+0x5190>
   164fc:	cmp	r0, #0
   16500:	mov	r4, r0
   16504:	mvnne	r4, #0
   16508:	cmp	r5, #0
   1650c:	bne	1653c <__assert_fail@plt+0x519c>
   16510:	cmp	r0, #0
   16514:	beq	1653c <__assert_fail@plt+0x519c>
   16518:	bl	11298 <__errno_location@plt>
   1651c:	ldr	r0, [r0]
   16520:	subs	r4, r0, #9
   16524:	mvnne	r4, #0
   16528:	mov	r0, r4
   1652c:	pop	{r4, r5, r6, sl, fp, pc}
   16530:	mvn	r4, #0
   16534:	cmp	r0, #0
   16538:	beq	16544 <__assert_fail@plt+0x51a4>
   1653c:	mov	r0, r4
   16540:	pop	{r4, r5, r6, sl, fp, pc}
   16544:	bl	11298 <__errno_location@plt>
   16548:	mov	r1, #0
   1654c:	str	r1, [r0]
   16550:	mov	r0, r4
   16554:	pop	{r4, r5, r6, sl, fp, pc}
   16558:	push	{r4, r5, r6, sl, fp, lr}
   1655c:	add	fp, sp, #16
   16560:	sub	sp, sp, #8
   16564:	mov	r4, r0
   16568:	bl	112d4 <fileno@plt>
   1656c:	cmn	r0, #1
   16570:	ble	165e4 <__assert_fail@plt+0x5244>
   16574:	mov	r0, r4
   16578:	bl	11238 <__freading@plt>
   1657c:	cmp	r0, #0
   16580:	beq	165ac <__assert_fail@plt+0x520c>
   16584:	mov	r0, r4
   16588:	bl	112d4 <fileno@plt>
   1658c:	mov	r1, #1
   16590:	mov	r2, #0
   16594:	mov	r3, #0
   16598:	str	r1, [sp]
   1659c:	bl	111c0 <lseek64@plt>
   165a0:	and	r0, r0, r1
   165a4:	cmn	r0, #1
   165a8:	beq	165e4 <__assert_fail@plt+0x5244>
   165ac:	mov	r0, r4
   165b0:	bl	165f4 <__assert_fail@plt+0x5254>
   165b4:	cmp	r0, #0
   165b8:	beq	165e4 <__assert_fail@plt+0x5244>
   165bc:	bl	11298 <__errno_location@plt>
   165c0:	ldr	r6, [r0]
   165c4:	mov	r5, r0
   165c8:	mov	r0, r4
   165cc:	bl	112ec <fclose@plt>
   165d0:	cmp	r6, #0
   165d4:	strne	r6, [r5]
   165d8:	mvnne	r0, #0
   165dc:	sub	sp, fp, #16
   165e0:	pop	{r4, r5, r6, sl, fp, pc}
   165e4:	mov	r0, r4
   165e8:	sub	sp, fp, #16
   165ec:	pop	{r4, r5, r6, sl, fp, lr}
   165f0:	b	112ec <fclose@plt>
   165f4:	push	{r4, sl, fp, lr}
   165f8:	add	fp, sp, #8
   165fc:	sub	sp, sp, #8
   16600:	mov	r4, r0
   16604:	cmp	r0, #0
   16608:	beq	16624 <__assert_fail@plt+0x5284>
   1660c:	mov	r0, r4
   16610:	bl	11238 <__freading@plt>
   16614:	cmp	r0, #0
   16618:	ldrbne	r0, [r4, #1]
   1661c:	tstne	r0, #1
   16620:	bne	16634 <__assert_fail@plt+0x5294>
   16624:	mov	r0, r4
   16628:	sub	sp, fp, #8
   1662c:	pop	{r4, sl, fp, lr}
   16630:	b	1110c <fflush@plt>
   16634:	mov	r0, #1
   16638:	mov	r2, #0
   1663c:	mov	r3, #0
   16640:	str	r0, [sp]
   16644:	mov	r0, r4
   16648:	bl	16650 <__assert_fail@plt+0x52b0>
   1664c:	b	16624 <__assert_fail@plt+0x5284>
   16650:	push	{r4, r5, r6, r7, fp, lr}
   16654:	add	fp, sp, #16
   16658:	sub	sp, sp, #8
   1665c:	mov	r4, r0
   16660:	ldr	r0, [r0, #4]
   16664:	mov	r5, r3
   16668:	mov	r6, r2
   1666c:	ldr	r1, [r4, #8]
   16670:	cmp	r1, r0
   16674:	bne	16690 <__assert_fail@plt+0x52f0>
   16678:	ldrd	r0, [r4, #16]
   1667c:	cmp	r1, r0
   16680:	bne	16690 <__assert_fail@plt+0x52f0>
   16684:	ldr	r0, [r4, #36]	; 0x24
   16688:	cmp	r0, #0
   1668c:	beq	166a8 <__assert_fail@plt+0x5308>
   16690:	mov	r0, r4
   16694:	mov	r2, r6
   16698:	mov	r3, r5
   1669c:	sub	sp, fp, #16
   166a0:	pop	{r4, r5, r6, r7, fp, lr}
   166a4:	b	112f8 <fseeko64@plt>
   166a8:	ldr	r7, [fp, #8]
   166ac:	mov	r0, r4
   166b0:	bl	112d4 <fileno@plt>
   166b4:	mov	r2, r6
   166b8:	mov	r3, r5
   166bc:	str	r7, [sp]
   166c0:	bl	111c0 <lseek64@plt>
   166c4:	and	r2, r0, r1
   166c8:	cmn	r2, #1
   166cc:	mvneq	r0, #0
   166d0:	subeq	sp, fp, #16
   166d4:	popeq	{r4, r5, r6, r7, fp, pc}
   166d8:	strd	r0, [r4, #80]	; 0x50
   166dc:	ldr	r0, [r4]
   166e0:	bic	r0, r0, #16
   166e4:	str	r0, [r4]
   166e8:	mov	r0, #0
   166ec:	sub	sp, fp, #16
   166f0:	pop	{r4, r5, r6, r7, fp, pc}
   166f4:	push	{r4, r5, r6, sl, fp, lr}
   166f8:	add	fp, sp, #16
   166fc:	mov	r5, r0
   16700:	mov	r0, #0
   16704:	mov	r4, r1
   16708:	add	r6, r2, #19
   1670c:	strb	r0, [r2, #20]
   16710:	mov	r0, r5
   16714:	mov	r1, r4
   16718:	mov	r2, #10
   1671c:	mov	r3, #0
   16720:	bl	16b50 <__assert_fail@plt+0x57b0>
   16724:	add	r2, r0, r0, lsl #2
   16728:	sub	r2, r5, r2, lsl #1
   1672c:	orr	r2, r2, #48	; 0x30
   16730:	strb	r2, [r6], #-1
   16734:	rsbs	r2, r5, #9
   16738:	mov	r5, r0
   1673c:	rscs	r2, r4, #0
   16740:	mov	r4, r1
   16744:	bcc	16710 <__assert_fail@plt+0x5370>
   16748:	add	r0, r6, #1
   1674c:	pop	{r4, r5, r6, sl, fp, pc}
   16750:	push	{fp, lr}
   16754:	mov	fp, sp
   16758:	mov	r0, #14
   1675c:	bl	11334 <nl_langinfo@plt>
   16760:	movw	r1, #28132	; 0x6de4
   16764:	cmp	r0, #0
   16768:	movt	r1, #1
   1676c:	movne	r1, r0
   16770:	movw	r0, #30787	; 0x7843
   16774:	ldrb	r2, [r1]
   16778:	movt	r0, #1
   1677c:	cmp	r2, #0
   16780:	movne	r0, r1
   16784:	pop	{fp, pc}
   16788:	push	{r4, r5, r6, r7, fp, lr}
   1678c:	add	fp, sp, #16
   16790:	sub	sp, sp, #8
   16794:	add	r5, sp, #4
   16798:	cmp	r0, #0
   1679c:	mov	r7, r2
   167a0:	mov	r4, r1
   167a4:	movne	r5, r0
   167a8:	mov	r0, r5
   167ac:	bl	111f0 <mbrtowc@plt>
   167b0:	mov	r6, r0
   167b4:	cmp	r7, #0
   167b8:	beq	167dc <__assert_fail@plt+0x543c>
   167bc:	cmn	r6, #2
   167c0:	bcc	167dc <__assert_fail@plt+0x543c>
   167c4:	mov	r0, #0
   167c8:	bl	16a48 <__assert_fail@plt+0x56a8>
   167cc:	cmp	r0, #0
   167d0:	ldrbeq	r0, [r4]
   167d4:	moveq	r6, #1
   167d8:	streq	r0, [r5]
   167dc:	mov	r0, r6
   167e0:	sub	sp, fp, #16
   167e4:	pop	{r4, r5, r6, r7, fp, pc}
   167e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167ec:	add	fp, sp, #28
   167f0:	sub	sp, sp, #12
   167f4:	mov	sl, r2
   167f8:	mov	r6, r1
   167fc:	cmp	r0, #0
   16800:	beq	168a4 <__assert_fail@plt+0x5504>
   16804:	mov	r7, r0
   16808:	mov	r8, #10
   1680c:	mov	r0, #0
   16810:	mov	r1, #40	; 0x28
   16814:	str	r8, [sp, #8]
   16818:	bl	16480 <__assert_fail@plt+0x50e0>
   1681c:	mvn	r9, #0
   16820:	cmp	r0, #0
   16824:	beq	16940 <__assert_fail@plt+0x55a0>
   16828:	str	sl, [sp, #4]
   1682c:	mov	r5, r0
   16830:	add	sl, sp, #8
   16834:	b	16840 <__assert_fail@plt+0x54a0>
   16838:	ldr	r8, [sp, #8]
   1683c:	mov	r5, r0
   16840:	mov	r0, r7
   16844:	mov	r1, r6
   16848:	mov	r2, r5
   1684c:	mov	r3, sl
   16850:	bl	112b0 <getgrouplist@plt>
   16854:	mov	r4, r0
   16858:	ldr	r0, [sp, #8]
   1685c:	cmn	r4, #1
   16860:	bgt	16870 <__assert_fail@plt+0x54d0>
   16864:	cmp	r8, r0
   16868:	lsleq	r0, r8, #1
   1686c:	streq	r0, [sp, #8]
   16870:	cmp	r0, #536870912	; 0x20000000
   16874:	bcs	1692c <__assert_fail@plt+0x558c>
   16878:	lsl	r1, r0, #2
   1687c:	mov	r0, r5
   16880:	bl	16480 <__assert_fail@plt+0x50e0>
   16884:	cmp	r0, #0
   16888:	beq	16938 <__assert_fail@plt+0x5598>
   1688c:	cmn	r4, #1
   16890:	ble	16838 <__assert_fail@plt+0x5498>
   16894:	ldr	r1, [sp, #4]
   16898:	str	r0, [r1]
   1689c:	ldr	r9, [sp, #8]
   168a0:	b	16940 <__assert_fail@plt+0x55a0>
   168a4:	mov	r0, #0
   168a8:	mov	r1, #0
   168ac:	bl	1134c <getgroups@plt>
   168b0:	cmn	r0, #1
   168b4:	str	r0, [sp, #8]
   168b8:	ble	168ec <__assert_fail@plt+0x554c>
   168bc:	mov	r4, r0
   168c0:	cmn	r6, #1
   168c4:	bne	1694c <__assert_fail@plt+0x55ac>
   168c8:	cmp	r4, #0
   168cc:	beq	1694c <__assert_fail@plt+0x55ac>
   168d0:	cmp	r4, #536870912	; 0x20000000
   168d4:	bcc	1695c <__assert_fail@plt+0x55bc>
   168d8:	bl	11298 <__errno_location@plt>
   168dc:	mov	r1, #12
   168e0:	mvn	r9, #0
   168e4:	str	r1, [r0]
   168e8:	b	16940 <__assert_fail@plt+0x55a0>
   168ec:	bl	11298 <__errno_location@plt>
   168f0:	ldr	r0, [r0]
   168f4:	mvn	r9, #0
   168f8:	cmp	r0, #38	; 0x26
   168fc:	bne	16940 <__assert_fail@plt+0x55a0>
   16900:	mov	r0, #0
   16904:	mov	r1, #4
   16908:	bl	16480 <__assert_fail@plt+0x50e0>
   1690c:	cmp	r0, #0
   16910:	beq	16940 <__assert_fail@plt+0x55a0>
   16914:	add	r9, r6, #1
   16918:	cmn	r6, #1
   1691c:	str	r0, [sl]
   16920:	str	r6, [r0]
   16924:	movwne	r9, #1
   16928:	b	16940 <__assert_fail@plt+0x55a0>
   1692c:	bl	11298 <__errno_location@plt>
   16930:	mov	r1, #12
   16934:	str	r1, [r0]
   16938:	mov	r0, r5
   1693c:	bl	12168 <__assert_fail@plt+0xdc8>
   16940:	mov	r0, r9
   16944:	sub	sp, fp, #28
   16948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1694c:	add	r4, r4, #1
   16950:	str	r4, [sp, #8]
   16954:	cmp	r4, #536870912	; 0x20000000
   16958:	bcs	168d8 <__assert_fail@plt+0x5538>
   1695c:	lsl	r1, r4, #2
   16960:	mov	r0, #0
   16964:	bl	16480 <__assert_fail@plt+0x50e0>
   16968:	mvn	r9, #0
   1696c:	cmp	r0, #0
   16970:	beq	16940 <__assert_fail@plt+0x55a0>
   16974:	add	r1, r6, #1
   16978:	cmn	r6, #1
   1697c:	mov	r7, r0
   16980:	movwne	r1, #1
   16984:	sub	r0, r4, r1
   16988:	add	r1, r7, r1, lsl #2
   1698c:	bl	1134c <getgroups@plt>
   16990:	cmn	r0, #1
   16994:	ble	16a04 <__assert_fail@plt+0x5664>
   16998:	cmn	r6, #1
   1699c:	addne	r0, r0, #1
   169a0:	strne	r6, [r7]
   169a4:	str	r7, [sl]
   169a8:	cmp	r0, #2
   169ac:	blt	169fc <__assert_fail@plt+0x565c>
   169b0:	mov	r2, r7
   169b4:	add	r1, r7, r0, lsl #2
   169b8:	ldr	r6, [r2], #4
   169bc:	cmp	r1, r2
   169c0:	bls	169fc <__assert_fail@plt+0x565c>
   169c4:	mov	r3, r6
   169c8:	mov	r9, r0
   169cc:	ldr	r0, [r2]
   169d0:	cmp	r0, r6
   169d4:	cmpne	r0, r3
   169d8:	bne	169e4 <__assert_fail@plt+0x5644>
   169dc:	sub	r9, r9, #1
   169e0:	b	169ec <__assert_fail@plt+0x564c>
   169e4:	str	r0, [r7, #4]!
   169e8:	mov	r3, r0
   169ec:	add	r2, r2, #4
   169f0:	cmp	r2, r1
   169f4:	bcc	169cc <__assert_fail@plt+0x562c>
   169f8:	b	16940 <__assert_fail@plt+0x55a0>
   169fc:	mov	r9, r0
   16a00:	b	16940 <__assert_fail@plt+0x55a0>
   16a04:	mov	r0, r7
   16a08:	b	1693c <__assert_fail@plt+0x559c>
   16a0c:	cmp	r2, #0
   16a10:	beq	16a40 <__assert_fail@plt+0x56a0>
   16a14:	mvn	r3, #0
   16a18:	udiv	r3, r3, r2
   16a1c:	cmp	r3, r1
   16a20:	bcs	16a40 <__assert_fail@plt+0x56a0>
   16a24:	push	{fp, lr}
   16a28:	mov	fp, sp
   16a2c:	bl	11298 <__errno_location@plt>
   16a30:	mov	r1, #12
   16a34:	str	r1, [r0]
   16a38:	mov	r0, #0
   16a3c:	pop	{fp, pc}
   16a40:	mul	r1, r2, r1
   16a44:	b	16480 <__assert_fail@plt+0x50e0>
   16a48:	push	{r4, sl, fp, lr}
   16a4c:	add	fp, sp, #8
   16a50:	sub	sp, sp, #264	; 0x108
   16a54:	add	r1, sp, #7
   16a58:	movw	r2, #257	; 0x101
   16a5c:	bl	16aac <__assert_fail@plt+0x570c>
   16a60:	mov	r4, #0
   16a64:	cmp	r0, #0
   16a68:	bne	16aa0 <__assert_fail@plt+0x5700>
   16a6c:	movw	r1, #30793	; 0x7849
   16a70:	add	r0, sp, #7
   16a74:	movt	r1, #1
   16a78:	bl	110f4 <strcmp@plt>
   16a7c:	cmp	r0, #0
   16a80:	beq	16aa0 <__assert_fail@plt+0x5700>
   16a84:	movw	r1, #30795	; 0x784b
   16a88:	add	r0, sp, #7
   16a8c:	movt	r1, #1
   16a90:	bl	110f4 <strcmp@plt>
   16a94:	mov	r4, r0
   16a98:	cmp	r0, #0
   16a9c:	movwne	r4, #1
   16aa0:	mov	r0, r4
   16aa4:	sub	sp, fp, #8
   16aa8:	pop	{r4, sl, fp, pc}
   16aac:	push	{r4, r5, r6, r7, fp, lr}
   16ab0:	add	fp, sp, #16
   16ab4:	mov	r4, r1
   16ab8:	mov	r1, #0
   16abc:	mov	r6, r2
   16ac0:	bl	11310 <setlocale@plt>
   16ac4:	cmp	r0, #0
   16ac8:	beq	16af8 <__assert_fail@plt+0x5758>
   16acc:	mov	r7, r0
   16ad0:	bl	11280 <strlen@plt>
   16ad4:	cmp	r0, r6
   16ad8:	bcs	16b18 <__assert_fail@plt+0x5778>
   16adc:	add	r2, r0, #1
   16ae0:	mov	r0, r4
   16ae4:	mov	r1, r7
   16ae8:	bl	11130 <memcpy@plt>
   16aec:	mov	r5, #0
   16af0:	mov	r0, r5
   16af4:	pop	{r4, r5, r6, r7, fp, pc}
   16af8:	cmp	r6, #0
   16afc:	mov	r5, #22
   16b00:	movne	r0, #0
   16b04:	strbne	r0, [r4]
   16b08:	movne	r0, r5
   16b0c:	popne	{r4, r5, r6, r7, fp, pc}
   16b10:	mov	r0, r5
   16b14:	pop	{r4, r5, r6, r7, fp, pc}
   16b18:	mov	r5, #34	; 0x22
   16b1c:	cmp	r6, #0
   16b20:	beq	16b40 <__assert_fail@plt+0x57a0>
   16b24:	sub	r6, r6, #1
   16b28:	mov	r0, r4
   16b2c:	mov	r1, r7
   16b30:	mov	r2, r6
   16b34:	bl	11130 <memcpy@plt>
   16b38:	mov	r0, #0
   16b3c:	strb	r0, [r4, r6]
   16b40:	mov	r0, r5
   16b44:	pop	{r4, r5, r6, r7, fp, pc}
   16b48:	mov	r1, #0
   16b4c:	b	11310 <setlocale@plt>
   16b50:	cmp	r3, #0
   16b54:	cmpeq	r2, #0
   16b58:	bne	16b70 <__assert_fail@plt+0x57d0>
   16b5c:	cmp	r1, #0
   16b60:	cmpeq	r0, #0
   16b64:	mvnne	r1, #0
   16b68:	mvnne	r0, #0
   16b6c:	b	16b8c <__assert_fail@plt+0x57ec>
   16b70:	sub	sp, sp, #8
   16b74:	push	{sp, lr}
   16b78:	bl	16b9c <__assert_fail@plt+0x57fc>
   16b7c:	ldr	lr, [sp, #4]
   16b80:	add	sp, sp, #8
   16b84:	pop	{r2, r3}
   16b88:	bx	lr
   16b8c:	push	{r1, lr}
   16b90:	mov	r0, #8
   16b94:	bl	110dc <raise@plt>
   16b98:	pop	{r1, pc}
   16b9c:	cmp	r1, r3
   16ba0:	cmpeq	r0, r2
   16ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ba8:	mov	r4, r0
   16bac:	movcc	r0, #0
   16bb0:	mov	r5, r1
   16bb4:	ldr	lr, [sp, #36]	; 0x24
   16bb8:	movcc	r1, r0
   16bbc:	bcc	16cb8 <__assert_fail@plt+0x5918>
   16bc0:	cmp	r3, #0
   16bc4:	clzeq	ip, r2
   16bc8:	clzne	ip, r3
   16bcc:	addeq	ip, ip, #32
   16bd0:	cmp	r5, #0
   16bd4:	clzeq	r1, r4
   16bd8:	addeq	r1, r1, #32
   16bdc:	clzne	r1, r5
   16be0:	sub	ip, ip, r1
   16be4:	sub	sl, ip, #32
   16be8:	lsl	r9, r3, ip
   16bec:	rsb	fp, ip, #32
   16bf0:	orr	r9, r9, r2, lsl sl
   16bf4:	orr	r9, r9, r2, lsr fp
   16bf8:	lsl	r8, r2, ip
   16bfc:	cmp	r5, r9
   16c00:	cmpeq	r4, r8
   16c04:	movcc	r0, #0
   16c08:	movcc	r1, r0
   16c0c:	bcc	16c28 <__assert_fail@plt+0x5888>
   16c10:	mov	r0, #1
   16c14:	subs	r4, r4, r8
   16c18:	lsl	r1, r0, sl
   16c1c:	orr	r1, r1, r0, lsr fp
   16c20:	lsl	r0, r0, ip
   16c24:	sbc	r5, r5, r9
   16c28:	cmp	ip, #0
   16c2c:	beq	16cb8 <__assert_fail@plt+0x5918>
   16c30:	lsr	r6, r8, #1
   16c34:	orr	r6, r6, r9, lsl #31
   16c38:	lsr	r7, r9, #1
   16c3c:	mov	r2, ip
   16c40:	b	16c64 <__assert_fail@plt+0x58c4>
   16c44:	subs	r3, r4, r6
   16c48:	sbc	r8, r5, r7
   16c4c:	adds	r3, r3, r3
   16c50:	adc	r8, r8, r8
   16c54:	adds	r4, r3, #1
   16c58:	adc	r5, r8, #0
   16c5c:	subs	r2, r2, #1
   16c60:	beq	16c80 <__assert_fail@plt+0x58e0>
   16c64:	cmp	r5, r7
   16c68:	cmpeq	r4, r6
   16c6c:	bcs	16c44 <__assert_fail@plt+0x58a4>
   16c70:	adds	r4, r4, r4
   16c74:	adc	r5, r5, r5
   16c78:	subs	r2, r2, #1
   16c7c:	bne	16c64 <__assert_fail@plt+0x58c4>
   16c80:	lsr	r3, r4, ip
   16c84:	orr	r3, r3, r5, lsl fp
   16c88:	lsr	r2, r5, ip
   16c8c:	orr	r3, r3, r5, lsr sl
   16c90:	adds	r0, r0, r4
   16c94:	mov	r4, r3
   16c98:	lsl	r3, r2, ip
   16c9c:	orr	r3, r3, r4, lsl sl
   16ca0:	lsl	ip, r4, ip
   16ca4:	orr	r3, r3, r4, lsr fp
   16ca8:	adc	r1, r1, r5
   16cac:	subs	r0, r0, ip
   16cb0:	mov	r5, r2
   16cb4:	sbc	r1, r1, r3
   16cb8:	cmp	lr, #0
   16cbc:	strdne	r4, [lr]
   16cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16cc8:	mov	r7, r0
   16ccc:	ldr	r6, [pc, #72]	; 16d1c <__assert_fail@plt+0x597c>
   16cd0:	ldr	r5, [pc, #72]	; 16d20 <__assert_fail@plt+0x5980>
   16cd4:	add	r6, pc, r6
   16cd8:	add	r5, pc, r5
   16cdc:	sub	r6, r6, r5
   16ce0:	mov	r8, r1
   16ce4:	mov	r9, r2
   16ce8:	bl	11098 <calloc@plt-0x20>
   16cec:	asrs	r6, r6, #2
   16cf0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cf4:	mov	r4, #0
   16cf8:	add	r4, r4, #1
   16cfc:	ldr	r3, [r5], #4
   16d00:	mov	r2, r9
   16d04:	mov	r1, r8
   16d08:	mov	r0, r7
   16d0c:	blx	r3
   16d10:	cmp	r6, r4
   16d14:	bne	16cf8 <__assert_fail@plt+0x5958>
   16d18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d1c:	andeq	r1, r1, r0, lsr r2
   16d20:	andeq	r1, r1, r8, lsr #4
   16d24:	bx	lr
   16d28:	ldr	r3, [pc, #12]	; 16d3c <__assert_fail@plt+0x599c>
   16d2c:	mov	r1, #0
   16d30:	add	r3, pc, r3
   16d34:	ldr	r2, [r3]
   16d38:	b	112a4 <__cxa_atexit@plt>
   16d3c:	ldrdeq	r1, [r1], -ip

Disassembly of section .fini:

00016d40 <.fini>:
   16d40:	push	{r3, lr}
   16d44:	pop	{r3, pc}
