
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011290 <.init>:
   11290:	push	{r3, lr}
   11294:	bl	1164c <__assert_fail@plt+0x48>
   11298:	pop	{r3, pc}

Disassembly of section .plt:

0001129c <fdopen@plt-0x14>:
   1129c:	push	{lr}		; (str lr, [sp, #-4]!)
   112a0:	ldr	lr, [pc, #4]	; 112ac <fdopen@plt-0x4>
   112a4:	add	lr, pc, lr
   112a8:	ldr	pc, [lr, #8]!
   112ac:	andeq	pc, r1, r4, asr sp	; <UNPREDICTABLE>

000112b0 <fdopen@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #126976	; 0x1f000
   112b8:	ldr	pc, [ip, #3412]!	; 0xd54

000112bc <calloc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #126976	; 0x1f000
   112c4:	ldr	pc, [ip, #3404]!	; 0xd4c

000112c8 <fputs_unlocked@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #126976	; 0x1f000
   112d0:	ldr	pc, [ip, #3396]!	; 0xd44

000112d4 <raise@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #126976	; 0x1f000
   112dc:	ldr	pc, [ip, #3388]!	; 0xd3c

000112e0 <gmtime_r@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #126976	; 0x1f000
   112e8:	ldr	pc, [ip, #3380]!	; 0xd34

000112ec <strcmp@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #126976	; 0x1f000
   112f4:	ldr	pc, [ip, #3372]!	; 0xd2c

000112f8 <strtol@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #126976	; 0x1f000
   11300:	ldr	pc, [ip, #3364]!	; 0xd24

00011304 <posix_fadvise64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #126976	; 0x1f000
   1130c:	ldr	pc, [ip, #3356]!	; 0xd1c

00011310 <mktime@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #126976	; 0x1f000
   11318:	ldr	pc, [ip, #3348]!	; 0xd14

0001131c <fflush@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #126976	; 0x1f000
   11324:	ldr	pc, [ip, #3340]!	; 0xd0c

00011328 <wcwidth@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #126976	; 0x1f000
   11330:	ldr	pc, [ip, #3332]!	; 0xd04

00011334 <free@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #126976	; 0x1f000
   1133c:	ldr	pc, [ip, #3324]!	; 0xcfc

00011340 <clock_gettime@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #126976	; 0x1f000
   11348:	ldr	pc, [ip, #3316]!	; 0xcf4

0001134c <_exit@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #126976	; 0x1f000
   11354:	ldr	pc, [ip, #3308]!	; 0xcec

00011358 <memcpy@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #126976	; 0x1f000
   11360:	ldr	pc, [ip, #3300]!	; 0xce4

00011364 <__strtoull_internal@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #126976	; 0x1f000
   1136c:	ldr	pc, [ip, #3292]!	; 0xcdc

00011370 <mbsinit@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #126976	; 0x1f000
   11378:	ldr	pc, [ip, #3284]!	; 0xcd4

0001137c <dcgettext@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #126976	; 0x1f000
   11384:	ldr	pc, [ip, #3276]!	; 0xccc

00011388 <realloc@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #126976	; 0x1f000
   11390:	ldr	pc, [ip, #3268]!	; 0xcc4

00011394 <localtime_r@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #126976	; 0x1f000
   1139c:	ldr	pc, [ip, #3260]!	; 0xcbc

000113a0 <textdomain@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #126976	; 0x1f000
   113a8:	ldr	pc, [ip, #3252]!	; 0xcb4

000113ac <iswcntrl@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #126976	; 0x1f000
   113b4:	ldr	pc, [ip, #3244]!	; 0xcac

000113b8 <iswprint@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #126976	; 0x1f000
   113c0:	ldr	pc, [ip, #3236]!	; 0xca4

000113c4 <tzset@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #126976	; 0x1f000
   113cc:	ldr	pc, [ip, #3228]!	; 0xc9c

000113d0 <__fxstat64@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #126976	; 0x1f000
   113d8:	ldr	pc, [ip, #3220]!	; 0xc94

000113dc <fwrite@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #126976	; 0x1f000
   113e4:	ldr	pc, [ip, #3212]!	; 0xc8c

000113e8 <lseek64@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #126976	; 0x1f000
   113f0:	ldr	pc, [ip, #3204]!	; 0xc84

000113f4 <__ctype_get_mb_cur_max@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #126976	; 0x1f000
   113fc:	ldr	pc, [ip, #3196]!	; 0xc7c

00011400 <__fpending@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #126976	; 0x1f000
   11408:	ldr	pc, [ip, #3188]!	; 0xc74

0001140c <mbrtowc@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #126976	; 0x1f000
   11414:	ldr	pc, [ip, #3180]!	; 0xc6c

00011418 <error@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #126976	; 0x1f000
   11420:	ldr	pc, [ip, #3172]!	; 0xc64

00011424 <getenv@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #126976	; 0x1f000
   1142c:	ldr	pc, [ip, #3164]!	; 0xc5c

00011430 <malloc@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #126976	; 0x1f000
   11438:	ldr	pc, [ip, #3156]!	; 0xc54

0001143c <__libc_start_main@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #126976	; 0x1f000
   11444:	ldr	pc, [ip, #3148]!	; 0xc4c

00011448 <strftime@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #126976	; 0x1f000
   11450:	ldr	pc, [ip, #3140]!	; 0xc44

00011454 <__freading@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #126976	; 0x1f000
   1145c:	ldr	pc, [ip, #3132]!	; 0xc3c

00011460 <__ctype_tolower_loc@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #126976	; 0x1f000
   11468:	ldr	pc, [ip, #3124]!	; 0xc34

0001146c <__ctype_toupper_loc@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #126976	; 0x1f000
   11474:	ldr	pc, [ip, #3116]!	; 0xc2c

00011478 <__gmon_start__@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #126976	; 0x1f000
   11480:	ldr	pc, [ip, #3108]!	; 0xc24

00011484 <getopt_long@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #126976	; 0x1f000
   1148c:	ldr	pc, [ip, #3100]!	; 0xc1c

00011490 <__ctype_b_loc@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #126976	; 0x1f000
   11498:	ldr	pc, [ip, #3092]!	; 0xc14

0001149c <exit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #126976	; 0x1f000
   114a4:	ldr	pc, [ip, #3084]!	; 0xc0c

000114a8 <bcmp@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #126976	; 0x1f000
   114b0:	ldr	pc, [ip, #3076]!	; 0xc04

000114b4 <strlen@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #126976	; 0x1f000
   114bc:	ldr	pc, [ip, #3068]!	; 0xbfc

000114c0 <strchr@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #126976	; 0x1f000
   114c8:	ldr	pc, [ip, #3060]!	; 0xbf4

000114cc <setenv@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #126976	; 0x1f000
   114d4:	ldr	pc, [ip, #3052]!	; 0xbec

000114d8 <ungetc@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #126976	; 0x1f000
   114e0:	ldr	pc, [ip, #3044]!	; 0xbe4

000114e4 <__errno_location@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #126976	; 0x1f000
   114ec:	ldr	pc, [ip, #3036]!	; 0xbdc

000114f0 <__sprintf_chk@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #126976	; 0x1f000
   114f8:	ldr	pc, [ip, #3028]!	; 0xbd4

000114fc <__cxa_atexit@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #126976	; 0x1f000
   11504:	ldr	pc, [ip, #3020]!	; 0xbcc

00011508 <memset@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #126976	; 0x1f000
   11510:	ldr	pc, [ip, #3012]!	; 0xbc4

00011514 <__printf_chk@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #126976	; 0x1f000
   1151c:	ldr	pc, [ip, #3004]!	; 0xbbc

00011520 <fileno@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #126976	; 0x1f000
   11528:	ldr	pc, [ip, #2996]!	; 0xbb4

0001152c <__fprintf_chk@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #126976	; 0x1f000
   11534:	ldr	pc, [ip, #2988]!	; 0xbac

00011538 <fclose@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #126976	; 0x1f000
   11540:	ldr	pc, [ip, #2980]!	; 0xba4

00011544 <fseeko64@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #126976	; 0x1f000
   1154c:	ldr	pc, [ip, #2972]!	; 0xb9c

00011550 <fcntl64@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #126976	; 0x1f000
   11558:	ldr	pc, [ip, #2964]!	; 0xb94

0001155c <__uflow@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #126976	; 0x1f000
   11564:	ldr	pc, [ip, #2956]!	; 0xb8c

00011568 <__overflow@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #126976	; 0x1f000
   11570:	ldr	pc, [ip, #2948]!	; 0xb84

00011574 <setlocale@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #126976	; 0x1f000
   1157c:	ldr	pc, [ip, #2940]!	; 0xb7c

00011580 <strrchr@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #126976	; 0x1f000
   11588:	ldr	pc, [ip, #2932]!	; 0xb74

0001158c <nl_langinfo@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #126976	; 0x1f000
   11594:	ldr	pc, [ip, #2924]!	; 0xb6c

00011598 <timegm@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #126976	; 0x1f000
   115a0:	ldr	pc, [ip, #2916]!	; 0xb64

000115a4 <clearerr_unlocked@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #126976	; 0x1f000
   115ac:	ldr	pc, [ip, #2908]!	; 0xb5c

000115b0 <__strtoll_internal@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #126976	; 0x1f000
   115b8:	ldr	pc, [ip, #2900]!	; 0xb54

000115bc <fopen64@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #126976	; 0x1f000
   115c4:	ldr	pc, [ip, #2892]!	; 0xb4c

000115c8 <bindtextdomain@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #126976	; 0x1f000
   115d0:	ldr	pc, [ip, #2884]!	; 0xb44

000115d4 <unsetenv@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #126976	; 0x1f000
   115dc:	ldr	pc, [ip, #2876]!	; 0xb3c

000115e0 <strncmp@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #126976	; 0x1f000
   115e8:	ldr	pc, [ip, #2868]!	; 0xb34

000115ec <abort@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #126976	; 0x1f000
   115f4:	ldr	pc, [ip, #2860]!	; 0xb2c

000115f8 <close@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #126976	; 0x1f000
   11600:	ldr	pc, [ip, #2852]!	; 0xb24

00011604 <__assert_fail@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #126976	; 0x1f000
   1160c:	ldr	pc, [ip, #2844]!	; 0xb1c

Disassembly of section .text:

00011610 <.text>:
   11610:	mov	fp, #0
   11614:	mov	lr, #0
   11618:	pop	{r1}		; (ldr r1, [sp], #4)
   1161c:	mov	r2, sp
   11620:	push	{r2}		; (str r2, [sp, #-4]!)
   11624:	push	{r0}		; (str r0, [sp, #-4]!)
   11628:	ldr	ip, [pc, #16]	; 11640 <__assert_fail@plt+0x3c>
   1162c:	push	{ip}		; (str ip, [sp, #-4]!)
   11630:	ldr	r0, [pc, #12]	; 11644 <__assert_fail@plt+0x40>
   11634:	ldr	r3, [pc, #12]	; 11648 <__assert_fail@plt+0x44>
   11638:	bl	1143c <__libc_start_main@plt>
   1163c:	bl	115ec <abort@plt>
   11640:	andeq	pc, r1, r4, asr #2
   11644:	andeq	r1, r1, r0, lsl #14
   11648:	andeq	pc, r1, r4, ror #1
   1164c:	ldr	r3, [pc, #20]	; 11668 <__assert_fail@plt+0x64>
   11650:	ldr	r2, [pc, #20]	; 1166c <__assert_fail@plt+0x68>
   11654:	add	r3, pc, r3
   11658:	ldr	r2, [r3, r2]
   1165c:	cmp	r2, #0
   11660:	bxeq	lr
   11664:	b	11478 <__gmon_start__@plt>
   11668:	andeq	pc, r1, r4, lsr #19
   1166c:	andeq	r0, r0, ip, lsr #2
   11670:	ldr	r0, [pc, #24]	; 11690 <__assert_fail@plt+0x8c>
   11674:	ldr	r3, [pc, #24]	; 11694 <__assert_fail@plt+0x90>
   11678:	cmp	r3, r0
   1167c:	bxeq	lr
   11680:	ldr	r3, [pc, #16]	; 11698 <__assert_fail@plt+0x94>
   11684:	cmp	r3, #0
   11688:	bxeq	lr
   1168c:	bx	r3
   11690:			; <UNDEFINED> instruction: 0x000311b8
   11694:			; <UNDEFINED> instruction: 0x000311b8
   11698:	andeq	r0, r0, r0
   1169c:	ldr	r0, [pc, #36]	; 116c8 <__assert_fail@plt+0xc4>
   116a0:	ldr	r1, [pc, #36]	; 116cc <__assert_fail@plt+0xc8>
   116a4:	sub	r1, r1, r0
   116a8:	asr	r1, r1, #2
   116ac:	add	r1, r1, r1, lsr #31
   116b0:	asrs	r1, r1, #1
   116b4:	bxeq	lr
   116b8:	ldr	r3, [pc, #16]	; 116d0 <__assert_fail@plt+0xcc>
   116bc:	cmp	r3, #0
   116c0:	bxeq	lr
   116c4:	bx	r3
   116c8:			; <UNDEFINED> instruction: 0x000311b8
   116cc:			; <UNDEFINED> instruction: 0x000311b8
   116d0:	andeq	r0, r0, r0
   116d4:	push	{r4, lr}
   116d8:	ldr	r4, [pc, #24]	; 116f8 <__assert_fail@plt+0xf4>
   116dc:	ldrb	r3, [r4]
   116e0:	cmp	r3, #0
   116e4:	popne	{r4, pc}
   116e8:	bl	11670 <__assert_fail@plt+0x6c>
   116ec:	mov	r3, #1
   116f0:	strb	r3, [r4]
   116f4:	pop	{r4, pc}
   116f8:	ldrdeq	r1, [r3], -ip
   116fc:	b	1169c <__assert_fail@plt+0x98>
   11700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11704:	add	fp, sp, #28
   11708:	sub	sp, sp, #44	; 0x2c
   1170c:	mov	r4, #0
   11710:	mov	sl, r0
   11714:	str	r1, [sp, #32]
   11718:	str	r4, [fp, #-32]	; 0xffffffe0
   1171c:	ldr	r0, [r1]
   11720:	bl	18768 <__assert_fail@plt+0x7164>
   11724:	movw	r1, #1076	; 0x434
   11728:	mov	r0, #6
   1172c:	movt	r1, #2
   11730:	bl	11574 <setlocale@plt>
   11734:	movw	r5, #62111	; 0xf29f
   11738:	movw	r1, #61804	; 0xf16c
   1173c:	movt	r5, #1
   11740:	movt	r1, #1
   11744:	mov	r0, r5
   11748:	bl	115c8 <bindtextdomain@plt>
   1174c:	mov	r0, r5
   11750:	bl	113a0 <textdomain@plt>
   11754:	movw	r0, #25300	; 0x62d4
   11758:	movt	r0, #1
   1175c:	bl	1f148 <__assert_fail@plt+0xdb44>
   11760:	cmp	sl, #2
   11764:	blt	11778 <__assert_fail@plt+0x174>
   11768:	sub	r0, sl, #1
   1176c:	mov	r1, #4
   11770:	bl	1b350 <__assert_fail@plt+0x9d4c>
   11774:	mov	r4, r0
   11778:	ldr	r1, [sp, #32]
   1177c:	movw	r2, #1640	; 0x668
   11780:	movw	r3, #1696	; 0x6a0
   11784:	mvn	r0, #0
   11788:	str	r0, [sp, #36]	; 0x24
   1178c:	add	r0, sp, #36	; 0x24
   11790:	movt	r2, #2
   11794:	movt	r3, #2
   11798:	str	r0, [sp]
   1179c:	mov	r0, sl
   117a0:	bl	11484 <getopt_long@plt>
   117a4:	movw	r5, #4592	; 0x11f0
   117a8:	movw	r7, #4576	; 0x11e0
   117ac:	movw	r9, #4606	; 0x11fe
   117b0:	cmn	r0, #1
   117b4:	movt	r5, #3
   117b8:	movt	r7, #3
   117bc:	movt	r9, #3
   117c0:	beq	12300 <__assert_fail@plt+0xcfc>
   117c4:	mov	r8, r0
   117c8:	mov	r0, #0
   117cc:	mov	r9, #0
   117d0:	mov	r5, #0
   117d4:	mov	r6, #0
   117d8:	str	r0, [sp, #20]
   117dc:	mov	r0, #0
   117e0:	str	r0, [sp, #24]
   117e4:	mov	r0, #0
   117e8:	str	r0, [sp, #28]
   117ec:	b	11838 <__assert_fail@plt+0x234>
   117f0:	mov	r0, #0
   117f4:	strb	r8, [r5, r9]
   117f8:	mov	r9, r7
   117fc:	strb	r0, [r5, r7]
   11800:	ldr	r1, [sp, #32]
   11804:	movw	r2, #1640	; 0x668
   11808:	movw	r3, #1696	; 0x6a0
   1180c:	mvn	r0, #0
   11810:	str	r0, [sp, #36]	; 0x24
   11814:	add	r0, sp, #36	; 0x24
   11818:	movt	r2, #2
   1181c:	movt	r3, #2
   11820:	str	r0, [sp]
   11824:	mov	r0, sl
   11828:	bl	11484 <getopt_long@plt>
   1182c:	mov	r8, r0
   11830:	cmn	r0, #1
   11834:	beq	1226c <__assert_fail@plt+0xc68>
   11838:	sub	r0, r8, #48	; 0x30
   1183c:	cmp	r0, #9
   11840:	bhi	11868 <__assert_fail@plt+0x264>
   11844:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11848:	add	r7, r9, #1
   1184c:	cmp	r7, r0
   11850:	bcc	117f0 <__assert_fail@plt+0x1ec>
   11854:	mov	r0, r5
   11858:	sub	r1, fp, #32
   1185c:	bl	1b3b4 <__assert_fail@plt+0x9db0>
   11860:	mov	r5, r0
   11864:	b	117f0 <__assert_fail@plt+0x1ec>
   11868:	add	r0, r8, #3
   1186c:	cmp	r0, #260	; 0x104
   11870:	bhi	12658 <__assert_fail@plt+0x1054>
   11874:	add	r1, pc, #0
   11878:	ldr	pc, [r1, r0, lsl #2]
   1187c:	andeq	r2, r1, r0, ror #12
   11880:			; <UNDEFINED> instruction: 0x000126b4
   11884:	andeq	r2, r1, r8, asr r6
   11888:	andeq	r2, r1, r8, asr r6
   1188c:	andeq	r2, r1, r4, lsl r1
   11890:	andeq	r2, r1, r8, asr r6
   11894:	andeq	r2, r1, r8, asr r6
   11898:	andeq	r2, r1, r8, asr r6
   1189c:	andeq	r2, r1, r8, asr r6
   118a0:	andeq	r2, r1, r8, asr r6
   118a4:	andeq	r2, r1, r8, asr r6
   118a8:	andeq	r2, r1, r8, asr r6
   118ac:	andeq	r2, r1, r8, asr r6
   118b0:	andeq	r2, r1, r8, asr r6
   118b4:	andeq	r2, r1, r8, asr r6
   118b8:	andeq	r2, r1, r8, asr r6
   118bc:	andeq	r2, r1, r8, asr r6
   118c0:	andeq	r2, r1, r8, asr r6
   118c4:	andeq	r2, r1, r8, asr r6
   118c8:	andeq	r2, r1, r8, asr r6
   118cc:	andeq	r2, r1, r8, asr r6
   118d0:	andeq	r2, r1, r8, asr r6
   118d4:	andeq	r2, r1, r8, asr r6
   118d8:	andeq	r2, r1, r8, asr r6
   118dc:	andeq	r2, r1, r8, asr r6
   118e0:	andeq	r2, r1, r8, asr r6
   118e4:	andeq	r2, r1, r8, asr r6
   118e8:	andeq	r2, r1, r8, asr r6
   118ec:	andeq	r2, r1, r8, asr r6
   118f0:	andeq	r2, r1, r8, asr r6
   118f4:	andeq	r2, r1, r8, asr r6
   118f8:	andeq	r2, r1, r8, asr r6
   118fc:	andeq	r2, r1, r8, asr r6
   11900:	andeq	r2, r1, r8, asr r6
   11904:	andeq	r2, r1, r8, asr r6
   11908:	andeq	r2, r1, r8, asr r6
   1190c:	andeq	r2, r1, r8, asr r6
   11910:	andeq	r2, r1, r8, asr r6
   11914:	andeq	r2, r1, r8, asr r6
   11918:	andeq	r2, r1, r8, asr r6
   1191c:	andeq	r2, r1, r8, asr r6
   11920:	andeq	r2, r1, r8, asr r6
   11924:	andeq	r2, r1, r8, asr r6
   11928:	andeq	r2, r1, r8, asr r6
   1192c:	andeq	r2, r1, r8, asr r6
   11930:	andeq	r2, r1, r8, asr r6
   11934:	andeq	r2, r1, r8, asr r6
   11938:	andeq	r2, r1, r8, asr r6
   1193c:	andeq	r2, r1, r8, asr r6
   11940:	andeq	r2, r1, r8, asr r6
   11944:	andeq	r2, r1, r8, asr r6
   11948:	andeq	r2, r1, r8, asr r6
   1194c:	andeq	r2, r1, r8, asr r6
   11950:	andeq	r2, r1, r8, asr r6
   11954:	andeq	r2, r1, r8, asr r6
   11958:	andeq	r2, r1, r8, asr r6
   1195c:	andeq	r2, r1, r8, asr r6
   11960:	andeq	r2, r1, r8, asr r6
   11964:	andeq	r2, r1, r8, asr r6
   11968:	andeq	r2, r1, r8, asr r6
   1196c:	andeq	r2, r1, r8, asr r6
   11970:	andeq	r2, r1, r8, asr r6
   11974:	andeq	r2, r1, r8, asr r6
   11978:	andeq	r2, r1, r8, asr r6
   1197c:	andeq	r2, r1, r8, asr r6
   11980:	andeq	r2, r1, r8, asr r6
   11984:	andeq	r2, r1, r8, asr r6
   11988:	andeq	r2, r1, r8, asr r6
   1198c:	andeq	r2, r1, r8, asr r6
   11990:	andeq	r2, r1, r8, asr r6
   11994:	andeq	r2, r1, r8, asr r6
   11998:	andeq	r2, r1, r4, lsr r0
   1199c:	andeq	r2, r1, r8, asr r6
   119a0:	muleq	r1, r0, ip
   119a4:	andeq	r2, r1, r8, asr r6
   119a8:	andeq	r2, r1, r8, asr r6
   119ac:	andeq	r2, r1, r8, asr r6
   119b0:	andeq	r2, r1, r8, ror r1
   119b4:	andeq	r2, r1, r8, asr r6
   119b8:	andeq	r2, r1, r8, asr r6
   119bc:	andeq	r2, r1, r8, asr r6
   119c0:	andeq	r1, r1, r8, asr pc
   119c4:	andeq	r2, r1, r8, asr r6
   119c8:	andeq	r2, r1, r8, asr r6
   119cc:	andeq	r2, r1, r8, asr r6
   119d0:	andeq	r2, r1, r8, asr r6
   119d4:	andeq	r1, r1, r8, ror #29
   119d8:	andeq	r1, r1, r8, asr #31
   119dc:	andeq	r2, r1, r8, asr r6
   119e0:	andeq	r2, r1, r8, asr r6
   119e4:			; <UNDEFINED> instruction: 0x00011db8
   119e8:	andeq	r2, r1, r8, asr r6
   119ec:	andeq	r2, r1, r8, asr r6
   119f0:	andeq	r2, r1, r8, asr r6
   119f4:	andeq	r2, r1, r8, asr r6
   119f8:	andeq	r2, r1, r8, asr r6
   119fc:	andeq	r2, r1, r8, asr r6
   11a00:	andeq	r2, r1, r8, asr r6
   11a04:	andeq	r2, r1, r8, asr r6
   11a08:	andeq	r2, r1, r8, asr r6
   11a0c:	muleq	r1, r0, r1
   11a10:	andeq	r2, r1, r8, lsr #32
   11a14:	ldrdeq	r1, [r1], -ip
   11a18:	andeq	r2, r1, ip, lsl r0
   11a1c:	ldrdeq	r2, [r1], -ip
   11a20:	muleq	r1, r0, ip
   11a24:	andeq	r2, r1, r8, asr r6
   11a28:	andeq	r1, r1, ip, ror #31
   11a2c:	andeq	r2, r1, r4, lsl r2
   11a30:	andeq	r2, r1, r8, asr r6
   11a34:	andeq	r2, r1, r8, asr r6
   11a38:	strheq	r2, [r1], -r4
   11a3c:	muleq	r1, ip, sp
   11a40:	muleq	r1, r8, lr
   11a44:	andeq	r2, r1, r4, asr r0
   11a48:	andeq	r2, r1, r8, asr r6
   11a4c:	andeq	r2, r1, r8, asr r6
   11a50:	andeq	r1, r1, ip, lsr #28
   11a54:	andeq	r1, r1, r8, lsr lr
   11a58:	andeq	r2, r1, r0
   11a5c:	andeq	r2, r1, r8, asr r6
   11a60:	andeq	r2, r1, r4, lsl #3
   11a64:	andeq	r1, r1, ip, lsl sp
   11a68:	andeq	r2, r1, r8, asr r6
   11a6c:	andeq	r2, r1, r8, asr r6
   11a70:	andeq	r2, r1, r8, asr r6
   11a74:	andeq	r2, r1, r8, asr r6
   11a78:	andeq	r2, r1, r8, asr r6
   11a7c:	andeq	r2, r1, r8, asr r6
   11a80:	andeq	r2, r1, r8, asr r6
   11a84:	andeq	r2, r1, r8, asr r6
   11a88:	andeq	r2, r1, r8, asr r6
   11a8c:	andeq	r2, r1, r8, asr r6
   11a90:	andeq	r2, r1, r8, asr r6
   11a94:	andeq	r2, r1, r8, asr r6
   11a98:	andeq	r2, r1, r8, asr r6
   11a9c:	andeq	r2, r1, r8, asr r6
   11aa0:	andeq	r2, r1, r8, asr r6
   11aa4:	andeq	r2, r1, r8, asr r6
   11aa8:	andeq	r2, r1, r8, asr r6
   11aac:	andeq	r2, r1, r8, asr r6
   11ab0:	andeq	r2, r1, r8, asr r6
   11ab4:	andeq	r2, r1, r8, asr r6
   11ab8:	andeq	r2, r1, r8, asr r6
   11abc:	andeq	r2, r1, r8, asr r6
   11ac0:	andeq	r2, r1, r8, asr r6
   11ac4:	andeq	r2, r1, r8, asr r6
   11ac8:	andeq	r2, r1, r8, asr r6
   11acc:	andeq	r2, r1, r8, asr r6
   11ad0:	andeq	r2, r1, r8, asr r6
   11ad4:	andeq	r2, r1, r8, asr r6
   11ad8:	andeq	r2, r1, r8, asr r6
   11adc:	andeq	r2, r1, r8, asr r6
   11ae0:	andeq	r2, r1, r8, asr r6
   11ae4:	andeq	r2, r1, r8, asr r6
   11ae8:	andeq	r2, r1, r8, asr r6
   11aec:	andeq	r2, r1, r8, asr r6
   11af0:	andeq	r2, r1, r8, asr r6
   11af4:	andeq	r2, r1, r8, asr r6
   11af8:	andeq	r2, r1, r8, asr r6
   11afc:	andeq	r2, r1, r8, asr r6
   11b00:	andeq	r2, r1, r8, asr r6
   11b04:	andeq	r2, r1, r8, asr r6
   11b08:	andeq	r2, r1, r8, asr r6
   11b0c:	andeq	r2, r1, r8, asr r6
   11b10:	andeq	r2, r1, r8, asr r6
   11b14:	andeq	r2, r1, r8, asr r6
   11b18:	andeq	r2, r1, r8, asr r6
   11b1c:	andeq	r2, r1, r8, asr r6
   11b20:	andeq	r2, r1, r8, asr r6
   11b24:	andeq	r2, r1, r8, asr r6
   11b28:	andeq	r2, r1, r8, asr r6
   11b2c:	andeq	r2, r1, r8, asr r6
   11b30:	andeq	r2, r1, r8, asr r6
   11b34:	andeq	r2, r1, r8, asr r6
   11b38:	andeq	r2, r1, r8, asr r6
   11b3c:	andeq	r2, r1, r8, asr r6
   11b40:	andeq	r2, r1, r8, asr r6
   11b44:	andeq	r2, r1, r8, asr r6
   11b48:	andeq	r2, r1, r8, asr r6
   11b4c:	andeq	r2, r1, r8, asr r6
   11b50:	andeq	r2, r1, r8, asr r6
   11b54:	andeq	r2, r1, r8, asr r6
   11b58:	andeq	r2, r1, r8, asr r6
   11b5c:	andeq	r2, r1, r8, asr r6
   11b60:	andeq	r2, r1, r8, asr r6
   11b64:	andeq	r2, r1, r8, asr r6
   11b68:	andeq	r2, r1, r8, asr r6
   11b6c:	andeq	r2, r1, r8, asr r6
   11b70:	andeq	r2, r1, r8, asr r6
   11b74:	andeq	r2, r1, r8, asr r6
   11b78:	andeq	r2, r1, r8, asr r6
   11b7c:	andeq	r2, r1, r8, asr r6
   11b80:	andeq	r2, r1, r8, asr r6
   11b84:	andeq	r2, r1, r8, asr r6
   11b88:	andeq	r2, r1, r8, asr r6
   11b8c:	andeq	r2, r1, r8, asr r6
   11b90:	andeq	r2, r1, r8, asr r6
   11b94:	andeq	r2, r1, r8, asr r6
   11b98:	andeq	r2, r1, r8, asr r6
   11b9c:	andeq	r2, r1, r8, asr r6
   11ba0:	andeq	r2, r1, r8, asr r6
   11ba4:	andeq	r2, r1, r8, asr r6
   11ba8:	andeq	r2, r1, r8, asr r6
   11bac:	andeq	r2, r1, r8, asr r6
   11bb0:	andeq	r2, r1, r8, asr r6
   11bb4:	andeq	r2, r1, r8, asr r6
   11bb8:	andeq	r2, r1, r8, asr r6
   11bbc:	andeq	r2, r1, r8, asr r6
   11bc0:	andeq	r2, r1, r8, asr r6
   11bc4:	andeq	r2, r1, r8, asr r6
   11bc8:	andeq	r2, r1, r8, asr r6
   11bcc:	andeq	r2, r1, r8, asr r6
   11bd0:	andeq	r2, r1, r8, asr r6
   11bd4:	andeq	r2, r1, r8, asr r6
   11bd8:	andeq	r2, r1, r8, asr r6
   11bdc:	andeq	r2, r1, r8, asr r6
   11be0:	andeq	r2, r1, r8, asr r6
   11be4:	andeq	r2, r1, r8, asr r6
   11be8:	andeq	r2, r1, r8, asr r6
   11bec:	andeq	r2, r1, r8, asr r6
   11bf0:	andeq	r2, r1, r8, asr r6
   11bf4:	andeq	r2, r1, r8, asr r6
   11bf8:	andeq	r2, r1, r8, asr r6
   11bfc:	andeq	r2, r1, r8, asr r6
   11c00:	andeq	r2, r1, r8, asr r6
   11c04:	andeq	r2, r1, r8, asr r6
   11c08:	andeq	r2, r1, r8, asr r6
   11c0c:	andeq	r2, r1, r8, asr r6
   11c10:	andeq	r2, r1, r8, asr r6
   11c14:	andeq	r2, r1, r8, asr r6
   11c18:	andeq	r2, r1, r8, asr r6
   11c1c:	andeq	r2, r1, r8, asr r6
   11c20:	andeq	r2, r1, r8, asr r6
   11c24:	andeq	r2, r1, r8, asr r6
   11c28:	andeq	r2, r1, r8, asr r6
   11c2c:	andeq	r2, r1, r8, asr r6
   11c30:	andeq	r2, r1, r8, asr r6
   11c34:	andeq	r2, r1, r8, asr r6
   11c38:	andeq	r2, r1, r8, asr r6
   11c3c:	andeq	r2, r1, r8, asr r6
   11c40:	andeq	r2, r1, r8, asr r6
   11c44:	andeq	r2, r1, r8, asr r6
   11c48:	andeq	r2, r1, r8, asr r6
   11c4c:	andeq	r2, r1, r8, asr r6
   11c50:	andeq	r2, r1, r8, asr r6
   11c54:	andeq	r2, r1, r8, asr r6
   11c58:	andeq	r2, r1, r8, asr r6
   11c5c:	andeq	r2, r1, r8, asr r6
   11c60:	andeq	r2, r1, r8, asr r6
   11c64:	andeq	r2, r1, r8, asr r6
   11c68:	andeq	r2, r1, r8, asr r6
   11c6c:	andeq	r2, r1, r8, asr r6
   11c70:	andeq	r2, r1, r8, asr r6
   11c74:	andeq	r2, r1, r8, asr r6
   11c78:	andeq	r2, r1, r8, asr r6
   11c7c:	andeq	r2, r1, r8, asr r6
   11c80:	andeq	r2, r1, r8, asr r6
   11c84:	andeq	r2, r1, r8, asr r6
   11c88:	muleq	r1, ip, ip
   11c8c:	andeq	r2, r1, ip, lsr #3
   11c90:	movw	r0, #4597	; 0x11f5
   11c94:	movt	r0, #3
   11c98:	b	12248 <__assert_fail@plt+0xc44>
   11c9c:	movw	r0, #4568	; 0x11d8
   11ca0:	movw	r1, #949	; 0x3b5
   11ca4:	mov	r2, #5
   11ca8:	mov	r9, #0
   11cac:	movt	r0, #3
   11cb0:	movt	r1, #2
   11cb4:	ldr	r7, [r0]
   11cb8:	mov	r0, #0
   11cbc:	bl	1137c <dcgettext@plt>
   11cc0:	mvn	r1, #-2147483648	; 0x80000000
   11cc4:	mov	r2, #1
   11cc8:	mov	r3, #0
   11ccc:	mov	r8, #1
   11cd0:	stm	sp, {r1, r9}
   11cd4:	movw	r1, #1076	; 0x434
   11cd8:	str	r0, [sp, #12]
   11cdc:	mov	r0, r7
   11ce0:	str	r9, [sp, #16]
   11ce4:	movt	r1, #2
   11ce8:	str	r1, [sp, #8]
   11cec:	bl	1b908 <__assert_fail@plt+0xa304>
   11cf0:	movw	r1, #4456	; 0x1168
   11cf4:	movt	r1, #3
   11cf8:	str	r0, [r1]
   11cfc:	movw	r0, #4632	; 0x1218
   11d00:	movt	r0, #3
   11d04:	strb	r8, [r0]
   11d08:	mov	r0, r5
   11d0c:	bl	165a4 <__assert_fail@plt+0x4fa0>
   11d10:	mov	r5, #0
   11d14:	str	r9, [fp, #-32]	; 0xffffffe0
   11d18:	b	11800 <__assert_fail@plt+0x1fc>
   11d1c:	movw	r0, #4568	; 0x11d8
   11d20:	movw	r1, #62014	; 0xf23e
   11d24:	mov	r2, #5
   11d28:	mov	r9, #0
   11d2c:	movt	r0, #3
   11d30:	movt	r1, #1
   11d34:	ldr	r7, [r0]
   11d38:	mov	r0, #0
   11d3c:	bl	1137c <dcgettext@plt>
   11d40:	mvn	r1, #-2147483648	; 0x80000000
   11d44:	mov	r2, #1
   11d48:	mov	r3, #0
   11d4c:	stm	sp, {r1, r9}
   11d50:	movw	r1, #1076	; 0x434
   11d54:	str	r0, [sp, #12]
   11d58:	mov	r0, #1
   11d5c:	str	r9, [sp, #16]
   11d60:	movt	r1, #2
   11d64:	str	r0, [sp, #28]
   11d68:	mov	r0, r7
   11d6c:	str	r1, [sp, #8]
   11d70:	bl	1b908 <__assert_fail@plt+0xa304>
   11d74:	movw	r1, #4627	; 0x1213
   11d78:	movt	r1, #3
   11d7c:	ldrb	r1, [r1]
   11d80:	cmp	r1, #0
   11d84:	movweq	r1, #4444	; 0x115c
   11d88:	movteq	r1, #3
   11d8c:	streq	r0, [r1]
   11d90:	mov	r0, #1
   11d94:	str	r0, [sp, #24]
   11d98:	b	11800 <__assert_fail@plt+0x1fc>
   11d9c:	movw	r0, #4585	; 0x11e9
   11da0:	mov	r1, #1
   11da4:	movt	r0, #3
   11da8:	strb	r1, [r0]
   11dac:	movw	r0, #4606	; 0x11fe
   11db0:	movt	r0, #3
   11db4:	b	1224c <__assert_fail@plt+0xc48>
   11db8:	movw	r0, #4627	; 0x1213
   11dbc:	mov	r1, #1
   11dc0:	mov	r2, #5
   11dc4:	mov	r8, #0
   11dc8:	movt	r0, #3
   11dcc:	strb	r1, [r0]
   11dd0:	movw	r0, #4568	; 0x11d8
   11dd4:	movw	r1, #62059	; 0xf26b
   11dd8:	movt	r0, #3
   11ddc:	movt	r1, #1
   11de0:	ldr	r7, [r0]
   11de4:	mov	r0, #0
   11de8:	bl	1137c <dcgettext@plt>
   11dec:	mvn	r1, #-2147483648	; 0x80000000
   11df0:	mov	r2, #1
   11df4:	mov	r3, #0
   11df8:	stm	sp, {r1, r8}
   11dfc:	movw	r1, #1076	; 0x434
   11e00:	str	r0, [sp, #12]
   11e04:	mov	r0, #0
   11e08:	str	r8, [sp, #16]
   11e0c:	movt	r1, #2
   11e10:	str	r0, [sp, #24]
   11e14:	mov	r0, r7
   11e18:	str	r1, [sp, #8]
   11e1c:	bl	1b908 <__assert_fail@plt+0xa304>
   11e20:	movw	r1, #4444	; 0x115c
   11e24:	movt	r1, #3
   11e28:	b	12048 <__assert_fail@plt+0xa44>
   11e2c:	movw	r0, #4616	; 0x1208
   11e30:	movt	r0, #3
   11e34:	b	12248 <__assert_fail@plt+0xc44>
   11e38:	movw	r0, #4568	; 0x11d8
   11e3c:	mov	r9, #0
   11e40:	movt	r0, #3
   11e44:	ldr	r7, [r0]
   11e48:	cmp	r7, #0
   11e4c:	beq	12258 <__assert_fail@plt+0xc54>
   11e50:	movw	r0, #4617	; 0x1209
   11e54:	movt	r0, #3
   11e58:	ldrb	r0, [r0]
   11e5c:	cmp	r0, #0
   11e60:	bne	12258 <__assert_fail@plt+0xc54>
   11e64:	mov	r0, #1
   11e68:	str	r0, [sp, #28]
   11e6c:	mov	r0, r7
   11e70:	bl	114b4 <strlen@plt>
   11e74:	cmn	r0, #1
   11e78:	ble	126bc <__assert_fail@plt+0x10b8>
   11e7c:	movw	r1, #4440	; 0x1158
   11e80:	movt	r1, #3
   11e84:	str	r7, [r1]
   11e88:	movw	r1, #4620	; 0x120c
   11e8c:	movt	r1, #3
   11e90:	str	r0, [r1]
   11e94:	b	12260 <__assert_fail@plt+0xc5c>
   11e98:	movw	r0, #4607	; 0x11ff
   11e9c:	mov	r1, #1
   11ea0:	mov	r9, #0
   11ea4:	movt	r0, #3
   11ea8:	strb	r1, [r0]
   11eac:	movw	r0, #4568	; 0x11d8
   11eb0:	movt	r0, #3
   11eb4:	ldr	r0, [r0]
   11eb8:	cmp	r0, #0
   11ebc:	beq	11800 <__assert_fail@plt+0x1fc>
   11ec0:	movw	r2, #4428	; 0x114c
   11ec4:	movw	r3, #4432	; 0x1150
   11ec8:	mov	r1, #110	; 0x6e
   11ecc:	movt	r2, #3
   11ed0:	movt	r3, #3
   11ed4:	bl	12888 <__assert_fail@plt+0x1284>
   11ed8:	b	11800 <__assert_fail@plt+0x1fc>
   11edc:	movw	r0, #4587	; 0x11eb
   11ee0:	movt	r0, #3
   11ee4:	b	12248 <__assert_fail@plt+0xc44>
   11ee8:	movw	r8, #4620	; 0x120c
   11eec:	mov	r0, #0
   11ef0:	movw	r9, #4440	; 0x1158
   11ef4:	mov	r1, #1
   11ef8:	movt	r8, #3
   11efc:	movt	r9, #3
   11f00:	str	r0, [r8]
   11f04:	movw	r0, #1076	; 0x434
   11f08:	movt	r0, #2
   11f0c:	str	r0, [r9]
   11f10:	movw	r0, #4617	; 0x1209
   11f14:	movt	r0, #3
   11f18:	strb	r1, [r0]
   11f1c:	movw	r0, #4568	; 0x11d8
   11f20:	movt	r0, #3
   11f24:	ldr	r7, [r0]
   11f28:	cmp	r7, #0
   11f2c:	beq	11f48 <__assert_fail@plt+0x944>
   11f30:	mov	r0, r7
   11f34:	bl	114b4 <strlen@plt>
   11f38:	cmn	r0, #1
   11f3c:	ble	126bc <__assert_fail@plt+0x10b8>
   11f40:	str	r7, [r9]
   11f44:	str	r0, [r8]
   11f48:	mov	r0, #0
   11f4c:	mov	r9, #0
   11f50:	str	r0, [sp, #20]
   11f54:	b	11800 <__assert_fail@plt+0x1fc>
   11f58:	movw	r0, #4608	; 0x1200
   11f5c:	mov	r1, #1
   11f60:	mov	r2, #5
   11f64:	mov	r9, #0
   11f68:	movt	r0, #3
   11f6c:	strb	r1, [r0]
   11f70:	movw	r0, #4568	; 0x11d8
   11f74:	movw	r1, #61941	; 0xf1f5
   11f78:	movt	r0, #3
   11f7c:	movt	r1, #1
   11f80:	ldr	r7, [r0]
   11f84:	mov	r0, #0
   11f88:	bl	1137c <dcgettext@plt>
   11f8c:	mvn	r1, #-2147483648	; 0x80000000
   11f90:	mov	r2, #-2147483648	; 0x80000000
   11f94:	mvn	r3, #0
   11f98:	stm	sp, {r1, r9}
   11f9c:	movw	r1, #1076	; 0x434
   11fa0:	str	r0, [sp, #12]
   11fa4:	mov	r0, r7
   11fa8:	str	r9, [sp, #16]
   11fac:	movt	r1, #2
   11fb0:	str	r1, [sp, #8]
   11fb4:	bl	1b908 <__assert_fail@plt+0xa304>
   11fb8:	movw	r1, #4436	; 0x1154
   11fbc:	movt	r1, #3
   11fc0:	str	r0, [r1]
   11fc4:	b	11800 <__assert_fail@plt+0x1fc>
   11fc8:	movw	r0, #4625	; 0x1211
   11fcc:	mov	r9, #0
   11fd0:	mov	r1, #1
   11fd4:	movt	r0, #3
   11fd8:	strb	r9, [r0]
   11fdc:	movw	r0, #4624	; 0x1210
   11fe0:	movt	r0, #3
   11fe4:	strb	r1, [r0]
   11fe8:	b	11800 <__assert_fail@plt+0x1fc>
   11fec:	movw	r0, #4568	; 0x11d8
   11ff0:	movw	r1, #4600	; 0x11f8
   11ff4:	movt	r0, #3
   11ff8:	movt	r1, #3
   11ffc:	b	12044 <__assert_fail@plt+0xa40>
   12000:	movw	r0, #4625	; 0x1211
   12004:	mov	r1, #1
   12008:	movt	r0, #3
   1200c:	strb	r1, [r0]
   12010:	movw	r0, #4624	; 0x1210
   12014:	movt	r0, #3
   12018:	b	1224c <__assert_fail@plt+0xc48>
   1201c:	movw	r0, #4588	; 0x11ec
   12020:	movt	r0, #3
   12024:	b	12248 <__assert_fail@plt+0xc44>
   12028:	movw	r0, #4586	; 0x11ea
   1202c:	movt	r0, #3
   12030:	b	12248 <__assert_fail@plt+0xc44>
   12034:	movw	r0, #4568	; 0x11d8
   12038:	movw	r1, #4592	; 0x11f0
   1203c:	movt	r0, #3
   12040:	movt	r1, #3
   12044:	ldr	r0, [r0]
   12048:	str	r0, [r1]
   1204c:	mov	r9, #0
   12050:	b	11800 <__assert_fail@plt+0x1fc>
   12054:	movw	r0, #4568	; 0x11d8
   12058:	movw	r1, #61982	; 0xf21e
   1205c:	mov	r2, #5
   12060:	mov	r9, #0
   12064:	movt	r0, #3
   12068:	movt	r1, #1
   1206c:	ldr	r7, [r0]
   12070:	mov	r0, #0
   12074:	bl	1137c <dcgettext@plt>
   12078:	mvn	r1, #-2147483648	; 0x80000000
   1207c:	mov	r2, #0
   12080:	mov	r3, #0
   12084:	stm	sp, {r1, r9}
   12088:	movw	r1, #1076	; 0x434
   1208c:	str	r0, [sp, #12]
   12090:	mov	r0, r7
   12094:	str	r9, [sp, #16]
   12098:	movt	r1, #2
   1209c:	str	r1, [sp, #8]
   120a0:	bl	1b908 <__assert_fail@plt+0xa304>
   120a4:	movw	r1, #4612	; 0x1204
   120a8:	movt	r1, #3
   120ac:	str	r0, [r1]
   120b0:	b	11800 <__assert_fail@plt+0x1fc>
   120b4:	movw	r0, #4568	; 0x11d8
   120b8:	movw	r1, #61900	; 0xf1cc
   120bc:	mov	r2, #5
   120c0:	mov	r9, #0
   120c4:	movt	r0, #3
   120c8:	movt	r1, #1
   120cc:	ldr	r7, [r0]
   120d0:	mov	r0, #0
   120d4:	bl	1137c <dcgettext@plt>
   120d8:	mvn	r1, #-2147483648	; 0x80000000
   120dc:	mov	r2, #1
   120e0:	mov	r3, #0
   120e4:	stm	sp, {r1, r9}
   120e8:	movw	r1, #1076	; 0x434
   120ec:	str	r0, [sp, #12]
   120f0:	mov	r0, r7
   120f4:	str	r9, [sp, #16]
   120f8:	movt	r1, #2
   120fc:	str	r1, [sp, #8]
   12100:	bl	1b908 <__assert_fail@plt+0xa304>
   12104:	movw	r1, #4424	; 0x1148
   12108:	movt	r1, #3
   1210c:	str	r0, [r1]
   12110:	b	11800 <__assert_fail@plt+0x1fc>
   12114:	movw	r0, #4576	; 0x11e0
   12118:	movt	r0, #3
   1211c:	ldrd	r0, [r0]
   12120:	orrs	r0, r0, r1
   12124:	bne	1215c <__assert_fail@plt+0xb58>
   12128:	movw	r0, #4568	; 0x11d8
   1212c:	movt	r0, #3
   12130:	ldr	r0, [r0]
   12134:	ldrb	r1, [r0]
   12138:	cmp	r1, #43	; 0x2b
   1213c:	bne	1215c <__assert_fail@plt+0xb58>
   12140:	add	r2, r0, #1
   12144:	mvn	r0, #1
   12148:	mov	r1, #43	; 0x2b
   1214c:	bl	1275c <__assert_fail@plt+0x1158>
   12150:	mov	r9, #0
   12154:	cmp	r0, #0
   12158:	bne	11800 <__assert_fail@plt+0x1fc>
   1215c:	movw	r0, #4568	; 0x11d8
   12160:	mov	r9, #0
   12164:	movt	r0, #3
   12168:	ldr	r0, [r0]
   1216c:	str	r0, [r4, r6, lsl #2]
   12170:	add	r6, r6, #1
   12174:	b	11800 <__assert_fail@plt+0x1fc>
   12178:	movw	r0, #4605	; 0x11fd
   1217c:	movt	r0, #3
   12180:	b	12248 <__assert_fail@plt+0xc44>
   12184:	movw	r0, #4626	; 0x1212
   12188:	movt	r0, #3
   1218c:	b	12248 <__assert_fail@plt+0xc44>
   12190:	movw	r0, #4585	; 0x11e9
   12194:	mov	r1, #1
   12198:	movt	r0, #3
   1219c:	strb	r1, [r0]
   121a0:	movw	r0, #4584	; 0x11e8
   121a4:	movt	r0, #3
   121a8:	b	1224c <__assert_fail@plt+0xc48>
   121ac:	movw	r7, #4568	; 0x11d8
   121b0:	movt	r7, #3
   121b4:	ldr	r2, [r7]
   121b8:	cmp	r2, #0
   121bc:	beq	126c0 <__assert_fail@plt+0x10bc>
   121c0:	ldr	r0, [sp, #36]	; 0x24
   121c4:	mov	r1, #0
   121c8:	mov	r9, #0
   121cc:	bl	1275c <__assert_fail@plt+0x1158>
   121d0:	cmp	r0, #0
   121d4:	bne	11800 <__assert_fail@plt+0x1fc>
   121d8:	b	126cc <__assert_fail@plt+0x10c8>
   121dc:	movw	r0, #4568	; 0x11d8
   121e0:	movt	r0, #3
   121e4:	ldr	r0, [r0]
   121e8:	cmp	r0, #0
   121ec:	beq	12208 <__assert_fail@plt+0xc04>
   121f0:	movw	r2, #4408	; 0x1138
   121f4:	movw	r3, #4412	; 0x113c
   121f8:	mov	r1, #101	; 0x65
   121fc:	movt	r2, #3
   12200:	movt	r3, #3
   12204:	bl	12888 <__assert_fail@plt+0x1284>
   12208:	movw	r0, #4596	; 0x11f4
   1220c:	movt	r0, #3
   12210:	b	12248 <__assert_fail@plt+0xc44>
   12214:	movw	r0, #4568	; 0x11d8
   12218:	movt	r0, #3
   1221c:	ldr	r0, [r0]
   12220:	cmp	r0, #0
   12224:	beq	12240 <__assert_fail@plt+0xc3c>
   12228:	movw	r2, #4416	; 0x1140
   1222c:	movw	r3, #4420	; 0x1144
   12230:	mov	r1, #105	; 0x69
   12234:	movt	r2, #3
   12238:	movt	r3, #3
   1223c:	bl	12888 <__assert_fail@plt+0x1284>
   12240:	movw	r0, #4604	; 0x11fc
   12244:	movt	r0, #3
   12248:	mov	r1, #1
   1224c:	strb	r1, [r0]
   12250:	mov	r9, #0
   12254:	b	11800 <__assert_fail@plt+0x1fc>
   12258:	mov	r0, #1
   1225c:	str	r0, [sp, #28]
   12260:	mov	r0, #1
   12264:	str	r0, [sp, #20]
   12268:	b	11800 <__assert_fail@plt+0x1fc>
   1226c:	cmp	r5, #0
   12270:	beq	122dc <__assert_fail@plt+0xcd8>
   12274:	movw	r1, #949	; 0x3b5
   12278:	mov	r0, #0
   1227c:	mov	r2, #5
   12280:	mov	r7, #0
   12284:	movt	r1, #2
   12288:	bl	1137c <dcgettext@plt>
   1228c:	mvn	r1, #-2147483648	; 0x80000000
   12290:	mov	r2, #1
   12294:	mov	r3, #0
   12298:	stm	sp, {r1, r7}
   1229c:	movw	r1, #1076	; 0x434
   122a0:	str	r0, [sp, #12]
   122a4:	mov	r0, r5
   122a8:	str	r7, [sp, #16]
   122ac:	mov	r7, #1
   122b0:	movt	r1, #2
   122b4:	str	r1, [sp, #8]
   122b8:	bl	1b908 <__assert_fail@plt+0xa304>
   122bc:	movw	r1, #4456	; 0x1168
   122c0:	movt	r1, #3
   122c4:	str	r0, [r1]
   122c8:	movw	r0, #4632	; 0x1218
   122cc:	movt	r0, #3
   122d0:	strb	r7, [r0]
   122d4:	mov	r0, r5
   122d8:	bl	165a4 <__assert_fail@plt+0x4fa0>
   122dc:	movw	r5, #4606	; 0x11fe
   122e0:	ldr	r8, [sp, #20]
   122e4:	movw	r7, #4576	; 0x11e0
   122e8:	movt	r5, #3
   122ec:	movt	r7, #3
   122f0:	mov	r9, r5
   122f4:	movw	r5, #4592	; 0x11f0
   122f8:	movt	r5, #3
   122fc:	b	12318 <__assert_fail@plt+0xd14>
   12300:	mov	r0, #0
   12304:	mov	r6, #0
   12308:	mov	r8, #0
   1230c:	str	r0, [sp, #24]
   12310:	mov	r0, #0
   12314:	str	r0, [sp, #28]
   12318:	ldr	r0, [r5]
   1231c:	cmp	r0, #0
   12320:	bne	12368 <__assert_fail@plt+0xd64>
   12324:	movw	r0, #62149	; 0xf2c5
   12328:	movt	r0, #1
   1232c:	bl	11424 <getenv@plt>
   12330:	cmp	r0, #0
   12334:	beq	1235c <__assert_fail@plt+0xd58>
   12338:	mov	r0, #2
   1233c:	bl	16698 <__assert_fail@plt+0x5094>
   12340:	movw	r2, #62180	; 0xf2e4
   12344:	movw	r1, #62165	; 0xf2d5
   12348:	cmp	r0, #0
   1234c:	movt	r2, #1
   12350:	movt	r1, #1
   12354:	movne	r1, r2
   12358:	b	12364 <__assert_fail@plt+0xd60>
   1235c:	movw	r1, #62180	; 0xf2e4
   12360:	movt	r1, #1
   12364:	str	r1, [r5]
   12368:	movw	r0, #62195	; 0xf2f3
   1236c:	movt	r0, #1
   12370:	bl	11424 <getenv@plt>
   12374:	bl	1a5a8 <__assert_fail@plt+0x8fa4>
   12378:	movw	r1, #4628	; 0x1214
   1237c:	ldrb	r9, [r9]
   12380:	movt	r1, #3
   12384:	str	r0, [r1]
   12388:	ldrd	r0, [r7]
   1238c:	orrs	r0, r0, r1
   12390:	moveq	r1, #0
   12394:	moveq	r0, #1
   12398:	strdeq	r0, [r7]
   1239c:	cmp	r9, #1
   123a0:	bne	123cc <__assert_fail@plt+0xdc8>
   123a4:	movw	r0, #4632	; 0x1218
   123a8:	movt	r0, #3
   123ac:	ldrb	r0, [r0]
   123b0:	cmp	r0, #1
   123b4:	beq	12700 <__assert_fail@plt+0x10fc>
   123b8:	movw	r0, #4584	; 0x11e8
   123bc:	movt	r0, #3
   123c0:	ldrb	r0, [r0]
   123c4:	cmp	r0, #1
   123c8:	beq	1270c <__assert_fail@plt+0x1108>
   123cc:	ldr	r0, [sp, #28]
   123d0:	tst	r0, #1
   123d4:	beq	124a8 <__assert_fail@plt+0xea4>
   123d8:	ldr	r0, [sp, #24]
   123dc:	tst	r0, #1
   123e0:	beq	12424 <__assert_fail@plt+0xe20>
   123e4:	cmp	r9, #0
   123e8:	bne	12400 <__assert_fail@plt+0xdfc>
   123ec:	movw	r0, #4632	; 0x1218
   123f0:	movt	r0, #3
   123f4:	ldrb	r0, [r0]
   123f8:	cmp	r0, #1
   123fc:	bne	12498 <__assert_fail@plt+0xe94>
   12400:	movw	r1, #4627	; 0x1213
   12404:	mov	r0, #1
   12408:	tst	r8, #1
   1240c:	movt	r1, #3
   12410:	strb	r0, [r1]
   12414:	movwne	r1, #4617	; 0x1209
   12418:	movtne	r1, #3
   1241c:	strbne	r0, [r1]
   12420:	b	124a8 <__assert_fail@plt+0xea4>
   12424:	movw	r0, #4617	; 0x1209
   12428:	movt	r0, #3
   1242c:	ldrb	r1, [r0]
   12430:	cmp	r1, #0
   12434:	eoreq	r1, r8, #1
   12438:	tsteq	r1, #1
   1243c:	bne	124a8 <__assert_fail@plt+0xea4>
   12440:	cmp	r9, #0
   12444:	bne	1245c <__assert_fail@plt+0xe58>
   12448:	movw	r1, #4632	; 0x1218
   1244c:	movt	r1, #3
   12450:	ldrb	r1, [r1]
   12454:	cmp	r1, #1
   12458:	bne	124a8 <__assert_fail@plt+0xea4>
   1245c:	movw	r1, #4627	; 0x1213
   12460:	movt	r1, #3
   12464:	ldrb	r1, [r1]
   12468:	cmp	r1, #0
   1246c:	bne	124a0 <__assert_fail@plt+0xe9c>
   12470:	movw	r2, #4605	; 0x11fd
   12474:	mov	r1, #1
   12478:	movt	r2, #3
   1247c:	strb	r1, [r2]
   12480:	movw	r2, #4620	; 0x120c
   12484:	movt	r2, #3
   12488:	ldr	r2, [r2]
   1248c:	cmp	r2, #1
   12490:	strbge	r1, [r0]
   12494:	b	124a8 <__assert_fail@plt+0xea4>
   12498:	movw	r0, #4605	; 0x11fd
   1249c:	movt	r0, #3
   124a0:	mov	r1, #1
   124a4:	strb	r1, [r0]
   124a8:	movw	r0, #4544	; 0x11c0
   124ac:	movt	r0, #3
   124b0:	ldr	r7, [r0]
   124b4:	cmp	r7, sl
   124b8:	bge	12574 <__assert_fail@plt+0xf70>
   124bc:	ldr	r1, [sp, #32]
   124c0:	sub	r5, sl, r7
   124c4:	add	r0, r4, r6, lsl #2
   124c8:	mov	r8, sl
   124cc:	lsl	r2, r5, #2
   124d0:	add	r1, r1, r7, lsl #2
   124d4:	bl	11358 <memcpy@plt>
   124d8:	cmp	r5, #4
   124dc:	bcc	12558 <__assert_fail@plt+0xf54>
   124e0:	mov	r0, #0
   124e4:	mov	r1, #1
   124e8:	vdup.32	q8, r0
   124ec:	bic	r0, r5, #3
   124f0:	sub	r3, r0, #4
   124f4:	add	r2, r1, r3, lsr #2
   124f8:	cmp	r3, #12
   124fc:	and	r1, r2, #3
   12500:	vmov.32	d16[0], r6
   12504:	bcc	1251c <__assert_fail@plt+0xf18>
   12508:	vmov.i32	q9, #4	; 0x00000004
   1250c:	sub	r2, r1, r2
   12510:	vadd.i32	q8, q8, q9
   12514:	adds	r2, r2, #4
   12518:	bne	12510 <__assert_fail@plt+0xf0c>
   1251c:	cmp	r1, #0
   12520:	beq	12538 <__assert_fail@plt+0xf34>
   12524:	vmov.i32	q9, #1	; 0x00000001
   12528:	rsb	r1, r1, #0
   1252c:	vadd.i32	q8, q8, q9
   12530:	adds	r1, r1, #1
   12534:	bcc	1252c <__assert_fail@plt+0xf28>
   12538:	vext.8	q9, q8, q8, #8
   1253c:	cmp	r5, r0
   12540:	vadd.i32	q8, q8, q9
   12544:	vdup.32	q9, d16[1]
   12548:	vadd.i32	q8, q8, q9
   1254c:	vmov.32	r6, d16[0]
   12550:	beq	12568 <__assert_fail@plt+0xf64>
   12554:	add	r7, r7, r0
   12558:	sub	r0, r8, r7
   1255c:	subs	r0, r0, #1
   12560:	add	r6, r6, #1
   12564:	bne	1255c <__assert_fail@plt+0xf58>
   12568:	movw	r0, #4544	; 0x11c0
   1256c:	movt	r0, #3
   12570:	str	r8, [r0]
   12574:	cmp	r6, #0
   12578:	beq	125ac <__assert_fail@plt+0xfa8>
   1257c:	cmp	r9, #0
   12580:	beq	12590 <__assert_fail@plt+0xf8c>
   12584:	mov	r0, r6
   12588:	mov	r1, r4
   1258c:	b	125b4 <__assert_fail@plt+0xfb0>
   12590:	mov	r0, #1
   12594:	mov	r1, r4
   12598:	bl	12d2c <__assert_fail@plt+0x1728>
   1259c:	add	r4, r4, #4
   125a0:	subs	r6, r6, #1
   125a4:	bne	12590 <__assert_fail@plt+0xf8c>
   125a8:	b	125b8 <__assert_fail@plt+0xfb4>
   125ac:	mov	r0, #0
   125b0:	mov	r1, #0
   125b4:	bl	12d2c <__assert_fail@plt+0x1728>
   125b8:	movw	r0, #4664	; 0x1238
   125bc:	movt	r0, #3
   125c0:	ldr	r0, [r0]
   125c4:	bl	165a4 <__assert_fail@plt+0x4fa0>
   125c8:	movw	r0, #4668	; 0x123c
   125cc:	movt	r0, #3
   125d0:	ldr	r0, [r0]
   125d4:	bl	165a4 <__assert_fail@plt+0x4fa0>
   125d8:	movw	r0, #4676	; 0x1244
   125dc:	movt	r0, #3
   125e0:	ldr	r0, [r0]
   125e4:	bl	165a4 <__assert_fail@plt+0x4fa0>
   125e8:	movw	r0, #4708	; 0x1264
   125ec:	movt	r0, #3
   125f0:	ldr	r0, [r0]
   125f4:	bl	165a4 <__assert_fail@plt+0x4fa0>
   125f8:	movw	r0, #4712	; 0x1268
   125fc:	movt	r0, #3
   12600:	ldr	r0, [r0]
   12604:	bl	165a4 <__assert_fail@plt+0x4fa0>
   12608:	movw	r0, #4716	; 0x126c
   1260c:	movt	r0, #3
   12610:	ldr	r0, [r0]
   12614:	bl	165a4 <__assert_fail@plt+0x4fa0>
   12618:	movw	r0, #4633	; 0x1219
   1261c:	movt	r0, #3
   12620:	ldrb	r0, [r0]
   12624:	cmp	r0, #1
   12628:	bne	12644 <__assert_fail@plt+0x1040>
   1262c:	movw	r0, #4560	; 0x11d0
   12630:	movt	r0, #3
   12634:	ldr	r0, [r0]
   12638:	bl	163fc <__assert_fail@plt+0x4df8>
   1263c:	cmn	r0, #1
   12640:	beq	12730 <__assert_fail@plt+0x112c>
   12644:	movw	r0, #4634	; 0x121a
   12648:	movt	r0, #3
   1264c:	ldrb	r0, [r0]
   12650:	sub	sp, fp, #28
   12654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12658:	mov	r0, #1
   1265c:	bl	12944 <__assert_fail@plt+0x1340>
   12660:	movw	r0, #4464	; 0x1170
   12664:	movw	r2, #62134	; 0xf2b6
   12668:	mov	r1, #0
   1266c:	movw	r7, #62121	; 0xf2a9
   12670:	movt	r0, #3
   12674:	movt	r2, #1
   12678:	str	r1, [sp, #8]
   1267c:	movw	r1, #62104	; 0xf298
   12680:	movt	r7, #1
   12684:	movt	r1, #1
   12688:	ldr	r3, [r0]
   1268c:	movw	r0, #4564	; 0x11d4
   12690:	str	r2, [sp, #4]
   12694:	movw	r2, #62107	; 0xf29b
   12698:	str	r7, [sp]
   1269c:	movt	r0, #3
   126a0:	movt	r2, #1
   126a4:	ldr	r0, [r0]
   126a8:	bl	1b04c <__assert_fail@plt+0x9a48>
   126ac:	mov	r0, #0
   126b0:	bl	1149c <exit@plt>
   126b4:	mov	r0, #0
   126b8:	bl	12944 <__assert_fail@plt+0x1340>
   126bc:	bl	1471c <__assert_fail@plt+0x3118>
   126c0:	movw	r1, #61828	; 0xf184
   126c4:	movt	r1, #1
   126c8:	b	12714 <__assert_fail@plt+0x1110>
   126cc:	movw	r1, #61878	; 0xf1b6
   126d0:	mov	r0, #0
   126d4:	mov	r2, #5
   126d8:	movt	r1, #1
   126dc:	bl	1137c <dcgettext@plt>
   126e0:	mov	r4, r0
   126e4:	ldr	r0, [r7]
   126e8:	bl	1a3bc <__assert_fail@plt+0x8db8>
   126ec:	mov	r3, r0
   126f0:	mov	r0, #1
   126f4:	mov	r1, #0
   126f8:	mov	r2, r4
   126fc:	bl	11418 <error@plt>
   12700:	movw	r1, #62198	; 0xf2f6
   12704:	movt	r1, #1
   12708:	b	12714 <__assert_fail@plt+0x1110>
   1270c:	movw	r1, #62257	; 0xf331
   12710:	movt	r1, #1
   12714:	mov	r0, #0
   12718:	mov	r2, #5
   1271c:	bl	1137c <dcgettext@plt>
   12720:	mov	r2, r0
   12724:	mov	r0, #1
   12728:	mov	r1, #0
   1272c:	bl	11418 <error@plt>
   12730:	bl	114e4 <__errno_location@plt>
   12734:	movw	r1, #62318	; 0xf36e
   12738:	ldr	r4, [r0]
   1273c:	mov	r0, #0
   12740:	mov	r2, #5
   12744:	movt	r1, #1
   12748:	bl	1137c <dcgettext@plt>
   1274c:	mov	r2, r0
   12750:	mov	r0, #1
   12754:	mov	r1, r4
   12758:	bl	11418 <error@plt>
   1275c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12760:	add	fp, sp, #24
   12764:	sub	sp, sp, #32
   12768:	movw	r6, #1076	; 0x434
   1276c:	mvn	r5, #0
   12770:	mov	r8, r1
   12774:	mov	r9, r0
   12778:	mov	r7, r2
   1277c:	mov	r0, r2
   12780:	add	r1, sp, #28
   12784:	add	r3, sp, #16
   12788:	mov	r2, #10
   1278c:	movt	r6, #2
   12790:	str	r5, [sp, #12]
   12794:	str	r5, [sp, #8]
   12798:	str	r6, [sp]
   1279c:	bl	1dde8 <__assert_fail@plt+0xc7e4>
   127a0:	mvn	r1, #2
   127a4:	tst	r0, r1
   127a8:	bne	12870 <__assert_fail@plt+0x126c>
   127ac:	ldr	r3, [sp, #28]
   127b0:	mov	r4, #0
   127b4:	cmp	r3, r7
   127b8:	ldrne	r0, [sp, #16]
   127bc:	ldrne	r1, [sp, #20]
   127c0:	orrsne	r2, r0, r1
   127c4:	bne	127d4 <__assert_fail@plt+0x11d0>
   127c8:	mov	r0, r4
   127cc:	sub	sp, fp, #24
   127d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   127d4:	ldrb	r2, [r3]
   127d8:	cmp	r2, #58	; 0x3a
   127dc:	bne	1283c <__assert_fail@plt+0x1238>
   127e0:	add	r5, r3, #1
   127e4:	add	r1, sp, #28
   127e8:	add	r3, sp, #8
   127ec:	mov	r2, #10
   127f0:	str	r6, [sp]
   127f4:	mov	r0, r5
   127f8:	bl	1dde8 <__assert_fail@plt+0xc7e4>
   127fc:	cmp	r0, #0
   12800:	bne	12870 <__assert_fail@plt+0x126c>
   12804:	ldr	r2, [sp, #28]
   12808:	cmp	r5, r2
   1280c:	beq	127c8 <__assert_fail@plt+0x11c4>
   12810:	ldr	r0, [sp, #16]
   12814:	ldr	r5, [sp, #8]
   12818:	ldr	r1, [sp, #20]
   1281c:	ldr	r3, [sp, #12]
   12820:	subs	r7, r5, r0
   12824:	sbcs	r7, r3, r1
   12828:	bcc	127c8 <__assert_fail@plt+0x11c4>
   1282c:	ldrb	r2, [r2]
   12830:	cmp	r2, #0
   12834:	bne	127c8 <__assert_fail@plt+0x11c4>
   12838:	b	12848 <__assert_fail@plt+0x1244>
   1283c:	mvn	r3, #0
   12840:	cmp	r2, #0
   12844:	bne	127c8 <__assert_fail@plt+0x11c4>
   12848:	movw	r2, #4448	; 0x1160
   1284c:	movw	r7, #4576	; 0x11e0
   12850:	mov	r4, #1
   12854:	movt	r7, #3
   12858:	movt	r2, #3
   1285c:	str	r5, [r2]
   12860:	str	r0, [r7]
   12864:	str	r3, [r2, #4]
   12868:	str	r1, [r7, #4]
   1286c:	b	127c8 <__assert_fail@plt+0x11c4>
   12870:	movw	r3, #1696	; 0x6a0
   12874:	mov	r1, r9
   12878:	mov	r2, r8
   1287c:	str	r7, [sp]
   12880:	movt	r3, #2
   12884:	bl	1dd24 <__assert_fail@plt+0xc720>
   12888:	push	{r4, r5, r6, r7, fp, lr}
   1288c:	add	fp, sp, #16
   12890:	sub	sp, sp, #8
   12894:	mov	r5, r0
   12898:	ldrb	r0, [r0]
   1289c:	mov	r4, r1
   128a0:	mov	r6, r3
   128a4:	sub	r1, r0, #48	; 0x30
   128a8:	cmp	r1, #10
   128ac:	strbcs	r0, [r2]
   128b0:	ldrbcs	r0, [r5, #1]!
   128b4:	cmp	r0, #0
   128b8:	beq	128f4 <__assert_fail@plt+0x12f0>
   128bc:	movw	r0, #1076	; 0x434
   128c0:	add	r3, sp, #4
   128c4:	mov	r1, #0
   128c8:	mov	r2, #10
   128cc:	movt	r0, #2
   128d0:	str	r0, [sp]
   128d4:	mov	r0, r5
   128d8:	bl	1d228 <__assert_fail@plt+0xbc24>
   128dc:	cmp	r0, #0
   128e0:	bne	128fc <__assert_fail@plt+0x12f8>
   128e4:	ldr	r0, [sp, #4]
   128e8:	cmp	r0, #0
   128ec:	ble	128fc <__assert_fail@plt+0x12f8>
   128f0:	str	r0, [r6]
   128f4:	sub	sp, fp, #16
   128f8:	pop	{r4, r5, r6, r7, fp, pc}
   128fc:	bl	114e4 <__errno_location@plt>
   12900:	movw	r1, #992	; 0x3e0
   12904:	ldr	r6, [r0]
   12908:	mov	r0, #0
   1290c:	mov	r2, #5
   12910:	movt	r1, #2
   12914:	bl	1137c <dcgettext@plt>
   12918:	mov	r7, r0
   1291c:	mov	r0, r5
   12920:	bl	1a3bc <__assert_fail@plt+0x8db8>
   12924:	str	r0, [sp]
   12928:	mov	r0, #0
   1292c:	mov	r1, r6
   12930:	mov	r2, r7
   12934:	mov	r3, r4
   12938:	bl	11418 <error@plt>
   1293c:	mov	r0, #1
   12940:	bl	12944 <__assert_fail@plt+0x1340>
   12944:	push	{fp, lr}
   12948:	mov	fp, sp
   1294c:	sub	sp, sp, #56	; 0x38
   12950:	mov	r4, r0
   12954:	cmp	r0, #0
   12958:	bne	12ce8 <__assert_fail@plt+0x16e4>
   1295c:	movw	r1, #62372	; 0xf3a4
   12960:	mov	r0, #0
   12964:	mov	r2, #5
   12968:	movt	r1, #1
   1296c:	bl	1137c <dcgettext@plt>
   12970:	mov	r1, r0
   12974:	movw	r0, #4768	; 0x12a0
   12978:	movt	r0, #3
   1297c:	ldr	r2, [r0]
   12980:	mov	r0, #1
   12984:	bl	11514 <__printf_chk@plt>
   12988:	movw	r1, #62405	; 0xf3c5
   1298c:	mov	r0, #0
   12990:	mov	r2, #5
   12994:	movt	r1, #1
   12998:	bl	1137c <dcgettext@plt>
   1299c:	movw	r7, #4564	; 0x11d4
   129a0:	movt	r7, #3
   129a4:	ldr	r1, [r7]
   129a8:	bl	112c8 <fputs_unlocked@plt>
   129ac:	movw	r1, #1198	; 0x4ae
   129b0:	mov	r0, #0
   129b4:	mov	r2, #5
   129b8:	movt	r1, #2
   129bc:	bl	1137c <dcgettext@plt>
   129c0:	ldr	r1, [r7]
   129c4:	bl	112c8 <fputs_unlocked@plt>
   129c8:	movw	r1, #1254	; 0x4e6
   129cc:	mov	r0, #0
   129d0:	mov	r2, #5
   129d4:	movt	r1, #2
   129d8:	bl	1137c <dcgettext@plt>
   129dc:	ldr	r1, [r7]
   129e0:	bl	112c8 <fputs_unlocked@plt>
   129e4:	movw	r1, #62450	; 0xf3f2
   129e8:	mov	r0, #0
   129ec:	mov	r2, #5
   129f0:	movt	r1, #1
   129f4:	bl	1137c <dcgettext@plt>
   129f8:	ldr	r1, [r7]
   129fc:	bl	112c8 <fputs_unlocked@plt>
   12a00:	movw	r1, #62784	; 0xf540
   12a04:	mov	r0, #0
   12a08:	mov	r2, #5
   12a0c:	movt	r1, #1
   12a10:	bl	1137c <dcgettext@plt>
   12a14:	ldr	r1, [r7]
   12a18:	bl	112c8 <fputs_unlocked@plt>
   12a1c:	movw	r1, #63054	; 0xf64e
   12a20:	mov	r0, #0
   12a24:	mov	r2, #5
   12a28:	movt	r1, #1
   12a2c:	bl	1137c <dcgettext@plt>
   12a30:	ldr	r1, [r7]
   12a34:	bl	112c8 <fputs_unlocked@plt>
   12a38:	movw	r1, #63454	; 0xf7de
   12a3c:	mov	r0, #0
   12a40:	mov	r2, #5
   12a44:	movt	r1, #1
   12a48:	bl	1137c <dcgettext@plt>
   12a4c:	ldr	r1, [r7]
   12a50:	bl	112c8 <fputs_unlocked@plt>
   12a54:	movw	r1, #63881	; 0xf989
   12a58:	mov	r0, #0
   12a5c:	mov	r2, #5
   12a60:	movt	r1, #1
   12a64:	bl	1137c <dcgettext@plt>
   12a68:	ldr	r1, [r7]
   12a6c:	bl	112c8 <fputs_unlocked@plt>
   12a70:	movw	r1, #64101	; 0xfa65
   12a74:	mov	r0, #0
   12a78:	mov	r2, #5
   12a7c:	movt	r1, #1
   12a80:	bl	1137c <dcgettext@plt>
   12a84:	ldr	r1, [r7]
   12a88:	bl	112c8 <fputs_unlocked@plt>
   12a8c:	movw	r1, #64245	; 0xfaf5
   12a90:	mov	r0, #0
   12a94:	mov	r2, #5
   12a98:	movt	r1, #1
   12a9c:	bl	1137c <dcgettext@plt>
   12aa0:	ldr	r1, [r7]
   12aa4:	bl	112c8 <fputs_unlocked@plt>
   12aa8:	movw	r1, #64591	; 0xfc4f
   12aac:	mov	r0, #0
   12ab0:	mov	r2, #5
   12ab4:	movt	r1, #1
   12ab8:	bl	1137c <dcgettext@plt>
   12abc:	ldr	r1, [r7]
   12ac0:	bl	112c8 <fputs_unlocked@plt>
   12ac4:	movw	r1, #64844	; 0xfd4c
   12ac8:	mov	r0, #0
   12acc:	mov	r2, #5
   12ad0:	movt	r1, #1
   12ad4:	bl	1137c <dcgettext@plt>
   12ad8:	ldr	r1, [r7]
   12adc:	bl	112c8 <fputs_unlocked@plt>
   12ae0:	movw	r1, #65170	; 0xfe92
   12ae4:	mov	r0, #0
   12ae8:	mov	r2, #5
   12aec:	movt	r1, #1
   12af0:	bl	1137c <dcgettext@plt>
   12af4:	ldr	r1, [r7]
   12af8:	bl	112c8 <fputs_unlocked@plt>
   12afc:	movw	r1, #65406	; 0xff7e
   12b00:	mov	r0, #0
   12b04:	mov	r2, #5
   12b08:	movt	r1, #1
   12b0c:	bl	1137c <dcgettext@plt>
   12b10:	ldr	r1, [r7]
   12b14:	bl	112c8 <fputs_unlocked@plt>
   12b18:	movw	r1, #65510	; 0xffe6
   12b1c:	mov	r0, #0
   12b20:	mov	r2, #5
   12b24:	movt	r1, #1
   12b28:	bl	1137c <dcgettext@plt>
   12b2c:	ldr	r1, [r7]
   12b30:	bl	112c8 <fputs_unlocked@plt>
   12b34:	movw	r1, #375	; 0x177
   12b38:	mov	r0, #0
   12b3c:	mov	r2, #5
   12b40:	movt	r1, #2
   12b44:	bl	1137c <dcgettext@plt>
   12b48:	ldr	r1, [r7]
   12b4c:	bl	112c8 <fputs_unlocked@plt>
   12b50:	movw	r1, #590	; 0x24e
   12b54:	mov	r0, #0
   12b58:	mov	r2, #5
   12b5c:	movt	r1, #2
   12b60:	bl	1137c <dcgettext@plt>
   12b64:	ldr	r1, [r7]
   12b68:	bl	112c8 <fputs_unlocked@plt>
   12b6c:	movw	r1, #635	; 0x27b
   12b70:	mov	r0, #0
   12b74:	mov	r2, #5
   12b78:	movt	r1, #2
   12b7c:	bl	1137c <dcgettext@plt>
   12b80:	ldr	r1, [r7]
   12b84:	bl	112c8 <fputs_unlocked@plt>
   12b88:	movw	r0, #2128	; 0x850
   12b8c:	mov	r2, #48	; 0x30
   12b90:	mov	r6, sp
   12b94:	movw	r5, #62104	; 0xf298
   12b98:	movt	r0, #2
   12b9c:	movt	r5, #1
   12ba0:	add	r1, r0, #32
   12ba4:	add	r3, r0, #16
   12ba8:	vld1.64	{d18-d19}, [r0], r2
   12bac:	vld1.64	{d16-d17}, [r1]
   12bb0:	vld1.64	{d20-d21}, [r3]
   12bb4:	vldr	d22, [r0]
   12bb8:	add	r1, r6, #32
   12bbc:	add	r0, r6, #16
   12bc0:	vst1.64	{d16-d17}, [r1]
   12bc4:	movw	r1, #1329	; 0x531
   12bc8:	vst1.64	{d20-d21}, [r0]
   12bcc:	mov	r0, r6
   12bd0:	movt	r1, #2
   12bd4:	vst1.64	{d18-d19}, [r0], r2
   12bd8:	vstr	d22, [r0]
   12bdc:	mov	r0, r5
   12be0:	bl	112ec <strcmp@plt>
   12be4:	cmp	r0, #0
   12be8:	ldrne	r1, [r6, #8]!
   12bec:	cmpne	r1, #0
   12bf0:	bne	12bdc <__assert_fail@plt+0x15d8>
   12bf4:	movw	r1, #1424	; 0x590
   12bf8:	ldr	r6, [r6, #4]
   12bfc:	mov	r0, #0
   12c00:	mov	r2, #5
   12c04:	movt	r1, #2
   12c08:	bl	1137c <dcgettext@plt>
   12c0c:	movw	r2, #62107	; 0xf29b
   12c10:	movw	r3, #1447	; 0x5a7
   12c14:	mov	r1, r0
   12c18:	mov	r0, #1
   12c1c:	movt	r2, #1
   12c20:	movt	r3, #2
   12c24:	bl	11514 <__printf_chk@plt>
   12c28:	cmp	r6, #0
   12c2c:	mov	r0, #5
   12c30:	mov	r1, #0
   12c34:	moveq	r6, r5
   12c38:	bl	11574 <setlocale@plt>
   12c3c:	cmp	r0, #0
   12c40:	beq	12c78 <__assert_fail@plt+0x1674>
   12c44:	movw	r1, #1487	; 0x5cf
   12c48:	mov	r2, #3
   12c4c:	movt	r1, #2
   12c50:	bl	115e0 <strncmp@plt>
   12c54:	cmp	r0, #0
   12c58:	beq	12c78 <__assert_fail@plt+0x1674>
   12c5c:	movw	r1, #1491	; 0x5d3
   12c60:	mov	r0, #0
   12c64:	mov	r2, #5
   12c68:	movt	r1, #2
   12c6c:	bl	1137c <dcgettext@plt>
   12c70:	ldr	r1, [r7]
   12c74:	bl	112c8 <fputs_unlocked@plt>
   12c78:	movw	r1, #1562	; 0x61a
   12c7c:	mov	r0, #0
   12c80:	mov	r2, #5
   12c84:	movt	r1, #2
   12c88:	bl	1137c <dcgettext@plt>
   12c8c:	movw	r2, #1447	; 0x5a7
   12c90:	mov	r1, r0
   12c94:	mov	r0, #1
   12c98:	mov	r3, r5
   12c9c:	movt	r2, #2
   12ca0:	bl	11514 <__printf_chk@plt>
   12ca4:	movw	r1, #1589	; 0x635
   12ca8:	mov	r0, #0
   12cac:	mov	r2, #5
   12cb0:	movt	r1, #2
   12cb4:	bl	1137c <dcgettext@plt>
   12cb8:	mov	r1, r0
   12cbc:	movw	r0, #1357	; 0x54d
   12cc0:	movw	r3, #1076	; 0x434
   12cc4:	cmp	r6, r5
   12cc8:	mov	r2, r6
   12ccc:	movt	r0, #2
   12cd0:	movt	r3, #2
   12cd4:	moveq	r3, r0
   12cd8:	mov	r0, #1
   12cdc:	bl	11514 <__printf_chk@plt>
   12ce0:	mov	r0, r4
   12ce4:	bl	1149c <exit@plt>
   12ce8:	movw	r0, #4552	; 0x11c8
   12cec:	movw	r1, #62333	; 0xf37d
   12cf0:	mov	r2, #5
   12cf4:	movt	r0, #3
   12cf8:	movt	r1, #1
   12cfc:	ldr	r5, [r0]
   12d00:	mov	r0, #0
   12d04:	bl	1137c <dcgettext@plt>
   12d08:	mov	r2, r0
   12d0c:	movw	r0, #4768	; 0x12a0
   12d10:	mov	r1, #1
   12d14:	movt	r0, #3
   12d18:	ldr	r3, [r0]
   12d1c:	mov	r0, r5
   12d20:	bl	1152c <__fprintf_chk@plt>
   12d24:	mov	r0, r4
   12d28:	bl	1149c <exit@plt>
   12d2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d30:	add	fp, sp, #28
   12d34:	sub	sp, sp, #36	; 0x24
   12d38:	mov	r5, r0
   12d3c:	movw	r0, #4424	; 0x1148
   12d40:	movw	r2, #4652	; 0x122c
   12d44:	movw	r3, #4624	; 0x1210
   12d48:	mov	r4, r1
   12d4c:	movt	r0, #3
   12d50:	movt	r2, #3
   12d54:	movt	r3, #3
   12d58:	ldr	r0, [r0]
   12d5c:	sub	r1, r0, #10
   12d60:	cmp	r1, #0
   12d64:	str	r1, [r2]
   12d68:	ble	12d7c <__assert_fail@plt+0x1778>
   12d6c:	ldrb	r2, [r3]
   12d70:	cmp	r2, #1
   12d74:	beq	12d90 <__assert_fail@plt+0x178c>
   12d78:	b	12da0 <__assert_fail@plt+0x179c>
   12d7c:	movw	r1, #4625	; 0x1211
   12d80:	mov	r2, #1
   12d84:	movt	r1, #3
   12d88:	strb	r2, [r3]
   12d8c:	strb	r2, [r1]
   12d90:	movw	r1, #4652	; 0x122c
   12d94:	movt	r1, #3
   12d98:	str	r0, [r1]
   12d9c:	mov	r1, r0
   12da0:	movw	r0, #4588	; 0x11ec
   12da4:	movt	r0, #3
   12da8:	ldrb	r0, [r0]
   12dac:	cmp	r0, #1
   12db0:	bne	12dc8 <__assert_fail@plt+0x17c4>
   12db4:	add	r0, r1, r1, lsr #31
   12db8:	movw	r1, #4652	; 0x122c
   12dbc:	movt	r1, #3
   12dc0:	asr	r0, r0, #1
   12dc4:	str	r0, [r1]
   12dc8:	movw	r0, #4606	; 0x11fe
   12dcc:	cmp	r5, #0
   12dd0:	movt	r0, #3
   12dd4:	beq	12df8 <__assert_fail@plt+0x17f4>
   12dd8:	ldrb	r0, [r0]
   12ddc:	mov	r1, #0
   12de0:	cmp	r0, #1
   12de4:	movweq	r0, #4456	; 0x1168
   12de8:	moveq	r1, #1
   12dec:	movteq	r0, #3
   12df0:	streq	r5, [r0]
   12df4:	b	12e00 <__assert_fail@plt+0x17fc>
   12df8:	mov	r1, #0
   12dfc:	strb	r1, [r0]
   12e00:	movw	r0, #4585	; 0x11e9
   12e04:	movw	ip, #4627	; 0x1213
   12e08:	movw	r7, #4617	; 0x1209
   12e0c:	movt	r0, #3
   12e10:	movt	ip, #3
   12e14:	movt	r7, #3
   12e18:	ldrb	r0, [r0]
   12e1c:	cmp	r0, #0
   12e20:	movweq	r2, #4586	; 0x11ea
   12e24:	moveq	r0, #1
   12e28:	movteq	r2, #3
   12e2c:	strbeq	r0, [r2]
   12e30:	movw	r0, #4456	; 0x1168
   12e34:	movw	r2, #4605	; 0x11fd
   12e38:	movt	r0, #3
   12e3c:	movt	r2, #3
   12e40:	ldr	r0, [r0]
   12e44:	cmp	r0, #2
   12e48:	blt	12eb8 <__assert_fail@plt+0x18b4>
   12e4c:	ldrb	r3, [r7]
   12e50:	ldrb	r2, [r2]
   12e54:	cmp	r3, #0
   12e58:	beq	12ecc <__assert_fail@plt+0x18c8>
   12e5c:	movw	r3, #4620	; 0x120c
   12e60:	movt	r3, #3
   12e64:	ldr	r3, [r3]
   12e68:	cmp	r3, #1
   12e6c:	bne	12e98 <__assert_fail@plt+0x1894>
   12e70:	eors	r7, r2, #1
   12e74:	beq	12e98 <__assert_fail@plt+0x1894>
   12e78:	movw	r7, #4440	; 0x1158
   12e7c:	movt	r7, #3
   12e80:	ldr	r6, [r7]
   12e84:	ldrb	r6, [r6]
   12e88:	cmp	r6, #9
   12e8c:	movweq	r6, #1077	; 0x435
   12e90:	movteq	r6, #2
   12e94:	streq	r6, [r7]
   12e98:	mov	r7, #1
   12e9c:	cmp	r3, #1
   12ea0:	strb	r7, [ip]
   12ea4:	bne	12f14 <__assert_fail@plt+0x1910>
   12ea8:	movw	r3, #4440	; 0x1158
   12eac:	movt	r3, #3
   12eb0:	ldr	r3, [r3]
   12eb4:	b	12f08 <__assert_fail@plt+0x1904>
   12eb8:	movw	r7, #4585	; 0x11e9
   12ebc:	ldrb	r2, [r2]
   12ec0:	mov	r3, #1
   12ec4:	movt	r7, #3
   12ec8:	b	12f30 <__assert_fail@plt+0x192c>
   12ecc:	mov	r3, #1
   12ed0:	movw	r6, #4620	; 0x120c
   12ed4:	cmp	r2, #0
   12ed8:	movt	r6, #3
   12edc:	strb	r3, [r7]
   12ee0:	movw	r7, #1075	; 0x433
   12ee4:	strb	r3, [ip]
   12ee8:	movt	r7, #2
   12eec:	str	r3, [r6]
   12ef0:	movw	r3, #1077	; 0x435
   12ef4:	movt	r3, #2
   12ef8:	movne	r3, r7
   12efc:	movw	r7, #4440	; 0x1158
   12f00:	movt	r7, #3
   12f04:	str	r3, [r7]
   12f08:	ldrb	r3, [r3]
   12f0c:	cmp	r3, #9
   12f10:	beq	12f24 <__assert_fail@plt+0x1920>
   12f14:	movw	r3, #4596	; 0x11f4
   12f18:	mov	r7, #1
   12f1c:	movt	r3, #3
   12f20:	strb	r7, [r3]
   12f24:	movw	r7, #4604	; 0x11fc
   12f28:	mov	r3, #1
   12f2c:	movt	r7, #3
   12f30:	strb	r3, [r7]
   12f34:	cmp	r2, #0
   12f38:	mov	r3, #0
   12f3c:	movne	r2, #0
   12f40:	strbne	r2, [ip]
   12f44:	movw	r2, #4607	; 0x11ff
   12f48:	movt	r2, #3
   12f4c:	ldrb	ip, [r2]
   12f50:	movw	r2, #4460	; 0x116c
   12f54:	movt	r2, #3
   12f58:	cmp	ip, #1
   12f5c:	bne	12fc0 <__assert_fail@plt+0x19bc>
   12f60:	movw	r3, #4436	; 0x1154
   12f64:	movw	r7, #4428	; 0x114c
   12f68:	movt	r3, #3
   12f6c:	movt	r7, #3
   12f70:	ldr	r3, [r3]
   12f74:	ldrb	r7, [r7]
   12f78:	str	r3, [r2]
   12f7c:	movw	r3, #4432	; 0x1150
   12f80:	cmp	r7, #9
   12f84:	movt	r3, #3
   12f88:	ldr	r3, [r3]
   12f8c:	bne	12fa4 <__assert_fail@plt+0x19a0>
   12f90:	asr	r7, r3, #31
   12f94:	add	r3, r3, r7, lsr #29
   12f98:	bic	r3, r3, #7
   12f9c:	add	r3, r3, #8
   12fa0:	b	12fa8 <__assert_fail@plt+0x19a4>
   12fa4:	add	r3, r3, #1
   12fa8:	movw	r7, #4656	; 0x1230
   12fac:	cmp	r1, #0
   12fb0:	movt	r7, #3
   12fb4:	movne	r1, r3
   12fb8:	str	r3, [r7]
   12fbc:	mov	r3, r1
   12fc0:	movw	r1, #4620	; 0x120c
   12fc4:	sub	r7, r0, #1
   12fc8:	movt	r1, #3
   12fcc:	ldr	r1, [r1]
   12fd0:	cmn	r1, #1
   12fd4:	ble	12ffc <__assert_fail@plt+0x19f8>
   12fd8:	cmp	r1, #0
   12fdc:	beq	13058 <__assert_fail@plt+0x1a54>
   12fe0:	cmp	r0, #0
   12fe4:	ble	13024 <__assert_fail@plt+0x1a20>
   12fe8:	mvn	r6, #-2147483648	; 0x80000000
   12fec:	udiv	r2, r6, r1
   12ff0:	cmp	r2, r7
   12ff4:	bge	13058 <__assert_fail@plt+0x1a54>
   12ff8:	b	1305c <__assert_fail@plt+0x1a58>
   12ffc:	cmp	r0, #0
   13000:	ble	13040 <__assert_fail@plt+0x1a3c>
   13004:	cmn	r1, #1
   13008:	beq	13058 <__assert_fail@plt+0x1a54>
   1300c:	mov	r2, #-2147483648	; 0x80000000
   13010:	mvn	r6, #-2147483648	; 0x80000000
   13014:	sdiv	r2, r2, r1
   13018:	cmp	r2, r7
   1301c:	bge	13058 <__assert_fail@plt+0x1a54>
   13020:	b	1305c <__assert_fail@plt+0x1a58>
   13024:	beq	13054 <__assert_fail@plt+0x1a50>
   13028:	mov	r2, #-2147483648	; 0x80000000
   1302c:	mvn	r6, #-2147483648	; 0x80000000
   13030:	sdiv	r2, r2, r7
   13034:	cmp	r2, r1
   13038:	mulge	r6, r7, r1
   1303c:	b	1305c <__assert_fail@plt+0x1a58>
   13040:	mvn	r6, #-2147483648	; 0x80000000
   13044:	sdiv	r2, r6, r1
   13048:	cmp	r0, r2
   1304c:	bgt	13058 <__assert_fail@plt+0x1a54>
   13050:	b	1305c <__assert_fail@plt+0x1a58>
   13054:	mvn	r7, #0
   13058:	mul	r6, r7, r1
   1305c:	movw	r1, #4444	; 0x115c
   13060:	movw	sl, #4660	; 0x1234
   13064:	movt	r1, #3
   13068:	movt	sl, #3
   1306c:	ldr	r1, [r1]
   13070:	sub	r1, r1, r3
   13074:	subs	r1, r1, r6
   13078:	movvs	r1, #0
   1307c:	sdiv	r0, r1, r0
   13080:	cmp	r0, #0
   13084:	str	r0, [sl]
   13088:	ble	146f8 <__assert_fail@plt+0x30f4>
   1308c:	cmp	ip, #0
   13090:	beq	130c4 <__assert_fail@plt+0x1ac0>
   13094:	movw	r6, #4664	; 0x1238
   13098:	movt	r6, #3
   1309c:	ldr	r0, [r6]
   130a0:	bl	165a4 <__assert_fail@plt+0x4fa0>
   130a4:	movw	r0, #4432	; 0x1150
   130a8:	movt	r0, #3
   130ac:	ldr	r0, [r0]
   130b0:	cmp	r0, #11
   130b4:	movls	r0, #11
   130b8:	add	r0, r0, #1
   130bc:	bl	1b280 <__assert_fail@plt+0x9c7c>
   130c0:	str	r0, [r6]
   130c4:	movw	r6, #4668	; 0x123c
   130c8:	movt	r6, #3
   130cc:	ldr	r0, [r6]
   130d0:	bl	165a4 <__assert_fail@plt+0x4fa0>
   130d4:	movw	r0, #4412	; 0x113c
   130d8:	movt	r0, #3
   130dc:	ldr	r0, [r0]
   130e0:	cmp	r0, #8
   130e4:	movle	r0, #8
   130e8:	bl	1b280 <__assert_fail@plt+0x9c7c>
   130ec:	movw	r8, #4672	; 0x1240
   130f0:	movw	r7, #4676	; 0x1244
   130f4:	str	r0, [r6]
   130f8:	mov	r0, #0
   130fc:	movt	r8, #3
   13100:	movt	r7, #3
   13104:	str	r0, [r8]
   13108:	ldr	r0, [r7]
   1310c:	bl	165a4 <__assert_fail@plt+0x4fa0>
   13110:	movw	r0, #4456	; 0x1168
   13114:	mov	r1, #40	; 0x28
   13118:	movt	r0, #3
   1311c:	ldr	r0, [r0]
   13120:	bl	1b350 <__assert_fail@plt+0x9d4c>
   13124:	mov	r6, r0
   13128:	str	r0, [r7]
   1312c:	movw	r0, #4606	; 0x11fe
   13130:	movt	r0, #3
   13134:	ldrb	r0, [r0]
   13138:	cmp	r0, #1
   1313c:	beq	13190 <__assert_fail@plt+0x1b8c>
   13140:	cmp	r5, #1
   13144:	blt	13200 <__assert_fail@plt+0x1bfc>
   13148:	ldr	r0, [r4]
   1314c:	mov	r1, r6
   13150:	bl	14748 <__assert_fail@plt+0x3144>
   13154:	movw	r5, #4606	; 0x11fe
   13158:	cmp	r0, #0
   1315c:	movt	r5, #3
   13160:	beq	146f0 <__assert_fail@plt+0x30ec>
   13164:	ldr	r0, [r6]
   13168:	ldr	r4, [r4]
   1316c:	bl	11520 <fileno@plt>
   13170:	mov	r1, r0
   13174:	mov	r0, r4
   13178:	bl	1486c <__assert_fail@plt+0x3268>
   1317c:	mov	r0, #0
   13180:	str	r0, [r6, #24]
   13184:	b	13268 <__assert_fail@plt+0x1c64>
   13188:	add	r4, r4, #4
   1318c:	add	r6, r6, #40	; 0x28
   13190:	cmp	r5, #0
   13194:	beq	131d0 <__assert_fail@plt+0x1bcc>
   13198:	ldr	r0, [r4]
   1319c:	mov	r1, r6
   131a0:	bl	14748 <__assert_fail@plt+0x3144>
   131a4:	sub	r5, r5, #1
   131a8:	cmp	r0, #0
   131ac:	bne	13188 <__assert_fail@plt+0x1b84>
   131b0:	movw	r0, #4456	; 0x1168
   131b4:	sub	r6, r6, #40	; 0x28
   131b8:	movt	r0, #3
   131bc:	mov	r1, r0
   131c0:	ldr	r0, [r0]
   131c4:	sub	r0, r0, #1
   131c8:	str	r0, [r1]
   131cc:	b	13188 <__assert_fail@plt+0x1b84>
   131d0:	movw	r0, #4456	; 0x1168
   131d4:	movw	r5, #4606	; 0x11fe
   131d8:	movt	r0, #3
   131dc:	movt	r5, #3
   131e0:	ldr	r0, [r0]
   131e4:	cmp	r0, #0
   131e8:	beq	146f0 <__assert_fail@plt+0x30ec>
   131ec:	movw	r0, #1076	; 0x434
   131f0:	mvn	r1, #0
   131f4:	movt	r0, #2
   131f8:	bl	1486c <__assert_fail@plt+0x3268>
   131fc:	b	132f0 <__assert_fail@plt+0x1cec>
   13200:	movw	r1, #62318	; 0xf36e
   13204:	mov	r0, #0
   13208:	mov	r2, #5
   1320c:	mov	r4, #0
   13210:	movt	r1, #1
   13214:	bl	1137c <dcgettext@plt>
   13218:	movw	r1, #4560	; 0x11d0
   1321c:	strb	r4, [r6, #37]	; 0x25
   13220:	movw	r2, #4633	; 0x1219
   13224:	mov	r3, #1
   13228:	movt	r1, #3
   1322c:	movt	r2, #3
   13230:	ldr	r1, [r1]
   13234:	strb	r3, [r2]
   13238:	str	r1, [r6]
   1323c:	stmib	r6, {r0, r4}
   13240:	ldr	r0, [r8]
   13244:	mvn	r1, #0
   13248:	add	r0, r0, #1
   1324c:	str	r0, [r8]
   13250:	movw	r0, #1076	; 0x434
   13254:	movt	r0, #2
   13258:	bl	1486c <__assert_fail@plt+0x3268>
   1325c:	movw	r5, #4606	; 0x11fe
   13260:	str	r4, [r6, #24]
   13264:	movt	r5, #3
   13268:	movw	r0, #4456	; 0x1168
   1326c:	movt	r0, #3
   13270:	ldr	r3, [r0]
   13274:	subs	r2, r3, #1
   13278:	beq	132f0 <__assert_fail@plt+0x1cec>
   1327c:	ldm	r6, {r0, r1}
   13280:	tst	r3, #1
   13284:	bne	132b0 <__assert_fail@plt+0x1cac>
   13288:	mov	r2, #0
   1328c:	add	ip, r6, #40	; 0x28
   13290:	add	r7, r6, #80	; 0x50
   13294:	strb	r2, [r6, #77]	; 0x4d
   13298:	stm	ip, {r0, r1, r2}
   1329c:	str	r2, [r6, #64]	; 0x40
   132a0:	sub	r2, r3, #2
   132a4:	cmp	r3, #2
   132a8:	bne	132bc <__assert_fail@plt+0x1cb8>
   132ac:	b	132f0 <__assert_fail@plt+0x1cec>
   132b0:	add	r7, r6, #40	; 0x28
   132b4:	cmp	r3, #2
   132b8:	beq	132f0 <__assert_fail@plt+0x1cec>
   132bc:	add	r3, r7, #77	; 0x4d
   132c0:	mov	r7, #0
   132c4:	sub	ip, r3, #77	; 0x4d
   132c8:	strb	r7, [r3, #-40]	; 0xffffffd8
   132cc:	subs	r2, r2, #2
   132d0:	stm	ip, {r0, r1, r7}
   132d4:	sub	ip, r3, #37	; 0x25
   132d8:	str	r7, [r3, #-53]	; 0xffffffcb
   132dc:	strb	r7, [r3]
   132e0:	stm	ip, {r0, r1, r7}
   132e4:	str	r7, [r3, #-13]
   132e8:	add	r3, r3, #80	; 0x50
   132ec:	bne	132c4 <__assert_fail@plt+0x1cc0>
   132f0:	ldr	r0, [r8]
   132f4:	movw	r1, #4680	; 0x1248
   132f8:	movt	r1, #3
   132fc:	str	r0, [r1]
   13300:	movw	r0, #4585	; 0x11e9
   13304:	movt	r0, #3
   13308:	ldrb	r0, [r0]
   1330c:	cmp	r0, #0
   13310:	bne	134ec <__assert_fail@plt+0x1ee8>
   13314:	movw	r0, #4456	; 0x1168
   13318:	movw	r1, #4652	; 0x122c
   1331c:	movt	r0, #3
   13320:	movt	r1, #3
   13324:	ldr	r0, [r0]
   13328:	cmn	r0, #1
   1332c:	ble	13358 <__assert_fail@plt+0x1d54>
   13330:	ldr	r1, [r1]
   13334:	cmp	r0, #0
   13338:	beq	133b0 <__assert_fail@plt+0x1dac>
   1333c:	cmn	r1, #1
   13340:	ble	13380 <__assert_fail@plt+0x1d7c>
   13344:	mvn	r2, #-2147483648	; 0x80000000
   13348:	udiv	r2, r2, r0
   1334c:	cmp	r2, r1
   13350:	bge	133b0 <__assert_fail@plt+0x1dac>
   13354:	b	133c4 <__assert_fail@plt+0x1dc0>
   13358:	ldr	r1, [r1]
   1335c:	cmn	r1, #1
   13360:	ble	13398 <__assert_fail@plt+0x1d94>
   13364:	cmn	r0, #1
   13368:	beq	133b0 <__assert_fail@plt+0x1dac>
   1336c:	mov	r2, #-2147483648	; 0x80000000
   13370:	sdiv	r2, r2, r0
   13374:	cmp	r2, r1
   13378:	bge	133b0 <__assert_fail@plt+0x1dac>
   1337c:	b	133c4 <__assert_fail@plt+0x1dc0>
   13380:	beq	133ac <__assert_fail@plt+0x1da8>
   13384:	mov	r2, #-2147483648	; 0x80000000
   13388:	sdiv	r2, r2, r1
   1338c:	cmp	r2, r0
   13390:	bge	133b0 <__assert_fail@plt+0x1dac>
   13394:	b	133c4 <__assert_fail@plt+0x1dc0>
   13398:	mvn	r2, #-2147483648	; 0x80000000
   1339c:	sdiv	r2, r2, r0
   133a0:	cmp	r1, r2
   133a4:	bge	133b0 <__assert_fail@plt+0x1dac>
   133a8:	b	133c4 <__assert_fail@plt+0x1dc0>
   133ac:	mvn	r1, #0
   133b0:	mul	r4, r1, r0
   133b4:	adds	r5, r4, #1
   133b8:	ldrvc	r0, [sl]
   133bc:	addsvc	r6, r0, #1
   133c0:	bvc	133c8 <__assert_fail@plt+0x1dc4>
   133c4:	bl	1471c <__assert_fail@plt+0x3118>
   133c8:	cmn	r6, #1
   133cc:	ble	133f4 <__assert_fail@plt+0x1df0>
   133d0:	cmp	r6, #0
   133d4:	beq	13440 <__assert_fail@plt+0x1e3c>
   133d8:	cmn	r4, #1
   133dc:	ble	13418 <__assert_fail@plt+0x1e14>
   133e0:	mvn	r0, #-2147483648	; 0x80000000
   133e4:	udiv	r0, r0, r6
   133e8:	cmp	r0, r4
   133ec:	bge	13440 <__assert_fail@plt+0x1e3c>
   133f0:	b	133c4 <__assert_fail@plt+0x1dc0>
   133f4:	cmn	r4, #1
   133f8:	ble	13430 <__assert_fail@plt+0x1e2c>
   133fc:	cmn	r6, #1
   13400:	beq	13440 <__assert_fail@plt+0x1e3c>
   13404:	mov	r0, #-2147483648	; 0x80000000
   13408:	sdiv	r0, r0, r6
   1340c:	cmp	r0, r4
   13410:	bge	13440 <__assert_fail@plt+0x1e3c>
   13414:	b	133c4 <__assert_fail@plt+0x1dc0>
   13418:	beq	13440 <__assert_fail@plt+0x1e3c>
   1341c:	mov	r0, #-2147483648	; 0x80000000
   13420:	sdiv	r0, r0, r4
   13424:	cmp	r0, r6
   13428:	bge	13440 <__assert_fail@plt+0x1e3c>
   1342c:	b	133c4 <__assert_fail@plt+0x1dc0>
   13430:	mvn	r0, #-2147483648	; 0x80000000
   13434:	sdiv	r0, r0, r6
   13438:	cmp	r4, r0
   1343c:	blt	133c4 <__assert_fail@plt+0x1dc0>
   13440:	movw	r0, #4708	; 0x1264
   13444:	movt	r0, #3
   13448:	mov	r7, r0
   1344c:	ldr	r0, [r0]
   13450:	bl	165a4 <__assert_fail@plt+0x4fa0>
   13454:	mov	r0, r5
   13458:	mov	r1, #4
   1345c:	bl	1b350 <__assert_fail@plt+0x9d4c>
   13460:	str	r0, [r7]
   13464:	movw	r0, #4712	; 0x1268
   13468:	movt	r0, #3
   1346c:	mov	r5, r0
   13470:	ldr	r0, [r0]
   13474:	bl	165a4 <__assert_fail@plt+0x4fa0>
   13478:	mov	r0, r4
   1347c:	mov	r1, #4
   13480:	bl	1b350 <__assert_fail@plt+0x9d4c>
   13484:	str	r0, [r5]
   13488:	movw	r5, #4716	; 0x126c
   1348c:	movt	r5, #3
   13490:	ldr	r0, [r5]
   13494:	bl	165a4 <__assert_fail@plt+0x4fa0>
   13498:	movw	r0, #4617	; 0x1209
   1349c:	mul	r4, r6, r4
   134a0:	mov	r1, #1
   134a4:	mov	r6, #1
   134a8:	movt	r0, #3
   134ac:	mov	r7, r0
   134b0:	ldrb	r0, [r0]
   134b4:	cmp	r0, #0
   134b8:	mov	r0, r4
   134bc:	movwne	r1, #2
   134c0:	bl	1b350 <__assert_fail@plt+0x9d4c>
   134c4:	str	r0, [r5]
   134c8:	ldrb	r0, [r7]
   134cc:	movw	r1, #4720	; 0x1270
   134d0:	movw	r5, #4606	; 0x11fe
   134d4:	movt	r5, #3
   134d8:	movt	r1, #3
   134dc:	cmp	r0, #0
   134e0:	movwne	r6, #2
   134e4:	mul	r0, r6, r4
   134e8:	str	r0, [r1]
   134ec:	movw	r0, #4576	; 0x11e0
   134f0:	mov	r9, #0
   134f4:	movt	r0, #3
   134f8:	ldm	r0, {r1, r2}
   134fc:	mov	r0, #1
   13500:	str	r2, [sp, #28]
   13504:	str	r1, [sp, #24]
   13508:	subs	r1, r1, #2
   1350c:	sbcs	r1, r2, #0
   13510:	mov	r1, #0
   13514:	bcc	13830 <__assert_fail@plt+0x222c>
   13518:	movw	r0, #4456	; 0x1168
   1351c:	mov	r1, #1
   13520:	mov	sl, #0
   13524:	movt	r0, #3
   13528:	ldr	r6, [r0]
   1352c:	b	1356c <__assert_fail@plt+0x1f68>
   13530:	movw	r1, #4724	; 0x1274
   13534:	mov	r0, #0
   13538:	movt	r1, #3
   1353c:	strb	r0, [r1]
   13540:	ldr	r0, [r4]
   13544:	cmp	r0, #1
   13548:	blt	137c8 <__assert_fail@plt+0x21c4>
   1354c:	ldr	r1, [sp, #32]
   13550:	ldr	r0, [sp, #24]
   13554:	adds	r1, r1, #1
   13558:	adc	sl, sl, #0
   1355c:	subs	r0, r1, r0
   13560:	ldr	r0, [sp, #28]
   13564:	sbcs	r0, sl, r0
   13568:	bcs	1381c <__assert_fail@plt+0x2218>
   1356c:	movw	r0, #4652	; 0x122c
   13570:	str	r1, [sp, #32]
   13574:	movt	r0, #3
   13578:	ldr	r1, [r0]
   1357c:	cmp	r1, #2
   13580:	blt	1360c <__assert_fail@plt+0x2008>
   13584:	mov	r7, #1
   13588:	cmp	r6, #1
   1358c:	bge	135bc <__assert_fail@plt+0x1fb8>
   13590:	b	135a8 <__assert_fail@plt+0x1fa4>
   13594:	movw	r0, #4652	; 0x122c
   13598:	movw	r5, #4606	; 0x11fe
   1359c:	movt	r0, #3
   135a0:	movt	r5, #3
   135a4:	ldr	r1, [r0]
   135a8:	add	r7, r7, #1
   135ac:	cmp	r7, r1
   135b0:	bge	1360c <__assert_fail@plt+0x2008>
   135b4:	cmp	r6, #1
   135b8:	blt	135a8 <__assert_fail@plt+0x1fa4>
   135bc:	movw	r0, #4676	; 0x1244
   135c0:	mov	r5, #1
   135c4:	movt	r0, #3
   135c8:	ldr	r4, [r0]
   135cc:	b	135e4 <__assert_fail@plt+0x1fe0>
   135d0:	add	r0, r5, #1
   135d4:	cmp	r5, r6
   135d8:	add	r4, r4, #40	; 0x28
   135dc:	mov	r5, r0
   135e0:	bge	13594 <__assert_fail@plt+0x1f90>
   135e4:	ldr	r0, [r4, #8]
   135e8:	cmp	r0, #0
   135ec:	bne	135d0 <__assert_fail@plt+0x1fcc>
   135f0:	mov	r0, r4
   135f4:	mov	r1, r5
   135f8:	bl	14a2c <__assert_fail@plt+0x3428>
   135fc:	movw	r0, #4456	; 0x1168
   13600:	movt	r0, #3
   13604:	ldr	r6, [r0]
   13608:	b	135d0 <__assert_fail@plt+0x1fcc>
   1360c:	movw	r0, #4724	; 0x1274
   13610:	mov	r1, #1
   13614:	cmp	r6, #0
   13618:	movt	r0, #3
   1361c:	strb	r1, [r0]
   13620:	movw	r0, #4676	; 0x1244
   13624:	movt	r0, #3
   13628:	ble	13718 <__assert_fail@plt+0x2114>
   1362c:	ldr	r4, [r0]
   13630:	mov	r5, #1
   13634:	b	1364c <__assert_fail@plt+0x2048>
   13638:	add	r0, r5, #1
   1363c:	cmp	r5, r6
   13640:	add	r4, r4, #40	; 0x28
   13644:	mov	r5, r0
   13648:	bge	13674 <__assert_fail@plt+0x2070>
   1364c:	ldr	r0, [r4, #8]
   13650:	cmp	r0, #0
   13654:	bne	13638 <__assert_fail@plt+0x2034>
   13658:	mov	r0, r4
   1365c:	mov	r1, r5
   13660:	bl	14a2c <__assert_fail@plt+0x3428>
   13664:	movw	r0, #4456	; 0x1168
   13668:	movt	r0, #3
   1366c:	ldr	r6, [r0]
   13670:	b	13638 <__assert_fail@plt+0x2034>
   13674:	movw	r0, #4676	; 0x1244
   13678:	movw	r4, #4680	; 0x1248
   1367c:	cmp	r6, #1
   13680:	movt	r0, #3
   13684:	movt	r4, #3
   13688:	ldr	r1, [r0]
   1368c:	movw	r0, #4585	; 0x11e9
   13690:	movt	r0, #3
   13694:	ldrb	r2, [r0]
   13698:	blt	13774 <__assert_fail@plt+0x2170>
   1369c:	movw	r5, #4606	; 0x11fe
   136a0:	cmp	r2, #0
   136a4:	movt	r5, #3
   136a8:	bne	13730 <__assert_fail@plt+0x212c>
   136ac:	and	r7, r6, #1
   136b0:	cmp	r6, #1
   136b4:	mov	r3, r1
   136b8:	beq	136f0 <__assert_fail@plt+0x20ec>
   136bc:	sub	r2, r7, r6
   136c0:	mov	r3, r1
   136c4:	ldr	r0, [r3, #8]
   136c8:	cmp	r0, #3
   136cc:	movne	r0, #2
   136d0:	strne	r0, [r3, #8]
   136d4:	ldr	r0, [r3, #48]	; 0x30
   136d8:	cmp	r0, #3
   136dc:	movne	r0, #2
   136e0:	strne	r0, [r3, #48]	; 0x30
   136e4:	adds	r2, r2, #2
   136e8:	add	r3, r3, #80	; 0x50
   136ec:	bne	136c4 <__assert_fail@plt+0x20c0>
   136f0:	mov	r2, #0
   136f4:	cmp	r7, #0
   136f8:	beq	13730 <__assert_fail@plt+0x212c>
   136fc:	ldr	r0, [r3, #8]
   13700:	cmp	r0, #3
   13704:	movne	r0, #2
   13708:	strne	r0, [r3, #8]
   1370c:	cmp	r6, #0
   13710:	bne	13738 <__assert_fail@plt+0x2134>
   13714:	b	13784 <__assert_fail@plt+0x2180>
   13718:	ldr	r1, [r0]
   1371c:	movw	r0, #4585	; 0x11e9
   13720:	movw	r4, #4680	; 0x1248
   13724:	movt	r0, #3
   13728:	movt	r4, #3
   1372c:	ldrb	r2, [r0]
   13730:	cmp	r6, #0
   13734:	beq	13784 <__assert_fail@plt+0x2180>
   13738:	add	r3, r1, #8
   1373c:	mov	r0, r6
   13740:	b	13750 <__assert_fail@plt+0x214c>
   13744:	add	r3, r3, #40	; 0x28
   13748:	subs	r0, r0, #1
   1374c:	beq	13784 <__assert_fail@plt+0x2180>
   13750:	ldr	r7, [r3]
   13754:	cmp	r7, #2
   13758:	bne	13744 <__assert_fail@plt+0x2140>
   1375c:	mov	r7, #0
   13760:	str	r7, [r3]
   13764:	ldr	r7, [r4]
   13768:	add	r7, r7, #1
   1376c:	str	r7, [r4]
   13770:	b	13744 <__assert_fail@plt+0x2140>
   13774:	movw	r5, #4606	; 0x11fe
   13778:	movt	r5, #3
   1377c:	cmp	r6, #0
   13780:	bne	13738 <__assert_fail@plt+0x2134>
   13784:	cmp	r2, #0
   13788:	bne	13530 <__assert_fail@plt+0x1f2c>
   1378c:	ldr	r0, [r1, #8]
   13790:	cmp	r0, #3
   13794:	beq	137b4 <__assert_fail@plt+0x21b0>
   13798:	movw	r1, #4724	; 0x1274
   1379c:	mov	r0, #0
   137a0:	movt	r1, #3
   137a4:	strb	r0, [r1]
   137a8:	mov	r0, #1
   137ac:	str	r0, [r4]
   137b0:	b	1354c <__assert_fail@plt+0x1f48>
   137b4:	movw	r1, #4724	; 0x1274
   137b8:	mov	r0, #0
   137bc:	movt	r1, #3
   137c0:	str	r0, [r4]
   137c4:	strb	r0, [r1]
   137c8:	movw	r1, #1087	; 0x43f
   137cc:	mov	r0, #0
   137d0:	mov	r2, #5
   137d4:	movt	r1, #2
   137d8:	bl	1137c <dcgettext@plt>
   137dc:	mov	r2, r0
   137e0:	ldr	r0, [sp, #24]
   137e4:	mov	r1, #0
   137e8:	str	sl, [sp, #12]
   137ec:	str	r0, [sp]
   137f0:	ldr	r0, [sp, #28]
   137f4:	str	r0, [sp, #4]
   137f8:	ldr	r0, [sp, #32]
   137fc:	str	r0, [sp, #8]
   13800:	mov	r0, #0
   13804:	bl	11418 <error@plt>
   13808:	movw	r0, #4680	; 0x1248
   1380c:	movt	r0, #3
   13810:	ldr	r0, [r0]
   13814:	cmp	r0, #1
   13818:	blt	146f0 <__assert_fail@plt+0x30ec>
   1381c:	movw	r0, #4576	; 0x11e0
   13820:	movw	sl, #4660	; 0x1234
   13824:	movt	r0, #3
   13828:	movt	sl, #3
   1382c:	ldrd	r0, [r0]
   13830:	movw	r2, #4640	; 0x1220
   13834:	movt	r2, #3
   13838:	strd	r0, [r2]
   1383c:	movw	r0, #4627	; 0x1213
   13840:	movt	r0, #3
   13844:	ldrb	r8, [r0]
   13848:	movw	r0, #4612	; 0x1204
   1384c:	movt	r0, #3
   13850:	ldr	r0, [r0]
   13854:	cmp	r8, #1
   13858:	bne	138a0 <__assert_fail@plt+0x229c>
   1385c:	ldrb	r1, [r5]
   13860:	cmp	r1, #1
   13864:	bne	13898 <__assert_fail@plt+0x2294>
   13868:	movw	r1, #4607	; 0x11ff
   1386c:	movt	r1, #3
   13870:	ldrb	r1, [r1]
   13874:	cmp	r1, #1
   13878:	bne	13898 <__assert_fail@plt+0x2294>
   1387c:	movw	r2, #4656	; 0x1230
   13880:	ldr	r1, [sl]
   13884:	movt	r2, #3
   13888:	ldr	r2, [r2]
   1388c:	add	r1, r1, r0
   13890:	add	r9, r1, r2
   13894:	b	138a0 <__assert_fail@plt+0x229c>
   13898:	ldr	r1, [sl]
   1389c:	add	r9, r1, r0
   138a0:	movw	r1, #4620	; 0x120c
   138a4:	movt	r1, #3
   138a8:	ldr	r1, [r1]
   138ac:	add	r2, r1, r0
   138b0:	movw	r0, #4585	; 0x11e9
   138b4:	str	r1, [sp, #32]
   138b8:	movt	r0, #3
   138bc:	ldrb	r3, [r0]
   138c0:	movw	r0, #4456	; 0x1168
   138c4:	movt	r0, #3
   138c8:	ldr	ip, [r0]
   138cc:	movw	r0, #4676	; 0x1244
   138d0:	movt	r0, #3
   138d4:	ldr	r4, [r0]
   138d8:	mov	r0, #1
   138dc:	cmp	ip, #2
   138e0:	blt	139bc <__assert_fail@plt+0x23b8>
   138e4:	movw	r0, #21004	; 0x520c
   138e8:	movw	r1, #20160	; 0x4ec0
   138ec:	cmp	r3, #0
   138f0:	str	r3, [sp, #16]
   138f4:	movw	r3, #20068	; 0x4e64
   138f8:	mov	r7, r4
   138fc:	movt	r0, #1
   13900:	movt	r1, #1
   13904:	movt	r3, #1
   13908:	movne	r1, r0
   1390c:	movw	r0, #20808	; 0x5148
   13910:	movt	r0, #1
   13914:	str	r1, [sp, #28]
   13918:	mov	r1, r5
   1391c:	sub	r5, ip, #1
   13920:	ldrb	r1, [r1]
   13924:	movne	r3, r0
   13928:	movw	r0, #4607	; 0x11ff
   1392c:	movt	r0, #3
   13930:	str	r3, [sp, #24]
   13934:	ldr	r3, [sl]
   13938:	ldrb	r0, [r0]
   1393c:	eor	r1, r1, #1
   13940:	str	r1, [sp, #20]
   13944:	mov	r1, #0
   13948:	b	13984 <__assert_fail@plt+0x2380>
   1394c:	str	r2, [r7, #32]
   13950:	and	r2, lr, #1
   13954:	cmp	r8, #0
   13958:	add	r1, r1, #1
   1395c:	strb	r2, [r7, #36]	; 0x24
   13960:	ldr	r2, [sp, #32]
   13964:	add	r7, r7, #40	; 0x28
   13968:	add	r6, r9, r2
   1396c:	mov	r2, r8
   13970:	mov	r9, r8
   13974:	movne	r2, r6
   13978:	addne	r9, r6, r3
   1397c:	cmp	r5, r1
   13980:	beq	139c4 <__assert_fail@plt+0x23c0>
   13984:	ldr	r6, [sp, #28]
   13988:	cmp	r0, #0
   1398c:	mov	lr, #0
   13990:	str	r6, [r7, #12]
   13994:	ldr	r6, [sp, #24]
   13998:	str	r6, [r7, #16]
   1399c:	beq	1394c <__assert_fail@plt+0x2348>
   139a0:	mov	sl, r5
   139a4:	ldr	r5, [sp, #20]
   139a8:	clz	r6, r1
   139ac:	lsr	r6, r6, #5
   139b0:	orr	lr, r6, r5
   139b4:	mov	r5, sl
   139b8:	b	1394c <__assert_fail@plt+0x2348>
   139bc:	mov	r7, r4
   139c0:	b	139d4 <__assert_fail@plt+0x23d0>
   139c4:	ldr	r3, [sp, #16]
   139c8:	movw	r5, #4606	; 0x11fe
   139cc:	mov	r0, ip
   139d0:	movt	r5, #3
   139d4:	movw	r6, #4460	; 0x116c
   139d8:	cmp	r3, #0
   139dc:	movt	r6, #3
   139e0:	mov	lr, r6
   139e4:	bne	13a10 <__assert_fail@plt+0x240c>
   139e8:	movw	r1, #4586	; 0x11ea
   139ec:	movt	r1, #3
   139f0:	ldrb	r1, [r1]
   139f4:	cmp	r1, #0
   139f8:	beq	13a10 <__assert_fail@plt+0x240c>
   139fc:	movw	r1, #20160	; 0x4ec0
   13a00:	movw	r6, #20068	; 0x4e64
   13a04:	movt	r1, #1
   13a08:	movt	r6, #1
   13a0c:	b	13a20 <__assert_fail@plt+0x241c>
   13a10:	movw	r1, #21004	; 0x520c
   13a14:	movw	r6, #20808	; 0x5148
   13a18:	movt	r1, #1
   13a1c:	movt	r6, #1
   13a20:	str	r1, [r7, #12]
   13a24:	movw	r1, #4607	; 0x11ff
   13a28:	str	r6, [r7, #16]
   13a2c:	mov	sl, #0
   13a30:	movt	r1, #3
   13a34:	ldrb	r1, [r1]
   13a38:	cmp	r1, #1
   13a3c:	mov	r1, #0
   13a40:	bne	13a60 <__assert_fail@plt+0x245c>
   13a44:	ldrb	r1, [r5]
   13a48:	sub	r0, r0, #1
   13a4c:	clz	r0, r0
   13a50:	lsr	r0, r0, #5
   13a54:	mvn	r1, r1
   13a58:	orr	r0, r0, r1
   13a5c:	and	r1, r0, #1
   13a60:	str	r2, [r7, #32]
   13a64:	strb	r1, [r7, #36]	; 0x24
   13a68:	movw	r1, #4648	; 0x1228
   13a6c:	mov	r9, #10
   13a70:	ldr	r0, [lr]
   13a74:	movt	r1, #3
   13a78:	str	r0, [r1]
   13a7c:	tst	r3, #1
   13a80:	beq	13b08 <__assert_fail@plt+0x2504>
   13a84:	cmp	ip, #0
   13a88:	beq	146f0 <__assert_fail@plt+0x30ec>
   13a8c:	movw	r0, #4652	; 0x122c
   13a90:	tst	ip, #1
   13a94:	mov	r2, r4
   13a98:	mov	r1, ip
   13a9c:	movt	r0, #3
   13aa0:	ldr	r0, [r0]
   13aa4:	beq	13ac4 <__assert_fail@plt+0x24c0>
   13aa8:	ldr	r1, [r4, #8]
   13aac:	add	r2, r4, #40	; 0x28
   13ab0:	cmp	r1, #0
   13ab4:	mov	r1, #0
   13ab8:	moveq	r1, r0
   13abc:	str	r1, [r4, #28]
   13ac0:	sub	r1, ip, #1
   13ac4:	cmp	ip, #1
   13ac8:	beq	13df4 <__assert_fail@plt+0x27f0>
   13acc:	add	r2, r2, #48	; 0x30
   13ad0:	ldr	r3, [r2, #-40]	; 0xffffffd8
   13ad4:	ldr	r7, [r2]
   13ad8:	cmp	r3, #0
   13adc:	mov	r3, #0
   13ae0:	moveq	r3, r0
   13ae4:	cmp	r7, #0
   13ae8:	str	r3, [r2, #-20]	; 0xffffffec
   13aec:	mov	r3, #0
   13af0:	moveq	r3, r0
   13af4:	subs	r1, r1, #2
   13af8:	str	r3, [r2, #20]
   13afc:	add	r2, r2, #80	; 0x50
   13b00:	bne	13ad0 <__assert_fail@plt+0x24cc>
   13b04:	b	13df4 <__assert_fail@plt+0x27f0>
   13b08:	movw	r0, #4728	; 0x1278
   13b0c:	movt	r0, #3
   13b10:	str	sl, [r0]
   13b14:	movw	r0, #4586	; 0x11ea
   13b18:	movt	r0, #3
   13b1c:	ldrb	r2, [r0]
   13b20:	eor	r0, r2, #1
   13b24:	sub	r7, ip, r0
   13b28:	cmp	r7, #0
   13b2c:	ble	13ce0 <__assert_fail@plt+0x26dc>
   13b30:	mvn	r0, r0
   13b34:	add	r1, ip, r0
   13b38:	and	r0, r7, #3
   13b3c:	cmp	r1, #3
   13b40:	mov	r1, r4
   13b44:	bcc	13b6c <__assert_fail@plt+0x2568>
   13b48:	sub	r3, r7, r0
   13b4c:	mov	r1, r4
   13b50:	str	sl, [r1, #144]	; 0x90
   13b54:	str	sl, [r1, #104]	; 0x68
   13b58:	str	sl, [r1, #64]	; 0x40
   13b5c:	str	sl, [r1, #24]
   13b60:	subs	r3, r3, #4
   13b64:	add	r1, r1, #160	; 0xa0
   13b68:	bne	13b50 <__assert_fail@plt+0x254c>
   13b6c:	movw	r6, #4680	; 0x1248
   13b70:	cmp	r0, #0
   13b74:	movt	r6, #3
   13b78:	beq	13b8c <__assert_fail@plt+0x2588>
   13b7c:	add	r1, r1, #24
   13b80:	str	sl, [r1], #40	; 0x28
   13b84:	subs	r0, r0, #1
   13b88:	bne	13b80 <__assert_fail@plt+0x257c>
   13b8c:	cmp	r7, #1
   13b90:	blt	13ce0 <__assert_fail@plt+0x26dc>
   13b94:	ldr	r1, [r6]
   13b98:	cmp	r1, #0
   13b9c:	beq	13ce0 <__assert_fail@plt+0x26dc>
   13ba0:	mov	r9, #1
   13ba4:	mov	r0, #0
   13ba8:	mov	r8, #0
   13bac:	str	r7, [sp, #32]
   13bb0:	cmp	r1, #0
   13bb4:	str	r8, [r4, #20]
   13bb8:	beq	13c94 <__assert_fail@plt+0x2690>
   13bbc:	movw	r2, #4652	; 0x122c
   13bc0:	movt	r2, #3
   13bc4:	ldr	r2, [r2]
   13bc8:	cmp	r2, #0
   13bcc:	beq	13c94 <__assert_fail@plt+0x2690>
   13bd0:	sub	r5, r2, #1
   13bd4:	ldr	r2, [r4, #8]
   13bd8:	mov	r7, r0
   13bdc:	cmp	r2, #0
   13be0:	bne	13c2c <__assert_fail@plt+0x2628>
   13be4:	movw	r0, #4752	; 0x1290
   13be8:	movt	r0, #3
   13bec:	str	sl, [r0]
   13bf0:	mov	r0, r4
   13bf4:	bl	1520c <__assert_fail@plt+0x3c08>
   13bf8:	cmp	r0, #0
   13bfc:	moveq	r0, r4
   13c00:	bleq	16138 <__assert_fail@plt+0x4b34>
   13c04:	movw	r0, #4728	; 0x1278
   13c08:	ldr	r2, [r4, #8]
   13c0c:	movw	r6, #4680	; 0x1248
   13c10:	movt	r0, #3
   13c14:	movt	r6, #3
   13c18:	ldr	r0, [r0]
   13c1c:	cmp	r2, #0
   13c20:	beq	13c54 <__assert_fail@plt+0x2650>
   13c24:	cmp	r7, r0
   13c28:	bne	13c54 <__assert_fail@plt+0x2650>
   13c2c:	mov	r0, r7
   13c30:	ldr	r1, [r6]
   13c34:	sub	r3, r5, #1
   13c38:	cmp	r3, r5
   13c3c:	bcs	13c94 <__assert_fail@plt+0x2690>
   13c40:	cmp	r1, #0
   13c44:	mov	r5, r3
   13c48:	mov	r7, r0
   13c4c:	bne	13bdc <__assert_fail@plt+0x25d8>
   13c50:	b	13c94 <__assert_fail@plt+0x2690>
   13c54:	ldr	r1, [r4, #24]
   13c58:	movw	r3, #4752	; 0x1290
   13c5c:	movt	r3, #3
   13c60:	add	r1, r1, #1
   13c64:	str	r1, [r4, #24]
   13c68:	movw	r1, #4708	; 0x1264
   13c6c:	movt	r1, #3
   13c70:	ldr	r1, [r1]
   13c74:	str	r7, [r1, r8, lsl #2]
   13c78:	movw	r1, #4712	; 0x1268
   13c7c:	movt	r1, #3
   13c80:	ldr	r3, [r3]
   13c84:	ldr	r1, [r1]
   13c88:	str	r3, [r1, r8, lsl #2]
   13c8c:	add	r8, r8, #1
   13c90:	b	13c30 <__assert_fail@plt+0x262c>
   13c94:	ldr	r2, [sp, #32]
   13c98:	cmp	r9, r2
   13c9c:	bge	13cb0 <__assert_fail@plt+0x26ac>
   13ca0:	add	r4, r4, #40	; 0x28
   13ca4:	add	r9, r9, #1
   13ca8:	cmp	r1, #0
   13cac:	bne	13bb0 <__assert_fail@plt+0x25ac>
   13cb0:	movw	r1, #4586	; 0x11ea
   13cb4:	movw	r2, #4708	; 0x1264
   13cb8:	mov	r9, #10
   13cbc:	movt	r1, #3
   13cc0:	movt	r2, #3
   13cc4:	ldrb	r1, [r1]
   13cc8:	ldr	r2, [r2]
   13ccc:	str	r0, [r2, r8, lsl #2]
   13cd0:	mov	r0, #0
   13cd4:	cmp	r1, #0
   13cd8:	bne	13d00 <__assert_fail@plt+0x26fc>
   13cdc:	b	13d60 <__assert_fail@plt+0x275c>
   13ce0:	movw	r0, #4708	; 0x1264
   13ce4:	mov	r8, #0
   13ce8:	cmp	r2, #0
   13cec:	movt	r0, #3
   13cf0:	ldr	r0, [r0]
   13cf4:	str	r8, [r0]
   13cf8:	mov	r0, #0
   13cfc:	beq	13d60 <__assert_fail@plt+0x275c>
   13d00:	movw	r0, #4456	; 0x1168
   13d04:	movt	r0, #3
   13d08:	ldr	r1, [r0]
   13d0c:	mov	r0, #1
   13d10:	cmp	r1, #1
   13d14:	blt	13d60 <__assert_fail@plt+0x275c>
   13d18:	sdiv	r4, r8, r1
   13d1c:	movw	r2, #4676	; 0x1244
   13d20:	mov	r6, #0
   13d24:	mov	r5, #0
   13d28:	movt	r2, #3
   13d2c:	ldr	r7, [r2]
   13d30:	add	r7, r7, #20
   13d34:	mls	r3, r4, r1, r8
   13d38:	add	r6, r6, #1
   13d3c:	mov	r2, r4
   13d40:	str	r5, [r7]
   13d44:	cmp	r6, r3
   13d48:	addle	r2, r2, #1
   13d4c:	cmp	r1, r6
   13d50:	str	r2, [r7, #4]
   13d54:	add	r5, r2, r5
   13d58:	add	r7, r7, #40	; 0x28
   13d5c:	bne	13d38 <__assert_fail@plt+0x2734>
   13d60:	movw	r1, #4676	; 0x1244
   13d64:	movt	r1, #3
   13d68:	ldr	r4, [r1]
   13d6c:	movw	r1, #4456	; 0x1168
   13d70:	movt	r1, #3
   13d74:	ldr	ip, [r1]
   13d78:	mov	r2, r4
   13d7c:	subs	r1, ip, #1
   13d80:	beq	13dc4 <__assert_fail@plt+0x27c0>
   13d84:	tst	ip, #1
   13d88:	mov	r2, r4
   13d8c:	bne	13da0 <__assert_fail@plt+0x279c>
   13d90:	ldr	r1, [r4, #24]
   13d94:	add	r2, r4, #40	; 0x28
   13d98:	str	r1, [r4, #28]
   13d9c:	sub	r1, ip, #2
   13da0:	cmp	ip, #2
   13da4:	beq	13dc4 <__assert_fail@plt+0x27c0>
   13da8:	ldr	r3, [r2, #24]
   13dac:	ldr	r7, [r2, #64]	; 0x40
   13db0:	subs	r1, r1, #2
   13db4:	str	r3, [r2, #28]
   13db8:	str	r7, [r2, #68]	; 0x44
   13dbc:	add	r2, r2, #80	; 0x50
   13dc0:	bne	13da8 <__assert_fail@plt+0x27a4>
   13dc4:	cmp	r0, #0
   13dc8:	beq	13dd8 <__assert_fail@plt+0x27d4>
   13dcc:	add	r1, r2, #24
   13dd0:	ldr	r0, [r1]
   13dd4:	b	13df0 <__assert_fail@plt+0x27ec>
   13dd8:	ldr	r1, [r2, #8]
   13ddc:	mov	r0, #0
   13de0:	cmp	r1, #0
   13de4:	movw	r1, #4652	; 0x122c
   13de8:	movt	r1, #3
   13dec:	ldreq	r0, [r1]
   13df0:	str	r0, [r2, #28]
   13df4:	cmp	ip, #0
   13df8:	beq	146f0 <__assert_fail@plt+0x30ec>
   13dfc:	movw	r0, #4585	; 0x11e9
   13e00:	add	r2, r4, #28
   13e04:	mov	r3, #0
   13e08:	movt	r0, #3
   13e0c:	ldrb	r7, [r0]
   13e10:	mov	r0, ip
   13e14:	b	13e28 <__assert_fail@plt+0x2824>
   13e18:	add	r3, r3, #1
   13e1c:	add	r2, r2, #40	; 0x28
   13e20:	subs	r0, r0, #1
   13e24:	beq	13e58 <__assert_fail@plt+0x2854>
   13e28:	ldr	r1, [r2, #-20]	; 0xffffffec
   13e2c:	cmp	r1, #2
   13e30:	bcc	13e18 <__assert_fail@plt+0x2814>
   13e34:	cmp	r7, #0
   13e38:	bne	13e1c <__assert_fail@plt+0x2818>
   13e3c:	ldr	r1, [r2, #-4]
   13e40:	cmp	r1, #1
   13e44:	blt	13e1c <__assert_fail@plt+0x2818>
   13e48:	ldr	r1, [r2]
   13e4c:	cmp	r1, #1
   13e50:	addge	r3, r3, #1
   13e54:	b	13e1c <__assert_fail@plt+0x2818>
   13e58:	cmp	r3, #0
   13e5c:	beq	146f0 <__assert_fail@plt+0x30ec>
   13e60:	movw	r5, #4624	; 0x1210
   13e64:	mov	r8, #0
   13e68:	movw	r6, #4617	; 0x1209
   13e6c:	movt	r5, #3
   13e70:	movt	r6, #3
   13e74:	ldrb	r0, [r5]
   13e78:	cmp	r0, #0
   13e7c:	movweq	r1, #4733	; 0x127d
   13e80:	moveq	r0, #1
   13e84:	movteq	r1, #3
   13e88:	strbeq	r0, [r1]
   13e8c:	movw	r0, #4732	; 0x127c
   13e90:	movw	r1, #4652	; 0x122c
   13e94:	movt	r0, #3
   13e98:	movt	r1, #3
   13e9c:	strb	r8, [r0]
   13ea0:	movw	r0, #4588	; 0x11ec
   13ea4:	ldr	r1, [r1]
   13ea8:	movt	r0, #3
   13eac:	ldrb	r0, [r0]
   13eb0:	lsl	r0, r1, r0
   13eb4:	cmp	r0, #1
   13eb8:	str	r0, [sp, #32]
   13ebc:	blt	1447c <__assert_fail@plt+0x2e78>
   13ec0:	mov	r8, #0
   13ec4:	add	r2, r4, #28
   13ec8:	mov	r0, ip
   13ecc:	mov	r3, #0
   13ed0:	b	13ee4 <__assert_fail@plt+0x28e0>
   13ed4:	add	r3, r3, #1
   13ed8:	add	r2, r2, #40	; 0x28
   13edc:	subs	r0, r0, #1
   13ee0:	beq	13f14 <__assert_fail@plt+0x2910>
   13ee4:	ldr	r1, [r2, #-20]	; 0xffffffec
   13ee8:	cmp	r1, #2
   13eec:	bcc	13ed4 <__assert_fail@plt+0x28d0>
   13ef0:	tst	r7, #1
   13ef4:	bne	13ed8 <__assert_fail@plt+0x28d4>
   13ef8:	ldr	r1, [r2, #-4]
   13efc:	cmp	r1, #1
   13f00:	blt	13ed8 <__assert_fail@plt+0x28d4>
   13f04:	ldr	r1, [r2]
   13f08:	cmp	r1, #1
   13f0c:	addge	r3, r3, #1
   13f10:	b	13ed8 <__assert_fail@plt+0x28d4>
   13f14:	cmp	r3, #0
   13f18:	beq	1447c <__assert_fail@plt+0x2e78>
   13f1c:	movw	r0, #4740	; 0x1284
   13f20:	cmp	ip, #1
   13f24:	mov	r1, #1
   13f28:	movt	r0, #3
   13f2c:	str	sl, [r0]
   13f30:	movw	r0, #4744	; 0x1288
   13f34:	movt	r0, #3
   13f38:	str	sl, [r0]
   13f3c:	movw	r0, #4748	; 0x128c
   13f40:	movt	r0, #3
   13f44:	str	sl, [r0]
   13f48:	movw	r0, #4732	; 0x127c
   13f4c:	movt	r0, #3
   13f50:	strb	sl, [r0]
   13f54:	movw	r0, #4758	; 0x1296
   13f58:	movt	r0, #3
   13f5c:	strb	sl, [r0]
   13f60:	movw	r0, #4759	; 0x1297
   13f64:	movt	r0, #3
   13f68:	strb	r1, [r0]
   13f6c:	blt	142f0 <__assert_fail@plt+0x2cec>
   13f70:	movw	r5, #4606	; 0x11fe
   13f74:	mov	r9, #1
   13f78:	movt	r5, #3
   13f7c:	b	13fa0 <__assert_fail@plt+0x299c>
   13f80:	movw	r1, #4456	; 0x1168
   13f84:	add	r0, r9, #1
   13f88:	add	r4, r4, #40	; 0x28
   13f8c:	movt	r1, #3
   13f90:	ldr	ip, [r1]
   13f94:	cmp	r9, ip
   13f98:	mov	r9, r0
   13f9c:	bge	14300 <__assert_fail@plt+0x2cfc>
   13fa0:	movw	r0, #4752	; 0x1290
   13fa4:	movt	r0, #3
   13fa8:	str	sl, [r0]
   13fac:	ldr	r0, [r4, #28]
   13fb0:	cmp	r0, #0
   13fb4:	bgt	13fc4 <__assert_fail@plt+0x29c0>
   13fb8:	ldr	r0, [r4, #8]
   13fbc:	cmp	r0, #1
   13fc0:	bne	1419c <__assert_fail@plt+0x2b98>
   13fc4:	movw	r0, #4756	; 0x1294
   13fc8:	movw	r1, #4736	; 0x1280
   13fcc:	movt	r0, #3
   13fd0:	movt	r1, #3
   13fd4:	strb	sl, [r0]
   13fd8:	ldr	r0, [r4, #32]
   13fdc:	str	r0, [r1]
   13fe0:	mov	r0, r4
   13fe4:	ldr	r1, [r4, #12]
   13fe8:	blx	r1
   13fec:	cmp	r0, #0
   13ff0:	moveq	r0, r4
   13ff4:	bleq	16138 <__assert_fail@plt+0x4b34>
   13ff8:	movw	r0, #4732	; 0x127c
   13ffc:	ldr	r1, [r4, #28]
   14000:	movt	r0, #3
   14004:	ldrb	r0, [r0]
   14008:	sub	r2, r1, #1
   1400c:	str	r2, [r4, #28]
   14010:	and	r2, r8, #1
   14014:	orrs	r8, r0, r2
   14018:	movwne	r8, #1
   1401c:	cmp	r1, #1
   14020:	bgt	140b0 <__assert_fail@plt+0x2aac>
   14024:	movw	r1, #4456	; 0x1168
   14028:	movt	r1, #3
   1402c:	ldr	ip, [r1]
   14030:	cmp	ip, #0
   14034:	beq	14310 <__assert_fail@plt+0x2d0c>
   14038:	movw	r1, #4585	; 0x11e9
   1403c:	mov	r3, #0
   14040:	movt	r1, #3
   14044:	ldrb	r2, [r1]
   14048:	movw	r1, #4676	; 0x1244
   1404c:	movt	r1, #3
   14050:	ldr	r1, [r1]
   14054:	add	r7, r1, #28
   14058:	mov	r1, ip
   1405c:	b	14070 <__assert_fail@plt+0x2a6c>
   14060:	add	r3, r3, #1
   14064:	add	r7, r7, #40	; 0x28
   14068:	subs	r1, r1, #1
   1406c:	beq	140a0 <__assert_fail@plt+0x2a9c>
   14070:	ldr	r6, [r7, #-20]	; 0xffffffec
   14074:	cmp	r6, #2
   14078:	bcc	14060 <__assert_fail@plt+0x2a5c>
   1407c:	cmp	r2, #0
   14080:	bne	14064 <__assert_fail@plt+0x2a60>
   14084:	ldr	r6, [r7, #-4]
   14088:	cmp	r6, #1
   1408c:	blt	14064 <__assert_fail@plt+0x2a60>
   14090:	ldr	r6, [r7]
   14094:	cmp	r6, #1
   14098:	addge	r3, r3, #1
   1409c:	b	14064 <__assert_fail@plt+0x2a60>
   140a0:	movw	r6, #4617	; 0x1209
   140a4:	cmp	r3, #0
   140a8:	movt	r6, #3
   140ac:	beq	14314 <__assert_fail@plt+0x2d10>
   140b0:	ldrb	r0, [r5]
   140b4:	cmp	r0, #1
   140b8:	bne	142c8 <__assert_fail@plt+0x2cc4>
   140bc:	ldr	r0, [r4, #8]
   140c0:	cmp	r0, #0
   140c4:	beq	142c8 <__assert_fail@plt+0x2cc4>
   140c8:	movw	r1, #4759	; 0x1297
   140cc:	movt	r1, #3
   140d0:	ldrb	r1, [r1]
   140d4:	cmp	r1, #1
   140d8:	beq	141bc <__assert_fail@plt+0x2bb8>
   140dc:	cmp	r0, #3
   140e0:	beq	14100 <__assert_fail@plt+0x2afc>
   140e4:	cmp	r0, #2
   140e8:	bne	142c8 <__assert_fail@plt+0x2cc4>
   140ec:	movw	r0, #4756	; 0x1294
   140f0:	movt	r0, #3
   140f4:	ldrb	r0, [r0]
   140f8:	cmp	r0, #1
   140fc:	bne	142c8 <__assert_fail@plt+0x2cc4>
   14100:	ldr	r0, [r4, #32]
   14104:	movw	r1, #4736	; 0x1280
   14108:	movt	r1, #3
   1410c:	str	r0, [r1]
   14110:	movw	r1, #4620	; 0x120c
   14114:	movt	r1, #3
   14118:	ldr	r1, [r1]
   1411c:	cmp	r0, r1
   14120:	ble	142ac <__assert_fail@plt+0x2ca8>
   14124:	movw	r3, #4604	; 0x11fc
   14128:	movw	r2, #4744	; 0x1288
   1412c:	sub	r5, r0, r1
   14130:	movt	r3, #3
   14134:	movt	r2, #3
   14138:	ldrb	r3, [r3]
   1413c:	ldr	r2, [r2]
   14140:	cmp	r3, #0
   14144:	bne	14218 <__assert_fail@plt+0x2c14>
   14148:	cmp	r5, r2
   1414c:	ble	14284 <__assert_fail@plt+0x2c80>
   14150:	add	r1, r2, r1
   14154:	sub	r6, r1, r0
   14158:	movw	r0, #4564	; 0x11d4
   1415c:	movt	r0, #3
   14160:	ldr	r0, [r0]
   14164:	ldr	r1, [r0, #20]
   14168:	ldr	r2, [r0, #24]
   1416c:	cmp	r1, r2
   14170:	bcs	14190 <__assert_fail@plt+0x2b8c>
   14174:	add	r2, r1, #1
   14178:	str	r2, [r0, #20]
   1417c:	mov	r0, #32
   14180:	strb	r0, [r1]
   14184:	adds	r6, r6, #1
   14188:	bcc	14158 <__assert_fail@plt+0x2b54>
   1418c:	b	14284 <__assert_fail@plt+0x2c80>
   14190:	mov	r1, #32
   14194:	bl	11568 <__overflow@plt>
   14198:	b	14184 <__assert_fail@plt+0x2b80>
   1419c:	ldrb	r0, [r5]
   141a0:	cmp	r0, #1
   141a4:	bne	142c8 <__assert_fail@plt+0x2cc4>
   141a8:	movw	r0, #4759	; 0x1297
   141ac:	movt	r0, #3
   141b0:	ldrb	r0, [r0]
   141b4:	cmp	r0, #1
   141b8:	bne	141d0 <__assert_fail@plt+0x2bcc>
   141bc:	movw	r0, #4758	; 0x1296
   141c0:	mov	r1, #1
   141c4:	movt	r0, #3
   141c8:	strb	r1, [r0]
   141cc:	b	142c8 <__assert_fail@plt+0x2cc4>
   141d0:	ldr	r0, [r4, #32]
   141d4:	movw	r1, #4736	; 0x1280
   141d8:	movt	r1, #3
   141dc:	str	r0, [r1]
   141e0:	movw	r1, #4620	; 0x120c
   141e4:	movt	r1, #3
   141e8:	ldr	r1, [r1]
   141ec:	cmp	r0, r1
   141f0:	ble	142ac <__assert_fail@plt+0x2ca8>
   141f4:	movw	r3, #4604	; 0x11fc
   141f8:	movw	r2, #4744	; 0x1288
   141fc:	sub	r5, r0, r1
   14200:	movt	r3, #3
   14204:	movt	r2, #3
   14208:	ldrb	r3, [r3]
   1420c:	ldr	r2, [r2]
   14210:	cmp	r3, #0
   14214:	beq	1422c <__assert_fail@plt+0x2c28>
   14218:	movw	r1, #4740	; 0x1284
   1421c:	sub	r0, r5, r2
   14220:	movt	r1, #3
   14224:	str	r0, [r1]
   14228:	b	14298 <__assert_fail@plt+0x2c94>
   1422c:	cmp	r5, r2
   14230:	ble	14284 <__assert_fail@plt+0x2c80>
   14234:	add	r1, r2, r1
   14238:	sub	r6, r1, r0
   1423c:	movw	r0, #4564	; 0x11d4
   14240:	movt	r0, #3
   14244:	ldr	r0, [r0]
   14248:	ldr	r1, [r0, #20]
   1424c:	ldr	r2, [r0, #24]
   14250:	cmp	r1, r2
   14254:	bcs	14274 <__assert_fail@plt+0x2c70>
   14258:	add	r2, r1, #1
   1425c:	str	r2, [r0, #20]
   14260:	mov	r0, #32
   14264:	strb	r0, [r1]
   14268:	adds	r6, r6, #1
   1426c:	bcc	1423c <__assert_fail@plt+0x2c38>
   14270:	b	14284 <__assert_fail@plt+0x2c80>
   14274:	mov	r1, #32
   14278:	bl	11568 <__overflow@plt>
   1427c:	adds	r6, r6, #1
   14280:	bcc	1423c <__assert_fail@plt+0x2c38>
   14284:	movw	r0, #4744	; 0x1288
   14288:	movw	r6, #4617	; 0x1209
   1428c:	movt	r0, #3
   14290:	movt	r6, #3
   14294:	str	r5, [r0]
   14298:	movw	r0, #4736	; 0x1280
   1429c:	movw	r5, #4606	; 0x11fe
   142a0:	movt	r0, #3
   142a4:	movt	r5, #3
   142a8:	str	sl, [r0]
   142ac:	ldrb	r0, [r6]
   142b0:	cmp	r0, #1
   142b4:	bleq	15bb8 <__assert_fail@plt+0x45b4>
   142b8:	ldrb	r0, [r4, #36]	; 0x24
   142bc:	cmp	r0, #0
   142c0:	movne	r0, r4
   142c4:	blne	15fa8 <__assert_fail@plt+0x49a4>
   142c8:	ldrb	r0, [r6]
   142cc:	cmp	r0, #1
   142d0:	bne	13f80 <__assert_fail@plt+0x297c>
   142d4:	movw	r0, #4748	; 0x128c
   142d8:	movt	r0, #3
   142dc:	mov	r1, r0
   142e0:	ldr	r0, [r0]
   142e4:	add	r0, r0, #1
   142e8:	str	r0, [r1]
   142ec:	b	13f80 <__assert_fail@plt+0x297c>
   142f0:	ldr	r4, [sp, #32]
   142f4:	cmp	ip, #0
   142f8:	bne	1436c <__assert_fail@plt+0x2d68>
   142fc:	b	143d8 <__assert_fail@plt+0x2dd4>
   14300:	movw	r0, #4732	; 0x127c
   14304:	movt	r0, #3
   14308:	ldrb	r0, [r0]
   1430c:	b	14314 <__assert_fail@plt+0x2d10>
   14310:	mov	ip, #0
   14314:	ldr	r4, [sp, #32]
   14318:	movw	r5, #4624	; 0x1210
   1431c:	cmp	r0, #0
   14320:	mov	r9, #10
   14324:	movt	r5, #3
   14328:	beq	14364 <__assert_fail@plt+0x2d60>
   1432c:	movw	r0, #4564	; 0x11d4
   14330:	movt	r0, #3
   14334:	ldr	r0, [r0]
   14338:	ldr	r1, [r0, #20]
   1433c:	ldr	r2, [r0, #24]
   14340:	cmp	r1, r2
   14344:	bcs	14470 <__assert_fail@plt+0x2e6c>
   14348:	add	r2, r1, #1
   1434c:	str	r2, [r0, #20]
   14350:	strb	r9, [r1]
   14354:	movw	r0, #4456	; 0x1168
   14358:	sub	r4, r4, #1
   1435c:	movt	r0, #3
   14360:	ldr	ip, [r0]
   14364:	cmp	ip, #0
   14368:	beq	143d8 <__assert_fail@plt+0x2dd4>
   1436c:	movw	r1, #4676	; 0x1244
   14370:	movw	r0, #4585	; 0x11e9
   14374:	mov	r2, #0
   14378:	movt	r1, #3
   1437c:	movt	r0, #3
   14380:	ldr	r1, [r1]
   14384:	ldrb	r0, [r0]
   14388:	add	r3, r1, #28
   1438c:	b	143a0 <__assert_fail@plt+0x2d9c>
   14390:	add	r2, r2, #1
   14394:	add	r3, r3, #40	; 0x28
   14398:	subs	ip, ip, #1
   1439c:	beq	143d0 <__assert_fail@plt+0x2dcc>
   143a0:	ldr	r1, [r3, #-20]	; 0xffffffec
   143a4:	cmp	r1, #2
   143a8:	bcc	14390 <__assert_fail@plt+0x2d8c>
   143ac:	cmp	r0, #0
   143b0:	bne	14394 <__assert_fail@plt+0x2d90>
   143b4:	ldr	r1, [r3, #-4]
   143b8:	cmp	r1, #1
   143bc:	blt	14394 <__assert_fail@plt+0x2d90>
   143c0:	ldr	r1, [r3]
   143c4:	cmp	r1, #1
   143c8:	addge	r2, r2, #1
   143cc:	b	14394 <__assert_fail@plt+0x2d90>
   143d0:	cmp	r2, #0
   143d4:	bne	143e4 <__assert_fail@plt+0x2de0>
   143d8:	ldrb	r0, [r5]
   143dc:	cmp	r0, #0
   143e0:	bne	14480 <__assert_fail@plt+0x2e7c>
   143e4:	movw	r0, #4588	; 0x11ec
   143e8:	movt	r0, #3
   143ec:	ldrb	r0, [r0]
   143f0:	and	r0, r8, r0
   143f4:	tst	r0, #1
   143f8:	beq	14428 <__assert_fail@plt+0x2e24>
   143fc:	movw	r0, #4564	; 0x11d4
   14400:	movt	r0, #3
   14404:	ldr	r0, [r0]
   14408:	ldr	r1, [r0, #20]
   1440c:	ldr	r2, [r0, #24]
   14410:	cmp	r1, r2
   14414:	bcs	14464 <__assert_fail@plt+0x2e60>
   14418:	add	r2, r1, #1
   1441c:	str	r2, [r0, #20]
   14420:	strb	r9, [r1]
   14424:	sub	r4, r4, #1
   14428:	cmp	r4, #1
   1442c:	blt	14480 <__assert_fail@plt+0x2e7c>
   14430:	movw	r0, #4456	; 0x1168
   14434:	movt	r0, #3
   14438:	ldr	ip, [r0]
   1443c:	cmp	ip, #0
   14440:	beq	14488 <__assert_fail@plt+0x2e84>
   14444:	movw	r0, #4585	; 0x11e9
   14448:	str	r4, [sp, #32]
   1444c:	movt	r0, #3
   14450:	ldrb	r7, [r0]
   14454:	movw	r0, #4676	; 0x1244
   14458:	movt	r0, #3
   1445c:	ldr	r4, [r0]
   14460:	b	13ec4 <__assert_fail@plt+0x28c0>
   14464:	mov	r1, #10
   14468:	bl	11568 <__overflow@plt>
   1446c:	b	14424 <__assert_fail@plt+0x2e20>
   14470:	mov	r1, #10
   14474:	bl	11568 <__overflow@plt>
   14478:	b	14354 <__assert_fail@plt+0x2d50>
   1447c:	ldr	r4, [sp, #32]
   14480:	cmp	r4, #0
   14484:	beq	1450c <__assert_fail@plt+0x2f08>
   14488:	movw	r1, #4732	; 0x127c
   1448c:	ands	r0, r8, #1
   14490:	movt	r1, #3
   14494:	strb	r0, [r1]
   14498:	beq	144a8 <__assert_fail@plt+0x2ea4>
   1449c:	ldrb	r0, [r5]
   144a0:	cmp	r0, #0
   144a4:	beq	14580 <__assert_fail@plt+0x2f7c>
   144a8:	movw	r0, #4625	; 0x1211
   144ac:	movt	r0, #3
   144b0:	ldrb	r0, [r0]
   144b4:	cmp	r0, #1
   144b8:	bne	14620 <__assert_fail@plt+0x301c>
   144bc:	movw	r0, #4757	; 0x1295
   144c0:	movt	r0, #3
   144c4:	ldrb	r0, [r0]
   144c8:	cmp	r0, #1
   144cc:	bne	14620 <__assert_fail@plt+0x301c>
   144d0:	movw	r0, #4564	; 0x11d4
   144d4:	movt	r0, #3
   144d8:	ldr	r0, [r0]
   144dc:	ldr	r1, [r0, #20]
   144e0:	ldr	r2, [r0, #24]
   144e4:	cmp	r1, r2
   144e8:	bcs	1460c <__assert_fail@plt+0x3008>
   144ec:	add	r2, r1, #1
   144f0:	str	r2, [r0, #20]
   144f4:	mov	r0, #12
   144f8:	strb	r0, [r1]
   144fc:	movw	r0, #4757	; 0x1295
   14500:	movt	r0, #3
   14504:	strb	sl, [r0]
   14508:	b	14620 <__assert_fail@plt+0x301c>
   1450c:	movw	r0, #4456	; 0x1168
   14510:	movt	r0, #3
   14514:	ldr	r2, [r0]
   14518:	cmp	r2, #1
   1451c:	blt	14488 <__assert_fail@plt+0x2e84>
   14520:	movw	r0, #4676	; 0x1244
   14524:	and	r1, r2, #1
   14528:	movt	r0, #3
   1452c:	ldr	r0, [r0]
   14530:	beq	14564 <__assert_fail@plt+0x2f60>
   14534:	sub	r2, r1, r2
   14538:	ldr	r3, [r0, #8]
   1453c:	cmp	r3, #0
   14540:	moveq	r3, #1
   14544:	strbeq	r3, [r0, #37]	; 0x25
   14548:	ldr	r3, [r0, #48]	; 0x30
   1454c:	cmp	r3, #0
   14550:	moveq	r3, #1
   14554:	strbeq	r3, [r0, #77]	; 0x4d
   14558:	adds	r2, r2, #2
   1455c:	add	r0, r0, #80	; 0x50
   14560:	bne	14538 <__assert_fail@plt+0x2f34>
   14564:	cmp	r1, #0
   14568:	beq	14488 <__assert_fail@plt+0x2e84>
   1456c:	ldr	r1, [r0, #8]
   14570:	cmp	r1, #0
   14574:	moveq	r1, #1
   14578:	strbeq	r1, [r0, #37]	; 0x25
   1457c:	b	14488 <__assert_fail@plt+0x2e84>
   14580:	movw	r0, #4597	; 0x11f5
   14584:	movt	r0, #3
   14588:	ldrb	r0, [r0]
   1458c:	cmp	r0, #0
   14590:	beq	145c4 <__assert_fail@plt+0x2fc0>
   14594:	movw	r0, #4564	; 0x11d4
   14598:	movt	r0, #3
   1459c:	ldr	r0, [r0]
   145a0:	ldr	r1, [r0, #20]
   145a4:	ldr	r2, [r0, #24]
   145a8:	cmp	r1, r2
   145ac:	bcs	14618 <__assert_fail@plt+0x3014>
   145b0:	add	r2, r1, #1
   145b4:	str	r2, [r0, #20]
   145b8:	mov	r0, #12
   145bc:	strb	r0, [r1]
   145c0:	b	14620 <__assert_fail@plt+0x301c>
   145c4:	adds	r4, r4, #5
   145c8:	beq	14620 <__assert_fail@plt+0x301c>
   145cc:	movw	r0, #4564	; 0x11d4
   145d0:	movt	r0, #3
   145d4:	ldr	r0, [r0]
   145d8:	ldr	r1, [r0, #20]
   145dc:	ldr	r2, [r0, #24]
   145e0:	cmp	r1, r2
   145e4:	bcs	14600 <__assert_fail@plt+0x2ffc>
   145e8:	add	r2, r1, #1
   145ec:	str	r2, [r0, #20]
   145f0:	strb	r9, [r1]
   145f4:	subs	r4, r4, #1
   145f8:	bne	145cc <__assert_fail@plt+0x2fc8>
   145fc:	b	14620 <__assert_fail@plt+0x301c>
   14600:	mov	r1, #10
   14604:	bl	11568 <__overflow@plt>
   14608:	b	145f4 <__assert_fail@plt+0x2ff0>
   1460c:	mov	r1, #12
   14610:	bl	11568 <__overflow@plt>
   14614:	b	144fc <__assert_fail@plt+0x2ef8>
   14618:	mov	r1, #12
   1461c:	bl	11568 <__overflow@plt>
   14620:	movw	r0, #4640	; 0x1220
   14624:	movt	r0, #3
   14628:	mov	r2, r0
   1462c:	ldrd	r0, [r0]
   14630:	adds	r0, r0, #1
   14634:	adc	r1, r1, #0
   14638:	strd	r0, [r2]
   1463c:	movw	r2, #4448	; 0x1160
   14640:	movt	r2, #3
   14644:	ldrd	r2, [r2]
   14648:	subs	r0, r2, r0
   1464c:	sbcs	r0, r3, r1
   14650:	bcc	146f0 <__assert_fail@plt+0x30ec>
   14654:	movw	r0, #4676	; 0x1244
   14658:	movt	r0, #3
   1465c:	ldr	r4, [r0]
   14660:	movw	r0, #4456	; 0x1168
   14664:	movt	r0, #3
   14668:	ldr	ip, [r0]
   1466c:	cmp	ip, #0
   14670:	beq	146b8 <__assert_fail@plt+0x30b4>
   14674:	add	r0, r4, #8
   14678:	mov	r1, ip
   1467c:	b	1468c <__assert_fail@plt+0x3088>
   14680:	add	r0, r0, #40	; 0x28
   14684:	subs	r1, r1, #1
   14688:	beq	146b8 <__assert_fail@plt+0x30b4>
   1468c:	ldr	r2, [r0]
   14690:	cmp	r2, #2
   14694:	bne	14680 <__assert_fail@plt+0x307c>
   14698:	movw	r2, #4680	; 0x1248
   1469c:	str	sl, [r0]
   146a0:	movt	r2, #3
   146a4:	mov	r3, r2
   146a8:	ldr	r2, [r2]
   146ac:	add	r2, r2, #1
   146b0:	str	r2, [r3]
   146b4:	b	14680 <__assert_fail@plt+0x307c>
   146b8:	movw	r0, #4585	; 0x11e9
   146bc:	movt	r0, #3
   146c0:	ldrb	r3, [r0]
   146c4:	cmp	r3, #0
   146c8:	bne	13a7c <__assert_fail@plt+0x2478>
   146cc:	ldr	r0, [r4, #8]
   146d0:	movw	r1, #4680	; 0x1248
   146d4:	movt	r1, #3
   146d8:	subs	r0, r0, #3
   146dc:	movwne	r0, #1
   146e0:	str	r0, [r1]
   146e4:	tst	r3, #1
   146e8:	bne	13a84 <__assert_fail@plt+0x2480>
   146ec:	b	13b08 <__assert_fail@plt+0x2504>
   146f0:	sub	sp, fp, #28
   146f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146f8:	movw	r1, #1053	; 0x41d
   146fc:	mov	r0, #0
   14700:	mov	r2, #5
   14704:	movt	r1, #2
   14708:	bl	1137c <dcgettext@plt>
   1470c:	mov	r2, r0
   14710:	mov	r0, #1
   14714:	mov	r1, #0
   14718:	bl	11418 <error@plt>
   1471c:	push	{fp, lr}
   14720:	mov	fp, sp
   14724:	movw	r1, #975	; 0x3cf
   14728:	mov	r0, #0
   1472c:	mov	r2, #5
   14730:	movt	r1, #2
   14734:	bl	1137c <dcgettext@plt>
   14738:	mov	r2, r0
   1473c:	mov	r0, #1
   14740:	mov	r1, #0
   14744:	bl	11418 <error@plt>
   14748:	push	{r4, r5, r6, sl, fp, lr}
   1474c:	add	fp, sp, #16
   14750:	mov	r5, r1
   14754:	movw	r1, #3505	; 0xdb1
   14758:	mov	r4, r0
   1475c:	movt	r1, #2
   14760:	bl	112ec <strcmp@plt>
   14764:	cmp	r0, #0
   14768:	beq	147c0 <__assert_fail@plt+0x31bc>
   1476c:	movw	r1, #61980	; 0xf21c
   14770:	mov	r0, r4
   14774:	str	r4, [r5, #4]
   14778:	movt	r1, #1
   1477c:	bl	164f4 <__assert_fail@plt+0x4ef0>
   14780:	str	r0, [r5]
   14784:	cmp	r0, #0
   14788:	beq	14800 <__assert_fail@plt+0x31fc>
   1478c:	mov	r1, #2
   14790:	bl	163c0 <__assert_fail@plt+0x4dbc>
   14794:	mov	r0, #0
   14798:	strb	r0, [r5, #37]	; 0x25
   1479c:	str	r0, [r5, #8]
   147a0:	movw	r0, #4672	; 0x1240
   147a4:	mov	r5, #1
   147a8:	movt	r0, #3
   147ac:	ldr	r1, [r0]
   147b0:	add	r1, r1, #1
   147b4:	str	r1, [r0]
   147b8:	mov	r0, r5
   147bc:	pop	{r4, r5, r6, sl, fp, pc}
   147c0:	movw	r1, #62318	; 0xf36e
   147c4:	mov	r0, #0
   147c8:	mov	r2, #5
   147cc:	movt	r1, #1
   147d0:	bl	1137c <dcgettext@plt>
   147d4:	str	r0, [r5, #4]
   147d8:	movw	r0, #4560	; 0x11d0
   147dc:	movw	r1, #4633	; 0x1219
   147e0:	mov	r2, #1
   147e4:	movt	r0, #3
   147e8:	movt	r1, #3
   147ec:	ldr	r0, [r0]
   147f0:	str	r0, [r5]
   147f4:	strb	r2, [r1]
   147f8:	cmp	r0, #0
   147fc:	bne	1478c <__assert_fail@plt+0x3188>
   14800:	movw	r0, #4634	; 0x121a
   14804:	mov	r1, #1
   14808:	mov	r5, #0
   1480c:	movt	r0, #3
   14810:	strb	r1, [r0]
   14814:	movw	r0, #4616	; 0x1208
   14818:	movt	r0, #3
   1481c:	ldrb	r0, [r0]
   14820:	cmp	r0, #0
   14824:	beq	14830 <__assert_fail@plt+0x322c>
   14828:	mov	r0, r5
   1482c:	pop	{r4, r5, r6, sl, fp, pc}
   14830:	bl	114e4 <__errno_location@plt>
   14834:	ldr	r6, [r0]
   14838:	mov	r0, #0
   1483c:	mov	r1, #3
   14840:	mov	r2, r4
   14844:	mov	r5, #0
   14848:	bl	1a110 <__assert_fail@plt+0x8b0c>
   1484c:	movw	r2, #2215	; 0x8a7
   14850:	mov	r3, r0
   14854:	mov	r0, #0
   14858:	mov	r1, r6
   1485c:	movt	r2, #2
   14860:	bl	11418 <error@plt>
   14864:	mov	r0, r5
   14868:	pop	{r4, r5, r6, sl, fp, pc}
   1486c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14870:	add	fp, sp, #28
   14874:	sub	sp, sp, #196	; 0xc4
   14878:	mov	r5, r1
   1487c:	movw	r1, #3505	; 0xdb1
   14880:	mov	r4, r0
   14884:	movt	r1, #2
   14888:	bl	112ec <strcmp@plt>
   1488c:	cmp	r0, #0
   14890:	mvneq	r5, #0
   14894:	cmp	r5, #0
   14898:	bmi	148b8 <__assert_fail@plt+0x32b4>
   1489c:	add	r6, sp, #88	; 0x58
   148a0:	mov	r0, #3
   148a4:	mov	r1, r5
   148a8:	mov	r2, r6
   148ac:	bl	113d0 <__fxstat64@plt>
   148b0:	cmp	r0, #0
   148b4:	beq	148e0 <__assert_fail@plt+0x32dc>
   148b8:	movw	r6, #4688	; 0x1250
   148bc:	movt	r6, #3
   148c0:	ldr	r0, [r6]
   148c4:	cmp	r0, #0
   148c8:	bne	148e4 <__assert_fail@plt+0x32e0>
   148cc:	movw	r6, #4688	; 0x1250
   148d0:	movt	r6, #3
   148d4:	mov	r0, r6
   148d8:	bl	16674 <__assert_fail@plt+0x5070>
   148dc:	b	148e4 <__assert_fail@plt+0x32e0>
   148e0:	add	r6, r6, #80	; 0x50
   148e4:	movw	sl, #4628	; 0x1214
   148e8:	ldrd	r8, [r6]
   148ec:	add	r1, sp, #80	; 0x50
   148f0:	add	r2, sp, #36	; 0x24
   148f4:	movt	sl, #3
   148f8:	ldr	r0, [sl]
   148fc:	str	r9, [sp, #84]	; 0x54
   14900:	str	r8, [sp, #80]	; 0x50
   14904:	bl	1a65c <__assert_fail@plt+0x9058>
   14908:	cmp	r0, #0
   1490c:	beq	14970 <__assert_fail@plt+0x336c>
   14910:	movw	r0, #4592	; 0x11f0
   14914:	add	r8, sp, #36	; 0x24
   14918:	mvn	r1, #0
   1491c:	movt	r0, #3
   14920:	mov	r3, r8
   14924:	ldr	r2, [r0]
   14928:	ldr	r0, [sl]
   1492c:	stm	sp, {r0, r9}
   14930:	mov	r0, #0
   14934:	bl	16b30 <__assert_fail@plt+0x552c>
   14938:	add	r7, r0, #1
   1493c:	mov	r0, r7
   14940:	bl	1b280 <__assert_fail@plt+0x9c7c>
   14944:	mov	r6, r0
   14948:	movw	r0, #4592	; 0x11f0
   1494c:	mov	r1, r7
   14950:	mov	r3, r8
   14954:	movt	r0, #3
   14958:	ldr	r2, [r0]
   1495c:	ldr	r0, [sl]
   14960:	stm	sp, {r0, r9}
   14964:	mov	r0, r6
   14968:	bl	16b30 <__assert_fail@plt+0x552c>
   1496c:	b	149a8 <__assert_fail@plt+0x33a4>
   14970:	mov	r0, #33	; 0x21
   14974:	bl	1b280 <__assert_fail@plt+0x9c7c>
   14978:	mov	r6, r0
   1497c:	ldr	r0, [sp, #80]	; 0x50
   14980:	add	r2, sp, #15
   14984:	asr	r1, r0, #31
   14988:	bl	16704 <__assert_fail@plt+0x5100>
   1498c:	movw	r3, #1079	; 0x437
   14990:	stm	sp, {r0, r9}
   14994:	mov	r0, r6
   14998:	mov	r1, #1
   1499c:	mov	r2, #33	; 0x21
   149a0:	movt	r3, #2
   149a4:	bl	114f0 <__sprintf_chk@plt>
   149a8:	movw	r7, #4696	; 0x1258
   149ac:	movt	r7, #3
   149b0:	ldr	r0, [r7]
   149b4:	bl	165a4 <__assert_fail@plt+0x4fa0>
   149b8:	movw	r0, #1076	; 0x434
   149bc:	cmp	r5, #0
   149c0:	movw	r5, #4700	; 0x125c
   149c4:	mov	r1, #0
   149c8:	str	r6, [r7]
   149cc:	movt	r0, #2
   149d0:	movt	r5, #3
   149d4:	movmi	r4, r0
   149d8:	movw	r0, #4600	; 0x11f8
   149dc:	movt	r0, #3
   149e0:	ldr	r0, [r0]
   149e4:	cmp	r0, #0
   149e8:	movne	r4, r0
   149ec:	movw	r0, #4444	; 0x115c
   149f0:	movt	r0, #3
   149f4:	str	r4, [r5]
   149f8:	ldr	r4, [r0]
   149fc:	mov	r0, r6
   14a00:	bl	167c4 <__assert_fail@plt+0x51c0>
   14a04:	sub	r4, r4, r0
   14a08:	ldr	r0, [r5]
   14a0c:	mov	r1, #0
   14a10:	bl	167c4 <__assert_fail@plt+0x51c0>
   14a14:	movw	r1, #4704	; 0x1260
   14a18:	sub	r0, r4, r0
   14a1c:	movt	r1, #3
   14a20:	str	r0, [r1]
   14a24:	sub	sp, fp, #28
   14a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14a30:	add	fp, sp, #24
   14a34:	ldr	r6, [r0]
   14a38:	mov	r9, r1
   14a3c:	mov	r5, r0
   14a40:	ldmib	r6, {r0, r1}
   14a44:	cmp	r0, r1
   14a48:	bcs	14acc <__assert_fail@plt+0x34c8>
   14a4c:	add	r1, r0, #1
   14a50:	str	r1, [r6, #4]
   14a54:	ldrb	r0, [r0]
   14a58:	cmp	r0, #12
   14a5c:	bne	14adc <__assert_fail@plt+0x34d8>
   14a60:	ldrb	r0, [r5, #37]	; 0x25
   14a64:	cmp	r0, #0
   14a68:	beq	14ab8 <__assert_fail@plt+0x34b4>
   14a6c:	ldmib	r6, {r0, r1}
   14a70:	cmp	r0, r1
   14a74:	bcs	14d24 <__assert_fail@plt+0x3720>
   14a78:	add	r1, r0, #1
   14a7c:	str	r1, [r6, #4]
   14a80:	ldrb	r0, [r0]
   14a84:	cmp	r0, #10
   14a88:	bne	14aa4 <__assert_fail@plt+0x34a0>
   14a8c:	ldmib	r6, {r0, r1}
   14a90:	cmp	r0, r1
   14a94:	bcs	14d38 <__assert_fail@plt+0x3734>
   14a98:	add	r1, r0, #1
   14a9c:	str	r1, [r6, #4]
   14aa0:	ldrb	r0, [r0]
   14aa4:	mov	r7, #0
   14aa8:	cmp	r0, #12
   14aac:	strb	r7, [r5, #37]	; 0x25
   14ab0:	beq	14ac0 <__assert_fail@plt+0x34bc>
   14ab4:	b	14ae4 <__assert_fail@plt+0x34e0>
   14ab8:	mov	r0, #0
   14abc:	strb	r0, [r5, #37]	; 0x25
   14ac0:	mov	r7, #1
   14ac4:	mov	r0, #12
   14ac8:	b	14ae4 <__assert_fail@plt+0x34e0>
   14acc:	mov	r0, r6
   14ad0:	bl	1155c <__uflow@plt>
   14ad4:	cmp	r0, #12
   14ad8:	beq	14a60 <__assert_fail@plt+0x345c>
   14adc:	mov	r7, #0
   14ae0:	strb	r7, [r5, #37]	; 0x25
   14ae4:	movw	r4, #4724	; 0x1274
   14ae8:	movt	r4, #3
   14aec:	ldrb	r1, [r4]
   14af0:	strb	r1, [r5, #37]	; 0x25
   14af4:	cmn	r0, #1
   14af8:	beq	14b40 <__assert_fail@plt+0x353c>
   14afc:	cmp	r0, #10
   14b00:	beq	14cc4 <__assert_fail@plt+0x36c0>
   14b04:	cmp	r0, #12
   14b08:	beq	14b4c <__assert_fail@plt+0x3548>
   14b0c:	ldmib	r6, {r0, r1}
   14b10:	cmp	r0, r1
   14b14:	bcs	14b30 <__assert_fail@plt+0x352c>
   14b18:	add	r1, r0, #1
   14b1c:	str	r1, [r6, #4]
   14b20:	ldrb	r0, [r0]
   14b24:	cmn	r0, #1
   14b28:	bne	14afc <__assert_fail@plt+0x34f8>
   14b2c:	b	14b40 <__assert_fail@plt+0x353c>
   14b30:	mov	r0, r6
   14b34:	bl	1155c <__uflow@plt>
   14b38:	cmn	r0, #1
   14b3c:	bne	14afc <__assert_fail@plt+0x34f8>
   14b40:	mov	r0, r5
   14b44:	bl	14d44 <__assert_fail@plt+0x3740>
   14b48:	b	14cc4 <__assert_fail@plt+0x36c0>
   14b4c:	ldrb	r0, [r4]
   14b50:	movw	r8, #4606	; 0x11fe
   14b54:	movt	r8, #3
   14b58:	cmp	r0, #1
   14b5c:	bne	14be8 <__assert_fail@plt+0x35e4>
   14b60:	ldrb	r0, [r8]
   14b64:	cmp	r0, #0
   14b68:	beq	14b78 <__assert_fail@plt+0x3574>
   14b6c:	mov	r0, #0
   14b70:	strb	r0, [r5, #37]	; 0x25
   14b74:	b	14be8 <__assert_fail@plt+0x35e4>
   14b78:	movw	r0, #4456	; 0x1168
   14b7c:	movt	r0, #3
   14b80:	ldr	r0, [r0]
   14b84:	cmp	r0, #0
   14b88:	beq	14be8 <__assert_fail@plt+0x35e4>
   14b8c:	movw	r1, #4676	; 0x1244
   14b90:	ands	r3, r0, #3
   14b94:	sub	r2, r0, #1
   14b98:	movt	r1, #3
   14b9c:	ldr	r1, [r1]
   14ba0:	beq	14bbc <__assert_fail@plt+0x35b8>
   14ba4:	mov	r4, #0
   14ba8:	strb	r4, [r1, #37]	; 0x25
   14bac:	subs	r3, r3, #1
   14bb0:	sub	r0, r0, #1
   14bb4:	add	r1, r1, #40	; 0x28
   14bb8:	bne	14ba8 <__assert_fail@plt+0x35a4>
   14bbc:	cmp	r2, #3
   14bc0:	bcc	14be8 <__assert_fail@plt+0x35e4>
   14bc4:	add	r1, r1, #117	; 0x75
   14bc8:	mov	r2, #0
   14bcc:	strb	r2, [r1, #40]	; 0x28
   14bd0:	strb	r2, [r1]
   14bd4:	strb	r2, [r1, #-40]	; 0xffffffd8
   14bd8:	strb	r2, [r1, #-80]	; 0xffffffb0
   14bdc:	add	r1, r1, #160	; 0xa0
   14be0:	subs	r0, r0, #4
   14be4:	bne	14bcc <__assert_fail@plt+0x35c8>
   14be8:	ldmib	r6, {r0, r1}
   14bec:	cmp	r0, r1
   14bf0:	bcs	14d10 <__assert_fail@plt+0x370c>
   14bf4:	add	r1, r0, #1
   14bf8:	str	r1, [r6, #4]
   14bfc:	ldrb	r0, [r0]
   14c00:	cmp	r0, #10
   14c04:	beq	14c10 <__assert_fail@plt+0x360c>
   14c08:	mov	r1, r6
   14c0c:	bl	114d8 <ungetc@plt>
   14c10:	ldrb	r0, [r8]
   14c14:	cmp	r0, #0
   14c18:	beq	14c28 <__assert_fail@plt+0x3624>
   14c1c:	mov	r0, #2
   14c20:	str	r0, [r5, #8]
   14c24:	b	14ca8 <__assert_fail@plt+0x36a4>
   14c28:	movw	r0, #4456	; 0x1168
   14c2c:	movt	r0, #3
   14c30:	ldr	r0, [r0]
   14c34:	cmp	r0, #0
   14c38:	beq	14ca8 <__assert_fail@plt+0x36a4>
   14c3c:	movw	r1, #4585	; 0x11e9
   14c40:	sub	r3, r0, #1
   14c44:	movt	r1, #3
   14c48:	ldrb	r2, [r1]
   14c4c:	mov	r1, #1
   14c50:	cmp	r2, #0
   14c54:	movw	r2, #4676	; 0x1244
   14c58:	movt	r2, #3
   14c5c:	movwne	r1, #2
   14c60:	ands	r6, r0, #3
   14c64:	ldr	r2, [r2]
   14c68:	beq	14c80 <__assert_fail@plt+0x367c>
   14c6c:	str	r1, [r2, #8]
   14c70:	subs	r6, r6, #1
   14c74:	sub	r0, r0, #1
   14c78:	add	r2, r2, #40	; 0x28
   14c7c:	bne	14c6c <__assert_fail@plt+0x3668>
   14c80:	cmp	r3, #3
   14c84:	bcc	14ca8 <__assert_fail@plt+0x36a4>
   14c88:	add	r2, r2, #128	; 0x80
   14c8c:	str	r1, [r2]
   14c90:	str	r1, [r2, #-40]	; 0xffffffd8
   14c94:	str	r1, [r2, #-80]	; 0xffffffb0
   14c98:	str	r1, [r2, #-120]	; 0xffffff88
   14c9c:	add	r2, r2, #160	; 0xa0
   14ca0:	subs	r0, r0, #4
   14ca4:	bne	14c8c <__assert_fail@plt+0x3688>
   14ca8:	mov	r0, #0
   14cac:	str	r0, [r5, #28]
   14cb0:	movw	r0, #4680	; 0x1248
   14cb4:	movt	r0, #3
   14cb8:	ldr	r1, [r0]
   14cbc:	sub	r1, r1, #1
   14cc0:	str	r1, [r0]
   14cc4:	movw	r0, #4608	; 0x1200
   14cc8:	movt	r0, #3
   14ccc:	ldrb	r0, [r0]
   14cd0:	cmp	r0, #0
   14cd4:	bne	14d0c <__assert_fail@plt+0x3708>
   14cd8:	movw	r1, #4606	; 0x11fe
   14cdc:	subs	r0, r9, #1
   14ce0:	movt	r1, #3
   14ce4:	movwne	r0, #1
   14ce8:	ldrb	r1, [r1]
   14cec:	and	r0, r0, r1
   14cf0:	orrs	r0, r7, r0
   14cf4:	bne	14d0c <__assert_fail@plt+0x3708>
   14cf8:	movw	r0, #4460	; 0x116c
   14cfc:	movt	r0, #3
   14d00:	ldr	r1, [r0]
   14d04:	add	r1, r1, #1
   14d08:	str	r1, [r0]
   14d0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d10:	mov	r0, r6
   14d14:	bl	1155c <__uflow@plt>
   14d18:	cmp	r0, #10
   14d1c:	bne	14c08 <__assert_fail@plt+0x3604>
   14d20:	b	14c10 <__assert_fail@plt+0x360c>
   14d24:	mov	r0, r6
   14d28:	bl	1155c <__uflow@plt>
   14d2c:	cmp	r0, #10
   14d30:	beq	14a8c <__assert_fail@plt+0x3488>
   14d34:	b	14aa4 <__assert_fail@plt+0x34a0>
   14d38:	mov	r0, r6
   14d3c:	bl	1155c <__uflow@plt>
   14d40:	b	14aa4 <__assert_fail@plt+0x34a0>
   14d44:	push	{r4, r5, r6, sl, fp, lr}
   14d48:	add	fp, sp, #16
   14d4c:	mov	r4, r0
   14d50:	ldr	r0, [r0, #8]
   14d54:	cmp	r0, #3
   14d58:	popeq	{r4, r5, r6, sl, fp, pc}
   14d5c:	bl	114e4 <__errno_location@plt>
   14d60:	mov	r6, r0
   14d64:	ldr	r1, [r0]
   14d68:	ldr	r0, [r4]
   14d6c:	ldr	r2, [r0]
   14d70:	lsl	r2, r2, #26
   14d74:	and	r5, r1, r2, asr #31
   14d78:	bl	11520 <fileno@plt>
   14d7c:	mov	r1, r0
   14d80:	ldr	r0, [r4]
   14d84:	cmp	r1, #0
   14d88:	beq	14e30 <__assert_fail@plt+0x382c>
   14d8c:	bl	163fc <__assert_fail@plt+0x4df8>
   14d90:	cmp	r5, #0
   14d94:	bne	14da0 <__assert_fail@plt+0x379c>
   14d98:	cmp	r0, #0
   14d9c:	ldrne	r5, [r6]
   14da0:	cmp	r5, #0
   14da4:	bne	14e3c <__assert_fail@plt+0x3838>
   14da8:	movw	r0, #4606	; 0x11fe
   14dac:	movt	r0, #3
   14db0:	ldrb	r0, [r0]
   14db4:	cmp	r0, #0
   14db8:	beq	14dd0 <__assert_fail@plt+0x37cc>
   14dbc:	mov	r0, #0
   14dc0:	str	r0, [r4, #28]
   14dc4:	mov	r0, #3
   14dc8:	str	r0, [r4, #8]
   14dcc:	b	14e18 <__assert_fail@plt+0x3814>
   14dd0:	movw	r0, #4456	; 0x1168
   14dd4:	movt	r0, #3
   14dd8:	ldr	r0, [r0]
   14ddc:	cmp	r0, #0
   14de0:	beq	14e18 <__assert_fail@plt+0x3814>
   14de4:	movw	r1, #4676	; 0x1244
   14de8:	mov	r2, #3
   14dec:	mov	r3, #0
   14df0:	movt	r1, #3
   14df4:	ldr	r1, [r1]
   14df8:	add	r1, r1, #24
   14dfc:	str	r2, [r1, #-16]
   14e00:	ldr	r6, [r1]
   14e04:	cmp	r6, #0
   14e08:	streq	r3, [r1, #4]
   14e0c:	add	r1, r1, #40	; 0x28
   14e10:	subs	r0, r0, #1
   14e14:	bne	14dfc <__assert_fail@plt+0x37f8>
   14e18:	movw	r0, #4680	; 0x1248
   14e1c:	movt	r0, #3
   14e20:	ldr	r1, [r0]
   14e24:	sub	r1, r1, #1
   14e28:	str	r1, [r0]
   14e2c:	pop	{r4, r5, r6, sl, fp, pc}
   14e30:	bl	115a4 <clearerr_unlocked@plt>
   14e34:	cmp	r5, #0
   14e38:	beq	14da8 <__assert_fail@plt+0x37a4>
   14e3c:	ldr	r2, [r4, #4]
   14e40:	mov	r0, #0
   14e44:	mov	r1, #3
   14e48:	bl	1a110 <__assert_fail@plt+0x8b0c>
   14e4c:	movw	r2, #2215	; 0x8a7
   14e50:	mov	r3, r0
   14e54:	mov	r0, #1
   14e58:	mov	r1, r5
   14e5c:	movt	r2, #2
   14e60:	bl	11418 <error@plt>
   14e64:	push	{r4, r5, r6, sl, fp, lr}
   14e68:	add	fp, sp, #16
   14e6c:	movw	r5, #4728	; 0x1278
   14e70:	movw	r2, #4720	; 0x1270
   14e74:	movw	r6, #4716	; 0x126c
   14e78:	mov	r4, r0
   14e7c:	movt	r2, #3
   14e80:	movt	r5, #3
   14e84:	movt	r6, #3
   14e88:	ldr	r1, [r5]
   14e8c:	ldr	r2, [r2]
   14e90:	ldr	r0, [r6]
   14e94:	cmp	r1, r2
   14e98:	bcc	14eb0 <__assert_fail@plt+0x38ac>
   14e9c:	movw	r1, #4720	; 0x1270
   14ea0:	movt	r1, #3
   14ea4:	bl	1b3b4 <__assert_fail@plt+0x9db0>
   14ea8:	ldr	r1, [r5]
   14eac:	str	r0, [r6]
   14eb0:	add	r2, r1, #1
   14eb4:	str	r2, [r5]
   14eb8:	strb	r4, [r0, r1]
   14ebc:	pop	{r4, r5, r6, sl, fp, pc}
   14ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ec4:	add	fp, sp, #28
   14ec8:	sub	sp, sp, #12
   14ecc:	ldr	r4, [r0, #20]
   14ed0:	movw	r1, #4708	; 0x1264
   14ed4:	mov	sl, r0
   14ed8:	movw	r9, #4732	; 0x127c
   14edc:	movt	r1, #3
   14ee0:	movt	r9, #3
   14ee4:	add	r0, r4, #1
   14ee8:	str	r0, [sl, #20]
   14eec:	ldr	r1, [r1]
   14ef0:	ldr	r7, [r1, r0, lsl #2]
   14ef4:	mov	r0, #1
   14ef8:	ldr	r5, [r1, r4, lsl #2]
   14efc:	strb	r0, [r9]
   14f00:	movw	r0, #4716	; 0x126c
   14f04:	movt	r0, #3
   14f08:	ldr	r8, [r0]
   14f0c:	movw	r0, #4733	; 0x127d
   14f10:	movt	r0, #3
   14f14:	ldrb	r0, [r0]
   14f18:	cmp	r0, #1
   14f1c:	bleq	15a08 <__assert_fail@plt+0x4404>
   14f20:	ldr	r0, [sl, #8]
   14f24:	cmp	r0, #1
   14f28:	bne	14fb0 <__assert_fail@plt+0x39ac>
   14f2c:	movw	r0, #4456	; 0x1168
   14f30:	movt	r0, #3
   14f34:	ldr	r3, [r0]
   14f38:	movw	r0, #4676	; 0x1244
   14f3c:	movt	r0, #3
   14f40:	ldr	r0, [r0]
   14f44:	cmp	r3, #1
   14f48:	blt	14fa4 <__assert_fail@plt+0x39a0>
   14f4c:	sub	r2, r3, #1
   14f50:	and	r1, r3, #3
   14f54:	cmp	r2, #3
   14f58:	mov	r2, r0
   14f5c:	bcc	14f88 <__assert_fail@plt+0x3984>
   14f60:	sub	r3, r1, r3
   14f64:	mov	r6, #2
   14f68:	mov	r2, r0
   14f6c:	str	r6, [r2, #128]	; 0x80
   14f70:	str	r6, [r2, #88]	; 0x58
   14f74:	str	r6, [r2, #48]	; 0x30
   14f78:	str	r6, [r2, #8]
   14f7c:	adds	r3, r3, #4
   14f80:	add	r2, r2, #160	; 0xa0
   14f84:	bne	14f6c <__assert_fail@plt+0x3968>
   14f88:	cmp	r1, #0
   14f8c:	beq	14fa4 <__assert_fail@plt+0x39a0>
   14f90:	add	r2, r2, #8
   14f94:	mov	r3, #2
   14f98:	str	r3, [r2], #40	; 0x28
   14f9c:	subs	r1, r1, #1
   14fa0:	bne	14f98 <__assert_fail@plt+0x3994>
   14fa4:	ldr	r0, [r0, #28]
   14fa8:	cmp	r0, #0
   14fac:	ble	15124 <__assert_fail@plt+0x3b20>
   14fb0:	movw	ip, #4736	; 0x1280
   14fb4:	str	r4, [sp, #8]
   14fb8:	movw	r4, #4620	; 0x120c
   14fbc:	movw	r9, #4740	; 0x1284
   14fc0:	movt	ip, #3
   14fc4:	movt	r4, #3
   14fc8:	movt	r9, #3
   14fcc:	ldr	r0, [ip]
   14fd0:	ldr	r1, [r4]
   14fd4:	cmp	r0, r1
   14fd8:	ble	15098 <__assert_fail@plt+0x3a94>
   14fdc:	movw	r3, #4604	; 0x11fc
   14fe0:	movw	r2, #4744	; 0x1288
   14fe4:	sub	lr, r0, r1
   14fe8:	movt	r3, #3
   14fec:	movt	r2, #3
   14ff0:	ldrb	r3, [r3]
   14ff4:	ldr	r2, [r2]
   14ff8:	cmp	r3, #0
   14ffc:	beq	1500c <__assert_fail@plt+0x3a08>
   15000:	sub	r0, lr, r2
   15004:	str	r0, [r9]
   15008:	b	15090 <__assert_fail@plt+0x3a8c>
   1500c:	cmp	lr, r2
   15010:	str	r8, [sp, #4]
   15014:	ble	15078 <__assert_fail@plt+0x3a74>
   15018:	movw	r9, #4564	; 0x11d4
   1501c:	add	r1, r2, r1
   15020:	mov	r6, #32
   15024:	movt	r9, #3
   15028:	sub	r8, r1, r0
   1502c:	ldr	r0, [r9]
   15030:	ldr	r1, [r0, #20]
   15034:	ldr	r2, [r0, #24]
   15038:	cmp	r1, r2
   1503c:	bcs	15058 <__assert_fail@plt+0x3a54>
   15040:	add	r2, r1, #1
   15044:	str	r2, [r0, #20]
   15048:	strb	r6, [r1]
   1504c:	adds	r8, r8, #1
   15050:	bcc	1502c <__assert_fail@plt+0x3a28>
   15054:	b	15078 <__assert_fail@plt+0x3a74>
   15058:	mov	r1, #32
   1505c:	str	lr, [sp]
   15060:	bl	11568 <__overflow@plt>
   15064:	ldr	lr, [sp]
   15068:	movw	ip, #4736	; 0x1280
   1506c:	movt	ip, #3
   15070:	adds	r8, r8, #1
   15074:	bcc	1502c <__assert_fail@plt+0x3a28>
   15078:	ldr	r8, [sp, #4]
   1507c:	movw	r0, #4744	; 0x1288
   15080:	movw	r9, #4740	; 0x1284
   15084:	movt	r0, #3
   15088:	movt	r9, #3
   1508c:	str	lr, [r0]
   15090:	mov	r0, #0
   15094:	str	r0, [ip]
   15098:	movw	r0, #4617	; 0x1209
   1509c:	movt	r0, #3
   150a0:	ldrb	r0, [r0]
   150a4:	cmp	r0, #1
   150a8:	bleq	15bb8 <__assert_fail@plt+0x45b4>
   150ac:	cmp	r5, r7
   150b0:	beq	150cc <__assert_fail@plt+0x3ac8>
   150b4:	add	r6, r8, r5
   150b8:	sub	r7, r7, r5
   150bc:	ldrb	r0, [r6], #1
   150c0:	bl	15148 <__assert_fail@plt+0x3b44>
   150c4:	subs	r7, r7, #1
   150c8:	bne	150bc <__assert_fail@plt+0x3ab8>
   150cc:	ldr	r0, [r9]
   150d0:	cmp	r0, #0
   150d4:	bne	1513c <__assert_fail@plt+0x3b38>
   150d8:	movw	r0, #4712	; 0x1268
   150dc:	ldr	r1, [sp, #8]
   150e0:	movw	r7, #4612	; 0x1204
   150e4:	ldr	r3, [sl, #32]
   150e8:	ldr	r2, [r4]
   150ec:	movt	r0, #3
   150f0:	movt	r7, #3
   150f4:	ldr	r0, [r0]
   150f8:	ldr	r7, [r7]
   150fc:	ldr	r0, [r0, r1, lsl #2]
   15100:	movw	r1, #4744	; 0x1288
   15104:	movt	r1, #3
   15108:	add	r0, r0, r3
   1510c:	sub	r3, r3, r2
   15110:	cmp	r3, r7
   15114:	str	r0, [r1]
   15118:	subeq	r0, r0, r2
   1511c:	streq	r0, [r1]
   15120:	b	1513c <__assert_fail@plt+0x3b38>
   15124:	movw	r0, #4624	; 0x1210
   15128:	movt	r0, #3
   1512c:	ldrb	r0, [r0]
   15130:	cmp	r0, #1
   15134:	moveq	r0, #0
   15138:	strbeq	r0, [r9]
   1513c:	mov	r0, #1
   15140:	sub	sp, fp, #28
   15144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15148:	push	{r4, sl, fp, lr}
   1514c:	add	fp, sp, #8
   15150:	mov	r4, r0
   15154:	movw	r0, #4604	; 0x11fc
   15158:	movt	r0, #3
   1515c:	ldrb	r0, [r0]
   15160:	cmp	r0, #1
   15164:	bne	151d8 <__assert_fail@plt+0x3bd4>
   15168:	movw	r0, #4740	; 0x1284
   1516c:	cmp	r4, #32
   15170:	movt	r0, #3
   15174:	ldr	r1, [r0]
   15178:	bne	15188 <__assert_fail@plt+0x3b84>
   1517c:	add	r1, r1, #1
   15180:	str	r1, [r0]
   15184:	pop	{r4, sl, fp, pc}
   15188:	cmp	r1, #1
   1518c:	blge	15cd4 <__assert_fail@plt+0x46d0>
   15190:	bl	11490 <__ctype_b_loc@plt>
   15194:	ldr	r0, [r0]
   15198:	add	r0, r0, r4, lsl #1
   1519c:	ldrb	r0, [r0, #1]
   151a0:	tst	r0, #64	; 0x40
   151a4:	bne	151c4 <__assert_fail@plt+0x3bc0>
   151a8:	cmp	r4, #8
   151ac:	bne	151d8 <__assert_fail@plt+0x3bd4>
   151b0:	movw	r0, #4744	; 0x1288
   151b4:	movt	r0, #3
   151b8:	ldr	r1, [r0]
   151bc:	sub	r1, r1, #1
   151c0:	b	151d4 <__assert_fail@plt+0x3bd0>
   151c4:	movw	r0, #4744	; 0x1288
   151c8:	movt	r0, #3
   151cc:	ldr	r1, [r0]
   151d0:	add	r1, r1, #1
   151d4:	str	r1, [r0]
   151d8:	movw	r0, #4564	; 0x11d4
   151dc:	movt	r0, #3
   151e0:	ldr	r0, [r0]
   151e4:	ldr	r1, [r0, #20]
   151e8:	ldr	r2, [r0, #24]
   151ec:	cmp	r1, r2
   151f0:	addcc	r2, r1, #1
   151f4:	strcc	r2, [r0, #20]
   151f8:	strbcc	r4, [r1]
   151fc:	popcc	{r4, sl, fp, pc}
   15200:	mov	r1, r4
   15204:	pop	{r4, sl, fp, lr}
   15208:	b	11568 <__overflow@plt>
   1520c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15210:	add	fp, sp, #28
   15214:	sub	sp, sp, #12
   15218:	mov	r4, r0
   1521c:	ldr	r0, [r0]
   15220:	ldmib	r0, {r1, r2}
   15224:	cmp	r1, r2
   15228:	bcs	159bc <__assert_fail@plt+0x43b8>
   1522c:	add	r2, r1, #1
   15230:	str	r2, [r0, #4]
   15234:	ldrb	r5, [r1]
   15238:	movw	sl, #4752	; 0x1290
   1523c:	cmp	r5, #12
   15240:	movt	sl, #3
   15244:	ldr	r7, [sl]
   15248:	bne	15298 <__assert_fail@plt+0x3c94>
   1524c:	ldrb	r0, [r4, #37]	; 0x25
   15250:	cmp	r0, #0
   15254:	beq	154fc <__assert_fail@plt+0x3ef8>
   15258:	ldr	r0, [r4]
   1525c:	ldmib	r0, {r1, r2}
   15260:	cmp	r1, r2
   15264:	bcs	159d8 <__assert_fail@plt+0x43d4>
   15268:	add	r2, r1, #1
   1526c:	str	r2, [r0, #4]
   15270:	ldrb	r5, [r1]
   15274:	cmp	r5, #10
   15278:	bne	15298 <__assert_fail@plt+0x3c94>
   1527c:	ldr	r0, [r4]
   15280:	ldmib	r0, {r1, r2}
   15284:	cmp	r1, r2
   15288:	bcs	159ec <__assert_fail@plt+0x43e8>
   1528c:	add	r2, r1, #1
   15290:	str	r2, [r0, #4]
   15294:	ldrb	r5, [r1]
   15298:	mov	r0, #0
   1529c:	cmn	r5, #1
   152a0:	strb	r0, [r4, #37]	; 0x25
   152a4:	beq	152c8 <__assert_fail@plt+0x3cc4>
   152a8:	cmp	r5, #10
   152ac:	beq	152d4 <__assert_fail@plt+0x3cd0>
   152b0:	cmp	r5, #12
   152b4:	beq	15504 <__assert_fail@plt+0x3f00>
   152b8:	uxtb	r0, r5
   152bc:	bl	15de4 <__assert_fail@plt+0x47e0>
   152c0:	mov	r6, r0
   152c4:	b	152d4 <__assert_fail@plt+0x3cd0>
   152c8:	mov	r0, r4
   152cc:	bl	14d44 <__assert_fail@plt+0x3740>
   152d0:	b	1565c <__assert_fail@plt+0x4058>
   152d4:	movw	r0, #4627	; 0x1213
   152d8:	movt	r0, #3
   152dc:	ldrb	r0, [r0]
   152e0:	cmp	r0, #1
   152e4:	bne	15300 <__assert_fail@plt+0x3cfc>
   152e8:	movw	r0, #4660	; 0x1234
   152ec:	ldr	r1, [sl]
   152f0:	movt	r0, #3
   152f4:	ldr	r0, [r0]
   152f8:	cmp	r1, r0
   152fc:	bgt	1589c <__assert_fail@plt+0x4298>
   15300:	ldr	r0, [r4, #16]
   15304:	movw	r1, #20068	; 0x4e64
   15308:	movt	r1, #1
   1530c:	cmp	r0, r1
   15310:	beq	1579c <__assert_fail@plt+0x4198>
   15314:	movw	r0, #4732	; 0x127c
   15318:	mov	r1, #1
   1531c:	movt	r0, #3
   15320:	strb	r1, [r0]
   15324:	movw	r0, #4733	; 0x127d
   15328:	movt	r0, #3
   1532c:	ldrb	r0, [r0]
   15330:	cmp	r0, #1
   15334:	bne	1534c <__assert_fail@plt+0x3d48>
   15338:	movw	r0, #4585	; 0x11e9
   1533c:	movt	r0, #3
   15340:	ldrb	r0, [r0]
   15344:	cmp	r0, #1
   15348:	bleq	15a08 <__assert_fail@plt+0x4404>
   1534c:	movw	r0, #4606	; 0x11fe
   15350:	movt	r0, #3
   15354:	ldrb	r0, [r0]
   15358:	cmp	r0, #1
   1535c:	bne	156ac <__assert_fail@plt+0x40a8>
   15360:	movw	r0, #4758	; 0x1296
   15364:	movt	r0, #3
   15368:	ldrb	r0, [r0]
   1536c:	cmp	r0, #1
   15370:	bne	156ac <__assert_fail@plt+0x40a8>
   15374:	movw	r1, #4748	; 0x128c
   15378:	str	r5, [sp, #4]
   1537c:	movw	r5, #4736	; 0x1280
   15380:	mov	r0, #0
   15384:	movt	r1, #3
   15388:	movt	r5, #3
   1538c:	ldr	r2, [r1]
   15390:	str	r0, [r1]
   15394:	cmp	r2, #1
   15398:	str	r2, [sp, #8]
   1539c:	blt	15664 <__assert_fail@plt+0x4060>
   153a0:	movw	r0, #4676	; 0x1244
   153a4:	movw	ip, #4564	; 0x11d4
   153a8:	mov	r8, #1
   153ac:	mov	r9, #32
   153b0:	movt	r0, #3
   153b4:	movt	ip, #3
   153b8:	ldr	r7, [r0]
   153bc:	b	153f0 <__assert_fail@plt+0x3dec>
   153c0:	movw	r0, #4748	; 0x128c
   153c4:	add	r7, r7, #40	; 0x28
   153c8:	movt	r0, #3
   153cc:	mov	r1, r0
   153d0:	ldr	r0, [r0]
   153d4:	add	r0, r0, #1
   153d8:	str	r0, [r1]
   153dc:	ldr	r1, [sp, #8]
   153e0:	add	r0, r8, #1
   153e4:	cmp	r8, r1
   153e8:	mov	r8, r0
   153ec:	beq	15664 <__assert_fail@plt+0x4060>
   153f0:	movw	r1, #4620	; 0x120c
   153f4:	ldr	r0, [r7, #32]
   153f8:	movt	r1, #3
   153fc:	ldr	r1, [r1]
   15400:	str	r0, [r5]
   15404:	cmp	r0, r1
   15408:	ble	154bc <__assert_fail@plt+0x3eb8>
   1540c:	movw	r3, #4604	; 0x11fc
   15410:	movw	r2, #4744	; 0x1288
   15414:	sub	r5, r0, r1
   15418:	movt	r3, #3
   1541c:	movt	r2, #3
   15420:	ldrb	r3, [r3]
   15424:	ldr	r2, [r2]
   15428:	cmp	r3, #0
   1542c:	beq	15444 <__assert_fail@plt+0x3e40>
   15430:	movw	r1, #4740	; 0x1284
   15434:	sub	r0, r5, r2
   15438:	movt	r1, #3
   1543c:	str	r0, [r1]
   15440:	b	154ac <__assert_fail@plt+0x3ea8>
   15444:	cmp	r5, r2
   15448:	ble	15498 <__assert_fail@plt+0x3e94>
   1544c:	add	r1, r2, r1
   15450:	sub	sl, r1, r0
   15454:	ldr	r0, [ip]
   15458:	ldr	r1, [r0, #20]
   1545c:	ldr	r2, [r0, #24]
   15460:	cmp	r1, r2
   15464:	bcs	15480 <__assert_fail@plt+0x3e7c>
   15468:	add	r2, r1, #1
   1546c:	str	r2, [r0, #20]
   15470:	strb	r9, [r1]
   15474:	adds	sl, sl, #1
   15478:	bcc	15454 <__assert_fail@plt+0x3e50>
   1547c:	b	15498 <__assert_fail@plt+0x3e94>
   15480:	mov	r1, #32
   15484:	bl	11568 <__overflow@plt>
   15488:	movw	ip, #4564	; 0x11d4
   1548c:	movt	ip, #3
   15490:	adds	sl, sl, #1
   15494:	bcc	15454 <__assert_fail@plt+0x3e50>
   15498:	movw	r0, #4744	; 0x1288
   1549c:	movw	sl, #4752	; 0x1290
   154a0:	movt	r0, #3
   154a4:	movt	sl, #3
   154a8:	str	r5, [r0]
   154ac:	movw	r5, #4736	; 0x1280
   154b0:	mov	r0, #0
   154b4:	movt	r5, #3
   154b8:	str	r0, [r5]
   154bc:	movw	r0, #4617	; 0x1209
   154c0:	movt	r0, #3
   154c4:	ldrb	r0, [r0]
   154c8:	cmp	r0, #1
   154cc:	bne	154dc <__assert_fail@plt+0x3ed8>
   154d0:	bl	15bb8 <__assert_fail@plt+0x45b4>
   154d4:	movw	ip, #4564	; 0x11d4
   154d8:	movt	ip, #3
   154dc:	ldrb	r0, [r7, #36]	; 0x24
   154e0:	cmp	r0, #0
   154e4:	beq	153c0 <__assert_fail@plt+0x3dbc>
   154e8:	mov	r0, r7
   154ec:	bl	15fa8 <__assert_fail@plt+0x49a4>
   154f0:	movw	ip, #4564	; 0x11d4
   154f4:	movt	ip, #3
   154f8:	b	153c0 <__assert_fail@plt+0x3dbc>
   154fc:	mov	r0, #0
   15500:	strb	r0, [r4, #37]	; 0x25
   15504:	ldr	r0, [r4]
   15508:	ldmib	r0, {r1, r2}
   1550c:	cmp	r1, r2
   15510:	bcs	159c8 <__assert_fail@plt+0x43c4>
   15514:	add	r2, r1, #1
   15518:	str	r2, [r0, #4]
   1551c:	ldrb	r0, [r1]
   15520:	cmp	r0, #10
   15524:	beq	15530 <__assert_fail@plt+0x3f2c>
   15528:	ldr	r1, [r4]
   1552c:	bl	114d8 <ungetc@plt>
   15530:	movw	r0, #4756	; 0x1294
   15534:	mov	r1, #1
   15538:	movt	r0, #3
   1553c:	strb	r1, [r0]
   15540:	movw	r0, #4733	; 0x127d
   15544:	movt	r0, #3
   15548:	ldrb	r0, [r0]
   1554c:	cmp	r0, #1
   15550:	bne	15580 <__assert_fail@plt+0x3f7c>
   15554:	movw	r0, #4585	; 0x11e9
   15558:	movt	r0, #3
   1555c:	ldrb	r0, [r0]
   15560:	cmp	r0, #1
   15564:	bne	15580 <__assert_fail@plt+0x3f7c>
   15568:	movw	r0, #4732	; 0x127c
   1556c:	mov	r1, #1
   15570:	movt	r0, #3
   15574:	strb	r1, [r0]
   15578:	bl	15a08 <__assert_fail@plt+0x4404>
   1557c:	b	155a0 <__assert_fail@plt+0x3f9c>
   15580:	movw	r0, #4625	; 0x1211
   15584:	movt	r0, #3
   15588:	ldrb	r0, [r0]
   1558c:	cmp	r0, #1
   15590:	movweq	r0, #4757	; 0x1295
   15594:	moveq	r1, #1
   15598:	movteq	r0, #3
   1559c:	strbeq	r1, [r0]
   155a0:	movw	r0, #4606	; 0x11fe
   155a4:	movt	r0, #3
   155a8:	ldrb	r0, [r0]
   155ac:	cmp	r0, #0
   155b0:	beq	155c0 <__assert_fail@plt+0x3fbc>
   155b4:	mov	r0, #2
   155b8:	str	r0, [r4, #8]
   155bc:	b	15640 <__assert_fail@plt+0x403c>
   155c0:	movw	r0, #4456	; 0x1168
   155c4:	movt	r0, #3
   155c8:	ldr	r0, [r0]
   155cc:	cmp	r0, #0
   155d0:	beq	15640 <__assert_fail@plt+0x403c>
   155d4:	movw	r1, #4585	; 0x11e9
   155d8:	sub	r3, r0, #1
   155dc:	movt	r1, #3
   155e0:	ldrb	r2, [r1]
   155e4:	mov	r1, #1
   155e8:	cmp	r2, #0
   155ec:	movw	r2, #4676	; 0x1244
   155f0:	movt	r2, #3
   155f4:	movwne	r1, #2
   155f8:	ands	r7, r0, #3
   155fc:	ldr	r2, [r2]
   15600:	beq	15618 <__assert_fail@plt+0x4014>
   15604:	str	r1, [r2, #8]
   15608:	subs	r7, r7, #1
   1560c:	sub	r0, r0, #1
   15610:	add	r2, r2, #40	; 0x28
   15614:	bne	15604 <__assert_fail@plt+0x4000>
   15618:	cmp	r3, #3
   1561c:	bcc	15640 <__assert_fail@plt+0x403c>
   15620:	add	r2, r2, #128	; 0x80
   15624:	str	r1, [r2]
   15628:	str	r1, [r2, #-40]	; 0xffffffd8
   1562c:	str	r1, [r2, #-80]	; 0xffffffb0
   15630:	str	r1, [r2, #-120]	; 0xffffff88
   15634:	add	r2, r2, #160	; 0xa0
   15638:	subs	r0, r0, #4
   1563c:	bne	15624 <__assert_fail@plt+0x4020>
   15640:	mov	r0, #0
   15644:	str	r0, [r4, #28]
   15648:	movw	r0, #4680	; 0x1248
   1564c:	movt	r0, #3
   15650:	ldr	r1, [r0]
   15654:	sub	r1, r1, #1
   15658:	str	r1, [r0]
   1565c:	mov	r8, #1
   15660:	b	158a4 <__assert_fail@plt+0x42a0>
   15664:	movw	r1, #4758	; 0x1296
   15668:	mov	r2, #0
   1566c:	ldr	r0, [r4, #32]
   15670:	movt	r1, #3
   15674:	strb	r2, [r1]
   15678:	movw	r1, #4627	; 0x1213
   1567c:	movt	r1, #3
   15680:	str	r0, [r5]
   15684:	movw	r0, #4660	; 0x1234
   15688:	ldr	r5, [sp, #4]
   1568c:	movt	r0, #3
   15690:	ldrb	r1, [r1]
   15694:	ldr	r0, [r0]
   15698:	cmp	r1, #0
   1569c:	moveq	r0, r1
   156a0:	movw	r1, #4740	; 0x1284
   156a4:	movt	r1, #3
   156a8:	str	r0, [r1]
   156ac:	movw	r0, #4736	; 0x1280
   156b0:	movw	r1, #4620	; 0x120c
   156b4:	movt	r0, #3
   156b8:	movt	r1, #3
   156bc:	ldr	r0, [r0]
   156c0:	ldr	r1, [r1]
   156c4:	cmp	r0, r1
   156c8:	ble	15788 <__assert_fail@plt+0x4184>
   156cc:	movw	r3, #4604	; 0x11fc
   156d0:	movw	ip, #4744	; 0x1288
   156d4:	mov	r8, r5
   156d8:	sub	r9, r0, r1
   156dc:	movt	r3, #3
   156e0:	movt	ip, #3
   156e4:	ldrb	r3, [r3]
   156e8:	ldr	r2, [ip]
   156ec:	cmp	r3, #0
   156f0:	beq	15708 <__assert_fail@plt+0x4104>
   156f4:	movw	r1, #4740	; 0x1284
   156f8:	sub	r0, r9, r2
   156fc:	movt	r1, #3
   15700:	str	r0, [r1]
   15704:	b	15774 <__assert_fail@plt+0x4170>
   15708:	cmp	r9, r2
   1570c:	ble	15768 <__assert_fail@plt+0x4164>
   15710:	movw	sl, #4564	; 0x11d4
   15714:	add	r1, r2, r1
   15718:	mov	r7, #32
   1571c:	movt	sl, #3
   15720:	sub	r5, r1, r0
   15724:	ldr	r0, [sl]
   15728:	ldr	r1, [r0, #20]
   1572c:	ldr	r2, [r0, #24]
   15730:	cmp	r1, r2
   15734:	bcs	15750 <__assert_fail@plt+0x414c>
   15738:	add	r2, r1, #1
   1573c:	str	r2, [r0, #20]
   15740:	strb	r7, [r1]
   15744:	adds	r5, r5, #1
   15748:	bcc	15724 <__assert_fail@plt+0x4120>
   1574c:	b	15768 <__assert_fail@plt+0x4164>
   15750:	mov	r1, #32
   15754:	bl	11568 <__overflow@plt>
   15758:	movw	ip, #4744	; 0x1288
   1575c:	movt	ip, #3
   15760:	adds	r5, r5, #1
   15764:	bcc	15724 <__assert_fail@plt+0x4120>
   15768:	movw	sl, #4752	; 0x1290
   1576c:	str	r9, [ip]
   15770:	movt	sl, #3
   15774:	movw	r1, #4736	; 0x1280
   15778:	mov	r5, r8
   1577c:	mov	r0, #0
   15780:	movt	r1, #3
   15784:	str	r0, [r1]
   15788:	movw	r0, #4617	; 0x1209
   1578c:	movt	r0, #3
   15790:	ldrb	r0, [r0]
   15794:	cmp	r0, #1
   15798:	bleq	15bb8 <__assert_fail@plt+0x45b4>
   1579c:	ldrb	r0, [r4, #36]	; 0x24
   157a0:	cmp	r0, #0
   157a4:	movne	r0, r4
   157a8:	blne	15fa8 <__assert_fail@plt+0x49a4>
   157ac:	movw	r0, #4759	; 0x1297
   157b0:	mov	r1, #0
   157b4:	mov	r8, #1
   157b8:	cmp	r5, #10
   157bc:	movt	r0, #3
   157c0:	strb	r1, [r0]
   157c4:	beq	158a4 <__assert_fail@plt+0x42a0>
   157c8:	movw	r9, #4668	; 0x123c
   157cc:	cmp	r6, #0
   157d0:	movt	r9, #3
   157d4:	beq	157f0 <__assert_fail@plt+0x41ec>
   157d8:	ldr	r5, [r9]
   157dc:	ldrb	r0, [r5], #1
   157e0:	ldr	r1, [r4, #16]
   157e4:	blx	r1
   157e8:	subs	r6, r6, #1
   157ec:	bne	157dc <__assert_fail@plt+0x41d8>
   157f0:	movw	r6, #4660	; 0x1234
   157f4:	movt	r6, #3
   157f8:	ldr	r0, [r4]
   157fc:	ldmib	r0, {r1, r2}
   15800:	cmp	r1, r2
   15804:	bcs	15884 <__assert_fail@plt+0x4280>
   15808:	add	r2, r1, #1
   1580c:	str	r2, [r0, #4]
   15810:	ldrb	r0, [r1]
   15814:	cmn	r0, #1
   15818:	beq	15890 <__assert_fail@plt+0x428c>
   1581c:	cmp	r0, #10
   15820:	beq	158a4 <__assert_fail@plt+0x42a0>
   15824:	cmp	r0, #12
   15828:	beq	158b0 <__assert_fail@plt+0x42ac>
   1582c:	ldr	r7, [sl]
   15830:	uxtb	r0, r0
   15834:	bl	15de4 <__assert_fail@plt+0x47e0>
   15838:	mov	r5, r0
   1583c:	movw	r0, #4627	; 0x1213
   15840:	movt	r0, #3
   15844:	ldrb	r0, [r0]
   15848:	cmp	r0, #1
   1584c:	bne	15860 <__assert_fail@plt+0x425c>
   15850:	ldr	r0, [r6]
   15854:	ldr	r1, [sl]
   15858:	cmp	r1, r0
   1585c:	bgt	1589c <__assert_fail@plt+0x4298>
   15860:	cmp	r5, #0
   15864:	beq	157f8 <__assert_fail@plt+0x41f4>
   15868:	ldr	r7, [r9]
   1586c:	ldrb	r0, [r7], #1
   15870:	ldr	r1, [r4, #16]
   15874:	blx	r1
   15878:	subs	r5, r5, #1
   1587c:	bne	1586c <__assert_fail@plt+0x4268>
   15880:	b	157f8 <__assert_fail@plt+0x41f4>
   15884:	bl	1155c <__uflow@plt>
   15888:	cmn	r0, #1
   1588c:	bne	1581c <__assert_fail@plt+0x4218>
   15890:	mov	r0, r4
   15894:	bl	14d44 <__assert_fail@plt+0x3740>
   15898:	b	158a4 <__assert_fail@plt+0x42a0>
   1589c:	str	r7, [sl]
   158a0:	mov	r8, #0
   158a4:	mov	r0, r8
   158a8:	sub	sp, fp, #28
   158ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158b0:	ldr	r0, [r4]
   158b4:	ldmib	r0, {r1, r2}
   158b8:	cmp	r1, r2
   158bc:	bcs	159f8 <__assert_fail@plt+0x43f4>
   158c0:	add	r2, r1, #1
   158c4:	str	r2, [r0, #4]
   158c8:	ldrb	r0, [r1]
   158cc:	cmp	r0, #10
   158d0:	beq	158dc <__assert_fail@plt+0x42d8>
   158d4:	ldr	r1, [r4]
   158d8:	bl	114d8 <ungetc@plt>
   158dc:	movw	r0, #4625	; 0x1211
   158e0:	movt	r0, #3
   158e4:	ldrb	r0, [r0]
   158e8:	cmp	r0, #1
   158ec:	movweq	r0, #4757	; 0x1295
   158f0:	moveq	r1, #1
   158f4:	movteq	r0, #3
   158f8:	strbeq	r1, [r0]
   158fc:	movw	r0, #4606	; 0x11fe
   15900:	movt	r0, #3
   15904:	ldrb	r0, [r0]
   15908:	cmp	r0, #0
   1590c:	beq	1591c <__assert_fail@plt+0x4318>
   15910:	mov	r0, #2
   15914:	str	r0, [r4, #8]
   15918:	b	1599c <__assert_fail@plt+0x4398>
   1591c:	movw	r0, #4456	; 0x1168
   15920:	movt	r0, #3
   15924:	ldr	r0, [r0]
   15928:	cmp	r0, #0
   1592c:	beq	1599c <__assert_fail@plt+0x4398>
   15930:	movw	r1, #4585	; 0x11e9
   15934:	sub	r3, r0, #1
   15938:	movt	r1, #3
   1593c:	ldrb	r2, [r1]
   15940:	mov	r1, #1
   15944:	cmp	r2, #0
   15948:	movw	r2, #4676	; 0x1244
   1594c:	movt	r2, #3
   15950:	movwne	r1, #2
   15954:	ands	r6, r0, #3
   15958:	ldr	r2, [r2]
   1595c:	beq	15974 <__assert_fail@plt+0x4370>
   15960:	str	r1, [r2, #8]
   15964:	subs	r6, r6, #1
   15968:	sub	r0, r0, #1
   1596c:	add	r2, r2, #40	; 0x28
   15970:	bne	15960 <__assert_fail@plt+0x435c>
   15974:	cmp	r3, #3
   15978:	bcc	1599c <__assert_fail@plt+0x4398>
   1597c:	add	r2, r2, #128	; 0x80
   15980:	str	r1, [r2]
   15984:	str	r1, [r2, #-40]	; 0xffffffd8
   15988:	str	r1, [r2, #-80]	; 0xffffffb0
   1598c:	str	r1, [r2, #-120]	; 0xffffff88
   15990:	add	r2, r2, #160	; 0xa0
   15994:	subs	r0, r0, #4
   15998:	bne	15980 <__assert_fail@plt+0x437c>
   1599c:	mov	r0, #0
   159a0:	str	r0, [r4, #28]
   159a4:	movw	r0, #4680	; 0x1248
   159a8:	movt	r0, #3
   159ac:	ldr	r1, [r0]
   159b0:	sub	r1, r1, #1
   159b4:	str	r1, [r0]
   159b8:	b	158a4 <__assert_fail@plt+0x42a0>
   159bc:	bl	1155c <__uflow@plt>
   159c0:	mov	r5, r0
   159c4:	b	15238 <__assert_fail@plt+0x3c34>
   159c8:	bl	1155c <__uflow@plt>
   159cc:	cmp	r0, #10
   159d0:	bne	15528 <__assert_fail@plt+0x3f24>
   159d4:	b	15530 <__assert_fail@plt+0x3f2c>
   159d8:	bl	1155c <__uflow@plt>
   159dc:	mov	r5, r0
   159e0:	cmp	r5, #10
   159e4:	beq	1527c <__assert_fail@plt+0x3c78>
   159e8:	b	15298 <__assert_fail@plt+0x3c94>
   159ec:	bl	1155c <__uflow@plt>
   159f0:	mov	r5, r0
   159f4:	b	15298 <__assert_fail@plt+0x3c94>
   159f8:	bl	1155c <__uflow@plt>
   159fc:	cmp	r0, #10
   15a00:	bne	158d4 <__assert_fail@plt+0x42d0>
   15a04:	b	158dc <__assert_fail@plt+0x42d8>
   15a08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15a0c:	add	fp, sp, #24
   15a10:	sub	sp, sp, #312	; 0x138
   15a14:	movw	r4, #4744	; 0x1288
   15a18:	mov	r0, #0
   15a1c:	movw	r8, #4612	; 0x1204
   15a20:	movt	r4, #3
   15a24:	movt	r8, #3
   15a28:	str	r0, [r4]
   15a2c:	movw	r0, #4604	; 0x11fc
   15a30:	ldr	r9, [r8]
   15a34:	movt	r0, #3
   15a38:	ldrb	r0, [r0]
   15a3c:	cmp	r0, #0
   15a40:	beq	15a50 <__assert_fail@plt+0x444c>
   15a44:	movw	r4, #4740	; 0x1284
   15a48:	movt	r4, #3
   15a4c:	b	15aa4 <__assert_fail@plt+0x44a0>
   15a50:	cmp	r9, #1
   15a54:	blt	15aa4 <__assert_fail@plt+0x44a0>
   15a58:	movw	r7, #4564	; 0x11d4
   15a5c:	mov	r5, #32
   15a60:	mov	r6, r9
   15a64:	movt	r7, #3
   15a68:	ldr	r0, [r7]
   15a6c:	ldr	r1, [r0, #20]
   15a70:	ldr	r2, [r0, #24]
   15a74:	cmp	r1, r2
   15a78:	bcs	15a94 <__assert_fail@plt+0x4490>
   15a7c:	add	r2, r1, #1
   15a80:	str	r2, [r0, #20]
   15a84:	strb	r5, [r1]
   15a88:	subs	r6, r6, #1
   15a8c:	bne	15a68 <__assert_fail@plt+0x4464>
   15a90:	b	15aa4 <__assert_fail@plt+0x44a0>
   15a94:	mov	r1, #32
   15a98:	bl	11568 <__overflow@plt>
   15a9c:	subs	r6, r6, #1
   15aa0:	bne	15a68 <__assert_fail@plt+0x4464>
   15aa4:	str	r9, [r4]
   15aa8:	bl	15cd4 <__assert_fail@plt+0x46d0>
   15aac:	movw	r4, #4640	; 0x1220
   15ab0:	movt	r4, #3
   15ab4:	ldrd	r0, [r4]
   15ab8:	orrs	r0, r0, r1
   15abc:	beq	15b94 <__assert_fail@plt+0x4590>
   15ac0:	movw	r1, #1158	; 0x486
   15ac4:	mov	r0, #0
   15ac8:	mov	r2, #5
   15acc:	mov	r6, #0
   15ad0:	movt	r1, #2
   15ad4:	bl	1137c <dcgettext@plt>
   15ad8:	mov	r3, r0
   15adc:	ldrd	r0, [r4]
   15ae0:	add	r4, sp, #32
   15ae4:	mov	r2, #276	; 0x114
   15ae8:	stm	sp, {r0, r1}
   15aec:	mov	r0, r4
   15af0:	mov	r1, #1
   15af4:	bl	114f0 <__sprintf_chk@plt>
   15af8:	movw	r0, #4704	; 0x1260
   15afc:	mov	r1, #0
   15b00:	movt	r0, #3
   15b04:	ldr	r5, [r0]
   15b08:	mov	r0, r4
   15b0c:	bl	167c4 <__assert_fail@plt+0x51c0>
   15b10:	movw	r1, #4696	; 0x1258
   15b14:	movw	r3, #4700	; 0x125c
   15b18:	sub	r0, r5, r0
   15b1c:	movw	r5, #1077	; 0x435
   15b20:	ldr	r2, [r8]
   15b24:	movt	r1, #3
   15b28:	movt	r3, #3
   15b2c:	bic	r0, r0, r0, asr #31
   15b30:	movt	r5, #2
   15b34:	ldr	r1, [r1]
   15b38:	ldr	r3, [r3]
   15b3c:	sub	r7, r0, r0, lsr #1
   15b40:	lsr	r0, r0, #1
   15b44:	str	r1, [sp]
   15b48:	stmib	sp, {r0, r5}
   15b4c:	movw	r1, #1168	; 0x490
   15b50:	str	r3, [sp, #12]
   15b54:	movw	r3, #1076	; 0x434
   15b58:	mov	r0, #1
   15b5c:	str	r7, [sp, #16]
   15b60:	str	r5, [sp, #20]
   15b64:	str	r4, [sp, #24]
   15b68:	movt	r1, #2
   15b6c:	movt	r3, #2
   15b70:	bl	11514 <__printf_chk@plt>
   15b74:	movw	r0, #4733	; 0x127d
   15b78:	movt	r0, #3
   15b7c:	strb	r6, [r0]
   15b80:	movw	r0, #4744	; 0x1288
   15b84:	movt	r0, #3
   15b88:	str	r6, [r0]
   15b8c:	sub	sp, fp, #24
   15b90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b94:	movw	r1, #1137	; 0x471
   15b98:	mov	r0, #0
   15b9c:	mov	r2, #5
   15ba0:	movt	r1, #2
   15ba4:	bl	1137c <dcgettext@plt>
   15ba8:	mov	r2, r0
   15bac:	mov	r0, #1
   15bb0:	mov	r1, #0
   15bb4:	bl	11418 <error@plt>
   15bb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15bbc:	add	fp, sp, #24
   15bc0:	movw	r8, #4748	; 0x128c
   15bc4:	movt	r8, #3
   15bc8:	ldr	r0, [r8]
   15bcc:	cmp	r0, #1
   15bd0:	blt	15cb4 <__assert_fail@plt+0x46b0>
   15bd4:	movw	r0, #4440	; 0x1158
   15bd8:	movw	r6, #4740	; 0x1284
   15bdc:	movw	r9, #4564	; 0x11d4
   15be0:	movw	r4, #4744	; 0x1288
   15be4:	movt	r0, #3
   15be8:	movt	r6, #3
   15bec:	movt	r9, #3
   15bf0:	movt	r4, #3
   15bf4:	ldr	r5, [r0]
   15bf8:	movw	r0, #4620	; 0x120c
   15bfc:	movt	r0, #3
   15c00:	ldr	r7, [r0]
   15c04:	subs	r0, r7, #1
   15c08:	bge	15c60 <__assert_fail@plt+0x465c>
   15c0c:	b	15c3c <__assert_fail@plt+0x4638>
   15c10:	mvn	r7, #0
   15c14:	ldr	r0, [r6]
   15c18:	cmp	r0, #1
   15c1c:	blge	15cd4 <__assert_fail@plt+0x46d0>
   15c20:	ldr	r0, [r8]
   15c24:	sub	r0, r0, #1
   15c28:	cmp	r0, #0
   15c2c:	str	r0, [r8]
   15c30:	ble	15cd0 <__assert_fail@plt+0x46cc>
   15c34:	subs	r0, r7, #1
   15c38:	bge	15c60 <__assert_fail@plt+0x465c>
   15c3c:	mov	r7, r0
   15c40:	b	15c14 <__assert_fail@plt+0x4610>
   15c44:	mov	r1, r6
   15c48:	sub	r7, r7, #1
   15c4c:	add	r0, r0, #1
   15c50:	add	r5, r5, #1
   15c54:	cmp	r7, #0
   15c58:	str	r0, [r1]
   15c5c:	ble	15c10 <__assert_fail@plt+0x460c>
   15c60:	ldrb	r1, [r5]
   15c64:	ldr	r0, [r6]
   15c68:	cmp	r1, #32
   15c6c:	beq	15c44 <__assert_fail@plt+0x4640>
   15c70:	cmp	r0, #1
   15c74:	blt	15c80 <__assert_fail@plt+0x467c>
   15c78:	bl	15cd4 <__assert_fail@plt+0x46d0>
   15c7c:	ldrb	r1, [r5]
   15c80:	ldr	r0, [r9]
   15c84:	ldr	r2, [r0, #20]
   15c88:	ldr	r3, [r0, #24]
   15c8c:	cmp	r2, r3
   15c90:	bcs	15cac <__assert_fail@plt+0x46a8>
   15c94:	add	r3, r2, #1
   15c98:	str	r3, [r0, #20]
   15c9c:	strb	r1, [r2]
   15ca0:	ldr	r0, [r4]
   15ca4:	mov	r1, r4
   15ca8:	b	15c48 <__assert_fail@plt+0x4644>
   15cac:	bl	11568 <__overflow@plt>
   15cb0:	b	15ca0 <__assert_fail@plt+0x469c>
   15cb4:	movw	r0, #4740	; 0x1284
   15cb8:	movt	r0, #3
   15cbc:	ldr	r0, [r0]
   15cc0:	cmp	r0, #1
   15cc4:	blt	15cd0 <__assert_fail@plt+0x46cc>
   15cc8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   15ccc:	b	15cd4 <__assert_fail@plt+0x46d0>
   15cd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cd8:	add	fp, sp, #28
   15cdc:	sub	sp, sp, #4
   15ce0:	movw	r8, #4744	; 0x1288
   15ce4:	movw	r9, #4740	; 0x1284
   15ce8:	movt	r8, #3
   15cec:	movt	r9, #3
   15cf0:	ldr	r1, [r9]
   15cf4:	ldr	r0, [r8]
   15cf8:	add	r6, r1, r0
   15cfc:	cmp	r1, #2
   15d00:	blt	15d7c <__assert_fail@plt+0x4778>
   15d04:	movw	r7, #4420	; 0x1144
   15d08:	movw	sl, #4416	; 0x1140
   15d0c:	movw	r5, #4564	; 0x11d4
   15d10:	movt	r7, #3
   15d14:	movt	sl, #3
   15d18:	movt	r5, #3
   15d1c:	ldr	r1, [r7]
   15d20:	sdiv	r2, r0, r1
   15d24:	mul	r2, r2, r1
   15d28:	sub	r2, r2, r0
   15d2c:	add	r1, r1, r2
   15d30:	add	r4, r1, r0
   15d34:	cmp	r6, r4
   15d38:	blt	15d7c <__assert_fail@plt+0x4778>
   15d3c:	ldr	r0, [r5]
   15d40:	ldrb	r1, [sl]
   15d44:	ldr	r2, [r0, #20]
   15d48:	ldr	r3, [r0, #24]
   15d4c:	cmp	r2, r3
   15d50:	bcs	15d74 <__assert_fail@plt+0x4770>
   15d54:	add	r3, r2, #1
   15d58:	str	r3, [r0, #20]
   15d5c:	strb	r1, [r2]
   15d60:	sub	r0, r6, r4
   15d64:	cmp	r0, #1
   15d68:	mov	r0, r4
   15d6c:	bgt	15d1c <__assert_fail@plt+0x4718>
   15d70:	b	15d7c <__assert_fail@plt+0x4778>
   15d74:	bl	11568 <__overflow@plt>
   15d78:	b	15d60 <__assert_fail@plt+0x475c>
   15d7c:	cmp	r0, r6
   15d80:	bge	15dd0 <__assert_fail@plt+0x47cc>
   15d84:	movw	r5, #4564	; 0x11d4
   15d88:	sub	r4, r6, r0
   15d8c:	mov	r7, #32
   15d90:	movt	r5, #3
   15d94:	ldr	r0, [r5]
   15d98:	ldr	r1, [r0, #20]
   15d9c:	ldr	r2, [r0, #24]
   15da0:	cmp	r1, r2
   15da4:	bcs	15dc0 <__assert_fail@plt+0x47bc>
   15da8:	add	r2, r1, #1
   15dac:	str	r2, [r0, #20]
   15db0:	strb	r7, [r1]
   15db4:	subs	r4, r4, #1
   15db8:	bne	15d94 <__assert_fail@plt+0x4790>
   15dbc:	b	15dd0 <__assert_fail@plt+0x47cc>
   15dc0:	mov	r1, #32
   15dc4:	bl	11568 <__overflow@plt>
   15dc8:	subs	r4, r4, #1
   15dcc:	bne	15d94 <__assert_fail@plt+0x4790>
   15dd0:	mov	r0, #0
   15dd4:	str	r6, [r8]
   15dd8:	str	r0, [r9]
   15ddc:	sub	sp, fp, #28
   15de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15de4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15de8:	add	fp, sp, #24
   15dec:	sub	sp, sp, #8
   15df0:	mov	r6, r0
   15df4:	movw	r0, #4408	; 0x1138
   15df8:	movw	r2, #4668	; 0x123c
   15dfc:	movw	r8, #4752	; 0x1290
   15e00:	movt	r0, #3
   15e04:	movt	r2, #3
   15e08:	movt	r8, #3
   15e0c:	ldrb	r1, [r0]
   15e10:	movw	r0, #4412	; 0x113c
   15e14:	ldr	r5, [r2]
   15e18:	movt	r0, #3
   15e1c:	ldr	r0, [r0]
   15e20:	cmp	r1, r6
   15e24:	movne	r0, #8
   15e28:	cmp	r6, #9
   15e2c:	cmpne	r1, r6
   15e30:	bne	15e7c <__assert_fail@plt+0x4878>
   15e34:	ldr	r7, [r8]
   15e38:	sdiv	r1, r7, r0
   15e3c:	mul	r1, r1, r0
   15e40:	sub	r1, r1, r7
   15e44:	add	r4, r0, r1
   15e48:	movw	r0, #4596	; 0x11f4
   15e4c:	movt	r0, #3
   15e50:	ldrb	r0, [r0]
   15e54:	cmp	r0, #1
   15e58:	bne	15eec <__assert_fail@plt+0x48e8>
   15e5c:	cmp	r4, #0
   15e60:	beq	15f80 <__assert_fail@plt+0x497c>
   15e64:	mov	r0, r5
   15e68:	mov	r1, #32
   15e6c:	mov	r2, r4
   15e70:	bl	11508 <memset@plt>
   15e74:	mov	r0, r4
   15e78:	b	15ef4 <__assert_fail@plt+0x48f0>
   15e7c:	bl	11490 <__ctype_b_loc@plt>
   15e80:	ldr	r0, [r0]
   15e84:	add	r0, r0, r6, lsl #1
   15e88:	ldrb	r0, [r0, #1]
   15e8c:	tst	r0, #64	; 0x40
   15e90:	bne	15f10 <__assert_fail@plt+0x490c>
   15e94:	movw	r0, #4626	; 0x1212
   15e98:	movt	r0, #3
   15e9c:	ldrb	r0, [r0]
   15ea0:	cmp	r0, #1
   15ea4:	bne	15f48 <__assert_fail@plt+0x4944>
   15ea8:	movw	r3, #1189	; 0x4a5
   15eac:	mov	r0, #92	; 0x5c
   15eb0:	mov	r1, #1
   15eb4:	mov	r2, #4
   15eb8:	mov	r4, #4
   15ebc:	movt	r3, #2
   15ec0:	strb	r0, [r5]
   15ec4:	add	r0, sp, #4
   15ec8:	str	r6, [sp]
   15ecc:	bl	114f0 <__sprintf_chk@plt>
   15ed0:	ldrb	r0, [sp, #4]
   15ed4:	strb	r0, [r5, #1]
   15ed8:	ldrb	r0, [sp, #5]
   15edc:	strb	r0, [r5, #2]
   15ee0:	ldrb	r0, [sp, #6]
   15ee4:	strb	r0, [r5, #3]
   15ee8:	b	15f18 <__assert_fail@plt+0x4914>
   15eec:	strb	r6, [r5]
   15ef0:	mov	r0, #1
   15ef4:	mov	r1, #0
   15ef8:	cmn	r4, #1
   15efc:	bgt	15f28 <__assert_fail@plt+0x4924>
   15f00:	cmp	r7, #0
   15f04:	bne	15f28 <__assert_fail@plt+0x4924>
   15f08:	mov	r0, #0
   15f0c:	b	15f3c <__assert_fail@plt+0x4938>
   15f10:	mov	r4, #1
   15f14:	strb	r6, [r5]
   15f18:	ldr	r7, [r8]
   15f1c:	mov	r0, r4
   15f20:	add	r1, r7, r4
   15f24:	b	15f3c <__assert_fail@plt+0x4938>
   15f28:	rsb	r2, r4, #0
   15f2c:	cmp	r7, r2
   15f30:	bgt	15f20 <__assert_fail@plt+0x491c>
   15f34:	cmp	r4, #0
   15f38:	addpl	r1, r7, r4
   15f3c:	str	r1, [r8]
   15f40:	sub	sp, fp, #24
   15f44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f48:	movw	r0, #4587	; 0x11eb
   15f4c:	movt	r0, #3
   15f50:	ldrb	r0, [r0]
   15f54:	cmp	r0, #1
   15f58:	bne	15f8c <__assert_fail@plt+0x4988>
   15f5c:	sxtb	r0, r6
   15f60:	cmp	r0, #0
   15f64:	bmi	15ea8 <__assert_fail@plt+0x48a4>
   15f68:	mov	r0, #94	; 0x5e
   15f6c:	mov	r4, #2
   15f70:	strb	r0, [r5]
   15f74:	eor	r0, r6, #64	; 0x40
   15f78:	strb	r0, [r5, #1]
   15f7c:	b	15f18 <__assert_fail@plt+0x4914>
   15f80:	mov	r4, #0
   15f84:	mov	r0, #0
   15f88:	b	15f20 <__assert_fail@plt+0x491c>
   15f8c:	strb	r6, [r5]
   15f90:	cmp	r6, #8
   15f94:	mov	r4, #0
   15f98:	mov	r0, #1
   15f9c:	ldr	r7, [r8]
   15fa0:	mvneq	r4, #0
   15fa4:	b	15ef4 <__assert_fail@plt+0x48f0>
   15fa8:	push	{r4, r5, r6, r7, fp, lr}
   15fac:	add	fp, sp, #16
   15fb0:	sub	sp, sp, #8
   15fb4:	movw	r5, #4432	; 0x1150
   15fb8:	movw	r6, #4664	; 0x1238
   15fbc:	movw	r7, #4648	; 0x1228
   15fc0:	mov	r4, r0
   15fc4:	movw	r3, #1194	; 0x4aa
   15fc8:	movt	r5, #3
   15fcc:	movt	r6, #3
   15fd0:	movt	r7, #3
   15fd4:	movt	r3, #2
   15fd8:	ldr	r1, [r5]
   15fdc:	ldr	r0, [r6]
   15fe0:	ldr	r2, [r7]
   15fe4:	stm	sp, {r1, r2}
   15fe8:	mov	r1, #1
   15fec:	mvn	r2, #0
   15ff0:	bl	114f0 <__sprintf_chk@plt>
   15ff4:	ldr	r1, [r7]
   15ff8:	add	r1, r1, #1
   15ffc:	str	r1, [r7]
   16000:	ldr	r7, [r5]
   16004:	cmp	r7, #1
   16008:	blt	1602c <__assert_fail@plt+0x4a28>
   1600c:	ldr	r1, [r6]
   16010:	add	r6, r1, r0
   16014:	ldrb	r0, [r6, -r7]
   16018:	ldr	r1, [r4, #16]
   1601c:	blx	r1
   16020:	sub	r7, r7, #1
   16024:	cmp	r7, #0
   16028:	bgt	16014 <__assert_fail@plt+0x4a10>
   1602c:	movw	r0, #4456	; 0x1168
   16030:	movt	r0, #3
   16034:	ldr	r0, [r0]
   16038:	cmp	r0, #2
   1603c:	blt	1608c <__assert_fail@plt+0x4a88>
   16040:	movw	r0, #4428	; 0x114c
   16044:	movt	r0, #3
   16048:	ldrb	r0, [r0]
   1604c:	cmp	r0, #9
   16050:	bne	160e0 <__assert_fail@plt+0x4adc>
   16054:	movw	r1, #4656	; 0x1230
   16058:	ldr	r0, [r5]
   1605c:	movt	r1, #3
   16060:	ldr	r1, [r1]
   16064:	sub	r5, r1, r0
   16068:	cmp	r5, #1
   1606c:	blt	160e8 <__assert_fail@plt+0x4ae4>
   16070:	ldr	r1, [r4, #16]
   16074:	mov	r0, #32
   16078:	blx	r1
   1607c:	sub	r5, r5, #1
   16080:	cmp	r5, #0
   16084:	bgt	16070 <__assert_fail@plt+0x4a6c>
   16088:	b	160e8 <__assert_fail@plt+0x4ae4>
   1608c:	movw	r5, #4428	; 0x114c
   16090:	ldr	r1, [r4, #16]
   16094:	movt	r5, #3
   16098:	ldrb	r0, [r5]
   1609c:	blx	r1
   160a0:	ldrb	r0, [r5]
   160a4:	cmp	r0, #9
   160a8:	bne	160e8 <__assert_fail@plt+0x4ae4>
   160ac:	movw	r0, #4744	; 0x1288
   160b0:	movw	r2, #4420	; 0x1144
   160b4:	movt	r2, #3
   160b8:	movt	r0, #3
   160bc:	ldr	r1, [r0]
   160c0:	ldr	r2, [r2]
   160c4:	sdiv	r7, r1, r2
   160c8:	add	r3, r2, r1
   160cc:	mul	r2, r7, r2
   160d0:	sub	r1, r2, r1
   160d4:	add	r1, r3, r1
   160d8:	str	r1, [r0]
   160dc:	b	160e8 <__assert_fail@plt+0x4ae4>
   160e0:	ldr	r1, [r4, #16]
   160e4:	blx	r1
   160e8:	movw	r0, #4627	; 0x1213
   160ec:	movt	r0, #3
   160f0:	ldrb	r0, [r0]
   160f4:	cmp	r0, #1
   160f8:	bne	16130 <__assert_fail@plt+0x4b2c>
   160fc:	movw	r0, #4606	; 0x11fe
   16100:	movt	r0, #3
   16104:	ldrb	r0, [r0]
   16108:	cmp	r0, #0
   1610c:	bne	16130 <__assert_fail@plt+0x4b2c>
   16110:	movw	r0, #4656	; 0x1230
   16114:	movw	r1, #4752	; 0x1290
   16118:	movt	r0, #3
   1611c:	movt	r1, #3
   16120:	ldr	r0, [r0]
   16124:	ldr	r2, [r1]
   16128:	add	r0, r2, r0
   1612c:	str	r0, [r1]
   16130:	sub	sp, fp, #16
   16134:	pop	{r4, r5, r6, r7, fp, pc}
   16138:	push	{r4, r5, fp, lr}
   1613c:	add	fp, sp, #8
   16140:	ldr	r5, [r0]
   16144:	mov	r4, r0
   16148:	ldmib	r5, {r0, r1}
   1614c:	cmp	r0, r1
   16150:	bcs	1617c <__assert_fail@plt+0x4b78>
   16154:	add	r1, r0, #1
   16158:	str	r1, [r5, #4]
   1615c:	ldrb	r0, [r0]
   16160:	cmn	r0, #1
   16164:	beq	1618c <__assert_fail@plt+0x4b88>
   16168:	cmp	r0, #10
   1616c:	beq	1629c <__assert_fail@plt+0x4c98>
   16170:	cmp	r0, #12
   16174:	bne	16148 <__assert_fail@plt+0x4b44>
   16178:	b	16198 <__assert_fail@plt+0x4b94>
   1617c:	mov	r0, r5
   16180:	bl	1155c <__uflow@plt>
   16184:	cmn	r0, #1
   16188:	bne	16168 <__assert_fail@plt+0x4b64>
   1618c:	mov	r0, r4
   16190:	pop	{r4, r5, fp, lr}
   16194:	b	14d44 <__assert_fail@plt+0x3740>
   16198:	ldmib	r5, {r0, r1}
   1619c:	cmp	r0, r1
   161a0:	bcs	162a0 <__assert_fail@plt+0x4c9c>
   161a4:	add	r1, r0, #1
   161a8:	str	r1, [r5, #4]
   161ac:	ldrb	r0, [r0]
   161b0:	cmp	r0, #10
   161b4:	beq	161c0 <__assert_fail@plt+0x4bbc>
   161b8:	mov	r1, r5
   161bc:	bl	114d8 <ungetc@plt>
   161c0:	movw	r0, #4625	; 0x1211
   161c4:	movt	r0, #3
   161c8:	ldrb	r0, [r0]
   161cc:	cmp	r0, #1
   161d0:	movweq	r0, #4757	; 0x1295
   161d4:	moveq	r1, #1
   161d8:	movteq	r0, #3
   161dc:	strbeq	r1, [r0]
   161e0:	movw	r0, #4606	; 0x11fe
   161e4:	movt	r0, #3
   161e8:	ldrb	r0, [r0]
   161ec:	cmp	r0, #0
   161f0:	beq	16200 <__assert_fail@plt+0x4bfc>
   161f4:	mov	r0, #2
   161f8:	str	r0, [r4, #8]
   161fc:	b	16280 <__assert_fail@plt+0x4c7c>
   16200:	movw	r0, #4456	; 0x1168
   16204:	movt	r0, #3
   16208:	ldr	r0, [r0]
   1620c:	cmp	r0, #0
   16210:	beq	16280 <__assert_fail@plt+0x4c7c>
   16214:	movw	r1, #4585	; 0x11e9
   16218:	sub	r3, r0, #1
   1621c:	movt	r1, #3
   16220:	ldrb	r2, [r1]
   16224:	mov	r1, #1
   16228:	cmp	r2, #0
   1622c:	movw	r2, #4676	; 0x1244
   16230:	movt	r2, #3
   16234:	movwne	r1, #2
   16238:	ands	r5, r0, #3
   1623c:	ldr	r2, [r2]
   16240:	beq	16258 <__assert_fail@plt+0x4c54>
   16244:	str	r1, [r2, #8]
   16248:	subs	r5, r5, #1
   1624c:	sub	r0, r0, #1
   16250:	add	r2, r2, #40	; 0x28
   16254:	bne	16244 <__assert_fail@plt+0x4c40>
   16258:	cmp	r3, #3
   1625c:	bcc	16280 <__assert_fail@plt+0x4c7c>
   16260:	add	r2, r2, #128	; 0x80
   16264:	str	r1, [r2]
   16268:	str	r1, [r2, #-40]	; 0xffffffd8
   1626c:	str	r1, [r2, #-80]	; 0xffffffb0
   16270:	str	r1, [r2, #-120]	; 0xffffff88
   16274:	add	r2, r2, #160	; 0xa0
   16278:	subs	r0, r0, #4
   1627c:	bne	16264 <__assert_fail@plt+0x4c60>
   16280:	mov	r0, #0
   16284:	str	r0, [r4, #28]
   16288:	movw	r0, #4680	; 0x1248
   1628c:	movt	r0, #3
   16290:	ldr	r1, [r0]
   16294:	sub	r1, r1, #1
   16298:	str	r1, [r0]
   1629c:	pop	{r4, r5, fp, pc}
   162a0:	mov	r0, r5
   162a4:	bl	1155c <__uflow@plt>
   162a8:	cmp	r0, #10
   162ac:	bne	161b8 <__assert_fail@plt+0x4bb4>
   162b0:	b	161c0 <__assert_fail@plt+0x4bbc>
   162b4:	movw	r1, #4760	; 0x1298
   162b8:	movt	r1, #3
   162bc:	str	r0, [r1]
   162c0:	bx	lr
   162c4:	movw	r1, #4764	; 0x129c
   162c8:	movt	r1, #3
   162cc:	strb	r0, [r1]
   162d0:	bx	lr
   162d4:	push	{r4, r5, r6, sl, fp, lr}
   162d8:	add	fp, sp, #16
   162dc:	sub	sp, sp, #8
   162e0:	movw	r0, #4564	; 0x11d4
   162e4:	movt	r0, #3
   162e8:	ldr	r0, [r0]
   162ec:	bl	1eb60 <__assert_fail@plt+0xd55c>
   162f0:	cmp	r0, #0
   162f4:	beq	1631c <__assert_fail@plt+0x4d18>
   162f8:	movw	r0, #4764	; 0x129c
   162fc:	movt	r0, #3
   16300:	ldrb	r0, [r0]
   16304:	cmp	r0, #0
   16308:	beq	1633c <__assert_fail@plt+0x4d38>
   1630c:	bl	114e4 <__errno_location@plt>
   16310:	ldr	r0, [r0]
   16314:	cmp	r0, #32
   16318:	bne	1633c <__assert_fail@plt+0x4d38>
   1631c:	movw	r0, #4552	; 0x11c8
   16320:	movt	r0, #3
   16324:	ldr	r0, [r0]
   16328:	bl	1eb60 <__assert_fail@plt+0xd55c>
   1632c:	cmp	r0, #0
   16330:	subeq	sp, fp, #16
   16334:	popeq	{r4, r5, r6, sl, fp, pc}
   16338:	b	163ac <__assert_fail@plt+0x4da8>
   1633c:	movw	r1, #2199	; 0x897
   16340:	mov	r0, #0
   16344:	mov	r2, #5
   16348:	movt	r1, #2
   1634c:	bl	1137c <dcgettext@plt>
   16350:	mov	r4, r0
   16354:	movw	r0, #4760	; 0x1298
   16358:	movt	r0, #3
   1635c:	ldr	r6, [r0]
   16360:	bl	114e4 <__errno_location@plt>
   16364:	ldr	r5, [r0]
   16368:	cmp	r6, #0
   1636c:	bne	16388 <__assert_fail@plt+0x4d84>
   16370:	movw	r2, #2215	; 0x8a7
   16374:	mov	r0, #0
   16378:	mov	r1, r5
   1637c:	mov	r3, r4
   16380:	movt	r2, #2
   16384:	b	163a8 <__assert_fail@plt+0x4da4>
   16388:	mov	r0, r6
   1638c:	bl	1a034 <__assert_fail@plt+0x8a30>
   16390:	movw	r2, #2211	; 0x8a3
   16394:	mov	r3, r0
   16398:	str	r4, [sp]
   1639c:	mov	r0, #0
   163a0:	mov	r1, r5
   163a4:	movt	r2, #2
   163a8:	bl	11418 <error@plt>
   163ac:	movw	r0, #4468	; 0x1174
   163b0:	movt	r0, #3
   163b4:	ldr	r0, [r0]
   163b8:	bl	1134c <_exit@plt>
   163bc:	b	11304 <posix_fadvise64@plt>
   163c0:	cmp	r0, #0
   163c4:	bxeq	lr
   163c8:	push	{r4, sl, fp, lr}
   163cc:	add	fp, sp, #8
   163d0:	sub	sp, sp, #16
   163d4:	mov	r4, r1
   163d8:	bl	11520 <fileno@plt>
   163dc:	mov	r1, #0
   163e0:	mov	r2, #0
   163e4:	mov	r3, #0
   163e8:	str	r1, [sp]
   163ec:	stmib	sp, {r1, r4}
   163f0:	bl	11304 <posix_fadvise64@plt>
   163f4:	sub	sp, fp, #8
   163f8:	pop	{r4, sl, fp, pc}
   163fc:	push	{r4, r5, r6, sl, fp, lr}
   16400:	add	fp, sp, #16
   16404:	sub	sp, sp, #8
   16408:	mov	r4, r0
   1640c:	bl	11520 <fileno@plt>
   16410:	cmn	r0, #1
   16414:	ble	16488 <__assert_fail@plt+0x4e84>
   16418:	mov	r0, r4
   1641c:	bl	11454 <__freading@plt>
   16420:	cmp	r0, #0
   16424:	beq	16450 <__assert_fail@plt+0x4e4c>
   16428:	mov	r0, r4
   1642c:	bl	11520 <fileno@plt>
   16430:	mov	r1, #1
   16434:	mov	r2, #0
   16438:	mov	r3, #0
   1643c:	str	r1, [sp]
   16440:	bl	113e8 <lseek64@plt>
   16444:	and	r0, r0, r1
   16448:	cmn	r0, #1
   1644c:	beq	16488 <__assert_fail@plt+0x4e84>
   16450:	mov	r0, r4
   16454:	bl	16498 <__assert_fail@plt+0x4e94>
   16458:	cmp	r0, #0
   1645c:	beq	16488 <__assert_fail@plt+0x4e84>
   16460:	bl	114e4 <__errno_location@plt>
   16464:	ldr	r6, [r0]
   16468:	mov	r5, r0
   1646c:	mov	r0, r4
   16470:	bl	11538 <fclose@plt>
   16474:	cmp	r6, #0
   16478:	strne	r6, [r5]
   1647c:	mvnne	r0, #0
   16480:	sub	sp, fp, #16
   16484:	pop	{r4, r5, r6, sl, fp, pc}
   16488:	mov	r0, r4
   1648c:	sub	sp, fp, #16
   16490:	pop	{r4, r5, r6, sl, fp, lr}
   16494:	b	11538 <fclose@plt>
   16498:	push	{r4, sl, fp, lr}
   1649c:	add	fp, sp, #8
   164a0:	sub	sp, sp, #8
   164a4:	mov	r4, r0
   164a8:	cmp	r0, #0
   164ac:	beq	164e4 <__assert_fail@plt+0x4ee0>
   164b0:	mov	r0, r4
   164b4:	bl	11454 <__freading@plt>
   164b8:	cmp	r0, #0
   164bc:	beq	164e4 <__assert_fail@plt+0x4ee0>
   164c0:	ldrb	r0, [r4, #1]
   164c4:	tst	r0, #1
   164c8:	beq	164e4 <__assert_fail@plt+0x4ee0>
   164cc:	mov	r0, #1
   164d0:	mov	r2, #0
   164d4:	mov	r3, #0
   164d8:	str	r0, [sp]
   164dc:	mov	r0, r4
   164e0:	bl	165cc <__assert_fail@plt+0x4fc8>
   164e4:	mov	r0, r4
   164e8:	sub	sp, fp, #8
   164ec:	pop	{r4, sl, fp, lr}
   164f0:	b	1131c <fflush@plt>
   164f4:	push	{r4, r5, r6, r7, fp, lr}
   164f8:	add	fp, sp, #16
   164fc:	mov	r5, r1
   16500:	bl	115bc <fopen64@plt>
   16504:	mov	r4, #0
   16508:	cmp	r0, #0
   1650c:	beq	16574 <__assert_fail@plt+0x4f70>
   16510:	mov	r6, r0
   16514:	bl	11520 <fileno@plt>
   16518:	cmp	r0, #2
   1651c:	bhi	1657c <__assert_fail@plt+0x4f78>
   16520:	bl	1abbc <__assert_fail@plt+0x95b8>
   16524:	cmn	r0, #1
   16528:	ble	16584 <__assert_fail@plt+0x4f80>
   1652c:	mov	r7, r0
   16530:	mov	r0, r6
   16534:	bl	163fc <__assert_fail@plt+0x4df8>
   16538:	cmp	r0, #0
   1653c:	bne	16558 <__assert_fail@plt+0x4f54>
   16540:	mov	r0, r7
   16544:	mov	r1, r5
   16548:	bl	112b0 <fdopen@plt>
   1654c:	mov	r4, r0
   16550:	cmp	r0, #0
   16554:	bne	16574 <__assert_fail@plt+0x4f70>
   16558:	bl	114e4 <__errno_location@plt>
   1655c:	ldr	r5, [r0]
   16560:	mov	r4, r0
   16564:	mov	r0, r7
   16568:	bl	115f8 <close@plt>
   1656c:	str	r5, [r4]
   16570:	mov	r4, #0
   16574:	mov	r0, r4
   16578:	pop	{r4, r5, r6, r7, fp, pc}
   1657c:	mov	r0, r6
   16580:	pop	{r4, r5, r6, r7, fp, pc}
   16584:	bl	114e4 <__errno_location@plt>
   16588:	ldr	r7, [r0]
   1658c:	mov	r5, r0
   16590:	mov	r0, r6
   16594:	bl	163fc <__assert_fail@plt+0x4df8>
   16598:	mov	r0, r4
   1659c:	str	r7, [r5]
   165a0:	pop	{r4, r5, r6, r7, fp, pc}
   165a4:	push	{r4, r5, r6, sl, fp, lr}
   165a8:	add	fp, sp, #16
   165ac:	mov	r4, r0
   165b0:	bl	114e4 <__errno_location@plt>
   165b4:	ldr	r6, [r0]
   165b8:	mov	r5, r0
   165bc:	mov	r0, r4
   165c0:	bl	11334 <free@plt>
   165c4:	str	r6, [r5]
   165c8:	pop	{r4, r5, r6, sl, fp, pc}
   165cc:	push	{r4, r5, r6, r7, fp, lr}
   165d0:	add	fp, sp, #16
   165d4:	sub	sp, sp, #8
   165d8:	mov	r4, r0
   165dc:	ldr	r0, [r0, #4]
   165e0:	mov	r5, r3
   165e4:	mov	r6, r2
   165e8:	ldr	r1, [r4, #8]
   165ec:	cmp	r1, r0
   165f0:	bne	1660c <__assert_fail@plt+0x5008>
   165f4:	ldrd	r0, [r4, #16]
   165f8:	cmp	r1, r0
   165fc:	bne	1660c <__assert_fail@plt+0x5008>
   16600:	ldr	r0, [r4, #36]	; 0x24
   16604:	cmp	r0, #0
   16608:	beq	16624 <__assert_fail@plt+0x5020>
   1660c:	mov	r0, r4
   16610:	mov	r2, r6
   16614:	mov	r3, r5
   16618:	sub	sp, fp, #16
   1661c:	pop	{r4, r5, r6, r7, fp, lr}
   16620:	b	11544 <fseeko64@plt>
   16624:	ldr	r7, [fp, #8]
   16628:	mov	r0, r4
   1662c:	bl	11520 <fileno@plt>
   16630:	mov	r2, r6
   16634:	mov	r3, r5
   16638:	str	r7, [sp]
   1663c:	bl	113e8 <lseek64@plt>
   16640:	and	r2, r0, r1
   16644:	cmn	r2, #1
   16648:	beq	16668 <__assert_fail@plt+0x5064>
   1664c:	strd	r0, [r4, #80]	; 0x50
   16650:	ldr	r0, [r4]
   16654:	bic	r0, r0, #16
   16658:	str	r0, [r4]
   1665c:	mov	r0, #0
   16660:	sub	sp, fp, #16
   16664:	pop	{r4, r5, r6, r7, fp, pc}
   16668:	mvn	r0, #0
   1666c:	sub	sp, fp, #16
   16670:	pop	{r4, r5, r6, r7, fp, pc}
   16674:	mov	r1, r0
   16678:	mov	r0, #0
   1667c:	b	11340 <clock_gettime@plt>
   16680:	push	{fp, lr}
   16684:	mov	fp, sp
   16688:	mov	r1, r0
   1668c:	mov	r0, #0
   16690:	bl	11340 <clock_gettime@plt>
   16694:	pop	{fp, pc}
   16698:	push	{r4, sl, fp, lr}
   1669c:	add	fp, sp, #8
   166a0:	sub	sp, sp, #264	; 0x108
   166a4:	add	r1, sp, #7
   166a8:	movw	r2, #257	; 0x101
   166ac:	bl	1a508 <__assert_fail@plt+0x8f04>
   166b0:	mov	r4, #0
   166b4:	cmp	r0, #0
   166b8:	bne	166f8 <__assert_fail@plt+0x50f4>
   166bc:	movw	r1, #2218	; 0x8aa
   166c0:	add	r0, sp, #7
   166c4:	mov	r2, #2
   166c8:	movt	r1, #2
   166cc:	bl	114a8 <bcmp@plt>
   166d0:	cmp	r0, #0
   166d4:	beq	166f8 <__assert_fail@plt+0x50f4>
   166d8:	movw	r1, #2220	; 0x8ac
   166dc:	add	r0, sp, #7
   166e0:	mov	r2, #6
   166e4:	movt	r1, #2
   166e8:	bl	114a8 <bcmp@plt>
   166ec:	cmp	r0, #0
   166f0:	mov	r4, r0
   166f4:	movwne	r4, #1
   166f8:	mov	r0, r4
   166fc:	sub	sp, fp, #8
   16700:	pop	{r4, sl, fp, pc}
   16704:	push	{r4, r5, r6, sl, fp, lr}
   16708:	add	fp, sp, #16
   1670c:	mov	r5, r0
   16710:	mov	r0, #0
   16714:	mov	r4, r1
   16718:	add	r6, r2, #19
   1671c:	cmp	r1, #0
   16720:	strb	r0, [r2, #20]
   16724:	bmi	16774 <__assert_fail@plt+0x5170>
   16728:	mov	r0, r5
   1672c:	mov	r1, r4
   16730:	mov	r2, #10
   16734:	mov	r3, #0
   16738:	bl	1ee9c <__assert_fail@plt+0xd898>
   1673c:	add	r2, r0, r0, lsl #2
   16740:	sub	r2, r5, r2, lsl #1
   16744:	add	r2, r2, #48	; 0x30
   16748:	strb	r2, [r6], #-1
   1674c:	adds	r2, r5, #9
   16750:	mov	r5, r0
   16754:	adc	r3, r4, #0
   16758:	rsbs	r2, r2, #18
   1675c:	mov	r4, r1
   16760:	rscs	r2, r3, #0
   16764:	bcc	16728 <__assert_fail@plt+0x5124>
   16768:	add	r6, r6, #1
   1676c:	mov	r0, r6
   16770:	pop	{r4, r5, r6, sl, fp, pc}
   16774:	mov	r0, r5
   16778:	mov	r1, r4
   1677c:	mov	r2, #10
   16780:	mov	r3, #0
   16784:	bl	1ee9c <__assert_fail@plt+0xd898>
   16788:	add	r2, r0, r0, lsl #2
   1678c:	rsb	r2, r5, r2, lsl #1
   16790:	add	r2, r2, #48	; 0x30
   16794:	strb	r2, [r6], #-1
   16798:	adds	r2, r5, #9
   1679c:	mov	r5, r0
   167a0:	adc	r3, r4, #0
   167a4:	rsbs	r2, r2, #18
   167a8:	mov	r4, r1
   167ac:	rscs	r2, r3, #0
   167b0:	bcc	16774 <__assert_fail@plt+0x5170>
   167b4:	mov	r0, #45	; 0x2d
   167b8:	strb	r0, [r6]
   167bc:	mov	r0, r6
   167c0:	pop	{r4, r5, r6, sl, fp, pc}
   167c4:	push	{r4, r5, fp, lr}
   167c8:	add	fp, sp, #8
   167cc:	mov	r4, r1
   167d0:	mov	r5, r0
   167d4:	bl	114b4 <strlen@plt>
   167d8:	mov	r1, r0
   167dc:	mov	r0, r5
   167e0:	mov	r2, r4
   167e4:	pop	{r4, r5, fp, lr}
   167e8:	b	167ec <__assert_fail@plt+0x51e8>
   167ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167f0:	add	fp, sp, #28
   167f4:	sub	sp, sp, #20
   167f8:	mov	r5, r2
   167fc:	mov	r6, r1
   16800:	mov	r4, r0
   16804:	add	r7, r0, r1
   16808:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   1680c:	cmp	r0, #1
   16810:	bls	16ab8 <__assert_fail@plt+0x54b4>
   16814:	cmp	r6, #1
   16818:	blt	16b10 <__assert_fail@plt+0x550c>
   1681c:	and	r2, r5, #1
   16820:	and	sl, r5, #2
   16824:	mov	r3, #0
   16828:	add	r8, sp, #4
   1682c:	add	r9, sp, #8
   16830:	mov	r5, #0
   16834:	ldrb	r0, [r4]
   16838:	sub	r0, r0, #32
   1683c:	cmp	r0, #94	; 0x5e
   16840:	bhi	169dc <__assert_fail@plt+0x53d8>
   16844:	add	r1, pc, #0
   16848:	ldr	pc, [r1, r0, lsl #2]
   1684c:	andeq	r6, r1, r8, asr #19
   16850:	andeq	r6, r1, r8, asr #19
   16854:	andeq	r6, r1, r8, asr #19
   16858:	andeq	r6, r1, r8, asr #19
   1685c:	ldrdeq	r6, [r1], -ip
   16860:	andeq	r6, r1, r8, asr #19
   16864:	andeq	r6, r1, r8, asr #19
   16868:	andeq	r6, r1, r8, asr #19
   1686c:	andeq	r6, r1, r8, asr #19
   16870:	andeq	r6, r1, r8, asr #19
   16874:	andeq	r6, r1, r8, asr #19
   16878:	andeq	r6, r1, r8, asr #19
   1687c:	andeq	r6, r1, r8, asr #19
   16880:	andeq	r6, r1, r8, asr #19
   16884:	andeq	r6, r1, r8, asr #19
   16888:	andeq	r6, r1, r8, asr #19
   1688c:	andeq	r6, r1, r8, asr #19
   16890:	andeq	r6, r1, r8, asr #19
   16894:	andeq	r6, r1, r8, asr #19
   16898:	andeq	r6, r1, r8, asr #19
   1689c:	andeq	r6, r1, r8, asr #19
   168a0:	andeq	r6, r1, r8, asr #19
   168a4:	andeq	r6, r1, r8, asr #19
   168a8:	andeq	r6, r1, r8, asr #19
   168ac:	andeq	r6, r1, r8, asr #19
   168b0:	andeq	r6, r1, r8, asr #19
   168b4:	andeq	r6, r1, r8, asr #19
   168b8:	andeq	r6, r1, r8, asr #19
   168bc:	andeq	r6, r1, r8, asr #19
   168c0:	andeq	r6, r1, r8, asr #19
   168c4:	andeq	r6, r1, r8, asr #19
   168c8:	andeq	r6, r1, r8, asr #19
   168cc:	ldrdeq	r6, [r1], -ip
   168d0:	andeq	r6, r1, r8, asr #19
   168d4:	andeq	r6, r1, r8, asr #19
   168d8:	andeq	r6, r1, r8, asr #19
   168dc:	andeq	r6, r1, r8, asr #19
   168e0:	andeq	r6, r1, r8, asr #19
   168e4:	andeq	r6, r1, r8, asr #19
   168e8:	andeq	r6, r1, r8, asr #19
   168ec:	andeq	r6, r1, r8, asr #19
   168f0:	andeq	r6, r1, r8, asr #19
   168f4:	andeq	r6, r1, r8, asr #19
   168f8:	andeq	r6, r1, r8, asr #19
   168fc:	andeq	r6, r1, r8, asr #19
   16900:	andeq	r6, r1, r8, asr #19
   16904:	andeq	r6, r1, r8, asr #19
   16908:	andeq	r6, r1, r8, asr #19
   1690c:	andeq	r6, r1, r8, asr #19
   16910:	andeq	r6, r1, r8, asr #19
   16914:	andeq	r6, r1, r8, asr #19
   16918:	andeq	r6, r1, r8, asr #19
   1691c:	andeq	r6, r1, r8, asr #19
   16920:	andeq	r6, r1, r8, asr #19
   16924:	andeq	r6, r1, r8, asr #19
   16928:	andeq	r6, r1, r8, asr #19
   1692c:	andeq	r6, r1, r8, asr #19
   16930:	andeq	r6, r1, r8, asr #19
   16934:	andeq	r6, r1, r8, asr #19
   16938:	andeq	r6, r1, r8, asr #19
   1693c:	andeq	r6, r1, r8, asr #19
   16940:	andeq	r6, r1, r8, asr #19
   16944:	andeq	r6, r1, r8, asr #19
   16948:	andeq	r6, r1, r8, asr #19
   1694c:	ldrdeq	r6, [r1], -ip
   16950:	andeq	r6, r1, r8, asr #19
   16954:	andeq	r6, r1, r8, asr #19
   16958:	andeq	r6, r1, r8, asr #19
   1695c:	andeq	r6, r1, r8, asr #19
   16960:	andeq	r6, r1, r8, asr #19
   16964:	andeq	r6, r1, r8, asr #19
   16968:	andeq	r6, r1, r8, asr #19
   1696c:	andeq	r6, r1, r8, asr #19
   16970:	andeq	r6, r1, r8, asr #19
   16974:	andeq	r6, r1, r8, asr #19
   16978:	andeq	r6, r1, r8, asr #19
   1697c:	andeq	r6, r1, r8, asr #19
   16980:	andeq	r6, r1, r8, asr #19
   16984:	andeq	r6, r1, r8, asr #19
   16988:	andeq	r6, r1, r8, asr #19
   1698c:	andeq	r6, r1, r8, asr #19
   16990:	andeq	r6, r1, r8, asr #19
   16994:	andeq	r6, r1, r8, asr #19
   16998:	andeq	r6, r1, r8, asr #19
   1699c:	andeq	r6, r1, r8, asr #19
   169a0:	andeq	r6, r1, r8, asr #19
   169a4:	andeq	r6, r1, r8, asr #19
   169a8:	andeq	r6, r1, r8, asr #19
   169ac:	andeq	r6, r1, r8, asr #19
   169b0:	andeq	r6, r1, r8, asr #19
   169b4:	andeq	r6, r1, r8, asr #19
   169b8:	andeq	r6, r1, r8, asr #19
   169bc:	andeq	r6, r1, r8, asr #19
   169c0:	andeq	r6, r1, r8, asr #19
   169c4:	andeq	r6, r1, r8, asr #19
   169c8:	add	r5, r5, #1
   169cc:	add	r4, r4, #1
   169d0:	cmp	r4, r7
   169d4:	bcc	16834 <__assert_fail@plt+0x5230>
   169d8:	b	16b24 <__assert_fail@plt+0x5520>
   169dc:	str	r2, [sp]
   169e0:	str	r3, [sp, #12]
   169e4:	str	r3, [sp, #8]
   169e8:	b	16a14 <__assert_fail@plt+0x5410>
   169ec:	mvn	r1, #-2147483648	; 0x80000000
   169f0:	sub	r1, r1, r5
   169f4:	cmp	r0, r1
   169f8:	bgt	16b18 <__assert_fail@plt+0x5514>
   169fc:	add	r5, r0, r5
   16a00:	mov	r0, r9
   16a04:	add	r4, r4, r6
   16a08:	bl	11370 <mbsinit@plt>
   16a0c:	cmp	r0, #0
   16a10:	bne	16aac <__assert_fail@plt+0x54a8>
   16a14:	sub	r2, r7, r4
   16a18:	mov	r0, r8
   16a1c:	mov	r1, r4
   16a20:	mov	r3, r9
   16a24:	bl	1edfc <__assert_fail@plt+0xd7f8>
   16a28:	cmp	r0, #0
   16a2c:	beq	16a48 <__assert_fail@plt+0x5444>
   16a30:	mov	r6, r0
   16a34:	cmn	r0, #2
   16a38:	beq	16a84 <__assert_fail@plt+0x5480>
   16a3c:	cmn	r6, #1
   16a40:	bne	16a4c <__assert_fail@plt+0x5448>
   16a44:	b	16a98 <__assert_fail@plt+0x5494>
   16a48:	mov	r6, #1
   16a4c:	ldr	r0, [sp, #4]
   16a50:	bl	11328 <wcwidth@plt>
   16a54:	cmp	r0, #0
   16a58:	bpl	169ec <__assert_fail@plt+0x53e8>
   16a5c:	cmp	sl, #0
   16a60:	bne	16b20 <__assert_fail@plt+0x551c>
   16a64:	ldr	r0, [sp, #4]
   16a68:	bl	113ac <iswcntrl@plt>
   16a6c:	cmp	r0, #0
   16a70:	bne	16a00 <__assert_fail@plt+0x53fc>
   16a74:	cmn	r5, #-2147483647	; 0x80000001
   16a78:	beq	16b18 <__assert_fail@plt+0x5514>
   16a7c:	add	r5, r5, #1
   16a80:	b	16a00 <__assert_fail@plt+0x53fc>
   16a84:	ldr	r0, [sp]
   16a88:	mov	r4, r7
   16a8c:	cmp	r0, #0
   16a90:	beq	16aa8 <__assert_fail@plt+0x54a4>
   16a94:	b	16b20 <__assert_fail@plt+0x551c>
   16a98:	ldr	r0, [sp]
   16a9c:	cmp	r0, #0
   16aa0:	bne	16b20 <__assert_fail@plt+0x551c>
   16aa4:	add	r4, r4, #1
   16aa8:	add	r5, r5, #1
   16aac:	ldr	r2, [sp]
   16ab0:	mov	r3, #0
   16ab4:	b	169d0 <__assert_fail@plt+0x53cc>
   16ab8:	cmp	r6, #1
   16abc:	blt	16b10 <__assert_fail@plt+0x550c>
   16ac0:	and	r6, r5, #2
   16ac4:	bl	11490 <__ctype_b_loc@plt>
   16ac8:	ldr	r0, [r0]
   16acc:	mov	r5, #0
   16ad0:	b	16adc <__assert_fail@plt+0x54d8>
   16ad4:	cmp	r4, r7
   16ad8:	bcs	16b24 <__assert_fail@plt+0x5520>
   16adc:	ldrb	r1, [r4], #1
   16ae0:	add	r1, r0, r1, lsl #1
   16ae4:	ldrh	r1, [r1]
   16ae8:	tst	r1, #16384	; 0x4000
   16aec:	bne	16b00 <__assert_fail@plt+0x54fc>
   16af0:	cmp	r6, #0
   16af4:	bne	16b20 <__assert_fail@plt+0x551c>
   16af8:	tst	r1, #2
   16afc:	bne	16ad4 <__assert_fail@plt+0x54d0>
   16b00:	cmn	r5, #-2147483647	; 0x80000001
   16b04:	beq	16b18 <__assert_fail@plt+0x5514>
   16b08:	add	r5, r5, #1
   16b0c:	b	16ad4 <__assert_fail@plt+0x54d0>
   16b10:	mov	r5, #0
   16b14:	b	16b24 <__assert_fail@plt+0x5520>
   16b18:	mvn	r5, #-2147483648	; 0x80000000
   16b1c:	b	16b24 <__assert_fail@plt+0x5520>
   16b20:	mvn	r5, #0
   16b24:	mov	r0, r5
   16b28:	sub	sp, fp, #28
   16b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b30:	push	{fp, lr}
   16b34:	mov	fp, sp
   16b38:	sub	sp, sp, #24
   16b3c:	mvn	ip, #0
   16b40:	str	ip, [sp, #8]
   16b44:	mov	ip, #0
   16b48:	str	ip, [sp, #4]
   16b4c:	str	ip, [sp]
   16b50:	ldr	ip, [fp, #12]
   16b54:	str	ip, [sp, #16]
   16b58:	ldr	ip, [fp, #8]
   16b5c:	str	ip, [sp, #12]
   16b60:	bl	16b6c <__assert_fail@plt+0x5568>
   16b64:	mov	sp, fp
   16b68:	pop	{fp, pc}
   16b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b70:	add	fp, sp, #28
   16b74:	sub	sp, sp, #140	; 0x8c
   16b78:	sub	sp, sp, #1024	; 0x400
   16b7c:	mov	r4, r3
   16b80:	mov	r6, r2
   16b84:	str	r1, [sp, #104]	; 0x68
   16b88:	mov	r8, r0
   16b8c:	bl	114e4 <__errno_location@plt>
   16b90:	mov	r2, r4
   16b94:	ldrb	r3, [r6]
   16b98:	str	r0, [sp, #76]	; 0x4c
   16b9c:	ldr	r0, [r0]
   16ba0:	movw	r5, #1076	; 0x434
   16ba4:	ldr	r1, [r2, #8]!
   16ba8:	movt	r5, #2
   16bac:	str	r0, [sp, #72]	; 0x48
   16bb0:	cmp	r1, #0
   16bb4:	mov	r7, r1
   16bb8:	movweq	r7, #12
   16bbc:	cmp	r1, #12
   16bc0:	subgt	r7, r1, #12
   16bc4:	ldr	r1, [r2, #32]
   16bc8:	cmp	r1, #0
   16bcc:	movne	r5, r1
   16bd0:	cmp	r3, #0
   16bd4:	beq	1871c <__assert_fail@plt+0x7118>
   16bd8:	sub	r0, fp, #48	; 0x30
   16bdc:	mvn	r1, #13
   16be0:	str	r2, [sp, #60]	; 0x3c
   16be4:	str	r7, [sp, #56]	; 0x38
   16be8:	ldr	r7, [fp, #16]
   16bec:	movw	ip, #52428	; 0xcccc
   16bf0:	sub	r9, r5, #2
   16bf4:	str	r4, [sp, #88]	; 0x58
   16bf8:	mov	lr, #0
   16bfc:	str	r5, [sp, #64]	; 0x40
   16c00:	sub	r1, r1, r0
   16c04:	movt	ip, #3276	; 0xccc
   16c08:	str	r9, [sp, #32]
   16c0c:	str	r1, [sp, #44]	; 0x2c
   16c10:	add	r1, sp, #112	; 0x70
   16c14:	add	r1, r1, #1
   16c18:	str	r1, [sp, #48]	; 0x30
   16c1c:	sub	r1, fp, #53	; 0x35
   16c20:	add	r2, r1, #3
   16c24:	add	r1, r1, #2
   16c28:	str	r1, [sp, #84]	; 0x54
   16c2c:	add	r1, r4, #12
   16c30:	mov	r4, #-2147483648	; 0x80000000
   16c34:	str	r2, [sp, #68]	; 0x44
   16c38:	str	r1, [sp, #52]	; 0x34
   16c3c:	sub	r1, r0, #2
   16c40:	str	r1, [sp, #28]
   16c44:	add	r1, r0, #8
   16c48:	str	r1, [sp, #24]
   16c4c:	add	r1, r0, #13
   16c50:	add	r0, r0, #14
   16c54:	str	r0, [sp, #80]	; 0x50
   16c58:	mvn	r0, r0
   16c5c:	str	r1, [sp, #40]	; 0x28
   16c60:	str	r0, [sp, #36]	; 0x24
   16c64:	b	16c80 <__assert_fail@plt+0x567c>
   16c68:	mov	r8, #0
   16c6c:	add	lr, r5, lr
   16c70:	ldrb	r3, [r6, #1]!
   16c74:	mvn	r7, #0
   16c78:	cmp	r3, #0
   16c7c:	beq	18720 <__assert_fail@plt+0x711c>
   16c80:	uxtb	r1, r3
   16c84:	str	r8, [sp, #108]	; 0x6c
   16c88:	cmp	r1, #37	; 0x25
   16c8c:	bne	16d34 <__assert_fail@plt+0x5730>
   16c90:	mov	r0, #0
   16c94:	mov	r9, #0
   16c98:	mov	sl, r6
   16c9c:	str	r0, [sp, #100]	; 0x64
   16ca0:	ldr	r0, [fp, #8]
   16ca4:	mov	r5, r0
   16ca8:	add	r1, sl, #2
   16cac:	add	sl, sl, #1
   16cb0:	b	16cc8 <__assert_fail@plt+0x56c4>
   16cb4:	cmp	r0, #95	; 0x5f
   16cb8:	bne	16d24 <__assert_fail@plt+0x5720>
   16cbc:	add	r1, r1, #1
   16cc0:	add	sl, sl, #1
   16cc4:	mov	r9, r0
   16cc8:	ldrb	r0, [sl]
   16ccc:	sub	r2, r0, #35	; 0x23
   16cd0:	cmp	r2, #13
   16cd4:	bhi	16cb4 <__assert_fail@plt+0x56b0>
   16cd8:	add	r3, pc, #0
   16cdc:	ldr	pc, [r3, r2, lsl #2]
   16ce0:	andeq	r6, r1, r8, lsl sp
   16ce4:	andeq	r6, r1, r4, lsr #27
   16ce8:	andeq	r6, r1, r4, lsr #27
   16cec:	andeq	r6, r1, r4, lsr #27
   16cf0:	andeq	r6, r1, r4, lsr #27
   16cf4:	andeq	r6, r1, r4, lsr #27
   16cf8:	andeq	r6, r1, r4, lsr #27
   16cfc:	andeq	r6, r1, r4, lsr #27
   16d00:			; <UNDEFINED> instruction: 0x00016cbc
   16d04:	andeq	r6, r1, r4, lsr #27
   16d08:			; <UNDEFINED> instruction: 0x00016cbc
   16d0c:	andeq	r6, r1, r4, lsr #27
   16d10:	andeq	r6, r1, r4, lsr #27
   16d14:			; <UNDEFINED> instruction: 0x00016cbc
   16d18:	mov	r0, #1
   16d1c:	str	r0, [sp, #100]	; 0x64
   16d20:	b	16ca8 <__assert_fail@plt+0x56a4>
   16d24:	cmp	r0, #94	; 0x5e
   16d28:	bne	16da4 <__assert_fail@plt+0x57a0>
   16d2c:	mov	r5, #1
   16d30:	b	16ca8 <__assert_fail@plt+0x56a4>
   16d34:	ldr	r0, [sp, #104]	; 0x68
   16d38:	bic	r1, r7, r7, asr #31
   16d3c:	cmp	r1, #1
   16d40:	mov	r5, r1
   16d44:	movls	r5, #1
   16d48:	sub	r2, r0, lr
   16d4c:	cmp	r5, r2
   16d50:	bcs	18744 <__assert_fail@plt+0x7140>
   16d54:	ldr	r8, [sp, #108]	; 0x6c
   16d58:	cmp	r8, #0
   16d5c:	beq	16c68 <__assert_fail@plt+0x5664>
   16d60:	cmp	r1, #2
   16d64:	bcc	16d9c <__assert_fail@plt+0x5798>
   16d68:	sub	r4, r1, #1
   16d6c:	mov	r0, r8
   16d70:	mov	r1, #32
   16d74:	mov	r7, lr
   16d78:	mov	r2, r4
   16d7c:	bl	11508 <memset@plt>
   16d80:	ldr	r8, [sp, #108]	; 0x6c
   16d84:	ldrb	r3, [r6]
   16d88:	movw	ip, #52428	; 0xcccc
   16d8c:	mov	lr, r7
   16d90:	movt	ip, #3276	; 0xccc
   16d94:	add	r8, r8, r4
   16d98:	mov	r4, #-2147483648	; 0x80000000
   16d9c:	strb	r3, [r8], #1
   16da0:	b	16c6c <__assert_fail@plt+0x5668>
   16da4:	sub	r2, r0, #48	; 0x30
   16da8:	cmp	r2, #9
   16dac:	bhi	16e18 <__assert_fail@plt+0x5814>
   16db0:	mov	r7, #0
   16db4:	cmn	r7, #1
   16db8:	bgt	16df0 <__assert_fail@plt+0x57ec>
   16dbc:	b	16dfc <__assert_fail@plt+0x57f8>
   16dc0:	add	r2, r7, r7, lsl #2
   16dc4:	lsl	r3, r2, #1
   16dc8:	uxtab	r0, r3, r0
   16dcc:	sub	r7, r0, #48	; 0x30
   16dd0:	cmp	r7, r2, lsl #1
   16dd4:	mvnvs	r7, #-2147483648	; 0x80000000
   16dd8:	ldrb	r0, [r1], #1
   16ddc:	sub	r2, r0, #48	; 0x30
   16de0:	cmp	r2, #10
   16de4:	bcs	16e14 <__assert_fail@plt+0x5810>
   16de8:	cmn	r7, #1
   16dec:	ble	16dfc <__assert_fail@plt+0x57f8>
   16df0:	cmp	r7, ip
   16df4:	ble	16dc0 <__assert_fail@plt+0x57bc>
   16df8:	b	16e0c <__assert_fail@plt+0x5808>
   16dfc:	beq	16dc0 <__assert_fail@plt+0x57bc>
   16e00:	sdiv	r2, r4, r7
   16e04:	cmp	r2, #10
   16e08:	bge	16dc0 <__assert_fail@plt+0x57bc>
   16e0c:	mvn	r7, #-2147483648	; 0x80000000
   16e10:	b	16dd8 <__assert_fail@plt+0x57d4>
   16e14:	sub	sl, r1, #1
   16e18:	cmp	r0, #79	; 0x4f
   16e1c:	cmpne	r0, #69	; 0x45
   16e20:	bne	16e2c <__assert_fail@plt+0x5828>
   16e24:	ldrb	r1, [sl, #1]!
   16e28:	b	16e34 <__assert_fail@plt+0x5830>
   16e2c:	mov	r1, r0
   16e30:	mov	r0, #0
   16e34:	cmp	r1, #122	; 0x7a
   16e38:	str	r5, [sp, #96]	; 0x60
   16e3c:	bhi	17894 <__assert_fail@plt+0x6290>
   16e40:	movw	r8, #26215	; 0x6667
   16e44:	movw	r3, #62189	; 0xf2ed
   16e48:	add	r2, pc, #16
   16e4c:	mov	r5, #0
   16e50:	mvn	r4, #0
   16e54:	movt	r8, #26214	; 0x6666
   16e58:	movt	r3, #1
   16e5c:	ldr	pc, [r2, r1, lsl #2]
   16e60:	ldrdeq	r7, [r1], -r4
   16e64:	muleq	r1, r4, r8
   16e68:	muleq	r1, r4, r8
   16e6c:	muleq	r1, r4, r8
   16e70:	muleq	r1, r4, r8
   16e74:	muleq	r1, r4, r8
   16e78:	muleq	r1, r4, r8
   16e7c:	muleq	r1, r4, r8
   16e80:	muleq	r1, r4, r8
   16e84:	muleq	r1, r4, r8
   16e88:	muleq	r1, r4, r8
   16e8c:	muleq	r1, r4, r8
   16e90:	muleq	r1, r4, r8
   16e94:	muleq	r1, r4, r8
   16e98:	muleq	r1, r4, r8
   16e9c:	muleq	r1, r4, r8
   16ea0:	muleq	r1, r4, r8
   16ea4:	muleq	r1, r4, r8
   16ea8:	muleq	r1, r4, r8
   16eac:	muleq	r1, r4, r8
   16eb0:	muleq	r1, r4, r8
   16eb4:	muleq	r1, r4, r8
   16eb8:	muleq	r1, r4, r8
   16ebc:	muleq	r1, r4, r8
   16ec0:	muleq	r1, r4, r8
   16ec4:	muleq	r1, r4, r8
   16ec8:	muleq	r1, r4, r8
   16ecc:	muleq	r1, r4, r8
   16ed0:	muleq	r1, r4, r8
   16ed4:	muleq	r1, r4, r8
   16ed8:	muleq	r1, r4, r8
   16edc:	muleq	r1, r4, r8
   16ee0:	muleq	r1, r4, r8
   16ee4:	muleq	r1, r4, r8
   16ee8:	muleq	r1, r4, r8
   16eec:	muleq	r1, r4, r8
   16ef0:	muleq	r1, r4, r8
   16ef4:	andeq	r7, r1, r8, asr #3
   16ef8:	muleq	r1, r4, r8
   16efc:	muleq	r1, r4, r8
   16f00:	muleq	r1, r4, r8
   16f04:	muleq	r1, r4, r8
   16f08:	muleq	r1, r4, r8
   16f0c:	muleq	r1, r4, r8
   16f10:	muleq	r1, r4, r8
   16f14:	muleq	r1, r4, r8
   16f18:	muleq	r1, r4, r8
   16f1c:	muleq	r1, r4, r8
   16f20:	muleq	r1, r4, r8
   16f24:	muleq	r1, r4, r8
   16f28:	muleq	r1, r4, r8
   16f2c:	muleq	r1, r4, r8
   16f30:	muleq	r1, r4, r8
   16f34:	muleq	r1, r4, r8
   16f38:	muleq	r1, r4, r8
   16f3c:	muleq	r1, r4, r8
   16f40:	muleq	r1, r4, r8
   16f44:	muleq	r1, r4, r8
   16f48:	ldrdeq	r7, [r1], -ip
   16f4c:	muleq	r1, r4, r8
   16f50:	muleq	r1, r4, r8
   16f54:	muleq	r1, r4, r8
   16f58:	muleq	r1, r4, r8
   16f5c:	muleq	r1, r4, r8
   16f60:	muleq	r1, r4, r8
   16f64:	strdeq	r7, [r1], -r4
   16f68:	andeq	r7, r1, r8, lsl r2
   16f6c:	andeq	r7, r1, ip, lsr r2
   16f70:	andeq	r7, r1, r0, asr r2
   16f74:	muleq	r1, r4, r8
   16f78:	andeq	r7, r1, r4, ror #4
   16f7c:	andeq	r7, r1, ip, asr #32
   16f80:	muleq	r1, r0, r2
   16f84:	andeq	r7, r1, r4, lsr #5
   16f88:	muleq	r1, r4, r8
   16f8c:	muleq	r1, r4, r8
   16f90:	muleq	r1, r4, r8
   16f94:			; <UNDEFINED> instruction: 0x000172b4
   16f98:	andeq	r7, r1, r8, asr #5
   16f9c:	muleq	r1, r4, r8
   16fa0:	andeq	r7, r1, r4, lsr r3
   16fa4:	muleq	r1, r4, r8
   16fa8:	andeq	r7, r1, r4, ror r3
   16fac:	andeq	r7, r1, r8, asr r3
   16fb0:	andeq	r7, r1, ip, ror #6
   16fb4:	andeq	r7, r1, ip, lsl r4
   16fb8:	andeq	r7, r1, ip, asr #32
   16fbc:	andeq	r7, r1, r8, asr #8
   16fc0:	muleq	r1, r4, r4
   16fc4:	andeq	r7, r1, r8, lsr #9
   16fc8:	andeq	r7, r1, r4, ror #9
   16fcc:	muleq	r1, r4, r8
   16fd0:	muleq	r1, r4, r8
   16fd4:	muleq	r1, r4, r8
   16fd8:	muleq	r1, r4, r8
   16fdc:	muleq	r1, r4, r8
   16fe0:	muleq	r1, r4, r8
   16fe4:	andeq	r7, r1, r8, asr r5
   16fe8:	andeq	r7, r1, r8, lsr #3
   16fec:	andeq	r7, r1, ip, ror r5
   16ff0:	muleq	r1, r0, r5
   16ff4:	andeq	r7, r1, r4, lsr #11
   16ff8:	muleq	r1, r4, r8
   16ffc:	andeq	r7, r1, ip, asr #32
   17000:	andeq	r7, r1, r8, lsr #3
   17004:	muleq	r1, r4, r8
   17008:			; <UNDEFINED> instruction: 0x000175b4
   1700c:	ldrdeq	r7, [r1], -r0
   17010:	andeq	r7, r1, r4, ror #11
   17014:	strdeq	r7, [r1], -ip
   17018:	andeq	r7, r1, r8, lsr #12
   1701c:	muleq	r1, r4, r8
   17020:	andeq	r7, r1, r8, lsr r3
   17024:	andeq	r7, r1, r4, lsl #13
   17028:	andeq	r8, r1, r0, ror r0
   1702c:	andeq	r7, r1, ip, lsr #13
   17030:	andeq	r7, r1, r0, ror r7
   17034:	andeq	r7, r1, ip, asr #15
   17038:	muleq	r1, r4, r8
   1703c:	andeq	r7, r1, r0, lsl #16
   17040:	andeq	r7, r1, r8, lsl r8
   17044:	andeq	r7, r1, ip, lsr #16
   17048:	andeq	r7, r1, ip, asr #16
   1704c:	cmp	r0, #69	; 0x45
   17050:	beq	17894 <__assert_fail@plt+0x6290>
   17054:	ldr	r2, [sp, #88]	; 0x58
   17058:	movw	r3, #9363	; 0x2493
   1705c:	str	lr, [sp, #92]	; 0x5c
   17060:	movw	r6, #382	; 0x17e
   17064:	movt	r3, #37449	; 0x9249
   17068:	ldr	r8, [r2, #24]
   1706c:	ldr	r5, [r2, #28]
   17070:	ldr	lr, [r2, #20]
   17074:	sub	r2, r5, r8
   17078:	cmp	lr, #0
   1707c:	add	r2, r2, r6
   17080:	smmla	r4, r2, r3, r2
   17084:	asr	r6, r4, #2
   17088:	add	r4, r6, r4, lsr #31
   1708c:	rsb	r4, r4, r4, lsl #3
   17090:	sub	r2, r4, r2
   17094:	add	r2, r5, r2
   17098:	add	r4, r2, #3
   1709c:	mvn	r2, #99	; 0x63
   170a0:	movwmi	r2, #300	; 0x12c
   170a4:	add	r2, r2, lr
   170a8:	cmn	r4, #1
   170ac:	ble	17a2c <__assert_fail@plt+0x6428>
   170b0:	movw	r6, #365	; 0x16d
   170b4:	tst	r2, #3
   170b8:	bne	17104 <__assert_fail@plt+0x5b00>
   170bc:	movw	r6, #34079	; 0x851f
   170c0:	mov	ip, #100	; 0x64
   170c4:	movt	r6, #20971	; 0x51eb
   170c8:	smmul	r6, r2, r6
   170cc:	asr	r3, r6, #5
   170d0:	add	r3, r3, r6, lsr #31
   170d4:	mls	ip, r3, ip, r2
   170d8:	asr	r3, r6, #7
   170dc:	add	r3, r3, r6, lsr #31
   170e0:	mov	r6, #400	; 0x190
   170e4:	mls	r2, r3, r6, r2
   170e8:	movw	r6, #365	; 0x16d
   170ec:	cmp	r2, #0
   170f0:	movweq	r6, #366	; 0x16e
   170f4:	cmp	ip, #0
   170f8:	movw	ip, #52428	; 0xcccc
   170fc:	movt	ip, #3276	; 0xccc
   17100:	movwne	r6, #366	; 0x16e
   17104:	add	r2, r8, r6
   17108:	movw	r3, #382	; 0x17e
   1710c:	sub	r2, r5, r2
   17110:	movw	r5, #9363	; 0x2493
   17114:	movt	r5, #37449	; 0x9249
   17118:	add	r2, r2, r3
   1711c:	smmla	r2, r2, r5, r2
   17120:	asr	r3, r2, #2
   17124:	add	r2, r3, r2, lsr #31
   17128:	movw	r3, #379	; 0x17b
   1712c:	rsb	r2, r2, r2, lsl #3
   17130:	add	r2, r8, r2
   17134:	sub	r2, r2, r3
   17138:	cmn	r2, #1
   1713c:	movgt	r4, r2
   17140:	mvn	r2, r2
   17144:	lsr	r3, r2, #31
   17148:	cmp	r1, #71	; 0x47
   1714c:	beq	17ab8 <__assert_fail@plt+0x64b4>
   17150:	cmp	r1, #103	; 0x67
   17154:	bne	17afc <__assert_fail@plt+0x64f8>
   17158:	movw	r2, #34079	; 0x851f
   1715c:	movt	r2, #20971	; 0x51eb
   17160:	smmul	r6, lr, r2
   17164:	asr	r5, r6, #5
   17168:	add	r6, r5, r6, lsr #31
   1716c:	mov	r5, #100	; 0x64
   17170:	mls	r6, r6, r5, lr
   17174:	add	r6, r3, r6
   17178:	smmul	r2, r6, r2
   1717c:	asr	r4, r2, #5
   17180:	add	r2, r4, r2, lsr #31
   17184:	mls	r6, r2, r5, r6
   17188:	mov	r2, #2
   1718c:	str	r2, [sp, #100]	; 0x64
   17190:	mov	r2, #0
   17194:	cmn	r6, #1
   17198:	ble	183e4 <__assert_fail@plt+0x6de0>
   1719c:	ldr	lr, [sp, #92]	; 0x5c
   171a0:	mov	r3, r6
   171a4:	b	18430 <__assert_fail@plt+0x6e2c>
   171a8:	ldr	r2, [sp, #96]	; 0x60
   171ac:	ldr	r3, [sp, #100]	; 0x64
   171b0:	mov	r5, #0
   171b4:	cmp	r0, #69	; 0x45
   171b8:	orr	r2, r3, r2
   171bc:	str	r2, [sp, #96]	; 0x60
   171c0:	beq	17894 <__assert_fail@plt+0x6290>
   171c4:	b	18070 <__assert_fail@plt+0x6a6c>
   171c8:	sub	r0, sl, #1
   171cc:	cmp	r0, r6
   171d0:	beq	17f70 <__assert_fail@plt+0x696c>
   171d4:	sub	sl, sl, #1
   171d8:	b	17894 <__assert_fail@plt+0x6290>
   171dc:	mov	r5, #1
   171e0:	ldrb	r2, [sl, r5]
   171e4:	cmp	r2, #58	; 0x3a
   171e8:	bne	17840 <__assert_fail@plt+0x623c>
   171ec:	add	r5, r5, #1
   171f0:	b	171e0 <__assert_fail@plt+0x5bdc>
   171f4:	cmp	r0, #0
   171f8:	bne	17894 <__assert_fail@plt+0x6290>
   171fc:	ldr	r1, [sp, #96]	; 0x60
   17200:	ldr	r2, [sp, #100]	; 0x64
   17204:	mov	r5, #0
   17208:	orr	r1, r2, r1
   1720c:	str	r1, [sp, #96]	; 0x60
   17210:	mov	r1, #65	; 0x41
   17214:	b	18070 <__assert_fail@plt+0x6a6c>
   17218:	cmp	r0, #69	; 0x45
   1721c:	beq	17894 <__assert_fail@plt+0x6290>
   17220:	ldr	r1, [sp, #96]	; 0x60
   17224:	ldr	r2, [sp, #100]	; 0x64
   17228:	mov	r5, #0
   1722c:	orr	r1, r2, r1
   17230:	str	r1, [sp, #96]	; 0x60
   17234:	mov	r1, #66	; 0x42
   17238:	b	18070 <__assert_fail@plt+0x6a6c>
   1723c:	cmp	r0, #69	; 0x45
   17240:	bne	17dd4 <__assert_fail@plt+0x67d0>
   17244:	mov	r5, #0
   17248:	mov	r1, #67	; 0x43
   1724c:	b	18070 <__assert_fail@plt+0x6a6c>
   17250:	cmp	r0, #0
   17254:	bne	17894 <__assert_fail@plt+0x6290>
   17258:	movw	r3, #2226	; 0x8b2
   1725c:	movt	r3, #2
   17260:	b	17374 <__assert_fail@plt+0x5d70>
   17264:	cmp	r0, #0
   17268:	bne	17894 <__assert_fail@plt+0x6290>
   1726c:	movw	r3, #2235	; 0x8bb
   17270:	cmp	r9, #0
   17274:	movt	r3, #2
   17278:	bne	18404 <__assert_fail@plt+0x6e00>
   1727c:	cmp	r7, #0
   17280:	bpl	18404 <__assert_fail@plt+0x6e00>
   17284:	mov	r9, #43	; 0x2b
   17288:	mov	r4, #4
   1728c:	b	17374 <__assert_fail@plt+0x5d70>
   17290:	cmp	r0, #69	; 0x45
   17294:	beq	17894 <__assert_fail@plt+0x6290>
   17298:	ldr	r2, [sp, #60]	; 0x3c
   1729c:	ldr	r3, [r2]
   172a0:	b	17b10 <__assert_fail@plt+0x650c>
   172a4:	cmp	r0, #69	; 0x45
   172a8:	beq	17894 <__assert_fail@plt+0x6290>
   172ac:	ldr	r3, [sp, #56]	; 0x38
   172b0:	b	17b10 <__assert_fail@plt+0x650c>
   172b4:	cmp	r0, #69	; 0x45
   172b8:	beq	17894 <__assert_fail@plt+0x6290>
   172bc:	ldr	r2, [sp, #88]	; 0x58
   172c0:	ldr	r3, [r2, #4]
   172c4:	b	17b10 <__assert_fail@plt+0x650c>
   172c8:	cmp	r0, #69	; 0x45
   172cc:	beq	17894 <__assert_fail@plt+0x6290>
   172d0:	ldr	r1, [fp, #24]
   172d4:	cmp	r7, #1
   172d8:	mov	r4, #9
   172dc:	mov	r0, #8
   172e0:	sub	r6, fp, #48	; 0x30
   172e4:	movwlt	r7, #9
   172e8:	cmp	r7, r4
   172ec:	blt	17314 <__assert_fail@plt+0x5d10>
   172f0:	cmp	r4, #2
   172f4:	blt	17e2c <__assert_fail@plt+0x6828>
   172f8:	smmul	r2, r1, r8
   172fc:	asr	r3, r2, #2
   17300:	add	r2, r3, r2, lsr #31
   17304:	add	r2, r2, r2, lsl #2
   17308:	sub	r2, r1, r2, lsl #1
   1730c:	cmp	r2, #0
   17310:	bne	17e2c <__assert_fail@plt+0x6828>
   17314:	smmul	r1, r1, r8
   17318:	sub	r0, r0, #1
   1731c:	sub	r4, r4, #1
   17320:	asr	r2, r1, #2
   17324:	add	r1, r2, r1, lsr #31
   17328:	cmp	r7, r4
   1732c:	blt	17314 <__assert_fail@plt+0x5d10>
   17330:	b	172f0 <__assert_fail@plt+0x5cec>
   17334:	mov	r5, #1
   17338:	ldr	r1, [sp, #100]	; 0x64
   1733c:	ldr	r2, [sp, #96]	; 0x60
   17340:	orr	r5, r1, r5
   17344:	eor	r1, r1, #1
   17348:	and	r2, r2, r1
   1734c:	mov	r1, #112	; 0x70
   17350:	str	r2, [sp, #96]	; 0x60
   17354:	b	18070 <__assert_fail@plt+0x6a6c>
   17358:	cmp	r0, #69	; 0x45
   1735c:	beq	17894 <__assert_fail@plt+0x6290>
   17360:	ldr	r2, [sp, #88]	; 0x58
   17364:	ldr	r3, [r2]
   17368:	b	17b10 <__assert_fail@plt+0x650c>
   1736c:	movw	r3, #2244	; 0x8c4
   17370:	movt	r3, #2
   17374:	ldr	r0, [sp, #96]	; 0x60
   17378:	str	r3, [sp, #100]	; 0x64
   1737c:	mov	r2, r3
   17380:	ldr	r3, [sp, #88]	; 0x58
   17384:	mvn	r1, #0
   17388:	str	lr, [sp, #92]	; 0x5c
   1738c:	and	r6, r0, #1
   17390:	ldr	r0, [fp, #20]
   17394:	stm	sp, {r6, r9}
   17398:	str	r4, [sp, #8]
   1739c:	str	r0, [sp, #12]
   173a0:	ldr	r0, [fp, #24]
   173a4:	str	r0, [sp, #16]
   173a8:	mov	r0, #0
   173ac:	bl	16b6c <__assert_fail@plt+0x5568>
   173b0:	subs	r3, r9, #45	; 0x2d
   173b4:	ldr	lr, [sp, #92]	; 0x5c
   173b8:	ldr	r1, [sp, #104]	; 0x68
   173bc:	mov	r5, r0
   173c0:	movne	r3, r7
   173c4:	cmp	r7, #0
   173c8:	movwmi	r3, #0
   173cc:	cmp	r3, r0
   173d0:	movhi	r5, r3
   173d4:	sub	r7, r1, lr
   173d8:	cmp	r5, r7
   173dc:	bcs	18744 <__assert_fail@plt+0x7140>
   173e0:	ldr	r2, [sp, #108]	; 0x6c
   173e4:	movw	ip, #52428	; 0xcccc
   173e8:	movt	ip, #3276	; 0xccc
   173ec:	cmp	r2, #0
   173f0:	beq	17a18 <__assert_fail@plt+0x6414>
   173f4:	cmp	r3, r0
   173f8:	str	r0, [sp, #96]	; 0x60
   173fc:	bls	17a24 <__assert_fail@plt+0x6420>
   17400:	cmp	r9, #48	; 0x30
   17404:	sub	r8, r3, r0
   17408:	cmpne	r9, #43	; 0x2b
   1740c:	bne	18380 <__assert_fail@plt+0x6d7c>
   17410:	mov	r0, r2
   17414:	mov	r1, #48	; 0x30
   17418:	b	18388 <__assert_fail@plt+0x6d84>
   1741c:	cmp	r0, #69	; 0x45
   17420:	beq	17894 <__assert_fail@plt+0x6290>
   17424:	ldr	r3, [sp, #88]	; 0x58
   17428:	ldr	r2, [r3, #24]
   1742c:	ldr	r3, [r3, #28]
   17430:	sub	r2, r3, r2
   17434:	movw	r3, #9363	; 0x2493
   17438:	movt	r3, #37449	; 0x9249
   1743c:	add	r2, r2, #7
   17440:	smmla	r2, r2, r3, r2
   17444:	b	17488 <__assert_fail@plt+0x5e84>
   17448:	cmp	r0, #69	; 0x45
   1744c:	beq	17894 <__assert_fail@plt+0x6290>
   17450:	ldr	r3, [sp, #88]	; 0x58
   17454:	movw	r6, #9363	; 0x2493
   17458:	movt	r6, #37449	; 0x9249
   1745c:	ldr	r2, [r3, #24]
   17460:	ldr	r3, [r3, #28]
   17464:	add	r2, r2, #6
   17468:	smmla	r5, r2, r6, r2
   1746c:	asr	r4, r5, #2
   17470:	add	r5, r4, r5, lsr #31
   17474:	rsb	r5, r5, r5, lsl #3
   17478:	sub	r2, r5, r2
   1747c:	add	r2, r3, r2
   17480:	add	r2, r2, #7
   17484:	smmla	r2, r2, r6, r2
   17488:	asr	r3, r2, #2
   1748c:	add	r3, r3, r2, lsr #31
   17490:	b	17b10 <__assert_fail@plt+0x650c>
   17494:	cmp	r0, #79	; 0x4f
   17498:	beq	17894 <__assert_fail@plt+0x6290>
   1749c:	mov	r5, #0
   174a0:	mov	r1, #88	; 0x58
   174a4:	b	18070 <__assert_fail@plt+0x6a6c>
   174a8:	cmp	r0, #69	; 0x45
   174ac:	beq	18068 <__assert_fail@plt+0x6a64>
   174b0:	cmp	r0, #79	; 0x4f
   174b4:	beq	17894 <__assert_fail@plt+0x6290>
   174b8:	ldr	r2, [sp, #88]	; 0x58
   174bc:	movw	r6, #63636	; 0xf894
   174c0:	mov	r4, #4
   174c4:	movt	r6, #65535	; 0xffff
   174c8:	ldr	r3, [r2, #20]
   174cc:	mov	r2, #0
   174d0:	cmp	r3, r6
   174d4:	movw	r6, #1900	; 0x76c
   174d8:	movwlt	r2, #1
   174dc:	add	r3, r3, r6
   174e0:	b	17e24 <__assert_fail@plt+0x6820>
   174e4:	ldr	r0, [sp, #64]	; 0x40
   174e8:	subs	r5, r9, #45	; 0x2d
   174ec:	bicne	r5, r7, r7, asr #31
   174f0:	mov	r7, lr
   174f4:	bl	114b4 <strlen@plt>
   174f8:	mov	r4, r0
   174fc:	cmp	r5, r0
   17500:	mov	r6, r0
   17504:	ldr	r0, [sp, #104]	; 0x68
   17508:	movhi	r6, r5
   1750c:	sub	r0, r0, r7
   17510:	cmp	r6, r0
   17514:	bcs	18744 <__assert_fail@plt+0x7140>
   17518:	ldr	r8, [sp, #108]	; 0x6c
   1751c:	movw	ip, #52428	; 0xcccc
   17520:	mov	lr, r7
   17524:	movt	ip, #3276	; 0xccc
   17528:	cmp	r8, #0
   1752c:	beq	17fd8 <__assert_fail@plt+0x69d4>
   17530:	cmp	r5, r4
   17534:	bls	182e4 <__assert_fail@plt+0x6ce0>
   17538:	uxtb	r1, r9
   1753c:	sub	r5, r5, r4
   17540:	cmp	r1, #48	; 0x30
   17544:	cmpne	r1, #43	; 0x2b
   17548:	bne	18540 <__assert_fail@plt+0x6f3c>
   1754c:	mov	r0, r8
   17550:	mov	r1, #48	; 0x30
   17554:	b	18548 <__assert_fail@plt+0x6f44>
   17558:	cmp	r0, #0
   1755c:	bne	17894 <__assert_fail@plt+0x6290>
   17560:	ldr	r1, [sp, #96]	; 0x60
   17564:	ldr	r2, [sp, #100]	; 0x64
   17568:	mov	r5, #0
   1756c:	orr	r1, r2, r1
   17570:	str	r1, [sp, #96]	; 0x60
   17574:	mov	r1, #97	; 0x61
   17578:	b	18070 <__assert_fail@plt+0x6a6c>
   1757c:	cmp	r0, #79	; 0x4f
   17580:	beq	17894 <__assert_fail@plt+0x6290>
   17584:	mov	r5, #0
   17588:	mov	r1, #99	; 0x63
   1758c:	b	18070 <__assert_fail@plt+0x6a6c>
   17590:	cmp	r0, #69	; 0x45
   17594:	beq	17894 <__assert_fail@plt+0x6290>
   17598:	ldr	r2, [sp, #52]	; 0x34
   1759c:	ldr	r3, [r2]
   175a0:	b	17b10 <__assert_fail@plt+0x650c>
   175a4:	ldr	r2, [sp, #52]	; 0x34
   175a8:	cmp	r0, #69	; 0x45
   175ac:	bne	175dc <__assert_fail@plt+0x5fd8>
   175b0:	b	17894 <__assert_fail@plt+0x6290>
   175b4:	cmp	r0, #69	; 0x45
   175b8:	beq	17894 <__assert_fail@plt+0x6290>
   175bc:	ldr	r2, [sp, #88]	; 0x58
   175c0:	mov	r4, #3
   175c4:	str	r4, [sp, #100]	; 0x64
   175c8:	ldr	r3, [r2, #28]
   175cc:	b	17614 <__assert_fail@plt+0x6010>
   175d0:	ldr	r2, [sp, #60]	; 0x3c
   175d4:	cmp	r0, #69	; 0x45
   175d8:	beq	17894 <__assert_fail@plt+0x6290>
   175dc:	ldr	r3, [r2]
   175e0:	b	175f0 <__assert_fail@plt+0x5fec>
   175e4:	ldr	r3, [sp, #56]	; 0x38
   175e8:	cmp	r0, #69	; 0x45
   175ec:	beq	17894 <__assert_fail@plt+0x6290>
   175f0:	cmp	r9, #0
   175f4:	movweq	r9, #95	; 0x5f
   175f8:	b	17b10 <__assert_fail@plt+0x650c>
   175fc:	cmp	r0, #69	; 0x45
   17600:	beq	17894 <__assert_fail@plt+0x6290>
   17604:	ldr	r2, [sp, #88]	; 0x58
   17608:	mov	r4, #2
   1760c:	str	r4, [sp, #100]	; 0x64
   17610:	ldr	r3, [r2, #16]
   17614:	mov	r2, #0
   17618:	cmn	r3, #1
   1761c:	add	r3, r3, #1
   17620:	movwlt	r2, #1
   17624:	b	17b1c <__assert_fail@plt+0x6518>
   17628:	subs	r0, r9, #45	; 0x2d
   1762c:	ldr	r1, [sp, #104]	; 0x68
   17630:	bicne	r0, r7, r7, asr #31
   17634:	cmp	r0, #1
   17638:	mov	r5, r0
   1763c:	movls	r5, #1
   17640:	sub	r1, r1, lr
   17644:	cmp	r5, r1
   17648:	bcs	18744 <__assert_fail@plt+0x7140>
   1764c:	ldr	r8, [sp, #108]	; 0x6c
   17650:	mov	r4, #-2147483648	; 0x80000000
   17654:	cmp	r8, #0
   17658:	beq	17fd0 <__assert_fail@plt+0x69cc>
   1765c:	cmp	r0, #2
   17660:	bcc	1862c <__assert_fail@plt+0x7028>
   17664:	uxtb	r1, r9
   17668:	sub	r4, r0, #1
   1766c:	cmp	r1, #48	; 0x30
   17670:	cmpne	r1, #43	; 0x2b
   17674:	bne	18600 <__assert_fail@plt+0x6ffc>
   17678:	mov	r0, r8
   1767c:	mov	r1, #48	; 0x30
   17680:	b	18608 <__assert_fail@plt+0x7004>
   17684:	ldr	r2, [sp, #88]	; 0x58
   17688:	mov	r3, #11
   1768c:	mov	r4, #1
   17690:	ldr	r2, [r2, #16]
   17694:	mul	r2, r2, r3
   17698:	mov	r3, #1
   1769c:	str	r3, [sp, #100]	; 0x64
   176a0:	add	r3, r4, r2, asr #5
   176a4:	mov	r2, #0
   176a8:	b	17b1c <__assert_fail@plt+0x6518>
   176ac:	ldr	r2, [sp, #88]	; 0x58
   176b0:	mov	r0, #28
   176b4:	add	r1, sp, #112	; 0x70
   176b8:	str	lr, [sp, #92]	; 0x5c
   176bc:	mov	r4, r1
   176c0:	mov	r3, r2
   176c4:	add	r2, r2, #16
   176c8:	vld1.32	{d16-d17}, [r3], r0
   176cc:	vld1.32	{d18-d19}, [r2]
   176d0:	add	r2, r1, #16
   176d4:	vld1.32	{d20-d21}, [r3]
   176d8:	vst1.64	{d16-d17}, [r4], r0
   176dc:	mvn	r0, #0
   176e0:	vst1.64	{d18-d19}, [r2]
   176e4:	vst1.32	{d20-d21}, [r4]
   176e8:	str	r0, [r4]
   176ec:	ldr	r0, [fp, #20]
   176f0:	bl	1aa30 <__assert_fail@plt+0x942c>
   176f4:	ldr	r1, [r4]
   176f8:	cmp	r1, #0
   176fc:	bmi	18760 <__assert_fail@plt+0x715c>
   17700:	ldr	r1, [sp, #40]	; 0x28
   17704:	lsr	r2, r0, #31
   17708:	mov	r3, r0
   1770c:	smmul	r6, r3, r8
   17710:	cmp	r0, #0
   17714:	asr	r5, r6, #2
   17718:	add	r6, r5, r6, lsr #31
   1771c:	add	r5, r6, r6, lsl #2
   17720:	sub	r5, r3, r5, lsl #1
   17724:	add	r3, r3, #9
   17728:	rsbmi	r5, r5, #0
   1772c:	cmp	r3, #18
   17730:	mov	r3, r6
   17734:	add	r5, r5, #48	; 0x30
   17738:	strb	r5, [r1], #-1
   1773c:	bhi	1770c <__assert_fail@plt+0x6108>
   17740:	ldr	lr, [sp, #92]	; 0x5c
   17744:	cmp	r7, #0
   17748:	movw	ip, #52428	; 0xcccc
   1774c:	add	r8, r1, #1
   17750:	mov	r4, #0
   17754:	mov	r6, sl
   17758:	movwmi	r7, #1
   1775c:	cmp	r9, #0
   17760:	movt	ip, #3276	; 0xccc
   17764:	movweq	r9, #48	; 0x30
   17768:	mov	r3, r7
   1776c:	b	17bb0 <__assert_fail@plt+0x65ac>
   17770:	subs	r0, r9, #45	; 0x2d
   17774:	ldr	r1, [sp, #104]	; 0x68
   17778:	bicne	r0, r7, r7, asr #31
   1777c:	cmp	r0, #1
   17780:	mov	r5, r0
   17784:	movls	r5, #1
   17788:	sub	r1, r1, lr
   1778c:	cmp	r5, r1
   17790:	bcs	18744 <__assert_fail@plt+0x7140>
   17794:	ldr	r8, [sp, #108]	; 0x6c
   17798:	mov	r4, #-2147483648	; 0x80000000
   1779c:	cmp	r8, #0
   177a0:	beq	17fd0 <__assert_fail@plt+0x69cc>
   177a4:	cmp	r0, #2
   177a8:	bcc	18664 <__assert_fail@plt+0x7060>
   177ac:	uxtb	r1, r9
   177b0:	sub	r4, r0, #1
   177b4:	cmp	r1, #48	; 0x30
   177b8:	cmpne	r1, #43	; 0x2b
   177bc:	bne	18638 <__assert_fail@plt+0x7034>
   177c0:	mov	r0, r8
   177c4:	mov	r1, #48	; 0x30
   177c8:	b	18640 <__assert_fail@plt+0x703c>
   177cc:	ldr	r2, [sp, #88]	; 0x58
   177d0:	movw	r3, #9363	; 0x2493
   177d4:	movt	r3, #37449	; 0x9249
   177d8:	ldr	r2, [r2, #24]
   177dc:	add	r2, r2, #6
   177e0:	smmla	r3, r2, r3, r2
   177e4:	asr	r6, r3, #2
   177e8:	add	r3, r6, r3, lsr #31
   177ec:	rsb	r3, r3, r3, lsl #3
   177f0:	sub	r2, r2, r3
   177f4:	add	r3, r2, #1
   177f8:	mov	r2, #1
   177fc:	b	17b14 <__assert_fail@plt+0x6510>
   17800:	cmp	r0, #69	; 0x45
   17804:	beq	17894 <__assert_fail@plt+0x6290>
   17808:	ldr	r2, [sp, #88]	; 0x58
   1780c:	ldr	r3, [r2, #24]
   17810:	mov	r2, #1
   17814:	b	17b14 <__assert_fail@plt+0x6510>
   17818:	cmp	r0, #79	; 0x4f
   1781c:	beq	17894 <__assert_fail@plt+0x6290>
   17820:	mov	r5, #0
   17824:	mov	r1, #120	; 0x78
   17828:	b	18070 <__assert_fail@plt+0x6a6c>
   1782c:	cmp	r0, #69	; 0x45
   17830:	bne	17f30 <__assert_fail@plt+0x692c>
   17834:	mov	r5, #0
   17838:	mov	r1, #121	; 0x79
   1783c:	b	18070 <__assert_fail@plt+0x6a6c>
   17840:	cmp	r2, #122	; 0x7a
   17844:	bne	17894 <__assert_fail@plt+0x6290>
   17848:	add	sl, sl, r5
   1784c:	ldr	r3, [sp, #88]	; 0x58
   17850:	ldr	r2, [r3, #32]
   17854:	cmp	r2, #0
   17858:	bmi	17aec <__assert_fail@plt+0x64e8>
   1785c:	mov	r8, lr
   17860:	ldr	lr, [r3, #36]	; 0x24
   17864:	cmp	lr, #0
   17868:	bmi	17fe0 <__assert_fail@plt+0x69dc>
   1786c:	mov	r2, #0
   17870:	bne	17fe4 <__assert_fail@plt+0x69e0>
   17874:	ldr	r2, [sp, #64]	; 0x40
   17878:	ldrb	r2, [r2]
   1787c:	sub	r2, r2, #45	; 0x2d
   17880:	clz	r2, r2
   17884:	lsr	r2, r2, #5
   17888:	cmp	r5, #3
   1788c:	bls	17fec <__assert_fail@plt+0x69e8>
   17890:	mov	lr, r8
   17894:	subs	r5, r9, #45	; 0x2d
   17898:	ldr	r0, [sp, #104]	; 0x68
   1789c:	sub	r8, sl, r6
   178a0:	ldr	r3, [sp, #108]	; 0x6c
   178a4:	bicne	r5, r7, r7, asr #31
   178a8:	add	r4, r8, #1
   178ac:	mov	r7, r4
   178b0:	cmp	r5, r4
   178b4:	movhi	r7, r5
   178b8:	sub	r0, r0, lr
   178bc:	cmp	r7, r0
   178c0:	bcs	18744 <__assert_fail@plt+0x7140>
   178c4:	cmp	r3, #0
   178c8:	beq	178fc <__assert_fail@plt+0x62f8>
   178cc:	cmp	r5, r4
   178d0:	mov	r1, r3
   178d4:	bls	17928 <__assert_fail@plt+0x6324>
   178d8:	uxtb	r0, r9
   178dc:	sub	r2, r5, r4
   178e0:	str	lr, [sp, #92]	; 0x5c
   178e4:	cmp	r0, #48	; 0x30
   178e8:	cmpne	r0, #43	; 0x2b
   178ec:	bne	17904 <__assert_fail@plt+0x6300>
   178f0:	mov	r0, r3
   178f4:	mov	r1, #48	; 0x30
   178f8:	b	1790c <__assert_fail@plt+0x6308>
   178fc:	mov	r8, #0
   17900:	b	17a08 <__assert_fail@plt+0x6404>
   17904:	mov	r0, r3
   17908:	mov	r1, #32
   1790c:	mov	r9, r2
   17910:	bl	11508 <memset@plt>
   17914:	ldr	r0, [sp, #108]	; 0x6c
   17918:	ldr	lr, [sp, #92]	; 0x5c
   1791c:	movw	ip, #52428	; 0xcccc
   17920:	movt	ip, #3276	; 0xccc
   17924:	add	r1, r0, r9
   17928:	ldr	r0, [sp, #96]	; 0x60
   1792c:	str	r1, [sp, #100]	; 0x64
   17930:	tst	r0, #1
   17934:	beq	179e0 <__assert_fail@plt+0x63dc>
   17938:	cmp	r4, #0
   1793c:	beq	17a00 <__assert_fail@plt+0x63fc>
   17940:	sub	r0, sl, r6
   17944:	str	lr, [sp, #92]	; 0x5c
   17948:	add	r9, r0, #1
   1794c:	bl	1146c <__ctype_toupper_loc@plt>
   17950:	tst	r9, #1
   17954:	mov	r1, r4
   17958:	beq	17974 <__assert_fail@plt+0x6370>
   1795c:	ldrb	r1, [sl]
   17960:	ldr	r2, [r0]
   17964:	ldr	r1, [r2, r1, lsl #2]
   17968:	ldr	r2, [sp, #100]	; 0x64
   1796c:	strb	r1, [r2, r8]
   17970:	mov	r1, r8
   17974:	ldr	lr, [sp, #92]	; 0x5c
   17978:	movw	ip, #52428	; 0xcccc
   1797c:	cmp	sl, r6
   17980:	movt	ip, #3276	; 0xccc
   17984:	beq	17a00 <__assert_fail@plt+0x63fc>
   17988:	cmp	r5, r9
   1798c:	ldr	r3, [sp, #108]	; 0x6c
   17990:	add	r2, r1, r6
   17994:	movhi	r9, r5
   17998:	add	r2, r2, r9
   1799c:	sub	r2, r2, sl
   179a0:	add	r2, r3, r2
   179a4:	sub	r3, r6, #2
   179a8:	sub	r2, r2, #2
   179ac:	add	r6, r3, r1
   179b0:	ldr	r5, [r0]
   179b4:	ldrb	r6, [r6, #1]
   179b8:	ldr	r6, [r5, r6, lsl #2]
   179bc:	strb	r6, [r2]
   179c0:	ldrb	r6, [r3, r1]
   179c4:	ldr	r5, [r0]
   179c8:	subs	r1, r1, #2
   179cc:	ldr	r6, [r5, r6, lsl #2]
   179d0:	strb	r6, [r2, #-1]
   179d4:	sub	r2, r2, #2
   179d8:	bne	179ac <__assert_fail@plt+0x63a8>
   179dc:	b	17a00 <__assert_fail@plt+0x63fc>
   179e0:	mov	r0, r1
   179e4:	mov	r1, r6
   179e8:	mov	r2, r4
   179ec:	mov	r5, lr
   179f0:	bl	11358 <memcpy@plt>
   179f4:	movw	ip, #52428	; 0xcccc
   179f8:	mov	lr, r5
   179fc:	movt	ip, #3276	; 0xccc
   17a00:	ldr	r0, [sp, #100]	; 0x64
   17a04:	add	r8, r0, r4
   17a08:	add	lr, r7, lr
   17a0c:	mov	r6, sl
   17a10:	mov	r4, #-2147483648	; 0x80000000
   17a14:	b	16c70 <__assert_fail@plt+0x566c>
   17a18:	mov	r8, #0
   17a1c:	mov	r4, #-2147483648	; 0x80000000
   17a20:	b	18708 <__assert_fail@plt+0x7104>
   17a24:	ldr	r3, [sp, #88]	; 0x58
   17a28:	b	1839c <__assert_fail@plt+0x6d98>
   17a2c:	sub	r2, r2, #1
   17a30:	movw	r4, #365	; 0x16d
   17a34:	tst	r2, #3
   17a38:	bne	17a7c <__assert_fail@plt+0x6478>
   17a3c:	movw	r4, #34079	; 0x851f
   17a40:	movt	r4, #20971	; 0x51eb
   17a44:	smmul	r4, r2, r4
   17a48:	asr	r6, r4, #5
   17a4c:	add	r3, r6, r4, lsr #31
   17a50:	mov	r6, #100	; 0x64
   17a54:	mls	r3, r3, r6, r2
   17a58:	asr	r6, r4, #7
   17a5c:	add	r4, r6, r4, lsr #31
   17a60:	mov	r6, #400	; 0x190
   17a64:	mls	r2, r4, r6, r2
   17a68:	movw	r4, #365	; 0x16d
   17a6c:	cmp	r2, #0
   17a70:	movweq	r4, #366	; 0x16e
   17a74:	cmp	r3, #0
   17a78:	movwne	r4, #366	; 0x16e
   17a7c:	add	r2, r4, r5
   17a80:	movw	r5, #9363	; 0x2493
   17a84:	movw	r4, #382	; 0x17e
   17a88:	sub	r3, r4, r8
   17a8c:	movt	r5, #37449	; 0x9249
   17a90:	add	r2, r3, r2
   17a94:	smmla	r2, r2, r5, r2
   17a98:	asr	r4, r2, #2
   17a9c:	add	r2, r4, r2, lsr #31
   17aa0:	rsb	r2, r2, r2, lsl #3
   17aa4:	sub	r2, r2, r3
   17aa8:	mvn	r3, #0
   17aac:	add	r4, r2, #3
   17ab0:	cmp	r1, #71	; 0x47
   17ab4:	bne	17150 <__assert_fail@plt+0x5b4c>
   17ab8:	movw	r2, #63636	; 0xf894
   17abc:	movt	r2, #65535	; 0xffff
   17ac0:	sub	r6, r2, r3
   17ac4:	add	r3, lr, r3
   17ac8:	mov	r2, #0
   17acc:	cmp	lr, r6
   17ad0:	ldr	lr, [sp, #92]	; 0x5c
   17ad4:	movw	r6, #1900	; 0x76c
   17ad8:	add	r3, r3, r6
   17adc:	mov	r6, #4
   17ae0:	movwlt	r2, #1
   17ae4:	str	r6, [sp, #100]	; 0x64
   17ae8:	b	18430 <__assert_fail@plt+0x6e2c>
   17aec:	ldr	r8, [sp, #108]	; 0x6c
   17af0:	mov	r6, sl
   17af4:	mov	r4, #-2147483648	; 0x80000000
   17af8:	b	16c70 <__assert_fail@plt+0x566c>
   17afc:	smmla	r2, r4, r5, r4
   17b00:	ldr	lr, [sp, #92]	; 0x5c
   17b04:	asr	r3, r2, #2
   17b08:	add	r2, r3, r2, lsr #31
   17b0c:	add	r3, r2, #1
   17b10:	mov	r2, #2
   17b14:	str	r2, [sp, #100]	; 0x64
   17b18:	lsr	r2, r3, #31
   17b1c:	cmp	r2, #0
   17b20:	mov	r6, #0
   17b24:	mov	r4, #0
   17b28:	movwne	r2, #1
   17b2c:	cmp	r0, #79	; 0x4f
   17b30:	moveq	r5, #0
   17b34:	cmpeq	r2, #0
   17b38:	beq	18070 <__assert_fail@plt+0x6a6c>
   17b3c:	ldr	r8, [sp, #80]	; 0x50
   17b40:	cmp	r2, #0
   17b44:	rsbne	r3, r3, #0
   17b48:	tst	r6, #1
   17b4c:	asr	r6, r6, #1
   17b50:	movne	r0, #58	; 0x3a
   17b54:	strbne	r0, [r8, #-1]!
   17b58:	movw	r0, #52429	; 0xcccd
   17b5c:	cmp	r3, #9
   17b60:	movt	r0, #52428	; 0xcccc
   17b64:	umull	r0, r1, r3, r0
   17b68:	lsr	r0, r1, #3
   17b6c:	add	r1, r0, r0, lsl #2
   17b70:	sub	r1, r3, r1, lsl #1
   17b74:	mov	r3, r0
   17b78:	orr	r1, r1, #48	; 0x30
   17b7c:	strb	r1, [r8, #-1]!
   17b80:	bhi	17b48 <__assert_fail@plt+0x6544>
   17b84:	cmp	r6, #0
   17b88:	mov	r3, r0
   17b8c:	bne	17b48 <__assert_fail@plt+0x6544>
   17b90:	cmp	r7, #0
   17b94:	ldr	r3, [sp, #100]	; 0x64
   17b98:	mov	r6, sl
   17b9c:	movpl	r3, r7
   17ba0:	cmp	r4, #0
   17ba4:	movwne	r4, #43	; 0x2b
   17ba8:	cmp	r9, #0
   17bac:	movweq	r9, #48	; 0x30
   17bb0:	ldr	r1, [sp, #80]	; 0x50
   17bb4:	cmp	r2, #0
   17bb8:	mov	r0, r3
   17bbc:	movwne	r4, #45	; 0x2d
   17bc0:	cmp	r4, #0
   17bc4:	subne	r0, r0, #1
   17bc8:	sub	sl, r1, r8
   17bcc:	sub	r0, r0, sl
   17bd0:	cmp	r0, #1
   17bd4:	movwlt	r0, #0
   17bd8:	subs	r5, r9, #45	; 0x2d
   17bdc:	movne	r5, r0
   17be0:	cmp	r4, #0
   17be4:	beq	17c30 <__assert_fail@plt+0x662c>
   17be8:	ldr	r7, [sp, #108]	; 0x6c
   17bec:	cmp	r9, #95	; 0x5f
   17bf0:	bne	17c44 <__assert_fail@plt+0x6640>
   17bf4:	cmp	r7, #0
   17bf8:	beq	17c38 <__assert_fail@plt+0x6634>
   17bfc:	mov	r0, r7
   17c00:	mov	r1, #32
   17c04:	mov	r2, r5
   17c08:	str	lr, [sp, #92]	; 0x5c
   17c0c:	str	r3, [sp, #100]	; 0x64
   17c10:	bl	11508 <memset@plt>
   17c14:	ldr	r7, [sp, #108]	; 0x6c
   17c18:	ldr	r3, [sp, #100]	; 0x64
   17c1c:	ldr	lr, [sp, #92]	; 0x5c
   17c20:	movw	ip, #52428	; 0xcccc
   17c24:	movt	ip, #3276	; 0xccc
   17c28:	add	r7, r7, r5
   17c2c:	b	17c3c <__assert_fail@plt+0x6638>
   17c30:	ldr	r7, [sp, #108]	; 0x6c
   17c34:	b	17c68 <__assert_fail@plt+0x6664>
   17c38:	mov	r7, #0
   17c3c:	sub	r3, r3, r5
   17c40:	add	lr, r5, lr
   17c44:	ldr	r0, [sp, #104]	; 0x68
   17c48:	sub	r0, r0, lr
   17c4c:	cmp	r0, #2
   17c50:	bcc	18744 <__assert_fail@plt+0x7140>
   17c54:	cmp	r7, #0
   17c58:	sub	r3, r3, #1
   17c5c:	add	lr, lr, #1
   17c60:	strbne	r4, [r7], #1
   17c64:	moveq	r7, #0
   17c68:	subs	r5, r9, #45	; 0x2d
   17c6c:	ldr	r0, [sp, #104]	; 0x68
   17c70:	mov	r4, sl
   17c74:	bicne	r5, r3, r3, asr #31
   17c78:	cmp	r5, sl
   17c7c:	movhi	r4, r5
   17c80:	sub	r0, r0, lr
   17c84:	cmp	r4, r0
   17c88:	bcs	18744 <__assert_fail@plt+0x7140>
   17c8c:	cmp	r7, #0
   17c90:	beq	17cc0 <__assert_fail@plt+0x66bc>
   17c94:	cmp	r5, sl
   17c98:	mov	r1, r7
   17c9c:	bls	17cec <__assert_fail@plt+0x66e8>
   17ca0:	cmp	r9, #48	; 0x30
   17ca4:	sub	r2, r5, sl
   17ca8:	str	lr, [sp, #92]	; 0x5c
   17cac:	cmpne	r9, #43	; 0x2b
   17cb0:	bne	17ccc <__assert_fail@plt+0x66c8>
   17cb4:	mov	r0, r7
   17cb8:	mov	r1, #48	; 0x30
   17cbc:	b	17cd4 <__assert_fail@plt+0x66d0>
   17cc0:	mov	r8, #0
   17cc4:	add	lr, r4, lr
   17cc8:	b	17a10 <__assert_fail@plt+0x640c>
   17ccc:	mov	r0, r7
   17cd0:	mov	r1, #32
   17cd4:	mov	r9, r2
   17cd8:	bl	11508 <memset@plt>
   17cdc:	ldr	lr, [sp, #92]	; 0x5c
   17ce0:	movw	ip, #52428	; 0xcccc
   17ce4:	add	r1, r7, r9
   17ce8:	movt	ip, #3276	; 0xccc
   17cec:	ldr	r0, [sp, #96]	; 0x60
   17cf0:	tst	r0, #1
   17cf4:	beq	17da4 <__assert_fail@plt+0x67a0>
   17cf8:	mov	r9, r1
   17cfc:	cmp	sl, #0
   17d00:	str	r7, [sp, #108]	; 0x6c
   17d04:	beq	17dc8 <__assert_fail@plt+0x67c4>
   17d08:	str	lr, [sp, #92]	; 0x5c
   17d0c:	mvn	r7, r8
   17d10:	bl	1146c <__ctype_toupper_loc@plt>
   17d14:	tst	sl, #1
   17d18:	mov	r1, sl
   17d1c:	beq	17d34 <__assert_fail@plt+0x6730>
   17d20:	sub	r1, sl, #1
   17d24:	ldr	r3, [r0]
   17d28:	ldrb	r2, [r8, r1]
   17d2c:	ldr	r2, [r3, r2, lsl #2]
   17d30:	strb	r2, [r9, r1]
   17d34:	ldr	r2, [sp, #44]	; 0x2c
   17d38:	ldr	lr, [sp, #92]	; 0x5c
   17d3c:	movw	ip, #52428	; 0xcccc
   17d40:	movt	ip, #3276	; 0xccc
   17d44:	cmp	r7, r2
   17d48:	beq	17dc8 <__assert_fail@plt+0x67c4>
   17d4c:	cmp	r5, sl
   17d50:	add	r2, r1, r8
   17d54:	ldr	r3, [sp, #36]	; 0x24
   17d58:	movls	r5, sl
   17d5c:	add	r2, r2, r5
   17d60:	ldr	r5, [sp, #108]	; 0x6c
   17d64:	add	r3, r5, r3
   17d68:	add	r2, r3, r2
   17d6c:	sub	r3, r8, #2
   17d70:	add	r5, r3, r1
   17d74:	ldr	r7, [r0]
   17d78:	ldrb	r5, [r5, #1]
   17d7c:	ldr	r7, [r7, r5, lsl #2]
   17d80:	strb	r7, [r2]
   17d84:	ldrb	r7, [r3, r1]
   17d88:	ldr	r5, [r0]
   17d8c:	subs	r1, r1, #2
   17d90:	ldr	r7, [r5, r7, lsl #2]
   17d94:	strb	r7, [r2, #-1]
   17d98:	sub	r2, r2, #2
   17d9c:	bne	17d70 <__assert_fail@plt+0x676c>
   17da0:	b	17dc8 <__assert_fail@plt+0x67c4>
   17da4:	mov	r9, r1
   17da8:	mov	r0, r1
   17dac:	mov	r1, r8
   17db0:	mov	r2, sl
   17db4:	mov	r5, lr
   17db8:	bl	11358 <memcpy@plt>
   17dbc:	movw	ip, #52428	; 0xcccc
   17dc0:	mov	lr, r5
   17dc4:	movt	ip, #3276	; 0xccc
   17dc8:	add	r8, r9, sl
   17dcc:	add	lr, r4, lr
   17dd0:	b	17a10 <__assert_fail@plt+0x640c>
   17dd4:	ldr	r2, [sp, #88]	; 0x58
   17dd8:	movw	r5, #63636	; 0xf894
   17ddc:	mov	r3, #0
   17de0:	mvn	r4, #98	; 0x62
   17de4:	movt	r5, #65535	; 0xffff
   17de8:	ldr	r6, [r2, #20]
   17dec:	mov	r2, #0
   17df0:	cmp	r6, r5
   17df4:	movwge	r3, #1
   17df8:	cmp	r6, r5
   17dfc:	and	r3, r3, r6, lsr #31
   17e00:	movwlt	r2, #1
   17e04:	smlabb	r3, r3, r4, r6
   17e08:	movw	r4, #34079	; 0x851f
   17e0c:	movt	r4, #20971	; 0x51eb
   17e10:	smmul	r3, r3, r4
   17e14:	asr	r4, r3, #5
   17e18:	add	r3, r4, r3, lsr #31
   17e1c:	mov	r4, #2
   17e20:	add	r3, r3, #19
   17e24:	str	r4, [sp, #100]	; 0x64
   17e28:	b	18430 <__assert_fail@plt+0x6e2c>
   17e2c:	cmp	r4, #1
   17e30:	blt	17e64 <__assert_fail@plt+0x6860>
   17e34:	smmul	r2, r1, r8
   17e38:	cmp	r0, #0
   17e3c:	asr	r3, r2, #2
   17e40:	add	r2, r3, r2, lsr #31
   17e44:	add	r3, r2, r2, lsl #2
   17e48:	sub	r1, r1, r3, lsl #1
   17e4c:	add	r1, r1, #48	; 0x30
   17e50:	strb	r1, [r6, r0]
   17e54:	sub	r1, r0, #1
   17e58:	mov	r0, r1
   17e5c:	mov	r1, r2
   17e60:	bgt	17e34 <__assert_fail@plt+0x6830>
   17e64:	ldr	r0, [sp, #104]	; 0x68
   17e68:	cmp	r9, #0
   17e6c:	movweq	r9, #48	; 0x30
   17e70:	sub	r8, r0, lr
   17e74:	cmp	r4, r8
   17e78:	bcs	18744 <__assert_fail@plt+0x7140>
   17e7c:	ldr	r0, [sp, #108]	; 0x6c
   17e80:	mov	r2, #0
   17e84:	mov	r5, #0
   17e88:	cmp	r0, #0
   17e8c:	beq	184d4 <__assert_fail@plt+0x6ed0>
   17e90:	ldr	r1, [sp, #96]	; 0x60
   17e94:	tst	r1, #1
   17e98:	beq	184ac <__assert_fail@plt+0x6ea8>
   17e9c:	cmp	r4, #0
   17ea0:	beq	184c8 <__assert_fail@plt+0x6ec4>
   17ea4:	mov	r5, lr
   17ea8:	bl	1146c <__ctype_toupper_loc@plt>
   17eac:	tst	r4, #1
   17eb0:	mov	r1, r4
   17eb4:	beq	17edc <__assert_fail@plt+0x68d8>
   17eb8:	ldr	r1, [sp, #24]
   17ebc:	ldr	r2, [r0]
   17ec0:	add	r1, r1, r4
   17ec4:	ldrb	r1, [r1, #-9]
   17ec8:	ldr	r1, [r2, r1, lsl #2]
   17ecc:	ldr	r2, [sp, #108]	; 0x6c
   17ed0:	add	r2, r2, r4
   17ed4:	strb	r1, [r2, #-1]
   17ed8:	sub	r1, r4, #1
   17edc:	ldr	r6, [sp, #28]
   17ee0:	movw	ip, #52428	; 0xcccc
   17ee4:	cmp	r4, #1
   17ee8:	mov	lr, r5
   17eec:	movt	ip, #3276	; 0xccc
   17ef0:	beq	184c8 <__assert_fail@plt+0x6ec4>
   17ef4:	ldr	r2, [sp, #108]	; 0x6c
   17ef8:	sub	r2, r2, #2
   17efc:	add	r3, r6, r1
   17f00:	ldr	r5, [r0]
   17f04:	ldrb	r3, [r3, #1]
   17f08:	ldr	r3, [r5, r3, lsl #2]
   17f0c:	add	r5, r2, r1
   17f10:	strb	r3, [r5, #1]
   17f14:	ldrb	r3, [r6, r1]
   17f18:	ldr	r5, [r0]
   17f1c:	ldr	r3, [r5, r3, lsl #2]
   17f20:	strb	r3, [r2, r1]
   17f24:	subs	r1, r1, #2
   17f28:	bne	17efc <__assert_fail@plt+0x68f8>
   17f2c:	b	184c8 <__assert_fail@plt+0x6ec4>
   17f30:	ldr	r2, [sp, #88]	; 0x58
   17f34:	ldr	r6, [r2, #20]
   17f38:	movw	r2, #34079	; 0x851f
   17f3c:	movt	r2, #20971	; 0x51eb
   17f40:	smmul	r2, r6, r2
   17f44:	asr	r3, r2, #5
   17f48:	add	r2, r3, r2, lsr #31
   17f4c:	mov	r3, #100	; 0x64
   17f50:	mls	r5, r2, r3, r6
   17f54:	mov	r2, #0
   17f58:	mov	r3, #2
   17f5c:	cmn	r5, #1
   17f60:	ble	18418 <__assert_fail@plt+0x6e14>
   17f64:	str	r3, [sp, #100]	; 0x64
   17f68:	mov	r3, r5
   17f6c:	b	18430 <__assert_fail@plt+0x6e2c>
   17f70:	subs	r0, r9, #45	; 0x2d
   17f74:	ldr	r1, [sp, #104]	; 0x68
   17f78:	bicne	r0, r7, r7, asr #31
   17f7c:	cmp	r0, #1
   17f80:	mov	r5, r0
   17f84:	movls	r5, #1
   17f88:	sub	r1, r1, lr
   17f8c:	cmp	r5, r1
   17f90:	bcs	18744 <__assert_fail@plt+0x7140>
   17f94:	ldr	r8, [sp, #108]	; 0x6c
   17f98:	mov	r4, #-2147483648	; 0x80000000
   17f9c:	cmp	r8, #0
   17fa0:	beq	17fd0 <__assert_fail@plt+0x69cc>
   17fa4:	mov	r1, #37	; 0x25
   17fa8:	cmp	r0, #2
   17fac:	bcc	18704 <__assert_fail@plt+0x7100>
   17fb0:	uxtb	r1, r9
   17fb4:	sub	r4, r0, #1
   17fb8:	cmp	r1, #48	; 0x30
   17fbc:	cmpne	r1, #43	; 0x2b
   17fc0:	bne	186d4 <__assert_fail@plt+0x70d0>
   17fc4:	mov	r0, r8
   17fc8:	mov	r1, #48	; 0x30
   17fcc:	b	186dc <__assert_fail@plt+0x70d8>
   17fd0:	mov	r8, #0
   17fd4:	b	18708 <__assert_fail@plt+0x7104>
   17fd8:	mov	r8, #0
   17fdc:	b	185f0 <__assert_fail@plt+0x6fec>
   17fe0:	mov	r2, #1
   17fe4:	cmp	r5, #3
   17fe8:	bhi	17890 <__assert_fail@plt+0x628c>
   17fec:	movw	ip, #34953	; 0x8889
   17ff0:	movt	ip, #34952	; 0x8888
   17ff4:	smmla	r6, lr, ip, lr
   17ff8:	asr	r3, r6, #5
   17ffc:	add	r6, r3, r6, lsr #31
   18000:	smmla	r3, r6, ip, r6
   18004:	asr	r4, r3, #5
   18008:	add	r3, r4, r3, lsr #31
   1800c:	rsb	r3, r3, r3, lsl #4
   18010:	sub	ip, r6, r3, lsl #2
   18014:	movw	r3, #46021	; 0xb3c5
   18018:	movt	r3, #37282	; 0x91a2
   1801c:	smmla	r3, lr, r3, lr
   18020:	asr	r4, r3, #11
   18024:	add	r3, r4, r3, lsr #31
   18028:	rsb	r4, r6, r6, lsl #4
   1802c:	add	r6, pc, #4
   18030:	sub	r4, lr, r4, lsl #2
   18034:	ldr	pc, [r6, r5, lsl #2]
   18038:	andeq	r8, r1, r8, asr #32
   1803c:	andeq	r8, r1, ip, lsr #13
   18040:	andeq	r8, r1, r4, lsl #9
   18044:	andeq	r8, r1, ip, ror r4
   18048:	mov	r6, #100	; 0x64
   1804c:	mla	r3, r3, r6, ip
   18050:	mov	r6, #5
   18054:	str	r6, [sp, #100]	; 0x64
   18058:	mov	r4, #1
   1805c:	mov	r6, #0
   18060:	mov	lr, r8
   18064:	b	186c8 <__assert_fail@plt+0x70c4>
   18068:	mov	r5, #0
   1806c:	mov	r1, #89	; 0x59
   18070:	movw	r2, #9504	; 0x2520
   18074:	cmp	r0, #0
   18078:	ldr	r3, [sp, #88]	; 0x58
   1807c:	str	lr, [sp, #92]	; 0x5c
   18080:	strh	r2, [fp, #-53]	; 0xffffffcb
   18084:	ldr	r2, [sp, #84]	; 0x54
   18088:	ldrne	r2, [sp, #68]	; 0x44
   1808c:	strbne	r0, [fp, #-51]	; 0xffffffcd
   18090:	mov	r0, #0
   18094:	strb	r0, [r2, #1]
   18098:	strb	r1, [r2]
   1809c:	add	r0, sp, #112	; 0x70
   180a0:	sub	r2, fp, #53	; 0x35
   180a4:	mov	r1, #1024	; 0x400
   180a8:	bl	11448 <strftime@plt>
   180ac:	cmp	r0, #0
   180b0:	beq	1811c <__assert_fail@plt+0x6b18>
   180b4:	subs	r4, r9, #45	; 0x2d
   180b8:	mov	r6, r0
   180bc:	sub	r8, r0, #1
   180c0:	ldr	lr, [sp, #92]	; 0x5c
   180c4:	ldr	r0, [sp, #104]	; 0x68
   180c8:	movne	r4, r7
   180cc:	cmp	r7, #0
   180d0:	mov	r7, r8
   180d4:	movwmi	r4, #0
   180d8:	cmp	r4, r8
   180dc:	movhi	r7, r4
   180e0:	sub	r0, r0, lr
   180e4:	cmp	r7, r0
   180e8:	bcs	18744 <__assert_fail@plt+0x7140>
   180ec:	ldr	r0, [sp, #108]	; 0x6c
   180f0:	cmp	r0, #0
   180f4:	beq	18138 <__assert_fail@plt+0x6b34>
   180f8:	cmp	r4, r8
   180fc:	mov	r1, r0
   18100:	bls	18160 <__assert_fail@plt+0x6b5c>
   18104:	cmp	r9, #48	; 0x30
   18108:	sub	r2, r4, r8
   1810c:	cmpne	r9, #43	; 0x2b
   18110:	bne	1814c <__assert_fail@plt+0x6b48>
   18114:	mov	r1, #48	; 0x30
   18118:	b	18150 <__assert_fail@plt+0x6b4c>
   1811c:	ldr	lr, [sp, #92]	; 0x5c
   18120:	ldr	r8, [sp, #108]	; 0x6c
   18124:	movw	ip, #52428	; 0xcccc
   18128:	mov	r4, #-2147483648	; 0x80000000
   1812c:	mov	r6, sl
   18130:	movt	ip, #3276	; 0xccc
   18134:	b	16c70 <__assert_fail@plt+0x566c>
   18138:	movw	ip, #52428	; 0xcccc
   1813c:	mov	r8, #0
   18140:	mov	r4, #-2147483648	; 0x80000000
   18144:	movt	ip, #3276	; 0xccc
   18148:	b	182d8 <__assert_fail@plt+0x6cd4>
   1814c:	mov	r1, #32
   18150:	mov	r9, r2
   18154:	bl	11508 <memset@plt>
   18158:	ldr	r0, [sp, #108]	; 0x6c
   1815c:	add	r1, r0, r9
   18160:	tst	r5, #1
   18164:	str	r1, [sp, #100]	; 0x64
   18168:	beq	18208 <__assert_fail@plt+0x6c04>
   1816c:	movw	ip, #52428	; 0xcccc
   18170:	cmp	r8, #0
   18174:	movt	ip, #3276	; 0xccc
   18178:	beq	182c8 <__assert_fail@plt+0x6cc4>
   1817c:	bl	11460 <__ctype_tolower_loc@plt>
   18180:	tst	r8, #1
   18184:	mov	r1, r8
   18188:	beq	181a8 <__assert_fail@plt+0x6ba4>
   1818c:	add	r1, sp, #112	; 0x70
   18190:	ldr	r2, [r0]
   18194:	ldr	r3, [sp, #100]	; 0x64
   18198:	ldrb	r1, [r1, r8]
   1819c:	ldr	r2, [r2, r1, lsl #2]
   181a0:	sub	r1, r6, #2
   181a4:	strb	r2, [r3, r1]
   181a8:	ldr	r2, [sp, #108]	; 0x6c
   181ac:	movw	ip, #52428	; 0xcccc
   181b0:	cmp	r6, #2
   181b4:	add	lr, sp, #112	; 0x70
   181b8:	movt	ip, #3276	; 0xccc
   181bc:	beq	182c8 <__assert_fail@plt+0x6cc4>
   181c0:	cmp	r4, r8
   181c4:	mov	r3, r2
   181c8:	movls	r4, r8
   181cc:	sub	r2, r4, r6
   181d0:	add	r5, r3, r2
   181d4:	ldrb	r3, [lr, r1]
   181d8:	ldr	r6, [r0]
   181dc:	mov	r2, r5
   181e0:	ldr	r3, [r6, r3, lsl #2]
   181e4:	strb	r3, [r2, r1]!
   181e8:	add	r3, lr, r1
   181ec:	subs	r1, r1, #2
   181f0:	ldrb	r3, [r3, #-1]
   181f4:	ldr	r6, [r0]
   181f8:	ldr	r3, [r6, r3, lsl #2]
   181fc:	strb	r3, [r2, #-1]
   18200:	bne	181d4 <__assert_fail@plt+0x6bd0>
   18204:	b	182c8 <__assert_fail@plt+0x6cc4>
   18208:	ldr	r0, [sp, #96]	; 0x60
   1820c:	tst	r0, #1
   18210:	beq	182b0 <__assert_fail@plt+0x6cac>
   18214:	movw	ip, #52428	; 0xcccc
   18218:	cmp	r8, #0
   1821c:	movt	ip, #3276	; 0xccc
   18220:	beq	182c8 <__assert_fail@plt+0x6cc4>
   18224:	bl	1146c <__ctype_toupper_loc@plt>
   18228:	tst	r8, #1
   1822c:	mov	r1, r8
   18230:	beq	18250 <__assert_fail@plt+0x6c4c>
   18234:	add	r1, sp, #112	; 0x70
   18238:	ldr	r2, [r0]
   1823c:	ldr	r3, [sp, #100]	; 0x64
   18240:	ldrb	r1, [r1, r8]
   18244:	ldr	r2, [r2, r1, lsl #2]
   18248:	sub	r1, r6, #2
   1824c:	strb	r2, [r3, r1]
   18250:	ldr	r2, [sp, #108]	; 0x6c
   18254:	movw	ip, #52428	; 0xcccc
   18258:	cmp	r6, #2
   1825c:	add	lr, sp, #112	; 0x70
   18260:	movt	ip, #3276	; 0xccc
   18264:	beq	182c8 <__assert_fail@plt+0x6cc4>
   18268:	cmp	r4, r8
   1826c:	mov	r3, r2
   18270:	movls	r4, r8
   18274:	sub	r2, r4, r6
   18278:	add	r5, r3, r2
   1827c:	ldrb	r3, [lr, r1]
   18280:	ldr	r6, [r0]
   18284:	mov	r2, r5
   18288:	ldr	r3, [r6, r3, lsl #2]
   1828c:	strb	r3, [r2, r1]!
   18290:	add	r3, lr, r1
   18294:	subs	r1, r1, #2
   18298:	ldrb	r3, [r3, #-1]
   1829c:	ldr	r6, [r0]
   182a0:	ldr	r3, [r6, r3, lsl #2]
   182a4:	strb	r3, [r2, #-1]
   182a8:	bne	1827c <__assert_fail@plt+0x6c78>
   182ac:	b	182c8 <__assert_fail@plt+0x6cc4>
   182b0:	mov	r0, r1
   182b4:	ldr	r1, [sp, #48]	; 0x30
   182b8:	mov	r2, r8
   182bc:	bl	11358 <memcpy@plt>
   182c0:	movw	ip, #52428	; 0xcccc
   182c4:	movt	ip, #3276	; 0xccc
   182c8:	ldr	r0, [sp, #100]	; 0x64
   182cc:	ldr	lr, [sp, #92]	; 0x5c
   182d0:	mov	r4, #-2147483648	; 0x80000000
   182d4:	add	r8, r0, r8
   182d8:	add	lr, r7, lr
   182dc:	mov	r6, sl
   182e0:	b	16c70 <__assert_fail@plt+0x566c>
   182e4:	ldr	r9, [sp, #32]
   182e8:	ldr	r2, [sp, #96]	; 0x60
   182ec:	ldr	r1, [sp, #100]	; 0x64
   182f0:	tst	r1, #1
   182f4:	bne	18578 <__assert_fail@plt+0x6f74>
   182f8:	eor	r1, r1, #1
   182fc:	and	r1, r2, r1
   18300:	tst	r1, #1
   18304:	beq	18520 <__assert_fail@plt+0x6f1c>
   18308:	cmp	r4, #0
   1830c:	beq	185ec <__assert_fail@plt+0x6fe8>
   18310:	bl	1146c <__ctype_toupper_loc@plt>
   18314:	tst	r4, #1
   18318:	mov	r1, r4
   1831c:	beq	18338 <__assert_fail@plt+0x6d34>
   18320:	ldr	r2, [sp, #64]	; 0x40
   18324:	sub	r1, r4, #1
   18328:	ldr	r3, [r0]
   1832c:	ldrb	r2, [r2, r1]
   18330:	ldr	r2, [r3, r2, lsl #2]
   18334:	strb	r2, [r8, r1]
   18338:	movw	ip, #52428	; 0xcccc
   1833c:	cmp	r4, #1
   18340:	mov	lr, r7
   18344:	movt	ip, #3276	; 0xccc
   18348:	beq	185ec <__assert_fail@plt+0x6fe8>
   1834c:	add	r2, r9, r1
   18350:	ldr	r3, [r0]
   18354:	ldrb	r2, [r2, #1]
   18358:	ldr	r2, [r3, r2, lsl #2]
   1835c:	add	r3, r8, r1
   18360:	strb	r2, [r3, #-1]
   18364:	ldrb	r2, [r9, r1]
   18368:	ldr	r7, [r0]
   1836c:	subs	r1, r1, #2
   18370:	ldr	r2, [r7, r2, lsl #2]
   18374:	strb	r2, [r3, #-2]
   18378:	bne	1834c <__assert_fail@plt+0x6d48>
   1837c:	b	185ec <__assert_fail@plt+0x6fe8>
   18380:	mov	r0, r2
   18384:	mov	r1, #32
   18388:	mov	r2, r8
   1838c:	bl	11508 <memset@plt>
   18390:	ldr	r2, [sp, #108]	; 0x6c
   18394:	ldr	r3, [sp, #88]	; 0x58
   18398:	add	r2, r2, r8
   1839c:	ldr	r0, [fp, #20]
   183a0:	stm	sp, {r6, r9}
   183a4:	mov	r8, r2
   183a8:	mov	r1, r7
   183ac:	str	r4, [sp, #8]
   183b0:	str	r0, [sp, #12]
   183b4:	ldr	r0, [fp, #24]
   183b8:	str	r0, [sp, #16]
   183bc:	mov	r0, r2
   183c0:	ldr	r2, [sp, #100]	; 0x64
   183c4:	bl	16b6c <__assert_fail@plt+0x5568>
   183c8:	ldr	r0, [sp, #96]	; 0x60
   183cc:	ldr	lr, [sp, #92]	; 0x5c
   183d0:	movw	ip, #52428	; 0xcccc
   183d4:	mov	r4, #-2147483648	; 0x80000000
   183d8:	movt	ip, #3276	; 0xccc
   183dc:	add	r8, r8, r0
   183e0:	b	18708 <__assert_fail@plt+0x7104>
   183e4:	movw	r5, #63636	; 0xf894
   183e8:	movt	r5, #65535	; 0xffff
   183ec:	sub	r5, r5, r3
   183f0:	add	r3, r6, #100	; 0x64
   183f4:	cmp	lr, r5
   183f8:	ldr	lr, [sp, #92]	; 0x5c
   183fc:	rsblt	r3, r6, #0
   18400:	b	18430 <__assert_fail@plt+0x6e2c>
   18404:	cmp	r7, #6
   18408:	mov	r0, r7
   1840c:	movle	r0, #6
   18410:	sub	r4, r0, #6
   18414:	b	17374 <__assert_fail@plt+0x5d70>
   18418:	movw	r4, #63636	; 0xf894
   1841c:	str	r3, [sp, #100]	; 0x64
   18420:	add	r3, r5, #100	; 0x64
   18424:	movt	r4, #65535	; 0xffff
   18428:	cmp	r6, r4
   1842c:	rsblt	r3, r5, #0
   18430:	ldr	r6, [fp, #12]
   18434:	cmp	r9, #0
   18438:	mov	r4, #0
   1843c:	moveq	r9, r6
   18440:	mov	r6, #0
   18444:	cmp	r9, #43	; 0x2b
   18448:	bne	17b2c <__assert_fail@plt+0x6528>
   1844c:	ldr	r8, [sp, #100]	; 0x64
   18450:	mov	r4, #0
   18454:	movw	r5, #9999	; 0x270f
   18458:	mov	ip, #0
   1845c:	cmp	r8, r7
   18460:	movwlt	r4, #1
   18464:	cmp	r8, #2
   18468:	movweq	r5, #99	; 0x63
   1846c:	cmp	r5, r3
   18470:	movwcc	ip, #1
   18474:	orr	r4, r4, ip
   18478:	b	186c8 <__assert_fail@plt+0x70c4>
   1847c:	cmp	r4, #0
   18480:	beq	186a4 <__assert_fail@plt+0x70a0>
   18484:	movw	r6, #10000	; 0x2710
   18488:	mov	lr, r8
   1848c:	mla	r3, r3, r6, r4
   18490:	mov	r6, #100	; 0x64
   18494:	mov	r4, #1
   18498:	mla	r3, ip, r6, r3
   1849c:	mov	r6, #9
   184a0:	str	r6, [sp, #100]	; 0x64
   184a4:	mov	r6, #20
   184a8:	b	186c8 <__assert_fail@plt+0x70c4>
   184ac:	sub	r1, fp, #48	; 0x30
   184b0:	mov	r2, r4
   184b4:	mov	r5, lr
   184b8:	bl	11358 <memcpy@plt>
   184bc:	movw	ip, #52428	; 0xcccc
   184c0:	mov	lr, r5
   184c4:	movt	ip, #3276	; 0xccc
   184c8:	ldr	r0, [sp, #108]	; 0x6c
   184cc:	mov	r2, #0
   184d0:	add	r5, r0, r4
   184d4:	cmp	r9, #45	; 0x2d
   184d8:	subne	r0, r7, r4
   184dc:	bicne	r2, r0, r0, asr #31
   184e0:	sub	r0, r8, r4
   184e4:	cmp	r2, r0
   184e8:	bcs	18744 <__assert_fail@plt+0x7140>
   184ec:	cmp	r5, #0
   184f0:	beq	18518 <__assert_fail@plt+0x6f14>
   184f4:	cmp	r2, #0
   184f8:	beq	18518 <__assert_fail@plt+0x6f14>
   184fc:	uxtb	r0, r9
   18500:	cmp	r0, #48	; 0x30
   18504:	cmpne	r0, #43	; 0x2b
   18508:	bne	18670 <__assert_fail@plt+0x706c>
   1850c:	mov	r0, r5
   18510:	mov	r1, #48	; 0x30
   18514:	b	18678 <__assert_fail@plt+0x7074>
   18518:	mov	r8, r5
   1851c:	b	18698 <__assert_fail@plt+0x7094>
   18520:	ldr	r1, [sp, #64]	; 0x40
   18524:	mov	r0, r8
   18528:	mov	r2, r4
   1852c:	bl	11358 <memcpy@plt>
   18530:	movw	ip, #52428	; 0xcccc
   18534:	mov	lr, r7
   18538:	movt	ip, #3276	; 0xccc
   1853c:	b	185ec <__assert_fail@plt+0x6fe8>
   18540:	mov	r0, r8
   18544:	mov	r1, #32
   18548:	mov	r2, r5
   1854c:	bl	11508 <memset@plt>
   18550:	ldr	r8, [sp, #108]	; 0x6c
   18554:	ldr	r9, [sp, #32]
   18558:	ldr	r1, [sp, #100]	; 0x64
   1855c:	ldr	r2, [sp, #96]	; 0x60
   18560:	movw	ip, #52428	; 0xcccc
   18564:	mov	lr, r7
   18568:	movt	ip, #3276	; 0xccc
   1856c:	add	r8, r8, r5
   18570:	tst	r1, #1
   18574:	beq	182f8 <__assert_fail@plt+0x6cf4>
   18578:	cmp	r4, #0
   1857c:	beq	185ec <__assert_fail@plt+0x6fe8>
   18580:	bl	11460 <__ctype_tolower_loc@plt>
   18584:	tst	r4, #1
   18588:	mov	r1, r4
   1858c:	beq	185a8 <__assert_fail@plt+0x6fa4>
   18590:	ldr	r2, [sp, #64]	; 0x40
   18594:	sub	r1, r4, #1
   18598:	ldr	r3, [r0]
   1859c:	ldrb	r2, [r2, r1]
   185a0:	ldr	r2, [r3, r2, lsl #2]
   185a4:	strb	r2, [r8, r1]
   185a8:	movw	ip, #52428	; 0xcccc
   185ac:	cmp	r4, #1
   185b0:	mov	lr, r7
   185b4:	movt	ip, #3276	; 0xccc
   185b8:	beq	185ec <__assert_fail@plt+0x6fe8>
   185bc:	add	r2, r9, r1
   185c0:	ldr	r3, [r0]
   185c4:	ldrb	r2, [r2, #1]
   185c8:	ldr	r2, [r3, r2, lsl #2]
   185cc:	add	r3, r8, r1
   185d0:	strb	r2, [r3, #-1]
   185d4:	ldrb	r2, [r9, r1]
   185d8:	ldr	r7, [r0]
   185dc:	subs	r1, r1, #2
   185e0:	ldr	r2, [r7, r2, lsl #2]
   185e4:	strb	r2, [r3, #-2]
   185e8:	bne	185bc <__assert_fail@plt+0x6fb8>
   185ec:	add	r8, r8, r4
   185f0:	add	lr, r6, lr
   185f4:	mov	r4, #-2147483648	; 0x80000000
   185f8:	mov	r6, sl
   185fc:	b	16c70 <__assert_fail@plt+0x566c>
   18600:	mov	r0, r8
   18604:	mov	r1, #32
   18608:	mov	r2, r4
   1860c:	mov	r6, lr
   18610:	bl	11508 <memset@plt>
   18614:	ldr	r8, [sp, #108]	; 0x6c
   18618:	movw	ip, #52428	; 0xcccc
   1861c:	mov	lr, r6
   18620:	movt	ip, #3276	; 0xccc
   18624:	add	r8, r8, r4
   18628:	mov	r4, #-2147483648	; 0x80000000
   1862c:	mov	r0, #10
   18630:	strb	r0, [r8], #1
   18634:	b	18708 <__assert_fail@plt+0x7104>
   18638:	mov	r0, r8
   1863c:	mov	r1, #32
   18640:	mov	r2, r4
   18644:	mov	r6, lr
   18648:	bl	11508 <memset@plt>
   1864c:	ldr	r8, [sp, #108]	; 0x6c
   18650:	movw	ip, #52428	; 0xcccc
   18654:	mov	lr, r6
   18658:	movt	ip, #3276	; 0xccc
   1865c:	add	r8, r8, r4
   18660:	mov	r4, #-2147483648	; 0x80000000
   18664:	mov	r0, #9
   18668:	strb	r0, [r8], #1
   1866c:	b	18708 <__assert_fail@plt+0x7104>
   18670:	mov	r0, r5
   18674:	mov	r1, #32
   18678:	mov	r6, lr
   1867c:	mov	r7, r2
   18680:	bl	11508 <memset@plt>
   18684:	movw	ip, #52428	; 0xcccc
   18688:	mov	r2, r7
   1868c:	mov	lr, r6
   18690:	add	r8, r5, r7
   18694:	movt	ip, #3276	; 0xccc
   18698:	add	r0, r2, lr
   1869c:	add	lr, r0, r4
   186a0:	b	17a0c <__assert_fail@plt+0x6408>
   186a4:	cmp	ip, #0
   186a8:	beq	18714 <__assert_fail@plt+0x7110>
   186ac:	mov	r6, #100	; 0x64
   186b0:	mov	r4, #1
   186b4:	mov	lr, r8
   186b8:	mla	r3, r3, r6, ip
   186bc:	mov	r6, #6
   186c0:	str	r6, [sp, #100]	; 0x64
   186c4:	mov	r6, #4
   186c8:	movw	ip, #52428	; 0xcccc
   186cc:	movt	ip, #3276	; 0xccc
   186d0:	b	17b2c <__assert_fail@plt+0x6528>
   186d4:	mov	r0, r8
   186d8:	mov	r1, #32
   186dc:	mov	r2, r4
   186e0:	mov	r6, lr
   186e4:	bl	11508 <memset@plt>
   186e8:	ldr	r8, [sp, #108]	; 0x6c
   186ec:	ldrb	r1, [sl]
   186f0:	movw	ip, #52428	; 0xcccc
   186f4:	mov	lr, r6
   186f8:	movt	ip, #3276	; 0xccc
   186fc:	add	r8, r8, r4
   18700:	mov	r4, #-2147483648	; 0x80000000
   18704:	strb	r1, [r8], #1
   18708:	add	lr, r5, lr
   1870c:	mov	r6, sl
   18710:	b	16c70 <__assert_fail@plt+0x566c>
   18714:	mov	r6, #3
   18718:	b	18054 <__assert_fail@plt+0x6a50>
   1871c:	mov	lr, #0
   18720:	ldr	r0, [sp, #104]	; 0x68
   18724:	ldr	r1, [sp, #72]	; 0x48
   18728:	cmp	r0, #0
   1872c:	cmpne	r8, #0
   18730:	movne	r0, #0
   18734:	strbne	r0, [r8]
   18738:	ldr	r0, [sp, #76]	; 0x4c
   1873c:	str	r1, [r0]
   18740:	b	18754 <__assert_fail@plt+0x7150>
   18744:	mov	r0, #34	; 0x22
   18748:	ldr	r1, [sp, #76]	; 0x4c
   1874c:	mov	lr, #0
   18750:	str	r0, [r1]
   18754:	mov	r0, lr
   18758:	sub	sp, fp, #28
   1875c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18760:	mov	r0, #75	; 0x4b
   18764:	b	18748 <__assert_fail@plt+0x7144>
   18768:	push	{r4, r5, fp, lr}
   1876c:	add	fp, sp, #8
   18770:	cmp	r0, #0
   18774:	beq	18808 <__assert_fail@plt+0x7204>
   18778:	mov	r1, #47	; 0x2f
   1877c:	mov	r4, r0
   18780:	bl	11580 <strrchr@plt>
   18784:	cmp	r0, #0
   18788:	mov	r5, r4
   1878c:	addne	r5, r0, #1
   18790:	sub	r0, r5, r4
   18794:	cmp	r0, #7
   18798:	blt	187ec <__assert_fail@plt+0x71e8>
   1879c:	movw	r1, #2309	; 0x905
   187a0:	sub	r0, r5, #7
   187a4:	mov	r2, #7
   187a8:	movt	r1, #2
   187ac:	bl	115e0 <strncmp@plt>
   187b0:	cmp	r0, #0
   187b4:	bne	187ec <__assert_fail@plt+0x71e8>
   187b8:	movw	r1, #2317	; 0x90d
   187bc:	mov	r0, r5
   187c0:	mov	r2, #3
   187c4:	movt	r1, #2
   187c8:	bl	115e0 <strncmp@plt>
   187cc:	cmp	r0, #0
   187d0:	beq	187dc <__assert_fail@plt+0x71d8>
   187d4:	mov	r4, r5
   187d8:	b	187ec <__assert_fail@plt+0x71e8>
   187dc:	movw	r0, #4536	; 0x11b8
   187e0:	add	r4, r5, #3
   187e4:	movt	r0, #3
   187e8:	str	r4, [r0]
   187ec:	movw	r0, #4540	; 0x11bc
   187f0:	movt	r0, #3
   187f4:	str	r4, [r0]
   187f8:	movw	r0, #4768	; 0x12a0
   187fc:	movt	r0, #3
   18800:	str	r4, [r0]
   18804:	pop	{r4, r5, fp, pc}
   18808:	movw	r0, #4552	; 0x11c8
   1880c:	mov	r1, #55	; 0x37
   18810:	mov	r2, #1
   18814:	movt	r0, #3
   18818:	ldr	r3, [r0]
   1881c:	movw	r0, #2253	; 0x8cd
   18820:	movt	r0, #2
   18824:	bl	113dc <fwrite@plt>
   18828:	bl	115ec <abort@plt>
   1882c:	push	{r4, r5, r6, sl, fp, lr}
   18830:	add	fp, sp, #16
   18834:	mov	r4, r0
   18838:	movw	r0, #4776	; 0x12a8
   1883c:	movt	r0, #3
   18840:	cmp	r4, #0
   18844:	moveq	r4, r0
   18848:	bl	114e4 <__errno_location@plt>
   1884c:	ldr	r6, [r0]
   18850:	mov	r5, r0
   18854:	mov	r0, r4
   18858:	mov	r1, #48	; 0x30
   1885c:	bl	1b6e0 <__assert_fail@plt+0xa0dc>
   18860:	str	r6, [r5]
   18864:	pop	{r4, r5, r6, sl, fp, pc}
   18868:	movw	r1, #4776	; 0x12a8
   1886c:	cmp	r0, #0
   18870:	movt	r1, #3
   18874:	movne	r1, r0
   18878:	ldr	r0, [r1]
   1887c:	bx	lr
   18880:	movw	r2, #4776	; 0x12a8
   18884:	cmp	r0, #0
   18888:	movt	r2, #3
   1888c:	movne	r2, r0
   18890:	str	r1, [r2]
   18894:	bx	lr
   18898:	movw	r3, #4776	; 0x12a8
   1889c:	cmp	r0, #0
   188a0:	and	r2, r2, #1
   188a4:	movt	r3, #3
   188a8:	movne	r3, r0
   188ac:	ubfx	r0, r1, #5, #3
   188b0:	and	r1, r1, #31
   188b4:	add	ip, r3, r0, lsl #2
   188b8:	mov	r0, #1
   188bc:	ldr	r3, [ip, #8]
   188c0:	and	r0, r0, r3, lsr r1
   188c4:	eor	r2, r0, r2
   188c8:	eor	r1, r3, r2, lsl r1
   188cc:	str	r1, [ip, #8]
   188d0:	bx	lr
   188d4:	movw	r2, #4776	; 0x12a8
   188d8:	cmp	r0, #0
   188dc:	movt	r2, #3
   188e0:	movne	r2, r0
   188e4:	ldr	r0, [r2, #4]
   188e8:	str	r1, [r2, #4]
   188ec:	bx	lr
   188f0:	push	{fp, lr}
   188f4:	mov	fp, sp
   188f8:	movw	r3, #4776	; 0x12a8
   188fc:	cmp	r0, #0
   18900:	movt	r3, #3
   18904:	movne	r3, r0
   18908:	cmp	r1, #0
   1890c:	mov	r0, #10
   18910:	cmpne	r2, #0
   18914:	str	r0, [r3]
   18918:	bne	18920 <__assert_fail@plt+0x731c>
   1891c:	bl	115ec <abort@plt>
   18920:	str	r1, [r3, #40]	; 0x28
   18924:	str	r2, [r3, #44]	; 0x2c
   18928:	pop	{fp, pc}
   1892c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18930:	add	fp, sp, #28
   18934:	sub	sp, sp, #20
   18938:	mov	r7, r0
   1893c:	ldr	r0, [fp, #8]
   18940:	movw	r5, #4776	; 0x12a8
   18944:	mov	r8, r3
   18948:	mov	r9, r2
   1894c:	mov	sl, r1
   18950:	movt	r5, #3
   18954:	cmp	r0, #0
   18958:	movne	r5, r0
   1895c:	bl	114e4 <__errno_location@plt>
   18960:	ldr	r2, [r5, #40]	; 0x28
   18964:	ldr	r3, [r5, #44]	; 0x2c
   18968:	mov	r4, r0
   1896c:	ldm	r5, {r0, r1}
   18970:	add	r5, r5, #8
   18974:	ldr	r6, [r4]
   18978:	stm	sp, {r0, r1, r5}
   1897c:	mov	r0, r7
   18980:	mov	r1, sl
   18984:	str	r2, [sp, #12]
   18988:	str	r3, [sp, #16]
   1898c:	mov	r2, r9
   18990:	mov	r3, r8
   18994:	bl	189a4 <__assert_fail@plt+0x73a0>
   18998:	str	r6, [r4]
   1899c:	sub	sp, fp, #28
   189a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189a8:	add	fp, sp, #28
   189ac:	sub	sp, sp, #156	; 0x9c
   189b0:	mov	r5, r0
   189b4:	add	r0, r2, #1
   189b8:	mov	r6, r1
   189bc:	mov	sl, r3
   189c0:	str	r2, [fp, #-80]	; 0xffffffb0
   189c4:	str	r0, [sp, #72]	; 0x48
   189c8:	ldr	r0, [fp, #12]
   189cc:	and	r1, r0, #1
   189d0:	str	r1, [sp, #36]	; 0x24
   189d4:	and	r1, r0, #4
   189d8:	str	r1, [sp, #32]
   189dc:	ubfx	r9, r0, #1, #1
   189e0:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   189e4:	str	r0, [sp, #40]	; 0x28
   189e8:	ldr	r0, [fp, #24]
   189ec:	ldr	r7, [fp, #8]
   189f0:	mov	r1, #0
   189f4:	str	r5, [fp, #-84]	; 0xffffffac
   189f8:	str	r1, [fp, #-56]	; 0xffffffc8
   189fc:	mov	r1, #0
   18a00:	str	r1, [sp, #60]	; 0x3c
   18a04:	mov	r1, #1
   18a08:	str	r1, [fp, #-48]	; 0xffffffd0
   18a0c:	str	r0, [sp, #80]	; 0x50
   18a10:	ldr	r0, [fp, #20]
   18a14:	str	r0, [sp, #76]	; 0x4c
   18a18:	mov	r0, #0
   18a1c:	str	r0, [sp, #56]	; 0x38
   18a20:	mov	r0, #0
   18a24:	str	r0, [fp, #-88]	; 0xffffffa8
   18a28:	mov	r0, #0
   18a2c:	str	r0, [fp, #-72]	; 0xffffffb8
   18a30:	mov	r0, #0
   18a34:	cmp	r7, #10
   18a38:	bhi	199cc <__assert_fail@plt+0x83c8>
   18a3c:	add	r1, pc, #24
   18a40:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18a44:	mov	r4, r6
   18a48:	mov	r8, #0
   18a4c:	mov	r2, #1
   18a50:	mov	r3, #0
   18a54:	mov	lr, sl
   18a58:	ldr	pc, [r1, r7, lsl #2]
   18a5c:	andeq	r8, r1, r0, lsr #22
   18a60:	andeq	r8, r1, r4, ror fp
   18a64:	andeq	r8, r1, r4, lsr fp
   18a68:	andeq	r8, r1, r8, lsl fp
   18a6c:	andeq	r8, r1, r8, ror #22
   18a70:	muleq	r1, ip, fp
   18a74:	andeq	r8, r1, r4, asr #22
   18a78:	andeq	r8, r1, r0, lsr #24
   18a7c:	andeq	r8, r1, r8, lsl #21
   18a80:	andeq	r8, r1, r8, lsl #21
   18a84:			; <UNDEFINED> instruction: 0x00018ab0
   18a88:	movw	r0, #2399	; 0x95f
   18a8c:	mov	r1, r7
   18a90:	movt	r0, #2
   18a94:	bl	1a3d4 <__assert_fail@plt+0x8dd0>
   18a98:	str	r0, [sp, #76]	; 0x4c
   18a9c:	movw	r0, #3532	; 0xdcc
   18aa0:	mov	r1, r7
   18aa4:	movt	r0, #2
   18aa8:	bl	1a3d4 <__assert_fail@plt+0x8dd0>
   18aac:	str	r0, [sp, #80]	; 0x50
   18ab0:	mov	r8, #0
   18ab4:	tst	r9, #1
   18ab8:	bne	18af0 <__assert_fail@plt+0x74ec>
   18abc:	ldr	r0, [sp, #76]	; 0x4c
   18ac0:	ldrb	r0, [r0]
   18ac4:	cmp	r0, #0
   18ac8:	beq	18af0 <__assert_fail@plt+0x74ec>
   18acc:	ldr	r1, [sp, #76]	; 0x4c
   18ad0:	mov	r8, #0
   18ad4:	add	r1, r1, #1
   18ad8:	cmp	r8, r4
   18adc:	strbcc	r0, [r5, r8]
   18ae0:	ldrb	r0, [r1, r8]
   18ae4:	add	r8, r8, #1
   18ae8:	cmp	r0, #0
   18aec:	bne	18ad8 <__assert_fail@plt+0x74d4>
   18af0:	ldr	r6, [sp, #80]	; 0x50
   18af4:	mov	r0, r6
   18af8:	bl	114b4 <strlen@plt>
   18afc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18b00:	str	r0, [fp, #-72]	; 0xffffffb8
   18b04:	str	r6, [fp, #-88]	; 0xffffffa8
   18b08:	mov	r2, #1
   18b0c:	mov	r3, r9
   18b10:	mov	lr, sl
   18b14:	b	18c20 <__assert_fail@plt+0x761c>
   18b18:	mov	r0, #1
   18b1c:	b	18b74 <__assert_fail@plt+0x7570>
   18b20:	mov	r7, #0
   18b24:	mov	r8, #0
   18b28:	mov	r2, r0
   18b2c:	mov	r3, #0
   18b30:	b	18c20 <__assert_fail@plt+0x761c>
   18b34:	tst	r9, #1
   18b38:	bne	18b74 <__assert_fail@plt+0x7570>
   18b3c:	mov	r2, r0
   18b40:	b	18bcc <__assert_fail@plt+0x75c8>
   18b44:	mov	r0, #1
   18b48:	mov	r8, #0
   18b4c:	mov	r7, #5
   18b50:	mov	r2, #1
   18b54:	str	r0, [fp, #-72]	; 0xffffffb8
   18b58:	movw	r0, #2397	; 0x95d
   18b5c:	movt	r0, #2
   18b60:	str	r0, [fp, #-88]	; 0xffffffa8
   18b64:	b	18b94 <__assert_fail@plt+0x7590>
   18b68:	mov	r2, #1
   18b6c:	tst	r9, #1
   18b70:	beq	18bcc <__assert_fail@plt+0x75c8>
   18b74:	mov	r1, #1
   18b78:	mov	r8, #0
   18b7c:	mov	r7, #2
   18b80:	mov	r2, r0
   18b84:	str	r1, [fp, #-72]	; 0xffffffb8
   18b88:	movw	r1, #3532	; 0xdcc
   18b8c:	movt	r1, #2
   18b90:	str	r1, [fp, #-88]	; 0xffffffa8
   18b94:	mov	r3, #1
   18b98:	b	18c20 <__assert_fail@plt+0x761c>
   18b9c:	tst	r9, #1
   18ba0:	beq	18bf0 <__assert_fail@plt+0x75ec>
   18ba4:	mov	r0, #1
   18ba8:	mov	r8, #0
   18bac:	mov	r2, #1
   18bb0:	mov	r3, #1
   18bb4:	mov	r7, #5
   18bb8:	str	r0, [fp, #-72]	; 0xffffffb8
   18bbc:	movw	r0, #2397	; 0x95d
   18bc0:	movt	r0, #2
   18bc4:	str	r0, [fp, #-88]	; 0xffffffa8
   18bc8:	b	18c20 <__assert_fail@plt+0x761c>
   18bcc:	cmp	r4, #0
   18bd0:	mov	r8, #1
   18bd4:	mov	r3, #0
   18bd8:	mov	r7, #2
   18bdc:	movne	r0, #39	; 0x27
   18be0:	strbne	r0, [r5]
   18be4:	movw	r0, #3532	; 0xdcc
   18be8:	movt	r0, #2
   18bec:	b	18c14 <__assert_fail@plt+0x7610>
   18bf0:	cmp	r4, #0
   18bf4:	mov	r8, #1
   18bf8:	mov	r2, #1
   18bfc:	mov	r7, #5
   18c00:	mov	r3, #0
   18c04:	movne	r0, #34	; 0x22
   18c08:	strbne	r0, [r5]
   18c0c:	movw	r0, #2397	; 0x95d
   18c10:	movt	r0, #2
   18c14:	str	r0, [fp, #-88]	; 0xffffffa8
   18c18:	mov	r0, #1
   18c1c:	str	r0, [fp, #-72]	; 0xffffffb8
   18c20:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18c24:	eor	r6, r3, #1
   18c28:	str	r7, [fp, #-68]	; 0xffffffbc
   18c2c:	str	r3, [fp, #-76]	; 0xffffffb4
   18c30:	str	r2, [sp, #84]	; 0x54
   18c34:	str	r6, [sp, #92]	; 0x5c
   18c38:	cmp	r0, #0
   18c3c:	movwne	r0, #1
   18c40:	and	r1, r0, r3
   18c44:	and	r1, r2, r1
   18c48:	str	r1, [sp, #48]	; 0x30
   18c4c:	sub	r1, r7, #2
   18c50:	clz	r1, r1
   18c54:	lsr	r1, r1, #5
   18c58:	and	r1, r1, r3
   18c5c:	str	r1, [sp, #64]	; 0x40
   18c60:	subs	r1, r7, #2
   18c64:	mov	r7, #0
   18c68:	movwne	r1, #1
   18c6c:	orr	r6, r1, r6
   18c70:	and	r1, r1, r2
   18c74:	and	r0, r0, r1
   18c78:	str	r6, [sp, #68]	; 0x44
   18c7c:	str	r0, [fp, #-60]	; 0xffffffc4
   18c80:	orr	r0, r1, r3
   18c84:	ldr	r1, [fp, #16]
   18c88:	eor	r0, r0, #1
   18c8c:	clz	r1, r1
   18c90:	lsr	r1, r1, #5
   18c94:	orr	r0, r1, r0
   18c98:	str	r0, [fp, #-64]	; 0xffffffc0
   18c9c:	eor	r0, r2, #1
   18ca0:	str	r0, [sp, #52]	; 0x34
   18ca4:	cmn	lr, #1
   18ca8:	beq	18cb8 <__assert_fail@plt+0x76b4>
   18cac:	cmp	r7, lr
   18cb0:	bne	18cc4 <__assert_fail@plt+0x76c0>
   18cb4:	b	1980c <__assert_fail@plt+0x8208>
   18cb8:	ldrb	r0, [ip, r7]
   18cbc:	cmp	r0, #0
   18cc0:	beq	19814 <__assert_fail@plt+0x8210>
   18cc4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18cc8:	mov	sl, #0
   18ccc:	cmp	r0, #0
   18cd0:	beq	18d08 <__assert_fail@plt+0x7704>
   18cd4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18cd8:	add	r5, r7, r0
   18cdc:	cmp	r0, #2
   18ce0:	bcc	18cfc <__assert_fail@plt+0x76f8>
   18ce4:	cmn	lr, #1
   18ce8:	bne	18cfc <__assert_fail@plt+0x76f8>
   18cec:	mov	r0, ip
   18cf0:	bl	114b4 <strlen@plt>
   18cf4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18cf8:	mov	lr, r0
   18cfc:	cmp	r5, lr
   18d00:	bls	18d10 <__assert_fail@plt+0x770c>
   18d04:	ldr	r5, [fp, #-84]	; 0xffffffac
   18d08:	mov	r0, #0
   18d0c:	b	18d5c <__assert_fail@plt+0x7758>
   18d10:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18d14:	ldr	r2, [fp, #-72]	; 0xffffffb8
   18d18:	add	r0, ip, r7
   18d1c:	mov	r6, r4
   18d20:	mov	r4, lr
   18d24:	bl	114a8 <bcmp@plt>
   18d28:	ldr	r2, [sp, #92]	; 0x5c
   18d2c:	cmp	r0, #0
   18d30:	ldr	r5, [fp, #-84]	; 0xffffffac
   18d34:	mov	r1, r0
   18d38:	movwne	r1, #1
   18d3c:	orr	r1, r1, r2
   18d40:	tst	r1, #1
   18d44:	beq	1989c <__assert_fail@plt+0x8298>
   18d48:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18d4c:	clz	r0, r0
   18d50:	mov	lr, r4
   18d54:	mov	r4, r6
   18d58:	lsr	r0, r0, #5
   18d5c:	str	r0, [fp, #-52]	; 0xffffffcc
   18d60:	ldrb	r6, [ip, r7]
   18d64:	cmp	r6, #126	; 0x7e
   18d68:	bhi	19298 <__assert_fail@plt+0x7c94>
   18d6c:	add	r3, pc, #16
   18d70:	mov	r9, #1
   18d74:	mov	r2, #110	; 0x6e
   18d78:	mov	r0, #97	; 0x61
   18d7c:	mov	r1, #0
   18d80:	ldr	pc, [r3, r6, lsl #2]
   18d84:	strdeq	r9, [r1], -r8
   18d88:	muleq	r1, r8, r2
   18d8c:	muleq	r1, r8, r2
   18d90:	muleq	r1, r8, r2
   18d94:	muleq	r1, r8, r2
   18d98:	muleq	r1, r8, r2
   18d9c:	muleq	r1, r8, r2
   18da0:	andeq	r9, r1, r4, ror r3
   18da4:	ldrdeq	r9, [r1], -r8
   18da8:	ldrdeq	r9, [r1], -r0
   18dac:	andeq	r9, r1, r4, ror #1
   18db0:	andeq	r9, r1, r0, lsl #4
   18db4:	andeq	r9, r1, r8, asr #1
   18db8:	andeq	r9, r1, r0, ror #1
   18dbc:	muleq	r1, r8, r2
   18dc0:	muleq	r1, r8, r2
   18dc4:	muleq	r1, r8, r2
   18dc8:	muleq	r1, r8, r2
   18dcc:	muleq	r1, r8, r2
   18dd0:	muleq	r1, r8, r2
   18dd4:	muleq	r1, r8, r2
   18dd8:	muleq	r1, r8, r2
   18ddc:	muleq	r1, r8, r2
   18de0:	muleq	r1, r8, r2
   18de4:	muleq	r1, r8, r2
   18de8:	muleq	r1, r8, r2
   18dec:	muleq	r1, r8, r2
   18df0:	muleq	r1, r8, r2
   18df4:	muleq	r1, r8, r2
   18df8:	muleq	r1, r8, r2
   18dfc:	muleq	r1, r8, r2
   18e00:	muleq	r1, r8, r2
   18e04:	andeq	r9, r1, ip, ror r0
   18e08:	andeq	r9, r1, r0, lsl #1
   18e0c:	andeq	r9, r1, r0, lsl #1
   18e10:	andeq	r9, r1, r8, rrx
   18e14:	andeq	r9, r1, r0, lsl #1
   18e18:	andeq	r8, r1, r0, lsl #31
   18e1c:	andeq	r9, r1, r0, lsl #1
   18e20:	andeq	r9, r1, r8, lsl #4
   18e24:	andeq	r9, r1, r0, lsl #1
   18e28:	andeq	r9, r1, r0, lsl #1
   18e2c:	andeq	r9, r1, r0, lsl #1
   18e30:	andeq	r8, r1, r0, lsl #31
   18e34:	andeq	r8, r1, r0, lsl #31
   18e38:	andeq	r8, r1, r0, lsl #31
   18e3c:	andeq	r8, r1, r0, lsl #31
   18e40:	andeq	r8, r1, r0, lsl #31
   18e44:	andeq	r8, r1, r0, lsl #31
   18e48:	andeq	r8, r1, r0, lsl #31
   18e4c:	andeq	r8, r1, r0, lsl #31
   18e50:	andeq	r8, r1, r0, lsl #31
   18e54:	andeq	r8, r1, r0, lsl #31
   18e58:	andeq	r8, r1, r0, lsl #31
   18e5c:	andeq	r8, r1, r0, lsl #31
   18e60:	andeq	r8, r1, r0, lsl #31
   18e64:	andeq	r8, r1, r0, lsl #31
   18e68:	andeq	r8, r1, r0, lsl #31
   18e6c:	andeq	r8, r1, r0, lsl #31
   18e70:	andeq	r9, r1, r0, lsl #1
   18e74:	andeq	r9, r1, r0, lsl #1
   18e78:	andeq	r9, r1, r0, lsl #1
   18e7c:	andeq	r9, r1, r0, lsl #1
   18e80:	ldrdeq	r9, [r1], -r0
   18e84:	muleq	r1, r8, r2
   18e88:	andeq	r8, r1, r0, lsl #31
   18e8c:	andeq	r8, r1, r0, lsl #31
   18e90:	andeq	r8, r1, r0, lsl #31
   18e94:	andeq	r8, r1, r0, lsl #31
   18e98:	andeq	r8, r1, r0, lsl #31
   18e9c:	andeq	r8, r1, r0, lsl #31
   18ea0:	andeq	r8, r1, r0, lsl #31
   18ea4:	andeq	r8, r1, r0, lsl #31
   18ea8:	andeq	r8, r1, r0, lsl #31
   18eac:	andeq	r8, r1, r0, lsl #31
   18eb0:	andeq	r8, r1, r0, lsl #31
   18eb4:	andeq	r8, r1, r0, lsl #31
   18eb8:	andeq	r8, r1, r0, lsl #31
   18ebc:	andeq	r8, r1, r0, lsl #31
   18ec0:	andeq	r8, r1, r0, lsl #31
   18ec4:	andeq	r8, r1, r0, lsl #31
   18ec8:	andeq	r8, r1, r0, lsl #31
   18ecc:	andeq	r8, r1, r0, lsl #31
   18ed0:	andeq	r8, r1, r0, lsl #31
   18ed4:	andeq	r8, r1, r0, lsl #31
   18ed8:	andeq	r8, r1, r0, lsl #31
   18edc:	andeq	r8, r1, r0, lsl #31
   18ee0:	andeq	r8, r1, r0, lsl #31
   18ee4:	andeq	r8, r1, r0, lsl #31
   18ee8:	andeq	r8, r1, r0, lsl #31
   18eec:	andeq	r8, r1, r0, lsl #31
   18ef0:	andeq	r9, r1, r0, lsl #1
   18ef4:	andeq	r9, r1, r8, lsr #1
   18ef8:	andeq	r8, r1, r0, lsl #31
   18efc:	andeq	r9, r1, r0, lsl #1
   18f00:	andeq	r8, r1, r0, lsl #31
   18f04:	andeq	r9, r1, r0, lsl #1
   18f08:	andeq	r8, r1, r0, lsl #31
   18f0c:	andeq	r8, r1, r0, lsl #31
   18f10:	andeq	r8, r1, r0, lsl #31
   18f14:	andeq	r8, r1, r0, lsl #31
   18f18:	andeq	r8, r1, r0, lsl #31
   18f1c:	andeq	r8, r1, r0, lsl #31
   18f20:	andeq	r8, r1, r0, lsl #31
   18f24:	andeq	r8, r1, r0, lsl #31
   18f28:	andeq	r8, r1, r0, lsl #31
   18f2c:	andeq	r8, r1, r0, lsl #31
   18f30:	andeq	r8, r1, r0, lsl #31
   18f34:	andeq	r8, r1, r0, lsl #31
   18f38:	andeq	r8, r1, r0, lsl #31
   18f3c:	andeq	r8, r1, r0, lsl #31
   18f40:	andeq	r8, r1, r0, lsl #31
   18f44:	andeq	r8, r1, r0, lsl #31
   18f48:	andeq	r8, r1, r0, lsl #31
   18f4c:	andeq	r8, r1, r0, lsl #31
   18f50:	andeq	r8, r1, r0, lsl #31
   18f54:	andeq	r8, r1, r0, lsl #31
   18f58:	andeq	r8, r1, r0, lsl #31
   18f5c:	andeq	r8, r1, r0, lsl #31
   18f60:	andeq	r8, r1, r0, lsl #31
   18f64:	andeq	r8, r1, r0, lsl #31
   18f68:	andeq	r8, r1, r0, lsl #31
   18f6c:	andeq	r8, r1, r0, lsl #31
   18f70:	andeq	r9, r1, ip, lsr r0
   18f74:	andeq	r9, r1, r0, lsl #1
   18f78:	andeq	r9, r1, ip, lsr r0
   18f7c:	andeq	r9, r1, r8, rrx
   18f80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18f84:	tst	r0, #1
   18f88:	bne	18fb4 <__assert_fail@plt+0x79b0>
   18f8c:	ldr	r1, [fp, #16]
   18f90:	ubfx	r0, r6, #5, #3
   18f94:	mov	r2, #1
   18f98:	ldr	r0, [r1, r0, lsl #2]
   18f9c:	and	r1, r6, #31
   18fa0:	tst	r0, r2, lsl r1
   18fa4:	beq	18fb4 <__assert_fail@plt+0x79b0>
   18fa8:	mov	r0, r6
   18fac:	mov	r1, r9
   18fb0:	b	18fc8 <__assert_fail@plt+0x79c4>
   18fb4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18fb8:	mov	r1, r9
   18fbc:	cmp	r0, #0
   18fc0:	mov	r0, r6
   18fc4:	beq	19308 <__assert_fail@plt+0x7d04>
   18fc8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18fcc:	tst	r2, #1
   18fd0:	bne	198d8 <__assert_fail@plt+0x82d4>
   18fd4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18fd8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18fdc:	subs	r2, r2, #2
   18fe0:	movwne	r2, #1
   18fe4:	orr	r2, r2, r3
   18fe8:	tst	r2, #1
   18fec:	bne	19028 <__assert_fail@plt+0x7a24>
   18ff0:	cmp	r8, r4
   18ff4:	movcc	r2, #39	; 0x27
   18ff8:	strbcc	r2, [r5, r8]
   18ffc:	add	r2, r8, #1
   19000:	cmp	r2, r4
   19004:	movcc	r3, #36	; 0x24
   19008:	strbcc	r3, [r5, r2]
   1900c:	add	r2, r8, #2
   19010:	add	r8, r8, #3
   19014:	cmp	r2, r4
   19018:	movcc	r3, #39	; 0x27
   1901c:	strbcc	r3, [r5, r2]
   19020:	mov	r2, #1
   19024:	str	r2, [fp, #-56]	; 0xffffffc8
   19028:	cmp	r8, r4
   1902c:	movcc	r2, #92	; 0x5c
   19030:	strbcc	r2, [r5, r8]
   19034:	add	r8, r8, #1
   19038:	b	1934c <__assert_fail@plt+0x7d48>
   1903c:	cmp	lr, #1
   19040:	beq	19068 <__assert_fail@plt+0x7a64>
   19044:	mov	r9, #0
   19048:	cmn	lr, #1
   1904c:	bne	19074 <__assert_fail@plt+0x7a70>
   19050:	ldrb	r0, [ip, #1]
   19054:	cmp	r0, #0
   19058:	beq	19068 <__assert_fail@plt+0x7a64>
   1905c:	mvn	lr, #0
   19060:	mov	sl, #0
   19064:	b	18f80 <__assert_fail@plt+0x797c>
   19068:	mov	r9, #0
   1906c:	cmp	r7, #0
   19070:	beq	1907c <__assert_fail@plt+0x7a78>
   19074:	mov	sl, #0
   19078:	b	18f80 <__assert_fail@plt+0x797c>
   1907c:	mov	r1, #1
   19080:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19084:	cmp	r0, #2
   19088:	bne	190a0 <__assert_fail@plt+0x7a9c>
   1908c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19090:	mov	r9, r1
   19094:	tst	r0, #1
   19098:	beq	18f80 <__assert_fail@plt+0x797c>
   1909c:	b	198d8 <__assert_fail@plt+0x82d4>
   190a0:	mov	r9, r1
   190a4:	b	18f80 <__assert_fail@plt+0x797c>
   190a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   190ac:	cmp	r0, #2
   190b0:	bne	192ec <__assert_fail@plt+0x7ce8>
   190b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   190b8:	tst	r0, #1
   190bc:	bne	198d8 <__assert_fail@plt+0x82d4>
   190c0:	mov	sl, #0
   190c4:	b	19300 <__assert_fail@plt+0x7cfc>
   190c8:	mov	r0, #102	; 0x66
   190cc:	b	19374 <__assert_fail@plt+0x7d70>
   190d0:	mov	r2, #116	; 0x74
   190d4:	b	190e4 <__assert_fail@plt+0x7ae0>
   190d8:	mov	r0, #98	; 0x62
   190dc:	b	19374 <__assert_fail@plt+0x7d70>
   190e0:	mov	r2, #114	; 0x72
   190e4:	ldr	r0, [sp, #68]	; 0x44
   190e8:	tst	r0, #1
   190ec:	mov	r0, r2
   190f0:	bne	19374 <__assert_fail@plt+0x7d70>
   190f4:	b	198d8 <__assert_fail@plt+0x82d4>
   190f8:	ldr	r0, [sp, #84]	; 0x54
   190fc:	tst	r0, #1
   19100:	beq	19390 <__assert_fail@plt+0x7d8c>
   19104:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19108:	tst	r0, #1
   1910c:	bne	199c4 <__assert_fail@plt+0x83c0>
   19110:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19114:	ldr	r1, [fp, #-56]	; 0xffffffc8
   19118:	subs	r0, r0, #2
   1911c:	movwne	r0, #1
   19120:	orr	r0, r0, r1
   19124:	tst	r0, #1
   19128:	bne	19164 <__assert_fail@plt+0x7b60>
   1912c:	cmp	r8, r4
   19130:	movcc	r0, #39	; 0x27
   19134:	strbcc	r0, [r5, r8]
   19138:	add	r0, r8, #1
   1913c:	cmp	r0, r4
   19140:	movcc	r1, #36	; 0x24
   19144:	strbcc	r1, [r5, r0]
   19148:	add	r0, r8, #2
   1914c:	add	r8, r8, #3
   19150:	cmp	r0, r4
   19154:	movcc	r1, #39	; 0x27
   19158:	strbcc	r1, [r5, r0]
   1915c:	mov	r0, #1
   19160:	str	r0, [fp, #-56]	; 0xffffffc8
   19164:	ldr	r1, [fp, #-68]	; 0xffffffbc
   19168:	cmp	r8, r4
   1916c:	mov	r9, #0
   19170:	mov	sl, #1
   19174:	mov	r6, #48	; 0x30
   19178:	movcc	r0, #92	; 0x5c
   1917c:	strbcc	r0, [r5, r8]
   19180:	add	r0, r8, #1
   19184:	cmp	r1, #2
   19188:	beq	19558 <__assert_fail@plt+0x7f54>
   1918c:	add	r1, r7, #1
   19190:	cmp	r1, lr
   19194:	bcs	19558 <__assert_fail@plt+0x7f54>
   19198:	ldrb	r1, [ip, r1]
   1919c:	sub	r1, r1, #48	; 0x30
   191a0:	uxtb	r1, r1
   191a4:	cmp	r1, #9
   191a8:	bhi	19558 <__assert_fail@plt+0x7f54>
   191ac:	cmp	r0, r4
   191b0:	movcc	r1, #48	; 0x30
   191b4:	strbcc	r1, [r5, r0]
   191b8:	add	r0, r8, #2
   191bc:	add	r8, r8, #3
   191c0:	cmp	r0, r4
   191c4:	movcc	r1, #48	; 0x30
   191c8:	strbcc	r1, [r5, r0]
   191cc:	b	18f80 <__assert_fail@plt+0x797c>
   191d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   191d4:	mov	sl, #0
   191d8:	mov	r6, #63	; 0x3f
   191dc:	cmp	r0, #5
   191e0:	beq	19560 <__assert_fail@plt+0x7f5c>
   191e4:	cmp	r0, #2
   191e8:	bne	19608 <__assert_fail@plt+0x8004>
   191ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   191f0:	mov	r9, #0
   191f4:	tst	r0, #1
   191f8:	beq	18f80 <__assert_fail@plt+0x797c>
   191fc:	b	198d8 <__assert_fail@plt+0x82d4>
   19200:	mov	r0, #118	; 0x76
   19204:	b	19374 <__assert_fail@plt+0x7d70>
   19208:	mov	r0, #1
   1920c:	mov	r6, #39	; 0x27
   19210:	str	r0, [sp, #60]	; 0x3c
   19214:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19218:	cmp	r0, #2
   1921c:	bne	193ac <__assert_fail@plt+0x7da8>
   19220:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19224:	tst	r0, #1
   19228:	bne	198d8 <__assert_fail@plt+0x82d4>
   1922c:	ldr	r2, [sp, #56]	; 0x38
   19230:	clz	r1, r4
   19234:	mov	sl, #0
   19238:	mov	r9, #1
   1923c:	lsr	r1, r1, #5
   19240:	cmp	r2, #0
   19244:	mov	r0, r2
   19248:	movwne	r0, #1
   1924c:	orrs	r0, r0, r1
   19250:	moveq	r2, r4
   19254:	moveq	r4, r0
   19258:	cmp	r8, r4
   1925c:	str	r2, [sp, #56]	; 0x38
   19260:	movcc	r0, #39	; 0x27
   19264:	strbcc	r0, [r5, r8]
   19268:	add	r0, r8, #1
   1926c:	cmp	r0, r4
   19270:	movcc	r1, #92	; 0x5c
   19274:	strbcc	r1, [r5, r0]
   19278:	add	r0, r8, #2
   1927c:	add	r8, r8, #3
   19280:	cmp	r0, r4
   19284:	movcc	r1, #39	; 0x27
   19288:	strbcc	r1, [r5, r0]
   1928c:	mov	r0, #0
   19290:	str	r0, [fp, #-56]	; 0xffffffc8
   19294:	b	18f80 <__assert_fail@plt+0x797c>
   19298:	ldr	r0, [sp, #40]	; 0x28
   1929c:	str	r4, [sp, #88]	; 0x58
   192a0:	cmp	r0, #1
   192a4:	bne	193b4 <__assert_fail@plt+0x7db0>
   192a8:	str	lr, [sp, #28]
   192ac:	bl	11490 <__ctype_b_loc@plt>
   192b0:	ldr	r0, [r0]
   192b4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   192b8:	mov	r2, #1
   192bc:	add	r0, r0, r6, lsl #1
   192c0:	ldrb	r0, [r0, #1]
   192c4:	ubfx	r9, r0, #6, #1
   192c8:	ldr	r0, [sp, #52]	; 0x34
   192cc:	cmp	r2, #1
   192d0:	orr	r0, r9, r0
   192d4:	bhi	19610 <__assert_fail@plt+0x800c>
   192d8:	tst	r0, #1
   192dc:	beq	19610 <__assert_fail@plt+0x800c>
   192e0:	ldr	lr, [sp, #28]
   192e4:	ldr	r4, [sp, #88]	; 0x58
   192e8:	b	18f80 <__assert_fail@plt+0x797c>
   192ec:	ldr	r1, [sp, #48]	; 0x30
   192f0:	mov	sl, #0
   192f4:	mov	r0, #92	; 0x5c
   192f8:	cmp	r1, #0
   192fc:	beq	19374 <__assert_fail@plt+0x7d70>
   19300:	mov	r6, #92	; 0x5c
   19304:	mov	r9, #0
   19308:	cmp	sl, #0
   1930c:	bne	19344 <__assert_fail@plt+0x7d40>
   19310:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19314:	tst	r0, #1
   19318:	beq	19344 <__assert_fail@plt+0x7d40>
   1931c:	cmp	r8, r4
   19320:	movcc	r0, #39	; 0x27
   19324:	strbcc	r0, [r5, r8]
   19328:	add	r0, r8, #1
   1932c:	add	r8, r8, #2
   19330:	cmp	r0, r4
   19334:	movcc	r1, #39	; 0x27
   19338:	strbcc	r1, [r5, r0]
   1933c:	mov	r0, #0
   19340:	str	r0, [fp, #-56]	; 0xffffffc8
   19344:	mov	r1, r9
   19348:	mov	r0, r6
   1934c:	cmp	r8, r4
   19350:	strbcc	r0, [r5, r8]
   19354:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19358:	add	r8, r8, #1
   1935c:	and	r0, r0, r1
   19360:	str	r0, [fp, #-48]	; 0xffffffd0
   19364:	add	r7, r7, #1
   19368:	cmn	lr, #1
   1936c:	bne	18cac <__assert_fail@plt+0x76a8>
   19370:	b	18cb8 <__assert_fail@plt+0x76b4>
   19374:	ldr	r1, [sp, #84]	; 0x54
   19378:	mov	sl, #0
   1937c:	mov	r9, #0
   19380:	tst	r1, #1
   19384:	mov	r1, #0
   19388:	beq	18f80 <__assert_fail@plt+0x797c>
   1938c:	b	18fc8 <__assert_fail@plt+0x79c4>
   19390:	ldr	r0, [sp, #36]	; 0x24
   19394:	mov	r6, #0
   19398:	mov	sl, #0
   1939c:	mov	r9, #0
   193a0:	cmp	r0, #0
   193a4:	beq	18f80 <__assert_fail@plt+0x797c>
   193a8:	b	19364 <__assert_fail@plt+0x7d60>
   193ac:	mov	r9, #1
   193b0:	b	18f80 <__assert_fail@plt+0x797c>
   193b4:	mov	r0, #0
   193b8:	cmn	lr, #1
   193bc:	sub	r4, fp, #40	; 0x28
   193c0:	str	r0, [fp, #-36]	; 0xffffffdc
   193c4:	str	r0, [fp, #-40]	; 0xffffffd8
   193c8:	bne	193dc <__assert_fail@plt+0x7dd8>
   193cc:	mov	r0, ip
   193d0:	bl	114b4 <strlen@plt>
   193d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   193d8:	mov	lr, r0
   193dc:	ldr	r0, [sp, #72]	; 0x48
   193e0:	mov	r9, #1
   193e4:	mov	r2, #0
   193e8:	str	lr, [sp, #28]
   193ec:	add	r0, r0, r7
   193f0:	str	r0, [sp, #20]
   193f4:	b	19438 <__assert_fail@plt+0x7e34>
   193f8:	ldr	r5, [sp, #44]	; 0x2c
   193fc:	add	r5, r0, r5
   19400:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19404:	bl	113b8 <iswprint@plt>
   19408:	cmp	r0, #0
   1940c:	sub	r4, fp, #40	; 0x28
   19410:	movwne	r0, #1
   19414:	and	r9, r9, r0
   19418:	mov	r0, r4
   1941c:	bl	11370 <mbsinit@plt>
   19420:	mov	r2, r5
   19424:	ldr	lr, [sp, #28]
   19428:	ldr	r5, [fp, #-84]	; 0xffffffac
   1942c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19430:	cmp	r0, #0
   19434:	bne	192c8 <__assert_fail@plt+0x7cc4>
   19438:	add	r0, r2, r7
   1943c:	str	r2, [sp, #44]	; 0x2c
   19440:	mov	r3, r4
   19444:	add	r1, ip, r0
   19448:	str	r0, [sp, #24]
   1944c:	sub	r2, lr, r0
   19450:	sub	r0, fp, #44	; 0x2c
   19454:	bl	1edfc <__assert_fail@plt+0xd7f8>
   19458:	cmp	r0, #0
   1945c:	beq	19800 <__assert_fail@plt+0x81fc>
   19460:	cmn	r0, #1
   19464:	beq	197bc <__assert_fail@plt+0x81b8>
   19468:	ldr	lr, [sp, #28]
   1946c:	cmn	r0, #2
   19470:	beq	197c4 <__assert_fail@plt+0x81c0>
   19474:	ldr	r2, [sp, #64]	; 0x40
   19478:	ldr	r4, [sp, #88]	; 0x58
   1947c:	ldr	ip, [sp, #84]	; 0x54
   19480:	cmp	r0, #2
   19484:	mov	r1, #0
   19488:	movwcc	r1, #1
   1948c:	eor	r2, r2, #1
   19490:	orrs	r1, r2, r1
   19494:	bne	193f8 <__assert_fail@plt+0x7df4>
   19498:	ldr	r1, [sp, #44]	; 0x2c
   1949c:	ldr	r2, [sp, #20]
   194a0:	add	r1, r2, r1
   194a4:	sub	r2, r0, #1
   194a8:	b	194b8 <__assert_fail@plt+0x7eb4>
   194ac:	add	r1, r1, #1
   194b0:	subs	r2, r2, #1
   194b4:	beq	193f8 <__assert_fail@plt+0x7df4>
   194b8:	ldrb	r3, [r1]
   194bc:	sub	r3, r3, #91	; 0x5b
   194c0:	cmp	r3, #33	; 0x21
   194c4:	bhi	194ac <__assert_fail@plt+0x7ea8>
   194c8:	add	r5, pc, #0
   194cc:	ldr	pc, [r5, r3, lsl #2]
   194d0:			; <UNDEFINED> instruction: 0x000198b4
   194d4:			; <UNDEFINED> instruction: 0x000198b4
   194d8:	andeq	r9, r1, ip, lsr #9
   194dc:			; <UNDEFINED> instruction: 0x000198b4
   194e0:	andeq	r9, r1, ip, lsr #9
   194e4:			; <UNDEFINED> instruction: 0x000198b4
   194e8:	andeq	r9, r1, ip, lsr #9
   194ec:	andeq	r9, r1, ip, lsr #9
   194f0:	andeq	r9, r1, ip, lsr #9
   194f4:	andeq	r9, r1, ip, lsr #9
   194f8:	andeq	r9, r1, ip, lsr #9
   194fc:	andeq	r9, r1, ip, lsr #9
   19500:	andeq	r9, r1, ip, lsr #9
   19504:	andeq	r9, r1, ip, lsr #9
   19508:	andeq	r9, r1, ip, lsr #9
   1950c:	andeq	r9, r1, ip, lsr #9
   19510:	andeq	r9, r1, ip, lsr #9
   19514:	andeq	r9, r1, ip, lsr #9
   19518:	andeq	r9, r1, ip, lsr #9
   1951c:	andeq	r9, r1, ip, lsr #9
   19520:	andeq	r9, r1, ip, lsr #9
   19524:	andeq	r9, r1, ip, lsr #9
   19528:	andeq	r9, r1, ip, lsr #9
   1952c:	andeq	r9, r1, ip, lsr #9
   19530:	andeq	r9, r1, ip, lsr #9
   19534:	andeq	r9, r1, ip, lsr #9
   19538:	andeq	r9, r1, ip, lsr #9
   1953c:	andeq	r9, r1, ip, lsr #9
   19540:	andeq	r9, r1, ip, lsr #9
   19544:	andeq	r9, r1, ip, lsr #9
   19548:	andeq	r9, r1, ip, lsr #9
   1954c:	andeq	r9, r1, ip, lsr #9
   19550:	andeq	r9, r1, ip, lsr #9
   19554:			; <UNDEFINED> instruction: 0x000198b4
   19558:	mov	r8, r0
   1955c:	b	18f80 <__assert_fail@plt+0x797c>
   19560:	ldr	r0, [sp, #32]
   19564:	cmp	r0, #0
   19568:	beq	19608 <__assert_fail@plt+0x8004>
   1956c:	add	r0, r7, #2
   19570:	cmp	r0, lr
   19574:	bcs	19608 <__assert_fail@plt+0x8004>
   19578:	add	r1, r7, ip
   1957c:	ldrb	r1, [r1, #1]
   19580:	cmp	r1, #63	; 0x3f
   19584:	bne	19608 <__assert_fail@plt+0x8004>
   19588:	ldrb	r9, [ip, r0]
   1958c:	sub	r2, r9, #33	; 0x21
   19590:	cmp	r2, #29
   19594:	bhi	19608 <__assert_fail@plt+0x8004>
   19598:	movw	r1, #20929	; 0x51c1
   1959c:	mov	r3, #1
   195a0:	movt	r1, #14336	; 0x3800
   195a4:	tst	r1, r3, lsl r2
   195a8:	beq	19608 <__assert_fail@plt+0x8004>
   195ac:	ldr	r1, [fp, #-76]	; 0xffffffb4
   195b0:	tst	r1, #1
   195b4:	bne	198d8 <__assert_fail@plt+0x82d4>
   195b8:	cmp	r8, r4
   195bc:	add	r2, r8, #1
   195c0:	mov	r6, r9
   195c4:	mov	r7, r0
   195c8:	mov	r9, #0
   195cc:	movcc	r1, #63	; 0x3f
   195d0:	strbcc	r1, [r5, r8]
   195d4:	cmp	r2, r4
   195d8:	movcc	r1, #34	; 0x22
   195dc:	strbcc	r1, [r5, r2]
   195e0:	add	r2, r8, #2
   195e4:	cmp	r2, r4
   195e8:	movcc	r1, #34	; 0x22
   195ec:	strbcc	r1, [r5, r2]
   195f0:	add	r2, r8, #3
   195f4:	add	r8, r8, #4
   195f8:	cmp	r2, r4
   195fc:	movcc	r1, #63	; 0x3f
   19600:	strbcc	r1, [r5, r2]
   19604:	b	18f80 <__assert_fail@plt+0x797c>
   19608:	mov	r9, #0
   1960c:	b	18f80 <__assert_fail@plt+0x797c>
   19610:	ldr	lr, [sp, #28]
   19614:	ldr	r4, [fp, #-56]	; 0xffffffc8
   19618:	add	r1, r2, r7
   1961c:	mov	r2, #0
   19620:	str	r1, [sp, #44]	; 0x2c
   19624:	tst	r0, #1
   19628:	bne	19744 <__assert_fail@plt+0x8140>
   1962c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   19630:	tst	r1, #1
   19634:	bne	198d4 <__assert_fail@plt+0x82d0>
   19638:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1963c:	subs	r2, r1, #2
   19640:	movwne	r2, #1
   19644:	orr	r2, r2, r4
   19648:	tst	r2, #1
   1964c:	bne	19690 <__assert_fail@plt+0x808c>
   19650:	ldr	r1, [sp, #88]	; 0x58
   19654:	add	r2, r8, #1
   19658:	mov	r4, #1
   1965c:	cmp	r8, r1
   19660:	movcc	r1, #39	; 0x27
   19664:	strbcc	r1, [r5, r8]
   19668:	ldr	r1, [sp, #88]	; 0x58
   1966c:	cmp	r2, r1
   19670:	movcc	r1, #36	; 0x24
   19674:	strbcc	r1, [r5, r2]
   19678:	ldr	r1, [sp, #88]	; 0x58
   1967c:	add	r2, r8, #2
   19680:	add	r8, r8, #3
   19684:	cmp	r2, r1
   19688:	movcc	r1, #39	; 0x27
   1968c:	strbcc	r1, [r5, r2]
   19690:	ldr	r1, [sp, #88]	; 0x58
   19694:	add	r2, r8, #1
   19698:	cmp	r8, r1
   1969c:	movcc	r1, #92	; 0x5c
   196a0:	strbcc	r1, [r5, r8]
   196a4:	ldr	r1, [sp, #88]	; 0x58
   196a8:	cmp	r2, r1
   196ac:	bcs	196c0 <__assert_fail@plt+0x80bc>
   196b0:	uxtb	r3, r6
   196b4:	mov	r1, #48	; 0x30
   196b8:	orr	r3, r1, r3, lsr #6
   196bc:	strb	r3, [r5, r2]
   196c0:	ldr	r1, [sp, #88]	; 0x58
   196c4:	add	r2, r8, #2
   196c8:	add	r8, r8, #3
   196cc:	cmp	r2, r1
   196d0:	lsrcc	r3, r6, #3
   196d4:	movcc	r1, #6
   196d8:	bficc	r3, r1, #3, #29
   196dc:	mov	r1, #6
   196e0:	bfi	r6, r1, #3, #29
   196e4:	strbcc	r3, [r5, r2]
   196e8:	mov	r2, #1
   196ec:	b	1976c <__assert_fail@plt+0x8168>
   196f0:	ldr	r1, [sp, #88]	; 0x58
   196f4:	ldr	r5, [fp, #-84]	; 0xffffffac
   196f8:	ldr	r4, [sp, #88]	; 0x58
   196fc:	cmp	r8, r1
   19700:	movcc	r1, #39	; 0x27
   19704:	strbcc	r1, [r5, r8]
   19708:	add	r1, r8, #1
   1970c:	add	r8, r8, #2
   19710:	cmp	r1, r4
   19714:	movcc	r4, #39	; 0x27
   19718:	strbcc	r4, [r5, r1]
   1971c:	mov	r4, #0
   19720:	ldr	r1, [sp, #88]	; 0x58
   19724:	cmp	r8, r1
   19728:	ldr	r1, [sp, #72]	; 0x48
   1972c:	strbcc	r6, [r5, r8]
   19730:	add	r8, r8, #1
   19734:	ldrb	r6, [r1, r7]
   19738:	mov	r7, r3
   1973c:	tst	r0, #1
   19740:	beq	1962c <__assert_fail@plt+0x8028>
   19744:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19748:	tst	r1, #1
   1974c:	beq	19764 <__assert_fail@plt+0x8160>
   19750:	ldr	r1, [sp, #88]	; 0x58
   19754:	cmp	r8, r1
   19758:	movcc	r1, #92	; 0x5c
   1975c:	strbcc	r1, [r5, r8]
   19760:	add	r8, r8, #1
   19764:	mov	r1, #0
   19768:	str	r1, [fp, #-52]	; 0xffffffcc
   1976c:	ldr	r1, [sp, #44]	; 0x2c
   19770:	add	r3, r7, #1
   19774:	and	sl, r2, #1
   19778:	cmp	r1, r3
   1977c:	bls	197a0 <__assert_fail@plt+0x819c>
   19780:	cmp	sl, #0
   19784:	mvn	r5, r4
   19788:	movwne	sl, #1
   1978c:	orr	r5, r5, sl
   19790:	tst	r5, #1
   19794:	beq	196f0 <__assert_fail@plt+0x80ec>
   19798:	ldr	r5, [fp, #-84]	; 0xffffffac
   1979c:	b	19720 <__assert_fail@plt+0x811c>
   197a0:	str	r4, [fp, #-56]	; 0xffffffc8
   197a4:	ldr	r4, [sp, #88]	; 0x58
   197a8:	cmp	sl, #0
   197ac:	movwne	sl, #1
   197b0:	cmp	sl, #0
   197b4:	beq	19310 <__assert_fail@plt+0x7d0c>
   197b8:	b	19344 <__assert_fail@plt+0x7d40>
   197bc:	mov	r9, #0
   197c0:	b	19800 <__assert_fail@plt+0x81fc>
   197c4:	ldr	r0, [sp, #24]
   197c8:	mov	r9, #0
   197cc:	cmp	lr, r0
   197d0:	bls	19800 <__assert_fail@plt+0x81fc>
   197d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   197d8:	ldr	r2, [sp, #44]	; 0x2c
   197dc:	add	r0, ip, r7
   197e0:	ldrb	r1, [r0, r2]
   197e4:	cmp	r1, #0
   197e8:	beq	192c8 <__assert_fail@plt+0x7cc4>
   197ec:	add	r2, r2, #1
   197f0:	add	r1, r7, r2
   197f4:	cmp	r1, lr
   197f8:	bcc	197e0 <__assert_fail@plt+0x81dc>
   197fc:	b	192c8 <__assert_fail@plt+0x7cc4>
   19800:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19804:	ldr	r2, [sp, #44]	; 0x2c
   19808:	b	192c8 <__assert_fail@plt+0x7cc4>
   1980c:	mov	lr, r7
   19810:	b	19818 <__assert_fail@plt+0x8214>
   19814:	mvn	lr, #0
   19818:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1981c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19820:	eor	r0, r1, #2
   19824:	orr	r0, r0, r8
   19828:	clz	r0, r0
   1982c:	lsr	r0, r0, #5
   19830:	tst	r2, r0
   19834:	bne	198d8 <__assert_fail@plt+0x82d4>
   19838:	subs	r0, r1, #2
   1983c:	movwne	r0, #1
   19840:	orr	r0, r2, r0
   19844:	tst	r0, #1
   19848:	ldreq	r0, [sp, #60]	; 0x3c
   1984c:	eoreq	r0, r0, #1
   19850:	tsteq	r0, #1
   19854:	bne	1996c <__assert_fail@plt+0x8368>
   19858:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1985c:	mov	sl, lr
   19860:	tst	r0, #1
   19864:	bne	19938 <__assert_fail@plt+0x8334>
   19868:	ldr	r6, [sp, #56]	; 0x38
   1986c:	mov	r9, #0
   19870:	cmp	r6, #0
   19874:	beq	19964 <__assert_fail@plt+0x8360>
   19878:	ldr	r0, [sp, #84]	; 0x54
   1987c:	mov	r1, #0
   19880:	mov	r7, #2
   19884:	cmp	r4, #0
   19888:	str	r1, [fp, #-48]	; 0xffffffd0
   1988c:	mov	r1, #0
   19890:	str	r1, [fp, #-76]	; 0xffffffb4
   19894:	beq	18a34 <__assert_fail@plt+0x7430>
   19898:	b	1996c <__assert_fail@plt+0x8368>
   1989c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   198a0:	ldr	r1, [fp, #12]
   198a4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   198a8:	mov	lr, r4
   198ac:	mov	r4, r6
   198b0:	b	198f8 <__assert_fail@plt+0x82f4>
   198b4:	tst	ip, #1
   198b8:	ldr	r5, [fp, #-84]	; 0xffffffac
   198bc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   198c0:	ldr	r1, [fp, #12]
   198c4:	mov	r0, #2
   198c8:	movwne	r0, #4
   198cc:	mov	r2, r0
   198d0:	b	198f8 <__assert_fail@plt+0x82f4>
   198d4:	ldr	r4, [sp, #88]	; 0x58
   198d8:	ldr	r1, [sp, #84]	; 0x54
   198dc:	mov	r0, #2
   198e0:	tst	r1, #1
   198e4:	movwne	r0, #4
   198e8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   198ec:	ldr	r1, [fp, #12]
   198f0:	cmp	r2, #2
   198f4:	moveq	r2, r0
   198f8:	mov	r0, #0
   198fc:	bic	r1, r1, #2
   19900:	str	r2, [sp]
   19904:	mov	r2, ip
   19908:	mov	r3, lr
   1990c:	str	r0, [sp, #8]
   19910:	ldr	r0, [sp, #76]	; 0x4c
   19914:	str	r1, [sp, #4]
   19918:	mov	r1, r4
   1991c:	str	r0, [sp, #12]
   19920:	ldr	r0, [sp, #80]	; 0x50
   19924:	str	r0, [sp, #16]
   19928:	mov	r0, r5
   1992c:	bl	189a4 <__assert_fail@plt+0x73a0>
   19930:	mov	r8, r0
   19934:	b	199b8 <__assert_fail@plt+0x83b4>
   19938:	mov	r0, #5
   1993c:	ldr	r1, [sp, #56]	; 0x38
   19940:	ldr	r2, [fp, #-80]	; 0xffffffb0
   19944:	mov	r3, sl
   19948:	str	r0, [sp]
   1994c:	ldr	r0, [fp, #12]
   19950:	str	r0, [sp, #4]
   19954:	ldr	r0, [fp, #16]
   19958:	str	r0, [sp, #8]
   1995c:	ldr	r0, [sp, #76]	; 0x4c
   19960:	b	1991c <__assert_fail@plt+0x8318>
   19964:	mov	r0, #0
   19968:	str	r0, [fp, #-76]	; 0xffffffb4
   1996c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   19970:	cmp	r1, #0
   19974:	beq	199ac <__assert_fail@plt+0x83a8>
   19978:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1997c:	tst	r0, #1
   19980:	bne	199ac <__assert_fail@plt+0x83a8>
   19984:	ldrb	r0, [r1]
   19988:	cmp	r0, #0
   1998c:	beq	199ac <__assert_fail@plt+0x83a8>
   19990:	add	r1, r1, #1
   19994:	cmp	r8, r4
   19998:	strbcc	r0, [r5, r8]
   1999c:	add	r8, r8, #1
   199a0:	ldrb	r0, [r1], #1
   199a4:	cmp	r0, #0
   199a8:	bne	19994 <__assert_fail@plt+0x8390>
   199ac:	cmp	r8, r4
   199b0:	movcc	r0, #0
   199b4:	strbcc	r0, [r5, r8]
   199b8:	mov	r0, r8
   199bc:	sub	sp, fp, #28
   199c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199c4:	mov	r0, #4
   199c8:	b	198e8 <__assert_fail@plt+0x82e4>
   199cc:	bl	115ec <abort@plt>
   199d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199d4:	add	fp, sp, #28
   199d8:	sub	sp, sp, #28
   199dc:	movw	r5, #4776	; 0x12a8
   199e0:	cmp	r2, #0
   199e4:	mov	r4, r1
   199e8:	mov	r7, r0
   199ec:	str	r0, [sp, #20]
   199f0:	movt	r5, #3
   199f4:	movne	r5, r2
   199f8:	bl	114e4 <__errno_location@plt>
   199fc:	mov	sl, r0
   19a00:	ldr	r2, [r5, #40]	; 0x28
   19a04:	ldr	r3, [r5, #44]	; 0x2c
   19a08:	ldm	r5, {r0, r1}
   19a0c:	orr	r8, r1, #1
   19a10:	add	r9, r5, #8
   19a14:	mov	r1, #0
   19a18:	ldr	r6, [sl]
   19a1c:	stm	sp, {r0, r8, r9}
   19a20:	mov	r0, #0
   19a24:	str	r2, [sp, #12]
   19a28:	str	r3, [sp, #16]
   19a2c:	mov	r2, r7
   19a30:	mov	r3, r4
   19a34:	str	r6, [sp, #24]
   19a38:	mov	r6, r4
   19a3c:	bl	189a4 <__assert_fail@plt+0x73a0>
   19a40:	add	r7, r0, #1
   19a44:	mov	r0, r7
   19a48:	bl	1b2b0 <__assert_fail@plt+0x9cac>
   19a4c:	mov	r4, r0
   19a50:	ldr	r0, [r5]
   19a54:	ldr	r2, [r5, #44]	; 0x2c
   19a58:	ldr	r1, [r5, #40]	; 0x28
   19a5c:	mov	r3, r6
   19a60:	stm	sp, {r0, r8, r9}
   19a64:	str	r2, [sp, #16]
   19a68:	ldr	r2, [sp, #20]
   19a6c:	str	r1, [sp, #12]
   19a70:	mov	r0, r4
   19a74:	mov	r1, r7
   19a78:	bl	189a4 <__assert_fail@plt+0x73a0>
   19a7c:	ldr	r0, [sp, #24]
   19a80:	str	r0, [sl]
   19a84:	mov	r0, r4
   19a88:	sub	sp, fp, #28
   19a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a94:	add	fp, sp, #28
   19a98:	sub	sp, sp, #36	; 0x24
   19a9c:	movw	r8, #4776	; 0x12a8
   19aa0:	cmp	r3, #0
   19aa4:	mov	r4, r2
   19aa8:	str	r2, [sp, #24]
   19aac:	mov	r5, r1
   19ab0:	mov	r6, r0
   19ab4:	str	r0, [sp, #20]
   19ab8:	movt	r8, #3
   19abc:	movne	r8, r3
   19ac0:	bl	114e4 <__errno_location@plt>
   19ac4:	str	r0, [sp, #28]
   19ac8:	ldr	r1, [r8, #40]	; 0x28
   19acc:	ldr	r2, [r8, #44]	; 0x2c
   19ad0:	ldr	r7, [r0]
   19ad4:	cmp	r4, #0
   19ad8:	add	sl, r8, #8
   19adc:	mov	r0, #0
   19ae0:	ldm	r8, {r3, r9}
   19ae4:	orreq	r9, r9, #1
   19ae8:	stm	sp, {r3, r9, sl}
   19aec:	str	r1, [sp, #12]
   19af0:	str	r2, [sp, #16]
   19af4:	mov	r1, #0
   19af8:	mov	r2, r6
   19afc:	mov	r3, r5
   19b00:	str	r7, [sp, #32]
   19b04:	mov	r7, r5
   19b08:	bl	189a4 <__assert_fail@plt+0x73a0>
   19b0c:	add	r4, r0, #1
   19b10:	mov	r5, r0
   19b14:	mov	r0, r4
   19b18:	bl	1b2b0 <__assert_fail@plt+0x9cac>
   19b1c:	mov	r6, r0
   19b20:	ldr	r0, [r8]
   19b24:	ldr	r2, [r8, #44]	; 0x2c
   19b28:	ldr	r1, [r8, #40]	; 0x28
   19b2c:	mov	r3, r7
   19b30:	stm	sp, {r0, r9, sl}
   19b34:	str	r2, [sp, #16]
   19b38:	ldr	r2, [sp, #20]
   19b3c:	str	r1, [sp, #12]
   19b40:	mov	r0, r6
   19b44:	mov	r1, r4
   19b48:	bl	189a4 <__assert_fail@plt+0x73a0>
   19b4c:	ldr	r0, [sp, #24]
   19b50:	ldr	r1, [sp, #32]
   19b54:	ldr	r2, [sp, #28]
   19b58:	cmp	r0, #0
   19b5c:	str	r1, [r2]
   19b60:	strne	r5, [r0]
   19b64:	mov	r0, r6
   19b68:	sub	sp, fp, #28
   19b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19b74:	add	fp, sp, #24
   19b78:	movw	r5, #4476	; 0x117c
   19b7c:	movw	r8, #4472	; 0x1178
   19b80:	movt	r5, #3
   19b84:	movt	r8, #3
   19b88:	ldr	r0, [r5]
   19b8c:	ldr	r4, [r8]
   19b90:	cmp	r0, #2
   19b94:	blt	19bc0 <__assert_fail@plt+0x85bc>
   19b98:	add	r7, r4, #12
   19b9c:	mov	r6, #0
   19ba0:	ldr	r0, [r7, r6, lsl #3]
   19ba4:	bl	165a4 <__assert_fail@plt+0x4fa0>
   19ba8:	ldr	r1, [r5]
   19bac:	add	r2, r6, #2
   19bb0:	add	r0, r6, #1
   19bb4:	mov	r6, r0
   19bb8:	cmp	r2, r1
   19bbc:	blt	19ba0 <__assert_fail@plt+0x859c>
   19bc0:	ldr	r0, [r4, #4]
   19bc4:	movw	r9, #4824	; 0x12d8
   19bc8:	movw	r7, #4480	; 0x1180
   19bcc:	movt	r9, #3
   19bd0:	movt	r7, #3
   19bd4:	cmp	r0, r9
   19bd8:	beq	19be8 <__assert_fail@plt+0x85e4>
   19bdc:	bl	165a4 <__assert_fail@plt+0x4fa0>
   19be0:	mov	r0, #256	; 0x100
   19be4:	stm	r7, {r0, r9}
   19be8:	cmp	r4, r7
   19bec:	beq	19bfc <__assert_fail@plt+0x85f8>
   19bf0:	mov	r0, r4
   19bf4:	bl	165a4 <__assert_fail@plt+0x4fa0>
   19bf8:	str	r7, [r8]
   19bfc:	mov	r0, #1
   19c00:	str	r0, [r5]
   19c04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c08:	movw	r3, #4776	; 0x12a8
   19c0c:	mvn	r2, #0
   19c10:	movt	r3, #3
   19c14:	b	19c18 <__assert_fail@plt+0x8614>
   19c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c1c:	add	fp, sp, #28
   19c20:	sub	sp, sp, #44	; 0x2c
   19c24:	mov	r7, r3
   19c28:	str	r2, [sp, #36]	; 0x24
   19c2c:	str	r1, [sp, #32]
   19c30:	mov	r5, r0
   19c34:	bl	114e4 <__errno_location@plt>
   19c38:	cmp	r5, #0
   19c3c:	bmi	19dac <__assert_fail@plt+0x87a8>
   19c40:	cmn	r5, #-2147483647	; 0x80000001
   19c44:	beq	19dac <__assert_fail@plt+0x87a8>
   19c48:	movw	r8, #4476	; 0x117c
   19c4c:	movw	r4, #4472	; 0x1178
   19c50:	str	r0, [sp, #28]
   19c54:	ldr	r0, [r0]
   19c58:	movt	r8, #3
   19c5c:	movt	r4, #3
   19c60:	ldr	r1, [r8]
   19c64:	ldr	r6, [r4]
   19c68:	str	r0, [sp, #24]
   19c6c:	cmp	r1, r5
   19c70:	ble	19c7c <__assert_fail@plt+0x8678>
   19c74:	mov	sl, r6
   19c78:	b	19ce8 <__assert_fail@plt+0x86e4>
   19c7c:	movw	r9, #4480	; 0x1180
   19c80:	mov	r0, #8
   19c84:	str	r1, [fp, #-32]	; 0xffffffe0
   19c88:	sub	r1, r5, r1
   19c8c:	mvn	r3, #-2147483648	; 0x80000000
   19c90:	movt	r9, #3
   19c94:	str	r0, [sp]
   19c98:	add	r2, r1, #1
   19c9c:	sub	r1, fp, #32
   19ca0:	subs	r0, r6, r9
   19ca4:	movne	r0, r6
   19ca8:	bl	1b4b0 <__assert_fail@plt+0x9eac>
   19cac:	mov	sl, r0
   19cb0:	cmp	r6, r9
   19cb4:	str	r0, [r4]
   19cb8:	bne	19cc4 <__assert_fail@plt+0x86c0>
   19cbc:	ldrd	r0, [r9]
   19cc0:	stm	sl, {r0, r1}
   19cc4:	ldr	r1, [r8]
   19cc8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19ccc:	add	r0, sl, r1, lsl #3
   19cd0:	sub	r1, r2, r1
   19cd4:	lsl	r2, r1, #3
   19cd8:	mov	r1, #0
   19cdc:	bl	11508 <memset@plt>
   19ce0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19ce4:	str	r0, [r8]
   19ce8:	mov	r9, sl
   19cec:	ldm	r7, {r0, r1}
   19cf0:	orr	r8, r1, #1
   19cf4:	add	r1, r7, #8
   19cf8:	ldr	r2, [r7, #40]	; 0x28
   19cfc:	ldr	r3, [r7, #44]	; 0x2c
   19d00:	ldr	r6, [r9, r5, lsl #3]!
   19d04:	str	r1, [sp, #20]
   19d08:	ldr	r4, [r9, #4]!
   19d0c:	stm	sp, {r0, r8}
   19d10:	add	r0, sp, #8
   19d14:	stm	r0, {r1, r2, r3}
   19d18:	ldr	r2, [sp, #32]
   19d1c:	ldr	r3, [sp, #36]	; 0x24
   19d20:	mov	r1, r6
   19d24:	mov	r0, r4
   19d28:	bl	189a4 <__assert_fail@plt+0x73a0>
   19d2c:	cmp	r6, r0
   19d30:	bhi	19d94 <__assert_fail@plt+0x8790>
   19d34:	add	r6, r0, #1
   19d38:	movw	r0, #4824	; 0x12d8
   19d3c:	movt	r0, #3
   19d40:	str	r6, [sl, r5, lsl #3]
   19d44:	cmp	r4, r0
   19d48:	beq	19d54 <__assert_fail@plt+0x8750>
   19d4c:	mov	r0, r4
   19d50:	bl	165a4 <__assert_fail@plt+0x4fa0>
   19d54:	mov	r0, r6
   19d58:	bl	1b2b0 <__assert_fail@plt+0x9cac>
   19d5c:	str	r0, [r9]
   19d60:	mov	r4, r0
   19d64:	add	r3, sp, #8
   19d68:	ldr	r0, [r7]
   19d6c:	ldr	r1, [r7, #40]	; 0x28
   19d70:	ldr	r2, [r7, #44]	; 0x2c
   19d74:	stm	sp, {r0, r8}
   19d78:	ldr	r0, [sp, #20]
   19d7c:	stm	r3, {r0, r1, r2}
   19d80:	ldr	r2, [sp, #32]
   19d84:	ldr	r3, [sp, #36]	; 0x24
   19d88:	mov	r0, r4
   19d8c:	mov	r1, r6
   19d90:	bl	189a4 <__assert_fail@plt+0x73a0>
   19d94:	ldr	r0, [sp, #28]
   19d98:	ldr	r1, [sp, #24]
   19d9c:	str	r1, [r0]
   19da0:	mov	r0, r4
   19da4:	sub	sp, fp, #28
   19da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dac:	bl	115ec <abort@plt>
   19db0:	movw	r3, #4776	; 0x12a8
   19db4:	movt	r3, #3
   19db8:	b	19c18 <__assert_fail@plt+0x8614>
   19dbc:	movw	r3, #4776	; 0x12a8
   19dc0:	mov	r1, r0
   19dc4:	mov	r0, #0
   19dc8:	mvn	r2, #0
   19dcc:	movt	r3, #3
   19dd0:	b	19c18 <__assert_fail@plt+0x8614>
   19dd4:	movw	r3, #4776	; 0x12a8
   19dd8:	mov	r2, r1
   19ddc:	mov	r1, r0
   19de0:	mov	r0, #0
   19de4:	movt	r3, #3
   19de8:	b	19c18 <__assert_fail@plt+0x8614>
   19dec:	push	{fp, lr}
   19df0:	mov	fp, sp
   19df4:	sub	sp, sp, #48	; 0x30
   19df8:	vmov.i32	q8, #0	; 0x00000000
   19dfc:	mov	ip, #32
   19e00:	mov	r3, sp
   19e04:	mov	lr, r2
   19e08:	cmp	r1, #10
   19e0c:	add	r2, r3, #16
   19e10:	vst1.64	{d16-d17}, [r3], ip
   19e14:	vst1.64	{d16-d17}, [r2]
   19e18:	vst1.64	{d16-d17}, [r3]
   19e1c:	beq	19e3c <__assert_fail@plt+0x8838>
   19e20:	str	r1, [sp]
   19e24:	mov	r3, sp
   19e28:	mov	r1, lr
   19e2c:	mvn	r2, #0
   19e30:	bl	19c18 <__assert_fail@plt+0x8614>
   19e34:	mov	sp, fp
   19e38:	pop	{fp, pc}
   19e3c:	bl	115ec <abort@plt>
   19e40:	push	{r4, sl, fp, lr}
   19e44:	add	fp, sp, #8
   19e48:	sub	sp, sp, #48	; 0x30
   19e4c:	vmov.i32	q8, #0	; 0x00000000
   19e50:	mov	ip, r3
   19e54:	mov	r3, sp
   19e58:	mov	lr, #32
   19e5c:	cmp	r1, #10
   19e60:	add	r4, r3, #16
   19e64:	vst1.64	{d16-d17}, [r3], lr
   19e68:	vst1.64	{d16-d17}, [r4]
   19e6c:	vst1.64	{d16-d17}, [r3]
   19e70:	beq	19e90 <__assert_fail@plt+0x888c>
   19e74:	str	r1, [sp]
   19e78:	mov	r1, r2
   19e7c:	mov	r3, sp
   19e80:	mov	r2, ip
   19e84:	bl	19c18 <__assert_fail@plt+0x8614>
   19e88:	sub	sp, fp, #8
   19e8c:	pop	{r4, sl, fp, pc}
   19e90:	bl	115ec <abort@plt>
   19e94:	push	{fp, lr}
   19e98:	mov	fp, sp
   19e9c:	sub	sp, sp, #48	; 0x30
   19ea0:	vmov.i32	q8, #0	; 0x00000000
   19ea4:	mov	r3, sp
   19ea8:	mov	ip, #32
   19eac:	cmp	r0, #10
   19eb0:	add	r2, r3, #16
   19eb4:	vst1.64	{d16-d17}, [r3], ip
   19eb8:	vst1.64	{d16-d17}, [r2]
   19ebc:	vst1.64	{d16-d17}, [r3]
   19ec0:	beq	19ee0 <__assert_fail@plt+0x88dc>
   19ec4:	str	r0, [sp]
   19ec8:	mov	r3, sp
   19ecc:	mov	r0, #0
   19ed0:	mvn	r2, #0
   19ed4:	bl	19c18 <__assert_fail@plt+0x8614>
   19ed8:	mov	sp, fp
   19edc:	pop	{fp, pc}
   19ee0:	bl	115ec <abort@plt>
   19ee4:	push	{fp, lr}
   19ee8:	mov	fp, sp
   19eec:	sub	sp, sp, #48	; 0x30
   19ef0:	vmov.i32	q8, #0	; 0x00000000
   19ef4:	mov	r3, sp
   19ef8:	mov	ip, #32
   19efc:	cmp	r0, #10
   19f00:	add	lr, r3, #16
   19f04:	vst1.64	{d16-d17}, [r3], ip
   19f08:	vst1.64	{d16-d17}, [lr]
   19f0c:	vst1.64	{d16-d17}, [r3]
   19f10:	beq	19f2c <__assert_fail@plt+0x8928>
   19f14:	str	r0, [sp]
   19f18:	mov	r3, sp
   19f1c:	mov	r0, #0
   19f20:	bl	19c18 <__assert_fail@plt+0x8614>
   19f24:	mov	sp, fp
   19f28:	pop	{fp, pc}
   19f2c:	bl	115ec <abort@plt>
   19f30:	push	{r4, sl, fp, lr}
   19f34:	add	fp, sp, #8
   19f38:	sub	sp, sp, #48	; 0x30
   19f3c:	mov	lr, r0
   19f40:	movw	r0, #4776	; 0x12a8
   19f44:	mov	ip, r1
   19f48:	mov	r1, #32
   19f4c:	mov	r4, #1
   19f50:	movt	r0, #3
   19f54:	add	r3, r0, #16
   19f58:	vld1.64	{d16-d17}, [r0], r1
   19f5c:	vld1.64	{d20-d21}, [r0]
   19f60:	vld1.64	{d18-d19}, [r3]
   19f64:	mov	r3, sp
   19f68:	add	r0, r3, #32
   19f6c:	add	r1, r3, #16
   19f70:	vst1.64	{d20-d21}, [r0]
   19f74:	mov	r0, #28
   19f78:	vst1.64	{d18-d19}, [r1]
   19f7c:	mov	r1, r3
   19f80:	and	r0, r0, r2, lsr #3
   19f84:	and	r2, r2, #31
   19f88:	vst1.64	{d16-d17}, [r1], r0
   19f8c:	ldr	r0, [r1, #8]
   19f90:	bic	r4, r4, r0, lsr r2
   19f94:	eor	r0, r0, r4, lsl r2
   19f98:	mov	r2, ip
   19f9c:	str	r0, [r1, #8]
   19fa0:	mov	r0, #0
   19fa4:	mov	r1, lr
   19fa8:	bl	19c18 <__assert_fail@plt+0x8614>
   19fac:	sub	sp, fp, #8
   19fb0:	pop	{r4, sl, fp, pc}
   19fb4:	push	{fp, lr}
   19fb8:	mov	fp, sp
   19fbc:	sub	sp, sp, #48	; 0x30
   19fc0:	mov	ip, r0
   19fc4:	movw	r0, #4776	; 0x12a8
   19fc8:	mov	r2, #32
   19fcc:	movt	r0, #3
   19fd0:	add	r3, r0, #16
   19fd4:	vld1.64	{d16-d17}, [r0], r2
   19fd8:	vld1.64	{d20-d21}, [r0]
   19fdc:	vld1.64	{d18-d19}, [r3]
   19fe0:	mov	r3, sp
   19fe4:	add	r0, r3, #32
   19fe8:	add	r2, r3, #16
   19fec:	vst1.64	{d20-d21}, [r0]
   19ff0:	mov	r0, #28
   19ff4:	vst1.64	{d18-d19}, [r2]
   19ff8:	mov	r2, r3
   19ffc:	and	r0, r0, r1, lsr #3
   1a000:	and	r1, r1, #31
   1a004:	vst1.64	{d16-d17}, [r2], r0
   1a008:	mov	r0, #1
   1a00c:	ldr	lr, [r2, #8]
   1a010:	bic	r0, r0, lr, lsr r1
   1a014:	eor	r0, lr, r0, lsl r1
   1a018:	mov	r1, ip
   1a01c:	str	r0, [r2, #8]
   1a020:	mov	r0, #0
   1a024:	mvn	r2, #0
   1a028:	bl	19c18 <__assert_fail@plt+0x8614>
   1a02c:	mov	sp, fp
   1a030:	pop	{fp, pc}
   1a034:	push	{fp, lr}
   1a038:	mov	fp, sp
   1a03c:	sub	sp, sp, #48	; 0x30
   1a040:	mov	r1, r0
   1a044:	movw	r0, #4776	; 0x12a8
   1a048:	mov	r3, #32
   1a04c:	movt	r0, #3
   1a050:	add	r2, r0, #16
   1a054:	vld1.64	{d16-d17}, [r0], r3
   1a058:	mov	r3, sp
   1a05c:	vld1.64	{d18-d19}, [r2]
   1a060:	vld1.64	{d20-d21}, [r0]
   1a064:	add	r2, r3, #16
   1a068:	add	r0, r3, #32
   1a06c:	vst1.64	{d18-d19}, [r2]
   1a070:	vst1.64	{d20-d21}, [r0]
   1a074:	mov	r0, #12
   1a078:	mov	r2, r3
   1a07c:	vst1.64	{d16-d17}, [r2], r0
   1a080:	ldr	r0, [r2]
   1a084:	orr	r0, r0, #67108864	; 0x4000000
   1a088:	str	r0, [r2]
   1a08c:	mov	r0, #0
   1a090:	mvn	r2, #0
   1a094:	bl	19c18 <__assert_fail@plt+0x8614>
   1a098:	mov	sp, fp
   1a09c:	pop	{fp, pc}
   1a0a0:	push	{fp, lr}
   1a0a4:	mov	fp, sp
   1a0a8:	sub	sp, sp, #48	; 0x30
   1a0ac:	mov	ip, r1
   1a0b0:	mov	r1, r0
   1a0b4:	movw	r0, #4776	; 0x12a8
   1a0b8:	mov	r2, #32
   1a0bc:	movt	r0, #3
   1a0c0:	add	r3, r0, #16
   1a0c4:	vld1.64	{d16-d17}, [r0], r2
   1a0c8:	vld1.64	{d18-d19}, [r3]
   1a0cc:	vld1.64	{d20-d21}, [r0]
   1a0d0:	mov	r3, sp
   1a0d4:	add	r2, r3, #16
   1a0d8:	add	r0, r3, #32
   1a0dc:	vst1.64	{d18-d19}, [r2]
   1a0e0:	vst1.64	{d20-d21}, [r0]
   1a0e4:	mov	r0, #12
   1a0e8:	mov	r2, r3
   1a0ec:	vst1.64	{d16-d17}, [r2], r0
   1a0f0:	ldr	r0, [r2]
   1a0f4:	orr	r0, r0, #67108864	; 0x4000000
   1a0f8:	str	r0, [r2]
   1a0fc:	mov	r0, #0
   1a100:	mov	r2, ip
   1a104:	bl	19c18 <__assert_fail@plt+0x8614>
   1a108:	mov	sp, fp
   1a10c:	pop	{fp, pc}
   1a110:	push	{r4, sl, fp, lr}
   1a114:	add	fp, sp, #8
   1a118:	sub	sp, sp, #96	; 0x60
   1a11c:	vmov.i32	q8, #0	; 0x00000000
   1a120:	mov	ip, r2
   1a124:	mov	r2, sp
   1a128:	mov	r4, #28
   1a12c:	cmp	r1, #10
   1a130:	mov	r3, r2
   1a134:	add	lr, r2, #16
   1a138:	vst1.64	{d16-d17}, [r3], r4
   1a13c:	vst1.64	{d16-d17}, [lr]
   1a140:	vst1.32	{d16-d17}, [r3]
   1a144:	beq	1a194 <__assert_fail@plt+0x8b90>
   1a148:	vld1.64	{d16-d17}, [r2], r4
   1a14c:	vld1.64	{d18-d19}, [lr]
   1a150:	add	r3, sp, #48	; 0x30
   1a154:	vld1.32	{d20-d21}, [r2]
   1a158:	add	r2, r3, #20
   1a15c:	add	r4, r3, #4
   1a160:	vst1.32	{d18-d19}, [r2]
   1a164:	add	r2, r3, #32
   1a168:	vst1.32	{d16-d17}, [r4]
   1a16c:	vst1.32	{d20-d21}, [r2]
   1a170:	str	r1, [sp, #48]	; 0x30
   1a174:	mvn	r2, #0
   1a178:	ldr	r1, [sp, #60]	; 0x3c
   1a17c:	orr	r1, r1, #67108864	; 0x4000000
   1a180:	str	r1, [sp, #60]	; 0x3c
   1a184:	mov	r1, ip
   1a188:	bl	19c18 <__assert_fail@plt+0x8614>
   1a18c:	sub	sp, fp, #8
   1a190:	pop	{r4, sl, fp, pc}
   1a194:	bl	115ec <abort@plt>
   1a198:	push	{r4, r5, r6, sl, fp, lr}
   1a19c:	add	fp, sp, #16
   1a1a0:	sub	sp, sp, #48	; 0x30
   1a1a4:	mov	ip, r3
   1a1a8:	movw	r3, #4776	; 0x12a8
   1a1ac:	mov	r6, #32
   1a1b0:	cmp	r1, #0
   1a1b4:	mov	r4, sp
   1a1b8:	movt	r3, #3
   1a1bc:	cmpne	r2, #0
   1a1c0:	add	r5, r4, #16
   1a1c4:	add	lr, r3, #16
   1a1c8:	vld1.64	{d16-d17}, [r3], r6
   1a1cc:	vld1.64	{d18-d19}, [lr]
   1a1d0:	vld1.64	{d20-d21}, [r3]
   1a1d4:	mov	r3, #10
   1a1d8:	vst1.64	{d16-d17}, [r4], r6
   1a1dc:	vst1.64	{d18-d19}, [r5]
   1a1e0:	vst1.64	{d20-d21}, [r4]
   1a1e4:	str	r3, [sp]
   1a1e8:	bne	1a1f0 <__assert_fail@plt+0x8bec>
   1a1ec:	bl	115ec <abort@plt>
   1a1f0:	str	r2, [sp, #44]	; 0x2c
   1a1f4:	str	r1, [sp, #40]	; 0x28
   1a1f8:	mov	r3, sp
   1a1fc:	mov	r1, ip
   1a200:	mvn	r2, #0
   1a204:	bl	19c18 <__assert_fail@plt+0x8614>
   1a208:	sub	sp, fp, #16
   1a20c:	pop	{r4, r5, r6, sl, fp, pc}
   1a210:	push	{r4, r5, r6, sl, fp, lr}
   1a214:	add	fp, sp, #16
   1a218:	sub	sp, sp, #48	; 0x30
   1a21c:	mov	lr, r3
   1a220:	movw	r3, #4776	; 0x12a8
   1a224:	mov	r6, #32
   1a228:	cmp	r1, #0
   1a22c:	mov	r4, sp
   1a230:	movt	r3, #3
   1a234:	cmpne	r2, #0
   1a238:	add	r5, r4, #16
   1a23c:	add	ip, r3, #16
   1a240:	vld1.64	{d16-d17}, [r3], r6
   1a244:	vld1.64	{d18-d19}, [ip]
   1a248:	vld1.64	{d20-d21}, [r3]
   1a24c:	mov	r3, #10
   1a250:	vst1.64	{d16-d17}, [r4], r6
   1a254:	vst1.64	{d18-d19}, [r5]
   1a258:	vst1.64	{d20-d21}, [r4]
   1a25c:	str	r3, [sp]
   1a260:	bne	1a268 <__assert_fail@plt+0x8c64>
   1a264:	bl	115ec <abort@plt>
   1a268:	ldr	ip, [fp, #8]
   1a26c:	str	r2, [sp, #44]	; 0x2c
   1a270:	str	r1, [sp, #40]	; 0x28
   1a274:	mov	r3, sp
   1a278:	mov	r1, lr
   1a27c:	mov	r2, ip
   1a280:	bl	19c18 <__assert_fail@plt+0x8614>
   1a284:	sub	sp, fp, #16
   1a288:	pop	{r4, r5, r6, sl, fp, pc}
   1a28c:	push	{r4, sl, fp, lr}
   1a290:	add	fp, sp, #8
   1a294:	sub	sp, sp, #48	; 0x30
   1a298:	movw	r3, #4776	; 0x12a8
   1a29c:	mov	lr, #32
   1a2a0:	mov	ip, r2
   1a2a4:	cmp	r0, #0
   1a2a8:	movt	r3, #3
   1a2ac:	cmpne	r1, #0
   1a2b0:	add	r2, r3, #16
   1a2b4:	vld1.64	{d16-d17}, [r3], lr
   1a2b8:	vld1.64	{d20-d21}, [r3]
   1a2bc:	vld1.64	{d18-d19}, [r2]
   1a2c0:	mov	r2, sp
   1a2c4:	add	r4, r2, #16
   1a2c8:	vst1.64	{d16-d17}, [r2], lr
   1a2cc:	vst1.64	{d20-d21}, [r2]
   1a2d0:	mov	r2, #10
   1a2d4:	vst1.64	{d18-d19}, [r4]
   1a2d8:	str	r2, [sp]
   1a2dc:	bne	1a2e4 <__assert_fail@plt+0x8ce0>
   1a2e0:	bl	115ec <abort@plt>
   1a2e4:	str	r1, [sp, #44]	; 0x2c
   1a2e8:	str	r0, [sp, #40]	; 0x28
   1a2ec:	mov	r3, sp
   1a2f0:	mov	r0, #0
   1a2f4:	mov	r1, ip
   1a2f8:	mvn	r2, #0
   1a2fc:	bl	19c18 <__assert_fail@plt+0x8614>
   1a300:	sub	sp, fp, #8
   1a304:	pop	{r4, sl, fp, pc}
   1a308:	push	{r4, r5, fp, lr}
   1a30c:	add	fp, sp, #8
   1a310:	sub	sp, sp, #48	; 0x30
   1a314:	mov	ip, r3
   1a318:	movw	r3, #4776	; 0x12a8
   1a31c:	mov	r4, #32
   1a320:	mov	lr, r2
   1a324:	cmp	r0, #0
   1a328:	movt	r3, #3
   1a32c:	cmpne	r1, #0
   1a330:	add	r2, r3, #16
   1a334:	vld1.64	{d16-d17}, [r3], r4
   1a338:	vld1.64	{d20-d21}, [r3]
   1a33c:	vld1.64	{d18-d19}, [r2]
   1a340:	mov	r2, sp
   1a344:	add	r5, r2, #16
   1a348:	vst1.64	{d16-d17}, [r2], r4
   1a34c:	vst1.64	{d20-d21}, [r2]
   1a350:	mov	r2, #10
   1a354:	vst1.64	{d18-d19}, [r5]
   1a358:	str	r2, [sp]
   1a35c:	bne	1a364 <__assert_fail@plt+0x8d60>
   1a360:	bl	115ec <abort@plt>
   1a364:	str	r1, [sp, #44]	; 0x2c
   1a368:	str	r0, [sp, #40]	; 0x28
   1a36c:	mov	r3, sp
   1a370:	mov	r0, #0
   1a374:	mov	r1, lr
   1a378:	mov	r2, ip
   1a37c:	bl	19c18 <__assert_fail@plt+0x8614>
   1a380:	sub	sp, fp, #8
   1a384:	pop	{r4, r5, fp, pc}
   1a388:	movw	r3, #4488	; 0x1188
   1a38c:	movt	r3, #3
   1a390:	b	19c18 <__assert_fail@plt+0x8614>
   1a394:	movw	r3, #4488	; 0x1188
   1a398:	mov	r2, r1
   1a39c:	mov	r1, r0
   1a3a0:	mov	r0, #0
   1a3a4:	movt	r3, #3
   1a3a8:	b	19c18 <__assert_fail@plt+0x8614>
   1a3ac:	movw	r3, #4488	; 0x1188
   1a3b0:	mvn	r2, #0
   1a3b4:	movt	r3, #3
   1a3b8:	b	19c18 <__assert_fail@plt+0x8614>
   1a3bc:	movw	r3, #4488	; 0x1188
   1a3c0:	mov	r1, r0
   1a3c4:	mov	r0, #0
   1a3c8:	mvn	r2, #0
   1a3cc:	movt	r3, #3
   1a3d0:	b	19c18 <__assert_fail@plt+0x8614>
   1a3d4:	push	{r4, r5, fp, lr}
   1a3d8:	add	fp, sp, #8
   1a3dc:	mov	r5, r0
   1a3e0:	mov	r4, r1
   1a3e4:	mov	r0, #0
   1a3e8:	mov	r2, #5
   1a3ec:	mov	r1, r5
   1a3f0:	bl	1137c <dcgettext@plt>
   1a3f4:	cmp	r0, r5
   1a3f8:	popne	{r4, r5, fp, pc}
   1a3fc:	bl	1edc4 <__assert_fail@plt+0xd7c0>
   1a400:	ldrb	r1, [r0]
   1a404:	and	r1, r1, #223	; 0xdf
   1a408:	cmp	r1, #71	; 0x47
   1a40c:	beq	1a474 <__assert_fail@plt+0x8e70>
   1a410:	cmp	r1, #85	; 0x55
   1a414:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a418:	ldrb	r1, [r0, #1]
   1a41c:	and	r1, r1, #223	; 0xdf
   1a420:	cmp	r1, #84	; 0x54
   1a424:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a428:	ldrb	r1, [r0, #2]
   1a42c:	and	r1, r1, #223	; 0xdf
   1a430:	cmp	r1, #70	; 0x46
   1a434:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a438:	ldrb	r1, [r0, #3]
   1a43c:	cmp	r1, #45	; 0x2d
   1a440:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a444:	ldrb	r1, [r0, #4]
   1a448:	cmp	r1, #56	; 0x38
   1a44c:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a450:	ldrb	r0, [r0, #5]
   1a454:	cmp	r0, #0
   1a458:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a45c:	ldrb	r1, [r5]
   1a460:	movw	r2, #2401	; 0x961
   1a464:	movw	r0, #2405	; 0x965
   1a468:	movt	r2, #2
   1a46c:	movt	r0, #2
   1a470:	b	1a4fc <__assert_fail@plt+0x8ef8>
   1a474:	ldrb	r1, [r0, #1]
   1a478:	and	r1, r1, #223	; 0xdf
   1a47c:	cmp	r1, #66	; 0x42
   1a480:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a484:	ldrb	r1, [r0, #2]
   1a488:	cmp	r1, #49	; 0x31
   1a48c:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a490:	ldrb	r1, [r0, #3]
   1a494:	cmp	r1, #56	; 0x38
   1a498:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a49c:	ldrb	r1, [r0, #4]
   1a4a0:	cmp	r1, #48	; 0x30
   1a4a4:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a4a8:	ldrb	r1, [r0, #5]
   1a4ac:	cmp	r1, #51	; 0x33
   1a4b0:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a4b4:	ldrb	r1, [r0, #6]
   1a4b8:	cmp	r1, #48	; 0x30
   1a4bc:	bne	1a4cc <__assert_fail@plt+0x8ec8>
   1a4c0:	ldrb	r0, [r0, #7]
   1a4c4:	cmp	r0, #0
   1a4c8:	beq	1a4e8 <__assert_fail@plt+0x8ee4>
   1a4cc:	movw	r1, #2397	; 0x95d
   1a4d0:	movw	r0, #3532	; 0xdcc
   1a4d4:	cmp	r4, #9
   1a4d8:	movt	r1, #2
   1a4dc:	movt	r0, #2
   1a4e0:	moveq	r0, r1
   1a4e4:	pop	{r4, r5, fp, pc}
   1a4e8:	ldrb	r1, [r5]
   1a4ec:	movw	r2, #2409	; 0x969
   1a4f0:	movw	r0, #2413	; 0x96d
   1a4f4:	movt	r2, #2
   1a4f8:	movt	r0, #2
   1a4fc:	cmp	r1, #96	; 0x60
   1a500:	moveq	r0, r2
   1a504:	pop	{r4, r5, fp, pc}
   1a508:	push	{r4, r5, r6, r7, fp, lr}
   1a50c:	add	fp, sp, #16
   1a510:	mov	r4, r1
   1a514:	mov	r1, #0
   1a518:	mov	r6, r2
   1a51c:	bl	11574 <setlocale@plt>
   1a520:	cmp	r0, #0
   1a524:	beq	1a554 <__assert_fail@plt+0x8f50>
   1a528:	mov	r7, r0
   1a52c:	bl	114b4 <strlen@plt>
   1a530:	cmp	r0, r6
   1a534:	bcs	1a570 <__assert_fail@plt+0x8f6c>
   1a538:	add	r2, r0, #1
   1a53c:	mov	r0, r4
   1a540:	mov	r1, r7
   1a544:	bl	11358 <memcpy@plt>
   1a548:	mov	r5, #0
   1a54c:	mov	r0, r5
   1a550:	pop	{r4, r5, r6, r7, fp, pc}
   1a554:	mov	r5, #22
   1a558:	cmp	r6, #0
   1a55c:	beq	1a598 <__assert_fail@plt+0x8f94>
   1a560:	mov	r0, #0
   1a564:	strb	r0, [r4]
   1a568:	mov	r0, r5
   1a56c:	pop	{r4, r5, r6, r7, fp, pc}
   1a570:	mov	r5, #34	; 0x22
   1a574:	cmp	r6, #0
   1a578:	beq	1a598 <__assert_fail@plt+0x8f94>
   1a57c:	sub	r6, r6, #1
   1a580:	mov	r0, r4
   1a584:	mov	r1, r7
   1a588:	mov	r2, r6
   1a58c:	bl	11358 <memcpy@plt>
   1a590:	mov	r0, #0
   1a594:	strb	r0, [r4, r6]
   1a598:	mov	r0, r5
   1a59c:	pop	{r4, r5, r6, r7, fp, pc}
   1a5a0:	mov	r1, #0
   1a5a4:	b	11574 <setlocale@plt>
   1a5a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a5ac:	add	fp, sp, #24
   1a5b0:	mov	r4, r0
   1a5b4:	cmp	r0, #0
   1a5b8:	beq	1a5dc <__assert_fail@plt+0x8fd8>
   1a5bc:	mov	r0, r4
   1a5c0:	bl	114b4 <strlen@plt>
   1a5c4:	add	r5, r0, #1
   1a5c8:	cmp	r5, #58	; 0x3a
   1a5cc:	bls	1a5e0 <__assert_fail@plt+0x8fdc>
   1a5d0:	add	r0, r0, #10
   1a5d4:	bic	r0, r0, #3
   1a5d8:	b	1a5e4 <__assert_fail@plt+0x8fe0>
   1a5dc:	mov	r5, #0
   1a5e0:	mov	r0, #64	; 0x40
   1a5e4:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1a5e8:	mov	r6, r0
   1a5ec:	cmp	r0, #0
   1a5f0:	beq	1a62c <__assert_fail@plt+0x9028>
   1a5f4:	cmp	r4, #0
   1a5f8:	mov	r0, r4
   1a5fc:	mov	r8, #0
   1a600:	mov	r7, r6
   1a604:	movwne	r0, #1
   1a608:	str	r8, [r6]
   1a60c:	strb	r0, [r6, #4]
   1a610:	strb	r8, [r7, #5]!
   1a614:	beq	1a62c <__assert_fail@plt+0x9028>
   1a618:	mov	r0, r7
   1a61c:	mov	r1, r4
   1a620:	mov	r2, r5
   1a624:	bl	11358 <memcpy@plt>
   1a628:	strb	r8, [r7, r5]
   1a62c:	mov	r0, r6
   1a630:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a634:	push	{r4, sl, fp, lr}
   1a638:	add	fp, sp, #8
   1a63c:	cmp	r0, #2
   1a640:	popcc	{r4, sl, fp, pc}
   1a644:	ldr	r4, [r0]
   1a648:	bl	165a4 <__assert_fail@plt+0x4fa0>
   1a64c:	cmp	r4, #0
   1a650:	mov	r0, r4
   1a654:	bne	1a644 <__assert_fail@plt+0x9040>
   1a658:	pop	{r4, sl, fp, pc}
   1a65c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a660:	add	fp, sp, #28
   1a664:	sub	sp, sp, #4
   1a668:	mov	sl, r2
   1a66c:	mov	r7, r1
   1a670:	cmp	r0, #0
   1a674:	beq	1a73c <__assert_fail@plt+0x9138>
   1a678:	mov	r6, r0
   1a67c:	bl	1a784 <__assert_fail@plt+0x9180>
   1a680:	cmp	r0, #0
   1a684:	beq	1a750 <__assert_fail@plt+0x914c>
   1a688:	mov	r4, r0
   1a68c:	mov	r0, r7
   1a690:	mov	r1, sl
   1a694:	bl	11394 <localtime_r@plt>
   1a698:	mov	r7, #1
   1a69c:	cmp	r0, #0
   1a6a0:	mov	r9, #1
   1a6a4:	beq	1a6b8 <__assert_fail@plt+0x90b4>
   1a6a8:	mov	r0, r6
   1a6ac:	mov	r1, sl
   1a6b0:	bl	1a8d0 <__assert_fail@plt+0x92cc>
   1a6b4:	eor	r9, r0, #1
   1a6b8:	cmp	r4, #1
   1a6bc:	beq	1a720 <__assert_fail@plt+0x911c>
   1a6c0:	bl	114e4 <__errno_location@plt>
   1a6c4:	mov	r6, r0
   1a6c8:	ldr	r8, [r0]
   1a6cc:	ldrb	r0, [r4, #4]
   1a6d0:	cmp	r0, #0
   1a6d4:	beq	1a75c <__assert_fail@plt+0x9158>
   1a6d8:	movw	r0, #62195	; 0xf2f3
   1a6dc:	add	r1, r4, #5
   1a6e0:	mov	r2, #1
   1a6e4:	movt	r0, #1
   1a6e8:	bl	114cc <setenv@plt>
   1a6ec:	cmp	r0, #0
   1a6f0:	beq	1a770 <__assert_fail@plt+0x916c>
   1a6f4:	ldr	r8, [r6]
   1a6f8:	mov	r7, #0
   1a6fc:	cmp	r4, #2
   1a700:	bcc	1a71c <__assert_fail@plt+0x9118>
   1a704:	ldr	r5, [r4]
   1a708:	mov	r0, r4
   1a70c:	bl	165a4 <__assert_fail@plt+0x4fa0>
   1a710:	cmp	r5, #0
   1a714:	mov	r4, r5
   1a718:	bne	1a704 <__assert_fail@plt+0x9100>
   1a71c:	str	r8, [r6]
   1a720:	cmp	r7, #0
   1a724:	moveq	sl, r7
   1a728:	cmp	r9, #0
   1a72c:	movwne	sl, #0
   1a730:	mov	r0, sl
   1a734:	sub	sp, fp, #28
   1a738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a73c:	mov	r0, r7
   1a740:	mov	r1, sl
   1a744:	sub	sp, fp, #28
   1a748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a74c:	b	112e0 <gmtime_r@plt>
   1a750:	mov	r0, #0
   1a754:	sub	sp, fp, #28
   1a758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a75c:	movw	r0, #62195	; 0xf2f3
   1a760:	movt	r0, #1
   1a764:	bl	115d4 <unsetenv@plt>
   1a768:	cmp	r0, #0
   1a76c:	bne	1a6f4 <__assert_fail@plt+0x90f0>
   1a770:	bl	113c4 <tzset@plt>
   1a774:	mov	r7, #1
   1a778:	cmp	r4, #2
   1a77c:	bcs	1a704 <__assert_fail@plt+0x9100>
   1a780:	b	1a71c <__assert_fail@plt+0x9118>
   1a784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a788:	add	fp, sp, #28
   1a78c:	sub	sp, sp, #4
   1a790:	mov	r4, r0
   1a794:	movw	r0, #62195	; 0xf2f3
   1a798:	movt	r0, #1
   1a79c:	bl	11424 <getenv@plt>
   1a7a0:	mov	r6, r0
   1a7a4:	ldrb	r0, [r4, #4]
   1a7a8:	cmp	r6, #0
   1a7ac:	beq	1a7f0 <__assert_fail@plt+0x91ec>
   1a7b0:	cmp	r0, #0
   1a7b4:	beq	1a7cc <__assert_fail@plt+0x91c8>
   1a7b8:	add	r0, r4, #5
   1a7bc:	mov	r1, r6
   1a7c0:	bl	112ec <strcmp@plt>
   1a7c4:	cmp	r0, #0
   1a7c8:	beq	1a8a4 <__assert_fail@plt+0x92a0>
   1a7cc:	mov	r0, r6
   1a7d0:	bl	114b4 <strlen@plt>
   1a7d4:	add	r8, r0, #1
   1a7d8:	mov	r9, #1
   1a7dc:	cmp	r8, #58	; 0x3a
   1a7e0:	bls	1a800 <__assert_fail@plt+0x91fc>
   1a7e4:	add	r0, r0, #10
   1a7e8:	bic	r0, r0, #3
   1a7ec:	b	1a804 <__assert_fail@plt+0x9200>
   1a7f0:	mov	r9, #0
   1a7f4:	cmp	r0, #0
   1a7f8:	mov	r8, #0
   1a7fc:	beq	1a8a4 <__assert_fail@plt+0x92a0>
   1a800:	mov	r0, #64	; 0x40
   1a804:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1a808:	cmp	r0, #0
   1a80c:	beq	1a89c <__assert_fail@plt+0x9298>
   1a810:	mov	sl, #0
   1a814:	mov	r7, r0
   1a818:	strb	r9, [r0, #4]
   1a81c:	mov	r5, r0
   1a820:	cmp	r9, #0
   1a824:	str	sl, [r0]
   1a828:	strb	sl, [r7, #5]!
   1a82c:	beq	1a844 <__assert_fail@plt+0x9240>
   1a830:	mov	r0, r7
   1a834:	mov	r1, r6
   1a838:	mov	r2, r8
   1a83c:	bl	11358 <memcpy@plt>
   1a840:	strb	sl, [r7, r8]
   1a844:	ldrb	r0, [r4, #4]
   1a848:	cmp	r0, #0
   1a84c:	beq	1a8ac <__assert_fail@plt+0x92a8>
   1a850:	movw	r0, #62195	; 0xf2f3
   1a854:	add	r1, r4, #5
   1a858:	mov	r2, #1
   1a85c:	movt	r0, #1
   1a860:	bl	114cc <setenv@plt>
   1a864:	cmp	r0, #0
   1a868:	beq	1a8c0 <__assert_fail@plt+0x92bc>
   1a86c:	bl	114e4 <__errno_location@plt>
   1a870:	ldr	r6, [r0]
   1a874:	mov	r4, r0
   1a878:	cmp	r5, #2
   1a87c:	bcc	1a898 <__assert_fail@plt+0x9294>
   1a880:	ldr	r7, [r5]
   1a884:	mov	r0, r5
   1a888:	bl	165a4 <__assert_fail@plt+0x4fa0>
   1a88c:	cmp	r7, #0
   1a890:	mov	r5, r7
   1a894:	bne	1a880 <__assert_fail@plt+0x927c>
   1a898:	str	r6, [r4]
   1a89c:	mov	r5, #0
   1a8a0:	b	1a8c4 <__assert_fail@plt+0x92c0>
   1a8a4:	mov	r5, #1
   1a8a8:	b	1a8c4 <__assert_fail@plt+0x92c0>
   1a8ac:	movw	r0, #62195	; 0xf2f3
   1a8b0:	movt	r0, #1
   1a8b4:	bl	115d4 <unsetenv@plt>
   1a8b8:	cmp	r0, #0
   1a8bc:	bne	1a86c <__assert_fail@plt+0x9268>
   1a8c0:	bl	113c4 <tzset@plt>
   1a8c4:	mov	r0, r5
   1a8c8:	sub	sp, fp, #28
   1a8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8d4:	add	fp, sp, #28
   1a8d8:	sub	sp, sp, #4
   1a8dc:	ldr	r7, [r1, #40]	; 0x28
   1a8e0:	mov	r8, #1
   1a8e4:	cmp	r7, #0
   1a8e8:	beq	1a988 <__assert_fail@plt+0x9384>
   1a8ec:	mov	r5, r1
   1a8f0:	mov	r6, r0
   1a8f4:	cmp	r7, r1
   1a8f8:	bcc	1a908 <__assert_fail@plt+0x9304>
   1a8fc:	add	r0, r5, #44	; 0x2c
   1a900:	cmp	r7, r0
   1a904:	bcc	1a988 <__assert_fail@plt+0x9384>
   1a908:	ldrb	r0, [r7]
   1a90c:	cmp	r0, #0
   1a910:	beq	1a97c <__assert_fail@plt+0x9378>
   1a914:	add	r4, r6, #5
   1a918:	mov	r0, r4
   1a91c:	mov	r1, r7
   1a920:	bl	112ec <strcmp@plt>
   1a924:	cmp	r0, #0
   1a928:	beq	1a984 <__assert_fail@plt+0x9380>
   1a92c:	ldrb	r0, [r4]
   1a930:	cmp	r0, #0
   1a934:	bne	1a950 <__assert_fail@plt+0x934c>
   1a938:	add	r0, r6, #5
   1a93c:	cmp	r4, r0
   1a940:	bne	1a994 <__assert_fail@plt+0x9390>
   1a944:	ldrb	r0, [r6, #4]
   1a948:	cmp	r0, #0
   1a94c:	beq	1a994 <__assert_fail@plt+0x9390>
   1a950:	mov	r0, r4
   1a954:	bl	114b4 <strlen@plt>
   1a958:	add	r4, r0, r4
   1a95c:	ldrb	r0, [r4, #1]!
   1a960:	cmp	r0, #0
   1a964:	bne	1a918 <__assert_fail@plt+0x9314>
   1a968:	ldr	r0, [r6]
   1a96c:	cmp	r0, #0
   1a970:	addne	r4, r0, #5
   1a974:	movne	r6, r0
   1a978:	b	1a918 <__assert_fail@plt+0x9314>
   1a97c:	movw	r4, #1076	; 0x434
   1a980:	movt	r4, #2
   1a984:	str	r4, [r5, #40]	; 0x28
   1a988:	mov	r0, r8
   1a98c:	sub	sp, fp, #28
   1a990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a994:	sub	r0, r6, r4
   1a998:	add	sl, r0, #64	; 0x40
   1a99c:	mov	r0, r7
   1a9a0:	bl	114b4 <strlen@plt>
   1a9a4:	add	r9, r0, #1
   1a9a8:	cmp	r9, sl
   1a9ac:	bge	1a9cc <__assert_fail@plt+0x93c8>
   1a9b0:	mov	r0, r4
   1a9b4:	mov	r1, r7
   1a9b8:	mov	r2, r9
   1a9bc:	bl	11358 <memcpy@plt>
   1a9c0:	mov	r0, #0
   1a9c4:	strb	r0, [r4, r9]
   1a9c8:	b	1a984 <__assert_fail@plt+0x9380>
   1a9cc:	add	r0, r0, #10
   1a9d0:	cmp	r9, #59	; 0x3b
   1a9d4:	bic	r0, r0, #3
   1a9d8:	movwcc	r0, #64	; 0x40
   1a9dc:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1a9e0:	cmp	r0, #0
   1a9e4:	beq	1aa24 <__assert_fail@plt+0x9420>
   1a9e8:	mov	sl, r0
   1a9ec:	mov	r0, #1
   1a9f0:	mov	r1, r7
   1a9f4:	mov	r2, r9
   1a9f8:	strh	r0, [sl, #4]
   1a9fc:	mov	r0, #0
   1aa00:	add	r4, sl, #5
   1aa04:	str	r0, [sl]
   1aa08:	mov	r0, r4
   1aa0c:	bl	11358 <memcpy@plt>
   1aa10:	mov	r0, #0
   1aa14:	strb	r0, [r4, r9]
   1aa18:	str	sl, [r6]
   1aa1c:	strb	r0, [sl, #4]
   1aa20:	b	1a984 <__assert_fail@plt+0x9380>
   1aa24:	mov	r8, #0
   1aa28:	str	r8, [r6]
   1aa2c:	b	1a988 <__assert_fail@plt+0x9384>
   1aa30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa34:	add	fp, sp, #28
   1aa38:	sub	sp, sp, #52	; 0x34
   1aa3c:	mov	r4, r1
   1aa40:	cmp	r0, #0
   1aa44:	beq	1ab50 <__assert_fail@plt+0x954c>
   1aa48:	mov	r6, r0
   1aa4c:	bl	1a784 <__assert_fail@plt+0x9180>
   1aa50:	cmp	r0, #0
   1aa54:	beq	1ab48 <__assert_fail@plt+0x9544>
   1aa58:	mov	r8, r0
   1aa5c:	mov	r0, #32
   1aa60:	mov	r1, r4
   1aa64:	add	r5, sp, #8
   1aa68:	vld1.32	{d16-d17}, [r1], r0
   1aa6c:	mov	r2, r5
   1aa70:	vst1.32	{d16-d17}, [r2], r0
   1aa74:	ldr	r0, [r4, #16]
   1aa78:	ldr	r3, [r4, #20]
   1aa7c:	str	r0, [sp, #24]
   1aa80:	mvn	r0, #0
   1aa84:	str	r0, [sp, #36]	; 0x24
   1aa88:	str	r3, [sp, #28]
   1aa8c:	ldr	r0, [r1]
   1aa90:	str	r0, [r2]
   1aa94:	mov	r0, r5
   1aa98:	bl	11310 <mktime@plt>
   1aa9c:	mov	r9, r0
   1aaa0:	ldr	r0, [sp, #36]	; 0x24
   1aaa4:	mov	sl, #1
   1aaa8:	mov	r1, #1
   1aaac:	cmp	r0, #0
   1aab0:	bmi	1aac4 <__assert_fail@plt+0x94c0>
   1aab4:	add	r1, sp, #8
   1aab8:	mov	r0, r6
   1aabc:	bl	1a8d0 <__assert_fail@plt+0x92cc>
   1aac0:	eor	r1, r0, #1
   1aac4:	cmp	r8, #1
   1aac8:	beq	1ab3c <__assert_fail@plt+0x9538>
   1aacc:	str	r1, [sp, #4]
   1aad0:	bl	114e4 <__errno_location@plt>
   1aad4:	mov	r6, r0
   1aad8:	ldr	r7, [r0]
   1aadc:	ldrb	r0, [r8, #4]
   1aae0:	cmp	r0, #0
   1aae4:	beq	1ab90 <__assert_fail@plt+0x958c>
   1aae8:	movw	r0, #62195	; 0xf2f3
   1aaec:	add	r1, r8, #5
   1aaf0:	mov	r2, #1
   1aaf4:	movt	r0, #1
   1aaf8:	bl	114cc <setenv@plt>
   1aafc:	cmp	r0, #0
   1ab00:	beq	1aba4 <__assert_fail@plt+0x95a0>
   1ab04:	ldr	r0, [r6]
   1ab08:	mov	sl, #0
   1ab0c:	str	r0, [sp]
   1ab10:	cmp	r8, #2
   1ab14:	bcc	1ab30 <__assert_fail@plt+0x952c>
   1ab18:	ldr	r7, [r8]
   1ab1c:	mov	r0, r8
   1ab20:	bl	165a4 <__assert_fail@plt+0x4fa0>
   1ab24:	cmp	r7, #0
   1ab28:	mov	r8, r7
   1ab2c:	bne	1ab18 <__assert_fail@plt+0x9514>
   1ab30:	ldr	r0, [sp]
   1ab34:	ldr	r1, [sp, #4]
   1ab38:	str	r0, [r6]
   1ab3c:	eor	r0, sl, #1
   1ab40:	orrs	r0, r1, r0
   1ab44:	beq	1ab60 <__assert_fail@plt+0x955c>
   1ab48:	mvn	r9, #0
   1ab4c:	b	1ab84 <__assert_fail@plt+0x9580>
   1ab50:	mov	r0, r4
   1ab54:	sub	sp, fp, #28
   1ab58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab5c:	b	11598 <timegm@plt>
   1ab60:	mov	r0, #28
   1ab64:	add	r1, r5, #16
   1ab68:	vld1.32	{d16-d17}, [r5], r0
   1ab6c:	vld1.64	{d18-d19}, [r1]
   1ab70:	add	r1, r4, #16
   1ab74:	vld1.32	{d20-d21}, [r5]
   1ab78:	vst1.32	{d16-d17}, [r4], r0
   1ab7c:	vst1.32	{d18-d19}, [r1]
   1ab80:	vst1.32	{d20-d21}, [r4]
   1ab84:	mov	r0, r9
   1ab88:	sub	sp, fp, #28
   1ab8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab90:	movw	r0, #62195	; 0xf2f3
   1ab94:	movt	r0, #1
   1ab98:	bl	115d4 <unsetenv@plt>
   1ab9c:	cmp	r0, #0
   1aba0:	bne	1ab04 <__assert_fail@plt+0x9500>
   1aba4:	str	r7, [sp]
   1aba8:	bl	113c4 <tzset@plt>
   1abac:	mov	sl, #1
   1abb0:	cmp	r8, #2
   1abb4:	bcs	1ab18 <__assert_fail@plt+0x9514>
   1abb8:	b	1ab30 <__assert_fail@plt+0x952c>
   1abbc:	mov	r1, #0
   1abc0:	mov	r2, #3
   1abc4:	b	1ebe4 <__assert_fail@plt+0xd5e0>
   1abc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1abcc:	add	fp, sp, #24
   1abd0:	sub	sp, sp, #32
   1abd4:	ldr	r6, [fp, #12]
   1abd8:	ldr	r7, [fp, #8]
   1abdc:	mov	r4, r2
   1abe0:	mov	r8, r0
   1abe4:	cmp	r1, #0
   1abe8:	beq	1ac10 <__assert_fail@plt+0x960c>
   1abec:	movw	r2, #2500	; 0x9c4
   1abf0:	mov	r5, r1
   1abf4:	str	r3, [sp, #4]
   1abf8:	str	r4, [sp]
   1abfc:	mov	r0, r8
   1ac00:	mov	r1, #1
   1ac04:	movt	r2, #2
   1ac08:	mov	r3, r5
   1ac0c:	b	1ac28 <__assert_fail@plt+0x9624>
   1ac10:	movw	r2, #2512	; 0x9d0
   1ac14:	str	r3, [sp]
   1ac18:	mov	r0, r8
   1ac1c:	mov	r1, #1
   1ac20:	mov	r3, r4
   1ac24:	movt	r2, #2
   1ac28:	bl	1152c <__fprintf_chk@plt>
   1ac2c:	movw	r1, #2519	; 0x9d7
   1ac30:	mov	r0, #0
   1ac34:	mov	r2, #5
   1ac38:	movt	r1, #2
   1ac3c:	bl	1137c <dcgettext@plt>
   1ac40:	movw	r2, #3237	; 0xca5
   1ac44:	mov	r3, r0
   1ac48:	movw	r0, #2022	; 0x7e6
   1ac4c:	mov	r1, #1
   1ac50:	movt	r2, #2
   1ac54:	str	r0, [sp]
   1ac58:	mov	r0, r8
   1ac5c:	bl	1152c <__fprintf_chk@plt>
   1ac60:	movw	r4, #1187	; 0x4a3
   1ac64:	mov	r1, r8
   1ac68:	movt	r4, #2
   1ac6c:	mov	r0, r4
   1ac70:	bl	112c8 <fputs_unlocked@plt>
   1ac74:	movw	r1, #2523	; 0x9db
   1ac78:	mov	r0, #0
   1ac7c:	mov	r2, #5
   1ac80:	movt	r1, #2
   1ac84:	bl	1137c <dcgettext@plt>
   1ac88:	movw	r3, #2694	; 0xa86
   1ac8c:	mov	r2, r0
   1ac90:	mov	r0, r8
   1ac94:	mov	r1, #1
   1ac98:	movt	r3, #2
   1ac9c:	bl	1152c <__fprintf_chk@plt>
   1aca0:	mov	r0, r4
   1aca4:	mov	r1, r8
   1aca8:	bl	112c8 <fputs_unlocked@plt>
   1acac:	cmp	r6, #9
   1acb0:	bhi	1acec <__assert_fail@plt+0x96e8>
   1acb4:	add	r0, pc, #0
   1acb8:	ldr	pc, [r0, r6, lsl #2]
   1acbc:	andeq	sl, r1, r4, ror #25
   1acc0:	strdeq	sl, [r1], -r8
   1acc4:	andeq	sl, r1, r8, lsr #26
   1acc8:	andeq	sl, r1, r0, asr sp
   1accc:	andeq	sl, r1, r8, ror sp
   1acd0:	andeq	sl, r1, r0, lsr #27
   1acd4:	andeq	sl, r1, r8, asr #27
   1acd8:	andeq	sl, r1, r0, lsl #28
   1acdc:	andeq	sl, r1, r0, lsr #29
   1ace0:	andeq	sl, r1, r8, asr #28
   1ace4:	sub	sp, fp, #24
   1ace8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1acec:	movw	r1, #3047	; 0xbe7
   1acf0:	movt	r1, #2
   1acf4:	b	1ae50 <__assert_fail@plt+0x984c>
   1acf8:	movw	r1, #2728	; 0xaa8
   1acfc:	mov	r0, #0
   1ad00:	mov	r2, #5
   1ad04:	movt	r1, #2
   1ad08:	bl	1137c <dcgettext@plt>
   1ad0c:	ldr	r3, [r7]
   1ad10:	mov	r2, r0
   1ad14:	mov	r0, r8
   1ad18:	mov	r1, #1
   1ad1c:	sub	sp, fp, #24
   1ad20:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ad24:	b	1152c <__fprintf_chk@plt>
   1ad28:	movw	r1, #2744	; 0xab8
   1ad2c:	mov	r0, #0
   1ad30:	mov	r2, #5
   1ad34:	movt	r1, #2
   1ad38:	bl	1137c <dcgettext@plt>
   1ad3c:	mov	r2, r0
   1ad40:	ldr	r3, [r7]
   1ad44:	ldr	r0, [r7, #4]
   1ad48:	str	r0, [sp]
   1ad4c:	b	1ae3c <__assert_fail@plt+0x9838>
   1ad50:	movw	r1, #2767	; 0xacf
   1ad54:	mov	r0, #0
   1ad58:	mov	r2, #5
   1ad5c:	movt	r1, #2
   1ad60:	bl	1137c <dcgettext@plt>
   1ad64:	mov	r2, r0
   1ad68:	ldr	r3, [r7]
   1ad6c:	ldmib	r7, {r0, r1}
   1ad70:	stm	sp, {r0, r1}
   1ad74:	b	1ae3c <__assert_fail@plt+0x9838>
   1ad78:	movw	r1, #2795	; 0xaeb
   1ad7c:	mov	r0, #0
   1ad80:	mov	r2, #5
   1ad84:	movt	r1, #2
   1ad88:	bl	1137c <dcgettext@plt>
   1ad8c:	ldr	r3, [r7]
   1ad90:	mov	r2, r0
   1ad94:	ldmib	r7, {r0, r1, r7}
   1ad98:	stm	sp, {r0, r1, r7}
   1ad9c:	b	1ae3c <__assert_fail@plt+0x9838>
   1ada0:	movw	r1, #2827	; 0xb0b
   1ada4:	mov	r0, #0
   1ada8:	mov	r2, #5
   1adac:	movt	r1, #2
   1adb0:	bl	1137c <dcgettext@plt>
   1adb4:	ldr	r3, [r7]
   1adb8:	mov	r2, r0
   1adbc:	ldmib	r7, {r0, r1, r6, r7}
   1adc0:	stm	sp, {r0, r1, r6, r7}
   1adc4:	b	1ae3c <__assert_fail@plt+0x9838>
   1adc8:	movw	r1, #2863	; 0xb2f
   1adcc:	mov	r0, #0
   1add0:	mov	r2, #5
   1add4:	movt	r1, #2
   1add8:	bl	1137c <dcgettext@plt>
   1addc:	mov	r2, r0
   1ade0:	ldr	r3, [r7]
   1ade4:	ldmib	r7, {r0, r1, r6}
   1ade8:	ldr	r5, [r7, #16]
   1adec:	ldr	r7, [r7, #20]
   1adf0:	stm	sp, {r0, r1, r6}
   1adf4:	str	r5, [sp, #12]
   1adf8:	str	r7, [sp, #16]
   1adfc:	b	1ae3c <__assert_fail@plt+0x9838>
   1ae00:	movw	r1, #2903	; 0xb57
   1ae04:	mov	r0, #0
   1ae08:	mov	r2, #5
   1ae0c:	movt	r1, #2
   1ae10:	bl	1137c <dcgettext@plt>
   1ae14:	mov	r2, r0
   1ae18:	ldr	r3, [r7]
   1ae1c:	ldmib	r7, {r0, r1, r6}
   1ae20:	ldr	r5, [r7, #16]
   1ae24:	ldr	r4, [r7, #20]
   1ae28:	ldr	r7, [r7, #24]
   1ae2c:	stm	sp, {r0, r1, r6}
   1ae30:	str	r5, [sp, #12]
   1ae34:	str	r4, [sp, #16]
   1ae38:	str	r7, [sp, #20]
   1ae3c:	mov	r0, r8
   1ae40:	mov	r1, #1
   1ae44:	b	1aef0 <__assert_fail@plt+0x98ec>
   1ae48:	movw	r1, #2995	; 0xbb3
   1ae4c:	movt	r1, #2
   1ae50:	mov	r0, #0
   1ae54:	mov	r2, #5
   1ae58:	bl	1137c <dcgettext@plt>
   1ae5c:	mov	ip, r0
   1ae60:	ldr	r3, [r7]
   1ae64:	ldr	r0, [r7, #4]
   1ae68:	ldr	r1, [r7, #8]
   1ae6c:	ldr	r6, [r7, #12]
   1ae70:	ldr	r5, [r7, #16]
   1ae74:	ldr	r4, [r7, #20]
   1ae78:	ldr	r2, [r7, #24]
   1ae7c:	ldr	lr, [r7, #28]
   1ae80:	ldr	r7, [r7, #32]
   1ae84:	stm	sp, {r0, r1, r6}
   1ae88:	str	r5, [sp, #12]
   1ae8c:	str	r4, [sp, #16]
   1ae90:	str	r2, [sp, #20]
   1ae94:	str	lr, [sp, #24]
   1ae98:	str	r7, [sp, #28]
   1ae9c:	b	1aee4 <__assert_fail@plt+0x98e0>
   1aea0:	movw	r1, #2947	; 0xb83
   1aea4:	mov	r0, #0
   1aea8:	mov	r2, #5
   1aeac:	movt	r1, #2
   1aeb0:	bl	1137c <dcgettext@plt>
   1aeb4:	mov	ip, r0
   1aeb8:	ldr	r3, [r7]
   1aebc:	ldmib	r7, {r0, r1, r6}
   1aec0:	ldr	r5, [r7, #16]
   1aec4:	ldr	r4, [r7, #20]
   1aec8:	ldr	r2, [r7, #24]
   1aecc:	ldr	r7, [r7, #28]
   1aed0:	stm	sp, {r0, r1, r6}
   1aed4:	str	r5, [sp, #12]
   1aed8:	str	r4, [sp, #16]
   1aedc:	str	r2, [sp, #20]
   1aee0:	str	r7, [sp, #24]
   1aee4:	mov	r0, r8
   1aee8:	mov	r1, #1
   1aeec:	mov	r2, ip
   1aef0:	bl	1152c <__fprintf_chk@plt>
   1aef4:	sub	sp, fp, #24
   1aef8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aefc:	push	{r4, sl, fp, lr}
   1af00:	add	fp, sp, #8
   1af04:	sub	sp, sp, #8
   1af08:	ldr	ip, [fp, #8]
   1af0c:	mov	lr, #0
   1af10:	ldr	r4, [ip, lr, lsl #2]
   1af14:	add	lr, lr, #1
   1af18:	cmp	r4, #0
   1af1c:	bne	1af10 <__assert_fail@plt+0x990c>
   1af20:	sub	r4, lr, #1
   1af24:	str	ip, [sp]
   1af28:	str	r4, [sp, #4]
   1af2c:	bl	1abc8 <__assert_fail@plt+0x95c4>
   1af30:	sub	sp, fp, #8
   1af34:	pop	{r4, sl, fp, pc}
   1af38:	push	{fp, lr}
   1af3c:	mov	fp, sp
   1af40:	sub	sp, sp, #48	; 0x30
   1af44:	ldr	ip, [fp, #8]
   1af48:	ldr	lr, [ip]
   1af4c:	cmp	lr, #0
   1af50:	str	lr, [sp, #8]
   1af54:	beq	1aff0 <__assert_fail@plt+0x99ec>
   1af58:	ldr	lr, [ip, #4]
   1af5c:	cmp	lr, #0
   1af60:	str	lr, [sp, #12]
   1af64:	beq	1aff8 <__assert_fail@plt+0x99f4>
   1af68:	ldr	lr, [ip, #8]
   1af6c:	cmp	lr, #0
   1af70:	str	lr, [sp, #16]
   1af74:	beq	1b000 <__assert_fail@plt+0x99fc>
   1af78:	ldr	lr, [ip, #12]
   1af7c:	cmp	lr, #0
   1af80:	str	lr, [sp, #20]
   1af84:	beq	1b008 <__assert_fail@plt+0x9a04>
   1af88:	ldr	lr, [ip, #16]
   1af8c:	cmp	lr, #0
   1af90:	str	lr, [sp, #24]
   1af94:	beq	1b010 <__assert_fail@plt+0x9a0c>
   1af98:	ldr	lr, [ip, #20]
   1af9c:	cmp	lr, #0
   1afa0:	str	lr, [sp, #28]
   1afa4:	beq	1b018 <__assert_fail@plt+0x9a14>
   1afa8:	ldr	lr, [ip, #24]
   1afac:	cmp	lr, #0
   1afb0:	str	lr, [sp, #32]
   1afb4:	beq	1b020 <__assert_fail@plt+0x9a1c>
   1afb8:	ldr	lr, [ip, #28]
   1afbc:	cmp	lr, #0
   1afc0:	str	lr, [sp, #36]	; 0x24
   1afc4:	beq	1b028 <__assert_fail@plt+0x9a24>
   1afc8:	ldr	lr, [ip, #32]
   1afcc:	cmp	lr, #0
   1afd0:	str	lr, [sp, #40]	; 0x28
   1afd4:	beq	1b030 <__assert_fail@plt+0x9a2c>
   1afd8:	ldr	lr, [ip, #36]	; 0x24
   1afdc:	mov	ip, #10
   1afe0:	cmp	lr, #0
   1afe4:	str	lr, [sp, #44]	; 0x2c
   1afe8:	movweq	ip, #9
   1afec:	b	1b034 <__assert_fail@plt+0x9a30>
   1aff0:	mov	ip, #0
   1aff4:	b	1b034 <__assert_fail@plt+0x9a30>
   1aff8:	mov	ip, #1
   1affc:	b	1b034 <__assert_fail@plt+0x9a30>
   1b000:	mov	ip, #2
   1b004:	b	1b034 <__assert_fail@plt+0x9a30>
   1b008:	mov	ip, #3
   1b00c:	b	1b034 <__assert_fail@plt+0x9a30>
   1b010:	mov	ip, #4
   1b014:	b	1b034 <__assert_fail@plt+0x9a30>
   1b018:	mov	ip, #5
   1b01c:	b	1b034 <__assert_fail@plt+0x9a30>
   1b020:	mov	ip, #6
   1b024:	b	1b034 <__assert_fail@plt+0x9a30>
   1b028:	mov	ip, #7
   1b02c:	b	1b034 <__assert_fail@plt+0x9a30>
   1b030:	mov	ip, #8
   1b034:	add	lr, sp, #8
   1b038:	str	ip, [sp, #4]
   1b03c:	str	lr, [sp]
   1b040:	bl	1abc8 <__assert_fail@plt+0x95c4>
   1b044:	mov	sp, fp
   1b048:	pop	{fp, pc}
   1b04c:	push	{fp, lr}
   1b050:	mov	fp, sp
   1b054:	sub	sp, sp, #56	; 0x38
   1b058:	add	ip, fp, #8
   1b05c:	str	ip, [sp, #12]
   1b060:	ldr	lr, [fp, #8]
   1b064:	cmp	lr, #0
   1b068:	str	lr, [sp, #16]
   1b06c:	beq	1b108 <__assert_fail@plt+0x9b04>
   1b070:	ldr	lr, [ip, #4]
   1b074:	cmp	lr, #0
   1b078:	str	lr, [sp, #20]
   1b07c:	beq	1b110 <__assert_fail@plt+0x9b0c>
   1b080:	ldr	lr, [ip, #8]
   1b084:	cmp	lr, #0
   1b088:	str	lr, [sp, #24]
   1b08c:	beq	1b118 <__assert_fail@plt+0x9b14>
   1b090:	ldr	lr, [ip, #12]
   1b094:	cmp	lr, #0
   1b098:	str	lr, [sp, #28]
   1b09c:	beq	1b120 <__assert_fail@plt+0x9b1c>
   1b0a0:	ldr	lr, [ip, #16]
   1b0a4:	cmp	lr, #0
   1b0a8:	str	lr, [sp, #32]
   1b0ac:	beq	1b128 <__assert_fail@plt+0x9b24>
   1b0b0:	ldr	lr, [ip, #20]
   1b0b4:	cmp	lr, #0
   1b0b8:	str	lr, [sp, #36]	; 0x24
   1b0bc:	beq	1b130 <__assert_fail@plt+0x9b2c>
   1b0c0:	ldr	lr, [ip, #24]
   1b0c4:	cmp	lr, #0
   1b0c8:	str	lr, [sp, #40]	; 0x28
   1b0cc:	beq	1b138 <__assert_fail@plt+0x9b34>
   1b0d0:	ldr	lr, [ip, #28]
   1b0d4:	cmp	lr, #0
   1b0d8:	str	lr, [sp, #44]	; 0x2c
   1b0dc:	beq	1b140 <__assert_fail@plt+0x9b3c>
   1b0e0:	ldr	lr, [ip, #32]
   1b0e4:	cmp	lr, #0
   1b0e8:	str	lr, [sp, #48]	; 0x30
   1b0ec:	beq	1b148 <__assert_fail@plt+0x9b44>
   1b0f0:	ldr	lr, [ip, #36]	; 0x24
   1b0f4:	mov	ip, #10
   1b0f8:	cmp	lr, #0
   1b0fc:	str	lr, [sp, #52]	; 0x34
   1b100:	movweq	ip, #9
   1b104:	b	1b14c <__assert_fail@plt+0x9b48>
   1b108:	mov	ip, #0
   1b10c:	b	1b14c <__assert_fail@plt+0x9b48>
   1b110:	mov	ip, #1
   1b114:	b	1b14c <__assert_fail@plt+0x9b48>
   1b118:	mov	ip, #2
   1b11c:	b	1b14c <__assert_fail@plt+0x9b48>
   1b120:	mov	ip, #3
   1b124:	b	1b14c <__assert_fail@plt+0x9b48>
   1b128:	mov	ip, #4
   1b12c:	b	1b14c <__assert_fail@plt+0x9b48>
   1b130:	mov	ip, #5
   1b134:	b	1b14c <__assert_fail@plt+0x9b48>
   1b138:	mov	ip, #6
   1b13c:	b	1b14c <__assert_fail@plt+0x9b48>
   1b140:	mov	ip, #7
   1b144:	b	1b14c <__assert_fail@plt+0x9b48>
   1b148:	mov	ip, #8
   1b14c:	add	lr, sp, #16
   1b150:	str	ip, [sp, #4]
   1b154:	str	lr, [sp]
   1b158:	bl	1abc8 <__assert_fail@plt+0x95c4>
   1b15c:	mov	sp, fp
   1b160:	pop	{fp, pc}
   1b164:	push	{fp, lr}
   1b168:	mov	fp, sp
   1b16c:	movw	r0, #4564	; 0x11d4
   1b170:	movt	r0, #3
   1b174:	ldr	r1, [r0]
   1b178:	movw	r0, #1187	; 0x4a3
   1b17c:	movt	r0, #2
   1b180:	bl	112c8 <fputs_unlocked@plt>
   1b184:	movw	r1, #3107	; 0xc23
   1b188:	mov	r0, #0
   1b18c:	mov	r2, #5
   1b190:	movt	r1, #2
   1b194:	bl	1137c <dcgettext@plt>
   1b198:	movw	r2, #3127	; 0xc37
   1b19c:	mov	r1, r0
   1b1a0:	mov	r0, #1
   1b1a4:	movt	r2, #2
   1b1a8:	bl	11514 <__printf_chk@plt>
   1b1ac:	movw	r1, #3149	; 0xc4d
   1b1b0:	mov	r0, #0
   1b1b4:	mov	r2, #5
   1b1b8:	movt	r1, #2
   1b1bc:	bl	1137c <dcgettext@plt>
   1b1c0:	movw	r2, #62107	; 0xf29b
   1b1c4:	movw	r3, #1447	; 0x5a7
   1b1c8:	mov	r1, r0
   1b1cc:	mov	r0, #1
   1b1d0:	movt	r2, #1
   1b1d4:	movt	r3, #2
   1b1d8:	bl	11514 <__printf_chk@plt>
   1b1dc:	movw	r1, #3169	; 0xc61
   1b1e0:	mov	r0, #0
   1b1e4:	mov	r2, #5
   1b1e8:	movt	r1, #2
   1b1ec:	bl	1137c <dcgettext@plt>
   1b1f0:	movw	r2, #3208	; 0xc88
   1b1f4:	mov	r1, r0
   1b1f8:	mov	r0, #1
   1b1fc:	movt	r2, #2
   1b200:	pop	{fp, lr}
   1b204:	b	11514 <__printf_chk@plt>
   1b208:	push	{r4, r5, r6, sl, fp, lr}
   1b20c:	add	fp, sp, #16
   1b210:	mov	r4, r2
   1b214:	mov	r5, r1
   1b218:	mov	r6, r0
   1b21c:	bl	1ee60 <__assert_fail@plt+0xd85c>
   1b220:	cmp	r0, #0
   1b224:	popne	{r4, r5, r6, sl, fp, pc}
   1b228:	cmp	r6, #0
   1b22c:	beq	1b240 <__assert_fail@plt+0x9c3c>
   1b230:	cmp	r5, #0
   1b234:	cmpne	r4, #0
   1b238:	bne	1b240 <__assert_fail@plt+0x9c3c>
   1b23c:	pop	{r4, r5, r6, sl, fp, pc}
   1b240:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b244:	push	{r4, r5, r6, sl, fp, lr}
   1b248:	add	fp, sp, #16
   1b24c:	mov	r4, r2
   1b250:	mov	r5, r1
   1b254:	mov	r6, r0
   1b258:	bl	1ee60 <__assert_fail@plt+0xd85c>
   1b25c:	cmp	r0, #0
   1b260:	popne	{r4, r5, r6, sl, fp, pc}
   1b264:	cmp	r6, #0
   1b268:	beq	1b27c <__assert_fail@plt+0x9c78>
   1b26c:	cmp	r5, #0
   1b270:	cmpne	r4, #0
   1b274:	bne	1b27c <__assert_fail@plt+0x9c78>
   1b278:	pop	{r4, r5, r6, sl, fp, pc}
   1b27c:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b280:	push	{fp, lr}
   1b284:	mov	fp, sp
   1b288:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1b28c:	cmp	r0, #0
   1b290:	popne	{fp, pc}
   1b294:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b298:	push	{fp, lr}
   1b29c:	mov	fp, sp
   1b2a0:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1b2a4:	cmp	r0, #0
   1b2a8:	popne	{fp, pc}
   1b2ac:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b2b0:	push	{fp, lr}
   1b2b4:	mov	fp, sp
   1b2b8:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1b2bc:	cmp	r0, #0
   1b2c0:	popne	{fp, pc}
   1b2c4:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b2c8:	push	{r4, r5, fp, lr}
   1b2cc:	add	fp, sp, #8
   1b2d0:	mov	r4, r1
   1b2d4:	mov	r5, r0
   1b2d8:	bl	1eb0c <__assert_fail@plt+0xd508>
   1b2dc:	cmp	r0, #0
   1b2e0:	popne	{r4, r5, fp, pc}
   1b2e4:	cmp	r5, #0
   1b2e8:	beq	1b2f8 <__assert_fail@plt+0x9cf4>
   1b2ec:	cmp	r4, #0
   1b2f0:	bne	1b2f8 <__assert_fail@plt+0x9cf4>
   1b2f4:	pop	{r4, r5, fp, pc}
   1b2f8:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b2fc:	push	{fp, lr}
   1b300:	mov	fp, sp
   1b304:	cmp	r1, #0
   1b308:	orreq	r1, r1, #1
   1b30c:	bl	1eb0c <__assert_fail@plt+0xd508>
   1b310:	cmp	r0, #0
   1b314:	popne	{fp, pc}
   1b318:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b31c:	push	{fp, lr}
   1b320:	mov	fp, sp
   1b324:	clz	r3, r2
   1b328:	lsr	ip, r3, #5
   1b32c:	clz	r3, r1
   1b330:	lsr	r3, r3, #5
   1b334:	orrs	r3, r3, ip
   1b338:	movwne	r1, #1
   1b33c:	movwne	r2, #1
   1b340:	bl	1ee60 <__assert_fail@plt+0xd85c>
   1b344:	cmp	r0, #0
   1b348:	popne	{fp, pc}
   1b34c:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b350:	push	{fp, lr}
   1b354:	mov	fp, sp
   1b358:	mov	r2, r1
   1b35c:	mov	r1, r0
   1b360:	mov	r0, #0
   1b364:	bl	1ee60 <__assert_fail@plt+0xd85c>
   1b368:	cmp	r0, #0
   1b36c:	popne	{fp, pc}
   1b370:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b374:	push	{fp, lr}
   1b378:	mov	fp, sp
   1b37c:	mov	r2, r1
   1b380:	mov	r1, r0
   1b384:	clz	r0, r2
   1b388:	clz	r3, r1
   1b38c:	lsr	r0, r0, #5
   1b390:	lsr	r3, r3, #5
   1b394:	orrs	r0, r3, r0
   1b398:	mov	r0, #0
   1b39c:	movwne	r1, #1
   1b3a0:	movwne	r2, #1
   1b3a4:	bl	1ee60 <__assert_fail@plt+0xd85c>
   1b3a8:	cmp	r0, #0
   1b3ac:	popne	{fp, pc}
   1b3b0:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b3b4:	push	{r4, r5, r6, sl, fp, lr}
   1b3b8:	add	fp, sp, #16
   1b3bc:	ldr	r5, [r1]
   1b3c0:	mov	r4, r1
   1b3c4:	mov	r6, r0
   1b3c8:	cmp	r0, #0
   1b3cc:	beq	1b3e4 <__assert_fail@plt+0x9de0>
   1b3d0:	mov	r0, #1
   1b3d4:	add	r0, r0, r5, lsr #1
   1b3d8:	adds	r5, r5, r0
   1b3dc:	bcc	1b3ec <__assert_fail@plt+0x9de8>
   1b3e0:	b	1b428 <__assert_fail@plt+0x9e24>
   1b3e4:	cmp	r5, #0
   1b3e8:	movweq	r5, #64	; 0x40
   1b3ec:	mov	r0, r6
   1b3f0:	mov	r1, r5
   1b3f4:	mov	r2, #1
   1b3f8:	bl	1ee60 <__assert_fail@plt+0xd85c>
   1b3fc:	cmp	r5, #0
   1b400:	mov	r1, r5
   1b404:	movwne	r1, #1
   1b408:	cmp	r0, #0
   1b40c:	bne	1b420 <__assert_fail@plt+0x9e1c>
   1b410:	clz	r2, r6
   1b414:	lsr	r2, r2, #5
   1b418:	orrs	r1, r2, r1
   1b41c:	bne	1b428 <__assert_fail@plt+0x9e24>
   1b420:	str	r5, [r4]
   1b424:	pop	{r4, r5, r6, sl, fp, pc}
   1b428:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b42c:	push	{r4, r5, r6, r7, fp, lr}
   1b430:	add	fp, sp, #16
   1b434:	ldr	r5, [r1]
   1b438:	mov	r6, r2
   1b43c:	mov	r4, r1
   1b440:	mov	r7, r0
   1b444:	cmp	r0, #0
   1b448:	beq	1b460 <__assert_fail@plt+0x9e5c>
   1b44c:	mov	r0, #1
   1b450:	add	r0, r0, r5, lsr #1
   1b454:	adds	r5, r5, r0
   1b458:	bcc	1b478 <__assert_fail@plt+0x9e74>
   1b45c:	b	1b4ac <__assert_fail@plt+0x9ea8>
   1b460:	cmp	r5, #0
   1b464:	bne	1b478 <__assert_fail@plt+0x9e74>
   1b468:	mov	r0, #64	; 0x40
   1b46c:	cmp	r6, #64	; 0x40
   1b470:	udiv	r5, r0, r6
   1b474:	addhi	r5, r5, #1
   1b478:	mov	r0, r7
   1b47c:	mov	r1, r5
   1b480:	mov	r2, r6
   1b484:	bl	1ee60 <__assert_fail@plt+0xd85c>
   1b488:	cmp	r0, #0
   1b48c:	bne	1b4a4 <__assert_fail@plt+0x9ea0>
   1b490:	cmp	r7, #0
   1b494:	beq	1b4ac <__assert_fail@plt+0x9ea8>
   1b498:	cmp	r6, #0
   1b49c:	cmpne	r5, #0
   1b4a0:	bne	1b4ac <__assert_fail@plt+0x9ea8>
   1b4a4:	str	r5, [r4]
   1b4a8:	pop	{r4, r5, r6, r7, fp, pc}
   1b4ac:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b4b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b4b4:	add	fp, sp, #24
   1b4b8:	mov	r8, r1
   1b4bc:	ldr	r1, [r1]
   1b4c0:	mov	r5, r0
   1b4c4:	add	r0, r1, r1, asr #1
   1b4c8:	cmp	r0, r1
   1b4cc:	mvnvs	r0, #-2147483648	; 0x80000000
   1b4d0:	cmp	r0, r3
   1b4d4:	mov	r7, r0
   1b4d8:	movgt	r7, r3
   1b4dc:	cmn	r3, #1
   1b4e0:	movle	r7, r0
   1b4e4:	ldr	r0, [fp, #8]
   1b4e8:	cmn	r0, #1
   1b4ec:	ble	1b514 <__assert_fail@plt+0x9f10>
   1b4f0:	cmp	r0, #0
   1b4f4:	beq	1b568 <__assert_fail@plt+0x9f64>
   1b4f8:	cmn	r7, #1
   1b4fc:	ble	1b53c <__assert_fail@plt+0x9f38>
   1b500:	mvn	r4, #-2147483648	; 0x80000000
   1b504:	udiv	r6, r4, r0
   1b508:	cmp	r6, r7
   1b50c:	bge	1b568 <__assert_fail@plt+0x9f64>
   1b510:	b	1b578 <__assert_fail@plt+0x9f74>
   1b514:	cmn	r7, #1
   1b518:	ble	1b558 <__assert_fail@plt+0x9f54>
   1b51c:	cmn	r0, #1
   1b520:	beq	1b568 <__assert_fail@plt+0x9f64>
   1b524:	mov	r6, #-2147483648	; 0x80000000
   1b528:	mvn	r4, #-2147483648	; 0x80000000
   1b52c:	sdiv	r6, r6, r0
   1b530:	cmp	r6, r7
   1b534:	bge	1b568 <__assert_fail@plt+0x9f64>
   1b538:	b	1b578 <__assert_fail@plt+0x9f74>
   1b53c:	beq	1b568 <__assert_fail@plt+0x9f64>
   1b540:	mov	r6, #-2147483648	; 0x80000000
   1b544:	mvn	r4, #-2147483648	; 0x80000000
   1b548:	sdiv	r6, r6, r7
   1b54c:	cmp	r6, r0
   1b550:	bge	1b568 <__assert_fail@plt+0x9f64>
   1b554:	b	1b578 <__assert_fail@plt+0x9f74>
   1b558:	mvn	r4, #-2147483648	; 0x80000000
   1b55c:	sdiv	r6, r4, r0
   1b560:	cmp	r7, r6
   1b564:	blt	1b578 <__assert_fail@plt+0x9f74>
   1b568:	mul	r6, r7, r0
   1b56c:	mov	r4, #64	; 0x40
   1b570:	cmp	r6, #63	; 0x3f
   1b574:	bgt	1b580 <__assert_fail@plt+0x9f7c>
   1b578:	sdiv	r7, r4, r0
   1b57c:	mul	r6, r7, r0
   1b580:	cmp	r5, #0
   1b584:	moveq	r4, #0
   1b588:	streq	r4, [r8]
   1b58c:	sub	r4, r7, r1
   1b590:	cmp	r4, r2
   1b594:	bge	1b640 <__assert_fail@plt+0xa03c>
   1b598:	add	r7, r1, r2
   1b59c:	mov	r6, #0
   1b5a0:	mov	r2, #0
   1b5a4:	cmp	r7, r3
   1b5a8:	movwgt	r6, #1
   1b5ac:	cmn	r3, #1
   1b5b0:	movwgt	r2, #1
   1b5b4:	cmp	r7, r1
   1b5b8:	bvs	1b674 <__assert_fail@plt+0xa070>
   1b5bc:	ands	r1, r2, r6
   1b5c0:	bne	1b674 <__assert_fail@plt+0xa070>
   1b5c4:	cmn	r0, #1
   1b5c8:	ble	1b5f0 <__assert_fail@plt+0x9fec>
   1b5cc:	cmp	r0, #0
   1b5d0:	beq	1b63c <__assert_fail@plt+0xa038>
   1b5d4:	cmn	r7, #1
   1b5d8:	ble	1b614 <__assert_fail@plt+0xa010>
   1b5dc:	mvn	r1, #-2147483648	; 0x80000000
   1b5e0:	udiv	r1, r1, r0
   1b5e4:	cmp	r1, r7
   1b5e8:	bge	1b63c <__assert_fail@plt+0xa038>
   1b5ec:	b	1b674 <__assert_fail@plt+0xa070>
   1b5f0:	cmn	r7, #1
   1b5f4:	ble	1b62c <__assert_fail@plt+0xa028>
   1b5f8:	cmn	r0, #1
   1b5fc:	beq	1b63c <__assert_fail@plt+0xa038>
   1b600:	mov	r1, #-2147483648	; 0x80000000
   1b604:	sdiv	r1, r1, r0
   1b608:	cmp	r1, r7
   1b60c:	bge	1b63c <__assert_fail@plt+0xa038>
   1b610:	b	1b674 <__assert_fail@plt+0xa070>
   1b614:	beq	1b63c <__assert_fail@plt+0xa038>
   1b618:	mov	r1, #-2147483648	; 0x80000000
   1b61c:	sdiv	r1, r1, r7
   1b620:	cmp	r1, r0
   1b624:	bge	1b63c <__assert_fail@plt+0xa038>
   1b628:	b	1b674 <__assert_fail@plt+0xa070>
   1b62c:	mvn	r1, #-2147483648	; 0x80000000
   1b630:	sdiv	r1, r1, r0
   1b634:	cmp	r7, r1
   1b638:	blt	1b674 <__assert_fail@plt+0xa070>
   1b63c:	mul	r6, r7, r0
   1b640:	mov	r0, r5
   1b644:	mov	r1, r6
   1b648:	bl	1eb0c <__assert_fail@plt+0xd508>
   1b64c:	cmp	r6, #0
   1b650:	movwne	r6, #1
   1b654:	cmp	r0, #0
   1b658:	bne	1b66c <__assert_fail@plt+0xa068>
   1b65c:	clz	r1, r5
   1b660:	lsr	r1, r1, #5
   1b664:	orrs	r1, r1, r6
   1b668:	bne	1b674 <__assert_fail@plt+0xa070>
   1b66c:	str	r7, [r8]
   1b670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b674:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b678:	push	{fp, lr}
   1b67c:	mov	fp, sp
   1b680:	mov	r1, #1
   1b684:	bl	1ea88 <__assert_fail@plt+0xd484>
   1b688:	cmp	r0, #0
   1b68c:	popne	{fp, pc}
   1b690:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b694:	push	{fp, lr}
   1b698:	mov	fp, sp
   1b69c:	bl	1ea88 <__assert_fail@plt+0xd484>
   1b6a0:	cmp	r0, #0
   1b6a4:	popne	{fp, pc}
   1b6a8:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b6ac:	push	{fp, lr}
   1b6b0:	mov	fp, sp
   1b6b4:	mov	r1, #1
   1b6b8:	bl	1ea88 <__assert_fail@plt+0xd484>
   1b6bc:	cmp	r0, #0
   1b6c0:	popne	{fp, pc}
   1b6c4:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b6c8:	push	{fp, lr}
   1b6cc:	mov	fp, sp
   1b6d0:	bl	1ea88 <__assert_fail@plt+0xd484>
   1b6d4:	cmp	r0, #0
   1b6d8:	popne	{fp, pc}
   1b6dc:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b6e0:	push	{r4, r5, fp, lr}
   1b6e4:	add	fp, sp, #8
   1b6e8:	mov	r5, r0
   1b6ec:	mov	r0, r1
   1b6f0:	mov	r4, r1
   1b6f4:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1b6f8:	cmp	r0, #0
   1b6fc:	beq	1b710 <__assert_fail@plt+0xa10c>
   1b700:	mov	r1, r5
   1b704:	mov	r2, r4
   1b708:	pop	{r4, r5, fp, lr}
   1b70c:	b	11358 <memcpy@plt>
   1b710:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b714:	push	{r4, r5, fp, lr}
   1b718:	add	fp, sp, #8
   1b71c:	mov	r5, r0
   1b720:	mov	r0, r1
   1b724:	mov	r4, r1
   1b728:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1b72c:	cmp	r0, #0
   1b730:	beq	1b744 <__assert_fail@plt+0xa140>
   1b734:	mov	r1, r5
   1b738:	mov	r2, r4
   1b73c:	pop	{r4, r5, fp, lr}
   1b740:	b	11358 <memcpy@plt>
   1b744:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b748:	push	{r4, r5, fp, lr}
   1b74c:	add	fp, sp, #8
   1b750:	mov	r5, r0
   1b754:	add	r0, r1, #1
   1b758:	mov	r4, r1
   1b75c:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1b760:	cmp	r0, #0
   1b764:	beq	1b780 <__assert_fail@plt+0xa17c>
   1b768:	mov	r1, #0
   1b76c:	mov	r2, r4
   1b770:	strb	r1, [r0, r4]
   1b774:	mov	r1, r5
   1b778:	pop	{r4, r5, fp, lr}
   1b77c:	b	11358 <memcpy@plt>
   1b780:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b784:	push	{r4, r5, fp, lr}
   1b788:	add	fp, sp, #8
   1b78c:	mov	r4, r0
   1b790:	bl	114b4 <strlen@plt>
   1b794:	add	r5, r0, #1
   1b798:	mov	r0, r5
   1b79c:	bl	1eadc <__assert_fail@plt+0xd4d8>
   1b7a0:	cmp	r0, #0
   1b7a4:	beq	1b7b8 <__assert_fail@plt+0xa1b4>
   1b7a8:	mov	r1, r4
   1b7ac:	mov	r2, r5
   1b7b0:	pop	{r4, r5, fp, lr}
   1b7b4:	b	11358 <memcpy@plt>
   1b7b8:	bl	1b7bc <__assert_fail@plt+0xa1b8>
   1b7bc:	push	{fp, lr}
   1b7c0:	mov	fp, sp
   1b7c4:	movw	r0, #4468	; 0x1174
   1b7c8:	movw	r1, #3284	; 0xcd4
   1b7cc:	mov	r2, #5
   1b7d0:	movt	r0, #3
   1b7d4:	movt	r1, #2
   1b7d8:	ldr	r4, [r0]
   1b7dc:	mov	r0, #0
   1b7e0:	bl	1137c <dcgettext@plt>
   1b7e4:	movw	r2, #2215	; 0x8a7
   1b7e8:	mov	r3, r0
   1b7ec:	mov	r0, r4
   1b7f0:	mov	r1, #0
   1b7f4:	movt	r2, #2
   1b7f8:	bl	11418 <error@plt>
   1b7fc:	bl	115ec <abort@plt>
   1b800:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b804:	add	fp, sp, #24
   1b808:	sub	sp, sp, #16
   1b80c:	mov	r8, r0
   1b810:	ldr	r0, [fp, #16]
   1b814:	mov	r7, r3
   1b818:	mov	r4, r2
   1b81c:	mov	r2, r1
   1b820:	add	r3, sp, #8
   1b824:	mov	r1, #0
   1b828:	str	r0, [sp]
   1b82c:	mov	r0, r8
   1b830:	bl	1b910 <__assert_fail@plt+0xa30c>
   1b834:	cmp	r0, #0
   1b838:	bne	1b8e4 <__assert_fail@plt+0xa2e0>
   1b83c:	ldr	r6, [sp, #8]
   1b840:	ldr	r5, [sp, #12]
   1b844:	subs	r0, r6, r4
   1b848:	sbcs	r0, r5, r7
   1b84c:	blt	1b870 <__assert_fail@plt+0xa26c>
   1b850:	ldr	r1, [fp, #8]
   1b854:	ldr	r0, [fp, #12]
   1b858:	subs	r1, r1, r6
   1b85c:	sbcs	r0, r0, r5
   1b860:	movge	r0, r6
   1b864:	movge	r1, r5
   1b868:	subge	sp, fp, #24
   1b86c:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b870:	subs	r0, r6, #1073741824	; 0x40000000
   1b874:	sbcs	r0, r5, #0
   1b878:	blt	1b888 <__assert_fail@plt+0xa284>
   1b87c:	bl	114e4 <__errno_location@plt>
   1b880:	mov	r1, #75	; 0x4b
   1b884:	b	1b8a4 <__assert_fail@plt+0xa2a0>
   1b888:	bl	114e4 <__errno_location@plt>
   1b88c:	mvn	r2, #1073741824	; 0x40000000
   1b890:	mvn	r1, #0
   1b894:	subs	r2, r2, r6
   1b898:	sbcs	r1, r1, r5
   1b89c:	movlt	r1, #34	; 0x22
   1b8a0:	movge	r1, #75	; 0x4b
   1b8a4:	str	r1, [r0]
   1b8a8:	ldr	r6, [r0]
   1b8ac:	ldr	r4, [fp, #24]
   1b8b0:	ldr	r5, [fp, #20]
   1b8b4:	mov	r0, r8
   1b8b8:	bl	1a3bc <__assert_fail@plt+0x8db8>
   1b8bc:	subs	r1, r6, #22
   1b8c0:	movw	r2, #2211	; 0x8a3
   1b8c4:	str	r0, [sp]
   1b8c8:	mov	r3, r5
   1b8cc:	movne	r1, r6
   1b8d0:	cmp	r4, #0
   1b8d4:	movt	r2, #2
   1b8d8:	movweq	r4, #1
   1b8dc:	mov	r0, r4
   1b8e0:	bl	11418 <error@plt>
   1b8e4:	cmp	r0, #1
   1b8e8:	beq	1b87c <__assert_fail@plt+0xa278>
   1b8ec:	cmp	r0, #3
   1b8f0:	bne	1b900 <__assert_fail@plt+0xa2fc>
   1b8f4:	bl	114e4 <__errno_location@plt>
   1b8f8:	mov	r1, #0
   1b8fc:	b	1b8a4 <__assert_fail@plt+0xa2a0>
   1b900:	bl	114e4 <__errno_location@plt>
   1b904:	b	1b8a8 <__assert_fail@plt+0xa2a4>
   1b908:	mov	r1, #10
   1b90c:	b	1b800 <__assert_fail@plt+0xa1fc>
   1b910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b914:	add	fp, sp, #28
   1b918:	sub	sp, sp, #36	; 0x24
   1b91c:	cmp	r2, #37	; 0x25
   1b920:	bcs	1d208 <__assert_fail@plt+0xbc04>
   1b924:	ldr	r8, [fp, #8]
   1b928:	mov	r9, r3
   1b92c:	mov	r6, r2
   1b930:	mov	r7, r1
   1b934:	mov	r4, r0
   1b938:	bl	114e4 <__errno_location@plt>
   1b93c:	cmp	r7, #0
   1b940:	add	sl, sp, #32
   1b944:	mov	r5, r0
   1b948:	mov	r0, #0
   1b94c:	mov	r2, r6
   1b950:	mov	r3, #0
   1b954:	movne	sl, r7
   1b958:	str	r0, [r5]
   1b95c:	mov	r0, r4
   1b960:	mov	r1, sl
   1b964:	bl	115b0 <__strtoll_internal@plt>
   1b968:	mov	r7, r1
   1b96c:	ldr	r1, [sl]
   1b970:	cmp	r1, r4
   1b974:	beq	1b9a4 <__assert_fail@plt+0xa3a0>
   1b978:	mov	r6, r0
   1b97c:	ldr	r0, [r5]
   1b980:	cmp	r0, #0
   1b984:	beq	1b9e4 <__assert_fail@plt+0xa3e0>
   1b988:	mov	r5, #4
   1b98c:	cmp	r0, #34	; 0x22
   1b990:	bne	1ce18 <__assert_fail@plt+0xb814>
   1b994:	mov	r5, #1
   1b998:	cmp	r8, #0
   1b99c:	bne	1b9f0 <__assert_fail@plt+0xa3ec>
   1b9a0:	b	1ce14 <__assert_fail@plt+0xb810>
   1b9a4:	mov	r5, #4
   1b9a8:	cmp	r8, #0
   1b9ac:	beq	1ce18 <__assert_fail@plt+0xb814>
   1b9b0:	mov	r6, r1
   1b9b4:	ldrb	r1, [r4]
   1b9b8:	cmp	r1, #0
   1b9bc:	beq	1ce18 <__assert_fail@plt+0xb814>
   1b9c0:	mov	r0, r8
   1b9c4:	bl	114c0 <strchr@plt>
   1b9c8:	cmp	r0, #0
   1b9cc:	beq	1ce18 <__assert_fail@plt+0xb814>
   1b9d0:	mov	r1, r6
   1b9d4:	mov	r5, #0
   1b9d8:	mov	r6, #1
   1b9dc:	mov	r7, #0
   1b9e0:	b	1b9f0 <__assert_fail@plt+0xa3ec>
   1b9e4:	mov	r5, r0
   1b9e8:	cmp	r8, #0
   1b9ec:	beq	1ce14 <__assert_fail@plt+0xb810>
   1b9f0:	ldrb	r4, [r1]
   1b9f4:	cmp	r4, #0
   1b9f8:	beq	1ce14 <__assert_fail@plt+0xb810>
   1b9fc:	str	r1, [sp, #20]
   1ba00:	mov	r0, r8
   1ba04:	mov	r1, r4
   1ba08:	bl	114c0 <strchr@plt>
   1ba0c:	cmp	r0, #0
   1ba10:	beq	1bc9c <__assert_fail@plt+0xa698>
   1ba14:	sub	r0, r4, #69	; 0x45
   1ba18:	mov	r1, #1
   1ba1c:	mov	r3, #0
   1ba20:	mov	r2, #1024	; 0x400
   1ba24:	cmp	r0, #47	; 0x2f
   1ba28:	str	r1, [sp, #16]
   1ba2c:	bhi	1bb68 <__assert_fail@plt+0xa564>
   1ba30:	add	r1, pc, #0
   1ba34:	ldr	pc, [r1, r0, lsl #2]
   1ba38:	strdeq	fp, [r1], -r8
   1ba3c:	andeq	fp, r1, r8, ror #22
   1ba40:	strdeq	fp, [r1], -r8
   1ba44:	andeq	fp, r1, r8, ror #22
   1ba48:	andeq	fp, r1, r8, ror #22
   1ba4c:	andeq	fp, r1, r8, ror #22
   1ba50:	strdeq	fp, [r1], -r8
   1ba54:	andeq	fp, r1, r8, ror #22
   1ba58:	strdeq	fp, [r1], -r8
   1ba5c:	andeq	fp, r1, r8, ror #22
   1ba60:	andeq	fp, r1, r8, ror #22
   1ba64:	strdeq	fp, [r1], -r8
   1ba68:	andeq	fp, r1, r8, ror #22
   1ba6c:	andeq	fp, r1, r8, ror #22
   1ba70:	andeq	fp, r1, r8, ror #22
   1ba74:	strdeq	fp, [r1], -r8
   1ba78:	andeq	fp, r1, r8, ror #22
   1ba7c:	andeq	fp, r1, r8, ror #22
   1ba80:	andeq	fp, r1, r8, ror #22
   1ba84:	andeq	fp, r1, r8, ror #22
   1ba88:	strdeq	fp, [r1], -r8
   1ba8c:	strdeq	fp, [r1], -r8
   1ba90:	andeq	fp, r1, r8, ror #22
   1ba94:	andeq	fp, r1, r8, ror #22
   1ba98:	andeq	fp, r1, r8, ror #22
   1ba9c:	andeq	fp, r1, r8, ror #22
   1baa0:	andeq	fp, r1, r8, ror #22
   1baa4:	andeq	fp, r1, r8, ror #22
   1baa8:	andeq	fp, r1, r8, ror #22
   1baac:	andeq	fp, r1, r8, ror #22
   1bab0:	andeq	fp, r1, r8, ror #22
   1bab4:	andeq	fp, r1, r8, ror #22
   1bab8:	andeq	fp, r1, r8, ror #22
   1babc:	andeq	fp, r1, r8, ror #22
   1bac0:	strdeq	fp, [r1], -r8
   1bac4:	andeq	fp, r1, r8, ror #22
   1bac8:	andeq	fp, r1, r8, ror #22
   1bacc:	andeq	fp, r1, r8, ror #22
   1bad0:	strdeq	fp, [r1], -r8
   1bad4:	andeq	fp, r1, r8, ror #22
   1bad8:	strdeq	fp, [r1], -r8
   1badc:	andeq	fp, r1, r8, ror #22
   1bae0:	andeq	fp, r1, r8, ror #22
   1bae4:	andeq	fp, r1, r8, ror #22
   1bae8:	andeq	fp, r1, r8, ror #22
   1baec:	andeq	fp, r1, r8, ror #22
   1baf0:	andeq	fp, r1, r8, ror #22
   1baf4:	strdeq	fp, [r1], -r8
   1baf8:	mov	r0, r8
   1bafc:	mov	r1, #48	; 0x30
   1bb00:	bl	114c0 <strchr@plt>
   1bb04:	cmp	r0, #0
   1bb08:	beq	1bb34 <__assert_fail@plt+0xa530>
   1bb0c:	ldr	r1, [sp, #20]
   1bb10:	ldrb	r0, [r1, #1]
   1bb14:	cmp	r0, #66	; 0x42
   1bb18:	cmpne	r0, #68	; 0x44
   1bb1c:	bne	1bb3c <__assert_fail@plt+0xa538>
   1bb20:	mov	r0, #2
   1bb24:	mov	r2, #1000	; 0x3e8
   1bb28:	mov	r3, #0
   1bb2c:	str	r0, [sp, #16]
   1bb30:	b	1bb68 <__assert_fail@plt+0xa564>
   1bb34:	mov	r3, #0
   1bb38:	b	1bb64 <__assert_fail@plt+0xa560>
   1bb3c:	cmp	r0, #105	; 0x69
   1bb40:	mov	r3, #0
   1bb44:	bne	1bb64 <__assert_fail@plt+0xa560>
   1bb48:	ldrb	r0, [r1, #2]
   1bb4c:	mov	r1, #1
   1bb50:	mov	r2, #1024	; 0x400
   1bb54:	cmp	r0, #66	; 0x42
   1bb58:	movweq	r1, #3
   1bb5c:	str	r1, [sp, #16]
   1bb60:	b	1bb68 <__assert_fail@plt+0xa564>
   1bb64:	mov	r2, #1024	; 0x400
   1bb68:	sub	r0, r4, #66	; 0x42
   1bb6c:	cmp	r0, #53	; 0x35
   1bb70:	bhi	1bc9c <__assert_fail@plt+0xa698>
   1bb74:	add	r1, pc, #8
   1bb78:	str	r3, [sp, #28]
   1bb7c:	str	r2, [sp, #24]
   1bb80:	ldr	pc, [r1, r0, lsl #2]
   1bb84:	muleq	r1, ip, sp
   1bb88:	muleq	r1, ip, ip
   1bb8c:	muleq	r1, ip, ip
   1bb90:			; <UNDEFINED> instruction: 0x0001bdb0
   1bb94:	muleq	r1, ip, ip
   1bb98:	andeq	fp, r1, ip, asr ip
   1bb9c:	muleq	r1, ip, ip
   1bba0:	muleq	r1, ip, ip
   1bba4:	muleq	r1, ip, ip
   1bba8:	andeq	fp, r1, r4, lsr #25
   1bbac:	muleq	r1, ip, ip
   1bbb0:	ldrdeq	fp, [r1], -r4
   1bbb4:	muleq	r1, ip, ip
   1bbb8:	muleq	r1, ip, ip
   1bbbc:	strdeq	fp, [r1], -r4
   1bbc0:	muleq	r1, ip, ip
   1bbc4:	muleq	r1, ip, ip
   1bbc8:	muleq	r1, ip, ip
   1bbcc:	andeq	fp, r1, r4, lsl sp
   1bbd0:	muleq	r1, ip, ip
   1bbd4:	muleq	r1, ip, ip
   1bbd8:	muleq	r1, ip, ip
   1bbdc:	muleq	r1, ip, ip
   1bbe0:	andeq	fp, r1, r8, lsr lr
   1bbe4:	andeq	fp, r1, r8, asr sp
   1bbe8:	muleq	r1, ip, ip
   1bbec:	muleq	r1, ip, ip
   1bbf0:	muleq	r1, ip, ip
   1bbf4:	muleq	r1, ip, ip
   1bbf8:	muleq	r1, ip, ip
   1bbfc:	muleq	r1, ip, ip
   1bc00:	muleq	r1, ip, ip
   1bc04:	andeq	fp, r1, ip, ror lr
   1bc08:	strdeq	ip, [r1], -r4
   1bc0c:	muleq	r1, ip, ip
   1bc10:	muleq	r1, ip, ip
   1bc14:	muleq	r1, ip, ip
   1bc18:	andeq	fp, r1, ip, asr ip
   1bc1c:	muleq	r1, ip, ip
   1bc20:	muleq	r1, ip, ip
   1bc24:	muleq	r1, ip, ip
   1bc28:	andeq	fp, r1, r4, lsr #25
   1bc2c:	muleq	r1, ip, ip
   1bc30:	ldrdeq	fp, [r1], -r4
   1bc34:	muleq	r1, ip, ip
   1bc38:	muleq	r1, ip, ip
   1bc3c:	muleq	r1, ip, ip
   1bc40:	muleq	r1, ip, ip
   1bc44:	muleq	r1, ip, ip
   1bc48:	muleq	r1, ip, ip
   1bc4c:	andeq	fp, r1, r4, lsl sp
   1bc50:	muleq	r1, ip, ip
   1bc54:	muleq	r1, ip, ip
   1bc58:	muleq	r1, r0, lr
   1bc5c:	cmn	r7, #1
   1bc60:	str	r9, [sp, #12]
   1bc64:	ble	1bea4 <__assert_fail@plt+0xa8a0>
   1bc68:	ldr	r3, [sp, #28]
   1bc6c:	mvn	r0, #0
   1bc70:	mvn	r1, #-2147483648	; 0x80000000
   1bc74:	mvn	r8, #0
   1bc78:	mvn	r9, #-2147483648	; 0x80000000
   1bc7c:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1bc80:	ldr	r2, [sp, #24]
   1bc84:	ldr	r3, [sp, #28]
   1bc88:	subs	r0, r0, r6
   1bc8c:	mov	r4, #1
   1bc90:	sbcs	r0, r1, r7
   1bc94:	bge	1bee4 <__assert_fail@plt+0xa8e0>
   1bc98:	b	1befc <__assert_fail@plt+0xa8f8>
   1bc9c:	orr	r5, r5, #2
   1bca0:	b	1ce14 <__assert_fail@plt+0xb810>
   1bca4:	cmn	r7, #1
   1bca8:	ble	1bf38 <__assert_fail@plt+0xa934>
   1bcac:	ldr	r3, [sp, #28]
   1bcb0:	mvn	r0, #0
   1bcb4:	mvn	r1, #-2147483648	; 0x80000000
   1bcb8:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1bcbc:	ldr	r2, [sp, #24]
   1bcc0:	ldr	r3, [sp, #28]
   1bcc4:	subs	r0, r0, r6
   1bcc8:	sbcs	r0, r1, r7
   1bccc:	bge	1bf6c <__assert_fail@plt+0xa968>
   1bcd0:	b	1c67c <__assert_fail@plt+0xb078>
   1bcd4:	cmn	r7, #1
   1bcd8:	str	r9, [sp, #12]
   1bcdc:	ble	1bf80 <__assert_fail@plt+0xa97c>
   1bce0:	ldr	r3, [sp, #28]
   1bce4:	mvn	r0, #0
   1bce8:	mvn	r1, #-2147483648	; 0x80000000
   1bcec:	mvn	r8, #0
   1bcf0:	mvn	r9, #-2147483648	; 0x80000000
   1bcf4:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1bcf8:	ldr	r2, [sp, #24]
   1bcfc:	ldr	r3, [sp, #28]
   1bd00:	subs	r0, r0, r6
   1bd04:	mov	r4, #1
   1bd08:	sbcs	r0, r1, r7
   1bd0c:	bge	1bfc0 <__assert_fail@plt+0xa9bc>
   1bd10:	b	1bfd8 <__assert_fail@plt+0xa9d4>
   1bd14:	cmn	r7, #1
   1bd18:	str	r9, [sp, #12]
   1bd1c:	ble	1c010 <__assert_fail@plt+0xaa0c>
   1bd20:	ldr	r3, [sp, #28]
   1bd24:	mvn	r0, #0
   1bd28:	mvn	r1, #-2147483648	; 0x80000000
   1bd2c:	mvn	r9, #-2147483648	; 0x80000000
   1bd30:	str	r0, [sp, #8]
   1bd34:	mvn	r0, #0
   1bd38:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1bd3c:	ldr	r2, [sp, #24]
   1bd40:	ldr	r3, [sp, #28]
   1bd44:	subs	r0, r0, r6
   1bd48:	mov	r4, #1
   1bd4c:	sbcs	r0, r1, r7
   1bd50:	bge	1c054 <__assert_fail@plt+0xaa50>
   1bd54:	b	1c070 <__assert_fail@plt+0xaa6c>
   1bd58:	cmp	r7, #0
   1bd5c:	str	r9, [sp, #12]
   1bd60:	bmi	1c358 <__assert_fail@plt+0xad54>
   1bd64:	ldr	r3, [sp, #28]
   1bd68:	mvn	r0, #0
   1bd6c:	mvn	r1, #-2147483648	; 0x80000000
   1bd70:	mvn	r9, #-2147483648	; 0x80000000
   1bd74:	str	r0, [sp, #8]
   1bd78:	mvn	r0, #0
   1bd7c:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1bd80:	ldr	r2, [sp, #24]
   1bd84:	ldr	r3, [sp, #28]
   1bd88:	subs	r0, r0, r6
   1bd8c:	mov	r4, #1
   1bd90:	sbcs	r0, r1, r7
   1bd94:	bge	1c39c <__assert_fail@plt+0xad98>
   1bd98:	b	1c3b8 <__assert_fail@plt+0xadb4>
   1bd9c:	cmn	r7, #1
   1bda0:	ble	1c3f4 <__assert_fail@plt+0xadf0>
   1bda4:	cmp	r7, #2097152	; 0x200000
   1bda8:	blt	1c424 <__assert_fail@plt+0xae20>
   1bdac:	b	1c67c <__assert_fail@plt+0xb078>
   1bdb0:	cmp	r7, #0
   1bdb4:	str	r9, [sp, #12]
   1bdb8:	bmi	1c434 <__assert_fail@plt+0xae30>
   1bdbc:	ldr	r3, [sp, #28]
   1bdc0:	mvn	r0, #0
   1bdc4:	mvn	r1, #-2147483648	; 0x80000000
   1bdc8:	mvn	r9, #-2147483648	; 0x80000000
   1bdcc:	str	r0, [sp, #8]
   1bdd0:	mvn	r0, #0
   1bdd4:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1bdd8:	ldr	r2, [sp, #24]
   1bddc:	ldr	r3, [sp, #28]
   1bde0:	subs	r0, r0, r6
   1bde4:	mov	r4, #1
   1bde8:	sbcs	r0, r1, r7
   1bdec:	bge	1c478 <__assert_fail@plt+0xae74>
   1bdf0:	b	1c494 <__assert_fail@plt+0xae90>
   1bdf4:	cmp	r7, #0
   1bdf8:	str	r9, [sp, #12]
   1bdfc:	bmi	1c4d0 <__assert_fail@plt+0xaecc>
   1be00:	ldr	r3, [sp, #28]
   1be04:	mvn	r0, #0
   1be08:	mvn	r1, #-2147483648	; 0x80000000
   1be0c:	mvn	r8, #-2147483648	; 0x80000000
   1be10:	str	r0, [sp, #8]
   1be14:	mvn	r0, #0
   1be18:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1be1c:	ldr	r2, [sp, #24]
   1be20:	ldr	r3, [sp, #28]
   1be24:	subs	r0, r0, r6
   1be28:	mov	r4, #1
   1be2c:	sbcs	r0, r1, r7
   1be30:	bge	1c514 <__assert_fail@plt+0xaf10>
   1be34:	b	1c530 <__assert_fail@plt+0xaf2c>
   1be38:	cmp	r7, #0
   1be3c:	str	r9, [sp, #12]
   1be40:	bmi	1c56c <__assert_fail@plt+0xaf68>
   1be44:	ldr	r3, [sp, #28]
   1be48:	mvn	r0, #0
   1be4c:	mvn	r1, #-2147483648	; 0x80000000
   1be50:	mvn	r9, #-2147483648	; 0x80000000
   1be54:	str	r0, [sp, #8]
   1be58:	mvn	r0, #0
   1be5c:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1be60:	ldr	r2, [sp, #24]
   1be64:	ldr	r3, [sp, #28]
   1be68:	subs	r0, r0, r6
   1be6c:	mov	r4, #1
   1be70:	sbcs	r0, r1, r7
   1be74:	bge	1c5b0 <__assert_fail@plt+0xafac>
   1be78:	b	1c5cc <__assert_fail@plt+0xafc8>
   1be7c:	cmn	r7, #1
   1be80:	ble	1c60c <__assert_fail@plt+0xb008>
   1be84:	cmp	r7, #4194304	; 0x400000
   1be88:	blt	1c63c <__assert_fail@plt+0xb038>
   1be8c:	b	1c67c <__assert_fail@plt+0xb078>
   1be90:	cmn	r7, #1
   1be94:	ble	1c64c <__assert_fail@plt+0xb048>
   1be98:	cmp	r7, #1073741824	; 0x40000000
   1be9c:	bge	1c67c <__assert_fail@plt+0xb078>
   1bea0:	b	1c69c <__assert_fail@plt+0xb098>
   1bea4:	and	r0, r6, r7
   1bea8:	cmn	r0, #1
   1beac:	beq	1bee4 <__assert_fail@plt+0xa8e0>
   1beb0:	mov	r0, #0
   1beb4:	mov	r1, #-2147483648	; 0x80000000
   1beb8:	mov	r2, r6
   1bebc:	mov	r3, r7
   1bec0:	mov	r8, #0
   1bec4:	mov	r9, #-2147483648	; 0x80000000
   1bec8:	bl	1ee9c <__assert_fail@plt+0xd898>
   1becc:	ldr	r2, [sp, #24]
   1bed0:	ldr	r3, [sp, #28]
   1bed4:	mov	r4, #1
   1bed8:	subs	r0, r0, r2
   1bedc:	sbcs	r0, r1, r3
   1bee0:	blt	1c0ac <__assert_fail@plt+0xaaa8>
   1bee4:	umull	r8, r0, r6, r2
   1bee8:	mov	r4, #0
   1beec:	mla	r0, r6, r3, r0
   1bef0:	mla	r9, r7, r2, r0
   1bef4:	cmp	r9, #0
   1bef8:	bmi	1c0ac <__assert_fail@plt+0xaaa8>
   1befc:	ldr	r3, [sp, #28]
   1bf00:	mvn	r0, #-2147483648	; 0x80000000
   1bf04:	mvn	r1, #-2147483648	; 0x80000000
   1bf08:	mov	r6, r4
   1bf0c:	mvn	r4, #0
   1bf10:	str	r0, [sp, #8]
   1bf14:	mvn	r0, #0
   1bf18:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1bf1c:	ldr	r2, [sp, #24]
   1bf20:	ldr	r3, [sp, #28]
   1bf24:	subs	r0, r0, r8
   1bf28:	mov	r7, #1
   1bf2c:	sbcs	r0, r1, r9
   1bf30:	bge	1c0e8 <__assert_fail@plt+0xaae4>
   1bf34:	b	1c104 <__assert_fail@plt+0xab00>
   1bf38:	and	r0, r6, r7
   1bf3c:	cmn	r0, #1
   1bf40:	beq	1bf6c <__assert_fail@plt+0xa968>
   1bf44:	mov	r0, #0
   1bf48:	mov	r1, #-2147483648	; 0x80000000
   1bf4c:	mov	r2, r6
   1bf50:	mov	r3, r7
   1bf54:	bl	1ee9c <__assert_fail@plt+0xd898>
   1bf58:	ldr	r2, [sp, #24]
   1bf5c:	ldr	r3, [sp, #28]
   1bf60:	subs	r0, r0, r2
   1bf64:	sbcs	r0, r1, r3
   1bf68:	blt	1c67c <__assert_fail@plt+0xb078>
   1bf6c:	umull	r0, r1, r6, r2
   1bf70:	mla	r1, r6, r3, r1
   1bf74:	mla	r7, r7, r2, r1
   1bf78:	mov	r6, r0
   1bf7c:	b	1cdf4 <__assert_fail@plt+0xb7f0>
   1bf80:	and	r0, r6, r7
   1bf84:	cmn	r0, #1
   1bf88:	beq	1bfc0 <__assert_fail@plt+0xa9bc>
   1bf8c:	mov	r0, #0
   1bf90:	mov	r1, #-2147483648	; 0x80000000
   1bf94:	mov	r2, r6
   1bf98:	mov	r3, r7
   1bf9c:	mov	r8, #0
   1bfa0:	mov	r9, #-2147483648	; 0x80000000
   1bfa4:	bl	1ee9c <__assert_fail@plt+0xd898>
   1bfa8:	ldr	r2, [sp, #24]
   1bfac:	ldr	r3, [sp, #28]
   1bfb0:	mov	r4, #1
   1bfb4:	subs	r0, r0, r2
   1bfb8:	sbcs	r0, r1, r3
   1bfbc:	blt	1c198 <__assert_fail@plt+0xab94>
   1bfc0:	umull	r8, r0, r6, r2
   1bfc4:	mov	r4, #0
   1bfc8:	mla	r0, r6, r3, r0
   1bfcc:	mla	r9, r7, r2, r0
   1bfd0:	cmp	r9, #0
   1bfd4:	bmi	1c198 <__assert_fail@plt+0xab94>
   1bfd8:	ldr	r3, [sp, #28]
   1bfdc:	mvn	r0, #0
   1bfe0:	mvn	r1, #-2147483648	; 0x80000000
   1bfe4:	str	r4, [sp, #8]
   1bfe8:	mvn	r6, #0
   1bfec:	mvn	r7, #-2147483648	; 0x80000000
   1bff0:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1bff4:	ldr	r4, [sp, #24]
   1bff8:	ldr	r3, [sp, #28]
   1bffc:	subs	r0, r0, r8
   1c000:	mov	r2, #1
   1c004:	sbcs	r0, r1, r9
   1c008:	bge	1c1d0 <__assert_fail@plt+0xabcc>
   1c00c:	b	1c308 <__assert_fail@plt+0xad04>
   1c010:	and	r0, r6, r7
   1c014:	cmn	r0, #1
   1c018:	beq	1c054 <__assert_fail@plt+0xaa50>
   1c01c:	mov	r0, #0
   1c020:	mov	r1, #-2147483648	; 0x80000000
   1c024:	mov	r2, r6
   1c028:	mov	r3, r7
   1c02c:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c030:	ldr	r2, [sp, #24]
   1c034:	ldr	r3, [sp, #28]
   1c038:	mov	r4, #1
   1c03c:	mov	r9, #-2147483648	; 0x80000000
   1c040:	subs	r0, r0, r2
   1c044:	sbcs	r0, r1, r3
   1c048:	mov	r0, #0
   1c04c:	str	r0, [sp, #8]
   1c050:	blt	1c1e4 <__assert_fail@plt+0xabe0>
   1c054:	umull	r1, r0, r6, r2
   1c058:	mov	r4, #0
   1c05c:	mla	r0, r6, r3, r0
   1c060:	mla	r9, r7, r2, r0
   1c064:	str	r1, [sp, #8]
   1c068:	cmp	r9, #0
   1c06c:	bmi	1c1e4 <__assert_fail@plt+0xabe0>
   1c070:	ldr	r3, [sp, #28]
   1c074:	mvn	r0, #0
   1c078:	mvn	r1, #-2147483648	; 0x80000000
   1c07c:	str	r4, [sp, #4]
   1c080:	mvn	r6, #0
   1c084:	mvn	r8, #-2147483648	; 0x80000000
   1c088:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c08c:	ldr	r4, [sp, #8]
   1c090:	ldr	r2, [sp, #24]
   1c094:	ldr	r3, [sp, #28]
   1c098:	mov	r7, #1
   1c09c:	subs	r0, r0, r4
   1c0a0:	sbcs	r0, r1, r9
   1c0a4:	bge	1c220 <__assert_fail@plt+0xac1c>
   1c0a8:	b	1c238 <__assert_fail@plt+0xac34>
   1c0ac:	mov	r0, #-2147483648	; 0x80000000
   1c0b0:	mov	r1, #-2147483648	; 0x80000000
   1c0b4:	mov	r2, r8
   1c0b8:	mov	r3, r9
   1c0bc:	mov	r6, r4
   1c0c0:	mov	r4, #0
   1c0c4:	str	r0, [sp, #8]
   1c0c8:	mov	r0, #0
   1c0cc:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c0d0:	ldr	r2, [sp, #24]
   1c0d4:	ldr	r3, [sp, #28]
   1c0d8:	mov	r7, #1
   1c0dc:	subs	r0, r0, r2
   1c0e0:	sbcs	r0, r1, r3
   1c0e4:	blt	1c158 <__assert_fail@plt+0xab54>
   1c0e8:	umull	r4, r0, r8, r2
   1c0ec:	mov	r7, r6
   1c0f0:	mla	r0, r8, r3, r0
   1c0f4:	mla	r0, r9, r2, r0
   1c0f8:	cmp	r0, #0
   1c0fc:	str	r0, [sp, #8]
   1c100:	bmi	1c158 <__assert_fail@plt+0xab54>
   1c104:	ldr	r3, [sp, #28]
   1c108:	mvn	r0, #0
   1c10c:	mvn	r1, #-2147483648	; 0x80000000
   1c110:	mov	r9, r7
   1c114:	mvn	r6, #0
   1c118:	mvn	r7, #-2147483648	; 0x80000000
   1c11c:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c120:	ldr	r8, [sp, #8]
   1c124:	ldr	r3, [sp, #24]
   1c128:	ldr	ip, [sp, #28]
   1c12c:	subs	r0, r0, r4
   1c130:	mov	r2, #1
   1c134:	sbcs	r0, r1, r8
   1c138:	blt	1c14c <__assert_fail@plt+0xab48>
   1c13c:	umull	r6, r0, r4, r3
   1c140:	mov	r2, #0
   1c144:	mla	r0, r4, ip, r0
   1c148:	mla	r7, r8, r3, r0
   1c14c:	orr	r3, r2, r9
   1c150:	ldr	r9, [sp, #12]
   1c154:	b	1cdf4 <__assert_fail@plt+0xb7f0>
   1c158:	ldr	r8, [sp, #8]
   1c15c:	mov	r0, #0
   1c160:	mov	r1, #-2147483648	; 0x80000000
   1c164:	mov	r2, r4
   1c168:	mov	r9, r7
   1c16c:	mov	r6, #0
   1c170:	mov	r7, #-2147483648	; 0x80000000
   1c174:	mov	r3, r8
   1c178:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c17c:	ldr	r3, [sp, #24]
   1c180:	ldr	ip, [sp, #28]
   1c184:	mov	r2, #1
   1c188:	subs	r0, r0, r3
   1c18c:	sbcs	r0, r1, ip
   1c190:	bge	1c13c <__assert_fail@plt+0xab38>
   1c194:	b	1c14c <__assert_fail@plt+0xab48>
   1c198:	mov	r0, #0
   1c19c:	mov	r1, #-2147483648	; 0x80000000
   1c1a0:	mov	r2, r8
   1c1a4:	mov	r3, r9
   1c1a8:	str	r4, [sp, #8]
   1c1ac:	mov	r6, #0
   1c1b0:	mov	r7, #-2147483648	; 0x80000000
   1c1b4:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c1b8:	ldr	r4, [sp, #24]
   1c1bc:	ldr	r3, [sp, #28]
   1c1c0:	mov	r2, #1
   1c1c4:	subs	r0, r0, r4
   1c1c8:	sbcs	r0, r1, r3
   1c1cc:	blt	1c308 <__assert_fail@plt+0xad04>
   1c1d0:	umull	r6, r0, r8, r4
   1c1d4:	mov	r2, #0
   1c1d8:	mla	r0, r8, r3, r0
   1c1dc:	mla	r7, r9, r4, r0
   1c1e0:	b	1c308 <__assert_fail@plt+0xad04>
   1c1e4:	str	r4, [sp, #4]
   1c1e8:	ldr	r4, [sp, #8]
   1c1ec:	mov	r0, #0
   1c1f0:	mov	r1, #-2147483648	; 0x80000000
   1c1f4:	mov	r3, r9
   1c1f8:	mov	r2, r4
   1c1fc:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c200:	ldr	r2, [sp, #24]
   1c204:	ldr	r3, [sp, #28]
   1c208:	mov	r7, #1
   1c20c:	mov	r6, #0
   1c210:	mov	r8, #-2147483648	; 0x80000000
   1c214:	subs	r0, r0, r2
   1c218:	sbcs	r0, r1, r3
   1c21c:	blt	1c270 <__assert_fail@plt+0xac6c>
   1c220:	umull	r6, r0, r4, r2
   1c224:	ldr	r7, [sp, #4]
   1c228:	mla	r0, r4, r3, r0
   1c22c:	mla	r8, r9, r2, r0
   1c230:	cmp	r8, #0
   1c234:	bmi	1c270 <__assert_fail@plt+0xac6c>
   1c238:	ldr	r3, [sp, #28]
   1c23c:	mvn	r0, #0
   1c240:	mvn	r1, #-2147483648	; 0x80000000
   1c244:	str	r7, [sp, #8]
   1c248:	mvn	r4, #0
   1c24c:	mvn	r9, #-2147483648	; 0x80000000
   1c250:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c254:	ldr	r2, [sp, #24]
   1c258:	ldr	r3, [sp, #28]
   1c25c:	subs	r0, r0, r6
   1c260:	mov	r7, #1
   1c264:	sbcs	r0, r1, r8
   1c268:	bge	1c2a8 <__assert_fail@plt+0xaca4>
   1c26c:	b	1c2c0 <__assert_fail@plt+0xacbc>
   1c270:	mov	r0, #0
   1c274:	mov	r1, #-2147483648	; 0x80000000
   1c278:	mov	r2, r6
   1c27c:	mov	r3, r8
   1c280:	str	r7, [sp, #8]
   1c284:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c288:	ldr	r2, [sp, #24]
   1c28c:	ldr	r3, [sp, #28]
   1c290:	mov	r7, #1
   1c294:	mov	r4, #0
   1c298:	mov	r9, #-2147483648	; 0x80000000
   1c29c:	subs	r0, r0, r2
   1c2a0:	sbcs	r0, r1, r3
   1c2a4:	blt	1c318 <__assert_fail@plt+0xad14>
   1c2a8:	umull	r4, r0, r6, r2
   1c2ac:	ldr	r7, [sp, #8]
   1c2b0:	mla	r0, r6, r3, r0
   1c2b4:	mla	r9, r8, r2, r0
   1c2b8:	cmp	r9, #0
   1c2bc:	bmi	1c318 <__assert_fail@plt+0xad14>
   1c2c0:	ldr	r3, [sp, #28]
   1c2c4:	mvn	r0, #0
   1c2c8:	mvn	r1, #-2147483648	; 0x80000000
   1c2cc:	str	r7, [sp, #8]
   1c2d0:	mvn	r6, #0
   1c2d4:	mvn	r7, #-2147483648	; 0x80000000
   1c2d8:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c2dc:	ldr	r3, [sp, #24]
   1c2e0:	ldr	ip, [sp, #28]
   1c2e4:	subs	r0, r0, r4
   1c2e8:	mov	r2, #1
   1c2ec:	mov	r8, r4
   1c2f0:	sbcs	r0, r1, r9
   1c2f4:	blt	1c308 <__assert_fail@plt+0xad04>
   1c2f8:	umull	r6, r0, r8, r3
   1c2fc:	mov	r2, #0
   1c300:	mla	r0, r8, ip, r0
   1c304:	mla	r7, r9, r3, r0
   1c308:	ldr	r0, [sp, #8]
   1c30c:	ldr	r9, [sp, #12]
   1c310:	orr	r3, r2, r0
   1c314:	b	1cdf4 <__assert_fail@plt+0xb7f0>
   1c318:	mov	r0, #0
   1c31c:	mov	r1, #-2147483648	; 0x80000000
   1c320:	mov	r2, r4
   1c324:	mov	r3, r9
   1c328:	str	r7, [sp, #8]
   1c32c:	mov	r8, r4
   1c330:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c334:	ldr	r3, [sp, #24]
   1c338:	ldr	ip, [sp, #28]
   1c33c:	mov	r2, #1
   1c340:	mov	r6, #0
   1c344:	mov	r7, #-2147483648	; 0x80000000
   1c348:	subs	r0, r0, r3
   1c34c:	sbcs	r0, r1, ip
   1c350:	bge	1c2f8 <__assert_fail@plt+0xacf4>
   1c354:	b	1c308 <__assert_fail@plt+0xad04>
   1c358:	and	r0, r6, r7
   1c35c:	cmn	r0, #1
   1c360:	beq	1c39c <__assert_fail@plt+0xad98>
   1c364:	mov	r0, #0
   1c368:	mov	r1, #-2147483648	; 0x80000000
   1c36c:	mov	r2, r6
   1c370:	mov	r3, r7
   1c374:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c378:	ldr	r2, [sp, #24]
   1c37c:	ldr	r3, [sp, #28]
   1c380:	mov	r4, #1
   1c384:	mov	r9, #-2147483648	; 0x80000000
   1c388:	subs	r0, r0, r2
   1c38c:	sbcs	r0, r1, r3
   1c390:	mov	r0, #0
   1c394:	str	r0, [sp, #8]
   1c398:	blt	1c6ac <__assert_fail@plt+0xb0a8>
   1c39c:	umull	r1, r0, r6, r2
   1c3a0:	mov	r4, #0
   1c3a4:	mla	r0, r6, r3, r0
   1c3a8:	mla	r9, r7, r2, r0
   1c3ac:	str	r1, [sp, #8]
   1c3b0:	cmp	r9, #0
   1c3b4:	bmi	1c6ac <__assert_fail@plt+0xb0a8>
   1c3b8:	ldr	r3, [sp, #28]
   1c3bc:	mvn	r0, #0
   1c3c0:	mvn	r1, #-2147483648	; 0x80000000
   1c3c4:	str	r4, [sp, #4]
   1c3c8:	mvn	r8, #0
   1c3cc:	mvn	r4, #-2147483648	; 0x80000000
   1c3d0:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c3d4:	ldr	r6, [sp, #8]
   1c3d8:	ldr	r2, [sp, #24]
   1c3dc:	ldr	r3, [sp, #28]
   1c3e0:	mov	r7, #1
   1c3e4:	subs	r0, r0, r6
   1c3e8:	sbcs	r0, r1, r9
   1c3ec:	bge	1c6e8 <__assert_fail@plt+0xb0e4>
   1c3f0:	b	1c700 <__assert_fail@plt+0xb0fc>
   1c3f4:	and	r0, r6, r7
   1c3f8:	cmn	r0, #1
   1c3fc:	beq	1c424 <__assert_fail@plt+0xae20>
   1c400:	mov	r0, #0
   1c404:	mov	r1, #-2147483648	; 0x80000000
   1c408:	mov	r2, r6
   1c40c:	mov	r3, r7
   1c410:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c414:	ldr	r3, [sp, #28]
   1c418:	subs	r0, r0, #1024	; 0x400
   1c41c:	sbcs	r0, r1, #0
   1c420:	blt	1c67c <__assert_fail@plt+0xb078>
   1c424:	lsl	r0, r7, #10
   1c428:	orr	r7, r0, r6, lsr #22
   1c42c:	lsl	r6, r6, #10
   1c430:	b	1cdf4 <__assert_fail@plt+0xb7f0>
   1c434:	and	r0, r6, r7
   1c438:	cmn	r0, #1
   1c43c:	beq	1c478 <__assert_fail@plt+0xae74>
   1c440:	mov	r0, #0
   1c444:	mov	r1, #-2147483648	; 0x80000000
   1c448:	mov	r2, r6
   1c44c:	mov	r3, r7
   1c450:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c454:	ldr	r2, [sp, #24]
   1c458:	ldr	r3, [sp, #28]
   1c45c:	mov	r4, #1
   1c460:	mov	r9, #-2147483648	; 0x80000000
   1c464:	subs	r0, r0, r2
   1c468:	sbcs	r0, r1, r3
   1c46c:	mov	r0, #0
   1c470:	str	r0, [sp, #8]
   1c474:	blt	1c9c4 <__assert_fail@plt+0xb3c0>
   1c478:	umull	r1, r0, r6, r2
   1c47c:	mov	r4, #0
   1c480:	mla	r0, r6, r3, r0
   1c484:	mla	r9, r7, r2, r0
   1c488:	str	r1, [sp, #8]
   1c48c:	cmp	r9, #0
   1c490:	bmi	1c9c4 <__assert_fail@plt+0xb3c0>
   1c494:	ldr	r3, [sp, #28]
   1c498:	mvn	r0, #0
   1c49c:	mvn	r1, #-2147483648	; 0x80000000
   1c4a0:	str	r4, [sp, #4]
   1c4a4:	mvn	r8, #0
   1c4a8:	mvn	r4, #-2147483648	; 0x80000000
   1c4ac:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c4b0:	ldr	r6, [sp, #8]
   1c4b4:	ldr	r2, [sp, #24]
   1c4b8:	ldr	r3, [sp, #28]
   1c4bc:	mov	r7, #1
   1c4c0:	subs	r0, r0, r6
   1c4c4:	sbcs	r0, r1, r9
   1c4c8:	bge	1ca00 <__assert_fail@plt+0xb3fc>
   1c4cc:	b	1ca18 <__assert_fail@plt+0xb414>
   1c4d0:	and	r0, r6, r7
   1c4d4:	cmn	r0, #1
   1c4d8:	beq	1c514 <__assert_fail@plt+0xaf10>
   1c4dc:	mov	r0, #0
   1c4e0:	mov	r1, #-2147483648	; 0x80000000
   1c4e4:	mov	r2, r6
   1c4e8:	mov	r3, r7
   1c4ec:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c4f0:	ldr	r2, [sp, #24]
   1c4f4:	ldr	r3, [sp, #28]
   1c4f8:	mov	r4, #1
   1c4fc:	mov	r8, #-2147483648	; 0x80000000
   1c500:	subs	r0, r0, r2
   1c504:	sbcs	r0, r1, r3
   1c508:	mov	r0, #0
   1c50c:	str	r0, [sp, #8]
   1c510:	blt	1cc40 <__assert_fail@plt+0xb63c>
   1c514:	umull	r1, r0, r6, r2
   1c518:	mov	r4, #0
   1c51c:	mla	r0, r6, r3, r0
   1c520:	mla	r8, r7, r2, r0
   1c524:	str	r1, [sp, #8]
   1c528:	cmp	r8, #0
   1c52c:	bmi	1cc40 <__assert_fail@plt+0xb63c>
   1c530:	ldr	r3, [sp, #28]
   1c534:	mvn	r0, #0
   1c538:	mvn	r1, #-2147483648	; 0x80000000
   1c53c:	str	r4, [sp, #4]
   1c540:	mvn	r9, #0
   1c544:	mvn	r4, #-2147483648	; 0x80000000
   1c548:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c54c:	ldr	r6, [sp, #8]
   1c550:	ldr	r2, [sp, #24]
   1c554:	ldr	r3, [sp, #28]
   1c558:	mov	r7, #1
   1c55c:	subs	r0, r0, r6
   1c560:	sbcs	r0, r1, r8
   1c564:	bge	1cc7c <__assert_fail@plt+0xb678>
   1c568:	b	1cc94 <__assert_fail@plt+0xb690>
   1c56c:	and	r0, r6, r7
   1c570:	cmn	r0, #1
   1c574:	beq	1c5b0 <__assert_fail@plt+0xafac>
   1c578:	mov	r0, #0
   1c57c:	mov	r1, #-2147483648	; 0x80000000
   1c580:	mov	r2, r6
   1c584:	mov	r3, r7
   1c588:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c58c:	ldr	r2, [sp, #24]
   1c590:	ldr	r3, [sp, #28]
   1c594:	mov	r4, #1
   1c598:	mov	r9, #-2147483648	; 0x80000000
   1c59c:	subs	r0, r0, r2
   1c5a0:	sbcs	r0, r1, r3
   1c5a4:	mov	r0, #0
   1c5a8:	str	r0, [sp, #8]
   1c5ac:	blt	1ce5c <__assert_fail@plt+0xb858>
   1c5b0:	umull	r1, r0, r6, r2
   1c5b4:	mov	r4, #0
   1c5b8:	mla	r0, r6, r3, r0
   1c5bc:	mla	r9, r7, r2, r0
   1c5c0:	str	r1, [sp, #8]
   1c5c4:	cmp	r9, #0
   1c5c8:	bmi	1ce5c <__assert_fail@plt+0xb858>
   1c5cc:	ldr	r3, [sp, #28]
   1c5d0:	mvn	r0, #0
   1c5d4:	mvn	r1, #-2147483648	; 0x80000000
   1c5d8:	str	r4, [sp]
   1c5dc:	mvn	r8, #-2147483648	; 0x80000000
   1c5e0:	str	r0, [sp, #4]
   1c5e4:	mvn	r0, #0
   1c5e8:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c5ec:	ldr	r6, [sp, #8]
   1c5f0:	ldr	r2, [sp, #24]
   1c5f4:	ldr	r3, [sp, #28]
   1c5f8:	mov	r7, #1
   1c5fc:	subs	r0, r0, r6
   1c600:	sbcs	r0, r1, r9
   1c604:	bge	1ce9c <__assert_fail@plt+0xb898>
   1c608:	b	1ceb8 <__assert_fail@plt+0xb8b4>
   1c60c:	and	r0, r6, r7
   1c610:	cmn	r0, #1
   1c614:	beq	1c63c <__assert_fail@plt+0xb038>
   1c618:	mov	r0, #0
   1c61c:	mov	r1, #-2147483648	; 0x80000000
   1c620:	mov	r2, r6
   1c624:	mov	r3, r7
   1c628:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c62c:	ldr	r3, [sp, #28]
   1c630:	subs	r0, r0, #512	; 0x200
   1c634:	sbcs	r0, r1, #0
   1c638:	blt	1c67c <__assert_fail@plt+0xb078>
   1c63c:	lsl	r0, r7, #9
   1c640:	orr	r7, r0, r6, lsr #23
   1c644:	lsl	r6, r6, #9
   1c648:	b	1cdf4 <__assert_fail@plt+0xb7f0>
   1c64c:	and	r0, r6, r7
   1c650:	cmn	r0, #1
   1c654:	beq	1c69c <__assert_fail@plt+0xb098>
   1c658:	mov	r0, #0
   1c65c:	mov	r1, #-2147483648	; 0x80000000
   1c660:	mov	r2, r6
   1c664:	mov	r3, r7
   1c668:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c66c:	ldr	r3, [sp, #28]
   1c670:	subs	r0, r0, #2
   1c674:	sbcs	r0, r1, #0
   1c678:	bge	1c69c <__assert_fail@plt+0xb098>
   1c67c:	cmp	r7, #0
   1c680:	mvn	r0, #-2147483648	; 0x80000000
   1c684:	mvn	r6, #0
   1c688:	mov	r3, #1
   1c68c:	movmi	r0, #-2147483648	; 0x80000000
   1c690:	movwmi	r6, #0
   1c694:	mov	r7, r0
   1c698:	b	1cdf4 <__assert_fail@plt+0xb7f0>
   1c69c:	lsl	r0, r7, #1
   1c6a0:	orr	r7, r0, r6, lsr #31
   1c6a4:	lsl	r6, r6, #1
   1c6a8:	b	1cdf4 <__assert_fail@plt+0xb7f0>
   1c6ac:	ldr	r6, [sp, #8]
   1c6b0:	mov	r0, #0
   1c6b4:	mov	r1, #-2147483648	; 0x80000000
   1c6b8:	mov	r3, r9
   1c6bc:	str	r4, [sp, #4]
   1c6c0:	mov	r2, r6
   1c6c4:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c6c8:	ldr	r2, [sp, #24]
   1c6cc:	ldr	r3, [sp, #28]
   1c6d0:	mov	r7, #1
   1c6d4:	mov	r8, #0
   1c6d8:	mov	r4, #-2147483648	; 0x80000000
   1c6dc:	subs	r0, r0, r2
   1c6e0:	sbcs	r0, r1, r3
   1c6e4:	blt	1c738 <__assert_fail@plt+0xb134>
   1c6e8:	umull	r8, r0, r6, r2
   1c6ec:	ldr	r7, [sp, #4]
   1c6f0:	mla	r0, r6, r3, r0
   1c6f4:	mla	r4, r9, r2, r0
   1c6f8:	cmp	r4, #0
   1c6fc:	bmi	1c738 <__assert_fail@plt+0xb134>
   1c700:	ldr	r3, [sp, #28]
   1c704:	mvn	r0, #0
   1c708:	mvn	r1, #-2147483648	; 0x80000000
   1c70c:	str	r7, [sp, #8]
   1c710:	mvn	r7, #0
   1c714:	mvn	r9, #-2147483648	; 0x80000000
   1c718:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c71c:	ldr	r2, [sp, #24]
   1c720:	ldr	r3, [sp, #28]
   1c724:	subs	r0, r0, r8
   1c728:	mov	r6, #1
   1c72c:	sbcs	r0, r1, r4
   1c730:	bge	1c770 <__assert_fail@plt+0xb16c>
   1c734:	b	1c788 <__assert_fail@plt+0xb184>
   1c738:	mov	r0, #0
   1c73c:	mov	r1, #-2147483648	; 0x80000000
   1c740:	mov	r2, r8
   1c744:	mov	r3, r4
   1c748:	str	r7, [sp, #8]
   1c74c:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c750:	ldr	r2, [sp, #24]
   1c754:	ldr	r3, [sp, #28]
   1c758:	mov	r6, #1
   1c75c:	mov	r7, #0
   1c760:	mov	r9, #-2147483648	; 0x80000000
   1c764:	subs	r0, r0, r2
   1c768:	sbcs	r0, r1, r3
   1c76c:	blt	1c7c8 <__assert_fail@plt+0xb1c4>
   1c770:	umull	r7, r0, r8, r2
   1c774:	ldr	r6, [sp, #8]
   1c778:	mla	r0, r8, r3, r0
   1c77c:	mla	r9, r4, r2, r0
   1c780:	cmp	r9, #0
   1c784:	bmi	1c7c8 <__assert_fail@plt+0xb1c4>
   1c788:	ldr	r3, [sp, #28]
   1c78c:	mvn	r0, #0
   1c790:	mvn	r1, #-2147483648	; 0x80000000
   1c794:	str	r6, [sp, #8]
   1c798:	mvn	r8, #0
   1c79c:	mvn	r4, #-2147483648	; 0x80000000
   1c7a0:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c7a4:	ldr	r2, [sp, #24]
   1c7a8:	ldr	r3, [sp, #28]
   1c7ac:	subs	r0, r0, r7
   1c7b0:	sbcs	r0, r1, r9
   1c7b4:	bge	1c80c <__assert_fail@plt+0xb208>
   1c7b8:	mov	r0, #1
   1c7bc:	mov	r6, #0
   1c7c0:	str	r0, [sp, #8]
   1c7c4:	b	1c824 <__assert_fail@plt+0xb220>
   1c7c8:	mov	r0, #0
   1c7cc:	mov	r1, #-2147483648	; 0x80000000
   1c7d0:	mov	r2, r7
   1c7d4:	mov	r3, r9
   1c7d8:	str	r6, [sp, #8]
   1c7dc:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c7e0:	ldr	r2, [sp, #24]
   1c7e4:	ldr	r3, [sp, #28]
   1c7e8:	subs	r0, r0, r2
   1c7ec:	sbcs	r0, r1, r3
   1c7f0:	bge	1c80c <__assert_fail@plt+0xb208>
   1c7f4:	mov	r0, #1
   1c7f8:	mov	r8, #0
   1c7fc:	mov	r4, #-2147483648	; 0x80000000
   1c800:	mov	r6, #0
   1c804:	str	r0, [sp, #8]
   1c808:	b	1c85c <__assert_fail@plt+0xb258>
   1c80c:	umull	r8, r0, r7, r2
   1c810:	mov	r6, #0
   1c814:	mla	r0, r7, r3, r0
   1c818:	mla	r4, r9, r2, r0
   1c81c:	cmp	r4, #0
   1c820:	bmi	1c85c <__assert_fail@plt+0xb258>
   1c824:	ldr	r3, [sp, #28]
   1c828:	mvn	r0, #0
   1c82c:	mvn	r1, #-2147483648	; 0x80000000
   1c830:	mvn	r9, #0
   1c834:	mvn	r7, #-2147483648	; 0x80000000
   1c838:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c83c:	ldr	r2, [sp, #24]
   1c840:	ldr	r3, [sp, #28]
   1c844:	subs	r0, r0, r8
   1c848:	sbcs	r0, r1, r4
   1c84c:	bge	1c898 <__assert_fail@plt+0xb294>
   1c850:	mov	r0, #1
   1c854:	str	r0, [sp, #8]
   1c858:	b	1c8ac <__assert_fail@plt+0xb2a8>
   1c85c:	mov	r0, #0
   1c860:	mov	r1, #-2147483648	; 0x80000000
   1c864:	mov	r2, r8
   1c868:	mov	r3, r4
   1c86c:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c870:	ldr	r2, [sp, #24]
   1c874:	ldr	r3, [sp, #28]
   1c878:	subs	r0, r0, r2
   1c87c:	sbcs	r0, r1, r3
   1c880:	bge	1c898 <__assert_fail@plt+0xb294>
   1c884:	mov	r0, #1
   1c888:	mov	r9, #0
   1c88c:	mov	r7, #-2147483648	; 0x80000000
   1c890:	str	r0, [sp, #8]
   1c894:	b	1c8e8 <__assert_fail@plt+0xb2e4>
   1c898:	umull	r9, r0, r8, r2
   1c89c:	mla	r0, r8, r3, r0
   1c8a0:	mla	r7, r4, r2, r0
   1c8a4:	cmp	r7, #0
   1c8a8:	bmi	1c8e8 <__assert_fail@plt+0xb2e4>
   1c8ac:	ldr	r3, [sp, #28]
   1c8b0:	mvn	r0, #0
   1c8b4:	mvn	r1, #-2147483648	; 0x80000000
   1c8b8:	mvn	r8, #0
   1c8bc:	mvn	r4, #-2147483648	; 0x80000000
   1c8c0:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c8c4:	ldr	r2, [sp, #24]
   1c8c8:	ldr	r3, [sp, #28]
   1c8cc:	subs	r0, r0, r9
   1c8d0:	sbcs	r0, r1, r7
   1c8d4:	bge	1c928 <__assert_fail@plt+0xb324>
   1c8d8:	ldr	r9, [sp, #12]
   1c8dc:	mov	r0, #1
   1c8e0:	str	r0, [sp, #8]
   1c8e4:	b	1c940 <__assert_fail@plt+0xb33c>
   1c8e8:	mov	r0, #0
   1c8ec:	mov	r1, #-2147483648	; 0x80000000
   1c8f0:	mov	r2, r9
   1c8f4:	mov	r3, r7
   1c8f8:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c8fc:	ldr	r2, [sp, #24]
   1c900:	ldr	r3, [sp, #28]
   1c904:	subs	r0, r0, r2
   1c908:	sbcs	r0, r1, r3
   1c90c:	bge	1c928 <__assert_fail@plt+0xb324>
   1c910:	ldr	r9, [sp, #12]
   1c914:	mov	r0, #1
   1c918:	mov	r8, #0
   1c91c:	mov	r4, #-2147483648	; 0x80000000
   1c920:	str	r0, [sp, #8]
   1c924:	b	1c990 <__assert_fail@plt+0xb38c>
   1c928:	umull	r8, r0, r9, r2
   1c92c:	mla	r0, r9, r3, r0
   1c930:	ldr	r9, [sp, #12]
   1c934:	mla	r4, r7, r2, r0
   1c938:	cmp	r4, #0
   1c93c:	bmi	1c990 <__assert_fail@plt+0xb38c>
   1c940:	ldr	r3, [sp, #28]
   1c944:	mvn	r0, #0
   1c948:	mvn	r1, #-2147483648	; 0x80000000
   1c94c:	mvn	r6, #0
   1c950:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1c954:	ldr	r7, [sp, #24]
   1c958:	ldr	r3, [sp, #28]
   1c95c:	subs	r0, r0, r8
   1c960:	mov	r2, #1
   1c964:	sbcs	r0, r1, r4
   1c968:	mvn	r0, #-2147483648	; 0x80000000
   1c96c:	blt	1c980 <__assert_fail@plt+0xb37c>
   1c970:	umull	r6, r0, r8, r7
   1c974:	mov	r2, #0
   1c978:	mla	r0, r8, r3, r0
   1c97c:	mla	r0, r4, r7, r0
   1c980:	ldr	r1, [sp, #8]
   1c984:	mov	r7, r0
   1c988:	orr	r3, r2, r1
   1c98c:	b	1cdf4 <__assert_fail@plt+0xb7f0>
   1c990:	mov	r0, #0
   1c994:	mov	r1, #-2147483648	; 0x80000000
   1c998:	mov	r2, r8
   1c99c:	mov	r3, r4
   1c9a0:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c9a4:	ldr	r7, [sp, #24]
   1c9a8:	ldr	r3, [sp, #28]
   1c9ac:	mov	r2, #1
   1c9b0:	subs	r0, r0, r7
   1c9b4:	sbcs	r0, r1, r3
   1c9b8:	mov	r0, #-2147483648	; 0x80000000
   1c9bc:	bge	1c970 <__assert_fail@plt+0xb36c>
   1c9c0:	b	1c980 <__assert_fail@plt+0xb37c>
   1c9c4:	ldr	r6, [sp, #8]
   1c9c8:	mov	r0, #0
   1c9cc:	mov	r1, #-2147483648	; 0x80000000
   1c9d0:	mov	r3, r9
   1c9d4:	str	r4, [sp, #4]
   1c9d8:	mov	r2, r6
   1c9dc:	bl	1ee9c <__assert_fail@plt+0xd898>
   1c9e0:	ldr	r2, [sp, #24]
   1c9e4:	ldr	r3, [sp, #28]
   1c9e8:	mov	r7, #1
   1c9ec:	mov	r8, #0
   1c9f0:	mov	r4, #-2147483648	; 0x80000000
   1c9f4:	subs	r0, r0, r2
   1c9f8:	sbcs	r0, r1, r3
   1c9fc:	blt	1ca54 <__assert_fail@plt+0xb450>
   1ca00:	umull	r8, r0, r6, r2
   1ca04:	ldr	r7, [sp, #4]
   1ca08:	mla	r0, r6, r3, r0
   1ca0c:	mla	r4, r9, r2, r0
   1ca10:	cmp	r4, #0
   1ca14:	bmi	1ca54 <__assert_fail@plt+0xb450>
   1ca18:	ldr	r3, [sp, #28]
   1ca1c:	mvn	r0, #0
   1ca20:	mvn	r1, #-2147483648	; 0x80000000
   1ca24:	str	r7, [sp, #4]
   1ca28:	mvn	r7, #0
   1ca2c:	mvn	r9, #-2147483648	; 0x80000000
   1ca30:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1ca34:	ldr	r2, [sp, #24]
   1ca38:	ldr	r3, [sp, #28]
   1ca3c:	subs	r0, r0, r8
   1ca40:	mov	r6, #1
   1ca44:	sbcs	r0, r1, r4
   1ca48:	str	r6, [sp, #8]
   1ca4c:	bge	1ca90 <__assert_fail@plt+0xb48c>
   1ca50:	b	1caac <__assert_fail@plt+0xb4a8>
   1ca54:	mov	r0, #0
   1ca58:	mov	r1, #-2147483648	; 0x80000000
   1ca5c:	mov	r2, r8
   1ca60:	mov	r3, r4
   1ca64:	str	r7, [sp, #4]
   1ca68:	bl	1ee9c <__assert_fail@plt+0xd898>
   1ca6c:	ldr	r2, [sp, #24]
   1ca70:	ldr	r3, [sp, #28]
   1ca74:	mov	r7, #1
   1ca78:	mov	r9, #-2147483648	; 0x80000000
   1ca7c:	str	r7, [sp, #8]
   1ca80:	mov	r7, #0
   1ca84:	subs	r0, r0, r2
   1ca88:	sbcs	r0, r1, r3
   1ca8c:	blt	1cae4 <__assert_fail@plt+0xb4e0>
   1ca90:	umull	r7, r0, r8, r2
   1ca94:	mla	r0, r8, r3, r0
   1ca98:	mla	r9, r4, r2, r0
   1ca9c:	ldr	r0, [sp, #4]
   1caa0:	cmp	r9, #0
   1caa4:	str	r0, [sp, #8]
   1caa8:	bmi	1cae4 <__assert_fail@plt+0xb4e0>
   1caac:	ldr	r3, [sp, #28]
   1cab0:	mvn	r0, #0
   1cab4:	mvn	r1, #-2147483648	; 0x80000000
   1cab8:	mvn	r4, #0
   1cabc:	mvn	r8, #-2147483648	; 0x80000000
   1cac0:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1cac4:	ldr	r2, [sp, #24]
   1cac8:	ldr	r3, [sp, #28]
   1cacc:	subs	r0, r0, r7
   1cad0:	sbcs	r0, r1, r9
   1cad4:	bge	1cb20 <__assert_fail@plt+0xb51c>
   1cad8:	mov	r0, #1
   1cadc:	str	r0, [sp, #8]
   1cae0:	b	1cb34 <__assert_fail@plt+0xb530>
   1cae4:	mov	r0, #0
   1cae8:	mov	r1, #-2147483648	; 0x80000000
   1caec:	mov	r2, r7
   1caf0:	mov	r3, r9
   1caf4:	bl	1ee9c <__assert_fail@plt+0xd898>
   1caf8:	ldr	r2, [sp, #24]
   1cafc:	ldr	r3, [sp, #28]
   1cb00:	subs	r0, r0, r2
   1cb04:	sbcs	r0, r1, r3
   1cb08:	bge	1cb20 <__assert_fail@plt+0xb51c>
   1cb0c:	mov	r0, #1
   1cb10:	mov	r4, #0
   1cb14:	mov	r8, #-2147483648	; 0x80000000
   1cb18:	str	r0, [sp, #8]
   1cb1c:	b	1cb68 <__assert_fail@plt+0xb564>
   1cb20:	umull	r4, r0, r7, r2
   1cb24:	mla	r0, r7, r3, r0
   1cb28:	mla	r8, r9, r2, r0
   1cb2c:	cmp	r8, #0
   1cb30:	bmi	1cb68 <__assert_fail@plt+0xb564>
   1cb34:	ldr	r3, [sp, #28]
   1cb38:	mvn	r0, #0
   1cb3c:	mvn	r1, #-2147483648	; 0x80000000
   1cb40:	mvn	r6, #0
   1cb44:	mvn	r9, #-2147483648	; 0x80000000
   1cb48:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1cb4c:	ldr	r2, [sp, #24]
   1cb50:	ldr	r3, [sp, #28]
   1cb54:	subs	r0, r0, r4
   1cb58:	sbcs	r0, r1, r8
   1cb5c:	bge	1cba0 <__assert_fail@plt+0xb59c>
   1cb60:	mov	r8, #1
   1cb64:	b	1cbb8 <__assert_fail@plt+0xb5b4>
   1cb68:	mov	r0, #0
   1cb6c:	mov	r1, #-2147483648	; 0x80000000
   1cb70:	mov	r2, r4
   1cb74:	mov	r3, r8
   1cb78:	bl	1ee9c <__assert_fail@plt+0xd898>
   1cb7c:	ldr	r2, [sp, #24]
   1cb80:	ldr	r3, [sp, #28]
   1cb84:	subs	r0, r0, r2
   1cb88:	sbcs	r0, r1, r3
   1cb8c:	bge	1cba0 <__assert_fail@plt+0xb59c>
   1cb90:	mov	r8, #1
   1cb94:	mov	r6, #0
   1cb98:	mov	r9, #-2147483648	; 0x80000000
   1cb9c:	b	1cc08 <__assert_fail@plt+0xb604>
   1cba0:	umull	r6, r0, r4, r2
   1cba4:	mla	r0, r4, r3, r0
   1cba8:	mla	r9, r8, r2, r0
   1cbac:	ldr	r8, [sp, #8]
   1cbb0:	cmp	r9, #0
   1cbb4:	bmi	1cc08 <__assert_fail@plt+0xb604>
   1cbb8:	ldr	r3, [sp, #28]
   1cbbc:	mvn	r0, #0
   1cbc0:	mvn	r1, #-2147483648	; 0x80000000
   1cbc4:	mvn	r4, #0
   1cbc8:	mvn	r7, #-2147483648	; 0x80000000
   1cbcc:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1cbd0:	ldr	r3, [sp, #24]
   1cbd4:	ldr	ip, [sp, #28]
   1cbd8:	subs	r0, r0, r6
   1cbdc:	mov	r2, #1
   1cbe0:	sbcs	r0, r1, r9
   1cbe4:	blt	1cbf8 <__assert_fail@plt+0xb5f4>
   1cbe8:	umull	r4, r0, r6, r3
   1cbec:	mov	r2, #0
   1cbf0:	mla	r0, r6, ip, r0
   1cbf4:	mla	r7, r9, r3, r0
   1cbf8:	ldr	r9, [sp, #12]
   1cbfc:	orr	r3, r2, r8
   1cc00:	mov	r6, r4
   1cc04:	b	1cdf4 <__assert_fail@plt+0xb7f0>
   1cc08:	mov	r0, #0
   1cc0c:	mov	r1, #-2147483648	; 0x80000000
   1cc10:	mov	r2, r6
   1cc14:	mov	r3, r9
   1cc18:	bl	1ee9c <__assert_fail@plt+0xd898>
   1cc1c:	ldr	r3, [sp, #24]
   1cc20:	ldr	ip, [sp, #28]
   1cc24:	mov	r2, #1
   1cc28:	mov	r4, #0
   1cc2c:	mov	r7, #-2147483648	; 0x80000000
   1cc30:	subs	r0, r0, r3
   1cc34:	sbcs	r0, r1, ip
   1cc38:	bge	1cbe8 <__assert_fail@plt+0xb5e4>
   1cc3c:	b	1cbf8 <__assert_fail@plt+0xb5f4>
   1cc40:	ldr	r6, [sp, #8]
   1cc44:	mov	r0, #0
   1cc48:	mov	r1, #-2147483648	; 0x80000000
   1cc4c:	mov	r3, r8
   1cc50:	str	r4, [sp, #4]
   1cc54:	mov	r2, r6
   1cc58:	bl	1ee9c <__assert_fail@plt+0xd898>
   1cc5c:	ldr	r2, [sp, #24]
   1cc60:	ldr	r3, [sp, #28]
   1cc64:	mov	r7, #1
   1cc68:	mov	r9, #0
   1cc6c:	mov	r4, #-2147483648	; 0x80000000
   1cc70:	subs	r0, r0, r2
   1cc74:	sbcs	r0, r1, r3
   1cc78:	blt	1ccd0 <__assert_fail@plt+0xb6cc>
   1cc7c:	umull	r9, r0, r6, r2
   1cc80:	ldr	r7, [sp, #4]
   1cc84:	mla	r0, r6, r3, r0
   1cc88:	mla	r4, r8, r2, r0
   1cc8c:	cmp	r4, #0
   1cc90:	bmi	1ccd0 <__assert_fail@plt+0xb6cc>
   1cc94:	ldr	r3, [sp, #28]
   1cc98:	mvn	r0, #0
   1cc9c:	mvn	r1, #-2147483648	; 0x80000000
   1cca0:	str	r7, [sp, #4]
   1cca4:	mvn	r8, #0
   1cca8:	mvn	r7, #-2147483648	; 0x80000000
   1ccac:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1ccb0:	ldr	r2, [sp, #24]
   1ccb4:	ldr	r3, [sp, #28]
   1ccb8:	subs	r0, r0, r9
   1ccbc:	mov	r6, #1
   1ccc0:	sbcs	r0, r1, r4
   1ccc4:	str	r6, [sp, #8]
   1ccc8:	bge	1cd0c <__assert_fail@plt+0xb708>
   1cccc:	b	1cd28 <__assert_fail@plt+0xb724>
   1ccd0:	mov	r0, #0
   1ccd4:	mov	r1, #-2147483648	; 0x80000000
   1ccd8:	mov	r2, r9
   1ccdc:	mov	r3, r4
   1cce0:	str	r7, [sp, #4]
   1cce4:	bl	1ee9c <__assert_fail@plt+0xd898>
   1cce8:	ldr	r2, [sp, #24]
   1ccec:	ldr	r3, [sp, #28]
   1ccf0:	mov	r7, #1
   1ccf4:	mov	r8, #0
   1ccf8:	str	r7, [sp, #8]
   1ccfc:	mov	r7, #-2147483648	; 0x80000000
   1cd00:	subs	r0, r0, r2
   1cd04:	sbcs	r0, r1, r3
   1cd08:	blt	1cd5c <__assert_fail@plt+0xb758>
   1cd0c:	umull	r8, r0, r9, r2
   1cd10:	mla	r0, r9, r3, r0
   1cd14:	mla	r7, r4, r2, r0
   1cd18:	ldr	r0, [sp, #4]
   1cd1c:	cmp	r7, #0
   1cd20:	str	r0, [sp, #8]
   1cd24:	bmi	1cd5c <__assert_fail@plt+0xb758>
   1cd28:	ldr	r3, [sp, #28]
   1cd2c:	mvn	r0, #0
   1cd30:	mvn	r1, #-2147483648	; 0x80000000
   1cd34:	mvn	r4, #0
   1cd38:	mvn	r9, #-2147483648	; 0x80000000
   1cd3c:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1cd40:	ldr	r2, [sp, #24]
   1cd44:	ldr	r3, [sp, #28]
   1cd48:	subs	r0, r0, r8
   1cd4c:	sbcs	r0, r1, r7
   1cd50:	bge	1cd94 <__assert_fail@plt+0xb790>
   1cd54:	mov	r8, #1
   1cd58:	b	1cdac <__assert_fail@plt+0xb7a8>
   1cd5c:	mov	r0, #0
   1cd60:	mov	r1, #-2147483648	; 0x80000000
   1cd64:	mov	r2, r8
   1cd68:	mov	r3, r7
   1cd6c:	bl	1ee9c <__assert_fail@plt+0xd898>
   1cd70:	ldr	r2, [sp, #24]
   1cd74:	ldr	r3, [sp, #28]
   1cd78:	subs	r0, r0, r2
   1cd7c:	sbcs	r0, r1, r3
   1cd80:	bge	1cd94 <__assert_fail@plt+0xb790>
   1cd84:	mov	r8, #1
   1cd88:	mov	r4, #0
   1cd8c:	mov	r9, #-2147483648	; 0x80000000
   1cd90:	b	1ce24 <__assert_fail@plt+0xb820>
   1cd94:	umull	r4, r0, r8, r2
   1cd98:	mla	r0, r8, r3, r0
   1cd9c:	ldr	r8, [sp, #8]
   1cda0:	mla	r9, r7, r2, r0
   1cda4:	cmp	r9, #0
   1cda8:	bmi	1ce24 <__assert_fail@plt+0xb820>
   1cdac:	ldr	r3, [sp, #28]
   1cdb0:	mvn	r0, #0
   1cdb4:	mvn	r1, #-2147483648	; 0x80000000
   1cdb8:	mvn	r6, #0
   1cdbc:	mvn	r7, #-2147483648	; 0x80000000
   1cdc0:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1cdc4:	ldr	r3, [sp, #24]
   1cdc8:	ldr	ip, [sp, #28]
   1cdcc:	subs	r0, r0, r4
   1cdd0:	mov	r2, #1
   1cdd4:	sbcs	r0, r1, r9
   1cdd8:	blt	1cdec <__assert_fail@plt+0xb7e8>
   1cddc:	umull	r6, r0, r4, r3
   1cde0:	mov	r2, #0
   1cde4:	mla	r0, r4, ip, r0
   1cde8:	mla	r7, r9, r3, r0
   1cdec:	ldr	r9, [sp, #12]
   1cdf0:	orr	r3, r2, r8
   1cdf4:	ldr	r1, [sp, #20]
   1cdf8:	ldr	r2, [sp, #16]
   1cdfc:	orr	r5, r3, r5
   1ce00:	add	r0, r1, r2
   1ce04:	str	r0, [sl]
   1ce08:	ldrb	r0, [r1, r2]
   1ce0c:	cmp	r0, #0
   1ce10:	orrne	r5, r5, #2
   1ce14:	strd	r6, [r9]
   1ce18:	mov	r0, r5
   1ce1c:	sub	sp, fp, #28
   1ce20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce24:	mov	r0, #0
   1ce28:	mov	r1, #-2147483648	; 0x80000000
   1ce2c:	mov	r2, r4
   1ce30:	mov	r3, r9
   1ce34:	bl	1ee9c <__assert_fail@plt+0xd898>
   1ce38:	ldr	r3, [sp, #24]
   1ce3c:	ldr	ip, [sp, #28]
   1ce40:	mov	r2, #1
   1ce44:	mov	r6, #0
   1ce48:	mov	r7, #-2147483648	; 0x80000000
   1ce4c:	subs	r0, r0, r3
   1ce50:	sbcs	r0, r1, ip
   1ce54:	bge	1cddc <__assert_fail@plt+0xb7d8>
   1ce58:	b	1cdec <__assert_fail@plt+0xb7e8>
   1ce5c:	ldr	r6, [sp, #8]
   1ce60:	mov	r0, #0
   1ce64:	mov	r1, #-2147483648	; 0x80000000
   1ce68:	mov	r3, r9
   1ce6c:	str	r4, [sp]
   1ce70:	mov	r2, r6
   1ce74:	bl	1ee9c <__assert_fail@plt+0xd898>
   1ce78:	ldr	r2, [sp, #24]
   1ce7c:	ldr	r3, [sp, #28]
   1ce80:	mov	r7, #1
   1ce84:	mov	r8, #-2147483648	; 0x80000000
   1ce88:	subs	r0, r0, r2
   1ce8c:	sbcs	r0, r1, r3
   1ce90:	mov	r0, #0
   1ce94:	str	r0, [sp, #4]
   1ce98:	blt	1cef8 <__assert_fail@plt+0xb8f4>
   1ce9c:	umull	r1, r0, r6, r2
   1cea0:	ldr	r7, [sp]
   1cea4:	mla	r0, r6, r3, r0
   1cea8:	mla	r8, r9, r2, r0
   1ceac:	str	r1, [sp, #4]
   1ceb0:	cmp	r8, #0
   1ceb4:	bmi	1cef8 <__assert_fail@plt+0xb8f4>
   1ceb8:	ldr	r3, [sp, #28]
   1cebc:	mvn	r0, #0
   1cec0:	mvn	r1, #-2147483648	; 0x80000000
   1cec4:	str	r7, [sp]
   1cec8:	mvn	r7, #0
   1cecc:	mvn	r4, #-2147483648	; 0x80000000
   1ced0:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1ced4:	mov	r6, #1
   1ced8:	ldr	r2, [sp, #24]
   1cedc:	ldr	r3, [sp, #28]
   1cee0:	str	r6, [sp, #8]
   1cee4:	ldr	r6, [sp, #4]
   1cee8:	subs	r0, r0, r6
   1ceec:	sbcs	r0, r1, r8
   1cef0:	bge	1cf38 <__assert_fail@plt+0xb934>
   1cef4:	b	1cf54 <__assert_fail@plt+0xb950>
   1cef8:	ldr	r6, [sp, #4]
   1cefc:	mov	r0, #0
   1cf00:	mov	r1, #-2147483648	; 0x80000000
   1cf04:	mov	r3, r8
   1cf08:	str	r7, [sp]
   1cf0c:	mov	r2, r6
   1cf10:	bl	1ee9c <__assert_fail@plt+0xd898>
   1cf14:	ldr	r2, [sp, #24]
   1cf18:	ldr	r3, [sp, #28]
   1cf1c:	mov	r7, #1
   1cf20:	mov	r4, #-2147483648	; 0x80000000
   1cf24:	str	r7, [sp, #8]
   1cf28:	mov	r7, #0
   1cf2c:	subs	r0, r0, r2
   1cf30:	sbcs	r0, r1, r3
   1cf34:	blt	1cf8c <__assert_fail@plt+0xb988>
   1cf38:	umull	r7, r0, r6, r2
   1cf3c:	mla	r0, r6, r3, r0
   1cf40:	mla	r4, r8, r2, r0
   1cf44:	ldr	r0, [sp]
   1cf48:	cmp	r4, #0
   1cf4c:	str	r0, [sp, #8]
   1cf50:	bmi	1cf8c <__assert_fail@plt+0xb988>
   1cf54:	ldr	r3, [sp, #28]
   1cf58:	mvn	r0, #0
   1cf5c:	mvn	r1, #-2147483648	; 0x80000000
   1cf60:	mvn	r9, #0
   1cf64:	mvn	r8, #-2147483648	; 0x80000000
   1cf68:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1cf6c:	ldr	r2, [sp, #24]
   1cf70:	ldr	r3, [sp, #28]
   1cf74:	subs	r0, r0, r7
   1cf78:	sbcs	r0, r1, r4
   1cf7c:	bge	1cfc8 <__assert_fail@plt+0xb9c4>
   1cf80:	mov	r0, #1
   1cf84:	str	r0, [sp, #8]
   1cf88:	b	1cfdc <__assert_fail@plt+0xb9d8>
   1cf8c:	mov	r0, #0
   1cf90:	mov	r1, #-2147483648	; 0x80000000
   1cf94:	mov	r2, r7
   1cf98:	mov	r3, r4
   1cf9c:	bl	1ee9c <__assert_fail@plt+0xd898>
   1cfa0:	ldr	r2, [sp, #24]
   1cfa4:	ldr	r3, [sp, #28]
   1cfa8:	subs	r0, r0, r2
   1cfac:	sbcs	r0, r1, r3
   1cfb0:	bge	1cfc8 <__assert_fail@plt+0xb9c4>
   1cfb4:	mov	r0, #1
   1cfb8:	mov	r9, #0
   1cfbc:	mov	r8, #-2147483648	; 0x80000000
   1cfc0:	str	r0, [sp, #8]
   1cfc4:	b	1d014 <__assert_fail@plt+0xba10>
   1cfc8:	umull	r9, r0, r7, r2
   1cfcc:	mla	r0, r7, r3, r0
   1cfd0:	mla	r8, r4, r2, r0
   1cfd4:	cmp	r8, #0
   1cfd8:	bmi	1d014 <__assert_fail@plt+0xba10>
   1cfdc:	ldr	r3, [sp, #28]
   1cfe0:	mvn	r0, #0
   1cfe4:	mvn	r1, #-2147483648	; 0x80000000
   1cfe8:	mvn	r4, #0
   1cfec:	mvn	r7, #-2147483648	; 0x80000000
   1cff0:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1cff4:	ldr	r2, [sp, #24]
   1cff8:	ldr	r3, [sp, #28]
   1cffc:	subs	r0, r0, r9
   1d000:	sbcs	r0, r1, r8
   1d004:	bge	1d050 <__assert_fail@plt+0xba4c>
   1d008:	mov	r0, #1
   1d00c:	str	r0, [sp, #8]
   1d010:	b	1d064 <__assert_fail@plt+0xba60>
   1d014:	mov	r0, #0
   1d018:	mov	r1, #-2147483648	; 0x80000000
   1d01c:	mov	r2, r9
   1d020:	mov	r3, r8
   1d024:	bl	1ee9c <__assert_fail@plt+0xd898>
   1d028:	ldr	r2, [sp, #24]
   1d02c:	ldr	r3, [sp, #28]
   1d030:	subs	r0, r0, r2
   1d034:	sbcs	r0, r1, r3
   1d038:	bge	1d050 <__assert_fail@plt+0xba4c>
   1d03c:	mov	r0, #1
   1d040:	mov	r4, #0
   1d044:	mov	r7, #-2147483648	; 0x80000000
   1d048:	str	r0, [sp, #8]
   1d04c:	b	1d09c <__assert_fail@plt+0xba98>
   1d050:	umull	r4, r0, r9, r2
   1d054:	mla	r0, r9, r3, r0
   1d058:	mla	r7, r8, r2, r0
   1d05c:	cmp	r7, #0
   1d060:	bmi	1d09c <__assert_fail@plt+0xba98>
   1d064:	ldr	r3, [sp, #28]
   1d068:	mvn	r0, #0
   1d06c:	mvn	r1, #-2147483648	; 0x80000000
   1d070:	mvn	r8, #0
   1d074:	mvn	r9, #-2147483648	; 0x80000000
   1d078:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1d07c:	ldr	r2, [sp, #24]
   1d080:	ldr	r3, [sp, #28]
   1d084:	subs	r0, r0, r4
   1d088:	sbcs	r0, r1, r7
   1d08c:	bge	1d0d8 <__assert_fail@plt+0xbad4>
   1d090:	mov	r0, #1
   1d094:	str	r0, [sp, #8]
   1d098:	b	1d0ec <__assert_fail@plt+0xbae8>
   1d09c:	mov	r0, #0
   1d0a0:	mov	r1, #-2147483648	; 0x80000000
   1d0a4:	mov	r2, r4
   1d0a8:	mov	r3, r7
   1d0ac:	bl	1ee9c <__assert_fail@plt+0xd898>
   1d0b0:	ldr	r2, [sp, #24]
   1d0b4:	ldr	r3, [sp, #28]
   1d0b8:	subs	r0, r0, r2
   1d0bc:	sbcs	r0, r1, r3
   1d0c0:	bge	1d0d8 <__assert_fail@plt+0xbad4>
   1d0c4:	mov	r0, #1
   1d0c8:	mov	r8, #0
   1d0cc:	mov	r9, #-2147483648	; 0x80000000
   1d0d0:	str	r0, [sp, #8]
   1d0d4:	b	1d128 <__assert_fail@plt+0xbb24>
   1d0d8:	umull	r8, r0, r4, r2
   1d0dc:	mla	r0, r4, r3, r0
   1d0e0:	mla	r9, r7, r2, r0
   1d0e4:	cmp	r9, #0
   1d0e8:	bmi	1d128 <__assert_fail@plt+0xbb24>
   1d0ec:	ldr	r3, [sp, #28]
   1d0f0:	mvn	r0, #0
   1d0f4:	mvn	r1, #-2147483648	; 0x80000000
   1d0f8:	mvn	r4, #0
   1d0fc:	mvn	r6, #-2147483648	; 0x80000000
   1d100:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1d104:	ldr	r2, [sp, #24]
   1d108:	ldr	r3, [sp, #28]
   1d10c:	subs	r0, r0, r8
   1d110:	sbcs	r0, r1, r9
   1d114:	bge	1d168 <__assert_fail@plt+0xbb64>
   1d118:	ldr	r9, [sp, #12]
   1d11c:	mov	r0, #1
   1d120:	str	r0, [sp, #8]
   1d124:	b	1d180 <__assert_fail@plt+0xbb7c>
   1d128:	mov	r0, #0
   1d12c:	mov	r1, #-2147483648	; 0x80000000
   1d130:	mov	r2, r8
   1d134:	mov	r3, r9
   1d138:	bl	1ee9c <__assert_fail@plt+0xd898>
   1d13c:	ldr	r2, [sp, #24]
   1d140:	ldr	r3, [sp, #28]
   1d144:	subs	r0, r0, r2
   1d148:	sbcs	r0, r1, r3
   1d14c:	bge	1d168 <__assert_fail@plt+0xbb64>
   1d150:	ldr	r9, [sp, #12]
   1d154:	mov	r0, #1
   1d158:	mov	r4, #0
   1d15c:	mov	r6, #-2147483648	; 0x80000000
   1d160:	str	r0, [sp, #8]
   1d164:	b	1d1cc <__assert_fail@plt+0xbbc8>
   1d168:	umull	r4, r0, r8, r2
   1d16c:	mla	r0, r8, r3, r0
   1d170:	mla	r6, r9, r2, r0
   1d174:	ldr	r9, [sp, #12]
   1d178:	cmp	r6, #0
   1d17c:	bmi	1d1cc <__assert_fail@plt+0xbbc8>
   1d180:	ldr	r3, [sp, #28]
   1d184:	mvn	r0, #0
   1d188:	mvn	r1, #-2147483648	; 0x80000000
   1d18c:	mov	r8, r6
   1d190:	mvn	r6, #0
   1d194:	mvn	r7, #-2147483648	; 0x80000000
   1d198:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1d19c:	ldr	r3, [sp, #24]
   1d1a0:	ldr	ip, [sp, #28]
   1d1a4:	subs	r0, r0, r4
   1d1a8:	mov	r2, #1
   1d1ac:	sbcs	r0, r1, r8
   1d1b0:	blt	1d1c4 <__assert_fail@plt+0xbbc0>
   1d1b4:	umull	r6, r0, r4, r3
   1d1b8:	mov	r2, #0
   1d1bc:	mla	r0, r4, ip, r0
   1d1c0:	mla	r7, r8, r3, r0
   1d1c4:	ldr	r0, [sp, #8]
   1d1c8:	b	1c310 <__assert_fail@plt+0xad0c>
   1d1cc:	mov	r0, #0
   1d1d0:	mov	r1, #-2147483648	; 0x80000000
   1d1d4:	mov	r2, r4
   1d1d8:	mov	r3, r6
   1d1dc:	bl	1ee9c <__assert_fail@plt+0xd898>
   1d1e0:	ldr	r3, [sp, #24]
   1d1e4:	ldr	ip, [sp, #28]
   1d1e8:	mov	r8, r6
   1d1ec:	mov	r2, #1
   1d1f0:	mov	r6, #0
   1d1f4:	mov	r7, #-2147483648	; 0x80000000
   1d1f8:	subs	r0, r0, r3
   1d1fc:	sbcs	r0, r1, ip
   1d200:	bge	1d1b4 <__assert_fail@plt+0xbbb0>
   1d204:	b	1d1c4 <__assert_fail@plt+0xbbc0>
   1d208:	movw	r0, #3301	; 0xce5
   1d20c:	movw	r1, #3339	; 0xd0b
   1d210:	movw	r3, #3355	; 0xd1b
   1d214:	mov	r2, #85	; 0x55
   1d218:	movt	r0, #2
   1d21c:	movt	r1, #2
   1d220:	movt	r3, #2
   1d224:	bl	11604 <__assert_fail@plt>
   1d228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d22c:	add	fp, sp, #28
   1d230:	sub	sp, sp, #12
   1d234:	cmp	r2, #37	; 0x25
   1d238:	bcs	1dd04 <__assert_fail@plt+0xc700>
   1d23c:	ldr	r8, [fp, #8]
   1d240:	mov	r9, r3
   1d244:	mov	r7, r2
   1d248:	mov	r4, r1
   1d24c:	mov	r5, r0
   1d250:	bl	114e4 <__errno_location@plt>
   1d254:	cmp	r4, #0
   1d258:	add	sl, sp, #8
   1d25c:	mov	r6, r0
   1d260:	mov	r0, #0
   1d264:	mov	r2, r7
   1d268:	movne	sl, r4
   1d26c:	str	r0, [r6]
   1d270:	mov	r0, r5
   1d274:	mov	r1, sl
   1d278:	bl	112f8 <strtol@plt>
   1d27c:	ldr	r4, [sl]
   1d280:	str	r9, [sp, #4]
   1d284:	cmp	r4, r5
   1d288:	beq	1d2b8 <__assert_fail@plt+0xbcb4>
   1d28c:	mov	r7, r0
   1d290:	ldr	r0, [r6]
   1d294:	cmp	r0, #0
   1d298:	beq	1d2ec <__assert_fail@plt+0xbce8>
   1d29c:	mov	r9, #4
   1d2a0:	cmp	r0, #34	; 0x22
   1d2a4:	bne	1dce0 <__assert_fail@plt+0xc6dc>
   1d2a8:	mov	r9, #1
   1d2ac:	cmp	r8, #0
   1d2b0:	bne	1d2f8 <__assert_fail@plt+0xbcf4>
   1d2b4:	b	1dcd8 <__assert_fail@plt+0xc6d4>
   1d2b8:	mov	r9, #4
   1d2bc:	cmp	r8, #0
   1d2c0:	beq	1dce0 <__assert_fail@plt+0xc6dc>
   1d2c4:	ldrb	r1, [r5]
   1d2c8:	cmp	r1, #0
   1d2cc:	beq	1dce0 <__assert_fail@plt+0xc6dc>
   1d2d0:	mov	r0, r8
   1d2d4:	bl	114c0 <strchr@plt>
   1d2d8:	cmp	r0, #0
   1d2dc:	beq	1dce0 <__assert_fail@plt+0xc6dc>
   1d2e0:	mov	r7, #1
   1d2e4:	mov	r9, #0
   1d2e8:	b	1d2f8 <__assert_fail@plt+0xbcf4>
   1d2ec:	mov	r9, r0
   1d2f0:	cmp	r8, #0
   1d2f4:	beq	1dcd8 <__assert_fail@plt+0xc6d4>
   1d2f8:	ldrb	r5, [r4]
   1d2fc:	cmp	r5, #0
   1d300:	beq	1dcd8 <__assert_fail@plt+0xc6d4>
   1d304:	mov	r0, r8
   1d308:	mov	r1, r5
   1d30c:	bl	114c0 <strchr@plt>
   1d310:	cmp	r0, #0
   1d314:	beq	1d554 <__assert_fail@plt+0xbf50>
   1d318:	sub	r0, r5, #69	; 0x45
   1d31c:	mov	ip, #1
   1d320:	mov	r6, #1024	; 0x400
   1d324:	cmp	r0, #47	; 0x2f
   1d328:	bhi	1d444 <__assert_fail@plt+0xbe40>
   1d32c:	add	r1, pc, #0
   1d330:	ldr	pc, [r1, r0, lsl #2]
   1d334:	strdeq	sp, [r1], -r4
   1d338:	andeq	sp, r1, r4, asr #8
   1d33c:	strdeq	sp, [r1], -r4
   1d340:	andeq	sp, r1, r4, asr #8
   1d344:	andeq	sp, r1, r4, asr #8
   1d348:	andeq	sp, r1, r4, asr #8
   1d34c:	strdeq	sp, [r1], -r4
   1d350:	andeq	sp, r1, r4, asr #8
   1d354:	strdeq	sp, [r1], -r4
   1d358:	andeq	sp, r1, r4, asr #8
   1d35c:	andeq	sp, r1, r4, asr #8
   1d360:	strdeq	sp, [r1], -r4
   1d364:	andeq	sp, r1, r4, asr #8
   1d368:	andeq	sp, r1, r4, asr #8
   1d36c:	andeq	sp, r1, r4, asr #8
   1d370:	strdeq	sp, [r1], -r4
   1d374:	andeq	sp, r1, r4, asr #8
   1d378:	andeq	sp, r1, r4, asr #8
   1d37c:	andeq	sp, r1, r4, asr #8
   1d380:	andeq	sp, r1, r4, asr #8
   1d384:	strdeq	sp, [r1], -r4
   1d388:	strdeq	sp, [r1], -r4
   1d38c:	andeq	sp, r1, r4, asr #8
   1d390:	andeq	sp, r1, r4, asr #8
   1d394:	andeq	sp, r1, r4, asr #8
   1d398:	andeq	sp, r1, r4, asr #8
   1d39c:	andeq	sp, r1, r4, asr #8
   1d3a0:	andeq	sp, r1, r4, asr #8
   1d3a4:	andeq	sp, r1, r4, asr #8
   1d3a8:	andeq	sp, r1, r4, asr #8
   1d3ac:	andeq	sp, r1, r4, asr #8
   1d3b0:	andeq	sp, r1, r4, asr #8
   1d3b4:	andeq	sp, r1, r4, asr #8
   1d3b8:	andeq	sp, r1, r4, asr #8
   1d3bc:	strdeq	sp, [r1], -r4
   1d3c0:	andeq	sp, r1, r4, asr #8
   1d3c4:	andeq	sp, r1, r4, asr #8
   1d3c8:	andeq	sp, r1, r4, asr #8
   1d3cc:	strdeq	sp, [r1], -r4
   1d3d0:	andeq	sp, r1, r4, asr #8
   1d3d4:	strdeq	sp, [r1], -r4
   1d3d8:	andeq	sp, r1, r4, asr #8
   1d3dc:	andeq	sp, r1, r4, asr #8
   1d3e0:	andeq	sp, r1, r4, asr #8
   1d3e4:	andeq	sp, r1, r4, asr #8
   1d3e8:	andeq	sp, r1, r4, asr #8
   1d3ec:	andeq	sp, r1, r4, asr #8
   1d3f0:	strdeq	sp, [r1], -r4
   1d3f4:	mov	r0, r8
   1d3f8:	mov	r1, #48	; 0x30
   1d3fc:	bl	114c0 <strchr@plt>
   1d400:	cmp	r0, #0
   1d404:	beq	1d440 <__assert_fail@plt+0xbe3c>
   1d408:	ldrb	r0, [r4, #1]
   1d40c:	cmp	r0, #66	; 0x42
   1d410:	cmpne	r0, #68	; 0x44
   1d414:	bne	1d424 <__assert_fail@plt+0xbe20>
   1d418:	mov	ip, #2
   1d41c:	mov	r6, #1000	; 0x3e8
   1d420:	b	1d444 <__assert_fail@plt+0xbe40>
   1d424:	cmp	r0, #105	; 0x69
   1d428:	bne	1d440 <__assert_fail@plt+0xbe3c>
   1d42c:	ldrb	r0, [r4, #2]
   1d430:	mov	ip, #1
   1d434:	cmp	r0, #66	; 0x42
   1d438:	movweq	ip, #3
   1d43c:	b	1d444 <__assert_fail@plt+0xbe40>
   1d440:	mov	ip, #1
   1d444:	sub	r1, r5, #66	; 0x42
   1d448:	cmp	r1, #53	; 0x35
   1d44c:	bhi	1d554 <__assert_fail@plt+0xbf50>
   1d450:	add	r2, pc, #4
   1d454:	mov	r0, #0
   1d458:	ldr	pc, [r2, r1, lsl #2]
   1d45c:	ldrdeq	sp, [r1], -ip
   1d460:	andeq	sp, r1, r4, asr r5
   1d464:	andeq	sp, r1, r4, asr r5
   1d468:	strdeq	sp, [r1], -r0
   1d46c:	andeq	sp, r1, r4, asr r5
   1d470:	andeq	sp, r1, r4, lsr r5
   1d474:	andeq	sp, r1, r4, asr r5
   1d478:	andeq	sp, r1, r4, asr r5
   1d47c:	andeq	sp, r1, r4, asr r5
   1d480:	andeq	sp, r1, r0, ror #10
   1d484:	andeq	sp, r1, r4, asr r5
   1d488:	andeq	sp, r1, ip, ror r5
   1d48c:	andeq	sp, r1, r4, asr r5
   1d490:	andeq	sp, r1, r4, asr r5
   1d494:	andeq	sp, r1, r0, lsl r6
   1d498:	andeq	sp, r1, r4, asr r5
   1d49c:	andeq	sp, r1, r4, asr r5
   1d4a0:	andeq	sp, r1, r4, asr r5
   1d4a4:	muleq	r1, ip, r5
   1d4a8:	andeq	sp, r1, r4, asr r5
   1d4ac:	andeq	sp, r1, r4, asr r5
   1d4b0:	andeq	sp, r1, r4, asr r5
   1d4b4:	andeq	sp, r1, r4, asr r5
   1d4b8:	andeq	sp, r1, r0, lsr r6
   1d4bc:			; <UNDEFINED> instruction: 0x0001d5bc
   1d4c0:	andeq	sp, r1, r4, asr r5
   1d4c4:	andeq	sp, r1, r4, asr r5
   1d4c8:	andeq	sp, r1, r4, asr r5
   1d4cc:	andeq	sp, r1, r4, asr r5
   1d4d0:	andeq	sp, r1, r4, asr r5
   1d4d4:	andeq	sp, r1, r4, asr r5
   1d4d8:	andeq	sp, r1, r4, asr r5
   1d4dc:	andeq	sp, r1, r0, asr r6
   1d4e0:	andeq	sp, r1, r0, asr #25
   1d4e4:	andeq	sp, r1, r4, asr r5
   1d4e8:	andeq	sp, r1, r4, asr r5
   1d4ec:	andeq	sp, r1, r4, asr r5
   1d4f0:	andeq	sp, r1, r4, lsr r5
   1d4f4:	andeq	sp, r1, r4, asr r5
   1d4f8:	andeq	sp, r1, r4, asr r5
   1d4fc:	andeq	sp, r1, r4, asr r5
   1d500:	andeq	sp, r1, r0, ror #10
   1d504:	andeq	sp, r1, r4, asr r5
   1d508:	andeq	sp, r1, ip, ror r5
   1d50c:	andeq	sp, r1, r4, asr r5
   1d510:	andeq	sp, r1, r4, asr r5
   1d514:	andeq	sp, r1, r4, asr r5
   1d518:	andeq	sp, r1, r4, asr r5
   1d51c:	andeq	sp, r1, r4, asr r5
   1d520:	andeq	sp, r1, r4, asr r5
   1d524:	muleq	r1, ip, r5
   1d528:	andeq	sp, r1, r4, asr r5
   1d52c:	andeq	sp, r1, r4, asr r5
   1d530:	andeq	sp, r1, r0, ror r6
   1d534:	cmn	r7, #1
   1d538:	ble	1d684 <__assert_fail@plt+0xc080>
   1d53c:	mvn	r2, #-2147483648	; 0x80000000
   1d540:	mov	r3, #1
   1d544:	udiv	r0, r2, r6
   1d548:	cmp	r0, r7
   1d54c:	bge	1d69c <__assert_fail@plt+0xc098>
   1d550:	b	1d75c <__assert_fail@plt+0xc158>
   1d554:	ldr	r0, [sp, #4]
   1d558:	orr	r9, r9, #2
   1d55c:	b	1dcdc <__assert_fail@plt+0xc6d8>
   1d560:	cmn	r7, #1
   1d564:	ble	1d6b0 <__assert_fail@plt+0xc0ac>
   1d568:	mvn	r1, #-2147483648	; 0x80000000
   1d56c:	udiv	r1, r1, r6
   1d570:	cmp	r1, r7
   1d574:	bge	1d6c4 <__assert_fail@plt+0xc0c0>
   1d578:	b	1d92c <__assert_fail@plt+0xc328>
   1d57c:	cmn	r7, #1
   1d580:	ble	1d6cc <__assert_fail@plt+0xc0c8>
   1d584:	mvn	r1, #-2147483648	; 0x80000000
   1d588:	mov	r0, #1
   1d58c:	udiv	r2, r1, r6
   1d590:	cmp	r2, r7
   1d594:	bge	1d6e4 <__assert_fail@plt+0xc0e0>
   1d598:	b	1d798 <__assert_fail@plt+0xc194>
   1d59c:	cmn	r7, #1
   1d5a0:	ble	1d6f8 <__assert_fail@plt+0xc0f4>
   1d5a4:	mvn	r0, #-2147483648	; 0x80000000
   1d5a8:	mov	r1, #1
   1d5ac:	udiv	r2, r0, r6
   1d5b0:	cmp	r2, r7
   1d5b4:	bge	1d710 <__assert_fail@plt+0xc10c>
   1d5b8:	b	1d720 <__assert_fail@plt+0xc11c>
   1d5bc:	cmp	r7, #0
   1d5c0:	bmi	1d7d0 <__assert_fail@plt+0xc1cc>
   1d5c4:	mvn	r0, #-2147483648	; 0x80000000
   1d5c8:	mov	r3, #1
   1d5cc:	udiv	r1, r0, r6
   1d5d0:	cmp	r1, r7
   1d5d4:	bge	1d7ec <__assert_fail@plt+0xc1e8>
   1d5d8:	b	1d7fc <__assert_fail@plt+0xc1f8>
   1d5dc:	cmn	r7, #1
   1d5e0:	ble	1d814 <__assert_fail@plt+0xc210>
   1d5e4:	cmp	r7, #2097152	; 0x200000
   1d5e8:	blt	1d828 <__assert_fail@plt+0xc224>
   1d5ec:	b	1d92c <__assert_fail@plt+0xc328>
   1d5f0:	cmp	r7, #0
   1d5f4:	bmi	1d830 <__assert_fail@plt+0xc22c>
   1d5f8:	mvn	r0, #-2147483648	; 0x80000000
   1d5fc:	mov	r3, #1
   1d600:	udiv	r1, r0, r6
   1d604:	cmp	r1, r7
   1d608:	bge	1d84c <__assert_fail@plt+0xc248>
   1d60c:	b	1d85c <__assert_fail@plt+0xc258>
   1d610:	cmp	r7, #0
   1d614:	bmi	1d874 <__assert_fail@plt+0xc270>
   1d618:	mvn	r0, #-2147483648	; 0x80000000
   1d61c:	mov	r3, #1
   1d620:	udiv	r1, r0, r6
   1d624:	cmp	r1, r7
   1d628:	bge	1d890 <__assert_fail@plt+0xc28c>
   1d62c:	b	1d8a0 <__assert_fail@plt+0xc29c>
   1d630:	cmp	r7, #0
   1d634:	bmi	1d8b8 <__assert_fail@plt+0xc2b4>
   1d638:	mvn	r0, #-2147483648	; 0x80000000
   1d63c:	mov	r3, #1
   1d640:	udiv	r1, r0, r6
   1d644:	cmp	r1, r7
   1d648:	bge	1d8d4 <__assert_fail@plt+0xc2d0>
   1d64c:	b	1d8e4 <__assert_fail@plt+0xc2e0>
   1d650:	cmn	r7, #1
   1d654:	ble	1d8fc <__assert_fail@plt+0xc2f8>
   1d658:	movw	r1, #65535	; 0xffff
   1d65c:	movt	r1, #31
   1d660:	orr	r1, r1, #2097152	; 0x200000
   1d664:	cmp	r7, r1
   1d668:	ble	1d910 <__assert_fail@plt+0xc30c>
   1d66c:	b	1d92c <__assert_fail@plt+0xc328>
   1d670:	cmn	r7, #1
   1d674:	ble	1d918 <__assert_fail@plt+0xc314>
   1d678:	cmp	r7, #1073741824	; 0x40000000
   1d67c:	bge	1d92c <__assert_fail@plt+0xc328>
   1d680:	b	1d944 <__assert_fail@plt+0xc340>
   1d684:	beq	1d69c <__assert_fail@plt+0xc098>
   1d688:	mov	r2, #-2147483648	; 0x80000000
   1d68c:	mov	r3, #1
   1d690:	sdiv	r0, r2, r7
   1d694:	cmp	r0, r6
   1d698:	blt	1d774 <__assert_fail@plt+0xc170>
   1d69c:	mul	r2, r7, r6
   1d6a0:	mov	r3, #0
   1d6a4:	cmp	r2, #0
   1d6a8:	bpl	1d75c <__assert_fail@plt+0xc158>
   1d6ac:	b	1d774 <__assert_fail@plt+0xc170>
   1d6b0:	beq	1d6c4 <__assert_fail@plt+0xc0c0>
   1d6b4:	mov	r1, #-2147483648	; 0x80000000
   1d6b8:	sdiv	r1, r1, r7
   1d6bc:	cmp	r1, r6
   1d6c0:	blt	1d92c <__assert_fail@plt+0xc328>
   1d6c4:	mul	r7, r7, r6
   1d6c8:	b	1dcc0 <__assert_fail@plt+0xc6bc>
   1d6cc:	beq	1d6e4 <__assert_fail@plt+0xc0e0>
   1d6d0:	mov	r1, #-2147483648	; 0x80000000
   1d6d4:	mov	r0, #1
   1d6d8:	sdiv	r2, r1, r7
   1d6dc:	cmp	r2, r6
   1d6e0:	blt	1d7b0 <__assert_fail@plt+0xc1ac>
   1d6e4:	mul	r1, r7, r6
   1d6e8:	mov	r0, #0
   1d6ec:	cmp	r1, #0
   1d6f0:	bpl	1d798 <__assert_fail@plt+0xc194>
   1d6f4:	b	1d7b0 <__assert_fail@plt+0xc1ac>
   1d6f8:	beq	1d710 <__assert_fail@plt+0xc10c>
   1d6fc:	mov	r0, #-2147483648	; 0x80000000
   1d700:	mov	r1, #1
   1d704:	sdiv	r2, r0, r7
   1d708:	cmp	r2, r6
   1d70c:	blt	1d738 <__assert_fail@plt+0xc134>
   1d710:	mul	r0, r7, r6
   1d714:	mov	r1, #0
   1d718:	cmp	r0, #0
   1d71c:	bmi	1d738 <__assert_fail@plt+0xc134>
   1d720:	mvn	r2, #-2147483648	; 0x80000000
   1d724:	mov	r3, #1
   1d728:	udiv	r7, r2, r6
   1d72c:	cmp	r7, r0
   1d730:	blt	1d75c <__assert_fail@plt+0xc158>
   1d734:	b	1d74c <__assert_fail@plt+0xc148>
   1d738:	mov	r2, #-2147483648	; 0x80000000
   1d73c:	mov	r3, #1
   1d740:	sdiv	r7, r2, r0
   1d744:	cmp	r7, r6
   1d748:	blt	1d774 <__assert_fail@plt+0xc170>
   1d74c:	mul	r2, r0, r6
   1d750:	mov	r3, r1
   1d754:	cmp	r2, #0
   1d758:	bmi	1d774 <__assert_fail@plt+0xc170>
   1d75c:	mvn	r1, #-2147483648	; 0x80000000
   1d760:	mov	r0, #1
   1d764:	udiv	r7, r1, r6
   1d768:	cmp	r7, r2
   1d76c:	blt	1d798 <__assert_fail@plt+0xc194>
   1d770:	b	1d788 <__assert_fail@plt+0xc184>
   1d774:	mov	r1, #-2147483648	; 0x80000000
   1d778:	mov	r0, #1
   1d77c:	sdiv	r7, r1, r2
   1d780:	cmp	r7, r6
   1d784:	blt	1d7b0 <__assert_fail@plt+0xc1ac>
   1d788:	mul	r1, r2, r6
   1d78c:	mov	r0, r3
   1d790:	cmp	r1, #0
   1d794:	bmi	1d7b0 <__assert_fail@plt+0xc1ac>
   1d798:	mvn	r7, #-2147483648	; 0x80000000
   1d79c:	mov	r2, #1
   1d7a0:	udiv	r3, r7, r6
   1d7a4:	cmp	r3, r1
   1d7a8:	blt	1dcbc <__assert_fail@plt+0xc6b8>
   1d7ac:	b	1d7c4 <__assert_fail@plt+0xc1c0>
   1d7b0:	mov	r7, #-2147483648	; 0x80000000
   1d7b4:	mov	r2, #1
   1d7b8:	sdiv	r3, r7, r1
   1d7bc:	cmp	r3, r6
   1d7c0:	blt	1dcbc <__assert_fail@plt+0xc6b8>
   1d7c4:	mov	r2, #0
   1d7c8:	mul	r7, r1, r6
   1d7cc:	b	1dcbc <__assert_fail@plt+0xc6b8>
   1d7d0:	cmn	r7, #1
   1d7d4:	beq	1d7ec <__assert_fail@plt+0xc1e8>
   1d7d8:	mov	r0, #-2147483648	; 0x80000000
   1d7dc:	mov	r3, #1
   1d7e0:	sdiv	r1, r0, r7
   1d7e4:	cmp	r1, r6
   1d7e8:	blt	1d94c <__assert_fail@plt+0xc348>
   1d7ec:	mul	r0, r7, r6
   1d7f0:	mov	r3, #0
   1d7f4:	cmp	r0, #0
   1d7f8:	bmi	1d94c <__assert_fail@plt+0xc348>
   1d7fc:	mvn	r1, #-2147483648	; 0x80000000
   1d800:	mov	r2, #1
   1d804:	udiv	r7, r1, r6
   1d808:	cmp	r7, r0
   1d80c:	bge	1d960 <__assert_fail@plt+0xc35c>
   1d810:	b	1d970 <__assert_fail@plt+0xc36c>
   1d814:	beq	1d828 <__assert_fail@plt+0xc224>
   1d818:	mov	r1, #-2147483648	; 0x80000000
   1d81c:	sdiv	r1, r1, r7
   1d820:	cmp	r1, #1024	; 0x400
   1d824:	blt	1d92c <__assert_fail@plt+0xc328>
   1d828:	lsl	r7, r7, #10
   1d82c:	b	1dcc0 <__assert_fail@plt+0xc6bc>
   1d830:	cmn	r7, #1
   1d834:	beq	1d84c <__assert_fail@plt+0xc248>
   1d838:	mov	r0, #-2147483648	; 0x80000000
   1d83c:	mov	r3, #1
   1d840:	sdiv	r1, r0, r7
   1d844:	cmp	r1, r6
   1d848:	blt	1da1c <__assert_fail@plt+0xc418>
   1d84c:	mul	r0, r7, r6
   1d850:	mov	r3, #0
   1d854:	cmp	r0, #0
   1d858:	bmi	1da1c <__assert_fail@plt+0xc418>
   1d85c:	mvn	r1, #-2147483648	; 0x80000000
   1d860:	mov	r2, #1
   1d864:	udiv	r7, r1, r6
   1d868:	cmp	r7, r0
   1d86c:	bge	1da30 <__assert_fail@plt+0xc42c>
   1d870:	b	1da40 <__assert_fail@plt+0xc43c>
   1d874:	cmn	r7, #1
   1d878:	beq	1d890 <__assert_fail@plt+0xc28c>
   1d87c:	mov	r0, #-2147483648	; 0x80000000
   1d880:	mov	r3, #1
   1d884:	sdiv	r1, r0, r7
   1d888:	cmp	r1, r6
   1d88c:	blt	1daec <__assert_fail@plt+0xc4e8>
   1d890:	mul	r0, r7, r6
   1d894:	mov	r3, #0
   1d898:	cmp	r0, #0
   1d89c:	bmi	1daec <__assert_fail@plt+0xc4e8>
   1d8a0:	mvn	r1, #-2147483648	; 0x80000000
   1d8a4:	mov	r2, #1
   1d8a8:	udiv	r7, r1, r6
   1d8ac:	cmp	r7, r0
   1d8b0:	bge	1db00 <__assert_fail@plt+0xc4fc>
   1d8b4:	b	1db10 <__assert_fail@plt+0xc50c>
   1d8b8:	cmn	r7, #1
   1d8bc:	beq	1d8d4 <__assert_fail@plt+0xc2d0>
   1d8c0:	mov	r0, #-2147483648	; 0x80000000
   1d8c4:	mov	r3, #1
   1d8c8:	sdiv	r1, r0, r7
   1d8cc:	cmp	r1, r6
   1d8d0:	blt	1db50 <__assert_fail@plt+0xc54c>
   1d8d4:	mul	r0, r7, r6
   1d8d8:	mov	r3, #0
   1d8dc:	cmp	r0, #0
   1d8e0:	bmi	1db50 <__assert_fail@plt+0xc54c>
   1d8e4:	mvn	r1, #-2147483648	; 0x80000000
   1d8e8:	mov	r2, #1
   1d8ec:	udiv	r7, r1, r6
   1d8f0:	cmp	r7, r0
   1d8f4:	bge	1db64 <__assert_fail@plt+0xc560>
   1d8f8:	b	1db74 <__assert_fail@plt+0xc570>
   1d8fc:	beq	1d910 <__assert_fail@plt+0xc30c>
   1d900:	mov	r1, #-2147483648	; 0x80000000
   1d904:	sdiv	r1, r1, r7
   1d908:	cmp	r1, #512	; 0x200
   1d90c:	blt	1d92c <__assert_fail@plt+0xc328>
   1d910:	lsl	r7, r7, #9
   1d914:	b	1dcc0 <__assert_fail@plt+0xc6bc>
   1d918:	beq	1d944 <__assert_fail@plt+0xc340>
   1d91c:	mov	r1, #-2147483648	; 0x80000000
   1d920:	sdiv	r1, r1, r7
   1d924:	cmp	r1, #2
   1d928:	bge	1d944 <__assert_fail@plt+0xc340>
   1d92c:	cmp	r7, #0
   1d930:	mvn	r1, #-2147483648	; 0x80000000
   1d934:	mov	r0, #1
   1d938:	movmi	r1, #-2147483648	; 0x80000000
   1d93c:	mov	r7, r1
   1d940:	b	1dcc0 <__assert_fail@plt+0xc6bc>
   1d944:	lsl	r7, r7, #1
   1d948:	b	1dcc0 <__assert_fail@plt+0xc6bc>
   1d94c:	mov	r1, #-2147483648	; 0x80000000
   1d950:	mov	r2, #1
   1d954:	sdiv	r7, r1, r0
   1d958:	cmp	r7, r6
   1d95c:	blt	1d988 <__assert_fail@plt+0xc384>
   1d960:	mul	r1, r0, r6
   1d964:	mov	r2, r3
   1d968:	cmp	r1, #0
   1d96c:	bmi	1d988 <__assert_fail@plt+0xc384>
   1d970:	mvn	r3, #-2147483648	; 0x80000000
   1d974:	mov	r0, #1
   1d978:	udiv	r7, r3, r6
   1d97c:	cmp	r7, r1
   1d980:	bge	1d99c <__assert_fail@plt+0xc398>
   1d984:	b	1d9ac <__assert_fail@plt+0xc3a8>
   1d988:	mov	r3, #-2147483648	; 0x80000000
   1d98c:	mov	r0, #1
   1d990:	sdiv	r7, r3, r1
   1d994:	cmp	r7, r6
   1d998:	blt	1d9c4 <__assert_fail@plt+0xc3c0>
   1d99c:	mul	r3, r1, r6
   1d9a0:	mov	r0, r2
   1d9a4:	cmp	r3, #0
   1d9a8:	bmi	1d9c4 <__assert_fail@plt+0xc3c0>
   1d9ac:	mvn	r1, #-2147483648	; 0x80000000
   1d9b0:	udiv	r2, r1, r6
   1d9b4:	cmp	r2, r3
   1d9b8:	bge	1d9dc <__assert_fail@plt+0xc3d8>
   1d9bc:	mov	r0, #1
   1d9c0:	b	1d9e8 <__assert_fail@plt+0xc3e4>
   1d9c4:	mov	r1, #-2147483648	; 0x80000000
   1d9c8:	sdiv	r2, r1, r3
   1d9cc:	cmp	r2, r6
   1d9d0:	bge	1d9dc <__assert_fail@plt+0xc3d8>
   1d9d4:	mov	r0, #1
   1d9d8:	b	1d9fc <__assert_fail@plt+0xc3f8>
   1d9dc:	mul	r1, r3, r6
   1d9e0:	cmp	r1, #0
   1d9e4:	bmi	1d9fc <__assert_fail@plt+0xc3f8>
   1d9e8:	mvn	r2, #-2147483648	; 0x80000000
   1d9ec:	udiv	r3, r2, r6
   1d9f0:	cmp	r3, r1
   1d9f4:	bge	1da0c <__assert_fail@plt+0xc408>
   1d9f8:	b	1da8c <__assert_fail@plt+0xc488>
   1d9fc:	mov	r2, #-2147483648	; 0x80000000
   1da00:	sdiv	r3, r2, r1
   1da04:	cmp	r3, r6
   1da08:	blt	1daa4 <__assert_fail@plt+0xc4a0>
   1da0c:	mul	r2, r1, r6
   1da10:	cmp	r2, #0
   1da14:	bpl	1dab8 <__assert_fail@plt+0xc4b4>
   1da18:	b	1dacc <__assert_fail@plt+0xc4c8>
   1da1c:	mov	r1, #-2147483648	; 0x80000000
   1da20:	mov	r2, #1
   1da24:	sdiv	r7, r1, r0
   1da28:	cmp	r7, r6
   1da2c:	blt	1da58 <__assert_fail@plt+0xc454>
   1da30:	mul	r1, r0, r6
   1da34:	mov	r2, r3
   1da38:	cmp	r1, #0
   1da3c:	bmi	1da58 <__assert_fail@plt+0xc454>
   1da40:	mvn	r3, #-2147483648	; 0x80000000
   1da44:	mov	r0, #1
   1da48:	udiv	r7, r3, r6
   1da4c:	cmp	r7, r1
   1da50:	bge	1da6c <__assert_fail@plt+0xc468>
   1da54:	b	1da7c <__assert_fail@plt+0xc478>
   1da58:	mov	r3, #-2147483648	; 0x80000000
   1da5c:	mov	r0, #1
   1da60:	sdiv	r7, r3, r1
   1da64:	cmp	r7, r6
   1da68:	blt	1da94 <__assert_fail@plt+0xc490>
   1da6c:	mul	r3, r1, r6
   1da70:	mov	r0, r2
   1da74:	cmp	r3, #0
   1da78:	bmi	1da94 <__assert_fail@plt+0xc490>
   1da7c:	mvn	r2, #-2147483648	; 0x80000000
   1da80:	udiv	r1, r2, r6
   1da84:	cmp	r1, r3
   1da88:	bge	1daac <__assert_fail@plt+0xc4a8>
   1da8c:	mov	r0, #1
   1da90:	b	1dab8 <__assert_fail@plt+0xc4b4>
   1da94:	mov	r2, #-2147483648	; 0x80000000
   1da98:	sdiv	r1, r2, r3
   1da9c:	cmp	r1, r6
   1daa0:	bge	1daac <__assert_fail@plt+0xc4a8>
   1daa4:	mov	r0, #1
   1daa8:	b	1dacc <__assert_fail@plt+0xc4c8>
   1daac:	mul	r2, r3, r6
   1dab0:	cmp	r2, #0
   1dab4:	bmi	1dacc <__assert_fail@plt+0xc4c8>
   1dab8:	mvn	r1, #-2147483648	; 0x80000000
   1dabc:	udiv	r3, r1, r6
   1dac0:	cmp	r3, r2
   1dac4:	bge	1dadc <__assert_fail@plt+0xc4d8>
   1dac8:	b	1dc74 <__assert_fail@plt+0xc670>
   1dacc:	mov	r1, #-2147483648	; 0x80000000
   1dad0:	sdiv	r3, r1, r2
   1dad4:	cmp	r3, r6
   1dad8:	blt	1dc8c <__assert_fail@plt+0xc688>
   1dadc:	mul	r1, r2, r6
   1dae0:	cmp	r1, #0
   1dae4:	bpl	1dca0 <__assert_fail@plt+0xc69c>
   1dae8:	b	1dcec <__assert_fail@plt+0xc6e8>
   1daec:	mov	r1, #-2147483648	; 0x80000000
   1daf0:	mov	r2, #1
   1daf4:	sdiv	r7, r1, r0
   1daf8:	cmp	r7, r6
   1dafc:	blt	1db28 <__assert_fail@plt+0xc524>
   1db00:	mul	r1, r0, r6
   1db04:	mov	r2, r3
   1db08:	cmp	r1, #0
   1db0c:	bmi	1db28 <__assert_fail@plt+0xc524>
   1db10:	mvn	r3, #-2147483648	; 0x80000000
   1db14:	mov	r0, #1
   1db18:	udiv	r7, r3, r6
   1db1c:	cmp	r7, r1
   1db20:	bge	1db3c <__assert_fail@plt+0xc538>
   1db24:	b	1dc64 <__assert_fail@plt+0xc660>
   1db28:	mov	r3, #-2147483648	; 0x80000000
   1db2c:	mov	r0, #1
   1db30:	sdiv	r7, r3, r1
   1db34:	cmp	r7, r6
   1db38:	blt	1dc7c <__assert_fail@plt+0xc678>
   1db3c:	mul	r3, r1, r6
   1db40:	mov	r0, r2
   1db44:	cmp	r3, #0
   1db48:	bpl	1dc64 <__assert_fail@plt+0xc660>
   1db4c:	b	1dc7c <__assert_fail@plt+0xc678>
   1db50:	mov	r1, #-2147483648	; 0x80000000
   1db54:	mov	r2, #1
   1db58:	sdiv	r7, r1, r0
   1db5c:	cmp	r7, r6
   1db60:	blt	1db8c <__assert_fail@plt+0xc588>
   1db64:	mul	r1, r0, r6
   1db68:	mov	r2, r3
   1db6c:	cmp	r1, #0
   1db70:	bmi	1db8c <__assert_fail@plt+0xc588>
   1db74:	mvn	r3, #-2147483648	; 0x80000000
   1db78:	mov	r0, #1
   1db7c:	udiv	r7, r3, r6
   1db80:	cmp	r7, r1
   1db84:	bge	1dba0 <__assert_fail@plt+0xc59c>
   1db88:	b	1dbb0 <__assert_fail@plt+0xc5ac>
   1db8c:	mov	r3, #-2147483648	; 0x80000000
   1db90:	mov	r0, #1
   1db94:	sdiv	r7, r3, r1
   1db98:	cmp	r7, r6
   1db9c:	blt	1dbc8 <__assert_fail@plt+0xc5c4>
   1dba0:	mul	r3, r1, r6
   1dba4:	mov	r0, r2
   1dba8:	cmp	r3, #0
   1dbac:	bmi	1dbc8 <__assert_fail@plt+0xc5c4>
   1dbb0:	mvn	r1, #-2147483648	; 0x80000000
   1dbb4:	udiv	r2, r1, r6
   1dbb8:	cmp	r2, r3
   1dbbc:	bge	1dbe0 <__assert_fail@plt+0xc5dc>
   1dbc0:	mov	r0, #1
   1dbc4:	b	1dbec <__assert_fail@plt+0xc5e8>
   1dbc8:	mov	r1, #-2147483648	; 0x80000000
   1dbcc:	sdiv	r2, r1, r3
   1dbd0:	cmp	r2, r6
   1dbd4:	bge	1dbe0 <__assert_fail@plt+0xc5dc>
   1dbd8:	mov	r0, #1
   1dbdc:	b	1dc04 <__assert_fail@plt+0xc600>
   1dbe0:	mul	r1, r3, r6
   1dbe4:	cmp	r1, #0
   1dbe8:	bmi	1dc04 <__assert_fail@plt+0xc600>
   1dbec:	mvn	r2, #-2147483648	; 0x80000000
   1dbf0:	udiv	r3, r2, r6
   1dbf4:	cmp	r3, r1
   1dbf8:	bge	1dc1c <__assert_fail@plt+0xc618>
   1dbfc:	mov	r0, #1
   1dc00:	b	1dc28 <__assert_fail@plt+0xc624>
   1dc04:	mov	r2, #-2147483648	; 0x80000000
   1dc08:	sdiv	r3, r2, r1
   1dc0c:	cmp	r3, r6
   1dc10:	bge	1dc1c <__assert_fail@plt+0xc618>
   1dc14:	mov	r0, #1
   1dc18:	b	1dc40 <__assert_fail@plt+0xc63c>
   1dc1c:	mul	r2, r1, r6
   1dc20:	cmp	r2, #0
   1dc24:	bmi	1dc40 <__assert_fail@plt+0xc63c>
   1dc28:	mvn	r3, #-2147483648	; 0x80000000
   1dc2c:	udiv	r1, r3, r6
   1dc30:	cmp	r1, r2
   1dc34:	bge	1dc58 <__assert_fail@plt+0xc654>
   1dc38:	mov	r0, #1
   1dc3c:	b	1dc64 <__assert_fail@plt+0xc660>
   1dc40:	mov	r3, #-2147483648	; 0x80000000
   1dc44:	sdiv	r1, r3, r2
   1dc48:	cmp	r1, r6
   1dc4c:	bge	1dc58 <__assert_fail@plt+0xc654>
   1dc50:	mov	r0, #1
   1dc54:	b	1dc7c <__assert_fail@plt+0xc678>
   1dc58:	mul	r3, r2, r6
   1dc5c:	cmp	r3, #0
   1dc60:	bmi	1dc7c <__assert_fail@plt+0xc678>
   1dc64:	mvn	r1, #-2147483648	; 0x80000000
   1dc68:	udiv	r2, r1, r6
   1dc6c:	cmp	r2, r3
   1dc70:	bge	1dc94 <__assert_fail@plt+0xc690>
   1dc74:	mov	r0, #1
   1dc78:	b	1dca0 <__assert_fail@plt+0xc69c>
   1dc7c:	mov	r1, #-2147483648	; 0x80000000
   1dc80:	sdiv	r2, r1, r3
   1dc84:	cmp	r2, r6
   1dc88:	bge	1dc94 <__assert_fail@plt+0xc690>
   1dc8c:	mov	r0, #1
   1dc90:	b	1dcec <__assert_fail@plt+0xc6e8>
   1dc94:	mul	r1, r3, r6
   1dc98:	cmp	r1, #0
   1dc9c:	bmi	1dcec <__assert_fail@plt+0xc6e8>
   1dca0:	mvn	r7, #-2147483648	; 0x80000000
   1dca4:	mov	r2, #1
   1dca8:	udiv	r3, r7, r6
   1dcac:	cmp	r3, r1
   1dcb0:	blt	1dcbc <__assert_fail@plt+0xc6b8>
   1dcb4:	mul	r7, r1, r6
   1dcb8:	mov	r2, #0
   1dcbc:	orr	r0, r2, r0
   1dcc0:	add	r1, r4, ip
   1dcc4:	orr	r9, r0, r9
   1dcc8:	str	r1, [sl]
   1dccc:	ldrb	r1, [r4, ip]
   1dcd0:	cmp	r1, #0
   1dcd4:	orrne	r9, r9, #2
   1dcd8:	ldr	r0, [sp, #4]
   1dcdc:	str	r7, [r0]
   1dce0:	mov	r0, r9
   1dce4:	sub	sp, fp, #28
   1dce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcec:	mov	r7, #-2147483648	; 0x80000000
   1dcf0:	mov	r2, #1
   1dcf4:	sdiv	r3, r7, r1
   1dcf8:	cmp	r3, r6
   1dcfc:	bge	1dcb4 <__assert_fail@plt+0xc6b0>
   1dd00:	b	1dcbc <__assert_fail@plt+0xc6b8>
   1dd04:	movw	r0, #3301	; 0xce5
   1dd08:	movw	r1, #3341	; 0xd0d
   1dd0c:	movw	r3, #3433	; 0xd69
   1dd10:	mov	r2, #85	; 0x55
   1dd14:	movt	r0, #2
   1dd18:	movt	r1, #2
   1dd1c:	movt	r3, #2
   1dd20:	bl	11604 <__assert_fail@plt>
   1dd24:	push	{fp, lr}
   1dd28:	mov	fp, sp
   1dd2c:	sub	sp, sp, #8
   1dd30:	movw	ip, #4468	; 0x1174
   1dd34:	movt	ip, #3
   1dd38:	ldr	ip, [ip]
   1dd3c:	str	ip, [sp, #4]
   1dd40:	ldr	ip, [fp, #8]
   1dd44:	str	ip, [sp]
   1dd48:	bl	1dd50 <__assert_fail@plt+0xc74c>
   1dd4c:	bl	115ec <abort@plt>
   1dd50:	push	{r4, r5, r6, r7, fp, lr}
   1dd54:	add	fp, sp, #16
   1dd58:	sub	sp, sp, #16
   1dd5c:	sub	r0, r0, #1
   1dd60:	cmp	r0, #4
   1dd64:	bcs	1dde4 <__assert_fail@plt+0xc7e0>
   1dd68:	mov	r5, r1
   1dd6c:	movw	r1, #3600	; 0xe10
   1dd70:	ldr	r4, [fp, #12]
   1dd74:	ldr	r6, [fp, #8]
   1dd78:	movt	r1, #2
   1dd7c:	cmn	r5, #1
   1dd80:	ldr	r1, [r1, r0, lsl #2]
   1dd84:	ble	1dd98 <__assert_fail@plt+0xc794>
   1dd88:	ldr	r7, [r3, r5, lsl #4]
   1dd8c:	movw	r5, #3504	; 0xdb0
   1dd90:	movt	r5, #2
   1dd94:	b	1ddb4 <__assert_fail@plt+0xc7b0>
   1dd98:	mov	r0, #0
   1dd9c:	add	r7, sp, #14
   1dda0:	strb	r0, [sp, #15]
   1dda4:	movw	r0, #3504	; 0xdb0
   1dda8:	strb	r2, [sp, #14]
   1ddac:	movt	r0, #2
   1ddb0:	sub	r5, r0, r5
   1ddb4:	mov	r0, #0
   1ddb8:	mov	r2, #5
   1ddbc:	bl	1137c <dcgettext@plt>
   1ddc0:	mov	r2, r0
   1ddc4:	mov	r0, r4
   1ddc8:	mov	r1, #0
   1ddcc:	mov	r3, r5
   1ddd0:	str	r7, [sp]
   1ddd4:	str	r6, [sp, #4]
   1ddd8:	bl	11418 <error@plt>
   1dddc:	sub	sp, fp, #16
   1dde0:	pop	{r4, r5, r6, r7, fp, pc}
   1dde4:	bl	115ec <abort@plt>
   1dde8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ddec:	add	fp, sp, #28
   1ddf0:	sub	sp, sp, #44	; 0x2c
   1ddf4:	cmp	r2, #37	; 0x25
   1ddf8:	bcs	1ea68 <__assert_fail@plt+0xd464>
   1ddfc:	ldr	sl, [fp, #8]
   1de00:	mov	r6, r2
   1de04:	mov	r7, r1
   1de08:	mov	r4, r0
   1de0c:	str	r3, [sp, #36]	; 0x24
   1de10:	bl	114e4 <__errno_location@plt>
   1de14:	mov	r5, r0
   1de18:	mov	r0, #0
   1de1c:	str	r0, [r5]
   1de20:	bl	11490 <__ctype_b_loc@plt>
   1de24:	ldr	r1, [r0]
   1de28:	mov	r2, r4
   1de2c:	ldrb	r0, [r2], #1
   1de30:	add	r3, r1, r0, lsl #1
   1de34:	ldrb	r3, [r3, #1]
   1de38:	tst	r3, #32
   1de3c:	bne	1de2c <__assert_fail@plt+0xc828>
   1de40:	cmp	r7, #0
   1de44:	sub	r9, fp, #32
   1de48:	mov	r8, #4
   1de4c:	movne	r9, r7
   1de50:	cmp	r0, #45	; 0x2d
   1de54:	beq	1ea5c <__assert_fail@plt+0xd458>
   1de58:	mov	r0, r4
   1de5c:	mov	r1, r9
   1de60:	mov	r2, r6
   1de64:	mov	r3, #0
   1de68:	bl	11364 <__strtoull_internal@plt>
   1de6c:	mov	r7, r1
   1de70:	ldr	r1, [r9]
   1de74:	cmp	r1, r4
   1de78:	beq	1dea4 <__assert_fail@plt+0xc8a0>
   1de7c:	mov	r6, r0
   1de80:	ldr	r0, [r5]
   1de84:	cmp	r0, #0
   1de88:	beq	1dee0 <__assert_fail@plt+0xc8dc>
   1de8c:	cmp	r0, #34	; 0x22
   1de90:	bne	1ea5c <__assert_fail@plt+0xd458>
   1de94:	mov	r8, #1
   1de98:	cmp	sl, #0
   1de9c:	bne	1deec <__assert_fail@plt+0xc8e8>
   1dea0:	b	1ea54 <__assert_fail@plt+0xd450>
   1dea4:	cmp	sl, #0
   1dea8:	beq	1ea5c <__assert_fail@plt+0xd458>
   1deac:	mov	r5, r1
   1deb0:	ldrb	r1, [r4]
   1deb4:	cmp	r1, #0
   1deb8:	beq	1ea5c <__assert_fail@plt+0xd458>
   1debc:	mov	r0, sl
   1dec0:	bl	114c0 <strchr@plt>
   1dec4:	cmp	r0, #0
   1dec8:	beq	1ea5c <__assert_fail@plt+0xd458>
   1decc:	mov	r1, r5
   1ded0:	mov	r8, #0
   1ded4:	mov	r6, #1
   1ded8:	mov	r7, #0
   1dedc:	b	1deec <__assert_fail@plt+0xc8e8>
   1dee0:	mov	r8, r0
   1dee4:	cmp	sl, #0
   1dee8:	beq	1ea54 <__assert_fail@plt+0xd450>
   1deec:	ldrb	r4, [r1]
   1def0:	cmp	r4, #0
   1def4:	beq	1ea54 <__assert_fail@plt+0xd450>
   1def8:	str	r1, [sp, #32]
   1defc:	mov	r0, sl
   1df00:	mov	r1, r4
   1df04:	bl	114c0 <strchr@plt>
   1df08:	cmp	r0, #0
   1df0c:	beq	1e1d4 <__assert_fail@plt+0xcbd0>
   1df10:	sub	r0, r4, #69	; 0x45
   1df14:	mov	r1, #1
   1df18:	mov	r3, #0
   1df1c:	mov	r5, #1024	; 0x400
   1df20:	cmp	r0, #47	; 0x2f
   1df24:	str	r1, [sp, #28]
   1df28:	bhi	1e02c <__assert_fail@plt+0xca28>
   1df2c:	add	r1, pc, #0
   1df30:	ldr	pc, [r1, r0, lsl #2]
   1df34:	strdeq	sp, [r1], -r4
   1df38:	andeq	lr, r1, ip, lsr #32
   1df3c:	strdeq	sp, [r1], -r4
   1df40:	andeq	lr, r1, ip, lsr #32
   1df44:	andeq	lr, r1, ip, lsr #32
   1df48:	andeq	lr, r1, ip, lsr #32
   1df4c:	strdeq	sp, [r1], -r4
   1df50:	andeq	lr, r1, ip, lsr #32
   1df54:	strdeq	sp, [r1], -r4
   1df58:	andeq	lr, r1, ip, lsr #32
   1df5c:	andeq	lr, r1, ip, lsr #32
   1df60:	strdeq	sp, [r1], -r4
   1df64:	andeq	lr, r1, ip, lsr #32
   1df68:	andeq	lr, r1, ip, lsr #32
   1df6c:	andeq	lr, r1, ip, lsr #32
   1df70:	strdeq	sp, [r1], -r4
   1df74:	andeq	lr, r1, ip, lsr #32
   1df78:	andeq	lr, r1, ip, lsr #32
   1df7c:	andeq	lr, r1, ip, lsr #32
   1df80:	andeq	lr, r1, ip, lsr #32
   1df84:	strdeq	sp, [r1], -r4
   1df88:	strdeq	sp, [r1], -r4
   1df8c:	andeq	lr, r1, ip, lsr #32
   1df90:	andeq	lr, r1, ip, lsr #32
   1df94:	andeq	lr, r1, ip, lsr #32
   1df98:	andeq	lr, r1, ip, lsr #32
   1df9c:	andeq	lr, r1, ip, lsr #32
   1dfa0:	andeq	lr, r1, ip, lsr #32
   1dfa4:	andeq	lr, r1, ip, lsr #32
   1dfa8:	andeq	lr, r1, ip, lsr #32
   1dfac:	andeq	lr, r1, ip, lsr #32
   1dfb0:	andeq	lr, r1, ip, lsr #32
   1dfb4:	andeq	lr, r1, ip, lsr #32
   1dfb8:	andeq	lr, r1, ip, lsr #32
   1dfbc:	strdeq	sp, [r1], -r4
   1dfc0:	andeq	lr, r1, ip, lsr #32
   1dfc4:	andeq	lr, r1, ip, lsr #32
   1dfc8:	andeq	lr, r1, ip, lsr #32
   1dfcc:	strdeq	sp, [r1], -r4
   1dfd0:	andeq	lr, r1, ip, lsr #32
   1dfd4:	strdeq	sp, [r1], -r4
   1dfd8:	andeq	lr, r1, ip, lsr #32
   1dfdc:	andeq	lr, r1, ip, lsr #32
   1dfe0:	andeq	lr, r1, ip, lsr #32
   1dfe4:	andeq	lr, r1, ip, lsr #32
   1dfe8:	andeq	lr, r1, ip, lsr #32
   1dfec:	andeq	lr, r1, ip, lsr #32
   1dff0:	strdeq	sp, [r1], -r4
   1dff4:	mov	r0, sl
   1dff8:	mov	r1, #48	; 0x30
   1dffc:	bl	114c0 <strchr@plt>
   1e000:	cmp	r0, #0
   1e004:	beq	1e028 <__assert_fail@plt+0xca24>
   1e008:	ldr	r1, [sp, #32]
   1e00c:	ldrb	r0, [r1, #1]
   1e010:	cmp	r0, #66	; 0x42
   1e014:	cmpne	r0, #68	; 0x44
   1e018:	bne	1e1e0 <__assert_fail@plt+0xcbdc>
   1e01c:	mov	r5, #1000	; 0x3e8
   1e020:	mov	r0, #2
   1e024:	str	r0, [sp, #28]
   1e028:	mov	r3, #0
   1e02c:	sub	r0, r4, #66	; 0x42
   1e030:	cmp	r0, #53	; 0x35
   1e034:	bhi	1e1d4 <__assert_fail@plt+0xcbd0>
   1e038:	add	r1, pc, #0
   1e03c:	ldr	pc, [r1, r0, lsl #2]
   1e040:	andeq	lr, r1, ip, asr r5
   1e044:	ldrdeq	lr, [r1], -r4
   1e048:	ldrdeq	lr, [r1], -r4
   1e04c:	andeq	lr, r1, r4, lsl #11
   1e050:	ldrdeq	lr, [r1], -r4
   1e054:	andeq	lr, r1, r8, lsl r1
   1e058:	ldrdeq	lr, [r1], -r4
   1e05c:	ldrdeq	lr, [r1], -r4
   1e060:	ldrdeq	lr, [r1], -r4
   1e064:	andeq	lr, r1, r4, lsl #4
   1e068:	ldrdeq	lr, [r1], -r4
   1e06c:	andeq	lr, r1, ip, asr #4
   1e070:	ldrdeq	lr, [r1], -r4
   1e074:	ldrdeq	lr, [r1], -r4
   1e078:	ldrdeq	lr, [r1], -ip
   1e07c:	ldrdeq	lr, [r1], -r4
   1e080:	ldrdeq	lr, [r1], -r4
   1e084:	ldrdeq	lr, [r1], -r4
   1e088:	ldrdeq	lr, [r1], -r8
   1e08c:	ldrdeq	lr, [r1], -r4
   1e090:	ldrdeq	lr, [r1], -r4
   1e094:	ldrdeq	lr, [r1], -r4
   1e098:	ldrdeq	lr, [r1], -r4
   1e09c:	andeq	lr, r1, r4, lsl #16
   1e0a0:	andeq	lr, r1, r0, asr #7
   1e0a4:	ldrdeq	lr, [r1], -r4
   1e0a8:	ldrdeq	lr, [r1], -r4
   1e0ac:	ldrdeq	lr, [r1], -r4
   1e0b0:	ldrdeq	lr, [r1], -r4
   1e0b4:	ldrdeq	lr, [r1], -r4
   1e0b8:	ldrdeq	lr, [r1], -r4
   1e0bc:	ldrdeq	lr, [r1], -r4
   1e0c0:	ldrdeq	lr, [r1], -ip
   1e0c4:	andeq	lr, r1, r4, lsr sl
   1e0c8:	ldrdeq	lr, [r1], -r4
   1e0cc:	ldrdeq	lr, [r1], -r4
   1e0d0:	ldrdeq	lr, [r1], -r4
   1e0d4:	andeq	lr, r1, r8, lsl r1
   1e0d8:	ldrdeq	lr, [r1], -r4
   1e0dc:	ldrdeq	lr, [r1], -r4
   1e0e0:	ldrdeq	lr, [r1], -r4
   1e0e4:	andeq	lr, r1, r4, lsl #4
   1e0e8:	ldrdeq	lr, [r1], -r4
   1e0ec:	andeq	lr, r1, ip, asr #4
   1e0f0:	ldrdeq	lr, [r1], -r4
   1e0f4:	ldrdeq	lr, [r1], -r4
   1e0f8:	ldrdeq	lr, [r1], -r4
   1e0fc:	ldrdeq	lr, [r1], -r4
   1e100:	ldrdeq	lr, [r1], -r4
   1e104:	ldrdeq	lr, [r1], -r4
   1e108:	ldrdeq	lr, [r1], -r8
   1e10c:	ldrdeq	lr, [r1], -r4
   1e110:	ldrdeq	lr, [r1], -r4
   1e114:	andeq	lr, r1, r0, lsl sl
   1e118:	mvn	r0, #0
   1e11c:	mvn	r1, #0
   1e120:	mov	r2, r5
   1e124:	mov	sl, r3
   1e128:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1e12c:	subs	r3, r0, r6
   1e130:	umull	r4, r2, r6, r5
   1e134:	mov	lr, #0
   1e138:	str	r1, [sp, #20]
   1e13c:	sbcs	r3, r1, r7
   1e140:	movwcc	lr, #1
   1e144:	mla	ip, r6, sl, r2
   1e148:	mov	r2, r1
   1e14c:	mov	r2, #0
   1e150:	cmp	lr, #0
   1e154:	mla	r7, r7, r5, ip
   1e158:	mvnne	r4, #0
   1e15c:	mvnne	r7, #0
   1e160:	subs	r6, r0, r4
   1e164:	sbcs	r6, r1, r7
   1e168:	umull	r3, r6, r4, r5
   1e16c:	movwcc	r2, #1
   1e170:	cmp	r2, #0
   1e174:	mvnne	r3, #0
   1e178:	cmp	r2, #0
   1e17c:	str	r6, [sp, #16]
   1e180:	umull	r6, ip, r3, r5
   1e184:	mla	r1, r3, sl, ip
   1e188:	ldr	ip, [sp, #16]
   1e18c:	str	r1, [sp, #12]
   1e190:	mla	r4, r4, sl, ip
   1e194:	mla	r4, r7, r5, r4
   1e198:	mvnne	r4, #0
   1e19c:	subs	r0, r0, r3
   1e1a0:	ldr	r0, [sp, #20]
   1e1a4:	ldr	r7, [sp, #12]
   1e1a8:	sbcs	r0, r0, r4
   1e1ac:	mov	r0, #0
   1e1b0:	mla	r7, r4, r5, r7
   1e1b4:	movwcc	r0, #1
   1e1b8:	cmp	r0, #0
   1e1bc:	mov	r1, r0
   1e1c0:	orr	r0, lr, r2
   1e1c4:	mvnne	r7, #0
   1e1c8:	mvnne	r6, #0
   1e1cc:	orr	r3, r0, r1
   1e1d0:	b	1ea34 <__assert_fail@plt+0xd430>
   1e1d4:	ldr	r0, [sp, #36]	; 0x24
   1e1d8:	orr	r8, r8, #2
   1e1dc:	b	1ea58 <__assert_fail@plt+0xd454>
   1e1e0:	cmp	r0, #105	; 0x69
   1e1e4:	mov	r3, #0
   1e1e8:	bne	1e02c <__assert_fail@plt+0xca28>
   1e1ec:	ldrb	r0, [r1, #2]
   1e1f0:	mov	r1, #1
   1e1f4:	cmp	r0, #66	; 0x42
   1e1f8:	movweq	r1, #3
   1e1fc:	str	r1, [sp, #28]
   1e200:	b	1e02c <__assert_fail@plt+0xca28>
   1e204:	mvn	r0, #0
   1e208:	mvn	r1, #0
   1e20c:	mov	r2, r5
   1e210:	mov	r4, r3
   1e214:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1e218:	subs	r0, r0, r6
   1e21c:	mov	r2, #0
   1e220:	sbcs	r0, r1, r7
   1e224:	umull	r0, r1, r6, r5
   1e228:	movwcc	r2, #1
   1e22c:	cmp	r2, #0
   1e230:	mla	r1, r6, r4, r1
   1e234:	mov	r3, r2
   1e238:	mvnne	r0, #0
   1e23c:	mla	r7, r7, r5, r1
   1e240:	mvnne	r7, #0
   1e244:	mov	r6, r0
   1e248:	b	1ea34 <__assert_fail@plt+0xd430>
   1e24c:	mvn	r0, #0
   1e250:	mvn	r1, #0
   1e254:	mov	r2, r5
   1e258:	str	r3, [sp, #24]
   1e25c:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1e260:	subs	r3, r0, r6
   1e264:	mov	ip, r0
   1e268:	umull	r4, r0, r6, r5
   1e26c:	mov	sl, #0
   1e270:	sbcs	r3, r1, r7
   1e274:	mov	r3, #0
   1e278:	movwcc	r3, #1
   1e27c:	cmp	r3, #0
   1e280:	str	r0, [sp, #20]
   1e284:	ldr	r0, [sp, #24]
   1e288:	mvnne	r4, #0
   1e28c:	cmp	r3, #0
   1e290:	umull	lr, r2, r4, r5
   1e294:	mla	r2, r4, r0, r2
   1e298:	str	r2, [sp, #16]
   1e29c:	ldr	r2, [sp, #20]
   1e2a0:	mla	r6, r6, r0, r2
   1e2a4:	ldr	r0, [sp, #16]
   1e2a8:	mla	r6, r7, r5, r6
   1e2ac:	mvnne	r6, #0
   1e2b0:	mla	r7, r6, r5, r0
   1e2b4:	subs	r0, ip, r4
   1e2b8:	sbcs	r0, r1, r6
   1e2bc:	movwcc	sl, #1
   1e2c0:	cmp	sl, #0
   1e2c4:	orr	r3, r3, sl
   1e2c8:	mvnne	lr, #0
   1e2cc:	mvnne	r7, #0
   1e2d0:	mov	r6, lr
   1e2d4:	b	1ea34 <__assert_fail@plt+0xd430>
   1e2d8:	mvn	r0, #0
   1e2dc:	mvn	r1, #0
   1e2e0:	mov	r2, r5
   1e2e4:	mov	sl, r3
   1e2e8:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1e2ec:	subs	r3, r0, r6
   1e2f0:	mov	ip, r1
   1e2f4:	umull	r2, lr, r6, r5
   1e2f8:	str	r0, [sp, #20]
   1e2fc:	sbcs	r3, r1, r7
   1e300:	mov	r1, #0
   1e304:	str	ip, [sp, #16]
   1e308:	movwcc	r1, #1
   1e30c:	mla	r6, r6, sl, lr
   1e310:	mov	lr, #0
   1e314:	cmp	r1, #0
   1e318:	mla	r7, r7, r5, r6
   1e31c:	mvnne	r2, #0
   1e320:	cmp	r1, #0
   1e324:	umull	r3, r4, r2, r5
   1e328:	mvnne	r7, #0
   1e32c:	mla	r4, r2, sl, r4
   1e330:	subs	r2, r0, r2
   1e334:	sbcs	r2, ip, r7
   1e338:	mla	r4, r7, r5, r4
   1e33c:	mov	r2, #0
   1e340:	movwcc	lr, #1
   1e344:	cmp	lr, #0
   1e348:	mvnne	r3, #0
   1e34c:	mvnne	r4, #0
   1e350:	subs	r7, r0, r3
   1e354:	mov	r0, r5
   1e358:	sbcs	r7, ip, r4
   1e35c:	umull	r5, r7, r3, r5
   1e360:	movwcc	r2, #1
   1e364:	cmp	r2, #0
   1e368:	mla	r3, r3, sl, r7
   1e36c:	mvnne	r5, #0
   1e370:	cmp	r2, #0
   1e374:	mla	r3, r4, r0, r3
   1e378:	umull	r6, ip, r5, r0
   1e37c:	mvnne	r3, #0
   1e380:	mla	ip, r5, sl, ip
   1e384:	mla	r7, r3, r0, ip
   1e388:	ldr	r0, [sp, #20]
   1e38c:	subs	r0, r0, r5
   1e390:	ldr	r0, [sp, #16]
   1e394:	sbcs	r0, r0, r3
   1e398:	mov	r0, #0
   1e39c:	movwcc	r0, #1
   1e3a0:	cmp	r0, #0
   1e3a4:	mov	r3, r0
   1e3a8:	orr	r0, r1, lr
   1e3ac:	orr	r0, r0, r2
   1e3b0:	mvnne	r7, #0
   1e3b4:	mvnne	r6, #0
   1e3b8:	orr	r3, r0, r3
   1e3bc:	b	1ea34 <__assert_fail@plt+0xd430>
   1e3c0:	mvn	r0, #0
   1e3c4:	mvn	r1, #0
   1e3c8:	mov	r2, r5
   1e3cc:	mov	r4, r3
   1e3d0:	str	r3, [sp, #24]
   1e3d4:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1e3d8:	umull	r3, r2, r6, r5
   1e3dc:	mla	r2, r6, r4, r2
   1e3e0:	subs	r6, r0, r6
   1e3e4:	sbcs	r6, r1, r7
   1e3e8:	mov	r6, #0
   1e3ec:	mla	ip, r7, r5, r2
   1e3f0:	ldr	r2, [sp, #24]
   1e3f4:	movwcc	r6, #1
   1e3f8:	cmp	r6, #0
   1e3fc:	str	r6, [sp, #20]
   1e400:	mov	r6, #0
   1e404:	mvnne	r3, #0
   1e408:	mvnne	ip, #0
   1e40c:	subs	r4, r0, r3
   1e410:	umull	r7, lr, r3, r5
   1e414:	sbcs	r4, r1, ip
   1e418:	movwcc	r6, #1
   1e41c:	mla	r3, r3, r2, lr
   1e420:	cmp	r6, #0
   1e424:	str	r6, [sp, #16]
   1e428:	mvnne	r7, #0
   1e42c:	cmp	r6, #0
   1e430:	umull	sl, r4, r7, r5
   1e434:	mla	r4, r7, r2, r4
   1e438:	mla	r2, ip, r5, r3
   1e43c:	mvnne	r2, #0
   1e440:	subs	r3, r0, r7
   1e444:	mov	ip, #0
   1e448:	mla	r6, r2, r5, r4
   1e44c:	sbcs	r2, r1, r2
   1e450:	mov	r4, r0
   1e454:	mov	r0, #0
   1e458:	movwcc	r0, #1
   1e45c:	mov	r3, r4
   1e460:	cmp	r0, #0
   1e464:	str	r0, [sp, #12]
   1e468:	mov	r0, r1
   1e46c:	str	r3, [sp, #4]
   1e470:	mvnne	sl, #0
   1e474:	mvnne	r6, #0
   1e478:	str	r0, [sp, #8]
   1e47c:	subs	r2, r4, sl
   1e480:	ldr	r4, [sp, #24]
   1e484:	sbcs	r2, r1, r6
   1e488:	umull	r7, r2, sl, r5
   1e48c:	movwcc	ip, #1
   1e490:	cmp	ip, #0
   1e494:	mvnne	r7, #0
   1e498:	mla	r2, sl, r4, r2
   1e49c:	cmp	ip, #0
   1e4a0:	mov	sl, #0
   1e4a4:	umull	r1, lr, r7, r5
   1e4a8:	mla	r2, r6, r5, r2
   1e4ac:	mvnne	r2, #0
   1e4b0:	subs	r6, r3, r7
   1e4b4:	mla	lr, r7, r4, lr
   1e4b8:	mla	lr, r2, r5, lr
   1e4bc:	sbcs	r2, r0, r2
   1e4c0:	mov	r2, #0
   1e4c4:	movwcc	sl, #1
   1e4c8:	cmp	sl, #0
   1e4cc:	mvnne	r1, #0
   1e4d0:	mvnne	lr, #0
   1e4d4:	subs	r6, r3, r1
   1e4d8:	ldr	r3, [sp, #24]
   1e4dc:	sbcs	r6, r0, lr
   1e4e0:	umull	r0, r7, r1, r5
   1e4e4:	movwcc	r2, #1
   1e4e8:	cmp	r2, #0
   1e4ec:	mvnne	r0, #0
   1e4f0:	mla	r1, r1, r3, r7
   1e4f4:	cmp	r2, #0
   1e4f8:	umull	r6, r4, r0, r5
   1e4fc:	mla	r1, lr, r5, r1
   1e500:	mvnne	r1, #0
   1e504:	mla	r4, r0, r3, r4
   1e508:	ldr	r3, [sp, #4]
   1e50c:	mla	r7, r1, r5, r4
   1e510:	ldr	r5, [sp, #16]
   1e514:	subs	r0, r3, r0
   1e518:	ldr	r0, [sp, #8]
   1e51c:	sbcs	r0, r0, r1
   1e520:	mov	r0, #0
   1e524:	movwcc	r0, #1
   1e528:	cmp	r0, #0
   1e52c:	mov	r1, r0
   1e530:	ldr	r0, [sp, #20]
   1e534:	mvnne	r7, #0
   1e538:	mvnne	r6, #0
   1e53c:	orr	r0, r0, r5
   1e540:	ldr	r5, [sp, #12]
   1e544:	orr	r0, r0, r5
   1e548:	orr	r0, r0, ip
   1e54c:	orr	r0, r0, sl
   1e550:	orr	r0, r0, r2
   1e554:	orr	r0, r0, r1
   1e558:	b	1e9d4 <__assert_fail@plt+0xd3d0>
   1e55c:	mov	r1, #0
   1e560:	lsl	r2, r7, #10
   1e564:	lsl	r0, r6, #10
   1e568:	lsr	r3, r7, #22
   1e56c:	cmp	r1, r7, lsr #22
   1e570:	orr	r2, r2, r6, lsr #22
   1e574:	mvnne	r0, #0
   1e578:	movwne	r3, #1
   1e57c:	cmp	r1, r7, lsr #22
   1e580:	b	1ea00 <__assert_fail@plt+0xd3fc>
   1e584:	mvn	r0, #0
   1e588:	mvn	r1, #0
   1e58c:	mov	r2, r5
   1e590:	mov	sl, r3
   1e594:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1e598:	subs	r2, r0, r6
   1e59c:	mov	ip, r0
   1e5a0:	mov	r0, #0
   1e5a4:	sbcs	r2, r1, r7
   1e5a8:	umull	r4, r2, r6, r5
   1e5ac:	movwcc	r0, #1
   1e5b0:	cmp	r0, #0
   1e5b4:	mla	r2, r6, sl, r2
   1e5b8:	str	r0, [sp, #20]
   1e5bc:	mvnne	r4, #0
   1e5c0:	cmp	r0, #0
   1e5c4:	mla	r2, r7, r5, r2
   1e5c8:	mov	r0, #0
   1e5cc:	umull	lr, r3, r4, r5
   1e5d0:	mvnne	r2, #0
   1e5d4:	mla	r3, r4, sl, r3
   1e5d8:	mla	r6, r2, r5, r3
   1e5dc:	subs	r3, ip, r4
   1e5e0:	mov	r3, r1
   1e5e4:	sbcs	r2, r1, r2
   1e5e8:	str	r3, [sp, #8]
   1e5ec:	movwcc	r0, #1
   1e5f0:	cmp	r0, #0
   1e5f4:	str	r0, [sp, #16]
   1e5f8:	mov	r0, ip
   1e5fc:	mvnne	lr, #0
   1e600:	mvnne	r6, #0
   1e604:	str	r0, [sp, #12]
   1e608:	subs	r2, ip, lr
   1e60c:	umull	r7, r4, lr, r5
   1e610:	sbcs	r2, r1, r6
   1e614:	mov	r2, #0
   1e618:	movwcc	r2, #1
   1e61c:	mla	r4, lr, sl, r4
   1e620:	cmp	r2, #0
   1e624:	mla	r6, r6, r5, r4
   1e628:	mov	r4, #0
   1e62c:	mvnne	r7, #0
   1e630:	cmp	r2, #0
   1e634:	umull	r1, ip, r7, r5
   1e638:	mvnne	r6, #0
   1e63c:	mla	ip, r7, sl, ip
   1e640:	subs	r7, r0, r7
   1e644:	sbcs	r7, r3, r6
   1e648:	mla	lr, r6, r5, ip
   1e64c:	mov	ip, #0
   1e650:	movwcc	ip, #1
   1e654:	cmp	ip, #0
   1e658:	mvnne	r1, #0
   1e65c:	mvnne	lr, #0
   1e660:	subs	r7, r0, r1
   1e664:	sbcs	r7, r3, lr
   1e668:	umull	r0, r7, r1, r5
   1e66c:	movwcc	r4, #1
   1e670:	cmp	r4, #0
   1e674:	mla	r1, r1, sl, r7
   1e678:	mvnne	r0, #0
   1e67c:	cmp	r4, #0
   1e680:	mla	r1, lr, r5, r1
   1e684:	umull	r6, r3, r0, r5
   1e688:	mvnne	r1, #0
   1e68c:	mla	r3, r0, sl, r3
   1e690:	mla	r7, r1, r5, r3
   1e694:	ldr	r3, [sp, #12]
   1e698:	subs	r0, r3, r0
   1e69c:	ldr	r0, [sp, #8]
   1e6a0:	ldr	r3, [sp, #16]
   1e6a4:	sbcs	r0, r0, r1
   1e6a8:	mov	r0, #0
   1e6ac:	movwcc	r0, #1
   1e6b0:	cmp	r0, #0
   1e6b4:	mov	r1, r0
   1e6b8:	ldr	r0, [sp, #20]
   1e6bc:	mvnne	r7, #0
   1e6c0:	mvnne	r6, #0
   1e6c4:	orr	r0, r0, r3
   1e6c8:	orr	r0, r0, r2
   1e6cc:	orr	r0, r0, ip
   1e6d0:	orr	r0, r0, r4
   1e6d4:	orr	r3, r0, r1
   1e6d8:	b	1ea34 <__assert_fail@plt+0xd430>
   1e6dc:	mvn	r0, #0
   1e6e0:	mvn	r1, #0
   1e6e4:	mov	r2, r5
   1e6e8:	mov	sl, r3
   1e6ec:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1e6f0:	umull	r3, r2, r6, r5
   1e6f4:	mov	lr, r1
   1e6f8:	mov	r1, r0
   1e6fc:	mla	r2, r6, sl, r2
   1e700:	subs	r6, r0, r6
   1e704:	mov	r0, #0
   1e708:	sbcs	r6, lr, r7
   1e70c:	mla	r2, r7, r5, r2
   1e710:	movwcc	r0, #1
   1e714:	cmp	r0, #0
   1e718:	str	r0, [sp, #20]
   1e71c:	mov	r0, r1
   1e720:	mvnne	r3, #0
   1e724:	mvnne	r2, #0
   1e728:	str	r0, [sp, #16]
   1e72c:	subs	r4, r1, r3
   1e730:	umull	r7, ip, r3, r5
   1e734:	sbcs	r4, lr, r2
   1e738:	mov	r4, #0
   1e73c:	movwcc	r4, #1
   1e740:	mla	r3, r3, sl, ip
   1e744:	mov	ip, #0
   1e748:	cmp	r4, #0
   1e74c:	mla	r2, r2, r5, r3
   1e750:	mvnne	r7, #0
   1e754:	cmp	r4, #0
   1e758:	umull	r1, r6, r7, r5
   1e75c:	mvnne	r2, #0
   1e760:	mla	r6, r7, sl, r6
   1e764:	mla	r3, r2, r5, r6
   1e768:	subs	r6, r0, r7
   1e76c:	sbcs	r2, lr, r2
   1e770:	mov	r2, #0
   1e774:	movwcc	ip, #1
   1e778:	cmp	ip, #0
   1e77c:	mvnne	r1, #0
   1e780:	mvnne	r3, #0
   1e784:	subs	r6, r0, r1
   1e788:	sbcs	r6, lr, r3
   1e78c:	umull	r0, r6, r1, r5
   1e790:	movwcc	r2, #1
   1e794:	cmp	r2, #0
   1e798:	mvnne	r0, #0
   1e79c:	cmp	r2, #0
   1e7a0:	str	r6, [sp, #12]
   1e7a4:	umull	r6, r7, r0, r5
   1e7a8:	mla	r7, r0, sl, r7
   1e7ac:	str	r7, [sp, #8]
   1e7b0:	ldr	r7, [sp, #12]
   1e7b4:	mla	r1, r1, sl, r7
   1e7b8:	mla	r1, r3, r5, r1
   1e7bc:	ldr	r3, [sp, #8]
   1e7c0:	mvnne	r1, #0
   1e7c4:	mla	r7, r1, r5, r3
   1e7c8:	ldr	r3, [sp, #16]
   1e7cc:	subs	r0, r3, r0
   1e7d0:	sbcs	r0, lr, r1
   1e7d4:	mov	r0, #0
   1e7d8:	movwcc	r0, #1
   1e7dc:	cmp	r0, #0
   1e7e0:	mov	r1, r0
   1e7e4:	ldr	r0, [sp, #20]
   1e7e8:	mvnne	r7, #0
   1e7ec:	mvnne	r6, #0
   1e7f0:	orr	r0, r0, r4
   1e7f4:	orr	r0, r0, ip
   1e7f8:	orr	r0, r0, r2
   1e7fc:	orr	r3, r0, r1
   1e800:	b	1ea34 <__assert_fail@plt+0xd430>
   1e804:	mvn	r0, #0
   1e808:	mvn	r1, #0
   1e80c:	mov	r2, r5
   1e810:	mov	sl, r3
   1e814:	bl	1ef70 <__assert_fail@plt+0xd96c>
   1e818:	mov	lr, r0
   1e81c:	subs	r0, r0, r6
   1e820:	mov	r2, #0
   1e824:	mov	ip, r1
   1e828:	str	sl, [sp, #24]
   1e82c:	sbcs	r0, r1, r7
   1e830:	umull	r3, r1, r6, r5
   1e834:	str	lr, [sp, #4]
   1e838:	movwcc	r2, #1
   1e83c:	cmp	r2, #0
   1e840:	mla	r6, r6, sl, r1
   1e844:	mov	r1, #0
   1e848:	str	r2, [sp, #20]
   1e84c:	mvnne	r3, #0
   1e850:	cmp	r2, #0
   1e854:	mla	r7, r7, r5, r6
   1e858:	mov	r2, #0
   1e85c:	umull	r0, r4, r3, r5
   1e860:	mvnne	r7, #0
   1e864:	mla	r4, r3, sl, r4
   1e868:	subs	r3, lr, r3
   1e86c:	sbcs	r3, ip, r7
   1e870:	mla	r4, r7, r5, r4
   1e874:	movwcc	r1, #1
   1e878:	cmp	r1, #0
   1e87c:	str	r1, [sp, #16]
   1e880:	mvnne	r0, #0
   1e884:	mvnne	r4, #0
   1e888:	subs	r3, lr, r0
   1e88c:	sbcs	r3, ip, r4
   1e890:	umull	r6, r3, r0, r5
   1e894:	movwcc	r2, #1
   1e898:	cmp	r2, #0
   1e89c:	mla	r0, r0, sl, r3
   1e8a0:	str	r2, [sp, #12]
   1e8a4:	mvnne	r6, #0
   1e8a8:	cmp	r2, #0
   1e8ac:	mla	r0, r4, r5, r0
   1e8b0:	ldr	r4, [sp, #24]
   1e8b4:	umull	r1, r7, r6, r5
   1e8b8:	mvnne	r0, #0
   1e8bc:	subs	r3, lr, r6
   1e8c0:	mov	r3, ip
   1e8c4:	str	r3, [sp]
   1e8c8:	mla	r7, r6, sl, r7
   1e8cc:	mla	r7, r0, r5, r7
   1e8d0:	sbcs	r0, ip, r0
   1e8d4:	mov	r0, #0
   1e8d8:	movwcc	r0, #1
   1e8dc:	cmp	r0, #0
   1e8e0:	str	r0, [sp, #8]
   1e8e4:	mvnne	r1, #0
   1e8e8:	mvnne	r7, #0
   1e8ec:	subs	r0, lr, r1
   1e8f0:	sbcs	r0, ip, r7
   1e8f4:	mov	ip, #0
   1e8f8:	umull	r6, r0, r1, r5
   1e8fc:	movwcc	ip, #1
   1e900:	cmp	ip, #0
   1e904:	mla	r1, r1, r4, r0
   1e908:	mov	r0, lr
   1e90c:	mvnne	r6, #0
   1e910:	cmp	ip, #0
   1e914:	mla	r1, r7, r5, r1
   1e918:	umull	r2, sl, r6, r5
   1e91c:	mvnne	r1, #0
   1e920:	mla	sl, r6, r4, sl
   1e924:	subs	r6, lr, r6
   1e928:	mov	lr, #0
   1e92c:	mla	r7, r1, r5, sl
   1e930:	sbcs	r1, r3, r1
   1e934:	ldr	r1, [sp, #24]
   1e938:	movwcc	lr, #1
   1e93c:	cmp	lr, #0
   1e940:	mvnne	r2, #0
   1e944:	mvnne	r7, #0
   1e948:	subs	r6, r0, r2
   1e94c:	umull	r0, sl, r2, r5
   1e950:	sbcs	r6, r3, r7
   1e954:	mov	r3, #0
   1e958:	movwcc	r3, #1
   1e95c:	mla	r2, r2, r1, sl
   1e960:	cmp	r3, #0
   1e964:	mla	r2, r7, r5, r2
   1e968:	mvnne	r0, #0
   1e96c:	cmp	r3, #0
   1e970:	umull	r6, r4, r0, r5
   1e974:	mvnne	r2, #0
   1e978:	mla	r4, r0, r1, r4
   1e97c:	ldr	r1, [sp, #4]
   1e980:	mla	r7, r2, r5, r4
   1e984:	ldr	r5, [sp, #16]
   1e988:	subs	r0, r1, r0
   1e98c:	ldr	r0, [sp]
   1e990:	sbcs	r0, r0, r2
   1e994:	mov	r0, #0
   1e998:	movwcc	r0, #1
   1e99c:	cmp	r0, #0
   1e9a0:	mov	r2, r0
   1e9a4:	ldr	r0, [sp, #20]
   1e9a8:	mvnne	r7, #0
   1e9ac:	mvnne	r6, #0
   1e9b0:	orr	r0, r0, r5
   1e9b4:	ldr	r5, [sp, #12]
   1e9b8:	orr	r0, r0, r5
   1e9bc:	ldr	r5, [sp, #8]
   1e9c0:	orr	r0, r0, r5
   1e9c4:	orr	r0, r0, ip
   1e9c8:	orr	r0, r0, lr
   1e9cc:	orr	r0, r0, r3
   1e9d0:	orr	r0, r0, r2
   1e9d4:	and	r3, r0, #1
   1e9d8:	b	1ea34 <__assert_fail@plt+0xd430>
   1e9dc:	mov	r1, #0
   1e9e0:	lsl	r2, r7, #9
   1e9e4:	lsl	r0, r6, #9
   1e9e8:	lsr	r3, r7, #23
   1e9ec:	cmp	r1, r7, lsr #23
   1e9f0:	orr	r2, r2, r6, lsr #23
   1e9f4:	mvnne	r0, #0
   1e9f8:	movwne	r3, #1
   1e9fc:	cmp	r1, r7, lsr #23
   1ea00:	mvnne	r2, #0
   1ea04:	mov	r6, r0
   1ea08:	mov	r7, r2
   1ea0c:	b	1ea34 <__assert_fail@plt+0xd430>
   1ea10:	lsl	r1, r7, #1
   1ea14:	cmp	r7, #0
   1ea18:	lsl	r0, r6, #1
   1ea1c:	lsr	r3, r7, #31
   1ea20:	orr	r1, r1, r6, lsr #31
   1ea24:	mvnmi	r0, #0
   1ea28:	mvnmi	r1, #0
   1ea2c:	mov	r6, r0
   1ea30:	mov	r7, r1
   1ea34:	ldr	r1, [sp, #32]
   1ea38:	ldr	r2, [sp, #28]
   1ea3c:	orr	r8, r3, r8
   1ea40:	add	r0, r1, r2
   1ea44:	str	r0, [r9]
   1ea48:	ldrb	r0, [r1, r2]
   1ea4c:	cmp	r0, #0
   1ea50:	orrne	r8, r8, #2
   1ea54:	ldr	r0, [sp, #36]	; 0x24
   1ea58:	strd	r6, [r0]
   1ea5c:	mov	r0, r8
   1ea60:	sub	sp, fp, #28
   1ea64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea68:	movw	r0, #3301	; 0xce5
   1ea6c:	movw	r1, #3339	; 0xd0b
   1ea70:	movw	r3, #3616	; 0xe20
   1ea74:	mov	r2, #85	; 0x55
   1ea78:	movt	r0, #2
   1ea7c:	movt	r1, #2
   1ea80:	movt	r3, #2
   1ea84:	bl	11604 <__assert_fail@plt>
   1ea88:	clz	r2, r1
   1ea8c:	clz	r3, r0
   1ea90:	lsr	r2, r2, #5
   1ea94:	lsr	r3, r3, #5
   1ea98:	orrs	r2, r3, r2
   1ea9c:	movwne	r1, #1
   1eaa0:	movwne	r0, #1
   1eaa4:	cmp	r1, #0
   1eaa8:	beq	1ead8 <__assert_fail@plt+0xd4d4>
   1eaac:	mvn	r2, #-2147483648	; 0x80000000
   1eab0:	udiv	r2, r2, r1
   1eab4:	cmp	r2, r0
   1eab8:	bcs	1ead8 <__assert_fail@plt+0xd4d4>
   1eabc:	push	{fp, lr}
   1eac0:	mov	fp, sp
   1eac4:	bl	114e4 <__errno_location@plt>
   1eac8:	mov	r1, #12
   1eacc:	str	r1, [r0]
   1ead0:	mov	r0, #0
   1ead4:	pop	{fp, pc}
   1ead8:	b	112bc <calloc@plt>
   1eadc:	cmp	r0, #0
   1eae0:	movweq	r0, #1
   1eae4:	cmn	r0, #1
   1eae8:	ble	1eaf0 <__assert_fail@plt+0xd4ec>
   1eaec:	b	11430 <malloc@plt>
   1eaf0:	push	{fp, lr}
   1eaf4:	mov	fp, sp
   1eaf8:	bl	114e4 <__errno_location@plt>
   1eafc:	mov	r1, #12
   1eb00:	str	r1, [r0]
   1eb04:	mov	r0, #0
   1eb08:	pop	{fp, pc}
   1eb0c:	push	{fp, lr}
   1eb10:	mov	fp, sp
   1eb14:	cmp	r0, #0
   1eb18:	beq	1eb34 <__assert_fail@plt+0xd530>
   1eb1c:	cmp	r1, #0
   1eb20:	beq	1eb40 <__assert_fail@plt+0xd53c>
   1eb24:	cmn	r1, #1
   1eb28:	ble	1eb4c <__assert_fail@plt+0xd548>
   1eb2c:	pop	{fp, lr}
   1eb30:	b	11388 <realloc@plt>
   1eb34:	mov	r0, r1
   1eb38:	pop	{fp, lr}
   1eb3c:	b	1eadc <__assert_fail@plt+0xd4d8>
   1eb40:	bl	165a4 <__assert_fail@plt+0x4fa0>
   1eb44:	mov	r0, #0
   1eb48:	pop	{fp, pc}
   1eb4c:	bl	114e4 <__errno_location@plt>
   1eb50:	mov	r1, #12
   1eb54:	str	r1, [r0]
   1eb58:	mov	r0, #0
   1eb5c:	pop	{fp, pc}
   1eb60:	push	{r4, r5, r6, sl, fp, lr}
   1eb64:	add	fp, sp, #16
   1eb68:	mov	r4, r0
   1eb6c:	bl	11400 <__fpending@plt>
   1eb70:	ldr	r6, [r4]
   1eb74:	mov	r5, r0
   1eb78:	mov	r0, r4
   1eb7c:	bl	163fc <__assert_fail@plt+0x4df8>
   1eb80:	tst	r6, #32
   1eb84:	bne	1ebbc <__assert_fail@plt+0xd5b8>
   1eb88:	cmp	r0, #0
   1eb8c:	mov	r4, r0
   1eb90:	mvnne	r4, #0
   1eb94:	cmp	r5, #0
   1eb98:	bne	1ebc8 <__assert_fail@plt+0xd5c4>
   1eb9c:	cmp	r0, #0
   1eba0:	beq	1ebc8 <__assert_fail@plt+0xd5c4>
   1eba4:	bl	114e4 <__errno_location@plt>
   1eba8:	ldr	r0, [r0]
   1ebac:	subs	r4, r0, #9
   1ebb0:	mvnne	r4, #0
   1ebb4:	mov	r0, r4
   1ebb8:	pop	{r4, r5, r6, sl, fp, pc}
   1ebbc:	mvn	r4, #0
   1ebc0:	cmp	r0, #0
   1ebc4:	beq	1ebd0 <__assert_fail@plt+0xd5cc>
   1ebc8:	mov	r0, r4
   1ebcc:	pop	{r4, r5, r6, sl, fp, pc}
   1ebd0:	bl	114e4 <__errno_location@plt>
   1ebd4:	mov	r1, #0
   1ebd8:	str	r1, [r0]
   1ebdc:	mov	r0, r4
   1ebe0:	pop	{r4, r5, r6, sl, fp, pc}
   1ebe4:	sub	sp, sp, #8
   1ebe8:	push	{r4, r5, r6, r7, fp, lr}
   1ebec:	add	fp, sp, #16
   1ebf0:	sub	sp, sp, #8
   1ebf4:	mov	r5, r0
   1ebf8:	add	r0, fp, #8
   1ebfc:	cmp	r1, #11
   1ec00:	str	r2, [fp, #8]
   1ec04:	str	r3, [fp, #12]
   1ec08:	str	r0, [sp, #4]
   1ec0c:	bhi	1ec48 <__assert_fail@plt+0xd644>
   1ec10:	mov	r0, #1
   1ec14:	movw	r2, #1300	; 0x514
   1ec18:	tst	r2, r0, lsl r1
   1ec1c:	bne	1ed08 <__assert_fail@plt+0xd704>
   1ec20:	movw	r2, #2570	; 0xa0a
   1ec24:	tst	r2, r0, lsl r1
   1ec28:	bne	1ec70 <__assert_fail@plt+0xd66c>
   1ec2c:	cmp	r1, #0
   1ec30:	bne	1ec48 <__assert_fail@plt+0xd644>
   1ec34:	ldr	r0, [sp, #4]
   1ec38:	add	r1, r0, #4
   1ec3c:	str	r1, [sp, #4]
   1ec40:	mov	r1, #0
   1ec44:	b	1ed14 <__assert_fail@plt+0xd710>
   1ec48:	sub	r0, r1, #1024	; 0x400
   1ec4c:	cmp	r0, #10
   1ec50:	bhi	1ed08 <__assert_fail@plt+0xd704>
   1ec54:	mov	r2, #1
   1ec58:	movw	r3, #645	; 0x285
   1ec5c:	tst	r3, r2, lsl r0
   1ec60:	bne	1ed08 <__assert_fail@plt+0xd704>
   1ec64:	movw	r3, #1282	; 0x502
   1ec68:	tst	r3, r2, lsl r0
   1ec6c:	beq	1ec7c <__assert_fail@plt+0xd678>
   1ec70:	mov	r0, r5
   1ec74:	bl	11550 <fcntl64@plt>
   1ec78:	b	1ed20 <__assert_fail@plt+0xd71c>
   1ec7c:	cmp	r0, #6
   1ec80:	bne	1ed08 <__assert_fail@plt+0xd704>
   1ec84:	ldr	r0, [sp, #4]
   1ec88:	movw	r7, #5080	; 0x13d8
   1ec8c:	movt	r7, #3
   1ec90:	add	r1, r0, #4
   1ec94:	str	r1, [sp, #4]
   1ec98:	ldr	r6, [r0]
   1ec9c:	ldr	r0, [r7]
   1eca0:	cmp	r0, #0
   1eca4:	bmi	1ed44 <__assert_fail@plt+0xd740>
   1eca8:	mov	r0, r5
   1ecac:	movw	r1, #1030	; 0x406
   1ecb0:	mov	r2, r6
   1ecb4:	bl	11550 <fcntl64@plt>
   1ecb8:	mov	r4, r0
   1ecbc:	cmn	r0, #1
   1ecc0:	bgt	1ed38 <__assert_fail@plt+0xd734>
   1ecc4:	bl	114e4 <__errno_location@plt>
   1ecc8:	ldr	r0, [r0]
   1eccc:	cmp	r0, #22
   1ecd0:	bne	1ed38 <__assert_fail@plt+0xd734>
   1ecd4:	mov	r0, r5
   1ecd8:	mov	r1, #0
   1ecdc:	mov	r2, r6
   1ece0:	bl	11550 <fcntl64@plt>
   1ece4:	mov	r4, r0
   1ece8:	cmp	r0, #0
   1ecec:	bmi	1ed24 <__assert_fail@plt+0xd720>
   1ecf0:	mvn	r0, #0
   1ecf4:	str	r0, [r7]
   1ecf8:	mov	r0, #1
   1ecfc:	cmp	r0, #0
   1ed00:	bne	1ed70 <__assert_fail@plt+0xd76c>
   1ed04:	b	1ed24 <__assert_fail@plt+0xd720>
   1ed08:	ldr	r0, [sp, #4]
   1ed0c:	add	r2, r0, #4
   1ed10:	str	r2, [sp, #4]
   1ed14:	ldr	r2, [r0]
   1ed18:	mov	r0, r5
   1ed1c:	bl	11550 <fcntl64@plt>
   1ed20:	mov	r4, r0
   1ed24:	mov	r0, r4
   1ed28:	sub	sp, fp, #16
   1ed2c:	pop	{r4, r5, r6, r7, fp, lr}
   1ed30:	add	sp, sp, #8
   1ed34:	bx	lr
   1ed38:	mov	r0, #1
   1ed3c:	str	r0, [r7]
   1ed40:	b	1ed24 <__assert_fail@plt+0xd720>
   1ed44:	mov	r0, r5
   1ed48:	mov	r1, #0
   1ed4c:	mov	r2, r6
   1ed50:	bl	11550 <fcntl64@plt>
   1ed54:	mov	r4, r0
   1ed58:	ldr	r0, [r7]
   1ed5c:	add	r0, r0, #1
   1ed60:	clz	r0, r0
   1ed64:	lsr	r0, r0, #5
   1ed68:	cmp	r0, #0
   1ed6c:	beq	1ed24 <__assert_fail@plt+0xd720>
   1ed70:	cmp	r4, #0
   1ed74:	bmi	1ed24 <__assert_fail@plt+0xd720>
   1ed78:	mov	r0, r4
   1ed7c:	mov	r1, #1
   1ed80:	bl	11550 <fcntl64@plt>
   1ed84:	cmp	r0, #0
   1ed88:	bmi	1eda4 <__assert_fail@plt+0xd7a0>
   1ed8c:	orr	r2, r0, #1
   1ed90:	mov	r0, r4
   1ed94:	mov	r1, #2
   1ed98:	bl	11550 <fcntl64@plt>
   1ed9c:	cmn	r0, #1
   1eda0:	bne	1ed24 <__assert_fail@plt+0xd720>
   1eda4:	bl	114e4 <__errno_location@plt>
   1eda8:	ldr	r6, [r0]
   1edac:	mov	r5, r0
   1edb0:	mov	r0, r4
   1edb4:	bl	115f8 <close@plt>
   1edb8:	str	r6, [r5]
   1edbc:	mvn	r4, #0
   1edc0:	b	1ed24 <__assert_fail@plt+0xd720>
   1edc4:	push	{fp, lr}
   1edc8:	mov	fp, sp
   1edcc:	mov	r0, #14
   1edd0:	bl	1158c <nl_langinfo@plt>
   1edd4:	movw	r1, #1076	; 0x434
   1edd8:	cmp	r0, #0
   1eddc:	movt	r1, #2
   1ede0:	movne	r1, r0
   1ede4:	movw	r0, #3695	; 0xe6f
   1ede8:	ldrb	r2, [r1]
   1edec:	movt	r0, #2
   1edf0:	cmp	r2, #0
   1edf4:	movne	r0, r1
   1edf8:	pop	{fp, pc}
   1edfc:	push	{r4, r5, r6, r7, fp, lr}
   1ee00:	add	fp, sp, #16
   1ee04:	sub	sp, sp, #8
   1ee08:	cmp	r0, #0
   1ee0c:	add	r5, sp, #4
   1ee10:	mov	r7, r2
   1ee14:	mov	r4, r1
   1ee18:	movne	r5, r0
   1ee1c:	mov	r0, r5
   1ee20:	bl	1140c <mbrtowc@plt>
   1ee24:	mov	r6, r0
   1ee28:	cmp	r7, #0
   1ee2c:	beq	1ee54 <__assert_fail@plt+0xd850>
   1ee30:	cmn	r6, #2
   1ee34:	bcc	1ee54 <__assert_fail@plt+0xd850>
   1ee38:	mov	r0, #0
   1ee3c:	bl	16698 <__assert_fail@plt+0x5094>
   1ee40:	cmp	r0, #0
   1ee44:	bne	1ee54 <__assert_fail@plt+0xd850>
   1ee48:	ldrb	r0, [r4]
   1ee4c:	mov	r6, #1
   1ee50:	str	r0, [r5]
   1ee54:	mov	r0, r6
   1ee58:	sub	sp, fp, #16
   1ee5c:	pop	{r4, r5, r6, r7, fp, pc}
   1ee60:	cmp	r2, #0
   1ee64:	beq	1ee94 <__assert_fail@plt+0xd890>
   1ee68:	mvn	r3, #0
   1ee6c:	udiv	r3, r3, r2
   1ee70:	cmp	r3, r1
   1ee74:	bcs	1ee94 <__assert_fail@plt+0xd890>
   1ee78:	push	{fp, lr}
   1ee7c:	mov	fp, sp
   1ee80:	bl	114e4 <__errno_location@plt>
   1ee84:	mov	r1, #12
   1ee88:	str	r1, [r0]
   1ee8c:	mov	r0, #0
   1ee90:	pop	{fp, pc}
   1ee94:	mul	r1, r2, r1
   1ee98:	b	1eb0c <__assert_fail@plt+0xd508>
   1ee9c:	cmp	r3, #0
   1eea0:	cmpeq	r2, #0
   1eea4:	bne	1eec8 <__assert_fail@plt+0xd8c4>
   1eea8:	cmp	r1, #0
   1eeac:	movlt	r1, #-2147483648	; 0x80000000
   1eeb0:	movlt	r0, #0
   1eeb4:	blt	1eec4 <__assert_fail@plt+0xd8c0>
   1eeb8:	cmpeq	r0, #0
   1eebc:	mvnne	r1, #-2147483648	; 0x80000000
   1eec0:	mvnne	r0, #0
   1eec4:	b	1efac <__assert_fail@plt+0xd9a8>
   1eec8:	sub	sp, sp, #8
   1eecc:	push	{sp, lr}
   1eed0:	cmp	r1, #0
   1eed4:	blt	1eef4 <__assert_fail@plt+0xd8f0>
   1eed8:	cmp	r3, #0
   1eedc:	blt	1ef28 <__assert_fail@plt+0xd924>
   1eee0:	bl	1efbc <__assert_fail@plt+0xd9b8>
   1eee4:	ldr	lr, [sp, #4]
   1eee8:	add	sp, sp, #8
   1eeec:	pop	{r2, r3}
   1eef0:	bx	lr
   1eef4:	rsbs	r0, r0, #0
   1eef8:	sbc	r1, r1, r1, lsl #1
   1eefc:	cmp	r3, #0
   1ef00:	blt	1ef4c <__assert_fail@plt+0xd948>
   1ef04:	bl	1efbc <__assert_fail@plt+0xd9b8>
   1ef08:	ldr	lr, [sp, #4]
   1ef0c:	add	sp, sp, #8
   1ef10:	pop	{r2, r3}
   1ef14:	rsbs	r0, r0, #0
   1ef18:	sbc	r1, r1, r1, lsl #1
   1ef1c:	rsbs	r2, r2, #0
   1ef20:	sbc	r3, r3, r3, lsl #1
   1ef24:	bx	lr
   1ef28:	rsbs	r2, r2, #0
   1ef2c:	sbc	r3, r3, r3, lsl #1
   1ef30:	bl	1efbc <__assert_fail@plt+0xd9b8>
   1ef34:	ldr	lr, [sp, #4]
   1ef38:	add	sp, sp, #8
   1ef3c:	pop	{r2, r3}
   1ef40:	rsbs	r0, r0, #0
   1ef44:	sbc	r1, r1, r1, lsl #1
   1ef48:	bx	lr
   1ef4c:	rsbs	r2, r2, #0
   1ef50:	sbc	r3, r3, r3, lsl #1
   1ef54:	bl	1efbc <__assert_fail@plt+0xd9b8>
   1ef58:	ldr	lr, [sp, #4]
   1ef5c:	add	sp, sp, #8
   1ef60:	pop	{r2, r3}
   1ef64:	rsbs	r2, r2, #0
   1ef68:	sbc	r3, r3, r3, lsl #1
   1ef6c:	bx	lr
   1ef70:	cmp	r3, #0
   1ef74:	cmpeq	r2, #0
   1ef78:	bne	1ef90 <__assert_fail@plt+0xd98c>
   1ef7c:	cmp	r1, #0
   1ef80:	cmpeq	r0, #0
   1ef84:	mvnne	r1, #0
   1ef88:	mvnne	r0, #0
   1ef8c:	b	1efac <__assert_fail@plt+0xd9a8>
   1ef90:	sub	sp, sp, #8
   1ef94:	push	{sp, lr}
   1ef98:	bl	1efbc <__assert_fail@plt+0xd9b8>
   1ef9c:	ldr	lr, [sp, #4]
   1efa0:	add	sp, sp, #8
   1efa4:	pop	{r2, r3}
   1efa8:	bx	lr
   1efac:	push	{r1, lr}
   1efb0:	mov	r0, #8
   1efb4:	bl	112d4 <raise@plt>
   1efb8:	pop	{r1, pc}
   1efbc:	cmp	r1, r3
   1efc0:	cmpeq	r0, r2
   1efc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efc8:	mov	r4, r0
   1efcc:	movcc	r0, #0
   1efd0:	mov	r5, r1
   1efd4:	ldr	lr, [sp, #36]	; 0x24
   1efd8:	movcc	r1, r0
   1efdc:	bcc	1f0d8 <__assert_fail@plt+0xdad4>
   1efe0:	cmp	r3, #0
   1efe4:	clzeq	ip, r2
   1efe8:	clzne	ip, r3
   1efec:	addeq	ip, ip, #32
   1eff0:	cmp	r5, #0
   1eff4:	clzeq	r1, r4
   1eff8:	addeq	r1, r1, #32
   1effc:	clzne	r1, r5
   1f000:	sub	ip, ip, r1
   1f004:	sub	sl, ip, #32
   1f008:	lsl	r9, r3, ip
   1f00c:	rsb	fp, ip, #32
   1f010:	orr	r9, r9, r2, lsl sl
   1f014:	orr	r9, r9, r2, lsr fp
   1f018:	lsl	r8, r2, ip
   1f01c:	cmp	r5, r9
   1f020:	cmpeq	r4, r8
   1f024:	movcc	r0, #0
   1f028:	movcc	r1, r0
   1f02c:	bcc	1f048 <__assert_fail@plt+0xda44>
   1f030:	mov	r0, #1
   1f034:	subs	r4, r4, r8
   1f038:	lsl	r1, r0, sl
   1f03c:	orr	r1, r1, r0, lsr fp
   1f040:	lsl	r0, r0, ip
   1f044:	sbc	r5, r5, r9
   1f048:	cmp	ip, #0
   1f04c:	beq	1f0d8 <__assert_fail@plt+0xdad4>
   1f050:	lsr	r6, r8, #1
   1f054:	orr	r6, r6, r9, lsl #31
   1f058:	lsr	r7, r9, #1
   1f05c:	mov	r2, ip
   1f060:	b	1f084 <__assert_fail@plt+0xda80>
   1f064:	subs	r3, r4, r6
   1f068:	sbc	r8, r5, r7
   1f06c:	adds	r3, r3, r3
   1f070:	adc	r8, r8, r8
   1f074:	adds	r4, r3, #1
   1f078:	adc	r5, r8, #0
   1f07c:	subs	r2, r2, #1
   1f080:	beq	1f0a0 <__assert_fail@plt+0xda9c>
   1f084:	cmp	r5, r7
   1f088:	cmpeq	r4, r6
   1f08c:	bcs	1f064 <__assert_fail@plt+0xda60>
   1f090:	adds	r4, r4, r4
   1f094:	adc	r5, r5, r5
   1f098:	subs	r2, r2, #1
   1f09c:	bne	1f084 <__assert_fail@plt+0xda80>
   1f0a0:	lsr	r3, r4, ip
   1f0a4:	orr	r3, r3, r5, lsl fp
   1f0a8:	lsr	r2, r5, ip
   1f0ac:	orr	r3, r3, r5, lsr sl
   1f0b0:	adds	r0, r0, r4
   1f0b4:	mov	r4, r3
   1f0b8:	lsl	r3, r2, ip
   1f0bc:	orr	r3, r3, r4, lsl sl
   1f0c0:	lsl	ip, r4, ip
   1f0c4:	orr	r3, r3, r4, lsr fp
   1f0c8:	adc	r1, r1, r5
   1f0cc:	subs	r0, r0, ip
   1f0d0:	mov	r5, r2
   1f0d4:	sbc	r1, r1, r3
   1f0d8:	cmp	lr, #0
   1f0dc:	strdne	r4, [lr]
   1f0e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f0e8:	mov	r7, r0
   1f0ec:	ldr	r6, [pc, #72]	; 1f13c <__assert_fail@plt+0xdb38>
   1f0f0:	ldr	r5, [pc, #72]	; 1f140 <__assert_fail@plt+0xdb3c>
   1f0f4:	add	r6, pc, r6
   1f0f8:	add	r5, pc, r5
   1f0fc:	sub	r6, r6, r5
   1f100:	mov	r8, r1
   1f104:	mov	r9, r2
   1f108:	bl	11290 <fdopen@plt-0x20>
   1f10c:	asrs	r6, r6, #2
   1f110:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f114:	mov	r4, #0
   1f118:	add	r4, r4, #1
   1f11c:	ldr	r3, [r5], #4
   1f120:	mov	r2, r9
   1f124:	mov	r1, r8
   1f128:	mov	r0, r7
   1f12c:	blx	r3
   1f130:	cmp	r6, r4
   1f134:	bne	1f118 <__assert_fail@plt+0xdb14>
   1f138:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f13c:	andeq	r1, r1, r0, lsl lr
   1f140:	andeq	r1, r1, r8, lsl #28
   1f144:	bx	lr
   1f148:	ldr	r3, [pc, #12]	; 1f15c <__assert_fail@plt+0xdb58>
   1f14c:	mov	r1, #0
   1f150:	add	r3, pc, r3
   1f154:	ldr	r2, [r3]
   1f158:	b	114fc <__cxa_atexit@plt>
   1f15c:	ldrdeq	r1, [r1], -ip

Disassembly of section .fini:

0001f160 <.fini>:
   1f160:	push	{r3, lr}
   1f164:	pop	{r3, pc}
