
../repos/charybdis/extensions/.libs/m_mkpasswd.so:     file format elf32-littlearm


Disassembly of section .init:

00000578 <_init>:
 578:	push	{r3, lr}
 57c:	bl	634 <call_weak_fn>
 580:	pop	{r3, pc}

Disassembly of section .plt:

00000584 <.plt>:
 584:	push	{lr}		; (str lr, [sp, #-4]!)
 588:	ldr	lr, [pc, #4]	; 594 <.plt+0x10>
 58c:	add	lr, pc, lr
 590:	ldr	pc, [lr, #8]!
 594:	.word	0x00011a6c

00000598 <rb_current_time@plt>:
 598:	add	ip, pc, #0, 12
 59c:	add	ip, ip, #69632	; 0x11000
 5a0:	ldr	pc, [ip, #2668]!	; 0xa6c

000005a4 <__cxa_finalize@plt>:
 5a4:	add	ip, pc, #0, 12
 5a8:	add	ip, ip, #69632	; 0x11000
 5ac:	ldr	pc, [ip, #2660]!	; 0xa64

000005b0 <sendto_one@plt>:
 5b0:	add	ip, pc, #0, 12
 5b4:	add	ip, ip, #69632	; 0x11000
 5b8:	ldr	pc, [ip, #2652]!	; 0xa5c

000005bc <read@plt>:
 5bc:	add	ip, pc, #0, 12
 5c0:	add	ip, ip, #69632	; 0x11000
 5c4:	ldr	pc, [ip, #2644]!	; 0xa54

000005c8 <time@plt>:
 5c8:	add	ip, pc, #0, 12
 5cc:	add	ip, ip, #69632	; 0x11000
 5d0:	ldr	pc, [ip, #2636]!	; 0xa4c

000005d4 <rb_crypt@plt>:
 5d4:	add	ip, pc, #0, 12
 5d8:	add	ip, ip, #69632	; 0x11000
 5dc:	ldr	pc, [ip, #2628]!	; 0xa44

000005e0 <__gmon_start__@plt>:
 5e0:	add	ip, pc, #0, 12
 5e4:	add	ip, ip, #69632	; 0x11000
 5e8:	ldr	pc, [ip, #2620]!	; 0xa3c

000005ec <open@plt>:
 5ec:	add	ip, pc, #0, 12
 5f0:	add	ip, ip, #69632	; 0x11000
 5f4:	ldr	pc, [ip, #2612]!	; 0xa34

000005f8 <srand@plt>:
 5f8:	add	ip, pc, #0, 12
 5fc:	add	ip, ip, #69632	; 0x11000
 600:	ldr	pc, [ip, #2604]!	; 0xa2c

00000604 <rand@plt>:
 604:	add	ip, pc, #0, 12
 608:	add	ip, ip, #69632	; 0x11000
 60c:	ldr	pc, [ip, #2596]!	; 0xa24

00000610 <sendto_one_notice@plt>:
 610:	add	ip, pc, #0, 12
 614:	add	ip, ip, #69632	; 0x11000
 618:	ldr	pc, [ip, #2588]!	; 0xa1c

0000061c <close@plt>:
 61c:	add	ip, pc, #0, 12
 620:	add	ip, ip, #69632	; 0x11000
 624:	ldr	pc, [ip, #2580]!	; 0xa14

00000628 <irccmp@plt>:
 628:	add	ip, pc, #0, 12
 62c:	add	ip, ip, #69632	; 0x11000
 630:	ldr	pc, [ip, #2572]!	; 0xa0c

Disassembly of section .text:

00000634 <call_weak_fn>:
 634:	ldr	r3, [pc, #20]	; 650 <call_weak_fn+0x1c>
 638:	ldr	r2, [pc, #20]	; 654 <call_weak_fn+0x20>
 63c:	add	r3, pc, r3
 640:	ldr	r2, [r3, r2]
 644:	cmp	r2, #0
 648:	bxeq	lr
 64c:	b	5e0 <__gmon_start__@plt>
 650:	.word	0x000119bc
 654:	.word	0x00000048

00000658 <deregister_tm_clones>:
 658:	ldr	r3, [pc, #52]	; 694 <deregister_tm_clones+0x3c>
 65c:	ldr	r0, [pc, #52]	; 698 <deregister_tm_clones+0x40>
 660:	add	r3, pc, r3
 664:	add	r0, pc, r0
 668:	add	r3, r3, #3
 66c:	sub	r3, r3, r0
 670:	cmp	r3, #6
 674:	ldr	r3, [pc, #32]	; 69c <deregister_tm_clones+0x44>
 678:	add	r3, pc, r3
 67c:	bxls	lr
 680:	ldr	r2, [pc, #24]	; 6a0 <deregister_tm_clones+0x48>
 684:	ldr	r3, [r3, r2]
 688:	cmp	r3, #0
 68c:	bxeq	lr
 690:	bx	r3
 694:	.word	0x00011a6c
 698:	.word	0x00011a68
 69c:	.word	0x00011980
 6a0:	.word	0x00000044

000006a4 <register_tm_clones>:
 6a4:	ldr	r1, [pc, #56]	; 6e4 <register_tm_clones+0x40>
 6a8:	ldr	r0, [pc, #56]	; 6e8 <register_tm_clones+0x44>
 6ac:	add	r1, pc, r1
 6b0:	add	r0, pc, r0
 6b4:	sub	r1, r1, r0
 6b8:	ldr	r3, [pc, #44]	; 6ec <register_tm_clones+0x48>
 6bc:	asr	r1, r1, #2
 6c0:	add	r3, pc, r3
 6c4:	add	r1, r1, r1, lsr #31
 6c8:	asrs	r1, r1, #1
 6cc:	bxeq	lr
 6d0:	ldr	r2, [pc, #24]	; 6f0 <register_tm_clones+0x4c>
 6d4:	ldr	r3, [r3, r2]
 6d8:	cmp	r3, #0
 6dc:	bxeq	lr
 6e0:	bx	r3
 6e4:	.word	0x00011a20
 6e8:	.word	0x00011a1c
 6ec:	.word	0x00011938
 6f0:	.word	0x00000050

000006f4 <__do_global_dtors_aux>:
 6f4:	ldr	r3, [pc, #76]	; 748 <__do_global_dtors_aux+0x54>
 6f8:	ldr	r2, [pc, #76]	; 74c <__do_global_dtors_aux+0x58>
 6fc:	add	r3, pc, r3
 700:	add	r2, pc, r2
 704:	ldrb	r3, [r3]
 708:	cmp	r3, #0
 70c:	bxne	lr
 710:	ldr	r3, [pc, #56]	; 750 <__do_global_dtors_aux+0x5c>
 714:	push	{r4, lr}
 718:	ldr	r3, [r2, r3]
 71c:	cmp	r3, #0
 720:	beq	730 <__do_global_dtors_aux+0x3c>
 724:	ldr	r3, [pc, #40]	; 754 <__do_global_dtors_aux+0x60>
 728:	ldr	r0, [pc, r3]
 72c:	bl	5a4 <__cxa_finalize@plt>
 730:	bl	658 <deregister_tm_clones>
 734:	ldr	r3, [pc, #28]	; 758 <__do_global_dtors_aux+0x64>
 738:	mov	r2, #1
 73c:	add	r3, pc, r3
 740:	strb	r2, [r3]
 744:	pop	{r4, pc}
 748:	.word	0x000119d0
 74c:	.word	0x000118f8
 750:	.word	0x00000040
 754:	.word	0x0001192c
 758:	.word	0x00011990

0000075c <frame_dummy>:
 75c:	ldr	r0, [pc, #56]	; 79c <frame_dummy+0x40>
 760:	ldr	r3, [pc, #56]	; 7a0 <frame_dummy+0x44>
 764:	add	r0, pc, r0
 768:	ldr	r2, [r0]
 76c:	add	r3, pc, r3
 770:	cmp	r2, #0
 774:	bne	77c <frame_dummy+0x20>
 778:	b	6a4 <register_tm_clones>
 77c:	ldr	r2, [pc, #32]	; 7a4 <frame_dummy+0x48>
 780:	ldr	r3, [r3, r2]
 784:	cmp	r3, #0
 788:	beq	778 <frame_dummy+0x1c>
 78c:	push	{r4, lr}
 790:	blx	r3
 794:	pop	{r4, lr}
 798:	b	6a4 <register_tm_clones>
 79c:	.word	0x00011790
 7a0:	.word	0x0001188c
 7a4:	.word	0x0000004c

000007a8 <make_md5_salt.constprop.5>:
 7a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 7ac:	mov	r3, #36	; 0x24
 7b0:	ldr	r4, [pc, #384]	; 938 <make_md5_salt.constprop.5+0x190>
 7b4:	ldr	r0, [pc, #384]	; 93c <make_md5_salt.constprop.5+0x194>
 7b8:	add	r4, pc, r4
 7bc:	mov	r2, #49	; 0x31
 7c0:	mov	r1, #0
 7c4:	add	r0, pc, r0
 7c8:	strb	r2, [r4, #1]
 7cc:	strb	r3, [r4]
 7d0:	strb	r3, [r4, #2]
 7d4:	bl	5ec <open@plt>
 7d8:	subs	r6, r0, #0
 7dc:	blt	8f0 <make_md5_salt.constprop.5+0x148>
 7e0:	mov	r2, #8
 7e4:	add	r1, r4, #3
 7e8:	bl	5bc <read@plt>
 7ec:	cmp	r0, #8
 7f0:	bne	8a0 <make_md5_salt.constprop.5+0xf8>
 7f4:	ldrb	r8, [r4, #3]
 7f8:	ldrb	r7, [r4, #4]
 7fc:	ldrb	r5, [r4, #5]
 800:	ldrb	lr, [r4, #6]
 804:	ldrb	ip, [r4, #7]
 808:	ldrb	r0, [r4, #8]
 80c:	ldrb	r1, [r4, #9]
 810:	ldrb	r2, [r4, #10]
 814:	ldr	r3, [pc, #292]	; 940 <make_md5_salt.constprop.5+0x198>
 818:	and	r0, r0, #63	; 0x3f
 81c:	add	r3, pc, r3
 820:	and	r8, r8, #63	; 0x3f
 824:	and	r7, r7, #63	; 0x3f
 828:	and	r5, r5, #63	; 0x3f
 82c:	and	lr, lr, #63	; 0x3f
 830:	and	ip, ip, #63	; 0x3f
 834:	and	r1, r1, #63	; 0x3f
 838:	and	r2, r2, #63	; 0x3f
 83c:	ldrb	r9, [r3, r0]
 840:	ldrb	r8, [r3, r8]
 844:	ldrb	r7, [r3, r7]
 848:	ldrb	r5, [r3, r5]
 84c:	ldrb	lr, [r3, lr]
 850:	ldrb	ip, [r3, ip]
 854:	ldrb	r1, [r3, r1]
 858:	ldrb	r3, [r3, r2]
 85c:	mov	r0, r6
 860:	strb	r8, [r4, #3]
 864:	strb	r7, [r4, #4]
 868:	strb	r5, [r4, #5]
 86c:	strb	lr, [r4, #6]
 870:	strb	ip, [r4, #7]
 874:	strb	r9, [r4, #8]
 878:	strb	r1, [r4, #9]
 87c:	strb	r3, [r4, #10]
 880:	bl	61c <close@plt>
 884:	ldr	r0, [pc, #184]	; 944 <make_md5_salt.constprop.5+0x19c>
 888:	mov	r2, #36	; 0x24
 88c:	add	r0, pc, r0
 890:	mov	r3, #0
 894:	strb	r2, [r0, #11]
 898:	strb	r3, [r0, #12]
 89c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 8a0:	mov	r0, r6
 8a4:	bl	61c <close@plt>
 8a8:	mov	r0, #0
 8ac:	bl	5c8 <time@plt>
 8b0:	bl	5f8 <srand@plt>
 8b4:	ldr	r5, [pc, #140]	; 948 <make_md5_salt.constprop.5+0x1a0>
 8b8:	add	r6, r4, #2
 8bc:	add	r5, pc, r5
 8c0:	add	r4, r4, #10
 8c4:	bl	604 <rand@plt>
 8c8:	asr	r3, r0, #31
 8cc:	lsr	r3, r3, #26
 8d0:	add	r0, r0, r3
 8d4:	and	r0, r0, #63	; 0x3f
 8d8:	sub	r0, r0, r3
 8dc:	ldrb	r3, [r5, r0]
 8e0:	strb	r3, [r6, #1]!
 8e4:	cmp	r4, r6
 8e8:	bne	8c4 <make_md5_salt.constprop.5+0x11c>
 8ec:	b	884 <make_md5_salt.constprop.5+0xdc>
 8f0:	mov	r0, #0
 8f4:	bl	5c8 <time@plt>
 8f8:	bl	5f8 <srand@plt>
 8fc:	ldr	r5, [pc, #72]	; 94c <make_md5_salt.constprop.5+0x1a4>
 900:	add	r6, r4, #2
 904:	add	r5, pc, r5
 908:	add	r4, r4, #10
 90c:	bl	604 <rand@plt>
 910:	asr	r3, r0, #31
 914:	lsr	r3, r3, #26
 918:	add	r0, r0, r3
 91c:	and	r0, r0, #63	; 0x3f
 920:	sub	r0, r0, r3
 924:	ldrb	r3, [r5, r0]
 928:	strb	r3, [r6, #1]!
 92c:	cmp	r6, r4
 930:	bne	90c <make_md5_salt.constprop.5+0x164>
 934:	b	884 <make_md5_salt.constprop.5+0xdc>
 938:	.word	0x00011918
 93c:	.word	0x000007f8
 940:	.word	0x00000734
 944:	.word	0x00011844
 948:	.word	0x00000694
 94c:	.word	0x0000064c

00000950 <generate_random_salt.constprop.7>:
 950:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 954:	mov	r4, r0
 958:	ldr	r0, [pc, #476]	; b3c <generate_random_salt.constprop.7+0x1ec>
 95c:	mov	r1, #0
 960:	add	r0, pc, r0
 964:	bl	5ec <open@plt>
 968:	subs	r5, r0, #0
 96c:	blt	af0 <generate_random_salt.constprop.7+0x1a0>
 970:	mov	r2, #16
 974:	mov	r1, r4
 978:	bl	5bc <read@plt>
 97c:	cmp	r0, #16
 980:	bne	a9c <generate_random_salt.constprop.7+0x14c>
 984:	ldrb	r9, [r4]
 988:	ldrb	r8, [r4, #1]
 98c:	ldrb	r7, [r4, #2]
 990:	ldrb	r6, [r4, #3]
 994:	ldrb	lr, [r4, #4]
 998:	ldrb	ip, [r4, #5]
 99c:	ldrb	r0, [r4, #6]
 9a0:	ldrb	r1, [r4, #7]
 9a4:	ldrb	r2, [r4, #8]
 9a8:	ldr	r3, [pc, #400]	; b40 <generate_random_salt.constprop.7+0x1f0>
 9ac:	and	r9, r9, #63	; 0x3f
 9b0:	add	r3, pc, r3
 9b4:	and	r8, r8, #63	; 0x3f
 9b8:	and	r7, r7, #63	; 0x3f
 9bc:	and	r6, r6, #63	; 0x3f
 9c0:	and	lr, lr, #63	; 0x3f
 9c4:	and	ip, ip, #63	; 0x3f
 9c8:	and	r0, r0, #63	; 0x3f
 9cc:	and	r1, r1, #63	; 0x3f
 9d0:	and	r2, r2, #63	; 0x3f
 9d4:	ldrb	fp, [r3, r9]
 9d8:	ldrb	sl, [r3, r8]
 9dc:	ldrb	r9, [r3, r7]
 9e0:	ldrb	r8, [r3, r6]
 9e4:	ldrb	r7, [r3, lr]
 9e8:	ldrb	r6, [r3, ip]
 9ec:	ldrb	lr, [r3, r0]
 9f0:	ldrb	ip, [r3, r1]
 9f4:	ldrb	r0, [r3, r2]
 9f8:	ldrb	r1, [r4, #9]
 9fc:	ldrb	r2, [r4, #10]
 a00:	strb	r6, [r4, #5]
 a04:	and	r1, r1, #63	; 0x3f
 a08:	and	r2, r2, #63	; 0x3f
 a0c:	ldrb	r1, [r3, r1]
 a10:	ldrb	r2, [r3, r2]
 a14:	strb	lr, [r4, #6]
 a18:	strb	ip, [r4, #7]
 a1c:	strb	r0, [r4, #8]
 a20:	strb	r1, [r4, #9]
 a24:	strb	fp, [r4]
 a28:	strb	sl, [r4, #1]
 a2c:	strb	r9, [r4, #2]
 a30:	strb	r8, [r4, #3]
 a34:	strb	r7, [r4, #4]
 a38:	strb	r2, [r4, #10]
 a3c:	ldrb	lr, [r4, #11]
 a40:	ldrb	ip, [r4, #12]
 a44:	ldrb	r0, [r4, #13]
 a48:	ldrb	r1, [r4, #14]
 a4c:	ldrb	r2, [r4, #15]
 a50:	and	lr, lr, #63	; 0x3f
 a54:	and	ip, ip, #63	; 0x3f
 a58:	and	r2, r2, #63	; 0x3f
 a5c:	and	r0, r0, #63	; 0x3f
 a60:	and	r1, r1, #63	; 0x3f
 a64:	ldrb	r6, [r3, lr]
 a68:	ldrb	r1, [r3, r1]
 a6c:	ldrb	lr, [r3, ip]
 a70:	ldrb	ip, [r3, r0]
 a74:	ldrb	r3, [r3, r2]
 a78:	mov	r0, r5
 a7c:	strb	r6, [r4, #11]
 a80:	strb	lr, [r4, #12]
 a84:	strb	ip, [r4, #13]
 a88:	strb	r1, [r4, #14]
 a8c:	strb	r3, [r4, #15]
 a90:	bl	61c <close@plt>
 a94:	mov	r0, r4
 a98:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 a9c:	mov	r0, r5
 aa0:	bl	61c <close@plt>
 aa4:	mov	r0, #0
 aa8:	bl	5c8 <time@plt>
 aac:	bl	5f8 <srand@plt>
 ab0:	ldr	r6, [pc, #140]	; b44 <generate_random_salt.constprop.7+0x1f4>
 ab4:	sub	r7, r4, #1
 ab8:	add	r6, pc, r6
 abc:	add	r5, r4, #15
 ac0:	bl	604 <rand@plt>
 ac4:	asr	r3, r0, #31
 ac8:	lsr	r3, r3, #26
 acc:	add	r0, r0, r3
 ad0:	and	r0, r0, #63	; 0x3f
 ad4:	sub	r0, r0, r3
 ad8:	ldrb	r3, [r6, r0]
 adc:	strb	r3, [r7, #1]!
 ae0:	cmp	r5, r7
 ae4:	bne	ac0 <generate_random_salt.constprop.7+0x170>
 ae8:	mov	r0, r4
 aec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 af0:	mov	r0, #0
 af4:	bl	5c8 <time@plt>
 af8:	bl	5f8 <srand@plt>
 afc:	ldr	r6, [pc, #68]	; b48 <generate_random_salt.constprop.7+0x1f8>
 b00:	sub	r7, r4, #1
 b04:	add	r6, pc, r6
 b08:	add	r5, r4, #15
 b0c:	bl	604 <rand@plt>
 b10:	asr	r3, r0, #31
 b14:	lsr	r3, r3, #26
 b18:	add	r0, r0, r3
 b1c:	and	r0, r0, #63	; 0x3f
 b20:	sub	r0, r0, r3
 b24:	ldrb	r3, [r6, r0]
 b28:	strb	r3, [r7, #1]!
 b2c:	cmp	r7, r5
 b30:	bne	b0c <generate_random_salt.constprop.7+0x1bc>
 b34:	mov	r0, r4
 b38:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 b3c:	.word	0x0000065c
 b40:	.word	0x000005a0
 b44:	.word	0x00000498
 b48:	.word	0x0000044c

00000b4c <m_mkpasswd>:
 b4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 b50:	sub	sp, sp, #16
 b54:	ldr	r1, [pc, #484]	; d40 <m_mkpasswd+0x1f4>
 b58:	ldr	r6, [sp, #48]	; 0x30
 b5c:	add	r1, pc, r1
 b60:	mov	r5, r2
 b64:	ldm	r1, {r0, r1}
 b68:	ldr	r2, [r6, #4]
 b6c:	ldr	r4, [pc, #464]	; d44 <m_mkpasswd+0x1f8>
 b70:	lsr	ip, r1, #16
 b74:	cmp	r2, #0
 b78:	str	r0, [sp, #8]
 b7c:	strh	r1, [sp, #12]
 b80:	strb	ip, [sp, #14]
 b84:	add	r4, pc, r4
 b88:	beq	b98 <m_mkpasswd+0x4c>
 b8c:	ldrb	r2, [r2]
 b90:	cmp	r2, #0
 b94:	bne	bcc <m_mkpasswd+0x80>
 b98:	ldr	r2, [pc, #424]	; d48 <m_mkpasswd+0x1fc>
 b9c:	ldr	r1, [pc, #424]	; d4c <m_mkpasswd+0x200>
 ba0:	add	r3, r5, #88	; 0x58
 ba4:	add	r1, pc, r1
 ba8:	ldr	r2, [r4, r2]
 bac:	str	r1, [sp]
 bb0:	ldr	r1, [pc, #408]	; d50 <m_mkpasswd+0x204>
 bb4:	mov	r0, r5
 bb8:	add	r2, r2, #88	; 0x58
 bbc:	add	r1, pc, r1
 bc0:	bl	5b0 <sendto_one@plt>
 bc4:	add	sp, sp, #16
 bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 bcc:	cmp	r3, #2
 bd0:	ldr	r3, [pc, #380]	; d54 <m_mkpasswd+0x208>
 bd4:	ldr	r7, [pc, #380]	; d58 <m_mkpasswd+0x20c>
 bd8:	ldrgt	r9, [r6, #8]
 bdc:	ldr	r2, [r4, r3]
 be0:	add	r7, pc, r7
 be4:	addle	r9, sp, #8
 be8:	ldr	r3, [r7, #72]	; 0x48
 bec:	ldr	r8, [r2, #184]	; 0xb8
 bf0:	add	r8, r8, r3
 bf4:	bl	598 <rb_current_time@plt>
 bf8:	cmp	r8, r0
 bfc:	ble	c34 <m_mkpasswd+0xe8>
 c00:	ldr	r2, [pc, #320]	; d48 <m_mkpasswd+0x1fc>
 c04:	ldr	r1, [pc, #336]	; d5c <m_mkpasswd+0x210>
 c08:	add	r3, r5, #88	; 0x58
 c0c:	add	r1, pc, r1
 c10:	ldr	r2, [r4, r2]
 c14:	str	r1, [sp]
 c18:	ldr	r1, [pc, #320]	; d60 <m_mkpasswd+0x214>
 c1c:	mov	r0, r5
 c20:	add	r2, r2, #88	; 0x58
 c24:	add	r1, pc, r1
 c28:	bl	5b0 <sendto_one@plt>
 c2c:	add	sp, sp, #16
 c30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 c34:	bl	598 <rb_current_time@plt>
 c38:	ldr	r1, [pc, #292]	; d64 <m_mkpasswd+0x218>
 c3c:	add	r1, pc, r1
 c40:	str	r0, [r7, #72]	; 0x48
 c44:	mov	r0, r9
 c48:	bl	628 <irccmp@plt>
 c4c:	subs	sl, r0, #0
 c50:	beq	ccc <m_mkpasswd+0x180>
 c54:	ldr	r1, [pc, #268]	; d68 <m_mkpasswd+0x21c>
 c58:	mov	r0, r9
 c5c:	add	r1, pc, r1
 c60:	bl	628 <irccmp@plt>
 c64:	subs	sl, r0, #0
 c68:	bne	cfc <m_mkpasswd+0x1b0>
 c6c:	mov	r8, #36	; 0x24
 c70:	mov	r3, #54	; 0x36
 c74:	add	r0, r7, #51	; 0x33
 c78:	add	r4, r7, #48	; 0x30
 c7c:	strb	r8, [r7, #48]	; 0x30
 c80:	strb	r8, [r7, #50]	; 0x32
 c84:	strb	r3, [r7, #49]	; 0x31
 c88:	bl	950 <generate_random_salt.constprop.7>
 c8c:	mov	r1, r4
 c90:	strb	r8, [r7, #67]	; 0x43
 c94:	strb	sl, [r7, #68]	; 0x44
 c98:	ldr	r0, [r6, #4]
 c9c:	bl	5d4 <rb_crypt@plt>
 ca0:	ldr	r3, [r6, #4]
 ca4:	cmp	r0, #0
 ca8:	beq	d34 <m_mkpasswd+0x1e8>
 cac:	ldr	r1, [pc, #184]	; d6c <m_mkpasswd+0x220>
 cb0:	str	r0, [sp]
 cb4:	mov	r2, r9
 cb8:	mov	r0, r5
 cbc:	add	r1, pc, r1
 cc0:	bl	610 <sendto_one_notice@plt>
 cc4:	add	sp, sp, #16
 cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 ccc:	mov	r8, #36	; 0x24
 cd0:	mov	r3, #53	; 0x35
 cd4:	add	r0, r7, #27
 cd8:	add	r4, r7, #24
 cdc:	strb	r8, [r7, #24]
 ce0:	strb	r8, [r7, #26]
 ce4:	strb	r3, [r7, #25]
 ce8:	bl	950 <generate_random_salt.constprop.7>
 cec:	strb	r8, [r7, #43]	; 0x2b
 cf0:	strb	sl, [r7, #44]	; 0x2c
 cf4:	mov	r1, r4
 cf8:	b	c98 <m_mkpasswd+0x14c>
 cfc:	ldr	r1, [pc, #108]	; d70 <m_mkpasswd+0x224>
 d00:	mov	r0, r9
 d04:	add	r1, pc, r1
 d08:	bl	628 <irccmp@plt>
 d0c:	cmp	r0, #0
 d10:	bne	d20 <m_mkpasswd+0x1d4>
 d14:	bl	7a8 <make_md5_salt.constprop.5>
 d18:	mov	r1, r0
 d1c:	b	c98 <m_mkpasswd+0x14c>
 d20:	ldr	r1, [pc, #76]	; d74 <m_mkpasswd+0x228>
 d24:	mov	r0, r5
 d28:	add	r1, pc, r1
 d2c:	bl	610 <sendto_one_notice@plt>
 d30:	b	bc4 <m_mkpasswd+0x78>
 d34:	ldr	r0, [pc, #60]	; d78 <m_mkpasswd+0x22c>
 d38:	add	r0, pc, r0
 d3c:	b	cac <m_mkpasswd+0x160>
 d40:	.word	0x0000051c
 d44:	.word	0x00011474
 d48:	.word	0x00000054
 d4c:	.word	0x00000454
 d50:	.word	0x00000414
 d54:	.word	0x00000058
 d58:	.word	0x000114f0
 d5c:	.word	0x000003ec
 d60:	.word	0x000003e0
 d64:	.word	0x00000434
 d68:	.word	0x0000041c
 d6c:	.word	0x00000404
 d70:	.word	0x0000037c
 d74:	.word	0x0000035c
 d78:	.word	0x00000294

00000d7c <mo_mkpasswd>:
 d7c:	ldr	r1, [pc, #408]	; f1c <mo_mkpasswd+0x1a0>
 d80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 d84:	sub	sp, sp, #16
 d88:	add	r1, pc, r1
 d8c:	ldr	r4, [sp, #48]	; 0x30
 d90:	ldm	r1, {r0, r1}
 d94:	mov	r5, r2
 d98:	ldr	r2, [r4, #4]
 d9c:	lsr	ip, r1, #16
 da0:	strh	r1, [sp, #12]
 da4:	ldr	r1, [pc, #372]	; f20 <mo_mkpasswd+0x1a4>
 da8:	cmp	r2, #0
 dac:	str	r0, [sp, #8]
 db0:	strb	ip, [sp, #14]
 db4:	add	r1, pc, r1
 db8:	beq	e54 <mo_mkpasswd+0xd8>
 dbc:	ldrb	r2, [r2]
 dc0:	cmp	r2, #0
 dc4:	beq	e54 <mo_mkpasswd+0xd8>
 dc8:	cmp	r3, #2
 dcc:	ldr	r1, [pc, #336]	; f24 <mo_mkpasswd+0x1a8>
 dd0:	ldrgt	r7, [r4, #8]
 dd4:	addle	r7, sp, #8
 dd8:	add	r1, pc, r1
 ddc:	mov	r0, r7
 de0:	bl	628 <irccmp@plt>
 de4:	subs	sl, r0, #0
 de8:	bne	e88 <mo_mkpasswd+0x10c>
 dec:	ldr	r6, [pc, #308]	; f28 <mo_mkpasswd+0x1ac>
 df0:	mov	r9, #36	; 0x24
 df4:	add	r6, pc, r6
 df8:	mov	r3, #53	; 0x35
 dfc:	add	r0, r6, #27
 e00:	add	r8, r6, #24
 e04:	strb	r3, [r6, #25]
 e08:	strb	r9, [r6, #24]
 e0c:	strb	r9, [r6, #26]
 e10:	bl	950 <generate_random_salt.constprop.7>
 e14:	mov	r1, r8
 e18:	strb	sl, [r6, #44]	; 0x2c
 e1c:	strb	r9, [r6, #43]	; 0x2b
 e20:	ldr	r0, [r4, #4]
 e24:	bl	5d4 <rb_crypt@plt>
 e28:	ldr	r3, [r4, #4]
 e2c:	cmp	r0, #0
 e30:	beq	efc <mo_mkpasswd+0x180>
 e34:	ldr	r1, [pc, #240]	; f2c <mo_mkpasswd+0x1b0>
 e38:	str	r0, [sp]
 e3c:	mov	r2, r7
 e40:	mov	r0, r5
 e44:	add	r1, pc, r1
 e48:	bl	610 <sendto_one_notice@plt>
 e4c:	add	sp, sp, #16
 e50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 e54:	ldr	r2, [pc, #212]	; f30 <mo_mkpasswd+0x1b4>
 e58:	ldr	ip, [pc, #212]	; f34 <mo_mkpasswd+0x1b8>
 e5c:	add	r3, r5, #88	; 0x58
 e60:	ldr	r2, [r1, r2]
 e64:	ldr	r1, [pc, #204]	; f38 <mo_mkpasswd+0x1bc>
 e68:	add	ip, pc, ip
 e6c:	mov	r0, r5
 e70:	add	r2, r2, #88	; 0x58
 e74:	str	ip, [sp]
 e78:	add	r1, pc, r1
 e7c:	bl	5b0 <sendto_one@plt>
 e80:	add	sp, sp, #16
 e84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 e88:	ldr	r1, [pc, #172]	; f3c <mo_mkpasswd+0x1c0>
 e8c:	mov	r0, r7
 e90:	add	r1, pc, r1
 e94:	bl	628 <irccmp@plt>
 e98:	subs	sl, r0, #0
 e9c:	beq	ec4 <mo_mkpasswd+0x148>
 ea0:	ldr	r1, [pc, #152]	; f40 <mo_mkpasswd+0x1c4>
 ea4:	mov	r0, r7
 ea8:	add	r1, pc, r1
 eac:	bl	628 <irccmp@plt>
 eb0:	cmp	r0, #0
 eb4:	bne	f08 <mo_mkpasswd+0x18c>
 eb8:	bl	7a8 <make_md5_salt.constprop.5>
 ebc:	mov	r1, r0
 ec0:	b	e20 <mo_mkpasswd+0xa4>
 ec4:	ldr	r8, [pc, #120]	; f44 <mo_mkpasswd+0x1c8>
 ec8:	mov	r9, #36	; 0x24
 ecc:	add	r8, pc, r8
 ed0:	mov	r3, #54	; 0x36
 ed4:	add	r0, r8, #51	; 0x33
 ed8:	add	r6, r8, #48	; 0x30
 edc:	strb	r3, [r8, #49]	; 0x31
 ee0:	strb	r9, [r8, #48]	; 0x30
 ee4:	strb	r9, [r8, #50]	; 0x32
 ee8:	bl	950 <generate_random_salt.constprop.7>
 eec:	strb	sl, [r8, #68]	; 0x44
 ef0:	strb	r9, [r8, #67]	; 0x43
 ef4:	mov	r1, r6
 ef8:	b	e20 <mo_mkpasswd+0xa4>
 efc:	ldr	r0, [pc, #68]	; f48 <mo_mkpasswd+0x1cc>
 f00:	add	r0, pc, r0
 f04:	b	e34 <mo_mkpasswd+0xb8>
 f08:	ldr	r1, [pc, #60]	; f4c <mo_mkpasswd+0x1d0>
 f0c:	mov	r0, r5
 f10:	add	r1, pc, r1
 f14:	bl	610 <sendto_one_notice@plt>
 f18:	b	e80 <mo_mkpasswd+0x104>
 f1c:	.word	0x000002f0
 f20:	.word	0x00011244
 f24:	.word	0x00000298
 f28:	.word	0x000112dc
 f2c:	.word	0x0000027c
 f30:	.word	0x00000054
 f34:	.word	0x00000190
 f38:	.word	0x00000158
 f3c:	.word	0x000001e8
 f40:	.word	0x000001d8
 f44:	.word	0x00011204
 f48:	.word	0x000000cc
 f4c:	.word	0x00000174

Disassembly of section .fini:

00000f50 <_fini>:
 f50:	push	{r3, lr}
 f54:	pop	{r3, pc}
