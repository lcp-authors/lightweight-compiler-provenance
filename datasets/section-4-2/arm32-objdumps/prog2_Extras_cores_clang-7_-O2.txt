
../repos/prog2/Extras_cores:     file format elf32-littlearm


Disassembly of section .init:

000105b0 <.init>:
   105b0:	push	{r3, lr}
   105b4:	bl	1063c <_start@@Base+0x3c>
   105b8:	pop	{r3, pc}

Disassembly of section .plt:

000105bc <printf@plt-0x14>:
   105bc:	push	{lr}		; (str lr, [sp, #-4]!)
   105c0:	ldr	lr, [pc, #4]	; 105cc <printf@plt-0x4>
   105c4:	add	lr, pc, lr
   105c8:	ldr	pc, [lr, #8]!
   105cc:	andeq	r0, r1, r4, lsr sl

000105d0 <printf@plt>:
   105d0:	add	ip, pc, #0, 12
   105d4:	add	ip, ip, #16, 20	; 0x10000
   105d8:	ldr	pc, [ip, #2612]!	; 0xa34

000105dc <__libc_start_main@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2604]!	; 0xa2c

000105e8 <__gmon_start__@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2596]!	; 0xa24

000105f4 <abort@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2588]!	; 0xa1c

Disassembly of section .text:

00010600 <_start@@Base>:
   10600:	mov	fp, #0
   10604:	mov	lr, #0
   10608:	pop	{r1}		; (ldr r1, [sp], #4)
   1060c:	mov	r2, sp
   10610:	push	{r2}		; (str r2, [sp, #-4]!)
   10614:	push	{r0}		; (str r0, [sp, #-4]!)
   10618:	ldr	ip, [pc, #16]	; 10630 <_start@@Base+0x30>
   1061c:	push	{ip}		; (str ip, [sp, #-4]!)
   10620:	ldr	r0, [pc, #12]	; 10634 <_start@@Base+0x34>
   10624:	ldr	r3, [pc, #12]	; 10638 <_start@@Base+0x38>
   10628:	bl	105dc <__libc_start_main@plt>
   1062c:	bl	105f4 <abort@plt>
   10630:	andeq	r0, r1, r0, ror #15
   10634:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10638:	andeq	r0, r1, r0, lsl #15
   1063c:	ldr	r3, [pc, #20]	; 10658 <_start@@Base+0x58>
   10640:	ldr	r2, [pc, #20]	; 1065c <_start@@Base+0x5c>
   10644:	add	r3, pc, r3
   10648:	ldr	r2, [r3, r2]
   1064c:	cmp	r2, #0
   10650:	bxeq	lr
   10654:	b	105e8 <__gmon_start__@plt>
   10658:			; <UNDEFINED> instruction: 0x000109b4
   1065c:	andeq	r0, r0, ip, lsl r0
   10660:	ldr	r0, [pc, #24]	; 10680 <_start@@Base+0x80>
   10664:	ldr	r3, [pc, #24]	; 10684 <_start@@Base+0x84>
   10668:	cmp	r3, r0
   1066c:	bxeq	lr
   10670:	ldr	r3, [pc, #16]	; 10688 <_start@@Base+0x88>
   10674:	cmp	r3, #0
   10678:	bxeq	lr
   1067c:	bx	r3
   10680:	andeq	r1, r2, r8, lsr #32
   10684:	andeq	r1, r2, r8, lsr #32
   10688:	andeq	r0, r0, r0
   1068c:	ldr	r0, [pc, #36]	; 106b8 <_start@@Base+0xb8>
   10690:	ldr	r1, [pc, #36]	; 106bc <_start@@Base+0xbc>
   10694:	sub	r1, r1, r0
   10698:	asr	r1, r1, #2
   1069c:	add	r1, r1, r1, lsr #31
   106a0:	asrs	r1, r1, #1
   106a4:	bxeq	lr
   106a8:	ldr	r3, [pc, #16]	; 106c0 <_start@@Base+0xc0>
   106ac:	cmp	r3, #0
   106b0:	bxeq	lr
   106b4:	bx	r3
   106b8:	andeq	r1, r2, r8, lsr #32
   106bc:	andeq	r1, r2, r8, lsr #32
   106c0:	andeq	r0, r0, r0
   106c4:	push	{r4, lr}
   106c8:	ldr	r4, [pc, #24]	; 106e8 <_start@@Base+0xe8>
   106cc:	ldrb	r3, [r4]
   106d0:	cmp	r3, #0
   106d4:	popne	{r4, pc}
   106d8:	bl	10660 <_start@@Base+0x60>
   106dc:	mov	r3, #1
   106e0:	strb	r3, [r4]
   106e4:	pop	{r4, pc}
   106e8:	andeq	r1, r2, r8, lsr #32
   106ec:	b	1068c <_start@@Base+0x8c>

000106f0 <main@@Base>:
   106f0:	push	{fp, lr}
   106f4:	mov	fp, sp
   106f8:	ldr	r0, [pc, #96]	; 10760 <main@@Base+0x70>
   106fc:	add	r0, pc, r0
   10700:	bl	105d0 <printf@plt>
   10704:	ldr	r0, [pc, #88]	; 10764 <main@@Base+0x74>
   10708:	add	r0, pc, r0
   1070c:	bl	105d0 <printf@plt>
   10710:	ldr	r0, [pc, #80]	; 10768 <main@@Base+0x78>
   10714:	add	r0, pc, r0
   10718:	bl	105d0 <printf@plt>
   1071c:	ldr	r0, [pc, #72]	; 1076c <main@@Base+0x7c>
   10720:	add	r0, pc, r0
   10724:	bl	105d0 <printf@plt>
   10728:	ldr	r0, [pc, #64]	; 10770 <main@@Base+0x80>
   1072c:	add	r0, pc, r0
   10730:	bl	105d0 <printf@plt>
   10734:	ldr	r0, [pc, #56]	; 10774 <main@@Base+0x84>
   10738:	add	r0, pc, r0
   1073c:	bl	105d0 <printf@plt>
   10740:	ldr	r0, [pc, #48]	; 10778 <main@@Base+0x88>
   10744:	add	r0, pc, r0
   10748:	bl	105d0 <printf@plt>
   1074c:	ldr	r0, [pc, #40]	; 1077c <main@@Base+0x8c>
   10750:	add	r0, pc, r0
   10754:	bl	105d0 <printf@plt>
   10758:	mov	r0, #0
   1075c:	pop	{fp, pc}
   10760:	andeq	r0, r0, ip, ror #1
   10764:	andeq	r0, r0, lr, ror #1
   10768:	strdeq	r0, [r0], -r2
   1076c:	strdeq	r0, [r0], -r7
   10770:	strdeq	r0, [r0], -sl
   10774:	andeq	r0, r0, r0, lsl #2
   10778:	andeq	r0, r0, r3, lsl #2
   1077c:	andeq	r0, r0, r7, lsl #2

00010780 <__libc_csu_init@@Base>:
   10780:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10784:	mov	r7, r0
   10788:	ldr	r6, [pc, #72]	; 107d8 <__libc_csu_init@@Base+0x58>
   1078c:	ldr	r5, [pc, #72]	; 107dc <__libc_csu_init@@Base+0x5c>
   10790:	add	r6, pc, r6
   10794:	add	r5, pc, r5
   10798:	sub	r6, r6, r5
   1079c:	mov	r8, r1
   107a0:	mov	r9, r2
   107a4:	bl	105b0 <printf@plt-0x20>
   107a8:	asrs	r6, r6, #2
   107ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   107b0:	mov	r4, #0
   107b4:	add	r4, r4, #1
   107b8:	ldr	r3, [r5], #4
   107bc:	mov	r2, r9
   107c0:	mov	r1, r8
   107c4:	mov	r0, r7
   107c8:	blx	r3
   107cc:	cmp	r6, r4
   107d0:	bne	107b4 <__libc_csu_init@@Base+0x34>
   107d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   107d8:	andeq	r0, r1, r4, ror r7
   107dc:	andeq	r0, r1, ip, ror #14

000107e0 <__libc_csu_fini@@Base>:
   107e0:	bx	lr

Disassembly of section .fini:

000107e4 <.fini>:
   107e4:	push	{r3, lr}
   107e8:	pop	{r3, pc}
