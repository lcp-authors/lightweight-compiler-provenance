
../repos/prog2/6.Challenge:     file format elf32-littlearm


Disassembly of section .init:

0001059c <.init>:
   1059c:	push	{r3, lr}
   105a0:	bl	1070c <_start@@Base+0x3c>
   105a4:	pop	{r3, pc}

Disassembly of section .plt:

000105a8 <printf@plt-0x14>:
   105a8:	push	{lr}		; (str lr, [sp, #-4]!)
   105ac:	ldr	lr, [pc, #4]	; 105b8 <printf@plt-0x4>
   105b0:	add	lr, pc, lr
   105b4:	ldr	pc, [lr, #8]!
   105b8:	andeq	r0, r1, r8, asr #20

000105bc <printf@plt>:
   105bc:	add	ip, pc, #0, 12
   105c0:	add	ip, ip, #16, 20	; 0x10000
   105c4:	ldr	pc, [ip, #2632]!	; 0xa48

000105c8 <malloc@plt>:
   105c8:	add	ip, pc, #0, 12
   105cc:	add	ip, ip, #16, 20	; 0x10000
   105d0:	ldr	pc, [ip, #2624]!	; 0xa40

000105d4 <__libc_start_main@plt>:
   105d4:	add	ip, pc, #0, 12
   105d8:	add	ip, ip, #16, 20	; 0x10000
   105dc:	ldr	pc, [ip, #2616]!	; 0xa38

000105e0 <__gmon_start__@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #16, 20	; 0x10000
   105e8:	ldr	pc, [ip, #2608]!	; 0xa30

000105ec <exit@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #16, 20	; 0x10000
   105f4:	ldr	pc, [ip, #2600]!	; 0xa28

000105f8 <__isoc99_scanf@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #16, 20	; 0x10000
   10600:	ldr	pc, [ip, #2592]!	; 0xa20

00010604 <abort@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2584]!	; 0xa18

Disassembly of section .text:

00010610 <main@@Base>:
   10610:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10614:	ldr	r6, [pc, #160]	; 106bc <main@@Base+0xac>
   10618:	ldr	r7, [pc, #160]	; 106c0 <main@@Base+0xb0>
   1061c:	ldr	r8, [pc, #160]	; 106c4 <main@@Base+0xb4>
   10620:	add	r1, sp, #4
   10624:	mov	r0, r6
   10628:	bl	105f8 <__isoc99_scanf@plt>
   1062c:	ldr	r0, [sp, #4]
   10630:	cmp	r0, #0
   10634:	bne	1063c <main@@Base+0x2c>
   10638:	bl	105ec <exit@plt>
   1063c:	lsl	r0, r0, #3
   10640:	bl	105c8 <malloc@plt>
   10644:	ldr	r5, [sp, #4]
   10648:	mov	r4, r0
   1064c:	sub	r2, r0, #4
   10650:	mov	r3, #0
   10654:	cmp	r5, r3
   10658:	bgt	1069c <main@@Base+0x8c>
   1065c:	mov	r0, r7
   10660:	add	sl, r4, r5, lsl #2
   10664:	add	r4, r4, #4
   10668:	bl	105bc <printf@plt>
   1066c:	cmp	r5, #2
   10670:	ldr	r1, [r4, #-4]
   10674:	ldr	r9, [r4], #8
   10678:	bgt	106a8 <main@@Base+0x98>
   1067c:	mov	r0, r6
   10680:	bl	105bc <printf@plt>
   10684:	ldr	r0, [pc, #60]	; 106c8 <main@@Base+0xb8>
   10688:	bl	105bc <printf@plt>
   1068c:	mov	r1, r9
   10690:	ldr	r0, [pc, #52]	; 106cc <main@@Base+0xbc>
   10694:	bl	105bc <printf@plt>
   10698:	b	10620 <main@@Base+0x10>
   1069c:	add	r3, r3, #1
   106a0:	str	r3, [r2, #4]!
   106a4:	b	10654 <main@@Base+0x44>
   106a8:	mov	r0, r8
   106ac:	sub	r5, r5, #1
   106b0:	bl	105bc <printf@plt>
   106b4:	str	r9, [sl], #4
   106b8:	b	1066c <main@@Base+0x5c>
   106bc:	andeq	r0, r1, r0, lsr r8
   106c0:	andeq	r0, r1, r3, lsr r8
   106c4:	andeq	r0, r1, r5, asr #16
   106c8:	andeq	r0, r1, sl, asr #16
   106cc:	andeq	r0, r1, ip, asr r8

000106d0 <_start@@Base>:
   106d0:	mov	fp, #0
   106d4:	mov	lr, #0
   106d8:	pop	{r1}		; (ldr r1, [sp], #4)
   106dc:	mov	r2, sp
   106e0:	push	{r2}		; (str r2, [sp, #-4]!)
   106e4:	push	{r0}		; (str r0, [sp, #-4]!)
   106e8:	ldr	ip, [pc, #16]	; 10700 <_start@@Base+0x30>
   106ec:	push	{ip}		; (str ip, [sp, #-4]!)
   106f0:	ldr	r0, [pc, #12]	; 10704 <_start@@Base+0x34>
   106f4:	ldr	r3, [pc, #12]	; 10708 <_start@@Base+0x38>
   106f8:	bl	105d4 <__libc_start_main@plt>
   106fc:	bl	10604 <abort@plt>
   10700:	andeq	r0, r1, r0, lsr #16
   10704:	andeq	r0, r1, r0, lsl r6
   10708:	andeq	r0, r1, r0, asr #15
   1070c:	ldr	r3, [pc, #20]	; 10728 <_start@@Base+0x58>
   10710:	ldr	r2, [pc, #20]	; 1072c <_start@@Base+0x5c>
   10714:	add	r3, pc, r3
   10718:	ldr	r2, [r3, r2]
   1071c:	cmp	r2, #0
   10720:	bxeq	lr
   10724:	b	105e0 <__gmon_start__@plt>
   10728:	andeq	r0, r1, r4, ror #17
   1072c:	andeq	r0, r0, r8, lsr #32
   10730:	ldr	r0, [pc, #24]	; 10750 <_start@@Base+0x80>
   10734:	ldr	r3, [pc, #24]	; 10754 <_start@@Base+0x84>
   10738:	cmp	r3, r0
   1073c:	bxeq	lr
   10740:	ldr	r3, [pc, #16]	; 10758 <_start@@Base+0x88>
   10744:	cmp	r3, #0
   10748:	bxeq	lr
   1074c:	bx	r3
   10750:	andeq	r1, r2, r4, lsr r0
   10754:	andeq	r1, r2, r4, lsr r0
   10758:	andeq	r0, r0, r0
   1075c:	ldr	r0, [pc, #36]	; 10788 <_start@@Base+0xb8>
   10760:	ldr	r1, [pc, #36]	; 1078c <_start@@Base+0xbc>
   10764:	sub	r1, r1, r0
   10768:	asr	r1, r1, #2
   1076c:	add	r1, r1, r1, lsr #31
   10770:	asrs	r1, r1, #1
   10774:	bxeq	lr
   10778:	ldr	r3, [pc, #16]	; 10790 <_start@@Base+0xc0>
   1077c:	cmp	r3, #0
   10780:	bxeq	lr
   10784:	bx	r3
   10788:	andeq	r1, r2, r4, lsr r0
   1078c:	andeq	r1, r2, r4, lsr r0
   10790:	andeq	r0, r0, r0
   10794:	push	{r4, lr}
   10798:	ldr	r4, [pc, #24]	; 107b8 <_start@@Base+0xe8>
   1079c:	ldrb	r3, [r4]
   107a0:	cmp	r3, #0
   107a4:	popne	{r4, pc}
   107a8:	bl	10730 <_start@@Base+0x60>
   107ac:	mov	r3, #1
   107b0:	strb	r3, [r4]
   107b4:	pop	{r4, pc}
   107b8:	andeq	r1, r2, r4, lsr r0
   107bc:	b	1075c <_start@@Base+0x8c>

000107c0 <__libc_csu_init@@Base>:
   107c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   107c4:	mov	r7, r0
   107c8:	ldr	r6, [pc, #72]	; 10818 <__libc_csu_init@@Base+0x58>
   107cc:	ldr	r5, [pc, #72]	; 1081c <__libc_csu_init@@Base+0x5c>
   107d0:	add	r6, pc, r6
   107d4:	add	r5, pc, r5
   107d8:	sub	r6, r6, r5
   107dc:	mov	r8, r1
   107e0:	mov	r9, r2
   107e4:	bl	1059c <printf@plt-0x20>
   107e8:	asrs	r6, r6, #2
   107ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   107f0:	mov	r4, #0
   107f4:	add	r4, r4, #1
   107f8:	ldr	r3, [r5], #4
   107fc:	mov	r2, r9
   10800:	mov	r1, r8
   10804:	mov	r0, r7
   10808:	blx	r3
   1080c:	cmp	r6, r4
   10810:	bne	107f4 <__libc_csu_init@@Base+0x34>
   10814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10818:	andeq	r0, r1, ip, lsr r7
   1081c:	andeq	r0, r1, r4, lsr r7

00010820 <__libc_csu_fini@@Base>:
   10820:	bx	lr

Disassembly of section .fini:

00010824 <.fini>:
   10824:	push	{r3, lr}
   10828:	pop	{r3, pc}
