
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	1141c <__assert_fail@plt+0x4c>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	pc, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #126976	; 0x1f000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #126976	; 0x1f000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #126976	; 0x1f000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <gmtime_r@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #126976	; 0x1f000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <utimensat@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #126976	; 0x1f000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <strcmp@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #126976	; 0x1f000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <strtol@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #126976	; 0x1f000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <mktime@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #126976	; 0x1f000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <fflush@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #126976	; 0x1f000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #126976	; 0x1f000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <clock_gettime@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #126976	; 0x1f000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #126976	; 0x1f000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #126976	; 0x1f000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #126976	; 0x1f000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <time@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #126976	; 0x1f000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <memcmp@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #126976	; 0x1f000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <fputc_unlocked@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #126976	; 0x1f000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <dcgettext@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #126976	; 0x1f000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <dup2@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #126976	; 0x1f000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <realloc@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #126976	; 0x1f000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <localtime_r@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #126976	; 0x1f000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <textdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #126976	; 0x1f000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #126976	; 0x1f000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <tzset@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #126976	; 0x1f000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #126976	; 0x1f000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #126976	; 0x1f000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #126976	; 0x1f000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #126976	; 0x1f000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #126976	; 0x1f000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #126976	; 0x1f000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #126976	; 0x1f000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #126976	; 0x1f000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <malloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #126976	; 0x1f000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <__libc_start_main@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #126976	; 0x1f000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <strftime@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #126976	; 0x1f000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__vfprintf_chk@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #126976	; 0x1f000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__freading@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #126976	; 0x1f000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <localtime@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #126976	; 0x1f000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_tolower_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #126976	; 0x1f000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <__ctype_toupper_loc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #126976	; 0x1f000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <__gmon_start__@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #126976	; 0x1f000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <getopt_long@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #126976	; 0x1f000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <__ctype_b_loc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #126976	; 0x1f000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #126976	; 0x1f000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <strlen@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #126976	; 0x1f000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <strchr@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #126976	; 0x1f000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <setenv@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #126976	; 0x1f000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #126976	; 0x1f000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <__sprintf_chk@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #126976	; 0x1f000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <snprintf@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #126976	; 0x1f000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <__cxa_atexit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #126976	; 0x1f000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <memset@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #126976	; 0x1f000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <__printf_chk@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #126976	; 0x1f000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <fileno@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #126976	; 0x1f000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <__fprintf_chk@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #126976	; 0x1f000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fclose@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #126976	; 0x1f000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <fseeko64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #126976	; 0x1f000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <__overflow@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #126976	; 0x1f000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <setlocale@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #126976	; 0x1f000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #126976	; 0x1f000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #126976	; 0x1f000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <fputc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #126976	; 0x1f000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <timegm@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #126976	; 0x1f000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <futimens@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #126976	; 0x1f000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #126976	; 0x1f000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <__xstat64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #126976	; 0x1f000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <unsetenv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #126976	; 0x1f000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <fputs@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #126976	; 0x1f000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

00011394 <strncmp@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #126976	; 0x1f000
   1139c:	ldr	pc, [ip, #3456]!	; 0xd80

000113a0 <abort@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #126976	; 0x1f000
   113a8:	ldr	pc, [ip, #3448]!	; 0xd78

000113ac <close@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #126976	; 0x1f000
   113b4:	ldr	pc, [ip, #3440]!	; 0xd70

000113b8 <__lxstat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #126976	; 0x1f000
   113c0:	ldr	pc, [ip, #3432]!	; 0xd68

000113c4 <__snprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #126976	; 0x1f000
   113cc:	ldr	pc, [ip, #3424]!	; 0xd60

000113d0 <__assert_fail@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #126976	; 0x1f000
   113d8:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113e0 <.text>:
   113e0:	mov	fp, #0
   113e4:	mov	lr, #0
   113e8:	pop	{r1}		; (ldr r1, [sp], #4)
   113ec:	mov	r2, sp
   113f0:	push	{r2}		; (str r2, [sp, #-4]!)
   113f4:	push	{r0}		; (str r0, [sp, #-4]!)
   113f8:	ldr	ip, [pc, #16]	; 11410 <__assert_fail@plt+0x40>
   113fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11400:	ldr	r0, [pc, #12]	; 11414 <__assert_fail@plt+0x44>
   11404:	ldr	r3, [pc, #12]	; 11418 <__assert_fail@plt+0x48>
   11408:	bl	111f0 <__libc_start_main@plt>
   1140c:	bl	113a0 <abort@plt>
   11410:	andeq	sp, r1, ip, asr #31
   11414:	andeq	r1, r1, r4, ror #17
   11418:	andeq	sp, r1, ip, ror #30
   1141c:	ldr	r3, [pc, #20]	; 11438 <__assert_fail@plt+0x68>
   11420:	ldr	r2, [pc, #20]	; 1143c <__assert_fail@plt+0x6c>
   11424:	add	r3, pc, r3
   11428:	ldr	r2, [r3, r2]
   1142c:	cmp	r2, #0
   11430:	bxeq	lr
   11434:	b	11244 <__gmon_start__@plt>
   11438:	ldrdeq	pc, [r1], -r4
   1143c:	andeq	r0, r0, r4, lsr r1
   11440:	ldr	r3, [pc, #28]	; 11464 <__assert_fail@plt+0x94>
   11444:	ldr	r0, [pc, #28]	; 11468 <__assert_fail@plt+0x98>
   11448:	sub	r3, r3, r0
   1144c:	cmp	r3, #6
   11450:	bxls	lr
   11454:	ldr	r3, [pc, #16]	; 1146c <__assert_fail@plt+0x9c>
   11458:	cmp	r3, #0
   1145c:	bxeq	lr
   11460:	bx	r3
   11464:	andeq	r1, r3, pc, lsl #3
   11468:	andeq	r1, r3, ip, lsl #3
   1146c:	andeq	r0, r0, r0
   11470:	ldr	r1, [pc, #36]	; 1149c <__assert_fail@plt+0xcc>
   11474:	ldr	r0, [pc, #36]	; 114a0 <__assert_fail@plt+0xd0>
   11478:	sub	r1, r1, r0
   1147c:	asr	r1, r1, #2
   11480:	add	r1, r1, r1, lsr #31
   11484:	asrs	r1, r1, #1
   11488:	bxeq	lr
   1148c:	ldr	r3, [pc, #16]	; 114a4 <__assert_fail@plt+0xd4>
   11490:	cmp	r3, #0
   11494:	bxeq	lr
   11498:	bx	r3
   1149c:	andeq	r1, r3, ip, lsl #3
   114a0:	andeq	r1, r3, ip, lsl #3
   114a4:	andeq	r0, r0, r0
   114a8:	push	{r4, lr}
   114ac:	ldr	r4, [pc, #24]	; 114cc <__assert_fail@plt+0xfc>
   114b0:	ldrb	r3, [r4]
   114b4:	cmp	r3, #0
   114b8:	popne	{r4, pc}
   114bc:	bl	11440 <__assert_fail@plt+0x70>
   114c0:	mov	r3, #1
   114c4:	strb	r3, [r4]
   114c8:	pop	{r4, pc}
   114cc:	andeq	r1, r3, ip, lsr #3
   114d0:	ldr	r0, [pc, #40]	; 11500 <__assert_fail@plt+0x130>
   114d4:	ldr	r3, [r0]
   114d8:	cmp	r3, #0
   114dc:	bne	114e4 <__assert_fail@plt+0x114>
   114e0:	b	11470 <__assert_fail@plt+0xa0>
   114e4:	ldr	r3, [pc, #24]	; 11504 <__assert_fail@plt+0x134>
   114e8:	cmp	r3, #0
   114ec:	beq	114e0 <__assert_fail@plt+0x110>
   114f0:	push	{r4, lr}
   114f4:	blx	r3
   114f8:	pop	{r4, lr}
   114fc:	b	11470 <__assert_fail@plt+0xa0>
   11500:	andeq	r0, r3, r4, lsl pc
   11504:	andeq	r0, r0, r0
   11508:	push	{r4, r5, r6, lr}
   1150c:	mov	r4, r1
   11510:	bl	189bc <__assert_fail@plt+0x75ec>
   11514:	cmp	r0, #0
   11518:	popne	{r4, r5, r6, pc}
   1151c:	mov	r2, #5
   11520:	ldr	r1, [pc, #32]	; 11548 <__assert_fail@plt+0x178>
   11524:	bl	11130 <dcgettext@plt>
   11528:	mov	r5, r0
   1152c:	mov	r0, r4
   11530:	bl	1a98c <__assert_fail@plt+0x95bc>
   11534:	mov	r3, r0
   11538:	mov	r2, r5
   1153c:	mov	r1, #0
   11540:	mov	r0, #1
   11544:	bl	111c0 <error@plt>
   11548:	andeq	lr, r1, r0, ror #1
   1154c:	push	{lr}		; (str lr, [sp, #-4]!)
   11550:	sub	sp, sp, #60	; 0x3c
   11554:	subs	r6, r0, #0
   11558:	beq	11594 <__assert_fail@plt+0x1c4>
   1155c:	ldr	r3, [pc, #800]	; 11884 <__assert_fail@plt+0x4b4>
   11560:	ldr	r4, [r3]
   11564:	mov	r2, #5
   11568:	ldr	r1, [pc, #792]	; 11888 <__assert_fail@plt+0x4b8>
   1156c:	mov	r0, #0
   11570:	bl	11130 <dcgettext@plt>
   11574:	ldr	r3, [pc, #784]	; 1188c <__assert_fail@plt+0x4bc>
   11578:	ldr	r3, [r3]
   1157c:	mov	r2, r0
   11580:	mov	r1, #1
   11584:	mov	r0, r4
   11588:	bl	112ec <__fprintf_chk@plt>
   1158c:	mov	r0, r6
   11590:	bl	11268 <exit@plt>
   11594:	mov	r2, #5
   11598:	ldr	r1, [pc, #752]	; 11890 <__assert_fail@plt+0x4c0>
   1159c:	mov	r0, #0
   115a0:	bl	11130 <dcgettext@plt>
   115a4:	ldr	r3, [pc, #736]	; 1188c <__assert_fail@plt+0x4bc>
   115a8:	ldr	r2, [r3]
   115ac:	mov	r1, r0
   115b0:	mov	r0, #1
   115b4:	bl	112d4 <__printf_chk@plt>
   115b8:	mov	r2, #5
   115bc:	ldr	r1, [pc, #720]	; 11894 <__assert_fail@plt+0x4c4>
   115c0:	mov	r0, #0
   115c4:	bl	11130 <dcgettext@plt>
   115c8:	ldr	r4, [pc, #712]	; 11898 <__assert_fail@plt+0x4c8>
   115cc:	ldr	r1, [r4]
   115d0:	bl	11070 <fputs_unlocked@plt>
   115d4:	mov	r2, #5
   115d8:	ldr	r1, [pc, #700]	; 1189c <__assert_fail@plt+0x4cc>
   115dc:	mov	r0, #0
   115e0:	bl	11130 <dcgettext@plt>
   115e4:	ldr	r1, [r4]
   115e8:	bl	11070 <fputs_unlocked@plt>
   115ec:	mov	r2, #5
   115f0:	ldr	r1, [pc, #680]	; 118a0 <__assert_fail@plt+0x4d0>
   115f4:	mov	r0, #0
   115f8:	bl	11130 <dcgettext@plt>
   115fc:	ldr	r1, [r4]
   11600:	bl	11070 <fputs_unlocked@plt>
   11604:	mov	r2, #5
   11608:	ldr	r1, [pc, #660]	; 118a4 <__assert_fail@plt+0x4d4>
   1160c:	mov	r0, #0
   11610:	bl	11130 <dcgettext@plt>
   11614:	ldr	r1, [r4]
   11618:	bl	11070 <fputs_unlocked@plt>
   1161c:	mov	r2, #5
   11620:	ldr	r1, [pc, #640]	; 118a8 <__assert_fail@plt+0x4d8>
   11624:	mov	r0, #0
   11628:	bl	11130 <dcgettext@plt>
   1162c:	ldr	r1, [r4]
   11630:	bl	11070 <fputs_unlocked@plt>
   11634:	mov	r2, #5
   11638:	ldr	r1, [pc, #620]	; 118ac <__assert_fail@plt+0x4dc>
   1163c:	mov	r0, #0
   11640:	bl	11130 <dcgettext@plt>
   11644:	ldr	r1, [r4]
   11648:	bl	11070 <fputs_unlocked@plt>
   1164c:	mov	r2, #5
   11650:	ldr	r1, [pc, #600]	; 118b0 <__assert_fail@plt+0x4e0>
   11654:	mov	r0, #0
   11658:	bl	11130 <dcgettext@plt>
   1165c:	ldr	r1, [r4]
   11660:	bl	11070 <fputs_unlocked@plt>
   11664:	mov	r2, #5
   11668:	ldr	r1, [pc, #580]	; 118b4 <__assert_fail@plt+0x4e4>
   1166c:	mov	r0, #0
   11670:	bl	11130 <dcgettext@plt>
   11674:	ldr	r1, [r4]
   11678:	bl	11070 <fputs_unlocked@plt>
   1167c:	mov	ip, sp
   11680:	ldr	lr, [pc, #560]	; 118b8 <__assert_fail@plt+0x4e8>
   11684:	ldm	lr!, {r0, r1, r2, r3}
   11688:	stmia	ip!, {r0, r1, r2, r3}
   1168c:	ldm	lr!, {r0, r1, r2, r3}
   11690:	stmia	ip!, {r0, r1, r2, r3}
   11694:	ldm	lr!, {r0, r1, r2, r3}
   11698:	stmia	ip!, {r0, r1, r2, r3}
   1169c:	ldm	lr, {r0, r1}
   116a0:	stm	ip, {r0, r1}
   116a4:	ldr	r1, [sp]
   116a8:	cmp	r1, #0
   116ac:	moveq	r4, sp
   116b0:	beq	116d8 <__assert_fail@plt+0x308>
   116b4:	mov	r4, sp
   116b8:	ldr	r5, [pc, #508]	; 118bc <__assert_fail@plt+0x4ec>
   116bc:	mov	r0, r5
   116c0:	bl	110a0 <strcmp@plt>
   116c4:	cmp	r0, #0
   116c8:	beq	116d8 <__assert_fail@plt+0x308>
   116cc:	ldr	r1, [r4, #8]!
   116d0:	cmp	r1, #0
   116d4:	bne	116bc <__assert_fail@plt+0x2ec>
   116d8:	ldr	r4, [r4, #4]
   116dc:	cmp	r4, #0
   116e0:	beq	117f4 <__assert_fail@plt+0x424>
   116e4:	mov	r2, #5
   116e8:	ldr	r1, [pc, #464]	; 118c0 <__assert_fail@plt+0x4f0>
   116ec:	mov	r0, #0
   116f0:	bl	11130 <dcgettext@plt>
   116f4:	ldr	r3, [pc, #456]	; 118c4 <__assert_fail@plt+0x4f4>
   116f8:	ldr	r2, [pc, #456]	; 118c8 <__assert_fail@plt+0x4f8>
   116fc:	mov	r1, r0
   11700:	mov	r0, #1
   11704:	bl	112d4 <__printf_chk@plt>
   11708:	mov	r1, #0
   1170c:	mov	r0, #5
   11710:	bl	1131c <setlocale@plt>
   11714:	cmp	r0, #0
   11718:	beq	11730 <__assert_fail@plt+0x360>
   1171c:	mov	r2, #3
   11720:	ldr	r1, [pc, #420]	; 118cc <__assert_fail@plt+0x4fc>
   11724:	bl	11394 <strncmp@plt>
   11728:	cmp	r0, #0
   1172c:	bne	11790 <__assert_fail@plt+0x3c0>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #404]	; 118d0 <__assert_fail@plt+0x500>
   11738:	mov	r0, #0
   1173c:	bl	11130 <dcgettext@plt>
   11740:	ldr	r5, [pc, #372]	; 118bc <__assert_fail@plt+0x4ec>
   11744:	mov	r3, r5
   11748:	ldr	r2, [pc, #372]	; 118c4 <__assert_fail@plt+0x4f4>
   1174c:	mov	r1, r0
   11750:	mov	r0, #1
   11754:	bl	112d4 <__printf_chk@plt>
   11758:	mov	r2, #5
   1175c:	ldr	r1, [pc, #368]	; 118d4 <__assert_fail@plt+0x504>
   11760:	mov	r0, #0
   11764:	bl	11130 <dcgettext@plt>
   11768:	mov	r1, r0
   1176c:	ldr	r2, [pc, #356]	; 118d8 <__assert_fail@plt+0x508>
   11770:	ldr	r3, [pc, #356]	; 118dc <__assert_fail@plt+0x50c>
   11774:	cmp	r4, r5
   11778:	movne	r3, r2
   1177c:	mov	r2, r4
   11780:	mov	r0, #1
   11784:	bl	112d4 <__printf_chk@plt>
   11788:	b	1158c <__assert_fail@plt+0x1bc>
   1178c:	ldr	r4, [pc, #296]	; 118bc <__assert_fail@plt+0x4ec>
   11790:	mov	r2, #5
   11794:	ldr	r1, [pc, #324]	; 118e0 <__assert_fail@plt+0x510>
   11798:	mov	r0, #0
   1179c:	bl	11130 <dcgettext@plt>
   117a0:	ldr	r3, [pc, #240]	; 11898 <__assert_fail@plt+0x4c8>
   117a4:	ldr	r1, [r3]
   117a8:	bl	11070 <fputs_unlocked@plt>
   117ac:	b	11730 <__assert_fail@plt+0x360>
   117b0:	mov	r2, #5
   117b4:	ldr	r1, [pc, #276]	; 118d0 <__assert_fail@plt+0x500>
   117b8:	mov	r0, #0
   117bc:	bl	11130 <dcgettext@plt>
   117c0:	ldr	r4, [pc, #244]	; 118bc <__assert_fail@plt+0x4ec>
   117c4:	mov	r3, r4
   117c8:	ldr	r2, [pc, #244]	; 118c4 <__assert_fail@plt+0x4f4>
   117cc:	mov	r1, r0
   117d0:	mov	r0, #1
   117d4:	bl	112d4 <__printf_chk@plt>
   117d8:	mov	r2, #5
   117dc:	ldr	r1, [pc, #240]	; 118d4 <__assert_fail@plt+0x504>
   117e0:	mov	r0, #0
   117e4:	bl	11130 <dcgettext@plt>
   117e8:	mov	r1, r0
   117ec:	ldr	r3, [pc, #232]	; 118dc <__assert_fail@plt+0x50c>
   117f0:	b	1177c <__assert_fail@plt+0x3ac>
   117f4:	mov	r2, #5
   117f8:	ldr	r1, [pc, #192]	; 118c0 <__assert_fail@plt+0x4f0>
   117fc:	mov	r0, #0
   11800:	bl	11130 <dcgettext@plt>
   11804:	ldr	r3, [pc, #184]	; 118c4 <__assert_fail@plt+0x4f4>
   11808:	ldr	r2, [pc, #184]	; 118c8 <__assert_fail@plt+0x4f8>
   1180c:	mov	r1, r0
   11810:	mov	r0, #1
   11814:	bl	112d4 <__printf_chk@plt>
   11818:	mov	r1, #0
   1181c:	mov	r0, #5
   11820:	bl	1131c <setlocale@plt>
   11824:	cmp	r0, #0
   11828:	beq	117b0 <__assert_fail@plt+0x3e0>
   1182c:	mov	r2, #3
   11830:	ldr	r1, [pc, #148]	; 118cc <__assert_fail@plt+0x4fc>
   11834:	bl	11394 <strncmp@plt>
   11838:	cmp	r0, #0
   1183c:	bne	1178c <__assert_fail@plt+0x3bc>
   11840:	mov	r2, #5
   11844:	ldr	r1, [pc, #132]	; 118d0 <__assert_fail@plt+0x500>
   11848:	mov	r0, #0
   1184c:	bl	11130 <dcgettext@plt>
   11850:	ldr	r4, [pc, #100]	; 118bc <__assert_fail@plt+0x4ec>
   11854:	mov	r3, r4
   11858:	ldr	r2, [pc, #100]	; 118c4 <__assert_fail@plt+0x4f4>
   1185c:	mov	r1, r0
   11860:	mov	r0, #1
   11864:	bl	112d4 <__printf_chk@plt>
   11868:	mov	r2, #5
   1186c:	ldr	r1, [pc, #96]	; 118d4 <__assert_fail@plt+0x504>
   11870:	mov	r0, #0
   11874:	bl	11130 <dcgettext@plt>
   11878:	mov	r1, r0
   1187c:	ldr	r3, [pc, #88]	; 118dc <__assert_fail@plt+0x50c>
   11880:	b	1177c <__assert_fail@plt+0x3ac>
   11884:	andeq	r1, r3, r0, lsr #3
   11888:	andeq	lr, r1, r0, lsl #2
   1188c:	ldrdeq	r1, [r3], -r8
   11890:	andeq	lr, r1, r8, lsr #2
   11894:	andeq	lr, r1, r8, asr #2
   11898:	andeq	r1, r3, r4, lsr #3
   1189c:	andeq	lr, r1, ip, ror #4
   118a0:			; <UNDEFINED> instruction: 0x0001e2b8
   118a4:	andeq	lr, r1, ip, lsl #7
   118a8:	muleq	r1, r4, r4
   118ac:	andeq	lr, r1, ip, ror #11
   118b0:	andeq	lr, r1, ip, lsl r6
   118b4:	andeq	lr, r1, r4, asr r6
   118b8:	strdeq	sp, [r1], -r4
   118bc:	strdeq	lr, [r1], -r8
   118c0:	muleq	r1, ip, r6
   118c4:			; <UNDEFINED> instruction: 0x0001e6b4
   118c8:	ldrdeq	lr, [r1], -ip
   118cc:	andeq	lr, r1, ip, ror #13
   118d0:	andeq	lr, r1, r8, lsr r7
   118d4:	andeq	lr, r1, r4, asr r7
   118d8:	andeq	r0, r2, ip, asr #3
   118dc:	andeq	lr, r1, r8, lsr #18
   118e0:	strdeq	lr, [r1], -r0
   118e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118e8:	sub	sp, sp, #164	; 0xa4
   118ec:	str	r0, [sp, #28]
   118f0:	mov	fp, r1
   118f4:	ldr	r0, [r1]
   118f8:	bl	18e3c <__assert_fail@plt+0x7a6c>
   118fc:	ldr	r1, [pc, #2224]	; 121b4 <__assert_fail@plt+0xde4>
   11900:	mov	r0, #6
   11904:	bl	1131c <setlocale@plt>
   11908:	ldr	r4, [pc, #2216]	; 121b8 <__assert_fail@plt+0xde8>
   1190c:	ldr	r1, [pc, #2216]	; 121bc <__assert_fail@plt+0xdec>
   11910:	mov	r0, r4
   11914:	bl	11364 <bindtextdomain@plt>
   11918:	mov	r0, r4
   1191c:	bl	11160 <textdomain@plt>
   11920:	ldr	r0, [pc, #2200]	; 121c0 <__assert_fail@plt+0xdf0>
   11924:	bl	1dfd0 <__assert_fail@plt+0xcc00>
   11928:	ldr	r3, [pc, #2196]	; 121c4 <__assert_fail@plt+0xdf4>
   1192c:	mov	r5, #0
   11930:	str	r5, [r3, #16]
   11934:	strb	r5, [r3, #20]
   11938:	strb	r5, [r3, #21]
   1193c:	str	r5, [sp, #36]	; 0x24
   11940:	str	r5, [sp, #32]
   11944:	ldr	r6, [pc, #2172]	; 121c8 <__assert_fail@plt+0xdf8>
   11948:	ldr	r8, [pc, #2172]	; 121cc <__assert_fail@plt+0xdfc>
   1194c:	mov	r7, r3
   11950:	ldr	r9, [pc, #2168]	; 121d0 <__assert_fail@plt+0xe00>
   11954:	add	sl, r3, #8
   11958:	add	r5, r6, #56	; 0x38
   1195c:	mov	r3, #0
   11960:	str	r3, [sp]
   11964:	add	r3, r6, #100	; 0x64
   11968:	mov	r2, r8
   1196c:	mov	r1, fp
   11970:	ldr	r0, [sp, #28]
   11974:	bl	11250 <getopt_long@plt>
   11978:	cmn	r0, #1
   1197c:	beq	11b48 <__assert_fail@plt+0x778>
   11980:	cmp	r0, #102	; 0x66
   11984:	beq	1195c <__assert_fail@plt+0x58c>
   11988:	bgt	119cc <__assert_fail@plt+0x5fc>
   1198c:	cmp	r0, #97	; 0x61
   11990:	beq	11a50 <__assert_fail@plt+0x680>
   11994:	bgt	119b0 <__assert_fail@plt+0x5e0>
   11998:	cmn	r0, #3
   1199c:	beq	11aec <__assert_fail@plt+0x71c>
   119a0:	cmn	r0, #2
   119a4:	bne	11b40 <__assert_fail@plt+0x770>
   119a8:	mov	r0, #0
   119ac:	bl	1154c <__assert_fail@plt+0x17c>
   119b0:	cmp	r0, #99	; 0x63
   119b4:	beq	11a60 <__assert_fail@plt+0x690>
   119b8:	cmp	r0, #100	; 0x64
   119bc:	bne	11b40 <__assert_fail@plt+0x770>
   119c0:	ldr	r3, [r9]
   119c4:	str	r3, [sp, #36]	; 0x24
   119c8:	b	1195c <__assert_fail@plt+0x58c>
   119cc:	cmp	r0, #114	; 0x72
   119d0:	beq	11a78 <__assert_fail@plt+0x6a8>
   119d4:	bgt	119f8 <__assert_fail@plt+0x628>
   119d8:	cmp	r0, #104	; 0x68
   119dc:	beq	11a6c <__assert_fail@plt+0x69c>
   119e0:	cmp	r0, #109	; 0x6d
   119e4:	bne	11b40 <__assert_fail@plt+0x770>
   119e8:	ldr	r3, [r7, #16]
   119ec:	orr	r3, r3, #2
   119f0:	str	r3, [r7, #16]
   119f4:	b	1195c <__assert_fail@plt+0x58c>
   119f8:	cmp	r0, #116	; 0x74
   119fc:	beq	11a8c <__assert_fail@plt+0x6bc>
   11a00:	cmp	r0, #256	; 0x100
   11a04:	bne	11b40 <__assert_fail@plt+0x770>
   11a08:	mov	r3, #1
   11a0c:	str	r3, [sp, #8]
   11a10:	ldr	r3, [pc, #1980]	; 121d4 <__assert_fail@plt+0xe04>
   11a14:	ldr	r3, [r3]
   11a18:	str	r3, [sp, #4]
   11a1c:	mov	r3, #4
   11a20:	str	r3, [sp]
   11a24:	mov	r3, r5
   11a28:	add	r2, r6, #76	; 0x4c
   11a2c:	ldr	r1, [r9]
   11a30:	ldr	r0, [pc, #1952]	; 121d8 <__assert_fail@plt+0xe08>
   11a34:	bl	12504 <__assert_fail@plt+0x1134>
   11a38:	add	r0, r6, r0, lsl #2
   11a3c:	ldr	r3, [r0, #56]	; 0x38
   11a40:	ldr	r2, [r7, #16]
   11a44:	orr	r3, r3, r2
   11a48:	str	r3, [r7, #16]
   11a4c:	b	1195c <__assert_fail@plt+0x58c>
   11a50:	ldr	r3, [r7, #16]
   11a54:	orr	r3, r3, #1
   11a58:	str	r3, [r7, #16]
   11a5c:	b	1195c <__assert_fail@plt+0x58c>
   11a60:	mov	r3, #1
   11a64:	strb	r3, [r7, #21]
   11a68:	b	1195c <__assert_fail@plt+0x58c>
   11a6c:	mov	r3, #1
   11a70:	strb	r3, [r7, #22]
   11a74:	b	1195c <__assert_fail@plt+0x58c>
   11a78:	mov	r3, #1
   11a7c:	strb	r3, [r7, #20]
   11a80:	ldr	r3, [r9]
   11a84:	str	r3, [r7, #24]
   11a88:	b	1195c <__assert_fail@plt+0x58c>
   11a8c:	mov	r2, #6
   11a90:	ldr	r1, [r9]
   11a94:	mov	r0, r7
   11a98:	bl	18aec <__assert_fail@plt+0x771c>
   11a9c:	subs	r3, r0, #0
   11aa0:	str	r3, [sp, #32]
   11aa4:	beq	11abc <__assert_fail@plt+0x6ec>
   11aa8:	mov	r3, #0
   11aac:	str	r3, [r7, #4]
   11ab0:	ldm	r7, {r0, r1}
   11ab4:	stm	sl, {r0, r1}
   11ab8:	b	1195c <__assert_fail@plt+0x58c>
   11abc:	mov	r2, #5
   11ac0:	ldr	r1, [pc, #1812]	; 121dc <__assert_fail@plt+0xe0c>
   11ac4:	bl	11130 <dcgettext@plt>
   11ac8:	mov	r4, r0
   11acc:	ldr	r3, [pc, #1788]	; 121d0 <__assert_fail@plt+0xe00>
   11ad0:	ldr	r0, [r3]
   11ad4:	bl	1a98c <__assert_fail@plt+0x95bc>
   11ad8:	mov	r3, r0
   11adc:	mov	r2, r4
   11ae0:	mov	r1, #0
   11ae4:	mov	r0, #1
   11ae8:	bl	111c0 <error@plt>
   11aec:	mov	r4, #0
   11af0:	str	r4, [sp, #20]
   11af4:	ldr	r3, [pc, #1764]	; 121e0 <__assert_fail@plt+0xe10>
   11af8:	str	r3, [sp, #16]
   11afc:	ldr	r3, [pc, #1760]	; 121e4 <__assert_fail@plt+0xe14>
   11b00:	str	r3, [sp, #12]
   11b04:	ldr	r3, [pc, #1756]	; 121e8 <__assert_fail@plt+0xe18>
   11b08:	str	r3, [sp, #8]
   11b0c:	ldr	r3, [pc, #1752]	; 121ec <__assert_fail@plt+0xe1c>
   11b10:	str	r3, [sp, #4]
   11b14:	ldr	r3, [pc, #1748]	; 121f0 <__assert_fail@plt+0xe20>
   11b18:	str	r3, [sp]
   11b1c:	ldr	r3, [pc, #1744]	; 121f4 <__assert_fail@plt+0xe24>
   11b20:	ldr	r3, [r3]
   11b24:	ldr	r2, [pc, #1740]	; 121f8 <__assert_fail@plt+0xe28>
   11b28:	ldr	r1, [pc, #1740]	; 121fc <__assert_fail@plt+0xe2c>
   11b2c:	ldr	r0, [pc, #1740]	; 12200 <__assert_fail@plt+0xe30>
   11b30:	ldr	r0, [r0]
   11b34:	bl	1b32c <__assert_fail@plt+0x9f5c>
   11b38:	mov	r0, r4
   11b3c:	bl	11268 <exit@plt>
   11b40:	mov	r0, #1
   11b44:	bl	1154c <__assert_fail@plt+0x17c>
   11b48:	mov	r4, r0
   11b4c:	ldr	r3, [pc, #1648]	; 121c4 <__assert_fail@plt+0xdf4>
   11b50:	ldr	r3, [r3, #16]
   11b54:	cmp	r3, #0
   11b58:	moveq	r2, #3
   11b5c:	ldreq	r3, [pc, #1632]	; 121c4 <__assert_fail@plt+0xdf4>
   11b60:	streq	r2, [r3, #16]
   11b64:	ldr	r3, [sp, #32]
   11b68:	cmp	r3, #0
   11b6c:	beq	11b8c <__assert_fail@plt+0x7bc>
   11b70:	ldr	r3, [pc, #1612]	; 121c4 <__assert_fail@plt+0xdf4>
   11b74:	ldrb	r3, [r3, #20]
   11b78:	ldr	r2, [sp, #36]	; 0x24
   11b7c:	cmp	r2, #0
   11b80:	orrne	r3, r3, #1
   11b84:	cmp	r3, #0
   11b88:	bne	11c34 <__assert_fail@plt+0x864>
   11b8c:	ldr	r3, [pc, #1584]	; 121c4 <__assert_fail@plt+0xdf4>
   11b90:	ldrb	r3, [r3, #20]
   11b94:	cmp	r3, #0
   11b98:	beq	11cd0 <__assert_fail@plt+0x900>
   11b9c:	ldr	r3, [pc, #1568]	; 121c4 <__assert_fail@plt+0xdf4>
   11ba0:	ldrb	r3, [r3, #22]
   11ba4:	cmp	r3, #0
   11ba8:	beq	11c5c <__assert_fail@plt+0x88c>
   11bac:	add	r2, sp, #56	; 0x38
   11bb0:	ldr	r3, [pc, #1548]	; 121c4 <__assert_fail@plt+0xdf4>
   11bb4:	ldr	r1, [r3, #24]
   11bb8:	mov	r0, #3
   11bbc:	bl	113b8 <__lxstat64@plt>
   11bc0:	adds	r0, r0, #0
   11bc4:	movne	r0, #1
   11bc8:	cmp	r0, #0
   11bcc:	bne	11c7c <__assert_fail@plt+0x8ac>
   11bd0:	ldr	r3, [pc, #1516]	; 121c4 <__assert_fail@plt+0xdf4>
   11bd4:	ldr	r2, [sp, #128]	; 0x80
   11bd8:	str	r2, [r3]
   11bdc:	ldr	r2, [sp, #132]	; 0x84
   11be0:	str	r2, [r3, #4]
   11be4:	ldr	r2, [sp, #136]	; 0x88
   11be8:	str	r2, [r3, #8]
   11bec:	ldr	r2, [sp, #140]	; 0x8c
   11bf0:	str	r2, [r3, #12]
   11bf4:	ldr	r3, [sp, #36]	; 0x24
   11bf8:	cmp	r3, #0
   11bfc:	beq	11d6c <__assert_fail@plt+0x99c>
   11c00:	ldr	r3, [pc, #1468]	; 121c4 <__assert_fail@plt+0xdf4>
   11c04:	ldr	r3, [r3, #16]
   11c08:	tst	r3, #1
   11c0c:	bne	11cbc <__assert_fail@plt+0x8ec>
   11c10:	ldr	r3, [pc, #1452]	; 121c4 <__assert_fail@plt+0xdf4>
   11c14:	ldr	r3, [r3, #16]
   11c18:	tst	r3, #2
   11c1c:	beq	11d6c <__assert_fail@plt+0x99c>
   11c20:	ldr	r0, [pc, #1500]	; 12204 <__assert_fail@plt+0xe34>
   11c24:	mov	r2, r0
   11c28:	ldr	r1, [sp, #36]	; 0x24
   11c2c:	bl	11508 <__assert_fail@plt+0x138>
   11c30:	b	11d6c <__assert_fail@plt+0x99c>
   11c34:	mov	r2, #5
   11c38:	ldr	r1, [pc, #1480]	; 12208 <__assert_fail@plt+0xe38>
   11c3c:	mov	r0, #0
   11c40:	bl	11130 <dcgettext@plt>
   11c44:	mov	r2, r0
   11c48:	mov	r1, #0
   11c4c:	mov	r0, r1
   11c50:	bl	111c0 <error@plt>
   11c54:	mov	r0, #1
   11c58:	bl	1154c <__assert_fail@plt+0x17c>
   11c5c:	add	r2, sp, #56	; 0x38
   11c60:	ldr	r3, [pc, #1372]	; 121c4 <__assert_fail@plt+0xdf4>
   11c64:	ldr	r1, [r3, #24]
   11c68:	mov	r0, #3
   11c6c:	bl	11370 <__xstat64@plt>
   11c70:	adds	r0, r0, #0
   11c74:	movne	r0, #1
   11c78:	b	11bc8 <__assert_fail@plt+0x7f8>
   11c7c:	bl	11298 <__errno_location@plt>
   11c80:	ldr	r4, [r0]
   11c84:	mov	r2, #5
   11c88:	ldr	r1, [pc, #1404]	; 1220c <__assert_fail@plt+0xe3c>
   11c8c:	mov	r0, #0
   11c90:	bl	11130 <dcgettext@plt>
   11c94:	mov	r5, r0
   11c98:	ldr	r3, [pc, #1316]	; 121c4 <__assert_fail@plt+0xdf4>
   11c9c:	ldr	r1, [r3, #24]
   11ca0:	mov	r0, #4
   11ca4:	bl	1a758 <__assert_fail@plt+0x9388>
   11ca8:	mov	r3, r0
   11cac:	mov	r2, r5
   11cb0:	mov	r1, r4
   11cb4:	mov	r0, #1
   11cb8:	bl	111c0 <error@plt>
   11cbc:	ldr	r0, [pc, #1280]	; 121c4 <__assert_fail@plt+0xdf4>
   11cc0:	mov	r2, r0
   11cc4:	ldr	r1, [sp, #36]	; 0x24
   11cc8:	bl	11508 <__assert_fail@plt+0x138>
   11ccc:	b	11c10 <__assert_fail@plt+0x840>
   11cd0:	ldr	r6, [sp, #36]	; 0x24
   11cd4:	cmp	r6, #0
   11cd8:	beq	11d18 <__assert_fail@plt+0x948>
   11cdc:	add	r0, sp, #40	; 0x28
   11ce0:	bl	127dc <__assert_fail@plt+0x140c>
   11ce4:	ldr	r5, [pc, #1240]	; 121c4 <__assert_fail@plt+0xdf4>
   11ce8:	add	r2, sp, #40	; 0x28
   11cec:	mov	r1, r6
   11cf0:	mov	r0, r5
   11cf4:	bl	11508 <__assert_fail@plt+0x138>
   11cf8:	add	r3, r5, #8
   11cfc:	ldm	r5, {r0, r1}
   11d00:	stm	r3, {r0, r1}
   11d04:	ldr	r3, [r5, #16]
   11d08:	cmp	r3, #3
   11d0c:	movne	r3, #1
   11d10:	strne	r3, [sp, #32]
   11d14:	beq	11d9c <__assert_fail@plt+0x9cc>
   11d18:	ldr	r3, [sp, #32]
   11d1c:	cmp	r3, #0
   11d20:	bne	11d6c <__assert_fail@plt+0x99c>
   11d24:	ldr	r3, [pc, #1252]	; 12210 <__assert_fail@plt+0xe40>
   11d28:	ldr	r3, [r3]
   11d2c:	ldr	r2, [sp, #28]
   11d30:	sub	r3, r2, r3
   11d34:	cmp	r3, #1
   11d38:	ble	11d4c <__assert_fail@plt+0x97c>
   11d3c:	bl	18dd8 <__assert_fail@plt+0x7a08>
   11d40:	ldr	r3, [pc, #1228]	; 12214 <__assert_fail@plt+0xe44>
   11d44:	cmp	r0, r3
   11d48:	ble	11e18 <__assert_fail@plt+0xa48>
   11d4c:	ldr	r3, [pc, #1136]	; 121c4 <__assert_fail@plt+0xdf4>
   11d50:	ldr	r3, [r3, #16]
   11d54:	cmp	r3, #3
   11d58:	beq	11ef0 <__assert_fail@plt+0xb20>
   11d5c:	ldr	r3, [pc, #1120]	; 121c4 <__assert_fail@plt+0xdf4>
   11d60:	mvn	r2, #-1073741824	; 0xc0000000
   11d64:	str	r2, [r3, #4]
   11d68:	str	r2, [r3, #12]
   11d6c:	ldr	r3, [pc, #1180]	; 12210 <__assert_fail@plt+0xe40>
   11d70:	ldr	r3, [r3]
   11d74:	ldr	r2, [sp, #28]
   11d78:	cmp	r2, r3
   11d7c:	beq	11f00 <__assert_fail@plt+0xb30>
   11d80:	movle	sl, #1
   11d84:	ble	121a8 <__assert_fail@plt+0xdd8>
   11d88:	mov	sl, #1
   11d8c:	ldr	r5, [pc, #1072]	; 121c4 <__assert_fail@plt+0xdf4>
   11d90:	str	r4, [sp, #32]
   11d94:	ldr	r9, [sp, #28]
   11d98:	b	12070 <__assert_fail@plt+0xca0>
   11d9c:	mov	r3, r0
   11da0:	ldr	r2, [sp, #40]	; 0x28
   11da4:	cmp	r0, r2
   11da8:	movne	r3, #1
   11dac:	strne	r3, [sp, #32]
   11db0:	bne	11d18 <__assert_fail@plt+0x948>
   11db4:	mov	r2, r1
   11db8:	ldr	r1, [sp, #44]	; 0x2c
   11dbc:	cmp	r2, r1
   11dc0:	movne	r3, #1
   11dc4:	strne	r3, [sp, #32]
   11dc8:	bne	11d18 <__assert_fail@plt+0x948>
   11dcc:	eor	r3, r3, #1
   11dd0:	str	r3, [sp, #48]	; 0x30
   11dd4:	str	r2, [sp, #52]	; 0x34
   11dd8:	add	r2, sp, #48	; 0x30
   11ddc:	ldr	r1, [sp, #36]	; 0x24
   11de0:	add	r0, sp, #56	; 0x38
   11de4:	bl	11508 <__assert_fail@plt+0x138>
   11de8:	ldr	r3, [sp, #48]	; 0x30
   11dec:	ldr	r2, [sp, #56]	; 0x38
   11df0:	cmp	r2, r3
   11df4:	movne	r3, #1
   11df8:	strne	r3, [sp, #32]
   11dfc:	bne	11d18 <__assert_fail@plt+0x948>
   11e00:	ldr	r3, [sp, #52]	; 0x34
   11e04:	ldr	r5, [sp, #60]	; 0x3c
   11e08:	subs	r3, r5, r3
   11e0c:	movne	r3, #1
   11e10:	str	r3, [sp, #32]
   11e14:	b	11d18 <__assert_fail@plt+0x948>
   11e18:	ldr	r3, [pc, #1008]	; 12210 <__assert_fail@plt+0xe40>
   11e1c:	ldr	r3, [r3]
   11e20:	mov	r2, #9
   11e24:	ldr	r1, [fp, r3, lsl #2]
   11e28:	ldr	r0, [pc, #916]	; 121c4 <__assert_fail@plt+0xdf4>
   11e2c:	bl	18aec <__assert_fail@plt+0x771c>
   11e30:	cmp	r0, #0
   11e34:	beq	11d4c <__assert_fail@plt+0x97c>
   11e38:	ldr	r3, [pc, #900]	; 121c4 <__assert_fail@plt+0xdf4>
   11e3c:	mov	r2, #0
   11e40:	str	r2, [r3, #4]
   11e44:	add	r2, r3, #8
   11e48:	ldm	r3, {r0, r1}
   11e4c:	stm	r2, {r0, r1}
   11e50:	ldr	r0, [pc, #960]	; 12218 <__assert_fail@plt+0xe48>
   11e54:	bl	111d8 <getenv@plt>
   11e58:	cmp	r0, #0
   11e5c:	beq	11e74 <__assert_fail@plt+0xaa4>
   11e60:	ldr	r2, [pc, #936]	; 12210 <__assert_fail@plt+0xe40>
   11e64:	ldr	r3, [r2]
   11e68:	add	r3, r3, #1
   11e6c:	str	r3, [r2]
   11e70:	b	11d6c <__assert_fail@plt+0x99c>
   11e74:	ldr	r0, [pc, #840]	; 121c4 <__assert_fail@plt+0xdf4>
   11e78:	bl	11220 <localtime@plt>
   11e7c:	subs	r5, r0, #0
   11e80:	beq	11e60 <__assert_fail@plt+0xa90>
   11e84:	mov	r2, #5
   11e88:	ldr	r1, [pc, #908]	; 1221c <__assert_fail@plt+0xe4c>
   11e8c:	mov	r0, #0
   11e90:	bl	11130 <dcgettext@plt>
   11e94:	ldr	r3, [pc, #884]	; 12210 <__assert_fail@plt+0xe40>
   11e98:	ldr	r2, [r3]
   11e9c:	ldr	r3, [r5]
   11ea0:	str	r3, [sp, #20]
   11ea4:	ldr	r3, [r5, #4]
   11ea8:	str	r3, [sp, #16]
   11eac:	ldr	r3, [r5, #8]
   11eb0:	str	r3, [sp, #12]
   11eb4:	ldr	r3, [r5, #12]
   11eb8:	str	r3, [sp, #8]
   11ebc:	ldr	r3, [r5, #16]
   11ec0:	add	r3, r3, #1
   11ec4:	str	r3, [sp, #4]
   11ec8:	ldr	r3, [r5, #20]
   11ecc:	add	r3, r3, #1888	; 0x760
   11ed0:	add	r3, r3, #12
   11ed4:	str	r3, [sp]
   11ed8:	ldr	r3, [fp, r2, lsl #2]
   11edc:	mov	r2, r0
   11ee0:	mov	r1, #0
   11ee4:	mov	r0, r1
   11ee8:	bl	111c0 <error@plt>
   11eec:	b	11e60 <__assert_fail@plt+0xa90>
   11ef0:	mov	r2, #1
   11ef4:	ldr	r3, [pc, #712]	; 121c4 <__assert_fail@plt+0xdf4>
   11ef8:	strb	r2, [r3, #28]
   11efc:	b	11d6c <__assert_fail@plt+0x99c>
   11f00:	mov	r2, #5
   11f04:	ldr	r1, [pc, #788]	; 12220 <__assert_fail@plt+0xe50>
   11f08:	mov	r0, #0
   11f0c:	bl	11130 <dcgettext@plt>
   11f10:	mov	r2, r0
   11f14:	mov	r1, #0
   11f18:	mov	r0, r1
   11f1c:	bl	111c0 <error@plt>
   11f20:	mov	r0, #1
   11f24:	bl	1154c <__assert_fail@plt+0x17c>
   11f28:	ldr	r3, [pc, #756]	; 12224 <__assert_fail@plt+0xe54>
   11f2c:	ldr	r2, [pc, #756]	; 12228 <__assert_fail@plt+0xe58>
   11f30:	mov	r1, r6
   11f34:	mov	r0, #0
   11f38:	bl	126ec <__assert_fail@plt+0x131c>
   11f3c:	subs	r4, r0, #0
   11f40:	movge	r7, #0
   11f44:	bge	120b4 <__assert_fail@plt+0xce4>
   11f48:	bl	11298 <__errno_location@plt>
   11f4c:	ldr	r7, [r0]
   11f50:	b	120b4 <__assert_fail@plt+0xce4>
   11f54:	ldr	r3, [pc, #720]	; 1222c <__assert_fail@plt+0xe5c>
   11f58:	mov	r2, #147	; 0x93
   11f5c:	ldr	r1, [pc, #716]	; 12230 <__assert_fail@plt+0xe60>
   11f60:	ldr	r0, [pc, #716]	; 12234 <__assert_fail@plt+0xe64>
   11f64:	bl	113d0 <__assert_fail@plt>
   11f68:	mov	r0, #0
   11f6c:	bl	113ac <close@plt>
   11f70:	cmp	r0, #0
   11f74:	beq	1214c <__assert_fail@plt+0xd7c>
   11f78:	bl	11298 <__errno_location@plt>
   11f7c:	ldr	r4, [r0]
   11f80:	mov	r2, #5
   11f84:	ldr	r1, [pc, #684]	; 12238 <__assert_fail@plt+0xe68>
   11f88:	mov	r0, #0
   11f8c:	bl	11130 <dcgettext@plt>
   11f90:	mov	r7, r0
   11f94:	mov	r1, r6
   11f98:	mov	r0, #4
   11f9c:	bl	1a758 <__assert_fail@plt+0x9388>
   11fa0:	mov	r3, r0
   11fa4:	mov	r2, r7
   11fa8:	mov	r1, r4
   11fac:	mov	r0, #0
   11fb0:	bl	111c0 <error@plt>
   11fb4:	mov	r4, #0
   11fb8:	b	12054 <__assert_fail@plt+0xc84>
   11fbc:	add	r2, sp, #56	; 0x38
   11fc0:	mov	r1, r6
   11fc4:	mov	r0, #3
   11fc8:	bl	11370 <__xstat64@plt>
   11fcc:	cmp	r0, #0
   11fd0:	bne	1216c <__assert_fail@plt+0xd9c>
   11fd4:	ldr	r3, [sp, #72]	; 0x48
   11fd8:	and	r3, r3, #61440	; 0xf000
   11fdc:	cmp	r3, #16384	; 0x4000
   11fe0:	bne	1216c <__assert_fail@plt+0xd9c>
   11fe4:	ldrb	r4, [r5, #21]
   11fe8:	cmp	r8, #2
   11fec:	movne	r4, #0
   11ff0:	andeq	r4, r4, #1
   11ff4:	cmp	r4, #0
   11ff8:	bne	12054 <__assert_fail@plt+0xc84>
   11ffc:	mov	r2, #5
   12000:	ldr	r1, [pc, #564]	; 1223c <__assert_fail@plt+0xe6c>
   12004:	mov	r0, #0
   12008:	bl	11130 <dcgettext@plt>
   1200c:	mov	r7, r0
   12010:	mov	r1, r6
   12014:	mov	r0, #4
   12018:	bl	1a758 <__assert_fail@plt+0x9388>
   1201c:	mov	r3, r0
   12020:	mov	r2, r7
   12024:	mov	r1, r8
   12028:	mov	r0, #0
   1202c:	bl	111c0 <error@plt>
   12030:	b	12054 <__assert_fail@plt+0xc84>
   12034:	cmp	r4, #0
   12038:	movne	r4, #1
   1203c:	bne	12054 <__assert_fail@plt+0xc84>
   12040:	mov	r0, #0
   12044:	bl	113ac <close@plt>
   12048:	cmp	r0, #0
   1204c:	moveq	r4, #1
   12050:	bne	11f78 <__assert_fail@plt+0xba8>
   12054:	and	sl, sl, r4
   12058:	ldr	r2, [pc, #432]	; 12210 <__assert_fail@plt+0xe40>
   1205c:	ldr	r3, [r2]
   12060:	add	r3, r3, #1
   12064:	str	r3, [r2]
   12068:	cmp	r9, r3
   1206c:	ble	121a8 <__assert_fail@plt+0xdd8>
   12070:	ldr	r6, [fp, r3, lsl #2]
   12074:	ldr	r1, [pc, #452]	; 12240 <__assert_fail@plt+0xe70>
   12078:	mov	r0, r6
   1207c:	bl	110a0 <strcmp@plt>
   12080:	subs	r7, r0, #0
   12084:	moveq	r4, #1
   12088:	beq	120b4 <__assert_fail@plt+0xce4>
   1208c:	ldrb	r3, [r5, #21]
   12090:	cmp	r3, #0
   12094:	ldrne	r4, [sp, #32]
   12098:	movne	r7, #0
   1209c:	bne	120b4 <__assert_fail@plt+0xce4>
   120a0:	ldrb	r3, [r5, #22]
   120a4:	cmp	r3, #0
   120a8:	ldrne	r4, [sp, #32]
   120ac:	movne	r7, #0
   120b0:	beq	11f28 <__assert_fail@plt+0xb58>
   120b4:	ldr	r3, [r5, #16]
   120b8:	cmp	r3, #3
   120bc:	beq	120e0 <__assert_fail@plt+0xd10>
   120c0:	cmp	r3, #2
   120c4:	mvneq	r3, #-1073741823	; 0xc0000001
   120c8:	streq	r3, [r5, #4]
   120cc:	beq	120e0 <__assert_fail@plt+0xd10>
   120d0:	cmp	r3, #1
   120d4:	bne	11f54 <__assert_fail@plt+0xb84>
   120d8:	mvn	r3, #-1073741823	; 0xc0000001
   120dc:	str	r3, [r5, #12]
   120e0:	ldrb	r3, [r5, #28]
   120e4:	ldrb	r2, [r5, #22]
   120e8:	cmp	r2, #0
   120ec:	movne	r2, #256	; 0x100
   120f0:	moveq	r2, #0
   120f4:	str	r2, [sp]
   120f8:	cmp	r3, #0
   120fc:	moveq	r3, r5
   12100:	movne	r3, #0
   12104:	cmp	r4, #1
   12108:	movne	r2, r6
   1210c:	moveq	r2, #0
   12110:	mvn	r1, #99	; 0x63
   12114:	mov	r0, r4
   12118:	bl	12750 <__assert_fail@plt+0x1380>
   1211c:	cmp	r0, #0
   12120:	beq	12034 <__assert_fail@plt+0xc64>
   12124:	bl	11298 <__errno_location@plt>
   12128:	ldr	r8, [r0]
   1212c:	cmp	r4, #0
   12130:	beq	11f68 <__assert_fail@plt+0xb98>
   12134:	cmp	r4, #1
   12138:	cmpeq	r8, #9
   1213c:	bne	1214c <__assert_fail@plt+0xd7c>
   12140:	ldrb	r4, [r5, #21]
   12144:	cmp	r4, #0
   12148:	bne	12054 <__assert_fail@plt+0xc84>
   1214c:	cmp	r8, #0
   12150:	moveq	r4, #1
   12154:	beq	12054 <__assert_fail@plt+0xc84>
   12158:	cmp	r7, #0
   1215c:	cmpne	r7, #21
   12160:	beq	11fe4 <__assert_fail@plt+0xc14>
   12164:	cmp	r7, #22
   12168:	beq	11fbc <__assert_fail@plt+0xbec>
   1216c:	mov	r2, #5
   12170:	ldr	r1, [pc, #204]	; 12244 <__assert_fail@plt+0xe74>
   12174:	mov	r0, #0
   12178:	bl	11130 <dcgettext@plt>
   1217c:	mov	r4, r0
   12180:	mov	r1, r6
   12184:	mov	r0, #4
   12188:	bl	1a758 <__assert_fail@plt+0x9388>
   1218c:	mov	r3, r0
   12190:	mov	r2, r4
   12194:	mov	r1, r7
   12198:	mov	r0, #0
   1219c:	bl	111c0 <error@plt>
   121a0:	mov	r4, #0
   121a4:	b	12054 <__assert_fail@plt+0xc84>
   121a8:	eor	r0, sl, #1
   121ac:	add	sp, sp, #164	; 0xa4
   121b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121b4:	andeq	r0, r2, ip, asr #3
   121b8:	andeq	lr, r1, r0, ror #13
   121bc:	andeq	lr, r1, r8, lsl #15
   121c0:	strdeq	r2, [r1], -r8
   121c4:			; <UNDEFINED> instruction: 0x000311b0
   121c8:	strdeq	sp, [r1], -r4
   121cc:	andeq	lr, r1, ip, ror #15
   121d0:	andeq	r1, r3, r8, lsr #3
   121d4:	andeq	r1, r3, r4, asr #2
   121d8:	andeq	lr, r1, r0, lsr #15
   121dc:	andeq	lr, r1, r0, ror #1
   121e0:	andeq	lr, r1, r8, lsr #15
   121e4:			; <UNDEFINED> instruction: 0x0001e7b4
   121e8:	andeq	lr, r1, r4, asr #15
   121ec:	ldrdeq	lr, [r1], -r0
   121f0:	andeq	lr, r1, r0, ror #15
   121f4:	andeq	r1, r3, r0, asr #2
   121f8:	ldrdeq	lr, [r1], -ip
   121fc:	strdeq	lr, [r1], -r8
   12200:	andeq	r1, r3, r4, lsr #3
   12204:			; <UNDEFINED> instruction: 0x000311b8
   12208:	strdeq	lr, [r1], -r8
   1220c:	andeq	lr, r1, r8, lsr #16
   12210:	muleq	r3, r8, r1
   12214:	andeq	r0, r3, pc, lsr #27
   12218:	andeq	lr, r1, r8, asr #16
   1221c:	andeq	lr, r1, r8, asr r8
   12220:	andeq	lr, r1, r4, lsr #17
   12224:			; <UNDEFINED> instruction: 0x000001b6
   12228:	andeq	r0, r0, r1, asr #18
   1222c:	ldrdeq	lr, [r1], -r8
   12230:	andeq	lr, r1, r0, asr #17
   12234:	andeq	lr, r1, ip, asr #17
   12238:	andeq	lr, r1, r8, ror #17
   1223c:	andeq	lr, r1, ip, lsl #18
   12240:			; <UNDEFINED> instruction: 0x0001e8bc
   12244:	strdeq	lr, [r1], -ip
   12248:	push	{r4, lr}
   1224c:	mov	r0, #1
   12250:	bl	1154c <__assert_fail@plt+0x17c>
   12254:	pop	{r4, pc}
   12258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1225c:	sub	sp, sp, #12
   12260:	str	r0, [sp, #4]
   12264:	mov	r6, r1
   12268:	mov	fp, r2
   1226c:	mov	r8, r3
   12270:	bl	11274 <strlen@plt>
   12274:	str	r0, [sp]
   12278:	ldr	r4, [r6]
   1227c:	cmp	r4, #0
   12280:	beq	12328 <__assert_fail@plt+0xf58>
   12284:	mov	r5, fp
   12288:	mov	sl, #0
   1228c:	mvn	r9, #0
   12290:	mov	r7, sl
   12294:	b	122b4 <__assert_fail@plt+0xee4>
   12298:	mov	r9, r7
   1229c:	b	1231c <__assert_fail@plt+0xf4c>
   122a0:	add	r7, r7, #1
   122a4:	ldr	r4, [r6, #4]!
   122a8:	add	r5, r5, r8
   122ac:	cmp	r4, #0
   122b0:	beq	12314 <__assert_fail@plt+0xf44>
   122b4:	ldr	r2, [sp]
   122b8:	ldr	r1, [sp, #4]
   122bc:	mov	r0, r4
   122c0:	bl	11394 <strncmp@plt>
   122c4:	cmp	r0, #0
   122c8:	bne	122a0 <__assert_fail@plt+0xed0>
   122cc:	mov	r0, r4
   122d0:	bl	11274 <strlen@plt>
   122d4:	ldr	r3, [sp]
   122d8:	cmp	r3, r0
   122dc:	beq	12298 <__assert_fail@plt+0xec8>
   122e0:	cmn	r9, #1
   122e4:	moveq	r9, r7
   122e8:	beq	122a0 <__assert_fail@plt+0xed0>
   122ec:	cmp	fp, #0
   122f0:	moveq	sl, #1
   122f4:	beq	122a0 <__assert_fail@plt+0xed0>
   122f8:	mov	r2, r8
   122fc:	mov	r1, r5
   12300:	mla	r0, r8, r9, fp
   12304:	bl	11118 <memcmp@plt>
   12308:	cmp	r0, #0
   1230c:	movne	sl, #1
   12310:	b	122a0 <__assert_fail@plt+0xed0>
   12314:	cmp	sl, #0
   12318:	mvnne	r9, #1
   1231c:	mov	r0, r9
   12320:	add	sp, sp, #12
   12324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12328:	mvn	r9, #0
   1232c:	b	1231c <__assert_fail@plt+0xf4c>
   12330:	push	{r4, r5, r6, lr}
   12334:	mov	r6, r0
   12338:	ldr	r0, [r1]
   1233c:	cmp	r0, #0
   12340:	beq	1237c <__assert_fail@plt+0xfac>
   12344:	mov	r4, r1
   12348:	mov	r5, #0
   1234c:	mov	r1, r6
   12350:	bl	110a0 <strcmp@plt>
   12354:	cmp	r0, #0
   12358:	beq	12374 <__assert_fail@plt+0xfa4>
   1235c:	add	r5, r5, #1
   12360:	ldr	r0, [r4, #4]!
   12364:	cmp	r0, #0
   12368:	bne	1234c <__assert_fail@plt+0xf7c>
   1236c:	mvn	r0, #0
   12370:	pop	{r4, r5, r6, pc}
   12374:	mov	r0, r5
   12378:	pop	{r4, r5, r6, pc}
   1237c:	mvn	r0, #0
   12380:	pop	{r4, r5, r6, pc}
   12384:	push	{r4, r5, r6, lr}
   12388:	sub	sp, sp, #8
   1238c:	mov	r5, r0
   12390:	mov	r4, r1
   12394:	cmn	r2, #1
   12398:	mov	r2, #5
   1239c:	ldreq	r1, [pc, #76]	; 123f0 <__assert_fail@plt+0x1020>
   123a0:	ldrne	r1, [pc, #76]	; 123f4 <__assert_fail@plt+0x1024>
   123a4:	mov	r0, #0
   123a8:	bl	11130 <dcgettext@plt>
   123ac:	mov	r6, r0
   123b0:	mov	r2, r4
   123b4:	mov	r1, #8
   123b8:	mov	r0, #0
   123bc:	bl	1a6ec <__assert_fail@plt+0x931c>
   123c0:	mov	r4, r0
   123c4:	mov	r1, r5
   123c8:	mov	r0, #1
   123cc:	bl	1a97c <__assert_fail@plt+0x95ac>
   123d0:	str	r0, [sp]
   123d4:	mov	r3, r4
   123d8:	mov	r2, r6
   123dc:	mov	r1, #0
   123e0:	mov	r0, r1
   123e4:	bl	111c0 <error@plt>
   123e8:	add	sp, sp, #8
   123ec:	pop	{r4, r5, r6, pc}
   123f0:	andeq	lr, r1, r0, lsl #20
   123f4:	andeq	lr, r1, ip, lsl sl
   123f8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123fc:	mov	r7, r0
   12400:	mov	r4, r1
   12404:	mov	r8, r2
   12408:	mov	r2, #5
   1240c:	ldr	r1, [pc, #224]	; 124f4 <__assert_fail@plt+0x1124>
   12410:	mov	r0, #0
   12414:	bl	11130 <dcgettext@plt>
   12418:	ldr	r3, [pc, #216]	; 124f8 <__assert_fail@plt+0x1128>
   1241c:	ldr	r1, [r3]
   12420:	bl	11070 <fputs_unlocked@plt>
   12424:	ldr	r5, [r7]
   12428:	cmp	r5, #0
   1242c:	beq	124bc <__assert_fail@plt+0x10ec>
   12430:	mov	r9, #0
   12434:	mov	r6, r9
   12438:	ldr	sl, [pc, #184]	; 124f8 <__assert_fail@plt+0x1128>
   1243c:	b	12478 <__assert_fail@plt+0x10a8>
   12440:	ldr	r9, [sl]
   12444:	mov	r0, r5
   12448:	bl	1a98c <__assert_fail@plt+0x95bc>
   1244c:	mov	r3, r0
   12450:	ldr	r2, [pc, #164]	; 124fc <__assert_fail@plt+0x112c>
   12454:	mov	r1, #1
   12458:	mov	r0, r9
   1245c:	bl	112ec <__fprintf_chk@plt>
   12460:	mov	r9, r4
   12464:	add	r6, r6, #1
   12468:	ldr	r5, [r7, #4]!
   1246c:	add	r4, r4, r8
   12470:	cmp	r5, #0
   12474:	beq	124bc <__assert_fail@plt+0x10ec>
   12478:	cmp	r6, #0
   1247c:	beq	12440 <__assert_fail@plt+0x1070>
   12480:	mov	r2, r8
   12484:	mov	r1, r4
   12488:	mov	r0, r9
   1248c:	bl	11118 <memcmp@plt>
   12490:	cmp	r0, #0
   12494:	bne	12440 <__assert_fail@plt+0x1070>
   12498:	ldr	fp, [sl]
   1249c:	mov	r0, r5
   124a0:	bl	1a98c <__assert_fail@plt+0x95bc>
   124a4:	mov	r3, r0
   124a8:	ldr	r2, [pc, #80]	; 12500 <__assert_fail@plt+0x1130>
   124ac:	mov	r1, #1
   124b0:	mov	r0, fp
   124b4:	bl	112ec <__fprintf_chk@plt>
   124b8:	b	12464 <__assert_fail@plt+0x1094>
   124bc:	ldr	r3, [pc, #52]	; 124f8 <__assert_fail@plt+0x1128>
   124c0:	ldr	r0, [r3]
   124c4:	ldr	r3, [r0, #20]
   124c8:	ldr	r2, [r0, #24]
   124cc:	cmp	r3, r2
   124d0:	bcs	124e8 <__assert_fail@plt+0x1118>
   124d4:	add	r2, r3, #1
   124d8:	str	r2, [r0, #20]
   124dc:	mov	r2, #10
   124e0:	strb	r2, [r3]
   124e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124e8:	mov	r1, #10
   124ec:	bl	11310 <__overflow@plt>
   124f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f4:	andeq	lr, r1, ip, lsr sl
   124f8:	andeq	r1, r3, r0, lsr #3
   124fc:	andeq	lr, r1, r4, asr sl
   12500:	andeq	lr, r1, ip, asr sl
   12504:	push	{r4, r5, r6, r7, r8, lr}
   12508:	mov	r7, r0
   1250c:	mov	r5, r1
   12510:	mov	r4, r2
   12514:	mov	r6, r3
   12518:	ldrb	r3, [sp, #32]
   1251c:	cmp	r3, #0
   12520:	beq	12570 <__assert_fail@plt+0x11a0>
   12524:	ldr	r3, [sp, #24]
   12528:	mov	r2, r6
   1252c:	mov	r1, r4
   12530:	mov	r0, r5
   12534:	bl	12258 <__assert_fail@plt+0xe88>
   12538:	cmp	r0, #0
   1253c:	popge	{r4, r5, r6, r7, r8, pc}
   12540:	mov	r2, r0
   12544:	mov	r1, r5
   12548:	mov	r0, r7
   1254c:	bl	12384 <__assert_fail@plt+0xfb4>
   12550:	ldr	r2, [sp, #24]
   12554:	mov	r1, r6
   12558:	mov	r0, r4
   1255c:	bl	123f8 <__assert_fail@plt+0x1028>
   12560:	ldr	r3, [sp, #28]
   12564:	blx	r3
   12568:	mvn	r0, #0
   1256c:	pop	{r4, r5, r6, r7, r8, pc}
   12570:	mov	r1, r2
   12574:	mov	r0, r5
   12578:	bl	12330 <__assert_fail@plt+0xf60>
   1257c:	b	12538 <__assert_fail@plt+0x1168>
   12580:	push	{r4, r5, r6, r7, r8, lr}
   12584:	ldr	r6, [r1]
   12588:	cmp	r6, #0
   1258c:	beq	125d0 <__assert_fail@plt+0x1200>
   12590:	mov	r7, r3
   12594:	mov	r8, r0
   12598:	mov	r4, r2
   1259c:	mov	r5, r1
   125a0:	mov	r2, r7
   125a4:	mov	r1, r4
   125a8:	mov	r0, r8
   125ac:	bl	11118 <memcmp@plt>
   125b0:	cmp	r0, #0
   125b4:	beq	125c8 <__assert_fail@plt+0x11f8>
   125b8:	ldr	r6, [r5, #4]!
   125bc:	add	r4, r4, r7
   125c0:	cmp	r6, #0
   125c4:	bne	125a0 <__assert_fail@plt+0x11d0>
   125c8:	mov	r0, r6
   125cc:	pop	{r4, r5, r6, r7, r8, pc}
   125d0:	mov	r6, #0
   125d4:	b	125c8 <__assert_fail@plt+0x11f8>
   125d8:	ldr	r3, [pc, #4]	; 125e4 <__assert_fail@plt+0x1214>
   125dc:	str	r0, [r3]
   125e0:	bx	lr
   125e4:	ldrdeq	r1, [r3], -r0
   125e8:	ldr	r3, [pc, #4]	; 125f4 <__assert_fail@plt+0x1224>
   125ec:	strb	r0, [r3, #4]
   125f0:	bx	lr
   125f4:	ldrdeq	r1, [r3], -r0
   125f8:	push	{r4, r5, r6, lr}
   125fc:	sub	sp, sp, #8
   12600:	ldr	r3, [pc, #200]	; 126d0 <__assert_fail@plt+0x1300>
   12604:	ldr	r0, [r3]
   12608:	bl	1baac <__assert_fail@plt+0xa6dc>
   1260c:	cmp	r0, #0
   12610:	beq	12634 <__assert_fail@plt+0x1264>
   12614:	ldr	r3, [pc, #184]	; 126d4 <__assert_fail@plt+0x1304>
   12618:	ldrb	r3, [r3, #4]
   1261c:	cmp	r3, #0
   12620:	beq	12650 <__assert_fail@plt+0x1280>
   12624:	bl	11298 <__errno_location@plt>
   12628:	ldr	r3, [r0]
   1262c:	cmp	r3, #32
   12630:	bne	12650 <__assert_fail@plt+0x1280>
   12634:	ldr	r3, [pc, #156]	; 126d8 <__assert_fail@plt+0x1308>
   12638:	ldr	r0, [r3]
   1263c:	bl	1baac <__assert_fail@plt+0xa6dc>
   12640:	cmp	r0, #0
   12644:	bne	126c4 <__assert_fail@plt+0x12f4>
   12648:	add	sp, sp, #8
   1264c:	pop	{r4, r5, r6, pc}
   12650:	mov	r2, #5
   12654:	ldr	r1, [pc, #128]	; 126dc <__assert_fail@plt+0x130c>
   12658:	mov	r0, #0
   1265c:	bl	11130 <dcgettext@plt>
   12660:	mov	r4, r0
   12664:	ldr	r3, [pc, #104]	; 126d4 <__assert_fail@plt+0x1304>
   12668:	ldr	r5, [r3]
   1266c:	cmp	r5, #0
   12670:	beq	126a8 <__assert_fail@plt+0x12d8>
   12674:	bl	11298 <__errno_location@plt>
   12678:	ldr	r6, [r0]
   1267c:	mov	r0, r5
   12680:	bl	1a804 <__assert_fail@plt+0x9434>
   12684:	str	r4, [sp]
   12688:	mov	r3, r0
   1268c:	ldr	r2, [pc, #76]	; 126e0 <__assert_fail@plt+0x1310>
   12690:	mov	r1, r6
   12694:	mov	r0, #0
   12698:	bl	111c0 <error@plt>
   1269c:	ldr	r3, [pc, #64]	; 126e4 <__assert_fail@plt+0x1314>
   126a0:	ldr	r0, [r3]
   126a4:	bl	110e8 <_exit@plt>
   126a8:	bl	11298 <__errno_location@plt>
   126ac:	mov	r3, r4
   126b0:	ldr	r2, [pc, #48]	; 126e8 <__assert_fail@plt+0x1318>
   126b4:	ldr	r1, [r0]
   126b8:	mov	r0, #0
   126bc:	bl	111c0 <error@plt>
   126c0:	b	1269c <__assert_fail@plt+0x12cc>
   126c4:	ldr	r3, [pc, #24]	; 126e4 <__assert_fail@plt+0x1314>
   126c8:	ldr	r0, [r3]
   126cc:	bl	110e8 <_exit@plt>
   126d0:	andeq	r1, r3, r4, lsr #3
   126d4:	ldrdeq	r1, [r3], -r0
   126d8:	andeq	r1, r3, r0, lsr #3
   126dc:	andeq	lr, r1, r4, ror #20
   126e0:	andeq	lr, r1, r0, ror sl
   126e4:	andeq	r1, r3, r8, asr #2
   126e8:	andeq	lr, r1, r4, ror sl
   126ec:	push	{r4, r5, r6, r7, r8, lr}
   126f0:	mov	r5, r0
   126f4:	mov	r0, r1
   126f8:	mov	r1, r2
   126fc:	mov	r2, r3
   12700:	bl	111cc <open64@plt>
   12704:	mov	r4, r0
   12708:	cmp	r5, r0
   1270c:	movne	r3, #0
   12710:	moveq	r3, #1
   12714:	orrs	r3, r3, r0, lsr #31
   12718:	beq	12724 <__assert_fail@plt+0x1354>
   1271c:	mov	r0, r4
   12720:	pop	{r4, r5, r6, r7, r8, pc}
   12724:	mov	r1, r5
   12728:	bl	1113c <dup2@plt>
   1272c:	mov	r6, r0
   12730:	bl	11298 <__errno_location@plt>
   12734:	mov	r5, r0
   12738:	ldr	r7, [r0]
   1273c:	mov	r0, r4
   12740:	bl	113ac <close@plt>
   12744:	str	r7, [r5]
   12748:	mov	r4, r6
   1274c:	b	1271c <__assert_fail@plt+0x134c>
   12750:	push	{r4, r5, r6, r7, r8, lr}
   12754:	mov	r7, r1
   12758:	mov	r5, r2
   1275c:	mov	r6, r3
   12760:	cmp	r0, #0
   12764:	blt	127c0 <__assert_fail@plt+0x13f0>
   12768:	mov	r1, r3
   1276c:	bl	11358 <futimens@plt>
   12770:	mov	r4, r0
   12774:	cmp	r5, #0
   12778:	beq	12784 <__assert_fail@plt+0x13b4>
   1277c:	cmn	r0, #1
   12780:	beq	12794 <__assert_fail@plt+0x13c4>
   12784:	cmp	r4, #1
   12788:	beq	127c8 <__assert_fail@plt+0x13f8>
   1278c:	mov	r0, r4
   12790:	pop	{r4, r5, r6, r7, r8, pc}
   12794:	bl	11298 <__errno_location@plt>
   12798:	ldr	r3, [r0]
   1279c:	cmp	r3, #38	; 0x26
   127a0:	bne	1278c <__assert_fail@plt+0x13bc>
   127a4:	ldr	r3, [sp, #24]
   127a8:	mov	r2, r6
   127ac:	mov	r1, r5
   127b0:	mov	r0, r7
   127b4:	bl	11094 <utimensat@plt>
   127b8:	mov	r4, r0
   127bc:	b	12784 <__assert_fail@plt+0x13b4>
   127c0:	cmp	r2, #0
   127c4:	bne	127a4 <__assert_fail@plt+0x13d4>
   127c8:	bl	11298 <__errno_location@plt>
   127cc:	mov	r3, #9
   127d0:	str	r3, [r0]
   127d4:	mvn	r4, #0
   127d8:	b	1278c <__assert_fail@plt+0x13bc>
   127dc:	push	{r4, lr}
   127e0:	mov	r1, r0
   127e4:	mov	r0, #0
   127e8:	bl	110dc <clock_gettime@plt>
   127ec:	pop	{r4, pc}
   127f0:	push	{r4, r5, lr}
   127f4:	sub	sp, sp, #12
   127f8:	mov	r4, r0
   127fc:	mov	r0, sp
   12800:	bl	127dc <__assert_fail@plt+0x140c>
   12804:	ldm	sp, {r0, r1}
   12808:	stm	r4, {r0, r1}
   1280c:	mov	r0, r4
   12810:	add	sp, sp, #12
   12814:	pop	{r4, r5, pc}
   12818:	sub	sp, sp, #8
   1281c:	push	{r4, r5, r6, r7, r8, lr}
   12820:	add	r1, sp, #20
   12824:	stmib	r1, {r2, r3}
   12828:	ldrd	r6, [sp, #32]
   1282c:	ldr	r5, [sp, #40]	; 0x28
   12830:	ldr	r3, [r0, #156]	; 0x9c
   12834:	cmp	r3, #0
   12838:	beq	12864 <__assert_fail@plt+0x1494>
   1283c:	ldr	r2, [r0, #48]	; 0x30
   12840:	cmp	r2, #0
   12844:	bne	12864 <__assert_fail@plt+0x1494>
   12848:	ldrb	r2, [r0, #153]	; 0x99
   1284c:	cmp	r2, #0
   12850:	bne	12864 <__assert_fail@plt+0x1494>
   12854:	ldr	r2, [r0, #172]	; 0xac
   12858:	cmp	r5, #2
   1285c:	cmple	r2, #0
   12860:	bne	128b4 <__assert_fail@plt+0x14e4>
   12864:	mov	r4, r0
   12868:	cmp	r5, #4
   1286c:	bgt	128d8 <__assert_fail@plt+0x1508>
   12870:	ldr	r3, [r0, #172]	; 0xac
   12874:	add	r3, r3, #1
   12878:	str	r3, [r0, #172]	; 0xac
   1287c:	cmp	r5, #2
   12880:	bgt	12940 <__assert_fail@plt+0x1570>
   12884:	strd	r6, [r0, #72]	; 0x48
   12888:	mov	r2, #0
   1288c:	mov	r3, #0
   12890:	strd	r2, [r0, #80]	; 0x50
   12894:	mov	r3, #0
   12898:	str	r3, [r4, #88]	; 0x58
   1289c:	str	r3, [r4, #92]	; 0x5c
   128a0:	mov	r3, #2
   128a4:	str	r3, [r4, #28]
   128a8:	pop	{r4, r5, r6, r7, r8, lr}
   128ac:	add	sp, sp, #8
   128b0:	bx	lr
   128b4:	mov	r3, #1
   128b8:	strb	r3, [r0, #180]	; 0xb4
   128bc:	add	r4, r0, #32
   128c0:	add	ip, sp, #24
   128c4:	ldm	ip!, {r0, r1, r2, r3}
   128c8:	stmia	r4!, {r0, r1, r2, r3}
   128cc:	ldm	ip, {r0, r1}
   128d0:	stm	r4, {r0, r1}
   128d4:	b	128a8 <__assert_fail@plt+0x14d8>
   128d8:	add	r3, r3, #1
   128dc:	str	r3, [r0, #156]	; 0x9c
   128e0:	mov	r2, #100	; 0x64
   128e4:	mov	r3, #0
   128e8:	mov	r0, r6
   128ec:	mov	r1, r7
   128f0:	bl	1dd60 <__assert_fail@plt+0xc990>
   128f4:	strd	r2, [r4, #64]	; 0x40
   128f8:	mov	r2, #100	; 0x64
   128fc:	mov	r3, #0
   12900:	mov	r0, r6
   12904:	mov	r1, r7
   12908:	bl	1dd60 <__assert_fail@plt+0xc990>
   1290c:	mov	r2, #100	; 0x64
   12910:	mov	r3, #0
   12914:	bl	1dd60 <__assert_fail@plt+0xc990>
   12918:	strd	r2, [r4, #56]	; 0x38
   1291c:	ldr	r2, [pc, #80]	; 12974 <__assert_fail@plt+0x15a4>
   12920:	mov	r3, #0
   12924:	mov	r0, r6
   12928:	mov	r1, r7
   1292c:	bl	1dd60 <__assert_fail@plt+0xc990>
   12930:	strd	r0, [r4, #40]	; 0x28
   12934:	sub	r5, r5, #4
   12938:	str	r5, [r4, #48]	; 0x30
   1293c:	b	128a8 <__assert_fail@plt+0x14d8>
   12940:	mov	r2, #100	; 0x64
   12944:	mov	r3, #0
   12948:	mov	r0, r6
   1294c:	mov	r1, r7
   12950:	bl	1dd60 <__assert_fail@plt+0xc990>
   12954:	strd	r0, [r4, #72]	; 0x48
   12958:	mov	r2, #100	; 0x64
   1295c:	mov	r3, #0
   12960:	mov	r0, r6
   12964:	mov	r1, r7
   12968:	bl	1dd60 <__assert_fail@plt+0xc990>
   1296c:	strd	r2, [r4, #80]	; 0x50
   12970:	b	12894 <__assert_fail@plt+0x14c4>
   12974:	andeq	r2, r0, r0, lsl r7
   12978:	sub	sp, sp, #8
   1297c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12980:	sub	sp, sp, #28
   12984:	add	r1, sp, #60	; 0x3c
   12988:	stmib	r1, {r2, r3}
   1298c:	ldrd	r6, [sp, #64]	; 0x40
   12990:	ldrd	r2, [sp, #72]	; 0x48
   12994:	strd	r2, [sp]
   12998:	ldrd	r2, [sp, #80]	; 0x50
   1299c:	strd	r2, [sp, #8]
   129a0:	ldrd	r2, [sp, #88]	; 0x58
   129a4:	strd	r2, [sp, #16]
   129a8:	ldrd	sl, [sp, #96]	; 0x60
   129ac:	ldrd	r8, [sp, #104]	; 0x68
   129b0:	ldr	ip, [sp, #112]	; 0x70
   129b4:	ldr	r1, [sp, #120]	; 0x78
   129b8:	cmp	r1, #0
   129bc:	blt	12c80 <__assert_fail@plt+0x18b0>
   129c0:	cmp	ip, #0
   129c4:	blt	1306c <__assert_fail@plt+0x1c9c>
   129c8:	ldr	lr, [r0, #144]	; 0x90
   129cc:	cmp	lr, #0
   129d0:	blt	13084 <__assert_fail@plt+0x1cb4>
   129d4:	mvn	r1, #-2147483648	; 0x80000000
   129d8:	sub	r1, r1, ip
   129dc:	cmp	lr, r1
   129e0:	movle	r1, #0
   129e4:	movgt	r1, #1
   129e8:	cmp	r1, #0
   129ec:	ldr	r1, [r0, #144]	; 0x90
   129f0:	add	ip, r1, ip
   129f4:	str	ip, [r0, #144]	; 0x90
   129f8:	movne	r1, #1
   129fc:	moveq	r1, #0
   12a00:	cmp	r8, #0
   12a04:	sbcs	r3, r9, #0
   12a08:	blt	13098 <__assert_fail@plt+0x1cc8>
   12a0c:	ldrd	r4, [r0, #136]	; 0x88
   12a10:	cmp	r4, #0
   12a14:	sbcs	r3, r5, #0
   12a18:	blt	130c0 <__assert_fail@plt+0x1cf0>
   12a1c:	mvn	r2, #0
   12a20:	mvn	r3, #-2147483648	; 0x80000000
   12a24:	subs	r2, r2, r8
   12a28:	sbc	r3, r3, r9
   12a2c:	cmp	r2, r4
   12a30:	sbcs	r3, r3, r5
   12a34:	movlt	ip, #1
   12a38:	movge	ip, #0
   12a3c:	cmp	ip, #0
   12a40:	beq	130e8 <__assert_fail@plt+0x1d18>
   12a44:	ldrd	r4, [r0, #136]	; 0x88
   12a48:	adds	r2, r8, r4
   12a4c:	adc	r3, r9, r5
   12a50:	strd	r2, [r0, #136]	; 0x88
   12a54:	mov	r3, #1
   12a58:	orr	r1, r1, r3
   12a5c:	cmp	sl, #0
   12a60:	sbcs	r3, fp, #0
   12a64:	blt	13100 <__assert_fail@plt+0x1d30>
   12a68:	ldrd	r8, [r0, #128]	; 0x80
   12a6c:	cmp	r8, #0
   12a70:	sbcs	r3, r9, #0
   12a74:	blt	13128 <__assert_fail@plt+0x1d58>
   12a78:	mvn	r4, #0
   12a7c:	mvn	r5, #-2147483648	; 0x80000000
   12a80:	subs	r2, r4, sl
   12a84:	sbc	r3, r5, fp
   12a88:	cmp	r2, r8
   12a8c:	sbcs	r3, r3, r9
   12a90:	movlt	r3, #1
   12a94:	movge	r3, #0
   12a98:	cmp	r3, #0
   12a9c:	beq	1314c <__assert_fail@plt+0x1d7c>
   12aa0:	ldrd	r2, [r0, #128]	; 0x80
   12aa4:	adds	r8, sl, r2
   12aa8:	adc	r9, fp, r3
   12aac:	strd	r8, [r0, #128]	; 0x80
   12ab0:	mov	r3, #1
   12ab4:	orr	r1, r3, r1
   12ab8:	ldrd	r2, [sp, #16]
   12abc:	cmp	r2, #0
   12ac0:	sbcs	r3, r3, #0
   12ac4:	blt	13164 <__assert_fail@plt+0x1d94>
   12ac8:	ldrd	r8, [r0, #120]	; 0x78
   12acc:	cmp	r8, #0
   12ad0:	sbcs	r3, r9, #0
   12ad4:	blt	13190 <__assert_fail@plt+0x1dc0>
   12ad8:	mvn	r4, #0
   12adc:	mvn	r5, #-2147483648	; 0x80000000
   12ae0:	ldrd	r2, [sp, #16]
   12ae4:	subs	r2, r4, r2
   12ae8:	sbc	r3, r5, r3
   12aec:	cmp	r2, r8
   12af0:	sbcs	r3, r3, r9
   12af4:	movlt	r3, #1
   12af8:	movge	r3, #0
   12afc:	cmp	r3, #0
   12b00:	beq	131b8 <__assert_fail@plt+0x1de8>
   12b04:	ldrd	r2, [r0, #120]	; 0x78
   12b08:	ldrd	sl, [sp, #16]
   12b0c:	adds	sl, sl, r2
   12b10:	adc	fp, fp, r3
   12b14:	strd	sl, [r0, #120]	; 0x78
   12b18:	mov	r3, #1
   12b1c:	orr	r1, r3, r1
   12b20:	ldrd	r2, [sp, #8]
   12b24:	cmp	r2, #0
   12b28:	sbcs	r3, r3, #0
   12b2c:	blt	131d4 <__assert_fail@plt+0x1e04>
   12b30:	ldrd	r8, [r0, #112]	; 0x70
   12b34:	cmp	r8, #0
   12b38:	sbcs	r3, r9, #0
   12b3c:	blt	13208 <__assert_fail@plt+0x1e38>
   12b40:	mvn	r4, #0
   12b44:	mvn	r5, #-2147483648	; 0x80000000
   12b48:	ldrd	r2, [sp, #8]
   12b4c:	subs	r2, r4, r2
   12b50:	sbc	r3, r5, r3
   12b54:	cmp	r2, r8
   12b58:	sbcs	r3, r3, r9
   12b5c:	movlt	r3, #1
   12b60:	movge	r3, #0
   12b64:	cmp	r3, #0
   12b68:	beq	13230 <__assert_fail@plt+0x1e60>
   12b6c:	ldrd	r2, [r0, #112]	; 0x70
   12b70:	ldrd	r4, [sp, #8]
   12b74:	adds	r4, r4, r2
   12b78:	adc	r5, r5, r3
   12b7c:	mov	r2, r4
   12b80:	mov	r3, r5
   12b84:	strd	r2, [r0, #112]	; 0x70
   12b88:	mov	r3, #1
   12b8c:	orr	r1, r3, r1
   12b90:	ldrd	r2, [sp]
   12b94:	cmp	r2, #0
   12b98:	sbcs	r3, r3, #0
   12b9c:	blt	13254 <__assert_fail@plt+0x1e84>
   12ba0:	ldrd	r8, [r0, #104]	; 0x68
   12ba4:	cmp	r8, #0
   12ba8:	sbcs	r3, r9, #0
   12bac:	blt	13288 <__assert_fail@plt+0x1eb8>
   12bb0:	mvn	r4, #0
   12bb4:	mvn	r5, #-2147483648	; 0x80000000
   12bb8:	ldrd	r2, [sp]
   12bbc:	subs	r2, r4, r2
   12bc0:	sbc	r3, r5, r3
   12bc4:	cmp	r2, r8
   12bc8:	sbcs	r3, r3, r9
   12bcc:	movlt	r3, #1
   12bd0:	movge	r3, #0
   12bd4:	cmp	r3, #0
   12bd8:	beq	132b0 <__assert_fail@plt+0x1ee0>
   12bdc:	ldrd	r2, [r0, #104]	; 0x68
   12be0:	ldrd	r4, [sp]
   12be4:	adds	r4, r4, r2
   12be8:	adc	r5, r5, r3
   12bec:	mov	r2, r4
   12bf0:	mov	r3, r5
   12bf4:	strd	r2, [r0, #104]	; 0x68
   12bf8:	mov	ip, #1
   12bfc:	orr	ip, ip, r1
   12c00:	cmp	r6, #0
   12c04:	sbcs	r3, r7, #0
   12c08:	blt	132d4 <__assert_fail@plt+0x1f04>
   12c0c:	ldrd	r8, [r0, #96]	; 0x60
   12c10:	cmp	r8, #0
   12c14:	sbcs	r3, r9, #0
   12c18:	blt	132fc <__assert_fail@plt+0x1f2c>
   12c1c:	mvn	r4, #0
   12c20:	mvn	r5, #-2147483648	; 0x80000000
   12c24:	subs	r2, r4, r6
   12c28:	sbc	r3, r5, r7
   12c2c:	cmp	r2, r8
   12c30:	sbcs	r3, r3, r9
   12c34:	movlt	r3, #1
   12c38:	movge	r3, #0
   12c3c:	cmp	r3, #0
   12c40:	beq	13320 <__assert_fail@plt+0x1f50>
   12c44:	ldrd	r2, [r0, #96]	; 0x60
   12c48:	adds	r4, r2, r6
   12c4c:	adc	r5, r3, r7
   12c50:	strd	r4, [r0, #96]	; 0x60
   12c54:	mov	r1, #1
   12c58:	orr	r1, r1, ip
   12c5c:	cmp	r1, #0
   12c60:	moveq	r3, #1
   12c64:	strbeq	r3, [r0, #153]	; 0x99
   12c68:	moveq	r0, r3
   12c6c:	movne	r0, #0
   12c70:	add	sp, sp, #28
   12c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c78:	add	sp, sp, #8
   12c7c:	bx	lr
   12c80:	ldr	r1, [r0, #144]	; 0x90
   12c84:	mvn	lr, r1
   12c88:	lsr	lr, lr, #31
   12c8c:	cmp	lr, ip, lsr #31
   12c90:	beq	12ca4 <__assert_fail@plt+0x18d4>
   12c94:	sub	ip, r1, ip
   12c98:	str	ip, [r0, #144]	; 0x90
   12c9c:	mov	r1, #0
   12ca0:	b	12cd0 <__assert_fail@plt+0x1900>
   12ca4:	cmp	r1, #0
   12ca8:	blt	12cf8 <__assert_fail@plt+0x1928>
   12cac:	sub	lr, ip, #-2147483647	; 0x80000001
   12cb0:	cmp	r1, lr
   12cb4:	movle	lr, #0
   12cb8:	movgt	lr, #1
   12cbc:	cmp	lr, #0
   12cc0:	beq	12c94 <__assert_fail@plt+0x18c4>
   12cc4:	sub	ip, r1, ip
   12cc8:	str	ip, [r0, #144]	; 0x90
   12ccc:	mov	r1, #1
   12cd0:	ldrd	r4, [r0, #136]	; 0x88
   12cd4:	mvn	ip, r5
   12cd8:	lsr	ip, ip, #31
   12cdc:	cmp	ip, r9, lsr #31
   12ce0:	beq	12d0c <__assert_fail@plt+0x193c>
   12ce4:	subs	r2, r4, r8
   12ce8:	sbc	r3, r5, r9
   12cec:	strd	r2, [r0, #136]	; 0x88
   12cf0:	mov	r3, #0
   12cf4:	b	12d48 <__assert_fail@plt+0x1978>
   12cf8:	add	lr, r1, #-2147483648	; 0x80000000
   12cfc:	cmp	lr, ip
   12d00:	movge	lr, #0
   12d04:	movlt	lr, #1
   12d08:	b	12cbc <__assert_fail@plt+0x18ec>
   12d0c:	cmp	r4, #0
   12d10:	sbcs	r3, r5, #0
   12d14:	blt	12d7c <__assert_fail@plt+0x19ac>
   12d18:	subs	r2, r8, #1
   12d1c:	sbc	r3, r9, #-2147483648	; 0x80000000
   12d20:	cmp	r2, r4
   12d24:	sbcs	r3, r3, r5
   12d28:	movlt	ip, #1
   12d2c:	movge	ip, #0
   12d30:	cmp	ip, #0
   12d34:	beq	12ce4 <__assert_fail@plt+0x1914>
   12d38:	subs	r2, r4, r8
   12d3c:	sbc	r3, r5, r9
   12d40:	strd	r2, [r0, #136]	; 0x88
   12d44:	mov	r3, #1
   12d48:	orr	r1, r1, r3
   12d4c:	ldrd	r2, [r0, #128]	; 0x80
   12d50:	mvn	ip, r3
   12d54:	lsr	ip, ip, #31
   12d58:	cmp	ip, fp, lsr #31
   12d5c:	beq	12d98 <__assert_fail@plt+0x19c8>
   12d60:	subs	r2, r2, sl
   12d64:	sbc	r3, r3, fp
   12d68:	mov	r8, r2
   12d6c:	mov	r9, r3
   12d70:	strd	r8, [r0, #128]	; 0x80
   12d74:	mov	r3, #0
   12d78:	b	12ddc <__assert_fail@plt+0x1a0c>
   12d7c:	adds	r2, r4, #0
   12d80:	adc	r3, r5, #-2147483648	; 0x80000000
   12d84:	cmp	r2, r8
   12d88:	sbcs	r3, r3, r9
   12d8c:	movlt	ip, #1
   12d90:	movge	ip, #0
   12d94:	b	12d30 <__assert_fail@plt+0x1960>
   12d98:	cmp	r2, #0
   12d9c:	sbcs	ip, r3, #0
   12da0:	blt	12e10 <__assert_fail@plt+0x1a40>
   12da4:	subs	r4, sl, #1
   12da8:	sbc	r5, fp, #-2147483648	; 0x80000000
   12dac:	cmp	r4, r2
   12db0:	sbcs	ip, r5, r3
   12db4:	movlt	ip, #1
   12db8:	movge	ip, #0
   12dbc:	cmp	ip, #0
   12dc0:	beq	12d60 <__assert_fail@plt+0x1990>
   12dc4:	subs	r2, r2, sl
   12dc8:	sbc	r3, r3, fp
   12dcc:	mov	r8, r2
   12dd0:	mov	r9, r3
   12dd4:	strd	r8, [r0, #128]	; 0x80
   12dd8:	mov	r3, #1
   12ddc:	orr	r1, r3, r1
   12de0:	ldrd	r2, [r0, #120]	; 0x78
   12de4:	mvn	ip, r3
   12de8:	lsr	ip, ip, #31
   12dec:	ldr	lr, [sp, #20]
   12df0:	cmp	ip, lr, lsr #31
   12df4:	beq	12e2c <__assert_fail@plt+0x1a5c>
   12df8:	ldrd	sl, [sp, #16]
   12dfc:	subs	sl, r2, sl
   12e00:	sbc	fp, r3, fp
   12e04:	strd	sl, [r0, #120]	; 0x78
   12e08:	mov	r3, #0
   12e0c:	b	12e70 <__assert_fail@plt+0x1aa0>
   12e10:	adds	r4, r2, #0
   12e14:	adc	r5, r3, #-2147483648	; 0x80000000
   12e18:	cmp	r4, sl
   12e1c:	sbcs	ip, r5, fp
   12e20:	movlt	ip, #1
   12e24:	movge	ip, #0
   12e28:	b	12dbc <__assert_fail@plt+0x19ec>
   12e2c:	cmp	r2, #0
   12e30:	sbcs	ip, r3, #0
   12e34:	blt	12eac <__assert_fail@plt+0x1adc>
   12e38:	ldrd	r4, [sp, #16]
   12e3c:	subs	r4, r4, #1
   12e40:	sbc	r5, r5, #-2147483648	; 0x80000000
   12e44:	cmp	r4, r2
   12e48:	sbcs	ip, r5, r3
   12e4c:	movlt	ip, #1
   12e50:	movge	ip, #0
   12e54:	cmp	ip, #0
   12e58:	beq	12df8 <__assert_fail@plt+0x1a28>
   12e5c:	ldrd	sl, [sp, #16]
   12e60:	subs	sl, r2, sl
   12e64:	sbc	fp, r3, fp
   12e68:	strd	sl, [r0, #120]	; 0x78
   12e6c:	mov	r3, #1
   12e70:	orr	r1, r3, r1
   12e74:	ldrd	r2, [r0, #112]	; 0x70
   12e78:	mvn	ip, r3
   12e7c:	lsr	ip, ip, #31
   12e80:	ldr	lr, [sp, #12]
   12e84:	cmp	ip, lr, lsr #31
   12e88:	beq	12ecc <__assert_fail@plt+0x1afc>
   12e8c:	ldrd	r4, [sp, #8]
   12e90:	subs	r4, r2, r4
   12e94:	sbc	r5, r3, r5
   12e98:	mov	r2, r4
   12e9c:	mov	r3, r5
   12ea0:	strd	r2, [r0, #112]	; 0x70
   12ea4:	mov	ip, #0
   12ea8:	b	12f18 <__assert_fail@plt+0x1b48>
   12eac:	adds	r4, r2, #0
   12eb0:	adc	r5, r3, #-2147483648	; 0x80000000
   12eb4:	ldrd	r8, [sp, #16]
   12eb8:	cmp	r4, r8
   12ebc:	sbcs	ip, r5, r9
   12ec0:	movlt	ip, #1
   12ec4:	movge	ip, #0
   12ec8:	b	12e54 <__assert_fail@plt+0x1a84>
   12ecc:	cmp	r2, #0
   12ed0:	sbcs	ip, r3, #0
   12ed4:	blt	12f54 <__assert_fail@plt+0x1b84>
   12ed8:	ldrd	r4, [sp, #8]
   12edc:	subs	r4, r4, #1
   12ee0:	sbc	r5, r5, #-2147483648	; 0x80000000
   12ee4:	cmp	r4, r2
   12ee8:	sbcs	ip, r5, r3
   12eec:	movlt	ip, #1
   12ef0:	movge	ip, #0
   12ef4:	cmp	ip, #0
   12ef8:	beq	12e8c <__assert_fail@plt+0x1abc>
   12efc:	ldrd	r4, [sp, #8]
   12f00:	subs	r4, r2, r4
   12f04:	sbc	r5, r3, r5
   12f08:	mov	r2, r4
   12f0c:	mov	r3, r5
   12f10:	strd	r2, [r0, #112]	; 0x70
   12f14:	mov	ip, #1
   12f18:	orr	r1, ip, r1
   12f1c:	ldrd	r2, [r0, #104]	; 0x68
   12f20:	mvn	ip, r3
   12f24:	lsr	ip, ip, #31
   12f28:	ldr	lr, [sp, #4]
   12f2c:	cmp	ip, lr, lsr #31
   12f30:	beq	12f74 <__assert_fail@plt+0x1ba4>
   12f34:	ldrd	r4, [sp]
   12f38:	subs	r4, r2, r4
   12f3c:	sbc	r5, r3, r5
   12f40:	mov	r2, r4
   12f44:	mov	r3, r5
   12f48:	strd	r2, [r0, #104]	; 0x68
   12f4c:	mov	ip, #0
   12f50:	b	12fc0 <__assert_fail@plt+0x1bf0>
   12f54:	adds	r4, r2, #0
   12f58:	adc	r5, r3, #-2147483648	; 0x80000000
   12f5c:	ldrd	r8, [sp, #8]
   12f60:	cmp	r4, r8
   12f64:	sbcs	ip, r5, r9
   12f68:	movlt	ip, #1
   12f6c:	movge	ip, #0
   12f70:	b	12ef4 <__assert_fail@plt+0x1b24>
   12f74:	cmp	r2, #0
   12f78:	sbcs	ip, r3, #0
   12f7c:	blt	12fec <__assert_fail@plt+0x1c1c>
   12f80:	ldrd	r4, [sp]
   12f84:	subs	r4, r4, #1
   12f88:	sbc	r5, r5, #-2147483648	; 0x80000000
   12f8c:	cmp	r4, r2
   12f90:	sbcs	ip, r5, r3
   12f94:	movlt	ip, #1
   12f98:	movge	ip, #0
   12f9c:	cmp	ip, #0
   12fa0:	beq	12f34 <__assert_fail@plt+0x1b64>
   12fa4:	ldrd	r4, [sp]
   12fa8:	subs	r4, r2, r4
   12fac:	sbc	r5, r3, r5
   12fb0:	mov	r2, r4
   12fb4:	mov	r3, r5
   12fb8:	strd	r2, [r0, #104]	; 0x68
   12fbc:	mov	ip, #1
   12fc0:	orr	ip, ip, r1
   12fc4:	ldrd	r8, [r0, #96]	; 0x60
   12fc8:	mvn	r1, r9
   12fcc:	lsr	r1, r1, #31
   12fd0:	cmp	r1, r7, lsr #31
   12fd4:	beq	1300c <__assert_fail@plt+0x1c3c>
   12fd8:	subs	r2, r8, r6
   12fdc:	sbc	r3, r9, r7
   12fe0:	strd	r2, [r0, #96]	; 0x60
   12fe4:	mov	r1, #0
   12fe8:	b	13048 <__assert_fail@plt+0x1c78>
   12fec:	adds	r4, r2, #0
   12ff0:	adc	r5, r3, #-2147483648	; 0x80000000
   12ff4:	ldrd	r8, [sp]
   12ff8:	cmp	r4, r8
   12ffc:	sbcs	ip, r5, r9
   13000:	movlt	ip, #1
   13004:	movge	ip, #0
   13008:	b	12f9c <__assert_fail@plt+0x1bcc>
   1300c:	cmp	r8, #0
   13010:	sbcs	r3, r9, #0
   13014:	blt	13050 <__assert_fail@plt+0x1c80>
   13018:	subs	r4, r6, #1
   1301c:	sbc	r5, r7, #-2147483648	; 0x80000000
   13020:	cmp	r4, r8
   13024:	sbcs	r3, r5, r9
   13028:	movlt	r1, #1
   1302c:	movge	r1, #0
   13030:	cmp	r1, #0
   13034:	beq	12fd8 <__assert_fail@plt+0x1c08>
   13038:	subs	r2, r8, r6
   1303c:	sbc	r3, r9, r7
   13040:	strd	r2, [r0, #96]	; 0x60
   13044:	mov	r1, #1
   13048:	orr	r1, r1, ip
   1304c:	b	12c5c <__assert_fail@plt+0x188c>
   13050:	adds	r4, r8, #0
   13054:	adc	r5, r9, #-2147483648	; 0x80000000
   13058:	cmp	r4, r6
   1305c:	sbcs	r3, r5, r7
   13060:	movlt	r1, #1
   13064:	movge	r1, #0
   13068:	b	13030 <__assert_fail@plt+0x1c60>
   1306c:	rsb	r1, ip, #-2147483648	; 0x80000000
   13070:	ldr	lr, [r0, #144]	; 0x90
   13074:	cmp	lr, r1
   13078:	movge	r1, #0
   1307c:	movlt	r1, #1
   13080:	b	129e8 <__assert_fail@plt+0x1618>
   13084:	rsb	r1, lr, #-2147483648	; 0x80000000
   13088:	cmp	ip, r1
   1308c:	movge	r1, #0
   13090:	movlt	r1, #1
   13094:	b	129e8 <__assert_fail@plt+0x1618>
   13098:	mov	r4, #0
   1309c:	mov	r5, #-2147483648	; 0x80000000
   130a0:	subs	r4, r4, r8
   130a4:	sbc	r5, r5, r9
   130a8:	ldrd	r2, [r0, #136]	; 0x88
   130ac:	cmp	r2, r4
   130b0:	sbcs	r3, r3, r5
   130b4:	movlt	ip, #1
   130b8:	movge	ip, #0
   130bc:	b	12a3c <__assert_fail@plt+0x166c>
   130c0:	mov	r2, #0
   130c4:	mov	r3, #-2147483648	; 0x80000000
   130c8:	subs	r2, r2, r4
   130cc:	sbc	r3, r3, r5
   130d0:	mov	r5, r3
   130d4:	cmp	r8, r2
   130d8:	sbcs	r3, r9, r5
   130dc:	movlt	ip, #1
   130e0:	movge	ip, #0
   130e4:	b	12a3c <__assert_fail@plt+0x166c>
   130e8:	ldrd	r4, [r0, #136]	; 0x88
   130ec:	adds	r2, r8, r4
   130f0:	adc	r3, r9, r5
   130f4:	strd	r2, [r0, #136]	; 0x88
   130f8:	mov	r3, #0
   130fc:	b	12a58 <__assert_fail@plt+0x1688>
   13100:	mov	r4, #0
   13104:	mov	r5, #-2147483648	; 0x80000000
   13108:	subs	r4, r4, sl
   1310c:	sbc	r5, r5, fp
   13110:	ldrd	r2, [r0, #128]	; 0x80
   13114:	cmp	r2, r4
   13118:	sbcs	r3, r3, r5
   1311c:	movlt	r3, #1
   13120:	movge	r3, #0
   13124:	b	12a98 <__assert_fail@plt+0x16c8>
   13128:	mov	r4, #0
   1312c:	mov	r5, #-2147483648	; 0x80000000
   13130:	subs	r2, r4, r8
   13134:	sbc	r3, r5, r9
   13138:	cmp	sl, r2
   1313c:	sbcs	r3, fp, r3
   13140:	movlt	r3, #1
   13144:	movge	r3, #0
   13148:	b	12a98 <__assert_fail@plt+0x16c8>
   1314c:	ldrd	r2, [r0, #128]	; 0x80
   13150:	adds	r8, sl, r2
   13154:	adc	r9, fp, r3
   13158:	strd	r8, [r0, #128]	; 0x80
   1315c:	mov	r3, #0
   13160:	b	12ab4 <__assert_fail@plt+0x16e4>
   13164:	mov	r4, #0
   13168:	mov	r5, #-2147483648	; 0x80000000
   1316c:	ldrd	r8, [sp, #16]
   13170:	subs	r8, r4, r8
   13174:	sbc	r9, r5, r9
   13178:	ldrd	r2, [r0, #120]	; 0x78
   1317c:	cmp	r2, r8
   13180:	sbcs	r3, r3, r9
   13184:	movlt	r3, #1
   13188:	movge	r3, #0
   1318c:	b	12afc <__assert_fail@plt+0x172c>
   13190:	mov	r4, #0
   13194:	mov	r5, #-2147483648	; 0x80000000
   13198:	subs	r2, r4, r8
   1319c:	sbc	r3, r5, r9
   131a0:	ldrd	r4, [sp, #16]
   131a4:	cmp	r4, r2
   131a8:	sbcs	r3, r5, r3
   131ac:	movlt	r3, #1
   131b0:	movge	r3, #0
   131b4:	b	12afc <__assert_fail@plt+0x172c>
   131b8:	ldrd	r2, [r0, #120]	; 0x78
   131bc:	ldrd	sl, [sp, #16]
   131c0:	adds	sl, sl, r2
   131c4:	adc	fp, fp, r3
   131c8:	strd	sl, [r0, #120]	; 0x78
   131cc:	mov	r3, #0
   131d0:	b	12b1c <__assert_fail@plt+0x174c>
   131d4:	mov	r4, #0
   131d8:	mov	r5, #-2147483648	; 0x80000000
   131dc:	ldrd	r2, [sp, #8]
   131e0:	subs	r2, r4, r2
   131e4:	sbc	r3, r5, r3
   131e8:	mov	r4, r2
   131ec:	mov	r5, r3
   131f0:	ldrd	r2, [r0, #112]	; 0x70
   131f4:	cmp	r2, r4
   131f8:	sbcs	r3, r3, r5
   131fc:	movlt	r3, #1
   13200:	movge	r3, #0
   13204:	b	12b64 <__assert_fail@plt+0x1794>
   13208:	mov	r4, #0
   1320c:	mov	r5, #-2147483648	; 0x80000000
   13210:	subs	r2, r4, r8
   13214:	sbc	r3, r5, r9
   13218:	ldrd	r4, [sp, #8]
   1321c:	cmp	r4, r2
   13220:	sbcs	r3, r5, r3
   13224:	movlt	r3, #1
   13228:	movge	r3, #0
   1322c:	b	12b64 <__assert_fail@plt+0x1794>
   13230:	ldrd	r2, [r0, #112]	; 0x70
   13234:	ldrd	r4, [sp, #8]
   13238:	adds	r4, r4, r2
   1323c:	adc	r5, r5, r3
   13240:	mov	r2, r4
   13244:	mov	r3, r5
   13248:	strd	r2, [r0, #112]	; 0x70
   1324c:	mov	r3, #0
   13250:	b	12b8c <__assert_fail@plt+0x17bc>
   13254:	mov	r4, #0
   13258:	mov	r5, #-2147483648	; 0x80000000
   1325c:	ldrd	r2, [sp]
   13260:	subs	r2, r4, r2
   13264:	sbc	r3, r5, r3
   13268:	mov	r4, r2
   1326c:	mov	r5, r3
   13270:	ldrd	r2, [r0, #104]	; 0x68
   13274:	cmp	r2, r4
   13278:	sbcs	r3, r3, r5
   1327c:	movlt	r3, #1
   13280:	movge	r3, #0
   13284:	b	12bd4 <__assert_fail@plt+0x1804>
   13288:	mov	r4, #0
   1328c:	mov	r5, #-2147483648	; 0x80000000
   13290:	subs	r2, r4, r8
   13294:	sbc	r3, r5, r9
   13298:	ldrd	r4, [sp]
   1329c:	cmp	r4, r2
   132a0:	sbcs	r3, r5, r3
   132a4:	movlt	r3, #1
   132a8:	movge	r3, #0
   132ac:	b	12bd4 <__assert_fail@plt+0x1804>
   132b0:	ldrd	r2, [r0, #104]	; 0x68
   132b4:	ldrd	r4, [sp]
   132b8:	adds	r4, r4, r2
   132bc:	adc	r5, r5, r3
   132c0:	mov	r2, r4
   132c4:	mov	r3, r5
   132c8:	strd	r2, [r0, #104]	; 0x68
   132cc:	mov	ip, #0
   132d0:	b	12bfc <__assert_fail@plt+0x182c>
   132d4:	mov	r4, #0
   132d8:	mov	r5, #-2147483648	; 0x80000000
   132dc:	subs	r4, r4, r6
   132e0:	sbc	r5, r5, r7
   132e4:	ldrd	r2, [r0, #96]	; 0x60
   132e8:	cmp	r2, r4
   132ec:	sbcs	r3, r3, r5
   132f0:	movlt	r3, #1
   132f4:	movge	r3, #0
   132f8:	b	12c3c <__assert_fail@plt+0x186c>
   132fc:	mov	r4, #0
   13300:	mov	r5, #-2147483648	; 0x80000000
   13304:	subs	r2, r4, r8
   13308:	sbc	r3, r5, r9
   1330c:	cmp	r6, r2
   13310:	sbcs	r3, r7, r3
   13314:	movlt	r3, #1
   13318:	movge	r3, #0
   1331c:	b	12c3c <__assert_fail@plt+0x186c>
   13320:	ldrd	r2, [r0, #96]	; 0x60
   13324:	adds	r4, r2, r6
   13328:	adc	r5, r3, r7
   1332c:	strd	r4, [r0, #96]	; 0x60
   13330:	mov	r1, #0
   13334:	b	12c58 <__assert_fail@plt+0x1888>
   13338:	sub	sp, sp, #8
   1333c:	push	{r4, r5, r6, r7, r8, lr}
   13340:	mov	r8, r0
   13344:	add	r1, sp, #20
   13348:	stmib	r1, {r2, r3}
   1334c:	ldrd	r6, [sp, #48]	; 0x30
   13350:	ldrd	r4, [sp, #32]
   13354:	lsr	r3, r7, #31
   13358:	ldr	r2, [sp, #40]	; 0x28
   1335c:	cmp	r2, #2
   13360:	movgt	r3, #0
   13364:	andle	r3, r3, #1
   13368:	cmp	r3, #0
   1336c:	movne	r3, #100	; 0x64
   13370:	mulne	r2, r3, r5
   13374:	umullne	r4, r5, r4, r3
   13378:	addne	r5, r2, r5
   1337c:	cmp	r6, #0
   13380:	sbcs	r3, r7, #0
   13384:	blt	13438 <__assert_fail@plt+0x2068>
   13388:	cmp	r4, #0
   1338c:	sbcs	r3, r5, #0
   13390:	blt	13478 <__assert_fail@plt+0x20a8>
   13394:	add	r3, pc, #420	; 0x1a4
   13398:	ldrd	r2, [r3]
   1339c:	cmp	r2, r4
   133a0:	sbcs	r3, r3, r5
   133a4:	movlt	r3, #1
   133a8:	movge	r3, #0
   133ac:	cmp	r3, #0
   133b0:	mov	r1, #60	; 0x3c
   133b4:	umull	r2, r3, r4, r1
   133b8:	mla	r3, r1, r5, r3
   133bc:	movne	r1, #1
   133c0:	moveq	r1, #0
   133c4:	ldrb	r0, [sp, #24]
   133c8:	cmp	r0, #0
   133cc:	beq	134c8 <__assert_fail@plt+0x20f8>
   133d0:	cmp	r2, #0
   133d4:	sbcs	r0, r3, #0
   133d8:	bge	134b8 <__assert_fail@plt+0x20e8>
   133dc:	adds	r4, r2, #0
   133e0:	adc	r5, r3, #-2147483648	; 0x80000000
   133e4:	cmp	r4, r6
   133e8:	sbcs	r0, r5, r7
   133ec:	bge	134b8 <__assert_fail@plt+0x20e8>
   133f0:	subs	r2, r2, r6
   133f4:	sbc	r3, r3, r7
   133f8:	mov	r0, #1
   133fc:	orrs	r1, r1, r0
   13400:	movne	r0, #0
   13404:	bne	1342c <__assert_fail@plt+0x205c>
   13408:	adds	r0, r2, #1440	; 0x5a0
   1340c:	adc	r1, r3, #0
   13410:	cmp	r1, #0
   13414:	cmpeq	r0, #2880	; 0xb40
   13418:	rsbls	r2, r2, r2, lsl #4
   1341c:	lslls	r2, r2, #2
   13420:	strls	r2, [r8, #24]
   13424:	movls	r0, #1
   13428:	movhi	r0, #0
   1342c:	pop	{r4, r5, r6, r7, r8, lr}
   13430:	add	sp, sp, #8
   13434:	bx	lr
   13438:	mov	r2, #100	; 0x64
   1343c:	mov	r3, #0
   13440:	mov	r0, r4
   13444:	mov	r1, r5
   13448:	bl	1dd60 <__assert_fail@plt+0xc990>
   1344c:	mov	r3, #60	; 0x3c
   13450:	umull	r6, r7, r0, r3
   13454:	mla	r7, r3, r1, r7
   13458:	mov	r2, #100	; 0x64
   1345c:	mov	r3, #0
   13460:	mov	r0, r4
   13464:	mov	r1, r5
   13468:	bl	1dd60 <__assert_fail@plt+0xc990>
   1346c:	adds	r2, r2, r6
   13470:	adc	r3, r3, r7
   13474:	b	13408 <__assert_fail@plt+0x2038>
   13478:	mvn	r2, #0
   1347c:	mvn	r3, #0
   13480:	cmp	r5, r3
   13484:	cmpeq	r4, r2
   13488:	moveq	r3, #0
   1348c:	beq	133ac <__assert_fail@plt+0x1fdc>
   13490:	mov	r2, r4
   13494:	mov	r3, r5
   13498:	mov	r0, #0
   1349c:	mov	r1, #-2147483648	; 0x80000000
   134a0:	bl	1dd60 <__assert_fail@plt+0xc990>
   134a4:	cmp	r0, #60	; 0x3c
   134a8:	sbcs	r3, r1, #0
   134ac:	movlt	r3, #1
   134b0:	movge	r3, #0
   134b4:	b	133ac <__assert_fail@plt+0x1fdc>
   134b8:	subs	r2, r2, r6
   134bc:	sbc	r3, r3, r7
   134c0:	mov	r0, #0
   134c4:	b	133fc <__assert_fail@plt+0x202c>
   134c8:	cmp	r2, #0
   134cc:	sbcs	r0, r3, #0
   134d0:	blt	1350c <__assert_fail@plt+0x213c>
   134d4:	mvn	r4, #0
   134d8:	mvn	r5, #-2147483648	; 0x80000000
   134dc:	subs	r4, r4, r6
   134e0:	sbc	r5, r5, r7
   134e4:	cmp	r4, r2
   134e8:	sbcs	r0, r5, r3
   134ec:	movlt	r0, #1
   134f0:	movge	r0, #0
   134f4:	cmp	r0, #0
   134f8:	beq	13530 <__assert_fail@plt+0x2160>
   134fc:	adds	r2, r2, r6
   13500:	adc	r3, r3, r7
   13504:	mov	r0, #1
   13508:	b	133fc <__assert_fail@plt+0x202c>
   1350c:	mov	r4, #0
   13510:	mov	r5, #-2147483648	; 0x80000000
   13514:	subs	r4, r4, r2
   13518:	sbc	r5, r5, r3
   1351c:	cmp	r6, r4
   13520:	sbcs	r0, r7, r5
   13524:	movlt	r0, #1
   13528:	movge	r0, #0
   1352c:	b	134f4 <__assert_fail@plt+0x2124>
   13530:	adds	r2, r2, r6
   13534:	adc	r3, r3, r7
   13538:	mov	r0, #0
   1353c:	b	133fc <__assert_fail@plt+0x202c>
   13540:	eorcs	r2, r2, #536870914	; 0x20000002
   13544:	eoreq	r2, r2, #536870914	; 0x20000002
   13548:	ldr	r3, [r1, #24]
   1354c:	cmp	r3, #0
   13550:	blt	135bc <__assert_fail@plt+0x21ec>
   13554:	ldr	r3, [r0]
   13558:	ldr	r2, [r1]
   1355c:	eor	r3, r3, r2
   13560:	ldr	r2, [r0, #4]
   13564:	ldr	ip, [r1, #4]
   13568:	eor	r2, r2, ip
   1356c:	orr	r3, r3, r2
   13570:	ldr	r2, [r0, #8]
   13574:	ldr	ip, [r1, #8]
   13578:	eor	r2, r2, ip
   1357c:	orr	r3, r3, r2
   13580:	ldr	r2, [r0, #12]
   13584:	ldr	ip, [r1, #12]
   13588:	eor	r2, r2, ip
   1358c:	orr	r3, r3, r2
   13590:	ldr	r2, [r0, #16]
   13594:	ldr	ip, [r1, #16]
   13598:	eor	r2, r2, ip
   1359c:	orr	r3, r3, r2
   135a0:	ldr	r2, [r0, #20]
   135a4:	ldr	r1, [r1, #20]
   135a8:	eor	r2, r2, r1
   135ac:	orrs	r3, r3, r2
   135b0:	moveq	r0, #1
   135b4:	movne	r0, #0
   135b8:	bx	lr
   135bc:	mov	r0, #0
   135c0:	bx	lr
   135c4:	push	{r4, r5, r6, r7, r8, lr}
   135c8:	mov	r7, r0
   135cc:	mov	r6, r1
   135d0:	ldr	r4, [pc, #132]	; 1365c <__assert_fail@plt+0x228c>
   135d4:	ldr	r1, [pc, #132]	; 13660 <__assert_fail@plt+0x2290>
   135d8:	mov	r5, r4
   135dc:	mov	r0, r6
   135e0:	bl	110a0 <strcmp@plt>
   135e4:	cmp	r0, #0
   135e8:	beq	13654 <__assert_fail@plt+0x2284>
   135ec:	ldr	r1, [r4, #12]!
   135f0:	cmp	r1, #0
   135f4:	bne	135d8 <__assert_fail@plt+0x2208>
   135f8:	add	r4, r7, #192	; 0xc0
   135fc:	ldr	r1, [r7, #192]	; 0xc0
   13600:	cmp	r1, #0
   13604:	beq	13628 <__assert_fail@plt+0x2258>
   13608:	mov	r5, r4
   1360c:	mov	r0, r6
   13610:	bl	110a0 <strcmp@plt>
   13614:	cmp	r0, #0
   13618:	beq	13654 <__assert_fail@plt+0x2284>
   1361c:	ldr	r1, [r4, #12]!
   13620:	cmp	r1, #0
   13624:	bne	13608 <__assert_fail@plt+0x2238>
   13628:	ldr	r4, [pc, #52]	; 13664 <__assert_fail@plt+0x2294>
   1362c:	ldr	r1, [pc, #52]	; 13668 <__assert_fail@plt+0x2298>
   13630:	mov	r5, r4
   13634:	mov	r0, r6
   13638:	bl	110a0 <strcmp@plt>
   1363c:	cmp	r0, #0
   13640:	beq	13654 <__assert_fail@plt+0x2284>
   13644:	ldr	r1, [r4, #12]!
   13648:	cmp	r1, #0
   1364c:	bne	13630 <__assert_fail@plt+0x2260>
   13650:	mov	r5, #0
   13654:	mov	r0, r5
   13658:	pop	{r4, r5, r6, r7, r8, pc}
   1365c:	andeq	lr, r1, r8, ror sl
   13660:	andeq	pc, r1, r4, lsr #11
   13664:	andeq	lr, r1, r8, lsr #21
   13668:	andeq	pc, r1, r8, lsr #11
   1366c:	push	{r4, r5, r6, lr}
   13670:	sub	sp, sp, #16
   13674:	mov	r4, r0
   13678:	mov	r5, r1
   1367c:	mov	r6, r2
   13680:	ldrb	r3, [r0, #188]	; 0xbc
   13684:	cmp	r3, #0
   13688:	moveq	r0, #0
   1368c:	strbeq	r0, [r1]
   13690:	beq	136cc <__assert_fail@plt+0x22fc>
   13694:	ldrd	r2, [r4, #8]
   13698:	adds	r0, r2, #1
   1369c:	adc	r1, r3, #0
   136a0:	cmp	r1, #0
   136a4:	cmpeq	r0, #13
   136a8:	bhi	136fc <__assert_fail@plt+0x232c>
   136ac:	add	r3, r0, r0, lsl #2
   136b0:	add	r2, r0, r3, lsl #1
   136b4:	ldr	r3, [pc, #152]	; 13754 <__assert_fail@plt+0x2384>
   136b8:	add	r3, r3, r2
   136bc:	ldr	r2, [pc, #148]	; 13758 <__assert_fail@plt+0x2388>
   136c0:	mov	r1, r6
   136c4:	mov	r0, r5
   136c8:	bl	112b0 <snprintf@plt>
   136cc:	ldr	r3, [r4, #16]
   136d0:	cmp	r3, #6
   136d4:	bhi	136f0 <__assert_fail@plt+0x2320>
   136d8:	mvn	r2, r0
   136dc:	lsr	r2, r2, #31
   136e0:	cmp	r0, r6
   136e4:	movge	r2, #0
   136e8:	cmp	r2, #0
   136ec:	bne	13720 <__assert_fail@plt+0x2350>
   136f0:	mov	r0, r5
   136f4:	add	sp, sp, #16
   136f8:	pop	{r4, r5, r6, pc}
   136fc:	strd	r2, [sp, #8]
   13700:	ldr	r3, [pc, #84]	; 1375c <__assert_fail@plt+0x238c>
   13704:	str	r3, [sp]
   13708:	mvn	r3, #0
   1370c:	mov	r2, #1
   13710:	mov	r1, r6
   13714:	mov	r0, r5
   13718:	bl	113c4 <__snprintf_chk@plt>
   1371c:	b	136cc <__assert_fail@plt+0x22fc>
   13720:	ldr	r2, [pc, #56]	; 13760 <__assert_fail@plt+0x2390>
   13724:	add	r3, r2, r3, lsl #2
   13728:	str	r3, [sp, #4]
   1372c:	ldr	r3, [pc, #48]	; 13764 <__assert_fail@plt+0x2394>
   13730:	cmp	r0, #0
   13734:	addeq	r3, r3, #1
   13738:	str	r3, [sp]
   1373c:	mvn	r3, #0
   13740:	mov	r2, #1
   13744:	sub	r1, r6, r0
   13748:	add	r0, r5, r0
   1374c:	bl	113c4 <__snprintf_chk@plt>
   13750:	b	136f0 <__assert_fail@plt+0x2320>
   13754:	andeq	lr, r1, r8, ror #25
   13758:	andeq	lr, r1, r4, ror sl
   1375c:	andeq	pc, r1, ip, lsr #11
   13760:	andeq	lr, r1, r4, lsl #27
   13764:	andeq	lr, r1, r8, asr sl
   13768:	push	{r4, r5, r6, lr}
   1376c:	sub	sp, sp, #8
   13770:	mov	r5, r1
   13774:	subs	r4, r0, #0
   13778:	cmp	r0, #0
   1377c:	movlt	r2, #45	; 0x2d
   13780:	movge	r2, #43	; 0x2b
   13784:	ldr	r3, [pc, #248]	; 13884 <__assert_fail@plt+0x24b4>
   13788:	smull	r1, r3, r3, r0
   1378c:	add	r3, r3, r0
   13790:	asr	r6, r0, #31
   13794:	rsb	r6, r6, r3, asr #11
   13798:	eor	r3, r6, r6, asr #31
   1379c:	sub	r3, r3, r6, asr #31
   137a0:	str	r3, [sp, #4]
   137a4:	str	r2, [sp]
   137a8:	ldr	r3, [pc, #216]	; 13888 <__assert_fail@plt+0x24b8>
   137ac:	mvn	r2, #0
   137b0:	mov	r1, #1
   137b4:	mov	r0, r5
   137b8:	bl	112a4 <__sprintf_chk@plt>
   137bc:	mov	r3, #3600	; 0xe10
   137c0:	mul	r3, r3, r6
   137c4:	subs	r4, r4, r3
   137c8:	beq	13878 <__assert_fail@plt+0x24a8>
   137cc:	add	ip, r5, r0
   137d0:	cmp	r4, #0
   137d4:	rsblt	r4, r4, #0
   137d8:	ldr	r3, [pc, #172]	; 1388c <__assert_fail@plt+0x24bc>
   137dc:	smull	r2, r3, r3, r4
   137e0:	add	r3, r3, r4
   137e4:	asr	r1, r4, #31
   137e8:	rsb	r3, r1, r3, asr #5
   137ec:	mov	r2, r3
   137f0:	rsb	r3, r3, r3, lsl #4
   137f4:	mov	lr, #58	; 0x3a
   137f8:	strb	lr, [r5, r0]
   137fc:	ldr	r0, [pc, #140]	; 13890 <__assert_fail@plt+0x24c0>
   13800:	smull	lr, r0, r0, r4
   13804:	rsb	r1, r1, r0, asr #6
   13808:	add	r1, r1, #48	; 0x30
   1380c:	strb	r1, [ip, #1]
   13810:	ldr	r1, [pc, #124]	; 13894 <__assert_fail@plt+0x24c4>
   13814:	smull	r1, r0, r1, r2
   13818:	asr	r1, r2, #31
   1381c:	rsb	r1, r1, r0, asr #2
   13820:	add	r1, r1, r1, lsl #2
   13824:	sub	r2, r2, r1, lsl #1
   13828:	add	r2, r2, #48	; 0x30
   1382c:	strb	r2, [ip, #2]
   13830:	subs	r3, r4, r3, lsl #2
   13834:	addeq	r1, ip, #3
   13838:	beq	13870 <__assert_fail@plt+0x24a0>
   1383c:	mov	r2, #58	; 0x3a
   13840:	strb	r2, [ip, #3]
   13844:	ldr	r2, [pc, #72]	; 13894 <__assert_fail@plt+0x24c4>
   13848:	smull	r2, r1, r2, r3
   1384c:	asr	r2, r3, #31
   13850:	rsb	r2, r2, r1, asr #2
   13854:	add	r1, r2, #48	; 0x30
   13858:	strb	r1, [ip, #4]
   1385c:	add	r1, ip, #6
   13860:	add	r2, r2, r2, lsl #2
   13864:	sub	r3, r3, r2, lsl #1
   13868:	add	r3, r3, #48	; 0x30
   1386c:	strb	r3, [ip, #5]
   13870:	mov	r3, #0
   13874:	strb	r3, [r1]
   13878:	mov	r0, r5
   1387c:	add	sp, sp, #8
   13880:	pop	{r4, r5, r6, pc}
   13884:			; <UNDEFINED> instruction: 0x91a2b3c5
   13888:			; <UNDEFINED> instruction: 0x0001f5b4
   1388c:	stmhi	r8, {r0, r3, r7, fp, pc}
   13890:	blne	13b3f6c <optarg@@GLIBC_2.4+0x1382dc4>
   13894:	strbtvs	r6, [r6], -r7, ror #12
   13898:	push	{r4, r5, r6, lr}
   1389c:	sub	sp, sp, #8
   138a0:	mov	r6, r0
   138a4:	mov	r5, r1
   138a8:	ldr	r4, [pc, #88]	; 13908 <__assert_fail@plt+0x2538>
   138ac:	ldr	r3, [pc, #88]	; 1390c <__assert_fail@plt+0x253c>
   138b0:	cmp	r0, r3
   138b4:	addge	r4, r4, #1
   138b8:	mov	r1, #100	; 0x64
   138bc:	bl	1dd40 <__assert_fail@plt+0xc970>
   138c0:	cmp	r1, #0
   138c4:	rsblt	r1, r1, #0
   138c8:	str	r1, [sp, #4]
   138cc:	mov	r1, #100	; 0x64
   138d0:	mov	r0, r6
   138d4:	bl	1db20 <__assert_fail@plt+0xc750>
   138d8:	add	r0, r0, #19
   138dc:	cmp	r0, #0
   138e0:	rsblt	r0, r0, #0
   138e4:	str	r0, [sp]
   138e8:	mov	r3, r4
   138ec:	mvn	r2, #0
   138f0:	mov	r1, #1
   138f4:	mov	r0, r5
   138f8:	bl	112a4 <__sprintf_chk@plt>
   138fc:	mov	r0, r5
   13900:	add	sp, sp, #8
   13904:	pop	{r4, r5, r6, pc}
   13908:			; <UNDEFINED> instruction: 0x0001f5bc
   1390c:			; <UNDEFINED> instruction: 0xfffff894
   13910:	push	{r4, r5, lr}
   13914:	sub	sp, sp, #20
   13918:	mov	r4, r2
   1391c:	mov	r5, r3
   13920:	orrs	r3, r4, r5
   13924:	bne	13930 <__assert_fail@plt+0x2560>
   13928:	add	sp, sp, #20
   1392c:	pop	{r4, r5, pc}
   13930:	eor	r3, r0, #1
   13934:	ldr	r2, [pc, #36]	; 13960 <__assert_fail@plt+0x2590>
   13938:	ldr	r0, [r2]
   1393c:	ldr	r2, [sp, #32]
   13940:	str	r2, [sp, #8]
   13944:	strd	r4, [sp]
   13948:	ldr	r2, [pc, #20]	; 13964 <__assert_fail@plt+0x2594>
   1394c:	add	r2, r2, r3
   13950:	mov	r1, #1
   13954:	bl	112ec <__fprintf_chk@plt>
   13958:	mov	r0, #1
   1395c:	b	13928 <__assert_fail@plt+0x2558>
   13960:	andeq	r1, r3, r0, lsr #3
   13964:	andeq	pc, r1, r8, asr #11
   13968:	push	{r0, r1, r2, r3}
   1396c:	push	{r4, lr}
   13970:	sub	sp, sp, #8
   13974:	ldr	r4, [pc, #56]	; 139b4 <__assert_fail@plt+0x25e4>
   13978:	ldr	r3, [r4]
   1397c:	mov	r2, #6
   13980:	mov	r1, #1
   13984:	ldr	r0, [pc, #44]	; 139b8 <__assert_fail@plt+0x25e8>
   13988:	bl	11184 <fwrite@plt>
   1398c:	add	r3, sp, #20
   13990:	str	r3, [sp, #4]
   13994:	ldr	r2, [sp, #16]
   13998:	mov	r1, #1
   1399c:	ldr	r0, [r4]
   139a0:	bl	11208 <__vfprintf_chk@plt>
   139a4:	add	sp, sp, #8
   139a8:	pop	{r4, lr}
   139ac:	add	sp, sp, #16
   139b0:	bx	lr
   139b4:	andeq	r1, r3, r0, lsr #3
   139b8:	ldrdeq	pc, [r1], -r4
   139bc:	push	{r4, r5, r6, r7, r8, lr}
   139c0:	sub	sp, sp, #40	; 0x28
   139c4:	mov	r6, r1
   139c8:	mov	r4, r2
   139cc:	mov	r5, r3
   139d0:	mov	r3, #0
   139d4:	str	r3, [sp, #4]
   139d8:	str	r3, [sp]
   139dc:	mov	r3, r0
   139e0:	ldr	r2, [pc, #100]	; 13a4c <__assert_fail@plt+0x267c>
   139e4:	mov	r1, r5
   139e8:	mov	r0, r4
   139ec:	bl	1d77c <__assert_fail@plt+0xc3ac>
   139f0:	cmp	r6, #0
   139f4:	cmpne	r5, r0
   139f8:	ble	13a0c <__assert_fail@plt+0x263c>
   139fc:	mov	r7, r0
   13a00:	ldr	r3, [r6, #176]	; 0xb0
   13a04:	cmp	r3, #0
   13a08:	bne	13a18 <__assert_fail@plt+0x2648>
   13a0c:	mov	r0, r4
   13a10:	add	sp, sp, #40	; 0x28
   13a14:	pop	{r4, r5, r6, r7, r8, pc}
   13a18:	add	r8, r4, r0
   13a1c:	add	r1, sp, #12
   13a20:	ldr	r0, [r6, #24]
   13a24:	bl	13768 <__assert_fail@plt+0x2398>
   13a28:	str	r0, [sp, #4]
   13a2c:	ldr	r3, [pc, #28]	; 13a50 <__assert_fail@plt+0x2680>
   13a30:	str	r3, [sp]
   13a34:	mvn	r3, #0
   13a38:	mov	r2, #1
   13a3c:	sub	r1, r5, r7
   13a40:	mov	r0, r8
   13a44:	bl	113c4 <__snprintf_chk@plt>
   13a48:	b	13a0c <__assert_fail@plt+0x263c>
   13a4c:	ldrdeq	pc, [r1], -ip
   13a50:	strdeq	pc, [r1], -r8
   13a54:	ldrb	r3, [r1, #181]	; 0xb5
   13a58:	cmp	r3, #0
   13a5c:	bxeq	lr
   13a60:	push	{r4, r5, lr}
   13a64:	sub	sp, sp, #12
   13a68:	mov	r4, r1
   13a6c:	mov	r5, r0
   13a70:	mov	r2, #5
   13a74:	ldr	r1, [pc, #268]	; 13b88 <__assert_fail@plt+0x27b8>
   13a78:	mov	r0, #0
   13a7c:	bl	11130 <dcgettext@plt>
   13a80:	mov	r1, r5
   13a84:	bl	13968 <__assert_fail@plt+0x2598>
   13a88:	ldrd	r2, [r4, #96]	; 0x60
   13a8c:	orrs	r1, r2, r3
   13a90:	bne	13adc <__assert_fail@plt+0x270c>
   13a94:	ldrd	r0, [r4, #104]	; 0x68
   13a98:	orrs	r1, r0, r1
   13a9c:	bne	13adc <__assert_fail@plt+0x270c>
   13aa0:	ldrd	r0, [r4, #112]	; 0x70
   13aa4:	orrs	r1, r0, r1
   13aa8:	bne	13adc <__assert_fail@plt+0x270c>
   13aac:	ldrd	r0, [r4, #120]	; 0x78
   13ab0:	orrs	r1, r0, r1
   13ab4:	bne	13adc <__assert_fail@plt+0x270c>
   13ab8:	ldrd	r0, [r4, #128]	; 0x80
   13abc:	orrs	r1, r0, r1
   13ac0:	bne	13adc <__assert_fail@plt+0x270c>
   13ac4:	ldrd	r0, [r4, #136]	; 0x88
   13ac8:	orrs	r1, r0, r1
   13acc:	bne	13adc <__assert_fail@plt+0x270c>
   13ad0:	ldr	r1, [r4, #144]	; 0x90
   13ad4:	cmp	r1, #0
   13ad8:	beq	13b68 <__assert_fail@plt+0x2798>
   13adc:	ldr	r1, [pc, #168]	; 13b8c <__assert_fail@plt+0x27bc>
   13ae0:	str	r1, [sp]
   13ae4:	mov	r0, #0
   13ae8:	bl	13910 <__assert_fail@plt+0x2540>
   13aec:	ldr	r3, [pc, #156]	; 13b90 <__assert_fail@plt+0x27c0>
   13af0:	str	r3, [sp]
   13af4:	ldrd	r2, [r4, #104]	; 0x68
   13af8:	bl	13910 <__assert_fail@plt+0x2540>
   13afc:	ldr	r3, [pc, #144]	; 13b94 <__assert_fail@plt+0x27c4>
   13b00:	str	r3, [sp]
   13b04:	ldrd	r2, [r4, #112]	; 0x70
   13b08:	bl	13910 <__assert_fail@plt+0x2540>
   13b0c:	ldr	r3, [pc, #132]	; 13b98 <__assert_fail@plt+0x27c8>
   13b10:	str	r3, [sp]
   13b14:	ldrd	r2, [r4, #120]	; 0x78
   13b18:	bl	13910 <__assert_fail@plt+0x2540>
   13b1c:	ldr	r3, [pc, #120]	; 13b9c <__assert_fail@plt+0x27cc>
   13b20:	str	r3, [sp]
   13b24:	ldrd	r2, [r4, #128]	; 0x80
   13b28:	bl	13910 <__assert_fail@plt+0x2540>
   13b2c:	ldr	r3, [pc, #108]	; 13ba0 <__assert_fail@plt+0x27d0>
   13b30:	str	r3, [sp]
   13b34:	ldrd	r2, [r4, #136]	; 0x88
   13b38:	bl	13910 <__assert_fail@plt+0x2540>
   13b3c:	ldr	r2, [r4, #144]	; 0x90
   13b40:	ldr	r3, [pc, #92]	; 13ba4 <__assert_fail@plt+0x27d4>
   13b44:	str	r3, [sp]
   13b48:	asr	r3, r2, #31
   13b4c:	bl	13910 <__assert_fail@plt+0x2540>
   13b50:	ldr	r3, [pc, #80]	; 13ba8 <__assert_fail@plt+0x27d8>
   13b54:	ldr	r1, [r3]
   13b58:	mov	r0, #10
   13b5c:	bl	11340 <fputc@plt>
   13b60:	add	sp, sp, #12
   13b64:	pop	{r4, r5, pc}
   13b68:	mov	r2, #5
   13b6c:	ldr	r1, [pc, #56]	; 13bac <__assert_fail@plt+0x27dc>
   13b70:	mov	r0, #0
   13b74:	bl	11130 <dcgettext@plt>
   13b78:	ldr	r3, [pc, #40]	; 13ba8 <__assert_fail@plt+0x27d8>
   13b7c:	ldr	r1, [r3]
   13b80:	bl	11388 <fputs@plt>
   13b84:	b	13b60 <__assert_fail@plt+0x2790>
   13b88:	andeq	pc, r1, r0, lsl #12
   13b8c:	andeq	pc, r1, r4, lsr #12
   13b90:	andeq	pc, r1, ip, lsr #12
   13b94:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   13b98:	andeq	pc, r1, r0, asr #12
   13b9c:	andeq	pc, r1, r8, asr #12
   13ba0:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   13ba4:	andeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
   13ba8:	andeq	r1, r3, r0, lsr #3
   13bac:	andeq	pc, r1, r4, lsl r6	; <UNPREDICTABLE>
   13bb0:	push	{r4, r5, r6, r7, r8, r9, lr}
   13bb4:	sub	sp, sp, #132	; 0x84
   13bb8:	ldrb	r5, [r1, #181]	; 0xb5
   13bbc:	cmp	r5, #0
   13bc0:	bne	13bcc <__assert_fail@plt+0x27fc>
   13bc4:	add	sp, sp, #132	; 0x84
   13bc8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13bcc:	mov	r4, r1
   13bd0:	mov	r6, r0
   13bd4:	mov	r2, #5
   13bd8:	ldr	r1, [pc, #828]	; 13f1c <__assert_fail@plt+0x2b4c>
   13bdc:	mov	r0, #0
   13be0:	bl	11130 <dcgettext@plt>
   13be4:	mov	r1, r6
   13be8:	bl	13968 <__assert_fail@plt+0x2598>
   13bec:	ldr	r3, [r4, #156]	; 0x9c
   13bf0:	cmp	r3, #0
   13bf4:	beq	13c04 <__assert_fail@plt+0x2834>
   13bf8:	ldrb	r3, [r4, #182]	; 0xb6
   13bfc:	cmp	r3, #0
   13c00:	beq	13db8 <__assert_fail@plt+0x29e8>
   13c04:	ldrb	r2, [r4, #180]	; 0xb4
   13c08:	ldrb	r3, [r4, #187]	; 0xbb
   13c0c:	cmp	r2, r3
   13c10:	moveq	r6, #0
   13c14:	beq	13c54 <__assert_fail@plt+0x2884>
   13c18:	ldr	r3, [pc, #768]	; 13f20 <__assert_fail@plt+0x2b50>
   13c1c:	ldr	r6, [r3]
   13c20:	mov	r2, #5
   13c24:	ldr	r1, [pc, #760]	; 13f24 <__assert_fail@plt+0x2b54>
   13c28:	mov	r0, #0
   13c2c:	bl	11130 <dcgettext@plt>
   13c30:	ldrd	r2, [r4, #40]	; 0x28
   13c34:	strd	r2, [sp]
   13c38:	mov	r2, r0
   13c3c:	mov	r1, #1
   13c40:	mov	r0, r6
   13c44:	bl	112ec <__fprintf_chk@plt>
   13c48:	ldrb	r3, [r4, #180]	; 0xb4
   13c4c:	strb	r3, [r4, #187]	; 0xbb
   13c50:	mov	r6, r5
   13c54:	ldr	r3, [r4, #172]	; 0xac
   13c58:	cmp	r3, #0
   13c5c:	beq	13c6c <__assert_fail@plt+0x289c>
   13c60:	ldrb	r3, [r4, #185]	; 0xb9
   13c64:	cmp	r3, #0
   13c68:	beq	13e14 <__assert_fail@plt+0x2a44>
   13c6c:	ldr	r3, [r4, #160]	; 0xa0
   13c70:	cmp	r3, #0
   13c74:	beq	13ce8 <__assert_fail@plt+0x2918>
   13c78:	ldrb	r3, [r4, #183]	; 0xb7
   13c7c:	cmp	r3, #0
   13c80:	bne	13ce8 <__assert_fail@plt+0x2918>
   13c84:	cmp	r6, #0
   13c88:	bne	13ea8 <__assert_fail@plt+0x2ad8>
   13c8c:	ldr	r3, [pc, #652]	; 13f20 <__assert_fail@plt+0x2b50>
   13c90:	ldr	r6, [r3]
   13c94:	mov	r2, #5
   13c98:	ldr	r1, [pc, #648]	; 13f28 <__assert_fail@plt+0x2b58>
   13c9c:	mov	r0, #0
   13ca0:	bl	11130 <dcgettext@plt>
   13ca4:	mov	r7, r0
   13ca8:	mov	r2, #100	; 0x64
   13cac:	add	r1, sp, #28
   13cb0:	mov	r0, r4
   13cb4:	bl	1366c <__assert_fail@plt+0x229c>
   13cb8:	ldr	r3, [r4, #16]
   13cbc:	str	r3, [sp, #8]
   13cc0:	ldrd	r2, [r4, #8]
   13cc4:	strd	r2, [sp]
   13cc8:	mov	r3, r0
   13ccc:	mov	r2, r7
   13cd0:	mov	r1, #1
   13cd4:	mov	r0, r6
   13cd8:	bl	112ec <__fprintf_chk@plt>
   13cdc:	mov	r3, #1
   13ce0:	strb	r3, [r4, #183]	; 0xb7
   13ce4:	mov	r6, r5
   13ce8:	ldr	r3, [r4, #164]	; 0xa4
   13cec:	cmp	r3, #0
   13cf0:	beq	13d44 <__assert_fail@plt+0x2974>
   13cf4:	ldrb	r3, [r4, #184]	; 0xb8
   13cf8:	cmp	r3, #0
   13cfc:	bne	13d44 <__assert_fail@plt+0x2974>
   13d00:	ldr	r3, [pc, #536]	; 13f20 <__assert_fail@plt+0x2b50>
   13d04:	ldr	r0, [r3]
   13d08:	eor	r6, r6, #1
   13d0c:	ldr	r1, [r4, #168]	; 0xa8
   13d10:	ldr	r2, [pc, #532]	; 13f2c <__assert_fail@plt+0x2b5c>
   13d14:	ldr	r3, [pc, #532]	; 13f30 <__assert_fail@plt+0x2b60>
   13d18:	cmp	r1, #0
   13d1c:	moveq	r3, r2
   13d20:	str	r3, [sp]
   13d24:	ldr	r3, [r4, #20]
   13d28:	ldr	r2, [pc, #516]	; 13f34 <__assert_fail@plt+0x2b64>
   13d2c:	add	r2, r2, r6
   13d30:	mov	r1, #1
   13d34:	bl	112ec <__fprintf_chk@plt>
   13d38:	mov	r3, #1
   13d3c:	strb	r3, [r4, #184]	; 0xb8
   13d40:	mov	r6, r5
   13d44:	ldr	r3, [r4, #176]	; 0xb0
   13d48:	cmp	r3, #0
   13d4c:	beq	13d5c <__assert_fail@plt+0x298c>
   13d50:	ldrb	r3, [r4, #186]	; 0xba
   13d54:	cmp	r3, #0
   13d58:	beq	13ebc <__assert_fail@plt+0x2aec>
   13d5c:	ldrb	r3, [r4, #152]	; 0x98
   13d60:	cmp	r3, #0
   13d64:	beq	13da4 <__assert_fail@plt+0x29d4>
   13d68:	ldr	r4, [r4, #88]	; 0x58
   13d6c:	asr	r5, r4, #31
   13d70:	cmp	r6, #0
   13d74:	bne	13f08 <__assert_fail@plt+0x2b38>
   13d78:	ldr	r3, [pc, #416]	; 13f20 <__assert_fail@plt+0x2b50>
   13d7c:	ldr	r6, [r3]
   13d80:	mov	r2, #5
   13d84:	ldr	r1, [pc, #428]	; 13f38 <__assert_fail@plt+0x2b68>
   13d88:	mov	r0, #0
   13d8c:	bl	11130 <dcgettext@plt>
   13d90:	strd	r4, [sp]
   13d94:	mov	r2, r0
   13d98:	mov	r1, #1
   13d9c:	mov	r0, r6
   13da0:	bl	112ec <__fprintf_chk@plt>
   13da4:	ldr	r3, [pc, #372]	; 13f20 <__assert_fail@plt+0x2b50>
   13da8:	ldr	r1, [r3]
   13dac:	mov	r0, #10
   13db0:	bl	11340 <fputc@plt>
   13db4:	b	13bc4 <__assert_fail@plt+0x27f4>
   13db8:	ldr	r3, [pc, #352]	; 13f20 <__assert_fail@plt+0x2b50>
   13dbc:	ldr	r0, [r3]
   13dc0:	ldrd	r2, [r4, #64]	; 0x40
   13dc4:	strd	r2, [sp, #16]
   13dc8:	ldrd	r2, [r4, #56]	; 0x38
   13dcc:	strd	r2, [sp, #8]
   13dd0:	ldrd	r2, [r4, #40]	; 0x28
   13dd4:	strd	r2, [sp]
   13dd8:	ldr	r2, [pc, #348]	; 13f3c <__assert_fail@plt+0x2b6c>
   13ddc:	mov	r1, #1
   13de0:	bl	112ec <__fprintf_chk@plt>
   13de4:	mov	r3, #1
   13de8:	strb	r3, [r4, #182]	; 0xb6
   13dec:	ldrb	r2, [r4, #180]	; 0xb4
   13df0:	ldrb	r3, [r4, #187]	; 0xbb
   13df4:	cmp	r2, r3
   13df8:	moveq	r6, r5
   13dfc:	beq	13c54 <__assert_fail@plt+0x2884>
   13e00:	ldr	r3, [pc, #280]	; 13f20 <__assert_fail@plt+0x2b50>
   13e04:	ldr	r1, [r3]
   13e08:	mov	r0, #32
   13e0c:	bl	11340 <fputc@plt>
   13e10:	b	13c18 <__assert_fail@plt+0x2848>
   13e14:	eor	r6, r6, #1
   13e18:	ldr	r3, [pc, #256]	; 13f20 <__assert_fail@plt+0x2b50>
   13e1c:	ldr	r0, [r3]
   13e20:	ldr	r8, [r4, #88]	; 0x58
   13e24:	asr	r9, r8, #31
   13e28:	strd	r8, [sp, #16]
   13e2c:	ldrd	r8, [r4, #80]	; 0x50
   13e30:	strd	r8, [sp, #8]
   13e34:	ldrd	r8, [r4, #72]	; 0x48
   13e38:	strd	r8, [sp]
   13e3c:	ldr	r2, [pc, #252]	; 13f40 <__assert_fail@plt+0x2b70>
   13e40:	add	r2, r2, r6
   13e44:	mov	r1, #1
   13e48:	bl	112ec <__fprintf_chk@plt>
   13e4c:	ldr	r3, [r4, #92]	; 0x5c
   13e50:	cmp	r3, #0
   13e54:	bne	13e74 <__assert_fail@plt+0x2aa4>
   13e58:	ldr	r3, [r4, #28]
   13e5c:	cmp	r3, #1
   13e60:	beq	13e8c <__assert_fail@plt+0x2abc>
   13e64:	mov	r3, #1
   13e68:	strb	r3, [r4, #185]	; 0xb9
   13e6c:	mov	r6, r5
   13e70:	b	13c6c <__assert_fail@plt+0x289c>
   13e74:	ldr	r2, [pc, #200]	; 13f44 <__assert_fail@plt+0x2b74>
   13e78:	mov	r1, #1
   13e7c:	ldr	r0, [pc, #156]	; 13f20 <__assert_fail@plt+0x2b50>
   13e80:	ldr	r0, [r0]
   13e84:	bl	112ec <__fprintf_chk@plt>
   13e88:	b	13e58 <__assert_fail@plt+0x2a88>
   13e8c:	ldr	r3, [pc, #140]	; 13f20 <__assert_fail@plt+0x2b50>
   13e90:	ldr	r3, [r3]
   13e94:	mov	r2, #2
   13e98:	mov	r1, #1
   13e9c:	ldr	r0, [pc, #164]	; 13f48 <__assert_fail@plt+0x2b78>
   13ea0:	bl	11184 <fwrite@plt>
   13ea4:	b	13e64 <__assert_fail@plt+0x2a94>
   13ea8:	ldr	r3, [pc, #112]	; 13f20 <__assert_fail@plt+0x2b50>
   13eac:	ldr	r1, [r3]
   13eb0:	mov	r0, #32
   13eb4:	bl	11340 <fputc@plt>
   13eb8:	b	13c8c <__assert_fail@plt+0x28bc>
   13ebc:	ldr	r3, [pc, #92]	; 13f20 <__assert_fail@plt+0x2b50>
   13ec0:	ldr	r5, [r3]
   13ec4:	add	r1, sp, #28
   13ec8:	ldr	r0, [r4, #24]
   13ecc:	bl	13768 <__assert_fail@plt+0x2398>
   13ed0:	eor	r6, r6, #1
   13ed4:	mov	r3, r0
   13ed8:	ldr	r2, [pc, #108]	; 13f4c <__assert_fail@plt+0x2b7c>
   13edc:	add	r2, r2, r6
   13ee0:	mov	r1, #1
   13ee4:	mov	r0, r5
   13ee8:	bl	112ec <__fprintf_chk@plt>
   13eec:	mov	r3, #1
   13ef0:	strb	r3, [r4, #186]	; 0xba
   13ef4:	ldrb	r3, [r4, #152]	; 0x98
   13ef8:	cmp	r3, #0
   13efc:	beq	13da4 <__assert_fail@plt+0x29d4>
   13f00:	ldr	r4, [r4, #88]	; 0x58
   13f04:	asr	r5, r4, #31
   13f08:	ldr	r3, [pc, #16]	; 13f20 <__assert_fail@plt+0x2b50>
   13f0c:	ldr	r1, [r3]
   13f10:	mov	r0, #32
   13f14:	bl	11340 <fputc@plt>
   13f18:	b	13d78 <__assert_fail@plt+0x29a8>
   13f1c:	andeq	pc, r1, r0, lsl #12
   13f20:	andeq	r1, r3, r0, lsr #3
   13f24:	andeq	pc, r1, r4, lsl #13
   13f28:			; <UNDEFINED> instruction: 0x0001f6b8
   13f2c:	andeq	r0, r2, ip, asr #3
   13f30:	andeq	pc, r1, ip, asr r6	; <UNPREDICTABLE>
   13f34:	ldrdeq	pc, [r1], -r8
   13f38:	andeq	pc, r1, ip, ror #13
   13f3c:	andeq	pc, r1, r4, ror #12
   13f40:	muleq	r1, r4, r6
   13f44:	andeq	pc, r1, ip, lsr #13
   13f48:			; <UNDEFINED> instruction: 0x0001f6b4
   13f4c:	andeq	pc, r1, r4, ror #13
   13f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f54:	sub	sp, sp, #1440	; 0x5a0
   13f58:	sub	sp, sp, #4
   13f5c:	str	r0, [sp, #60]	; 0x3c
   13f60:	mov	r3, #0
   13f64:	add	r2, sp, #1344	; 0x540
   13f68:	strh	r3, [r2]
   13f6c:	add	sl, sp, #224	; 0xe0
   13f70:	mov	fp, r2
   13f74:	str	r3, [sp, #100]	; 0x64
   13f78:	mov	r8, r3
   13f7c:	mvn	r7, #1
   13f80:	ldr	r9, [pc, #3900]	; 14ec4 <__assert_fail@plt+0x3af4>
   13f84:	add	r3, r9, #1296	; 0x510
   13f88:	str	r3, [sp, #120]	; 0x78
   13f8c:	b	147cc <__assert_fail@plt+0x33fc>
   13f90:	add	r6, r6, #1
   13f94:	str	r6, [r0]
   13f98:	ldr	r6, [r0]
   13f9c:	ldrb	r5, [r6]
   13fa0:	cmp	r5, #9
   13fa4:	bcc	13fb8 <__assert_fail@plt+0x2be8>
   13fa8:	cmp	r5, #13
   13fac:	bls	13f90 <__assert_fail@plt+0x2bc0>
   13fb0:	cmp	r5, #32
   13fb4:	beq	13f90 <__assert_fail@plt+0x2bc0>
   13fb8:	sub	r3, r5, #48	; 0x30
   13fbc:	cmp	r3, #9
   13fc0:	bls	13ffc <__assert_fail@plt+0x2c2c>
   13fc4:	sub	r3, r5, #43	; 0x2b
   13fc8:	tst	r3, #253	; 0xfd
   13fcc:	beq	162d4 <__assert_fail@plt+0x4f04>
   13fd0:	cmp	r5, #65	; 0x41
   13fd4:	bcc	13fec <__assert_fail@plt+0x2c1c>
   13fd8:	cmp	r5, #90	; 0x5a
   13fdc:	bls	14284 <__assert_fail@plt+0x2eb4>
   13fe0:	sub	r3, r5, #97	; 0x61
   13fe4:	cmp	r3, #25
   13fe8:	bls	14284 <__assert_fail@plt+0x2eb4>
   13fec:	cmp	r5, #40	; 0x28
   13ff0:	bne	145c8 <__assert_fail@plt+0x31f8>
   13ff4:	mov	r1, #0
   13ff8:	b	145e4 <__assert_fail@plt+0x3214>
   13ffc:	cmp	r5, #45	; 0x2d
   14000:	movne	r3, #0
   14004:	moveq	r3, #1
   14008:	sub	r2, r5, #43	; 0x2b
   1400c:	tst	r2, #253	; 0xfd
   14010:	bne	14058 <__assert_fail@plt+0x2c88>
   14014:	cmp	r3, #0
   14018:	mvnne	r2, #0
   1401c:	moveq	r2, #1
   14020:	add	r6, r6, #1
   14024:	str	r6, [r0]
   14028:	ldrb	r5, [r6]
   1402c:	cmp	r5, #9
   14030:	bcc	14044 <__assert_fail@plt+0x2c74>
   14034:	cmp	r5, #13
   14038:	bls	14020 <__assert_fail@plt+0x2c50>
   1403c:	cmp	r5, #32
   14040:	beq	14020 <__assert_fail@plt+0x2c50>
   14044:	sub	r3, r5, #48	; 0x30
   14048:	cmp	r3, #9
   1404c:	bhi	13f98 <__assert_fail@plt+0x2bc8>
   14050:	str	r2, [sp, #64]	; 0x40
   14054:	b	14060 <__assert_fail@plt+0x2c90>
   14058:	mov	r3, #0
   1405c:	str	r3, [sp, #64]	; 0x40
   14060:	mov	r7, #0
   14064:	cmp	r7, #0
   14068:	blt	141b8 <__assert_fail@plt+0x2de8>
   1406c:	ldr	r3, [pc, #3668]	; 14ec8 <__assert_fail@plt+0x3af8>
   14070:	cmp	r7, r3
   14074:	movle	r0, #0
   14078:	movgt	r0, #1
   1407c:	cmp	r0, #0
   14080:	bne	14614 <__assert_fail@plt+0x3244>
   14084:	add	r7, r7, r7, lsl #2
   14088:	lsl	r7, r7, #1
   1408c:	ldr	r3, [sp, #64]	; 0x40
   14090:	cmp	r3, #0
   14094:	blt	141e0 <__assert_fail@plt+0x2e10>
   14098:	cmp	r5, #48	; 0x30
   1409c:	bpl	162f4 <__assert_fail@plt+0x4f24>
   140a0:	rsb	r3, r5, #-2147483600	; 0x80000030
   140a4:	cmp	r7, r3
   140a8:	movge	r3, #0
   140ac:	movlt	r3, #1
   140b0:	cmp	r3, #0
   140b4:	bne	1461c <__assert_fail@plt+0x324c>
   140b8:	ldr	r3, [sp, #64]	; 0x40
   140bc:	cmp	r3, #0
   140c0:	rsblt	r5, r5, #48	; 0x30
   140c4:	subge	r5, r5, #48	; 0x30
   140c8:	add	r3, r7, r5
   140cc:	mov	r7, r3
   140d0:	ldrb	r5, [r6, #1]!
   140d4:	sub	r2, r5, #48	; 0x30
   140d8:	cmp	r2, #9
   140dc:	bls	14064 <__assert_fail@plt+0x2c94>
   140e0:	and	r5, r5, #253	; 0xfd
   140e4:	cmp	r5, #44	; 0x2c
   140e8:	bne	1423c <__assert_fail@plt+0x2e6c>
   140ec:	ldrb	r2, [r6, #1]
   140f0:	sub	r1, r2, #48	; 0x30
   140f4:	cmp	r1, #9
   140f8:	bhi	1423c <__assert_fail@plt+0x2e6c>
   140fc:	add	r6, r6, #2
   14100:	mov	r2, r1
   14104:	mov	lr, #8
   14108:	add	r2, r2, r2, lsl #2
   1410c:	lsl	r0, r2, #1
   14110:	mov	r2, r0
   14114:	ldrb	r1, [r6]
   14118:	sub	ip, r1, #48	; 0x30
   1411c:	cmp	ip, #9
   14120:	addls	r6, r6, #1
   14124:	movls	r2, ip
   14128:	addls	r2, r0, r2
   1412c:	subs	lr, lr, #1
   14130:	bne	14108 <__assert_fail@plt+0x2d38>
   14134:	ldr	r1, [sp, #64]	; 0x40
   14138:	cmp	r1, #0
   1413c:	movlt	r1, r6
   14140:	blt	14218 <__assert_fail@plt+0x2e48>
   14144:	mov	r0, r6
   14148:	add	r6, r6, #1
   1414c:	ldrb	r1, [r0]
   14150:	sub	r1, r1, #48	; 0x30
   14154:	cmp	r1, #9
   14158:	bls	14144 <__assert_fail@plt+0x2d74>
   1415c:	adds	r1, r2, #0
   14160:	movne	r1, #1
   14164:	ldr	ip, [sp, #64]	; 0x40
   14168:	ands	r1, r1, ip, lsr #31
   1416c:	beq	14194 <__assert_fail@plt+0x2dc4>
   14170:	cmp	r7, #0
   14174:	bge	14184 <__assert_fail@plt+0x2db4>
   14178:	add	r7, r7, #-2147483648	; 0x80000000
   1417c:	cmp	r7, #0
   14180:	ble	14624 <__assert_fail@plt+0x3254>
   14184:	sub	r7, r3, #1
   14188:	rsb	r2, r2, #998244352	; 0x3b800000
   1418c:	add	r2, r2, #1753088	; 0x1ac000
   14190:	add	r2, r2, #2560	; 0xa00
   14194:	str	r7, [sp, #1384]	; 0x568
   14198:	str	r2, [sp, #1388]	; 0x56c
   1419c:	ldr	r3, [sp, #60]	; 0x3c
   141a0:	str	r0, [r3]
   141a4:	ldr	r7, [pc, #3360]	; 14ecc <__assert_fail@plt+0x3afc>
   141a8:	ldr	r3, [sp, #64]	; 0x40
   141ac:	cmp	r3, #0
   141b0:	movne	r7, #276	; 0x114
   141b4:	b	14278 <__assert_fail@plt+0x2ea8>
   141b8:	cmn	r7, #1
   141bc:	moveq	r0, #0
   141c0:	beq	1407c <__assert_fail@plt+0x2cac>
   141c4:	mov	r1, r7
   141c8:	mov	r0, #-2147483648	; 0x80000000
   141cc:	bl	1db20 <__assert_fail@plt+0xc750>
   141d0:	cmp	r0, #9
   141d4:	movgt	r0, #0
   141d8:	movle	r0, #1
   141dc:	b	1407c <__assert_fail@plt+0x2cac>
   141e0:	rsbs	r3, r5, #48	; 0x30
   141e4:	bmi	141f8 <__assert_fail@plt+0x2e28>
   141e8:	cmp	r7, #0
   141ec:	bge	162fc <__assert_fail@plt+0x4f2c>
   141f0:	rsb	r2, r5, #48	; 0x30
   141f4:	b	14204 <__assert_fail@plt+0x2e34>
   141f8:	rsb	r3, r3, #-2147483648	; 0x80000000
   141fc:	b	140a4 <__assert_fail@plt+0x2cd4>
   14200:	sub	r2, r5, #48	; 0x30
   14204:	rsb	r3, r7, #-2147483648	; 0x80000000
   14208:	cmp	r3, r2
   1420c:	movle	r3, #0
   14210:	movgt	r3, #1
   14214:	b	140b0 <__assert_fail@plt+0x2ce0>
   14218:	mov	r6, r1
   1421c:	ldrb	r0, [r1], #1
   14220:	sub	ip, r0, #48	; 0x30
   14224:	cmp	ip, #9
   14228:	bhi	14144 <__assert_fail@plt+0x2d74>
   1422c:	cmp	r0, #48	; 0x30
   14230:	beq	14218 <__assert_fail@plt+0x2e48>
   14234:	add	r2, r2, #1
   14238:	b	14144 <__assert_fail@plt+0x2d74>
   1423c:	ldr	r1, [sp, #64]	; 0x40
   14240:	lsr	r3, r1, #31
   14244:	strb	r3, [sp, #1384]	; 0x568
   14248:	mov	r2, r7
   1424c:	asr	r3, r7, #31
   14250:	strd	r2, [sp, #112]	; 0x70
   14254:	ldr	r2, [sp, #60]	; 0x3c
   14258:	ldr	r3, [r2]
   1425c:	sub	r3, r6, r3
   14260:	str	r3, [sp, #124]	; 0x7c
   14264:	str	r6, [r2]
   14268:	ldr	r7, [pc, #3168]	; 14ed0 <__assert_fail@plt+0x3b00>
   1426c:	ldr	r3, [pc, #3168]	; 14ed4 <__assert_fail@plt+0x3b04>
   14270:	cmp	r1, #0
   14274:	movne	r7, r3
   14278:	add	r3, r9, r7
   1427c:	ldrb	r3, [r3, #1992]	; 0x7c8
   14280:	b	14804 <__assert_fail@plt+0x3434>
   14284:	add	r3, sp, #148	; 0x94
   14288:	add	r2, sp, #167	; 0xa7
   1428c:	ldr	r0, [sp, #60]	; 0x3c
   14290:	b	1429c <__assert_fail@plt+0x2ecc>
   14294:	cmp	r5, #46	; 0x2e
   14298:	bne	142d8 <__assert_fail@plt+0x2f08>
   1429c:	cmp	r3, r2
   142a0:	strbcc	r5, [r3]
   142a4:	addcc	r3, r3, #1
   142a8:	ldr	r1, [r0]
   142ac:	add	ip, r1, #1
   142b0:	str	ip, [r0]
   142b4:	ldrb	r5, [r1, #1]
   142b8:	cmp	r5, #65	; 0x41
   142bc:	bcc	14294 <__assert_fail@plt+0x2ec4>
   142c0:	cmp	r5, #90	; 0x5a
   142c4:	bls	1429c <__assert_fail@plt+0x2ecc>
   142c8:	sub	r1, r5, #97	; 0x61
   142cc:	cmp	r1, #25
   142d0:	bhi	14294 <__assert_fail@plt+0x2ec4>
   142d4:	b	1429c <__assert_fail@plt+0x2ecc>
   142d8:	mov	r2, #0
   142dc:	strb	r2, [r3]
   142e0:	ldrb	r3, [sp, #148]	; 0x94
   142e4:	cmp	r3, r2
   142e8:	beq	14310 <__assert_fail@plt+0x2f40>
   142ec:	add	r2, sp, #148	; 0x94
   142f0:	mov	r1, r3
   142f4:	sub	r0, r3, #97	; 0x61
   142f8:	cmp	r0, #25
   142fc:	subls	r1, r3, #32
   14300:	strb	r1, [r2]
   14304:	ldrb	r3, [r2, #1]!
   14308:	cmp	r3, #0
   1430c:	bne	142f0 <__assert_fail@plt+0x2f20>
   14310:	add	r6, r9, #1248	; 0x4e0
   14314:	ldr	r1, [pc, #3004]	; 14ed8 <__assert_fail@plt+0x3b08>
   14318:	add	r3, sp, #148	; 0x94
   1431c:	str	r3, [sp, #64]	; 0x40
   14320:	mov	r5, r6
   14324:	ldr	r0, [sp, #64]	; 0x40
   14328:	bl	110a0 <strcmp@plt>
   1432c:	cmp	r0, #0
   14330:	beq	14564 <__assert_fail@plt+0x3194>
   14334:	ldr	r1, [r6, #12]!
   14338:	cmp	r1, #0
   1433c:	bne	14320 <__assert_fail@plt+0x2f50>
   14340:	add	r0, sp, #148	; 0x94
   14344:	bl	11274 <strlen@plt>
   14348:	mov	r3, r0
   1434c:	str	r0, [sp, #72]	; 0x48
   14350:	cmp	r0, #3
   14354:	moveq	r3, #1
   14358:	beq	14378 <__assert_fail@plt+0x2fa8>
   1435c:	cmp	r3, #4
   14360:	movne	r3, #0
   14364:	bne	14378 <__assert_fail@plt+0x2fa8>
   14368:	ldrb	r3, [sp, #151]	; 0x97
   1436c:	cmp	r3, #46	; 0x2e
   14370:	movne	r3, #0
   14374:	moveq	r3, #1
   14378:	str	r3, [sp, #64]	; 0x40
   1437c:	ldr	r3, [sp, #120]	; 0x78
   14380:	add	r6, r3, #12
   14384:	ldr	r1, [pc, #2896]	; 14edc <__assert_fail@plt+0x3b0c>
   14388:	add	r3, sp, #148	; 0x94
   1438c:	mov	r7, r3
   14390:	b	143b8 <__assert_fail@plt+0x2fe8>
   14394:	mov	r0, r7
   14398:	bl	110a0 <strcmp@plt>
   1439c:	clz	r0, r0
   143a0:	lsr	r0, r0, #5
   143a4:	cmp	r0, #0
   143a8:	bne	14564 <__assert_fail@plt+0x3194>
   143ac:	ldr	r1, [r6, #12]!
   143b0:	cmp	r1, #0
   143b4:	beq	143e0 <__assert_fail@plt+0x3010>
   143b8:	mov	r5, r6
   143bc:	ldr	r3, [sp, #64]	; 0x40
   143c0:	cmp	r3, #0
   143c4:	beq	14394 <__assert_fail@plt+0x2fc4>
   143c8:	mov	r2, #3
   143cc:	mov	r0, r7
   143d0:	bl	11394 <strncmp@plt>
   143d4:	clz	r0, r0
   143d8:	lsr	r0, r0, #5
   143dc:	b	143a4 <__assert_fail@plt+0x2fd4>
   143e0:	mov	r7, r0
   143e4:	add	r1, sp, #148	; 0x94
   143e8:	ldr	r0, [sp, #60]	; 0x3c
   143ec:	bl	135c4 <__assert_fail@plt+0x21f4>
   143f0:	subs	r5, r0, #0
   143f4:	bne	1456c <__assert_fail@plt+0x319c>
   143f8:	ldr	r1, [pc, #2784]	; 14ee0 <__assert_fail@plt+0x3b10>
   143fc:	add	r0, sp, #148	; 0x94
   14400:	bl	110a0 <strcmp@plt>
   14404:	cmp	r0, #0
   14408:	beq	162e4 <__assert_fail@plt+0x4f14>
   1440c:	add	r3, r9, #1600	; 0x640
   14410:	add	r3, r3, #8
   14414:	str	r3, [sp, #64]	; 0x40
   14418:	mov	r6, r3
   1441c:	ldr	r1, [pc, #2752]	; 14ee4 <__assert_fail@plt+0x3b14>
   14420:	add	r3, sp, #148	; 0x94
   14424:	str	r3, [sp, #76]	; 0x4c
   14428:	mov	r5, r6
   1442c:	ldr	r0, [sp, #76]	; 0x4c
   14430:	bl	110a0 <strcmp@plt>
   14434:	cmp	r0, #0
   14438:	beq	14564 <__assert_fail@plt+0x3194>
   1443c:	ldr	r1, [r6, #12]!
   14440:	cmp	r1, #0
   14444:	bne	14428 <__assert_fail@plt+0x3058>
   14448:	add	r6, sp, #148	; 0x94
   1444c:	ldr	r3, [sp, #72]	; 0x48
   14450:	sub	r3, r3, #1
   14454:	str	r3, [sp, #76]	; 0x4c
   14458:	ldrb	r3, [r6, r3]
   1445c:	cmp	r3, #83	; 0x53
   14460:	bne	144ac <__assert_fail@plt+0x30dc>
   14464:	mov	r3, #0
   14468:	ldr	r2, [sp, #76]	; 0x4c
   1446c:	strb	r3, [r6, r2]
   14470:	ldr	r1, [pc, #2668]	; 14ee4 <__assert_fail@plt+0x3b14>
   14474:	str	r6, [sp, #80]	; 0x50
   14478:	ldr	r5, [sp, #64]	; 0x40
   1447c:	ldr	r0, [sp, #80]	; 0x50
   14480:	bl	110a0 <strcmp@plt>
   14484:	cmp	r0, #0
   14488:	beq	14564 <__assert_fail@plt+0x3194>
   1448c:	ldr	r3, [sp, #64]	; 0x40
   14490:	ldr	r1, [r3, #12]!
   14494:	str	r3, [sp, #64]	; 0x40
   14498:	cmp	r1, #0
   1449c:	bne	14478 <__assert_fail@plt+0x30a8>
   144a0:	mov	r3, #83	; 0x53
   144a4:	ldr	r2, [sp, #76]	; 0x4c
   144a8:	strb	r3, [r6, r2]
   144ac:	add	r6, r9, #1728	; 0x6c0
   144b0:	add	r6, r6, #12
   144b4:	ldr	r1, [pc, #2604]	; 14ee8 <__assert_fail@plt+0x3b18>
   144b8:	add	r3, sp, #148	; 0x94
   144bc:	str	r3, [sp, #64]	; 0x40
   144c0:	mov	r5, r6
   144c4:	ldr	r0, [sp, #64]	; 0x40
   144c8:	bl	110a0 <strcmp@plt>
   144cc:	cmp	r0, #0
   144d0:	beq	14564 <__assert_fail@plt+0x3194>
   144d4:	ldr	r1, [r6, #12]!
   144d8:	cmp	r1, #0
   144dc:	bne	144c0 <__assert_fail@plt+0x30f0>
   144e0:	ldr	r3, [sp, #72]	; 0x48
   144e4:	cmp	r3, #1
   144e8:	bne	14508 <__assert_fail@plt+0x3138>
   144ec:	ldrb	r3, [sp, #148]	; 0x94
   144f0:	cmp	r3, #65	; 0x41
   144f4:	beq	162ec <__assert_fail@plt+0x4f1c>
   144f8:	add	r5, r9, #808	; 0x328
   144fc:	ldr	r2, [r5, #12]!
   14500:	cmp	r2, #0
   14504:	bne	14558 <__assert_fail@plt+0x3188>
   14508:	ldrb	r3, [sp, #148]	; 0x94
   1450c:	cmp	r3, #0
   14510:	addne	r3, sp, #160	; 0xa0
   14514:	addne	r3, sp, #148	; 0x94
   14518:	movne	r2, r3
   1451c:	movne	r0, #1
   14520:	bne	14588 <__assert_fail@plt+0x31b8>
   14524:	ldr	r3, [sp, #60]	; 0x3c
   14528:	ldrb	r3, [r3, #181]	; 0xb5
   1452c:	cmp	r3, #0
   14530:	moveq	r7, #63	; 0x3f
   14534:	beq	147ec <__assert_fail@plt+0x341c>
   14538:	mov	r2, #5
   1453c:	ldr	r1, [pc, #2472]	; 14eec <__assert_fail@plt+0x3b1c>
   14540:	mov	r0, #0
   14544:	bl	11130 <dcgettext@plt>
   14548:	add	r1, sp, #148	; 0x94
   1454c:	bl	13968 <__assert_fail@plt+0x2598>
   14550:	mov	r7, #63	; 0x3f
   14554:	b	147ec <__assert_fail@plt+0x341c>
   14558:	ldrb	r2, [r2]
   1455c:	cmp	r2, r3
   14560:	bne	144fc <__assert_fail@plt+0x312c>
   14564:	cmp	r5, #0
   14568:	beq	14524 <__assert_fail@plt+0x3154>
   1456c:	ldr	r2, [r5, #8]
   14570:	asr	r3, r2, #31
   14574:	add	r1, sp, #1376	; 0x560
   14578:	add	r1, r1, #8
   1457c:	strd	r2, [r1]
   14580:	ldr	r7, [r5, #4]
   14584:	b	147ec <__assert_fail@plt+0x341c>
   14588:	ldrb	r1, [r2]
   1458c:	cmp	r1, #46	; 0x2e
   14590:	addne	r3, r3, #1
   14594:	moveq	r7, r0
   14598:	ldrb	r1, [r2, #1]!
   1459c:	strb	r1, [r3]
   145a0:	cmp	r1, #0
   145a4:	bne	14588 <__assert_fail@plt+0x31b8>
   145a8:	cmp	r7, #0
   145ac:	beq	14524 <__assert_fail@plt+0x3154>
   145b0:	add	r1, sp, #148	; 0x94
   145b4:	ldr	r0, [sp, #60]	; 0x3c
   145b8:	bl	135c4 <__assert_fail@plt+0x21f4>
   145bc:	subs	r5, r0, #0
   145c0:	bne	1456c <__assert_fail@plt+0x319c>
   145c4:	b	14524 <__assert_fail@plt+0x3154>
   145c8:	add	r3, r6, #1
   145cc:	ldr	r2, [sp, #60]	; 0x3c
   145d0:	str	r3, [r2]
   145d4:	ldrb	r7, [r6]
   145d8:	b	147ec <__assert_fail@plt+0x341c>
   145dc:	cmp	r1, #0
   145e0:	beq	13f98 <__assert_fail@plt+0x2bc8>
   145e4:	ldr	r3, [r0]
   145e8:	add	r2, r3, #1
   145ec:	str	r2, [r0]
   145f0:	ldrb	r3, [r3]
   145f4:	cmp	r3, #0
   145f8:	beq	1462c <__assert_fail@plt+0x325c>
   145fc:	cmp	r3, #40	; 0x28
   14600:	addeq	r1, r1, #1
   14604:	beq	145dc <__assert_fail@plt+0x320c>
   14608:	cmp	r3, #41	; 0x29
   1460c:	subeq	r1, r1, #1
   14610:	b	145dc <__assert_fail@plt+0x320c>
   14614:	mov	r7, #63	; 0x3f
   14618:	b	147f4 <__assert_fail@plt+0x3424>
   1461c:	mov	r7, #63	; 0x3f
   14620:	b	147f4 <__assert_fail@plt+0x3424>
   14624:	mov	r7, #63	; 0x3f
   14628:	b	147f4 <__assert_fail@plt+0x3424>
   1462c:	mov	r3, #0
   14630:	mov	r7, r3
   14634:	b	14804 <__assert_fail@plt+0x3434>
   14638:	mov	r3, #0
   1463c:	mov	r7, r3
   14640:	b	14804 <__assert_fail@plt+0x3434>
   14644:	add	r4, r9, r4
   14648:	ldrb	r8, [r4, #2388]	; 0x954
   1464c:	cmp	r8, #0
   14650:	rsble	r6, r8, #0
   14654:	ble	14834 <__assert_fail@plt+0x3464>
   14658:	ldr	r3, [sp, #100]	; 0x64
   1465c:	cmp	r3, #0
   14660:	subne	r3, r3, #1
   14664:	strne	r3, [sp, #100]	; 0x64
   14668:	add	sl, sl, #56	; 0x38
   1466c:	add	r1, sp, #1392	; 0x570
   14670:	ldrd	r2, [sp, #112]	; 0x70
   14674:	strd	r2, [r1]
   14678:	ldr	r3, [sp, #124]	; 0x7c
   1467c:	str	r3, [sp, #1400]	; 0x578
   14680:	mov	ip, sl
   14684:	add	lr, sp, #1376	; 0x560
   14688:	add	lr, lr, #8
   1468c:	ldm	lr!, {r0, r1, r2, r3}
   14690:	stmia	ip!, {r0, r1, r2, r3}
   14694:	ldm	lr!, {r0, r1, r2, r3}
   14698:	stmia	ip!, {r0, r1, r2, r3}
   1469c:	ldm	lr!, {r0, r1, r2, r3}
   146a0:	stmia	ip!, {r0, r1, r2, r3}
   146a4:	ldm	lr, {r0, r1}
   146a8:	stm	ip, {r0, r1}
   146ac:	mov	lr, fp
   146b0:	mvn	r7, #1
   146b4:	b	147ac <__assert_fail@plt+0x33dc>
   146b8:	ldr	r2, [sp, #60]	; 0x3c
   146bc:	add	r3, r2, #88	; 0x58
   146c0:	ldm	sl, {r0, r1}
   146c4:	stm	r3, {r0, r1}
   146c8:	mov	r3, #1
   146cc:	strb	r3, [r2, #152]	; 0x98
   146d0:	mov	r2, #5
   146d4:	ldr	r1, [pc, #2068]	; 14ef0 <__assert_fail@plt+0x3b20>
   146d8:	mov	r0, #0
   146dc:	bl	11130 <dcgettext@plt>
   146e0:	ldr	r1, [sp, #60]	; 0x3c
   146e4:	bl	13bb0 <__assert_fail@plt+0x27e0>
   146e8:	rsb	r3, r8, r8, lsl #3
   146ec:	sub	sl, sl, r3, lsl #3
   146f0:	sub	lr, fp, r8, lsl #1
   146f4:	add	sl, sl, #56	; 0x38
   146f8:	ldr	r3, [sp, #76]	; 0x4c
   146fc:	str	r3, [sp, #176]	; 0xb0
   14700:	ldr	r3, [sp, #80]	; 0x50
   14704:	str	r3, [sp, #180]	; 0xb4
   14708:	ldrd	r2, [sp, #64]	; 0x40
   1470c:	strd	r2, [sp, #184]	; 0xb8
   14710:	ldr	r3, [sp, #92]	; 0x5c
   14714:	str	r3, [sp, #192]	; 0xc0
   14718:	ldr	r3, [sp, #96]	; 0x60
   1471c:	str	r3, [sp, #196]	; 0xc4
   14720:	ldr	r3, [sp, #84]	; 0x54
   14724:	str	r3, [sp, #200]	; 0xc8
   14728:	ldr	r3, [sp, #88]	; 0x58
   1472c:	str	r3, [sp, #204]	; 0xcc
   14730:	strd	r4, [sp, #208]	; 0xd0
   14734:	ldr	r3, [sp, #72]	; 0x48
   14738:	str	r3, [sp, #216]	; 0xd8
   1473c:	mov	r4, sl
   14740:	add	ip, sp, #168	; 0xa8
   14744:	ldm	ip!, {r0, r1, r2, r3}
   14748:	stmia	r4!, {r0, r1, r2, r3}
   1474c:	ldm	ip!, {r0, r1, r2, r3}
   14750:	stmia	r4!, {r0, r1, r2, r3}
   14754:	ldm	ip!, {r0, r1, r2, r3}
   14758:	stmia	r4!, {r0, r1, r2, r3}
   1475c:	ldm	ip, {r0, r1}
   14760:	stm	r4, {r0, r1}
   14764:	add	r6, r9, r6
   14768:	ldrb	r3, [r6, #2712]	; 0xa98
   1476c:	sub	r3, r3, #28
   14770:	ldrsh	r0, [lr]
   14774:	add	r2, r9, r3
   14778:	add	r2, r2, #2800	; 0xaf0
   1477c:	ldrsb	r2, [r2, #4]
   14780:	add	r2, r2, r0
   14784:	cmp	r2, #112	; 0x70
   14788:	bhi	147a0 <__assert_fail@plt+0x33d0>
   1478c:	add	r1, r9, r2
   14790:	add	r1, r1, #2272	; 0x8e0
   14794:	ldrsb	r1, [r1]
   14798:	cmp	r1, r0
   1479c:	beq	1614c <__assert_fail@plt+0x4d7c>
   147a0:	add	r3, r9, r3
   147a4:	add	r3, r3, #2832	; 0xb10
   147a8:	ldrsb	r8, [r3]
   147ac:	add	fp, lr, #2
   147b0:	strh	r8, [lr, #2]
   147b4:	add	r3, sp, #1376	; 0x560
   147b8:	add	r3, r3, #6
   147bc:	cmp	fp, r3
   147c0:	bcs	1622c <__assert_fail@plt+0x4e5c>
   147c4:	cmp	r8, #12
   147c8:	beq	1627c <__assert_fail@plt+0x4eac>
   147cc:	add	r3, r9, r8
   147d0:	add	r3, r3, #1120	; 0x460
   147d4:	ldrsb	r4, [r3, #12]
   147d8:	cmn	r4, #93	; 0x5d
   147dc:	beq	14824 <__assert_fail@plt+0x3454>
   147e0:	cmn	r7, #2
   147e4:	ldreq	r0, [sp, #60]	; 0x3c
   147e8:	beq	13f98 <__assert_fail@plt+0x2bc8>
   147ec:	cmp	r7, #0
   147f0:	ble	14638 <__assert_fail@plt+0x3268>
   147f4:	ldr	r3, [pc, #1744]	; 14ecc <__assert_fail@plt+0x3afc>
   147f8:	cmp	r7, r3
   147fc:	movhi	r3, #2
   14800:	bls	14278 <__assert_fail@plt+0x2ea8>
   14804:	add	r4, r3, r4
   14808:	cmp	r4, #112	; 0x70
   1480c:	bhi	14824 <__assert_fail@plt+0x3454>
   14810:	add	r2, r9, r4
   14814:	add	r2, r2, #2272	; 0x8e0
   14818:	ldrsb	r2, [r2]
   1481c:	cmp	r3, r2
   14820:	beq	14644 <__assert_fail@plt+0x3274>
   14824:	add	r3, r9, r8
   14828:	ldrb	r6, [r3, #2504]	; 0x9c8
   1482c:	cmp	r6, #0
   14830:	beq	16158 <__assert_fail@plt+0x4d88>
   14834:	add	r3, r9, r6
   14838:	ldrb	r8, [r3, #2620]	; 0xa3c
   1483c:	str	r8, [sp, #104]	; 0x68
   14840:	rsb	lr, r8, #1
   14844:	rsb	lr, lr, lr, lsl #3
   14848:	add	lr, sl, lr, lsl #3
   1484c:	add	ip, sp, #168	; 0xa8
   14850:	mov	r4, lr
   14854:	ldm	r4!, {r0, r1, r2, r3}
   14858:	stmia	ip!, {r0, r1, r2, r3}
   1485c:	ldm	r4!, {r0, r1, r2, r3}
   14860:	stmia	ip!, {r0, r1, r2, r3}
   14864:	ldm	r4!, {r0, r1, r2, r3}
   14868:	stmia	ip!, {r0, r1, r2, r3}
   1486c:	ldm	r4, {r0, r1}
   14870:	stm	ip, {r0, r1}
   14874:	ldr	r3, [lr, #8]
   14878:	str	r3, [sp, #76]	; 0x4c
   1487c:	ldr	r3, [lr, #12]
   14880:	str	r3, [sp, #80]	; 0x50
   14884:	ldrd	r2, [lr, #16]
   14888:	strd	r2, [sp, #64]	; 0x40
   1488c:	ldr	r3, [lr, #24]
   14890:	str	r3, [sp, #92]	; 0x5c
   14894:	ldr	r3, [lr, #28]
   14898:	str	r3, [sp, #96]	; 0x60
   1489c:	ldr	r3, [lr, #32]
   148a0:	str	r3, [sp, #84]	; 0x54
   148a4:	ldr	r3, [lr, #36]	; 0x24
   148a8:	str	r3, [sp, #88]	; 0x58
   148ac:	ldrd	r4, [lr, #40]	; 0x28
   148b0:	ldr	r3, [lr, #48]	; 0x30
   148b4:	str	r3, [sp, #72]	; 0x48
   148b8:	sub	r3, r6, #4
   148bc:	cmp	r3, #87	; 0x57
   148c0:	ldrls	pc, [pc, r3, lsl #2]
   148c4:	b	146e8 <__assert_fail@plt+0x3318>
   148c8:			; <UNDEFINED> instruction: 0x000146b8
   148cc:	andeq	r4, r1, r8, ror #13
   148d0:	andeq	r4, r1, r8, ror #13
   148d4:	andeq	r4, r1, r8, lsr #20
   148d8:	andeq	r4, r1, r0, ror #20
   148dc:	andeq	r4, r1, ip, lsl #21
   148e0:			; <UNDEFINED> instruction: 0x00014ab8
   148e4:	andeq	r4, r1, r4, ror #21
   148e8:	andeq	r4, r1, r0, lsl fp
   148ec:	andeq	r4, r1, ip, lsr fp
   148f0:	andeq	r4, r1, r8, asr fp
   148f4:	andeq	r4, r1, r4, ror fp
   148f8:	andeq	r4, r1, r8, ror #13
   148fc:	andeq	r4, r1, r8, ror #13
   14900:	muleq	r1, r0, fp
   14904:	andeq	r4, r1, r0, asr #23
   14908:	andeq	r4, r1, ip, ror #23
   1490c:	andeq	r4, r1, r8, ror #13
   14910:	andeq	r4, r1, r8, lsr #24
   14914:	andeq	r4, r1, r8, asr ip
   14918:	andeq	r4, r1, r4, lsl #25
   1491c:	andeq	r4, r1, r8, ror #13
   14920:	andeq	r4, r1, r8, ror #13
   14924:	andeq	r4, r1, r0, asr #25
   14928:	andeq	r4, r1, r4, lsl #26
   1492c:	andeq	r4, r1, r4, lsl sp
   14930:	andeq	r4, r1, r0, lsr sp
   14934:	andeq	r4, r1, r0, asr #26
   14938:	andeq	r4, r1, r0, asr sp
   1493c:			; <UNDEFINED> instruction: 0x00014db4
   14940:	andeq	r4, r1, r8, lsl lr
   14944:	andeq	r4, r1, r4, ror #31
   14948:	strdeq	r4, [r1], -r8
   1494c:	andeq	r5, r1, ip
   14950:	andeq	r5, r1, r8, lsr #32
   14954:	andeq	r5, r1, r4, asr #32
   14958:	andeq	r5, r1, r4, rrx
   1495c:	andeq	r5, r1, r4, lsl #1
   14960:	muleq	r1, ip, r0
   14964:	andeq	r5, r1, ip, ror r1
   14968:	andeq	r5, r1, r8, ror #3
   1496c:	muleq	r1, r8, r2
   14970:			; <UNDEFINED> instruction: 0x000152b0
   14974:	andeq	r5, r1, r0, ror #5
   14978:	strdeq	r5, [r1], -r8
   1497c:	andeq	r4, r1, r8, ror #13
   14980:	andeq	r5, r1, r8, lsr #6
   14984:	andeq	r5, r1, r0, ror #7
   14988:	andeq	r5, r1, r8, lsr #8
   1498c:	andeq	r5, r1, ip, ror #8
   14990:			; <UNDEFINED> instruction: 0x000154b0
   14994:	strdeq	r5, [r1], -r8
   14998:	andeq	r5, r1, r0, asr #10
   1499c:	andeq	r5, r1, ip, lsl #11
   149a0:	ldrdeq	r5, [r1], -r4
   149a4:	andeq	r5, r1, ip, lsl r6
   149a8:	andeq	r5, r1, r4, ror #12
   149ac:	andeq	r5, r1, r8, lsl #16
   149b0:	andeq	r5, r1, ip, lsr #19
   149b4:	strdeq	r5, [r1], -r0
   149b8:	andeq	r5, r1, r8, lsr sl
   149bc:	andeq	r5, r1, r0, lsl #21
   149c0:	andeq	r5, r1, r8, asr #21
   149c4:	andeq	r5, r1, r0, lsl fp
   149c8:	andeq	r5, r1, r8, asr fp
   149cc:	andeq	r5, r1, r0, lsr #23
   149d0:	andeq	r5, r1, r0, ror #23
   149d4:	andeq	r5, r1, r0, lsr #24
   149d8:	andeq	r5, r1, ip, ror #24
   149dc:			; <UNDEFINED> instruction: 0x00015cb8
   149e0:	andeq	r4, r1, r8, ror #13
   149e4:	strdeq	r5, [r1], -ip
   149e8:	andeq	r5, r1, r4, asr #26
   149ec:	andeq	r5, r1, ip, lsl #27
   149f0:	andeq	r5, r1, r0, lsr pc
   149f4:	andeq	r5, r1, r8, ror pc
   149f8:	andeq	r5, r1, r0, asr #31
   149fc:	andeq	r6, r1, r0
   14a00:	andeq	r4, r1, r8, ror #13
   14a04:	andeq	r4, r1, r8, ror #13
   14a08:	andeq	r4, r1, r8, ror #13
   14a0c:	andeq	r6, r1, r4, asr #32
   14a10:	andeq	r4, r1, r8, ror #13
   14a14:	andeq	r6, r1, ip, ror r0
   14a18:	strheq	r6, [r1], -r4
   14a1c:	ldrdeq	r6, [r1], -r0
   14a20:	andeq	r6, r1, r0, lsr r1
   14a24:	andeq	r6, r1, r0, asr #2
   14a28:	ldr	r2, [sp, #60]	; 0x3c
   14a2c:	ldr	r3, [r2, #172]	; 0xac
   14a30:	add	r3, r3, #1
   14a34:	str	r3, [r2, #172]	; 0xac
   14a38:	ldr	r3, [r2, #156]	; 0x9c
   14a3c:	add	r3, r3, #1
   14a40:	str	r3, [r2, #156]	; 0x9c
   14a44:	mov	r2, #5
   14a48:	ldr	r1, [pc, #1188]	; 14ef4 <__assert_fail@plt+0x3b24>
   14a4c:	mov	r0, #0
   14a50:	bl	11130 <dcgettext@plt>
   14a54:	ldr	r1, [sp, #60]	; 0x3c
   14a58:	bl	13bb0 <__assert_fail@plt+0x27e0>
   14a5c:	b	146e8 <__assert_fail@plt+0x3318>
   14a60:	ldr	r2, [sp, #60]	; 0x3c
   14a64:	ldr	r3, [r2, #172]	; 0xac
   14a68:	add	r3, r3, #1
   14a6c:	str	r3, [r2, #172]	; 0xac
   14a70:	mov	r2, #5
   14a74:	ldr	r1, [pc, #1148]	; 14ef8 <__assert_fail@plt+0x3b28>
   14a78:	mov	r0, #0
   14a7c:	bl	11130 <dcgettext@plt>
   14a80:	ldr	r1, [sp, #60]	; 0x3c
   14a84:	bl	13bb0 <__assert_fail@plt+0x27e0>
   14a88:	b	146e8 <__assert_fail@plt+0x3318>
   14a8c:	ldr	r2, [sp, #60]	; 0x3c
   14a90:	ldr	r3, [r2, #164]	; 0xa4
   14a94:	add	r3, r3, #1
   14a98:	str	r3, [r2, #164]	; 0xa4
   14a9c:	mov	r2, #5
   14aa0:	ldr	r1, [pc, #1108]	; 14efc <__assert_fail@plt+0x3b2c>
   14aa4:	mov	r0, #0
   14aa8:	bl	11130 <dcgettext@plt>
   14aac:	ldr	r1, [sp, #60]	; 0x3c
   14ab0:	bl	13bb0 <__assert_fail@plt+0x27e0>
   14ab4:	b	146e8 <__assert_fail@plt+0x3318>
   14ab8:	ldr	r2, [sp, #60]	; 0x3c
   14abc:	ldr	r3, [r2, #176]	; 0xb0
   14ac0:	add	r3, r3, #1
   14ac4:	str	r3, [r2, #176]	; 0xb0
   14ac8:	mov	r2, #5
   14acc:	ldr	r1, [pc, #1068]	; 14f00 <__assert_fail@plt+0x3b30>
   14ad0:	mov	r0, #0
   14ad4:	bl	11130 <dcgettext@plt>
   14ad8:	ldr	r1, [sp, #60]	; 0x3c
   14adc:	bl	13bb0 <__assert_fail@plt+0x27e0>
   14ae0:	b	146e8 <__assert_fail@plt+0x3318>
   14ae4:	ldr	r2, [sp, #60]	; 0x3c
   14ae8:	ldr	r3, [r2, #156]	; 0x9c
   14aec:	add	r3, r3, #1
   14af0:	str	r3, [r2, #156]	; 0x9c
   14af4:	mov	r2, #5
   14af8:	ldr	r1, [pc, #1028]	; 14f04 <__assert_fail@plt+0x3b34>
   14afc:	mov	r0, #0
   14b00:	bl	11130 <dcgettext@plt>
   14b04:	ldr	r1, [sp, #60]	; 0x3c
   14b08:	bl	13bb0 <__assert_fail@plt+0x27e0>
   14b0c:	b	146e8 <__assert_fail@plt+0x3318>
   14b10:	ldr	r2, [sp, #60]	; 0x3c
   14b14:	ldr	r3, [r2, #160]	; 0xa0
   14b18:	add	r3, r3, #1
   14b1c:	str	r3, [r2, #160]	; 0xa0
   14b20:	mov	r2, #5
   14b24:	ldr	r1, [pc, #988]	; 14f08 <__assert_fail@plt+0x3b38>
   14b28:	mov	r0, #0
   14b2c:	bl	11130 <dcgettext@plt>
   14b30:	ldr	r1, [sp, #60]	; 0x3c
   14b34:	bl	13bb0 <__assert_fail@plt+0x27e0>
   14b38:	b	146e8 <__assert_fail@plt+0x3318>
   14b3c:	mov	r2, #5
   14b40:	ldr	r1, [pc, #964]	; 14f0c <__assert_fail@plt+0x3b3c>
   14b44:	mov	r0, #0
   14b48:	bl	11130 <dcgettext@plt>
   14b4c:	ldr	r1, [sp, #60]	; 0x3c
   14b50:	bl	13a54 <__assert_fail@plt+0x2684>
   14b54:	b	146e8 <__assert_fail@plt+0x3318>
   14b58:	mov	r2, #5
   14b5c:	ldr	r1, [pc, #940]	; 14f10 <__assert_fail@plt+0x3b40>
   14b60:	mov	r0, #0
   14b64:	bl	11130 <dcgettext@plt>
   14b68:	ldr	r1, [sp, #60]	; 0x3c
   14b6c:	bl	13bb0 <__assert_fail@plt+0x27e0>
   14b70:	b	146e8 <__assert_fail@plt+0x3318>
   14b74:	mov	r2, #5
   14b78:	ldr	r1, [pc, #916]	; 14f14 <__assert_fail@plt+0x3b44>
   14b7c:	mov	r0, #0
   14b80:	bl	11130 <dcgettext@plt>
   14b84:	ldr	r1, [sp, #60]	; 0x3c
   14b88:	bl	13a54 <__assert_fail@plt+0x2684>
   14b8c:	b	146e8 <__assert_fail@plt+0x3318>
   14b90:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   14b94:	ldr	r1, [sp, #60]	; 0x3c
   14b98:	strd	r2, [r1, #72]	; 0x48
   14b9c:	mov	r2, #0
   14ba0:	mov	r3, #0
   14ba4:	strd	r2, [r1, #80]	; 0x50
   14ba8:	mov	r3, #0
   14bac:	str	r3, [r1, #88]	; 0x58
   14bb0:	str	r3, [r1, #92]	; 0x5c
   14bb4:	ldr	r3, [sl]
   14bb8:	str	r3, [r1, #28]
   14bbc:	b	146e8 <__assert_fail@plt+0x3318>
   14bc0:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   14bc4:	ldrd	r2, [sl, #-160]	; 0xffffff60
   14bc8:	ldr	ip, [sp, #60]	; 0x3c
   14bcc:	strd	r2, [ip, #72]	; 0x48
   14bd0:	strd	r0, [ip, #80]	; 0x50
   14bd4:	mov	r3, #0
   14bd8:	str	r3, [ip, #88]	; 0x58
   14bdc:	str	r3, [ip, #92]	; 0x5c
   14be0:	ldr	r3, [sl]
   14be4:	str	r3, [ip, #28]
   14be8:	b	146e8 <__assert_fail@plt+0x3318>
   14bec:	ldrd	r2, [sl, #-160]	; 0xffffff60
   14bf0:	strd	r2, [sp, #104]	; 0x68
   14bf4:	ldr	lr, [sl, #-56]	; 0xffffffc8
   14bf8:	ldr	ip, [sl, #-52]	; 0xffffffcc
   14bfc:	sub	r3, sl, #272	; 0x110
   14c00:	ldrd	r2, [r3]
   14c04:	ldr	r1, [sp, #60]	; 0x3c
   14c08:	strd	r2, [r1, #72]	; 0x48
   14c0c:	ldrd	r2, [sp, #104]	; 0x68
   14c10:	strd	r2, [r1, #80]	; 0x50
   14c14:	str	lr, [r1, #88]	; 0x58
   14c18:	str	ip, [r1, #92]	; 0x5c
   14c1c:	ldr	r3, [sl]
   14c20:	str	r3, [r1, #28]
   14c24:	b	146e8 <__assert_fail@plt+0x3318>
   14c28:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   14c2c:	ldr	r1, [sp, #60]	; 0x3c
   14c30:	strd	r2, [r1, #72]	; 0x48
   14c34:	mov	r2, #0
   14c38:	mov	r3, #0
   14c3c:	strd	r2, [r1, #80]	; 0x50
   14c40:	mov	r3, #0
   14c44:	str	r3, [r1, #88]	; 0x58
   14c48:	str	r3, [r1, #92]	; 0x5c
   14c4c:	mov	r3, #2
   14c50:	str	r3, [r1, #28]
   14c54:	b	146e8 <__assert_fail@plt+0x3318>
   14c58:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   14c5c:	ldrd	r2, [sl, #-160]	; 0xffffff60
   14c60:	ldr	ip, [sp, #60]	; 0x3c
   14c64:	strd	r2, [ip, #72]	; 0x48
   14c68:	strd	r0, [ip, #80]	; 0x50
   14c6c:	mov	r3, #0
   14c70:	str	r3, [ip, #88]	; 0x58
   14c74:	str	r3, [ip, #92]	; 0x5c
   14c78:	mov	r3, #2
   14c7c:	str	r3, [ip, #28]
   14c80:	b	146e8 <__assert_fail@plt+0x3318>
   14c84:	ldrd	r2, [sl, #-160]	; 0xffffff60
   14c88:	strd	r2, [sp, #104]	; 0x68
   14c8c:	ldr	lr, [sl, #-56]	; 0xffffffc8
   14c90:	ldr	ip, [sl, #-52]	; 0xffffffcc
   14c94:	sub	r3, sl, #272	; 0x110
   14c98:	ldrd	r2, [r3]
   14c9c:	ldr	r1, [sp, #60]	; 0x3c
   14ca0:	strd	r2, [r1, #72]	; 0x48
   14ca4:	ldrd	r2, [sp, #104]	; 0x68
   14ca8:	strd	r2, [r1, #80]	; 0x50
   14cac:	str	lr, [r1, #88]	; 0x58
   14cb0:	str	ip, [r1, #92]	; 0x5c
   14cb4:	mov	r3, #2
   14cb8:	str	r3, [r1, #28]
   14cbc:	b	146e8 <__assert_fail@plt+0x3318>
   14cc0:	ldr	ip, [sp, #60]	; 0x3c
   14cc4:	ldr	r3, [ip, #176]	; 0xb0
   14cc8:	add	r3, r3, #1
   14ccc:	str	r3, [ip, #176]	; 0xb0
   14cd0:	mov	r3, sl
   14cd4:	ldrd	r0, [r3], #-48	; 0xffffffd0
   14cd8:	strd	r0, [sp, #16]
   14cdc:	ldm	r3, {r0, r1, r2, r3}
   14ce0:	stm	sp, {r0, r1, r2, r3}
   14ce4:	sub	r3, sl, #56	; 0x38
   14ce8:	ldm	r3, {r2, r3}
   14cec:	mov	r0, ip
   14cf0:	bl	13338 <__assert_fail@plt+0x1f68>
   14cf4:	cmp	r0, #0
   14cf8:	bne	146e8 <__assert_fail@plt+0x3318>
   14cfc:	mov	r0, #1
   14d00:	b	16238 <__assert_fail@plt+0x4e68>
   14d04:	ldr	r3, [sl]
   14d08:	ldr	r2, [sp, #60]	; 0x3c
   14d0c:	str	r3, [r2, #20]
   14d10:	b	146e8 <__assert_fail@plt+0x3318>
   14d14:	mov	r3, #1
   14d18:	ldr	r2, [sp, #60]	; 0x3c
   14d1c:	str	r3, [r2, #20]
   14d20:	ldr	r3, [r2, #168]	; 0xa8
   14d24:	add	r3, r3, #1
   14d28:	str	r3, [r2, #168]	; 0xa8
   14d2c:	b	146e8 <__assert_fail@plt+0x3318>
   14d30:	ldr	r3, [sl]
   14d34:	ldr	r2, [sp, #60]	; 0x3c
   14d38:	str	r3, [r2, #24]
   14d3c:	b	146e8 <__assert_fail@plt+0x3318>
   14d40:	ldr	r3, [pc, #464]	; 14f18 <__assert_fail@plt+0x3b48>
   14d44:	ldr	r2, [sp, #60]	; 0x3c
   14d48:	str	r3, [r2, #24]
   14d4c:	b	146e8 <__assert_fail@plt+0x3318>
   14d50:	ldr	r3, [sl, #-56]	; 0xffffffc8
   14d54:	ldr	r2, [sp, #60]	; 0x3c
   14d58:	str	r3, [r2, #24]
   14d5c:	mov	r3, #1
   14d60:	str	r3, [sp, #48]	; 0x30
   14d64:	mov	ip, sp
   14d68:	add	lr, sl, #8
   14d6c:	ldm	lr!, {r0, r1, r2, r3}
   14d70:	stmia	ip!, {r0, r1, r2, r3}
   14d74:	ldm	lr!, {r0, r1, r2, r3}
   14d78:	stmia	ip!, {r0, r1, r2, r3}
   14d7c:	ldm	lr, {r0, r1, r2, r3}
   14d80:	stm	ip, {r0, r1, r2, r3}
   14d84:	ldm	sl, {r2, r3}
   14d88:	ldr	r0, [sp, #60]	; 0x3c
   14d8c:	bl	12978 <__assert_fail@plt+0x15a8>
   14d90:	cmp	r0, #0
   14d94:	beq	1628c <__assert_fail@plt+0x4ebc>
   14d98:	mov	r2, #5
   14d9c:	ldr	r1, [pc, #360]	; 14f0c <__assert_fail@plt+0x3b3c>
   14da0:	mov	r0, #0
   14da4:	bl	11130 <dcgettext@plt>
   14da8:	ldr	r1, [sp, #60]	; 0x3c
   14dac:	bl	13a54 <__assert_fail@plt+0x2684>
   14db0:	b	146e8 <__assert_fail@plt+0x3318>
   14db4:	ldr	r3, [pc, #348]	; 14f18 <__assert_fail@plt+0x3b48>
   14db8:	ldr	r2, [sp, #60]	; 0x3c
   14dbc:	str	r3, [r2, #24]
   14dc0:	mov	r3, #1
   14dc4:	str	r3, [sp, #48]	; 0x30
   14dc8:	mov	ip, sp
   14dcc:	add	lr, sl, #8
   14dd0:	ldm	lr!, {r0, r1, r2, r3}
   14dd4:	stmia	ip!, {r0, r1, r2, r3}
   14dd8:	ldm	lr!, {r0, r1, r2, r3}
   14ddc:	stmia	ip!, {r0, r1, r2, r3}
   14de0:	ldm	lr, {r0, r1, r2, r3}
   14de4:	stm	ip, {r0, r1, r2, r3}
   14de8:	ldm	sl, {r2, r3}
   14dec:	ldr	r0, [sp, #60]	; 0x3c
   14df0:	bl	12978 <__assert_fail@plt+0x15a8>
   14df4:	cmp	r0, #0
   14df8:	beq	16294 <__assert_fail@plt+0x4ec4>
   14dfc:	mov	r2, #5
   14e00:	ldr	r1, [pc, #260]	; 14f0c <__assert_fail@plt+0x3b3c>
   14e04:	mov	r0, #0
   14e08:	bl	11130 <dcgettext@plt>
   14e0c:	ldr	r1, [sp, #60]	; 0x3c
   14e10:	bl	13a54 <__assert_fail@plt+0x2684>
   14e14:	b	146e8 <__assert_fail@plt+0x3318>
   14e18:	mov	r3, sl
   14e1c:	ldrd	r0, [r3], #-48	; 0xffffffd0
   14e20:	strd	r0, [sp, #16]
   14e24:	ldm	r3, {r0, r1, r2, r3}
   14e28:	stm	sp, {r0, r1, r2, r3}
   14e2c:	sub	r3, sl, #56	; 0x38
   14e30:	ldm	r3, {r2, r3}
   14e34:	ldr	r0, [sp, #60]	; 0x3c
   14e38:	bl	13338 <__assert_fail@plt+0x1f68>
   14e3c:	cmp	r0, #0
   14e40:	beq	1629c <__assert_fail@plt+0x4ecc>
   14e44:	ldrd	r2, [sl, #-112]	; 0xffffff90
   14e48:	strd	r2, [sp, #128]	; 0x80
   14e4c:	cmp	r2, #0
   14e50:	sbcs	r3, r3, #0
   14e54:	blt	14f24 <__assert_fail@plt+0x3b54>
   14e58:	ldr	r3, [sp, #60]	; 0x3c
   14e5c:	ldr	ip, [r3, #24]
   14e60:	cmp	ip, #0
   14e64:	blt	14f94 <__assert_fail@plt+0x3bc4>
   14e68:	ldrd	r2, [sp, #128]	; 0x80
   14e6c:	cmp	r2, #-2147483648	; 0x80000000
   14e70:	sbcs	r1, r3, #0
   14e74:	bge	14fc8 <__assert_fail@plt+0x3bf8>
   14e78:	mvn	r0, #-2147483648	; 0x80000000
   14e7c:	mov	r1, #0
   14e80:	subs	r2, r0, r2
   14e84:	sbc	r3, r1, r3
   14e88:	mov	r0, r2
   14e8c:	mov	r1, r3
   14e90:	asr	r3, ip, #31
   14e94:	cmp	r0, ip
   14e98:	sbcs	r3, r1, r3
   14e9c:	movlt	r3, #1
   14ea0:	movge	r3, #0
   14ea4:	cmp	r3, #0
   14ea8:	bne	14fc8 <__assert_fail@plt+0x3bf8>
   14eac:	ldr	r2, [sp, #60]	; 0x3c
   14eb0:	ldr	r3, [r2, #24]
   14eb4:	ldr	r1, [sp, #128]	; 0x80
   14eb8:	add	r3, r3, r1
   14ebc:	str	r3, [r2, #24]
   14ec0:	b	146e8 <__assert_fail@plt+0x3318>
   14ec4:	andeq	lr, r1, r8, ror sl
   14ec8:	stcleq	12, cr12, [ip], {204}	; 0xcc
   14ecc:	andeq	r0, r0, r5, lsl r1
   14ed0:	andeq	r0, r0, r3, lsl r1
   14ed4:	andeq	r0, r0, r2, lsl r1
   14ed8:	andeq	pc, r1, r4, lsl #14
   14edc:	andeq	pc, r1, r8, lsl #14
   14ee0:	andeq	pc, r1, r4, lsr #14
   14ee4:	andeq	pc, r1, r0, lsl r7	; <UNPREDICTABLE>
   14ee8:	andeq	pc, r1, r8, lsl r7	; <UNPREDICTABLE>
   14eec:	andeq	pc, r1, r8, lsr #14
   14ef0:	andeq	pc, r1, r4, asr #14
   14ef4:	andeq	pc, r1, r8, asr r7	; <UNPREDICTABLE>
   14ef8:	andeq	pc, r1, ip, asr r7	; <UNPREDICTABLE>
   14efc:	andeq	pc, r1, r4, ror #14
   14f00:	andeq	pc, r1, r0, asr #25
   14f04:			; <UNDEFINED> instruction: 0x0001e9bc
   14f08:	andeq	pc, r1, r0, ror r7	; <UNPREDICTABLE>
   14f0c:	andeq	pc, r1, r4, ror r7	; <UNPREDICTABLE>
   14f10:	andeq	pc, r1, r0, lsl #15
   14f14:	andeq	pc, r1, r8, lsl #15
   14f18:			; <UNDEFINED> instruction: 0xffff9d90
   14f1c:	muleq	r1, r0, r7
   14f20:	andeq	pc, r1, ip, asr #15
   14f24:	ldr	r3, [sp, #60]	; 0x3c
   14f28:	ldr	ip, [r3, #24]
   14f2c:	mov	r2, ip
   14f30:	asr	r3, ip, #31
   14f34:	strd	r2, [sp, #136]	; 0x88
   14f38:	mov	r2, #-2147483648	; 0x80000000
   14f3c:	mvn	r3, #0
   14f40:	ldrd	r0, [sp, #128]	; 0x80
   14f44:	subs	r0, r2, r0
   14f48:	sbc	r1, r3, r1
   14f4c:	mov	r2, r0
   14f50:	mov	r3, r1
   14f54:	ldrd	r0, [sp, #136]	; 0x88
   14f58:	cmp	r0, r2
   14f5c:	sbcs	r3, r1, r3
   14f60:	movlt	r3, #1
   14f64:	blt	14ea4 <__assert_fail@plt+0x3ad4>
   14f68:	cmp	ip, #0
   14f6c:	movlt	r3, #0
   14f70:	blt	14ea4 <__assert_fail@plt+0x3ad4>
   14f74:	ldrd	r2, [sp, #128]	; 0x80
   14f78:	adds	r2, r2, r0
   14f7c:	adc	r3, r3, r1
   14f80:	cmp	r2, #-2147483648	; 0x80000000
   14f84:	sbcs	r3, r3, #0
   14f88:	movge	r3, #1
   14f8c:	movlt	r3, #0
   14f90:	b	14ea4 <__assert_fail@plt+0x3ad4>
   14f94:	rsb	r0, ip, #-2147483648	; 0x80000000
   14f98:	asr	r1, r0, #31
   14f9c:	ldrd	r2, [sp, #128]	; 0x80
   14fa0:	cmp	r2, r0
   14fa4:	sbcs	r1, r3, r1
   14fa8:	blt	14fc8 <__assert_fail@plt+0x3bf8>
   14fac:	adds	r2, r2, ip
   14fb0:	adc	r3, r3, ip, asr #31
   14fb4:	cmp	r2, #-2147483648	; 0x80000000
   14fb8:	sbcs	r3, r3, #0
   14fbc:	movge	r3, #1
   14fc0:	movlt	r3, #0
   14fc4:	b	14ea4 <__assert_fail@plt+0x3ad4>
   14fc8:	ldr	r2, [sp, #60]	; 0x3c
   14fcc:	ldr	r3, [r2, #24]
   14fd0:	ldr	r1, [sp, #128]	; 0x80
   14fd4:	add	r3, r3, r1
   14fd8:	str	r3, [r2, #24]
   14fdc:	mov	r0, #1
   14fe0:	b	16238 <__assert_fail@plt+0x4e68>
   14fe4:	ldr	r3, [sl]
   14fe8:	add	r3, r3, #3600	; 0xe10
   14fec:	ldr	r2, [sp, #60]	; 0x3c
   14ff0:	str	r3, [r2, #24]
   14ff4:	b	146e8 <__assert_fail@plt+0x3318>
   14ff8:	ldr	r3, [sl, #-56]	; 0xffffffc8
   14ffc:	add	r3, r3, #3600	; 0xe10
   15000:	ldr	r2, [sp, #60]	; 0x3c
   15004:	str	r3, [r2, #24]
   15008:	b	146e8 <__assert_fail@plt+0x3318>
   1500c:	mov	r2, #0
   15010:	mov	r3, #0
   15014:	ldr	r1, [sp, #60]	; 0x3c
   15018:	strd	r2, [r1, #8]
   1501c:	ldr	r3, [sl]
   15020:	str	r3, [r1, #16]
   15024:	b	146e8 <__assert_fail@plt+0x3318>
   15028:	mov	r2, #0
   1502c:	mov	r3, #0
   15030:	ldr	r1, [sp, #60]	; 0x3c
   15034:	strd	r2, [r1, #8]
   15038:	ldr	r3, [sl, #-56]	; 0xffffffc8
   1503c:	str	r3, [r1, #16]
   15040:	b	146e8 <__assert_fail@plt+0x3318>
   15044:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   15048:	ldr	r1, [sp, #60]	; 0x3c
   1504c:	strd	r2, [r1, #8]
   15050:	ldr	r3, [sl]
   15054:	str	r3, [r1, #16]
   15058:	mov	r3, #1
   1505c:	strb	r3, [r1, #188]	; 0xbc
   15060:	b	146e8 <__assert_fail@plt+0x3318>
   15064:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   15068:	ldr	r1, [sp, #60]	; 0x3c
   1506c:	strd	r2, [r1, #8]
   15070:	ldr	r3, [sl]
   15074:	str	r3, [r1, #16]
   15078:	mov	r3, #1
   1507c:	strb	r3, [r1, #188]	; 0xbc
   15080:	b	146e8 <__assert_fail@plt+0x3318>
   15084:	ldrd	r2, [sl, #-104]	; 0xffffff98
   15088:	ldr	r1, [sp, #60]	; 0x3c
   1508c:	strd	r2, [r1, #56]	; 0x38
   15090:	ldrd	r2, [sl, #8]
   15094:	strd	r2, [r1, #64]	; 0x40
   15098:	b	146e8 <__assert_fail@plt+0x3318>
   1509c:	ldr	r3, [sl, #-208]	; 0xffffff30
   150a0:	str	r3, [sp, #104]	; 0x68
   150a4:	cmp	r3, #3
   150a8:	ble	15120 <__assert_fail@plt+0x3d50>
   150ac:	ldr	r3, [sp, #60]	; 0x3c
   150b0:	ldrb	r3, [r3, #181]	; 0xb5
   150b4:	cmp	r3, #0
   150b8:	bne	150f0 <__assert_fail@plt+0x3d20>
   150bc:	ldr	r3, [sp, #60]	; 0x3c
   150c0:	add	ip, r3, #32
   150c4:	sub	lr, sl, #224	; 0xe0
   150c8:	ldm	lr!, {r0, r1, r2, r3}
   150cc:	stmia	ip!, {r0, r1, r2, r3}
   150d0:	ldm	lr, {r0, r1}
   150d4:	stm	ip, {r0, r1}
   150d8:	ldrd	r2, [sl, #-104]	; 0xffffff98
   150dc:	ldr	r1, [sp, #60]	; 0x3c
   150e0:	strd	r2, [r1, #56]	; 0x38
   150e4:	ldrd	r2, [sl, #8]
   150e8:	strd	r2, [r1, #64]	; 0x40
   150ec:	b	146e8 <__assert_fail@plt+0x3318>
   150f0:	mov	r2, #5
   150f4:	ldr	r1, [pc, #-480]	; 14f1c <__assert_fail@plt+0x3b4c>
   150f8:	mov	r0, #0
   150fc:	bl	11130 <dcgettext@plt>
   15100:	ldrd	r2, [sl, #-216]	; 0xffffff28
   15104:	strd	r2, [sp, #128]	; 0x80
   15108:	ldr	r2, [sp, #104]	; 0x68
   1510c:	asr	r3, r2, #31
   15110:	strd	r2, [sp]
   15114:	ldrd	r2, [sp, #128]	; 0x80
   15118:	bl	13968 <__assert_fail@plt+0x2598>
   1511c:	b	150bc <__assert_fail@plt+0x3cec>
   15120:	ldr	r3, [sp, #60]	; 0x3c
   15124:	ldrb	r3, [r3, #181]	; 0xb5
   15128:	cmp	r3, #0
   1512c:	bne	15160 <__assert_fail@plt+0x3d90>
   15130:	ldrd	r2, [sl, #-216]	; 0xffffff28
   15134:	ldr	r1, [sp, #60]	; 0x3c
   15138:	strd	r2, [r1, #56]	; 0x38
   1513c:	ldrd	r2, [sl, #-104]	; 0xffffff98
   15140:	strd	r2, [r1, #64]	; 0x40
   15144:	add	ip, r1, #32
   15148:	mov	lr, sl
   1514c:	ldm	lr!, {r0, r1, r2, r3}
   15150:	stmia	ip!, {r0, r1, r2, r3}
   15154:	ldm	lr, {r0, r1}
   15158:	stm	ip, {r0, r1}
   1515c:	b	146e8 <__assert_fail@plt+0x3318>
   15160:	mov	r2, #5
   15164:	ldr	r1, [pc, #-588]	; 14f20 <__assert_fail@plt+0x3b50>
   15168:	mov	r0, #0
   1516c:	bl	11130 <dcgettext@plt>
   15170:	ldrd	r2, [sl, #-216]	; 0xffffff28
   15174:	bl	13968 <__assert_fail@plt+0x2598>
   15178:	b	15130 <__assert_fail@plt+0x3d60>
   1517c:	ldrd	r2, [sl, #-104]	; 0xffffff98
   15180:	ldr	r1, [sp, #60]	; 0x3c
   15184:	strd	r2, [r1, #64]	; 0x40
   15188:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   1518c:	strd	r2, [r1, #56]	; 0x38
   15190:	ldrd	r2, [sl, #8]
   15194:	cmp	r2, #0
   15198:	sbcs	r1, r3, #0
   1519c:	blt	151bc <__assert_fail@plt+0x3dec>
   151a0:	rsbs	r2, r2, #0
   151a4:	rsc	r3, r3, #0
   151a8:	ldr	r1, [sp, #60]	; 0x3c
   151ac:	strd	r2, [r1, #40]	; 0x28
   151b0:	ldr	r3, [sl, #16]
   151b4:	str	r3, [r1, #48]	; 0x30
   151b8:	b	146e8 <__assert_fail@plt+0x3318>
   151bc:	subs	r0, r2, #1
   151c0:	sbc	r1, r3, #-2147483648	; 0x80000000
   151c4:	cmp	r0, #0
   151c8:	sbcs	r1, r1, #0
   151cc:	bge	151a0 <__assert_fail@plt+0x3dd0>
   151d0:	rsbs	r2, r2, #0
   151d4:	rsc	r3, r3, #0
   151d8:	ldr	r1, [sp, #60]	; 0x3c
   151dc:	strd	r2, [r1, #40]	; 0x28
   151e0:	mov	r0, #1
   151e4:	b	16238 <__assert_fail@plt+0x4e68>
   151e8:	ldrd	r2, [sl, #-112]	; 0xffffff90
   151ec:	ldr	r1, [sp, #60]	; 0x3c
   151f0:	strd	r2, [r1, #56]	; 0x38
   151f4:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   151f8:	cmp	r2, #0
   151fc:	sbcs	r1, r3, #0
   15200:	blt	15240 <__assert_fail@plt+0x3e70>
   15204:	rsbs	r2, r2, #0
   15208:	rsc	r3, r3, #0
   1520c:	ldr	r1, [sp, #60]	; 0x3c
   15210:	strd	r2, [r1, #64]	; 0x40
   15214:	ldrd	r2, [sl, #8]
   15218:	cmp	r2, #0
   1521c:	sbcs	r1, r3, #0
   15220:	blt	1526c <__assert_fail@plt+0x3e9c>
   15224:	rsbs	r2, r2, #0
   15228:	rsc	r3, r3, #0
   1522c:	ldr	r1, [sp, #60]	; 0x3c
   15230:	strd	r2, [r1, #40]	; 0x28
   15234:	ldr	r3, [sl, #16]
   15238:	str	r3, [r1, #48]	; 0x30
   1523c:	b	146e8 <__assert_fail@plt+0x3318>
   15240:	subs	r0, r2, #1
   15244:	sbc	r1, r3, #-2147483648	; 0x80000000
   15248:	cmp	r0, #0
   1524c:	sbcs	r1, r1, #0
   15250:	bge	15204 <__assert_fail@plt+0x3e34>
   15254:	rsbs	r2, r2, #0
   15258:	rsc	r3, r3, #0
   1525c:	ldr	r1, [sp, #60]	; 0x3c
   15260:	strd	r2, [r1, #64]	; 0x40
   15264:	mov	r0, #1
   15268:	b	16238 <__assert_fail@plt+0x4e68>
   1526c:	subs	r0, r2, #1
   15270:	sbc	r1, r3, #-2147483648	; 0x80000000
   15274:	cmp	r0, #0
   15278:	sbcs	r1, r1, #0
   1527c:	bge	15224 <__assert_fail@plt+0x3e54>
   15280:	rsbs	r2, r2, #0
   15284:	rsc	r3, r3, #0
   15288:	ldr	r1, [sp, #60]	; 0x3c
   1528c:	strd	r2, [r1, #40]	; 0x28
   15290:	mov	r0, #1
   15294:	b	16238 <__assert_fail@plt+0x4e68>
   15298:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   1529c:	ldr	r1, [sp, #60]	; 0x3c
   152a0:	strd	r2, [r1, #56]	; 0x38
   152a4:	ldrd	r2, [sl, #8]
   152a8:	strd	r2, [r1, #64]	; 0x40
   152ac:	b	146e8 <__assert_fail@plt+0x3318>
   152b0:	ldrd	r2, [sl, #-168]	; 0xffffff58
   152b4:	ldr	r1, [sp, #60]	; 0x3c
   152b8:	strd	r2, [r1, #56]	; 0x38
   152bc:	ldrd	r2, [sl, #-104]	; 0xffffff98
   152c0:	strd	r2, [r1, #64]	; 0x40
   152c4:	add	ip, r1, #32
   152c8:	mov	lr, sl
   152cc:	ldm	lr!, {r0, r1, r2, r3}
   152d0:	stmia	ip!, {r0, r1, r2, r3}
   152d4:	ldm	lr, {r0, r1}
   152d8:	stm	ip, {r0, r1}
   152dc:	b	146e8 <__assert_fail@plt+0x3318>
   152e0:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   152e4:	ldr	r1, [sp, #60]	; 0x3c
   152e8:	strd	r2, [r1, #64]	; 0x40
   152ec:	ldrd	r2, [sl]
   152f0:	strd	r2, [r1, #56]	; 0x38
   152f4:	b	146e8 <__assert_fail@plt+0x3318>
   152f8:	ldrd	r2, [sl, #-104]	; 0xffffff98
   152fc:	ldr	r1, [sp, #60]	; 0x3c
   15300:	strd	r2, [r1, #64]	; 0x40
   15304:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   15308:	strd	r2, [r1, #56]	; 0x38
   1530c:	add	ip, r1, #32
   15310:	mov	lr, sl
   15314:	ldm	lr!, {r0, r1, r2, r3}
   15318:	stmia	ip!, {r0, r1, r2, r3}
   1531c:	ldm	lr, {r0, r1}
   15320:	stm	ip, {r0, r1}
   15324:	b	146e8 <__assert_fail@plt+0x3318>
   15328:	ldr	r3, [sp, #60]	; 0x3c
   1532c:	add	ip, r3, #32
   15330:	sub	lr, sl, #112	; 0x70
   15334:	ldm	lr!, {r0, r1, r2, r3}
   15338:	stmia	ip!, {r0, r1, r2, r3}
   1533c:	ldm	lr, {r0, r1}
   15340:	stm	ip, {r0, r1}
   15344:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   15348:	cmp	r2, #0
   1534c:	sbcs	r1, r3, #0
   15350:	blt	15388 <__assert_fail@plt+0x3fb8>
   15354:	rsbs	r2, r2, #0
   15358:	rsc	r3, r3, #0
   1535c:	ldr	r1, [sp, #60]	; 0x3c
   15360:	strd	r2, [r1, #56]	; 0x38
   15364:	ldrd	r2, [sl, #8]
   15368:	cmp	r2, #0
   1536c:	sbcs	r1, r3, #0
   15370:	blt	153b4 <__assert_fail@plt+0x3fe4>
   15374:	rsbs	r2, r2, #0
   15378:	rsc	r3, r3, #0
   1537c:	ldr	r1, [sp, #60]	; 0x3c
   15380:	strd	r2, [r1, #64]	; 0x40
   15384:	b	146e8 <__assert_fail@plt+0x3318>
   15388:	subs	r0, r2, #1
   1538c:	sbc	r1, r3, #-2147483648	; 0x80000000
   15390:	cmp	r0, #0
   15394:	sbcs	r1, r1, #0
   15398:	bge	15354 <__assert_fail@plt+0x3f84>
   1539c:	rsbs	r2, r2, #0
   153a0:	rsc	r3, r3, #0
   153a4:	ldr	r1, [sp, #60]	; 0x3c
   153a8:	strd	r2, [r1, #56]	; 0x38
   153ac:	mov	r0, #1
   153b0:	b	16238 <__assert_fail@plt+0x4e68>
   153b4:	subs	r0, r2, #1
   153b8:	sbc	r1, r3, #-2147483648	; 0x80000000
   153bc:	cmp	r0, #0
   153c0:	sbcs	r1, r1, #0
   153c4:	bge	15374 <__assert_fail@plt+0x3fa4>
   153c8:	rsbs	r2, r2, #0
   153cc:	rsc	r3, r3, #0
   153d0:	ldr	r1, [sp, #60]	; 0x3c
   153d4:	strd	r2, [r1, #64]	; 0x40
   153d8:	mov	r0, #1
   153dc:	b	16238 <__assert_fail@plt+0x4e68>
   153e0:	mov	ip, sl
   153e4:	ldr	r3, [ip], #-48	; 0xffffffd0
   153e8:	str	r3, [sp, #48]	; 0x30
   153ec:	mov	lr, sp
   153f0:	ldm	ip!, {r0, r1, r2, r3}
   153f4:	stmia	lr!, {r0, r1, r2, r3}
   153f8:	ldm	ip!, {r0, r1, r2, r3}
   153fc:	stmia	lr!, {r0, r1, r2, r3}
   15400:	ldm	ip, {r0, r1, r2, r3}
   15404:	stm	lr, {r0, r1, r2, r3}
   15408:	sub	r3, sl, #56	; 0x38
   1540c:	ldm	r3, {r2, r3}
   15410:	ldr	r0, [sp, #60]	; 0x3c
   15414:	bl	12978 <__assert_fail@plt+0x15a8>
   15418:	cmp	r0, #0
   1541c:	bne	146e8 <__assert_fail@plt+0x3318>
   15420:	mov	r0, #1
   15424:	b	16238 <__assert_fail@plt+0x4e68>
   15428:	mov	r3, #1
   1542c:	str	r3, [sp, #48]	; 0x30
   15430:	mov	ip, sp
   15434:	add	lr, sl, #8
   15438:	ldm	lr!, {r0, r1, r2, r3}
   1543c:	stmia	ip!, {r0, r1, r2, r3}
   15440:	ldm	lr!, {r0, r1, r2, r3}
   15444:	stmia	ip!, {r0, r1, r2, r3}
   15448:	ldm	lr, {r0, r1, r2, r3}
   1544c:	stm	ip, {r0, r1, r2, r3}
   15450:	ldm	sl, {r2, r3}
   15454:	ldr	r0, [sp, #60]	; 0x3c
   15458:	bl	12978 <__assert_fail@plt+0x15a8>
   1545c:	cmp	r0, #0
   15460:	bne	146e8 <__assert_fail@plt+0x3318>
   15464:	mov	r0, #1
   15468:	b	16238 <__assert_fail@plt+0x4e68>
   1546c:	mov	r3, #1
   15470:	str	r3, [sp, #48]	; 0x30
   15474:	mov	ip, sp
   15478:	add	lr, sl, #8
   1547c:	ldm	lr!, {r0, r1, r2, r3}
   15480:	stmia	ip!, {r0, r1, r2, r3}
   15484:	ldm	lr!, {r0, r1, r2, r3}
   15488:	stmia	ip!, {r0, r1, r2, r3}
   1548c:	ldm	lr, {r0, r1, r2, r3}
   15490:	stm	ip, {r0, r1, r2, r3}
   15494:	ldm	sl, {r2, r3}
   15498:	ldr	r0, [sp, #60]	; 0x3c
   1549c:	bl	12978 <__assert_fail@plt+0x15a8>
   154a0:	cmp	r0, #0
   154a4:	bne	146e8 <__assert_fail@plt+0x3318>
   154a8:	mov	r0, #1
   154ac:	b	16238 <__assert_fail@plt+0x4e68>
   154b0:	mov	r2, #56	; 0x38
   154b4:	mov	r1, #0
   154b8:	add	r0, sp, #168	; 0xa8
   154bc:	bl	112c8 <memset@plt>
   154c0:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   154c4:	strd	r2, [sp, #168]	; 0xa8
   154c8:	mov	r3, #0
   154cc:	str	r3, [sp, #72]	; 0x48
   154d0:	mov	r4, #0
   154d4:	mov	r5, #0
   154d8:	str	r4, [sp, #84]	; 0x54
   154dc:	str	r5, [sp, #88]	; 0x58
   154e0:	str	r4, [sp, #92]	; 0x5c
   154e4:	str	r5, [sp, #96]	; 0x60
   154e8:	strd	r4, [sp, #64]	; 0x40
   154ec:	str	r4, [sp, #76]	; 0x4c
   154f0:	str	r5, [sp, #80]	; 0x50
   154f4:	b	146e8 <__assert_fail@plt+0x3318>
   154f8:	mov	r2, #56	; 0x38
   154fc:	mov	r1, #0
   15500:	add	r0, sp, #168	; 0xa8
   15504:	bl	112c8 <memset@plt>
   15508:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   1550c:	strd	r2, [sp, #168]	; 0xa8
   15510:	mov	r3, #0
   15514:	str	r3, [sp, #72]	; 0x48
   15518:	mov	r4, #0
   1551c:	mov	r5, #0
   15520:	str	r4, [sp, #84]	; 0x54
   15524:	str	r5, [sp, #88]	; 0x58
   15528:	str	r4, [sp, #92]	; 0x5c
   1552c:	str	r5, [sp, #96]	; 0x60
   15530:	strd	r4, [sp, #64]	; 0x40
   15534:	str	r4, [sp, #76]	; 0x4c
   15538:	str	r5, [sp, #80]	; 0x50
   1553c:	b	146e8 <__assert_fail@plt+0x3318>
   15540:	mov	r2, #56	; 0x38
   15544:	mov	r1, #0
   15548:	add	r0, sp, #168	; 0xa8
   1554c:	bl	112c8 <memset@plt>
   15550:	mov	r2, #1
   15554:	mov	r3, #0
   15558:	strd	r2, [sp, #168]	; 0xa8
   1555c:	mov	r3, #0
   15560:	str	r3, [sp, #72]	; 0x48
   15564:	mov	r4, #0
   15568:	mov	r5, #0
   1556c:	str	r4, [sp, #84]	; 0x54
   15570:	str	r5, [sp, #88]	; 0x58
   15574:	str	r4, [sp, #92]	; 0x5c
   15578:	str	r5, [sp, #96]	; 0x60
   1557c:	strd	r4, [sp, #64]	; 0x40
   15580:	str	r4, [sp, #76]	; 0x4c
   15584:	str	r5, [sp, #80]	; 0x50
   15588:	b	146e8 <__assert_fail@plt+0x3318>
   1558c:	mov	r2, #56	; 0x38
   15590:	mov	r1, #0
   15594:	add	r0, sp, #168	; 0xa8
   15598:	bl	112c8 <memset@plt>
   1559c:	ldr	r3, [sl, #-56]	; 0xffffffc8
   155a0:	str	r3, [sp, #76]	; 0x4c
   155a4:	ldr	r3, [sl, #-52]	; 0xffffffcc
   155a8:	str	r3, [sp, #80]	; 0x50
   155ac:	mov	r3, #0
   155b0:	str	r3, [sp, #72]	; 0x48
   155b4:	mov	r4, #0
   155b8:	mov	r5, #0
   155bc:	str	r4, [sp, #84]	; 0x54
   155c0:	str	r5, [sp, #88]	; 0x58
   155c4:	str	r4, [sp, #92]	; 0x5c
   155c8:	str	r5, [sp, #96]	; 0x60
   155cc:	strd	r4, [sp, #64]	; 0x40
   155d0:	b	146e8 <__assert_fail@plt+0x3318>
   155d4:	mov	r2, #56	; 0x38
   155d8:	mov	r1, #0
   155dc:	add	r0, sp, #168	; 0xa8
   155e0:	bl	112c8 <memset@plt>
   155e4:	ldr	r3, [sl, #-48]	; 0xffffffd0
   155e8:	str	r3, [sp, #76]	; 0x4c
   155ec:	ldr	r3, [sl, #-44]	; 0xffffffd4
   155f0:	str	r3, [sp, #80]	; 0x50
   155f4:	mov	r3, #0
   155f8:	str	r3, [sp, #72]	; 0x48
   155fc:	mov	r4, #0
   15600:	mov	r5, #0
   15604:	str	r4, [sp, #84]	; 0x54
   15608:	str	r5, [sp, #88]	; 0x58
   1560c:	str	r4, [sp, #92]	; 0x5c
   15610:	str	r5, [sp, #96]	; 0x60
   15614:	strd	r4, [sp, #64]	; 0x40
   15618:	b	146e8 <__assert_fail@plt+0x3318>
   1561c:	mov	r2, #56	; 0x38
   15620:	mov	r1, #0
   15624:	add	r0, sp, #168	; 0xa8
   15628:	bl	112c8 <memset@plt>
   1562c:	mov	r3, #0
   15630:	str	r3, [sp, #72]	; 0x48
   15634:	mov	r4, #0
   15638:	mov	r5, #0
   1563c:	str	r4, [sp, #84]	; 0x54
   15640:	str	r5, [sp, #88]	; 0x58
   15644:	str	r4, [sp, #92]	; 0x5c
   15648:	str	r5, [sp, #96]	; 0x60
   1564c:	strd	r4, [sp, #64]	; 0x40
   15650:	mov	r3, #1
   15654:	str	r3, [sp, #76]	; 0x4c
   15658:	mov	r3, #0
   1565c:	str	r3, [sp, #80]	; 0x50
   15660:	b	146e8 <__assert_fail@plt+0x3318>
   15664:	mov	r2, #56	; 0x38
   15668:	mov	r1, #0
   1566c:	add	r0, sp, #168	; 0xa8
   15670:	bl	112c8 <memset@plt>
   15674:	ldrd	r2, [sl]
   15678:	strd	r2, [sp, #64]	; 0x40
   1567c:	cmp	r2, #0
   15680:	sbcs	r3, r3, #0
   15684:	blt	1571c <__assert_fail@plt+0x434c>
   15688:	ldrd	r2, [sp, #64]	; 0x40
   1568c:	orrs	r3, r2, r3
   15690:	beq	156cc <__assert_fail@plt+0x42fc>
   15694:	ldrd	r4, [sl, #-56]	; 0xffffffc8
   15698:	cmp	r4, #0
   1569c:	sbcs	r3, r5, #0
   156a0:	blt	157a8 <__assert_fail@plt+0x43d8>
   156a4:	ldrd	r2, [sp, #64]	; 0x40
   156a8:	mvn	r0, #0
   156ac:	mvn	r1, #-2147483648	; 0x80000000
   156b0:	bl	1dd60 <__assert_fail@plt+0xc990>
   156b4:	cmp	r0, r4
   156b8:	sbcs	r3, r1, r5
   156bc:	movlt	r3, #1
   156c0:	movge	r3, #0
   156c4:	cmp	r3, #0
   156c8:	bne	162a4 <__assert_fail@plt+0x4ed4>
   156cc:	ldr	r2, [sl, #-56]	; 0xffffffc8
   156d0:	ldr	r3, [sl, #-52]	; 0xffffffcc
   156d4:	ldrd	r0, [sp, #64]	; 0x40
   156d8:	mul	r3, r0, r3
   156dc:	mla	r3, r2, r1, r3
   156e0:	umull	r0, r1, r2, r0
   156e4:	strd	r0, [sp, #64]	; 0x40
   156e8:	add	r3, r3, r1
   156ec:	str	r3, [sp, #68]	; 0x44
   156f0:	mov	r3, #0
   156f4:	str	r3, [sp, #72]	; 0x48
   156f8:	mov	r4, #0
   156fc:	mov	r5, #0
   15700:	str	r4, [sp, #84]	; 0x54
   15704:	str	r5, [sp, #88]	; 0x58
   15708:	str	r4, [sp, #92]	; 0x5c
   1570c:	str	r5, [sp, #96]	; 0x60
   15710:	str	r4, [sp, #76]	; 0x4c
   15714:	str	r5, [sp, #80]	; 0x50
   15718:	b	146e8 <__assert_fail@plt+0x3318>
   1571c:	ldrd	r4, [sl, #-56]	; 0xffffffc8
   15720:	cmp	r4, #0
   15724:	sbcs	r3, r5, #0
   15728:	bge	15750 <__assert_fail@plt+0x4380>
   1572c:	ldrd	r2, [sp, #64]	; 0x40
   15730:	mvn	r0, #0
   15734:	mvn	r1, #-2147483648	; 0x80000000
   15738:	bl	1dd60 <__assert_fail@plt+0xc990>
   1573c:	cmp	r4, r0
   15740:	sbcs	r3, r5, r1
   15744:	movlt	r3, #1
   15748:	movge	r3, #0
   1574c:	b	156c4 <__assert_fail@plt+0x42f4>
   15750:	mvn	r2, #0
   15754:	mvn	r3, #0
   15758:	ldrd	r0, [sp, #64]	; 0x40
   1575c:	cmp	r1, r3
   15760:	cmpeq	r0, r2
   15764:	beq	1578c <__assert_fail@plt+0x43bc>
   15768:	ldrd	r2, [sp, #64]	; 0x40
   1576c:	mov	r0, #0
   15770:	mov	r1, #-2147483648	; 0x80000000
   15774:	bl	1dd60 <__assert_fail@plt+0xc990>
   15778:	cmp	r0, r4
   1577c:	sbcs	r3, r1, r5
   15780:	movlt	r3, #1
   15784:	movge	r3, #0
   15788:	b	156c4 <__assert_fail@plt+0x42f4>
   1578c:	adds	r4, r4, #0
   15790:	adc	r5, r5, #-2147483648	; 0x80000000
   15794:	cmp	r4, #1
   15798:	sbcs	r3, r5, #0
   1579c:	movge	r3, #1
   157a0:	movlt	r3, #0
   157a4:	b	156c4 <__assert_fail@plt+0x42f4>
   157a8:	mvn	r2, #0
   157ac:	mvn	r3, #0
   157b0:	cmp	r5, r3
   157b4:	cmpeq	r4, r2
   157b8:	beq	157e8 <__assert_fail@plt+0x4418>
   157bc:	mov	r2, r4
   157c0:	mov	r3, r5
   157c4:	mov	r0, #0
   157c8:	mov	r1, #-2147483648	; 0x80000000
   157cc:	bl	1dd60 <__assert_fail@plt+0xc990>
   157d0:	ldrd	r2, [sp, #64]	; 0x40
   157d4:	cmp	r0, r2
   157d8:	sbcs	r3, r1, r3
   157dc:	movlt	r3, #1
   157e0:	movge	r3, #0
   157e4:	b	156c4 <__assert_fail@plt+0x42f4>
   157e8:	ldrd	r2, [sp, #64]	; 0x40
   157ec:	adds	r2, r2, #0
   157f0:	adc	r3, r3, #-2147483648	; 0x80000000
   157f4:	cmp	r2, #1
   157f8:	sbcs	r3, r3, #0
   157fc:	movge	r3, #1
   15800:	movlt	r3, #0
   15804:	b	156c4 <__assert_fail@plt+0x42f4>
   15808:	mov	r2, #56	; 0x38
   1580c:	mov	r1, #0
   15810:	add	r0, sp, #168	; 0xa8
   15814:	bl	112c8 <memset@plt>
   15818:	ldrd	r2, [sl]
   1581c:	strd	r2, [sp, #64]	; 0x40
   15820:	cmp	r2, #0
   15824:	sbcs	r3, r3, #0
   15828:	blt	158c0 <__assert_fail@plt+0x44f0>
   1582c:	ldrd	r2, [sp, #64]	; 0x40
   15830:	orrs	r3, r2, r3
   15834:	beq	15870 <__assert_fail@plt+0x44a0>
   15838:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   1583c:	cmp	r4, #0
   15840:	sbcs	r3, r5, #0
   15844:	blt	1594c <__assert_fail@plt+0x457c>
   15848:	ldrd	r2, [sp, #64]	; 0x40
   1584c:	mvn	r0, #0
   15850:	mvn	r1, #-2147483648	; 0x80000000
   15854:	bl	1dd60 <__assert_fail@plt+0xc990>
   15858:	cmp	r0, r4
   1585c:	sbcs	r3, r1, r5
   15860:	movlt	r3, #1
   15864:	movge	r3, #0
   15868:	cmp	r3, #0
   1586c:	bne	162ac <__assert_fail@plt+0x4edc>
   15870:	ldr	r2, [sl, #-48]	; 0xffffffd0
   15874:	ldr	r3, [sl, #-44]	; 0xffffffd4
   15878:	ldrd	r0, [sp, #64]	; 0x40
   1587c:	mul	r3, r0, r3
   15880:	mla	r3, r2, r1, r3
   15884:	umull	r0, r1, r2, r0
   15888:	strd	r0, [sp, #64]	; 0x40
   1588c:	add	r3, r3, r1
   15890:	str	r3, [sp, #68]	; 0x44
   15894:	mov	r3, #0
   15898:	str	r3, [sp, #72]	; 0x48
   1589c:	mov	r4, #0
   158a0:	mov	r5, #0
   158a4:	str	r4, [sp, #84]	; 0x54
   158a8:	str	r5, [sp, #88]	; 0x58
   158ac:	str	r4, [sp, #92]	; 0x5c
   158b0:	str	r5, [sp, #96]	; 0x60
   158b4:	str	r4, [sp, #76]	; 0x4c
   158b8:	str	r5, [sp, #80]	; 0x50
   158bc:	b	146e8 <__assert_fail@plt+0x3318>
   158c0:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   158c4:	cmp	r4, #0
   158c8:	sbcs	r3, r5, #0
   158cc:	bge	158f4 <__assert_fail@plt+0x4524>
   158d0:	ldrd	r2, [sp, #64]	; 0x40
   158d4:	mvn	r0, #0
   158d8:	mvn	r1, #-2147483648	; 0x80000000
   158dc:	bl	1dd60 <__assert_fail@plt+0xc990>
   158e0:	cmp	r4, r0
   158e4:	sbcs	r3, r5, r1
   158e8:	movlt	r3, #1
   158ec:	movge	r3, #0
   158f0:	b	15868 <__assert_fail@plt+0x4498>
   158f4:	mvn	r2, #0
   158f8:	mvn	r3, #0
   158fc:	ldrd	r0, [sp, #64]	; 0x40
   15900:	cmp	r1, r3
   15904:	cmpeq	r0, r2
   15908:	beq	15930 <__assert_fail@plt+0x4560>
   1590c:	ldrd	r2, [sp, #64]	; 0x40
   15910:	mov	r0, #0
   15914:	mov	r1, #-2147483648	; 0x80000000
   15918:	bl	1dd60 <__assert_fail@plt+0xc990>
   1591c:	cmp	r0, r4
   15920:	sbcs	r3, r1, r5
   15924:	movlt	r3, #1
   15928:	movge	r3, #0
   1592c:	b	15868 <__assert_fail@plt+0x4498>
   15930:	adds	r4, r4, #0
   15934:	adc	r5, r5, #-2147483648	; 0x80000000
   15938:	cmp	r4, #1
   1593c:	sbcs	r3, r5, #0
   15940:	movge	r3, #1
   15944:	movlt	r3, #0
   15948:	b	15868 <__assert_fail@plt+0x4498>
   1594c:	mvn	r2, #0
   15950:	mvn	r3, #0
   15954:	cmp	r5, r3
   15958:	cmpeq	r4, r2
   1595c:	beq	1598c <__assert_fail@plt+0x45bc>
   15960:	mov	r2, r4
   15964:	mov	r3, r5
   15968:	mov	r0, #0
   1596c:	mov	r1, #-2147483648	; 0x80000000
   15970:	bl	1dd60 <__assert_fail@plt+0xc990>
   15974:	ldrd	r2, [sp, #64]	; 0x40
   15978:	cmp	r0, r2
   1597c:	sbcs	r3, r1, r3
   15980:	movlt	r3, #1
   15984:	movge	r3, #0
   15988:	b	15868 <__assert_fail@plt+0x4498>
   1598c:	ldrd	r2, [sp, #64]	; 0x40
   15990:	adds	r2, r2, #0
   15994:	adc	r3, r3, #-2147483648	; 0x80000000
   15998:	cmp	r2, #1
   1599c:	sbcs	r3, r3, #0
   159a0:	movge	r3, #1
   159a4:	movlt	r3, #0
   159a8:	b	15868 <__assert_fail@plt+0x4498>
   159ac:	mov	r2, #56	; 0x38
   159b0:	mov	r1, #0
   159b4:	add	r0, sp, #168	; 0xa8
   159b8:	bl	112c8 <memset@plt>
   159bc:	ldrd	r2, [sl]
   159c0:	strd	r2, [sp, #64]	; 0x40
   159c4:	mov	r3, #0
   159c8:	str	r3, [sp, #72]	; 0x48
   159cc:	mov	r4, #0
   159d0:	mov	r5, #0
   159d4:	str	r4, [sp, #84]	; 0x54
   159d8:	str	r5, [sp, #88]	; 0x58
   159dc:	str	r4, [sp, #92]	; 0x5c
   159e0:	str	r5, [sp, #96]	; 0x60
   159e4:	str	r4, [sp, #76]	; 0x4c
   159e8:	str	r5, [sp, #80]	; 0x50
   159ec:	b	146e8 <__assert_fail@plt+0x3318>
   159f0:	mov	r2, #56	; 0x38
   159f4:	mov	r1, #0
   159f8:	add	r0, sp, #168	; 0xa8
   159fc:	bl	112c8 <memset@plt>
   15a00:	ldr	r3, [sl, #-56]	; 0xffffffc8
   15a04:	str	r3, [sp, #92]	; 0x5c
   15a08:	ldr	r3, [sl, #-52]	; 0xffffffcc
   15a0c:	str	r3, [sp, #96]	; 0x60
   15a10:	mov	r3, #0
   15a14:	str	r3, [sp, #72]	; 0x48
   15a18:	mov	r4, #0
   15a1c:	mov	r5, #0
   15a20:	str	r4, [sp, #84]	; 0x54
   15a24:	str	r5, [sp, #88]	; 0x58
   15a28:	strd	r4, [sp, #64]	; 0x40
   15a2c:	str	r4, [sp, #76]	; 0x4c
   15a30:	str	r5, [sp, #80]	; 0x50
   15a34:	b	146e8 <__assert_fail@plt+0x3318>
   15a38:	mov	r2, #56	; 0x38
   15a3c:	mov	r1, #0
   15a40:	add	r0, sp, #168	; 0xa8
   15a44:	bl	112c8 <memset@plt>
   15a48:	ldr	r3, [sl, #-48]	; 0xffffffd0
   15a4c:	str	r3, [sp, #92]	; 0x5c
   15a50:	ldr	r3, [sl, #-44]	; 0xffffffd4
   15a54:	str	r3, [sp, #96]	; 0x60
   15a58:	mov	r3, #0
   15a5c:	str	r3, [sp, #72]	; 0x48
   15a60:	mov	r4, #0
   15a64:	mov	r5, #0
   15a68:	str	r4, [sp, #84]	; 0x54
   15a6c:	str	r5, [sp, #88]	; 0x58
   15a70:	strd	r4, [sp, #64]	; 0x40
   15a74:	str	r4, [sp, #76]	; 0x4c
   15a78:	str	r5, [sp, #80]	; 0x50
   15a7c:	b	146e8 <__assert_fail@plt+0x3318>
   15a80:	mov	r2, #56	; 0x38
   15a84:	mov	r1, #0
   15a88:	add	r0, sp, #168	; 0xa8
   15a8c:	bl	112c8 <memset@plt>
   15a90:	mov	r3, #0
   15a94:	str	r3, [sp, #72]	; 0x48
   15a98:	mov	r4, #0
   15a9c:	mov	r5, #0
   15aa0:	str	r4, [sp, #84]	; 0x54
   15aa4:	str	r5, [sp, #88]	; 0x58
   15aa8:	mov	r3, #1
   15aac:	str	r3, [sp, #92]	; 0x5c
   15ab0:	mov	r3, #0
   15ab4:	str	r3, [sp, #96]	; 0x60
   15ab8:	strd	r4, [sp, #64]	; 0x40
   15abc:	str	r4, [sp, #76]	; 0x4c
   15ac0:	str	r5, [sp, #80]	; 0x50
   15ac4:	b	146e8 <__assert_fail@plt+0x3318>
   15ac8:	mov	r2, #56	; 0x38
   15acc:	mov	r1, #0
   15ad0:	add	r0, sp, #168	; 0xa8
   15ad4:	bl	112c8 <memset@plt>
   15ad8:	ldr	r3, [sl, #-56]	; 0xffffffc8
   15adc:	str	r3, [sp, #84]	; 0x54
   15ae0:	ldr	r3, [sl, #-52]	; 0xffffffcc
   15ae4:	str	r3, [sp, #88]	; 0x58
   15ae8:	mov	r3, #0
   15aec:	str	r3, [sp, #72]	; 0x48
   15af0:	mov	r4, #0
   15af4:	mov	r5, #0
   15af8:	str	r4, [sp, #92]	; 0x5c
   15afc:	str	r5, [sp, #96]	; 0x60
   15b00:	strd	r4, [sp, #64]	; 0x40
   15b04:	str	r4, [sp, #76]	; 0x4c
   15b08:	str	r5, [sp, #80]	; 0x50
   15b0c:	b	146e8 <__assert_fail@plt+0x3318>
   15b10:	mov	r2, #56	; 0x38
   15b14:	mov	r1, #0
   15b18:	add	r0, sp, #168	; 0xa8
   15b1c:	bl	112c8 <memset@plt>
   15b20:	ldr	r3, [sl, #-48]	; 0xffffffd0
   15b24:	str	r3, [sp, #84]	; 0x54
   15b28:	ldr	r3, [sl, #-44]	; 0xffffffd4
   15b2c:	str	r3, [sp, #88]	; 0x58
   15b30:	mov	r3, #0
   15b34:	str	r3, [sp, #72]	; 0x48
   15b38:	mov	r4, #0
   15b3c:	mov	r5, #0
   15b40:	str	r4, [sp, #92]	; 0x5c
   15b44:	str	r5, [sp, #96]	; 0x60
   15b48:	strd	r4, [sp, #64]	; 0x40
   15b4c:	str	r4, [sp, #76]	; 0x4c
   15b50:	str	r5, [sp, #80]	; 0x50
   15b54:	b	146e8 <__assert_fail@plt+0x3318>
   15b58:	mov	r2, #56	; 0x38
   15b5c:	mov	r1, #0
   15b60:	add	r0, sp, #168	; 0xa8
   15b64:	bl	112c8 <memset@plt>
   15b68:	mov	r3, #0
   15b6c:	str	r3, [sp, #72]	; 0x48
   15b70:	mov	r4, #0
   15b74:	mov	r5, #0
   15b78:	mov	r3, #1
   15b7c:	str	r3, [sp, #84]	; 0x54
   15b80:	mov	r3, #0
   15b84:	str	r3, [sp, #88]	; 0x58
   15b88:	str	r4, [sp, #92]	; 0x5c
   15b8c:	str	r5, [sp, #96]	; 0x60
   15b90:	strd	r4, [sp, #64]	; 0x40
   15b94:	str	r4, [sp, #76]	; 0x4c
   15b98:	str	r5, [sp, #80]	; 0x50
   15b9c:	b	146e8 <__assert_fail@plt+0x3318>
   15ba0:	mov	r2, #56	; 0x38
   15ba4:	mov	r1, #0
   15ba8:	add	r0, sp, #168	; 0xa8
   15bac:	bl	112c8 <memset@plt>
   15bb0:	ldrd	r4, [sl, #-56]	; 0xffffffc8
   15bb4:	mov	r3, #0
   15bb8:	str	r3, [sp, #72]	; 0x48
   15bbc:	str	r3, [sp, #84]	; 0x54
   15bc0:	str	r3, [sp, #88]	; 0x58
   15bc4:	str	r3, [sp, #92]	; 0x5c
   15bc8:	str	r3, [sp, #96]	; 0x60
   15bcc:	str	r3, [sp, #64]	; 0x40
   15bd0:	str	r3, [sp, #68]	; 0x44
   15bd4:	str	r3, [sp, #76]	; 0x4c
   15bd8:	str	r3, [sp, #80]	; 0x50
   15bdc:	b	146e8 <__assert_fail@plt+0x3318>
   15be0:	mov	r2, #56	; 0x38
   15be4:	mov	r1, #0
   15be8:	add	r0, sp, #168	; 0xa8
   15bec:	bl	112c8 <memset@plt>
   15bf0:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   15bf4:	mov	r3, #0
   15bf8:	str	r3, [sp, #72]	; 0x48
   15bfc:	str	r3, [sp, #84]	; 0x54
   15c00:	str	r3, [sp, #88]	; 0x58
   15c04:	str	r3, [sp, #92]	; 0x5c
   15c08:	str	r3, [sp, #96]	; 0x60
   15c0c:	str	r3, [sp, #64]	; 0x40
   15c10:	str	r3, [sp, #68]	; 0x44
   15c14:	str	r3, [sp, #76]	; 0x4c
   15c18:	str	r3, [sp, #80]	; 0x50
   15c1c:	b	146e8 <__assert_fail@plt+0x3318>
   15c20:	mov	r2, #56	; 0x38
   15c24:	mov	r1, #0
   15c28:	add	r0, sp, #168	; 0xa8
   15c2c:	bl	112c8 <memset@plt>
   15c30:	ldr	r3, [sl, #-56]	; 0xffffffc8
   15c34:	mov	r4, r3
   15c38:	asr	r5, r3, #31
   15c3c:	ldr	r3, [sl, #-52]	; 0xffffffcc
   15c40:	str	r3, [sp, #72]	; 0x48
   15c44:	mov	r3, #0
   15c48:	str	r3, [sp, #84]	; 0x54
   15c4c:	str	r3, [sp, #88]	; 0x58
   15c50:	str	r3, [sp, #92]	; 0x5c
   15c54:	str	r3, [sp, #96]	; 0x60
   15c58:	str	r3, [sp, #64]	; 0x40
   15c5c:	str	r3, [sp, #68]	; 0x44
   15c60:	str	r3, [sp, #76]	; 0x4c
   15c64:	str	r3, [sp, #80]	; 0x50
   15c68:	b	146e8 <__assert_fail@plt+0x3318>
   15c6c:	mov	r2, #56	; 0x38
   15c70:	mov	r1, #0
   15c74:	add	r0, sp, #168	; 0xa8
   15c78:	bl	112c8 <memset@plt>
   15c7c:	ldr	r3, [sl, #-56]	; 0xffffffc8
   15c80:	mov	r4, r3
   15c84:	asr	r5, r3, #31
   15c88:	ldr	r3, [sl, #-52]	; 0xffffffcc
   15c8c:	str	r3, [sp, #72]	; 0x48
   15c90:	mov	r3, #0
   15c94:	str	r3, [sp, #84]	; 0x54
   15c98:	str	r3, [sp, #88]	; 0x58
   15c9c:	str	r3, [sp, #92]	; 0x5c
   15ca0:	str	r3, [sp, #96]	; 0x60
   15ca4:	str	r3, [sp, #64]	; 0x40
   15ca8:	str	r3, [sp, #68]	; 0x44
   15cac:	str	r3, [sp, #76]	; 0x4c
   15cb0:	str	r3, [sp, #80]	; 0x50
   15cb4:	b	146e8 <__assert_fail@plt+0x3318>
   15cb8:	mov	r2, #56	; 0x38
   15cbc:	mov	r1, #0
   15cc0:	add	r0, sp, #168	; 0xa8
   15cc4:	bl	112c8 <memset@plt>
   15cc8:	mov	r3, #0
   15ccc:	str	r3, [sp, #72]	; 0x48
   15cd0:	mov	r4, #1
   15cd4:	mov	r5, #0
   15cd8:	str	r3, [sp, #84]	; 0x54
   15cdc:	str	r3, [sp, #88]	; 0x58
   15ce0:	str	r3, [sp, #92]	; 0x5c
   15ce4:	str	r3, [sp, #96]	; 0x60
   15ce8:	str	r3, [sp, #64]	; 0x40
   15cec:	str	r3, [sp, #68]	; 0x44
   15cf0:	str	r3, [sp, #76]	; 0x4c
   15cf4:	str	r3, [sp, #80]	; 0x50
   15cf8:	b	146e8 <__assert_fail@plt+0x3318>
   15cfc:	mov	r2, #56	; 0x38
   15d00:	mov	r1, #0
   15d04:	add	r0, sp, #168	; 0xa8
   15d08:	bl	112c8 <memset@plt>
   15d0c:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   15d10:	strd	r2, [sp, #168]	; 0xa8
   15d14:	mov	r3, #0
   15d18:	str	r3, [sp, #72]	; 0x48
   15d1c:	mov	r4, #0
   15d20:	mov	r5, #0
   15d24:	str	r4, [sp, #84]	; 0x54
   15d28:	str	r5, [sp, #88]	; 0x58
   15d2c:	str	r4, [sp, #92]	; 0x5c
   15d30:	str	r5, [sp, #96]	; 0x60
   15d34:	strd	r4, [sp, #64]	; 0x40
   15d38:	str	r4, [sp, #76]	; 0x4c
   15d3c:	str	r5, [sp, #80]	; 0x50
   15d40:	b	146e8 <__assert_fail@plt+0x3318>
   15d44:	mov	r2, #56	; 0x38
   15d48:	mov	r1, #0
   15d4c:	add	r0, sp, #168	; 0xa8
   15d50:	bl	112c8 <memset@plt>
   15d54:	ldr	r3, [sl, #-48]	; 0xffffffd0
   15d58:	str	r3, [sp, #76]	; 0x4c
   15d5c:	ldr	r3, [sl, #-44]	; 0xffffffd4
   15d60:	str	r3, [sp, #80]	; 0x50
   15d64:	mov	r3, #0
   15d68:	str	r3, [sp, #72]	; 0x48
   15d6c:	mov	r4, #0
   15d70:	mov	r5, #0
   15d74:	str	r4, [sp, #84]	; 0x54
   15d78:	str	r5, [sp, #88]	; 0x58
   15d7c:	str	r4, [sp, #92]	; 0x5c
   15d80:	str	r5, [sp, #96]	; 0x60
   15d84:	strd	r4, [sp, #64]	; 0x40
   15d88:	b	146e8 <__assert_fail@plt+0x3318>
   15d8c:	mov	r2, #56	; 0x38
   15d90:	mov	r1, #0
   15d94:	add	r0, sp, #168	; 0xa8
   15d98:	bl	112c8 <memset@plt>
   15d9c:	ldrd	r2, [sl]
   15da0:	strd	r2, [sp, #64]	; 0x40
   15da4:	cmp	r2, #0
   15da8:	sbcs	r3, r3, #0
   15dac:	blt	15e44 <__assert_fail@plt+0x4a74>
   15db0:	ldrd	r2, [sp, #64]	; 0x40
   15db4:	orrs	r3, r2, r3
   15db8:	beq	15df4 <__assert_fail@plt+0x4a24>
   15dbc:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   15dc0:	cmp	r4, #0
   15dc4:	sbcs	r3, r5, #0
   15dc8:	blt	15ed0 <__assert_fail@plt+0x4b00>
   15dcc:	ldrd	r2, [sp, #64]	; 0x40
   15dd0:	mvn	r0, #0
   15dd4:	mvn	r1, #-2147483648	; 0x80000000
   15dd8:	bl	1dd60 <__assert_fail@plt+0xc990>
   15ddc:	cmp	r0, r4
   15de0:	sbcs	r3, r1, r5
   15de4:	movlt	r3, #1
   15de8:	movge	r3, #0
   15dec:	cmp	r3, #0
   15df0:	bne	162b4 <__assert_fail@plt+0x4ee4>
   15df4:	ldr	r2, [sl, #-48]	; 0xffffffd0
   15df8:	ldr	r3, [sl, #-44]	; 0xffffffd4
   15dfc:	ldrd	r0, [sp, #64]	; 0x40
   15e00:	mul	r3, r0, r3
   15e04:	mla	r3, r2, r1, r3
   15e08:	umull	r0, r1, r2, r0
   15e0c:	strd	r0, [sp, #64]	; 0x40
   15e10:	add	r3, r3, r1
   15e14:	str	r3, [sp, #68]	; 0x44
   15e18:	mov	r3, #0
   15e1c:	str	r3, [sp, #72]	; 0x48
   15e20:	mov	r4, #0
   15e24:	mov	r5, #0
   15e28:	str	r4, [sp, #84]	; 0x54
   15e2c:	str	r5, [sp, #88]	; 0x58
   15e30:	str	r4, [sp, #92]	; 0x5c
   15e34:	str	r5, [sp, #96]	; 0x60
   15e38:	str	r4, [sp, #76]	; 0x4c
   15e3c:	str	r5, [sp, #80]	; 0x50
   15e40:	b	146e8 <__assert_fail@plt+0x3318>
   15e44:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   15e48:	cmp	r4, #0
   15e4c:	sbcs	r3, r5, #0
   15e50:	bge	15e78 <__assert_fail@plt+0x4aa8>
   15e54:	ldrd	r2, [sp, #64]	; 0x40
   15e58:	mvn	r0, #0
   15e5c:	mvn	r1, #-2147483648	; 0x80000000
   15e60:	bl	1dd60 <__assert_fail@plt+0xc990>
   15e64:	cmp	r4, r0
   15e68:	sbcs	r3, r5, r1
   15e6c:	movlt	r3, #1
   15e70:	movge	r3, #0
   15e74:	b	15dec <__assert_fail@plt+0x4a1c>
   15e78:	mvn	r2, #0
   15e7c:	mvn	r3, #0
   15e80:	ldrd	r0, [sp, #64]	; 0x40
   15e84:	cmp	r1, r3
   15e88:	cmpeq	r0, r2
   15e8c:	beq	15eb4 <__assert_fail@plt+0x4ae4>
   15e90:	ldrd	r2, [sp, #64]	; 0x40
   15e94:	mov	r0, #0
   15e98:	mov	r1, #-2147483648	; 0x80000000
   15e9c:	bl	1dd60 <__assert_fail@plt+0xc990>
   15ea0:	cmp	r0, r4
   15ea4:	sbcs	r3, r1, r5
   15ea8:	movlt	r3, #1
   15eac:	movge	r3, #0
   15eb0:	b	15dec <__assert_fail@plt+0x4a1c>
   15eb4:	adds	r4, r4, #0
   15eb8:	adc	r5, r5, #-2147483648	; 0x80000000
   15ebc:	cmp	r4, #1
   15ec0:	sbcs	r3, r5, #0
   15ec4:	movge	r3, #1
   15ec8:	movlt	r3, #0
   15ecc:	b	15dec <__assert_fail@plt+0x4a1c>
   15ed0:	mvn	r2, #0
   15ed4:	mvn	r3, #0
   15ed8:	cmp	r5, r3
   15edc:	cmpeq	r4, r2
   15ee0:	beq	15f10 <__assert_fail@plt+0x4b40>
   15ee4:	mov	r2, r4
   15ee8:	mov	r3, r5
   15eec:	mov	r0, #0
   15ef0:	mov	r1, #-2147483648	; 0x80000000
   15ef4:	bl	1dd60 <__assert_fail@plt+0xc990>
   15ef8:	ldrd	r2, [sp, #64]	; 0x40
   15efc:	cmp	r0, r2
   15f00:	sbcs	r3, r1, r3
   15f04:	movlt	r3, #1
   15f08:	movge	r3, #0
   15f0c:	b	15dec <__assert_fail@plt+0x4a1c>
   15f10:	ldrd	r2, [sp, #64]	; 0x40
   15f14:	adds	r2, r2, #0
   15f18:	adc	r3, r3, #-2147483648	; 0x80000000
   15f1c:	cmp	r2, #1
   15f20:	sbcs	r3, r3, #0
   15f24:	movge	r3, #1
   15f28:	movlt	r3, #0
   15f2c:	b	15dec <__assert_fail@plt+0x4a1c>
   15f30:	mov	r2, #56	; 0x38
   15f34:	mov	r1, #0
   15f38:	add	r0, sp, #168	; 0xa8
   15f3c:	bl	112c8 <memset@plt>
   15f40:	ldr	r3, [sl, #-48]	; 0xffffffd0
   15f44:	str	r3, [sp, #92]	; 0x5c
   15f48:	ldr	r3, [sl, #-44]	; 0xffffffd4
   15f4c:	str	r3, [sp, #96]	; 0x60
   15f50:	mov	r3, #0
   15f54:	str	r3, [sp, #72]	; 0x48
   15f58:	mov	r4, #0
   15f5c:	mov	r5, #0
   15f60:	str	r4, [sp, #84]	; 0x54
   15f64:	str	r5, [sp, #88]	; 0x58
   15f68:	strd	r4, [sp, #64]	; 0x40
   15f6c:	str	r4, [sp, #76]	; 0x4c
   15f70:	str	r5, [sp, #80]	; 0x50
   15f74:	b	146e8 <__assert_fail@plt+0x3318>
   15f78:	mov	r2, #56	; 0x38
   15f7c:	mov	r1, #0
   15f80:	add	r0, sp, #168	; 0xa8
   15f84:	bl	112c8 <memset@plt>
   15f88:	ldr	r3, [sl, #-48]	; 0xffffffd0
   15f8c:	str	r3, [sp, #84]	; 0x54
   15f90:	ldr	r3, [sl, #-44]	; 0xffffffd4
   15f94:	str	r3, [sp, #88]	; 0x58
   15f98:	mov	r3, #0
   15f9c:	str	r3, [sp, #72]	; 0x48
   15fa0:	mov	r4, #0
   15fa4:	mov	r5, #0
   15fa8:	str	r4, [sp, #92]	; 0x5c
   15fac:	str	r5, [sp, #96]	; 0x60
   15fb0:	strd	r4, [sp, #64]	; 0x40
   15fb4:	str	r4, [sp, #76]	; 0x4c
   15fb8:	str	r5, [sp, #80]	; 0x50
   15fbc:	b	146e8 <__assert_fail@plt+0x3318>
   15fc0:	mov	r2, #56	; 0x38
   15fc4:	mov	r1, #0
   15fc8:	add	r0, sp, #168	; 0xa8
   15fcc:	bl	112c8 <memset@plt>
   15fd0:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   15fd4:	mov	r3, #0
   15fd8:	str	r3, [sp, #72]	; 0x48
   15fdc:	str	r3, [sp, #84]	; 0x54
   15fe0:	str	r3, [sp, #88]	; 0x58
   15fe4:	str	r3, [sp, #92]	; 0x5c
   15fe8:	str	r3, [sp, #96]	; 0x60
   15fec:	str	r3, [sp, #64]	; 0x40
   15ff0:	str	r3, [sp, #68]	; 0x44
   15ff4:	str	r3, [sp, #76]	; 0x4c
   15ff8:	str	r3, [sp, #80]	; 0x50
   15ffc:	b	146e8 <__assert_fail@plt+0x3318>
   16000:	mov	r2, #56	; 0x38
   16004:	mov	r1, #0
   16008:	add	r0, sp, #168	; 0xa8
   1600c:	bl	112c8 <memset@plt>
   16010:	ldrd	r2, [sl]
   16014:	strd	r2, [sp, #64]	; 0x40
   16018:	mov	r3, #0
   1601c:	str	r3, [sp, #72]	; 0x48
   16020:	mov	r4, #0
   16024:	mov	r5, #0
   16028:	str	r4, [sp, #84]	; 0x54
   1602c:	str	r5, [sp, #88]	; 0x58
   16030:	str	r4, [sp, #92]	; 0x5c
   16034:	str	r5, [sp, #96]	; 0x60
   16038:	str	r4, [sp, #76]	; 0x4c
   1603c:	str	r5, [sp, #80]	; 0x50
   16040:	b	146e8 <__assert_fail@plt+0x3318>
   16044:	ldrd	r0, [sl, #8]
   16048:	strd	r0, [sp, #128]	; 0x80
   1604c:	adds	r0, r0, #-2147483648	; 0x80000000
   16050:	adc	r1, r1, #0
   16054:	mvn	r2, #0
   16058:	mov	r3, #0
   1605c:	cmp	r1, r3
   16060:	cmpeq	r0, r2
   16064:	bhi	162bc <__assert_fail@plt+0x4eec>
   16068:	ldr	r3, [sp, #128]	; 0x80
   1606c:	str	r3, [sp, #168]	; 0xa8
   16070:	mov	r3, #0
   16074:	str	r3, [sp, #172]	; 0xac
   16078:	b	146e8 <__assert_fail@plt+0x3318>
   1607c:	ldrd	r0, [sl, #8]
   16080:	strd	r0, [sp, #128]	; 0x80
   16084:	adds	r0, r0, #-2147483648	; 0x80000000
   16088:	adc	r1, r1, #0
   1608c:	mvn	r2, #0
   16090:	mov	r3, #0
   16094:	cmp	r1, r3
   16098:	cmpeq	r0, r2
   1609c:	bhi	162c4 <__assert_fail@plt+0x4ef4>
   160a0:	ldr	r3, [sp, #128]	; 0x80
   160a4:	str	r3, [sp, #168]	; 0xa8
   160a8:	mov	r3, #0
   160ac:	str	r3, [sp, #172]	; 0xac
   160b0:	b	146e8 <__assert_fail@plt+0x3318>
   160b4:	add	r3, sl, #8
   160b8:	ldm	r3, {r0, r1, r2, r3}
   160bc:	stm	sp, {r0, r1, r2, r3}
   160c0:	ldm	sl, {r2, r3}
   160c4:	ldr	r0, [sp, #60]	; 0x3c
   160c8:	bl	12818 <__assert_fail@plt+0x1448>
   160cc:	b	146e8 <__assert_fail@plt+0x3318>
   160d0:	sub	r3, sl, #48	; 0x30
   160d4:	ldm	r3, {r0, r1, r2, r3}
   160d8:	stm	sp, {r0, r1, r2, r3}
   160dc:	sub	r3, sl, #56	; 0x38
   160e0:	ldm	r3, {r2, r3}
   160e4:	ldr	r0, [sp, #60]	; 0x3c
   160e8:	bl	12818 <__assert_fail@plt+0x1448>
   160ec:	mov	r3, #1
   160f0:	str	r3, [sp, #48]	; 0x30
   160f4:	mov	ip, sp
   160f8:	add	lr, sl, #8
   160fc:	ldm	lr!, {r0, r1, r2, r3}
   16100:	stmia	ip!, {r0, r1, r2, r3}
   16104:	ldm	lr!, {r0, r1, r2, r3}
   16108:	stmia	ip!, {r0, r1, r2, r3}
   1610c:	ldm	lr, {r0, r1, r2, r3}
   16110:	stm	ip, {r0, r1, r2, r3}
   16114:	ldm	sl, {r2, r3}
   16118:	ldr	r0, [sp, #60]	; 0x3c
   1611c:	bl	12978 <__assert_fail@plt+0x15a8>
   16120:	cmp	r0, #0
   16124:	bne	146e8 <__assert_fail@plt+0x3318>
   16128:	mov	r0, #1
   1612c:	b	16238 <__assert_fail@plt+0x4e68>
   16130:	mvn	r2, #0
   16134:	mvn	r3, #0
   16138:	strd	r2, [sp, #168]	; 0xa8
   1613c:	b	146e8 <__assert_fail@plt+0x3318>
   16140:	ldrd	r2, [sl, #8]
   16144:	strd	r2, [sp, #168]	; 0xa8
   16148:	b	146e8 <__assert_fail@plt+0x3318>
   1614c:	add	r2, r9, r2
   16150:	ldrb	r8, [r2, #2388]	; 0x954
   16154:	b	147ac <__assert_fail@plt+0x33dc>
   16158:	ldr	r3, [sp, #100]	; 0x64
   1615c:	cmp	r3, #3
   16160:	beq	1616c <__assert_fail@plt+0x4d9c>
   16164:	add	r2, sp, #1344	; 0x540
   16168:	b	16198 <__assert_fail@plt+0x4dc8>
   1616c:	cmp	r7, #0
   16170:	mvngt	r7, #1
   16174:	bgt	16164 <__assert_fail@plt+0x4d94>
   16178:	bne	16164 <__assert_fail@plt+0x4d94>
   1617c:	str	r7, [sp, #104]	; 0x68
   16180:	mov	r0, #1
   16184:	b	16238 <__assert_fail@plt+0x4e68>
   16188:	cmp	fp, r2
   1618c:	beq	162cc <__assert_fail@plt+0x4efc>
   16190:	sub	sl, sl, #56	; 0x38
   16194:	ldrsh	r8, [fp, #-2]!
   16198:	add	r8, r9, r8
   1619c:	add	r8, r8, #1120	; 0x460
   161a0:	ldrsb	r3, [r8, #12]
   161a4:	cmn	r3, #93	; 0x5d
   161a8:	beq	16188 <__assert_fail@plt+0x4db8>
   161ac:	add	r3, r3, #1
   161b0:	cmp	r3, #112	; 0x70
   161b4:	bhi	16188 <__assert_fail@plt+0x4db8>
   161b8:	add	r1, r9, r3
   161bc:	ldrb	r1, [r1, #2272]	; 0x8e0
   161c0:	cmp	r1, #1
   161c4:	bne	16188 <__assert_fail@plt+0x4db8>
   161c8:	add	r3, r9, r3
   161cc:	ldrb	r8, [r3, #2388]	; 0x954
   161d0:	cmp	r8, #0
   161d4:	ble	16188 <__assert_fail@plt+0x4db8>
   161d8:	add	sl, sl, #56	; 0x38
   161dc:	add	r1, sp, #1392	; 0x570
   161e0:	ldrd	r2, [sp, #112]	; 0x70
   161e4:	strd	r2, [r1]
   161e8:	ldr	r3, [sp, #124]	; 0x7c
   161ec:	str	r3, [sp, #1400]	; 0x578
   161f0:	mov	ip, sl
   161f4:	add	lr, sp, #1376	; 0x560
   161f8:	add	lr, lr, #8
   161fc:	ldm	lr!, {r0, r1, r2, r3}
   16200:	stmia	ip!, {r0, r1, r2, r3}
   16204:	ldm	lr!, {r0, r1, r2, r3}
   16208:	stmia	ip!, {r0, r1, r2, r3}
   1620c:	ldm	lr!, {r0, r1, r2, r3}
   16210:	stmia	ip!, {r0, r1, r2, r3}
   16214:	ldm	lr, {r0, r1}
   16218:	stm	ip, {r0, r1}
   1621c:	mov	lr, fp
   16220:	mov	r3, #3
   16224:	str	r3, [sp, #100]	; 0x64
   16228:	b	147ac <__assert_fail@plt+0x33dc>
   1622c:	mov	r3, #0
   16230:	str	r3, [sp, #104]	; 0x68
   16234:	mov	r0, #2
   16238:	ldr	r3, [sp, #104]	; 0x68
   1623c:	sub	r3, fp, r3, lsl #1
   16240:	add	r2, sp, #1344	; 0x540
   16244:	cmp	r3, r2
   16248:	beq	16270 <__assert_fail@plt+0x4ea0>
   1624c:	add	r2, sp, #1440	; 0x5a0
   16250:	sub	r3, r3, r2
   16254:	add	r3, r3, #94	; 0x5e
   16258:	lsr	r3, r3, #1
   1625c:	add	r3, r3, #1
   16260:	mov	r2, #0
   16264:	add	r2, r2, #1
   16268:	cmp	r2, r3
   1626c:	bne	16264 <__assert_fail@plt+0x4e94>
   16270:	add	sp, sp, #1440	; 0x5a0
   16274:	add	sp, sp, #4
   16278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1627c:	mov	r3, #0
   16280:	str	r3, [sp, #104]	; 0x68
   16284:	mov	r0, r3
   16288:	b	16238 <__assert_fail@plt+0x4e68>
   1628c:	mov	r0, #1
   16290:	b	16238 <__assert_fail@plt+0x4e68>
   16294:	mov	r0, #1
   16298:	b	16238 <__assert_fail@plt+0x4e68>
   1629c:	mov	r0, #1
   162a0:	b	16238 <__assert_fail@plt+0x4e68>
   162a4:	mov	r0, #1
   162a8:	b	16238 <__assert_fail@plt+0x4e68>
   162ac:	mov	r0, #1
   162b0:	b	16238 <__assert_fail@plt+0x4e68>
   162b4:	mov	r0, #1
   162b8:	b	16238 <__assert_fail@plt+0x4e68>
   162bc:	mov	r0, #1
   162c0:	b	16238 <__assert_fail@plt+0x4e68>
   162c4:	mov	r0, #1
   162c8:	b	16238 <__assert_fail@plt+0x4e68>
   162cc:	mov	r0, #1
   162d0:	b	16270 <__assert_fail@plt+0x4ea0>
   162d4:	cmp	r5, #45	; 0x2d
   162d8:	movne	r3, #0
   162dc:	moveq	r3, #1
   162e0:	b	14014 <__assert_fail@plt+0x2c44>
   162e4:	add	r5, r9, #1120	; 0x460
   162e8:	b	1456c <__assert_fail@plt+0x319c>
   162ec:	add	r5, r9, #808	; 0x328
   162f0:	b	1456c <__assert_fail@plt+0x319c>
   162f4:	cmp	r7, #0
   162f8:	blt	14200 <__assert_fail@plt+0x2e30>
   162fc:	ldr	r3, [sp, #64]	; 0x40
   16300:	cmp	r3, #0
   16304:	sublt	r3, r5, #-2147483599	; 0x80000031
   16308:	subge	r3, r5, #48	; 0x30
   1630c:	rsbge	r3, r3, #2130706432	; 0x7f000000
   16310:	addge	r3, r3, #16711680	; 0xff0000
   16314:	addge	r3, r3, #65280	; 0xff00
   16318:	addge	r3, r3, #255	; 0xff
   1631c:	cmp	r7, r3
   16320:	movle	r3, #0
   16324:	movgt	r3, #1
   16328:	b	140b0 <__assert_fail@plt+0x2ce0>
   1632c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16330:	sub	sp, sp, #908	; 0x38c
   16334:	str	r0, [sp, #36]	; 0x24
   16338:	mov	r9, r1
   1633c:	mov	r6, r2
   16340:	mov	r8, r3
   16344:	mov	r0, r1
   16348:	bl	11274 <strlen@plt>
   1634c:	str	r0, [sp, #40]	; 0x28
   16350:	cmp	r6, #0
   16354:	beq	163cc <__assert_fail@plt+0x4ffc>
   16358:	ldr	r7, [r6]
   1635c:	ldr	sl, [r6, #4]
   16360:	mov	r3, r9
   16364:	mov	r4, r3
   16368:	add	r3, r3, #1
   1636c:	ldrb	r2, [r4]
   16370:	cmp	r2, #9
   16374:	bcc	16388 <__assert_fail@plt+0x4fb8>
   16378:	cmp	r2, #13
   1637c:	bls	16364 <__assert_fail@plt+0x4f94>
   16380:	cmp	r2, #32
   16384:	beq	16364 <__assert_fail@plt+0x4f94>
   16388:	mov	r2, #56	; 0x38
   1638c:	mov	r1, #0
   16390:	add	r0, sp, #520	; 0x208
   16394:	bl	112c8 <memset@plt>
   16398:	mov	r2, #4
   1639c:	ldr	r1, [pc, #4036]	; 17368 <__assert_fail@plt+0x5f98>
   163a0:	mov	r0, r4
   163a4:	bl	11394 <strncmp@plt>
   163a8:	cmp	r0, #0
   163ac:	bne	18714 <__assert_fail@plt+0x7344>
   163b0:	add	r5, r4, #4
   163b4:	ldrb	r3, [r4, #4]
   163b8:	cmp	r3, #0
   163bc:	beq	18714 <__assert_fail@plt+0x7344>
   163c0:	mov	r2, r5
   163c4:	mov	r0, #1
   163c8:	b	16404 <__assert_fail@plt+0x5034>
   163cc:	add	r0, sp, #580	; 0x244
   163d0:	bl	127dc <__assert_fail@plt+0x140c>
   163d4:	add	r6, sp, #580	; 0x244
   163d8:	b	16358 <__assert_fail@plt+0x4f88>
   163dc:	add	r3, r2, #1
   163e0:	ldrb	r2, [r2, #1]
   163e4:	cmp	r2, #92	; 0x5c
   163e8:	cmpne	r2, #34	; 0x22
   163ec:	bne	18714 <__assert_fail@plt+0x7344>
   163f0:	add	r2, r3, #1
   163f4:	add	r0, r0, #1
   163f8:	ldrb	r3, [r3, #1]
   163fc:	cmp	r3, #0
   16400:	beq	18714 <__assert_fail@plt+0x7344>
   16404:	cmp	r3, #92	; 0x5c
   16408:	beq	163dc <__assert_fail@plt+0x500c>
   1640c:	cmp	r3, #34	; 0x22
   16410:	movne	r3, r2
   16414:	bne	163f0 <__assert_fail@plt+0x5020>
   16418:	cmp	r0, #100	; 0x64
   1641c:	bgt	16488 <__assert_fail@plt+0x50b8>
   16420:	add	r3, sp, #588	; 0x24c
   16424:	str	r3, [sp, #48]	; 0x30
   16428:	mov	r3, #0
   1642c:	str	r3, [sp, #32]
   16430:	ldrb	r3, [r4, #4]
   16434:	cmp	r3, #34	; 0x22
   16438:	beq	164a0 <__assert_fail@plt+0x50d0>
   1643c:	ldr	r1, [sp, #48]	; 0x30
   16440:	cmp	r3, #92	; 0x5c
   16444:	movne	r3, #0
   16448:	moveq	r3, #1
   1644c:	add	r2, r5, r3
   16450:	ldrb	r3, [r5, r3]
   16454:	strb	r3, [r1], #1
   16458:	add	r5, r2, #1
   1645c:	ldrb	r3, [r2, #1]
   16460:	cmp	r3, #34	; 0x22
   16464:	bne	16440 <__assert_fail@plt+0x5070>
   16468:	mov	r3, #0
   1646c:	strb	r3, [r1]
   16470:	ldr	r0, [sp, #48]	; 0x30
   16474:	bl	1a9cc <__assert_fail@plt+0x95fc>
   16478:	subs	fp, r0, #0
   1647c:	bne	164a8 <__assert_fail@plt+0x50d8>
   16480:	mov	r8, #0
   16484:	b	16548 <__assert_fail@plt+0x5178>
   16488:	bl	1ba2c <__assert_fail@plt+0xa65c>
   1648c:	subs	r3, r0, #0
   16490:	str	r3, [sp, #32]
   16494:	strne	r3, [sp, #48]	; 0x30
   16498:	bne	16430 <__assert_fail@plt+0x5060>
   1649c:	b	16480 <__assert_fail@plt+0x50b0>
   164a0:	ldr	r1, [sp, #48]	; 0x30
   164a4:	b	16468 <__assert_fail@plt+0x5098>
   164a8:	add	r5, r5, #1
   164ac:	mov	r4, r5
   164b0:	add	r5, r5, #1
   164b4:	ldrb	r3, [r4]
   164b8:	cmp	r3, #9
   164bc:	bcc	164d0 <__assert_fail@plt+0x5100>
   164c0:	cmp	r3, #13
   164c4:	bls	164ac <__assert_fail@plt+0x50dc>
   164c8:	cmp	r3, #32
   164cc:	beq	164ac <__assert_fail@plt+0x50dc>
   164d0:	add	r2, sp, #476	; 0x1dc
   164d4:	mov	r1, r6
   164d8:	mov	r0, fp
   164dc:	bl	1acec <__assert_fail@plt+0x991c>
   164e0:	cmp	r0, #0
   164e4:	moveq	r8, #0
   164e8:	beq	16534 <__assert_fail@plt+0x5164>
   164ec:	ldr	r3, [sp, #48]	; 0x30
   164f0:	str	r3, [sp, #948]	; 0x3b4
   164f4:	b	18738 <__assert_fail@plt+0x7368>
   164f8:	mov	r2, #0
   164fc:	mov	r3, #-2147483648	; 0x80000000
   16500:	subs	r4, r2, ip
   16504:	sbc	r5, r3, ip, asr #31
   16508:	ldr	r0, [pc, #3676]	; 1736c <__assert_fail@plt+0x5f9c>
   1650c:	mov	r1, #0
   16510:	cmp	r0, r4
   16514:	sbcs	r3, r1, r5
   16518:	bge	18760 <__assert_fail@plt+0x7390>
   1651c:	adds	r0, r0, ip
   16520:	adc	r1, r1, ip, asr #31
   16524:	add	r3, sp, #280	; 0x118
   16528:	strd	r0, [r3]
   1652c:	cmp	r8, #0
   16530:	bne	1655c <__assert_fail@plt+0x518c>
   16534:	ldr	r3, [sp, #944]	; 0x3b0
   16538:	cmp	fp, r3
   1653c:	beq	16548 <__assert_fail@plt+0x5178>
   16540:	mov	r0, fp
   16544:	bl	1aba4 <__assert_fail@plt+0x97d4>
   16548:	ldr	r0, [sp, #32]
   1654c:	bl	1bc30 <__assert_fail@plt+0xa860>
   16550:	mov	r0, r8
   16554:	add	sp, sp, #908	; 0x38c
   16558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1655c:	mov	r2, #5
   16560:	ldr	r1, [pc, #3592]	; 17370 <__assert_fail@plt+0x5fa0>
   16564:	mov	r0, #0
   16568:	bl	11130 <dcgettext@plt>
   1656c:	bl	13968 <__assert_fail@plt+0x2598>
   16570:	mov	r8, #0
   16574:	b	16534 <__assert_fail@plt+0x5164>
   16578:	rsb	r3, r4, #-2147483648	; 0x80000000
   1657c:	cmp	r7, r3
   16580:	movge	r3, #0
   16584:	movlt	r3, #1
   16588:	b	165d0 <__assert_fail@plt+0x5200>
   1658c:	cmp	r8, r4
   16590:	movle	r3, #0
   16594:	movgt	r3, #1
   16598:	b	165d0 <__assert_fail@plt+0x5200>
   1659c:	add	r4, r4, #7733248	; 0x760000
   165a0:	add	r4, r4, #42752	; 0xa700
   165a4:	cmp	r4, r5
   165a8:	beq	1662c <__assert_fail@plt+0x525c>
   165ac:	mov	r3, r4
   165b0:	cmp	r4, #0
   165b4:	blt	16578 <__assert_fail@plt+0x51a8>
   165b8:	cmp	r7, #0
   165bc:	blt	1658c <__assert_fail@plt+0x51bc>
   165c0:	sub	r3, r6, r4
   165c4:	cmp	r7, r3
   165c8:	movle	r3, #0
   165cc:	movgt	r3, #1
   165d0:	cmp	r3, #0
   165d4:	bne	1662c <__assert_fail@plt+0x525c>
   165d8:	add	r3, r7, r4
   165dc:	str	r3, [sp, #96]	; 0x60
   165e0:	add	r2, sp, #140	; 0x8c
   165e4:	add	r1, sp, #96	; 0x60
   165e8:	mov	r0, fp
   165ec:	bl	1acec <__assert_fail@plt+0x991c>
   165f0:	cmp	r0, #0
   165f4:	beq	1659c <__assert_fail@plt+0x51cc>
   165f8:	ldr	r3, [sp, #180]	; 0xb4
   165fc:	cmp	r3, #0
   16600:	beq	1659c <__assert_fail@plt+0x51cc>
   16604:	ldr	r2, [sp, #172]	; 0xac
   16608:	ldr	r1, [sp, #440]	; 0x1b8
   1660c:	cmp	r2, r1
   16610:	beq	1659c <__assert_fail@plt+0x51cc>
   16614:	str	r3, [sp, #444]	; 0x1bc
   16618:	ldr	r3, [pc, #3412]	; 17374 <__assert_fail@plt+0x5fa4>
   1661c:	str	r3, [sp, #448]	; 0x1c0
   16620:	str	r2, [sp, #452]	; 0x1c4
   16624:	mov	r3, #0
   16628:	str	r3, [sp, #456]	; 0x1c8
   1662c:	ldr	r0, [sp, #432]	; 0x1b0
   16630:	cmp	r0, #0
   16634:	beq	1665c <__assert_fail@plt+0x528c>
   16638:	ldr	r1, [sp, #444]	; 0x1bc
   1663c:	cmp	r1, #0
   16640:	beq	1665c <__assert_fail@plt+0x528c>
   16644:	bl	110a0 <strcmp@plt>
   16648:	cmp	r0, #0
   1664c:	mvneq	r3, #0
   16650:	streq	r3, [sp, #440]	; 0x1b8
   16654:	moveq	r3, #0
   16658:	streq	r3, [sp, #444]	; 0x1bc
   1665c:	add	r0, sp, #240	; 0xf0
   16660:	bl	13f50 <__assert_fail@plt+0x2b80>
   16664:	subs	sl, r0, #0
   16668:	beq	166ac <__assert_fail@plt+0x52dc>
   1666c:	ldrb	r8, [sp, #421]	; 0x1a5
   16670:	cmp	r8, #0
   16674:	beq	16534 <__assert_fail@plt+0x5164>
   16678:	ldr	r3, [sp, #40]	; 0x28
   1667c:	add	r9, r9, r3
   16680:	ldr	r3, [sp, #240]	; 0xf0
   16684:	cmp	r3, r9
   16688:	mov	r2, #5
   1668c:	ldrcs	r1, [pc, #3300]	; 17378 <__assert_fail@plt+0x5fa8>
   16690:	ldrcc	r1, [pc, #3300]	; 1737c <__assert_fail@plt+0x5fac>
   16694:	mov	r0, #0
   16698:	bl	11130 <dcgettext@plt>
   1669c:	ldr	r1, [sp, #240]	; 0xf0
   166a0:	bl	13968 <__assert_fail@plt+0x2598>
   166a4:	mov	r8, #0
   166a8:	b	16534 <__assert_fail@plt+0x5164>
   166ac:	ldrb	r3, [sp, #421]	; 0x1a5
   166b0:	cmp	r3, #0
   166b4:	bne	167f4 <__assert_fail@plt+0x5424>
   166b8:	ldrb	r8, [sp, #392]	; 0x188
   166bc:	cmp	r8, #0
   166c0:	beq	169dc <__assert_fail@plt+0x560c>
   166c4:	add	r3, sp, #328	; 0x148
   166c8:	ldm	r3, {r0, r1}
   166cc:	ldr	r3, [sp, #36]	; 0x24
   166d0:	stm	r3, {r0, r1}
   166d4:	ldrb	r8, [sp, #421]	; 0x1a5
   166d8:	cmp	r8, #0
   166dc:	moveq	r8, #1
   166e0:	beq	16534 <__assert_fail@plt+0x5164>
   166e4:	ldr	r3, [sp, #948]	; 0x3b4
   166e8:	cmp	r3, #0
   166ec:	beq	186d4 <__assert_fail@plt+0x7304>
   166f0:	ldr	r1, [pc, #3208]	; 17380 <__assert_fail@plt+0x5fb0>
   166f4:	ldr	r0, [sp, #948]	; 0x3b4
   166f8:	bl	110a0 <strcmp@plt>
   166fc:	cmp	r0, #0
   16700:	bne	186ec <__assert_fail@plt+0x731c>
   16704:	mov	r2, #5
   16708:	ldr	r1, [pc, #3188]	; 17384 <__assert_fail@plt+0x5fb4>
   1670c:	bl	11130 <dcgettext@plt>
   16710:	bl	13968 <__assert_fail@plt+0x2598>
   16714:	ldr	r7, [sp, #36]	; 0x24
   16718:	ldr	r4, [r7]
   1671c:	asr	r5, r4, #31
   16720:	ldr	r6, [r7, #4]
   16724:	mov	r2, #5
   16728:	ldr	r1, [pc, #3160]	; 17388 <__assert_fail@plt+0x5fb8>
   1672c:	mov	r0, #0
   16730:	bl	11130 <dcgettext@plt>
   16734:	str	r6, [sp]
   16738:	mov	r2, r4
   1673c:	mov	r3, r5
   16740:	bl	13968 <__assert_fail@plt+0x2598>
   16744:	add	r1, sp, #96	; 0x60
   16748:	mov	r0, r7
   1674c:	bl	11088 <gmtime_r@plt>
   16750:	cmp	r0, #0
   16754:	beq	1678c <__assert_fail@plt+0x53bc>
   16758:	mov	r2, #5
   1675c:	ldr	r1, [pc, #3112]	; 1738c <__assert_fail@plt+0x5fbc>
   16760:	mov	r0, #0
   16764:	bl	11130 <dcgettext@plt>
   16768:	mov	r4, r0
   1676c:	mov	r3, #100	; 0x64
   16770:	add	r2, sp, #688	; 0x2b0
   16774:	mov	r1, #0
   16778:	add	r0, sp, #96	; 0x60
   1677c:	bl	139bc <__assert_fail@plt+0x25ec>
   16780:	mov	r1, r0
   16784:	mov	r0, r4
   16788:	bl	13968 <__assert_fail@plt+0x2598>
   1678c:	add	r2, sp, #140	; 0x8c
   16790:	ldr	r1, [sp, #36]	; 0x24
   16794:	mov	r0, fp
   16798:	bl	1acec <__assert_fail@plt+0x991c>
   1679c:	cmp	r0, #0
   167a0:	beq	16534 <__assert_fail@plt+0x5164>
   167a4:	ldr	r6, [sp, #176]	; 0xb0
   167a8:	mov	r2, #5
   167ac:	ldr	r1, [pc, #3036]	; 17390 <__assert_fail@plt+0x5fc0>
   167b0:	mov	r0, #0
   167b4:	bl	11130 <dcgettext@plt>
   167b8:	mov	r4, r0
   167bc:	mov	r3, #100	; 0x64
   167c0:	add	r2, sp, #688	; 0x2b0
   167c4:	mov	r1, #0
   167c8:	add	r0, sp, #140	; 0x8c
   167cc:	bl	139bc <__assert_fail@plt+0x25ec>
   167d0:	mov	r5, r0
   167d4:	add	r1, sp, #788	; 0x314
   167d8:	mov	r0, r6
   167dc:	bl	13768 <__assert_fail@plt+0x2398>
   167e0:	mov	r2, r0
   167e4:	mov	r1, r5
   167e8:	mov	r0, r4
   167ec:	bl	13968 <__assert_fail@plt+0x2598>
   167f0:	b	16534 <__assert_fail@plt+0x5164>
   167f4:	mov	r2, #5
   167f8:	ldr	r1, [pc, #2964]	; 17394 <__assert_fail@plt+0x5fc4>
   167fc:	mov	r0, #0
   16800:	bl	11130 <dcgettext@plt>
   16804:	bl	13968 <__assert_fail@plt+0x2598>
   16808:	ldrb	r3, [sp, #392]	; 0x188
   1680c:	cmp	r3, #0
   16810:	bne	168c0 <__assert_fail@plt+0x54f0>
   16814:	ldr	r3, [sp, #416]	; 0x1a0
   16818:	cmp	r3, #0
   1681c:	bne	168ec <__assert_fail@plt+0x551c>
   16820:	ldr	r3, [sp, #948]	; 0x3b4
   16824:	cmp	r3, #0
   16828:	beq	16984 <__assert_fail@plt+0x55b4>
   1682c:	ldr	r3, [sp, #944]	; 0x3b0
   16830:	cmp	r3, fp
   16834:	beq	16918 <__assert_fail@plt+0x5548>
   16838:	ldr	r3, [pc, #2904]	; 17398 <__assert_fail@plt+0x5fc8>
   1683c:	ldr	r4, [r3]
   16840:	mov	r2, #5
   16844:	ldr	r1, [pc, #2896]	; 1739c <__assert_fail@plt+0x5fcc>
   16848:	mov	r0, #0
   1684c:	bl	11130 <dcgettext@plt>
   16850:	ldr	r3, [sp, #948]	; 0x3b4
   16854:	mov	r2, r0
   16858:	mov	r1, #1
   1685c:	mov	r0, r4
   16860:	bl	112ec <__fprintf_chk@plt>
   16864:	ldr	r3, [sp, #404]	; 0x194
   16868:	cmp	r3, #0
   1686c:	beq	168a0 <__assert_fail@plt+0x54d0>
   16870:	ldr	r3, [sp, #416]	; 0x1a0
   16874:	cmp	r3, #0
   16878:	bne	169b0 <__assert_fail@plt+0x55e0>
   1687c:	ldr	r3, [sp, #260]	; 0x104
   16880:	cmp	r3, #0
   16884:	ble	168ac <__assert_fail@plt+0x54dc>
   16888:	ldr	r3, [pc, #2824]	; 17398 <__assert_fail@plt+0x5fc8>
   1688c:	ldr	r3, [r3]
   16890:	mov	r2, #5
   16894:	mov	r1, #1
   16898:	ldr	r0, [pc, #2816]	; 173a0 <__assert_fail@plt+0x5fd0>
   1689c:	bl	11184 <fwrite@plt>
   168a0:	ldr	r3, [sp, #416]	; 0x1a0
   168a4:	cmp	r3, #0
   168a8:	bne	169b0 <__assert_fail@plt+0x55e0>
   168ac:	ldr	r3, [pc, #2788]	; 17398 <__assert_fail@plt+0x5fc8>
   168b0:	ldr	r1, [r3]
   168b4:	mov	r0, #10
   168b8:	bl	11340 <fputc@plt>
   168bc:	b	166b8 <__assert_fail@plt+0x52e8>
   168c0:	ldr	r3, [pc, #2768]	; 17398 <__assert_fail@plt+0x5fc8>
   168c4:	ldr	r4, [r3]
   168c8:	mov	r2, #5
   168cc:	ldr	r1, [pc, #2768]	; 173a4 <__assert_fail@plt+0x5fd4>
   168d0:	mov	r0, #0
   168d4:	bl	11130 <dcgettext@plt>
   168d8:	mov	r2, r0
   168dc:	mov	r1, #1
   168e0:	mov	r0, r4
   168e4:	bl	112ec <__fprintf_chk@plt>
   168e8:	b	16864 <__assert_fail@plt+0x5494>
   168ec:	ldr	r3, [pc, #2724]	; 17398 <__assert_fail@plt+0x5fc8>
   168f0:	ldr	r4, [r3]
   168f4:	mov	r2, #5
   168f8:	ldr	r1, [pc, #2728]	; 173a8 <__assert_fail@plt+0x5fd8>
   168fc:	mov	r0, #0
   16900:	bl	11130 <dcgettext@plt>
   16904:	mov	r2, r0
   16908:	mov	r1, #1
   1690c:	mov	r0, r4
   16910:	bl	112ec <__fprintf_chk@plt>
   16914:	b	16864 <__assert_fail@plt+0x5494>
   16918:	ldr	r1, [pc, #2656]	; 17380 <__assert_fail@plt+0x5fb0>
   1691c:	ldr	r0, [sp, #948]	; 0x3b4
   16920:	bl	110a0 <strcmp@plt>
   16924:	cmp	r0, #0
   16928:	bne	16954 <__assert_fail@plt+0x5584>
   1692c:	ldr	r3, [pc, #2660]	; 17398 <__assert_fail@plt+0x5fc8>
   16930:	ldr	r4, [r3]
   16934:	mov	r2, #5
   16938:	ldr	r1, [pc, #2668]	; 173ac <__assert_fail@plt+0x5fdc>
   1693c:	bl	11130 <dcgettext@plt>
   16940:	mov	r2, r0
   16944:	mov	r1, #1
   16948:	mov	r0, r4
   1694c:	bl	112ec <__fprintf_chk@plt>
   16950:	b	16864 <__assert_fail@plt+0x5494>
   16954:	ldr	r3, [pc, #2620]	; 17398 <__assert_fail@plt+0x5fc8>
   16958:	ldr	r4, [r3]
   1695c:	mov	r2, #5
   16960:	ldr	r1, [pc, #2632]	; 173b0 <__assert_fail@plt+0x5fe0>
   16964:	mov	r0, #0
   16968:	bl	11130 <dcgettext@plt>
   1696c:	ldr	r3, [sp, #948]	; 0x3b4
   16970:	mov	r2, r0
   16974:	mov	r1, #1
   16978:	mov	r0, r4
   1697c:	bl	112ec <__fprintf_chk@plt>
   16980:	b	16864 <__assert_fail@plt+0x5494>
   16984:	ldr	r3, [pc, #2572]	; 17398 <__assert_fail@plt+0x5fc8>
   16988:	ldr	r4, [r3]
   1698c:	mov	r2, #5
   16990:	ldr	r1, [pc, #2588]	; 173b4 <__assert_fail@plt+0x5fe4>
   16994:	mov	r0, #0
   16998:	bl	11130 <dcgettext@plt>
   1699c:	mov	r2, r0
   169a0:	mov	r1, #1
   169a4:	mov	r0, r4
   169a8:	bl	112ec <__fprintf_chk@plt>
   169ac:	b	16864 <__assert_fail@plt+0x5494>
   169b0:	ldr	r3, [pc, #2528]	; 17398 <__assert_fail@plt+0x5fc8>
   169b4:	ldr	r4, [r3]
   169b8:	add	r1, sp, #788	; 0x314
   169bc:	ldr	r0, [sp, #264]	; 0x108
   169c0:	bl	13768 <__assert_fail@plt+0x2398>
   169c4:	mov	r3, r0
   169c8:	ldr	r2, [pc, #2536]	; 173b8 <__assert_fail@plt+0x5fe8>
   169cc:	mov	r1, #1
   169d0:	mov	r0, r4
   169d4:	bl	112ec <__fprintf_chk@plt>
   169d8:	b	168ac <__assert_fail@plt+0x54dc>
   169dc:	ldr	r1, [sp, #412]	; 0x19c
   169e0:	ldr	r3, [sp, #396]	; 0x18c
   169e4:	orr	r3, r1, r3
   169e8:	ldr	r2, [sp, #400]	; 0x190
   169ec:	orr	r3, r3, r2
   169f0:	ldr	r2, [sp, #408]	; 0x198
   169f4:	orr	r3, r3, r2
   169f8:	ldr	r0, [sp, #416]	; 0x1a0
   169fc:	ldr	r2, [sp, #404]	; 0x194
   16a00:	add	r2, r2, r0
   16a04:	orr	r3, r3, r2
   16a08:	cmp	r3, #1
   16a0c:	ble	16a88 <__assert_fail@plt+0x56b8>
   16a10:	ldrb	r3, [sp, #421]	; 0x1a5
   16a14:	cmp	r3, #0
   16a18:	beq	16534 <__assert_fail@plt+0x5164>
   16a1c:	cmp	r1, #1
   16a20:	ble	16a2c <__assert_fail@plt+0x565c>
   16a24:	ldr	r0, [pc, #2448]	; 173bc <__assert_fail@plt+0x5fec>
   16a28:	bl	13968 <__assert_fail@plt+0x2598>
   16a2c:	ldr	r3, [sp, #396]	; 0x18c
   16a30:	cmp	r3, #1
   16a34:	ble	16a40 <__assert_fail@plt+0x5670>
   16a38:	ldr	r0, [pc, #2432]	; 173c0 <__assert_fail@plt+0x5ff0>
   16a3c:	bl	13968 <__assert_fail@plt+0x2598>
   16a40:	ldr	r3, [sp, #400]	; 0x190
   16a44:	cmp	r3, #1
   16a48:	ble	16a54 <__assert_fail@plt+0x5684>
   16a4c:	ldr	r0, [pc, #2416]	; 173c4 <__assert_fail@plt+0x5ff4>
   16a50:	bl	13968 <__assert_fail@plt+0x2598>
   16a54:	ldr	r3, [sp, #408]	; 0x198
   16a58:	cmp	r3, #1
   16a5c:	ble	16a68 <__assert_fail@plt+0x5698>
   16a60:	ldr	r0, [pc, #2400]	; 173c8 <__assert_fail@plt+0x5ff8>
   16a64:	bl	13968 <__assert_fail@plt+0x2598>
   16a68:	ldr	r2, [sp, #416]	; 0x1a0
   16a6c:	ldr	r3, [sp, #404]	; 0x194
   16a70:	add	r3, r3, r2
   16a74:	cmp	r3, #1
   16a78:	ble	16534 <__assert_fail@plt+0x5164>
   16a7c:	ldr	r0, [pc, #2376]	; 173cc <__assert_fail@plt+0x5ffc>
   16a80:	bl	13968 <__assert_fail@plt+0x2598>
   16a84:	b	16534 <__assert_fail@plt+0x5164>
   16a88:	ldrb	r9, [sp, #421]	; 0x1a5
   16a8c:	add	r3, sp, #280	; 0x118
   16a90:	ldrd	r4, [r3]
   16a94:	cmp	r4, #0
   16a98:	sbcs	r3, r5, #0
   16a9c:	blt	16b90 <__assert_fail@plt+0x57c0>
   16aa0:	ldr	r3, [sp, #288]	; 0x120
   16aa4:	cmp	r3, #2
   16aa8:	beq	16b1c <__assert_fail@plt+0x574c>
   16aac:	ldr	r2, [pc, #2332]	; 173d0 <__assert_fail@plt+0x6000>
   16ab0:	mov	r3, #0
   16ab4:	cmp	r2, r4
   16ab8:	sbcs	r3, r3, r5
   16abc:	blt	16c20 <__assert_fail@plt+0x5850>
   16ac0:	ldr	r2, [pc, #2312]	; 173d0 <__assert_fail@plt+0x6000>
   16ac4:	mov	r3, #0
   16ac8:	subs	r2, r2, r4
   16acc:	sbc	r3, r3, r5
   16ad0:	cmp	r2, #-2147483648	; 0x80000000
   16ad4:	sbcs	r3, r3, #0
   16ad8:	movge	r3, #1
   16adc:	movlt	r3, #0
   16ae0:	cmp	r3, #0
   16ae4:	beq	16c44 <__assert_fail@plt+0x5874>
   16ae8:	sub	r3, r4, #1888	; 0x760
   16aec:	sub	r3, r3, #12
   16af0:	str	r3, [sp, #880]	; 0x370
   16af4:	cmp	r9, #0
   16af8:	beq	16c94 <__assert_fail@plt+0x58c4>
   16afc:	mov	r2, #5
   16b00:	ldr	r1, [pc, #2252]	; 173d4 <__assert_fail@plt+0x6004>
   16b04:	mov	r0, #0
   16b08:	bl	11130 <dcgettext@plt>
   16b0c:	mov	r2, r4
   16b10:	mov	r3, r5
   16b14:	bl	13968 <__assert_fail@plt+0x2598>
   16b18:	b	16c94 <__assert_fail@plt+0x58c4>
   16b1c:	cmp	r4, #69	; 0x45
   16b20:	sbcs	r3, r5, #0
   16b24:	ldrge	r6, [pc, #2112]	; 1736c <__assert_fail@plt+0x5f9c>
   16b28:	movlt	r6, #2000	; 0x7d0
   16b2c:	mov	r7, #0
   16b30:	adds	r2, r6, r4
   16b34:	adc	r3, r7, r5
   16b38:	mov	r6, r2
   16b3c:	mov	r7, r3
   16b40:	cmp	r9, #0
   16b44:	beq	16b70 <__assert_fail@plt+0x57a0>
   16b48:	mov	r2, #5
   16b4c:	ldr	r1, [pc, #2180]	; 173d8 <__assert_fail@plt+0x6008>
   16b50:	mov	r0, #0
   16b54:	bl	11130 <dcgettext@plt>
   16b58:	mov	r2, r6
   16b5c:	mov	r3, r7
   16b60:	strd	r2, [sp]
   16b64:	mov	r2, r4
   16b68:	mov	r3, r5
   16b6c:	bl	13968 <__assert_fail@plt+0x2598>
   16b70:	mov	r3, r7
   16b74:	cmp	r6, #0
   16b78:	sbcs	r3, r3, #0
   16b7c:	movge	r4, r6
   16b80:	movge	r5, r7
   16b84:	bge	16aac <__assert_fail@plt+0x56dc>
   16b88:	mov	r4, r6
   16b8c:	mov	r5, r7
   16b90:	ldr	r2, [pc, #2116]	; 173dc <__assert_fail@plt+0x600c>
   16b94:	mvn	r3, #0
   16b98:	cmp	r4, r2
   16b9c:	sbcs	r3, r5, r3
   16ba0:	blt	16be4 <__assert_fail@plt+0x5814>
   16ba4:	ldr	r2, [pc, #2084]	; 173d0 <__assert_fail@plt+0x6000>
   16ba8:	mov	r3, #0
   16bac:	adds	r0, r2, r4
   16bb0:	adc	r1, r3, r5
   16bb4:	cmp	r0, #-2147483648	; 0x80000000
   16bb8:	sbcs	r3, r1, #0
   16bbc:	movge	r3, #1
   16bc0:	movlt	r3, #0
   16bc4:	cmp	r3, #0
   16bc8:	beq	16c08 <__assert_fail@plt+0x5838>
   16bcc:	rsb	r3, r4, #-16777216	; 0xff000000
   16bd0:	add	r3, r3, #16711680	; 0xff0000
   16bd4:	add	r3, r3, #63488	; 0xf800
   16bd8:	add	r3, r3, #148	; 0x94
   16bdc:	str	r3, [sp, #880]	; 0x370
   16be0:	b	16af4 <__assert_fail@plt+0x5724>
   16be4:	ldr	r2, [pc, #2036]	; 173e0 <__assert_fail@plt+0x6010>
   16be8:	mvn	r3, #0
   16bec:	subs	r2, r2, r4
   16bf0:	sbc	r3, r3, r5
   16bf4:	cmp	r2, #-2147483648	; 0x80000000
   16bf8:	sbcs	r3, r3, #0
   16bfc:	movge	r3, #1
   16c00:	movlt	r3, #0
   16c04:	b	16bc4 <__assert_fail@plt+0x57f4>
   16c08:	rsb	r4, r4, #-16777216	; 0xff000000
   16c0c:	add	r4, r4, #16711680	; 0xff0000
   16c10:	add	r4, r4, #63488	; 0xf800
   16c14:	add	r4, r4, #148	; 0x94
   16c18:	str	r4, [sp, #880]	; 0x370
   16c1c:	b	16c50 <__assert_fail@plt+0x5880>
   16c20:	ldr	r2, [pc, #1976]	; 173e0 <__assert_fail@plt+0x6010>
   16c24:	mvn	r3, #0
   16c28:	adds	r0, r2, r4
   16c2c:	adc	r1, r3, r5
   16c30:	cmp	r0, #-2147483648	; 0x80000000
   16c34:	sbcs	r3, r1, #0
   16c38:	movge	r3, #1
   16c3c:	movlt	r3, #0
   16c40:	b	16ae0 <__assert_fail@plt+0x5710>
   16c44:	sub	r3, r4, #1888	; 0x760
   16c48:	sub	r3, r3, #12
   16c4c:	str	r3, [sp, #880]	; 0x370
   16c50:	add	r3, sp, #296	; 0x128
   16c54:	ldrd	r0, [r3]
   16c58:	mov	r2, #-2147483647	; 0x80000001
   16c5c:	mvn	r3, #0
   16c60:	cmp	r0, r2
   16c64:	sbcs	r3, r1, r3
   16c68:	blt	16c8c <__assert_fail@plt+0x58bc>
   16c6c:	cmp	r0, #0
   16c70:	sbcs	r3, r1, #0
   16c74:	blt	16cb8 <__assert_fail@plt+0x58e8>
   16c78:	subs	r2, r0, #1
   16c7c:	sbc	r3, r1, #0
   16c80:	cmp	r2, #-2147483648	; 0x80000000
   16c84:	sbcs	r3, r3, #0
   16c88:	blt	16cb8 <__assert_fail@plt+0x58e8>
   16c8c:	sub	r0, r0, #1
   16c90:	str	r0, [sp, #876]	; 0x36c
   16c94:	ldrb	r3, [sp, #421]	; 0x1a5
   16c98:	cmp	r3, #0
   16c9c:	beq	16534 <__assert_fail@plt+0x5164>
   16ca0:	mov	r2, #5
   16ca4:	ldr	r1, [pc, #1848]	; 173e4 <__assert_fail@plt+0x6014>
   16ca8:	mov	r0, #0
   16cac:	bl	11130 <dcgettext@plt>
   16cb0:	bl	13968 <__assert_fail@plt+0x2598>
   16cb4:	b	16534 <__assert_fail@plt+0x5164>
   16cb8:	sub	r0, r0, #1
   16cbc:	str	r0, [sp, #876]	; 0x36c
   16cc0:	add	r3, sp, #304	; 0x130
   16cc4:	ldrd	r2, [r3]
   16cc8:	cmp	r2, #0
   16ccc:	sbcs	r1, r3, #0
   16cd0:	blt	16da0 <__assert_fail@plt+0x59d0>
   16cd4:	cmp	r2, #-2147483648	; 0x80000000
   16cd8:	sbcs	r1, r3, #0
   16cdc:	movge	r9, #1
   16ce0:	movlt	r9, #0
   16ce4:	cmp	r9, #0
   16ce8:	strne	r2, [sp, #872]	; 0x368
   16cec:	bne	16c94 <__assert_fail@plt+0x58c4>
   16cf0:	str	r2, [sp, #872]	; 0x368
   16cf4:	ldr	ip, [sp, #412]	; 0x19c
   16cf8:	cmp	ip, #0
   16cfc:	bne	16d24 <__assert_fail@plt+0x5954>
   16d00:	ldrb	r3, [sp, #393]	; 0x189
   16d04:	cmp	r3, #0
   16d08:	beq	16fd4 <__assert_fail@plt+0x5c04>
   16d0c:	ldr	r3, [sp, #396]	; 0x18c
   16d10:	cmp	r3, #0
   16d14:	bne	16fd4 <__assert_fail@plt+0x5c04>
   16d18:	ldr	r3, [sp, #400]	; 0x190
   16d1c:	cmp	r3, #0
   16d20:	bne	18870 <__assert_fail@plt+0x74a0>
   16d24:	add	r3, sp, #312	; 0x138
   16d28:	ldrd	r2, [r3]
   16d2c:	ldr	r1, [sp, #268]	; 0x10c
   16d30:	cmp	r1, #0
   16d34:	beq	16dd4 <__assert_fail@plt+0x5a04>
   16d38:	cmp	r1, #1
   16d3c:	beq	16e0c <__assert_fail@plt+0x5a3c>
   16d40:	cmp	r3, #0
   16d44:	cmpeq	r2, #23
   16d48:	bhi	18864 <__assert_fail@plt+0x7494>
   16d4c:	str	r2, [sp, #868]	; 0x364
   16d50:	cmp	r2, #0
   16d54:	bge	16e64 <__assert_fail@plt+0x5a94>
   16d58:	cmp	r1, #0
   16d5c:	beq	16e5c <__assert_fail@plt+0x5a8c>
   16d60:	ldr	r3, [pc, #1664]	; 173e8 <__assert_fail@plt+0x6018>
   16d64:	ldr	r4, [pc, #1664]	; 173ec <__assert_fail@plt+0x601c>
   16d68:	cmp	r1, #1
   16d6c:	movne	r4, r3
   16d70:	ldrb	r3, [sp, #421]	; 0x1a5
   16d74:	cmp	r3, #0
   16d78:	beq	16534 <__assert_fail@plt+0x5164>
   16d7c:	mov	r2, #5
   16d80:	ldr	r1, [pc, #1640]	; 173f0 <__assert_fail@plt+0x6020>
   16d84:	mov	r0, #0
   16d88:	bl	11130 <dcgettext@plt>
   16d8c:	add	r3, sp, #312	; 0x138
   16d90:	ldrd	r2, [r3]
   16d94:	str	r4, [sp]
   16d98:	bl	13968 <__assert_fail@plt+0x2598>
   16d9c:	b	16534 <__assert_fail@plt+0x5164>
   16da0:	mov	r0, #-2147483648	; 0x80000000
   16da4:	mvn	r1, #0
   16da8:	subs	r0, r0, r2
   16dac:	sbc	r1, r1, r3
   16db0:	mov	r5, r1
   16db4:	cmp	r0, #1
   16db8:	sbcs	r1, r5, #0
   16dbc:	movge	r9, #1
   16dc0:	movlt	r9, #0
   16dc4:	cmp	r2, #-2147483648	; 0x80000000
   16dc8:	sbcs	r1, r3, #0
   16dcc:	orrge	r9, r9, #1
   16dd0:	b	16ce4 <__assert_fail@plt+0x5914>
   16dd4:	subs	r0, r2, #1
   16dd8:	sbc	r1, r3, #0
   16ddc:	cmp	r1, #0
   16de0:	cmpeq	r0, #10
   16de4:	bls	16df8 <__assert_fail@plt+0x5a28>
   16de8:	cmp	r3, #0
   16dec:	cmpeq	r2, #12
   16df0:	mvnne	r2, #0
   16df4:	moveq	r2, #0
   16df8:	str	r2, [sp, #868]	; 0x364
   16dfc:	cmp	r2, #0
   16e00:	bge	16e64 <__assert_fail@plt+0x5a94>
   16e04:	ldr	r4, [pc, #1512]	; 173f4 <__assert_fail@plt+0x6024>
   16e08:	b	16d70 <__assert_fail@plt+0x59a0>
   16e0c:	subs	r0, r2, #1
   16e10:	sbc	r1, r3, #0
   16e14:	cmp	r1, #0
   16e18:	cmpeq	r0, #10
   16e1c:	bhi	16e38 <__assert_fail@plt+0x5a68>
   16e20:	add	r2, r2, #12
   16e24:	str	r2, [sp, #868]	; 0x364
   16e28:	cmp	r2, #0
   16e2c:	bge	16e64 <__assert_fail@plt+0x5a94>
   16e30:	ldr	r4, [pc, #1460]	; 173ec <__assert_fail@plt+0x601c>
   16e34:	b	16d70 <__assert_fail@plt+0x59a0>
   16e38:	cmp	r3, #0
   16e3c:	cmpeq	r2, #12
   16e40:	moveq	r3, #12
   16e44:	streq	r3, [sp, #868]	; 0x364
   16e48:	beq	16e64 <__assert_fail@plt+0x5a94>
   16e4c:	mvn	r3, #0
   16e50:	str	r3, [sp, #868]	; 0x364
   16e54:	ldr	r4, [pc, #1424]	; 173ec <__assert_fail@plt+0x601c>
   16e58:	b	16d70 <__assert_fail@plt+0x59a0>
   16e5c:	ldr	r4, [pc, #1424]	; 173f4 <__assert_fail@plt+0x6024>
   16e60:	b	16d70 <__assert_fail@plt+0x59a0>
   16e64:	ldr	r3, [sp, #320]	; 0x140
   16e68:	str	r3, [sp, #864]	; 0x360
   16e6c:	ldr	r3, [sp, #328]	; 0x148
   16e70:	str	r3, [sp, #860]	; 0x35c
   16e74:	ldrb	r3, [sp, #421]	; 0x1a5
   16e78:	cmp	r3, #0
   16e7c:	beq	16edc <__assert_fail@plt+0x5b0c>
   16e80:	cmp	ip, #0
   16e84:	mov	r2, #5
   16e88:	ldrne	r1, [pc, #1384]	; 173f8 <__assert_fail@plt+0x6028>
   16e8c:	ldreq	r1, [pc, #1384]	; 173fc <__assert_fail@plt+0x602c>
   16e90:	mov	r0, #0
   16e94:	bl	11130 <dcgettext@plt>
   16e98:	mov	r4, r0
   16e9c:	ldr	r3, [sp, #860]	; 0x35c
   16ea0:	str	r3, [sp, #12]
   16ea4:	ldr	r3, [sp, #864]	; 0x360
   16ea8:	str	r3, [sp, #8]
   16eac:	ldr	r3, [sp, #868]	; 0x364
   16eb0:	str	r3, [sp, #4]
   16eb4:	ldr	r3, [pc, #1348]	; 17400 <__assert_fail@plt+0x6030>
   16eb8:	str	r3, [sp]
   16ebc:	mov	r3, #100	; 0x64
   16ec0:	mov	r2, #1
   16ec4:	mov	r1, r3
   16ec8:	add	r0, sp, #688	; 0x2b0
   16ecc:	bl	113c4 <__snprintf_chk@plt>
   16ed0:	add	r1, sp, #688	; 0x2b0
   16ed4:	mov	r0, r4
   16ed8:	bl	13968 <__assert_fail@plt+0x2598>
   16edc:	ldr	r2, [sp, #400]	; 0x190
   16ee0:	ldr	r3, [sp, #396]	; 0x18c
   16ee4:	orr	r3, r3, r2
   16ee8:	ldr	r2, [sp, #412]	; 0x19c
   16eec:	orrs	r3, r3, r2
   16ef0:	beq	16efc <__assert_fail@plt+0x5b2c>
   16ef4:	mvn	r3, #0
   16ef8:	str	r3, [sp, #892]	; 0x37c
   16efc:	ldr	r3, [sp, #404]	; 0x194
   16f00:	cmp	r3, #0
   16f04:	ldrne	r3, [sp, #260]	; 0x104
   16f08:	strne	r3, [sp, #892]	; 0x37c
   16f0c:	ldr	r3, [sp, #860]	; 0x35c
   16f10:	str	r3, [sp, #816]	; 0x330
   16f14:	ldr	r3, [sp, #864]	; 0x360
   16f18:	str	r3, [sp, #820]	; 0x334
   16f1c:	ldr	r3, [sp, #868]	; 0x364
   16f20:	str	r3, [sp, #824]	; 0x338
   16f24:	ldr	r3, [sp, #872]	; 0x368
   16f28:	str	r3, [sp, #828]	; 0x33c
   16f2c:	ldr	r3, [sp, #876]	; 0x36c
   16f30:	str	r3, [sp, #832]	; 0x340
   16f34:	ldr	r3, [sp, #880]	; 0x370
   16f38:	str	r3, [sp, #836]	; 0x344
   16f3c:	ldr	r3, [sp, #892]	; 0x37c
   16f40:	str	r3, [sp, #848]	; 0x350
   16f44:	mvn	r3, #0
   16f48:	str	r3, [sp, #884]	; 0x374
   16f4c:	add	r1, sp, #860	; 0x35c
   16f50:	mov	r0, fp
   16f54:	bl	1ad80 <__assert_fail@plt+0x99b0>
   16f58:	mov	r7, r0
   16f5c:	add	r1, sp, #860	; 0x35c
   16f60:	add	r0, sp, #816	; 0x330
   16f64:	bl	13548 <__assert_fail@plt+0x2178>
   16f68:	cmp	r0, #0
   16f6c:	bne	1744c <__assert_fail@plt+0x607c>
   16f70:	ldr	r3, [sp, #416]	; 0x1a0
   16f74:	str	r3, [sp, #48]	; 0x30
   16f78:	cmp	r3, #0
   16f7c:	beq	17070 <__assert_fail@plt+0x5ca0>
   16f80:	mov	r3, #88	; 0x58
   16f84:	strb	r3, [sp, #142]	; 0x8e
   16f88:	strb	r3, [sp, #141]	; 0x8d
   16f8c:	add	r4, sp, #904	; 0x388
   16f90:	strb	r3, [r4, #-764]!	; 0xfffffd04
   16f94:	add	r1, r4, #3
   16f98:	ldr	r0, [sp, #264]	; 0x108
   16f9c:	bl	13768 <__assert_fail@plt+0x2398>
   16fa0:	mov	r0, r4
   16fa4:	bl	1a9cc <__assert_fail@plt+0x95fc>
   16fa8:	subs	r4, r0, #0
   16fac:	bne	17000 <__assert_fail@plt+0x5c30>
   16fb0:	ldrb	r3, [sp, #421]	; 0x1a5
   16fb4:	cmp	r3, #0
   16fb8:	beq	16534 <__assert_fail@plt+0x5164>
   16fbc:	mov	r2, #5
   16fc0:	ldr	r1, [pc, #1084]	; 17404 <__assert_fail@plt+0x6034>
   16fc4:	bl	11130 <dcgettext@plt>
   16fc8:	add	r1, sp, #140	; 0x8c
   16fcc:	bl	13968 <__assert_fail@plt+0x2598>
   16fd0:	b	16534 <__assert_fail@plt+0x5164>
   16fd4:	mov	r3, #0
   16fd8:	str	r3, [sp, #860]	; 0x35c
   16fdc:	str	r3, [sp, #864]	; 0x360
   16fe0:	str	r3, [sp, #868]	; 0x364
   16fe4:	str	r3, [sp, #332]	; 0x14c
   16fe8:	ldrb	r3, [sp, #421]	; 0x1a5
   16fec:	cmp	r3, #0
   16ff0:	beq	16edc <__assert_fail@plt+0x5b0c>
   16ff4:	ldr	r0, [pc, #1036]	; 17408 <__assert_fail@plt+0x6038>
   16ff8:	bl	13968 <__assert_fail@plt+0x2598>
   16ffc:	b	16edc <__assert_fail@plt+0x5b0c>
   17000:	ldr	r3, [sp, #816]	; 0x330
   17004:	str	r3, [sp, #860]	; 0x35c
   17008:	ldr	r3, [sp, #820]	; 0x334
   1700c:	str	r3, [sp, #864]	; 0x360
   17010:	ldr	r3, [sp, #824]	; 0x338
   17014:	str	r3, [sp, #868]	; 0x364
   17018:	ldr	r3, [sp, #828]	; 0x33c
   1701c:	str	r3, [sp, #872]	; 0x368
   17020:	ldr	r3, [sp, #832]	; 0x340
   17024:	str	r3, [sp, #876]	; 0x36c
   17028:	ldr	r3, [sp, #836]	; 0x344
   1702c:	str	r3, [sp, #880]	; 0x370
   17030:	ldr	r3, [sp, #848]	; 0x350
   17034:	str	r3, [sp, #892]	; 0x37c
   17038:	mvn	r3, #0
   1703c:	str	r3, [sp, #884]	; 0x374
   17040:	add	r1, sp, #860	; 0x35c
   17044:	mov	r0, r4
   17048:	bl	1ad80 <__assert_fail@plt+0x99b0>
   1704c:	mov	r7, r0
   17050:	add	r1, sp, #860	; 0x35c
   17054:	add	r0, sp, #816	; 0x330
   17058:	bl	13548 <__assert_fail@plt+0x2178>
   1705c:	mov	r5, r0
   17060:	mov	r0, r4
   17064:	bl	1aba4 <__assert_fail@plt+0x97d4>
   17068:	cmp	r5, #0
   1706c:	bne	1744c <__assert_fail@plt+0x607c>
   17070:	ldr	r3, [sp, #816]	; 0x330
   17074:	mov	r0, r3
   17078:	str	r3, [sp, #56]	; 0x38
   1707c:	ldr	r3, [sp, #860]	; 0x35c
   17080:	mov	ip, r3
   17084:	str	r3, [sp, #64]	; 0x40
   17088:	ldr	r3, [sp, #820]	; 0x334
   1708c:	mov	lr, r3
   17090:	str	r3, [sp, #72]	; 0x48
   17094:	ldr	r3, [sp, #864]	; 0x360
   17098:	mov	r9, r3
   1709c:	str	r3, [sp, #80]	; 0x50
   170a0:	ldr	r3, [sp, #824]	; 0x338
   170a4:	str	r3, [sp, #36]	; 0x24
   170a8:	ldr	r2, [sp, #868]	; 0x364
   170ac:	str	r2, [sp, #40]	; 0x28
   170b0:	ldr	r7, [sp, #828]	; 0x33c
   170b4:	ldr	r6, [sp, #872]	; 0x368
   170b8:	cmp	r7, r6
   170bc:	movne	r3, #0
   170c0:	moveq	r3, #1
   170c4:	str	r3, [sp, #84]	; 0x54
   170c8:	ldr	r5, [sp, #832]	; 0x340
   170cc:	ldr	r4, [sp, #876]	; 0x36c
   170d0:	cmp	r5, r4
   170d4:	movne	r1, #0
   170d8:	moveq	r1, #1
   170dc:	ldr	r3, [sp, #836]	; 0x344
   170e0:	str	r3, [sp, #88]	; 0x58
   170e4:	ldr	r2, [sp, #880]	; 0x370
   170e8:	str	r2, [sp, #92]	; 0x5c
   170ec:	cmp	r3, r2
   170f0:	movne	r2, #0
   170f4:	moveq	r2, #1
   170f8:	cmp	r0, ip
   170fc:	cmpeq	lr, r9
   17100:	bne	17124 <__assert_fail@plt+0x5d54>
   17104:	ldr	r0, [sp, #36]	; 0x24
   17108:	ldr	ip, [sp, #40]	; 0x28
   1710c:	ldr	r3, [sp, #84]	; 0x54
   17110:	cmp	r0, ip
   17114:	moveq	r3, #0
   17118:	andne	r3, r3, #1
   1711c:	cmp	r3, #0
   17120:	andne	sl, r1, r2
   17124:	and	sl, sl, #1
   17128:	ldrb	r3, [sp, #421]	; 0x1a5
   1712c:	cmp	r3, #0
   17130:	beq	16534 <__assert_fail@plt+0x5164>
   17134:	mov	r2, #5
   17138:	ldr	r1, [pc, #716]	; 1740c <__assert_fail@plt+0x603c>
   1713c:	mov	r0, #0
   17140:	bl	11130 <dcgettext@plt>
   17144:	bl	13968 <__assert_fail@plt+0x2598>
   17148:	mov	r2, #5
   1714c:	ldr	r1, [pc, #700]	; 17410 <__assert_fail@plt+0x6040>
   17150:	mov	r0, #0
   17154:	bl	11130 <dcgettext@plt>
   17158:	mov	r9, r0
   1715c:	mov	r3, #100	; 0x64
   17160:	add	r2, sp, #140	; 0x8c
   17164:	add	r1, sp, #240	; 0xf0
   17168:	add	r0, sp, #816	; 0x330
   1716c:	bl	139bc <__assert_fail@plt+0x25ec>
   17170:	mov	r1, r0
   17174:	mov	r0, r9
   17178:	bl	13968 <__assert_fail@plt+0x2598>
   1717c:	mov	r2, #5
   17180:	ldr	r1, [pc, #652]	; 17414 <__assert_fail@plt+0x6044>
   17184:	mov	r0, #0
   17188:	bl	11130 <dcgettext@plt>
   1718c:	mov	r9, r0
   17190:	mov	r3, #100	; 0x64
   17194:	add	r2, sp, #140	; 0x8c
   17198:	add	r1, sp, #240	; 0xf0
   1719c:	add	r0, sp, #860	; 0x35c
   171a0:	bl	139bc <__assert_fail@plt+0x25ec>
   171a4:	mov	r1, r0
   171a8:	mov	r0, r9
   171ac:	bl	13968 <__assert_fail@plt+0x2598>
   171b0:	ldr	r3, [pc, #608]	; 17418 <__assert_fail@plt+0x6048>
   171b4:	ldr	r2, [pc, #556]	; 173e8 <__assert_fail@plt+0x6018>
   171b8:	ldr	r1, [sp, #92]	; 0x5c
   171bc:	ldr	r0, [sp, #88]	; 0x58
   171c0:	cmp	r0, r1
   171c4:	moveq	r9, r2
   171c8:	movne	r9, r3
   171cc:	ldr	r3, [pc, #584]	; 1741c <__assert_fail@plt+0x604c>
   171d0:	cmp	r5, r4
   171d4:	movne	r2, r3
   171d8:	str	r2, [sp, #8]
   171dc:	mov	r2, r3
   171e0:	ldr	r1, [pc, #512]	; 173e8 <__assert_fail@plt+0x6018>
   171e4:	cmp	r7, r6
   171e8:	movne	r1, r3
   171ec:	str	r1, [sp, #12]
   171f0:	mov	r1, r3
   171f4:	ldr	r0, [pc, #492]	; 173e8 <__assert_fail@plt+0x6018>
   171f8:	ldr	ip, [sp, #36]	; 0x24
   171fc:	ldr	lr, [sp, #40]	; 0x28
   17200:	cmp	ip, lr
   17204:	moveq	lr, r0
   17208:	movne	lr, r3
   1720c:	ldr	ip, [sp, #72]	; 0x48
   17210:	ldr	r3, [sp, #80]	; 0x50
   17214:	cmp	ip, r3
   17218:	moveq	r1, r0
   1721c:	mov	ip, r2
   17220:	ldr	r3, [sp, #56]	; 0x38
   17224:	ldr	r2, [sp, #64]	; 0x40
   17228:	cmp	r3, r2
   1722c:	movne	r0, ip
   17230:	str	r0, [sp, #24]
   17234:	str	r1, [sp, #20]
   17238:	str	lr, [sp, #16]
   1723c:	str	r9, [sp, #4]
   17240:	ldr	r3, [pc, #472]	; 17420 <__assert_fail@plt+0x6050>
   17244:	str	r3, [sp]
   17248:	mov	r3, #100	; 0x64
   1724c:	mov	r2, #1
   17250:	mov	r1, r3
   17254:	add	r0, sp, #140	; 0x8c
   17258:	bl	113c4 <__snprintf_chk@plt>
   1725c:	cmp	r0, #0
   17260:	blt	17284 <__assert_fail@plt+0x5eb4>
   17264:	cmp	r0, #99	; 0x63
   17268:	bhi	17320 <__assert_fail@plt+0x5f50>
   1726c:	cmp	r0, #0
   17270:	bgt	17324 <__assert_fail@plt+0x5f54>
   17274:	add	r3, sp, #904	; 0x388
   17278:	add	r0, r3, r0
   1727c:	mov	r3, #0
   17280:	strb	r3, [r0, #-764]	; 0xfffffd04
   17284:	add	r1, sp, #140	; 0x8c
   17288:	ldr	r0, [pc, #404]	; 17424 <__assert_fail@plt+0x6054>
   1728c:	bl	13968 <__assert_fail@plt+0x2598>
   17290:	mov	r2, #5
   17294:	ldr	r1, [pc, #396]	; 17428 <__assert_fail@plt+0x6058>
   17298:	mov	r0, #0
   1729c:	bl	11130 <dcgettext@plt>
   172a0:	bl	13968 <__assert_fail@plt+0x2598>
   172a4:	cmp	sl, #0
   172a8:	beq	172c0 <__assert_fail@plt+0x5ef0>
   172ac:	mov	r2, #5
   172b0:	ldr	r1, [pc, #372]	; 1742c <__assert_fail@plt+0x605c>
   172b4:	mov	r0, #0
   172b8:	bl	11130 <dcgettext@plt>
   172bc:	bl	13968 <__assert_fail@plt+0x2598>
   172c0:	cmp	r7, r6
   172c4:	cmpne	r5, r4
   172c8:	beq	172e0 <__assert_fail@plt+0x5f10>
   172cc:	mov	r2, #5
   172d0:	ldr	r1, [pc, #344]	; 17430 <__assert_fail@plt+0x6060>
   172d4:	mov	r0, #0
   172d8:	bl	11130 <dcgettext@plt>
   172dc:	bl	13968 <__assert_fail@plt+0x2598>
   172e0:	mov	r2, #5
   172e4:	ldr	r1, [pc, #328]	; 17434 <__assert_fail@plt+0x6064>
   172e8:	mov	r0, #0
   172ec:	bl	11130 <dcgettext@plt>
   172f0:	bl	13968 <__assert_fail@plt+0x2598>
   172f4:	ldr	r3, [sp, #48]	; 0x30
   172f8:	cmp	r3, #0
   172fc:	mov	r2, #5
   17300:	ldrne	r1, [pc, #304]	; 17438 <__assert_fail@plt+0x6068>
   17304:	ldreq	r1, [pc, #304]	; 1743c <__assert_fail@plt+0x606c>
   17308:	mov	r0, #0
   1730c:	bl	11130 <dcgettext@plt>
   17310:	mov	r1, r0
   17314:	ldr	r0, [pc, #292]	; 17440 <__assert_fail@plt+0x6070>
   17318:	bl	13968 <__assert_fail@plt+0x2598>
   1731c:	b	16534 <__assert_fail@plt+0x5164>
   17320:	mov	r0, #99	; 0x63
   17324:	sub	r2, r0, #1
   17328:	add	r3, sp, #904	; 0x388
   1732c:	add	r3, r3, r2
   17330:	ldrb	r3, [r3, #-764]	; 0xfffffd04
   17334:	cmp	r3, #32
   17338:	bne	17274 <__assert_fail@plt+0x5ea4>
   1733c:	add	r1, sp, #140	; 0x8c
   17340:	add	r3, r1, r2
   17344:	mov	r0, r2
   17348:	cmp	r0, #0
   1734c:	ble	17274 <__assert_fail@plt+0x5ea4>
   17350:	sub	r2, r0, #1
   17354:	ldrb	r1, [r3, #-1]!
   17358:	cmp	r1, #32
   1735c:	bne	17274 <__assert_fail@plt+0x5ea4>
   17360:	mov	r0, r2
   17364:	b	17348 <__assert_fail@plt+0x5f78>
   17368:	andeq	pc, r1, r4, lsr #16
   1736c:	andeq	r0, r0, ip, ror #14
   17370:	andeq	pc, r1, ip, lsr #16
   17374:	andeq	r0, r0, sp, lsl #2
   17378:	andeq	pc, r1, r0, asr r8	; <UNPREDICTABLE>
   1737c:	andeq	pc, r1, r8, ror #16
   17380:	strdeq	pc, [r1], -r0
   17384:	andeq	r0, r2, r4, asr r1
   17388:	muleq	r2, r8, r1
   1738c:			; <UNDEFINED> instruction: 0x000201bc
   17390:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   17394:	muleq	r1, r0, r8
   17398:	andeq	r1, r3, r0, lsr #3
   1739c:	ldrdeq	pc, [r1], -r8
   173a0:	andeq	pc, r1, r8, asr #18
   173a4:	andeq	pc, r1, r4, lsr #17
   173a8:	andeq	pc, r1, r0, asr #17
   173ac:	strdeq	pc, [r1], -r8
   173b0:	andeq	pc, r1, ip, lsl r9	; <UNPREDICTABLE>
   173b4:	andeq	pc, r1, r8, lsr r9	; <UNPREDICTABLE>
   173b8:	andeq	pc, r1, r0, asr r9	; <UNPREDICTABLE>
   173bc:	andeq	pc, r1, r8, asr r9	; <UNPREDICTABLE>
   173c0:	andeq	pc, r1, ip, ror r9	; <UNPREDICTABLE>
   173c4:	andeq	pc, r1, r0, lsr #19
   173c8:	andeq	pc, r1, r4, asr #19
   173cc:	strdeq	pc, [r1], -r0
   173d0:	andeq	r0, r0, fp, ror #14
   173d4:	andeq	pc, r1, r4, asr #20
   173d8:	andeq	pc, r1, r8, lsl sl	; <UNPREDICTABLE>
   173dc:			; <UNDEFINED> instruction: 0xfffff895
   173e0:			; <UNDEFINED> instruction: 0xfffff894
   173e4:	andeq	pc, r1, r4, ror #20
   173e8:	andeq	r0, r2, ip, asr #3
   173ec:			; <UNDEFINED> instruction: 0x0001f6b4
   173f0:	andeq	pc, r1, ip, lsl #21
   173f4:	andeq	pc, r1, r4, lsl r8	; <UNPREDICTABLE>
   173f8:	andeq	pc, r1, r8, lsr #21
   173fc:	ldrdeq	pc, [r1], -r8
   17400:	andeq	pc, r1, r4, lsl #22
   17404:	andeq	pc, r1, r8, asr #22
   17408:	andeq	pc, r1, r4, lsl fp	; <UNPREDICTABLE>
   1740c:	andeq	pc, r1, r8, ror #22
   17410:	andeq	pc, r1, ip, lsl #23
   17414:	andeq	pc, r1, ip, lsr #23
   17418:	andeq	pc, r1, r8, lsl r8	; <UNPREDICTABLE>
   1741c:	andeq	pc, r1, r0, lsr #16
   17420:	andeq	pc, r1, ip, asr #23
   17424:	andeq	r0, r2, r4, lsl #12
   17428:	andeq	pc, r1, r8, lsl #24
   1742c:	andeq	pc, r1, r0, lsr #24
   17430:	andeq	pc, r1, r4, asr ip	; <UNPREDICTABLE>
   17434:	andeq	pc, r1, ip, ror ip	; <UNPREDICTABLE>
   17438:	andeq	pc, r1, r0, lsr #25
   1743c:			; <UNDEFINED> instruction: 0x0001fcb4
   17440:	andeq	pc, r1, r8, asr #25
   17444:	subls	r2, r9, #-1828716544	; 0x93000000
   17448:	ldrdeq	pc, [r1], -r4
   1744c:	ldr	r3, [sp, #400]	; 0x190
   17450:	cmp	r3, #0
   17454:	beq	178c8 <__assert_fail@plt+0x64f8>
   17458:	ldr	r3, [sp, #396]	; 0x18c
   1745c:	cmp	r3, #0
   17460:	bne	18928 <__assert_fail@plt+0x7558>
   17464:	ldrd	r6, [sp, #248]	; 0xf8
   17468:	cmp	r6, #1
   1746c:	sbcs	r3, r7, #0
   17470:	blt	17484 <__assert_fail@plt+0x60b4>
   17474:	ldr	r3, [sp, #256]	; 0x100
   17478:	ldr	r2, [sp, #884]	; 0x374
   1747c:	cmp	r2, r3
   17480:	bne	18894 <__assert_fail@plt+0x74c4>
   17484:	cmp	r6, #0
   17488:	sbcs	r3, r7, #0
   1748c:	bge	176c8 <__assert_fail@plt+0x62f8>
   17490:	cmp	r6, #1
   17494:	sbcs	r3, r7, #0
   17498:	blt	18908 <__assert_fail@plt+0x7538>
   1749c:	ldr	r3, [sp, #256]	; 0x100
   174a0:	ldr	r2, [sp, #884]	; 0x374
   174a4:	cmp	r2, r3
   174a8:	bne	188ac <__assert_fail@plt+0x74dc>
   174ac:	mvn	r2, #0
   174b0:	mvn	r3, #0
   174b4:	cmp	r7, r3
   174b8:	cmpeq	r6, r2
   174bc:	moveq	r3, sl
   174c0:	beq	17510 <__assert_fail@plt+0x6140>
   174c4:	cmp	r6, #1
   174c8:	sbcs	r3, r7, #0
   174cc:	movlt	r2, sl
   174d0:	blt	174e4 <__assert_fail@plt+0x6114>
   174d4:	ldr	r3, [sp, #256]	; 0x100
   174d8:	ldr	r2, [sp, #884]	; 0x374
   174dc:	subs	r2, r2, r3
   174e0:	movne	r2, #1
   174e4:	subs	r0, r6, r2
   174e8:	sbc	r1, r7, r2, asr #31
   174ec:	mov	r2, r0
   174f0:	mov	r3, r1
   174f4:	mov	r0, #0
   174f8:	mov	r1, #-2147483648	; 0x80000000
   174fc:	bl	1dd60 <__assert_fail@plt+0xc990>
   17500:	cmp	r0, #7
   17504:	sbcs	r3, r1, #0
   17508:	movlt	r3, #1
   1750c:	movge	r3, #0
   17510:	and	r3, r3, #1
   17514:	cmp	r3, #0
   17518:	bne	17658 <__assert_fail@plt+0x6288>
   1751c:	cmp	r6, #1
   17520:	sbcs	r2, r7, #0
   17524:	blt	17538 <__assert_fail@plt+0x6168>
   17528:	ldr	r2, [sp, #256]	; 0x100
   1752c:	ldr	r3, [sp, #884]	; 0x374
   17530:	subs	r3, r3, r2
   17534:	movne	r3, #1
   17538:	subs	r4, r6, r3
   1753c:	sbc	r5, r7, r3, asr #31
   17540:	lsl	r1, r5, #3
   17544:	lsl	r2, r4, #3
   17548:	orr	r3, r1, r4, lsr #29
   1754c:	subs	r2, r2, r4
   17550:	sbc	r3, r3, r5
   17554:	mov	r6, r2
   17558:	mov	r7, r3
   1755c:	cmp	r2, #0
   17560:	sbcs	r3, r7, #0
   17564:	bge	1770c <__assert_fail@plt+0x633c>
   17568:	ldr	r0, [sp, #884]	; 0x374
   1756c:	ldr	r1, [sp, #256]	; 0x100
   17570:	sub	r1, r1, r0
   17574:	add	r1, r1, #7
   17578:	ldr	r0, [pc, #-316]	; 17444 <__assert_fail@plt+0x6074>
   1757c:	smull	r3, r0, r0, r1
   17580:	add	ip, r0, r1
   17584:	asr	r0, r1, #31
   17588:	rsb	r0, r0, ip, asr #2
   1758c:	rsb	r0, r0, r0, lsl #3
   17590:	sub	r1, r1, r0
   17594:	mov	r0, r1
   17598:	asr	r1, r1, #31
   1759c:	mov	r4, #0
   175a0:	mov	r5, #-2147483648	; 0x80000000
   175a4:	subs	r2, r4, r6
   175a8:	sbc	r3, r5, r7
   175ac:	cmp	r0, r2
   175b0:	sbcs	r3, r1, r3
   175b4:	movlt	r1, #1
   175b8:	movge	r1, #0
   175bc:	cmp	r1, #0
   175c0:	bne	17658 <__assert_fail@plt+0x6288>
   175c4:	ldr	r0, [sp, #884]	; 0x374
   175c8:	ldr	r1, [sp, #256]	; 0x100
   175cc:	sub	r1, r1, r0
   175d0:	add	r1, r1, #7
   175d4:	ldr	r0, [pc, #-408]	; 17444 <__assert_fail@plt+0x6074>
   175d8:	smull	r3, r0, r0, r1
   175dc:	add	ip, r0, r1
   175e0:	asr	r0, r1, #31
   175e4:	rsb	r0, r0, ip, asr #2
   175e8:	rsb	r0, r0, r0, lsl #3
   175ec:	sub	r1, r1, r0
   175f0:	adds	r2, r6, r1
   175f4:	adc	r3, r7, r1, asr #31
   175f8:	ldr	ip, [sp, #872]	; 0x368
   175fc:	cmp	ip, #0
   17600:	bge	17788 <__assert_fail@plt+0x63b8>
   17604:	rsb	r0, ip, #-2147483648	; 0x80000000
   17608:	asr	r1, r0, #31
   1760c:	cmp	r2, r0
   17610:	sbcs	r1, r3, r1
   17614:	movlt	r1, #1
   17618:	blt	17644 <__assert_fail@plt+0x6274>
   1761c:	cmp	r2, #0
   17620:	sbcs	r1, r3, #0
   17624:	movlt	r1, sl
   17628:	blt	17644 <__assert_fail@plt+0x6274>
   1762c:	adds	r0, r2, ip
   17630:	adc	r1, r3, ip, asr #31
   17634:	cmp	r0, #-2147483648	; 0x80000000
   17638:	sbcs	r1, r1, #0
   1763c:	movge	r1, #1
   17640:	movlt	r1, #0
   17644:	and	r1, r1, #1
   17648:	cmp	r1, #0
   1764c:	beq	17848 <__assert_fail@plt+0x6478>
   17650:	add	r2, ip, r2
   17654:	str	r2, [sp, #872]	; 0x368
   17658:	ldrb	r3, [sp, #421]	; 0x1a5
   1765c:	cmp	r3, #0
   17660:	beq	16534 <__assert_fail@plt+0x5164>
   17664:	mov	r2, #5
   17668:	ldr	r1, [pc, #-552]	; 17448 <__assert_fail@plt+0x6078>
   1766c:	mov	r0, #0
   17670:	bl	11130 <dcgettext@plt>
   17674:	mov	r6, r0
   17678:	mov	r2, #100	; 0x64
   1767c:	add	r1, sp, #140	; 0x8c
   17680:	add	r0, sp, #240	; 0xf0
   17684:	bl	1366c <__assert_fail@plt+0x229c>
   17688:	mov	r7, r0
   1768c:	ldrd	r4, [sp, #248]	; 0xf8
   17690:	ldr	r9, [sp, #256]	; 0x100
   17694:	mov	r3, #100	; 0x64
   17698:	add	r2, sp, #688	; 0x2b0
   1769c:	add	r1, sp, #240	; 0xf0
   176a0:	add	r0, sp, #860	; 0x35c
   176a4:	bl	139bc <__assert_fail@plt+0x25ec>
   176a8:	str	r0, [sp, #4]
   176ac:	str	r9, [sp]
   176b0:	mov	r2, r4
   176b4:	mov	r3, r5
   176b8:	mov	r1, r7
   176bc:	mov	r0, r6
   176c0:	bl	13968 <__assert_fail@plt+0x2598>
   176c4:	b	16534 <__assert_fail@plt+0x5164>
   176c8:	cmp	r6, #1
   176cc:	sbcs	r3, r7, #0
   176d0:	movlt	r3, sl
   176d4:	blt	176e8 <__assert_fail@plt+0x6318>
   176d8:	ldr	r2, [sp, #256]	; 0x100
   176dc:	ldr	r3, [sp, #884]	; 0x374
   176e0:	subs	r3, r3, r2
   176e4:	movne	r3, #1
   176e8:	subs	r0, r6, r3
   176ec:	sbc	r1, r7, r3, asr #31
   176f0:	add	r3, pc, #248	; 0xf8
   176f4:	ldrd	r2, [r3]
   176f8:	cmp	r2, r0
   176fc:	sbcs	r3, r3, r1
   17700:	movlt	r3, #1
   17704:	movge	r3, #0
   17708:	b	17514 <__assert_fail@plt+0x6144>
   1770c:	ldr	r0, [sp, #884]	; 0x374
   17710:	ldr	r1, [sp, #256]	; 0x100
   17714:	sub	r1, r1, r0
   17718:	add	r1, r1, #7
   1771c:	ldr	r0, [pc, #212]	; 177f8 <__assert_fail@plt+0x6428>
   17720:	smull	r3, r0, r0, r1
   17724:	add	r0, r0, r1
   17728:	asr	ip, r1, #31
   1772c:	rsb	r0, ip, r0, asr #2
   17730:	rsb	r0, r0, r0, lsl #3
   17734:	subs	r0, r1, r0
   17738:	bpl	17760 <__assert_fail@plt+0x6390>
   1773c:	mov	r4, #0
   17740:	mov	r5, #-2147483648	; 0x80000000
   17744:	subs	r2, r4, r0
   17748:	sbc	r3, r5, r0, asr #31
   1774c:	cmp	r6, r2
   17750:	sbcs	r3, r7, r3
   17754:	movlt	r1, #1
   17758:	movge	r1, #0
   1775c:	b	175bc <__assert_fail@plt+0x61ec>
   17760:	mvn	r4, #0
   17764:	mvn	r5, #-2147483648	; 0x80000000
   17768:	subs	r2, r4, r6
   1776c:	sbc	r3, r5, r7
   17770:	asr	r1, r0, #31
   17774:	cmp	r2, r0
   17778:	sbcs	r3, r3, r1
   1777c:	movlt	r1, #1
   17780:	movge	r1, #0
   17784:	b	175bc <__assert_fail@plt+0x61ec>
   17788:	cmp	r2, #0
   1778c:	sbcs	r1, r3, #0
   17790:	bge	177d0 <__assert_fail@plt+0x6400>
   17794:	asr	r7, ip, #31
   17798:	mov	r4, #-2147483648	; 0x80000000
   1779c:	mvn	r5, #0
   177a0:	subs	r0, r4, r2
   177a4:	sbc	r1, r5, r3
   177a8:	cmp	ip, r0
   177ac:	sbcs	r1, r7, r1
   177b0:	blt	17650 <__assert_fail@plt+0x6280>
   177b4:	adds	r0, ip, r2
   177b8:	adc	r1, r7, r3
   177bc:	cmp	r0, #-2147483648	; 0x80000000
   177c0:	sbcs	r1, r1, #0
   177c4:	movge	r1, #1
   177c8:	movlt	r1, #0
   177cc:	b	17648 <__assert_fail@plt+0x6278>
   177d0:	mvn	r0, #-2147483648	; 0x80000000
   177d4:	sub	r0, r0, ip
   177d8:	asr	r1, r0, #31
   177dc:	cmp	r0, r2
   177e0:	sbcs	r1, r1, r3
   177e4:	movlt	r1, #1
   177e8:	movge	r1, #0
   177ec:	b	17648 <__assert_fail@plt+0x6278>
   177f0:	stmdbmi	r4!, {r0, r3, r6, r9, ip, pc}
   177f4:	subne	r2, r9, #-1845493760	; 0x92000000
   177f8:	subls	r2, r9, #-1828716544	; 0x93000000
   177fc:	andeq	pc, r1, r4, lsr #26
   17800:	andeq	pc, r1, r4, asr #26
   17804:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   17808:	andeq	pc, r1, r8, lsl #27
   1780c:	andeq	pc, r1, r4, asr #27
   17810:	andeq	pc, r1, r0, ror #27
   17814:	andeq	pc, r1, r4, asr #28
   17818:			; <UNDEFINED> instruction: 0x0001feb0
   1781c:	andeq	pc, r1, ip, lsl #29
   17820:	andeq	r0, r0, r5, ror #16
   17824:	muleq	r1, ip, lr
   17828:	strdeq	pc, [r1], -r0
   1782c:	andeq	pc, r1, r0, lsr pc	; <UNPREDICTABLE>
   17830:	andeq	pc, r1, ip, asr #30
   17834:	andeq	pc, r1, ip, lsl #31
   17838:	andeq	pc, r1, r8, asr #31
   1783c:	andeq	pc, r1, ip, ror #31
   17840:	andeq	r0, r2, r0, lsl r0
   17844:	andeq	r0, r2, ip, lsr r0
   17848:	add	r2, ip, r2
   1784c:	str	r2, [sp, #872]	; 0x368
   17850:	mvn	r3, #0
   17854:	str	r3, [sp, #892]	; 0x37c
   17858:	add	r1, sp, #860	; 0x35c
   1785c:	mov	r0, fp
   17860:	bl	1ad80 <__assert_fail@plt+0x99b0>
   17864:	mov	r7, r0
   17868:	cmn	r0, #1
   1786c:	beq	17658 <__assert_fail@plt+0x6288>
   17870:	ldrb	r3, [sp, #421]	; 0x1a5
   17874:	cmp	r3, #0
   17878:	beq	1896c <__assert_fail@plt+0x759c>
   1787c:	mov	r2, #5
   17880:	ldr	r1, [pc, #-140]	; 177fc <__assert_fail@plt+0x642c>
   17884:	mov	r0, #0
   17888:	bl	11130 <dcgettext@plt>
   1788c:	mov	r4, r0
   17890:	mov	r2, #100	; 0x64
   17894:	add	r1, sp, #140	; 0x8c
   17898:	add	r0, sp, #240	; 0xf0
   1789c:	bl	1366c <__assert_fail@plt+0x229c>
   178a0:	mov	r5, r0
   178a4:	mov	r3, #100	; 0x64
   178a8:	add	r2, sp, #688	; 0x2b0
   178ac:	add	r1, sp, #240	; 0xf0
   178b0:	add	r0, sp, #860	; 0x35c
   178b4:	bl	139bc <__assert_fail@plt+0x25ec>
   178b8:	mov	r2, r0
   178bc:	mov	r1, r5
   178c0:	mov	r0, r4
   178c4:	bl	13968 <__assert_fail@plt+0x2598>
   178c8:	ldrb	r3, [sp, #421]	; 0x1a5
   178cc:	cmp	r3, #0
   178d0:	beq	18934 <__assert_fail@plt+0x7564>
   178d4:	ldr	r3, [sp, #396]	; 0x18c
   178d8:	cmp	r3, #0
   178dc:	bne	188c0 <__assert_fail@plt+0x74f0>
   178e0:	ldr	r3, [sp, #400]	; 0x190
   178e4:	cmp	r3, #0
   178e8:	bne	17994 <__assert_fail@plt+0x65c4>
   178ec:	mov	r2, #5
   178f0:	ldr	r1, [pc, #-248]	; 17800 <__assert_fail@plt+0x6430>
   178f4:	mov	r0, #0
   178f8:	bl	11130 <dcgettext@plt>
   178fc:	mov	r4, r0
   17900:	add	r1, sp, #96	; 0x60
   17904:	ldr	r0, [sp, #880]	; 0x370
   17908:	bl	13898 <__assert_fail@plt+0x24c8>
   1790c:	ldr	r3, [sp, #872]	; 0x368
   17910:	str	r3, [sp, #12]
   17914:	ldr	r3, [sp, #876]	; 0x36c
   17918:	add	r3, r3, #1
   1791c:	str	r3, [sp, #8]
   17920:	str	r0, [sp, #4]
   17924:	ldr	r3, [pc, #-296]	; 17804 <__assert_fail@plt+0x6434>
   17928:	str	r3, [sp]
   1792c:	mov	r3, #100	; 0x64
   17930:	mov	r2, #1
   17934:	mov	r1, r3
   17938:	add	r0, sp, #688	; 0x2b0
   1793c:	bl	113c4 <__snprintf_chk@plt>
   17940:	add	r1, sp, #688	; 0x2b0
   17944:	mov	r0, r4
   17948:	bl	13968 <__assert_fail@plt+0x2598>
   1794c:	ldr	r3, [sp, #400]	; 0x190
   17950:	cmp	r3, #0
   17954:	beq	17994 <__assert_fail@plt+0x65c4>
   17958:	ldr	r3, [sp, #396]	; 0x18c
   1795c:	cmp	r3, #0
   17960:	beq	17994 <__assert_fail@plt+0x65c4>
   17964:	mov	r2, #5
   17968:	ldr	r1, [pc, #-360]	; 17808 <__assert_fail@plt+0x6438>
   1796c:	mov	r0, #0
   17970:	bl	11130 <dcgettext@plt>
   17974:	mov	r4, r0
   17978:	mov	r2, #100	; 0x64
   1797c:	add	r1, sp, #140	; 0x8c
   17980:	add	r0, sp, #240	; 0xf0
   17984:	bl	1366c <__assert_fail@plt+0x229c>
   17988:	mov	r1, r0
   1798c:	mov	r0, r4
   17990:	bl	13968 <__assert_fail@plt+0x2598>
   17994:	mov	r2, #5
   17998:	ldr	r1, [pc, #-404]	; 1780c <__assert_fail@plt+0x643c>
   1799c:	mov	r0, #0
   179a0:	bl	11130 <dcgettext@plt>
   179a4:	mov	r4, r0
   179a8:	mov	r3, #100	; 0x64
   179ac:	add	r2, sp, #688	; 0x2b0
   179b0:	add	r1, sp, #240	; 0xf0
   179b4:	add	r0, sp, #860	; 0x35c
   179b8:	bl	139bc <__assert_fail@plt+0x25ec>
   179bc:	mov	r1, r0
   179c0:	mov	r0, r4
   179c4:	bl	13968 <__assert_fail@plt+0x2598>
   179c8:	add	ip, sp, #248	; 0xf8
   179cc:	ldrd	r0, [ip, #88]	; 0x58
   179d0:	ldrd	r2, [ip, #96]	; 0x60
   179d4:	orr	r4, r2, r0
   179d8:	orr	r5, r3, r1
   179dc:	ldrd	r0, [ip, #104]	; 0x68
   179e0:	orr	r2, r0, r4
   179e4:	orr	r3, r1, r5
   179e8:	orrs	r3, r2, r3
   179ec:	beq	17f24 <__assert_fail@plt+0x6b54>
   179f0:	ldrb	r1, [sp, #421]	; 0x1a5
   179f4:	cmp	r1, #0
   179f8:	beq	17a54 <__assert_fail@plt+0x6684>
   179fc:	orrs	r3, r4, r5
   17a00:	beq	17a34 <__assert_fail@plt+0x6664>
   17a04:	ldr	r3, [sp, #872]	; 0x368
   17a08:	cmp	r3, #15
   17a0c:	beq	17a24 <__assert_fail@plt+0x6654>
   17a10:	mov	r2, #5
   17a14:	ldr	r1, [pc, #-524]	; 17810 <__assert_fail@plt+0x6440>
   17a18:	mov	r0, #0
   17a1c:	bl	11130 <dcgettext@plt>
   17a20:	bl	13968 <__assert_fail@plt+0x2598>
   17a24:	add	r3, sp, #248	; 0xf8
   17a28:	ldrd	r2, [r3, #104]	; 0x68
   17a2c:	orrs	r3, r2, r3
   17a30:	beq	17a54 <__assert_fail@plt+0x6684>
   17a34:	ldr	r3, [sp, #868]	; 0x364
   17a38:	cmp	r3, #12
   17a3c:	beq	17a54 <__assert_fail@plt+0x6684>
   17a40:	mov	r2, #5
   17a44:	ldr	r1, [pc, #-568]	; 17814 <__assert_fail@plt+0x6444>
   17a48:	mov	r0, #0
   17a4c:	bl	11130 <dcgettext@plt>
   17a50:	bl	13968 <__assert_fail@plt+0x2598>
   17a54:	add	r3, sp, #248	; 0xf8
   17a58:	ldrd	r6, [r3, #88]	; 0x58
   17a5c:	cmp	r6, #0
   17a60:	sbcs	r3, r7, #0
   17a64:	bge	17c50 <__assert_fail@plt+0x6880>
   17a68:	ldr	ip, [sp, #880]	; 0x370
   17a6c:	asr	r1, ip, #31
   17a70:	mov	r4, #-2147483648	; 0x80000000
   17a74:	mvn	r5, #0
   17a78:	subs	r2, r4, r6
   17a7c:	sbc	r3, r5, r7
   17a80:	cmp	ip, r2
   17a84:	sbcs	r3, r1, r3
   17a88:	movlt	r1, #1
   17a8c:	blt	17ab4 <__assert_fail@plt+0x66e4>
   17a90:	cmp	ip, #0
   17a94:	movlt	r1, sl
   17a98:	blt	17ab4 <__assert_fail@plt+0x66e4>
   17a9c:	adds	r0, ip, r6
   17aa0:	adc	r1, r1, r7
   17aa4:	cmp	r0, #-2147483648	; 0x80000000
   17aa8:	sbcs	r3, r1, #0
   17aac:	movge	r1, #1
   17ab0:	movlt	r1, #0
   17ab4:	and	r1, r1, #1
   17ab8:	cmp	r1, #0
   17abc:	bne	17da0 <__assert_fail@plt+0x69d0>
   17ac0:	ldr	r3, [sp, #880]	; 0x370
   17ac4:	add	r3, r3, r6
   17ac8:	str	r3, [sp, #40]	; 0x28
   17acc:	add	r3, sp, #248	; 0xf8
   17ad0:	ldrd	r6, [r3, #96]	; 0x60
   17ad4:	cmp	r6, #0
   17ad8:	sbcs	r3, r7, #0
   17adc:	bge	17cc0 <__assert_fail@plt+0x68f0>
   17ae0:	ldr	ip, [sp, #876]	; 0x36c
   17ae4:	asr	r5, ip, #31
   17ae8:	mov	r0, #-2147483648	; 0x80000000
   17aec:	mvn	r1, #0
   17af0:	subs	r2, r0, r6
   17af4:	sbc	r3, r1, r7
   17af8:	cmp	ip, r2
   17afc:	sbcs	r3, r5, r3
   17b00:	movlt	r3, #1
   17b04:	blt	17b2c <__assert_fail@plt+0x675c>
   17b08:	cmp	ip, #0
   17b0c:	movlt	r3, sl
   17b10:	blt	17b2c <__assert_fail@plt+0x675c>
   17b14:	adds	r2, ip, r6
   17b18:	adc	r3, r5, r7
   17b1c:	cmp	r2, #-2147483648	; 0x80000000
   17b20:	sbcs	r3, r3, #0
   17b24:	movge	r3, #1
   17b28:	movlt	r3, #0
   17b2c:	and	r3, r3, #1
   17b30:	cmp	r3, #0
   17b34:	bne	17da0 <__assert_fail@plt+0x69d0>
   17b38:	ldr	r3, [sp, #876]	; 0x36c
   17b3c:	add	r6, r3, r6
   17b40:	add	r3, sp, #248	; 0xf8
   17b44:	ldrd	r2, [r3, #104]	; 0x68
   17b48:	cmp	r2, #0
   17b4c:	sbcs	r1, r3, #0
   17b50:	bge	17d30 <__assert_fail@plt+0x6960>
   17b54:	ldr	ip, [sp, #872]	; 0x368
   17b58:	mov	r0, ip
   17b5c:	asr	r1, ip, #31
   17b60:	strd	r0, [sp, #48]	; 0x30
   17b64:	mov	r0, #-2147483648	; 0x80000000
   17b68:	mvn	r1, #0
   17b6c:	subs	r4, r0, r2
   17b70:	sbc	r5, r1, r3
   17b74:	ldrd	r0, [sp, #48]	; 0x30
   17b78:	cmp	r0, r4
   17b7c:	sbcs	r1, r1, r5
   17b80:	movlt	r1, #1
   17b84:	blt	17bb0 <__assert_fail@plt+0x67e0>
   17b88:	cmp	ip, #0
   17b8c:	movlt	r1, sl
   17b90:	blt	17bb0 <__assert_fail@plt+0x67e0>
   17b94:	ldrd	r4, [sp, #48]	; 0x30
   17b98:	adds	r4, r4, r2
   17b9c:	adc	r5, r5, r3
   17ba0:	cmp	r4, #-2147483648	; 0x80000000
   17ba4:	sbcs	r1, r5, #0
   17ba8:	movge	r1, #1
   17bac:	movlt	r1, #0
   17bb0:	and	r1, r1, #1
   17bb4:	cmp	r1, #0
   17bb8:	bne	17da0 <__assert_fail@plt+0x69d0>
   17bbc:	ldr	r4, [sp, #872]	; 0x368
   17bc0:	add	r4, r4, r2
   17bc4:	ldr	r3, [sp, #40]	; 0x28
   17bc8:	str	r3, [sp, #880]	; 0x370
   17bcc:	str	r6, [sp, #876]	; 0x36c
   17bd0:	str	r4, [sp, #872]	; 0x368
   17bd4:	ldr	r3, [sp, #824]	; 0x338
   17bd8:	str	r3, [sp, #868]	; 0x364
   17bdc:	ldr	r3, [sp, #820]	; 0x334
   17be0:	str	r3, [sp, #864]	; 0x360
   17be4:	ldr	r3, [sp, #816]	; 0x330
   17be8:	str	r3, [sp, #860]	; 0x35c
   17bec:	ldr	r3, [sp, #848]	; 0x350
   17bf0:	str	r3, [sp, #892]	; 0x37c
   17bf4:	add	r1, sp, #860	; 0x35c
   17bf8:	mov	r0, fp
   17bfc:	bl	1ad80 <__assert_fail@plt+0x99b0>
   17c00:	mov	r7, r0
   17c04:	cmn	r0, #1
   17c08:	bne	17dcc <__assert_fail@plt+0x69fc>
   17c0c:	ldrb	r3, [sp, #421]	; 0x1a5
   17c10:	cmp	r3, #0
   17c14:	beq	16534 <__assert_fail@plt+0x5164>
   17c18:	mov	r2, #5
   17c1c:	ldr	r1, [pc, #-1036]	; 17818 <__assert_fail@plt+0x6448>
   17c20:	mov	r0, #0
   17c24:	bl	11130 <dcgettext@plt>
   17c28:	mov	r4, r0
   17c2c:	mov	r3, #100	; 0x64
   17c30:	add	r2, sp, #688	; 0x2b0
   17c34:	add	r1, sp, #240	; 0xf0
   17c38:	add	r0, sp, #860	; 0x35c
   17c3c:	bl	139bc <__assert_fail@plt+0x25ec>
   17c40:	mov	r1, r0
   17c44:	mov	r0, r4
   17c48:	bl	13968 <__assert_fail@plt+0x2598>
   17c4c:	b	16534 <__assert_fail@plt+0x5164>
   17c50:	ldr	r0, [sp, #880]	; 0x370
   17c54:	cmp	r0, #0
   17c58:	bge	17c8c <__assert_fail@plt+0x68bc>
   17c5c:	rsb	r4, r0, #-2147483648	; 0x80000000
   17c60:	asr	r5, r4, #31
   17c64:	cmp	r6, r4
   17c68:	sbcs	r3, r7, r5
   17c6c:	blt	17da0 <__assert_fail@plt+0x69d0>
   17c70:	adds	r4, r6, r0
   17c74:	adc	r5, r7, r0, asr #31
   17c78:	cmp	r4, #-2147483648	; 0x80000000
   17c7c:	sbcs	r3, r5, #0
   17c80:	movge	r1, #1
   17c84:	movlt	r1, #0
   17c88:	b	17ab8 <__assert_fail@plt+0x66e8>
   17c8c:	cmp	r6, #-2147483648	; 0x80000000
   17c90:	sbcs	r3, r7, #0
   17c94:	bge	17da0 <__assert_fail@plt+0x69d0>
   17c98:	mvn	r4, #-2147483648	; 0x80000000
   17c9c:	mov	r5, #0
   17ca0:	subs	r2, r4, r6
   17ca4:	sbc	r3, r5, r7
   17ca8:	asr	r1, r0, #31
   17cac:	cmp	r2, r0
   17cb0:	sbcs	r3, r3, r1
   17cb4:	movlt	r1, #1
   17cb8:	movge	r1, #0
   17cbc:	b	17ab8 <__assert_fail@plt+0x66e8>
   17cc0:	ldr	r2, [sp, #876]	; 0x36c
   17cc4:	cmp	r2, #0
   17cc8:	bge	17cfc <__assert_fail@plt+0x692c>
   17ccc:	rsb	r0, r2, #-2147483648	; 0x80000000
   17cd0:	asr	r1, r0, #31
   17cd4:	cmp	r6, r0
   17cd8:	sbcs	r3, r7, r1
   17cdc:	blt	17da0 <__assert_fail@plt+0x69d0>
   17ce0:	adds	r0, r6, r2
   17ce4:	adc	r1, r7, r2, asr #31
   17ce8:	cmp	r0, #-2147483648	; 0x80000000
   17cec:	sbcs	r3, r1, #0
   17cf0:	movge	r3, #1
   17cf4:	movlt	r3, #0
   17cf8:	b	17b30 <__assert_fail@plt+0x6760>
   17cfc:	cmp	r6, #-2147483648	; 0x80000000
   17d00:	sbcs	r3, r7, #0
   17d04:	bge	17da0 <__assert_fail@plt+0x69d0>
   17d08:	mvn	r0, #-2147483648	; 0x80000000
   17d0c:	mov	r1, #0
   17d10:	subs	r0, r0, r6
   17d14:	sbc	r1, r1, r7
   17d18:	asr	r3, r2, #31
   17d1c:	cmp	r0, r2
   17d20:	sbcs	r3, r1, r3
   17d24:	movlt	r3, #1
   17d28:	movge	r3, #0
   17d2c:	b	17b30 <__assert_fail@plt+0x6760>
   17d30:	ldr	r0, [sp, #872]	; 0x368
   17d34:	cmp	r0, #0
   17d38:	bge	17d6c <__assert_fail@plt+0x699c>
   17d3c:	rsb	r4, r0, #-2147483648	; 0x80000000
   17d40:	asr	r5, r4, #31
   17d44:	cmp	r2, r4
   17d48:	sbcs	r1, r3, r5
   17d4c:	blt	17da0 <__assert_fail@plt+0x69d0>
   17d50:	adds	r4, r2, r0
   17d54:	adc	r5, r3, r0, asr #31
   17d58:	cmp	r4, #-2147483648	; 0x80000000
   17d5c:	sbcs	r1, r5, #0
   17d60:	movge	r1, #1
   17d64:	movlt	r1, #0
   17d68:	b	17bb4 <__assert_fail@plt+0x67e4>
   17d6c:	cmp	r2, #-2147483648	; 0x80000000
   17d70:	sbcs	r1, r3, #0
   17d74:	bge	17da0 <__assert_fail@plt+0x69d0>
   17d78:	mvn	r4, #-2147483648	; 0x80000000
   17d7c:	mov	r5, #0
   17d80:	subs	r4, r4, r2
   17d84:	sbc	r5, r5, r3
   17d88:	asr	r1, r0, #31
   17d8c:	cmp	r4, r0
   17d90:	sbcs	r1, r5, r1
   17d94:	movlt	r1, #1
   17d98:	movge	r1, #0
   17d9c:	b	17bb4 <__assert_fail@plt+0x67e4>
   17da0:	ldrb	r3, [sp, #421]	; 0x1a5
   17da4:	cmp	r3, #0
   17da8:	beq	16534 <__assert_fail@plt+0x5164>
   17dac:	mov	r2, #5
   17db0:	ldr	r1, [pc, #-1436]	; 1781c <__assert_fail@plt+0x644c>
   17db4:	mov	r0, #0
   17db8:	bl	11130 <dcgettext@plt>
   17dbc:	ldr	r2, [pc, #-1444]	; 17820 <__assert_fail@plt+0x6450>
   17dc0:	ldr	r1, [pc, #-1444]	; 17824 <__assert_fail@plt+0x6454>
   17dc4:	bl	13968 <__assert_fail@plt+0x2598>
   17dc8:	b	16534 <__assert_fail@plt+0x5164>
   17dcc:	ldrb	r3, [sp, #421]	; 0x1a5
   17dd0:	cmp	r3, #0
   17dd4:	beq	188d0 <__assert_fail@plt+0x7500>
   17dd8:	mov	r2, #5
   17ddc:	ldr	r1, [pc, #-1468]	; 17828 <__assert_fail@plt+0x6458>
   17de0:	mov	r0, #0
   17de4:	bl	11130 <dcgettext@plt>
   17de8:	add	r1, sp, #248	; 0xf8
   17dec:	ldrd	r2, [r1, #88]	; 0x58
   17df0:	strd	r2, [sp, #48]	; 0x30
   17df4:	ldrd	r2, [r1, #104]	; 0x68
   17df8:	strd	r2, [sp, #8]
   17dfc:	ldrd	r2, [r1, #96]	; 0x60
   17e00:	strd	r2, [sp]
   17e04:	ldrd	r2, [sp, #48]	; 0x30
   17e08:	bl	13968 <__assert_fail@plt+0x2598>
   17e0c:	mov	r2, #5
   17e10:	ldr	r1, [pc, #-1516]	; 1782c <__assert_fail@plt+0x645c>
   17e14:	mov	r0, #0
   17e18:	bl	11130 <dcgettext@plt>
   17e1c:	mov	r5, r0
   17e20:	mov	r3, #100	; 0x64
   17e24:	add	r2, sp, #688	; 0x2b0
   17e28:	add	r1, sp, #240	; 0xf0
   17e2c:	add	r0, sp, #860	; 0x35c
   17e30:	bl	139bc <__assert_fail@plt+0x25ec>
   17e34:	mov	r1, r0
   17e38:	mov	r0, r5
   17e3c:	bl	13968 <__assert_fail@plt+0x2598>
   17e40:	ldr	r3, [sp, #848]	; 0x350
   17e44:	cmn	r3, #1
   17e48:	beq	17e6c <__assert_fail@plt+0x6a9c>
   17e4c:	ldr	r2, [sp, #892]	; 0x37c
   17e50:	cmp	r3, r2
   17e54:	beq	17e6c <__assert_fail@plt+0x6a9c>
   17e58:	mov	r2, #5
   17e5c:	ldr	r1, [pc, #-1588]	; 17830 <__assert_fail@plt+0x6460>
   17e60:	mov	r0, #0
   17e64:	bl	11130 <dcgettext@plt>
   17e68:	bl	13968 <__assert_fail@plt+0x2598>
   17e6c:	add	r3, sp, #248	; 0xf8
   17e70:	ldrd	r2, [r3, #104]	; 0x68
   17e74:	orrs	r3, r2, r3
   17e78:	bne	17f24 <__assert_fail@plt+0x6b54>
   17e7c:	ldr	r3, [sp, #872]	; 0x368
   17e80:	cmp	r4, r3
   17e84:	bne	17ea4 <__assert_fail@plt+0x6ad4>
   17e88:	add	r3, sp, #248	; 0xf8
   17e8c:	ldrd	r2, [r3, #96]	; 0x60
   17e90:	orrs	r3, r2, r3
   17e94:	bne	17f24 <__assert_fail@plt+0x6b54>
   17e98:	ldr	r3, [sp, #876]	; 0x36c
   17e9c:	cmp	r6, r3
   17ea0:	beq	17f24 <__assert_fail@plt+0x6b54>
   17ea4:	mov	r2, #5
   17ea8:	ldr	r1, [pc, #-1660]	; 17834 <__assert_fail@plt+0x6464>
   17eac:	mov	r0, #0
   17eb0:	bl	11130 <dcgettext@plt>
   17eb4:	bl	13968 <__assert_fail@plt+0x2598>
   17eb8:	mov	r2, #5
   17ebc:	ldr	r1, [pc, #-1676]	; 17838 <__assert_fail@plt+0x6468>
   17ec0:	mov	r0, #0
   17ec4:	bl	11130 <dcgettext@plt>
   17ec8:	mov	r5, r0
   17ecc:	add	r1, sp, #96	; 0x60
   17ed0:	ldr	r0, [sp, #40]	; 0x28
   17ed4:	bl	13898 <__assert_fail@plt+0x24c8>
   17ed8:	mov	r3, r4
   17edc:	add	r2, r6, #1
   17ee0:	mov	r1, r0
   17ee4:	mov	r0, r5
   17ee8:	bl	13968 <__assert_fail@plt+0x2598>
   17eec:	mov	r2, #5
   17ef0:	ldr	r1, [pc, #-1724]	; 1783c <__assert_fail@plt+0x646c>
   17ef4:	mov	r0, #0
   17ef8:	bl	11130 <dcgettext@plt>
   17efc:	mov	r4, r0
   17f00:	add	r1, sp, #96	; 0x60
   17f04:	ldr	r0, [sp, #880]	; 0x370
   17f08:	bl	13898 <__assert_fail@plt+0x24c8>
   17f0c:	ldr	r3, [sp, #872]	; 0x368
   17f10:	ldr	r2, [sp, #876]	; 0x36c
   17f14:	add	r2, r2, #1
   17f18:	mov	r1, r0
   17f1c:	mov	r0, r4
   17f20:	bl	13968 <__assert_fail@plt+0x2598>
   17f24:	ldr	r3, [sp, #416]	; 0x1a0
   17f28:	cmp	r3, #0
   17f2c:	beq	180cc <__assert_fail@plt+0x6cfc>
   17f30:	ldr	r0, [sp, #896]	; 0x380
   17f34:	ldr	r1, [sp, #264]	; 0x108
   17f38:	mvn	r3, r1
   17f3c:	lsr	r3, r3, #31
   17f40:	cmp	r3, r0, lsr #31
   17f44:	bne	18048 <__assert_fail@plt+0x6c78>
   17f48:	cmp	r1, #0
   17f4c:	bge	18024 <__assert_fail@plt+0x6c54>
   17f50:	asr	r5, r1, #31
   17f54:	adds	r2, r1, #0
   17f58:	adc	r3, r5, #-2147483648	; 0x80000000
   17f5c:	asr	r5, r0, #31
   17f60:	cmp	r2, r0
   17f64:	sbcs	r3, r3, r5
   17f68:	movlt	r3, #1
   17f6c:	movge	r3, #0
   17f70:	cmp	r3, #0
   17f74:	beq	18048 <__assert_fail@plt+0x6c78>
   17f78:	asr	r3, r0, #31
   17f7c:	subs	r4, r1, r0
   17f80:	rsc	r5, r3, r1, asr #31
   17f84:	strd	r4, [sp, #40]	; 0x28
   17f88:	mov	ip, #1
   17f8c:	adds	ip, ip, #0
   17f90:	movne	ip, #1
   17f94:	mvn	r1, r7
   17f98:	lsr	r1, r1, #31
   17f9c:	ldrd	r2, [sp, #40]	; 0x28
   17fa0:	cmp	r1, r3, lsr #31
   17fa4:	beq	18080 <__assert_fail@plt+0x6cb0>
   17fa8:	asr	r5, r7, #31
   17fac:	mov	r0, r2
   17fb0:	mov	r1, r3
   17fb4:	cmp	r7, r2
   17fb8:	sbcs	r3, r5, r3
   17fbc:	bge	18060 <__assert_fail@plt+0x6c90>
   17fc0:	subs	r2, r0, r7
   17fc4:	sbc	r3, r1, r5
   17fc8:	subs	r0, r2, #1
   17fcc:	sbc	r1, r3, #0
   17fd0:	cmp	r0, #-2147483648	; 0x80000000
   17fd4:	sbcs	r3, r1, #0
   17fd8:	movge	r1, #1
   17fdc:	movlt	r1, #0
   17fe0:	cmp	r1, #0
   17fe4:	ldr	r3, [sp, #40]	; 0x28
   17fe8:	sub	r7, r7, r3
   17fec:	movne	r3, #1
   17ff0:	moveq	r3, sl
   17ff4:	orrs	r3, ip, r3
   17ff8:	beq	180cc <__assert_fail@plt+0x6cfc>
   17ffc:	ldrb	r3, [sp, #421]	; 0x1a5
   18000:	cmp	r3, #0
   18004:	beq	16534 <__assert_fail@plt+0x5164>
   18008:	mov	r2, #5
   1800c:	ldr	r1, [pc, #-2004]	; 17840 <__assert_fail@plt+0x6470>
   18010:	mov	r0, #0
   18014:	bl	11130 <dcgettext@plt>
   18018:	ldr	r1, [sp, #264]	; 0x108
   1801c:	bl	13968 <__assert_fail@plt+0x2598>
   18020:	b	16534 <__assert_fail@plt+0x5164>
   18024:	asr	r5, r0, #31
   18028:	subs	r2, r0, #1
   1802c:	sbc	r3, r5, #-2147483648	; 0x80000000
   18030:	asr	r5, r1, #31
   18034:	cmp	r2, r1
   18038:	sbcs	r3, r3, r5
   1803c:	movlt	r3, #1
   18040:	movge	r3, #0
   18044:	b	17f70 <__assert_fail@plt+0x6ba0>
   18048:	asr	r3, r0, #31
   1804c:	subs	r4, r1, r0
   18050:	rsc	r5, r3, r1, asr #31
   18054:	strd	r4, [sp, #40]	; 0x28
   18058:	mov	ip, sl
   1805c:	b	17f8c <__assert_fail@plt+0x6bbc>
   18060:	ldrd	r0, [sp, #40]	; 0x28
   18064:	subs	r0, r7, r0
   18068:	sbc	r1, r5, r1
   1806c:	cmp	r0, #-2147483648	; 0x80000000
   18070:	sbcs	r3, r1, #0
   18074:	movge	r1, #1
   18078:	movlt	r1, #0
   1807c:	b	17fe0 <__assert_fail@plt+0x6c10>
   18080:	cmp	r7, #0
   18084:	bge	180a8 <__assert_fail@plt+0x6cd8>
   18088:	add	r0, r7, #-2147483648	; 0x80000000
   1808c:	asr	r1, r0, #31
   18090:	ldrd	r2, [sp, #40]	; 0x28
   18094:	cmp	r0, r2
   18098:	sbcs	r3, r1, r3
   1809c:	movlt	r1, #1
   180a0:	movge	r1, #0
   180a4:	b	17fe0 <__assert_fail@plt+0x6c10>
   180a8:	ldrd	r4, [sp, #40]	; 0x28
   180ac:	subs	r4, r4, #-2147483647	; 0x80000001
   180b0:	adc	r5, r5, #0
   180b4:	asr	r1, r7, #31
   180b8:	cmp	r4, r7
   180bc:	sbcs	r3, r5, r1
   180c0:	movlt	r1, #1
   180c4:	movge	r1, #0
   180c8:	b	17fe0 <__assert_fail@plt+0x6c10>
   180cc:	ldrb	r3, [sp, #421]	; 0x1a5
   180d0:	cmp	r3, #0
   180d4:	beq	18114 <__assert_fail@plt+0x6d44>
   180d8:	mov	r2, #5
   180dc:	ldr	r1, [pc, #-2208]	; 17844 <__assert_fail@plt+0x6474>
   180e0:	mov	r0, #0
   180e4:	bl	11130 <dcgettext@plt>
   180e8:	mov	r4, r0
   180ec:	mov	r3, #100	; 0x64
   180f0:	add	r2, sp, #688	; 0x2b0
   180f4:	add	r1, sp, #240	; 0xf0
   180f8:	add	r0, sp, #860	; 0x35c
   180fc:	bl	139bc <__assert_fail@plt+0x25ec>
   18100:	mov	r2, r7
   18104:	asr	r3, r7, #31
   18108:	mov	r1, r0
   1810c:	mov	r0, r4
   18110:	bl	13968 <__assert_fail@plt+0x2598>
   18114:	ldr	r3, [sp, #384]	; 0x180
   18118:	mov	r0, r3
   1811c:	asr	r1, r3, #31
   18120:	strd	r0, [sp, #72]	; 0x48
   18124:	ldr	r3, [sp, #332]	; 0x14c
   18128:	adds	r0, r0, r3
   1812c:	adc	r1, r1, r3, asr #31
   18130:	mov	r4, r0
   18134:	mov	r5, r1
   18138:	add	r3, pc, #880	; 0x370
   1813c:	ldrd	r2, [r3]
   18140:	bl	1dd60 <__assert_fail@plt+0xc990>
   18144:	add	r1, pc, #868	; 0x364
   18148:	ldrd	r0, [r1]
   1814c:	adds	r0, r0, r2
   18150:	adc	r1, r1, r3
   18154:	add	r3, pc, #852	; 0x354
   18158:	ldrd	r2, [r3]
   1815c:	bl	1dd60 <__assert_fail@plt+0xc990>
   18160:	mov	ip, r2
   18164:	str	r2, [sp, #80]	; 0x50
   18168:	add	r3, pc, #832	; 0x340
   1816c:	ldrd	r2, [r3]
   18170:	subs	r0, r4, ip
   18174:	sbc	r1, r5, ip, asr #31
   18178:	bl	1dd60 <__assert_fail@plt+0xc990>
   1817c:	str	r0, [sp, #48]	; 0x30
   18180:	add	r3, sp, #248	; 0xf8
   18184:	ldrd	r2, [r3, #112]	; 0x70
   18188:	strd	r2, [sp, #56]	; 0x38
   1818c:	cmp	r2, #0
   18190:	sbcs	r3, r3, #0
   18194:	bge	18490 <__assert_fail@plt+0x70c0>
   18198:	mvn	r2, #0
   1819c:	mvn	r3, #0
   181a0:	ldrd	r0, [sp, #56]	; 0x38
   181a4:	cmp	r1, r3
   181a8:	cmpeq	r0, r2
   181ac:	beq	181d4 <__assert_fail@plt+0x6e04>
   181b0:	mov	r2, r0
   181b4:	mov	r3, r1
   181b8:	mov	r0, #0
   181bc:	mov	r1, #-2147483648	; 0x80000000
   181c0:	bl	1dd60 <__assert_fail@plt+0xc990>
   181c4:	cmp	r0, #3600	; 0xe10
   181c8:	sbcs	r3, r1, #0
   181cc:	movlt	r9, #1
   181d0:	movge	r9, #0
   181d4:	cmp	r9, #0
   181d8:	bne	186b0 <__assert_fail@plt+0x72e0>
   181dc:	mov	r3, #3600	; 0xe10
   181e0:	ldrd	r4, [sp, #56]	; 0x38
   181e4:	umull	r0, r1, r4, r3
   181e8:	mla	r1, r3, r5, r1
   181ec:	strd	r0, [sp, #40]	; 0x28
   181f0:	cmp	r0, #0
   181f4:	sbcs	r3, r1, #0
   181f8:	bge	184cc <__assert_fail@plt+0x70fc>
   181fc:	mov	r2, #0
   18200:	mov	r3, #-2147483648	; 0x80000000
   18204:	subs	r2, r2, r0
   18208:	sbc	r3, r3, r1
   1820c:	mov	r4, r2
   18210:	mov	r5, r3
   18214:	asr	r3, r7, #31
   18218:	cmp	r7, r4
   1821c:	sbcs	r3, r3, r5
   18220:	movlt	r3, #1
   18224:	movge	r3, #0
   18228:	cmp	r3, #0
   1822c:	bne	186b0 <__assert_fail@plt+0x72e0>
   18230:	adds	r4, r0, r7
   18234:	adc	r5, r1, r7, asr #31
   18238:	strd	r4, [sp, #40]	; 0x28
   1823c:	add	r2, sp, #248	; 0xf8
   18240:	ldrd	r6, [r2, #120]	; 0x78
   18244:	cmp	r6, #0
   18248:	sbcs	r2, r7, #0
   1824c:	bge	18530 <__assert_fail@plt+0x7160>
   18250:	mvn	r0, #0
   18254:	mvn	r1, #0
   18258:	cmp	r7, r1
   1825c:	cmpeq	r6, r0
   18260:	beq	18288 <__assert_fail@plt+0x6eb8>
   18264:	mov	r2, r6
   18268:	mov	r3, r7
   1826c:	mov	r0, #0
   18270:	mov	r1, #-2147483648	; 0x80000000
   18274:	bl	1dd60 <__assert_fail@plt+0xc990>
   18278:	cmp	r0, #60	; 0x3c
   1827c:	sbcs	r3, r1, #0
   18280:	movlt	r3, #1
   18284:	movge	r3, #0
   18288:	cmp	r3, #0
   1828c:	bne	186b0 <__assert_fail@plt+0x72e0>
   18290:	mov	r1, #60	; 0x3c
   18294:	umull	r2, r3, r6, r1
   18298:	mla	r3, r1, r7, r3
   1829c:	strd	r2, [sp, #64]	; 0x40
   182a0:	cmp	r2, #0
   182a4:	sbcs	r1, r3, #0
   182a8:	bge	1854c <__assert_fail@plt+0x717c>
   182ac:	mov	r0, #0
   182b0:	mov	r1, #-2147483648	; 0x80000000
   182b4:	subs	r0, r0, r2
   182b8:	sbc	r1, r1, r3
   182bc:	mov	r4, r0
   182c0:	mov	r5, r1
   182c4:	ldrd	r0, [sp, #40]	; 0x28
   182c8:	cmp	r0, r4
   182cc:	sbcs	r1, r1, r5
   182d0:	movlt	r1, #1
   182d4:	movge	r1, #0
   182d8:	cmp	r1, #0
   182dc:	bne	186b0 <__assert_fail@plt+0x72e0>
   182e0:	ldrd	r0, [sp, #40]	; 0x28
   182e4:	adds	r0, r0, r2
   182e8:	adc	r1, r1, r3
   182ec:	add	r3, sp, #248	; 0xf8
   182f0:	ldrd	r2, [r3, #128]	; 0x80
   182f4:	strd	r2, [sp, #40]	; 0x28
   182f8:	cmp	r2, #0
   182fc:	sbcs	r3, r3, #0
   18300:	bge	185c4 <__assert_fail@plt+0x71f4>
   18304:	mov	r2, #0
   18308:	mov	r3, #-2147483648	; 0x80000000
   1830c:	ldrd	r4, [sp, #40]	; 0x28
   18310:	subs	r4, r2, r4
   18314:	sbc	r5, r3, r5
   18318:	cmp	r0, r4
   1831c:	sbcs	r3, r1, r5
   18320:	movlt	r3, #1
   18324:	movge	r3, #0
   18328:	cmp	r3, #0
   1832c:	bne	186b0 <__assert_fail@plt+0x72e0>
   18330:	ldrd	r2, [sp, #40]	; 0x28
   18334:	adds	r2, r2, r0
   18338:	adc	r3, r3, r1
   1833c:	ldr	r1, [sp, #48]	; 0x30
   18340:	cmp	r1, #0
   18344:	bge	18628 <__assert_fail@plt+0x7258>
   18348:	mov	ip, r1
   1834c:	rsb	r0, r1, #-2147483648	; 0x80000000
   18350:	asr	r1, r0, #31
   18354:	cmp	r2, r0
   18358:	sbcs	r1, r3, r1
   1835c:	movlt	sl, #1
   18360:	blt	18388 <__assert_fail@plt+0x6fb8>
   18364:	cmp	r2, #0
   18368:	sbcs	r1, r3, #0
   1836c:	blt	18388 <__assert_fail@plt+0x6fb8>
   18370:	adds	r0, r2, ip
   18374:	adc	r1, r3, ip, asr #31
   18378:	cmp	r0, #-2147483648	; 0x80000000
   1837c:	sbcs	r1, r1, #0
   18380:	movge	sl, #1
   18384:	movlt	sl, #0
   18388:	and	r1, sl, #1
   1838c:	cmp	r1, #0
   18390:	bne	186b0 <__assert_fail@plt+0x72e0>
   18394:	ldr	r1, [sp, #48]	; 0x30
   18398:	add	r8, r2, r1
   1839c:	ldr	r3, [sp, #36]	; 0x24
   183a0:	str	r8, [r3]
   183a4:	ldr	r2, [sp, #80]	; 0x50
   183a8:	str	r2, [r3, #4]
   183ac:	ldrb	r3, [sp, #421]	; 0x1a5
   183b0:	cmp	r3, #0
   183b4:	beq	166d4 <__assert_fail@plt+0x5304>
   183b8:	ldrd	r2, [sp, #56]	; 0x38
   183bc:	orr	r2, r2, r6
   183c0:	orr	r3, r3, r7
   183c4:	ldrd	r0, [sp, #40]	; 0x28
   183c8:	orr	r0, r0, r2
   183cc:	orr	r1, r1, r3
   183d0:	mov	r2, r0
   183d4:	mov	r3, r1
   183d8:	ldrd	r0, [sp, #72]	; 0x48
   183dc:	orr	r0, r0, r2
   183e0:	orr	r1, r1, r3
   183e4:	mov	r2, r0
   183e8:	mov	r3, r1
   183ec:	orrs	r3, r2, r3
   183f0:	beq	166d4 <__assert_fail@plt+0x5304>
   183f4:	mov	r2, #5
   183f8:	ldr	r1, [pc, #192]	; 184c0 <__assert_fail@plt+0x70f0>
   183fc:	mov	r0, #0
   18400:	bl	11130 <dcgettext@plt>
   18404:	add	r1, sp, #248	; 0xf8
   18408:	ldrd	r2, [r1, #112]	; 0x70
   1840c:	ldr	ip, [sp, #384]	; 0x180
   18410:	str	ip, [sp, #16]
   18414:	ldrd	r4, [r1, #128]	; 0x80
   18418:	strd	r4, [sp, #8]
   1841c:	ldrd	r4, [r1, #120]	; 0x78
   18420:	strd	r4, [sp]
   18424:	bl	13968 <__assert_fail@plt+0x2598>
   18428:	mov	r2, #5
   1842c:	ldr	r1, [pc, #144]	; 184c4 <__assert_fail@plt+0x70f4>
   18430:	mov	r0, #0
   18434:	bl	11130 <dcgettext@plt>
   18438:	mov	r2, r8
   1843c:	asr	r3, r8, #31
   18440:	bl	13968 <__assert_fail@plt+0x2598>
   18444:	ldr	r3, [sp, #892]	; 0x37c
   18448:	cmn	r3, #1
   1844c:	beq	166d4 <__assert_fail@plt+0x5304>
   18450:	add	r2, sp, #96	; 0x60
   18454:	ldr	r1, [sp, #36]	; 0x24
   18458:	mov	r0, fp
   1845c:	bl	1acec <__assert_fail@plt+0x991c>
   18460:	cmp	r0, #0
   18464:	beq	166d4 <__assert_fail@plt+0x5304>
   18468:	ldr	r3, [sp, #128]	; 0x80
   1846c:	ldr	r2, [sp, #892]	; 0x37c
   18470:	cmp	r2, r3
   18474:	beq	166d4 <__assert_fail@plt+0x5304>
   18478:	mov	r2, #5
   1847c:	ldr	r1, [pc, #68]	; 184c8 <__assert_fail@plt+0x70f8>
   18480:	mov	r0, #0
   18484:	bl	11130 <dcgettext@plt>
   18488:	bl	13968 <__assert_fail@plt+0x2598>
   1848c:	b	166d4 <__assert_fail@plt+0x5304>
   18490:	add	r3, pc, #32
   18494:	ldrd	r2, [r3]
   18498:	ldrd	r0, [sp, #56]	; 0x38
   1849c:	cmp	r2, r0
   184a0:	sbcs	r3, r3, r1
   184a4:	movlt	r9, #1
   184a8:	movge	r9, #0
   184ac:	b	181d4 <__assert_fail@plt+0x6e04>
   184b0:	blcc	fe6cacb8 <optarg@@GLIBC_2.4+0xfe699b10>
   184b4:	andeq	r0, r0, r0
   184b8:	mcrrcc	14, 6, r5, sp, cr15
   184bc:	andeq	r1, r9, fp, lsr #20
   184c0:	andeq	r0, r2, r8, lsl #1
   184c4:	ldrdeq	r0, [r2], -r4
   184c8:	strdeq	r0, [r2], -r8
   184cc:	cmp	r7, #0
   184d0:	bge	184fc <__assert_fail@plt+0x712c>
   184d4:	mov	r2, #0
   184d8:	mov	r3, #-2147483648	; 0x80000000
   184dc:	subs	r4, r2, r7
   184e0:	sbc	r5, r3, r7, asr #31
   184e4:	ldrd	r2, [sp, #40]	; 0x28
   184e8:	cmp	r2, r4
   184ec:	sbcs	r3, r3, r5
   184f0:	movlt	r3, #1
   184f4:	movge	r3, #0
   184f8:	b	18228 <__assert_fail@plt+0x6e58>
   184fc:	mvn	r2, #0
   18500:	mvn	r3, #-2147483648	; 0x80000000
   18504:	ldrd	r4, [sp, #40]	; 0x28
   18508:	subs	r4, r2, r4
   1850c:	sbc	r5, r3, r5
   18510:	mov	r2, r4
   18514:	mov	r3, r5
   18518:	asr	r5, r7, #31
   1851c:	cmp	r2, r7
   18520:	sbcs	r3, r3, r5
   18524:	movlt	r3, #1
   18528:	movge	r3, #0
   1852c:	b	18228 <__assert_fail@plt+0x6e58>
   18530:	add	r3, pc, #936	; 0x3a8
   18534:	ldrd	r2, [r3]
   18538:	cmp	r2, r6
   1853c:	sbcs	r3, r3, r7
   18540:	movlt	r3, #1
   18544:	movge	r3, #0
   18548:	b	18288 <__assert_fail@plt+0x6eb8>
   1854c:	ldrd	r0, [sp, #40]	; 0x28
   18550:	cmp	r0, #0
   18554:	sbcs	r1, r1, #0
   18558:	bge	18590 <__assert_fail@plt+0x71c0>
   1855c:	mov	r0, #0
   18560:	mov	r1, #-2147483648	; 0x80000000
   18564:	ldrd	r4, [sp, #40]	; 0x28
   18568:	subs	r4, r0, r4
   1856c:	sbc	r5, r1, r5
   18570:	mov	r0, r4
   18574:	mov	r1, r5
   18578:	ldrd	r4, [sp, #64]	; 0x40
   1857c:	cmp	r4, r0
   18580:	sbcs	r1, r5, r1
   18584:	movlt	r1, #1
   18588:	movge	r1, #0
   1858c:	b	182d8 <__assert_fail@plt+0x6f08>
   18590:	mvn	r0, #0
   18594:	mvn	r1, #-2147483648	; 0x80000000
   18598:	ldrd	r4, [sp, #64]	; 0x40
   1859c:	subs	r4, r0, r4
   185a0:	sbc	r5, r1, r5
   185a4:	mov	r0, r4
   185a8:	mov	r1, r5
   185ac:	ldrd	r4, [sp, #40]	; 0x28
   185b0:	cmp	r0, r4
   185b4:	sbcs	r1, r1, r5
   185b8:	movlt	r1, #1
   185bc:	movge	r1, #0
   185c0:	b	182d8 <__assert_fail@plt+0x6f08>
   185c4:	cmp	r0, #0
   185c8:	sbcs	r3, r1, #0
   185cc:	bge	18600 <__assert_fail@plt+0x7230>
   185d0:	mov	r2, #0
   185d4:	mov	r3, #-2147483648	; 0x80000000
   185d8:	subs	r2, r2, r0
   185dc:	sbc	r3, r3, r1
   185e0:	mov	r4, r2
   185e4:	mov	r5, r3
   185e8:	ldrd	r2, [sp, #40]	; 0x28
   185ec:	cmp	r2, r4
   185f0:	sbcs	r3, r3, r5
   185f4:	movlt	r3, #1
   185f8:	movge	r3, #0
   185fc:	b	18328 <__assert_fail@plt+0x6f58>
   18600:	mvn	r2, #0
   18604:	mvn	r3, #-2147483648	; 0x80000000
   18608:	ldrd	r4, [sp, #40]	; 0x28
   1860c:	subs	r4, r2, r4
   18610:	sbc	r5, r3, r5
   18614:	cmp	r4, r0
   18618:	sbcs	r3, r5, r1
   1861c:	movlt	r3, #1
   18620:	movge	r3, #0
   18624:	b	18328 <__assert_fail@plt+0x6f58>
   18628:	cmp	r2, #0
   1862c:	sbcs	r1, r3, #0
   18630:	bge	18684 <__assert_fail@plt+0x72b4>
   18634:	ldr	r0, [sp, #48]	; 0x30
   18638:	asr	r1, r0, #31
   1863c:	strd	r0, [sp, #64]	; 0x40
   18640:	mov	r0, #-2147483648	; 0x80000000
   18644:	mvn	r1, #0
   18648:	subs	r0, r0, r2
   1864c:	sbc	r1, r1, r3
   18650:	mov	r4, r0
   18654:	mov	r5, r1
   18658:	ldrd	r0, [sp, #64]	; 0x40
   1865c:	cmp	r0, r4
   18660:	sbcs	ip, r1, r5
   18664:	blt	186b0 <__assert_fail@plt+0x72e0>
   18668:	adds	r0, r0, r2
   1866c:	adc	r1, r1, r3
   18670:	cmp	r0, #-2147483648	; 0x80000000
   18674:	sbcs	r1, r1, #0
   18678:	movge	r1, #1
   1867c:	movlt	r1, #0
   18680:	b	1838c <__assert_fail@plt+0x6fbc>
   18684:	ldr	r1, [sp, #48]	; 0x30
   18688:	rsb	r0, r1, #2130706432	; 0x7f000000
   1868c:	add	r0, r0, #16711680	; 0xff0000
   18690:	add	r0, r0, #65280	; 0xff00
   18694:	add	r0, r0, #255	; 0xff
   18698:	asr	r1, r0, #31
   1869c:	cmp	r0, r2
   186a0:	sbcs	r1, r1, r3
   186a4:	movlt	r1, #1
   186a8:	movge	r1, #0
   186ac:	b	1838c <__assert_fail@plt+0x6fbc>
   186b0:	ldrb	r3, [sp, #421]	; 0x1a5
   186b4:	cmp	r3, #0
   186b8:	beq	16534 <__assert_fail@plt+0x5164>
   186bc:	mov	r2, #5
   186c0:	ldr	r1, [pc, #544]	; 188e8 <__assert_fail@plt+0x7518>
   186c4:	mov	r0, #0
   186c8:	bl	11130 <dcgettext@plt>
   186cc:	bl	13968 <__assert_fail@plt+0x2598>
   186d0:	b	16534 <__assert_fail@plt+0x5164>
   186d4:	mov	r2, #5
   186d8:	ldr	r1, [pc, #524]	; 188ec <__assert_fail@plt+0x751c>
   186dc:	mov	r0, #0
   186e0:	bl	11130 <dcgettext@plt>
   186e4:	bl	13968 <__assert_fail@plt+0x2598>
   186e8:	b	16714 <__assert_fail@plt+0x5344>
   186ec:	mov	r2, #5
   186f0:	ldr	r1, [pc, #504]	; 188f0 <__assert_fail@plt+0x7520>
   186f4:	mov	r0, #0
   186f8:	bl	11130 <dcgettext@plt>
   186fc:	ldr	r1, [sp, #948]	; 0x3b4
   18700:	bl	13968 <__assert_fail@plt+0x2598>
   18704:	b	16714 <__assert_fail@plt+0x5344>
   18708:	mov	r8, #0
   1870c:	str	r8, [sp, #32]
   18710:	b	16548 <__assert_fail@plt+0x5178>
   18714:	add	r2, sp, #476	; 0x1dc
   18718:	mov	r1, r6
   1871c:	ldr	r0, [sp, #944]	; 0x3b0
   18720:	bl	1acec <__assert_fail@plt+0x991c>
   18724:	cmp	r0, #0
   18728:	beq	18708 <__assert_fail@plt+0x7338>
   1872c:	ldr	fp, [sp, #944]	; 0x3b0
   18730:	mov	r3, #0
   18734:	str	r3, [sp, #32]
   18738:	ldrb	r2, [r4]
   1873c:	ldr	r3, [pc, #432]	; 188f4 <__assert_fail@plt+0x7524>
   18740:	cmp	r2, #0
   18744:	moveq	r4, r3
   18748:	str	r4, [sp, #240]	; 0xf0
   1874c:	and	r8, r8, #1
   18750:	strb	r8, [sp, #421]	; 0x1a5
   18754:	ldr	ip, [sp, #496]	; 0x1f0
   18758:	cmp	ip, #0
   1875c:	blt	164f8 <__assert_fail@plt+0x5128>
   18760:	add	r1, sp, #248	; 0xf8
   18764:	ldr	r2, [pc, #396]	; 188f8 <__assert_fail@plt+0x7528>
   18768:	mov	r3, #0
   1876c:	adds	r4, r2, ip
   18770:	adc	r5, r3, ip, asr #31
   18774:	strd	r4, [r1, #32]
   18778:	mov	r4, #0
   1877c:	str	r4, [sp, #288]	; 0x120
   18780:	ldr	r2, [sp, #492]	; 0x1ec
   18784:	add	r2, r2, #1
   18788:	asr	r3, r2, #31
   1878c:	strd	r2, [r1, #48]	; 0x30
   18790:	ldr	r2, [sp, #488]	; 0x1e8
   18794:	asr	r3, r2, #31
   18798:	strd	r2, [r1, #56]	; 0x38
   1879c:	ldr	r2, [sp, #484]	; 0x1e4
   187a0:	asr	r3, r2, #31
   187a4:	strd	r2, [r1, #64]	; 0x40
   187a8:	ldr	r2, [sp, #480]	; 0x1e0
   187ac:	asr	r3, r2, #31
   187b0:	strd	r2, [r1, #72]	; 0x48
   187b4:	ldr	r3, [sp, #476]	; 0x1dc
   187b8:	str	r3, [sp, #328]	; 0x148
   187bc:	str	sl, [sp, #332]	; 0x14c
   187c0:	ldr	r5, [sp, #508]	; 0x1fc
   187c4:	str	r5, [sp, #892]	; 0x37c
   187c8:	mov	r3, #2
   187cc:	str	r3, [sp, #268]	; 0x10c
   187d0:	add	ip, sp, #336	; 0x150
   187d4:	add	lr, sp, #520	; 0x208
   187d8:	ldm	lr!, {r0, r1, r2, r3}
   187dc:	stmia	ip!, {r0, r1, r2, r3}
   187e0:	ldm	lr!, {r0, r1, r2, r3}
   187e4:	stmia	ip!, {r0, r1, r2, r3}
   187e8:	ldm	lr!, {r0, r1, r2, r3}
   187ec:	stmia	ip!, {r0, r1, r2, r3}
   187f0:	ldm	lr, {r0, r1}
   187f4:	stm	ip, {r0, r1}
   187f8:	strb	r4, [sp, #392]	; 0x188
   187fc:	strb	r4, [sp, #393]	; 0x189
   18800:	str	r4, [sp, #396]	; 0x18c
   18804:	str	r4, [sp, #400]	; 0x190
   18808:	str	r4, [sp, #412]	; 0x19c
   1880c:	str	r4, [sp, #404]	; 0x194
   18810:	str	r4, [sp, #408]	; 0x198
   18814:	str	r4, [sp, #416]	; 0x1a0
   18818:	strb	r4, [sp, #420]	; 0x1a4
   1881c:	strb	r4, [sp, #422]	; 0x1a6
   18820:	strb	r4, [sp, #423]	; 0x1a7
   18824:	strb	r4, [sp, #425]	; 0x1a9
   18828:	strb	r4, [sp, #424]	; 0x1a8
   1882c:	strb	r4, [sp, #426]	; 0x1aa
   18830:	strb	r4, [sp, #427]	; 0x1ab
   18834:	strb	r4, [sp, #428]	; 0x1ac
   18838:	ldr	r3, [sp, #516]	; 0x204
   1883c:	str	r3, [sp, #432]	; 0x1b0
   18840:	ldr	r3, [pc, #180]	; 188fc <__assert_fail@plt+0x752c>
   18844:	str	r3, [sp, #436]	; 0x1b4
   18848:	str	r5, [sp, #440]	; 0x1b8
   1884c:	str	r4, [sp, #444]	; 0x1bc
   18850:	ldr	r4, [pc, #168]	; 18900 <__assert_fail@plt+0x7530>
   18854:	mvn	r6, #-2147483648	; 0x80000000
   18858:	rsb	r8, r7, #-2147483648	; 0x80000000
   1885c:	ldr	r5, [pc, #160]	; 18904 <__assert_fail@plt+0x7534>
   18860:	b	165ac <__assert_fail@plt+0x51dc>
   18864:	mvn	r3, #0
   18868:	str	r3, [sp, #868]	; 0x364
   1886c:	b	16d58 <__assert_fail@plt+0x5988>
   18870:	mov	r3, #0
   18874:	str	r3, [sp, #860]	; 0x35c
   18878:	str	r3, [sp, #864]	; 0x360
   1887c:	str	r3, [sp, #868]	; 0x364
   18880:	str	r3, [sp, #332]	; 0x14c
   18884:	ldrb	r3, [sp, #421]	; 0x1a5
   18888:	cmp	r3, #0
   1888c:	beq	16ef4 <__assert_fail@plt+0x5b24>
   18890:	b	16ff4 <__assert_fail@plt+0x5c24>
   18894:	subs	r2, r6, #1
   18898:	sbc	r3, r7, #0
   1889c:	cmp	r2, #0
   188a0:	sbcs	r3, r3, #0
   188a4:	bge	176d8 <__assert_fail@plt+0x6308>
   188a8:	b	174d4 <__assert_fail@plt+0x6104>
   188ac:	orrs	r3, r6, r7
   188b0:	moveq	r3, sl
   188b4:	beq	17510 <__assert_fail@plt+0x6140>
   188b8:	mov	r2, #1
   188bc:	b	174e4 <__assert_fail@plt+0x6114>
   188c0:	ldr	r3, [sp, #400]	; 0x190
   188c4:	cmp	r3, #0
   188c8:	bne	17964 <__assert_fail@plt+0x6594>
   188cc:	b	17994 <__assert_fail@plt+0x65c4>
   188d0:	ldr	r3, [sp, #416]	; 0x1a0
   188d4:	cmp	r3, #0
   188d8:	bne	17f30 <__assert_fail@plt+0x6b60>
   188dc:	b	18114 <__assert_fail@plt+0x6d44>
   188e0:	eorcs	r2, r2, #536870914	; 0x20000002
   188e4:	eoreq	r2, r2, #536870914	; 0x20000002
   188e8:	andeq	r0, r2, r8, asr r0
   188ec:	andeq	r0, r2, r8, lsr r1
   188f0:	andeq	r0, r2, r0, ror r1
   188f4:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   188f8:	andeq	r0, r0, ip, ror #14
   188fc:	andeq	r0, r0, sp, lsl #2
   18900:	rsbseq	sl, r6, r0, lsl #14
   18904:	bicseq	r9, sl, r0, lsl #24
   18908:	mvn	r2, #0
   1890c:	mvn	r3, #0
   18910:	cmp	r7, r3
   18914:	cmpeq	r6, r2
   18918:	moveq	r3, sl
   1891c:	beq	17510 <__assert_fail@plt+0x6140>
   18920:	mov	r2, sl
   18924:	b	174e4 <__assert_fail@plt+0x6114>
   18928:	ldrb	r3, [sp, #421]	; 0x1a5
   1892c:	cmp	r3, #0
   18930:	bne	188c0 <__assert_fail@plt+0x74f0>
   18934:	add	ip, sp, #248	; 0xf8
   18938:	ldrd	r0, [ip, #88]	; 0x58
   1893c:	ldrd	r2, [ip, #96]	; 0x60
   18940:	orr	r4, r2, r0
   18944:	orr	r5, r3, r1
   18948:	ldrd	r0, [ip, #104]	; 0x68
   1894c:	orr	r2, r4, r0
   18950:	orr	r3, r5, r1
   18954:	orrs	r3, r2, r3
   18958:	bne	17a54 <__assert_fail@plt+0x6684>
   1895c:	ldr	r3, [sp, #416]	; 0x1a0
   18960:	cmp	r3, #0
   18964:	bne	17f30 <__assert_fail@plt+0x6b60>
   18968:	b	18114 <__assert_fail@plt+0x6d44>
   1896c:	add	ip, sp, #248	; 0xf8
   18970:	ldrd	r0, [ip, #88]	; 0x58
   18974:	ldrd	r2, [ip, #96]	; 0x60
   18978:	orr	r4, r2, r0
   1897c:	orr	r5, r3, r1
   18980:	ldrd	r0, [ip, #104]	; 0x68
   18984:	orr	r2, r4, r0
   18988:	orr	r3, r5, r1
   1898c:	orrs	r3, r2, r3
   18990:	bne	17a54 <__assert_fail@plt+0x6684>
   18994:	b	17f24 <__assert_fail@plt+0x6b54>
   18998:	push	{lr}		; (str lr, [sp, #-4]!)
   1899c:	sub	sp, sp, #12
   189a0:	ldr	ip, [sp, #20]
   189a4:	str	ip, [sp, #4]
   189a8:	ldr	ip, [sp, #16]
   189ac:	str	ip, [sp]
   189b0:	bl	1632c <__assert_fail@plt+0x4f5c>
   189b4:	add	sp, sp, #12
   189b8:	pop	{pc}		; (ldr pc, [sp], #4)
   189bc:	push	{r4, r5, r6, r7, r8, lr}
   189c0:	sub	sp, sp, #8
   189c4:	mov	r5, r0
   189c8:	mov	r6, r1
   189cc:	mov	r7, r2
   189d0:	ldr	r0, [pc, #72]	; 18a20 <__assert_fail@plt+0x7650>
   189d4:	bl	111d8 <getenv@plt>
   189d8:	mov	r8, r0
   189dc:	bl	1a9cc <__assert_fail@plt+0x95fc>
   189e0:	subs	r4, r0, #0
   189e4:	moveq	r5, #0
   189e8:	beq	18a14 <__assert_fail@plt+0x7644>
   189ec:	str	r8, [sp, #4]
   189f0:	str	r4, [sp]
   189f4:	mov	r3, #0
   189f8:	mov	r2, r7
   189fc:	mov	r1, r6
   18a00:	mov	r0, r5
   18a04:	bl	1632c <__assert_fail@plt+0x4f5c>
   18a08:	mov	r5, r0
   18a0c:	mov	r0, r4
   18a10:	bl	1aba4 <__assert_fail@plt+0x97d4>
   18a14:	mov	r0, r5
   18a18:	add	sp, sp, #8
   18a1c:	pop	{r4, r5, r6, r7, r8, pc}
   18a20:	andeq	r0, r2, r4, ror #3
   18a24:	cmp	r2, #1
   18a28:	beq	18a74 <__assert_fail@plt+0x76a4>
   18a2c:	cmp	r2, #2
   18a30:	beq	18aa0 <__assert_fail@plt+0x76d0>
   18a34:	push	{r4, lr}
   18a38:	sub	sp, sp, #8
   18a3c:	mov	r4, r0
   18a40:	mov	r0, #0
   18a44:	bl	1110c <time@plt>
   18a48:	add	r3, sp, #8
   18a4c:	str	r0, [r3, #-4]!
   18a50:	mov	r0, r3
   18a54:	bl	11220 <localtime@plt>
   18a58:	cmp	r0, #0
   18a5c:	beq	18acc <__assert_fail@plt+0x76fc>
   18a60:	ldr	r3, [r0, #20]
   18a64:	str	r3, [r4, #20]
   18a68:	mov	r0, #1
   18a6c:	add	sp, sp, #8
   18a70:	pop	{r4, pc}
   18a74:	ldr	r2, [r1]
   18a78:	str	r2, [r0, #20]
   18a7c:	ldr	r1, [r1]
   18a80:	cmp	r1, #68	; 0x44
   18a84:	bgt	18ad4 <__assert_fail@plt+0x7704>
   18a88:	tst	r3, #8
   18a8c:	bne	18adc <__assert_fail@plt+0x770c>
   18a90:	add	r2, r2, #100	; 0x64
   18a94:	str	r2, [r0, #20]
   18a98:	mov	r0, #1
   18a9c:	bx	lr
   18aa0:	tst	r3, #2
   18aa4:	beq	18ae4 <__assert_fail@plt+0x7714>
   18aa8:	ldr	r3, [r1]
   18aac:	ldr	r2, [r1, #4]
   18ab0:	mov	r1, #100	; 0x64
   18ab4:	mla	r3, r1, r3, r2
   18ab8:	sub	r3, r3, #1888	; 0x760
   18abc:	sub	r3, r3, #12
   18ac0:	str	r3, [r0, #20]
   18ac4:	mov	r0, #1
   18ac8:	bx	lr
   18acc:	mov	r0, #0
   18ad0:	b	18a6c <__assert_fail@plt+0x769c>
   18ad4:	mov	r0, #1
   18ad8:	bx	lr
   18adc:	mov	r0, #0
   18ae0:	bx	lr
   18ae4:	mov	r0, #0
   18ae8:	bx	lr
   18aec:	push	{r4, r5, r6, r7, r8, r9, lr}
   18af0:	sub	sp, sp, #92	; 0x5c
   18af4:	mov	r8, r0
   18af8:	mov	r7, r1
   18afc:	mov	r5, r2
   18b00:	mov	r0, r1
   18b04:	bl	11274 <strlen@plt>
   18b08:	mov	r4, r0
   18b0c:	tst	r5, #4
   18b10:	beq	18b48 <__assert_fail@plt+0x7778>
   18b14:	mov	r9, r0
   18b18:	mov	r1, #46	; 0x2e
   18b1c:	mov	r0, r7
   18b20:	bl	11280 <strchr@plt>
   18b24:	subs	r6, r0, #0
   18b28:	beq	18b4c <__assert_fail@plt+0x777c>
   18b2c:	sub	r4, r6, r7
   18b30:	sub	r9, r9, r4
   18b34:	cmp	r9, #3
   18b38:	beq	18b4c <__assert_fail@plt+0x777c>
   18b3c:	mov	r0, #0
   18b40:	add	sp, sp, #92	; 0x5c
   18b44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18b48:	mov	r6, #0
   18b4c:	sub	r2, r4, #8
   18b50:	cmp	r2, #4
   18b54:	bhi	18b3c <__assert_fail@plt+0x776c>
   18b58:	tst	r4, #1
   18b5c:	bne	18b3c <__assert_fail@plt+0x776c>
   18b60:	cmp	r4, #0
   18b64:	ble	18b94 <__assert_fail@plt+0x77c4>
   18b68:	mov	r2, r7
   18b6c:	add	r1, r7, r4
   18b70:	b	18b7c <__assert_fail@plt+0x77ac>
   18b74:	cmp	r1, r2
   18b78:	beq	18b94 <__assert_fail@plt+0x77c4>
   18b7c:	ldrb	r3, [r2], #1
   18b80:	sub	r3, r3, #48	; 0x30
   18b84:	cmp	r3, #9
   18b88:	bls	18b74 <__assert_fail@plt+0x77a4>
   18b8c:	mov	r0, #0
   18b90:	b	18b40 <__assert_fail@plt+0x7770>
   18b94:	add	r4, r4, r4, lsr #31
   18b98:	asr	r4, r4, #1
   18b9c:	cmp	r4, #0
   18ba0:	ble	18bd8 <__assert_fail@plt+0x7808>
   18ba4:	mov	r1, r7
   18ba8:	sub	r0, sp, #4
   18bac:	add	r7, r7, r4, lsl #1
   18bb0:	ldrb	r3, [r1]
   18bb4:	sub	r3, r3, #48	; 0x30
   18bb8:	add	r3, r3, r3, lsl #2
   18bbc:	ldrb	r2, [r1, #1]
   18bc0:	add	r3, r2, r3, lsl #1
   18bc4:	sub	r3, r3, #48	; 0x30
   18bc8:	str	r3, [r0, #4]!
   18bcc:	add	r1, r1, #2
   18bd0:	cmp	r1, r7
   18bd4:	bne	18bb0 <__assert_fail@plt+0x77e0>
   18bd8:	tst	r5, #1
   18bdc:	beq	18d34 <__assert_fail@plt+0x7964>
   18be0:	ldr	r3, [sp]
   18be4:	sub	r3, r3, #1
   18be8:	str	r3, [sp, #60]	; 0x3c
   18bec:	ldr	r3, [sp, #4]
   18bf0:	str	r3, [sp, #56]	; 0x38
   18bf4:	ldr	r3, [sp, #8]
   18bf8:	str	r3, [sp, #52]	; 0x34
   18bfc:	ldr	r3, [sp, #12]
   18c00:	str	r3, [sp, #48]	; 0x30
   18c04:	mov	r3, r5
   18c08:	sub	r2, r4, #4
   18c0c:	add	r1, sp, #16
   18c10:	add	r0, sp, #44	; 0x2c
   18c14:	bl	18a24 <__assert_fail@plt+0x7654>
   18c18:	cmp	r0, #0
   18c1c:	beq	18b3c <__assert_fail@plt+0x776c>
   18c20:	cmp	r6, #0
   18c24:	moveq	r3, #0
   18c28:	streq	r3, [sp, #44]	; 0x2c
   18c2c:	beq	18c64 <__assert_fail@plt+0x7894>
   18c30:	ldrb	r3, [r6, #1]
   18c34:	sub	r2, r3, #48	; 0x30
   18c38:	cmp	r2, #9
   18c3c:	bhi	18b8c <__assert_fail@plt+0x77bc>
   18c40:	ldrb	r2, [r6, #2]
   18c44:	sub	r1, r2, #48	; 0x30
   18c48:	cmp	r1, #9
   18c4c:	bhi	18b8c <__assert_fail@plt+0x77bc>
   18c50:	sub	r3, r3, #48	; 0x30
   18c54:	add	r3, r3, r3, lsl #2
   18c58:	add	r3, r2, r3, lsl #1
   18c5c:	sub	r3, r3, #48	; 0x30
   18c60:	str	r3, [sp, #44]	; 0x2c
   18c64:	mov	r5, #0
   18c68:	mvn	r4, #0
   18c6c:	mov	r7, #59	; 0x3b
   18c70:	mov	r6, #1
   18c74:	ldr	r3, [sp, #44]	; 0x2c
   18c78:	str	r3, [sp]
   18c7c:	ldr	r3, [sp, #48]	; 0x30
   18c80:	str	r3, [sp, #4]
   18c84:	ldr	r3, [sp, #52]	; 0x34
   18c88:	str	r3, [sp, #8]
   18c8c:	ldr	r3, [sp, #56]	; 0x38
   18c90:	str	r3, [sp, #12]
   18c94:	ldr	r3, [sp, #60]	; 0x3c
   18c98:	str	r3, [sp, #16]
   18c9c:	ldr	r3, [sp, #64]	; 0x40
   18ca0:	str	r3, [sp, #20]
   18ca4:	str	r4, [sp, #24]
   18ca8:	str	r4, [sp, #32]
   18cac:	mov	r0, sp
   18cb0:	bl	110b8 <mktime@plt>
   18cb4:	ldr	r3, [sp, #24]
   18cb8:	cmp	r3, #0
   18cbc:	blt	18dc8 <__assert_fail@plt+0x79f8>
   18cc0:	ldr	r1, [sp, #44]	; 0x2c
   18cc4:	ldr	r2, [sp, #20]
   18cc8:	ldr	r3, [sp, #64]	; 0x40
   18ccc:	eor	r3, r3, r2
   18cd0:	ldr	ip, [sp, #16]
   18cd4:	ldr	r2, [sp, #60]	; 0x3c
   18cd8:	eor	r2, r2, ip
   18cdc:	orr	r3, r3, r2
   18ce0:	ldr	ip, [sp, #12]
   18ce4:	ldr	r2, [sp, #56]	; 0x38
   18ce8:	eor	r2, r2, ip
   18cec:	orr	r3, r3, r2
   18cf0:	ldr	ip, [sp, #8]
   18cf4:	ldr	r2, [sp, #52]	; 0x34
   18cf8:	eor	r2, r2, ip
   18cfc:	orr	r3, r3, r2
   18d00:	ldr	ip, [sp, #4]
   18d04:	ldr	r2, [sp, #48]	; 0x30
   18d08:	eor	r2, r2, ip
   18d0c:	orr	r3, r3, r2
   18d10:	ldr	r2, [sp]
   18d14:	eor	r2, r2, r1
   18d18:	orrs	r3, r3, r2
   18d1c:	beq	18d80 <__assert_fail@plt+0x79b0>
   18d20:	cmp	r1, #60	; 0x3c
   18d24:	bne	18dd0 <__assert_fail@plt+0x7a00>
   18d28:	str	r7, [sp, #44]	; 0x2c
   18d2c:	mov	r5, r6
   18d30:	b	18c74 <__assert_fail@plt+0x78a4>
   18d34:	mov	r3, r5
   18d38:	sub	r2, r4, #4
   18d3c:	mov	r1, sp
   18d40:	add	r0, sp, #44	; 0x2c
   18d44:	bl	18a24 <__assert_fail@plt+0x7654>
   18d48:	cmp	r0, #0
   18d4c:	beq	18b3c <__assert_fail@plt+0x776c>
   18d50:	sub	r4, r4, #-1073741820	; 0xc0000004
   18d54:	add	r3, sp, r4, lsl #2
   18d58:	ldr	r2, [sp, r4, lsl #2]
   18d5c:	sub	r2, r2, #1
   18d60:	str	r2, [sp, #60]	; 0x3c
   18d64:	ldr	r2, [r3, #4]
   18d68:	str	r2, [sp, #56]	; 0x38
   18d6c:	ldr	r2, [r3, #8]
   18d70:	str	r2, [sp, #52]	; 0x34
   18d74:	ldr	r3, [r3, #12]
   18d78:	str	r3, [sp, #48]	; 0x30
   18d7c:	b	18c20 <__assert_fail@plt+0x7850>
   18d80:	cmp	r0, #0
   18d84:	blt	18db4 <__assert_fail@plt+0x79e4>
   18d88:	mvn	r3, #-2147483648	; 0x80000000
   18d8c:	sub	r3, r3, r5
   18d90:	cmp	r0, r3
   18d94:	movle	r3, #0
   18d98:	movgt	r3, #1
   18d9c:	cmp	r3, #0
   18da0:	movne	r0, #0
   18da4:	addeq	r0, r5, r0
   18da8:	streq	r0, [r8]
   18dac:	moveq	r0, #1
   18db0:	b	18b40 <__assert_fail@plt+0x7770>
   18db4:	rsb	r3, r0, #-2147483648	; 0x80000000
   18db8:	cmp	r5, r3
   18dbc:	movge	r3, #0
   18dc0:	movlt	r3, #1
   18dc4:	b	18d9c <__assert_fail@plt+0x79cc>
   18dc8:	mov	r0, #0
   18dcc:	b	18b40 <__assert_fail@plt+0x7770>
   18dd0:	mov	r0, #0
   18dd4:	b	18b40 <__assert_fail@plt+0x7770>
   18dd8:	push	{lr}		; (str lr, [sp, #-4]!)
   18ddc:	sub	sp, sp, #12
   18de0:	ldr	r0, [pc, #76]	; 18e34 <__assert_fail@plt+0x7a64>
   18de4:	bl	111d8 <getenv@plt>
   18de8:	cmp	r0, #0
   18dec:	beq	18e2c <__assert_fail@plt+0x7a5c>
   18df0:	ldrb	r3, [r0]
   18df4:	cmp	r3, #0
   18df8:	ldreq	r0, [pc, #56]	; 18e38 <__assert_fail@plt+0x7a68>
   18dfc:	bne	18e08 <__assert_fail@plt+0x7a38>
   18e00:	add	sp, sp, #12
   18e04:	pop	{pc}		; (ldr pc, [sp], #4)
   18e08:	mov	r2, #10
   18e0c:	add	r1, sp, #4
   18e10:	bl	110ac <strtol@plt>
   18e14:	ldr	r3, [sp, #4]
   18e18:	ldrb	r2, [r3]
   18e1c:	ldr	r3, [pc, #20]	; 18e38 <__assert_fail@plt+0x7a68>
   18e20:	cmp	r2, #0
   18e24:	movne	r0, r3
   18e28:	b	18e00 <__assert_fail@plt+0x7a30>
   18e2c:	ldr	r0, [pc, #4]	; 18e38 <__assert_fail@plt+0x7a68>
   18e30:	b	18e00 <__assert_fail@plt+0x7a30>
   18e34:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   18e38:	andeq	r1, r3, r9, rrx
   18e3c:	push	{r4, r5, r6, lr}
   18e40:	subs	r4, r0, #0
   18e44:	beq	18ebc <__assert_fail@plt+0x7aec>
   18e48:	mov	r1, #47	; 0x2f
   18e4c:	mov	r0, r4
   18e50:	bl	11328 <strrchr@plt>
   18e54:	cmp	r0, #0
   18e58:	addne	r5, r0, #1
   18e5c:	moveq	r5, r4
   18e60:	sub	r3, r5, r4
   18e64:	cmp	r3, #6
   18e68:	ble	18ea8 <__assert_fail@plt+0x7ad8>
   18e6c:	mov	r2, #7
   18e70:	ldr	r1, [pc, #96]	; 18ed8 <__assert_fail@plt+0x7b08>
   18e74:	sub	r0, r5, #7
   18e78:	bl	11394 <strncmp@plt>
   18e7c:	cmp	r0, #0
   18e80:	bne	18ea8 <__assert_fail@plt+0x7ad8>
   18e84:	mov	r2, #3
   18e88:	ldr	r1, [pc, #76]	; 18edc <__assert_fail@plt+0x7b0c>
   18e8c:	mov	r0, r5
   18e90:	bl	11394 <strncmp@plt>
   18e94:	cmp	r0, #0
   18e98:	addeq	r4, r5, #3
   18e9c:	ldreq	r3, [pc, #60]	; 18ee0 <__assert_fail@plt+0x7b10>
   18ea0:	streq	r4, [r3]
   18ea4:	movne	r4, r5
   18ea8:	ldr	r3, [pc, #52]	; 18ee4 <__assert_fail@plt+0x7b14>
   18eac:	str	r4, [r3]
   18eb0:	ldr	r3, [pc, #48]	; 18ee8 <__assert_fail@plt+0x7b18>
   18eb4:	str	r4, [r3]
   18eb8:	pop	{r4, r5, r6, pc}
   18ebc:	ldr	r3, [pc, #40]	; 18eec <__assert_fail@plt+0x7b1c>
   18ec0:	ldr	r3, [r3]
   18ec4:	mov	r2, #55	; 0x37
   18ec8:	mov	r1, #1
   18ecc:	ldr	r0, [pc, #28]	; 18ef0 <__assert_fail@plt+0x7b20>
   18ed0:	bl	11184 <fwrite@plt>
   18ed4:	bl	113a0 <abort@plt>
   18ed8:	andeq	r0, r2, r8, lsl r5
   18edc:	andeq	r0, r2, r0, lsr #10
   18ee0:	muleq	r3, r0, r1
   18ee4:	ldrdeq	r1, [r3], -r8
   18ee8:	muleq	r3, r4, r1
   18eec:	andeq	r1, r3, r0, lsr #3
   18ef0:	andeq	r0, r2, r0, ror #9
   18ef4:	push	{r4, r5, r6, lr}
   18ef8:	mov	r5, r0
   18efc:	mov	r4, r1
   18f00:	mov	r2, #48	; 0x30
   18f04:	mov	r1, #0
   18f08:	bl	112c8 <memset@plt>
   18f0c:	cmp	r4, #10
   18f10:	beq	18f20 <__assert_fail@plt+0x7b50>
   18f14:	str	r4, [r5]
   18f18:	mov	r0, r5
   18f1c:	pop	{r4, r5, r6, pc}
   18f20:	bl	113a0 <abort@plt>
   18f24:	push	{r4, r5, r6, lr}
   18f28:	mov	r4, r0
   18f2c:	mov	r5, r1
   18f30:	mov	r2, #5
   18f34:	mov	r1, r0
   18f38:	mov	r0, #0
   18f3c:	bl	11130 <dcgettext@plt>
   18f40:	cmp	r4, r0
   18f44:	popne	{r4, r5, r6, pc}
   18f48:	bl	1bd30 <__assert_fail@plt+0xa960>
   18f4c:	ldrb	r3, [r0]
   18f50:	bic	r3, r3, #32
   18f54:	cmp	r3, #85	; 0x55
   18f58:	beq	18fd4 <__assert_fail@plt+0x7c04>
   18f5c:	cmp	r3, #71	; 0x47
   18f60:	bne	19030 <__assert_fail@plt+0x7c60>
   18f64:	ldrb	r3, [r0, #1]
   18f68:	bic	r3, r3, #32
   18f6c:	cmp	r3, #66	; 0x42
   18f70:	bne	19030 <__assert_fail@plt+0x7c60>
   18f74:	ldrb	r3, [r0, #2]
   18f78:	cmp	r3, #49	; 0x31
   18f7c:	bne	19030 <__assert_fail@plt+0x7c60>
   18f80:	ldrb	r3, [r0, #3]
   18f84:	cmp	r3, #56	; 0x38
   18f88:	bne	19030 <__assert_fail@plt+0x7c60>
   18f8c:	ldrb	r3, [r0, #4]
   18f90:	cmp	r3, #48	; 0x30
   18f94:	bne	19030 <__assert_fail@plt+0x7c60>
   18f98:	ldrb	r3, [r0, #5]
   18f9c:	cmp	r3, #51	; 0x33
   18fa0:	bne	19030 <__assert_fail@plt+0x7c60>
   18fa4:	ldrb	r3, [r0, #6]
   18fa8:	cmp	r3, #48	; 0x30
   18fac:	bne	19030 <__assert_fail@plt+0x7c60>
   18fb0:	ldrb	r3, [r0, #7]
   18fb4:	cmp	r3, #0
   18fb8:	bne	19030 <__assert_fail@plt+0x7c60>
   18fbc:	ldrb	r2, [r4]
   18fc0:	ldr	r3, [pc, #124]	; 19044 <__assert_fail@plt+0x7c74>
   18fc4:	ldr	r0, [pc, #124]	; 19048 <__assert_fail@plt+0x7c78>
   18fc8:	cmp	r2, #96	; 0x60
   18fcc:	movne	r0, r3
   18fd0:	pop	{r4, r5, r6, pc}
   18fd4:	ldrb	r3, [r0, #1]
   18fd8:	bic	r3, r3, #32
   18fdc:	cmp	r3, #84	; 0x54
   18fe0:	bne	19030 <__assert_fail@plt+0x7c60>
   18fe4:	ldrb	r3, [r0, #2]
   18fe8:	bic	r3, r3, #32
   18fec:	cmp	r3, #70	; 0x46
   18ff0:	bne	19030 <__assert_fail@plt+0x7c60>
   18ff4:	ldrb	r3, [r0, #3]
   18ff8:	cmp	r3, #45	; 0x2d
   18ffc:	bne	19030 <__assert_fail@plt+0x7c60>
   19000:	ldrb	r3, [r0, #4]
   19004:	cmp	r3, #56	; 0x38
   19008:	bne	19030 <__assert_fail@plt+0x7c60>
   1900c:	ldrb	r3, [r0, #5]
   19010:	cmp	r3, #0
   19014:	bne	19030 <__assert_fail@plt+0x7c60>
   19018:	ldrb	r2, [r4]
   1901c:	ldr	r3, [pc, #40]	; 1904c <__assert_fail@plt+0x7c7c>
   19020:	ldr	r0, [pc, #40]	; 19050 <__assert_fail@plt+0x7c80>
   19024:	cmp	r2, #96	; 0x60
   19028:	movne	r0, r3
   1902c:	pop	{r4, r5, r6, pc}
   19030:	ldr	r3, [pc, #28]	; 19054 <__assert_fail@plt+0x7c84>
   19034:	ldr	r0, [pc, #28]	; 19058 <__assert_fail@plt+0x7c88>
   19038:	cmp	r5, #9
   1903c:	movne	r0, r3
   19040:	pop	{r4, r5, r6, pc}
   19044:	andeq	r0, r2, ip, ror r5
   19048:	andeq	r0, r2, r8, lsl #11
   1904c:	andeq	r0, r2, r8, ror r5
   19050:	andeq	r0, r2, ip, lsl #11
   19054:	andeq	r0, r2, r0, lsl #11
   19058:	andeq	r0, r2, r4, lsl #11
   1905c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19060:	sub	sp, sp, #116	; 0x74
   19064:	str	r0, [sp, #36]	; 0x24
   19068:	mov	sl, r1
   1906c:	str	r2, [sp, #52]	; 0x34
   19070:	str	r3, [sp, #28]
   19074:	ldr	r8, [sp, #152]	; 0x98
   19078:	bl	1119c <__ctype_get_mb_cur_max@plt>
   1907c:	str	r0, [sp, #84]	; 0x54
   19080:	ldr	r3, [sp, #156]	; 0x9c
   19084:	lsr	r3, r3, #1
   19088:	and	r3, r3, #1
   1908c:	str	r3, [sp, #32]
   19090:	mov	r3, #1
   19094:	str	r3, [sp, #40]	; 0x28
   19098:	mov	r3, #0
   1909c:	str	r3, [sp, #80]	; 0x50
   190a0:	str	r3, [sp, #44]	; 0x2c
   190a4:	str	r3, [sp, #48]	; 0x30
   190a8:	str	r3, [sp, #60]	; 0x3c
   190ac:	str	r3, [sp, #72]	; 0x48
   190b0:	str	r3, [sp, #76]	; 0x4c
   190b4:	mov	r7, sl
   190b8:	mov	sl, r8
   190bc:	cmp	sl, #10
   190c0:	ldrls	pc, [pc, sl, lsl #2]
   190c4:	b	1927c <__assert_fail@plt+0x7eac>
   190c8:	andeq	r9, r1, ip, lsr #2
   190cc:	strdeq	r9, [r1], -ip
   190d0:	andeq	r9, r1, r8, asr r2
   190d4:	strdeq	r9, [r1], -r4
   190d8:	andeq	r9, r1, ip, lsl #4
   190dc:	andeq	r9, r1, ip, lsr r1
   190e0:	andeq	sl, r1, r8, lsr #3
   190e4:	andeq	r9, r1, r0, lsl #5
   190e8:	andeq	r9, r1, r8, ror r1
   190ec:	andeq	r9, r1, r8, ror r1
   190f0:	andeq	r9, r1, r8, ror r1
   190f4:	mov	r3, #1
   190f8:	str	r3, [sp, #48]	; 0x30
   190fc:	mov	r3, #1
   19100:	str	r3, [sp, #32]
   19104:	str	r3, [sp, #60]	; 0x3c
   19108:	ldr	r3, [pc, #4068]	; 1a0f4 <__assert_fail@plt+0x8d24>
   1910c:	str	r3, [sp, #72]	; 0x48
   19110:	mov	fp, #0
   19114:	mov	sl, #2
   19118:	mov	r6, #0
   1911c:	ldr	r3, [sp, #48]	; 0x30
   19120:	eor	r3, r3, #1
   19124:	str	r3, [sp, #68]	; 0x44
   19128:	b	19a10 <__assert_fail@plt+0x8640>
   1912c:	mov	r3, #0
   19130:	str	r3, [sp, #32]
   19134:	mov	fp, r3
   19138:	b	19118 <__assert_fail@plt+0x7d48>
   1913c:	ldr	r3, [sp, #32]
   19140:	cmp	r3, #0
   19144:	bne	19298 <__assert_fail@plt+0x7ec8>
   19148:	cmp	r7, #0
   1914c:	beq	192b8 <__assert_fail@plt+0x7ee8>
   19150:	ldr	r3, [sp, #36]	; 0x24
   19154:	mov	r2, #34	; 0x22
   19158:	strb	r2, [r3]
   1915c:	mov	r3, #1
   19160:	str	r3, [sp, #48]	; 0x30
   19164:	str	r3, [sp, #60]	; 0x3c
   19168:	ldr	r3, [pc, #3980]	; 1a0fc <__assert_fail@plt+0x8d2c>
   1916c:	str	r3, [sp, #72]	; 0x48
   19170:	mov	fp, #1
   19174:	b	19118 <__assert_fail@plt+0x7d48>
   19178:	cmp	sl, #10
   1917c:	beq	191a0 <__assert_fail@plt+0x7dd0>
   19180:	mov	r1, sl
   19184:	ldr	r0, [pc, #3948]	; 1a0f8 <__assert_fail@plt+0x8d28>
   19188:	bl	18f24 <__assert_fail@plt+0x7b54>
   1918c:	str	r0, [sp, #164]	; 0xa4
   19190:	mov	r1, sl
   19194:	ldr	r0, [pc, #3928]	; 1a0f4 <__assert_fail@plt+0x8d24>
   19198:	bl	18f24 <__assert_fail@plt+0x7b54>
   1919c:	str	r0, [sp, #168]	; 0xa8
   191a0:	ldr	r3, [sp, #32]
   191a4:	cmp	r3, #0
   191a8:	movne	fp, #0
   191ac:	bne	191e4 <__assert_fail@plt+0x7e14>
   191b0:	ldr	r3, [sp, #164]	; 0xa4
   191b4:	ldrb	r3, [r3]
   191b8:	cmp	r3, #0
   191bc:	beq	19204 <__assert_fail@plt+0x7e34>
   191c0:	ldr	r2, [sp, #164]	; 0xa4
   191c4:	mov	fp, #0
   191c8:	ldr	r1, [sp, #36]	; 0x24
   191cc:	cmp	r7, fp
   191d0:	strbhi	r3, [r1, fp]
   191d4:	add	fp, fp, #1
   191d8:	ldrb	r3, [r2, #1]!
   191dc:	cmp	r3, #0
   191e0:	bne	191cc <__assert_fail@plt+0x7dfc>
   191e4:	ldr	r0, [sp, #168]	; 0xa8
   191e8:	bl	11274 <strlen@plt>
   191ec:	str	r0, [sp, #60]	; 0x3c
   191f0:	ldr	r3, [sp, #168]	; 0xa8
   191f4:	str	r3, [sp, #72]	; 0x48
   191f8:	mov	r3, #1
   191fc:	str	r3, [sp, #48]	; 0x30
   19200:	b	19118 <__assert_fail@plt+0x7d48>
   19204:	mov	fp, #0
   19208:	b	191e4 <__assert_fail@plt+0x7e14>
   1920c:	ldr	r3, [sp, #32]
   19210:	cmp	r3, #0
   19214:	bne	192d4 <__assert_fail@plt+0x7f04>
   19218:	mov	r3, #1
   1921c:	str	r3, [sp, #48]	; 0x30
   19220:	cmp	r7, #0
   19224:	beq	192f0 <__assert_fail@plt+0x7f20>
   19228:	ldr	r3, [sp, #36]	; 0x24
   1922c:	mov	r2, #39	; 0x27
   19230:	strb	r2, [r3]
   19234:	mov	r3, #0
   19238:	str	r3, [sp, #32]
   1923c:	mov	r3, #1
   19240:	str	r3, [sp, #60]	; 0x3c
   19244:	ldr	r3, [pc, #3752]	; 1a0f4 <__assert_fail@plt+0x8d24>
   19248:	str	r3, [sp, #72]	; 0x48
   1924c:	mov	fp, #1
   19250:	mov	sl, #2
   19254:	b	19118 <__assert_fail@plt+0x7d48>
   19258:	ldr	r3, [sp, #32]
   1925c:	cmp	r3, #0
   19260:	beq	19220 <__assert_fail@plt+0x7e50>
   19264:	mov	r3, #1
   19268:	str	r3, [sp, #60]	; 0x3c
   1926c:	ldr	r3, [pc, #3712]	; 1a0f4 <__assert_fail@plt+0x8d24>
   19270:	str	r3, [sp, #72]	; 0x48
   19274:	mov	fp, #0
   19278:	b	19118 <__assert_fail@plt+0x7d48>
   1927c:	bl	113a0 <abort@plt>
   19280:	mov	r3, #0
   19284:	str	r3, [sp, #32]
   19288:	mov	r3, #1
   1928c:	str	r3, [sp, #48]	; 0x30
   19290:	mov	fp, #0
   19294:	b	19118 <__assert_fail@plt+0x7d48>
   19298:	ldr	r3, [sp, #32]
   1929c:	str	r3, [sp, #48]	; 0x30
   192a0:	mov	r3, #1
   192a4:	str	r3, [sp, #60]	; 0x3c
   192a8:	ldr	r3, [pc, #3660]	; 1a0fc <__assert_fail@plt+0x8d2c>
   192ac:	str	r3, [sp, #72]	; 0x48
   192b0:	mov	fp, #0
   192b4:	b	19118 <__assert_fail@plt+0x7d48>
   192b8:	mov	r3, #1
   192bc:	str	r3, [sp, #48]	; 0x30
   192c0:	str	r3, [sp, #60]	; 0x3c
   192c4:	ldr	r3, [pc, #3632]	; 1a0fc <__assert_fail@plt+0x8d2c>
   192c8:	str	r3, [sp, #72]	; 0x48
   192cc:	mov	fp, #1
   192d0:	b	19118 <__assert_fail@plt+0x7d48>
   192d4:	mov	r3, #1
   192d8:	str	r3, [sp, #60]	; 0x3c
   192dc:	ldr	r3, [pc, #3600]	; 1a0f4 <__assert_fail@plt+0x8d24>
   192e0:	str	r3, [sp, #72]	; 0x48
   192e4:	mov	fp, #0
   192e8:	mov	sl, #2
   192ec:	b	19118 <__assert_fail@plt+0x7d48>
   192f0:	mov	r3, #0
   192f4:	str	r3, [sp, #32]
   192f8:	mov	r3, #1
   192fc:	str	r3, [sp, #60]	; 0x3c
   19300:	ldr	r3, [pc, #3564]	; 1a0f4 <__assert_fail@plt+0x8d24>
   19304:	str	r3, [sp, #72]	; 0x48
   19308:	mov	fp, #1
   1930c:	mov	sl, #2
   19310:	b	19118 <__assert_fail@plt+0x7d48>
   19314:	mov	r3, #0
   19318:	str	r3, [sp, #56]	; 0x38
   1931c:	ldr	r3, [sp, #52]	; 0x34
   19320:	add	r2, r3, r6
   19324:	str	r2, [sp, #64]	; 0x40
   19328:	ldrb	r4, [r3, r6]
   1932c:	cmp	r4, #126	; 0x7e
   19330:	ldrls	pc, [pc, r4, lsl #2]
   19334:	b	19b70 <__assert_fail@plt+0x87a0>
   19338:	andeq	r9, r1, r0, asr r5
   1933c:	andeq	r9, r1, r0, ror fp
   19340:	andeq	r9, r1, r0, ror fp
   19344:	andeq	r9, r1, r0, ror fp
   19348:	andeq	r9, r1, r0, ror fp
   1934c:	andeq	r9, r1, r0, ror fp
   19350:	andeq	r9, r1, r0, ror fp
   19354:	andeq	r9, r1, ip, lsr #17
   19358:	andeq	r9, r1, r8, asr #10
   1935c:	andeq	r9, r1, r4, ror #16
   19360:	andeq	r9, r1, ip, asr r8
   19364:	andeq	r9, r1, ip, asr #15
   19368:	andeq	r9, r1, r4, asr #15
   1936c:	andeq	r9, r1, r0, asr #10
   19370:	andeq	r9, r1, r0, ror fp
   19374:	andeq	r9, r1, r0, ror fp
   19378:	andeq	r9, r1, r0, ror fp
   1937c:	andeq	r9, r1, r0, ror fp
   19380:	andeq	r9, r1, r0, ror fp
   19384:	andeq	r9, r1, r0, ror fp
   19388:	andeq	r9, r1, r0, ror fp
   1938c:	andeq	r9, r1, r0, ror fp
   19390:	andeq	r9, r1, r0, ror fp
   19394:	andeq	r9, r1, r0, ror fp
   19398:	andeq	r9, r1, r0, ror fp
   1939c:	andeq	r9, r1, r0, ror fp
   193a0:	andeq	r9, r1, r0, ror fp
   193a4:	andeq	r9, r1, r0, ror fp
   193a8:	andeq	r9, r1, r0, ror fp
   193ac:	andeq	r9, r1, r0, ror fp
   193b0:	andeq	r9, r1, r0, ror fp
   193b4:	andeq	r9, r1, r0, ror fp
   193b8:	andeq	r9, r1, r0, lsl #18
   193bc:	strdeq	r9, [r1], -ip
   193c0:	strdeq	r9, [r1], -ip
   193c4:	ldrdeq	r9, [r1], -r4
   193c8:	strdeq	r9, [r1], -ip
   193cc:	andeq	r9, r1, r4, asr #30
   193d0:	strdeq	r9, [r1], -ip
   193d4:	ldrdeq	r9, [r1], -r4
   193d8:	strdeq	r9, [r1], -ip
   193dc:	strdeq	r9, [r1], -ip
   193e0:	strdeq	r9, [r1], -ip
   193e4:	andeq	r9, r1, r4, asr #30
   193e8:	andeq	r9, r1, r4, asr #30
   193ec:	andeq	r9, r1, r4, asr #30
   193f0:	andeq	r9, r1, r4, asr #30
   193f4:	andeq	r9, r1, r4, asr #30
   193f8:	andeq	r9, r1, r4, asr #30
   193fc:	andeq	r9, r1, r4, asr #30
   19400:	andeq	r9, r1, r4, asr #30
   19404:	andeq	r9, r1, r4, asr #30
   19408:	andeq	r9, r1, r4, asr #30
   1940c:	andeq	r9, r1, r4, asr #30
   19410:	andeq	r9, r1, r4, asr #30
   19414:	andeq	r9, r1, r4, asr #30
   19418:	andeq	r9, r1, r4, asr #30
   1941c:	andeq	r9, r1, r4, asr #30
   19420:	andeq	r9, r1, r4, asr #30
   19424:	strdeq	r9, [r1], -ip
   19428:	strdeq	r9, [r1], -ip
   1942c:	strdeq	r9, [r1], -ip
   19430:	strdeq	r9, [r1], -ip
   19434:	andeq	r9, r1, r8, asr r6
   19438:	andeq	r9, r1, r0, ror fp
   1943c:	andeq	r9, r1, r4, asr #30
   19440:	andeq	r9, r1, r4, asr #30
   19444:	andeq	r9, r1, r4, asr #30
   19448:	andeq	r9, r1, r4, asr #30
   1944c:	andeq	r9, r1, r4, asr #30
   19450:	andeq	r9, r1, r4, asr #30
   19454:	andeq	r9, r1, r4, asr #30
   19458:	andeq	r9, r1, r4, asr #30
   1945c:	andeq	r9, r1, r4, asr #30
   19460:	andeq	r9, r1, r4, asr #30
   19464:	andeq	r9, r1, r4, asr #30
   19468:	andeq	r9, r1, r4, asr #30
   1946c:	andeq	r9, r1, r4, asr #30
   19470:	andeq	r9, r1, r4, asr #30
   19474:	andeq	r9, r1, r4, asr #30
   19478:	andeq	r9, r1, r4, asr #30
   1947c:	andeq	r9, r1, r4, asr #30
   19480:	andeq	r9, r1, r4, asr #30
   19484:	andeq	r9, r1, r4, asr #30
   19488:	andeq	r9, r1, r4, asr #30
   1948c:	andeq	r9, r1, r4, asr #30
   19490:	andeq	r9, r1, r4, asr #30
   19494:	andeq	r9, r1, r4, asr #30
   19498:	andeq	r9, r1, r4, asr #30
   1949c:	andeq	r9, r1, r4, asr #30
   194a0:	andeq	r9, r1, r4, asr #30
   194a4:	strdeq	r9, [r1], -ip
   194a8:	ldrdeq	r9, [r1], -r4
   194ac:	andeq	r9, r1, r4, asr #30
   194b0:	strdeq	r9, [r1], -ip
   194b4:	andeq	r9, r1, r4, asr #30
   194b8:	strdeq	r9, [r1], -ip
   194bc:	andeq	r9, r1, r4, asr #30
   194c0:	andeq	r9, r1, r4, asr #30
   194c4:	andeq	r9, r1, r4, asr #30
   194c8:	andeq	r9, r1, r4, asr #30
   194cc:	andeq	r9, r1, r4, asr #30
   194d0:	andeq	r9, r1, r4, asr #30
   194d4:	andeq	r9, r1, r4, asr #30
   194d8:	andeq	r9, r1, r4, asr #30
   194dc:	andeq	r9, r1, r4, asr #30
   194e0:	andeq	r9, r1, r4, asr #30
   194e4:	andeq	r9, r1, r4, asr #30
   194e8:	andeq	r9, r1, r4, asr #30
   194ec:	andeq	r9, r1, r4, asr #30
   194f0:	andeq	r9, r1, r4, asr #30
   194f4:	andeq	r9, r1, r4, asr #30
   194f8:	andeq	r9, r1, r4, asr #30
   194fc:	andeq	r9, r1, r4, asr #30
   19500:	andeq	r9, r1, r4, asr #30
   19504:	andeq	r9, r1, r4, asr #30
   19508:	andeq	r9, r1, r4, asr #30
   1950c:	andeq	r9, r1, r4, asr #30
   19510:	andeq	r9, r1, r4, asr #30
   19514:	andeq	r9, r1, r4, asr #30
   19518:	andeq	r9, r1, r4, asr #30
   1951c:	andeq	r9, r1, r4, asr #30
   19520:	andeq	r9, r1, r4, asr #30
   19524:			; <UNDEFINED> instruction: 0x000198b4
   19528:	strdeq	r9, [r1], -ip
   1952c:			; <UNDEFINED> instruction: 0x000198b4
   19530:	ldrdeq	r9, [r1], -r4
   19534:	mov	r3, #0
   19538:	str	r3, [sp, #56]	; 0x38
   1953c:	b	1931c <__assert_fail@plt+0x7f4c>
   19540:	mov	r3, #114	; 0x72
   19544:	b	19868 <__assert_fail@plt+0x8498>
   19548:	mov	r3, #98	; 0x62
   1954c:	b	19880 <__assert_fail@plt+0x84b0>
   19550:	ldr	r3, [sp, #48]	; 0x30
   19554:	cmp	r3, #0
   19558:	beq	19640 <__assert_fail@plt+0x8270>
   1955c:	ldr	r3, [sp, #32]
   19560:	cmp	r3, #0
   19564:	bne	1a0c8 <__assert_fail@plt+0x8cf8>
   19568:	ldr	r3, [sp, #44]	; 0x2c
   1956c:	eor	r3, r3, #1
   19570:	cmp	sl, #2
   19574:	movne	r3, #0
   19578:	andeq	r3, r3, #1
   1957c:	cmp	r3, #0
   19580:	moveq	r2, fp
   19584:	beq	195c8 <__assert_fail@plt+0x81f8>
   19588:	cmp	r7, fp
   1958c:	ldrhi	r2, [sp, #36]	; 0x24
   19590:	movhi	r1, #39	; 0x27
   19594:	strbhi	r1, [r2, fp]
   19598:	add	r2, fp, #1
   1959c:	cmp	r7, r2
   195a0:	ldrhi	r1, [sp, #36]	; 0x24
   195a4:	movhi	r0, #36	; 0x24
   195a8:	strbhi	r0, [r1, r2]
   195ac:	add	r2, fp, #2
   195b0:	cmp	r7, r2
   195b4:	ldrhi	r1, [sp, #36]	; 0x24
   195b8:	movhi	r0, #39	; 0x27
   195bc:	strbhi	r0, [r1, r2]
   195c0:	add	r2, fp, #3
   195c4:	str	r3, [sp, #44]	; 0x2c
   195c8:	cmp	r7, r2
   195cc:	ldrhi	r3, [sp, #36]	; 0x24
   195d0:	movhi	r1, #92	; 0x5c
   195d4:	strbhi	r1, [r3, r2]
   195d8:	add	fp, r2, #1
   195dc:	cmp	r5, #0
   195e0:	beq	19f4c <__assert_fail@plt+0x8b7c>
   195e4:	add	r3, r6, #1
   195e8:	ldr	r1, [sp, #28]
   195ec:	cmp	r1, r3
   195f0:	bls	19f5c <__assert_fail@plt+0x8b8c>
   195f4:	ldr	r1, [sp, #52]	; 0x34
   195f8:	ldrb	r3, [r1, r3]
   195fc:	sub	r3, r3, #48	; 0x30
   19600:	uxtb	r3, r3
   19604:	cmp	r3, #9
   19608:	bhi	19f68 <__assert_fail@plt+0x8b98>
   1960c:	cmp	r7, fp
   19610:	movhi	r3, #48	; 0x30
   19614:	ldrhi	r1, [sp, #36]	; 0x24
   19618:	strbhi	r3, [r1, fp]
   1961c:	add	r3, r2, #2
   19620:	cmp	r7, r3
   19624:	movhi	r1, #48	; 0x30
   19628:	ldrhi	r0, [sp, #36]	; 0x24
   1962c:	strbhi	r1, [r0, r3]
   19630:	add	fp, r2, #3
   19634:	ldr	r8, [sp, #32]
   19638:	mov	r4, #48	; 0x30
   1963c:	b	19918 <__assert_fail@plt+0x8548>
   19640:	ldr	r3, [sp, #156]	; 0x9c
   19644:	tst	r3, #1
   19648:	bne	19a0c <__assert_fail@plt+0x863c>
   1964c:	ldr	r5, [sp, #48]	; 0x30
   19650:	mov	r8, r5
   19654:	b	19918 <__assert_fail@plt+0x8548>
   19658:	cmp	sl, #2
   1965c:	beq	19674 <__assert_fail@plt+0x82a4>
   19660:	cmp	sl, #5
   19664:	beq	1968c <__assert_fail@plt+0x82bc>
   19668:	mov	r8, #0
   1966c:	mov	r5, r8
   19670:	b	19918 <__assert_fail@plt+0x8548>
   19674:	ldr	r3, [sp, #32]
   19678:	cmp	r3, #0
   1967c:	bne	1a0dc <__assert_fail@plt+0x8d0c>
   19680:	mov	r8, r3
   19684:	mov	r5, r3
   19688:	b	19918 <__assert_fail@plt+0x8548>
   1968c:	ldr	r3, [sp, #156]	; 0x9c
   19690:	tst	r3, #4
   19694:	beq	19f74 <__assert_fail@plt+0x8ba4>
   19698:	add	r3, r6, #2
   1969c:	ldr	r2, [sp, #28]
   196a0:	cmp	r2, r3
   196a4:	bls	19f80 <__assert_fail@plt+0x8bb0>
   196a8:	ldr	r2, [sp, #52]	; 0x34
   196ac:	add	r2, r2, r6
   196b0:	ldrb	r2, [r2, #1]
   196b4:	cmp	r2, #63	; 0x3f
   196b8:	movne	r8, #0
   196bc:	movne	r5, r8
   196c0:	bne	19918 <__assert_fail@plt+0x8548>
   196c4:	ldr	r2, [sp, #52]	; 0x34
   196c8:	ldrb	r2, [r2, r3]
   196cc:	sub	r1, r2, #33	; 0x21
   196d0:	cmp	r1, #29
   196d4:	ldrls	pc, [pc, r1, lsl #2]
   196d8:	b	19f8c <__assert_fail@plt+0x8bbc>
   196dc:	andeq	r9, r1, r4, asr r7
   196e0:	andeq	r9, r1, ip, lsl #31
   196e4:	andeq	r9, r1, ip, lsl #31
   196e8:	andeq	r9, r1, ip, lsl #31
   196ec:	andeq	r9, r1, ip, lsl #31
   196f0:	andeq	r9, r1, ip, lsl #31
   196f4:	andeq	r9, r1, r4, asr r7
   196f8:	andeq	r9, r1, r4, asr r7
   196fc:	andeq	r9, r1, r4, asr r7
   19700:	andeq	r9, r1, ip, lsl #31
   19704:	andeq	r9, r1, ip, lsl #31
   19708:	andeq	r9, r1, ip, lsl #31
   1970c:	andeq	r9, r1, r4, asr r7
   19710:	andeq	r9, r1, ip, lsl #31
   19714:	andeq	r9, r1, r4, asr r7
   19718:	andeq	r9, r1, ip, lsl #31
   1971c:	andeq	r9, r1, ip, lsl #31
   19720:	andeq	r9, r1, ip, lsl #31
   19724:	andeq	r9, r1, ip, lsl #31
   19728:	andeq	r9, r1, ip, lsl #31
   1972c:	andeq	r9, r1, ip, lsl #31
   19730:	andeq	r9, r1, ip, lsl #31
   19734:	andeq	r9, r1, ip, lsl #31
   19738:	andeq	r9, r1, ip, lsl #31
   1973c:	andeq	r9, r1, ip, lsl #31
   19740:	andeq	r9, r1, ip, lsl #31
   19744:	andeq	r9, r1, ip, lsl #31
   19748:	andeq	r9, r1, r4, asr r7
   1974c:	andeq	r9, r1, r4, asr r7
   19750:	andeq	r9, r1, r4, asr r7
   19754:	ldr	r1, [sp, #32]
   19758:	cmp	r1, #0
   1975c:	bne	1a19c <__assert_fail@plt+0x8dcc>
   19760:	cmp	r7, fp
   19764:	movhi	r1, #63	; 0x3f
   19768:	ldrhi	r0, [sp, #36]	; 0x24
   1976c:	strbhi	r1, [r0, fp]
   19770:	add	r1, fp, #1
   19774:	cmp	r7, r1
   19778:	ldrhi	r0, [sp, #36]	; 0x24
   1977c:	movhi	ip, #34	; 0x22
   19780:	strbhi	ip, [r0, r1]
   19784:	add	r1, fp, #2
   19788:	cmp	r7, r1
   1978c:	ldrhi	r0, [sp, #36]	; 0x24
   19790:	movhi	ip, #34	; 0x22
   19794:	strbhi	ip, [r0, r1]
   19798:	add	r1, fp, #3
   1979c:	cmp	r7, r1
   197a0:	movhi	r0, #63	; 0x3f
   197a4:	ldrhi	ip, [sp, #36]	; 0x24
   197a8:	strbhi	r0, [ip, r1]
   197ac:	add	fp, fp, #4
   197b0:	ldr	r5, [sp, #32]
   197b4:	mov	r8, r5
   197b8:	mov	r4, r2
   197bc:	mov	r6, r3
   197c0:	b	19918 <__assert_fail@plt+0x8548>
   197c4:	mov	r3, #102	; 0x66
   197c8:	b	19880 <__assert_fail@plt+0x84b0>
   197cc:	mov	r3, #118	; 0x76
   197d0:	b	19880 <__assert_fail@plt+0x84b0>
   197d4:	cmp	sl, #2
   197d8:	beq	19844 <__assert_fail@plt+0x8474>
   197dc:	ldr	r3, [sp, #48]	; 0x30
   197e0:	ldr	r2, [sp, #32]
   197e4:	and	r3, r3, r2
   197e8:	tst	r9, r3
   197ec:	moveq	r3, r4
   197f0:	beq	19880 <__assert_fail@plt+0x84b0>
   197f4:	mov	r8, #0
   197f8:	mov	r5, r8
   197fc:	eor	r5, r5, #1
   19800:	ldr	r3, [sp, #44]	; 0x2c
   19804:	and	r5, r5, r3
   19808:	tst	r5, #255	; 0xff
   1980c:	beq	199ec <__assert_fail@plt+0x861c>
   19810:	cmp	r7, fp
   19814:	ldrhi	r3, [sp, #36]	; 0x24
   19818:	movhi	r2, #39	; 0x27
   1981c:	strbhi	r2, [r3, fp]
   19820:	add	r3, fp, #1
   19824:	cmp	r7, r3
   19828:	ldrhi	r2, [sp, #36]	; 0x24
   1982c:	movhi	r1, #39	; 0x27
   19830:	strbhi	r1, [r2, r3]
   19834:	add	fp, fp, #2
   19838:	mov	r3, #0
   1983c:	str	r3, [sp, #44]	; 0x2c
   19840:	b	199ec <__assert_fail@plt+0x861c>
   19844:	ldr	r3, [sp, #32]
   19848:	cmp	r3, #0
   1984c:	bne	1a0e8 <__assert_fail@plt+0x8d18>
   19850:	mov	r8, r3
   19854:	mov	r5, r3
   19858:	b	197fc <__assert_fail@plt+0x842c>
   1985c:	mov	r3, #110	; 0x6e
   19860:	b	19868 <__assert_fail@plt+0x8498>
   19864:	mov	r3, #116	; 0x74
   19868:	ldr	r2, [sp, #32]
   1986c:	cmp	sl, #2
   19870:	movne	r2, #0
   19874:	andeq	r2, r2, #1
   19878:	cmp	r2, #0
   1987c:	bne	198a0 <__assert_fail@plt+0x84d0>
   19880:	ldr	r2, [sp, #48]	; 0x30
   19884:	cmp	r2, #0
   19888:	moveq	r8, r2
   1988c:	moveq	r5, r2
   19890:	beq	19918 <__assert_fail@plt+0x8548>
   19894:	mov	r4, r3
   19898:	mov	r8, #0
   1989c:	b	19970 <__assert_fail@plt+0x85a0>
   198a0:	mov	r8, sl
   198a4:	mov	sl, r7
   198a8:	b	1a114 <__assert_fail@plt+0x8d44>
   198ac:	mov	r3, #97	; 0x61
   198b0:	b	19880 <__assert_fail@plt+0x84b0>
   198b4:	ldr	r3, [sp, #28]
   198b8:	cmn	r3, #1
   198bc:	beq	198e8 <__assert_fail@plt+0x8518>
   198c0:	ldr	r3, [sp, #28]
   198c4:	subs	r3, r3, #1
   198c8:	movne	r3, #1
   198cc:	cmp	r3, #0
   198d0:	bne	19f98 <__assert_fail@plt+0x8bc8>
   198d4:	cmp	r6, #0
   198d8:	beq	19900 <__assert_fail@plt+0x8530>
   198dc:	mov	r8, #0
   198e0:	mov	r5, r8
   198e4:	b	19918 <__assert_fail@plt+0x8548>
   198e8:	ldr	r3, [sp, #52]	; 0x34
   198ec:	ldrb	r3, [r3, #1]
   198f0:	adds	r3, r3, #0
   198f4:	movne	r3, #1
   198f8:	b	198cc <__assert_fail@plt+0x84fc>
   198fc:	mov	r8, #0
   19900:	ldr	r5, [sp, #32]
   19904:	cmp	sl, #2
   19908:	movne	r5, #0
   1990c:	andeq	r5, r5, #1
   19910:	cmp	r5, #0
   19914:	bne	19ac8 <__assert_fail@plt+0x86f8>
   19918:	ldr	r3, [sp, #68]	; 0x44
   1991c:	cmp	sl, #2
   19920:	orreq	r3, r3, #1
   19924:	eor	r3, r3, #1
   19928:	ldr	r2, [sp, #32]
   1992c:	orr	r3, r2, r3
   19930:	tst	r3, #255	; 0xff
   19934:	beq	19964 <__assert_fail@plt+0x8594>
   19938:	ldr	r3, [sp, #160]	; 0xa0
   1993c:	cmp	r3, #0
   19940:	beq	19964 <__assert_fail@plt+0x8594>
   19944:	lsr	r2, r4, #5
   19948:	uxtb	r2, r2
   1994c:	and	r3, r4, #31
   19950:	ldr	r1, [sp, #160]	; 0xa0
   19954:	ldr	r2, [r1, r2, lsl #2]
   19958:	lsr	r3, r2, r3
   1995c:	tst	r3, #1
   19960:	bne	19970 <__assert_fail@plt+0x85a0>
   19964:	ldr	r3, [sp, #56]	; 0x38
   19968:	cmp	r3, #0
   1996c:	beq	197fc <__assert_fail@plt+0x842c>
   19970:	ldr	r3, [sp, #32]
   19974:	cmp	r3, #0
   19978:	bne	1a184 <__assert_fail@plt+0x8db4>
   1997c:	ldr	r3, [sp, #44]	; 0x2c
   19980:	eor	r3, r3, #1
   19984:	cmp	sl, #2
   19988:	movne	r3, #0
   1998c:	andeq	r3, r3, #1
   19990:	cmp	r3, #0
   19994:	beq	199d8 <__assert_fail@plt+0x8608>
   19998:	cmp	r7, fp
   1999c:	ldrhi	r2, [sp, #36]	; 0x24
   199a0:	movhi	r1, #39	; 0x27
   199a4:	strbhi	r1, [r2, fp]
   199a8:	add	r2, fp, #1
   199ac:	cmp	r7, r2
   199b0:	ldrhi	r1, [sp, #36]	; 0x24
   199b4:	movhi	r0, #36	; 0x24
   199b8:	strbhi	r0, [r1, r2]
   199bc:	add	r2, fp, #2
   199c0:	cmp	r7, r2
   199c4:	ldrhi	r1, [sp, #36]	; 0x24
   199c8:	movhi	r0, #39	; 0x27
   199cc:	strbhi	r0, [r1, r2]
   199d0:	add	fp, fp, #3
   199d4:	str	r3, [sp, #44]	; 0x2c
   199d8:	cmp	r7, fp
   199dc:	ldrhi	r3, [sp, #36]	; 0x24
   199e0:	movhi	r2, #92	; 0x5c
   199e4:	strbhi	r2, [r3, fp]
   199e8:	add	fp, fp, #1
   199ec:	cmp	fp, r7
   199f0:	ldrcc	r3, [sp, #36]	; 0x24
   199f4:	strbcc	r4, [r3, fp]
   199f8:	add	fp, fp, #1
   199fc:	ldr	r3, [sp, #40]	; 0x28
   19a00:	cmp	r8, #0
   19a04:	moveq	r3, #0
   19a08:	str	r3, [sp, #40]	; 0x28
   19a0c:	add	r6, r6, #1
   19a10:	ldr	r3, [sp, #28]
   19a14:	cmn	r3, #1
   19a18:	beq	19fa4 <__assert_fail@plt+0x8bd4>
   19a1c:	ldr	r3, [sp, #28]
   19a20:	subs	r8, r3, r6
   19a24:	movne	r8, #1
   19a28:	cmp	r8, #0
   19a2c:	beq	19fb8 <__assert_fail@plt+0x8be8>
   19a30:	ldr	r5, [sp, #48]	; 0x30
   19a34:	cmp	sl, #2
   19a38:	moveq	r5, #0
   19a3c:	andne	r5, r5, #1
   19a40:	ldr	r3, [sp, #60]	; 0x3c
   19a44:	adds	r9, r3, #0
   19a48:	movne	r9, #1
   19a4c:	ands	r2, r5, r9
   19a50:	str	r2, [sp, #56]	; 0x38
   19a54:	beq	1931c <__assert_fail@plt+0x7f4c>
   19a58:	add	r4, r6, r3
   19a5c:	ldr	r2, [sp, #28]
   19a60:	cmp	r3, #1
   19a64:	movls	r3, #0
   19a68:	movhi	r3, #1
   19a6c:	cmn	r2, #1
   19a70:	movne	r3, #0
   19a74:	cmp	r3, #0
   19a78:	beq	19a88 <__assert_fail@plt+0x86b8>
   19a7c:	ldr	r0, [sp, #52]	; 0x34
   19a80:	bl	11274 <strlen@plt>
   19a84:	str	r0, [sp, #28]
   19a88:	ldr	r3, [sp, #28]
   19a8c:	cmp	r3, r4
   19a90:	bcc	19314 <__assert_fail@plt+0x7f44>
   19a94:	ldr	r2, [sp, #60]	; 0x3c
   19a98:	ldr	r1, [sp, #72]	; 0x48
   19a9c:	ldr	r3, [sp, #52]	; 0x34
   19aa0:	add	r0, r3, r6
   19aa4:	bl	11118 <memcmp@plt>
   19aa8:	cmp	r0, #0
   19aac:	bne	19534 <__assert_fail@plt+0x8164>
   19ab0:	ldr	r3, [sp, #32]
   19ab4:	cmp	r3, #0
   19ab8:	beq	1931c <__assert_fail@plt+0x7f4c>
   19abc:	mov	r8, sl
   19ac0:	mov	sl, r7
   19ac4:	b	1a114 <__assert_fail@plt+0x8d44>
   19ac8:	mov	r8, sl
   19acc:	mov	sl, r7
   19ad0:	b	1a114 <__assert_fail@plt+0x8d44>
   19ad4:	cmp	sl, #2
   19ad8:	strne	r8, [sp, #80]	; 0x50
   19adc:	movne	r5, #0
   19ae0:	bne	19918 <__assert_fail@plt+0x8548>
   19ae4:	ldr	r3, [sp, #32]
   19ae8:	cmp	r3, #0
   19aec:	bne	1a100 <__assert_fail@plt+0x8d30>
   19af0:	ldr	r2, [sp, #76]	; 0x4c
   19af4:	adds	r3, r7, #0
   19af8:	movne	r3, #1
   19afc:	cmp	r2, #0
   19b00:	movne	r3, #0
   19b04:	cmp	r3, #0
   19b08:	movne	r3, #0
   19b0c:	bne	19b3c <__assert_fail@plt+0x876c>
   19b10:	cmp	r7, fp
   19b14:	ldrhi	r3, [sp, #36]	; 0x24
   19b18:	movhi	r2, #39	; 0x27
   19b1c:	strbhi	r2, [r3, fp]
   19b20:	add	r3, fp, #1
   19b24:	cmp	r7, r3
   19b28:	ldrhi	r2, [sp, #36]	; 0x24
   19b2c:	movhi	r1, #92	; 0x5c
   19b30:	strbhi	r1, [r2, r3]
   19b34:	mov	r3, r7
   19b38:	ldr	r7, [sp, #76]	; 0x4c
   19b3c:	add	r2, fp, #2
   19b40:	cmp	r2, r3
   19b44:	ldrcc	r1, [sp, #36]	; 0x24
   19b48:	movcc	r0, #39	; 0x27
   19b4c:	strbcc	r0, [r1, r2]
   19b50:	add	fp, fp, #3
   19b54:	ldr	r2, [sp, #32]
   19b58:	mov	r5, r2
   19b5c:	str	r8, [sp, #80]	; 0x50
   19b60:	str	r2, [sp, #44]	; 0x2c
   19b64:	str	r7, [sp, #76]	; 0x4c
   19b68:	mov	r7, r3
   19b6c:	b	19918 <__assert_fail@plt+0x8548>
   19b70:	ldr	r5, [sp, #84]	; 0x54
   19b74:	cmp	r5, #1
   19b78:	beq	19ba8 <__assert_fail@plt+0x87d8>
   19b7c:	mov	r3, #0
   19b80:	str	r3, [sp, #104]	; 0x68
   19b84:	str	r3, [sp, #108]	; 0x6c
   19b88:	ldr	r3, [sp, #28]
   19b8c:	cmn	r3, #1
   19b90:	beq	19bdc <__assert_fail@plt+0x880c>
   19b94:	mov	r3, #0
   19b98:	str	r4, [sp, #88]	; 0x58
   19b9c:	str	fp, [sp, #92]	; 0x5c
   19ba0:	mov	fp, r3
   19ba4:	b	19d04 <__assert_fail@plt+0x8934>
   19ba8:	bl	1125c <__ctype_b_loc@plt>
   19bac:	ldr	r2, [r0]
   19bb0:	lsl	r3, r4, #1
   19bb4:	ldrh	r8, [r2, r3]
   19bb8:	lsr	r8, r8, #14
   19bbc:	and	r8, r8, #1
   19bc0:	mov	r2, r5
   19bc4:	eor	r5, r8, #1
   19bc8:	ldr	r3, [sp, #48]	; 0x30
   19bcc:	and	r5, r5, r3
   19bd0:	ands	r5, r5, #255	; 0xff
   19bd4:	beq	19918 <__assert_fail@plt+0x8548>
   19bd8:	b	19d9c <__assert_fail@plt+0x89cc>
   19bdc:	ldr	r0, [sp, #52]	; 0x34
   19be0:	bl	11274 <strlen@plt>
   19be4:	str	r0, [sp, #28]
   19be8:	b	19b94 <__assert_fail@plt+0x87c4>
   19bec:	mov	r2, fp
   19bf0:	mov	r1, r4
   19bf4:	ldr	r4, [sp, #88]	; 0x58
   19bf8:	ldr	fp, [sp, #92]	; 0x5c
   19bfc:	ldr	r0, [sp, #28]
   19c00:	cmp	r0, r5
   19c04:	bls	19dd0 <__assert_fail@plt+0x8a00>
   19c08:	ldrb	r3, [r1]
   19c0c:	cmp	r3, #0
   19c10:	beq	19dd8 <__assert_fail@plt+0x8a08>
   19c14:	mov	r3, r1
   19c18:	add	r2, r2, #1
   19c1c:	add	r1, r6, r2
   19c20:	cmp	r0, r1
   19c24:	bls	19de0 <__assert_fail@plt+0x8a10>
   19c28:	ldrb	r1, [r3, #1]!
   19c2c:	cmp	r1, #0
   19c30:	bne	19c18 <__assert_fail@plt+0x8848>
   19c34:	mov	r8, #0
   19c38:	b	19d94 <__assert_fail@plt+0x89c4>
   19c3c:	cmp	r4, r5
   19c40:	beq	19ce0 <__assert_fail@plt+0x8910>
   19c44:	ldrb	r3, [r4, #1]!
   19c48:	sub	r3, r3, #91	; 0x5b
   19c4c:	cmp	r3, #33	; 0x21
   19c50:	ldrls	pc, [pc, r3, lsl #2]
   19c54:	b	19c3c <__assert_fail@plt+0x886c>
   19c58:	andeq	sl, r1, ip, lsl #2
   19c5c:	andeq	sl, r1, ip, lsl #2
   19c60:	andeq	r9, r1, ip, lsr ip
   19c64:	andeq	sl, r1, ip, lsl #2
   19c68:	andeq	r9, r1, ip, lsr ip
   19c6c:	andeq	sl, r1, ip, lsl #2
   19c70:	andeq	r9, r1, ip, lsr ip
   19c74:	andeq	r9, r1, ip, lsr ip
   19c78:	andeq	r9, r1, ip, lsr ip
   19c7c:	andeq	r9, r1, ip, lsr ip
   19c80:	andeq	r9, r1, ip, lsr ip
   19c84:	andeq	r9, r1, ip, lsr ip
   19c88:	andeq	r9, r1, ip, lsr ip
   19c8c:	andeq	r9, r1, ip, lsr ip
   19c90:	andeq	r9, r1, ip, lsr ip
   19c94:	andeq	r9, r1, ip, lsr ip
   19c98:	andeq	r9, r1, ip, lsr ip
   19c9c:	andeq	r9, r1, ip, lsr ip
   19ca0:	andeq	r9, r1, ip, lsr ip
   19ca4:	andeq	r9, r1, ip, lsr ip
   19ca8:	andeq	r9, r1, ip, lsr ip
   19cac:	andeq	r9, r1, ip, lsr ip
   19cb0:	andeq	r9, r1, ip, lsr ip
   19cb4:	andeq	r9, r1, ip, lsr ip
   19cb8:	andeq	r9, r1, ip, lsr ip
   19cbc:	andeq	r9, r1, ip, lsr ip
   19cc0:	andeq	r9, r1, ip, lsr ip
   19cc4:	andeq	r9, r1, ip, lsr ip
   19cc8:	andeq	r9, r1, ip, lsr ip
   19ccc:	andeq	r9, r1, ip, lsr ip
   19cd0:	andeq	r9, r1, ip, lsr ip
   19cd4:	andeq	r9, r1, ip, lsr ip
   19cd8:	andeq	r9, r1, ip, lsr ip
   19cdc:	andeq	sl, r1, ip, lsl #2
   19ce0:	ldr	r0, [sp, #100]	; 0x64
   19ce4:	bl	1116c <iswprint@plt>
   19ce8:	cmp	r0, #0
   19cec:	moveq	r8, #0
   19cf0:	add	fp, fp, r9
   19cf4:	add	r0, sp, #104	; 0x68
   19cf8:	bl	11100 <mbsinit@plt>
   19cfc:	cmp	r0, #0
   19d00:	bne	19d74 <__assert_fail@plt+0x89a4>
   19d04:	add	r5, r6, fp
   19d08:	ldr	r3, [sp, #52]	; 0x34
   19d0c:	add	r4, r3, r5
   19d10:	add	r3, sp, #104	; 0x68
   19d14:	ldr	r2, [sp, #28]
   19d18:	sub	r2, r2, r5
   19d1c:	mov	r1, r4
   19d20:	add	r0, sp, #100	; 0x64
   19d24:	bl	1bd64 <__assert_fail@plt+0xa994>
   19d28:	subs	r9, r0, #0
   19d2c:	beq	19de8 <__assert_fail@plt+0x8a18>
   19d30:	cmn	r9, #1
   19d34:	beq	19d84 <__assert_fail@plt+0x89b4>
   19d38:	cmn	r9, #2
   19d3c:	beq	19bec <__assert_fail@plt+0x881c>
   19d40:	ldr	r3, [sp, #32]
   19d44:	cmp	sl, #2
   19d48:	movne	r3, #0
   19d4c:	andeq	r3, r3, #1
   19d50:	cmp	r3, #0
   19d54:	beq	19ce0 <__assert_fail@plt+0x8910>
   19d58:	cmp	r9, #1
   19d5c:	bls	19ce0 <__assert_fail@plt+0x8910>
   19d60:	sub	r3, r9, #1
   19d64:	add	r5, r3, r5
   19d68:	ldr	r3, [sp, #52]	; 0x34
   19d6c:	add	r5, r3, r5
   19d70:	b	19c44 <__assert_fail@plt+0x8874>
   19d74:	ldr	r4, [sp, #88]	; 0x58
   19d78:	mov	r2, fp
   19d7c:	ldr	fp, [sp, #92]	; 0x5c
   19d80:	b	19d94 <__assert_fail@plt+0x89c4>
   19d84:	ldr	r4, [sp, #88]	; 0x58
   19d88:	mov	r2, fp
   19d8c:	ldr	fp, [sp, #92]	; 0x5c
   19d90:	mov	r8, #0
   19d94:	cmp	r2, #1
   19d98:	bls	19bc4 <__assert_fail@plt+0x87f4>
   19d9c:	add	r1, r6, r2
   19da0:	ldr	ip, [sp, #64]	; 0x40
   19da4:	mov	r5, #0
   19da8:	eor	r3, r8, #1
   19dac:	ldr	r2, [sp, #48]	; 0x30
   19db0:	and	r3, r3, r2
   19db4:	uxtb	r3, r3
   19db8:	ldr	r9, [sp, #32]
   19dbc:	ldr	lr, [sp, #44]	; 0x2c
   19dc0:	ldr	r2, [sp, #56]	; 0x38
   19dc4:	str	r8, [sp, #56]	; 0x38
   19dc8:	ldr	r0, [sp, #36]	; 0x24
   19dcc:	b	19e68 <__assert_fail@plt+0x8a98>
   19dd0:	mov	r8, #0
   19dd4:	b	19d94 <__assert_fail@plt+0x89c4>
   19dd8:	mov	r8, #0
   19ddc:	b	19d94 <__assert_fail@plt+0x89c4>
   19de0:	mov	r8, #0
   19de4:	b	19d94 <__assert_fail@plt+0x89c4>
   19de8:	ldr	r4, [sp, #88]	; 0x58
   19dec:	mov	r2, fp
   19df0:	ldr	fp, [sp, #92]	; 0x5c
   19df4:	b	19d94 <__assert_fail@plt+0x89c4>
   19df8:	cmp	r2, #0
   19dfc:	beq	19e10 <__assert_fail@plt+0x8a40>
   19e00:	cmp	r7, fp
   19e04:	movhi	r2, #92	; 0x5c
   19e08:	strbhi	r2, [r0, fp]
   19e0c:	add	fp, fp, #1
   19e10:	add	r8, r6, #1
   19e14:	cmp	r1, r8
   19e18:	bls	19f20 <__assert_fail@plt+0x8b50>
   19e1c:	eor	r2, r5, #1
   19e20:	and	r2, r2, lr
   19e24:	ands	r2, r2, #255	; 0xff
   19e28:	beq	19f3c <__assert_fail@plt+0x8b6c>
   19e2c:	cmp	r7, fp
   19e30:	movhi	r2, #39	; 0x27
   19e34:	strbhi	r2, [r0, fp]
   19e38:	add	r2, fp, #1
   19e3c:	cmp	r7, r2
   19e40:	movhi	lr, #39	; 0x27
   19e44:	strbhi	lr, [r0, r2]
   19e48:	add	fp, fp, #2
   19e4c:	mov	r6, r8
   19e50:	mov	r2, r3
   19e54:	mov	lr, r3
   19e58:	cmp	r7, fp
   19e5c:	strbhi	r4, [r0, fp]
   19e60:	add	fp, fp, #1
   19e64:	ldrb	r4, [ip, #1]!
   19e68:	cmp	r3, #0
   19e6c:	beq	19df8 <__assert_fail@plt+0x8a28>
   19e70:	cmp	r9, #0
   19e74:	bne	1a178 <__assert_fail@plt+0x8da8>
   19e78:	eor	r5, lr, #1
   19e7c:	cmp	sl, #2
   19e80:	movne	r5, #0
   19e84:	andeq	r5, r5, #1
   19e88:	cmp	r5, #0
   19e8c:	beq	19ec4 <__assert_fail@plt+0x8af4>
   19e90:	cmp	r7, fp
   19e94:	movhi	lr, #39	; 0x27
   19e98:	strbhi	lr, [r0, fp]
   19e9c:	add	lr, fp, #1
   19ea0:	cmp	r7, lr
   19ea4:	movhi	r8, #36	; 0x24
   19ea8:	strbhi	r8, [r0, lr]
   19eac:	add	lr, fp, #2
   19eb0:	cmp	r7, lr
   19eb4:	movhi	r8, #39	; 0x27
   19eb8:	strbhi	r8, [r0, lr]
   19ebc:	add	fp, fp, #3
   19ec0:	mov	lr, r5
   19ec4:	cmp	r7, fp
   19ec8:	movhi	r5, #92	; 0x5c
   19ecc:	strbhi	r5, [r0, fp]
   19ed0:	add	r5, fp, #1
   19ed4:	cmp	r7, r5
   19ed8:	lsrhi	r8, r4, #6
   19edc:	addhi	r8, r8, #48	; 0x30
   19ee0:	strbhi	r8, [r0, r5]
   19ee4:	add	r8, fp, #2
   19ee8:	cmp	r7, r8
   19eec:	lsrhi	r5, r4, #3
   19ef0:	andhi	r5, r5, #7
   19ef4:	addhi	r5, r5, #48	; 0x30
   19ef8:	strbhi	r5, [r0, r8]
   19efc:	add	fp, fp, #3
   19f00:	and	r4, r4, #7
   19f04:	add	r4, r4, #48	; 0x30
   19f08:	add	r5, r6, #1
   19f0c:	cmp	r1, r5
   19f10:	bls	19f2c <__assert_fail@plt+0x8b5c>
   19f14:	mov	r6, r5
   19f18:	mov	r5, r3
   19f1c:	b	19e58 <__assert_fail@plt+0x8a88>
   19f20:	str	lr, [sp, #44]	; 0x2c
   19f24:	ldr	r8, [sp, #56]	; 0x38
   19f28:	b	197fc <__assert_fail@plt+0x842c>
   19f2c:	str	lr, [sp, #44]	; 0x2c
   19f30:	ldr	r8, [sp, #56]	; 0x38
   19f34:	mov	r5, r3
   19f38:	b	197fc <__assert_fail@plt+0x842c>
   19f3c:	mov	r6, r8
   19f40:	b	19e58 <__assert_fail@plt+0x8a88>
   19f44:	mov	r5, #0
   19f48:	b	19918 <__assert_fail@plt+0x8548>
   19f4c:	mov	r8, r5
   19f50:	ldr	r5, [sp, #48]	; 0x30
   19f54:	mov	r4, #48	; 0x30
   19f58:	b	19918 <__assert_fail@plt+0x8548>
   19f5c:	ldr	r8, [sp, #32]
   19f60:	mov	r4, #48	; 0x30
   19f64:	b	19918 <__assert_fail@plt+0x8548>
   19f68:	ldr	r8, [sp, #32]
   19f6c:	mov	r4, #48	; 0x30
   19f70:	b	19918 <__assert_fail@plt+0x8548>
   19f74:	mov	r8, #0
   19f78:	mov	r5, r8
   19f7c:	b	19918 <__assert_fail@plt+0x8548>
   19f80:	mov	r8, #0
   19f84:	mov	r5, r8
   19f88:	b	19918 <__assert_fail@plt+0x8548>
   19f8c:	mov	r8, #0
   19f90:	mov	r5, r8
   19f94:	b	19918 <__assert_fail@plt+0x8548>
   19f98:	mov	r8, #0
   19f9c:	mov	r5, r8
   19fa0:	b	19918 <__assert_fail@plt+0x8548>
   19fa4:	ldr	r3, [sp, #52]	; 0x34
   19fa8:	ldrb	r8, [r3, r6]
   19fac:	adds	r8, r8, #0
   19fb0:	movne	r8, #1
   19fb4:	b	19a28 <__assert_fail@plt+0x8658>
   19fb8:	cmp	sl, #2
   19fbc:	movne	r3, #0
   19fc0:	moveq	r3, #1
   19fc4:	ldr	r1, [sp, #32]
   19fc8:	mov	r2, r1
   19fcc:	and	r2, r2, r3
   19fd0:	cmp	fp, #0
   19fd4:	movne	r2, #0
   19fd8:	andeq	r2, r2, #1
   19fdc:	cmp	r2, #0
   19fe0:	bne	1a190 <__assert_fail@plt+0x8dc0>
   19fe4:	eor	r2, r1, #1
   19fe8:	and	r3, r3, r2
   19fec:	ldr	r1, [sp, #80]	; 0x50
   19ff0:	tst	r1, r3
   19ff4:	beq	1a06c <__assert_fail@plt+0x8c9c>
   19ff8:	ldr	r3, [sp, #40]	; 0x28
   19ffc:	cmp	r3, #0
   1a000:	bne	1a028 <__assert_fail@plt+0x8c58>
   1a004:	ldr	r1, [sp, #76]	; 0x4c
   1a008:	clz	r3, r7
   1a00c:	lsr	r3, r3, #5
   1a010:	cmp	r1, #0
   1a014:	moveq	r3, #0
   1a018:	cmp	r3, #0
   1a01c:	beq	1a06c <__assert_fail@plt+0x8c9c>
   1a020:	ldr	r7, [sp, #76]	; 0x4c
   1a024:	b	190bc <__assert_fail@plt+0x7cec>
   1a028:	ldr	r3, [sp, #168]	; 0xa8
   1a02c:	str	r3, [sp, #16]
   1a030:	ldr	r3, [sp, #164]	; 0xa4
   1a034:	str	r3, [sp, #12]
   1a038:	ldr	r3, [sp, #160]	; 0xa0
   1a03c:	str	r3, [sp, #8]
   1a040:	ldr	r3, [sp, #156]	; 0x9c
   1a044:	str	r3, [sp, #4]
   1a048:	mov	r3, #5
   1a04c:	str	r3, [sp]
   1a050:	ldr	r3, [sp, #28]
   1a054:	ldr	r2, [sp, #52]	; 0x34
   1a058:	ldr	r1, [sp, #76]	; 0x4c
   1a05c:	ldr	r0, [sp, #36]	; 0x24
   1a060:	bl	1905c <__assert_fail@plt+0x7c8c>
   1a064:	mov	fp, r0
   1a068:	b	1a16c <__assert_fail@plt+0x8d9c>
   1a06c:	mov	sl, r7
   1a070:	ldr	r3, [sp, #72]	; 0x48
   1a074:	cmp	r3, #0
   1a078:	moveq	r2, #0
   1a07c:	andne	r2, r2, #1
   1a080:	cmp	r2, #0
   1a084:	beq	1a0b4 <__assert_fail@plt+0x8ce4>
   1a088:	mov	r2, r3
   1a08c:	ldrb	r3, [r3]
   1a090:	cmp	r3, #0
   1a094:	beq	1a0b4 <__assert_fail@plt+0x8ce4>
   1a098:	ldr	r1, [sp, #36]	; 0x24
   1a09c:	cmp	sl, fp
   1a0a0:	strbhi	r3, [r1, fp]
   1a0a4:	add	fp, fp, #1
   1a0a8:	ldrb	r3, [r2, #1]!
   1a0ac:	cmp	r3, #0
   1a0b0:	bne	1a09c <__assert_fail@plt+0x8ccc>
   1a0b4:	cmp	sl, fp
   1a0b8:	movhi	r3, #0
   1a0bc:	ldrhi	r2, [sp, #36]	; 0x24
   1a0c0:	strbhi	r3, [r2, fp]
   1a0c4:	b	1a16c <__assert_fail@plt+0x8d9c>
   1a0c8:	mov	r8, sl
   1a0cc:	mov	sl, r7
   1a0d0:	ldr	r3, [sp, #32]
   1a0d4:	str	r3, [sp, #48]	; 0x30
   1a0d8:	b	1a114 <__assert_fail@plt+0x8d44>
   1a0dc:	mov	r8, sl
   1a0e0:	mov	sl, r7
   1a0e4:	b	1a114 <__assert_fail@plt+0x8d44>
   1a0e8:	mov	r8, sl
   1a0ec:	mov	sl, r7
   1a0f0:	b	1a114 <__assert_fail@plt+0x8d44>
   1a0f4:	andeq	r0, r2, r0, lsl #11
   1a0f8:	muleq	r2, r0, r5
   1a0fc:	andeq	r0, r2, r4, lsl #11
   1a100:	mov	r8, sl
   1a104:	mov	sl, r7
   1a108:	b	1a114 <__assert_fail@plt+0x8d44>
   1a10c:	mov	r8, sl
   1a110:	mov	sl, r7
   1a114:	ldr	r3, [sp, #48]	; 0x30
   1a118:	cmp	r8, #2
   1a11c:	movne	r3, #0
   1a120:	andeq	r3, r3, #1
   1a124:	cmp	r3, #0
   1a128:	movne	r8, #4
   1a12c:	ldr	r3, [sp, #168]	; 0xa8
   1a130:	str	r3, [sp, #16]
   1a134:	ldr	r3, [sp, #164]	; 0xa4
   1a138:	str	r3, [sp, #12]
   1a13c:	mov	r3, #0
   1a140:	str	r3, [sp, #8]
   1a144:	ldr	r3, [sp, #156]	; 0x9c
   1a148:	bic	r3, r3, #2
   1a14c:	str	r3, [sp, #4]
   1a150:	str	r8, [sp]
   1a154:	ldr	r3, [sp, #28]
   1a158:	ldr	r2, [sp, #52]	; 0x34
   1a15c:	mov	r1, sl
   1a160:	ldr	r0, [sp, #36]	; 0x24
   1a164:	bl	1905c <__assert_fail@plt+0x7c8c>
   1a168:	mov	fp, r0
   1a16c:	mov	r0, fp
   1a170:	add	sp, sp, #116	; 0x74
   1a174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a178:	mov	r8, sl
   1a17c:	mov	sl, r7
   1a180:	b	1a114 <__assert_fail@plt+0x8d44>
   1a184:	mov	r8, sl
   1a188:	mov	sl, r7
   1a18c:	b	1a114 <__assert_fail@plt+0x8d44>
   1a190:	mov	r8, sl
   1a194:	mov	sl, r7
   1a198:	b	1a114 <__assert_fail@plt+0x8d44>
   1a19c:	mov	r8, sl
   1a1a0:	mov	sl, r7
   1a1a4:	b	1a12c <__assert_fail@plt+0x8d5c>
   1a1a8:	mov	r3, #1
   1a1ac:	str	r3, [sp, #32]
   1a1b0:	str	r3, [sp, #48]	; 0x30
   1a1b4:	str	r3, [sp, #60]	; 0x3c
   1a1b8:	ldr	r3, [pc, #-196]	; 1a0fc <__assert_fail@plt+0x8d2c>
   1a1bc:	str	r3, [sp, #72]	; 0x48
   1a1c0:	mov	fp, #0
   1a1c4:	mov	sl, #5
   1a1c8:	b	19118 <__assert_fail@plt+0x7d48>
   1a1cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1d0:	sub	sp, sp, #52	; 0x34
   1a1d4:	mov	r5, r0
   1a1d8:	str	r1, [sp, #24]
   1a1dc:	str	r2, [sp, #28]
   1a1e0:	mov	r4, r3
   1a1e4:	bl	11298 <__errno_location@plt>
   1a1e8:	str	r0, [sp, #32]
   1a1ec:	ldr	r3, [r0]
   1a1f0:	str	r3, [sp, #36]	; 0x24
   1a1f4:	ldr	r3, [pc, #396]	; 1a388 <__assert_fail@plt+0x8fb8>
   1a1f8:	ldr	r6, [r3]
   1a1fc:	cmn	r5, #-2147483647	; 0x80000001
   1a200:	movne	r3, #0
   1a204:	moveq	r3, #1
   1a208:	orrs	r3, r3, r5, lsr #31
   1a20c:	bne	1a34c <__assert_fail@plt+0x8f7c>
   1a210:	ldr	r3, [pc, #368]	; 1a388 <__assert_fail@plt+0x8fb8>
   1a214:	ldr	r2, [r3, #4]
   1a218:	cmp	r5, r2
   1a21c:	blt	1a284 <__assert_fail@plt+0x8eb4>
   1a220:	str	r2, [sp, #44]	; 0x2c
   1a224:	add	r3, r3, #8
   1a228:	cmp	r6, r3
   1a22c:	beq	1a350 <__assert_fail@plt+0x8f80>
   1a230:	sub	r2, r5, r2
   1a234:	mov	r3, #8
   1a238:	str	r3, [sp]
   1a23c:	mvn	r3, #-2147483648	; 0x80000000
   1a240:	add	r2, r2, #1
   1a244:	add	r1, sp, #44	; 0x2c
   1a248:	mov	r0, r6
   1a24c:	bl	1b5a4 <__assert_fail@plt+0xa1d4>
   1a250:	mov	r6, r0
   1a254:	ldr	r3, [pc, #300]	; 1a388 <__assert_fail@plt+0x8fb8>
   1a258:	str	r0, [r3]
   1a25c:	ldr	r7, [pc, #292]	; 1a388 <__assert_fail@plt+0x8fb8>
   1a260:	ldr	r0, [r7, #4]
   1a264:	ldr	r2, [sp, #44]	; 0x2c
   1a268:	sub	r2, r2, r0
   1a26c:	lsl	r2, r2, #3
   1a270:	mov	r1, #0
   1a274:	add	r0, r6, r0, lsl #3
   1a278:	bl	112c8 <memset@plt>
   1a27c:	ldr	r3, [sp, #44]	; 0x2c
   1a280:	str	r3, [r7, #4]
   1a284:	add	fp, r6, r5, lsl #3
   1a288:	ldr	r8, [r6, r5, lsl #3]
   1a28c:	ldr	r7, [fp, #4]
   1a290:	ldr	r9, [r4, #4]
   1a294:	orr	r9, r9, #1
   1a298:	add	sl, r4, #8
   1a29c:	ldr	r3, [r4, #44]	; 0x2c
   1a2a0:	str	r3, [sp, #16]
   1a2a4:	ldr	r3, [r4, #40]	; 0x28
   1a2a8:	str	r3, [sp, #12]
   1a2ac:	str	sl, [sp, #8]
   1a2b0:	str	r9, [sp, #4]
   1a2b4:	ldr	r3, [r4]
   1a2b8:	str	r3, [sp]
   1a2bc:	ldr	r3, [sp, #28]
   1a2c0:	ldr	r2, [sp, #24]
   1a2c4:	mov	r1, r8
   1a2c8:	mov	r0, r7
   1a2cc:	bl	1905c <__assert_fail@plt+0x7c8c>
   1a2d0:	cmp	r8, r0
   1a2d4:	bhi	1a334 <__assert_fail@plt+0x8f64>
   1a2d8:	add	r8, r0, #1
   1a2dc:	str	r8, [r6, r5, lsl #3]
   1a2e0:	ldr	r3, [pc, #164]	; 1a38c <__assert_fail@plt+0x8fbc>
   1a2e4:	cmp	r7, r3
   1a2e8:	beq	1a2f4 <__assert_fail@plt+0x8f24>
   1a2ec:	mov	r0, r7
   1a2f0:	bl	1bc30 <__assert_fail@plt+0xa860>
   1a2f4:	mov	r0, r8
   1a2f8:	bl	1b420 <__assert_fail@plt+0xa050>
   1a2fc:	mov	r7, r0
   1a300:	str	r0, [fp, #4]
   1a304:	ldr	r3, [r4, #44]	; 0x2c
   1a308:	str	r3, [sp, #16]
   1a30c:	ldr	r3, [r4, #40]	; 0x28
   1a310:	str	r3, [sp, #12]
   1a314:	str	sl, [sp, #8]
   1a318:	str	r9, [sp, #4]
   1a31c:	ldr	r3, [r4]
   1a320:	str	r3, [sp]
   1a324:	ldr	r3, [sp, #28]
   1a328:	ldr	r2, [sp, #24]
   1a32c:	mov	r1, r8
   1a330:	bl	1905c <__assert_fail@plt+0x7c8c>
   1a334:	ldr	r3, [sp, #32]
   1a338:	ldr	r2, [sp, #36]	; 0x24
   1a33c:	str	r2, [r3]
   1a340:	mov	r0, r7
   1a344:	add	sp, sp, #52	; 0x34
   1a348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a34c:	bl	113a0 <abort@plt>
   1a350:	sub	r2, r5, r2
   1a354:	mov	r3, #8
   1a358:	str	r3, [sp]
   1a35c:	mvn	r3, #-2147483648	; 0x80000000
   1a360:	add	r2, r2, #1
   1a364:	add	r1, sp, #44	; 0x2c
   1a368:	mov	r0, #0
   1a36c:	bl	1b5a4 <__assert_fail@plt+0xa1d4>
   1a370:	mov	r6, r0
   1a374:	ldr	r3, [pc, #12]	; 1a388 <__assert_fail@plt+0x8fb8>
   1a378:	str	r0, [r3], #8
   1a37c:	ldm	r3, {r0, r1}
   1a380:	stm	r6, {r0, r1}
   1a384:	b	1a25c <__assert_fail@plt+0x8e8c>
   1a388:	andeq	r1, r3, ip, asr #2
   1a38c:	ldrdeq	r1, [r3], -ip
   1a390:	push	{r4, r5, r6, lr}
   1a394:	mov	r4, r0
   1a398:	bl	11298 <__errno_location@plt>
   1a39c:	mov	r5, r0
   1a3a0:	ldr	r6, [r0]
   1a3a4:	cmp	r4, #0
   1a3a8:	ldr	r3, [pc, #20]	; 1a3c4 <__assert_fail@plt+0x8ff4>
   1a3ac:	moveq	r4, r3
   1a3b0:	mov	r1, #48	; 0x30
   1a3b4:	mov	r0, r4
   1a3b8:	bl	1b90c <__assert_fail@plt+0xa53c>
   1a3bc:	str	r6, [r5]
   1a3c0:	pop	{r4, r5, r6, pc}
   1a3c4:	ldrdeq	r1, [r3], -ip
   1a3c8:	subs	r3, r0, #0
   1a3cc:	ldr	r2, [pc, #8]	; 1a3dc <__assert_fail@plt+0x900c>
   1a3d0:	moveq	r3, r2
   1a3d4:	ldr	r0, [r3]
   1a3d8:	bx	lr
   1a3dc:	ldrdeq	r1, [r3], -ip
   1a3e0:	subs	r3, r0, #0
   1a3e4:	ldr	r2, [pc, #8]	; 1a3f4 <__assert_fail@plt+0x9024>
   1a3e8:	moveq	r3, r2
   1a3ec:	str	r1, [r3]
   1a3f0:	bx	lr
   1a3f4:	ldrdeq	r1, [r3], -ip
   1a3f8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a3fc:	subs	r3, r0, #0
   1a400:	ldr	r0, [pc, #44]	; 1a434 <__assert_fail@plt+0x9064>
   1a404:	moveq	r3, r0
   1a408:	add	r3, r3, #8
   1a40c:	lsr	lr, r1, #5
   1a410:	and	r1, r1, #31
   1a414:	ldr	ip, [r3, lr, lsl #2]
   1a418:	lsr	r0, ip, r1
   1a41c:	eor	r2, r2, r0
   1a420:	and	r2, r2, #1
   1a424:	eor	r1, ip, r2, lsl r1
   1a428:	str	r1, [r3, lr, lsl #2]
   1a42c:	and	r0, r0, #1
   1a430:	pop	{pc}		; (ldr pc, [sp], #4)
   1a434:	ldrdeq	r1, [r3], -ip
   1a438:	subs	r3, r0, #0
   1a43c:	ldr	r2, [pc, #12]	; 1a450 <__assert_fail@plt+0x9080>
   1a440:	moveq	r3, r2
   1a444:	ldr	r0, [r3, #4]
   1a448:	str	r1, [r3, #4]
   1a44c:	bx	lr
   1a450:	ldrdeq	r1, [r3], -ip
   1a454:	subs	r3, r0, #0
   1a458:	ldr	r0, [pc, #40]	; 1a488 <__assert_fail@plt+0x90b8>
   1a45c:	moveq	r3, r0
   1a460:	mov	r0, #10
   1a464:	str	r0, [r3]
   1a468:	cmp	r2, #0
   1a46c:	cmpne	r1, #0
   1a470:	beq	1a480 <__assert_fail@plt+0x90b0>
   1a474:	str	r1, [r3, #40]	; 0x28
   1a478:	str	r2, [r3, #44]	; 0x2c
   1a47c:	bx	lr
   1a480:	push	{r4, lr}
   1a484:	bl	113a0 <abort@plt>
   1a488:	ldrdeq	r1, [r3], -ip
   1a48c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a490:	sub	sp, sp, #24
   1a494:	mov	r7, r0
   1a498:	mov	r8, r1
   1a49c:	mov	r9, r2
   1a4a0:	mov	sl, r3
   1a4a4:	ldr	r4, [sp, #56]	; 0x38
   1a4a8:	cmp	r4, #0
   1a4ac:	ldr	r3, [pc, #84]	; 1a508 <__assert_fail@plt+0x9138>
   1a4b0:	moveq	r4, r3
   1a4b4:	bl	11298 <__errno_location@plt>
   1a4b8:	mov	r5, r0
   1a4bc:	ldr	r6, [r0]
   1a4c0:	ldr	r3, [r4, #44]	; 0x2c
   1a4c4:	str	r3, [sp, #16]
   1a4c8:	ldr	r3, [r4, #40]	; 0x28
   1a4cc:	str	r3, [sp, #12]
   1a4d0:	add	r3, r4, #8
   1a4d4:	str	r3, [sp, #8]
   1a4d8:	ldr	r3, [r4, #4]
   1a4dc:	str	r3, [sp, #4]
   1a4e0:	ldr	r3, [r4]
   1a4e4:	str	r3, [sp]
   1a4e8:	mov	r3, sl
   1a4ec:	mov	r2, r9
   1a4f0:	mov	r1, r8
   1a4f4:	mov	r0, r7
   1a4f8:	bl	1905c <__assert_fail@plt+0x7c8c>
   1a4fc:	str	r6, [r5]
   1a500:	add	sp, sp, #24
   1a504:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a508:	ldrdeq	r1, [r3], -ip
   1a50c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a510:	sub	sp, sp, #44	; 0x2c
   1a514:	str	r0, [sp, #28]
   1a518:	str	r1, [sp, #32]
   1a51c:	mov	r6, r2
   1a520:	subs	r4, r3, #0
   1a524:	ldr	r3, [pc, #172]	; 1a5d8 <__assert_fail@plt+0x9208>
   1a528:	moveq	r4, r3
   1a52c:	bl	11298 <__errno_location@plt>
   1a530:	mov	r7, r0
   1a534:	ldr	fp, [r0]
   1a538:	ldr	r5, [r4, #4]
   1a53c:	cmp	r6, #0
   1a540:	orreq	r5, r5, #1
   1a544:	add	r9, r4, #8
   1a548:	ldr	r3, [r4, #44]	; 0x2c
   1a54c:	str	r3, [sp, #16]
   1a550:	ldr	r3, [r4, #40]	; 0x28
   1a554:	str	r3, [sp, #12]
   1a558:	str	r9, [sp, #8]
   1a55c:	str	r5, [sp, #4]
   1a560:	ldr	r3, [r4]
   1a564:	str	r3, [sp]
   1a568:	ldr	r3, [sp, #32]
   1a56c:	ldr	r2, [sp, #28]
   1a570:	mov	r1, #0
   1a574:	mov	r0, r1
   1a578:	bl	1905c <__assert_fail@plt+0x7c8c>
   1a57c:	mov	sl, r0
   1a580:	add	r8, r0, #1
   1a584:	mov	r0, r8
   1a588:	bl	1b420 <__assert_fail@plt+0xa050>
   1a58c:	str	r0, [sp, #36]	; 0x24
   1a590:	ldr	r3, [r4, #44]	; 0x2c
   1a594:	str	r3, [sp, #16]
   1a598:	ldr	r3, [r4, #40]	; 0x28
   1a59c:	str	r3, [sp, #12]
   1a5a0:	str	r9, [sp, #8]
   1a5a4:	str	r5, [sp, #4]
   1a5a8:	ldr	r3, [r4]
   1a5ac:	str	r3, [sp]
   1a5b0:	ldr	r3, [sp, #32]
   1a5b4:	ldr	r2, [sp, #28]
   1a5b8:	mov	r1, r8
   1a5bc:	bl	1905c <__assert_fail@plt+0x7c8c>
   1a5c0:	str	fp, [r7]
   1a5c4:	cmp	r6, #0
   1a5c8:	strne	sl, [r6]
   1a5cc:	ldr	r0, [sp, #36]	; 0x24
   1a5d0:	add	sp, sp, #44	; 0x2c
   1a5d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5d8:	ldrdeq	r1, [r3], -ip
   1a5dc:	push	{r4, lr}
   1a5e0:	mov	r3, r2
   1a5e4:	mov	r2, #0
   1a5e8:	bl	1a50c <__assert_fail@plt+0x913c>
   1a5ec:	pop	{r4, pc}
   1a5f0:	push	{r4, r5, r6, r7, r8, lr}
   1a5f4:	ldr	r3, [pc, #140]	; 1a688 <__assert_fail@plt+0x92b8>
   1a5f8:	ldr	r7, [r3]
   1a5fc:	ldr	r3, [r3, #4]
   1a600:	cmp	r3, #1
   1a604:	ble	1a630 <__assert_fail@plt+0x9260>
   1a608:	mov	r5, r7
   1a60c:	mov	r4, #1
   1a610:	ldr	r6, [pc, #112]	; 1a688 <__assert_fail@plt+0x92b8>
   1a614:	ldr	r0, [r5, #12]
   1a618:	bl	1bc30 <__assert_fail@plt+0xa860>
   1a61c:	add	r4, r4, #1
   1a620:	add	r5, r5, #8
   1a624:	ldr	r3, [r6, #4]
   1a628:	cmp	r3, r4
   1a62c:	bgt	1a614 <__assert_fail@plt+0x9244>
   1a630:	ldr	r0, [r7, #4]
   1a634:	ldr	r3, [pc, #80]	; 1a68c <__assert_fail@plt+0x92bc>
   1a638:	cmp	r0, r3
   1a63c:	beq	1a658 <__assert_fail@plt+0x9288>
   1a640:	bl	1bc30 <__assert_fail@plt+0xa860>
   1a644:	ldr	r3, [pc, #60]	; 1a688 <__assert_fail@plt+0x92b8>
   1a648:	mov	r2, #256	; 0x100
   1a64c:	str	r2, [r3, #8]
   1a650:	ldr	r2, [pc, #52]	; 1a68c <__assert_fail@plt+0x92bc>
   1a654:	str	r2, [r3, #12]
   1a658:	ldr	r3, [pc, #48]	; 1a690 <__assert_fail@plt+0x92c0>
   1a65c:	cmp	r7, r3
   1a660:	beq	1a678 <__assert_fail@plt+0x92a8>
   1a664:	mov	r0, r7
   1a668:	bl	1bc30 <__assert_fail@plt+0xa860>
   1a66c:	ldr	r3, [pc, #20]	; 1a688 <__assert_fail@plt+0x92b8>
   1a670:	add	r2, r3, #8
   1a674:	str	r2, [r3]
   1a678:	mov	r2, #1
   1a67c:	ldr	r3, [pc, #4]	; 1a688 <__assert_fail@plt+0x92b8>
   1a680:	str	r2, [r3, #4]
   1a684:	pop	{r4, r5, r6, r7, r8, pc}
   1a688:	andeq	r1, r3, ip, asr #2
   1a68c:	ldrdeq	r1, [r3], -ip
   1a690:	andeq	r1, r3, r4, asr r1
   1a694:	push	{r4, lr}
   1a698:	ldr	r3, [pc, #8]	; 1a6a8 <__assert_fail@plt+0x92d8>
   1a69c:	mvn	r2, #0
   1a6a0:	bl	1a1cc <__assert_fail@plt+0x8dfc>
   1a6a4:	pop	{r4, pc}
   1a6a8:	ldrdeq	r1, [r3], -ip
   1a6ac:	push	{r4, lr}
   1a6b0:	ldr	r3, [pc, #4]	; 1a6bc <__assert_fail@plt+0x92ec>
   1a6b4:	bl	1a1cc <__assert_fail@plt+0x8dfc>
   1a6b8:	pop	{r4, pc}
   1a6bc:	ldrdeq	r1, [r3], -ip
   1a6c0:	push	{r4, lr}
   1a6c4:	mov	r1, r0
   1a6c8:	mov	r0, #0
   1a6cc:	bl	1a694 <__assert_fail@plt+0x92c4>
   1a6d0:	pop	{r4, pc}
   1a6d4:	push	{r4, lr}
   1a6d8:	mov	r2, r1
   1a6dc:	mov	r1, r0
   1a6e0:	mov	r0, #0
   1a6e4:	bl	1a6ac <__assert_fail@plt+0x92dc>
   1a6e8:	pop	{r4, pc}
   1a6ec:	push	{r4, r5, lr}
   1a6f0:	sub	sp, sp, #52	; 0x34
   1a6f4:	mov	r4, r0
   1a6f8:	mov	r5, r2
   1a6fc:	mov	r0, sp
   1a700:	bl	18ef4 <__assert_fail@plt+0x7b24>
   1a704:	mov	r3, sp
   1a708:	mvn	r2, #0
   1a70c:	mov	r1, r5
   1a710:	mov	r0, r4
   1a714:	bl	1a1cc <__assert_fail@plt+0x8dfc>
   1a718:	add	sp, sp, #52	; 0x34
   1a71c:	pop	{r4, r5, pc}
   1a720:	push	{r4, r5, r6, lr}
   1a724:	sub	sp, sp, #48	; 0x30
   1a728:	mov	r4, r0
   1a72c:	mov	r5, r2
   1a730:	mov	r6, r3
   1a734:	mov	r0, sp
   1a738:	bl	18ef4 <__assert_fail@plt+0x7b24>
   1a73c:	mov	r3, sp
   1a740:	mov	r2, r6
   1a744:	mov	r1, r5
   1a748:	mov	r0, r4
   1a74c:	bl	1a1cc <__assert_fail@plt+0x8dfc>
   1a750:	add	sp, sp, #48	; 0x30
   1a754:	pop	{r4, r5, r6, pc}
   1a758:	push	{r4, lr}
   1a75c:	mov	r2, r1
   1a760:	mov	r1, r0
   1a764:	mov	r0, #0
   1a768:	bl	1a6ec <__assert_fail@plt+0x931c>
   1a76c:	pop	{r4, pc}
   1a770:	push	{r4, lr}
   1a774:	mov	r3, r2
   1a778:	mov	r2, r1
   1a77c:	mov	r1, r0
   1a780:	mov	r0, #0
   1a784:	bl	1a720 <__assert_fail@plt+0x9350>
   1a788:	pop	{r4, pc}
   1a78c:	push	{r4, r5, r6, lr}
   1a790:	sub	sp, sp, #48	; 0x30
   1a794:	mov	r4, r0
   1a798:	mov	r5, r1
   1a79c:	mov	r6, r2
   1a7a0:	mov	ip, sp
   1a7a4:	ldr	lr, [pc, #64]	; 1a7ec <__assert_fail@plt+0x941c>
   1a7a8:	ldm	lr!, {r0, r1, r2, r3}
   1a7ac:	stmia	ip!, {r0, r1, r2, r3}
   1a7b0:	ldm	lr!, {r0, r1, r2, r3}
   1a7b4:	stmia	ip!, {r0, r1, r2, r3}
   1a7b8:	ldm	lr, {r0, r1, r2, r3}
   1a7bc:	stm	ip, {r0, r1, r2, r3}
   1a7c0:	mov	r2, #1
   1a7c4:	mov	r1, r6
   1a7c8:	mov	r0, sp
   1a7cc:	bl	1a3f8 <__assert_fail@plt+0x9028>
   1a7d0:	mov	r3, sp
   1a7d4:	mov	r2, r5
   1a7d8:	mov	r1, r4
   1a7dc:	mov	r0, #0
   1a7e0:	bl	1a1cc <__assert_fail@plt+0x8dfc>
   1a7e4:	add	sp, sp, #48	; 0x30
   1a7e8:	pop	{r4, r5, r6, pc}
   1a7ec:	ldrdeq	r1, [r3], -ip
   1a7f0:	push	{r4, lr}
   1a7f4:	mov	r2, r1
   1a7f8:	mvn	r1, #0
   1a7fc:	bl	1a78c <__assert_fail@plt+0x93bc>
   1a800:	pop	{r4, pc}
   1a804:	push	{r4, lr}
   1a808:	mov	r1, #58	; 0x3a
   1a80c:	bl	1a7f0 <__assert_fail@plt+0x9420>
   1a810:	pop	{r4, pc}
   1a814:	push	{r4, lr}
   1a818:	mov	r2, #58	; 0x3a
   1a81c:	bl	1a78c <__assert_fail@plt+0x93bc>
   1a820:	pop	{r4, pc}
   1a824:	push	{r4, r5, lr}
   1a828:	sub	sp, sp, #100	; 0x64
   1a82c:	mov	r4, r0
   1a830:	mov	r5, r2
   1a834:	mov	r0, sp
   1a838:	bl	18ef4 <__assert_fail@plt+0x7b24>
   1a83c:	add	lr, sp, #48	; 0x30
   1a840:	mov	ip, sp
   1a844:	ldm	ip!, {r0, r1, r2, r3}
   1a848:	stmia	lr!, {r0, r1, r2, r3}
   1a84c:	ldm	ip!, {r0, r1, r2, r3}
   1a850:	stmia	lr!, {r0, r1, r2, r3}
   1a854:	ldm	ip, {r0, r1, r2, r3}
   1a858:	stm	lr, {r0, r1, r2, r3}
   1a85c:	mov	r2, #1
   1a860:	mov	r1, #58	; 0x3a
   1a864:	add	r0, sp, #48	; 0x30
   1a868:	bl	1a3f8 <__assert_fail@plt+0x9028>
   1a86c:	add	r3, sp, #48	; 0x30
   1a870:	mvn	r2, #0
   1a874:	mov	r1, r5
   1a878:	mov	r0, r4
   1a87c:	bl	1a1cc <__assert_fail@plt+0x8dfc>
   1a880:	add	sp, sp, #100	; 0x64
   1a884:	pop	{r4, r5, pc}
   1a888:	push	{r4, r5, r6, r7, lr}
   1a88c:	sub	sp, sp, #52	; 0x34
   1a890:	mov	r4, r0
   1a894:	mov	r6, r1
   1a898:	mov	r7, r2
   1a89c:	mov	r5, r3
   1a8a0:	mov	ip, sp
   1a8a4:	ldr	lr, [pc, #64]	; 1a8ec <__assert_fail@plt+0x951c>
   1a8a8:	ldm	lr!, {r0, r1, r2, r3}
   1a8ac:	stmia	ip!, {r0, r1, r2, r3}
   1a8b0:	ldm	lr!, {r0, r1, r2, r3}
   1a8b4:	stmia	ip!, {r0, r1, r2, r3}
   1a8b8:	ldm	lr, {r0, r1, r2, r3}
   1a8bc:	stm	ip, {r0, r1, r2, r3}
   1a8c0:	mov	r2, r7
   1a8c4:	mov	r1, r6
   1a8c8:	mov	r0, sp
   1a8cc:	bl	1a454 <__assert_fail@plt+0x9084>
   1a8d0:	mov	r3, sp
   1a8d4:	ldr	r2, [sp, #72]	; 0x48
   1a8d8:	mov	r1, r5
   1a8dc:	mov	r0, r4
   1a8e0:	bl	1a1cc <__assert_fail@plt+0x8dfc>
   1a8e4:	add	sp, sp, #52	; 0x34
   1a8e8:	pop	{r4, r5, r6, r7, pc}
   1a8ec:	ldrdeq	r1, [r3], -ip
   1a8f0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a8f4:	sub	sp, sp, #12
   1a8f8:	mvn	ip, #0
   1a8fc:	str	ip, [sp]
   1a900:	bl	1a888 <__assert_fail@plt+0x94b8>
   1a904:	add	sp, sp, #12
   1a908:	pop	{pc}		; (ldr pc, [sp], #4)
   1a90c:	push	{r4, lr}
   1a910:	mov	r3, r2
   1a914:	mov	r2, r1
   1a918:	mov	r1, r0
   1a91c:	mov	r0, #0
   1a920:	bl	1a8f0 <__assert_fail@plt+0x9520>
   1a924:	pop	{r4, pc}
   1a928:	push	{lr}		; (str lr, [sp, #-4]!)
   1a92c:	sub	sp, sp, #12
   1a930:	str	r3, [sp]
   1a934:	mov	r3, r2
   1a938:	mov	r2, r1
   1a93c:	mov	r1, r0
   1a940:	mov	r0, #0
   1a944:	bl	1a888 <__assert_fail@plt+0x94b8>
   1a948:	add	sp, sp, #12
   1a94c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a950:	push	{r4, lr}
   1a954:	ldr	r3, [pc, #4]	; 1a960 <__assert_fail@plt+0x9590>
   1a958:	bl	1a1cc <__assert_fail@plt+0x8dfc>
   1a95c:	pop	{r4, pc}
   1a960:	andeq	r1, r3, ip, asr r1
   1a964:	push	{r4, lr}
   1a968:	mov	r2, r1
   1a96c:	mov	r1, r0
   1a970:	mov	r0, #0
   1a974:	bl	1a950 <__assert_fail@plt+0x9580>
   1a978:	pop	{r4, pc}
   1a97c:	push	{r4, lr}
   1a980:	mvn	r2, #0
   1a984:	bl	1a950 <__assert_fail@plt+0x9580>
   1a988:	pop	{r4, pc}
   1a98c:	push	{r4, lr}
   1a990:	mov	r1, r0
   1a994:	mov	r0, #0
   1a998:	bl	1a97c <__assert_fail@plt+0x95ac>
   1a99c:	pop	{r4, pc}
   1a9a0:	push	{r4, lr}
   1a9a4:	subs	r1, r0, #0
   1a9a8:	beq	1a9bc <__assert_fail@plt+0x95ec>
   1a9ac:	mov	r2, #1
   1a9b0:	ldr	r0, [pc, #16]	; 1a9c8 <__assert_fail@plt+0x95f8>
   1a9b4:	bl	1128c <setenv@plt>
   1a9b8:	pop	{r4, pc}
   1a9bc:	ldr	r0, [pc, #4]	; 1a9c8 <__assert_fail@plt+0x95f8>
   1a9c0:	bl	1137c <unsetenv@plt>
   1a9c4:	pop	{r4, pc}
   1a9c8:	andeq	r0, r2, r4, ror #3
   1a9cc:	push	{r4, r5, r6, r7, r8, lr}
   1a9d0:	subs	r6, r0, #0
   1a9d4:	beq	1aa40 <__assert_fail@plt+0x9670>
   1a9d8:	mov	r0, r6
   1a9dc:	bl	11274 <strlen@plt>
   1a9e0:	add	r7, r0, #1
   1a9e4:	cmp	r7, #58	; 0x3a
   1a9e8:	addhi	r0, r0, #2
   1a9ec:	bls	1aa78 <__assert_fail@plt+0x96a8>
   1a9f0:	add	r0, r0, #8
   1a9f4:	bic	r0, r0, #3
   1a9f8:	bl	1ba2c <__assert_fail@plt+0xa65c>
   1a9fc:	subs	r4, r0, #0
   1aa00:	beq	1aa38 <__assert_fail@plt+0x9668>
   1aa04:	mov	r3, #0
   1aa08:	str	r3, [r4]
   1aa0c:	subs	r2, r6, r3
   1aa10:	movne	r2, #1
   1aa14:	strb	r2, [r4, #4]
   1aa18:	strb	r3, [r4, #5]
   1aa1c:	add	r5, r4, #5
   1aa20:	mov	r2, r7
   1aa24:	mov	r1, r6
   1aa28:	mov	r0, r5
   1aa2c:	bl	110f4 <memcpy@plt>
   1aa30:	mov	r3, #0
   1aa34:	strb	r3, [r5, r7]
   1aa38:	mov	r0, r4
   1aa3c:	pop	{r4, r5, r6, r7, r8, pc}
   1aa40:	mov	r0, #64	; 0x40
   1aa44:	bl	1ba2c <__assert_fail@plt+0xa65c>
   1aa48:	subs	r4, r0, #0
   1aa4c:	beq	1aa38 <__assert_fail@plt+0x9668>
   1aa50:	mov	r3, #0
   1aa54:	str	r3, [r4]
   1aa58:	cmp	r6, r3
   1aa5c:	movne	r2, #1
   1aa60:	moveq	r2, r3
   1aa64:	strb	r2, [r4, #4]
   1aa68:	strb	r3, [r4, #5]
   1aa6c:	beq	1aa38 <__assert_fail@plt+0x9668>
   1aa70:	mov	r7, r3
   1aa74:	b	1aa1c <__assert_fail@plt+0x964c>
   1aa78:	mov	r0, #59	; 0x3b
   1aa7c:	b	1a9f0 <__assert_fail@plt+0x9620>
   1aa80:	push	{r4, r5, r6, r7, r8, lr}
   1aa84:	ldr	r6, [r1, #40]	; 0x28
   1aa88:	cmp	r6, #0
   1aa8c:	beq	1ab88 <__assert_fail@plt+0x97b8>
   1aa90:	mov	r5, r0
   1aa94:	mov	r7, r1
   1aa98:	cmp	r1, r6
   1aa9c:	bhi	1aaac <__assert_fail@plt+0x96dc>
   1aaa0:	add	r3, r1, #44	; 0x2c
   1aaa4:	cmp	r6, r3
   1aaa8:	bcc	1ab90 <__assert_fail@plt+0x97c0>
   1aaac:	ldrb	r3, [r6]
   1aab0:	cmp	r3, #0
   1aab4:	addne	r4, r5, #5
   1aab8:	bne	1ab18 <__assert_fail@plt+0x9748>
   1aabc:	ldr	r4, [pc, #220]	; 1aba0 <__assert_fail@plt+0x97d0>
   1aac0:	str	r4, [r7, #40]	; 0x28
   1aac4:	mov	r0, #1
   1aac8:	pop	{r4, r5, r6, r7, r8, pc}
   1aacc:	mov	r0, r6
   1aad0:	bl	1a9cc <__assert_fail@plt+0x95fc>
   1aad4:	str	r0, [r5]
   1aad8:	cmp	r0, #0
   1aadc:	beq	1ab98 <__assert_fail@plt+0x97c8>
   1aae0:	mov	r3, #0
   1aae4:	strb	r3, [r0, #4]
   1aae8:	add	r4, r0, #5
   1aaec:	b	1aac0 <__assert_fail@plt+0x96f0>
   1aaf0:	mov	r0, r4
   1aaf4:	bl	11274 <strlen@plt>
   1aaf8:	add	r0, r0, #1
   1aafc:	ldrb	r3, [r4, r0]!
   1ab00:	cmp	r3, #0
   1ab04:	bne	1ab18 <__assert_fail@plt+0x9748>
   1ab08:	ldr	r3, [r5]
   1ab0c:	cmp	r3, #0
   1ab10:	addne	r4, r3, #5
   1ab14:	movne	r5, r3
   1ab18:	mov	r1, r6
   1ab1c:	mov	r0, r4
   1ab20:	bl	110a0 <strcmp@plt>
   1ab24:	cmp	r0, #0
   1ab28:	beq	1aac0 <__assert_fail@plt+0x96f0>
   1ab2c:	ldrb	r3, [r4]
   1ab30:	cmp	r3, #0
   1ab34:	bne	1aaf0 <__assert_fail@plt+0x9720>
   1ab38:	add	r3, r5, #5
   1ab3c:	cmp	r4, r3
   1ab40:	bne	1ab50 <__assert_fail@plt+0x9780>
   1ab44:	ldrb	r3, [r5, #4]
   1ab48:	cmp	r3, #0
   1ab4c:	bne	1aaf0 <__assert_fail@plt+0x9720>
   1ab50:	mov	r0, r6
   1ab54:	bl	11274 <strlen@plt>
   1ab58:	add	r8, r0, #1
   1ab5c:	add	r3, r5, #64	; 0x40
   1ab60:	sub	r3, r3, r4
   1ab64:	cmp	r8, r3
   1ab68:	bge	1aacc <__assert_fail@plt+0x96fc>
   1ab6c:	mov	r2, r8
   1ab70:	mov	r1, r6
   1ab74:	mov	r0, r4
   1ab78:	bl	110f4 <memcpy@plt>
   1ab7c:	mov	r3, #0
   1ab80:	strb	r3, [r4, r8]
   1ab84:	b	1aac0 <__assert_fail@plt+0x96f0>
   1ab88:	mov	r0, #1
   1ab8c:	pop	{r4, r5, r6, r7, r8, pc}
   1ab90:	mov	r0, #1
   1ab94:	pop	{r4, r5, r6, r7, r8, pc}
   1ab98:	mov	r0, #0
   1ab9c:	pop	{r4, r5, r6, r7, r8, pc}
   1aba0:	andeq	r0, r2, ip, asr #3
   1aba4:	cmp	r0, #1
   1aba8:	bxeq	lr
   1abac:	cmp	r0, #0
   1abb0:	bxeq	lr
   1abb4:	push	{r4, lr}
   1abb8:	ldr	r4, [r0]
   1abbc:	bl	1bc30 <__assert_fail@plt+0xa860>
   1abc0:	mov	r0, r4
   1abc4:	cmp	r4, #0
   1abc8:	bne	1abb8 <__assert_fail@plt+0x97e8>
   1abcc:	pop	{r4, pc}
   1abd0:	push	{r4, r5, r6, lr}
   1abd4:	mov	r4, r0
   1abd8:	ldr	r0, [pc, #164]	; 1ac84 <__assert_fail@plt+0x98b4>
   1abdc:	bl	111d8 <getenv@plt>
   1abe0:	subs	r5, r0, #0
   1abe4:	beq	1ac20 <__assert_fail@plt+0x9850>
   1abe8:	ldrb	r3, [r4, #4]
   1abec:	cmp	r3, #0
   1abf0:	moveq	r0, #0
   1abf4:	beq	1ac0c <__assert_fail@plt+0x983c>
   1abf8:	mov	r1, r5
   1abfc:	add	r0, r4, #5
   1ac00:	bl	110a0 <strcmp@plt>
   1ac04:	clz	r0, r0
   1ac08:	lsr	r0, r0, #5
   1ac0c:	cmp	r0, #0
   1ac10:	movne	r5, #1
   1ac14:	beq	1ac30 <__assert_fail@plt+0x9860>
   1ac18:	mov	r0, r5
   1ac1c:	pop	{r4, r5, r6, pc}
   1ac20:	ldrb	r0, [r4, #4]
   1ac24:	clz	r0, r0
   1ac28:	lsr	r0, r0, #5
   1ac2c:	b	1ac0c <__assert_fail@plt+0x983c>
   1ac30:	mov	r0, r5
   1ac34:	bl	1a9cc <__assert_fail@plt+0x95fc>
   1ac38:	subs	r5, r0, #0
   1ac3c:	beq	1ac18 <__assert_fail@plt+0x9848>
   1ac40:	ldrb	r3, [r4, #4]
   1ac44:	cmp	r3, #0
   1ac48:	addne	r0, r4, #5
   1ac4c:	moveq	r0, #0
   1ac50:	bl	1a9a0 <__assert_fail@plt+0x95d0>
   1ac54:	cmp	r0, #0
   1ac58:	beq	1ac7c <__assert_fail@plt+0x98ac>
   1ac5c:	bl	11298 <__errno_location@plt>
   1ac60:	mov	r4, r0
   1ac64:	ldr	r6, [r0]
   1ac68:	mov	r0, r5
   1ac6c:	bl	1aba4 <__assert_fail@plt+0x97d4>
   1ac70:	str	r6, [r4]
   1ac74:	mov	r5, #0
   1ac78:	b	1ac18 <__assert_fail@plt+0x9848>
   1ac7c:	bl	11178 <tzset@plt>
   1ac80:	b	1ac18 <__assert_fail@plt+0x9848>
   1ac84:	andeq	r0, r2, r4, ror #3
   1ac88:	push	{r4, r5, r6, r7, r8, lr}
   1ac8c:	cmp	r0, #1
   1ac90:	moveq	r7, #1
   1ac94:	beq	1acd8 <__assert_fail@plt+0x9908>
   1ac98:	mov	r4, r0
   1ac9c:	bl	11298 <__errno_location@plt>
   1aca0:	mov	r5, r0
   1aca4:	ldr	r6, [r0]
   1aca8:	ldrb	r3, [r4, #4]
   1acac:	cmp	r3, #0
   1acb0:	addne	r0, r4, #5
   1acb4:	moveq	r0, #0
   1acb8:	bl	1a9a0 <__assert_fail@plt+0x95d0>
   1acbc:	cmp	r0, #0
   1acc0:	beq	1ace0 <__assert_fail@plt+0x9910>
   1acc4:	ldr	r6, [r5]
   1acc8:	mov	r7, #0
   1accc:	mov	r0, r4
   1acd0:	bl	1aba4 <__assert_fail@plt+0x97d4>
   1acd4:	str	r6, [r5]
   1acd8:	mov	r0, r7
   1acdc:	pop	{r4, r5, r6, r7, r8, pc}
   1ace0:	bl	11178 <tzset@plt>
   1ace4:	mov	r7, #1
   1ace8:	b	1accc <__assert_fail@plt+0x98fc>
   1acec:	push	{r4, r5, r6, r7, r8, lr}
   1acf0:	mov	r6, r1
   1acf4:	mov	r4, r2
   1acf8:	subs	r5, r0, #0
   1acfc:	beq	1ad54 <__assert_fail@plt+0x9984>
   1ad00:	mov	r0, r5
   1ad04:	bl	1abd0 <__assert_fail@plt+0x9800>
   1ad08:	subs	r7, r0, #0
   1ad0c:	beq	1ad68 <__assert_fail@plt+0x9998>
   1ad10:	mov	r1, r4
   1ad14:	mov	r0, r6
   1ad18:	bl	11154 <localtime_r@plt>
   1ad1c:	subs	r6, r0, #0
   1ad20:	beq	1ad70 <__assert_fail@plt+0x99a0>
   1ad24:	mov	r1, r4
   1ad28:	mov	r0, r5
   1ad2c:	bl	1aa80 <__assert_fail@plt+0x96b0>
   1ad30:	mov	r5, r0
   1ad34:	mov	r0, r7
   1ad38:	bl	1ac88 <__assert_fail@plt+0x98b8>
   1ad3c:	and	r0, r0, r5
   1ad40:	uxtb	r0, r0
   1ad44:	cmp	r0, #0
   1ad48:	moveq	r4, #0
   1ad4c:	mov	r0, r4
   1ad50:	pop	{r4, r5, r6, r7, r8, pc}
   1ad54:	mov	r1, r2
   1ad58:	mov	r0, r6
   1ad5c:	bl	11088 <gmtime_r@plt>
   1ad60:	mov	r4, r0
   1ad64:	b	1ad4c <__assert_fail@plt+0x997c>
   1ad68:	mov	r4, #0
   1ad6c:	b	1ad4c <__assert_fail@plt+0x997c>
   1ad70:	mov	r0, r7
   1ad74:	bl	1ac88 <__assert_fail@plt+0x98b8>
   1ad78:	mov	r4, r6
   1ad7c:	b	1ad4c <__assert_fail@plt+0x997c>
   1ad80:	push	{r4, r5, r6, r7, lr}
   1ad84:	sub	sp, sp, #52	; 0x34
   1ad88:	mov	r4, r1
   1ad8c:	subs	r5, r0, #0
   1ad90:	beq	1ae4c <__assert_fail@plt+0x9a7c>
   1ad94:	mov	r0, r5
   1ad98:	bl	1abd0 <__assert_fail@plt+0x9800>
   1ad9c:	subs	r7, r0, #0
   1ada0:	beq	1ae5c <__assert_fail@plt+0x9a8c>
   1ada4:	ldr	r3, [r4]
   1ada8:	str	r3, [sp, #4]
   1adac:	ldr	r3, [r4, #4]
   1adb0:	str	r3, [sp, #8]
   1adb4:	ldr	r3, [r4, #8]
   1adb8:	str	r3, [sp, #12]
   1adbc:	ldr	r3, [r4, #12]
   1adc0:	str	r3, [sp, #16]
   1adc4:	ldr	r3, [r4, #16]
   1adc8:	str	r3, [sp, #20]
   1adcc:	ldr	r3, [r4, #20]
   1add0:	str	r3, [sp, #24]
   1add4:	mvn	r3, #0
   1add8:	str	r3, [sp, #32]
   1addc:	ldr	r3, [r4, #32]
   1ade0:	str	r3, [sp, #36]	; 0x24
   1ade4:	add	r0, sp, #4
   1ade8:	bl	110b8 <mktime@plt>
   1adec:	mov	r6, r0
   1adf0:	ldr	r3, [sp, #32]
   1adf4:	cmp	r3, #0
   1adf8:	blt	1ae64 <__assert_fail@plt+0x9a94>
   1adfc:	add	r1, sp, #4
   1ae00:	mov	r0, r5
   1ae04:	bl	1aa80 <__assert_fail@plt+0x96b0>
   1ae08:	mov	r5, r0
   1ae0c:	mov	r0, r7
   1ae10:	bl	1ac88 <__assert_fail@plt+0x98b8>
   1ae14:	and	r0, r0, r5
   1ae18:	tst	r0, #255	; 0xff
   1ae1c:	beq	1ae6c <__assert_fail@plt+0x9a9c>
   1ae20:	mov	ip, r4
   1ae24:	add	lr, sp, #4
   1ae28:	ldm	lr!, {r0, r1, r2, r3}
   1ae2c:	stmia	ip!, {r0, r1, r2, r3}
   1ae30:	ldm	lr!, {r0, r1, r2, r3}
   1ae34:	stmia	ip!, {r0, r1, r2, r3}
   1ae38:	ldm	lr, {r0, r1, r2}
   1ae3c:	stm	ip, {r0, r1, r2}
   1ae40:	mov	r0, r6
   1ae44:	add	sp, sp, #52	; 0x34
   1ae48:	pop	{r4, r5, r6, r7, pc}
   1ae4c:	mov	r0, r1
   1ae50:	bl	1134c <timegm@plt>
   1ae54:	mov	r6, r0
   1ae58:	b	1ae40 <__assert_fail@plt+0x9a70>
   1ae5c:	mvn	r6, #0
   1ae60:	b	1ae40 <__assert_fail@plt+0x9a70>
   1ae64:	mov	r0, r7
   1ae68:	bl	1ac88 <__assert_fail@plt+0x98b8>
   1ae6c:	mvn	r6, #0
   1ae70:	b	1ae40 <__assert_fail@plt+0x9a70>
   1ae74:	push	{r4, r5, r6, lr}
   1ae78:	sub	sp, sp, #32
   1ae7c:	mov	r4, r0
   1ae80:	ldr	r5, [sp, #48]	; 0x30
   1ae84:	ldr	r6, [sp, #52]	; 0x34
   1ae88:	cmp	r1, #0
   1ae8c:	beq	1af44 <__assert_fail@plt+0x9b74>
   1ae90:	str	r3, [sp, #4]
   1ae94:	str	r2, [sp]
   1ae98:	mov	r3, r1
   1ae9c:	ldr	r2, [pc, #940]	; 1b250 <__assert_fail@plt+0x9e80>
   1aea0:	mov	r1, #1
   1aea4:	bl	112ec <__fprintf_chk@plt>
   1aea8:	mov	r2, #5
   1aeac:	ldr	r1, [pc, #928]	; 1b254 <__assert_fail@plt+0x9e84>
   1aeb0:	mov	r0, #0
   1aeb4:	bl	11130 <dcgettext@plt>
   1aeb8:	ldr	r3, [pc, #920]	; 1b258 <__assert_fail@plt+0x9e88>
   1aebc:	str	r3, [sp]
   1aec0:	mov	r3, r0
   1aec4:	ldr	r2, [pc, #912]	; 1b25c <__assert_fail@plt+0x9e8c>
   1aec8:	mov	r1, #1
   1aecc:	mov	r0, r4
   1aed0:	bl	112ec <__fprintf_chk@plt>
   1aed4:	mov	r1, r4
   1aed8:	mov	r0, #10
   1aedc:	bl	11124 <fputc_unlocked@plt>
   1aee0:	mov	r2, #5
   1aee4:	ldr	r1, [pc, #884]	; 1b260 <__assert_fail@plt+0x9e90>
   1aee8:	mov	r0, #0
   1aeec:	bl	11130 <dcgettext@plt>
   1aef0:	ldr	r3, [pc, #876]	; 1b264 <__assert_fail@plt+0x9e94>
   1aef4:	mov	r2, r0
   1aef8:	mov	r1, #1
   1aefc:	mov	r0, r4
   1af00:	bl	112ec <__fprintf_chk@plt>
   1af04:	mov	r1, r4
   1af08:	mov	r0, #10
   1af0c:	bl	11124 <fputc_unlocked@plt>
   1af10:	cmp	r6, #9
   1af14:	ldrls	pc, [pc, r6, lsl #2]
   1af18:	b	1b1e8 <__assert_fail@plt+0x9e18>
   1af1c:	andeq	sl, r1, r0, lsl #31
   1af20:	andeq	sl, r1, ip, asr pc
   1af24:	andeq	sl, r1, r8, lsl #31
   1af28:			; <UNDEFINED> instruction: 0x0001afb8
   1af2c:	strdeq	sl, [r1], -r0
   1af30:	andeq	fp, r1, r0, lsr r0
   1af34:	andeq	fp, r1, r8, ror r0
   1af38:	andeq	fp, r1, r8, asr #1
   1af3c:	andeq	fp, r1, r0, lsr #2
   1af40:	andeq	fp, r1, r0, lsl #3
   1af44:	str	r3, [sp]
   1af48:	mov	r3, r2
   1af4c:	ldr	r2, [pc, #788]	; 1b268 <__assert_fail@plt+0x9e98>
   1af50:	mov	r1, #1
   1af54:	bl	112ec <__fprintf_chk@plt>
   1af58:	b	1aea8 <__assert_fail@plt+0x9ad8>
   1af5c:	mov	r2, #5
   1af60:	ldr	r1, [pc, #772]	; 1b26c <__assert_fail@plt+0x9e9c>
   1af64:	mov	r0, #0
   1af68:	bl	11130 <dcgettext@plt>
   1af6c:	ldr	r3, [r5]
   1af70:	mov	r2, r0
   1af74:	mov	r1, #1
   1af78:	mov	r0, r4
   1af7c:	bl	112ec <__fprintf_chk@plt>
   1af80:	add	sp, sp, #32
   1af84:	pop	{r4, r5, r6, pc}
   1af88:	mov	r2, #5
   1af8c:	ldr	r1, [pc, #732]	; 1b270 <__assert_fail@plt+0x9ea0>
   1af90:	mov	r0, #0
   1af94:	bl	11130 <dcgettext@plt>
   1af98:	ldr	r3, [r5]
   1af9c:	ldr	r2, [r5, #4]
   1afa0:	str	r2, [sp]
   1afa4:	mov	r2, r0
   1afa8:	mov	r1, #1
   1afac:	mov	r0, r4
   1afb0:	bl	112ec <__fprintf_chk@plt>
   1afb4:	b	1af80 <__assert_fail@plt+0x9bb0>
   1afb8:	mov	r2, #5
   1afbc:	ldr	r1, [pc, #688]	; 1b274 <__assert_fail@plt+0x9ea4>
   1afc0:	mov	r0, #0
   1afc4:	bl	11130 <dcgettext@plt>
   1afc8:	ldr	r3, [r5]
   1afcc:	ldr	r2, [r5, #8]
   1afd0:	str	r2, [sp, #4]
   1afd4:	ldr	r2, [r5, #4]
   1afd8:	str	r2, [sp]
   1afdc:	mov	r2, r0
   1afe0:	mov	r1, #1
   1afe4:	mov	r0, r4
   1afe8:	bl	112ec <__fprintf_chk@plt>
   1afec:	b	1af80 <__assert_fail@plt+0x9bb0>
   1aff0:	mov	r2, #5
   1aff4:	ldr	r1, [pc, #636]	; 1b278 <__assert_fail@plt+0x9ea8>
   1aff8:	mov	r0, #0
   1affc:	bl	11130 <dcgettext@plt>
   1b000:	ldr	r3, [r5]
   1b004:	ldr	r2, [r5, #12]
   1b008:	str	r2, [sp, #8]
   1b00c:	ldr	r2, [r5, #8]
   1b010:	str	r2, [sp, #4]
   1b014:	ldr	r2, [r5, #4]
   1b018:	str	r2, [sp]
   1b01c:	mov	r2, r0
   1b020:	mov	r1, #1
   1b024:	mov	r0, r4
   1b028:	bl	112ec <__fprintf_chk@plt>
   1b02c:	b	1af80 <__assert_fail@plt+0x9bb0>
   1b030:	mov	r2, #5
   1b034:	ldr	r1, [pc, #576]	; 1b27c <__assert_fail@plt+0x9eac>
   1b038:	mov	r0, #0
   1b03c:	bl	11130 <dcgettext@plt>
   1b040:	ldr	r3, [r5]
   1b044:	ldr	r2, [r5, #16]
   1b048:	str	r2, [sp, #12]
   1b04c:	ldr	r2, [r5, #12]
   1b050:	str	r2, [sp, #8]
   1b054:	ldr	r2, [r5, #8]
   1b058:	str	r2, [sp, #4]
   1b05c:	ldr	r2, [r5, #4]
   1b060:	str	r2, [sp]
   1b064:	mov	r2, r0
   1b068:	mov	r1, #1
   1b06c:	mov	r0, r4
   1b070:	bl	112ec <__fprintf_chk@plt>
   1b074:	b	1af80 <__assert_fail@plt+0x9bb0>
   1b078:	mov	r2, #5
   1b07c:	ldr	r1, [pc, #508]	; 1b280 <__assert_fail@plt+0x9eb0>
   1b080:	mov	r0, #0
   1b084:	bl	11130 <dcgettext@plt>
   1b088:	ldr	r3, [r5]
   1b08c:	ldr	r2, [r5, #20]
   1b090:	str	r2, [sp, #16]
   1b094:	ldr	r2, [r5, #16]
   1b098:	str	r2, [sp, #12]
   1b09c:	ldr	r2, [r5, #12]
   1b0a0:	str	r2, [sp, #8]
   1b0a4:	ldr	r2, [r5, #8]
   1b0a8:	str	r2, [sp, #4]
   1b0ac:	ldr	r2, [r5, #4]
   1b0b0:	str	r2, [sp]
   1b0b4:	mov	r2, r0
   1b0b8:	mov	r1, #1
   1b0bc:	mov	r0, r4
   1b0c0:	bl	112ec <__fprintf_chk@plt>
   1b0c4:	b	1af80 <__assert_fail@plt+0x9bb0>
   1b0c8:	mov	r2, #5
   1b0cc:	ldr	r1, [pc, #432]	; 1b284 <__assert_fail@plt+0x9eb4>
   1b0d0:	mov	r0, #0
   1b0d4:	bl	11130 <dcgettext@plt>
   1b0d8:	ldr	r3, [r5]
   1b0dc:	ldr	r2, [r5, #24]
   1b0e0:	str	r2, [sp, #20]
   1b0e4:	ldr	r2, [r5, #20]
   1b0e8:	str	r2, [sp, #16]
   1b0ec:	ldr	r2, [r5, #16]
   1b0f0:	str	r2, [sp, #12]
   1b0f4:	ldr	r2, [r5, #12]
   1b0f8:	str	r2, [sp, #8]
   1b0fc:	ldr	r2, [r5, #8]
   1b100:	str	r2, [sp, #4]
   1b104:	ldr	r2, [r5, #4]
   1b108:	str	r2, [sp]
   1b10c:	mov	r2, r0
   1b110:	mov	r1, #1
   1b114:	mov	r0, r4
   1b118:	bl	112ec <__fprintf_chk@plt>
   1b11c:	b	1af80 <__assert_fail@plt+0x9bb0>
   1b120:	mov	r2, #5
   1b124:	ldr	r1, [pc, #348]	; 1b288 <__assert_fail@plt+0x9eb8>
   1b128:	mov	r0, #0
   1b12c:	bl	11130 <dcgettext@plt>
   1b130:	ldr	r3, [r5]
   1b134:	ldr	r2, [r5, #28]
   1b138:	str	r2, [sp, #24]
   1b13c:	ldr	r2, [r5, #24]
   1b140:	str	r2, [sp, #20]
   1b144:	ldr	r2, [r5, #20]
   1b148:	str	r2, [sp, #16]
   1b14c:	ldr	r2, [r5, #16]
   1b150:	str	r2, [sp, #12]
   1b154:	ldr	r2, [r5, #12]
   1b158:	str	r2, [sp, #8]
   1b15c:	ldr	r2, [r5, #8]
   1b160:	str	r2, [sp, #4]
   1b164:	ldr	r2, [r5, #4]
   1b168:	str	r2, [sp]
   1b16c:	mov	r2, r0
   1b170:	mov	r1, #1
   1b174:	mov	r0, r4
   1b178:	bl	112ec <__fprintf_chk@plt>
   1b17c:	b	1af80 <__assert_fail@plt+0x9bb0>
   1b180:	mov	r2, #5
   1b184:	ldr	r1, [pc, #256]	; 1b28c <__assert_fail@plt+0x9ebc>
   1b188:	mov	r0, #0
   1b18c:	bl	11130 <dcgettext@plt>
   1b190:	ldr	r3, [r5]
   1b194:	ldr	r2, [r5, #32]
   1b198:	str	r2, [sp, #28]
   1b19c:	ldr	r2, [r5, #28]
   1b1a0:	str	r2, [sp, #24]
   1b1a4:	ldr	r2, [r5, #24]
   1b1a8:	str	r2, [sp, #20]
   1b1ac:	ldr	r2, [r5, #20]
   1b1b0:	str	r2, [sp, #16]
   1b1b4:	ldr	r2, [r5, #16]
   1b1b8:	str	r2, [sp, #12]
   1b1bc:	ldr	r2, [r5, #12]
   1b1c0:	str	r2, [sp, #8]
   1b1c4:	ldr	r2, [r5, #8]
   1b1c8:	str	r2, [sp, #4]
   1b1cc:	ldr	r2, [r5, #4]
   1b1d0:	str	r2, [sp]
   1b1d4:	mov	r2, r0
   1b1d8:	mov	r1, #1
   1b1dc:	mov	r0, r4
   1b1e0:	bl	112ec <__fprintf_chk@plt>
   1b1e4:	b	1af80 <__assert_fail@plt+0x9bb0>
   1b1e8:	mov	r2, #5
   1b1ec:	ldr	r1, [pc, #156]	; 1b290 <__assert_fail@plt+0x9ec0>
   1b1f0:	mov	r0, #0
   1b1f4:	bl	11130 <dcgettext@plt>
   1b1f8:	ldr	r3, [r5]
   1b1fc:	ldr	r2, [r5, #32]
   1b200:	str	r2, [sp, #28]
   1b204:	ldr	r2, [r5, #28]
   1b208:	str	r2, [sp, #24]
   1b20c:	ldr	r2, [r5, #24]
   1b210:	str	r2, [sp, #20]
   1b214:	ldr	r2, [r5, #20]
   1b218:	str	r2, [sp, #16]
   1b21c:	ldr	r2, [r5, #16]
   1b220:	str	r2, [sp, #12]
   1b224:	ldr	r2, [r5, #12]
   1b228:	str	r2, [sp, #8]
   1b22c:	ldr	r2, [r5, #8]
   1b230:	str	r2, [sp, #4]
   1b234:	ldr	r2, [r5, #4]
   1b238:	str	r2, [sp]
   1b23c:	mov	r2, r0
   1b240:	mov	r1, #1
   1b244:	mov	r0, r4
   1b248:	bl	112ec <__fprintf_chk@plt>
   1b24c:	b	1af80 <__assert_fail@plt+0x9bb0>
   1b250:	strdeq	r0, [r2], -ip
   1b254:	andeq	r0, r2, r0, lsl r6
   1b258:	andeq	r0, r0, r6, ror #15
   1b25c:	andeq	r0, r2, r8, ror #17
   1b260:	andeq	r0, r2, r4, lsl r6
   1b264:	andeq	r0, r2, r0, asr #13
   1b268:	andeq	r0, r2, r8, lsl #12
   1b26c:	andeq	r0, r2, r4, ror #13
   1b270:	strdeq	r0, [r2], -r4
   1b274:	andeq	r0, r2, ip, lsl #14
   1b278:	andeq	r0, r2, r8, lsr #14
   1b27c:	andeq	r0, r2, r8, asr #14
   1b280:	andeq	r0, r2, ip, ror #14
   1b284:	muleq	r2, r4, r7
   1b288:	andeq	r0, r2, r0, asr #15
   1b28c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1b290:	andeq	r0, r2, r4, lsr #16
   1b294:	push	{r4, r5, lr}
   1b298:	sub	sp, sp, #12
   1b29c:	ldr	r5, [sp, #24]
   1b2a0:	ldr	ip, [r5]
   1b2a4:	cmp	ip, #0
   1b2a8:	beq	1b2d8 <__assert_fail@plt+0x9f08>
   1b2ac:	mov	lr, r5
   1b2b0:	mov	ip, #0
   1b2b4:	add	ip, ip, #1
   1b2b8:	ldr	r4, [lr, #4]!
   1b2bc:	cmp	r4, #0
   1b2c0:	bne	1b2b4 <__assert_fail@plt+0x9ee4>
   1b2c4:	str	ip, [sp, #4]
   1b2c8:	str	r5, [sp]
   1b2cc:	bl	1ae74 <__assert_fail@plt+0x9aa4>
   1b2d0:	add	sp, sp, #12
   1b2d4:	pop	{r4, r5, pc}
   1b2d8:	mov	ip, #0
   1b2dc:	b	1b2c4 <__assert_fail@plt+0x9ef4>
   1b2e0:	push	{r4, r5, lr}
   1b2e4:	sub	sp, sp, #52	; 0x34
   1b2e8:	ldr	r4, [sp, #64]	; 0x40
   1b2ec:	sub	r4, r4, #4
   1b2f0:	add	r5, sp, #4
   1b2f4:	mov	ip, #0
   1b2f8:	ldr	lr, [r4, #4]!
   1b2fc:	str	lr, [r5, #4]!
   1b300:	cmp	lr, #0
   1b304:	beq	1b314 <__assert_fail@plt+0x9f44>
   1b308:	add	ip, ip, #1
   1b30c:	cmp	ip, #10
   1b310:	bne	1b2f8 <__assert_fail@plt+0x9f28>
   1b314:	str	ip, [sp, #4]
   1b318:	add	ip, sp, #8
   1b31c:	str	ip, [sp]
   1b320:	bl	1ae74 <__assert_fail@plt+0x9aa4>
   1b324:	add	sp, sp, #52	; 0x34
   1b328:	pop	{r4, r5, pc}
   1b32c:	push	{r3}		; (str r3, [sp, #-4]!)
   1b330:	push	{lr}		; (str lr, [sp, #-4]!)
   1b334:	sub	sp, sp, #16
   1b338:	add	r3, sp, #24
   1b33c:	str	r3, [sp, #12]
   1b340:	str	r3, [sp]
   1b344:	ldr	r3, [sp, #20]
   1b348:	bl	1b2e0 <__assert_fail@plt+0x9f10>
   1b34c:	add	sp, sp, #16
   1b350:	pop	{lr}		; (ldr lr, [sp], #4)
   1b354:	add	sp, sp, #4
   1b358:	bx	lr
   1b35c:	push	{r4, lr}
   1b360:	ldr	r3, [pc, #112]	; 1b3d8 <__assert_fail@plt+0xa008>
   1b364:	ldr	r1, [r3]
   1b368:	mov	r0, #10
   1b36c:	bl	11124 <fputc_unlocked@plt>
   1b370:	mov	r2, #5
   1b374:	ldr	r1, [pc, #96]	; 1b3dc <__assert_fail@plt+0xa00c>
   1b378:	mov	r0, #0
   1b37c:	bl	11130 <dcgettext@plt>
   1b380:	ldr	r2, [pc, #88]	; 1b3e0 <__assert_fail@plt+0xa010>
   1b384:	mov	r1, r0
   1b388:	mov	r0, #1
   1b38c:	bl	112d4 <__printf_chk@plt>
   1b390:	mov	r2, #5
   1b394:	ldr	r1, [pc, #72]	; 1b3e4 <__assert_fail@plt+0xa014>
   1b398:	mov	r0, #0
   1b39c:	bl	11130 <dcgettext@plt>
   1b3a0:	ldr	r3, [pc, #64]	; 1b3e8 <__assert_fail@plt+0xa018>
   1b3a4:	ldr	r2, [pc, #64]	; 1b3ec <__assert_fail@plt+0xa01c>
   1b3a8:	mov	r1, r0
   1b3ac:	mov	r0, #1
   1b3b0:	bl	112d4 <__printf_chk@plt>
   1b3b4:	mov	r2, #5
   1b3b8:	ldr	r1, [pc, #48]	; 1b3f0 <__assert_fail@plt+0xa020>
   1b3bc:	mov	r0, #0
   1b3c0:	bl	11130 <dcgettext@plt>
   1b3c4:	ldr	r2, [pc, #40]	; 1b3f4 <__assert_fail@plt+0xa024>
   1b3c8:	mov	r1, r0
   1b3cc:	mov	r0, #1
   1b3d0:	bl	112d4 <__printf_chk@plt>
   1b3d4:	pop	{r4, pc}
   1b3d8:	andeq	r1, r3, r4, lsr #3
   1b3dc:	andeq	r0, r2, r0, ror #16
   1b3e0:	andeq	r0, r2, r4, ror r8
   1b3e4:	andeq	r0, r2, ip, lsl #17
   1b3e8:			; <UNDEFINED> instruction: 0x0001e6b4
   1b3ec:	ldrdeq	lr, [r1], -ip
   1b3f0:	andeq	r0, r2, r0, lsr #17
   1b3f4:	andeq	r0, r2, r8, asr #17
   1b3f8:	push	{r4, lr}
   1b3fc:	bl	1ba2c <__assert_fail@plt+0xa65c>
   1b400:	cmp	r0, #0
   1b404:	popne	{r4, pc}
   1b408:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b40c:	push	{r4, lr}
   1b410:	bl	1ba2c <__assert_fail@plt+0xa65c>
   1b414:	cmp	r0, #0
   1b418:	popne	{r4, pc}
   1b41c:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b420:	push	{r4, lr}
   1b424:	bl	1b3f8 <__assert_fail@plt+0xa028>
   1b428:	pop	{r4, pc}
   1b42c:	push	{r4, r5, r6, lr}
   1b430:	mov	r5, r0
   1b434:	mov	r4, r1
   1b438:	bl	1ba5c <__assert_fail@plt+0xa68c>
   1b43c:	cmp	r0, #0
   1b440:	popne	{r4, r5, r6, pc}
   1b444:	adds	r4, r4, #0
   1b448:	movne	r4, #1
   1b44c:	cmp	r5, #0
   1b450:	orreq	r4, r4, #1
   1b454:	cmp	r4, #0
   1b458:	popeq	{r4, r5, r6, pc}
   1b45c:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b460:	push	{r4, lr}
   1b464:	cmp	r1, #0
   1b468:	orreq	r1, r1, #1
   1b46c:	bl	1ba5c <__assert_fail@plt+0xa68c>
   1b470:	cmp	r0, #0
   1b474:	popne	{r4, pc}
   1b478:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b47c:	push	{r4, r5, r6, lr}
   1b480:	mov	r6, r0
   1b484:	mov	r5, r1
   1b488:	mov	r4, r2
   1b48c:	bl	1d7c0 <__assert_fail@plt+0xc3f0>
   1b490:	cmp	r0, #0
   1b494:	popne	{r4, r5, r6, pc}
   1b498:	cmp	r6, #0
   1b49c:	beq	1b4ac <__assert_fail@plt+0xa0dc>
   1b4a0:	cmp	r5, #0
   1b4a4:	cmpne	r4, #0
   1b4a8:	popeq	{r4, r5, r6, pc}
   1b4ac:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b4b0:	push	{r4, lr}
   1b4b4:	bl	1b47c <__assert_fail@plt+0xa0ac>
   1b4b8:	pop	{r4, pc}
   1b4bc:	push	{r4, lr}
   1b4c0:	mov	ip, r1
   1b4c4:	mov	r3, r2
   1b4c8:	cmp	r2, #0
   1b4cc:	cmpne	r1, #0
   1b4d0:	moveq	r3, #1
   1b4d4:	moveq	ip, r3
   1b4d8:	mov	r2, r3
   1b4dc:	mov	r1, ip
   1b4e0:	bl	1d7c0 <__assert_fail@plt+0xc3f0>
   1b4e4:	cmp	r0, #0
   1b4e8:	popne	{r4, pc}
   1b4ec:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b4f0:	push	{r4, lr}
   1b4f4:	mov	r2, r1
   1b4f8:	mov	r1, r0
   1b4fc:	mov	r0, #0
   1b500:	bl	1b47c <__assert_fail@plt+0xa0ac>
   1b504:	pop	{r4, pc}
   1b508:	push	{r4, lr}
   1b50c:	mov	r2, r1
   1b510:	mov	r1, r0
   1b514:	mov	r0, #0
   1b518:	bl	1b4bc <__assert_fail@plt+0xa0ec>
   1b51c:	pop	{r4, pc}
   1b520:	push	{r4, r5, r6, r7, r8, lr}
   1b524:	mov	r5, r1
   1b528:	mov	r6, r2
   1b52c:	ldr	r4, [r1]
   1b530:	subs	r7, r0, #0
   1b534:	beq	1b550 <__assert_fail@plt+0xa180>
   1b538:	lsr	r2, r4, #1
   1b53c:	add	r3, r2, #1
   1b540:	mvn	r3, r3
   1b544:	cmp	r4, r3
   1b548:	bls	1b574 <__assert_fail@plt+0xa1a4>
   1b54c:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b550:	cmp	r4, #0
   1b554:	bne	1b57c <__assert_fail@plt+0xa1ac>
   1b558:	mov	r1, r2
   1b55c:	mov	r0, #64	; 0x40
   1b560:	bl	1d914 <__assert_fail@plt+0xc544>
   1b564:	cmp	r0, #0
   1b568:	movne	r4, r0
   1b56c:	addeq	r4, r0, #1
   1b570:	b	1b57c <__assert_fail@plt+0xa1ac>
   1b574:	add	r4, r4, #1
   1b578:	add	r4, r4, r2
   1b57c:	mov	r2, r6
   1b580:	mov	r1, r4
   1b584:	mov	r0, r7
   1b588:	bl	1b47c <__assert_fail@plt+0xa0ac>
   1b58c:	str	r4, [r5]
   1b590:	pop	{r4, r5, r6, r7, r8, pc}
   1b594:	push	{r4, lr}
   1b598:	mov	r2, #1
   1b59c:	bl	1b520 <__assert_fail@plt+0xa150>
   1b5a0:	pop	{r4, pc}
   1b5a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5a8:	sub	sp, sp, #12
   1b5ac:	mov	fp, r0
   1b5b0:	mov	sl, r1
   1b5b4:	mov	r9, r2
   1b5b8:	mov	r7, r3
   1b5bc:	ldr	r6, [sp, #48]	; 0x30
   1b5c0:	ldr	r5, [r1]
   1b5c4:	asrs	r4, r5, #1
   1b5c8:	bmi	1b724 <__assert_fail@plt+0xa354>
   1b5cc:	cmp	r5, #0
   1b5d0:	blt	1b738 <__assert_fail@plt+0xa368>
   1b5d4:	mvn	r3, #-2147483648	; 0x80000000
   1b5d8:	sub	r3, r3, r4
   1b5dc:	cmp	r5, r3
   1b5e0:	movle	r3, #0
   1b5e4:	movgt	r3, #1
   1b5e8:	cmp	r3, #0
   1b5ec:	addeq	r4, r4, r5
   1b5f0:	mvnne	r4, #-2147483648	; 0x80000000
   1b5f4:	mvn	r8, r7
   1b5f8:	lsr	r8, r8, #31
   1b5fc:	cmp	r7, r4
   1b600:	movge	r3, #0
   1b604:	andlt	r3, r8, #1
   1b608:	cmp	r3, #0
   1b60c:	movne	r4, r7
   1b610:	cmp	r6, #0
   1b614:	blt	1b74c <__assert_fail@plt+0xa37c>
   1b618:	cmp	r6, #0
   1b61c:	beq	1b7f8 <__assert_fail@plt+0xa428>
   1b620:	cmp	r4, #0
   1b624:	blt	1b7a8 <__assert_fail@plt+0xa3d8>
   1b628:	mov	r1, r6
   1b62c:	mvn	r0, #-2147483648	; 0x80000000
   1b630:	bl	1db20 <__assert_fail@plt+0xc750>
   1b634:	cmp	r0, r4
   1b638:	movge	r0, #0
   1b63c:	movlt	r0, #1
   1b640:	cmp	r0, #0
   1b644:	mvnne	r3, #-2147483648	; 0x80000000
   1b648:	strne	r3, [sp, #4]
   1b64c:	beq	1b7e0 <__assert_fail@plt+0xa410>
   1b650:	mov	r1, r6
   1b654:	ldr	r0, [sp, #4]
   1b658:	bl	1db20 <__assert_fail@plt+0xc750>
   1b65c:	mov	r4, r0
   1b660:	mov	r1, r6
   1b664:	ldr	r0, [sp, #4]
   1b668:	bl	1dd40 <__assert_fail@plt+0xc970>
   1b66c:	ldr	r3, [sp, #4]
   1b670:	sub	r1, r3, r1
   1b674:	cmp	fp, #0
   1b678:	moveq	r3, #0
   1b67c:	streq	r3, [sl]
   1b680:	sub	r3, r4, r5
   1b684:	cmp	r3, r9
   1b688:	bge	1b710 <__assert_fail@plt+0xa340>
   1b68c:	cmp	r9, #0
   1b690:	blt	1b804 <__assert_fail@plt+0xa434>
   1b694:	cmp	r5, #0
   1b698:	blt	1b818 <__assert_fail@plt+0xa448>
   1b69c:	mvn	r3, #-2147483648	; 0x80000000
   1b6a0:	sub	r3, r3, r9
   1b6a4:	cmp	r5, r3
   1b6a8:	movle	r3, #0
   1b6ac:	movgt	r3, #1
   1b6b0:	cmp	r3, #0
   1b6b4:	bne	1b8c0 <__assert_fail@plt+0xa4f0>
   1b6b8:	add	r5, r5, r9
   1b6bc:	mov	r4, r5
   1b6c0:	cmp	r7, r5
   1b6c4:	movge	r7, #0
   1b6c8:	andlt	r7, r8, #1
   1b6cc:	cmp	r7, #0
   1b6d0:	bne	1b8c0 <__assert_fail@plt+0xa4f0>
   1b6d4:	cmp	r6, #0
   1b6d8:	blt	1b82c <__assert_fail@plt+0xa45c>
   1b6dc:	cmp	r6, #0
   1b6e0:	beq	1b70c <__assert_fail@plt+0xa33c>
   1b6e4:	cmp	r5, #0
   1b6e8:	blt	1b888 <__assert_fail@plt+0xa4b8>
   1b6ec:	mov	r1, r6
   1b6f0:	mvn	r0, #-2147483648	; 0x80000000
   1b6f4:	bl	1db20 <__assert_fail@plt+0xc750>
   1b6f8:	cmp	r5, r0
   1b6fc:	movle	r0, #0
   1b700:	movgt	r0, #1
   1b704:	cmp	r0, #0
   1b708:	bne	1b8c0 <__assert_fail@plt+0xa4f0>
   1b70c:	mul	r1, r5, r6
   1b710:	mov	r0, fp
   1b714:	bl	1b42c <__assert_fail@plt+0xa05c>
   1b718:	str	r4, [sl]
   1b71c:	add	sp, sp, #12
   1b720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b724:	rsb	r3, r4, #-2147483648	; 0x80000000
   1b728:	cmp	r5, r3
   1b72c:	movge	r3, #0
   1b730:	movlt	r3, #1
   1b734:	b	1b5e8 <__assert_fail@plt+0xa218>
   1b738:	rsb	r3, r5, #-2147483648	; 0x80000000
   1b73c:	cmp	r4, r3
   1b740:	movge	r3, #0
   1b744:	movlt	r3, #1
   1b748:	b	1b5e8 <__assert_fail@plt+0xa218>
   1b74c:	cmp	r4, #0
   1b750:	blt	1b778 <__assert_fail@plt+0xa3a8>
   1b754:	cmn	r6, #1
   1b758:	beq	1b794 <__assert_fail@plt+0xa3c4>
   1b75c:	mov	r1, r6
   1b760:	mov	r0, #-2147483648	; 0x80000000
   1b764:	bl	1db20 <__assert_fail@plt+0xc750>
   1b768:	cmp	r0, r4
   1b76c:	movge	r0, #0
   1b770:	movlt	r0, #1
   1b774:	b	1b640 <__assert_fail@plt+0xa270>
   1b778:	mov	r1, r6
   1b77c:	mvn	r0, #-2147483648	; 0x80000000
   1b780:	bl	1db20 <__assert_fail@plt+0xc750>
   1b784:	cmp	r0, r4
   1b788:	movle	r0, #0
   1b78c:	movgt	r0, #1
   1b790:	b	1b640 <__assert_fail@plt+0xa270>
   1b794:	add	r0, r4, #-2147483648	; 0x80000000
   1b798:	cmp	r0, #0
   1b79c:	movle	r0, #0
   1b7a0:	movgt	r0, #1
   1b7a4:	b	1b640 <__assert_fail@plt+0xa270>
   1b7a8:	cmn	r4, #1
   1b7ac:	beq	1b7cc <__assert_fail@plt+0xa3fc>
   1b7b0:	mov	r1, r4
   1b7b4:	mov	r0, #-2147483648	; 0x80000000
   1b7b8:	bl	1db20 <__assert_fail@plt+0xc750>
   1b7bc:	cmp	r6, r0
   1b7c0:	movle	r0, #0
   1b7c4:	movgt	r0, #1
   1b7c8:	b	1b640 <__assert_fail@plt+0xa270>
   1b7cc:	add	r0, r6, #-2147483648	; 0x80000000
   1b7d0:	cmp	r0, #0
   1b7d4:	movle	r0, #0
   1b7d8:	movgt	r0, #1
   1b7dc:	b	1b640 <__assert_fail@plt+0xa270>
   1b7e0:	mul	r1, r6, r4
   1b7e4:	cmp	r1, #63	; 0x3f
   1b7e8:	movle	r3, #64	; 0x40
   1b7ec:	strle	r3, [sp, #4]
   1b7f0:	bgt	1b674 <__assert_fail@plt+0xa2a4>
   1b7f4:	b	1b650 <__assert_fail@plt+0xa280>
   1b7f8:	mov	r3, #64	; 0x40
   1b7fc:	str	r3, [sp, #4]
   1b800:	b	1b650 <__assert_fail@plt+0xa280>
   1b804:	rsb	r3, r9, #-2147483648	; 0x80000000
   1b808:	cmp	r5, r3
   1b80c:	movge	r3, #0
   1b810:	movlt	r3, #1
   1b814:	b	1b6b0 <__assert_fail@plt+0xa2e0>
   1b818:	rsb	r3, r5, #-2147483648	; 0x80000000
   1b81c:	cmp	r9, r3
   1b820:	movge	r3, #0
   1b824:	movlt	r3, #1
   1b828:	b	1b6b0 <__assert_fail@plt+0xa2e0>
   1b82c:	cmp	r5, #0
   1b830:	blt	1b858 <__assert_fail@plt+0xa488>
   1b834:	cmn	r6, #1
   1b838:	beq	1b874 <__assert_fail@plt+0xa4a4>
   1b83c:	mov	r1, r6
   1b840:	mov	r0, #-2147483648	; 0x80000000
   1b844:	bl	1db20 <__assert_fail@plt+0xc750>
   1b848:	cmp	r5, r0
   1b84c:	movle	r0, #0
   1b850:	movgt	r0, #1
   1b854:	b	1b704 <__assert_fail@plt+0xa334>
   1b858:	mov	r1, r6
   1b85c:	mvn	r0, #-2147483648	; 0x80000000
   1b860:	bl	1db20 <__assert_fail@plt+0xc750>
   1b864:	cmp	r5, r0
   1b868:	movge	r0, #0
   1b86c:	movlt	r0, #1
   1b870:	b	1b704 <__assert_fail@plt+0xa334>
   1b874:	add	r0, r5, #-2147483648	; 0x80000000
   1b878:	cmp	r0, #0
   1b87c:	movle	r0, #0
   1b880:	movgt	r0, #1
   1b884:	b	1b704 <__assert_fail@plt+0xa334>
   1b888:	cmn	r5, #1
   1b88c:	beq	1b8ac <__assert_fail@plt+0xa4dc>
   1b890:	mov	r1, r5
   1b894:	mov	r0, #-2147483648	; 0x80000000
   1b898:	bl	1db20 <__assert_fail@plt+0xc750>
   1b89c:	cmp	r6, r0
   1b8a0:	movle	r0, #0
   1b8a4:	movgt	r0, #1
   1b8a8:	b	1b704 <__assert_fail@plt+0xa334>
   1b8ac:	add	r0, r6, #-2147483648	; 0x80000000
   1b8b0:	cmp	r0, #0
   1b8b4:	movle	r0, #0
   1b8b8:	movgt	r0, #1
   1b8bc:	b	1b704 <__assert_fail@plt+0xa334>
   1b8c0:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b8c4:	push	{r4, lr}
   1b8c8:	bl	1b9dc <__assert_fail@plt+0xa60c>
   1b8cc:	cmp	r0, #0
   1b8d0:	popne	{r4, pc}
   1b8d4:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b8d8:	push	{r4, lr}
   1b8dc:	mov	r1, #1
   1b8e0:	bl	1b8c4 <__assert_fail@plt+0xa4f4>
   1b8e4:	pop	{r4, pc}
   1b8e8:	push	{r4, lr}
   1b8ec:	bl	1b9dc <__assert_fail@plt+0xa60c>
   1b8f0:	cmp	r0, #0
   1b8f4:	popne	{r4, pc}
   1b8f8:	bl	1b99c <__assert_fail@plt+0xa5cc>
   1b8fc:	push	{r4, lr}
   1b900:	mov	r1, #1
   1b904:	bl	1b8e8 <__assert_fail@plt+0xa518>
   1b908:	pop	{r4, pc}
   1b90c:	push	{r4, r5, r6, lr}
   1b910:	mov	r5, r0
   1b914:	mov	r4, r1
   1b918:	mov	r0, r1
   1b91c:	bl	1b3f8 <__assert_fail@plt+0xa028>
   1b920:	mov	r2, r4
   1b924:	mov	r1, r5
   1b928:	bl	110f4 <memcpy@plt>
   1b92c:	pop	{r4, r5, r6, pc}
   1b930:	push	{r4, r5, r6, lr}
   1b934:	mov	r5, r0
   1b938:	mov	r4, r1
   1b93c:	mov	r0, r1
   1b940:	bl	1b40c <__assert_fail@plt+0xa03c>
   1b944:	mov	r2, r4
   1b948:	mov	r1, r5
   1b94c:	bl	110f4 <memcpy@plt>
   1b950:	pop	{r4, r5, r6, pc}
   1b954:	push	{r4, r5, r6, lr}
   1b958:	mov	r5, r0
   1b95c:	mov	r4, r1
   1b960:	add	r0, r1, #1
   1b964:	bl	1b40c <__assert_fail@plt+0xa03c>
   1b968:	mov	r2, #0
   1b96c:	strb	r2, [r0, r4]
   1b970:	mov	r2, r4
   1b974:	mov	r1, r5
   1b978:	bl	110f4 <memcpy@plt>
   1b97c:	pop	{r4, r5, r6, pc}
   1b980:	push	{r4, lr}
   1b984:	mov	r4, r0
   1b988:	bl	11274 <strlen@plt>
   1b98c:	add	r1, r0, #1
   1b990:	mov	r0, r4
   1b994:	bl	1b90c <__assert_fail@plt+0xa53c>
   1b998:	pop	{r4, pc}
   1b99c:	push	{r4, lr}
   1b9a0:	ldr	r3, [pc, #40]	; 1b9d0 <__assert_fail@plt+0xa600>
   1b9a4:	ldr	r4, [r3]
   1b9a8:	mov	r2, #5
   1b9ac:	ldr	r1, [pc, #32]	; 1b9d4 <__assert_fail@plt+0xa604>
   1b9b0:	mov	r0, #0
   1b9b4:	bl	11130 <dcgettext@plt>
   1b9b8:	mov	r3, r0
   1b9bc:	ldr	r2, [pc, #20]	; 1b9d8 <__assert_fail@plt+0xa608>
   1b9c0:	mov	r1, #0
   1b9c4:	mov	r0, r4
   1b9c8:	bl	111c0 <error@plt>
   1b9cc:	bl	113a0 <abort@plt>
   1b9d0:	andeq	r1, r3, r8, asr #2
   1b9d4:	andeq	r0, r2, r8, lsl r9
   1b9d8:	andeq	lr, r1, r4, ror sl
   1b9dc:	push	{r4, lr}
   1b9e0:	mov	r2, r0
   1b9e4:	mov	r3, r1
   1b9e8:	cmp	r1, #0
   1b9ec:	cmpne	r0, #0
   1b9f0:	moveq	r3, #1
   1b9f4:	moveq	r2, r3
   1b9f8:	umull	r0, r1, r2, r3
   1b9fc:	cmp	r0, #0
   1ba00:	cmpge	r1, #0
   1ba04:	bne	1ba18 <__assert_fail@plt+0xa648>
   1ba08:	mov	r1, r3
   1ba0c:	mov	r0, r2
   1ba10:	bl	11064 <calloc@plt>
   1ba14:	pop	{r4, pc}
   1ba18:	bl	11298 <__errno_location@plt>
   1ba1c:	mov	r3, #12
   1ba20:	str	r3, [r0]
   1ba24:	mov	r0, #0
   1ba28:	pop	{r4, pc}
   1ba2c:	push	{r4, lr}
   1ba30:	cmp	r0, #0
   1ba34:	moveq	r0, #1
   1ba38:	cmp	r0, #0
   1ba3c:	blt	1ba48 <__assert_fail@plt+0xa678>
   1ba40:	bl	111e4 <malloc@plt>
   1ba44:	pop	{r4, pc}
   1ba48:	bl	11298 <__errno_location@plt>
   1ba4c:	mov	r3, #12
   1ba50:	str	r3, [r0]
   1ba54:	mov	r0, #0
   1ba58:	pop	{r4, pc}
   1ba5c:	push	{r4, lr}
   1ba60:	cmp	r0, #0
   1ba64:	beq	1ba80 <__assert_fail@plt+0xa6b0>
   1ba68:	cmp	r1, #0
   1ba6c:	beq	1ba8c <__assert_fail@plt+0xa6bc>
   1ba70:	cmp	r1, #0
   1ba74:	blt	1ba98 <__assert_fail@plt+0xa6c8>
   1ba78:	bl	11148 <realloc@plt>
   1ba7c:	pop	{r4, pc}
   1ba80:	mov	r0, r1
   1ba84:	bl	1ba2c <__assert_fail@plt+0xa65c>
   1ba88:	pop	{r4, pc}
   1ba8c:	bl	1bc30 <__assert_fail@plt+0xa860>
   1ba90:	mov	r0, #0
   1ba94:	pop	{r4, pc}
   1ba98:	bl	11298 <__errno_location@plt>
   1ba9c:	mov	r3, #12
   1baa0:	str	r3, [r0]
   1baa4:	mov	r0, #0
   1baa8:	pop	{r4, pc}
   1baac:	push	{r4, r5, r6, lr}
   1bab0:	mov	r5, r0
   1bab4:	bl	111a8 <__fpending@plt>
   1bab8:	mov	r6, r0
   1babc:	ldr	r4, [r5]
   1bac0:	and	r4, r4, #32
   1bac4:	mov	r0, r5
   1bac8:	bl	1bb24 <__assert_fail@plt+0xa754>
   1bacc:	cmp	r4, #0
   1bad0:	bne	1baf8 <__assert_fail@plt+0xa728>
   1bad4:	cmp	r0, #0
   1bad8:	popeq	{r4, r5, r6, pc}
   1badc:	cmp	r6, #0
   1bae0:	bne	1bb14 <__assert_fail@plt+0xa744>
   1bae4:	bl	11298 <__errno_location@plt>
   1bae8:	ldr	r0, [r0]
   1baec:	subs	r0, r0, #9
   1baf0:	mvnne	r0, #0
   1baf4:	pop	{r4, r5, r6, pc}
   1baf8:	cmp	r0, #0
   1bafc:	bne	1bb1c <__assert_fail@plt+0xa74c>
   1bb00:	bl	11298 <__errno_location@plt>
   1bb04:	mov	r3, #0
   1bb08:	str	r3, [r0]
   1bb0c:	mvn	r0, #0
   1bb10:	pop	{r4, r5, r6, pc}
   1bb14:	mvn	r0, #0
   1bb18:	pop	{r4, r5, r6, pc}
   1bb1c:	mvn	r0, #0
   1bb20:	pop	{r4, r5, r6, pc}
   1bb24:	push	{r4, r5, r6, lr}
   1bb28:	sub	sp, sp, #8
   1bb2c:	mov	r4, r0
   1bb30:	bl	112e0 <fileno@plt>
   1bb34:	cmp	r0, #0
   1bb38:	blt	1bbb0 <__assert_fail@plt+0xa7e0>
   1bb3c:	mov	r0, r4
   1bb40:	bl	11214 <__freading@plt>
   1bb44:	cmp	r0, #0
   1bb48:	beq	1bb7c <__assert_fail@plt+0xa7ac>
   1bb4c:	mov	r0, r4
   1bb50:	bl	112e0 <fileno@plt>
   1bb54:	mov	r3, #1
   1bb58:	str	r3, [sp]
   1bb5c:	mov	r2, #0
   1bb60:	mov	r3, #0
   1bb64:	bl	11190 <lseek64@plt>
   1bb68:	mvn	r2, #0
   1bb6c:	mvn	r3, #0
   1bb70:	cmp	r1, r3
   1bb74:	cmpeq	r0, r2
   1bb78:	beq	1bbbc <__assert_fail@plt+0xa7ec>
   1bb7c:	mov	r0, r4
   1bb80:	bl	1bbcc <__assert_fail@plt+0xa7fc>
   1bb84:	cmp	r0, #0
   1bb88:	beq	1bbbc <__assert_fail@plt+0xa7ec>
   1bb8c:	bl	11298 <__errno_location@plt>
   1bb90:	mov	r5, r0
   1bb94:	ldr	r6, [r0]
   1bb98:	mov	r0, r4
   1bb9c:	bl	112f8 <fclose@plt>
   1bba0:	cmp	r6, #0
   1bba4:	strne	r6, [r5]
   1bba8:	mvnne	r0, #0
   1bbac:	b	1bbc4 <__assert_fail@plt+0xa7f4>
   1bbb0:	mov	r0, r4
   1bbb4:	bl	112f8 <fclose@plt>
   1bbb8:	b	1bbc4 <__assert_fail@plt+0xa7f4>
   1bbbc:	mov	r0, r4
   1bbc0:	bl	112f8 <fclose@plt>
   1bbc4:	add	sp, sp, #8
   1bbc8:	pop	{r4, r5, r6, pc}
   1bbcc:	push	{r4, lr}
   1bbd0:	sub	sp, sp, #8
   1bbd4:	subs	r4, r0, #0
   1bbd8:	beq	1bbec <__assert_fail@plt+0xa81c>
   1bbdc:	mov	r0, r4
   1bbe0:	bl	11214 <__freading@plt>
   1bbe4:	cmp	r0, #0
   1bbe8:	bne	1bbfc <__assert_fail@plt+0xa82c>
   1bbec:	mov	r0, r4
   1bbf0:	bl	110c4 <fflush@plt>
   1bbf4:	add	sp, sp, #8
   1bbf8:	pop	{r4, pc}
   1bbfc:	ldr	r3, [r4]
   1bc00:	tst	r3, #256	; 0x100
   1bc04:	bne	1bc14 <__assert_fail@plt+0xa844>
   1bc08:	mov	r0, r4
   1bc0c:	bl	110c4 <fflush@plt>
   1bc10:	b	1bbf4 <__assert_fail@plt+0xa824>
   1bc14:	mov	r3, #1
   1bc18:	str	r3, [sp]
   1bc1c:	mov	r2, #0
   1bc20:	mov	r3, #0
   1bc24:	mov	r0, r4
   1bc28:	bl	1bc88 <__assert_fail@plt+0xa8b8>
   1bc2c:	b	1bc08 <__assert_fail@plt+0xa838>
   1bc30:	push	{r4, r5, lr}
   1bc34:	sub	sp, sp, #12
   1bc38:	mov	r5, r0
   1bc3c:	bl	11298 <__errno_location@plt>
   1bc40:	mov	r4, r0
   1bc44:	ldr	r3, [r0]
   1bc48:	str	r3, [sp]
   1bc4c:	str	r3, [sp, #4]
   1bc50:	mov	r3, #0
   1bc54:	str	r3, [r0]
   1bc58:	mov	r0, r5
   1bc5c:	bl	110d0 <free@plt>
   1bc60:	ldr	r3, [r4]
   1bc64:	cmp	r3, #0
   1bc68:	moveq	r3, #4
   1bc6c:	movne	r3, #0
   1bc70:	add	r2, sp, #8
   1bc74:	add	r3, r2, r3
   1bc78:	ldr	r3, [r3, #-8]
   1bc7c:	str	r3, [r4]
   1bc80:	add	sp, sp, #12
   1bc84:	pop	{r4, r5, pc}
   1bc88:	push	{r4, r5, r6, r7, lr}
   1bc8c:	sub	sp, sp, #12
   1bc90:	mov	r4, r0
   1bc94:	mov	r6, r2
   1bc98:	mov	r7, r3
   1bc9c:	ldr	r5, [sp, #32]
   1bca0:	ldr	r2, [r0, #8]
   1bca4:	ldr	r3, [r0, #4]
   1bca8:	cmp	r2, r3
   1bcac:	beq	1bccc <__assert_fail@plt+0xa8fc>
   1bcb0:	str	r5, [sp]
   1bcb4:	mov	r2, r6
   1bcb8:	mov	r3, r7
   1bcbc:	mov	r0, r4
   1bcc0:	bl	11304 <fseeko64@plt>
   1bcc4:	add	sp, sp, #12
   1bcc8:	pop	{r4, r5, r6, r7, pc}
   1bccc:	ldr	r2, [r0, #20]
   1bcd0:	ldr	r3, [r0, #16]
   1bcd4:	cmp	r2, r3
   1bcd8:	bne	1bcb0 <__assert_fail@plt+0xa8e0>
   1bcdc:	ldr	r3, [r0, #36]	; 0x24
   1bce0:	cmp	r3, #0
   1bce4:	bne	1bcb0 <__assert_fail@plt+0xa8e0>
   1bce8:	bl	112e0 <fileno@plt>
   1bcec:	str	r5, [sp]
   1bcf0:	mov	r2, r6
   1bcf4:	mov	r3, r7
   1bcf8:	bl	11190 <lseek64@plt>
   1bcfc:	mvn	r2, #0
   1bd00:	mvn	r3, #0
   1bd04:	cmp	r1, r3
   1bd08:	cmpeq	r0, r2
   1bd0c:	beq	1bd28 <__assert_fail@plt+0xa958>
   1bd10:	ldr	r3, [r4]
   1bd14:	bic	r3, r3, #16
   1bd18:	str	r3, [r4]
   1bd1c:	strd	r0, [r4, #80]	; 0x50
   1bd20:	mov	r0, #0
   1bd24:	b	1bcc4 <__assert_fail@plt+0xa8f4>
   1bd28:	mvn	r0, #0
   1bd2c:	b	1bcc4 <__assert_fail@plt+0xa8f4>
   1bd30:	push	{r4, lr}
   1bd34:	mov	r0, #14
   1bd38:	bl	11334 <nl_langinfo@plt>
   1bd3c:	cmp	r0, #0
   1bd40:	beq	1bd58 <__assert_fail@plt+0xa988>
   1bd44:	ldrb	r2, [r0]
   1bd48:	ldr	r3, [pc, #16]	; 1bd60 <__assert_fail@plt+0xa990>
   1bd4c:	cmp	r2, #0
   1bd50:	moveq	r0, r3
   1bd54:	pop	{r4, pc}
   1bd58:	ldr	r0, [pc]	; 1bd60 <__assert_fail@plt+0xa990>
   1bd5c:	pop	{r4, pc}
   1bd60:	andeq	r0, r2, ip, lsr #18
   1bd64:	push	{r4, r5, r6, r7, lr}
   1bd68:	sub	sp, sp, #12
   1bd6c:	mov	r7, r1
   1bd70:	mov	r5, r2
   1bd74:	subs	r6, r0, #0
   1bd78:	addeq	r6, sp, #4
   1bd7c:	mov	r0, r6
   1bd80:	bl	111b4 <mbrtowc@plt>
   1bd84:	mov	r4, r0
   1bd88:	cmp	r5, #0
   1bd8c:	cmnne	r0, #3
   1bd90:	bhi	1bda0 <__assert_fail@plt+0xa9d0>
   1bd94:	mov	r0, r4
   1bd98:	add	sp, sp, #12
   1bd9c:	pop	{r4, r5, r6, r7, pc}
   1bda0:	mov	r0, #0
   1bda4:	bl	1d80c <__assert_fail@plt+0xc43c>
   1bda8:	cmp	r0, #0
   1bdac:	ldrbeq	r3, [r7]
   1bdb0:	streq	r3, [r6]
   1bdb4:	moveq	r4, #1
   1bdb8:	b	1bd94 <__assert_fail@plt+0xa9c4>
   1bdbc:	push	{r4, r5, r6, lr}
   1bdc0:	mov	r5, r0
   1bdc4:	subs	r4, r2, #0
   1bdc8:	beq	1bdf8 <__assert_fail@plt+0xaa28>
   1bdcc:	mov	r6, r1
   1bdd0:	bl	1122c <__ctype_tolower_loc@plt>
   1bdd4:	add	r3, r6, r4
   1bdd8:	add	r2, r5, r4
   1bddc:	mov	r1, r6
   1bde0:	ldrb	lr, [r3, #-1]!
   1bde4:	ldr	ip, [r0]
   1bde8:	ldr	ip, [ip, lr, lsl #2]
   1bdec:	strb	ip, [r2, #-1]!
   1bdf0:	cmp	r3, r1
   1bdf4:	bne	1bde0 <__assert_fail@plt+0xaa10>
   1bdf8:	mov	r0, r5
   1bdfc:	pop	{r4, r5, r6, pc}
   1be00:	push	{r4, r5, r6, lr}
   1be04:	mov	r5, r0
   1be08:	subs	r4, r2, #0
   1be0c:	beq	1be3c <__assert_fail@plt+0xaa6c>
   1be10:	mov	r6, r1
   1be14:	bl	11238 <__ctype_toupper_loc@plt>
   1be18:	add	r3, r6, r4
   1be1c:	add	r2, r5, r4
   1be20:	mov	r1, r6
   1be24:	ldrb	lr, [r3, #-1]!
   1be28:	ldr	ip, [r0]
   1be2c:	ldr	ip, [ip, lr, lsl #2]
   1be30:	strb	ip, [r2, #-1]!
   1be34:	cmp	r3, r1
   1be38:	bne	1be24 <__assert_fail@plt+0xaa54>
   1be3c:	mov	r0, r5
   1be40:	pop	{r4, r5, r6, pc}
   1be44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be48:	sub	sp, sp, #1104	; 0x450
   1be4c:	sub	sp, sp, #12
   1be50:	mov	sl, r0
   1be54:	str	r1, [sp, #32]
   1be58:	mov	r9, r2
   1be5c:	mov	r4, r3
   1be60:	str	r3, [sp, #36]	; 0x24
   1be64:	ldrb	r3, [sp, #1152]	; 0x480
   1be68:	str	r3, [sp, #56]	; 0x38
   1be6c:	ldr	r5, [sp, #1160]	; 0x488
   1be70:	bl	11298 <__errno_location@plt>
   1be74:	str	r0, [sp, #44]	; 0x2c
   1be78:	ldr	r3, [r0]
   1be7c:	str	r3, [sp, #64]	; 0x40
   1be80:	ldr	r2, [r4, #8]
   1be84:	mov	r0, r2
   1be88:	str	r2, [sp, #48]	; 0x30
   1be8c:	ldr	r3, [r4, #40]	; 0x28
   1be90:	mov	r1, r3
   1be94:	ldr	r3, [pc, #4012]	; 1ce48 <__assert_fail@plt+0xba78>
   1be98:	mov	r2, r1
   1be9c:	cmp	r1, #0
   1bea0:	moveq	r2, r3
   1bea4:	str	r2, [sp, #60]	; 0x3c
   1bea8:	cmp	r0, #12
   1beac:	ble	1bed0 <__assert_fail@plt+0xab00>
   1beb0:	sub	r3, r0, #12
   1beb4:	str	r3, [sp, #48]	; 0x30
   1beb8:	ldrb	r3, [r9]
   1bebc:	cmp	r3, #0
   1bec0:	beq	1d60c <__assert_fail@plt+0xc23c>
   1bec4:	mov	fp, #0
   1bec8:	ldr	r6, [pc, #3964]	; 1ce4c <__assert_fail@plt+0xba7c>
   1becc:	b	1bf34 <__assert_fail@plt+0xab64>
   1bed0:	ldr	r2, [sp, #48]	; 0x30
   1bed4:	mov	r3, r2
   1bed8:	cmp	r2, #0
   1bedc:	moveq	r3, #12
   1bee0:	str	r3, [sp, #48]	; 0x30
   1bee4:	b	1beb8 <__assert_fail@plt+0xaae8>
   1bee8:	cmp	sl, #0
   1beec:	beq	1bf18 <__assert_fail@plt+0xab48>
   1bef0:	cmp	r5, #1
   1bef4:	bls	1bf10 <__assert_fail@plt+0xab40>
   1bef8:	sub	r5, r5, #1
   1befc:	mov	r2, r5
   1bf00:	mov	r1, #32
   1bf04:	mov	r0, sl
   1bf08:	bl	112c8 <memset@plt>
   1bf0c:	add	sl, sl, r5
   1bf10:	ldrb	r3, [r9]
   1bf14:	strb	r3, [sl], #1
   1bf18:	add	fp, fp, r4
   1bf1c:	mov	r7, r9
   1bf20:	add	r9, r7, #1
   1bf24:	ldrb	r3, [r7, #1]
   1bf28:	mvn	r5, #0
   1bf2c:	cmp	r3, #0
   1bf30:	beq	1d610 <__assert_fail@plt+0xc240>
   1bf34:	cmp	r3, #37	; 0x25
   1bf38:	beq	1c090 <__assert_fail@plt+0xacc0>
   1bf3c:	bic	r5, r5, r5, asr #31
   1bf40:	cmp	r5, #1
   1bf44:	movcs	r4, r5
   1bf48:	movcc	r4, #1
   1bf4c:	ldr	r3, [sp, #32]
   1bf50:	sub	r3, r3, fp
   1bf54:	cmp	r4, r3
   1bf58:	bcc	1bee8 <__assert_fail@plt+0xab18>
   1bf5c:	mov	r3, #34	; 0x22
   1bf60:	ldr	r2, [sp, #44]	; 0x2c
   1bf64:	str	r3, [r2]
   1bf68:	mov	fp, #0
   1bf6c:	mov	r0, fp
   1bf70:	add	sp, sp, #1104	; 0x450
   1bf74:	add	sp, sp, #12
   1bf78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf7c:	str	r3, [sp, #28]
   1bf80:	b	1bf88 <__assert_fail@plt+0xabb8>
   1bf84:	mov	r8, r1
   1bf88:	ldrb	r3, [r7, #1]!
   1bf8c:	sub	r2, r3, #35	; 0x23
   1bf90:	cmp	r2, #60	; 0x3c
   1bf94:	ldrls	pc, [pc, r2, lsl #2]
   1bf98:	b	1c0b8 <__assert_fail@plt+0xace8>
   1bf9c:	andeq	fp, r1, r4, lsl #31
   1bfa0:	strheq	ip, [r1], -r8
   1bfa4:	strheq	ip, [r1], -r8
   1bfa8:	strheq	ip, [r1], -r8
   1bfac:	strheq	ip, [r1], -r8
   1bfb0:	strheq	ip, [r1], -r8
   1bfb4:	strheq	ip, [r1], -r8
   1bfb8:	strheq	ip, [r1], -r8
   1bfbc:	andeq	fp, r1, ip, ror pc
   1bfc0:	strheq	ip, [r1], -r8
   1bfc4:	andeq	fp, r1, ip, ror pc
   1bfc8:	strheq	ip, [r1], -r8
   1bfcc:	strheq	ip, [r1], -r8
   1bfd0:	andeq	fp, r1, ip, ror pc
   1bfd4:	strheq	ip, [r1], -r8
   1bfd8:	strheq	ip, [r1], -r8
   1bfdc:	strheq	ip, [r1], -r8
   1bfe0:	strheq	ip, [r1], -r8
   1bfe4:	strheq	ip, [r1], -r8
   1bfe8:	strheq	ip, [r1], -r8
   1bfec:	strheq	ip, [r1], -r8
   1bff0:	strheq	ip, [r1], -r8
   1bff4:	strheq	ip, [r1], -r8
   1bff8:	strheq	ip, [r1], -r8
   1bffc:	strheq	ip, [r1], -r8
   1c000:	strheq	ip, [r1], -r8
   1c004:	strheq	ip, [r1], -r8
   1c008:	strheq	ip, [r1], -r8
   1c00c:	strheq	ip, [r1], -r8
   1c010:	strheq	ip, [r1], -r8
   1c014:	strheq	ip, [r1], -r8
   1c018:	strheq	ip, [r1], -r8
   1c01c:	strheq	ip, [r1], -r8
   1c020:	strheq	ip, [r1], -r8
   1c024:	strheq	ip, [r1], -r8
   1c028:	strheq	ip, [r1], -r8
   1c02c:	strheq	ip, [r1], -r8
   1c030:	strheq	ip, [r1], -r8
   1c034:	strheq	ip, [r1], -r8
   1c038:	strheq	ip, [r1], -r8
   1c03c:	strheq	ip, [r1], -r8
   1c040:	strheq	ip, [r1], -r8
   1c044:	strheq	ip, [r1], -r8
   1c048:	strheq	ip, [r1], -r8
   1c04c:	strheq	ip, [r1], -r8
   1c050:	strheq	ip, [r1], -r8
   1c054:	strheq	ip, [r1], -r8
   1c058:	strheq	ip, [r1], -r8
   1c05c:	strheq	ip, [r1], -r8
   1c060:	strheq	ip, [r1], -r8
   1c064:	strheq	ip, [r1], -r8
   1c068:	strheq	ip, [r1], -r8
   1c06c:	strheq	ip, [r1], -r8
   1c070:	strheq	ip, [r1], -r8
   1c074:	strheq	ip, [r1], -r8
   1c078:	strheq	ip, [r1], -r8
   1c07c:	strheq	ip, [r1], -r8
   1c080:	strheq	ip, [r1], -r8
   1c084:	strheq	ip, [r1], -r8
   1c088:	andeq	ip, r1, ip, lsr #1
   1c08c:	andeq	fp, r1, ip, ror pc
   1c090:	ldr	r3, [sp, #56]	; 0x38
   1c094:	str	r3, [sp, #40]	; 0x28
   1c098:	mov	r7, r9
   1c09c:	mov	r8, #0
   1c0a0:	str	r8, [sp, #28]
   1c0a4:	mov	r1, #1
   1c0a8:	b	1bf88 <__assert_fail@plt+0xabb8>
   1c0ac:	mov	r3, #1
   1c0b0:	str	r3, [sp, #40]	; 0x28
   1c0b4:	b	1bf88 <__assert_fail@plt+0xabb8>
   1c0b8:	sub	r3, r3, #48	; 0x30
   1c0bc:	cmp	r3, #9
   1c0c0:	bhi	1c198 <__assert_fail@plt+0xadc8>
   1c0c4:	mov	r5, #0
   1c0c8:	ldr	r4, [pc, #3456]	; 1ce50 <__assert_fail@plt+0xba80>
   1c0cc:	b	1c128 <__assert_fail@plt+0xad58>
   1c0d0:	cmn	r5, #1
   1c0d4:	moveq	r0, #0
   1c0d8:	beq	1c13c <__assert_fail@plt+0xad6c>
   1c0dc:	mov	r1, r5
   1c0e0:	mov	r0, #-2147483648	; 0x80000000
   1c0e4:	bl	1db20 <__assert_fail@plt+0xc750>
   1c0e8:	cmp	r0, #9
   1c0ec:	movgt	r0, #0
   1c0f0:	movle	r0, #1
   1c0f4:	b	1c13c <__assert_fail@plt+0xad6c>
   1c0f8:	rsb	r3, r2, #-2147483600	; 0x80000030
   1c0fc:	cmp	r5, r3
   1c100:	movge	r3, #0
   1c104:	movlt	r3, #1
   1c108:	cmp	r3, #0
   1c10c:	addeq	r5, r2, r5
   1c110:	subeq	r5, r5, #48	; 0x30
   1c114:	mvnne	r5, #-2147483648	; 0x80000000
   1c118:	ldrb	r3, [r7, #1]!
   1c11c:	sub	r3, r3, #48	; 0x30
   1c120:	cmp	r3, #9
   1c124:	bhi	1c198 <__assert_fail@plt+0xadc8>
   1c128:	cmp	r5, #0
   1c12c:	blt	1c0d0 <__assert_fail@plt+0xad00>
   1c130:	cmp	r5, r4
   1c134:	movle	r0, #0
   1c138:	movgt	r0, #1
   1c13c:	cmp	r0, #0
   1c140:	mvnne	r5, #-2147483648	; 0x80000000
   1c144:	bne	1c118 <__assert_fail@plt+0xad48>
   1c148:	add	r5, r5, r5, lsl #2
   1c14c:	lsl	r5, r5, #1
   1c150:	ldrb	r2, [r7]
   1c154:	subs	r3, r2, #48	; 0x30
   1c158:	bmi	1c0f8 <__assert_fail@plt+0xad28>
   1c15c:	cmp	r5, #0
   1c160:	blt	1c184 <__assert_fail@plt+0xadb4>
   1c164:	rsb	r3, r3, #2130706432	; 0x7f000000
   1c168:	add	r3, r3, #16711680	; 0xff0000
   1c16c:	add	r3, r3, #65280	; 0xff00
   1c170:	add	r3, r3, #255	; 0xff
   1c174:	cmp	r5, r3
   1c178:	movle	r3, #0
   1c17c:	movgt	r3, #1
   1c180:	b	1c108 <__assert_fail@plt+0xad38>
   1c184:	rsb	r1, r5, #-2147483648	; 0x80000000
   1c188:	cmp	r3, r1
   1c18c:	movge	r3, #0
   1c190:	movlt	r3, #1
   1c194:	b	1c108 <__assert_fail@plt+0xad38>
   1c198:	ldrb	r2, [r7]
   1c19c:	cmp	r2, #69	; 0x45
   1c1a0:	beq	1c3b0 <__assert_fail@plt+0xafe0>
   1c1a4:	cmp	r2, #79	; 0x4f
   1c1a8:	movne	r2, #0
   1c1ac:	beq	1c3b0 <__assert_fail@plt+0xafe0>
   1c1b0:	ldrb	r1, [r7]
   1c1b4:	mov	r4, r1
   1c1b8:	cmp	r1, #122	; 0x7a
   1c1bc:	ldrls	pc, [pc, r1, lsl #2]
   1c1c0:	b	1c4f8 <__assert_fail@plt+0xb128>
   1c1c4:	strdeq	ip, [r1], -r4
   1c1c8:	strdeq	ip, [r1], -r8
   1c1cc:	strdeq	ip, [r1], -r8
   1c1d0:	strdeq	ip, [r1], -r8
   1c1d4:	strdeq	ip, [r1], -r8
   1c1d8:	strdeq	ip, [r1], -r8
   1c1dc:	strdeq	ip, [r1], -r8
   1c1e0:	strdeq	ip, [r1], -r8
   1c1e4:	strdeq	ip, [r1], -r8
   1c1e8:	strdeq	ip, [r1], -r8
   1c1ec:	strdeq	ip, [r1], -r8
   1c1f0:	strdeq	ip, [r1], -r8
   1c1f4:	strdeq	ip, [r1], -r8
   1c1f8:	strdeq	ip, [r1], -r8
   1c1fc:	strdeq	ip, [r1], -r8
   1c200:	strdeq	ip, [r1], -r8
   1c204:	strdeq	ip, [r1], -r8
   1c208:	strdeq	ip, [r1], -r8
   1c20c:	strdeq	ip, [r1], -r8
   1c210:	strdeq	ip, [r1], -r8
   1c214:	strdeq	ip, [r1], -r8
   1c218:	strdeq	ip, [r1], -r8
   1c21c:	strdeq	ip, [r1], -r8
   1c220:	strdeq	ip, [r1], -r8
   1c224:	strdeq	ip, [r1], -r8
   1c228:	strdeq	ip, [r1], -r8
   1c22c:	strdeq	ip, [r1], -r8
   1c230:	strdeq	ip, [r1], -r8
   1c234:	strdeq	ip, [r1], -r8
   1c238:	strdeq	ip, [r1], -r8
   1c23c:	strdeq	ip, [r1], -r8
   1c240:	strdeq	ip, [r1], -r8
   1c244:	strdeq	ip, [r1], -r8
   1c248:	strdeq	ip, [r1], -r8
   1c24c:	strdeq	ip, [r1], -r8
   1c250:	strdeq	ip, [r1], -r8
   1c254:	strdeq	ip, [r1], -r8
   1c258:	andeq	ip, r1, r8, ror #9
   1c25c:	strdeq	ip, [r1], -r8
   1c260:	strdeq	ip, [r1], -r8
   1c264:	strdeq	ip, [r1], -r8
   1c268:	strdeq	ip, [r1], -r8
   1c26c:	strdeq	ip, [r1], -r8
   1c270:	strdeq	ip, [r1], -r8
   1c274:	strdeq	ip, [r1], -r8
   1c278:	strdeq	ip, [r1], -r8
   1c27c:	strdeq	ip, [r1], -r8
   1c280:	strdeq	ip, [r1], -r8
   1c284:	strdeq	ip, [r1], -r8
   1c288:	strdeq	ip, [r1], -r8
   1c28c:	strdeq	ip, [r1], -r8
   1c290:	strdeq	ip, [r1], -r8
   1c294:	strdeq	ip, [r1], -r8
   1c298:	strdeq	ip, [r1], -r8
   1c29c:	strdeq	ip, [r1], -r8
   1c2a0:	strdeq	ip, [r1], -r8
   1c2a4:	strdeq	ip, [r1], -r8
   1c2a8:	strdeq	ip, [r1], -r8
   1c2ac:	andeq	ip, r1, r4, asr #9
   1c2b0:	strdeq	ip, [r1], -r8
   1c2b4:	strdeq	ip, [r1], -r8
   1c2b8:	strdeq	ip, [r1], -r8
   1c2bc:	strdeq	ip, [r1], -r8
   1c2c0:	strdeq	ip, [r1], -r8
   1c2c4:	strdeq	ip, [r1], -r8
   1c2c8:	andeq	ip, r1, ip, asr r6
   1c2cc:	muleq	r1, ip, r6
   1c2d0:	andeq	ip, r1, r0, asr #16
   1c2d4:	andeq	ip, r1, r0, ror #17
   1c2d8:	strdeq	ip, [r1], -r8
   1c2dc:	muleq	r1, r8, sl
   1c2e0:	andeq	sp, r1, r4, asr #32
   1c2e4:	ldrdeq	ip, [r1], -r0
   1c2e8:	andeq	ip, r1, r8, ror #21
   1c2ec:	strdeq	ip, [r1], -r8
   1c2f0:	strdeq	ip, [r1], -r8
   1c2f4:	strdeq	ip, [r1], -r8
   1c2f8:	andeq	ip, r1, r4, asr fp
   1c2fc:	andeq	ip, r1, r0, lsr #23
   1c300:	strdeq	ip, [r1], -r8
   1c304:			; <UNDEFINED> instruction: 0x0001cdb8
   1c308:	strdeq	ip, [r1], -r8
   1c30c:	ldrdeq	ip, [r1], -r0
   1c310:	andeq	ip, r1, r0, lsr lr
   1c314:			; <UNDEFINED> instruction: 0x0001c3b8
   1c318:	andeq	sp, r1, ip
   1c31c:	andeq	sp, r1, r4, asr #32
   1c320:			; <UNDEFINED> instruction: 0x0001d2b4
   1c324:	andeq	ip, r1, r4, lsr pc
   1c328:	andeq	sp, r1, r4, lsr #6
   1c32c:			; <UNDEFINED> instruction: 0x0001d3b4
   1c330:	strdeq	ip, [r1], -r8
   1c334:	strdeq	ip, [r1], -r8
   1c338:	strdeq	ip, [r1], -r8
   1c33c:	strdeq	ip, [r1], -r8
   1c340:	strdeq	ip, [r1], -r8
   1c344:	strdeq	ip, [r1], -r8
   1c348:	andeq	ip, r1, r4, lsr #12
   1c34c:	andeq	ip, r1, ip, ror r6
   1c350:			; <UNDEFINED> instruction: 0x0001c6bc
   1c354:	strdeq	ip, [r1], -r8
   1c358:	andeq	ip, r1, r0, lsl r9
   1c35c:	strdeq	ip, [r1], -r8
   1c360:	andeq	sp, r1, r4, asr #32
   1c364:	andeq	ip, r1, ip, ror r6
   1c368:	strdeq	ip, [r1], -r8
   1c36c:	andeq	ip, r1, r0, lsr #22
   1c370:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c374:	andeq	ip, r1, r0, lsl fp
   1c378:	andeq	ip, r1, ip, ror #22
   1c37c:	andeq	ip, r1, r8, lsr #26
   1c380:	strdeq	ip, [r1], -r8
   1c384:	ldrdeq	ip, [r1], -r8
   1c388:	andeq	ip, r1, r0, ror #27
   1c38c:	andeq	ip, r1, r8, lsl #14
   1c390:	andeq	ip, r1, r8, lsl #29
   1c394:	andeq	ip, r1, r8, asr #30
   1c398:	ldrdeq	ip, [r1], -r8
   1c39c:	strdeq	ip, [r1], -r8
   1c3a0:	andeq	sp, r1, ip, lsl #6
   1c3a4:	andeq	ip, r1, ip, asr #17
   1c3a8:	andeq	sp, r1, r0, ror #6
   1c3ac:	andeq	sp, r1, r8, asr #9
   1c3b0:	add	r7, r7, #1
   1c3b4:	b	1c1b0 <__assert_fail@plt+0xade0>
   1c3b8:	mvn	r8, #0
   1c3bc:	ldr	r3, [pc, #2704]	; 1ce54 <__assert_fail@plt+0xba84>
   1c3c0:	str	r3, [sp, #52]	; 0x34
   1c3c4:	ldr	r3, [sp, #1172]	; 0x494
   1c3c8:	str	r3, [sp, #20]
   1c3cc:	ldr	r3, [sp, #1168]	; 0x490
   1c3d0:	str	r3, [sp, #16]
   1c3d4:	ldr	r3, [sp, #1164]	; 0x48c
   1c3d8:	str	r3, [sp, #12]
   1c3dc:	str	r8, [sp, #8]
   1c3e0:	ldr	r4, [sp, #28]
   1c3e4:	str	r4, [sp, #4]
   1c3e8:	ldr	r3, [sp, #40]	; 0x28
   1c3ec:	str	r3, [sp]
   1c3f0:	ldr	r3, [sp, #36]	; 0x24
   1c3f4:	ldr	r2, [sp, #52]	; 0x34
   1c3f8:	mvn	r1, #0
   1c3fc:	mov	r0, #0
   1c400:	bl	1be44 <__assert_fail@plt+0xaa74>
   1c404:	mov	r9, r0
   1c408:	subs	r3, r4, #45	; 0x2d
   1c40c:	movne	r3, #1
   1c410:	cmp	r5, #0
   1c414:	movlt	r3, #0
   1c418:	cmp	r3, #0
   1c41c:	moveq	r5, #0
   1c420:	mov	r4, r5
   1c424:	cmp	r5, r0
   1c428:	movcc	r5, r0
   1c42c:	ldr	r3, [sp, #32]
   1c430:	sub	r3, r3, fp
   1c434:	str	r3, [sp, #68]	; 0x44
   1c438:	cmp	r5, r3
   1c43c:	bcs	1c6f8 <__assert_fail@plt+0xb328>
   1c440:	cmp	sl, #0
   1c444:	beq	1c4bc <__assert_fail@plt+0xb0ec>
   1c448:	cmp	r4, r0
   1c44c:	bls	1c478 <__assert_fail@plt+0xb0a8>
   1c450:	sub	r4, r4, r0
   1c454:	ldr	r3, [sp, #28]
   1c458:	cmp	r3, #43	; 0x2b
   1c45c:	cmpne	r3, #48	; 0x30
   1c460:	mov	r2, r4
   1c464:	moveq	r1, #48	; 0x30
   1c468:	movne	r1, #32
   1c46c:	mov	r0, sl
   1c470:	bl	112c8 <memset@plt>
   1c474:	add	sl, sl, r4
   1c478:	ldr	r3, [sp, #1172]	; 0x494
   1c47c:	str	r3, [sp, #20]
   1c480:	ldr	r3, [sp, #1168]	; 0x490
   1c484:	str	r3, [sp, #16]
   1c488:	ldr	r3, [sp, #1164]	; 0x48c
   1c48c:	str	r3, [sp, #12]
   1c490:	str	r8, [sp, #8]
   1c494:	ldr	r3, [sp, #28]
   1c498:	str	r3, [sp, #4]
   1c49c:	ldr	r3, [sp, #40]	; 0x28
   1c4a0:	str	r3, [sp]
   1c4a4:	ldr	r3, [sp, #36]	; 0x24
   1c4a8:	ldr	r2, [sp, #52]	; 0x34
   1c4ac:	ldr	r1, [sp, #68]	; 0x44
   1c4b0:	mov	r0, sl
   1c4b4:	bl	1be44 <__assert_fail@plt+0xaa74>
   1c4b8:	add	sl, sl, r9
   1c4bc:	add	fp, fp, r5
   1c4c0:	b	1bf20 <__assert_fail@plt+0xab50>
   1c4c4:	add	r0, r7, #1
   1c4c8:	ldrb	r3, [r7, #1]
   1c4cc:	cmp	r3, #58	; 0x3a
   1c4d0:	movne	lr, #1
   1c4d4:	beq	1d4a8 <__assert_fail@plt+0xc0d8>
   1c4d8:	cmp	r3, #122	; 0x7a
   1c4dc:	moveq	r7, r0
   1c4e0:	bne	1c4f8 <__assert_fail@plt+0xb128>
   1c4e4:	b	1d4cc <__assert_fail@plt+0xc0fc>
   1c4e8:	sub	r3, r7, #1
   1c4ec:	cmp	r9, r3
   1c4f0:	beq	1c598 <__assert_fail@plt+0xb1c8>
   1c4f4:	sub	r7, r7, #1
   1c4f8:	sub	r8, r7, r9
   1c4fc:	add	r8, r8, #1
   1c500:	ldr	r3, [sp, #28]
   1c504:	subs	r3, r3, #45	; 0x2d
   1c508:	movne	r3, #1
   1c50c:	cmp	r5, #0
   1c510:	movlt	r3, #0
   1c514:	cmp	r3, #0
   1c518:	moveq	r5, #0
   1c51c:	mov	r4, r5
   1c520:	cmp	r5, r8
   1c524:	movcc	r5, r8
   1c528:	ldr	r3, [sp, #32]
   1c52c:	sub	r3, r3, fp
   1c530:	cmp	r5, r3
   1c534:	bcs	1d5e8 <__assert_fail@plt+0xc218>
   1c538:	cmp	sl, #0
   1c53c:	beq	1c590 <__assert_fail@plt+0xb1c0>
   1c540:	cmp	r4, r8
   1c544:	bls	1c570 <__assert_fail@plt+0xb1a0>
   1c548:	sub	r4, r4, r8
   1c54c:	ldr	r3, [sp, #28]
   1c550:	cmp	r3, #43	; 0x2b
   1c554:	cmpne	r3, #48	; 0x30
   1c558:	mov	r2, r4
   1c55c:	moveq	r1, #48	; 0x30
   1c560:	movne	r1, #32
   1c564:	mov	r0, sl
   1c568:	bl	112c8 <memset@plt>
   1c56c:	add	sl, sl, r4
   1c570:	ldr	r3, [sp, #40]	; 0x28
   1c574:	cmp	r3, #0
   1c578:	beq	1d5f8 <__assert_fail@plt+0xc228>
   1c57c:	mov	r2, r8
   1c580:	mov	r1, r9
   1c584:	mov	r0, sl
   1c588:	bl	1be00 <__assert_fail@plt+0xaa30>
   1c58c:	add	sl, sl, r8
   1c590:	add	fp, fp, r5
   1c594:	b	1bf20 <__assert_fail@plt+0xab50>
   1c598:	ldr	r3, [sp, #28]
   1c59c:	subs	r3, r3, #45	; 0x2d
   1c5a0:	movne	r3, #1
   1c5a4:	cmp	r5, #0
   1c5a8:	movlt	r3, #0
   1c5ac:	cmp	r3, #0
   1c5b0:	moveq	r5, #0
   1c5b4:	mov	r4, r5
   1c5b8:	cmp	r5, #1
   1c5bc:	movcc	r5, #1
   1c5c0:	ldr	r3, [sp, #32]
   1c5c4:	sub	r3, r3, fp
   1c5c8:	cmp	r5, r3
   1c5cc:	movcs	r3, #34	; 0x22
   1c5d0:	ldrcs	r2, [sp, #44]	; 0x2c
   1c5d4:	strcs	r3, [r2]
   1c5d8:	bcs	1bf68 <__assert_fail@plt+0xab98>
   1c5dc:	cmp	sl, #0
   1c5e0:	beq	1c61c <__assert_fail@plt+0xb24c>
   1c5e4:	cmp	r4, #1
   1c5e8:	bls	1c614 <__assert_fail@plt+0xb244>
   1c5ec:	sub	r4, r4, #1
   1c5f0:	ldr	r3, [sp, #28]
   1c5f4:	cmp	r3, #43	; 0x2b
   1c5f8:	cmpne	r3, #48	; 0x30
   1c5fc:	mov	r2, r4
   1c600:	moveq	r1, #48	; 0x30
   1c604:	movne	r1, #32
   1c608:	mov	r0, sl
   1c60c:	bl	112c8 <memset@plt>
   1c610:	add	sl, sl, r4
   1c614:	ldrb	r3, [r7]
   1c618:	strb	r3, [sl], #1
   1c61c:	add	fp, fp, r5
   1c620:	b	1bf20 <__assert_fail@plt+0xab50>
   1c624:	cmp	r2, #0
   1c628:	bne	1c4f8 <__assert_fail@plt+0xb128>
   1c62c:	ldr	r3, [sp, #40]	; 0x28
   1c630:	cmp	r8, #0
   1c634:	movne	r3, r8
   1c638:	str	r3, [sp, #40]	; 0x28
   1c63c:	mov	r4, #97	; 0x61
   1c640:	mov	r3, #32
   1c644:	strb	r3, [sp, #72]	; 0x48
   1c648:	mov	r3, #37	; 0x25
   1c64c:	strb	r3, [sp, #73]	; 0x49
   1c650:	mov	r8, #0
   1c654:	add	r3, sp, #74	; 0x4a
   1c658:	b	1c73c <__assert_fail@plt+0xb36c>
   1c65c:	cmp	r2, #0
   1c660:	bne	1c4f8 <__assert_fail@plt+0xb128>
   1c664:	ldr	r3, [sp, #40]	; 0x28
   1c668:	cmp	r8, #0
   1c66c:	movne	r3, r8
   1c670:	str	r3, [sp, #40]	; 0x28
   1c674:	mov	r4, #65	; 0x41
   1c678:	b	1c640 <__assert_fail@plt+0xb270>
   1c67c:	ldr	r3, [sp, #40]	; 0x28
   1c680:	cmp	r8, #0
   1c684:	movne	r3, r8
   1c688:	str	r3, [sp, #40]	; 0x28
   1c68c:	cmp	r2, #69	; 0x45
   1c690:	movne	r8, #0
   1c694:	bne	1c714 <__assert_fail@plt+0xb344>
   1c698:	b	1c4f8 <__assert_fail@plt+0xb128>
   1c69c:	cmp	r2, #69	; 0x45
   1c6a0:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1c6a4:	cmp	r8, #0
   1c6a8:	moveq	r4, #66	; 0x42
   1c6ac:	strne	r8, [sp, #40]	; 0x28
   1c6b0:	movne	r4, #66	; 0x42
   1c6b4:	movne	r8, #0
   1c6b8:	b	1c714 <__assert_fail@plt+0xb344>
   1c6bc:	cmp	r2, #79	; 0x4f
   1c6c0:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1c6c4:	mov	r4, #99	; 0x63
   1c6c8:	mov	r8, #0
   1c6cc:	b	1c714 <__assert_fail@plt+0xb344>
   1c6d0:	mvn	r8, #0
   1c6d4:	ldr	r3, [pc, #1916]	; 1ce58 <__assert_fail@plt+0xba88>
   1c6d8:	str	r3, [sp, #52]	; 0x34
   1c6dc:	b	1c3c4 <__assert_fail@plt+0xaff4>
   1c6e0:	mov	r8, #4
   1c6e4:	ldr	r3, [pc, #1904]	; 1ce5c <__assert_fail@plt+0xba8c>
   1c6e8:	str	r3, [sp, #52]	; 0x34
   1c6ec:	mov	r3, #43	; 0x2b
   1c6f0:	str	r3, [sp, #28]
   1c6f4:	b	1c3c4 <__assert_fail@plt+0xaff4>
   1c6f8:	mov	r3, #34	; 0x22
   1c6fc:	ldr	r2, [sp, #44]	; 0x2c
   1c700:	str	r3, [r2]
   1c704:	b	1bf68 <__assert_fail@plt+0xab98>
   1c708:	mov	r8, #0
   1c70c:	b	1c714 <__assert_fail@plt+0xb344>
   1c710:	mov	r8, #0
   1c714:	mov	r3, #32
   1c718:	strb	r3, [sp, #72]	; 0x48
   1c71c:	mov	r3, #37	; 0x25
   1c720:	strb	r3, [sp, #73]	; 0x49
   1c724:	cmp	r2, #0
   1c728:	addeq	r3, sp, #72	; 0x48
   1c72c:	addeq	r3, sp, #74	; 0x4a
   1c730:	beq	1c73c <__assert_fail@plt+0xb36c>
   1c734:	strb	r2, [sp, #74]	; 0x4a
   1c738:	add	r3, sp, #75	; 0x4b
   1c73c:	strb	r4, [r3]
   1c740:	mov	r2, #0
   1c744:	strb	r2, [r3, #1]
   1c748:	ldr	r3, [sp, #36]	; 0x24
   1c74c:	add	r2, sp, #72	; 0x48
   1c750:	mov	r1, #1024	; 0x400
   1c754:	add	r0, sp, #88	; 0x58
   1c758:	bl	111fc <strftime@plt>
   1c75c:	cmp	r0, #0
   1c760:	beq	1bf20 <__assert_fail@plt+0xab50>
   1c764:	sub	r9, r0, #1
   1c768:	ldr	r3, [sp, #28]
   1c76c:	subs	r3, r3, #45	; 0x2d
   1c770:	movne	r3, #1
   1c774:	cmp	r5, #0
   1c778:	movlt	r3, #0
   1c77c:	cmp	r3, #0
   1c780:	moveq	r5, #0
   1c784:	mov	r4, r5
   1c788:	cmp	r5, r9
   1c78c:	movcc	r5, r9
   1c790:	ldr	r3, [sp, #32]
   1c794:	sub	r3, r3, fp
   1c798:	cmp	r5, r3
   1c79c:	bcs	1c800 <__assert_fail@plt+0xb430>
   1c7a0:	cmp	sl, #0
   1c7a4:	beq	1c824 <__assert_fail@plt+0xb454>
   1c7a8:	cmp	r4, r9
   1c7ac:	bls	1c7d8 <__assert_fail@plt+0xb408>
   1c7b0:	sub	r4, r4, r9
   1c7b4:	ldr	r3, [sp, #28]
   1c7b8:	cmp	r3, #43	; 0x2b
   1c7bc:	cmpne	r3, #48	; 0x30
   1c7c0:	mov	r2, r4
   1c7c4:	moveq	r1, #48	; 0x30
   1c7c8:	movne	r1, #32
   1c7cc:	mov	r0, sl
   1c7d0:	bl	112c8 <memset@plt>
   1c7d4:	add	sl, sl, r4
   1c7d8:	cmp	r8, #0
   1c7dc:	bne	1c810 <__assert_fail@plt+0xb440>
   1c7e0:	ldr	r3, [sp, #40]	; 0x28
   1c7e4:	cmp	r3, #0
   1c7e8:	beq	1c82c <__assert_fail@plt+0xb45c>
   1c7ec:	mov	r2, r9
   1c7f0:	add	r1, sp, #89	; 0x59
   1c7f4:	mov	r0, sl
   1c7f8:	bl	1be00 <__assert_fail@plt+0xaa30>
   1c7fc:	b	1c820 <__assert_fail@plt+0xb450>
   1c800:	mov	r3, #34	; 0x22
   1c804:	ldr	r2, [sp, #44]	; 0x2c
   1c808:	str	r3, [r2]
   1c80c:	b	1bf68 <__assert_fail@plt+0xab98>
   1c810:	mov	r2, r9
   1c814:	add	r1, sp, #89	; 0x59
   1c818:	mov	r0, sl
   1c81c:	bl	1bdbc <__assert_fail@plt+0xa9ec>
   1c820:	add	sl, sl, r9
   1c824:	add	fp, fp, r5
   1c828:	b	1bf20 <__assert_fail@plt+0xab50>
   1c82c:	mov	r2, r9
   1c830:	add	r1, sp, #89	; 0x59
   1c834:	mov	r0, sl
   1c838:	bl	110f4 <memcpy@plt>
   1c83c:	b	1c820 <__assert_fail@plt+0xb450>
   1c840:	cmp	r2, #69	; 0x45
   1c844:	beq	1d634 <__assert_fail@plt+0xc264>
   1c848:	ldr	r3, [sp, #36]	; 0x24
   1c84c:	ldr	r1, [r3, #20]
   1c850:	ldr	r3, [pc, #1564]	; 1ce74 <__assert_fail@plt+0xbaa4>
   1c854:	cmp	r1, r3
   1c858:	movge	r3, #0
   1c85c:	movlt	r3, #1
   1c860:	str	r3, [sp, #52]	; 0x34
   1c864:	add	r3, r1, #1888	; 0x760
   1c868:	add	r3, r3, #12
   1c86c:	ldr	r0, [pc, #1516]	; 1ce60 <__assert_fail@plt+0xba90>
   1c870:	cmp	r3, r0
   1c874:	movhi	r3, #0
   1c878:	movls	r3, #1
   1c87c:	mvn	r0, #98	; 0x62
   1c880:	mla	r3, r0, r3, r1
   1c884:	ldr	r1, [pc, #1516]	; 1ce78 <__assert_fail@plt+0xbaa8>
   1c888:	smull	r0, r1, r1, r3
   1c88c:	asr	r3, r3, #31
   1c890:	rsb	r3, r3, r1, asr #5
   1c894:	add	r3, r3, #19
   1c898:	mov	r8, #2
   1c89c:	ldr	r0, [sp, #28]
   1c8a0:	mov	r1, r0
   1c8a4:	ldr	ip, [sp, #1156]	; 0x484
   1c8a8:	cmp	r0, #0
   1c8ac:	moveq	r1, ip
   1c8b0:	str	r1, [sp, #28]
   1c8b4:	cmp	r1, #43	; 0x2b
   1c8b8:	movne	r1, #0
   1c8bc:	beq	1ca18 <__assert_fail@plt+0xb648>
   1c8c0:	mov	r9, r1
   1c8c4:	mov	r0, #0
   1c8c8:	b	1c944 <__assert_fail@plt+0xb574>
   1c8cc:	cmp	r2, #79	; 0x4f
   1c8d0:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1c8d4:	mov	r4, #120	; 0x78
   1c8d8:	mov	r8, #0
   1c8dc:	b	1c714 <__assert_fail@plt+0xb344>
   1c8e0:	cmp	r2, #0
   1c8e4:	bne	1c4f8 <__assert_fail@plt+0xb128>
   1c8e8:	mvn	r8, #0
   1c8ec:	ldr	r3, [pc, #1392]	; 1ce64 <__assert_fail@plt+0xba94>
   1c8f0:	str	r3, [sp, #52]	; 0x34
   1c8f4:	b	1c3c4 <__assert_fail@plt+0xaff4>
   1c8f8:	cmp	r2, #69	; 0x45
   1c8fc:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1c900:	ldr	r3, [sp, #36]	; 0x24
   1c904:	ldr	r3, [r3, #12]
   1c908:	mov	r8, #2
   1c90c:	b	1c934 <__assert_fail@plt+0xb564>
   1c910:	cmp	r2, #69	; 0x45
   1c914:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1c918:	ldr	r3, [sp, #36]	; 0x24
   1c91c:	ldr	r3, [r3, #12]
   1c920:	ldr	r1, [sp, #28]
   1c924:	cmp	r1, #0
   1c928:	mov	r8, #2
   1c92c:	moveq	r1, #95	; 0x5f
   1c930:	streq	r1, [sp, #28]
   1c934:	lsr	r1, r3, #31
   1c938:	str	r1, [sp, #52]	; 0x34
   1c93c:	mov	r0, #0
   1c940:	mov	r9, r0
   1c944:	ldr	ip, [sp, #52]	; 0x34
   1c948:	eor	r1, ip, #1
   1c94c:	cmp	r2, #79	; 0x4f
   1c950:	movne	r1, #0
   1c954:	andeq	r1, r1, #1
   1c958:	cmp	r1, #0
   1c95c:	bne	1c710 <__assert_fail@plt+0xb340>
   1c960:	mov	r1, ip
   1c964:	cmp	ip, #0
   1c968:	rsbne	r3, r3, #0
   1c96c:	add	r4, sp, #86	; 0x56
   1c970:	mov	lr, #58	; 0x3a
   1c974:	mov	ip, r3
   1c978:	tst	r0, #1
   1c97c:	subne	r1, r4, #1
   1c980:	strbne	lr, [r4, #-1]
   1c984:	moveq	r1, r4
   1c988:	sub	r4, r1, #1
   1c98c:	ldr	r3, [pc, #1236]	; 1ce68 <__assert_fail@plt+0xba98>
   1c990:	umull	r3, r2, r3, ip
   1c994:	lsr	r2, r2, #3
   1c998:	add	r3, r2, r2, lsl #2
   1c99c:	sub	r3, ip, r3, lsl #1
   1c9a0:	add	r3, r3, #48	; 0x30
   1c9a4:	strb	r3, [r1, #-1]
   1c9a8:	mov	ip, r2
   1c9ac:	asrs	r0, r0, #1
   1c9b0:	movne	r3, #1
   1c9b4:	moveq	r3, #0
   1c9b8:	cmp	r2, #0
   1c9bc:	moveq	r2, r3
   1c9c0:	orrne	r2, r3, #1
   1c9c4:	cmp	r2, #0
   1c9c8:	bne	1c978 <__assert_fail@plt+0xb5a8>
   1c9cc:	ldr	r2, [sp, #28]
   1c9d0:	mov	r3, r2
   1c9d4:	cmp	r2, #0
   1c9d8:	moveq	r3, #48	; 0x30
   1c9dc:	str	r3, [sp, #28]
   1c9e0:	cmp	r5, #0
   1c9e4:	movlt	r5, r8
   1c9e8:	ldr	r3, [sp, #52]	; 0x34
   1c9ec:	cmp	r3, #0
   1c9f0:	bne	1d660 <__assert_fail@plt+0xc290>
   1c9f4:	cmp	r9, #0
   1c9f8:	bne	1d75c <__assert_fail@plt+0xc38c>
   1c9fc:	add	r8, sp, #86	; 0x56
   1ca00:	sub	r3, r8, r4
   1ca04:	str	r3, [sp, #68]	; 0x44
   1ca08:	ldr	r3, [sp, #28]
   1ca0c:	subs	r9, r3, #45	; 0x2d
   1ca10:	movne	r9, #1
   1ca14:	b	1d6c8 <__assert_fail@plt+0xc2f8>
   1ca18:	ldr	r0, [pc, #1100]	; 1ce6c <__assert_fail@plt+0xba9c>
   1ca1c:	cmp	r8, #2
   1ca20:	moveq	r0, #99	; 0x63
   1ca24:	cmp	r8, r5
   1ca28:	movge	r1, #0
   1ca2c:	movlt	r1, #1
   1ca30:	cmp	r3, r0
   1ca34:	orrhi	r1, r1, #1
   1ca38:	b	1c8c0 <__assert_fail@plt+0xb4f0>
   1ca3c:	cmp	sl, #0
   1ca40:	beq	1ca58 <__assert_fail@plt+0xb688>
   1ca44:	mov	r2, r8
   1ca48:	mov	r1, #32
   1ca4c:	mov	r0, sl
   1ca50:	bl	112c8 <memset@plt>
   1ca54:	add	sl, sl, r8
   1ca58:	add	fp, fp, r8
   1ca5c:	sub	r5, r5, r8
   1ca60:	b	1d6a4 <__assert_fail@plt+0xc2d4>
   1ca64:	mov	r3, #34	; 0x22
   1ca68:	ldr	r2, [sp, #44]	; 0x2c
   1ca6c:	str	r3, [r2]
   1ca70:	b	1bf68 <__assert_fail@plt+0xab98>
   1ca74:	mov	r3, #34	; 0x22
   1ca78:	ldr	r2, [sp, #44]	; 0x2c
   1ca7c:	str	r3, [r2]
   1ca80:	b	1bf68 <__assert_fail@plt+0xab98>
   1ca84:	mov	r2, r8
   1ca88:	mov	r1, r4
   1ca8c:	mov	r0, sl
   1ca90:	bl	110f4 <memcpy@plt>
   1ca94:	b	1d750 <__assert_fail@plt+0xc380>
   1ca98:	cmp	r2, #0
   1ca9c:	bne	1c4f8 <__assert_fail@plt+0xb128>
   1caa0:	lsr	r3, r5, #31
   1caa4:	ldr	r2, [sp, #28]
   1caa8:	cmp	r2, #0
   1caac:	movne	r3, #0
   1cab0:	andeq	r3, r3, #1
   1cab4:	cmp	r3, #0
   1cab8:	bne	1c6e0 <__assert_fail@plt+0xb310>
   1cabc:	sub	r8, r5, #6
   1cac0:	bic	r8, r8, r8, asr #31
   1cac4:	ldr	r3, [pc, #912]	; 1ce5c <__assert_fail@plt+0xba8c>
   1cac8:	str	r3, [sp, #52]	; 0x34
   1cacc:	b	1c3c4 <__assert_fail@plt+0xaff4>
   1cad0:	cmp	r2, #69	; 0x45
   1cad4:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1cad8:	ldr	r3, [sp, #36]	; 0x24
   1cadc:	ldr	r3, [r3, #8]
   1cae0:	mov	r8, #2
   1cae4:	b	1c934 <__assert_fail@plt+0xb564>
   1cae8:	cmp	r2, #69	; 0x45
   1caec:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1caf0:	ldr	r3, [sp, #48]	; 0x30
   1caf4:	mov	r8, #2
   1caf8:	b	1c934 <__assert_fail@plt+0xb564>
   1cafc:	cmp	r2, #69	; 0x45
   1cb00:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1cb04:	ldr	r3, [sp, #36]	; 0x24
   1cb08:	ldr	r3, [r3, #8]
   1cb0c:	b	1c920 <__assert_fail@plt+0xb550>
   1cb10:	cmp	r2, #69	; 0x45
   1cb14:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1cb18:	ldr	r3, [sp, #48]	; 0x30
   1cb1c:	b	1c920 <__assert_fail@plt+0xb550>
   1cb20:	cmp	r2, #69	; 0x45
   1cb24:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1cb28:	ldr	r3, [sp, #36]	; 0x24
   1cb2c:	ldr	r3, [r3, #28]
   1cb30:	cmn	r3, #1
   1cb34:	movge	r1, #0
   1cb38:	movlt	r1, #1
   1cb3c:	str	r1, [sp, #52]	; 0x34
   1cb40:	add	r3, r3, #1
   1cb44:	mov	r0, #0
   1cb48:	mov	r9, r0
   1cb4c:	mov	r8, #3
   1cb50:	b	1c944 <__assert_fail@plt+0xb574>
   1cb54:	cmp	r2, #69	; 0x45
   1cb58:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1cb5c:	ldr	r3, [sp, #36]	; 0x24
   1cb60:	ldr	r3, [r3, #4]
   1cb64:	mov	r8, #2
   1cb68:	b	1c934 <__assert_fail@plt+0xb564>
   1cb6c:	cmp	r2, #69	; 0x45
   1cb70:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1cb74:	ldr	r3, [sp, #36]	; 0x24
   1cb78:	ldr	r3, [r3, #16]
   1cb7c:	cmn	r3, #1
   1cb80:	movge	r1, #0
   1cb84:	movlt	r1, #1
   1cb88:	str	r1, [sp, #52]	; 0x34
   1cb8c:	add	r3, r3, #1
   1cb90:	mov	r0, #0
   1cb94:	mov	r9, r0
   1cb98:	mov	r8, #2
   1cb9c:	b	1c944 <__assert_fail@plt+0xb574>
   1cba0:	cmp	r2, #69	; 0x45
   1cba4:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1cba8:	cmp	r5, #0
   1cbac:	movle	r5, #9
   1cbb0:	ldr	r3, [sp, #1172]	; 0x494
   1cbb4:	mov	r4, #9
   1cbb8:	b	1cbcc <__assert_fail@plt+0xb7fc>
   1cbbc:	sub	r4, r4, #1
   1cbc0:	smull	r1, r2, r6, r3
   1cbc4:	asr	r3, r3, #31
   1cbc8:	rsb	r3, r3, r2, asr #2
   1cbcc:	cmp	r4, r5
   1cbd0:	bgt	1cbbc <__assert_fail@plt+0xb7ec>
   1cbd4:	cmp	r4, #1
   1cbd8:	ble	1cbf4 <__assert_fail@plt+0xb824>
   1cbdc:	smull	r2, r1, r6, r3
   1cbe0:	asr	r2, r3, #31
   1cbe4:	rsb	r2, r2, r1, asr #2
   1cbe8:	add	r2, r2, r2, lsl #2
   1cbec:	cmp	r3, r2, lsl #1
   1cbf0:	beq	1cbbc <__assert_fail@plt+0xb7ec>
   1cbf4:	cmp	r4, #0
   1cbf8:	ble	1cc2c <__assert_fail@plt+0xb85c>
   1cbfc:	add	r1, sp, #72	; 0x48
   1cc00:	add	r0, r1, r4
   1cc04:	smull	r2, ip, r6, r3
   1cc08:	asr	r2, r3, #31
   1cc0c:	rsb	r2, r2, ip, asr #2
   1cc10:	add	ip, r2, r2, lsl #2
   1cc14:	sub	r3, r3, ip, lsl #1
   1cc18:	add	r3, r3, #48	; 0x30
   1cc1c:	strb	r3, [r0, #-1]!
   1cc20:	mov	r3, r2
   1cc24:	cmp	r0, r1
   1cc28:	bne	1cc04 <__assert_fail@plt+0xb834>
   1cc2c:	ldr	r2, [sp, #28]
   1cc30:	mov	r3, r2
   1cc34:	cmp	r2, #0
   1cc38:	moveq	r3, #48	; 0x30
   1cc3c:	str	r3, [sp, #28]
   1cc40:	mov	r8, r4
   1cc44:	cmp	r4, #0
   1cc48:	movcs	r9, r4
   1cc4c:	movcc	r9, #0
   1cc50:	ldr	r3, [sp, #32]
   1cc54:	sub	r3, r3, fp
   1cc58:	cmp	r9, r3
   1cc5c:	bcs	1ccf4 <__assert_fail@plt+0xb924>
   1cc60:	cmp	sl, #0
   1cc64:	beq	1cc88 <__assert_fail@plt+0xb8b8>
   1cc68:	ldr	r3, [sp, #40]	; 0x28
   1cc6c:	cmp	r3, #0
   1cc70:	beq	1cd04 <__assert_fail@plt+0xb934>
   1cc74:	mov	r2, r4
   1cc78:	add	r1, sp, #72	; 0x48
   1cc7c:	mov	r0, sl
   1cc80:	bl	1be00 <__assert_fail@plt+0xaa30>
   1cc84:	add	sl, sl, r8
   1cc88:	add	fp, r9, fp
   1cc8c:	ldr	r3, [sp, #28]
   1cc90:	cmp	r3, #45	; 0x2d
   1cc94:	beq	1d768 <__assert_fail@plt+0xc398>
   1cc98:	subs	r4, r5, r4
   1cc9c:	bmi	1d768 <__assert_fail@plt+0xc398>
   1cca0:	cmp	r4, #0
   1cca4:	movcs	r5, r4
   1cca8:	movcc	r5, #0
   1ccac:	ldr	r3, [sp, #32]
   1ccb0:	sub	r3, r3, fp
   1ccb4:	cmp	r5, r3
   1ccb8:	bcs	1cd18 <__assert_fail@plt+0xb948>
   1ccbc:	cmp	r4, #0
   1ccc0:	cmpne	sl, #0
   1ccc4:	beq	1ccec <__assert_fail@plt+0xb91c>
   1ccc8:	ldr	r3, [sp, #28]
   1cccc:	cmp	r3, #43	; 0x2b
   1ccd0:	cmpne	r3, #48	; 0x30
   1ccd4:	mov	r2, r4
   1ccd8:	moveq	r1, #48	; 0x30
   1ccdc:	movne	r1, #32
   1cce0:	mov	r0, sl
   1cce4:	bl	112c8 <memset@plt>
   1cce8:	add	sl, sl, r4
   1ccec:	add	fp, fp, r5
   1ccf0:	b	1bf20 <__assert_fail@plt+0xab50>
   1ccf4:	mov	r3, #34	; 0x22
   1ccf8:	ldr	r2, [sp, #44]	; 0x2c
   1ccfc:	str	r3, [r2]
   1cd00:	b	1bf68 <__assert_fail@plt+0xab98>
   1cd04:	mov	r2, r4
   1cd08:	add	r1, sp, #72	; 0x48
   1cd0c:	mov	r0, sl
   1cd10:	bl	110f4 <memcpy@plt>
   1cd14:	b	1cc84 <__assert_fail@plt+0xb8b4>
   1cd18:	mov	r3, #34	; 0x22
   1cd1c:	ldr	r2, [sp, #44]	; 0x2c
   1cd20:	str	r3, [r2]
   1cd24:	b	1bf68 <__assert_fail@plt+0xab98>
   1cd28:	ldr	r2, [sp, #28]
   1cd2c:	mvn	r3, r5
   1cd30:	lsr	r3, r3, #31
   1cd34:	cmp	r2, #45	; 0x2d
   1cd38:	moveq	r3, #0
   1cd3c:	cmp	r3, #0
   1cd40:	moveq	r5, #0
   1cd44:	mov	r4, r5
   1cd48:	cmp	r5, #1
   1cd4c:	movcc	r5, #1
   1cd50:	ldr	r3, [sp, #32]
   1cd54:	sub	r3, r3, fp
   1cd58:	cmp	r5, r3
   1cd5c:	bcs	1cda8 <__assert_fail@plt+0xb9d8>
   1cd60:	cmp	sl, #0
   1cd64:	beq	1cda0 <__assert_fail@plt+0xb9d0>
   1cd68:	cmp	r4, #1
   1cd6c:	bls	1cd98 <__assert_fail@plt+0xb9c8>
   1cd70:	sub	r4, r4, #1
   1cd74:	ldr	r3, [sp, #28]
   1cd78:	cmp	r3, #43	; 0x2b
   1cd7c:	cmpne	r3, #48	; 0x30
   1cd80:	mov	r2, r4
   1cd84:	moveq	r1, #48	; 0x30
   1cd88:	movne	r1, #32
   1cd8c:	mov	r0, sl
   1cd90:	bl	112c8 <memset@plt>
   1cd94:	add	sl, sl, r4
   1cd98:	mov	r3, #10
   1cd9c:	strb	r3, [sl], #1
   1cda0:	add	fp, fp, r5
   1cda4:	b	1bf20 <__assert_fail@plt+0xab50>
   1cda8:	mov	r3, #34	; 0x22
   1cdac:	ldr	r2, [sp, #44]	; 0x2c
   1cdb0:	str	r3, [r2]
   1cdb4:	b	1bf68 <__assert_fail@plt+0xab98>
   1cdb8:	mov	r3, #1
   1cdbc:	cmp	r8, #0
   1cdc0:	moveq	r8, r3
   1cdc4:	moveq	r4, #112	; 0x70
   1cdc8:	movne	r4, #112	; 0x70
   1cdcc:	movne	r3, #0
   1cdd0:	strne	r3, [sp, #40]	; 0x28
   1cdd4:	b	1c714 <__assert_fail@plt+0xb344>
   1cdd8:	mov	r3, #0
   1cddc:	b	1cdbc <__assert_fail@plt+0xb9ec>
   1cde0:	ldr	r3, [sp, #36]	; 0x24
   1cde4:	ldr	r3, [r3, #16]
   1cde8:	cmp	r2, #79	; 0x4f
   1cdec:	bne	1ce0c <__assert_fail@plt+0xba3c>
   1cdf0:	mov	r3, #32
   1cdf4:	strb	r3, [sp, #72]	; 0x48
   1cdf8:	mov	r3, #37	; 0x25
   1cdfc:	strb	r3, [sp, #73]	; 0x49
   1ce00:	mov	r4, #113	; 0x71
   1ce04:	mov	r8, #0
   1ce08:	b	1c734 <__assert_fail@plt+0xb364>
   1ce0c:	add	r2, r3, r3, lsl #2
   1ce10:	add	r3, r3, r2, lsl #1
   1ce14:	asr	r3, r3, #5
   1ce18:	add	r3, r3, #1
   1ce1c:	mov	r0, #0
   1ce20:	mov	r9, r0
   1ce24:	str	r0, [sp, #52]	; 0x34
   1ce28:	mov	r8, #1
   1ce2c:	b	1c96c <__assert_fail@plt+0xb59c>
   1ce30:	cmp	r2, #69	; 0x45
   1ce34:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1ce38:	ldr	r3, [sp, #36]	; 0x24
   1ce3c:	ldr	r3, [r3]
   1ce40:	mov	r8, #2
   1ce44:	b	1c934 <__assert_fail@plt+0xb564>
   1ce48:	andeq	r0, r2, ip, asr #3
   1ce4c:	strbtvs	r6, [r6], -r7, ror #12
   1ce50:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1ce54:	andeq	r0, r2, r8, asr #18
   1ce58:	andeq	r0, r2, r4, lsr r9
   1ce5c:	andeq	r0, r2, ip, lsr r9
   1ce60:	andeq	r0, r0, fp, ror #14
   1ce64:	andeq	r0, r2, r4, asr r9
   1ce68:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ce6c:	andeq	r2, r0, pc, lsl #14
   1ce70:	subls	r2, r9, #-1828716544	; 0x93000000
   1ce74:			; <UNDEFINED> instruction: 0xfffff894
   1ce78:	mvnpl	r8, pc, lsl r5
   1ce7c:			; <UNDEFINED> instruction: 0x91a2b3c5
   1ce80:	stmhi	r8, {r0, r3, r7, fp, pc}
   1ce84:	andeq	r2, r0, r0, lsl r7
   1ce88:	add	ip, sp, #88	; 0x58
   1ce8c:	ldr	lr, [sp, #36]	; 0x24
   1ce90:	ldm	lr!, {r0, r1, r2, r3}
   1ce94:	stmia	ip!, {r0, r1, r2, r3}
   1ce98:	ldm	lr!, {r0, r1, r2, r3}
   1ce9c:	stmia	ip!, {r0, r1, r2, r3}
   1cea0:	ldm	lr, {r0, r1, r2}
   1cea4:	stm	ip, {r0, r1, r2}
   1cea8:	mvn	r3, #0
   1ceac:	str	r3, [sp, #116]	; 0x74
   1ceb0:	add	r1, sp, #88	; 0x58
   1ceb4:	ldr	r0, [sp, #1168]	; 0x490
   1ceb8:	bl	1ad80 <__assert_fail@plt+0x99b0>
   1cebc:	ldr	r3, [sp, #116]	; 0x74
   1cec0:	cmp	r3, #0
   1cec4:	blt	1cf24 <__assert_fail@plt+0xbb54>
   1cec8:	lsr	r3, r0, #31
   1cecc:	str	r3, [sp, #52]	; 0x34
   1ced0:	add	r2, sp, #85	; 0x55
   1ced4:	mov	r1, r0
   1ced8:	smull	r3, ip, r6, r1
   1cedc:	asr	r3, r1, #31
   1cee0:	rsb	r3, r3, ip, asr #2
   1cee4:	mov	ip, r3
   1cee8:	add	r3, r3, r3, lsl #2
   1ceec:	sub	r3, r1, r3, lsl #1
   1cef0:	mov	r1, ip
   1cef4:	mov	r4, r2
   1cef8:	cmp	r0, #0
   1cefc:	rsblt	r3, r3, #48	; 0x30
   1cf00:	addge	r3, r3, #48	; 0x30
   1cf04:	uxtb	r3, r3
   1cf08:	strb	r3, [r2]
   1cf0c:	sub	r2, r2, #1
   1cf10:	cmp	ip, #0
   1cf14:	bne	1ced8 <__assert_fail@plt+0xbb08>
   1cf18:	mov	r9, #0
   1cf1c:	mov	r8, #1
   1cf20:	b	1c9cc <__assert_fail@plt+0xb5fc>
   1cf24:	mov	r3, #75	; 0x4b
   1cf28:	ldr	r2, [sp, #44]	; 0x2c
   1cf2c:	str	r3, [r2]
   1cf30:	b	1bf68 <__assert_fail@plt+0xab98>
   1cf34:	cmp	r2, #79	; 0x4f
   1cf38:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1cf3c:	mov	r4, #88	; 0x58
   1cf40:	mov	r8, #0
   1cf44:	b	1c714 <__assert_fail@plt+0xb344>
   1cf48:	ldr	r3, [sp, #28]
   1cf4c:	subs	r3, r3, #45	; 0x2d
   1cf50:	movne	r3, #1
   1cf54:	cmp	r5, #0
   1cf58:	movlt	r3, #0
   1cf5c:	cmp	r3, #0
   1cf60:	moveq	r5, #0
   1cf64:	mov	r4, r5
   1cf68:	cmp	r5, #1
   1cf6c:	movcc	r5, #1
   1cf70:	ldr	r3, [sp, #32]
   1cf74:	sub	r3, r3, fp
   1cf78:	cmp	r5, r3
   1cf7c:	bcs	1cfc8 <__assert_fail@plt+0xbbf8>
   1cf80:	cmp	sl, #0
   1cf84:	beq	1cfc0 <__assert_fail@plt+0xbbf0>
   1cf88:	cmp	r4, #1
   1cf8c:	bls	1cfb8 <__assert_fail@plt+0xbbe8>
   1cf90:	sub	r4, r4, #1
   1cf94:	ldr	r3, [sp, #28]
   1cf98:	cmp	r3, #43	; 0x2b
   1cf9c:	cmpne	r3, #48	; 0x30
   1cfa0:	mov	r2, r4
   1cfa4:	moveq	r1, #48	; 0x30
   1cfa8:	movne	r1, #32
   1cfac:	mov	r0, sl
   1cfb0:	bl	112c8 <memset@plt>
   1cfb4:	add	sl, sl, r4
   1cfb8:	mov	r3, #9
   1cfbc:	strb	r3, [sl], #1
   1cfc0:	add	fp, fp, r5
   1cfc4:	b	1bf20 <__assert_fail@plt+0xab50>
   1cfc8:	mov	r3, #34	; 0x22
   1cfcc:	ldr	r2, [sp, #44]	; 0x2c
   1cfd0:	str	r3, [r2]
   1cfd4:	b	1bf68 <__assert_fail@plt+0xab98>
   1cfd8:	ldr	r3, [sp, #36]	; 0x24
   1cfdc:	ldr	r3, [r3, #24]
   1cfe0:	add	r3, r3, #6
   1cfe4:	ldr	r1, [pc, #-380]	; 1ce70 <__assert_fail@plt+0xbaa0>
   1cfe8:	smull	r0, r1, r1, r3
   1cfec:	add	r0, r1, r3
   1cff0:	asr	r1, r3, #31
   1cff4:	rsb	r1, r1, r0, asr #2
   1cff8:	rsb	r1, r1, r1, lsl #3
   1cffc:	sub	r3, r3, r1
   1d000:	add	r3, r3, #1
   1d004:	mov	r8, #1
   1d008:	b	1c934 <__assert_fail@plt+0xb564>
   1d00c:	cmp	r2, #69	; 0x45
   1d010:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1d014:	ldr	r1, [sp, #36]	; 0x24
   1d018:	ldr	r3, [r1, #28]
   1d01c:	ldr	r1, [r1, #24]
   1d020:	sub	r3, r3, r1
   1d024:	add	r3, r3, #7
   1d028:	ldr	r1, [pc, #-448]	; 1ce70 <__assert_fail@plt+0xbaa0>
   1d02c:	smull	r0, r1, r1, r3
   1d030:	add	r1, r1, r3
   1d034:	asr	r3, r3, #31
   1d038:	rsb	r3, r3, r1, asr #2
   1d03c:	mov	r8, #2
   1d040:	b	1c934 <__assert_fail@plt+0xb564>
   1d044:	cmp	r2, #69	; 0x45
   1d048:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1d04c:	ldr	r0, [sp, #36]	; 0x24
   1d050:	mov	r3, r0
   1d054:	ldr	r8, [r0, #20]
   1d058:	cmp	r8, #0
   1d05c:	movlt	r3, #300	; 0x12c
   1d060:	mvnge	r3, #99	; 0x63
   1d064:	add	r3, r3, r8
   1d068:	ldr	lr, [r0, #28]
   1d06c:	ldr	r0, [r0, #24]
   1d070:	str	r0, [sp, #52]	; 0x34
   1d074:	sub	r0, lr, r0
   1d078:	add	r0, r0, #380	; 0x17c
   1d07c:	add	r0, r0, #2
   1d080:	ldr	ip, [pc, #-536]	; 1ce70 <__assert_fail@plt+0xbaa0>
   1d084:	smull	r9, ip, ip, r0
   1d088:	add	r9, ip, r0
   1d08c:	asr	ip, r0, #31
   1d090:	rsb	ip, ip, r9, asr #2
   1d094:	rsb	ip, ip, ip, lsl #3
   1d098:	sub	ip, r0, ip
   1d09c:	sub	r9, lr, ip
   1d0a0:	adds	r9, r9, #3
   1d0a4:	bmi	1d1c8 <__assert_fail@plt+0xbdf8>
   1d0a8:	tst	r3, #3
   1d0ac:	movne	r0, #0
   1d0b0:	bne	1d0fc <__assert_fail@plt+0xbd2c>
   1d0b4:	ldr	r0, [pc, #-580]	; 1ce78 <__assert_fail@plt+0xbaa8>
   1d0b8:	smull	ip, r0, r0, r3
   1d0bc:	asr	ip, r3, #31
   1d0c0:	rsb	r0, ip, r0, asr #5
   1d0c4:	mov	ip, #100	; 0x64
   1d0c8:	mul	r0, ip, r0
   1d0cc:	cmp	r3, r0
   1d0d0:	movne	r0, #1
   1d0d4:	bne	1d0fc <__assert_fail@plt+0xbd2c>
   1d0d8:	ldr	r0, [pc, #-616]	; 1ce78 <__assert_fail@plt+0xbaa8>
   1d0dc:	smull	ip, r0, r0, r3
   1d0e0:	asr	ip, r3, #31
   1d0e4:	rsb	ip, ip, r0, asr #7
   1d0e8:	mov	r0, #400	; 0x190
   1d0ec:	mul	r0, r0, ip
   1d0f0:	cmp	r3, r0
   1d0f4:	movne	r0, #0
   1d0f8:	moveq	r0, #1
   1d0fc:	add	r3, r0, #364	; 0x16c
   1d100:	add	r3, r3, #1
   1d104:	sub	r3, lr, r3
   1d108:	ldr	r0, [sp, #52]	; 0x34
   1d10c:	sub	r0, r3, r0
   1d110:	add	r0, r0, #380	; 0x17c
   1d114:	add	r0, r0, #2
   1d118:	ldr	ip, [pc, #-688]	; 1ce70 <__assert_fail@plt+0xbaa0>
   1d11c:	smull	ip, lr, ip, r0
   1d120:	add	lr, lr, r0
   1d124:	asr	ip, r0, #31
   1d128:	rsb	ip, ip, lr, asr #2
   1d12c:	rsb	ip, ip, ip, lsl #3
   1d130:	sub	ip, r0, ip
   1d134:	sub	r3, r3, ip
   1d138:	add	r3, r3, #3
   1d13c:	cmp	r3, #0
   1d140:	movge	r9, r3
   1d144:	mvn	lr, r3
   1d148:	lsr	lr, lr, #31
   1d14c:	cmp	r1, #71	; 0x47
   1d150:	beq	1d268 <__assert_fail@plt+0xbe98>
   1d154:	cmp	r1, #103	; 0x67
   1d158:	bne	1d294 <__assert_fail@plt+0xbec4>
   1d15c:	ldr	r3, [pc, #-748]	; 1ce78 <__assert_fail@plt+0xbaa8>
   1d160:	smull	r1, r3, r3, r8
   1d164:	asr	r1, r8, #31
   1d168:	rsb	r1, r1, r3, asr #5
   1d16c:	mov	r0, #100	; 0x64
   1d170:	mul	r1, r0, r1
   1d174:	sub	r1, r8, r1
   1d178:	add	r1, r1, lr
   1d17c:	ldr	r3, [pc, #-780]	; 1ce78 <__assert_fail@plt+0xbaa8>
   1d180:	smull	r3, ip, r3, r1
   1d184:	asr	r3, r1, #31
   1d188:	rsb	r3, r3, ip, asr #5
   1d18c:	mul	r3, r0, r3
   1d190:	subs	r3, r1, r3
   1d194:	movpl	r1, #0
   1d198:	strpl	r1, [sp, #52]	; 0x34
   1d19c:	movpl	r8, #2
   1d1a0:	bpl	1c89c <__assert_fail@plt+0xb4cc>
   1d1a4:	ldr	r1, [pc, #-824]	; 1ce74 <__assert_fail@plt+0xbaa4>
   1d1a8:	sub	r1, r1, lr
   1d1ac:	cmp	r8, r1
   1d1b0:	rsblt	r3, r3, #0
   1d1b4:	addge	r3, r3, #100	; 0x64
   1d1b8:	mov	r1, #0
   1d1bc:	str	r1, [sp, #52]	; 0x34
   1d1c0:	mov	r8, #2
   1d1c4:	b	1c89c <__assert_fail@plt+0xb4cc>
   1d1c8:	sub	r3, r3, #1
   1d1cc:	tst	r3, #3
   1d1d0:	movne	r3, #0
   1d1d4:	bne	1d220 <__assert_fail@plt+0xbe50>
   1d1d8:	ldr	r0, [pc, #-872]	; 1ce78 <__assert_fail@plt+0xbaa8>
   1d1dc:	smull	ip, r0, r0, r3
   1d1e0:	asr	ip, r3, #31
   1d1e4:	rsb	r0, ip, r0, asr #5
   1d1e8:	mov	ip, #100	; 0x64
   1d1ec:	mul	r0, ip, r0
   1d1f0:	cmp	r3, r0
   1d1f4:	movne	r3, #1
   1d1f8:	bne	1d220 <__assert_fail@plt+0xbe50>
   1d1fc:	ldr	r0, [pc, #-908]	; 1ce78 <__assert_fail@plt+0xbaa8>
   1d200:	smull	ip, r0, r0, r3
   1d204:	asr	ip, r3, #31
   1d208:	rsb	ip, ip, r0, asr #7
   1d20c:	mov	r0, #400	; 0x190
   1d210:	mul	r0, r0, ip
   1d214:	cmp	r3, r0
   1d218:	movne	r3, #0
   1d21c:	moveq	r3, #1
   1d220:	add	r3, r3, #364	; 0x16c
   1d224:	add	r3, r3, #1
   1d228:	add	r3, r3, lr
   1d22c:	ldr	r0, [sp, #52]	; 0x34
   1d230:	sub	r0, r3, r0
   1d234:	add	r0, r0, #380	; 0x17c
   1d238:	add	r0, r0, #2
   1d23c:	ldr	ip, [pc, #-980]	; 1ce70 <__assert_fail@plt+0xbaa0>
   1d240:	smull	ip, lr, ip, r0
   1d244:	add	lr, lr, r0
   1d248:	asr	ip, r0, #31
   1d24c:	rsb	ip, ip, lr, asr #2
   1d250:	rsb	ip, ip, ip, lsl #3
   1d254:	sub	ip, r0, ip
   1d258:	sub	ip, r3, ip
   1d25c:	add	r9, ip, #3
   1d260:	mvn	lr, #0
   1d264:	b	1d14c <__assert_fail@plt+0xbd7c>
   1d268:	ldr	r3, [pc, #-1020]	; 1ce74 <__assert_fail@plt+0xbaa4>
   1d26c:	sub	r3, r3, lr
   1d270:	cmp	r8, r3
   1d274:	movge	r3, #0
   1d278:	movlt	r3, #1
   1d27c:	str	r3, [sp, #52]	; 0x34
   1d280:	add	r3, r8, #1888	; 0x760
   1d284:	add	r3, r3, #12
   1d288:	add	r3, r3, lr
   1d28c:	mov	r8, #4
   1d290:	b	1c89c <__assert_fail@plt+0xb4cc>
   1d294:	ldr	r3, [pc, #-1068]	; 1ce70 <__assert_fail@plt+0xbaa0>
   1d298:	smull	r1, r3, r3, r9
   1d29c:	add	r1, r3, r9
   1d2a0:	asr	r3, r9, #31
   1d2a4:	rsb	r3, r3, r1, asr #2
   1d2a8:	add	r3, r3, #1
   1d2ac:	mov	r8, #2
   1d2b0:	b	1c934 <__assert_fail@plt+0xb564>
   1d2b4:	cmp	r2, #69	; 0x45
   1d2b8:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1d2bc:	ldr	ip, [sp, #36]	; 0x24
   1d2c0:	ldr	r3, [ip, #24]
   1d2c4:	add	r3, r3, #6
   1d2c8:	ldr	r1, [pc, #-1120]	; 1ce70 <__assert_fail@plt+0xbaa0>
   1d2cc:	smull	r0, r1, r1, r3
   1d2d0:	add	r0, r1, r3
   1d2d4:	asr	r1, r3, #31
   1d2d8:	rsb	r1, r1, r0, asr #2
   1d2dc:	rsb	r1, r1, r1, lsl #3
   1d2e0:	sub	r1, r3, r1
   1d2e4:	ldr	r3, [ip, #28]
   1d2e8:	sub	r3, r3, r1
   1d2ec:	add	r3, r3, #7
   1d2f0:	ldr	r1, [pc, #-1160]	; 1ce70 <__assert_fail@plt+0xbaa0>
   1d2f4:	smull	r0, r1, r1, r3
   1d2f8:	add	r1, r1, r3
   1d2fc:	asr	r3, r3, #31
   1d300:	rsb	r3, r3, r1, asr #2
   1d304:	mov	r8, #2
   1d308:	b	1c934 <__assert_fail@plt+0xb564>
   1d30c:	cmp	r2, #69	; 0x45
   1d310:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1d314:	ldr	r3, [sp, #36]	; 0x24
   1d318:	ldr	r3, [r3, #24]
   1d31c:	mov	r8, #1
   1d320:	b	1c934 <__assert_fail@plt+0xb564>
   1d324:	cmp	r2, #69	; 0x45
   1d328:	beq	1d650 <__assert_fail@plt+0xc280>
   1d32c:	cmp	r2, #79	; 0x4f
   1d330:	beq	1c4f8 <__assert_fail@plt+0xb128>
   1d334:	ldr	r3, [sp, #36]	; 0x24
   1d338:	ldr	r3, [r3, #20]
   1d33c:	ldr	r1, [pc, #-1232]	; 1ce74 <__assert_fail@plt+0xbaa4>
   1d340:	cmp	r3, r1
   1d344:	movge	r1, #0
   1d348:	movlt	r1, #1
   1d34c:	str	r1, [sp, #52]	; 0x34
   1d350:	add	r3, r3, #1888	; 0x760
   1d354:	add	r3, r3, #12
   1d358:	mov	r8, #4
   1d35c:	b	1c89c <__assert_fail@plt+0xb4cc>
   1d360:	cmp	r2, #69	; 0x45
   1d364:	beq	1d658 <__assert_fail@plt+0xc288>
   1d368:	ldr	r3, [sp, #36]	; 0x24
   1d36c:	ldr	r1, [r3, #20]
   1d370:	ldr	r3, [pc, #-1280]	; 1ce78 <__assert_fail@plt+0xbaa8>
   1d374:	smull	r3, r0, r3, r1
   1d378:	asr	r3, r1, #31
   1d37c:	rsb	r3, r3, r0, asr #5
   1d380:	mov	r0, #100	; 0x64
   1d384:	mul	r3, r0, r3
   1d388:	subs	r3, r1, r3
   1d38c:	bmi	1d3a0 <__assert_fail@plt+0xbfd0>
   1d390:	mov	r1, #0
   1d394:	str	r1, [sp, #52]	; 0x34
   1d398:	mov	r8, #2
   1d39c:	b	1c89c <__assert_fail@plt+0xb4cc>
   1d3a0:	sub	r0, r0, #2000	; 0x7d0
   1d3a4:	cmp	r1, r0
   1d3a8:	rsblt	r3, r3, #0
   1d3ac:	addge	r3, r3, #100	; 0x64
   1d3b0:	b	1d390 <__assert_fail@plt+0xbfc0>
   1d3b4:	ldr	r3, [sp, #40]	; 0x28
   1d3b8:	cmp	r8, #0
   1d3bc:	movne	r3, #0
   1d3c0:	str	r3, [sp, #40]	; 0x28
   1d3c4:	ldr	r0, [sp, #60]	; 0x3c
   1d3c8:	bl	11274 <strlen@plt>
   1d3cc:	mov	r9, r0
   1d3d0:	ldr	r3, [sp, #28]
   1d3d4:	subs	r3, r3, #45	; 0x2d
   1d3d8:	movne	r3, #1
   1d3dc:	cmp	r5, #0
   1d3e0:	movlt	r3, #0
   1d3e4:	cmp	r3, #0
   1d3e8:	moveq	r5, #0
   1d3ec:	mov	r4, r5
   1d3f0:	cmp	r5, r0
   1d3f4:	movcc	r5, r0
   1d3f8:	ldr	r3, [sp, #32]
   1d3fc:	sub	r3, r3, fp
   1d400:	cmp	r5, r3
   1d404:	bcs	1d468 <__assert_fail@plt+0xc098>
   1d408:	cmp	sl, #0
   1d40c:	beq	1d48c <__assert_fail@plt+0xc0bc>
   1d410:	cmp	r4, r0
   1d414:	bls	1d440 <__assert_fail@plt+0xc070>
   1d418:	sub	r4, r4, r0
   1d41c:	ldr	r3, [sp, #28]
   1d420:	cmp	r3, #43	; 0x2b
   1d424:	cmpne	r3, #48	; 0x30
   1d428:	mov	r2, r4
   1d42c:	moveq	r1, #48	; 0x30
   1d430:	movne	r1, #32
   1d434:	mov	r0, sl
   1d438:	bl	112c8 <memset@plt>
   1d43c:	add	sl, sl, r4
   1d440:	cmp	r8, #0
   1d444:	bne	1d478 <__assert_fail@plt+0xc0a8>
   1d448:	ldr	r3, [sp, #40]	; 0x28
   1d44c:	cmp	r3, #0
   1d450:	beq	1d494 <__assert_fail@plt+0xc0c4>
   1d454:	mov	r2, r9
   1d458:	ldr	r1, [sp, #60]	; 0x3c
   1d45c:	mov	r0, sl
   1d460:	bl	1be00 <__assert_fail@plt+0xaa30>
   1d464:	b	1d488 <__assert_fail@plt+0xc0b8>
   1d468:	mov	r3, #34	; 0x22
   1d46c:	ldr	r2, [sp, #44]	; 0x2c
   1d470:	str	r3, [r2]
   1d474:	b	1bf68 <__assert_fail@plt+0xab98>
   1d478:	mov	r2, r9
   1d47c:	ldr	r1, [sp, #60]	; 0x3c
   1d480:	mov	r0, sl
   1d484:	bl	1bdbc <__assert_fail@plt+0xa9ec>
   1d488:	add	sl, sl, r9
   1d48c:	add	fp, fp, r5
   1d490:	b	1bf20 <__assert_fail@plt+0xab50>
   1d494:	mov	r2, r9
   1d498:	ldr	r1, [sp, #60]	; 0x3c
   1d49c:	mov	r0, sl
   1d4a0:	bl	110f4 <memcpy@plt>
   1d4a4:	b	1d488 <__assert_fail@plt+0xc0b8>
   1d4a8:	add	r1, r7, #2
   1d4ac:	mov	lr, #1
   1d4b0:	add	lr, lr, #1
   1d4b4:	mov	r0, r1
   1d4b8:	ldrb	r3, [r1], #1
   1d4bc:	cmp	r3, #58	; 0x3a
   1d4c0:	bne	1c4d8 <__assert_fail@plt+0xb108>
   1d4c4:	b	1d4b0 <__assert_fail@plt+0xc0e0>
   1d4c8:	mov	lr, #0
   1d4cc:	ldr	r1, [sp, #36]	; 0x24
   1d4d0:	ldr	r3, [r1, #32]
   1d4d4:	cmp	r3, #0
   1d4d8:	blt	1bf20 <__assert_fail@plt+0xab50>
   1d4dc:	mov	r3, r1
   1d4e0:	ldr	r1, [r1, #36]	; 0x24
   1d4e4:	cmp	r1, #0
   1d4e8:	movlt	r3, #1
   1d4ec:	blt	1d50c <__assert_fail@plt+0xc13c>
   1d4f0:	movne	r3, #0
   1d4f4:	bne	1d50c <__assert_fail@plt+0xc13c>
   1d4f8:	ldr	r3, [sp, #60]	; 0x3c
   1d4fc:	ldrb	r3, [r3]
   1d500:	cmp	r3, #45	; 0x2d
   1d504:	movne	r3, #0
   1d508:	moveq	r3, #1
   1d50c:	str	r3, [sp, #52]	; 0x34
   1d510:	ldr	r3, [pc, #-1692]	; 1ce7c <__assert_fail@plt+0xbaac>
   1d514:	smull	r0, r3, r3, r1
   1d518:	add	r3, r3, r1
   1d51c:	asr	r0, r1, #31
   1d520:	rsb	r8, r0, r3, asr #11
   1d524:	ldr	r3, [pc, #-1708]	; 1ce80 <__assert_fail@plt+0xbab0>
   1d528:	smull	ip, r3, r3, r1
   1d52c:	add	r3, r3, r1
   1d530:	rsb	r3, r0, r3, asr #5
   1d534:	ldr	r0, [pc, #-1724]	; 1ce80 <__assert_fail@plt+0xbab0>
   1d538:	smull	ip, r0, r0, r3
   1d53c:	add	r0, r0, r3
   1d540:	asr	ip, r3, #31
   1d544:	rsb	r0, ip, r0, asr #5
   1d548:	rsb	r0, r0, r0, lsl #4
   1d54c:	sub	r0, r3, r0, lsl #2
   1d550:	rsb	r3, r3, r3, lsl #4
   1d554:	sub	r3, r1, r3, lsl #2
   1d558:	cmp	lr, #3
   1d55c:	ldrls	pc, [pc, lr, lsl #2]
   1d560:	b	1c4f8 <__assert_fail@plt+0xb128>
   1d564:	andeq	sp, r1, r4, ror r5
   1d568:	andeq	sp, r1, ip, lsl #11
   1d56c:	andeq	sp, r1, r4, lsr #11
   1d570:	andeq	sp, r1, r8, asr #11
   1d574:	mov	r3, #100	; 0x64
   1d578:	mla	r3, r3, r8, r0
   1d57c:	mov	r0, #0
   1d580:	mov	r9, #1
   1d584:	mov	r8, #5
   1d588:	b	1c944 <__assert_fail@plt+0xb574>
   1d58c:	mov	r3, #100	; 0x64
   1d590:	mla	r3, r3, r8, r0
   1d594:	mov	r0, #4
   1d598:	mov	r9, #1
   1d59c:	mov	r8, #6
   1d5a0:	b	1c944 <__assert_fail@plt+0xb574>
   1d5a4:	mov	r1, #100	; 0x64
   1d5a8:	mul	r0, r1, r0
   1d5ac:	ldr	r1, [pc, #-1840]	; 1ce84 <__assert_fail@plt+0xbab4>
   1d5b0:	mla	r0, r1, r8, r0
   1d5b4:	add	r3, r0, r3
   1d5b8:	mov	r0, #20
   1d5bc:	mov	r9, #1
   1d5c0:	mov	r8, #9
   1d5c4:	b	1c944 <__assert_fail@plt+0xb574>
   1d5c8:	cmp	r3, #0
   1d5cc:	bne	1d5a4 <__assert_fail@plt+0xc1d4>
   1d5d0:	cmp	r0, #0
   1d5d4:	bne	1d58c <__assert_fail@plt+0xc1bc>
   1d5d8:	mov	r3, r8
   1d5dc:	mov	r9, #1
   1d5e0:	mov	r8, #3
   1d5e4:	b	1c944 <__assert_fail@plt+0xb574>
   1d5e8:	mov	r3, #34	; 0x22
   1d5ec:	ldr	r2, [sp, #44]	; 0x2c
   1d5f0:	str	r3, [r2]
   1d5f4:	b	1bf68 <__assert_fail@plt+0xab98>
   1d5f8:	mov	r2, r8
   1d5fc:	mov	r1, r9
   1d600:	mov	r0, sl
   1d604:	bl	110f4 <memcpy@plt>
   1d608:	b	1c58c <__assert_fail@plt+0xb1bc>
   1d60c:	mov	fp, #0
   1d610:	ldr	r3, [sp, #32]
   1d614:	cmp	sl, #0
   1d618:	cmpne	r3, #0
   1d61c:	movne	r3, #0
   1d620:	strbne	r3, [sl]
   1d624:	ldr	r3, [sp, #44]	; 0x2c
   1d628:	ldr	r2, [sp, #64]	; 0x40
   1d62c:	str	r2, [r3]
   1d630:	b	1bf6c <__assert_fail@plt+0xab9c>
   1d634:	mov	r4, #67	; 0x43
   1d638:	mov	r3, #32
   1d63c:	strb	r3, [sp, #72]	; 0x48
   1d640:	mov	r3, #37	; 0x25
   1d644:	strb	r3, [sp, #73]	; 0x49
   1d648:	mov	r8, #0
   1d64c:	b	1c734 <__assert_fail@plt+0xb364>
   1d650:	mov	r4, #89	; 0x59
   1d654:	b	1d638 <__assert_fail@plt+0xc268>
   1d658:	mov	r4, #121	; 0x79
   1d65c:	b	1d638 <__assert_fail@plt+0xc268>
   1d660:	mov	r3, #45	; 0x2d
   1d664:	str	r3, [sp, #52]	; 0x34
   1d668:	add	r8, sp, #86	; 0x56
   1d66c:	sub	r3, r8, r4
   1d670:	str	r3, [sp, #68]	; 0x44
   1d674:	sub	r8, r5, #1
   1d678:	sub	r8, r8, r3
   1d67c:	ldr	r2, [sp, #28]
   1d680:	subs	r9, r2, #45	; 0x2d
   1d684:	movne	r9, #1
   1d688:	cmp	r8, #0
   1d68c:	movle	r3, #0
   1d690:	andgt	r3, r9, #1
   1d694:	cmp	r3, #0
   1d698:	moveq	r8, #0
   1d69c:	cmp	r2, #95	; 0x5f
   1d6a0:	beq	1ca3c <__assert_fail@plt+0xb66c>
   1d6a4:	ldr	r3, [sp, #32]
   1d6a8:	sub	r3, r3, fp
   1d6ac:	cmp	r3, #1
   1d6b0:	bls	1ca64 <__assert_fail@plt+0xb694>
   1d6b4:	cmp	sl, #0
   1d6b8:	ldrbne	r3, [sp, #52]	; 0x34
   1d6bc:	strbne	r3, [sl], #1
   1d6c0:	add	fp, fp, #1
   1d6c4:	sub	r5, r5, #1
   1d6c8:	ldr	r8, [sp, #68]	; 0x44
   1d6cc:	cmp	r5, #0
   1d6d0:	movlt	r9, #0
   1d6d4:	andge	r9, r9, #1
   1d6d8:	cmp	r9, #0
   1d6dc:	moveq	r5, #0
   1d6e0:	cmp	r5, r8
   1d6e4:	movcs	r9, r5
   1d6e8:	movcc	r9, r8
   1d6ec:	ldr	r2, [sp, #32]
   1d6f0:	sub	r2, r2, fp
   1d6f4:	cmp	r9, r2
   1d6f8:	bcs	1ca74 <__assert_fail@plt+0xb6a4>
   1d6fc:	cmp	sl, #0
   1d700:	beq	1d754 <__assert_fail@plt+0xc384>
   1d704:	cmp	r5, r8
   1d708:	bls	1d734 <__assert_fail@plt+0xc364>
   1d70c:	sub	r5, r5, r8
   1d710:	ldr	r3, [sp, #28]
   1d714:	cmp	r3, #43	; 0x2b
   1d718:	cmpne	r3, #48	; 0x30
   1d71c:	mov	r2, r5
   1d720:	moveq	r1, #48	; 0x30
   1d724:	movne	r1, #32
   1d728:	mov	r0, sl
   1d72c:	bl	112c8 <memset@plt>
   1d730:	add	sl, sl, r5
   1d734:	ldr	r3, [sp, #40]	; 0x28
   1d738:	cmp	r3, #0
   1d73c:	beq	1ca84 <__assert_fail@plt+0xb6b4>
   1d740:	mov	r2, r8
   1d744:	mov	r1, r4
   1d748:	mov	r0, sl
   1d74c:	bl	1be00 <__assert_fail@plt+0xaa30>
   1d750:	add	sl, sl, r8
   1d754:	add	fp, fp, r9
   1d758:	b	1bf20 <__assert_fail@plt+0xab50>
   1d75c:	mov	r3, #43	; 0x2b
   1d760:	str	r3, [sp, #52]	; 0x34
   1d764:	b	1d668 <__assert_fail@plt+0xc298>
   1d768:	ldr	r3, [sp, #32]
   1d76c:	cmp	r3, fp
   1d770:	beq	1cd18 <__assert_fail@plt+0xb948>
   1d774:	mov	r5, #0
   1d778:	b	1ccec <__assert_fail@plt+0xb91c>
   1d77c:	push	{r4, lr}
   1d780:	sub	sp, sp, #32
   1d784:	mov	ip, #0
   1d788:	add	lr, sp, #32
   1d78c:	strb	ip, [lr, #-1]!
   1d790:	ldr	r4, [sp, #44]	; 0x2c
   1d794:	str	r4, [sp, #20]
   1d798:	ldr	r4, [sp, #40]	; 0x28
   1d79c:	str	r4, [sp, #16]
   1d7a0:	str	lr, [sp, #12]
   1d7a4:	mvn	lr, #0
   1d7a8:	str	lr, [sp, #8]
   1d7ac:	str	ip, [sp, #4]
   1d7b0:	str	ip, [sp]
   1d7b4:	bl	1be44 <__assert_fail@plt+0xaa74>
   1d7b8:	add	sp, sp, #32
   1d7bc:	pop	{r4, pc}
   1d7c0:	push	{r4, r5, r6, lr}
   1d7c4:	mov	r6, r0
   1d7c8:	mov	r5, r1
   1d7cc:	subs	r4, r2, #0
   1d7d0:	beq	1d7fc <__assert_fail@plt+0xc42c>
   1d7d4:	mov	r1, r4
   1d7d8:	mvn	r0, #0
   1d7dc:	bl	1d914 <__assert_fail@plt+0xc544>
   1d7e0:	cmp	r0, r5
   1d7e4:	bcs	1d7fc <__assert_fail@plt+0xc42c>
   1d7e8:	bl	11298 <__errno_location@plt>
   1d7ec:	mov	r3, #12
   1d7f0:	str	r3, [r0]
   1d7f4:	mov	r0, #0
   1d7f8:	pop	{r4, r5, r6, pc}
   1d7fc:	mul	r1, r5, r4
   1d800:	mov	r0, r6
   1d804:	bl	1ba5c <__assert_fail@plt+0xa68c>
   1d808:	pop	{r4, r5, r6, pc}
   1d80c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d810:	sub	sp, sp, #268	; 0x10c
   1d814:	ldr	r2, [pc, #68]	; 1d860 <__assert_fail@plt+0xc490>
   1d818:	add	r1, sp, #4
   1d81c:	bl	1d86c <__assert_fail@plt+0xc49c>
   1d820:	cmp	r0, #0
   1d824:	movne	r0, #0
   1d828:	bne	1d858 <__assert_fail@plt+0xc488>
   1d82c:	ldr	r1, [pc, #48]	; 1d864 <__assert_fail@plt+0xc494>
   1d830:	add	r0, sp, #4
   1d834:	bl	110a0 <strcmp@plt>
   1d838:	cmp	r0, #0
   1d83c:	moveq	r0, #0
   1d840:	beq	1d858 <__assert_fail@plt+0xc488>
   1d844:	ldr	r1, [pc, #28]	; 1d868 <__assert_fail@plt+0xc498>
   1d848:	add	r0, sp, #4
   1d84c:	bl	110a0 <strcmp@plt>
   1d850:	adds	r0, r0, #0
   1d854:	movne	r0, #1
   1d858:	add	sp, sp, #268	; 0x10c
   1d85c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d860:	andeq	r0, r0, r1, lsl #2
   1d864:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1d868:	andeq	r0, r2, r0, ror #18
   1d86c:	push	{r4, r5, r6, lr}
   1d870:	mov	r6, r1
   1d874:	mov	r4, r2
   1d878:	mov	r1, #0
   1d87c:	bl	1131c <setlocale@plt>
   1d880:	subs	r5, r0, #0
   1d884:	beq	1d8a8 <__assert_fail@plt+0xc4d8>
   1d888:	mov	r0, r5
   1d88c:	bl	11274 <strlen@plt>
   1d890:	cmp	r4, r0
   1d894:	bhi	1d8c0 <__assert_fail@plt+0xc4f0>
   1d898:	cmp	r4, #0
   1d89c:	bne	1d8d8 <__assert_fail@plt+0xc508>
   1d8a0:	mov	r0, #34	; 0x22
   1d8a4:	pop	{r4, r5, r6, pc}
   1d8a8:	cmp	r4, #0
   1d8ac:	beq	1d8fc <__assert_fail@plt+0xc52c>
   1d8b0:	mov	r3, #0
   1d8b4:	strb	r3, [r6]
   1d8b8:	mov	r0, #22
   1d8bc:	pop	{r4, r5, r6, pc}
   1d8c0:	add	r2, r0, #1
   1d8c4:	mov	r1, r5
   1d8c8:	mov	r0, r6
   1d8cc:	bl	110f4 <memcpy@plt>
   1d8d0:	mov	r0, #0
   1d8d4:	pop	{r4, r5, r6, pc}
   1d8d8:	sub	r4, r4, #1
   1d8dc:	mov	r2, r4
   1d8e0:	mov	r1, r5
   1d8e4:	mov	r0, r6
   1d8e8:	bl	110f4 <memcpy@plt>
   1d8ec:	mov	r3, #0
   1d8f0:	strb	r3, [r6, r4]
   1d8f4:	mov	r0, #34	; 0x22
   1d8f8:	pop	{r4, r5, r6, pc}
   1d8fc:	mov	r0, #22
   1d900:	pop	{r4, r5, r6, pc}
   1d904:	push	{r4, lr}
   1d908:	mov	r1, #0
   1d90c:	bl	1131c <setlocale@plt>
   1d910:	pop	{r4, pc}
   1d914:	subs	r2, r1, #1
   1d918:	bxeq	lr
   1d91c:	bcc	1daf4 <__assert_fail@plt+0xc724>
   1d920:	cmp	r0, r1
   1d924:	bls	1dad8 <__assert_fail@plt+0xc708>
   1d928:	tst	r1, r2
   1d92c:	beq	1dae4 <__assert_fail@plt+0xc714>
   1d930:	clz	r3, r0
   1d934:	clz	r2, r1
   1d938:	sub	r3, r2, r3
   1d93c:	rsbs	r3, r3, #31
   1d940:	addne	r3, r3, r3, lsl #1
   1d944:	mov	r2, #0
   1d948:	addne	pc, pc, r3, lsl #2
   1d94c:	nop			; (mov r0, r0)
   1d950:	cmp	r0, r1, lsl #31
   1d954:	adc	r2, r2, r2
   1d958:	subcs	r0, r0, r1, lsl #31
   1d95c:	cmp	r0, r1, lsl #30
   1d960:	adc	r2, r2, r2
   1d964:	subcs	r0, r0, r1, lsl #30
   1d968:	cmp	r0, r1, lsl #29
   1d96c:	adc	r2, r2, r2
   1d970:	subcs	r0, r0, r1, lsl #29
   1d974:	cmp	r0, r1, lsl #28
   1d978:	adc	r2, r2, r2
   1d97c:	subcs	r0, r0, r1, lsl #28
   1d980:	cmp	r0, r1, lsl #27
   1d984:	adc	r2, r2, r2
   1d988:	subcs	r0, r0, r1, lsl #27
   1d98c:	cmp	r0, r1, lsl #26
   1d990:	adc	r2, r2, r2
   1d994:	subcs	r0, r0, r1, lsl #26
   1d998:	cmp	r0, r1, lsl #25
   1d99c:	adc	r2, r2, r2
   1d9a0:	subcs	r0, r0, r1, lsl #25
   1d9a4:	cmp	r0, r1, lsl #24
   1d9a8:	adc	r2, r2, r2
   1d9ac:	subcs	r0, r0, r1, lsl #24
   1d9b0:	cmp	r0, r1, lsl #23
   1d9b4:	adc	r2, r2, r2
   1d9b8:	subcs	r0, r0, r1, lsl #23
   1d9bc:	cmp	r0, r1, lsl #22
   1d9c0:	adc	r2, r2, r2
   1d9c4:	subcs	r0, r0, r1, lsl #22
   1d9c8:	cmp	r0, r1, lsl #21
   1d9cc:	adc	r2, r2, r2
   1d9d0:	subcs	r0, r0, r1, lsl #21
   1d9d4:	cmp	r0, r1, lsl #20
   1d9d8:	adc	r2, r2, r2
   1d9dc:	subcs	r0, r0, r1, lsl #20
   1d9e0:	cmp	r0, r1, lsl #19
   1d9e4:	adc	r2, r2, r2
   1d9e8:	subcs	r0, r0, r1, lsl #19
   1d9ec:	cmp	r0, r1, lsl #18
   1d9f0:	adc	r2, r2, r2
   1d9f4:	subcs	r0, r0, r1, lsl #18
   1d9f8:	cmp	r0, r1, lsl #17
   1d9fc:	adc	r2, r2, r2
   1da00:	subcs	r0, r0, r1, lsl #17
   1da04:	cmp	r0, r1, lsl #16
   1da08:	adc	r2, r2, r2
   1da0c:	subcs	r0, r0, r1, lsl #16
   1da10:	cmp	r0, r1, lsl #15
   1da14:	adc	r2, r2, r2
   1da18:	subcs	r0, r0, r1, lsl #15
   1da1c:	cmp	r0, r1, lsl #14
   1da20:	adc	r2, r2, r2
   1da24:	subcs	r0, r0, r1, lsl #14
   1da28:	cmp	r0, r1, lsl #13
   1da2c:	adc	r2, r2, r2
   1da30:	subcs	r0, r0, r1, lsl #13
   1da34:	cmp	r0, r1, lsl #12
   1da38:	adc	r2, r2, r2
   1da3c:	subcs	r0, r0, r1, lsl #12
   1da40:	cmp	r0, r1, lsl #11
   1da44:	adc	r2, r2, r2
   1da48:	subcs	r0, r0, r1, lsl #11
   1da4c:	cmp	r0, r1, lsl #10
   1da50:	adc	r2, r2, r2
   1da54:	subcs	r0, r0, r1, lsl #10
   1da58:	cmp	r0, r1, lsl #9
   1da5c:	adc	r2, r2, r2
   1da60:	subcs	r0, r0, r1, lsl #9
   1da64:	cmp	r0, r1, lsl #8
   1da68:	adc	r2, r2, r2
   1da6c:	subcs	r0, r0, r1, lsl #8
   1da70:	cmp	r0, r1, lsl #7
   1da74:	adc	r2, r2, r2
   1da78:	subcs	r0, r0, r1, lsl #7
   1da7c:	cmp	r0, r1, lsl #6
   1da80:	adc	r2, r2, r2
   1da84:	subcs	r0, r0, r1, lsl #6
   1da88:	cmp	r0, r1, lsl #5
   1da8c:	adc	r2, r2, r2
   1da90:	subcs	r0, r0, r1, lsl #5
   1da94:	cmp	r0, r1, lsl #4
   1da98:	adc	r2, r2, r2
   1da9c:	subcs	r0, r0, r1, lsl #4
   1daa0:	cmp	r0, r1, lsl #3
   1daa4:	adc	r2, r2, r2
   1daa8:	subcs	r0, r0, r1, lsl #3
   1daac:	cmp	r0, r1, lsl #2
   1dab0:	adc	r2, r2, r2
   1dab4:	subcs	r0, r0, r1, lsl #2
   1dab8:	cmp	r0, r1, lsl #1
   1dabc:	adc	r2, r2, r2
   1dac0:	subcs	r0, r0, r1, lsl #1
   1dac4:	cmp	r0, r1
   1dac8:	adc	r2, r2, r2
   1dacc:	subcs	r0, r0, r1
   1dad0:	mov	r0, r2
   1dad4:	bx	lr
   1dad8:	moveq	r0, #1
   1dadc:	movne	r0, #0
   1dae0:	bx	lr
   1dae4:	clz	r2, r1
   1dae8:	rsb	r2, r2, #31
   1daec:	lsr	r0, r0, r2
   1daf0:	bx	lr
   1daf4:	cmp	r0, #0
   1daf8:	mvnne	r0, #0
   1dafc:	b	1de34 <__assert_fail@plt+0xca64>
   1db00:	cmp	r1, #0
   1db04:	beq	1daf4 <__assert_fail@plt+0xc724>
   1db08:	push	{r0, r1, lr}
   1db0c:	bl	1d914 <__assert_fail@plt+0xc544>
   1db10:	pop	{r1, r2, lr}
   1db14:	mul	r3, r2, r0
   1db18:	sub	r1, r1, r3
   1db1c:	bx	lr
   1db20:	cmp	r1, #0
   1db24:	beq	1dd30 <__assert_fail@plt+0xc960>
   1db28:	eor	ip, r0, r1
   1db2c:	rsbmi	r1, r1, #0
   1db30:	subs	r2, r1, #1
   1db34:	beq	1dcfc <__assert_fail@plt+0xc92c>
   1db38:	movs	r3, r0
   1db3c:	rsbmi	r3, r0, #0
   1db40:	cmp	r3, r1
   1db44:	bls	1dd08 <__assert_fail@plt+0xc938>
   1db48:	tst	r1, r2
   1db4c:	beq	1dd18 <__assert_fail@plt+0xc948>
   1db50:	clz	r2, r3
   1db54:	clz	r0, r1
   1db58:	sub	r2, r0, r2
   1db5c:	rsbs	r2, r2, #31
   1db60:	addne	r2, r2, r2, lsl #1
   1db64:	mov	r0, #0
   1db68:	addne	pc, pc, r2, lsl #2
   1db6c:	nop			; (mov r0, r0)
   1db70:	cmp	r3, r1, lsl #31
   1db74:	adc	r0, r0, r0
   1db78:	subcs	r3, r3, r1, lsl #31
   1db7c:	cmp	r3, r1, lsl #30
   1db80:	adc	r0, r0, r0
   1db84:	subcs	r3, r3, r1, lsl #30
   1db88:	cmp	r3, r1, lsl #29
   1db8c:	adc	r0, r0, r0
   1db90:	subcs	r3, r3, r1, lsl #29
   1db94:	cmp	r3, r1, lsl #28
   1db98:	adc	r0, r0, r0
   1db9c:	subcs	r3, r3, r1, lsl #28
   1dba0:	cmp	r3, r1, lsl #27
   1dba4:	adc	r0, r0, r0
   1dba8:	subcs	r3, r3, r1, lsl #27
   1dbac:	cmp	r3, r1, lsl #26
   1dbb0:	adc	r0, r0, r0
   1dbb4:	subcs	r3, r3, r1, lsl #26
   1dbb8:	cmp	r3, r1, lsl #25
   1dbbc:	adc	r0, r0, r0
   1dbc0:	subcs	r3, r3, r1, lsl #25
   1dbc4:	cmp	r3, r1, lsl #24
   1dbc8:	adc	r0, r0, r0
   1dbcc:	subcs	r3, r3, r1, lsl #24
   1dbd0:	cmp	r3, r1, lsl #23
   1dbd4:	adc	r0, r0, r0
   1dbd8:	subcs	r3, r3, r1, lsl #23
   1dbdc:	cmp	r3, r1, lsl #22
   1dbe0:	adc	r0, r0, r0
   1dbe4:	subcs	r3, r3, r1, lsl #22
   1dbe8:	cmp	r3, r1, lsl #21
   1dbec:	adc	r0, r0, r0
   1dbf0:	subcs	r3, r3, r1, lsl #21
   1dbf4:	cmp	r3, r1, lsl #20
   1dbf8:	adc	r0, r0, r0
   1dbfc:	subcs	r3, r3, r1, lsl #20
   1dc00:	cmp	r3, r1, lsl #19
   1dc04:	adc	r0, r0, r0
   1dc08:	subcs	r3, r3, r1, lsl #19
   1dc0c:	cmp	r3, r1, lsl #18
   1dc10:	adc	r0, r0, r0
   1dc14:	subcs	r3, r3, r1, lsl #18
   1dc18:	cmp	r3, r1, lsl #17
   1dc1c:	adc	r0, r0, r0
   1dc20:	subcs	r3, r3, r1, lsl #17
   1dc24:	cmp	r3, r1, lsl #16
   1dc28:	adc	r0, r0, r0
   1dc2c:	subcs	r3, r3, r1, lsl #16
   1dc30:	cmp	r3, r1, lsl #15
   1dc34:	adc	r0, r0, r0
   1dc38:	subcs	r3, r3, r1, lsl #15
   1dc3c:	cmp	r3, r1, lsl #14
   1dc40:	adc	r0, r0, r0
   1dc44:	subcs	r3, r3, r1, lsl #14
   1dc48:	cmp	r3, r1, lsl #13
   1dc4c:	adc	r0, r0, r0
   1dc50:	subcs	r3, r3, r1, lsl #13
   1dc54:	cmp	r3, r1, lsl #12
   1dc58:	adc	r0, r0, r0
   1dc5c:	subcs	r3, r3, r1, lsl #12
   1dc60:	cmp	r3, r1, lsl #11
   1dc64:	adc	r0, r0, r0
   1dc68:	subcs	r3, r3, r1, lsl #11
   1dc6c:	cmp	r3, r1, lsl #10
   1dc70:	adc	r0, r0, r0
   1dc74:	subcs	r3, r3, r1, lsl #10
   1dc78:	cmp	r3, r1, lsl #9
   1dc7c:	adc	r0, r0, r0
   1dc80:	subcs	r3, r3, r1, lsl #9
   1dc84:	cmp	r3, r1, lsl #8
   1dc88:	adc	r0, r0, r0
   1dc8c:	subcs	r3, r3, r1, lsl #8
   1dc90:	cmp	r3, r1, lsl #7
   1dc94:	adc	r0, r0, r0
   1dc98:	subcs	r3, r3, r1, lsl #7
   1dc9c:	cmp	r3, r1, lsl #6
   1dca0:	adc	r0, r0, r0
   1dca4:	subcs	r3, r3, r1, lsl #6
   1dca8:	cmp	r3, r1, lsl #5
   1dcac:	adc	r0, r0, r0
   1dcb0:	subcs	r3, r3, r1, lsl #5
   1dcb4:	cmp	r3, r1, lsl #4
   1dcb8:	adc	r0, r0, r0
   1dcbc:	subcs	r3, r3, r1, lsl #4
   1dcc0:	cmp	r3, r1, lsl #3
   1dcc4:	adc	r0, r0, r0
   1dcc8:	subcs	r3, r3, r1, lsl #3
   1dccc:	cmp	r3, r1, lsl #2
   1dcd0:	adc	r0, r0, r0
   1dcd4:	subcs	r3, r3, r1, lsl #2
   1dcd8:	cmp	r3, r1, lsl #1
   1dcdc:	adc	r0, r0, r0
   1dce0:	subcs	r3, r3, r1, lsl #1
   1dce4:	cmp	r3, r1
   1dce8:	adc	r0, r0, r0
   1dcec:	subcs	r3, r3, r1
   1dcf0:	cmp	ip, #0
   1dcf4:	rsbmi	r0, r0, #0
   1dcf8:	bx	lr
   1dcfc:	teq	ip, r0
   1dd00:	rsbmi	r0, r0, #0
   1dd04:	bx	lr
   1dd08:	movcc	r0, #0
   1dd0c:	asreq	r0, ip, #31
   1dd10:	orreq	r0, r0, #1
   1dd14:	bx	lr
   1dd18:	clz	r2, r1
   1dd1c:	rsb	r2, r2, #31
   1dd20:	cmp	ip, #0
   1dd24:	lsr	r0, r3, r2
   1dd28:	rsbmi	r0, r0, #0
   1dd2c:	bx	lr
   1dd30:	cmp	r0, #0
   1dd34:	mvngt	r0, #-2147483648	; 0x80000000
   1dd38:	movlt	r0, #-2147483648	; 0x80000000
   1dd3c:	b	1de34 <__assert_fail@plt+0xca64>
   1dd40:	cmp	r1, #0
   1dd44:	beq	1dd30 <__assert_fail@plt+0xc960>
   1dd48:	push	{r0, r1, lr}
   1dd4c:	bl	1db28 <__assert_fail@plt+0xc758>
   1dd50:	pop	{r1, r2, lr}
   1dd54:	mul	r3, r2, r0
   1dd58:	sub	r1, r1, r3
   1dd5c:	bx	lr
   1dd60:	cmp	r3, #0
   1dd64:	cmpeq	r2, #0
   1dd68:	bne	1dd8c <__assert_fail@plt+0xc9bc>
   1dd6c:	cmp	r1, #0
   1dd70:	movlt	r1, #-2147483648	; 0x80000000
   1dd74:	movlt	r0, #0
   1dd78:	blt	1dd88 <__assert_fail@plt+0xc9b8>
   1dd7c:	cmpeq	r0, #0
   1dd80:	mvnne	r1, #-2147483648	; 0x80000000
   1dd84:	mvnne	r0, #0
   1dd88:	b	1de34 <__assert_fail@plt+0xca64>
   1dd8c:	sub	sp, sp, #8
   1dd90:	push	{sp, lr}
   1dd94:	cmp	r1, #0
   1dd98:	blt	1ddb8 <__assert_fail@plt+0xc9e8>
   1dd9c:	cmp	r3, #0
   1dda0:	blt	1ddec <__assert_fail@plt+0xca1c>
   1dda4:	bl	1de44 <__assert_fail@plt+0xca74>
   1dda8:	ldr	lr, [sp, #4]
   1ddac:	add	sp, sp, #8
   1ddb0:	pop	{r2, r3}
   1ddb4:	bx	lr
   1ddb8:	rsbs	r0, r0, #0
   1ddbc:	sbc	r1, r1, r1, lsl #1
   1ddc0:	cmp	r3, #0
   1ddc4:	blt	1de10 <__assert_fail@plt+0xca40>
   1ddc8:	bl	1de44 <__assert_fail@plt+0xca74>
   1ddcc:	ldr	lr, [sp, #4]
   1ddd0:	add	sp, sp, #8
   1ddd4:	pop	{r2, r3}
   1ddd8:	rsbs	r0, r0, #0
   1dddc:	sbc	r1, r1, r1, lsl #1
   1dde0:	rsbs	r2, r2, #0
   1dde4:	sbc	r3, r3, r3, lsl #1
   1dde8:	bx	lr
   1ddec:	rsbs	r2, r2, #0
   1ddf0:	sbc	r3, r3, r3, lsl #1
   1ddf4:	bl	1de44 <__assert_fail@plt+0xca74>
   1ddf8:	ldr	lr, [sp, #4]
   1ddfc:	add	sp, sp, #8
   1de00:	pop	{r2, r3}
   1de04:	rsbs	r0, r0, #0
   1de08:	sbc	r1, r1, r1, lsl #1
   1de0c:	bx	lr
   1de10:	rsbs	r2, r2, #0
   1de14:	sbc	r3, r3, r3, lsl #1
   1de18:	bl	1de44 <__assert_fail@plt+0xca74>
   1de1c:	ldr	lr, [sp, #4]
   1de20:	add	sp, sp, #8
   1de24:	pop	{r2, r3}
   1de28:	rsbs	r2, r2, #0
   1de2c:	sbc	r3, r3, r3, lsl #1
   1de30:	bx	lr
   1de34:	push	{r1, lr}
   1de38:	mov	r0, #8
   1de3c:	bl	1107c <raise@plt>
   1de40:	pop	{r1, pc}
   1de44:	cmp	r1, r3
   1de48:	push	{r4, r5, r6, r7, r8, r9, lr}
   1de4c:	cmpeq	r0, r2
   1de50:	mov	r4, r0
   1de54:	mov	r5, r1
   1de58:	ldr	r9, [sp, #28]
   1de5c:	movcc	r0, #0
   1de60:	movcc	r1, #0
   1de64:	bcc	1df5c <__assert_fail@plt+0xcb8c>
   1de68:	cmp	r3, #0
   1de6c:	clzeq	ip, r2
   1de70:	clzne	ip, r3
   1de74:	addeq	ip, ip, #32
   1de78:	cmp	r5, #0
   1de7c:	clzeq	r1, r4
   1de80:	addeq	r1, r1, #32
   1de84:	clzne	r1, r5
   1de88:	sub	ip, ip, r1
   1de8c:	sub	lr, ip, #32
   1de90:	lsl	r7, r3, ip
   1de94:	rsb	r8, ip, #32
   1de98:	orr	r7, r7, r2, lsl lr
   1de9c:	orr	r7, r7, r2, lsr r8
   1dea0:	lsl	r6, r2, ip
   1dea4:	cmp	r5, r7
   1dea8:	cmpeq	r4, r6
   1deac:	movcc	r0, #0
   1deb0:	movcc	r1, #0
   1deb4:	bcc	1ded0 <__assert_fail@plt+0xcb00>
   1deb8:	mov	r3, #1
   1debc:	subs	r4, r4, r6
   1dec0:	lsl	r1, r3, lr
   1dec4:	lsl	r0, r3, ip
   1dec8:	orr	r1, r1, r3, lsr r8
   1decc:	sbc	r5, r5, r7
   1ded0:	cmp	ip, #0
   1ded4:	beq	1df5c <__assert_fail@plt+0xcb8c>
   1ded8:	lsrs	r3, r7, #1
   1dedc:	rrx	r2, r6
   1dee0:	mov	r6, ip
   1dee4:	b	1df08 <__assert_fail@plt+0xcb38>
   1dee8:	subs	r4, r4, r2
   1deec:	sbc	r5, r5, r3
   1def0:	adds	r4, r4, r4
   1def4:	adc	r5, r5, r5
   1def8:	adds	r4, r4, #1
   1defc:	adc	r5, r5, #0
   1df00:	subs	r6, r6, #1
   1df04:	beq	1df24 <__assert_fail@plt+0xcb54>
   1df08:	cmp	r5, r3
   1df0c:	cmpeq	r4, r2
   1df10:	bcs	1dee8 <__assert_fail@plt+0xcb18>
   1df14:	adds	r4, r4, r4
   1df18:	adc	r5, r5, r5
   1df1c:	subs	r6, r6, #1
   1df20:	bne	1df08 <__assert_fail@plt+0xcb38>
   1df24:	lsr	r6, r4, ip
   1df28:	lsr	r7, r5, ip
   1df2c:	orr	r6, r6, r5, lsl r8
   1df30:	adds	r2, r0, r4
   1df34:	orr	r6, r6, r5, lsr lr
   1df38:	adc	r3, r1, r5
   1df3c:	lsl	r1, r7, ip
   1df40:	orr	r1, r1, r6, lsl lr
   1df44:	lsl	r0, r6, ip
   1df48:	orr	r1, r1, r6, lsr r8
   1df4c:	subs	r0, r2, r0
   1df50:	mov	r4, r6
   1df54:	mov	r5, r7
   1df58:	sbc	r1, r3, r1
   1df5c:	cmp	r9, #0
   1df60:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1df64:	strd	r4, [r9]
   1df68:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1df6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1df70:	mov	r7, r0
   1df74:	ldr	r6, [pc, #72]	; 1dfc4 <__assert_fail@plt+0xcbf4>
   1df78:	ldr	r5, [pc, #72]	; 1dfc8 <__assert_fail@plt+0xcbf8>
   1df7c:	add	r6, pc, r6
   1df80:	add	r5, pc, r5
   1df84:	sub	r6, r6, r5
   1df88:	mov	r8, r1
   1df8c:	mov	r9, r2
   1df90:	bl	11044 <calloc@plt-0x20>
   1df94:	asrs	r6, r6, #2
   1df98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1df9c:	mov	r4, #0
   1dfa0:	add	r4, r4, #1
   1dfa4:	ldr	r3, [r5], #4
   1dfa8:	mov	r2, r9
   1dfac:	mov	r1, r8
   1dfb0:	mov	r0, r7
   1dfb4:	blx	r3
   1dfb8:	cmp	r6, r4
   1dfbc:	bne	1dfa0 <__assert_fail@plt+0xcbd0>
   1dfc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dfc4:	andeq	r2, r1, ip, lsl #31
   1dfc8:	andeq	r2, r1, r4, lsl #31
   1dfcc:	bx	lr
   1dfd0:	ldr	r3, [pc, #12]	; 1dfe4 <__assert_fail@plt+0xcc14>
   1dfd4:	mov	r1, #0
   1dfd8:	add	r3, pc, r3
   1dfdc:	ldr	r2, [r3]
   1dfe0:	b	112bc <__cxa_atexit@plt>
   1dfe4:	andeq	r3, r1, ip, asr r1

Disassembly of section .fini:

0001dfe8 <.fini>:
   1dfe8:	push	{r3, lr}
   1dfec:	pop	{r3, pc}
