
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010d70 <.init>:
   10d70:	push	{r3, lr}
   10d74:	bl	11024 <__assert_fail@plt+0x48>
   10d78:	pop	{r3, pc}

Disassembly of section .plt:

00010d7c <calloc@plt-0x14>:
   10d7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d80:	ldr	lr, [pc, #4]	; 10d8c <calloc@plt-0x4>
   10d84:	add	lr, pc, lr
   10d88:	ldr	pc, [lr, #8]!
   10d8c:	andeq	r7, r1, r4, ror r2

00010d90 <calloc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #628]!	; 0x274

00010d9c <fputs_unlocked@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #620]!	; 0x26c

00010da8 <raise@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #612]!	; 0x264

00010db4 <strcmp@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #604]!	; 0x25c

00010dc0 <fflush@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #596]!	; 0x254

00010dcc <free@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #588]!	; 0x24c

00010dd8 <_exit@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #580]!	; 0x244

00010de4 <memcpy@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #572]!	; 0x23c

00010df0 <mbsinit@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #564]!	; 0x234

00010dfc <ftruncate64@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #556]!	; 0x22c

00010e08 <memcmp@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #548]!	; 0x224

00010e14 <dcgettext@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #540]!	; 0x21c

00010e20 <realloc@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #532]!	; 0x214

00010e2c <textdomain@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #524]!	; 0x20c

00010e38 <iswprint@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #516]!	; 0x204

00010e44 <__fxstat64@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e50 <fwrite@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #500]!	; 0x1f4

00010e5c <lseek64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #492]!	; 0x1ec

00010e68 <__ctype_get_mb_cur_max@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #484]!	; 0x1e4

00010e74 <__fpending@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #476]!	; 0x1dc

00010e80 <mbrtowc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #468]!	; 0x1d4

00010e8c <error@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #460]!	; 0x1cc

00010e98 <open64@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea4 <malloc@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #444]!	; 0x1bc

00010eb0 <__libc_start_main@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #436]!	; 0x1b4

00010ebc <__freading@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec8 <__gmon_start__@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed4 <getopt_long@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #412]!	; 0x19c

00010ee0 <__ctype_b_loc@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #404]!	; 0x194

00010eec <exit@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #396]!	; 0x18c

00010ef8 <strlen@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #388]!	; 0x184

00010f04 <strchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #380]!	; 0x17c

00010f10 <__errno_location@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #372]!	; 0x174

00010f1c <__cxa_atexit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #364]!	; 0x16c

00010f28 <memset@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #356]!	; 0x164

00010f34 <__printf_chk@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #348]!	; 0x15c

00010f40 <fileno@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #340]!	; 0x154

00010f4c <__fprintf_chk@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #332]!	; 0x14c

00010f58 <fclose@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #324]!	; 0x144

00010f64 <fseeko64@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #316]!	; 0x13c

00010f70 <setlocale@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #308]!	; 0x134

00010f7c <strrchr@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #300]!	; 0x12c

00010f88 <nl_langinfo@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #292]!	; 0x124

00010f94 <__strtoll_internal@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #284]!	; 0x11c

00010fa0 <bindtextdomain@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #276]!	; 0x114

00010fac <__xstat64@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #268]!	; 0x10c

00010fb8 <strncmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #260]!	; 0x104

00010fc4 <abort@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #252]!	; 0xfc

00010fd0 <close@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #244]!	; 0xf4

00010fdc <__assert_fail@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #236]!	; 0xec

Disassembly of section .text:

00010fe8 <.text>:
   10fe8:	mov	fp, #0
   10fec:	mov	lr, #0
   10ff0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ff4:	mov	r2, sp
   10ff8:	push	{r2}		; (str r2, [sp, #-4]!)
   10ffc:	push	{r0}		; (str r0, [sp, #-4]!)
   11000:	ldr	ip, [pc, #16]	; 11018 <__assert_fail@plt+0x3c>
   11004:	push	{ip}		; (str ip, [sp, #-4]!)
   11008:	ldr	r0, [pc, #12]	; 1101c <__assert_fail@plt+0x40>
   1100c:	ldr	r3, [pc, #12]	; 11020 <__assert_fail@plt+0x44>
   11010:	bl	10eb0 <__libc_start_main@plt>
   11014:	bl	10fc4 <abort@plt>
   11018:	andeq	r6, r1, r4, lsr #30
   1101c:	andeq	r1, r1, r4, asr #7
   11020:	andeq	r6, r1, r4, asr #29
   11024:	ldr	r3, [pc, #20]	; 11040 <__assert_fail@plt+0x64>
   11028:	ldr	r2, [pc, #20]	; 11044 <__assert_fail@plt+0x68>
   1102c:	add	r3, pc, r3
   11030:	ldr	r2, [r3, r2]
   11034:	cmp	r2, #0
   11038:	bxeq	lr
   1103c:	b	10ec8 <__gmon_start__@plt>
   11040:	andeq	r6, r1, ip, asr #31
   11044:	ldrdeq	r0, [r0], -r4
   11048:	ldr	r0, [pc, #24]	; 11068 <__assert_fail@plt+0x8c>
   1104c:	ldr	r3, [pc, #24]	; 1106c <__assert_fail@plt+0x90>
   11050:	cmp	r3, r0
   11054:	bxeq	lr
   11058:	ldr	r3, [pc, #16]	; 11070 <__assert_fail@plt+0x94>
   1105c:	cmp	r3, #0
   11060:	bxeq	lr
   11064:	bx	r3
   11068:	andeq	r8, r2, r8, lsr #2
   1106c:	andeq	r8, r2, r8, lsr #2
   11070:	andeq	r0, r0, r0
   11074:	ldr	r0, [pc, #36]	; 110a0 <__assert_fail@plt+0xc4>
   11078:	ldr	r1, [pc, #36]	; 110a4 <__assert_fail@plt+0xc8>
   1107c:	sub	r1, r1, r0
   11080:	asr	r1, r1, #2
   11084:	add	r1, r1, r1, lsr #31
   11088:	asrs	r1, r1, #1
   1108c:	bxeq	lr
   11090:	ldr	r3, [pc, #16]	; 110a8 <__assert_fail@plt+0xcc>
   11094:	cmp	r3, #0
   11098:	bxeq	lr
   1109c:	bx	r3
   110a0:	andeq	r8, r2, r8, lsr #2
   110a4:	andeq	r8, r2, r8, lsr #2
   110a8:	andeq	r0, r0, r0
   110ac:	push	{r4, lr}
   110b0:	ldr	r4, [pc, #24]	; 110d0 <__assert_fail@plt+0xf4>
   110b4:	ldrb	r3, [r4]
   110b8:	cmp	r3, #0
   110bc:	popne	{r4, pc}
   110c0:	bl	11048 <__assert_fail@plt+0x6c>
   110c4:	mov	r3, #1
   110c8:	strb	r3, [r4]
   110cc:	pop	{r4, pc}
   110d0:	andeq	r8, r2, r4, asr #2
   110d4:	b	11074 <__assert_fail@plt+0x98>
   110d8:	push	{fp, lr}
   110dc:	mov	fp, sp
   110e0:	sub	sp, sp, #56	; 0x38
   110e4:	mov	r4, r0
   110e8:	cmp	r0, #0
   110ec:	bne	11380 <__assert_fail@plt+0x3a4>
   110f0:	movw	r1, #28531	; 0x6f73
   110f4:	mov	r0, #0
   110f8:	mov	r2, #5
   110fc:	movt	r1, #1
   11100:	bl	10e14 <dcgettext@plt>
   11104:	mov	r1, r0
   11108:	movw	r0, #33112	; 0x8158
   1110c:	movt	r0, #2
   11110:	ldr	r2, [r0]
   11114:	mov	r0, #1
   11118:	bl	10f34 <__printf_chk@plt>
   1111c:	movw	r1, #28560	; 0x6f90
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10e14 <dcgettext@plt>
   11130:	movw	r7, #33084	; 0x813c
   11134:	movt	r7, #2
   11138:	ldr	r1, [r7]
   1113c:	bl	10d9c <fputs_unlocked@plt>
   11140:	movw	r1, #29759	; 0x743f
   11144:	mov	r0, #0
   11148:	mov	r2, #5
   1114c:	movt	r1, #1
   11150:	bl	10e14 <dcgettext@plt>
   11154:	ldr	r1, [r7]
   11158:	bl	10d9c <fputs_unlocked@plt>
   1115c:	movw	r1, #28835	; 0x70a3
   11160:	mov	r0, #0
   11164:	mov	r2, #5
   11168:	movt	r1, #1
   1116c:	bl	10e14 <dcgettext@plt>
   11170:	ldr	r1, [r7]
   11174:	bl	10d9c <fputs_unlocked@plt>
   11178:	movw	r1, #28885	; 0x70d5
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	movt	r1, #1
   11188:	bl	10e14 <dcgettext@plt>
   1118c:	ldr	r1, [r7]
   11190:	bl	10d9c <fputs_unlocked@plt>
   11194:	movw	r1, #28962	; 0x7122
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e14 <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10d9c <fputs_unlocked@plt>
   111b0:	movw	r1, #29074	; 0x7192
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e14 <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10d9c <fputs_unlocked@plt>
   111cc:	movw	r1, #29119	; 0x71bf
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10e14 <dcgettext@plt>
   111e0:	ldr	r1, [r7]
   111e4:	bl	10d9c <fputs_unlocked@plt>
   111e8:	movw	r1, #29834	; 0x748a
   111ec:	mov	r0, #0
   111f0:	mov	r2, #5
   111f4:	movt	r1, #1
   111f8:	bl	10e14 <dcgettext@plt>
   111fc:	ldr	r1, [r7]
   11200:	bl	10d9c <fputs_unlocked@plt>
   11204:	movw	r1, #29173	; 0x71f5
   11208:	mov	r0, #0
   1120c:	mov	r2, #5
   11210:	movt	r1, #1
   11214:	bl	10e14 <dcgettext@plt>
   11218:	ldr	r1, [r7]
   1121c:	bl	10d9c <fputs_unlocked@plt>
   11220:	movw	r0, #30672	; 0x77d0
   11224:	mov	r2, #48	; 0x30
   11228:	mov	r6, sp
   1122c:	movw	r5, #29364	; 0x72b4
   11230:	movt	r0, #1
   11234:	movt	r5, #1
   11238:	add	r1, r0, #32
   1123c:	add	r3, r0, #16
   11240:	vld1.64	{d18-d19}, [r0], r2
   11244:	vld1.64	{d16-d17}, [r1]
   11248:	vld1.64	{d20-d21}, [r3]
   1124c:	add	r1, r6, #32
   11250:	vldr	d22, [r0]
   11254:	add	r0, r6, #16
   11258:	vst1.64	{d16-d17}, [r1]
   1125c:	movw	r1, #30046	; 0x755e
   11260:	vst1.64	{d20-d21}, [r0]
   11264:	mov	r0, r6
   11268:	vst1.64	{d18-d19}, [r0], r2
   1126c:	movt	r1, #1
   11270:	vstr	d22, [r0]
   11274:	mov	r0, r5
   11278:	bl	10db4 <strcmp@plt>
   1127c:	cmp	r0, #0
   11280:	ldrne	r1, [r6, #8]!
   11284:	cmpne	r1, #0
   11288:	bne	11274 <__assert_fail@plt+0x298>
   1128c:	ldr	r6, [r6, #4]
   11290:	movw	r1, #30141	; 0x75bd
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	movt	r1, #1
   112a0:	bl	10e14 <dcgettext@plt>
   112a4:	movw	r2, #29488	; 0x7330
   112a8:	movw	r3, #30164	; 0x75d4
   112ac:	mov	r1, r0
   112b0:	mov	r0, #1
   112b4:	movt	r2, #1
   112b8:	movt	r3, #1
   112bc:	bl	10f34 <__printf_chk@plt>
   112c0:	cmp	r6, #0
   112c4:	mov	r0, #5
   112c8:	mov	r1, #0
   112cc:	moveq	r6, r5
   112d0:	bl	10f70 <setlocale@plt>
   112d4:	cmp	r0, #0
   112d8:	beq	11310 <__assert_fail@plt+0x334>
   112dc:	movw	r1, #30204	; 0x75fc
   112e0:	mov	r2, #3
   112e4:	movt	r1, #1
   112e8:	bl	10fb8 <strncmp@plt>
   112ec:	cmp	r0, #0
   112f0:	beq	11310 <__assert_fail@plt+0x334>
   112f4:	movw	r1, #30208	; 0x7600
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10e14 <dcgettext@plt>
   11308:	ldr	r1, [r7]
   1130c:	bl	10d9c <fputs_unlocked@plt>
   11310:	movw	r1, #30279	; 0x7647
   11314:	mov	r0, #0
   11318:	mov	r2, #5
   1131c:	movt	r1, #1
   11320:	bl	10e14 <dcgettext@plt>
   11324:	movw	r2, #30164	; 0x75d4
   11328:	mov	r1, r0
   1132c:	mov	r0, #1
   11330:	mov	r3, r5
   11334:	movt	r2, #1
   11338:	bl	10f34 <__printf_chk@plt>
   1133c:	movw	r1, #30306	; 0x7662
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10e14 <dcgettext@plt>
   11350:	movw	r3, #30356	; 0x7694
   11354:	mov	r1, r0
   11358:	movw	r0, #30074	; 0x757a
   1135c:	cmp	r6, r5
   11360:	mov	r2, r6
   11364:	movt	r0, #1
   11368:	movt	r3, #1
   1136c:	moveq	r3, r0
   11370:	mov	r0, #1
   11374:	bl	10f34 <__printf_chk@plt>
   11378:	mov	r0, r4
   1137c:	bl	10eec <exit@plt>
   11380:	movw	r0, #33080	; 0x8138
   11384:	movw	r1, #28492	; 0x6f4c
   11388:	mov	r2, #5
   1138c:	movt	r0, #2
   11390:	movt	r1, #1
   11394:	ldr	r5, [r0]
   11398:	mov	r0, #0
   1139c:	bl	10e14 <dcgettext@plt>
   113a0:	mov	r2, r0
   113a4:	movw	r0, #33112	; 0x8158
   113a8:	mov	r1, #1
   113ac:	movt	r0, #2
   113b0:	ldr	r3, [r0]
   113b4:	mov	r0, r5
   113b8:	bl	10f4c <__fprintf_chk@plt>
   113bc:	mov	r0, r4
   113c0:	bl	10eec <exit@plt>
   113c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c8:	add	fp, sp, #28
   113cc:	sub	sp, sp, #172	; 0xac
   113d0:	mov	r5, r0
   113d4:	ldr	r0, [r1]
   113d8:	mov	sl, r1
   113dc:	bl	1210c <__assert_fail@plt+0x1130>
   113e0:	movw	r1, #30356	; 0x7694
   113e4:	mov	r0, #6
   113e8:	movt	r1, #1
   113ec:	bl	10f70 <setlocale@plt>
   113f0:	movw	r4, #29492	; 0x7334
   113f4:	movw	r1, #29373	; 0x72bd
   113f8:	movt	r4, #1
   113fc:	movt	r1, #1
   11400:	mov	r0, r4
   11404:	bl	10fa0 <bindtextdomain@plt>
   11408:	mov	r0, r4
   1140c:	bl	10e2c <textdomain@plt>
   11410:	movw	r0, #8224	; 0x2020
   11414:	movt	r0, #1
   11418:	bl	16f28 <__assert_fail@plt+0x5f4c>
   1141c:	movw	r7, #30560	; 0x7760
   11420:	movw	r9, #33088	; 0x8140
   11424:	mov	r0, #0
   11428:	mov	r4, #0
   1142c:	mov	r6, #0
   11430:	str	r0, [sp, #48]	; 0x30
   11434:	movt	r7, #1
   11438:	movt	r9, #2
   1143c:	movw	r8, #33096	; 0x8148
   11440:	movt	r8, #2
   11444:	b	11450 <__assert_fail@plt+0x474>
   11448:	mov	r0, #1
   1144c:	strb	r0, [r8, #1]
   11450:	movw	r2, #29397	; 0x72d5
   11454:	mov	r0, r5
   11458:	mov	r1, sl
   1145c:	mov	r3, r7
   11460:	str	r4, [sp]
   11464:	movt	r2, #1
   11468:	bl	10ed4 <getopt_long@plt>
   1146c:	cmp	r0, #98	; 0x62
   11470:	ble	116c4 <__assert_fail@plt+0x6e8>
   11474:	sub	r0, r0, #99	; 0x63
   11478:	cmp	r0, #16
   1147c:	bhi	11ebc <__assert_fail@plt+0xee0>
   11480:	add	r1, pc, #0
   11484:	ldr	pc, [r1, r0, lsl #2]
   11488:	andeq	r1, r1, ip, asr #9
   1148c:			; <UNDEFINED> instruction: 0x00011ebc
   11490:			; <UNDEFINED> instruction: 0x00011ebc
   11494:			; <UNDEFINED> instruction: 0x00011ebc
   11498:			; <UNDEFINED> instruction: 0x00011ebc
   1149c:			; <UNDEFINED> instruction: 0x00011ebc
   114a0:			; <UNDEFINED> instruction: 0x00011ebc
   114a4:			; <UNDEFINED> instruction: 0x00011ebc
   114a8:			; <UNDEFINED> instruction: 0x00011ebc
   114ac:			; <UNDEFINED> instruction: 0x00011ebc
   114b0:			; <UNDEFINED> instruction: 0x00011ebc
   114b4:			; <UNDEFINED> instruction: 0x00011ebc
   114b8:	andeq	r1, r1, r8, asr #8
   114bc:			; <UNDEFINED> instruction: 0x00011ebc
   114c0:			; <UNDEFINED> instruction: 0x00011ebc
   114c4:	ldrdeq	r1, [r1], -r8
   114c8:	andeq	r1, r1, r4, ror #9
   114cc:	mov	r0, #1
   114d0:	strb	r0, [r8]
   114d4:	b	11450 <__assert_fail@plt+0x474>
   114d8:	ldr	r0, [r9]
   114dc:	str	r0, [r8, #4]
   114e0:	b	11450 <__assert_fail@plt+0x474>
   114e4:	bl	10ee0 <__ctype_b_loc@plt>
   114e8:	ldr	r6, [r9]
   114ec:	ldr	r2, [r0]
   114f0:	ldrb	r1, [r6]
   114f4:	add	r2, r2, r1, lsl #1
   114f8:	ldrb	r2, [r2, #1]
   114fc:	tst	r2, #32
   11500:	beq	11528 <__assert_fail@plt+0x54c>
   11504:	add	r2, r6, #1
   11508:	str	r2, [r9]
   1150c:	ldrb	r1, [r2], #1
   11510:	ldr	r3, [r0]
   11514:	add	r3, r3, r1, lsl #1
   11518:	ldrb	r3, [r3, #1]
   1151c:	tst	r3, #32
   11520:	bne	11508 <__assert_fail@plt+0x52c>
   11524:	sub	r6, r2, #1
   11528:	sub	r2, r1, #37	; 0x25
   1152c:	cmp	r2, #25
   11530:	bhi	115c8 <__assert_fail@plt+0x5ec>
   11534:	add	r3, pc, #4
   11538:	mov	r1, #3
   1153c:	ldr	pc, [r3, r2, lsl #2]
   11540:	andeq	r1, r1, r8, lsr #11
   11544:	andeq	r1, r1, r8, asr #11
   11548:	andeq	r1, r1, r8, asr #11
   1154c:	andeq	r1, r1, r8, asr #11
   11550:	andeq	r1, r1, r8, asr #11
   11554:	andeq	r1, r1, r8, asr #11
   11558:	andeq	r1, r1, r8, asr #11
   1155c:	andeq	r1, r1, r8, asr #11
   11560:	andeq	r1, r1, r8, asr #11
   11564:	andeq	r1, r1, r8, asr #11
   11568:			; <UNDEFINED> instruction: 0x000115b0
   1156c:	andeq	r1, r1, r8, asr #11
   11570:	andeq	r1, r1, r8, asr #11
   11574:	andeq	r1, r1, r8, asr #11
   11578:	andeq	r1, r1, r8, asr #11
   1157c:	andeq	r1, r1, r8, asr #11
   11580:	andeq	r1, r1, r8, asr #11
   11584:	andeq	r1, r1, r8, asr #11
   11588:	andeq	r1, r1, r8, asr #11
   1158c:	andeq	r1, r1, r8, asr #11
   11590:	andeq	r1, r1, r8, asr #11
   11594:	andeq	r1, r1, r8, asr #11
   11598:	andeq	r1, r1, r8, asr #11
   1159c:			; <UNDEFINED> instruction: 0x000115bc
   115a0:	andeq	r1, r1, r8, asr #11
   115a4:			; <UNDEFINED> instruction: 0x000115b8
   115a8:	mov	r1, #5
   115ac:	b	115bc <__assert_fail@plt+0x5e0>
   115b0:	mov	r1, #4
   115b4:	b	115bc <__assert_fail@plt+0x5e0>
   115b8:	mov	r1, #2
   115bc:	add	r6, r6, #1
   115c0:	str	r1, [sp, #48]	; 0x30
   115c4:	str	r6, [r9]
   115c8:	ldrb	r1, [r6]
   115cc:	ldr	r2, [r0]
   115d0:	add	r2, r2, r1, lsl #1
   115d4:	ldrb	r2, [r2, #1]
   115d8:	tst	r2, #32
   115dc:	beq	11604 <__assert_fail@plt+0x628>
   115e0:	add	r2, r6, #1
   115e4:	str	r2, [r9]
   115e8:	ldrb	r1, [r2], #1
   115ec:	ldr	r3, [r0]
   115f0:	add	r3, r3, r1, lsl #1
   115f4:	ldrb	r3, [r3, #1]
   115f8:	tst	r3, #32
   115fc:	bne	115e4 <__assert_fail@plt+0x608>
   11600:	sub	r6, r2, #1
   11604:	cmp	r1, #45	; 0x2d
   11608:	cmpne	r1, #43	; 0x2b
   1160c:	bne	11624 <__assert_fail@plt+0x648>
   11610:	ldr	r0, [sp, #48]	; 0x30
   11614:	mov	r8, #1
   11618:	cmp	r0, #0
   1161c:	beq	11628 <__assert_fail@plt+0x64c>
   11620:	b	11ec4 <__assert_fail@plt+0xee8>
   11624:	ldr	r8, [sp, #48]	; 0x30
   11628:	movw	r1, #29456	; 0x7310
   1162c:	mov	r0, #0
   11630:	mov	r2, #5
   11634:	movt	r1, #1
   11638:	bl	10e14 <dcgettext@plt>
   1163c:	mvn	r1, #0
   11640:	str	r0, [sp, #12]
   11644:	mov	r0, r6
   11648:	mov	r2, #0
   1164c:	mov	r3, #-2147483648	; 0x80000000
   11650:	str	r4, [sp, #16]
   11654:	str	r1, [sp]
   11658:	mvn	r1, #-2147483648	; 0x80000000
   1165c:	str	r1, [sp, #4]
   11660:	movw	r1, #29442	; 0x7302
   11664:	movt	r1, #1
   11668:	str	r1, [sp, #8]
   1166c:	bl	14e0c <__assert_fail@plt+0x3e30>
   11670:	str	r0, [sp, #52]	; 0x34
   11674:	orr	r0, r8, #1
   11678:	mov	r6, #1
   1167c:	str	r1, [sp, #40]	; 0x28
   11680:	str	r8, [sp, #48]	; 0x30
   11684:	cmp	r0, #5
   11688:	bne	1143c <__assert_fail@plt+0x460>
   1168c:	ldr	r0, [sp, #52]	; 0x34
   11690:	ldr	r1, [sp, #40]	; 0x28
   11694:	str	r8, [sp, #48]	; 0x30
   11698:	orrs	r0, r0, r1
   1169c:	bne	1143c <__assert_fail@plt+0x460>
   116a0:	movw	r1, #29471	; 0x731f
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	movt	r1, #1
   116b0:	bl	10e14 <dcgettext@plt>
   116b4:	mov	r2, r0
   116b8:	mov	r0, #1
   116bc:	mov	r1, #0
   116c0:	bl	10e8c <error@plt>
   116c4:	cmn	r0, #1
   116c8:	bne	11e5c <__assert_fail@plt+0xe80>
   116cc:	ldr	r1, [r8, #4]
   116d0:	cmp	r1, #0
   116d4:	mov	r0, r1
   116d8:	movwne	r0, #1
   116dc:	orr	r0, r6, r0
   116e0:	tst	r0, #1
   116e4:	beq	11ed0 <__assert_fail@plt+0xef4>
   116e8:	movw	r0, #33072	; 0x8130
   116ec:	cmp	r1, #0
   116f0:	movt	r0, #2
   116f4:	ldr	r7, [r0]
   116f8:	beq	11710 <__assert_fail@plt+0x734>
   116fc:	ldr	r0, [sp, #48]	; 0x30
   11700:	cmp	r0, #0
   11704:	eoreq	r0, r6, #1
   11708:	tsteq	r0, #1
   1170c:	beq	11f40 <__assert_fail@plt+0xf64>
   11710:	ldrb	r0, [r8, #1]
   11714:	mvn	r0, r0
   11718:	orr	r0, r6, r0
   1171c:	tst	r0, #1
   11720:	beq	11edc <__assert_fail@plt+0xf00>
   11724:	cmp	r7, r5
   11728:	bge	11f14 <__assert_fail@plt+0xf38>
   1172c:	cmp	r1, #0
   11730:	beq	11774 <__assert_fail@plt+0x798>
   11734:	add	r2, sp, #64	; 0x40
   11738:	mov	r0, #3
   1173c:	bl	10fac <__xstat64@plt>
   11740:	cmp	r0, #0
   11744:	bne	11f9c <__assert_fail@plt+0xfc0>
   11748:	ldr	r0, [sp, #80]	; 0x50
   1174c:	and	r0, r0, #53248	; 0xd000
   11750:	orr	r0, r0, #8192	; 0x2000
   11754:	cmp	r0, #40960	; 0xa000
   11758:	bne	11788 <__assert_fail@plt+0x7ac>
   1175c:	ldr	r0, [sp, #116]	; 0x74
   11760:	cmn	r0, #1
   11764:	ble	11fc0 <__assert_fail@plt+0xfe4>
   11768:	ldr	r4, [sp, #112]	; 0x70
   1176c:	mov	r2, r0
   11770:	b	117f8 <__assert_fail@plt+0x81c>
   11774:	ldr	r6, [sp, #40]	; 0x28
   11778:	mvn	r0, #0
   1177c:	mvn	r4, #0
   11780:	str	r0, [sp, #32]
   11784:	b	11820 <__assert_fail@plt+0x844>
   11788:	ldr	r0, [r8, #4]
   1178c:	mov	r1, #0
   11790:	bl	10e98 <open64@plt>
   11794:	cmp	r0, #0
   11798:	blt	11fc0 <__assert_fail@plt+0xfe4>
   1179c:	mov	r4, r0
   117a0:	mov	r0, #2
   117a4:	mov	r2, #0
   117a8:	mov	r3, #0
   117ac:	str	r0, [sp]
   117b0:	mov	r0, r4
   117b4:	bl	10e5c <lseek64@plt>
   117b8:	mov	r8, r0
   117bc:	mov	r5, r1
   117c0:	bl	10f10 <__errno_location@plt>
   117c4:	mov	r9, r0
   117c8:	ldr	r0, [r0]
   117cc:	str	r0, [sp, #60]	; 0x3c
   117d0:	mov	r0, r4
   117d4:	mov	r4, r8
   117d8:	bl	10fd0 <close@plt>
   117dc:	mvn	r1, #0
   117e0:	subs	r0, r1, r8
   117e4:	sbcs	r0, r1, r5
   117e8:	bge	11fb0 <__assert_fail@plt+0xfd4>
   117ec:	movw	r8, #33096	; 0x8148
   117f0:	mov	r2, r5
   117f4:	movt	r8, #2
   117f8:	ands	r0, r6, #1
   117fc:	ldr	r6, [sp, #40]	; 0x28
   11800:	ldr	r0, [sp, #52]	; 0x34
   11804:	moveq	r6, r2
   11808:	moveq	r0, r4
   1180c:	str	r0, [sp, #52]	; 0x34
   11810:	mvn	r0, #0
   11814:	moveq	r2, r0
   11818:	moveq	r4, r0
   1181c:	str	r2, [sp, #32]
   11820:	ldrb	r0, [r8]
   11824:	ldr	r9, [sl, r7, lsl #2]
   11828:	movw	r1, #2113	; 0x841
   1182c:	cmp	r0, #0
   11830:	movwne	r1, #2049	; 0x801
   11834:	cmp	r9, #0
   11838:	str	r1, [sp, #56]	; 0x38
   1183c:	beq	11e4c <__assert_fail@plt+0xe70>
   11840:	ldr	r0, [sp, #32]
   11844:	ldr	r1, [sp, #48]	; 0x30
   11848:	mov	r5, #0
   1184c:	str	r4, [sp, #28]
   11850:	str	r6, [sp, #40]	; 0x28
   11854:	cmp	r0, #0
   11858:	mov	r0, #0
   1185c:	movwlt	r0, #1
   11860:	cmp	r1, #0
   11864:	movwne	r1, #1
   11868:	and	r0, r1, r0
   1186c:	str	r0, [sp, #36]	; 0x24
   11870:	add	r0, sl, r7, lsl #2
   11874:	add	sl, r0, #4
   11878:	add	r0, sp, #64	; 0x40
   1187c:	add	r0, r0, #48	; 0x30
   11880:	str	r0, [sp, #24]
   11884:	b	11d44 <__assert_fail@plt+0xd68>
   11888:	ldrb	r0, [r8, #1]
   1188c:	ldr	r4, [sp, #52]	; 0x34
   11890:	ldr	r3, [sp, #60]	; 0x3c
   11894:	mov	r5, r6
   11898:	cmp	r0, #1
   1189c:	bne	11970 <__assert_fail@plt+0x994>
   118a0:	ldr	r0, [sp, #120]	; 0x78
   118a4:	mov	r5, #512	; 0x200
   118a8:	cmp	r0, #536870913	; 0x20000001
   118ac:	movcc	r5, r0
   118b0:	cmp	r0, #0
   118b4:	mov	r0, #512	; 0x200
   118b8:	movle	r5, r0
   118bc:	cmn	r5, #1
   118c0:	ble	118e4 <__assert_fail@plt+0x908>
   118c4:	cmp	r5, #0
   118c8:	beq	1195c <__assert_fail@plt+0x980>
   118cc:	cmn	r6, #1
   118d0:	ble	11920 <__assert_fail@plt+0x944>
   118d4:	asr	r3, r5, #31
   118d8:	mvn	r0, #0
   118dc:	mvn	r1, #-2147483648	; 0x80000000
   118e0:	b	11900 <__assert_fail@plt+0x924>
   118e4:	cmn	r6, #1
   118e8:	ble	11cd4 <__assert_fail@plt+0xcf8>
   118ec:	cmn	r5, #1
   118f0:	beq	1195c <__assert_fail@plt+0x980>
   118f4:	asr	r3, r5, #31
   118f8:	mov	r0, #0
   118fc:	mov	r1, #-2147483648	; 0x80000000
   11900:	mov	r2, r5
   11904:	bl	16c7c <__assert_fail@plt+0x5ca0>
   11908:	ldr	r2, [sp, #52]	; 0x34
   1190c:	ldr	r3, [sp, #60]	; 0x3c
   11910:	subs	r0, r0, r2
   11914:	sbcs	r0, r1, r6
   11918:	bge	1195c <__assert_fail@plt+0x980>
   1191c:	b	11cfc <__assert_fail@plt+0xd20>
   11920:	ldr	r0, [sp, #52]	; 0x34
   11924:	mvn	r1, #0
   11928:	eor	r0, r0, r1
   1192c:	eor	r1, r6, r1
   11930:	orrs	r0, r0, r1
   11934:	beq	1195c <__assert_fail@plt+0x980>
   11938:	ldr	r2, [sp, #52]	; 0x34
   1193c:	mov	r0, #0
   11940:	mov	r1, #-2147483648	; 0x80000000
   11944:	mov	r3, r6
   11948:	bl	16c7c <__assert_fail@plt+0x5ca0>
   1194c:	ldr	r3, [sp, #60]	; 0x3c
   11950:	subs	r0, r0, r5
   11954:	sbcs	r0, r1, r5, asr #31
   11958:	blt	11cfc <__assert_fail@plt+0xd20>
   1195c:	ldr	r2, [sp, #52]	; 0x34
   11960:	asr	r1, r5, #31
   11964:	umull	r4, r0, r2, r5
   11968:	mla	r0, r2, r1, r0
   1196c:	mla	r5, r6, r5, r0
   11970:	ldr	r0, [sp, #48]	; 0x30
   11974:	cmp	r0, #0
   11978:	beq	11b3c <__assert_fail@plt+0xb60>
   1197c:	ldr	r8, [sp, #28]
   11980:	ldr	r6, [sp, #32]
   11984:	mvn	r1, #0
   11988:	subs	r0, r1, r8
   1198c:	sbcs	r0, r1, r6
   11990:	blt	119bc <__assert_fail@plt+0x9e0>
   11994:	ldr	r0, [sp, #80]	; 0x50
   11998:	and	r0, r0, #53248	; 0xd000
   1199c:	orr	r0, r0, #8192	; 0x2000
   119a0:	cmp	r0, #40960	; 0xa000
   119a4:	bne	119f0 <__assert_fail@plt+0xa14>
   119a8:	ldr	r0, [sp, #24]
   119ac:	ldr	r6, [r0, #4]
   119b0:	cmn	r6, #1
   119b4:	ble	11c24 <__assert_fail@plt+0xc48>
   119b8:	ldr	r8, [r0]
   119bc:	ldr	r0, [sp, #48]	; 0x30
   119c0:	sub	r0, r0, #2
   119c4:	cmp	r0, #3
   119c8:	bhi	11a2c <__assert_fail@plt+0xa50>
   119cc:	add	r1, pc, #0
   119d0:	ldr	pc, [r1, r0, lsl #2]
   119d4:	andeq	r1, r1, r4, ror #19
   119d8:	andeq	r1, r1, r8, lsl fp
   119dc:	andeq	r1, r1, r4, lsr sl
   119e0:	andeq	r1, r1, ip, asr sl
   119e4:	subs	r0, r4, r8
   119e8:	sbcs	r0, r5, r6
   119ec:	b	11b20 <__assert_fail@plt+0xb44>
   119f0:	mov	r0, #2
   119f4:	mov	r2, #0
   119f8:	str	r0, [sp]
   119fc:	mov	r0, r3
   11a00:	mov	r3, #0
   11a04:	bl	10e5c <lseek64@plt>
   11a08:	cmn	r1, #1
   11a0c:	ble	11c5c <__assert_fail@plt+0xc80>
   11a10:	ldr	r3, [sp, #60]	; 0x3c
   11a14:	mov	r8, r0
   11a18:	mov	r6, r1
   11a1c:	ldr	r0, [sp, #48]	; 0x30
   11a20:	sub	r0, r0, #2
   11a24:	cmp	r0, #3
   11a28:	bls	119cc <__assert_fail@plt+0x9f0>
   11a2c:	mov	r0, r5
   11a30:	b	11a8c <__assert_fail@plt+0xab0>
   11a34:	mov	r7, r3
   11a38:	mov	r0, r8
   11a3c:	mov	r1, r6
   11a40:	mov	r2, r4
   11a44:	mov	r3, r5
   11a48:	bl	16c7c <__assert_fail@plt+0x5ca0>
   11a4c:	subs	r4, r8, r2
   11a50:	sbc	r5, r6, r3
   11a54:	mov	r3, r7
   11a58:	b	11b34 <__assert_fail@plt+0xb58>
   11a5c:	mov	r7, r3
   11a60:	mov	r0, r8
   11a64:	mov	r1, r6
   11a68:	mov	r2, r4
   11a6c:	mov	r3, r5
   11a70:	bl	16c7c <__assert_fail@plt+0x5ca0>
   11a74:	subs	r4, r4, r2
   11a78:	sbc	r0, r5, r3
   11a7c:	orrs	r1, r2, r3
   11a80:	mov	r3, r7
   11a84:	moveq	r4, r1
   11a88:	moveq	r0, r1
   11a8c:	cmn	r6, #1
   11a90:	mov	r1, #0
   11a94:	mov	r2, #0
   11a98:	movwgt	r1, #1
   11a9c:	adds	r4, r8, r4
   11aa0:	movw	r8, #33096	; 0x8148
   11aa4:	adc	r5, r6, r0
   11aa8:	movt	r8, #2
   11aac:	cmn	r5, #1
   11ab0:	movwgt	r2, #1
   11ab4:	subs	r2, r1, r2
   11ab8:	movwne	r2, #1
   11abc:	cmn	r0, #1
   11ac0:	mov	r0, #0
   11ac4:	movwgt	r0, #1
   11ac8:	sub	r0, r1, r0
   11acc:	clz	r0, r0
   11ad0:	lsr	r0, r0, #5
   11ad4:	and	r0, r0, r2
   11ad8:	cmp	r0, #1
   11adc:	bne	11b3c <__assert_fail@plt+0xb60>
   11ae0:	movw	r1, #30484	; 0x7714
   11ae4:	mov	r0, #0
   11ae8:	mov	r2, #5
   11aec:	movt	r1, #1
   11af0:	bl	10e14 <dcgettext@plt>
   11af4:	mov	r4, r0
   11af8:	mov	r0, #4
   11afc:	mov	r1, r9
   11b00:	bl	13b60 <__assert_fail@plt+0x2b84>
   11b04:	mov	r3, r0
   11b08:	mov	r0, #0
   11b0c:	mov	r1, #0
   11b10:	mov	r2, r4
   11b14:	b	11bb4 <__assert_fail@plt+0xbd8>
   11b18:	subs	r0, r8, r4
   11b1c:	sbcs	r0, r6, r5
   11b20:	mov	r0, #0
   11b24:	movwlt	r0, #1
   11b28:	cmp	r0, #0
   11b2c:	movne	r5, r6
   11b30:	movne	r4, r8
   11b34:	movw	r8, #33096	; 0x8148
   11b38:	movt	r8, #2
   11b3c:	rsbs	r0, r4, #0
   11b40:	mov	r6, #0
   11b44:	mov	r7, #0
   11b48:	rscs	r0, r5, #0
   11b4c:	movwlt	r6, #1
   11b50:	mov	r0, r3
   11b54:	cmp	r6, #0
   11b58:	moveq	r4, r6
   11b5c:	movne	r6, r5
   11b60:	mov	r2, r4
   11b64:	mov	r3, r6
   11b68:	bl	10dfc <ftruncate64@plt>
   11b6c:	cmp	r0, #0
   11b70:	beq	11bbc <__assert_fail@plt+0xbe0>
   11b74:	bl	10f10 <__errno_location@plt>
   11b78:	ldr	r5, [r0]
   11b7c:	movw	r1, #30519	; 0x7737
   11b80:	mov	r0, #0
   11b84:	mov	r2, #5
   11b88:	movt	r1, #1
   11b8c:	bl	10e14 <dcgettext@plt>
   11b90:	mov	r7, r0
   11b94:	mov	r0, #4
   11b98:	mov	r1, r9
   11b9c:	bl	13b60 <__assert_fail@plt+0x2b84>
   11ba0:	mov	r3, r0
   11ba4:	mov	r0, #0
   11ba8:	mov	r1, r5
   11bac:	mov	r2, r7
   11bb0:	stm	sp, {r4, r6}
   11bb4:	bl	10e8c <error@plt>
   11bb8:	mov	r7, #1
   11bbc:	ldr	r0, [sp, #60]	; 0x3c
   11bc0:	bl	10fd0 <close@plt>
   11bc4:	cmp	r0, #0
   11bc8:	beq	11cb8 <__assert_fail@plt+0xcdc>
   11bcc:	bl	10f10 <__errno_location@plt>
   11bd0:	ldr	r4, [r0]
   11bd4:	movw	r1, #29740	; 0x742c
   11bd8:	mov	r0, #0
   11bdc:	mov	r2, #5
   11be0:	movt	r1, #1
   11be4:	bl	10e14 <dcgettext@plt>
   11be8:	mov	r5, r0
   11bec:	mov	r0, #4
   11bf0:	mov	r1, r9
   11bf4:	bl	13b60 <__assert_fail@plt+0x2b84>
   11bf8:	mov	r3, r0
   11bfc:	mov	r0, #0
   11c00:	mov	r1, r4
   11c04:	mov	r2, r5
   11c08:	bl	10e8c <error@plt>
   11c0c:	mov	r5, #1
   11c10:	ldr	r6, [sp, #40]	; 0x28
   11c14:	ldr	r9, [sl], #4
   11c18:	cmp	r9, #0
   11c1c:	bne	11d44 <__assert_fail@plt+0xd68>
   11c20:	b	11e40 <__assert_fail@plt+0xe64>
   11c24:	movw	r1, #30442	; 0x76ea
   11c28:	mov	r0, #0
   11c2c:	mov	r2, #5
   11c30:	movt	r1, #1
   11c34:	bl	10e14 <dcgettext@plt>
   11c38:	mov	r4, r0
   11c3c:	mov	r0, #4
   11c40:	mov	r1, r9
   11c44:	bl	13b60 <__assert_fail@plt+0x2b84>
   11c48:	mov	r3, r0
   11c4c:	mov	r0, #0
   11c50:	mov	r1, #0
   11c54:	mov	r2, r4
   11c58:	b	11c98 <__assert_fail@plt+0xcbc>
   11c5c:	bl	10f10 <__errno_location@plt>
   11c60:	ldr	r4, [r0]
   11c64:	movw	r1, #29687	; 0x73f7
   11c68:	mov	r0, #0
   11c6c:	mov	r2, #5
   11c70:	movt	r1, #1
   11c74:	bl	10e14 <dcgettext@plt>
   11c78:	mov	r5, r0
   11c7c:	mov	r0, #4
   11c80:	mov	r1, r9
   11c84:	bl	13b60 <__assert_fail@plt+0x2b84>
   11c88:	mov	r3, r0
   11c8c:	mov	r0, #0
   11c90:	mov	r1, r4
   11c94:	mov	r2, r5
   11c98:	bl	10e8c <error@plt>
   11c9c:	movw	r8, #33096	; 0x8148
   11ca0:	mov	r7, #1
   11ca4:	movt	r8, #2
   11ca8:	ldr	r0, [sp, #60]	; 0x3c
   11cac:	bl	10fd0 <close@plt>
   11cb0:	cmp	r0, #0
   11cb4:	bne	11bcc <__assert_fail@plt+0xbf0>
   11cb8:	ldr	r5, [sp, #44]	; 0x2c
   11cbc:	orr	r5, r5, r7
   11cc0:	ldr	r6, [sp, #40]	; 0x28
   11cc4:	ldr	r9, [sl], #4
   11cc8:	cmp	r9, #0
   11ccc:	bne	11d44 <__assert_fail@plt+0xd68>
   11cd0:	b	11e40 <__assert_fail@plt+0xe64>
   11cd4:	asr	r3, r5, #31
   11cd8:	mvn	r0, #0
   11cdc:	mvn	r1, #-2147483648	; 0x80000000
   11ce0:	mov	r2, r5
   11ce4:	bl	16c7c <__assert_fail@plt+0x5ca0>
   11ce8:	ldr	r2, [sp, #52]	; 0x34
   11cec:	ldr	r3, [sp, #60]	; 0x3c
   11cf0:	subs	r0, r2, r0
   11cf4:	sbcs	r0, r6, r1
   11cf8:	bge	1195c <__assert_fail@plt+0x980>
   11cfc:	movw	r1, #30396	; 0x76bc
   11d00:	mov	r0, #0
   11d04:	mov	r2, #5
   11d08:	movt	r1, #1
   11d0c:	bl	10e14 <dcgettext@plt>
   11d10:	mov	r4, r0
   11d14:	mov	r0, #4
   11d18:	mov	r1, r9
   11d1c:	bl	13b60 <__assert_fail@plt+0x2b84>
   11d20:	ldr	r1, [sp, #52]	; 0x34
   11d24:	mov	r2, r4
   11d28:	stm	sp, {r1, r6}
   11d2c:	str	r0, [sp, #12]
   11d30:	mov	r0, #0
   11d34:	mov	r1, #0
   11d38:	str	r5, [sp, #8]
   11d3c:	bl	10e8c <error@plt>
   11d40:	b	11bb8 <__assert_fail@plt+0xbdc>
   11d44:	ldr	r1, [sp, #56]	; 0x38
   11d48:	mov	r0, r9
   11d4c:	movw	r2, #438	; 0x1b6
   11d50:	bl	10e98 <open64@plt>
   11d54:	cmn	r0, #1
   11d58:	ble	11ddc <__assert_fail@plt+0xe00>
   11d5c:	mov	r3, r0
   11d60:	ldrb	r0, [r8, #1]
   11d64:	ldr	r1, [sp, #36]	; 0x24
   11d68:	ldr	r4, [sp, #52]	; 0x34
   11d6c:	str	r5, [sp, #44]	; 0x2c
   11d70:	mov	r5, r6
   11d74:	str	r3, [sp, #60]	; 0x3c
   11d78:	orr	r0, r0, r1
   11d7c:	tst	r0, #1
   11d80:	beq	11970 <__assert_fail@plt+0x994>
   11d84:	mov	r0, #3
   11d88:	mov	r1, r3
   11d8c:	add	r2, sp, #64	; 0x40
   11d90:	bl	10e44 <__fxstat64@plt>
   11d94:	cmp	r0, #0
   11d98:	beq	11888 <__assert_fail@plt+0x8ac>
   11d9c:	bl	10f10 <__errno_location@plt>
   11da0:	ldr	r4, [r0]
   11da4:	movw	r1, #30380	; 0x76ac
   11da8:	mov	r0, #0
   11dac:	mov	r2, #5
   11db0:	movt	r1, #1
   11db4:	bl	10e14 <dcgettext@plt>
   11db8:	mov	r5, r0
   11dbc:	mov	r0, #4
   11dc0:	mov	r1, r9
   11dc4:	bl	13b60 <__assert_fail@plt+0x2b84>
   11dc8:	mov	r3, r0
   11dcc:	mov	r0, #0
   11dd0:	mov	r1, r4
   11dd4:	mov	r2, r5
   11dd8:	b	11bb4 <__assert_fail@plt+0xbd8>
   11ddc:	ldrb	r4, [r8]
   11de0:	bl	10f10 <__errno_location@plt>
   11de4:	cmp	r4, #1
   11de8:	ldreq	r1, [r0]
   11dec:	cmpeq	r1, #2
   11df0:	beq	11e34 <__assert_fail@plt+0xe58>
   11df4:	ldr	r4, [r0]
   11df8:	movw	r1, #29713	; 0x7411
   11dfc:	mov	r0, #0
   11e00:	mov	r2, #5
   11e04:	movt	r1, #1
   11e08:	bl	10e14 <dcgettext@plt>
   11e0c:	mov	r5, r0
   11e10:	mov	r0, #4
   11e14:	mov	r1, r9
   11e18:	bl	13b60 <__assert_fail@plt+0x2b84>
   11e1c:	mov	r3, r0
   11e20:	mov	r0, #0
   11e24:	mov	r1, r4
   11e28:	mov	r2, r5
   11e2c:	bl	10e8c <error@plt>
   11e30:	mov	r5, #1
   11e34:	ldr	r9, [sl], #4
   11e38:	cmp	r9, #0
   11e3c:	bne	11d44 <__assert_fail@plt+0xd68>
   11e40:	and	r0, r5, #1
   11e44:	sub	sp, fp, #28
   11e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e4c:	mov	r5, #0
   11e50:	and	r0, r5, #1
   11e54:	sub	sp, fp, #28
   11e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e5c:	cmn	r0, #3
   11e60:	bne	11eac <__assert_fail@plt+0xed0>
   11e64:	movw	r0, #32992	; 0x80e0
   11e68:	movw	r2, #29502	; 0x733e
   11e6c:	mov	r1, #0
   11e70:	movt	r0, #2
   11e74:	movt	r2, #1
   11e78:	str	r1, [sp, #4]
   11e7c:	movw	r1, #29364	; 0x72b4
   11e80:	ldr	r3, [r0]
   11e84:	movw	r0, #33084	; 0x813c
   11e88:	str	r2, [sp]
   11e8c:	movw	r2, #29488	; 0x7330
   11e90:	movt	r1, #1
   11e94:	movt	r0, #2
   11e98:	movt	r2, #1
   11e9c:	ldr	r0, [r0]
   11ea0:	bl	1452c <__assert_fail@plt+0x3550>
   11ea4:	mov	r0, #0
   11ea8:	bl	10eec <exit@plt>
   11eac:	cmn	r0, #2
   11eb0:	bne	11ebc <__assert_fail@plt+0xee0>
   11eb4:	mov	r0, #0
   11eb8:	bl	110d8 <__assert_fail@plt+0xfc>
   11ebc:	mov	r0, #1
   11ec0:	bl	110d8 <__assert_fail@plt+0xfc>
   11ec4:	movw	r1, #29404	; 0x72dc
   11ec8:	movt	r1, #1
   11ecc:	b	11f1c <__assert_fail@plt+0xf40>
   11ed0:	movw	r1, #29516	; 0x734c
   11ed4:	movt	r1, #1
   11ed8:	b	11f48 <__assert_fail@plt+0xf6c>
   11edc:	movw	r1, #29607	; 0x73a7
   11ee0:	mov	r0, #0
   11ee4:	mov	r2, #5
   11ee8:	movt	r1, #1
   11eec:	bl	10e14 <dcgettext@plt>
   11ef0:	movw	r1, #29639	; 0x73c7
   11ef4:	mov	r4, r0
   11ef8:	mov	r0, #0
   11efc:	movt	r1, #1
   11f00:	bl	14078 <__assert_fail@plt+0x309c>
   11f04:	movw	r1, #29549	; 0x736d
   11f08:	mov	r5, r0
   11f0c:	movt	r1, #1
   11f10:	b	11f74 <__assert_fail@plt+0xf98>
   11f14:	movw	r1, #29651	; 0x73d3
   11f18:	movt	r1, #1
   11f1c:	mov	r0, #0
   11f20:	mov	r2, #5
   11f24:	bl	10e14 <dcgettext@plt>
   11f28:	mov	r2, r0
   11f2c:	mov	r0, #0
   11f30:	mov	r1, #0
   11f34:	bl	10e8c <error@plt>
   11f38:	mov	r0, #1
   11f3c:	bl	110d8 <__assert_fail@plt+0xfc>
   11f40:	movw	r1, #29568	; 0x7380
   11f44:	movt	r1, #1
   11f48:	mov	r0, #0
   11f4c:	mov	r2, #5
   11f50:	bl	10e14 <dcgettext@plt>
   11f54:	movw	r1, #29549	; 0x736d
   11f58:	mov	r4, r0
   11f5c:	mov	r0, #0
   11f60:	movt	r1, #1
   11f64:	bl	14078 <__assert_fail@plt+0x309c>
   11f68:	movw	r1, #29556	; 0x7374
   11f6c:	mov	r5, r0
   11f70:	movt	r1, #1
   11f74:	mov	r0, #1
   11f78:	bl	14078 <__assert_fail@plt+0x309c>
   11f7c:	str	r0, [sp]
   11f80:	mov	r0, #0
   11f84:	mov	r1, #0
   11f88:	mov	r2, r4
   11f8c:	mov	r3, r5
   11f90:	bl	10e8c <error@plt>
   11f94:	mov	r0, #1
   11f98:	bl	110d8 <__assert_fail@plt+0xfc>
   11f9c:	bl	10f10 <__errno_location@plt>
   11fa0:	ldr	r4, [r0]
   11fa4:	movw	r1, #29672	; 0x73e8
   11fa8:	movt	r1, #1
   11fac:	b	11fd0 <__assert_fail@plt+0xff4>
   11fb0:	ldr	r0, [sp, #60]	; 0x3c
   11fb4:	movw	r8, #33096	; 0x8148
   11fb8:	movt	r8, #2
   11fbc:	str	r0, [r9]
   11fc0:	bl	10f10 <__errno_location@plt>
   11fc4:	ldr	r4, [r0]
   11fc8:	movw	r1, #29687	; 0x73f7
   11fcc:	movt	r1, #1
   11fd0:	mov	r0, #0
   11fd4:	mov	r2, #5
   11fd8:	bl	10e14 <dcgettext@plt>
   11fdc:	ldr	r1, [r8, #4]
   11fe0:	mov	r5, r0
   11fe4:	mov	r0, #4
   11fe8:	bl	13b60 <__assert_fail@plt+0x2b84>
   11fec:	mov	r3, r0
   11ff0:	mov	r0, #1
   11ff4:	mov	r1, r4
   11ff8:	mov	r2, r5
   11ffc:	bl	10e8c <error@plt>
   12000:	movw	r1, #33104	; 0x8150
   12004:	movt	r1, #2
   12008:	str	r0, [r1, #4]
   1200c:	bx	lr
   12010:	movw	r1, #33104	; 0x8150
   12014:	movt	r1, #2
   12018:	strb	r0, [r1]
   1201c:	bx	lr
   12020:	push	{r4, r5, r6, sl, fp, lr}
   12024:	add	fp, sp, #16
   12028:	sub	sp, sp, #8
   1202c:	movw	r0, #33084	; 0x813c
   12030:	movt	r0, #2
   12034:	ldr	r0, [r0]
   12038:	bl	1684c <__assert_fail@plt+0x5870>
   1203c:	cmp	r0, #0
   12040:	beq	12068 <__assert_fail@plt+0x108c>
   12044:	movw	r5, #33104	; 0x8150
   12048:	movt	r5, #2
   1204c:	ldrb	r0, [r5]
   12050:	cmp	r0, #0
   12054:	beq	12094 <__assert_fail@plt+0x10b8>
   12058:	bl	10f10 <__errno_location@plt>
   1205c:	ldr	r0, [r0]
   12060:	cmp	r0, #32
   12064:	bne	12094 <__assert_fail@plt+0x10b8>
   12068:	movw	r0, #33080	; 0x8138
   1206c:	movt	r0, #2
   12070:	ldr	r0, [r0]
   12074:	bl	1684c <__assert_fail@plt+0x5870>
   12078:	cmp	r0, #0
   1207c:	subeq	sp, fp, #16
   12080:	popeq	{r4, r5, r6, sl, fp, pc}
   12084:	movw	r0, #32996	; 0x80e4
   12088:	movt	r0, #2
   1208c:	ldr	r0, [r0]
   12090:	bl	10dd8 <_exit@plt>
   12094:	movw	r1, #30743	; 0x7817
   12098:	mov	r0, #0
   1209c:	mov	r2, #5
   120a0:	movt	r1, #1
   120a4:	bl	10e14 <dcgettext@plt>
   120a8:	ldr	r6, [r5, #4]
   120ac:	mov	r4, r0
   120b0:	bl	10f10 <__errno_location@plt>
   120b4:	ldr	r5, [r0]
   120b8:	cmp	r6, #0
   120bc:	bne	120d8 <__assert_fail@plt+0x10fc>
   120c0:	movw	r2, #30759	; 0x7827
   120c4:	mov	r0, #0
   120c8:	mov	r1, r5
   120cc:	mov	r3, r4
   120d0:	movt	r2, #1
   120d4:	b	120f8 <__assert_fail@plt+0x111c>
   120d8:	mov	r0, r6
   120dc:	bl	13d00 <__assert_fail@plt+0x2d24>
   120e0:	movw	r2, #30755	; 0x7823
   120e4:	mov	r3, r0
   120e8:	str	r4, [sp]
   120ec:	mov	r0, #0
   120f0:	mov	r1, r5
   120f4:	movt	r2, #1
   120f8:	bl	10e8c <error@plt>
   120fc:	movw	r0, #32996	; 0x80e4
   12100:	movt	r0, #2
   12104:	ldr	r0, [r0]
   12108:	bl	10dd8 <_exit@plt>
   1210c:	push	{r4, r5, fp, lr}
   12110:	add	fp, sp, #8
   12114:	cmp	r0, #0
   12118:	beq	121ac <__assert_fail@plt+0x11d0>
   1211c:	mov	r1, #47	; 0x2f
   12120:	mov	r4, r0
   12124:	bl	10f7c <strrchr@plt>
   12128:	cmp	r0, #0
   1212c:	mov	r5, r4
   12130:	addne	r5, r0, #1
   12134:	sub	r0, r5, r4
   12138:	cmp	r0, #7
   1213c:	blt	12190 <__assert_fail@plt+0x11b4>
   12140:	movw	r1, #30818	; 0x7862
   12144:	sub	r0, r5, #7
   12148:	mov	r2, #7
   1214c:	movt	r1, #1
   12150:	bl	10fb8 <strncmp@plt>
   12154:	cmp	r0, #0
   12158:	bne	12190 <__assert_fail@plt+0x11b4>
   1215c:	movw	r1, #30826	; 0x786a
   12160:	mov	r0, r5
   12164:	mov	r2, #3
   12168:	movt	r1, #1
   1216c:	bl	10fb8 <strncmp@plt>
   12170:	cmp	r0, #0
   12174:	beq	12180 <__assert_fail@plt+0x11a4>
   12178:	mov	r4, r5
   1217c:	b	12190 <__assert_fail@plt+0x11b4>
   12180:	movw	r0, #33064	; 0x8128
   12184:	add	r4, r5, #3
   12188:	movt	r0, #2
   1218c:	str	r4, [r0]
   12190:	movw	r0, #33068	; 0x812c
   12194:	movt	r0, #2
   12198:	str	r4, [r0]
   1219c:	movw	r0, #33112	; 0x8158
   121a0:	movt	r0, #2
   121a4:	str	r4, [r0]
   121a8:	pop	{r4, r5, fp, pc}
   121ac:	movw	r0, #33080	; 0x8138
   121b0:	mov	r1, #55	; 0x37
   121b4:	mov	r2, #1
   121b8:	movt	r0, #2
   121bc:	ldr	r3, [r0]
   121c0:	movw	r0, #30762	; 0x782a
   121c4:	movt	r0, #1
   121c8:	bl	10e50 <fwrite@plt>
   121cc:	bl	10fc4 <abort@plt>
   121d0:	push	{r4, r5, r6, sl, fp, lr}
   121d4:	add	fp, sp, #16
   121d8:	mov	r4, r0
   121dc:	movw	r0, #33120	; 0x8160
   121e0:	movt	r0, #2
   121e4:	cmp	r4, #0
   121e8:	moveq	r4, r0
   121ec:	bl	10f10 <__errno_location@plt>
   121f0:	ldr	r6, [r0]
   121f4:	mov	r5, r0
   121f8:	mov	r0, r4
   121fc:	mov	r1, #48	; 0x30
   12200:	bl	14bc0 <__assert_fail@plt+0x3be4>
   12204:	str	r6, [r5]
   12208:	pop	{r4, r5, r6, sl, fp, pc}
   1220c:	movw	r1, #33120	; 0x8160
   12210:	cmp	r0, #0
   12214:	movt	r1, #2
   12218:	movne	r1, r0
   1221c:	ldr	r0, [r1]
   12220:	bx	lr
   12224:	movw	r2, #33120	; 0x8160
   12228:	cmp	r0, #0
   1222c:	movt	r2, #2
   12230:	movne	r2, r0
   12234:	str	r1, [r2]
   12238:	bx	lr
   1223c:	movw	r3, #33120	; 0x8160
   12240:	cmp	r0, #0
   12244:	movt	r3, #2
   12248:	movne	r3, r0
   1224c:	ubfx	r0, r1, #5, #3
   12250:	and	r1, r1, #31
   12254:	add	r0, r3, r0, lsl #2
   12258:	ldr	r3, [r0, #8]
   1225c:	eor	r2, r2, r3, lsr r1
   12260:	and	r2, r2, #1
   12264:	eor	r2, r3, r2, lsl r1
   12268:	str	r2, [r0, #8]
   1226c:	mov	r0, #1
   12270:	and	r0, r0, r3, lsr r1
   12274:	bx	lr
   12278:	movw	r2, #33120	; 0x8160
   1227c:	cmp	r0, #0
   12280:	movt	r2, #2
   12284:	movne	r2, r0
   12288:	ldr	r0, [r2, #4]
   1228c:	str	r1, [r2, #4]
   12290:	bx	lr
   12294:	movw	r3, #33120	; 0x8160
   12298:	cmp	r0, #0
   1229c:	movt	r3, #2
   122a0:	movne	r3, r0
   122a4:	cmp	r1, #0
   122a8:	mov	r0, #10
   122ac:	cmpne	r2, #0
   122b0:	str	r0, [r3]
   122b4:	bne	122c4 <__assert_fail@plt+0x12e8>
   122b8:	push	{fp, lr}
   122bc:	mov	fp, sp
   122c0:	bl	10fc4 <abort@plt>
   122c4:	str	r1, [r3, #40]	; 0x28
   122c8:	str	r2, [r3, #44]	; 0x2c
   122cc:	bx	lr
   122d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122d4:	add	fp, sp, #28
   122d8:	sub	sp, sp, #20
   122dc:	mov	r7, r0
   122e0:	ldr	r0, [fp, #8]
   122e4:	movw	r5, #33120	; 0x8160
   122e8:	mov	r8, r3
   122ec:	mov	r9, r2
   122f0:	mov	sl, r1
   122f4:	movt	r5, #2
   122f8:	cmp	r0, #0
   122fc:	movne	r5, r0
   12300:	bl	10f10 <__errno_location@plt>
   12304:	mov	r4, r0
   12308:	ldm	r5, {r0, r1}
   1230c:	ldr	r2, [r5, #40]	; 0x28
   12310:	ldr	r3, [r5, #44]	; 0x2c
   12314:	add	r5, r5, #8
   12318:	ldr	r6, [r4]
   1231c:	stm	sp, {r0, r1, r5}
   12320:	str	r2, [sp, #12]
   12324:	str	r3, [sp, #16]
   12328:	mov	r0, r7
   1232c:	mov	r1, sl
   12330:	mov	r2, r9
   12334:	mov	r3, r8
   12338:	bl	12348 <__assert_fail@plt+0x136c>
   1233c:	str	r6, [r4]
   12340:	sub	sp, fp, #28
   12344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1234c:	add	fp, sp, #28
   12350:	sub	sp, sp, #156	; 0x9c
   12354:	str	r0, [sp, #76]	; 0x4c
   12358:	ldr	r0, [fp, #12]
   1235c:	mov	r6, r1
   12360:	str	r3, [sp, #84]	; 0x54
   12364:	str	r2, [fp, #-84]	; 0xffffffac
   12368:	and	r1, r0, #4
   1236c:	str	r1, [sp, #24]
   12370:	and	r1, r0, #1
   12374:	str	r1, [sp, #28]
   12378:	ubfx	r8, r0, #1, #1
   1237c:	bl	10e68 <__ctype_get_mb_cur_max@plt>
   12380:	str	r0, [sp, #32]
   12384:	ldr	r0, [fp, #24]
   12388:	ldr	r7, [fp, #8]
   1238c:	mov	r1, #0
   12390:	mov	r2, #0
   12394:	mov	r4, #1
   12398:	str	r1, [sp, #52]	; 0x34
   1239c:	str	r0, [sp, #72]	; 0x48
   123a0:	ldr	r0, [fp, #20]
   123a4:	str	r0, [sp, #68]	; 0x44
   123a8:	mov	r0, #0
   123ac:	str	r0, [sp, #48]	; 0x30
   123b0:	mov	r0, #0
   123b4:	str	r0, [sp, #92]	; 0x5c
   123b8:	mov	r0, #0
   123bc:	str	r0, [fp, #-76]	; 0xffffffb4
   123c0:	mov	r0, #0
   123c4:	cmp	r7, #10
   123c8:	bhi	136b0 <__assert_fail@plt+0x26d4>
   123cc:	add	r1, pc, #28
   123d0:	mov	sl, r6
   123d4:	ldr	r6, [sp, #76]	; 0x4c
   123d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   123dc:	ldr	lr, [sp, #84]	; 0x54
   123e0:	mov	r9, #0
   123e4:	mov	r3, #1
   123e8:	mov	r5, #0
   123ec:	ldr	pc, [r1, r7, lsl #2]
   123f0:	andeq	r2, r1, r0, asr #9
   123f4:	strdeq	r2, [r1], -ip
   123f8:	ldrdeq	r2, [r1], -r0
   123fc:			; <UNDEFINED> instruction: 0x000124b8
   12400:	strdeq	r2, [r1], -r0
   12404:	andeq	r2, r1, r4, lsr #10
   12408:	andeq	r2, r1, r0, ror #9
   1240c:	andeq	r2, r1, r0, lsr r7
   12410:	andeq	r2, r1, ip, lsl r4
   12414:	andeq	r2, r1, ip, lsl r4
   12418:	andeq	r2, r1, r4, asr #13
   1241c:	mov	r9, r4
   12420:	movw	r4, #30908	; 0x78bc
   12424:	mov	r5, r8
   12428:	mov	r8, r2
   1242c:	mov	r0, #0
   12430:	mov	r2, #5
   12434:	movt	r4, #1
   12438:	mov	r1, r4
   1243c:	bl	10e14 <dcgettext@plt>
   12440:	cmp	r0, r4
   12444:	str	r0, [sp, #68]	; 0x44
   12448:	bne	125d8 <__assert_fail@plt+0x15fc>
   1244c:	bl	16aa0 <__assert_fail@plt+0x5ac4>
   12450:	ldrb	r1, [r0]
   12454:	and	r1, r1, #223	; 0xdf
   12458:	cmp	r1, #71	; 0x47
   1245c:	beq	125a4 <__assert_fail@plt+0x15c8>
   12460:	cmp	r1, #85	; 0x55
   12464:	bne	125bc <__assert_fail@plt+0x15e0>
   12468:	ldrb	r1, [r0, #1]
   1246c:	and	r1, r1, #223	; 0xdf
   12470:	cmp	r1, #84	; 0x54
   12474:	bne	125bc <__assert_fail@plt+0x15e0>
   12478:	ldrb	r1, [r0, #2]
   1247c:	and	r1, r1, #223	; 0xdf
   12480:	cmp	r1, #70	; 0x46
   12484:	bne	125bc <__assert_fail@plt+0x15e0>
   12488:	ldrb	r1, [r0, #3]
   1248c:	cmp	r1, #45	; 0x2d
   12490:	ldrbeq	r1, [r0, #4]
   12494:	cmpeq	r1, #56	; 0x38
   12498:	bne	125bc <__assert_fail@plt+0x15e0>
   1249c:	ldrb	r0, [r0, #5]
   124a0:	cmp	r0, #0
   124a4:	movw	r0, #30912	; 0x78c0
   124a8:	movt	r0, #1
   124ac:	str	r0, [sp, #68]	; 0x44
   124b0:	bne	125bc <__assert_fail@plt+0x15e0>
   124b4:	b	125d8 <__assert_fail@plt+0x15fc>
   124b8:	mov	r0, #1
   124bc:	b	124fc <__assert_fail@plt+0x1520>
   124c0:	mov	r7, #0
   124c4:	mov	r9, #0
   124c8:	mov	r3, r0
   124cc:	b	1259c <__assert_fail@plt+0x15c0>
   124d0:	tst	r8, #1
   124d4:	bne	124fc <__assert_fail@plt+0x1520>
   124d8:	mov	r3, r0
   124dc:	b	12554 <__assert_fail@plt+0x1578>
   124e0:	mov	r0, #1
   124e4:	mov	r9, #0
   124e8:	mov	r7, #5
   124ec:	b	12538 <__assert_fail@plt+0x155c>
   124f0:	mov	r3, #1
   124f4:	tst	r8, #1
   124f8:	beq	12554 <__assert_fail@plt+0x1578>
   124fc:	mov	r1, #1
   12500:	mov	r9, #0
   12504:	mov	r7, #2
   12508:	mov	r3, r0
   1250c:	mov	r5, #1
   12510:	str	r1, [fp, #-76]	; 0xffffffb4
   12514:	movw	r1, #30910	; 0x78be
   12518:	movt	r1, #1
   1251c:	str	r1, [sp, #92]	; 0x5c
   12520:	b	12730 <__assert_fail@plt+0x1754>
   12524:	mov	r7, #5
   12528:	tst	r8, #1
   1252c:	beq	12574 <__assert_fail@plt+0x1598>
   12530:	mov	r0, #1
   12534:	mov	r9, #0
   12538:	str	r0, [fp, #-76]	; 0xffffffb4
   1253c:	movw	r0, #30906	; 0x78ba
   12540:	mov	r3, #1
   12544:	mov	r5, #1
   12548:	movt	r0, #1
   1254c:	str	r0, [sp, #92]	; 0x5c
   12550:	b	12730 <__assert_fail@plt+0x1754>
   12554:	cmp	sl, #0
   12558:	mov	r9, #1
   1255c:	mov	r7, #2
   12560:	movne	r0, #39	; 0x27
   12564:	strbne	r0, [r6]
   12568:	movw	r0, #30910	; 0x78be
   1256c:	movt	r0, #1
   12570:	b	12590 <__assert_fail@plt+0x15b4>
   12574:	cmp	sl, #0
   12578:	mov	r9, #1
   1257c:	mov	r3, #1
   12580:	movne	r0, #34	; 0x22
   12584:	strbne	r0, [r6]
   12588:	movw	r0, #30906	; 0x78ba
   1258c:	movt	r0, #1
   12590:	str	r0, [sp, #92]	; 0x5c
   12594:	mov	r0, #1
   12598:	str	r0, [fp, #-76]	; 0xffffffb4
   1259c:	mov	r5, #0
   125a0:	b	12730 <__assert_fail@plt+0x1754>
   125a4:	ldrb	r1, [r0, #1]
   125a8:	and	r1, r1, #223	; 0xdf
   125ac:	cmp	r1, #66	; 0x42
   125b0:	ldrbeq	r1, [r0, #2]
   125b4:	cmpeq	r1, #49	; 0x31
   125b8:	beq	134d8 <__assert_fail@plt+0x24fc>
   125bc:	movw	r0, #30910	; 0x78be
   125c0:	movw	r1, #30906	; 0x78ba
   125c4:	cmp	r7, #9
   125c8:	movt	r0, #1
   125cc:	movt	r1, #1
   125d0:	moveq	r0, r1
   125d4:	str	r0, [sp, #68]	; 0x44
   125d8:	movw	r4, #30910	; 0x78be
   125dc:	mov	r0, #0
   125e0:	mov	r2, #5
   125e4:	movt	r4, #1
   125e8:	mov	r1, r4
   125ec:	bl	10e14 <dcgettext@plt>
   125f0:	cmp	r0, r4
   125f4:	str	r0, [sp, #72]	; 0x48
   125f8:	beq	12608 <__assert_fail@plt+0x162c>
   125fc:	mov	r4, r9
   12600:	mov	r2, r8
   12604:	b	126c0 <__assert_fail@plt+0x16e4>
   12608:	bl	16aa0 <__assert_fail@plt+0x5ac4>
   1260c:	ldrb	r1, [r0]
   12610:	mov	r4, r9
   12614:	and	r1, r1, #223	; 0xdf
   12618:	cmp	r1, #71	; 0x47
   1261c:	beq	12678 <__assert_fail@plt+0x169c>
   12620:	cmp	r1, #85	; 0x55
   12624:	mov	r2, r8
   12628:	bne	126a0 <__assert_fail@plt+0x16c4>
   1262c:	ldrb	r1, [r0, #1]
   12630:	and	r1, r1, #223	; 0xdf
   12634:	cmp	r1, #84	; 0x54
   12638:	bne	126a0 <__assert_fail@plt+0x16c4>
   1263c:	ldrb	r1, [r0, #2]
   12640:	and	r1, r1, #223	; 0xdf
   12644:	cmp	r1, #70	; 0x46
   12648:	ldrbeq	r1, [r0, #3]
   1264c:	cmpeq	r1, #45	; 0x2d
   12650:	bne	126a0 <__assert_fail@plt+0x16c4>
   12654:	ldrb	r1, [r0, #4]
   12658:	cmp	r1, #56	; 0x38
   1265c:	ldrbeq	r0, [r0, #5]
   12660:	cmpeq	r0, #0
   12664:	bne	126a0 <__assert_fail@plt+0x16c4>
   12668:	movw	r0, #30916	; 0x78c4
   1266c:	movt	r0, #1
   12670:	str	r0, [sp, #72]	; 0x48
   12674:	b	126c0 <__assert_fail@plt+0x16e4>
   12678:	ldrb	r1, [r0, #1]
   1267c:	mov	r2, r8
   12680:	and	r1, r1, #223	; 0xdf
   12684:	cmp	r1, #66	; 0x42
   12688:	bne	126a0 <__assert_fail@plt+0x16c4>
   1268c:	ldrb	r1, [r0, #2]
   12690:	cmp	r1, #49	; 0x31
   12694:	ldrbeq	r1, [r0, #3]
   12698:	cmpeq	r1, #56	; 0x38
   1269c:	beq	1351c <__assert_fail@plt+0x2540>
   126a0:	movw	r0, #30910	; 0x78be
   126a4:	cmp	r7, #9
   126a8:	movt	r0, #1
   126ac:	mov	r1, r0
   126b0:	movw	r0, #30906	; 0x78ba
   126b4:	movt	r0, #1
   126b8:	moveq	r1, r0
   126bc:	str	r1, [sp, #72]	; 0x48
   126c0:	mov	r8, r5
   126c4:	mov	r9, #0
   126c8:	tst	r8, #1
   126cc:	mov	r5, r8
   126d0:	str	r2, [fp, #-48]	; 0xffffffd0
   126d4:	bne	1270c <__assert_fail@plt+0x1730>
   126d8:	ldr	r0, [sp, #68]	; 0x44
   126dc:	ldrb	r0, [r0]
   126e0:	cmp	r0, #0
   126e4:	beq	1270c <__assert_fail@plt+0x1730>
   126e8:	ldr	r1, [sp, #68]	; 0x44
   126ec:	mov	r9, #0
   126f0:	add	r1, r1, #1
   126f4:	cmp	r9, sl
   126f8:	strbcc	r0, [r6, r9]
   126fc:	ldrb	r0, [r1, r9]
   12700:	add	r9, r9, #1
   12704:	cmp	r0, #0
   12708:	bne	126f4 <__assert_fail@plt+0x1718>
   1270c:	ldr	r8, [sp, #72]	; 0x48
   12710:	mov	r0, r8
   12714:	bl	10ef8 <strlen@plt>
   12718:	ldr	ip, [fp, #-84]	; 0xffffffac
   1271c:	ldr	lr, [sp, #84]	; 0x54
   12720:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12724:	str	r0, [fp, #-76]	; 0xffffffb4
   12728:	str	r8, [sp, #92]	; 0x5c
   1272c:	mov	r3, #1
   12730:	ldr	r0, [fp, #16]
   12734:	str	r7, [fp, #-64]	; 0xffffffc0
   12738:	str	r5, [fp, #-72]	; 0xffffffb8
   1273c:	str	r3, [sp, #80]	; 0x50
   12740:	cmp	r0, #0
   12744:	movwne	r0, #1
   12748:	and	r0, r0, r5
   1274c:	str	r0, [fp, #-88]	; 0xffffffa8
   12750:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12754:	cmp	r0, #0
   12758:	movwne	r0, #1
   1275c:	subs	r7, r7, #2
   12760:	and	r1, r0, r5
   12764:	str	r7, [fp, #-80]	; 0xffffffb0
   12768:	and	r1, r3, r1
   1276c:	str	r1, [sp, #40]	; 0x28
   12770:	clz	r1, r7
   12774:	lsr	r1, r1, #5
   12778:	and	r1, r1, r5
   1277c:	eor	r5, r5, #1
   12780:	str	r1, [sp, #36]	; 0x24
   12784:	mov	r1, r7
   12788:	str	r5, [sp, #88]	; 0x58
   1278c:	mov	r7, #0
   12790:	movwne	r1, #1
   12794:	orr	r5, r1, r5
   12798:	and	r1, r1, r3
   1279c:	and	r0, r0, r1
   127a0:	str	r5, [sp, #60]	; 0x3c
   127a4:	str	r1, [fp, #-68]	; 0xffffffbc
   127a8:	str	r0, [fp, #-60]	; 0xffffffc4
   127ac:	eor	r0, r3, #1
   127b0:	str	r0, [sp, #44]	; 0x2c
   127b4:	cmn	lr, #1
   127b8:	beq	127c8 <__assert_fail@plt+0x17ec>
   127bc:	cmp	r7, lr
   127c0:	bne	127d4 <__assert_fail@plt+0x17f8>
   127c4:	b	1344c <__assert_fail@plt+0x2470>
   127c8:	ldrb	r0, [ip, r7]
   127cc:	cmp	r0, #0
   127d0:	beq	13454 <__assert_fail@plt+0x2478>
   127d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   127d8:	mov	r8, #0
   127dc:	str	r4, [fp, #-52]	; 0xffffffcc
   127e0:	str	r2, [fp, #-48]	; 0xffffffd0
   127e4:	cmp	r0, #0
   127e8:	beq	1281c <__assert_fail@plt+0x1840>
   127ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   127f0:	add	r4, r7, r0
   127f4:	cmp	r0, #2
   127f8:	bcc	12814 <__assert_fail@plt+0x1838>
   127fc:	cmn	lr, #1
   12800:	bne	12814 <__assert_fail@plt+0x1838>
   12804:	mov	r0, ip
   12808:	bl	10ef8 <strlen@plt>
   1280c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12810:	mov	lr, r0
   12814:	cmp	r4, lr
   12818:	bls	12834 <__assert_fail@plt+0x1858>
   1281c:	mov	r0, #0
   12820:	str	r0, [fp, #-56]	; 0xffffffc8
   12824:	ldrb	r5, [ip, r7]
   12828:	cmp	r5, #126	; 0x7e
   1282c:	bls	12884 <__assert_fail@plt+0x18a8>
   12830:	b	12c8c <__assert_fail@plt+0x1cb0>
   12834:	ldr	r1, [sp, #92]	; 0x5c
   12838:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1283c:	add	r0, ip, r7
   12840:	mov	r4, lr
   12844:	bl	10e08 <memcmp@plt>
   12848:	ldr	r2, [sp, #88]	; 0x58
   1284c:	cmp	r0, #0
   12850:	mov	r1, r0
   12854:	movwne	r1, #1
   12858:	orr	r1, r1, r2
   1285c:	tst	r1, #1
   12860:	beq	13560 <__assert_fail@plt+0x2584>
   12864:	ldr	ip, [fp, #-84]	; 0xffffffac
   12868:	clz	r0, r0
   1286c:	mov	lr, r4
   12870:	lsr	r0, r0, #5
   12874:	str	r0, [fp, #-56]	; 0xffffffc8
   12878:	ldrb	r5, [ip, r7]
   1287c:	cmp	r5, #126	; 0x7e
   12880:	bhi	12c8c <__assert_fail@plt+0x1cb0>
   12884:	add	r3, pc, #16
   12888:	mov	r4, #1
   1288c:	mov	r2, #110	; 0x6e
   12890:	mov	r0, #97	; 0x61
   12894:	mov	r1, #0
   12898:	ldr	pc, [r3, r5, lsl #2]
   1289c:	andeq	r2, r1, ip, ror #22
   128a0:	andeq	r2, r1, ip, lsl #25
   128a4:	andeq	r2, r1, ip, lsl #25
   128a8:	andeq	r2, r1, ip, lsl #25
   128ac:	andeq	r2, r1, ip, lsl #25
   128b0:	andeq	r2, r1, ip, lsl #25
   128b4:	andeq	r2, r1, ip, lsl #25
   128b8:	andeq	r2, r1, r8, ror #26
   128bc:	andeq	r2, r1, ip, asr #22
   128c0:	andeq	r2, r1, r4, lsr fp
   128c4:	andeq	r2, r1, r8, asr fp
   128c8:	andeq	r2, r1, r8, ror #23
   128cc:	andeq	r2, r1, ip, lsr #22
   128d0:	andeq	r2, r1, r4, asr fp
   128d4:	andeq	r2, r1, ip, lsl #25
   128d8:	andeq	r2, r1, ip, lsl #25
   128dc:	andeq	r2, r1, ip, lsl #25
   128e0:	andeq	r2, r1, ip, lsl #25
   128e4:	andeq	r2, r1, ip, lsl #25
   128e8:	andeq	r2, r1, ip, lsl #25
   128ec:	andeq	r2, r1, ip, lsl #25
   128f0:	andeq	r2, r1, ip, lsl #25
   128f4:	andeq	r2, r1, ip, lsl #25
   128f8:	andeq	r2, r1, ip, lsl #25
   128fc:	andeq	r2, r1, ip, lsl #25
   12900:	andeq	r2, r1, ip, lsl #25
   12904:	andeq	r2, r1, ip, lsl #25
   12908:	andeq	r2, r1, ip, lsl #25
   1290c:	andeq	r2, r1, ip, lsl #25
   12910:	andeq	r2, r1, ip, lsl #25
   12914:	andeq	r2, r1, ip, lsl #25
   12918:	andeq	r2, r1, ip, lsl #25
   1291c:	andeq	r2, r1, r4, ror #25
   12920:	andeq	r2, r1, r8, ror #25
   12924:	andeq	r2, r1, r8, ror #25
   12928:			; <UNDEFINED> instruction: 0x00012ab8
   1292c:	andeq	r2, r1, r8, ror #25
   12930:	muleq	r1, r8, sl
   12934:	andeq	r2, r1, r8, ror #25
   12938:	strdeq	r2, [r1], -r0
   1293c:	andeq	r2, r1, r8, ror #25
   12940:	andeq	r2, r1, r8, ror #25
   12944:	andeq	r2, r1, r8, ror #25
   12948:	muleq	r1, r8, sl
   1294c:	muleq	r1, r8, sl
   12950:	muleq	r1, r8, sl
   12954:	muleq	r1, r8, sl
   12958:	muleq	r1, r8, sl
   1295c:	muleq	r1, r8, sl
   12960:	muleq	r1, r8, sl
   12964:	muleq	r1, r8, sl
   12968:	muleq	r1, r8, sl
   1296c:	muleq	r1, r8, sl
   12970:	muleq	r1, r8, sl
   12974:	muleq	r1, r8, sl
   12978:	muleq	r1, r8, sl
   1297c:	muleq	r1, r8, sl
   12980:	muleq	r1, r8, sl
   12984:	muleq	r1, r8, sl
   12988:	andeq	r2, r1, r8, ror #25
   1298c:	andeq	r2, r1, r8, ror #25
   12990:	andeq	r2, r1, r8, ror #25
   12994:	andeq	r2, r1, r8, ror #25
   12998:	andeq	r2, r1, ip, lsr #23
   1299c:	andeq	r2, r1, ip, lsl #25
   129a0:	muleq	r1, r8, sl
   129a4:	muleq	r1, r8, sl
   129a8:	muleq	r1, r8, sl
   129ac:	muleq	r1, r8, sl
   129b0:	muleq	r1, r8, sl
   129b4:	muleq	r1, r8, sl
   129b8:	muleq	r1, r8, sl
   129bc:	muleq	r1, r8, sl
   129c0:	muleq	r1, r8, sl
   129c4:	muleq	r1, r8, sl
   129c8:	muleq	r1, r8, sl
   129cc:	muleq	r1, r8, sl
   129d0:	muleq	r1, r8, sl
   129d4:	muleq	r1, r8, sl
   129d8:	muleq	r1, r8, sl
   129dc:	muleq	r1, r8, sl
   129e0:	muleq	r1, r8, sl
   129e4:	muleq	r1, r8, sl
   129e8:	muleq	r1, r8, sl
   129ec:	muleq	r1, r8, sl
   129f0:	muleq	r1, r8, sl
   129f4:	muleq	r1, r8, sl
   129f8:	muleq	r1, r8, sl
   129fc:	muleq	r1, r8, sl
   12a00:	muleq	r1, r8, sl
   12a04:	muleq	r1, r8, sl
   12a08:	andeq	r2, r1, r8, ror #25
   12a0c:	strdeq	r2, [r1], -r8
   12a10:	muleq	r1, r8, sl
   12a14:	andeq	r2, r1, r8, ror #25
   12a18:	muleq	r1, r8, sl
   12a1c:	andeq	r2, r1, r8, ror #25
   12a20:	muleq	r1, r8, sl
   12a24:	muleq	r1, r8, sl
   12a28:	muleq	r1, r8, sl
   12a2c:	muleq	r1, r8, sl
   12a30:	muleq	r1, r8, sl
   12a34:	muleq	r1, r8, sl
   12a38:	muleq	r1, r8, sl
   12a3c:	muleq	r1, r8, sl
   12a40:	muleq	r1, r8, sl
   12a44:	muleq	r1, r8, sl
   12a48:	muleq	r1, r8, sl
   12a4c:	muleq	r1, r8, sl
   12a50:	muleq	r1, r8, sl
   12a54:	muleq	r1, r8, sl
   12a58:	muleq	r1, r8, sl
   12a5c:	muleq	r1, r8, sl
   12a60:	muleq	r1, r8, sl
   12a64:	muleq	r1, r8, sl
   12a68:	muleq	r1, r8, sl
   12a6c:	muleq	r1, r8, sl
   12a70:	muleq	r1, r8, sl
   12a74:	muleq	r1, r8, sl
   12a78:	muleq	r1, r8, sl
   12a7c:	muleq	r1, r8, sl
   12a80:	muleq	r1, r8, sl
   12a84:	muleq	r1, r8, sl
   12a88:	ldrdeq	r2, [r1], -r8
   12a8c:	andeq	r2, r1, r8, ror #25
   12a90:	ldrdeq	r2, [r1], -r8
   12a94:			; <UNDEFINED> instruction: 0x00012ab8
   12a98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12a9c:	cmp	r0, #0
   12aa0:	beq	12d7c <__assert_fail@plt+0x1da0>
   12aa4:	ldr	r0, [fp, #16]
   12aa8:	cmp	r0, #0
   12aac:	mov	r0, r5
   12ab0:	bne	12d8c <__assert_fail@plt+0x1db0>
   12ab4:	b	12dac <__assert_fail@plt+0x1dd0>
   12ab8:	mov	r4, #0
   12abc:	cmp	r7, #0
   12ac0:	beq	12ce4 <__assert_fail@plt+0x1d08>
   12ac4:	mov	r8, #0
   12ac8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12acc:	cmp	r0, #0
   12ad0:	bne	12aa4 <__assert_fail@plt+0x1ac8>
   12ad4:	b	12d7c <__assert_fail@plt+0x1da0>
   12ad8:	mov	r4, #0
   12adc:	cmn	lr, #1
   12ae0:	beq	12cbc <__assert_fail@plt+0x1ce0>
   12ae4:	cmp	r7, #0
   12ae8:	bne	12ac4 <__assert_fail@plt+0x1ae8>
   12aec:	cmp	lr, #1
   12af0:	beq	12ce4 <__assert_fail@plt+0x1d08>
   12af4:	b	12ac4 <__assert_fail@plt+0x1ae8>
   12af8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12afc:	cmp	r0, #2
   12b00:	bne	12d14 <__assert_fail@plt+0x1d38>
   12b04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12b08:	tst	r0, #1
   12b0c:	bne	13574 <__assert_fail@plt+0x2598>
   12b10:	mov	r8, #0
   12b14:	mov	r0, #92	; 0x5c
   12b18:	mov	r4, #0
   12b1c:	cmp	r8, #0
   12b20:	beq	12d34 <__assert_fail@plt+0x1d58>
   12b24:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12b28:	b	12e28 <__assert_fail@plt+0x1e4c>
   12b2c:	mov	r0, #102	; 0x66
   12b30:	b	12d68 <__assert_fail@plt+0x1d8c>
   12b34:	mov	r2, #116	; 0x74
   12b38:	ldr	r0, [sp, #60]	; 0x3c
   12b3c:	tst	r0, #1
   12b40:	mov	r0, r2
   12b44:	bne	12d68 <__assert_fail@plt+0x1d8c>
   12b48:	b	13574 <__assert_fail@plt+0x2598>
   12b4c:	mov	r0, #98	; 0x62
   12b50:	b	12d68 <__assert_fail@plt+0x1d8c>
   12b54:	mov	r2, #114	; 0x72
   12b58:	ldr	r0, [sp, #60]	; 0x3c
   12b5c:	tst	r0, #1
   12b60:	mov	r0, r2
   12b64:	bne	12d68 <__assert_fail@plt+0x1d8c>
   12b68:	b	13574 <__assert_fail@plt+0x2598>
   12b6c:	ldr	r0, [sp, #80]	; 0x50
   12b70:	tst	r0, #1
   12b74:	beq	12e50 <__assert_fail@plt+0x1e74>
   12b78:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12b7c:	tst	r0, #1
   12b80:	bne	1369c <__assert_fail@plt+0x26c0>
   12b84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12b88:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12b8c:	cmp	r0, #2
   12b90:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12b94:	movwne	r0, #1
   12b98:	orr	r0, r0, r2
   12b9c:	tst	r0, #1
   12ba0:	beq	13148 <__assert_fail@plt+0x216c>
   12ba4:	mov	r0, r9
   12ba8:	b	1317c <__assert_fail@plt+0x21a0>
   12bac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bb0:	mov	r8, #0
   12bb4:	mov	r5, #63	; 0x3f
   12bb8:	cmp	r0, #5
   12bbc:	beq	13004 <__assert_fail@plt+0x2028>
   12bc0:	cmp	r0, #2
   12bc4:	bne	130b4 <__assert_fail@plt+0x20d8>
   12bc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12bcc:	tst	r0, #1
   12bd0:	bne	13574 <__assert_fail@plt+0x2598>
   12bd4:	mov	r4, #0
   12bd8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bdc:	cmp	r0, #0
   12be0:	bne	12aa4 <__assert_fail@plt+0x1ac8>
   12be4:	b	12d7c <__assert_fail@plt+0x1da0>
   12be8:	mov	r0, #118	; 0x76
   12bec:	b	12d68 <__assert_fail@plt+0x1d8c>
   12bf0:	mov	r0, #1
   12bf4:	mov	r5, #39	; 0x27
   12bf8:	str	r0, [sp, #52]	; 0x34
   12bfc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c00:	cmp	r0, #2
   12c04:	bne	12c78 <__assert_fail@plt+0x1c9c>
   12c08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c0c:	tst	r0, #1
   12c10:	bne	13574 <__assert_fail@plt+0x2598>
   12c14:	ldr	r2, [sp, #48]	; 0x30
   12c18:	clz	r1, sl
   12c1c:	mov	r8, #0
   12c20:	lsr	r1, r1, #5
   12c24:	cmp	r2, #0
   12c28:	mov	r0, r2
   12c2c:	movwne	r0, #1
   12c30:	orrs	r0, r0, r1
   12c34:	moveq	r2, sl
   12c38:	moveq	sl, r0
   12c3c:	cmp	r9, sl
   12c40:	str	r2, [sp, #48]	; 0x30
   12c44:	movcc	r0, #39	; 0x27
   12c48:	strbcc	r0, [r6, r9]
   12c4c:	add	r0, r9, #1
   12c50:	cmp	r0, sl
   12c54:	movcc	r1, #92	; 0x5c
   12c58:	strbcc	r1, [r6, r0]
   12c5c:	add	r0, r9, #2
   12c60:	add	r9, r9, #3
   12c64:	cmp	r0, sl
   12c68:	movcc	r1, #39	; 0x27
   12c6c:	strbcc	r1, [r6, r0]
   12c70:	mov	r0, #0
   12c74:	str	r0, [fp, #-48]	; 0xffffffd0
   12c78:	mov	r4, #1
   12c7c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c80:	cmp	r0, #0
   12c84:	bne	12aa4 <__assert_fail@plt+0x1ac8>
   12c88:	b	12d7c <__assert_fail@plt+0x1da0>
   12c8c:	ldr	r0, [sp, #32]
   12c90:	cmp	r0, #1
   12c94:	bne	12e80 <__assert_fail@plt+0x1ea4>
   12c98:	str	lr, [sp, #84]	; 0x54
   12c9c:	bl	10ee0 <__ctype_b_loc@plt>
   12ca0:	ldr	r0, [r0]
   12ca4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ca8:	mov	r1, #1
   12cac:	add	r0, r0, r5, lsl #1
   12cb0:	ldrb	r0, [r0, #1]
   12cb4:	ubfx	r4, r0, #6, #1
   12cb8:	b	13278 <__assert_fail@plt+0x229c>
   12cbc:	cmp	r7, #0
   12cc0:	ldrbeq	r0, [ip, #1]
   12cc4:	cmpeq	r0, #0
   12cc8:	beq	12ce4 <__assert_fail@plt+0x1d08>
   12ccc:	mvn	lr, #0
   12cd0:	mov	r8, #0
   12cd4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12cd8:	cmp	r0, #0
   12cdc:	bne	12aa4 <__assert_fail@plt+0x1ac8>
   12ce0:	b	12d7c <__assert_fail@plt+0x1da0>
   12ce4:	mov	r1, #1
   12ce8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cec:	cmp	r0, #2
   12cf0:	bne	12d00 <__assert_fail@plt+0x1d24>
   12cf4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12cf8:	tst	r0, #1
   12cfc:	bne	13574 <__assert_fail@plt+0x2598>
   12d00:	mov	r4, r1
   12d04:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d08:	cmp	r0, #0
   12d0c:	bne	12aa4 <__assert_fail@plt+0x1ac8>
   12d10:	b	12d7c <__assert_fail@plt+0x1da0>
   12d14:	ldr	r1, [sp, #40]	; 0x28
   12d18:	mov	r8, #0
   12d1c:	mov	r0, #92	; 0x5c
   12d20:	cmp	r1, #0
   12d24:	beq	12d68 <__assert_fail@plt+0x1d8c>
   12d28:	mov	r4, #0
   12d2c:	cmp	r8, #0
   12d30:	bne	12b24 <__assert_fail@plt+0x1b48>
   12d34:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12d38:	tst	r2, #1
   12d3c:	beq	12e28 <__assert_fail@plt+0x1e4c>
   12d40:	cmp	r9, sl
   12d44:	movcc	r1, #39	; 0x27
   12d48:	strbcc	r1, [r6, r9]
   12d4c:	add	r1, r9, #1
   12d50:	add	r9, r9, #2
   12d54:	cmp	r1, sl
   12d58:	movcc	r2, #39	; 0x27
   12d5c:	strbcc	r2, [r6, r1]
   12d60:	mov	r2, #0
   12d64:	b	12e28 <__assert_fail@plt+0x1e4c>
   12d68:	ldr	r1, [sp, #80]	; 0x50
   12d6c:	mov	r4, #0
   12d70:	mov	r8, #0
   12d74:	tst	r1, #1
   12d78:	bne	12db8 <__assert_fail@plt+0x1ddc>
   12d7c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12d80:	cmp	r0, #0
   12d84:	mov	r0, r5
   12d88:	beq	12dac <__assert_fail@plt+0x1dd0>
   12d8c:	ldr	r1, [fp, #16]
   12d90:	ubfx	r0, r5, #5, #3
   12d94:	mov	r2, #1
   12d98:	ldr	r0, [r1, r0, lsl #2]
   12d9c:	and	r1, r5, #31
   12da0:	tst	r0, r2, lsl r1
   12da4:	mov	r0, r5
   12da8:	bne	12db8 <__assert_fail@plt+0x1ddc>
   12dac:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12db0:	cmp	r1, #0
   12db4:	beq	13210 <__assert_fail@plt+0x2234>
   12db8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12dbc:	tst	r1, #1
   12dc0:	bne	13554 <__assert_fail@plt+0x2578>
   12dc4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12dc8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12dcc:	cmp	r1, #2
   12dd0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12dd4:	movwne	r1, #1
   12dd8:	orr	r1, r1, r2
   12ddc:	tst	r1, #1
   12de0:	bne	12e18 <__assert_fail@plt+0x1e3c>
   12de4:	cmp	r9, sl
   12de8:	movcc	r1, #39	; 0x27
   12dec:	strbcc	r1, [r6, r9]
   12df0:	add	r1, r9, #1
   12df4:	cmp	r1, sl
   12df8:	movcc	r2, #36	; 0x24
   12dfc:	strbcc	r2, [r6, r1]
   12e00:	add	r1, r9, #2
   12e04:	add	r9, r9, #3
   12e08:	cmp	r1, sl
   12e0c:	movcc	r2, #39	; 0x27
   12e10:	strbcc	r2, [r6, r1]
   12e14:	mov	r2, #1
   12e18:	cmp	r9, sl
   12e1c:	movcc	r1, #92	; 0x5c
   12e20:	strbcc	r1, [r6, r9]
   12e24:	add	r9, r9, #1
   12e28:	cmp	r9, sl
   12e2c:	add	r7, r7, #1
   12e30:	strbcc	r0, [r6, r9]
   12e34:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12e38:	add	r9, r9, #1
   12e3c:	and	r0, r0, r4
   12e40:	mov	r4, r0
   12e44:	cmn	lr, #1
   12e48:	bne	127bc <__assert_fail@plt+0x17e0>
   12e4c:	b	127c8 <__assert_fail@plt+0x17ec>
   12e50:	ldr	r0, [sp, #28]
   12e54:	mov	r4, #0
   12e58:	mov	r8, #0
   12e5c:	mov	r5, #0
   12e60:	cmp	r0, #0
   12e64:	beq	12d7c <__assert_fail@plt+0x1da0>
   12e68:	ldr	r4, [fp, #-52]	; 0xffffffcc
   12e6c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12e70:	add	r7, r7, #1
   12e74:	cmn	lr, #1
   12e78:	bne	127bc <__assert_fail@plt+0x17e0>
   12e7c:	b	127c8 <__assert_fail@plt+0x17ec>
   12e80:	mov	r0, #0
   12e84:	cmn	lr, #1
   12e88:	str	r0, [fp, #-36]	; 0xffffffdc
   12e8c:	str	r0, [fp, #-40]	; 0xffffffd8
   12e90:	bne	12ea4 <__assert_fail@plt+0x1ec8>
   12e94:	mov	r0, ip
   12e98:	bl	10ef8 <strlen@plt>
   12e9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ea0:	mov	lr, r0
   12ea4:	ldr	r0, [sp, #36]	; 0x24
   12ea8:	str	sl, [sp, #56]	; 0x38
   12eac:	str	lr, [sp, #84]	; 0x54
   12eb0:	cmp	r0, #0
   12eb4:	beq	130cc <__assert_fail@plt+0x20f0>
   12eb8:	add	r0, ip, r7
   12ebc:	mov	r4, #1
   12ec0:	mov	r6, #0
   12ec4:	sub	sl, fp, #40	; 0x28
   12ec8:	str	r0, [sp, #20]
   12ecc:	str	r6, [sp, #64]	; 0x40
   12ed0:	add	r6, r6, r7
   12ed4:	sub	r0, fp, #44	; 0x2c
   12ed8:	mov	r3, sl
   12edc:	add	r1, ip, r6
   12ee0:	sub	r2, lr, r6
   12ee4:	bl	16ad8 <__assert_fail@plt+0x5afc>
   12ee8:	cmn	r0, #2
   12eec:	beq	13228 <__assert_fail@plt+0x224c>
   12ef0:	ldr	sl, [sp, #56]	; 0x38
   12ef4:	cmn	r0, #1
   12ef8:	beq	1321c <__assert_fail@plt+0x2240>
   12efc:	cmp	r0, #0
   12f00:	beq	13220 <__assert_fail@plt+0x2244>
   12f04:	cmp	r0, #2
   12f08:	bcc	12fc8 <__assert_fail@plt+0x1fec>
   12f0c:	ldr	r1, [sp, #64]	; 0x40
   12f10:	ldr	r2, [sp, #20]
   12f14:	add	r1, r2, r1
   12f18:	mov	r2, #1
   12f1c:	ldrb	r3, [r1, r2]
   12f20:	sub	r3, r3, #91	; 0x5b
   12f24:	cmp	r3, #33	; 0x21
   12f28:	bhi	12fbc <__assert_fail@plt+0x1fe0>
   12f2c:	add	r6, pc, #0
   12f30:	ldr	pc, [r6, r3, lsl #2]
   12f34:	andeq	r3, r1, r0, lsl #11
   12f38:	andeq	r3, r1, r0, lsl #11
   12f3c:			; <UNDEFINED> instruction: 0x00012fbc
   12f40:	andeq	r3, r1, r0, lsl #11
   12f44:			; <UNDEFINED> instruction: 0x00012fbc
   12f48:	andeq	r3, r1, r0, lsl #11
   12f4c:			; <UNDEFINED> instruction: 0x00012fbc
   12f50:			; <UNDEFINED> instruction: 0x00012fbc
   12f54:			; <UNDEFINED> instruction: 0x00012fbc
   12f58:			; <UNDEFINED> instruction: 0x00012fbc
   12f5c:			; <UNDEFINED> instruction: 0x00012fbc
   12f60:			; <UNDEFINED> instruction: 0x00012fbc
   12f64:			; <UNDEFINED> instruction: 0x00012fbc
   12f68:			; <UNDEFINED> instruction: 0x00012fbc
   12f6c:			; <UNDEFINED> instruction: 0x00012fbc
   12f70:			; <UNDEFINED> instruction: 0x00012fbc
   12f74:			; <UNDEFINED> instruction: 0x00012fbc
   12f78:			; <UNDEFINED> instruction: 0x00012fbc
   12f7c:			; <UNDEFINED> instruction: 0x00012fbc
   12f80:			; <UNDEFINED> instruction: 0x00012fbc
   12f84:			; <UNDEFINED> instruction: 0x00012fbc
   12f88:			; <UNDEFINED> instruction: 0x00012fbc
   12f8c:			; <UNDEFINED> instruction: 0x00012fbc
   12f90:			; <UNDEFINED> instruction: 0x00012fbc
   12f94:			; <UNDEFINED> instruction: 0x00012fbc
   12f98:			; <UNDEFINED> instruction: 0x00012fbc
   12f9c:			; <UNDEFINED> instruction: 0x00012fbc
   12fa0:			; <UNDEFINED> instruction: 0x00012fbc
   12fa4:			; <UNDEFINED> instruction: 0x00012fbc
   12fa8:			; <UNDEFINED> instruction: 0x00012fbc
   12fac:			; <UNDEFINED> instruction: 0x00012fbc
   12fb0:			; <UNDEFINED> instruction: 0x00012fbc
   12fb4:			; <UNDEFINED> instruction: 0x00012fbc
   12fb8:	andeq	r3, r1, r0, lsl #11
   12fbc:	add	r2, r2, #1
   12fc0:	cmp	r2, r0
   12fc4:	bcc	12f1c <__assert_fail@plt+0x1f40>
   12fc8:	ldr	r6, [sp, #64]	; 0x40
   12fcc:	add	r6, r0, r6
   12fd0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12fd4:	bl	10e38 <iswprint@plt>
   12fd8:	cmp	r0, #0
   12fdc:	sub	sl, fp, #40	; 0x28
   12fe0:	movwne	r0, #1
   12fe4:	and	r4, r4, r0
   12fe8:	mov	r0, sl
   12fec:	bl	10df0 <mbsinit@plt>
   12ff0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ff4:	ldr	lr, [sp, #84]	; 0x54
   12ff8:	cmp	r0, #0
   12ffc:	beq	12ecc <__assert_fail@plt+0x1ef0>
   13000:	b	1326c <__assert_fail@plt+0x2290>
   13004:	ldr	r0, [sp, #24]
   13008:	cmp	r0, #0
   1300c:	beq	130b4 <__assert_fail@plt+0x20d8>
   13010:	add	r0, r7, #2
   13014:	cmp	r0, lr
   13018:	bcs	130b4 <__assert_fail@plt+0x20d8>
   1301c:	add	r1, ip, r7
   13020:	ldrb	r1, [r1, #1]
   13024:	cmp	r1, #63	; 0x3f
   13028:	bne	130b4 <__assert_fail@plt+0x20d8>
   1302c:	ldrb	r5, [ip, r0]
   13030:	sub	r1, r5, #33	; 0x21
   13034:	cmp	r1, #29
   13038:	bhi	130b4 <__assert_fail@plt+0x20d8>
   1303c:	movw	r3, #20929	; 0x51c1
   13040:	mov	r2, #1
   13044:	movt	r3, #14336	; 0x3800
   13048:	tst	r3, r2, lsl r1
   1304c:	beq	130b4 <__assert_fail@plt+0x20d8>
   13050:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13054:	tst	r1, #1
   13058:	bne	136a4 <__assert_fail@plt+0x26c8>
   1305c:	cmp	r9, sl
   13060:	mov	r7, r0
   13064:	mov	r4, #0
   13068:	movcc	r1, #63	; 0x3f
   1306c:	strbcc	r1, [r6, r9]
   13070:	add	r1, r9, #1
   13074:	cmp	r1, sl
   13078:	movcc	r2, #34	; 0x22
   1307c:	strbcc	r2, [r6, r1]
   13080:	add	r1, r9, #2
   13084:	cmp	r1, sl
   13088:	movcc	r2, #34	; 0x22
   1308c:	strbcc	r2, [r6, r1]
   13090:	add	r1, r9, #3
   13094:	add	r9, r9, #4
   13098:	cmp	r1, sl
   1309c:	movcc	r2, #63	; 0x3f
   130a0:	strbcc	r2, [r6, r1]
   130a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130a8:	cmp	r0, #0
   130ac:	bne	12aa4 <__assert_fail@plt+0x1ac8>
   130b0:	b	12d7c <__assert_fail@plt+0x1da0>
   130b4:	mov	r5, #63	; 0x3f
   130b8:	mov	r4, #0
   130bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130c0:	cmp	r0, #0
   130c4:	bne	12aa4 <__assert_fail@plt+0x1ac8>
   130c8:	b	12d7c <__assert_fail@plt+0x1da0>
   130cc:	mov	r4, #1
   130d0:	mov	r6, #0
   130d4:	sub	sl, fp, #40	; 0x28
   130d8:	str	r6, [sp, #64]	; 0x40
   130dc:	add	r6, r6, r7
   130e0:	sub	r0, fp, #44	; 0x2c
   130e4:	mov	r3, sl
   130e8:	add	r1, ip, r6
   130ec:	sub	r2, lr, r6
   130f0:	bl	16ad8 <__assert_fail@plt+0x5afc>
   130f4:	cmn	r0, #2
   130f8:	beq	13228 <__assert_fail@plt+0x224c>
   130fc:	cmn	r0, #1
   13100:	beq	1321c <__assert_fail@plt+0x2240>
   13104:	ldr	r6, [sp, #64]	; 0x40
   13108:	cmp	r0, #0
   1310c:	beq	13268 <__assert_fail@plt+0x228c>
   13110:	add	r6, r0, r6
   13114:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13118:	bl	10e38 <iswprint@plt>
   1311c:	cmp	r0, #0
   13120:	sub	sl, fp, #40	; 0x28
   13124:	movwne	r0, #1
   13128:	and	r4, r4, r0
   1312c:	mov	r0, sl
   13130:	bl	10df0 <mbsinit@plt>
   13134:	ldr	ip, [fp, #-84]	; 0xffffffac
   13138:	ldr	lr, [sp, #84]	; 0x54
   1313c:	cmp	r0, #0
   13140:	beq	130d8 <__assert_fail@plt+0x20fc>
   13144:	b	1326c <__assert_fail@plt+0x2290>
   13148:	cmp	r9, sl
   1314c:	mov	r2, #1
   13150:	movcc	r0, #39	; 0x27
   13154:	strbcc	r0, [r6, r9]
   13158:	add	r0, r9, #1
   1315c:	cmp	r0, sl
   13160:	movcc	r1, #36	; 0x24
   13164:	strbcc	r1, [r6, r0]
   13168:	add	r0, r9, #2
   1316c:	cmp	r0, sl
   13170:	movcc	r1, #39	; 0x27
   13174:	strbcc	r1, [r6, r0]
   13178:	add	r0, r9, #3
   1317c:	cmp	r0, sl
   13180:	add	r9, r0, #1
   13184:	str	r2, [fp, #-48]	; 0xffffffd0
   13188:	movcc	r1, #92	; 0x5c
   1318c:	strbcc	r1, [r6, r0]
   13190:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13194:	cmp	r1, #2
   13198:	beq	131f8 <__assert_fail@plt+0x221c>
   1319c:	add	r1, r7, #1
   131a0:	mov	r4, #0
   131a4:	mov	r8, #1
   131a8:	mov	r5, #48	; 0x30
   131ac:	cmp	r1, lr
   131b0:	bcs	12a98 <__assert_fail@plt+0x1abc>
   131b4:	ldrb	r1, [ip, r1]
   131b8:	sub	r1, r1, #48	; 0x30
   131bc:	uxtb	r1, r1
   131c0:	cmp	r1, #9
   131c4:	bhi	12a98 <__assert_fail@plt+0x1abc>
   131c8:	cmp	r9, sl
   131cc:	movcc	r1, #48	; 0x30
   131d0:	strbcc	r1, [r6, r9]
   131d4:	add	r1, r0, #2
   131d8:	add	r9, r0, #3
   131dc:	cmp	r1, sl
   131e0:	movcc	r2, #48	; 0x30
   131e4:	strbcc	r2, [r6, r1]
   131e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131ec:	cmp	r0, #0
   131f0:	bne	12aa4 <__assert_fail@plt+0x1ac8>
   131f4:	b	12d7c <__assert_fail@plt+0x1da0>
   131f8:	mov	r0, #48	; 0x30
   131fc:	mov	r8, #1
   13200:	mov	r4, #0
   13204:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13208:	cmp	r1, #0
   1320c:	bne	12db8 <__assert_fail@plt+0x1ddc>
   13210:	cmp	r8, #0
   13214:	beq	12d34 <__assert_fail@plt+0x1d58>
   13218:	b	12b24 <__assert_fail@plt+0x1b48>
   1321c:	mov	r4, #0
   13220:	ldr	ip, [fp, #-84]	; 0xffffffac
   13224:	b	13260 <__assert_fail@plt+0x2284>
   13228:	ldr	r1, [sp, #84]	; 0x54
   1322c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13230:	mov	r4, #0
   13234:	cmp	r6, r1
   13238:	bcs	13260 <__assert_fail@plt+0x2284>
   1323c:	ldrb	r0, [ip, r6]
   13240:	cmp	r0, #0
   13244:	beq	13260 <__assert_fail@plt+0x2284>
   13248:	ldr	r0, [sp, #64]	; 0x40
   1324c:	add	r0, r0, #1
   13250:	add	r6, r0, r7
   13254:	str	r0, [sp, #64]	; 0x40
   13258:	cmp	r6, r1
   1325c:	bcc	1323c <__assert_fail@plt+0x2260>
   13260:	ldr	r6, [sp, #64]	; 0x40
   13264:	b	1326c <__assert_fail@plt+0x2290>
   13268:	ldr	ip, [fp, #-84]	; 0xffffffac
   1326c:	mov	r1, r6
   13270:	ldr	r6, [sp, #76]	; 0x4c
   13274:	ldr	sl, [sp, #56]	; 0x38
   13278:	ldr	r0, [sp, #44]	; 0x2c
   1327c:	cmp	r1, #1
   13280:	orr	r2, r4, r0
   13284:	mov	r0, r1
   13288:	bhi	132a8 <__assert_fail@plt+0x22cc>
   1328c:	tst	r2, #1
   13290:	beq	132a8 <__assert_fail@plt+0x22cc>
   13294:	ldr	lr, [sp, #84]	; 0x54
   13298:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1329c:	cmp	r0, #0
   132a0:	bne	12aa4 <__assert_fail@plt+0x1ac8>
   132a4:	b	12d7c <__assert_fail@plt+0x1da0>
   132a8:	str	r2, [sp, #64]	; 0x40
   132ac:	add	r0, r0, r7
   132b0:	add	r1, r7, #1
   132b4:	ldr	lr, [sp, #84]	; 0x54
   132b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   132bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   132c0:	mov	r3, #0
   132c4:	str	r0, [sp, #56]	; 0x38
   132c8:	ldr	r0, [sp, #64]	; 0x40
   132cc:	tst	r0, #1
   132d0:	bne	133b8 <__assert_fail@plt+0x23dc>
   132d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132d8:	tst	r0, #1
   132dc:	bne	13558 <__assert_fail@plt+0x257c>
   132e0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   132e4:	cmp	r7, #2
   132e8:	movwne	r3, #1
   132ec:	orr	r3, r3, r2
   132f0:	tst	r3, #1
   132f4:	bne	1332c <__assert_fail@plt+0x2350>
   132f8:	cmp	r9, sl
   132fc:	add	r3, r9, #1
   13300:	movcc	r2, #39	; 0x27
   13304:	strbcc	r2, [r6, r9]
   13308:	cmp	r3, sl
   1330c:	movcc	r2, #36	; 0x24
   13310:	strbcc	r2, [r6, r3]
   13314:	add	r3, r9, #2
   13318:	add	r9, r9, #3
   1331c:	cmp	r3, sl
   13320:	movcc	r2, #39	; 0x27
   13324:	strbcc	r2, [r6, r3]
   13328:	mov	r2, #1
   1332c:	cmp	r9, sl
   13330:	mov	r0, r2
   13334:	movcc	r3, #92	; 0x5c
   13338:	strbcc	r3, [r6, r9]
   1333c:	add	r3, r9, #1
   13340:	cmp	r3, sl
   13344:	andcc	r7, r5, #192	; 0xc0
   13348:	movcc	r2, #48	; 0x30
   1334c:	orrcc	r7, r2, r7, lsr #6
   13350:	strbcc	r7, [r6, r3]
   13354:	add	r3, r9, #2
   13358:	add	r9, r9, #3
   1335c:	cmp	r3, sl
   13360:	lsrcc	r7, r5, #3
   13364:	movcc	r2, #6
   13368:	bficc	r7, r2, #3, #29
   1336c:	mov	r2, #6
   13370:	strbcc	r7, [r6, r3]
   13374:	bfi	r5, r2, #3, #29
   13378:	mov	r3, #1
   1337c:	mov	r2, r0
   13380:	ldr	r0, [sp, #56]	; 0x38
   13384:	and	r8, r3, #1
   13388:	cmp	r0, r1
   1338c:	bhi	133ec <__assert_fail@plt+0x2410>
   13390:	b	1342c <__assert_fail@plt+0x2450>
   13394:	cmp	r9, sl
   13398:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1339c:	strbcc	r5, [r6, r9]
   133a0:	add	r9, r9, #1
   133a4:	ldrb	r5, [ip, r1]
   133a8:	add	r1, r1, #1
   133ac:	ldr	r0, [sp, #64]	; 0x40
   133b0:	tst	r0, #1
   133b4:	beq	132d4 <__assert_fail@plt+0x22f8>
   133b8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   133bc:	tst	r7, #1
   133c0:	beq	133d4 <__assert_fail@plt+0x23f8>
   133c4:	cmp	r9, sl
   133c8:	movcc	r7, #92	; 0x5c
   133cc:	strbcc	r7, [r6, r9]
   133d0:	add	r9, r9, #1
   133d4:	mov	r7, #0
   133d8:	str	r7, [fp, #-56]	; 0xffffffc8
   133dc:	ldr	r0, [sp, #56]	; 0x38
   133e0:	and	r8, r3, #1
   133e4:	cmp	r0, r1
   133e8:	bls	1342c <__assert_fail@plt+0x2450>
   133ec:	cmp	r8, #0
   133f0:	mvn	r7, r2
   133f4:	movwne	r8, #1
   133f8:	orr	r7, r7, r8
   133fc:	tst	r7, #1
   13400:	bne	13394 <__assert_fail@plt+0x23b8>
   13404:	cmp	r9, sl
   13408:	movcc	r7, #39	; 0x27
   1340c:	strbcc	r7, [r6, r9]
   13410:	add	r7, r9, #1
   13414:	add	r9, r9, #2
   13418:	cmp	r7, sl
   1341c:	movcc	r2, #39	; 0x27
   13420:	strbcc	r2, [r6, r7]
   13424:	mov	r2, #0
   13428:	b	13394 <__assert_fail@plt+0x23b8>
   1342c:	cmp	r8, #0
   13430:	sub	r7, r1, #1
   13434:	mov	r0, r5
   13438:	str	r2, [fp, #-48]	; 0xffffffd0
   1343c:	movwne	r8, #1
   13440:	cmp	r8, #0
   13444:	beq	12d34 <__assert_fail@plt+0x1d58>
   13448:	b	12b24 <__assert_fail@plt+0x1b48>
   1344c:	mov	lr, r7
   13450:	b	13458 <__assert_fail@plt+0x247c>
   13454:	mvn	lr, #0
   13458:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1345c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13460:	eor	r0, r7, #2
   13464:	orr	r0, r0, r9
   13468:	clz	r0, r0
   1346c:	lsr	r0, r0, #5
   13470:	tst	r1, r0
   13474:	bne	13574 <__assert_fail@plt+0x2598>
   13478:	mov	r0, r1
   1347c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13480:	cmp	r7, #2
   13484:	movwne	r1, #1
   13488:	orr	r0, r0, r1
   1348c:	tst	r0, #1
   13490:	ldreq	r0, [sp, #52]	; 0x34
   13494:	streq	lr, [sp, #84]	; 0x54
   13498:	eoreq	r0, r0, #1
   1349c:	tsteq	r0, #1
   134a0:	bne	13638 <__assert_fail@plt+0x265c>
   134a4:	tst	r4, #1
   134a8:	bne	135f4 <__assert_fail@plt+0x2618>
   134ac:	ldr	r6, [sp, #48]	; 0x30
   134b0:	mov	r8, #0
   134b4:	cmp	r6, #0
   134b8:	beq	13630 <__assert_fail@plt+0x2654>
   134bc:	ldr	r0, [sp, #80]	; 0x50
   134c0:	mov	r1, #0
   134c4:	cmp	sl, #0
   134c8:	mov	r4, #0
   134cc:	str	r1, [fp, #-72]	; 0xffffffb8
   134d0:	beq	123c4 <__assert_fail@plt+0x13e8>
   134d4:	b	13638 <__assert_fail@plt+0x265c>
   134d8:	ldrb	r1, [r0, #3]
   134dc:	cmp	r1, #56	; 0x38
   134e0:	ldrbeq	r1, [r0, #4]
   134e4:	cmpeq	r1, #48	; 0x30
   134e8:	bne	125bc <__assert_fail@plt+0x15e0>
   134ec:	ldrb	r1, [r0, #5]
   134f0:	cmp	r1, #51	; 0x33
   134f4:	ldrbeq	r1, [r0, #6]
   134f8:	cmpeq	r1, #48	; 0x30
   134fc:	bne	125bc <__assert_fail@plt+0x15e0>
   13500:	ldrb	r0, [r0, #7]
   13504:	cmp	r0, #0
   13508:	movw	r0, #30920	; 0x78c8
   1350c:	movt	r0, #1
   13510:	str	r0, [sp, #68]	; 0x44
   13514:	bne	125bc <__assert_fail@plt+0x15e0>
   13518:	b	125d8 <__assert_fail@plt+0x15fc>
   1351c:	ldrb	r1, [r0, #4]
   13520:	cmp	r1, #48	; 0x30
   13524:	ldrbeq	r1, [r0, #5]
   13528:	cmpeq	r1, #51	; 0x33
   1352c:	bne	126a0 <__assert_fail@plt+0x16c4>
   13530:	ldrb	r1, [r0, #6]
   13534:	cmp	r1, #48	; 0x30
   13538:	ldrbeq	r0, [r0, #7]
   1353c:	cmpeq	r0, #0
   13540:	bne	126a0 <__assert_fail@plt+0x16c4>
   13544:	movw	r0, #30924	; 0x78cc
   13548:	movt	r0, #1
   1354c:	str	r0, [sp, #72]	; 0x48
   13550:	b	126c0 <__assert_fail@plt+0x16e4>
   13554:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13558:	ldr	r2, [sp, #80]	; 0x50
   1355c:	b	13594 <__assert_fail@plt+0x25b8>
   13560:	ldr	ip, [fp, #-84]	; 0xffffffac
   13564:	mov	r2, #1
   13568:	mov	lr, r4
   1356c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13570:	b	13594 <__assert_fail@plt+0x25b8>
   13574:	ldr	r2, [sp, #80]	; 0x50
   13578:	mov	r7, #2
   1357c:	b	13594 <__assert_fail@plt+0x25b8>
   13580:	ldr	r6, [sp, #76]	; 0x4c
   13584:	ldr	ip, [fp, #-84]	; 0xffffffac
   13588:	ldr	lr, [sp, #84]	; 0x54
   1358c:	ldr	r2, [sp, #80]	; 0x50
   13590:	mov	r7, #2
   13594:	mov	r0, #0
   13598:	ldr	r1, [fp, #12]
   1359c:	tst	r2, #1
   135a0:	mov	r2, r7
   135a4:	mov	r3, lr
   135a8:	str	r0, [sp, #8]
   135ac:	ldr	r0, [sp, #68]	; 0x44
   135b0:	movwne	r2, #4
   135b4:	cmp	r7, #2
   135b8:	movne	r2, r7
   135bc:	str	r2, [sp]
   135c0:	mov	r2, ip
   135c4:	bic	r1, r1, #2
   135c8:	str	r0, [sp, #12]
   135cc:	ldr	r0, [sp, #72]	; 0x48
   135d0:	str	r1, [sp, #4]
   135d4:	mov	r1, sl
   135d8:	str	r0, [sp, #16]
   135dc:	mov	r0, r6
   135e0:	bl	12348 <__assert_fail@plt+0x136c>
   135e4:	mov	r9, r0
   135e8:	mov	r0, r9
   135ec:	sub	sp, fp, #28
   135f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135f4:	mov	r0, #5
   135f8:	ldr	r1, [sp, #48]	; 0x30
   135fc:	ldr	r2, [fp, #-84]	; 0xffffffac
   13600:	ldr	r3, [sp, #84]	; 0x54
   13604:	str	r0, [sp]
   13608:	ldr	r0, [fp, #12]
   1360c:	str	r0, [sp, #4]
   13610:	ldr	r0, [fp, #16]
   13614:	str	r0, [sp, #8]
   13618:	ldr	r0, [sp, #68]	; 0x44
   1361c:	str	r0, [sp, #12]
   13620:	ldr	r0, [sp, #72]	; 0x48
   13624:	str	r0, [sp, #16]
   13628:	ldr	r0, [sp, #76]	; 0x4c
   1362c:	b	135e0 <__assert_fail@plt+0x2604>
   13630:	mov	r0, #0
   13634:	str	r0, [fp, #-72]	; 0xffffffb8
   13638:	ldr	r1, [sp, #92]	; 0x5c
   1363c:	cmp	r1, #0
   13640:	beq	13680 <__assert_fail@plt+0x26a4>
   13644:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13648:	ldr	r2, [sp, #76]	; 0x4c
   1364c:	tst	r0, #1
   13650:	bne	13684 <__assert_fail@plt+0x26a8>
   13654:	ldrb	r0, [r1]
   13658:	cmp	r0, #0
   1365c:	beq	13684 <__assert_fail@plt+0x26a8>
   13660:	add	r1, r1, #1
   13664:	cmp	r9, sl
   13668:	strbcc	r0, [r2, r9]
   1366c:	add	r9, r9, #1
   13670:	ldrb	r0, [r1], #1
   13674:	cmp	r0, #0
   13678:	bne	13664 <__assert_fail@plt+0x2688>
   1367c:	b	13684 <__assert_fail@plt+0x26a8>
   13680:	ldr	r2, [sp, #76]	; 0x4c
   13684:	cmp	r9, sl
   13688:	movcc	r0, #0
   1368c:	strbcc	r0, [r2, r9]
   13690:	mov	r0, r9
   13694:	sub	sp, fp, #28
   13698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1369c:	mov	r2, #1
   136a0:	b	1356c <__assert_fail@plt+0x2590>
   136a4:	ldr	r2, [sp, #80]	; 0x50
   136a8:	mov	r7, #5
   136ac:	b	13594 <__assert_fail@plt+0x25b8>
   136b0:	bl	10fc4 <abort@plt>
   136b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136b8:	add	fp, sp, #28
   136bc:	sub	sp, sp, #28
   136c0:	movw	r5, #33120	; 0x8160
   136c4:	cmp	r2, #0
   136c8:	mov	r4, r1
   136cc:	mov	r7, r0
   136d0:	str	r0, [sp, #20]
   136d4:	movt	r5, #2
   136d8:	movne	r5, r2
   136dc:	bl	10f10 <__errno_location@plt>
   136e0:	mov	sl, r0
   136e4:	ldm	r5, {r0, r1}
   136e8:	ldr	r2, [r5, #40]	; 0x28
   136ec:	ldr	r3, [r5, #44]	; 0x2c
   136f0:	add	r9, r5, #8
   136f4:	ldr	r6, [sl]
   136f8:	orr	r8, r1, #1
   136fc:	mov	r1, #0
   13700:	str	r6, [sp, #24]
   13704:	stm	sp, {r0, r8, r9}
   13708:	str	r2, [sp, #12]
   1370c:	str	r3, [sp, #16]
   13710:	mov	r0, #0
   13714:	mov	r2, r7
   13718:	mov	r3, r4
   1371c:	mov	r6, r4
   13720:	bl	12348 <__assert_fail@plt+0x136c>
   13724:	add	r7, r0, #1
   13728:	mov	r0, r7
   1372c:	bl	14790 <__assert_fail@plt+0x37b4>
   13730:	mov	r4, r0
   13734:	ldr	r0, [r5]
   13738:	ldr	r2, [r5, #44]	; 0x2c
   1373c:	ldr	r1, [r5, #40]	; 0x28
   13740:	mov	r3, r6
   13744:	stm	sp, {r0, r8, r9}
   13748:	str	r2, [sp, #16]
   1374c:	str	r1, [sp, #12]
   13750:	mov	r0, r4
   13754:	mov	r1, r7
   13758:	ldr	r2, [sp, #20]
   1375c:	bl	12348 <__assert_fail@plt+0x136c>
   13760:	ldr	r0, [sp, #24]
   13764:	str	r0, [sl]
   13768:	mov	r0, r4
   1376c:	sub	sp, fp, #28
   13770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13778:	add	fp, sp, #28
   1377c:	sub	sp, sp, #36	; 0x24
   13780:	movw	r8, #33120	; 0x8160
   13784:	cmp	r3, #0
   13788:	mov	r4, r2
   1378c:	str	r2, [sp, #24]
   13790:	mov	r5, r1
   13794:	mov	r6, r0
   13798:	str	r0, [sp, #20]
   1379c:	movt	r8, #2
   137a0:	movne	r8, r3
   137a4:	bl	10f10 <__errno_location@plt>
   137a8:	str	r0, [sp, #28]
   137ac:	cmp	r4, #0
   137b0:	add	sl, r8, #8
   137b4:	ldm	r8, {r3, r9}
   137b8:	ldr	r7, [r0]
   137bc:	ldr	r1, [r8, #40]	; 0x28
   137c0:	ldr	r2, [r8, #44]	; 0x2c
   137c4:	mov	r0, #0
   137c8:	orreq	r9, r9, #1
   137cc:	str	r7, [sp, #32]
   137d0:	mov	r7, r5
   137d4:	stm	sp, {r3, r9, sl}
   137d8:	str	r1, [sp, #12]
   137dc:	str	r2, [sp, #16]
   137e0:	mov	r1, #0
   137e4:	mov	r2, r6
   137e8:	mov	r3, r5
   137ec:	bl	12348 <__assert_fail@plt+0x136c>
   137f0:	add	r4, r0, #1
   137f4:	mov	r5, r0
   137f8:	mov	r0, r4
   137fc:	bl	14790 <__assert_fail@plt+0x37b4>
   13800:	mov	r6, r0
   13804:	ldr	r0, [r8]
   13808:	ldr	r2, [r8, #44]	; 0x2c
   1380c:	ldr	r1, [r8, #40]	; 0x28
   13810:	mov	r3, r7
   13814:	stm	sp, {r0, r9, sl}
   13818:	str	r2, [sp, #16]
   1381c:	str	r1, [sp, #12]
   13820:	mov	r0, r6
   13824:	mov	r1, r4
   13828:	ldr	r2, [sp, #20]
   1382c:	bl	12348 <__assert_fail@plt+0x136c>
   13830:	ldr	r0, [sp, #24]
   13834:	ldr	r1, [sp, #32]
   13838:	ldr	r2, [sp, #28]
   1383c:	cmp	r0, #0
   13840:	str	r1, [r2]
   13844:	strne	r5, [r0]
   13848:	mov	r0, r6
   1384c:	sub	sp, fp, #28
   13850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13854:	push	{r4, r5, r6, r7, fp, lr}
   13858:	add	fp, sp, #16
   1385c:	movw	r4, #33048	; 0x8118
   13860:	movt	r4, #2
   13864:	ldrd	r6, [r4]
   13868:	cmp	r7, #2
   1386c:	blt	13898 <__assert_fail@plt+0x28bc>
   13870:	add	r5, r6, #12
   13874:	mov	r7, #0
   13878:	ldr	r0, [r5, r7, lsl #3]
   1387c:	bl	169d4 <__assert_fail@plt+0x59f8>
   13880:	ldr	r1, [r4, #4]
   13884:	add	r2, r7, #2
   13888:	add	r0, r7, #1
   1388c:	mov	r7, r0
   13890:	cmp	r2, r1
   13894:	blt	13878 <__assert_fail@plt+0x289c>
   13898:	ldr	r0, [r6, #4]
   1389c:	movw	r5, #33168	; 0x8190
   138a0:	movt	r5, #2
   138a4:	cmp	r0, r5
   138a8:	beq	138bc <__assert_fail@plt+0x28e0>
   138ac:	bl	169d4 <__assert_fail@plt+0x59f8>
   138b0:	mov	r0, #256	; 0x100
   138b4:	str	r0, [r4, #8]
   138b8:	str	r5, [r4, #12]
   138bc:	add	r5, r4, #8
   138c0:	cmp	r6, r5
   138c4:	beq	138d4 <__assert_fail@plt+0x28f8>
   138c8:	mov	r0, r6
   138cc:	bl	169d4 <__assert_fail@plt+0x59f8>
   138d0:	str	r5, [r4]
   138d4:	mov	r0, #1
   138d8:	str	r0, [r4, #4]
   138dc:	pop	{r4, r5, r6, r7, fp, pc}
   138e0:	movw	r3, #33120	; 0x8160
   138e4:	mvn	r2, #0
   138e8:	movt	r3, #2
   138ec:	b	138f0 <__assert_fail@plt+0x2914>
   138f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f4:	add	fp, sp, #28
   138f8:	sub	sp, sp, #44	; 0x2c
   138fc:	mov	r7, r3
   13900:	str	r2, [sp, #36]	; 0x24
   13904:	str	r1, [sp, #32]
   13908:	mov	r5, r0
   1390c:	bl	10f10 <__errno_location@plt>
   13910:	cmp	r5, #0
   13914:	blt	13a78 <__assert_fail@plt+0x2a9c>
   13918:	cmn	r5, #-2147483647	; 0x80000001
   1391c:	beq	13a78 <__assert_fail@plt+0x2a9c>
   13920:	movw	r8, #33048	; 0x8118
   13924:	mov	r4, r0
   13928:	movt	r8, #2
   1392c:	ldr	r6, [r8]
   13930:	ldr	r1, [r8, #4]
   13934:	ldr	r0, [r0]
   13938:	str	r4, [sp, #28]
   1393c:	cmp	r1, r5
   13940:	str	r0, [sp, #24]
   13944:	ble	13950 <__assert_fail@plt+0x2974>
   13948:	mov	sl, r6
   1394c:	b	139b4 <__assert_fail@plt+0x29d8>
   13950:	mov	r0, #8
   13954:	add	r9, r8, #8
   13958:	add	r2, r5, #1
   1395c:	str	r1, [fp, #-32]	; 0xffffffe0
   13960:	mvn	r3, #-2147483648	; 0x80000000
   13964:	str	r0, [sp]
   13968:	subs	r0, r6, r9
   1396c:	sub	r2, r2, r1
   13970:	sub	r1, fp, #32
   13974:	movne	r0, r6
   13978:	bl	14990 <__assert_fail@plt+0x39b4>
   1397c:	str	r0, [r8]
   13980:	cmp	r6, r9
   13984:	mov	sl, r0
   13988:	ldrdeq	r0, [r8, #8]
   1398c:	stmeq	sl, {r0, r1}
   13990:	ldr	r1, [r8, #4]
   13994:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13998:	add	r0, sl, r1, lsl #3
   1399c:	sub	r1, r2, r1
   139a0:	lsl	r2, r1, #3
   139a4:	mov	r1, #0
   139a8:	bl	10f28 <memset@plt>
   139ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   139b0:	str	r0, [r8, #4]
   139b4:	mov	r9, sl
   139b8:	ldr	r6, [r9, r5, lsl #3]!
   139bc:	ldr	r4, [r9, #4]!
   139c0:	ldm	r7, {r0, r1}
   139c4:	ldr	r2, [r7, #40]	; 0x28
   139c8:	ldr	r3, [r7, #44]	; 0x2c
   139cc:	orr	r8, r1, #1
   139d0:	add	r1, r7, #8
   139d4:	stm	sp, {r0, r8}
   139d8:	add	r0, sp, #8
   139dc:	str	r1, [sp, #20]
   139e0:	stm	r0, {r1, r2, r3}
   139e4:	mov	r0, r4
   139e8:	mov	r1, r6
   139ec:	ldr	r2, [sp, #32]
   139f0:	ldr	r3, [sp, #36]	; 0x24
   139f4:	bl	12348 <__assert_fail@plt+0x136c>
   139f8:	cmp	r6, r0
   139fc:	bhi	13a60 <__assert_fail@plt+0x2a84>
   13a00:	add	r6, r0, #1
   13a04:	movw	r0, #33168	; 0x8190
   13a08:	movt	r0, #2
   13a0c:	str	r6, [sl, r5, lsl #3]
   13a10:	cmp	r4, r0
   13a14:	beq	13a20 <__assert_fail@plt+0x2a44>
   13a18:	mov	r0, r4
   13a1c:	bl	169d4 <__assert_fail@plt+0x59f8>
   13a20:	mov	r0, r6
   13a24:	bl	14790 <__assert_fail@plt+0x37b4>
   13a28:	str	r0, [r9]
   13a2c:	mov	r4, r0
   13a30:	add	r3, sp, #8
   13a34:	ldr	r0, [r7]
   13a38:	ldr	r1, [r7, #40]	; 0x28
   13a3c:	ldr	r2, [r7, #44]	; 0x2c
   13a40:	stm	sp, {r0, r8}
   13a44:	ldr	r0, [sp, #20]
   13a48:	stm	r3, {r0, r1, r2}
   13a4c:	mov	r0, r4
   13a50:	mov	r1, r6
   13a54:	ldr	r2, [sp, #32]
   13a58:	ldr	r3, [sp, #36]	; 0x24
   13a5c:	bl	12348 <__assert_fail@plt+0x136c>
   13a60:	ldr	r1, [sp, #24]
   13a64:	ldr	r0, [sp, #28]
   13a68:	str	r1, [r0]
   13a6c:	mov	r0, r4
   13a70:	sub	sp, fp, #28
   13a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a78:	bl	10fc4 <abort@plt>
   13a7c:	movw	r3, #33120	; 0x8160
   13a80:	movt	r3, #2
   13a84:	b	138f0 <__assert_fail@plt+0x2914>
   13a88:	movw	r3, #33120	; 0x8160
   13a8c:	mov	r1, r0
   13a90:	mov	r0, #0
   13a94:	mvn	r2, #0
   13a98:	movt	r3, #2
   13a9c:	b	138f0 <__assert_fail@plt+0x2914>
   13aa0:	movw	r3, #33120	; 0x8160
   13aa4:	mov	r2, r1
   13aa8:	mov	r1, r0
   13aac:	mov	r0, #0
   13ab0:	movt	r3, #2
   13ab4:	b	138f0 <__assert_fail@plt+0x2914>
   13ab8:	push	{fp, lr}
   13abc:	mov	fp, sp
   13ac0:	sub	sp, sp, #48	; 0x30
   13ac4:	vmov.i32	q8, #0	; 0x00000000
   13ac8:	mov	ip, #32
   13acc:	mov	r3, sp
   13ad0:	mov	lr, r2
   13ad4:	cmp	r1, #10
   13ad8:	add	r2, r3, #16
   13adc:	vst1.64	{d16-d17}, [r3], ip
   13ae0:	vst1.64	{d16-d17}, [r3]
   13ae4:	vst1.64	{d16-d17}, [r2]
   13ae8:	beq	13b08 <__assert_fail@plt+0x2b2c>
   13aec:	str	r1, [sp]
   13af0:	mov	r3, sp
   13af4:	mov	r1, lr
   13af8:	mvn	r2, #0
   13afc:	bl	138f0 <__assert_fail@plt+0x2914>
   13b00:	mov	sp, fp
   13b04:	pop	{fp, pc}
   13b08:	bl	10fc4 <abort@plt>
   13b0c:	push	{r4, sl, fp, lr}
   13b10:	add	fp, sp, #8
   13b14:	sub	sp, sp, #48	; 0x30
   13b18:	mov	ip, r3
   13b1c:	mov	r3, sp
   13b20:	vmov.i32	q8, #0	; 0x00000000
   13b24:	mov	lr, #32
   13b28:	cmp	r1, #10
   13b2c:	add	r4, r3, #16
   13b30:	vst1.64	{d16-d17}, [r3], lr
   13b34:	vst1.64	{d16-d17}, [r3]
   13b38:	vst1.64	{d16-d17}, [r4]
   13b3c:	beq	13b5c <__assert_fail@plt+0x2b80>
   13b40:	str	r1, [sp]
   13b44:	mov	r1, r2
   13b48:	mov	r3, sp
   13b4c:	mov	r2, ip
   13b50:	bl	138f0 <__assert_fail@plt+0x2914>
   13b54:	sub	sp, fp, #8
   13b58:	pop	{r4, sl, fp, pc}
   13b5c:	bl	10fc4 <abort@plt>
   13b60:	push	{fp, lr}
   13b64:	mov	fp, sp
   13b68:	sub	sp, sp, #48	; 0x30
   13b6c:	mov	r3, sp
   13b70:	vmov.i32	q8, #0	; 0x00000000
   13b74:	mov	ip, #32
   13b78:	cmp	r0, #10
   13b7c:	add	r2, r3, #16
   13b80:	vst1.64	{d16-d17}, [r3], ip
   13b84:	vst1.64	{d16-d17}, [r3]
   13b88:	vst1.64	{d16-d17}, [r2]
   13b8c:	beq	13bac <__assert_fail@plt+0x2bd0>
   13b90:	str	r0, [sp]
   13b94:	mov	r3, sp
   13b98:	mov	r0, #0
   13b9c:	mvn	r2, #0
   13ba0:	bl	138f0 <__assert_fail@plt+0x2914>
   13ba4:	mov	sp, fp
   13ba8:	pop	{fp, pc}
   13bac:	bl	10fc4 <abort@plt>
   13bb0:	push	{fp, lr}
   13bb4:	mov	fp, sp
   13bb8:	sub	sp, sp, #48	; 0x30
   13bbc:	mov	r3, sp
   13bc0:	vmov.i32	q8, #0	; 0x00000000
   13bc4:	mov	ip, #32
   13bc8:	cmp	r0, #10
   13bcc:	add	lr, r3, #16
   13bd0:	vst1.64	{d16-d17}, [r3], ip
   13bd4:	vst1.64	{d16-d17}, [r3]
   13bd8:	vst1.64	{d16-d17}, [lr]
   13bdc:	beq	13bf8 <__assert_fail@plt+0x2c1c>
   13be0:	str	r0, [sp]
   13be4:	mov	r3, sp
   13be8:	mov	r0, #0
   13bec:	bl	138f0 <__assert_fail@plt+0x2914>
   13bf0:	mov	sp, fp
   13bf4:	pop	{fp, pc}
   13bf8:	bl	10fc4 <abort@plt>
   13bfc:	push	{r4, sl, fp, lr}
   13c00:	add	fp, sp, #8
   13c04:	sub	sp, sp, #48	; 0x30
   13c08:	mov	lr, r0
   13c0c:	movw	r0, #33120	; 0x8160
   13c10:	mov	r3, #32
   13c14:	mov	ip, r1
   13c18:	mov	r4, #1
   13c1c:	movt	r0, #2
   13c20:	add	r1, r0, #16
   13c24:	vld1.64	{d16-d17}, [r0], r3
   13c28:	mov	r3, sp
   13c2c:	vld1.64	{d18-d19}, [r1]
   13c30:	add	r1, r3, #16
   13c34:	vld1.64	{d20-d21}, [r0]
   13c38:	add	r0, r3, #32
   13c3c:	vst1.64	{d18-d19}, [r1]
   13c40:	mov	r1, r3
   13c44:	vst1.64	{d20-d21}, [r0]
   13c48:	mov	r0, #28
   13c4c:	and	r0, r0, r2, lsr #3
   13c50:	and	r2, r2, #31
   13c54:	vst1.64	{d16-d17}, [r1], r0
   13c58:	ldr	r0, [r1, #8]
   13c5c:	bic	r4, r4, r0, lsr r2
   13c60:	eor	r0, r0, r4, lsl r2
   13c64:	mov	r2, ip
   13c68:	str	r0, [r1, #8]
   13c6c:	mov	r0, #0
   13c70:	mov	r1, lr
   13c74:	bl	138f0 <__assert_fail@plt+0x2914>
   13c78:	sub	sp, fp, #8
   13c7c:	pop	{r4, sl, fp, pc}
   13c80:	push	{fp, lr}
   13c84:	mov	fp, sp
   13c88:	sub	sp, sp, #48	; 0x30
   13c8c:	mov	ip, r0
   13c90:	movw	r0, #33120	; 0x8160
   13c94:	mov	r3, #32
   13c98:	movt	r0, #2
   13c9c:	add	r2, r0, #16
   13ca0:	vld1.64	{d16-d17}, [r0], r3
   13ca4:	mov	r3, sp
   13ca8:	vld1.64	{d18-d19}, [r2]
   13cac:	add	r2, r3, #16
   13cb0:	vld1.64	{d20-d21}, [r0]
   13cb4:	add	r0, r3, #32
   13cb8:	vst1.64	{d18-d19}, [r2]
   13cbc:	mov	r2, r3
   13cc0:	vst1.64	{d20-d21}, [r0]
   13cc4:	mov	r0, #28
   13cc8:	and	r0, r0, r1, lsr #3
   13ccc:	and	r1, r1, #31
   13cd0:	vst1.64	{d16-d17}, [r2], r0
   13cd4:	mov	r0, #1
   13cd8:	ldr	lr, [r2, #8]
   13cdc:	bic	r0, r0, lr, lsr r1
   13ce0:	eor	r0, lr, r0, lsl r1
   13ce4:	mov	r1, ip
   13ce8:	str	r0, [r2, #8]
   13cec:	mov	r0, #0
   13cf0:	mvn	r2, #0
   13cf4:	bl	138f0 <__assert_fail@plt+0x2914>
   13cf8:	mov	sp, fp
   13cfc:	pop	{fp, pc}
   13d00:	push	{fp, lr}
   13d04:	mov	fp, sp
   13d08:	sub	sp, sp, #48	; 0x30
   13d0c:	movw	r2, #33120	; 0x8160
   13d10:	mov	r3, #32
   13d14:	mov	r1, r0
   13d18:	movt	r2, #2
   13d1c:	add	r0, r2, #16
   13d20:	vld1.64	{d16-d17}, [r2], r3
   13d24:	mov	r3, sp
   13d28:	vld1.64	{d18-d19}, [r0]
   13d2c:	add	r0, r3, #16
   13d30:	vld1.64	{d20-d21}, [r2]
   13d34:	mov	r2, r3
   13d38:	vst1.64	{d18-d19}, [r0]
   13d3c:	add	r0, r3, #32
   13d40:	vst1.64	{d20-d21}, [r0]
   13d44:	mov	r0, #12
   13d48:	vst1.64	{d16-d17}, [r2], r0
   13d4c:	ldr	r0, [r2]
   13d50:	orr	r0, r0, #67108864	; 0x4000000
   13d54:	str	r0, [r2]
   13d58:	mov	r0, #0
   13d5c:	mvn	r2, #0
   13d60:	bl	138f0 <__assert_fail@plt+0x2914>
   13d64:	mov	sp, fp
   13d68:	pop	{fp, pc}
   13d6c:	push	{fp, lr}
   13d70:	mov	fp, sp
   13d74:	sub	sp, sp, #48	; 0x30
   13d78:	mov	ip, r1
   13d7c:	mov	r1, r0
   13d80:	movw	r0, #33120	; 0x8160
   13d84:	mov	r3, #32
   13d88:	movt	r0, #2
   13d8c:	add	r2, r0, #16
   13d90:	vld1.64	{d16-d17}, [r0], r3
   13d94:	mov	r3, sp
   13d98:	vld1.64	{d18-d19}, [r2]
   13d9c:	add	r2, r3, #16
   13da0:	vld1.64	{d20-d21}, [r0]
   13da4:	add	r0, r3, #32
   13da8:	vst1.64	{d18-d19}, [r2]
   13dac:	mov	r2, r3
   13db0:	vst1.64	{d20-d21}, [r0]
   13db4:	mov	r0, #12
   13db8:	vst1.64	{d16-d17}, [r2], r0
   13dbc:	ldr	r0, [r2]
   13dc0:	orr	r0, r0, #67108864	; 0x4000000
   13dc4:	str	r0, [r2]
   13dc8:	mov	r0, #0
   13dcc:	mov	r2, ip
   13dd0:	bl	138f0 <__assert_fail@plt+0x2914>
   13dd4:	mov	sp, fp
   13dd8:	pop	{fp, pc}
   13ddc:	push	{r4, sl, fp, lr}
   13de0:	add	fp, sp, #8
   13de4:	sub	sp, sp, #96	; 0x60
   13de8:	mov	ip, r2
   13dec:	mov	r2, sp
   13df0:	vmov.i32	q8, #0	; 0x00000000
   13df4:	mov	r4, #28
   13df8:	cmp	r1, #10
   13dfc:	mov	r3, r2
   13e00:	add	lr, r2, #16
   13e04:	vst1.64	{d16-d17}, [r3], r4
   13e08:	vst1.64	{d16-d17}, [lr]
   13e0c:	vst1.32	{d16-d17}, [r3]
   13e10:	beq	13e60 <__assert_fail@plt+0x2e84>
   13e14:	vld1.64	{d16-d17}, [r2], r4
   13e18:	vld1.64	{d18-d19}, [lr]
   13e1c:	add	r3, sp, #48	; 0x30
   13e20:	add	r4, r3, #4
   13e24:	vld1.32	{d20-d21}, [r2]
   13e28:	add	r2, r3, #20
   13e2c:	vst1.32	{d16-d17}, [r4]
   13e30:	vst1.32	{d18-d19}, [r2]
   13e34:	add	r2, r3, #32
   13e38:	vst1.32	{d20-d21}, [r2]
   13e3c:	str	r1, [sp, #48]	; 0x30
   13e40:	mvn	r2, #0
   13e44:	ldr	r1, [sp, #60]	; 0x3c
   13e48:	orr	r1, r1, #67108864	; 0x4000000
   13e4c:	str	r1, [sp, #60]	; 0x3c
   13e50:	mov	r1, ip
   13e54:	bl	138f0 <__assert_fail@plt+0x2914>
   13e58:	sub	sp, fp, #8
   13e5c:	pop	{r4, sl, fp, pc}
   13e60:	bl	10fc4 <abort@plt>
   13e64:	push	{r4, r5, fp, lr}
   13e68:	add	fp, sp, #8
   13e6c:	sub	sp, sp, #48	; 0x30
   13e70:	mov	ip, r3
   13e74:	movw	r3, #33120	; 0x8160
   13e78:	mov	lr, #32
   13e7c:	cmp	r1, #0
   13e80:	mov	r5, sp
   13e84:	movt	r3, #2
   13e88:	cmpne	r2, #0
   13e8c:	add	r4, r3, #16
   13e90:	vld1.64	{d16-d17}, [r3], lr
   13e94:	vld1.64	{d18-d19}, [r4]
   13e98:	add	r4, r5, #16
   13e9c:	vld1.64	{d20-d21}, [r3]
   13ea0:	vst1.64	{d16-d17}, [r5], lr
   13ea4:	mov	r3, #10
   13ea8:	vst1.64	{d18-d19}, [r4]
   13eac:	vst1.64	{d20-d21}, [r5]
   13eb0:	str	r3, [sp]
   13eb4:	bne	13ebc <__assert_fail@plt+0x2ee0>
   13eb8:	bl	10fc4 <abort@plt>
   13ebc:	str	r2, [sp, #44]	; 0x2c
   13ec0:	str	r1, [sp, #40]	; 0x28
   13ec4:	mov	r3, sp
   13ec8:	mov	r1, ip
   13ecc:	mvn	r2, #0
   13ed0:	bl	138f0 <__assert_fail@plt+0x2914>
   13ed4:	sub	sp, fp, #8
   13ed8:	pop	{r4, r5, fp, pc}
   13edc:	push	{r4, r5, fp, lr}
   13ee0:	add	fp, sp, #8
   13ee4:	sub	sp, sp, #48	; 0x30
   13ee8:	mov	lr, r3
   13eec:	movw	r3, #33120	; 0x8160
   13ef0:	mov	ip, #32
   13ef4:	cmp	r1, #0
   13ef8:	mov	r5, sp
   13efc:	movt	r3, #2
   13f00:	cmpne	r2, #0
   13f04:	add	r4, r3, #16
   13f08:	vld1.64	{d16-d17}, [r3], ip
   13f0c:	vld1.64	{d18-d19}, [r4]
   13f10:	add	r4, r5, #16
   13f14:	vld1.64	{d20-d21}, [r3]
   13f18:	vst1.64	{d16-d17}, [r5], ip
   13f1c:	mov	r3, #10
   13f20:	vst1.64	{d18-d19}, [r4]
   13f24:	vst1.64	{d20-d21}, [r5]
   13f28:	str	r3, [sp]
   13f2c:	bne	13f34 <__assert_fail@plt+0x2f58>
   13f30:	bl	10fc4 <abort@plt>
   13f34:	ldr	ip, [fp, #8]
   13f38:	str	r2, [sp, #44]	; 0x2c
   13f3c:	str	r1, [sp, #40]	; 0x28
   13f40:	mov	r3, sp
   13f44:	mov	r1, lr
   13f48:	mov	r2, ip
   13f4c:	bl	138f0 <__assert_fail@plt+0x2914>
   13f50:	sub	sp, fp, #8
   13f54:	pop	{r4, r5, fp, pc}
   13f58:	push	{r4, sl, fp, lr}
   13f5c:	add	fp, sp, #8
   13f60:	sub	sp, sp, #48	; 0x30
   13f64:	mov	ip, r2
   13f68:	movw	r2, #33120	; 0x8160
   13f6c:	mov	lr, #32
   13f70:	cmp	r0, #0
   13f74:	mov	r4, sp
   13f78:	movt	r2, #2
   13f7c:	cmpne	r1, #0
   13f80:	add	r3, r2, #16
   13f84:	vld1.64	{d16-d17}, [r2], lr
   13f88:	vld1.64	{d18-d19}, [r3]
   13f8c:	add	r3, r4, #16
   13f90:	vld1.64	{d20-d21}, [r2]
   13f94:	vst1.64	{d16-d17}, [r4], lr
   13f98:	mov	r2, #10
   13f9c:	vst1.64	{d18-d19}, [r3]
   13fa0:	vst1.64	{d20-d21}, [r4]
   13fa4:	str	r2, [sp]
   13fa8:	bne	13fb0 <__assert_fail@plt+0x2fd4>
   13fac:	bl	10fc4 <abort@plt>
   13fb0:	str	r1, [sp, #44]	; 0x2c
   13fb4:	str	r0, [sp, #40]	; 0x28
   13fb8:	mov	r3, sp
   13fbc:	mov	r0, #0
   13fc0:	mov	r1, ip
   13fc4:	mvn	r2, #0
   13fc8:	bl	138f0 <__assert_fail@plt+0x2914>
   13fcc:	sub	sp, fp, #8
   13fd0:	pop	{r4, sl, fp, pc}
   13fd4:	push	{r4, r5, fp, lr}
   13fd8:	add	fp, sp, #8
   13fdc:	sub	sp, sp, #48	; 0x30
   13fe0:	mov	lr, r2
   13fe4:	movw	r2, #33120	; 0x8160
   13fe8:	mov	ip, r3
   13fec:	mov	r3, #32
   13ff0:	cmp	r0, #0
   13ff4:	mov	r5, sp
   13ff8:	movt	r2, #2
   13ffc:	cmpne	r1, #0
   14000:	add	r4, r2, #16
   14004:	vld1.64	{d16-d17}, [r2], r3
   14008:	vld1.64	{d18-d19}, [r4]
   1400c:	add	r4, r5, #16
   14010:	vld1.64	{d20-d21}, [r2]
   14014:	vst1.64	{d16-d17}, [r5], r3
   14018:	mov	r2, #10
   1401c:	vst1.64	{d18-d19}, [r4]
   14020:	vst1.64	{d20-d21}, [r5]
   14024:	str	r2, [sp]
   14028:	bne	14030 <__assert_fail@plt+0x3054>
   1402c:	bl	10fc4 <abort@plt>
   14030:	str	r1, [sp, #44]	; 0x2c
   14034:	str	r0, [sp, #40]	; 0x28
   14038:	mov	r3, sp
   1403c:	mov	r0, #0
   14040:	mov	r1, lr
   14044:	mov	r2, ip
   14048:	bl	138f0 <__assert_fail@plt+0x2914>
   1404c:	sub	sp, fp, #8
   14050:	pop	{r4, r5, fp, pc}
   14054:	movw	r3, #33000	; 0x80e8
   14058:	movt	r3, #2
   1405c:	b	138f0 <__assert_fail@plt+0x2914>
   14060:	movw	r3, #33000	; 0x80e8
   14064:	mov	r2, r1
   14068:	mov	r1, r0
   1406c:	mov	r0, #0
   14070:	movt	r3, #2
   14074:	b	138f0 <__assert_fail@plt+0x2914>
   14078:	movw	r3, #33000	; 0x80e8
   1407c:	mvn	r2, #0
   14080:	movt	r3, #2
   14084:	b	138f0 <__assert_fail@plt+0x2914>
   14088:	movw	r3, #33000	; 0x80e8
   1408c:	mov	r1, r0
   14090:	mov	r0, #0
   14094:	mvn	r2, #0
   14098:	movt	r3, #2
   1409c:	b	138f0 <__assert_fail@plt+0x2914>
   140a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140a4:	add	fp, sp, #24
   140a8:	sub	sp, sp, #32
   140ac:	ldr	r6, [fp, #12]
   140b0:	ldr	r7, [fp, #8]
   140b4:	mov	r4, r2
   140b8:	mov	r8, r0
   140bc:	cmp	r1, #0
   140c0:	beq	140e8 <__assert_fail@plt+0x310c>
   140c4:	movw	r2, #31012	; 0x7924
   140c8:	mov	r5, r1
   140cc:	str	r3, [sp, #4]
   140d0:	str	r4, [sp]
   140d4:	mov	r0, r8
   140d8:	mov	r1, #1
   140dc:	movt	r2, #1
   140e0:	mov	r3, r5
   140e4:	b	14100 <__assert_fail@plt+0x3124>
   140e8:	movw	r2, #31024	; 0x7930
   140ec:	str	r3, [sp]
   140f0:	mov	r0, r8
   140f4:	mov	r1, #1
   140f8:	mov	r3, r4
   140fc:	movt	r2, #1
   14100:	bl	10f4c <__fprintf_chk@plt>
   14104:	movw	r1, #31031	; 0x7937
   14108:	mov	r0, #0
   1410c:	mov	r2, #5
   14110:	movt	r1, #1
   14114:	bl	10e14 <dcgettext@plt>
   14118:	movw	r2, #31749	; 0x7c05
   1411c:	mov	r3, r0
   14120:	movw	r0, #2022	; 0x7e6
   14124:	mov	r1, #1
   14128:	str	r0, [sp]
   1412c:	movt	r2, #1
   14130:	mov	r0, r8
   14134:	bl	10f4c <__fprintf_chk@plt>
   14138:	movw	r4, #30355	; 0x7693
   1413c:	mov	r1, r8
   14140:	movt	r4, #1
   14144:	mov	r0, r4
   14148:	bl	10d9c <fputs_unlocked@plt>
   1414c:	movw	r1, #31035	; 0x793b
   14150:	mov	r0, #0
   14154:	mov	r2, #5
   14158:	movt	r1, #1
   1415c:	bl	10e14 <dcgettext@plt>
   14160:	movw	r3, #31206	; 0x79e6
   14164:	mov	r2, r0
   14168:	mov	r0, r8
   1416c:	mov	r1, #1
   14170:	movt	r3, #1
   14174:	bl	10f4c <__fprintf_chk@plt>
   14178:	mov	r0, r4
   1417c:	mov	r1, r8
   14180:	bl	10d9c <fputs_unlocked@plt>
   14184:	cmp	r6, #9
   14188:	bhi	141c4 <__assert_fail@plt+0x31e8>
   1418c:	add	r0, pc, #0
   14190:	ldr	pc, [r0, r6, lsl #2]
   14194:			; <UNDEFINED> instruction: 0x000141bc
   14198:	ldrdeq	r4, [r1], -r0
   1419c:	andeq	r4, r1, r0, lsl #4
   141a0:	andeq	r4, r1, r8, lsr #4
   141a4:	andeq	r4, r1, r0, asr r2
   141a8:	andeq	r4, r1, r8, ror r2
   141ac:	andeq	r4, r1, r0, lsr #5
   141b0:	ldrdeq	r4, [r1], -r8
   141b4:	andeq	r4, r1, r0, lsl #7
   141b8:	andeq	r4, r1, r8, lsr #6
   141bc:	sub	sp, fp, #24
   141c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141c4:	movw	r1, #31559	; 0x7b47
   141c8:	movt	r1, #1
   141cc:	b	14330 <__assert_fail@plt+0x3354>
   141d0:	movw	r1, #31240	; 0x7a08
   141d4:	mov	r0, #0
   141d8:	mov	r2, #5
   141dc:	movt	r1, #1
   141e0:	bl	10e14 <dcgettext@plt>
   141e4:	ldr	r3, [r7]
   141e8:	mov	r2, r0
   141ec:	mov	r0, r8
   141f0:	mov	r1, #1
   141f4:	sub	sp, fp, #24
   141f8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   141fc:	b	10f4c <__fprintf_chk@plt>
   14200:	movw	r1, #31256	; 0x7a18
   14204:	mov	r0, #0
   14208:	mov	r2, #5
   1420c:	movt	r1, #1
   14210:	bl	10e14 <dcgettext@plt>
   14214:	mov	r2, r0
   14218:	ldr	r3, [r7]
   1421c:	ldr	r0, [r7, #4]
   14220:	str	r0, [sp]
   14224:	b	14314 <__assert_fail@plt+0x3338>
   14228:	movw	r1, #31279	; 0x7a2f
   1422c:	mov	r0, #0
   14230:	mov	r2, #5
   14234:	movt	r1, #1
   14238:	bl	10e14 <dcgettext@plt>
   1423c:	ldr	r3, [r7]
   14240:	mov	r2, r0
   14244:	ldmib	r7, {r0, r1}
   14248:	stm	sp, {r0, r1}
   1424c:	b	14314 <__assert_fail@plt+0x3338>
   14250:	movw	r1, #31307	; 0x7a4b
   14254:	mov	r0, #0
   14258:	mov	r2, #5
   1425c:	movt	r1, #1
   14260:	bl	10e14 <dcgettext@plt>
   14264:	ldr	r3, [r7]
   14268:	mov	r2, r0
   1426c:	ldmib	r7, {r0, r1, r7}
   14270:	stm	sp, {r0, r1, r7}
   14274:	b	14314 <__assert_fail@plt+0x3338>
   14278:	movw	r1, #31339	; 0x7a6b
   1427c:	mov	r0, #0
   14280:	mov	r2, #5
   14284:	movt	r1, #1
   14288:	bl	10e14 <dcgettext@plt>
   1428c:	ldr	r3, [r7]
   14290:	mov	r2, r0
   14294:	ldmib	r7, {r0, r1, r6, r7}
   14298:	stm	sp, {r0, r1, r6, r7}
   1429c:	b	14314 <__assert_fail@plt+0x3338>
   142a0:	movw	r1, #31375	; 0x7a8f
   142a4:	mov	r0, #0
   142a8:	mov	r2, #5
   142ac:	movt	r1, #1
   142b0:	bl	10e14 <dcgettext@plt>
   142b4:	ldr	r3, [r7]
   142b8:	mov	r2, r0
   142bc:	ldmib	r7, {r0, r1, r6}
   142c0:	ldr	r5, [r7, #16]
   142c4:	ldr	r7, [r7, #20]
   142c8:	stm	sp, {r0, r1, r6}
   142cc:	str	r5, [sp, #12]
   142d0:	str	r7, [sp, #16]
   142d4:	b	14314 <__assert_fail@plt+0x3338>
   142d8:	movw	r1, #31415	; 0x7ab7
   142dc:	mov	r0, #0
   142e0:	mov	r2, #5
   142e4:	movt	r1, #1
   142e8:	bl	10e14 <dcgettext@plt>
   142ec:	ldr	r3, [r7]
   142f0:	mov	r2, r0
   142f4:	ldmib	r7, {r0, r1, r6}
   142f8:	ldr	r5, [r7, #16]
   142fc:	ldr	r4, [r7, #20]
   14300:	ldr	r7, [r7, #24]
   14304:	stm	sp, {r0, r1, r6}
   14308:	str	r5, [sp, #12]
   1430c:	str	r4, [sp, #16]
   14310:	str	r7, [sp, #20]
   14314:	mov	r0, r8
   14318:	mov	r1, #1
   1431c:	bl	10f4c <__fprintf_chk@plt>
   14320:	sub	sp, fp, #24
   14324:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14328:	movw	r1, #31507	; 0x7b13
   1432c:	movt	r1, #1
   14330:	mov	r0, #0
   14334:	mov	r2, #5
   14338:	bl	10e14 <dcgettext@plt>
   1433c:	mov	ip, r0
   14340:	ldr	r3, [r7]
   14344:	ldr	r0, [r7, #4]
   14348:	ldr	r1, [r7, #8]
   1434c:	ldr	r6, [r7, #12]
   14350:	ldr	r5, [r7, #16]
   14354:	ldr	r4, [r7, #20]
   14358:	ldr	r2, [r7, #24]
   1435c:	ldr	lr, [r7, #28]
   14360:	ldr	r7, [r7, #32]
   14364:	stm	sp, {r0, r1, r6}
   14368:	str	r5, [sp, #12]
   1436c:	str	r4, [sp, #16]
   14370:	str	r2, [sp, #20]
   14374:	str	lr, [sp, #24]
   14378:	str	r7, [sp, #28]
   1437c:	b	143c4 <__assert_fail@plt+0x33e8>
   14380:	movw	r1, #31459	; 0x7ae3
   14384:	mov	r0, #0
   14388:	mov	r2, #5
   1438c:	movt	r1, #1
   14390:	bl	10e14 <dcgettext@plt>
   14394:	mov	ip, r0
   14398:	ldr	r3, [r7]
   1439c:	ldmib	r7, {r0, r1, r6}
   143a0:	ldr	r5, [r7, #16]
   143a4:	ldr	r4, [r7, #20]
   143a8:	ldr	r2, [r7, #24]
   143ac:	ldr	r7, [r7, #28]
   143b0:	stm	sp, {r0, r1, r6}
   143b4:	str	r5, [sp, #12]
   143b8:	str	r4, [sp, #16]
   143bc:	str	r2, [sp, #20]
   143c0:	str	r7, [sp, #24]
   143c4:	mov	r0, r8
   143c8:	mov	r1, #1
   143cc:	mov	r2, ip
   143d0:	bl	10f4c <__fprintf_chk@plt>
   143d4:	sub	sp, fp, #24
   143d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143dc:	push	{r4, sl, fp, lr}
   143e0:	add	fp, sp, #8
   143e4:	sub	sp, sp, #8
   143e8:	ldr	ip, [fp, #8]
   143ec:	mov	lr, #0
   143f0:	ldr	r4, [ip, lr, lsl #2]
   143f4:	add	lr, lr, #1
   143f8:	cmp	r4, #0
   143fc:	bne	143f0 <__assert_fail@plt+0x3414>
   14400:	sub	r4, lr, #1
   14404:	str	ip, [sp]
   14408:	str	r4, [sp, #4]
   1440c:	bl	140a0 <__assert_fail@plt+0x30c4>
   14410:	sub	sp, fp, #8
   14414:	pop	{r4, sl, fp, pc}
   14418:	push	{fp, lr}
   1441c:	mov	fp, sp
   14420:	sub	sp, sp, #48	; 0x30
   14424:	ldr	ip, [fp, #8]
   14428:	ldr	lr, [ip]
   1442c:	cmp	lr, #0
   14430:	str	lr, [sp, #8]
   14434:	beq	144d0 <__assert_fail@plt+0x34f4>
   14438:	ldr	lr, [ip, #4]
   1443c:	cmp	lr, #0
   14440:	str	lr, [sp, #12]
   14444:	beq	144d8 <__assert_fail@plt+0x34fc>
   14448:	ldr	lr, [ip, #8]
   1444c:	cmp	lr, #0
   14450:	str	lr, [sp, #16]
   14454:	beq	144e0 <__assert_fail@plt+0x3504>
   14458:	ldr	lr, [ip, #12]
   1445c:	cmp	lr, #0
   14460:	str	lr, [sp, #20]
   14464:	beq	144e8 <__assert_fail@plt+0x350c>
   14468:	ldr	lr, [ip, #16]
   1446c:	cmp	lr, #0
   14470:	str	lr, [sp, #24]
   14474:	beq	144f0 <__assert_fail@plt+0x3514>
   14478:	ldr	lr, [ip, #20]
   1447c:	cmp	lr, #0
   14480:	str	lr, [sp, #28]
   14484:	beq	144f8 <__assert_fail@plt+0x351c>
   14488:	ldr	lr, [ip, #24]
   1448c:	cmp	lr, #0
   14490:	str	lr, [sp, #32]
   14494:	beq	14500 <__assert_fail@plt+0x3524>
   14498:	ldr	lr, [ip, #28]
   1449c:	cmp	lr, #0
   144a0:	str	lr, [sp, #36]	; 0x24
   144a4:	beq	14508 <__assert_fail@plt+0x352c>
   144a8:	ldr	lr, [ip, #32]
   144ac:	cmp	lr, #0
   144b0:	str	lr, [sp, #40]	; 0x28
   144b4:	beq	14510 <__assert_fail@plt+0x3534>
   144b8:	ldr	lr, [ip, #36]	; 0x24
   144bc:	mov	ip, #10
   144c0:	cmp	lr, #0
   144c4:	str	lr, [sp, #44]	; 0x2c
   144c8:	movweq	ip, #9
   144cc:	b	14514 <__assert_fail@plt+0x3538>
   144d0:	mov	ip, #0
   144d4:	b	14514 <__assert_fail@plt+0x3538>
   144d8:	mov	ip, #1
   144dc:	b	14514 <__assert_fail@plt+0x3538>
   144e0:	mov	ip, #2
   144e4:	b	14514 <__assert_fail@plt+0x3538>
   144e8:	mov	ip, #3
   144ec:	b	14514 <__assert_fail@plt+0x3538>
   144f0:	mov	ip, #4
   144f4:	b	14514 <__assert_fail@plt+0x3538>
   144f8:	mov	ip, #5
   144fc:	b	14514 <__assert_fail@plt+0x3538>
   14500:	mov	ip, #6
   14504:	b	14514 <__assert_fail@plt+0x3538>
   14508:	mov	ip, #7
   1450c:	b	14514 <__assert_fail@plt+0x3538>
   14510:	mov	ip, #8
   14514:	add	lr, sp, #8
   14518:	str	ip, [sp, #4]
   1451c:	str	lr, [sp]
   14520:	bl	140a0 <__assert_fail@plt+0x30c4>
   14524:	mov	sp, fp
   14528:	pop	{fp, pc}
   1452c:	push	{fp, lr}
   14530:	mov	fp, sp
   14534:	sub	sp, sp, #56	; 0x38
   14538:	add	ip, fp, #8
   1453c:	str	ip, [sp, #12]
   14540:	ldr	lr, [fp, #8]
   14544:	cmp	lr, #0
   14548:	str	lr, [sp, #16]
   1454c:	beq	145e8 <__assert_fail@plt+0x360c>
   14550:	ldr	lr, [ip, #4]
   14554:	cmp	lr, #0
   14558:	str	lr, [sp, #20]
   1455c:	beq	145f0 <__assert_fail@plt+0x3614>
   14560:	ldr	lr, [ip, #8]
   14564:	cmp	lr, #0
   14568:	str	lr, [sp, #24]
   1456c:	beq	145f8 <__assert_fail@plt+0x361c>
   14570:	ldr	lr, [ip, #12]
   14574:	cmp	lr, #0
   14578:	str	lr, [sp, #28]
   1457c:	beq	14600 <__assert_fail@plt+0x3624>
   14580:	ldr	lr, [ip, #16]
   14584:	cmp	lr, #0
   14588:	str	lr, [sp, #32]
   1458c:	beq	14608 <__assert_fail@plt+0x362c>
   14590:	ldr	lr, [ip, #20]
   14594:	cmp	lr, #0
   14598:	str	lr, [sp, #36]	; 0x24
   1459c:	beq	14610 <__assert_fail@plt+0x3634>
   145a0:	ldr	lr, [ip, #24]
   145a4:	cmp	lr, #0
   145a8:	str	lr, [sp, #40]	; 0x28
   145ac:	beq	14618 <__assert_fail@plt+0x363c>
   145b0:	ldr	lr, [ip, #28]
   145b4:	cmp	lr, #0
   145b8:	str	lr, [sp, #44]	; 0x2c
   145bc:	beq	14620 <__assert_fail@plt+0x3644>
   145c0:	ldr	lr, [ip, #32]
   145c4:	cmp	lr, #0
   145c8:	str	lr, [sp, #48]	; 0x30
   145cc:	beq	14628 <__assert_fail@plt+0x364c>
   145d0:	ldr	lr, [ip, #36]	; 0x24
   145d4:	mov	ip, #10
   145d8:	cmp	lr, #0
   145dc:	str	lr, [sp, #52]	; 0x34
   145e0:	movweq	ip, #9
   145e4:	b	1462c <__assert_fail@plt+0x3650>
   145e8:	mov	ip, #0
   145ec:	b	1462c <__assert_fail@plt+0x3650>
   145f0:	mov	ip, #1
   145f4:	b	1462c <__assert_fail@plt+0x3650>
   145f8:	mov	ip, #2
   145fc:	b	1462c <__assert_fail@plt+0x3650>
   14600:	mov	ip, #3
   14604:	b	1462c <__assert_fail@plt+0x3650>
   14608:	mov	ip, #4
   1460c:	b	1462c <__assert_fail@plt+0x3650>
   14610:	mov	ip, #5
   14614:	b	1462c <__assert_fail@plt+0x3650>
   14618:	mov	ip, #6
   1461c:	b	1462c <__assert_fail@plt+0x3650>
   14620:	mov	ip, #7
   14624:	b	1462c <__assert_fail@plt+0x3650>
   14628:	mov	ip, #8
   1462c:	add	lr, sp, #16
   14630:	str	ip, [sp, #4]
   14634:	str	lr, [sp]
   14638:	bl	140a0 <__assert_fail@plt+0x30c4>
   1463c:	mov	sp, fp
   14640:	pop	{fp, pc}
   14644:	push	{fp, lr}
   14648:	mov	fp, sp
   1464c:	movw	r0, #33084	; 0x813c
   14650:	movt	r0, #2
   14654:	ldr	r1, [r0]
   14658:	movw	r0, #30355	; 0x7693
   1465c:	movt	r0, #1
   14660:	bl	10d9c <fputs_unlocked@plt>
   14664:	movw	r1, #31619	; 0x7b83
   14668:	mov	r0, #0
   1466c:	mov	r2, #5
   14670:	movt	r1, #1
   14674:	bl	10e14 <dcgettext@plt>
   14678:	movw	r2, #31639	; 0x7b97
   1467c:	mov	r1, r0
   14680:	mov	r0, #1
   14684:	movt	r2, #1
   14688:	bl	10f34 <__printf_chk@plt>
   1468c:	movw	r1, #31661	; 0x7bad
   14690:	mov	r0, #0
   14694:	mov	r2, #5
   14698:	movt	r1, #1
   1469c:	bl	10e14 <dcgettext@plt>
   146a0:	movw	r2, #29488	; 0x7330
   146a4:	movw	r3, #30164	; 0x75d4
   146a8:	mov	r1, r0
   146ac:	mov	r0, #1
   146b0:	movt	r2, #1
   146b4:	movt	r3, #1
   146b8:	bl	10f34 <__printf_chk@plt>
   146bc:	movw	r1, #31681	; 0x7bc1
   146c0:	mov	r0, #0
   146c4:	mov	r2, #5
   146c8:	movt	r1, #1
   146cc:	bl	10e14 <dcgettext@plt>
   146d0:	movw	r2, #31720	; 0x7be8
   146d4:	mov	r1, r0
   146d8:	mov	r0, #1
   146dc:	movt	r2, #1
   146e0:	pop	{fp, lr}
   146e4:	b	10f34 <__printf_chk@plt>
   146e8:	push	{r4, r5, r6, sl, fp, lr}
   146ec:	add	fp, sp, #16
   146f0:	mov	r4, r2
   146f4:	mov	r5, r1
   146f8:	mov	r6, r0
   146fc:	bl	16b38 <__assert_fail@plt+0x5b5c>
   14700:	cmp	r0, #0
   14704:	popne	{r4, r5, r6, sl, fp, pc}
   14708:	cmp	r6, #0
   1470c:	beq	14720 <__assert_fail@plt+0x3744>
   14710:	cmp	r5, #0
   14714:	cmpne	r4, #0
   14718:	bne	14720 <__assert_fail@plt+0x3744>
   1471c:	pop	{r4, r5, r6, sl, fp, pc}
   14720:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14724:	push	{r4, r5, r6, sl, fp, lr}
   14728:	add	fp, sp, #16
   1472c:	mov	r4, r2
   14730:	mov	r5, r1
   14734:	mov	r6, r0
   14738:	bl	16b38 <__assert_fail@plt+0x5b5c>
   1473c:	cmp	r0, #0
   14740:	popne	{r4, r5, r6, sl, fp, pc}
   14744:	cmp	r6, #0
   14748:	beq	1475c <__assert_fail@plt+0x3780>
   1474c:	cmp	r5, #0
   14750:	cmpne	r4, #0
   14754:	bne	1475c <__assert_fail@plt+0x3780>
   14758:	pop	{r4, r5, r6, sl, fp, pc}
   1475c:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14760:	push	{fp, lr}
   14764:	mov	fp, sp
   14768:	bl	167c8 <__assert_fail@plt+0x57ec>
   1476c:	cmp	r0, #0
   14770:	popne	{fp, pc}
   14774:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14778:	push	{fp, lr}
   1477c:	mov	fp, sp
   14780:	bl	167c8 <__assert_fail@plt+0x57ec>
   14784:	cmp	r0, #0
   14788:	popne	{fp, pc}
   1478c:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14790:	push	{fp, lr}
   14794:	mov	fp, sp
   14798:	bl	167c8 <__assert_fail@plt+0x57ec>
   1479c:	cmp	r0, #0
   147a0:	popne	{fp, pc}
   147a4:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   147a8:	push	{r4, r5, fp, lr}
   147ac:	add	fp, sp, #8
   147b0:	mov	r4, r1
   147b4:	mov	r5, r0
   147b8:	bl	167f8 <__assert_fail@plt+0x581c>
   147bc:	cmp	r0, #0
   147c0:	popne	{r4, r5, fp, pc}
   147c4:	cmp	r5, #0
   147c8:	beq	147d8 <__assert_fail@plt+0x37fc>
   147cc:	cmp	r4, #0
   147d0:	bne	147d8 <__assert_fail@plt+0x37fc>
   147d4:	pop	{r4, r5, fp, pc}
   147d8:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   147dc:	push	{fp, lr}
   147e0:	mov	fp, sp
   147e4:	cmp	r1, #0
   147e8:	orreq	r1, r1, #1
   147ec:	bl	167f8 <__assert_fail@plt+0x581c>
   147f0:	cmp	r0, #0
   147f4:	popne	{fp, pc}
   147f8:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   147fc:	push	{fp, lr}
   14800:	mov	fp, sp
   14804:	clz	r3, r2
   14808:	lsr	ip, r3, #5
   1480c:	clz	r3, r1
   14810:	lsr	r3, r3, #5
   14814:	orrs	r3, r3, ip
   14818:	movwne	r1, #1
   1481c:	movwne	r2, #1
   14820:	bl	16b38 <__assert_fail@plt+0x5b5c>
   14824:	cmp	r0, #0
   14828:	popne	{fp, pc}
   1482c:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14830:	push	{fp, lr}
   14834:	mov	fp, sp
   14838:	mov	r2, r1
   1483c:	mov	r1, r0
   14840:	mov	r0, #0
   14844:	bl	16b38 <__assert_fail@plt+0x5b5c>
   14848:	cmp	r0, #0
   1484c:	popne	{fp, pc}
   14850:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14854:	push	{fp, lr}
   14858:	mov	fp, sp
   1485c:	mov	r2, r1
   14860:	mov	r1, r0
   14864:	clz	r0, r2
   14868:	clz	r3, r1
   1486c:	lsr	r0, r0, #5
   14870:	lsr	r3, r3, #5
   14874:	orrs	r0, r3, r0
   14878:	movwne	r1, #1
   1487c:	movwne	r2, #1
   14880:	mov	r0, #0
   14884:	bl	16b38 <__assert_fail@plt+0x5b5c>
   14888:	cmp	r0, #0
   1488c:	popne	{fp, pc}
   14890:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14894:	push	{r4, r5, r6, sl, fp, lr}
   14898:	add	fp, sp, #16
   1489c:	ldr	r5, [r1]
   148a0:	mov	r4, r1
   148a4:	mov	r6, r0
   148a8:	cmp	r0, #0
   148ac:	beq	148c4 <__assert_fail@plt+0x38e8>
   148b0:	mov	r0, #1
   148b4:	add	r0, r0, r5, lsr #1
   148b8:	adds	r5, r5, r0
   148bc:	bcc	148cc <__assert_fail@plt+0x38f0>
   148c0:	b	14908 <__assert_fail@plt+0x392c>
   148c4:	cmp	r5, #0
   148c8:	movweq	r5, #64	; 0x40
   148cc:	mov	r0, r6
   148d0:	mov	r1, r5
   148d4:	mov	r2, #1
   148d8:	bl	16b38 <__assert_fail@plt+0x5b5c>
   148dc:	cmp	r5, #0
   148e0:	mov	r1, r5
   148e4:	movwne	r1, #1
   148e8:	cmp	r0, #0
   148ec:	bne	14900 <__assert_fail@plt+0x3924>
   148f0:	clz	r2, r6
   148f4:	lsr	r2, r2, #5
   148f8:	orrs	r1, r2, r1
   148fc:	bne	14908 <__assert_fail@plt+0x392c>
   14900:	str	r5, [r4]
   14904:	pop	{r4, r5, r6, sl, fp, pc}
   14908:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   1490c:	push	{r4, r5, r6, r7, fp, lr}
   14910:	add	fp, sp, #16
   14914:	ldr	r5, [r1]
   14918:	mov	r6, r2
   1491c:	mov	r4, r1
   14920:	mov	r7, r0
   14924:	cmp	r0, #0
   14928:	beq	14940 <__assert_fail@plt+0x3964>
   1492c:	mov	r0, #1
   14930:	add	r0, r0, r5, lsr #1
   14934:	adds	r5, r5, r0
   14938:	bcc	14958 <__assert_fail@plt+0x397c>
   1493c:	b	1498c <__assert_fail@plt+0x39b0>
   14940:	cmp	r5, #0
   14944:	bne	14958 <__assert_fail@plt+0x397c>
   14948:	mov	r0, #64	; 0x40
   1494c:	cmp	r6, #64	; 0x40
   14950:	udiv	r5, r0, r6
   14954:	addhi	r5, r5, #1
   14958:	mov	r0, r7
   1495c:	mov	r1, r5
   14960:	mov	r2, r6
   14964:	bl	16b38 <__assert_fail@plt+0x5b5c>
   14968:	cmp	r0, #0
   1496c:	bne	14984 <__assert_fail@plt+0x39a8>
   14970:	cmp	r7, #0
   14974:	beq	1498c <__assert_fail@plt+0x39b0>
   14978:	cmp	r6, #0
   1497c:	cmpne	r5, #0
   14980:	bne	1498c <__assert_fail@plt+0x39b0>
   14984:	str	r5, [r4]
   14988:	pop	{r4, r5, r6, r7, fp, pc}
   1498c:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14990:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14994:	add	fp, sp, #24
   14998:	mov	r8, r1
   1499c:	ldr	r1, [r1]
   149a0:	mov	r5, r0
   149a4:	add	r0, r1, r1, asr #1
   149a8:	cmp	r0, r1
   149ac:	mvnvs	r0, #-2147483648	; 0x80000000
   149b0:	cmp	r0, r3
   149b4:	mov	r7, r0
   149b8:	movgt	r7, r3
   149bc:	cmn	r3, #1
   149c0:	movle	r7, r0
   149c4:	ldr	r0, [fp, #8]
   149c8:	cmn	r0, #1
   149cc:	ble	149f4 <__assert_fail@plt+0x3a18>
   149d0:	cmp	r0, #0
   149d4:	beq	14a48 <__assert_fail@plt+0x3a6c>
   149d8:	cmn	r7, #1
   149dc:	ble	14a1c <__assert_fail@plt+0x3a40>
   149e0:	mvn	r4, #-2147483648	; 0x80000000
   149e4:	udiv	r6, r4, r0
   149e8:	cmp	r6, r7
   149ec:	bge	14a48 <__assert_fail@plt+0x3a6c>
   149f0:	b	14a58 <__assert_fail@plt+0x3a7c>
   149f4:	cmn	r7, #1
   149f8:	ble	14a38 <__assert_fail@plt+0x3a5c>
   149fc:	cmn	r0, #1
   14a00:	beq	14a48 <__assert_fail@plt+0x3a6c>
   14a04:	mov	r6, #-2147483648	; 0x80000000
   14a08:	mvn	r4, #-2147483648	; 0x80000000
   14a0c:	sdiv	r6, r6, r0
   14a10:	cmp	r6, r7
   14a14:	bge	14a48 <__assert_fail@plt+0x3a6c>
   14a18:	b	14a58 <__assert_fail@plt+0x3a7c>
   14a1c:	beq	14a48 <__assert_fail@plt+0x3a6c>
   14a20:	mov	r6, #-2147483648	; 0x80000000
   14a24:	mvn	r4, #-2147483648	; 0x80000000
   14a28:	sdiv	r6, r6, r7
   14a2c:	cmp	r6, r0
   14a30:	bge	14a48 <__assert_fail@plt+0x3a6c>
   14a34:	b	14a58 <__assert_fail@plt+0x3a7c>
   14a38:	mvn	r4, #-2147483648	; 0x80000000
   14a3c:	sdiv	r6, r4, r0
   14a40:	cmp	r7, r6
   14a44:	blt	14a58 <__assert_fail@plt+0x3a7c>
   14a48:	mul	r6, r7, r0
   14a4c:	mov	r4, #64	; 0x40
   14a50:	cmp	r6, #63	; 0x3f
   14a54:	bgt	14a60 <__assert_fail@plt+0x3a84>
   14a58:	sdiv	r7, r4, r0
   14a5c:	mul	r6, r7, r0
   14a60:	cmp	r5, #0
   14a64:	moveq	r4, #0
   14a68:	streq	r4, [r8]
   14a6c:	sub	r4, r7, r1
   14a70:	cmp	r4, r2
   14a74:	bge	14b20 <__assert_fail@plt+0x3b44>
   14a78:	add	r7, r1, r2
   14a7c:	mov	r6, #0
   14a80:	mov	r2, #0
   14a84:	cmp	r7, r3
   14a88:	movwgt	r6, #1
   14a8c:	cmn	r3, #1
   14a90:	movwgt	r2, #1
   14a94:	cmp	r7, r1
   14a98:	bvs	14b54 <__assert_fail@plt+0x3b78>
   14a9c:	ands	r1, r2, r6
   14aa0:	bne	14b54 <__assert_fail@plt+0x3b78>
   14aa4:	cmn	r0, #1
   14aa8:	ble	14ad0 <__assert_fail@plt+0x3af4>
   14aac:	cmp	r0, #0
   14ab0:	beq	14b1c <__assert_fail@plt+0x3b40>
   14ab4:	cmn	r7, #1
   14ab8:	ble	14af4 <__assert_fail@plt+0x3b18>
   14abc:	mvn	r1, #-2147483648	; 0x80000000
   14ac0:	udiv	r1, r1, r0
   14ac4:	cmp	r1, r7
   14ac8:	bge	14b1c <__assert_fail@plt+0x3b40>
   14acc:	b	14b54 <__assert_fail@plt+0x3b78>
   14ad0:	cmn	r7, #1
   14ad4:	ble	14b0c <__assert_fail@plt+0x3b30>
   14ad8:	cmn	r0, #1
   14adc:	beq	14b1c <__assert_fail@plt+0x3b40>
   14ae0:	mov	r1, #-2147483648	; 0x80000000
   14ae4:	sdiv	r1, r1, r0
   14ae8:	cmp	r1, r7
   14aec:	bge	14b1c <__assert_fail@plt+0x3b40>
   14af0:	b	14b54 <__assert_fail@plt+0x3b78>
   14af4:	beq	14b1c <__assert_fail@plt+0x3b40>
   14af8:	mov	r1, #-2147483648	; 0x80000000
   14afc:	sdiv	r1, r1, r7
   14b00:	cmp	r1, r0
   14b04:	bge	14b1c <__assert_fail@plt+0x3b40>
   14b08:	b	14b54 <__assert_fail@plt+0x3b78>
   14b0c:	mvn	r1, #-2147483648	; 0x80000000
   14b10:	sdiv	r1, r1, r0
   14b14:	cmp	r7, r1
   14b18:	blt	14b54 <__assert_fail@plt+0x3b78>
   14b1c:	mul	r6, r7, r0
   14b20:	mov	r0, r5
   14b24:	mov	r1, r6
   14b28:	bl	167f8 <__assert_fail@plt+0x581c>
   14b2c:	cmp	r6, #0
   14b30:	movwne	r6, #1
   14b34:	cmp	r0, #0
   14b38:	bne	14b4c <__assert_fail@plt+0x3b70>
   14b3c:	clz	r1, r5
   14b40:	lsr	r1, r1, #5
   14b44:	orrs	r1, r1, r6
   14b48:	bne	14b54 <__assert_fail@plt+0x3b78>
   14b4c:	str	r7, [r8]
   14b50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b54:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14b58:	push	{fp, lr}
   14b5c:	mov	fp, sp
   14b60:	mov	r1, #1
   14b64:	bl	16774 <__assert_fail@plt+0x5798>
   14b68:	cmp	r0, #0
   14b6c:	popne	{fp, pc}
   14b70:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14b74:	push	{fp, lr}
   14b78:	mov	fp, sp
   14b7c:	bl	16774 <__assert_fail@plt+0x5798>
   14b80:	cmp	r0, #0
   14b84:	popne	{fp, pc}
   14b88:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14b8c:	push	{fp, lr}
   14b90:	mov	fp, sp
   14b94:	mov	r1, #1
   14b98:	bl	16774 <__assert_fail@plt+0x5798>
   14b9c:	cmp	r0, #0
   14ba0:	popne	{fp, pc}
   14ba4:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14ba8:	push	{fp, lr}
   14bac:	mov	fp, sp
   14bb0:	bl	16774 <__assert_fail@plt+0x5798>
   14bb4:	cmp	r0, #0
   14bb8:	popne	{fp, pc}
   14bbc:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14bc0:	push	{r4, r5, r6, sl, fp, lr}
   14bc4:	add	fp, sp, #16
   14bc8:	mov	r5, r0
   14bcc:	mov	r0, r1
   14bd0:	mov	r4, r1
   14bd4:	bl	167c8 <__assert_fail@plt+0x57ec>
   14bd8:	cmp	r0, #0
   14bdc:	beq	14bf8 <__assert_fail@plt+0x3c1c>
   14be0:	mov	r1, r5
   14be4:	mov	r2, r4
   14be8:	mov	r6, r0
   14bec:	bl	10de4 <memcpy@plt>
   14bf0:	mov	r0, r6
   14bf4:	pop	{r4, r5, r6, sl, fp, pc}
   14bf8:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14bfc:	push	{r4, r5, r6, sl, fp, lr}
   14c00:	add	fp, sp, #16
   14c04:	mov	r5, r0
   14c08:	mov	r0, r1
   14c0c:	mov	r4, r1
   14c10:	bl	167c8 <__assert_fail@plt+0x57ec>
   14c14:	cmp	r0, #0
   14c18:	beq	14c34 <__assert_fail@plt+0x3c58>
   14c1c:	mov	r1, r5
   14c20:	mov	r2, r4
   14c24:	mov	r6, r0
   14c28:	bl	10de4 <memcpy@plt>
   14c2c:	mov	r0, r6
   14c30:	pop	{r4, r5, r6, sl, fp, pc}
   14c34:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14c38:	push	{r4, r5, r6, sl, fp, lr}
   14c3c:	add	fp, sp, #16
   14c40:	mov	r5, r0
   14c44:	add	r0, r1, #1
   14c48:	mov	r4, r1
   14c4c:	bl	167c8 <__assert_fail@plt+0x57ec>
   14c50:	cmp	r0, #0
   14c54:	beq	14c7c <__assert_fail@plt+0x3ca0>
   14c58:	mov	r6, r0
   14c5c:	mov	r0, #0
   14c60:	mov	r1, r5
   14c64:	mov	r2, r4
   14c68:	strb	r0, [r6, r4]
   14c6c:	mov	r0, r6
   14c70:	bl	10de4 <memcpy@plt>
   14c74:	mov	r0, r6
   14c78:	pop	{r4, r5, r6, sl, fp, pc}
   14c7c:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14c80:	push	{r4, r5, r6, sl, fp, lr}
   14c84:	add	fp, sp, #16
   14c88:	mov	r4, r0
   14c8c:	bl	10ef8 <strlen@plt>
   14c90:	add	r5, r0, #1
   14c94:	mov	r0, r5
   14c98:	bl	167c8 <__assert_fail@plt+0x57ec>
   14c9c:	cmp	r0, #0
   14ca0:	beq	14cbc <__assert_fail@plt+0x3ce0>
   14ca4:	mov	r1, r4
   14ca8:	mov	r2, r5
   14cac:	mov	r6, r0
   14cb0:	bl	10de4 <memcpy@plt>
   14cb4:	mov	r0, r6
   14cb8:	pop	{r4, r5, r6, sl, fp, pc}
   14cbc:	bl	14cc0 <__assert_fail@plt+0x3ce4>
   14cc0:	push	{fp, lr}
   14cc4:	mov	fp, sp
   14cc8:	movw	r0, #32996	; 0x80e4
   14ccc:	movw	r1, #31796	; 0x7c34
   14cd0:	mov	r2, #5
   14cd4:	movt	r0, #2
   14cd8:	movt	r1, #1
   14cdc:	ldr	r4, [r0]
   14ce0:	mov	r0, #0
   14ce4:	bl	10e14 <dcgettext@plt>
   14ce8:	movw	r2, #30759	; 0x7827
   14cec:	mov	r3, r0
   14cf0:	mov	r0, r4
   14cf4:	mov	r1, #0
   14cf8:	movt	r2, #1
   14cfc:	bl	10e8c <error@plt>
   14d00:	bl	10fc4 <abort@plt>
   14d04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d08:	add	fp, sp, #24
   14d0c:	sub	sp, sp, #16
   14d10:	mov	r8, r0
   14d14:	ldr	r0, [fp, #16]
   14d18:	mov	r7, r3
   14d1c:	mov	r4, r2
   14d20:	mov	r2, r1
   14d24:	add	r3, sp, #8
   14d28:	mov	r1, #0
   14d2c:	str	r0, [sp]
   14d30:	mov	r0, r8
   14d34:	bl	14e14 <__assert_fail@plt+0x3e38>
   14d38:	cmp	r0, #0
   14d3c:	bne	14de8 <__assert_fail@plt+0x3e0c>
   14d40:	ldr	r6, [sp, #8]
   14d44:	ldr	r5, [sp, #12]
   14d48:	subs	r0, r6, r4
   14d4c:	sbcs	r0, r5, r7
   14d50:	blt	14d74 <__assert_fail@plt+0x3d98>
   14d54:	ldr	r1, [fp, #8]
   14d58:	ldr	r0, [fp, #12]
   14d5c:	subs	r1, r1, r6
   14d60:	sbcs	r0, r0, r5
   14d64:	movge	r0, r6
   14d68:	movge	r1, r5
   14d6c:	subge	sp, fp, #24
   14d70:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d74:	subs	r0, r6, #1073741824	; 0x40000000
   14d78:	sbcs	r0, r5, #0
   14d7c:	blt	14d8c <__assert_fail@plt+0x3db0>
   14d80:	bl	10f10 <__errno_location@plt>
   14d84:	mov	r1, #75	; 0x4b
   14d88:	b	14da8 <__assert_fail@plt+0x3dcc>
   14d8c:	bl	10f10 <__errno_location@plt>
   14d90:	mvn	r2, #1073741824	; 0x40000000
   14d94:	mvn	r1, #0
   14d98:	subs	r2, r2, r6
   14d9c:	sbcs	r1, r1, r5
   14da0:	movlt	r1, #34	; 0x22
   14da4:	movge	r1, #75	; 0x4b
   14da8:	str	r1, [r0]
   14dac:	ldr	r6, [r0]
   14db0:	ldr	r4, [fp, #24]
   14db4:	ldr	r5, [fp, #20]
   14db8:	mov	r0, r8
   14dbc:	bl	14088 <__assert_fail@plt+0x30ac>
   14dc0:	subs	r1, r6, #22
   14dc4:	movw	r2, #30755	; 0x7823
   14dc8:	str	r0, [sp]
   14dcc:	mov	r3, r5
   14dd0:	movne	r1, r6
   14dd4:	cmp	r4, #0
   14dd8:	movt	r2, #1
   14ddc:	movweq	r4, #1
   14de0:	mov	r0, r4
   14de4:	bl	10e8c <error@plt>
   14de8:	cmp	r0, #1
   14dec:	beq	14d80 <__assert_fail@plt+0x3da4>
   14df0:	cmp	r0, #3
   14df4:	bne	14e04 <__assert_fail@plt+0x3e28>
   14df8:	bl	10f10 <__errno_location@plt>
   14dfc:	mov	r1, #0
   14e00:	b	14da8 <__assert_fail@plt+0x3dcc>
   14e04:	bl	10f10 <__errno_location@plt>
   14e08:	b	14dac <__assert_fail@plt+0x3dd0>
   14e0c:	mov	r1, #10
   14e10:	b	14d04 <__assert_fail@plt+0x3d28>
   14e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e18:	add	fp, sp, #28
   14e1c:	sub	sp, sp, #36	; 0x24
   14e20:	cmp	r2, #37	; 0x25
   14e24:	bcs	16754 <__assert_fail@plt+0x5778>
   14e28:	ldr	r8, [fp, #8]
   14e2c:	mov	r9, r3
   14e30:	mov	r6, r2
   14e34:	mov	r7, r1
   14e38:	mov	r4, r0
   14e3c:	bl	10f10 <__errno_location@plt>
   14e40:	add	sl, sp, #32
   14e44:	cmp	r7, #0
   14e48:	mov	r5, r0
   14e4c:	mov	r0, #0
   14e50:	mov	r2, r6
   14e54:	mov	r3, #0
   14e58:	movne	sl, r7
   14e5c:	str	r0, [r5]
   14e60:	mov	r0, r4
   14e64:	mov	r1, sl
   14e68:	bl	10f94 <__strtoll_internal@plt>
   14e6c:	mov	r7, r1
   14e70:	ldr	r1, [sl]
   14e74:	cmp	r1, r4
   14e78:	beq	14eb4 <__assert_fail@plt+0x3ed8>
   14e7c:	mov	r6, r0
   14e80:	ldr	r0, [r5]
   14e84:	cmp	r0, #0
   14e88:	beq	15040 <__assert_fail@plt+0x4064>
   14e8c:	mov	r5, #4
   14e90:	cmp	r0, #34	; 0x22
   14e94:	bne	15298 <__assert_fail@plt+0x42bc>
   14e98:	mov	r5, #1
   14e9c:	cmp	r8, #0
   14ea0:	beq	1504c <__assert_fail@plt+0x4070>
   14ea4:	ldrb	r4, [r1]
   14ea8:	cmp	r4, #0
   14eac:	bne	14efc <__assert_fail@plt+0x3f20>
   14eb0:	b	1504c <__assert_fail@plt+0x4070>
   14eb4:	mov	r5, #4
   14eb8:	cmp	r8, #0
   14ebc:	beq	15298 <__assert_fail@plt+0x42bc>
   14ec0:	mov	r6, r1
   14ec4:	ldrb	r1, [r4]
   14ec8:	cmp	r1, #0
   14ecc:	beq	15298 <__assert_fail@plt+0x42bc>
   14ed0:	mov	r0, r8
   14ed4:	bl	10f04 <strchr@plt>
   14ed8:	cmp	r0, #0
   14edc:	beq	15298 <__assert_fail@plt+0x42bc>
   14ee0:	mov	r1, r6
   14ee4:	mov	r5, #0
   14ee8:	mov	r6, #1
   14eec:	mov	r7, #0
   14ef0:	ldrb	r4, [r1]
   14ef4:	cmp	r4, #0
   14ef8:	beq	1504c <__assert_fail@plt+0x4070>
   14efc:	str	r1, [sp, #20]
   14f00:	mov	r0, r8
   14f04:	mov	r1, r4
   14f08:	bl	10f04 <strchr@plt>
   14f0c:	cmp	r0, #0
   14f10:	beq	15290 <__assert_fail@plt+0x42b4>
   14f14:	sub	r0, r4, #69	; 0x45
   14f18:	mov	r1, #1
   14f1c:	mov	r3, #0
   14f20:	mov	r2, #1024	; 0x400
   14f24:	cmp	r0, #47	; 0x2f
   14f28:	str	r1, [sp, #16]
   14f2c:	bhi	15064 <__assert_fail@plt+0x4088>
   14f30:	add	r1, pc, #0
   14f34:	ldr	pc, [r1, r0, lsl #2]
   14f38:	strdeq	r4, [r1], -r8
   14f3c:	andeq	r5, r1, r4, rrx
   14f40:	strdeq	r4, [r1], -r8
   14f44:	andeq	r5, r1, r4, rrx
   14f48:	andeq	r5, r1, r4, rrx
   14f4c:	andeq	r5, r1, r4, rrx
   14f50:	strdeq	r4, [r1], -r8
   14f54:	andeq	r5, r1, r4, rrx
   14f58:	strdeq	r4, [r1], -r8
   14f5c:	andeq	r5, r1, r4, rrx
   14f60:	andeq	r5, r1, r4, rrx
   14f64:	strdeq	r4, [r1], -r8
   14f68:	andeq	r5, r1, r4, rrx
   14f6c:	andeq	r5, r1, r4, rrx
   14f70:	andeq	r5, r1, r4, rrx
   14f74:	strdeq	r4, [r1], -r8
   14f78:	andeq	r5, r1, r4, rrx
   14f7c:	andeq	r5, r1, r4, rrx
   14f80:	andeq	r5, r1, r4, rrx
   14f84:	andeq	r5, r1, r4, rrx
   14f88:	strdeq	r4, [r1], -r8
   14f8c:	strdeq	r4, [r1], -r8
   14f90:	andeq	r5, r1, r4, rrx
   14f94:	andeq	r5, r1, r4, rrx
   14f98:	andeq	r5, r1, r4, rrx
   14f9c:	andeq	r5, r1, r4, rrx
   14fa0:	andeq	r5, r1, r4, rrx
   14fa4:	andeq	r5, r1, r4, rrx
   14fa8:	andeq	r5, r1, r4, rrx
   14fac:	andeq	r5, r1, r4, rrx
   14fb0:	andeq	r5, r1, r4, rrx
   14fb4:	andeq	r5, r1, r4, rrx
   14fb8:	andeq	r5, r1, r4, rrx
   14fbc:	andeq	r5, r1, r4, rrx
   14fc0:	strdeq	r4, [r1], -r8
   14fc4:	andeq	r5, r1, r4, rrx
   14fc8:	andeq	r5, r1, r4, rrx
   14fcc:	andeq	r5, r1, r4, rrx
   14fd0:	strdeq	r4, [r1], -r8
   14fd4:	andeq	r5, r1, r4, rrx
   14fd8:	strdeq	r4, [r1], -r8
   14fdc:	andeq	r5, r1, r4, rrx
   14fe0:	andeq	r5, r1, r4, rrx
   14fe4:	andeq	r5, r1, r4, rrx
   14fe8:	andeq	r5, r1, r4, rrx
   14fec:	andeq	r5, r1, r4, rrx
   14ff0:	andeq	r5, r1, r4, rrx
   14ff4:	strdeq	r4, [r1], -r8
   14ff8:	mov	r0, r8
   14ffc:	mov	r1, #48	; 0x30
   15000:	bl	10f04 <strchr@plt>
   15004:	cmp	r0, #0
   15008:	beq	1505c <__assert_fail@plt+0x4080>
   1500c:	ldr	r1, [sp, #20]
   15010:	ldrb	r0, [r1, #1]
   15014:	cmp	r0, #66	; 0x42
   15018:	cmpne	r0, #68	; 0x44
   1501c:	bne	15198 <__assert_fail@plt+0x41bc>
   15020:	mov	r0, #2
   15024:	mov	r2, #1000	; 0x3e8
   15028:	mov	r3, #0
   1502c:	str	r0, [sp, #16]
   15030:	sub	r0, r4, #66	; 0x42
   15034:	cmp	r0, #53	; 0x35
   15038:	bls	15070 <__assert_fail@plt+0x4094>
   1503c:	b	15290 <__assert_fail@plt+0x42b4>
   15040:	mov	r5, r0
   15044:	cmp	r8, #0
   15048:	bne	14ea4 <__assert_fail@plt+0x3ec8>
   1504c:	strd	r6, [r9]
   15050:	mov	r0, r5
   15054:	sub	sp, fp, #28
   15058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1505c:	mov	r3, #0
   15060:	mov	r2, #1024	; 0x400
   15064:	sub	r0, r4, #66	; 0x42
   15068:	cmp	r0, #53	; 0x35
   1506c:	bhi	15290 <__assert_fail@plt+0x42b4>
   15070:	add	r1, pc, #8
   15074:	str	r3, [sp, #28]
   15078:	str	r2, [sp, #24]
   1507c:	ldr	pc, [r1, r0, lsl #2]
   15080:	andeq	r5, r1, r8, ror #5
   15084:	muleq	r1, r0, r2
   15088:	muleq	r1, r0, r2
   1508c:	strdeq	r5, [r1], -ip
   15090:	muleq	r1, r0, r2
   15094:	andeq	r5, r1, r8, asr r1
   15098:	muleq	r1, r0, r2
   1509c:	muleq	r1, r0, r2
   150a0:	muleq	r1, r0, r2
   150a4:	andeq	r5, r1, ip, asr #3
   150a8:	muleq	r1, r0, r2
   150ac:	strdeq	r5, [r1], -ip
   150b0:	muleq	r1, r0, r2
   150b4:	muleq	r1, r0, r2
   150b8:	andeq	r5, r1, r0, asr #6
   150bc:	muleq	r1, r0, r2
   150c0:	muleq	r1, r0, r2
   150c4:	muleq	r1, r0, r2
   150c8:	andeq	r5, r1, ip, lsr r2
   150cc:	muleq	r1, r0, r2
   150d0:	muleq	r1, r0, r2
   150d4:	muleq	r1, r0, r2
   150d8:	muleq	r1, r0, r2
   150dc:	andeq	r5, r1, r4, lsl #7
   150e0:	andeq	r5, r1, r4, lsr #5
   150e4:	muleq	r1, r0, r2
   150e8:	muleq	r1, r0, r2
   150ec:	muleq	r1, r0, r2
   150f0:	muleq	r1, r0, r2
   150f4:	muleq	r1, r0, r2
   150f8:	muleq	r1, r0, r2
   150fc:	muleq	r1, r0, r2
   15100:	andeq	r5, r1, r8, asr #7
   15104:	andeq	r6, r1, r0, asr #6
   15108:	muleq	r1, r0, r2
   1510c:	muleq	r1, r0, r2
   15110:	muleq	r1, r0, r2
   15114:	andeq	r5, r1, r8, asr r1
   15118:	muleq	r1, r0, r2
   1511c:	muleq	r1, r0, r2
   15120:	muleq	r1, r0, r2
   15124:	andeq	r5, r1, ip, asr #3
   15128:	muleq	r1, r0, r2
   1512c:	strdeq	r5, [r1], -ip
   15130:	muleq	r1, r0, r2
   15134:	muleq	r1, r0, r2
   15138:	muleq	r1, r0, r2
   1513c:	muleq	r1, r0, r2
   15140:	muleq	r1, r0, r2
   15144:	muleq	r1, r0, r2
   15148:	andeq	r5, r1, ip, lsr r2
   1514c:	muleq	r1, r0, r2
   15150:	muleq	r1, r0, r2
   15154:	ldrdeq	r5, [r1], -ip
   15158:	cmn	r7, #1
   1515c:	str	r9, [sp, #12]
   15160:	ble	153f0 <__assert_fail@plt+0x4414>
   15164:	ldr	r3, [sp, #28]
   15168:	mvn	r0, #0
   1516c:	mvn	r1, #-2147483648	; 0x80000000
   15170:	mvn	r8, #0
   15174:	mvn	r9, #-2147483648	; 0x80000000
   15178:	bl	16d50 <__assert_fail@plt+0x5d74>
   1517c:	ldr	r2, [sp, #24]
   15180:	ldr	r3, [sp, #28]
   15184:	subs	r0, r0, r6
   15188:	mov	r4, #1
   1518c:	sbcs	r0, r1, r7
   15190:	bge	15430 <__assert_fail@plt+0x4454>
   15194:	b	15448 <__assert_fail@plt+0x446c>
   15198:	cmp	r0, #105	; 0x69
   1519c:	mov	r3, #0
   151a0:	bne	15280 <__assert_fail@plt+0x42a4>
   151a4:	ldrb	r0, [r1, #2]
   151a8:	mov	r1, #1
   151ac:	mov	r2, #1024	; 0x400
   151b0:	cmp	r0, #66	; 0x42
   151b4:	movweq	r1, #3
   151b8:	str	r1, [sp, #16]
   151bc:	sub	r0, r4, #66	; 0x42
   151c0:	cmp	r0, #53	; 0x35
   151c4:	bls	15070 <__assert_fail@plt+0x4094>
   151c8:	b	15290 <__assert_fail@plt+0x42b4>
   151cc:	cmn	r7, #1
   151d0:	ble	15484 <__assert_fail@plt+0x44a8>
   151d4:	ldr	r3, [sp, #28]
   151d8:	mvn	r0, #0
   151dc:	mvn	r1, #-2147483648	; 0x80000000
   151e0:	bl	16d50 <__assert_fail@plt+0x5d74>
   151e4:	ldr	r2, [sp, #24]
   151e8:	ldr	r3, [sp, #28]
   151ec:	subs	r0, r0, r6
   151f0:	sbcs	r0, r1, r7
   151f4:	bge	154b8 <__assert_fail@plt+0x44dc>
   151f8:	b	15bc8 <__assert_fail@plt+0x4bec>
   151fc:	cmn	r7, #1
   15200:	str	r9, [sp, #12]
   15204:	ble	154cc <__assert_fail@plt+0x44f0>
   15208:	ldr	r3, [sp, #28]
   1520c:	mvn	r0, #0
   15210:	mvn	r1, #-2147483648	; 0x80000000
   15214:	mvn	r8, #0
   15218:	mvn	r9, #-2147483648	; 0x80000000
   1521c:	bl	16d50 <__assert_fail@plt+0x5d74>
   15220:	ldr	r2, [sp, #24]
   15224:	ldr	r3, [sp, #28]
   15228:	subs	r0, r0, r6
   1522c:	mov	r4, #1
   15230:	sbcs	r0, r1, r7
   15234:	bge	1550c <__assert_fail@plt+0x4530>
   15238:	b	15524 <__assert_fail@plt+0x4548>
   1523c:	cmn	r7, #1
   15240:	str	r9, [sp, #12]
   15244:	ble	1555c <__assert_fail@plt+0x4580>
   15248:	ldr	r3, [sp, #28]
   1524c:	mvn	r0, #0
   15250:	mvn	r1, #-2147483648	; 0x80000000
   15254:	mvn	r9, #-2147483648	; 0x80000000
   15258:	str	r0, [sp, #8]
   1525c:	mvn	r0, #0
   15260:	bl	16d50 <__assert_fail@plt+0x5d74>
   15264:	ldr	r2, [sp, #24]
   15268:	ldr	r3, [sp, #28]
   1526c:	subs	r0, r0, r6
   15270:	mov	r4, #1
   15274:	sbcs	r0, r1, r7
   15278:	bge	155a0 <__assert_fail@plt+0x45c4>
   1527c:	b	155bc <__assert_fail@plt+0x45e0>
   15280:	mov	r2, #1024	; 0x400
   15284:	sub	r0, r4, #66	; 0x42
   15288:	cmp	r0, #53	; 0x35
   1528c:	bls	15070 <__assert_fail@plt+0x4094>
   15290:	orr	r5, r5, #2
   15294:	strd	r6, [r9]
   15298:	mov	r0, r5
   1529c:	sub	sp, fp, #28
   152a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152a4:	cmp	r7, #0
   152a8:	str	r9, [sp, #12]
   152ac:	blt	158a4 <__assert_fail@plt+0x48c8>
   152b0:	ldr	r3, [sp, #28]
   152b4:	mvn	r0, #0
   152b8:	mvn	r1, #-2147483648	; 0x80000000
   152bc:	mvn	r9, #-2147483648	; 0x80000000
   152c0:	str	r0, [sp, #8]
   152c4:	mvn	r0, #0
   152c8:	bl	16d50 <__assert_fail@plt+0x5d74>
   152cc:	ldr	r2, [sp, #24]
   152d0:	ldr	r3, [sp, #28]
   152d4:	subs	r0, r0, r6
   152d8:	mov	r4, #1
   152dc:	sbcs	r0, r1, r7
   152e0:	bge	158e8 <__assert_fail@plt+0x490c>
   152e4:	b	15904 <__assert_fail@plt+0x4928>
   152e8:	cmn	r7, #1
   152ec:	ble	15940 <__assert_fail@plt+0x4964>
   152f0:	cmp	r7, #2097152	; 0x200000
   152f4:	blt	15970 <__assert_fail@plt+0x4994>
   152f8:	b	15bc8 <__assert_fail@plt+0x4bec>
   152fc:	cmp	r7, #0
   15300:	str	r9, [sp, #12]
   15304:	blt	15980 <__assert_fail@plt+0x49a4>
   15308:	ldr	r3, [sp, #28]
   1530c:	mvn	r0, #0
   15310:	mvn	r1, #-2147483648	; 0x80000000
   15314:	mvn	r9, #-2147483648	; 0x80000000
   15318:	str	r0, [sp, #8]
   1531c:	mvn	r0, #0
   15320:	bl	16d50 <__assert_fail@plt+0x5d74>
   15324:	ldr	r2, [sp, #24]
   15328:	ldr	r3, [sp, #28]
   1532c:	subs	r0, r0, r6
   15330:	mov	r4, #1
   15334:	sbcs	r0, r1, r7
   15338:	bge	159c4 <__assert_fail@plt+0x49e8>
   1533c:	b	159e0 <__assert_fail@plt+0x4a04>
   15340:	cmp	r7, #0
   15344:	str	r9, [sp, #12]
   15348:	blt	15a1c <__assert_fail@plt+0x4a40>
   1534c:	ldr	r3, [sp, #28]
   15350:	mvn	r0, #0
   15354:	mvn	r1, #-2147483648	; 0x80000000
   15358:	mvn	r8, #-2147483648	; 0x80000000
   1535c:	str	r0, [sp, #8]
   15360:	mvn	r0, #0
   15364:	bl	16d50 <__assert_fail@plt+0x5d74>
   15368:	ldr	r2, [sp, #24]
   1536c:	ldr	r3, [sp, #28]
   15370:	subs	r0, r0, r6
   15374:	mov	r4, #1
   15378:	sbcs	r0, r1, r7
   1537c:	bge	15a60 <__assert_fail@plt+0x4a84>
   15380:	b	15a7c <__assert_fail@plt+0x4aa0>
   15384:	cmp	r7, #0
   15388:	str	r9, [sp, #12]
   1538c:	blt	15ab8 <__assert_fail@plt+0x4adc>
   15390:	ldr	r3, [sp, #28]
   15394:	mvn	r0, #0
   15398:	mvn	r1, #-2147483648	; 0x80000000
   1539c:	mvn	r9, #-2147483648	; 0x80000000
   153a0:	str	r0, [sp, #8]
   153a4:	mvn	r0, #0
   153a8:	bl	16d50 <__assert_fail@plt+0x5d74>
   153ac:	ldr	r2, [sp, #24]
   153b0:	ldr	r3, [sp, #28]
   153b4:	subs	r0, r0, r6
   153b8:	mov	r4, #1
   153bc:	sbcs	r0, r1, r7
   153c0:	bge	15afc <__assert_fail@plt+0x4b20>
   153c4:	b	15b18 <__assert_fail@plt+0x4b3c>
   153c8:	cmn	r7, #1
   153cc:	ble	15b58 <__assert_fail@plt+0x4b7c>
   153d0:	cmp	r7, #4194304	; 0x400000
   153d4:	blt	15b88 <__assert_fail@plt+0x4bac>
   153d8:	b	15bc8 <__assert_fail@plt+0x4bec>
   153dc:	cmn	r7, #1
   153e0:	ble	15b98 <__assert_fail@plt+0x4bbc>
   153e4:	cmp	r7, #1073741824	; 0x40000000
   153e8:	bge	15bc8 <__assert_fail@plt+0x4bec>
   153ec:	b	15be8 <__assert_fail@plt+0x4c0c>
   153f0:	and	r0, r6, r7
   153f4:	cmn	r0, #1
   153f8:	beq	15430 <__assert_fail@plt+0x4454>
   153fc:	mov	r0, #0
   15400:	mov	r1, #-2147483648	; 0x80000000
   15404:	mov	r2, r6
   15408:	mov	r3, r7
   1540c:	mov	r8, #0
   15410:	mov	r9, #-2147483648	; 0x80000000
   15414:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15418:	ldr	r2, [sp, #24]
   1541c:	ldr	r3, [sp, #28]
   15420:	mov	r4, #1
   15424:	subs	r0, r0, r2
   15428:	sbcs	r0, r1, r3
   1542c:	blt	155f8 <__assert_fail@plt+0x461c>
   15430:	umull	r8, r0, r6, r2
   15434:	mov	r4, #0
   15438:	mla	r0, r6, r3, r0
   1543c:	mla	r9, r7, r2, r0
   15440:	cmp	r9, #0
   15444:	blt	155f8 <__assert_fail@plt+0x461c>
   15448:	ldr	r3, [sp, #28]
   1544c:	mvn	r0, #-2147483648	; 0x80000000
   15450:	mvn	r1, #-2147483648	; 0x80000000
   15454:	mov	r6, r4
   15458:	mvn	r4, #0
   1545c:	str	r0, [sp, #8]
   15460:	mvn	r0, #0
   15464:	bl	16d50 <__assert_fail@plt+0x5d74>
   15468:	ldr	r2, [sp, #24]
   1546c:	ldr	r3, [sp, #28]
   15470:	subs	r0, r0, r8
   15474:	mov	r7, #1
   15478:	sbcs	r0, r1, r9
   1547c:	bge	15634 <__assert_fail@plt+0x4658>
   15480:	b	15650 <__assert_fail@plt+0x4674>
   15484:	and	r0, r6, r7
   15488:	cmn	r0, #1
   1548c:	beq	154b8 <__assert_fail@plt+0x44dc>
   15490:	mov	r0, #0
   15494:	mov	r1, #-2147483648	; 0x80000000
   15498:	mov	r2, r6
   1549c:	mov	r3, r7
   154a0:	bl	16c7c <__assert_fail@plt+0x5ca0>
   154a4:	ldr	r2, [sp, #24]
   154a8:	ldr	r3, [sp, #28]
   154ac:	subs	r0, r0, r2
   154b0:	sbcs	r0, r1, r3
   154b4:	blt	15bc8 <__assert_fail@plt+0x4bec>
   154b8:	umull	r0, r1, r6, r2
   154bc:	mla	r1, r6, r3, r1
   154c0:	mov	r6, r0
   154c4:	mla	r7, r7, r2, r1
   154c8:	b	16340 <__assert_fail@plt+0x5364>
   154cc:	and	r0, r6, r7
   154d0:	cmn	r0, #1
   154d4:	beq	1550c <__assert_fail@plt+0x4530>
   154d8:	mov	r0, #0
   154dc:	mov	r1, #-2147483648	; 0x80000000
   154e0:	mov	r2, r6
   154e4:	mov	r3, r7
   154e8:	mov	r8, #0
   154ec:	mov	r9, #-2147483648	; 0x80000000
   154f0:	bl	16c7c <__assert_fail@plt+0x5ca0>
   154f4:	ldr	r2, [sp, #24]
   154f8:	ldr	r3, [sp, #28]
   154fc:	mov	r4, #1
   15500:	subs	r0, r0, r2
   15504:	sbcs	r0, r1, r3
   15508:	blt	156e4 <__assert_fail@plt+0x4708>
   1550c:	umull	r8, r0, r6, r2
   15510:	mov	r4, #0
   15514:	mla	r0, r6, r3, r0
   15518:	mla	r9, r7, r2, r0
   1551c:	cmp	r9, #0
   15520:	blt	156e4 <__assert_fail@plt+0x4708>
   15524:	ldr	r3, [sp, #28]
   15528:	mvn	r0, #0
   1552c:	mvn	r1, #-2147483648	; 0x80000000
   15530:	str	r4, [sp, #8]
   15534:	mvn	r6, #0
   15538:	mvn	r7, #-2147483648	; 0x80000000
   1553c:	bl	16d50 <__assert_fail@plt+0x5d74>
   15540:	ldr	r4, [sp, #24]
   15544:	ldr	r3, [sp, #28]
   15548:	subs	r0, r0, r8
   1554c:	mov	r2, #1
   15550:	sbcs	r0, r1, r9
   15554:	bge	1571c <__assert_fail@plt+0x4740>
   15558:	b	15854 <__assert_fail@plt+0x4878>
   1555c:	and	r0, r6, r7
   15560:	cmn	r0, #1
   15564:	beq	155a0 <__assert_fail@plt+0x45c4>
   15568:	mov	r0, #0
   1556c:	mov	r1, #-2147483648	; 0x80000000
   15570:	mov	r2, r6
   15574:	mov	r3, r7
   15578:	bl	16c7c <__assert_fail@plt+0x5ca0>
   1557c:	ldr	r2, [sp, #24]
   15580:	ldr	r3, [sp, #28]
   15584:	mov	r4, #1
   15588:	mov	r9, #-2147483648	; 0x80000000
   1558c:	subs	r0, r0, r2
   15590:	sbcs	r0, r1, r3
   15594:	mov	r0, #0
   15598:	str	r0, [sp, #8]
   1559c:	blt	15730 <__assert_fail@plt+0x4754>
   155a0:	umull	r1, r0, r6, r2
   155a4:	mov	r4, #0
   155a8:	mla	r0, r6, r3, r0
   155ac:	str	r1, [sp, #8]
   155b0:	mla	r9, r7, r2, r0
   155b4:	cmp	r9, #0
   155b8:	blt	15730 <__assert_fail@plt+0x4754>
   155bc:	ldr	r3, [sp, #28]
   155c0:	mvn	r0, #0
   155c4:	mvn	r1, #-2147483648	; 0x80000000
   155c8:	str	r4, [sp, #4]
   155cc:	mvn	r6, #0
   155d0:	mvn	r8, #-2147483648	; 0x80000000
   155d4:	bl	16d50 <__assert_fail@plt+0x5d74>
   155d8:	ldr	r4, [sp, #8]
   155dc:	ldr	r2, [sp, #24]
   155e0:	ldr	r3, [sp, #28]
   155e4:	mov	r7, #1
   155e8:	subs	r0, r0, r4
   155ec:	sbcs	r0, r1, r9
   155f0:	bge	1576c <__assert_fail@plt+0x4790>
   155f4:	b	15784 <__assert_fail@plt+0x47a8>
   155f8:	mov	r0, #-2147483648	; 0x80000000
   155fc:	mov	r1, #-2147483648	; 0x80000000
   15600:	mov	r2, r8
   15604:	mov	r3, r9
   15608:	mov	r6, r4
   1560c:	mov	r4, #0
   15610:	str	r0, [sp, #8]
   15614:	mov	r0, #0
   15618:	bl	16c7c <__assert_fail@plt+0x5ca0>
   1561c:	ldr	r2, [sp, #24]
   15620:	ldr	r3, [sp, #28]
   15624:	mov	r7, #1
   15628:	subs	r0, r0, r2
   1562c:	sbcs	r0, r1, r3
   15630:	blt	156a4 <__assert_fail@plt+0x46c8>
   15634:	umull	r4, r0, r8, r2
   15638:	mov	r7, r6
   1563c:	mla	r0, r8, r3, r0
   15640:	mla	r0, r9, r2, r0
   15644:	cmp	r0, #0
   15648:	str	r0, [sp, #8]
   1564c:	blt	156a4 <__assert_fail@plt+0x46c8>
   15650:	ldr	r3, [sp, #28]
   15654:	mvn	r0, #0
   15658:	mvn	r1, #-2147483648	; 0x80000000
   1565c:	mov	r9, r7
   15660:	mvn	r6, #0
   15664:	mvn	r7, #-2147483648	; 0x80000000
   15668:	bl	16d50 <__assert_fail@plt+0x5d74>
   1566c:	ldr	r8, [sp, #8]
   15670:	ldr	r3, [sp, #24]
   15674:	ldr	ip, [sp, #28]
   15678:	subs	r0, r0, r4
   1567c:	mov	r2, #1
   15680:	sbcs	r0, r1, r8
   15684:	blt	15698 <__assert_fail@plt+0x46bc>
   15688:	umull	r6, r0, r4, r3
   1568c:	mov	r2, #0
   15690:	mla	r0, r4, ip, r0
   15694:	mla	r7, r8, r3, r0
   15698:	orr	r3, r2, r9
   1569c:	ldr	r9, [sp, #12]
   156a0:	b	16340 <__assert_fail@plt+0x5364>
   156a4:	ldr	r8, [sp, #8]
   156a8:	mov	r0, #0
   156ac:	mov	r1, #-2147483648	; 0x80000000
   156b0:	mov	r2, r4
   156b4:	mov	r9, r7
   156b8:	mov	r6, #0
   156bc:	mov	r7, #-2147483648	; 0x80000000
   156c0:	mov	r3, r8
   156c4:	bl	16c7c <__assert_fail@plt+0x5ca0>
   156c8:	ldr	r3, [sp, #24]
   156cc:	ldr	ip, [sp, #28]
   156d0:	mov	r2, #1
   156d4:	subs	r0, r0, r3
   156d8:	sbcs	r0, r1, ip
   156dc:	bge	15688 <__assert_fail@plt+0x46ac>
   156e0:	b	15698 <__assert_fail@plt+0x46bc>
   156e4:	mov	r0, #0
   156e8:	mov	r1, #-2147483648	; 0x80000000
   156ec:	mov	r2, r8
   156f0:	mov	r3, r9
   156f4:	str	r4, [sp, #8]
   156f8:	mov	r6, #0
   156fc:	mov	r7, #-2147483648	; 0x80000000
   15700:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15704:	ldr	r4, [sp, #24]
   15708:	ldr	r3, [sp, #28]
   1570c:	mov	r2, #1
   15710:	subs	r0, r0, r4
   15714:	sbcs	r0, r1, r3
   15718:	blt	15854 <__assert_fail@plt+0x4878>
   1571c:	umull	r6, r0, r8, r4
   15720:	mov	r2, #0
   15724:	mla	r0, r8, r3, r0
   15728:	mla	r7, r9, r4, r0
   1572c:	b	15854 <__assert_fail@plt+0x4878>
   15730:	str	r4, [sp, #4]
   15734:	ldr	r4, [sp, #8]
   15738:	mov	r0, #0
   1573c:	mov	r1, #-2147483648	; 0x80000000
   15740:	mov	r3, r9
   15744:	mov	r2, r4
   15748:	bl	16c7c <__assert_fail@plt+0x5ca0>
   1574c:	ldr	r2, [sp, #24]
   15750:	ldr	r3, [sp, #28]
   15754:	mov	r7, #1
   15758:	mov	r6, #0
   1575c:	mov	r8, #-2147483648	; 0x80000000
   15760:	subs	r0, r0, r2
   15764:	sbcs	r0, r1, r3
   15768:	blt	157bc <__assert_fail@plt+0x47e0>
   1576c:	umull	r6, r0, r4, r2
   15770:	ldr	r7, [sp, #4]
   15774:	mla	r0, r4, r3, r0
   15778:	mla	r8, r9, r2, r0
   1577c:	cmp	r8, #0
   15780:	blt	157bc <__assert_fail@plt+0x47e0>
   15784:	ldr	r3, [sp, #28]
   15788:	mvn	r0, #0
   1578c:	mvn	r1, #-2147483648	; 0x80000000
   15790:	str	r7, [sp, #8]
   15794:	mvn	r4, #0
   15798:	mvn	r9, #-2147483648	; 0x80000000
   1579c:	bl	16d50 <__assert_fail@plt+0x5d74>
   157a0:	ldr	r2, [sp, #24]
   157a4:	ldr	r3, [sp, #28]
   157a8:	subs	r0, r0, r6
   157ac:	mov	r7, #1
   157b0:	sbcs	r0, r1, r8
   157b4:	bge	157f4 <__assert_fail@plt+0x4818>
   157b8:	b	1580c <__assert_fail@plt+0x4830>
   157bc:	mov	r0, #0
   157c0:	mov	r1, #-2147483648	; 0x80000000
   157c4:	mov	r2, r6
   157c8:	mov	r3, r8
   157cc:	str	r7, [sp, #8]
   157d0:	bl	16c7c <__assert_fail@plt+0x5ca0>
   157d4:	ldr	r2, [sp, #24]
   157d8:	ldr	r3, [sp, #28]
   157dc:	mov	r7, #1
   157e0:	mov	r4, #0
   157e4:	mov	r9, #-2147483648	; 0x80000000
   157e8:	subs	r0, r0, r2
   157ec:	sbcs	r0, r1, r3
   157f0:	blt	15864 <__assert_fail@plt+0x4888>
   157f4:	umull	r4, r0, r6, r2
   157f8:	ldr	r7, [sp, #8]
   157fc:	mla	r0, r6, r3, r0
   15800:	mla	r9, r8, r2, r0
   15804:	cmp	r9, #0
   15808:	blt	15864 <__assert_fail@plt+0x4888>
   1580c:	ldr	r3, [sp, #28]
   15810:	mvn	r0, #0
   15814:	mvn	r1, #-2147483648	; 0x80000000
   15818:	str	r7, [sp, #8]
   1581c:	mvn	r6, #0
   15820:	mvn	r7, #-2147483648	; 0x80000000
   15824:	bl	16d50 <__assert_fail@plt+0x5d74>
   15828:	ldr	r3, [sp, #24]
   1582c:	ldr	ip, [sp, #28]
   15830:	subs	r0, r0, r4
   15834:	mov	r2, #1
   15838:	mov	r8, r4
   1583c:	sbcs	r0, r1, r9
   15840:	blt	15854 <__assert_fail@plt+0x4878>
   15844:	umull	r6, r0, r8, r3
   15848:	mov	r2, #0
   1584c:	mla	r0, r8, ip, r0
   15850:	mla	r7, r9, r3, r0
   15854:	ldr	r0, [sp, #8]
   15858:	ldr	r9, [sp, #12]
   1585c:	orr	r3, r2, r0
   15860:	b	16340 <__assert_fail@plt+0x5364>
   15864:	mov	r0, #0
   15868:	mov	r1, #-2147483648	; 0x80000000
   1586c:	mov	r2, r4
   15870:	mov	r3, r9
   15874:	str	r7, [sp, #8]
   15878:	mov	r8, r4
   1587c:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15880:	ldr	r3, [sp, #24]
   15884:	ldr	ip, [sp, #28]
   15888:	mov	r2, #1
   1588c:	mov	r6, #0
   15890:	mov	r7, #-2147483648	; 0x80000000
   15894:	subs	r0, r0, r3
   15898:	sbcs	r0, r1, ip
   1589c:	bge	15844 <__assert_fail@plt+0x4868>
   158a0:	b	15854 <__assert_fail@plt+0x4878>
   158a4:	and	r0, r6, r7
   158a8:	cmn	r0, #1
   158ac:	beq	158e8 <__assert_fail@plt+0x490c>
   158b0:	mov	r0, #0
   158b4:	mov	r1, #-2147483648	; 0x80000000
   158b8:	mov	r2, r6
   158bc:	mov	r3, r7
   158c0:	bl	16c7c <__assert_fail@plt+0x5ca0>
   158c4:	ldr	r2, [sp, #24]
   158c8:	ldr	r3, [sp, #28]
   158cc:	mov	r4, #1
   158d0:	mov	r9, #-2147483648	; 0x80000000
   158d4:	subs	r0, r0, r2
   158d8:	sbcs	r0, r1, r3
   158dc:	mov	r0, #0
   158e0:	str	r0, [sp, #8]
   158e4:	blt	15bf8 <__assert_fail@plt+0x4c1c>
   158e8:	umull	r1, r0, r6, r2
   158ec:	mov	r4, #0
   158f0:	mla	r0, r6, r3, r0
   158f4:	str	r1, [sp, #8]
   158f8:	mla	r9, r7, r2, r0
   158fc:	cmp	r9, #0
   15900:	blt	15bf8 <__assert_fail@plt+0x4c1c>
   15904:	ldr	r3, [sp, #28]
   15908:	mvn	r0, #0
   1590c:	mvn	r1, #-2147483648	; 0x80000000
   15910:	str	r4, [sp, #4]
   15914:	mvn	r8, #0
   15918:	mvn	r4, #-2147483648	; 0x80000000
   1591c:	bl	16d50 <__assert_fail@plt+0x5d74>
   15920:	ldr	r6, [sp, #8]
   15924:	ldr	r2, [sp, #24]
   15928:	ldr	r3, [sp, #28]
   1592c:	mov	r7, #1
   15930:	subs	r0, r0, r6
   15934:	sbcs	r0, r1, r9
   15938:	bge	15c34 <__assert_fail@plt+0x4c58>
   1593c:	b	15c4c <__assert_fail@plt+0x4c70>
   15940:	and	r0, r6, r7
   15944:	cmn	r0, #1
   15948:	beq	15970 <__assert_fail@plt+0x4994>
   1594c:	mov	r0, #0
   15950:	mov	r1, #-2147483648	; 0x80000000
   15954:	mov	r2, r6
   15958:	mov	r3, r7
   1595c:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15960:	ldr	r3, [sp, #28]
   15964:	subs	r0, r0, #1024	; 0x400
   15968:	sbcs	r0, r1, #0
   1596c:	blt	15bc8 <__assert_fail@plt+0x4bec>
   15970:	lsl	r0, r7, #10
   15974:	orr	r7, r0, r6, lsr #22
   15978:	lsl	r6, r6, #10
   1597c:	b	16340 <__assert_fail@plt+0x5364>
   15980:	and	r0, r6, r7
   15984:	cmn	r0, #1
   15988:	beq	159c4 <__assert_fail@plt+0x49e8>
   1598c:	mov	r0, #0
   15990:	mov	r1, #-2147483648	; 0x80000000
   15994:	mov	r2, r6
   15998:	mov	r3, r7
   1599c:	bl	16c7c <__assert_fail@plt+0x5ca0>
   159a0:	ldr	r2, [sp, #24]
   159a4:	ldr	r3, [sp, #28]
   159a8:	mov	r4, #1
   159ac:	mov	r9, #-2147483648	; 0x80000000
   159b0:	subs	r0, r0, r2
   159b4:	sbcs	r0, r1, r3
   159b8:	mov	r0, #0
   159bc:	str	r0, [sp, #8]
   159c0:	blt	15f10 <__assert_fail@plt+0x4f34>
   159c4:	umull	r1, r0, r6, r2
   159c8:	mov	r4, #0
   159cc:	mla	r0, r6, r3, r0
   159d0:	str	r1, [sp, #8]
   159d4:	mla	r9, r7, r2, r0
   159d8:	cmp	r9, #0
   159dc:	blt	15f10 <__assert_fail@plt+0x4f34>
   159e0:	ldr	r3, [sp, #28]
   159e4:	mvn	r0, #0
   159e8:	mvn	r1, #-2147483648	; 0x80000000
   159ec:	str	r4, [sp, #4]
   159f0:	mvn	r8, #0
   159f4:	mvn	r4, #-2147483648	; 0x80000000
   159f8:	bl	16d50 <__assert_fail@plt+0x5d74>
   159fc:	ldr	r6, [sp, #8]
   15a00:	ldr	r2, [sp, #24]
   15a04:	ldr	r3, [sp, #28]
   15a08:	mov	r7, #1
   15a0c:	subs	r0, r0, r6
   15a10:	sbcs	r0, r1, r9
   15a14:	bge	15f4c <__assert_fail@plt+0x4f70>
   15a18:	b	15f64 <__assert_fail@plt+0x4f88>
   15a1c:	and	r0, r6, r7
   15a20:	cmn	r0, #1
   15a24:	beq	15a60 <__assert_fail@plt+0x4a84>
   15a28:	mov	r0, #0
   15a2c:	mov	r1, #-2147483648	; 0x80000000
   15a30:	mov	r2, r6
   15a34:	mov	r3, r7
   15a38:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15a3c:	ldr	r2, [sp, #24]
   15a40:	ldr	r3, [sp, #28]
   15a44:	mov	r4, #1
   15a48:	mov	r8, #-2147483648	; 0x80000000
   15a4c:	subs	r0, r0, r2
   15a50:	sbcs	r0, r1, r3
   15a54:	mov	r0, #0
   15a58:	str	r0, [sp, #8]
   15a5c:	blt	1618c <__assert_fail@plt+0x51b0>
   15a60:	umull	r1, r0, r6, r2
   15a64:	mov	r4, #0
   15a68:	mla	r0, r6, r3, r0
   15a6c:	str	r1, [sp, #8]
   15a70:	mla	r8, r7, r2, r0
   15a74:	cmp	r8, #0
   15a78:	blt	1618c <__assert_fail@plt+0x51b0>
   15a7c:	ldr	r3, [sp, #28]
   15a80:	mvn	r0, #0
   15a84:	mvn	r1, #-2147483648	; 0x80000000
   15a88:	str	r4, [sp, #4]
   15a8c:	mvn	r9, #0
   15a90:	mvn	r4, #-2147483648	; 0x80000000
   15a94:	bl	16d50 <__assert_fail@plt+0x5d74>
   15a98:	ldr	r6, [sp, #8]
   15a9c:	ldr	r2, [sp, #24]
   15aa0:	ldr	r3, [sp, #28]
   15aa4:	mov	r7, #1
   15aa8:	subs	r0, r0, r6
   15aac:	sbcs	r0, r1, r8
   15ab0:	bge	161c8 <__assert_fail@plt+0x51ec>
   15ab4:	b	161e0 <__assert_fail@plt+0x5204>
   15ab8:	and	r0, r6, r7
   15abc:	cmn	r0, #1
   15ac0:	beq	15afc <__assert_fail@plt+0x4b20>
   15ac4:	mov	r0, #0
   15ac8:	mov	r1, #-2147483648	; 0x80000000
   15acc:	mov	r2, r6
   15ad0:	mov	r3, r7
   15ad4:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15ad8:	ldr	r2, [sp, #24]
   15adc:	ldr	r3, [sp, #28]
   15ae0:	mov	r4, #1
   15ae4:	mov	r9, #-2147483648	; 0x80000000
   15ae8:	subs	r0, r0, r2
   15aec:	sbcs	r0, r1, r3
   15af0:	mov	r0, #0
   15af4:	str	r0, [sp, #8]
   15af8:	blt	163a8 <__assert_fail@plt+0x53cc>
   15afc:	umull	r1, r0, r6, r2
   15b00:	mov	r4, #0
   15b04:	mla	r0, r6, r3, r0
   15b08:	str	r1, [sp, #8]
   15b0c:	mla	r9, r7, r2, r0
   15b10:	cmp	r9, #0
   15b14:	blt	163a8 <__assert_fail@plt+0x53cc>
   15b18:	ldr	r3, [sp, #28]
   15b1c:	mvn	r0, #0
   15b20:	mvn	r1, #-2147483648	; 0x80000000
   15b24:	str	r4, [sp]
   15b28:	mvn	r8, #-2147483648	; 0x80000000
   15b2c:	str	r0, [sp, #4]
   15b30:	mvn	r0, #0
   15b34:	bl	16d50 <__assert_fail@plt+0x5d74>
   15b38:	ldr	r6, [sp, #8]
   15b3c:	ldr	r2, [sp, #24]
   15b40:	ldr	r3, [sp, #28]
   15b44:	mov	r7, #1
   15b48:	subs	r0, r0, r6
   15b4c:	sbcs	r0, r1, r9
   15b50:	bge	163e8 <__assert_fail@plt+0x540c>
   15b54:	b	16404 <__assert_fail@plt+0x5428>
   15b58:	and	r0, r6, r7
   15b5c:	cmn	r0, #1
   15b60:	beq	15b88 <__assert_fail@plt+0x4bac>
   15b64:	mov	r0, #0
   15b68:	mov	r1, #-2147483648	; 0x80000000
   15b6c:	mov	r2, r6
   15b70:	mov	r3, r7
   15b74:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15b78:	ldr	r3, [sp, #28]
   15b7c:	subs	r0, r0, #512	; 0x200
   15b80:	sbcs	r0, r1, #0
   15b84:	blt	15bc8 <__assert_fail@plt+0x4bec>
   15b88:	lsl	r0, r7, #9
   15b8c:	orr	r7, r0, r6, lsr #23
   15b90:	lsl	r6, r6, #9
   15b94:	b	16340 <__assert_fail@plt+0x5364>
   15b98:	and	r0, r6, r7
   15b9c:	cmn	r0, #1
   15ba0:	beq	15be8 <__assert_fail@plt+0x4c0c>
   15ba4:	mov	r0, #0
   15ba8:	mov	r1, #-2147483648	; 0x80000000
   15bac:	mov	r2, r6
   15bb0:	mov	r3, r7
   15bb4:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15bb8:	ldr	r3, [sp, #28]
   15bbc:	subs	r0, r0, #2
   15bc0:	sbcs	r0, r1, #0
   15bc4:	bge	15be8 <__assert_fail@plt+0x4c0c>
   15bc8:	mvn	r0, #-2147483648	; 0x80000000
   15bcc:	cmp	r7, #0
   15bd0:	mvn	r6, #0
   15bd4:	mov	r3, #1
   15bd8:	movlt	r0, #-2147483648	; 0x80000000
   15bdc:	movwlt	r6, #0
   15be0:	mov	r7, r0
   15be4:	b	16340 <__assert_fail@plt+0x5364>
   15be8:	lsl	r0, r7, #1
   15bec:	orr	r7, r0, r6, lsr #31
   15bf0:	lsl	r6, r6, #1
   15bf4:	b	16340 <__assert_fail@plt+0x5364>
   15bf8:	ldr	r6, [sp, #8]
   15bfc:	mov	r0, #0
   15c00:	mov	r1, #-2147483648	; 0x80000000
   15c04:	mov	r3, r9
   15c08:	str	r4, [sp, #4]
   15c0c:	mov	r2, r6
   15c10:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15c14:	ldr	r2, [sp, #24]
   15c18:	ldr	r3, [sp, #28]
   15c1c:	mov	r7, #1
   15c20:	mov	r8, #0
   15c24:	mov	r4, #-2147483648	; 0x80000000
   15c28:	subs	r0, r0, r2
   15c2c:	sbcs	r0, r1, r3
   15c30:	blt	15c84 <__assert_fail@plt+0x4ca8>
   15c34:	umull	r8, r0, r6, r2
   15c38:	ldr	r7, [sp, #4]
   15c3c:	mla	r0, r6, r3, r0
   15c40:	mla	r4, r9, r2, r0
   15c44:	cmp	r4, #0
   15c48:	blt	15c84 <__assert_fail@plt+0x4ca8>
   15c4c:	ldr	r3, [sp, #28]
   15c50:	mvn	r0, #0
   15c54:	mvn	r1, #-2147483648	; 0x80000000
   15c58:	str	r7, [sp, #8]
   15c5c:	mvn	r7, #0
   15c60:	mvn	r9, #-2147483648	; 0x80000000
   15c64:	bl	16d50 <__assert_fail@plt+0x5d74>
   15c68:	ldr	r2, [sp, #24]
   15c6c:	ldr	r3, [sp, #28]
   15c70:	subs	r0, r0, r8
   15c74:	mov	r6, #1
   15c78:	sbcs	r0, r1, r4
   15c7c:	bge	15cbc <__assert_fail@plt+0x4ce0>
   15c80:	b	15cd4 <__assert_fail@plt+0x4cf8>
   15c84:	mov	r0, #0
   15c88:	mov	r1, #-2147483648	; 0x80000000
   15c8c:	mov	r2, r8
   15c90:	mov	r3, r4
   15c94:	str	r7, [sp, #8]
   15c98:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15c9c:	ldr	r2, [sp, #24]
   15ca0:	ldr	r3, [sp, #28]
   15ca4:	mov	r6, #1
   15ca8:	mov	r7, #0
   15cac:	mov	r9, #-2147483648	; 0x80000000
   15cb0:	subs	r0, r0, r2
   15cb4:	sbcs	r0, r1, r3
   15cb8:	blt	15d14 <__assert_fail@plt+0x4d38>
   15cbc:	umull	r7, r0, r8, r2
   15cc0:	ldr	r6, [sp, #8]
   15cc4:	mla	r0, r8, r3, r0
   15cc8:	mla	r9, r4, r2, r0
   15ccc:	cmp	r9, #0
   15cd0:	blt	15d14 <__assert_fail@plt+0x4d38>
   15cd4:	ldr	r3, [sp, #28]
   15cd8:	mvn	r0, #0
   15cdc:	mvn	r1, #-2147483648	; 0x80000000
   15ce0:	str	r6, [sp, #8]
   15ce4:	mvn	r8, #0
   15ce8:	mvn	r4, #-2147483648	; 0x80000000
   15cec:	bl	16d50 <__assert_fail@plt+0x5d74>
   15cf0:	ldr	r2, [sp, #24]
   15cf4:	ldr	r3, [sp, #28]
   15cf8:	subs	r0, r0, r7
   15cfc:	sbcs	r0, r1, r9
   15d00:	bge	15d58 <__assert_fail@plt+0x4d7c>
   15d04:	mov	r0, #1
   15d08:	mov	r6, #0
   15d0c:	str	r0, [sp, #8]
   15d10:	b	15d70 <__assert_fail@plt+0x4d94>
   15d14:	mov	r0, #0
   15d18:	mov	r1, #-2147483648	; 0x80000000
   15d1c:	mov	r2, r7
   15d20:	mov	r3, r9
   15d24:	str	r6, [sp, #8]
   15d28:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15d2c:	ldr	r2, [sp, #24]
   15d30:	ldr	r3, [sp, #28]
   15d34:	subs	r0, r0, r2
   15d38:	sbcs	r0, r1, r3
   15d3c:	bge	15d58 <__assert_fail@plt+0x4d7c>
   15d40:	mov	r0, #1
   15d44:	mov	r8, #0
   15d48:	mov	r4, #-2147483648	; 0x80000000
   15d4c:	mov	r6, #0
   15d50:	str	r0, [sp, #8]
   15d54:	b	15da8 <__assert_fail@plt+0x4dcc>
   15d58:	umull	r8, r0, r7, r2
   15d5c:	mov	r6, #0
   15d60:	mla	r0, r7, r3, r0
   15d64:	mla	r4, r9, r2, r0
   15d68:	cmp	r4, #0
   15d6c:	blt	15da8 <__assert_fail@plt+0x4dcc>
   15d70:	ldr	r3, [sp, #28]
   15d74:	mvn	r0, #0
   15d78:	mvn	r1, #-2147483648	; 0x80000000
   15d7c:	mvn	r9, #0
   15d80:	mvn	r7, #-2147483648	; 0x80000000
   15d84:	bl	16d50 <__assert_fail@plt+0x5d74>
   15d88:	ldr	r2, [sp, #24]
   15d8c:	ldr	r3, [sp, #28]
   15d90:	subs	r0, r0, r8
   15d94:	sbcs	r0, r1, r4
   15d98:	bge	15de4 <__assert_fail@plt+0x4e08>
   15d9c:	mov	r0, #1
   15da0:	str	r0, [sp, #8]
   15da4:	b	15df8 <__assert_fail@plt+0x4e1c>
   15da8:	mov	r0, #0
   15dac:	mov	r1, #-2147483648	; 0x80000000
   15db0:	mov	r2, r8
   15db4:	mov	r3, r4
   15db8:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15dbc:	ldr	r2, [sp, #24]
   15dc0:	ldr	r3, [sp, #28]
   15dc4:	subs	r0, r0, r2
   15dc8:	sbcs	r0, r1, r3
   15dcc:	bge	15de4 <__assert_fail@plt+0x4e08>
   15dd0:	mov	r0, #1
   15dd4:	mov	r9, #0
   15dd8:	mov	r7, #-2147483648	; 0x80000000
   15ddc:	str	r0, [sp, #8]
   15de0:	b	15e34 <__assert_fail@plt+0x4e58>
   15de4:	umull	r9, r0, r8, r2
   15de8:	mla	r0, r8, r3, r0
   15dec:	mla	r7, r4, r2, r0
   15df0:	cmp	r7, #0
   15df4:	blt	15e34 <__assert_fail@plt+0x4e58>
   15df8:	ldr	r3, [sp, #28]
   15dfc:	mvn	r0, #0
   15e00:	mvn	r1, #-2147483648	; 0x80000000
   15e04:	mvn	r8, #0
   15e08:	mvn	r4, #-2147483648	; 0x80000000
   15e0c:	bl	16d50 <__assert_fail@plt+0x5d74>
   15e10:	ldr	r2, [sp, #24]
   15e14:	ldr	r3, [sp, #28]
   15e18:	subs	r0, r0, r9
   15e1c:	sbcs	r0, r1, r7
   15e20:	bge	15e74 <__assert_fail@plt+0x4e98>
   15e24:	ldr	r9, [sp, #12]
   15e28:	mov	r0, #1
   15e2c:	str	r0, [sp, #8]
   15e30:	b	15e8c <__assert_fail@plt+0x4eb0>
   15e34:	mov	r0, #0
   15e38:	mov	r1, #-2147483648	; 0x80000000
   15e3c:	mov	r2, r9
   15e40:	mov	r3, r7
   15e44:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15e48:	ldr	r2, [sp, #24]
   15e4c:	ldr	r3, [sp, #28]
   15e50:	subs	r0, r0, r2
   15e54:	sbcs	r0, r1, r3
   15e58:	bge	15e74 <__assert_fail@plt+0x4e98>
   15e5c:	ldr	r9, [sp, #12]
   15e60:	mov	r0, #1
   15e64:	mov	r8, #0
   15e68:	mov	r4, #-2147483648	; 0x80000000
   15e6c:	str	r0, [sp, #8]
   15e70:	b	15edc <__assert_fail@plt+0x4f00>
   15e74:	umull	r8, r0, r9, r2
   15e78:	mla	r0, r9, r3, r0
   15e7c:	ldr	r9, [sp, #12]
   15e80:	mla	r4, r7, r2, r0
   15e84:	cmp	r4, #0
   15e88:	blt	15edc <__assert_fail@plt+0x4f00>
   15e8c:	ldr	r3, [sp, #28]
   15e90:	mvn	r0, #0
   15e94:	mvn	r1, #-2147483648	; 0x80000000
   15e98:	mvn	r6, #0
   15e9c:	bl	16d50 <__assert_fail@plt+0x5d74>
   15ea0:	ldr	r7, [sp, #24]
   15ea4:	ldr	r3, [sp, #28]
   15ea8:	subs	r0, r0, r8
   15eac:	mov	r2, #1
   15eb0:	sbcs	r0, r1, r4
   15eb4:	mvn	r0, #-2147483648	; 0x80000000
   15eb8:	blt	15ecc <__assert_fail@plt+0x4ef0>
   15ebc:	umull	r6, r0, r8, r7
   15ec0:	mov	r2, #0
   15ec4:	mla	r0, r8, r3, r0
   15ec8:	mla	r0, r4, r7, r0
   15ecc:	ldr	r1, [sp, #8]
   15ed0:	mov	r7, r0
   15ed4:	orr	r3, r2, r1
   15ed8:	b	16340 <__assert_fail@plt+0x5364>
   15edc:	mov	r0, #0
   15ee0:	mov	r1, #-2147483648	; 0x80000000
   15ee4:	mov	r2, r8
   15ee8:	mov	r3, r4
   15eec:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15ef0:	ldr	r7, [sp, #24]
   15ef4:	ldr	r3, [sp, #28]
   15ef8:	mov	r2, #1
   15efc:	subs	r0, r0, r7
   15f00:	sbcs	r0, r1, r3
   15f04:	mov	r0, #-2147483648	; 0x80000000
   15f08:	bge	15ebc <__assert_fail@plt+0x4ee0>
   15f0c:	b	15ecc <__assert_fail@plt+0x4ef0>
   15f10:	ldr	r6, [sp, #8]
   15f14:	mov	r0, #0
   15f18:	mov	r1, #-2147483648	; 0x80000000
   15f1c:	mov	r3, r9
   15f20:	str	r4, [sp, #4]
   15f24:	mov	r2, r6
   15f28:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15f2c:	ldr	r2, [sp, #24]
   15f30:	ldr	r3, [sp, #28]
   15f34:	mov	r7, #1
   15f38:	mov	r8, #0
   15f3c:	mov	r4, #-2147483648	; 0x80000000
   15f40:	subs	r0, r0, r2
   15f44:	sbcs	r0, r1, r3
   15f48:	blt	15fa0 <__assert_fail@plt+0x4fc4>
   15f4c:	umull	r8, r0, r6, r2
   15f50:	ldr	r7, [sp, #4]
   15f54:	mla	r0, r6, r3, r0
   15f58:	mla	r4, r9, r2, r0
   15f5c:	cmp	r4, #0
   15f60:	blt	15fa0 <__assert_fail@plt+0x4fc4>
   15f64:	ldr	r3, [sp, #28]
   15f68:	mvn	r0, #0
   15f6c:	mvn	r1, #-2147483648	; 0x80000000
   15f70:	str	r7, [sp, #4]
   15f74:	mvn	r7, #0
   15f78:	mvn	r9, #-2147483648	; 0x80000000
   15f7c:	bl	16d50 <__assert_fail@plt+0x5d74>
   15f80:	ldr	r2, [sp, #24]
   15f84:	ldr	r3, [sp, #28]
   15f88:	subs	r0, r0, r8
   15f8c:	mov	r6, #1
   15f90:	sbcs	r0, r1, r4
   15f94:	str	r6, [sp, #8]
   15f98:	bge	15fdc <__assert_fail@plt+0x5000>
   15f9c:	b	15ff8 <__assert_fail@plt+0x501c>
   15fa0:	mov	r0, #0
   15fa4:	mov	r1, #-2147483648	; 0x80000000
   15fa8:	mov	r2, r8
   15fac:	mov	r3, r4
   15fb0:	str	r7, [sp, #4]
   15fb4:	bl	16c7c <__assert_fail@plt+0x5ca0>
   15fb8:	ldr	r2, [sp, #24]
   15fbc:	ldr	r3, [sp, #28]
   15fc0:	mov	r7, #1
   15fc4:	mov	r9, #-2147483648	; 0x80000000
   15fc8:	str	r7, [sp, #8]
   15fcc:	mov	r7, #0
   15fd0:	subs	r0, r0, r2
   15fd4:	sbcs	r0, r1, r3
   15fd8:	blt	16030 <__assert_fail@plt+0x5054>
   15fdc:	umull	r7, r0, r8, r2
   15fe0:	mla	r0, r8, r3, r0
   15fe4:	mla	r9, r4, r2, r0
   15fe8:	ldr	r0, [sp, #4]
   15fec:	cmp	r9, #0
   15ff0:	str	r0, [sp, #8]
   15ff4:	blt	16030 <__assert_fail@plt+0x5054>
   15ff8:	ldr	r3, [sp, #28]
   15ffc:	mvn	r0, #0
   16000:	mvn	r1, #-2147483648	; 0x80000000
   16004:	mvn	r4, #0
   16008:	mvn	r8, #-2147483648	; 0x80000000
   1600c:	bl	16d50 <__assert_fail@plt+0x5d74>
   16010:	ldr	r2, [sp, #24]
   16014:	ldr	r3, [sp, #28]
   16018:	subs	r0, r0, r7
   1601c:	sbcs	r0, r1, r9
   16020:	bge	1606c <__assert_fail@plt+0x5090>
   16024:	mov	r0, #1
   16028:	str	r0, [sp, #8]
   1602c:	b	16080 <__assert_fail@plt+0x50a4>
   16030:	mov	r0, #0
   16034:	mov	r1, #-2147483648	; 0x80000000
   16038:	mov	r2, r7
   1603c:	mov	r3, r9
   16040:	bl	16c7c <__assert_fail@plt+0x5ca0>
   16044:	ldr	r2, [sp, #24]
   16048:	ldr	r3, [sp, #28]
   1604c:	subs	r0, r0, r2
   16050:	sbcs	r0, r1, r3
   16054:	bge	1606c <__assert_fail@plt+0x5090>
   16058:	mov	r0, #1
   1605c:	mov	r4, #0
   16060:	mov	r8, #-2147483648	; 0x80000000
   16064:	str	r0, [sp, #8]
   16068:	b	160b4 <__assert_fail@plt+0x50d8>
   1606c:	umull	r4, r0, r7, r2
   16070:	mla	r0, r7, r3, r0
   16074:	mla	r8, r9, r2, r0
   16078:	cmp	r8, #0
   1607c:	blt	160b4 <__assert_fail@plt+0x50d8>
   16080:	ldr	r3, [sp, #28]
   16084:	mvn	r0, #0
   16088:	mvn	r1, #-2147483648	; 0x80000000
   1608c:	mvn	r6, #0
   16090:	mvn	r9, #-2147483648	; 0x80000000
   16094:	bl	16d50 <__assert_fail@plt+0x5d74>
   16098:	ldr	r2, [sp, #24]
   1609c:	ldr	r3, [sp, #28]
   160a0:	subs	r0, r0, r4
   160a4:	sbcs	r0, r1, r8
   160a8:	bge	160ec <__assert_fail@plt+0x5110>
   160ac:	mov	r8, #1
   160b0:	b	16104 <__assert_fail@plt+0x5128>
   160b4:	mov	r0, #0
   160b8:	mov	r1, #-2147483648	; 0x80000000
   160bc:	mov	r2, r4
   160c0:	mov	r3, r8
   160c4:	bl	16c7c <__assert_fail@plt+0x5ca0>
   160c8:	ldr	r2, [sp, #24]
   160cc:	ldr	r3, [sp, #28]
   160d0:	subs	r0, r0, r2
   160d4:	sbcs	r0, r1, r3
   160d8:	bge	160ec <__assert_fail@plt+0x5110>
   160dc:	mov	r8, #1
   160e0:	mov	r6, #0
   160e4:	mov	r9, #-2147483648	; 0x80000000
   160e8:	b	16154 <__assert_fail@plt+0x5178>
   160ec:	umull	r6, r0, r4, r2
   160f0:	mla	r0, r4, r3, r0
   160f4:	mla	r9, r8, r2, r0
   160f8:	ldr	r8, [sp, #8]
   160fc:	cmp	r9, #0
   16100:	blt	16154 <__assert_fail@plt+0x5178>
   16104:	ldr	r3, [sp, #28]
   16108:	mvn	r0, #0
   1610c:	mvn	r1, #-2147483648	; 0x80000000
   16110:	mvn	r4, #0
   16114:	mvn	r7, #-2147483648	; 0x80000000
   16118:	bl	16d50 <__assert_fail@plt+0x5d74>
   1611c:	ldr	r3, [sp, #24]
   16120:	ldr	ip, [sp, #28]
   16124:	subs	r0, r0, r6
   16128:	mov	r2, #1
   1612c:	sbcs	r0, r1, r9
   16130:	blt	16144 <__assert_fail@plt+0x5168>
   16134:	umull	r4, r0, r6, r3
   16138:	mov	r2, #0
   1613c:	mla	r0, r6, ip, r0
   16140:	mla	r7, r9, r3, r0
   16144:	ldr	r9, [sp, #12]
   16148:	orr	r3, r2, r8
   1614c:	mov	r6, r4
   16150:	b	16340 <__assert_fail@plt+0x5364>
   16154:	mov	r0, #0
   16158:	mov	r1, #-2147483648	; 0x80000000
   1615c:	mov	r2, r6
   16160:	mov	r3, r9
   16164:	bl	16c7c <__assert_fail@plt+0x5ca0>
   16168:	ldr	r3, [sp, #24]
   1616c:	ldr	ip, [sp, #28]
   16170:	mov	r2, #1
   16174:	mov	r4, #0
   16178:	mov	r7, #-2147483648	; 0x80000000
   1617c:	subs	r0, r0, r3
   16180:	sbcs	r0, r1, ip
   16184:	bge	16134 <__assert_fail@plt+0x5158>
   16188:	b	16144 <__assert_fail@plt+0x5168>
   1618c:	ldr	r6, [sp, #8]
   16190:	mov	r0, #0
   16194:	mov	r1, #-2147483648	; 0x80000000
   16198:	mov	r3, r8
   1619c:	str	r4, [sp, #4]
   161a0:	mov	r2, r6
   161a4:	bl	16c7c <__assert_fail@plt+0x5ca0>
   161a8:	ldr	r2, [sp, #24]
   161ac:	ldr	r3, [sp, #28]
   161b0:	mov	r7, #1
   161b4:	mov	r9, #0
   161b8:	mov	r4, #-2147483648	; 0x80000000
   161bc:	subs	r0, r0, r2
   161c0:	sbcs	r0, r1, r3
   161c4:	blt	1621c <__assert_fail@plt+0x5240>
   161c8:	umull	r9, r0, r6, r2
   161cc:	ldr	r7, [sp, #4]
   161d0:	mla	r0, r6, r3, r0
   161d4:	mla	r4, r8, r2, r0
   161d8:	cmp	r4, #0
   161dc:	blt	1621c <__assert_fail@plt+0x5240>
   161e0:	ldr	r3, [sp, #28]
   161e4:	mvn	r0, #0
   161e8:	mvn	r1, #-2147483648	; 0x80000000
   161ec:	str	r7, [sp, #4]
   161f0:	mvn	r8, #0
   161f4:	mvn	r7, #-2147483648	; 0x80000000
   161f8:	bl	16d50 <__assert_fail@plt+0x5d74>
   161fc:	ldr	r2, [sp, #24]
   16200:	ldr	r3, [sp, #28]
   16204:	subs	r0, r0, r9
   16208:	mov	r6, #1
   1620c:	sbcs	r0, r1, r4
   16210:	str	r6, [sp, #8]
   16214:	bge	16258 <__assert_fail@plt+0x527c>
   16218:	b	16274 <__assert_fail@plt+0x5298>
   1621c:	mov	r0, #0
   16220:	mov	r1, #-2147483648	; 0x80000000
   16224:	mov	r2, r9
   16228:	mov	r3, r4
   1622c:	str	r7, [sp, #4]
   16230:	bl	16c7c <__assert_fail@plt+0x5ca0>
   16234:	ldr	r2, [sp, #24]
   16238:	ldr	r3, [sp, #28]
   1623c:	mov	r7, #1
   16240:	mov	r8, #0
   16244:	str	r7, [sp, #8]
   16248:	mov	r7, #-2147483648	; 0x80000000
   1624c:	subs	r0, r0, r2
   16250:	sbcs	r0, r1, r3
   16254:	blt	162a8 <__assert_fail@plt+0x52cc>
   16258:	umull	r8, r0, r9, r2
   1625c:	mla	r0, r9, r3, r0
   16260:	mla	r7, r4, r2, r0
   16264:	ldr	r0, [sp, #4]
   16268:	cmp	r7, #0
   1626c:	str	r0, [sp, #8]
   16270:	blt	162a8 <__assert_fail@plt+0x52cc>
   16274:	ldr	r3, [sp, #28]
   16278:	mvn	r0, #0
   1627c:	mvn	r1, #-2147483648	; 0x80000000
   16280:	mvn	r4, #0
   16284:	mvn	r9, #-2147483648	; 0x80000000
   16288:	bl	16d50 <__assert_fail@plt+0x5d74>
   1628c:	ldr	r2, [sp, #24]
   16290:	ldr	r3, [sp, #28]
   16294:	subs	r0, r0, r8
   16298:	sbcs	r0, r1, r7
   1629c:	bge	162e0 <__assert_fail@plt+0x5304>
   162a0:	mov	r8, #1
   162a4:	b	162f8 <__assert_fail@plt+0x531c>
   162a8:	mov	r0, #0
   162ac:	mov	r1, #-2147483648	; 0x80000000
   162b0:	mov	r2, r8
   162b4:	mov	r3, r7
   162b8:	bl	16c7c <__assert_fail@plt+0x5ca0>
   162bc:	ldr	r2, [sp, #24]
   162c0:	ldr	r3, [sp, #28]
   162c4:	subs	r0, r0, r2
   162c8:	sbcs	r0, r1, r3
   162cc:	bge	162e0 <__assert_fail@plt+0x5304>
   162d0:	mov	r8, #1
   162d4:	mov	r4, #0
   162d8:	mov	r9, #-2147483648	; 0x80000000
   162dc:	b	16370 <__assert_fail@plt+0x5394>
   162e0:	umull	r4, r0, r8, r2
   162e4:	mla	r0, r8, r3, r0
   162e8:	ldr	r8, [sp, #8]
   162ec:	mla	r9, r7, r2, r0
   162f0:	cmp	r9, #0
   162f4:	blt	16370 <__assert_fail@plt+0x5394>
   162f8:	ldr	r3, [sp, #28]
   162fc:	mvn	r0, #0
   16300:	mvn	r1, #-2147483648	; 0x80000000
   16304:	mvn	r6, #0
   16308:	mvn	r7, #-2147483648	; 0x80000000
   1630c:	bl	16d50 <__assert_fail@plt+0x5d74>
   16310:	ldr	r3, [sp, #24]
   16314:	ldr	ip, [sp, #28]
   16318:	subs	r0, r0, r4
   1631c:	mov	r2, #1
   16320:	sbcs	r0, r1, r9
   16324:	blt	16338 <__assert_fail@plt+0x535c>
   16328:	umull	r6, r0, r4, r3
   1632c:	mov	r2, #0
   16330:	mla	r0, r4, ip, r0
   16334:	mla	r7, r9, r3, r0
   16338:	ldr	r9, [sp, #12]
   1633c:	orr	r3, r2, r8
   16340:	ldr	r1, [sp, #20]
   16344:	ldr	r2, [sp, #16]
   16348:	orr	r5, r3, r5
   1634c:	add	r0, r1, r2
   16350:	str	r0, [sl]
   16354:	ldrb	r0, [r1, r2]
   16358:	cmp	r0, #0
   1635c:	orrne	r5, r5, #2
   16360:	strd	r6, [r9]
   16364:	mov	r0, r5
   16368:	sub	sp, fp, #28
   1636c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16370:	mov	r0, #0
   16374:	mov	r1, #-2147483648	; 0x80000000
   16378:	mov	r2, r4
   1637c:	mov	r3, r9
   16380:	bl	16c7c <__assert_fail@plt+0x5ca0>
   16384:	ldr	r3, [sp, #24]
   16388:	ldr	ip, [sp, #28]
   1638c:	mov	r2, #1
   16390:	mov	r6, #0
   16394:	mov	r7, #-2147483648	; 0x80000000
   16398:	subs	r0, r0, r3
   1639c:	sbcs	r0, r1, ip
   163a0:	bge	16328 <__assert_fail@plt+0x534c>
   163a4:	b	16338 <__assert_fail@plt+0x535c>
   163a8:	ldr	r6, [sp, #8]
   163ac:	mov	r0, #0
   163b0:	mov	r1, #-2147483648	; 0x80000000
   163b4:	mov	r3, r9
   163b8:	str	r4, [sp]
   163bc:	mov	r2, r6
   163c0:	bl	16c7c <__assert_fail@plt+0x5ca0>
   163c4:	ldr	r2, [sp, #24]
   163c8:	ldr	r3, [sp, #28]
   163cc:	mov	r7, #1
   163d0:	mov	r8, #-2147483648	; 0x80000000
   163d4:	subs	r0, r0, r2
   163d8:	sbcs	r0, r1, r3
   163dc:	mov	r0, #0
   163e0:	str	r0, [sp, #4]
   163e4:	blt	16444 <__assert_fail@plt+0x5468>
   163e8:	umull	r1, r0, r6, r2
   163ec:	ldr	r7, [sp]
   163f0:	mla	r0, r6, r3, r0
   163f4:	str	r1, [sp, #4]
   163f8:	mla	r8, r9, r2, r0
   163fc:	cmp	r8, #0
   16400:	blt	16444 <__assert_fail@plt+0x5468>
   16404:	ldr	r3, [sp, #28]
   16408:	mvn	r0, #0
   1640c:	mvn	r1, #-2147483648	; 0x80000000
   16410:	str	r7, [sp]
   16414:	mvn	r7, #0
   16418:	mvn	r4, #-2147483648	; 0x80000000
   1641c:	bl	16d50 <__assert_fail@plt+0x5d74>
   16420:	mov	r6, #1
   16424:	ldr	r2, [sp, #24]
   16428:	ldr	r3, [sp, #28]
   1642c:	str	r6, [sp, #8]
   16430:	ldr	r6, [sp, #4]
   16434:	subs	r0, r0, r6
   16438:	sbcs	r0, r1, r8
   1643c:	bge	16484 <__assert_fail@plt+0x54a8>
   16440:	b	164a0 <__assert_fail@plt+0x54c4>
   16444:	ldr	r6, [sp, #4]
   16448:	mov	r0, #0
   1644c:	mov	r1, #-2147483648	; 0x80000000
   16450:	mov	r3, r8
   16454:	str	r7, [sp]
   16458:	mov	r2, r6
   1645c:	bl	16c7c <__assert_fail@plt+0x5ca0>
   16460:	ldr	r2, [sp, #24]
   16464:	ldr	r3, [sp, #28]
   16468:	mov	r7, #1
   1646c:	mov	r4, #-2147483648	; 0x80000000
   16470:	str	r7, [sp, #8]
   16474:	mov	r7, #0
   16478:	subs	r0, r0, r2
   1647c:	sbcs	r0, r1, r3
   16480:	blt	164d8 <__assert_fail@plt+0x54fc>
   16484:	umull	r7, r0, r6, r2
   16488:	mla	r0, r6, r3, r0
   1648c:	mla	r4, r8, r2, r0
   16490:	ldr	r0, [sp]
   16494:	cmp	r4, #0
   16498:	str	r0, [sp, #8]
   1649c:	blt	164d8 <__assert_fail@plt+0x54fc>
   164a0:	ldr	r3, [sp, #28]
   164a4:	mvn	r0, #0
   164a8:	mvn	r1, #-2147483648	; 0x80000000
   164ac:	mvn	r9, #0
   164b0:	mvn	r8, #-2147483648	; 0x80000000
   164b4:	bl	16d50 <__assert_fail@plt+0x5d74>
   164b8:	ldr	r2, [sp, #24]
   164bc:	ldr	r3, [sp, #28]
   164c0:	subs	r0, r0, r7
   164c4:	sbcs	r0, r1, r4
   164c8:	bge	16514 <__assert_fail@plt+0x5538>
   164cc:	mov	r0, #1
   164d0:	str	r0, [sp, #8]
   164d4:	b	16528 <__assert_fail@plt+0x554c>
   164d8:	mov	r0, #0
   164dc:	mov	r1, #-2147483648	; 0x80000000
   164e0:	mov	r2, r7
   164e4:	mov	r3, r4
   164e8:	bl	16c7c <__assert_fail@plt+0x5ca0>
   164ec:	ldr	r2, [sp, #24]
   164f0:	ldr	r3, [sp, #28]
   164f4:	subs	r0, r0, r2
   164f8:	sbcs	r0, r1, r3
   164fc:	bge	16514 <__assert_fail@plt+0x5538>
   16500:	mov	r0, #1
   16504:	mov	r9, #0
   16508:	mov	r8, #-2147483648	; 0x80000000
   1650c:	str	r0, [sp, #8]
   16510:	b	16560 <__assert_fail@plt+0x5584>
   16514:	umull	r9, r0, r7, r2
   16518:	mla	r0, r7, r3, r0
   1651c:	mla	r8, r4, r2, r0
   16520:	cmp	r8, #0
   16524:	blt	16560 <__assert_fail@plt+0x5584>
   16528:	ldr	r3, [sp, #28]
   1652c:	mvn	r0, #0
   16530:	mvn	r1, #-2147483648	; 0x80000000
   16534:	mvn	r4, #0
   16538:	mvn	r7, #-2147483648	; 0x80000000
   1653c:	bl	16d50 <__assert_fail@plt+0x5d74>
   16540:	ldr	r2, [sp, #24]
   16544:	ldr	r3, [sp, #28]
   16548:	subs	r0, r0, r9
   1654c:	sbcs	r0, r1, r8
   16550:	bge	1659c <__assert_fail@plt+0x55c0>
   16554:	mov	r0, #1
   16558:	str	r0, [sp, #8]
   1655c:	b	165b0 <__assert_fail@plt+0x55d4>
   16560:	mov	r0, #0
   16564:	mov	r1, #-2147483648	; 0x80000000
   16568:	mov	r2, r9
   1656c:	mov	r3, r8
   16570:	bl	16c7c <__assert_fail@plt+0x5ca0>
   16574:	ldr	r2, [sp, #24]
   16578:	ldr	r3, [sp, #28]
   1657c:	subs	r0, r0, r2
   16580:	sbcs	r0, r1, r3
   16584:	bge	1659c <__assert_fail@plt+0x55c0>
   16588:	mov	r0, #1
   1658c:	mov	r4, #0
   16590:	mov	r7, #-2147483648	; 0x80000000
   16594:	str	r0, [sp, #8]
   16598:	b	165e8 <__assert_fail@plt+0x560c>
   1659c:	umull	r4, r0, r9, r2
   165a0:	mla	r0, r9, r3, r0
   165a4:	mla	r7, r8, r2, r0
   165a8:	cmp	r7, #0
   165ac:	blt	165e8 <__assert_fail@plt+0x560c>
   165b0:	ldr	r3, [sp, #28]
   165b4:	mvn	r0, #0
   165b8:	mvn	r1, #-2147483648	; 0x80000000
   165bc:	mvn	r8, #0
   165c0:	mvn	r9, #-2147483648	; 0x80000000
   165c4:	bl	16d50 <__assert_fail@plt+0x5d74>
   165c8:	ldr	r2, [sp, #24]
   165cc:	ldr	r3, [sp, #28]
   165d0:	subs	r0, r0, r4
   165d4:	sbcs	r0, r1, r7
   165d8:	bge	16624 <__assert_fail@plt+0x5648>
   165dc:	mov	r0, #1
   165e0:	str	r0, [sp, #8]
   165e4:	b	16638 <__assert_fail@plt+0x565c>
   165e8:	mov	r0, #0
   165ec:	mov	r1, #-2147483648	; 0x80000000
   165f0:	mov	r2, r4
   165f4:	mov	r3, r7
   165f8:	bl	16c7c <__assert_fail@plt+0x5ca0>
   165fc:	ldr	r2, [sp, #24]
   16600:	ldr	r3, [sp, #28]
   16604:	subs	r0, r0, r2
   16608:	sbcs	r0, r1, r3
   1660c:	bge	16624 <__assert_fail@plt+0x5648>
   16610:	mov	r0, #1
   16614:	mov	r8, #0
   16618:	mov	r9, #-2147483648	; 0x80000000
   1661c:	str	r0, [sp, #8]
   16620:	b	16674 <__assert_fail@plt+0x5698>
   16624:	umull	r8, r0, r4, r2
   16628:	mla	r0, r4, r3, r0
   1662c:	mla	r9, r7, r2, r0
   16630:	cmp	r9, #0
   16634:	blt	16674 <__assert_fail@plt+0x5698>
   16638:	ldr	r3, [sp, #28]
   1663c:	mvn	r0, #0
   16640:	mvn	r1, #-2147483648	; 0x80000000
   16644:	mvn	r4, #0
   16648:	mvn	r6, #-2147483648	; 0x80000000
   1664c:	bl	16d50 <__assert_fail@plt+0x5d74>
   16650:	ldr	r2, [sp, #24]
   16654:	ldr	r3, [sp, #28]
   16658:	subs	r0, r0, r8
   1665c:	sbcs	r0, r1, r9
   16660:	bge	166b4 <__assert_fail@plt+0x56d8>
   16664:	ldr	r9, [sp, #12]
   16668:	mov	r0, #1
   1666c:	str	r0, [sp, #8]
   16670:	b	166cc <__assert_fail@plt+0x56f0>
   16674:	mov	r0, #0
   16678:	mov	r1, #-2147483648	; 0x80000000
   1667c:	mov	r2, r8
   16680:	mov	r3, r9
   16684:	bl	16c7c <__assert_fail@plt+0x5ca0>
   16688:	ldr	r2, [sp, #24]
   1668c:	ldr	r3, [sp, #28]
   16690:	subs	r0, r0, r2
   16694:	sbcs	r0, r1, r3
   16698:	bge	166b4 <__assert_fail@plt+0x56d8>
   1669c:	ldr	r9, [sp, #12]
   166a0:	mov	r0, #1
   166a4:	mov	r4, #0
   166a8:	mov	r6, #-2147483648	; 0x80000000
   166ac:	str	r0, [sp, #8]
   166b0:	b	16718 <__assert_fail@plt+0x573c>
   166b4:	umull	r4, r0, r8, r2
   166b8:	mla	r0, r8, r3, r0
   166bc:	mla	r6, r9, r2, r0
   166c0:	ldr	r9, [sp, #12]
   166c4:	cmp	r6, #0
   166c8:	blt	16718 <__assert_fail@plt+0x573c>
   166cc:	ldr	r3, [sp, #28]
   166d0:	mvn	r0, #0
   166d4:	mvn	r1, #-2147483648	; 0x80000000
   166d8:	mov	r8, r6
   166dc:	mvn	r6, #0
   166e0:	mvn	r7, #-2147483648	; 0x80000000
   166e4:	bl	16d50 <__assert_fail@plt+0x5d74>
   166e8:	ldr	r3, [sp, #24]
   166ec:	ldr	ip, [sp, #28]
   166f0:	subs	r0, r0, r4
   166f4:	mov	r2, #1
   166f8:	sbcs	r0, r1, r8
   166fc:	blt	16710 <__assert_fail@plt+0x5734>
   16700:	umull	r6, r0, r4, r3
   16704:	mov	r2, #0
   16708:	mla	r0, r4, ip, r0
   1670c:	mla	r7, r8, r3, r0
   16710:	ldr	r0, [sp, #8]
   16714:	b	1585c <__assert_fail@plt+0x4880>
   16718:	mov	r0, #0
   1671c:	mov	r1, #-2147483648	; 0x80000000
   16720:	mov	r2, r4
   16724:	mov	r3, r6
   16728:	bl	16c7c <__assert_fail@plt+0x5ca0>
   1672c:	ldr	r3, [sp, #24]
   16730:	ldr	ip, [sp, #28]
   16734:	mov	r8, r6
   16738:	mov	r2, #1
   1673c:	mov	r6, #0
   16740:	mov	r7, #-2147483648	; 0x80000000
   16744:	subs	r0, r0, r3
   16748:	sbcs	r0, r1, ip
   1674c:	bge	16700 <__assert_fail@plt+0x5724>
   16750:	b	16710 <__assert_fail@plt+0x5734>
   16754:	movw	r0, #31813	; 0x7c45
   16758:	movw	r1, #31851	; 0x7c6b
   1675c:	movw	r3, #31867	; 0x7c7b
   16760:	mov	r2, #85	; 0x55
   16764:	movt	r0, #1
   16768:	movt	r1, #1
   1676c:	movt	r3, #1
   16770:	bl	10fdc <__assert_fail@plt>
   16774:	clz	r2, r1
   16778:	clz	r3, r0
   1677c:	lsr	r2, r2, #5
   16780:	lsr	r3, r3, #5
   16784:	orrs	r2, r3, r2
   16788:	movwne	r1, #1
   1678c:	movwne	r0, #1
   16790:	cmp	r1, #0
   16794:	beq	167c4 <__assert_fail@plt+0x57e8>
   16798:	mvn	r2, #-2147483648	; 0x80000000
   1679c:	udiv	r2, r2, r1
   167a0:	cmp	r2, r0
   167a4:	bcs	167c4 <__assert_fail@plt+0x57e8>
   167a8:	push	{fp, lr}
   167ac:	mov	fp, sp
   167b0:	bl	10f10 <__errno_location@plt>
   167b4:	mov	r1, #12
   167b8:	str	r1, [r0]
   167bc:	mov	r0, #0
   167c0:	pop	{fp, pc}
   167c4:	b	10d90 <calloc@plt>
   167c8:	cmp	r0, #0
   167cc:	movweq	r0, #1
   167d0:	cmn	r0, #1
   167d4:	ble	167dc <__assert_fail@plt+0x5800>
   167d8:	b	10ea4 <malloc@plt>
   167dc:	push	{fp, lr}
   167e0:	mov	fp, sp
   167e4:	bl	10f10 <__errno_location@plt>
   167e8:	mov	r1, #12
   167ec:	str	r1, [r0]
   167f0:	mov	r0, #0
   167f4:	pop	{fp, pc}
   167f8:	push	{fp, lr}
   167fc:	mov	fp, sp
   16800:	cmp	r0, #0
   16804:	beq	16820 <__assert_fail@plt+0x5844>
   16808:	cmp	r1, #0
   1680c:	beq	1682c <__assert_fail@plt+0x5850>
   16810:	cmn	r1, #1
   16814:	ble	16838 <__assert_fail@plt+0x585c>
   16818:	pop	{fp, lr}
   1681c:	b	10e20 <realloc@plt>
   16820:	mov	r0, r1
   16824:	pop	{fp, lr}
   16828:	b	167c8 <__assert_fail@plt+0x57ec>
   1682c:	bl	169d4 <__assert_fail@plt+0x59f8>
   16830:	mov	r0, #0
   16834:	pop	{fp, pc}
   16838:	bl	10f10 <__errno_location@plt>
   1683c:	mov	r1, #12
   16840:	str	r1, [r0]
   16844:	mov	r0, #0
   16848:	pop	{fp, pc}
   1684c:	push	{r4, r5, r6, sl, fp, lr}
   16850:	add	fp, sp, #16
   16854:	mov	r4, r0
   16858:	bl	10e74 <__fpending@plt>
   1685c:	ldr	r6, [r4]
   16860:	mov	r5, r0
   16864:	mov	r0, r4
   16868:	bl	168d0 <__assert_fail@plt+0x58f4>
   1686c:	tst	r6, #32
   16870:	bne	168a8 <__assert_fail@plt+0x58cc>
   16874:	cmp	r0, #0
   16878:	mov	r4, r0
   1687c:	mvnne	r4, #0
   16880:	cmp	r5, #0
   16884:	bne	168b4 <__assert_fail@plt+0x58d8>
   16888:	cmp	r0, #0
   1688c:	beq	168b4 <__assert_fail@plt+0x58d8>
   16890:	bl	10f10 <__errno_location@plt>
   16894:	ldr	r0, [r0]
   16898:	subs	r4, r0, #9
   1689c:	mvnne	r4, #0
   168a0:	mov	r0, r4
   168a4:	pop	{r4, r5, r6, sl, fp, pc}
   168a8:	mvn	r4, #0
   168ac:	cmp	r0, #0
   168b0:	beq	168bc <__assert_fail@plt+0x58e0>
   168b4:	mov	r0, r4
   168b8:	pop	{r4, r5, r6, sl, fp, pc}
   168bc:	bl	10f10 <__errno_location@plt>
   168c0:	mov	r1, #0
   168c4:	str	r1, [r0]
   168c8:	mov	r0, r4
   168cc:	pop	{r4, r5, r6, sl, fp, pc}
   168d0:	push	{r4, r5, r6, sl, fp, lr}
   168d4:	add	fp, sp, #16
   168d8:	sub	sp, sp, #8
   168dc:	mov	r4, r0
   168e0:	bl	10f40 <fileno@plt>
   168e4:	cmn	r0, #1
   168e8:	ble	1695c <__assert_fail@plt+0x5980>
   168ec:	mov	r0, r4
   168f0:	bl	10ebc <__freading@plt>
   168f4:	cmp	r0, #0
   168f8:	beq	16924 <__assert_fail@plt+0x5948>
   168fc:	mov	r0, r4
   16900:	bl	10f40 <fileno@plt>
   16904:	mov	r1, #1
   16908:	mov	r2, #0
   1690c:	mov	r3, #0
   16910:	str	r1, [sp]
   16914:	bl	10e5c <lseek64@plt>
   16918:	and	r0, r0, r1
   1691c:	cmn	r0, #1
   16920:	beq	1695c <__assert_fail@plt+0x5980>
   16924:	mov	r0, r4
   16928:	bl	1696c <__assert_fail@plt+0x5990>
   1692c:	cmp	r0, #0
   16930:	beq	1695c <__assert_fail@plt+0x5980>
   16934:	bl	10f10 <__errno_location@plt>
   16938:	ldr	r6, [r0]
   1693c:	mov	r5, r0
   16940:	mov	r0, r4
   16944:	bl	10f58 <fclose@plt>
   16948:	cmp	r6, #0
   1694c:	strne	r6, [r5]
   16950:	mvnne	r0, #0
   16954:	sub	sp, fp, #16
   16958:	pop	{r4, r5, r6, sl, fp, pc}
   1695c:	mov	r0, r4
   16960:	sub	sp, fp, #16
   16964:	pop	{r4, r5, r6, sl, fp, lr}
   16968:	b	10f58 <fclose@plt>
   1696c:	push	{r4, sl, fp, lr}
   16970:	add	fp, sp, #8
   16974:	sub	sp, sp, #8
   16978:	mov	r4, r0
   1697c:	cmp	r0, #0
   16980:	beq	1699c <__assert_fail@plt+0x59c0>
   16984:	mov	r0, r4
   16988:	bl	10ebc <__freading@plt>
   1698c:	cmp	r0, #0
   16990:	ldrbne	r0, [r4, #1]
   16994:	tstne	r0, #1
   16998:	bne	169ac <__assert_fail@plt+0x59d0>
   1699c:	mov	r0, r4
   169a0:	sub	sp, fp, #8
   169a4:	pop	{r4, sl, fp, lr}
   169a8:	b	10dc0 <fflush@plt>
   169ac:	mov	r0, #1
   169b0:	mov	r2, #0
   169b4:	mov	r3, #0
   169b8:	str	r0, [sp]
   169bc:	mov	r0, r4
   169c0:	bl	169fc <__assert_fail@plt+0x5a20>
   169c4:	mov	r0, r4
   169c8:	sub	sp, fp, #8
   169cc:	pop	{r4, sl, fp, lr}
   169d0:	b	10dc0 <fflush@plt>
   169d4:	push	{r4, r5, r6, sl, fp, lr}
   169d8:	add	fp, sp, #16
   169dc:	mov	r4, r0
   169e0:	bl	10f10 <__errno_location@plt>
   169e4:	ldr	r6, [r0]
   169e8:	mov	r5, r0
   169ec:	mov	r0, r4
   169f0:	bl	10dcc <free@plt>
   169f4:	str	r6, [r5]
   169f8:	pop	{r4, r5, r6, sl, fp, pc}
   169fc:	push	{r4, r5, r6, r7, fp, lr}
   16a00:	add	fp, sp, #16
   16a04:	sub	sp, sp, #8
   16a08:	mov	r4, r0
   16a0c:	ldr	r0, [r0, #4]
   16a10:	mov	r5, r3
   16a14:	mov	r6, r2
   16a18:	ldr	r1, [r4, #8]
   16a1c:	cmp	r1, r0
   16a20:	bne	16a3c <__assert_fail@plt+0x5a60>
   16a24:	ldrd	r0, [r4, #16]
   16a28:	cmp	r1, r0
   16a2c:	bne	16a3c <__assert_fail@plt+0x5a60>
   16a30:	ldr	r0, [r4, #36]	; 0x24
   16a34:	cmp	r0, #0
   16a38:	beq	16a54 <__assert_fail@plt+0x5a78>
   16a3c:	mov	r0, r4
   16a40:	mov	r2, r6
   16a44:	mov	r3, r5
   16a48:	sub	sp, fp, #16
   16a4c:	pop	{r4, r5, r6, r7, fp, lr}
   16a50:	b	10f64 <fseeko64@plt>
   16a54:	ldr	r7, [fp, #8]
   16a58:	mov	r0, r4
   16a5c:	bl	10f40 <fileno@plt>
   16a60:	mov	r2, r6
   16a64:	mov	r3, r5
   16a68:	str	r7, [sp]
   16a6c:	bl	10e5c <lseek64@plt>
   16a70:	and	r2, r0, r1
   16a74:	cmn	r2, #1
   16a78:	mvneq	r0, #0
   16a7c:	subeq	sp, fp, #16
   16a80:	popeq	{r4, r5, r6, r7, fp, pc}
   16a84:	strd	r0, [r4, #80]	; 0x50
   16a88:	ldr	r0, [r4]
   16a8c:	bic	r0, r0, #16
   16a90:	str	r0, [r4]
   16a94:	mov	r0, #0
   16a98:	sub	sp, fp, #16
   16a9c:	pop	{r4, r5, r6, r7, fp, pc}
   16aa0:	push	{fp, lr}
   16aa4:	mov	fp, sp
   16aa8:	mov	r0, #14
   16aac:	bl	10f88 <nl_langinfo@plt>
   16ab0:	movw	r1, #30356	; 0x7694
   16ab4:	cmp	r0, #0
   16ab8:	movt	r1, #1
   16abc:	movne	r1, r0
   16ac0:	movw	r0, #31945	; 0x7cc9
   16ac4:	ldrb	r2, [r1]
   16ac8:	movt	r0, #1
   16acc:	cmp	r2, #0
   16ad0:	movne	r0, r1
   16ad4:	pop	{fp, pc}
   16ad8:	push	{r4, r5, r6, r7, fp, lr}
   16adc:	add	fp, sp, #16
   16ae0:	sub	sp, sp, #8
   16ae4:	add	r5, sp, #4
   16ae8:	cmp	r0, #0
   16aec:	mov	r7, r2
   16af0:	mov	r4, r1
   16af4:	movne	r5, r0
   16af8:	mov	r0, r5
   16afc:	bl	10e80 <mbrtowc@plt>
   16b00:	mov	r6, r0
   16b04:	cmp	r7, #0
   16b08:	beq	16b2c <__assert_fail@plt+0x5b50>
   16b0c:	cmn	r6, #2
   16b10:	bcc	16b2c <__assert_fail@plt+0x5b50>
   16b14:	mov	r0, #0
   16b18:	bl	16b74 <__assert_fail@plt+0x5b98>
   16b1c:	cmp	r0, #0
   16b20:	ldrbeq	r0, [r4]
   16b24:	moveq	r6, #1
   16b28:	streq	r0, [r5]
   16b2c:	mov	r0, r6
   16b30:	sub	sp, fp, #16
   16b34:	pop	{r4, r5, r6, r7, fp, pc}
   16b38:	cmp	r2, #0
   16b3c:	beq	16b6c <__assert_fail@plt+0x5b90>
   16b40:	mvn	r3, #0
   16b44:	udiv	r3, r3, r2
   16b48:	cmp	r3, r1
   16b4c:	bcs	16b6c <__assert_fail@plt+0x5b90>
   16b50:	push	{fp, lr}
   16b54:	mov	fp, sp
   16b58:	bl	10f10 <__errno_location@plt>
   16b5c:	mov	r1, #12
   16b60:	str	r1, [r0]
   16b64:	mov	r0, #0
   16b68:	pop	{fp, pc}
   16b6c:	mul	r1, r2, r1
   16b70:	b	167f8 <__assert_fail@plt+0x581c>
   16b74:	push	{r4, sl, fp, lr}
   16b78:	add	fp, sp, #8
   16b7c:	sub	sp, sp, #264	; 0x108
   16b80:	add	r1, sp, #7
   16b84:	movw	r2, #257	; 0x101
   16b88:	bl	16bd8 <__assert_fail@plt+0x5bfc>
   16b8c:	mov	r4, #0
   16b90:	cmp	r0, #0
   16b94:	bne	16bcc <__assert_fail@plt+0x5bf0>
   16b98:	movw	r1, #31951	; 0x7ccf
   16b9c:	add	r0, sp, #7
   16ba0:	movt	r1, #1
   16ba4:	bl	10db4 <strcmp@plt>
   16ba8:	cmp	r0, #0
   16bac:	beq	16bcc <__assert_fail@plt+0x5bf0>
   16bb0:	movw	r1, #31953	; 0x7cd1
   16bb4:	add	r0, sp, #7
   16bb8:	movt	r1, #1
   16bbc:	bl	10db4 <strcmp@plt>
   16bc0:	mov	r4, r0
   16bc4:	cmp	r0, #0
   16bc8:	movwne	r4, #1
   16bcc:	mov	r0, r4
   16bd0:	sub	sp, fp, #8
   16bd4:	pop	{r4, sl, fp, pc}
   16bd8:	push	{r4, r5, r6, r7, fp, lr}
   16bdc:	add	fp, sp, #16
   16be0:	mov	r4, r1
   16be4:	mov	r1, #0
   16be8:	mov	r6, r2
   16bec:	bl	10f70 <setlocale@plt>
   16bf0:	cmp	r0, #0
   16bf4:	beq	16c24 <__assert_fail@plt+0x5c48>
   16bf8:	mov	r7, r0
   16bfc:	bl	10ef8 <strlen@plt>
   16c00:	cmp	r0, r6
   16c04:	bcs	16c44 <__assert_fail@plt+0x5c68>
   16c08:	add	r2, r0, #1
   16c0c:	mov	r0, r4
   16c10:	mov	r1, r7
   16c14:	bl	10de4 <memcpy@plt>
   16c18:	mov	r5, #0
   16c1c:	mov	r0, r5
   16c20:	pop	{r4, r5, r6, r7, fp, pc}
   16c24:	cmp	r6, #0
   16c28:	mov	r5, #22
   16c2c:	movne	r0, #0
   16c30:	strbne	r0, [r4]
   16c34:	movne	r0, r5
   16c38:	popne	{r4, r5, r6, r7, fp, pc}
   16c3c:	mov	r0, r5
   16c40:	pop	{r4, r5, r6, r7, fp, pc}
   16c44:	mov	r5, #34	; 0x22
   16c48:	cmp	r6, #0
   16c4c:	beq	16c6c <__assert_fail@plt+0x5c90>
   16c50:	sub	r6, r6, #1
   16c54:	mov	r0, r4
   16c58:	mov	r1, r7
   16c5c:	mov	r2, r6
   16c60:	bl	10de4 <memcpy@plt>
   16c64:	mov	r0, #0
   16c68:	strb	r0, [r4, r6]
   16c6c:	mov	r0, r5
   16c70:	pop	{r4, r5, r6, r7, fp, pc}
   16c74:	mov	r1, #0
   16c78:	b	10f70 <setlocale@plt>
   16c7c:	cmp	r3, #0
   16c80:	cmpeq	r2, #0
   16c84:	bne	16ca8 <__assert_fail@plt+0x5ccc>
   16c88:	cmp	r1, #0
   16c8c:	movlt	r1, #-2147483648	; 0x80000000
   16c90:	movlt	r0, #0
   16c94:	blt	16ca4 <__assert_fail@plt+0x5cc8>
   16c98:	cmpeq	r0, #0
   16c9c:	mvnne	r1, #-2147483648	; 0x80000000
   16ca0:	mvnne	r0, #0
   16ca4:	b	16d8c <__assert_fail@plt+0x5db0>
   16ca8:	sub	sp, sp, #8
   16cac:	push	{sp, lr}
   16cb0:	cmp	r1, #0
   16cb4:	blt	16cd4 <__assert_fail@plt+0x5cf8>
   16cb8:	cmp	r3, #0
   16cbc:	blt	16d08 <__assert_fail@plt+0x5d2c>
   16cc0:	bl	16d9c <__assert_fail@plt+0x5dc0>
   16cc4:	ldr	lr, [sp, #4]
   16cc8:	add	sp, sp, #8
   16ccc:	pop	{r2, r3}
   16cd0:	bx	lr
   16cd4:	rsbs	r0, r0, #0
   16cd8:	sbc	r1, r1, r1, lsl #1
   16cdc:	cmp	r3, #0
   16ce0:	blt	16d2c <__assert_fail@plt+0x5d50>
   16ce4:	bl	16d9c <__assert_fail@plt+0x5dc0>
   16ce8:	ldr	lr, [sp, #4]
   16cec:	add	sp, sp, #8
   16cf0:	pop	{r2, r3}
   16cf4:	rsbs	r0, r0, #0
   16cf8:	sbc	r1, r1, r1, lsl #1
   16cfc:	rsbs	r2, r2, #0
   16d00:	sbc	r3, r3, r3, lsl #1
   16d04:	bx	lr
   16d08:	rsbs	r2, r2, #0
   16d0c:	sbc	r3, r3, r3, lsl #1
   16d10:	bl	16d9c <__assert_fail@plt+0x5dc0>
   16d14:	ldr	lr, [sp, #4]
   16d18:	add	sp, sp, #8
   16d1c:	pop	{r2, r3}
   16d20:	rsbs	r0, r0, #0
   16d24:	sbc	r1, r1, r1, lsl #1
   16d28:	bx	lr
   16d2c:	rsbs	r2, r2, #0
   16d30:	sbc	r3, r3, r3, lsl #1
   16d34:	bl	16d9c <__assert_fail@plt+0x5dc0>
   16d38:	ldr	lr, [sp, #4]
   16d3c:	add	sp, sp, #8
   16d40:	pop	{r2, r3}
   16d44:	rsbs	r2, r2, #0
   16d48:	sbc	r3, r3, r3, lsl #1
   16d4c:	bx	lr
   16d50:	cmp	r3, #0
   16d54:	cmpeq	r2, #0
   16d58:	bne	16d70 <__assert_fail@plt+0x5d94>
   16d5c:	cmp	r1, #0
   16d60:	cmpeq	r0, #0
   16d64:	mvnne	r1, #0
   16d68:	mvnne	r0, #0
   16d6c:	b	16d8c <__assert_fail@plt+0x5db0>
   16d70:	sub	sp, sp, #8
   16d74:	push	{sp, lr}
   16d78:	bl	16d9c <__assert_fail@plt+0x5dc0>
   16d7c:	ldr	lr, [sp, #4]
   16d80:	add	sp, sp, #8
   16d84:	pop	{r2, r3}
   16d88:	bx	lr
   16d8c:	push	{r1, lr}
   16d90:	mov	r0, #8
   16d94:	bl	10da8 <raise@plt>
   16d98:	pop	{r1, pc}
   16d9c:	cmp	r1, r3
   16da0:	cmpeq	r0, r2
   16da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da8:	mov	r4, r0
   16dac:	movcc	r0, #0
   16db0:	mov	r5, r1
   16db4:	ldr	lr, [sp, #36]	; 0x24
   16db8:	movcc	r1, r0
   16dbc:	bcc	16eb8 <__assert_fail@plt+0x5edc>
   16dc0:	cmp	r3, #0
   16dc4:	clzeq	ip, r2
   16dc8:	clzne	ip, r3
   16dcc:	addeq	ip, ip, #32
   16dd0:	cmp	r5, #0
   16dd4:	clzeq	r1, r4
   16dd8:	addeq	r1, r1, #32
   16ddc:	clzne	r1, r5
   16de0:	sub	ip, ip, r1
   16de4:	sub	sl, ip, #32
   16de8:	lsl	r9, r3, ip
   16dec:	rsb	fp, ip, #32
   16df0:	orr	r9, r9, r2, lsl sl
   16df4:	orr	r9, r9, r2, lsr fp
   16df8:	lsl	r8, r2, ip
   16dfc:	cmp	r5, r9
   16e00:	cmpeq	r4, r8
   16e04:	movcc	r0, #0
   16e08:	movcc	r1, r0
   16e0c:	bcc	16e28 <__assert_fail@plt+0x5e4c>
   16e10:	mov	r0, #1
   16e14:	subs	r4, r4, r8
   16e18:	lsl	r1, r0, sl
   16e1c:	orr	r1, r1, r0, lsr fp
   16e20:	lsl	r0, r0, ip
   16e24:	sbc	r5, r5, r9
   16e28:	cmp	ip, #0
   16e2c:	beq	16eb8 <__assert_fail@plt+0x5edc>
   16e30:	lsr	r6, r8, #1
   16e34:	orr	r6, r6, r9, lsl #31
   16e38:	lsr	r7, r9, #1
   16e3c:	mov	r2, ip
   16e40:	b	16e64 <__assert_fail@plt+0x5e88>
   16e44:	subs	r3, r4, r6
   16e48:	sbc	r8, r5, r7
   16e4c:	adds	r3, r3, r3
   16e50:	adc	r8, r8, r8
   16e54:	adds	r4, r3, #1
   16e58:	adc	r5, r8, #0
   16e5c:	subs	r2, r2, #1
   16e60:	beq	16e80 <__assert_fail@plt+0x5ea4>
   16e64:	cmp	r5, r7
   16e68:	cmpeq	r4, r6
   16e6c:	bcs	16e44 <__assert_fail@plt+0x5e68>
   16e70:	adds	r4, r4, r4
   16e74:	adc	r5, r5, r5
   16e78:	subs	r2, r2, #1
   16e7c:	bne	16e64 <__assert_fail@plt+0x5e88>
   16e80:	lsr	r3, r4, ip
   16e84:	orr	r3, r3, r5, lsl fp
   16e88:	lsr	r2, r5, ip
   16e8c:	orr	r3, r3, r5, lsr sl
   16e90:	adds	r0, r0, r4
   16e94:	mov	r4, r3
   16e98:	lsl	r3, r2, ip
   16e9c:	orr	r3, r3, r4, lsl sl
   16ea0:	lsl	ip, r4, ip
   16ea4:	orr	r3, r3, r4, lsr fp
   16ea8:	adc	r1, r1, r5
   16eac:	subs	r0, r0, ip
   16eb0:	mov	r5, r2
   16eb4:	sbc	r1, r1, r3
   16eb8:	cmp	lr, #0
   16ebc:	strdne	r4, [lr]
   16ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ec8:	mov	r7, r0
   16ecc:	ldr	r6, [pc, #72]	; 16f1c <__assert_fail@plt+0x5f40>
   16ed0:	ldr	r5, [pc, #72]	; 16f20 <__assert_fail@plt+0x5f44>
   16ed4:	add	r6, pc, r6
   16ed8:	add	r5, pc, r5
   16edc:	sub	r6, r6, r5
   16ee0:	mov	r8, r1
   16ee4:	mov	r9, r2
   16ee8:	bl	10d70 <calloc@plt-0x20>
   16eec:	asrs	r6, r6, #2
   16ef0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ef4:	mov	r4, #0
   16ef8:	add	r4, r4, #1
   16efc:	ldr	r3, [r5], #4
   16f00:	mov	r2, r9
   16f04:	mov	r1, r8
   16f08:	mov	r0, r7
   16f0c:	blx	r3
   16f10:	cmp	r6, r4
   16f14:	bne	16ef8 <__assert_fail@plt+0x5f1c>
   16f18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f1c:	andeq	r1, r1, r0, lsr r0
   16f20:	andeq	r1, r1, r8, lsr #32
   16f24:	bx	lr
   16f28:	ldr	r3, [pc, #12]	; 16f3c <__assert_fail@plt+0x5f60>
   16f2c:	mov	r1, #0
   16f30:	add	r3, pc, r3
   16f34:	ldr	r2, [r3]
   16f38:	b	10f1c <__cxa_atexit@plt>
   16f3c:	andeq	r1, r1, r4, lsr #3

Disassembly of section .fini:

00016f40 <.fini>:
   16f40:	push	{r3, lr}
   16f44:	pop	{r3, pc}
