
../repos/prog2/7.1:     file format elf32-littlearm


Disassembly of section .init:

00010e58 <.init>:
   10e58:	push	{r3, lr}
   10e5c:	bl	10f74 <_start@@Base+0x3c>
   10e60:	pop	{r3, pc}

Disassembly of section .plt:

00010e64 <strcmp@plt-0x14>:
   10e64:	push	{lr}		; (str lr, [sp, #-4]!)
   10e68:	ldr	lr, [pc, #4]	; 10e74 <strcmp@plt-0x4>
   10e6c:	add	lr, pc, lr
   10e70:	ldr	pc, [lr, #8]!
   10e74:	andeq	r1, r1, ip, lsl #3

00010e78 <strcmp@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #69632	; 0x11000
   10e80:	ldr	pc, [ip, #396]!	; 0x18c

00010e84 <printf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #69632	; 0x11000
   10e8c:	ldr	pc, [ip, #388]!	; 0x184

00010e90 <fopen@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #69632	; 0x11000
   10e98:	ldr	pc, [ip, #380]!	; 0x17c

00010e9c <free@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #69632	; 0x11000
   10ea4:	ldr	pc, [ip, #372]!	; 0x174

00010ea8 <realloc@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #69632	; 0x11000
   10eb0:	ldr	pc, [ip, #364]!	; 0x16c

00010eb4 <strcpy@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #69632	; 0x11000
   10ebc:	ldr	pc, [ip, #356]!	; 0x164

00010ec0 <puts@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #69632	; 0x11000
   10ec8:	ldr	pc, [ip, #348]!	; 0x15c

00010ecc <malloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #69632	; 0x11000
   10ed4:	ldr	pc, [ip, #340]!	; 0x154

00010ed8 <__libc_start_main@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #69632	; 0x11000
   10ee0:	ldr	pc, [ip, #332]!	; 0x14c

00010ee4 <__gmon_start__@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #69632	; 0x11000
   10eec:	ldr	pc, [ip, #324]!	; 0x144

00010ef0 <strlen@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #69632	; 0x11000
   10ef8:	ldr	pc, [ip, #316]!	; 0x13c

00010efc <putchar@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #69632	; 0x11000
   10f04:	ldr	pc, [ip, #308]!	; 0x134

00010f08 <fclose@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #69632	; 0x11000
   10f10:	ldr	pc, [ip, #300]!	; 0x12c

00010f14 <strtok@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #69632	; 0x11000
   10f1c:	ldr	pc, [ip, #292]!	; 0x124

00010f20 <fgets_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #69632	; 0x11000
   10f28:	ldr	pc, [ip, #284]!	; 0x11c

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #69632	; 0x11000
   10f34:	ldr	pc, [ip, #276]!	; 0x114

Disassembly of section .text:

00010f38 <_start@@Base>:
   10f38:	mov	fp, #0
   10f3c:	mov	lr, #0
   10f40:	pop	{r1}		; (ldr r1, [sp], #4)
   10f44:	mov	r2, sp
   10f48:	push	{r2}		; (str r2, [sp, #-4]!)
   10f4c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f50:	ldr	ip, [pc, #16]	; 10f68 <_start@@Base+0x30>
   10f54:	push	{ip}		; (str ip, [sp, #-4]!)
   10f58:	ldr	r0, [pc, #12]	; 10f6c <_start@@Base+0x34>
   10f5c:	ldr	r3, [pc, #12]	; 10f70 <_start@@Base+0x38>
   10f60:	bl	10ed8 <__libc_start_main@plt>
   10f64:	bl	10f2c <abort@plt>
   10f68:	andeq	r1, r1, r4, lsl #26
   10f6c:	andeq	r1, r1, r8, lsr #32
   10f70:	andeq	r1, r1, r4, lsr #25
   10f74:	ldr	r3, [pc, #20]	; 10f90 <_start@@Base+0x58>
   10f78:	ldr	r2, [pc, #20]	; 10f94 <_start@@Base+0x5c>
   10f7c:	add	r3, pc, r3
   10f80:	ldr	r2, [r3, r2]
   10f84:	cmp	r2, #0
   10f88:	bxeq	lr
   10f8c:	b	10ee4 <__gmon_start__@plt>
   10f90:	andeq	r1, r1, ip, ror r0
   10f94:	andeq	r0, r0, ip, asr #32
   10f98:	ldr	r0, [pc, #24]	; 10fb8 <_start@@Base+0x80>
   10f9c:	ldr	r3, [pc, #24]	; 10fbc <_start@@Base+0x84>
   10fa0:	cmp	r3, r0
   10fa4:	bxeq	lr
   10fa8:	ldr	r3, [pc, #16]	; 10fc0 <_start@@Base+0x88>
   10fac:	cmp	r3, #0
   10fb0:	bxeq	lr
   10fb4:	bx	r3
   10fb8:	andeq	r2, r2, r8, asr r0
   10fbc:	andeq	r2, r2, r8, asr r0
   10fc0:	andeq	r0, r0, r0
   10fc4:	ldr	r0, [pc, #36]	; 10ff0 <_start@@Base+0xb8>
   10fc8:	ldr	r1, [pc, #36]	; 10ff4 <_start@@Base+0xbc>
   10fcc:	sub	r1, r1, r0
   10fd0:	asr	r1, r1, #2
   10fd4:	add	r1, r1, r1, lsr #31
   10fd8:	asrs	r1, r1, #1
   10fdc:	bxeq	lr
   10fe0:	ldr	r3, [pc, #16]	; 10ff8 <_start@@Base+0xc0>
   10fe4:	cmp	r3, #0
   10fe8:	bxeq	lr
   10fec:	bx	r3
   10ff0:	andeq	r2, r2, r8, asr r0
   10ff4:	andeq	r2, r2, r8, asr r0
   10ff8:	andeq	r0, r0, r0
   10ffc:	push	{r4, lr}
   11000:	ldr	r4, [pc, #24]	; 11020 <_start@@Base+0xe8>
   11004:	ldrb	r3, [r4]
   11008:	cmp	r3, #0
   1100c:	popne	{r4, pc}
   11010:	bl	10f98 <_start@@Base+0x60>
   11014:	mov	r3, #1
   11018:	strb	r3, [r4]
   1101c:	pop	{r4, pc}
   11020:	andeq	r2, r2, r8, asr r0
   11024:	b	10fc4 <_start@@Base+0x8c>

00011028 <main@@Base>:
   11028:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1102c:	add	fp, sp, #24
   11030:	sub	sp, sp, #104	; 0x68
   11034:	movw	r0, #7529	; 0x1d69
   11038:	movt	r0, #1
   1103c:	bl	10ec0 <puts@plt>
   11040:	mov	r5, #0
   11044:	bl	11848 <bst_nova@@Base>
   11048:	mov	r4, r0
   1104c:	movw	r6, #7540	; 0x1d74
   11050:	movt	r6, #1
   11054:	ldr	r1, [r6, r5, lsl #2]
   11058:	mov	r0, r4
   1105c:	bl	11a44 <bst_insere@@Base>
   11060:	add	r5, r5, #1
   11064:	cmp	r5, #10
   11068:	bne	11054 <main@@Base+0x2c>
   1106c:	ldr	r0, [r4]
   11070:	bl	11c50 <bst_altura@@Base>
   11074:	mov	r1, r0
   11078:	movw	r0, #7462	; 0x1d26
   1107c:	movt	r0, #1
   11080:	bl	10e84 <printf@plt>
   11084:	mov	r0, r4
   11088:	bl	11b94 <bst_imprime@@Base>
   1108c:	movw	r0, #7533	; 0x1d6d
   11090:	movt	r0, #1
   11094:	bl	10ec0 <puts@plt>
   11098:	bl	111dc <avl_nova@@Base>
   1109c:	mov	r4, r0
   110a0:	movw	r0, #7482	; 0x1d3a
   110a4:	movt	r0, #1
   110a8:	movw	r1, #7494	; 0x1d46
   110ac:	movt	r1, #1
   110b0:	bl	10e90 <fopen@plt>
   110b4:	mov	r5, r0
   110b8:	add	r6, sp, #4
   110bc:	mov	r0, r6
   110c0:	mov	r1, #100	; 0x64
   110c4:	mov	r2, r5
   110c8:	bl	10f20 <fgets_unlocked@plt>
   110cc:	cmp	r0, #0
   110d0:	beq	11144 <main@@Base+0x11c>
   110d4:	movw	r7, #7496	; 0x1d48
   110d8:	movt	r7, #1
   110dc:	mov	r8, #0
   110e0:	mov	r0, r6
   110e4:	mov	r1, r7
   110e8:	bl	10f14 <strtok@plt>
   110ec:	mov	r1, r0
   110f0:	mov	r0, r6
   110f4:	bl	10eb4 <strcpy@plt>
   110f8:	mov	r0, #0
   110fc:	mov	r1, r7
   11100:	bl	10f14 <strtok@plt>
   11104:	mov	r1, r0
   11108:	mov	r0, r6
   1110c:	bl	10eb4 <strcpy@plt>
   11110:	mov	r0, r6
   11114:	bl	10ef0 <strlen@plt>
   11118:	add	r0, r6, r0
   1111c:	strb	r8, [r0, #-1]
   11120:	mov	r0, r4
   11124:	mov	r1, r6
   11128:	bl	11470 <avl_insere@@Base>
   1112c:	mov	r0, r6
   11130:	mov	r1, #100	; 0x64
   11134:	mov	r2, r5
   11138:	bl	10f20 <fgets_unlocked@plt>
   1113c:	cmp	r0, #0
   11140:	bne	110e0 <main@@Base+0xb8>
   11144:	mov	r0, r5
   11148:	bl	10f08 <fclose@plt>
   1114c:	movw	r1, #7498	; 0x1d4a
   11150:	movt	r1, #1
   11154:	mov	r0, r4
   11158:	bl	113f0 <avl_pesquisa@@Base>
   1115c:	cmp	r0, #0
   11160:	beq	11178 <main@@Base+0x150>
   11164:	ldr	r1, [r0]
   11168:	ldr	r2, [r0, #16]
   1116c:	movw	r0, #7507	; 0x1d53
   11170:	movt	r0, #1
   11174:	bl	10e84 <printf@plt>
   11178:	movw	r1, #7516	; 0x1d5c
   1117c:	movt	r1, #1
   11180:	mov	r0, r4
   11184:	bl	113f0 <avl_pesquisa@@Base>
   11188:	cmp	r0, #0
   1118c:	beq	111a4 <main@@Base+0x17c>
   11190:	ldr	r1, [r0]
   11194:	ldr	r2, [r0, #16]
   11198:	movw	r0, #7507	; 0x1d53
   1119c:	movt	r0, #1
   111a0:	bl	10e84 <printf@plt>
   111a4:	movw	r1, #7522	; 0x1d62
   111a8:	movt	r1, #1
   111ac:	mov	r0, r4
   111b0:	bl	113f0 <avl_pesquisa@@Base>
   111b4:	cmp	r0, #0
   111b8:	beq	111d0 <main@@Base+0x1a8>
   111bc:	ldr	r1, [r0]
   111c0:	ldr	r2, [r0, #16]
   111c4:	movw	r0, #7507	; 0x1d53
   111c8:	movt	r0, #1
   111cc:	bl	10e84 <printf@plt>
   111d0:	mov	r0, #0
   111d4:	sub	sp, fp, #24
   111d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000111dc <avl_nova@@Base>:
   111dc:	push	{fp, lr}
   111e0:	mov	fp, sp
   111e4:	mov	r0, #4
   111e8:	bl	10ecc <malloc@plt>
   111ec:	cmp	r0, #0
   111f0:	moveq	r0, #0
   111f4:	movne	r1, #0
   111f8:	strne	r1, [r0]
   111fc:	pop	{fp, pc}

00011200 <avl_apaga@@Base>:
   11200:	cmp	r0, #0
   11204:	bxeq	lr
   11208:	push	{r4, sl, fp, lr}
   1120c:	add	fp, sp, #8
   11210:	mov	r4, r0
   11214:	ldr	r0, [r0]
   11218:	cmp	r0, #0
   1121c:	beq	11234 <avl_apaga@@Base+0x34>
   11220:	ldr	r1, [r0]
   11224:	bl	11240 <avl_remove_impl@@Base>
   11228:	str	r0, [r4]
   1122c:	cmp	r0, #0
   11230:	bne	11220 <avl_apaga@@Base+0x20>
   11234:	mov	r0, r4
   11238:	pop	{r4, sl, fp, lr}
   1123c:	b	10e9c <free@plt>

00011240 <avl_remove_impl@@Base>:
   11240:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11244:	add	fp, sp, #24
   11248:	mov	r8, #0
   1124c:	cmp	r0, #0
   11250:	beq	113e8 <avl_remove_impl@@Base+0x1a8>
   11254:	mov	r7, r1
   11258:	mov	r4, r0
   1125c:	ldr	r6, [r0]
   11260:	mov	r0, r1
   11264:	mov	r1, r6
   11268:	bl	10e78 <strcmp@plt>
   1126c:	mov	r5, r4
   11270:	cmn	r0, #1
   11274:	bgt	11280 <avl_remove_impl@@Base+0x40>
   11278:	ldr	r0, [r5, #4]!
   1127c:	b	1128c <avl_remove_impl@@Base+0x4c>
   11280:	cmp	r0, #0
   11284:	beq	11334 <avl_remove_impl@@Base+0xf4>
   11288:	ldr	r0, [r5, #8]!
   1128c:	mov	r1, r7
   11290:	bl	11240 <avl_remove_impl@@Base>
   11294:	str	r0, [r5]
   11298:	ldr	r5, [r4, #4]
   1129c:	mov	r0, r5
   112a0:	bl	116c0 <avl_altura@@Base>
   112a4:	mov	r7, r0
   112a8:	ldr	r6, [r4, #8]
   112ac:	mov	r0, r6
   112b0:	bl	116c0 <avl_altura@@Base>
   112b4:	mov	r1, r0
   112b8:	mov	r0, r7
   112bc:	bl	116d0 <max@@Base>
   112c0:	add	r0, r0, #1
   112c4:	str	r0, [r4, #12]
   112c8:	mov	r0, r4
   112cc:	bl	11814 <calc_balanceamento@@Base>
   112d0:	cmp	r0, #2
   112d4:	blt	11300 <avl_remove_impl@@Base+0xc0>
   112d8:	mov	r0, r6
   112dc:	bl	11814 <calc_balanceamento@@Base>
   112e0:	cmn	r0, #1
   112e4:	bgt	112f4 <avl_remove_impl@@Base+0xb4>
   112e8:	mov	r0, r6
   112ec:	bl	11730 <roda_direita@@Base>
   112f0:	str	r0, [r4, #8]
   112f4:	mov	r0, r4
   112f8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   112fc:	b	117a0 <roda_esquerda@@Base>
   11300:	cmn	r0, #2
   11304:	movgt	r0, r4
   11308:	popgt	{r4, r5, r6, r7, r8, sl, fp, pc}
   1130c:	mov	r0, r5
   11310:	bl	11814 <calc_balanceamento@@Base>
   11314:	cmp	r0, #1
   11318:	blt	11328 <avl_remove_impl@@Base+0xe8>
   1131c:	mov	r0, r5
   11320:	bl	117a0 <roda_esquerda@@Base>
   11324:	str	r0, [r4, #4]
   11328:	mov	r0, r4
   1132c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11330:	b	11730 <roda_direita@@Base>
   11334:	ldr	r0, [r5, #8]!
   11338:	ldr	r7, [r5, #-4]
   1133c:	cmp	r7, #0
   11340:	beq	11380 <avl_remove_impl@@Base+0x140>
   11344:	cmp	r0, #0
   11348:	beq	1138c <avl_remove_impl@@Base+0x14c>
   1134c:	bl	11604 <avl_no_valormin@@Base>
   11350:	mov	r7, r0
   11354:	ldr	r0, [r0]
   11358:	bl	10ef0 <strlen@plt>
   1135c:	add	r1, r0, #1
   11360:	mov	r0, r6
   11364:	bl	10ea8 <realloc@plt>
   11368:	str	r0, [r4]
   1136c:	ldr	r1, [r7]
   11370:	bl	10eb4 <strcpy@plt>
   11374:	ldr	r0, [r4, #8]
   11378:	ldr	r1, [r7]
   1137c:	b	11290 <avl_remove_impl@@Base+0x50>
   11380:	cmp	r0, #0
   11384:	mov	r7, r0
   11388:	beq	113c8 <avl_remove_impl@@Base+0x188>
   1138c:	ldr	r0, [r7]
   11390:	bl	10ef0 <strlen@plt>
   11394:	add	r1, r0, #1
   11398:	mov	r0, r6
   1139c:	bl	10ea8 <realloc@plt>
   113a0:	str	r0, [r4]
   113a4:	ldr	r1, [r7]
   113a8:	bl	10eb4 <strcpy@plt>
   113ac:	ldr	r0, [r7, #4]
   113b0:	str	r0, [r4, #4]
   113b4:	ldr	r0, [r7, #8]
   113b8:	str	r0, [r4, #8]
   113bc:	ldr	r0, [r7, #12]
   113c0:	str	r0, [r4, #12]
   113c4:	b	113d0 <avl_remove_impl@@Base+0x190>
   113c8:	mov	r7, r4
   113cc:	mov	r4, #0
   113d0:	ldr	r0, [r7]
   113d4:	bl	10e9c <free@plt>
   113d8:	mov	r0, r7
   113dc:	bl	10e9c <free@plt>
   113e0:	cmp	r4, #0
   113e4:	bne	11298 <avl_remove_impl@@Base+0x58>
   113e8:	mov	r0, r8
   113ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000113f0 <avl_pesquisa@@Base>:
   113f0:	cmp	r0, #0
   113f4:	cmpne	r1, #0
   113f8:	bne	11404 <avl_pesquisa@@Base+0x14>
   113fc:	mov	r0, #0
   11400:	bx	lr
   11404:	ldr	r0, [r0]
   11408:	b	1140c <avl_pesquisa_impl@@Base>

0001140c <avl_pesquisa_impl@@Base>:
   1140c:	push	{r4, r5, r6, sl, fp, lr}
   11410:	add	fp, sp, #16
   11414:	mov	r4, #0
   11418:	cmp	r0, #0
   1141c:	beq	1145c <avl_pesquisa_impl@@Base+0x50>
   11420:	mov	r5, r1
   11424:	mov	r6, r0
   11428:	ldr	r1, [r6]
   1142c:	mov	r0, r5
   11430:	bl	10e78 <strcmp@plt>
   11434:	cmn	r0, #1
   11438:	bgt	11444 <avl_pesquisa_impl@@Base+0x38>
   1143c:	add	r0, r6, #4
   11440:	b	11450 <avl_pesquisa_impl@@Base+0x44>
   11444:	cmp	r0, #0
   11448:	beq	11464 <avl_pesquisa_impl@@Base+0x58>
   1144c:	add	r0, r6, #8
   11450:	ldr	r6, [r0]
   11454:	cmp	r6, #0
   11458:	bne	11428 <avl_pesquisa_impl@@Base+0x1c>
   1145c:	mov	r0, r4
   11460:	pop	{r4, r5, r6, sl, fp, pc}
   11464:	mov	r4, r6
   11468:	mov	r0, r4
   1146c:	pop	{r4, r5, r6, sl, fp, pc}

00011470 <avl_insere@@Base>:
   11470:	push	{r4, sl, fp, lr}
   11474:	add	fp, sp, #8
   11478:	mov	r4, r0
   1147c:	mvn	r0, #0
   11480:	cmp	r4, #0
   11484:	cmpne	r1, #0
   11488:	bne	11490 <avl_insere@@Base+0x20>
   1148c:	pop	{r4, sl, fp, pc}
   11490:	ldr	r0, [r4]
   11494:	bl	114a4 <avl_insere_impl@@Base>
   11498:	str	r0, [r4]
   1149c:	mov	r0, #0
   114a0:	pop	{r4, sl, fp, pc}

000114a4 <avl_insere_impl@@Base>:
   114a4:	push	{r4, r5, r6, r7, fp, lr}
   114a8:	add	fp, sp, #16
   114ac:	mov	r5, r1
   114b0:	cmp	r0, #0
   114b4:	beq	114d8 <avl_insere_impl@@Base+0x34>
   114b8:	mov	r4, r0
   114bc:	ldr	r1, [r0]
   114c0:	mov	r0, r5
   114c4:	bl	10e78 <strcmp@plt>
   114c8:	cmn	r0, #1
   114cc:	bgt	114e4 <avl_insere_impl@@Base+0x40>
   114d0:	add	r6, r4, #4
   114d4:	b	114f0 <avl_insere_impl@@Base+0x4c>
   114d8:	mov	r0, r5
   114dc:	pop	{r4, r5, r6, r7, fp, lr}
   114e0:	b	116dc <avl_novo_no@@Base>
   114e4:	cmp	r0, #0
   114e8:	beq	11598 <avl_insere_impl@@Base+0xf4>
   114ec:	add	r6, r4, #8
   114f0:	ldr	r0, [r6]
   114f4:	mov	r1, r5
   114f8:	bl	114a4 <avl_insere_impl@@Base>
   114fc:	str	r0, [r6]
   11500:	ldr	r5, [r4, #4]
   11504:	mov	r0, r5
   11508:	bl	116c0 <avl_altura@@Base>
   1150c:	mov	r7, r0
   11510:	ldr	r6, [r4, #8]
   11514:	mov	r0, r6
   11518:	bl	116c0 <avl_altura@@Base>
   1151c:	mov	r1, r0
   11520:	mov	r0, r7
   11524:	bl	116d0 <max@@Base>
   11528:	add	r0, r0, #1
   1152c:	str	r0, [r4, #12]
   11530:	mov	r0, r4
   11534:	bl	11814 <calc_balanceamento@@Base>
   11538:	cmp	r0, #2
   1153c:	blt	11568 <avl_insere_impl@@Base+0xc4>
   11540:	mov	r0, r6
   11544:	bl	11814 <calc_balanceamento@@Base>
   11548:	cmn	r0, #1
   1154c:	bgt	1155c <avl_insere_impl@@Base+0xb8>
   11550:	mov	r0, r6
   11554:	bl	11730 <roda_direita@@Base>
   11558:	str	r0, [r4, #8]
   1155c:	mov	r0, r4
   11560:	pop	{r4, r5, r6, r7, fp, lr}
   11564:	b	117a0 <roda_esquerda@@Base>
   11568:	cmn	r0, #2
   1156c:	bgt	115a4 <avl_insere_impl@@Base+0x100>
   11570:	mov	r0, r5
   11574:	bl	11814 <calc_balanceamento@@Base>
   11578:	cmp	r0, #1
   1157c:	blt	1158c <avl_insere_impl@@Base+0xe8>
   11580:	mov	r0, r5
   11584:	bl	117a0 <roda_esquerda@@Base>
   11588:	str	r0, [r4, #4]
   1158c:	mov	r0, r4
   11590:	pop	{r4, r5, r6, r7, fp, lr}
   11594:	b	11730 <roda_direita@@Base>
   11598:	ldr	r0, [r4, #16]
   1159c:	add	r0, r0, #1
   115a0:	str	r0, [r4, #16]
   115a4:	mov	r0, r4
   115a8:	pop	{r4, r5, r6, r7, fp, pc}

000115ac <avl_remove@@Base>:
   115ac:	push	{r4, sl, fp, lr}
   115b0:	add	fp, sp, #8
   115b4:	mov	r4, r0
   115b8:	mvn	r0, #0
   115bc:	cmp	r4, #0
   115c0:	cmpne	r1, #0
   115c4:	bne	115cc <avl_remove@@Base+0x20>
   115c8:	pop	{r4, sl, fp, pc}
   115cc:	ldr	r0, [r4]
   115d0:	bl	11240 <avl_remove_impl@@Base>
   115d4:	str	r0, [r4]
   115d8:	mov	r0, #0
   115dc:	pop	{r4, sl, fp, pc}

000115e0 <avl_min@@Base>:
   115e0:	cmp	r0, #0
   115e4:	moveq	r0, #0
   115e8:	bxeq	lr
   115ec:	push	{fp, lr}
   115f0:	mov	fp, sp
   115f4:	ldr	r0, [r0]
   115f8:	bl	11604 <avl_no_valormin@@Base>
   115fc:	ldr	r0, [r0]
   11600:	pop	{fp, pc}

00011604 <avl_no_valormin@@Base>:
   11604:	mov	r1, r0
   11608:	ldr	r0, [r0, #4]
   1160c:	cmp	r0, #0
   11610:	bne	11604 <avl_no_valormin@@Base>
   11614:	mov	r0, r1
   11618:	bx	lr

0001161c <avl_max@@Base>:
   1161c:	cmp	r0, #0
   11620:	moveq	r0, #0
   11624:	bxeq	lr
   11628:	push	{fp, lr}
   1162c:	mov	fp, sp
   11630:	ldr	r0, [r0]
   11634:	bl	11640 <avl_no_valormax@@Base>
   11638:	ldr	r0, [r0]
   1163c:	pop	{fp, pc}

00011640 <avl_no_valormax@@Base>:
   11640:	mov	r1, r0
   11644:	ldr	r0, [r0, #8]
   11648:	cmp	r0, #0
   1164c:	bne	11640 <avl_no_valormax@@Base>
   11650:	mov	r0, r1
   11654:	bx	lr

00011658 <avl_imprime@@Base>:
   11658:	cmp	r0, #0
   1165c:	bxeq	lr
   11660:	push	{fp, lr}
   11664:	mov	fp, sp
   11668:	ldr	r0, [r0]
   1166c:	bl	1167c <avl_preordem_impl@@Base>
   11670:	mov	r0, #10
   11674:	pop	{fp, lr}
   11678:	b	10efc <putchar@plt>

0001167c <avl_preordem_impl@@Base>:
   1167c:	push	{r4, r5, fp, lr}
   11680:	add	fp, sp, #8
   11684:	cmp	r0, #0
   11688:	popeq	{r4, r5, fp, pc}
   1168c:	mov	r4, r0
   11690:	movw	r5, #7580	; 0x1d9c
   11694:	movt	r5, #1
   11698:	ldr	r1, [r4]
   1169c:	ldr	r2, [r4, #16]
   116a0:	mov	r0, r5
   116a4:	bl	10e84 <printf@plt>
   116a8:	ldr	r0, [r4, #4]
   116ac:	bl	1167c <avl_preordem_impl@@Base>
   116b0:	ldr	r4, [r4, #8]
   116b4:	cmp	r4, #0
   116b8:	bne	11698 <avl_preordem_impl@@Base+0x1c>
   116bc:	pop	{r4, r5, fp, pc}

000116c0 <avl_altura@@Base>:
   116c0:	cmp	r0, #0
   116c4:	ldrne	r0, [r0, #12]
   116c8:	mvneq	r0, #0
   116cc:	bx	lr

000116d0 <max@@Base>:
   116d0:	cmp	r0, r1
   116d4:	movle	r0, r1
   116d8:	bx	lr

000116dc <avl_novo_no@@Base>:
   116dc:	push	{r4, r5, fp, lr}
   116e0:	add	fp, sp, #8
   116e4:	mov	r4, r0
   116e8:	mov	r0, #20
   116ec:	bl	10ecc <malloc@plt>
   116f0:	mov	r5, r0
   116f4:	mov	r0, r4
   116f8:	bl	10ef0 <strlen@plt>
   116fc:	add	r0, r0, #1
   11700:	bl	10ecc <malloc@plt>
   11704:	str	r0, [r5]
   11708:	mov	r1, r4
   1170c:	bl	10eb4 <strcpy@plt>
   11710:	mov	r0, #0
   11714:	mov	r1, #1
   11718:	str	r0, [r5, #4]
   1171c:	str	r0, [r5, #8]
   11720:	str	r0, [r5, #12]
   11724:	str	r1, [r5, #16]
   11728:	mov	r0, r5
   1172c:	pop	{r4, r5, fp, pc}

00011730 <roda_direita@@Base>:
   11730:	push	{r4, r5, r6, sl, fp, lr}
   11734:	add	fp, sp, #16
   11738:	mov	r5, r0
   1173c:	ldr	r4, [r0, #4]
   11740:	ldr	r0, [r4, #8]
   11744:	str	r5, [r4, #8]
   11748:	str	r0, [r5, #4]
   1174c:	bl	116c0 <avl_altura@@Base>
   11750:	mov	r6, r0
   11754:	ldr	r0, [r5, #8]
   11758:	bl	116c0 <avl_altura@@Base>
   1175c:	mov	r1, r0
   11760:	mov	r0, r6
   11764:	bl	116d0 <max@@Base>
   11768:	add	r0, r0, #1
   1176c:	str	r0, [r5, #12]
   11770:	ldr	r0, [r4, #4]
   11774:	bl	116c0 <avl_altura@@Base>
   11778:	mov	r6, r0
   1177c:	mov	r0, r5
   11780:	bl	116c0 <avl_altura@@Base>
   11784:	mov	r1, r0
   11788:	mov	r0, r6
   1178c:	bl	116d0 <max@@Base>
   11790:	add	r0, r0, #1
   11794:	str	r0, [r4, #12]
   11798:	mov	r0, r4
   1179c:	pop	{r4, r5, r6, sl, fp, pc}

000117a0 <roda_esquerda@@Base>:
   117a0:	push	{r4, r5, r6, r7, fp, lr}
   117a4:	add	fp, sp, #16
   117a8:	mov	r5, r0
   117ac:	ldr	r4, [r0, #8]
   117b0:	ldr	r6, [r4, #4]
   117b4:	str	r0, [r4, #4]
   117b8:	str	r6, [r0, #8]
   117bc:	ldr	r0, [r0, #4]
   117c0:	bl	116c0 <avl_altura@@Base>
   117c4:	mov	r7, r0
   117c8:	mov	r0, r6
   117cc:	bl	116c0 <avl_altura@@Base>
   117d0:	mov	r1, r0
   117d4:	mov	r0, r7
   117d8:	bl	116d0 <max@@Base>
   117dc:	add	r0, r0, #1
   117e0:	str	r0, [r5, #12]
   117e4:	mov	r0, r5
   117e8:	bl	116c0 <avl_altura@@Base>
   117ec:	mov	r5, r0
   117f0:	ldr	r0, [r4, #8]
   117f4:	bl	116c0 <avl_altura@@Base>
   117f8:	mov	r1, r0
   117fc:	mov	r0, r5
   11800:	bl	116d0 <max@@Base>
   11804:	add	r0, r0, #1
   11808:	str	r0, [r4, #12]
   1180c:	mov	r0, r4
   11810:	pop	{r4, r5, r6, r7, fp, pc}

00011814 <calc_balanceamento@@Base>:
   11814:	cmp	r0, #0
   11818:	moveq	r0, #0
   1181c:	bxeq	lr
   11820:	push	{r4, r5, fp, lr}
   11824:	add	fp, sp, #8
   11828:	mov	r4, r0
   1182c:	ldr	r0, [r0, #8]
   11830:	bl	116c0 <avl_altura@@Base>
   11834:	mov	r5, r0
   11838:	ldr	r0, [r4, #4]
   1183c:	bl	116c0 <avl_altura@@Base>
   11840:	sub	r0, r5, r0
   11844:	pop	{r4, r5, fp, pc}

00011848 <bst_nova@@Base>:
   11848:	push	{fp, lr}
   1184c:	mov	fp, sp
   11850:	mov	r0, #4
   11854:	bl	10ecc <malloc@plt>
   11858:	cmp	r0, #0
   1185c:	moveq	r0, #0
   11860:	movne	r1, #0
   11864:	strne	r1, [r0]
   11868:	pop	{fp, pc}

0001186c <bst_apaga@@Base>:
   1186c:	push	{r4, sl, fp, lr}
   11870:	add	fp, sp, #8
   11874:	mov	r4, r0
   11878:	ldr	r0, [r0]
   1187c:	cmp	r0, #0
   11880:	beq	11898 <bst_apaga@@Base+0x2c>
   11884:	ldr	r1, [r0]
   11888:	bl	118a4 <bst_remove_impl@@Base>
   1188c:	str	r0, [r4]
   11890:	cmp	r0, #0
   11894:	bne	11884 <bst_apaga@@Base+0x18>
   11898:	mov	r0, r4
   1189c:	pop	{r4, sl, fp, lr}
   118a0:	b	10e9c <free@plt>

000118a4 <bst_remove_impl@@Base>:
   118a4:	push	{r4, r5, r6, sl, fp, lr}
   118a8:	add	fp, sp, #16
   118ac:	cmp	r0, #0
   118b0:	moveq	r5, #0
   118b4:	moveq	r0, r5
   118b8:	popeq	{r4, r5, r6, sl, fp, pc}
   118bc:	mov	r6, r1
   118c0:	mov	r4, r0
   118c4:	ldr	r5, [r0]
   118c8:	mov	r0, r1
   118cc:	mov	r1, r5
   118d0:	bl	10e78 <strcmp@plt>
   118d4:	cmn	r0, #1
   118d8:	bgt	118f4 <bst_remove_impl@@Base+0x50>
   118dc:	ldr	r0, [r4, #4]
   118e0:	mov	r1, r6
   118e4:	bl	118a4 <bst_remove_impl@@Base>
   118e8:	str	r0, [r4, #4]
   118ec:	mov	r0, r4
   118f0:	pop	{r4, r5, r6, sl, fp, pc}
   118f4:	cmp	r0, #0
   118f8:	beq	11914 <bst_remove_impl@@Base+0x70>
   118fc:	ldr	r0, [r4, #8]
   11900:	mov	r1, r6
   11904:	bl	118a4 <bst_remove_impl@@Base>
   11908:	str	r0, [r4, #8]
   1190c:	mov	r0, r4
   11910:	pop	{r4, r5, r6, sl, fp, pc}
   11914:	ldr	r6, [r4, #4]
   11918:	ldr	r0, [r4, #8]
   1191c:	cmp	r6, #0
   11920:	beq	11960 <bst_remove_impl@@Base+0xbc>
   11924:	cmp	r0, #0
   11928:	beq	1196c <bst_remove_impl@@Base+0xc8>
   1192c:	bl	11b40 <bst_no_valormin@@Base>
   11930:	mov	r6, r0
   11934:	ldr	r0, [r0]
   11938:	bl	10ef0 <strlen@plt>
   1193c:	add	r1, r0, #1
   11940:	mov	r0, r5
   11944:	bl	10ea8 <realloc@plt>
   11948:	str	r0, [r4]
   1194c:	ldr	r1, [r6]
   11950:	bl	10eb4 <strcpy@plt>
   11954:	ldr	r0, [r4, #8]
   11958:	ldr	r1, [r6]
   1195c:	b	11904 <bst_remove_impl@@Base+0x60>
   11960:	cmp	r0, #0
   11964:	mov	r6, r0
   11968:	beq	119a4 <bst_remove_impl@@Base+0x100>
   1196c:	ldr	r0, [r6]
   11970:	bl	10ef0 <strlen@plt>
   11974:	add	r1, r0, #1
   11978:	mov	r0, r5
   1197c:	bl	10ea8 <realloc@plt>
   11980:	str	r0, [r4]
   11984:	ldr	r1, [r6]
   11988:	bl	10eb4 <strcpy@plt>
   1198c:	ldr	r0, [r6, #4]
   11990:	str	r0, [r4, #4]
   11994:	ldr	r0, [r6, #8]
   11998:	str	r0, [r4, #8]
   1199c:	mov	r5, r4
   119a0:	b	119ac <bst_remove_impl@@Base+0x108>
   119a4:	mov	r5, #0
   119a8:	mov	r6, r4
   119ac:	ldr	r0, [r6]
   119b0:	bl	10e9c <free@plt>
   119b4:	mov	r0, r6
   119b8:	bl	10e9c <free@plt>
   119bc:	mov	r0, r5
   119c0:	pop	{r4, r5, r6, sl, fp, pc}

000119c4 <bst_pesquisa@@Base>:
   119c4:	cmp	r0, #0
   119c8:	cmpne	r1, #0
   119cc:	bne	119d8 <bst_pesquisa@@Base+0x14>
   119d0:	mov	r0, #0
   119d4:	bx	lr
   119d8:	ldr	r0, [r0]
   119dc:	b	119e0 <bst_pesquisa_impl@@Base>

000119e0 <bst_pesquisa_impl@@Base>:
   119e0:	push	{r4, r5, r6, sl, fp, lr}
   119e4:	add	fp, sp, #16
   119e8:	mov	r4, #0
   119ec:	cmp	r0, #0
   119f0:	beq	11a30 <bst_pesquisa_impl@@Base+0x50>
   119f4:	mov	r5, r1
   119f8:	mov	r6, r0
   119fc:	ldr	r1, [r6]
   11a00:	mov	r0, r5
   11a04:	bl	10e78 <strcmp@plt>
   11a08:	cmn	r0, #1
   11a0c:	bgt	11a18 <bst_pesquisa_impl@@Base+0x38>
   11a10:	add	r0, r6, #4
   11a14:	b	11a24 <bst_pesquisa_impl@@Base+0x44>
   11a18:	cmp	r0, #0
   11a1c:	beq	11a38 <bst_pesquisa_impl@@Base+0x58>
   11a20:	add	r0, r6, #8
   11a24:	ldr	r6, [r0]
   11a28:	cmp	r6, #0
   11a2c:	bne	119fc <bst_pesquisa_impl@@Base+0x1c>
   11a30:	mov	r0, r4
   11a34:	pop	{r4, r5, r6, sl, fp, pc}
   11a38:	mov	r4, r6
   11a3c:	mov	r0, r4
   11a40:	pop	{r4, r5, r6, sl, fp, pc}

00011a44 <bst_insere@@Base>:
   11a44:	push	{r4, sl, fp, lr}
   11a48:	add	fp, sp, #8
   11a4c:	mov	r4, r0
   11a50:	mvn	r0, #0
   11a54:	cmp	r4, #0
   11a58:	cmpne	r1, #0
   11a5c:	bne	11a64 <bst_insere@@Base+0x20>
   11a60:	pop	{r4, sl, fp, pc}
   11a64:	ldr	r0, [r4]
   11a68:	bl	11a78 <bst_insere_impl@@Base>
   11a6c:	str	r0, [r4]
   11a70:	mov	r0, #0
   11a74:	pop	{r4, sl, fp, pc}

00011a78 <bst_insere_impl@@Base>:
   11a78:	push	{r4, r5, fp, lr}
   11a7c:	add	fp, sp, #8
   11a80:	mov	r5, r1
   11a84:	cmp	r0, #0
   11a88:	beq	11abc <bst_insere_impl@@Base+0x44>
   11a8c:	mov	r4, r0
   11a90:	ldr	r1, [r0]
   11a94:	mov	r0, r5
   11a98:	bl	10e78 <strcmp@plt>
   11a9c:	cmn	r0, #1
   11aa0:	bgt	11ac8 <bst_insere_impl@@Base+0x50>
   11aa4:	ldr	r0, [r4, #4]
   11aa8:	mov	r1, r5
   11aac:	bl	11a78 <bst_insere_impl@@Base>
   11ab0:	str	r0, [r4, #4]
   11ab4:	mov	r0, r4
   11ab8:	pop	{r4, r5, fp, pc}
   11abc:	mov	r0, r5
   11ac0:	pop	{r4, r5, fp, lr}
   11ac4:	b	11c08 <bst_novo_no@@Base>
   11ac8:	cmp	r0, #0
   11acc:	beq	11ae0 <bst_insere_impl@@Base+0x68>
   11ad0:	ldr	r0, [r4, #8]
   11ad4:	mov	r1, r5
   11ad8:	bl	11a78 <bst_insere_impl@@Base>
   11adc:	str	r0, [r4, #8]
   11ae0:	mov	r0, r4
   11ae4:	pop	{r4, r5, fp, pc}

00011ae8 <bst_remove@@Base>:
   11ae8:	push	{r4, sl, fp, lr}
   11aec:	add	fp, sp, #8
   11af0:	mov	r4, r0
   11af4:	mvn	r0, #0
   11af8:	cmp	r4, #0
   11afc:	cmpne	r1, #0
   11b00:	bne	11b08 <bst_remove@@Base+0x20>
   11b04:	pop	{r4, sl, fp, pc}
   11b08:	ldr	r0, [r4]
   11b0c:	bl	118a4 <bst_remove_impl@@Base>
   11b10:	str	r0, [r4]
   11b14:	mov	r0, #0
   11b18:	pop	{r4, sl, fp, pc}

00011b1c <bst_min@@Base>:
   11b1c:	cmp	r0, #0
   11b20:	moveq	r0, #0
   11b24:	bxeq	lr
   11b28:	push	{fp, lr}
   11b2c:	mov	fp, sp
   11b30:	ldr	r0, [r0]
   11b34:	bl	11b40 <bst_no_valormin@@Base>
   11b38:	ldr	r0, [r0]
   11b3c:	pop	{fp, pc}

00011b40 <bst_no_valormin@@Base>:
   11b40:	mov	r1, r0
   11b44:	ldr	r0, [r0, #4]
   11b48:	cmp	r0, #0
   11b4c:	bne	11b40 <bst_no_valormin@@Base>
   11b50:	mov	r0, r1
   11b54:	bx	lr

00011b58 <bst_max@@Base>:
   11b58:	cmp	r0, #0
   11b5c:	moveq	r0, #0
   11b60:	bxeq	lr
   11b64:	push	{fp, lr}
   11b68:	mov	fp, sp
   11b6c:	ldr	r0, [r0]
   11b70:	bl	11b7c <bst_no_valormax@@Base>
   11b74:	ldr	r0, [r0]
   11b78:	pop	{fp, pc}

00011b7c <bst_no_valormax@@Base>:
   11b7c:	mov	r1, r0
   11b80:	ldr	r0, [r0, #8]
   11b84:	cmp	r0, #0
   11b88:	bne	11b7c <bst_no_valormax@@Base>
   11b8c:	mov	r0, r1
   11b90:	bx	lr

00011b94 <bst_imprime@@Base>:
   11b94:	cmp	r0, #0
   11b98:	bxeq	lr
   11b9c:	push	{r4, sl, fp, lr}
   11ba0:	add	fp, sp, #8
   11ba4:	mov	r4, r0
   11ba8:	movw	r0, #7587	; 0x1da3
   11bac:	movt	r0, #1
   11bb0:	bl	10e84 <printf@plt>
   11bb4:	ldr	r0, [r4]
   11bb8:	bl	11bc8 <bst_preordem_impl@@Base>
   11bbc:	mov	r0, #10
   11bc0:	pop	{r4, sl, fp, lr}
   11bc4:	b	10efc <putchar@plt>

00011bc8 <bst_preordem_impl@@Base>:
   11bc8:	push	{r4, r5, fp, lr}
   11bcc:	add	fp, sp, #8
   11bd0:	cmp	r0, #0
   11bd4:	popeq	{r4, r5, fp, pc}
   11bd8:	mov	r4, r0
   11bdc:	movw	r5, #7598	; 0x1dae
   11be0:	movt	r5, #1
   11be4:	ldr	r1, [r4]
   11be8:	mov	r0, r5
   11bec:	bl	10e84 <printf@plt>
   11bf0:	ldr	r0, [r4, #4]
   11bf4:	bl	11bc8 <bst_preordem_impl@@Base>
   11bf8:	ldr	r4, [r4, #8]
   11bfc:	cmp	r4, #0
   11c00:	bne	11be4 <bst_preordem_impl@@Base+0x1c>
   11c04:	pop	{r4, r5, fp, pc}

00011c08 <bst_novo_no@@Base>:
   11c08:	push	{r4, r5, fp, lr}
   11c0c:	add	fp, sp, #8
   11c10:	mov	r4, r0
   11c14:	mov	r0, #12
   11c18:	bl	10ecc <malloc@plt>
   11c1c:	mov	r5, r0
   11c20:	mov	r0, r4
   11c24:	bl	10ef0 <strlen@plt>
   11c28:	add	r0, r0, #1
   11c2c:	bl	10ecc <malloc@plt>
   11c30:	str	r0, [r5]
   11c34:	mov	r1, r4
   11c38:	bl	10eb4 <strcpy@plt>
   11c3c:	mov	r0, #0
   11c40:	str	r0, [r5, #4]
   11c44:	str	r0, [r5, #8]
   11c48:	mov	r0, r5
   11c4c:	pop	{r4, r5, fp, pc}

00011c50 <bst_altura@@Base>:
   11c50:	push	{r4, r5, fp, lr}
   11c54:	add	fp, sp, #8
   11c58:	cmp	r0, #0
   11c5c:	mvneq	r0, #0
   11c60:	popeq	{r4, r5, fp, pc}
   11c64:	ldr	r4, [r0, #8]
   11c68:	cmp	r4, #0
   11c6c:	bne	11c80 <bst_altura@@Base+0x30>
   11c70:	ldr	r1, [r0, #4]
   11c74:	cmp	r1, #0
   11c78:	moveq	r0, #0
   11c7c:	popeq	{r4, r5, fp, pc}
   11c80:	ldr	r0, [r0, #4]
   11c84:	bl	11c50 <bst_altura@@Base>
   11c88:	mov	r5, r0
   11c8c:	mov	r0, r4
   11c90:	bl	11c50 <bst_altura@@Base>
   11c94:	cmp	r5, r0
   11c98:	addgt	r0, r5, #1
   11c9c:	addle	r0, r0, #1
   11ca0:	pop	{r4, r5, fp, pc}

00011ca4 <__libc_csu_init@@Base>:
   11ca4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11ca8:	mov	r7, r0
   11cac:	ldr	r6, [pc, #72]	; 11cfc <__libc_csu_init@@Base+0x58>
   11cb0:	ldr	r5, [pc, #72]	; 11d00 <__libc_csu_init@@Base+0x5c>
   11cb4:	add	r6, pc, r6
   11cb8:	add	r5, pc, r5
   11cbc:	sub	r6, r6, r5
   11cc0:	mov	r8, r1
   11cc4:	mov	r9, r2
   11cc8:	bl	10e58 <strcmp@plt-0x20>
   11ccc:	asrs	r6, r6, #2
   11cd0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11cd4:	mov	r4, #0
   11cd8:	add	r4, r4, #1
   11cdc:	ldr	r3, [r5], #4
   11ce0:	mov	r2, r9
   11ce4:	mov	r1, r8
   11ce8:	mov	r0, r7
   11cec:	blx	r3
   11cf0:	cmp	r6, r4
   11cf4:	bne	11cd8 <__libc_csu_init@@Base+0x34>
   11cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11cfc:	andeq	r0, r1, r0, asr r2
   11d00:	andeq	r0, r1, r8, asr #4

00011d04 <__libc_csu_fini@@Base>:
   11d04:	bx	lr

Disassembly of section .fini:

00011d08 <.fini>:
   11d08:	push	{r3, lr}
   11d0c:	pop	{r3, pc}
