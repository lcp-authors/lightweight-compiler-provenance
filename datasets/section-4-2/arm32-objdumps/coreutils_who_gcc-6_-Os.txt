
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010ec4 <.init>:
   10ec4:	push	{r3, lr}
   10ec8:	bl	11564 <__assert_fail@plt+0x374>
   10ecc:	pop	{r3, pc}

Disassembly of section .plt:

00010ed0 <calloc@plt-0x14>:
   10ed0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ed4:	ldr	lr, [pc, #4]	; 10ee0 <calloc@plt-0x4>
   10ed8:	add	lr, pc, lr
   10edc:	ldr	pc, [lr, #8]!
   10ee0:	andeq	r6, r1, r0, lsr #2

00010ee4 <calloc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #288]!	; 0x120

00010ef0 <fputs_unlocked@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #280]!	; 0x118

00010efc <raise@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #272]!	; 0x110

00010f08 <strcmp@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #264]!	; 0x108

00010f14 <fflush@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #256]!	; 0x100

00010f20 <utmpxname@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #248]!	; 0xf8

00010f2c <free@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #240]!	; 0xf0

00010f38 <gai_strerror@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #232]!	; 0xe8

00010f44 <_exit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #224]!	; 0xe0

00010f50 <memcpy@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #216]!	; 0xd8

00010f5c <mbsinit@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #208]!	; 0xd0

00010f68 <time@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #200]!	; 0xc8

00010f74 <memcmp@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #192]!	; 0xc0

00010f80 <stpcpy@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #184]!	; 0xb8

00010f8c <fputc_unlocked@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #176]!	; 0xb0

00010f98 <dcgettext@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #168]!	; 0xa8

00010fa4 <strdup@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #160]!	; 0xa0

00010fb0 <setutxent@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #152]!	; 0x98

00010fbc <realloc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #144]!	; 0x90

00010fc8 <textdomain@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #136]!	; 0x88

00010fd4 <iswprint@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #128]!	; 0x80

00010fe0 <lseek64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #120]!	; 0x78

00010fec <__ctype_get_mb_cur_max@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #112]!	; 0x70

00010ff8 <strcpy@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #104]!	; 0x68

00011004 <__fpending@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #96]!	; 0x60

00011010 <ferror_unlocked@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #88]!	; 0x58

0001101c <mbrtowc@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #80]!	; 0x50

00011028 <error@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #72]!	; 0x48

00011034 <__asprintf_chk@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #64]!	; 0x40

00011040 <puts@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #56]!	; 0x38

0001104c <malloc@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #48]!	; 0x30

00011058 <__libc_start_main@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #40]!	; 0x28

00011064 <strftime@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #32]!

00011070 <__freading@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #24]!

0001107c <localtime@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #16]!

00011088 <__gmon_start__@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #8]!

00011094 <getopt_long@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #90112	; 0x16000
   1109c:	ldr	pc, [ip, #0]!

000110a0 <kill@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #86016	; 0x15000
   110a8:	ldr	pc, [ip, #4088]!	; 0xff8

000110ac <__ctype_b_loc@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #86016	; 0x15000
   110b4:	ldr	pc, [ip, #4080]!	; 0xff0

000110b8 <exit@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #86016	; 0x15000
   110c0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110c4 <ttyname@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #86016	; 0x15000
   110cc:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d0 <strlen@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4056]!	; 0xfd8

000110dc <strchr@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4048]!	; 0xfd0

000110e8 <__errno_location@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #4040]!	; 0xfc8

000110f4 <__sprintf_chk@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #4032]!	; 0xfc0

00011100 <__cxa_atexit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #4024]!	; 0xfb8

0001110c <memset@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #86016	; 0x15000
   11114:	ldr	pc, [ip, #4016]!	; 0xfb0

00011118 <strncpy@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #86016	; 0x15000
   11120:	ldr	pc, [ip, #4008]!	; 0xfa8

00011124 <__printf_chk@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #86016	; 0x15000
   1112c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011130 <fileno@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #86016	; 0x15000
   11138:	ldr	pc, [ip, #3992]!	; 0xf98

0001113c <__fprintf_chk@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #86016	; 0x15000
   11144:	ldr	pc, [ip, #3984]!	; 0xf90

00011148 <fclose@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #86016	; 0x15000
   11150:	ldr	pc, [ip, #3976]!	; 0xf88

00011154 <fseeko64@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #86016	; 0x15000
   1115c:	ldr	pc, [ip, #3968]!	; 0xf80

00011160 <endutxent@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #86016	; 0x15000
   11168:	ldr	pc, [ip, #3960]!	; 0xf78

0001116c <setlocale@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #86016	; 0x15000
   11174:	ldr	pc, [ip, #3952]!	; 0xf70

00011178 <strrchr@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #86016	; 0x15000
   11180:	ldr	pc, [ip, #3944]!	; 0xf68

00011184 <nl_langinfo@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #86016	; 0x15000
   1118c:	ldr	pc, [ip, #3936]!	; 0xf60

00011190 <freeaddrinfo@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #86016	; 0x15000
   11198:	ldr	pc, [ip, #3928]!	; 0xf58

0001119c <getaddrinfo@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #86016	; 0x15000
   111a4:	ldr	pc, [ip, #3920]!	; 0xf50

000111a8 <bindtextdomain@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #86016	; 0x15000
   111b0:	ldr	pc, [ip, #3912]!	; 0xf48

000111b4 <__xstat64@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #86016	; 0x15000
   111bc:	ldr	pc, [ip, #3904]!	; 0xf40

000111c0 <fputs@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #86016	; 0x15000
   111c8:	ldr	pc, [ip, #3896]!	; 0xf38

000111cc <strncmp@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #86016	; 0x15000
   111d4:	ldr	pc, [ip, #3888]!	; 0xf30

000111d8 <abort@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #86016	; 0x15000
   111e0:	ldr	pc, [ip, #3880]!	; 0xf28

000111e4 <getutxent@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #86016	; 0x15000
   111ec:	ldr	pc, [ip, #3872]!	; 0xf20

000111f0 <__assert_fail@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #86016	; 0x15000
   111f8:	ldr	pc, [ip, #3864]!	; 0xf18

Disassembly of section .text:

000111fc <.text>:
   111fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   11200:	mov	r7, r0
   11204:	sub	sp, sp, #20
   11208:	ldr	r0, [r1]
   1120c:	mov	r8, r1
   11210:	bl	1297c <__assert_fail@plt+0x178c>
   11214:	ldr	r1, [pc, #704]	; 114dc <__assert_fail@plt+0x2ec>
   11218:	mov	r0, #6
   1121c:	bl	1116c <setlocale@plt>
   11220:	ldr	r1, [pc, #696]	; 114e0 <__assert_fail@plt+0x2f0>
   11224:	ldr	r0, [pc, #696]	; 114e4 <__assert_fail@plt+0x2f4>
   11228:	bl	111a8 <bindtextdomain@plt>
   1122c:	ldr	r0, [pc, #688]	; 114e4 <__assert_fail@plt+0x2f4>
   11230:	bl	10fc8 <textdomain@plt>
   11234:	ldr	r0, [pc, #684]	; 114e8 <__assert_fail@plt+0x2f8>
   11238:	bl	155cc <__assert_fail@plt+0x43dc>
   1123c:	ldr	r9, [pc, #680]	; 114ec <__assert_fail@plt+0x2fc>
   11240:	ldr	r4, [pc, #680]	; 114f0 <__assert_fail@plt+0x300>
   11244:	mov	r6, #1
   11248:	mov	r5, #0
   1124c:	str	r5, [sp]
   11250:	mov	r3, r9
   11254:	ldr	r2, [pc, #664]	; 114f4 <__assert_fail@plt+0x304>
   11258:	mov	r1, r8
   1125c:	mov	r0, r7
   11260:	bl	11094 <getopt_long@plt>
   11264:	cmn	r0, #1
   11268:	bne	112e4 <__assert_fail@plt+0xf4>
   1126c:	cmp	r6, #0
   11270:	movne	r3, #1
   11274:	strbne	r3, [r4, #1]
   11278:	strbne	r3, [r4, #67]	; 0x43
   1127c:	ldrb	r3, [r4, #2]
   11280:	mov	r0, #2
   11284:	cmp	r3, #0
   11288:	movne	r3, #0
   1128c:	strbne	r3, [r4, #1]
   11290:	bl	12850 <__assert_fail@plt+0x1660>
   11294:	cmp	r0, #0
   11298:	ldrne	r3, [pc, #600]	; 114f8 <__assert_fail@plt+0x308>
   1129c:	ldreq	r3, [pc, #600]	; 114fc <__assert_fail@plt+0x30c>
   112a0:	strne	r3, [r4, #44]	; 0x2c
   112a4:	streq	r3, [r4, #44]	; 0x2c
   112a8:	movne	r3, #16
   112ac:	moveq	r3, #12
   112b0:	str	r3, [r4, #4]
   112b4:	ldr	r3, [pc, #580]	; 11500 <__assert_fail@plt+0x310>
   112b8:	mov	r5, r3
   112bc:	ldr	r2, [r3]
   112c0:	sub	r7, r7, r2
   112c4:	add	r7, r7, #1
   112c8:	cmp	r7, #3
   112cc:	ldrls	pc, [pc, r7, lsl #2]
   112d0:	b	114a0 <__assert_fail@plt+0x2b0>
   112d4:	andeq	r1, r1, ip, ror r4
   112d8:	andeq	r1, r1, ip, ror r4
   112dc:	muleq	r1, r4, r4
   112e0:	andeq	r1, r1, r4, ror r4
   112e4:	cmp	r0, #109	; 0x6d
   112e8:	beq	1142c <__assert_fail@plt+0x23c>
   112ec:	bgt	11390 <__assert_fail@plt+0x1a0>
   112f0:	cmp	r0, #84	; 0x54
   112f4:	beq	11458 <__assert_fail@plt+0x268>
   112f8:	bgt	11354 <__assert_fail@plt+0x164>
   112fc:	cmn	r0, #2
   11300:	beq	1146c <__assert_fail@plt+0x27c>
   11304:	cmp	r0, #72	; 0x48
   11308:	beq	11420 <__assert_fail@plt+0x230>
   1130c:	cmn	r0, #3
   11310:	bne	1136c <__assert_fail@plt+0x17c>
   11314:	ldr	r3, [pc, #488]	; 11504 <__assert_fail@plt+0x314>
   11318:	ldr	r0, [pc, #488]	; 11508 <__assert_fail@plt+0x318>
   1131c:	str	r3, [sp, #8]
   11320:	ldr	r3, [pc, #484]	; 1150c <__assert_fail@plt+0x31c>
   11324:	str	r5, [sp, #12]
   11328:	str	r3, [sp, #4]
   1132c:	ldr	r3, [pc, #476]	; 11510 <__assert_fail@plt+0x320>
   11330:	ldr	r2, [pc, #476]	; 11514 <__assert_fail@plt+0x324>
   11334:	str	r3, [sp]
   11338:	ldr	r3, [pc, #472]	; 11518 <__assert_fail@plt+0x328>
   1133c:	ldr	r0, [r0]
   11340:	ldr	r1, [pc, #468]	; 1151c <__assert_fail@plt+0x32c>
   11344:	ldr	r3, [r3]
   11348:	bl	145c4 <__assert_fail@plt+0x33d4>
   1134c:	mov	r0, #0
   11350:	bl	110b8 <exit@plt>
   11354:	cmp	r0, #98	; 0x62
   11358:	mov	r3, #1
   1135c:	beq	1140c <__assert_fail@plt+0x21c>
   11360:	bgt	11374 <__assert_fail@plt+0x184>
   11364:	cmp	r0, #97	; 0x61
   11368:	beq	113e0 <__assert_fail@plt+0x1f0>
   1136c:	mov	r0, #1
   11370:	b	11470 <__assert_fail@plt+0x280>
   11374:	cmp	r0, #100	; 0x64
   11378:	beq	11418 <__assert_fail@plt+0x228>
   1137c:	cmp	r0, #108	; 0x6c
   11380:	bne	1136c <__assert_fail@plt+0x17c>
   11384:	strb	r3, [r4, #83]	; 0x53
   11388:	strb	r3, [r4]
   1138c:	b	11410 <__assert_fail@plt+0x220>
   11390:	cmp	r0, #115	; 0x73
   11394:	mov	r3, #1
   11398:	beq	11448 <__assert_fail@plt+0x258>
   1139c:	bgt	113bc <__assert_fail@plt+0x1cc>
   113a0:	cmp	r0, #113	; 0x71
   113a4:	beq	11438 <__assert_fail@plt+0x248>
   113a8:	bgt	11440 <__assert_fail@plt+0x250>
   113ac:	cmp	r0, #112	; 0x70
   113b0:	bne	1136c <__assert_fail@plt+0x17c>
   113b4:	strb	r3, [r4, #82]	; 0x52
   113b8:	b	11410 <__assert_fail@plt+0x220>
   113bc:	cmp	r0, #117	; 0x75
   113c0:	beq	11464 <__assert_fail@plt+0x274>
   113c4:	blt	11450 <__assert_fail@plt+0x260>
   113c8:	cmp	r0, #119	; 0x77
   113cc:	beq	11458 <__assert_fail@plt+0x268>
   113d0:	cmp	r0, #256	; 0x100
   113d4:	bne	1136c <__assert_fail@plt+0x17c>
   113d8:	strb	r3, [r4, #54]	; 0x36
   113dc:	b	1124c <__assert_fail@plt+0x5c>
   113e0:	strb	r3, [r4, #80]	; 0x50
   113e4:	strb	r3, [r4, #84]	; 0x54
   113e8:	strb	r3, [r4, #83]	; 0x53
   113ec:	strb	r3, [r4, #82]	; 0x52
   113f0:	strb	r3, [r4, #68]	; 0x44
   113f4:	strb	r3, [r4, #81]	; 0x51
   113f8:	strb	r3, [r4, #67]	; 0x43
   113fc:	strb	r3, [r4, #3]
   11400:	strb	r3, [r4]
   11404:	strb	r3, [r4, #2]
   11408:	b	11410 <__assert_fail@plt+0x220>
   1140c:	strb	r3, [r4, #80]	; 0x50
   11410:	mov	r6, r5
   11414:	b	1124c <__assert_fail@plt+0x5c>
   11418:	strb	r3, [r4, #84]	; 0x54
   1141c:	b	11400 <__assert_fail@plt+0x210>
   11420:	mov	r3, #1
   11424:	strb	r3, [r4, #65]	; 0x41
   11428:	b	1124c <__assert_fail@plt+0x5c>
   1142c:	mov	r3, #1
   11430:	strb	r3, [r4, #66]	; 0x42
   11434:	b	1124c <__assert_fail@plt+0x5c>
   11438:	strb	r3, [r4, #64]	; 0x40
   1143c:	b	1124c <__assert_fail@plt+0x5c>
   11440:	strb	r3, [r4, #68]	; 0x44
   11444:	b	11388 <__assert_fail@plt+0x198>
   11448:	strb	r3, [r4, #1]
   1144c:	b	1124c <__assert_fail@plt+0x5c>
   11450:	strb	r3, [r4, #81]	; 0x51
   11454:	b	11410 <__assert_fail@plt+0x220>
   11458:	mov	r3, #1
   1145c:	strb	r3, [r4, #3]
   11460:	b	1124c <__assert_fail@plt+0x5c>
   11464:	strb	r3, [r4, #67]	; 0x43
   11468:	b	11388 <__assert_fail@plt+0x198>
   1146c:	mov	r0, #0
   11470:	bl	1236c <__assert_fail@plt+0x117c>
   11474:	mov	r3, #1
   11478:	strb	r3, [r4, #66]	; 0x42
   1147c:	ldr	r0, [pc, #156]	; 11520 <__assert_fail@plt+0x330>
   11480:	mov	r1, #1
   11484:	bl	11cbc <__assert_fail@plt+0xacc>
   11488:	mov	r0, #0
   1148c:	add	sp, sp, #20
   11490:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11494:	mov	r1, #0
   11498:	ldr	r0, [r8, r2, lsl #2]
   1149c:	b	11484 <__assert_fail@plt+0x294>
   114a0:	mov	r2, #5
   114a4:	ldr	r1, [pc, #120]	; 11524 <__assert_fail@plt+0x334>
   114a8:	mov	r0, #0
   114ac:	bl	10f98 <dcgettext@plt>
   114b0:	ldr	r3, [r5]
   114b4:	add	r3, r3, #2
   114b8:	mov	r4, r0
   114bc:	ldr	r0, [r8, r3, lsl #2]
   114c0:	bl	13fac <__assert_fail@plt+0x2dbc>
   114c4:	mov	r1, #0
   114c8:	mov	r2, r4
   114cc:	mov	r3, r0
   114d0:	mov	r0, r1
   114d4:	bl	11028 <error@plt>
   114d8:	b	1136c <__assert_fail@plt+0x17c>
   114dc:	andeq	r5, r1, sp, lsr #28
   114e0:	andeq	r5, r1, lr, lsr #28
   114e4:	andeq	r5, r1, fp, lsl #27
   114e8:	andeq	r2, r1, r8, lsl r7
   114ec:	andeq	r5, r1, r4, asr #12
   114f0:	andeq	r7, r2, ip, lsl #3
   114f4:	andeq	r5, r1, r5, ror lr
   114f8:	andeq	r5, r1, r4, lsl #29
   114fc:	muleq	r1, r3, lr
   11500:	andeq	r7, r2, r8, ror r1
   11504:	andeq	r5, r1, r6, asr #28
   11508:	andeq	r7, r2, r4, lsl #3
   1150c:	andeq	r5, r1, r4, asr lr
   11510:	andeq	r5, r1, r4, ror #28
   11514:	andeq	r5, r1, r7, lsl #27
   11518:	andeq	r7, r2, r8, lsr #2
   1151c:	andeq	r5, r1, r7, lsl #17
   11520:	andeq	r5, r1, sl, lsr sp
   11524:	muleq	r1, pc, lr	; <UNPREDICTABLE>
   11528:	mov	fp, #0
   1152c:	mov	lr, #0
   11530:	pop	{r1}		; (ldr r1, [sp], #4)
   11534:	mov	r2, sp
   11538:	push	{r2}		; (str r2, [sp, #-4]!)
   1153c:	push	{r0}		; (str r0, [sp, #-4]!)
   11540:	ldr	ip, [pc, #16]	; 11558 <__assert_fail@plt+0x368>
   11544:	push	{ip}		; (str ip, [sp, #-4]!)
   11548:	ldr	r0, [pc, #12]	; 1155c <__assert_fail@plt+0x36c>
   1154c:	ldr	r3, [pc, #12]	; 11560 <__assert_fail@plt+0x370>
   11550:	bl	11058 <__libc_start_main@plt>
   11554:	bl	111d8 <abort@plt>
   11558:	andeq	r5, r1, r8, asr #11
   1155c:	strdeq	r1, [r1], -ip
   11560:	andeq	r5, r1, r8, ror #10
   11564:	ldr	r3, [pc, #20]	; 11580 <__assert_fail@plt+0x390>
   11568:	ldr	r2, [pc, #20]	; 11584 <__assert_fail@plt+0x394>
   1156c:	add	r3, pc, r3
   11570:	ldr	r2, [r3, r2]
   11574:	cmp	r2, #0
   11578:	bxeq	lr
   1157c:	b	11088 <__gmon_start__@plt>
   11580:	andeq	r5, r1, ip, lsl #21
   11584:	andeq	r0, r0, r4, lsl r1
   11588:	ldr	r3, [pc, #28]	; 115ac <__assert_fail@plt+0x3bc>
   1158c:	ldr	r0, [pc, #28]	; 115b0 <__assert_fail@plt+0x3c0>
   11590:	sub	r3, r3, r0
   11594:	cmp	r3, #6
   11598:	bxls	lr
   1159c:	ldr	r3, [pc, #16]	; 115b4 <__assert_fail@plt+0x3c4>
   115a0:	cmp	r3, #0
   115a4:	bxeq	lr
   115a8:	bx	r3
   115ac:	andeq	r7, r2, r3, ror r1
   115b0:	andeq	r7, r2, r0, ror r1
   115b4:	andeq	r0, r0, r0
   115b8:	ldr	r1, [pc, #36]	; 115e4 <__assert_fail@plt+0x3f4>
   115bc:	ldr	r0, [pc, #36]	; 115e8 <__assert_fail@plt+0x3f8>
   115c0:	sub	r1, r1, r0
   115c4:	asr	r1, r1, #2
   115c8:	add	r1, r1, r1, lsr #31
   115cc:	asrs	r1, r1, #1
   115d0:	bxeq	lr
   115d4:	ldr	r3, [pc, #16]	; 115ec <__assert_fail@plt+0x3fc>
   115d8:	cmp	r3, #0
   115dc:	bxeq	lr
   115e0:	bx	r3
   115e4:	andeq	r7, r2, r0, ror r1
   115e8:	andeq	r7, r2, r0, ror r1
   115ec:	andeq	r0, r0, r0
   115f0:	push	{r4, lr}
   115f4:	ldr	r4, [pc, #24]	; 11614 <__assert_fail@plt+0x424>
   115f8:	ldrb	r3, [r4]
   115fc:	cmp	r3, #0
   11600:	popne	{r4, pc}
   11604:	bl	11588 <__assert_fail@plt+0x398>
   11608:	mov	r3, #1
   1160c:	strb	r3, [r4]
   11610:	pop	{r4, pc}
   11614:	andeq	r7, r2, r8, lsl #3
   11618:	ldr	r0, [pc, #40]	; 11648 <__assert_fail@plt+0x458>
   1161c:	ldr	r3, [r0]
   11620:	cmp	r3, #0
   11624:	bne	1162c <__assert_fail@plt+0x43c>
   11628:	b	115b8 <__assert_fail@plt+0x3c8>
   1162c:	ldr	r3, [pc, #24]	; 1164c <__assert_fail@plt+0x45c>
   11630:	cmp	r3, #0
   11634:	beq	11628 <__assert_fail@plt+0x438>
   11638:	push	{r4, lr}
   1163c:	blx	r3
   11640:	pop	{r4, lr}
   11644:	b	115b8 <__assert_fail@plt+0x3c8>
   11648:	andeq	r6, r2, r4, lsl pc
   1164c:	andeq	r0, r0, r0
   11650:	add	r2, r1, r2
   11654:	cmp	r2, r1
   11658:	bls	11668 <__assert_fail@plt+0x478>
   1165c:	ldrb	r3, [r1], #1
   11660:	cmp	r3, #0
   11664:	bne	11674 <__assert_fail@plt+0x484>
   11668:	mov	r3, #0
   1166c:	strb	r3, [r0]
   11670:	bx	lr
   11674:	strb	r3, [r0], #1
   11678:	b	11654 <__assert_fail@plt+0x464>
   1167c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11680:	mov	fp, r3
   11684:	ldr	r4, [pc, #452]	; 11850 <__assert_fail@plt+0x660>
   11688:	ldr	r3, [pc, #452]	; 11854 <__assert_fail@plt+0x664>
   1168c:	sub	sp, sp, #76	; 0x4c
   11690:	mov	sl, r0
   11694:	strb	r2, [r3, #1]
   11698:	ldrb	r3, [r4]
   1169c:	mov	r5, r1
   116a0:	ldr	r8, [sp, #120]	; 0x78
   116a4:	cmp	r3, #0
   116a8:	ldr	r6, [sp, #124]	; 0x7c
   116ac:	ldr	r9, [sp, #132]	; 0x84
   116b0:	add	r7, sp, #48	; 0x30
   116b4:	beq	117e8 <__assert_fail@plt+0x5f8>
   116b8:	ldrb	r3, [r4, #1]
   116bc:	cmp	r3, #0
   116c0:	bne	117e8 <__assert_fail@plt+0x5f8>
   116c4:	mov	r0, r8
   116c8:	bl	110d0 <strlen@plt>
   116cc:	cmp	r0, #6
   116d0:	bhi	117e8 <__assert_fail@plt+0x5f8>
   116d4:	str	r8, [sp]
   116d8:	ldr	r3, [pc, #376]	; 11858 <__assert_fail@plt+0x668>
   116dc:	mov	r2, #8
   116e0:	mov	r1, #1
   116e4:	mov	r0, r7
   116e8:	bl	110f4 <__sprintf_chk@plt>
   116ec:	ldrb	r3, [r4, #1]
   116f0:	add	r8, sp, #56	; 0x38
   116f4:	cmp	r3, #0
   116f8:	bne	117f4 <__assert_fail@plt+0x604>
   116fc:	mov	r0, r6
   11700:	bl	110d0 <strlen@plt>
   11704:	cmp	r0, #11
   11708:	bhi	117f4 <__assert_fail@plt+0x604>
   1170c:	str	r6, [sp]
   11710:	ldr	r3, [pc, #324]	; 1185c <__assert_fail@plt+0x66c>
   11714:	mov	r2, #13
   11718:	mov	r1, #1
   1171c:	mov	r0, r8
   11720:	bl	110f4 <__sprintf_chk@plt>
   11724:	ldrb	r3, [r4, #2]
   11728:	cmp	r3, #0
   1172c:	moveq	r0, #1
   11730:	beq	11748 <__assert_fail@plt+0x558>
   11734:	mov	r0, r9
   11738:	bl	110d0 <strlen@plt>
   1173c:	cmp	r0, #11
   11740:	addhi	r0, r0, #2
   11744:	movls	r0, #14
   11748:	bl	1468c <__assert_fail@plt+0x349c>
   1174c:	ldrb	r3, [r4, #2]
   11750:	cmp	r3, #0
   11754:	mov	r6, r0
   11758:	strbeq	r3, [r0]
   1175c:	beq	11774 <__assert_fail@plt+0x584>
   11760:	str	r9, [sp]
   11764:	ldr	r3, [pc, #244]	; 11860 <__assert_fail@plt+0x670>
   11768:	mvn	r2, #0
   1176c:	mov	r1, #1
   11770:	bl	110f4 <__sprintf_chk@plt>
   11774:	ldrb	r1, [r4, #3]
   11778:	ldr	r3, [pc, #228]	; 11864 <__assert_fail@plt+0x674>
   1177c:	cmp	r5, #0
   11780:	ldr	r2, [pc, #224]	; 11868 <__assert_fail@plt+0x678>
   11784:	moveq	r5, r3
   11788:	cmp	r1, #0
   1178c:	ldr	r3, [pc, #192]	; 11854 <__assert_fail@plt+0x664>
   11790:	moveq	r3, r2
   11794:	ldr	r2, [sp, #128]	; 0x80
   11798:	str	r6, [sp, #36]	; 0x24
   1179c:	str	r2, [sp, #32]
   117a0:	ldr	r2, [sp, #116]	; 0x74
   117a4:	str	r8, [sp, #28]
   117a8:	str	r7, [sp, #24]
   117ac:	str	r2, [sp, #20]
   117b0:	ldr	r2, [r4, #4]
   117b4:	mov	r1, #1
   117b8:	str	r2, [sp, #16]
   117bc:	ldr	r2, [sp, #112]	; 0x70
   117c0:	stmib	sp, {r3, fp}
   117c4:	str	r2, [sp, #12]
   117c8:	str	r5, [sp]
   117cc:	mov	r3, sl
   117d0:	ldr	r2, [pc, #148]	; 1186c <__assert_fail@plt+0x67c>
   117d4:	add	r0, sp, #44	; 0x2c
   117d8:	bl	11034 <__asprintf_chk@plt>
   117dc:	cmn	r0, #1
   117e0:	bne	11800 <__assert_fail@plt+0x610>
   117e4:	bl	14b20 <__assert_fail@plt+0x3930>
   117e8:	mov	r3, #0
   117ec:	strb	r3, [sp, #48]	; 0x30
   117f0:	b	116ec <__assert_fail@plt+0x4fc>
   117f4:	mov	r3, #0
   117f8:	strb	r3, [sp, #56]	; 0x38
   117fc:	b	11724 <__assert_fail@plt+0x534>
   11800:	ldr	r4, [sp, #44]	; 0x2c
   11804:	mov	r0, r4
   11808:	bl	110d0 <strlen@plt>
   1180c:	add	r0, r4, r0
   11810:	ldrb	r3, [r0, #-1]
   11814:	sub	r2, r0, #1
   11818:	cmp	r3, #32
   1181c:	beq	11848 <__assert_fail@plt+0x658>
   11820:	mov	r3, #0
   11824:	strb	r3, [r0]
   11828:	ldr	r0, [sp, #44]	; 0x2c
   1182c:	bl	11040 <puts@plt>
   11830:	ldr	r0, [sp, #44]	; 0x2c
   11834:	bl	127fc <__assert_fail@plt+0x160c>
   11838:	mov	r0, r6
   1183c:	bl	127fc <__assert_fail@plt+0x160c>
   11840:	add	sp, sp, #76	; 0x4c
   11844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11848:	mov	r0, r2
   1184c:	b	11810 <__assert_fail@plt+0x620>
   11850:	andeq	r7, r2, ip, lsl #3
   11854:	andeq	r7, r2, r0, lsr #2
   11858:	andeq	r5, r1, r9, ror #14
   1185c:	andeq	r5, r1, pc, ror #14
   11860:	andeq	r5, r1, r5, ror r7
   11864:	andeq	r5, r1, r4, ror #14
   11868:	andeq	r5, r1, sp, lsr #28
   1186c:	andeq	r5, r1, ip, ror r7
   11870:	push	{r4, r5, r6, lr}
   11874:	mov	r2, #5
   11878:	ldr	r5, [pc, #76]	; 118cc <__assert_fail@plt+0x6dc>
   1187c:	mov	r6, r0
   11880:	mov	r1, r5
   11884:	mov	r0, #0
   11888:	bl	10f98 <dcgettext@plt>
   1188c:	bl	110d0 <strlen@plt>
   11890:	add	r0, r0, #5
   11894:	bl	1468c <__assert_fail@plt+0x349c>
   11898:	mov	r2, #5
   1189c:	mov	r1, r5
   118a0:	mov	r4, r0
   118a4:	mov	r0, #0
   118a8:	bl	10f98 <dcgettext@plt>
   118ac:	mov	r1, r0
   118b0:	mov	r0, r4
   118b4:	bl	10f80 <stpcpy@plt>
   118b8:	mov	r2, #4
   118bc:	add	r1, r6, #40	; 0x28
   118c0:	bl	11650 <__assert_fail@plt+0x460>
   118c4:	mov	r0, r4
   118c8:	pop	{r4, r5, r6, pc}
   118cc:	muleq	r1, sp, r7
   118d0:	push	{r0, r1, r4, lr}
   118d4:	add	r3, sp, #8
   118d8:	str	r0, [r3, #-4]!
   118dc:	mov	r0, r3
   118e0:	bl	1107c <localtime@plt>
   118e4:	subs	r3, r0, #0
   118e8:	beq	1190c <__assert_fail@plt+0x71c>
   118ec:	ldr	r4, [pc, #44]	; 11920 <__assert_fail@plt+0x730>
   118f0:	mov	r1, #33	; 0x21
   118f4:	add	r0, r4, #8
   118f8:	ldr	r2, [r4, #44]	; 0x2c
   118fc:	bl	11064 <strftime@plt>
   11900:	add	r0, r4, #8
   11904:	add	sp, sp, #8
   11908:	pop	{r4, pc}
   1190c:	ldr	r0, [sp, #4]
   11910:	ldr	r2, [pc, #12]	; 11924 <__assert_fail@plt+0x734>
   11914:	asr	r1, r0, #31
   11918:	bl	128ac <__assert_fail@plt+0x16bc>
   1191c:	b	11904 <__assert_fail@plt+0x714>
   11920:	andeq	r7, r2, ip, lsl #3
   11924:	muleq	r2, r4, r1
   11928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1192c:	sub	sp, sp, #468	; 0x1d4
   11930:	ldr	r3, [r0, #4]
   11934:	mov	r5, r0
   11938:	add	fp, sp, #44	; 0x2c
   1193c:	str	r3, [sp]
   11940:	mov	r7, r1
   11944:	ldr	r3, [pc, #808]	; 11c74 <__assert_fail@plt+0xa84>
   11948:	mov	r2, #12
   1194c:	mov	r1, #1
   11950:	mov	r0, fp
   11954:	bl	110f4 <__sprintf_chk@plt>
   11958:	ldrb	r3, [r5, #8]
   1195c:	cmp	r3, #47	; 0x2f
   11960:	addeq	r0, sp, #56	; 0x38
   11964:	beq	11974 <__assert_fail@plt+0x784>
   11968:	ldr	r1, [pc, #776]	; 11c78 <__assert_fail@plt+0xa88>
   1196c:	add	r0, sp, #56	; 0x38
   11970:	bl	10f80 <stpcpy@plt>
   11974:	add	r3, r5, #8
   11978:	mov	r1, r3
   1197c:	mov	r2, #32
   11980:	str	r3, [sp, #24]
   11984:	bl	11650 <__assert_fail@plt+0x460>
   11988:	add	r1, sp, #96	; 0x60
   1198c:	add	r0, sp, #56	; 0x38
   11990:	bl	155e4 <__assert_fail@plt+0x43f4>
   11994:	add	r9, sp, #36	; 0x24
   11998:	cmp	r0, #0
   1199c:	bne	11bc0 <__assert_fail@plt+0x9d0>
   119a0:	ldr	r3, [sp, #112]	; 0x70
   119a4:	ldr	r6, [sp, #168]	; 0xa8
   119a8:	tst	r3, #16
   119ac:	movne	sl, #43	; 0x2b
   119b0:	moveq	sl, #45	; 0x2d
   119b4:	cmp	r6, #0
   119b8:	beq	11bc4 <__assert_fail@plt+0x9d4>
   119bc:	ldr	r4, [pc, #696]	; 11c7c <__assert_fail@plt+0xa8c>
   119c0:	ldr	r3, [r4, #4]
   119c4:	cmp	r3, #-2147483648	; 0x80000000
   119c8:	bne	119d4 <__assert_fail@plt+0x7e4>
   119cc:	add	r0, r4, #4
   119d0:	bl	10f68 <time@plt>
   119d4:	cmp	r6, r7
   119d8:	ble	11ba4 <__assert_fail@plt+0x9b4>
   119dc:	ldr	r4, [r4, #4]
   119e0:	ldr	r3, [pc, #664]	; 11c80 <__assert_fail@plt+0xa90>
   119e4:	add	r3, r4, r3
   119e8:	cmp	r6, r3
   119ec:	movlt	r3, #0
   119f0:	movge	r3, #1
   119f4:	cmp	r6, r4
   119f8:	movgt	r3, #0
   119fc:	cmp	r3, #0
   11a00:	beq	11ba4 <__assert_fail@plt+0x9b4>
   11a04:	sub	r4, r4, r6
   11a08:	cmp	r4, #59	; 0x3b
   11a0c:	ble	11bb8 <__assert_fail@plt+0x9c8>
   11a10:	ldr	r3, [pc, #620]	; 11c84 <__assert_fail@plt+0xa94>
   11a14:	cmp	r4, r3
   11a18:	ble	11a30 <__assert_fail@plt+0x840>
   11a1c:	ldr	r3, [pc, #612]	; 11c88 <__assert_fail@plt+0xa98>
   11a20:	mov	r2, #205	; 0xcd
   11a24:	ldr	r1, [pc, #608]	; 11c8c <__assert_fail@plt+0xa9c>
   11a28:	ldr	r0, [pc, #608]	; 11c90 <__assert_fail@plt+0xaa0>
   11a2c:	bl	111f0 <__assert_fail@plt>
   11a30:	mov	r1, #3600	; 0xe10
   11a34:	mov	r0, r4
   11a38:	bl	1533c <__assert_fail@plt+0x414c>
   11a3c:	mov	r0, r1
   11a40:	mov	r1, #60	; 0x3c
   11a44:	bl	1511c <__assert_fail@plt+0x3f2c>
   11a48:	mov	r1, #3600	; 0xe10
   11a4c:	str	r0, [sp, #4]
   11a50:	mov	r0, r4
   11a54:	bl	1511c <__assert_fail@plt+0x3f2c>
   11a58:	ldr	r3, [pc, #564]	; 11c94 <__assert_fail@plt+0xaa4>
   11a5c:	mov	r2, #6
   11a60:	mov	r1, #1
   11a64:	str	r0, [sp]
   11a68:	ldr	r0, [pc, #552]	; 11c98 <__assert_fail@plt+0xaa8>
   11a6c:	bl	110f4 <__sprintf_chk@plt>
   11a70:	ldr	r0, [pc, #544]	; 11c98 <__assert_fail@plt+0xaa8>
   11a74:	mov	r3, #6
   11a78:	str	r0, [sp, #4]
   11a7c:	str	r3, [sp]
   11a80:	mov	r2, #7
   11a84:	ldr	r3, [pc, #528]	; 11c9c <__assert_fail@plt+0xaac>
   11a88:	mov	r1, #1
   11a8c:	mov	r0, r9
   11a90:	bl	110f4 <__sprintf_chk@plt>
   11a94:	ldrb	r3, [r5, #76]	; 0x4c
   11a98:	ldr	r4, [pc, #512]	; 11ca0 <__assert_fail@plt+0xab0>
   11a9c:	cmp	r3, #0
   11aa0:	beq	11c3c <__assert_fail@plt+0xa4c>
   11aa4:	add	r8, sp, #204	; 0xcc
   11aa8:	mov	r2, #256	; 0x100
   11aac:	add	r1, r5, #76	; 0x4c
   11ab0:	mov	r0, r8
   11ab4:	bl	11650 <__assert_fail@plt+0x460>
   11ab8:	mov	r1, #58	; 0x3a
   11abc:	mov	r0, r8
   11ac0:	bl	110dc <strchr@plt>
   11ac4:	subs	r7, r0, #0
   11ac8:	movne	r3, #0
   11acc:	strbne	r3, [r7]
   11ad0:	ldrb	r3, [sp, #204]	; 0xcc
   11ad4:	addne	r7, r7, #1
   11ad8:	cmp	r3, #0
   11adc:	bne	11bd4 <__assert_fail@plt+0x9e4>
   11ae0:	mov	r6, r8
   11ae4:	cmp	r7, #0
   11ae8:	mov	r0, r6
   11aec:	beq	11bf4 <__assert_fail@plt+0xa04>
   11af0:	bl	110d0 <strlen@plt>
   11af4:	str	r0, [sp, #28]
   11af8:	mov	r0, r7
   11afc:	bl	110d0 <strlen@plt>
   11b00:	ldr	r3, [sp, #28]
   11b04:	add	r0, r3, r0
   11b08:	ldr	r3, [r4, #56]	; 0x38
   11b0c:	add	r0, r0, #4
   11b10:	cmp	r0, r3
   11b14:	bls	11b30 <__assert_fail@plt+0x940>
   11b18:	str	r0, [r4, #56]	; 0x38
   11b1c:	ldr	r0, [r4, #60]	; 0x3c
   11b20:	bl	127fc <__assert_fail@plt+0x160c>
   11b24:	ldr	r0, [r4, #56]	; 0x38
   11b28:	bl	1468c <__assert_fail@plt+0x349c>
   11b2c:	str	r0, [r4, #60]	; 0x3c
   11b30:	stm	sp, {r6, r7}
   11b34:	ldr	r3, [pc, #360]	; 11ca4 <__assert_fail@plt+0xab4>
   11b38:	mvn	r2, #0
   11b3c:	mov	r1, #1
   11b40:	ldr	r0, [r4, #60]	; 0x3c
   11b44:	bl	110f4 <__sprintf_chk@plt>
   11b48:	cmp	r6, r8
   11b4c:	beq	11b58 <__assert_fail@plt+0x968>
   11b50:	mov	r0, r6
   11b54:	bl	127fc <__assert_fail@plt+0x160c>
   11b58:	ldr	r0, [r5, #340]	; 0x154
   11b5c:	bl	118d0 <__assert_fail@plt+0x6e0>
   11b60:	ldr	r3, [r4, #60]	; 0x3c
   11b64:	ldr	r2, [pc, #316]	; 11ca8 <__assert_fail@plt+0xab8>
   11b68:	cmp	r3, #0
   11b6c:	moveq	r3, r2
   11b70:	str	r3, [sp, #16]
   11b74:	ldr	r3, [sp, #24]
   11b78:	add	r6, r5, #44	; 0x2c
   11b7c:	str	r3, [sp]
   11b80:	mov	r3, #32
   11b84:	str	r2, [sp, #20]
   11b88:	mov	r1, r6
   11b8c:	mov	r2, sl
   11b90:	stmib	sp, {r0, r9, fp}
   11b94:	mov	r0, r3
   11b98:	bl	1167c <__assert_fail@plt+0x48c>
   11b9c:	add	sp, sp, #468	; 0x1d4
   11ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #252]	; 11cac <__assert_fail@plt+0xabc>
   11bac:	mov	r0, #0
   11bb0:	bl	10f98 <dcgettext@plt>
   11bb4:	b	11a74 <__assert_fail@plt+0x884>
   11bb8:	ldr	r0, [pc, #240]	; 11cb0 <__assert_fail@plt+0xac0>
   11bbc:	b	11a74 <__assert_fail@plt+0x884>
   11bc0:	mov	sl, #63	; 0x3f
   11bc4:	ldr	r1, [pc, #232]	; 11cb4 <__assert_fail@plt+0xac4>
   11bc8:	mov	r0, r9
   11bcc:	bl	10ff8 <strcpy@plt>
   11bd0:	b	11a94 <__assert_fail@plt+0x8a4>
   11bd4:	ldrb	r3, [r4, #54]	; 0x36
   11bd8:	cmp	r3, #0
   11bdc:	beq	11ae0 <__assert_fail@plt+0x8f0>
   11be0:	mov	r0, r8
   11be4:	bl	126dc <__assert_fail@plt+0x14ec>
   11be8:	subs	r6, r0, #0
   11bec:	bne	11ae4 <__assert_fail@plt+0x8f4>
   11bf0:	b	11ae0 <__assert_fail@plt+0x8f0>
   11bf4:	bl	110d0 <strlen@plt>
   11bf8:	ldr	r3, [r4, #56]	; 0x38
   11bfc:	add	r0, r0, #3
   11c00:	cmp	r0, r3
   11c04:	bls	11c20 <__assert_fail@plt+0xa30>
   11c08:	str	r0, [r4, #56]	; 0x38
   11c0c:	ldr	r0, [r4, #60]	; 0x3c
   11c10:	bl	127fc <__assert_fail@plt+0x160c>
   11c14:	ldr	r0, [r4, #56]	; 0x38
   11c18:	bl	1468c <__assert_fail@plt+0x349c>
   11c1c:	str	r0, [r4, #60]	; 0x3c
   11c20:	str	r6, [sp]
   11c24:	ldr	r3, [pc, #140]	; 11cb8 <__assert_fail@plt+0xac8>
   11c28:	mvn	r2, #0
   11c2c:	mov	r1, #1
   11c30:	ldr	r0, [r4, #60]	; 0x3c
   11c34:	bl	110f4 <__sprintf_chk@plt>
   11c38:	b	11b48 <__assert_fail@plt+0x958>
   11c3c:	ldr	r3, [r4, #56]	; 0x38
   11c40:	cmp	r3, #0
   11c44:	bne	11c64 <__assert_fail@plt+0xa74>
   11c48:	mov	r3, #1
   11c4c:	ldr	r0, [r4, #60]	; 0x3c
   11c50:	str	r3, [r4, #56]	; 0x38
   11c54:	bl	127fc <__assert_fail@plt+0x160c>
   11c58:	ldr	r0, [r4, #56]	; 0x38
   11c5c:	bl	1468c <__assert_fail@plt+0x349c>
   11c60:	str	r0, [r4, #60]	; 0x3c
   11c64:	ldr	r3, [r4, #60]	; 0x3c
   11c68:	mov	r2, #0
   11c6c:	strb	r2, [r3]
   11c70:	b	11b58 <__assert_fail@plt+0x968>
   11c74:	andeq	r5, r1, r7, lsr #15
   11c78:	andeq	r5, r1, fp, lsr #15
   11c7c:	andeq	r7, r2, r0, lsr #2
   11c80:			; <UNDEFINED> instruction: 0xfffeae81
   11c84:	andeq	r5, r1, pc, ror r1
   11c88:	andeq	r5, r1, r0, lsl #12
   11c8c:			; <UNDEFINED> instruction: 0x000157b1
   11c90:			; <UNDEFINED> instruction: 0x000157bb
   11c94:	ldrdeq	r5, [r1], -r9
   11c98:			; <UNDEFINED> instruction: 0x000271bc
   11c9c:	andeq	r5, r1, r9, ror #15
   11ca0:	andeq	r7, r2, ip, lsl #3
   11ca4:	strdeq	r5, [r1], -r2
   11ca8:	andeq	r5, r1, sp, lsr #28
   11cac:	andeq	r5, r1, r3, ror #15
   11cb0:	andeq	r5, r1, r1, lsr #15
   11cb4:	andeq	r5, r1, lr, ror #15
   11cb8:	strdeq	r5, [r1], -sl
   11cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cc0:	sub	sp, sp, #68	; 0x44
   11cc4:	mov	r3, r1
   11cc8:	add	r2, sp, #48	; 0x30
   11ccc:	add	r1, sp, #44	; 0x2c
   11cd0:	mov	r5, r0
   11cd4:	bl	14010 <__assert_fail@plt+0x2e20>
   11cd8:	subs	r2, r0, #0
   11cdc:	beq	11d0c <__assert_fail@plt+0xb1c>
   11ce0:	bl	110e8 <__errno_location@plt>
   11ce4:	mov	r2, r5
   11ce8:	mov	r1, #3
   11cec:	ldr	r4, [r0]
   11cf0:	mov	r0, #0
   11cf4:	bl	13e6c <__assert_fail@plt+0x2c7c>
   11cf8:	ldr	r2, [pc, #1544]	; 12308 <__assert_fail@plt+0x1118>
   11cfc:	mov	r1, r4
   11d00:	mov	r3, r0
   11d04:	mov	r0, #1
   11d08:	bl	11028 <error@plt>
   11d0c:	ldr	r5, [pc, #1528]	; 1230c <__assert_fail@plt+0x111c>
   11d10:	ldr	r3, [sp, #44]	; 0x2c
   11d14:	ldr	r4, [sp, #48]	; 0x30
   11d18:	ldrb	r6, [r5, #64]	; 0x40
   11d1c:	cmp	r6, #0
   11d20:	beq	11dc8 <__assert_fail@plt+0xbd8>
   11d24:	ldr	r7, [pc, #1508]	; 12310 <__assert_fail@plt+0x1120>
   11d28:	ldr	r9, [pc, #1508]	; 12314 <__assert_fail@plt+0x1124>
   11d2c:	ldr	fp, [pc, #1508]	; 12318 <__assert_fail@plt+0x1128>
   11d30:	mov	r5, r3
   11d34:	mov	r6, r2
   11d38:	mov	sl, #1
   11d3c:	cmp	r5, #0
   11d40:	bne	11d74 <__assert_fail@plt+0xb84>
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [pc, #1484]	; 1231c <__assert_fail@plt+0x112c>
   11d4c:	mov	r0, r5
   11d50:	bl	10f98 <dcgettext@plt>
   11d54:	mov	r2, r6
   11d58:	mov	r1, r0
   11d5c:	mov	r0, #1
   11d60:	bl	11124 <__printf_chk@plt>
   11d64:	ldr	r0, [sp, #48]	; 0x30
   11d68:	bl	127fc <__assert_fail@plt+0x160c>
   11d6c:	add	sp, sp, #68	; 0x44
   11d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d74:	ldrb	r3, [r4, #44]	; 0x2c
   11d78:	cmp	r3, #0
   11d7c:	beq	11dbc <__assert_fail@plt+0xbcc>
   11d80:	ldrsh	r3, [r4]
   11d84:	cmp	r3, #7
   11d88:	bne	11dbc <__assert_fail@plt+0xbcc>
   11d8c:	mov	r0, r4
   11d90:	bl	13fb8 <__assert_fail@plt+0x2dc8>
   11d94:	mov	r2, r7
   11d98:	mov	r1, r9
   11d9c:	add	r6, r6, #1
   11da0:	mov	r7, fp
   11da4:	mov	r3, r0
   11da8:	mov	r8, r0
   11dac:	mov	r0, sl
   11db0:	bl	11124 <__printf_chk@plt>
   11db4:	mov	r0, r8
   11db8:	bl	127fc <__assert_fail@plt+0x160c>
   11dbc:	add	r4, r4, #384	; 0x180
   11dc0:	sub	r5, r5, #1
   11dc4:	b	11d3c <__assert_fail@plt+0xb4c>
   11dc8:	str	r3, [sp, #28]
   11dcc:	ldrb	r3, [r5, #65]	; 0x41
   11dd0:	cmp	r3, #0
   11dd4:	beq	11e80 <__assert_fail@plt+0xc90>
   11dd8:	mov	r2, #5
   11ddc:	ldr	r1, [pc, #1340]	; 12320 <__assert_fail@plt+0x1130>
   11de0:	bl	10f98 <dcgettext@plt>
   11de4:	mov	r2, #5
   11de8:	ldr	r1, [pc, #1332]	; 12324 <__assert_fail@plt+0x1134>
   11dec:	mov	r7, r0
   11df0:	mov	r0, r6
   11df4:	bl	10f98 <dcgettext@plt>
   11df8:	mov	r2, #5
   11dfc:	ldr	r1, [pc, #1316]	; 12328 <__assert_fail@plt+0x1138>
   11e00:	mov	r8, r0
   11e04:	mov	r0, r6
   11e08:	bl	10f98 <dcgettext@plt>
   11e0c:	mov	r2, #5
   11e10:	ldr	r1, [pc, #1300]	; 1232c <__assert_fail@plt+0x113c>
   11e14:	mov	r9, r0
   11e18:	mov	r0, r6
   11e1c:	bl	10f98 <dcgettext@plt>
   11e20:	mov	r2, #5
   11e24:	ldr	r1, [pc, #1284]	; 12330 <__assert_fail@plt+0x1140>
   11e28:	mov	sl, r0
   11e2c:	mov	r0, r6
   11e30:	bl	10f98 <dcgettext@plt>
   11e34:	mov	r2, #5
   11e38:	ldr	r1, [pc, #1268]	; 12334 <__assert_fail@plt+0x1144>
   11e3c:	mov	fp, r0
   11e40:	mov	r0, r6
   11e44:	bl	10f98 <dcgettext@plt>
   11e48:	mov	r2, #5
   11e4c:	ldr	r1, [pc, #1252]	; 12338 <__assert_fail@plt+0x1148>
   11e50:	str	r0, [sp, #24]
   11e54:	mov	r0, r6
   11e58:	bl	10f98 <dcgettext@plt>
   11e5c:	ldr	r3, [sp, #24]
   11e60:	stm	sp, {r8, r9, sl, fp}
   11e64:	mov	r2, #32
   11e68:	str	r3, [sp, #16]
   11e6c:	mvn	r3, #0
   11e70:	mov	r1, r7
   11e74:	str	r0, [sp, #20]
   11e78:	mov	r0, r3
   11e7c:	bl	1167c <__assert_fail@plt+0x48c>
   11e80:	ldrb	r3, [r5, #66]	; 0x42
   11e84:	cmp	r3, #0
   11e88:	beq	11ebc <__assert_fail@plt+0xccc>
   11e8c:	mov	r0, #0
   11e90:	bl	110c4 <ttyname@plt>
   11e94:	subs	r3, r0, #0
   11e98:	str	r3, [sp, #24]
   11e9c:	beq	11d64 <__assert_fail@plt+0xb74>
   11ea0:	mov	r2, #5
   11ea4:	ldr	r1, [pc, #1168]	; 1233c <__assert_fail@plt+0x114c>
   11ea8:	bl	111cc <strncmp@plt>
   11eac:	cmp	r0, #0
   11eb0:	bne	11ec0 <__assert_fail@plt+0xcd0>
   11eb4:	ldr	r3, [sp, #24]
   11eb8:	add	r3, r3, #5
   11ebc:	str	r3, [sp, #24]
   11ec0:	ldr	r6, [pc, #1096]	; 12310 <__assert_fail@plt+0x1120>
   11ec4:	add	r7, r4, #384	; 0x180
   11ec8:	add	r8, sp, #52	; 0x34
   11ecc:	add	r4, r4, #8
   11ed0:	mov	r3, #-2147483648	; 0x80000000
   11ed4:	str	r3, [sp, #32]
   11ed8:	ldr	r3, [sp, #28]
   11edc:	sub	r9, r4, #8
   11ee0:	cmp	r3, #0
   11ee4:	beq	11d64 <__assert_fail@plt+0xb74>
   11ee8:	ldrb	r3, [r5, #66]	; 0x42
   11eec:	cmp	r3, #0
   11ef0:	beq	11f0c <__assert_fail@plt+0xd1c>
   11ef4:	mov	r2, #32
   11ef8:	mov	r1, r4
   11efc:	ldr	r0, [sp, #24]
   11f00:	bl	111cc <strncmp@plt>
   11f04:	cmp	r0, #0
   11f08:	bne	11f3c <__assert_fail@plt+0xd4c>
   11f0c:	ldrb	r3, [r5, #67]	; 0x43
   11f10:	cmp	r3, #0
   11f14:	beq	11f64 <__assert_fail@plt+0xd74>
   11f18:	ldrb	r3, [r4, #36]	; 0x24
   11f1c:	cmp	r3, #0
   11f20:	beq	11f64 <__assert_fail@plt+0xd74>
   11f24:	ldrsh	r3, [r4, #-8]
   11f28:	cmp	r3, #7
   11f2c:	bne	11f64 <__assert_fail@plt+0xd74>
   11f30:	ldr	r1, [sp, #32]
   11f34:	mov	r0, r9
   11f38:	bl	11928 <__assert_fail@plt+0x738>
   11f3c:	ldrsh	r3, [r4, #-8]
   11f40:	add	r7, r7, #384	; 0x180
   11f44:	add	r4, r4, #384	; 0x180
   11f48:	cmp	r3, #2
   11f4c:	ldreq	r3, [r7, #-428]	; 0xfffffe54
   11f50:	streq	r3, [sp, #32]
   11f54:	ldr	r3, [sp, #28]
   11f58:	sub	r3, r3, #1
   11f5c:	str	r3, [sp, #28]
   11f60:	b	11ed8 <__assert_fail@plt+0xce8>
   11f64:	ldrb	r3, [r5, #68]	; 0x44
   11f68:	cmp	r3, #0
   11f6c:	beq	120ac <__assert_fail@plt+0xebc>
   11f70:	ldrsh	r3, [r4, #-8]
   11f74:	cmp	r3, #1
   11f78:	bne	120ac <__assert_fail@plt+0xebc>
   11f7c:	ldr	r3, [r4, #-4]
   11f80:	ldr	r0, [r5, #72]	; 0x48
   11f84:	cmp	r3, #0
   11f88:	add	r9, r3, #255	; 0xff
   11f8c:	movge	r9, r3
   11f90:	rsbs	r2, r3, #0
   11f94:	asr	r9, r9, #8
   11f98:	uxtb	r2, r2
   11f9c:	uxtb	sl, r3
   11fa0:	rsbpl	sl, r2, #0
   11fa4:	cmp	r0, #0
   11fa8:	uxtb	fp, r9
   11fac:	bne	11fcc <__assert_fail@plt+0xddc>
   11fb0:	mov	r2, #5
   11fb4:	ldr	r1, [pc, #900]	; 12340 <__assert_fail@plt+0x1150>
   11fb8:	bl	10f98 <dcgettext@plt>
   11fbc:	bl	110d0 <strlen@plt>
   11fc0:	add	r0, r0, #3
   11fc4:	bl	1468c <__assert_fail@plt+0x349c>
   11fc8:	str	r0, [r5, #72]	; 0x48
   11fcc:	ldr	r3, [r5, #72]	; 0x48
   11fd0:	mov	r2, #5
   11fd4:	ldr	r1, [pc, #868]	; 12340 <__assert_fail@plt+0x1150>
   11fd8:	mov	r0, #0
   11fdc:	str	r3, [sp, #36]	; 0x24
   11fe0:	bl	10f98 <dcgettext@plt>
   11fe4:	uxtb	r3, sl
   11fe8:	mvn	r2, #0
   11fec:	mov	r1, #1
   11ff0:	stm	sp, {r0, r3}
   11ff4:	ldr	r3, [pc, #840]	; 12344 <__assert_fail@plt+0x1154>
   11ff8:	ldr	r0, [sp, #36]	; 0x24
   11ffc:	bl	110f4 <__sprintf_chk@plt>
   12000:	ldr	r0, [r5, #76]	; 0x4c
   12004:	cmp	r0, #0
   12008:	bne	12028 <__assert_fail@plt+0xe38>
   1200c:	mov	r2, #5
   12010:	ldr	r1, [pc, #816]	; 12348 <__assert_fail@plt+0x1158>
   12014:	bl	10f98 <dcgettext@plt>
   12018:	bl	110d0 <strlen@plt>
   1201c:	add	r0, r0, #2
   12020:	bl	1468c <__assert_fail@plt+0x349c>
   12024:	str	r0, [r5, #76]	; 0x4c
   12028:	mov	r2, #5
   1202c:	ldr	r1, [pc, #788]	; 12348 <__assert_fail@plt+0x1158>
   12030:	mov	r0, #0
   12034:	ldr	sl, [r5, #76]	; 0x4c
   12038:	bl	10f98 <dcgettext@plt>
   1203c:	uxtb	r9, r9
   12040:	cmp	fp, #78	; 0x4e
   12044:	movne	fp, r9
   12048:	moveq	fp, #83	; 0x53
   1204c:	ldr	r3, [pc, #760]	; 1234c <__assert_fail@plt+0x115c>
   12050:	mvn	r2, #0
   12054:	mov	r1, #1
   12058:	sub	r9, r9, #32
   1205c:	stm	sp, {r0, fp}
   12060:	mov	r0, sl
   12064:	bl	110f4 <__sprintf_chk@plt>
   12068:	ldr	r0, [r7, #-44]	; 0xffffffd4
   1206c:	ldr	sl, [r5, #72]	; 0x48
   12070:	bl	118d0 <__assert_fail@plt+0x6e0>
   12074:	cmp	r9, #94	; 0x5e
   12078:	movhi	r3, r6
   1207c:	ldrls	r3, [r5, #76]	; 0x4c
   12080:	mov	r2, #32
   12084:	mov	r1, r6
   12088:	str	r6, [sp, #20]
   1208c:	str	r6, [sp, #12]
   12090:	str	sl, [sp]
   12094:	str	r3, [sp, #16]
   12098:	mvn	r3, #0
   1209c:	stmib	sp, {r0, r6}
   120a0:	mov	r0, r3
   120a4:	bl	1167c <__assert_fail@plt+0x48c>
   120a8:	b	11f3c <__assert_fail@plt+0xd4c>
   120ac:	ldrb	r3, [r5, #80]	; 0x50
   120b0:	cmp	r3, #0
   120b4:	beq	12104 <__assert_fail@plt+0xf14>
   120b8:	ldrsh	r3, [r4, #-8]
   120bc:	cmp	r3, #2
   120c0:	bne	12104 <__assert_fail@plt+0xf14>
   120c4:	ldr	r1, [pc, #644]	; 12350 <__assert_fail@plt+0x1160>
   120c8:	mov	r2, #5
   120cc:	mov	r0, #0
   120d0:	bl	10f98 <dcgettext@plt>
   120d4:	mov	r9, r0
   120d8:	ldr	r0, [r7, #-44]	; 0xffffffd4
   120dc:	bl	118d0 <__assert_fail@plt+0x6e0>
   120e0:	str	r6, [sp, #20]
   120e4:	str	r6, [sp, #16]
   120e8:	str	r6, [sp, #12]
   120ec:	str	r9, [sp]
   120f0:	mvn	r3, #0
   120f4:	mov	r2, #32
   120f8:	ldr	r1, [pc, #528]	; 12310 <__assert_fail@plt+0x1120>
   120fc:	stmib	sp, {r0, r6}
   12100:	b	120a0 <__assert_fail@plt+0xeb0>
   12104:	ldrb	r3, [r5, #81]	; 0x51
   12108:	cmp	r3, #0
   1210c:	beq	12124 <__assert_fail@plt+0xf34>
   12110:	ldrsh	r3, [r4, #-8]
   12114:	cmp	r3, #3
   12118:	moveq	r2, #5
   1211c:	ldreq	r1, [pc, #560]	; 12354 <__assert_fail@plt+0x1164>
   12120:	beq	120cc <__assert_fail@plt+0xedc>
   12124:	ldrb	r3, [r5, #82]	; 0x52
   12128:	cmp	r3, #0
   1212c:	beq	12188 <__assert_fail@plt+0xf98>
   12130:	ldrsh	r3, [r4, #-8]
   12134:	cmp	r3, #5
   12138:	bne	12188 <__assert_fail@plt+0xf98>
   1213c:	mov	r0, r9
   12140:	bl	11870 <__assert_fail@plt+0x680>
   12144:	ldr	r3, [r4, #-4]
   12148:	mov	r2, #12
   1214c:	str	r3, [sp]
   12150:	mov	r1, #1
   12154:	ldr	r3, [pc, #508]	; 12358 <__assert_fail@plt+0x1168>
   12158:	mov	r9, r0
   1215c:	mov	r0, r8
   12160:	bl	110f4 <__sprintf_chk@plt>
   12164:	ldr	r0, [r7, #-44]	; 0xffffffd4
   12168:	bl	118d0 <__assert_fail@plt+0x6e0>
   1216c:	str	r6, [sp, #20]
   12170:	mov	r3, #32
   12174:	stmib	sp, {r0, r6, r8, r9}
   12178:	mov	r2, r3
   1217c:	str	r4, [sp]
   12180:	ldr	r1, [pc, #392]	; 12310 <__assert_fail@plt+0x1120>
   12184:	b	121fc <__assert_fail@plt+0x100c>
   12188:	ldrb	r3, [r5, #83]	; 0x53
   1218c:	cmp	r3, #0
   12190:	beq	12210 <__assert_fail@plt+0x1020>
   12194:	ldrsh	r3, [r4, #-8]
   12198:	cmp	r3, #6
   1219c:	bne	12210 <__assert_fail@plt+0x1020>
   121a0:	mov	r0, r9
   121a4:	bl	11870 <__assert_fail@plt+0x680>
   121a8:	ldr	r3, [r4, #-4]
   121ac:	mov	r2, #12
   121b0:	str	r3, [sp]
   121b4:	mov	r1, #1
   121b8:	ldr	r3, [pc, #408]	; 12358 <__assert_fail@plt+0x1168>
   121bc:	mov	r9, r0
   121c0:	mov	r0, r8
   121c4:	bl	110f4 <__sprintf_chk@plt>
   121c8:	mov	r2, #5
   121cc:	ldr	r1, [pc, #392]	; 1235c <__assert_fail@plt+0x116c>
   121d0:	mov	r0, #0
   121d4:	bl	10f98 <dcgettext@plt>
   121d8:	mov	sl, r0
   121dc:	ldr	r0, [r7, #-44]	; 0xffffffd4
   121e0:	bl	118d0 <__assert_fail@plt+0x6e0>
   121e4:	mov	r3, #32
   121e8:	mov	r2, r3
   121ec:	mov	r1, sl
   121f0:	str	r6, [sp, #20]
   121f4:	str	r4, [sp]
   121f8:	stmib	sp, {r0, r6, r8, r9}
   121fc:	mvn	r0, #0
   12200:	bl	1167c <__assert_fail@plt+0x48c>
   12204:	mov	r0, r9
   12208:	bl	127fc <__assert_fail@plt+0x160c>
   1220c:	b	11f3c <__assert_fail@plt+0xd4c>
   12210:	ldrb	r3, [r5, #84]	; 0x54
   12214:	cmp	r3, #0
   12218:	beq	11f3c <__assert_fail@plt+0xd4c>
   1221c:	ldrsh	r3, [r4, #-8]
   12220:	cmp	r3, #8
   12224:	bne	11f3c <__assert_fail@plt+0xd4c>
   12228:	mov	r0, r9
   1222c:	bl	11870 <__assert_fail@plt+0x680>
   12230:	ldr	r3, [r4, #-4]
   12234:	mov	r2, #12
   12238:	str	r3, [sp]
   1223c:	mov	r1, #1
   12240:	ldr	r3, [pc, #272]	; 12358 <__assert_fail@plt+0x1168>
   12244:	mov	r9, r0
   12248:	mov	r0, r8
   1224c:	bl	110f4 <__sprintf_chk@plt>
   12250:	ldr	fp, [r5, #88]	; 0x58
   12254:	cmp	fp, #0
   12258:	bne	12298 <__assert_fail@plt+0x10a8>
   1225c:	mov	r2, #5
   12260:	ldr	r1, [pc, #248]	; 12360 <__assert_fail@plt+0x1170>
   12264:	mov	r0, fp
   12268:	bl	10f98 <dcgettext@plt>
   1226c:	bl	110d0 <strlen@plt>
   12270:	mov	r2, #5
   12274:	ldr	r1, [pc, #232]	; 12364 <__assert_fail@plt+0x1174>
   12278:	mov	sl, r0
   1227c:	mov	r0, fp
   12280:	bl	10f98 <dcgettext@plt>
   12284:	bl	110d0 <strlen@plt>
   12288:	add	r0, sl, r0
   1228c:	add	r0, r0, #14
   12290:	bl	1468c <__assert_fail@plt+0x349c>
   12294:	str	r0, [r5, #88]	; 0x58
   12298:	mov	r2, #5
   1229c:	ldr	r1, [pc, #188]	; 12360 <__assert_fail@plt+0x1170>
   122a0:	mov	r0, #0
   122a4:	ldr	sl, [r5, #88]	; 0x58
   122a8:	bl	10f98 <dcgettext@plt>
   122ac:	ldrsh	r3, [r7, #-52]	; 0xffffffcc
   122b0:	mov	r2, #5
   122b4:	ldr	r1, [pc, #168]	; 12364 <__assert_fail@plt+0x1174>
   122b8:	str	r3, [sp, #36]	; 0x24
   122bc:	mov	fp, r0
   122c0:	mov	r0, #0
   122c4:	bl	10f98 <dcgettext@plt>
   122c8:	ldrsh	r2, [r7, #-50]	; 0xffffffce
   122cc:	ldr	r3, [sp, #36]	; 0x24
   122d0:	mov	r1, #1
   122d4:	str	r2, [sp, #12]
   122d8:	str	r3, [sp, #4]
   122dc:	mvn	r2, #0
   122e0:	ldr	r3, [pc, #128]	; 12368 <__assert_fail@plt+0x1178>
   122e4:	str	fp, [sp]
   122e8:	str	r0, [sp, #8]
   122ec:	mov	r0, sl
   122f0:	bl	110f4 <__sprintf_chk@plt>
   122f4:	ldr	r0, [r7, #-44]	; 0xffffffd4
   122f8:	bl	118d0 <__assert_fail@plt+0x6e0>
   122fc:	ldr	r3, [r5, #88]	; 0x58
   12300:	str	r3, [sp, #20]
   12304:	b	12170 <__assert_fail@plt+0xf80>
   12308:	muleq	r1, r7, pc	; <UNPREDICTABLE>
   1230c:	andeq	r7, r2, ip, lsl #3
   12310:	andeq	r5, r1, sp, lsr #28
   12314:	strdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   12318:	andeq	r5, r1, r5, lsr #15
   1231c:	andeq	r5, r1, r4, lsl #16
   12320:	andeq	r5, r1, r2, lsl r8
   12324:	andeq	r5, r1, r7, lsl r8
   12328:	andeq	r5, r1, ip, lsl r8
   1232c:	andeq	r5, r1, r1, lsr #16
   12330:	andeq	r5, r1, r6, lsr #16
   12334:	andeq	r5, r1, sl, lsr #16
   12338:	andeq	r5, r1, r2, lsr r8
   1233c:	andeq	r5, r1, fp, lsr #15
   12340:	andeq	r5, r1, r7, lsr r8
   12344:	andeq	r5, r1, r1, asr #16
   12348:	andeq	r5, r1, r7, asr #16
   1234c:	andeq	r5, r1, sp, asr #16
   12350:	andeq	r5, r1, r2, asr r8
   12354:	andeq	r5, r1, lr, asr r8
   12358:	andeq	r5, r1, r7, lsr #15
   1235c:	andeq	r5, r1, fp, ror #16
   12360:	andeq	r5, r1, r1, ror r8
   12364:	andeq	r5, r1, r7, ror r8
   12368:	andeq	r5, r1, sp, ror r8
   1236c:	subs	r4, r0, #0
   12370:	push	{r7, lr}
   12374:	sub	sp, sp, #56	; 0x38
   12378:	ldr	r5, [pc, #608]	; 125e0 <__assert_fail@plt+0x13f0>
   1237c:	beq	123b4 <__assert_fail@plt+0x11c4>
   12380:	ldr	r3, [pc, #604]	; 125e4 <__assert_fail@plt+0x13f4>
   12384:	mov	r2, #5
   12388:	ldr	r1, [pc, #600]	; 125e8 <__assert_fail@plt+0x13f8>
   1238c:	mov	r0, #0
   12390:	ldr	r6, [r3]
   12394:	bl	10f98 <dcgettext@plt>
   12398:	ldr	r3, [r5]
   1239c:	mov	r1, #1
   123a0:	mov	r2, r0
   123a4:	mov	r0, r6
   123a8:	bl	1113c <__fprintf_chk@plt>
   123ac:	mov	r0, r4
   123b0:	bl	110b8 <exit@plt>
   123b4:	mov	r2, #5
   123b8:	ldr	r1, [pc, #556]	; 125ec <__assert_fail@plt+0x13fc>
   123bc:	bl	10f98 <dcgettext@plt>
   123c0:	ldr	r2, [r5]
   123c4:	ldr	r5, [pc, #548]	; 125f0 <__assert_fail@plt+0x1400>
   123c8:	ldr	r8, [pc, #548]	; 125f4 <__assert_fail@plt+0x1404>
   123cc:	mov	r6, r4
   123d0:	mov	r1, r0
   123d4:	mov	r0, #1
   123d8:	bl	11124 <__printf_chk@plt>
   123dc:	mov	r2, #5
   123e0:	ldr	r1, [pc, #528]	; 125f8 <__assert_fail@plt+0x1408>
   123e4:	mov	r0, r4
   123e8:	bl	10f98 <dcgettext@plt>
   123ec:	ldr	r1, [r5]
   123f0:	bl	10ef0 <fputs_unlocked@plt>
   123f4:	mov	r2, #5
   123f8:	ldr	r1, [pc, #508]	; 125fc <__assert_fail@plt+0x140c>
   123fc:	mov	r0, r4
   12400:	bl	10f98 <dcgettext@plt>
   12404:	ldr	r1, [r5]
   12408:	bl	10ef0 <fputs_unlocked@plt>
   1240c:	mov	r2, #5
   12410:	ldr	r1, [pc, #488]	; 12600 <__assert_fail@plt+0x1410>
   12414:	mov	r0, r4
   12418:	bl	10f98 <dcgettext@plt>
   1241c:	ldr	r1, [r5]
   12420:	bl	10ef0 <fputs_unlocked@plt>
   12424:	mov	r2, #5
   12428:	ldr	r1, [pc, #468]	; 12604 <__assert_fail@plt+0x1414>
   1242c:	mov	r0, r4
   12430:	bl	10f98 <dcgettext@plt>
   12434:	ldr	r1, [r5]
   12438:	bl	10ef0 <fputs_unlocked@plt>
   1243c:	mov	r2, #5
   12440:	ldr	r1, [pc, #448]	; 12608 <__assert_fail@plt+0x1418>
   12444:	mov	r0, r4
   12448:	bl	10f98 <dcgettext@plt>
   1244c:	ldr	r1, [r5]
   12450:	bl	10ef0 <fputs_unlocked@plt>
   12454:	mov	r2, #5
   12458:	ldr	r1, [pc, #428]	; 1260c <__assert_fail@plt+0x141c>
   1245c:	mov	r0, r4
   12460:	bl	10f98 <dcgettext@plt>
   12464:	ldr	r1, [r5]
   12468:	bl	10ef0 <fputs_unlocked@plt>
   1246c:	mov	r2, #5
   12470:	ldr	r1, [pc, #408]	; 12610 <__assert_fail@plt+0x1420>
   12474:	mov	r0, r4
   12478:	bl	10f98 <dcgettext@plt>
   1247c:	ldr	r1, [r5]
   12480:	bl	10ef0 <fputs_unlocked@plt>
   12484:	mov	r2, #5
   12488:	ldr	r1, [pc, #388]	; 12614 <__assert_fail@plt+0x1424>
   1248c:	mov	r0, r4
   12490:	bl	10f98 <dcgettext@plt>
   12494:	ldr	r1, [r5]
   12498:	bl	10ef0 <fputs_unlocked@plt>
   1249c:	mov	r2, #5
   124a0:	ldr	r1, [pc, #368]	; 12618 <__assert_fail@plt+0x1428>
   124a4:	mov	r0, r4
   124a8:	bl	10f98 <dcgettext@plt>
   124ac:	ldr	r3, [pc, #360]	; 1261c <__assert_fail@plt+0x142c>
   124b0:	ldr	r2, [pc, #360]	; 12620 <__assert_fail@plt+0x1430>
   124b4:	mov	r1, r0
   124b8:	mov	r0, #1
   124bc:	bl	11124 <__printf_chk@plt>
   124c0:	ldr	lr, [pc, #348]	; 12624 <__assert_fail@plt+0x1434>
   124c4:	mov	ip, sp
   124c8:	ldm	lr!, {r0, r1, r2, r3}
   124cc:	stmia	ip!, {r0, r1, r2, r3}
   124d0:	ldm	lr!, {r0, r1, r2, r3}
   124d4:	stmia	ip!, {r0, r1, r2, r3}
   124d8:	ldm	lr!, {r0, r1, r2, r3}
   124dc:	stmia	ip!, {r0, r1, r2, r3}
   124e0:	ldm	lr, {r0, r1}
   124e4:	stm	ip, {r0, r1}
   124e8:	ldr	r1, [sp, r6]
   124ec:	add	r7, sp, r6
   124f0:	cmp	r1, #0
   124f4:	bne	12598 <__assert_fail@plt+0x13a8>
   124f8:	ldr	r6, [r7, #4]
   124fc:	ldr	r7, [pc, #240]	; 125f4 <__assert_fail@plt+0x1404>
   12500:	cmp	r6, #0
   12504:	mov	r2, #5
   12508:	ldr	r1, [pc, #280]	; 12628 <__assert_fail@plt+0x1438>
   1250c:	mov	r0, #0
   12510:	moveq	r6, r7
   12514:	bl	10f98 <dcgettext@plt>
   12518:	ldr	r3, [pc, #268]	; 1262c <__assert_fail@plt+0x143c>
   1251c:	ldr	r2, [pc, #268]	; 12630 <__assert_fail@plt+0x1440>
   12520:	mov	r1, r0
   12524:	mov	r0, #1
   12528:	bl	11124 <__printf_chk@plt>
   1252c:	mov	r1, #0
   12530:	mov	r0, #5
   12534:	bl	1116c <setlocale@plt>
   12538:	cmp	r0, #0
   1253c:	bne	125b0 <__assert_fail@plt+0x13c0>
   12540:	mov	r2, #5
   12544:	ldr	r1, [pc, #232]	; 12634 <__assert_fail@plt+0x1444>
   12548:	mov	r0, #0
   1254c:	bl	10f98 <dcgettext@plt>
   12550:	ldr	r3, [pc, #156]	; 125f4 <__assert_fail@plt+0x1404>
   12554:	ldr	r2, [pc, #208]	; 1262c <__assert_fail@plt+0x143c>
   12558:	mov	r1, r0
   1255c:	mov	r0, #1
   12560:	bl	11124 <__printf_chk@plt>
   12564:	mov	r2, #5
   12568:	ldr	r1, [pc, #200]	; 12638 <__assert_fail@plt+0x1448>
   1256c:	mov	r0, #0
   12570:	bl	10f98 <dcgettext@plt>
   12574:	ldr	r2, [pc, #192]	; 1263c <__assert_fail@plt+0x144c>
   12578:	cmp	r6, r7
   1257c:	ldr	r3, [pc, #188]	; 12640 <__assert_fail@plt+0x1450>
   12580:	moveq	r3, r2
   12584:	mov	r2, r6
   12588:	mov	r1, r0
   1258c:	mov	r0, #1
   12590:	bl	11124 <__printf_chk@plt>
   12594:	b	123ac <__assert_fail@plt+0x11bc>
   12598:	mov	r0, r8
   1259c:	bl	10f08 <strcmp@plt>
   125a0:	add	r6, r6, #8
   125a4:	cmp	r0, #0
   125a8:	bne	124e8 <__assert_fail@plt+0x12f8>
   125ac:	b	124f8 <__assert_fail@plt+0x1308>
   125b0:	mov	r2, #3
   125b4:	ldr	r1, [pc, #136]	; 12644 <__assert_fail@plt+0x1454>
   125b8:	bl	111cc <strncmp@plt>
   125bc:	cmp	r0, #0
   125c0:	beq	12540 <__assert_fail@plt+0x1350>
   125c4:	mov	r2, #5
   125c8:	ldr	r1, [pc, #120]	; 12648 <__assert_fail@plt+0x1458>
   125cc:	mov	r0, #0
   125d0:	bl	10f98 <dcgettext@plt>
   125d4:	ldr	r1, [r5]
   125d8:	bl	10ef0 <fputs_unlocked@plt>
   125dc:	b	12540 <__assert_fail@plt+0x1350>
   125e0:	andeq	r7, r2, r4, lsl r2
   125e4:	andeq	r7, r2, r0, lsl #3
   125e8:	andeq	r5, r1, fp, lsl #17
   125ec:			; <UNDEFINED> instruction: 0x000158b2
   125f0:	andeq	r7, r2, r4, lsl #3
   125f4:	andeq	r5, r1, r7, lsl #17
   125f8:	ldrdeq	r5, [r1], -lr
   125fc:	andeq	r5, r1, sl, lsl r9
   12600:	ldrdeq	r5, [r1], -sp
   12604:	andeq	r5, r1, pc, lsl #20
   12608:	andeq	r5, r1, sl, asr #21
   1260c:	andeq	r5, r1, r9, lsr #23
   12610:	andeq	r5, r1, ip, asr #24
   12614:	andeq	r5, r1, r9, ror ip
   12618:	andeq	r5, r1, pc, lsr #25
   1261c:	andeq	r5, r1, ip, lsr #26
   12620:	andeq	r5, r1, sl, lsr sp
   12624:	andeq	r5, r1, ip, lsl #12
   12628:	andeq	r5, r1, r8, asr #26
   1262c:	andeq	r5, r1, pc, asr sp
   12630:	andeq	r5, r1, r7, lsl #27
   12634:	andeq	r5, r1, r0, ror #27
   12638:	strdeq	r5, [r1], -fp
   1263c:	andeq	r5, r1, ip, asr #29
   12640:	andeq	r5, r1, sp, lsr #28
   12644:	muleq	r1, r5, sp
   12648:	muleq	r1, r9, sp
   1264c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12650:	add	r3, sp, #8
   12654:	ldr	r2, [pc, #124]	; 126d8 <__assert_fail@plt+0x14e8>
   12658:	mov	r4, #0
   1265c:	mov	r5, r1
   12660:	mov	r1, #2
   12664:	str	r1, [r2]
   12668:	str	r4, [r3, #-4]!
   1266c:	mov	r1, r4
   12670:	mov	r7, r0
   12674:	bl	1119c <getaddrinfo@plt>
   12678:	cmp	r0, #0
   1267c:	bne	126c8 <__assert_fail@plt+0x14d8>
   12680:	ldr	r6, [sp, #4]
   12684:	ldr	r0, [r6, #24]
   12688:	cmp	r0, r4
   1268c:	moveq	r0, r7
   12690:	bl	10fa4 <strdup@plt>
   12694:	cmp	r5, #0
   12698:	clz	r3, r0
   1269c:	lsr	r3, r3, #5
   126a0:	moveq	r3, #0
   126a4:	cmp	r3, #0
   126a8:	mvnne	r3, #9
   126ac:	mov	r4, r0
   126b0:	strne	r3, [r5]
   126b4:	mov	r0, r6
   126b8:	bl	11190 <freeaddrinfo@plt>
   126bc:	mov	r0, r4
   126c0:	add	sp, sp, #12
   126c4:	pop	{r4, r5, r6, r7, pc}
   126c8:	cmp	r5, #0
   126cc:	strne	r0, [r5]
   126d0:	moveq	r4, r5
   126d4:	b	126bc <__assert_fail@plt+0x14cc>
   126d8:	andeq	r7, r2, r8, ror #3
   126dc:	ldr	r1, [pc]	; 126e4 <__assert_fail@plt+0x14f4>
   126e0:	b	1264c <__assert_fail@plt+0x145c>
   126e4:	andeq	r7, r2, r8, lsl #4
   126e8:	ldr	r3, [pc, #4]	; 126f4 <__assert_fail@plt+0x1504>
   126ec:	ldr	r0, [r3, #32]
   126f0:	b	10f38 <gai_strerror@plt>
   126f4:	andeq	r7, r2, r8, ror #3
   126f8:	ldr	r3, [pc, #4]	; 12704 <__assert_fail@plt+0x1514>
   126fc:	str	r0, [r3]
   12700:	bx	lr
   12704:	andeq	r7, r2, ip, lsl #4
   12708:	ldr	r3, [pc, #4]	; 12714 <__assert_fail@plt+0x1524>
   1270c:	strb	r0, [r3, #4]
   12710:	bx	lr
   12714:	andeq	r7, r2, ip, lsl #4
   12718:	ldr	r3, [pc, #192]	; 127e0 <__assert_fail@plt+0x15f0>
   1271c:	push	{r0, r1, r4, r5, r6, lr}
   12720:	ldr	r0, [r3]
   12724:	bl	14c44 <__assert_fail@plt+0x3a54>
   12728:	cmp	r0, #0
   1272c:	beq	127c4 <__assert_fail@plt+0x15d4>
   12730:	ldr	r3, [pc, #172]	; 127e4 <__assert_fail@plt+0x15f4>
   12734:	mov	r4, r3
   12738:	ldrb	r2, [r3, #4]
   1273c:	cmp	r2, #0
   12740:	beq	12754 <__assert_fail@plt+0x1564>
   12744:	bl	110e8 <__errno_location@plt>
   12748:	ldr	r3, [r0]
   1274c:	cmp	r3, #32
   12750:	beq	127c4 <__assert_fail@plt+0x15d4>
   12754:	mov	r2, #5
   12758:	ldr	r1, [pc, #136]	; 127e8 <__assert_fail@plt+0x15f8>
   1275c:	mov	r0, #0
   12760:	bl	10f98 <dcgettext@plt>
   12764:	ldr	r4, [r4]
   12768:	cmp	r4, #0
   1276c:	mov	r5, r0
   12770:	beq	127a8 <__assert_fail@plt+0x15b8>
   12774:	bl	110e8 <__errno_location@plt>
   12778:	ldr	r6, [r0]
   1277c:	mov	r0, r4
   12780:	bl	13e5c <__assert_fail@plt+0x2c6c>
   12784:	str	r5, [sp]
   12788:	ldr	r2, [pc, #92]	; 127ec <__assert_fail@plt+0x15fc>
   1278c:	mov	r1, r6
   12790:	mov	r3, r0
   12794:	mov	r0, #0
   12798:	bl	11028 <error@plt>
   1279c:	ldr	r3, [pc, #76]	; 127f0 <__assert_fail@plt+0x1600>
   127a0:	ldr	r0, [r3]
   127a4:	bl	10f44 <_exit@plt>
   127a8:	bl	110e8 <__errno_location@plt>
   127ac:	mov	r3, r5
   127b0:	ldr	r2, [pc, #60]	; 127f4 <__assert_fail@plt+0x1604>
   127b4:	ldr	r1, [r0]
   127b8:	mov	r0, r4
   127bc:	bl	11028 <error@plt>
   127c0:	b	1279c <__assert_fail@plt+0x15ac>
   127c4:	ldr	r3, [pc, #44]	; 127f8 <__assert_fail@plt+0x1608>
   127c8:	ldr	r0, [r3]
   127cc:	bl	14c44 <__assert_fail@plt+0x3a54>
   127d0:	cmp	r0, #0
   127d4:	bne	1279c <__assert_fail@plt+0x15ac>
   127d8:	add	sp, sp, #8
   127dc:	pop	{r4, r5, r6, pc}
   127e0:	andeq	r7, r2, r4, lsl #3
   127e4:	andeq	r7, r2, ip, lsl #4
   127e8:	andeq	r5, r1, r7, lsl #31
   127ec:	muleq	r1, r3, pc	; <UNPREDICTABLE>
   127f0:	andeq	r7, r2, ip, lsr #2
   127f4:	muleq	r1, r7, pc	; <UNPREDICTABLE>
   127f8:	andeq	r7, r2, r0, lsl #3
   127fc:	push	{r0, r1, r2, r4, r5, lr}
   12800:	mov	r5, r0
   12804:	bl	110e8 <__errno_location@plt>
   12808:	ldr	r3, [r0]
   1280c:	mov	r4, r0
   12810:	str	r3, [sp]
   12814:	str	r3, [sp, #4]
   12818:	mov	r3, #0
   1281c:	str	r3, [r0]
   12820:	mov	r0, r5
   12824:	bl	10f2c <free@plt>
   12828:	ldr	r3, [r4]
   1282c:	add	r2, sp, #8
   12830:	cmp	r3, #0
   12834:	moveq	r3, #4
   12838:	movne	r3, #0
   1283c:	add	r3, r2, r3
   12840:	ldr	r3, [r3, #-8]
   12844:	str	r3, [r4]
   12848:	add	sp, sp, #12
   1284c:	pop	{r4, r5, pc}
   12850:	push	{lr}		; (str lr, [sp, #-4]!)
   12854:	sub	sp, sp, #268	; 0x10c
   12858:	ldr	r2, [pc, #64]	; 128a0 <__assert_fail@plt+0x16b0>
   1285c:	add	r1, sp, #4
   12860:	bl	140fc <__assert_fail@plt+0x2f0c>
   12864:	cmp	r0, #0
   12868:	movne	r0, #0
   1286c:	bne	12898 <__assert_fail@plt+0x16a8>
   12870:	ldr	r1, [pc, #44]	; 128a4 <__assert_fail@plt+0x16b4>
   12874:	add	r0, sp, #4
   12878:	bl	10f08 <strcmp@plt>
   1287c:	cmp	r0, #0
   12880:	beq	12898 <__assert_fail@plt+0x16a8>
   12884:	ldr	r1, [pc, #28]	; 128a8 <__assert_fail@plt+0x16b8>
   12888:	add	r0, sp, #4
   1288c:	bl	10f08 <strcmp@plt>
   12890:	adds	r0, r0, #0
   12894:	movne	r0, #1
   12898:	add	sp, sp, #268	; 0x10c
   1289c:	pop	{pc}		; (ldr pc, [sp], #4)
   128a0:	andeq	r0, r0, r1, lsl #2
   128a4:	muleq	r1, sl, pc	; <UNPREDICTABLE>
   128a8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   128ac:	mov	r3, #0
   128b0:	cmp	r0, #0
   128b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   128b8:	mov	r4, r0
   128bc:	strb	r3, [r2, #20]
   128c0:	sbcs	r3, r1, #0
   128c4:	mov	r5, r1
   128c8:	add	r6, r2, #20
   128cc:	mov	r8, #10
   128d0:	mov	r9, #0
   128d4:	bge	12938 <__assert_fail@plt+0x1748>
   128d8:	mov	r0, r4
   128dc:	mov	r1, r5
   128e0:	mov	r2, r8
   128e4:	mov	r3, r9
   128e8:	bl	1535c <__assert_fail@plt+0x416c>
   128ec:	mov	r3, r9
   128f0:	mov	r0, r4
   128f4:	mov	r1, r5
   128f8:	sub	r7, r6, #1
   128fc:	rsb	r2, r2, #48	; 0x30
   12900:	strb	r2, [r6, #-1]
   12904:	mov	r2, r8
   12908:	bl	1535c <__assert_fail@plt+0x416c>
   1290c:	mov	r4, r0
   12910:	mov	r5, r1
   12914:	orrs	r3, r4, r5
   12918:	bne	12930 <__assert_fail@plt+0x1740>
   1291c:	sub	r6, r6, #2
   12920:	mov	r3, #45	; 0x2d
   12924:	strb	r3, [r7, #-1]
   12928:	mov	r0, r6
   1292c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12930:	mov	r6, r7
   12934:	b	128d8 <__assert_fail@plt+0x16e8>
   12938:	mov	r0, r4
   1293c:	mov	r1, r5
   12940:	mov	r2, r8
   12944:	mov	r3, r9
   12948:	bl	1535c <__assert_fail@plt+0x416c>
   1294c:	mov	r3, r9
   12950:	mov	r0, r4
   12954:	mov	r1, r5
   12958:	add	r2, r2, #48	; 0x30
   1295c:	strb	r2, [r6, #-1]!
   12960:	mov	r2, r8
   12964:	bl	1535c <__assert_fail@plt+0x416c>
   12968:	mov	r4, r0
   1296c:	mov	r5, r1
   12970:	orrs	r3, r4, r5
   12974:	bne	12938 <__assert_fail@plt+0x1748>
   12978:	b	12928 <__assert_fail@plt+0x1738>
   1297c:	push	{r4, r5, r6, lr}
   12980:	subs	r5, r0, #0
   12984:	bne	1299c <__assert_fail@plt+0x17ac>
   12988:	ldr	r3, [pc, #124]	; 12a0c <__assert_fail@plt+0x181c>
   1298c:	ldr	r0, [pc, #124]	; 12a10 <__assert_fail@plt+0x1820>
   12990:	ldr	r1, [r3]
   12994:	bl	111c0 <fputs@plt>
   12998:	bl	111d8 <abort@plt>
   1299c:	mov	r1, #47	; 0x2f
   129a0:	bl	11178 <strrchr@plt>
   129a4:	cmp	r0, #0
   129a8:	addne	r4, r0, #1
   129ac:	moveq	r4, r5
   129b0:	sub	r3, r4, r5
   129b4:	cmp	r3, #6
   129b8:	ble	129f8 <__assert_fail@plt+0x1808>
   129bc:	mov	r2, #7
   129c0:	ldr	r1, [pc, #76]	; 12a14 <__assert_fail@plt+0x1824>
   129c4:	sub	r0, r4, #7
   129c8:	bl	111cc <strncmp@plt>
   129cc:	cmp	r0, #0
   129d0:	bne	129f8 <__assert_fail@plt+0x1808>
   129d4:	mov	r2, #3
   129d8:	ldr	r1, [pc, #56]	; 12a18 <__assert_fail@plt+0x1828>
   129dc:	mov	r0, r4
   129e0:	bl	111cc <strncmp@plt>
   129e4:	cmp	r0, #0
   129e8:	movne	r5, r4
   129ec:	ldreq	r3, [pc, #40]	; 12a1c <__assert_fail@plt+0x182c>
   129f0:	addeq	r5, r4, #3
   129f4:	streq	r5, [r3]
   129f8:	ldr	r3, [pc, #32]	; 12a20 <__assert_fail@plt+0x1830>
   129fc:	str	r5, [r3]
   12a00:	ldr	r3, [pc, #28]	; 12a24 <__assert_fail@plt+0x1834>
   12a04:	str	r5, [r3]
   12a08:	pop	{r4, r5, r6, pc}
   12a0c:	andeq	r7, r2, r0, lsl #3
   12a10:	andeq	r5, r1, r2, lsr #31
   12a14:	ldrdeq	r5, [r1], -sl
   12a18:	andeq	r5, r1, r2, ror #31
   12a1c:	andeq	r7, r2, r0, ror r1
   12a20:	andeq	r7, r2, r4, lsl r2
   12a24:	andeq	r7, r2, r4, ror r1
   12a28:	push	{r4, r5, r6, lr}
   12a2c:	mov	r2, #48	; 0x30
   12a30:	mov	r5, r1
   12a34:	mov	r1, #0
   12a38:	mov	r4, r0
   12a3c:	bl	1110c <memset@plt>
   12a40:	cmp	r5, #10
   12a44:	bne	12a4c <__assert_fail@plt+0x185c>
   12a48:	bl	111d8 <abort@plt>
   12a4c:	str	r5, [r4]
   12a50:	mov	r0, r4
   12a54:	pop	{r4, r5, r6, pc}
   12a58:	push	{r4, r5, r6, lr}
   12a5c:	mov	r4, r0
   12a60:	mov	r5, r1
   12a64:	bl	14e40 <__assert_fail@plt+0x3c50>
   12a68:	ldrb	r3, [r0]
   12a6c:	bic	r3, r3, #32
   12a70:	cmp	r3, #85	; 0x55
   12a74:	bne	12ae4 <__assert_fail@plt+0x18f4>
   12a78:	ldrb	r3, [r0, #1]
   12a7c:	bic	r3, r3, #32
   12a80:	cmp	r3, #84	; 0x54
   12a84:	bne	12abc <__assert_fail@plt+0x18cc>
   12a88:	ldrb	r3, [r0, #2]
   12a8c:	bic	r3, r3, #32
   12a90:	cmp	r3, #70	; 0x46
   12a94:	bne	12abc <__assert_fail@plt+0x18cc>
   12a98:	ldrb	r3, [r0, #3]
   12a9c:	cmp	r3, #45	; 0x2d
   12aa0:	bne	12abc <__assert_fail@plt+0x18cc>
   12aa4:	ldrb	r3, [r0, #4]
   12aa8:	cmp	r3, #56	; 0x38
   12aac:	bne	12abc <__assert_fail@plt+0x18cc>
   12ab0:	ldrb	r3, [r0, #5]
   12ab4:	cmp	r3, #0
   12ab8:	beq	12ad0 <__assert_fail@plt+0x18e0>
   12abc:	ldr	r1, [pc, #144]	; 12b54 <__assert_fail@plt+0x1964>
   12ac0:	ldr	r0, [pc, #144]	; 12b58 <__assert_fail@plt+0x1968>
   12ac4:	cmp	r5, #9
   12ac8:	movne	r0, r1
   12acc:	pop	{r4, r5, r6, pc}
   12ad0:	ldrb	r3, [r4]
   12ad4:	ldr	r1, [pc, #128]	; 12b5c <__assert_fail@plt+0x196c>
   12ad8:	ldr	r0, [pc, #128]	; 12b60 <__assert_fail@plt+0x1970>
   12adc:	cmp	r3, #96	; 0x60
   12ae0:	b	12ac8 <__assert_fail@plt+0x18d8>
   12ae4:	cmp	r3, #71	; 0x47
   12ae8:	bne	12abc <__assert_fail@plt+0x18cc>
   12aec:	ldrb	r3, [r0, #1]
   12af0:	bic	r3, r3, #32
   12af4:	cmp	r3, #66	; 0x42
   12af8:	bne	12abc <__assert_fail@plt+0x18cc>
   12afc:	ldrb	r3, [r0, #2]
   12b00:	cmp	r3, #49	; 0x31
   12b04:	bne	12abc <__assert_fail@plt+0x18cc>
   12b08:	ldrb	r3, [r0, #3]
   12b0c:	cmp	r3, #56	; 0x38
   12b10:	bne	12abc <__assert_fail@plt+0x18cc>
   12b14:	ldrb	r3, [r0, #4]
   12b18:	cmp	r3, #48	; 0x30
   12b1c:	bne	12abc <__assert_fail@plt+0x18cc>
   12b20:	ldrb	r3, [r0, #5]
   12b24:	cmp	r3, #51	; 0x33
   12b28:	bne	12abc <__assert_fail@plt+0x18cc>
   12b2c:	ldrb	r3, [r0, #6]
   12b30:	cmp	r3, #48	; 0x30
   12b34:	bne	12abc <__assert_fail@plt+0x18cc>
   12b38:	ldrb	r3, [r0, #7]
   12b3c:	cmp	r3, #0
   12b40:	bne	12abc <__assert_fail@plt+0x18cc>
   12b44:	ldrb	r3, [r4]
   12b48:	ldr	r1, [pc, #20]	; 12b64 <__assert_fail@plt+0x1974>
   12b4c:	ldr	r0, [pc, #20]	; 12b68 <__assert_fail@plt+0x1978>
   12b50:	b	12adc <__assert_fail@plt+0x18ec>
   12b54:	andeq	r6, r1, sp, asr #32
   12b58:	andeq	r6, r1, fp, asr #32
   12b5c:	andeq	r6, r1, r0, asr #32
   12b60:	andeq	r6, r1, ip, lsr r0
   12b64:	andeq	r6, r1, r8, asr #32
   12b68:	andeq	r6, r1, r4, asr #32
   12b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b70:	sub	sp, sp, #108	; 0x6c
   12b74:	mov	r8, r0
   12b78:	str	r3, [sp, #36]	; 0x24
   12b7c:	mov	r5, r1
   12b80:	str	r2, [sp, #44]	; 0x2c
   12b84:	ldr	sl, [sp, #144]	; 0x90
   12b88:	bl	10fec <__ctype_get_mb_cur_max@plt>
   12b8c:	ldr	r3, [sp, #148]	; 0x94
   12b90:	mov	r7, #0
   12b94:	str	r7, [sp, #48]	; 0x30
   12b98:	lsr	r6, r3, #1
   12b9c:	and	r6, r6, #1
   12ba0:	mov	r3, #1
   12ba4:	str	r3, [sp, #72]	; 0x48
   12ba8:	str	r7, [sp, #24]
   12bac:	str	r7, [sp, #32]
   12bb0:	str	r7, [sp, #40]	; 0x28
   12bb4:	str	r7, [sp, #60]	; 0x3c
   12bb8:	str	r0, [sp, #76]	; 0x4c
   12bbc:	cmp	sl, #10
   12bc0:	ldrls	pc, [pc, sl, lsl #2]
   12bc4:	b	12e00 <__assert_fail@plt+0x1c10>
   12bc8:	strdeq	r2, [r1], -r4
   12bcc:	andeq	r3, r1, r8, lsl #17
   12bd0:	andeq	r2, r1, ip, asr #27
   12bd4:	andeq	r2, r1, r8, lsl lr
   12bd8:	andeq	r2, r1, r8, lsr #27
   12bdc:	andeq	r2, r1, r0, lsl #24
   12be0:	andeq	r3, r1, r8, ror #16
   12be4:	andeq	r2, r1, r4, lsl #28
   12be8:	strdeq	r2, [r1], -r8
   12bec:	strdeq	r2, [r1], -r8
   12bf0:	strdeq	r2, [r1], -r8
   12bf4:	mov	r6, #0
   12bf8:	mov	r4, #0
   12bfc:	b	12c2c <__assert_fail@plt+0x1a3c>
   12c00:	cmp	r6, #0
   12c04:	bne	12e28 <__assert_fail@plt+0x1c38>
   12c08:	cmp	r5, #0
   12c0c:	movne	r3, #34	; 0x22
   12c10:	strbne	r3, [r8]
   12c14:	mov	r3, #1
   12c18:	str	r3, [sp, #24]
   12c1c:	str	r3, [sp, #32]
   12c20:	mov	r4, #1
   12c24:	ldr	r3, [pc, #3172]	; 13890 <__assert_fail@plt+0x26a0>
   12c28:	str	r3, [sp, #40]	; 0x28
   12c2c:	mov	r9, r5
   12c30:	mov	r3, #0
   12c34:	str	r7, [sp, #68]	; 0x44
   12c38:	str	r3, [sp, #28]
   12c3c:	ldr	r3, [sp, #36]	; 0x24
   12c40:	cmn	r3, #1
   12c44:	bne	137d4 <__assert_fail@plt+0x25e4>
   12c48:	ldr	r3, [sp, #44]	; 0x2c
   12c4c:	ldr	r2, [sp, #28]
   12c50:	ldrb	r3, [r3, r2]
   12c54:	adds	r3, r3, #0
   12c58:	movne	r3, #1
   12c5c:	str	r3, [sp, #52]	; 0x34
   12c60:	ldr	r3, [sp, #52]	; 0x34
   12c64:	cmp	r3, #0
   12c68:	bne	12e50 <__assert_fail@plt+0x1c60>
   12c6c:	sub	r2, sl, #2
   12c70:	clz	r2, r2
   12c74:	lsr	r2, r2, #5
   12c78:	and	r3, r6, r2
   12c7c:	cmp	r4, #0
   12c80:	movne	r3, #0
   12c84:	andeq	r3, r3, #1
   12c88:	cmp	r3, #0
   12c8c:	bne	13018 <__assert_fail@plt+0x1e28>
   12c90:	eor	r3, r6, #1
   12c94:	ands	r2, r2, r3
   12c98:	beq	1380c <__assert_fail@plt+0x261c>
   12c9c:	ldr	r3, [sp, #68]	; 0x44
   12ca0:	cmp	r3, #0
   12ca4:	beq	13844 <__assert_fail@plt+0x2654>
   12ca8:	ldr	r3, [sp, #72]	; 0x48
   12cac:	cmp	r3, #0
   12cb0:	beq	137e8 <__assert_fail@plt+0x25f8>
   12cb4:	ldr	r3, [sp, #160]	; 0xa0
   12cb8:	ldr	r2, [sp, #44]	; 0x2c
   12cbc:	str	r3, [sp, #16]
   12cc0:	ldr	r3, [sp, #156]	; 0x9c
   12cc4:	ldr	r1, [sp, #60]	; 0x3c
   12cc8:	str	r3, [sp, #12]
   12ccc:	ldr	r3, [sp, #152]	; 0x98
   12cd0:	str	r3, [sp, #8]
   12cd4:	ldr	r3, [sp, #148]	; 0x94
   12cd8:	str	r3, [sp, #4]
   12cdc:	mov	r3, #5
   12ce0:	str	r3, [sp]
   12ce4:	ldr	r3, [sp, #36]	; 0x24
   12ce8:	mov	r0, r8
   12cec:	bl	12b6c <__assert_fail@plt+0x197c>
   12cf0:	mov	r4, r0
   12cf4:	b	13838 <__assert_fail@plt+0x2648>
   12cf8:	cmp	sl, #10
   12cfc:	beq	12d58 <__assert_fail@plt+0x1b68>
   12d00:	ldr	r4, [pc, #2956]	; 13894 <__assert_fail@plt+0x26a4>
   12d04:	mov	r2, #5
   12d08:	mov	r1, r4
   12d0c:	mov	r0, #0
   12d10:	bl	10f98 <dcgettext@plt>
   12d14:	cmp	r0, r4
   12d18:	str	r0, [sp, #156]	; 0x9c
   12d1c:	bne	12d2c <__assert_fail@plt+0x1b3c>
   12d20:	mov	r1, sl
   12d24:	bl	12a58 <__assert_fail@plt+0x1868>
   12d28:	str	r0, [sp, #156]	; 0x9c
   12d2c:	ldr	r4, [pc, #2916]	; 13898 <__assert_fail@plt+0x26a8>
   12d30:	mov	r2, #5
   12d34:	mov	r1, r4
   12d38:	mov	r0, #0
   12d3c:	bl	10f98 <dcgettext@plt>
   12d40:	cmp	r0, r4
   12d44:	str	r0, [sp, #160]	; 0xa0
   12d48:	bne	12d58 <__assert_fail@plt+0x1b68>
   12d4c:	mov	r1, sl
   12d50:	bl	12a58 <__assert_fail@plt+0x1868>
   12d54:	str	r0, [sp, #160]	; 0xa0
   12d58:	cmp	r6, #0
   12d5c:	moveq	r4, r6
   12d60:	beq	12d78 <__assert_fail@plt+0x1b88>
   12d64:	mov	r4, #0
   12d68:	b	12d88 <__assert_fail@plt+0x1b98>
   12d6c:	cmp	r5, r4
   12d70:	strbhi	r3, [r8, r4]
   12d74:	add	r4, r4, #1
   12d78:	ldr	r3, [sp, #156]	; 0x9c
   12d7c:	ldrb	r3, [r3, r4]
   12d80:	cmp	r3, #0
   12d84:	bne	12d6c <__assert_fail@plt+0x1b7c>
   12d88:	ldr	r0, [sp, #160]	; 0xa0
   12d8c:	bl	110d0 <strlen@plt>
   12d90:	ldr	r3, [sp, #160]	; 0xa0
   12d94:	str	r3, [sp, #40]	; 0x28
   12d98:	mov	r3, #1
   12d9c:	str	r3, [sp, #24]
   12da0:	str	r0, [sp, #32]
   12da4:	b	12c2c <__assert_fail@plt+0x1a3c>
   12da8:	mov	r3, #1
   12dac:	cmp	r6, #0
   12db0:	streq	r3, [sp, #24]
   12db4:	beq	12dd4 <__assert_fail@plt+0x1be4>
   12db8:	str	r3, [sp, #32]
   12dbc:	ldr	r3, [pc, #2772]	; 13898 <__assert_fail@plt+0x26a8>
   12dc0:	mov	r4, #0
   12dc4:	str	r3, [sp, #40]	; 0x28
   12dc8:	b	12df8 <__assert_fail@plt+0x1c08>
   12dcc:	cmp	r6, #0
   12dd0:	bne	12e40 <__assert_fail@plt+0x1c50>
   12dd4:	cmp	r5, #0
   12dd8:	movne	r3, #39	; 0x27
   12ddc:	strbne	r3, [r8]
   12de0:	mov	r3, #1
   12de4:	str	r3, [sp, #32]
   12de8:	mov	r6, #0
   12dec:	ldr	r3, [pc, #2724]	; 13898 <__assert_fail@plt+0x26a8>
   12df0:	mov	r4, #1
   12df4:	str	r3, [sp, #40]	; 0x28
   12df8:	mov	sl, #2
   12dfc:	b	12c2c <__assert_fail@plt+0x1a3c>
   12e00:	bl	111d8 <abort@plt>
   12e04:	mov	r6, #0
   12e08:	mov	r3, #1
   12e0c:	str	r3, [sp, #24]
   12e10:	mov	r4, r6
   12e14:	b	12c2c <__assert_fail@plt+0x1a3c>
   12e18:	mov	r6, #1
   12e1c:	str	r6, [sp, #24]
   12e20:	str	r6, [sp, #32]
   12e24:	b	12dbc <__assert_fail@plt+0x1bcc>
   12e28:	mov	r3, #1
   12e2c:	str	r3, [sp, #32]
   12e30:	ldr	r3, [pc, #2648]	; 13890 <__assert_fail@plt+0x26a0>
   12e34:	str	r6, [sp, #24]
   12e38:	str	r3, [sp, #40]	; 0x28
   12e3c:	b	12bf8 <__assert_fail@plt+0x1a08>
   12e40:	mov	r3, #1
   12e44:	str	r3, [sp, #32]
   12e48:	ldr	r3, [pc, #2632]	; 13898 <__assert_fail@plt+0x26a8>
   12e4c:	b	12e38 <__assert_fail@plt+0x1c48>
   12e50:	ldr	r3, [sp, #32]
   12e54:	ldr	fp, [sp, #24]
   12e58:	cmp	sl, #2
   12e5c:	moveq	fp, #0
   12e60:	andne	fp, fp, #1
   12e64:	adds	r5, r3, #0
   12e68:	movne	r5, #1
   12e6c:	ands	r3, r5, fp
   12e70:	str	r3, [sp, #64]	; 0x40
   12e74:	beq	12f44 <__assert_fail@plt+0x1d54>
   12e78:	ldr	r2, [sp, #32]
   12e7c:	ldr	r3, [sp, #28]
   12e80:	add	r7, r3, r2
   12e84:	mov	r3, r2
   12e88:	ldr	r2, [sp, #36]	; 0x24
   12e8c:	cmp	r3, #1
   12e90:	movls	r3, #0
   12e94:	movhi	r3, #1
   12e98:	cmn	r2, #1
   12e9c:	movne	r3, #0
   12ea0:	cmp	r3, #0
   12ea4:	beq	12eb4 <__assert_fail@plt+0x1cc4>
   12ea8:	ldr	r0, [sp, #44]	; 0x2c
   12eac:	bl	110d0 <strlen@plt>
   12eb0:	str	r0, [sp, #36]	; 0x24
   12eb4:	ldr	r3, [sp, #36]	; 0x24
   12eb8:	cmp	r3, r7
   12ebc:	bcc	12f3c <__assert_fail@plt+0x1d4c>
   12ec0:	ldr	r3, [sp, #44]	; 0x2c
   12ec4:	ldr	r0, [sp, #28]
   12ec8:	ldr	r2, [sp, #32]
   12ecc:	ldr	r1, [sp, #40]	; 0x28
   12ed0:	add	r0, r3, r0
   12ed4:	bl	10f74 <memcmp@plt>
   12ed8:	cmp	r0, #0
   12edc:	bne	12f3c <__assert_fail@plt+0x1d4c>
   12ee0:	cmp	r6, #0
   12ee4:	beq	12f44 <__assert_fail@plt+0x1d54>
   12ee8:	str	r6, [sp, #24]
   12eec:	ldr	r3, [sp, #24]
   12ef0:	ldr	r2, [sp, #44]	; 0x2c
   12ef4:	cmp	sl, #2
   12ef8:	movne	r3, #0
   12efc:	andeq	r3, r3, #1
   12f00:	cmp	r3, #0
   12f04:	ldr	r3, [sp, #160]	; 0xa0
   12f08:	movne	sl, #4
   12f0c:	str	r3, [sp, #16]
   12f10:	ldr	r3, [sp, #156]	; 0x9c
   12f14:	str	sl, [sp]
   12f18:	str	r3, [sp, #12]
   12f1c:	mov	r3, #0
   12f20:	str	r3, [sp, #8]
   12f24:	ldr	r3, [sp, #148]	; 0x94
   12f28:	mov	r1, r9
   12f2c:	bic	r3, r3, #2
   12f30:	str	r3, [sp, #4]
   12f34:	ldr	r3, [sp, #36]	; 0x24
   12f38:	b	12ce8 <__assert_fail@plt+0x1af8>
   12f3c:	mov	r3, #0
   12f40:	str	r3, [sp, #64]	; 0x40
   12f44:	ldr	r2, [sp, #28]
   12f48:	ldr	r3, [sp, #44]	; 0x2c
   12f4c:	add	r3, r3, r2
   12f50:	str	r3, [sp, #80]	; 0x50
   12f54:	ldr	r3, [sp, #44]	; 0x2c
   12f58:	ldrb	r7, [r3, r2]
   12f5c:	cmp	r7, #58	; 0x3a
   12f60:	bhi	130c8 <__assert_fail@plt+0x1ed8>
   12f64:	cmp	r7, #43	; 0x2b
   12f68:	bcs	1311c <__assert_fail@plt+0x1f2c>
   12f6c:	cmp	r7, #32
   12f70:	beq	13174 <__assert_fail@plt+0x1f84>
   12f74:	bhi	13020 <__assert_fail@plt+0x1e30>
   12f78:	cmp	r7, #9
   12f7c:	beq	13428 <__assert_fail@plt+0x2238>
   12f80:	bhi	12fe4 <__assert_fail@plt+0x1df4>
   12f84:	cmp	r7, #7
   12f88:	beq	134d4 <__assert_fail@plt+0x22e4>
   12f8c:	bhi	13190 <__assert_fail@plt+0x1fa0>
   12f90:	cmp	r7, #0
   12f94:	beq	131ac <__assert_fail@plt+0x1fbc>
   12f98:	ldr	r3, [sp, #76]	; 0x4c
   12f9c:	cmp	r3, #1
   12fa0:	bne	13518 <__assert_fail@plt+0x2328>
   12fa4:	bl	110ac <__ctype_b_loc@plt>
   12fa8:	sxth	r3, r7
   12fac:	lsl	r3, r3, #1
   12fb0:	ldr	r2, [r0]
   12fb4:	ldrh	r5, [r2, r3]
   12fb8:	ldr	r3, [sp, #76]	; 0x4c
   12fbc:	str	r3, [sp, #56]	; 0x38
   12fc0:	lsr	r5, r5, #14
   12fc4:	and	r5, r5, #1
   12fc8:	ldr	r3, [sp, #24]
   12fcc:	eor	fp, r5, #1
   12fd0:	and	fp, fp, r3
   12fd4:	ands	fp, fp, #255	; 0xff
   12fd8:	beq	13360 <__assert_fail@plt+0x2170>
   12fdc:	mov	r5, #0
   12fe0:	b	135c4 <__assert_fail@plt+0x23d4>
   12fe4:	cmp	r7, #11
   12fe8:	beq	13430 <__assert_fail@plt+0x2240>
   12fec:	bcc	134cc <__assert_fail@plt+0x22dc>
   12ff0:	cmp	r7, #12
   12ff4:	beq	134dc <__assert_fail@plt+0x22ec>
   12ff8:	cmp	r7, #13
   12ffc:	moveq	r3, #114	; 0x72
   13000:	bne	12f98 <__assert_fail@plt+0x1da8>
   13004:	cmp	sl, #2
   13008:	movne	r2, #0
   1300c:	andeq	r2, r6, #1
   13010:	cmp	r2, #0
   13014:	beq	13194 <__assert_fail@plt+0x1fa4>
   13018:	mov	sl, #2
   1301c:	b	12eec <__assert_fail@plt+0x1cfc>
   13020:	cmp	r7, #37	; 0x25
   13024:	beq	1311c <__assert_fail@plt+0x1f2c>
   13028:	bhi	1303c <__assert_fail@plt+0x1e4c>
   1302c:	cmp	r7, #35	; 0x23
   13030:	beq	13168 <__assert_fail@plt+0x1f78>
   13034:	mov	r5, #0
   13038:	b	13178 <__assert_fail@plt+0x1f88>
   1303c:	cmp	r7, #39	; 0x27
   13040:	bne	13034 <__assert_fail@plt+0x1e44>
   13044:	cmp	sl, #2
   13048:	ldrne	r5, [sp, #52]	; 0x34
   1304c:	movne	r3, r5
   13050:	strne	r3, [sp, #68]	; 0x44
   13054:	bne	13120 <__assert_fail@plt+0x1f30>
   13058:	cmp	r6, #0
   1305c:	bne	12eec <__assert_fail@plt+0x1cfc>
   13060:	ldr	r2, [sp, #60]	; 0x3c
   13064:	adds	r3, r9, #0
   13068:	movne	r3, #1
   1306c:	cmp	r2, #0
   13070:	movne	r3, #0
   13074:	cmp	r3, #0
   13078:	strne	r9, [sp, #60]	; 0x3c
   1307c:	movne	r9, #0
   13080:	bne	13090 <__assert_fail@plt+0x1ea0>
   13084:	cmp	r9, r4
   13088:	movhi	r3, #39	; 0x27
   1308c:	strbhi	r3, [r8, r4]
   13090:	add	r3, r4, #1
   13094:	cmp	r3, r9
   13098:	movcc	r2, #92	; 0x5c
   1309c:	strbcc	r2, [r8, r3]
   130a0:	add	r3, r4, #2
   130a4:	cmp	r3, r9
   130a8:	ldr	r5, [sp, #52]	; 0x34
   130ac:	movcc	r2, #39	; 0x27
   130b0:	strbcc	r2, [r8, r3]
   130b4:	add	r4, r4, #3
   130b8:	mov	fp, r6
   130bc:	str	r5, [sp, #68]	; 0x44
   130c0:	str	r6, [sp, #48]	; 0x30
   130c4:	b	13360 <__assert_fail@plt+0x2170>
   130c8:	cmp	r7, #94	; 0x5e
   130cc:	beq	13034 <__assert_fail@plt+0x1e44>
   130d0:	bhi	13128 <__assert_fail@plt+0x1f38>
   130d4:	cmp	r7, #90	; 0x5a
   130d8:	bhi	13110 <__assert_fail@plt+0x1f20>
   130dc:	cmp	r7, #65	; 0x41
   130e0:	bcs	1311c <__assert_fail@plt+0x1f2c>
   130e4:	cmp	r7, #62	; 0x3e
   130e8:	bls	13034 <__assert_fail@plt+0x1e44>
   130ec:	cmp	r7, #63	; 0x3f
   130f0:	bne	12f98 <__assert_fail@plt+0x1da8>
   130f4:	cmp	sl, #2
   130f8:	beq	1329c <__assert_fail@plt+0x20ac>
   130fc:	cmp	sl, #5
   13100:	beq	132ac <__assert_fail@plt+0x20bc>
   13104:	mov	fp, #0
   13108:	mov	r5, fp
   1310c:	b	13360 <__assert_fail@plt+0x2170>
   13110:	cmp	r7, #92	; 0x5c
   13114:	beq	13438 <__assert_fail@plt+0x2248>
   13118:	bls	13034 <__assert_fail@plt+0x1e44>
   1311c:	ldr	r5, [sp, #52]	; 0x34
   13120:	mov	fp, #0
   13124:	b	13360 <__assert_fail@plt+0x2170>
   13128:	cmp	r7, #122	; 0x7a
   1312c:	bhi	1314c <__assert_fail@plt+0x1f5c>
   13130:	cmp	r7, #97	; 0x61
   13134:	bcs	1311c <__assert_fail@plt+0x1f2c>
   13138:	cmp	r7, #95	; 0x5f
   1313c:	beq	1311c <__assert_fail@plt+0x1f2c>
   13140:	cmp	r7, #96	; 0x60
   13144:	bne	12f98 <__assert_fail@plt+0x1da8>
   13148:	b	13034 <__assert_fail@plt+0x1e44>
   1314c:	cmp	r7, #124	; 0x7c
   13150:	beq	13034 <__assert_fail@plt+0x1e44>
   13154:	bcc	134e4 <__assert_fail@plt+0x22f4>
   13158:	cmp	r7, #125	; 0x7d
   1315c:	beq	134e4 <__assert_fail@plt+0x22f4>
   13160:	cmp	r7, #126	; 0x7e
   13164:	bne	12f98 <__assert_fail@plt+0x1da8>
   13168:	ldr	r3, [sp, #28]
   1316c:	cmp	r3, #0
   13170:	bne	132a4 <__assert_fail@plt+0x20b4>
   13174:	ldr	r5, [sp, #52]	; 0x34
   13178:	cmp	sl, #2
   1317c:	movne	fp, #0
   13180:	andeq	fp, r6, #1
   13184:	cmp	fp, #0
   13188:	beq	13360 <__assert_fail@plt+0x2170>
   1318c:	b	13018 <__assert_fail@plt+0x1e28>
   13190:	mov	r3, #98	; 0x62
   13194:	ldr	r2, [sp, #24]
   13198:	cmp	r2, #0
   1319c:	beq	132a4 <__assert_fail@plt+0x20b4>
   131a0:	mov	r7, r3
   131a4:	mov	r5, #0
   131a8:	b	133b8 <__assert_fail@plt+0x21c8>
   131ac:	ldr	r3, [sp, #24]
   131b0:	cmp	r3, #0
   131b4:	beq	13280 <__assert_fail@plt+0x2090>
   131b8:	cmp	r6, #0
   131bc:	bne	12ee8 <__assert_fail@plt+0x1cf8>
   131c0:	ldr	r3, [sp, #48]	; 0x30
   131c4:	eor	r2, r3, #1
   131c8:	cmp	sl, #2
   131cc:	movne	r2, #0
   131d0:	andeq	r2, r2, #1
   131d4:	cmp	r2, #0
   131d8:	moveq	r3, r4
   131dc:	beq	13214 <__assert_fail@plt+0x2024>
   131e0:	cmp	r9, r4
   131e4:	movhi	r3, #39	; 0x27
   131e8:	strbhi	r3, [r8, r4]
   131ec:	add	r3, r4, #1
   131f0:	cmp	r9, r3
   131f4:	movhi	r1, #36	; 0x24
   131f8:	strbhi	r1, [r8, r3]
   131fc:	add	r3, r4, #2
   13200:	cmp	r9, r3
   13204:	movhi	r1, #39	; 0x27
   13208:	strbhi	r1, [r8, r3]
   1320c:	add	r3, r4, #3
   13210:	str	r2, [sp, #48]	; 0x30
   13214:	cmp	r9, r3
   13218:	movhi	r2, #92	; 0x5c
   1321c:	strbhi	r2, [r8, r3]
   13220:	cmp	fp, #0
   13224:	add	r4, r3, #1
   13228:	beq	137b8 <__assert_fail@plt+0x25c8>
   1322c:	ldr	r2, [sp, #28]
   13230:	ldr	r1, [sp, #36]	; 0x24
   13234:	add	r2, r2, #1
   13238:	cmp	r1, r2
   1323c:	bls	13278 <__assert_fail@plt+0x2088>
   13240:	ldr	r1, [sp, #44]	; 0x2c
   13244:	mov	r7, #48	; 0x30
   13248:	ldrb	r2, [r1, r2]
   1324c:	sub	r2, r2, #48	; 0x30
   13250:	cmp	r2, #9
   13254:	movhi	r5, r6
   13258:	bhi	13360 <__assert_fail@plt+0x2170>
   1325c:	cmp	r9, r4
   13260:	add	r2, r3, #2
   13264:	strbhi	r7, [r8, r4]
   13268:	cmp	r9, r2
   1326c:	add	r4, r3, #3
   13270:	movhi	r1, #48	; 0x30
   13274:	strbhi	r1, [r8, r2]
   13278:	mov	r5, r6
   1327c:	b	137c0 <__assert_fail@plt+0x25d0>
   13280:	ldr	r3, [sp, #148]	; 0x94
   13284:	tst	r3, #1
   13288:	ldreq	r5, [sp, #24]
   1328c:	beq	137cc <__assert_fail@plt+0x25dc>
   13290:	ldr	r3, [sp, #28]
   13294:	add	r3, r3, #1
   13298:	b	12c38 <__assert_fail@plt+0x1a48>
   1329c:	cmp	r6, #0
   132a0:	bne	12eec <__assert_fail@plt+0x1cfc>
   132a4:	mov	r5, #0
   132a8:	b	13120 <__assert_fail@plt+0x1f30>
   132ac:	ldr	r3, [sp, #148]	; 0x94
   132b0:	tst	r3, #4
   132b4:	beq	132a4 <__assert_fail@plt+0x20b4>
   132b8:	ldr	r3, [sp, #28]
   132bc:	add	r2, r3, #2
   132c0:	ldr	r3, [sp, #36]	; 0x24
   132c4:	cmp	r3, r2
   132c8:	bls	132a4 <__assert_fail@plt+0x20b4>
   132cc:	ldr	r3, [sp, #44]	; 0x2c
   132d0:	ldr	r1, [sp, #28]
   132d4:	add	r3, r3, r1
   132d8:	ldrb	r0, [r3, #1]
   132dc:	cmp	r0, #63	; 0x3f
   132e0:	bne	132a4 <__assert_fail@plt+0x20b4>
   132e4:	ldr	r3, [sp, #44]	; 0x2c
   132e8:	ldrb	r1, [r3, r2]
   132ec:	sub	r3, r1, #33	; 0x21
   132f0:	uxtb	r3, r3
   132f4:	cmp	r3, #29
   132f8:	bhi	137c8 <__assert_fail@plt+0x25d8>
   132fc:	mov	ip, #1
   13300:	ldr	r5, [pc, #1428]	; 1389c <__assert_fail@plt+0x26ac>
   13304:	ands	r5, r5, ip, lsl r3
   13308:	beq	13120 <__assert_fail@plt+0x1f30>
   1330c:	cmp	r6, #0
   13310:	bne	12eec <__assert_fail@plt+0x1cfc>
   13314:	add	r3, r4, #1
   13318:	cmp	r9, r4
   1331c:	strbhi	r0, [r8, r4]
   13320:	cmp	r9, r3
   13324:	movhi	r0, #34	; 0x22
   13328:	strbhi	r0, [r8, r3]
   1332c:	add	r3, r4, #2
   13330:	cmp	r9, r3
   13334:	movhi	r0, #34	; 0x22
   13338:	strbhi	r0, [r8, r3]
   1333c:	add	r3, r4, #3
   13340:	cmp	r9, r3
   13344:	add	r4, r4, #4
   13348:	mov	r5, r6
   1334c:	mov	fp, r6
   13350:	mov	r7, r1
   13354:	movhi	r0, #63	; 0x3f
   13358:	strbhi	r0, [r8, r3]
   1335c:	str	r2, [sp, #28]
   13360:	ldr	r3, [sp, #24]
   13364:	eor	r3, r3, #1
   13368:	cmp	sl, #2
   1336c:	orreq	r3, r3, #1
   13370:	eor	r3, r3, #1
   13374:	orr	r3, r6, r3
   13378:	tst	r3, #255	; 0xff
   1337c:	beq	133ac <__assert_fail@plt+0x21bc>
   13380:	ldr	r3, [sp, #152]	; 0x98
   13384:	cmp	r3, #0
   13388:	beq	133ac <__assert_fail@plt+0x21bc>
   1338c:	lsr	r2, r7, #5
   13390:	ldr	r1, [sp, #152]	; 0x98
   13394:	uxtb	r2, r2
   13398:	and	r3, r7, #31
   1339c:	ldr	r2, [r1, r2, lsl #2]
   133a0:	lsr	r3, r2, r3
   133a4:	tst	r3, #1
   133a8:	bne	133b8 <__assert_fail@plt+0x21c8>
   133ac:	ldr	r3, [sp, #64]	; 0x40
   133b0:	cmp	r3, #0
   133b4:	beq	13450 <__assert_fail@plt+0x2260>
   133b8:	cmp	r6, #0
   133bc:	bne	12eec <__assert_fail@plt+0x1cfc>
   133c0:	ldr	r3, [sp, #48]	; 0x30
   133c4:	eor	r3, r3, #1
   133c8:	cmp	sl, #2
   133cc:	movne	r3, #0
   133d0:	andeq	r3, r3, #1
   133d4:	cmp	r3, #0
   133d8:	beq	13410 <__assert_fail@plt+0x2220>
   133dc:	cmp	r9, r4
   133e0:	movhi	r2, #39	; 0x27
   133e4:	strbhi	r2, [r8, r4]
   133e8:	add	r2, r4, #1
   133ec:	cmp	r9, r2
   133f0:	movhi	r1, #36	; 0x24
   133f4:	strbhi	r1, [r8, r2]
   133f8:	add	r2, r4, #2
   133fc:	cmp	r9, r2
   13400:	add	r4, r4, #3
   13404:	movhi	r1, #39	; 0x27
   13408:	strbhi	r1, [r8, r2]
   1340c:	str	r3, [sp, #48]	; 0x30
   13410:	cmp	r9, r4
   13414:	movhi	r3, #92	; 0x5c
   13418:	strbhi	r3, [r8, r4]
   1341c:	ldr	fp, [sp, #52]	; 0x34
   13420:	add	r4, r4, #1
   13424:	b	13450 <__assert_fail@plt+0x2260>
   13428:	mov	r3, #116	; 0x74
   1342c:	b	13004 <__assert_fail@plt+0x1e14>
   13430:	mov	r3, #118	; 0x76
   13434:	b	13194 <__assert_fail@plt+0x1fa4>
   13438:	cmp	sl, #2
   1343c:	bne	134ac <__assert_fail@plt+0x22bc>
   13440:	cmp	r6, #0
   13444:	bne	12eec <__assert_fail@plt+0x1cfc>
   13448:	mov	r5, r6
   1344c:	mov	fp, r6
   13450:	ldr	r3, [sp, #48]	; 0x30
   13454:	eor	fp, fp, #1
   13458:	and	fp, fp, r3
   1345c:	tst	fp, #255	; 0xff
   13460:	beq	1348c <__assert_fail@plt+0x229c>
   13464:	cmp	r9, r4
   13468:	movhi	r3, #39	; 0x27
   1346c:	strbhi	r3, [r8, r4]
   13470:	add	r3, r4, #1
   13474:	cmp	r9, r3
   13478:	movhi	r2, #39	; 0x27
   1347c:	add	r4, r4, #2
   13480:	strbhi	r2, [r8, r3]
   13484:	mov	r3, #0
   13488:	str	r3, [sp, #48]	; 0x30
   1348c:	cmp	r9, r4
   13490:	strbhi	r7, [r8, r4]
   13494:	ldr	r3, [sp, #72]	; 0x48
   13498:	cmp	r5, #0
   1349c:	moveq	r3, #0
   134a0:	add	r4, r4, #1
   134a4:	str	r3, [sp, #72]	; 0x48
   134a8:	b	13290 <__assert_fail@plt+0x20a0>
   134ac:	ldr	r3, [sp, #24]
   134b0:	and	r3, r3, r6
   134b4:	tst	r5, r3
   134b8:	moveq	r3, r7
   134bc:	beq	13004 <__assert_fail@plt+0x1e14>
   134c0:	mov	fp, #0
   134c4:	mov	r5, fp
   134c8:	b	13450 <__assert_fail@plt+0x2260>
   134cc:	mov	r3, #110	; 0x6e
   134d0:	b	13004 <__assert_fail@plt+0x1e14>
   134d4:	mov	r3, #97	; 0x61
   134d8:	b	13194 <__assert_fail@plt+0x1fa4>
   134dc:	mov	r3, #102	; 0x66
   134e0:	b	13194 <__assert_fail@plt+0x1fa4>
   134e4:	ldr	r3, [sp, #36]	; 0x24
   134e8:	cmn	r3, #1
   134ec:	bne	1350c <__assert_fail@plt+0x231c>
   134f0:	ldr	r3, [sp, #44]	; 0x2c
   134f4:	ldrb	r3, [r3, #1]
   134f8:	adds	r3, r3, #0
   134fc:	movne	r3, #1
   13500:	cmp	r3, #0
   13504:	bne	132a4 <__assert_fail@plt+0x20b4>
   13508:	b	13168 <__assert_fail@plt+0x1f78>
   1350c:	ldr	r3, [sp, #36]	; 0x24
   13510:	subs	r3, r3, #1
   13514:	b	134fc <__assert_fail@plt+0x230c>
   13518:	mov	r3, #0
   1351c:	str	r3, [sp, #96]	; 0x60
   13520:	str	r3, [sp, #100]	; 0x64
   13524:	ldr	r3, [sp, #36]	; 0x24
   13528:	cmn	r3, #1
   1352c:	bne	1353c <__assert_fail@plt+0x234c>
   13530:	ldr	r0, [sp, #44]	; 0x2c
   13534:	bl	110d0 <strlen@plt>
   13538:	str	r0, [sp, #36]	; 0x24
   1353c:	ldr	r5, [sp, #52]	; 0x34
   13540:	mov	r3, #0
   13544:	str	r3, [sp, #56]	; 0x38
   13548:	ldr	r3, [sp, #28]
   1354c:	ldr	r2, [sp, #56]	; 0x38
   13550:	ldr	r1, [sp, #36]	; 0x24
   13554:	add	r2, r3, r2
   13558:	ldr	r3, [sp, #44]	; 0x2c
   1355c:	add	r0, sp, #92	; 0x5c
   13560:	add	fp, r3, r2
   13564:	sub	r2, r1, r2
   13568:	add	r3, sp, #96	; 0x60
   1356c:	mov	r1, fp
   13570:	bl	14e74 <__assert_fail@plt+0x3c84>
   13574:	subs	r2, r0, #0
   13578:	beq	135b8 <__assert_fail@plt+0x23c8>
   1357c:	cmn	r2, #1
   13580:	beq	13790 <__assert_fail@plt+0x25a0>
   13584:	cmn	r2, #2
   13588:	bne	13700 <__assert_fail@plt+0x2510>
   1358c:	ldr	r2, [sp, #56]	; 0x38
   13590:	ldr	r3, [sp, #28]
   13594:	add	r3, r3, r2
   13598:	ldr	r2, [sp, #36]	; 0x24
   1359c:	cmp	r2, r3
   135a0:	bls	13790 <__assert_fail@plt+0x25a0>
   135a4:	ldr	r3, [sp, #80]	; 0x50
   135a8:	ldr	r2, [sp, #56]	; 0x38
   135ac:	ldrb	r5, [r3, r2]
   135b0:	cmp	r5, #0
   135b4:	bne	136f0 <__assert_fail@plt+0x2500>
   135b8:	ldr	r3, [sp, #56]	; 0x38
   135bc:	cmp	r3, #1
   135c0:	bls	12fc8 <__assert_fail@plt+0x1dd8>
   135c4:	ldr	r2, [sp, #56]	; 0x38
   135c8:	ldr	r3, [sp, #28]
   135cc:	mov	fp, #0
   135d0:	add	r3, r3, r2
   135d4:	ldr	r2, [sp, #24]
   135d8:	str	r3, [sp, #52]	; 0x34
   135dc:	eor	r3, r5, #1
   135e0:	and	r3, r3, r2
   135e4:	mov	ip, #92	; 0x5c
   135e8:	uxtb	r3, r3
   135ec:	mov	r2, #39	; 0x27
   135f0:	cmp	r3, #0
   135f4:	beq	13798 <__assert_fail@plt+0x25a8>
   135f8:	cmp	r6, #0
   135fc:	bne	12ee8 <__assert_fail@plt+0x1cf8>
   13600:	ldr	r1, [sp, #48]	; 0x30
   13604:	eor	r1, r1, #1
   13608:	cmp	sl, #2
   1360c:	movne	r1, #0
   13610:	andeq	r1, r1, #1
   13614:	cmp	r1, #0
   13618:	beq	13648 <__assert_fail@plt+0x2458>
   1361c:	add	r0, r4, #1
   13620:	cmp	r9, r4
   13624:	strbhi	r2, [r8, r4]
   13628:	cmp	r9, r0
   1362c:	movhi	lr, #36	; 0x24
   13630:	strbhi	lr, [r8, r0]
   13634:	add	r0, r4, #2
   13638:	add	r4, r4, #3
   1363c:	cmp	r9, r0
   13640:	strbhi	r2, [r8, r0]
   13644:	str	r1, [sp, #48]	; 0x30
   13648:	add	r0, r4, #1
   1364c:	cmp	r9, r4
   13650:	strbhi	ip, [r8, r4]
   13654:	cmp	r9, r0
   13658:	lsrhi	r1, r7, #6
   1365c:	addhi	r1, r1, #48	; 0x30
   13660:	strbhi	r1, [r8, r0]
   13664:	add	r0, r4, #2
   13668:	cmp	r9, r0
   1366c:	lsrhi	r1, r7, #3
   13670:	and	r7, r7, #7
   13674:	andhi	r1, r1, #7
   13678:	add	r4, r4, #3
   1367c:	add	r7, r7, #48	; 0x30
   13680:	mov	fp, r3
   13684:	addhi	r1, r1, #48	; 0x30
   13688:	strbhi	r1, [r8, r0]
   1368c:	ldr	r1, [sp, #28]
   13690:	ldr	r0, [sp, #52]	; 0x34
   13694:	add	r1, r1, #1
   13698:	cmp	r0, r1
   1369c:	bls	13450 <__assert_fail@plt+0x2260>
   136a0:	ldr	lr, [sp, #48]	; 0x30
   136a4:	eor	r0, fp, #1
   136a8:	and	r0, r0, lr
   136ac:	tst	r0, #255	; 0xff
   136b0:	beq	136d4 <__assert_fail@plt+0x24e4>
   136b4:	add	r0, r4, #1
   136b8:	cmp	r9, r4
   136bc:	strbhi	r2, [r8, r4]
   136c0:	cmp	r9, r0
   136c4:	add	r4, r4, #2
   136c8:	strbhi	r2, [r8, r0]
   136cc:	mov	r0, #0
   136d0:	str	r0, [sp, #48]	; 0x30
   136d4:	ldr	r0, [sp, #44]	; 0x2c
   136d8:	cmp	r9, r4
   136dc:	strbhi	r7, [r8, r4]
   136e0:	str	r1, [sp, #28]
   136e4:	add	r4, r4, #1
   136e8:	ldrb	r7, [r0, r1]
   136ec:	b	135f0 <__assert_fail@plt+0x2400>
   136f0:	ldr	r3, [sp, #56]	; 0x38
   136f4:	add	r3, r3, #1
   136f8:	str	r3, [sp, #56]	; 0x38
   136fc:	b	1358c <__assert_fail@plt+0x239c>
   13700:	cmp	sl, #2
   13704:	movne	r3, #0
   13708:	andeq	r3, r6, #1
   1370c:	cmp	r3, #0
   13710:	movne	r1, #1
   13714:	bne	13770 <__assert_fail@plt+0x2580>
   13718:	ldr	r0, [sp, #92]	; 0x5c
   1371c:	str	r2, [sp, #84]	; 0x54
   13720:	bl	10fd4 <iswprint@plt>
   13724:	ldr	r3, [sp, #56]	; 0x38
   13728:	ldr	r2, [sp, #84]	; 0x54
   1372c:	add	r3, r3, r2
   13730:	str	r3, [sp, #56]	; 0x38
   13734:	cmp	r0, #0
   13738:	add	r0, sp, #96	; 0x60
   1373c:	moveq	r5, #0
   13740:	bl	10f5c <mbsinit@plt>
   13744:	cmp	r0, #0
   13748:	beq	13548 <__assert_fail@plt+0x2358>
   1374c:	b	135b8 <__assert_fail@plt+0x23c8>
   13750:	ldrb	r3, [fp, r1]
   13754:	cmp	r3, #94	; 0x5e
   13758:	beq	13018 <__assert_fail@plt+0x1e28>
   1375c:	bhi	1377c <__assert_fail@plt+0x258c>
   13760:	sub	r3, r3, #91	; 0x5b
   13764:	cmp	r3, #1
   13768:	bls	13018 <__assert_fail@plt+0x1e28>
   1376c:	add	r1, r1, #1
   13770:	cmp	r1, r2
   13774:	bne	13750 <__assert_fail@plt+0x2560>
   13778:	b	13718 <__assert_fail@plt+0x2528>
   1377c:	cmp	r3, #96	; 0x60
   13780:	beq	13018 <__assert_fail@plt+0x1e28>
   13784:	cmp	r3, #124	; 0x7c
   13788:	bne	1376c <__assert_fail@plt+0x257c>
   1378c:	b	13018 <__assert_fail@plt+0x1e28>
   13790:	mov	r5, #0
   13794:	b	135b8 <__assert_fail@plt+0x23c8>
   13798:	ldr	r1, [sp, #64]	; 0x40
   1379c:	cmp	r1, #0
   137a0:	beq	1368c <__assert_fail@plt+0x249c>
   137a4:	cmp	r9, r4
   137a8:	strbhi	ip, [r8, r4]
   137ac:	str	r3, [sp, #64]	; 0x40
   137b0:	add	r4, r4, #1
   137b4:	b	1368c <__assert_fail@plt+0x249c>
   137b8:	mov	r5, fp
   137bc:	ldr	fp, [sp, #24]
   137c0:	mov	r7, #48	; 0x30
   137c4:	b	13360 <__assert_fail@plt+0x2170>
   137c8:	mov	r5, #0
   137cc:	mov	fp, r5
   137d0:	b	13360 <__assert_fail@plt+0x2170>
   137d4:	ldr	r3, [sp, #36]	; 0x24
   137d8:	ldr	r2, [sp, #28]
   137dc:	subs	r3, r3, r2
   137e0:	movne	r3, #1
   137e4:	b	12c5c <__assert_fail@plt+0x1a6c>
   137e8:	ldr	r3, [sp, #60]	; 0x3c
   137ec:	clz	r7, r9
   137f0:	cmp	r3, #0
   137f4:	lsr	r7, r7, #5
   137f8:	moveq	r7, #0
   137fc:	cmp	r7, #0
   13800:	mov	r5, r3
   13804:	bne	12bbc <__assert_fail@plt+0x19cc>
   13808:	ldr	r3, [sp, #68]	; 0x44
   1380c:	ldr	r2, [sp, #40]	; 0x28
   13810:	cmp	r2, #0
   13814:	moveq	r3, #0
   13818:	andne	r3, r3, #1
   1381c:	cmp	r3, #0
   13820:	movne	r3, r2
   13824:	subne	r2, r3, #1
   13828:	bne	13858 <__assert_fail@plt+0x2668>
   1382c:	cmp	r9, r4
   13830:	movhi	r3, #0
   13834:	strbhi	r3, [r8, r4]
   13838:	mov	r0, r4
   1383c:	add	sp, sp, #108	; 0x6c
   13840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13844:	mov	r3, r2
   13848:	b	1380c <__assert_fail@plt+0x261c>
   1384c:	cmp	r9, r4
   13850:	strbhi	r3, [r8, r4]
   13854:	add	r4, r4, #1
   13858:	ldrb	r3, [r2, #1]!
   1385c:	cmp	r3, #0
   13860:	bne	1384c <__assert_fail@plt+0x265c>
   13864:	b	1382c <__assert_fail@plt+0x263c>
   13868:	ldr	r3, [pc, #32]	; 13890 <__assert_fail@plt+0x26a0>
   1386c:	mov	r6, #1
   13870:	str	r6, [sp, #24]
   13874:	str	r6, [sp, #32]
   13878:	str	r3, [sp, #40]	; 0x28
   1387c:	mov	r4, #0
   13880:	mov	sl, #5
   13884:	b	12c2c <__assert_fail@plt+0x1a3c>
   13888:	mov	r6, #1
   1388c:	b	12e20 <__assert_fail@plt+0x1c30>
   13890:	andeq	r6, r1, fp, asr #32
   13894:	andeq	r6, r1, pc, asr #32
   13898:	andeq	r6, r1, sp, asr #32
   1389c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   138a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138a4:	sub	sp, sp, #52	; 0x34
   138a8:	mov	r6, r0
   138ac:	mov	r5, r3
   138b0:	mov	r8, r1
   138b4:	mov	r9, r2
   138b8:	bl	110e8 <__errno_location@plt>
   138bc:	ldr	r7, [pc, #380]	; 13a40 <__assert_fail@plt+0x2850>
   138c0:	cmn	r6, #-2147483647	; 0x80000001
   138c4:	ldr	r4, [r7]
   138c8:	ldr	r3, [r0]
   138cc:	str	r0, [sp, #24]
   138d0:	str	r3, [sp, #32]
   138d4:	movne	r3, #0
   138d8:	moveq	r3, #1
   138dc:	orrs	r3, r3, r6, lsr #31
   138e0:	beq	138e8 <__assert_fail@plt+0x26f8>
   138e4:	bl	111d8 <abort@plt>
   138e8:	ldr	r2, [r7, #4]
   138ec:	cmp	r6, r2
   138f0:	blt	13960 <__assert_fail@plt+0x2770>
   138f4:	add	r1, sp, #48	; 0x30
   138f8:	add	sl, r7, #8
   138fc:	str	r2, [r1, #-4]!
   13900:	cmp	r4, sl
   13904:	mov	r3, #8
   13908:	sub	r2, r6, r2
   1390c:	movne	r0, r4
   13910:	str	r3, [sp]
   13914:	add	r2, r2, #1
   13918:	mvn	r3, #-2147483648	; 0x80000000
   1391c:	moveq	r0, #0
   13920:	bl	147fc <__assert_fail@plt+0x360c>
   13924:	cmp	r4, sl
   13928:	ldr	r2, [sp, #44]	; 0x2c
   1392c:	mov	fp, r0
   13930:	str	r0, [r7]
   13934:	ldmeq	r4, {r0, r1}
   13938:	mov	r4, fp
   1393c:	stmeq	fp, {r0, r1}
   13940:	ldr	r0, [r7, #4]
   13944:	mov	r1, #0
   13948:	sub	r2, r2, r0
   1394c:	add	r0, fp, r0, lsl #3
   13950:	lsl	r2, r2, #3
   13954:	bl	1110c <memset@plt>
   13958:	ldr	r3, [sp, #44]	; 0x2c
   1395c:	str	r3, [r7, #4]
   13960:	ldr	r3, [r5, #4]
   13964:	add	sl, r4, r6, lsl #3
   13968:	orr	r3, r3, #1
   1396c:	str	r3, [sp, #28]
   13970:	add	r3, r5, #8
   13974:	str	r3, [sp, #36]	; 0x24
   13978:	ldr	r3, [r5, #44]	; 0x2c
   1397c:	ldr	fp, [r4, r6, lsl #3]
   13980:	ldr	r7, [sl, #4]
   13984:	str	r3, [sp, #16]
   13988:	ldr	r3, [r5, #40]	; 0x28
   1398c:	mov	r2, r8
   13990:	str	r3, [sp, #12]
   13994:	add	r3, r5, #8
   13998:	str	r3, [sp, #8]
   1399c:	ldr	r3, [sp, #28]
   139a0:	mov	r1, fp
   139a4:	str	r3, [sp, #4]
   139a8:	ldr	r3, [r5]
   139ac:	mov	r0, r7
   139b0:	str	r3, [sp]
   139b4:	mov	r3, r9
   139b8:	bl	12b6c <__assert_fail@plt+0x197c>
   139bc:	cmp	fp, r0
   139c0:	bhi	13a28 <__assert_fail@plt+0x2838>
   139c4:	ldr	r3, [pc, #120]	; 13a44 <__assert_fail@plt+0x2854>
   139c8:	add	fp, r0, #1
   139cc:	cmp	r7, r3
   139d0:	str	fp, [r4, r6, lsl #3]
   139d4:	beq	139e0 <__assert_fail@plt+0x27f0>
   139d8:	mov	r0, r7
   139dc:	bl	127fc <__assert_fail@plt+0x160c>
   139e0:	mov	r0, fp
   139e4:	bl	146b4 <__assert_fail@plt+0x34c4>
   139e8:	ldr	r3, [r5, #44]	; 0x2c
   139ec:	mov	r2, r8
   139f0:	mov	r1, fp
   139f4:	str	r0, [sl, #4]
   139f8:	str	r3, [sp, #16]
   139fc:	ldr	r3, [r5, #40]	; 0x28
   13a00:	mov	r7, r0
   13a04:	str	r3, [sp, #12]
   13a08:	add	r3, r5, #8
   13a0c:	str	r3, [sp, #8]
   13a10:	ldr	r3, [sp, #28]
   13a14:	str	r3, [sp, #4]
   13a18:	ldr	r3, [r5]
   13a1c:	str	r3, [sp]
   13a20:	mov	r3, r9
   13a24:	bl	12b6c <__assert_fail@plt+0x197c>
   13a28:	ldr	r3, [sp, #24]
   13a2c:	ldr	r2, [sp, #32]
   13a30:	mov	r0, r7
   13a34:	str	r2, [r3]
   13a38:	add	sp, sp, #52	; 0x34
   13a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a40:	andeq	r7, r2, r0, lsr r1
   13a44:	andeq	r7, r2, r8, lsl r2
   13a48:	push	{r4, r5, r6, lr}
   13a4c:	mov	r5, r0
   13a50:	bl	110e8 <__errno_location@plt>
   13a54:	cmp	r5, #0
   13a58:	mov	r1, #48	; 0x30
   13a5c:	ldr	r6, [r0]
   13a60:	mov	r4, r0
   13a64:	ldr	r0, [pc, #12]	; 13a78 <__assert_fail@plt+0x2888>
   13a68:	movne	r0, r5
   13a6c:	bl	14a90 <__assert_fail@plt+0x38a0>
   13a70:	str	r6, [r4]
   13a74:	pop	{r4, r5, r6, pc}
   13a78:	andeq	r7, r2, r8, lsl r3
   13a7c:	ldr	r3, [pc, #12]	; 13a90 <__assert_fail@plt+0x28a0>
   13a80:	cmp	r0, #0
   13a84:	moveq	r0, r3
   13a88:	ldr	r0, [r0]
   13a8c:	bx	lr
   13a90:	andeq	r7, r2, r8, lsl r3
   13a94:	ldr	r3, [pc, #12]	; 13aa8 <__assert_fail@plt+0x28b8>
   13a98:	cmp	r0, #0
   13a9c:	moveq	r0, r3
   13aa0:	str	r1, [r0]
   13aa4:	bx	lr
   13aa8:	andeq	r7, r2, r8, lsl r3
   13aac:	ldr	r3, [pc, #52]	; 13ae8 <__assert_fail@plt+0x28f8>
   13ab0:	cmp	r0, #0
   13ab4:	moveq	r0, r3
   13ab8:	add	r3, r0, #8
   13abc:	push	{lr}		; (str lr, [sp, #-4]!)
   13ac0:	lsr	lr, r1, #5
   13ac4:	and	r1, r1, #31
   13ac8:	ldr	ip, [r3, lr, lsl #2]
   13acc:	lsr	r0, ip, r1
   13ad0:	eor	r2, r2, r0
   13ad4:	and	r2, r2, #1
   13ad8:	and	r0, r0, #1
   13adc:	eor	r1, ip, r2, lsl r1
   13ae0:	str	r1, [r3, lr, lsl #2]
   13ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae8:	andeq	r7, r2, r8, lsl r3
   13aec:	ldr	r3, [pc, #16]	; 13b04 <__assert_fail@plt+0x2914>
   13af0:	cmp	r0, #0
   13af4:	movne	r3, r0
   13af8:	ldr	r0, [r3, #4]
   13afc:	str	r1, [r3, #4]
   13b00:	bx	lr
   13b04:	andeq	r7, r2, r8, lsl r3
   13b08:	ldr	r3, [pc, #44]	; 13b3c <__assert_fail@plt+0x294c>
   13b0c:	cmp	r0, #0
   13b10:	moveq	r0, r3
   13b14:	mov	r3, #10
   13b18:	cmp	r2, #0
   13b1c:	cmpne	r1, #0
   13b20:	str	r3, [r0]
   13b24:	bne	13b30 <__assert_fail@plt+0x2940>
   13b28:	push	{r4, lr}
   13b2c:	bl	111d8 <abort@plt>
   13b30:	str	r1, [r0, #40]	; 0x28
   13b34:	str	r2, [r0, #44]	; 0x2c
   13b38:	bx	lr
   13b3c:	andeq	r7, r2, r8, lsl r3
   13b40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b44:	sub	sp, sp, #24
   13b48:	mov	sl, r3
   13b4c:	ldr	r4, [sp, #56]	; 0x38
   13b50:	ldr	r3, [pc, #100]	; 13bbc <__assert_fail@plt+0x29cc>
   13b54:	cmp	r4, #0
   13b58:	moveq	r4, r3
   13b5c:	mov	r7, r0
   13b60:	mov	r8, r1
   13b64:	mov	r9, r2
   13b68:	bl	110e8 <__errno_location@plt>
   13b6c:	ldr	r3, [r4, #44]	; 0x2c
   13b70:	mov	r2, r9
   13b74:	mov	r1, r8
   13b78:	ldr	r6, [r0]
   13b7c:	str	r3, [sp, #16]
   13b80:	ldr	r3, [r4, #40]	; 0x28
   13b84:	mov	r5, r0
   13b88:	str	r3, [sp, #12]
   13b8c:	add	r3, r4, #8
   13b90:	str	r3, [sp, #8]
   13b94:	ldr	r3, [r4, #4]
   13b98:	mov	r0, r7
   13b9c:	str	r3, [sp, #4]
   13ba0:	ldr	r3, [r4]
   13ba4:	str	r3, [sp]
   13ba8:	mov	r3, sl
   13bac:	bl	12b6c <__assert_fail@plt+0x197c>
   13bb0:	str	r6, [r5]
   13bb4:	add	sp, sp, #24
   13bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13bbc:	andeq	r7, r2, r8, lsl r3
   13bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bc4:	cmp	r3, #0
   13bc8:	sub	sp, sp, #44	; 0x2c
   13bcc:	ldr	r4, [pc, #188]	; 13c90 <__assert_fail@plt+0x2aa0>
   13bd0:	mov	r6, r2
   13bd4:	movne	r4, r3
   13bd8:	mov	sl, r1
   13bdc:	mov	r9, r0
   13be0:	bl	110e8 <__errno_location@plt>
   13be4:	ldr	r5, [r4, #4]
   13be8:	add	fp, r4, #8
   13bec:	cmp	r6, #0
   13bf0:	orreq	r5, r5, #1
   13bf4:	mov	r1, #0
   13bf8:	mov	r2, r9
   13bfc:	ldr	r3, [r0]
   13c00:	mov	r8, r0
   13c04:	str	r3, [sp, #28]
   13c08:	ldr	r3, [r4, #44]	; 0x2c
   13c0c:	mov	r0, r1
   13c10:	str	r3, [sp, #16]
   13c14:	ldr	r3, [r4, #40]	; 0x28
   13c18:	stmib	sp, {r5, fp}
   13c1c:	str	r3, [sp, #12]
   13c20:	ldr	r3, [r4]
   13c24:	str	r3, [sp]
   13c28:	mov	r3, sl
   13c2c:	bl	12b6c <__assert_fail@plt+0x197c>
   13c30:	add	r1, r0, #1
   13c34:	mov	r7, r0
   13c38:	mov	r0, r1
   13c3c:	str	r1, [sp, #36]	; 0x24
   13c40:	bl	146b4 <__assert_fail@plt+0x34c4>
   13c44:	ldr	r3, [r4, #44]	; 0x2c
   13c48:	mov	r2, r9
   13c4c:	str	r3, [sp, #16]
   13c50:	ldr	r3, [r4, #40]	; 0x28
   13c54:	stmib	sp, {r5, fp}
   13c58:	str	r3, [sp, #12]
   13c5c:	ldr	r3, [r4]
   13c60:	ldr	r1, [sp, #36]	; 0x24
   13c64:	str	r3, [sp]
   13c68:	mov	r3, sl
   13c6c:	str	r0, [sp, #32]
   13c70:	bl	12b6c <__assert_fail@plt+0x197c>
   13c74:	ldr	r3, [sp, #28]
   13c78:	cmp	r6, #0
   13c7c:	str	r3, [r8]
   13c80:	ldr	r0, [sp, #32]
   13c84:	strne	r7, [r6]
   13c88:	add	sp, sp, #44	; 0x2c
   13c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c90:	andeq	r7, r2, r8, lsl r3
   13c94:	mov	r3, r2
   13c98:	mov	r2, #0
   13c9c:	b	13bc0 <__assert_fail@plt+0x29d0>
   13ca0:	push	{r4, r5, r6, r7, r8, lr}
   13ca4:	mov	r6, #1
   13ca8:	ldr	r4, [pc, #104]	; 13d18 <__assert_fail@plt+0x2b28>
   13cac:	ldr	r5, [r4]
   13cb0:	add	r7, r5, #12
   13cb4:	ldr	r3, [r4, #4]
   13cb8:	add	r7, r7, #8
   13cbc:	cmp	r6, r3
   13cc0:	blt	13d08 <__assert_fail@plt+0x2b18>
   13cc4:	ldr	r0, [r5, #4]
   13cc8:	ldr	r6, [pc, #76]	; 13d1c <__assert_fail@plt+0x2b2c>
   13ccc:	cmp	r0, r6
   13cd0:	beq	13ce4 <__assert_fail@plt+0x2af4>
   13cd4:	bl	127fc <__assert_fail@plt+0x160c>
   13cd8:	mov	r3, #256	; 0x100
   13cdc:	str	r3, [r4, #8]
   13ce0:	str	r6, [r4, #12]
   13ce4:	ldr	r6, [pc, #52]	; 13d20 <__assert_fail@plt+0x2b30>
   13ce8:	cmp	r5, r6
   13cec:	beq	13cfc <__assert_fail@plt+0x2b0c>
   13cf0:	mov	r0, r5
   13cf4:	bl	127fc <__assert_fail@plt+0x160c>
   13cf8:	str	r6, [r4]
   13cfc:	mov	r3, #1
   13d00:	str	r3, [r4, #4]
   13d04:	pop	{r4, r5, r6, r7, r8, pc}
   13d08:	ldr	r0, [r7, #-8]
   13d0c:	bl	127fc <__assert_fail@plt+0x160c>
   13d10:	add	r6, r6, #1
   13d14:	b	13cb4 <__assert_fail@plt+0x2ac4>
   13d18:	andeq	r7, r2, r0, lsr r1
   13d1c:	andeq	r7, r2, r8, lsl r2
   13d20:	andeq	r7, r2, r8, lsr r1
   13d24:	ldr	r3, [pc, #4]	; 13d30 <__assert_fail@plt+0x2b40>
   13d28:	mvn	r2, #0
   13d2c:	b	138a0 <__assert_fail@plt+0x26b0>
   13d30:	andeq	r7, r2, r8, lsl r3
   13d34:	ldr	r3, [pc]	; 13d3c <__assert_fail@plt+0x2b4c>
   13d38:	b	138a0 <__assert_fail@plt+0x26b0>
   13d3c:	andeq	r7, r2, r8, lsl r3
   13d40:	mov	r1, r0
   13d44:	mov	r0, #0
   13d48:	b	13d24 <__assert_fail@plt+0x2b34>
   13d4c:	mov	r2, r1
   13d50:	mov	r1, r0
   13d54:	mov	r0, #0
   13d58:	b	13d34 <__assert_fail@plt+0x2b44>
   13d5c:	push	{r4, r5, lr}
   13d60:	sub	sp, sp, #52	; 0x34
   13d64:	mov	r5, r2
   13d68:	mov	r4, r0
   13d6c:	mov	r0, sp
   13d70:	bl	12a28 <__assert_fail@plt+0x1838>
   13d74:	mov	r3, sp
   13d78:	mvn	r2, #0
   13d7c:	mov	r1, r5
   13d80:	mov	r0, r4
   13d84:	bl	138a0 <__assert_fail@plt+0x26b0>
   13d88:	add	sp, sp, #52	; 0x34
   13d8c:	pop	{r4, r5, pc}
   13d90:	push	{r4, r5, r6, lr}
   13d94:	sub	sp, sp, #48	; 0x30
   13d98:	mov	r5, r2
   13d9c:	mov	r6, r3
   13da0:	mov	r4, r0
   13da4:	mov	r0, sp
   13da8:	bl	12a28 <__assert_fail@plt+0x1838>
   13dac:	mov	r3, sp
   13db0:	mov	r2, r6
   13db4:	mov	r1, r5
   13db8:	mov	r0, r4
   13dbc:	bl	138a0 <__assert_fail@plt+0x26b0>
   13dc0:	add	sp, sp, #48	; 0x30
   13dc4:	pop	{r4, r5, r6, pc}
   13dc8:	mov	r2, r1
   13dcc:	mov	r1, r0
   13dd0:	mov	r0, #0
   13dd4:	b	13d5c <__assert_fail@plt+0x2b6c>
   13dd8:	mov	r3, r2
   13ddc:	mov	r2, r1
   13de0:	mov	r1, r0
   13de4:	mov	r0, #0
   13de8:	b	13d90 <__assert_fail@plt+0x2ba0>
   13dec:	push	{r4, r5, r6, lr}
   13df0:	mov	r4, r0
   13df4:	ldr	lr, [pc, #80]	; 13e4c <__assert_fail@plt+0x2c5c>
   13df8:	mov	r5, r1
   13dfc:	mov	r6, r2
   13e00:	ldm	lr!, {r0, r1, r2, r3}
   13e04:	sub	sp, sp, #48	; 0x30
   13e08:	mov	ip, sp
   13e0c:	stmia	ip!, {r0, r1, r2, r3}
   13e10:	ldm	lr!, {r0, r1, r2, r3}
   13e14:	stmia	ip!, {r0, r1, r2, r3}
   13e18:	ldm	lr, {r0, r1, r2, r3}
   13e1c:	stm	ip, {r0, r1, r2, r3}
   13e20:	mov	r1, r6
   13e24:	mov	r2, #1
   13e28:	mov	r0, sp
   13e2c:	bl	13aac <__assert_fail@plt+0x28bc>
   13e30:	mov	r3, sp
   13e34:	mov	r2, r5
   13e38:	mov	r1, r4
   13e3c:	mov	r0, #0
   13e40:	bl	138a0 <__assert_fail@plt+0x26b0>
   13e44:	add	sp, sp, #48	; 0x30
   13e48:	pop	{r4, r5, r6, pc}
   13e4c:	andeq	r7, r2, r8, lsl r3
   13e50:	mov	r2, r1
   13e54:	mvn	r1, #0
   13e58:	b	13dec <__assert_fail@plt+0x2bfc>
   13e5c:	mov	r1, #58	; 0x3a
   13e60:	b	13e50 <__assert_fail@plt+0x2c60>
   13e64:	mov	r2, #58	; 0x3a
   13e68:	b	13dec <__assert_fail@plt+0x2bfc>
   13e6c:	push	{r4, r5, lr}
   13e70:	sub	sp, sp, #100	; 0x64
   13e74:	mov	r4, r0
   13e78:	mov	r0, sp
   13e7c:	mov	r5, r2
   13e80:	bl	12a28 <__assert_fail@plt+0x1838>
   13e84:	mov	ip, sp
   13e88:	add	lr, sp, #48	; 0x30
   13e8c:	ldm	ip!, {r0, r1, r2, r3}
   13e90:	stmia	lr!, {r0, r1, r2, r3}
   13e94:	ldm	ip!, {r0, r1, r2, r3}
   13e98:	stmia	lr!, {r0, r1, r2, r3}
   13e9c:	ldm	ip, {r0, r1, r2, r3}
   13ea0:	stm	lr, {r0, r1, r2, r3}
   13ea4:	mov	r2, #1
   13ea8:	mov	r1, #58	; 0x3a
   13eac:	add	r0, sp, #48	; 0x30
   13eb0:	bl	13aac <__assert_fail@plt+0x28bc>
   13eb4:	add	r3, sp, #48	; 0x30
   13eb8:	mvn	r2, #0
   13ebc:	mov	r1, r5
   13ec0:	mov	r0, r4
   13ec4:	bl	138a0 <__assert_fail@plt+0x26b0>
   13ec8:	add	sp, sp, #100	; 0x64
   13ecc:	pop	{r4, r5, pc}
   13ed0:	push	{r4, r5, r6, r7, lr}
   13ed4:	mov	r4, r0
   13ed8:	ldr	lr, [pc, #84]	; 13f34 <__assert_fail@plt+0x2d44>
   13edc:	mov	r6, r1
   13ee0:	mov	r7, r2
   13ee4:	mov	r5, r3
   13ee8:	ldm	lr!, {r0, r1, r2, r3}
   13eec:	sub	sp, sp, #52	; 0x34
   13ef0:	mov	ip, sp
   13ef4:	stmia	ip!, {r0, r1, r2, r3}
   13ef8:	ldm	lr!, {r0, r1, r2, r3}
   13efc:	stmia	ip!, {r0, r1, r2, r3}
   13f00:	ldm	lr, {r0, r1, r2, r3}
   13f04:	stm	ip, {r0, r1, r2, r3}
   13f08:	mov	r2, r7
   13f0c:	mov	r1, r6
   13f10:	mov	r0, sp
   13f14:	bl	13b08 <__assert_fail@plt+0x2918>
   13f18:	mov	r3, sp
   13f1c:	ldr	r2, [sp, #72]	; 0x48
   13f20:	mov	r1, r5
   13f24:	mov	r0, r4
   13f28:	bl	138a0 <__assert_fail@plt+0x26b0>
   13f2c:	add	sp, sp, #52	; 0x34
   13f30:	pop	{r4, r5, r6, r7, pc}
   13f34:	andeq	r7, r2, r8, lsl r3
   13f38:	mvn	ip, #0
   13f3c:	push	{r0, r1, r2, lr}
   13f40:	str	ip, [sp]
   13f44:	bl	13ed0 <__assert_fail@plt+0x2ce0>
   13f48:	add	sp, sp, #12
   13f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f50:	mov	r3, r2
   13f54:	mov	r2, r1
   13f58:	mov	r1, r0
   13f5c:	mov	r0, #0
   13f60:	b	13f38 <__assert_fail@plt+0x2d48>
   13f64:	push	{r0, r1, r2, lr}
   13f68:	str	r3, [sp]
   13f6c:	mov	r3, r2
   13f70:	mov	r2, r1
   13f74:	mov	r1, r0
   13f78:	mov	r0, #0
   13f7c:	bl	13ed0 <__assert_fail@plt+0x2ce0>
   13f80:	add	sp, sp, #12
   13f84:	pop	{pc}		; (ldr pc, [sp], #4)
   13f88:	ldr	r3, [pc]	; 13f90 <__assert_fail@plt+0x2da0>
   13f8c:	b	138a0 <__assert_fail@plt+0x26b0>
   13f90:	andeq	r7, r2, r0, asr #2
   13f94:	mov	r2, r1
   13f98:	mov	r1, r0
   13f9c:	mov	r0, #0
   13fa0:	b	13f88 <__assert_fail@plt+0x2d98>
   13fa4:	mvn	r2, #0
   13fa8:	b	13f88 <__assert_fail@plt+0x2d98>
   13fac:	mov	r1, r0
   13fb0:	mov	r0, #0
   13fb4:	b	13fa4 <__assert_fail@plt+0x2db4>
   13fb8:	push	{r4, r5, r6, lr}
   13fbc:	mov	r5, r0
   13fc0:	mov	r0, #33	; 0x21
   13fc4:	bl	1468c <__assert_fail@plt+0x349c>
   13fc8:	add	r1, r5, #44	; 0x2c
   13fcc:	mov	r2, #32
   13fd0:	mov	r5, #0
   13fd4:	mov	r4, r0
   13fd8:	bl	11118 <strncpy@plt>
   13fdc:	mov	r0, r4
   13fe0:	strb	r5, [r4, #32]
   13fe4:	bl	110d0 <strlen@plt>
   13fe8:	add	r0, r4, r0
   13fec:	cmp	r4, r0
   13ff0:	bcs	14000 <__assert_fail@plt+0x2e10>
   13ff4:	ldrb	r3, [r0, #-1]!
   13ff8:	cmp	r3, #32
   13ffc:	beq	14008 <__assert_fail@plt+0x2e18>
   14000:	mov	r0, r4
   14004:	pop	{r4, r5, r6, pc}
   14008:	strb	r5, [r0]
   1400c:	b	13fec <__assert_fail@plt+0x2dfc>
   14010:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14014:	mov	r4, #0
   14018:	mov	r8, r3
   1401c:	mov	r9, r1
   14020:	mov	sl, r2
   14024:	str	r4, [sp, #12]
   14028:	bl	10f20 <utmpxname@plt>
   1402c:	bl	10fb0 <setutxent@plt>
   14030:	lsr	r6, r8, #1
   14034:	eor	r6, r6, #1
   14038:	mov	r7, r4
   1403c:	and	r6, r6, #1
   14040:	bl	111e4 <getutxent@plt>
   14044:	subs	r5, r0, #0
   14048:	bne	14064 <__assert_fail@plt+0x2e74>
   1404c:	bl	11160 <endutxent@plt>
   14050:	str	r4, [r9]
   14054:	mov	r0, r5
   14058:	str	r7, [sl]
   1405c:	add	sp, sp, #16
   14060:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14064:	ldrb	r3, [r5, #44]	; 0x2c
   14068:	cmp	r3, #0
   1406c:	ldrshne	r3, [r5]
   14070:	subne	r3, r3, #7
   14074:	clzne	r3, r3
   14078:	lsrne	r3, r3, #5
   1407c:	orrs	r2, r6, r3
   14080:	beq	14040 <__assert_fail@plt+0x2e50>
   14084:	tst	r8, r3
   14088:	beq	140b8 <__assert_fail@plt+0x2ec8>
   1408c:	ldr	r0, [r5, #4]
   14090:	cmp	r0, #0
   14094:	ble	140b8 <__assert_fail@plt+0x2ec8>
   14098:	mov	r1, #0
   1409c:	bl	110a0 <kill@plt>
   140a0:	cmp	r0, #0
   140a4:	bge	140b8 <__assert_fail@plt+0x2ec8>
   140a8:	bl	110e8 <__errno_location@plt>
   140ac:	ldr	r3, [r0]
   140b0:	cmp	r3, #3
   140b4:	beq	14040 <__assert_fail@plt+0x2e50>
   140b8:	ldr	r3, [sp, #12]
   140bc:	cmp	r4, r3
   140c0:	bne	140e4 <__assert_fail@plt+0x2ef4>
   140c4:	mov	r3, #384	; 0x180
   140c8:	str	r3, [sp]
   140cc:	mov	r0, r7
   140d0:	mvn	r3, #0
   140d4:	mov	r2, #1
   140d8:	add	r1, sp, #12
   140dc:	bl	147fc <__assert_fail@plt+0x360c>
   140e0:	mov	r7, r0
   140e4:	mov	r2, #384	; 0x180
   140e8:	mov	r1, r5
   140ec:	mla	r0, r2, r4, r7
   140f0:	bl	10f50 <memcpy@plt>
   140f4:	add	r4, r4, #1
   140f8:	b	14040 <__assert_fail@plt+0x2e50>
   140fc:	push	{r4, r5, r6, lr}
   14100:	mov	r5, r1
   14104:	mov	r1, #0
   14108:	mov	r4, r2
   1410c:	bl	1116c <setlocale@plt>
   14110:	subs	r6, r0, #0
   14114:	bne	14128 <__assert_fail@plt+0x2f38>
   14118:	cmp	r4, #0
   1411c:	strbne	r6, [r5]
   14120:	mov	r0, #22
   14124:	pop	{r4, r5, r6, pc}
   14128:	bl	110d0 <strlen@plt>
   1412c:	cmp	r4, r0
   14130:	bls	1414c <__assert_fail@plt+0x2f5c>
   14134:	add	r2, r0, #1
   14138:	mov	r1, r6
   1413c:	mov	r0, r5
   14140:	bl	10f50 <memcpy@plt>
   14144:	mov	r0, #0
   14148:	pop	{r4, r5, r6, pc}
   1414c:	cmp	r4, #0
   14150:	beq	14170 <__assert_fail@plt+0x2f80>
   14154:	sub	r4, r4, #1
   14158:	mov	r2, r4
   1415c:	mov	r1, r6
   14160:	mov	r0, r5
   14164:	bl	10f50 <memcpy@plt>
   14168:	mov	r3, #0
   1416c:	strb	r3, [r5, r4]
   14170:	mov	r0, #34	; 0x22
   14174:	pop	{r4, r5, r6, pc}
   14178:	mov	r1, #0
   1417c:	b	1116c <setlocale@plt>
   14180:	push	{r4, r5, r6, lr}
   14184:	sub	sp, sp, #32
   14188:	cmp	r1, #0
   1418c:	mov	r5, r0
   14190:	ldr	r4, [sp, #48]	; 0x30
   14194:	ldr	r6, [sp, #52]	; 0x34
   14198:	beq	1424c <__assert_fail@plt+0x305c>
   1419c:	stm	sp, {r2, r3}
   141a0:	mov	r3, r1
   141a4:	ldr	r2, [pc, #860]	; 14508 <__assert_fail@plt+0x3318>
   141a8:	mov	r1, #1
   141ac:	bl	1113c <__fprintf_chk@plt>
   141b0:	mov	r2, #5
   141b4:	ldr	r1, [pc, #848]	; 1450c <__assert_fail@plt+0x331c>
   141b8:	mov	r0, #0
   141bc:	bl	10f98 <dcgettext@plt>
   141c0:	ldr	r3, [pc, #840]	; 14510 <__assert_fail@plt+0x3320>
   141c4:	ldr	r2, [pc, #840]	; 14514 <__assert_fail@plt+0x3324>
   141c8:	str	r3, [sp]
   141cc:	mov	r1, #1
   141d0:	mov	r3, r0
   141d4:	mov	r0, r5
   141d8:	bl	1113c <__fprintf_chk@plt>
   141dc:	mov	r1, r5
   141e0:	mov	r0, #10
   141e4:	bl	10f8c <fputc_unlocked@plt>
   141e8:	mov	r2, #5
   141ec:	ldr	r1, [pc, #804]	; 14518 <__assert_fail@plt+0x3328>
   141f0:	mov	r0, #0
   141f4:	bl	10f98 <dcgettext@plt>
   141f8:	mov	r1, #1
   141fc:	ldr	r3, [pc, #792]	; 1451c <__assert_fail@plt+0x332c>
   14200:	mov	r2, r0
   14204:	mov	r0, r5
   14208:	bl	1113c <__fprintf_chk@plt>
   1420c:	mov	r1, r5
   14210:	mov	r0, #10
   14214:	bl	10f8c <fputc_unlocked@plt>
   14218:	cmp	r6, #9
   1421c:	ldrls	pc, [pc, r6, lsl #2]
   14220:	b	144fc <__assert_fail@plt+0x330c>
   14224:	andeq	r4, r1, ip, lsr r3
   14228:	andeq	r4, r1, r4, ror #4
   1422c:	muleq	r1, r0, r2
   14230:	andeq	r4, r1, r4, asr #5
   14234:	andeq	r4, r1, r0, lsl #6
   14238:	andeq	r4, r1, r4, asr #6
   1423c:	andeq	r4, r1, ip, lsl #7
   14240:	ldrdeq	r4, [r1], -ip
   14244:	andeq	r4, r1, r4, lsr r4
   14248:	muleq	r1, r4, r4
   1424c:	str	r3, [sp]
   14250:	mov	r1, #1
   14254:	mov	r3, r2
   14258:	ldr	r2, [pc, #704]	; 14520 <__assert_fail@plt+0x3330>
   1425c:	bl	1113c <__fprintf_chk@plt>
   14260:	b	141b0 <__assert_fail@plt+0x2fc0>
   14264:	mov	r2, #5
   14268:	ldr	r1, [pc, #692]	; 14524 <__assert_fail@plt+0x3334>
   1426c:	mov	r0, #0
   14270:	bl	10f98 <dcgettext@plt>
   14274:	ldr	r3, [r4]
   14278:	mov	r1, #1
   1427c:	mov	r2, r0
   14280:	mov	r0, r5
   14284:	add	sp, sp, #32
   14288:	pop	{r4, r5, r6, lr}
   1428c:	b	1113c <__fprintf_chk@plt>
   14290:	mov	r2, #5
   14294:	ldr	r1, [pc, #652]	; 14528 <__assert_fail@plt+0x3338>
   14298:	mov	r0, #0
   1429c:	bl	10f98 <dcgettext@plt>
   142a0:	ldr	r3, [r4, #4]
   142a4:	mov	r1, #1
   142a8:	str	r3, [sp, #48]	; 0x30
   142ac:	ldr	r3, [r4]
   142b0:	mov	r2, r0
   142b4:	mov	r0, r5
   142b8:	add	sp, sp, #32
   142bc:	pop	{r4, r5, r6, lr}
   142c0:	b	1113c <__fprintf_chk@plt>
   142c4:	mov	r2, #5
   142c8:	ldr	r1, [pc, #604]	; 1452c <__assert_fail@plt+0x333c>
   142cc:	mov	r0, #0
   142d0:	bl	10f98 <dcgettext@plt>
   142d4:	ldr	r3, [r4, #8]
   142d8:	mov	r1, #1
   142dc:	str	r3, [sp, #52]	; 0x34
   142e0:	ldr	r3, [r4, #4]
   142e4:	str	r3, [sp, #48]	; 0x30
   142e8:	ldr	r3, [r4]
   142ec:	mov	r2, r0
   142f0:	mov	r0, r5
   142f4:	add	sp, sp, #32
   142f8:	pop	{r4, r5, r6, lr}
   142fc:	b	1113c <__fprintf_chk@plt>
   14300:	mov	r2, #5
   14304:	ldr	r1, [pc, #548]	; 14530 <__assert_fail@plt+0x3340>
   14308:	mov	r0, #0
   1430c:	bl	10f98 <dcgettext@plt>
   14310:	ldr	r3, [r4, #12]
   14314:	mov	r1, #1
   14318:	str	r3, [sp, #8]
   1431c:	ldr	r3, [r4, #8]
   14320:	str	r3, [sp, #4]
   14324:	ldr	r3, [r4, #4]
   14328:	str	r3, [sp]
   1432c:	ldr	r3, [r4]
   14330:	mov	r2, r0
   14334:	mov	r0, r5
   14338:	bl	1113c <__fprintf_chk@plt>
   1433c:	add	sp, sp, #32
   14340:	pop	{r4, r5, r6, pc}
   14344:	mov	r2, #5
   14348:	ldr	r1, [pc, #484]	; 14534 <__assert_fail@plt+0x3344>
   1434c:	mov	r0, #0
   14350:	bl	10f98 <dcgettext@plt>
   14354:	ldr	r3, [r4, #16]
   14358:	mov	r1, #1
   1435c:	str	r3, [sp, #12]
   14360:	ldr	r3, [r4, #12]
   14364:	str	r3, [sp, #8]
   14368:	ldr	r3, [r4, #8]
   1436c:	str	r3, [sp, #4]
   14370:	ldr	r3, [r4, #4]
   14374:	str	r3, [sp]
   14378:	ldr	r3, [r4]
   1437c:	mov	r2, r0
   14380:	mov	r0, r5
   14384:	bl	1113c <__fprintf_chk@plt>
   14388:	b	1433c <__assert_fail@plt+0x314c>
   1438c:	mov	r2, #5
   14390:	ldr	r1, [pc, #416]	; 14538 <__assert_fail@plt+0x3348>
   14394:	mov	r0, #0
   14398:	bl	10f98 <dcgettext@plt>
   1439c:	ldr	r3, [r4, #20]
   143a0:	mov	r1, #1
   143a4:	str	r3, [sp, #16]
   143a8:	ldr	r3, [r4, #16]
   143ac:	str	r3, [sp, #12]
   143b0:	ldr	r3, [r4, #12]
   143b4:	str	r3, [sp, #8]
   143b8:	ldr	r3, [r4, #8]
   143bc:	str	r3, [sp, #4]
   143c0:	ldr	r3, [r4, #4]
   143c4:	str	r3, [sp]
   143c8:	ldr	r3, [r4]
   143cc:	mov	r2, r0
   143d0:	mov	r0, r5
   143d4:	bl	1113c <__fprintf_chk@plt>
   143d8:	b	1433c <__assert_fail@plt+0x314c>
   143dc:	mov	r2, #5
   143e0:	ldr	r1, [pc, #340]	; 1453c <__assert_fail@plt+0x334c>
   143e4:	mov	r0, #0
   143e8:	bl	10f98 <dcgettext@plt>
   143ec:	ldr	r3, [r4, #24]
   143f0:	mov	r1, #1
   143f4:	str	r3, [sp, #20]
   143f8:	ldr	r3, [r4, #20]
   143fc:	str	r3, [sp, #16]
   14400:	ldr	r3, [r4, #16]
   14404:	str	r3, [sp, #12]
   14408:	ldr	r3, [r4, #12]
   1440c:	str	r3, [sp, #8]
   14410:	ldr	r3, [r4, #8]
   14414:	str	r3, [sp, #4]
   14418:	ldr	r3, [r4, #4]
   1441c:	str	r3, [sp]
   14420:	ldr	r3, [r4]
   14424:	mov	r2, r0
   14428:	mov	r0, r5
   1442c:	bl	1113c <__fprintf_chk@plt>
   14430:	b	1433c <__assert_fail@plt+0x314c>
   14434:	mov	r2, #5
   14438:	ldr	r1, [pc, #256]	; 14540 <__assert_fail@plt+0x3350>
   1443c:	mov	r0, #0
   14440:	bl	10f98 <dcgettext@plt>
   14444:	ldr	r3, [r4, #28]
   14448:	mov	r1, #1
   1444c:	str	r3, [sp, #24]
   14450:	ldr	r3, [r4, #24]
   14454:	str	r3, [sp, #20]
   14458:	ldr	r3, [r4, #20]
   1445c:	str	r3, [sp, #16]
   14460:	ldr	r3, [r4, #16]
   14464:	str	r3, [sp, #12]
   14468:	ldr	r3, [r4, #12]
   1446c:	str	r3, [sp, #8]
   14470:	ldr	r3, [r4, #8]
   14474:	str	r3, [sp, #4]
   14478:	ldr	r3, [r4, #4]
   1447c:	str	r3, [sp]
   14480:	ldr	r3, [r4]
   14484:	mov	r2, r0
   14488:	mov	r0, r5
   1448c:	bl	1113c <__fprintf_chk@plt>
   14490:	b	1433c <__assert_fail@plt+0x314c>
   14494:	ldr	r1, [pc, #168]	; 14544 <__assert_fail@plt+0x3354>
   14498:	mov	r2, #5
   1449c:	mov	r0, #0
   144a0:	bl	10f98 <dcgettext@plt>
   144a4:	ldr	r3, [r4, #32]
   144a8:	mov	r1, #1
   144ac:	str	r3, [sp, #28]
   144b0:	ldr	r3, [r4, #28]
   144b4:	str	r3, [sp, #24]
   144b8:	ldr	r3, [r4, #24]
   144bc:	str	r3, [sp, #20]
   144c0:	ldr	r3, [r4, #20]
   144c4:	str	r3, [sp, #16]
   144c8:	ldr	r3, [r4, #16]
   144cc:	str	r3, [sp, #12]
   144d0:	ldr	r3, [r4, #12]
   144d4:	str	r3, [sp, #8]
   144d8:	ldr	r3, [r4, #8]
   144dc:	str	r3, [sp, #4]
   144e0:	ldr	r3, [r4, #4]
   144e4:	str	r3, [sp]
   144e8:	ldr	r3, [r4]
   144ec:	mov	r2, r0
   144f0:	mov	r0, r5
   144f4:	bl	1113c <__fprintf_chk@plt>
   144f8:	b	1433c <__assert_fail@plt+0x314c>
   144fc:	mov	r2, #5
   14500:	ldr	r1, [pc, #64]	; 14548 <__assert_fail@plt+0x3358>
   14504:	b	1449c <__assert_fail@plt+0x32ac>
   14508:	muleq	r1, sp, r0
   1450c:	strheq	r6, [r1], -r0
   14510:	andeq	r0, r0, r6, ror #15
   14514:	andeq	r6, r1, lr, ror r3
   14518:	strheq	r6, [r1], -r4
   1451c:	andeq	r6, r1, pc, asr r1
   14520:	andeq	r6, r1, r9, lsr #1
   14524:	andeq	r6, r1, r1, lsl #3
   14528:	muleq	r1, r1, r1
   1452c:	andeq	r6, r1, r8, lsr #3
   14530:	andeq	r6, r1, r4, asr #3
   14534:	andeq	r6, r1, r4, ror #3
   14538:	andeq	r6, r1, r8, lsl #4
   1453c:	andeq	r6, r1, r0, lsr r2
   14540:	andeq	r6, r1, ip, asr r2
   14544:	andeq	r6, r1, ip, lsl #5
   14548:	andeq	r6, r1, r0, asr #5
   1454c:	push	{r0, r1, r4, lr}
   14550:	mov	ip, #0
   14554:	ldr	lr, [sp, #16]
   14558:	ldr	r4, [lr, ip, lsl #2]
   1455c:	cmp	r4, #0
   14560:	bne	14578 <__assert_fail@plt+0x3388>
   14564:	str	ip, [sp, #4]
   14568:	str	lr, [sp]
   1456c:	bl	14180 <__assert_fail@plt+0x2f90>
   14570:	add	sp, sp, #8
   14574:	pop	{r4, pc}
   14578:	add	ip, ip, #1
   1457c:	b	14558 <__assert_fail@plt+0x3368>
   14580:	push	{r4, r5, lr}
   14584:	sub	sp, sp, #52	; 0x34
   14588:	mov	ip, #0
   1458c:	ldr	r5, [sp, #64]	; 0x40
   14590:	add	lr, sp, #8
   14594:	ldr	r4, [r5, ip, lsl #2]
   14598:	cmp	r4, #0
   1459c:	str	r4, [lr, ip, lsl #2]
   145a0:	beq	145b0 <__assert_fail@plt+0x33c0>
   145a4:	add	ip, ip, #1
   145a8:	cmp	ip, #10
   145ac:	bne	14594 <__assert_fail@plt+0x33a4>
   145b0:	str	ip, [sp, #4]
   145b4:	str	lr, [sp]
   145b8:	bl	14180 <__assert_fail@plt+0x2f90>
   145bc:	add	sp, sp, #52	; 0x34
   145c0:	pop	{r4, r5, pc}
   145c4:	push	{r3}		; (str r3, [sp, #-4]!)
   145c8:	push	{r0, r1, r2, r3, lr}
   145cc:	add	r3, sp, #24
   145d0:	str	r3, [sp, #12]
   145d4:	str	r3, [sp]
   145d8:	ldr	r3, [sp, #20]
   145dc:	bl	14580 <__assert_fail@plt+0x3390>
   145e0:	add	sp, sp, #16
   145e4:	pop	{lr}		; (ldr lr, [sp], #4)
   145e8:	add	sp, sp, #4
   145ec:	bx	lr
   145f0:	ldr	r3, [pc, #116]	; 1466c <__assert_fail@plt+0x347c>
   145f4:	push	{r4, lr}
   145f8:	mov	r0, #10
   145fc:	ldr	r1, [r3]
   14600:	bl	10f8c <fputc_unlocked@plt>
   14604:	mov	r2, #5
   14608:	ldr	r1, [pc, #96]	; 14670 <__assert_fail@plt+0x3480>
   1460c:	mov	r0, #0
   14610:	bl	10f98 <dcgettext@plt>
   14614:	ldr	r2, [pc, #88]	; 14674 <__assert_fail@plt+0x3484>
   14618:	mov	r1, r0
   1461c:	mov	r0, #1
   14620:	bl	11124 <__printf_chk@plt>
   14624:	mov	r2, #5
   14628:	ldr	r1, [pc, #72]	; 14678 <__assert_fail@plt+0x3488>
   1462c:	mov	r0, #0
   14630:	bl	10f98 <dcgettext@plt>
   14634:	ldr	r3, [pc, #64]	; 1467c <__assert_fail@plt+0x348c>
   14638:	ldr	r2, [pc, #64]	; 14680 <__assert_fail@plt+0x3490>
   1463c:	mov	r1, r0
   14640:	mov	r0, #1
   14644:	bl	11124 <__printf_chk@plt>
   14648:	mov	r2, #5
   1464c:	ldr	r1, [pc, #48]	; 14684 <__assert_fail@plt+0x3494>
   14650:	mov	r0, #0
   14654:	bl	10f98 <dcgettext@plt>
   14658:	ldr	r2, [pc, #40]	; 14688 <__assert_fail@plt+0x3498>
   1465c:	pop	{r4, lr}
   14660:	mov	r1, r0
   14664:	mov	r0, #1
   14668:	b	11124 <__printf_chk@plt>
   1466c:	andeq	r7, r2, r4, lsl #3
   14670:	strdeq	r6, [r1], -ip
   14674:	andeq	r6, r1, r0, lsl r3
   14678:	andeq	r6, r1, r6, lsr #6
   1467c:	andeq	r5, r1, pc, asr sp
   14680:	andeq	r5, r1, r7, lsl #27
   14684:	andeq	r6, r1, sl, lsr r3
   14688:	andeq	r6, r1, r1, ror #6
   1468c:	push	{r4, lr}
   14690:	bl	14ba8 <__assert_fail@plt+0x39b8>
   14694:	cmp	r0, #0
   14698:	popne	{r4, pc}
   1469c:	bl	14b20 <__assert_fail@plt+0x3930>
   146a0:	push	{r4, lr}
   146a4:	bl	14ba8 <__assert_fail@plt+0x39b8>
   146a8:	cmp	r0, #0
   146ac:	popne	{r4, pc}
   146b0:	bl	14b20 <__assert_fail@plt+0x3930>
   146b4:	b	1468c <__assert_fail@plt+0x349c>
   146b8:	push	{r4, r5, r6, lr}
   146bc:	mov	r5, r0
   146c0:	mov	r4, r1
   146c4:	bl	14be8 <__assert_fail@plt+0x39f8>
   146c8:	cmp	r0, #0
   146cc:	popne	{r4, r5, r6, pc}
   146d0:	adds	r4, r4, #0
   146d4:	movne	r4, #1
   146d8:	cmp	r5, #0
   146dc:	orreq	r4, r4, #1
   146e0:	cmp	r4, #0
   146e4:	popeq	{r4, r5, r6, pc}
   146e8:	bl	14b20 <__assert_fail@plt+0x3930>
   146ec:	push	{r4, lr}
   146f0:	cmp	r1, #0
   146f4:	orreq	r1, r1, #1
   146f8:	bl	14be8 <__assert_fail@plt+0x39f8>
   146fc:	cmp	r0, #0
   14700:	popne	{r4, pc}
   14704:	bl	14b20 <__assert_fail@plt+0x3930>
   14708:	push	{r4, r5, r6, lr}
   1470c:	mov	r6, r0
   14710:	mov	r5, r1
   14714:	mov	r4, r2
   14718:	bl	14ec4 <__assert_fail@plt+0x3cd4>
   1471c:	cmp	r0, #0
   14720:	popne	{r4, r5, r6, pc}
   14724:	cmp	r6, #0
   14728:	beq	14738 <__assert_fail@plt+0x3548>
   1472c:	cmp	r5, #0
   14730:	cmpne	r4, #0
   14734:	popeq	{r4, r5, r6, pc}
   14738:	bl	14b20 <__assert_fail@plt+0x3930>
   1473c:	b	14708 <__assert_fail@plt+0x3518>
   14740:	cmp	r2, #0
   14744:	cmpne	r1, #0
   14748:	moveq	r2, #1
   1474c:	moveq	r1, r2
   14750:	push	{r4, lr}
   14754:	bl	14ec4 <__assert_fail@plt+0x3cd4>
   14758:	cmp	r0, #0
   1475c:	popne	{r4, pc}
   14760:	bl	14b20 <__assert_fail@plt+0x3930>
   14764:	mov	r2, r1
   14768:	mov	r1, r0
   1476c:	mov	r0, #0
   14770:	b	14708 <__assert_fail@plt+0x3518>
   14774:	mov	r2, r1
   14778:	mov	r1, r0
   1477c:	mov	r0, #0
   14780:	b	14740 <__assert_fail@plt+0x3550>
   14784:	push	{r4, r5, r6, r7, r8, lr}
   14788:	subs	r7, r0, #0
   1478c:	mov	r5, r1
   14790:	mov	r6, r2
   14794:	ldr	r4, [r1]
   14798:	bne	147d4 <__assert_fail@plt+0x35e4>
   1479c:	cmp	r4, #0
   147a0:	bne	147bc <__assert_fail@plt+0x35cc>
   147a4:	mov	r1, r2
   147a8:	mov	r0, #64	; 0x40
   147ac:	bl	14f10 <__assert_fail@plt+0x3d20>
   147b0:	cmp	r0, #0
   147b4:	movne	r4, r0
   147b8:	addeq	r4, r0, #1
   147bc:	mov	r2, r6
   147c0:	mov	r1, r4
   147c4:	mov	r0, r7
   147c8:	bl	14708 <__assert_fail@plt+0x3518>
   147cc:	str	r4, [r5]
   147d0:	pop	{r4, r5, r6, r7, r8, pc}
   147d4:	lsr	r2, r4, #1
   147d8:	add	r3, r2, #1
   147dc:	mvn	r3, r3
   147e0:	cmp	r4, r3
   147e4:	addls	r4, r4, #1
   147e8:	addls	r4, r4, r2
   147ec:	bls	147bc <__assert_fail@plt+0x35cc>
   147f0:	bl	14b20 <__assert_fail@plt+0x3930>
   147f4:	mov	r2, #1
   147f8:	b	14784 <__assert_fail@plt+0x3594>
   147fc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14800:	mov	sl, r0
   14804:	ldr	r8, [r1]
   14808:	mov	fp, r1
   1480c:	mov	r5, r2
   14810:	asrs	r4, r8, #1
   14814:	mov	r9, r3
   14818:	ldr	r7, [sp, #48]	; 0x30
   1481c:	bpl	148b8 <__assert_fail@plt+0x36c8>
   14820:	rsb	r2, r4, #-2147483648	; 0x80000000
   14824:	cmp	r8, r2
   14828:	movge	r2, #0
   1482c:	movlt	r2, #1
   14830:	mvn	r3, r9
   14834:	cmp	r2, #0
   14838:	lsr	r3, r3, #31
   1483c:	addeq	r4, r4, r8
   14840:	mvnne	r4, #-2147483648	; 0x80000000
   14844:	mov	r0, r3
   14848:	cmp	r9, r4
   1484c:	movge	r0, #0
   14850:	andlt	r0, r0, #1
   14854:	cmp	r0, #0
   14858:	str	r3, [sp, #4]
   1485c:	bne	14a2c <__assert_fail@plt+0x383c>
   14860:	cmp	r7, #0
   14864:	bge	14978 <__assert_fail@plt+0x3788>
   14868:	cmp	r4, #0
   1486c:	bge	148d0 <__assert_fail@plt+0x36e0>
   14870:	mov	r1, r7
   14874:	mvn	r0, #-2147483648	; 0x80000000
   14878:	bl	1511c <__assert_fail@plt+0x3f2c>
   1487c:	cmp	r0, r4
   14880:	movle	r0, #0
   14884:	movgt	r0, #1
   14888:	cmp	r0, #0
   1488c:	mvnne	r6, #-2147483648	; 0x80000000
   14890:	beq	148e0 <__assert_fail@plt+0x36f0>
   14894:	mov	r1, r7
   14898:	mov	r0, r6
   1489c:	bl	1511c <__assert_fail@plt+0x3f2c>
   148a0:	mov	r1, r7
   148a4:	mov	r4, r0
   148a8:	mov	r0, r6
   148ac:	bl	1533c <__assert_fail@plt+0x414c>
   148b0:	sub	r1, r6, r1
   148b4:	b	148f0 <__assert_fail@plt+0x3700>
   148b8:	mvn	r2, #-2147483648	; 0x80000000
   148bc:	sub	r2, r2, r4
   148c0:	cmp	r8, r2
   148c4:	movle	r2, #0
   148c8:	movgt	r2, #1
   148cc:	b	14830 <__assert_fail@plt+0x3640>
   148d0:	cmn	r7, #1
   148d4:	movne	r1, r7
   148d8:	movne	r0, #-2147483648	; 0x80000000
   148dc:	bne	14a44 <__assert_fail@plt+0x3854>
   148e0:	mul	r1, r7, r4
   148e4:	cmp	r1, #63	; 0x3f
   148e8:	movle	r6, #64	; 0x40
   148ec:	ble	14894 <__assert_fail@plt+0x36a4>
   148f0:	cmp	sl, #0
   148f4:	sub	r2, r4, r8
   148f8:	streq	sl, [fp]
   148fc:	cmp	r2, r5
   14900:	bge	149d4 <__assert_fail@plt+0x37e4>
   14904:	cmp	r5, #0
   14908:	bge	149a0 <__assert_fail@plt+0x37b0>
   1490c:	rsb	r2, r5, #-2147483648	; 0x80000000
   14910:	cmp	r8, r2
   14914:	movge	r2, #0
   14918:	movlt	r2, #1
   1491c:	cmp	r2, #0
   14920:	bne	14974 <__assert_fail@plt+0x3784>
   14924:	ldr	r0, [sp, #4]
   14928:	add	r5, r8, r5
   1492c:	cmp	r9, r5
   14930:	movge	r0, #0
   14934:	andlt	r0, r0, #1
   14938:	cmp	r0, #0
   1493c:	mov	r4, r5
   14940:	bne	14974 <__assert_fail@plt+0x3784>
   14944:	cmp	r7, #0
   14948:	bge	149e8 <__assert_fail@plt+0x37f8>
   1494c:	cmp	r5, #0
   14950:	bge	149c0 <__assert_fail@plt+0x37d0>
   14954:	mov	r1, r7
   14958:	mvn	r0, #-2147483648	; 0x80000000
   1495c:	bl	1511c <__assert_fail@plt+0x3f2c>
   14960:	cmp	r5, r0
   14964:	movge	r0, #0
   14968:	movlt	r0, #1
   1496c:	cmp	r0, #0
   14970:	beq	149d0 <__assert_fail@plt+0x37e0>
   14974:	bl	14b20 <__assert_fail@plt+0x3930>
   14978:	beq	148e0 <__assert_fail@plt+0x36f0>
   1497c:	cmp	r4, #0
   14980:	bge	14a3c <__assert_fail@plt+0x384c>
   14984:	cmn	r4, #1
   14988:	beq	148e0 <__assert_fail@plt+0x36f0>
   1498c:	mov	r1, r4
   14990:	mov	r0, #-2147483648	; 0x80000000
   14994:	bl	1511c <__assert_fail@plt+0x3f2c>
   14998:	cmp	r7, r0
   1499c:	b	14880 <__assert_fail@plt+0x3690>
   149a0:	cmp	r8, #0
   149a4:	blt	14924 <__assert_fail@plt+0x3734>
   149a8:	mvn	r2, #-2147483648	; 0x80000000
   149ac:	sub	r2, r2, r5
   149b0:	cmp	r8, r2
   149b4:	movle	r2, #0
   149b8:	movgt	r2, #1
   149bc:	b	1491c <__assert_fail@plt+0x372c>
   149c0:	cmn	r7, #1
   149c4:	movne	r1, r7
   149c8:	movne	r0, #-2147483648	; 0x80000000
   149cc:	bne	14a20 <__assert_fail@plt+0x3830>
   149d0:	mul	r1, r5, r7
   149d4:	mov	r0, sl
   149d8:	bl	146b8 <__assert_fail@plt+0x34c8>
   149dc:	str	r4, [fp]
   149e0:	add	sp, sp, #12
   149e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149e8:	beq	149d0 <__assert_fail@plt+0x37e0>
   149ec:	cmp	r5, #0
   149f0:	movge	r1, r7
   149f4:	mvnge	r0, #-2147483648	; 0x80000000
   149f8:	bge	14a20 <__assert_fail@plt+0x3830>
   149fc:	cmn	r5, #1
   14a00:	beq	149d0 <__assert_fail@plt+0x37e0>
   14a04:	mov	r1, r5
   14a08:	mov	r0, #-2147483648	; 0x80000000
   14a0c:	bl	1511c <__assert_fail@plt+0x3f2c>
   14a10:	cmp	r7, r0
   14a14:	movle	r0, #0
   14a18:	movgt	r0, #1
   14a1c:	b	1496c <__assert_fail@plt+0x377c>
   14a20:	bl	1511c <__assert_fail@plt+0x3f2c>
   14a24:	cmp	r5, r0
   14a28:	b	14a14 <__assert_fail@plt+0x3824>
   14a2c:	cmp	r7, #0
   14a30:	mov	r4, r9
   14a34:	blt	148d0 <__assert_fail@plt+0x36e0>
   14a38:	beq	148e0 <__assert_fail@plt+0x36f0>
   14a3c:	mov	r1, r7
   14a40:	mvn	r0, #-2147483648	; 0x80000000
   14a44:	bl	1511c <__assert_fail@plt+0x3f2c>
   14a48:	cmp	r0, r4
   14a4c:	movge	r0, #0
   14a50:	movlt	r0, #1
   14a54:	b	14888 <__assert_fail@plt+0x3698>
   14a58:	push	{r4, lr}
   14a5c:	bl	14b60 <__assert_fail@plt+0x3970>
   14a60:	cmp	r0, #0
   14a64:	popne	{r4, pc}
   14a68:	bl	14b20 <__assert_fail@plt+0x3930>
   14a6c:	mov	r1, #1
   14a70:	b	14a58 <__assert_fail@plt+0x3868>
   14a74:	push	{r4, lr}
   14a78:	bl	14b60 <__assert_fail@plt+0x3970>
   14a7c:	cmp	r0, #0
   14a80:	popne	{r4, pc}
   14a84:	bl	14b20 <__assert_fail@plt+0x3930>
   14a88:	mov	r1, #1
   14a8c:	b	14a74 <__assert_fail@plt+0x3884>
   14a90:	push	{r4, r5, r6, lr}
   14a94:	mov	r4, r1
   14a98:	mov	r5, r0
   14a9c:	mov	r0, r1
   14aa0:	bl	1468c <__assert_fail@plt+0x349c>
   14aa4:	mov	r2, r4
   14aa8:	mov	r1, r5
   14aac:	pop	{r4, r5, r6, lr}
   14ab0:	b	10f50 <memcpy@plt>
   14ab4:	push	{r4, r5, r6, lr}
   14ab8:	mov	r4, r1
   14abc:	mov	r5, r0
   14ac0:	mov	r0, r1
   14ac4:	bl	146a0 <__assert_fail@plt+0x34b0>
   14ac8:	mov	r2, r4
   14acc:	mov	r1, r5
   14ad0:	pop	{r4, r5, r6, lr}
   14ad4:	b	10f50 <memcpy@plt>
   14ad8:	push	{r4, r5, r6, lr}
   14adc:	mov	r5, r0
   14ae0:	add	r0, r1, #1
   14ae4:	mov	r4, r1
   14ae8:	bl	146a0 <__assert_fail@plt+0x34b0>
   14aec:	mov	r2, #0
   14af0:	mov	r1, r5
   14af4:	strb	r2, [r0, r4]
   14af8:	mov	r2, r4
   14afc:	pop	{r4, r5, r6, lr}
   14b00:	b	10f50 <memcpy@plt>
   14b04:	push	{r4, lr}
   14b08:	mov	r4, r0
   14b0c:	bl	110d0 <strlen@plt>
   14b10:	add	r1, r0, #1
   14b14:	mov	r0, r4
   14b18:	pop	{r4, lr}
   14b1c:	b	14a90 <__assert_fail@plt+0x38a0>
   14b20:	ldr	r3, [pc, #44]	; 14b54 <__assert_fail@plt+0x3964>
   14b24:	push	{r4, lr}
   14b28:	mov	r2, #5
   14b2c:	ldr	r1, [pc, #36]	; 14b58 <__assert_fail@plt+0x3968>
   14b30:	mov	r0, #0
   14b34:	ldr	r4, [r3]
   14b38:	bl	10f98 <dcgettext@plt>
   14b3c:	ldr	r2, [pc, #24]	; 14b5c <__assert_fail@plt+0x396c>
   14b40:	mov	r1, #0
   14b44:	mov	r3, r0
   14b48:	mov	r0, r4
   14b4c:	bl	11028 <error@plt>
   14b50:	bl	111d8 <abort@plt>
   14b54:	andeq	r7, r2, ip, lsr #2
   14b58:	andeq	r6, r1, sp, lsr #7
   14b5c:	muleq	r1, r7, pc	; <UNPREDICTABLE>
   14b60:	cmp	r1, #0
   14b64:	cmpne	r0, #0
   14b68:	moveq	r1, #1
   14b6c:	moveq	r0, r1
   14b70:	umull	r2, r3, r0, r1
   14b74:	adds	r3, r3, #0
   14b78:	movne	r3, #1
   14b7c:	cmp	r2, #0
   14b80:	blt	14b90 <__assert_fail@plt+0x39a0>
   14b84:	cmp	r3, #0
   14b88:	bne	14b90 <__assert_fail@plt+0x39a0>
   14b8c:	b	10ee4 <calloc@plt>
   14b90:	push	{r4, lr}
   14b94:	bl	110e8 <__errno_location@plt>
   14b98:	mov	r3, #12
   14b9c:	str	r3, [r0]
   14ba0:	mov	r0, #0
   14ba4:	pop	{r4, pc}
   14ba8:	cmp	r0, #0
   14bac:	mov	r3, #0
   14bb0:	moveq	r0, #1
   14bb4:	adds	r3, r3, #0
   14bb8:	movne	r3, #1
   14bbc:	cmp	r0, #0
   14bc0:	blt	14bd0 <__assert_fail@plt+0x39e0>
   14bc4:	cmp	r3, #0
   14bc8:	bne	14bd0 <__assert_fail@plt+0x39e0>
   14bcc:	b	1104c <malloc@plt>
   14bd0:	push	{r4, lr}
   14bd4:	bl	110e8 <__errno_location@plt>
   14bd8:	mov	r3, #12
   14bdc:	str	r3, [r0]
   14be0:	mov	r0, #0
   14be4:	pop	{r4, pc}
   14be8:	cmp	r0, #0
   14bec:	push	{r4, lr}
   14bf0:	mov	r4, r1
   14bf4:	bne	14c04 <__assert_fail@plt+0x3a14>
   14bf8:	mov	r0, r1
   14bfc:	pop	{r4, lr}
   14c00:	b	14ba8 <__assert_fail@plt+0x39b8>
   14c04:	cmp	r1, #0
   14c08:	bne	14c18 <__assert_fail@plt+0x3a28>
   14c0c:	bl	127fc <__assert_fail@plt+0x160c>
   14c10:	mov	r0, #0
   14c14:	pop	{r4, pc}
   14c18:	cmp	r1, #0
   14c1c:	blt	14c2c <__assert_fail@plt+0x3a3c>
   14c20:	mov	r3, #0
   14c24:	cmp	r3, r3
   14c28:	beq	14c3c <__assert_fail@plt+0x3a4c>
   14c2c:	bl	110e8 <__errno_location@plt>
   14c30:	mov	r3, #12
   14c34:	str	r3, [r0]
   14c38:	b	14c10 <__assert_fail@plt+0x3a20>
   14c3c:	pop	{r4, lr}
   14c40:	b	10fbc <realloc@plt>
   14c44:	push	{r4, r5, r6, lr}
   14c48:	mov	r4, r0
   14c4c:	bl	11004 <__fpending@plt>
   14c50:	mov	r5, r0
   14c54:	mov	r0, r4
   14c58:	bl	11010 <ferror_unlocked@plt>
   14c5c:	mov	r6, r0
   14c60:	mov	r0, r4
   14c64:	bl	14cb4 <__assert_fail@plt+0x3ac4>
   14c68:	cmp	r6, #0
   14c6c:	mov	r4, r0
   14c70:	bne	14c9c <__assert_fail@plt+0x3aac>
   14c74:	cmp	r0, #0
   14c78:	beq	14c94 <__assert_fail@plt+0x3aa4>
   14c7c:	cmp	r5, #0
   14c80:	bne	14cac <__assert_fail@plt+0x3abc>
   14c84:	bl	110e8 <__errno_location@plt>
   14c88:	ldr	r4, [r0]
   14c8c:	subs	r4, r4, #9
   14c90:	mvnne	r4, #0
   14c94:	mov	r0, r4
   14c98:	pop	{r4, r5, r6, pc}
   14c9c:	cmp	r0, #0
   14ca0:	bne	14cac <__assert_fail@plt+0x3abc>
   14ca4:	bl	110e8 <__errno_location@plt>
   14ca8:	str	r4, [r0]
   14cac:	mvn	r4, #0
   14cb0:	b	14c94 <__assert_fail@plt+0x3aa4>
   14cb4:	push	{r0, r1, r2, r4, r5, lr}
   14cb8:	mov	r4, r0
   14cbc:	bl	11130 <fileno@plt>
   14cc0:	cmp	r0, #0
   14cc4:	mov	r0, r4
   14cc8:	bge	14cd8 <__assert_fail@plt+0x3ae8>
   14ccc:	add	sp, sp, #12
   14cd0:	pop	{r4, r5, lr}
   14cd4:	b	11148 <fclose@plt>
   14cd8:	bl	11070 <__freading@plt>
   14cdc:	cmp	r0, #0
   14ce0:	bne	14d1c <__assert_fail@plt+0x3b2c>
   14ce4:	mov	r0, r4
   14ce8:	bl	14d5c <__assert_fail@plt+0x3b6c>
   14cec:	cmp	r0, #0
   14cf0:	bne	14d50 <__assert_fail@plt+0x3b60>
   14cf4:	mov	r5, #0
   14cf8:	mov	r0, r4
   14cfc:	bl	11148 <fclose@plt>
   14d00:	cmp	r5, #0
   14d04:	beq	14d14 <__assert_fail@plt+0x3b24>
   14d08:	bl	110e8 <__errno_location@plt>
   14d0c:	str	r5, [r0]
   14d10:	mvn	r0, #0
   14d14:	add	sp, sp, #12
   14d18:	pop	{r4, r5, pc}
   14d1c:	mov	r0, r4
   14d20:	bl	11130 <fileno@plt>
   14d24:	mov	r3, #1
   14d28:	str	r3, [sp]
   14d2c:	mov	r2, #0
   14d30:	mov	r3, #0
   14d34:	bl	10fe0 <lseek64@plt>
   14d38:	mvn	r3, #0
   14d3c:	mvn	r2, #0
   14d40:	cmp	r1, r3
   14d44:	cmpeq	r0, r2
   14d48:	bne	14ce4 <__assert_fail@plt+0x3af4>
   14d4c:	b	14cf4 <__assert_fail@plt+0x3b04>
   14d50:	bl	110e8 <__errno_location@plt>
   14d54:	ldr	r5, [r0]
   14d58:	b	14cf8 <__assert_fail@plt+0x3b08>
   14d5c:	push	{r0, r1, r4, lr}
   14d60:	subs	r4, r0, #0
   14d64:	bne	14d78 <__assert_fail@plt+0x3b88>
   14d68:	mov	r0, r4
   14d6c:	add	sp, sp, #8
   14d70:	pop	{r4, lr}
   14d74:	b	10f14 <fflush@plt>
   14d78:	bl	11070 <__freading@plt>
   14d7c:	cmp	r0, #0
   14d80:	beq	14d68 <__assert_fail@plt+0x3b78>
   14d84:	ldr	r3, [r4]
   14d88:	tst	r3, #256	; 0x100
   14d8c:	beq	14d68 <__assert_fail@plt+0x3b78>
   14d90:	mov	r3, #1
   14d94:	str	r3, [sp]
   14d98:	mov	r2, #0
   14d9c:	mov	r3, #0
   14da0:	mov	r0, r4
   14da4:	bl	14dac <__assert_fail@plt+0x3bbc>
   14da8:	b	14d68 <__assert_fail@plt+0x3b78>
   14dac:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14db0:	mov	r4, r0
   14db4:	ldmib	r0, {ip, lr}
   14db8:	ldr	r8, [sp, #32]
   14dbc:	cmp	lr, ip
   14dc0:	bne	14e2c <__assert_fail@plt+0x3c3c>
   14dc4:	ldr	lr, [r0, #20]
   14dc8:	ldr	ip, [r0, #16]
   14dcc:	cmp	lr, ip
   14dd0:	bne	14e2c <__assert_fail@plt+0x3c3c>
   14dd4:	ldr	r5, [r0, #36]	; 0x24
   14dd8:	cmp	r5, #0
   14ddc:	bne	14e2c <__assert_fail@plt+0x3c3c>
   14de0:	mov	r6, r2
   14de4:	mov	r7, r3
   14de8:	bl	11130 <fileno@plt>
   14dec:	mov	r2, r6
   14df0:	mov	r3, r7
   14df4:	str	r8, [sp]
   14df8:	bl	10fe0 <lseek64@plt>
   14dfc:	mvn	r3, #0
   14e00:	mvn	r2, #0
   14e04:	cmp	r1, r3
   14e08:	cmpeq	r0, r2
   14e0c:	mvneq	r0, #0
   14e10:	ldrne	r3, [r4]
   14e14:	strdne	r0, [r4, #80]	; 0x50
   14e18:	movne	r0, r5
   14e1c:	bicne	r3, r3, #16
   14e20:	strne	r3, [r4]
   14e24:	add	sp, sp, #8
   14e28:	pop	{r4, r5, r6, r7, r8, pc}
   14e2c:	str	r8, [sp, #32]
   14e30:	mov	r0, r4
   14e34:	add	sp, sp, #8
   14e38:	pop	{r4, r5, r6, r7, r8, lr}
   14e3c:	b	11154 <fseeko64@plt>
   14e40:	push	{r4, lr}
   14e44:	mov	r0, #14
   14e48:	bl	11184 <nl_langinfo@plt>
   14e4c:	ldr	r3, [pc, #24]	; 14e6c <__assert_fail@plt+0x3c7c>
   14e50:	cmp	r0, #0
   14e54:	moveq	r0, r3
   14e58:	ldr	r3, [pc, #16]	; 14e70 <__assert_fail@plt+0x3c80>
   14e5c:	ldrb	r2, [r0]
   14e60:	cmp	r2, #0
   14e64:	moveq	r0, r3
   14e68:	pop	{r4, pc}
   14e6c:	andeq	r5, r1, sp, lsr #28
   14e70:			; <UNDEFINED> instruction: 0x000163be
   14e74:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14e78:	subs	r5, r0, #0
   14e7c:	addeq	r5, sp, #4
   14e80:	mov	r0, r5
   14e84:	mov	r7, r2
   14e88:	mov	r6, r1
   14e8c:	bl	1101c <mbrtowc@plt>
   14e90:	cmp	r7, #0
   14e94:	cmnne	r0, #3
   14e98:	mov	r4, r0
   14e9c:	bls	14eb8 <__assert_fail@plt+0x3cc8>
   14ea0:	mov	r0, #0
   14ea4:	bl	12850 <__assert_fail@plt+0x1660>
   14ea8:	cmp	r0, #0
   14eac:	moveq	r4, #1
   14eb0:	ldrbeq	r3, [r6]
   14eb4:	streq	r3, [r5]
   14eb8:	mov	r0, r4
   14ebc:	add	sp, sp, #12
   14ec0:	pop	{r4, r5, r6, r7, pc}
   14ec4:	push	{r4, r5, r6, lr}
   14ec8:	subs	r4, r2, #0
   14ecc:	mov	r6, r0
   14ed0:	mov	r5, r1
   14ed4:	beq	14eec <__assert_fail@plt+0x3cfc>
   14ed8:	mov	r1, r4
   14edc:	mvn	r0, #0
   14ee0:	bl	14f10 <__assert_fail@plt+0x3d20>
   14ee4:	cmp	r0, r5
   14ee8:	bcc	14efc <__assert_fail@plt+0x3d0c>
   14eec:	mul	r1, r5, r4
   14ef0:	mov	r0, r6
   14ef4:	pop	{r4, r5, r6, lr}
   14ef8:	b	14be8 <__assert_fail@plt+0x39f8>
   14efc:	bl	110e8 <__errno_location@plt>
   14f00:	mov	r3, #12
   14f04:	str	r3, [r0]
   14f08:	mov	r0, #0
   14f0c:	pop	{r4, r5, r6, pc}
   14f10:	subs	r2, r1, #1
   14f14:	bxeq	lr
   14f18:	bcc	150f0 <__assert_fail@plt+0x3f00>
   14f1c:	cmp	r0, r1
   14f20:	bls	150d4 <__assert_fail@plt+0x3ee4>
   14f24:	tst	r1, r2
   14f28:	beq	150e0 <__assert_fail@plt+0x3ef0>
   14f2c:	clz	r3, r0
   14f30:	clz	r2, r1
   14f34:	sub	r3, r2, r3
   14f38:	rsbs	r3, r3, #31
   14f3c:	addne	r3, r3, r3, lsl #1
   14f40:	mov	r2, #0
   14f44:	addne	pc, pc, r3, lsl #2
   14f48:	nop			; (mov r0, r0)
   14f4c:	cmp	r0, r1, lsl #31
   14f50:	adc	r2, r2, r2
   14f54:	subcs	r0, r0, r1, lsl #31
   14f58:	cmp	r0, r1, lsl #30
   14f5c:	adc	r2, r2, r2
   14f60:	subcs	r0, r0, r1, lsl #30
   14f64:	cmp	r0, r1, lsl #29
   14f68:	adc	r2, r2, r2
   14f6c:	subcs	r0, r0, r1, lsl #29
   14f70:	cmp	r0, r1, lsl #28
   14f74:	adc	r2, r2, r2
   14f78:	subcs	r0, r0, r1, lsl #28
   14f7c:	cmp	r0, r1, lsl #27
   14f80:	adc	r2, r2, r2
   14f84:	subcs	r0, r0, r1, lsl #27
   14f88:	cmp	r0, r1, lsl #26
   14f8c:	adc	r2, r2, r2
   14f90:	subcs	r0, r0, r1, lsl #26
   14f94:	cmp	r0, r1, lsl #25
   14f98:	adc	r2, r2, r2
   14f9c:	subcs	r0, r0, r1, lsl #25
   14fa0:	cmp	r0, r1, lsl #24
   14fa4:	adc	r2, r2, r2
   14fa8:	subcs	r0, r0, r1, lsl #24
   14fac:	cmp	r0, r1, lsl #23
   14fb0:	adc	r2, r2, r2
   14fb4:	subcs	r0, r0, r1, lsl #23
   14fb8:	cmp	r0, r1, lsl #22
   14fbc:	adc	r2, r2, r2
   14fc0:	subcs	r0, r0, r1, lsl #22
   14fc4:	cmp	r0, r1, lsl #21
   14fc8:	adc	r2, r2, r2
   14fcc:	subcs	r0, r0, r1, lsl #21
   14fd0:	cmp	r0, r1, lsl #20
   14fd4:	adc	r2, r2, r2
   14fd8:	subcs	r0, r0, r1, lsl #20
   14fdc:	cmp	r0, r1, lsl #19
   14fe0:	adc	r2, r2, r2
   14fe4:	subcs	r0, r0, r1, lsl #19
   14fe8:	cmp	r0, r1, lsl #18
   14fec:	adc	r2, r2, r2
   14ff0:	subcs	r0, r0, r1, lsl #18
   14ff4:	cmp	r0, r1, lsl #17
   14ff8:	adc	r2, r2, r2
   14ffc:	subcs	r0, r0, r1, lsl #17
   15000:	cmp	r0, r1, lsl #16
   15004:	adc	r2, r2, r2
   15008:	subcs	r0, r0, r1, lsl #16
   1500c:	cmp	r0, r1, lsl #15
   15010:	adc	r2, r2, r2
   15014:	subcs	r0, r0, r1, lsl #15
   15018:	cmp	r0, r1, lsl #14
   1501c:	adc	r2, r2, r2
   15020:	subcs	r0, r0, r1, lsl #14
   15024:	cmp	r0, r1, lsl #13
   15028:	adc	r2, r2, r2
   1502c:	subcs	r0, r0, r1, lsl #13
   15030:	cmp	r0, r1, lsl #12
   15034:	adc	r2, r2, r2
   15038:	subcs	r0, r0, r1, lsl #12
   1503c:	cmp	r0, r1, lsl #11
   15040:	adc	r2, r2, r2
   15044:	subcs	r0, r0, r1, lsl #11
   15048:	cmp	r0, r1, lsl #10
   1504c:	adc	r2, r2, r2
   15050:	subcs	r0, r0, r1, lsl #10
   15054:	cmp	r0, r1, lsl #9
   15058:	adc	r2, r2, r2
   1505c:	subcs	r0, r0, r1, lsl #9
   15060:	cmp	r0, r1, lsl #8
   15064:	adc	r2, r2, r2
   15068:	subcs	r0, r0, r1, lsl #8
   1506c:	cmp	r0, r1, lsl #7
   15070:	adc	r2, r2, r2
   15074:	subcs	r0, r0, r1, lsl #7
   15078:	cmp	r0, r1, lsl #6
   1507c:	adc	r2, r2, r2
   15080:	subcs	r0, r0, r1, lsl #6
   15084:	cmp	r0, r1, lsl #5
   15088:	adc	r2, r2, r2
   1508c:	subcs	r0, r0, r1, lsl #5
   15090:	cmp	r0, r1, lsl #4
   15094:	adc	r2, r2, r2
   15098:	subcs	r0, r0, r1, lsl #4
   1509c:	cmp	r0, r1, lsl #3
   150a0:	adc	r2, r2, r2
   150a4:	subcs	r0, r0, r1, lsl #3
   150a8:	cmp	r0, r1, lsl #2
   150ac:	adc	r2, r2, r2
   150b0:	subcs	r0, r0, r1, lsl #2
   150b4:	cmp	r0, r1, lsl #1
   150b8:	adc	r2, r2, r2
   150bc:	subcs	r0, r0, r1, lsl #1
   150c0:	cmp	r0, r1
   150c4:	adc	r2, r2, r2
   150c8:	subcs	r0, r0, r1
   150cc:	mov	r0, r2
   150d0:	bx	lr
   150d4:	moveq	r0, #1
   150d8:	movne	r0, #0
   150dc:	bx	lr
   150e0:	clz	r2, r1
   150e4:	rsb	r2, r2, #31
   150e8:	lsr	r0, r0, r2
   150ec:	bx	lr
   150f0:	cmp	r0, #0
   150f4:	mvnne	r0, #0
   150f8:	b	15430 <__assert_fail@plt+0x4240>
   150fc:	cmp	r1, #0
   15100:	beq	150f0 <__assert_fail@plt+0x3f00>
   15104:	push	{r0, r1, lr}
   15108:	bl	14f10 <__assert_fail@plt+0x3d20>
   1510c:	pop	{r1, r2, lr}
   15110:	mul	r3, r2, r0
   15114:	sub	r1, r1, r3
   15118:	bx	lr
   1511c:	cmp	r1, #0
   15120:	beq	1532c <__assert_fail@plt+0x413c>
   15124:	eor	ip, r0, r1
   15128:	rsbmi	r1, r1, #0
   1512c:	subs	r2, r1, #1
   15130:	beq	152f8 <__assert_fail@plt+0x4108>
   15134:	movs	r3, r0
   15138:	rsbmi	r3, r0, #0
   1513c:	cmp	r3, r1
   15140:	bls	15304 <__assert_fail@plt+0x4114>
   15144:	tst	r1, r2
   15148:	beq	15314 <__assert_fail@plt+0x4124>
   1514c:	clz	r2, r3
   15150:	clz	r0, r1
   15154:	sub	r2, r0, r2
   15158:	rsbs	r2, r2, #31
   1515c:	addne	r2, r2, r2, lsl #1
   15160:	mov	r0, #0
   15164:	addne	pc, pc, r2, lsl #2
   15168:	nop			; (mov r0, r0)
   1516c:	cmp	r3, r1, lsl #31
   15170:	adc	r0, r0, r0
   15174:	subcs	r3, r3, r1, lsl #31
   15178:	cmp	r3, r1, lsl #30
   1517c:	adc	r0, r0, r0
   15180:	subcs	r3, r3, r1, lsl #30
   15184:	cmp	r3, r1, lsl #29
   15188:	adc	r0, r0, r0
   1518c:	subcs	r3, r3, r1, lsl #29
   15190:	cmp	r3, r1, lsl #28
   15194:	adc	r0, r0, r0
   15198:	subcs	r3, r3, r1, lsl #28
   1519c:	cmp	r3, r1, lsl #27
   151a0:	adc	r0, r0, r0
   151a4:	subcs	r3, r3, r1, lsl #27
   151a8:	cmp	r3, r1, lsl #26
   151ac:	adc	r0, r0, r0
   151b0:	subcs	r3, r3, r1, lsl #26
   151b4:	cmp	r3, r1, lsl #25
   151b8:	adc	r0, r0, r0
   151bc:	subcs	r3, r3, r1, lsl #25
   151c0:	cmp	r3, r1, lsl #24
   151c4:	adc	r0, r0, r0
   151c8:	subcs	r3, r3, r1, lsl #24
   151cc:	cmp	r3, r1, lsl #23
   151d0:	adc	r0, r0, r0
   151d4:	subcs	r3, r3, r1, lsl #23
   151d8:	cmp	r3, r1, lsl #22
   151dc:	adc	r0, r0, r0
   151e0:	subcs	r3, r3, r1, lsl #22
   151e4:	cmp	r3, r1, lsl #21
   151e8:	adc	r0, r0, r0
   151ec:	subcs	r3, r3, r1, lsl #21
   151f0:	cmp	r3, r1, lsl #20
   151f4:	adc	r0, r0, r0
   151f8:	subcs	r3, r3, r1, lsl #20
   151fc:	cmp	r3, r1, lsl #19
   15200:	adc	r0, r0, r0
   15204:	subcs	r3, r3, r1, lsl #19
   15208:	cmp	r3, r1, lsl #18
   1520c:	adc	r0, r0, r0
   15210:	subcs	r3, r3, r1, lsl #18
   15214:	cmp	r3, r1, lsl #17
   15218:	adc	r0, r0, r0
   1521c:	subcs	r3, r3, r1, lsl #17
   15220:	cmp	r3, r1, lsl #16
   15224:	adc	r0, r0, r0
   15228:	subcs	r3, r3, r1, lsl #16
   1522c:	cmp	r3, r1, lsl #15
   15230:	adc	r0, r0, r0
   15234:	subcs	r3, r3, r1, lsl #15
   15238:	cmp	r3, r1, lsl #14
   1523c:	adc	r0, r0, r0
   15240:	subcs	r3, r3, r1, lsl #14
   15244:	cmp	r3, r1, lsl #13
   15248:	adc	r0, r0, r0
   1524c:	subcs	r3, r3, r1, lsl #13
   15250:	cmp	r3, r1, lsl #12
   15254:	adc	r0, r0, r0
   15258:	subcs	r3, r3, r1, lsl #12
   1525c:	cmp	r3, r1, lsl #11
   15260:	adc	r0, r0, r0
   15264:	subcs	r3, r3, r1, lsl #11
   15268:	cmp	r3, r1, lsl #10
   1526c:	adc	r0, r0, r0
   15270:	subcs	r3, r3, r1, lsl #10
   15274:	cmp	r3, r1, lsl #9
   15278:	adc	r0, r0, r0
   1527c:	subcs	r3, r3, r1, lsl #9
   15280:	cmp	r3, r1, lsl #8
   15284:	adc	r0, r0, r0
   15288:	subcs	r3, r3, r1, lsl #8
   1528c:	cmp	r3, r1, lsl #7
   15290:	adc	r0, r0, r0
   15294:	subcs	r3, r3, r1, lsl #7
   15298:	cmp	r3, r1, lsl #6
   1529c:	adc	r0, r0, r0
   152a0:	subcs	r3, r3, r1, lsl #6
   152a4:	cmp	r3, r1, lsl #5
   152a8:	adc	r0, r0, r0
   152ac:	subcs	r3, r3, r1, lsl #5
   152b0:	cmp	r3, r1, lsl #4
   152b4:	adc	r0, r0, r0
   152b8:	subcs	r3, r3, r1, lsl #4
   152bc:	cmp	r3, r1, lsl #3
   152c0:	adc	r0, r0, r0
   152c4:	subcs	r3, r3, r1, lsl #3
   152c8:	cmp	r3, r1, lsl #2
   152cc:	adc	r0, r0, r0
   152d0:	subcs	r3, r3, r1, lsl #2
   152d4:	cmp	r3, r1, lsl #1
   152d8:	adc	r0, r0, r0
   152dc:	subcs	r3, r3, r1, lsl #1
   152e0:	cmp	r3, r1
   152e4:	adc	r0, r0, r0
   152e8:	subcs	r3, r3, r1
   152ec:	cmp	ip, #0
   152f0:	rsbmi	r0, r0, #0
   152f4:	bx	lr
   152f8:	teq	ip, r0
   152fc:	rsbmi	r0, r0, #0
   15300:	bx	lr
   15304:	movcc	r0, #0
   15308:	asreq	r0, ip, #31
   1530c:	orreq	r0, r0, #1
   15310:	bx	lr
   15314:	clz	r2, r1
   15318:	rsb	r2, r2, #31
   1531c:	cmp	ip, #0
   15320:	lsr	r0, r3, r2
   15324:	rsbmi	r0, r0, #0
   15328:	bx	lr
   1532c:	cmp	r0, #0
   15330:	mvngt	r0, #-2147483648	; 0x80000000
   15334:	movlt	r0, #-2147483648	; 0x80000000
   15338:	b	15430 <__assert_fail@plt+0x4240>
   1533c:	cmp	r1, #0
   15340:	beq	1532c <__assert_fail@plt+0x413c>
   15344:	push	{r0, r1, lr}
   15348:	bl	15124 <__assert_fail@plt+0x3f34>
   1534c:	pop	{r1, r2, lr}
   15350:	mul	r3, r2, r0
   15354:	sub	r1, r1, r3
   15358:	bx	lr
   1535c:	cmp	r3, #0
   15360:	cmpeq	r2, #0
   15364:	bne	15388 <__assert_fail@plt+0x4198>
   15368:	cmp	r1, #0
   1536c:	movlt	r1, #-2147483648	; 0x80000000
   15370:	movlt	r0, #0
   15374:	blt	15384 <__assert_fail@plt+0x4194>
   15378:	cmpeq	r0, #0
   1537c:	mvnne	r1, #-2147483648	; 0x80000000
   15380:	mvnne	r0, #0
   15384:	b	15430 <__assert_fail@plt+0x4240>
   15388:	sub	sp, sp, #8
   1538c:	push	{sp, lr}
   15390:	cmp	r1, #0
   15394:	blt	153b4 <__assert_fail@plt+0x41c4>
   15398:	cmp	r3, #0
   1539c:	blt	153e8 <__assert_fail@plt+0x41f8>
   153a0:	bl	15440 <__assert_fail@plt+0x4250>
   153a4:	ldr	lr, [sp, #4]
   153a8:	add	sp, sp, #8
   153ac:	pop	{r2, r3}
   153b0:	bx	lr
   153b4:	rsbs	r0, r0, #0
   153b8:	sbc	r1, r1, r1, lsl #1
   153bc:	cmp	r3, #0
   153c0:	blt	1540c <__assert_fail@plt+0x421c>
   153c4:	bl	15440 <__assert_fail@plt+0x4250>
   153c8:	ldr	lr, [sp, #4]
   153cc:	add	sp, sp, #8
   153d0:	pop	{r2, r3}
   153d4:	rsbs	r0, r0, #0
   153d8:	sbc	r1, r1, r1, lsl #1
   153dc:	rsbs	r2, r2, #0
   153e0:	sbc	r3, r3, r3, lsl #1
   153e4:	bx	lr
   153e8:	rsbs	r2, r2, #0
   153ec:	sbc	r3, r3, r3, lsl #1
   153f0:	bl	15440 <__assert_fail@plt+0x4250>
   153f4:	ldr	lr, [sp, #4]
   153f8:	add	sp, sp, #8
   153fc:	pop	{r2, r3}
   15400:	rsbs	r0, r0, #0
   15404:	sbc	r1, r1, r1, lsl #1
   15408:	bx	lr
   1540c:	rsbs	r2, r2, #0
   15410:	sbc	r3, r3, r3, lsl #1
   15414:	bl	15440 <__assert_fail@plt+0x4250>
   15418:	ldr	lr, [sp, #4]
   1541c:	add	sp, sp, #8
   15420:	pop	{r2, r3}
   15424:	rsbs	r2, r2, #0
   15428:	sbc	r3, r3, r3, lsl #1
   1542c:	bx	lr
   15430:	push	{r1, lr}
   15434:	mov	r0, #8
   15438:	bl	10efc <raise@plt>
   1543c:	pop	{r1, pc}
   15440:	cmp	r1, r3
   15444:	push	{r4, r5, r6, r7, r8, r9, lr}
   15448:	cmpeq	r0, r2
   1544c:	mov	r4, r0
   15450:	mov	r5, r1
   15454:	ldr	r9, [sp, #28]
   15458:	movcc	r0, #0
   1545c:	movcc	r1, #0
   15460:	bcc	15558 <__assert_fail@plt+0x4368>
   15464:	cmp	r3, #0
   15468:	clzeq	ip, r2
   1546c:	clzne	ip, r3
   15470:	addeq	ip, ip, #32
   15474:	cmp	r5, #0
   15478:	clzeq	r1, r4
   1547c:	addeq	r1, r1, #32
   15480:	clzne	r1, r5
   15484:	sub	ip, ip, r1
   15488:	sub	lr, ip, #32
   1548c:	lsl	r7, r3, ip
   15490:	rsb	r8, ip, #32
   15494:	orr	r7, r7, r2, lsl lr
   15498:	orr	r7, r7, r2, lsr r8
   1549c:	lsl	r6, r2, ip
   154a0:	cmp	r5, r7
   154a4:	cmpeq	r4, r6
   154a8:	movcc	r0, #0
   154ac:	movcc	r1, #0
   154b0:	bcc	154cc <__assert_fail@plt+0x42dc>
   154b4:	mov	r3, #1
   154b8:	subs	r4, r4, r6
   154bc:	lsl	r1, r3, lr
   154c0:	lsl	r0, r3, ip
   154c4:	orr	r1, r1, r3, lsr r8
   154c8:	sbc	r5, r5, r7
   154cc:	cmp	ip, #0
   154d0:	beq	15558 <__assert_fail@plt+0x4368>
   154d4:	lsrs	r3, r7, #1
   154d8:	rrx	r2, r6
   154dc:	mov	r6, ip
   154e0:	b	15504 <__assert_fail@plt+0x4314>
   154e4:	subs	r4, r4, r2
   154e8:	sbc	r5, r5, r3
   154ec:	adds	r4, r4, r4
   154f0:	adc	r5, r5, r5
   154f4:	adds	r4, r4, #1
   154f8:	adc	r5, r5, #0
   154fc:	subs	r6, r6, #1
   15500:	beq	15520 <__assert_fail@plt+0x4330>
   15504:	cmp	r5, r3
   15508:	cmpeq	r4, r2
   1550c:	bcs	154e4 <__assert_fail@plt+0x42f4>
   15510:	adds	r4, r4, r4
   15514:	adc	r5, r5, r5
   15518:	subs	r6, r6, #1
   1551c:	bne	15504 <__assert_fail@plt+0x4314>
   15520:	lsr	r6, r4, ip
   15524:	lsr	r7, r5, ip
   15528:	orr	r6, r6, r5, lsl r8
   1552c:	adds	r2, r0, r4
   15530:	orr	r6, r6, r5, lsr lr
   15534:	adc	r3, r1, r5
   15538:	lsl	r1, r7, ip
   1553c:	orr	r1, r1, r6, lsl lr
   15540:	lsl	r0, r6, ip
   15544:	orr	r1, r1, r6, lsr r8
   15548:	subs	r0, r2, r0
   1554c:	mov	r4, r6
   15550:	mov	r5, r7
   15554:	sbc	r1, r3, r1
   15558:	cmp	r9, #0
   1555c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   15560:	strd	r4, [r9]
   15564:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15568:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1556c:	mov	r7, r0
   15570:	ldr	r6, [pc, #72]	; 155c0 <__assert_fail@plt+0x43d0>
   15574:	ldr	r5, [pc, #72]	; 155c4 <__assert_fail@plt+0x43d4>
   15578:	add	r6, pc, r6
   1557c:	add	r5, pc, r5
   15580:	sub	r6, r6, r5
   15584:	mov	r8, r1
   15588:	mov	r9, r2
   1558c:	bl	10ec4 <calloc@plt-0x20>
   15590:	asrs	r6, r6, #2
   15594:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15598:	mov	r4, #0
   1559c:	add	r4, r4, #1
   155a0:	ldr	r3, [r5], #4
   155a4:	mov	r2, r9
   155a8:	mov	r1, r8
   155ac:	mov	r0, r7
   155b0:	blx	r3
   155b4:	cmp	r6, r4
   155b8:	bne	1559c <__assert_fail@plt+0x43ac>
   155bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155c0:	muleq	r1, r0, r9
   155c4:	andeq	r1, r1, r8, lsl #19
   155c8:	bx	lr
   155cc:	ldr	r3, [pc, #12]	; 155e0 <__assert_fail@plt+0x43f0>
   155d0:	mov	r1, #0
   155d4:	add	r3, pc, r3
   155d8:	ldr	r2, [r3]
   155dc:	b	11100 <__cxa_atexit@plt>
   155e0:	andeq	r1, r1, r0, asr #22
   155e4:	mov	r2, r1
   155e8:	mov	r1, r0
   155ec:	mov	r0, #3
   155f0:	b	111b4 <__xstat64@plt>

Disassembly of section .fini:

000155f4 <.fini>:
   155f4:	push	{r3, lr}
   155f8:	pop	{r3, pc}
