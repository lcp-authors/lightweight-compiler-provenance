
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004c24 <_init>:
    4c24:	push	{r3, lr}
    4c28:	bl	5570 <call_weak_fn>
    4c2c:	pop	{r3, pc}

Disassembly of section .plt:

00004c30 <.plt>:
    4c30:	push	{lr}		; (str lr, [sp, #-4]!)
    4c34:	ldr	lr, [pc, #4]	; 4c40 <.plt+0x10>
    4c38:	add	lr, pc, lr
    4c3c:	ldr	pc, [lr, #8]!
    4c40:	.word	0x000283c0

00004c44 <rb_helper_run@plt>:
    4c44:	add	ip, pc, #0, 12
    4c48:	add	ip, ip, #40, 20	; 0x28000
    4c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00004c50 <TLS_method@plt>:
    4c50:	add	ip, pc, #0, 12
    4c54:	add	ip, ip, #40, 20	; 0x28000
    4c58:	ldr	pc, [ip, #952]!	; 0x3b8

00004c5c <open@plt>:
    4c5c:	add	ip, pc, #0, 12
    4c60:	add	ip, ip, #40, 20	; 0x28000
    4c64:	ldr	pc, [ip, #944]!	; 0x3b0

00004c68 <rb_init_netio@plt>:
    4c68:	add	ip, pc, #0, 12
    4c6c:	add	ip, ip, #40, 20	; 0x28000
    4c70:	ldr	pc, [ip, #936]!	; 0x3a8

00004c74 <sigemptyset@plt>:
    4c74:	add	ip, pc, #0, 12
    4c78:	add	ip, ip, #40, 20	; 0x28000
    4c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00004c80 <strerror@plt>:
    4c80:	add	ip, pc, #0, 12
    4c84:	add	ip, ip, #40, 20	; 0x28000
    4c88:	ldr	pc, [ip, #920]!	; 0x398

00004c8c <rb_radixtree_elem_delete@plt>:
    4c8c:	add	ip, pc, #0, 12
    4c90:	add	ip, ip, #40, 20	; 0x28000
    4c94:	ldr	pc, [ip, #912]!	; 0x390

00004c98 <getdtablesize@plt>:
    4c98:	add	ip, pc, #0, 12
    4c9c:	add	ip, ip, #40, 20	; 0x28000
    4ca0:	ldr	pc, [ip, #904]!	; 0x388

00004ca4 <abort@plt>:
    4ca4:	add	ip, pc, #0, 12
    4ca8:	add	ip, ip, #40, 20	; 0x28000
    4cac:	ldr	pc, [ip, #896]!	; 0x380

00004cb0 <connect@plt>:
    4cb0:	add	ip, pc, #0, 12
    4cb4:	add	ip, ip, #40, 20	; 0x28000
    4cb8:	ldr	pc, [ip, #888]!	; 0x378

00004cbc <rb_ignore_errno@plt>:
    4cbc:	add	ip, pc, #0, 12
    4cc0:	add	ip, ip, #40, 20	; 0x28000
    4cc4:	ldr	pc, [ip, #880]!	; 0x370

00004cc8 <rb_settimeout@plt>:
    4cc8:	add	ip, pc, #0, 12
    4ccc:	add	ip, ip, #40, 20	; 0x28000
    4cd0:	ldr	pc, [ip, #872]!	; 0x368

00004cd4 <SSL_CTX_set_cipher_list@plt>:
    4cd4:	add	ip, pc, #0, 12
    4cd8:	add	ip, ip, #40, 20	; 0x28000
    4cdc:	ldr	pc, [ip, #864]!	; 0x360

00004ce0 <ERR_get_error@plt>:
    4ce0:	add	ip, pc, #0, 12
    4ce4:	add	ip, ip, #40, 20	; 0x28000
    4ce8:	ldr	pc, [ip, #856]!	; 0x358

00004cec <rb_radixtree_foreach_start@plt>:
    4cec:	add	ip, pc, #0, 12
    4cf0:	add	ip, ip, #40, 20	; 0x28000
    4cf4:	ldr	pc, [ip, #848]!	; 0x350

00004cf8 <strcasestr@plt>:
    4cf8:	add	ip, pc, #0, 12
    4cfc:	add	ip, ip, #40, 20	; 0x28000
    4d00:	ldr	pc, [ip, #840]!	; 0x348

00004d04 <rb_connect_tcp@plt>:
    4d04:	add	ip, pc, #0, 12
    4d08:	add	ip, ip, #40, 20	; 0x28000
    4d0c:	ldr	pc, [ip, #832]!	; 0x340

00004d10 <RAND_load_file@plt>:
    4d10:	add	ip, pc, #0, 12
    4d14:	add	ip, ip, #40, 20	; 0x28000
    4d18:	ldr	pc, [ip, #824]!	; 0x338

00004d1c <signalfd@plt>:
    4d1c:	add	ip, pc, #0, 12
    4d20:	add	ip, ip, #40, 20	; 0x28000
    4d24:	ldr	pc, [ip, #816]!	; 0x330

00004d28 <SSL_CTX_free@plt>:
    4d28:	add	ip, pc, #0, 12
    4d2c:	add	ip, ip, #40, 20	; 0x28000
    4d30:	ldr	pc, [ip, #808]!	; 0x328

00004d34 <rb_getmaxconnect@plt>:
    4d34:	add	ip, pc, #0, 12
    4d38:	add	ip, ip, #40, 20	; 0x28000
    4d3c:	ldr	pc, [ip, #800]!	; 0x320

00004d40 <sigwaitinfo@plt>:
    4d40:	add	ip, pc, #0, 12
    4d44:	add	ip, ip, #40, 20	; 0x28000
    4d48:	ldr	pc, [ip, #792]!	; 0x318

00004d4c <__libc_current_sigrtmin@plt>:
    4d4c:	add	ip, pc, #0, 12
    4d50:	add	ip, ip, #40, 20	; 0x28000
    4d54:	ldr	pc, [ip, #784]!	; 0x310

00004d58 <__xstat@plt>:
    4d58:	add	ip, pc, #0, 12
    4d5c:	add	ip, ip, #40, 20	; 0x28000
    4d60:	ldr	pc, [ip, #776]!	; 0x308

00004d64 <rb_event_delete@plt>:
    4d64:	add	ip, pc, #0, 12
    4d68:	add	ip, ip, #40, 20	; 0x28000
    4d6c:	ldr	pc, [ip, #768]!	; 0x300

00004d70 <rb_setselect@plt>:
    4d70:	add	ip, pc, #0, 12
    4d74:	add	ip, ip, #40, 20	; 0x28000
    4d78:	ldr	pc, [ip, #760]!	; 0x2f8

00004d7c <rb_fd_ssl@plt>:
    4d7c:	add	ip, pc, #0, 12
    4d80:	add	ip, ip, #40, 20	; 0x28000
    4d84:	ldr	pc, [ip, #752]!	; 0x2f0

00004d88 <sigtimedwait@plt>:
    4d88:	add	ip, pc, #0, 12
    4d8c:	add	ip, ip, #40, 20	; 0x28000
    4d90:	ldr	pc, [ip, #744]!	; 0x2e8

00004d94 <rb_setenv@plt>:
    4d94:	add	ip, pc, #0, 12
    4d98:	add	ip, ip, #40, 20	; 0x28000
    4d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00004da0 <signal@plt>:
    4da0:	add	ip, pc, #0, 12
    4da4:	add	ip, ip, #40, 20	; 0x28000
    4da8:	ldr	pc, [ip, #728]!	; 0x2d8

00004dac <rb_get_fd@plt>:
    4dac:	add	ip, pc, #0, 12
    4db0:	add	ip, ip, #40, 20	; 0x28000
    4db4:	ldr	pc, [ip, #720]!	; 0x2d0

00004db8 <epoll_create@plt>:
    4db8:	add	ip, pc, #0, 12
    4dbc:	add	ip, ip, #40, 20	; 0x28000
    4dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00004dc4 <rb_clear_patricia@plt>:
    4dc4:	add	ip, pc, #0, 12
    4dc8:	add	ip, ip, #40, 20	; 0x28000
    4dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00004dd0 <__gmon_start__@plt>:
    4dd0:	add	ip, pc, #0, 12
    4dd4:	add	ip, ip, #40, 20	; 0x28000
    4dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00004ddc <SSL_CTX_clear_options@plt>:
    4ddc:	add	ip, pc, #0, 12
    4de0:	add	ip, ip, #40, 20	; 0x28000
    4de4:	ldr	pc, [ip, #688]!	; 0x2b0

00004de8 <SSL_get_current_cipher@plt>:
    4de8:	add	ip, pc, #0, 12
    4dec:	add	ip, ip, #40, 20	; 0x28000
    4df0:	ldr	pc, [ip, #680]!	; 0x2a8

00004df4 <timer_create@plt>:
    4df4:	add	ip, pc, #0, 12
    4df8:	add	ip, ip, #40, 20	; 0x28000
    4dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00004e00 <X509_get_X509_PUBKEY@plt>:
    4e00:	add	ip, pc, #0, 12
    4e04:	add	ip, ip, #40, 20	; 0x28000
    4e08:	ldr	pc, [ip, #664]!	; 0x298

00004e0c <rb_select@plt>:
    4e0c:	add	ip, pc, #0, 12
    4e10:	add	ip, ip, #40, 20	; 0x28000
    4e14:	ldr	pc, [ip, #656]!	; 0x290

00004e18 <vsnprintf@plt>:
    4e18:	add	ip, pc, #0, 12
    4e1c:	add	ip, ip, #40, 20	; 0x28000
    4e20:	ldr	pc, [ip, #648]!	; 0x288

00004e24 <socketpair@plt>:
    4e24:	add	ip, pc, #0, 12
    4e28:	add	ip, ip, #40, 20	; 0x28000
    4e2c:	ldr	pc, [ip, #640]!	; 0x280

00004e30 <strncpy@plt>:
    4e30:	add	ip, pc, #0, 12
    4e34:	add	ip, ip, #40, 20	; 0x28000
    4e38:	ldr	pc, [ip, #632]!	; 0x278

00004e3c <fclose@plt>:
    4e3c:	add	ip, pc, #0, 12
    4e40:	add	ip, ip, #40, 20	; 0x28000
    4e44:	ldr	pc, [ip, #624]!	; 0x270

00004e48 <recv@plt>:
    4e48:	add	ip, pc, #0, 12
    4e4c:	add	ip, ip, #40, 20	; 0x28000
    4e50:	ldr	pc, [ip, #616]!	; 0x268

00004e54 <getenv@plt>:
    4e54:	add	ip, pc, #0, 12
    4e58:	add	ip, ip, #40, 20	; 0x28000
    4e5c:	ldr	pc, [ip, #608]!	; 0x260

00004e60 <ERR_error_string_n@plt>:
    4e60:	add	ip, pc, #0, 12
    4e64:	add	ip, ip, #40, 20	; 0x28000
    4e68:	ldr	pc, [ip, #600]!	; 0x258

00004e6c <strchr@plt>:
    4e6c:	add	ip, pc, #0, 12
    4e70:	add	ip, ip, #40, 20	; 0x28000
    4e74:	ldr	pc, [ip, #592]!	; 0x250

00004e78 <rb_gettimeofday@plt>:
    4e78:	add	ip, pc, #0, 12
    4e7c:	add	ip, ip, #40, 20	; 0x28000
    4e80:	ldr	pc, [ip, #584]!	; 0x248

00004e84 <strcasecmp@plt>:
    4e84:	add	ip, pc, #0, 12
    4e88:	add	ip, ip, #40, 20	; 0x28000
    4e8c:	ldr	pc, [ip, #576]!	; 0x240

00004e90 <listen@plt>:
    4e90:	add	ip, pc, #0, 12
    4e94:	add	ip, ip, #40, 20	; 0x28000
    4e98:	ldr	pc, [ip, #568]!	; 0x238

00004e9c <calloc@plt>:
    4e9c:	add	ip, pc, #0, 12
    4ea0:	add	ip, ip, #40, 20	; 0x28000
    4ea4:	ldr	pc, [ip, #560]!	; 0x230

00004ea8 <SSL_write@plt>:
    4ea8:	add	ip, pc, #0, 12
    4eac:	add	ip, ip, #40, 20	; 0x28000
    4eb0:	ldr	pc, [ip, #552]!	; 0x228

00004eb4 <rb_event_init@plt>:
    4eb4:	add	ip, pc, #0, 12
    4eb8:	add	ip, ip, #40, 20	; 0x28000
    4ebc:	ldr	pc, [ip, #544]!	; 0x220

00004ec0 <fopen@plt>:
    4ec0:	add	ip, pc, #0, 12
    4ec4:	add	ip, ip, #40, 20	; 0x28000
    4ec8:	ldr	pc, [ip, #536]!	; 0x218

00004ecc <rb_set_nb@plt>:
    4ecc:	add	ip, pc, #0, 12
    4ed0:	add	ip, ip, #40, 20	; 0x28000
    4ed4:	ldr	pc, [ip, #528]!	; 0x210

00004ed8 <memset@plt>:
    4ed8:	add	ip, pc, #0, 12
    4edc:	add	ip, ip, #40, 20	; 0x28000
    4ee0:	ldr	pc, [ip, #520]!	; 0x208

00004ee4 <rb_inet_pton@plt>:
    4ee4:	add	ip, pc, #0, 12
    4ee8:	add	ip, ip, #40, 20	; 0x28000
    4eec:	ldr	pc, [ip, #512]!	; 0x200

00004ef0 <strrchr@plt>:
    4ef0:	add	ip, pc, #0, 12
    4ef4:	add	ip, ip, #40, 20	; 0x28000
    4ef8:	ldr	pc, [ip, #504]!	; 0x1f8

00004efc <rb_write@plt>:
    4efc:	add	ip, pc, #0, 12
    4f00:	add	ip, ip, #40, 20	; 0x28000
    4f04:	ldr	pc, [ip, #496]!	; 0x1f0

00004f08 <SSL_set_fd@plt>:
    4f08:	add	ip, pc, #0, 12
    4f0c:	add	ip, ip, #40, 20	; 0x28000
    4f10:	ldr	pc, [ip, #488]!	; 0x1e8

00004f14 <SSL_CTX_ctrl@plt>:
    4f14:	add	ip, pc, #0, 12
    4f18:	add	ip, ip, #40, 20	; 0x28000
    4f1c:	ldr	pc, [ip, #480]!	; 0x1e0

00004f20 <rb_linebuf_parse@plt>:
    4f20:	add	ip, pc, #0, 12
    4f24:	add	ip, ip, #40, 20	; 0x28000
    4f28:	ldr	pc, [ip, #472]!	; 0x1d8

00004f2c <writev@plt>:
    4f2c:	add	ip, pc, #0, 12
    4f30:	add	ip, ip, #40, 20	; 0x28000
    4f34:	ldr	pc, [ip, #464]!	; 0x1d0

00004f38 <rb_fsnprint@plt>:
    4f38:	add	ip, pc, #0, 12
    4f3c:	add	ip, ip, #40, 20	; 0x28000
    4f40:	ldr	pc, [ip, #456]!	; 0x1c8

00004f44 <rb_strlcpy@plt>:
    4f44:	add	ip, pc, #0, 12
    4f48:	add	ip, ip, #40, 20	; 0x28000
    4f4c:	ldr	pc, [ip, #448]!	; 0x1c0

00004f50 <rb_patricia_search_best2@plt>:
    4f50:	add	ip, pc, #0, 12
    4f54:	add	ip, ip, #40, 20	; 0x28000
    4f58:	ldr	pc, [ip, #440]!	; 0x1b8

00004f5c <SSL_CIPHER_get_name@plt>:
    4f5c:	add	ip, pc, #0, 12
    4f60:	add	ip, ip, #40, 20	; 0x28000
    4f64:	ldr	pc, [ip, #432]!	; 0x1b0

00004f68 <posix_spawnattr_init@plt>:
    4f68:	add	ip, pc, #0, 12
    4f6c:	add	ip, ip, #40, 20	; 0x28000
    4f70:	ldr	pc, [ip, #424]!	; 0x1a8

00004f74 <OpenSSL_version_num@plt>:
    4f74:	add	ip, pc, #0, 12
    4f78:	add	ip, ip, #40, 20	; 0x28000
    4f7c:	ldr	pc, [ip, #416]!	; 0x1a0

00004f80 <rb_kill@plt>:
    4f80:	add	ip, pc, #0, 12
    4f84:	add	ip, ip, #40, 20	; 0x28000
    4f88:	ldr	pc, [ip, #408]!	; 0x198

00004f8c <free@plt>:
    4f8c:	add	ip, pc, #0, 12
    4f90:	add	ip, ip, #40, 20	; 0x28000
    4f94:	ldr	pc, [ip, #400]!	; 0x190

00004f98 <sendmsg@plt>:
    4f98:	add	ip, pc, #0, 12
    4f9c:	add	ip, ip, #40, 20	; 0x28000
    4fa0:	ldr	pc, [ip, #392]!	; 0x188

00004fa4 <read@plt>:
    4fa4:	add	ip, pc, #0, 12
    4fa8:	add	ip, ip, #40, 20	; 0x28000
    4fac:	ldr	pc, [ip, #384]!	; 0x180

00004fb0 <rb_radixtree_elem_add@plt>:
    4fb0:	add	ip, pc, #0, 12
    4fb4:	add	ip, ip, #40, 20	; 0x28000
    4fb8:	ldr	pc, [ip, #376]!	; 0x178

00004fbc <write@plt>:
    4fbc:	add	ip, pc, #0, 12
    4fc0:	add	ip, ip, #40, 20	; 0x28000
    4fc4:	ldr	pc, [ip, #368]!	; 0x170

00004fc8 <SSL_new@plt>:
    4fc8:	add	ip, pc, #0, 12
    4fcc:	add	ip, ip, #40, 20	; 0x28000
    4fd0:	ldr	pc, [ip, #360]!	; 0x168

00004fd4 <access@plt>:
    4fd4:	add	ip, pc, #0, 12
    4fd8:	add	ip, ip, #40, 20	; 0x28000
    4fdc:	ldr	pc, [ip, #352]!	; 0x160

00004fe0 <rb_lib_loop@plt>:
    4fe0:	add	ip, pc, #0, 12
    4fe4:	add	ip, ip, #40, 20	; 0x28000
    4fe8:	ldr	pc, [ip, #344]!	; 0x158

00004fec <timer_settime@plt>:
    4fec:	add	ip, pc, #0, 12
    4ff0:	add	ip, ip, #40, 20	; 0x28000
    4ff4:	ldr	pc, [ip, #336]!	; 0x150

00004ff8 <gettimeofday@plt>:
    4ff8:	add	ip, pc, #0, 12
    4ffc:	add	ip, ip, #40, 20	; 0x28000
    5000:	ldr	pc, [ip, #328]!	; 0x148

00005004 <accept@plt>:
    5004:	add	ip, pc, #0, 12
    5008:	add	ip, ip, #40, 20	; 0x28000
    500c:	ldr	pc, [ip, #320]!	; 0x140

00005010 <SSL_read@plt>:
    5010:	add	ip, pc, #0, 12
    5014:	add	ip, ip, #40, 20	; 0x28000
    5018:	ldr	pc, [ip, #312]!	; 0x138

0000501c <rb_read@plt>:
    501c:	add	ip, pc, #0, 12
    5020:	add	ip, ip, #40, 20	; 0x28000
    5024:	ldr	pc, [ip, #304]!	; 0x130

00005028 <socket@plt>:
    5028:	add	ip, pc, #0, 12
    502c:	add	ip, ip, #40, 20	; 0x28000
    5030:	ldr	pc, [ip, #296]!	; 0x128

00005034 <rb_linebuf_get@plt>:
    5034:	add	ip, pc, #0, 12
    5038:	add	ip, ip, #40, 20	; 0x28000
    503c:	ldr	pc, [ip, #288]!	; 0x120

00005040 <epoll_wait@plt>:
    5040:	add	ip, pc, #0, 12
    5044:	add	ip, ip, #40, 20	; 0x28000
    5048:	ldr	pc, [ip, #280]!	; 0x118

0000504c <SSL_do_handshake@plt>:
    504c:	add	ip, pc, #0, 12
    5050:	add	ip, ip, #40, 20	; 0x28000
    5054:	ldr	pc, [ip, #272]!	; 0x110

00005058 <rb_linebuf_flush@plt>:
    5058:	add	ip, pc, #0, 12
    505c:	add	ip, ip, #40, 20	; 0x28000
    5060:	ldr	pc, [ip, #264]!	; 0x108

00005064 <posix_spawn@plt>:
    5064:	add	ip, pc, #0, 12
    5068:	add	ip, ip, #40, 20	; 0x28000
    506c:	ldr	pc, [ip, #256]!	; 0x100

00005070 <strlen@plt>:
    5070:	add	ip, pc, #0, 12
    5074:	add	ip, ip, #40, 20	; 0x28000
    5078:	ldr	pc, [ip, #248]!	; 0xf8

0000507c <rb_current_time@plt>:
    507c:	add	ip, pc, #0, 12
    5080:	add	ip, ip, #40, 20	; 0x28000
    5084:	ldr	pc, [ip, #240]!	; 0xf0

00005088 <strtoul@plt>:
    5088:	add	ip, pc, #0, 12
    508c:	add	ip, ip, #40, 20	; 0x28000
    5090:	ldr	pc, [ip, #232]!	; 0xe8

00005094 <memcpy@plt>:
    5094:	add	ip, pc, #0, 12
    5098:	add	ip, ip, #40, 20	; 0x28000
    509c:	ldr	pc, [ip, #224]!	; 0xe0

000050a0 <PEM_read_X509@plt>:
    50a0:	add	ip, pc, #0, 12
    50a4:	add	ip, ip, #40, 20	; 0x28000
    50a8:	ldr	pc, [ip, #216]!	; 0xd8

000050ac <posix_spawnattr_setflags@plt>:
    50ac:	add	ip, pc, #0, 12
    50b0:	add	ip, ip, #40, 20	; 0x28000
    50b4:	ldr	pc, [ip, #208]!	; 0xd0

000050b8 <__ctype_tolower_loc@plt>:
    50b8:	add	ip, pc, #0, 12
    50bc:	add	ip, ip, #40, 20	; 0x28000
    50c0:	ldr	pc, [ip, #200]!	; 0xc8

000050c4 <SSL_CTX_use_certificate_chain_file@plt>:
    50c4:	add	ip, pc, #0, 12
    50c8:	add	ip, ip, #40, 20	; 0x28000
    50cc:	ldr	pc, [ip, #192]!	; 0xc0

000050d0 <rb_free_rb_dlink_node@plt>:
    50d0:	add	ip, pc, #0, 12
    50d4:	add	ip, ip, #40, 20	; 0x28000
    50d8:	ldr	pc, [ip, #184]!	; 0xb8

000050dc <SSL_CTX_set_options@plt>:
    50dc:	add	ip, pc, #0, 12
    50e0:	add	ip, ip, #40, 20	; 0x28000
    50e4:	ldr	pc, [ip, #176]!	; 0xb0

000050e8 <posix_spawnattr_destroy@plt>:
    50e8:	add	ip, pc, #0, 12
    50ec:	add	ip, ip, #40, 20	; 0x28000
    50f0:	ldr	pc, [ip, #168]!	; 0xa8

000050f4 <bcmp@plt>:
    50f4:	add	ip, pc, #0, 12
    50f8:	add	ip, ip, #40, 20	; 0x28000
    50fc:	ldr	pc, [ip, #160]!	; 0xa0

00005100 <rb_close@plt>:
    5100:	add	ip, pc, #0, 12
    5104:	add	ip, ip, #40, 20	; 0x28000
    5108:	ldr	pc, [ip, #152]!	; 0x98

0000510c <strtol@plt>:
    510c:	add	ip, pc, #0, 12
    5110:	add	ip, ip, #40, 20	; 0x28000
    5114:	ldr	pc, [ip, #144]!	; 0x90

00005118 <sigaddset@plt>:
    5118:	add	ip, pc, #0, 12
    511c:	add	ip, ip, #40, 20	; 0x28000
    5120:	ldr	pc, [ip, #136]!	; 0x88

00005124 <strcpy@plt>:
    5124:	add	ip, pc, #0, 12
    5128:	add	ip, ip, #40, 20	; 0x28000
    512c:	ldr	pc, [ip, #128]!	; 0x80

00005130 <waitpid@plt>:
    5130:	add	ip, pc, #0, 12
    5134:	add	ip, ip, #40, 20	; 0x28000
    5138:	ldr	pc, [ip, #120]!	; 0x78

0000513c <rb_run_one_event@plt>:
    513c:	add	ip, pc, #0, 12
    5140:	add	ip, ip, #40, 20	; 0x28000
    5144:	ldr	pc, [ip, #112]!	; 0x70

00005148 <strncat@plt>:
    5148:	add	ip, pc, #0, 12
    514c:	add	ip, ip, #40, 20	; 0x28000
    5150:	ldr	pc, [ip, #104]!	; 0x68

00005154 <rb_bh_free@plt>:
    5154:	add	ip, pc, #0, 12
    5158:	add	ip, ip, #40, 20	; 0x28000
    515c:	ldr	pc, [ip, #96]!	; 0x60

00005160 <rb_init_rb_dlink_nodes@plt>:
    5160:	add	ip, pc, #0, 12
    5164:	add	ip, ip, #40, 20	; 0x28000
    5168:	ldr	pc, [ip, #88]!	; 0x58

0000516c <EVP_sha1@plt>:
    516c:	add	ip, pc, #0, 12
    5170:	add	ip, ip, #40, 20	; 0x28000
    5174:	ldr	pc, [ip, #80]!	; 0x50

00005178 <rb_patricia_lookup@plt>:
    5178:	add	ip, pc, #0, 12
    517c:	add	ip, ip, #40, 20	; 0x28000
    5180:	ldr	pc, [ip, #72]!	; 0x48

00005184 <shutdown@plt>:
    5184:	add	ip, pc, #0, 12
    5188:	add	ip, ip, #40, 20	; 0x28000
    518c:	ldr	pc, [ip, #64]!	; 0x40

00005190 <bind@plt>:
    5190:	add	ip, pc, #0, 12
    5194:	add	ip, ip, #40, 20	; 0x28000
    5198:	ldr	pc, [ip, #56]!	; 0x38

0000519c <rb_lib_log@plt>:
    519c:	add	ip, pc, #0, 12
    51a0:	add	ip, ip, #40, 20	; 0x28000
    51a4:	ldr	pc, [ip, #48]!	; 0x30

000051a8 <SSL_CTX_use_PrivateKey_file@plt>:
    51a8:	add	ip, pc, #0, 12
    51ac:	add	ip, ip, #40, 20	; 0x28000
    51b0:	ldr	pc, [ip, #40]!	; 0x28

000051b4 <select@plt>:
    51b4:	add	ip, pc, #0, 12
    51b8:	add	ip, ip, #40, 20	; 0x28000
    51bc:	ldr	pc, [ip, #32]!

000051c0 <close@plt>:
    51c0:	add	ip, pc, #0, 12
    51c4:	add	ip, ip, #40, 20	; 0x28000
    51c8:	ldr	pc, [ip, #24]!

000051cc <rb_bh_alloc@plt>:
    51cc:	add	ip, pc, #0, 12
    51d0:	add	ip, ip, #40, 20	; 0x28000
    51d4:	ldr	pc, [ip, #16]!

000051d8 <SSL_free@plt>:
    51d8:	add	ip, pc, #0, 12
    51dc:	add	ip, ip, #40, 20	; 0x28000
    51e0:	ldr	pc, [ip, #8]!

000051e4 <rb_pipe@plt>:
    51e4:	add	ip, pc, #0, 12
    51e8:	add	ip, ip, #40, 20	; 0x28000
    51ec:	ldr	pc, [ip, #0]!

000051f0 <strncasecmp@plt>:
    51f0:	add	ip, pc, #0, 12
    51f4:	add	ip, ip, #159744	; 0x27000
    51f8:	ldr	pc, [ip, #4088]!	; 0xff8

000051fc <rb_outofmemory@plt>:
    51fc:	add	ip, pc, #0, 12
    5200:	add	ip, ip, #159744	; 0x27000
    5204:	ldr	pc, [ip, #4080]!	; 0xff0

00005208 <rb_set_time@plt>:
    5208:	add	ip, pc, #0, 12
    520c:	add	ip, ip, #159744	; 0x27000
    5210:	ldr	pc, [ip, #4072]!	; 0xfe8

00005214 <malloc@plt>:
    5214:	add	ip, pc, #0, 12
    5218:	add	ip, ip, #159744	; 0x27000
    521c:	ldr	pc, [ip, #4064]!	; 0xfe0

00005220 <sigprocmask@plt>:
    5220:	add	ip, pc, #0, 12
    5224:	add	ip, ip, #159744	; 0x27000
    5228:	ldr	pc, [ip, #4056]!	; 0xfd8

0000522c <rb_event_run@plt>:
    522c:	add	ip, pc, #0, 12
    5230:	add	ip, ip, #159744	; 0x27000
    5234:	ldr	pc, [ip, #4048]!	; 0xfd0

00005238 <SSL_set_accept_state@plt>:
    5238:	add	ip, pc, #0, 12
    523c:	add	ip, ip, #159744	; 0x27000
    5240:	ldr	pc, [ip, #4040]!	; 0xfc8

00005244 <rb_init_bh@plt>:
    5244:	add	ip, pc, #0, 12
    5248:	add	ip, ip, #159744	; 0x27000
    524c:	ldr	pc, [ip, #4032]!	; 0xfc0

00005250 <PEM_read_DHparams@plt>:
    5250:	add	ip, pc, #0, 12
    5254:	add	ip, ip, #159744	; 0x27000
    5258:	ldr	pc, [ip, #4024]!	; 0xfb8

0000525c <gmtime_r@plt>:
    525c:	add	ip, pc, #0, 12
    5260:	add	ip, ip, #159744	; 0x27000
    5264:	ldr	pc, [ip, #4016]!	; 0xfb0

00005268 <poll@plt>:
    5268:	add	ip, pc, #0, 12
    526c:	add	ip, ip, #159744	; 0x27000
    5270:	ldr	pc, [ip, #4008]!	; 0xfa8

00005274 <ASN1_item_digest@plt>:
    5274:	add	ip, pc, #0, 12
    5278:	add	ip, ip, #159744	; 0x27000
    527c:	ldr	pc, [ip, #4000]!	; 0xfa0

00005280 <strnlen@plt>:
    5280:	add	ip, pc, #0, 12
    5284:	add	ip, ip, #159744	; 0x27000
    5288:	ldr	pc, [ip, #3992]!	; 0xf98

0000528c <SSL_get_peer_certificate@plt>:
    528c:	add	ip, pc, #0, 12
    5290:	add	ip, ip, #159744	; 0x27000
    5294:	ldr	pc, [ip, #3984]!	; 0xf90

00005298 <rb_lib_init@plt>:
    5298:	add	ip, pc, #0, 12
    529c:	add	ip, ip, #159744	; 0x27000
    52a0:	ldr	pc, [ip, #3976]!	; 0xf88

000052a4 <SSL_get_verify_result@plt>:
    52a4:	add	ip, pc, #0, 12
    52a8:	add	ip, ip, #159744	; 0x27000
    52ac:	ldr	pc, [ip, #3968]!	; 0xf80

000052b0 <strtok_r@plt>:
    52b0:	add	ip, pc, #0, 12
    52b4:	add	ip, ip, #159744	; 0x27000
    52b8:	ldr	pc, [ip, #3960]!	; 0xf78

000052bc <rb_lib_restart@plt>:
    52bc:	add	ip, pc, #0, 12
    52c0:	add	ip, ip, #159744	; 0x27000
    52c4:	ldr	pc, [ip, #3952]!	; 0xf70

000052c8 <DH_free@plt>:
    52c8:	add	ip, pc, #0, 12
    52cc:	add	ip, ip, #159744	; 0x27000
    52d0:	ldr	pc, [ip, #3944]!	; 0xf68

000052d4 <timer_delete@plt>:
    52d4:	add	ip, pc, #0, 12
    52d8:	add	ip, ip, #159744	; 0x27000
    52dc:	ldr	pc, [ip, #3936]!	; 0xf60

000052e0 <rb_open@plt>:
    52e0:	add	ip, pc, #0, 12
    52e4:	add	ip, ip, #159744	; 0x27000
    52e8:	ldr	pc, [ip, #3928]!	; 0xf58

000052ec <send@plt>:
    52ec:	add	ip, pc, #0, 12
    52f0:	add	ip, ip, #159744	; 0x27000
    52f4:	ldr	pc, [ip, #3920]!	; 0xf50

000052f8 <SSL_shutdown@plt>:
    52f8:	add	ip, pc, #0, 12
    52fc:	add	ip, ip, #159744	; 0x27000
    5300:	ldr	pc, [ip, #3912]!	; 0xf48

00005304 <rb_bh_create@plt>:
    5304:	add	ip, pc, #0, 12
    5308:	add	ip, ip, #159744	; 0x27000
    530c:	ldr	pc, [ip, #3904]!	; 0xf40

00005310 <dup2@plt>:
    5310:	add	ip, pc, #0, 12
    5314:	add	ip, ip, #159744	; 0x27000
    5318:	ldr	pc, [ip, #3896]!	; 0xf38

0000531c <getpid@plt>:
    531c:	add	ip, pc, #0, 12
    5320:	add	ip, ip, #159744	; 0x27000
    5324:	ldr	pc, [ip, #3888]!	; 0xf30

00005328 <rb_writev@plt>:
    5328:	add	ip, pc, #0, 12
    532c:	add	ip, ip, #159744	; 0x27000
    5330:	ldr	pc, [ip, #3880]!	; 0xf28

00005334 <RAND_bytes@plt>:
    5334:	add	ip, pc, #0, 12
    5338:	add	ip, ip, #159744	; 0x27000
    533c:	ldr	pc, [ip, #3872]!	; 0xf20

00005340 <rb_linebuf_newbuf@plt>:
    5340:	add	ip, pc, #0, 12
    5344:	add	ip, ip, #159744	; 0x27000
    5348:	ldr	pc, [ip, #3864]!	; 0xf18

0000534c <rb_fdlist_init@plt>:
    534c:	add	ip, pc, #0, 12
    5350:	add	ip, ip, #159744	; 0x27000
    5354:	ldr	pc, [ip, #3856]!	; 0xf10

00005358 <rb_event_add@plt>:
    5358:	add	ip, pc, #0, 12
    535c:	add	ip, ip, #159744	; 0x27000
    5360:	ldr	pc, [ip, #3848]!	; 0xf08

00005364 <readlink@plt>:
    5364:	add	ip, pc, #0, 12
    5368:	add	ip, ip, #159744	; 0x27000
    536c:	ldr	pc, [ip, #3840]!	; 0xf00

00005370 <SSL_CTX_new@plt>:
    5370:	add	ip, pc, #0, 12
    5374:	add	ip, ip, #159744	; 0x27000
    5378:	ldr	pc, [ip, #3832]!	; 0xef8

0000537c <recvmsg@plt>:
    537c:	add	ip, pc, #0, 12
    5380:	add	ip, ip, #159744	; 0x27000
    5384:	ldr	pc, [ip, #3824]!	; 0xef0

00005388 <rand@plt>:
    5388:	add	ip, pc, #0, 12
    538c:	add	ip, ip, #159744	; 0x27000
    5390:	ldr	pc, [ip, #3816]!	; 0xee8

00005394 <rb_linebuf_init@plt>:
    5394:	add	ip, pc, #0, 12
    5398:	add	ip, ip, #159744	; 0x27000
    539c:	ldr	pc, [ip, #3808]!	; 0xee0

000053a0 <__fxstat@plt>:
    53a0:	add	ip, pc, #0, 12
    53a4:	add	ip, ip, #159744	; 0x27000
    53a8:	ldr	pc, [ip, #3800]!	; 0xed8

000053ac <SSL_set_connect_state@plt>:
    53ac:	add	ip, pc, #0, 12
    53b0:	add	ip, ip, #159744	; 0x27000
    53b4:	ldr	pc, [ip, #3792]!	; 0xed0

000053b8 <rb_radixtree_elem_find@plt>:
    53b8:	add	ip, pc, #0, 12
    53bc:	add	ip, ip, #159744	; 0x27000
    53c0:	ldr	pc, [ip, #3784]!	; 0xec8

000053c4 <rb_make_rb_dlink_node@plt>:
    53c4:	add	ip, pc, #0, 12
    53c8:	add	ip, ip, #159744	; 0x27000
    53cc:	ldr	pc, [ip, #3776]!	; 0xec0

000053d0 <rb_strlcat@plt>:
    53d0:	add	ip, pc, #0, 12
    53d4:	add	ip, ip, #159744	; 0x27000
    53d8:	ldr	pc, [ip, #3768]!	; 0xeb8

000053dc <rb_spawn_process@plt>:
    53dc:	add	ip, pc, #0, 12
    53e0:	add	ip, ip, #159744	; 0x27000
    53e4:	ldr	pc, [ip, #3760]!	; 0xeb0

000053e8 <EVP_sha512@plt>:
    53e8:	add	ip, pc, #0, 12
    53ec:	add	ip, ip, #159744	; 0x27000
    53f0:	ldr	pc, [ip, #3752]!	; 0xea8

000053f4 <snprintf@plt>:
    53f4:	add	ip, pc, #0, 12
    53f8:	add	ip, ip, #159744	; 0x27000
    53fc:	ldr	pc, [ip, #3744]!	; 0xea0

00005400 <RAND_status@plt>:
    5400:	add	ip, pc, #0, 12
    5404:	add	ip, ip, #159744	; 0x27000
    5408:	ldr	pc, [ip, #3736]!	; 0xe98

0000540c <timerfd_create@plt>:
    540c:	add	ip, pc, #0, 12
    5410:	add	ip, ip, #159744	; 0x27000
    5414:	ldr	pc, [ip, #3728]!	; 0xe90

00005418 <EVP_sha256@plt>:
    5418:	add	ip, pc, #0, 12
    541c:	add	ip, ip, #159744	; 0x27000
    5420:	ldr	pc, [ip, #3720]!	; 0xe88

00005424 <strcspn@plt>:
    5424:	add	ip, pc, #0, 12
    5428:	add	ip, ip, #159744	; 0x27000
    542c:	ldr	pc, [ip, #3712]!	; 0xe80

00005430 <rb_linebuf_put@plt>:
    5430:	add	ip, pc, #0, 12
    5434:	add	ip, ip, #159744	; 0x27000
    5438:	ldr	pc, [ip, #3704]!	; 0xe78

0000543c <rb_listen@plt>:
    543c:	add	ip, pc, #0, 12
    5440:	add	ip, ip, #159744	; 0x27000
    5444:	ldr	pc, [ip, #3696]!	; 0xe70

00005448 <fcntl@plt>:
    5448:	add	ip, pc, #0, 12
    544c:	add	ip, ip, #159744	; 0x27000
    5450:	ldr	pc, [ip, #3688]!	; 0xe68

00005454 <strncmp@plt>:
    5454:	add	ip, pc, #0, 12
    5458:	add	ip, ip, #159744	; 0x27000
    545c:	ldr	pc, [ip, #3680]!	; 0xe60

00005460 <kill@plt>:
    5460:	add	ip, pc, #0, 12
    5464:	add	ip, ip, #159744	; 0x27000
    5468:	ldr	pc, [ip, #3672]!	; 0xe58

0000546c <nanosleep@plt>:
    546c:	add	ip, pc, #0, 12
    5470:	add	ip, ip, #159744	; 0x27000
    5474:	ldr	pc, [ip, #3664]!	; 0xe50

00005478 <rb_event_next@plt>:
    5478:	add	ip, pc, #0, 12
    547c:	add	ip, ip, #159744	; 0x27000
    5480:	ldr	pc, [ip, #3656]!	; 0xe48

00005484 <realloc@plt>:
    5484:	add	ip, pc, #0, 12
    5488:	add	ip, ip, #159744	; 0x27000
    548c:	ldr	pc, [ip, #3648]!	; 0xe40

00005490 <timerfd_settime@plt>:
    5490:	add	ip, pc, #0, 12
    5494:	add	ip, ip, #159744	; 0x27000
    5498:	ldr	pc, [ip, #3640]!	; 0xe38

0000549c <epoll_ctl@plt>:
    549c:	add	ip, pc, #0, 12
    54a0:	add	ip, ip, #159744	; 0x27000
    54a4:	ldr	pc, [ip, #3632]!	; 0xe30

000054a8 <X509_free@plt>:
    54a8:	add	ip, pc, #0, 12
    54ac:	add	ip, ip, #159744	; 0x27000
    54b0:	ldr	pc, [ip, #3624]!	; 0xe28

000054b4 <readv@plt>:
    54b4:	add	ip, pc, #0, 12
    54b8:	add	ip, ip, #159744	; 0x27000
    54bc:	ldr	pc, [ip, #3616]!	; 0xe20

000054c0 <getsockopt@plt>:
    54c0:	add	ip, pc, #0, 12
    54c4:	add	ip, ip, #159744	; 0x27000
    54c8:	ldr	pc, [ip, #3608]!	; 0xe18

000054cc <pipe@plt>:
    54cc:	add	ip, pc, #0, 12
    54d0:	add	ip, ip, #159744	; 0x27000
    54d4:	ldr	pc, [ip, #3600]!	; 0xe10

000054d8 <OpenSSL_version@plt>:
    54d8:	add	ip, pc, #0, 12
    54dc:	add	ip, ip, #159744	; 0x27000
    54e0:	ldr	pc, [ip, #3592]!	; 0xe08

000054e4 <setsockopt@plt>:
    54e4:	add	ip, pc, #0, 12
    54e8:	add	ip, ip, #159744	; 0x27000
    54ec:	ldr	pc, [ip, #3584]!	; 0xe00

000054f0 <SSL_get_error@plt>:
    54f0:	add	ip, pc, #0, 12
    54f4:	add	ip, ip, #159744	; 0x27000
    54f8:	ldr	pc, [ip, #3576]!	; 0xdf8

000054fc <SSL_get_version@plt>:
    54fc:	add	ip, pc, #0, 12
    5500:	add	ip, ip, #159744	; 0x27000
    5504:	ldr	pc, [ip, #3568]!	; 0xdf0

00005508 <memchr@plt>:
    5508:	add	ip, pc, #0, 12
    550c:	add	ip, ip, #159744	; 0x27000
    5510:	ldr	pc, [ip, #3560]!	; 0xde8

00005514 <setenv@plt>:
    5514:	add	ip, pc, #0, 12
    5518:	add	ip, ip, #159744	; 0x27000
    551c:	ldr	pc, [ip, #3552]!	; 0xde0

00005520 <strcmp@plt>:
    5520:	add	ip, pc, #0, 12
    5524:	add	ip, ip, #159744	; 0x27000
    5528:	ldr	pc, [ip, #3544]!	; 0xdd8

0000552c <__errno_location@plt>:
    552c:	add	ip, pc, #0, 12
    5530:	add	ip, ip, #159744	; 0x27000
    5534:	ldr	pc, [ip, #3536]!	; 0xdd0

00005538 <__cxa_finalize@plt>:
    5538:	add	ip, pc, #0, 12
    553c:	add	ip, ip, #159744	; 0x27000
    5540:	ldr	pc, [ip, #3528]!	; 0xdc8

00005544 <sprintf@plt>:
    5544:	add	ip, pc, #0, 12
    5548:	add	ip, ip, #159744	; 0x27000
    554c:	ldr	pc, [ip, #3520]!	; 0xdc0

00005550 <rb_bh_usage@plt>:
    5550:	add	ip, pc, #0, 12
    5554:	add	ip, ip, #159744	; 0x27000
    5558:	ldr	pc, [ip, #3512]!	; 0xdb8

0000555c <SSL_CTX_set_verify@plt>:
    555c:	add	ip, pc, #0, 12
    5560:	add	ip, ip, #159744	; 0x27000
    5564:	ldr	pc, [ip, #3504]!	; 0xdb0

Disassembly of section .text:

00005570 <call_weak_fn>:
    5570:	ldr	r3, [pc, #20]	; 558c <call_weak_fn+0x1c>
    5574:	ldr	r2, [pc, #20]	; 5590 <call_weak_fn+0x20>
    5578:	add	r3, pc, r3
    557c:	ldr	r2, [r3, r2]
    5580:	cmp	r2, #0
    5584:	bxeq	lr
    5588:	b	4dd0 <__gmon_start__@plt>
    558c:	.word	0x00027a80
    5590:	.word	0x00000328

00005594 <deregister_tm_clones>:
    5594:	ldr	r0, [pc, #44]	; 55c8 <deregister_tm_clones+0x34>
    5598:	ldr	r3, [pc, #44]	; 55cc <deregister_tm_clones+0x38>
    559c:	add	r0, pc, r0
    55a0:	add	r3, pc, r3
    55a4:	cmp	r3, r0
    55a8:	ldr	r3, [pc, #32]	; 55d0 <deregister_tm_clones+0x3c>
    55ac:	add	r3, pc, r3
    55b0:	bxeq	lr
    55b4:	ldr	r2, [pc, #24]	; 55d4 <deregister_tm_clones+0x40>
    55b8:	ldr	r3, [r3, r2]
    55bc:	cmp	r3, #0
    55c0:	bxeq	lr
    55c4:	bx	r3
    55c8:	.word	0x00027efc
    55cc:	.word	0x00027ef8
    55d0:	.word	0x00027a4c
    55d4:	.word	0x00000344

000055d8 <register_tm_clones>:
    55d8:	ldr	r0, [pc, #56]	; 5618 <register_tm_clones+0x40>
    55dc:	ldr	r3, [pc, #56]	; 561c <register_tm_clones+0x44>
    55e0:	add	r0, pc, r0
    55e4:	add	r3, pc, r3
    55e8:	sub	r1, r3, r0
    55ec:	ldr	r3, [pc, #44]	; 5620 <register_tm_clones+0x48>
    55f0:	asr	r1, r1, #2
    55f4:	add	r3, pc, r3
    55f8:	add	r1, r1, r1, lsr #31
    55fc:	asrs	r1, r1, #1
    5600:	bxeq	lr
    5604:	ldr	r2, [pc, #24]	; 5624 <register_tm_clones+0x4c>
    5608:	ldr	r3, [r3, r2]
    560c:	cmp	r3, #0
    5610:	bxeq	lr
    5614:	bx	r3
    5618:	.word	0x00027eb8
    561c:	.word	0x00027eb4
    5620:	.word	0x00027a04
    5624:	.word	0x00000354

00005628 <__do_global_dtors_aux>:
    5628:	ldr	r3, [pc, #76]	; 567c <__do_global_dtors_aux+0x54>
    562c:	ldr	r2, [pc, #76]	; 5680 <__do_global_dtors_aux+0x58>
    5630:	add	r3, pc, r3
    5634:	add	r2, pc, r2
    5638:	ldrb	r3, [r3]
    563c:	cmp	r3, #0
    5640:	bxne	lr
    5644:	ldr	r3, [pc, #56]	; 5684 <__do_global_dtors_aux+0x5c>
    5648:	push	{r4, lr}
    564c:	ldr	r3, [r2, r3]
    5650:	cmp	r3, #0
    5654:	beq	5664 <__do_global_dtors_aux+0x3c>
    5658:	ldr	r3, [pc, #40]	; 5688 <__do_global_dtors_aux+0x60>
    565c:	ldr	r0, [pc, r3]
    5660:	bl	5538 <__cxa_finalize@plt>
    5664:	bl	5594 <deregister_tm_clones>
    5668:	ldr	r3, [pc, #28]	; 568c <__do_global_dtors_aux+0x64>
    566c:	mov	r2, #1
    5670:	add	r3, pc, r3
    5674:	strb	r2, [r3]
    5678:	pop	{r4, pc}
    567c:	.word	0x00027e68
    5680:	.word	0x000279c4
    5684:	.word	0x000003e4
    5688:	.word	0x00027d8c
    568c:	.word	0x00027e28

00005690 <frame_dummy>:
    5690:	b	55d8 <register_tm_clones>

00005694 <rb_spawn_process>:
    5694:	push	{r4, r5, r6, sl, fp, lr}
    5698:	add	fp, sp, #16
    569c:	sub	sp, sp, #352	; 0x160
    56a0:	add	r6, sp, #12
    56a4:	mov	r5, r0
    56a8:	mov	r4, r1
    56ac:	mov	r0, r6
    56b0:	bl	4f68 <posix_spawnattr_init@plt>
    56b4:	mov	r0, r6
    56b8:	mov	r1, #64	; 0x40
    56bc:	bl	50ac <posix_spawnattr_setflags@plt>
    56c0:	ldr	r0, [pc, #88]	; 5720 <rb_spawn_process+0x8c>
    56c4:	mov	r1, r5
    56c8:	mov	r2, #0
    56cc:	mov	r3, r6
    56d0:	ldr	r0, [pc, r0]
    56d4:	str	r4, [sp]
    56d8:	ldr	r0, [r0]
    56dc:	str	r0, [sp, #4]
    56e0:	sub	r0, fp, #20
    56e4:	bl	5064 <posix_spawn@plt>
    56e8:	mov	r4, r0
    56ec:	mov	r0, r6
    56f0:	bl	50e8 <posix_spawnattr_destroy@plt>
    56f4:	cmp	r4, #0
    56f8:	beq	5714 <rb_spawn_process+0x80>
    56fc:	bl	552c <__errno_location@plt>
    5700:	str	r4, [r0]
    5704:	mvn	r0, #0
    5708:	str	r0, [fp, #-20]	; 0xffffffec
    570c:	sub	sp, fp, #16
    5710:	pop	{r4, r5, r6, sl, fp, pc}
    5714:	ldr	r0, [fp, #-20]	; 0xffffffec
    5718:	sub	sp, fp, #16
    571c:	pop	{r4, r5, r6, sl, fp, pc}
    5720:	.word	0x00027c94

00005724 <rb_gettimeofday>:
    5724:	b	4ff8 <gettimeofday@plt>

00005728 <rb_sleep>:
    5728:	push	{fp, lr}
    572c:	mov	fp, sp
    5730:	sub	sp, sp, #8
    5734:	str	r0, [sp]
    5738:	mov	r0, #1000	; 0x3e8
    573c:	mul	r0, r1, r0
    5740:	mov	r1, #0
    5744:	str	r0, [sp, #4]
    5748:	mov	r0, sp
    574c:	bl	546c <nanosleep@plt>
    5750:	mov	sp, fp
    5754:	pop	{fp, pc}

00005758 <rb_strerror>:
    5758:	b	4c80 <strerror@plt>

0000575c <rb_kill>:
    575c:	b	5460 <kill@plt>

00005760 <rb_setenv>:
    5760:	b	5514 <setenv@plt>

00005764 <rb_waitpid>:
    5764:	b	5130 <waitpid@plt>

00005768 <rb_getpid>:
    5768:	b	531c <getpid@plt>

0000576c <rb_path_to_self>:
    576c:	push	{r4, sl, fp, lr}
    5770:	add	fp, sp, #8
    5774:	ldr	r0, [pc, #36]	; 57a0 <rb_path_to_self+0x34>
    5778:	ldr	r4, [pc, #36]	; 57a4 <rb_path_to_self+0x38>
    577c:	mov	r2, #4096	; 0x1000
    5780:	add	r4, pc, r4
    5784:	add	r0, pc, r0
    5788:	mov	r1, r4
    578c:	bl	5364 <readlink@plt>
    5790:	mvn	r1, #0
    5794:	subs	r0, r0, r1
    5798:	movne	r0, r4
    579c:	pop	{r4, sl, fp, pc}
    57a0:	.word	0x00014cc4
    57a4:	.word	0x00027d19

000057a8 <rb_init_netio_win32>:
    57a8:	push	{fp, lr}
    57ac:	mov	fp, sp
    57b0:	bl	552c <__errno_location@plt>
    57b4:	mov	r1, #38	; 0x26
    57b8:	str	r1, [r0]
    57bc:	mvn	r0, #0
    57c0:	pop	{fp, pc}

000057c4 <rb_setselect_win32>:
    57c4:	push	{fp, lr}
    57c8:	mov	fp, sp
    57cc:	bl	552c <__errno_location@plt>
    57d0:	mov	r1, #38	; 0x26
    57d4:	str	r1, [r0]
    57d8:	pop	{fp, pc}

000057dc <rb_select_win32>:
    57dc:	push	{fp, lr}
    57e0:	mov	fp, sp
    57e4:	bl	552c <__errno_location@plt>
    57e8:	mov	r1, #38	; 0x26
    57ec:	str	r1, [r0]
    57f0:	mvn	r0, #0
    57f4:	pop	{fp, pc}

000057f8 <rb_setup_fd_win32>:
    57f8:	push	{fp, lr}
    57fc:	mov	fp, sp
    5800:	bl	552c <__errno_location@plt>
    5804:	mov	r1, #38	; 0x26
    5808:	str	r1, [r0]
    580c:	mvn	r0, #0
    5810:	pop	{fp, pc}
	...

00005820 <rb_crypt>:
    5820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5824:	add	fp, sp, #28
    5828:	sub	sp, sp, #236	; 0xec
    582c:	mov	r4, r0
    5830:	ldrb	r0, [r1]
    5834:	mov	r7, r1
    5838:	cmp	r0, #36	; 0x24
    583c:	bne	58b8 <rb_crypt+0x98>
    5840:	ldrb	r0, [r7, #2]
    5844:	cmp	r0, #36	; 0x24
    5848:	beq	5858 <rb_crypt+0x38>
    584c:	ldrb	r0, [r7, #3]
    5850:	cmp	r0, #36	; 0x24
    5854:	bne	58b8 <rb_crypt+0x98>
    5858:	ldrb	r0, [r7, #1]
    585c:	mov	r6, #0
    5860:	cmp	r0, #54	; 0x36
    5864:	beq	5bdc <rb_crypt+0x3bc>
    5868:	cmp	r0, #53	; 0x35
    586c:	beq	5c24 <rb_crypt+0x404>
    5870:	cmp	r0, #49	; 0x31
    5874:	bne	63d4 <rb_crypt+0xbb4>
    5878:	ldr	r5, [pc, #4032]	; 6840 <rb_crypt+0x1020>
    587c:	mov	r0, r7
    5880:	mov	r2, #3
    5884:	add	r5, pc, r5
    5888:	str	r7, [r5, #20]
    588c:	ldr	r8, [pc, #4016]	; 6844 <rb_crypt+0x1024>
    5890:	add	r8, pc, r8
    5894:	mov	r1, r8
    5898:	bl	5454 <strncmp@plt>
    589c:	cmp	r0, #0
    58a0:	mov	r0, #0
    58a4:	addeq	r7, r7, #3
    58a8:	mov	r6, r7
    58ac:	streq	r7, [r5, #20]
    58b0:	str	r7, [r5, #24]
    58b4:	b	5c78 <rb_crypt+0x458>
    58b8:	str	r7, [sp, #12]
    58bc:	bl	6ef4 <rb_des_init>
    58c0:	sub	r0, fp, #120	; 0x78
    58c4:	mov	r2, #255	; 0xff
    58c8:	orr	r1, r0, #1
    58cc:	mov	r3, r4
    58d0:	ldrb	r7, [r3], #1
    58d4:	tst	r2, r7, lsl #1
    58d8:	lsl	r6, r7, #1
    58dc:	strb	r6, [r1, #-1]
    58e0:	movne	r4, r3
    58e4:	sub	r3, r1, r0
    58e8:	add	r1, r1, #1
    58ec:	cmp	r3, #8
    58f0:	bne	58cc <rb_crypt+0xac>
    58f4:	bl	6ef4 <rb_des_init>
    58f8:	ldr	r0, [fp, #-120]	; 0xffffff88
    58fc:	ldr	r2, [fp, #-116]	; 0xffffff8c
    5900:	rev	r1, r0
    5904:	rev	r0, r2
    5908:	ldr	r2, [pc, #4032]	; 68d0 <rb_crypt+0x10b0>
    590c:	add	r2, pc, r2
    5910:	ldr	r2, [r2, #4]
    5914:	cmp	r0, r2
    5918:	bne	5938 <rb_crypt+0x118>
    591c:	ldr	r2, [pc, #4016]	; 68d4 <rb_crypt+0x10b4>
    5920:	add	r2, pc, r2
    5924:	ldr	r2, [r2, #8]
    5928:	cmp	r1, r2
    592c:	bne	5938 <rb_crypt+0x118>
    5930:	orrs	r2, r0, r1
    5934:	bne	5b70 <rb_crypt+0x350>
    5938:	ldr	r2, [pc, #3992]	; 68d8 <rb_crypt+0x10b8>
    593c:	lsr	ip, r1, #25
    5940:	and	r9, r1, #254	; 0xfe
    5944:	add	r2, pc, r2
    5948:	stmib	r2, {r0, r1}
    594c:	ldr	r3, [pc, #3976]	; 68dc <rb_crypt+0x10bc>
    5950:	add	r3, pc, r3
    5954:	ldr	r7, [r3, ip, lsl #2]
    5958:	ubfx	lr, r1, #17, #7
    595c:	add	r5, r3, lr, lsl #2
    5960:	ldr	r5, [r5, #512]	; 0x200
    5964:	ubfx	r8, r1, #9, #7
    5968:	add	r4, r3, r8, lsl #2
    596c:	ldr	r4, [r4, #1024]	; 0x400
    5970:	orr	r7, r5, r7
    5974:	orr	r7, r7, r4
    5978:	add	r4, r3, r9, lsl #1
    597c:	ldr	r4, [r4, #1536]	; 0x600
    5980:	orr	r7, r7, r4
    5984:	lsr	r4, r0, #25
    5988:	add	r2, r3, r4, lsl #2
    598c:	ldr	r2, [r2, #2048]	; 0x800
    5990:	orr	r2, r7, r2
    5994:	ubfx	r7, r0, #17, #7
    5998:	add	r6, r3, r7, lsl #2
    599c:	ldr	r6, [r6, #2560]	; 0xa00
    59a0:	orr	r2, r2, r6
    59a4:	ubfx	r6, r0, #9, #7
    59a8:	and	r0, r0, #254	; 0xfe
    59ac:	add	r5, r3, r6, lsl #2
    59b0:	add	r3, r3, r0, lsl #1
    59b4:	ldr	r5, [r5, #3072]	; 0xc00
    59b8:	ldr	r3, [r3, #3584]	; 0xe00
    59bc:	orr	r2, r2, r5
    59c0:	orr	r1, r2, r3
    59c4:	str	r1, [sp, #32]
    59c8:	ldr	r2, [pc, #3856]	; 68e0 <rb_crypt+0x10c0>
    59cc:	add	r2, pc, r2
    59d0:	add	r1, r2, lr, lsl #2
    59d4:	ldr	r5, [r2, ip, lsl #2]
    59d8:	add	r7, r2, r7, lsl #2
    59dc:	add	r0, r2, r0, lsl #1
    59e0:	ldr	r1, [r1, #512]	; 0x200
    59e4:	ldr	r7, [r7, #2560]	; 0xa00
    59e8:	ldr	r0, [r0, #3584]	; 0xe00
    59ec:	orr	r1, r1, r5
    59f0:	add	r5, r2, r8, lsl #2
    59f4:	ldr	r5, [r5, #1024]	; 0x400
    59f8:	orr	r1, r1, r5
    59fc:	add	r5, r2, r9, lsl #1
    5a00:	ldr	r5, [r5, #1536]	; 0x600
    5a04:	orr	r1, r1, r5
    5a08:	add	r5, r2, r4, lsl #2
    5a0c:	ldr	r5, [r5, #2048]	; 0x800
    5a10:	orr	r1, r1, r5
    5a14:	orr	r1, r1, r7
    5a18:	add	r7, r2, r6, lsl #2
    5a1c:	mov	r6, #0
    5a20:	ldr	r7, [r7, #3072]	; 0xc00
    5a24:	orr	r1, r1, r7
    5a28:	orr	r0, r1, r0
    5a2c:	mov	r1, #0
    5a30:	str	r0, [sp, #28]
    5a34:	ldr	lr, [pc, #4028]	; 69f8 <rb_crypt+0x11d8>
    5a38:	add	lr, pc, lr
    5a3c:	ldr	r0, [pc, #4024]	; 69fc <rb_crypt+0x11dc>
    5a40:	add	r0, pc, r0
    5a44:	ldrb	r2, [r0, r6]
    5a48:	ldr	r0, [sp, #28]
    5a4c:	add	r1, r1, r2
    5a50:	rsb	r3, r1, #28
    5a54:	lsr	r2, r0, r3
    5a58:	orr	r0, r2, r0, lsl r1
    5a5c:	ubfx	r7, r0, #14, #7
    5a60:	add	r2, lr, r7, lsl #2
    5a64:	str	r7, [sp, #36]	; 0x24
    5a68:	ldr	r2, [r2, #512]	; 0x200
    5a6c:	ubfx	r9, r0, #21, #7
    5a70:	ldr	r5, [lr, r9, lsl #2]
    5a74:	ubfx	sl, r0, #7, #7
    5a78:	add	ip, lr, sl, lsl #2
    5a7c:	ldr	r7, [ip, #1024]	; 0x400
    5a80:	and	ip, r0, #127	; 0x7f
    5a84:	ldr	r0, [sp, #32]
    5a88:	orr	r5, r2, r5
    5a8c:	orr	r7, r5, r7
    5a90:	add	r5, lr, ip, lsl #2
    5a94:	lsr	r3, r0, r3
    5a98:	orr	r3, r3, r0, lsl r1
    5a9c:	ldr	r5, [r5, #1536]	; 0x600
    5aa0:	orr	r7, r7, r5
    5aa4:	ubfx	r5, r3, #21, #7
    5aa8:	add	r2, lr, r5, lsl #2
    5aac:	ldr	r2, [r2, #2048]	; 0x800
    5ab0:	orr	r2, r7, r2
    5ab4:	ubfx	r7, r3, #14, #7
    5ab8:	add	r0, lr, r7, lsl #2
    5abc:	ldr	r0, [r0, #2560]	; 0xa00
    5ac0:	orr	r0, r2, r0
    5ac4:	ubfx	r2, r3, #7, #7
    5ac8:	add	r8, lr, r2, lsl #2
    5acc:	ldr	r4, [r8, #3072]	; 0xc00
    5ad0:	and	r8, r3, #127	; 0x7f
    5ad4:	orr	r0, r0, r4
    5ad8:	add	r4, lr, r8, lsl #2
    5adc:	ldr	r4, [r4, #3584]	; 0xe00
    5ae0:	orr	r0, r0, r4
    5ae4:	ldr	r4, [pc, #4072]	; 6ad4 <rb_crypt+0x12b4>
    5ae8:	add	r4, pc, r4
    5aec:	str	r0, [r4, r6, lsl #2]
    5af0:	ldr	r0, [pc, #4064]	; 6ad8 <rb_crypt+0x12b8>
    5af4:	ldr	r4, [sp, #36]	; 0x24
    5af8:	add	r0, pc, r0
    5afc:	mov	r3, r0
    5b00:	ldr	r0, [r0, r9, lsl #2]
    5b04:	add	r4, r3, r4, lsl #2
    5b08:	add	r5, r3, r5, lsl #2
    5b0c:	add	r7, r3, r7, lsl #2
    5b10:	add	r2, r3, r2, lsl #2
    5b14:	ldr	r4, [r4, #512]	; 0x200
    5b18:	ldr	r5, [r5, #2048]	; 0x800
    5b1c:	ldr	r7, [r7, #2560]	; 0xa00
    5b20:	ldr	r2, [r2, #3072]	; 0xc00
    5b24:	orr	r0, r4, r0
    5b28:	add	r4, r3, sl, lsl #2
    5b2c:	ldr	r4, [r4, #1024]	; 0x400
    5b30:	orr	r0, r0, r4
    5b34:	add	r4, r3, ip, lsl #2
    5b38:	ldr	r4, [r4, #1536]	; 0x600
    5b3c:	orr	r0, r0, r4
    5b40:	orr	r0, r0, r5
    5b44:	orr	r0, r0, r7
    5b48:	orr	r0, r0, r2
    5b4c:	add	r2, r3, r8, lsl #2
    5b50:	ldr	r2, [r2, #3584]	; 0xe00
    5b54:	orr	r0, r0, r2
    5b58:	ldr	r2, [pc, #3964]	; 6adc <rb_crypt+0x12bc>
    5b5c:	add	r2, pc, r2
    5b60:	str	r0, [r2, r6, lsl #2]
    5b64:	add	r6, r6, #1
    5b68:	cmp	r6, #16
    5b6c:	bne	5a3c <rb_crypt+0x21c>
    5b70:	ldr	r7, [sp, #12]
    5b74:	mov	r3, #0
    5b78:	mov	r1, #0
    5b7c:	ldrb	r0, [r7, #1]
    5b80:	cmp	r0, #122	; 0x7a
    5b84:	bhi	5bc0 <rb_crypt+0x3a0>
    5b88:	cmp	r0, #97	; 0x61
    5b8c:	bcc	5ba8 <rb_crypt+0x388>
    5b90:	sub	r1, r0, #59	; 0x3b
    5b94:	ldrb	r2, [r7]
    5b98:	lsl	r1, r1, #6
    5b9c:	cmp	r2, #122	; 0x7a
    5ba0:	bhi	5bd0 <rb_crypt+0x3b0>
    5ba4:	b	5eb8 <rb_crypt+0x698>
    5ba8:	cmp	r0, #90	; 0x5a
    5bac:	mov	r1, #0
    5bb0:	bhi	5bc0 <rb_crypt+0x3a0>
    5bb4:	cmp	r0, #65	; 0x41
    5bb8:	bcc	5e98 <rb_crypt+0x678>
    5bbc:	sub	r1, r0, #53	; 0x35
    5bc0:	ldrb	r2, [r7]
    5bc4:	lsl	r1, r1, #6
    5bc8:	cmp	r2, #122	; 0x7a
    5bcc:	bls	5eb8 <rb_crypt+0x698>
    5bd0:	ldr	r6, [pc, #3976]	; 6b60 <rb_crypt+0x1340>
    5bd4:	add	r6, pc, r6
    5bd8:	b	5f00 <rb_crypt+0x6e0>
    5bdc:	mov	r0, r7
    5be0:	bl	5070 <strlen@plt>
    5be4:	ldr	r8, [pc, #3960]	; 6b64 <rb_crypt+0x1344>
    5be8:	add	r5, r0, #109	; 0x6d
    5bec:	add	r8, pc, r8
    5bf0:	ldr	r0, [r8, #40]	; 0x28
    5bf4:	ldr	r2, [r8, #36]	; 0x24
    5bf8:	cmp	r0, r5
    5bfc:	bge	5d98 <rb_crypt+0x578>
    5c00:	mov	r0, r2
    5c04:	mov	r1, r5
    5c08:	bl	5484 <realloc@plt>
    5c0c:	cmp	r0, #0
    5c10:	beq	63d4 <rb_crypt+0xbb4>
    5c14:	mov	r2, r0
    5c18:	str	r0, [r8, #36]	; 0x24
    5c1c:	str	r5, [r8, #40]	; 0x28
    5c20:	b	5d9c <rb_crypt+0x57c>
    5c24:	mov	r0, r7
    5c28:	bl	5070 <strlen@plt>
    5c2c:	add	r5, r0, #66	; 0x42
    5c30:	mov	r0, r5
    5c34:	bl	5214 <malloc@plt>
    5c38:	cmp	r0, #0
    5c3c:	beq	63d4 <rb_crypt+0xbb4>
    5c40:	mov	r2, r0
    5c44:	ldr	r0, [pc, #4040]	; 6c14 <rb_crypt+0x13f4>
    5c48:	mov	r1, r7
    5c4c:	mov	r3, r5
    5c50:	add	r0, pc, r0
    5c54:	str	r2, [r0, #32]
    5c58:	mov	r0, r4
    5c5c:	sub	sp, fp, #28
    5c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c64:	b	8dc0 <rb_sha256_crypt_r>
    5c68:	add	r1, r7, r0
    5c6c:	add	r0, r0, #1
    5c70:	add	r6, r1, #1
    5c74:	str	r6, [r5, #24]
    5c78:	ldrb	r1, [r7, r0]
    5c7c:	cmp	r1, #0
    5c80:	beq	5c90 <rb_crypt+0x470>
    5c84:	cmp	r1, #36	; 0x24
    5c88:	cmpne	r0, #8
    5c8c:	bne	5c68 <rb_crypt+0x448>
    5c90:	str	r7, [sp, #12]
    5c94:	add	r0, pc, #660	; 0x294
    5c98:	sub	sl, fp, #120	; 0x78
    5c9c:	vld1.64	{d16-d17}, [r0 :128]
    5ca0:	mov	r7, sl
    5ca4:	mov	r0, r4
    5ca8:	vst1.32	{d16-d17}, [r7]!
    5cac:	bl	5070 <strlen@plt>
    5cb0:	mov	r5, r0
    5cb4:	lsr	r1, r0, #29
    5cb8:	lsl	r0, r0, #3
    5cbc:	strd	r0, [r7]
    5cc0:	mov	r0, #0
    5cc4:	cmp	r5, #64	; 0x40
    5cc8:	bcc	5d48 <rb_crypt+0x528>
    5ccc:	add	r3, r4, #32
    5cd0:	mov	r0, #48	; 0x30
    5cd4:	mov	r2, r4
    5cd8:	add	r1, sl, #24
    5cdc:	vld1.8	{d16-d17}, [r2], r0
    5ce0:	add	r0, r4, #16
    5ce4:	vld1.8	{d18-d19}, [r3]
    5ce8:	vld1.8	{d20-d21}, [r0]
    5cec:	vld1.8	{d22-d23}, [r2]
    5cf0:	add	r0, sl, #56	; 0x38
    5cf4:	vst1.64	{d18-d19}, [r0]
    5cf8:	add	r0, sl, #40	; 0x28
    5cfc:	vst1.64	{d16-d17}, [r1]
    5d00:	vst1.64	{d20-d21}, [r0]
    5d04:	add	r0, sl, #72	; 0x48
    5d08:	vst1.64	{d22-d23}, [r0]
    5d0c:	mov	r0, sl
    5d10:	bl	8398 <MD5Transform>
    5d14:	mov	r0, #64	; 0x40
    5d18:	cmp	r5, #128	; 0x80
    5d1c:	bcc	5d48 <rb_crypt+0x528>
    5d20:	mov	r7, #64	; 0x40
    5d24:	sub	r9, fp, #120	; 0x78
    5d28:	add	r1, r4, r7
    5d2c:	mov	r0, r9
    5d30:	bl	8398 <MD5Transform>
    5d34:	add	r1, r7, #127	; 0x7f
    5d38:	add	r0, r7, #64	; 0x40
    5d3c:	cmp	r1, r5
    5d40:	mov	r7, r0
    5d44:	bcc	5d28 <rb_crypt+0x508>
    5d48:	add	r1, r4, r0
    5d4c:	sub	r2, r5, r0
    5d50:	add	r0, sl, #24
    5d54:	str	r0, [sp, #32]
    5d58:	bl	5094 <memcpy@plt>
    5d5c:	ldr	r0, [fp, #-104]	; 0xffffff98
    5d60:	ldr	r7, [fp, #-100]	; 0xffffff9c
    5d64:	adds	r5, r0, #24
    5d68:	str	r5, [fp, #-104]	; 0xffffff98
    5d6c:	ubfx	r0, r0, #3, #6
    5d70:	ldr	r9, [sp, #12]
    5d74:	addcs	r7, r7, #1
    5d78:	strcs	r7, [fp, #-100]	; 0xffffff9c
    5d7c:	cmp	r0, #61	; 0x3d
    5d80:	str	r7, [fp, #-100]	; 0xffffff9c
    5d84:	sub	r1, r6, r9
    5d88:	str	r1, [sp, #24]
    5d8c:	bcs	5db4 <rb_crypt+0x594>
    5d90:	mov	r6, #0
    5d94:	b	5de8 <rb_crypt+0x5c8>
    5d98:	mov	r5, r0
    5d9c:	mov	r0, r4
    5da0:	mov	r1, r7
    5da4:	mov	r3, r5
    5da8:	sub	sp, fp, #28
    5dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5db0:	b	a2c0 <rb_sha512_crypt_r>
    5db4:	ldr	r1, [pc, #3892]	; 6cf0 <rb_crypt+0x14d0>
    5db8:	rsb	r6, r0, #64	; 0x40
    5dbc:	add	r0, sl, r0
    5dc0:	add	r0, r0, #24
    5dc4:	mov	r2, r6
    5dc8:	add	r1, pc, r1
    5dcc:	bl	5094 <memcpy@plt>
    5dd0:	ldr	r1, [sp, #32]
    5dd4:	mov	r0, sl
    5dd8:	bl	8398 <MD5Transform>
    5ddc:	ldr	r5, [fp, #-104]	; 0xffffff98
    5de0:	ldr	r7, [fp, #-100]	; 0xffffff9c
    5de4:	mov	r0, #0
    5de8:	add	r0, sl, r0
    5dec:	add	r1, r8, r6
    5df0:	rsb	r2, r6, #3
    5df4:	add	r0, r0, #24
    5df8:	bl	5094 <memcpy@plt>
    5dfc:	ldr	r0, [sp, #24]
    5e00:	add	r0, r5, r0, lsl #3
    5e04:	str	r0, [fp, #-104]	; 0xffffff98
    5e08:	ubfx	r8, r5, #3, #6
    5e0c:	ldr	r6, [sp, #24]
    5e10:	cmp	r0, r5
    5e14:	addcc	r7, r7, #1
    5e18:	rsb	r5, r8, #64	; 0x40
    5e1c:	strcc	r7, [fp, #-100]	; 0xffffff9c
    5e20:	add	r0, r7, r6, lsr #29
    5e24:	mov	r7, #0
    5e28:	cmp	r5, r6
    5e2c:	str	r0, [fp, #-100]	; 0xffffff9c
    5e30:	mov	r0, #0
    5e34:	bhi	63e8 <rb_crypt+0xbc8>
    5e38:	add	r0, sl, r8
    5e3c:	mov	r1, r9
    5e40:	mov	r2, r5
    5e44:	add	r0, r0, #24
    5e48:	bl	5094 <memcpy@plt>
    5e4c:	ldr	r1, [sp, #32]
    5e50:	mov	r0, sl
    5e54:	bl	8398 <MD5Transform>
    5e58:	eor	r0, r8, #127	; 0x7f
    5e5c:	mov	r8, #0
    5e60:	cmp	r0, r6
    5e64:	bcs	63e0 <rb_crypt+0xbc0>
    5e68:	ldr	r6, [sp, #24]
    5e6c:	sub	r8, fp, #120	; 0x78
    5e70:	add	r1, r9, r5
    5e74:	mov	r0, r8
    5e78:	bl	8398 <MD5Transform>
    5e7c:	add	r1, r5, #127	; 0x7f
    5e80:	add	r0, r5, #64	; 0x40
    5e84:	cmp	r1, r6
    5e88:	mov	r5, r0
    5e8c:	bcc	5e70 <rb_crypt+0x650>
    5e90:	mov	r8, #0
    5e94:	b	63e8 <rb_crypt+0xbc8>
    5e98:	sub	r1, r0, #46	; 0x2e
    5e9c:	uxtb	r2, r1
    5ea0:	cmp	r2, #12
    5ea4:	movcs	r1, #0
    5ea8:	ldrb	r2, [r7]
    5eac:	lsl	r1, r1, #6
    5eb0:	cmp	r2, #122	; 0x7a
    5eb4:	bhi	5bd0 <rb_crypt+0x3b0>
    5eb8:	cmp	r2, #97	; 0x61
    5ebc:	bcc	5ed0 <rb_crypt+0x6b0>
    5ec0:	ldr	r6, [pc, #4084]	; 6ebc <rb_crypt+0x169c>
    5ec4:	sub	r3, r2, #59	; 0x3b
    5ec8:	add	r6, pc, r6
    5ecc:	b	5f00 <rb_crypt+0x6e0>
    5ed0:	ldr	r6, [pc, #4072]	; 6ec0 <rb_crypt+0x16a0>
    5ed4:	cmp	r2, #90	; 0x5a
    5ed8:	add	r6, pc, r6
    5edc:	bhi	5f00 <rb_crypt+0x6e0>
    5ee0:	cmp	r2, #65	; 0x41
    5ee4:	bcc	5ef0 <rb_crypt+0x6d0>
    5ee8:	sub	r3, r2, #53	; 0x35
    5eec:	b	5f00 <rb_crypt+0x6e0>
    5ef0:	sub	r3, r2, #46	; 0x2e
    5ef4:	uxtb	r7, r3
    5ef8:	cmp	r7, #12
    5efc:	movcs	r3, #0
    5f00:	cmp	r0, #0
    5f04:	strb	r2, [r6, #44]	; 0x2c
    5f08:	movne	r2, r0
    5f0c:	orr	r0, r3, r1
    5f10:	strb	r2, [r6, #45]	; 0x2d
    5f14:	ldr	r1, [r6, #16]
    5f18:	cmp	r1, r0
    5f1c:	bne	5f40 <rb_crypt+0x720>
    5f20:	ldr	r3, [r6, #12]
    5f24:	b	6034 <rb_crypt+0x814>
    5f28:	nop	{0}
    5f2c:	nop	{0}
    5f30:	.word	0x67452301
    5f34:	.word	0xefcdab89
    5f38:	.word	0x98badcfe
    5f3c:	.word	0x10325476
    5f40:	mov	r2, #4194304	; 0x400000
    5f44:	and	r7, r3, #1
    5f48:	mov	r1, #2048	; 0x800
    5f4c:	str	r0, [r6, #16]
    5f50:	and	r2, r2, r3, lsl #21
    5f54:	and	r1, r1, r0, lsr #1
    5f58:	orr	r2, r2, r7, lsl #23
    5f5c:	and	r7, r3, #4
    5f60:	orr	r2, r2, r7, lsl #19
    5f64:	and	r7, r3, #8
    5f68:	orr	r2, r2, r7, lsl #17
    5f6c:	and	r7, r3, #16
    5f70:	and	r3, r3, #32
    5f74:	orr	r2, r2, r7, lsl #15
    5f78:	orr	r2, r2, r3, lsl #13
    5f7c:	and	r3, r0, #64	; 0x40
    5f80:	orr	r2, r2, r3, lsl #11
    5f84:	and	r3, r0, #128	; 0x80
    5f88:	orr	r2, r2, r3, lsl #9
    5f8c:	and	r3, r0, #256	; 0x100
    5f90:	orr	r2, r2, r3, lsl #7
    5f94:	and	r3, r0, #512	; 0x200
    5f98:	orr	r2, r2, r3, lsl #5
    5f9c:	and	r3, r0, #1024	; 0x400
    5fa0:	orr	r2, r2, r3, lsl #3
    5fa4:	and	r3, r0, #2048	; 0x800
    5fa8:	orr	r2, r2, r3, lsl #1
    5fac:	orr	r1, r2, r1
    5fb0:	mov	r2, #1024	; 0x400
    5fb4:	and	r2, r2, r0, lsr #3
    5fb8:	orr	r1, r1, r2
    5fbc:	mov	r2, #512	; 0x200
    5fc0:	and	r2, r2, r0, lsr #5
    5fc4:	orr	r1, r1, r2
    5fc8:	mov	r2, #256	; 0x100
    5fcc:	and	r2, r2, r0, lsr #7
    5fd0:	orr	r1, r1, r2
    5fd4:	mov	r2, #128	; 0x80
    5fd8:	and	r2, r2, r0, lsr #9
    5fdc:	orr	r1, r1, r2
    5fe0:	mov	r2, #64	; 0x40
    5fe4:	and	r2, r2, r0, lsr #11
    5fe8:	orr	r1, r1, r2
    5fec:	mov	r2, #32
    5ff0:	and	r2, r2, r0, lsr #13
    5ff4:	orr	r1, r1, r2
    5ff8:	mov	r2, #16
    5ffc:	and	r2, r2, r0, lsr #15
    6000:	orr	r1, r1, r2
    6004:	mov	r2, #8
    6008:	and	r2, r2, r0, lsr #17
    600c:	orr	r1, r1, r2
    6010:	mov	r2, #4
    6014:	and	r2, r2, r0, lsr #19
    6018:	orr	r1, r1, r2
    601c:	mov	r2, #2
    6020:	and	r2, r2, r0, lsr #21
    6024:	ubfx	r0, r0, #23, #1
    6028:	orr	r1, r1, r2
    602c:	orr	r3, r1, r0
    6030:	str	r3, [r6, #12]
    6034:	ldr	r0, [pc, #3720]	; 6ec4 <rb_crypt+0x16a4>
    6038:	mov	r4, #4096	; 0x1000
    603c:	mov	ip, #5120	; 0x1400
    6040:	mov	r5, #7168	; 0x1c00
    6044:	mov	r9, #4096	; 0x1000
    6048:	add	r0, pc, r0
    604c:	ldr	r1, [r0, r4]
    6050:	ldr	r2, [r0, #1024]	; 0x400
    6054:	ldr	r7, [pc, #3692]	; 6ec8 <rb_crypt+0x16a8>
    6058:	ldr	r7, [pc, r7]
    605c:	orr	r2, r2, r7
    6060:	ldr	r7, [r0, #2048]	; 0x800
    6064:	orr	r2, r2, r7
    6068:	ldr	r7, [r0, #3072]	; 0xc00
    606c:	orr	r2, r2, r7
    6070:	ldr	r7, [r0, ip]
    6074:	orr	r1, r2, r1
    6078:	orr	r1, r1, r7
    607c:	mov	r7, #6144	; 0x1800
    6080:	ldr	r6, [r0, r7]
    6084:	ldr	r0, [r0, r5]
    6088:	orr	r1, r1, r6
    608c:	orr	r6, r1, r0
    6090:	ldr	r0, [pc, #3636]	; 6ecc <rb_crypt+0x16ac>
    6094:	add	r0, pc, r0
    6098:	ldr	r1, [r0, r4]
    609c:	ldr	r4, [r0, #1024]	; 0x400
    60a0:	ldr	r2, [pc, #3624]	; 6ed0 <rb_crypt+0x16b0>
    60a4:	ldr	r2, [pc, r2]
    60a8:	orr	r2, r4, r2
    60ac:	ldr	r4, [r0, #2048]	; 0x800
    60b0:	orr	r2, r2, r4
    60b4:	ldr	r4, [r0, #3072]	; 0xc00
    60b8:	orr	r2, r2, r4
    60bc:	orr	r1, r2, r1
    60c0:	ldr	r2, [r0, ip]
    60c4:	mov	ip, #24
    60c8:	orr	r1, r1, r2
    60cc:	ldr	r2, [r0, r7]
    60d0:	ldr	r0, [r0, r5]
    60d4:	mov	r5, #16515072	; 0xfc0000
    60d8:	mov	r7, #4032	; 0xfc0
    60dc:	orr	r1, r1, r2
    60e0:	orr	lr, r1, r0
    60e4:	ldr	r1, [pc, #3560]	; 6ed4 <rb_crypt+0x16b4>
    60e8:	ldr	r2, [pc, #3560]	; 6ed8 <rb_crypt+0x16b8>
    60ec:	ldr	sl, [pc, #3560]	; 6edc <rb_crypt+0x16bc>
    60f0:	mov	r0, #258048	; 0x3f000
    60f4:	add	r1, pc, r1
    60f8:	add	r2, pc, r2
    60fc:	add	sl, pc, sl
    6100:	mov	r8, lr
    6104:	str	ip, [sp, #36]	; 0x24
    6108:	mov	ip, #0
    610c:	mov	lr, r6
    6110:	and	r4, r0, lr, lsr #11
    6114:	and	r0, r5, lr, ror #9
    6118:	and	r5, lr, #129024	; 0x1f800
    611c:	mov	r6, lr
    6120:	orr	r0, r0, r4
    6124:	and	r4, r7, lr, lsr #13
    6128:	orr	r0, r0, r4
    612c:	ubfx	r4, lr, #15, #6
    6130:	ldr	r7, [pc, #3496]	; 6ee0 <rb_crypt+0x16c0>
    6134:	orr	r0, r0, r4
    6138:	add	r7, pc, r7
    613c:	ldr	r4, [r7, ip, lsl #2]
    6140:	and	r7, lr, #8064	; 0x1f80
    6144:	lsl	r7, r7, #5
    6148:	orr	r7, r7, lr, lsr #31
    614c:	orr	r7, r7, r5, lsl #7
    6150:	and	r5, lr, #504	; 0x1f8
    6154:	eor	r4, r0, r4
    6158:	orr	r7, r7, r5, lsl #3
    615c:	and	r5, lr, #31
    6160:	orr	r7, r7, r5, lsl #1
    6164:	eor	r0, r0, r7
    6168:	and	r0, r0, r3
    616c:	eor	r5, r4, r0
    6170:	ldrb	r4, [r1, r5, lsr #12]
    6174:	bfc	r5, #12, #20
    6178:	add	r5, r1, r5
    617c:	ldrb	r5, [r5, r9]
    6180:	ldr	r4, [r2, r4, lsl #2]
    6184:	add	r5, r2, r5, lsl #2
    6188:	ldr	r5, [r5, #1024]	; 0x400
    618c:	orr	r5, r5, r4
    6190:	ldr	r4, [sl, ip, lsl #2]
    6194:	add	ip, ip, #1
    6198:	cmp	ip, #16
    619c:	eor	r7, r7, r4
    61a0:	mov	r4, #8192	; 0x2000
    61a4:	eor	r0, r7, r0
    61a8:	add	r7, r1, r0, lsr #12
    61ac:	bfc	r0, #12, #20
    61b0:	ldrb	r7, [r7, r4]
    61b4:	mov	r4, #12288	; 0x3000
    61b8:	add	r0, r1, r0
    61bc:	ldrb	r0, [r0, r4]
    61c0:	add	r7, r2, r7, lsl #2
    61c4:	add	r0, r2, r0, lsl #2
    61c8:	ldr	r7, [r7, #2048]	; 0x800
    61cc:	ldr	r0, [r0, #3072]	; 0xc00
    61d0:	orr	r7, r5, r7
    61d4:	mov	r5, #16515072	; 0xfc0000
    61d8:	orr	r0, r7, r0
    61dc:	mov	r7, #4032	; 0xfc0
    61e0:	eor	lr, r0, r8
    61e4:	mov	r0, #258048	; 0x3f000
    61e8:	mov	r8, r6
    61ec:	bne	6110 <rb_crypt+0x8f0>
    61f0:	ldr	r4, [sp, #36]	; 0x24
    61f4:	sub	ip, r4, #1
    61f8:	cmp	r4, #0
    61fc:	bne	6100 <rb_crypt+0x8e0>
    6200:	ldr	r5, [pc, #3292]	; 6ee4 <rb_crypt+0x16c4>
    6204:	uxtb	r8, r6
    6208:	mov	r1, #7168	; 0x1c00
    620c:	lsr	ip, r6, #24
    6210:	add	r5, pc, r5
    6214:	add	r0, r5, r8, lsl #2
    6218:	ldr	r0, [r0, r1]
    621c:	str	r0, [sp, #36]	; 0x24
    6220:	ubfx	r7, r6, #8, #8
    6224:	mov	r0, #6144	; 0x1800
    6228:	add	r2, r5, r7, lsl #2
    622c:	ldr	r0, [r2, r0]
    6230:	uxtb	r2, lr
    6234:	str	r0, [sp, #32]
    6238:	ubfx	r4, r6, #16, #8
    623c:	mov	r0, #5120	; 0x1400
    6240:	add	r3, r5, r4, lsl #2
    6244:	ldr	r0, [r3, r0]
    6248:	add	r3, r5, ip, lsl #2
    624c:	str	r0, [sp, #28]
    6250:	mov	r0, #4096	; 0x1000
    6254:	ldr	r0, [r3, r0]
    6258:	add	r3, r5, r2, lsl #2
    625c:	str	r0, [sp, #24]
    6260:	ldr	r0, [r3, #3072]	; 0xc00
    6264:	str	r0, [sp, #20]
    6268:	ubfx	r0, lr, #8, #8
    626c:	add	r3, r5, r0, lsl #2
    6270:	ldr	r1, [r3, #2048]	; 0x800
    6274:	mov	r3, #7168	; 0x1c00
    6278:	str	r1, [sp, #16]
    627c:	ubfx	r1, lr, #16, #8
    6280:	lsr	lr, lr, #24
    6284:	ldr	sl, [r5, lr, lsl #2]
    6288:	add	r5, r5, r1, lsl #2
    628c:	ldr	r9, [r5, #1024]	; 0x400
    6290:	ldr	r5, [pc, #3152]	; 6ee8 <rb_crypt+0x16c8>
    6294:	add	r5, pc, r5
    6298:	add	r6, r5, r8, lsl #2
    629c:	add	r7, r5, r7, lsl #2
    62a0:	add	r4, r5, r4, lsl #2
    62a4:	add	r1, r5, r1, lsl #2
    62a8:	add	r0, r5, r0, lsl #2
    62ac:	add	r2, r5, r2, lsl #2
    62b0:	ldr	r8, [r6, r3]
    62b4:	mov	r3, #6144	; 0x1800
    62b8:	mov	r6, #4096	; 0x1000
    62bc:	ldr	r1, [r1, #1024]	; 0x400
    62c0:	ldr	r0, [r0, #2048]	; 0x800
    62c4:	ldr	r2, [r2, #3072]	; 0xc00
    62c8:	ldr	r7, [r7, r3]
    62cc:	mov	r3, #5120	; 0x1400
    62d0:	ldr	r4, [r4, r3]
    62d4:	add	r3, r5, ip, lsl #2
    62d8:	ldr	ip, [r3, r6]
    62dc:	ldr	r6, [r5, lr, lsl #2]
    62e0:	ldr	r3, [pc, #3076]	; 6eec <rb_crypt+0x16cc>
    62e4:	mov	r5, #0
    62e8:	orr	r1, r1, r6
    62ec:	add	r3, pc, r3
    62f0:	orr	r0, r1, r0
    62f4:	strb	r5, [r3, #57]	; 0x39
    62f8:	add	r6, r3, #44	; 0x2c
    62fc:	orr	r0, r0, r2
    6300:	orr	r0, r0, ip
    6304:	orr	r0, r0, r4
    6308:	orr	r0, r0, r7
    630c:	ldr	r7, [pc, #3036]	; 6ef0 <rb_crypt+0x16d0>
    6310:	ldr	r1, [sp, #16]
    6314:	orr	r5, r0, r8
    6318:	add	r7, pc, r7
    631c:	ldrb	r0, [r7, r5, lsr #26]
    6320:	strb	r0, [r3, #46]	; 0x2e
    6324:	orr	r0, r9, sl
    6328:	orr	r0, r0, r1
    632c:	ldr	r1, [sp, #20]
    6330:	orr	r0, r0, r1
    6334:	ldr	r1, [sp, #24]
    6338:	orr	r0, r0, r1
    633c:	ldr	r1, [sp, #28]
    6340:	orr	r0, r0, r1
    6344:	ldr	r1, [sp, #32]
    6348:	orr	r0, r0, r1
    634c:	ldr	r1, [sp, #36]	; 0x24
    6350:	orr	r0, r0, r1
    6354:	and	r1, r0, #15
    6358:	ldrb	r1, [r7, r1, lsl #2]
    635c:	strb	r1, [r3, #56]	; 0x38
    6360:	ubfx	r1, r0, #4, #6
    6364:	ldrb	r1, [r7, r1]
    6368:	strb	r1, [r3, #55]	; 0x37
    636c:	ubfx	r1, r0, #10, #6
    6370:	ldrb	r1, [r7, r1]
    6374:	strb	r1, [r3, #54]	; 0x36
    6378:	ubfx	r1, r0, #16, #6
    637c:	ldrb	r1, [r7, r1]
    6380:	strb	r1, [r3, #53]	; 0x35
    6384:	ubfx	r1, r0, #22, #6
    6388:	lsr	r0, r0, #16
    638c:	ldrb	r1, [r7, r1]
    6390:	orr	r0, r0, r5, lsl #16
    6394:	strb	r1, [r3, #52]	; 0x34
    6398:	ubfx	r1, r5, #2, #6
    639c:	ldrb	r1, [r7, r1]
    63a0:	strb	r1, [r3, #50]	; 0x32
    63a4:	ubfx	r1, r5, #8, #6
    63a8:	ldrb	r1, [r7, r1]
    63ac:	strb	r1, [r3, #49]	; 0x31
    63b0:	ubfx	r1, r5, #14, #6
    63b4:	ldrb	r1, [r7, r1]
    63b8:	strb	r1, [r3, #48]	; 0x30
    63bc:	ubfx	r1, r5, #20, #6
    63c0:	ldrb	r1, [r7, r1]
    63c4:	strb	r1, [r3, #47]	; 0x2f
    63c8:	ubfx	r0, r0, #12, #6
    63cc:	ldrb	r0, [r7, r0]
    63d0:	strb	r0, [r3, #51]	; 0x33
    63d4:	mov	r0, r6
    63d8:	sub	sp, fp, #28
    63dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63e0:	ldr	r6, [sp, #24]
    63e4:	mov	r0, r5
    63e8:	lsl	r1, r6, #3
    63ec:	sub	r2, r6, r0
    63f0:	str	r1, [sp, #20]
    63f4:	add	r1, r9, r0
    63f8:	add	r0, sl, r8
    63fc:	add	r0, r0, #24
    6400:	bl	5094 <memcpy@plt>
    6404:	add	r0, pc, #996	; 0x3e4
    6408:	add	r9, sp, #56	; 0x38
    640c:	vld1.64	{d16-d17}, [r0 :128]
    6410:	mov	r6, r9
    6414:	mov	r0, r4
    6418:	vst1.32	{d16-d17}, [r6]!
    641c:	bl	5070 <strlen@plt>
    6420:	mov	r5, r0
    6424:	lsr	r1, r0, #29
    6428:	lsl	r0, r0, #3
    642c:	cmp	r5, #64	; 0x40
    6430:	strd	r0, [r6]
    6434:	bcc	64b4 <rb_crypt+0xc94>
    6438:	add	r3, r4, #32
    643c:	mov	r0, #48	; 0x30
    6440:	mov	r2, r4
    6444:	add	r1, r9, #24
    6448:	vld1.8	{d16-d17}, [r2], r0
    644c:	add	r0, r4, #16
    6450:	vld1.8	{d18-d19}, [r3]
    6454:	vld1.8	{d20-d21}, [r0]
    6458:	vld1.8	{d22-d23}, [r2]
    645c:	add	r0, r9, #56	; 0x38
    6460:	vst1.64	{d18-d19}, [r0]
    6464:	add	r0, r9, #40	; 0x28
    6468:	vst1.64	{d16-d17}, [r1]
    646c:	vst1.64	{d20-d21}, [r0]
    6470:	add	r0, r9, #72	; 0x48
    6474:	vst1.64	{d22-d23}, [r0]
    6478:	mov	r0, r9
    647c:	bl	8398 <MD5Transform>
    6480:	mov	r7, #64	; 0x40
    6484:	cmp	r5, #128	; 0x80
    6488:	bcc	64b4 <rb_crypt+0xc94>
    648c:	mov	r6, #64	; 0x40
    6490:	add	r8, sp, #56	; 0x38
    6494:	add	r1, r4, r6
    6498:	mov	r0, r8
    649c:	bl	8398 <MD5Transform>
    64a0:	add	r0, r6, #127	; 0x7f
    64a4:	add	r7, r6, #64	; 0x40
    64a8:	cmp	r0, r5
    64ac:	mov	r6, r7
    64b0:	bcc	6494 <rb_crypt+0xc74>
    64b4:	ldr	r0, [sp, #24]
    64b8:	add	r1, r4, r7
    64bc:	sub	r2, r5, r7
    64c0:	lsr	r0, r0, #29
    64c4:	str	r0, [sp, #16]
    64c8:	add	r0, r9, #24
    64cc:	str	r0, [sp, #36]	; 0x24
    64d0:	bl	5094 <memcpy@plt>
    64d4:	ldr	r1, [sp, #72]	; 0x48
    64d8:	ldr	r2, [sp, #20]
    64dc:	ldr	r0, [sp, #76]	; 0x4c
    64e0:	adds	r2, r1, r2
    64e4:	str	r2, [sp, #72]	; 0x48
    64e8:	ubfx	r6, r1, #3, #6
    64ec:	ldr	r1, [sp, #16]
    64f0:	ldr	r7, [sp, #24]
    64f4:	addcs	r0, r0, #1
    64f8:	rsb	r5, r6, #64	; 0x40
    64fc:	strcs	r0, [sp, #76]	; 0x4c
    6500:	add	r0, r0, r1
    6504:	cmp	r5, r7
    6508:	str	r0, [sp, #76]	; 0x4c
    650c:	bls	6518 <rb_crypt+0xcf8>
    6510:	mov	r5, #0
    6514:	b	657c <rb_crypt+0xd5c>
    6518:	ldr	r1, [sp, #12]
    651c:	add	r0, r9, r6
    6520:	mov	r2, r5
    6524:	add	r0, r0, #24
    6528:	bl	5094 <memcpy@plt>
    652c:	ldr	r1, [sp, #36]	; 0x24
    6530:	mov	r0, r9
    6534:	bl	8398 <MD5Transform>
    6538:	eor	r0, r6, #127	; 0x7f
    653c:	mov	r6, #0
    6540:	cmp	r0, r7
    6544:	bcs	657c <rb_crypt+0xd5c>
    6548:	ldr	r6, [sp, #24]
    654c:	ldr	r8, [sp, #12]
    6550:	add	r7, sp, #56	; 0x38
    6554:	add	r1, r8, r5
    6558:	mov	r0, r7
    655c:	bl	8398 <MD5Transform>
    6560:	add	r1, r5, #127	; 0x7f
    6564:	add	r0, r5, #64	; 0x40
    6568:	cmp	r1, r6
    656c:	mov	r5, r0
    6570:	bcc	6554 <rb_crypt+0xd34>
    6574:	mov	r5, r0
    6578:	mov	r6, #0
    657c:	ldr	r0, [sp, #12]
    6580:	add	r1, r0, r5
    6584:	ldr	r0, [sp, #24]
    6588:	sub	r2, r0, r5
    658c:	add	r0, r9, r6
    6590:	add	r0, r0, #24
    6594:	bl	5094 <memcpy@plt>
    6598:	mov	r0, r4
    659c:	bl	5070 <strlen@plt>
    65a0:	ldr	r1, [sp, #72]	; 0x48
    65a4:	mov	r7, r0
    65a8:	ldr	r0, [sp, #76]	; 0x4c
    65ac:	add	r2, r1, r7, lsl #3
    65b0:	cmp	r2, r1
    65b4:	str	r2, [sp, #72]	; 0x48
    65b8:	ubfx	r8, r1, #3, #6
    65bc:	addcc	r0, r0, #1
    65c0:	rsb	r5, r8, #64	; 0x40
    65c4:	strcc	r0, [sp, #76]	; 0x4c
    65c8:	add	r0, r0, r7, lsr #29
    65cc:	cmp	r5, r7
    65d0:	str	r0, [sp, #76]	; 0x4c
    65d4:	bls	65e0 <rb_crypt+0xdc0>
    65d8:	mov	r5, #0
    65dc:	b	6638 <rb_crypt+0xe18>
    65e0:	add	r0, r9, r8
    65e4:	mov	r1, r4
    65e8:	mov	r2, r5
    65ec:	add	r0, r0, #24
    65f0:	bl	5094 <memcpy@plt>
    65f4:	ldr	r1, [sp, #36]	; 0x24
    65f8:	mov	r0, r9
    65fc:	bl	8398 <MD5Transform>
    6600:	eor	r0, r8, #127	; 0x7f
    6604:	mov	r8, #0
    6608:	cmp	r0, r7
    660c:	bcs	6638 <rb_crypt+0xe18>
    6610:	add	r6, sp, #56	; 0x38
    6614:	add	r1, r4, r5
    6618:	mov	r0, r6
    661c:	bl	8398 <MD5Transform>
    6620:	add	r1, r5, #127	; 0x7f
    6624:	add	r0, r5, #64	; 0x40
    6628:	cmp	r1, r7
    662c:	mov	r5, r0
    6630:	bcc	6614 <rb_crypt+0xdf4>
    6634:	mov	r5, r0
    6638:	add	r0, r9, r8
    663c:	add	r1, r4, r5
    6640:	sub	r2, r7, r5
    6644:	add	r0, r0, #24
    6648:	bl	5094 <memcpy@plt>
    664c:	add	r0, sp, #40	; 0x28
    6650:	mov	r1, r9
    6654:	bl	81e0 <MD5Final>
    6658:	mov	r0, r4
    665c:	bl	5070 <strlen@plt>
    6660:	cmp	r0, #1
    6664:	blt	6740 <rb_crypt+0xf20>
    6668:	mov	r6, r0
    666c:	b	6698 <rb_crypt+0xe78>
    6670:	mov	r5, #0
    6674:	add	r0, sp, #40	; 0x28
    6678:	sub	r2, r7, r5
    667c:	add	r1, r0, r5
    6680:	add	r0, sl, r8
    6684:	add	r0, r0, #24
    6688:	bl	5094 <memcpy@plt>
    668c:	sub	r6, r6, #16
    6690:	cmp	r6, #0
    6694:	ble	6740 <rb_crypt+0xf20>
    6698:	ldr	r1, [fp, #-104]	; 0xffffff98
    669c:	cmp	r6, #16
    66a0:	mov	r7, r6
    66a4:	ldr	r0, [fp, #-100]	; 0xffffff9c
    66a8:	movge	r7, #16
    66ac:	add	r2, r1, r7, lsl #3
    66b0:	cmp	r2, r7, lsl #3
    66b4:	str	r2, [fp, #-104]	; 0xffffff98
    66b8:	ubfx	r8, r1, #3, #6
    66bc:	rsb	r5, r8, #64	; 0x40
    66c0:	addcc	r0, r0, #1
    66c4:	strcc	r0, [fp, #-100]	; 0xffffff9c
    66c8:	add	r0, r0, r7, lsr #29
    66cc:	cmp	r5, r7
    66d0:	str	r0, [fp, #-100]	; 0xffffff9c
    66d4:	bhi	6670 <rb_crypt+0xe50>
    66d8:	add	r0, sl, r8
    66dc:	add	r1, sp, #40	; 0x28
    66e0:	mov	r2, r5
    66e4:	add	r0, r0, #24
    66e8:	bl	5094 <memcpy@plt>
    66ec:	ldr	r1, [sp, #32]
    66f0:	mov	r0, sl
    66f4:	bl	8398 <MD5Transform>
    66f8:	eor	r0, r8, #127	; 0x7f
    66fc:	mov	r8, #0
    6700:	cmp	r0, r7
    6704:	bcs	6674 <rb_crypt+0xe54>
    6708:	mov	r9, sl
    670c:	add	sl, sp, #40	; 0x28
    6710:	add	r1, sl, r5
    6714:	mov	r0, r9
    6718:	bl	8398 <MD5Transform>
    671c:	add	r1, r5, #127	; 0x7f
    6720:	add	r0, r5, #64	; 0x40
    6724:	cmp	r1, r7
    6728:	mov	r5, r0
    672c:	bcc	6710 <rb_crypt+0xef0>
    6730:	mov	sl, r9
    6734:	mov	r5, r0
    6738:	add	r9, sp, #56	; 0x38
    673c:	b	6674 <rb_crypt+0xe54>
    6740:	vmov.i32	q8, #0	; 0x00000000
    6744:	add	r0, sp, #40	; 0x28
    6748:	vst1.64	{d16-d17}, [r0]
    674c:	mov	r0, r4
    6750:	bl	5070 <strlen@plt>
    6754:	cmp	r0, #0
    6758:	beq	6848 <rb_crypt+0x1028>
    675c:	mov	r7, r0
    6760:	mov	r5, #0
    6764:	b	678c <rb_crypt+0xf6c>
    6768:	add	r1, r4, r2
    676c:	add	r0, sl, r6
    6770:	eor	r2, r2, #1
    6774:	add	r0, r0, #24
    6778:	bl	5094 <memcpy@plt>
    677c:	lsr	r0, r7, #1
    6780:	cmp	r5, r7, lsr #1
    6784:	mov	r7, r0
    6788:	beq	6848 <rb_crypt+0x1028>
    678c:	ldr	r2, [fp, #-104]	; 0xffffff98
    6790:	ldr	r0, [fp, #-100]	; 0xffffff9c
    6794:	tst	r7, #1
    6798:	add	r1, r2, #8
    679c:	str	r1, [fp, #-104]	; 0xffffff98
    67a0:	ubfx	r6, r2, #3, #6
    67a4:	bne	6800 <rb_crypt+0xfe0>
    67a8:	cmp	r1, #7
    67ac:	mov	r2, #0
    67b0:	addls	r0, r0, #1
    67b4:	strls	r0, [fp, #-100]	; 0xffffff9c
    67b8:	cmp	r6, #63	; 0x3f
    67bc:	str	r0, [fp, #-100]	; 0xffffff9c
    67c0:	bne	6768 <rb_crypt+0xf48>
    67c4:	ldrb	r0, [r4]
    67c8:	ldr	r1, [sp, #32]
    67cc:	strb	r0, [fp, #-33]	; 0xffffffdf
    67d0:	mov	r0, sl
    67d4:	bl	8398 <MD5Transform>
    67d8:	mov	r2, #1
    67dc:	mov	r6, #0
    67e0:	b	6768 <rb_crypt+0xf48>
    67e4:	nop	{0}
    67e8:	nop	{0}
    67ec:	nop	{0}
    67f0:	.word	0x67452301
    67f4:	.word	0xefcdab89
    67f8:	.word	0x98badcfe
    67fc:	.word	0x10325476
    6800:	cmp	r1, #7
    6804:	mov	r2, #0
    6808:	addls	r0, r0, #1
    680c:	strls	r0, [fp, #-100]	; 0xffffff9c
    6810:	cmp	r6, #63	; 0x3f
    6814:	str	r0, [fp, #-100]	; 0xffffff9c
    6818:	bne	6834 <rb_crypt+0x1014>
    681c:	ldr	r1, [sp, #32]
    6820:	mov	r6, #0
    6824:	mov	r0, sl
    6828:	strb	r6, [fp, #-33]	; 0xffffffdf
    682c:	bl	8398 <MD5Transform>
    6830:	mov	r2, #1
    6834:	add	r0, sp, #40	; 0x28
    6838:	orr	r1, r0, r2
    683c:	b	676c <rb_crypt+0xf4c>
    6840:	.word	0x00039f94
    6844:	.word	0x00014c08
    6848:	ldr	r6, [pc, #1616]	; 6ea0 <rb_crypt+0x1680>
    684c:	ldr	r1, [pc, #1616]	; 6ea4 <rb_crypt+0x1684>
    6850:	mov	r2, #120	; 0x78
    6854:	add	r6, pc, r6
    6858:	add	r1, pc, r1
    685c:	mov	r0, r6
    6860:	bl	4f44 <rb_strlcpy@plt>
    6864:	ldr	r0, [pc, #1596]	; 6ea8 <rb_crypt+0x1688>
    6868:	ldr	sl, [sp, #24]
    686c:	add	r0, pc, r0
    6870:	mov	r2, sl
    6874:	ldr	r1, [r0, #20]
    6878:	mov	r5, r0
    687c:	mov	r0, r6
    6880:	bl	5148 <strncat@plt>
    6884:	ldr	r1, [pc, #1568]	; 6eac <rb_crypt+0x168c>
    6888:	mov	r2, #120	; 0x78
    688c:	add	r1, pc, r1
    6890:	bl	53d0 <rb_strlcat@plt>
    6894:	add	r7, sp, #40	; 0x28
    6898:	sub	r1, fp, #120	; 0x78
    689c:	mov	r0, r7
    68a0:	bl	81e0 <MD5Final>
    68a4:	ldr	r0, [r5, #20]
    68a8:	mov	r8, #0
    68ac:	str	r0, [sp, #28]
    68b0:	add	r0, r4, #32
    68b4:	str	r0, [sp, #12]
    68b8:	ldr	r0, [sp, #36]	; 0x24
    68bc:	add	r0, r0, #32
    68c0:	str	r0, [sp, #8]
    68c4:	add	r0, r4, #16
    68c8:	str	r0, [sp, #4]
    68cc:	b	6918 <rb_crypt+0x10f8>
    68d0:	.word	0x00039f0c
    68d4:	.word	0x00039ef8
    68d8:	.word	0x00039ed4
    68dc:	.word	0x00035dd0
    68e0:	.word	0x00034d54
    68e4:	mov	r7, #0
    68e8:	add	r0, r9, r6
    68ec:	add	r1, r4, r7
    68f0:	sub	r2, r5, r7
    68f4:	add	r0, r0, #24
    68f8:	bl	5094 <memcpy@plt>
    68fc:	add	r7, sp, #40	; 0x28
    6900:	mov	r0, r7
    6904:	mov	r1, r9
    6908:	bl	81e0 <MD5Final>
    690c:	add	r8, r8, #1
    6910:	cmp	r8, #1000	; 0x3e8
    6914:	beq	6cf4 <rb_crypt+0x14d4>
    6918:	sub	r0, pc, #304	; 0x130
    691c:	mov	r1, #0
    6920:	vld1.64	{d16-d17}, [r0 :128]
    6924:	mov	r0, r9
    6928:	str	r1, [sp, #76]	; 0x4c
    692c:	vst1.32	{d16-d17}, [r0]!
    6930:	str	r1, [r0]
    6934:	ands	r1, r8, #1
    6938:	mov	r0, #0
    693c:	str	r1, [sp, #32]
    6940:	beq	6a00 <rb_crypt+0x11e0>
    6944:	mov	r0, r4
    6948:	bl	5070 <strlen@plt>
    694c:	mov	r5, r0
    6950:	lsr	r0, r0, #29
    6954:	str	r0, [sp, #76]	; 0x4c
    6958:	lsl	r0, r5, #3
    695c:	cmp	r5, #64	; 0x40
    6960:	str	r0, [sp, #72]	; 0x48
    6964:	mov	r0, #0
    6968:	bcc	69e4 <rb_crypt+0x11c4>
    696c:	ldr	r1, [sp, #12]
    6970:	mov	r0, r4
    6974:	mov	r2, #48	; 0x30
    6978:	vld1.8	{d16-d17}, [r0], r2
    697c:	vld1.8	{d22-d23}, [r0]
    6980:	ldr	r0, [sp, #8]
    6984:	vld1.8	{d18-d19}, [r1]
    6988:	ldr	r1, [sp, #4]
    698c:	vld1.8	{d20-d21}, [r1]
    6990:	ldr	r1, [sp, #36]	; 0x24
    6994:	vst1.8	{d18-d19}, [r0]
    6998:	add	r0, r1, #16
    699c:	vst1.8	{d20-d21}, [r0]
    69a0:	mov	r0, r1
    69a4:	vst1.8	{d16-d17}, [r0], r2
    69a8:	vst1.8	{d22-d23}, [r0]
    69ac:	mov	r0, r9
    69b0:	bl	8398 <MD5Transform>
    69b4:	mov	r0, #64	; 0x40
    69b8:	cmp	r5, #128	; 0x80
    69bc:	bcc	69e4 <rb_crypt+0x11c4>
    69c0:	mov	r6, #64	; 0x40
    69c4:	add	r1, r4, r6
    69c8:	mov	r0, r9
    69cc:	bl	8398 <MD5Transform>
    69d0:	add	r1, r6, #127	; 0x7f
    69d4:	add	r0, r6, #64	; 0x40
    69d8:	cmp	r1, r5
    69dc:	mov	r6, r0
    69e0:	bcc	69c4 <rb_crypt+0x11a4>
    69e4:	add	r1, r4, r0
    69e8:	sub	r2, r5, r0
    69ec:	ldr	r0, [sp, #36]	; 0x24
    69f0:	bl	5094 <memcpy@plt>
    69f4:	b	6a18 <rb_crypt+0x11f8>
    69f8:	.word	0x00036ce8
    69fc:	.word	0x000151f0
    6a00:	str	r0, [sp, #76]	; 0x4c
    6a04:	mov	r0, #128	; 0x80
    6a08:	vld1.64	{d16-d17}, [r7]
    6a0c:	str	r0, [sp, #72]	; 0x48
    6a10:	ldr	r0, [sp, #36]	; 0x24
    6a14:	vst1.64	{d16-d17}, [r0]
    6a18:	movw	r0, #43691	; 0xaaab
    6a1c:	movw	r1, #21846	; 0x5556
    6a20:	movt	r0, #43690	; 0xaaaa
    6a24:	movt	r1, #21845	; 0x5555
    6a28:	mul	r0, r8, r0
    6a2c:	cmp	r0, r1
    6a30:	bcc	6afc <rb_crypt+0x12dc>
    6a34:	ldr	r1, [sp, #72]	; 0x48
    6a38:	ldr	r2, [sp, #20]
    6a3c:	ldr	r0, [sp, #76]	; 0x4c
    6a40:	adds	r2, r1, r2
    6a44:	str	r2, [sp, #72]	; 0x48
    6a48:	ubfx	r6, r1, #3, #6
    6a4c:	ldr	r1, [sp, #16]
    6a50:	addcs	r0, r0, #1
    6a54:	rsb	r5, r6, #64	; 0x40
    6a58:	strcs	r0, [sp, #76]	; 0x4c
    6a5c:	cmp	r5, sl
    6a60:	add	r0, r0, r1
    6a64:	str	r0, [sp, #76]	; 0x4c
    6a68:	bls	6a78 <rb_crypt+0x1258>
    6a6c:	ldr	r7, [sp, #28]
    6a70:	mov	r5, #0
    6a74:	b	6ae4 <rb_crypt+0x12c4>
    6a78:	ldr	r1, [sp, #28]
    6a7c:	add	r0, r9, r6
    6a80:	mov	r2, r5
    6a84:	add	r0, r0, #24
    6a88:	bl	5094 <memcpy@plt>
    6a8c:	ldr	r1, [sp, #36]	; 0x24
    6a90:	mov	r0, r9
    6a94:	bl	8398 <MD5Transform>
    6a98:	eor	r0, r6, #127	; 0x7f
    6a9c:	mov	r6, #0
    6aa0:	cmp	r0, sl
    6aa4:	bcs	6ae0 <rb_crypt+0x12c0>
    6aa8:	ldr	r7, [sp, #28]
    6aac:	add	r1, r7, r5
    6ab0:	mov	r0, r9
    6ab4:	bl	8398 <MD5Transform>
    6ab8:	add	r1, r5, #127	; 0x7f
    6abc:	add	r0, r5, #64	; 0x40
    6ac0:	cmp	r1, sl
    6ac4:	mov	r5, r0
    6ac8:	bcc	6aac <rb_crypt+0x128c>
    6acc:	mov	r5, r0
    6ad0:	b	6ae4 <rb_crypt+0x12c4>
    6ad4:	.word	0x00039c38
    6ad8:	.word	0x00037c28
    6adc:	.word	0x00039c04
    6ae0:	ldr	r7, [sp, #28]
    6ae4:	add	r0, r9, r6
    6ae8:	add	r1, r7, r5
    6aec:	sub	r2, sl, r5
    6af0:	add	r0, r0, #24
    6af4:	bl	5094 <memcpy@plt>
    6af8:	add	r7, sp, #40	; 0x28
    6afc:	movw	r0, #28087	; 0x6db7
    6b00:	movw	r1, #18725	; 0x4925
    6b04:	movt	r0, #46811	; 0xb6db
    6b08:	movt	r1, #9362	; 0x2492
    6b0c:	mul	r0, r8, r0
    6b10:	cmp	r0, r1
    6b14:	bcc	6bd8 <rb_crypt+0x13b8>
    6b18:	mov	r0, r4
    6b1c:	bl	5070 <strlen@plt>
    6b20:	ldr	r1, [sp, #72]	; 0x48
    6b24:	mov	sl, r0
    6b28:	ldr	r0, [sp, #76]	; 0x4c
    6b2c:	add	r2, r1, sl, lsl #3
    6b30:	cmp	r2, r1
    6b34:	str	r2, [sp, #72]	; 0x48
    6b38:	ubfx	r7, r1, #3, #6
    6b3c:	addcc	r0, r0, #1
    6b40:	rsb	r5, r7, #64	; 0x40
    6b44:	strcc	r0, [sp, #76]	; 0x4c
    6b48:	add	r0, r0, sl, lsr #29
    6b4c:	cmp	r5, sl
    6b50:	str	r0, [sp, #76]	; 0x4c
    6b54:	bls	6b68 <rb_crypt+0x1348>
    6b58:	mov	r5, #0
    6b5c:	b	6bbc <rb_crypt+0x139c>
    6b60:	.word	0x00039c44
    6b64:	.word	0x00039c2c
    6b68:	add	r0, r9, r7
    6b6c:	mov	r1, r4
    6b70:	mov	r2, r5
    6b74:	add	r0, r0, #24
    6b78:	bl	5094 <memcpy@plt>
    6b7c:	ldr	r1, [sp, #36]	; 0x24
    6b80:	mov	r0, r9
    6b84:	bl	8398 <MD5Transform>
    6b88:	eor	r0, r7, #127	; 0x7f
    6b8c:	mov	r7, #0
    6b90:	cmp	r0, sl
    6b94:	bcs	6bbc <rb_crypt+0x139c>
    6b98:	add	r1, r4, r5
    6b9c:	mov	r0, r9
    6ba0:	bl	8398 <MD5Transform>
    6ba4:	add	r1, r5, #127	; 0x7f
    6ba8:	add	r0, r5, #64	; 0x40
    6bac:	cmp	r1, sl
    6bb0:	mov	r5, r0
    6bb4:	bcc	6b98 <rb_crypt+0x1378>
    6bb8:	mov	r5, r0
    6bbc:	add	r0, r9, r7
    6bc0:	add	r1, r4, r5
    6bc4:	sub	r2, sl, r5
    6bc8:	add	r0, r0, #24
    6bcc:	bl	5094 <memcpy@plt>
    6bd0:	ldr	sl, [sp, #24]
    6bd4:	add	r7, sp, #40	; 0x28
    6bd8:	ldr	r0, [sp, #32]
    6bdc:	cmp	r0, #0
    6be0:	beq	6c18 <rb_crypt+0x13f8>
    6be4:	ldr	r0, [sp, #72]	; 0x48
    6be8:	ldr	r1, [sp, #76]	; 0x4c
    6bec:	adds	r2, r0, #128	; 0x80
    6bf0:	str	r2, [sp, #72]	; 0x48
    6bf4:	ubfx	r0, r0, #3, #6
    6bf8:	addcs	r1, r1, #1
    6bfc:	strcs	r1, [sp, #76]	; 0x4c
    6c00:	cmp	r0, #48	; 0x30
    6c04:	str	r1, [sp, #76]	; 0x4c
    6c08:	bcs	6cb0 <rb_crypt+0x1490>
    6c0c:	mov	r5, #0
    6c10:	b	6cd8 <rb_crypt+0x14b8>
    6c14:	.word	0x00039bc8
    6c18:	mov	r0, r4
    6c1c:	bl	5070 <strlen@plt>
    6c20:	ldr	r1, [sp, #72]	; 0x48
    6c24:	mov	r5, r0
    6c28:	ldr	r0, [sp, #76]	; 0x4c
    6c2c:	add	r2, r1, r5, lsl #3
    6c30:	cmp	r2, r1
    6c34:	str	r2, [sp, #72]	; 0x48
    6c38:	ubfx	r6, r1, #3, #6
    6c3c:	addcc	r0, r0, #1
    6c40:	rsb	r7, r6, #64	; 0x40
    6c44:	strcc	r0, [sp, #76]	; 0x4c
    6c48:	add	r0, r0, r5, lsr #29
    6c4c:	cmp	r7, r5
    6c50:	str	r0, [sp, #76]	; 0x4c
    6c54:	bhi	68e4 <rb_crypt+0x10c4>
    6c58:	add	r0, r9, r6
    6c5c:	mov	r1, r4
    6c60:	mov	r2, r7
    6c64:	add	r0, r0, #24
    6c68:	bl	5094 <memcpy@plt>
    6c6c:	ldr	r1, [sp, #36]	; 0x24
    6c70:	mov	r0, r9
    6c74:	bl	8398 <MD5Transform>
    6c78:	eor	r0, r6, #127	; 0x7f
    6c7c:	mov	r6, #0
    6c80:	cmp	r0, r5
    6c84:	bcs	68e8 <rb_crypt+0x10c8>
    6c88:	add	r1, r4, r7
    6c8c:	mov	r0, r9
    6c90:	bl	8398 <MD5Transform>
    6c94:	add	r1, r7, #127	; 0x7f
    6c98:	add	r0, r7, #64	; 0x40
    6c9c:	cmp	r1, r5
    6ca0:	mov	r7, r0
    6ca4:	bcc	6c88 <rb_crypt+0x1468>
    6ca8:	mov	r7, r0
    6cac:	b	68e8 <rb_crypt+0x10c8>
    6cb0:	rsb	r5, r0, #64	; 0x40
    6cb4:	add	r0, r9, r0
    6cb8:	mov	r1, r7
    6cbc:	add	r0, r0, #24
    6cc0:	mov	r2, r5
    6cc4:	bl	5094 <memcpy@plt>
    6cc8:	ldr	r1, [sp, #36]	; 0x24
    6ccc:	mov	r0, r9
    6cd0:	bl	8398 <MD5Transform>
    6cd4:	mov	r0, #0
    6cd8:	add	r0, r9, r0
    6cdc:	add	r1, r7, r5
    6ce0:	rsb	r2, r5, #16
    6ce4:	add	r0, r0, #24
    6ce8:	bl	5094 <memcpy@plt>
    6cec:	b	6900 <rb_crypt+0x10e0>
    6cf0:	.word	0x000146d0
    6cf4:	ldr	r6, [pc, #436]	; 6eb0 <rb_crypt+0x1690>
    6cf8:	add	r6, pc, r6
    6cfc:	mov	r0, r6
    6d00:	bl	5070 <strlen@plt>
    6d04:	ldrb	r3, [sp, #52]	; 0x34
    6d08:	ldr	r2, [pc, #420]	; 6eb4 <rb_crypt+0x1694>
    6d0c:	and	r1, r3, #63	; 0x3f
    6d10:	add	r2, pc, r2
    6d14:	ldrb	r7, [r2, r1]
    6d18:	mov	r1, r6
    6d1c:	strb	r7, [r1, r0]!
    6d20:	ldrb	r7, [sp, #40]	; 0x28
    6d24:	ldrb	r5, [sp, #46]	; 0x2e
    6d28:	ldrb	lr, [sp, #41]	; 0x29
    6d2c:	ldrb	ip, [sp, #42]	; 0x2a
    6d30:	ldrb	r4, [r2, r7, lsr #2]
    6d34:	orr	r3, r3, r5, lsl #8
    6d38:	strb	r4, [r1, #3]
    6d3c:	ubfx	r3, r3, #6, #6
    6d40:	ldrb	r4, [sp, #53]	; 0x35
    6d44:	ldrb	r3, [r2, r3]
    6d48:	strb	r3, [r1, #1]
    6d4c:	ldrb	r3, [r2, lr, lsr #2]
    6d50:	strb	r3, [r1, #7]
    6d54:	ldrb	r3, [sp, #47]	; 0x2f
    6d58:	orr	r0, r4, r3, lsl #8
    6d5c:	ubfx	r0, r0, #6, #6
    6d60:	ldrb	r0, [r2, r0]
    6d64:	strb	r0, [r1, #5]
    6d68:	and	r0, r4, #63	; 0x3f
    6d6c:	ldrb	r0, [r2, r0]
    6d70:	strb	r0, [r1, #4]
    6d74:	lsl	r0, r5, #8
    6d78:	orr	r0, r0, r7, lsl #16
    6d7c:	ubfx	r0, r0, #12, #6
    6d80:	ldrb	r0, [r2, r0]
    6d84:	strb	r0, [r1, #2]
    6d88:	lsl	r0, r3, #8
    6d8c:	orr	r0, r0, lr, lsl #16
    6d90:	ubfx	r0, r0, #12, #6
    6d94:	ldrb	r7, [sp, #48]	; 0x30
    6d98:	ldrb	r3, [sp, #54]	; 0x36
    6d9c:	ldrb	r0, [r2, r0]
    6da0:	strb	r0, [r1, #6]
    6da4:	ldrb	r0, [r2, ip, lsr #2]
    6da8:	strb	r0, [r1, #11]
    6dac:	lsl	r0, r7, #8
    6db0:	orr	r0, r0, ip, lsl #16
    6db4:	ubfx	r0, r0, #12, #6
    6db8:	ldrb	r0, [r2, r0]
    6dbc:	strb	r0, [r1, #10]
    6dc0:	orr	r0, r3, r7, lsl #8
    6dc4:	ubfx	r0, r0, #6, #6
    6dc8:	ldrb	ip, [sp, #44]	; 0x2c
    6dcc:	ldrb	r7, [sp, #45]	; 0x2d
    6dd0:	ldrb	r0, [r2, r0]
    6dd4:	strb	r0, [r1, #9]
    6dd8:	and	r0, r3, #63	; 0x3f
    6ddc:	ldrb	r3, [sp, #49]	; 0x31
    6de0:	ldrb	r0, [r2, r0]
    6de4:	strb	r0, [r1, #8]
    6de8:	ldrb	r0, [sp, #43]	; 0x2b
    6dec:	ldrb	r5, [r2, r0, lsr #2]
    6df0:	strb	r5, [r1, #15]
    6df4:	ldrb	r5, [r2, ip, lsr #2]
    6df8:	strb	r5, [r1, #19]
    6dfc:	ldrb	r5, [sp, #55]	; 0x37
    6e00:	and	r4, r5, #63	; 0x3f
    6e04:	orr	r5, r5, r3, lsl #8
    6e08:	ldrb	r4, [r2, r4]
    6e0c:	strb	r4, [r1, #12]
    6e10:	and	r4, r7, #63	; 0x3f
    6e14:	ldrb	r4, [r2, r4]
    6e18:	strb	r4, [r1, #16]
    6e1c:	ubfx	r5, r5, #6, #6
    6e20:	ldrb	r5, [r2, r5]
    6e24:	strb	r5, [r1, #13]
    6e28:	ldrb	r5, [sp, #50]	; 0x32
    6e2c:	orr	r7, r7, r5, lsl #8
    6e30:	ubfx	r7, r7, #6, #6
    6e34:	ldrb	r7, [r2, r7]
    6e38:	strb	r7, [r1, #17]
    6e3c:	lsl	r7, r3, #8
    6e40:	orr	r0, r7, r0, lsl #16
    6e44:	ubfx	r0, r0, #12, #6
    6e48:	ldrb	r0, [r2, r0]
    6e4c:	strb	r0, [r1, #14]
    6e50:	lsl	r0, r5, #8
    6e54:	orr	r0, r0, ip, lsl #16
    6e58:	ubfx	r0, r0, #12, #6
    6e5c:	ldrb	r0, [r2, r0]
    6e60:	strb	r0, [r1, #18]
    6e64:	ldrb	r0, [sp, #51]	; 0x33
    6e68:	ldrb	r3, [r2, r0, lsr #6]
    6e6c:	and	r0, r0, #63	; 0x3f
    6e70:	ldrb	r0, [r2, r0]
    6e74:	strb	r3, [r1, #21]
    6e78:	strb	r0, [r1, #20]
    6e7c:	add	r0, r1, #22
    6e80:	ldr	r2, [pc, #48]	; 6eb8 <rb_crypt+0x1698>
    6e84:	add	r2, pc, r2
    6e88:	str	r0, [r2, #28]
    6e8c:	mov	r0, #0
    6e90:	strb	r0, [r1, #22]
    6e94:	mov	r0, r6
    6e98:	sub	sp, fp, #28
    6e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ea0:	.word	0x00038f4c
    6ea4:	.word	0x00013c40
    6ea8:	.word	0x00038fac
    6eac:	.word	0x00013c0e
    6eb0:	.word	0x00038aa8
    6eb4:	.word	0x00013747
    6eb8:	.word	0x00038994
    6ebc:	.word	0x00039950
    6ec0:	.word	0x00039940
    6ec4:	.word	0x0002e6d8
    6ec8:	.word	0x0002e6c8
    6ecc:	.word	0x0002c68c
    6ed0:	.word	0x0002c67c
    6ed4:	.word	0x000285ac
    6ed8:	.word	0x00038628
    6edc:	.word	0x00039664
    6ee0:	.word	0x000395e8
    6ee4:	.word	0x00032510
    6ee8:	.word	0x0003048c
    6eec:	.word	0x0003952c
    6ef0:	.word	0x0001413f

00006ef4 <rb_des_init>:
    6ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ef8:	add	fp, sp, #28
    6efc:	sub	sp, sp, #92	; 0x5c
    6f00:	ldr	r1, [pc, #3968]	; 7e88 <rb_des_init+0xf94>
    6f04:	add	r1, pc, r1
    6f08:	ldrb	r0, [r1]
    6f0c:	cmp	r0, #0
    6f10:	bne	8128 <rb_des_init+0x1234>
    6f14:	mov	r2, #0
    6f18:	mov	r3, #0
    6f1c:	str	r2, [r1, #4]
    6f20:	str	r2, [r1, #8]
    6f24:	str	r2, [r1, #12]
    6f28:	str	r2, [r1, #16]
    6f2c:	ldr	r1, [pc, #4092]	; 7f30 <rb_des_init+0x103c>
    6f30:	ldr	lr, [pc, #4092]	; 7f34 <rb_des_init+0x1040>
    6f34:	add	r1, pc, r1
    6f38:	add	lr, pc, lr
    6f3c:	and	r6, r2, #16
    6f40:	and	r7, r3, #32
    6f44:	add	r2, r2, #16
    6f48:	orr	r7, r6, r7
    6f4c:	ubfx	r6, r3, #1, #4
    6f50:	orr	r7, r7, r6
    6f54:	ldrb	r7, [r1, r7]
    6f58:	strb	r7, [lr, r3]
    6f5c:	add	r3, r3, #1
    6f60:	cmp	r3, #64	; 0x40
    6f64:	bne	6f3c <rb_des_init+0x48>
    6f68:	mov	r2, #0
    6f6c:	mov	r3, #0
    6f70:	and	r6, r2, #16
    6f74:	and	r7, r3, #32
    6f78:	add	r2, r2, #16
    6f7c:	add	r0, lr, r3
    6f80:	orr	r7, r6, r7
    6f84:	ubfx	r6, r3, #1, #4
    6f88:	add	r3, r3, #1
    6f8c:	cmp	r2, #1024	; 0x400
    6f90:	orr	r7, r7, r6
    6f94:	add	r7, r1, r7
    6f98:	ldrb	r7, [r7, #64]	; 0x40
    6f9c:	strb	r7, [r0, #64]	; 0x40
    6fa0:	bne	6f70 <rb_des_init+0x7c>
    6fa4:	mov	r2, #0
    6fa8:	mov	r3, #0
    6fac:	and	r6, r2, #16
    6fb0:	and	r7, r3, #32
    6fb4:	add	r2, r2, #16
    6fb8:	add	r0, lr, r3
    6fbc:	orr	r7, r6, r7
    6fc0:	ubfx	r6, r3, #1, #4
    6fc4:	add	r3, r3, #1
    6fc8:	cmp	r2, #1024	; 0x400
    6fcc:	orr	r7, r7, r6
    6fd0:	add	r7, r1, r7
    6fd4:	ldrb	r7, [r7, #128]	; 0x80
    6fd8:	strb	r7, [r0, #128]	; 0x80
    6fdc:	bne	6fac <rb_des_init+0xb8>
    6fe0:	mov	r2, #0
    6fe4:	mov	r3, #0
    6fe8:	and	r6, r2, #16
    6fec:	and	r7, r3, #32
    6ff0:	add	r2, r2, #16
    6ff4:	add	r0, lr, r3
    6ff8:	orr	r7, r6, r7
    6ffc:	ubfx	r6, r3, #1, #4
    7000:	add	r3, r3, #1
    7004:	cmp	r2, #1024	; 0x400
    7008:	orr	r7, r7, r6
    700c:	add	r7, r1, r7
    7010:	ldrb	r7, [r7, #192]	; 0xc0
    7014:	strb	r7, [r0, #192]	; 0xc0
    7018:	bne	6fe8 <rb_des_init+0xf4>
    701c:	mov	r2, #0
    7020:	mov	r3, #0
    7024:	and	r6, r2, #16
    7028:	and	r7, r3, #32
    702c:	add	r2, r2, #16
    7030:	add	r0, lr, r3
    7034:	orr	r7, r6, r7
    7038:	ubfx	r6, r3, #1, #4
    703c:	add	r3, r3, #1
    7040:	cmp	r2, #1024	; 0x400
    7044:	orr	r7, r7, r6
    7048:	add	r7, r1, r7
    704c:	ldrb	r7, [r7, #256]	; 0x100
    7050:	strb	r7, [r0, #256]	; 0x100
    7054:	bne	7024 <rb_des_init+0x130>
    7058:	mov	r2, #0
    705c:	mov	r3, #0
    7060:	and	r6, r2, #16
    7064:	and	r7, r3, #32
    7068:	add	r2, r2, #16
    706c:	add	r0, lr, r3
    7070:	orr	r7, r6, r7
    7074:	ubfx	r6, r3, #1, #4
    7078:	add	r3, r3, #1
    707c:	cmp	r2, #1024	; 0x400
    7080:	orr	r7, r7, r6
    7084:	add	r7, r1, r7
    7088:	ldrb	r7, [r7, #320]	; 0x140
    708c:	strb	r7, [r0, #320]	; 0x140
    7090:	bne	7060 <rb_des_init+0x16c>
    7094:	mov	r2, #0
    7098:	mov	r3, #0
    709c:	and	r6, r2, #16
    70a0:	and	r7, r3, #32
    70a4:	add	r2, r2, #16
    70a8:	add	r0, lr, r3
    70ac:	orr	r7, r6, r7
    70b0:	ubfx	r6, r3, #1, #4
    70b4:	add	r3, r3, #1
    70b8:	cmp	r2, #1024	; 0x400
    70bc:	orr	r7, r7, r6
    70c0:	add	r7, r1, r7
    70c4:	ldrb	r7, [r7, #384]	; 0x180
    70c8:	strb	r7, [r0, #384]	; 0x180
    70cc:	bne	709c <rb_des_init+0x1a8>
    70d0:	mov	r2, #0
    70d4:	mov	r3, #0
    70d8:	and	r6, r2, #16
    70dc:	and	r7, r3, #32
    70e0:	add	r2, r2, #16
    70e4:	add	r0, lr, r3
    70e8:	orr	r7, r6, r7
    70ec:	ubfx	r6, r3, #1, #4
    70f0:	add	r3, r3, #1
    70f4:	cmp	r2, #1024	; 0x400
    70f8:	orr	r7, r7, r6
    70fc:	add	r7, r1, r7
    7100:	ldrb	r7, [r7, #448]	; 0x1c0
    7104:	strb	r7, [r0, #448]	; 0x1c0
    7108:	bne	70d8 <rb_des_init+0x1e4>
    710c:	ldr	r1, [pc, #3816]	; 7ffc <rb_des_init+0x1108>
    7110:	mov	ip, #0
    7114:	add	r1, pc, r1
    7118:	ldrb	r3, [lr, ip]
    711c:	lsl	r7, ip, #6
    7120:	mov	r6, #0
    7124:	lsl	r3, r3, #4
    7128:	add	r4, lr, r6
    712c:	orr	r5, r6, r7
    7130:	ldrb	r2, [r4, #64]	; 0x40
    7134:	orr	r2, r3, r2
    7138:	strb	r2, [r1, r5]
    713c:	ldrb	r5, [r4, #65]	; 0x41
    7140:	add	r2, r6, #1
    7144:	add	r6, r6, #2
    7148:	cmp	r6, #64	; 0x40
    714c:	orr	r2, r2, r7
    7150:	orr	r5, r3, r5
    7154:	strb	r5, [r1, r2]
    7158:	bne	7128 <rb_des_init+0x234>
    715c:	add	ip, ip, #1
    7160:	cmp	ip, #64	; 0x40
    7164:	bne	7118 <rb_des_init+0x224>
    7168:	mov	ip, #0
    716c:	add	r3, r1, #4096	; 0x1000
    7170:	add	r7, lr, ip
    7174:	lsl	r6, ip, #6
    7178:	mov	r5, #0
    717c:	ldrb	r7, [r7, #128]	; 0x80
    7180:	lsl	r7, r7, #4
    7184:	add	r2, lr, r5
    7188:	orr	r4, r5, r6
    718c:	ldrb	r0, [r2, #192]	; 0xc0
    7190:	ldrb	r2, [r2, #193]	; 0xc1
    7194:	orr	r0, r7, r0
    7198:	orr	r2, r7, r2
    719c:	strb	r0, [r3, r4]
    71a0:	add	r0, r5, #1
    71a4:	add	r5, r5, #2
    71a8:	orr	r0, r0, r6
    71ac:	cmp	r5, #64	; 0x40
    71b0:	strb	r2, [r3, r0]
    71b4:	bne	7184 <rb_des_init+0x290>
    71b8:	add	ip, ip, #1
    71bc:	cmp	ip, #64	; 0x40
    71c0:	bne	7170 <rb_des_init+0x27c>
    71c4:	mov	ip, #0
    71c8:	add	r3, r1, #8192	; 0x2000
    71cc:	add	r0, lr, ip
    71d0:	lsl	r6, ip, #6
    71d4:	mov	r5, #0
    71d8:	ldrb	r0, [r0, #256]	; 0x100
    71dc:	lsl	r7, r0, #4
    71e0:	add	r4, lr, r5
    71e4:	orr	r0, r5, r6
    71e8:	ldrb	r2, [r4, #320]	; 0x140
    71ec:	orr	r2, r7, r2
    71f0:	strb	r2, [r3, r0]
    71f4:	ldrb	r2, [r4, #321]	; 0x141
    71f8:	add	r0, r5, #1
    71fc:	add	r5, r5, #2
    7200:	cmp	r5, #64	; 0x40
    7204:	orr	r0, r0, r6
    7208:	orr	r2, r7, r2
    720c:	strb	r2, [r3, r0]
    7210:	bne	71e0 <rb_des_init+0x2ec>
    7214:	add	ip, ip, #1
    7218:	cmp	ip, #64	; 0x40
    721c:	bne	71cc <rb_des_init+0x2d8>
    7220:	mov	r2, #0
    7224:	add	r1, r1, #12288	; 0x3000
    7228:	add	r0, lr, r2
    722c:	lsl	r7, r2, #6
    7230:	mov	r6, #0
    7234:	ldrb	r0, [r0, #384]	; 0x180
    7238:	lsl	r3, r0, #4
    723c:	add	r5, lr, r6
    7240:	orr	r0, r6, r7
    7244:	ldrb	r4, [r5, #448]	; 0x1c0
    7248:	ldrb	r5, [r5, #449]	; 0x1c1
    724c:	orr	r4, r3, r4
    7250:	orr	r5, r3, r5
    7254:	strb	r4, [r1, r0]
    7258:	add	r0, r6, #1
    725c:	add	r6, r6, #2
    7260:	orr	r0, r0, r7
    7264:	cmp	r6, #64	; 0x40
    7268:	strb	r5, [r1, r0]
    726c:	bne	723c <rb_des_init+0x348>
    7270:	add	r2, r2, #1
    7274:	cmp	r2, #64	; 0x40
    7278:	bne	7228 <rb_des_init+0x334>
    727c:	ldr	r4, [pc, #3756]	; 8130 <rb_des_init+0x123c>
    7280:	mov	r1, #255	; 0xff
    7284:	mov	r2, #64	; 0x40
    7288:	add	r4, pc, r4
    728c:	mov	r0, r4
    7290:	bl	4ed8 <memset@plt>
    7294:	ldr	r1, [pc, #3736]	; 8134 <rb_des_init+0x1240>
    7298:	ldr	r5, [pc, #3736]	; 8138 <rb_des_init+0x1244>
    729c:	ldr	r2, [pc, #3736]	; 813c <rb_des_init+0x1248>
    72a0:	mov	r0, #0
    72a4:	add	r1, pc, r1
    72a8:	add	r5, pc, r5
    72ac:	add	r2, pc, r2
    72b0:	ldrb	r3, [r1, r0]
    72b4:	sub	r3, r3, #1
    72b8:	strb	r3, [r5, r0]
    72bc:	uxtab	r3, r2, r3
    72c0:	strb	r0, [r3, #56]	; 0x38
    72c4:	add	r0, r0, #1
    72c8:	cmp	r0, #64	; 0x40
    72cc:	bne	72b0 <rb_des_init+0x3bc>
    72d0:	ldr	r0, [pc, #3688]	; 8140 <rb_des_init+0x124c>
    72d4:	mov	r1, #255	; 0xff
    72d8:	mov	r2, #56	; 0x38
    72dc:	add	r0, pc, r0
    72e0:	bl	4ed8 <memset@plt>
    72e4:	ldr	r1, [pc, #3672]	; 8144 <rb_des_init+0x1250>
    72e8:	mov	r0, #0
    72ec:	add	r1, pc, r1
    72f0:	mov	r2, r1
    72f4:	ldrb	r3, [r2, r0]!
    72f8:	ldrb	r2, [r2, #1]
    72fc:	add	r3, r3, r4
    7300:	strb	r0, [r3, #-1]
    7304:	add	r3, r0, #1
    7308:	add	r0, r0, #2
    730c:	add	r2, r2, r4
    7310:	cmp	r0, #56	; 0x38
    7314:	strb	r3, [r2, #-1]
    7318:	bne	72f0 <rb_des_init+0x3fc>
    731c:	ldr	r1, [pc, #3620]	; 8148 <rb_des_init+0x1254>
    7320:	ldr	r7, [pc, #3620]	; 814c <rb_des_init+0x1258>
    7324:	mov	r0, #0
    7328:	add	r1, pc, r1
    732c:	add	r7, pc, r7
    7330:	mov	r2, r1
    7334:	ldrb	r3, [r2, r0]!
    7338:	ldrb	r2, [r2, #1]
    733c:	add	r3, r3, r7
    7340:	strb	r0, [r3, #-1]
    7344:	add	r3, r0, #1
    7348:	add	r0, r0, #2
    734c:	add	r2, r2, r7
    7350:	cmp	r0, #48	; 0x30
    7354:	strb	r3, [r2, #-1]
    7358:	bne	7330 <rb_des_init+0x43c>
    735c:	ldr	r1, [pc, #3564]	; 8150 <rb_des_init+0x125c>
    7360:	mov	r0, #0
    7364:	add	r1, pc, r1
    7368:	str	r1, [sp, #40]	; 0x28
    736c:	ldr	r1, [pc, #3552]	; 8154 <rb_des_init+0x1260>
    7370:	add	r1, pc, r1
    7374:	str	r1, [sp, #36]	; 0x24
    7378:	ldr	r1, [pc, #3544]	; 8158 <rb_des_init+0x1264>
    737c:	add	r1, pc, r1
    7380:	str	r1, [sp, #32]
    7384:	ldr	r1, [pc, #3536]	; 815c <rb_des_init+0x1268>
    7388:	add	r1, pc, r1
    738c:	str	r1, [sp, #28]
    7390:	ldr	r1, [pc, #3528]	; 8160 <rb_des_init+0x126c>
    7394:	add	r1, pc, r1
    7398:	str	r1, [fp, #-36]	; 0xffffffdc
    739c:	ldr	r1, [pc, #3520]	; 8164 <rb_des_init+0x1270>
    73a0:	add	r1, pc, r1
    73a4:	str	r1, [fp, #-40]	; 0xffffffd8
    73a8:	ldr	r1, [pc, #3512]	; 8168 <rb_des_init+0x1274>
    73ac:	add	r1, pc, r1
    73b0:	str	r1, [fp, #-44]	; 0xffffffd4
    73b4:	ldr	r1, [pc, #3504]	; 816c <rb_des_init+0x1278>
    73b8:	add	r1, pc, r1
    73bc:	str	r1, [fp, #-48]	; 0xffffffd0
    73c0:	ldr	ip, [pc, #3496]	; 8170 <rb_des_init+0x127c>
    73c4:	add	ip, pc, ip
    73c8:	b	7444 <rb_des_init+0x550>
    73cc:	ldr	r0, [fp, #-48]	; 0xffffffd0
    73d0:	add	r0, r0, #512	; 0x200
    73d4:	str	r0, [fp, #-48]	; 0xffffffd0
    73d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    73dc:	add	r0, r0, #512	; 0x200
    73e0:	str	r0, [fp, #-44]	; 0xffffffd4
    73e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
    73e8:	add	r0, r0, #512	; 0x200
    73ec:	str	r0, [fp, #-40]	; 0xffffffd8
    73f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    73f4:	add	r0, r0, #512	; 0x200
    73f8:	str	r0, [fp, #-36]	; 0xffffffdc
    73fc:	ldr	r0, [sp, #28]
    7400:	add	r0, r0, #1024	; 0x400
    7404:	str	r0, [sp, #28]
    7408:	ldr	r0, [sp, #32]
    740c:	add	r0, r0, #1024	; 0x400
    7410:	str	r0, [sp, #32]
    7414:	ldr	r0, [sp, #36]	; 0x24
    7418:	add	r0, r0, #1024	; 0x400
    741c:	str	r0, [sp, #36]	; 0x24
    7420:	ldr	r0, [sp, #40]	; 0x28
    7424:	add	r0, r0, #1024	; 0x400
    7428:	str	r0, [sp, #40]	; 0x28
    742c:	ldr	r0, [sp]
    7430:	ldr	r5, [pc, #3400]	; 8180 <rb_des_init+0x128c>
    7434:	add	r0, r0, #1
    7438:	cmp	r0, #8
    743c:	add	r5, pc, r5
    7440:	beq	7e8c <rb_des_init+0xf98>
    7444:	mov	r1, #7
    7448:	str	r0, [sp]
    744c:	mov	r4, #0
    7450:	mov	r7, #0
    7454:	orr	r1, r1, r0, lsl #3
    7458:	str	r1, [sp, #24]
    745c:	mov	r1, #6
    7460:	orr	r1, r1, r0, lsl #3
    7464:	str	r1, [fp, #-52]	; 0xffffffcc
    7468:	mov	r1, #5
    746c:	orr	r1, r1, r0, lsl #3
    7470:	str	r1, [fp, #-56]	; 0xffffffc8
    7474:	mov	r1, #4
    7478:	orr	r1, r1, r0, lsl #3
    747c:	str	r1, [sp, #60]	; 0x3c
    7480:	mov	r1, #3
    7484:	orr	r1, r1, r0, lsl #3
    7488:	str	r1, [sp, #56]	; 0x38
    748c:	mov	r1, #2
    7490:	orr	r1, r1, r0, lsl #3
    7494:	str	r1, [sp, #52]	; 0x34
    7498:	mov	r1, #1
    749c:	orr	r1, r1, r0, lsl #3
    74a0:	lsl	r0, r0, #3
    74a4:	str	r0, [sp, #44]	; 0x2c
    74a8:	str	r1, [sp, #48]	; 0x30
    74ac:	b	74c0 <rb_des_init+0x5cc>
    74b0:	add	r4, r4, #4
    74b4:	add	r7, r7, #1
    74b8:	cmp	r4, #1024	; 0x400
    74bc:	beq	793c <rb_des_init+0xa48>
    74c0:	ldr	r2, [sp, #40]	; 0x28
    74c4:	mov	r6, #0
    74c8:	tst	r7, #128	; 0x80
    74cc:	mov	r3, r5
    74d0:	str	r6, [r2, r4]!
    74d4:	ldr	sl, [sp, #36]	; 0x24
    74d8:	str	r6, [sl, r4]!
    74dc:	ldr	r0, [sp, #32]
    74e0:	str	r6, [r0, r4]!
    74e4:	ldr	r1, [sp, #28]
    74e8:	str	r0, [fp, #-32]	; 0xffffffe0
    74ec:	str	r6, [r1, r4]!
    74f0:	bne	7598 <rb_des_init+0x6a4>
    74f4:	mov	r9, #0
    74f8:	mov	lr, #0
    74fc:	mov	r8, #0
    7500:	tst	r7, #64	; 0x40
    7504:	bne	7618 <rb_des_init+0x724>
    7508:	tst	r7, #32
    750c:	bne	769c <rb_des_init+0x7a8>
    7510:	tst	r7, #16
    7514:	bne	7720 <rb_des_init+0x82c>
    7518:	tst	r7, #8
    751c:	bne	77a4 <rb_des_init+0x8b0>
    7520:	tst	r7, #4
    7524:	bne	7828 <rb_des_init+0x934>
    7528:	tst	r7, #2
    752c:	bne	78ac <rb_des_init+0x9b8>
    7530:	tst	r7, #1
    7534:	beq	74b0 <rb_des_init+0x5bc>
    7538:	ldr	r0, [pc, #3204]	; 81c4 <rb_des_init+0x12d0>
    753c:	ldr	r3, [sp, #24]
    7540:	add	r0, pc, r0
    7544:	add	r0, r0, r3
    7548:	ldrb	r0, [r0, #56]	; 0x38
    754c:	subs	r5, r0, #32
    7550:	movcc	r5, r0
    7554:	movcc	r8, lr
    7558:	movcc	sl, r2
    755c:	ldr	r0, [ip, r5, lsl #2]
    7560:	ldr	r5, [pc, #3168]	; 81c8 <rb_des_init+0x12d4>
    7564:	add	r5, pc, r5
    7568:	orr	r0, r8, r0
    756c:	str	r0, [sl]
    7570:	ldrb	r0, [r5, r3]
    7574:	subs	r2, r0, #32
    7578:	movcc	r2, r0
    757c:	movcc	r6, r9
    7580:	ldr	r0, [ip, r2, lsl #2]
    7584:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7588:	orr	r0, r6, r0
    758c:	movcc	r1, r2
    7590:	str	r0, [r1]
    7594:	b	74b0 <rb_des_init+0x5bc>
    7598:	ldr	r0, [pc, #3028]	; 8174 <rb_des_init+0x1280>
    759c:	ldr	r5, [sp, #44]	; 0x2c
    75a0:	add	r0, pc, r0
    75a4:	add	r0, r0, r5
    75a8:	ldrb	r0, [r0, #56]	; 0x38
    75ac:	cmp	r0, #31
    75b0:	bhi	75c4 <rb_des_init+0x6d0>
    75b4:	ldr	lr, [ip, r0, lsl #2]
    75b8:	mov	r8, #0
    75bc:	str	lr, [r2]
    75c0:	b	75d4 <rb_des_init+0x6e0>
    75c4:	add	r0, ip, r0, lsl #2
    75c8:	mov	lr, #0
    75cc:	ldr	r8, [r0, #-128]	; 0xffffff80
    75d0:	str	r8, [sl]
    75d4:	ldr	r0, [sp, #44]	; 0x2c
    75d8:	mov	r5, r3
    75dc:	ldrb	r0, [r3, r0]
    75e0:	cmp	r0, #31
    75e4:	bhi	7600 <rb_des_init+0x70c>
    75e8:	ldr	r9, [ip, r0, lsl #2]
    75ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
    75f0:	str	r9, [r0]
    75f4:	tst	r7, #64	; 0x40
    75f8:	beq	7508 <rb_des_init+0x614>
    75fc:	b	7618 <rb_des_init+0x724>
    7600:	add	r0, ip, r0, lsl #2
    7604:	mov	r9, #0
    7608:	ldr	r6, [r0, #-128]	; 0xffffff80
    760c:	str	r6, [r1]
    7610:	tst	r7, #64	; 0x40
    7614:	beq	7508 <rb_des_init+0x614>
    7618:	ldr	r0, [pc, #2904]	; 8178 <rb_des_init+0x1284>
    761c:	ldr	r5, [sp, #48]	; 0x30
    7620:	add	r0, pc, r0
    7624:	add	r0, r0, r5
    7628:	ldrb	r0, [r0, #56]	; 0x38
    762c:	cmp	r0, #32
    7630:	bcs	7644 <rb_des_init+0x750>
    7634:	ldr	r0, [ip, r0, lsl #2]
    7638:	orr	lr, lr, r0
    763c:	str	lr, [r2]
    7640:	b	7654 <rb_des_init+0x760>
    7644:	add	r0, ip, r0, lsl #2
    7648:	ldr	r0, [r0, #-128]	; 0xffffff80
    764c:	orr	r8, r8, r0
    7650:	str	r8, [sl]
    7654:	ldr	r0, [sp, #48]	; 0x30
    7658:	mov	r5, r3
    765c:	ldrb	r0, [r3, r0]
    7660:	cmp	r0, #32
    7664:	bcs	7684 <rb_des_init+0x790>
    7668:	ldr	r0, [ip, r0, lsl #2]
    766c:	orr	r9, r9, r0
    7670:	ldr	r0, [fp, #-32]	; 0xffffffe0
    7674:	str	r9, [r0]
    7678:	tst	r7, #32
    767c:	beq	7510 <rb_des_init+0x61c>
    7680:	b	769c <rb_des_init+0x7a8>
    7684:	add	r0, ip, r0, lsl #2
    7688:	ldr	r0, [r0, #-128]	; 0xffffff80
    768c:	orr	r6, r6, r0
    7690:	str	r6, [r1]
    7694:	tst	r7, #32
    7698:	beq	7510 <rb_des_init+0x61c>
    769c:	ldr	r0, [pc, #2828]	; 81b0 <rb_des_init+0x12bc>
    76a0:	ldr	r5, [sp, #52]	; 0x34
    76a4:	add	r0, pc, r0
    76a8:	add	r0, r0, r5
    76ac:	ldrb	r0, [r0, #56]	; 0x38
    76b0:	cmp	r0, #32
    76b4:	bcs	76c8 <rb_des_init+0x7d4>
    76b8:	ldr	r0, [ip, r0, lsl #2]
    76bc:	orr	lr, lr, r0
    76c0:	str	lr, [r2]
    76c4:	b	76d8 <rb_des_init+0x7e4>
    76c8:	add	r0, ip, r0, lsl #2
    76cc:	ldr	r0, [r0, #-128]	; 0xffffff80
    76d0:	orr	r8, r8, r0
    76d4:	str	r8, [sl]
    76d8:	ldr	r0, [sp, #52]	; 0x34
    76dc:	mov	r5, r3
    76e0:	ldrb	r0, [r3, r0]
    76e4:	cmp	r0, #32
    76e8:	bcs	7708 <rb_des_init+0x814>
    76ec:	ldr	r0, [ip, r0, lsl #2]
    76f0:	orr	r9, r9, r0
    76f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
    76f8:	str	r9, [r0]
    76fc:	tst	r7, #16
    7700:	beq	7518 <rb_des_init+0x624>
    7704:	b	7720 <rb_des_init+0x82c>
    7708:	add	r0, ip, r0, lsl #2
    770c:	ldr	r0, [r0, #-128]	; 0xffffff80
    7710:	orr	r6, r6, r0
    7714:	str	r6, [r1]
    7718:	tst	r7, #16
    771c:	beq	7518 <rb_des_init+0x624>
    7720:	ldr	r0, [pc, #2700]	; 81b4 <rb_des_init+0x12c0>
    7724:	ldr	r5, [sp, #56]	; 0x38
    7728:	add	r0, pc, r0
    772c:	add	r0, r0, r5
    7730:	ldrb	r0, [r0, #56]	; 0x38
    7734:	cmp	r0, #32
    7738:	bcs	774c <rb_des_init+0x858>
    773c:	ldr	r0, [ip, r0, lsl #2]
    7740:	orr	lr, lr, r0
    7744:	str	lr, [r2]
    7748:	b	775c <rb_des_init+0x868>
    774c:	add	r0, ip, r0, lsl #2
    7750:	ldr	r0, [r0, #-128]	; 0xffffff80
    7754:	orr	r8, r8, r0
    7758:	str	r8, [sl]
    775c:	ldr	r0, [sp, #56]	; 0x38
    7760:	mov	r5, r3
    7764:	ldrb	r0, [r3, r0]
    7768:	cmp	r0, #32
    776c:	bcs	778c <rb_des_init+0x898>
    7770:	ldr	r0, [ip, r0, lsl #2]
    7774:	orr	r9, r9, r0
    7778:	ldr	r0, [fp, #-32]	; 0xffffffe0
    777c:	str	r9, [r0]
    7780:	tst	r7, #8
    7784:	beq	7520 <rb_des_init+0x62c>
    7788:	b	77a4 <rb_des_init+0x8b0>
    778c:	add	r0, ip, r0, lsl #2
    7790:	ldr	r0, [r0, #-128]	; 0xffffff80
    7794:	orr	r6, r6, r0
    7798:	str	r6, [r1]
    779c:	tst	r7, #8
    77a0:	beq	7520 <rb_des_init+0x62c>
    77a4:	ldr	r0, [pc, #2572]	; 81b8 <rb_des_init+0x12c4>
    77a8:	ldr	r5, [sp, #60]	; 0x3c
    77ac:	add	r0, pc, r0
    77b0:	add	r0, r0, r5
    77b4:	ldrb	r0, [r0, #56]	; 0x38
    77b8:	cmp	r0, #32
    77bc:	bcs	77d0 <rb_des_init+0x8dc>
    77c0:	ldr	r0, [ip, r0, lsl #2]
    77c4:	orr	lr, lr, r0
    77c8:	str	lr, [r2]
    77cc:	b	77e0 <rb_des_init+0x8ec>
    77d0:	add	r0, ip, r0, lsl #2
    77d4:	ldr	r0, [r0, #-128]	; 0xffffff80
    77d8:	orr	r8, r8, r0
    77dc:	str	r8, [sl]
    77e0:	ldr	r0, [sp, #60]	; 0x3c
    77e4:	mov	r5, r3
    77e8:	ldrb	r0, [r3, r0]
    77ec:	cmp	r0, #32
    77f0:	bcs	7810 <rb_des_init+0x91c>
    77f4:	ldr	r0, [ip, r0, lsl #2]
    77f8:	orr	r9, r9, r0
    77fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    7800:	str	r9, [r0]
    7804:	tst	r7, #4
    7808:	beq	7528 <rb_des_init+0x634>
    780c:	b	7828 <rb_des_init+0x934>
    7810:	add	r0, ip, r0, lsl #2
    7814:	ldr	r0, [r0, #-128]	; 0xffffff80
    7818:	orr	r6, r6, r0
    781c:	str	r6, [r1]
    7820:	tst	r7, #4
    7824:	beq	7528 <rb_des_init+0x634>
    7828:	ldr	r0, [pc, #2444]	; 81bc <rb_des_init+0x12c8>
    782c:	ldr	r5, [fp, #-56]	; 0xffffffc8
    7830:	add	r0, pc, r0
    7834:	add	r0, r0, r5
    7838:	ldrb	r0, [r0, #56]	; 0x38
    783c:	cmp	r0, #32
    7840:	bcs	7854 <rb_des_init+0x960>
    7844:	ldr	r0, [ip, r0, lsl #2]
    7848:	orr	lr, lr, r0
    784c:	str	lr, [r2]
    7850:	b	7864 <rb_des_init+0x970>
    7854:	add	r0, ip, r0, lsl #2
    7858:	ldr	r0, [r0, #-128]	; 0xffffff80
    785c:	orr	r8, r8, r0
    7860:	str	r8, [sl]
    7864:	ldr	r0, [fp, #-56]	; 0xffffffc8
    7868:	mov	r5, r3
    786c:	ldrb	r0, [r3, r0]
    7870:	cmp	r0, #32
    7874:	bcs	7894 <rb_des_init+0x9a0>
    7878:	ldr	r0, [ip, r0, lsl #2]
    787c:	orr	r9, r9, r0
    7880:	ldr	r0, [fp, #-32]	; 0xffffffe0
    7884:	str	r9, [r0]
    7888:	tst	r7, #2
    788c:	beq	7530 <rb_des_init+0x63c>
    7890:	b	78ac <rb_des_init+0x9b8>
    7894:	add	r0, ip, r0, lsl #2
    7898:	ldr	r0, [r0, #-128]	; 0xffffff80
    789c:	orr	r6, r6, r0
    78a0:	str	r6, [r1]
    78a4:	tst	r7, #2
    78a8:	beq	7530 <rb_des_init+0x63c>
    78ac:	ldr	r0, [pc, #2316]	; 81c0 <rb_des_init+0x12cc>
    78b0:	mov	r5, ip
    78b4:	ldr	ip, [fp, #-52]	; 0xffffffcc
    78b8:	add	r0, pc, r0
    78bc:	add	r0, r0, ip
    78c0:	mov	ip, r5
    78c4:	ldrb	r0, [r0, #56]	; 0x38
    78c8:	cmp	r0, #32
    78cc:	bcs	78e0 <rb_des_init+0x9ec>
    78d0:	ldr	r0, [r5, r0, lsl #2]
    78d4:	orr	lr, lr, r0
    78d8:	str	lr, [r2]
    78dc:	b	78f0 <rb_des_init+0x9fc>
    78e0:	add	r0, r5, r0, lsl #2
    78e4:	ldr	r0, [r0, #-128]	; 0xffffff80
    78e8:	orr	r8, r8, r0
    78ec:	str	r8, [sl]
    78f0:	ldr	r0, [fp, #-52]	; 0xffffffcc
    78f4:	mov	r5, r3
    78f8:	ldrb	r0, [r3, r0]
    78fc:	cmp	r0, #32
    7900:	bcs	7920 <rb_des_init+0xa2c>
    7904:	ldr	r0, [ip, r0, lsl #2]
    7908:	orr	r9, r9, r0
    790c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    7910:	str	r9, [r0]
    7914:	tst	r7, #1
    7918:	beq	74b0 <rb_des_init+0x5bc>
    791c:	b	7538 <rb_des_init+0x644>
    7920:	add	r0, ip, r0, lsl #2
    7924:	ldr	r0, [r0, #-128]	; 0xffffff80
    7928:	orr	r6, r6, r0
    792c:	str	r6, [r1]
    7930:	tst	r7, #1
    7934:	beq	74b0 <rb_des_init+0x5bc>
    7938:	b	7538 <rb_des_init+0x644>
    793c:	ldr	r0, [sp]
    7940:	mov	r3, #0
    7944:	mov	sl, #0
    7948:	rsb	r1, r0, r0, lsl #3
    794c:	add	r0, r1, #6
    7950:	str	r1, [fp, #-32]	; 0xffffffe0
    7954:	str	r0, [sp, #24]
    7958:	add	r0, r1, #5
    795c:	str	r0, [sp, #20]
    7960:	add	r0, r1, #4
    7964:	str	r0, [sp, #16]
    7968:	add	r0, r1, #3
    796c:	str	r0, [sp, #12]
    7970:	add	r0, r1, #2
    7974:	str	r0, [sp, #8]
    7978:	mov	r0, r1
    797c:	add	r0, r1, #1
    7980:	str	r0, [sp, #4]
    7984:	ldr	r4, [pc, #2112]	; 81cc <rb_des_init+0x12d8>
    7988:	add	r4, pc, r4
    798c:	b	79b0 <rb_des_init+0xabc>
    7990:	add	r0, ip, r1, lsl #2
    7994:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7998:	ldr	r0, [r0, #32]
    799c:	orr	r0, r5, r0
    79a0:	str	r0, [r1, sl, lsl #2]
    79a4:	add	sl, sl, #1
    79a8:	cmp	sl, #128	; 0x80
    79ac:	beq	73cc <rb_des_init+0x4d8>
    79b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
    79b4:	ands	r5, sl, #64	; 0x40
    79b8:	mov	r1, #0
    79bc:	str	r3, [r0, sl, lsl #2]
    79c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
    79c4:	str	r3, [r0, sl, lsl #2]
    79c8:	mov	r0, #0
    79cc:	beq	7a04 <rb_des_init+0xb10>
    79d0:	ldr	r0, [sp, #44]	; 0x2c
    79d4:	mov	r1, #0
    79d8:	ldrb	r2, [r4, r0]
    79dc:	mov	r0, #0
    79e0:	cmp	r2, #255	; 0xff
    79e4:	beq	7a04 <rb_des_init+0xb10>
    79e8:	add	r0, ip, r2, lsl #2
    79ec:	cmp	r2, #27
    79f0:	bhi	7a44 <rb_des_init+0xb50>
    79f4:	ldr	r0, [r0, #16]
    79f8:	ldr	r1, [fp, #-36]	; 0xffffffdc
    79fc:	str	r0, [r1, sl, lsl #2]
    7a00:	mov	r1, #0
    7a04:	ands	r9, sl, #32
    7a08:	beq	7a74 <rb_des_init+0xb80>
    7a0c:	ldr	r2, [sp, #48]	; 0x30
    7a10:	ldrb	r2, [r4, r2]
    7a14:	cmp	r2, #255	; 0xff
    7a18:	beq	7a74 <rb_des_init+0xb80>
    7a1c:	cmp	r2, #28
    7a20:	bcs	7a60 <rb_des_init+0xb6c>
    7a24:	add	r2, ip, r2, lsl #2
    7a28:	ldr	r2, [r2, #16]
    7a2c:	orr	r0, r0, r2
    7a30:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7a34:	str	r0, [r2, sl, lsl #2]
    7a38:	ands	r6, sl, #16
    7a3c:	bne	7a7c <rb_des_init+0xb88>
    7a40:	b	7aa8 <rb_des_init+0xbb4>
    7a44:	ldr	r1, [r0, #-96]	; 0xffffffa0
    7a48:	ldr	r0, [fp, #-40]	; 0xffffffd8
    7a4c:	str	r1, [r0, sl, lsl #2]
    7a50:	mov	r0, #0
    7a54:	ands	r9, sl, #32
    7a58:	bne	7a0c <rb_des_init+0xb18>
    7a5c:	b	7a74 <rb_des_init+0xb80>
    7a60:	add	r2, ip, r2, lsl #2
    7a64:	ldr	r2, [r2, #-96]	; 0xffffffa0
    7a68:	orr	r1, r1, r2
    7a6c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7a70:	str	r1, [r2, sl, lsl #2]
    7a74:	ands	r6, sl, #16
    7a78:	beq	7aa8 <rb_des_init+0xbb4>
    7a7c:	ldr	r2, [sp, #52]	; 0x34
    7a80:	ldrb	r2, [r4, r2]
    7a84:	cmp	r2, #255	; 0xff
    7a88:	beq	7aa8 <rb_des_init+0xbb4>
    7a8c:	cmp	r2, #28
    7a90:	bcs	7ae8 <rb_des_init+0xbf4>
    7a94:	add	r2, ip, r2, lsl #2
    7a98:	ldr	r2, [r2, #16]
    7a9c:	orr	r0, r0, r2
    7aa0:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7aa4:	str	r0, [r2, sl, lsl #2]
    7aa8:	ands	lr, sl, #8
    7aac:	beq	7b1c <rb_des_init+0xc28>
    7ab0:	ldr	r2, [sp, #56]	; 0x38
    7ab4:	ldrb	r2, [r4, r2]
    7ab8:	cmp	r2, #255	; 0xff
    7abc:	beq	7b1c <rb_des_init+0xc28>
    7ac0:	cmp	r2, #28
    7ac4:	bcs	7b08 <rb_des_init+0xc14>
    7ac8:	add	r2, ip, r2, lsl #2
    7acc:	ldr	r2, [r2, #16]
    7ad0:	orr	r0, r0, r2
    7ad4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7ad8:	str	r0, [r2, sl, lsl #2]
    7adc:	ands	r7, sl, #4
    7ae0:	bne	7b24 <rb_des_init+0xc30>
    7ae4:	b	7b50 <rb_des_init+0xc5c>
    7ae8:	add	r2, ip, r2, lsl #2
    7aec:	ldr	r2, [r2, #-96]	; 0xffffffa0
    7af0:	orr	r1, r1, r2
    7af4:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7af8:	str	r1, [r2, sl, lsl #2]
    7afc:	ands	lr, sl, #8
    7b00:	bne	7ab0 <rb_des_init+0xbbc>
    7b04:	b	7b1c <rb_des_init+0xc28>
    7b08:	add	r2, ip, r2, lsl #2
    7b0c:	ldr	r2, [r2, #-96]	; 0xffffffa0
    7b10:	orr	r1, r1, r2
    7b14:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7b18:	str	r1, [r2, sl, lsl #2]
    7b1c:	ands	r7, sl, #4
    7b20:	beq	7b50 <rb_des_init+0xc5c>
    7b24:	ldr	r2, [sp, #60]	; 0x3c
    7b28:	ldrb	r2, [r4, r2]
    7b2c:	cmp	r2, #255	; 0xff
    7b30:	beq	7b50 <rb_des_init+0xc5c>
    7b34:	cmp	r2, #28
    7b38:	bcs	7b90 <rb_des_init+0xc9c>
    7b3c:	add	r2, ip, r2, lsl #2
    7b40:	ldr	r2, [r2, #16]
    7b44:	orr	r0, r0, r2
    7b48:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7b4c:	str	r0, [r2, sl, lsl #2]
    7b50:	ands	r4, sl, #2
    7b54:	beq	7bc8 <rb_des_init+0xcd4>
    7b58:	ldr	r2, [pc, #1648]	; 81d0 <rb_des_init+0x12dc>
    7b5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
    7b60:	add	r2, pc, r2
    7b64:	ldrb	r2, [r2, r3]
    7b68:	cmp	r2, #255	; 0xff
    7b6c:	beq	7bc4 <rb_des_init+0xcd0>
    7b70:	cmp	r2, #28
    7b74:	bcs	7bb0 <rb_des_init+0xcbc>
    7b78:	add	r2, ip, r2, lsl #2
    7b7c:	ldr	r2, [r2, #16]
    7b80:	orr	r0, r0, r2
    7b84:	ldr	r2, [fp, #-36]	; 0xffffffdc
    7b88:	str	r0, [r2, sl, lsl #2]
    7b8c:	b	7bc4 <rb_des_init+0xcd0>
    7b90:	add	r2, ip, r2, lsl #2
    7b94:	ldr	r2, [r2, #-96]	; 0xffffffa0
    7b98:	orr	r1, r1, r2
    7b9c:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7ba0:	str	r1, [r2, sl, lsl #2]
    7ba4:	ands	r4, sl, #2
    7ba8:	bne	7b58 <rb_des_init+0xc64>
    7bac:	b	7bc8 <rb_des_init+0xcd4>
    7bb0:	add	r2, ip, r2, lsl #2
    7bb4:	ldr	r2, [r2, #-96]	; 0xffffffa0
    7bb8:	orr	r1, r1, r2
    7bbc:	ldr	r2, [fp, #-40]	; 0xffffffd8
    7bc0:	str	r1, [r2, sl, lsl #2]
    7bc4:	mov	r3, #0
    7bc8:	ands	r8, sl, #1
    7bcc:	beq	7c24 <rb_des_init+0xd30>
    7bd0:	ldr	r2, [pc, #1532]	; 81d4 <rb_des_init+0x12e0>
    7bd4:	mov	r3, lr
    7bd8:	ldr	lr, [fp, #-52]	; 0xffffffcc
    7bdc:	add	r2, pc, r2
    7be0:	ldrb	r2, [r2, lr]
    7be4:	mov	lr, r3
    7be8:	mov	r3, #0
    7bec:	cmp	r2, #255	; 0xff
    7bf0:	beq	7c24 <rb_des_init+0xd30>
    7bf4:	cmp	r2, #28
    7bf8:	bcs	7c10 <rb_des_init+0xd1c>
    7bfc:	add	r1, ip, r2, lsl #2
    7c00:	ldr	r1, [r1, #16]
    7c04:	orr	r0, r0, r1
    7c08:	ldr	r1, [fp, #-36]	; 0xffffffdc
    7c0c:	b	7c20 <rb_des_init+0xd2c>
    7c10:	add	r0, ip, r2, lsl #2
    7c14:	ldr	r0, [r0, #-96]	; 0xffffffa0
    7c18:	orr	r0, r1, r0
    7c1c:	ldr	r1, [fp, #-40]	; 0xffffffd8
    7c20:	str	r0, [r1, sl, lsl #2]
    7c24:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7c28:	mov	r0, #0
    7c2c:	cmp	r5, #0
    7c30:	str	r0, [r1, sl, lsl #2]
    7c34:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7c38:	str	r0, [r1, sl, lsl #2]
    7c3c:	bne	7c8c <rb_des_init+0xd98>
    7c40:	ldr	r2, [pc, #1424]	; 81d8 <rb_des_init+0x12e4>
    7c44:	mov	r5, #0
    7c48:	add	r2, pc, r2
    7c4c:	cmp	r9, #0
    7c50:	beq	7d04 <rb_des_init+0xe10>
    7c54:	ldr	r1, [sp, #4]
    7c58:	ldrb	r1, [r2, r1]
    7c5c:	cmp	r1, #255	; 0xff
    7c60:	beq	7d04 <rb_des_init+0xe10>
    7c64:	cmp	r1, #24
    7c68:	bcs	7cc8 <rb_des_init+0xdd4>
    7c6c:	add	r1, ip, r1, lsl #2
    7c70:	ldr	r1, [r1, #32]
    7c74:	orr	r5, r5, r1
    7c78:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7c7c:	str	r5, [r1, sl, lsl #2]
    7c80:	cmp	r6, #0
    7c84:	bne	7d0c <rb_des_init+0xe18>
    7c88:	b	7d38 <rb_des_init+0xe44>
    7c8c:	ldr	r2, [pc, #1256]	; 817c <rb_des_init+0x1288>
    7c90:	ldr	r1, [fp, #-32]	; 0xffffffe0
    7c94:	add	r2, pc, r2
    7c98:	ldrb	r1, [r2, r1]
    7c9c:	cmp	r1, #255	; 0xff
    7ca0:	beq	7cf8 <rb_des_init+0xe04>
    7ca4:	cmp	r1, #23
    7ca8:	bhi	7ce8 <rb_des_init+0xdf4>
    7cac:	add	r1, ip, r1, lsl #2
    7cb0:	ldr	r5, [r1, #32]
    7cb4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7cb8:	str	r5, [r1, sl, lsl #2]
    7cbc:	cmp	r9, #0
    7cc0:	bne	7c54 <rb_des_init+0xd60>
    7cc4:	b	7d04 <rb_des_init+0xe10>
    7cc8:	add	r1, ip, r1, lsl #2
    7ccc:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7cd0:	orr	r0, r0, r1
    7cd4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7cd8:	str	r0, [r1, sl, lsl #2]
    7cdc:	cmp	r6, #0
    7ce0:	bne	7d0c <rb_des_init+0xe18>
    7ce4:	b	7d38 <rb_des_init+0xe44>
    7ce8:	add	r0, ip, r1, lsl #2
    7cec:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7cf0:	ldr	r0, [r0, #-64]	; 0xffffffc0
    7cf4:	str	r0, [r1, sl, lsl #2]
    7cf8:	mov	r5, #0
    7cfc:	cmp	r9, #0
    7d00:	bne	7c54 <rb_des_init+0xd60>
    7d04:	cmp	r6, #0
    7d08:	beq	7d38 <rb_des_init+0xe44>
    7d0c:	ldr	r1, [sp, #8]
    7d10:	ldrb	r1, [r2, r1]
    7d14:	cmp	r1, #255	; 0xff
    7d18:	beq	7d38 <rb_des_init+0xe44>
    7d1c:	cmp	r1, #24
    7d20:	bcs	7d78 <rb_des_init+0xe84>
    7d24:	add	r1, ip, r1, lsl #2
    7d28:	ldr	r1, [r1, #32]
    7d2c:	orr	r5, r5, r1
    7d30:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7d34:	str	r5, [r1, sl, lsl #2]
    7d38:	cmp	lr, #0
    7d3c:	beq	7dac <rb_des_init+0xeb8>
    7d40:	ldr	r1, [sp, #12]
    7d44:	ldrb	r1, [r2, r1]
    7d48:	cmp	r1, #255	; 0xff
    7d4c:	beq	7dac <rb_des_init+0xeb8>
    7d50:	cmp	r1, #24
    7d54:	bcs	7d98 <rb_des_init+0xea4>
    7d58:	add	r1, ip, r1, lsl #2
    7d5c:	ldr	r1, [r1, #32]
    7d60:	orr	r5, r5, r1
    7d64:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7d68:	str	r5, [r1, sl, lsl #2]
    7d6c:	cmp	r7, #0
    7d70:	bne	7db4 <rb_des_init+0xec0>
    7d74:	b	7de0 <rb_des_init+0xeec>
    7d78:	add	r1, ip, r1, lsl #2
    7d7c:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7d80:	orr	r0, r0, r1
    7d84:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7d88:	str	r0, [r1, sl, lsl #2]
    7d8c:	cmp	lr, #0
    7d90:	bne	7d40 <rb_des_init+0xe4c>
    7d94:	b	7dac <rb_des_init+0xeb8>
    7d98:	add	r1, ip, r1, lsl #2
    7d9c:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7da0:	orr	r0, r0, r1
    7da4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7da8:	str	r0, [r1, sl, lsl #2]
    7dac:	cmp	r7, #0
    7db0:	beq	7de0 <rb_des_init+0xeec>
    7db4:	ldr	r1, [sp, #16]
    7db8:	ldrb	r1, [r2, r1]
    7dbc:	cmp	r1, #255	; 0xff
    7dc0:	beq	7de0 <rb_des_init+0xeec>
    7dc4:	cmp	r1, #24
    7dc8:	bcs	7e18 <rb_des_init+0xf24>
    7dcc:	add	r1, ip, r1, lsl #2
    7dd0:	ldr	r1, [r1, #32]
    7dd4:	orr	r5, r5, r1
    7dd8:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7ddc:	str	r5, [r1, sl, lsl #2]
    7de0:	cmp	r4, #0
    7de4:	beq	7e4c <rb_des_init+0xf58>
    7de8:	ldr	r1, [sp, #20]
    7dec:	ldrb	r1, [r2, r1]
    7df0:	cmp	r1, #255	; 0xff
    7df4:	beq	7e4c <rb_des_init+0xf58>
    7df8:	cmp	r1, #24
    7dfc:	bcs	7e38 <rb_des_init+0xf44>
    7e00:	add	r1, ip, r1, lsl #2
    7e04:	ldr	r1, [r1, #32]
    7e08:	orr	r5, r5, r1
    7e0c:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7e10:	str	r5, [r1, sl, lsl #2]
    7e14:	b	7e4c <rb_des_init+0xf58>
    7e18:	add	r1, ip, r1, lsl #2
    7e1c:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7e20:	orr	r0, r0, r1
    7e24:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7e28:	str	r0, [r1, sl, lsl #2]
    7e2c:	cmp	r4, #0
    7e30:	bne	7de8 <rb_des_init+0xef4>
    7e34:	b	7e4c <rb_des_init+0xf58>
    7e38:	add	r1, ip, r1, lsl #2
    7e3c:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7e40:	orr	r0, r0, r1
    7e44:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7e48:	str	r0, [r1, sl, lsl #2]
    7e4c:	ldr	r4, [pc, #904]	; 81dc <rb_des_init+0x12e8>
    7e50:	cmp	r8, #0
    7e54:	add	r4, pc, r4
    7e58:	beq	79a4 <rb_des_init+0xab0>
    7e5c:	ldr	r1, [sp, #24]
    7e60:	ldrb	r1, [r2, r1]
    7e64:	cmp	r1, #255	; 0xff
    7e68:	beq	79a4 <rb_des_init+0xab0>
    7e6c:	cmp	r1, #24
    7e70:	bcc	7990 <rb_des_init+0xa9c>
    7e74:	add	r1, ip, r1, lsl #2
    7e78:	ldr	r1, [r1, #-64]	; 0xffffffc0
    7e7c:	orr	r0, r0, r1
    7e80:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7e84:	b	79a0 <rb_des_init+0xaac>
    7e88:	.word	0x00038914
    7e8c:	ldr	r0, [pc, #752]	; 8184 <rb_des_init+0x1290>
    7e90:	mov	r2, #1
    7e94:	add	r0, pc, r0
    7e98:	strb	r2, [r0, #71]	; 0x47
    7e9c:	mov	r1, r0
    7ea0:	mov	r0, #9
    7ea4:	mov	r2, #0
    7ea8:	strh	r0, [r1, #79]	; 0x4f
    7eac:	movw	r0, #6405	; 0x1905
    7eb0:	strh	r0, [r1, #76]	; 0x4c
    7eb4:	mov	r0, #7
    7eb8:	strb	r0, [r1, #81]	; 0x51
    7ebc:	movw	r0, #6924	; 0x1b0c
    7ec0:	strh	r0, [r1, #69]	; 0x45
    7ec4:	movw	r0, #4618	; 0x120a
    7ec8:	strh	r0, [r1, #87]	; 0x57
    7ecc:	movw	r0, #5905	; 0x1711
    7ed0:	movt	r0, #7439	; 0x1d0f
    7ed4:	str	r0, [r1, #72]	; 0x48
    7ed8:	movw	r0, #5134	; 0x140e
    7edc:	strh	r0, [r1, #95]	; 0x5f
    7ee0:	mov	r0, #19
    7ee4:	strb	r0, [r1, #78]	; 0x4e
    7ee8:	movw	r0, #5387	; 0x150b
    7eec:	movt	r0, #1030	; 0x406
    7ef0:	str	r0, [r1, #90]	; 0x5a
    7ef4:	movw	r0, #6157	; 0x180d
    7ef8:	movt	r0, #770	; 0x302
    7efc:	str	r0, [r1, #82]	; 0x52
    7f00:	movw	r0, #4104	; 0x1008
    7f04:	movt	r0, #7702	; 0x1e16
    7f08:	str	r0, [r1, #65]	; 0x41
    7f0c:	mov	r0, #26
    7f10:	strb	r0, [r1, #94]	; 0x5e
    7f14:	mov	r0, #31
    7f18:	strb	r0, [r1, #89]	; 0x59
    7f1c:	mov	r0, #28
    7f20:	strb	r0, [r1, #86]	; 0x56
    7f24:	ldr	r3, [pc, #604]	; 8188 <rb_des_init+0x1294>
    7f28:	add	r3, pc, r3
    7f2c:	b	7f4c <rb_des_init+0x1058>
    7f30:	.word	0x000135f4
    7f34:	.word	0x00027568
    7f38:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7f3c:	add	r3, r3, #1024	; 0x400
    7f40:	add	r2, r2, #1
    7f44:	cmp	r2, #4
    7f48:	beq	8118 <rb_des_init+0x1224>
    7f4c:	mov	r0, #7
    7f50:	lsl	r5, r2, #3
    7f54:	mov	r4, #0
    7f58:	str	r2, [fp, #-32]	; 0xffffffe0
    7f5c:	orr	r1, r0, r2, lsl #3
    7f60:	mov	r0, #6
    7f64:	orr	r7, r0, r2, lsl #3
    7f68:	mov	r0, #5
    7f6c:	orr	r6, r0, r2, lsl #3
    7f70:	mov	r0, #4
    7f74:	orr	lr, r0, r2, lsl #3
    7f78:	mov	r0, #3
    7f7c:	orr	r8, r0, r2, lsl #3
    7f80:	mov	r0, #2
    7f84:	orr	r9, r0, r2, lsl #3
    7f88:	mov	r0, #1
    7f8c:	orr	sl, r0, r2, lsl #3
    7f90:	mov	r0, #0
    7f94:	tst	r4, #128	; 0x80
    7f98:	str	r0, [r3, r4, lsl #2]
    7f9c:	beq	7fc0 <rb_des_init+0x10cc>
    7fa0:	b	8000 <rb_des_init+0x110c>
    7fa4:	add	r4, r4, #1
    7fa8:	cmp	r4, #256	; 0x100
    7fac:	beq	7f38 <rb_des_init+0x1044>
    7fb0:	mov	r0, #0
    7fb4:	tst	r4, #128	; 0x80
    7fb8:	str	r0, [r3, r4, lsl #2]
    7fbc:	bne	8000 <rb_des_init+0x110c>
    7fc0:	tst	r4, #64	; 0x40
    7fc4:	bne	8020 <rb_des_init+0x112c>
    7fc8:	tst	r4, #32
    7fcc:	bne	8044 <rb_des_init+0x1150>
    7fd0:	tst	r4, #16
    7fd4:	bne	8068 <rb_des_init+0x1174>
    7fd8:	tst	r4, #8
    7fdc:	bne	808c <rb_des_init+0x1198>
    7fe0:	tst	r4, #4
    7fe4:	bne	80b0 <rb_des_init+0x11bc>
    7fe8:	tst	r4, #2
    7fec:	bne	80d4 <rb_des_init+0x11e0>
    7ff0:	tst	r4, #1
    7ff4:	beq	7fa4 <rb_des_init+0x10b0>
    7ff8:	b	80f8 <rb_des_init+0x1204>
    7ffc:	.word	0x0002758c
    8000:	ldr	r0, [pc, #388]	; 818c <rb_des_init+0x1298>
    8004:	add	r0, pc, r0
    8008:	add	r0, r0, r5
    800c:	ldrb	r0, [r0, #65]	; 0x41
    8010:	ldr	r0, [ip, r0, lsl #2]
    8014:	str	r0, [r3, r4, lsl #2]
    8018:	tst	r4, #64	; 0x40
    801c:	beq	7fc8 <rb_des_init+0x10d4>
    8020:	ldr	r2, [pc, #360]	; 8190 <rb_des_init+0x129c>
    8024:	add	r2, pc, r2
    8028:	add	r2, r2, sl
    802c:	ldrb	r2, [r2, #65]	; 0x41
    8030:	ldr	r2, [ip, r2, lsl #2]
    8034:	orr	r0, r0, r2
    8038:	str	r0, [r3, r4, lsl #2]
    803c:	tst	r4, #32
    8040:	beq	7fd0 <rb_des_init+0x10dc>
    8044:	ldr	r2, [pc, #328]	; 8194 <rb_des_init+0x12a0>
    8048:	add	r2, pc, r2
    804c:	add	r2, r2, r9
    8050:	ldrb	r2, [r2, #65]	; 0x41
    8054:	ldr	r2, [ip, r2, lsl #2]
    8058:	orr	r0, r0, r2
    805c:	str	r0, [r3, r4, lsl #2]
    8060:	tst	r4, #16
    8064:	beq	7fd8 <rb_des_init+0x10e4>
    8068:	ldr	r2, [pc, #296]	; 8198 <rb_des_init+0x12a4>
    806c:	add	r2, pc, r2
    8070:	add	r2, r2, r8
    8074:	ldrb	r2, [r2, #65]	; 0x41
    8078:	ldr	r2, [ip, r2, lsl #2]
    807c:	orr	r0, r0, r2
    8080:	str	r0, [r3, r4, lsl #2]
    8084:	tst	r4, #8
    8088:	beq	7fe0 <rb_des_init+0x10ec>
    808c:	ldr	r2, [pc, #264]	; 819c <rb_des_init+0x12a8>
    8090:	add	r2, pc, r2
    8094:	add	r2, r2, lr
    8098:	ldrb	r2, [r2, #65]	; 0x41
    809c:	ldr	r2, [ip, r2, lsl #2]
    80a0:	orr	r0, r0, r2
    80a4:	str	r0, [r3, r4, lsl #2]
    80a8:	tst	r4, #4
    80ac:	beq	7fe8 <rb_des_init+0x10f4>
    80b0:	ldr	r2, [pc, #232]	; 81a0 <rb_des_init+0x12ac>
    80b4:	add	r2, pc, r2
    80b8:	add	r2, r2, r6
    80bc:	ldrb	r2, [r2, #65]	; 0x41
    80c0:	ldr	r2, [ip, r2, lsl #2]
    80c4:	orr	r0, r0, r2
    80c8:	str	r0, [r3, r4, lsl #2]
    80cc:	tst	r4, #2
    80d0:	beq	7ff0 <rb_des_init+0x10fc>
    80d4:	ldr	r2, [pc, #200]	; 81a4 <rb_des_init+0x12b0>
    80d8:	add	r2, pc, r2
    80dc:	add	r2, r2, r7
    80e0:	ldrb	r2, [r2, #65]	; 0x41
    80e4:	ldr	r2, [ip, r2, lsl #2]
    80e8:	orr	r0, r0, r2
    80ec:	str	r0, [r3, r4, lsl #2]
    80f0:	tst	r4, #1
    80f4:	beq	7fa4 <rb_des_init+0x10b0>
    80f8:	ldr	r2, [pc, #168]	; 81a8 <rb_des_init+0x12b4>
    80fc:	add	r2, pc, r2
    8100:	add	r2, r2, r1
    8104:	ldrb	r2, [r2, #65]	; 0x41
    8108:	ldr	r2, [ip, r2, lsl #2]
    810c:	orr	r0, r0, r2
    8110:	str	r0, [r3, r4, lsl #2]
    8114:	b	7fa4 <rb_des_init+0x10b0>
    8118:	ldr	r1, [pc, #140]	; 81ac <rb_des_init+0x12b8>
    811c:	mov	r0, #1
    8120:	add	r1, pc, r1
    8124:	strb	r0, [r1]
    8128:	sub	sp, fp, #28
    812c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8130:	.word	0x0002b458
    8134:	.word	0x00013484
    8138:	.word	0x0002b3f8
    813c:	.word	0x000385d4
    8140:	.word	0x000385a4
    8144:	.word	0x0001347c
    8148:	.word	0x00013478
    814c:	.word	0x00038554
    8150:	.word	0x0002b3bc
    8154:	.word	0x0002d3b0
    8158:	.word	0x0002f3a4
    815c:	.word	0x00031398
    8160:	.word	0x0003338c
    8164:	.word	0x00034380
    8168:	.word	0x00035374
    816c:	.word	0x00036368
    8170:	.word	0x000130e4
    8174:	.word	0x000382e0
    8178:	.word	0x00038260
    817c:	.word	0x00037bec
    8180:	.word	0x0002b264
    8184:	.word	0x00037984
    8188:	.word	0x000367f8
    818c:	.word	0x00037814
    8190:	.word	0x000377f4
    8194:	.word	0x000377d0
    8198:	.word	0x000377ac
    819c:	.word	0x00037788
    81a0:	.word	0x00037764
    81a4:	.word	0x00037740
    81a8:	.word	0x0003771c
    81ac:	.word	0x000376f8
    81b0:	.word	0x000381dc
    81b4:	.word	0x00038158
    81b8:	.word	0x000380d4
    81bc:	.word	0x00038050
    81c0:	.word	0x00037fc8
    81c4:	.word	0x00038340
    81c8:	.word	0x0002b13c
    81cc:	.word	0x0002ad58
    81d0:	.word	0x0002ab80
    81d4:	.word	0x0002ab04
    81d8:	.word	0x00037c38
    81dc:	.word	0x0002a88c

000081e0 <MD5Final>:
    81e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81e4:	add	fp, sp, #28
    81e8:	sub	sp, sp, #12
    81ec:	mov	r7, r0
    81f0:	ldr	r0, [r1, #16]
    81f4:	mov	r4, r1
    81f8:	ldr	r1, [r1, #20]
    81fc:	stm	sp, {r0, r1}
    8200:	ubfx	sl, r0, #3, #6
    8204:	mov	r1, #120	; 0x78
    8208:	cmp	sl, #56	; 0x38
    820c:	rsb	r6, sl, #64	; 0x40
    8210:	movwcc	r1, #56	; 0x38
    8214:	sub	r5, r1, sl
    8218:	add	r1, r0, r5, lsl #3
    821c:	str	r1, [r4, #16]
    8220:	cmp	r1, r5, lsl #3
    8224:	ldr	r0, [r4, #20]
    8228:	addcc	r0, r0, #1
    822c:	strcc	r0, [r4, #20]
    8230:	add	r0, r0, r5, lsr #29
    8234:	cmp	r6, r5
    8238:	str	r0, [r4, #20]
    823c:	ldr	r0, [pc, #328]	; 838c <MD5Final+0x1ac>
    8240:	add	r0, pc, r0
    8244:	bls	8250 <MD5Final+0x70>
    8248:	mov	r6, #0
    824c:	b	82bc <MD5Final+0xdc>
    8250:	mov	r8, r7
    8254:	ldr	r7, [pc, #308]	; 8390 <MD5Final+0x1b0>
    8258:	add	r9, r4, #24
    825c:	mov	r2, r6
    8260:	add	r0, r9, sl
    8264:	add	r7, pc, r7
    8268:	mov	r1, r7
    826c:	bl	5094 <memcpy@plt>
    8270:	mov	r0, r4
    8274:	mov	r1, r9
    8278:	bl	8398 <MD5Transform>
    827c:	eor	r0, sl, #127	; 0x7f
    8280:	mov	sl, #0
    8284:	cmp	r0, r5
    8288:	bcs	82b0 <MD5Final+0xd0>
    828c:	add	r1, r7, r6
    8290:	mov	r0, r4
    8294:	bl	8398 <MD5Transform>
    8298:	add	r1, r6, #127	; 0x7f
    829c:	add	r0, r6, #64	; 0x40
    82a0:	cmp	r1, r5
    82a4:	mov	r6, r0
    82a8:	bcc	828c <MD5Final+0xac>
    82ac:	mov	r6, r0
    82b0:	ldr	r0, [pc, #220]	; 8394 <MD5Final+0x1b4>
    82b4:	mov	r7, r8
    82b8:	add	r0, pc, r0
    82bc:	add	r1, r0, r6
    82c0:	add	r0, r4, sl
    82c4:	sub	r2, r5, r6
    82c8:	add	r0, r0, #24
    82cc:	bl	5094 <memcpy@plt>
    82d0:	ldr	r0, [r4, #16]
    82d4:	ldr	r1, [r4, #20]
    82d8:	mov	r8, #0
    82dc:	mov	r6, #0
    82e0:	adds	r2, r0, #64	; 0x40
    82e4:	str	r2, [r4, #16]
    82e8:	ubfx	r0, r0, #3, #6
    82ec:	addcs	r1, r1, #1
    82f0:	strcs	r1, [r4, #20]
    82f4:	cmp	r0, #56	; 0x38
    82f8:	str	r1, [r4, #20]
    82fc:	bcc	8328 <MD5Final+0x148>
    8300:	rsb	r6, r0, #64	; 0x40
    8304:	add	r5, r4, #24
    8308:	mov	r1, sp
    830c:	add	r0, r5, r0
    8310:	mov	r2, r6
    8314:	bl	5094 <memcpy@plt>
    8318:	mov	r0, r4
    831c:	mov	r1, r5
    8320:	bl	8398 <MD5Transform>
    8324:	mov	r0, #0
    8328:	mov	r1, sp
    832c:	add	r0, r4, r0
    8330:	rsb	r2, r6, #8
    8334:	add	r1, r1, r6
    8338:	add	r0, r0, #24
    833c:	bl	5094 <memcpy@plt>
    8340:	mov	r0, #80	; 0x50
    8344:	mov	r1, r4
    8348:	vmov.i32	q9, #0	; 0x00000000
    834c:	vld1.8	{d16-d17}, [r1], r0
    8350:	add	r0, r4, #16
    8354:	vst1.8	{d16-d17}, [r7]
    8358:	vst1.8	{d18-d19}, [r0]
    835c:	add	r0, r4, #32
    8360:	str	r8, [r1]
    8364:	vst1.8	{d18-d19}, [r0]
    8368:	add	r0, r4, #48	; 0x30
    836c:	vst1.8	{d18-d19}, [r0]
    8370:	add	r0, r4, #64	; 0x40
    8374:	vst1.8	{d18-d19}, [r0]
    8378:	mov	r0, #84	; 0x54
    837c:	vst1.8	{d18-d19}, [r4], r0
    8380:	str	r8, [r4]
    8384:	sub	sp, fp, #28
    8388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    838c:	.word	0x000251b0
    8390:	.word	0x0002518c
    8394:	.word	0x00025138

00008398 <MD5Transform>:
    8398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    839c:	add	fp, sp, #28
    83a0:	sub	sp, sp, #84	; 0x54
    83a4:	mov	ip, r1
    83a8:	ldr	r4, [r0, #4]
    83ac:	ldr	r2, [r0, #12]
    83b0:	ldr	r1, [r0, #8]
    83b4:	ldr	r5, [r0]
    83b8:	str	r0, [sp, #16]
    83bc:	ldr	r9, [ip, #4]
    83c0:	ldr	lr, [ip, #8]
    83c4:	ldr	r8, [ip, #12]
    83c8:	and	r0, r1, r4
    83cc:	bic	r3, r2, r4
    83d0:	str	r5, [sp, #24]
    83d4:	str	r1, [sp, #32]
    83d8:	str	r4, [sp, #20]
    83dc:	str	r2, [sp, #28]
    83e0:	orr	r0, r3, r0
    83e4:	ldr	r3, [ip]
    83e8:	str	r8, [fp, #-44]	; 0xffffffd4
    83ec:	str	lr, [fp, #-52]	; 0xffffffcc
    83f0:	str	r9, [fp, #-48]	; 0xffffffd0
    83f4:	str	r3, [fp, #-36]	; 0xffffffdc
    83f8:	add	r3, r5, r3
    83fc:	add	r0, r3, r0
    8400:	movw	r3, #42104	; 0xa478
    8404:	movt	r3, #55146	; 0xd76a
    8408:	add	r0, r0, r3
    840c:	add	r0, r4, r0, ror #25
    8410:	bic	r3, r1, r0
    8414:	and	r7, r0, r4
    8418:	orr	r3, r7, r3
    841c:	add	r7, r2, r9
    8420:	add	r3, r7, r3
    8424:	movw	r7, #46934	; 0xb756
    8428:	movt	r7, #59591	; 0xe8c7
    842c:	add	r3, r3, r7
    8430:	add	r3, r0, r3, ror #20
    8434:	bic	r7, r4, r3
    8438:	and	r6, r3, r0
    843c:	orr	r7, r6, r7
    8440:	add	r6, r1, lr
    8444:	ldr	r1, [ip, #16]
    8448:	ldr	lr, [ip, #44]	; 0x2c
    844c:	add	r7, r6, r7
    8450:	movw	r6, #28891	; 0x70db
    8454:	movt	r6, #9248	; 0x2420
    8458:	add	r7, r7, r6
    845c:	str	r1, [sp, #48]	; 0x30
    8460:	str	lr, [fp, #-40]	; 0xffffffd8
    8464:	add	r7, r3, r7, ror #15
    8468:	bic	r6, r0, r7
    846c:	and	r5, r7, r3
    8470:	add	r0, r1, r0
    8474:	ldr	r1, [ip, #20]
    8478:	orr	r6, r5, r6
    847c:	add	r5, r4, r8
    8480:	ldr	r8, [ip, #24]
    8484:	add	r6, r5, r6
    8488:	movw	r5, #52974	; 0xceee
    848c:	movt	r5, #49597	; 0xc1bd
    8490:	str	r1, [sp, #36]	; 0x24
    8494:	add	r6, r6, r5
    8498:	str	r8, [sp, #12]
    849c:	add	r4, r7, r6, ror #10
    84a0:	bic	r6, r3, r4
    84a4:	and	r5, r4, r7
    84a8:	add	r3, r1, r3
    84ac:	ldr	r1, [ip, #28]
    84b0:	orr	r6, r5, r6
    84b4:	add	r0, r0, r6
    84b8:	movw	r6, #4015	; 0xfaf
    84bc:	movt	r6, #62844	; 0xf57c
    84c0:	str	r1, [sp, #52]	; 0x34
    84c4:	add	r0, r0, r6
    84c8:	add	r0, r4, r0, ror #25
    84cc:	bic	r6, r7, r0
    84d0:	and	r5, r0, r4
    84d4:	add	r7, r8, r7
    84d8:	orr	r5, r5, r6
    84dc:	add	r3, r3, r5
    84e0:	movw	r5, #50730	; 0xc62a
    84e4:	movt	r5, #18311	; 0x4787
    84e8:	add	r3, r3, r5
    84ec:	add	r3, r0, r3, ror #20
    84f0:	bic	r5, r4, r3
    84f4:	and	r6, r3, r0
    84f8:	add	r4, r1, r4
    84fc:	ldr	r1, [ip, #32]
    8500:	orr	r5, r6, r5
    8504:	add	r7, r7, r5
    8508:	movw	r5, #17939	; 0x4613
    850c:	movt	r5, #43056	; 0xa830
    8510:	str	r1, [sp, #44]	; 0x2c
    8514:	add	r7, r7, r5
    8518:	add	r5, r3, r7, ror #15
    851c:	bic	r7, r0, r5
    8520:	and	r6, r5, r3
    8524:	add	r0, r1, r0
    8528:	ldr	r1, [ip, #36]	; 0x24
    852c:	orr	r6, r6, r7
    8530:	add	r4, r4, r6
    8534:	movw	r6, #38145	; 0x9501
    8538:	movt	r6, #64838	; 0xfd46
    853c:	str	r1, [fp, #-32]	; 0xffffffe0
    8540:	add	r4, r4, r6
    8544:	add	r6, r5, r4, ror #10
    8548:	bic	r4, r3, r6
    854c:	and	r7, r6, r5
    8550:	add	r3, r1, r3
    8554:	ldr	r1, [ip, #40]	; 0x28
    8558:	orr	r4, r7, r4
    855c:	add	r0, r0, r4
    8560:	movw	r4, #39128	; 0x98d8
    8564:	movt	r4, #27008	; 0x6980
    8568:	str	r1, [sp, #56]	; 0x38
    856c:	add	r0, r0, r4
    8570:	add	r0, r6, r0, ror #25
    8574:	bic	r4, r5, r0
    8578:	and	r7, r0, r6
    857c:	add	r5, r1, r5
    8580:	orr	r4, r7, r4
    8584:	add	r3, r3, r4
    8588:	movw	r4, #63407	; 0xf7af
    858c:	movt	r4, #35652	; 0x8b44
    8590:	add	r3, r3, r4
    8594:	add	r3, r0, r3, ror #20
    8598:	bic	r4, r6, r3
    859c:	and	r7, r3, r0
    85a0:	add	r6, lr, r6
    85a4:	orr	r7, r7, r4
    85a8:	ldr	r4, [ip, #48]	; 0x30
    85ac:	add	r5, r5, r7
    85b0:	movw	r7, #42063	; 0xa44f
    85b4:	sub	r5, r5, r7
    85b8:	add	r1, r3, r5, ror #15
    85bc:	str	r4, [sp, #4]
    85c0:	bic	r5, r0, r1
    85c4:	and	r7, r1, r3
    85c8:	add	r0, r4, r0
    85cc:	ldr	r4, [ip, #52]	; 0x34
    85d0:	orr	r5, r7, r5
    85d4:	add	r5, r6, r5
    85d8:	movw	r6, #55230	; 0xd7be
    85dc:	movt	r6, #35164	; 0x895c
    85e0:	str	r4, [sp, #40]	; 0x28
    85e4:	add	r5, r5, r6
    85e8:	add	r2, r1, r5, ror #10
    85ec:	bic	r5, r3, r2
    85f0:	and	r6, r2, r1
    85f4:	add	r3, r4, r3
    85f8:	ldr	r4, [ip, #56]	; 0x38
    85fc:	orr	r5, r6, r5
    8600:	add	r0, r0, r5
    8604:	movw	r5, #4386	; 0x1122
    8608:	movt	r5, #27536	; 0x6b90
    860c:	add	r0, r0, r5
    8610:	add	r0, r2, r0, ror #25
    8614:	bic	r5, r1, r0
    8618:	and	r7, r0, r2
    861c:	add	r1, r4, r1
    8620:	orr	r7, r7, r5
    8624:	add	r3, r3, r7
    8628:	movw	r7, #29075	; 0x7193
    862c:	movt	r7, #64920	; 0xfd98
    8630:	add	r3, r3, r7
    8634:	add	r7, r0, r3, ror #20
    8638:	bic	r3, r2, r7
    863c:	and	sl, r7, r0
    8640:	orr	r3, sl, r3
    8644:	mov	sl, r4
    8648:	add	r1, r1, r3
    864c:	movw	r3, #17294	; 0x438e
    8650:	str	sl, [sp]
    8654:	movt	r3, #42617	; 0xa679
    8658:	add	r1, r1, r3
    865c:	add	r3, r7, r1, ror #15
    8660:	bic	r1, r0, r3
    8664:	and	r5, r3, r7
    8668:	bic	r4, r3, r7
    866c:	add	r0, r9, r0
    8670:	ldr	r9, [sp, #36]	; 0x24
    8674:	orr	r5, r5, r1
    8678:	ldr	r1, [ip, #60]	; 0x3c
    867c:	ldr	ip, [sp, #48]	; 0x30
    8680:	add	r2, r1, r2
    8684:	mov	r6, r1
    8688:	str	r1, [sp, #8]
    868c:	ldr	r1, [fp, #-36]	; 0xffffffdc
    8690:	add	r2, r2, r5
    8694:	movw	r5, #2081	; 0x821
    8698:	movt	r5, #18868	; 0x49b4
    869c:	add	r2, r2, r5
    86a0:	add	r2, r3, r2, ror #10
    86a4:	and	r5, r2, r7
    86a8:	add	r7, r8, r7
    86ac:	ldr	r8, [sp, #44]	; 0x2c
    86b0:	orr	r5, r5, r4
    86b4:	bic	r4, r2, r3
    86b8:	add	r0, r0, r5
    86bc:	movw	r5, #9570	; 0x2562
    86c0:	movt	r5, #63006	; 0xf61e
    86c4:	add	r0, r0, r5
    86c8:	add	r0, r2, r0, ror #27
    86cc:	and	r5, r0, r3
    86d0:	add	r3, lr, r3
    86d4:	mov	lr, sl
    86d8:	orr	r5, r5, r4
    86dc:	bic	r4, r0, r2
    86e0:	add	r7, r7, r5
    86e4:	movw	r5, #45888	; 0xb340
    86e8:	movt	r5, #49216	; 0xc040
    86ec:	add	r7, r7, r5
    86f0:	add	r7, r0, r7, ror #23
    86f4:	and	r5, r7, r2
    86f8:	add	r2, r1, r2
    86fc:	ldr	r1, [sp, #56]	; 0x38
    8700:	orr	r5, r5, r4
    8704:	bic	r4, r7, r0
    8708:	add	r3, r3, r5
    870c:	movw	r5, #23121	; 0x5a51
    8710:	movt	r5, #9822	; 0x265e
    8714:	add	r3, r3, r5
    8718:	add	r3, r7, r3, ror #18
    871c:	and	r5, r3, r0
    8720:	add	r0, r9, r0
    8724:	orr	r5, r5, r4
    8728:	bic	r4, r3, r7
    872c:	add	r2, r2, r5
    8730:	movw	r5, #51114	; 0xc7aa
    8734:	movt	r5, #59830	; 0xe9b6
    8738:	add	r2, r2, r5
    873c:	add	r2, r3, r2, ror #12
    8740:	and	r5, r2, r7
    8744:	add	r7, r1, r7
    8748:	ldr	r1, [fp, #-32]	; 0xffffffe0
    874c:	orr	r5, r5, r4
    8750:	bic	r4, r2, r3
    8754:	add	r0, r0, r5
    8758:	movw	r5, #4189	; 0x105d
    875c:	movt	r5, #54831	; 0xd62f
    8760:	add	r0, r0, r5
    8764:	add	r0, r2, r0, ror #27
    8768:	and	r5, r0, r3
    876c:	add	r3, r6, r3
    8770:	ldr	r6, [sp, #4]
    8774:	orr	r5, r5, r4
    8778:	bic	r4, r0, r2
    877c:	add	r7, r7, r5
    8780:	movw	r5, #5203	; 0x1453
    8784:	movt	r5, #580	; 0x244
    8788:	add	r7, r7, r5
    878c:	add	r7, r0, r7, ror #23
    8790:	and	r5, r7, r2
    8794:	add	r2, ip, r2
    8798:	orr	r5, r5, r4
    879c:	bic	r4, r7, r0
    87a0:	add	r3, r3, r5
    87a4:	movw	r5, #59009	; 0xe681
    87a8:	movt	r5, #55457	; 0xd8a1
    87ac:	add	r3, r3, r5
    87b0:	add	r3, r7, r3, ror #18
    87b4:	and	r5, r3, r0
    87b8:	add	r0, r1, r0
    87bc:	ldr	r1, [fp, #-44]	; 0xffffffd4
    87c0:	orr	r5, r5, r4
    87c4:	bic	r4, r3, r7
    87c8:	add	r2, r2, r5
    87cc:	movw	r5, #64456	; 0xfbc8
    87d0:	movt	r5, #59347	; 0xe7d3
    87d4:	add	r2, r2, r5
    87d8:	add	r2, r3, r2, ror #12
    87dc:	and	r5, r2, r7
    87e0:	add	r7, sl, r7
    87e4:	ldr	sl, [sp, #40]	; 0x28
    87e8:	orr	r5, r5, r4
    87ec:	bic	r4, r2, r3
    87f0:	add	r0, r0, r5
    87f4:	movw	r5, #52710	; 0xcde6
    87f8:	movt	r5, #8673	; 0x21e1
    87fc:	add	r0, r0, r5
    8800:	add	r0, r2, r0, ror #27
    8804:	and	r5, r0, r3
    8808:	add	r3, r1, r3
    880c:	ldr	r1, [fp, #-52]	; 0xffffffcc
    8810:	orr	r5, r5, r4
    8814:	bic	r4, r0, r2
    8818:	add	r7, r7, r5
    881c:	movw	r5, #2006	; 0x7d6
    8820:	movt	r5, #49975	; 0xc337
    8824:	add	r7, r7, r5
    8828:	add	r7, r0, r7, ror #23
    882c:	and	r5, r7, r2
    8830:	add	r2, r8, r2
    8834:	orr	r5, r5, r4
    8838:	bic	r4, r7, r0
    883c:	add	r3, r3, r5
    8840:	movw	r5, #3463	; 0xd87
    8844:	movt	r5, #62677	; 0xf4d5
    8848:	add	r3, r3, r5
    884c:	add	r3, r7, r3, ror #18
    8850:	and	r5, r3, r0
    8854:	add	r0, sl, r0
    8858:	orr	r5, r5, r4
    885c:	bic	r4, r3, r7
    8860:	add	r2, r2, r5
    8864:	movw	r5, #5357	; 0x14ed
    8868:	movt	r5, #17754	; 0x455a
    886c:	add	r2, r2, r5
    8870:	add	r2, r3, r2, ror #12
    8874:	and	r5, r2, r7
    8878:	add	r7, r1, r7
    887c:	ldr	r1, [sp, #52]	; 0x34
    8880:	orr	r5, r5, r4
    8884:	bic	r4, r2, r3
    8888:	add	r0, r0, r5
    888c:	movw	r5, #59653	; 0xe905
    8890:	movt	r5, #43491	; 0xa9e3
    8894:	add	r0, r0, r5
    8898:	add	r0, r2, r0, ror #27
    889c:	and	r5, r0, r3
    88a0:	add	r3, r1, r3
    88a4:	orr	r5, r5, r4
    88a8:	bic	r4, r0, r2
    88ac:	add	r7, r7, r5
    88b0:	movw	r5, #41976	; 0xa3f8
    88b4:	movt	r5, #64751	; 0xfcef
    88b8:	add	r7, r7, r5
    88bc:	add	r7, r0, r7, ror #23
    88c0:	and	r5, r7, r2
    88c4:	add	r2, r6, r2
    88c8:	orr	r5, r5, r4
    88cc:	bic	r4, r7, r0
    88d0:	add	r3, r3, r5
    88d4:	movw	r5, #729	; 0x2d9
    88d8:	movt	r5, #26479	; 0x676f
    88dc:	add	r3, r3, r5
    88e0:	add	r3, r7, r3, ror #18
    88e4:	and	r5, r3, r0
    88e8:	add	r0, r9, r0
    88ec:	ldr	r9, [sp, #12]
    88f0:	orr	r5, r5, r4
    88f4:	add	r2, r2, r5
    88f8:	movw	r5, #19594	; 0x4c8a
    88fc:	movt	r5, #36138	; 0x8d2a
    8900:	add	r2, r2, r5
    8904:	add	r2, r3, r2, ror #12
    8908:	eor	r5, r2, r3
    890c:	eor	r4, r5, r7
    8910:	add	r7, r8, r7
    8914:	ldr	r8, [sp, #56]	; 0x38
    8918:	add	r0, r0, r4
    891c:	movw	r4, #14658	; 0x3942
    8920:	movt	r4, #65530	; 0xfffa
    8924:	add	r0, r0, r4
    8928:	ldr	r4, [fp, #-40]	; 0xffffffd8
    892c:	add	r0, r2, r0, ror #28
    8930:	eor	r5, r5, r0
    8934:	add	r7, r7, r5
    8938:	movw	r5, #63105	; 0xf681
    893c:	add	r3, r4, r3
    8940:	ldr	r4, [fp, #-48]	; 0xffffffd0
    8944:	movt	r5, #34673	; 0x8771
    8948:	add	r7, r7, r5
    894c:	eor	r5, r0, r2
    8950:	add	r2, lr, r2
    8954:	ldr	lr, [sp, #8]
    8958:	add	r7, r0, r7, ror #21
    895c:	eor	r5, r5, r7
    8960:	add	r3, r3, r5
    8964:	movw	r5, #24866	; 0x6122
    8968:	movt	r5, #28061	; 0x6d9d
    896c:	add	r3, r3, r5
    8970:	eor	r5, r7, r0
    8974:	add	r0, r4, r0
    8978:	ldr	r4, [fp, #-36]	; 0xffffffdc
    897c:	add	r3, r7, r3, ror #16
    8980:	eor	r5, r5, r3
    8984:	add	r2, r2, r5
    8988:	movw	r5, #14348	; 0x380c
    898c:	movt	r5, #64997	; 0xfde5
    8990:	add	r2, r2, r5
    8994:	eor	r5, r3, r7
    8998:	add	r7, ip, r7
    899c:	ldr	ip, [fp, #-44]	; 0xffffffd4
    89a0:	add	r2, r3, r2, ror #9
    89a4:	eor	r5, r5, r2
    89a8:	add	r0, r0, r5
    89ac:	movw	r5, #59972	; 0xea44
    89b0:	movt	r5, #42174	; 0xa4be
    89b4:	add	r0, r0, r5
    89b8:	eor	r5, r2, r3
    89bc:	add	r3, r1, r3
    89c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    89c4:	add	r0, r2, r0, ror #28
    89c8:	eor	r5, r5, r0
    89cc:	add	r7, r7, r5
    89d0:	movw	r5, #53161	; 0xcfa9
    89d4:	movt	r5, #19422	; 0x4bde
    89d8:	add	r7, r7, r5
    89dc:	eor	r5, r0, r2
    89e0:	add	r2, r8, r2
    89e4:	add	r7, r0, r7, ror #21
    89e8:	eor	r5, r5, r7
    89ec:	add	r3, r3, r5
    89f0:	movw	r5, #19296	; 0x4b60
    89f4:	movt	r5, #63163	; 0xf6bb
    89f8:	add	r3, r3, r5
    89fc:	eor	r5, r7, r0
    8a00:	add	r0, sl, r0
    8a04:	ldr	sl, [fp, #-52]	; 0xffffffcc
    8a08:	add	r3, r7, r3, ror #16
    8a0c:	eor	r5, r5, r3
    8a10:	add	r2, r2, r5
    8a14:	movw	r5, #48240	; 0xbc70
    8a18:	movt	r5, #48831	; 0xbebf
    8a1c:	add	r2, r2, r5
    8a20:	eor	r5, r3, r7
    8a24:	add	r7, r4, r7
    8a28:	add	r2, r3, r2, ror #9
    8a2c:	eor	r5, r5, r2
    8a30:	add	r0, r0, r5
    8a34:	movw	r5, #32454	; 0x7ec6
    8a38:	movt	r5, #10395	; 0x289b
    8a3c:	add	r0, r0, r5
    8a40:	eor	r5, r2, r3
    8a44:	add	r3, ip, r3
    8a48:	add	r0, r2, r0, ror #28
    8a4c:	eor	r5, r5, r0
    8a50:	add	r7, r7, r5
    8a54:	movw	r5, #10234	; 0x27fa
    8a58:	movt	r5, #60065	; 0xeaa1
    8a5c:	add	r7, r7, r5
    8a60:	eor	r5, r0, r2
    8a64:	add	r2, r9, r2
    8a68:	add	r7, r0, r7, ror #21
    8a6c:	eor	r5, r5, r7
    8a70:	add	r3, r3, r5
    8a74:	movw	r5, #12421	; 0x3085
    8a78:	movt	r5, #54511	; 0xd4ef
    8a7c:	add	r3, r3, r5
    8a80:	eor	r5, r7, r0
    8a84:	add	r0, r1, r0
    8a88:	ldr	r1, [sp, #52]	; 0x34
    8a8c:	add	r3, r7, r3, ror #16
    8a90:	eor	r5, r5, r3
    8a94:	add	r2, r2, r5
    8a98:	movw	r5, #7429	; 0x1d05
    8a9c:	movt	r5, #1160	; 0x488
    8aa0:	add	r2, r2, r5
    8aa4:	eor	r5, r3, r7
    8aa8:	add	r7, r6, r7
    8aac:	add	r2, r3, r2, ror #9
    8ab0:	eor	r5, r5, r2
    8ab4:	add	r0, r0, r5
    8ab8:	movw	r5, #53305	; 0xd039
    8abc:	movt	r5, #55764	; 0xd9d4
    8ac0:	add	r0, r0, r5
    8ac4:	eor	r5, r2, r3
    8ac8:	add	r3, lr, r3
    8acc:	add	r0, r2, r0, ror #28
    8ad0:	eor	r5, r5, r0
    8ad4:	add	r7, r7, r5
    8ad8:	movw	r5, #39397	; 0x99e5
    8adc:	movt	r5, #59099	; 0xe6db
    8ae0:	add	r7, r7, r5
    8ae4:	eor	r5, r0, r2
    8ae8:	add	r2, sl, r2
    8aec:	add	r7, r0, r7, ror #21
    8af0:	eor	r5, r5, r7
    8af4:	add	r3, r3, r5
    8af8:	movw	r5, #31992	; 0x7cf8
    8afc:	movt	r5, #8098	; 0x1fa2
    8b00:	add	r3, r3, r5
    8b04:	eor	r5, r7, r0
    8b08:	add	r0, r4, r0
    8b0c:	add	r3, r7, r3, ror #16
    8b10:	eor	r5, r5, r3
    8b14:	add	r2, r2, r5
    8b18:	movw	r5, #22117	; 0x5665
    8b1c:	movt	r5, #50348	; 0xc4ac
    8b20:	add	r2, r2, r5
    8b24:	mvn	r5, r7
    8b28:	add	r7, r1, r7
    8b2c:	ldr	r1, [sp]
    8b30:	add	r2, r3, r2, ror #9
    8b34:	orr	r5, r2, r5
    8b38:	eor	r5, r5, r3
    8b3c:	add	r0, r0, r5
    8b40:	movw	r5, #8772	; 0x2244
    8b44:	movt	r5, #62505	; 0xf429
    8b48:	add	r0, r0, r5
    8b4c:	mvn	r5, r3
    8b50:	add	r3, r1, r3
    8b54:	ldr	r1, [sp, #36]	; 0x24
    8b58:	add	r0, r2, r0, ror #26
    8b5c:	orr	r5, r0, r5
    8b60:	eor	r5, r5, r2
    8b64:	add	r7, r7, r5
    8b68:	movw	r5, #65431	; 0xff97
    8b6c:	movt	r5, #17194	; 0x432a
    8b70:	add	r7, r7, r5
    8b74:	mvn	r5, r2
    8b78:	add	r2, r1, r2
    8b7c:	ldr	r1, [fp, #-48]	; 0xffffffd0
    8b80:	add	r7, r0, r7, ror #22
    8b84:	orr	r5, r7, r5
    8b88:	eor	r5, r5, r0
    8b8c:	add	r3, r3, r5
    8b90:	movw	r5, #9127	; 0x23a7
    8b94:	movt	r5, #43924	; 0xab94
    8b98:	add	r3, r3, r5
    8b9c:	mvn	r5, r0
    8ba0:	add	r0, r6, r0
    8ba4:	movw	r6, #22979	; 0x59c3
    8ba8:	add	r3, r7, r3, ror #17
    8bac:	movt	r6, #25947	; 0x655b
    8bb0:	orr	r5, r3, r5
    8bb4:	eor	r5, r5, r7
    8bb8:	add	r2, r2, r5
    8bbc:	movw	r5, #41017	; 0xa039
    8bc0:	movt	r5, #64659	; 0xfc93
    8bc4:	add	r2, r2, r5
    8bc8:	mvn	r5, r7
    8bcc:	add	r7, ip, r7
    8bd0:	add	r2, r3, r2, ror #11
    8bd4:	orr	r5, r2, r5
    8bd8:	eor	r5, r5, r3
    8bdc:	add	r0, r0, r5
    8be0:	ldr	r5, [fp, #-40]	; 0xffffffd8
    8be4:	add	r0, r0, r6
    8be8:	mvn	r6, r3
    8bec:	add	r3, r8, r3
    8bf0:	add	r0, r2, r0, ror #26
    8bf4:	orr	r6, r0, r6
    8bf8:	eor	r6, r6, r2
    8bfc:	add	r7, r7, r6
    8c00:	movw	r6, #52370	; 0xcc92
    8c04:	movt	r6, #36620	; 0x8f0c
    8c08:	add	r7, r7, r6
    8c0c:	mvn	r6, r2
    8c10:	add	r2, r1, r2
    8c14:	ldr	r1, [sp, #44]	; 0x2c
    8c18:	add	r7, r0, r7, ror #22
    8c1c:	orr	r6, r7, r6
    8c20:	eor	r6, r6, r0
    8c24:	add	r3, r3, r6
    8c28:	movw	r6, #62589	; 0xf47d
    8c2c:	movt	r6, #65519	; 0xffef
    8c30:	add	r3, r3, r6
    8c34:	mvn	r6, r0
    8c38:	add	r0, r1, r0
    8c3c:	add	r1, lr, r7
    8c40:	add	r3, r7, r3, ror #17
    8c44:	orr	r6, r3, r6
    8c48:	eor	r6, r6, r7
    8c4c:	add	r2, r2, r6
    8c50:	movw	r6, #24017	; 0x5dd1
    8c54:	movt	r6, #34180	; 0x8584
    8c58:	add	r2, r2, r6
    8c5c:	mvn	r6, r7
    8c60:	ldr	r7, [sp, #40]	; 0x28
    8c64:	add	r2, r3, r2, ror #11
    8c68:	orr	r6, r2, r6
    8c6c:	eor	r6, r6, r3
    8c70:	add	r0, r0, r6
    8c74:	movw	r6, #32335	; 0x7e4f
    8c78:	movt	r6, #28584	; 0x6fa8
    8c7c:	add	r0, r0, r6
    8c80:	add	r6, r2, r0, ror #26
    8c84:	mvn	r0, r3
    8c88:	add	r3, r9, r3
    8c8c:	orr	r0, r6, r0
    8c90:	eor	r0, r0, r2
    8c94:	add	r0, r1, r0
    8c98:	movw	r1, #59104	; 0xe6e0
    8c9c:	movt	r1, #65068	; 0xfe2c
    8ca0:	add	r0, r0, r1
    8ca4:	add	r1, r6, r0, ror #22
    8ca8:	mvn	r0, r2
    8cac:	add	r2, r7, r2
    8cb0:	ldr	r7, [sp, #48]	; 0x30
    8cb4:	orr	r0, r1, r0
    8cb8:	eor	r0, r0, r6
    8cbc:	add	r0, r3, r0
    8cc0:	movw	r3, #17172	; 0x4314
    8cc4:	add	r7, r7, r6
    8cc8:	movt	r3, #41729	; 0xa301
    8ccc:	add	r0, r0, r3
    8cd0:	add	r3, r1, r0, ror #17
    8cd4:	mvn	r0, r6
    8cd8:	ldr	r6, [sp, #16]
    8cdc:	orr	r0, r3, r0
    8ce0:	eor	r0, r0, r1
    8ce4:	add	r0, r2, r0
    8ce8:	movw	r2, #4513	; 0x11a1
    8cec:	movt	r2, #19976	; 0x4e08
    8cf0:	add	r0, r0, r2
    8cf4:	mvn	r2, r1
    8cf8:	add	r1, r5, r1
    8cfc:	add	r0, r3, r0, ror #11
    8d00:	orr	r2, r0, r2
    8d04:	eor	r2, r2, r3
    8d08:	add	r2, r7, r2
    8d0c:	movw	r7, #32386	; 0x7e82
    8d10:	movt	r7, #63315	; 0xf753
    8d14:	add	r2, r2, r7
    8d18:	ldr	r7, [sp, #24]
    8d1c:	add	r2, r0, r2, ror #26
    8d20:	add	r7, r2, r7
    8d24:	str	r7, [r6]
    8d28:	mvn	r7, r3
    8d2c:	add	r3, sl, r3
    8d30:	orr	r7, r2, r7
    8d34:	eor	r7, r7, r0
    8d38:	add	r1, r1, r7
    8d3c:	movw	r7, #62005	; 0xf235
    8d40:	movt	r7, #48442	; 0xbd3a
    8d44:	add	r1, r1, r7
    8d48:	ldr	r7, [sp, #28]
    8d4c:	add	r1, r2, r1, ror #22
    8d50:	add	r7, r1, r7
    8d54:	str	r7, [r6, #12]
    8d58:	mvn	r7, r0
    8d5c:	orr	r7, r1, r7
    8d60:	eor	r7, r7, r2
    8d64:	mvn	r2, r2
    8d68:	add	r3, r3, r7
    8d6c:	movw	r7, #53947	; 0xd2bb
    8d70:	movt	r7, #10967	; 0x2ad7
    8d74:	add	r3, r3, r7
    8d78:	ldr	r7, [sp, #32]
    8d7c:	add	r3, r1, r3, ror #17
    8d80:	orr	r2, r3, r2
    8d84:	eor	r1, r2, r1
    8d88:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8d8c:	add	r7, r3, r7
    8d90:	str	r7, [r6, #8]
    8d94:	ldr	r7, [sp, #20]
    8d98:	add	r0, r2, r0
    8d9c:	add	r0, r0, r1
    8da0:	movw	r1, #54161	; 0xd391
    8da4:	add	r7, r3, r7
    8da8:	movt	r1, #60294	; 0xeb86
    8dac:	add	r0, r0, r1
    8db0:	add	r0, r7, r0, ror #11
    8db4:	str	r0, [r6, #4]
    8db8:	sub	sp, fp, #28
    8dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008dc0 <rb_sha256_crypt_r>:
    8dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dc4:	add	fp, sp, #28
    8dc8:	sub	sp, sp, #4
    8dcc:	vpush	{d8-d11}
    8dd0:	sub	sp, sp, #472	; 0x1d8
    8dd4:	mov	r5, r0
    8dd8:	ldr	r0, [pc, #3824]	; 9cd0 <rb_sha256_crypt_r+0xf10>
    8ddc:	mov	r7, r2
    8de0:	mov	r2, #3
    8de4:	mov	r4, r3
    8de8:	mov	r6, r1
    8dec:	add	r0, pc, r0
    8df0:	bl	5454 <strncmp@plt>
    8df4:	ldr	r1, [pc, #3800]	; 9cd4 <rb_sha256_crypt_r+0xf14>
    8df8:	cmp	r0, #0
    8dfc:	mov	r2, #7
    8e00:	addeq	r6, r6, #3
    8e04:	mov	r0, r6
    8e08:	add	r1, pc, r1
    8e0c:	bl	5454 <strncmp@plt>
    8e10:	movw	r1, #5000	; 0x1388
    8e14:	cmp	r0, #0
    8e18:	str	r4, [fp, #-520]	; 0xfffffdf8
    8e1c:	str	r1, [fp, #-500]	; 0xfffffe0c
    8e20:	beq	8e2c <rb_sha256_crypt_r+0x6c>
    8e24:	mov	r0, #0
    8e28:	b	8e70 <rb_sha256_crypt_r+0xb0>
    8e2c:	add	r0, r6, #7
    8e30:	sub	r1, fp, #312	; 0x138
    8e34:	mov	r2, #10
    8e38:	bl	5088 <strtoul@plt>
    8e3c:	ldr	r1, [fp, #-312]	; 0xfffffec8
    8e40:	ldrb	r2, [r1]
    8e44:	cmp	r2, #36	; 0x24
    8e48:	bne	9584 <rb_sha256_crypt_r+0x7c4>
    8e4c:	movw	r2, #51711	; 0xc9ff
    8e50:	add	r6, r1, #1
    8e54:	movt	r2, #15258	; 0x3b9a
    8e58:	cmp	r0, r2
    8e5c:	movcc	r2, r0
    8e60:	mov	r0, #1
    8e64:	cmp	r2, #1000	; 0x3e8
    8e68:	movls	r2, #1000	; 0x3e8
    8e6c:	str	r2, [fp, #-500]	; 0xfffffe0c
    8e70:	str	r0, [fp, #-532]	; 0xfffffdec
    8e74:	ldr	r1, [pc, #3676]	; 9cd8 <rb_sha256_crypt_r+0xf18>
    8e78:	mov	r0, r6
    8e7c:	add	r1, pc, r1
    8e80:	bl	5424 <strcspn@plt>
    8e84:	cmp	r0, #16
    8e88:	movcs	r0, #16
    8e8c:	str	r0, [fp, #-504]	; 0xfffffe08
    8e90:	mov	r0, r5
    8e94:	bl	5070 <strlen@plt>
    8e98:	mov	sl, r0
    8e9c:	tst	r5, #3
    8ea0:	beq	8f14 <rb_sha256_crypt_r+0x154>
    8ea4:	add	r0, sl, #11
    8ea8:	bic	r0, r0, #7
    8eac:	sub	r0, sp, r0
    8eb0:	add	r4, r0, #4
    8eb4:	mov	sp, r0
    8eb8:	mov	r0, r4
    8ebc:	mov	r1, r5
    8ec0:	mov	r2, sl
    8ec4:	bl	5094 <memcpy@plt>
    8ec8:	mov	r5, r4
    8ecc:	str	r4, [fp, #-524]	; 0xfffffdf4
    8ed0:	mov	r8, #0
    8ed4:	tst	r6, #3
    8ed8:	str	r7, [fp, #-516]	; 0xfffffdfc
    8edc:	beq	8f2c <rb_sha256_crypt_r+0x16c>
    8ee0:	ldr	r7, [fp, #-504]	; 0xfffffe08
    8ee4:	add	r0, r7, #11
    8ee8:	bic	r0, r0, #7
    8eec:	sub	r0, sp, r0
    8ef0:	add	r4, r0, #4
    8ef4:	mov	sp, r0
    8ef8:	mov	r0, r4
    8efc:	mov	r1, r6
    8f00:	mov	r2, r7
    8f04:	bl	5094 <memcpy@plt>
    8f08:	mov	r6, r4
    8f0c:	str	r4, [fp, #-528]	; 0xfffffdf0
    8f10:	b	8f38 <rb_sha256_crypt_r+0x178>
    8f14:	mov	r0, #0
    8f18:	str	r0, [fp, #-524]	; 0xfffffdf4
    8f1c:	mov	r8, #0
    8f20:	tst	r6, #3
    8f24:	str	r7, [fp, #-516]	; 0xfffffdfc
    8f28:	bne	8ee0 <rb_sha256_crypt_r+0x120>
    8f2c:	ldr	r7, [fp, #-504]	; 0xfffffe08
    8f30:	mov	r0, #0
    8f34:	str	r0, [fp, #-528]	; 0xfffffdf0
    8f38:	add	r0, pc, #912	; 0x390
    8f3c:	sub	r4, fp, #312	; 0x138
    8f40:	mov	r1, #36	; 0x24
    8f44:	vld1.64	{d8-d9}, [r0 :128]
    8f48:	add	r0, pc, #912	; 0x390
    8f4c:	mov	r2, r4
    8f50:	vld1.64	{d10-d11}, [r0 :128]
    8f54:	add	r0, r4, #16
    8f58:	str	r0, [fp, #-496]	; 0xfffffe10
    8f5c:	vst1.64	{d8-d9}, [r0]
    8f60:	mov	r0, r4
    8f64:	vst1.32	{d10-d11}, [r0], r1
    8f68:	mov	r1, sl
    8f6c:	str	r8, [r0]
    8f70:	mov	r0, r5
    8f74:	str	r8, [fp, #-272]	; 0xfffffef0
    8f78:	str	r8, [fp, #-280]	; 0xfffffee8
    8f7c:	bl	9cec <rb_sha256_process_bytes>
    8f80:	mov	r0, r6
    8f84:	mov	r1, r7
    8f88:	mov	r2, r4
    8f8c:	bl	9cec <rb_sha256_process_bytes>
    8f90:	sub	r9, fp, #488	; 0x1e8
    8f94:	mov	r1, #36	; 0x24
    8f98:	mov	r0, r9
    8f9c:	mov	r2, r9
    8fa0:	vst1.32	{d10-d11}, [r0], r1
    8fa4:	mov	r1, sl
    8fa8:	str	r8, [r0]
    8fac:	add	r0, r9, #16
    8fb0:	vst1.64	{d8-d9}, [r0]
    8fb4:	str	r0, [fp, #-508]	; 0xfffffe04
    8fb8:	mov	r0, r5
    8fbc:	str	r8, [fp, #-448]	; 0xfffffe40
    8fc0:	str	r8, [fp, #-456]	; 0xfffffe38
    8fc4:	bl	9cec <rb_sha256_process_bytes>
    8fc8:	mov	r0, r6
    8fcc:	mov	r1, r7
    8fd0:	mov	r2, r9
    8fd4:	bl	9cec <rb_sha256_process_bytes>
    8fd8:	mov	r0, r5
    8fdc:	mov	r1, sl
    8fe0:	mov	r2, r9
    8fe4:	bl	9cec <rb_sha256_process_bytes>
    8fe8:	sub	r1, fp, #100	; 0x64
    8fec:	mov	r0, r9
    8ff0:	bl	9ec0 <rb_sha256_finish_ctx>
    8ff4:	cmp	sl, #33	; 0x21
    8ff8:	mov	r1, sl
    8ffc:	mov	r8, r6
    9000:	str	r6, [fp, #-512]	; 0xfffffe00
    9004:	bcc	9044 <rb_sha256_crypt_r+0x284>
    9008:	sub	r0, sl, #33	; 0x21
    900c:	sub	r4, fp, #100	; 0x64
    9010:	sub	r6, fp, #312	; 0x138
    9014:	mov	r7, sl
    9018:	bic	r8, r0, #31
    901c:	mov	r0, r4
    9020:	mov	r1, #32
    9024:	mov	r2, r6
    9028:	bl	9cec <rb_sha256_process_bytes>
    902c:	sub	r7, r7, #32
    9030:	cmp	r7, #32
    9034:	bhi	901c <rb_sha256_crypt_r+0x25c>
    9038:	sub	r0, sl, r8
    903c:	ldr	r8, [fp, #-512]	; 0xfffffe00
    9040:	sub	r1, r0, #32
    9044:	sub	r0, fp, #100	; 0x64
    9048:	sub	r2, fp, #312	; 0x138
    904c:	bl	9cec <rb_sha256_process_bytes>
    9050:	cmp	sl, #0
    9054:	beq	91c0 <rb_sha256_crypt_r+0x400>
    9058:	sub	r6, fp, #312	; 0x138
    905c:	mov	r4, #0
    9060:	sub	r8, fp, #100	; 0x64
    9064:	mov	r7, sl
    9068:	tst	r7, #1
    906c:	mov	r2, r6
    9070:	moveq	r0, r5
    9074:	moveq	r1, sl
    9078:	movne	r0, r8
    907c:	movne	r1, #32
    9080:	bl	9cec <rb_sha256_process_bytes>
    9084:	lsr	r0, r7, #1
    9088:	cmp	r4, r7, lsr #1
    908c:	mov	r7, r0
    9090:	bne	9068 <rb_sha256_crypt_r+0x2a8>
    9094:	sub	r0, fp, #312	; 0x138
    9098:	sub	r1, fp, #100	; 0x64
    909c:	bl	9ec0 <rb_sha256_finish_ctx>
    90a0:	add	r0, pc, #568	; 0x238
    90a4:	add	r1, pc, #548	; 0x224
    90a8:	ldr	r7, [fp, #-508]	; 0xfffffe04
    90ac:	ldr	r8, [fp, #-512]	; 0xfffffe00
    90b0:	cmp	sl, #0
    90b4:	vld1.64	{d16-d17}, [r0 :128]
    90b8:	vld1.64	{d18-d19}, [r1 :128]
    90bc:	mov	r0, #40	; 0x28
    90c0:	mov	r1, r9
    90c4:	vst1.32	{d16-d17}, [r1], r0
    90c8:	mov	r0, #0
    90cc:	vst1.32	{d18-d19}, [r7]
    90d0:	str	r0, [r1]
    90d4:	str	r0, [fp, #-456]	; 0xfffffe38
    90d8:	str	r0, [fp, #-452]	; 0xfffffe3c
    90dc:	beq	9200 <rb_sha256_crypt_r+0x440>
    90e0:	sub	r6, fp, #488	; 0x1e8
    90e4:	mov	r4, sl
    90e8:	mov	r0, r5
    90ec:	mov	r1, sl
    90f0:	mov	r2, r6
    90f4:	bl	9cec <rb_sha256_process_bytes>
    90f8:	subs	r4, r4, #1
    90fc:	bne	90e8 <rb_sha256_crypt_r+0x328>
    9100:	sub	r6, fp, #136	; 0x88
    9104:	sub	r0, fp, #488	; 0x1e8
    9108:	mov	r1, r6
    910c:	bl	9ec0 <rb_sha256_finish_ctx>
    9110:	add	r0, sl, #7
    9114:	bic	r0, r0, #7
    9118:	sub	r3, sp, r0
    911c:	mov	sp, r3
    9120:	ldr	r5, [fp, #-504]	; 0xfffffe08
    9124:	cmp	sl, #32
    9128:	str	r3, [fp, #-492]	; 0xfffffe14
    912c:	bcc	922c <rb_sha256_crypt_r+0x46c>
    9130:	sub	r2, sl, #32
    9134:	mov	r1, sl
    9138:	mov	r0, r3
    913c:	tst	r2, #32
    9140:	bne	9168 <rb_sha256_crypt_r+0x3a8>
    9144:	mov	r0, r6
    9148:	mov	r1, #32
    914c:	vld1.64	{d16-d17}, [r0]!
    9150:	vld1.64	{d18-d19}, [r0]
    9154:	add	r0, r3, #16
    9158:	vst1.64	{d18-d19}, [r0]
    915c:	mov	r0, r3
    9160:	vst1.64	{d16-d17}, [r0], r1
    9164:	mov	r1, r2
    9168:	cmp	r2, #32
    916c:	bcc	91b8 <rb_sha256_crypt_r+0x3f8>
    9170:	mov	r2, #48	; 0x30
    9174:	mov	r3, r6
    9178:	add	r7, r0, #16
    917c:	sub	r1, r1, #64	; 0x40
    9180:	vld1.8	{d16-d17}, [r3]!
    9184:	cmp	r1, #31
    9188:	vld1.64	{d18-d19}, [r3]
    918c:	vst1.8	{d18-d19}, [r7]
    9190:	mov	r7, r0
    9194:	vld1.64	{d18-d19}, [r3]
    9198:	add	r3, r0, #32
    919c:	add	r0, r0, #64	; 0x40
    91a0:	vst1.8	{d16-d17}, [r7], r2
    91a4:	vld1.64	{d16-d17}, [r6]
    91a8:	vst1.8	{d18-d19}, [r7]
    91ac:	vst1.8	{d16-d17}, [r3]
    91b0:	bhi	9174 <rb_sha256_crypt_r+0x3b4>
    91b4:	ldr	r7, [fp, #-508]	; 0xfffffe04
    91b8:	and	r2, sl, #31
    91bc:	b	9234 <rb_sha256_crypt_r+0x474>
    91c0:	sub	r0, fp, #312	; 0x138
    91c4:	sub	r1, fp, #100	; 0x64
    91c8:	bl	9ec0 <rb_sha256_finish_ctx>
    91cc:	add	r0, pc, #268	; 0x10c
    91d0:	add	r1, pc, #248	; 0xf8
    91d4:	ldr	r7, [fp, #-508]	; 0xfffffe04
    91d8:	vld1.64	{d16-d17}, [r0 :128]
    91dc:	vld1.64	{d18-d19}, [r1 :128]
    91e0:	mov	r0, #40	; 0x28
    91e4:	mov	r1, r9
    91e8:	vst1.32	{d16-d17}, [r1], r0
    91ec:	mov	r0, #0
    91f0:	vst1.32	{d18-d19}, [r7]
    91f4:	str	r0, [r1]
    91f8:	str	r0, [fp, #-456]	; 0xfffffe38
    91fc:	str	r0, [fp, #-452]	; 0xfffffe3c
    9200:	sub	r0, fp, #488	; 0x1e8
    9204:	sub	r1, fp, #136	; 0x88
    9208:	bl	9ec0 <rb_sha256_finish_ctx>
    920c:	add	r0, sl, #7
    9210:	bic	r0, r0, #7
    9214:	sub	r0, sp, r0
    9218:	mov	sp, r0
    921c:	ldr	r5, [fp, #-504]	; 0xfffffe08
    9220:	mov	r2, #0
    9224:	str	r0, [fp, #-492]	; 0xfffffe14
    9228:	b	9234 <rb_sha256_crypt_r+0x474>
    922c:	mov	r0, r3
    9230:	mov	r2, sl
    9234:	sub	r1, fp, #136	; 0x88
    9238:	sub	r6, fp, #312	; 0x138
    923c:	bl	5094 <memcpy@plt>
    9240:	add	r0, pc, #152	; 0x98
    9244:	add	r1, pc, #132	; 0x84
    9248:	mov	r4, #0
    924c:	vld1.64	{d16-d17}, [r0 :128]
    9250:	vld1.64	{d18-d19}, [r1 :128]
    9254:	mov	r0, #40	; 0x28
    9258:	mov	r1, r9
    925c:	vst1.32	{d16-d17}, [r1], r0
    9260:	vst1.32	{d18-d19}, [r7]
    9264:	str	r4, [r1]
    9268:	str	r4, [fp, #-456]	; 0xfffffe38
    926c:	str	r4, [fp, #-452]	; 0xfffffe3c
    9270:	mov	r0, r8
    9274:	mov	r1, r5
    9278:	mov	r2, r9
    927c:	bl	9cec <rb_sha256_process_bytes>
    9280:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    9284:	add	r4, r4, #1
    9288:	add	r0, r0, #16
    928c:	cmp	r4, r0
    9290:	bcc	9270 <rb_sha256_crypt_r+0x4b0>
    9294:	sub	r4, fp, #136	; 0x88
    9298:	sub	r0, fp, #488	; 0x1e8
    929c:	mov	r1, r4
    92a0:	bl	9ec0 <rb_sha256_finish_ctx>
    92a4:	add	r0, r5, #7
    92a8:	bic	r0, r0, #7
    92ac:	sub	r0, sp, r0
    92b0:	mov	sp, r0
    92b4:	mov	r1, r4
    92b8:	mov	r2, r5
    92bc:	str	r0, [fp, #-508]	; 0xfffffe04
    92c0:	bl	5094 <memcpy@plt>
    92c4:	mov	r7, #0
    92c8:	b	9320 <rb_sha256_crypt_r+0x560>
    92cc:	nop	{0}
    92d0:	.word	0x510e527f
    92d4:	.word	0x9b05688c
    92d8:	.word	0x1f83d9ab
    92dc:	.word	0x5be0cd19
    92e0:	.word	0x6a09e667
    92e4:	.word	0xbb67ae85
    92e8:	.word	0x3c6ef372
    92ec:	.word	0xa54ff53a
    92f0:	ldr	r0, [fp, #-492]	; 0xfffffe14
    92f4:	mov	r1, sl
    92f8:	mov	r2, r6
    92fc:	bl	9cec <rb_sha256_process_bytes>
    9300:	sub	r4, fp, #100	; 0x64
    9304:	mov	r0, r6
    9308:	mov	r1, r4
    930c:	bl	9ec0 <rb_sha256_finish_ctx>
    9310:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    9314:	add	r7, r7, #1
    9318:	cmp	r0, r7
    931c:	beq	9424 <rb_sha256_crypt_r+0x664>
    9320:	sub	r0, pc, #72	; 0x48
    9324:	mov	r1, #40	; 0x28
    9328:	mov	r5, sl
    932c:	ands	r4, r7, #1
    9330:	vld1.64	{d16-d17}, [r0 :128]
    9334:	sub	r0, pc, #108	; 0x6c
    9338:	vld1.64	{d18-d19}, [r0 :128]
    933c:	mov	r0, r6
    9340:	vst1.32	{d16-d17}, [r0], r1
    9344:	ldr	r1, [fp, #-496]	; 0xfffffe10
    9348:	vst1.32	{d18-d19}, [r1]
    934c:	mov	r1, #0
    9350:	str	r1, [r0]
    9354:	movw	r0, #18725	; 0x4925
    9358:	str	r1, [fp, #-280]	; 0xfffffee8
    935c:	str	r1, [fp, #-276]	; 0xfffffeec
    9360:	movt	r0, #9362	; 0x2492
    9364:	umull	r0, r1, r7, r0
    9368:	sub	r0, r7, r1
    936c:	add	r9, r1, r0, lsr #1
    9370:	lsr	r0, r9, #2
    9374:	lsl	r8, r0, #3
    9378:	movw	r0, #43691	; 0xaaab
    937c:	movt	r0, #43690	; 0xaaaa
    9380:	umull	r0, r1, r7, r0
    9384:	lsr	r0, r1, #1
    9388:	add	sl, r0, r0, lsl #1
    938c:	beq	939c <rb_sha256_crypt_r+0x5dc>
    9390:	ldr	r0, [fp, #-492]	; 0xfffffe14
    9394:	mov	r1, r5
    9398:	b	93a4 <rb_sha256_crypt_r+0x5e4>
    939c:	sub	r0, fp, #100	; 0x64
    93a0:	mov	r1, #32
    93a4:	mov	r2, r6
    93a8:	bl	9cec <rb_sha256_process_bytes>
    93ac:	sub	r6, r8, r9, lsr #2
    93b0:	cmp	sl, r7
    93b4:	bne	93d4 <rb_sha256_crypt_r+0x614>
    93b8:	cmp	r6, r7
    93bc:	mov	sl, r5
    93c0:	sub	r6, fp, #312	; 0x138
    93c4:	bne	93f4 <rb_sha256_crypt_r+0x634>
    93c8:	cmp	r4, #0
    93cc:	beq	92f0 <rb_sha256_crypt_r+0x530>
    93d0:	b	940c <rb_sha256_crypt_r+0x64c>
    93d4:	ldr	r0, [fp, #-508]	; 0xfffffe04
    93d8:	ldr	r1, [fp, #-504]	; 0xfffffe08
    93dc:	sub	r2, fp, #312	; 0x138
    93e0:	bl	9cec <rb_sha256_process_bytes>
    93e4:	cmp	r6, r7
    93e8:	mov	sl, r5
    93ec:	sub	r6, fp, #312	; 0x138
    93f0:	beq	93c8 <rb_sha256_crypt_r+0x608>
    93f4:	ldr	r0, [fp, #-492]	; 0xfffffe14
    93f8:	mov	r1, sl
    93fc:	mov	r2, r6
    9400:	bl	9cec <rb_sha256_process_bytes>
    9404:	cmp	r4, #0
    9408:	beq	92f0 <rb_sha256_crypt_r+0x530>
    940c:	sub	r4, fp, #100	; 0x64
    9410:	mov	r1, #32
    9414:	mov	r2, r6
    9418:	mov	r0, r4
    941c:	bl	9cec <rb_sha256_process_bytes>
    9420:	b	9304 <rb_sha256_crypt_r+0x544>
    9424:	ldr	r4, [fp, #-520]	; 0xfffffdf8
    9428:	ldr	r8, [fp, #-516]	; 0xfffffdfc
    942c:	mov	r1, #0
    9430:	bic	r5, r4, r4, asr #31
    9434:	mov	r0, r8
    9438:	mov	r2, r5
    943c:	bl	4ed8 <memset@plt>
    9440:	ldr	r1, [pc, #2196]	; 9cdc <rb_sha256_crypt_r+0xf1c>
    9444:	mov	r0, r8
    9448:	mov	r2, r5
    944c:	add	r1, pc, r1
    9450:	bl	4e30 <strncpy@plt>
    9454:	bl	5070 <strlen@plt>
    9458:	adds	r6, r8, r0
    945c:	ldr	r0, [fp, #-532]	; 0xfffffdec
    9460:	sub	r7, r4, #3
    9464:	addeq	r6, r8, r5
    9468:	cmp	r0, #0
    946c:	beq	94a4 <rb_sha256_crypt_r+0x6e4>
    9470:	sub	sp, sp, #8
    9474:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    9478:	bic	r1, r7, r7, asr #31
    947c:	str	r0, [sp]
    9480:	mov	r0, r6
    9484:	ldr	r2, [pc, #2132]	; 9ce0 <rb_sha256_crypt_r+0xf20>
    9488:	ldr	r3, [pc, #2132]	; 9ce4 <rb_sha256_crypt_r+0xf24>
    948c:	add	r2, pc, r2
    9490:	add	r3, pc, r3
    9494:	bl	53f4 <snprintf@plt>
    9498:	add	sp, sp, #8
    949c:	sub	r7, r7, r0
    94a0:	add	r6, r6, r0
    94a4:	ldr	r4, [fp, #-504]	; 0xfffffe08
    94a8:	mov	r0, r6
    94ac:	mov	r1, #0
    94b0:	mov	r9, #0
    94b4:	mov	r2, r4
    94b8:	bl	4ed8 <memset@plt>
    94bc:	bic	r5, r7, r7, asr #31
    94c0:	ldr	r1, [fp, #-512]	; 0xfffffe00
    94c4:	mov	r0, r6
    94c8:	cmp	r5, r4
    94cc:	movcs	r5, r4
    94d0:	mov	r2, r5
    94d4:	bl	4e30 <strncpy@plt>
    94d8:	mov	r0, r8
    94dc:	sub	r5, r7, r5
    94e0:	bl	5070 <strlen@plt>
    94e4:	adds	r2, r8, r0
    94e8:	moveq	r2, r4
    94ec:	cmp	r5, #1
    94f0:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    94f4:	mov	r0, #36	; 0x24
    94f8:	strb	r0, [r2]
    94fc:	beq	9ba8 <rb_sha256_crypt_r+0xde8>
    9500:	ldrb	r6, [fp, #-80]	; 0xffffffb0
    9504:	ldrb	r3, [fp, #-100]	; 0xffffff9c
    9508:	ldrb	r7, [fp, #-90]	; 0xffffffa6
    950c:	ldr	r0, [pc, #2004]	; 9ce8 <rb_sha256_crypt_r+0xf28>
    9510:	and	r1, r6, #63	; 0x3f
    9514:	add	r0, pc, r0
    9518:	ldrb	r1, [r0, r1]
    951c:	strb	r1, [r2, #1]
    9520:	sub	r1, r5, #2
    9524:	cmp	r1, #0
    9528:	ble	9598 <rb_sha256_crypt_r+0x7d8>
    952c:	orr	r1, r6, r7, lsl #8
    9530:	ubfx	r1, r1, #6, #6
    9534:	ldrb	r1, [r0, r1]
    9538:	strb	r1, [r2, #2]
    953c:	sub	r1, r5, #3
    9540:	cmp	r1, #1
    9544:	blt	95a8 <rb_sha256_crypt_r+0x7e8>
    9548:	lsl	r1, r7, #8
    954c:	orr	r1, r1, r3, lsl #16
    9550:	ubfx	r1, r1, #12, #6
    9554:	ldrb	r1, [r0, r1]
    9558:	strb	r1, [r2, #3]
    955c:	sub	r1, r5, #4
    9560:	cmp	r1, #1
    9564:	blt	95b8 <rb_sha256_crypt_r+0x7f8>
    9568:	ldrb	r1, [r0, r3, lsr #2]
    956c:	add	r7, r2, #5
    9570:	strb	r1, [r2, #4]
    9574:	sub	r1, r5, #5
    9578:	cmp	r1, #1
    957c:	bge	95c4 <rb_sha256_crypt_r+0x804>
    9580:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    9584:	mov	r0, #0
    9588:	str	r0, [fp, #-532]	; 0xfffffdec
    958c:	movw	r0, #5000	; 0x1388
    9590:	str	r0, [fp, #-500]	; 0xfffffe0c
    9594:	b	8e74 <rb_sha256_crypt_r+0xb4>
    9598:	add	r7, r2, #2
    959c:	cmp	r1, #1
    95a0:	bge	95c4 <rb_sha256_crypt_r+0x804>
    95a4:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    95a8:	add	r7, r2, #3
    95ac:	cmp	r1, #1
    95b0:	bge	95c4 <rb_sha256_crypt_r+0x804>
    95b4:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    95b8:	add	r7, r2, #4
    95bc:	cmp	r1, #1
    95c0:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    95c4:	ldrb	r4, [fp, #-89]	; 0xffffffa7
    95c8:	ldrb	r5, [fp, #-99]	; 0xffffff9d
    95cc:	ldrb	r6, [fp, #-79]	; 0xffffffb1
    95d0:	mov	r3, r7
    95d4:	and	r2, r4, #63	; 0x3f
    95d8:	ldrb	r2, [r0, r2]
    95dc:	strb	r2, [r3], #1
    95e0:	sub	r2, r1, #1
    95e4:	cmp	r2, #0
    95e8:	ble	9638 <rb_sha256_crypt_r+0x878>
    95ec:	orr	r2, r4, r5, lsl #8
    95f0:	ubfx	r2, r2, #6, #6
    95f4:	ldrb	r2, [r0, r2]
    95f8:	strb	r2, [r7, #1]
    95fc:	sub	r2, r1, #2
    9600:	cmp	r2, #1
    9604:	blt	973c <rb_sha256_crypt_r+0x97c>
    9608:	lsl	r2, r5, #8
    960c:	orr	r2, r2, r6, lsl #16
    9610:	ubfx	r2, r2, #12, #6
    9614:	ldrb	r2, [r0, r2]
    9618:	strb	r2, [r7, #2]
    961c:	sub	r2, r1, #3
    9620:	cmp	r2, #1
    9624:	blt	974c <rb_sha256_crypt_r+0x98c>
    9628:	ldrb	r2, [r0, r6, lsr #2]
    962c:	add	r3, r7, #4
    9630:	strb	r2, [r7, #3]
    9634:	sub	r2, r1, #4
    9638:	cmp	r2, #1
    963c:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    9640:	ldrb	r4, [fp, #-98]	; 0xffffff9e
    9644:	ldrb	r6, [fp, #-88]	; 0xffffffa8
    9648:	ldrb	r5, [fp, #-78]	; 0xffffffb2
    964c:	mov	r7, r3
    9650:	and	r1, r4, #63	; 0x3f
    9654:	ldrb	r1, [r0, r1]
    9658:	strb	r1, [r7], #1
    965c:	sub	r1, r2, #1
    9660:	cmp	r1, #0
    9664:	ble	96b4 <rb_sha256_crypt_r+0x8f4>
    9668:	orr	r1, r4, r5, lsl #8
    966c:	ubfx	r1, r1, #6, #6
    9670:	ldrb	r1, [r0, r1]
    9674:	strb	r1, [r3, #1]
    9678:	sub	r1, r2, #2
    967c:	cmp	r1, #1
    9680:	blt	975c <rb_sha256_crypt_r+0x99c>
    9684:	lsl	r1, r5, #8
    9688:	orr	r1, r1, r6, lsl #16
    968c:	ubfx	r1, r1, #12, #6
    9690:	ldrb	r1, [r0, r1]
    9694:	strb	r1, [r3, #2]
    9698:	sub	r1, r2, #3
    969c:	cmp	r1, #1
    96a0:	blt	976c <rb_sha256_crypt_r+0x9ac>
    96a4:	ldrb	r1, [r0, r6, lsr #2]
    96a8:	add	r7, r3, #4
    96ac:	strb	r1, [r3, #3]
    96b0:	sub	r1, r2, #4
    96b4:	cmp	r1, #1
    96b8:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    96bc:	ldrb	r4, [fp, #-77]	; 0xffffffb3
    96c0:	ldrb	r6, [fp, #-97]	; 0xffffff9f
    96c4:	ldrb	r5, [fp, #-87]	; 0xffffffa9
    96c8:	mov	r3, r7
    96cc:	and	r2, r4, #63	; 0x3f
    96d0:	ldrb	r2, [r0, r2]
    96d4:	strb	r2, [r3], #1
    96d8:	sub	r2, r1, #1
    96dc:	cmp	r2, #0
    96e0:	ble	9790 <rb_sha256_crypt_r+0x9d0>
    96e4:	orr	r2, r4, r5, lsl #8
    96e8:	ubfx	r2, r2, #6, #6
    96ec:	ldrb	r2, [r0, r2]
    96f0:	strb	r2, [r7, #1]
    96f4:	sub	r2, r1, #2
    96f8:	cmp	r2, #1
    96fc:	blt	977c <rb_sha256_crypt_r+0x9bc>
    9700:	lsl	r2, r5, #8
    9704:	orr	r2, r2, r6, lsl #16
    9708:	ubfx	r2, r2, #12, #6
    970c:	ldrb	r2, [r0, r2]
    9710:	strb	r2, [r7, #2]
    9714:	sub	r2, r1, #3
    9718:	cmp	r2, #1
    971c:	blt	978c <rb_sha256_crypt_r+0x9cc>
    9720:	ldrb	r2, [r0, r6, lsr #2]
    9724:	add	r3, r7, #4
    9728:	strb	r2, [r7, #3]
    972c:	sub	r2, r1, #4
    9730:	cmp	r2, #1
    9734:	bge	9798 <rb_sha256_crypt_r+0x9d8>
    9738:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    973c:	add	r3, r7, #2
    9740:	cmp	r2, #1
    9744:	bge	9640 <rb_sha256_crypt_r+0x880>
    9748:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    974c:	add	r3, r7, #3
    9750:	cmp	r2, #1
    9754:	bge	9640 <rb_sha256_crypt_r+0x880>
    9758:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    975c:	add	r7, r3, #2
    9760:	cmp	r1, #1
    9764:	bge	96bc <rb_sha256_crypt_r+0x8fc>
    9768:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    976c:	add	r7, r3, #3
    9770:	cmp	r1, #1
    9774:	bge	96bc <rb_sha256_crypt_r+0x8fc>
    9778:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    977c:	add	r3, r7, #2
    9780:	cmp	r2, #1
    9784:	bge	9798 <rb_sha256_crypt_r+0x9d8>
    9788:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    978c:	add	r3, r7, #3
    9790:	cmp	r2, #1
    9794:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    9798:	ldrb	r4, [fp, #-86]	; 0xffffffaa
    979c:	ldrb	r5, [fp, #-96]	; 0xffffffa0
    97a0:	ldrb	r6, [fp, #-76]	; 0xffffffb4
    97a4:	mov	r7, r3
    97a8:	and	r1, r4, #63	; 0x3f
    97ac:	ldrb	r1, [r0, r1]
    97b0:	strb	r1, [r7], #1
    97b4:	sub	r1, r2, #1
    97b8:	cmp	r1, #0
    97bc:	ble	982c <rb_sha256_crypt_r+0xa6c>
    97c0:	orr	r1, r4, r5, lsl #8
    97c4:	ubfx	r1, r1, #6, #6
    97c8:	ldrb	r1, [r0, r1]
    97cc:	strb	r1, [r3, #1]
    97d0:	sub	r1, r2, #2
    97d4:	cmp	r1, #1
    97d8:	blt	9818 <rb_sha256_crypt_r+0xa58>
    97dc:	lsl	r1, r5, #8
    97e0:	orr	r1, r1, r6, lsl #16
    97e4:	ubfx	r1, r1, #12, #6
    97e8:	ldrb	r1, [r0, r1]
    97ec:	strb	r1, [r3, #2]
    97f0:	sub	r1, r2, #3
    97f4:	cmp	r1, #1
    97f8:	blt	9828 <rb_sha256_crypt_r+0xa68>
    97fc:	ldrb	r1, [r0, r6, lsr #2]
    9800:	add	r7, r3, #4
    9804:	strb	r1, [r3, #3]
    9808:	sub	r1, r2, #4
    980c:	cmp	r1, #1
    9810:	bge	9834 <rb_sha256_crypt_r+0xa74>
    9814:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    9818:	add	r7, r3, #2
    981c:	cmp	r1, #1
    9820:	bge	9834 <rb_sha256_crypt_r+0xa74>
    9824:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    9828:	add	r7, r3, #3
    982c:	cmp	r1, #1
    9830:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    9834:	ldrb	r4, [fp, #-95]	; 0xffffffa1
    9838:	ldrb	r6, [fp, #-85]	; 0xffffffab
    983c:	ldrb	r5, [fp, #-75]	; 0xffffffb5
    9840:	mov	r3, r7
    9844:	and	r2, r4, #63	; 0x3f
    9848:	ldrb	r2, [r0, r2]
    984c:	strb	r2, [r3], #1
    9850:	sub	r2, r1, #1
    9854:	cmp	r2, #0
    9858:	ble	98c8 <rb_sha256_crypt_r+0xb08>
    985c:	orr	r2, r4, r5, lsl #8
    9860:	ubfx	r2, r2, #6, #6
    9864:	ldrb	r2, [r0, r2]
    9868:	strb	r2, [r7, #1]
    986c:	sub	r2, r1, #2
    9870:	cmp	r2, #1
    9874:	blt	98b4 <rb_sha256_crypt_r+0xaf4>
    9878:	lsl	r2, r5, #8
    987c:	orr	r2, r2, r6, lsl #16
    9880:	ubfx	r2, r2, #12, #6
    9884:	ldrb	r2, [r0, r2]
    9888:	strb	r2, [r7, #2]
    988c:	sub	r2, r1, #3
    9890:	cmp	r2, #1
    9894:	blt	98c4 <rb_sha256_crypt_r+0xb04>
    9898:	ldrb	r2, [r0, r6, lsr #2]
    989c:	add	r3, r7, #4
    98a0:	strb	r2, [r7, #3]
    98a4:	sub	r2, r1, #4
    98a8:	cmp	r2, #1
    98ac:	bge	98d0 <rb_sha256_crypt_r+0xb10>
    98b0:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    98b4:	add	r3, r7, #2
    98b8:	cmp	r2, #1
    98bc:	bge	98d0 <rb_sha256_crypt_r+0xb10>
    98c0:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    98c4:	add	r3, r7, #3
    98c8:	cmp	r2, #1
    98cc:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    98d0:	ldrb	r4, [fp, #-74]	; 0xffffffb6
    98d4:	ldrb	r6, [fp, #-94]	; 0xffffffa2
    98d8:	ldrb	r5, [fp, #-84]	; 0xffffffac
    98dc:	mov	r7, r3
    98e0:	and	r1, r4, #63	; 0x3f
    98e4:	ldrb	r1, [r0, r1]
    98e8:	strb	r1, [r7], #1
    98ec:	sub	r1, r2, #1
    98f0:	cmp	r1, #0
    98f4:	ble	9964 <rb_sha256_crypt_r+0xba4>
    98f8:	orr	r1, r4, r5, lsl #8
    98fc:	ubfx	r1, r1, #6, #6
    9900:	ldrb	r1, [r0, r1]
    9904:	strb	r1, [r3, #1]
    9908:	sub	r1, r2, #2
    990c:	cmp	r1, #1
    9910:	blt	9950 <rb_sha256_crypt_r+0xb90>
    9914:	lsl	r1, r5, #8
    9918:	orr	r1, r1, r6, lsl #16
    991c:	ubfx	r1, r1, #12, #6
    9920:	ldrb	r1, [r0, r1]
    9924:	strb	r1, [r3, #2]
    9928:	sub	r1, r2, #3
    992c:	cmp	r1, #1
    9930:	blt	9960 <rb_sha256_crypt_r+0xba0>
    9934:	ldrb	r1, [r0, r6, lsr #2]
    9938:	add	r7, r3, #4
    993c:	strb	r1, [r3, #3]
    9940:	sub	r1, r2, #4
    9944:	cmp	r1, #1
    9948:	bge	996c <rb_sha256_crypt_r+0xbac>
    994c:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    9950:	add	r7, r3, #2
    9954:	cmp	r1, #1
    9958:	bge	996c <rb_sha256_crypt_r+0xbac>
    995c:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    9960:	add	r7, r3, #3
    9964:	cmp	r1, #1
    9968:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    996c:	ldrb	r4, [fp, #-83]	; 0xffffffad
    9970:	ldrb	r5, [fp, #-93]	; 0xffffffa3
    9974:	ldrb	r6, [fp, #-73]	; 0xffffffb7
    9978:	mov	r3, r7
    997c:	and	r2, r4, #63	; 0x3f
    9980:	ldrb	r2, [r0, r2]
    9984:	strb	r2, [r3], #1
    9988:	sub	r2, r1, #1
    998c:	cmp	r2, #0
    9990:	ble	9a00 <rb_sha256_crypt_r+0xc40>
    9994:	orr	r2, r4, r5, lsl #8
    9998:	ubfx	r2, r2, #6, #6
    999c:	ldrb	r2, [r0, r2]
    99a0:	strb	r2, [r7, #1]
    99a4:	sub	r2, r1, #2
    99a8:	cmp	r2, #1
    99ac:	blt	99ec <rb_sha256_crypt_r+0xc2c>
    99b0:	lsl	r2, r5, #8
    99b4:	orr	r2, r2, r6, lsl #16
    99b8:	ubfx	r2, r2, #12, #6
    99bc:	ldrb	r2, [r0, r2]
    99c0:	strb	r2, [r7, #2]
    99c4:	sub	r2, r1, #3
    99c8:	cmp	r2, #1
    99cc:	blt	99fc <rb_sha256_crypt_r+0xc3c>
    99d0:	ldrb	r2, [r0, r6, lsr #2]
    99d4:	add	r3, r7, #4
    99d8:	strb	r2, [r7, #3]
    99dc:	sub	r2, r1, #4
    99e0:	cmp	r2, #1
    99e4:	bge	9a08 <rb_sha256_crypt_r+0xc48>
    99e8:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    99ec:	add	r3, r7, #2
    99f0:	cmp	r2, #1
    99f4:	bge	9a08 <rb_sha256_crypt_r+0xc48>
    99f8:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    99fc:	add	r3, r7, #3
    9a00:	cmp	r2, #1
    9a04:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    9a08:	ldrb	r4, [fp, #-92]	; 0xffffffa4
    9a0c:	ldrb	r6, [fp, #-82]	; 0xffffffae
    9a10:	ldrb	r5, [fp, #-72]	; 0xffffffb8
    9a14:	mov	r7, r3
    9a18:	and	r1, r4, #63	; 0x3f
    9a1c:	ldrb	r1, [r0, r1]
    9a20:	strb	r1, [r7], #1
    9a24:	sub	r1, r2, #1
    9a28:	cmp	r1, #0
    9a2c:	ble	9a9c <rb_sha256_crypt_r+0xcdc>
    9a30:	orr	r1, r4, r5, lsl #8
    9a34:	ubfx	r1, r1, #6, #6
    9a38:	ldrb	r1, [r0, r1]
    9a3c:	strb	r1, [r3, #1]
    9a40:	sub	r1, r2, #2
    9a44:	cmp	r1, #1
    9a48:	blt	9a88 <rb_sha256_crypt_r+0xcc8>
    9a4c:	lsl	r1, r5, #8
    9a50:	orr	r1, r1, r6, lsl #16
    9a54:	ubfx	r1, r1, #12, #6
    9a58:	ldrb	r1, [r0, r1]
    9a5c:	strb	r1, [r3, #2]
    9a60:	sub	r1, r2, #3
    9a64:	cmp	r1, #1
    9a68:	blt	9a98 <rb_sha256_crypt_r+0xcd8>
    9a6c:	ldrb	r1, [r0, r6, lsr #2]
    9a70:	add	r7, r3, #4
    9a74:	strb	r1, [r3, #3]
    9a78:	sub	r1, r2, #4
    9a7c:	cmp	r1, #1
    9a80:	bge	9aa4 <rb_sha256_crypt_r+0xce4>
    9a84:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    9a88:	add	r7, r3, #2
    9a8c:	cmp	r1, #1
    9a90:	bge	9aa4 <rb_sha256_crypt_r+0xce4>
    9a94:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    9a98:	add	r7, r3, #3
    9a9c:	cmp	r1, #1
    9aa0:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    9aa4:	ldrb	r4, [fp, #-71]	; 0xffffffb9
    9aa8:	ldrb	r6, [fp, #-91]	; 0xffffffa5
    9aac:	ldrb	r5, [fp, #-81]	; 0xffffffaf
    9ab0:	mov	r3, r7
    9ab4:	and	r2, r4, #63	; 0x3f
    9ab8:	ldrb	r2, [r0, r2]
    9abc:	strb	r2, [r3], #1
    9ac0:	sub	r2, r1, #1
    9ac4:	cmp	r2, #0
    9ac8:	ble	9b38 <rb_sha256_crypt_r+0xd78>
    9acc:	orr	r2, r4, r5, lsl #8
    9ad0:	ubfx	r2, r2, #6, #6
    9ad4:	ldrb	r2, [r0, r2]
    9ad8:	strb	r2, [r7, #1]
    9adc:	sub	r2, r1, #2
    9ae0:	cmp	r2, #1
    9ae4:	blt	9b24 <rb_sha256_crypt_r+0xd64>
    9ae8:	lsl	r2, r5, #8
    9aec:	orr	r2, r2, r6, lsl #16
    9af0:	ubfx	r2, r2, #12, #6
    9af4:	ldrb	r2, [r0, r2]
    9af8:	strb	r2, [r7, #2]
    9afc:	sub	r2, r1, #3
    9b00:	cmp	r2, #1
    9b04:	blt	9b34 <rb_sha256_crypt_r+0xd74>
    9b08:	ldrb	r2, [r0, r6, lsr #2]
    9b0c:	add	r3, r7, #4
    9b10:	strb	r2, [r7, #3]
    9b14:	sub	r2, r1, #4
    9b18:	cmp	r2, #1
    9b1c:	bge	9b40 <rb_sha256_crypt_r+0xd80>
    9b20:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    9b24:	add	r3, r7, #2
    9b28:	cmp	r2, #1
    9b2c:	bge	9b40 <rb_sha256_crypt_r+0xd80>
    9b30:	b	9ba8 <rb_sha256_crypt_r+0xde8>
    9b34:	add	r3, r7, #3
    9b38:	cmp	r2, #1
    9b3c:	blt	9ba8 <rb_sha256_crypt_r+0xde8>
    9b40:	ldrb	r5, [fp, #-70]	; 0xffffffba
    9b44:	ldrb	r6, [fp, #-69]	; 0xffffffbb
    9b48:	mov	r7, r3
    9b4c:	and	r1, r5, #63	; 0x3f
    9b50:	ldrb	r1, [r0, r1]
    9b54:	strb	r1, [r7], #1
    9b58:	sub	r1, r2, #1
    9b5c:	cmp	r1, #0
    9b60:	ble	9b8c <rb_sha256_crypt_r+0xdcc>
    9b64:	orr	r7, r5, r6, lsl #8
    9b68:	sub	r2, r2, #2
    9b6c:	cmp	r2, #1
    9b70:	ubfx	r7, r7, #6, #6
    9b74:	ldrb	r7, [r0, r7]
    9b78:	strb	r7, [r3, #1]
    9b7c:	blt	9b9c <rb_sha256_crypt_r+0xddc>
    9b80:	ldrb	r0, [r0, r6, lsr #4]
    9b84:	add	r7, r3, #3
    9b88:	strb	r0, [r3, #2]
    9b8c:	mov	r1, r2
    9b90:	cmp	r1, #1
    9b94:	ble	9ba8 <rb_sha256_crypt_r+0xde8>
    9b98:	b	9c94 <rb_sha256_crypt_r+0xed4>
    9b9c:	add	r7, r3, #2
    9ba0:	cmp	r1, #1
    9ba4:	bgt	9c94 <rb_sha256_crypt_r+0xed4>
    9ba8:	bl	552c <__errno_location@plt>
    9bac:	mov	r1, #34	; 0x22
    9bb0:	str	r1, [r0]
    9bb4:	add	r0, pc, #260	; 0x104
    9bb8:	add	r1, pc, #240	; 0xf0
    9bbc:	sub	r5, fp, #312	; 0x138
    9bc0:	vld1.64	{d16-d17}, [r0 :128]
    9bc4:	vld1.64	{d18-d19}, [r1 :128]
    9bc8:	mov	r0, #40	; 0x28
    9bcc:	mov	r1, r5
    9bd0:	vst1.32	{d16-d17}, [r1], r0
    9bd4:	ldr	r0, [fp, #-496]	; 0xfffffe10
    9bd8:	vst1.32	{d18-d19}, [r0]
    9bdc:	mov	r0, #0
    9be0:	str	r0, [r1]
    9be4:	str	r0, [fp, #-280]	; 0xfffffee8
    9be8:	str	r0, [fp, #-276]	; 0xfffffeec
    9bec:	sub	r1, fp, #100	; 0x64
    9bf0:	mov	r0, r5
    9bf4:	bl	9ec0 <rb_sha256_finish_ctx>
    9bf8:	vmov.i32	q8, #0	; 0x00000000
    9bfc:	sub	r0, fp, #136	; 0x88
    9c00:	mov	r1, #0
    9c04:	mov	r2, sl
    9c08:	vst1.64	{d16-d17}, [r0]!
    9c0c:	vst1.64	{d16-d17}, [r0]
    9c10:	ldr	r0, [fp, #-492]	; 0xfffffe14
    9c14:	bl	4ed8 <memset@plt>
    9c18:	ldr	r4, [fp, #-504]	; 0xfffffe08
    9c1c:	ldr	r0, [fp, #-508]	; 0xfffffe04
    9c20:	mov	r1, #0
    9c24:	mov	r2, r4
    9c28:	bl	4ed8 <memset@plt>
    9c2c:	mov	r0, r5
    9c30:	mov	r1, #0
    9c34:	mov	r2, #172	; 0xac
    9c38:	bl	4ed8 <memset@plt>
    9c3c:	sub	r0, fp, #488	; 0x1e8
    9c40:	mov	r1, #0
    9c44:	mov	r2, #172	; 0xac
    9c48:	bl	4ed8 <memset@plt>
    9c4c:	ldr	r0, [fp, #-524]	; 0xfffffdf4
    9c50:	ldr	r5, [fp, #-528]	; 0xfffffdf0
    9c54:	cmp	r0, #0
    9c58:	beq	9c68 <rb_sha256_crypt_r+0xea8>
    9c5c:	mov	r1, #0
    9c60:	mov	r2, sl
    9c64:	bl	4ed8 <memset@plt>
    9c68:	cmp	r5, #0
    9c6c:	beq	9c80 <rb_sha256_crypt_r+0xec0>
    9c70:	mov	r0, r5
    9c74:	mov	r1, #0
    9c78:	mov	r2, r4
    9c7c:	bl	4ed8 <memset@plt>
    9c80:	mov	r0, r9
    9c84:	sub	sp, fp, #64	; 0x40
    9c88:	vpop	{d8-d11}
    9c8c:	add	sp, sp, #4
    9c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c94:	mov	r0, #0
    9c98:	mov	r9, r8
    9c9c:	strb	r0, [r7]
    9ca0:	b	9bb4 <rb_sha256_crypt_r+0xdf4>
    9ca4:	nop	{0}
    9ca8:	nop	{0}
    9cac:	nop	{0}
    9cb0:	.word	0x510e527f
    9cb4:	.word	0x9b05688c
    9cb8:	.word	0x1f83d9ab
    9cbc:	.word	0x5be0cd19
    9cc0:	.word	0x6a09e667
    9cc4:	.word	0xbb67ae85
    9cc8:	.word	0x3c6ef372
    9ccc:	.word	0xa54ff53a
    9cd0:	.word	0x000119e4
    9cd4:	.word	0x000119cc
    9cd8:	.word	0x0001161e
    9cdc:	.word	0x00011384
    9ce0:	.word	0x00011010
    9ce4:	.word	0x00011344
    9ce8:	.word	0x00010f43

00009cec <rb_sha256_process_bytes>:
    9cec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cf0:	add	fp, sp, #28
    9cf4:	sub	sp, sp, #12
    9cf8:	ldr	r5, [r2, #40]	; 0x28
    9cfc:	mov	r4, r2
    9d00:	mov	r8, r1
    9d04:	mov	r6, r0
    9d08:	cmp	r5, #0
    9d0c:	beq	9d80 <rb_sha256_process_bytes+0x94>
    9d10:	rsb	r7, r5, #128	; 0x80
    9d14:	add	r0, r4, r5
    9d18:	mov	r1, r6
    9d1c:	cmp	r7, r8
    9d20:	add	r0, r0, #44	; 0x2c
    9d24:	movhi	r7, r8
    9d28:	mov	r2, r7
    9d2c:	bl	5094 <memcpy@plt>
    9d30:	ldr	r0, [r4, #40]	; 0x28
    9d34:	add	r0, r0, r7
    9d38:	cmp	r0, #65	; 0x41
    9d3c:	str	r0, [r4, #40]	; 0x28
    9d40:	bcc	9d78 <rb_sha256_process_bytes+0x8c>
    9d44:	add	r9, r4, #44	; 0x2c
    9d48:	bic	r1, r0, #63	; 0x3f
    9d4c:	mov	r2, r4
    9d50:	mov	r0, r9
    9d54:	bl	9fe4 <rb_sha256_process_block>
    9d58:	ldr	r0, [r4, #40]	; 0x28
    9d5c:	and	r2, r0, #63	; 0x3f
    9d60:	add	r0, r7, r5
    9d64:	bic	r0, r0, #63	; 0x3f
    9d68:	str	r2, [r4, #40]	; 0x28
    9d6c:	add	r1, r9, r0
    9d70:	mov	r0, r9
    9d74:	bl	5094 <memcpy@plt>
    9d78:	sub	r8, r8, r7
    9d7c:	add	r6, r6, r7
    9d80:	cmp	r8, #64	; 0x40
    9d84:	bcc	9e24 <rb_sha256_process_bytes+0x138>
    9d88:	tst	r6, #3
    9d8c:	beq	9e38 <rb_sha256_process_bytes+0x14c>
    9d90:	cmp	r8, #65	; 0x41
    9d94:	bcc	9e60 <rb_sha256_process_bytes+0x174>
    9d98:	add	r5, r4, #44	; 0x2c
    9d9c:	sub	r0, r8, #65	; 0x41
    9da0:	mov	r7, r6
    9da4:	str	r8, [sp, #8]
    9da8:	bic	r0, r0, #63	; 0x3f
    9dac:	add	sl, r5, #32
    9db0:	add	r9, r5, #16
    9db4:	str	r0, [sp, #4]
    9db8:	mov	r0, #64	; 0x40
    9dbc:	add	r1, r6, #48	; 0x30
    9dc0:	mov	r2, r4
    9dc4:	vld1.8	{d16-d17}, [r7], r0
    9dc8:	add	r0, r6, #32
    9dcc:	vld1.8	{d18-d19}, [r1]
    9dd0:	mov	r1, #48	; 0x30
    9dd4:	vld1.8	{d20-d21}, [r0]
    9dd8:	mov	r0, r5
    9ddc:	vst1.8	{d16-d17}, [r0], r1
    9de0:	add	r1, r6, #16
    9de4:	vld1.8	{d16-d17}, [r1]
    9de8:	vst1.8	{d18-d19}, [r0]
    9dec:	mov	r0, r5
    9df0:	mov	r1, #64	; 0x40
    9df4:	vst1.8	{d20-d21}, [sl]
    9df8:	vst1.8	{d16-d17}, [r9]
    9dfc:	bl	9fe4 <rb_sha256_process_block>
    9e00:	sub	r8, r8, #64	; 0x40
    9e04:	mov	r6, r7
    9e08:	cmp	r8, #64	; 0x40
    9e0c:	bhi	9db8 <rb_sha256_process_bytes+0xcc>
    9e10:	ldr	r0, [sp, #8]
    9e14:	ldr	r1, [sp, #4]
    9e18:	sub	r0, r0, r1
    9e1c:	sub	r8, r0, #64	; 0x40
    9e20:	b	9e68 <rb_sha256_process_bytes+0x17c>
    9e24:	mov	r7, r6
    9e28:	cmp	r8, #0
    9e2c:	bne	9e68 <rb_sha256_process_bytes+0x17c>
    9e30:	sub	sp, fp, #28
    9e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e38:	bic	r5, r8, #63	; 0x3f
    9e3c:	mov	r0, r6
    9e40:	mov	r2, r4
    9e44:	mov	r1, r5
    9e48:	bl	9fe4 <rb_sha256_process_block>
    9e4c:	add	r7, r6, r5
    9e50:	and	r8, r8, #63	; 0x3f
    9e54:	cmp	r8, #0
    9e58:	bne	9e68 <rb_sha256_process_bytes+0x17c>
    9e5c:	b	9e30 <rb_sha256_process_bytes+0x144>
    9e60:	mov	r7, r6
    9e64:	mov	r8, #64	; 0x40
    9e68:	ldr	r5, [r4, #40]	; 0x28
    9e6c:	mov	r1, r7
    9e70:	mov	r2, r8
    9e74:	add	r0, r4, r5
    9e78:	add	r0, r0, #44	; 0x2c
    9e7c:	bl	5094 <memcpy@plt>
    9e80:	add	r5, r5, r8
    9e84:	cmp	r5, #64	; 0x40
    9e88:	bcc	9eb4 <rb_sha256_process_bytes+0x1c8>
    9e8c:	add	r6, r4, #44	; 0x2c
    9e90:	mov	r1, #64	; 0x40
    9e94:	mov	r2, r4
    9e98:	mov	r0, r6
    9e9c:	bl	9fe4 <rb_sha256_process_block>
    9ea0:	sub	r5, r5, #64	; 0x40
    9ea4:	add	r1, r4, #108	; 0x6c
    9ea8:	mov	r0, r6
    9eac:	mov	r2, r5
    9eb0:	bl	5094 <memcpy@plt>
    9eb4:	str	r5, [r4, #40]	; 0x28
    9eb8:	sub	sp, fp, #28
    9ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009ec0 <rb_sha256_finish_ctx>:
    9ec0:	push	{r4, r5, r6, r7, fp, lr}
    9ec4:	add	fp, sp, #16
    9ec8:	mov	r5, r0
    9ecc:	mov	r4, r1
    9ed0:	ldr	r0, [r0, #32]
    9ed4:	ldr	r1, [r5, #40]	; 0x28
    9ed8:	adds	r0, r0, r1
    9edc:	str	r0, [r5, #32]
    9ee0:	bcc	9ef0 <rb_sha256_finish_ctx+0x30>
    9ee4:	ldr	r0, [r5, #36]	; 0x24
    9ee8:	add	r0, r0, #1
    9eec:	str	r0, [r5, #36]	; 0x24
    9ef0:	cmp	r1, #55	; 0x37
    9ef4:	mov	r7, #56	; 0x38
    9ef8:	add	r6, r5, #44	; 0x2c
    9efc:	movwhi	r7, #120	; 0x78
    9f00:	add	r0, r6, r1
    9f04:	sub	r2, r7, r1
    9f08:	ldr	r1, [pc, #208]	; 9fe0 <rb_sha256_finish_ctx+0x120>
    9f0c:	add	r1, pc, r1
    9f10:	bl	5094 <memcpy@plt>
    9f14:	ldr	r0, [r5, #32]
    9f18:	mov	r1, #65280	; 0xff00
    9f1c:	lsl	r3, r0, #11
    9f20:	and	r2, r1, r0, lsr #5
    9f24:	uxtb16	r3, r3
    9f28:	orr	r3, r3, r0, lsl #27
    9f2c:	orr	r2, r3, r2
    9f30:	ubfx	r3, r0, #21, #8
    9f34:	orr	r2, r2, r3
    9f38:	orr	r3, r7, #4
    9f3c:	str	r2, [r6, r3]
    9f40:	movw	r3, #8160	; 0x1fe0
    9f44:	ldr	r2, [r5, #36]	; 0x24
    9f48:	and	r1, r1, r2, lsr #5
    9f4c:	and	r3, r2, r3
    9f50:	orr	r1, r1, r3, lsl #11
    9f54:	ubfx	r3, r2, #21, #8
    9f58:	lsl	r2, r2, #3
    9f5c:	orr	r0, r2, r0, lsr #29
    9f60:	mov	r2, r5
    9f64:	orr	r1, r1, r3
    9f68:	orr	r0, r1, r0, lsl #24
    9f6c:	add	r1, r7, #8
    9f70:	str	r0, [r6, r7]
    9f74:	mov	r0, r6
    9f78:	bl	9fe4 <rb_sha256_process_block>
    9f7c:	ldr	r0, [r5]
    9f80:	rev	r0, r0
    9f84:	str	r0, [r4]
    9f88:	ldr	r0, [r5, #4]
    9f8c:	rev	r0, r0
    9f90:	str	r0, [r4, #4]
    9f94:	ldr	r0, [r5, #8]
    9f98:	rev	r0, r0
    9f9c:	str	r0, [r4, #8]
    9fa0:	ldr	r0, [r5, #12]
    9fa4:	rev	r0, r0
    9fa8:	str	r0, [r4, #12]
    9fac:	ldr	r0, [r5, #16]
    9fb0:	rev	r0, r0
    9fb4:	str	r0, [r4, #16]
    9fb8:	ldr	r0, [r5, #20]
    9fbc:	rev	r0, r0
    9fc0:	str	r0, [r4, #20]
    9fc4:	ldr	r0, [r5, #24]
    9fc8:	rev	r0, r0
    9fcc:	str	r0, [r4, #24]
    9fd0:	ldr	r0, [r5, #28]
    9fd4:	rev	r0, r0
    9fd8:	str	r0, [r4, #28]
    9fdc:	pop	{r4, r5, r6, r7, fp, pc}
    9fe0:	.word	0x000109d4

00009fe4 <rb_sha256_process_block>:
    9fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fe8:	add	fp, sp, #28
    9fec:	sub	sp, sp, #304	; 0x130
    9ff0:	mov	r3, r0
    9ff4:	ldr	r0, [r2, #32]
    9ff8:	add	lr, r2, #16
    9ffc:	lsr	r4, r1, #2
    a000:	adds	r0, r0, r1
    a004:	str	r0, [r2, #32]
    a008:	ldr	r0, [r2, #4]
    a00c:	ldr	r9, [r2]
    a010:	str	r0, [sp, #32]
    a014:	ldr	r0, [r2, #8]
    a018:	str	r0, [sp, #36]	; 0x24
    a01c:	ldr	r0, [r2, #12]
    a020:	str	r0, [sp, #40]	; 0x28
    a024:	ldr	r0, [r2, #28]
    a028:	ldm	lr, {sl, ip, lr}
    a02c:	bcc	a03c <rb_sha256_process_block+0x58>
    a030:	ldr	r1, [r2, #36]	; 0x24
    a034:	add	r1, r1, #1
    a038:	str	r1, [r2, #36]	; 0x24
    a03c:	cmp	r4, #0
    a040:	str	r2, [sp]
    a044:	beq	a288 <rb_sha256_process_block+0x2a4>
    a048:	ldr	r1, [r3]
    a04c:	str	r4, [sp, #4]
    a050:	str	r3, [sp, #8]
    a054:	rev	r8, r1
    a058:	str	r8, [sp, #44]	; 0x2c
    a05c:	ldr	r1, [r3, #4]
    a060:	rev	r1, r1
    a064:	str	r1, [sp, #48]	; 0x30
    a068:	ldr	r1, [r3, #8]
    a06c:	rev	r1, r1
    a070:	str	r1, [sp, #52]	; 0x34
    a074:	ldr	r1, [r3, #12]
    a078:	rev	r1, r1
    a07c:	str	r1, [sp, #56]	; 0x38
    a080:	ldr	r1, [r3, #16]
    a084:	rev	r1, r1
    a088:	str	r1, [sp, #60]	; 0x3c
    a08c:	ldr	r1, [r3, #20]
    a090:	rev	r1, r1
    a094:	str	r1, [sp, #64]	; 0x40
    a098:	ldr	r1, [r3, #24]
    a09c:	rev	r1, r1
    a0a0:	str	r1, [sp, #68]	; 0x44
    a0a4:	ldr	r1, [r3, #28]
    a0a8:	rev	r1, r1
    a0ac:	str	r1, [sp, #72]	; 0x48
    a0b0:	ldr	r1, [r3, #32]
    a0b4:	rev	r1, r1
    a0b8:	str	r1, [sp, #76]	; 0x4c
    a0bc:	ldr	r1, [r3, #36]	; 0x24
    a0c0:	rev	r1, r1
    a0c4:	str	r1, [sp, #80]	; 0x50
    a0c8:	ldr	r1, [r3, #40]	; 0x28
    a0cc:	rev	r1, r1
    a0d0:	str	r1, [sp, #84]	; 0x54
    a0d4:	ldr	r1, [r3, #44]	; 0x2c
    a0d8:	rev	r1, r1
    a0dc:	str	r1, [sp, #88]	; 0x58
    a0e0:	ldr	r1, [r3, #48]	; 0x30
    a0e4:	rev	r1, r1
    a0e8:	str	r1, [sp, #92]	; 0x5c
    a0ec:	ldr	r1, [r3, #52]	; 0x34
    a0f0:	rev	r1, r1
    a0f4:	str	r1, [sp, #96]	; 0x60
    a0f8:	ldr	r1, [r3, #56]	; 0x38
    a0fc:	rev	r1, r1
    a100:	str	r1, [sp, #100]	; 0x64
    a104:	ldr	r1, [r3, #60]	; 0x3c
    a108:	rev	r1, r1
    a10c:	str	r1, [sp, #104]	; 0x68
    a110:	mov	r1, #0
    a114:	add	r2, sp, #44	; 0x2c
    a118:	add	r2, r2, r1
    a11c:	add	r1, r1, #4
    a120:	ldr	r6, [r2, #56]	; 0x38
    a124:	ldr	r3, [r2, #4]
    a128:	ldr	r7, [r2, #36]	; 0x24
    a12c:	cmp	r1, #192	; 0xc0
    a130:	ror	r4, r6, #19
    a134:	ror	r5, r3, #18
    a138:	add	r7, r8, r7
    a13c:	mov	r8, r3
    a140:	eor	r4, r4, r6, lsr #10
    a144:	eor	r5, r5, r3, lsr #3
    a148:	eor	r6, r4, r6, ror #17
    a14c:	eor	r5, r5, r3, ror #7
    a150:	add	r7, r7, r6
    a154:	add	r7, r7, r5
    a158:	str	r7, [r2, #64]	; 0x40
    a15c:	bne	a114 <rb_sha256_process_block+0x130>
    a160:	ldr	r6, [sp, #32]
    a164:	ldr	r3, [sp, #36]	; 0x24
    a168:	ldr	r8, [sp, #40]	; 0x28
    a16c:	mov	r2, #0
    a170:	mov	r4, ip
    a174:	mov	r7, r0
    a178:	str	r9, [sp, #12]
    a17c:	str	sl, [sp, #16]
    a180:	str	ip, [sp, #20]
    a184:	str	lr, [sp, #24]
    a188:	str	r0, [sp, #28]
    a18c:	mov	r5, r3
    a190:	mov	r3, r6
    a194:	mov	r6, r9
    a198:	mov	ip, lr
    a19c:	mov	lr, r4
    a1a0:	mov	r4, sl
    a1a4:	ror	r0, r6, #2
    a1a8:	eor	r1, r3, r5
    a1ac:	and	r9, r3, r5
    a1b0:	eor	r0, r0, r6, ror #13
    a1b4:	and	r1, r6, r1
    a1b8:	eor	r1, r1, r9
    a1bc:	eor	r0, r0, r6, ror #22
    a1c0:	add	r9, r0, r1
    a1c4:	bic	r1, ip, sl
    a1c8:	and	r0, sl, lr
    a1cc:	orr	r0, r0, r1
    a1d0:	ror	r1, sl, #6
    a1d4:	eor	r1, r1, sl, ror #11
    a1d8:	add	r0, r0, r7
    a1dc:	mov	r7, ip
    a1e0:	eor	r1, r1, sl, ror #25
    a1e4:	add	r0, r0, r1
    a1e8:	ldr	r1, [pc, #200]	; a2b8 <rb_sha256_process_block+0x2d4>
    a1ec:	add	r1, pc, r1
    a1f0:	ldr	r1, [r1, r2, lsl #2]
    a1f4:	add	r0, r0, r1
    a1f8:	add	r1, sp, #44	; 0x2c
    a1fc:	ldr	r1, [r1, r2, lsl #2]
    a200:	add	r2, r2, #1
    a204:	cmp	r2, #64	; 0x40
    a208:	add	r0, r0, r1
    a20c:	add	sl, r0, r8
    a210:	add	r9, r9, r0
    a214:	mov	r8, r5
    a218:	bne	a18c <rb_sha256_process_block+0x1a8>
    a21c:	ldr	r1, [sp, #24]
    a220:	ldr	r0, [sp, #28]
    a224:	add	r1, lr, r1
    a228:	add	r0, ip, r0
    a22c:	ldr	ip, [sp, #20]
    a230:	mov	lr, r1
    a234:	ldr	r1, [sp, #16]
    a238:	add	ip, r4, ip
    a23c:	ldr	r4, [sp, #4]
    a240:	add	r1, sl, r1
    a244:	mov	sl, r1
    a248:	ldr	r1, [sp, #40]	; 0x28
    a24c:	subs	r4, r4, #16
    a250:	add	r1, r5, r1
    a254:	str	r1, [sp, #40]	; 0x28
    a258:	ldr	r1, [sp, #36]	; 0x24
    a25c:	add	r1, r3, r1
    a260:	ldr	r3, [sp, #8]
    a264:	str	r1, [sp, #36]	; 0x24
    a268:	ldr	r1, [sp, #32]
    a26c:	add	r3, r3, #64	; 0x40
    a270:	add	r1, r6, r1
    a274:	str	r1, [sp, #32]
    a278:	ldr	r1, [sp, #12]
    a27c:	add	r1, r9, r1
    a280:	mov	r9, r1
    a284:	bne	a048 <rb_sha256_process_block+0x64>
    a288:	ldr	r1, [sp]
    a28c:	ldr	r2, [sp, #32]
    a290:	str	r9, [r1]
    a294:	str	r2, [r1, #4]
    a298:	ldr	r2, [sp, #36]	; 0x24
    a29c:	add	r3, r1, #12
    a2a0:	str	r2, [r1, #8]
    a2a4:	ldr	r2, [sp, #40]	; 0x28
    a2a8:	stm	r3, {r2, sl, ip, lr}
    a2ac:	str	r0, [r1, #28]
    a2b0:	sub	sp, fp, #28
    a2b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2b8:	.word	0x000105f0
    a2bc:	.word	0xe320f000

0000a2c0 <rb_sha512_crypt_r>:
    a2c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2c4:	add	fp, sp, #28
    a2c8:	sub	sp, sp, #4
    a2cc:	vpush	{d8-d15}
    a2d0:	sub	sp, sp, #896	; 0x380
    a2d4:	mov	sl, r0
    a2d8:	ldr	r0, [pc, #4080]	; b2d0 <rb_sha512_crypt_r+0x1010>
    a2dc:	mov	r4, r2
    a2e0:	mov	r2, #3
    a2e4:	mov	r6, r3
    a2e8:	mov	r8, r1
    a2ec:	add	r0, pc, r0
    a2f0:	bl	5454 <strncmp@plt>
    a2f4:	ldr	r1, [pc, #4072]	; b2e4 <rb_sha512_crypt_r+0x1024>
    a2f8:	cmp	r0, #0
    a2fc:	mov	r2, #7
    a300:	addeq	r8, r8, #3
    a304:	mov	r0, r8
    a308:	add	r1, pc, r1
    a30c:	bl	5454 <strncmp@plt>
    a310:	movw	r1, #5000	; 0x1388
    a314:	cmp	r0, #0
    a318:	str	r4, [fp, #-976]	; 0xfffffc30
    a31c:	str	r6, [fp, #-980]	; 0xfffffc2c
    a320:	str	r1, [fp, #-948]	; 0xfffffc4c
    a324:	beq	a370 <rb_sha512_crypt_r+0xb0>
    a328:	mov	r0, #0
    a32c:	b	a3b4 <rb_sha512_crypt_r+0xf4>
    a330:	.word	0xf3bcc908
    a334:	.word	0x6a09e667
    a338:	.word	0x84caa73b
    a33c:	.word	0xbb67ae85
    a340:	.word	0xade682d1
    a344:	.word	0x510e527f
    a348:	.word	0x2b3e6c1f
    a34c:	.word	0x9b05688c
    a350:	.word	0xfe94f82b
    a354:	.word	0x3c6ef372
    a358:	.word	0x5f1d36f1
    a35c:	.word	0xa54ff53a
    a360:	.word	0xfb41bd6b
    a364:	.word	0x1f83d9ab
    a368:	.word	0x137e2179
    a36c:	.word	0x5be0cd19
    a370:	add	r0, r8, #7
    a374:	sub	r1, fp, #168	; 0xa8
    a378:	mov	r2, #10
    a37c:	bl	5088 <strtoul@plt>
    a380:	ldr	r1, [fp, #-168]	; 0xffffff58
    a384:	ldrb	r2, [r1]
    a388:	cmp	r2, #36	; 0x24
    a38c:	bne	ab10 <rb_sha512_crypt_r+0x850>
    a390:	movw	r2, #51711	; 0xc9ff
    a394:	add	r8, r1, #1
    a398:	movt	r2, #15258	; 0x3b9a
    a39c:	cmp	r0, r2
    a3a0:	movcc	r2, r0
    a3a4:	mov	r0, #1
    a3a8:	cmp	r2, #1000	; 0x3e8
    a3ac:	movls	r2, #1000	; 0x3e8
    a3b0:	str	r2, [fp, #-948]	; 0xfffffc4c
    a3b4:	str	r0, [fp, #-988]	; 0xfffffc24
    a3b8:	ldr	r1, [pc, #4036]	; b384 <rb_sha512_crypt_r+0x10c4>
    a3bc:	mov	r0, r8
    a3c0:	sub	r9, fp, #920	; 0x398
    a3c4:	sub	r4, fp, #576	; 0x240
    a3c8:	add	r1, pc, r1
    a3cc:	bl	5424 <strcspn@plt>
    a3d0:	mov	r6, r0
    a3d4:	cmp	r0, #16
    a3d8:	mov	r0, sl
    a3dc:	movcs	r6, #16
    a3e0:	bl	5070 <strlen@plt>
    a3e4:	tst	sl, #7
    a3e8:	str	r0, [fp, #-924]	; 0xfffffc64
    a3ec:	beq	a420 <rb_sha512_crypt_r+0x160>
    a3f0:	mov	r2, r0
    a3f4:	add	r0, r0, #15
    a3f8:	bic	r0, r0, #7
    a3fc:	sub	r0, sp, r0
    a400:	add	r5, r0, #8
    a404:	mov	sp, r0
    a408:	mov	r0, r5
    a40c:	mov	r1, sl
    a410:	bl	5094 <memcpy@plt>
    a414:	mov	sl, r5
    a418:	str	r5, [fp, #-984]	; 0xfffffc28
    a41c:	b	a428 <rb_sha512_crypt_r+0x168>
    a420:	mov	r0, #0
    a424:	str	r0, [fp, #-984]	; 0xfffffc28
    a428:	add	r0, r9, #16
    a42c:	mov	r7, #0
    a430:	tst	r8, #7
    a434:	str	r0, [fp, #-964]	; 0xfffffc3c
    a438:	add	r0, r9, #32
    a43c:	str	r0, [fp, #-960]	; 0xfffffc40
    a440:	add	r0, r9, #48	; 0x30
    a444:	str	r0, [fp, #-956]	; 0xfffffc44
    a448:	add	r0, r4, #16
    a44c:	str	r0, [fp, #-940]	; 0xfffffc54
    a450:	add	r0, r4, #32
    a454:	str	r0, [fp, #-936]	; 0xfffffc58
    a458:	add	r0, r4, #48	; 0x30
    a45c:	str	r0, [fp, #-932]	; 0xfffffc5c
    a460:	beq	a494 <rb_sha512_crypt_r+0x1d4>
    a464:	add	r0, r6, #15
    a468:	bic	r0, r0, #7
    a46c:	sub	r0, sp, r0
    a470:	add	r5, r0, #8
    a474:	mov	sp, r0
    a478:	mov	r0, r5
    a47c:	mov	r1, r8
    a480:	mov	r2, r6
    a484:	bl	5094 <memcpy@plt>
    a488:	mov	r8, r5
    a48c:	str	r5, [fp, #-992]	; 0xfffffc20
    a490:	b	a49c <rb_sha512_crypt_r+0x1dc>
    a494:	mov	r0, #0
    a498:	str	r0, [fp, #-992]	; 0xfffffc20
    a49c:	sub	r0, pc, #372	; 0x174
    a4a0:	mov	r2, #80	; 0x50
    a4a4:	mov	r5, r6
    a4a8:	vmov.i32	q8, #0	; 0x00000000
    a4ac:	vld1.64	{d8-d9}, [r0 :128]
    a4b0:	sub	r0, pc, #376	; 0x178
    a4b4:	sub	r1, pc, #364	; 0x16c
    a4b8:	vld1.64	{d12-d13}, [r0 :128]
    a4bc:	mov	r0, r4
    a4c0:	vld1.64	{d10-d11}, [r1 :128]
    a4c4:	vst1.64	{d8-d9}, [r0], r2
    a4c8:	sub	r1, pc, #368	; 0x170
    a4cc:	ldr	r6, [fp, #-924]	; 0xfffffc64
    a4d0:	mov	r2, r4
    a4d4:	vld1.64	{d14-d15}, [r1 :128]
    a4d8:	ldr	r1, [fp, #-940]	; 0xfffffc54
    a4dc:	vst1.64	{d10-d11}, [r1]
    a4e0:	ldr	r1, [fp, #-936]	; 0xfffffc58
    a4e4:	vst1.64	{d12-d13}, [r1]
    a4e8:	ldr	r1, [fp, #-932]	; 0xfffffc5c
    a4ec:	vst1.64	{d14-d15}, [r1]
    a4f0:	str	r7, [r0]
    a4f4:	add	r0, r4, #64	; 0x40
    a4f8:	mov	r1, r6
    a4fc:	str	r7, [fp, #-492]	; 0xfffffe14
    a500:	str	r0, [fp, #-944]	; 0xfffffc50
    a504:	vst1.64	{d16-d17}, [r0]
    a508:	mov	r0, sl
    a50c:	bl	b9d0 <rb_sha512_process_bytes>
    a510:	mov	r0, r8
    a514:	mov	r1, r5
    a518:	mov	r2, r4
    a51c:	bl	b9d0 <rb_sha512_process_bytes>
    a520:	mov	r0, r9
    a524:	mov	r1, #80	; 0x50
    a528:	vmov.i32	q8, #0	; 0x00000000
    a52c:	mov	r2, r9
    a530:	vst1.64	{d8-d9}, [r0], r1
    a534:	ldr	r1, [fp, #-964]	; 0xfffffc3c
    a538:	vst1.64	{d10-d11}, [r1]
    a53c:	ldr	r1, [fp, #-960]	; 0xfffffc40
    a540:	vst1.64	{d12-d13}, [r1]
    a544:	ldr	r1, [fp, #-956]	; 0xfffffc44
    a548:	vst1.64	{d14-d15}, [r1]
    a54c:	str	r7, [r0]
    a550:	add	r0, r9, #64	; 0x40
    a554:	mov	r1, r6
    a558:	str	r7, [fp, #-836]	; 0xfffffcbc
    a55c:	str	r0, [fp, #-972]	; 0xfffffc34
    a560:	vst1.64	{d16-d17}, [r0]
    a564:	mov	r0, sl
    a568:	bl	b9d0 <rb_sha512_process_bytes>
    a56c:	mov	r0, r8
    a570:	mov	r1, r5
    a574:	mov	r2, r9
    a578:	str	r8, [fp, #-968]	; 0xfffffc38
    a57c:	bl	b9d0 <rb_sha512_process_bytes>
    a580:	mov	r0, sl
    a584:	mov	r1, r6
    a588:	mov	r2, r9
    a58c:	bl	b9d0 <rb_sha512_process_bytes>
    a590:	sub	r1, fp, #168	; 0xa8
    a594:	mov	r0, r9
    a598:	bl	bb70 <rb_sha512_finish_ctx>
    a59c:	cmp	r6, #65	; 0x41
    a5a0:	mov	r1, r6
    a5a4:	bcc	a5e0 <rb_sha512_crypt_r+0x320>
    a5a8:	sub	r0, r6, #65	; 0x41
    a5ac:	sub	r4, fp, #168	; 0xa8
    a5b0:	sub	r7, fp, #576	; 0x240
    a5b4:	bic	r8, r0, #63	; 0x3f
    a5b8:	mov	r0, r4
    a5bc:	mov	r1, #64	; 0x40
    a5c0:	mov	r2, r7
    a5c4:	bl	b9d0 <rb_sha512_process_bytes>
    a5c8:	sub	r6, r6, #64	; 0x40
    a5cc:	cmp	r6, #64	; 0x40
    a5d0:	bhi	a5b8 <rb_sha512_crypt_r+0x2f8>
    a5d4:	ldr	r6, [fp, #-924]	; 0xfffffc64
    a5d8:	sub	r0, r6, r8
    a5dc:	sub	r1, r0, #64	; 0x40
    a5e0:	sub	r0, fp, #168	; 0xa8
    a5e4:	sub	r2, fp, #576	; 0x240
    a5e8:	str	r5, [fp, #-952]	; 0xfffffc48
    a5ec:	bl	b9d0 <rb_sha512_process_bytes>
    a5f0:	cmp	r6, #0
    a5f4:	beq	a650 <rb_sha512_crypt_r+0x390>
    a5f8:	clz	r0, r6
    a5fc:	sub	r4, fp, #576	; 0x240
    a600:	mov	r5, #0
    a604:	sub	r7, fp, #168	; 0xa8
    a608:	lsr	r8, r0, #5
    a60c:	tst	r6, #1
    a610:	bne	a63c <rb_sha512_crypt_r+0x37c>
    a614:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a618:	mov	r0, sl
    a61c:	mov	r2, r4
    a620:	bl	b9d0 <rb_sha512_process_bytes>
    a624:	lsr	r0, r6, #1
    a628:	cmp	r5, r6, lsr #1
    a62c:	mov	r6, r0
    a630:	beq	a648 <rb_sha512_crypt_r+0x388>
    a634:	tst	r6, #1
    a638:	beq	a614 <rb_sha512_crypt_r+0x354>
    a63c:	mov	r0, r7
    a640:	mov	r1, #64	; 0x40
    a644:	b	a61c <rb_sha512_crypt_r+0x35c>
    a648:	ldr	r6, [fp, #-924]	; 0xfffffc64
    a64c:	b	a654 <rb_sha512_crypt_r+0x394>
    a650:	mov	r8, #1
    a654:	sub	r0, fp, #576	; 0x240
    a658:	sub	r1, fp, #168	; 0xa8
    a65c:	bl	bb70 <rb_sha512_finish_ctx>
    a660:	sub	r0, pc, #824	; 0x338
    a664:	mov	r7, #0
    a668:	cmp	r8, #0
    a66c:	vld1.64	{d16-d17}, [r0 :128]
    a670:	sub	r0, pc, #824	; 0x338
    a674:	sub	r1, pc, #812	; 0x32c
    a678:	vld1.64	{d18-d19}, [r1 :128]
    a67c:	vld1.64	{d20-d21}, [r0 :128]
    a680:	vst1.64	{d16-d17}, [r9]
    a684:	sub	r0, pc, #812	; 0x32c
    a688:	ldr	r1, [fp, #-972]	; 0xfffffc34
    a68c:	ldr	r5, [fp, #-968]	; 0xfffffc38
    a690:	vld1.64	{d16-d17}, [r0 :128]
    a694:	ldr	r0, [fp, #-964]	; 0xfffffc3c
    a698:	vst1.64	{d18-d19}, [r0]
    a69c:	ldr	r0, [fp, #-960]	; 0xfffffc40
    a6a0:	vst1.64	{d20-d21}, [r0]
    a6a4:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a6a8:	vst1.64	{d16-d17}, [r0]
    a6ac:	vmov.i32	q8, #0	; 0x00000000
    a6b0:	mov	r0, #20
    a6b4:	str	r7, [r1, #16]
    a6b8:	vst1.64	{d16-d17}, [r1], r0
    a6bc:	str	r7, [r1]
    a6c0:	beq	a6ec <rb_sha512_crypt_r+0x42c>
    a6c4:	sub	r0, fp, #920	; 0x398
    a6c8:	sub	r1, fp, #232	; 0xe8
    a6cc:	bl	bb70 <rb_sha512_finish_ctx>
    a6d0:	add	r0, r6, #7
    a6d4:	bic	r0, r0, #7
    a6d8:	sub	r0, sp, r0
    a6dc:	mov	sp, r0
    a6e0:	ldr	r8, [fp, #-952]	; 0xfffffc48
    a6e4:	str	r0, [fp, #-928]	; 0xfffffc60
    a6e8:	b	a7a8 <rb_sha512_crypt_r+0x4e8>
    a6ec:	sub	r7, fp, #920	; 0x398
    a6f0:	mov	r4, r6
    a6f4:	mov	r0, sl
    a6f8:	mov	r1, r6
    a6fc:	mov	r2, r7
    a700:	bl	b9d0 <rb_sha512_process_bytes>
    a704:	subs	r4, r4, #1
    a708:	bne	a6f4 <rb_sha512_crypt_r+0x434>
    a70c:	sub	sl, fp, #232	; 0xe8
    a710:	sub	r0, fp, #920	; 0x398
    a714:	mov	r1, sl
    a718:	bl	bb70 <rb_sha512_finish_ctx>
    a71c:	add	r0, r6, #7
    a720:	bic	r0, r0, #7
    a724:	sub	r4, sp, r0
    a728:	mov	sp, r4
    a72c:	ldr	r8, [fp, #-952]	; 0xfffffc48
    a730:	cmp	r6, #64	; 0x40
    a734:	str	r4, [fp, #-928]	; 0xfffffc60
    a738:	bcc	a7a0 <rb_sha512_crypt_r+0x4e0>
    a73c:	mov	r0, #0
    a740:	add	r1, sl, #32
    a744:	mov	r2, #48	; 0x30
    a748:	add	r3, sl, #16
    a74c:	mov	r7, sl
    a750:	sub	r6, r4, r0
    a754:	vld1.64	{d20-d21}, [r3]
    a758:	vld1.64	{d18-d19}, [r1]
    a75c:	sub	r0, r0, #64	; 0x40
    a760:	vld1.64	{d16-d17}, [r7], r2
    a764:	add	r5, r6, #32
    a768:	vld1.64	{d22-d23}, [r7]
    a76c:	add	r7, r6, #16
    a770:	vst1.64	{d20-d21}, [r7]
    a774:	vst1.64	{d18-d19}, [r5]
    a778:	vst1.64	{d16-d17}, [r6], r2
    a77c:	vst1.64	{d22-d23}, [r6]
    a780:	ldr	r6, [fp, #-924]	; 0xfffffc64
    a784:	add	r7, r6, r0
    a788:	cmp	r7, #63	; 0x3f
    a78c:	bhi	a74c <rb_sha512_crypt_r+0x48c>
    a790:	ldr	r5, [fp, #-968]	; 0xfffffc38
    a794:	sub	r0, r4, r0
    a798:	and	r7, r6, #63	; 0x3f
    a79c:	b	a7a8 <rb_sha512_crypt_r+0x4e8>
    a7a0:	mov	r0, r4
    a7a4:	mov	r7, r6
    a7a8:	sub	r1, fp, #232	; 0xe8
    a7ac:	mov	r2, r7
    a7b0:	bl	5094 <memcpy@plt>
    a7b4:	add	r0, pc, #916	; 0x394
    a7b8:	mov	r4, #0
    a7bc:	sub	r6, fp, #576	; 0x240
    a7c0:	vld1.64	{d16-d17}, [r0 :128]
    a7c4:	add	r0, pc, #916	; 0x394
    a7c8:	vld1.64	{d18-d19}, [r0 :128]
    a7cc:	vst1.64	{d16-d17}, [r9]
    a7d0:	add	r0, pc, #920	; 0x398
    a7d4:	vld1.64	{d16-d17}, [r0 :128]
    a7d8:	ldr	r0, [fp, #-964]	; 0xfffffc3c
    a7dc:	vst1.64	{d18-d19}, [r0]
    a7e0:	add	r0, pc, #920	; 0x398
    a7e4:	ldr	r1, [fp, #-972]	; 0xfffffc34
    a7e8:	vld1.64	{d18-d19}, [r0 :128]
    a7ec:	ldr	r0, [fp, #-960]	; 0xfffffc40
    a7f0:	vst1.64	{d16-d17}, [r0]
    a7f4:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a7f8:	vmov.i32	q8, #0	; 0x00000000
    a7fc:	vst1.64	{d18-d19}, [r0]
    a800:	mov	r0, #20
    a804:	str	r4, [r1, #16]
    a808:	vst1.64	{d16-d17}, [r1], r0
    a80c:	str	r4, [r1]
    a810:	mov	r0, r5
    a814:	mov	r1, r8
    a818:	mov	r2, r9
    a81c:	bl	b9d0 <rb_sha512_process_bytes>
    a820:	ldrb	r0, [fp, #-168]	; 0xffffff58
    a824:	add	r4, r4, #1
    a828:	add	r0, r0, #16
    a82c:	cmp	r4, r0
    a830:	bcc	a810 <rb_sha512_crypt_r+0x550>
    a834:	sub	r4, fp, #232	; 0xe8
    a838:	sub	r0, fp, #920	; 0x398
    a83c:	mov	r1, r4
    a840:	bl	bb70 <rb_sha512_finish_ctx>
    a844:	add	r0, r8, #7
    a848:	bic	r0, r0, #7
    a84c:	sub	r0, sp, r0
    a850:	mov	sp, r0
    a854:	mov	r1, r4
    a858:	mov	r2, r8
    a85c:	str	r0, [fp, #-956]	; 0xfffffc44
    a860:	bl	5094 <memcpy@plt>
    a864:	vmov.i32	q4, #0	; 0x00000000
    a868:	mov	r7, #0
    a86c:	sub	r5, fp, #168	; 0xa8
    a870:	mov	r8, #0
    a874:	b	a8a4 <rb_sha512_crypt_r+0x5e4>
    a878:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a87c:	mov	r1, r4
    a880:	mov	r2, r6
    a884:	bl	b9d0 <rb_sha512_process_bytes>
    a888:	mov	r0, r6
    a88c:	mov	r1, r5
    a890:	bl	bb70 <rb_sha512_finish_ctx>
    a894:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    a898:	add	r8, r8, #1
    a89c:	cmp	r0, r8
    a8a0:	beq	a9b0 <rb_sha512_crypt_r+0x6f0>
    a8a4:	add	r0, pc, #676	; 0x2a4
    a8a8:	mov	r2, r6
    a8ac:	ands	sl, r8, #1
    a8b0:	vld1.64	{d16-d17}, [r0 :128]
    a8b4:	add	r0, pc, #692	; 0x2b4
    a8b8:	add	r1, pc, #672	; 0x2a0
    a8bc:	vld1.64	{d18-d19}, [r1 :128]
    a8c0:	vld1.64	{d20-d21}, [r0 :128]
    a8c4:	mov	r1, #20
    a8c8:	vst1.64	{d16-d17}, [r6]
    a8cc:	add	r0, pc, #684	; 0x2ac
    a8d0:	vld1.64	{d16-d17}, [r0 :128]
    a8d4:	ldr	r0, [fp, #-940]	; 0xfffffc54
    a8d8:	vst1.64	{d18-d19}, [r0]
    a8dc:	ldr	r0, [fp, #-936]	; 0xfffffc58
    a8e0:	vst1.64	{d20-d21}, [r0]
    a8e4:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    a8e8:	vst1.64	{d16-d17}, [r0]
    a8ec:	ldr	r0, [fp, #-944]	; 0xfffffc50
    a8f0:	str	r7, [r0, #16]
    a8f4:	vst1.64	{d8-d9}, [r0], r1
    a8f8:	str	r7, [r0]
    a8fc:	movw	r0, #18725	; 0x4925
    a900:	movt	r0, #9362	; 0x2492
    a904:	umull	r0, r1, r8, r0
    a908:	sub	r0, r8, r1
    a90c:	add	r6, r1, r0, lsr #1
    a910:	lsr	r0, r6, #2
    a914:	lsl	r4, r0, #3
    a918:	movw	r0, #43691	; 0xaaab
    a91c:	movt	r0, #43690	; 0xaaaa
    a920:	umull	r0, r1, r8, r0
    a924:	lsr	r0, r1, #1
    a928:	add	r9, r0, r0, lsl #1
    a92c:	beq	a93c <rb_sha512_crypt_r+0x67c>
    a930:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a934:	ldr	r1, [fp, #-924]	; 0xfffffc64
    a938:	b	a944 <rb_sha512_crypt_r+0x684>
    a93c:	mov	r0, r5
    a940:	mov	r1, #64	; 0x40
    a944:	bl	b9d0 <rb_sha512_process_bytes>
    a948:	sub	r4, r4, r6, lsr #2
    a94c:	cmp	r9, r8
    a950:	sub	r6, fp, #576	; 0x240
    a954:	bne	a970 <rb_sha512_crypt_r+0x6b0>
    a958:	cmp	r4, r8
    a95c:	ldr	r4, [fp, #-924]	; 0xfffffc64
    a960:	bne	a98c <rb_sha512_crypt_r+0x6cc>
    a964:	cmp	sl, #0
    a968:	beq	a878 <rb_sha512_crypt_r+0x5b8>
    a96c:	b	a9a4 <rb_sha512_crypt_r+0x6e4>
    a970:	ldr	r0, [fp, #-956]	; 0xfffffc44
    a974:	ldr	r1, [fp, #-952]	; 0xfffffc48
    a978:	mov	r2, r6
    a97c:	bl	b9d0 <rb_sha512_process_bytes>
    a980:	cmp	r4, r8
    a984:	ldr	r4, [fp, #-924]	; 0xfffffc64
    a988:	beq	a964 <rb_sha512_crypt_r+0x6a4>
    a98c:	ldr	r0, [fp, #-928]	; 0xfffffc60
    a990:	mov	r1, r4
    a994:	mov	r2, r6
    a998:	bl	b9d0 <rb_sha512_process_bytes>
    a99c:	cmp	sl, #0
    a9a0:	beq	a878 <rb_sha512_crypt_r+0x5b8>
    a9a4:	mov	r0, r5
    a9a8:	mov	r1, #64	; 0x40
    a9ac:	b	a880 <rb_sha512_crypt_r+0x5c0>
    a9b0:	ldr	r4, [fp, #-980]	; 0xfffffc2c
    a9b4:	ldr	r9, [fp, #-976]	; 0xfffffc30
    a9b8:	mov	r1, #0
    a9bc:	bic	r7, r4, r4, asr #31
    a9c0:	mov	r0, r9
    a9c4:	mov	r2, r7
    a9c8:	bl	4ed8 <memset@plt>
    a9cc:	ldr	r1, [pc, #4076]	; b9c0 <rb_sha512_crypt_r+0x1700>
    a9d0:	mov	r0, r9
    a9d4:	mov	r2, r7
    a9d8:	add	r1, pc, r1
    a9dc:	bl	4e30 <strncpy@plt>
    a9e0:	bl	5070 <strlen@plt>
    a9e4:	adds	r5, r9, r0
    a9e8:	ldr	r0, [fp, #-988]	; 0xfffffc24
    a9ec:	sub	r4, r4, #3
    a9f0:	addeq	r5, r9, r7
    a9f4:	cmp	r0, #0
    a9f8:	beq	aa30 <rb_sha512_crypt_r+0x770>
    a9fc:	sub	sp, sp, #8
    aa00:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    aa04:	bic	r1, r4, r4, asr #31
    aa08:	str	r0, [sp]
    aa0c:	mov	r0, r5
    aa10:	ldr	r2, [pc, #4012]	; b9c4 <rb_sha512_crypt_r+0x1704>
    aa14:	ldr	r3, [pc, #4012]	; b9c8 <rb_sha512_crypt_r+0x1708>
    aa18:	add	r2, pc, r2
    aa1c:	add	r3, pc, r3
    aa20:	bl	53f4 <snprintf@plt>
    aa24:	add	sp, sp, #8
    aa28:	sub	r4, r4, r0
    aa2c:	add	r5, r5, r0
    aa30:	ldr	r8, [fp, #-952]	; 0xfffffc48
    aa34:	bic	r7, r4, r4, asr #31
    aa38:	mov	r0, r5
    aa3c:	mov	r1, #0
    aa40:	mov	sl, #0
    aa44:	cmp	r7, r8
    aa48:	movcs	r7, r8
    aa4c:	mov	r2, r7
    aa50:	bl	4ed8 <memset@plt>
    aa54:	ldr	r1, [fp, #-968]	; 0xfffffc38
    aa58:	mov	r0, r5
    aa5c:	mov	r2, r7
    aa60:	bl	4e30 <strncpy@plt>
    aa64:	mov	r0, r9
    aa68:	bl	5070 <strlen@plt>
    aa6c:	adds	r2, r9, r0
    aa70:	sub	r3, r4, r7
    aa74:	addeq	r2, r9, r8
    aa78:	cmp	r3, #1
    aa7c:	blt	b844 <rb_sha512_crypt_r+0x1584>
    aa80:	mov	r0, #36	; 0x24
    aa84:	strb	r0, [r2]
    aa88:	beq	b844 <rb_sha512_crypt_r+0x1584>
    aa8c:	ldrb	r5, [fp, #-126]	; 0xffffff82
    aa90:	ldrb	r7, [fp, #-168]	; 0xffffff58
    aa94:	ldrb	r6, [fp, #-147]	; 0xffffff6d
    aa98:	ldr	r0, [pc, #3884]	; b9cc <rb_sha512_crypt_r+0x170c>
    aa9c:	and	r1, r5, #63	; 0x3f
    aaa0:	add	r0, pc, r0
    aaa4:	ldrb	r1, [r0, r1]
    aaa8:	strb	r1, [r2, #1]
    aaac:	sub	r1, r3, #2
    aab0:	cmp	r1, #0
    aab4:	ble	ab24 <rb_sha512_crypt_r+0x864>
    aab8:	orr	r1, r5, r6, lsl #8
    aabc:	ubfx	r1, r1, #6, #6
    aac0:	ldrb	r1, [r0, r1]
    aac4:	strb	r1, [r2, #2]
    aac8:	sub	r1, r3, #3
    aacc:	cmp	r1, #1
    aad0:	blt	ab34 <rb_sha512_crypt_r+0x874>
    aad4:	lsl	r1, r6, #8
    aad8:	orr	r1, r1, r7, lsl #16
    aadc:	ubfx	r1, r1, #12, #6
    aae0:	ldrb	r1, [r0, r1]
    aae4:	strb	r1, [r2, #3]
    aae8:	sub	r1, r3, #4
    aaec:	cmp	r1, #1
    aaf0:	blt	ab90 <rb_sha512_crypt_r+0x8d0>
    aaf4:	ldrb	r1, [r0, r7, lsr #2]
    aaf8:	add	r7, r2, #5
    aafc:	strb	r1, [r2, #4]
    ab00:	sub	r1, r3, #5
    ab04:	cmp	r1, #1
    ab08:	bge	ab9c <rb_sha512_crypt_r+0x8dc>
    ab0c:	b	b844 <rb_sha512_crypt_r+0x1584>
    ab10:	mov	r0, #0
    ab14:	str	r0, [fp, #-988]	; 0xfffffc24
    ab18:	movw	r0, #5000	; 0x1388
    ab1c:	str	r0, [fp, #-948]	; 0xfffffc4c
    ab20:	b	a3b8 <rb_sha512_crypt_r+0xf8>
    ab24:	add	r7, r2, #2
    ab28:	cmp	r1, #1
    ab2c:	bge	ab9c <rb_sha512_crypt_r+0x8dc>
    ab30:	b	b844 <rb_sha512_crypt_r+0x1584>
    ab34:	add	r7, r2, #3
    ab38:	cmp	r1, #1
    ab3c:	bge	ab9c <rb_sha512_crypt_r+0x8dc>
    ab40:	b	b844 <rb_sha512_crypt_r+0x1584>
    ab44:	nop	{0}
    ab48:	nop	{0}
    ab4c:	nop	{0}
    ab50:	.word	0xf3bcc908
    ab54:	.word	0x6a09e667
    ab58:	.word	0x84caa73b
    ab5c:	.word	0xbb67ae85
    ab60:	.word	0xfe94f82b
    ab64:	.word	0x3c6ef372
    ab68:	.word	0x5f1d36f1
    ab6c:	.word	0xa54ff53a
    ab70:	.word	0xade682d1
    ab74:	.word	0x510e527f
    ab78:	.word	0x2b3e6c1f
    ab7c:	.word	0x9b05688c
    ab80:	.word	0xfb41bd6b
    ab84:	.word	0x1f83d9ab
    ab88:	.word	0x137e2179
    ab8c:	.word	0x5be0cd19
    ab90:	add	r7, r2, #4
    ab94:	cmp	r1, #1
    ab98:	blt	b844 <rb_sha512_crypt_r+0x1584>
    ab9c:	ldrb	r4, [fp, #-167]	; 0xffffff59
    aba0:	ldrb	r6, [fp, #-146]	; 0xffffff6e
    aba4:	ldrb	r5, [fp, #-125]	; 0xffffff83
    aba8:	mov	r3, r7
    abac:	and	r2, r4, #63	; 0x3f
    abb0:	ldrb	r2, [r0, r2]
    abb4:	strb	r2, [r3], #1
    abb8:	sub	r2, r1, #1
    abbc:	cmp	r2, #0
    abc0:	ble	ac10 <rb_sha512_crypt_r+0x950>
    abc4:	orr	r2, r4, r5, lsl #8
    abc8:	ubfx	r2, r2, #6, #6
    abcc:	ldrb	r2, [r0, r2]
    abd0:	strb	r2, [r7, #1]
    abd4:	sub	r2, r1, #2
    abd8:	cmp	r2, #1
    abdc:	blt	ad14 <rb_sha512_crypt_r+0xa54>
    abe0:	lsl	r2, r5, #8
    abe4:	orr	r2, r2, r6, lsl #16
    abe8:	ubfx	r2, r2, #12, #6
    abec:	ldrb	r2, [r0, r2]
    abf0:	strb	r2, [r7, #2]
    abf4:	sub	r2, r1, #3
    abf8:	cmp	r2, #1
    abfc:	blt	ad24 <rb_sha512_crypt_r+0xa64>
    ac00:	ldrb	r2, [r0, r6, lsr #2]
    ac04:	add	r3, r7, #4
    ac08:	strb	r2, [r7, #3]
    ac0c:	sub	r2, r1, #4
    ac10:	cmp	r2, #1
    ac14:	blt	b844 <rb_sha512_crypt_r+0x1584>
    ac18:	ldrb	r4, [fp, #-145]	; 0xffffff6f
    ac1c:	ldrb	r5, [fp, #-166]	; 0xffffff5a
    ac20:	ldrb	r6, [fp, #-124]	; 0xffffff84
    ac24:	mov	r7, r3
    ac28:	and	r1, r4, #63	; 0x3f
    ac2c:	ldrb	r1, [r0, r1]
    ac30:	strb	r1, [r7], #1
    ac34:	sub	r1, r2, #1
    ac38:	cmp	r1, #0
    ac3c:	ble	ac8c <rb_sha512_crypt_r+0x9cc>
    ac40:	orr	r1, r4, r5, lsl #8
    ac44:	ubfx	r1, r1, #6, #6
    ac48:	ldrb	r1, [r0, r1]
    ac4c:	strb	r1, [r3, #1]
    ac50:	sub	r1, r2, #2
    ac54:	cmp	r1, #1
    ac58:	blt	ad34 <rb_sha512_crypt_r+0xa74>
    ac5c:	lsl	r1, r5, #8
    ac60:	orr	r1, r1, r6, lsl #16
    ac64:	ubfx	r1, r1, #12, #6
    ac68:	ldrb	r1, [r0, r1]
    ac6c:	strb	r1, [r3, #2]
    ac70:	sub	r1, r2, #3
    ac74:	cmp	r1, #1
    ac78:	blt	ad44 <rb_sha512_crypt_r+0xa84>
    ac7c:	ldrb	r1, [r0, r6, lsr #2]
    ac80:	add	r7, r3, #4
    ac84:	strb	r1, [r3, #3]
    ac88:	sub	r1, r2, #4
    ac8c:	cmp	r1, #1
    ac90:	blt	b844 <rb_sha512_crypt_r+0x1584>
    ac94:	ldrb	r4, [fp, #-123]	; 0xffffff85
    ac98:	ldrb	r6, [fp, #-165]	; 0xffffff5b
    ac9c:	ldrb	r5, [fp, #-144]	; 0xffffff70
    aca0:	mov	r3, r7
    aca4:	and	r2, r4, #63	; 0x3f
    aca8:	ldrb	r2, [r0, r2]
    acac:	strb	r2, [r3], #1
    acb0:	sub	r2, r1, #1
    acb4:	cmp	r2, #0
    acb8:	ble	ad68 <rb_sha512_crypt_r+0xaa8>
    acbc:	orr	r2, r4, r5, lsl #8
    acc0:	ubfx	r2, r2, #6, #6
    acc4:	ldrb	r2, [r0, r2]
    acc8:	strb	r2, [r7, #1]
    accc:	sub	r2, r1, #2
    acd0:	cmp	r2, #1
    acd4:	blt	ad54 <rb_sha512_crypt_r+0xa94>
    acd8:	lsl	r2, r5, #8
    acdc:	orr	r2, r2, r6, lsl #16
    ace0:	ubfx	r2, r2, #12, #6
    ace4:	ldrb	r2, [r0, r2]
    ace8:	strb	r2, [r7, #2]
    acec:	sub	r2, r1, #3
    acf0:	cmp	r2, #1
    acf4:	blt	ad64 <rb_sha512_crypt_r+0xaa4>
    acf8:	ldrb	r2, [r0, r6, lsr #2]
    acfc:	add	r3, r7, #4
    ad00:	strb	r2, [r7, #3]
    ad04:	sub	r2, r1, #4
    ad08:	cmp	r2, #1
    ad0c:	bge	ad70 <rb_sha512_crypt_r+0xab0>
    ad10:	b	b844 <rb_sha512_crypt_r+0x1584>
    ad14:	add	r3, r7, #2
    ad18:	cmp	r2, #1
    ad1c:	bge	ac18 <rb_sha512_crypt_r+0x958>
    ad20:	b	b844 <rb_sha512_crypt_r+0x1584>
    ad24:	add	r3, r7, #3
    ad28:	cmp	r2, #1
    ad2c:	bge	ac18 <rb_sha512_crypt_r+0x958>
    ad30:	b	b844 <rb_sha512_crypt_r+0x1584>
    ad34:	add	r7, r3, #2
    ad38:	cmp	r1, #1
    ad3c:	bge	ac94 <rb_sha512_crypt_r+0x9d4>
    ad40:	b	b844 <rb_sha512_crypt_r+0x1584>
    ad44:	add	r7, r3, #3
    ad48:	cmp	r1, #1
    ad4c:	bge	ac94 <rb_sha512_crypt_r+0x9d4>
    ad50:	b	b844 <rb_sha512_crypt_r+0x1584>
    ad54:	add	r3, r7, #2
    ad58:	cmp	r2, #1
    ad5c:	bge	ad70 <rb_sha512_crypt_r+0xab0>
    ad60:	b	b844 <rb_sha512_crypt_r+0x1584>
    ad64:	add	r3, r7, #3
    ad68:	cmp	r2, #1
    ad6c:	blt	b844 <rb_sha512_crypt_r+0x1584>
    ad70:	ldrb	r4, [fp, #-164]	; 0xffffff5c
    ad74:	ldrb	r6, [fp, #-143]	; 0xffffff71
    ad78:	ldrb	r5, [fp, #-122]	; 0xffffff86
    ad7c:	mov	r7, r3
    ad80:	and	r1, r4, #63	; 0x3f
    ad84:	ldrb	r1, [r0, r1]
    ad88:	strb	r1, [r7], #1
    ad8c:	sub	r1, r2, #1
    ad90:	cmp	r1, #0
    ad94:	ble	ae04 <rb_sha512_crypt_r+0xb44>
    ad98:	orr	r1, r4, r5, lsl #8
    ad9c:	ubfx	r1, r1, #6, #6
    ada0:	ldrb	r1, [r0, r1]
    ada4:	strb	r1, [r3, #1]
    ada8:	sub	r1, r2, #2
    adac:	cmp	r1, #1
    adb0:	blt	adf0 <rb_sha512_crypt_r+0xb30>
    adb4:	lsl	r1, r5, #8
    adb8:	orr	r1, r1, r6, lsl #16
    adbc:	ubfx	r1, r1, #12, #6
    adc0:	ldrb	r1, [r0, r1]
    adc4:	strb	r1, [r3, #2]
    adc8:	sub	r1, r2, #3
    adcc:	cmp	r1, #1
    add0:	blt	ae00 <rb_sha512_crypt_r+0xb40>
    add4:	ldrb	r1, [r0, r6, lsr #2]
    add8:	add	r7, r3, #4
    addc:	strb	r1, [r3, #3]
    ade0:	sub	r1, r2, #4
    ade4:	cmp	r1, #1
    ade8:	bge	ae0c <rb_sha512_crypt_r+0xb4c>
    adec:	b	b844 <rb_sha512_crypt_r+0x1584>
    adf0:	add	r7, r3, #2
    adf4:	cmp	r1, #1
    adf8:	bge	ae0c <rb_sha512_crypt_r+0xb4c>
    adfc:	b	b844 <rb_sha512_crypt_r+0x1584>
    ae00:	add	r7, r3, #3
    ae04:	cmp	r1, #1
    ae08:	blt	b844 <rb_sha512_crypt_r+0x1584>
    ae0c:	ldrb	r4, [fp, #-142]	; 0xffffff72
    ae10:	ldrb	r5, [fp, #-163]	; 0xffffff5d
    ae14:	ldrb	r6, [fp, #-121]	; 0xffffff87
    ae18:	mov	r3, r7
    ae1c:	and	r2, r4, #63	; 0x3f
    ae20:	ldrb	r2, [r0, r2]
    ae24:	strb	r2, [r3], #1
    ae28:	sub	r2, r1, #1
    ae2c:	cmp	r2, #0
    ae30:	ble	aea0 <rb_sha512_crypt_r+0xbe0>
    ae34:	orr	r2, r4, r5, lsl #8
    ae38:	ubfx	r2, r2, #6, #6
    ae3c:	ldrb	r2, [r0, r2]
    ae40:	strb	r2, [r7, #1]
    ae44:	sub	r2, r1, #2
    ae48:	cmp	r2, #1
    ae4c:	blt	ae8c <rb_sha512_crypt_r+0xbcc>
    ae50:	lsl	r2, r5, #8
    ae54:	orr	r2, r2, r6, lsl #16
    ae58:	ubfx	r2, r2, #12, #6
    ae5c:	ldrb	r2, [r0, r2]
    ae60:	strb	r2, [r7, #2]
    ae64:	sub	r2, r1, #3
    ae68:	cmp	r2, #1
    ae6c:	blt	ae9c <rb_sha512_crypt_r+0xbdc>
    ae70:	ldrb	r2, [r0, r6, lsr #2]
    ae74:	add	r3, r7, #4
    ae78:	strb	r2, [r7, #3]
    ae7c:	sub	r2, r1, #4
    ae80:	cmp	r2, #1
    ae84:	bge	aea8 <rb_sha512_crypt_r+0xbe8>
    ae88:	b	b844 <rb_sha512_crypt_r+0x1584>
    ae8c:	add	r3, r7, #2
    ae90:	cmp	r2, #1
    ae94:	bge	aea8 <rb_sha512_crypt_r+0xbe8>
    ae98:	b	b844 <rb_sha512_crypt_r+0x1584>
    ae9c:	add	r3, r7, #3
    aea0:	cmp	r2, #1
    aea4:	blt	b844 <rb_sha512_crypt_r+0x1584>
    aea8:	ldrb	r4, [fp, #-120]	; 0xffffff88
    aeac:	ldrb	r6, [fp, #-162]	; 0xffffff5e
    aeb0:	ldrb	r5, [fp, #-141]	; 0xffffff73
    aeb4:	mov	r7, r3
    aeb8:	and	r1, r4, #63	; 0x3f
    aebc:	ldrb	r1, [r0, r1]
    aec0:	strb	r1, [r7], #1
    aec4:	sub	r1, r2, #1
    aec8:	cmp	r1, #0
    aecc:	ble	af3c <rb_sha512_crypt_r+0xc7c>
    aed0:	orr	r1, r4, r5, lsl #8
    aed4:	ubfx	r1, r1, #6, #6
    aed8:	ldrb	r1, [r0, r1]
    aedc:	strb	r1, [r3, #1]
    aee0:	sub	r1, r2, #2
    aee4:	cmp	r1, #1
    aee8:	blt	af28 <rb_sha512_crypt_r+0xc68>
    aeec:	lsl	r1, r5, #8
    aef0:	orr	r1, r1, r6, lsl #16
    aef4:	ubfx	r1, r1, #12, #6
    aef8:	ldrb	r1, [r0, r1]
    aefc:	strb	r1, [r3, #2]
    af00:	sub	r1, r2, #3
    af04:	cmp	r1, #1
    af08:	blt	af38 <rb_sha512_crypt_r+0xc78>
    af0c:	ldrb	r1, [r0, r6, lsr #2]
    af10:	add	r7, r3, #4
    af14:	strb	r1, [r3, #3]
    af18:	sub	r1, r2, #4
    af1c:	cmp	r1, #1
    af20:	bge	af44 <rb_sha512_crypt_r+0xc84>
    af24:	b	b844 <rb_sha512_crypt_r+0x1584>
    af28:	add	r7, r3, #2
    af2c:	cmp	r1, #1
    af30:	bge	af44 <rb_sha512_crypt_r+0xc84>
    af34:	b	b844 <rb_sha512_crypt_r+0x1584>
    af38:	add	r7, r3, #3
    af3c:	cmp	r1, #1
    af40:	blt	b844 <rb_sha512_crypt_r+0x1584>
    af44:	ldrb	r4, [fp, #-161]	; 0xffffff5f
    af48:	ldrb	r6, [fp, #-140]	; 0xffffff74
    af4c:	ldrb	r5, [fp, #-119]	; 0xffffff89
    af50:	mov	r3, r7
    af54:	and	r2, r4, #63	; 0x3f
    af58:	ldrb	r2, [r0, r2]
    af5c:	strb	r2, [r3], #1
    af60:	sub	r2, r1, #1
    af64:	cmp	r2, #0
    af68:	ble	afd8 <rb_sha512_crypt_r+0xd18>
    af6c:	orr	r2, r4, r5, lsl #8
    af70:	ubfx	r2, r2, #6, #6
    af74:	ldrb	r2, [r0, r2]
    af78:	strb	r2, [r7, #1]
    af7c:	sub	r2, r1, #2
    af80:	cmp	r2, #1
    af84:	blt	afc4 <rb_sha512_crypt_r+0xd04>
    af88:	lsl	r2, r5, #8
    af8c:	orr	r2, r2, r6, lsl #16
    af90:	ubfx	r2, r2, #12, #6
    af94:	ldrb	r2, [r0, r2]
    af98:	strb	r2, [r7, #2]
    af9c:	sub	r2, r1, #3
    afa0:	cmp	r2, #1
    afa4:	blt	afd4 <rb_sha512_crypt_r+0xd14>
    afa8:	ldrb	r2, [r0, r6, lsr #2]
    afac:	add	r3, r7, #4
    afb0:	strb	r2, [r7, #3]
    afb4:	sub	r2, r1, #4
    afb8:	cmp	r2, #1
    afbc:	bge	afe0 <rb_sha512_crypt_r+0xd20>
    afc0:	b	b844 <rb_sha512_crypt_r+0x1584>
    afc4:	add	r3, r7, #2
    afc8:	cmp	r2, #1
    afcc:	bge	afe0 <rb_sha512_crypt_r+0xd20>
    afd0:	b	b844 <rb_sha512_crypt_r+0x1584>
    afd4:	add	r3, r7, #3
    afd8:	cmp	r2, #1
    afdc:	blt	b844 <rb_sha512_crypt_r+0x1584>
    afe0:	ldrb	r4, [fp, #-139]	; 0xffffff75
    afe4:	ldrb	r5, [fp, #-160]	; 0xffffff60
    afe8:	ldrb	r6, [fp, #-118]	; 0xffffff8a
    afec:	mov	r7, r3
    aff0:	and	r1, r4, #63	; 0x3f
    aff4:	ldrb	r1, [r0, r1]
    aff8:	strb	r1, [r7], #1
    affc:	sub	r1, r2, #1
    b000:	cmp	r1, #0
    b004:	ble	b074 <rb_sha512_crypt_r+0xdb4>
    b008:	orr	r1, r4, r5, lsl #8
    b00c:	ubfx	r1, r1, #6, #6
    b010:	ldrb	r1, [r0, r1]
    b014:	strb	r1, [r3, #1]
    b018:	sub	r1, r2, #2
    b01c:	cmp	r1, #1
    b020:	blt	b060 <rb_sha512_crypt_r+0xda0>
    b024:	lsl	r1, r5, #8
    b028:	orr	r1, r1, r6, lsl #16
    b02c:	ubfx	r1, r1, #12, #6
    b030:	ldrb	r1, [r0, r1]
    b034:	strb	r1, [r3, #2]
    b038:	sub	r1, r2, #3
    b03c:	cmp	r1, #1
    b040:	blt	b070 <rb_sha512_crypt_r+0xdb0>
    b044:	ldrb	r1, [r0, r6, lsr #2]
    b048:	add	r7, r3, #4
    b04c:	strb	r1, [r3, #3]
    b050:	sub	r1, r2, #4
    b054:	cmp	r1, #1
    b058:	bge	b07c <rb_sha512_crypt_r+0xdbc>
    b05c:	b	b844 <rb_sha512_crypt_r+0x1584>
    b060:	add	r7, r3, #2
    b064:	cmp	r1, #1
    b068:	bge	b07c <rb_sha512_crypt_r+0xdbc>
    b06c:	b	b844 <rb_sha512_crypt_r+0x1584>
    b070:	add	r7, r3, #3
    b074:	cmp	r1, #1
    b078:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b07c:	ldrb	r4, [fp, #-117]	; 0xffffff8b
    b080:	ldrb	r6, [fp, #-159]	; 0xffffff61
    b084:	ldrb	r5, [fp, #-138]	; 0xffffff76
    b088:	mov	r3, r7
    b08c:	and	r2, r4, #63	; 0x3f
    b090:	ldrb	r2, [r0, r2]
    b094:	strb	r2, [r3], #1
    b098:	sub	r2, r1, #1
    b09c:	cmp	r2, #0
    b0a0:	ble	b110 <rb_sha512_crypt_r+0xe50>
    b0a4:	orr	r2, r4, r5, lsl #8
    b0a8:	ubfx	r2, r2, #6, #6
    b0ac:	ldrb	r2, [r0, r2]
    b0b0:	strb	r2, [r7, #1]
    b0b4:	sub	r2, r1, #2
    b0b8:	cmp	r2, #1
    b0bc:	blt	b0fc <rb_sha512_crypt_r+0xe3c>
    b0c0:	lsl	r2, r5, #8
    b0c4:	orr	r2, r2, r6, lsl #16
    b0c8:	ubfx	r2, r2, #12, #6
    b0cc:	ldrb	r2, [r0, r2]
    b0d0:	strb	r2, [r7, #2]
    b0d4:	sub	r2, r1, #3
    b0d8:	cmp	r2, #1
    b0dc:	blt	b10c <rb_sha512_crypt_r+0xe4c>
    b0e0:	ldrb	r2, [r0, r6, lsr #2]
    b0e4:	add	r3, r7, #4
    b0e8:	strb	r2, [r7, #3]
    b0ec:	sub	r2, r1, #4
    b0f0:	cmp	r2, #1
    b0f4:	bge	b118 <rb_sha512_crypt_r+0xe58>
    b0f8:	b	b844 <rb_sha512_crypt_r+0x1584>
    b0fc:	add	r3, r7, #2
    b100:	cmp	r2, #1
    b104:	bge	b118 <rb_sha512_crypt_r+0xe58>
    b108:	b	b844 <rb_sha512_crypt_r+0x1584>
    b10c:	add	r3, r7, #3
    b110:	cmp	r2, #1
    b114:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b118:	ldrb	r4, [fp, #-158]	; 0xffffff62
    b11c:	ldrb	r6, [fp, #-137]	; 0xffffff77
    b120:	ldrb	r5, [fp, #-116]	; 0xffffff8c
    b124:	mov	r7, r3
    b128:	and	r1, r4, #63	; 0x3f
    b12c:	ldrb	r1, [r0, r1]
    b130:	strb	r1, [r7], #1
    b134:	sub	r1, r2, #1
    b138:	cmp	r1, #0
    b13c:	ble	b1ac <rb_sha512_crypt_r+0xeec>
    b140:	orr	r1, r4, r5, lsl #8
    b144:	ubfx	r1, r1, #6, #6
    b148:	ldrb	r1, [r0, r1]
    b14c:	strb	r1, [r3, #1]
    b150:	sub	r1, r2, #2
    b154:	cmp	r1, #1
    b158:	blt	b198 <rb_sha512_crypt_r+0xed8>
    b15c:	lsl	r1, r5, #8
    b160:	orr	r1, r1, r6, lsl #16
    b164:	ubfx	r1, r1, #12, #6
    b168:	ldrb	r1, [r0, r1]
    b16c:	strb	r1, [r3, #2]
    b170:	sub	r1, r2, #3
    b174:	cmp	r1, #1
    b178:	blt	b1a8 <rb_sha512_crypt_r+0xee8>
    b17c:	ldrb	r1, [r0, r6, lsr #2]
    b180:	add	r7, r3, #4
    b184:	strb	r1, [r3, #3]
    b188:	sub	r1, r2, #4
    b18c:	cmp	r1, #1
    b190:	bge	b1b4 <rb_sha512_crypt_r+0xef4>
    b194:	b	b844 <rb_sha512_crypt_r+0x1584>
    b198:	add	r7, r3, #2
    b19c:	cmp	r1, #1
    b1a0:	bge	b1b4 <rb_sha512_crypt_r+0xef4>
    b1a4:	b	b844 <rb_sha512_crypt_r+0x1584>
    b1a8:	add	r7, r3, #3
    b1ac:	cmp	r1, #1
    b1b0:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b1b4:	ldrb	r4, [fp, #-136]	; 0xffffff78
    b1b8:	ldrb	r5, [fp, #-157]	; 0xffffff63
    b1bc:	ldrb	r6, [fp, #-115]	; 0xffffff8d
    b1c0:	mov	r3, r7
    b1c4:	and	r2, r4, #63	; 0x3f
    b1c8:	ldrb	r2, [r0, r2]
    b1cc:	strb	r2, [r3], #1
    b1d0:	sub	r2, r1, #1
    b1d4:	cmp	r2, #0
    b1d8:	ble	b248 <rb_sha512_crypt_r+0xf88>
    b1dc:	orr	r2, r4, r5, lsl #8
    b1e0:	ubfx	r2, r2, #6, #6
    b1e4:	ldrb	r2, [r0, r2]
    b1e8:	strb	r2, [r7, #1]
    b1ec:	sub	r2, r1, #2
    b1f0:	cmp	r2, #1
    b1f4:	blt	b234 <rb_sha512_crypt_r+0xf74>
    b1f8:	lsl	r2, r5, #8
    b1fc:	orr	r2, r2, r6, lsl #16
    b200:	ubfx	r2, r2, #12, #6
    b204:	ldrb	r2, [r0, r2]
    b208:	strb	r2, [r7, #2]
    b20c:	sub	r2, r1, #3
    b210:	cmp	r2, #1
    b214:	blt	b244 <rb_sha512_crypt_r+0xf84>
    b218:	ldrb	r2, [r0, r6, lsr #2]
    b21c:	add	r3, r7, #4
    b220:	strb	r2, [r7, #3]
    b224:	sub	r2, r1, #4
    b228:	cmp	r2, #1
    b22c:	bge	b250 <rb_sha512_crypt_r+0xf90>
    b230:	b	b844 <rb_sha512_crypt_r+0x1584>
    b234:	add	r3, r7, #2
    b238:	cmp	r2, #1
    b23c:	bge	b250 <rb_sha512_crypt_r+0xf90>
    b240:	b	b844 <rb_sha512_crypt_r+0x1584>
    b244:	add	r3, r7, #3
    b248:	cmp	r2, #1
    b24c:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b250:	ldrb	r4, [fp, #-114]	; 0xffffff8e
    b254:	ldrb	r6, [fp, #-156]	; 0xffffff64
    b258:	ldrb	r5, [fp, #-135]	; 0xffffff79
    b25c:	mov	r7, r3
    b260:	and	r1, r4, #63	; 0x3f
    b264:	ldrb	r1, [r0, r1]
    b268:	strb	r1, [r7], #1
    b26c:	sub	r1, r2, #1
    b270:	cmp	r1, #0
    b274:	ble	b2ec <rb_sha512_crypt_r+0x102c>
    b278:	orr	r1, r4, r5, lsl #8
    b27c:	ubfx	r1, r1, #6, #6
    b280:	ldrb	r1, [r0, r1]
    b284:	strb	r1, [r3, #1]
    b288:	sub	r1, r2, #2
    b28c:	cmp	r1, #1
    b290:	blt	b2d4 <rb_sha512_crypt_r+0x1014>
    b294:	lsl	r1, r5, #8
    b298:	orr	r1, r1, r6, lsl #16
    b29c:	ubfx	r1, r1, #12, #6
    b2a0:	ldrb	r1, [r0, r1]
    b2a4:	strb	r1, [r3, #2]
    b2a8:	sub	r1, r2, #3
    b2ac:	cmp	r1, #1
    b2b0:	blt	b2e8 <rb_sha512_crypt_r+0x1028>
    b2b4:	ldrb	r1, [r0, r6, lsr #2]
    b2b8:	add	r7, r3, #4
    b2bc:	strb	r1, [r3, #3]
    b2c0:	sub	r1, r2, #4
    b2c4:	cmp	r1, #1
    b2c8:	bge	b2f4 <rb_sha512_crypt_r+0x1034>
    b2cc:	b	b844 <rb_sha512_crypt_r+0x1584>
    b2d0:	.word	0x00010634
    b2d4:	add	r7, r3, #2
    b2d8:	cmp	r1, #1
    b2dc:	bge	b2f4 <rb_sha512_crypt_r+0x1034>
    b2e0:	b	b844 <rb_sha512_crypt_r+0x1584>
    b2e4:	.word	0x0001061c
    b2e8:	add	r7, r3, #3
    b2ec:	cmp	r1, #1
    b2f0:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b2f4:	ldrb	r4, [fp, #-155]	; 0xffffff65
    b2f8:	ldrb	r6, [fp, #-134]	; 0xffffff7a
    b2fc:	ldrb	r5, [fp, #-113]	; 0xffffff8f
    b300:	mov	r3, r7
    b304:	and	r2, r4, #63	; 0x3f
    b308:	ldrb	r2, [r0, r2]
    b30c:	strb	r2, [r3], #1
    b310:	sub	r2, r1, #1
    b314:	cmp	r2, #0
    b318:	ble	b38c <rb_sha512_crypt_r+0x10cc>
    b31c:	orr	r2, r4, r5, lsl #8
    b320:	ubfx	r2, r2, #6, #6
    b324:	ldrb	r2, [r0, r2]
    b328:	strb	r2, [r7, #1]
    b32c:	sub	r2, r1, #2
    b330:	cmp	r2, #1
    b334:	blt	b374 <rb_sha512_crypt_r+0x10b4>
    b338:	lsl	r2, r5, #8
    b33c:	orr	r2, r2, r6, lsl #16
    b340:	ubfx	r2, r2, #12, #6
    b344:	ldrb	r2, [r0, r2]
    b348:	strb	r2, [r7, #2]
    b34c:	sub	r2, r1, #3
    b350:	cmp	r2, #1
    b354:	blt	b388 <rb_sha512_crypt_r+0x10c8>
    b358:	ldrb	r2, [r0, r6, lsr #2]
    b35c:	add	r3, r7, #4
    b360:	strb	r2, [r7, #3]
    b364:	sub	r2, r1, #4
    b368:	cmp	r2, #1
    b36c:	bge	b394 <rb_sha512_crypt_r+0x10d4>
    b370:	b	b844 <rb_sha512_crypt_r+0x1584>
    b374:	add	r3, r7, #2
    b378:	cmp	r2, #1
    b37c:	bge	b394 <rb_sha512_crypt_r+0x10d4>
    b380:	b	b844 <rb_sha512_crypt_r+0x1584>
    b384:	.word	0x000100d2
    b388:	add	r3, r7, #3
    b38c:	cmp	r2, #1
    b390:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b394:	ldrb	r4, [fp, #-133]	; 0xffffff7b
    b398:	ldrb	r5, [fp, #-154]	; 0xffffff66
    b39c:	ldrb	r6, [fp, #-112]	; 0xffffff90
    b3a0:	mov	r7, r3
    b3a4:	and	r1, r4, #63	; 0x3f
    b3a8:	ldrb	r1, [r0, r1]
    b3ac:	strb	r1, [r7], #1
    b3b0:	sub	r1, r2, #1
    b3b4:	cmp	r1, #0
    b3b8:	ble	b428 <rb_sha512_crypt_r+0x1168>
    b3bc:	orr	r1, r4, r5, lsl #8
    b3c0:	ubfx	r1, r1, #6, #6
    b3c4:	ldrb	r1, [r0, r1]
    b3c8:	strb	r1, [r3, #1]
    b3cc:	sub	r1, r2, #2
    b3d0:	cmp	r1, #1
    b3d4:	blt	b414 <rb_sha512_crypt_r+0x1154>
    b3d8:	lsl	r1, r5, #8
    b3dc:	orr	r1, r1, r6, lsl #16
    b3e0:	ubfx	r1, r1, #12, #6
    b3e4:	ldrb	r1, [r0, r1]
    b3e8:	strb	r1, [r3, #2]
    b3ec:	sub	r1, r2, #3
    b3f0:	cmp	r1, #1
    b3f4:	blt	b424 <rb_sha512_crypt_r+0x1164>
    b3f8:	ldrb	r1, [r0, r6, lsr #2]
    b3fc:	add	r7, r3, #4
    b400:	strb	r1, [r3, #3]
    b404:	sub	r1, r2, #4
    b408:	cmp	r1, #1
    b40c:	bge	b430 <rb_sha512_crypt_r+0x1170>
    b410:	b	b844 <rb_sha512_crypt_r+0x1584>
    b414:	add	r7, r3, #2
    b418:	cmp	r1, #1
    b41c:	bge	b430 <rb_sha512_crypt_r+0x1170>
    b420:	b	b844 <rb_sha512_crypt_r+0x1584>
    b424:	add	r7, r3, #3
    b428:	cmp	r1, #1
    b42c:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b430:	ldrb	r4, [fp, #-111]	; 0xffffff91
    b434:	ldrb	r6, [fp, #-153]	; 0xffffff67
    b438:	ldrb	r5, [fp, #-132]	; 0xffffff7c
    b43c:	mov	r3, r7
    b440:	and	r2, r4, #63	; 0x3f
    b444:	ldrb	r2, [r0, r2]
    b448:	strb	r2, [r3], #1
    b44c:	sub	r2, r1, #1
    b450:	cmp	r2, #0
    b454:	ble	b4c4 <rb_sha512_crypt_r+0x1204>
    b458:	orr	r2, r4, r5, lsl #8
    b45c:	ubfx	r2, r2, #6, #6
    b460:	ldrb	r2, [r0, r2]
    b464:	strb	r2, [r7, #1]
    b468:	sub	r2, r1, #2
    b46c:	cmp	r2, #1
    b470:	blt	b4b0 <rb_sha512_crypt_r+0x11f0>
    b474:	lsl	r2, r5, #8
    b478:	orr	r2, r2, r6, lsl #16
    b47c:	ubfx	r2, r2, #12, #6
    b480:	ldrb	r2, [r0, r2]
    b484:	strb	r2, [r7, #2]
    b488:	sub	r2, r1, #3
    b48c:	cmp	r2, #1
    b490:	blt	b4c0 <rb_sha512_crypt_r+0x1200>
    b494:	ldrb	r2, [r0, r6, lsr #2]
    b498:	add	r3, r7, #4
    b49c:	strb	r2, [r7, #3]
    b4a0:	sub	r2, r1, #4
    b4a4:	cmp	r2, #1
    b4a8:	bge	b4cc <rb_sha512_crypt_r+0x120c>
    b4ac:	b	b844 <rb_sha512_crypt_r+0x1584>
    b4b0:	add	r3, r7, #2
    b4b4:	cmp	r2, #1
    b4b8:	bge	b4cc <rb_sha512_crypt_r+0x120c>
    b4bc:	b	b844 <rb_sha512_crypt_r+0x1584>
    b4c0:	add	r3, r7, #3
    b4c4:	cmp	r2, #1
    b4c8:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b4cc:	ldrb	r4, [fp, #-152]	; 0xffffff68
    b4d0:	ldrb	r6, [fp, #-131]	; 0xffffff7d
    b4d4:	ldrb	r5, [fp, #-110]	; 0xffffff92
    b4d8:	mov	r7, r3
    b4dc:	and	r1, r4, #63	; 0x3f
    b4e0:	ldrb	r1, [r0, r1]
    b4e4:	strb	r1, [r7], #1
    b4e8:	sub	r1, r2, #1
    b4ec:	cmp	r1, #0
    b4f0:	ble	b560 <rb_sha512_crypt_r+0x12a0>
    b4f4:	orr	r1, r4, r5, lsl #8
    b4f8:	ubfx	r1, r1, #6, #6
    b4fc:	ldrb	r1, [r0, r1]
    b500:	strb	r1, [r3, #1]
    b504:	sub	r1, r2, #2
    b508:	cmp	r1, #1
    b50c:	blt	b54c <rb_sha512_crypt_r+0x128c>
    b510:	lsl	r1, r5, #8
    b514:	orr	r1, r1, r6, lsl #16
    b518:	ubfx	r1, r1, #12, #6
    b51c:	ldrb	r1, [r0, r1]
    b520:	strb	r1, [r3, #2]
    b524:	sub	r1, r2, #3
    b528:	cmp	r1, #1
    b52c:	blt	b55c <rb_sha512_crypt_r+0x129c>
    b530:	ldrb	r1, [r0, r6, lsr #2]
    b534:	add	r7, r3, #4
    b538:	strb	r1, [r3, #3]
    b53c:	sub	r1, r2, #4
    b540:	cmp	r1, #1
    b544:	bge	b568 <rb_sha512_crypt_r+0x12a8>
    b548:	b	b844 <rb_sha512_crypt_r+0x1584>
    b54c:	add	r7, r3, #2
    b550:	cmp	r1, #1
    b554:	bge	b568 <rb_sha512_crypt_r+0x12a8>
    b558:	b	b844 <rb_sha512_crypt_r+0x1584>
    b55c:	add	r7, r3, #3
    b560:	cmp	r1, #1
    b564:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b568:	ldrb	r4, [fp, #-130]	; 0xffffff7e
    b56c:	ldrb	r5, [fp, #-151]	; 0xffffff69
    b570:	ldrb	r6, [fp, #-109]	; 0xffffff93
    b574:	mov	r3, r7
    b578:	and	r2, r4, #63	; 0x3f
    b57c:	ldrb	r2, [r0, r2]
    b580:	strb	r2, [r3], #1
    b584:	sub	r2, r1, #1
    b588:	cmp	r2, #0
    b58c:	ble	b608 <rb_sha512_crypt_r+0x1348>
    b590:	orr	r2, r4, r5, lsl #8
    b594:	ubfx	r2, r2, #6, #6
    b598:	ldrb	r2, [r0, r2]
    b59c:	strb	r2, [r7, #1]
    b5a0:	sub	r2, r1, #2
    b5a4:	cmp	r2, #1
    b5a8:	blt	b5ec <rb_sha512_crypt_r+0x132c>
    b5ac:	lsl	r2, r5, #8
    b5b0:	orr	r2, r2, r6, lsl #16
    b5b4:	ubfx	r2, r2, #12, #6
    b5b8:	ldrb	r2, [r0, r2]
    b5bc:	strb	r2, [r7, #2]
    b5c0:	sub	r2, r1, #3
    b5c4:	cmp	r2, #1
    b5c8:	blt	b600 <rb_sha512_crypt_r+0x1340>
    b5cc:	ldrb	r2, [r0, r6, lsr #2]
    b5d0:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b5d4:	add	r3, r7, #4
    b5d8:	strb	r2, [r7, #3]
    b5dc:	sub	r2, r1, #4
    b5e0:	cmp	r2, #1
    b5e4:	bge	b610 <rb_sha512_crypt_r+0x1350>
    b5e8:	b	b844 <rb_sha512_crypt_r+0x1584>
    b5ec:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b5f0:	add	r3, r7, #2
    b5f4:	cmp	r2, #1
    b5f8:	bge	b610 <rb_sha512_crypt_r+0x1350>
    b5fc:	b	b844 <rb_sha512_crypt_r+0x1584>
    b600:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b604:	add	r3, r7, #3
    b608:	cmp	r2, #1
    b60c:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b610:	ldrb	r4, [fp, #-108]	; 0xffffff94
    b614:	ldrb	r6, [fp, #-150]	; 0xffffff6a
    b618:	ldrb	r5, [fp, #-129]	; 0xffffff7f
    b61c:	mov	r7, r3
    b620:	and	r1, r4, #63	; 0x3f
    b624:	ldrb	r1, [r0, r1]
    b628:	strb	r1, [r7], #1
    b62c:	sub	r1, r2, #1
    b630:	cmp	r1, #0
    b634:	ble	b6b0 <rb_sha512_crypt_r+0x13f0>
    b638:	orr	r1, r4, r5, lsl #8
    b63c:	ubfx	r1, r1, #6, #6
    b640:	ldrb	r1, [r0, r1]
    b644:	strb	r1, [r3, #1]
    b648:	sub	r1, r2, #2
    b64c:	cmp	r1, #1
    b650:	blt	b694 <rb_sha512_crypt_r+0x13d4>
    b654:	lsl	r1, r5, #8
    b658:	orr	r1, r1, r6, lsl #16
    b65c:	ubfx	r1, r1, #12, #6
    b660:	ldrb	r1, [r0, r1]
    b664:	strb	r1, [r3, #2]
    b668:	sub	r1, r2, #3
    b66c:	cmp	r1, #1
    b670:	blt	b6a8 <rb_sha512_crypt_r+0x13e8>
    b674:	ldrb	r1, [r0, r6, lsr #2]
    b678:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b67c:	add	r7, r3, #4
    b680:	strb	r1, [r3, #3]
    b684:	sub	r1, r2, #4
    b688:	cmp	r1, #1
    b68c:	bge	b6b8 <rb_sha512_crypt_r+0x13f8>
    b690:	b	b844 <rb_sha512_crypt_r+0x1584>
    b694:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b698:	add	r7, r3, #2
    b69c:	cmp	r1, #1
    b6a0:	bge	b6b8 <rb_sha512_crypt_r+0x13f8>
    b6a4:	b	b844 <rb_sha512_crypt_r+0x1584>
    b6a8:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b6ac:	add	r7, r3, #3
    b6b0:	cmp	r1, #1
    b6b4:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b6b8:	ldrb	r4, [fp, #-149]	; 0xffffff6b
    b6bc:	ldrb	r6, [fp, #-128]	; 0xffffff80
    b6c0:	ldrb	r5, [fp, #-107]	; 0xffffff95
    b6c4:	mov	r3, r7
    b6c8:	and	r2, r4, #63	; 0x3f
    b6cc:	ldrb	r2, [r0, r2]
    b6d0:	strb	r2, [r3], #1
    b6d4:	sub	r2, r1, #1
    b6d8:	cmp	r2, #0
    b6dc:	ble	b754 <rb_sha512_crypt_r+0x1494>
    b6e0:	orr	r2, r4, r5, lsl #8
    b6e4:	ubfx	r2, r2, #6, #6
    b6e8:	ldrb	r2, [r0, r2]
    b6ec:	strb	r2, [r7, #1]
    b6f0:	sub	r2, r1, #2
    b6f4:	cmp	r2, #1
    b6f8:	blt	b73c <rb_sha512_crypt_r+0x147c>
    b6fc:	lsl	r2, r5, #8
    b700:	orr	r2, r2, r6, lsl #16
    b704:	ubfx	r2, r2, #12, #6
    b708:	ldrb	r2, [r0, r2]
    b70c:	strb	r2, [r7, #2]
    b710:	sub	r2, r1, #3
    b714:	cmp	r2, #1
    b718:	blt	b750 <rb_sha512_crypt_r+0x1490>
    b71c:	ldrb	r2, [r0, r6, lsr #2]
    b720:	add	r3, r7, #4
    b724:	strb	r2, [r7, #3]
    b728:	sub	r2, r1, #4
    b72c:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b730:	cmp	r2, #1
    b734:	bge	b760 <rb_sha512_crypt_r+0x14a0>
    b738:	b	b844 <rb_sha512_crypt_r+0x1584>
    b73c:	add	r3, r7, #2
    b740:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b744:	cmp	r2, #1
    b748:	bge	b760 <rb_sha512_crypt_r+0x14a0>
    b74c:	b	b844 <rb_sha512_crypt_r+0x1584>
    b750:	add	r3, r7, #3
    b754:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b758:	cmp	r2, #1
    b75c:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b760:	ldrb	r4, [fp, #-127]	; 0xffffff81
    b764:	ldrb	r5, [fp, #-148]	; 0xffffff6c
    b768:	ldrb	r6, [fp, #-106]	; 0xffffff96
    b76c:	mov	r7, r3
    b770:	and	r1, r4, #63	; 0x3f
    b774:	ldrb	r1, [r0, r1]
    b778:	strb	r1, [r7], #1
    b77c:	sub	r1, r2, #1
    b780:	cmp	r1, #0
    b784:	ble	b7fc <rb_sha512_crypt_r+0x153c>
    b788:	orr	r1, r4, r5, lsl #8
    b78c:	ubfx	r1, r1, #6, #6
    b790:	ldrb	r1, [r0, r1]
    b794:	strb	r1, [r3, #1]
    b798:	sub	r1, r2, #2
    b79c:	cmp	r1, #1
    b7a0:	blt	b7e4 <rb_sha512_crypt_r+0x1524>
    b7a4:	lsl	r1, r5, #8
    b7a8:	orr	r1, r1, r6, lsl #16
    b7ac:	ubfx	r1, r1, #12, #6
    b7b0:	ldrb	r1, [r0, r1]
    b7b4:	strb	r1, [r3, #2]
    b7b8:	sub	r1, r2, #3
    b7bc:	cmp	r1, #1
    b7c0:	blt	b7f8 <rb_sha512_crypt_r+0x1538>
    b7c4:	ldrb	r1, [r0, r6, lsr #2]
    b7c8:	add	r7, r3, #4
    b7cc:	strb	r1, [r3, #3]
    b7d0:	sub	r1, r2, #4
    b7d4:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b7d8:	cmp	r1, #1
    b7dc:	bge	b808 <rb_sha512_crypt_r+0x1548>
    b7e0:	b	b844 <rb_sha512_crypt_r+0x1584>
    b7e4:	add	r7, r3, #2
    b7e8:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b7ec:	cmp	r1, #1
    b7f0:	bge	b808 <rb_sha512_crypt_r+0x1548>
    b7f4:	b	b844 <rb_sha512_crypt_r+0x1584>
    b7f8:	add	r7, r3, #3
    b7fc:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b800:	cmp	r1, #1
    b804:	blt	b844 <rb_sha512_crypt_r+0x1584>
    b808:	ldrb	r3, [fp, #-105]	; 0xffffff97
    b80c:	and	r2, r3, #63	; 0x3f
    b810:	ldrb	r6, [r0, r2]
    b814:	mov	r2, r7
    b818:	strb	r6, [r2], #1
    b81c:	sub	r6, r1, #1
    b820:	cmp	r6, #0
    b824:	ble	b838 <rb_sha512_crypt_r+0x1578>
    b828:	ldrb	r0, [r0, r3, lsr #6]
    b82c:	add	r2, r7, #2
    b830:	mov	r1, r6
    b834:	strb	r0, [r7, #1]
    b838:	ldr	r8, [fp, #-952]	; 0xfffffc48
    b83c:	cmp	r1, #1
    b840:	bgt	b968 <rb_sha512_crypt_r+0x16a8>
    b844:	bl	552c <__errno_location@plt>
    b848:	mov	r1, #34	; 0x22
    b84c:	str	r1, [r0]
    b850:	ldr	r5, [fp, #-992]	; 0xfffffc20
    b854:	add	r0, pc, #292	; 0x124
    b858:	sub	r6, fp, #576	; 0x240
    b85c:	vmov.i32	q4, #0	; 0x00000000
    b860:	vld1.64	{d16-d17}, [r0 :128]
    b864:	add	r0, pc, #292	; 0x124
    b868:	add	r1, pc, #304	; 0x130
    b86c:	vld1.64	{d18-d19}, [r1 :128]
    b870:	vld1.64	{d20-d21}, [r0 :128]
    b874:	mov	r1, #20
    b878:	vst1.64	{d16-d17}, [r6]
    b87c:	add	r0, pc, #300	; 0x12c
    b880:	ldr	r2, [fp, #-944]	; 0xfffffc50
    b884:	vld1.64	{d16-d17}, [r0 :128]
    b888:	ldr	r0, [fp, #-940]	; 0xfffffc54
    b88c:	vst1.64	{d18-d19}, [r0]
    b890:	ldr	r0, [fp, #-936]	; 0xfffffc58
    b894:	vst1.64	{d20-d21}, [r0]
    b898:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    b89c:	vst1.64	{d16-d17}, [r0]
    b8a0:	mov	r0, #0
    b8a4:	str	r0, [r2, #16]
    b8a8:	vst1.64	{d8-d9}, [r2], r1
    b8ac:	sub	r1, fp, #168	; 0xa8
    b8b0:	str	r0, [r2]
    b8b4:	mov	r0, r6
    b8b8:	bl	bb70 <rb_sha512_finish_ctx>
    b8bc:	sub	r0, fp, #232	; 0xe8
    b8c0:	ldr	r4, [fp, #-924]	; 0xfffffc64
    b8c4:	mov	r1, r0
    b8c8:	add	r0, r0, #32
    b8cc:	vst1.64	{d8-d9}, [r0]
    b8d0:	add	r0, r1, #16
    b8d4:	vst1.64	{d8-d9}, [r0]
    b8d8:	mov	r0, #48	; 0x30
    b8dc:	vst1.64	{d8-d9}, [r1], r0
    b8e0:	ldr	r0, [fp, #-928]	; 0xfffffc60
    b8e4:	mov	r2, r4
    b8e8:	vst1.64	{d8-d9}, [r1]
    b8ec:	mov	r1, #0
    b8f0:	bl	4ed8 <memset@plt>
    b8f4:	ldr	r0, [fp, #-956]	; 0xfffffc44
    b8f8:	mov	r1, #0
    b8fc:	mov	r2, r8
    b900:	bl	4ed8 <memset@plt>
    b904:	mov	r0, r6
    b908:	mov	r1, #0
    b90c:	mov	r2, #344	; 0x158
    b910:	bl	4ed8 <memset@plt>
    b914:	sub	r0, fp, #920	; 0x398
    b918:	mov	r1, #0
    b91c:	mov	r2, #344	; 0x158
    b920:	bl	4ed8 <memset@plt>
    b924:	ldr	r0, [fp, #-984]	; 0xfffffc28
    b928:	cmp	r0, #0
    b92c:	beq	b93c <rb_sha512_crypt_r+0x167c>
    b930:	mov	r1, #0
    b934:	mov	r2, r4
    b938:	bl	4ed8 <memset@plt>
    b93c:	cmp	r5, #0
    b940:	beq	b954 <rb_sha512_crypt_r+0x1694>
    b944:	mov	r0, r5
    b948:	mov	r1, #0
    b94c:	mov	r2, r8
    b950:	bl	4ed8 <memset@plt>
    b954:	mov	r0, sl
    b958:	sub	sp, fp, #96	; 0x60
    b95c:	vpop	{d8-d15}
    b960:	add	sp, sp, #4
    b964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b968:	mov	r0, #0
    b96c:	mov	sl, r9
    b970:	strb	r0, [r2]
    b974:	b	b850 <rb_sha512_crypt_r+0x1590>
    b978:	nop	{0}
    b97c:	nop	{0}
    b980:	.word	0xf3bcc908
    b984:	.word	0x6a09e667
    b988:	.word	0x84caa73b
    b98c:	.word	0xbb67ae85
    b990:	.word	0xade682d1
    b994:	.word	0x510e527f
    b998:	.word	0x2b3e6c1f
    b99c:	.word	0x9b05688c
    b9a0:	.word	0xfe94f82b
    b9a4:	.word	0x3c6ef372
    b9a8:	.word	0x5f1d36f1
    b9ac:	.word	0xa54ff53a
    b9b0:	.word	0xfb41bd6b
    b9b4:	.word	0x1f83d9ab
    b9b8:	.word	0x137e2179
    b9bc:	.word	0x5be0cd19
    b9c0:	.word	0x0000ff48
    b9c4:	.word	0x0000fa84
    b9c8:	.word	0x0000ff08
    b9cc:	.word	0x0000f9b7

0000b9d0 <rb_sha512_process_bytes>:
    b9d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9d4:	add	fp, sp, #28
    b9d8:	sub	sp, sp, #4
    b9dc:	mov	r9, r2
    b9e0:	mov	r6, r0
    b9e4:	mov	r4, r2
    b9e8:	mov	sl, r1
    b9ec:	ldr	r5, [r9, #80]!	; 0x50
    b9f0:	ldr	r0, [r9, #4]
    b9f4:	orrs	r0, r5, r0
    b9f8:	beq	ba7c <rb_sha512_process_bytes+0xac>
    b9fc:	rsb	r7, r5, #256	; 0x100
    ba00:	add	r0, r4, r5
    ba04:	mov	r1, r6
    ba08:	cmp	r7, sl
    ba0c:	add	r0, r0, #88	; 0x58
    ba10:	movhi	r7, sl
    ba14:	mov	r2, r7
    ba18:	bl	5094 <memcpy@plt>
    ba1c:	ldrd	r0, [r9]
    ba20:	adds	r0, r0, r7
    ba24:	adc	r1, r1, #0
    ba28:	subs	r2, r0, #129	; 0x81
    ba2c:	strd	r0, [r9]
    ba30:	sbcs	r1, r1, #0
    ba34:	bcc	ba74 <rb_sha512_process_bytes+0xa4>
    ba38:	add	r8, r4, #88	; 0x58
    ba3c:	bic	r1, r0, #127	; 0x7f
    ba40:	mov	r2, r4
    ba44:	mov	r0, r8
    ba48:	bl	bf2c <rb_sha512_process_block>
    ba4c:	mov	r0, #0
    ba50:	str	r0, [r9, #4]
    ba54:	ldr	r0, [r9]
    ba58:	and	r2, r0, #127	; 0x7f
    ba5c:	add	r0, r7, r5
    ba60:	bic	r0, r0, #127	; 0x7f
    ba64:	str	r2, [r9]
    ba68:	add	r1, r8, r0
    ba6c:	mov	r0, r8
    ba70:	bl	5094 <memcpy@plt>
    ba74:	sub	sl, sl, r7
    ba78:	add	r6, r6, r7
    ba7c:	cmp	sl, #128	; 0x80
    ba80:	bcc	bafc <rb_sha512_process_bytes+0x12c>
    ba84:	tst	r6, #7
    ba88:	beq	bae0 <rb_sha512_process_bytes+0x110>
    ba8c:	cmp	sl, #129	; 0x81
    ba90:	bcc	bb0c <rb_sha512_process_bytes+0x13c>
    ba94:	sub	r0, sl, #129	; 0x81
    ba98:	add	r7, r4, #88	; 0x58
    ba9c:	mov	r5, sl
    baa0:	bic	r8, r0, #127	; 0x7f
    baa4:	mov	r0, r7
    baa8:	mov	r1, r6
    baac:	mov	r2, #128	; 0x80
    bab0:	bl	5094 <memcpy@plt>
    bab4:	mov	r0, r7
    bab8:	mov	r1, #128	; 0x80
    babc:	mov	r2, r4
    bac0:	bl	bf2c <rb_sha512_process_block>
    bac4:	sub	r5, r5, #128	; 0x80
    bac8:	add	r6, r6, #128	; 0x80
    bacc:	cmp	r5, #128	; 0x80
    bad0:	bhi	baa4 <rb_sha512_process_bytes+0xd4>
    bad4:	sub	r0, sl, r8
    bad8:	sub	sl, r0, #128	; 0x80
    badc:	b	bb10 <rb_sha512_process_bytes+0x140>
    bae0:	bic	r7, sl, #127	; 0x7f
    bae4:	mov	r0, r6
    bae8:	mov	r2, r4
    baec:	mov	r1, r7
    baf0:	bl	bf2c <rb_sha512_process_block>
    baf4:	add	r6, r6, r7
    baf8:	and	sl, sl, #127	; 0x7f
    bafc:	cmp	sl, #0
    bb00:	bne	bb10 <rb_sha512_process_bytes+0x140>
    bb04:	sub	sp, fp, #28
    bb08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb0c:	mov	sl, #128	; 0x80
    bb10:	ldr	r5, [r9]
    bb14:	mov	r1, r6
    bb18:	mov	r2, sl
    bb1c:	add	r0, r4, r5
    bb20:	add	r0, r0, #88	; 0x58
    bb24:	bl	5094 <memcpy@plt>
    bb28:	add	r6, sl, r5
    bb2c:	cmp	r6, #128	; 0x80
    bb30:	bcc	bb5c <rb_sha512_process_bytes+0x18c>
    bb34:	add	r5, r4, #88	; 0x58
    bb38:	mov	r1, #128	; 0x80
    bb3c:	mov	r2, r4
    bb40:	mov	r0, r5
    bb44:	bl	bf2c <rb_sha512_process_block>
    bb48:	sub	r6, r6, #128	; 0x80
    bb4c:	add	r1, r4, #216	; 0xd8
    bb50:	mov	r0, r5
    bb54:	mov	r2, r6
    bb58:	bl	5094 <memcpy@plt>
    bb5c:	mov	r7, #0
    bb60:	strd	r6, [r9]
    bb64:	sub	sp, fp, #28
    bb68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb6c:	nop	{0}

0000bb70 <rb_sha512_finish_ctx>:
    bb70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb74:	add	fp, sp, #28
    bb78:	sub	sp, sp, #4
    bb7c:	vpush	{d8-d9}
    bb80:	sub	sp, sp, #32
    bb84:	mov	r5, r0
    bb88:	mov	sl, r0
    bb8c:	mov	r8, r1
    bb90:	ldr	r0, [r5, #64]!	; 0x40
    bb94:	add	r7, r8, #8
    bb98:	ldrd	r2, [r5, #16]
    bb9c:	ldr	r1, [r5, #4]
    bba0:	sub	r6, r5, #56	; 0x38
    bba4:	adds	r0, r0, r2
    bba8:	adcs	r1, r1, r3
    bbac:	strd	r0, [r5]
    bbb0:	str	r6, [sp, #4]
    bbb4:	sub	r6, r5, #48	; 0x30
    bbb8:	mov	r1, #0
    bbbc:	str	r6, [sp, #8]
    bbc0:	sub	r6, r5, #40	; 0x28
    bbc4:	adc	r0, r1, #0
    bbc8:	str	r6, [sp, #12]
    bbcc:	sub	r6, r5, #32
    bbd0:	cmp	r0, #1
    bbd4:	str	r6, [sp, #16]
    bbd8:	sub	r6, r5, #24
    bbdc:	str	r6, [sp, #20]
    bbe0:	sub	r6, r5, #16
    bbe4:	str	r6, [sp, #24]
    bbe8:	sub	r6, r5, #8
    bbec:	str	r6, [sp, #28]
    bbf0:	bne	bc08 <rb_sha512_finish_ctx+0x98>
    bbf4:	add	r0, r5, #8
    bbf8:	ldm	r0, {r6, r9}
    bbfc:	adds	r6, r6, #1
    bc00:	adc	r9, r9, #0
    bc04:	stm	r0, {r6, r9}
    bc08:	rsbs	r4, r2, #111	; 0x6f
    bc0c:	add	r6, sl, #88	; 0x58
    bc10:	mov	r9, #112	; 0x70
    bc14:	rscs	r3, r3, #0
    bc18:	add	r0, r6, r2
    bc1c:	movwcc	r1, #1
    bc20:	cmp	r1, #0
    bc24:	ldr	r1, [pc, #764]	; bf28 <rb_sha512_finish_ctx+0x3b8>
    bc28:	movwne	r9, #240	; 0xf0
    bc2c:	sub	r2, r9, r2
    bc30:	add	r1, pc, r1
    bc34:	bl	5094 <memcpy@plt>
    bc38:	vld1.64	{d1-d2}, [r5]
    bc3c:	add	r2, pc, #540	; 0x21c
    bc40:	vmov.i32	q8, #0	; 0x00000000
    bc44:	vmov.i64	q11, #0x00ff000000000000
    bc48:	vld1.64	{d20-d21}, [r2 :128]
    bc4c:	add	r2, pc, #540	; 0x21c
    bc50:	vld1.64	{d18-d19}, [r2 :128]
    bc54:	add	r2, pc, #548	; 0x224
    bc58:	vmov.32	r0, d2[0]
    bc5c:	vldr	s0, [pc, #700]	; bf20 <rb_sha512_finish_ctx+0x3b0>
    bc60:	vsub.i64	q13, q8, q10
    bc64:	lsl	r1, r0, #11
    bc68:	vmov	s1, r1
    bc6c:	vmov.32	r1, d1[1]
    bc70:	vorr	d3, d1, d1
    bc74:	vshl.s64	q12, q0, #59	; 0x3b
    bc78:	vand	q11, q0, q11
    bc7c:	vshl.u64	q14, q1, q9
    bc80:	vshl.u64	q9, q1, q13
    bc84:	vld1.64	{d26-d27}, [r2 :128]
    bc88:	vorr	d23, d25, d25
    bc8c:	vshl.u64	q10, q1, q10
    bc90:	lsr	r1, r1, #29
    bc94:	vmov	s8, r1
    bc98:	add	r1, pc, #496	; 0x1f0
    bc9c:	add	r2, pc, #508	; 0x1fc
    bca0:	vmov.f32	s9, s0
    bca4:	vorr	d5, d1, d1
    bca8:	vorr	d19, d21, d21
    bcac:	vld1.64	{d30-d31}, [r2 :128]
    bcb0:	vmov.32	r2, d2[1]
    bcb4:	vld1.64	{d6-d7}, [r1 :128]
    bcb8:	vshl.u64	q13, q1, q13
    bcbc:	vand	q14, q14, q15
    bcc0:	vsub.i64	q15, q8, q3
    bcc4:	vldr	s14, [pc, #600]	; bf24 <rb_sha512_finish_ctx+0x3b4>
    bcc8:	lsl	r1, r2, #3
    bccc:	add	r2, pc, #476	; 0x1dc
    bcd0:	orr	r1, r1, r0, lsr #29
    bcd4:	vld1.64	{d8-d9}, [r2 :128]
    bcd8:	lsl	r0, r0, #3
    bcdc:	vmov	s12, r0
    bce0:	add	r0, pc, #472	; 0x1d8
    bce4:	vorr	q11, q14, q11
    bce8:	vshl.u64	q15, q1, q15
    bcec:	vmov	s13, r1
    bcf0:	vmov.f32	s15, s0
    bcf4:	vand	q12, q13, q4
    bcf8:	vsub.i64	q13, q8, q3
    bcfc:	vorr	q14, q2, q3
    bd00:	vld1.64	{d6-d7}, [r0 :128]
    bd04:	add	r0, pc, #452	; 0x1c4
    bd08:	vshl.u64	q13, q2, q13
    bd0c:	vorr	q11, q11, q12
    bd10:	vsub.i64	q2, q8, q3
    bd14:	vld1.64	{d6-d7}, [r0 :128]
    bd18:	add	r0, pc, #448	; 0x1c0
    bd1c:	vld1.64	{d20-d21}, [r0 :128]
    bd20:	add	r0, pc, #456	; 0x1c8
    bd24:	add	r1, pc, #468	; 0x1d4
    bd28:	add	r2, pc, #480	; 0x1e0
    bd2c:	vld1.64	{d24-d25}, [r2 :128]
    bd30:	vorr	d29, d27, d27
    bd34:	mov	r2, sl
    bd38:	vshl.u64	q2, q1, q2
    bd3c:	vand	q9, q9, q3
    bd40:	vsub.i64	q8, q8, q10
    bd44:	vld1.64	{d20-d21}, [r1 :128]
    bd48:	add	r1, r9, #16
    bd4c:	vand	q12, q15, q12
    bd50:	vld1.64	{d30-d31}, [r0 :128]
    bd54:	add	r0, r6, r9
    bd58:	vorr	q9, q11, q9
    bd5c:	vmov.i64	q11, #0x00000000000000ff
    bd60:	vshl.u64	q8, q1, q8
    bd64:	vorr	q9, q9, q12
    bd68:	vand	q10, q2, q10
    bd6c:	vand	q11, q14, q11
    bd70:	vshl.s64	q12, q14, #56	; 0x38
    bd74:	vand	q8, q8, q15
    bd78:	vorr	q9, q9, q10
    bd7c:	vorr	d25, d23, d23
    bd80:	vorr	q8, q9, q8
    bd84:	vorr	q8, q8, q12
    bd88:	vst1.64	{d16-d17}, [r0]
    bd8c:	mov	r0, r6
    bd90:	bl	bf2c <rb_sha512_process_block>
    bd94:	ldrd	r0, [sl]
    bd98:	rev	r3, r0
    bd9c:	rev	r2, r1
    bda0:	strd	r2, [r8]
    bda4:	ldr	r0, [sp, #4]
    bda8:	ldrd	r0, [r0]
    bdac:	rev	r0, r0
    bdb0:	str	r0, [r7, #4]
    bdb4:	rev	r0, r1
    bdb8:	str	r0, [r7]
    bdbc:	ldr	r0, [sp, #8]
    bdc0:	ldrd	r0, [r0]
    bdc4:	rev	r0, r0
    bdc8:	str	r0, [r7, #12]
    bdcc:	rev	r0, r1
    bdd0:	str	r0, [r7, #8]
    bdd4:	ldr	r0, [sp, #12]
    bdd8:	ldrd	r0, [r0]
    bddc:	rev	r0, r0
    bde0:	str	r0, [r7, #20]
    bde4:	rev	r0, r1
    bde8:	str	r0, [r7, #16]
    bdec:	ldr	r0, [sp, #16]
    bdf0:	ldrd	r0, [r0]
    bdf4:	rev	r0, r0
    bdf8:	str	r0, [r7, #28]
    bdfc:	rev	r0, r1
    be00:	str	r0, [r7, #24]
    be04:	ldr	r0, [sp, #20]
    be08:	ldrd	r0, [r0]
    be0c:	rev	r0, r0
    be10:	str	r0, [r7, #36]	; 0x24
    be14:	rev	r0, r1
    be18:	str	r0, [r7, #32]
    be1c:	ldr	r0, [sp, #24]
    be20:	ldrd	r0, [r0]
    be24:	rev	r0, r0
    be28:	str	r0, [r7, #44]	; 0x2c
    be2c:	rev	r0, r1
    be30:	str	r0, [r7, #40]	; 0x28
    be34:	ldr	r0, [sp, #28]
    be38:	ldrd	r0, [r0]
    be3c:	rev	r0, r0
    be40:	str	r0, [r7, #52]	; 0x34
    be44:	rev	r0, r1
    be48:	str	r0, [r7, #48]	; 0x30
    be4c:	sub	sp, fp, #48	; 0x30
    be50:	vpop	{d8-d9}
    be54:	add	sp, sp, #4
    be58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be5c:	nop	{0}
    be60:	.word	0x00000005
    be64:	.word	0x00000000
    be68:	.word	0x0000000b
    be6c:	.word	0x00000000
    be70:	.word	0x0000001b
    be74:	.word	0x00000000
    be78:	.word	0x0000002b
    be7c:	.word	0x00000000
    be80:	.word	0x0000000b
    be84:	.word	0x00000000
    be88:	.word	0x0000001b
    be8c:	.word	0x00000000
    be90:	.word	0x00000015
    be94:	.word	0x00000000
    be98:	.word	0x00000005
	...
    bea4:	.word	0x0000ff00
    bea8:	.word	0x00000000
    beac:	.word	0x00ff0000
    beb0:	.word	0x00000000
    beb4:	.word	0x000000ff
    beb8:	.word	0x00000000
    bebc:	.word	0x0000ff00
    bec0:	.word	0x00000025
    bec4:	.word	0x00000000
    bec8:	.word	0x00000015
    becc:	.word	0x00000000
    bed0:	.word	0xff000000
	...
    bedc:	.word	0x000000ff
    bee0:	.word	0x00000035
    bee4:	.word	0x00000000
    bee8:	.word	0x00000025
    beec:	.word	0x00000000
    bef0:	.word	0x000000ff
    bef4:	.word	0x00000000
    bef8:	.word	0x0000ff00
    befc:	.word	0x00000000
    bf00:	.word	0x0000ff00
    bf04:	.word	0x00000000
    bf08:	.word	0x00ff0000
    bf0c:	.word	0x00000000
    bf10:	.word	0x00ff0000
    bf14:	.word	0x00000000
    bf18:	.word	0xff000000
	...
    bf24:	.word	0x00000035
    bf28:	.word	0x0000ef80

0000bf2c <rb_sha512_process_block>:
    bf2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf30:	add	fp, sp, #28
    bf34:	sub	sp, sp, #860	; 0x35c
    bf38:	mov	r6, r0
    bf3c:	ldr	r0, [r2, #64]	; 0x40
    bf40:	lsr	r7, r1, #3
    bf44:	adds	r0, r0, r1
    bf48:	str	r0, [r2, #64]	; 0x40
    bf4c:	ldr	r0, [r2, #68]	; 0x44
    bf50:	adcs	r0, r0, #0
    bf54:	str	r0, [r2, #68]	; 0x44
    bf58:	mov	r0, #0
    bf5c:	ldr	r1, [r2, #60]	; 0x3c
    bf60:	ldr	r5, [r2, #36]	; 0x24
    bf64:	ldr	sl, [r2, #28]
    bf68:	adc	r0, r0, #0
    bf6c:	cmp	r0, #1
    bf70:	str	r1, [sp, #160]	; 0xa0
    bf74:	mov	r1, r2
    bf78:	ldr	r3, [r1, #56]!	; 0x38
    bf7c:	str	r1, [sp, #24]
    bf80:	ldr	r1, [r2, #52]	; 0x34
    bf84:	str	r3, [sp, #156]	; 0x9c
    bf88:	str	r1, [sp, #152]	; 0x98
    bf8c:	mov	r1, r2
    bf90:	ldr	r3, [r1, #48]!	; 0x30
    bf94:	str	r1, [sp, #20]
    bf98:	ldr	r1, [r2, #44]	; 0x2c
    bf9c:	str	r3, [sp, #148]	; 0x94
    bfa0:	str	r1, [sp, #144]	; 0x90
    bfa4:	mov	r1, r2
    bfa8:	ldr	r3, [r1, #40]!	; 0x28
    bfac:	str	r1, [sp, #16]
    bfb0:	mov	r1, r2
    bfb4:	ldr	r9, [r1, #32]!
    bfb8:	str	r1, [sp, #12]
    bfbc:	mov	r1, r2
    bfc0:	str	r3, [sp, #140]	; 0x8c
    bfc4:	ldr	r3, [r1, #24]!
    bfc8:	str	r1, [sp, #8]
    bfcc:	str	r3, [sp, #136]	; 0x88
    bfd0:	ldm	r2, {r1, r3}
    bfd4:	str	r3, [sp, #120]	; 0x78
    bfd8:	str	r1, [sp, #124]	; 0x7c
    bfdc:	ldr	r1, [r2, #12]
    bfe0:	str	r1, [sp, #128]	; 0x80
    bfe4:	ldr	r1, [r2, #20]
    bfe8:	str	r1, [sp, #132]	; 0x84
    bfec:	mov	r1, r2
    bff0:	ldr	r3, [r1, #16]!
    bff4:	str	r1, [sp, #4]
    bff8:	mov	r1, r2
    bffc:	str	r3, [sp, #116]	; 0x74
    c000:	ldr	r3, [r1, #8]!
    c004:	str	r1, [sp]
    c008:	str	r3, [sp, #112]	; 0x70
    c00c:	bne	c020 <rb_sha512_process_block+0xf4>
    c010:	ldrd	r0, [r2, #72]	; 0x48
    c014:	adds	r0, r0, #1
    c018:	adc	r1, r1, #0
    c01c:	strd	r0, [r2, #72]	; 0x48
    c020:	cmp	r7, #0
    c024:	str	r2, [sp, #28]
    c028:	beq	c5fc <rb_sha512_process_block+0x6d0>
    c02c:	add	r0, sp, #216	; 0xd8
    c030:	add	r1, r0, #8
    c034:	str	r1, [sp, #88]	; 0x58
    c038:	add	r1, r0, #16
    c03c:	str	r1, [sp, #84]	; 0x54
    c040:	add	r1, r0, #24
    c044:	str	r1, [sp, #80]	; 0x50
    c048:	add	r1, r0, #32
    c04c:	str	r1, [sp, #76]	; 0x4c
    c050:	add	r1, r0, #40	; 0x28
    c054:	str	r1, [sp, #72]	; 0x48
    c058:	add	r1, r0, #48	; 0x30
    c05c:	str	r1, [sp, #68]	; 0x44
    c060:	add	r1, r0, #56	; 0x38
    c064:	str	r1, [sp, #64]	; 0x40
    c068:	add	r1, r0, #64	; 0x40
    c06c:	str	r1, [sp, #60]	; 0x3c
    c070:	add	r1, r0, #72	; 0x48
    c074:	str	r1, [sp, #56]	; 0x38
    c078:	add	r1, r0, #80	; 0x50
    c07c:	str	r1, [sp, #52]	; 0x34
    c080:	add	r1, r0, #88	; 0x58
    c084:	str	r1, [sp, #48]	; 0x30
    c088:	add	r1, r0, #96	; 0x60
    c08c:	str	r1, [sp, #44]	; 0x2c
    c090:	add	r1, r0, #104	; 0x68
    c094:	str	r1, [sp, #40]	; 0x28
    c098:	add	r1, r0, #112	; 0x70
    c09c:	add	r0, r0, #120	; 0x78
    c0a0:	str	r1, [sp, #36]	; 0x24
    c0a4:	str	r0, [sp, #32]
    c0a8:	str	r5, [sp, #108]	; 0x6c
    c0ac:	str	r7, [sp, #92]	; 0x5c
    c0b0:	ldm	r6, {r0, r2}
    c0b4:	rev	lr, r2
    c0b8:	str	lr, [sp, #216]	; 0xd8
    c0bc:	rev	ip, r0
    c0c0:	str	ip, [sp, #220]	; 0xdc
    c0c4:	ldr	r0, [r6, #8]
    c0c8:	ldr	r3, [r6, #12]
    c0cc:	rev	r5, r0
    c0d0:	ldr	r0, [sp, #88]	; 0x58
    c0d4:	rev	r4, r3
    c0d8:	strd	r4, [r0]
    c0dc:	ldr	r0, [r6, #16]
    c0e0:	ldr	r3, [r6, #20]
    c0e4:	rev	r5, r0
    c0e8:	ldr	r0, [sp, #84]	; 0x54
    c0ec:	rev	r4, r3
    c0f0:	strd	r4, [r0]
    c0f4:	ldr	r0, [r6, #24]
    c0f8:	ldr	r3, [r6, #28]
    c0fc:	rev	r5, r0
    c100:	ldr	r0, [sp, #80]	; 0x50
    c104:	rev	r4, r3
    c108:	strd	r4, [r0]
    c10c:	ldr	r0, [r6, #32]
    c110:	ldr	r3, [r6, #36]	; 0x24
    c114:	rev	r5, r0
    c118:	ldr	r0, [sp, #76]	; 0x4c
    c11c:	rev	r4, r3
    c120:	strd	r4, [r0]
    c124:	ldr	r0, [r6, #40]	; 0x28
    c128:	ldr	r3, [r6, #44]	; 0x2c
    c12c:	rev	r5, r0
    c130:	ldr	r0, [sp, #72]	; 0x48
    c134:	rev	r4, r3
    c138:	strd	r4, [r0]
    c13c:	ldr	r0, [r6, #48]	; 0x30
    c140:	ldr	r3, [r6, #52]	; 0x34
    c144:	rev	r5, r0
    c148:	ldr	r0, [sp, #68]	; 0x44
    c14c:	rev	r4, r3
    c150:	strd	r4, [r0]
    c154:	ldr	r0, [r6, #56]	; 0x38
    c158:	ldr	r3, [r6, #60]	; 0x3c
    c15c:	rev	r5, r0
    c160:	ldr	r0, [sp, #64]	; 0x40
    c164:	rev	r4, r3
    c168:	strd	r4, [r0]
    c16c:	ldr	r0, [r6, #64]	; 0x40
    c170:	ldr	r3, [r6, #68]	; 0x44
    c174:	rev	r5, r0
    c178:	ldr	r0, [sp, #60]	; 0x3c
    c17c:	rev	r4, r3
    c180:	strd	r4, [r0]
    c184:	ldr	r0, [r6, #72]	; 0x48
    c188:	ldr	r3, [r6, #76]	; 0x4c
    c18c:	rev	r5, r0
    c190:	ldr	r0, [sp, #56]	; 0x38
    c194:	rev	r4, r3
    c198:	strd	r4, [r0]
    c19c:	ldr	r0, [r6, #80]	; 0x50
    c1a0:	ldr	r3, [r6, #84]	; 0x54
    c1a4:	rev	r5, r0
    c1a8:	ldr	r0, [sp, #52]	; 0x34
    c1ac:	rev	r4, r3
    c1b0:	strd	r4, [r0]
    c1b4:	ldr	r0, [r6, #88]	; 0x58
    c1b8:	ldr	r3, [r6, #92]	; 0x5c
    c1bc:	rev	r5, r0
    c1c0:	ldr	r0, [sp, #48]	; 0x30
    c1c4:	rev	r4, r3
    c1c8:	strd	r4, [r0]
    c1cc:	ldr	r0, [r6, #96]	; 0x60
    c1d0:	ldr	r3, [r6, #100]	; 0x64
    c1d4:	rev	r5, r0
    c1d8:	ldr	r0, [sp, #44]	; 0x2c
    c1dc:	rev	r4, r3
    c1e0:	strd	r4, [r0]
    c1e4:	ldr	r0, [r6, #104]	; 0x68
    c1e8:	ldr	r3, [r6, #108]	; 0x6c
    c1ec:	rev	r5, r0
    c1f0:	ldr	r0, [sp, #40]	; 0x28
    c1f4:	rev	r4, r3
    c1f8:	strd	r4, [r0]
    c1fc:	ldr	r0, [r6, #112]	; 0x70
    c200:	ldr	r3, [r6, #116]	; 0x74
    c204:	rev	r5, r0
    c208:	ldr	r0, [sp, #36]	; 0x24
    c20c:	rev	r4, r3
    c210:	strd	r4, [r0]
    c214:	ldr	r0, [r6, #120]	; 0x78
    c218:	ldr	r3, [r6, #124]	; 0x7c
    c21c:	add	r6, r6, #128	; 0x80
    c220:	str	r6, [sp, #96]	; 0x60
    c224:	rev	r5, r0
    c228:	ldr	r0, [sp, #32]
    c22c:	rev	r4, r3
    c230:	strd	r4, [r0]
    c234:	movw	r0, #65024	; 0xfe00
    c238:	movt	r0, #65535	; 0xffff
    c23c:	add	r1, sp, #216	; 0xd8
    c240:	add	r3, r1, r0
    c244:	ldr	r6, [r3, #628]	; 0x274
    c248:	ldr	r7, [r3, #624]	; 0x270
    c24c:	ldr	r2, [r3, #520]	; 0x208
    c250:	lsl	r4, r6, #3
    c254:	lsr	r5, r6, #19
    c258:	lsr	r1, r6, #29
    c25c:	orr	r4, r4, r7, lsr #29
    c260:	orr	r5, r5, r7, lsl #13
    c264:	orr	r1, r1, r7, lsl #3
    c268:	eor	r4, r4, r6, lsr #6
    c26c:	eor	r5, r4, r5
    c270:	lsr	r4, r7, #6
    c274:	lsr	r7, r7, #19
    c278:	orr	r4, r4, r6, lsl #26
    c27c:	orr	r7, r7, r6, lsl #13
    c280:	ldr	r6, [r3, #584]	; 0x248
    c284:	eor	r1, r1, r4
    c288:	ldr	r4, [r3, #524]	; 0x20c
    c28c:	eor	r1, r1, r7
    c290:	ldr	r7, [r3, #588]	; 0x24c
    c294:	adds	r6, lr, r6
    c298:	mov	lr, r2
    c29c:	adc	r7, ip, r7
    c2a0:	adds	r1, r6, r1
    c2a4:	lsr	r6, r2, #7
    c2a8:	adc	ip, r7, r5
    c2ac:	lsr	r5, r2, #8
    c2b0:	orr	r6, r6, r4, lsl #25
    c2b4:	orr	r5, r5, r4, lsl #24
    c2b8:	eor	r6, r5, r6
    c2bc:	lsrs	r5, r4, #1
    c2c0:	rrx	r7, r2
    c2c4:	eor	r7, r6, r7
    c2c8:	orr	r6, r5, r2, lsl #31
    c2cc:	lsr	r5, r4, #8
    c2d0:	adds	r1, r1, r7
    c2d4:	orr	r5, r5, r2, lsl #24
    c2d8:	str	r1, [r3, #640]	; 0x280
    c2dc:	eor	r5, r5, r4, lsr #7
    c2e0:	eor	r7, r5, r6
    c2e4:	adc	r7, ip, r7
    c2e8:	adds	r0, r0, #8
    c2ec:	mov	ip, r4
    c2f0:	str	r7, [r3, #644]	; 0x284
    c2f4:	bne	c23c <rb_sha512_process_block+0x310>
    c2f8:	ldr	r0, [sp, #124]	; 0x7c
    c2fc:	ldr	r7, [sp, #116]	; 0x74
    c300:	ldr	r6, [sp, #152]	; 0x98
    c304:	ldr	r2, [sp, #112]	; 0x70
    c308:	ldr	r3, [sp, #128]	; 0x80
    c30c:	ldr	r8, [sp, #108]	; 0x6c
    c310:	ldr	r5, [sp, #140]	; 0x8c
    c314:	ldr	lr, [sp, #156]	; 0x9c
    c318:	ldr	r4, [sp, #160]	; 0xa0
    c31c:	mov	ip, #0
    c320:	str	sl, [sp, #100]	; 0x64
    c324:	str	sl, [sp, #176]	; 0xb0
    c328:	str	r9, [sp, #104]	; 0x68
    c32c:	str	r9, [sp, #188]	; 0xbc
    c330:	str	r0, [sp, #196]	; 0xc4
    c334:	ldr	r0, [sp, #120]	; 0x78
    c338:	str	r7, [sp, #208]	; 0xd0
    c33c:	ldr	r7, [sp, #132]	; 0x84
    c340:	str	r6, [sp, #200]	; 0xc8
    c344:	str	r0, [sp, #192]	; 0xc0
    c348:	ldr	r0, [sp, #136]	; 0x88
    c34c:	str	r7, [sp, #204]	; 0xcc
    c350:	ldr	r7, [sp, #144]	; 0x90
    c354:	str	r0, [sp, #180]	; 0xb4
    c358:	ldr	r0, [sp, #148]	; 0x94
    c35c:	str	r0, [sp, #212]	; 0xd4
    c360:	ldr	r1, [sp, #204]	; 0xcc
    c364:	ldr	r9, [sp, #212]	; 0xd4
    c368:	ldr	r0, [sp, #200]	; 0xc8
    c36c:	mov	r6, r7
    c370:	str	r5, [sp, #212]	; 0xd4
    c374:	mov	r7, r8
    c378:	ldr	r5, [sp, #188]	; 0xbc
    c37c:	mov	r8, r3
    c380:	mov	sl, r2
    c384:	ldr	r3, [sp, #192]	; 0xc0
    c388:	ldr	r2, [sp, #196]	; 0xc4
    c38c:	str	r6, [sp, #200]	; 0xc8
    c390:	str	r1, [sp, #164]	; 0xa4
    c394:	ldr	r1, [sp, #208]	; 0xd0
    c398:	str	r0, [sp, #172]	; 0xac
    c39c:	bic	r0, r0, r7
    c3a0:	str	r9, [sp, #168]	; 0xa8
    c3a4:	str	r1, [sp, #184]	; 0xb8
    c3a8:	and	r1, r7, r6
    c3ac:	ldr	r6, [sp, #212]	; 0xd4
    c3b0:	orr	r0, r1, r0
    c3b4:	bic	r1, r9, r5
    c3b8:	and	r6, r5, r6
    c3bc:	orr	r1, r6, r1
    c3c0:	lsr	r6, r7, #18
    c3c4:	adds	r1, r1, lr
    c3c8:	orr	r6, r6, r5, lsl #14
    c3cc:	adc	lr, r0, r4
    c3d0:	lsr	r4, r7, #14
    c3d4:	lsr	r0, r5, #14
    c3d8:	orr	r4, r4, r5, lsl #18
    c3dc:	orr	r0, r0, r7, lsl #18
    c3e0:	eor	r6, r4, r6
    c3e4:	lsl	r4, r7, #23
    c3e8:	orr	r4, r4, r5, lsr #9
    c3ec:	eor	r6, r6, r4
    c3f0:	lsr	r4, r5, #18
    c3f4:	orr	r4, r4, r7, lsl #14
    c3f8:	eor	r0, r0, r4
    c3fc:	lsr	r4, r7, #9
    c400:	orr	r4, r4, r5, lsl #23
    c404:	eor	r0, r0, r4
    c408:	adds	r0, r1, r0
    c40c:	adc	r1, lr, r6
    c410:	ldr	r6, [pc, #632]	; c690 <rb_sha512_process_block+0x764>
    c414:	ldr	lr, [sp, #164]	; 0xa4
    c418:	str	r8, [sp, #204]	; 0xcc
    c41c:	str	sl, [sp, #208]	; 0xd0
    c420:	add	r6, pc, r6
    c424:	ldr	r4, [r6, ip]!
    c428:	ldr	r6, [r6, #4]
    c42c:	adds	r0, r0, r4
    c430:	adc	r1, r1, r6
    c434:	add	r6, sp, #216	; 0xd8
    c438:	mov	r4, r6
    c43c:	add	r6, r6, ip
    c440:	ldr	r4, [r4, ip]
    c444:	ldr	r6, [r6, #4]
    c448:	add	ip, ip, #8
    c44c:	adds	r9, r0, r4
    c450:	and	r0, r8, lr
    c454:	ldr	r4, [sp, #184]	; 0xb8
    c458:	adc	r6, r1, r6
    c45c:	eor	r1, r8, lr
    c460:	and	r1, r3, r1
    c464:	eor	r0, r1, r0
    c468:	lsl	r1, r3, #30
    c46c:	str	r0, [sp, #196]	; 0xc4
    c470:	lsr	r0, r3, #28
    c474:	orr	r1, r1, r2, lsr #2
    c478:	orr	r0, r0, r2, lsl #4
    c47c:	eor	r0, r0, r1
    c480:	lsl	r1, r3, #25
    c484:	orr	r1, r1, r2, lsr #7
    c488:	eor	r8, r0, r1
    c48c:	eor	r0, sl, r4
    c490:	and	r1, sl, r4
    c494:	mov	sl, r4
    c498:	lsr	r4, r3, #2
    c49c:	and	r0, r2, r0
    c4a0:	orr	r4, r4, r2, lsl #30
    c4a4:	eor	r0, r0, r1
    c4a8:	lsr	r1, r2, #28
    c4ac:	orr	r1, r1, r3, lsl #4
    c4b0:	eor	r1, r1, r4
    c4b4:	lsr	r4, r3, #7
    c4b8:	orr	r4, r4, r2, lsl #25
    c4bc:	eor	r1, r1, r4
    c4c0:	ldr	r4, [sp, #172]	; 0xac
    c4c4:	adds	r0, r1, r0
    c4c8:	ldr	r1, [sp, #196]	; 0xc4
    c4cc:	adc	r1, r8, r1
    c4d0:	adds	r0, r0, r9
    c4d4:	str	r0, [sp, #196]	; 0xc4
    c4d8:	adc	r0, r1, r6
    c4dc:	mov	r1, lr
    c4e0:	str	r0, [sp, #192]	; 0xc0
    c4e4:	ldr	r0, [sp, #180]	; 0xb4
    c4e8:	str	sl, [sp, #180]	; 0xb4
    c4ec:	adds	r0, r9, r0
    c4f0:	str	r0, [sp, #188]	; 0xbc
    c4f4:	ldr	r0, [sp, #176]	; 0xb0
    c4f8:	str	lr, [sp, #176]	; 0xb0
    c4fc:	ldr	lr, [sp, #168]	; 0xa8
    c500:	adc	r8, r6, r0
    c504:	cmp	ip, #640	; 0x280
    c508:	bne	c360 <rb_sha512_process_block+0x434>
    c50c:	ldr	r6, [sp, #156]	; 0x9c
    c510:	mov	r0, r4
    c514:	ldr	r0, [sp, #212]	; 0xd4
    c518:	ldr	r9, [sp, #104]	; 0x68
    c51c:	mov	sl, lr
    c520:	ldr	sl, [sp, #100]	; 0x64
    c524:	adds	r6, lr, r6
    c528:	str	r6, [sp, #156]	; 0x9c
    c52c:	ldr	r6, [sp, #160]	; 0xa0
    c530:	adc	r6, r4, r6
    c534:	ldr	r4, [sp, #200]	; 0xc8
    c538:	str	r6, [sp, #160]	; 0xa0
    c53c:	ldr	r6, [sp, #148]	; 0x94
    c540:	adds	r6, r0, r6
    c544:	ldr	r0, [sp, #188]	; 0xbc
    c548:	str	r6, [sp, #148]	; 0x94
    c54c:	ldr	r6, [sp, #152]	; 0x98
    c550:	adc	r6, r4, r6
    c554:	str	r6, [sp, #152]	; 0x98
    c558:	ldr	r6, [sp, #140]	; 0x8c
    c55c:	adds	r6, r5, r6
    c560:	str	r6, [sp, #140]	; 0x8c
    c564:	ldr	r6, [sp, #144]	; 0x90
    c568:	adc	r6, r7, r6
    c56c:	ldr	r7, [sp, #108]	; 0x6c
    c570:	adds	r9, r0, r9
    c574:	ldr	r0, [sp, #184]	; 0xb8
    c578:	str	r6, [sp, #144]	; 0x90
    c57c:	ldr	r6, [sp, #208]	; 0xd0
    c580:	adc	r7, r8, r7
    c584:	mov	r5, r7
    c588:	ldr	r7, [sp, #136]	; 0x88
    c58c:	adds	r7, r0, r7
    c590:	ldr	r0, [sp, #196]	; 0xc4
    c594:	str	r7, [sp, #136]	; 0x88
    c598:	ldr	r7, [sp, #116]	; 0x74
    c59c:	adc	sl, r1, sl
    c5a0:	ldr	r1, [sp, #192]	; 0xc0
    c5a4:	adds	r7, r6, r7
    c5a8:	ldr	r6, [sp, #204]	; 0xcc
    c5ac:	str	r7, [sp, #116]	; 0x74
    c5b0:	ldr	r7, [sp, #132]	; 0x84
    c5b4:	adc	r7, r6, r7
    c5b8:	ldr	r6, [sp, #96]	; 0x60
    c5bc:	str	r7, [sp, #132]	; 0x84
    c5c0:	ldr	r7, [sp, #112]	; 0x70
    c5c4:	adds	r7, r2, r7
    c5c8:	ldr	r2, [sp, #128]	; 0x80
    c5cc:	str	r7, [sp, #112]	; 0x70
    c5d0:	ldr	r7, [sp, #92]	; 0x5c
    c5d4:	adc	r2, r3, r2
    c5d8:	str	r2, [sp, #128]	; 0x80
    c5dc:	ldr	r2, [sp, #124]	; 0x7c
    c5e0:	adds	r2, r0, r2
    c5e4:	ldr	r0, [sp, #120]	; 0x78
    c5e8:	str	r2, [sp, #124]	; 0x7c
    c5ec:	adc	r0, r1, r0
    c5f0:	subs	r7, r7, #16
    c5f4:	str	r0, [sp, #120]	; 0x78
    c5f8:	bne	c0a8 <rb_sha512_process_block+0x17c>
    c5fc:	ldr	r0, [sp, #28]
    c600:	ldr	r1, [sp, #124]	; 0x7c
    c604:	ldr	r2, [sp, #120]	; 0x78
    c608:	stm	r0, {r1, r2}
    c60c:	ldr	r0, [sp, #128]	; 0x80
    c610:	ldr	r1, [sp]
    c614:	ldr	r2, [sp, #112]	; 0x70
    c618:	str	r2, [r1]
    c61c:	str	r0, [r1, #4]
    c620:	ldr	r0, [sp, #132]	; 0x84
    c624:	ldr	r1, [sp, #4]
    c628:	ldr	r2, [sp, #116]	; 0x74
    c62c:	str	r2, [r1]
    c630:	str	r0, [r1, #4]
    c634:	ldr	r0, [sp, #8]
    c638:	ldr	r1, [sp, #136]	; 0x88
    c63c:	stm	r0, {r1, sl}
    c640:	ldr	r0, [sp, #12]
    c644:	str	r9, [r0]
    c648:	str	r5, [r0, #4]
    c64c:	ldr	r0, [sp, #144]	; 0x90
    c650:	ldr	r1, [sp, #16]
    c654:	ldr	r2, [sp, #140]	; 0x8c
    c658:	str	r2, [r1]
    c65c:	str	r0, [r1, #4]
    c660:	ldr	r0, [sp, #152]	; 0x98
    c664:	ldr	r1, [sp, #20]
    c668:	ldr	r2, [sp, #148]	; 0x94
    c66c:	str	r2, [r1]
    c670:	str	r0, [r1, #4]
    c674:	ldr	r0, [sp, #160]	; 0xa0
    c678:	ldr	r1, [sp, #24]
    c67c:	ldr	r2, [sp, #156]	; 0x9c
    c680:	str	r2, [r1]
    c684:	str	r0, [r1, #4]
    c688:	sub	sp, fp, #28
    c68c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c690:	.word	0x0000e510

0000c694 <rb_init_bh>:
    c694:	push	{fp, lr}
    c698:	mov	fp, sp
    c69c:	mov	r0, #1
    c6a0:	mov	r1, #12
    c6a4:	bl	4e9c <calloc@plt>
    c6a8:	cmp	r0, #0
    c6ac:	ldrne	r1, [pc, #12]	; c6c0 <rb_init_bh+0x2c>
    c6b0:	addne	r1, pc, r1
    c6b4:	strne	r0, [r1]
    c6b8:	popne	{fp, pc}
    c6bc:	bl	51fc <rb_outofmemory@plt>
    c6c0:	.word	0x00033248

0000c6c4 <rb_bh_create>:
    c6c4:	push	{r4, r5, r6, r7, fp, lr}
    c6c8:	add	fp, sp, #16
    c6cc:	cmp	r0, #0
    c6d0:	beq	c794 <rb_bh_create+0xd0>
    c6d4:	mov	r6, r1
    c6d8:	cmp	r1, #0
    c6dc:	ble	c794 <rb_bh_create+0xd0>
    c6e0:	mov	r7, r0
    c6e4:	cmp	r0, #11
    c6e8:	bls	c7a8 <rb_bh_create+0xe4>
    c6ec:	mov	r0, #1
    c6f0:	mov	r1, #48	; 0x30
    c6f4:	mov	r5, r2
    c6f8:	bl	4e9c <calloc@plt>
    c6fc:	cmp	r0, #0
    c700:	beq	c7a4 <rb_bh_create+0xe0>
    c704:	mov	r4, r0
    c708:	cmp	r5, #0
    c70c:	str	r7, [r0, #12]
    c710:	str	r6, [r0, #16]
    c714:	beq	c73c <rb_bh_create+0x78>
    c718:	mov	r0, r5
    c71c:	bl	5070 <strlen@plt>
    c720:	add	r0, r0, #1
    c724:	bl	5214 <malloc@plt>
    c728:	cmp	r0, #0
    c72c:	beq	c7a4 <rb_bh_create+0xe0>
    c730:	mov	r1, r5
    c734:	bl	5124 <strcpy@plt>
    c738:	str	r0, [r4, #44]	; 0x2c
    c73c:	ldr	r0, [pc, #116]	; c7b8 <rb_bh_create+0xf4>
    c740:	mov	r1, #0
    c744:	ldr	r0, [pc, r0]
    c748:	str	r1, [r4, #4]
    c74c:	str	r4, [r4]
    c750:	ldr	r1, [r0]
    c754:	cmp	r1, #0
    c758:	str	r1, [r4, #8]
    c75c:	beq	c76c <rb_bh_create+0xa8>
    c760:	add	r1, r1, #4
    c764:	str	r4, [r1]
    c768:	b	c77c <rb_bh_create+0xb8>
    c76c:	mov	r1, r0
    c770:	ldr	r2, [r1, #4]!
    c774:	cmp	r2, #0
    c778:	streq	r4, [r1]
    c77c:	str	r4, [r0]
    c780:	ldr	r1, [r0, #8]
    c784:	add	r1, r1, #1
    c788:	str	r1, [r0, #8]
    c78c:	mov	r0, r4
    c790:	pop	{r4, r5, r6, r7, fp, pc}
    c794:	ldr	r0, [pc, #32]	; c7bc <rb_bh_create+0xf8>
    c798:	mov	r1, #147	; 0x93
    c79c:	add	r0, pc, r0
    c7a0:	bl	c7c4 <_rb_bh_fail>
    c7a4:	bl	51fc <rb_outofmemory@plt>
    c7a8:	ldr	r0, [pc, #16]	; c7c0 <rb_bh_create+0xfc>
    c7ac:	mov	r1, #151	; 0x97
    c7b0:	add	r0, pc, r0
    c7b4:	bl	c7c4 <_rb_bh_fail>
    c7b8:	.word	0x000331b4
    c7bc:	.word	0x0000e4a4
    c7c0:	.word	0x0000e4c2

0000c7c4 <_rb_bh_fail>:
    c7c4:	push	{fp, lr}
    c7c8:	mov	fp, sp
    c7cc:	mov	r3, r1
    c7d0:	mov	r1, r0
    c7d4:	ldr	r0, [pc, #16]	; c7ec <_rb_bh_fail+0x28>
    c7d8:	ldr	r2, [pc, #16]	; c7f0 <_rb_bh_fail+0x2c>
    c7dc:	add	r0, pc, r0
    c7e0:	add	r2, pc, r2
    c7e4:	bl	519c <rb_lib_log@plt>
    c7e8:	bl	4ca4 <abort@plt>
    c7ec:	.word	0x0000e54a
    c7f0:	.word	0x0000e489

0000c7f4 <rb_bh_alloc>:
    c7f4:	push	{fp, lr}
    c7f8:	mov	fp, sp
    c7fc:	cmp	r0, #0
    c800:	beq	c81c <rb_bh_alloc+0x28>
    c804:	ldr	r1, [r0, #12]
    c808:	mov	r0, #1
    c80c:	bl	4e9c <calloc@plt>
    c810:	cmp	r0, #0
    c814:	popne	{fp, pc}
    c818:	bl	51fc <rb_outofmemory@plt>
    c81c:	ldr	r0, [pc, #8]	; c82c <rb_bh_alloc+0x38>
    c820:	mov	r1, #186	; 0xba
    c824:	add	r0, pc, r0
    c828:	bl	c7c4 <_rb_bh_fail>
    c82c:	.word	0x0000e489

0000c830 <rb_bh_free>:
    c830:	push	{fp, lr}
    c834:	mov	fp, sp
    c838:	cmp	r0, #0
    c83c:	beq	c858 <rb_bh_free+0x28>
    c840:	cmp	r1, #0
    c844:	beq	c86c <rb_bh_free+0x3c>
    c848:	mov	r0, r1
    c84c:	bl	4f8c <free@plt>
    c850:	mov	r0, #0
    c854:	pop	{fp, pc}
    c858:	ldr	r0, [pc, #32]	; c880 <rb_bh_free+0x50>
    c85c:	add	r0, pc, r0
    c860:	bl	519c <rb_lib_log@plt>
    c864:	mov	r0, #1
    c868:	pop	{fp, pc}
    c86c:	ldr	r0, [pc, #16]	; c884 <rb_bh_free+0x54>
    c870:	add	r0, pc, r0
    c874:	bl	519c <rb_lib_log@plt>
    c878:	mov	r0, #1
    c87c:	pop	{fp, pc}
    c880:	.word	0x0000e46f
    c884:	.word	0x0000e47b

0000c888 <rb_bh_destroy>:
    c888:	push	{r4, r5, fp, lr}
    c88c:	add	fp, sp, #8
    c890:	cmp	r0, #0
    c894:	beq	c8c0 <rb_bh_destroy+0x38>
    c898:	ldr	r1, [r0, #8]
    c89c:	mov	r4, r0
    c8a0:	ldr	r2, [r0, #4]
    c8a4:	ldr	r0, [pc, #108]	; c918 <rb_bh_destroy+0x90>
    c8a8:	ldr	r0, [pc, r0]
    c8ac:	cmp	r1, #0
    c8b0:	beq	c8cc <rb_bh_destroy+0x44>
    c8b4:	str	r2, [r1, #4]
    c8b8:	ldr	r2, [r4, #4]
    c8bc:	b	c8d0 <rb_bh_destroy+0x48>
    c8c0:	mov	r5, #1
    c8c4:	mov	r0, r5
    c8c8:	pop	{r4, r5, fp, pc}
    c8cc:	str	r2, [r0, #4]
    c8d0:	cmp	r2, #0
    c8d4:	mov	r3, r0
    c8d8:	mov	r5, #0
    c8dc:	addne	r3, r2, #8
    c8e0:	str	r1, [r3]
    c8e4:	str	r5, [r4, #4]
    c8e8:	str	r5, [r4, #8]
    c8ec:	ldr	r1, [r0, #8]
    c8f0:	sub	r1, r1, #1
    c8f4:	str	r1, [r0, #8]
    c8f8:	ldr	r0, [r4, #44]	; 0x2c
    c8fc:	cmp	r0, #0
    c900:	beq	c908 <rb_bh_destroy+0x80>
    c904:	bl	4f8c <free@plt>
    c908:	mov	r0, r4
    c90c:	bl	4f8c <free@plt>
    c910:	mov	r0, r5
    c914:	pop	{r4, r5, fp, pc}
    c918:	.word	0x00033050

0000c91c <rb_bh_usage>:
    c91c:	cmp	r1, #0
    c920:	movne	r0, #0
    c924:	strne	r0, [r1]
    c928:	cmp	r2, #0
    c92c:	movne	r0, #0
    c930:	strne	r0, [r2]
    c934:	ldr	r0, [sp]
    c938:	cmp	r3, #0
    c93c:	movne	r1, #0
    c940:	strne	r1, [r3]
    c944:	cmp	r0, #0
    c948:	ldrne	r1, [pc, #8]	; c958 <rb_bh_usage+0x3c>
    c94c:	addne	r1, pc, r1
    c950:	strne	r1, [r0]
    c954:	bx	lr
    c958:	.word	0x0000e3be

0000c95c <rb_bh_usage_all>:
    c95c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    c960:	add	fp, sp, #24
    c964:	sub	sp, sp, #8
    c968:	cmp	r0, #0
    c96c:	beq	c9d8 <rb_bh_usage_all+0x7c>
    c970:	mov	r5, r0
    c974:	ldr	r0, [pc, #100]	; c9e0 <rb_bh_usage_all+0x84>
    c978:	ldr	r0, [pc, r0]
    c97c:	ldr	r6, [r0]
    c980:	cmp	r6, #0
    c984:	beq	c9d8 <rb_bh_usage_all+0x7c>
    c988:	ldr	r7, [pc, #84]	; c9e4 <rb_bh_usage_all+0x88>
    c98c:	mov	r8, r1
    c990:	add	r7, pc, r7
    c994:	ldr	r0, [r6]
    c998:	ldr	r2, [r0, #12]
    c99c:	ldr	r3, [r0, #16]
    c9a0:	ldr	r4, [r0, #28]
    c9a4:	ldr	r1, [r0, #40]	; 0x28
    c9a8:	ldr	r0, [r0, #44]	; 0x2c
    c9ac:	cmp	r0, #0
    c9b0:	movne	r7, r0
    c9b4:	mul	r0, r3, r4
    c9b8:	stm	sp, {r7, r8}
    c9bc:	mul	r3, r0, r2
    c9c0:	sub	r0, r0, r1
    c9c4:	mul	r2, r0, r2
    c9c8:	blx	r5
    c9cc:	ldr	r6, [r6, #8]
    c9d0:	cmp	r6, #0
    c9d4:	bne	c994 <rb_bh_usage_all+0x38>
    c9d8:	sub	sp, fp, #24
    c9dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    c9e0:	.word	0x00032f80
    c9e4:	.word	0x0000e387

0000c9e8 <rb_bh_total_usage>:
    c9e8:	push	{r4, r5, r6, sl, fp, lr}
    c9ec:	add	fp, sp, #16
    c9f0:	ldr	r2, [pc, #100]	; ca5c <rb_bh_total_usage+0x74>
    c9f4:	ldr	r2, [pc, r2]
    c9f8:	ldr	r2, [r2]
    c9fc:	cmp	r2, #0
    ca00:	beq	ca40 <rb_bh_total_usage+0x58>
    ca04:	mov	lr, #0
    ca08:	mov	ip, #0
    ca0c:	ldr	r3, [r2]
    ca10:	ldr	r2, [r2, #8]
    ca14:	ldr	r5, [r3, #16]
    ca18:	ldr	r6, [r3, #28]
    ca1c:	ldr	r4, [r3, #12]
    ca20:	ldr	r3, [r3, #40]	; 0x28
    ca24:	cmp	r2, #0
    ca28:	mul	r5, r5, r6
    ca2c:	sub	r3, r5, r3
    ca30:	mla	lr, r5, r4, lr
    ca34:	mla	ip, r3, r4, ip
    ca38:	bne	ca0c <rb_bh_total_usage+0x24>
    ca3c:	b	ca48 <rb_bh_total_usage+0x60>
    ca40:	mov	ip, #0
    ca44:	mov	lr, #0
    ca48:	cmp	r0, #0
    ca4c:	strne	lr, [r0]
    ca50:	cmp	r1, #0
    ca54:	strne	ip, [r1]
    ca58:	pop	{r4, r5, r6, sl, fp, pc}
    ca5c:	.word	0x00032f04

0000ca60 <rb_get_sockerr>:
    ca60:	push	{r4, r5, r6, r7, fp, lr}
    ca64:	add	fp, sp, #16
    ca68:	sub	sp, sp, #16
    ca6c:	mov	r5, r0
    ca70:	mov	r0, #0
    ca74:	str	r0, [sp, #12]
    ca78:	mov	r0, #4
    ca7c:	str	r0, [sp, #8]
    ca80:	ldrb	r7, [r5, #17]
    ca84:	bl	552c <__errno_location@plt>
    ca88:	ldr	r6, [r0]
    ca8c:	tst	r7, #4
    ca90:	bne	caa0 <rb_get_sockerr+0x40>
    ca94:	mov	r0, r6
    ca98:	sub	sp, fp, #16
    ca9c:	pop	{r4, r5, r6, r7, fp, pc}
    caa0:	mov	r4, r0
    caa4:	ldr	r0, [r5, #12]
    caa8:	add	r1, sp, #8
    caac:	add	r3, sp, #12
    cab0:	mov	r2, #4
    cab4:	str	r1, [sp]
    cab8:	mov	r1, #1
    cabc:	bl	54c0 <getsockopt@plt>
    cac0:	mov	r1, r0
    cac4:	ldr	r0, [sp, #12]
    cac8:	cmp	r0, #0
    cacc:	moveq	r0, r6
    cad0:	cmp	r1, #0
    cad4:	movne	r0, r6
    cad8:	str	r0, [r4]
    cadc:	sub	sp, fp, #16
    cae0:	pop	{r4, r5, r6, r7, fp, pc}

0000cae4 <rb_get_fd>:
    cae4:	cmp	r0, #0
    cae8:	ldrne	r0, [r0, #12]
    caec:	mvneq	r0, #0
    caf0:	bx	lr

0000caf4 <rb_getmaxconnect>:
    caf4:	ldr	r0, [pc, #8]	; cb04 <rb_getmaxconnect+0x10>
    caf8:	ldr	r0, [pc, r0]
    cafc:	ldr	r0, [r0]
    cb00:	bx	lr
    cb04:	.word	0x00020868

0000cb08 <rb_set_buffers>:
    cb08:	push	{r4, r5, fp, lr}
    cb0c:	add	fp, sp, #8
    cb10:	sub	sp, sp, #8
    cb14:	cmp	r0, #0
    cb18:	str	r1, [sp, #4]
    cb1c:	beq	cb48 <rb_set_buffers+0x40>
    cb20:	mov	r4, r0
    cb24:	ldr	r0, [r0, #12]
    cb28:	mov	r5, #4
    cb2c:	add	r3, sp, #4
    cb30:	mov	r1, #1
    cb34:	mov	r2, #8
    cb38:	str	r5, [sp]
    cb3c:	bl	54e4 <setsockopt@plt>
    cb40:	cmp	r0, #0
    cb44:	beq	cb54 <rb_set_buffers+0x4c>
    cb48:	mov	r0, #0
    cb4c:	sub	sp, fp, #8
    cb50:	pop	{r4, r5, fp, pc}
    cb54:	ldr	r0, [r4, #12]
    cb58:	add	r3, sp, #4
    cb5c:	mov	r1, #1
    cb60:	mov	r2, #7
    cb64:	str	r5, [sp]
    cb68:	bl	54e4 <setsockopt@plt>
    cb6c:	clz	r0, r0
    cb70:	lsr	r0, r0, #5
    cb74:	sub	sp, fp, #8
    cb78:	pop	{r4, r5, fp, pc}

0000cb7c <rb_set_nb>:
    cb7c:	push	{r4, r5, fp, lr}
    cb80:	add	fp, sp, #8
    cb84:	cmp	r0, #0
    cb88:	beq	cbe8 <rb_set_nb+0x6c>
    cb8c:	ldr	r4, [r0, #12]
    cb90:	ldr	r1, [pc, #92]	; cbf4 <rb_set_nb+0x78>
    cb94:	add	r1, pc, r1
    cb98:	ldr	r1, [r1, #40]	; 0x28
    cb9c:	blx	r1
    cba0:	mov	r5, r0
    cba4:	cmp	r0, #0
    cba8:	bne	cbec <rb_set_nb+0x70>
    cbac:	mov	r0, r4
    cbb0:	mov	r1, #3
    cbb4:	mov	r2, #0
    cbb8:	mov	r5, #0
    cbbc:	bl	5448 <fcntl@plt>
    cbc0:	cmn	r0, #1
    cbc4:	beq	cbec <rb_set_nb+0x70>
    cbc8:	orr	r2, r0, #2048	; 0x800
    cbcc:	mov	r0, r4
    cbd0:	mov	r1, #4
    cbd4:	bl	5448 <fcntl@plt>
    cbd8:	mvn	r1, #0
    cbdc:	subs	r0, r0, r1
    cbe0:	movwne	r0, #1
    cbe4:	pop	{r4, r5, fp, pc}
    cbe8:	mov	r5, #0
    cbec:	mov	r0, r5
    cbf0:	pop	{r4, r5, fp, pc}
    cbf4:	.word	0x00032d7c

0000cbf8 <rb_setup_fd>:
    cbf8:	ldr	r1, [pc, #8]	; cc08 <rb_setup_fd+0x10>
    cbfc:	add	r1, pc, r1
    cc00:	ldr	r1, [r1, #40]	; 0x28
    cc04:	bx	r1
    cc08:	.word	0x00032d14

0000cc0c <rb_settimeout>:
    cc0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    cc10:	add	fp, sp, #24
    cc14:	cmp	r0, #0
    cc18:	beq	cd18 <rb_settimeout+0x10c>
    cc1c:	ldr	r5, [r0, #44]	; 0x2c
    cc20:	mov	r7, r2
    cc24:	mov	r4, r0
    cc28:	cmp	r2, #0
    cc2c:	beq	cca8 <rb_settimeout+0x9c>
    cc30:	mov	r6, r3
    cc34:	mov	r8, r1
    cc38:	cmp	r5, #0
    cc3c:	bne	cc5c <rb_settimeout+0x50>
    cc40:	mov	r0, #1
    cc44:	mov	r1, #28
    cc48:	bl	4e9c <calloc@plt>
    cc4c:	cmp	r0, #0
    cc50:	beq	cd80 <rb_settimeout+0x174>
    cc54:	mov	r5, r0
    cc58:	str	r0, [r4, #44]	; 0x2c
    cc5c:	str	r4, [r5]
    cc60:	bl	507c <rb_current_time@plt>
    cc64:	mov	r1, #0
    cc68:	add	r0, r0, r8
    cc6c:	str	r6, [r5, #24]
    cc70:	str	r7, [r5, #20]
    cc74:	str	r1, [r5, #8]
    cc78:	str	r0, [r5, #16]
    cc7c:	str	r5, [r5, #4]
    cc80:	add	r0, r5, #4
    cc84:	ldr	r4, [pc, #256]	; cd8c <rb_settimeout+0x180>
    cc88:	add	r4, pc, r4
    cc8c:	ldr	r1, [r4, #44]	; 0x2c
    cc90:	cmp	r1, #0
    cc94:	str	r1, [r5, #12]
    cc98:	beq	cccc <rb_settimeout+0xc0>
    cc9c:	add	r1, r1, #4
    cca0:	str	r0, [r1]
    cca4:	b	ccdc <rb_settimeout+0xd0>
    cca8:	cmp	r5, #0
    ccac:	beq	cd18 <rb_settimeout+0x10c>
    ccb0:	ldr	r0, [r5, #12]
    ccb4:	ldr	r1, [r5, #8]
    ccb8:	cmp	r0, #0
    ccbc:	beq	cd1c <rb_settimeout+0x110>
    ccc0:	str	r1, [r0, #4]
    ccc4:	ldr	r1, [r5, #8]
    ccc8:	b	cd28 <rb_settimeout+0x11c>
    cccc:	mov	r1, r4
    ccd0:	ldr	r2, [r1, #48]!	; 0x30
    ccd4:	cmp	r2, #0
    ccd8:	streq	r0, [r1]
    ccdc:	str	r0, [r4, #44]	; 0x2c
    cce0:	ldr	r1, [r4, #52]	; 0x34
    cce4:	ldr	r0, [r4, #4]
    cce8:	add	r1, r1, #1
    ccec:	cmp	r0, #0
    ccf0:	str	r1, [r4, #52]	; 0x34
    ccf4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    ccf8:	ldr	r1, [pc, #144]	; cd90 <rb_settimeout+0x184>
    ccfc:	mov	r2, #0
    cd00:	mov	r3, #5
    cd04:	ldr	r1, [pc, r1]
    cd08:	ldr	r0, [pc, #132]	; cd94 <rb_settimeout+0x188>
    cd0c:	add	r0, pc, r0
    cd10:	bl	5358 <rb_event_add@plt>
    cd14:	str	r0, [r4, #4]
    cd18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cd1c:	ldr	r2, [pc, #96]	; cd84 <rb_settimeout+0x178>
    cd20:	add	r2, pc, r2
    cd24:	str	r1, [r2, #48]	; 0x30
    cd28:	ldr	r6, [pc, #88]	; cd88 <rb_settimeout+0x17c>
    cd2c:	cmp	r1, #0
    cd30:	add	r2, r1, #8
    cd34:	mov	r7, #0
    cd38:	add	r6, pc, r6
    cd3c:	addeq	r2, r6, #44	; 0x2c
    cd40:	str	r0, [r2]
    cd44:	str	r7, [r5, #8]
    cd48:	str	r7, [r5, #12]
    cd4c:	ldr	r0, [r6, #52]	; 0x34
    cd50:	sub	r0, r0, #1
    cd54:	str	r0, [r6, #52]	; 0x34
    cd58:	mov	r0, r5
    cd5c:	bl	4f8c <free@plt>
    cd60:	str	r7, [r4, #44]	; 0x2c
    cd64:	ldr	r0, [r6, #52]	; 0x34
    cd68:	cmp	r0, #0
    cd6c:	bne	cd18 <rb_settimeout+0x10c>
    cd70:	ldr	r0, [r6, #4]
    cd74:	bl	4d64 <rb_event_delete@plt>
    cd78:	str	r7, [r6, #4]
    cd7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cd80:	bl	51fc <rb_outofmemory@plt>
    cd84:	.word	0x00032bf0
    cd88:	.word	0x00032bd8
    cd8c:	.word	0x00032c88
    cd90:	.word	0x0002060c
    cd94:	.word	0x0000e040

0000cd98 <rb_checktimeouts>:
    cd98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd9c:	add	fp, sp, #28
    cda0:	sub	sp, sp, #4
    cda4:	ldr	r8, [pc, #184]	; ce64 <rb_checktimeouts+0xcc>
    cda8:	add	r8, pc, r8
    cdac:	ldr	r7, [r8, #44]	; 0x2c
    cdb0:	cmp	r7, #0
    cdb4:	beq	ce5c <rb_checktimeouts+0xc4>
    cdb8:	mov	r9, #0
    cdbc:	b	ce08 <rb_checktimeouts+0x70>
    cdc0:	str	r1, [r8, #48]	; 0x30
    cdc4:	cmp	r1, #0
    cdc8:	add	r2, r1, #8
    cdcc:	addeq	r2, r8, #44	; 0x2c
    cdd0:	str	r0, [r2]
    cdd4:	str	r9, [r5, #8]
    cdd8:	str	r9, [r5, #12]
    cddc:	ldr	r0, [r8, #52]	; 0x34
    cde0:	sub	r0, r0, #1
    cde4:	str	r0, [r8, #52]	; 0x34
    cde8:	mov	r0, r5
    cdec:	str	r9, [r4, #44]	; 0x2c
    cdf0:	bl	4f8c <free@plt>
    cdf4:	mov	r0, r4
    cdf8:	mov	r1, r6
    cdfc:	blx	sl
    ce00:	cmp	r7, #0
    ce04:	beq	ce5c <rb_checktimeouts+0xc4>
    ce08:	ldr	r5, [r7]
    ce0c:	ldr	r7, [r7, #8]
    ce10:	ldr	r4, [r5]
    ce14:	cmp	r4, #0
    ce18:	beq	ce00 <rb_checktimeouts+0x68>
    ce1c:	ldrb	r0, [r4, #16]
    ce20:	tst	r0, #1
    ce24:	beq	ce00 <rb_checktimeouts+0x68>
    ce28:	ldr	r6, [r5, #16]
    ce2c:	bl	507c <rb_current_time@plt>
    ce30:	cmp	r6, r0
    ce34:	bge	ce00 <rb_checktimeouts+0x68>
    ce38:	ldr	r0, [r5, #12]
    ce3c:	ldr	r1, [r5, #8]
    ce40:	ldr	sl, [r5, #20]
    ce44:	ldr	r6, [r5, #24]
    ce48:	cmp	r0, #0
    ce4c:	beq	cdc0 <rb_checktimeouts+0x28>
    ce50:	str	r1, [r0, #4]
    ce54:	ldr	r1, [r5, #8]
    ce58:	b	cdc4 <rb_checktimeouts+0x2c>
    ce5c:	sub	sp, fp, #28
    ce60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce64:	.word	0x00032b68

0000ce68 <rb_bind>:
    ce68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    ce6c:	add	fp, sp, #24
    ce70:	sub	sp, sp, #16
    ce74:	mov	r6, r0
    ce78:	mov	r0, #1
    ce7c:	mov	r5, r1
    ce80:	mov	r7, #4
    ce84:	add	r3, sp, #4
    ce88:	mov	r1, #1
    ce8c:	mov	r2, #2
    ce90:	str	r0, [sp, #4]
    ce94:	ldr	r0, [r6, #12]
    ce98:	str	r7, [sp]
    ce9c:	bl	54e4 <setsockopt@plt>
    cea0:	cmp	r0, #0
    cea4:	beq	ced8 <rb_bind+0x70>
    cea8:	mov	r4, r0
    ceac:	mov	r0, #0
    ceb0:	ldr	r8, [r6, #12]
    ceb4:	str	r7, [sp, #8]
    ceb8:	str	r0, [sp, #12]
    cebc:	ldrb	r5, [r6, #17]
    cec0:	bl	552c <__errno_location@plt>
    cec4:	ldr	r7, [r0]
    cec8:	tst	r5, #4
    cecc:	bne	cf04 <rb_bind+0x9c>
    ced0:	mov	r0, r7
    ced4:	b	cf40 <rb_bind+0xd8>
    ced8:	ldrh	r0, [r5]
    cedc:	mov	r2, #28
    cee0:	mov	r1, r5
    cee4:	cmp	r0, #2
    cee8:	ldr	r0, [r6, #12]
    ceec:	movweq	r2, #16
    cef0:	bl	5190 <bind@plt>
    cef4:	mov	r4, r0
    cef8:	mov	r0, r4
    cefc:	sub	sp, fp, #24
    cf00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cf04:	mov	r6, r0
    cf08:	add	r0, sp, #8
    cf0c:	add	r3, sp, #12
    cf10:	mov	r1, #1
    cf14:	mov	r2, #4
    cf18:	str	r0, [sp]
    cf1c:	mov	r0, r8
    cf20:	bl	54c0 <getsockopt@plt>
    cf24:	mov	r1, r0
    cf28:	ldr	r0, [sp, #12]
    cf2c:	cmp	r0, #0
    cf30:	moveq	r0, r7
    cf34:	cmp	r1, #0
    cf38:	movne	r0, r7
    cf3c:	str	r0, [r6]
    cf40:	bl	4c80 <strerror@plt>
    cf44:	mov	r2, r0
    cf48:	ldr	r0, [pc, #20]	; cf64 <rb_bind+0xfc>
    cf4c:	mov	r1, r8
    cf50:	add	r0, pc, r0
    cf54:	bl	519c <rb_lib_log@plt>
    cf58:	mov	r0, r4
    cf5c:	sub	sp, fp, #24
    cf60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cf64:	.word	0x0000dfc3

0000cf68 <rb_sctp_bindx>:
    cf68:	mvn	r0, #0
    cf6c:	bx	lr

0000cf70 <rb_inet_get_proto>:
    cf70:	mov	r0, #6
    cf74:	bx	lr

0000cf78 <rb_accept_tcp>:
    cf78:	push	{r4, r5, r6, r7, fp, lr}
    cf7c:	add	fp, sp, #16
    cf80:	cmp	r0, #0
    cf84:	beq	cfcc <rb_accept_tcp+0x54>
    cf88:	mov	r6, r1
    cf8c:	mov	r5, r0
    cf90:	mov	r0, #1
    cf94:	mov	r1, #144	; 0x90
    cf98:	mov	r4, r3
    cf9c:	mov	r7, r2
    cfa0:	bl	4e9c <calloc@plt>
    cfa4:	cmp	r0, #0
    cfa8:	beq	cfd0 <rb_accept_tcp+0x58>
    cfac:	str	r0, [r5, #52]	; 0x34
    cfb0:	str	r7, [r0, #132]	; 0x84
    cfb4:	str	r6, [r0, #136]	; 0x88
    cfb8:	str	r4, [r0, #140]	; 0x8c
    cfbc:	mov	r0, r5
    cfc0:	mov	r1, #0
    cfc4:	pop	{r4, r5, r6, r7, fp, lr}
    cfc8:	b	cfd4 <rb_accept_tryaccept>
    cfcc:	pop	{r4, r5, r6, r7, fp, pc}
    cfd0:	bl	51fc <rb_outofmemory@plt>

0000cfd4 <rb_accept_tryaccept>:
    cfd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfd8:	add	fp, sp, #28
    cfdc:	sub	sp, sp, #4
    cfe0:	vpush	{d8-d9}
    cfe4:	sub	sp, sp, #160	; 0xa0
    cfe8:	vmov.i32	q4, #0	; 0x00000000
    cfec:	add	r5, sp, #32
    cff0:	mov	r4, r0
    cff4:	mov	r1, #112	; 0x70
    cff8:	add	r2, sp, #28
    cffc:	add	r0, r5, #16
    d000:	add	sl, r5, #80	; 0x50
    d004:	add	r8, r5, #96	; 0x60
    d008:	str	r0, [sp, #24]
    d00c:	vst1.64	{d8-d9}, [r0]
    d010:	add	r0, r5, #32
    d014:	vst1.64	{d8-d9}, [sl]
    d018:	vst1.64	{d8-d9}, [r8]
    d01c:	str	r0, [sp, #20]
    d020:	vst1.64	{d8-d9}, [r0]
    d024:	add	r0, r5, #48	; 0x30
    d028:	str	r0, [sp, #16]
    d02c:	vst1.64	{d8-d9}, [r0]
    d030:	add	r0, r5, #64	; 0x40
    d034:	str	r0, [sp, #12]
    d038:	vst1.64	{d8-d9}, [r0]
    d03c:	mov	r0, r5
    d040:	vst1.64	{d8-d9}, [r0], r1
    d044:	mov	r1, r5
    d048:	vst1.64	{d8-d9}, [r0]
    d04c:	mov	r0, #128	; 0x80
    d050:	str	r0, [sp, #28]
    d054:	ldr	r0, [r4, #12]
    d058:	bl	5004 <accept@plt>
    d05c:	cmp	r0, #0
    d060:	bmi	d248 <rb_accept_tryaccept+0x274>
    d064:	mov	r9, r0
    d068:	add	r0, r5, #8
    d06c:	str	r0, [sp, #8]
    d070:	b	d0e8 <rb_accept_tryaccept+0x114>
    d074:	ldr	r0, [pc, #516]	; d280 <rb_accept_tryaccept+0x2ac>
    d078:	mov	r1, r9
    d07c:	add	r0, pc, r0
    d080:	bl	519c <rb_lib_log@plt>
    d084:	mov	r0, r9
    d088:	bl	51c0 <close@plt>
    d08c:	mov	r0, r5
    d090:	mov	r1, #112	; 0x70
    d094:	vst1.64	{d8-d9}, [r8]
    d098:	vst1.64	{d8-d9}, [sl]
    d09c:	add	r2, sp, #28
    d0a0:	vst1.64	{d8-d9}, [r0], r1
    d0a4:	mov	r1, r5
    d0a8:	vst1.64	{d8-d9}, [r0]
    d0ac:	ldr	r0, [sp, #12]
    d0b0:	vst1.64	{d8-d9}, [r0]
    d0b4:	ldr	r0, [sp, #16]
    d0b8:	vst1.64	{d8-d9}, [r0]
    d0bc:	ldr	r0, [sp, #20]
    d0c0:	vst1.64	{d8-d9}, [r0]
    d0c4:	ldr	r0, [sp, #24]
    d0c8:	vst1.64	{d8-d9}, [r0]
    d0cc:	mov	r0, #128	; 0x80
    d0d0:	str	r0, [sp, #28]
    d0d4:	ldr	r0, [r4, #12]
    d0d8:	bl	5004 <accept@plt>
    d0dc:	mov	r9, r0
    d0e0:	cmp	r0, #0
    d0e4:	bmi	d248 <rb_accept_tryaccept+0x274>
    d0e8:	ldrb	r0, [r4, #17]
    d0ec:	ldr	r2, [pc, #392]	; d27c <rb_accept_tryaccept+0x2a8>
    d0f0:	and	r0, r0, #128	; 0x80
    d0f4:	add	r2, pc, r2
    d0f8:	orr	r1, r0, #4
    d0fc:	mov	r0, r9
    d100:	bl	52e0 <rb_open@plt>
    d104:	cmp	r0, #0
    d108:	beq	d074 <rb_accept_tryaccept+0xa0>
    d10c:	mov	r6, r0
    d110:	ldr	r7, [r0, #12]
    d114:	ldr	r0, [pc, #368]	; d28c <rb_accept_tryaccept+0x2b8>
    d118:	add	r0, pc, r0
    d11c:	ldr	r1, [r0, #40]	; 0x28
    d120:	mov	r0, r6
    d124:	blx	r1
    d128:	cmp	r0, #0
    d12c:	bne	d160 <rb_accept_tryaccept+0x18c>
    d130:	mov	r0, r7
    d134:	mov	r1, #3
    d138:	mov	r2, #0
    d13c:	bl	5448 <fcntl@plt>
    d140:	cmn	r0, #1
    d144:	beq	d21c <rb_accept_tryaccept+0x248>
    d148:	orr	r2, r0, #2048	; 0x800
    d14c:	mov	r0, r7
    d150:	mov	r1, #4
    d154:	bl	5448 <fcntl@plt>
    d158:	cmn	r0, #1
    d15c:	beq	d21c <rb_accept_tryaccept+0x248>
    d160:	ldr	r0, [sp, #40]	; 0x28
    d164:	ldr	r1, [sp, #44]	; 0x2c
    d168:	orrs	r0, r0, r1
    d16c:	bne	d1a4 <rb_accept_tryaccept+0x1d0>
    d170:	ldrh	r0, [sp, #32]
    d174:	cmp	r0, #10
    d178:	ldreq	r0, [sp, #48]	; 0x30
    d17c:	cmneq	r0, #65536	; 0x10000
    d180:	bne	d1a4 <rb_accept_tryaccept+0x1d0>
    d184:	mov	r0, #2
    d188:	mov	r1, #0
    d18c:	strh	r0, [sp, #32]
    d190:	ldr	r0, [sp, #52]	; 0x34
    d194:	str	r0, [sp, #36]	; 0x24
    d198:	ldr	r0, [sp, #8]
    d19c:	str	r1, [r0, #4]
    d1a0:	str	r1, [r0]
    d1a4:	ldr	r0, [r4, #52]	; 0x34
    d1a8:	ldr	r7, [r0, #136]	; 0x88
    d1ac:	cmp	r7, #0
    d1b0:	beq	d1d0 <rb_accept_tryaccept+0x1fc>
    d1b4:	ldr	r3, [r0, #140]	; 0x8c
    d1b8:	ldr	r2, [sp, #28]
    d1bc:	mov	r0, r6
    d1c0:	mov	r1, r5
    d1c4:	blx	r7
    d1c8:	cmp	r0, #0
    d1cc:	beq	d08c <rb_accept_tryaccept+0xb8>
    d1d0:	ldrb	r0, [r4, #17]
    d1d4:	tst	r0, #32
    d1d8:	bne	d204 <rb_accept_tryaccept+0x230>
    d1dc:	ldr	r0, [r4, #52]	; 0x34
    d1e0:	ldr	r3, [sp, #28]
    d1e4:	mov	r1, #0
    d1e8:	mov	r2, r5
    d1ec:	ldr	r7, [r0, #132]	; 0x84
    d1f0:	ldr	r0, [r0, #140]	; 0x8c
    d1f4:	str	r0, [sp]
    d1f8:	mov	r0, r6
    d1fc:	blx	r7
    d200:	b	d08c <rb_accept_tryaccept+0xb8>
    d204:	ldr	r3, [sp, #28]
    d208:	mov	r0, r4
    d20c:	mov	r1, r6
    d210:	mov	r2, r5
    d214:	bl	11554 <rb_ssl_accept_setup>
    d218:	b	d08c <rb_accept_tryaccept+0xb8>
    d21c:	ldr	r1, [r6, #12]
    d220:	ldr	r0, [pc, #104]	; d290 <rb_accept_tryaccept+0x2bc>
    d224:	add	r0, pc, r0
    d228:	bl	519c <rb_lib_log@plt>
    d22c:	mov	r0, r6
    d230:	bl	5100 <rb_close@plt>
    d234:	ldr	r0, [sp, #40]	; 0x28
    d238:	ldr	r1, [sp, #44]	; 0x2c
    d23c:	orrs	r0, r0, r1
    d240:	beq	d170 <rb_accept_tryaccept+0x19c>
    d244:	b	d1a4 <rb_accept_tryaccept+0x1d0>
    d248:	ldr	r0, [pc, #52]	; d284 <rb_accept_tryaccept+0x2b0>
    d24c:	mov	r1, #1
    d250:	mov	r3, #0
    d254:	add	r0, pc, r0
    d258:	ldr	r7, [r0, #32]
    d25c:	ldr	r2, [pc, #36]	; d288 <rb_accept_tryaccept+0x2b4>
    d260:	mov	r0, r4
    d264:	add	r2, pc, r2
    d268:	blx	r7
    d26c:	sub	sp, fp, #48	; 0x30
    d270:	vpop	{d8-d9}
    d274:	add	sp, sp, #4
    d278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d27c:	.word	0x0000de5e
    d280:	.word	0x0000deea
    d284:	.word	0x000326bc
    d288:	.word	0xfffffd68
    d28c:	.word	0x000327f8
    d290:	.word	0x0000dd88

0000d294 <rb_connect_tcp>:
    d294:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    d298:	add	fp, sp, #24
    d29c:	cmp	r0, #0
    d2a0:	beq	d364 <rb_connect_tcp+0xd0>
    d2a4:	ldr	r8, [fp, #12]
    d2a8:	ldr	r9, [fp, #8]
    d2ac:	mov	r7, r1
    d2b0:	mov	r4, r0
    d2b4:	mov	r0, #1
    d2b8:	mov	r1, #268	; 0x10c
    d2bc:	mov	r5, r3
    d2c0:	mov	r6, r2
    d2c4:	bl	4e9c <calloc@plt>
    d2c8:	cmp	r0, #0
    d2cc:	beq	d458 <rb_connect_tcp+0x1c4>
    d2d0:	str	r0, [r4, #48]	; 0x30
    d2d4:	str	r5, [r0, #260]	; 0x104
    d2d8:	str	r9, [r0, #264]	; 0x108
    d2dc:	add	r0, r0, #128	; 0x80
    d2e0:	mov	r1, r7
    d2e4:	mov	r2, #128	; 0x80
    d2e8:	bl	5094 <memcpy@plt>
    d2ec:	cmp	r6, #0
    d2f0:	beq	d318 <rb_connect_tcp+0x84>
    d2f4:	ldrh	r0, [r6]
    d2f8:	mov	r2, #28
    d2fc:	mov	r1, r6
    d300:	cmp	r0, #2
    d304:	ldr	r0, [r4, #12]
    d308:	movweq	r2, #16
    d30c:	bl	5190 <bind@plt>
    d310:	cmn	r0, #1
    d314:	ble	d404 <rb_connect_tcp+0x170>
    d318:	ldr	r2, [pc, #316]	; d45c <rb_connect_tcp+0x1c8>
    d31c:	mov	r0, r4
    d320:	mov	r1, r8
    d324:	mov	r3, #0
    d328:	add	r2, pc, r2
    d32c:	bl	4cc8 <rb_settimeout@plt>
    d330:	ldr	r1, [r4, #48]	; 0x30
    d334:	ldr	r0, [r4, #12]
    d338:	mov	r2, #28
    d33c:	ldrh	r3, [r1, #128]!	; 0x80
    d340:	cmp	r3, #2
    d344:	movweq	r2, #16
    d348:	bl	4cb0 <connect@plt>
    d34c:	cmn	r0, #1
    d350:	ble	d368 <rb_connect_tcp+0xd4>
    d354:	mov	r0, r4
    d358:	mov	r1, #0
    d35c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    d360:	b	d468 <rb_connect_callback>
    d364:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    d368:	bl	552c <__errno_location@plt>
    d36c:	ldr	r0, [r0]
    d370:	sub	r1, r0, #85	; 0x55
    d374:	cmp	r1, #30
    d378:	bhi	d414 <rb_connect_tcp+0x180>
    d37c:	add	r0, pc, #4
    d380:	ldr	r1, [r0, r1, lsl #2]
    d384:	add	pc, r0, r1
    d388:	.word	0x00000098
    d38c:	.word	0x000000c0
    d390:	.word	0x000000c0
    d394:	.word	0x000000c0
    d398:	.word	0x000000c0
    d39c:	.word	0x000000c0
    d3a0:	.word	0x000000c0
    d3a4:	.word	0x000000c0
    d3a8:	.word	0x000000c0
    d3ac:	.word	0x000000c0
    d3b0:	.word	0x000000c0
    d3b4:	.word	0x000000c0
    d3b8:	.word	0x000000c0
    d3bc:	.word	0x000000c0
    d3c0:	.word	0x000000c0
    d3c4:	.word	0x000000c0
    d3c8:	.word	0x000000c0
    d3cc:	.word	0x000000c0
    d3d0:	.word	0x000000c0
    d3d4:	.word	0x000000c0
    d3d8:	.word	0x00000098
    d3dc:	.word	0xffffffcc
    d3e0:	.word	0x000000c0
    d3e4:	.word	0x000000c0
    d3e8:	.word	0x000000c0
    d3ec:	.word	0x000000c0
    d3f0:	.word	0x000000c0
    d3f4:	.word	0x000000c0
    d3f8:	.word	0x000000c0
    d3fc:	.word	0x000000c0
    d400:	.word	0x00000098
    d404:	mov	r0, r4
    d408:	mov	r1, #1
    d40c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    d410:	b	d468 <rb_connect_callback>
    d414:	cmp	r0, #4
    d418:	cmpne	r0, #11
    d41c:	bne	d448 <rb_connect_tcp+0x1b4>
    d420:	ldr	r0, [pc, #56]	; d460 <rb_connect_tcp+0x1cc>
    d424:	mov	r1, #2
    d428:	mov	r3, #0
    d42c:	add	r0, pc, r0
    d430:	ldr	ip, [r0, #32]
    d434:	ldr	r2, [pc, #40]	; d464 <rb_connect_tcp+0x1d0>
    d438:	mov	r0, r4
    d43c:	add	r2, pc, r2
    d440:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    d444:	bx	ip
    d448:	mov	r0, r4
    d44c:	mov	r1, #4
    d450:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    d454:	b	d468 <rb_connect_callback>
    d458:	bl	51fc <rb_outofmemory@plt>
    d45c:	.word	0x00000234
    d460:	.word	0x000324e4
    d464:	.word	0x0000017c

0000d468 <rb_connect_callback>:
    d468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d46c:	add	fp, sp, #28
    d470:	sub	sp, sp, #4
    d474:	mov	r4, r1
    d478:	mov	r5, r0
    d47c:	bl	552c <__errno_location@plt>
    d480:	cmp	r5, #0
    d484:	beq	d4e8 <rb_connect_callback+0x80>
    d488:	mov	r6, r0
    d48c:	ldr	r0, [r5, #48]	; 0x30
    d490:	cmp	r0, #0
    d494:	beq	d4e8 <rb_connect_callback+0x80>
    d498:	ldr	r3, [r0, #260]	; 0x104
    d49c:	cmp	r3, #0
    d4a0:	beq	d4e8 <rb_connect_callback+0x80>
    d4a4:	mov	r1, #0
    d4a8:	ldr	r8, [r6]
    d4ac:	str	r1, [r0, #260]	; 0x104
    d4b0:	ldr	r9, [r0, #264]	; 0x108
    d4b4:	ldr	r0, [r5, #44]	; 0x2c
    d4b8:	cmp	r0, #0
    d4bc:	beq	d544 <rb_connect_callback+0xdc>
    d4c0:	ldr	r1, [r0, #12]
    d4c4:	ldr	r2, [r0, #8]
    d4c8:	ldr	sl, [pc, #144]	; d560 <rb_connect_callback+0xf8>
    d4cc:	str	r3, [sp]
    d4d0:	cmp	r1, #0
    d4d4:	add	sl, pc, sl
    d4d8:	beq	d4f0 <rb_connect_callback+0x88>
    d4dc:	str	r2, [r1, #4]
    d4e0:	ldr	r2, [r0, #8]
    d4e4:	b	d4f4 <rb_connect_callback+0x8c>
    d4e8:	sub	sp, fp, #28
    d4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4f0:	str	r2, [sl, #48]	; 0x30
    d4f4:	cmp	r2, #0
    d4f8:	add	r3, r2, #8
    d4fc:	mov	r7, #0
    d500:	addeq	r3, sl, #44	; 0x2c
    d504:	str	r1, [r3]
    d508:	str	r7, [r0, #8]
    d50c:	str	r7, [r0, #12]
    d510:	ldr	r1, [sl, #52]	; 0x34
    d514:	sub	r1, r1, #1
    d518:	str	r1, [sl, #52]	; 0x34
    d51c:	bl	4f8c <free@plt>
    d520:	str	r7, [r5, #44]	; 0x2c
    d524:	ldr	r3, [sp]
    d528:	ldr	r0, [sl, #52]	; 0x34
    d52c:	cmp	r0, #0
    d530:	bne	d544 <rb_connect_callback+0xdc>
    d534:	ldr	r0, [sl, #4]
    d538:	bl	4d64 <rb_event_delete@plt>
    d53c:	ldr	r3, [sp]
    d540:	str	r7, [sl, #4]
    d544:	str	r8, [r6]
    d548:	mov	r0, r5
    d54c:	mov	r1, r4
    d550:	mov	r2, r9
    d554:	sub	sp, fp, #28
    d558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d55c:	bx	r3
    d560:	.word	0x0003243c

0000d564 <rb_connect_timeout>:
    d564:	mov	r1, #3
    d568:	b	d468 <rb_connect_callback>

0000d56c <rb_ignore_errno>:
    d56c:	sub	r2, r0, #85	; 0x55
    d570:	mov	r1, r0
    d574:	mov	r0, #1
    d578:	cmp	r2, #30
    d57c:	bhi	d594 <rb_ignore_errno+0x28>
    d580:	movw	r3, #1
    d584:	mov	ip, #1
    d588:	movt	r3, #16400	; 0x4010
    d58c:	tst	r3, ip, lsl r2
    d590:	bxne	lr
    d594:	cmp	r1, #4
    d598:	cmpne	r1, #11
    d59c:	bne	d5a4 <rb_ignore_errno+0x38>
    d5a0:	bx	lr
    d5a4:	mov	r0, #0
    d5a8:	bx	lr

0000d5ac <rb_setselect>:
    d5ac:	ldr	ip, [pc, #8]	; d5bc <rb_setselect+0x10>
    d5b0:	add	ip, pc, ip
    d5b4:	ldr	ip, [ip, #32]
    d5b8:	bx	ip
    d5bc:	.word	0x00032360

0000d5c0 <rb_connect_outcome>:
    d5c0:	push	{r4, r5, fp, lr}
    d5c4:	add	fp, sp, #8
    d5c8:	sub	sp, sp, #16
    d5cc:	mov	r4, r0
    d5d0:	mov	r0, #0
    d5d4:	str	r0, [sp, #12]
    d5d8:	mov	r0, #4
    d5dc:	cmp	r4, #0
    d5e0:	str	r0, [sp, #8]
    d5e4:	beq	d65c <rb_connect_outcome+0x9c>
    d5e8:	ldr	r0, [r4, #48]	; 0x30
    d5ec:	cmp	r0, #0
    d5f0:	beq	d65c <rb_connect_outcome+0x9c>
    d5f4:	ldr	r0, [r0, #260]	; 0x104
    d5f8:	cmp	r0, #0
    d5fc:	beq	d65c <rb_connect_outcome+0x9c>
    d600:	ldr	r0, [r4, #12]
    d604:	add	r1, sp, #8
    d608:	add	r3, sp, #12
    d60c:	mov	r2, #4
    d610:	str	r1, [sp]
    d614:	mov	r1, #1
    d618:	bl	54c0 <getsockopt@plt>
    d61c:	cmp	r0, #0
    d620:	bmi	d63c <rb_connect_outcome+0x7c>
    d624:	ldr	r5, [sp, #12]
    d628:	cmp	r5, #0
    d62c:	beq	d63c <rb_connect_outcome+0x7c>
    d630:	bl	552c <__errno_location@plt>
    d634:	str	r5, [r0]
    d638:	b	d650 <rb_connect_outcome+0x90>
    d63c:	cmn	r0, #1
    d640:	ble	d650 <rb_connect_outcome+0x90>
    d644:	mov	r0, r4
    d648:	mov	r1, #0
    d64c:	b	d658 <rb_connect_outcome+0x98>
    d650:	mov	r0, r4
    d654:	mov	r1, #4
    d658:	bl	d468 <rb_connect_callback>
    d65c:	sub	sp, fp, #8
    d660:	pop	{r4, r5, fp, pc}

0000d664 <rb_connect_sctp>:
    d664:	mov	r1, #4
    d668:	b	d468 <rb_connect_callback>

0000d66c <rb_connect_sockaddr>:
    d66c:	cmp	r0, #0
    d670:	moveq	r0, #0
    d674:	bxeq	lr
    d678:	push	{fp, lr}
    d67c:	mov	fp, sp
    d680:	ldr	r0, [r0, #48]	; 0x30
    d684:	add	r3, r0, #128	; 0x80
    d688:	mov	r0, r1
    d68c:	mov	r1, r3
    d690:	bl	5094 <memcpy@plt>
    d694:	mov	r0, #1
    d698:	pop	{fp, pc}

0000d69c <rb_errstr>:
    d69c:	cmp	r0, #6
    d6a0:	bls	d6b0 <rb_errstr+0x14>
    d6a4:	ldr	r0, [pc, #20]	; d6c0 <rb_errstr+0x24>
    d6a8:	add	r0, pc, r0
    d6ac:	bx	lr
    d6b0:	ldr	r1, [pc, #12]	; d6c4 <rb_errstr+0x28>
    d6b4:	add	r1, pc, r1
    d6b8:	ldr	r0, [r1, r0, lsl #2]
    d6bc:	bx	lr
    d6c0:	.word	0x0000d6b5
    d6c4:	.word	0x0001f380

0000d6c8 <rb_socketpair>:
    d6c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d6cc:	add	fp, sp, #24
    d6d0:	sub	sp, sp, #8
    d6d4:	ldr	r7, [pc, #452]	; d8a0 <rb_socketpair+0x1d8>
    d6d8:	mov	r4, r3
    d6dc:	add	r7, pc, r7
    d6e0:	ldr	r3, [r7, #8]
    d6e4:	ldr	r6, [pc, #440]	; d8a4 <rb_socketpair+0x1dc>
    d6e8:	ldr	r6, [pc, r6]
    d6ec:	ldr	r6, [r6]
    d6f0:	cmp	r3, r6
    d6f4:	bge	d828 <rb_socketpair+0x160>
    d6f8:	mov	r3, sp
    d6fc:	bl	4e24 <socketpair@plt>
    d700:	mvn	r5, #0
    d704:	cmp	r0, #0
    d708:	bne	d838 <rb_socketpair+0x170>
    d70c:	ldr	r6, [fp, #12]
    d710:	ldr	r0, [sp]
    d714:	ldr	r8, [fp, #8]
    d718:	mov	r1, #4
    d71c:	mov	r2, r6
    d720:	bl	52e0 <rb_open@plt>
    d724:	str	r0, [r4]
    d728:	mov	r1, #4
    d72c:	mov	r2, r6
    d730:	ldr	r0, [sp, #4]
    d734:	bl	52e0 <rb_open@plt>
    d738:	str	r0, [r8]
    d73c:	mov	r1, r0
    d740:	ldr	r0, [r4]
    d744:	cmp	r0, #0
    d748:	beq	d844 <rb_socketpair+0x17c>
    d74c:	cmp	r1, #0
    d750:	beq	d850 <rb_socketpair+0x188>
    d754:	ldr	r1, [r7, #40]	; 0x28
    d758:	ldr	r6, [r0, #12]
    d75c:	blx	r1
    d760:	cmp	r0, #0
    d764:	bne	d798 <rb_socketpair+0xd0>
    d768:	mov	r0, r6
    d76c:	mov	r1, #3
    d770:	mov	r2, #0
    d774:	bl	5448 <fcntl@plt>
    d778:	cmn	r0, #1
    d77c:	beq	d860 <rb_socketpair+0x198>
    d780:	orr	r2, r0, #2048	; 0x800
    d784:	mov	r0, r6
    d788:	mov	r1, #4
    d78c:	bl	5448 <fcntl@plt>
    d790:	cmn	r0, #1
    d794:	beq	d860 <rb_socketpair+0x198>
    d798:	ldr	r0, [r8]
    d79c:	cmp	r0, #0
    d7a0:	beq	d7f0 <rb_socketpair+0x128>
    d7a4:	ldr	r1, [r7, #40]	; 0x28
    d7a8:	ldr	r6, [r0, #12]
    d7ac:	blx	r1
    d7b0:	mov	r5, #0
    d7b4:	cmp	r0, #0
    d7b8:	bne	d838 <rb_socketpair+0x170>
    d7bc:	mov	r0, r6
    d7c0:	mov	r1, #3
    d7c4:	mov	r2, #0
    d7c8:	mov	r5, #0
    d7cc:	bl	5448 <fcntl@plt>
    d7d0:	cmn	r0, #1
    d7d4:	beq	d7f0 <rb_socketpair+0x128>
    d7d8:	orr	r2, r0, #2048	; 0x800
    d7dc:	mov	r0, r6
    d7e0:	mov	r1, #4
    d7e4:	bl	5448 <fcntl@plt>
    d7e8:	cmn	r0, #1
    d7ec:	bne	d838 <rb_socketpair+0x170>
    d7f0:	ldr	r5, [sp, #4]
    d7f4:	bl	552c <__errno_location@plt>
    d7f8:	ldr	r0, [r0]
    d7fc:	bl	4c80 <strerror@plt>
    d800:	mov	r2, r0
    d804:	ldr	r0, [pc, #160]	; d8ac <rb_socketpair+0x1e4>
    d808:	mov	r1, r5
    d80c:	add	r0, pc, r0
    d810:	bl	519c <rb_lib_log@plt>
    d814:	ldr	r0, [r4]
    d818:	bl	5100 <rb_close@plt>
    d81c:	ldr	r0, [r8]
    d820:	bl	5100 <rb_close@plt>
    d824:	b	d834 <rb_socketpair+0x16c>
    d828:	bl	552c <__errno_location@plt>
    d82c:	mov	r1, #23
    d830:	str	r1, [r0]
    d834:	mvn	r5, #0
    d838:	mov	r0, r5
    d83c:	sub	sp, fp, #24
    d840:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d844:	cmp	r1, #0
    d848:	beq	d838 <rb_socketpair+0x170>
    d84c:	mov	r0, r1
    d850:	bl	5100 <rb_close@plt>
    d854:	mov	r0, r5
    d858:	sub	sp, fp, #24
    d85c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d860:	ldr	r6, [sp]
    d864:	bl	552c <__errno_location@plt>
    d868:	ldr	r0, [r0]
    d86c:	bl	4c80 <strerror@plt>
    d870:	mov	r2, r0
    d874:	ldr	r0, [pc, #44]	; d8a8 <rb_socketpair+0x1e0>
    d878:	mov	r1, r6
    d87c:	add	r0, pc, r0
    d880:	bl	519c <rb_lib_log@plt>
    d884:	ldr	r0, [r4]
    d888:	bl	5100 <rb_close@plt>
    d88c:	ldr	r0, [r8]
    d890:	bl	5100 <rb_close@plt>
    d894:	mov	r0, r5
    d898:	sub	sp, fp, #24
    d89c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d8a0:	.word	0x00032234
    d8a4:	.word	0x0001fc78
    d8a8:	.word	0x0000d4f7
    d8ac:	.word	0x0000d567

0000d8b0 <rb_open>:
    d8b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    d8b4:	add	fp, sp, #24
    d8b8:	ldr	r8, [pc, #376]	; da38 <rb_open+0x188>
    d8bc:	eor	r6, r0, r0, lsr #12
    d8c0:	mov	r4, r2
    d8c4:	mov	r9, r1
    d8c8:	mov	r5, r0
    d8cc:	cmn	r0, #1
    d8d0:	add	r8, pc, r8
    d8d4:	ble	d91c <rb_open+0x6c>
    d8d8:	ldr	r1, [pc, #348]	; da3c <rb_open+0x18c>
    d8dc:	mov	r0, r6
    d8e0:	bfc	r0, #12, #20
    d8e4:	eor	r0, r0, r5, lsr #24
    d8e8:	ldr	r1, [pc, r1]
    d8ec:	add	r0, r0, r0, lsl #1
    d8f0:	ldr	r1, [r1]
    d8f4:	ldr	r0, [r1, r0, lsl #2]
    d8f8:	cmp	r0, #0
    d8fc:	beq	d91c <rb_open+0x6c>
    d900:	ldr	r7, [r0]
    d904:	ldr	r1, [r7, #12]
    d908:	cmp	r1, r5
    d90c:	beq	d970 <rb_open+0xc0>
    d910:	ldr	r0, [r0, #8]
    d914:	cmp	r0, #0
    d918:	bne	d900 <rb_open+0x50>
    d91c:	ldr	r0, [r8, #12]
    d920:	bl	51cc <rb_bh_alloc@plt>
    d924:	str	r5, [r0, #12]
    d928:	mov	r7, r0
    d92c:	mov	r1, #0
    d930:	ldr	r0, [pc, #264]	; da40 <rb_open+0x190>
    d934:	ldr	r0, [pc, r0]
    d938:	ldr	r0, [r0]
    d93c:	str	r1, [r7, #4]
    d940:	eor	r1, r6, r5, asr #24
    d944:	str	r7, [r7]
    d948:	bfc	r1, #12, #20
    d94c:	add	r1, r1, r1, lsl #1
    d950:	mov	r2, r0
    d954:	ldr	r3, [r2, r1, lsl #2]!
    d958:	cmp	r3, #0
    d95c:	str	r3, [r7, #8]
    d960:	beq	d97c <rb_open+0xcc>
    d964:	add	r3, r3, #4
    d968:	str	r7, [r3]
    d96c:	b	d98c <rb_open+0xdc>
    d970:	cmp	r7, #0
    d974:	bne	d9a0 <rb_open+0xf0>
    d978:	b	d91c <rb_open+0x6c>
    d97c:	add	r3, r0, r1, lsl #2
    d980:	ldr	r6, [r3, #4]!
    d984:	cmp	r6, #0
    d988:	streq	r7, [r3]
    d98c:	add	r0, r0, r1, lsl #2
    d990:	str	r7, [r2]
    d994:	ldr	r1, [r0, #8]
    d998:	add	r1, r1, #1
    d99c:	str	r1, [r0, #8]
    d9a0:	ldrb	r0, [r7, #16]
    d9a4:	tst	r0, #1
    d9a8:	bne	d9fc <rb_open+0x14c>
    d9ac:	cmp	r4, #0
    d9b0:	orr	r0, r0, #1
    d9b4:	strb	r9, [r7, #17]
    d9b8:	str	r5, [r7, #12]
    d9bc:	strb	r0, [r7, #16]
    d9c0:	beq	d9e8 <rb_open+0x138>
    d9c4:	mov	r0, #128	; 0x80
    d9c8:	bl	5214 <malloc@plt>
    d9cc:	cmp	r0, #0
    d9d0:	beq	da34 <rb_open+0x184>
    d9d4:	mov	r1, r4
    d9d8:	mov	r2, #128	; 0x80
    d9dc:	mov	r5, r0
    d9e0:	bl	4f44 <rb_strlcpy@plt>
    d9e4:	str	r5, [r7, #24]
    d9e8:	ldr	r0, [r8, #8]
    d9ec:	add	r0, r0, #1
    d9f0:	str	r0, [r8, #8]
    d9f4:	mov	r0, r7
    d9f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    d9fc:	cmp	r7, #0
    da00:	beq	da10 <rb_open+0x160>
    da04:	ldr	r2, [r7, #24]
    da08:	cmp	r2, #0
    da0c:	bne	da18 <rb_open+0x168>
    da10:	ldr	r2, [pc, #44]	; da44 <rb_open+0x194>
    da14:	add	r2, pc, r2
    da18:	ldr	r0, [pc, #40]	; da48 <rb_open+0x198>
    da1c:	mov	r1, r5
    da20:	add	r0, pc, r0
    da24:	bl	519c <rb_lib_log@plt>
    da28:	mov	r7, #0
    da2c:	mov	r0, r7
    da30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    da34:	bl	51fc <rb_outofmemory@plt>
    da38:	.word	0x00032040
    da3c:	.word	0x0001fa98
    da40:	.word	0x0001fa4c
    da44:	.word	0x0000d2d2
    da48:	.word	0x0000d406

0000da4c <rb_close>:
    da4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    da50:	add	fp, sp, #24
    da54:	cmp	r0, #0
    da58:	beq	dc34 <rb_close+0x1e8>
    da5c:	ldrb	r4, [r0, #17]
    da60:	ldr	r8, [r0, #12]
    da64:	mov	r5, r0
    da68:	ands	r9, r4, #16
    da6c:	beq	da7c <rb_close+0x30>
    da70:	mov	r0, r8
    da74:	mov	r1, #0
    da78:	bl	4e90 <listen@plt>
    da7c:	ldr	r7, [pc, #436]	; dc38 <rb_close+0x1ec>
    da80:	mov	r0, r5
    da84:	mov	r1, #3
    da88:	mov	r2, #0
    da8c:	mov	r3, #0
    da90:	add	r7, pc, r7
    da94:	ldr	r6, [r7, #32]
    da98:	blx	r6
    da9c:	ldr	r0, [r5, #44]	; 0x2c
    daa0:	cmp	r0, #0
    daa4:	beq	db10 <rb_close+0xc4>
    daa8:	ldr	r1, [r0, #12]
    daac:	ldr	r2, [r0, #8]
    dab0:	cmp	r1, #0
    dab4:	beq	dac4 <rb_close+0x78>
    dab8:	str	r2, [r1, #4]
    dabc:	ldr	r2, [r0, #8]
    dac0:	b	dac8 <rb_close+0x7c>
    dac4:	str	r2, [r7, #48]	; 0x30
    dac8:	cmp	r2, #0
    dacc:	add	r3, r2, #8
    dad0:	mov	r6, #0
    dad4:	addeq	r3, r7, #44	; 0x2c
    dad8:	str	r1, [r3]
    dadc:	str	r6, [r0, #8]
    dae0:	str	r6, [r0, #12]
    dae4:	ldr	r1, [r7, #52]	; 0x34
    dae8:	sub	r1, r1, #1
    daec:	str	r1, [r7, #52]	; 0x34
    daf0:	bl	4f8c <free@plt>
    daf4:	str	r6, [r5, #44]	; 0x2c
    daf8:	ldr	r0, [r7, #52]	; 0x34
    dafc:	cmp	r0, #0
    db00:	bne	db10 <rb_close+0xc4>
    db04:	ldr	r0, [r7, #4]
    db08:	bl	4d64 <rb_event_delete@plt>
    db0c:	str	r6, [r7, #4]
    db10:	ldr	r0, [r5, #52]	; 0x34
    db14:	cmp	r0, #0
    db18:	beq	db20 <rb_close+0xd4>
    db1c:	bl	4f8c <free@plt>
    db20:	ldr	r0, [r5, #48]	; 0x30
    db24:	cmp	r0, #0
    db28:	beq	db30 <rb_close+0xe4>
    db2c:	bl	4f8c <free@plt>
    db30:	ldr	r0, [r5, #24]
    db34:	cmp	r0, #0
    db38:	beq	db40 <rb_close+0xf4>
    db3c:	bl	4f8c <free@plt>
    db40:	tst	r4, #32
    db44:	bne	db6c <rb_close+0x120>
    db48:	ldrb	r0, [r5, #16]
    db4c:	tst	r0, #1
    db50:	bne	db80 <rb_close+0x134>
    db54:	cmp	r9, #0
    db58:	beq	dc34 <rb_close+0x1e8>
    db5c:	mov	r0, r8
    db60:	mov	r1, #2
    db64:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    db68:	b	5184 <shutdown@plt>
    db6c:	mov	r0, r5
    db70:	bl	106d4 <rb_ssl_shutdown>
    db74:	ldrb	r0, [r5, #16]
    db78:	tst	r0, #1
    db7c:	beq	db54 <rb_close+0x108>
    db80:	ldr	r1, [r5, #12]
    db84:	ldr	r2, [r5, #8]
    db88:	ldr	r3, [r5, #4]
    db8c:	eor	r6, r1, r1, lsr #12
    db90:	cmp	r2, #0
    db94:	eor	r1, r6, r1, asr #24
    db98:	ldr	r6, [pc, #156]	; dc3c <rb_close+0x1f0>
    db9c:	bfc	r1, #12, #20
    dba0:	ldr	r6, [pc, r6]
    dba4:	add	r1, r1, r1, lsl #1
    dba8:	ldr	r6, [r6]
    dbac:	add	r6, r6, r1, lsl #2
    dbb0:	beq	dbc0 <rb_close+0x174>
    dbb4:	str	r3, [r2, #4]
    dbb8:	ldr	r3, [r5, #4]
    dbbc:	b	dbc4 <rb_close+0x178>
    dbc0:	str	r3, [r6, #4]
    dbc4:	cmp	r3, #0
    dbc8:	mov	r1, r6
    dbcc:	addne	r1, r3, #8
    dbd0:	str	r2, [r1]
    dbd4:	mov	r1, #0
    dbd8:	str	r1, [r5, #4]
    dbdc:	ldr	r2, [r7, #56]	; 0x38
    dbe0:	cmp	r2, #0
    dbe4:	str	r2, [r5, #8]
    dbe8:	beq	dbf8 <rb_close+0x1ac>
    dbec:	add	r2, r2, #4
    dbf0:	str	r5, [r2]
    dbf4:	b	dc08 <rb_close+0x1bc>
    dbf8:	mov	r2, r7
    dbfc:	ldr	r1, [r2, #60]!	; 0x3c
    dc00:	cmp	r1, #0
    dc04:	streq	r5, [r2]
    dc08:	str	r5, [r7, #56]	; 0x38
    dc0c:	and	r0, r0, #254	; 0xfe
    dc10:	ldr	r1, [r6, #8]
    dc14:	sub	r1, r1, #1
    dc18:	str	r1, [r6, #8]
    dc1c:	ldr	r1, [r7, #64]	; 0x40
    dc20:	add	r1, r1, #1
    dc24:	str	r1, [r7, #64]	; 0x40
    dc28:	strb	r0, [r5, #16]
    dc2c:	cmp	r9, #0
    dc30:	bne	db5c <rb_close+0x110>
    dc34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    dc38:	.word	0x00031e80
    dc3c:	.word	0x0001f7e0

0000dc40 <rb_pipe>:
    dc40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    dc44:	add	fp, sp, #24
    dc48:	sub	sp, sp, #8
    dc4c:	ldr	r4, [pc, #380]	; ddd0 <rb_pipe+0x190>
    dc50:	mov	r8, r1
    dc54:	mov	r5, r0
    dc58:	add	r4, pc, r4
    dc5c:	ldr	r0, [r4, #8]
    dc60:	ldr	r1, [pc, #364]	; ddd4 <rb_pipe+0x194>
    dc64:	ldr	r1, [pc, r1]
    dc68:	ldr	r1, [r1]
    dc6c:	cmp	r0, r1
    dc70:	bge	dd68 <rb_pipe+0x128>
    dc74:	mov	r0, sp
    dc78:	mov	r7, r2
    dc7c:	bl	54cc <pipe@plt>
    dc80:	mvn	r6, #0
    dc84:	cmn	r0, #1
    dc88:	beq	dd5c <rb_pipe+0x11c>
    dc8c:	ldr	r0, [sp]
    dc90:	mov	r1, #8
    dc94:	mov	r2, r7
    dc98:	bl	52e0 <rb_open@plt>
    dc9c:	str	r0, [r5]
    dca0:	mov	r1, #8
    dca4:	mov	r2, r7
    dca8:	ldr	r0, [sp, #4]
    dcac:	bl	52e0 <rb_open@plt>
    dcb0:	str	r0, [r8]
    dcb4:	ldr	r0, [r5]
    dcb8:	cmp	r0, #0
    dcbc:	beq	dd84 <rb_pipe+0x144>
    dcc0:	ldr	r1, [r4, #40]	; 0x28
    dcc4:	ldr	r6, [r0, #12]
    dcc8:	blx	r1
    dccc:	cmp	r0, #0
    dcd0:	bne	dd04 <rb_pipe+0xc4>
    dcd4:	mov	r0, r6
    dcd8:	mov	r1, #3
    dcdc:	mov	r2, #0
    dce0:	bl	5448 <fcntl@plt>
    dce4:	cmn	r0, #1
    dce8:	beq	dd84 <rb_pipe+0x144>
    dcec:	orr	r2, r0, #2048	; 0x800
    dcf0:	mov	r0, r6
    dcf4:	mov	r1, #4
    dcf8:	bl	5448 <fcntl@plt>
    dcfc:	cmn	r0, #1
    dd00:	beq	dd84 <rb_pipe+0x144>
    dd04:	ldr	r0, [r8]
    dd08:	cmp	r0, #0
    dd0c:	beq	dd8c <rb_pipe+0x14c>
    dd10:	ldr	r1, [r4, #40]	; 0x28
    dd14:	ldr	r7, [r0, #12]
    dd18:	blx	r1
    dd1c:	mov	r6, #0
    dd20:	cmp	r0, #0
    dd24:	bne	dd5c <rb_pipe+0x11c>
    dd28:	mov	r0, r7
    dd2c:	mov	r1, #3
    dd30:	mov	r2, #0
    dd34:	mov	r6, #0
    dd38:	bl	5448 <fcntl@plt>
    dd3c:	cmn	r0, #1
    dd40:	beq	dd8c <rb_pipe+0x14c>
    dd44:	orr	r2, r0, #2048	; 0x800
    dd48:	mov	r0, r7
    dd4c:	mov	r1, #4
    dd50:	bl	5448 <fcntl@plt>
    dd54:	cmn	r0, #1
    dd58:	beq	dd8c <rb_pipe+0x14c>
    dd5c:	mov	r0, r6
    dd60:	sub	sp, fp, #24
    dd64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    dd68:	bl	552c <__errno_location@plt>
    dd6c:	mov	r1, #23
    dd70:	str	r1, [r0]
    dd74:	mvn	r6, #0
    dd78:	mov	r0, r6
    dd7c:	sub	sp, fp, #24
    dd80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    dd84:	ldr	r6, [sp]
    dd88:	b	dd90 <rb_pipe+0x150>
    dd8c:	ldr	r6, [sp, #4]
    dd90:	bl	552c <__errno_location@plt>
    dd94:	ldr	r0, [r0]
    dd98:	bl	4c80 <strerror@plt>
    dd9c:	mov	r2, r0
    dda0:	ldr	r0, [pc, #48]	; ddd8 <rb_pipe+0x198>
    dda4:	mov	r1, r6
    dda8:	add	r0, pc, r0
    ddac:	bl	519c <rb_lib_log@plt>
    ddb0:	ldr	r0, [r5]
    ddb4:	bl	5100 <rb_close@plt>
    ddb8:	ldr	r0, [r8]
    ddbc:	bl	5100 <rb_close@plt>
    ddc0:	mvn	r6, #0
    ddc4:	mov	r0, r6
    ddc8:	sub	sp, fp, #24
    ddcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    ddd0:	.word	0x00031cb8
    ddd4:	.word	0x0001f6fc
    ddd8:	.word	0x0000cfcb

0000dddc <rb_socket>:
    dddc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    dde0:	add	fp, sp, #24
    dde4:	sub	sp, sp, #8
    dde8:	ldr	r8, [pc, #416]	; df90 <rb_socket+0x1b4>
    ddec:	mov	r6, r3
    ddf0:	mov	r7, r0
    ddf4:	add	r8, pc, r8
    ddf8:	ldr	r0, [r8, #8]
    ddfc:	ldr	r3, [pc, #400]	; df94 <rb_socket+0x1b8>
    de00:	ldr	r3, [pc, r3]
    de04:	ldr	r3, [r3]
    de08:	cmp	r0, r3
    de0c:	bge	df74 <rb_socket+0x198>
    de10:	mov	r0, r7
    de14:	bl	5028 <socket@plt>
    de18:	mov	r4, #0
    de1c:	cmp	r0, #0
    de20:	bmi	de90 <rb_socket+0xb4>
    de24:	mov	r5, r0
    de28:	cmp	r7, #10
    de2c:	bne	de5c <rb_socket+0x80>
    de30:	mov	r0, #1
    de34:	add	r3, sp, #4
    de38:	mov	r1, #41	; 0x29
    de3c:	mov	r2, #26
    de40:	str	r0, [sp, #4]
    de44:	mov	r0, #4
    de48:	str	r0, [sp]
    de4c:	mov	r0, r5
    de50:	bl	54e4 <setsockopt@plt>
    de54:	cmn	r0, #1
    de58:	beq	df04 <rb_socket+0x128>
    de5c:	mov	r0, r5
    de60:	mov	r1, #4
    de64:	mov	r2, r6
    de68:	bl	52e0 <rb_open@plt>
    de6c:	cmp	r0, #0
    de70:	beq	de9c <rb_socket+0xc0>
    de74:	ldr	r1, [r8, #40]	; 0x28
    de78:	ldr	r7, [r0, #12]
    de7c:	mov	r6, r0
    de80:	blx	r1
    de84:	cmp	r0, #0
    de88:	beq	dec0 <rb_socket+0xe4>
    de8c:	mov	r4, r6
    de90:	mov	r0, r4
    de94:	sub	sp, fp, #24
    de98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    de9c:	bl	552c <__errno_location@plt>
    dea0:	ldr	r0, [r0]
    dea4:	bl	4c80 <strerror@plt>
    dea8:	mov	r2, r0
    deac:	ldr	r0, [pc, #232]	; df9c <rb_socket+0x1c0>
    deb0:	mov	r1, r5
    deb4:	add	r0, pc, r0
    deb8:	bl	519c <rb_lib_log@plt>
    debc:	b	df2c <rb_socket+0x150>
    dec0:	mov	r0, r7
    dec4:	mov	r1, #3
    dec8:	mov	r2, #0
    decc:	mov	r4, #0
    ded0:	bl	5448 <fcntl@plt>
    ded4:	cmn	r0, #1
    ded8:	beq	df40 <rb_socket+0x164>
    dedc:	orr	r2, r0, #2048	; 0x800
    dee0:	mov	r0, r7
    dee4:	mov	r1, #4
    dee8:	bl	5448 <fcntl@plt>
    deec:	cmn	r0, #1
    def0:	beq	df40 <rb_socket+0x164>
    def4:	mov	r4, r6
    def8:	mov	r0, r4
    defc:	sub	sp, fp, #24
    df00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    df04:	ldr	r6, [sp, #4]
    df08:	bl	552c <__errno_location@plt>
    df0c:	ldr	r0, [r0]
    df10:	bl	4c80 <strerror@plt>
    df14:	mov	r3, r0
    df18:	ldr	r0, [pc, #120]	; df98 <rb_socket+0x1bc>
    df1c:	mov	r1, r6
    df20:	mov	r2, r5
    df24:	add	r0, pc, r0
    df28:	bl	519c <rb_lib_log@plt>
    df2c:	mov	r0, r5
    df30:	bl	51c0 <close@plt>
    df34:	mov	r0, r4
    df38:	sub	sp, fp, #24
    df3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    df40:	bl	552c <__errno_location@plt>
    df44:	ldr	r0, [r0]
    df48:	bl	4c80 <strerror@plt>
    df4c:	mov	r2, r0
    df50:	ldr	r0, [pc, #72]	; dfa0 <rb_socket+0x1c4>
    df54:	mov	r1, r5
    df58:	add	r0, pc, r0
    df5c:	bl	519c <rb_lib_log@plt>
    df60:	mov	r0, r6
    df64:	bl	5100 <rb_close@plt>
    df68:	mov	r0, r4
    df6c:	sub	sp, fp, #24
    df70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    df74:	bl	552c <__errno_location@plt>
    df78:	mov	r1, #23
    df7c:	mov	r4, #0
    df80:	str	r1, [r0]
    df84:	mov	r0, r4
    df88:	sub	sp, fp, #24
    df8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    df90:	.word	0x00031b1c
    df94:	.word	0x0001f560
    df98:	.word	0x0000ce7c
    df9c:	.word	0x0000cf2b
    dfa0:	.word	0x0000ce1b

0000dfa4 <rb_listen>:
    dfa4:	push	{r4, r5, r6, sl, fp, lr}
    dfa8:	add	fp, sp, #16
    dfac:	sub	sp, sp, #8
    dfb0:	str	r1, [sp, #4]
    dfb4:	mov	r5, r0
    dfb8:	mov	r6, r2
    dfbc:	ldrb	r0, [r0, #17]
    dfc0:	and	r0, r0, #128	; 0x80
    dfc4:	orr	r0, r0, #20
    dfc8:	strb	r0, [r5, #17]
    dfcc:	ldr	r0, [r5, #12]
    dfd0:	bl	4e90 <listen@plt>
    dfd4:	mov	r4, r0
    dfd8:	cmp	r6, #0
    dfdc:	beq	e004 <rb_listen+0x60>
    dfe0:	cmp	r4, #0
    dfe4:	bne	e004 <rb_listen+0x60>
    dfe8:	ldr	r0, [r5, #12]
    dfec:	mov	r1, #4
    dff0:	add	r3, sp, #4
    dff4:	mov	r2, #9
    dff8:	str	r1, [sp]
    dffc:	mov	r1, #6
    e000:	bl	54e4 <setsockopt@plt>
    e004:	mov	r0, r4
    e008:	sub	sp, fp, #16
    e00c:	pop	{r4, r5, r6, sl, fp, pc}

0000e010 <rb_fdlist_init>:
    e010:	push	{r4, r5, r6, r7, fp, lr}
    e014:	add	fp, sp, #16
    e018:	ldr	r6, [pc, #108]	; e08c <rb_fdlist_init+0x7c>
    e01c:	mov	r4, r2
    e020:	add	r6, pc, r6
    e024:	ldrb	r2, [r6]
    e028:	cmp	r2, #0
    e02c:	bne	e070 <rb_fdlist_init+0x60>
    e030:	ldr	r7, [pc, #88]	; e090 <rb_fdlist_init+0x80>
    e034:	cmp	r0, #0
    e038:	ldr	r7, [pc, r7]
    e03c:	str	r1, [r7]
    e040:	beq	e068 <rb_fdlist_init+0x58>
    e044:	cmp	r1, #4
    e048:	blt	e068 <rb_fdlist_init+0x58>
    e04c:	mov	r5, #3
    e050:	mov	r0, r5
    e054:	bl	51c0 <close@plt>
    e058:	ldr	r0, [r7]
    e05c:	add	r5, r5, #1
    e060:	cmp	r5, r0
    e064:	blt	e050 <rb_fdlist_init+0x40>
    e068:	mov	r0, #1
    e06c:	strb	r0, [r6]
    e070:	ldr	r2, [pc, #28]	; e094 <rb_fdlist_init+0x84>
    e074:	mov	r0, #68	; 0x44
    e078:	mov	r1, r4
    e07c:	add	r2, pc, r2
    e080:	bl	5304 <rb_bh_create@plt>
    e084:	str	r0, [r6, #12]
    e088:	pop	{r4, r5, r6, r7, fp, pc}
    e08c:	.word	0x000318f0
    e090:	.word	0x0001f328
    e094:	.word	0x0000cd9c

0000e098 <rb_dump_fd>:
    e098:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    e09c:	add	fp, sp, #24
    e0a0:	ldr	r8, [pc, #144]	; e138 <rb_dump_fd+0xa0>
    e0a4:	mov	r4, r1
    e0a8:	mov	r5, r0
    e0ac:	mov	r6, #0
    e0b0:	ldr	r8, [pc, r8]
    e0b4:	ldr	r9, [pc, #128]	; e13c <rb_dump_fd+0xa4>
    e0b8:	add	r9, pc, r9
    e0bc:	b	e0cc <rb_dump_fd+0x34>
    e0c0:	add	r6, r6, #1
    e0c4:	cmp	r6, #4096	; 0x1000
    e0c8:	beq	e134 <rb_dump_fd+0x9c>
    e0cc:	ldr	r0, [r8]
    e0d0:	add	r1, r6, r6, lsl #1
    e0d4:	add	r2, r0, r1, lsl #2
    e0d8:	ldr	r2, [r2, #8]
    e0dc:	cmp	r2, #0
    e0e0:	beq	e0c0 <rb_dump_fd+0x28>
    e0e4:	ldr	r7, [r0, r1, lsl #2]
    e0e8:	cmp	r7, #0
    e0ec:	bne	e100 <rb_dump_fd+0x68>
    e0f0:	b	e0c0 <rb_dump_fd+0x28>
    e0f4:	ldr	r7, [r7, #8]
    e0f8:	cmp	r7, #0
    e0fc:	beq	e0c0 <rb_dump_fd+0x28>
    e100:	ldr	r1, [r7]
    e104:	cmp	r1, #0
    e108:	beq	e0f4 <rb_dump_fd+0x5c>
    e10c:	ldrb	r0, [r1, #16]
    e110:	tst	r0, #1
    e114:	beq	e0f4 <rb_dump_fd+0x5c>
    e118:	ldr	r0, [r1, #12]
    e11c:	ldr	r1, [r1, #24]
    e120:	mov	r2, r4
    e124:	cmp	r1, #0
    e128:	moveq	r1, r9
    e12c:	blx	r5
    e130:	b	e0f4 <rb_dump_fd+0x5c>
    e134:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    e138:	.word	0x0001f2d0
    e13c:	.word	0x0000ce5a

0000e140 <rb_note>:
    e140:	push	{r4, r5, r6, sl, fp, lr}
    e144:	add	fp, sp, #16
    e148:	cmp	r0, #0
    e14c:	beq	e18c <rb_note+0x4c>
    e150:	mov	r4, r0
    e154:	ldr	r0, [r0, #24]
    e158:	mov	r5, r1
    e15c:	cmp	r0, #0
    e160:	beq	e168 <rb_note+0x28>
    e164:	bl	4f8c <free@plt>
    e168:	mov	r0, #128	; 0x80
    e16c:	bl	5214 <malloc@plt>
    e170:	cmp	r0, #0
    e174:	beq	e190 <rb_note+0x50>
    e178:	mov	r1, r5
    e17c:	mov	r2, #128	; 0x80
    e180:	mov	r6, r0
    e184:	bl	4f44 <rb_strlcpy@plt>
    e188:	str	r6, [r4, #24]
    e18c:	pop	{r4, r5, r6, sl, fp, pc}
    e190:	bl	51fc <rb_outofmemory@plt>

0000e194 <rb_set_type>:
    e194:	strb	r1, [r0, #17]
    e198:	bx	lr

0000e19c <rb_get_type>:
    e19c:	ldrb	r0, [r0, #17]
    e1a0:	bx	lr

0000e1a4 <rb_fd_ssl>:
    e1a4:	cmp	r0, #0
    e1a8:	moveq	r0, #0
    e1ac:	ldrbne	r0, [r0, #17]
    e1b0:	ubfxne	r0, r0, #5, #1
    e1b4:	bx	lr

0000e1b8 <rb_get_fde>:
    e1b8:	cmp	r0, #0
    e1bc:	bmi	e204 <rb_get_fde+0x4c>
    e1c0:	ldr	r2, [pc, #72]	; e210 <rb_get_fde+0x58>
    e1c4:	eor	r1, r0, r0, lsr #12
    e1c8:	bfc	r1, #12, #20
    e1cc:	ldr	r2, [pc, r2]
    e1d0:	eor	r1, r1, r0, lsr #24
    e1d4:	add	r1, r1, r1, lsl #1
    e1d8:	ldr	r2, [r2]
    e1dc:	ldr	r2, [r2, r1, lsl #2]
    e1e0:	cmp	r2, #0
    e1e4:	beq	e204 <rb_get_fde+0x4c>
    e1e8:	ldr	r1, [r2]
    e1ec:	ldr	r3, [r1, #12]
    e1f0:	cmp	r3, r0
    e1f4:	beq	e208 <rb_get_fde+0x50>
    e1f8:	ldr	r2, [r2, #8]
    e1fc:	cmp	r2, #0
    e200:	bne	e1e8 <rb_get_fde+0x30>
    e204:	mov	r1, #0
    e208:	mov	r0, r1
    e20c:	bx	lr
    e210:	.word	0x0001f1b4

0000e214 <rb_read>:
    e214:	cmp	r0, #0
    e218:	moveq	r0, #0
    e21c:	bxeq	lr
    e220:	ldrb	r3, [r0, #17]
    e224:	tst	r3, #32
    e228:	bne	e23c <rb_read+0x28>
    e22c:	ldr	r0, [r0, #12]
    e230:	tst	r3, #4
    e234:	bne	e240 <rb_read+0x2c>
    e238:	b	4fa4 <read@plt>
    e23c:	b	110bc <rb_ssl_read>
    e240:	mov	r3, #0
    e244:	b	4e48 <recv@plt>

0000e248 <rb_write>:
    e248:	cmp	r0, #0
    e24c:	moveq	r0, #0
    e250:	bxeq	lr
    e254:	ldrb	r3, [r0, #17]
    e258:	tst	r3, #32
    e25c:	bne	e270 <rb_write+0x28>
    e260:	ldr	r0, [r0, #12]
    e264:	tst	r3, #4
    e268:	bne	e274 <rb_write+0x2c>
    e26c:	b	4fbc <write@plt>
    e270:	b	1122c <rb_ssl_write>
    e274:	mov	r3, #16384	; 0x4000
    e278:	b	52ec <send@plt>

0000e27c <rb_writev>:
    e27c:	push	{r4, r5, r6, r7, fp, lr}
    e280:	add	fp, sp, #16
    e284:	sub	sp, sp, #32
    e288:	cmp	r0, #0
    e28c:	beq	e2c0 <rb_writev+0x44>
    e290:	mov	r5, r0
    e294:	ldrb	r0, [r0, #17]
    e298:	mov	r4, r1
    e29c:	tst	r0, #32
    e2a0:	bne	e2d8 <rb_writev+0x5c>
    e2a4:	tst	r0, #4
    e2a8:	bne	e36c <rb_writev+0xf0>
    e2ac:	ldr	r0, [r5, #12]
    e2b0:	mov	r1, r4
    e2b4:	sub	sp, fp, #16
    e2b8:	pop	{r4, r5, r6, r7, fp, lr}
    e2bc:	b	4f2c <writev@plt>
    e2c0:	bl	552c <__errno_location@plt>
    e2c4:	mov	r1, #9
    e2c8:	str	r1, [r0]
    e2cc:	mvn	r0, #0
    e2d0:	sub	sp, fp, #16
    e2d4:	pop	{r4, r5, r6, r7, fp, pc}
    e2d8:	cmp	r2, #0
    e2dc:	beq	e3a4 <rb_writev+0x128>
    e2e0:	sub	r7, r2, #1
    e2e4:	mov	r6, #0
    e2e8:	ldm	r4, {r1, r2}
    e2ec:	tst	r0, #32
    e2f0:	bne	e314 <rb_writev+0x98>
    e2f4:	uxtb	r3, r0
    e2f8:	ldr	r0, [r5, #12]
    e2fc:	tst	r3, #4
    e300:	bne	e34c <rb_writev+0xd0>
    e304:	bl	4fbc <write@plt>
    e308:	cmp	r0, #0
    e30c:	bgt	e324 <rb_writev+0xa8>
    e310:	b	e35c <rb_writev+0xe0>
    e314:	mov	r0, r5
    e318:	bl	1122c <rb_ssl_write>
    e31c:	cmp	r0, #0
    e320:	ble	e35c <rb_writev+0xe0>
    e324:	add	r6, r0, r6
    e328:	cmp	r7, #0
    e32c:	beq	e3b0 <rb_writev+0x134>
    e330:	ldrb	r0, [r5, #17]
    e334:	add	r4, r4, #8
    e338:	sub	r7, r7, #1
    e33c:	ldm	r4, {r1, r2}
    e340:	tst	r0, #32
    e344:	bne	e314 <rb_writev+0x98>
    e348:	b	e2f4 <rb_writev+0x78>
    e34c:	mov	r3, #16384	; 0x4000
    e350:	bl	52ec <send@plt>
    e354:	cmp	r0, #0
    e358:	bgt	e324 <rb_writev+0xa8>
    e35c:	cmp	r6, #0
    e360:	movgt	r0, r6
    e364:	sub	sp, fp, #16
    e368:	pop	{r4, r5, r6, r7, fp, pc}
    e36c:	vmov.i32	q8, #0	; 0x00000000
    e370:	mov	r1, sp
    e374:	add	r0, r1, #12
    e378:	mov	r3, r1
    e37c:	vst1.32	{d16-d17}, [r0]
    e380:	mov	r0, #8
    e384:	vst1.64	{d16-d17}, [r3], r0
    e388:	str	r4, [r3]
    e38c:	str	r2, [sp, #12]
    e390:	mov	r2, #16384	; 0x4000
    e394:	ldr	r0, [r5, #12]
    e398:	bl	4f98 <sendmsg@plt>
    e39c:	sub	sp, fp, #16
    e3a0:	pop	{r4, r5, r6, r7, fp, pc}
    e3a4:	mov	r0, #0
    e3a8:	sub	sp, fp, #16
    e3ac:	pop	{r4, r5, r6, r7, fp, pc}
    e3b0:	mov	r0, r6
    e3b4:	sub	sp, fp, #16
    e3b8:	pop	{r4, r5, r6, r7, fp, pc}

0000e3bc <rb_inet_pton_sock>:
    e3bc:	push	{r4, r5, r6, r7, fp, lr}
    e3c0:	add	fp, sp, #16
    e3c4:	sub	sp, sp, #8
    e3c8:	vmov.i32	q8, #0	; 0x00000000
    e3cc:	mov	ip, r0
    e3d0:	mov	r7, r1
    e3d4:	mov	r0, #112	; 0x70
    e3d8:	vst1.32	{d16-d17}, [r1], r0
    e3dc:	add	r0, r7, #96	; 0x60
    e3e0:	vst1.32	{d16-d17}, [r0]
    e3e4:	add	r0, r7, #80	; 0x50
    e3e8:	vst1.32	{d16-d17}, [r1]
    e3ec:	mov	r1, #0
    e3f0:	vst1.32	{d16-d17}, [r0]
    e3f4:	add	r0, r7, #64	; 0x40
    e3f8:	vst1.32	{d16-d17}, [r0]
    e3fc:	add	r0, r7, #48	; 0x30
    e400:	vst1.32	{d16-d17}, [r0]
    e404:	add	r0, r7, #32
    e408:	vst1.32	{d16-d17}, [r0]
    e40c:	add	r0, r7, #16
    e410:	vst1.32	{d16-d17}, [r0]
    e414:	strb	r1, [sp, #4]
    e418:	ldrb	r5, [ip]
    e41c:	cmp	r5, #0
    e420:	beq	e4e4 <rb_inet_pton_sock+0x128>
    e424:	add	r0, ip, #1
    e428:	add	r2, sp, #4
    e42c:	mov	r3, #0
    e430:	mov	r4, #0
    e434:	sub	r6, r5, #48	; 0x30
    e438:	uxtb	r6, r6
    e43c:	cmp	r6, #9
    e440:	bhi	e4bc <rb_inet_pton_sock+0x100>
    e444:	b	e470 <rb_inet_pton_sock+0xb4>
    e448:	mov	r1, #0
    e44c:	mov	r4, #0
    e450:	strb	r1, [r2, #1]!
    e454:	ldrb	r5, [r0], #1
    e458:	cmp	r5, #0
    e45c:	beq	e4dc <rb_inet_pton_sock+0x120>
    e460:	sub	r6, r5, #48	; 0x30
    e464:	uxtb	r6, r6
    e468:	cmp	r6, #9
    e46c:	bhi	e4bc <rb_inet_pton_sock+0x100>
    e470:	uxtb	r6, r1
    e474:	lsl	r6, r6, #2
    e478:	uxtab	r1, r6, r1
    e47c:	lsl	r1, r1, #1
    e480:	uxtab	r1, r1, r5
    e484:	sub	r1, r1, #48	; 0x30
    e488:	cmp	r1, #255	; 0xff
    e48c:	bhi	e4e4 <rb_inet_pton_sock+0x128>
    e490:	cmp	r4, #0
    e494:	strb	r1, [r2]
    e498:	bne	e454 <rb_inet_pton_sock+0x98>
    e49c:	cmp	r3, #3
    e4a0:	bgt	e4e4 <rb_inet_pton_sock+0x128>
    e4a4:	add	r3, r3, #1
    e4a8:	mov	r4, #1
    e4ac:	ldrb	r5, [r0], #1
    e4b0:	cmp	r5, #0
    e4b4:	bne	e460 <rb_inet_pton_sock+0xa4>
    e4b8:	b	e4dc <rb_inet_pton_sock+0x120>
    e4bc:	cmp	r3, #4
    e4c0:	beq	e4e4 <rb_inet_pton_sock+0x128>
    e4c4:	uxtb	r1, r5
    e4c8:	cmp	r1, #46	; 0x2e
    e4cc:	bne	e4e4 <rb_inet_pton_sock+0x128>
    e4d0:	cmp	r4, #0
    e4d4:	bne	e448 <rb_inet_pton_sock+0x8c>
    e4d8:	b	e4e4 <rb_inet_pton_sock+0x128>
    e4dc:	cmp	r3, #4
    e4e0:	bge	e50c <rb_inet_pton_sock+0x150>
    e4e4:	add	r2, r7, #8
    e4e8:	mov	r0, #10
    e4ec:	mov	r1, ip
    e4f0:	mov	r4, #10
    e4f4:	bl	4ee4 <rb_inet_pton@plt>
    e4f8:	cmp	r0, #0
    e4fc:	bne	e518 <rb_inet_pton_sock+0x15c>
    e500:	mov	r0, #0
    e504:	sub	sp, fp, #16
    e508:	pop	{r4, r5, r6, r7, fp, pc}
    e50c:	ldr	r0, [sp, #4]
    e510:	mov	r4, #2
    e514:	str	r0, [r7, #4]
    e518:	mov	r0, #0
    e51c:	strh	r0, [r7, #2]
    e520:	strh	r4, [r7]
    e524:	mov	r0, #1
    e528:	sub	sp, fp, #16
    e52c:	pop	{r4, r5, r6, r7, fp, pc}

0000e530 <rb_inet_pton>:
    e530:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e534:	add	fp, sp, #24
    e538:	sub	sp, sp, #56	; 0x38
    e53c:	mov	r8, r2
    e540:	mov	r2, r1
    e544:	cmp	r0, #10
    e548:	beq	e634 <rb_inet_pton+0x104>
    e54c:	mov	r1, r0
    e550:	mvn	r0, #0
    e554:	cmp	r1, #2
    e558:	bne	e76c <rb_inet_pton+0x23c>
    e55c:	mov	r0, #0
    e560:	strb	r0, [sp]
    e564:	ldrb	r6, [r2]
    e568:	cmp	r6, #0
    e56c:	beq	e76c <rb_inet_pton+0x23c>
    e570:	add	r1, r2, #1
    e574:	mov	r5, #0
    e578:	mov	r2, sp
    e57c:	mov	r3, #0
    e580:	mov	r4, #0
    e584:	sub	r0, r6, #48	; 0x30
    e588:	uxtb	r0, r0
    e58c:	cmp	r0, #9
    e590:	bhi	e610 <rb_inet_pton+0xe0>
    e594:	b	e5c0 <rb_inet_pton+0x90>
    e598:	mov	r5, #0
    e59c:	mov	r4, #0
    e5a0:	strb	r5, [r2, #1]!
    e5a4:	ldrb	r6, [r1], #1
    e5a8:	cmp	r6, #0
    e5ac:	beq	e708 <rb_inet_pton+0x1d8>
    e5b0:	sub	r0, r6, #48	; 0x30
    e5b4:	uxtb	r0, r0
    e5b8:	cmp	r0, #9
    e5bc:	bhi	e610 <rb_inet_pton+0xe0>
    e5c0:	uxtb	r0, r5
    e5c4:	lsl	r0, r0, #2
    e5c8:	uxtab	r0, r0, r5
    e5cc:	lsl	r0, r0, #1
    e5d0:	uxtab	r0, r0, r6
    e5d4:	sub	r5, r0, #48	; 0x30
    e5d8:	mov	r0, #0
    e5dc:	cmp	r5, #255	; 0xff
    e5e0:	bhi	e76c <rb_inet_pton+0x23c>
    e5e4:	cmp	r4, #0
    e5e8:	strb	r5, [r2]
    e5ec:	bne	e5a4 <rb_inet_pton+0x74>
    e5f0:	cmp	r3, #3
    e5f4:	bgt	e76c <rb_inet_pton+0x23c>
    e5f8:	add	r3, r3, #1
    e5fc:	mov	r4, #1
    e600:	ldrb	r6, [r1], #1
    e604:	cmp	r6, #0
    e608:	bne	e5b0 <rb_inet_pton+0x80>
    e60c:	b	e708 <rb_inet_pton+0x1d8>
    e610:	mov	r0, #0
    e614:	cmp	r3, #4
    e618:	beq	e76c <rb_inet_pton+0x23c>
    e61c:	uxtb	r6, r6
    e620:	cmp	r6, #46	; 0x2e
    e624:	bne	e76c <rb_inet_pton+0x23c>
    e628:	cmp	r4, #0
    e62c:	bne	e598 <rb_inet_pton+0x68>
    e630:	b	e76c <rb_inet_pton+0x23c>
    e634:	mov	r5, #0
    e638:	strb	r5, [sp]
    e63c:	ldrb	r6, [r2]
    e640:	cmp	r6, #0
    e644:	beq	e730 <rb_inet_pton+0x200>
    e648:	mov	r0, #1
    e64c:	mov	r1, sp
    e650:	mov	r3, #0
    e654:	mov	r4, #0
    e658:	sub	r7, r6, #48	; 0x30
    e65c:	uxtb	r7, r7
    e660:	cmp	r7, #9
    e664:	bhi	e6e8 <rb_inet_pton+0x1b8>
    e668:	b	e698 <rb_inet_pton+0x168>
    e66c:	mov	r5, #0
    e670:	mov	r4, #0
    e674:	strb	r5, [r1, #1]!
    e678:	ldrb	r6, [r2, r0]
    e67c:	add	r0, r0, #1
    e680:	cmp	r6, #0
    e684:	beq	e728 <rb_inet_pton+0x1f8>
    e688:	sub	r7, r6, #48	; 0x30
    e68c:	uxtb	r7, r7
    e690:	cmp	r7, #9
    e694:	bhi	e6e8 <rb_inet_pton+0x1b8>
    e698:	uxtb	r7, r5
    e69c:	lsl	r7, r7, #2
    e6a0:	uxtab	r7, r7, r5
    e6a4:	lsl	r7, r7, #1
    e6a8:	uxtab	r7, r7, r6
    e6ac:	sub	r5, r7, #48	; 0x30
    e6b0:	cmp	r5, #255	; 0xff
    e6b4:	bhi	e730 <rb_inet_pton+0x200>
    e6b8:	cmp	r4, #0
    e6bc:	strb	r5, [r1]
    e6c0:	bne	e678 <rb_inet_pton+0x148>
    e6c4:	cmp	r3, #3
    e6c8:	bgt	e730 <rb_inet_pton+0x200>
    e6cc:	add	r3, r3, #1
    e6d0:	mov	r4, #1
    e6d4:	ldrb	r6, [r2, r0]
    e6d8:	add	r0, r0, #1
    e6dc:	cmp	r6, #0
    e6e0:	bne	e688 <rb_inet_pton+0x158>
    e6e4:	b	e728 <rb_inet_pton+0x1f8>
    e6e8:	cmp	r3, #4
    e6ec:	beq	e730 <rb_inet_pton+0x200>
    e6f0:	uxtb	r7, r6
    e6f4:	cmp	r7, #46	; 0x2e
    e6f8:	bne	e730 <rb_inet_pton+0x200>
    e6fc:	cmp	r4, #0
    e700:	bne	e66c <rb_inet_pton+0x13c>
    e704:	b	e730 <rb_inet_pton+0x200>
    e708:	mov	r0, #0
    e70c:	cmp	r3, #4
    e710:	blt	e76c <rb_inet_pton+0x23c>
    e714:	ldr	r0, [sp]
    e718:	str	r0, [r8]
    e71c:	mov	r0, #1
    e720:	sub	sp, fp, #24
    e724:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e728:	cmp	r3, #4
    e72c:	bge	e744 <rb_inet_pton+0x214>
    e730:	mov	r0, r2
    e734:	mov	r1, r8
    e738:	sub	sp, fp, #24
    e73c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    e740:	b	f480 <inet_pton6>
    e744:	ldr	r0, [sp]
    e748:	mov	r5, sp
    e74c:	str	r0, [r8]
    e750:	mov	r0, r5
    e754:	ldr	r1, [pc, #24]	; e774 <rb_inet_pton+0x244>
    e758:	add	r1, pc, r1
    e75c:	bl	5544 <sprintf@plt>
    e760:	mov	r0, r5
    e764:	mov	r1, r8
    e768:	bl	f480 <inet_pton6>
    e76c:	sub	sp, fp, #24
    e770:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e774:	.word	0x0000c700

0000e778 <rb_inet_ntop_sock>:
    e778:	push	{r4, r5, fp, lr}
    e77c:	add	fp, sp, #8
    e780:	mov	r3, r2
    e784:	ldrh	r2, [r0]
    e788:	mov	r5, r1
    e78c:	cmp	r2, #10
    e790:	beq	e7e4 <rb_inet_ntop_sock+0x6c>
    e794:	mov	r1, #0
    e798:	cmp	r2, #2
    e79c:	bne	e8b4 <rb_inet_ntop_sock+0x13c>
    e7a0:	cmp	r3, #16
    e7a4:	bcc	e8b4 <rb_inet_ntop_sock+0x13c>
    e7a8:	ldrb	r1, [r0, #4]
    e7ac:	ldr	ip, [pc, #264]	; e8bc <rb_inet_ntop_sock+0x144>
    e7b0:	add	ip, pc, ip
    e7b4:	ldr	r1, [ip, r1, lsl #2]
    e7b8:	ldrb	r2, [r1]
    e7bc:	cmp	r2, #0
    e7c0:	beq	e7f8 <rb_inet_ntop_sock+0x80>
    e7c4:	add	r3, r1, #1
    e7c8:	ldr	r1, [pc, #244]	; e8c4 <rb_inet_ntop_sock+0x14c>
    e7cc:	add	r1, pc, r1
    e7d0:	strb	r2, [r1], #1
    e7d4:	ldrb	r2, [r3], #1
    e7d8:	cmp	r2, #0
    e7dc:	bne	e7d0 <rb_inet_ntop_sock+0x58>
    e7e0:	b	e800 <rb_inet_ntop_sock+0x88>
    e7e4:	add	r1, r0, #8
    e7e8:	mov	r0, #10
    e7ec:	mov	r2, r5
    e7f0:	pop	{r4, r5, fp, lr}
    e7f4:	b	e8cc <rb_inet_ntop>
    e7f8:	ldr	r1, [pc, #192]	; e8c0 <rb_inet_ntop_sock+0x148>
    e7fc:	add	r1, pc, r1
    e800:	mov	lr, #46	; 0x2e
    e804:	mov	r2, r1
    e808:	strb	lr, [r2], #1
    e80c:	ldrb	r3, [r0, #5]
    e810:	ldr	r4, [ip, r3, lsl #2]
    e814:	ldrb	r3, [r4]
    e818:	cmp	r3, #0
    e81c:	beq	e838 <rb_inet_ntop_sock+0xc0>
    e820:	add	r1, r4, #1
    e824:	strb	r3, [r2], #1
    e828:	ldrb	r3, [r1], #1
    e82c:	cmp	r3, #0
    e830:	bne	e824 <rb_inet_ntop_sock+0xac>
    e834:	sub	r1, r2, #1
    e838:	strb	lr, [r2]
    e83c:	ldrb	r2, [r0, #6]
    e840:	ldr	r4, [ip, r2, lsl #2]
    e844:	add	r2, r1, #2
    e848:	ldrb	r3, [r4]
    e84c:	cmp	r3, #0
    e850:	beq	e868 <rb_inet_ntop_sock+0xf0>
    e854:	add	r1, r4, #1
    e858:	strb	r3, [r2], #1
    e85c:	ldrb	r3, [r1], #1
    e860:	cmp	r3, #0
    e864:	bne	e858 <rb_inet_ntop_sock+0xe0>
    e868:	mov	r1, #46	; 0x2e
    e86c:	strb	r1, [r2], #1
    e870:	ldrb	r0, [r0, #7]
    e874:	ldr	r1, [ip, r0, lsl #2]
    e878:	ldrb	r0, [r1]
    e87c:	cmp	r0, #0
    e880:	beq	e898 <rb_inet_ntop_sock+0x120>
    e884:	add	r1, r1, #1
    e888:	strb	r0, [r2], #1
    e88c:	ldrb	r0, [r1], #1
    e890:	cmp	r0, #0
    e894:	bne	e888 <rb_inet_ntop_sock+0x110>
    e898:	mov	r0, #0
    e89c:	strb	r0, [r2]
    e8a0:	mov	r0, r5
    e8a4:	ldr	r1, [pc, #28]	; e8c8 <rb_inet_ntop_sock+0x150>
    e8a8:	add	r1, pc, r1
    e8ac:	bl	5124 <strcpy@plt>
    e8b0:	mov	r1, r5
    e8b4:	mov	r0, r1
    e8b8:	pop	{r4, r5, fp, pc}
    e8bc:	.word	0x0001e2a0
    e8c0:	.word	0x00031104
    e8c4:	.word	0x00031134
    e8c8:	.word	0x00031058

0000e8cc <rb_inet_ntop>:
    e8cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8d0:	add	fp, sp, #28
    e8d4:	sub	sp, sp, #108	; 0x6c
    e8d8:	mov	sl, r1
    e8dc:	mov	r1, r0
    e8e0:	mov	r6, r3
    e8e4:	mov	r8, r2
    e8e8:	mov	r0, #0
    e8ec:	cmp	r1, #10
    e8f0:	beq	e940 <rb_inet_ntop+0x74>
    e8f4:	cmp	r1, #2
    e8f8:	bne	f34c <rb_inet_ntop+0xa80>
    e8fc:	cmp	r6, #16
    e900:	bcc	f34c <rb_inet_ntop+0xa80>
    e904:	ldrb	r1, [sl]
    e908:	ldr	r0, [pc, #2820]	; f414 <rb_inet_ntop+0xb48>
    e90c:	add	r0, pc, r0
    e910:	ldr	r1, [r0, r1, lsl #2]
    e914:	ldrb	r2, [r1]
    e918:	cmp	r2, #0
    e91c:	beq	eed0 <rb_inet_ntop+0x604>
    e920:	add	r3, r1, #1
    e924:	ldr	r1, [pc, #2800]	; f41c <rb_inet_ntop+0xb50>
    e928:	add	r1, pc, r1
    e92c:	strb	r2, [r1], #1
    e930:	ldrb	r2, [r3], #1
    e934:	cmp	r2, #0
    e938:	bne	e92c <rb_inet_ntop+0x60>
    e93c:	b	eed8 <rb_inet_ntop+0x60c>
    e940:	ldr	r3, [sl]
    e944:	cmp	r3, #0
    e948:	beq	e954 <rb_inet_ntop+0x88>
    e94c:	ldrb	r4, [sl, #4]
    e950:	b	e960 <rb_inet_ntop+0x94>
    e954:	ldr	r4, [sl, #4]
    e958:	cmp	r4, #0
    e95c:	beq	f070 <rb_inet_ntop+0x7a4>
    e960:	ldrb	r0, [sl, #12]
    e964:	ldrb	r2, [sl, #1]
    e968:	ldrb	r5, [sl, #3]
    e96c:	ldrb	r1, [sl, #5]
    e970:	uxtb	r4, r4
    e974:	str	r8, [sp]
    e978:	ldrb	lr, [sl, #14]
    e97c:	ldrb	r7, [sl, #15]
    e980:	ldrb	ip, [sl, #6]
    e984:	ldrb	r8, [sl, #7]
    e988:	str	r6, [sp, #20]
    e98c:	str	r0, [sp, #44]	; 0x2c
    e990:	ldrb	r0, [sl, #13]
    e994:	bfi	r2, r3, #8, #8
    e998:	orr	r4, r1, r4, lsl #8
    e99c:	str	lr, [sp, #52]	; 0x34
    e9a0:	str	r7, [sp, #48]	; 0x30
    e9a4:	cmp	r2, #0
    e9a8:	mov	r3, r2
    e9ac:	str	r2, [sp, #12]
    e9b0:	movwne	r3, #1
    e9b4:	str	r0, [sp, #40]	; 0x28
    e9b8:	ldrb	r0, [sl, #10]
    e9bc:	str	r0, [sp, #36]	; 0x24
    e9c0:	ldrb	r0, [sl, #11]
    e9c4:	str	r0, [sp, #32]
    e9c8:	ldrb	r0, [sl, #8]
    e9cc:	str	r0, [sp, #28]
    e9d0:	ldrb	r0, [sl, #9]
    e9d4:	str	r0, [sp, #24]
    e9d8:	ldrb	r0, [sl, #2]
    e9dc:	orr	r0, r5, r0, lsl #8
    e9e0:	cmp	r0, #0
    e9e4:	str	r0, [sp, #4]
    e9e8:	beq	ea48 <rb_inet_ntop+0x17c>
    e9ec:	clz	r0, r2
    e9f0:	rsb	lr, r3, #0
    e9f4:	mvn	r3, #0
    e9f8:	lsr	r9, r0, #5
    e9fc:	mov	r0, r9
    ea00:	orr	r8, r8, ip, lsl #8
    ea04:	cmp	r4, #0
    ea08:	beq	ea68 <rb_inet_ntop+0x19c>
    ea0c:	mvn	r6, #0
    ea10:	cmn	r3, #1
    ea14:	beq	ea7c <rb_inet_ntop+0x1b0>
    ea18:	mov	r5, r4
    ea1c:	add	r4, lr, #1
    ea20:	cmp	r0, r9
    ea24:	mov	r1, #0
    ea28:	clz	r4, r4
    ea2c:	movwhi	r1, #1
    ea30:	lsr	r4, r4, #5
    ea34:	orrs	r1, r4, r1
    ea38:	mov	r4, r5
    ea3c:	moveq	r3, lr
    ea40:	movne	r9, r0
    ea44:	b	ea80 <rb_inet_ntop+0x1b4>
    ea48:	cmp	r2, #0
    ea4c:	mov	r0, #1
    ea50:	mvn	lr, #0
    ea54:	mov	r9, #0
    ea58:	movweq	r0, #2
    ea5c:	orr	r8, r8, ip, lsl #8
    ea60:	cmp	r4, #0
    ea64:	bne	ea0c <rb_inet_ntop+0x140>
    ea68:	cmn	r3, #1
    ea6c:	add	r0, r0, #1
    ea70:	mov	r6, r3
    ea74:	movweq	r0, #1
    ea78:	movweq	r6, #2
    ea7c:	mov	r3, lr
    ea80:	ldr	r1, [sp, #28]
    ea84:	ldr	r2, [sp, #24]
    ea88:	ldr	ip, [sp, #40]	; 0x28
    ea8c:	cmp	r8, #0
    ea90:	str	r4, [sp, #8]
    ea94:	orr	lr, r2, r1, lsl #8
    ea98:	beq	ead0 <rb_inet_ntop+0x204>
    ea9c:	mvn	r7, #0
    eaa0:	cmn	r6, #1
    eaa4:	beq	eae4 <rb_inet_ntop+0x218>
    eaa8:	add	r5, r3, #1
    eaac:	cmp	r0, r9
    eab0:	mov	r1, #0
    eab4:	clz	r5, r5
    eab8:	movwgt	r1, #1
    eabc:	lsr	r5, r5, #5
    eac0:	orrs	r1, r5, r1
    eac4:	moveq	r6, r3
    eac8:	movne	r9, r0
    eacc:	b	eae8 <rb_inet_ntop+0x21c>
    ead0:	cmn	r6, #1
    ead4:	add	r0, r0, #1
    ead8:	mov	r7, r6
    eadc:	movweq	r0, #1
    eae0:	movweq	r7, #3
    eae4:	mov	r6, r3
    eae8:	ldr	r1, [sp, #36]	; 0x24
    eaec:	ldr	r2, [sp, #32]
    eaf0:	ldr	r3, [sp, #44]	; 0x2c
    eaf4:	cmp	lr, #0
    eaf8:	orr	r4, r2, r1, lsl #8
    eafc:	beq	eb34 <rb_inet_ntop+0x268>
    eb00:	mvn	r5, #0
    eb04:	cmn	r7, #1
    eb08:	beq	eb48 <rb_inet_ntop+0x27c>
    eb0c:	add	r2, r6, #1
    eb10:	cmp	r0, r9
    eb14:	mov	r1, #0
    eb18:	clz	r2, r2
    eb1c:	movwgt	r1, #1
    eb20:	lsr	r2, r2, #5
    eb24:	orrs	r1, r2, r1
    eb28:	moveq	r7, r6
    eb2c:	movne	r9, r0
    eb30:	b	eb4c <rb_inet_ntop+0x280>
    eb34:	cmn	r7, #1
    eb38:	add	r0, r0, #1
    eb3c:	mov	r5, r7
    eb40:	movweq	r0, #1
    eb44:	movweq	r5, #4
    eb48:	mov	r7, r6
    eb4c:	orr	r6, ip, r3, lsl #8
    eb50:	cmp	r4, #0
    eb54:	str	r4, [sp, #44]	; 0x2c
    eb58:	str	lr, [sp, #40]	; 0x28
    eb5c:	str	r8, [sp, #16]
    eb60:	beq	eb98 <rb_inet_ntop+0x2cc>
    eb64:	mvn	r1, #0
    eb68:	cmn	r5, #1
    eb6c:	beq	ebac <rb_inet_ntop+0x2e0>
    eb70:	add	r3, r7, #1
    eb74:	cmp	r0, r9
    eb78:	mov	r2, #0
    eb7c:	clz	r3, r3
    eb80:	movwgt	r2, #1
    eb84:	lsr	r3, r3, #5
    eb88:	orrs	r2, r3, r2
    eb8c:	moveq	r5, r7
    eb90:	movne	r9, r0
    eb94:	b	ebb0 <rb_inet_ntop+0x2e4>
    eb98:	cmn	r5, #1
    eb9c:	add	r0, r0, #1
    eba0:	mov	r1, r5
    eba4:	movweq	r0, #1
    eba8:	movweq	r1, #5
    ebac:	mov	r5, r7
    ebb0:	ldr	r2, [sp, #52]	; 0x34
    ebb4:	ldr	r3, [sp, #48]	; 0x30
    ebb8:	cmp	r6, #0
    ebbc:	orr	r8, r3, r2, lsl #8
    ebc0:	beq	ec3c <rb_inet_ntop+0x370>
    ebc4:	mvn	r7, #0
    ebc8:	cmn	r1, #1
    ebcc:	beq	ec50 <rb_inet_ntop+0x384>
    ebd0:	add	r3, r5, #1
    ebd4:	cmp	r0, r9
    ebd8:	mov	r2, #0
    ebdc:	clz	r3, r3
    ebe0:	movwgt	r2, #1
    ebe4:	lsr	r3, r3, #5
    ebe8:	orrs	r2, r3, r2
    ebec:	moveq	r1, r5
    ebf0:	movne	r9, r0
    ebf4:	cmp	r8, #0
    ebf8:	bne	ec5c <rb_inet_ntop+0x390>
    ebfc:	cmn	r7, #1
    ec00:	add	r0, r0, #1
    ec04:	add	r3, r1, #1
    ec08:	mov	r2, #0
    ec0c:	movweq	r0, #1
    ec10:	clz	r3, r3
    ec14:	cmp	r0, r9
    ec18:	lsr	r3, r3, #5
    ec1c:	movwgt	r2, #1
    ec20:	orrs	r2, r3, r2
    ec24:	movne	r9, r0
    ec28:	cmn	r7, #1
    ec2c:	movweq	r7, #7
    ec30:	cmp	r2, #0
    ec34:	moveq	r7, r1
    ec38:	b	ec90 <rb_inet_ntop+0x3c4>
    ec3c:	cmn	r1, #1
    ec40:	add	r0, r0, #1
    ec44:	mov	r7, r1
    ec48:	movweq	r0, #1
    ec4c:	movweq	r7, #6
    ec50:	mov	r1, r5
    ec54:	cmp	r8, #0
    ec58:	beq	ebfc <rb_inet_ntop+0x330>
    ec5c:	cmn	r7, #1
    ec60:	beq	ec8c <rb_inet_ntop+0x3c0>
    ec64:	add	r3, r1, #1
    ec68:	cmp	r0, r9
    ec6c:	mov	r2, #0
    ec70:	clz	r3, r3
    ec74:	movwgt	r2, #1
    ec78:	lsr	r3, r3, #5
    ec7c:	orrs	r2, r3, r2
    ec80:	moveq	r7, r1
    ec84:	movne	r9, r0
    ec88:	b	ec90 <rb_inet_ntop+0x3c4>
    ec8c:	mov	r7, r1
    ec90:	cmn	r7, #1
    ec94:	movne	r7, r7
    ec98:	cmp	r9, #2
    ec9c:	mvnlt	r7, #0
    eca0:	cmn	r7, #1
    eca4:	beq	ed10 <rb_inet_ntop+0x444>
    eca8:	str	r8, [sp, #52]	; 0x34
    ecac:	add	r8, r7, r9
    ecb0:	cmp	r7, #0
    ecb4:	bne	ede8 <rb_inet_ntop+0x51c>
    ecb8:	cmp	r8, #0
    ecbc:	ble	f0c0 <rb_inet_ntop+0x7f4>
    ecc0:	movw	r0, #14896	; 0x3a30
    ecc4:	cmp	r8, #1
    ecc8:	strh	r0, [sp, #56]	; 0x38
    eccc:	add	r0, sp, #56	; 0x38
    ecd0:	orr	r4, r0, #2
    ecd4:	beq	f0dc <rb_inet_ntop+0x810>
    ecd8:	cmp	r8, #2
    ecdc:	ble	f0fc <rb_inet_ntop+0x830>
    ece0:	cmp	r8, #3
    ece4:	beq	f11c <rb_inet_ntop+0x850>
    ece8:	cmp	r8, #4
    ecec:	ble	f13c <rb_inet_ntop+0x870>
    ecf0:	cmp	r8, #5
    ecf4:	beq	f15c <rb_inet_ntop+0x890>
    ecf8:	cmp	r8, #6
    ecfc:	ble	f17c <rb_inet_ntop+0x8b0>
    ed00:	ldr	r9, [sp, #20]
    ed04:	cmp	r8, #7
    ed08:	bne	f064 <rb_inet_ntop+0x798>
    ed0c:	b	f214 <rb_inet_ntop+0x948>
    ed10:	ldr	r4, [pc, #1876]	; f46c <rb_inet_ntop+0xba0>
    ed14:	ldr	r2, [sp, #12]
    ed18:	add	r5, sp, #56	; 0x38
    ed1c:	mov	r9, r6
    ed20:	mov	r0, r5
    ed24:	add	r4, pc, r4
    ed28:	mov	r1, r4
    ed2c:	bl	5544 <sprintf@plt>
    ed30:	ldr	r2, [sp, #4]
    ed34:	add	r6, r5, r0
    ed38:	mov	r7, #58	; 0x3a
    ed3c:	mov	r1, r4
    ed40:	strb	r7, [r6], #1
    ed44:	mov	r0, r6
    ed48:	bl	5544 <sprintf@plt>
    ed4c:	strb	r7, [r6, r0]!
    ed50:	mov	r1, r4
    ed54:	ldr	r2, [sp, #8]
    ed58:	add	r5, r6, #1
    ed5c:	mov	r0, r5
    ed60:	bl	5544 <sprintf@plt>
    ed64:	strb	r7, [r5, r0]!
    ed68:	mov	r1, r4
    ed6c:	ldr	r2, [sp, #16]
    ed70:	add	r5, r5, #1
    ed74:	mov	r0, r5
    ed78:	bl	5544 <sprintf@plt>
    ed7c:	strb	r7, [r5, r0]!
    ed80:	mov	r1, r4
    ed84:	ldr	r2, [sp, #40]	; 0x28
    ed88:	add	r5, r5, #1
    ed8c:	mov	r0, r5
    ed90:	bl	5544 <sprintf@plt>
    ed94:	strb	r7, [r5, r0]!
    ed98:	mov	r1, r4
    ed9c:	ldr	r2, [sp, #44]	; 0x2c
    eda0:	add	r5, r5, #1
    eda4:	mov	r0, r5
    eda8:	bl	5544 <sprintf@plt>
    edac:	strb	r7, [r5, r0]!
    edb0:	mov	r1, r4
    edb4:	mov	r2, r9
    edb8:	add	r5, r5, #1
    edbc:	mov	r0, r5
    edc0:	bl	5544 <sprintf@plt>
    edc4:	strb	r7, [r5, r0]!
    edc8:	mov	r1, r4
    edcc:	mov	r2, r8
    edd0:	add	r5, r5, #1
    edd4:	mov	r0, r5
    edd8:	bl	5544 <sprintf@plt>
    eddc:	ldr	r9, [sp, #20]
    ede0:	add	r4, r5, r0
    ede4:	b	f334 <rb_inet_ntop+0xa68>
    ede8:	ldr	r1, [pc, #1612]	; f43c <rb_inet_ntop+0xb70>
    edec:	ldr	r2, [sp, #12]
    edf0:	add	r4, sp, #56	; 0x38
    edf4:	mov	r0, r4
    edf8:	add	r1, pc, r1
    edfc:	bl	5544 <sprintf@plt>
    ee00:	add	r4, r4, r0
    ee04:	mov	r0, #58	; 0x3a
    ee08:	cmp	r7, #1
    ee0c:	strb	r0, [r4], #1
    ee10:	bgt	ee1c <rb_inet_ntop+0x550>
    ee14:	cmp	r8, #1
    ee18:	bgt	ee34 <rb_inet_ntop+0x568>
    ee1c:	ldr	r1, [pc, #1564]	; f440 <rb_inet_ntop+0xb74>
    ee20:	ldr	r2, [sp, #4]
    ee24:	mov	r0, r4
    ee28:	add	r1, pc, r1
    ee2c:	bl	5544 <sprintf@plt>
    ee30:	add	r4, r4, r0
    ee34:	ldr	r9, [sp, #20]
    ee38:	cmp	r7, #2
    ee3c:	bgt	ef90 <rb_inet_ntop+0x6c4>
    ee40:	cmp	r8, #2
    ee44:	ble	ef90 <rb_inet_ntop+0x6c4>
    ee48:	cmp	r7, #2
    ee4c:	moveq	r0, #58	; 0x3a
    ee50:	strbeq	r0, [r4], #1
    ee54:	cmp	r7, #3
    ee58:	bgt	efb8 <rb_inet_ntop+0x6ec>
    ee5c:	cmp	r8, #3
    ee60:	ble	efb8 <rb_inet_ntop+0x6ec>
    ee64:	cmp	r7, #3
    ee68:	moveq	r0, #58	; 0x3a
    ee6c:	strbeq	r0, [r4], #1
    ee70:	cmp	r7, #4
    ee74:	bgt	efe0 <rb_inet_ntop+0x714>
    ee78:	cmp	r8, #4
    ee7c:	ble	efe0 <rb_inet_ntop+0x714>
    ee80:	cmp	r7, #4
    ee84:	moveq	r0, #58	; 0x3a
    ee88:	strbeq	r0, [r4], #1
    ee8c:	cmp	r7, #5
    ee90:	bgt	f008 <rb_inet_ntop+0x73c>
    ee94:	cmp	r8, #5
    ee98:	ble	f008 <rb_inet_ntop+0x73c>
    ee9c:	cmp	r7, #5
    eea0:	moveq	r0, #58	; 0x3a
    eea4:	strbeq	r0, [r4], #1
    eea8:	cmp	r7, #6
    eeac:	bgt	f030 <rb_inet_ntop+0x764>
    eeb0:	cmp	r8, #6
    eeb4:	ble	f030 <rb_inet_ntop+0x764>
    eeb8:	cmp	r7, #6
    eebc:	moveq	r0, #58	; 0x3a
    eec0:	strbeq	r0, [r4], #1
    eec4:	cmp	r8, #7
    eec8:	bgt	f058 <rb_inet_ntop+0x78c>
    eecc:	b	f214 <rb_inet_ntop+0x948>
    eed0:	ldr	r1, [pc, #1344]	; f418 <rb_inet_ntop+0xb4c>
    eed4:	add	r1, pc, r1
    eed8:	mov	r2, #46	; 0x2e
    eedc:	mov	r3, r1
    eee0:	strb	r2, [r3], #1
    eee4:	ldrb	r7, [sl, #1]
    eee8:	ldr	r5, [r0, r7, lsl #2]
    eeec:	ldrb	r7, [r5]
    eef0:	cmp	r7, #0
    eef4:	beq	ef10 <rb_inet_ntop+0x644>
    eef8:	add	r1, r5, #1
    eefc:	strb	r7, [r3], #1
    ef00:	ldrb	r7, [r1], #1
    ef04:	cmp	r7, #0
    ef08:	bne	eefc <rb_inet_ntop+0x630>
    ef0c:	sub	r1, r3, #1
    ef10:	strb	r2, [r3]
    ef14:	add	r1, r1, #2
    ef18:	ldrb	r2, [sl, #2]
    ef1c:	ldr	r3, [r0, r2, lsl #2]
    ef20:	ldrb	r2, [r3]
    ef24:	cmp	r2, #0
    ef28:	beq	ef40 <rb_inet_ntop+0x674>
    ef2c:	add	r3, r3, #1
    ef30:	strb	r2, [r1], #1
    ef34:	ldrb	r2, [r3], #1
    ef38:	cmp	r2, #0
    ef3c:	bne	ef30 <rb_inet_ntop+0x664>
    ef40:	mov	r2, #46	; 0x2e
    ef44:	strb	r2, [r1], #1
    ef48:	ldrb	r2, [sl, #3]
    ef4c:	ldr	r2, [r0, r2, lsl #2]
    ef50:	ldrb	r0, [r2]
    ef54:	cmp	r0, #0
    ef58:	beq	ef70 <rb_inet_ntop+0x6a4>
    ef5c:	add	r2, r2, #1
    ef60:	strb	r0, [r1], #1
    ef64:	ldrb	r0, [r2], #1
    ef68:	cmp	r0, #0
    ef6c:	bne	ef60 <rb_inet_ntop+0x694>
    ef70:	mov	r0, #0
    ef74:	strb	r0, [r1]
    ef78:	mov	r0, r8
    ef7c:	ldr	r1, [pc, #1180]	; f420 <rb_inet_ntop+0xb54>
    ef80:	add	r1, pc, r1
    ef84:	bl	5124 <strcpy@plt>
    ef88:	sub	sp, fp, #28
    ef8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef90:	mov	r0, #58	; 0x3a
    ef94:	strb	r0, [r4], #1
    ef98:	ldr	r1, [pc, #1188]	; f444 <rb_inet_ntop+0xb78>
    ef9c:	ldr	r2, [sp, #8]
    efa0:	mov	r0, r4
    efa4:	add	r1, pc, r1
    efa8:	bl	5544 <sprintf@plt>
    efac:	add	r4, r4, r0
    efb0:	cmp	r7, #3
    efb4:	ble	ee5c <rb_inet_ntop+0x590>
    efb8:	mov	r0, #58	; 0x3a
    efbc:	strb	r0, [r4], #1
    efc0:	ldr	r1, [pc, #1168]	; f458 <rb_inet_ntop+0xb8c>
    efc4:	ldr	r2, [sp, #16]
    efc8:	mov	r0, r4
    efcc:	add	r1, pc, r1
    efd0:	bl	5544 <sprintf@plt>
    efd4:	add	r4, r4, r0
    efd8:	cmp	r7, #4
    efdc:	ble	ee78 <rb_inet_ntop+0x5ac>
    efe0:	mov	r0, #58	; 0x3a
    efe4:	strb	r0, [r4], #1
    efe8:	ldr	r1, [pc, #1132]	; f45c <rb_inet_ntop+0xb90>
    efec:	ldr	r2, [sp, #40]	; 0x28
    eff0:	mov	r0, r4
    eff4:	add	r1, pc, r1
    eff8:	bl	5544 <sprintf@plt>
    effc:	add	r4, r4, r0
    f000:	cmp	r7, #5
    f004:	ble	ee94 <rb_inet_ntop+0x5c8>
    f008:	mov	r0, #58	; 0x3a
    f00c:	strb	r0, [r4], #1
    f010:	ldr	r1, [pc, #1096]	; f460 <rb_inet_ntop+0xb94>
    f014:	ldr	r2, [sp, #44]	; 0x2c
    f018:	mov	r0, r4
    f01c:	add	r1, pc, r1
    f020:	bl	5544 <sprintf@plt>
    f024:	add	r4, r4, r0
    f028:	cmp	r7, #6
    f02c:	ble	eeb0 <rb_inet_ntop+0x5e4>
    f030:	mov	r0, #58	; 0x3a
    f034:	mov	r2, r6
    f038:	strb	r0, [r4], #1
    f03c:	ldr	r1, [pc, #1056]	; f464 <rb_inet_ntop+0xb98>
    f040:	mov	r0, r4
    f044:	add	r1, pc, r1
    f048:	bl	5544 <sprintf@plt>
    f04c:	add	r4, r4, r0
    f050:	cmp	r8, #7
    f054:	ble	f214 <rb_inet_ntop+0x948>
    f058:	cmp	r7, #7
    f05c:	moveq	r0, #58	; 0x3a
    f060:	strbeq	r0, [r4], #1
    f064:	cmn	r7, #1
    f068:	bne	f328 <rb_inet_ntop+0xa5c>
    f06c:	b	f334 <rb_inet_ntop+0xa68>
    f070:	ldr	r1, [sl, #8]
    f074:	cmn	r1, #65536	; 0x10000
    f078:	bne	f238 <rb_inet_ntop+0x96c>
    f07c:	cmp	r6, #16
    f080:	bcc	f34c <rb_inet_ntop+0xa80>
    f084:	ldrb	r1, [sl, #12]
    f088:	ldr	r0, [pc, #916]	; f424 <rb_inet_ntop+0xb58>
    f08c:	add	r0, pc, r0
    f090:	ldr	r1, [r0, r1, lsl #2]
    f094:	ldrb	r2, [r1]
    f098:	cmp	r2, #0
    f09c:	beq	f370 <rb_inet_ntop+0xaa4>
    f0a0:	add	r3, r1, #1
    f0a4:	ldr	r1, [pc, #896]	; f42c <rb_inet_ntop+0xb60>
    f0a8:	add	r1, pc, r1
    f0ac:	strb	r2, [r1], #1
    f0b0:	ldrb	r2, [r3], #1
    f0b4:	cmp	r2, #0
    f0b8:	bne	f0ac <rb_inet_ntop+0x7e0>
    f0bc:	b	f378 <rb_inet_ntop+0xaac>
    f0c0:	ldr	r1, [pc, #872]	; f430 <rb_inet_ntop+0xb64>
    f0c4:	ldr	r2, [sp, #12]
    f0c8:	add	r4, sp, #56	; 0x38
    f0cc:	mov	r0, r4
    f0d0:	add	r1, pc, r1
    f0d4:	bl	5544 <sprintf@plt>
    f0d8:	add	r4, r4, r0
    f0dc:	mov	r0, #58	; 0x3a
    f0e0:	ldr	r2, [sp, #4]
    f0e4:	strb	r0, [r4], #1
    f0e8:	ldr	r1, [pc, #836]	; f434 <rb_inet_ntop+0xb68>
    f0ec:	mov	r0, r4
    f0f0:	add	r1, pc, r1
    f0f4:	bl	5544 <sprintf@plt>
    f0f8:	add	r4, r4, r0
    f0fc:	mov	r0, #58	; 0x3a
    f100:	strb	r0, [r4], #1
    f104:	ldr	r1, [pc, #812]	; f438 <rb_inet_ntop+0xb6c>
    f108:	ldr	r2, [sp, #8]
    f10c:	mov	r0, r4
    f110:	add	r1, pc, r1
    f114:	bl	5544 <sprintf@plt>
    f118:	add	r4, r4, r0
    f11c:	mov	r0, #58	; 0x3a
    f120:	strb	r0, [r4], #1
    f124:	ldr	r1, [pc, #836]	; f470 <rb_inet_ntop+0xba4>
    f128:	ldr	r2, [sp, #16]
    f12c:	mov	r0, r4
    f130:	add	r1, pc, r1
    f134:	bl	5544 <sprintf@plt>
    f138:	add	r4, r4, r0
    f13c:	mov	r0, #58	; 0x3a
    f140:	strb	r0, [r4], #1
    f144:	ldr	r1, [pc, #808]	; f474 <rb_inet_ntop+0xba8>
    f148:	ldr	r2, [sp, #40]	; 0x28
    f14c:	mov	r0, r4
    f150:	add	r1, pc, r1
    f154:	bl	5544 <sprintf@plt>
    f158:	add	r4, r4, r0
    f15c:	mov	r0, #58	; 0x3a
    f160:	strb	r0, [r4], #1
    f164:	ldr	r1, [pc, #780]	; f478 <rb_inet_ntop+0xbac>
    f168:	ldr	r2, [sp, #44]	; 0x2c
    f16c:	mov	r0, r4
    f170:	add	r1, pc, r1
    f174:	bl	5544 <sprintf@plt>
    f178:	add	r4, r4, r0
    f17c:	mov	r0, #58	; 0x3a
    f180:	cmp	r9, #6
    f184:	strb	r0, [r4], #1
    f188:	beq	f1a4 <rb_inet_ntop+0x8d8>
    f18c:	cmp	r9, #5
    f190:	bne	f1f8 <rb_inet_ntop+0x92c>
    f194:	ldr	r1, [sp, #44]	; 0x2c
    f198:	movw	r0, #65535	; 0xffff
    f19c:	cmp	r1, r0
    f1a0:	bne	f1f8 <rb_inet_ntop+0x92c>
    f1a4:	add	r0, sp, #56	; 0x38
    f1a8:	sub	r0, r0, r4
    f1ac:	add	r1, r0, #46	; 0x2e
    f1b0:	mov	r0, #0
    f1b4:	cmp	r1, #16
    f1b8:	bcc	f34c <rb_inet_ntop+0xa80>
    f1bc:	ldrb	r0, [sl, #12]
    f1c0:	ldr	ip, [pc, #640]	; f448 <rb_inet_ntop+0xb7c>
    f1c4:	add	ip, pc, ip
    f1c8:	ldr	r1, [ip, r0, lsl #2]
    f1cc:	ldrb	r2, [r1]
    f1d0:	cmp	r2, #0
    f1d4:	beq	f25c <rb_inet_ntop+0x990>
    f1d8:	add	r3, r1, #1
    f1dc:	ldr	r1, [pc, #620]	; f450 <rb_inet_ntop+0xb84>
    f1e0:	add	r1, pc, r1
    f1e4:	strb	r2, [r1], #1
    f1e8:	ldrb	r2, [r3], #1
    f1ec:	cmp	r2, #0
    f1f0:	bne	f1e4 <rb_inet_ntop+0x918>
    f1f4:	b	f264 <rb_inet_ntop+0x998>
    f1f8:	ldr	r1, [pc, #636]	; f47c <rb_inet_ntop+0xbb0>
    f1fc:	mov	r0, r4
    f200:	mov	r2, r6
    f204:	add	r1, pc, r1
    f208:	bl	5544 <sprintf@plt>
    f20c:	ldr	r9, [sp, #20]
    f210:	add	r4, r4, r0
    f214:	mov	r0, #58	; 0x3a
    f218:	strb	r0, [r4], #1
    f21c:	ldr	r1, [pc, #580]	; f468 <rb_inet_ntop+0xb9c>
    f220:	ldr	r2, [sp, #52]	; 0x34
    f224:	mov	r0, r4
    f228:	add	r1, pc, r1
    f22c:	bl	5544 <sprintf@plt>
    f230:	add	r4, r4, r0
    f234:	b	f334 <rb_inet_ntop+0xa68>
    f238:	ldr	r1, [sl, #8]
    f23c:	mov	r4, #0
    f240:	cmp	r1, #0
    f244:	bne	e960 <rb_inet_ntop+0x94>
    f248:	ldr	r1, [sl, #12]
    f24c:	rev	r1, r1
    f250:	cmp	r1, #2
    f254:	bcc	e960 <rb_inet_ntop+0x94>
    f258:	b	f07c <rb_inet_ntop+0x7b0>
    f25c:	ldr	r1, [pc, #488]	; f44c <rb_inet_ntop+0xb80>
    f260:	add	r1, pc, r1
    f264:	mov	r2, #46	; 0x2e
    f268:	mov	r3, r1
    f26c:	ldr	r9, [sp, #20]
    f270:	strb	r2, [r3], #1
    f274:	ldrb	r0, [sl, #13]
    f278:	ldr	r0, [ip, r0, lsl #2]
    f27c:	ldrb	r5, [r0]
    f280:	cmp	r5, #0
    f284:	beq	f2a0 <rb_inet_ntop+0x9d4>
    f288:	add	r1, r0, #1
    f28c:	strb	r5, [r3], #1
    f290:	ldrb	r5, [r1], #1
    f294:	cmp	r5, #0
    f298:	bne	f28c <rb_inet_ntop+0x9c0>
    f29c:	sub	r1, r3, #1
    f2a0:	strb	r2, [r3]
    f2a4:	add	r1, r1, #2
    f2a8:	ldrb	r0, [sl, #14]
    f2ac:	ldr	r3, [ip, r0, lsl #2]
    f2b0:	ldrb	r2, [r3]
    f2b4:	cmp	r2, #0
    f2b8:	beq	f2d0 <rb_inet_ntop+0xa04>
    f2bc:	add	r3, r3, #1
    f2c0:	strb	r2, [r1], #1
    f2c4:	ldrb	r2, [r3], #1
    f2c8:	cmp	r2, #0
    f2cc:	bne	f2c0 <rb_inet_ntop+0x9f4>
    f2d0:	mov	r0, #46	; 0x2e
    f2d4:	strb	r0, [r1], #1
    f2d8:	ldrb	r0, [sl, #15]
    f2dc:	ldr	r2, [ip, r0, lsl #2]
    f2e0:	ldrb	r0, [r2]
    f2e4:	cmp	r0, #0
    f2e8:	beq	f300 <rb_inet_ntop+0xa34>
    f2ec:	add	r2, r2, #1
    f2f0:	strb	r0, [r1], #1
    f2f4:	ldrb	r0, [r2], #1
    f2f8:	cmp	r0, #0
    f2fc:	bne	f2f0 <rb_inet_ntop+0xa24>
    f300:	mov	r0, #0
    f304:	strb	r0, [r1]
    f308:	mov	r0, r4
    f30c:	ldr	r1, [pc, #320]	; f454 <rb_inet_ntop+0xb88>
    f310:	add	r1, pc, r1
    f314:	bl	5124 <strcpy@plt>
    f318:	bl	5070 <strlen@plt>
    f31c:	add	r4, r4, r0
    f320:	cmn	r7, #1
    f324:	beq	f334 <rb_inet_ntop+0xa68>
    f328:	cmp	r8, #8
    f32c:	moveq	r0, #58	; 0x3a
    f330:	strbeq	r0, [r4], #1
    f334:	add	r1, sp, #56	; 0x38
    f338:	mov	r0, #0
    f33c:	strb	r0, [r4], -r1
    f340:	add	r2, r4, #1
    f344:	cmp	r2, r9
    f348:	bls	f354 <rb_inet_ntop+0xa88>
    f34c:	sub	sp, fp, #28
    f350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f354:	ldr	r4, [sp]
    f358:	add	r1, sp, #56	; 0x38
    f35c:	mov	r0, r4
    f360:	bl	5094 <memcpy@plt>
    f364:	mov	r0, r4
    f368:	sub	sp, fp, #28
    f36c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f370:	ldr	r1, [pc, #176]	; f428 <rb_inet_ntop+0xb5c>
    f374:	add	r1, pc, r1
    f378:	mov	r2, #46	; 0x2e
    f37c:	mov	r3, r1
    f380:	strb	r2, [r3], #1
    f384:	ldrb	r7, [sl, #13]
    f388:	ldr	r5, [r0, r7, lsl #2]
    f38c:	ldrb	r7, [r5]
    f390:	cmp	r7, #0
    f394:	beq	f3b0 <rb_inet_ntop+0xae4>
    f398:	add	r1, r5, #1
    f39c:	strb	r7, [r3], #1
    f3a0:	ldrb	r7, [r1], #1
    f3a4:	cmp	r7, #0
    f3a8:	bne	f39c <rb_inet_ntop+0xad0>
    f3ac:	sub	r1, r3, #1
    f3b0:	strb	r2, [r3]
    f3b4:	add	r1, r1, #2
    f3b8:	ldrb	r2, [sl, #14]
    f3bc:	ldr	r3, [r0, r2, lsl #2]
    f3c0:	ldrb	r2, [r3]
    f3c4:	cmp	r2, #0
    f3c8:	beq	f3e0 <rb_inet_ntop+0xb14>
    f3cc:	add	r3, r3, #1
    f3d0:	strb	r2, [r1], #1
    f3d4:	ldrb	r2, [r3], #1
    f3d8:	cmp	r2, #0
    f3dc:	bne	f3d0 <rb_inet_ntop+0xb04>
    f3e0:	mov	r2, #46	; 0x2e
    f3e4:	strb	r2, [r1], #1
    f3e8:	ldrb	r2, [sl, #15]
    f3ec:	ldr	r2, [r0, r2, lsl #2]
    f3f0:	ldrb	r0, [r2]
    f3f4:	cmp	r0, #0
    f3f8:	beq	ef70 <rb_inet_ntop+0x6a4>
    f3fc:	add	r2, r2, #1
    f400:	strb	r0, [r1], #1
    f404:	ldrb	r0, [r2], #1
    f408:	cmp	r0, #0
    f40c:	bne	f400 <rb_inet_ntop+0xb34>
    f410:	b	ef70 <rb_inet_ntop+0x6a4>
    f414:	.word	0x0001e144
    f418:	.word	0x00030a2c
    f41c:	.word	0x00030fd8
    f420:	.word	0x00030980
    f424:	.word	0x0001d9c4
    f428:	.word	0x0003058c
    f42c:	.word	0x00030858
    f430:	.word	0x0000c1ed
    f434:	.word	0x0000c1cd
    f438:	.word	0x0000c1ad
    f43c:	.word	0x0000c4c5
    f440:	.word	0x0000c495
    f444:	.word	0x0000c319
    f448:	.word	0x0001d88c
    f44c:	.word	0x000306a0
    f450:	.word	0x00030720
    f454:	.word	0x000305f0
    f458:	.word	0x0000c2f1
    f45c:	.word	0x0000c2c9
    f460:	.word	0x0000c2a1
    f464:	.word	0x0000c279
    f468:	.word	0x0000c095
    f46c:	.word	0x0000c599
    f470:	.word	0x0000c18d
    f474:	.word	0x0000c16d
    f478:	.word	0x0000c14d
    f47c:	.word	0x0000c0b9

0000f480 <inet_pton6>:
    f480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f484:	add	fp, sp, #28
    f488:	sub	sp, sp, #44	; 0x2c
    f48c:	vmov.i32	q8, #0	; 0x00000000
    f490:	mov	sl, r0
    f494:	add	r0, sp, #24
    f498:	str	r1, [sp, #4]
    f49c:	str	r0, [sp, #20]
    f4a0:	vst1.64	{d16-d17}, [r0]!
    f4a4:	ldrb	r4, [sl]
    f4a8:	str	r0, [sp, #16]
    f4ac:	cmp	r4, #58	; 0x3a
    f4b0:	bne	f4c4 <inet_pton6+0x44>
    f4b4:	ldrb	r1, [sl, #1]!
    f4b8:	mov	r0, #0
    f4bc:	cmp	r1, #58	; 0x3a
    f4c0:	bne	f824 <inet_pton6+0x3a4>
    f4c4:	bl	50b8 <__ctype_tolower_loc@plt>
    f4c8:	ldr	r6, [r0]
    f4cc:	str	r0, [sp, #8]
    f4d0:	ldr	r4, [r6, r4, lsl #2]
    f4d4:	cmp	r4, #0
    f4d8:	beq	f764 <inet_pton6+0x2e4>
    f4dc:	mov	r0, #0
    f4e0:	add	r5, sl, #1
    f4e4:	mov	r8, #0
    f4e8:	mov	r9, #0
    f4ec:	str	r0, [sp, #12]
    f4f0:	ldr	r7, [pc, #1024]	; f8f8 <inet_pton6+0x478>
    f4f4:	add	r7, pc, r7
    f4f8:	b	f524 <inet_pton6+0xa4>
    f4fc:	sub	r0, r0, r7
    f500:	mov	r9, #1
    f504:	orr	r8, r0, r8, lsl #4
    f508:	mov	r0, #0
    f50c:	cmp	r0, r8, lsr #16
    f510:	bne	f824 <inet_pton6+0x3a4>
    f514:	ldrb	r0, [r5], #1
    f518:	ldr	r4, [r6, r0, lsl #2]
    f51c:	cmp	r4, #0
    f520:	beq	f5e4 <inet_pton6+0x164>
    f524:	mov	r0, r7
    f528:	mov	r1, r4
    f52c:	mov	r2, #17
    f530:	bl	5508 <memchr@plt>
    f534:	cmp	r0, #0
    f538:	bne	f4fc <inet_pton6+0x7c>
    f53c:	cmp	r4, #58	; 0x3a
    f540:	bne	f5a8 <inet_pton6+0x128>
    f544:	cmp	r9, #0
    f548:	beq	f5c0 <inet_pton6+0x140>
    f54c:	ldr	r0, [sp, #20]
    f550:	ldr	r2, [sp, #16]
    f554:	add	r1, r0, #2
    f558:	mov	r0, #0
    f55c:	cmp	r1, r2
    f560:	bhi	f824 <inet_pton6+0x3a4>
    f564:	ldrb	r2, [r5]
    f568:	cmp	r2, #0
    f56c:	beq	f824 <inet_pton6+0x3a4>
    f570:	ldr	r2, [sp, #20]
    f574:	rev16	r0, r8
    f578:	mov	r9, #0
    f57c:	mov	sl, r5
    f580:	mov	r8, #0
    f584:	str	r1, [sp, #20]
    f588:	strh	r0, [r2]
    f58c:	ldr	r0, [sp, #8]
    f590:	ldr	r6, [r0]
    f594:	ldrb	r0, [r5], #1
    f598:	ldr	r4, [r6, r0, lsl #2]
    f59c:	cmp	r4, #0
    f5a0:	bne	f524 <inet_pton6+0xa4>
    f5a4:	b	f5e4 <inet_pton6+0x164>
    f5a8:	cmp	r4, #46	; 0x2e
    f5ac:	bne	f514 <inet_pton6+0x94>
    f5b0:	ldrb	r0, [r5]
    f5b4:	cmp	r0, #0
    f5b8:	beq	f514 <inet_pton6+0x94>
    f5bc:	b	f67c <inet_pton6+0x1fc>
    f5c0:	ldr	r0, [sp, #12]
    f5c4:	mov	r9, #0
    f5c8:	mov	sl, r5
    f5cc:	cmp	r0, #0
    f5d0:	ldr	r0, [sp, #20]
    f5d4:	str	r0, [sp, #12]
    f5d8:	mov	r0, #0
    f5dc:	beq	f514 <inet_pton6+0x94>
    f5e0:	b	f824 <inet_pton6+0x3a4>
    f5e4:	cmp	r9, #0
    f5e8:	beq	f630 <inet_pton6+0x1b0>
    f5ec:	ldr	r0, [sp, #20]
    f5f0:	ldr	r2, [sp, #16]
    f5f4:	add	r1, r0, #2
    f5f8:	mov	r0, #0
    f5fc:	cmp	r1, r2
    f600:	bhi	f824 <inet_pton6+0x3a4>
    f604:	ldr	r2, [sp, #20]
    f608:	rev16	r0, r8
    f60c:	strh	r0, [r2]
    f610:	ldr	r2, [sp, #12]
    f614:	cmp	r2, #0
    f618:	bne	f640 <inet_pton6+0x1c0>
    f61c:	ldr	r2, [sp, #16]
    f620:	mov	r0, #0
    f624:	cmp	r1, r2
    f628:	bne	f824 <inet_pton6+0x3a4>
    f62c:	b	f810 <inet_pton6+0x390>
    f630:	ldr	r1, [sp, #20]
    f634:	ldr	r2, [sp, #12]
    f638:	cmp	r2, #0
    f63c:	beq	f61c <inet_pton6+0x19c>
    f640:	ldr	r0, [sp, #16]
    f644:	cmp	r1, r0
    f648:	beq	f764 <inet_pton6+0x2e4>
    f64c:	sub	r8, r1, r2
    f650:	cmp	r8, #1
    f654:	blt	f810 <inet_pton6+0x390>
    f658:	mov	r9, r2
    f65c:	mov	r3, #1
    f660:	cmp	r8, #16
    f664:	bcs	f770 <inet_pton6+0x2f0>
    f668:	mov	sl, r9
    f66c:	sub	r2, r1, r3
    f670:	tst	r8, #1
    f674:	bne	f7a0 <inet_pton6+0x320>
    f678:	b	f7bc <inet_pton6+0x33c>
    f67c:	ldr	r0, [sp, #20]
    f680:	ldr	r2, [sp, #16]
    f684:	add	r1, r0, #4
    f688:	mov	r0, #0
    f68c:	cmp	r1, r2
    f690:	bhi	f824 <inet_pton6+0x3a4>
    f694:	mov	r7, #0
    f698:	strb	r7, [fp, #-32]	; 0xffffffe0
    f69c:	ldrb	r5, [sl]
    f6a0:	cmp	r5, #0
    f6a4:	beq	f764 <inet_pton6+0x2e4>
    f6a8:	add	r0, sl, #1
    f6ac:	sub	r2, fp, #32
    f6b0:	mov	r3, #0
    f6b4:	mov	r6, #0
    f6b8:	sub	r4, r5, #48	; 0x30
    f6bc:	uxtb	r4, r4
    f6c0:	cmp	r4, #9
    f6c4:	bhi	f728 <inet_pton6+0x2a8>
    f6c8:	b	f6f0 <inet_pton6+0x270>
    f6cc:	add	r3, r3, #1
    f6d0:	mov	r6, #1
    f6d4:	ldrb	r5, [r0], #1
    f6d8:	cmp	r5, #0
    f6dc:	beq	f75c <inet_pton6+0x2dc>
    f6e0:	sub	r4, r5, #48	; 0x30
    f6e4:	uxtb	r4, r4
    f6e8:	cmp	r4, #9
    f6ec:	bhi	f728 <inet_pton6+0x2a8>
    f6f0:	uxtb	r4, r7
    f6f4:	lsl	r4, r4, #2
    f6f8:	uxtab	r7, r4, r7
    f6fc:	lsl	r7, r7, #1
    f700:	uxtab	r7, r7, r5
    f704:	sub	r7, r7, #48	; 0x30
    f708:	cmp	r7, #255	; 0xff
    f70c:	bhi	f764 <inet_pton6+0x2e4>
    f710:	cmp	r6, #0
    f714:	strb	r7, [r2]
    f718:	bne	f6d4 <inet_pton6+0x254>
    f71c:	cmp	r3, #3
    f720:	ble	f6cc <inet_pton6+0x24c>
    f724:	b	f764 <inet_pton6+0x2e4>
    f728:	cmp	r3, #4
    f72c:	beq	f764 <inet_pton6+0x2e4>
    f730:	uxtb	r7, r5
    f734:	cmp	r7, #46	; 0x2e
    f738:	bne	f764 <inet_pton6+0x2e4>
    f73c:	cmp	r6, #0
    f740:	beq	f764 <inet_pton6+0x2e4>
    f744:	mov	r7, #0
    f748:	mov	r6, #0
    f74c:	strb	r7, [r2, #1]!
    f750:	ldrb	r5, [r0], #1
    f754:	cmp	r5, #0
    f758:	bne	f6e0 <inet_pton6+0x260>
    f75c:	cmp	r3, #3
    f760:	bgt	f8dc <inet_pton6+0x45c>
    f764:	mov	r0, #0
    f768:	sub	sp, fp, #28
    f76c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f770:	mvn	r2, r9
    f774:	mov	sl, r9
    f778:	add	r7, r2, r1
    f77c:	add	r2, sp, #24
    f780:	add	r6, r2, #15
    f784:	cmp	r7, r6
    f788:	addls	r6, sl, r7
    f78c:	cmpls	r7, r6
    f790:	bls	f82c <inet_pton6+0x3ac>
    f794:	sub	r2, r1, r3
    f798:	tst	r8, #1
    f79c:	beq	f7bc <inet_pton6+0x33c>
    f7a0:	sub	r0, r8, r3
    f7a4:	ldr	r6, [sp, #16]
    f7a8:	ldrb	r7, [sl, r0]
    f7ac:	strb	r7, [r6, -r3]
    f7b0:	mov	r7, #0
    f7b4:	add	r3, r3, #1
    f7b8:	strb	r7, [sl, r0]
    f7bc:	cmp	r2, sl
    f7c0:	beq	f810 <inet_pton6+0x390>
    f7c4:	mvn	r0, r1
    f7c8:	rsb	r1, r3, #0
    f7cc:	add	r7, r9, r8
    f7d0:	add	r2, sp, #24
    f7d4:	mov	r3, #0
    f7d8:	add	r0, r0, r9
    f7dc:	sub	r6, r7, #2
    f7e0:	ldrb	r5, [r7, r1]!
    f7e4:	add	r4, r2, r1
    f7e8:	add	r0, r0, #2
    f7ec:	sub	r2, r2, #2
    f7f0:	cmp	r1, r0
    f7f4:	strb	r5, [r4, #16]
    f7f8:	strb	r3, [r7]
    f7fc:	ldrb	r5, [r7, #-1]
    f800:	strb	r5, [r4, #15]
    f804:	strb	r3, [r7, #-1]
    f808:	mov	r7, r6
    f80c:	bne	f7dc <inet_pton6+0x35c>
    f810:	add	r0, sp, #24
    f814:	vld1.64	{d16-d17}, [r0]
    f818:	ldr	r0, [sp, #4]
    f81c:	vst1.8	{d16-d17}, [r0]
    f820:	mov	r0, #1
    f824:	sub	sp, fp, #28
    f828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f82c:	sub	r6, sl, r1
    f830:	add	r7, r2, #16
    f834:	add	r6, r7, r6
    f838:	cmp	r6, r1
    f83c:	cmpcc	sl, r7
    f840:	bcc	f794 <inet_pton6+0x314>
    f844:	bic	ip, r8, #15
    f848:	mov	r7, #1
    f84c:	subs	r3, ip, #16
    f850:	add	r3, r7, r3, lsr #4
    f854:	and	lr, r3, #1
    f858:	beq	f89c <inet_pton6+0x41c>
    f85c:	vmov.i32	q8, #0	; 0x00000000
    f860:	sub	r5, lr, r3
    f864:	sub	r4, r1, #32
    f868:	mov	r7, #1
    f86c:	mvn	r3, #31
    f870:	add	r6, r4, #16
    f874:	sub	r0, r2, #16
    f878:	adds	r5, r5, #2
    f87c:	add	r7, r7, #32
    f880:	vld1.8	{d18-d19}, [r6]
    f884:	vst1.8	{d18-d19}, [r2], r3
    f888:	vld1.8	{d18-d19}, [r4]
    f88c:	vst1.8	{d16-d17}, [r6]
    f890:	vst1.8	{d18-d19}, [r0]
    f894:	vst1.8	{d16-d17}, [r4], r3
    f898:	bne	f870 <inet_pton6+0x3f0>
    f89c:	cmp	lr, #0
    f8a0:	beq	f8cc <inet_pton6+0x44c>
    f8a4:	sub	r2, r8, r7
    f8a8:	add	r0, sp, #24
    f8ac:	vmov.i32	q9, #0	; 0x00000000
    f8b0:	add	r2, sl, r2
    f8b4:	sub	r0, r0, r7
    f8b8:	sub	r2, r2, #15
    f8bc:	add	r0, r0, #1
    f8c0:	vld1.8	{d16-d17}, [r2]
    f8c4:	vst1.8	{d16-d17}, [r0]
    f8c8:	vst1.8	{d18-d19}, [r2]
    f8cc:	cmp	r8, ip
    f8d0:	beq	f810 <inet_pton6+0x390>
    f8d4:	orr	r3, ip, #1
    f8d8:	b	f668 <inet_pton6+0x1e8>
    f8dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    f8e0:	ldr	r2, [sp, #20]
    f8e4:	str	r0, [r2]
    f8e8:	ldr	r2, [sp, #12]
    f8ec:	cmp	r2, #0
    f8f0:	bne	f640 <inet_pton6+0x1c0>
    f8f4:	b	f61c <inet_pton6+0x19c>
    f8f8:	.word	0x0000bdd1

0000f8fc <rb_get_iotype>:
    f8fc:	ldr	r0, [pc, #8]	; f90c <rb_get_iotype+0x10>
    f900:	add	r0, pc, r0
    f904:	add	r0, r0, #68	; 0x44
    f908:	bx	lr
    f90c:	.word	0x00030010

0000f910 <rb_io_sched_event>:
    f910:	push	{r4, r5, r6, sl, fp, lr}
    f914:	add	fp, sp, #16
    f918:	cmp	r0, #0
    f91c:	beq	f944 <rb_io_sched_event+0x34>
    f920:	ldr	r6, [pc, #68]	; f96c <rb_io_sched_event+0x5c>
    f924:	mov	r5, r0
    f928:	add	r6, pc, r6
    f92c:	ldr	r0, [r6, #16]
    f930:	cmp	r0, #0
    f934:	movne	r4, r1
    f938:	ldrne	r1, [r6, #20]
    f93c:	cmpne	r1, #0
    f940:	bne	f94c <rb_io_sched_event+0x3c>
    f944:	mov	r0, #0
    f948:	pop	{r4, r5, r6, sl, fp, pc}
    f94c:	blx	r0
    f950:	cmp	r0, #0
    f954:	beq	f944 <rb_io_sched_event+0x34>
    f958:	ldr	r2, [r6, #20]
    f95c:	mov	r0, r5
    f960:	mov	r1, r4
    f964:	pop	{r4, r5, r6, sl, fp, lr}
    f968:	bx	r2
    f96c:	.word	0x0002ffe8

0000f970 <rb_io_unsched_event>:
    f970:	push	{r4, r5, fp, lr}
    f974:	add	fp, sp, #8
    f978:	cmp	r0, #0
    f97c:	beq	f9a0 <rb_io_unsched_event+0x30>
    f980:	ldr	r5, [pc, #56]	; f9c0 <rb_io_unsched_event+0x50>
    f984:	mov	r4, r0
    f988:	add	r5, pc, r5
    f98c:	ldr	r0, [r5, #16]
    f990:	cmp	r0, #0
    f994:	ldrne	r1, [r5, #24]
    f998:	cmpne	r1, #0
    f99c:	bne	f9a4 <rb_io_unsched_event+0x34>
    f9a0:	pop	{r4, r5, fp, pc}
    f9a4:	blx	r0
    f9a8:	cmp	r0, #0
    f9ac:	popeq	{r4, r5, fp, pc}
    f9b0:	ldr	r1, [r5, #24]
    f9b4:	mov	r0, r4
    f9b8:	pop	{r4, r5, fp, lr}
    f9bc:	bx	r1
    f9c0:	.word	0x0002ff88

0000f9c4 <rb_io_supports_event>:
    f9c4:	ldr	r0, [pc, #20]	; f9e0 <rb_io_supports_event+0x1c>
    f9c8:	add	r0, pc, r0
    f9cc:	ldr	r0, [r0, #16]
    f9d0:	cmp	r0, #0
    f9d4:	moveq	r0, #0
    f9d8:	bxeq	lr
    f9dc:	bx	r0
    f9e0:	.word	0x0002ff48

0000f9e4 <rb_io_init_event>:
    f9e4:	push	{fp, lr}
    f9e8:	mov	fp, sp
    f9ec:	ldr	r0, [pc, #16]	; fa04 <rb_io_init_event+0x20>
    f9f0:	add	r0, pc, r0
    f9f4:	ldr	r0, [r0, #28]
    f9f8:	blx	r0
    f9fc:	pop	{fp, lr}
    fa00:	b	11ed0 <rb_event_io_register_all>
    fa04:	.word	0x0002ff20

0000fa08 <rb_init_netio>:
    fa08:	push	{r4, r5, r6, sl, fp, lr}
    fa0c:	add	fp, sp, #16
    fa10:	ldr	r0, [pc, #1664]	; 10098 <rb_init_netio+0x690>
    fa14:	add	r0, pc, r0
    fa18:	bl	4e54 <getenv@plt>
    fa1c:	mov	r5, r0
    fa20:	mov	r0, #1
    fa24:	mov	r1, #49152	; 0xc000
    fa28:	bl	4e9c <calloc@plt>
    fa2c:	cmp	r0, #0
    fa30:	beq	10084 <rb_init_netio+0x67c>
    fa34:	ldr	r1, [pc, #1632]	; 1009c <rb_init_netio+0x694>
    fa38:	ldr	r1, [pc, r1]
    fa3c:	str	r0, [r1]
    fa40:	bl	10754 <rb_init_ssl>
    fa44:	ldr	r6, [pc, #1620]	; 100a0 <rb_init_netio+0x698>
    fa48:	cmp	r5, #0
    fa4c:	add	r6, pc, r6
    fa50:	beq	fcec <rb_init_netio+0x2e4>
    fa54:	ldr	r4, [pc, #1608]	; 100a4 <rb_init_netio+0x69c>
    fa58:	mov	r1, r5
    fa5c:	add	r4, pc, r4
    fa60:	mov	r0, r4
    fa64:	bl	5520 <strcmp@plt>
    fa68:	cmp	r0, #0
    fa6c:	beq	fb4c <rb_init_netio+0x144>
    fa70:	ldr	r4, [pc, #1612]	; 100c4 <rb_init_netio+0x6bc>
    fa74:	mov	r1, r5
    fa78:	add	r4, pc, r4
    fa7c:	mov	r0, r4
    fa80:	bl	5520 <strcmp@plt>
    fa84:	cmp	r0, #0
    fa88:	beq	fba4 <rb_init_netio+0x19c>
    fa8c:	ldr	r4, [pc, #1616]	; 100e4 <rb_init_netio+0x6dc>
    fa90:	mov	r1, r5
    fa94:	add	r4, pc, r4
    fa98:	mov	r0, r4
    fa9c:	bl	5520 <strcmp@plt>
    faa0:	cmp	r0, #0
    faa4:	beq	fbec <rb_init_netio+0x1e4>
    faa8:	ldr	r4, [pc, #1620]	; 10104 <rb_init_netio+0x6fc>
    faac:	mov	r1, r5
    fab0:	add	r4, pc, r4
    fab4:	mov	r0, r4
    fab8:	bl	5520 <strcmp@plt>
    fabc:	cmp	r0, #0
    fac0:	beq	fc50 <rb_init_netio+0x248>
    fac4:	ldr	r4, [pc, #1612]	; 10118 <rb_init_netio+0x710>
    fac8:	mov	r1, r5
    facc:	add	r4, pc, r4
    fad0:	mov	r0, r4
    fad4:	bl	5520 <strcmp@plt>
    fad8:	cmp	r0, #0
    fadc:	beq	fc84 <rb_init_netio+0x27c>
    fae0:	ldr	r4, [pc, #1604]	; 1012c <rb_init_netio+0x724>
    fae4:	mov	r1, r5
    fae8:	add	r4, pc, r4
    faec:	mov	r0, r4
    faf0:	bl	5520 <strcmp@plt>
    faf4:	cmp	r0, #0
    faf8:	beq	fcb8 <rb_init_netio+0x2b0>
    fafc:	ldr	r4, [pc, #1608]	; 1014c <rb_init_netio+0x744>
    fb00:	mov	r1, r5
    fb04:	add	r4, pc, r4
    fb08:	mov	r0, r4
    fb0c:	bl	5520 <strcmp@plt>
    fb10:	cmp	r0, #0
    fb14:	bne	fcc4 <rb_init_netio+0x2bc>
    fb18:	bl	16030 <rb_init_netio_select>
    fb1c:	cmp	r0, #0
    fb20:	bne	fcc4 <rb_init_netio+0x2bc>
    fb24:	ldr	r1, [pc, #1572]	; 10150 <rb_init_netio+0x748>
    fb28:	ldr	r2, [pc, #1572]	; 10154 <rb_init_netio+0x74c>
    fb2c:	mov	r0, #0
    fb30:	ldr	r2, [pc, r2]
    fb34:	ldr	r3, [pc, #1564]	; 10158 <rb_init_netio+0x750>
    fb38:	add	r1, pc, r1
    fb3c:	ldr	r3, [pc, r3]
    fb40:	ldr	r5, [pc, #1556]	; 1015c <rb_init_netio+0x754>
    fb44:	ldr	r5, [pc, r5]
    fb48:	b	ff20 <rb_init_netio+0x518>
    fb4c:	bl	14640 <rb_init_netio_epoll>
    fb50:	cmp	r0, #0
    fb54:	bne	fcc4 <rb_init_netio+0x2bc>
    fb58:	ldr	ip, [pc, #1352]	; 100a8 <rb_init_netio+0x6a0>
    fb5c:	ldr	ip, [pc, ip]
    fb60:	ldr	lr, [pc, #1348]	; 100ac <rb_init_netio+0x6a4>
    fb64:	ldr	lr, [pc, lr]
    fb68:	ldr	r2, [pc, #1344]	; 100b0 <rb_init_netio+0x6a8>
    fb6c:	ldr	r2, [pc, r2]
    fb70:	ldr	r3, [pc, #1340]	; 100b4 <rb_init_netio+0x6ac>
    fb74:	ldr	r3, [pc, r3]
    fb78:	ldr	r5, [pc, #1336]	; 100b8 <rb_init_netio+0x6b0>
    fb7c:	ldr	r5, [pc, r5]
    fb80:	ldr	r0, [pc, #1332]	; 100bc <rb_init_netio+0x6b4>
    fb84:	ldr	r0, [pc, r0]
    fb88:	ldr	r1, [pc, #1328]	; 100c0 <rb_init_netio+0x6b8>
    fb8c:	ldr	r1, [pc, r1]
    fb90:	str	r1, [r6, #16]
    fb94:	str	r5, [r6, #20]
    fb98:	str	r3, [r6, #24]
    fb9c:	str	r0, [r6, #28]
    fba0:	b	fc40 <rb_init_netio+0x238>
    fba4:	bl	166d4 <rb_init_netio_kqueue>
    fba8:	cmp	r0, #0
    fbac:	bne	fcc4 <rb_init_netio+0x2bc>
    fbb0:	ldr	ip, [pc, #1296]	; 100c8 <rb_init_netio+0x6c0>
    fbb4:	ldr	ip, [pc, ip]
    fbb8:	ldr	lr, [pc, #1292]	; 100cc <rb_init_netio+0x6c4>
    fbbc:	ldr	lr, [pc, lr]
    fbc0:	ldr	r2, [pc, #1288]	; 100d0 <rb_init_netio+0x6c8>
    fbc4:	ldr	r2, [pc, r2]
    fbc8:	ldr	r3, [pc, #1284]	; 100d4 <rb_init_netio+0x6cc>
    fbcc:	ldr	r3, [pc, r3]
    fbd0:	ldr	r5, [pc, #1280]	; 100d8 <rb_init_netio+0x6d0>
    fbd4:	ldr	r5, [pc, r5]
    fbd8:	ldr	r0, [pc, #1276]	; 100dc <rb_init_netio+0x6d4>
    fbdc:	ldr	r0, [pc, r0]
    fbe0:	ldr	r1, [pc, #1272]	; 100e0 <rb_init_netio+0x6d8>
    fbe4:	ldr	r1, [pc, r1]
    fbe8:	b	fc30 <rb_init_netio+0x228>
    fbec:	bl	1551c <rb_init_netio_ports>
    fbf0:	cmp	r0, #0
    fbf4:	bne	fcc4 <rb_init_netio+0x2bc>
    fbf8:	ldr	ip, [pc, #1256]	; 100e8 <rb_init_netio+0x6e0>
    fbfc:	ldr	ip, [pc, ip]
    fc00:	ldr	lr, [pc, #1252]	; 100ec <rb_init_netio+0x6e4>
    fc04:	ldr	lr, [pc, lr]
    fc08:	ldr	r2, [pc, #1248]	; 100f0 <rb_init_netio+0x6e8>
    fc0c:	ldr	r2, [pc, r2]
    fc10:	ldr	r3, [pc, #1244]	; 100f4 <rb_init_netio+0x6ec>
    fc14:	ldr	r3, [pc, r3]
    fc18:	ldr	r5, [pc, #1240]	; 100f8 <rb_init_netio+0x6f0>
    fc1c:	ldr	r5, [pc, r5]
    fc20:	ldr	r0, [pc, #1236]	; 100fc <rb_init_netio+0x6f4>
    fc24:	ldr	r0, [pc, r0]
    fc28:	ldr	r1, [pc, #1232]	; 10100 <rb_init_netio+0x6f8>
    fc2c:	ldr	r1, [pc, r1]
    fc30:	str	r1, [r6, #16]
    fc34:	str	r0, [r6, #20]
    fc38:	str	r5, [r6, #24]
    fc3c:	str	r3, [r6, #28]
    fc40:	str	r2, [r6, #32]
    fc44:	str	lr, [r6, #36]	; 0x24
    fc48:	str	ip, [r6, #40]	; 0x28
    fc4c:	b	10034 <rb_init_netio+0x62c>
    fc50:	bl	150d0 <rb_init_netio_poll>
    fc54:	cmp	r0, #0
    fc58:	bne	fcc4 <rb_init_netio+0x2bc>
    fc5c:	ldr	r1, [pc, #1188]	; 10108 <rb_init_netio+0x700>
    fc60:	ldr	r2, [pc, #1188]	; 1010c <rb_init_netio+0x704>
    fc64:	mov	r0, #0
    fc68:	ldr	r2, [pc, r2]
    fc6c:	ldr	r3, [pc, #1180]	; 10110 <rb_init_netio+0x708>
    fc70:	add	r1, pc, r1
    fc74:	ldr	r3, [pc, r3]
    fc78:	ldr	r5, [pc, #1172]	; 10114 <rb_init_netio+0x70c>
    fc7c:	ldr	r5, [pc, r5]
    fc80:	b	ff20 <rb_init_netio+0x518>
    fc84:	bl	145e8 <rb_init_netio_devpoll>
    fc88:	cmp	r0, #0
    fc8c:	bne	fcc4 <rb_init_netio+0x2bc>
    fc90:	ldr	r1, [pc, #1156]	; 1011c <rb_init_netio+0x714>
    fc94:	ldr	r2, [pc, #1156]	; 10120 <rb_init_netio+0x718>
    fc98:	mov	r0, #0
    fc9c:	ldr	r2, [pc, r2]
    fca0:	ldr	r3, [pc, #1148]	; 10124 <rb_init_netio+0x71c>
    fca4:	add	r1, pc, r1
    fca8:	ldr	r3, [pc, r3]
    fcac:	ldr	r5, [pc, #1140]	; 10128 <rb_init_netio+0x720>
    fcb0:	ldr	r5, [pc, r5]
    fcb4:	b	ff20 <rb_init_netio+0x518>
    fcb8:	bl	15574 <rb_init_netio_sigio>
    fcbc:	cmp	r0, #0
    fcc0:	beq	10048 <rb_init_netio+0x640>
    fcc4:	ldr	r4, [pc, #1172]	; 10160 <rb_init_netio+0x758>
    fcc8:	mov	r1, r5
    fccc:	add	r4, pc, r4
    fcd0:	mov	r0, r4
    fcd4:	bl	5520 <strcmp@plt>
    fcd8:	cmp	r0, #0
    fcdc:	bne	fcec <rb_init_netio+0x2e4>
    fce0:	bl	57a8 <rb_init_netio_win32>
    fce4:	cmp	r0, #0
    fce8:	beq	fefc <rb_init_netio+0x4f4>
    fcec:	bl	166d4 <rb_init_netio_kqueue>
    fcf0:	cmp	r0, #0
    fcf4:	beq	fd98 <rb_init_netio+0x390>
    fcf8:	bl	14640 <rb_init_netio_epoll>
    fcfc:	cmp	r0, #0
    fd00:	beq	fdf4 <rb_init_netio+0x3ec>
    fd04:	bl	1551c <rb_init_netio_ports>
    fd08:	cmp	r0, #0
    fd0c:	beq	fe54 <rb_init_netio+0x44c>
    fd10:	bl	145e8 <rb_init_netio_devpoll>
    fd14:	cmp	r0, #0
    fd18:	beq	feb0 <rb_init_netio+0x4a8>
    fd1c:	bl	15574 <rb_init_netio_sigio>
    fd20:	cmp	r0, #0
    fd24:	beq	ff40 <rb_init_netio+0x538>
    fd28:	bl	150d0 <rb_init_netio_poll>
    fd2c:	cmp	r0, #0
    fd30:	beq	ffa0 <rb_init_netio+0x598>
    fd34:	bl	57a8 <rb_init_netio_win32>
    fd38:	cmp	r0, #0
    fd3c:	beq	ffec <rb_init_netio+0x5e4>
    fd40:	bl	16030 <rb_init_netio_select>
    fd44:	cmp	r0, #0
    fd48:	bne	10088 <rb_init_netio+0x680>
    fd4c:	ldr	r1, [pc, #1244]	; 10230 <rb_init_netio+0x828>
    fd50:	ldr	r2, [pc, #1244]	; 10234 <rb_init_netio+0x82c>
    fd54:	mov	r0, #0
    fd58:	ldr	r2, [pc, r2]
    fd5c:	ldr	r3, [pc, #1236]	; 10238 <rb_init_netio+0x830>
    fd60:	add	r1, pc, r1
    fd64:	ldr	r3, [pc, r3]
    fd68:	ldr	r5, [pc, #1228]	; 1023c <rb_init_netio+0x834>
    fd6c:	ldr	r5, [pc, r5]
    fd70:	str	r1, [r6, #16]
    fd74:	str	r0, [r6, #20]
    fd78:	str	r0, [r6, #24]
    fd7c:	str	r0, [r6, #28]
    fd80:	str	r5, [r6, #32]
    fd84:	str	r3, [r6, #36]	; 0x24
    fd88:	str	r2, [r6, #40]	; 0x28
    fd8c:	ldr	r4, [pc, #1196]	; 10240 <rb_init_netio+0x838>
    fd90:	add	r4, pc, r4
    fd94:	b	10034 <rb_init_netio+0x62c>
    fd98:	ldr	ip, [pc, #980]	; 10174 <rb_init_netio+0x76c>
    fd9c:	add	lr, r6, #16
    fda0:	ldr	ip, [pc, ip]
    fda4:	ldr	r1, [pc, #972]	; 10178 <rb_init_netio+0x770>
    fda8:	ldr	r1, [pc, r1]
    fdac:	ldr	r2, [pc, #968]	; 1017c <rb_init_netio+0x774>
    fdb0:	ldr	r2, [pc, r2]
    fdb4:	ldr	r3, [pc, #964]	; 10180 <rb_init_netio+0x778>
    fdb8:	ldr	r3, [pc, r3]
    fdbc:	ldr	r5, [pc, #960]	; 10184 <rb_init_netio+0x77c>
    fdc0:	ldr	r5, [pc, r5]
    fdc4:	ldr	r4, [pc, #956]	; 10188 <rb_init_netio+0x780>
    fdc8:	ldr	r4, [pc, r4]
    fdcc:	ldr	r0, [pc, #952]	; 1018c <rb_init_netio+0x784>
    fdd0:	ldr	r0, [pc, r0]
    fdd4:	stm	lr, {r0, r4, r5}
    fdd8:	str	r3, [r6, #28]
    fddc:	str	r2, [r6, #32]
    fde0:	str	r1, [r6, #36]	; 0x24
    fde4:	str	ip, [r6, #40]	; 0x28
    fde8:	ldr	r4, [pc, #928]	; 10190 <rb_init_netio+0x788>
    fdec:	add	r4, pc, r4
    fdf0:	b	10034 <rb_init_netio+0x62c>
    fdf4:	ldr	ip, [pc, #920]	; 10194 <rb_init_netio+0x78c>
    fdf8:	ldr	ip, [pc, ip]
    fdfc:	ldr	r1, [pc, #916]	; 10198 <rb_init_netio+0x790>
    fe00:	ldr	r1, [pc, r1]
    fe04:	ldr	r2, [pc, #912]	; 1019c <rb_init_netio+0x794>
    fe08:	ldr	r2, [pc, r2]
    fe0c:	ldr	r3, [pc, #908]	; 101a0 <rb_init_netio+0x798>
    fe10:	ldr	r3, [pc, r3]
    fe14:	ldr	r5, [pc, #904]	; 101a4 <rb_init_netio+0x79c>
    fe18:	ldr	r5, [pc, r5]
    fe1c:	ldr	r4, [pc, #900]	; 101a8 <rb_init_netio+0x7a0>
    fe20:	ldr	r4, [pc, r4]
    fe24:	ldr	r0, [pc, #896]	; 101ac <rb_init_netio+0x7a4>
    fe28:	ldr	r0, [pc, r0]
    fe2c:	str	r0, [r6, #16]
    fe30:	str	r5, [r6, #20]
    fe34:	str	r3, [r6, #24]
    fe38:	str	r4, [r6, #28]
    fe3c:	str	r2, [r6, #32]
    fe40:	str	r1, [r6, #36]	; 0x24
    fe44:	str	ip, [r6, #40]	; 0x28
    fe48:	ldr	r4, [pc, #864]	; 101b0 <rb_init_netio+0x7a8>
    fe4c:	add	r4, pc, r4
    fe50:	b	10034 <rb_init_netio+0x62c>
    fe54:	ldr	ip, [pc, #856]	; 101b4 <rb_init_netio+0x7ac>
    fe58:	add	lr, r6, #16
    fe5c:	ldr	ip, [pc, ip]
    fe60:	ldr	r1, [pc, #848]	; 101b8 <rb_init_netio+0x7b0>
    fe64:	ldr	r1, [pc, r1]
    fe68:	ldr	r2, [pc, #844]	; 101bc <rb_init_netio+0x7b4>
    fe6c:	ldr	r2, [pc, r2]
    fe70:	ldr	r3, [pc, #840]	; 101c0 <rb_init_netio+0x7b8>
    fe74:	ldr	r3, [pc, r3]
    fe78:	ldr	r5, [pc, #836]	; 101c4 <rb_init_netio+0x7bc>
    fe7c:	ldr	r5, [pc, r5]
    fe80:	ldr	r4, [pc, #832]	; 101c8 <rb_init_netio+0x7c0>
    fe84:	ldr	r4, [pc, r4]
    fe88:	ldr	r0, [pc, #828]	; 101cc <rb_init_netio+0x7c4>
    fe8c:	ldr	r0, [pc, r0]
    fe90:	stm	lr, {r0, r4, r5}
    fe94:	str	r3, [r6, #28]
    fe98:	str	r2, [r6, #32]
    fe9c:	str	r1, [r6, #36]	; 0x24
    fea0:	str	ip, [r6, #40]	; 0x28
    fea4:	ldr	r4, [pc, #804]	; 101d0 <rb_init_netio+0x7c8>
    fea8:	add	r4, pc, r4
    feac:	b	10034 <rb_init_netio+0x62c>
    feb0:	ldr	r1, [pc, #796]	; 101d4 <rb_init_netio+0x7cc>
    feb4:	ldr	r2, [pc, #796]	; 101d8 <rb_init_netio+0x7d0>
    feb8:	mov	r0, #0
    febc:	ldr	r2, [pc, r2]
    fec0:	ldr	r3, [pc, #788]	; 101dc <rb_init_netio+0x7d4>
    fec4:	add	r1, pc, r1
    fec8:	ldr	r3, [pc, r3]
    fecc:	ldr	r5, [pc, #780]	; 101e0 <rb_init_netio+0x7d8>
    fed0:	ldr	r5, [pc, r5]
    fed4:	str	r1, [r6, #16]
    fed8:	str	r0, [r6, #20]
    fedc:	str	r0, [r6, #24]
    fee0:	str	r0, [r6, #28]
    fee4:	str	r5, [r6, #32]
    fee8:	str	r3, [r6, #36]	; 0x24
    feec:	str	r2, [r6, #40]	; 0x28
    fef0:	ldr	r4, [pc, #748]	; 101e4 <rb_init_netio+0x7dc>
    fef4:	add	r4, pc, r4
    fef8:	b	10034 <rb_init_netio+0x62c>
    fefc:	ldr	r1, [pc, #608]	; 10164 <rb_init_netio+0x75c>
    ff00:	ldr	r2, [pc, #608]	; 10168 <rb_init_netio+0x760>
    ff04:	mov	r0, #0
    ff08:	ldr	r2, [pc, r2]
    ff0c:	ldr	r3, [pc, #600]	; 1016c <rb_init_netio+0x764>
    ff10:	add	r1, pc, r1
    ff14:	ldr	r3, [pc, r3]
    ff18:	ldr	r5, [pc, #592]	; 10170 <rb_init_netio+0x768>
    ff1c:	ldr	r5, [pc, r5]
    ff20:	str	r1, [r6, #16]
    ff24:	str	r0, [r6, #20]
    ff28:	str	r0, [r6, #24]
    ff2c:	str	r0, [r6, #28]
    ff30:	str	r5, [r6, #32]
    ff34:	str	r3, [r6, #36]	; 0x24
    ff38:	str	r2, [r6, #40]	; 0x28
    ff3c:	b	10034 <rb_init_netio+0x62c>
    ff40:	ldr	ip, [pc, #672]	; 101e8 <rb_init_netio+0x7e0>
    ff44:	ldr	ip, [pc, ip]
    ff48:	ldr	r1, [pc, #668]	; 101ec <rb_init_netio+0x7e4>
    ff4c:	ldr	r1, [pc, r1]
    ff50:	ldr	r2, [pc, #664]	; 101f0 <rb_init_netio+0x7e8>
    ff54:	ldr	r2, [pc, r2]
    ff58:	ldr	r3, [pc, #660]	; 101f4 <rb_init_netio+0x7ec>
    ff5c:	ldr	r3, [pc, r3]
    ff60:	ldr	r5, [pc, #656]	; 101f8 <rb_init_netio+0x7f0>
    ff64:	ldr	r5, [pc, r5]
    ff68:	ldr	r4, [pc, #652]	; 101fc <rb_init_netio+0x7f4>
    ff6c:	ldr	r4, [pc, r4]
    ff70:	ldr	r0, [pc, #648]	; 10200 <rb_init_netio+0x7f8>
    ff74:	ldr	r0, [pc, r0]
    ff78:	str	r0, [r6, #16]
    ff7c:	str	r5, [r6, #20]
    ff80:	str	r3, [r6, #24]
    ff84:	str	r4, [r6, #28]
    ff88:	str	r2, [r6, #32]
    ff8c:	str	r1, [r6, #36]	; 0x24
    ff90:	str	ip, [r6, #40]	; 0x28
    ff94:	ldr	r4, [pc, #616]	; 10204 <rb_init_netio+0x7fc>
    ff98:	add	r4, pc, r4
    ff9c:	b	10034 <rb_init_netio+0x62c>
    ffa0:	ldr	r1, [pc, #608]	; 10208 <rb_init_netio+0x800>
    ffa4:	ldr	r2, [pc, #608]	; 1020c <rb_init_netio+0x804>
    ffa8:	mov	r0, #0
    ffac:	ldr	r2, [pc, r2]
    ffb0:	ldr	r3, [pc, #600]	; 10210 <rb_init_netio+0x808>
    ffb4:	add	r1, pc, r1
    ffb8:	ldr	r3, [pc, r3]
    ffbc:	ldr	r5, [pc, #592]	; 10214 <rb_init_netio+0x80c>
    ffc0:	ldr	r5, [pc, r5]
    ffc4:	str	r1, [r6, #16]
    ffc8:	str	r0, [r6, #20]
    ffcc:	str	r0, [r6, #24]
    ffd0:	str	r0, [r6, #28]
    ffd4:	str	r5, [r6, #32]
    ffd8:	str	r3, [r6, #36]	; 0x24
    ffdc:	str	r2, [r6, #40]	; 0x28
    ffe0:	ldr	r4, [pc, #560]	; 10218 <rb_init_netio+0x810>
    ffe4:	add	r4, pc, r4
    ffe8:	b	10034 <rb_init_netio+0x62c>
    ffec:	ldr	r1, [pc, #552]	; 1021c <rb_init_netio+0x814>
    fff0:	ldr	r2, [pc, #552]	; 10220 <rb_init_netio+0x818>
    fff4:	mov	r0, #0
    fff8:	ldr	r2, [pc, r2]
    fffc:	ldr	r3, [pc, #544]	; 10224 <rb_init_netio+0x81c>
   10000:	add	r1, pc, r1
   10004:	ldr	r3, [pc, r3]
   10008:	ldr	r5, [pc, #536]	; 10228 <rb_init_netio+0x820>
   1000c:	ldr	r5, [pc, r5]
   10010:	str	r1, [r6, #16]
   10014:	str	r0, [r6, #20]
   10018:	str	r0, [r6, #24]
   1001c:	str	r0, [r6, #28]
   10020:	str	r5, [r6, #32]
   10024:	str	r3, [r6, #36]	; 0x24
   10028:	str	r2, [r6, #40]	; 0x28
   1002c:	ldr	r4, [pc, #504]	; 1022c <rb_init_netio+0x824>
   10030:	add	r4, pc, r4
   10034:	add	r0, r6, #68	; 0x44
   10038:	mov	r1, r4
   1003c:	mov	r2, #25
   10040:	pop	{r4, r5, r6, sl, fp, lr}
   10044:	b	4f44 <rb_strlcpy@plt>
   10048:	ldr	ip, [pc, #224]	; 10130 <rb_init_netio+0x728>
   1004c:	ldr	ip, [pc, ip]
   10050:	ldr	lr, [pc, #220]	; 10134 <rb_init_netio+0x72c>
   10054:	ldr	lr, [pc, lr]
   10058:	ldr	r2, [pc, #216]	; 10138 <rb_init_netio+0x730>
   1005c:	ldr	r2, [pc, r2]
   10060:	ldr	r3, [pc, #212]	; 1013c <rb_init_netio+0x734>
   10064:	ldr	r3, [pc, r3]
   10068:	ldr	r5, [pc, #208]	; 10140 <rb_init_netio+0x738>
   1006c:	ldr	r5, [pc, r5]
   10070:	ldr	r0, [pc, #204]	; 10144 <rb_init_netio+0x73c>
   10074:	ldr	r0, [pc, r0]
   10078:	ldr	r1, [pc, #200]	; 10148 <rb_init_netio+0x740>
   1007c:	ldr	r1, [pc, r1]
   10080:	b	fb90 <rb_init_netio+0x188>
   10084:	bl	51fc <rb_outofmemory@plt>
   10088:	ldr	r0, [pc, #436]	; 10244 <rb_init_netio+0x83c>
   1008c:	add	r0, pc, r0
   10090:	bl	519c <rb_lib_log@plt>
   10094:	bl	4ca4 <abort@plt>
   10098:	.word	0x0000b44e
   1009c:	.word	0x0001d948
   100a0:	.word	0x0002fec4
   100a4:	.word	0x0000b417
   100a8:	.word	0x0001d868
   100ac:	.word	0x0001d824
   100b0:	.word	0x0001d7bc
   100b4:	.word	0x0001d810
   100b8:	.word	0x0001d7c8
   100bc:	.word	0x0001d854
   100c0:	.word	0x0001d78c
   100c4:	.word	0x0000b401
   100c8:	.word	0x0001d7a4
   100cc:	.word	0x0001d77c
   100d0:	.word	0x0001d7b8
   100d4:	.word	0x0001d788
   100d8:	.word	0x0001d7c0
   100dc:	.word	0x0001d774
   100e0:	.word	0x0001d7c0
   100e4:	.word	0x0000b3ec
   100e8:	.word	0x0001d7d4
   100ec:	.word	0x0001d744
   100f0:	.word	0x0001d79c
   100f4:	.word	0x0001d710
   100f8:	.word	0x0001d7b0
   100fc:	.word	0x0001d6f0
   10100:	.word	0x0001d774
   10104:	.word	0x0000b3c4
   10108:	.word	0x00000a54
   1010c:	.word	0x0001d6d8
   10110:	.word	0x0001d748
   10114:	.word	0x0001d730
   10118:	.word	0x0000b3ba
   1011c:	.word	0x00000a20
   10120:	.word	0x0001d6d8
   10124:	.word	0x0001d708
   10128:	.word	0x0001d6c0
   1012c:	.word	0x0000b3a6
   10130:	.word	0x0001d350
   10134:	.word	0x0001d2d8
   10138:	.word	0x0001d330
   1013c:	.word	0x0001d2b8
   10140:	.word	0x0001d2c8
   10144:	.word	0x0001d344
   10148:	.word	0x0001d31c
   1014c:	.word	0x0000b390
   10150:	.word	0x00000b8c
   10154:	.word	0x0001d890
   10158:	.word	0x0001d83c
   1015c:	.word	0x0001d89c
   10160:	.word	0x0000b1cf
   10164:	.word	0x000007b4
   10168:	.word	0x0001d428
   1016c:	.word	0x0001d454
   10170:	.word	0x0001d440
   10174:	.word	0x0001d5b8
   10178:	.word	0x0001d590
   1017c:	.word	0x0001d5cc
   10180:	.word	0x0001d59c
   10184:	.word	0x0001d5d4
   10188:	.word	0x0001d588
   1018c:	.word	0x0001d5d4
   10190:	.word	0x0000b08d
   10194:	.word	0x0001d5cc
   10198:	.word	0x0001d588
   1019c:	.word	0x0001d520
   101a0:	.word	0x0001d574
   101a4:	.word	0x0001d52c
   101a8:	.word	0x0001d5b8
   101ac:	.word	0x0001d4f0
   101b0:	.word	0x0000b027
   101b4:	.word	0x0001d574
   101b8:	.word	0x0001d4e4
   101bc:	.word	0x0001d53c
   101c0:	.word	0x0001d4b0
   101c4:	.word	0x0001d550
   101c8:	.word	0x0001d490
   101cc:	.word	0x0001d514
   101d0:	.word	0x0000afd8
   101d4:	.word	0x00000800
   101d8:	.word	0x0001d4b8
   101dc:	.word	0x0001d4e8
   101e0:	.word	0x0001d4a0
   101e4:	.word	0x0000af92
   101e8:	.word	0x0001d458
   101ec:	.word	0x0001d3e0
   101f0:	.word	0x0001d438
   101f4:	.word	0x0001d3c0
   101f8:	.word	0x0001d3d0
   101fc:	.word	0x0001d44c
   10200:	.word	0x0001d424
   10204:	.word	0x0000aef6
   10208:	.word	0x00000710
   1020c:	.word	0x0001d394
   10210:	.word	0x0001d404
   10214:	.word	0x0001d3ec
   10218:	.word	0x0000ae90
   1021c:	.word	0x000006c4
   10220:	.word	0x0001d338
   10224:	.word	0x0001d364
   10228:	.word	0x0001d350
   1022c:	.word	0x0000ae6b
   10230:	.word	0x00000964
   10234:	.word	0x0001d668
   10238:	.word	0x0001d614
   1023c:	.word	0x0001d674
   10240:	.word	0x0000b104
   10244:	.word	0x0000ae15

00010248 <rb_select>:
   10248:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1024c:	add	fp, sp, #24
   10250:	ldr	r6, [pc, #160]	; 102f8 <rb_select+0xb0>
   10254:	add	r6, pc, r6
   10258:	ldr	r1, [r6, #36]	; 0x24
   1025c:	blx	r1
   10260:	ldr	r4, [r6, #56]	; 0x38
   10264:	mov	r8, r0
   10268:	cmp	r4, #0
   1026c:	beq	102f0 <rb_select+0xa8>
   10270:	mov	r9, #0
   10274:	b	102b8 <rb_select+0x70>
   10278:	str	r1, [r6, #60]	; 0x3c
   1027c:	cmp	r1, #0
   10280:	add	r2, r1, #8
   10284:	addeq	r2, r6, #56	; 0x38
   10288:	str	r0, [r2]
   1028c:	str	r9, [r4, #4]
   10290:	str	r9, [r4, #8]
   10294:	ldr	r1, [r6, #64]	; 0x40
   10298:	ldr	r0, [r6, #12]
   1029c:	sub	r1, r1, #1
   102a0:	str	r1, [r6, #64]	; 0x40
   102a4:	mov	r1, r5
   102a8:	bl	5154 <rb_bh_free@plt>
   102ac:	cmp	r7, #0
   102b0:	mov	r4, r7
   102b4:	beq	102f0 <rb_select+0xa8>
   102b8:	ldr	r0, [r6, #8]
   102bc:	ldr	r5, [r4]
   102c0:	ldr	r7, [r4, #8]
   102c4:	sub	r0, r0, #1
   102c8:	str	r0, [r6, #8]
   102cc:	ldr	r0, [r5, #12]
   102d0:	bl	51c0 <close@plt>
   102d4:	ldr	r0, [r4, #8]
   102d8:	ldr	r1, [r4, #4]
   102dc:	cmp	r0, #0
   102e0:	beq	10278 <rb_select+0x30>
   102e4:	str	r1, [r0, #4]
   102e8:	ldr	r1, [r4, #4]
   102ec:	b	1027c <rb_select+0x34>
   102f0:	mov	r0, r8
   102f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   102f8:	.word	0x0002f6bc

000102fc <rb_recv_fd_buf>:
   102fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10300:	add	fp, sp, #28
   10304:	sub	sp, sp, #132	; 0x84
   10308:	ldr	r9, [fp, #8]
   1030c:	mov	sl, r3
   10310:	mov	r3, #0
   10314:	mov	r7, #1
   10318:	sub	ip, fp, #68	; 0x44
   1031c:	str	r3, [fp, #-36]	; 0xffffffdc
   10320:	str	r7, [fp, #-48]	; 0xffffffd0
   10324:	sub	r7, fp, #68	; 0x44
   10328:	str	r7, [fp, #-52]	; 0xffffffcc
   1032c:	str	r3, [fp, #-56]	; 0xffffffc8
   10330:	stm	ip, {r1, r2, r3}
   10334:	mov	r1, #19
   10338:	mov	r2, #12
   1033c:	add	r1, r1, r9, lsl #2
   10340:	add	r2, r2, r9, lsl #2
   10344:	bic	r1, r1, #7
   10348:	sub	r1, sp, r1
   1034c:	mov	sp, r1
   10350:	cmp	r0, #0
   10354:	str	r2, [fp, #-40]	; 0xffffffd8
   10358:	str	r1, [fp, #-44]	; 0xffffffd4
   1035c:	beq	10368 <rb_recv_fd_buf+0x6c>
   10360:	ldr	r0, [r0, #12]
   10364:	b	1036c <rb_recv_fd_buf+0x70>
   10368:	mvn	r0, #0
   1036c:	sub	r1, fp, #60	; 0x3c
   10370:	mov	r2, #0
   10374:	bl	537c <recvmsg@plt>
   10378:	mov	r5, r0
   1037c:	cmp	r0, #1
   10380:	blt	10474 <rb_recv_fd_buf+0x178>
   10384:	ldr	r1, [fp, #-40]	; 0xffffffd8
   10388:	cmp	r1, #0
   1038c:	beq	1046c <rb_recv_fd_buf+0x170>
   10390:	ldr	r0, [fp, #-44]	; 0xffffffd4
   10394:	cmp	r0, #0
   10398:	beq	1046c <rb_recv_fd_buf+0x170>
   1039c:	cmp	r1, #11
   103a0:	movls	r0, #0
   103a4:	cmp	r1, #12
   103a8:	bcc	1046c <rb_recv_fd_buf+0x170>
   103ac:	cmp	r9, #1
   103b0:	blt	10474 <rb_recv_fd_buf+0x178>
   103b4:	ldr	r1, [r0]
   103b8:	sub	r1, r1, #12
   103bc:	lsr	r6, r1, #2
   103c0:	cmp	r6, #0
   103c4:	beq	10474 <rb_recv_fd_buf+0x178>
   103c8:	add	r4, r0, #12
   103cc:	mov	r8, #0
   103d0:	ldr	r7, [r4, r8, lsl #2]
   103d4:	mov	r0, #3
   103d8:	sub	r2, fp, #160	; 0xa0
   103dc:	mov	r1, r7
   103e0:	bl	53a0 <__fxstat@plt>
   103e4:	mov	r1, #64	; 0x40
   103e8:	cmp	r0, #0
   103ec:	beq	1041c <rb_recv_fd_buf+0x120>
   103f0:	ldr	r2, [pc, #148]	; 1048c <rb_recv_fd_buf+0x190>
   103f4:	add	r2, pc, r2
   103f8:	mov	r0, r7
   103fc:	bl	52e0 <rb_open@plt>
   10400:	str	r0, [sl, r8, lsl #2]
   10404:	add	r8, r8, #1
   10408:	cmp	r8, r9
   1040c:	bge	10474 <rb_recv_fd_buf+0x178>
   10410:	cmp	r8, r6
   10414:	bcc	103d0 <rb_recv_fd_buf+0xd4>
   10418:	b	10474 <rb_recv_fd_buf+0x178>
   1041c:	ldr	r0, [fp, #-144]	; 0xffffff70
   10420:	and	r0, r0, #61440	; 0xf000
   10424:	cmp	r0, #49152	; 0xc000
   10428:	beq	1044c <rb_recv_fd_buf+0x150>
   1042c:	cmp	r0, #32768	; 0x8000
   10430:	beq	1045c <rb_recv_fd_buf+0x160>
   10434:	cmp	r0, #4096	; 0x1000
   10438:	bne	103f0 <rb_recv_fd_buf+0xf4>
   1043c:	ldr	r2, [pc, #64]	; 10484 <rb_recv_fd_buf+0x188>
   10440:	mov	r1, #8
   10444:	add	r2, pc, r2
   10448:	b	103f8 <rb_recv_fd_buf+0xfc>
   1044c:	ldr	r2, [pc, #44]	; 10480 <rb_recv_fd_buf+0x184>
   10450:	mov	r1, #4
   10454:	add	r2, pc, r2
   10458:	b	103f8 <rb_recv_fd_buf+0xfc>
   1045c:	ldr	r2, [pc, #36]	; 10488 <rb_recv_fd_buf+0x18c>
   10460:	mov	r1, #2
   10464:	add	r2, pc, r2
   10468:	b	103f8 <rb_recv_fd_buf+0xfc>
   1046c:	mov	r0, #0
   10470:	str	r0, [sl]
   10474:	mov	r0, r5
   10478:	sub	sp, fp, #28
   1047c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10480:	.word	0x0000aa96
   10484:	.word	0x0000aab4
   10488:	.word	0x0000aaa0
   1048c:	.word	0x0000aae7

00010490 <rb_send_fd_buf>:
   10490:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10494:	add	fp, sp, #24
   10498:	sub	sp, sp, #48	; 0x30
   1049c:	vmov.i32	q8, #0	; 0x00000000
   104a0:	sub	r7, fp, #56	; 0x38
   104a4:	mov	r4, #0
   104a8:	add	r6, r7, #12
   104ac:	vst1.32	{d16-d17}, [r6]
   104b0:	mov	r6, #48	; 0x30
   104b4:	strb	r6, [fp, #-65]	; 0xffffffbf
   104b8:	mov	r6, #20
   104bc:	vst1.64	{d16-d17}, [r7], r6
   104c0:	mov	r6, #1
   104c4:	str	r4, [r7]
   104c8:	sub	r7, fp, #64	; 0x40
   104cc:	str	r7, [fp, #-48]	; 0xffffffd0
   104d0:	ldr	r7, [fp, #8]
   104d4:	str	r4, [fp, #-56]	; 0xffffffc8
   104d8:	str	r4, [fp, #-52]	; 0xffffffcc
   104dc:	str	r4, [fp, #-40]	; 0xffffffd8
   104e0:	str	r4, [fp, #-32]	; 0xffffffe0
   104e4:	str	r6, [fp, #-44]	; 0xffffffd4
   104e8:	cmp	r7, #0
   104ec:	movweq	r7, #1
   104f0:	str	r7, [fp, #-60]	; 0xffffffc4
   104f4:	sub	r7, fp, #65	; 0x41
   104f8:	movne	r7, r3
   104fc:	cmp	r2, #1
   10500:	str	r7, [fp, #-64]	; 0xffffffc0
   10504:	blt	105b4 <rb_send_fd_buf+0x124>
   10508:	mov	r3, #19
   1050c:	mov	r8, sp
   10510:	add	r3, r3, r2, lsl #2
   10514:	bic	r3, r3, #7
   10518:	sub	lr, sp, r3
   1051c:	mov	r3, #12
   10520:	add	r3, r3, r2, lsl #2
   10524:	mov	sp, lr
   10528:	cmp	r3, #11
   1052c:	str	r3, [fp, #-36]	; 0xffffffdc
   10530:	str	lr, [fp, #-40]	; 0xffffffd8
   10534:	and	ip, r2, #1
   10538:	movls	lr, r4
   1053c:	cmp	r2, #1
   10540:	stm	lr, {r3, r6}
   10544:	str	r6, [lr, #8]
   10548:	beq	10594 <rb_send_fd_buf+0x104>
   1054c:	sub	r2, r2, ip
   10550:	add	r6, r1, #4
   10554:	mov	r4, #0
   10558:	ldr	r5, [r6, #-4]
   1055c:	mvn	r3, #0
   10560:	mvn	r7, #0
   10564:	cmp	r5, #0
   10568:	ldrne	r3, [r5, #12]
   1056c:	add	r5, lr, r4, lsl #2
   10570:	add	r4, r4, #2
   10574:	str	r3, [r5, #12]
   10578:	ldr	r3, [r6]
   1057c:	add	r6, r6, #8
   10580:	cmp	r3, #0
   10584:	ldrne	r7, [r3, #12]
   10588:	cmp	r2, r4
   1058c:	str	r7, [r5, #16]
   10590:	bne	10558 <rb_send_fd_buf+0xc8>
   10594:	cmp	ip, #0
   10598:	beq	105e4 <rb_send_fd_buf+0x154>
   1059c:	ldr	r1, [r1, r4, lsl #2]
   105a0:	add	r2, lr, #12
   105a4:	cmp	r1, #0
   105a8:	beq	105dc <rb_send_fd_buf+0x14c>
   105ac:	ldr	r1, [r1, #12]
   105b0:	b	105e0 <rb_send_fd_buf+0x150>
   105b4:	cmp	r0, #0
   105b8:	beq	105c4 <rb_send_fd_buf+0x134>
   105bc:	ldr	r0, [r0, #12]
   105c0:	b	105c8 <rb_send_fd_buf+0x138>
   105c4:	mvn	r0, #0
   105c8:	sub	r1, fp, #56	; 0x38
   105cc:	mov	r2, #16384	; 0x4000
   105d0:	bl	4f98 <sendmsg@plt>
   105d4:	sub	sp, fp, #24
   105d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   105dc:	mvn	r1, #0
   105e0:	str	r1, [r2, r4, lsl #2]
   105e4:	ldr	r1, [lr]
   105e8:	cmp	r0, #0
   105ec:	str	r1, [fp, #-36]	; 0xffffffdc
   105f0:	beq	105fc <rb_send_fd_buf+0x16c>
   105f4:	ldr	r0, [r0, #12]
   105f8:	b	10600 <rb_send_fd_buf+0x170>
   105fc:	mvn	r0, #0
   10600:	sub	r1, fp, #56	; 0x38
   10604:	mov	r2, #16384	; 0x4000
   10608:	bl	4f98 <sendmsg@plt>
   1060c:	mov	sp, r8
   10610:	sub	sp, fp, #24
   10614:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00010618 <rb_ipv4_from_ipv6>:
   10618:	push	{r4, r5, r6, sl, fp, lr}
   1061c:	add	fp, sp, #16
   10620:	mov	r4, r1
   10624:	ldr	r1, [pc, #152]	; 106c4 <rb_ipv4_from_ipv6+0xac>
   10628:	add	r6, r0, #8
   1062c:	mov	r5, r0
   10630:	mov	r2, #2
   10634:	mov	r0, r6
   10638:	add	r1, pc, r1
   1063c:	bl	50f4 <bcmp@plt>
   10640:	cmp	r0, #0
   10644:	beq	106ac <rb_ipv4_from_ipv6+0x94>
   10648:	ldr	r1, [pc, #120]	; 106c8 <rb_ipv4_from_ipv6+0xb0>
   1064c:	mov	r0, r6
   10650:	mov	r2, #4
   10654:	add	r1, pc, r1
   10658:	bl	50f4 <bcmp@plt>
   1065c:	mov	r1, r0
   10660:	mov	r0, #0
   10664:	cmp	r1, #0
   10668:	popne	{r4, r5, r6, sl, fp, pc}
   1066c:	ldrb	r0, [r5, #20]
   10670:	mvn	r0, r0
   10674:	strb	r0, [r4, #4]
   10678:	ldrb	r0, [r5, #21]
   1067c:	mvn	r0, r0
   10680:	strb	r0, [r4, #5]
   10684:	ldrb	r0, [r5, #22]
   10688:	mvn	r0, r0
   1068c:	strb	r0, [r4, #6]
   10690:	ldrb	r0, [r5, #23]
   10694:	mvn	r0, r0
   10698:	strb	r0, [r4, #7]
   1069c:	mov	r0, #2
   106a0:	str	r0, [r4]
   106a4:	mov	r0, #1
   106a8:	pop	{r4, r5, r6, sl, fp, pc}
   106ac:	ldr	r0, [r6, #2]
   106b0:	str	r0, [r4, #4]
   106b4:	mov	r0, #2
   106b8:	str	r0, [r4]
   106bc:	mov	r0, #1
   106c0:	pop	{r4, r5, r6, sl, fp, pc}
   106c4:	.word	0x0000a8d8
   106c8:	.word	0x0000ac6c

000106cc <rb_unsupported_event>:
   106cc:	mov	r0, #0
   106d0:	bx	lr

000106d4 <rb_ssl_shutdown>:
   106d4:	push	{r4, r5, r6, sl, fp, lr}
   106d8:	add	fp, sp, #16
   106dc:	cmp	r0, #0
   106e0:	beq	10750 <rb_ssl_shutdown+0x7c>
   106e4:	mov	r4, r0
   106e8:	ldr	r0, [r0, #56]	; 0x38
   106ec:	cmp	r0, #0
   106f0:	beq	10750 <rb_ssl_shutdown+0x7c>
   106f4:	bl	4ce0 <ERR_get_error@plt>
   106f8:	cmp	r0, #0
   106fc:	bne	106f4 <rb_ssl_shutdown+0x20>
   10700:	mov	r6, #1
   10704:	ldr	r0, [r4, #56]	; 0x38
   10708:	bl	52f8 <SSL_shutdown@plt>
   1070c:	mov	r5, r0
   10710:	ldr	r0, [r4, #56]	; 0x38
   10714:	mov	r1, r5
   10718:	bl	54f0 <SSL_get_error@plt>
   1071c:	cmn	r5, #1
   10720:	bgt	10740 <rb_ssl_shutdown+0x6c>
   10724:	orr	r0, r0, #1
   10728:	cmp	r0, #3
   1072c:	bne	10740 <rb_ssl_shutdown+0x6c>
   10730:	add	r0, r6, #1
   10734:	cmp	r6, #4
   10738:	mov	r6, r0
   1073c:	bcc	10704 <rb_ssl_shutdown+0x30>
   10740:	ldr	r0, [r4, #56]	; 0x38
   10744:	bl	51d8 <SSL_free@plt>
   10748:	mov	r0, #0
   1074c:	str	r0, [r4, #56]	; 0x38
   10750:	pop	{r4, r5, r6, sl, fp, pc}

00010754 <rb_init_ssl>:
   10754:	push	{fp, lr}
   10758:	mov	fp, sp
   1075c:	ldr	r0, [pc, #20]	; 10778 <rb_init_ssl+0x24>
   10760:	ldr	r1, [pc, #20]	; 1077c <rb_init_ssl+0x28>
   10764:	add	r0, pc, r0
   10768:	add	r1, pc, r1
   1076c:	bl	519c <rb_lib_log@plt>
   10770:	mov	r0, #1
   10774:	pop	{fp, pc}
   10778:	.word	0x0000ab72
   1077c:	.word	0x0000ab8e

00010780 <rb_setup_ssl_server>:
   10780:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10784:	add	fp, sp, #24
   10788:	sub	sp, sp, #8
   1078c:	cmp	r0, #0
   10790:	beq	108c4 <rb_setup_ssl_server+0x144>
   10794:	mov	r4, r3
   10798:	mov	r8, r2
   1079c:	mov	r7, r1
   107a0:	mov	r6, r0
   107a4:	bl	4ce0 <ERR_get_error@plt>
   107a8:	cmp	r0, #0
   107ac:	bne	107a4 <rb_setup_ssl_server+0x24>
   107b0:	ldr	r5, [pc, #860]	; 10b14 <rb_setup_ssl_server+0x394>
   107b4:	cmp	r4, #0
   107b8:	add	r5, pc, r5
   107bc:	movne	r5, r4
   107c0:	cmp	r7, #0
   107c4:	moveq	r7, r6
   107c8:	bl	4c50 <TLS_method@plt>
   107cc:	bl	5370 <SSL_CTX_new@plt>
   107d0:	cmp	r0, #0
   107d4:	beq	108e4 <rb_setup_ssl_server+0x164>
   107d8:	mov	r1, r6
   107dc:	mov	r4, r0
   107e0:	bl	50c4 <SSL_CTX_use_certificate_chain_file@plt>
   107e4:	cmp	r0, #1
   107e8:	bne	10934 <rb_setup_ssl_server+0x1b4>
   107ec:	mov	r0, r4
   107f0:	mov	r1, r7
   107f4:	mov	r2, #1
   107f8:	bl	51a8 <SSL_CTX_use_PrivateKey_file@plt>
   107fc:	cmp	r0, #1
   10800:	bne	1097c <rb_setup_ssl_server+0x1fc>
   10804:	cmp	r8, #0
   10808:	beq	109d8 <rb_setup_ssl_server+0x258>
   1080c:	ldr	r1, [pc, #816]	; 10b44 <rb_setup_ssl_server+0x3c4>
   10810:	mov	r0, r8
   10814:	add	r1, pc, r1
   10818:	bl	4ec0 <fopen@plt>
   1081c:	mov	r9, r0
   10820:	mov	r0, #0
   10824:	cmp	r9, #0
   10828:	str	r0, [sp, #4]
   1082c:	beq	109f0 <rb_setup_ssl_server+0x270>
   10830:	add	r1, sp, #4
   10834:	mov	r0, r9
   10838:	mov	r2, #0
   1083c:	mov	r3, #0
   10840:	mov	r7, #0
   10844:	bl	5250 <PEM_read_DHparams@plt>
   10848:	cmp	r0, #0
   1084c:	beq	10870 <rb_setup_ssl_server+0xf0>
   10850:	ldr	r3, [sp, #4]
   10854:	mov	r0, r4
   10858:	mov	r1, #3
   1085c:	mov	r2, #0
   10860:	bl	4f14 <SSL_CTX_ctrl@plt>
   10864:	ldr	r0, [sp, #4]
   10868:	bl	52c8 <DH_free@plt>
   1086c:	b	108b8 <rb_setup_ssl_server+0x138>
   10870:	mov	r6, r7
   10874:	bl	4ce0 <ERR_get_error@plt>
   10878:	mov	r7, r0
   1087c:	cmp	r0, #0
   10880:	bne	10870 <rb_setup_ssl_server+0xf0>
   10884:	ldr	r7, [pc, #708]	; 10b50 <rb_setup_ssl_server+0x3d0>
   10888:	mov	r0, r6
   1088c:	mov	r2, #512	; 0x200
   10890:	add	r7, pc, r7
   10894:	mov	r1, r7
   10898:	bl	4e60 <ERR_error_string_n@plt>
   1089c:	ldr	r0, [pc, #688]	; 10b54 <rb_setup_ssl_server+0x3d4>
   108a0:	ldr	r1, [pc, #688]	; 10b58 <rb_setup_ssl_server+0x3d8>
   108a4:	mov	r2, r8
   108a8:	mov	r3, r7
   108ac:	add	r0, pc, r0
   108b0:	add	r1, pc, r1
   108b4:	bl	519c <rb_lib_log@plt>
   108b8:	mov	r0, r9
   108bc:	bl	4e3c <fclose@plt>
   108c0:	b	10a18 <rb_setup_ssl_server+0x298>
   108c4:	ldr	r0, [pc, #576]	; 10b0c <rb_setup_ssl_server+0x38c>
   108c8:	ldr	r1, [pc, #576]	; 10b10 <rb_setup_ssl_server+0x390>
   108cc:	add	r0, pc, r0
   108d0:	add	r1, pc, r1
   108d4:	bl	519c <rb_lib_log@plt>
   108d8:	mov	r0, #0
   108dc:	sub	sp, fp, #24
   108e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   108e4:	mov	r0, #0
   108e8:	mov	r4, r0
   108ec:	bl	4ce0 <ERR_get_error@plt>
   108f0:	cmp	r0, #0
   108f4:	bne	108e8 <rb_setup_ssl_server+0x168>
   108f8:	ldr	r5, [pc, #536]	; 10b18 <rb_setup_ssl_server+0x398>
   108fc:	mov	r0, r4
   10900:	mov	r2, #512	; 0x200
   10904:	add	r5, pc, r5
   10908:	mov	r1, r5
   1090c:	bl	4e60 <ERR_error_string_n@plt>
   10910:	ldr	r0, [pc, #516]	; 10b1c <rb_setup_ssl_server+0x39c>
   10914:	ldr	r1, [pc, #516]	; 10b20 <rb_setup_ssl_server+0x3a0>
   10918:	mov	r2, r5
   1091c:	add	r0, pc, r0
   10920:	add	r1, pc, r1
   10924:	bl	519c <rb_lib_log@plt>
   10928:	mov	r0, #0
   1092c:	sub	sp, fp, #24
   10930:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10934:	mov	r0, #0
   10938:	mov	r5, r0
   1093c:	bl	4ce0 <ERR_get_error@plt>
   10940:	cmp	r0, #0
   10944:	bne	10938 <rb_setup_ssl_server+0x1b8>
   10948:	ldr	r7, [pc, #468]	; 10b24 <rb_setup_ssl_server+0x3a4>
   1094c:	mov	r0, r5
   10950:	mov	r2, #512	; 0x200
   10954:	add	r7, pc, r7
   10958:	mov	r1, r7
   1095c:	bl	4e60 <ERR_error_string_n@plt>
   10960:	ldr	r0, [pc, #448]	; 10b28 <rb_setup_ssl_server+0x3a8>
   10964:	ldr	r1, [pc, #448]	; 10b2c <rb_setup_ssl_server+0x3ac>
   10968:	mov	r2, r6
   1096c:	mov	r3, r7
   10970:	add	r0, pc, r0
   10974:	add	r1, pc, r1
   10978:	b	109c0 <rb_setup_ssl_server+0x240>
   1097c:	mov	r0, #0
   10980:	mov	r5, r0
   10984:	bl	4ce0 <ERR_get_error@plt>
   10988:	cmp	r0, #0
   1098c:	bne	10980 <rb_setup_ssl_server+0x200>
   10990:	ldr	r6, [pc, #408]	; 10b30 <rb_setup_ssl_server+0x3b0>
   10994:	mov	r0, r5
   10998:	mov	r2, #512	; 0x200
   1099c:	add	r6, pc, r6
   109a0:	mov	r1, r6
   109a4:	bl	4e60 <ERR_error_string_n@plt>
   109a8:	ldr	r0, [pc, #388]	; 10b34 <rb_setup_ssl_server+0x3b4>
   109ac:	ldr	r1, [pc, #388]	; 10b38 <rb_setup_ssl_server+0x3b8>
   109b0:	mov	r2, r7
   109b4:	mov	r3, r6
   109b8:	add	r0, pc, r0
   109bc:	add	r1, pc, r1
   109c0:	bl	519c <rb_lib_log@plt>
   109c4:	mov	r0, r4
   109c8:	bl	4d28 <SSL_CTX_free@plt>
   109cc:	mov	r0, #0
   109d0:	sub	sp, fp, #24
   109d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   109d8:	ldr	r0, [pc, #348]	; 10b3c <rb_setup_ssl_server+0x3bc>
   109dc:	ldr	r1, [pc, #348]	; 10b40 <rb_setup_ssl_server+0x3c0>
   109e0:	add	r0, pc, r0
   109e4:	add	r1, pc, r1
   109e8:	bl	519c <rb_lib_log@plt>
   109ec:	b	10a18 <rb_setup_ssl_server+0x298>
   109f0:	bl	552c <__errno_location@plt>
   109f4:	ldr	r0, [r0]
   109f8:	bl	4c80 <strerror@plt>
   109fc:	mov	r3, r0
   10a00:	ldr	r0, [pc, #320]	; 10b48 <rb_setup_ssl_server+0x3c8>
   10a04:	ldr	r1, [pc, #320]	; 10b4c <rb_setup_ssl_server+0x3cc>
   10a08:	mov	r2, r8
   10a0c:	add	r0, pc, r0
   10a10:	add	r1, pc, r1
   10a14:	bl	519c <rb_lib_log@plt>
   10a18:	mov	r0, r4
   10a1c:	mov	r1, r5
   10a20:	bl	4cd4 <SSL_CTX_set_cipher_list@plt>
   10a24:	cmp	r0, #1
   10a28:	bne	10af4 <rb_setup_ssl_server+0x374>
   10a2c:	mov	r0, r4
   10a30:	mov	r1, #44	; 0x2c
   10a34:	mov	r2, #0
   10a38:	mov	r3, #0
   10a3c:	bl	4f14 <SSL_CTX_ctrl@plt>
   10a40:	ldr	r2, [pc, #284]	; 10b64 <rb_setup_ssl_server+0x3e4>
   10a44:	mov	r0, r4
   10a48:	mov	r1, #5
   10a4c:	add	r2, pc, r2
   10a50:	bl	555c <SSL_CTX_set_verify@plt>
   10a54:	mov	r0, r4
   10a58:	mov	r1, #2048	; 0x800
   10a5c:	bl	4ddc <SSL_CTX_clear_options@plt>
   10a60:	mov	r0, r4
   10a64:	mov	r1, #67108864	; 0x4000000
   10a68:	bl	50dc <SSL_CTX_set_options@plt>
   10a6c:	mov	r0, r4
   10a70:	mov	r1, #16384	; 0x4000
   10a74:	bl	50dc <SSL_CTX_set_options@plt>
   10a78:	mov	r0, r4
   10a7c:	mov	r1, #4194304	; 0x400000
   10a80:	bl	50dc <SSL_CTX_set_options@plt>
   10a84:	mov	r0, r4
   10a88:	mov	r1, #0
   10a8c:	bl	50dc <SSL_CTX_set_options@plt>
   10a90:	mov	r0, r4
   10a94:	mov	r1, #0
   10a98:	bl	50dc <SSL_CTX_set_options@plt>
   10a9c:	ldr	r3, [pc, #196]	; 10b68 <rb_setup_ssl_server+0x3e8>
   10aa0:	mov	r0, r4
   10aa4:	mov	r1, #92	; 0x5c
   10aa8:	mov	r2, #0
   10aac:	add	r3, pc, r3
   10ab0:	bl	4f14 <SSL_CTX_ctrl@plt>
   10ab4:	ldr	r0, [pc, #176]	; 10b6c <rb_setup_ssl_server+0x3ec>
   10ab8:	ldr	r0, [pc, r0]
   10abc:	cmp	r0, #0
   10ac0:	beq	10ac8 <rb_setup_ssl_server+0x348>
   10ac4:	bl	4d28 <SSL_CTX_free@plt>
   10ac8:	ldr	r0, [pc, #160]	; 10b70 <rb_setup_ssl_server+0x3f0>
   10acc:	add	r0, pc, r0
   10ad0:	str	r4, [r0]
   10ad4:	ldr	r0, [pc, #152]	; 10b74 <rb_setup_ssl_server+0x3f4>
   10ad8:	ldr	r1, [pc, #152]	; 10b78 <rb_setup_ssl_server+0x3f8>
   10adc:	add	r0, pc, r0
   10ae0:	add	r1, pc, r1
   10ae4:	bl	519c <rb_lib_log@plt>
   10ae8:	mov	r0, #1
   10aec:	sub	sp, fp, #24
   10af0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10af4:	ldr	r0, [pc, #96]	; 10b5c <rb_setup_ssl_server+0x3dc>
   10af8:	ldr	r1, [pc, #96]	; 10b60 <rb_setup_ssl_server+0x3e0>
   10afc:	add	r0, pc, r0
   10b00:	add	r1, pc, r1
   10b04:	bl	519c <rb_lib_log@plt>
   10b08:	b	109c4 <rb_setup_ssl_server+0x244>
   10b0c:	.word	0x0000aa36
   10b10:	.word	0x0000aa54
   10b14:	.word	0x0000add5
   10b18:	.word	0x0002f270
   10b1c:	.word	0x0000aa1c
   10b20:	.word	0x0000aa04
   10b24:	.word	0x0002f220
   10b28:	.word	0x0000a9dc
   10b2c:	.word	0x0000a9b0
   10b30:	.word	0x0002f1d8
   10b34:	.word	0x0000a9c6
   10b38:	.word	0x0000a968
   10b3c:	.word	0x0000a9c9
   10b40:	.word	0x0000a940
   10b44:	.word	0x0000b0d8
   10b48:	.word	0x0000a9c1
   10b4c:	.word	0x0000a914
   10b50:	.word	0x0002f2e4
   10b54:	.word	0x0000ab36
   10b58:	.word	0x0000aa74
   10b5c:	.word	0x0000a907
   10b60:	.word	0x0000a824
   10b64:	.word	0x00000128
   10b68:	.word	0x0001c984
   10b6c:	.word	0x0002eeb8
   10b70:	.word	0x0002eea4
   10b74:	.word	0x0000a964
   10b78:	.word	0x0000a844

00010b7c <verify_accept_all_cb>:
   10b7c:	mov	r0, #1
   10b80:	bx	lr

00010b84 <rb_init_prng>:
   10b84:	push	{r4, r5, fp, lr}
   10b88:	add	fp, sp, #8
   10b8c:	mov	r5, r1
   10b90:	mov	r4, r0
   10b94:	bl	4ce0 <ERR_get_error@plt>
   10b98:	cmp	r0, #0
   10b9c:	bne	10b94 <rb_init_prng+0x10>
   10ba0:	cmp	r5, #0
   10ba4:	bne	10bbc <rb_init_prng+0x38>
   10ba8:	mov	r0, r4
   10bac:	mvn	r1, #0
   10bb0:	bl	4d10 <RAND_load_file@plt>
   10bb4:	cmn	r0, #1
   10bb8:	ble	10be4 <rb_init_prng+0x60>
   10bbc:	bl	5400 <RAND_status@plt>
   10bc0:	cmp	r0, #1
   10bc4:	bne	10c34 <rb_init_prng+0xb0>
   10bc8:	ldr	r0, [pc, #200]	; 10c98 <rb_init_prng+0x114>
   10bcc:	ldr	r1, [pc, #200]	; 10c9c <rb_init_prng+0x118>
   10bd0:	add	r0, pc, r0
   10bd4:	add	r1, pc, r1
   10bd8:	bl	519c <rb_lib_log@plt>
   10bdc:	mov	r0, #1
   10be0:	pop	{r4, r5, fp, pc}
   10be4:	mov	r0, #0
   10be8:	mov	r4, r0
   10bec:	bl	4ce0 <ERR_get_error@plt>
   10bf0:	cmp	r0, #0
   10bf4:	bne	10be8 <rb_init_prng+0x64>
   10bf8:	ldr	r5, [pc, #128]	; 10c80 <rb_init_prng+0xfc>
   10bfc:	mov	r0, r4
   10c00:	mov	r2, #512	; 0x200
   10c04:	add	r5, pc, r5
   10c08:	mov	r1, r5
   10c0c:	bl	4e60 <ERR_error_string_n@plt>
   10c10:	ldr	r0, [pc, #108]	; 10c84 <rb_init_prng+0x100>
   10c14:	ldr	r1, [pc, #108]	; 10c88 <rb_init_prng+0x104>
   10c18:	mov	r2, r5
   10c1c:	add	r0, pc, r0
   10c20:	add	r1, pc, r1
   10c24:	bl	519c <rb_lib_log@plt>
   10c28:	bl	5400 <RAND_status@plt>
   10c2c:	cmp	r0, #1
   10c30:	beq	10bc8 <rb_init_prng+0x44>
   10c34:	mov	r0, #0
   10c38:	mov	r4, r0
   10c3c:	bl	4ce0 <ERR_get_error@plt>
   10c40:	cmp	r0, #0
   10c44:	bne	10c38 <rb_init_prng+0xb4>
   10c48:	ldr	r5, [pc, #60]	; 10c8c <rb_init_prng+0x108>
   10c4c:	mov	r0, r4
   10c50:	mov	r2, #512	; 0x200
   10c54:	add	r5, pc, r5
   10c58:	mov	r1, r5
   10c5c:	bl	4e60 <ERR_error_string_n@plt>
   10c60:	ldr	r0, [pc, #40]	; 10c90 <rb_init_prng+0x10c>
   10c64:	ldr	r1, [pc, #40]	; 10c94 <rb_init_prng+0x110>
   10c68:	mov	r2, r5
   10c6c:	add	r0, pc, r0
   10c70:	add	r1, pc, r1
   10c74:	bl	519c <rb_lib_log@plt>
   10c78:	mov	r0, #0
   10c7c:	pop	{r4, r5, fp, pc}
   10c80:	.word	0x0002ef70
   10c84:	.word	0x0000a845
   10c88:	.word	0x0000a858
   10c8c:	.word	0x0002ef20
   10c90:	.word	0x0000a819
   10c94:	.word	0x0000a808
   10c98:	.word	0x0000a8c9
   10c9c:	.word	0x0000a8a4

00010ca0 <rb_get_random>:
   10ca0:	push	{r4, r5, fp, lr}
   10ca4:	add	fp, sp, #8
   10ca8:	mov	r4, r1
   10cac:	mov	r5, r0
   10cb0:	bl	4ce0 <ERR_get_error@plt>
   10cb4:	cmp	r0, #0
   10cb8:	bne	10cb0 <rb_get_random+0x10>
   10cbc:	mov	r0, r5
   10cc0:	mov	r1, r4
   10cc4:	bl	5334 <RAND_bytes@plt>
   10cc8:	mov	r1, r0
   10ccc:	mov	r0, #1
   10cd0:	cmp	r1, #1
   10cd4:	popeq	{r4, r5, fp, pc}
   10cd8:	mov	r0, #0
   10cdc:	mov	r4, r0
   10ce0:	bl	4ce0 <ERR_get_error@plt>
   10ce4:	cmp	r0, #0
   10ce8:	bne	10cdc <rb_get_random+0x3c>
   10cec:	ldr	r5, [pc, #48]	; 10d24 <rb_get_random+0x84>
   10cf0:	mov	r0, r4
   10cf4:	mov	r2, #512	; 0x200
   10cf8:	add	r5, pc, r5
   10cfc:	mov	r1, r5
   10d00:	bl	4e60 <ERR_error_string_n@plt>
   10d04:	ldr	r0, [pc, #28]	; 10d28 <rb_get_random+0x88>
   10d08:	ldr	r1, [pc, #28]	; 10d2c <rb_get_random+0x8c>
   10d0c:	mov	r2, r5
   10d10:	add	r0, pc, r0
   10d14:	add	r1, pc, r1
   10d18:	bl	519c <rb_lib_log@plt>
   10d1c:	mov	r0, #0
   10d20:	pop	{r4, r5, fp, pc}
   10d24:	.word	0x0002ee7c
   10d28:	.word	0x0000a79e
   10d2c:	.word	0x0000a7ad

00010d30 <rb_get_ssl_strerror>:
   10d30:	push	{r4, sl, fp, lr}
   10d34:	add	fp, sp, #8
   10d38:	ldr	r0, [r0, #64]	; 0x40
   10d3c:	ldr	r4, [pc, #20]	; 10d58 <rb_get_ssl_strerror+0x28>
   10d40:	mov	r2, #512	; 0x200
   10d44:	add	r4, pc, r4
   10d48:	mov	r1, r4
   10d4c:	bl	4e60 <ERR_error_string_n@plt>
   10d50:	mov	r0, r4
   10d54:	pop	{r4, sl, fp, pc}
   10d58:	.word	0x0002ee30

00010d5c <rb_get_ssl_certfp>:
   10d5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10d60:	add	fp, sp, #24
   10d64:	mov	r4, #0
   10d68:	cmp	r0, #0
   10d6c:	beq	10ddc <rb_get_ssl_certfp+0x80>
   10d70:	mov	r5, r0
   10d74:	ldr	r0, [r0, #56]	; 0x38
   10d78:	cmp	r0, #0
   10d7c:	beq	10ddc <rb_get_ssl_certfp+0x80>
   10d80:	mov	r8, r2
   10d84:	mov	r6, r1
   10d88:	bl	528c <SSL_get_peer_certificate@plt>
   10d8c:	cmp	r0, #0
   10d90:	beq	10ddc <rb_get_ssl_certfp+0x80>
   10d94:	mov	r7, r0
   10d98:	ldr	r0, [r5, #56]	; 0x38
   10d9c:	bl	52a4 <SSL_get_verify_result@plt>
   10da0:	mov	r4, #0
   10da4:	cmp	r0, #27
   10da8:	bhi	10dd4 <rb_get_ssl_certfp+0x78>
   10dac:	movw	r2, #1
   10db0:	mov	r1, #1
   10db4:	movt	r2, #2108	; 0x83c
   10db8:	tst	r2, r1, lsl r0
   10dbc:	beq	10dd4 <rb_get_ssl_certfp+0x78>
   10dc0:	mov	r0, r7
   10dc4:	mov	r1, r6
   10dc8:	mov	r2, r8
   10dcc:	bl	10de4 <make_certfp>
   10dd0:	mov	r4, r0
   10dd4:	mov	r0, r7
   10dd8:	bl	54a8 <X509_free@plt>
   10ddc:	mov	r0, r4
   10de0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00010de4 <make_certfp>:
   10de4:	push	{r4, r5, r6, sl, fp, lr}
   10de8:	add	fp, sp, #16
   10dec:	sub	sp, sp, #8
   10df0:	mov	r5, r0
   10df4:	mov	r0, #0
   10df8:	mov	r4, r1
   10dfc:	cmp	r2, #1
   10e00:	str	r0, [sp, #4]
   10e04:	ble	10e38 <make_certfp+0x54>
   10e08:	cmp	r2, #2
   10e0c:	beq	10e58 <make_certfp+0x74>
   10e10:	movw	r1, #4097	; 0x1001
   10e14:	cmp	r2, r1
   10e18:	beq	10e68 <make_certfp+0x84>
   10e1c:	movw	r1, #4098	; 0x1002
   10e20:	cmp	r2, r1
   10e24:	bne	10ecc <make_certfp+0xe8>
   10e28:	mov	r0, #64	; 0x40
   10e2c:	str	r0, [sp, #4]
   10e30:	bl	53e8 <EVP_sha512@plt>
   10e34:	b	10e74 <make_certfp+0x90>
   10e38:	cmp	r2, #0
   10e3c:	beq	10e90 <make_certfp+0xac>
   10e40:	cmp	r2, #1
   10e44:	bne	10ecc <make_certfp+0xe8>
   10e48:	mov	r0, #32
   10e4c:	str	r0, [sp, #4]
   10e50:	bl	5418 <EVP_sha256@plt>
   10e54:	b	10e9c <make_certfp+0xb8>
   10e58:	mov	r0, #64	; 0x40
   10e5c:	str	r0, [sp, #4]
   10e60:	bl	53e8 <EVP_sha512@plt>
   10e64:	b	10e9c <make_certfp+0xb8>
   10e68:	mov	r0, #32
   10e6c:	str	r0, [sp, #4]
   10e70:	bl	5418 <EVP_sha256@plt>
   10e74:	mov	r6, r0
   10e78:	mov	r0, r5
   10e7c:	bl	4e00 <X509_get_X509_PUBKEY@plt>
   10e80:	mov	r5, r0
   10e84:	ldr	r0, [pc, #156]	; 10f28 <make_certfp+0x144>
   10e88:	ldr	r0, [pc, r0]
   10e8c:	b	10ea8 <make_certfp+0xc4>
   10e90:	mov	r0, #20
   10e94:	str	r0, [sp, #4]
   10e98:	bl	516c <EVP_sha1@plt>
   10e9c:	mov	r6, r0
   10ea0:	ldr	r0, [pc, #124]	; 10f24 <make_certfp+0x140>
   10ea4:	ldr	r0, [pc, r0]
   10ea8:	add	r1, sp, #4
   10eac:	mov	r2, r5
   10eb0:	mov	r3, r4
   10eb4:	str	r1, [sp]
   10eb8:	mov	r1, r6
   10ebc:	bl	5274 <ASN1_item_digest@plt>
   10ec0:	cmp	r0, #1
   10ec4:	bne	10ed4 <make_certfp+0xf0>
   10ec8:	ldr	r0, [sp, #4]
   10ecc:	sub	sp, fp, #16
   10ed0:	pop	{r4, r5, r6, sl, fp, pc}
   10ed4:	mov	r0, #0
   10ed8:	mov	r4, r0
   10edc:	bl	4ce0 <ERR_get_error@plt>
   10ee0:	cmp	r0, #0
   10ee4:	bne	10ed8 <make_certfp+0xf4>
   10ee8:	ldr	r5, [pc, #60]	; 10f2c <make_certfp+0x148>
   10eec:	mov	r0, r4
   10ef0:	mov	r2, #512	; 0x200
   10ef4:	add	r5, pc, r5
   10ef8:	mov	r1, r5
   10efc:	bl	4e60 <ERR_error_string_n@plt>
   10f00:	ldr	r0, [pc, #40]	; 10f30 <make_certfp+0x14c>
   10f04:	ldr	r1, [pc, #40]	; 10f34 <make_certfp+0x150>
   10f08:	mov	r2, r5
   10f0c:	add	r0, pc, r0
   10f10:	add	r1, pc, r1
   10f14:	bl	519c <rb_lib_log@plt>
   10f18:	mov	r0, #0
   10f1c:	sub	sp, fp, #16
   10f20:	pop	{r4, r5, r6, sl, fp, pc}
   10f24:	.word	0x0001c524
   10f28:	.word	0x0001c54c
   10f2c:	.word	0x0002ec80
   10f30:	.word	0x0000a63d
   10f34:	.word	0x0000a652

00010f38 <rb_get_ssl_certfp_file>:
   10f38:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10f3c:	add	fp, sp, #24
   10f40:	mov	r7, r1
   10f44:	ldr	r1, [pc, #104]	; 10fb4 <rb_get_ssl_certfp_file+0x7c>
   10f48:	mov	r8, r2
   10f4c:	add	r1, pc, r1
   10f50:	bl	4ec0 <fopen@plt>
   10f54:	cmp	r0, #0
   10f58:	beq	10fa8 <rb_get_ssl_certfp_file+0x70>
   10f5c:	mov	r1, #0
   10f60:	mov	r2, #0
   10f64:	mov	r3, #0
   10f68:	mov	r4, r0
   10f6c:	mov	r6, #0
   10f70:	bl	50a0 <PEM_read_X509@plt>
   10f74:	cmp	r0, #0
   10f78:	beq	10f98 <rb_get_ssl_certfp_file+0x60>
   10f7c:	mov	r1, r7
   10f80:	mov	r2, r8
   10f84:	mov	r5, r0
   10f88:	bl	10de4 <make_certfp>
   10f8c:	mov	r6, r0
   10f90:	mov	r0, r5
   10f94:	bl	54a8 <X509_free@plt>
   10f98:	mov	r0, r4
   10f9c:	bl	4e3c <fclose@plt>
   10fa0:	mov	r0, r6
   10fa4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10fa8:	mvn	r6, #0
   10fac:	mov	r0, r6
   10fb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10fb4:	.word	0x0000a9a0

00010fb8 <rb_get_ssl_info>:
   10fb8:	push	{r4, r5, r6, r7, fp, lr}
   10fbc:	add	fp, sp, #16
   10fc0:	sub	sp, sp, #16
   10fc4:	movw	r4, #4175	; 0x104f
   10fc8:	mov	r5, r1
   10fcc:	mov	r6, r0
   10fd0:	movt	r4, #4112	; 0x1010
   10fd4:	bl	4f74 <OpenSSL_version_num@plt>
   10fd8:	cmp	r0, r4
   10fdc:	bne	10ff8 <rb_get_ssl_info+0x40>
   10fe0:	ldr	r0, [pc, #80]	; 11038 <rb_get_ssl_info+0x80>
   10fe4:	add	r0, pc, r0
   10fe8:	str	r0, [sp]
   10fec:	ldr	r2, [pc, #72]	; 1103c <rb_get_ssl_info+0x84>
   10ff0:	add	r2, pc, r2
   10ff4:	b	11020 <rb_get_ssl_info+0x68>
   10ff8:	bl	4f74 <OpenSSL_version_num@plt>
   10ffc:	mov	r7, r0
   11000:	mov	r0, #0
   11004:	bl	54d8 <OpenSSL_version@plt>
   11008:	ldr	r1, [pc, #48]	; 11040 <rb_get_ssl_info+0x88>
   1100c:	add	r1, pc, r1
   11010:	stm	sp, {r1, r7}
   11014:	str	r0, [sp, #8]
   11018:	ldr	r2, [pc, #36]	; 11044 <rb_get_ssl_info+0x8c>
   1101c:	add	r2, pc, r2
   11020:	mov	r0, r6
   11024:	mov	r1, r5
   11028:	mov	r3, r4
   1102c:	bl	53f4 <snprintf@plt>
   11030:	sub	sp, fp, #16
   11034:	pop	{r4, r5, r6, r7, fp, pc}
   11038:	.word	0x0000a50f
   1103c:	.word	0x0000a4df
   11040:	.word	0x0000a4e7
   11044:	.word	0x0000a4f3

00011048 <rb_ssl_get_cipher>:
   11048:	push	{r4, r5, r6, sl, fp, lr}
   1104c:	add	fp, sp, #16
   11050:	sub	sp, sp, #8
   11054:	mov	r4, #0
   11058:	cmp	r0, #0
   1105c:	beq	110a8 <rb_ssl_get_cipher+0x60>
   11060:	mov	r5, r0
   11064:	ldr	r0, [r0, #56]	; 0x38
   11068:	cmp	r0, #0
   1106c:	beq	110a8 <rb_ssl_get_cipher+0x60>
   11070:	bl	54fc <SSL_get_version@plt>
   11074:	mov	r6, r0
   11078:	ldr	r0, [r5, #56]	; 0x38
   1107c:	bl	4de8 <SSL_get_current_cipher@plt>
   11080:	bl	4f5c <SSL_CIPHER_get_name@plt>
   11084:	str	r0, [sp]
   11088:	mov	r1, #512	; 0x200
   1108c:	mov	r3, r6
   11090:	ldr	r4, [pc, #28]	; 110b4 <rb_ssl_get_cipher+0x6c>
   11094:	ldr	r2, [pc, #28]	; 110b8 <rb_ssl_get_cipher+0x70>
   11098:	add	r4, pc, r4
   1109c:	add	r2, pc, r2
   110a0:	mov	r0, r4
   110a4:	bl	53f4 <snprintf@plt>
   110a8:	mov	r0, r4
   110ac:	sub	sp, fp, #16
   110b0:	pop	{r4, r5, r6, sl, fp, pc}
   110b4:	.word	0x0002e8dc
   110b8:	.word	0x0000a4a6

000110bc <rb_ssl_read>:
   110bc:	push	{fp, lr}
   110c0:	mov	fp, sp
   110c4:	sub	sp, sp, #8
   110c8:	mov	r3, r1
   110cc:	mov	r1, r0
   110d0:	str	r2, [sp]
   110d4:	mov	r0, #0
   110d8:	mov	r2, r3
   110dc:	mov	r3, #0
   110e0:	bl	110ec <rb_ssl_read_or_write>
   110e4:	mov	sp, fp
   110e8:	pop	{fp, pc}

000110ec <rb_ssl_read_or_write>:
   110ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   110f0:	add	fp, sp, #24
   110f4:	ldr	r5, [fp, #8]
   110f8:	mov	r6, r3
   110fc:	mov	r7, r2
   11100:	mov	r8, r1
   11104:	mov	r4, r0
   11108:	bl	4ce0 <ERR_get_error@plt>
   1110c:	cmp	r0, #0
   11110:	bne	11108 <rb_ssl_read_or_write+0x1c>
   11114:	ldr	r0, [r8, #56]	; 0x38
   11118:	cmp	r4, #0
   1111c:	beq	1113c <rb_ssl_read_or_write+0x50>
   11120:	mov	r1, r6
   11124:	mov	r2, r5
   11128:	bl	4ea8 <SSL_write@plt>
   1112c:	mov	r1, r0
   11130:	cmn	r0, #1
   11134:	bgt	11224 <rb_ssl_read_or_write+0x138>
   11138:	b	11154 <rb_ssl_read_or_write+0x68>
   1113c:	mov	r1, r7
   11140:	mov	r2, r5
   11144:	bl	5010 <SSL_read@plt>
   11148:	mov	r1, r0
   1114c:	cmn	r0, #1
   11150:	bgt	11224 <rb_ssl_read_or_write+0x138>
   11154:	ldr	r0, [r8, #56]	; 0x38
   11158:	bl	54f0 <SSL_get_error@plt>
   1115c:	sub	r0, r0, #2
   11160:	cmp	r0, #4
   11164:	bhi	111bc <rb_ssl_read_or_write+0xd0>
   11168:	add	r2, pc, #8
   1116c:	mov	r1, #0
   11170:	ldr	r0, [r2, r0, lsl #2]
   11174:	add	pc, r2, r0
   11178:	.word	0x00000014
   1117c:	.word	0x0000002c
   11180:	.word	0x00000044
   11184:	.word	0x00000068
   11188:	.word	0x000000ac
   1118c:	bl	552c <__errno_location@plt>
   11190:	mov	r1, #11
   11194:	str	r1, [r0]
   11198:	mvn	r1, #2
   1119c:	mov	r0, r1
   111a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   111a4:	bl	552c <__errno_location@plt>
   111a8:	mov	r1, #11
   111ac:	str	r1, [r0]
   111b0:	mvn	r1, #3
   111b4:	mov	r0, r1
   111b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   111bc:	mov	r0, #0
   111c0:	mov	r4, r0
   111c4:	bl	4ce0 <ERR_get_error@plt>
   111c8:	cmp	r0, #0
   111cc:	bne	111c0 <rb_ssl_read_or_write+0xd4>
   111d0:	cmp	r4, #0
   111d4:	str	r4, [r8, #64]	; 0x40
   111d8:	bne	11200 <rb_ssl_read_or_write+0x114>
   111dc:	b	11220 <rb_ssl_read_or_write+0x134>
   111e0:	mov	r0, #0
   111e4:	mov	r4, r0
   111e8:	bl	4ce0 <ERR_get_error@plt>
   111ec:	cmp	r0, #0
   111f0:	bne	111e4 <rb_ssl_read_or_write+0xf8>
   111f4:	cmp	r4, #0
   111f8:	beq	11218 <rb_ssl_read_or_write+0x12c>
   111fc:	str	r4, [r8, #64]	; 0x40
   11200:	bl	552c <__errno_location@plt>
   11204:	mov	r1, #5
   11208:	str	r1, [r0]
   1120c:	mvn	r1, #1
   11210:	mov	r0, r1
   11214:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11218:	mov	r0, #0
   1121c:	str	r0, [r8, #64]	; 0x40
   11220:	mvn	r1, #0
   11224:	mov	r0, r1
   11228:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001122c <rb_ssl_write>:
   1122c:	push	{fp, lr}
   11230:	mov	fp, sp
   11234:	sub	sp, sp, #8
   11238:	mov	r3, r1
   1123c:	mov	r1, r0
   11240:	str	r2, [sp]
   11244:	mov	r0, #1
   11248:	mov	r2, #0
   1124c:	bl	110ec <rb_ssl_read_or_write>
   11250:	mov	sp, fp
   11254:	pop	{fp, pc}

00011258 <rb_supports_ssl>:
   11258:	mov	r0, #1
   1125c:	bx	lr

00011260 <rb_ssl_handshake_count>:
   11260:	ldr	r0, [r0, #60]	; 0x3c
   11264:	bx	lr

00011268 <rb_ssl_clear_handshake_count>:
   11268:	mov	r1, #0
   1126c:	str	r1, [r0, #60]	; 0x3c
   11270:	bx	lr

00011274 <rb_ssl_start_accepted>:
   11274:	push	{r4, r5, r6, r7, fp, lr}
   11278:	add	fp, sp, #16
   1127c:	mov	r4, r0
   11280:	ldrb	r0, [r0, #17]
   11284:	mov	r6, r1
   11288:	mov	r1, #144	; 0x90
   1128c:	mov	r5, r3
   11290:	mov	r7, r2
   11294:	orr	r0, r0, #32
   11298:	strb	r0, [r4, #17]
   1129c:	mov	r0, #1
   112a0:	bl	4e9c <calloc@plt>
   112a4:	cmp	r0, #0
   112a8:	beq	112f8 <rb_ssl_start_accepted+0x84>
   112ac:	mov	r1, #0
   112b0:	mov	r2, #132	; 0x84
   112b4:	str	r0, [r4, #52]	; 0x34
   112b8:	str	r7, [r0, #140]	; 0x8c
   112bc:	str	r6, [r0, #132]	; 0x84
   112c0:	bl	4ed8 <memset@plt>
   112c4:	ldr	r2, [pc, #48]	; 112fc <rb_ssl_start_accepted+0x88>
   112c8:	mov	r0, r4
   112cc:	mov	r1, r5
   112d0:	mov	r3, #0
   112d4:	add	r2, pc, r2
   112d8:	bl	4cc8 <rb_settimeout@plt>
   112dc:	mov	r0, r4
   112e0:	mov	r1, #0
   112e4:	bl	11334 <rb_ssl_init_fd>
   112e8:	mov	r0, r4
   112ec:	mov	r1, #0
   112f0:	pop	{r4, r5, r6, r7, fp, lr}
   112f4:	b	11400 <rb_ssl_accept_common>
   112f8:	bl	51fc <rb_outofmemory@plt>
   112fc:	.word	0x00000024

00011300 <rb_ssl_timeout_cb>:
   11300:	push	{fp, lr}
   11304:	mov	fp, sp
   11308:	sub	sp, sp, #8
   1130c:	ldr	r1, [r0, #52]	; 0x34
   11310:	mov	r2, #0
   11314:	mov	r3, #0
   11318:	ldr	ip, [r1, #132]	; 0x84
   1131c:	ldr	r1, [r1, #140]	; 0x8c
   11320:	str	r1, [sp]
   11324:	mov	r1, #3
   11328:	blx	ip
   1132c:	mov	sp, fp
   11330:	pop	{fp, pc}

00011334 <rb_ssl_init_fd>:
   11334:	push	{r4, r5, r6, sl, fp, lr}
   11338:	add	fp, sp, #16
   1133c:	mov	r5, r1
   11340:	mov	r4, r0
   11344:	bl	4ce0 <ERR_get_error@plt>
   11348:	cmp	r0, #0
   1134c:	bne	11344 <rb_ssl_init_fd+0x10>
   11350:	ldr	r0, [pc, #152]	; 113f0 <rb_ssl_init_fd+0xbc>
   11354:	ldr	r0, [pc, r0]
   11358:	bl	4fc8 <SSL_new@plt>
   1135c:	cmp	r0, #0
   11360:	str	r0, [r4, #56]	; 0x38
   11364:	beq	11380 <rb_ssl_init_fd+0x4c>
   11368:	cmp	r5, #1
   1136c:	beq	113d0 <rb_ssl_init_fd+0x9c>
   11370:	cmp	r5, #0
   11374:	bne	113d4 <rb_ssl_init_fd+0xa0>
   11378:	bl	5238 <SSL_set_accept_state@plt>
   1137c:	b	113d4 <rb_ssl_init_fd+0xa0>
   11380:	mov	r0, #0
   11384:	mov	r5, r0
   11388:	bl	4ce0 <ERR_get_error@plt>
   1138c:	cmp	r0, #0
   11390:	bne	11384 <rb_ssl_init_fd+0x50>
   11394:	ldr	r6, [pc, #88]	; 113f4 <rb_ssl_init_fd+0xc0>
   11398:	mov	r0, r5
   1139c:	mov	r2, #512	; 0x200
   113a0:	add	r6, pc, r6
   113a4:	mov	r1, r6
   113a8:	bl	4e60 <ERR_error_string_n@plt>
   113ac:	ldr	r0, [pc, #68]	; 113f8 <rb_ssl_init_fd+0xc4>
   113b0:	ldr	r1, [pc, #68]	; 113fc <rb_ssl_init_fd+0xc8>
   113b4:	mov	r2, r6
   113b8:	add	r0, pc, r0
   113bc:	add	r1, pc, r1
   113c0:	bl	519c <rb_lib_log@plt>
   113c4:	mov	r0, r4
   113c8:	pop	{r4, r5, r6, sl, fp, lr}
   113cc:	b	5100 <rb_close@plt>
   113d0:	bl	53ac <SSL_set_connect_state@plt>
   113d4:	ldr	r5, [r4, #56]	; 0x38
   113d8:	mov	r0, r4
   113dc:	bl	4dac <rb_get_fd@plt>
   113e0:	mov	r1, r0
   113e4:	mov	r0, r5
   113e8:	pop	{r4, r5, r6, sl, fp, lr}
   113ec:	b	4f08 <SSL_set_fd@plt>
   113f0:	.word	0x0002e61c
   113f4:	.word	0x0002e7d4
   113f8:	.word	0x0000a1b6
   113fc:	.word	0x0000a1c2

00011400 <rb_ssl_accept_common>:
   11400:	push	{r4, r5, r6, sl, fp, lr}
   11404:	add	fp, sp, #16
   11408:	sub	sp, sp, #8
   1140c:	mov	r4, r0
   11410:	bl	4ce0 <ERR_get_error@plt>
   11414:	cmp	r0, #0
   11418:	bne	11410 <rb_ssl_accept_common+0x10>
   1141c:	ldr	r0, [r4, #56]	; 0x38
   11420:	bl	504c <SSL_do_handshake@plt>
   11424:	mov	r6, r0
   11428:	ldr	r0, [r4, #56]	; 0x38
   1142c:	mov	r1, r6
   11430:	bl	54f0 <SSL_get_error@plt>
   11434:	cmp	r6, #1
   11438:	bne	114b4 <rb_ssl_accept_common+0xb4>
   1143c:	ldr	r0, [r4, #60]	; 0x3c
   11440:	mov	r1, #0
   11444:	mov	r2, #0
   11448:	mov	r3, #0
   1144c:	mov	r6, #0
   11450:	add	r0, r0, #1
   11454:	str	r0, [r4, #60]	; 0x3c
   11458:	mov	r0, r4
   1145c:	bl	4cc8 <rb_settimeout@plt>
   11460:	mov	r0, r4
   11464:	mov	r1, #3
   11468:	mov	r2, #0
   1146c:	mov	r3, #0
   11470:	bl	4d70 <rb_setselect@plt>
   11474:	ldr	r5, [r4, #52]	; 0x34
   11478:	str	r6, [r4, #52]	; 0x34
   1147c:	mov	r1, #0
   11480:	ldr	r0, [r5, #140]	; 0x8c
   11484:	ldr	r3, [r5, #128]	; 0x80
   11488:	ldr	r6, [r5, #132]	; 0x84
   1148c:	mov	r2, r5
   11490:	str	r0, [sp]
   11494:	mov	r0, r4
   11498:	blx	r6
   1149c:	cmp	r5, #0
   114a0:	beq	11504 <rb_ssl_accept_common+0x104>
   114a4:	mov	r0, r5
   114a8:	sub	sp, fp, #16
   114ac:	pop	{r4, r5, r6, sl, fp, lr}
   114b0:	b	4f8c <free@plt>
   114b4:	mov	r5, r0
   114b8:	cmn	r6, #1
   114bc:	cmpeq	r5, #2
   114c0:	beq	1150c <rb_ssl_accept_common+0x10c>
   114c4:	cmn	r6, #1
   114c8:	cmpeq	r5, #3
   114cc:	beq	1152c <rb_ssl_accept_common+0x12c>
   114d0:	bl	552c <__errno_location@plt>
   114d4:	mov	r1, #5
   114d8:	mov	r2, #0
   114dc:	mov	r3, #0
   114e0:	str	r1, [r0]
   114e4:	str	r5, [r4, #64]	; 0x40
   114e8:	mov	r1, #6
   114ec:	ldr	r0, [r4, #52]	; 0x34
   114f0:	ldr	r6, [r0, #132]	; 0x84
   114f4:	ldr	r0, [r0, #140]	; 0x8c
   114f8:	str	r0, [sp]
   114fc:	mov	r0, r4
   11500:	blx	r6
   11504:	sub	sp, fp, #16
   11508:	pop	{r4, r5, r6, sl, fp, pc}
   1150c:	ldr	r2, [pc, #56]	; 1154c <rb_ssl_accept_common+0x14c>
   11510:	mov	r0, r4
   11514:	mov	r1, #1
   11518:	add	r2, pc, r2
   1151c:	mov	r3, #0
   11520:	sub	sp, fp, #16
   11524:	pop	{r4, r5, r6, sl, fp, lr}
   11528:	b	4d70 <rb_setselect@plt>
   1152c:	ldr	r2, [pc, #28]	; 11550 <rb_ssl_accept_common+0x150>
   11530:	mov	r0, r4
   11534:	mov	r1, #2
   11538:	add	r2, pc, r2
   1153c:	mov	r3, #0
   11540:	sub	sp, fp, #16
   11544:	pop	{r4, r5, r6, sl, fp, lr}
   11548:	b	4d70 <rb_setselect@plt>
   1154c:	.word	0xfffffee0
   11550:	.word	0xfffffec0

00011554 <rb_ssl_accept_setup>:
   11554:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11558:	add	fp, sp, #24
   1155c:	mov	r6, r0
   11560:	ldrb	r0, [r1, #17]
   11564:	mov	r4, r1
   11568:	mov	r5, r3
   1156c:	mov	r8, r2
   11570:	orr	r0, r0, #32
   11574:	strb	r0, [r1, #17]
   11578:	mov	r0, #1
   1157c:	mov	r1, #144	; 0x90
   11580:	bl	4e9c <calloc@plt>
   11584:	cmp	r0, #0
   11588:	beq	11608 <rb_ssl_accept_setup+0xb4>
   1158c:	str	r0, [r4, #52]	; 0x34
   11590:	mov	r7, r0
   11594:	cmp	r5, #127	; 0x7f
   11598:	rsb	r2, r5, #128	; 0x80
   1159c:	ldr	r0, [r6, #52]	; 0x34
   115a0:	movwhi	r2, #0
   115a4:	ldr	r1, [r0, #132]	; 0x84
   115a8:	str	r1, [r7, #132]	; 0x84
   115ac:	mov	r1, #0
   115b0:	ldr	r0, [r0, #140]	; 0x8c
   115b4:	str	r5, [r7, #128]	; 0x80
   115b8:	str	r0, [r7, #140]	; 0x8c
   115bc:	add	r0, r7, r5
   115c0:	bl	4ed8 <memset@plt>
   115c4:	mov	r0, r7
   115c8:	mov	r1, r8
   115cc:	mov	r2, r5
   115d0:	bl	5094 <memcpy@plt>
   115d4:	ldr	r2, [pc, #48]	; 1160c <rb_ssl_accept_setup+0xb8>
   115d8:	mov	r0, r4
   115dc:	mov	r1, #10
   115e0:	mov	r3, #0
   115e4:	add	r2, pc, r2
   115e8:	bl	4cc8 <rb_settimeout@plt>
   115ec:	mov	r0, r4
   115f0:	mov	r1, #0
   115f4:	bl	11334 <rb_ssl_init_fd>
   115f8:	mov	r0, r4
   115fc:	mov	r1, #0
   11600:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11604:	b	11400 <rb_ssl_accept_common>
   11608:	bl	51fc <rb_outofmemory@plt>
   1160c:	.word	0xfffffd14

00011610 <rb_ssl_listen>:
   11610:	push	{r4, sl, fp, lr}
   11614:	add	fp, sp, #8
   11618:	mov	r4, r0
   1161c:	bl	543c <rb_listen@plt>
   11620:	mov	r1, #52	; 0x34
   11624:	strb	r1, [r4, #17]
   11628:	pop	{r4, sl, fp, pc}

0001162c <rb_connect_tcp_ssl>:
   1162c:	push	{r4, r5, r6, r7, fp, lr}
   11630:	add	fp, sp, #16
   11634:	sub	sp, sp, #8
   11638:	cmp	r0, #0
   1163c:	beq	11694 <rb_connect_tcp_ssl+0x68>
   11640:	mov	r5, r1
   11644:	mov	r6, r0
   11648:	mov	r0, #1
   1164c:	mov	r1, #12
   11650:	mov	r7, r3
   11654:	mov	r4, r2
   11658:	bl	4e9c <calloc@plt>
   1165c:	cmp	r0, #0
   11660:	beq	1169c <rb_connect_tcp_ssl+0x70>
   11664:	ldr	r1, [fp, #12]
   11668:	ldr	r2, [fp, #8]
   1166c:	str	r7, [r0]
   11670:	stm	sp, {r0, r1}
   11674:	str	r2, [r0, #4]
   11678:	str	r1, [r0, #8]
   1167c:	mov	r0, r6
   11680:	mov	r1, r5
   11684:	mov	r2, r4
   11688:	ldr	r3, [pc, #16]	; 116a0 <rb_connect_tcp_ssl+0x74>
   1168c:	add	r3, pc, r3
   11690:	bl	4d04 <rb_connect_tcp@plt>
   11694:	sub	sp, fp, #16
   11698:	pop	{r4, r5, r6, r7, fp, pc}
   1169c:	bl	51fc <rb_outofmemory@plt>
   116a0:	.word	0x00000010

000116a4 <rb_ssl_tryconn>:
   116a4:	push	{r4, r5, fp, lr}
   116a8:	add	fp, sp, #8
   116ac:	mov	r4, r2
   116b0:	mov	r5, r0
   116b4:	cmp	r1, #0
   116b8:	beq	116ec <rb_ssl_tryconn+0x48>
   116bc:	ldr	r0, [r5, #48]	; 0x30
   116c0:	ldr	r2, [r4]
   116c4:	str	r2, [r0, #260]	; 0x104
   116c8:	ldr	r2, [r4, #4]
   116cc:	str	r2, [r0, #264]	; 0x108
   116d0:	mov	r0, r5
   116d4:	bl	d468 <rb_connect_callback>
   116d8:	cmp	r4, #0
   116dc:	beq	1172c <rb_ssl_tryconn+0x88>
   116e0:	mov	r0, r4
   116e4:	pop	{r4, r5, fp, lr}
   116e8:	b	4f8c <free@plt>
   116ec:	ldrb	r0, [r5, #17]
   116f0:	mov	r3, r4
   116f4:	orr	r0, r0, #32
   116f8:	strb	r0, [r5, #17]
   116fc:	mov	r0, r5
   11700:	ldr	r1, [r4, #8]
   11704:	ldr	r2, [pc, #36]	; 11730 <rb_ssl_tryconn+0x8c>
   11708:	add	r2, pc, r2
   1170c:	bl	4cc8 <rb_settimeout@plt>
   11710:	mov	r0, r5
   11714:	mov	r1, #1
   11718:	bl	11334 <rb_ssl_init_fd>
   1171c:	mov	r0, r5
   11720:	mov	r1, r4
   11724:	pop	{r4, r5, fp, lr}
   11728:	b	1181c <rb_ssl_connect_common>
   1172c:	pop	{r4, r5, fp, pc}
   11730:	.word	0x000000cc

00011734 <rb_ssl_start_connected>:
   11734:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11738:	add	fp, sp, #24
   1173c:	cmp	r0, #0
   11740:	beq	117d0 <rb_ssl_start_connected+0x9c>
   11744:	mov	r5, r1
   11748:	mov	r4, r0
   1174c:	mov	r0, #1
   11750:	mov	r1, #12
   11754:	mov	r8, r3
   11758:	mov	r7, r2
   1175c:	bl	4e9c <calloc@plt>
   11760:	cmp	r0, #0
   11764:	beq	117d4 <rb_ssl_start_connected+0xa0>
   11768:	mov	r6, r0
   1176c:	stm	r0, {r5, r7, r8}
   11770:	mov	r0, #1
   11774:	mov	r1, #268	; 0x10c
   11778:	bl	4e9c <calloc@plt>
   1177c:	cmp	r0, #0
   11780:	beq	117d4 <rb_ssl_start_connected+0xa0>
   11784:	str	r0, [r4, #48]	; 0x30
   11788:	str	r5, [r0, #260]	; 0x104
   1178c:	str	r7, [r0, #264]	; 0x108
   11790:	mov	r1, r8
   11794:	mov	r3, r6
   11798:	ldrb	r0, [r4, #17]
   1179c:	orr	r0, r0, #32
   117a0:	strb	r0, [r4, #17]
   117a4:	mov	r0, r4
   117a8:	ldr	r2, [pc, #40]	; 117d8 <rb_ssl_start_connected+0xa4>
   117ac:	add	r2, pc, r2
   117b0:	bl	4cc8 <rb_settimeout@plt>
   117b4:	mov	r0, r4
   117b8:	mov	r1, #1
   117bc:	bl	11334 <rb_ssl_init_fd>
   117c0:	mov	r0, r4
   117c4:	mov	r1, r6
   117c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   117cc:	b	1181c <rb_ssl_connect_common>
   117d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   117d4:	bl	51fc <rb_outofmemory@plt>
   117d8:	.word	0x00000028

000117dc <rb_ssl_tryconn_timeout_cb>:
   117dc:	push	{r4, sl, fp, lr}
   117e0:	add	fp, sp, #8
   117e4:	mov	r4, r1
   117e8:	ldr	r1, [r0, #48]	; 0x30
   117ec:	ldr	r2, [r4]
   117f0:	str	r2, [r1, #260]	; 0x104
   117f4:	ldr	r2, [r4, #4]
   117f8:	str	r2, [r1, #264]	; 0x108
   117fc:	mov	r1, #3
   11800:	bl	d468 <rb_connect_callback>
   11804:	cmp	r4, #0
   11808:	beq	11818 <rb_ssl_tryconn_timeout_cb+0x3c>
   1180c:	mov	r0, r4
   11810:	pop	{r4, sl, fp, lr}
   11814:	b	4f8c <free@plt>
   11818:	pop	{r4, sl, fp, pc}

0001181c <rb_ssl_connect_common>:
   1181c:	push	{r4, r5, r6, r7, fp, lr}
   11820:	add	fp, sp, #16
   11824:	mov	r4, r1
   11828:	mov	r5, r0
   1182c:	bl	4ce0 <ERR_get_error@plt>
   11830:	cmp	r0, #0
   11834:	bne	1182c <rb_ssl_connect_common+0x10>
   11838:	ldr	r0, [r5, #56]	; 0x38
   1183c:	bl	504c <SSL_do_handshake@plt>
   11840:	mov	r7, r0
   11844:	ldr	r0, [r5, #56]	; 0x38
   11848:	mov	r1, r7
   1184c:	bl	54f0 <SSL_get_error@plt>
   11850:	cmp	r7, #1
   11854:	bne	118c0 <rb_ssl_connect_common+0xa4>
   11858:	ldr	r0, [r5, #60]	; 0x3c
   1185c:	mov	r1, #0
   11860:	mov	r2, #0
   11864:	mov	r3, #0
   11868:	add	r0, r0, #1
   1186c:	str	r0, [r5, #60]	; 0x3c
   11870:	mov	r0, r5
   11874:	bl	4cc8 <rb_settimeout@plt>
   11878:	mov	r0, r5
   1187c:	mov	r1, #3
   11880:	mov	r2, #0
   11884:	mov	r3, #0
   11888:	bl	4d70 <rb_setselect@plt>
   1188c:	ldr	r0, [r5, #48]	; 0x30
   11890:	ldr	r1, [r4]
   11894:	str	r1, [r0, #260]	; 0x104
   11898:	ldr	r1, [r4, #4]
   1189c:	str	r1, [r0, #264]	; 0x108
   118a0:	mov	r0, r5
   118a4:	mov	r1, #0
   118a8:	bl	d468 <rb_connect_callback>
   118ac:	cmp	r4, #0
   118b0:	beq	11914 <rb_ssl_connect_common+0xf8>
   118b4:	mov	r0, r4
   118b8:	pop	{r4, r5, r6, r7, fp, lr}
   118bc:	b	4f8c <free@plt>
   118c0:	mov	r6, r0
   118c4:	cmn	r7, #1
   118c8:	cmpeq	r6, #2
   118cc:	beq	11918 <rb_ssl_connect_common+0xfc>
   118d0:	cmn	r7, #1
   118d4:	cmpeq	r6, #3
   118d8:	beq	11934 <rb_ssl_connect_common+0x118>
   118dc:	bl	552c <__errno_location@plt>
   118e0:	mov	r1, #5
   118e4:	str	r1, [r0]
   118e8:	str	r6, [r5, #64]	; 0x40
   118ec:	ldr	r0, [r5, #48]	; 0x30
   118f0:	ldr	r1, [r4]
   118f4:	str	r1, [r0, #260]	; 0x104
   118f8:	ldr	r1, [r4, #4]
   118fc:	str	r1, [r0, #264]	; 0x108
   11900:	mov	r0, r5
   11904:	mov	r1, #6
   11908:	bl	d468 <rb_connect_callback>
   1190c:	cmp	r4, #0
   11910:	bne	118b4 <rb_ssl_connect_common+0x98>
   11914:	pop	{r4, r5, r6, r7, fp, pc}
   11918:	ldr	r2, [pc, #48]	; 11950 <rb_ssl_connect_common+0x134>
   1191c:	mov	r0, r5
   11920:	mov	r1, #1
   11924:	add	r2, pc, r2
   11928:	mov	r3, r4
   1192c:	pop	{r4, r5, r6, r7, fp, lr}
   11930:	b	4d70 <rb_setselect@plt>
   11934:	ldr	r2, [pc, #24]	; 11954 <rb_ssl_connect_common+0x138>
   11938:	mov	r0, r5
   1193c:	mov	r1, #2
   11940:	add	r2, pc, r2
   11944:	mov	r3, r4
   11948:	pop	{r4, r5, r6, r7, fp, lr}
   1194c:	b	4d70 <rb_setselect@plt>
   11950:	.word	0xfffffef0
   11954:	.word	0xfffffed4

00011958 <rb_event_add>:
   11958:	push	{r4, r5, r6, sl, fp, lr}
   1195c:	add	fp, sp, #16
   11960:	sub	sp, sp, #8
   11964:	mov	r4, r2
   11968:	mov	r5, r1
   1196c:	mov	r6, r0
   11970:	cmp	r3, #0
   11974:	ble	11994 <rb_event_add+0x3c>
   11978:	mov	r0, r6
   1197c:	mov	r1, r5
   11980:	mov	r2, r4
   11984:	str	r3, [sp]
   11988:	bl	119b4 <rb_event_add_common>
   1198c:	sub	sp, fp, #16
   11990:	pop	{r4, r5, r6, sl, fp, pc}
   11994:	ldr	r0, [pc, #20]	; 119b0 <rb_event_add+0x58>
   11998:	mov	r1, r6
   1199c:	mov	r2, r3
   119a0:	add	r0, pc, r0
   119a4:	bl	519c <rb_lib_log@plt>
   119a8:	mov	r3, #1
   119ac:	b	11978 <rb_event_add+0x20>
   119b0:	.word	0x00009d7d

000119b4 <rb_event_add_common>:
   119b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   119b8:	add	fp, sp, #24
   119bc:	mov	r6, r1
   119c0:	mov	r7, r0
   119c4:	mov	r0, #1
   119c8:	mov	r1, #48	; 0x30
   119cc:	mov	r4, r3
   119d0:	mov	r8, r2
   119d4:	bl	4e9c <calloc@plt>
   119d8:	cmp	r0, #0
   119dc:	beq	11ab8 <rb_event_add_common+0x104>
   119e0:	mov	r5, r0
   119e4:	str	r6, [r0, #12]
   119e8:	mov	r0, #33	; 0x21
   119ec:	bl	5214 <malloc@plt>
   119f0:	cmp	r0, #0
   119f4:	beq	11ab8 <rb_event_add_common+0x104>
   119f8:	ldr	r9, [fp, #8]
   119fc:	mov	r1, r7
   11a00:	mov	r2, #33	; 0x21
   11a04:	mov	r6, r0
   11a08:	bl	4f44 <rb_strlcpy@plt>
   11a0c:	str	r8, [r5, #16]
   11a10:	str	r6, [r5, #20]
   11a14:	bl	507c <rb_current_time@plt>
   11a18:	mov	r1, #0
   11a1c:	add	r0, r0, r4
   11a20:	str	r1, [r5, #44]	; 0x2c
   11a24:	str	r9, [r5, #24]
   11a28:	str	r0, [r5, #28]
   11a2c:	str	r4, [r5, #32]
   11a30:	ldr	r1, [pc, #132]	; 11abc <rb_event_add_common+0x108>
   11a34:	ldr	r1, [pc, r1]
   11a38:	cmp	r0, r1
   11a3c:	blt	11a48 <rb_event_add_common+0x94>
   11a40:	cmn	r1, #1
   11a44:	bne	11a54 <rb_event_add_common+0xa0>
   11a48:	ldr	r1, [pc, #112]	; 11ac0 <rb_event_add_common+0x10c>
   11a4c:	add	r1, pc, r1
   11a50:	str	r0, [r1]
   11a54:	ldr	r1, [pc, #104]	; 11ac4 <rb_event_add_common+0x110>
   11a58:	mov	r0, #0
   11a5c:	ldr	r1, [pc, r1]
   11a60:	str	r5, [r5]
   11a64:	stmib	r5, {r0, r1}
   11a68:	ldr	r0, [pc, #88]	; 11ac8 <rb_event_add_common+0x114>
   11a6c:	cmp	r1, #0
   11a70:	add	r0, pc, r0
   11a74:	beq	11a84 <rb_event_add_common+0xd0>
   11a78:	add	r1, r1, #4
   11a7c:	str	r5, [r1]
   11a80:	b	11a94 <rb_event_add_common+0xe0>
   11a84:	mov	r1, r0
   11a88:	ldr	r2, [r1, #4]!
   11a8c:	cmp	r2, #0
   11a90:	streq	r5, [r1]
   11a94:	str	r5, [r0]
   11a98:	ldr	r1, [r0, #8]
   11a9c:	add	r1, r1, #1
   11aa0:	str	r1, [r0, #8]
   11aa4:	mov	r0, r5
   11aa8:	mov	r1, r4
   11aac:	bl	f910 <rb_io_sched_event>
   11ab0:	mov	r0, r5
   11ab4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ab8:	bl	51fc <rb_outofmemory@plt>
   11abc:	.word	0x0001ba18
   11ac0:	.word	0x0001ba00
   11ac4:	.word	0x0002e318
   11ac8:	.word	0x0002e304

00011acc <rb_event_addonce>:
   11acc:	push	{r4, r5, r6, sl, fp, lr}
   11ad0:	add	fp, sp, #16
   11ad4:	sub	sp, sp, #8
   11ad8:	mov	r4, r2
   11adc:	mov	r5, r1
   11ae0:	mov	r6, r0
   11ae4:	cmp	r3, #0
   11ae8:	ble	11b0c <rb_event_addonce+0x40>
   11aec:	mov	r0, #0
   11af0:	mov	r1, r5
   11af4:	mov	r2, r4
   11af8:	str	r0, [sp]
   11afc:	mov	r0, r6
   11b00:	bl	119b4 <rb_event_add_common>
   11b04:	sub	sp, fp, #16
   11b08:	pop	{r4, r5, r6, sl, fp, pc}
   11b0c:	ldr	r0, [pc, #20]	; 11b28 <rb_event_addonce+0x5c>
   11b10:	mov	r1, r6
   11b14:	mov	r2, r3
   11b18:	add	r0, pc, r0
   11b1c:	bl	519c <rb_lib_log@plt>
   11b20:	mov	r3, #1
   11b24:	b	11aec <rb_event_addonce+0x20>
   11b28:	.word	0x00009c49

00011b2c <rb_event_delete>:
   11b2c:	cmp	r0, #0
   11b30:	bxeq	lr
   11b34:	mov	r1, #1
   11b38:	str	r1, [r0, #44]	; 0x2c
   11b3c:	b	f970 <rb_io_unsched_event>

00011b40 <rb_event_find_delete>:
   11b40:	ldr	r3, [pc, #60]	; 11b84 <rb_event_find_delete+0x44>
   11b44:	ldr	r3, [pc, r3]
   11b48:	b	11b50 <rb_event_find_delete+0x10>
   11b4c:	ldr	r3, [r3, #8]
   11b50:	cmp	r3, #0
   11b54:	bxeq	lr
   11b58:	ldr	ip, [r3]
   11b5c:	ldr	r2, [ip, #12]
   11b60:	cmp	r2, r0
   11b64:	bne	11b4c <rb_event_find_delete+0xc>
   11b68:	ldr	r2, [ip, #16]
   11b6c:	cmp	r2, r1
   11b70:	bne	11b4c <rb_event_find_delete+0xc>
   11b74:	mov	r0, #1
   11b78:	str	r0, [ip, #44]	; 0x2c
   11b7c:	mov	r0, ip
   11b80:	b	f970 <rb_io_unsched_event>
   11b84:	.word	0x0002e230

00011b88 <rb_event_addish>:
   11b88:	push	{r4, r5, r6, r7, fp, lr}
   11b8c:	add	fp, sp, #16
   11b90:	sub	sp, sp, #8
   11b94:	mov	r6, r3
   11b98:	cmp	r3, #0
   11b9c:	mov	r4, r2
   11ba0:	mov	r5, r1
   11ba4:	mov	r7, r0
   11ba8:	rsbmi	r6, r6, #0
   11bac:	cmp	r6, #2
   11bb0:	rsbgt	r6, r6, #0
   11bb4:	cmn	r6, #1
   11bb8:	mov	r3, r6
   11bbc:	bgt	11c0c <rb_event_addish+0x84>
   11bc0:	bl	5388 <rand@plt>
   11bc4:	movw	r1, #19923	; 0x4dd3
   11bc8:	movt	r1, #4194	; 0x1062
   11bcc:	smmul	r2, r0, r1
   11bd0:	asr	r3, r2, #6
   11bd4:	add	r2, r3, r2, lsr #31
   11bd8:	mov	r3, #1000	; 0x3e8
   11bdc:	mls	r0, r2, r3, r0
   11be0:	mov	r2, #0
   11be4:	movw	r3, #21846	; 0x5556
   11be8:	sub	r2, r2, r6, lsl #1
   11bec:	movt	r3, #21845	; 0x5555
   11bf0:	smmul	r2, r2, r3
   11bf4:	add	r2, r2, r2, lsr #31
   11bf8:	mul	r0, r0, r2
   11bfc:	smmul	r0, r0, r1
   11c00:	asr	r1, r0, #6
   11c04:	add	r0, r1, r0, lsr #31
   11c08:	add	r3, r0, r2
   11c0c:	mov	r0, r7
   11c10:	mov	r1, r5
   11c14:	mov	r2, r4
   11c18:	str	r6, [sp]
   11c1c:	bl	119b4 <rb_event_add_common>
   11c20:	sub	sp, fp, #16
   11c24:	pop	{r4, r5, r6, r7, fp, pc}

00011c28 <rb_run_one_event>:
   11c28:	push	{r4, r5, r6, sl, fp, lr}
   11c2c:	add	fp, sp, #16
   11c30:	mov	r4, r0
   11c34:	ldr	r1, [r0, #20]
   11c38:	ldr	r0, [pc, #200]	; 11d08 <rb_run_one_event+0xe0>
   11c3c:	mov	r2, #33	; 0x21
   11c40:	add	r0, pc, r0
   11c44:	add	r0, r0, #12
   11c48:	bl	4f44 <rb_strlcpy@plt>
   11c4c:	ldr	r1, [r4, #12]
   11c50:	ldr	r0, [r4, #16]
   11c54:	blx	r1
   11c58:	ldr	r0, [r4, #24]
   11c5c:	cmp	r0, #0
   11c60:	beq	11cf4 <rb_run_one_event+0xcc>
   11c64:	bl	507c <rb_current_time@plt>
   11c68:	ldr	r6, [r4, #24]
   11c6c:	mov	r5, r0
   11c70:	cmn	r6, #1
   11c74:	bgt	11cc4 <rb_run_one_event+0x9c>
   11c78:	bl	5388 <rand@plt>
   11c7c:	movw	r1, #19923	; 0x4dd3
   11c80:	movt	r1, #4194	; 0x1062
   11c84:	smmul	r2, r0, r1
   11c88:	asr	r3, r2, #6
   11c8c:	add	r2, r3, r2, lsr #31
   11c90:	mov	r3, #1000	; 0x3e8
   11c94:	mls	r0, r2, r3, r0
   11c98:	mov	r2, #0
   11c9c:	movw	r3, #21846	; 0x5556
   11ca0:	sub	r2, r2, r6, lsl #1
   11ca4:	movt	r3, #21845	; 0x5555
   11ca8:	smmul	r2, r2, r3
   11cac:	add	r2, r2, r2, lsr #31
   11cb0:	mul	r0, r0, r2
   11cb4:	smmul	r0, r0, r1
   11cb8:	asr	r1, r0, #6
   11cbc:	add	r0, r1, r0, lsr #31
   11cc0:	add	r6, r0, r2
   11cc4:	add	r0, r6, r5
   11cc8:	str	r0, [r4, #28]
   11ccc:	ldr	r1, [pc, #56]	; 11d0c <rb_run_one_event+0xe4>
   11cd0:	ldr	r1, [pc, r1]
   11cd4:	cmp	r0, r1
   11cd8:	blt	11ce4 <rb_run_one_event+0xbc>
   11cdc:	cmn	r1, #1
   11ce0:	popne	{r4, r5, r6, sl, fp, pc}
   11ce4:	ldr	r1, [pc, #36]	; 11d10 <rb_run_one_event+0xe8>
   11ce8:	add	r1, pc, r1
   11cec:	str	r0, [r1]
   11cf0:	pop	{r4, r5, r6, sl, fp, pc}
   11cf4:	mov	r0, #1
   11cf8:	str	r0, [r4, #44]	; 0x2c
   11cfc:	mov	r0, r4
   11d00:	pop	{r4, r5, r6, sl, fp, lr}
   11d04:	b	f970 <rb_io_unsched_event>
   11d08:	.word	0x0002e134
   11d0c:	.word	0x0001b77c
   11d10:	.word	0x0001b764

00011d14 <rb_event_run>:
   11d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d18:	add	fp, sp, #28
   11d1c:	sub	sp, sp, #4
   11d20:	bl	f9c4 <rb_io_supports_event>
   11d24:	cmp	r0, #0
   11d28:	bne	11eb4 <rb_event_run+0x1a0>
   11d2c:	ldr	r1, [pc, #392]	; 11ebc <rb_event_run+0x1a8>
   11d30:	mvn	r0, #0
   11d34:	add	r1, pc, r1
   11d38:	str	r0, [r1]
   11d3c:	ldr	r7, [pc, #380]	; 11ec0 <rb_event_run+0x1ac>
   11d40:	ldr	r7, [pc, r7]
   11d44:	cmp	r7, #0
   11d48:	beq	11eb4 <rb_event_run+0x1a0>
   11d4c:	ldr	r4, [pc, #368]	; 11ec4 <rb_event_run+0x1b0>
   11d50:	mov	sl, #0
   11d54:	add	r4, pc, r4
   11d58:	add	r9, r4, #12
   11d5c:	b	11d74 <rb_event_run+0x60>
   11d60:	ldr	r1, [pc, #356]	; 11ecc <rb_event_run+0x1b8>
   11d64:	add	r1, pc, r1
   11d68:	str	r0, [r1]
   11d6c:	cmp	r7, #0
   11d70:	beq	11eb4 <rb_event_run+0x1a0>
   11d74:	ldr	r5, [r7]
   11d78:	ldr	r7, [r7, #8]
   11d7c:	ldr	r0, [r5, #44]	; 0x2c
   11d80:	cmp	r0, #0
   11d84:	beq	11da4 <rb_event_run+0x90>
   11d88:	ldr	r0, [r5, #8]
   11d8c:	ldr	r1, [r5, #4]
   11d90:	cmp	r0, #0
   11d94:	beq	11dbc <rb_event_run+0xa8>
   11d98:	str	r1, [r0, #4]
   11d9c:	ldr	r1, [r5, #4]
   11da0:	b	11dc0 <rb_event_run+0xac>
   11da4:	ldr	r6, [r5, #28]
   11da8:	bl	507c <rb_current_time@plt>
   11dac:	cmp	r6, r0
   11db0:	ble	11e08 <rb_event_run+0xf4>
   11db4:	ldr	r0, [r5, #28]
   11db8:	b	11e98 <rb_event_run+0x184>
   11dbc:	str	r1, [r4, #4]
   11dc0:	cmp	r1, #0
   11dc4:	mov	r2, r4
   11dc8:	addne	r2, r1, #8
   11dcc:	str	r0, [r2]
   11dd0:	str	sl, [r5, #4]
   11dd4:	str	sl, [r5, #8]
   11dd8:	ldr	r0, [r4, #8]
   11ddc:	sub	r0, r0, #1
   11de0:	str	r0, [r4, #8]
   11de4:	ldr	r0, [r5, #20]
   11de8:	cmp	r0, #0
   11dec:	beq	11df4 <rb_event_run+0xe0>
   11df0:	bl	4f8c <free@plt>
   11df4:	mov	r0, r5
   11df8:	bl	4f8c <free@plt>
   11dfc:	cmp	r7, #0
   11e00:	bne	11d74 <rb_event_run+0x60>
   11e04:	b	11eb4 <rb_event_run+0x1a0>
   11e08:	ldr	r1, [r5, #20]
   11e0c:	mov	r0, r9
   11e10:	mov	r2, #33	; 0x21
   11e14:	bl	4f44 <rb_strlcpy@plt>
   11e18:	ldr	r1, [r5, #12]
   11e1c:	ldr	r0, [r5, #16]
   11e20:	blx	r1
   11e24:	ldr	r0, [r5, #24]
   11e28:	cmp	r0, #0
   11e2c:	beq	11d88 <rb_event_run+0x74>
   11e30:	bl	507c <rb_current_time@plt>
   11e34:	ldr	r8, [r5, #24]
   11e38:	mov	r6, r0
   11e3c:	cmn	r8, #1
   11e40:	bgt	11e90 <rb_event_run+0x17c>
   11e44:	bl	5388 <rand@plt>
   11e48:	movw	r1, #19923	; 0x4dd3
   11e4c:	movt	r1, #4194	; 0x1062
   11e50:	mov	r3, r1
   11e54:	smmul	r1, r0, r1
   11e58:	asr	r2, r1, #6
   11e5c:	add	r1, r2, r1, lsr #31
   11e60:	mov	r2, #1000	; 0x3e8
   11e64:	mls	r0, r1, r2, r0
   11e68:	movw	r2, #21846	; 0x5556
   11e6c:	sub	r1, sl, r8, lsl #1
   11e70:	movt	r2, #21845	; 0x5555
   11e74:	smmul	r1, r1, r2
   11e78:	add	r1, r1, r1, lsr #31
   11e7c:	mul	r0, r0, r1
   11e80:	smmul	r0, r0, r3
   11e84:	asr	r2, r0, #6
   11e88:	add	r0, r2, r0, lsr #31
   11e8c:	add	r8, r0, r1
   11e90:	add	r0, r8, r6
   11e94:	str	r0, [r5, #28]
   11e98:	ldr	r1, [pc, #40]	; 11ec8 <rb_event_run+0x1b4>
   11e9c:	ldr	r1, [pc, r1]
   11ea0:	cmp	r0, r1
   11ea4:	blt	11d60 <rb_event_run+0x4c>
   11ea8:	cmn	r1, #1
   11eac:	bne	11d6c <rb_event_run+0x58>
   11eb0:	b	11d60 <rb_event_run+0x4c>
   11eb4:	sub	sp, fp, #28
   11eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ebc:	.word	0x0001b718
   11ec0:	.word	0x0002e034
   11ec4:	.word	0x0002e020
   11ec8:	.word	0x0001b5b0
   11ecc:	.word	0x0001b6e8

00011ed0 <rb_event_io_register_all>:
   11ed0:	push	{r4, sl, fp, lr}
   11ed4:	add	fp, sp, #8
   11ed8:	bl	f9c4 <rb_io_supports_event>
   11edc:	cmp	r0, #0
   11ee0:	popeq	{r4, sl, fp, pc}
   11ee4:	ldr	r4, [pc, #36]	; 11f10 <rb_event_io_register_all+0x40>
   11ee8:	ldr	r4, [pc, r4]
   11eec:	cmp	r4, #0
   11ef0:	beq	11f0c <rb_event_io_register_all+0x3c>
   11ef4:	ldr	r0, [r4]
   11ef8:	ldr	r1, [r0, #32]
   11efc:	bl	f910 <rb_io_sched_event>
   11f00:	ldr	r4, [r4, #8]
   11f04:	cmp	r4, #0
   11f08:	bne	11ef4 <rb_event_io_register_all+0x24>
   11f0c:	pop	{r4, sl, fp, pc}
   11f10:	.word	0x0002de8c

00011f14 <rb_event_init>:
   11f14:	ldr	r0, [pc, #20]	; 11f30 <rb_event_init+0x1c>
   11f18:	ldr	r1, [pc, #20]	; 11f34 <rb_event_init+0x20>
   11f1c:	mov	r2, #33	; 0x21
   11f20:	add	r0, pc, r0
   11f24:	add	r1, pc, r1
   11f28:	add	r0, r0, #12
   11f2c:	b	4f44 <rb_strlcpy@plt>
   11f30:	.word	0x0002de54
   11f34:	.word	0x0000987f

00011f38 <rb_dump_events>:
   11f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f3c:	add	fp, sp, #28
   11f40:	sub	sp, sp, #524	; 0x20c
   11f44:	mov	sl, r0
   11f48:	ldr	r0, [pc, #180]	; 12004 <rb_dump_events+0xcc>
   11f4c:	ldr	r2, [pc, #180]	; 12008 <rb_dump_events+0xd0>
   11f50:	add	r6, sp, #8
   11f54:	mov	r9, r1
   11f58:	mov	r1, #512	; 0x200
   11f5c:	add	r0, pc, r0
   11f60:	add	r2, pc, r2
   11f64:	add	r3, r0, #12
   11f68:	mov	r0, r6
   11f6c:	bl	53f4 <snprintf@plt>
   11f70:	mov	r0, r6
   11f74:	mov	r1, r9
   11f78:	blx	sl
   11f7c:	ldr	r1, [pc, #136]	; 1200c <rb_dump_events+0xd4>
   11f80:	mov	r0, r6
   11f84:	mov	r2, #512	; 0x200
   11f88:	add	r1, pc, r1
   11f8c:	bl	4f44 <rb_strlcpy@plt>
   11f90:	mov	r0, r6
   11f94:	mov	r1, r9
   11f98:	blx	sl
   11f9c:	ldr	r4, [pc, #108]	; 12010 <rb_dump_events+0xd8>
   11fa0:	ldr	r4, [pc, r4]
   11fa4:	cmp	r4, #0
   11fa8:	beq	11ffc <rb_dump_events+0xc4>
   11fac:	add	r6, sp, #8
   11fb0:	ldr	r5, [r4]
   11fb4:	ldr	r7, [r5, #20]
   11fb8:	ldr	r8, [r5, #28]
   11fbc:	bl	507c <rb_current_time@plt>
   11fc0:	sub	r0, r8, r0
   11fc4:	ldr	r1, [r5, #24]
   11fc8:	mov	r3, r7
   11fcc:	stm	sp, {r0, r1}
   11fd0:	mov	r0, r6
   11fd4:	mov	r1, #512	; 0x200
   11fd8:	ldr	r2, [pc, #52]	; 12014 <rb_dump_events+0xdc>
   11fdc:	add	r2, pc, r2
   11fe0:	bl	53f4 <snprintf@plt>
   11fe4:	mov	r0, r6
   11fe8:	mov	r1, r9
   11fec:	blx	sl
   11ff0:	ldr	r4, [r4, #8]
   11ff4:	cmp	r4, #0
   11ff8:	bne	11fb0 <rb_dump_events+0x78>
   11ffc:	sub	sp, fp, #28
   12000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12004:	.word	0x0002de18
   12008:	.word	0x00009848
   1200c:	.word	0x00009836
   12010:	.word	0x0002ddd4
   12014:	.word	0x0000980e

00012018 <rb_set_back_events>:
   12018:	ldr	r1, [pc, #40]	; 12048 <rb_set_back_events+0x30>
   1201c:	ldr	r1, [pc, r1]
   12020:	b	1203c <rb_set_back_events+0x24>
   12024:	ldr	r2, [r1]
   12028:	ldr	r3, [r2, #28]
   1202c:	subs	r3, r3, r0
   12030:	movle	r3, #0
   12034:	str	r3, [r2, #28]
   12038:	ldr	r1, [r1, #8]
   1203c:	cmp	r1, #0
   12040:	bxeq	lr
   12044:	b	12024 <rb_set_back_events+0xc>
   12048:	.word	0x0002dd58

0001204c <rb_event_update>:
   1204c:	push	{r4, r5, fp, lr}
   12050:	add	fp, sp, #8
   12054:	cmp	r0, #0
   12058:	beq	120dc <rb_event_update+0x90>
   1205c:	mov	r5, r1
   12060:	mov	r4, r0
   12064:	cmn	r1, #1
   12068:	str	r1, [r0, #24]
   1206c:	bgt	120bc <rb_event_update+0x70>
   12070:	bl	5388 <rand@plt>
   12074:	movw	r1, #19923	; 0x4dd3
   12078:	movt	r1, #4194	; 0x1062
   1207c:	smmul	r2, r0, r1
   12080:	asr	r3, r2, #6
   12084:	add	r2, r3, r2, lsr #31
   12088:	mov	r3, #1000	; 0x3e8
   1208c:	mls	r0, r2, r3, r0
   12090:	mov	r2, #0
   12094:	movw	r3, #21846	; 0x5556
   12098:	sub	r2, r2, r5, lsl #1
   1209c:	movt	r3, #21845	; 0x5555
   120a0:	smmul	r2, r2, r3
   120a4:	add	r2, r2, r2, lsr #31
   120a8:	mul	r0, r0, r2
   120ac:	smmul	r0, r0, r1
   120b0:	asr	r1, r0, #6
   120b4:	add	r0, r1, r0, lsr #31
   120b8:	add	r5, r0, r2
   120bc:	bl	507c <rb_current_time@plt>
   120c0:	ldr	r1, [r4, #28]
   120c4:	add	r0, r0, r5
   120c8:	cmp	r0, r1
   120cc:	popge	{r4, r5, fp, pc}
   120d0:	bl	507c <rb_current_time@plt>
   120d4:	add	r0, r0, r5
   120d8:	str	r0, [r4, #28]
   120dc:	pop	{r4, r5, fp, pc}

000120e0 <rb_event_next>:
   120e0:	ldr	r0, [pc, #4]	; 120ec <rb_event_next+0xc>
   120e4:	ldr	r0, [pc, r0]
   120e8:	bx	lr
   120ec:	.word	0x0001b368

000120f0 <rb_ctime>:
   120f0:	push	{r4, r5, r6, r7, fp, lr}
   120f4:	add	fp, sp, #16
   120f8:	sub	sp, sp, #72	; 0x48
   120fc:	mov	r6, r1
   12100:	str	r0, [fp, #-20]	; 0xffffffec
   12104:	sub	r0, fp, #20
   12108:	add	r1, sp, #24
   1210c:	mov	r7, r2
   12110:	bl	525c <gmtime_r@plt>
   12114:	ldr	r5, [pc, #152]	; 121b4 <rb_ctime+0xc4>
   12118:	cmp	r6, #0
   1211c:	movweq	r7, #128	; 0x80
   12120:	add	r5, pc, r5
   12124:	movne	r5, r6
   12128:	cmp	r0, #0
   1212c:	beq	12194 <rb_ctime+0xa4>
   12130:	ldm	r0, {r1, r2, r3, r6, ip}
   12134:	ldr	r4, [r0, #20]
   12138:	ldr	r0, [r0, #24]
   1213c:	str	r2, [sp, #12]
   12140:	str	r3, [sp, #8]
   12144:	str	r6, [sp, #4]
   12148:	str	r1, [sp, #16]
   1214c:	movw	r1, #1900	; 0x76c
   12150:	add	r1, r4, r1
   12154:	str	r1, [sp, #20]
   12158:	ldr	r1, [pc, #92]	; 121bc <rb_ctime+0xcc>
   1215c:	add	r1, pc, r1
   12160:	ldr	r1, [r1, ip, lsl #2]
   12164:	str	r1, [sp]
   12168:	ldr	r1, [pc, #80]	; 121c0 <rb_ctime+0xd0>
   1216c:	ldr	r2, [pc, #80]	; 121c4 <rb_ctime+0xd4>
   12170:	add	r1, pc, r1
   12174:	add	r2, pc, r2
   12178:	ldr	r3, [r1, r0, lsl #2]
   1217c:	mov	r0, r5
   12180:	mov	r1, r7
   12184:	bl	53f4 <snprintf@plt>
   12188:	mov	r0, r5
   1218c:	sub	sp, fp, #16
   12190:	pop	{r4, r5, r6, r7, fp, pc}
   12194:	ldr	r1, [pc, #28]	; 121b8 <rb_ctime+0xc8>
   12198:	mov	r0, r5
   1219c:	mov	r2, r7
   121a0:	add	r1, pc, r1
   121a4:	bl	4f44 <rb_strlcpy@plt>
   121a8:	mov	r0, r5
   121ac:	sub	sp, fp, #16
   121b0:	pop	{r4, r5, r6, r7, fp, pc}
   121b4:	.word	0x0002dc88
   121b8:	.word	0x00008d72
   121bc:	.word	0x0001ad10
   121c0:	.word	0x0001ace0
   121c4:	.word	0x00009699

000121c8 <rb_date>:
   121c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   121cc:	add	fp, sp, #24
   121d0:	sub	sp, sp, #72	; 0x48
   121d4:	mov	r4, r1
   121d8:	str	r0, [fp, #-28]	; 0xffffffe4
   121dc:	sub	r0, fp, #28
   121e0:	add	r1, sp, #24
   121e4:	mov	r8, r2
   121e8:	bl	525c <gmtime_r@plt>
   121ec:	cmp	r0, #0
   121f0:	beq	12254 <rb_date+0x8c>
   121f4:	ldm	r0, {r1, r2, r3, r5, r6, r7}
   121f8:	ldr	r0, [r0, #24]
   121fc:	str	r2, [sp, #16]
   12200:	str	r3, [sp, #12]
   12204:	str	r5, [sp, #4]
   12208:	str	r1, [sp, #20]
   1220c:	movw	r1, #1900	; 0x76c
   12210:	add	r1, r7, r1
   12214:	str	r1, [sp, #8]
   12218:	ldr	r1, [pc, #88]	; 12278 <rb_date+0xb0>
   1221c:	add	r1, pc, r1
   12220:	ldr	r1, [r1, r6, lsl #2]
   12224:	str	r1, [sp]
   12228:	ldr	r1, [pc, #76]	; 1227c <rb_date+0xb4>
   1222c:	ldr	r2, [pc, #76]	; 12280 <rb_date+0xb8>
   12230:	add	r1, pc, r1
   12234:	add	r2, pc, r2
   12238:	ldr	r3, [r1, r0, lsl #2]
   1223c:	mov	r0, r4
   12240:	mov	r1, r8
   12244:	bl	53f4 <snprintf@plt>
   12248:	mov	r0, r4
   1224c:	sub	sp, fp, #24
   12250:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12254:	ldr	r1, [pc, #24]	; 12274 <rb_date+0xac>
   12258:	mov	r0, r4
   1225c:	mov	r2, r8
   12260:	add	r1, pc, r1
   12264:	bl	4f44 <rb_strlcpy@plt>
   12268:	mov	r0, r4
   1226c:	sub	sp, fp, #24
   12270:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12274:	.word	0x00008cb2
   12278:	.word	0x0001ac9c
   1227c:	.word	0x0001ac6c
   12280:	.word	0x000095f4

00012284 <rb_current_time>:
   12284:	ldr	r0, [pc, #8]	; 12294 <rb_current_time+0x10>
   12288:	add	r0, pc, r0
   1228c:	ldr	r0, [r0, #16]
   12290:	bx	lr
   12294:	.word	0x0002e020

00012298 <rb_current_time_tv>:
   12298:	ldr	r0, [pc, #8]	; 122a8 <rb_current_time_tv+0x10>
   1229c:	add	r0, pc, r0
   122a0:	add	r0, r0, #16
   122a4:	bx	lr
   122a8:	.word	0x0002e00c

000122ac <rb_lib_log>:
   122ac:	sub	sp, sp, #12
   122b0:	push	{r4, sl, fp, lr}
   122b4:	add	fp, sp, #8
   122b8:	sub	sp, sp, #4
   122bc:	mov	ip, r0
   122c0:	add	r0, fp, #8
   122c4:	stm	r0, {r1, r2, r3}
   122c8:	ldr	r0, [pc, #72]	; 12318 <rb_lib_log+0x6c>
   122cc:	ldr	r0, [pc, r0]
   122d0:	cmp	r0, #0
   122d4:	beq	12308 <rb_lib_log+0x5c>
   122d8:	add	r3, fp, #8
   122dc:	mov	r1, #512	; 0x200
   122e0:	mov	r2, ip
   122e4:	str	r3, [sp]
   122e8:	ldr	r4, [pc, #44]	; 1231c <rb_lib_log+0x70>
   122ec:	add	r4, pc, r4
   122f0:	mov	r0, r4
   122f4:	bl	4e18 <vsnprintf@plt>
   122f8:	ldr	r1, [pc, #32]	; 12320 <rb_lib_log+0x74>
   122fc:	mov	r0, r4
   12300:	ldr	r1, [pc, r1]
   12304:	blx	r1
   12308:	sub	sp, fp, #8
   1230c:	pop	{r4, sl, fp, lr}
   12310:	add	sp, sp, #12
   12314:	bx	lr
   12318:	.word	0x0002dfdc
   1231c:	.word	0x0002db3c
   12320:	.word	0x0002dfa8

00012324 <rb_lib_die>:
   12324:	sub	sp, sp, #12
   12328:	push	{r4, r5, fp, lr}
   1232c:	add	fp, sp, #8
   12330:	sub	sp, sp, #4
   12334:	mov	ip, r0
   12338:	add	r0, fp, #8
   1233c:	stm	r0, {r1, r2, r3}
   12340:	ldr	r5, [pc, #76]	; 12394 <rb_lib_die+0x70>
   12344:	add	r5, pc, r5
   12348:	ldr	r0, [r5, #4]
   1234c:	cmp	r0, #0
   12350:	beq	12390 <rb_lib_die+0x6c>
   12354:	add	r3, fp, #8
   12358:	mov	r1, #512	; 0x200
   1235c:	mov	r2, ip
   12360:	str	r3, [sp]
   12364:	ldr	r4, [pc, #44]	; 12398 <rb_lib_die+0x74>
   12368:	add	r4, pc, r4
   1236c:	mov	r0, r4
   12370:	bl	4e18 <vsnprintf@plt>
   12374:	ldr	r1, [r5, #4]
   12378:	mov	r0, r4
   1237c:	blx	r1
   12380:	sub	sp, fp, #8
   12384:	pop	{r4, r5, fp, lr}
   12388:	add	sp, sp, #12
   1238c:	bx	lr
   12390:	bl	4ca4 <abort@plt>
   12394:	.word	0x0002df64
   12398:	.word	0x0002dac0

0001239c <rb_lib_restart>:
   1239c:	sub	sp, sp, #12
   123a0:	push	{fp, lr}
   123a4:	mov	fp, sp
   123a8:	sub	sp, sp, #4
   123ac:	mov	ip, r0
   123b0:	add	r0, fp, #8
   123b4:	stm	r0, {r1, r2, r3}
   123b8:	ldr	r5, [pc, #64]	; 12400 <rb_lib_restart+0x64>
   123bc:	add	r5, pc, r5
   123c0:	ldr	r0, [r5, #8]
   123c4:	cmp	r0, #0
   123c8:	bne	123d0 <rb_lib_restart+0x34>
   123cc:	bl	4ca4 <abort@plt>
   123d0:	add	r3, fp, #8
   123d4:	mov	r1, #512	; 0x200
   123d8:	mov	r2, ip
   123dc:	str	r3, [sp]
   123e0:	ldr	r4, [pc, #28]	; 12404 <rb_lib_restart+0x68>
   123e4:	add	r4, pc, r4
   123e8:	mov	r0, r4
   123ec:	bl	4e18 <vsnprintf@plt>
   123f0:	ldr	r1, [r5, #8]
   123f4:	mov	r0, r4
   123f8:	blx	r1
   123fc:	bl	4ca4 <abort@plt>
   12400:	.word	0x0002deec
   12404:	.word	0x0002da44

00012408 <rb_set_time>:
   12408:	push	{r4, sl, fp, lr}
   1240c:	add	fp, sp, #8
   12410:	sub	sp, sp, #8
   12414:	mov	r0, sp
   12418:	mov	r1, #0
   1241c:	bl	4e78 <rb_gettimeofday@plt>
   12420:	cmn	r0, #1
   12424:	beq	12458 <rb_set_time+0x50>
   12428:	ldr	r4, [pc, #80]	; 12480 <rb_set_time+0x78>
   1242c:	ldr	r1, [sp]
   12430:	add	r4, pc, r4
   12434:	ldr	r0, [r4, #16]
   12438:	cmp	r0, r1
   1243c:	ble	12448 <rb_set_time+0x40>
   12440:	sub	r0, r0, r1
   12444:	bl	12018 <rb_set_back_events>
   12448:	ldm	sp, {r0, r1}
   1244c:	strd	r0, [r4, #16]
   12450:	sub	sp, fp, #8
   12454:	pop	{r4, sl, fp, pc}
   12458:	bl	552c <__errno_location@plt>
   1245c:	ldr	r0, [r0]
   12460:	bl	4c80 <strerror@plt>
   12464:	mov	r1, r0
   12468:	ldr	r0, [pc, #20]	; 12484 <rb_set_time+0x7c>
   1246c:	add	r0, pc, r0
   12470:	bl	519c <rb_lib_log@plt>
   12474:	ldr	r0, [pc, #12]	; 12488 <rb_set_time+0x80>
   12478:	add	r0, pc, r0
   1247c:	bl	52bc <rb_lib_restart@plt>
   12480:	.word	0x0002de78
   12484:	.word	0x000093e1
   12488:	.word	0x000093e8

0001248c <rb_lib_version>:
   1248c:	push	{r4, sl, fp, lr}
   12490:	add	fp, sp, #8
   12494:	sub	sp, sp, #520	; 0x208
   12498:	add	r4, sp, #8
   1249c:	mov	r1, #512	; 0x200
   124a0:	mov	r0, r4
   124a4:	bl	10fb8 <rb_get_ssl_info>
   124a8:	ldr	r0, [pc, #48]	; 124e0 <rb_lib_version+0x54>
   124ac:	mov	r1, #640	; 0x280
   124b0:	ldr	r0, [pc, r0]
   124b4:	str	r4, [sp]
   124b8:	ldr	r3, [r0]
   124bc:	ldr	r4, [pc, #32]	; 124e4 <rb_lib_version+0x58>
   124c0:	ldr	r2, [pc, #32]	; 124e8 <rb_lib_version+0x5c>
   124c4:	add	r4, pc, r4
   124c8:	add	r2, pc, r2
   124cc:	mov	r0, r4
   124d0:	bl	53f4 <snprintf@plt>
   124d4:	mov	r0, r4
   124d8:	sub	sp, fp, #8
   124dc:	pop	{r4, sl, fp, pc}
   124e0:	.word	0x0001aebc
   124e4:	.word	0x0002db64
   124e8:	.word	0x000093a6

000124ec <rb_lib_init>:
   124ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124f0:	add	fp, sp, #28
   124f4:	sub	sp, sp, #12
   124f8:	mov	r6, r1
   124fc:	mov	r5, r0
   12500:	mov	r0, sp
   12504:	mov	r1, #0
   12508:	mov	r4, r3
   1250c:	mov	r7, r2
   12510:	bl	4e78 <rb_gettimeofday@plt>
   12514:	cmn	r0, #1
   12518:	beq	12590 <rb_lib_init+0xa4>
   1251c:	ldr	r8, [pc, #148]	; 125b8 <rb_lib_init+0xcc>
   12520:	ldr	r1, [sp]
   12524:	ldr	r9, [fp, #16]
   12528:	ldr	sl, [fp, #8]
   1252c:	add	r8, pc, r8
   12530:	ldr	r0, [r8, #16]
   12534:	cmp	r0, r1
   12538:	ble	12544 <rb_lib_init+0x58>
   1253c:	sub	r0, r0, r1
   12540:	bl	12018 <rb_set_back_events>
   12544:	ldm	sp, {r0, r1}
   12548:	strd	r0, [r8, #16]
   1254c:	stm	r8, {r5, r7}
   12550:	str	r6, [r8, #8]
   12554:	bl	4eb4 <rb_event_init@plt>
   12558:	bl	5244 <rb_init_bh@plt>
   1255c:	mov	r0, r4
   12560:	mov	r1, sl
   12564:	mov	r2, r9
   12568:	bl	534c <rb_fdlist_init@plt>
   1256c:	bl	4c68 <rb_init_netio@plt>
   12570:	ldr	r0, [fp, #12]
   12574:	bl	5160 <rb_init_rb_dlink_nodes@plt>
   12578:	bl	f9c4 <rb_io_supports_event>
   1257c:	cmp	r0, #0
   12580:	beq	12588 <rb_lib_init+0x9c>
   12584:	bl	f9e4 <rb_io_init_event>
   12588:	sub	sp, fp, #28
   1258c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12590:	bl	552c <__errno_location@plt>
   12594:	ldr	r0, [r0]
   12598:	bl	4c80 <strerror@plt>
   1259c:	mov	r1, r0
   125a0:	ldr	r0, [pc, #20]	; 125bc <rb_lib_init+0xd0>
   125a4:	add	r0, pc, r0
   125a8:	bl	519c <rb_lib_log@plt>
   125ac:	ldr	r0, [pc, #12]	; 125c0 <rb_lib_init+0xd4>
   125b0:	add	r0, pc, r0
   125b4:	bl	52bc <rb_lib_restart@plt>
   125b8:	.word	0x0002dd7c
   125bc:	.word	0x000092a9
   125c0:	.word	0x000092b0

000125c4 <rb_lib_loop>:
   125c4:	push	{fp, lr}
   125c8:	mov	fp, sp
   125cc:	sub	sp, sp, #8
   125d0:	mov	r4, r0
   125d4:	mov	r0, sp
   125d8:	mov	r1, #0
   125dc:	bl	4e78 <rb_gettimeofday@plt>
   125e0:	cmn	r0, #1
   125e4:	beq	12680 <rb_lib_loop+0xbc>
   125e8:	ldr	r5, [pc, #184]	; 126a8 <rb_lib_loop+0xe4>
   125ec:	ldr	r1, [sp]
   125f0:	add	r5, pc, r5
   125f4:	ldr	r0, [r5, #16]
   125f8:	cmp	r0, r1
   125fc:	ble	12608 <rb_lib_loop+0x44>
   12600:	sub	r0, r0, r1
   12604:	bl	12018 <rb_set_back_events>
   12608:	ldm	sp, {r0, r1}
   1260c:	strd	r0, [r5, #16]
   12610:	bl	f9c4 <rb_io_supports_event>
   12614:	cmp	r0, #0
   12618:	beq	12628 <rb_lib_loop+0x64>
   1261c:	mvn	r0, #0
   12620:	bl	4e0c <rb_select@plt>
   12624:	b	1261c <rb_lib_loop+0x58>
   12628:	cmp	r4, #0
   1262c:	beq	12640 <rb_lib_loop+0x7c>
   12630:	mov	r0, r4
   12634:	bl	4e0c <rb_select@plt>
   12638:	bl	522c <rb_event_run@plt>
   1263c:	b	12630 <rb_lib_loop+0x6c>
   12640:	mov	r4, #1000	; 0x3e8
   12644:	bl	5478 <rb_event_next@plt>
   12648:	cmp	r0, #1
   1264c:	blt	12678 <rb_lib_loop+0xb4>
   12650:	ldr	r1, [r5, #16]
   12654:	sub	r1, r0, r1
   12658:	cmp	r1, #1
   1265c:	mul	r0, r1, r4
   12660:	movwlt	r0, #1000	; 0x3e8
   12664:	bl	4e0c <rb_select@plt>
   12668:	bl	522c <rb_event_run@plt>
   1266c:	bl	5478 <rb_event_next@plt>
   12670:	cmp	r0, #1
   12674:	bge	12650 <rb_lib_loop+0x8c>
   12678:	mvn	r0, #0
   1267c:	b	12664 <rb_lib_loop+0xa0>
   12680:	bl	552c <__errno_location@plt>
   12684:	ldr	r0, [r0]
   12688:	bl	4c80 <strerror@plt>
   1268c:	mov	r1, r0
   12690:	ldr	r0, [pc, #20]	; 126ac <rb_lib_loop+0xe8>
   12694:	add	r0, pc, r0
   12698:	bl	519c <rb_lib_log@plt>
   1269c:	ldr	r0, [pc, #12]	; 126b0 <rb_lib_loop+0xec>
   126a0:	add	r0, pc, r0
   126a4:	bl	52bc <rb_lib_restart@plt>
   126a8:	.word	0x0002dcb8
   126ac:	.word	0x000091b9
   126b0:	.word	0x000091c0

000126b4 <rb_strtok_r>:
   126b4:	b	52b0 <strtok_r@plt>

000126b8 <rb_base64_encode>:
   126b8:	push	{r4, r5, r6, sl, fp, lr}
   126bc:	add	fp, sp, #16
   126c0:	mov	r4, r0
   126c4:	adds	r0, r1, #2
   126c8:	bmi	12778 <rb_base64_encode+0xc0>
   126cc:	mov	r6, r1
   126d0:	movw	r1, #43691	; 0xaaab
   126d4:	movt	r1, #43690	; 0xaaaa
   126d8:	umull	r0, r1, r0, r1
   126dc:	lsr	r0, r1, #1
   126e0:	add	r1, r0, r0, lsl #2
   126e4:	mov	r0, #1
   126e8:	bl	4e9c <calloc@plt>
   126ec:	cmp	r0, #0
   126f0:	beq	127f0 <rb_base64_encode+0x138>
   126f4:	cmp	r6, #3
   126f8:	blt	12780 <rb_base64_encode+0xc8>
   126fc:	ldr	ip, [pc, #240]	; 127f4 <rb_base64_encode+0x13c>
   12700:	mov	r1, r0
   12704:	add	ip, pc, ip
   12708:	ldrb	r3, [r4]
   1270c:	sub	r6, r6, #3
   12710:	cmp	r6, #2
   12714:	ldrb	r2, [ip, r3, lsr #2]
   12718:	strb	r2, [r1]
   1271c:	and	r2, r3, #3
   12720:	ldrb	r3, [r4, #1]
   12724:	lsr	r5, r3, #4
   12728:	and	r3, r3, #15
   1272c:	orr	r2, r5, r2, lsl #4
   12730:	ldrb	r2, [ip, r2]
   12734:	strb	r2, [r1, #1]
   12738:	ldrb	r2, [r4, #2]
   1273c:	add	r4, r4, #3
   12740:	and	r5, r2, #63	; 0x3f
   12744:	lsr	r2, r2, #6
   12748:	orr	r2, r2, r3, lsl #2
   1274c:	ldrb	r5, [ip, r5]
   12750:	ldrb	r2, [ip, r2]
   12754:	strb	r5, [r1, #3]
   12758:	strb	r2, [r1, #2]
   1275c:	add	r1, r1, #4
   12760:	bgt	12708 <rb_base64_encode+0x50>
   12764:	cmp	r6, #0
   12768:	bne	1278c <rb_base64_encode+0xd4>
   1276c:	mov	r2, #0
   12770:	strb	r2, [r1]
   12774:	pop	{r4, r5, r6, sl, fp, pc}
   12778:	mov	r0, #0
   1277c:	pop	{r4, r5, r6, sl, fp, pc}
   12780:	mov	r1, r0
   12784:	cmp	r6, #0
   12788:	beq	1276c <rb_base64_encode+0xb4>
   1278c:	ldrb	r3, [r4]
   12790:	ldr	r2, [pc, #96]	; 127f8 <rb_base64_encode+0x140>
   12794:	cmp	r6, #2
   12798:	add	r2, pc, r2
   1279c:	ldrb	r5, [r2, r3, lsr #2]
   127a0:	strb	r5, [r1]
   127a4:	mov	r5, #48	; 0x30
   127a8:	and	r3, r5, r3, lsl #4
   127ac:	blt	127c8 <rb_base64_encode+0x110>
   127b0:	ldrb	r6, [r4, #1]
   127b4:	and	r5, r6, #15
   127b8:	orr	r3, r3, r6, lsr #4
   127bc:	ldrb	r5, [r2, r5, lsl #2]
   127c0:	strb	r5, [r1, #2]
   127c4:	b	127d0 <rb_base64_encode+0x118>
   127c8:	mov	r6, #61	; 0x3d
   127cc:	strb	r6, [r1, #2]
   127d0:	ldrb	r2, [r2, r3]
   127d4:	strb	r2, [r1, #1]
   127d8:	mov	r2, #61	; 0x3d
   127dc:	strb	r2, [r1, #3]
   127e0:	add	r1, r1, #4
   127e4:	mov	r2, #0
   127e8:	strb	r2, [r1]
   127ec:	pop	{r4, r5, r6, sl, fp, pc}
   127f0:	bl	51fc <rb_outofmemory@plt>
   127f4:	.word	0x00009181
   127f8:	.word	0x000090ed

000127fc <rb_base64_decode>:
   127fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12800:	add	fp, sp, #24
   12804:	mov	r5, r1
   12808:	mov	r6, r0
   1280c:	add	r1, r1, #1
   12810:	mov	r0, #1
   12814:	mov	r8, r2
   12818:	bl	4e9c <calloc@plt>
   1281c:	cmp	r0, #0
   12820:	beq	1295c <rb_base64_decode+0x160>
   12824:	ldr	r3, [pc, #308]	; 12960 <rb_base64_decode+0x164>
   12828:	mov	r1, #0
   1282c:	mov	ip, #0
   12830:	add	r3, pc, r3
   12834:	ldrb	r4, [r6], #1
   12838:	cmp	r4, #0
   1283c:	beq	1294c <rb_base64_decode+0x150>
   12840:	subs	r5, r5, #1
   12844:	blt	12908 <rb_base64_decode+0x10c>
   12848:	cmp	r4, #61	; 0x3d
   1284c:	beq	12908 <rb_base64_decode+0x10c>
   12850:	add	r7, r3, r4, lsl #1
   12854:	ldrsh	r4, [r7]
   12858:	cmp	r4, #0
   1285c:	bmi	12834 <rb_base64_decode+0x38>
   12860:	and	r7, ip, #3
   12864:	add	r2, pc, #4
   12868:	ldr	r7, [r2, r7, lsl #2]
   1286c:	add	pc, r2, r7
   12870:	.word	0x00000010
   12874:	.word	0x00000068
   12878:	.word	0x0000002c
   1287c:	.word	0x00000044
   12880:	lsl	r2, r4, #2
   12884:	add	ip, ip, #1
   12888:	strb	r2, [r0, r1]
   1288c:	ldrb	r4, [r6], #1
   12890:	cmp	r4, #0
   12894:	bne	12840 <rb_base64_decode+0x44>
   12898:	b	1294c <rb_base64_decode+0x150>
   1289c:	add	r2, r1, #1
   128a0:	lsl	r7, r4, #6
   128a4:	strb	r7, [r0, r2]
   128a8:	ldrb	r7, [r0, r1]
   128ac:	orr	r7, r7, r4, lsr #2
   128b0:	b	128ec <rb_base64_decode+0xf0>
   128b4:	ldrb	r2, [r0, r1]
   128b8:	add	ip, ip, #1
   128bc:	orr	r2, r2, r4
   128c0:	strb	r2, [r0, r1]
   128c4:	add	r1, r1, #1
   128c8:	ldrb	r4, [r6], #1
   128cc:	cmp	r4, #0
   128d0:	bne	12840 <rb_base64_decode+0x44>
   128d4:	b	1294c <rb_base64_decode+0x150>
   128d8:	add	r2, r1, #1
   128dc:	lsl	r7, r4, #4
   128e0:	strb	r7, [r0, r2]
   128e4:	ldrb	r7, [r0, r1]
   128e8:	orr	r7, r7, r4, lsr #4
   128ec:	strb	r7, [r0, r1]
   128f0:	mov	r1, r2
   128f4:	add	ip, ip, #1
   128f8:	ldrb	r4, [r6], #1
   128fc:	cmp	r4, #0
   12900:	bne	12840 <rb_base64_decode+0x44>
   12904:	b	1294c <rb_base64_decode+0x150>
   12908:	cmp	r4, #61	; 0x3d
   1290c:	bne	1294c <rb_base64_decode+0x150>
   12910:	and	r2, ip, #3
   12914:	cmp	r2, #3
   12918:	beq	12938 <rb_base64_decode+0x13c>
   1291c:	cmp	r2, #2
   12920:	beq	12940 <rb_base64_decode+0x144>
   12924:	cmp	r2, #1
   12928:	bne	1294c <rb_base64_decode+0x150>
   1292c:	bl	4f8c <free@plt>
   12930:	mov	r0, #0
   12934:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12938:	mov	r2, r1
   1293c:	b	12944 <rb_base64_decode+0x148>
   12940:	add	r2, r1, #1
   12944:	mov	r3, #0
   12948:	strb	r3, [r0, r2]
   1294c:	mov	r2, #0
   12950:	strb	r2, [r0, r1]
   12954:	str	r1, [r8]
   12958:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1295c:	bl	51fc <rb_outofmemory@plt>
   12960:	.word	0x0000916e

00012964 <rb_outofmemory>:
   12964:	push	{fp, lr}
   12968:	mov	fp, sp
   1296c:	ldr	r0, [pc, #48]	; 129a4 <rb_outofmemory+0x40>
   12970:	add	r0, pc, r0
   12974:	ldrb	r1, [r0]
   12978:	cmp	r1, #1
   1297c:	bne	12984 <rb_outofmemory+0x20>
   12980:	bl	4ca4 <abort@plt>
   12984:	mov	r1, #1
   12988:	strb	r1, [r0]
   1298c:	ldr	r0, [pc, #20]	; 129a8 <rb_outofmemory+0x44>
   12990:	add	r0, pc, r0
   12994:	bl	519c <rb_lib_log@plt>
   12998:	ldr	r0, [pc, #12]	; 129ac <rb_outofmemory+0x48>
   1299c:	add	r0, pc, r0
   129a0:	bl	52bc <rb_lib_restart@plt>
   129a4:	.word	0x0002d950
   129a8:	.word	0x0000920e
   129ac:	.word	0x00009226

000129b0 <rb_linebuf_init>:
   129b0:	push	{fp, lr}
   129b4:	mov	fp, sp
   129b8:	ldr	r2, [pc, #28]	; 129dc <rb_linebuf_init+0x2c>
   129bc:	mov	r1, r0
   129c0:	movw	r0, #1036	; 0x40c
   129c4:	add	r2, pc, r2
   129c8:	bl	5304 <rb_bh_create@plt>
   129cc:	ldr	r1, [pc, #12]	; 129e0 <rb_linebuf_init+0x30>
   129d0:	add	r1, pc, r1
   129d4:	str	r0, [r1]
   129d8:	pop	{fp, pc}
   129dc:	.word	0x0000920c
   129e0:	.word	0x0002f8f8

000129e4 <rb_linebuf_newbuf>:
   129e4:	vmov.i32	q8, #0	; 0x00000000
   129e8:	mov	r1, #12
   129ec:	vst1.32	{d16-d17}, [r0], r1
   129f0:	vst1.32	{d16-d17}, [r0]
   129f4:	bx	lr

000129f8 <rb_linebuf_donebuf>:
   129f8:	push	{r4, r5, r6, r7, fp, lr}
   129fc:	add	fp, sp, #16
   12a00:	mov	r4, r0
   12a04:	ldr	r0, [r0]
   12a08:	cmp	r0, #0
   12a0c:	beq	12ad0 <rb_linebuf_donebuf+0xd8>
   12a10:	ldr	r7, [pc, #188]	; 12ad4 <rb_linebuf_donebuf+0xdc>
   12a14:	mov	r6, #0
   12a18:	add	r7, pc, r7
   12a1c:	b	12a2c <rb_linebuf_donebuf+0x34>
   12a20:	ldr	r0, [r4]
   12a24:	cmp	r0, #0
   12a28:	beq	12ad0 <rb_linebuf_donebuf+0xd8>
   12a2c:	ldr	r1, [r0, #8]
   12a30:	ldr	r5, [r0]
   12a34:	ldr	r2, [r0, #4]
   12a38:	cmp	r1, #0
   12a3c:	beq	12a4c <rb_linebuf_donebuf+0x54>
   12a40:	str	r2, [r1, #4]
   12a44:	ldr	r2, [r0, #4]
   12a48:	b	12a50 <rb_linebuf_donebuf+0x58>
   12a4c:	str	r2, [r4, #4]
   12a50:	cmp	r2, #0
   12a54:	mov	r3, r4
   12a58:	addne	r3, r2, #8
   12a5c:	str	r1, [r3]
   12a60:	str	r6, [r0, #4]
   12a64:	str	r6, [r0, #8]
   12a68:	ldr	r1, [r4, #8]
   12a6c:	sub	r1, r1, #1
   12a70:	str	r1, [r4, #8]
   12a74:	bl	50d0 <rb_free_rb_dlink_node@plt>
   12a78:	ldr	r1, [r4, #16]
   12a7c:	ldr	r2, [r4, #24]
   12a80:	ldr	r0, [r4, #12]
   12a84:	sub	r1, r1, #1
   12a88:	sub	r2, r2, #1
   12a8c:	str	r1, [r4, #16]
   12a90:	ldr	r1, [r5, #1028]	; 0x404
   12a94:	str	r2, [r4, #24]
   12a98:	sub	r0, r0, r1
   12a9c:	str	r0, [r4, #12]
   12aa0:	ldr	r0, [r5, #1032]	; 0x408
   12aa4:	subs	r0, r0, #1
   12aa8:	str	r0, [r5, #1032]	; 0x408
   12aac:	bne	12a20 <rb_linebuf_donebuf+0x28>
   12ab0:	ldr	r0, [r7, #4]
   12ab4:	mov	r1, r5
   12ab8:	sub	r0, r0, #1
   12abc:	str	r0, [r7, #4]
   12ac0:	ldr	r0, [pc, #16]	; 12ad8 <rb_linebuf_donebuf+0xe0>
   12ac4:	ldr	r0, [pc, r0]
   12ac8:	bl	5154 <rb_bh_free@plt>
   12acc:	b	12a20 <rb_linebuf_donebuf+0x28>
   12ad0:	pop	{r4, r5, r6, r7, fp, pc}
   12ad4:	.word	0x0002f8b0
   12ad8:	.word	0x0002f804

00012adc <rb_linebuf_parse>:
   12adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae0:	add	fp, sp, #28
   12ae4:	sub	sp, sp, #4
   12ae8:	mov	r9, r0
   12aec:	ldr	r0, [r0, #4]
   12af0:	mov	r8, r3
   12af4:	mov	r4, r2
   12af8:	mov	r5, r1
   12afc:	cmp	r0, #0
   12b00:	beq	12c24 <rb_linebuf_parse+0x148>
   12b04:	ldr	r1, [r0]
   12b08:	mov	r0, r9
   12b0c:	mov	r2, r5
   12b10:	mov	r3, r4
   12b14:	cmp	r8, #0
   12b18:	beq	12c34 <rb_linebuf_parse+0x158>
   12b1c:	bl	12f5c <rb_linebuf_copy_raw>
   12b20:	cmn	r0, #1
   12b24:	beq	12d18 <rb_linebuf_parse+0x23c>
   12b28:	mov	r7, #1
   12b2c:	cmp	r0, r4
   12b30:	beq	12d2c <rb_linebuf_parse+0x250>
   12b34:	add	r5, r5, r0
   12b38:	sub	r4, r4, r0
   12b3c:	mov	r7, #1
   12b40:	cmp	r4, #1
   12b44:	blt	12d2c <rb_linebuf_parse+0x250>
   12b48:	cmp	r8, #0
   12b4c:	beq	12c44 <rb_linebuf_parse+0x168>
   12b50:	ldr	r8, [pc, #480]	; 12d38 <rb_linebuf_parse+0x25c>
   12b54:	mov	sl, #0
   12b58:	add	r8, pc, r8
   12b5c:	ldr	r0, [pc, #472]	; 12d3c <rb_linebuf_parse+0x260>
   12b60:	ldr	r0, [pc, r0]
   12b64:	bl	51cc <rb_bh_alloc@plt>
   12b68:	mov	r6, r0
   12b6c:	cmp	r0, #0
   12b70:	beq	12be8 <rb_linebuf_parse+0x10c>
   12b74:	ldr	r0, [r8, #4]
   12b78:	add	r0, r0, #1
   12b7c:	str	r0, [r8, #4]
   12b80:	bl	53c4 <rb_make_rb_dlink_node@plt>
   12b84:	str	sl, [r0, #8]
   12b88:	str	r6, [r0]
   12b8c:	ldr	r1, [r9, #4]
   12b90:	cmp	r1, #0
   12b94:	str	r1, [r0, #4]
   12b98:	beq	12ba8 <rb_linebuf_parse+0xcc>
   12b9c:	add	r1, r1, #8
   12ba0:	str	r0, [r1]
   12ba4:	b	12bb4 <rb_linebuf_parse+0xd8>
   12ba8:	ldr	r1, [r9]
   12bac:	cmp	r1, #0
   12bb0:	beq	12c1c <rb_linebuf_parse+0x140>
   12bb4:	str	r0, [r9, #4]
   12bb8:	ldr	r0, [r9, #8]
   12bbc:	add	r0, r0, #1
   12bc0:	str	r0, [r9, #8]
   12bc4:	ldr	r0, [r6, #1032]	; 0x408
   12bc8:	add	r0, r0, #1
   12bcc:	str	r0, [r6, #1032]	; 0x408
   12bd0:	ldr	r0, [r9, #16]
   12bd4:	ldr	r1, [r9, #24]
   12bd8:	add	r0, r0, #1
   12bdc:	str	r0, [r9, #16]
   12be0:	add	r0, r1, #1
   12be4:	str	r0, [r9, #24]
   12be8:	mov	r0, r9
   12bec:	mov	r1, r6
   12bf0:	mov	r2, r5
   12bf4:	mov	r3, r4
   12bf8:	bl	12f5c <rb_linebuf_copy_raw>
   12bfc:	cmn	r0, #1
   12c00:	beq	12d28 <rb_linebuf_parse+0x24c>
   12c04:	sub	r4, r4, r0
   12c08:	add	r5, r5, r0
   12c0c:	add	r7, r7, #1
   12c10:	cmp	r4, #0
   12c14:	bgt	12b5c <rb_linebuf_parse+0x80>
   12c18:	b	12d2c <rb_linebuf_parse+0x250>
   12c1c:	mov	r1, r9
   12c20:	b	12ba0 <rb_linebuf_parse+0xc4>
   12c24:	mov	r7, #0
   12c28:	cmp	r4, #1
   12c2c:	bge	12b48 <rb_linebuf_parse+0x6c>
   12c30:	b	12d2c <rb_linebuf_parse+0x250>
   12c34:	bl	12d48 <rb_linebuf_copy_line>
   12c38:	cmn	r0, #1
   12c3c:	bne	12b28 <rb_linebuf_parse+0x4c>
   12c40:	b	12d18 <rb_linebuf_parse+0x23c>
   12c44:	ldr	r6, [pc, #244]	; 12d40 <rb_linebuf_parse+0x264>
   12c48:	mov	sl, #0
   12c4c:	add	r6, pc, r6
   12c50:	ldr	r0, [pc, #236]	; 12d44 <rb_linebuf_parse+0x268>
   12c54:	ldr	r0, [pc, r0]
   12c58:	bl	51cc <rb_bh_alloc@plt>
   12c5c:	mov	r8, r0
   12c60:	cmp	r0, #0
   12c64:	beq	12cdc <rb_linebuf_parse+0x200>
   12c68:	ldr	r0, [r6, #4]
   12c6c:	add	r0, r0, #1
   12c70:	str	r0, [r6, #4]
   12c74:	bl	53c4 <rb_make_rb_dlink_node@plt>
   12c78:	str	sl, [r0, #8]
   12c7c:	str	r8, [r0]
   12c80:	ldr	r1, [r9, #4]
   12c84:	cmp	r1, #0
   12c88:	str	r1, [r0, #4]
   12c8c:	beq	12c9c <rb_linebuf_parse+0x1c0>
   12c90:	add	r1, r1, #8
   12c94:	str	r0, [r1]
   12c98:	b	12ca8 <rb_linebuf_parse+0x1cc>
   12c9c:	ldr	r1, [r9]
   12ca0:	cmp	r1, #0
   12ca4:	beq	12d10 <rb_linebuf_parse+0x234>
   12ca8:	str	r0, [r9, #4]
   12cac:	ldr	r0, [r9, #8]
   12cb0:	add	r0, r0, #1
   12cb4:	str	r0, [r9, #8]
   12cb8:	ldr	r0, [r8, #1032]	; 0x408
   12cbc:	add	r0, r0, #1
   12cc0:	str	r0, [r8, #1032]	; 0x408
   12cc4:	ldr	r0, [r9, #16]
   12cc8:	ldr	r1, [r9, #24]
   12ccc:	add	r0, r0, #1
   12cd0:	str	r0, [r9, #16]
   12cd4:	add	r0, r1, #1
   12cd8:	str	r0, [r9, #24]
   12cdc:	mov	r0, r9
   12ce0:	mov	r1, r8
   12ce4:	mov	r2, r5
   12ce8:	mov	r3, r4
   12cec:	bl	12d48 <rb_linebuf_copy_line>
   12cf0:	cmn	r0, #1
   12cf4:	beq	12d18 <rb_linebuf_parse+0x23c>
   12cf8:	sub	r4, r4, r0
   12cfc:	add	r5, r5, r0
   12d00:	add	r7, r7, #1
   12d04:	cmp	r4, #0
   12d08:	bgt	12c50 <rb_linebuf_parse+0x174>
   12d0c:	b	12d2c <rb_linebuf_parse+0x250>
   12d10:	mov	r1, r9
   12d14:	b	12c94 <rb_linebuf_parse+0x1b8>
   12d18:	mvn	r7, #0
   12d1c:	mov	r0, r7
   12d20:	sub	sp, fp, #28
   12d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d28:	mvn	r7, #0
   12d2c:	mov	r0, r7
   12d30:	sub	sp, fp, #28
   12d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d38:	.word	0x0002f770
   12d3c:	.word	0x0002f768
   12d40:	.word	0x0002f67c
   12d44:	.word	0x0002f674

00012d48 <rb_linebuf_copy_line>:
   12d48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d4c:	add	fp, sp, #24
   12d50:	mov	r7, #0
   12d54:	mov	r8, r0
   12d58:	strb	r7, [r1, #1026]	; 0x402
   12d5c:	ldrb	r0, [r1, #1025]	; 0x401
   12d60:	cmp	r0, #1
   12d64:	beq	12f54 <rb_linebuf_copy_line+0x20c>
   12d68:	ldr	r9, [r1, #1028]	; 0x404
   12d6c:	mov	r4, r1
   12d70:	mov	r7, #0
   12d74:	cmp	r3, #0
   12d78:	beq	12da0 <rb_linebuf_copy_line+0x58>
   12d7c:	rsb	r0, r3, #0
   12d80:	add	r1, r2, #1
   12d84:	ldrb	r5, [r1, #-1]
   12d88:	cmp	r5, #13
   12d8c:	cmpne	r5, #10
   12d90:	beq	12e30 <rb_linebuf_copy_line+0xe8>
   12d94:	adds	r0, r0, #1
   12d98:	add	r1, r1, #1
   12d9c:	bcc	12d84 <rb_linebuf_copy_line+0x3c>
   12da0:	sub	r7, r3, r7
   12da4:	cmn	r7, #1
   12da8:	beq	12e78 <rb_linebuf_copy_line+0x130>
   12dac:	movw	r0, #1022	; 0x3fe
   12db0:	add	r6, r4, r9
   12db4:	sub	r5, r0, r9
   12db8:	cmp	r7, r5
   12dbc:	ble	12e84 <rb_linebuf_copy_line+0x13c>
   12dc0:	mov	r1, r2
   12dc4:	mov	r0, r6
   12dc8:	mov	r2, r5
   12dcc:	bl	5094 <memcpy@plt>
   12dd0:	mov	r0, #0
   12dd4:	cmp	r5, #0
   12dd8:	strb	r0, [r4, #1022]	; 0x3fe
   12ddc:	beq	12e0c <rb_linebuf_copy_line+0xc4>
   12de0:	movw	r1, #1022	; 0x3fe
   12de4:	movw	r2, #1021	; 0x3fd
   12de8:	sub	r1, r9, r1
   12dec:	add	r2, r4, r2
   12df0:	ldrb	r3, [r2]
   12df4:	cmp	r3, #13
   12df8:	cmpne	r3, #10
   12dfc:	bne	12e0c <rb_linebuf_copy_line+0xc4>
   12e00:	strb	r0, [r2], #-1
   12e04:	adds	r1, r1, #1
   12e08:	bcc	12df0 <rb_linebuf_copy_line+0xa8>
   12e0c:	movw	r0, #1022	; 0x3fe
   12e10:	mov	r1, #1
   12e14:	str	r0, [r4, #1028]	; 0x404
   12e18:	strb	r1, [r4, #1025]	; 0x401
   12e1c:	ldr	r1, [r8, #12]
   12e20:	add	r0, r1, r0
   12e24:	str	r0, [r8, #12]
   12e28:	mov	r0, r7
   12e2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e30:	add	r6, r0, #1
   12e34:	mov	r7, #0
   12e38:	uxtb	r5, r5
   12e3c:	cmp	r5, #13
   12e40:	cmpne	r5, #10
   12e44:	bne	12e68 <rb_linebuf_copy_line+0x120>
   12e48:	cmp	r6, r7
   12e4c:	beq	12f20 <rb_linebuf_copy_line+0x1d8>
   12e50:	ldrb	r5, [r1, -r7]
   12e54:	sub	r7, r7, #1
   12e58:	uxtb	r5, r5
   12e5c:	cmp	r5, #13
   12e60:	cmpne	r5, #10
   12e64:	beq	12e48 <rb_linebuf_copy_line+0x100>
   12e68:	sub	r7, r7, r0
   12e6c:	sub	r7, r3, r7
   12e70:	cmn	r7, #1
   12e74:	bne	12dac <rb_linebuf_copy_line+0x64>
   12e78:	mvn	r7, #0
   12e7c:	mov	r0, r7
   12e80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e84:	mov	r1, r2
   12e88:	mov	r0, r6
   12e8c:	mov	r2, r7
   12e90:	bl	5094 <memcpy@plt>
   12e94:	mov	r0, #0
   12e98:	mov	r1, r6
   12e9c:	strb	r0, [r1, r7]!
   12ea0:	ldrb	r2, [r1, #-1]
   12ea4:	cmp	r2, #10
   12ea8:	cmpne	r2, #13
   12eac:	bne	12f34 <rb_linebuf_copy_line+0x1ec>
   12eb0:	cmp	r7, #0
   12eb4:	beq	12f00 <rb_linebuf_copy_line+0x1b8>
   12eb8:	sub	r1, r6, #2
   12ebc:	mov	r6, r7
   12ec0:	uxtb	r0, r2
   12ec4:	cmp	r0, #13
   12ec8:	cmpne	r0, #10
   12ecc:	bne	12efc <rb_linebuf_copy_line+0x1b4>
   12ed0:	add	r2, r1, r6
   12ed4:	mov	r0, #0
   12ed8:	subs	r3, r6, #1
   12edc:	strb	r0, [r2, #1]
   12ee0:	beq	12f00 <rb_linebuf_copy_line+0x1b8>
   12ee4:	ldrb	r2, [r1, r6]
   12ee8:	mov	r6, r3
   12eec:	uxtb	r0, r2
   12ef0:	cmp	r0, #13
   12ef4:	cmpne	r0, #10
   12ef8:	beq	12ed0 <rb_linebuf_copy_line+0x188>
   12efc:	mov	r0, r6
   12f00:	mov	r1, #1
   12f04:	strb	r1, [r4, #1025]	; 0x401
   12f08:	ldr	r1, [r8, #12]
   12f0c:	add	r1, r1, r0
   12f10:	str	r1, [r8, #12]
   12f14:	ldr	r1, [r4, #1028]	; 0x404
   12f18:	add	r0, r1, r0
   12f1c:	b	12f50 <rb_linebuf_copy_line+0x208>
   12f20:	mov	r7, #0
   12f24:	sub	r7, r3, r7
   12f28:	cmn	r7, #1
   12f2c:	bne	12dac <rb_linebuf_copy_line+0x64>
   12f30:	b	12e78 <rb_linebuf_copy_line+0x130>
   12f34:	ldr	r0, [r8, #12]
   12f38:	add	r0, r0, r7
   12f3c:	str	r0, [r8, #12]
   12f40:	mov	r0, #0
   12f44:	strb	r0, [r4, #1025]	; 0x401
   12f48:	ldr	r0, [r4, #1028]	; 0x404
   12f4c:	add	r0, r0, r7
   12f50:	str	r0, [r4, #1028]	; 0x404
   12f54:	mov	r0, r7
   12f58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012f5c <rb_linebuf_copy_raw>:
   12f5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f60:	add	fp, sp, #24
   12f64:	mov	r8, r0
   12f68:	mov	r0, #1
   12f6c:	mov	r6, #0
   12f70:	strb	r0, [r1, #1026]	; 0x402
   12f74:	ldrb	r0, [r1, #1025]	; 0x401
   12f78:	cmp	r0, #1
   12f7c:	beq	130d8 <rb_linebuf_copy_raw+0x17c>
   12f80:	ldr	ip, [r1, #1028]	; 0x404
   12f84:	mov	r4, r1
   12f88:	mov	r6, #0
   12f8c:	cmp	r3, #0
   12f90:	beq	12fb8 <rb_linebuf_copy_raw+0x5c>
   12f94:	rsb	r1, r3, #0
   12f98:	add	r7, r2, #1
   12f9c:	ldrb	r0, [r7, #-1]
   12fa0:	cmp	r0, #13
   12fa4:	cmpne	r0, #10
   12fa8:	beq	13010 <rb_linebuf_copy_raw+0xb4>
   12fac:	adds	r1, r1, #1
   12fb0:	add	r7, r7, #1
   12fb4:	bcc	12f9c <rb_linebuf_copy_raw+0x40>
   12fb8:	sub	r6, r3, r6
   12fbc:	cmn	r6, #1
   12fc0:	beq	13058 <rb_linebuf_copy_raw+0xfc>
   12fc4:	movw	r9, #1022	; 0x3fe
   12fc8:	add	r5, r4, ip
   12fcc:	sub	r7, r9, ip
   12fd0:	cmp	r6, r7
   12fd4:	ble	13064 <rb_linebuf_copy_raw+0x108>
   12fd8:	mov	r1, r2
   12fdc:	mov	r0, r5
   12fe0:	mov	r2, r7
   12fe4:	bl	5094 <memcpy@plt>
   12fe8:	mov	r0, #1
   12fec:	str	r9, [r4, #1028]	; 0x404
   12ff0:	strb	r0, [r4, #1025]	; 0x401
   12ff4:	mov	r0, #0
   12ff8:	strb	r0, [r4, #1022]	; 0x3fe
   12ffc:	ldr	r0, [r8, #12]
   13000:	add	r0, r0, r9
   13004:	str	r0, [r8, #12]
   13008:	mov	r0, r7
   1300c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13010:	add	r5, r1, #1
   13014:	mov	r6, #0
   13018:	uxtb	r0, r0
   1301c:	cmp	r0, #13
   13020:	cmpne	r0, #10
   13024:	bne	13048 <rb_linebuf_copy_raw+0xec>
   13028:	cmp	r5, r6
   1302c:	beq	130a4 <rb_linebuf_copy_raw+0x148>
   13030:	ldrb	r0, [r7, -r6]
   13034:	sub	r6, r6, #1
   13038:	uxtb	r0, r0
   1303c:	cmp	r0, #13
   13040:	cmpne	r0, #10
   13044:	beq	13028 <rb_linebuf_copy_raw+0xcc>
   13048:	sub	r6, r6, r1
   1304c:	sub	r6, r3, r6
   13050:	cmn	r6, #1
   13054:	bne	12fc4 <rb_linebuf_copy_raw+0x68>
   13058:	mvn	r6, #0
   1305c:	mov	r0, r6
   13060:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13064:	mov	r1, r2
   13068:	mov	r0, r5
   1306c:	mov	r2, r6
   13070:	bl	5094 <memcpy@plt>
   13074:	mov	r0, #0
   13078:	strb	r0, [r5, r6]!
   1307c:	ldrb	r0, [r5, #-1]
   13080:	cmp	r0, #10
   13084:	cmpne	r0, #13
   13088:	bne	130b8 <rb_linebuf_copy_raw+0x15c>
   1308c:	mov	r0, #1
   13090:	strb	r0, [r4, #1025]	; 0x401
   13094:	ldr	r0, [r8, #12]
   13098:	add	r0, r0, r6
   1309c:	str	r0, [r8, #12]
   130a0:	b	130cc <rb_linebuf_copy_raw+0x170>
   130a4:	mov	r6, #0
   130a8:	sub	r6, r3, r6
   130ac:	cmn	r6, #1
   130b0:	bne	12fc4 <rb_linebuf_copy_raw+0x68>
   130b4:	b	13058 <rb_linebuf_copy_raw+0xfc>
   130b8:	ldr	r0, [r8, #12]
   130bc:	add	r0, r0, r6
   130c0:	str	r0, [r8, #12]
   130c4:	mov	r0, #0
   130c8:	strb	r0, [r4, #1025]	; 0x401
   130cc:	ldr	r0, [r4, #1028]	; 0x404
   130d0:	add	r0, r0, r6
   130d4:	str	r0, [r4, #1028]	; 0x404
   130d8:	mov	r0, r6
   130dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000130e0 <rb_linebuf_get>:
   130e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130e4:	add	fp, sp, #24
   130e8:	mov	r5, r0
   130ec:	ldr	r0, [r0]
   130f0:	mov	r6, #0
   130f4:	cmp	r0, #0
   130f8:	beq	13218 <rb_linebuf_get+0x138>
   130fc:	ldr	r4, [r0]
   13100:	mov	r9, r1
   13104:	cmp	r3, #0
   13108:	bne	13118 <rb_linebuf_get+0x38>
   1310c:	ldrb	r0, [r4, #1025]	; 0x401
   13110:	cmp	r0, #0
   13114:	beq	13218 <rb_linebuf_get+0x138>
   13118:	ldr	r3, [r4, #1028]	; 0x404
   1311c:	ldr	r8, [fp, #8]
   13120:	cmp	r3, r2
   13124:	subgt	r3, r2, #1
   13128:	cmp	r8, #0
   1312c:	bne	13170 <rb_linebuf_get+0x90>
   13130:	ldrb	r0, [r4, #1026]	; 0x402
   13134:	cmp	r0, #0
   13138:	beq	13170 <rb_linebuf_get+0x90>
   1313c:	mov	r6, #0
   13140:	cmp	r3, #0
   13144:	beq	13174 <rb_linebuf_get+0x94>
   13148:	rsb	r0, r3, #0
   1314c:	mov	r1, r4
   13150:	ldrb	r2, [r1]
   13154:	cmp	r2, #13
   13158:	cmpne	r2, #10
   1315c:	bne	1324c <rb_linebuf_get+0x16c>
   13160:	adds	r0, r0, #1
   13164:	add	r1, r1, #1
   13168:	bcc	13150 <rb_linebuf_get+0x70>
   1316c:	b	13178 <rb_linebuf_get+0x98>
   13170:	mov	r6, r3
   13174:	mov	r1, r4
   13178:	mov	r0, r9
   1317c:	mov	r2, r6
   13180:	bl	5094 <memcpy@plt>
   13184:	cmp	r8, #0
   13188:	moveq	r0, #0
   1318c:	strbeq	r0, [r9, r6]
   13190:	ldr	r0, [r5]
   13194:	ldr	r1, [r0, #8]
   13198:	ldr	r2, [r0, #4]
   1319c:	cmp	r1, #0
   131a0:	beq	131b0 <rb_linebuf_get+0xd0>
   131a4:	str	r2, [r1, #4]
   131a8:	ldr	r2, [r0, #4]
   131ac:	b	131b4 <rb_linebuf_get+0xd4>
   131b0:	str	r2, [r5, #4]
   131b4:	cmp	r2, #0
   131b8:	mov	r3, r5
   131bc:	addne	r3, r2, #8
   131c0:	str	r1, [r3]
   131c4:	mov	r1, #0
   131c8:	str	r1, [r0, #4]
   131cc:	str	r1, [r0, #8]
   131d0:	ldr	r1, [r5, #8]
   131d4:	sub	r1, r1, #1
   131d8:	str	r1, [r5, #8]
   131dc:	bl	50d0 <rb_free_rb_dlink_node@plt>
   131e0:	ldr	r1, [r5, #16]
   131e4:	ldr	r2, [r5, #24]
   131e8:	ldr	r0, [r5, #12]
   131ec:	sub	r1, r1, #1
   131f0:	sub	r2, r2, #1
   131f4:	str	r1, [r5, #16]
   131f8:	ldr	r1, [r4, #1028]	; 0x404
   131fc:	str	r2, [r5, #24]
   13200:	sub	r0, r0, r1
   13204:	str	r0, [r5, #12]
   13208:	ldr	r0, [r4, #1032]	; 0x408
   1320c:	subs	r0, r0, #1
   13210:	str	r0, [r4, #1032]	; 0x408
   13214:	beq	13220 <rb_linebuf_get+0x140>
   13218:	mov	r0, r6
   1321c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13220:	ldr	r0, [pc, #100]	; 1328c <rb_linebuf_get+0x1ac>
   13224:	add	r0, pc, r0
   13228:	ldr	r1, [r0, #4]
   1322c:	sub	r1, r1, #1
   13230:	str	r1, [r0, #4]
   13234:	mov	r1, r4
   13238:	ldr	r0, [pc, #80]	; 13290 <rb_linebuf_get+0x1b0>
   1323c:	ldr	r0, [pc, r0]
   13240:	bl	5154 <rb_bh_free@plt>
   13244:	mov	r0, r6
   13248:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1324c:	add	r2, r3, r4
   13250:	add	r3, r0, #1
   13254:	mov	r6, #0
   13258:	sub	r2, r2, #1
   1325c:	ldrb	r7, [r2, r6]
   13260:	cmp	r7, #13
   13264:	cmpne	r7, #10
   13268:	bne	13284 <rb_linebuf_get+0x1a4>
   1326c:	sub	r7, r6, #1
   13270:	cmp	r3, r6
   13274:	mov	r6, r7
   13278:	bne	1325c <rb_linebuf_get+0x17c>
   1327c:	mov	r6, #0
   13280:	b	13178 <rb_linebuf_get+0x98>
   13284:	sub	r6, r6, r0
   13288:	b	13178 <rb_linebuf_get+0x98>
   1328c:	.word	0x0002f0a4
   13290:	.word	0x0002f08c

00013294 <rb_linebuf_attach>:
   13294:	push	{r4, r5, r6, r7, fp, lr}
   13298:	add	fp, sp, #16
   1329c:	ldr	r5, [r1]
   132a0:	cmp	r5, #0
   132a4:	beq	1333c <rb_linebuf_attach+0xa8>
   132a8:	mov	r4, r0
   132ac:	mov	r6, #0
   132b0:	b	13308 <rb_linebuf_attach+0x74>
   132b4:	add	r1, r1, #8
   132b8:	str	r0, [r1]
   132bc:	str	r0, [r4, #4]
   132c0:	add	r2, r4, #8
   132c4:	ldm	r2, {r0, r1, r2}
   132c8:	ldr	r3, [r4, #24]
   132cc:	add	r0, r0, #1
   132d0:	str	r0, [r4, #8]
   132d4:	add	r0, r2, #1
   132d8:	add	r2, r3, #1
   132dc:	str	r0, [r4, #16]
   132e0:	ldr	r0, [r7, #1028]	; 0x404
   132e4:	str	r2, [r4, #24]
   132e8:	add	r0, r1, r0
   132ec:	str	r0, [r4, #12]
   132f0:	ldr	r0, [r7, #1032]	; 0x408
   132f4:	add	r0, r0, #1
   132f8:	str	r0, [r7, #1032]	; 0x408
   132fc:	ldr	r5, [r5, #8]
   13300:	cmp	r5, #0
   13304:	beq	1333c <rb_linebuf_attach+0xa8>
   13308:	ldr	r7, [r5]
   1330c:	bl	53c4 <rb_make_rb_dlink_node@plt>
   13310:	str	r6, [r0, #8]
   13314:	str	r7, [r0]
   13318:	ldr	r1, [r4, #4]
   1331c:	cmp	r1, #0
   13320:	str	r1, [r0, #4]
   13324:	bne	132b4 <rb_linebuf_attach+0x20>
   13328:	ldr	r1, [r4]
   1332c:	cmp	r1, #0
   13330:	bne	132bc <rb_linebuf_attach+0x28>
   13334:	mov	r1, r4
   13338:	b	132b8 <rb_linebuf_attach+0x24>
   1333c:	pop	{r4, r5, r6, r7, fp, pc}

00013340 <rb_linebuf_put>:
   13340:	push	{r4, r5, r6, sl, fp, lr}
   13344:	add	fp, sp, #16
   13348:	mov	r4, r0
   1334c:	ldr	r0, [pc, #240]	; 13444 <rb_linebuf_put+0x104>
   13350:	mov	r6, r1
   13354:	ldr	r0, [pc, r0]
   13358:	bl	51cc <rb_bh_alloc@plt>
   1335c:	mov	r5, r0
   13360:	cmp	r0, #0
   13364:	beq	133e8 <rb_linebuf_put+0xa8>
   13368:	ldr	r0, [pc, #216]	; 13448 <rb_linebuf_put+0x108>
   1336c:	add	r0, pc, r0
   13370:	ldr	r1, [r0, #4]
   13374:	add	r1, r1, #1
   13378:	str	r1, [r0, #4]
   1337c:	bl	53c4 <rb_make_rb_dlink_node@plt>
   13380:	mov	r1, #0
   13384:	str	r1, [r0, #8]
   13388:	str	r5, [r0]
   1338c:	ldr	r1, [r4, #4]
   13390:	cmp	r1, #0
   13394:	str	r1, [r0, #4]
   13398:	beq	133a8 <rb_linebuf_put+0x68>
   1339c:	add	r1, r1, #8
   133a0:	str	r0, [r1]
   133a4:	b	133b4 <rb_linebuf_put+0x74>
   133a8:	ldr	r1, [r4]
   133ac:	cmp	r1, #0
   133b0:	beq	1343c <rb_linebuf_put+0xfc>
   133b4:	str	r0, [r4, #4]
   133b8:	ldr	r0, [r4, #8]
   133bc:	add	r0, r0, #1
   133c0:	str	r0, [r4, #8]
   133c4:	ldr	r0, [r5, #1032]	; 0x408
   133c8:	add	r0, r0, #1
   133cc:	str	r0, [r5, #1032]	; 0x408
   133d0:	ldr	r0, [r4, #16]
   133d4:	ldr	r1, [r4, #24]
   133d8:	add	r0, r0, #1
   133dc:	str	r0, [r4, #16]
   133e0:	add	r0, r1, #1
   133e4:	str	r0, [r4, #24]
   133e8:	mov	r0, r5
   133ec:	movw	r1, #1023	; 0x3ff
   133f0:	mov	r2, r6
   133f4:	bl	4f38 <rb_fsnprint@plt>
   133f8:	bic	r0, r0, r0, asr #31
   133fc:	movw	r1, #1022	; 0x3fe
   13400:	mov	r2, #0
   13404:	cmp	r0, r1
   13408:	movcc	r1, r0
   1340c:	add	r0, r1, #2
   13410:	add	r1, r5, r1
   13414:	strb	r2, [r5, r0]
   13418:	movw	r2, #2573	; 0xa0d
   1341c:	strh	r2, [r1]
   13420:	mov	r1, #1
   13424:	strb	r1, [r5, #1025]	; 0x401
   13428:	str	r0, [r5, #1028]	; 0x404
   1342c:	ldr	r1, [r4, #12]
   13430:	add	r0, r1, r0
   13434:	str	r0, [r4, #12]
   13438:	pop	{r4, r5, r6, sl, fp, pc}
   1343c:	mov	r1, r4
   13440:	b	133a0 <rb_linebuf_put+0x60>
   13444:	.word	0x0002ef74
   13448:	.word	0x0002ef5c

0001344c <rb_linebuf_flush>:
   1344c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13450:	add	fp, sp, #28
   13454:	sub	sp, sp, #4
   13458:	mov	r4, r1
   1345c:	mov	r5, r0
   13460:	bl	4d7c <rb_fd_ssl@plt>
   13464:	cmp	r0, #0
   13468:	beq	134ec <rb_linebuf_flush+0xa0>
   1346c:	ldr	r0, [r4]
   13470:	cmp	r0, #0
   13474:	beq	13684 <rb_linebuf_flush+0x238>
   13478:	ldr	r6, [r0]
   1347c:	ldrb	r0, [r6, #1025]	; 0x401
   13480:	cmp	r0, #0
   13484:	beq	13684 <rb_linebuf_flush+0x238>
   13488:	ldr	r0, [r4, #20]
   1348c:	ldr	r2, [r6, #1028]	; 0x404
   13490:	add	r1, r6, r0
   13494:	sub	r2, r2, r0
   13498:	mov	r0, r5
   1349c:	bl	4efc <rb_write@plt>
   134a0:	mov	r8, r0
   134a4:	cmp	r0, #1
   134a8:	blt	13694 <rb_linebuf_flush+0x248>
   134ac:	ldr	r0, [r4, #20]
   134b0:	add	r0, r0, r8
   134b4:	str	r0, [r4, #20]
   134b8:	ldr	r1, [r6, #1028]	; 0x404
   134bc:	cmp	r0, r1
   134c0:	bne	13694 <rb_linebuf_flush+0x248>
   134c4:	mov	r0, #0
   134c8:	str	r0, [r4, #20]
   134cc:	ldr	r0, [r4]
   134d0:	ldr	r1, [r0, #8]
   134d4:	ldr	r2, [r0, #4]
   134d8:	cmp	r1, #0
   134dc:	beq	136c8 <rb_linebuf_flush+0x27c>
   134e0:	str	r2, [r1, #4]
   134e4:	ldr	r2, [r0, #4]
   134e8:	b	136cc <rb_linebuf_flush+0x280>
   134ec:	ldr	r6, [pc, #620]	; 13760 <rb_linebuf_flush+0x314>
   134f0:	mov	r1, #0
   134f4:	mov	r2, #8192	; 0x2000
   134f8:	add	r6, pc, r6
   134fc:	mov	r0, r6
   13500:	bl	4ed8 <memset@plt>
   13504:	ldr	r0, [r4]
   13508:	cmp	r0, #0
   1350c:	beq	13684 <rb_linebuf_flush+0x238>
   13510:	ldr	r1, [r0]
   13514:	ldrb	r2, [r1, #1025]	; 0x401
   13518:	cmp	r2, #0
   1351c:	beq	13684 <rb_linebuf_flush+0x238>
   13520:	ldr	r2, [r4, #20]
   13524:	add	r8, r1, r2
   13528:	ldr	r1, [r1, #1028]	; 0x404
   1352c:	sub	r9, r1, r2
   13530:	add	r1, r6, #8
   13534:	strd	r8, [r6]
   13538:	mov	r6, #1
   1353c:	ldr	r0, [r0, #8]
   13540:	cmp	r0, #0
   13544:	ldrne	r2, [r0]
   13548:	ldrbne	r3, [r2, #1025]	; 0x401
   1354c:	cmpne	r3, #0
   13550:	beq	13574 <rb_linebuf_flush+0x128>
   13554:	str	r2, [r1]
   13558:	add	r6, r6, #1
   1355c:	ldr	r2, [r2, #1028]	; 0x404
   13560:	cmp	r6, #1024	; 0x400
   13564:	str	r2, [r1, #4]
   13568:	add	r1, r1, #8
   1356c:	bne	1353c <rb_linebuf_flush+0xf0>
   13570:	mov	r6, #1024	; 0x400
   13574:	ldr	r1, [pc, #488]	; 13764 <rb_linebuf_flush+0x318>
   13578:	mov	r0, r5
   1357c:	mov	r2, r6
   13580:	add	r1, pc, r1
   13584:	bl	5328 <rb_writev@plt>
   13588:	mov	r8, r0
   1358c:	cmp	r0, #1
   13590:	blt	13694 <rb_linebuf_flush+0x248>
   13594:	ldr	r5, [r4]
   13598:	ldr	r0, [r4, #20]
   1359c:	mov	r9, #0
   135a0:	str	r8, [sp]
   135a4:	b	135bc <rb_linebuf_flush+0x170>
   135a8:	mov	r0, #0
   135ac:	sub	r8, r8, sl
   135b0:	subs	r6, r6, #1
   135b4:	str	r0, [r4, #20]
   135b8:	beq	136b8 <rb_linebuf_flush+0x26c>
   135bc:	ldr	r7, [r5]
   135c0:	ldr	r1, [r7, #1028]	; 0x404
   135c4:	sub	sl, r1, r0
   135c8:	cmp	r8, sl
   135cc:	blt	136a0 <rb_linebuf_flush+0x254>
   135d0:	ldr	r0, [r4]
   135d4:	ldr	r5, [r5, #8]
   135d8:	ldr	r1, [r0, #8]
   135dc:	ldr	r2, [r0, #4]
   135e0:	cmp	r1, #0
   135e4:	beq	135f4 <rb_linebuf_flush+0x1a8>
   135e8:	str	r2, [r1, #4]
   135ec:	ldr	r2, [r0, #4]
   135f0:	b	135f8 <rb_linebuf_flush+0x1ac>
   135f4:	str	r2, [r4, #4]
   135f8:	cmp	r2, #0
   135fc:	mov	r3, r4
   13600:	addne	r3, r2, #8
   13604:	str	r1, [r3]
   13608:	str	r9, [r0, #4]
   1360c:	str	r9, [r0, #8]
   13610:	ldr	r1, [r4, #8]
   13614:	sub	r1, r1, #1
   13618:	str	r1, [r4, #8]
   1361c:	bl	50d0 <rb_free_rb_dlink_node@plt>
   13620:	ldr	r1, [r4, #16]
   13624:	ldr	r2, [r4, #24]
   13628:	ldr	r0, [r4, #12]
   1362c:	sub	r1, r1, #1
   13630:	sub	r2, r2, #1
   13634:	str	r1, [r4, #16]
   13638:	ldr	r1, [r7, #1028]	; 0x404
   1363c:	str	r2, [r4, #24]
   13640:	sub	r0, r0, r1
   13644:	str	r0, [r4, #12]
   13648:	ldr	r0, [r7, #1032]	; 0x408
   1364c:	subs	r0, r0, #1
   13650:	str	r0, [r7, #1032]	; 0x408
   13654:	bne	135a8 <rb_linebuf_flush+0x15c>
   13658:	ldr	r0, [pc, #264]	; 13768 <rb_linebuf_flush+0x31c>
   1365c:	add	r0, pc, r0
   13660:	mov	r1, r0
   13664:	ldr	r0, [r0, #4]
   13668:	sub	r0, r0, #1
   1366c:	str	r0, [r1, #4]
   13670:	mov	r1, r7
   13674:	ldr	r0, [pc, #240]	; 1376c <rb_linebuf_flush+0x320>
   13678:	ldr	r0, [pc, r0]
   1367c:	bl	5154 <rb_bh_free@plt>
   13680:	b	135a8 <rb_linebuf_flush+0x15c>
   13684:	bl	552c <__errno_location@plt>
   13688:	mov	r1, #11
   1368c:	mvn	r8, #0
   13690:	str	r1, [r0]
   13694:	mov	r0, r8
   13698:	sub	sp, fp, #28
   1369c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136a0:	add	r0, r0, r8
   136a4:	ldr	r8, [sp]
   136a8:	str	r0, [r4, #20]
   136ac:	mov	r0, r8
   136b0:	sub	sp, fp, #28
   136b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136b8:	ldr	r8, [sp]
   136bc:	mov	r0, r8
   136c0:	sub	sp, fp, #28
   136c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136c8:	str	r2, [r4, #4]
   136cc:	cmp	r2, #0
   136d0:	mov	r3, r4
   136d4:	addne	r3, r2, #8
   136d8:	str	r1, [r3]
   136dc:	mov	r1, #0
   136e0:	str	r1, [r0, #4]
   136e4:	str	r1, [r0, #8]
   136e8:	ldr	r1, [r4, #8]
   136ec:	sub	r1, r1, #1
   136f0:	str	r1, [r4, #8]
   136f4:	bl	50d0 <rb_free_rb_dlink_node@plt>
   136f8:	ldr	r1, [r4, #16]
   136fc:	ldr	r2, [r4, #24]
   13700:	ldr	r0, [r4, #12]
   13704:	sub	r1, r1, #1
   13708:	sub	r2, r2, #1
   1370c:	str	r1, [r4, #16]
   13710:	ldr	r1, [r6, #1028]	; 0x404
   13714:	str	r2, [r4, #24]
   13718:	sub	r0, r0, r1
   1371c:	str	r0, [r4, #12]
   13720:	ldr	r0, [r6, #1032]	; 0x408
   13724:	subs	r0, r0, #1
   13728:	str	r0, [r6, #1032]	; 0x408
   1372c:	bne	13694 <rb_linebuf_flush+0x248>
   13730:	ldr	r0, [pc, #56]	; 13770 <rb_linebuf_flush+0x324>
   13734:	add	r0, pc, r0
   13738:	ldr	r1, [r0, #4]
   1373c:	sub	r1, r1, #1
   13740:	str	r1, [r0, #4]
   13744:	mov	r1, r6
   13748:	ldr	r0, [pc, #36]	; 13774 <rb_linebuf_flush+0x328>
   1374c:	ldr	r0, [pc, r0]
   13750:	bl	5154 <rb_bh_free@plt>
   13754:	mov	r0, r8
   13758:	sub	sp, fp, #28
   1375c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13760:	.word	0x0002cdd0
   13764:	.word	0x0002cd48
   13768:	.word	0x0002ec6c
   1376c:	.word	0x0002ec50
   13770:	.word	0x0002eb94
   13774:	.word	0x0002eb7c

00013778 <rb_count_rb_linebuf_memory>:
   13778:	push	{fp, lr}
   1377c:	mov	fp, sp
   13780:	sub	sp, sp, #8
   13784:	mov	r3, r1
   13788:	mov	r1, r0
   1378c:	ldr	r0, [pc, #24]	; 137ac <rb_count_rb_linebuf_memory+0x34>
   13790:	mov	r2, #0
   13794:	ldr	r0, [pc, r0]
   13798:	str	r2, [sp]
   1379c:	mov	r2, #0
   137a0:	bl	5550 <rb_bh_usage@plt>
   137a4:	mov	sp, fp
   137a8:	pop	{fp, pc}
   137ac:	.word	0x0002eb34

000137b0 <rb_init_rb_dlink_nodes>:
   137b0:	push	{fp, lr}
   137b4:	mov	fp, sp
   137b8:	ldr	r2, [pc, #36]	; 137e4 <rb_init_rb_dlink_nodes+0x34>
   137bc:	mov	r1, r0
   137c0:	mov	r0, #12
   137c4:	add	r2, pc, r2
   137c8:	bl	5304 <rb_bh_create@plt>
   137cc:	ldr	r1, [pc, #20]	; 137e8 <rb_init_rb_dlink_nodes+0x38>
   137d0:	cmp	r0, #0
   137d4:	add	r1, pc, r1
   137d8:	str	r0, [r1]
   137dc:	popne	{fp, pc}
   137e0:	bl	51fc <rb_outofmemory@plt>
   137e4:	.word	0x0000841f
   137e8:	.word	0x0002eafc

000137ec <rb_make_rb_dlink_node>:
   137ec:	ldr	r0, [pc, #4]	; 137f8 <rb_make_rb_dlink_node+0xc>
   137f0:	ldr	r0, [pc, r0]
   137f4:	b	51cc <rb_bh_alloc@plt>
   137f8:	.word	0x0002eae0

000137fc <rb_free_rb_dlink_node>:
   137fc:	mov	r1, r0
   13800:	ldr	r0, [pc, #4]	; 1380c <rb_free_rb_dlink_node+0x10>
   13804:	ldr	r0, [pc, r0]
   13808:	b	5154 <rb_bh_free@plt>
   1380c:	.word	0x0002eacc

00013810 <rb_string_to_array>:
   13810:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13814:	add	fp, sp, #24
   13818:	mov	r4, r1
   1381c:	mov	r1, r0
   13820:	mov	r0, #0
   13824:	cmp	r1, #0
   13828:	beq	138e4 <rb_string_to_array+0xd4>
   1382c:	ldrb	r3, [r1]
   13830:	cmp	r3, #0
   13834:	beq	138e4 <rb_string_to_array+0xd4>
   13838:	uxtb	r7, r3
   1383c:	cmp	r7, #32
   13840:	bne	13854 <rb_string_to_array+0x44>
   13844:	ldrb	r3, [r1, #1]!
   13848:	uxtb	r7, r3
   1384c:	cmp	r7, #32
   13850:	beq	13844 <rb_string_to_array+0x34>
   13854:	cmp	r7, #0
   13858:	beq	138e4 <rb_string_to_array+0xd4>
   1385c:	sub	r6, r2, #1
   13860:	mov	r8, #0
   13864:	mov	r0, #0
   13868:	mov	r5, r0
   1386c:	uxtb	r0, r3
   13870:	cmp	r0, #58	; 0x3a
   13874:	beq	138e8 <rb_string_to_array+0xd8>
   13878:	str	r1, [r4, r5, lsl #2]
   1387c:	mov	r0, r1
   13880:	mov	r1, #32
   13884:	bl	4e6c <strchr@plt>
   13888:	mov	r2, r0
   1388c:	add	r0, r5, #1
   13890:	cmp	r2, #0
   13894:	beq	138e4 <rb_string_to_array+0xd4>
   13898:	mov	r7, r2
   1389c:	strb	r8, [r7], #1
   138a0:	mov	r1, r7
   138a4:	ldrb	r3, [r1]
   138a8:	cmp	r3, #32
   138ac:	bne	138c0 <rb_string_to_array+0xb0>
   138b0:	add	r1, r1, #1
   138b4:	ldrb	r3, [r1]
   138b8:	cmp	r3, #32
   138bc:	beq	138b0 <rb_string_to_array+0xa0>
   138c0:	cmp	r3, #0
   138c4:	beq	138e4 <rb_string_to_array+0xd4>
   138c8:	cmp	r0, r6
   138cc:	blt	13868 <rb_string_to_array+0x58>
   138d0:	ldrb	r1, [r2, #1]
   138d4:	cmp	r1, #58	; 0x3a
   138d8:	addeq	r7, r2, #2
   138dc:	str	r7, [r4, r0, lsl #2]
   138e0:	add	r0, r5, #2
   138e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138e8:	add	r0, r1, #1
   138ec:	str	r0, [r4, r5, lsl #2]
   138f0:	add	r0, r5, #1
   138f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000138f8 <rb_strcasecmp>:
   138f8:	b	4e84 <strcasecmp@plt>

000138fc <rb_strncasecmp>:
   138fc:	b	51f0 <strncasecmp@plt>

00013900 <rb_strcasestr>:
   13900:	b	4cf8 <strcasestr@plt>

00013904 <rb_strlcat>:
   13904:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13908:	add	fp, sp, #24
   1390c:	mov	r4, r2
   13910:	mov	r8, r1
   13914:	mov	r9, r0
   13918:	bl	5070 <strlen@plt>
   1391c:	mov	r7, r0
   13920:	sub	r6, r4, r0
   13924:	mov	r0, r8
   13928:	bl	5070 <strlen@plt>
   1392c:	cmp	r0, r6
   13930:	mov	r4, r0
   13934:	mov	r5, r0
   13938:	mov	r1, r8
   1393c:	subcs	r4, r6, #1
   13940:	add	r6, r9, r7
   13944:	mov	r0, r6
   13948:	mov	r2, r4
   1394c:	bl	5094 <memcpy@plt>
   13950:	mov	r0, #0
   13954:	strb	r0, [r6, r4]
   13958:	add	r0, r5, r7
   1395c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00013960 <rb_strlcpy>:
   13960:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13964:	add	fp, sp, #24
   13968:	mov	r8, r0
   1396c:	mov	r0, r1
   13970:	mov	r7, r2
   13974:	mov	r6, r1
   13978:	bl	5070 <strlen@plt>
   1397c:	mov	r4, r0
   13980:	cmp	r7, #0
   13984:	beq	139ac <rb_strlcpy+0x4c>
   13988:	cmp	r4, r7
   1398c:	mov	r5, r4
   13990:	mov	r0, r8
   13994:	mov	r1, r6
   13998:	subcs	r5, r7, #1
   1399c:	mov	r2, r5
   139a0:	bl	5094 <memcpy@plt>
   139a4:	mov	r0, #0
   139a8:	strb	r0, [r8, r5]
   139ac:	mov	r0, r4
   139b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000139b4 <rb_strnlen>:
   139b4:	b	5280 <strnlen@plt>

000139b8 <rb_snprintf_append>:
   139b8:	sub	sp, sp, #4
   139bc:	push	{r4, r5, r6, r7, fp, lr}
   139c0:	add	fp, sp, #16
   139c4:	sub	sp, sp, #4
   139c8:	cmp	r1, #0
   139cc:	str	r3, [fp, #8]
   139d0:	beq	13a08 <rb_snprintf_append+0x50>
   139d4:	mov	r4, r2
   139d8:	mov	r6, r1
   139dc:	mov	r5, r0
   139e0:	bl	5070 <strlen@plt>
   139e4:	cmp	r0, r6
   139e8:	ble	13a1c <rb_snprintf_append+0x64>
   139ec:	sub	r0, r6, #1
   139f0:	mov	r1, #0
   139f4:	strb	r1, [r5, r0]
   139f8:	sub	sp, fp, #16
   139fc:	pop	{r4, r5, r6, r7, fp, lr}
   13a00:	add	sp, sp, #4
   13a04:	bx	lr
   13a08:	mvn	r0, #0
   13a0c:	sub	sp, fp, #16
   13a10:	pop	{r4, r5, r6, r7, fp, lr}
   13a14:	add	sp, sp, #4
   13a18:	bx	lr
   13a1c:	mov	r7, r0
   13a20:	add	r3, fp, #8
   13a24:	add	r0, r5, r0
   13a28:	mov	r2, r4
   13a2c:	sub	r1, r6, r7
   13a30:	str	r3, [sp]
   13a34:	bl	4e18 <vsnprintf@plt>
   13a38:	cmp	r0, #0
   13a3c:	addpl	r0, r0, r7
   13a40:	sub	sp, fp, #16
   13a44:	pop	{r4, r5, r6, r7, fp, lr}
   13a48:	add	sp, sp, #4
   13a4c:	bx	lr

00013a50 <rb_snprintf_try_append>:
   13a50:	sub	sp, sp, #4
   13a54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a58:	add	fp, sp, #24
   13a5c:	sub	sp, sp, #4
   13a60:	mvn	r4, #0
   13a64:	cmp	r1, #0
   13a68:	str	r3, [fp, #8]
   13a6c:	beq	13adc <rb_snprintf_try_append+0x8c>
   13a70:	mov	r9, r2
   13a74:	mov	r5, r1
   13a78:	mov	r6, r0
   13a7c:	bl	5070 <strlen@plt>
   13a80:	cmp	r0, r5
   13a84:	ble	13a98 <rb_snprintf_try_append+0x48>
   13a88:	add	r0, r5, r6
   13a8c:	mov	r1, #0
   13a90:	strb	r1, [r0, #-1]
   13a94:	b	13adc <rb_snprintf_try_append+0x8c>
   13a98:	add	r8, r6, r0
   13a9c:	add	r3, fp, #8
   13aa0:	mov	r7, r0
   13aa4:	sub	r1, r5, r0
   13aa8:	mov	r2, r9
   13aac:	mov	r0, r8
   13ab0:	str	r3, [sp]
   13ab4:	bl	4e18 <vsnprintf@plt>
   13ab8:	mov	r4, r0
   13abc:	cmp	r0, #0
   13ac0:	bmi	13adc <rb_snprintf_try_append+0x8c>
   13ac4:	add	r4, r4, r7
   13ac8:	sub	r0, r5, #1
   13acc:	cmp	r4, r0
   13ad0:	movgt	r0, #0
   13ad4:	mvngt	r4, #0
   13ad8:	strbgt	r0, [r8]
   13adc:	mov	r0, r4
   13ae0:	sub	sp, fp, #24
   13ae4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ae8:	add	sp, sp, #4
   13aec:	bx	lr

00013af0 <rb_basename>:
   13af0:	push	{r4, sl, fp, lr}
   13af4:	add	fp, sp, #8
   13af8:	mov	r1, #47	; 0x2f
   13afc:	mov	r4, r0
   13b00:	bl	4ef0 <strrchr@plt>
   13b04:	cmp	r0, #0
   13b08:	addne	r4, r0, #1
   13b0c:	mov	r0, r4
   13b10:	bl	5070 <strlen@plt>
   13b14:	add	r0, r0, #1
   13b18:	bl	5214 <malloc@plt>
   13b1c:	cmp	r0, #0
   13b20:	beq	13b30 <rb_basename+0x40>
   13b24:	mov	r1, r4
   13b28:	pop	{r4, sl, fp, lr}
   13b2c:	b	5124 <strcpy@plt>
   13b30:	bl	51fc <rb_outofmemory@plt>

00013b34 <rb_dirname>:
   13b34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b38:	add	fp, sp, #24
   13b3c:	mov	r1, #47	; 0x2f
   13b40:	mov	r4, r0
   13b44:	bl	4ef0 <strrchr@plt>
   13b48:	cmp	r0, #0
   13b4c:	beq	13bc8 <rb_dirname+0x94>
   13b50:	cmp	r0, r4
   13b54:	bls	13b70 <rb_dirname+0x3c>
   13b58:	ldrb	r1, [r0]
   13b5c:	cmp	r1, #47	; 0x2f
   13b60:	bne	13b70 <rb_dirname+0x3c>
   13b64:	sub	r0, r0, #1
   13b68:	cmp	r0, r4
   13b6c:	bhi	13b58 <rb_dirname+0x24>
   13b70:	sub	r8, r0, r4
   13b74:	add	r6, r8, #2
   13b78:	mov	r0, r6
   13b7c:	bl	5214 <malloc@plt>
   13b80:	cmp	r0, #0
   13b84:	beq	13be8 <rb_dirname+0xb4>
   13b88:	mov	r5, r0
   13b8c:	mov	r0, r4
   13b90:	bl	5070 <strlen@plt>
   13b94:	cmp	r6, #0
   13b98:	beq	13bc0 <rb_dirname+0x8c>
   13b9c:	cmp	r0, r6
   13ba0:	mov	r7, r0
   13ba4:	mov	r0, r5
   13ba8:	mov	r1, r4
   13bac:	addcs	r7, r8, #1
   13bb0:	mov	r2, r7
   13bb4:	bl	5094 <memcpy@plt>
   13bb8:	mov	r0, #0
   13bbc:	strb	r0, [r5, r7]
   13bc0:	mov	r0, r5
   13bc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bc8:	mov	r0, #2
   13bcc:	bl	5214 <malloc@plt>
   13bd0:	cmp	r0, #0
   13bd4:	movne	r5, r0
   13bd8:	movne	r0, #46	; 0x2e
   13bdc:	strhne	r0, [r5]
   13be0:	movne	r0, r5
   13be4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   13be8:	bl	51fc <rb_outofmemory@plt>

00013bec <rb_fsnprint>:
   13bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bf0:	add	fp, sp, #28
   13bf4:	sub	sp, sp, #12
   13bf8:	cmp	r2, #0
   13bfc:	str	r0, [sp, #4]
   13c00:	beq	13d38 <rb_fsnprint+0x14c>
   13c04:	sub	r0, r1, #1
   13c08:	mov	r4, r2
   13c0c:	mov	r8, r1
   13c10:	mov	r9, #0
   13c14:	str	r1, [sp]
   13c18:	str	r0, [sp, #8]
   13c1c:	mov	r0, r1
   13c20:	ldr	r7, [r4]
   13c24:	cmp	r7, #0
   13c28:	beq	13c38 <rb_fsnprint+0x4c>
   13c2c:	sub	r0, r8, r9
   13c30:	cmp	r7, r0
   13c34:	bls	13c44 <rb_fsnprint+0x58>
   13c38:	cmp	r0, #0
   13c3c:	mov	r7, r0
   13c40:	beq	13d58 <rb_fsnprint+0x16c>
   13c44:	ldr	r6, [r4, #4]
   13c48:	cmp	r6, #0
   13c4c:	beq	13c88 <rb_fsnprint+0x9c>
   13c50:	ldr	r0, [sp, #4]
   13c54:	add	sl, r0, r9
   13c58:	ldr	r0, [r4, #12]
   13c5c:	cmp	r0, #0
   13c60:	beq	13cb8 <rb_fsnprint+0xcc>
   13c64:	ldr	r3, [r0]
   13c68:	mov	r0, sl
   13c6c:	mov	r1, r7
   13c70:	mov	r2, r6
   13c74:	bl	4e18 <vsnprintf@plt>
   13c78:	mov	r5, r0
   13c7c:	cmp	r5, #0
   13c80:	bpl	13cfc <rb_fsnprint+0x110>
   13c84:	b	13d2c <rb_fsnprint+0x140>
   13c88:	ldr	r3, [r4, #8]
   13c8c:	cmp	r3, #0
   13c90:	beq	13cf8 <rb_fsnprint+0x10c>
   13c94:	ldr	r0, [sp, #4]
   13c98:	ldr	r2, [r4, #12]
   13c9c:	mov	r1, r7
   13ca0:	add	r0, r0, r9
   13ca4:	blx	r3
   13ca8:	mov	r5, r0
   13cac:	cmp	r5, #0
   13cb0:	bpl	13cfc <rb_fsnprint+0x110>
   13cb4:	b	13d2c <rb_fsnprint+0x140>
   13cb8:	mov	r0, r6
   13cbc:	bl	5070 <strlen@plt>
   13cc0:	cmp	r0, r7
   13cc4:	mov	r8, r0
   13cc8:	mov	r5, r0
   13ccc:	mov	r0, sl
   13cd0:	mov	r1, r6
   13cd4:	subcs	r8, r7, #1
   13cd8:	mov	r2, r8
   13cdc:	bl	5094 <memcpy@plt>
   13ce0:	mov	r0, #0
   13ce4:	strb	r0, [sl, r8]
   13ce8:	ldr	r8, [sp]
   13cec:	cmp	r5, #0
   13cf0:	bpl	13cfc <rb_fsnprint+0x110>
   13cf4:	b	13d2c <rb_fsnprint+0x140>
   13cf8:	mov	r5, #0
   13cfc:	sub	r0, r7, #1
   13d00:	cmp	r5, r0
   13d04:	movls	r0, r5
   13d08:	add	r9, r0, r9
   13d0c:	ldr	r0, [sp, #8]
   13d10:	cmp	r9, r0
   13d14:	bcs	13d48 <rb_fsnprint+0x15c>
   13d18:	ldr	r4, [r4, #16]
   13d1c:	sub	r0, r7, r5
   13d20:	mov	r5, r9
   13d24:	cmp	r4, #0
   13d28:	bne	13c20 <rb_fsnprint+0x34>
   13d2c:	mov	r0, r5
   13d30:	sub	sp, fp, #28
   13d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d38:	mov	r5, #0
   13d3c:	mov	r0, r5
   13d40:	sub	sp, fp, #28
   13d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d48:	ldr	r5, [sp, #8]
   13d4c:	mov	r0, r5
   13d50:	sub	sp, fp, #28
   13d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d58:	mov	r5, r9
   13d5c:	mov	r0, r5
   13d60:	sub	sp, fp, #28
   13d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013d68 <rb_fsnprintf>:
   13d68:	push	{fp, lr}
   13d6c:	mov	fp, sp
   13d70:	sub	sp, sp, #24
   13d74:	str	r2, [sp, #16]
   13d78:	sub	r2, fp, #4
   13d7c:	add	ip, fp, #8
   13d80:	str	r2, [sp, #12]
   13d84:	mov	r2, #0
   13d88:	str	ip, [fp, #-4]
   13d8c:	str	r2, [sp, #8]
   13d90:	stm	sp, {r2, r3}
   13d94:	mov	r2, sp
   13d98:	bl	4f38 <rb_fsnprint@plt>
   13d9c:	mov	sp, fp
   13da0:	pop	{fp, pc}

00013da4 <rb_helper_child>:
   13da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13da8:	add	fp, sp, #28
   13dac:	sub	sp, sp, #28
   13db0:	str	r2, [sp, #24]
   13db4:	mov	r4, r0
   13db8:	mov	r8, r3
   13dbc:	mov	r9, r1
   13dc0:	ldr	r0, [pc, #528]	; 13fd8 <rb_helper_child+0x234>
   13dc4:	add	r0, pc, r0
   13dc8:	bl	4e54 <getenv@plt>
   13dcc:	mov	r7, r0
   13dd0:	ldr	r0, [pc, #516]	; 13fdc <rb_helper_child+0x238>
   13dd4:	add	r0, pc, r0
   13dd8:	bl	4e54 <getenv@plt>
   13ddc:	mov	r5, r0
   13de0:	ldr	r0, [pc, #504]	; 13fe0 <rb_helper_child+0x23c>
   13de4:	add	r0, pc, r0
   13de8:	bl	4e54 <getenv@plt>
   13dec:	mov	sl, #0
   13df0:	cmp	r7, #0
   13df4:	beq	13e08 <rb_helper_child+0x64>
   13df8:	cmp	r5, #0
   13dfc:	movne	r6, r0
   13e00:	cmpne	r0, #0
   13e04:	bne	13e14 <rb_helper_child+0x70>
   13e08:	mov	r0, sl
   13e0c:	sub	sp, fp, #28
   13e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e14:	mov	r0, #1
   13e18:	mov	r1, #84	; 0x54
   13e1c:	str	r8, [sp, #12]
   13e20:	str	r4, [sp, #16]
   13e24:	bl	4e9c <calloc@plt>
   13e28:	cmp	r0, #0
   13e2c:	beq	13fd4 <rb_helper_child+0x230>
   13e30:	mov	sl, r0
   13e34:	mov	r0, r7
   13e38:	mov	r1, #0
   13e3c:	mov	r2, #10
   13e40:	mov	r4, #0
   13e44:	bl	510c <strtol@plt>
   13e48:	mov	r7, r0
   13e4c:	mov	r0, r5
   13e50:	mov	r1, #0
   13e54:	mov	r2, #10
   13e58:	bl	510c <strtol@plt>
   13e5c:	mov	r5, r0
   13e60:	mov	r0, r6
   13e64:	mov	r1, #0
   13e68:	mov	r2, #10
   13e6c:	bl	510c <strtol@plt>
   13e70:	mov	r8, r0
   13e74:	cmp	r0, #1
   13e78:	bge	13e8c <rb_helper_child+0xe8>
   13e7c:	b	13ea4 <rb_helper_child+0x100>
   13e80:	add	r4, r4, #1
   13e84:	cmp	r8, r4
   13e88:	beq	13ea4 <rb_helper_child+0x100>
   13e8c:	cmp	r7, r4
   13e90:	cmpne	r5, r4
   13e94:	beq	13e80 <rb_helper_child+0xdc>
   13e98:	mov	r0, r4
   13e9c:	bl	51c0 <close@plt>
   13ea0:	b	13e80 <rb_helper_child+0xdc>
   13ea4:	str	r9, [sp, #20]
   13ea8:	mov	r1, #2
   13eac:	ldr	r0, [pc, #304]	; 13fe4 <rb_helper_child+0x240>
   13eb0:	add	r0, pc, r0
   13eb4:	bl	4c5c <open@plt>
   13eb8:	cmp	r7, #0
   13ebc:	mov	r9, r0
   13ec0:	cmpne	r5, #0
   13ec4:	bne	13f94 <rb_helper_child+0x1f0>
   13ec8:	cmp	r7, #1
   13ecc:	cmpne	r5, #1
   13ed0:	bne	13fac <rb_helper_child+0x208>
   13ed4:	cmp	r7, #2
   13ed8:	cmpne	r5, #2
   13edc:	bne	13fc4 <rb_helper_child+0x220>
   13ee0:	ldr	r4, [fp, #20]
   13ee4:	ldr	r6, [fp, #16]
   13ee8:	ldr	r2, [fp, #8]
   13eec:	cmp	r9, #3
   13ef0:	blt	13f04 <rb_helper_child+0x160>
   13ef4:	mov	r0, r9
   13ef8:	mov	r9, r2
   13efc:	bl	51c0 <close@plt>
   13f00:	mov	r2, r9
   13f04:	ldr	r0, [sp, #24]
   13f08:	ldr	r1, [sp, #12]
   13f0c:	mov	r3, #0
   13f10:	str	r8, [sp]
   13f14:	str	r6, [sp, #4]
   13f18:	str	r4, [sp, #8]
   13f1c:	bl	5298 <rb_lib_init@plt>
   13f20:	ldr	r0, [fp, #12]
   13f24:	bl	5394 <rb_linebuf_init@plt>
   13f28:	add	r0, sl, #4
   13f2c:	bl	5340 <rb_linebuf_newbuf@plt>
   13f30:	add	r0, sl, #32
   13f34:	bl	5340 <rb_linebuf_newbuf@plt>
   13f38:	ldr	r2, [pc, #168]	; 13fe8 <rb_helper_child+0x244>
   13f3c:	mov	r0, r7
   13f40:	mov	r1, #8
   13f44:	add	r2, pc, r2
   13f48:	bl	52e0 <rb_open@plt>
   13f4c:	str	r0, [sl, #60]	; 0x3c
   13f50:	mov	r0, r5
   13f54:	mov	r1, #8
   13f58:	ldr	r2, [pc, #140]	; 13fec <rb_helper_child+0x248>
   13f5c:	add	r2, pc, r2
   13f60:	bl	52e0 <rb_open@plt>
   13f64:	str	r0, [sl, #64]	; 0x40
   13f68:	ldr	r0, [sl, #60]	; 0x3c
   13f6c:	bl	4ecc <rb_set_nb@plt>
   13f70:	ldr	r0, [sl, #64]	; 0x40
   13f74:	bl	4ecc <rb_set_nb@plt>
   13f78:	ldr	r0, [sp, #16]
   13f7c:	str	r0, [sl, #76]	; 0x4c
   13f80:	ldr	r0, [sp, #20]
   13f84:	str	r0, [sl, #80]	; 0x50
   13f88:	mov	r0, sl
   13f8c:	sub	sp, fp, #28
   13f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f94:	mov	r0, r9
   13f98:	mov	r1, #0
   13f9c:	bl	5310 <dup2@plt>
   13fa0:	cmp	r7, #1
   13fa4:	cmpne	r5, #1
   13fa8:	beq	13ed4 <rb_helper_child+0x130>
   13fac:	mov	r0, r9
   13fb0:	mov	r1, #1
   13fb4:	bl	5310 <dup2@plt>
   13fb8:	cmp	r7, #2
   13fbc:	cmpne	r5, #2
   13fc0:	beq	13ee0 <rb_helper_child+0x13c>
   13fc4:	mov	r0, r9
   13fc8:	mov	r1, #2
   13fcc:	bl	5310 <dup2@plt>
   13fd0:	b	13ee0 <rb_helper_child+0x13c>
   13fd4:	bl	51fc <rb_outofmemory@plt>
   13fd8:	.word	0x00007e30
   13fdc:	.word	0x00007e24
   13fe0:	.word	0x00007e18
   13fe4:	.word	0x00007d52
   13fe8:	.word	0x00007cc8
   13fec:	.word	0x00007cc4

00013ff0 <rb_helper_start>:
   13ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ff4:	add	fp, sp, #28
   13ff8:	sub	sp, sp, #196	; 0xc4
   13ffc:	mov	r9, r0
   14000:	mov	r8, r1
   14004:	mov	r0, r1
   14008:	mov	r1, #1
   1400c:	mov	r5, r3
   14010:	mov	r6, r2
   14014:	bl	4fd4 <access@plt>
   14018:	mov	r4, #0
   1401c:	cmn	r0, #1
   14020:	beq	141d8 <rb_helper_start+0x1e8>
   14024:	mov	r0, #1
   14028:	mov	r1, #84	; 0x54
   1402c:	bl	4e9c <calloc@plt>
   14030:	cmp	r0, #0
   14034:	beq	14218 <rb_helper_start+0x228>
   14038:	ldr	r2, [pc, #476]	; 1421c <rb_helper_start+0x22c>
   1403c:	add	r7, sp, #60	; 0x3c
   14040:	mov	sl, r0
   14044:	mov	r1, #128	; 0x80
   14048:	mov	r3, r9
   1404c:	mov	r0, r7
   14050:	add	r2, pc, r2
   14054:	bl	53f4 <snprintf@plt>
   14058:	add	r0, sp, #20
   1405c:	mov	r2, r7
   14060:	add	r1, r0, #4
   14064:	bl	51e4 <rb_pipe@plt>
   14068:	cmn	r0, #1
   1406c:	ble	14204 <rb_helper_start+0x214>
   14070:	str	r5, [sp, #8]
   14074:	str	r6, [sp, #4]
   14078:	add	r5, sp, #60	; 0x3c
   1407c:	mov	r1, #128	; 0x80
   14080:	mov	r3, r9
   14084:	ldr	r2, [pc, #404]	; 14220 <rb_helper_start+0x230>
   14088:	mov	r0, r5
   1408c:	add	r2, pc, r2
   14090:	bl	53f4 <snprintf@plt>
   14094:	add	r0, sp, #12
   14098:	mov	r2, r5
   1409c:	add	r1, r0, #4
   140a0:	bl	51e4 <rb_pipe@plt>
   140a4:	cmn	r0, #1
   140a8:	ble	14204 <rb_helper_start+0x214>
   140ac:	ldr	r0, [sp, #24]
   140b0:	bl	4dac <rb_get_fd@plt>
   140b4:	ldr	r7, [pc, #360]	; 14224 <rb_helper_start+0x234>
   140b8:	add	r6, sp, #44	; 0x2c
   140bc:	mov	r3, r0
   140c0:	mov	r1, #16
   140c4:	mov	r0, r6
   140c8:	add	r7, pc, r7
   140cc:	mov	r2, r7
   140d0:	bl	53f4 <snprintf@plt>
   140d4:	ldr	r0, [sp, #12]
   140d8:	bl	4dac <rb_get_fd@plt>
   140dc:	add	r4, sp, #28
   140e0:	mov	r3, r0
   140e4:	mov	r1, #16
   140e8:	mov	r2, r7
   140ec:	mov	r0, r4
   140f0:	bl	53f4 <snprintf@plt>
   140f4:	ldr	r0, [sp, #20]
   140f8:	bl	4ecc <rb_set_nb@plt>
   140fc:	ldr	r0, [sp, #24]
   14100:	bl	4ecc <rb_set_nb@plt>
   14104:	ldr	r0, [sp, #12]
   14108:	bl	4ecc <rb_set_nb@plt>
   1410c:	ldr	r0, [sp, #16]
   14110:	bl	4ecc <rb_set_nb@plt>
   14114:	ldr	r0, [pc, #268]	; 14228 <rb_helper_start+0x238>
   14118:	mov	r1, r4
   1411c:	mov	r2, #1
   14120:	add	r0, pc, r0
   14124:	bl	4d94 <rb_setenv@plt>
   14128:	ldr	r0, [pc, #252]	; 1422c <rb_helper_start+0x23c>
   1412c:	mov	r1, r6
   14130:	mov	r2, #1
   14134:	add	r0, pc, r0
   14138:	bl	4d94 <rb_setenv@plt>
   1413c:	ldr	r0, [pc, #236]	; 14230 <rb_helper_start+0x240>
   14140:	ldr	r1, [pc, #236]	; 14234 <rb_helper_start+0x244>
   14144:	mov	r2, #1
   14148:	add	r0, pc, r0
   1414c:	add	r1, pc, r1
   14150:	bl	4d94 <rb_setenv@plt>
   14154:	ldr	r2, [pc, #220]	; 14238 <rb_helper_start+0x248>
   14158:	mov	r0, r5
   1415c:	mov	r1, #128	; 0x80
   14160:	mov	r3, r9
   14164:	add	r2, pc, r2
   14168:	bl	53f4 <snprintf@plt>
   1416c:	mov	r4, #0
   14170:	sub	r1, fp, #36	; 0x24
   14174:	mov	r0, r8
   14178:	str	r4, [fp, #-32]	; 0xffffffe0
   1417c:	str	r5, [fp, #-36]	; 0xffffffdc
   14180:	bl	53dc <rb_spawn_process@plt>
   14184:	cmn	r0, #1
   14188:	beq	141e4 <rb_helper_start+0x1f4>
   1418c:	mov	r5, r0
   14190:	ldr	r0, [sp, #24]
   14194:	bl	5100 <rb_close@plt>
   14198:	ldr	r0, [sp, #12]
   1419c:	bl	5100 <rb_close@plt>
   141a0:	add	r0, sl, #4
   141a4:	bl	5340 <rb_linebuf_newbuf@plt>
   141a8:	add	r0, sl, #32
   141ac:	bl	5340 <rb_linebuf_newbuf@plt>
   141b0:	ldr	r0, [sp, #20]
   141b4:	add	r2, sl, #60	; 0x3c
   141b8:	ldr	r1, [sp, #16]
   141bc:	stm	r2, {r0, r1, r5}
   141c0:	ldr	r0, [sp, #4]
   141c4:	str	r4, [sl, #72]	; 0x48
   141c8:	mov	r4, sl
   141cc:	str	r0, [sl, #76]	; 0x4c
   141d0:	ldr	r0, [sp, #8]
   141d4:	str	r0, [sl, #80]	; 0x50
   141d8:	mov	r0, r4
   141dc:	sub	sp, fp, #28
   141e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141e4:	ldr	r0, [sp, #20]
   141e8:	bl	5100 <rb_close@plt>
   141ec:	ldr	r0, [sp, #24]
   141f0:	bl	5100 <rb_close@plt>
   141f4:	ldr	r0, [sp, #12]
   141f8:	bl	5100 <rb_close@plt>
   141fc:	ldr	r0, [sp, #16]
   14200:	bl	5100 <rb_close@plt>
   14204:	mov	r0, sl
   14208:	bl	4f8c <free@plt>
   1420c:	mov	r0, r4
   14210:	sub	sp, fp, #28
   14214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14218:	bl	51fc <rb_outofmemory@plt>
   1421c:	.word	0x00007be4
   14220:	.word	0x00007bb9
   14224:	.word	0x00006ee1
   14228:	.word	0x00007ad4
   1422c:	.word	0x00007ac4
   14230:	.word	0x00007ab4
   14234:	.word	0x00007b0b
   14238:	.word	0x00007af7

0001423c <rb_helper_restart>:
   1423c:	ldr	r1, [r0, #80]	; 0x50
   14240:	bx	r1

00014244 <rb_helper_write_queue>:
   14244:	sub	sp, sp, #8
   14248:	push	{fp, lr}
   1424c:	mov	fp, sp
   14250:	sub	sp, sp, #24
   14254:	str	r2, [fp, #8]
   14258:	add	r2, fp, #8
   1425c:	str	r3, [fp, #12]
   14260:	sub	r3, fp, #4
   14264:	add	r0, r0, #4
   14268:	str	r2, [fp, #-4]
   1426c:	mov	r2, #0
   14270:	str	r2, [sp, #16]
   14274:	stmib	sp, {r1, r2, r3}
   14278:	mov	r1, sp
   1427c:	str	r2, [sp]
   14280:	bl	5430 <rb_linebuf_put@plt>
   14284:	mov	sp, fp
   14288:	pop	{fp, lr}
   1428c:	add	sp, sp, #8
   14290:	bx	lr

00014294 <rb_helper_write_flush>:
   14294:	push	{r4, r5, r6, sl, fp, lr}
   14298:	add	fp, sp, #16
   1429c:	mov	r4, r0
   142a0:	ldr	r0, [r0, #16]
   142a4:	cmp	r0, #1
   142a8:	blt	14308 <rb_helper_write_flush+0x74>
   142ac:	ldr	r6, [r4, #64]	; 0x40
   142b0:	add	r5, r4, #4
   142b4:	mov	r0, r6
   142b8:	mov	r1, r5
   142bc:	bl	5058 <rb_linebuf_flush@plt>
   142c0:	cmp	r0, #0
   142c4:	bgt	142b4 <rb_helper_write_flush+0x20>
   142c8:	beq	1430c <rb_helper_write_flush+0x78>
   142cc:	bl	552c <__errno_location@plt>
   142d0:	ldr	r0, [r0]
   142d4:	bl	4cbc <rb_ignore_errno@plt>
   142d8:	cmp	r0, #0
   142dc:	beq	1430c <rb_helper_write_flush+0x78>
   142e0:	ldr	r0, [r4, #16]
   142e4:	cmp	r0, #1
   142e8:	blt	14308 <rb_helper_write_flush+0x74>
   142ec:	ldr	r0, [r4, #64]	; 0x40
   142f0:	ldr	r2, [pc, #36]	; 1431c <rb_helper_write_flush+0x88>
   142f4:	mov	r1, #2
   142f8:	mov	r3, r4
   142fc:	add	r2, pc, r2
   14300:	pop	{r4, r5, r6, sl, fp, lr}
   14304:	b	4d70 <rb_setselect@plt>
   14308:	pop	{r4, r5, r6, sl, fp, pc}
   1430c:	ldr	r1, [r4, #80]	; 0x50
   14310:	mov	r0, r4
   14314:	pop	{r4, r5, r6, sl, fp, lr}
   14318:	bx	r1
   1431c:	.word	0x0000001c

00014320 <rb_helper_write_sendq>:
   14320:	push	{r4, r5, r6, sl, fp, lr}
   14324:	add	fp, sp, #16
   14328:	mov	r5, r0
   1432c:	ldr	r0, [r1, #16]
   14330:	cmp	r0, #1
   14334:	blt	14394 <rb_helper_write_sendq+0x74>
   14338:	mov	r4, r1
   1433c:	add	r6, r1, #4
   14340:	mov	r0, r5
   14344:	mov	r1, r6
   14348:	bl	5058 <rb_linebuf_flush@plt>
   1434c:	cmp	r0, #0
   14350:	bgt	14340 <rb_helper_write_sendq+0x20>
   14354:	beq	14398 <rb_helper_write_sendq+0x78>
   14358:	bl	552c <__errno_location@plt>
   1435c:	ldr	r0, [r0]
   14360:	bl	4cbc <rb_ignore_errno@plt>
   14364:	cmp	r0, #0
   14368:	beq	14398 <rb_helper_write_sendq+0x78>
   1436c:	ldr	r0, [r4, #16]
   14370:	cmp	r0, #1
   14374:	blt	14394 <rb_helper_write_sendq+0x74>
   14378:	ldr	r0, [r4, #64]	; 0x40
   1437c:	ldr	r2, [pc, #36]	; 143a8 <rb_helper_write_sendq+0x88>
   14380:	mov	r1, #2
   14384:	mov	r3, r4
   14388:	add	r2, pc, r2
   1438c:	pop	{r4, r5, r6, sl, fp, lr}
   14390:	b	4d70 <rb_setselect@plt>
   14394:	pop	{r4, r5, r6, sl, fp, pc}
   14398:	ldr	r1, [r4, #80]	; 0x50
   1439c:	mov	r0, r4
   143a0:	pop	{r4, r5, r6, sl, fp, lr}
   143a4:	bx	r1
   143a8:	.word	0xffffff90

000143ac <rb_helper_write>:
   143ac:	sub	sp, sp, #8
   143b0:	push	{r4, r5, r6, sl, fp, lr}
   143b4:	add	fp, sp, #16
   143b8:	sub	sp, sp, #24
   143bc:	mov	r4, r0
   143c0:	add	r0, fp, #8
   143c4:	str	r2, [fp, #8]
   143c8:	add	r2, sp, #20
   143cc:	str	r3, [fp, #12]
   143d0:	str	r0, [sp, #20]
   143d4:	mov	r0, #0
   143d8:	add	r5, r4, #4
   143dc:	str	r0, [sp, #16]
   143e0:	str	r2, [sp, #12]
   143e4:	str	r0, [sp, #8]
   143e8:	stm	sp, {r0, r1}
   143ec:	mov	r1, sp
   143f0:	mov	r0, r5
   143f4:	bl	5430 <rb_linebuf_put@plt>
   143f8:	ldr	r0, [r4, #16]
   143fc:	cmp	r0, #1
   14400:	blt	14458 <rb_helper_write+0xac>
   14404:	ldr	r6, [r4, #64]	; 0x40
   14408:	mov	r0, r6
   1440c:	mov	r1, r5
   14410:	bl	5058 <rb_linebuf_flush@plt>
   14414:	cmp	r0, #0
   14418:	bgt	14408 <rb_helper_write+0x5c>
   1441c:	beq	14468 <rb_helper_write+0xbc>
   14420:	bl	552c <__errno_location@plt>
   14424:	ldr	r0, [r0]
   14428:	bl	4cbc <rb_ignore_errno@plt>
   1442c:	cmp	r0, #0
   14430:	beq	14468 <rb_helper_write+0xbc>
   14434:	ldr	r0, [r4, #16]
   14438:	cmp	r0, #1
   1443c:	blt	14458 <rb_helper_write+0xac>
   14440:	ldr	r0, [r4, #64]	; 0x40
   14444:	ldr	r2, [pc, #56]	; 14484 <rb_helper_write+0xd8>
   14448:	mov	r1, #2
   1444c:	mov	r3, r4
   14450:	add	r2, pc, r2
   14454:	bl	4d70 <rb_setselect@plt>
   14458:	sub	sp, fp, #16
   1445c:	pop	{r4, r5, r6, sl, fp, lr}
   14460:	add	sp, sp, #8
   14464:	bx	lr
   14468:	ldr	r1, [r4, #80]	; 0x50
   1446c:	mov	r0, r4
   14470:	blx	r1
   14474:	sub	sp, fp, #16
   14478:	pop	{r4, r5, r6, sl, fp, lr}
   1447c:	add	sp, sp, #8
   14480:	bx	lr
   14484:	.word	0xfffffec8

00014488 <rb_helper_run>:
   14488:	cmp	r0, #0
   1448c:	bxeq	lr
   14490:	mov	r1, r0
   14494:	ldr	r0, [r0, #60]	; 0x3c
   14498:	b	1449c <rb_helper_read_cb>

0001449c <rb_helper_read_cb>:
   1449c:	push	{r4, r5, r6, sl, fp, lr}
   144a0:	add	fp, sp, #16
   144a4:	cmp	r1, #0
   144a8:	beq	1454c <rb_helper_read_cb+0xb0>
   144ac:	mov	r4, r1
   144b0:	ldr	r0, [r1, #60]	; 0x3c
   144b4:	ldr	r1, [pc, #164]	; 14560 <rb_helper_read_cb+0xc4>
   144b8:	mov	r2, #32768	; 0x8000
   144bc:	add	r1, pc, r1
   144c0:	bl	501c <rb_read@plt>
   144c4:	mov	r2, r0
   144c8:	cmp	r0, #1
   144cc:	blt	14514 <rb_helper_read_cb+0x78>
   144d0:	ldr	r6, [pc, #140]	; 14564 <rb_helper_read_cb+0xc8>
   144d4:	add	r5, r4, #32
   144d8:	add	r6, pc, r6
   144dc:	mov	r0, r5
   144e0:	mov	r1, r6
   144e4:	mov	r3, #0
   144e8:	bl	4f20 <rb_linebuf_parse@plt>
   144ec:	ldr	r1, [r4, #76]	; 0x4c
   144f0:	mov	r0, r4
   144f4:	blx	r1
   144f8:	ldr	r0, [r4, #60]	; 0x3c
   144fc:	mov	r1, r6
   14500:	mov	r2, #32768	; 0x8000
   14504:	bl	501c <rb_read@plt>
   14508:	mov	r2, r0
   1450c:	cmp	r0, #0
   14510:	bgt	144dc <rb_helper_read_cb+0x40>
   14514:	cmp	r2, #0
   14518:	beq	14550 <rb_helper_read_cb+0xb4>
   1451c:	bl	552c <__errno_location@plt>
   14520:	ldr	r0, [r0]
   14524:	bl	4cbc <rb_ignore_errno@plt>
   14528:	cmp	r0, #0
   1452c:	beq	14550 <rb_helper_read_cb+0xb4>
   14530:	ldr	r0, [r4, #60]	; 0x3c
   14534:	ldr	r2, [pc, #44]	; 14568 <rb_helper_read_cb+0xcc>
   14538:	mov	r1, #1
   1453c:	mov	r3, r4
   14540:	add	r2, pc, r2
   14544:	pop	{r4, r5, r6, sl, fp, lr}
   14548:	b	4d70 <rb_setselect@plt>
   1454c:	pop	{r4, r5, r6, sl, fp, pc}
   14550:	ldr	r1, [r4, #80]	; 0x50
   14554:	mov	r0, r4
   14558:	pop	{r4, r5, r6, sl, fp, lr}
   1455c:	bx	r1
   14560:	.word	0x0002de18
   14564:	.word	0x0002ddfc
   14568:	.word	0xffffff54

0001456c <rb_helper_close>:
   1456c:	cmp	r0, #0
   14570:	bxeq	lr
   14574:	push	{r4, sl, fp, lr}
   14578:	add	fp, sp, #8
   1457c:	mov	r4, r0
   14580:	ldr	r0, [r0, #68]	; 0x44
   14584:	mov	r1, #9
   14588:	bl	4f80 <rb_kill@plt>
   1458c:	ldr	r0, [r4, #60]	; 0x3c
   14590:	bl	5100 <rb_close@plt>
   14594:	ldr	r0, [r4, #64]	; 0x40
   14598:	bl	5100 <rb_close@plt>
   1459c:	mov	r0, r4
   145a0:	pop	{r4, sl, fp, lr}
   145a4:	b	4f8c <free@plt>

000145a8 <rb_helper_read>:
   145a8:	push	{fp, lr}
   145ac:	mov	fp, sp
   145b0:	sub	sp, sp, #8
   145b4:	mov	r3, #0
   145b8:	add	r0, r0, #32
   145bc:	str	r3, [sp]
   145c0:	mov	r3, #0
   145c4:	bl	5034 <rb_linebuf_get@plt>
   145c8:	mov	sp, fp
   145cc:	pop	{fp, pc}

000145d0 <rb_helper_loop>:
   145d0:	push	{fp, lr}
   145d4:	mov	fp, sp
   145d8:	mov	r4, r1
   145dc:	bl	4c44 <rb_helper_run@plt>
   145e0:	mov	r0, r4
   145e4:	bl	4fe0 <rb_lib_loop@plt>

000145e8 <rb_init_netio_devpoll>:
   145e8:	mov	r0, #38	; 0x26
   145ec:	bx	lr

000145f0 <rb_setselect_devpoll>:
   145f0:	push	{fp, lr}
   145f4:	mov	fp, sp
   145f8:	bl	552c <__errno_location@plt>
   145fc:	mov	r1, #38	; 0x26
   14600:	str	r1, [r0]
   14604:	pop	{fp, pc}

00014608 <rb_select_devpoll>:
   14608:	push	{fp, lr}
   1460c:	mov	fp, sp
   14610:	bl	552c <__errno_location@plt>
   14614:	mov	r1, #38	; 0x26
   14618:	str	r1, [r0]
   1461c:	mvn	r0, #0
   14620:	pop	{fp, pc}

00014624 <rb_setup_fd_devpoll>:
   14624:	push	{fp, lr}
   14628:	mov	fp, sp
   1462c:	bl	552c <__errno_location@plt>
   14630:	mov	r1, #38	; 0x26
   14634:	str	r1, [r0]
   14638:	mvn	r0, #0
   1463c:	pop	{fp, pc}

00014640 <rb_init_netio_epoll>:
   14640:	push	{r4, sl, fp, lr}
   14644:	add	fp, sp, #8
   14648:	ldr	r4, [pc, #132]	; 146d4 <rb_init_netio_epoll+0x94>
   1464c:	mov	r0, #0
   14650:	mov	r1, #12
   14654:	add	r4, pc, r4
   14658:	strb	r0, [r4]
   1465c:	str	r0, [r4, #4]
   14660:	mov	r0, #1
   14664:	bl	4e9c <calloc@plt>
   14668:	cmp	r0, #0
   1466c:	beq	146c8 <rb_init_netio_epoll+0x88>
   14670:	str	r0, [r4, #8]
   14674:	bl	4c98 <getdtablesize@plt>
   14678:	ldr	r1, [r4, #8]
   1467c:	str	r0, [r1, #8]
   14680:	bl	4db8 <epoll_create@plt>
   14684:	ldr	r1, [r4, #8]
   14688:	cmp	r0, #0
   1468c:	str	r0, [r1]
   14690:	bmi	146cc <rb_init_netio_epoll+0x8c>
   14694:	ldr	r2, [pc, #60]	; 146d8 <rb_init_netio_epoll+0x98>
   14698:	mov	r1, #64	; 0x40
   1469c:	add	r2, pc, r2
   146a0:	bl	52e0 <rb_open@plt>
   146a4:	ldr	r4, [r4, #8]
   146a8:	ldr	r0, [r4, #8]
   146ac:	lsl	r1, r0, #4
   146b0:	mov	r0, #1
   146b4:	bl	4e9c <calloc@plt>
   146b8:	cmp	r0, #0
   146bc:	strne	r0, [r4, #4]
   146c0:	movne	r0, #0
   146c4:	popne	{r4, sl, fp, pc}
   146c8:	bl	51fc <rb_outofmemory@plt>
   146cc:	mvn	r0, #0
   146d0:	pop	{r4, sl, fp, pc}
   146d4:	.word	0x0003658c
   146d8:	.word	0x000075cf

000146dc <rb_setup_fd_epoll>:
   146dc:	mov	r0, #0
   146e0:	bx	lr

000146e4 <rb_setselect_epoll>:
   146e4:	push	{fp, lr}
   146e8:	mov	fp, sp
   146ec:	sub	sp, sp, #16
   146f0:	ldr	ip, [r0, #20]
   146f4:	tst	r1, #1
   146f8:	mov	lr, ip
   146fc:	beq	14718 <rb_setselect_epoll+0x34>
   14700:	cmp	r2, #0
   14704:	orr	lr, ip, #1
   14708:	str	r2, [r0, #28]
   1470c:	str	r3, [r0, #32]
   14710:	biceq	lr, ip, #1
   14714:	str	lr, [r0, #20]
   14718:	tst	r1, #2
   1471c:	bne	1474c <rb_setselect_epoll+0x68>
   14720:	mov	r3, lr
   14724:	orrs	r1, r3, ip
   14728:	beq	147b4 <rb_setselect_epoll+0xd0>
   1472c:	cmp	r3, #1
   14730:	blt	14770 <rb_setselect_epoll+0x8c>
   14734:	cmp	ip, #0
   14738:	beq	14780 <rb_setselect_epoll+0x9c>
   1473c:	mov	r1, #3
   14740:	cmp	r3, ip
   14744:	bne	14784 <rb_setselect_epoll+0xa0>
   14748:	b	147b4 <rb_setselect_epoll+0xd0>
   1474c:	cmp	r2, #0
   14750:	str	r2, [r0, #36]	; 0x24
   14754:	str	r3, [r0, #40]	; 0x28
   14758:	orr	r3, lr, #4
   1475c:	biceq	r3, lr, #4
   14760:	str	r3, [r0, #20]
   14764:	orrs	r1, r3, ip
   14768:	bne	1472c <rb_setselect_epoll+0x48>
   1476c:	b	147b4 <rb_setselect_epoll+0xd0>
   14770:	str	r0, [sp, #8]
   14774:	str	r3, [sp]
   14778:	mov	r1, #2
   1477c:	b	14790 <rb_setselect_epoll+0xac>
   14780:	mov	r1, #1
   14784:	orr	r2, r3, #-2147483648	; 0x80000000
   14788:	str	r0, [sp, #8]
   1478c:	str	r2, [sp]
   14790:	ldr	r2, [r0, #12]
   14794:	ldr	r0, [pc, #64]	; 147dc <rb_setselect_epoll+0xf8>
   14798:	mov	r3, sp
   1479c:	add	r0, pc, r0
   147a0:	ldr	r0, [r0, #8]
   147a4:	ldr	r0, [r0]
   147a8:	bl	549c <epoll_ctl@plt>
   147ac:	cmp	r0, #0
   147b0:	bne	147bc <rb_setselect_epoll+0xd8>
   147b4:	mov	sp, fp
   147b8:	pop	{fp, pc}
   147bc:	bl	552c <__errno_location@plt>
   147c0:	ldr	r0, [r0]
   147c4:	bl	4c80 <strerror@plt>
   147c8:	mov	r1, r0
   147cc:	ldr	r0, [pc, #12]	; 147e0 <rb_setselect_epoll+0xfc>
   147d0:	add	r0, pc, r0
   147d4:	bl	519c <rb_lib_log@plt>
   147d8:	bl	4ca4 <abort@plt>
   147dc:	.word	0x00036444
   147e0:	.word	0x000074b1

000147e4 <rb_select_epoll>:
   147e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147e8:	add	fp, sp, #28
   147ec:	sub	sp, sp, #20
   147f0:	ldr	r5, [pc, #380]	; 14974 <rb_select_epoll+0x190>
   147f4:	mov	r3, r0
   147f8:	add	r5, pc, r5
   147fc:	ldr	r2, [r5, #8]
   14800:	ldm	r2, {r0, r1, r2}
   14804:	bl	5040 <epoll_wait@plt>
   14808:	mov	r4, r0
   1480c:	bl	552c <__errno_location@plt>
   14810:	ldr	r6, [r0]
   14814:	mov	r9, r0
   14818:	bl	5208 <rb_set_time@plt>
   1481c:	cmn	r4, #1
   14820:	str	r6, [r9]
   14824:	ble	14954 <rb_select_epoll+0x170>
   14828:	cmp	r4, #0
   1482c:	beq	14948 <rb_select_epoll+0x164>
   14830:	mov	r6, #0
   14834:	mov	r8, #0
   14838:	b	14848 <rb_select_epoll+0x64>
   1483c:	add	r8, r8, #1
   14840:	cmp	r4, r8
   14844:	beq	14948 <rb_select_epoll+0x164>
   14848:	ldr	r0, [r5, #8]
   1484c:	ldr	r0, [r0, #4]
   14850:	ldrb	r1, [r0, r8, lsl #4]!
   14854:	ldr	r7, [r0, #8]
   14858:	tst	r1, #25
   1485c:	ldr	sl, [r7, #20]
   14860:	beq	14884 <rb_select_epoll+0xa0>
   14864:	ldr	r2, [r7, #28]
   14868:	ldr	r1, [r7, #32]
   1486c:	str	r6, [r7, #28]
   14870:	str	r6, [r7, #32]
   14874:	cmp	r2, #0
   14878:	beq	14884 <rb_select_epoll+0xa0>
   1487c:	mov	r0, r7
   14880:	blx	r2
   14884:	ldrb	r0, [r7, #16]
   14888:	tst	r0, #1
   1488c:	beq	1483c <rb_select_epoll+0x58>
   14890:	ldr	r0, [r5, #8]
   14894:	ldr	r0, [r0, #4]
   14898:	ldrb	r0, [r0, r8, lsl #4]
   1489c:	tst	r0, #28
   148a0:	beq	148d0 <rb_select_epoll+0xec>
   148a4:	ldr	r2, [r7, #36]	; 0x24
   148a8:	ldr	r1, [r7, #40]	; 0x28
   148ac:	str	r6, [r7, #36]	; 0x24
   148b0:	str	r6, [r7, #40]	; 0x28
   148b4:	cmp	r2, #0
   148b8:	beq	148d0 <rb_select_epoll+0xec>
   148bc:	mov	r0, r7
   148c0:	blx	r2
   148c4:	ldrb	r0, [r7, #16]
   148c8:	tst	r0, #1
   148cc:	beq	1483c <rb_select_epoll+0x58>
   148d0:	ldr	r0, [r7, #28]
   148d4:	ldr	r1, [r7, #36]	; 0x24
   148d8:	cmp	r0, #0
   148dc:	movwne	r0, #1
   148e0:	cmp	r1, #0
   148e4:	orrne	r0, r0, #4
   148e8:	cmp	sl, r0
   148ec:	beq	1483c <rb_select_epoll+0x58>
   148f0:	cmp	r0, #0
   148f4:	str	r0, [sp]
   148f8:	str	r0, [r7, #20]
   148fc:	str	r7, [sp, #8]
   14900:	mov	r1, #3
   14904:	mov	r3, sp
   14908:	orrne	r0, r0, #-2147483648	; 0x80000000
   1490c:	movweq	r1, #2
   14910:	strne	r0, [sp]
   14914:	ldr	r0, [r5, #8]
   14918:	ldr	r2, [r7, #12]
   1491c:	ldr	r0, [r0]
   14920:	bl	549c <epoll_ctl@plt>
   14924:	cmp	r0, #0
   14928:	beq	1483c <rb_select_epoll+0x58>
   1492c:	ldr	r0, [r9]
   14930:	bl	4c80 <strerror@plt>
   14934:	mov	r1, r0
   14938:	ldr	r0, [pc, #56]	; 14978 <rb_select_epoll+0x194>
   1493c:	add	r0, pc, r0
   14940:	bl	519c <rb_lib_log@plt>
   14944:	b	1483c <rb_select_epoll+0x58>
   14948:	mov	r0, #0
   1494c:	sub	sp, fp, #28
   14950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14954:	mov	r0, r6
   14958:	bl	4cbc <rb_ignore_errno@plt>
   1495c:	mov	r1, r0
   14960:	mov	r0, #0
   14964:	cmp	r1, #0
   14968:	movweq	r0, #5
   1496c:	sub	sp, fp, #28
   14970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14974:	.word	0x000363e8
   14978:	.word	0x00007370

0001497c <rb_epoll_supports_event>:
   1497c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14980:	add	fp, sp, #24
   14984:	sub	sp, sp, #288	; 0x120
   14988:	ldr	r6, [pc, #268]	; 14a9c <rb_epoll_supports_event+0x120>
   1498c:	add	r6, pc, r6
   14990:	ldr	r4, [r6, #4]
   14994:	cmp	r4, #1
   14998:	beq	149a8 <rb_epoll_supports_event+0x2c>
   1499c:	cmn	r4, #1
   149a0:	bne	149b4 <rb_epoll_supports_event+0x38>
   149a4:	mov	r4, #0
   149a8:	mov	r0, r4
   149ac:	sub	sp, fp, #24
   149b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149b4:	ldr	r1, [pc, #228]	; 14aa0 <rb_epoll_supports_event+0x124>
   149b8:	add	r2, sp, #128	; 0x80
   149bc:	mov	r0, #3
   149c0:	add	r1, pc, r1
   149c4:	bl	4d58 <__xstat@plt>
   149c8:	cmp	r0, #0
   149cc:	beq	14a28 <rb_epoll_supports_event+0xac>
   149d0:	mov	r0, #0
   149d4:	mov	r1, #0
   149d8:	mov	r4, #0
   149dc:	bl	540c <timerfd_create@plt>
   149e0:	cmp	r0, #0
   149e4:	bmi	14a04 <rb_epoll_supports_event+0x88>
   149e8:	bl	51c0 <close@plt>
   149ec:	mov	r4, #1
   149f0:	str	r4, [r6, #4]
   149f4:	strb	r4, [r6]
   149f8:	mov	r0, r4
   149fc:	sub	sp, fp, #24
   14a00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a04:	mov	r0, #26
   14a08:	str	r4, [fp, #-84]	; 0xffffffac
   14a0c:	sub	r1, fp, #92	; 0x5c
   14a10:	sub	r2, fp, #28
   14a14:	str	r0, [fp, #-88]	; 0xffffffa8
   14a18:	mov	r0, #0
   14a1c:	bl	4df4 <timer_create@plt>
   14a20:	cmp	r0, #0
   14a24:	beq	14a40 <rb_epoll_supports_event+0xc4>
   14a28:	mvn	r0, #0
   14a2c:	mov	r4, #0
   14a30:	str	r0, [r6, #4]
   14a34:	mov	r0, r4
   14a38:	sub	sp, fp, #24
   14a3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a40:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14a44:	bl	52d4 <timer_delete@plt>
   14a48:	mov	r5, sp
   14a4c:	mov	r0, r5
   14a50:	bl	4c74 <sigemptyset@plt>
   14a54:	mvn	r0, #0
   14a58:	mov	r1, r5
   14a5c:	mov	r2, #0
   14a60:	mvn	r7, #0
   14a64:	mov	r4, #0
   14a68:	bl	4d1c <signalfd@plt>
   14a6c:	cmn	r0, #1
   14a70:	ble	14a8c <rb_epoll_supports_event+0x110>
   14a74:	bl	51c0 <close@plt>
   14a78:	mov	r4, #1
   14a7c:	str	r4, [r6, #4]
   14a80:	mov	r0, r4
   14a84:	sub	sp, fp, #24
   14a88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a8c:	str	r7, [r6, #4]
   14a90:	mov	r0, r4
   14a94:	sub	sp, fp, #24
   14a98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a9c:	.word	0x00036254
   14aa0:	.word	0x00007314

00014aa4 <rb_epoll_init_event>:
   14aa4:	push	{r4, r5, r6, sl, fp, lr}
   14aa8:	add	fp, sp, #16
   14aac:	sub	sp, sp, #128	; 0x80
   14ab0:	bl	1497c <rb_epoll_supports_event>
   14ab4:	ldr	r5, [pc, #164]	; 14b60 <rb_epoll_init_event+0xbc>
   14ab8:	add	r5, pc, r5
   14abc:	ldrb	r0, [r5]
   14ac0:	cmp	r0, #0
   14ac4:	bne	14b4c <rb_epoll_init_event+0xa8>
   14ac8:	mov	r4, sp
   14acc:	mov	r0, r4
   14ad0:	bl	4c74 <sigemptyset@plt>
   14ad4:	bl	4d4c <__libc_current_sigrtmin@plt>
   14ad8:	mov	r1, r0
   14adc:	mov	r0, r4
   14ae0:	bl	5118 <sigaddset@plt>
   14ae4:	mov	r0, #0
   14ae8:	mov	r1, r4
   14aec:	mov	r2, #0
   14af0:	bl	5220 <sigprocmask@plt>
   14af4:	mov	r0, r4
   14af8:	bl	4c74 <sigemptyset@plt>
   14afc:	bl	4d4c <__libc_current_sigrtmin@plt>
   14b00:	mov	r1, r0
   14b04:	mov	r0, r4
   14b08:	bl	5118 <sigaddset@plt>
   14b0c:	mvn	r0, #0
   14b10:	mov	r1, r4
   14b14:	mov	r2, #0
   14b18:	mvn	r6, #0
   14b1c:	bl	4d1c <signalfd@plt>
   14b20:	cmn	r0, #1
   14b24:	beq	14b54 <rb_epoll_init_event+0xb0>
   14b28:	ldr	r2, [pc, #52]	; 14b64 <rb_epoll_init_event+0xc0>
   14b2c:	mov	r1, #64	; 0x40
   14b30:	add	r2, pc, r2
   14b34:	bl	52e0 <rb_open@plt>
   14b38:	mov	r4, r0
   14b3c:	bl	4ecc <rb_set_nb@plt>
   14b40:	mov	r0, r4
   14b44:	mov	r1, #0
   14b48:	bl	14b68 <signalfd_handler>
   14b4c:	sub	sp, fp, #16
   14b50:	pop	{r4, r5, r6, sl, fp, pc}
   14b54:	str	r6, [r5, #4]
   14b58:	sub	sp, fp, #16
   14b5c:	pop	{r4, r5, r6, sl, fp, pc}
   14b60:	.word	0x00036128
   14b64:	.word	0x000071bc

00014b68 <signalfd_handler>:
   14b68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b6c:	add	fp, sp, #24
   14b70:	ldr	r5, [pc, #428]	; 14d24 <signalfd_handler+0x1bc>
   14b74:	mov	r4, r0
   14b78:	mov	r0, #128	; 0x80
   14b7c:	add	r5, pc, r5
   14b80:	str	r0, [r5, #60]	; 0x3c
   14b84:	str	r0, [r5, #52]	; 0x34
   14b88:	str	r0, [r5, #44]	; 0x2c
   14b8c:	str	r0, [r5, #36]	; 0x24
   14b90:	str	r0, [r5, #28]
   14b94:	str	r0, [r5, #20]
   14b98:	str	r0, [r5, #12]
   14b9c:	str	r0, [r5, #4]
   14ba0:	ldr	r6, [pc, #384]	; 14d28 <signalfd_handler+0x1c0>
   14ba4:	add	r6, pc, r6
   14ba8:	add	r1, r6, #1920	; 0x780
   14bac:	add	r2, r6, #1792	; 0x700
   14bb0:	add	r3, r6, #1664	; 0x680
   14bb4:	add	r7, r6, #1536	; 0x600
   14bb8:	str	r6, [r5]
   14bbc:	str	r7, [r5, #96]	; 0x60
   14bc0:	str	r0, [r5, #100]	; 0x64
   14bc4:	str	r3, [r5, #104]	; 0x68
   14bc8:	str	r0, [r5, #108]	; 0x6c
   14bcc:	str	r2, [r5, #112]	; 0x70
   14bd0:	str	r0, [r5, #116]	; 0x74
   14bd4:	str	r1, [r5, #120]	; 0x78
   14bd8:	add	r1, r6, #1408	; 0x580
   14bdc:	add	r2, r6, #1280	; 0x500
   14be0:	add	r3, r6, #1152	; 0x480
   14be4:	add	r7, r6, #1024	; 0x400
   14be8:	str	r0, [r5, #124]	; 0x7c
   14bec:	str	r7, [r5, #64]	; 0x40
   14bf0:	str	r0, [r5, #68]	; 0x44
   14bf4:	str	r3, [r5, #72]	; 0x48
   14bf8:	str	r0, [r5, #76]	; 0x4c
   14bfc:	str	r2, [r5, #80]	; 0x50
   14c00:	str	r0, [r5, #84]	; 0x54
   14c04:	str	r1, [r5, #88]	; 0x58
   14c08:	str	r0, [r5, #92]	; 0x5c
   14c0c:	add	r0, r6, #896	; 0x380
   14c10:	str	r0, [r5, #56]	; 0x38
   14c14:	add	r0, r6, #768	; 0x300
   14c18:	str	r0, [r5, #48]	; 0x30
   14c1c:	add	r0, r6, #640	; 0x280
   14c20:	str	r0, [r5, #40]	; 0x28
   14c24:	add	r0, r6, #512	; 0x200
   14c28:	str	r0, [r5, #32]
   14c2c:	add	r0, r6, #384	; 0x180
   14c30:	str	r0, [r5, #24]
   14c34:	add	r0, r6, #256	; 0x100
   14c38:	str	r0, [r5, #16]
   14c3c:	add	r0, r6, #128	; 0x80
   14c40:	str	r0, [r5, #8]
   14c44:	mov	r0, r4
   14c48:	bl	4dac <rb_get_fd@plt>
   14c4c:	mov	r1, r5
   14c50:	mov	r2, #16
   14c54:	bl	54b4 <readv@plt>
   14c58:	cmp	r0, #0
   14c5c:	beq	14d14 <signalfd_handler+0x1ac>
   14c60:	ldr	r8, [pc, #196]	; 14d2c <signalfd_handler+0x1c4>
   14c64:	add	r5, r6, #48	; 0x30
   14c68:	add	r8, pc, r8
   14c6c:	cmp	r0, #0
   14c70:	bpl	14c9c <signalfd_handler+0x134>
   14c74:	b	14ce4 <signalfd_handler+0x17c>
   14c78:	mov	r0, r4
   14c7c:	bl	4dac <rb_get_fd@plt>
   14c80:	mov	r1, r8
   14c84:	mov	r2, #16
   14c88:	bl	54b4 <readv@plt>
   14c8c:	cmp	r0, #0
   14c90:	beq	14d14 <signalfd_handler+0x1ac>
   14c94:	cmp	r0, #0
   14c98:	bmi	14ce4 <signalfd_handler+0x17c>
   14c9c:	cmp	r0, #128	; 0x80
   14ca0:	blt	14c78 <signalfd_handler+0x110>
   14ca4:	lsr	r7, r0, #7
   14ca8:	mov	r6, r5
   14cac:	ldr	r0, [r6]
   14cb0:	cmp	r0, #0
   14cb4:	bne	14cd0 <signalfd_handler+0x168>
   14cb8:	add	r6, r6, #128	; 0x80
   14cbc:	subs	r7, r7, #1
   14cc0:	beq	14c78 <signalfd_handler+0x110>
   14cc4:	ldr	r0, [r6]
   14cc8:	cmp	r0, #0
   14ccc:	beq	14cb8 <signalfd_handler+0x150>
   14cd0:	bl	513c <rb_run_one_event@plt>
   14cd4:	add	r6, r6, #128	; 0x80
   14cd8:	subs	r7, r7, #1
   14cdc:	bne	14cc4 <signalfd_handler+0x15c>
   14ce0:	b	14c78 <signalfd_handler+0x110>
   14ce4:	bl	552c <__errno_location@plt>
   14ce8:	ldr	r0, [r0]
   14cec:	bl	4cbc <rb_ignore_errno@plt>
   14cf0:	cmp	r0, #0
   14cf4:	beq	14d14 <signalfd_handler+0x1ac>
   14cf8:	ldr	r2, [pc, #48]	; 14d30 <signalfd_handler+0x1c8>
   14cfc:	mov	r0, r4
   14d00:	mov	r1, #1
   14d04:	mov	r3, #0
   14d08:	add	r2, pc, r2
   14d0c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d10:	b	4d70 <rb_setselect@plt>
   14d14:	mov	r0, r4
   14d18:	bl	5100 <rb_close@plt>
   14d1c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d20:	b	14aa4 <rb_epoll_init_event>
   14d24:	.word	0x00035f5c
   14d28:	.word	0x00035734
   14d2c:	.word	0x00035e70
   14d30:	.word	0xfffffe58

00014d34 <rb_epoll_sched_event>:
   14d34:	push	{r4, r5, r6, r7, fp, lr}
   14d38:	add	fp, sp, #16
   14d3c:	sub	sp, sp, #80	; 0x50
   14d40:	mov	r4, r0
   14d44:	ldr	r0, [pc, #572]	; 14f88 <rb_epoll_sched_event+0x254>
   14d48:	mov	r6, r1
   14d4c:	add	r0, pc, r0
   14d50:	ldrb	r0, [r0]
   14d54:	cmp	r0, #1
   14d58:	bne	14e2c <rb_epoll_sched_event+0xf8>
   14d5c:	mov	r0, #0
   14d60:	mov	r1, #0
   14d64:	mov	r5, #0
   14d68:	bl	540c <timerfd_create@plt>
   14d6c:	cmn	r0, #1
   14d70:	ble	14ef0 <rb_epoll_sched_event+0x1bc>
   14d74:	str	r5, [sp, #20]
   14d78:	str	r5, [sp, #16]
   14d7c:	str	r5, [sp, #28]
   14d80:	str	r6, [sp, #24]
   14d84:	mov	r7, r0
   14d88:	ldr	r0, [r4, #24]
   14d8c:	cmp	r0, #0
   14d90:	beq	14da8 <rb_epoll_sched_event+0x74>
   14d94:	add	r0, sp, #16
   14d98:	add	r0, r0, #8
   14d9c:	ldrd	r0, [r0]
   14da0:	str	r1, [sp, #20]
   14da4:	str	r0, [sp, #16]
   14da8:	add	r2, sp, #16
   14dac:	mov	r0, r7
   14db0:	mov	r1, #0
   14db4:	mov	r3, #0
   14db8:	mov	r5, #0
   14dbc:	bl	5490 <timerfd_settime@plt>
   14dc0:	cmn	r0, #1
   14dc4:	ble	14f24 <rb_epoll_sched_event+0x1f0>
   14dc8:	ldr	r3, [r4, #20]
   14dcc:	ldr	r5, [pc, #448]	; 14f94 <rb_epoll_sched_event+0x260>
   14dd0:	ldr	r2, [pc, #448]	; 14f98 <rb_epoll_sched_event+0x264>
   14dd4:	mov	r1, #136	; 0x88
   14dd8:	add	r5, pc, r5
   14ddc:	add	r2, pc, r2
   14de0:	mov	r0, r5
   14de4:	bl	53f4 <snprintf@plt>
   14de8:	mov	r0, r7
   14dec:	mov	r1, #64	; 0x40
   14df0:	mov	r2, r5
   14df4:	bl	52e0 <rb_open@plt>
   14df8:	mov	r6, r0
   14dfc:	bl	4ecc <rb_set_nb@plt>
   14e00:	str	r6, [r4, #40]	; 0x28
   14e04:	mov	r0, r6
   14e08:	mov	r1, #1
   14e0c:	mov	r3, r4
   14e10:	mov	r5, #1
   14e14:	ldr	r2, [pc, #384]	; 14f9c <rb_epoll_sched_event+0x268>
   14e18:	add	r2, pc, r2
   14e1c:	bl	4d70 <rb_setselect@plt>
   14e20:	mov	r0, r5
   14e24:	sub	sp, fp, #16
   14e28:	pop	{r4, r5, r6, r7, fp, pc}
   14e2c:	vmov.i32	q8, #0	; 0x00000000
   14e30:	add	r0, sp, #16
   14e34:	add	r1, r0, #16
   14e38:	vst1.64	{d16-d17}, [r1]
   14e3c:	add	r1, r0, #32
   14e40:	vst1.64	{d16-d17}, [r1]
   14e44:	mov	r1, #48	; 0x30
   14e48:	vst1.64	{d16-d17}, [r0], r1
   14e4c:	mov	r1, #4
   14e50:	vst1.64	{d16-d17}, [r0]
   14e54:	mov	r0, #1
   14e58:	bl	4e9c <calloc@plt>
   14e5c:	cmp	r0, #0
   14e60:	beq	14f84 <rb_epoll_sched_event+0x250>
   14e64:	mov	r7, #0
   14e68:	str	r0, [r4, #40]	; 0x28
   14e6c:	mov	r5, r0
   14e70:	str	r7, [sp, #24]
   14e74:	bl	4d4c <__libc_current_sigrtmin@plt>
   14e78:	str	r0, [sp, #20]
   14e7c:	add	r1, sp, #16
   14e80:	mov	r0, #0
   14e84:	mov	r2, r5
   14e88:	str	r4, [sp, #16]
   14e8c:	bl	4df4 <timer_create@plt>
   14e90:	cmp	r0, #0
   14e94:	bmi	14f18 <rb_epoll_sched_event+0x1e4>
   14e98:	str	r7, [sp, #4]
   14e9c:	str	r7, [sp]
   14ea0:	str	r7, [sp, #12]
   14ea4:	str	r6, [sp, #8]
   14ea8:	ldr	r0, [r4, #24]
   14eac:	cmp	r0, #0
   14eb0:	beq	14ec4 <rb_epoll_sched_event+0x190>
   14eb4:	mov	r0, sp
   14eb8:	add	r0, r0, #8
   14ebc:	ldrd	r0, [r0]
   14ec0:	stm	sp, {r0, r1}
   14ec4:	ldr	r0, [r5]
   14ec8:	mov	r2, sp
   14ecc:	mov	r1, #0
   14ed0:	mov	r3, #0
   14ed4:	bl	4fec <timer_settime@plt>
   14ed8:	mov	r5, #1
   14edc:	cmn	r0, #1
   14ee0:	ble	14f54 <rb_epoll_sched_event+0x220>
   14ee4:	mov	r0, r5
   14ee8:	sub	sp, fp, #16
   14eec:	pop	{r4, r5, r6, r7, fp, pc}
   14ef0:	bl	552c <__errno_location@plt>
   14ef4:	ldr	r0, [r0]
   14ef8:	bl	4c80 <strerror@plt>
   14efc:	mov	r1, r0
   14f00:	ldr	r0, [pc, #132]	; 14f8c <rb_epoll_sched_event+0x258>
   14f04:	add	r0, pc, r0
   14f08:	bl	519c <rb_lib_log@plt>
   14f0c:	mov	r0, r5
   14f10:	sub	sp, fp, #16
   14f14:	pop	{r4, r5, r6, r7, fp, pc}
   14f18:	ldr	r4, [pc, #128]	; 14fa0 <rb_epoll_sched_event+0x26c>
   14f1c:	add	r4, pc, r4
   14f20:	b	14f5c <rb_epoll_sched_event+0x228>
   14f24:	bl	552c <__errno_location@plt>
   14f28:	ldr	r0, [r0]
   14f2c:	bl	4c80 <strerror@plt>
   14f30:	mov	r1, r0
   14f34:	ldr	r0, [pc, #84]	; 14f90 <rb_epoll_sched_event+0x25c>
   14f38:	add	r0, pc, r0
   14f3c:	bl	519c <rb_lib_log@plt>
   14f40:	mov	r0, r7
   14f44:	bl	51c0 <close@plt>
   14f48:	mov	r0, r5
   14f4c:	sub	sp, fp, #16
   14f50:	pop	{r4, r5, r6, r7, fp, pc}
   14f54:	ldr	r4, [pc, #72]	; 14fa4 <rb_epoll_sched_event+0x270>
   14f58:	add	r4, pc, r4
   14f5c:	bl	552c <__errno_location@plt>
   14f60:	ldr	r0, [r0]
   14f64:	bl	4c80 <strerror@plt>
   14f68:	mov	r1, r0
   14f6c:	mov	r0, r4
   14f70:	bl	519c <rb_lib_log@plt>
   14f74:	mov	r5, #0
   14f78:	mov	r0, r5
   14f7c:	sub	sp, fp, #16
   14f80:	pop	{r4, r5, r6, r7, fp, pc}
   14f84:	bl	51fc <rb_outofmemory@plt>
   14f88:	.word	0x00035e94
   14f8c:	.word	0x00006df1
   14f90:	.word	0x00006dd1
   14f94:	.word	0x00035d80
   14f98:	.word	0x00006f42
   14f9c:	.word	0x000001e4
   14fa0:	.word	0x00006e3f
   14fa4:	.word	0x00006e15

00014fa8 <rb_epoll_unsched_event>:
   14fa8:	push	{r4, sl, fp, lr}
   14fac:	add	fp, sp, #8
   14fb0:	mov	r4, r0
   14fb4:	ldr	r0, [r0, #40]	; 0x28
   14fb8:	ldr	r1, [pc, #64]	; 15000 <rb_epoll_unsched_event+0x58>
   14fbc:	add	r1, pc, r1
   14fc0:	ldrb	r1, [r1]
   14fc4:	cmp	r1, #1
   14fc8:	bne	14fdc <rb_epoll_unsched_event+0x34>
   14fcc:	bl	5100 <rb_close@plt>
   14fd0:	mov	r0, #0
   14fd4:	str	r0, [r4, #40]	; 0x28
   14fd8:	pop	{r4, sl, fp, pc}
   14fdc:	ldr	r0, [r0]
   14fe0:	bl	52d4 <timer_delete@plt>
   14fe4:	ldr	r0, [r4, #40]	; 0x28
   14fe8:	cmp	r0, #0
   14fec:	beq	14ff4 <rb_epoll_unsched_event+0x4c>
   14ff0:	bl	4f8c <free@plt>
   14ff4:	mov	r0, #0
   14ff8:	str	r0, [r4, #40]	; 0x28
   14ffc:	pop	{r4, sl, fp, pc}
   15000:	.word	0x00035c24

00015004 <rb_read_timerfd>:
   15004:	push	{r4, r5, fp, lr}
   15008:	add	fp, sp, #8
   1500c:	sub	sp, sp, #8
   15010:	mov	r5, r0
   15014:	cmp	r1, #0
   15018:	beq	1507c <rb_read_timerfd+0x78>
   1501c:	mov	r4, r1
   15020:	mov	r1, sp
   15024:	mov	r0, r5
   15028:	mov	r2, #8
   1502c:	bl	501c <rb_read@plt>
   15030:	cmp	r0, #0
   15034:	beq	1508c <rb_read_timerfd+0x88>
   15038:	cmn	r0, #1
   1503c:	bgt	15054 <rb_read_timerfd+0x50>
   15040:	bl	552c <__errno_location@plt>
   15044:	ldr	r0, [r0]
   15048:	bl	4cbc <rb_ignore_errno@plt>
   1504c:	cmp	r0, #0
   15050:	beq	1508c <rb_read_timerfd+0x88>
   15054:	ldr	r2, [pc, #104]	; 150c4 <rb_read_timerfd+0xc0>
   15058:	mov	r0, r5
   1505c:	mov	r1, #1
   15060:	mov	r3, r4
   15064:	add	r2, pc, r2
   15068:	bl	4d70 <rb_setselect@plt>
   1506c:	mov	r0, r4
   15070:	bl	513c <rb_run_one_event@plt>
   15074:	sub	sp, fp, #8
   15078:	pop	{r4, r5, fp, pc}
   1507c:	mov	r0, r5
   15080:	bl	5100 <rb_close@plt>
   15084:	sub	sp, fp, #8
   15088:	pop	{r4, r5, fp, pc}
   1508c:	mov	r0, r5
   15090:	bl	5100 <rb_close@plt>
   15094:	ldr	r4, [r4, #20]
   15098:	bl	552c <__errno_location@plt>
   1509c:	ldr	r0, [r0]
   150a0:	bl	4c80 <strerror@plt>
   150a4:	mov	r2, r0
   150a8:	ldr	r0, [pc, #16]	; 150c0 <rb_read_timerfd+0xbc>
   150ac:	mov	r1, r4
   150b0:	add	r0, pc, r0
   150b4:	bl	519c <rb_lib_log@plt>
   150b8:	sub	sp, fp, #8
   150bc:	pop	{r4, r5, fp, pc}
   150c0:	.word	0x00006c7a
   150c4:	.word	0xffffff98

000150c8 <rb_setup_fd_poll>:
   150c8:	mov	r0, #0
   150cc:	bx	lr

000150d0 <rb_init_netio_poll>:
   150d0:	push	{r4, r5, r6, sl, fp, lr}
   150d4:	add	fp, sp, #16
   150d8:	bl	4d34 <rb_getmaxconnect@plt>
   150dc:	lsl	r1, r0, #3
   150e0:	mov	r0, #1
   150e4:	bl	4e9c <calloc@plt>
   150e8:	cmp	r0, #0
   150ec:	beq	15144 <rb_init_netio_poll+0x74>
   150f0:	ldr	r4, [pc, #80]	; 15148 <rb_init_netio_poll+0x78>
   150f4:	add	r4, pc, r4
   150f8:	str	r0, [r4]
   150fc:	bl	4d34 <rb_getmaxconnect@plt>
   15100:	str	r0, [r4, #8]
   15104:	bl	4d34 <rb_getmaxconnect@plt>
   15108:	cmp	r0, #1
   1510c:	blt	15134 <rb_init_netio_poll+0x64>
   15110:	mov	r5, #0
   15114:	mvn	r6, #0
   15118:	ldr	r0, [pc, #44]	; 1514c <rb_init_netio_poll+0x7c>
   1511c:	ldr	r0, [pc, r0]
   15120:	str	r6, [r0, r5, lsl #3]
   15124:	add	r5, r5, #1
   15128:	bl	4d34 <rb_getmaxconnect@plt>
   1512c:	cmp	r5, r0
   15130:	blt	15118 <rb_init_netio_poll+0x48>
   15134:	mov	r0, #0
   15138:	str	r0, [r4, #4]
   1513c:	mov	r0, #0
   15140:	pop	{r4, r5, r6, sl, fp, pc}
   15144:	bl	51fc <rb_outofmemory@plt>
   15148:	.word	0x00035af8
   1514c:	.word	0x00035ad0

00015150 <rb_setselect_poll>:
   15150:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15154:	add	fp, sp, #24
   15158:	cmp	r0, #0
   1515c:	beq	151f0 <rb_setselect_poll+0xa0>
   15160:	mov	r4, r0
   15164:	tst	r1, #1
   15168:	beq	15188 <rb_setselect_poll+0x38>
   1516c:	str	r2, [r4, #28]
   15170:	str	r3, [r4, #32]
   15174:	cmp	r2, #0
   15178:	ldr	r0, [r4, #20]
   1517c:	orr	r7, r0, #64	; 0x40
   15180:	biceq	r7, r0, #64	; 0x40
   15184:	str	r7, [r4, #20]
   15188:	tst	r1, #2
   1518c:	beq	151ac <rb_setselect_poll+0x5c>
   15190:	str	r2, [r4, #36]	; 0x24
   15194:	str	r3, [r4, #40]	; 0x28
   15198:	cmp	r2, #0
   1519c:	ldr	r0, [r4, #20]
   151a0:	orr	r1, r0, #256	; 0x100
   151a4:	biceq	r1, r0, #256	; 0x100
   151a8:	str	r1, [r4, #20]
   151ac:	ldr	r6, [pc, #336]	; 15304 <rb_setselect_poll+0x1b4>
   151b0:	ldr	r0, [r4, #12]
   151b4:	add	r6, pc, r6
   151b8:	ldr	r5, [r6, #8]
   151bc:	cmp	r5, r0
   151c0:	ble	15254 <rb_setselect_poll+0x104>
   151c4:	ldr	r1, [r4, #20]
   151c8:	cmp	r1, #0
   151cc:	ble	151f4 <rb_setselect_poll+0xa4>
   151d0:	ldr	r0, [r4, #12]
   151d4:	ldr	r2, [pc, #308]	; 15310 <rb_setselect_poll+0x1c0>
   151d8:	ldr	r2, [pc, r2]
   151dc:	str	r0, [r2, r0, lsl #3]!
   151e0:	strh	r1, [r2, #4]
   151e4:	ldr	r1, [r6, #4]
   151e8:	cmp	r0, r1
   151ec:	strgt	r0, [r6, #4]
   151f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151f4:	ldr	r1, [r4, #12]
   151f8:	ldr	r0, [pc, #268]	; 1530c <rb_setselect_poll+0x1bc>
   151fc:	mvn	r2, #0
   15200:	ldr	r0, [pc, r0]
   15204:	mov	r3, r0
   15208:	str	r2, [r3, r1, lsl #3]!
   1520c:	mov	r2, #0
   15210:	strh	r2, [r3, #4]
   15214:	ldr	r2, [r6, #4]
   15218:	cmp	r1, r2
   1521c:	bne	151f0 <rb_setselect_poll+0xa0>
   15220:	cmp	r2, #0
   15224:	bmi	151f0 <rb_setselect_poll+0xa0>
   15228:	sub	r2, r1, #1
   1522c:	mov	r1, r2
   15230:	add	r2, r2, #1
   15234:	cmp	r2, #1
   15238:	blt	1524c <rb_setselect_poll+0xfc>
   1523c:	ldr	r3, [r0, r1, lsl #3]
   15240:	sub	r2, r1, #1
   15244:	cmn	r3, #1
   15248:	beq	1522c <rb_setselect_poll+0xdc>
   1524c:	str	r1, [r6, #4]
   15250:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15254:	add	r1, r5, #1024	; 0x400
   15258:	str	r1, [r6, #8]
   1525c:	lsl	r1, r1, #3
   15260:	ldr	r0, [pc, #160]	; 15308 <rb_setselect_poll+0x1b8>
   15264:	ldr	r0, [pc, r0]
   15268:	bl	5484 <realloc@plt>
   1526c:	cmp	r0, #0
   15270:	beq	15300 <rb_setselect_poll+0x1b0>
   15274:	add	r7, r5, #1
   15278:	mov	r8, r0
   1527c:	str	r0, [r6]
   15280:	mov	r1, #0
   15284:	mov	r2, #8192	; 0x2000
   15288:	add	r0, r0, r7, lsl #3
   1528c:	bl	4ed8 <memset@plt>
   15290:	ldr	r0, [r6, #8]
   15294:	cmp	r7, r0
   15298:	bge	151c4 <rb_setselect_poll+0x74>
   1529c:	mvn	r2, r5
   152a0:	sub	r1, r0, r5
   152a4:	add	r2, r0, r2
   152a8:	sub	r1, r1, #2
   152ac:	ands	r2, r2, #3
   152b0:	beq	152c8 <rb_setselect_poll+0x178>
   152b4:	mvn	r3, #0
   152b8:	str	r3, [r8, r7, lsl #3]
   152bc:	subs	r2, r2, #1
   152c0:	add	r7, r7, #1
   152c4:	bne	152b8 <rb_setselect_poll+0x168>
   152c8:	cmp	r1, #3
   152cc:	bcc	151c4 <rb_setselect_poll+0x74>
   152d0:	add	r1, r8, r7, lsl #3
   152d4:	sub	r0, r0, r7
   152d8:	mvn	r2, #0
   152dc:	add	r1, r1, #16
   152e0:	str	r2, [r1, #8]
   152e4:	str	r2, [r1]
   152e8:	str	r2, [r1, #-8]
   152ec:	str	r2, [r1, #-16]
   152f0:	add	r1, r1, #32
   152f4:	subs	r0, r0, #4
   152f8:	bne	152e0 <rb_setselect_poll+0x190>
   152fc:	b	151c4 <rb_setselect_poll+0x74>
   15300:	bl	51fc <rb_outofmemory@plt>
   15304:	.word	0x00035a38
   15308:	.word	0x00035988
   1530c:	.word	0x000359ec
   15310:	.word	0x00035a14

00015314 <rb_select_poll>:
   15314:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15318:	add	fp, sp, #24
   1531c:	ldr	r5, [pc, #424]	; 154cc <rb_select_poll+0x1b8>
   15320:	mov	r2, r0
   15324:	add	r5, pc, r5
   15328:	ldr	r1, [r5, #4]
   1532c:	ldr	r0, [pc, #412]	; 154d0 <rb_select_poll+0x1bc>
   15330:	ldr	r0, [pc, r0]
   15334:	add	r1, r1, #1
   15338:	bl	5268 <poll@plt>
   1533c:	mov	r4, r0
   15340:	bl	5208 <rb_set_time@plt>
   15344:	cmn	r4, #1
   15348:	ble	154ac <rb_select_poll+0x198>
   1534c:	mov	r0, #0
   15350:	cmp	r4, #0
   15354:	beq	154c8 <rb_select_poll+0x1b4>
   15358:	ldr	r1, [r5, #4]
   1535c:	cmp	r1, #0
   15360:	bmi	154c8 <rb_select_poll+0x1b4>
   15364:	ldr	r9, [pc, #360]	; 154d4 <rb_select_poll+0x1c0>
   15368:	mov	r8, #0
   1536c:	mov	r0, #0
   15370:	ldr	r9, [pc, r9]
   15374:	b	15388 <rb_select_poll+0x74>
   15378:	ldr	r1, [r5, #4]
   1537c:	add	r0, r6, #1
   15380:	cmp	r6, r1
   15384:	bge	154c4 <rb_select_poll+0x1b0>
   15388:	ldr	r1, [pc, #328]	; 154d8 <rb_select_poll+0x1c4>
   1538c:	mov	r6, r0
   15390:	ldr	r1, [pc, r1]
   15394:	ldr	r0, [r1, r0, lsl #3]!
   15398:	ldrsh	r7, [r1, #6]
   1539c:	cmp	r7, #0
   153a0:	beq	15378 <rb_select_poll+0x64>
   153a4:	cmp	r0, #0
   153a8:	bmi	15378 <rb_select_poll+0x64>
   153ac:	eor	r1, r0, r0, lsr #12
   153b0:	ldr	r2, [r9]
   153b4:	bfc	r1, #12, #20
   153b8:	eor	r1, r1, r0, lsr #24
   153bc:	add	r1, r1, r1, lsl #1
   153c0:	ldr	r1, [r2, r1, lsl #2]
   153c4:	cmp	r1, #0
   153c8:	beq	15378 <rb_select_poll+0x64>
   153cc:	ldr	r4, [r1]
   153d0:	ldr	r2, [r4, #12]
   153d4:	cmp	r2, r0
   153d8:	beq	153ec <rb_select_poll+0xd8>
   153dc:	ldr	r1, [r1, #8]
   153e0:	cmp	r1, #0
   153e4:	bne	153cc <rb_select_poll+0xb8>
   153e8:	b	15378 <rb_select_poll+0x64>
   153ec:	cmp	r4, #0
   153f0:	beq	15378 <rb_select_poll+0x64>
   153f4:	tst	r7, #89	; 0x59
   153f8:	beq	1541c <rb_select_poll+0x108>
   153fc:	ldr	r2, [r4, #28]
   15400:	ldr	r1, [r4, #32]
   15404:	str	r8, [r4, #28]
   15408:	str	r8, [r4, #32]
   1540c:	cmp	r2, #0
   15410:	beq	1541c <rb_select_poll+0x108>
   15414:	mov	r0, r4
   15418:	blx	r2
   1541c:	tst	r7, #284	; 0x11c
   15420:	ldrbne	r0, [r4, #16]
   15424:	andsne	r0, r0, #1
   15428:	bne	15448 <rb_select_poll+0x134>
   1542c:	ldr	r0, [r4, #28]
   15430:	cmp	r0, #0
   15434:	beq	15474 <rb_select_poll+0x160>
   15438:	ldr	r0, [r4, #36]	; 0x24
   1543c:	cmp	r0, #0
   15440:	bne	15378 <rb_select_poll+0x64>
   15444:	b	15494 <rb_select_poll+0x180>
   15448:	ldr	r2, [r4, #36]	; 0x24
   1544c:	ldr	r1, [r4, #40]	; 0x28
   15450:	str	r8, [r4, #36]	; 0x24
   15454:	str	r8, [r4, #40]	; 0x28
   15458:	cmp	r2, #0
   1545c:	beq	1542c <rb_select_poll+0x118>
   15460:	mov	r0, r4
   15464:	blx	r2
   15468:	ldr	r0, [r4, #28]
   1546c:	cmp	r0, #0
   15470:	bne	15438 <rb_select_poll+0x124>
   15474:	mov	r0, r4
   15478:	mov	r1, #1
   1547c:	mov	r2, #0
   15480:	mov	r3, #0
   15484:	bl	15150 <rb_setselect_poll>
   15488:	ldr	r0, [r4, #36]	; 0x24
   1548c:	cmp	r0, #0
   15490:	bne	15378 <rb_select_poll+0x64>
   15494:	mov	r0, r4
   15498:	mov	r1, #2
   1549c:	mov	r2, #0
   154a0:	mov	r3, #0
   154a4:	bl	15150 <rb_setselect_poll>
   154a8:	b	15378 <rb_select_poll+0x64>
   154ac:	bl	552c <__errno_location@plt>
   154b0:	ldr	r0, [r0]
   154b4:	bl	4cbc <rb_ignore_errno@plt>
   154b8:	cmp	r0, #0
   154bc:	movwne	r0, #5
   154c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154c4:	mov	r0, #0
   154c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154cc:	.word	0x000358c8
   154d0:	.word	0x000358bc
   154d4:	.word	0x00018010
   154d8:	.word	0x0003585c

000154dc <rb_ports_supports_event>:
   154dc:	push	{fp, lr}
   154e0:	mov	fp, sp
   154e4:	bl	552c <__errno_location@plt>
   154e8:	mov	r1, #38	; 0x26
   154ec:	str	r1, [r0]
   154f0:	mov	r0, #0
   154f4:	pop	{fp, pc}

000154f8 <rb_ports_init_event>:
   154f8:	bx	lr

000154fc <rb_ports_sched_event>:
   154fc:	push	{fp, lr}
   15500:	mov	fp, sp
   15504:	bl	552c <__errno_location@plt>
   15508:	mov	r1, #38	; 0x26
   1550c:	str	r1, [r0]
   15510:	mvn	r0, #0
   15514:	pop	{fp, pc}

00015518 <rb_ports_unsched_event>:
   15518:	bx	lr

0001551c <rb_init_netio_ports>:
   1551c:	mov	r0, #38	; 0x26
   15520:	bx	lr

00015524 <rb_setselect_ports>:
   15524:	push	{fp, lr}
   15528:	mov	fp, sp
   1552c:	bl	552c <__errno_location@plt>
   15530:	mov	r1, #38	; 0x26
   15534:	str	r1, [r0]
   15538:	pop	{fp, pc}

0001553c <rb_select_ports>:
   1553c:	push	{fp, lr}
   15540:	mov	fp, sp
   15544:	bl	552c <__errno_location@plt>
   15548:	mov	r1, #38	; 0x26
   1554c:	str	r1, [r0]
   15550:	mvn	r0, #0
   15554:	pop	{fp, pc}

00015558 <rb_setup_fd_ports>:
   15558:	push	{fp, lr}
   1555c:	mov	fp, sp
   15560:	bl	552c <__errno_location@plt>
   15564:	mov	r1, #38	; 0x26
   15568:	str	r1, [r0]
   1556c:	mvn	r0, #0
   15570:	pop	{fp, pc}

00015574 <rb_init_netio_sigio>:
   15574:	push	{r4, r5, r6, sl, fp, lr}
   15578:	add	fp, sp, #16
   1557c:	bl	4d34 <rb_getmaxconnect@plt>
   15580:	lsl	r1, r0, #3
   15584:	mov	r0, #1
   15588:	bl	4e9c <calloc@plt>
   1558c:	cmp	r0, #0
   15590:	beq	15640 <rb_init_netio_sigio+0xcc>
   15594:	ldr	r4, [pc, #168]	; 15644 <rb_init_netio_sigio+0xd0>
   15598:	ldr	r4, [pc, r4]
   1559c:	str	r0, [r4]
   155a0:	bl	4d34 <rb_getmaxconnect@plt>
   155a4:	str	r0, [r4, #8]
   155a8:	bl	4d34 <rb_getmaxconnect@plt>
   155ac:	cmp	r0, #1
   155b0:	blt	155d4 <rb_init_netio_sigio+0x60>
   155b4:	mov	r5, #0
   155b8:	mvn	r6, #0
   155bc:	ldr	r0, [r4]
   155c0:	str	r6, [r0, r5, lsl #3]
   155c4:	add	r5, r5, #1
   155c8:	bl	4d34 <rb_getmaxconnect@plt>
   155cc:	cmp	r5, r0
   155d0:	blt	155bc <rb_init_netio_sigio+0x48>
   155d4:	ldr	r0, [pc, #108]	; 15648 <rb_init_netio_sigio+0xd4>
   155d8:	mov	r1, #1
   155dc:	add	r0, pc, r0
   155e0:	strb	r1, [r0]
   155e4:	mov	r0, #0
   155e8:	str	r0, [r4, #4]
   155ec:	ldr	r4, [pc, #88]	; 1564c <rb_init_netio_sigio+0xd8>
   155f0:	add	r4, pc, r4
   155f4:	mov	r0, r4
   155f8:	bl	4c74 <sigemptyset@plt>
   155fc:	bl	4d4c <__libc_current_sigrtmin@plt>
   15600:	mov	r1, r0
   15604:	mov	r0, r4
   15608:	bl	5118 <sigaddset@plt>
   1560c:	mov	r0, r4
   15610:	mov	r1, #29
   15614:	bl	5118 <sigaddset@plt>
   15618:	bl	4d4c <__libc_current_sigrtmin@plt>
   1561c:	add	r1, r0, #1
   15620:	mov	r0, r4
   15624:	bl	5118 <sigaddset@plt>
   15628:	mov	r0, #0
   1562c:	mov	r1, r4
   15630:	mov	r2, #0
   15634:	bl	5220 <sigprocmask@plt>
   15638:	mov	r0, #0
   1563c:	pop	{r4, r5, r6, sl, fp, pc}
   15640:	bl	51fc <rb_outofmemory@plt>
   15644:	.word	0x00017df8
   15648:	.word	0x0003569c
   1564c:	.word	0x00035608

00015650 <rb_setup_fd_sigio>:
   15650:	push	{r4, r5, r6, sl, fp, lr}
   15654:	add	fp, sp, #16
   15658:	ldr	r5, [r0, #12]
   1565c:	mov	r1, #3
   15660:	mov	r2, #0
   15664:	mov	r4, #0
   15668:	mov	r0, r5
   1566c:	bl	5448 <fcntl@plt>
   15670:	cmn	r0, #1
   15674:	beq	156ec <rb_setup_fd_sigio+0x9c>
   15678:	mov	r6, r0
   1567c:	tst	r0, #8192	; 0x2000
   15680:	beq	15698 <rb_setup_fd_sigio+0x48>
   15684:	bic	r6, r6, #8192	; 0x2000
   15688:	mov	r0, r5
   1568c:	mov	r1, #4
   15690:	mov	r2, r6
   15694:	bl	5448 <fcntl@plt>
   15698:	orr	r2, r6, #10240	; 0x2800
   1569c:	mov	r0, r5
   156a0:	mov	r1, #4
   156a4:	bl	5448 <fcntl@plt>
   156a8:	cmn	r0, #1
   156ac:	beq	156ec <rb_setup_fd_sigio+0x9c>
   156b0:	bl	4d4c <__libc_current_sigrtmin@plt>
   156b4:	mov	r2, r0
   156b8:	mov	r0, r5
   156bc:	mov	r1, #10
   156c0:	bl	5448 <fcntl@plt>
   156c4:	cmn	r0, #1
   156c8:	beq	156ec <rb_setup_fd_sigio+0x9c>
   156cc:	bl	531c <getpid@plt>
   156d0:	mov	r2, r0
   156d4:	mov	r0, r5
   156d8:	mov	r1, #8
   156dc:	bl	5448 <fcntl@plt>
   156e0:	mvn	r1, #0
   156e4:	subs	r4, r0, r1
   156e8:	movwne	r4, #1
   156ec:	mov	r0, r4
   156f0:	pop	{r4, r5, r6, sl, fp, pc}

000156f4 <rb_setselect_sigio>:
   156f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156f8:	add	fp, sp, #24
   156fc:	cmp	r0, #0
   15700:	beq	15790 <rb_setselect_sigio+0x9c>
   15704:	mov	r4, r0
   15708:	tst	r1, #1
   1570c:	beq	1572c <rb_setselect_sigio+0x38>
   15710:	str	r2, [r4, #28]
   15714:	str	r3, [r4, #32]
   15718:	cmp	r2, #0
   1571c:	ldr	r0, [r4, #20]
   15720:	orr	r7, r0, #64	; 0x40
   15724:	biceq	r7, r0, #64	; 0x40
   15728:	str	r7, [r4, #20]
   1572c:	tst	r1, #2
   15730:	beq	15750 <rb_setselect_sigio+0x5c>
   15734:	str	r2, [r4, #36]	; 0x24
   15738:	str	r3, [r4, #40]	; 0x28
   1573c:	cmp	r2, #0
   15740:	ldr	r0, [r4, #20]
   15744:	orr	r1, r0, #256	; 0x100
   15748:	biceq	r1, r0, #256	; 0x100
   1574c:	str	r1, [r4, #20]
   15750:	ldr	r0, [r4, #12]
   15754:	ldr	r6, [pc, #320]	; 1589c <rb_setselect_sigio+0x1a8>
   15758:	ldr	r6, [pc, r6]
   1575c:	ldr	r5, [r6, #8]
   15760:	cmp	r5, r0
   15764:	ble	157f0 <rb_setselect_sigio+0xfc>
   15768:	ldr	r1, [r4, #20]
   1576c:	cmp	r1, #0
   15770:	ble	15794 <rb_setselect_sigio+0xa0>
   15774:	ldr	r0, [r4, #12]
   15778:	ldr	r2, [r6]
   1577c:	str	r0, [r2, r0, lsl #3]!
   15780:	strh	r1, [r2, #4]
   15784:	ldr	r1, [r6, #4]
   15788:	cmp	r0, r1
   1578c:	strgt	r0, [r6, #4]
   15790:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15794:	ldr	r0, [r6]
   15798:	ldr	r1, [r4, #12]
   1579c:	mvn	r2, #0
   157a0:	mov	r3, r0
   157a4:	str	r2, [r3, r1, lsl #3]!
   157a8:	mov	r2, #0
   157ac:	strh	r2, [r3, #4]
   157b0:	ldr	r2, [r6, #4]
   157b4:	cmp	r1, r2
   157b8:	bne	15790 <rb_setselect_sigio+0x9c>
   157bc:	cmp	r2, #0
   157c0:	bmi	15790 <rb_setselect_sigio+0x9c>
   157c4:	sub	r2, r1, #1
   157c8:	mov	r1, r2
   157cc:	add	r2, r2, #1
   157d0:	cmp	r2, #1
   157d4:	blt	157e8 <rb_setselect_sigio+0xf4>
   157d8:	ldr	r3, [r0, r1, lsl #3]
   157dc:	sub	r2, r1, #1
   157e0:	cmn	r3, #1
   157e4:	beq	157c8 <rb_setselect_sigio+0xd4>
   157e8:	str	r1, [r6, #4]
   157ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157f0:	add	r1, r5, #1024	; 0x400
   157f4:	str	r1, [r6, #8]
   157f8:	lsl	r1, r1, #3
   157fc:	ldr	r0, [r6]
   15800:	bl	5484 <realloc@plt>
   15804:	cmp	r0, #0
   15808:	beq	15898 <rb_setselect_sigio+0x1a4>
   1580c:	add	r7, r5, #1
   15810:	mov	r8, r0
   15814:	str	r0, [r6]
   15818:	mov	r1, #0
   1581c:	mov	r2, #8192	; 0x2000
   15820:	add	r0, r0, r7, lsl #3
   15824:	bl	4ed8 <memset@plt>
   15828:	ldr	r0, [r6, #8]
   1582c:	cmp	r7, r0
   15830:	bge	15768 <rb_setselect_sigio+0x74>
   15834:	mvn	r2, r5
   15838:	sub	r1, r0, r5
   1583c:	add	r2, r0, r2
   15840:	sub	r1, r1, #2
   15844:	ands	r2, r2, #3
   15848:	beq	15860 <rb_setselect_sigio+0x16c>
   1584c:	mvn	r3, #0
   15850:	str	r3, [r8, r7, lsl #3]
   15854:	subs	r2, r2, #1
   15858:	add	r7, r7, #1
   1585c:	bne	15850 <rb_setselect_sigio+0x15c>
   15860:	cmp	r1, #3
   15864:	bcc	15768 <rb_setselect_sigio+0x74>
   15868:	add	r1, r8, r7, lsl #3
   1586c:	sub	r0, r0, r7
   15870:	mvn	r2, #0
   15874:	add	r1, r1, #16
   15878:	str	r2, [r1, #8]
   1587c:	str	r2, [r1]
   15880:	str	r2, [r1, #-8]
   15884:	str	r2, [r1, #-16]
   15888:	add	r1, r1, #32
   1588c:	subs	r0, r0, #4
   15890:	bne	15878 <rb_setselect_sigio+0x184>
   15894:	b	15768 <rb_setselect_sigio+0x74>
   15898:	bl	51fc <rb_outofmemory@plt>
   1589c:	.word	0x00017c38

000158a0 <rb_select_sigio>:
   158a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158a4:	add	fp, sp, #28
   158a8:	sub	sp, sp, #140	; 0x8c
   158ac:	ldr	r6, [pc, #1180]	; 15d50 <rb_select_sigio+0x4b0>
   158b0:	mov	r4, r0
   158b4:	add	r6, pc, r6
   158b8:	ldr	r0, [r6, #4]
   158bc:	cmn	r0, #1
   158c0:	beq	158fc <rb_select_sigio+0x5c>
   158c4:	cmp	r0, #1
   158c8:	beq	15924 <rb_select_sigio+0x84>
   158cc:	mov	r0, #0
   158d0:	add	r1, sp, #12
   158d4:	add	r2, sp, #4
   158d8:	str	r0, [sp, #20]
   158dc:	mov	r0, #26
   158e0:	str	r0, [sp, #16]
   158e4:	mov	r0, #0
   158e8:	bl	4df4 <timer_create@plt>
   158ec:	cmp	r0, #0
   158f0:	beq	15914 <rb_select_sigio+0x74>
   158f4:	mvn	r0, #0
   158f8:	str	r0, [r6, #4]
   158fc:	cmp	r4, #0
   15900:	bpl	15924 <rb_select_sigio+0x84>
   15904:	ldrb	r0, [r6]
   15908:	cmp	r0, #0
   1590c:	beq	15960 <rb_select_sigio+0xc0>
   15910:	b	15b78 <rb_select_sigio+0x2d8>
   15914:	ldr	r0, [sp, #4]
   15918:	bl	52d4 <timer_delete@plt>
   1591c:	mov	r0, #1
   15920:	str	r0, [r6, #4]
   15924:	movw	r0, #19923	; 0x4dd3
   15928:	movt	r0, #4194	; 0x1062
   1592c:	smmul	r0, r4, r0
   15930:	asr	r1, r0, #6
   15934:	add	r0, r1, r0, lsr #31
   15938:	mov	r1, #1000	; 0x3e8
   1593c:	str	r0, [sp, #4]
   15940:	mls	r0, r0, r1, r4
   15944:	movw	r1, #16960	; 0x4240
   15948:	movt	r1, #15
   1594c:	mul	r0, r0, r1
   15950:	str	r0, [sp, #8]
   15954:	ldrb	r0, [r6]
   15958:	cmp	r0, #0
   1595c:	bne	15b78 <rb_select_sigio+0x2d8>
   15960:	ldr	r9, [pc, #1004]	; 15d54 <rb_select_sigio+0x4b4>
   15964:	ldr	sl, [pc, #1004]	; 15d58 <rb_select_sigio+0x4b8>
   15968:	add	r5, sp, #12
   1596c:	add	r8, sp, #4
   15970:	ldr	sl, [pc, sl]
   15974:	add	r9, pc, r9
   15978:	cmp	r4, #0
   1597c:	bpl	15990 <rb_select_sigio+0xf0>
   15980:	b	15a18 <rb_select_sigio+0x178>
   15984:	ldrb	r0, [r6]
   15988:	cmp	r0, #0
   1598c:	bne	15b78 <rb_select_sigio+0x2d8>
   15990:	ldr	r0, [r6, #4]
   15994:	cmp	r0, #0
   15998:	beq	159ec <rb_select_sigio+0x14c>
   1599c:	mov	r0, r9
   159a0:	mov	r1, r5
   159a4:	bl	4d40 <sigwaitinfo@plt>
   159a8:	mov	r7, r0
   159ac:	cmp	r0, #1
   159b0:	blt	15b50 <rb_select_sigio+0x2b0>
   159b4:	cmp	r7, #29
   159b8:	beq	15b64 <rb_select_sigio+0x2c4>
   159bc:	bl	4d4c <__libc_current_sigrtmin@plt>
   159c0:	add	r0, r0, #1
   159c4:	cmp	r7, r0
   159c8:	bne	15a68 <rb_select_sigio+0x1c8>
   159cc:	ldr	r0, [r6, #4]
   159d0:	cmp	r0, #0
   159d4:	beq	15a68 <rb_select_sigio+0x1c8>
   159d8:	ldr	r0, [sp, #32]
   159dc:	cmp	r0, #0
   159e0:	beq	15984 <rb_select_sigio+0xe4>
   159e4:	bl	513c <rb_run_one_event@plt>
   159e8:	b	15984 <rb_select_sigio+0xe4>
   159ec:	mov	r0, r9
   159f0:	mov	r1, r5
   159f4:	mov	r2, r8
   159f8:	bl	4d88 <sigtimedwait@plt>
   159fc:	mov	r7, r0
   15a00:	cmp	r0, #1
   15a04:	bge	159b4 <rb_select_sigio+0x114>
   15a08:	b	15b50 <rb_select_sigio+0x2b0>
   15a0c:	ldrb	r0, [r6]
   15a10:	cmp	r0, #0
   15a14:	bne	15b78 <rb_select_sigio+0x2d8>
   15a18:	mov	r0, r9
   15a1c:	mov	r1, r5
   15a20:	bl	4d40 <sigwaitinfo@plt>
   15a24:	cmp	r0, #1
   15a28:	blt	15b50 <rb_select_sigio+0x2b0>
   15a2c:	mov	r7, r0
   15a30:	cmp	r0, #29
   15a34:	beq	15b64 <rb_select_sigio+0x2c4>
   15a38:	bl	4d4c <__libc_current_sigrtmin@plt>
   15a3c:	add	r0, r0, #1
   15a40:	cmp	r7, r0
   15a44:	bne	15a68 <rb_select_sigio+0x1c8>
   15a48:	ldr	r0, [r6, #4]
   15a4c:	cmp	r0, #0
   15a50:	beq	15a68 <rb_select_sigio+0x1c8>
   15a54:	ldr	r0, [sp, #32]
   15a58:	cmp	r0, #0
   15a5c:	beq	15a0c <rb_select_sigio+0x16c>
   15a60:	bl	513c <rb_run_one_event@plt>
   15a64:	b	15a0c <rb_select_sigio+0x16c>
   15a68:	ldr	r0, [sp, #28]
   15a6c:	ldr	r1, [sl]
   15a70:	ldrh	r3, [sp, #24]
   15a74:	add	r1, r1, r0, lsl #3
   15a78:	cmp	r0, #0
   15a7c:	ldrh	r2, [r1, #6]
   15a80:	orr	r2, r2, r3
   15a84:	strh	r2, [r1, #6]
   15a88:	bmi	15b38 <rb_select_sigio+0x298>
   15a8c:	ldr	r3, [pc, #720]	; 15d64 <rb_select_sigio+0x4c4>
   15a90:	eor	r1, r0, r0, lsr #12
   15a94:	bfc	r1, #12, #20
   15a98:	ldr	r3, [pc, r3]
   15a9c:	eor	r1, r1, r0, lsr #24
   15aa0:	add	r1, r1, r1, lsl #1
   15aa4:	ldr	r3, [r3]
   15aa8:	ldr	r1, [r3, r1, lsl #2]
   15aac:	cmp	r1, #0
   15ab0:	beq	15b38 <rb_select_sigio+0x298>
   15ab4:	sxth	sl, r2
   15ab8:	ldr	r7, [r1]
   15abc:	ldr	r2, [r7, #12]
   15ac0:	cmp	r2, r0
   15ac4:	beq	15ad8 <rb_select_sigio+0x238>
   15ac8:	ldr	r1, [r1, #8]
   15acc:	cmp	r1, #0
   15ad0:	bne	15ab8 <rb_select_sigio+0x218>
   15ad4:	b	15b38 <rb_select_sigio+0x298>
   15ad8:	cmp	r7, #0
   15adc:	beq	15b38 <rb_select_sigio+0x298>
   15ae0:	tst	sl, #89	; 0x59
   15ae4:	beq	15b0c <rb_select_sigio+0x26c>
   15ae8:	ldr	r2, [r7, #28]
   15aec:	ldr	r1, [r7, #32]
   15af0:	mov	r0, #0
   15af4:	str	r0, [r7, #28]
   15af8:	str	r0, [r7, #32]
   15afc:	cmp	r2, #0
   15b00:	beq	15b0c <rb_select_sigio+0x26c>
   15b04:	mov	r0, r7
   15b08:	blx	r2
   15b0c:	tst	sl, #284	; 0x11c
   15b10:	beq	15b38 <rb_select_sigio+0x298>
   15b14:	ldr	r2, [r7, #36]	; 0x24
   15b18:	ldr	r1, [r7, #40]	; 0x28
   15b1c:	mov	r0, #0
   15b20:	str	r0, [r7, #36]	; 0x24
   15b24:	str	r0, [r7, #40]	; 0x28
   15b28:	cmp	r2, #0
   15b2c:	beq	15b38 <rb_select_sigio+0x298>
   15b30:	mov	r0, r7
   15b34:	blx	r2
   15b38:	ldrb	r0, [r6]
   15b3c:	ldr	sl, [pc, #548]	; 15d68 <rb_select_sigio+0x4c8>
   15b40:	ldr	sl, [pc, sl]
   15b44:	cmp	r0, #0
   15b48:	beq	15978 <rb_select_sigio+0xd8>
   15b4c:	b	15b78 <rb_select_sigio+0x2d8>
   15b50:	ldrb	r0, [r6]
   15b54:	cmp	r0, #0
   15b58:	bne	15b78 <rb_select_sigio+0x2d8>
   15b5c:	bl	5208 <rb_set_time@plt>
   15b60:	b	15d1c <rb_select_sigio+0x47c>
   15b64:	ldr	r0, [pc, #496]	; 15d5c <rb_select_sigio+0x4bc>
   15b68:	add	r0, pc, r0
   15b6c:	bl	519c <rb_lib_log@plt>
   15b70:	mov	r0, #1
   15b74:	strb	r0, [r6]
   15b78:	bl	4d4c <__libc_current_sigrtmin@plt>
   15b7c:	mov	r1, #1
   15b80:	bl	4da0 <signal@plt>
   15b84:	bl	4d4c <__libc_current_sigrtmin@plt>
   15b88:	mov	r1, #0
   15b8c:	mov	r5, #0
   15b90:	bl	4da0 <signal@plt>
   15b94:	strb	r5, [r6]
   15b98:	mov	r2, r4
   15b9c:	ldr	r6, [pc, #444]	; 15d60 <rb_select_sigio+0x4c0>
   15ba0:	ldr	r6, [pc, r6]
   15ba4:	ldm	r6, {r0, r1}
   15ba8:	add	r1, r1, #1
   15bac:	bl	5268 <poll@plt>
   15bb0:	mov	r4, r0
   15bb4:	bl	5208 <rb_set_time@plt>
   15bb8:	cmn	r4, #1
   15bbc:	ble	15d2c <rb_select_sigio+0x48c>
   15bc0:	cmp	r4, #0
   15bc4:	beq	15d20 <rb_select_sigio+0x480>
   15bc8:	ldr	r0, [r6, #4]
   15bcc:	cmp	r0, #0
   15bd0:	bmi	15d20 <rb_select_sigio+0x480>
   15bd4:	ldr	r9, [pc, #400]	; 15d6c <rb_select_sigio+0x4cc>
   15bd8:	mov	r8, #0
   15bdc:	mov	r0, #0
   15be0:	ldr	r9, [pc, r9]
   15be4:	b	15bf8 <rb_select_sigio+0x358>
   15be8:	ldr	r1, [r6, #4]
   15bec:	add	r0, r5, #1
   15bf0:	cmp	r5, r1
   15bf4:	bge	15d1c <rb_select_sigio+0x47c>
   15bf8:	mov	r5, r0
   15bfc:	ldr	r0, [r6]
   15c00:	add	r1, r0, r5, lsl #3
   15c04:	ldrsh	r7, [r1, #6]
   15c08:	cmp	r7, #0
   15c0c:	beq	15be8 <rb_select_sigio+0x348>
   15c10:	ldr	r0, [r0, r5, lsl #3]
   15c14:	cmp	r0, #0
   15c18:	bmi	15be8 <rb_select_sigio+0x348>
   15c1c:	eor	r1, r0, r0, lsr #12
   15c20:	ldr	r2, [r9]
   15c24:	bfc	r1, #12, #20
   15c28:	eor	r1, r1, r0, lsr #24
   15c2c:	add	r1, r1, r1, lsl #1
   15c30:	ldr	r1, [r2, r1, lsl #2]
   15c34:	cmp	r1, #0
   15c38:	beq	15be8 <rb_select_sigio+0x348>
   15c3c:	ldr	r4, [r1]
   15c40:	ldr	r2, [r4, #12]
   15c44:	cmp	r2, r0
   15c48:	beq	15c5c <rb_select_sigio+0x3bc>
   15c4c:	ldr	r1, [r1, #8]
   15c50:	cmp	r1, #0
   15c54:	bne	15c3c <rb_select_sigio+0x39c>
   15c58:	b	15be8 <rb_select_sigio+0x348>
   15c5c:	cmp	r4, #0
   15c60:	beq	15be8 <rb_select_sigio+0x348>
   15c64:	tst	r7, #89	; 0x59
   15c68:	beq	15c8c <rb_select_sigio+0x3ec>
   15c6c:	ldr	r2, [r4, #28]
   15c70:	ldr	r1, [r4, #32]
   15c74:	str	r8, [r4, #28]
   15c78:	str	r8, [r4, #32]
   15c7c:	cmp	r2, #0
   15c80:	beq	15c8c <rb_select_sigio+0x3ec>
   15c84:	mov	r0, r4
   15c88:	blx	r2
   15c8c:	tst	r7, #284	; 0x11c
   15c90:	ldrbne	r0, [r4, #16]
   15c94:	andsne	r0, r0, #1
   15c98:	bne	15cb8 <rb_select_sigio+0x418>
   15c9c:	ldr	r0, [r4, #28]
   15ca0:	cmp	r0, #0
   15ca4:	beq	15ce4 <rb_select_sigio+0x444>
   15ca8:	ldr	r0, [r4, #36]	; 0x24
   15cac:	cmp	r0, #0
   15cb0:	bne	15be8 <rb_select_sigio+0x348>
   15cb4:	b	15d04 <rb_select_sigio+0x464>
   15cb8:	ldr	r2, [r4, #36]	; 0x24
   15cbc:	ldr	r1, [r4, #40]	; 0x28
   15cc0:	str	r8, [r4, #36]	; 0x24
   15cc4:	str	r8, [r4, #40]	; 0x28
   15cc8:	cmp	r2, #0
   15ccc:	beq	15c9c <rb_select_sigio+0x3fc>
   15cd0:	mov	r0, r4
   15cd4:	blx	r2
   15cd8:	ldr	r0, [r4, #28]
   15cdc:	cmp	r0, #0
   15ce0:	bne	15ca8 <rb_select_sigio+0x408>
   15ce4:	mov	r0, r4
   15ce8:	mov	r1, #1
   15cec:	mov	r2, #0
   15cf0:	mov	r3, #0
   15cf4:	bl	156f4 <rb_setselect_sigio>
   15cf8:	ldr	r0, [r4, #36]	; 0x24
   15cfc:	cmp	r0, #0
   15d00:	bne	15be8 <rb_select_sigio+0x348>
   15d04:	mov	r0, r4
   15d08:	mov	r1, #2
   15d0c:	mov	r2, #0
   15d10:	mov	r3, #0
   15d14:	bl	156f4 <rb_setselect_sigio>
   15d18:	b	15be8 <rb_select_sigio+0x348>
   15d1c:	mov	r5, #0
   15d20:	mov	r0, r5
   15d24:	sub	sp, fp, #28
   15d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d2c:	bl	552c <__errno_location@plt>
   15d30:	ldr	r0, [r0]
   15d34:	bl	4cbc <rb_ignore_errno@plt>
   15d38:	cmp	r0, #0
   15d3c:	mov	r5, r0
   15d40:	movwne	r5, #5
   15d44:	mov	r0, r5
   15d48:	sub	sp, fp, #28
   15d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d50:	.word	0x000353c4
   15d54:	.word	0x00035284
   15d58:	.word	0x00017a20
   15d5c:	.word	0x00006218
   15d60:	.word	0x000177f0
   15d64:	.word	0x000178e8
   15d68:	.word	0x00017850
   15d6c:	.word	0x000177a0

00015d70 <rb_sigio_supports_event>:
   15d70:	push	{r4, r5, fp, lr}
   15d74:	add	fp, sp, #8
   15d78:	sub	sp, sp, #72	; 0x48
   15d7c:	ldr	r5, [pc, #124]	; 15e00 <rb_sigio_supports_event+0x90>
   15d80:	add	r5, pc, r5
   15d84:	ldr	r4, [r5, #4]
   15d88:	cmp	r4, #1
   15d8c:	beq	15d9c <rb_sigio_supports_event+0x2c>
   15d90:	cmn	r4, #1
   15d94:	bne	15da8 <rb_sigio_supports_event+0x38>
   15d98:	mov	r4, #0
   15d9c:	mov	r0, r4
   15da0:	sub	sp, fp, #8
   15da4:	pop	{r4, r5, fp, pc}
   15da8:	mov	r4, #0
   15dac:	mov	r0, #26
   15db0:	add	r1, sp, #4
   15db4:	sub	r2, fp, #12
   15db8:	str	r4, [sp, #12]
   15dbc:	str	r0, [sp, #8]
   15dc0:	mov	r0, #0
   15dc4:	bl	4df4 <timer_create@plt>
   15dc8:	cmp	r0, #0
   15dcc:	beq	15de4 <rb_sigio_supports_event+0x74>
   15dd0:	mvn	r0, #0
   15dd4:	str	r0, [r5, #4]
   15dd8:	mov	r0, r4
   15ddc:	sub	sp, fp, #8
   15de0:	pop	{r4, r5, fp, pc}
   15de4:	ldr	r0, [fp, #-12]
   15de8:	bl	52d4 <timer_delete@plt>
   15dec:	mov	r4, #1
   15df0:	str	r4, [r5, #4]
   15df4:	mov	r0, r4
   15df8:	sub	sp, fp, #8
   15dfc:	pop	{r4, r5, fp, pc}
   15e00:	.word	0x00034ef8

00015e04 <rb_sigio_init_event>:
   15e04:	push	{r4, sl, fp, lr}
   15e08:	add	fp, sp, #8
   15e0c:	sub	sp, sp, #72	; 0x48
   15e10:	ldr	r4, [pc, #104]	; 15e80 <rb_sigio_init_event+0x7c>
   15e14:	add	r4, pc, r4
   15e18:	ldr	r0, [r4, #4]
   15e1c:	cmn	r0, #1
   15e20:	cmpne	r0, #1
   15e24:	bne	15e30 <rb_sigio_init_event+0x2c>
   15e28:	sub	sp, fp, #8
   15e2c:	pop	{r4, sl, fp, pc}
   15e30:	mov	r0, #0
   15e34:	add	r1, sp, #4
   15e38:	sub	r2, fp, #12
   15e3c:	str	r0, [sp, #12]
   15e40:	mov	r0, #26
   15e44:	str	r0, [sp, #8]
   15e48:	mov	r0, #0
   15e4c:	bl	4df4 <timer_create@plt>
   15e50:	cmp	r0, #0
   15e54:	beq	15e68 <rb_sigio_init_event+0x64>
   15e58:	mvn	r0, #0
   15e5c:	str	r0, [r4, #4]
   15e60:	sub	sp, fp, #8
   15e64:	pop	{r4, sl, fp, pc}
   15e68:	ldr	r0, [fp, #-12]
   15e6c:	bl	52d4 <timer_delete@plt>
   15e70:	mov	r0, #1
   15e74:	str	r0, [r4, #4]
   15e78:	sub	sp, fp, #8
   15e7c:	pop	{r4, sl, fp, pc}
   15e80:	.word	0x00034e64

00015e84 <rb_sigio_sched_event>:
   15e84:	push	{r4, r5, r6, r7, fp, lr}
   15e88:	add	fp, sp, #16
   15e8c:	sub	sp, sp, #80	; 0x50
   15e90:	mov	r4, r0
   15e94:	ldr	r0, [pc, #308]	; 15fd0 <rb_sigio_sched_event+0x14c>
   15e98:	add	r0, pc, r0
   15e9c:	ldr	r0, [r0, #4]
   15ea0:	cmp	r0, #1
   15ea4:	blt	15fbc <rb_sigio_sched_event+0x138>
   15ea8:	vmov.i32	q8, #0	; 0x00000000
   15eac:	mov	r5, r1
   15eb0:	add	r1, sp, #16
   15eb4:	mov	r0, #48	; 0x30
   15eb8:	mov	r2, r1
   15ebc:	vst1.64	{d16-d17}, [r2], r0
   15ec0:	add	r0, r1, #32
   15ec4:	vst1.64	{d16-d17}, [r0]
   15ec8:	add	r0, r1, #16
   15ecc:	mov	r1, #4
   15ed0:	vst1.64	{d16-d17}, [r2]
   15ed4:	vst1.64	{d16-d17}, [r0]
   15ed8:	mov	r0, #1
   15edc:	bl	4e9c <calloc@plt>
   15ee0:	cmp	r0, #0
   15ee4:	beq	15fcc <rb_sigio_sched_event+0x148>
   15ee8:	mov	r6, #0
   15eec:	str	r0, [r4, #40]	; 0x28
   15ef0:	mov	r7, r0
   15ef4:	str	r6, [sp, #24]
   15ef8:	bl	4d4c <__libc_current_sigrtmin@plt>
   15efc:	add	r0, r0, #1
   15f00:	str	r4, [sp, #16]
   15f04:	add	r1, sp, #16
   15f08:	mov	r2, r7
   15f0c:	str	r0, [sp, #20]
   15f10:	mov	r0, #0
   15f14:	bl	4df4 <timer_create@plt>
   15f18:	cmn	r0, #1
   15f1c:	ble	15f78 <rb_sigio_sched_event+0xf4>
   15f20:	str	r6, [sp, #4]
   15f24:	str	r6, [sp]
   15f28:	str	r6, [sp, #12]
   15f2c:	str	r5, [sp, #8]
   15f30:	ldr	r0, [r4, #24]
   15f34:	cmp	r0, #0
   15f38:	beq	15f4c <rb_sigio_sched_event+0xc8>
   15f3c:	mov	r0, sp
   15f40:	add	r0, r0, #8
   15f44:	ldrd	r0, [r0]
   15f48:	stm	sp, {r0, r1}
   15f4c:	ldr	r0, [r7]
   15f50:	mov	r2, sp
   15f54:	mov	r1, #0
   15f58:	mov	r3, #0
   15f5c:	bl	4fec <timer_settime@plt>
   15f60:	mov	r6, #1
   15f64:	cmn	r0, #1
   15f68:	ble	15fa0 <rb_sigio_sched_event+0x11c>
   15f6c:	mov	r0, r6
   15f70:	sub	sp, fp, #16
   15f74:	pop	{r4, r5, r6, r7, fp, pc}
   15f78:	bl	552c <__errno_location@plt>
   15f7c:	ldr	r0, [r0]
   15f80:	bl	4c80 <strerror@plt>
   15f84:	mov	r1, r0
   15f88:	ldr	r0, [pc, #68]	; 15fd4 <rb_sigio_sched_event+0x150>
   15f8c:	add	r0, pc, r0
   15f90:	bl	519c <rb_lib_log@plt>
   15f94:	mov	r0, r6
   15f98:	sub	sp, fp, #16
   15f9c:	pop	{r4, r5, r6, r7, fp, pc}
   15fa0:	bl	552c <__errno_location@plt>
   15fa4:	ldr	r0, [r0]
   15fa8:	bl	4c80 <strerror@plt>
   15fac:	mov	r1, r0
   15fb0:	ldr	r0, [pc, #32]	; 15fd8 <rb_sigio_sched_event+0x154>
   15fb4:	add	r0, pc, r0
   15fb8:	bl	519c <rb_lib_log@plt>
   15fbc:	mov	r6, #0
   15fc0:	mov	r0, r6
   15fc4:	sub	sp, fp, #16
   15fc8:	pop	{r4, r5, r6, r7, fp, pc}
   15fcc:	bl	51fc <rb_outofmemory@plt>
   15fd0:	.word	0x00034de0
   15fd4:	.word	0x00005dcf
   15fd8:	.word	0x00005db9

00015fdc <rb_sigio_unsched_event>:
   15fdc:	push	{r4, sl, fp, lr}
   15fe0:	add	fp, sp, #8
   15fe4:	mov	r4, r0
   15fe8:	ldr	r0, [pc, #52]	; 16024 <rb_sigio_unsched_event+0x48>
   15fec:	add	r0, pc, r0
   15ff0:	ldr	r0, [r0, #4]
   15ff4:	cmp	r0, #1
   15ff8:	poplt	{r4, sl, fp, pc}
   15ffc:	ldr	r0, [r4, #40]	; 0x28
   16000:	ldr	r0, [r0]
   16004:	bl	52d4 <timer_delete@plt>
   16008:	ldr	r0, [r4, #40]	; 0x28
   1600c:	cmp	r0, #0
   16010:	beq	16018 <rb_sigio_unsched_event+0x3c>
   16014:	bl	4f8c <free@plt>
   16018:	mov	r0, #0
   1601c:	str	r0, [r4, #40]	; 0x28
   16020:	pop	{r4, sl, fp, pc}
   16024:	.word	0x00034c8c

00016028 <rb_setup_fd_select>:
   16028:	mov	r0, #0
   1602c:	bx	lr

00016030 <rb_init_netio_select>:
   16030:	ldr	r0, [pc, #164]	; 160dc <rb_init_netio_select+0xac>
   16034:	vmov.i32	q8, #0	; 0x00000000
   16038:	ldr	r0, [pc, r0]
   1603c:	ldr	r1, [r0]
   16040:	cmp	r1, #1024	; 0x400
   16044:	movgt	r1, #1024	; 0x400
   16048:	strgt	r1, [r0]
   1604c:	mov	r0, #112	; 0x70
   16050:	ldr	r1, [pc, #136]	; 160e0 <rb_init_netio_select+0xb0>
   16054:	add	r1, pc, r1
   16058:	mov	r2, r1
   1605c:	vst1.64	{d16-d17}, [r2], r0
   16060:	vst1.64	{d16-d17}, [r2]
   16064:	add	r2, r1, #96	; 0x60
   16068:	vst1.64	{d16-d17}, [r2]
   1606c:	add	r2, r1, #80	; 0x50
   16070:	vst1.64	{d16-d17}, [r2]
   16074:	add	r2, r1, #64	; 0x40
   16078:	vst1.64	{d16-d17}, [r2]
   1607c:	add	r2, r1, #48	; 0x30
   16080:	vst1.64	{d16-d17}, [r2]
   16084:	add	r2, r1, #32
   16088:	add	r1, r1, #16
   1608c:	vst1.64	{d16-d17}, [r2]
   16090:	vst1.64	{d16-d17}, [r1]
   16094:	ldr	r1, [pc, #72]	; 160e4 <rb_init_netio_select+0xb4>
   16098:	add	r1, pc, r1
   1609c:	add	r2, r1, #16
   160a0:	vst1.64	{d16-d17}, [r2]
   160a4:	add	r2, r1, #32
   160a8:	vst1.64	{d16-d17}, [r2]
   160ac:	add	r2, r1, #48	; 0x30
   160b0:	vst1.64	{d16-d17}, [r2]
   160b4:	add	r2, r1, #64	; 0x40
   160b8:	vst1.64	{d16-d17}, [r2]
   160bc:	add	r2, r1, #80	; 0x50
   160c0:	vst1.64	{d16-d17}, [r2]
   160c4:	add	r2, r1, #96	; 0x60
   160c8:	vst1.64	{d16-d17}, [r1], r0
   160cc:	mov	r0, #0
   160d0:	vst1.64	{d16-d17}, [r2]
   160d4:	vst1.64	{d16-d17}, [r1]
   160d8:	bx	lr
   160dc:	.word	0x00017328
   160e0:	.word	0x00034c2c
   160e4:	.word	0x00034c68

000160e8 <rb_setselect_select>:
   160e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   160ec:	add	fp, sp, #24
   160f0:	tst	r1, #1
   160f4:	beq	161ec <rb_setselect_select+0x104>
   160f8:	str	r2, [r0, #28]
   160fc:	str	r3, [r0, #32]
   16100:	mov	r6, #1
   16104:	cmp	r2, #0
   16108:	ldr	ip, [r0, #12]
   1610c:	ldr	r5, [pc, #484]	; 162f8 <rb_setselect_select+0x210>
   16110:	and	r7, ip, #31
   16114:	add	r5, pc, r5
   16118:	lsl	r6, r6, r7
   1611c:	asr	r7, ip, #31
   16120:	add	r7, ip, r7, lsr #27
   16124:	asr	r7, r7, #5
   16128:	beq	16144 <rb_setselect_select+0x5c>
   1612c:	ldr	r4, [r5, r7, lsl #2]
   16130:	orr	r6, r4, r6
   16134:	str	r6, [r5, r7, lsl #2]
   16138:	ldr	r7, [r0, #20]
   1613c:	orr	r4, r7, #1
   16140:	b	16158 <rb_setselect_select+0x70>
   16144:	ldr	r4, [r5, r7, lsl #2]
   16148:	bic	r6, r4, r6
   1614c:	str	r6, [r5, r7, lsl #2]
   16150:	ldr	r7, [r0, #20]
   16154:	bic	r4, r7, #1
   16158:	str	r4, [r0, #20]
   1615c:	tst	r4, #3
   16160:	ldr	lr, [pc, #404]	; 162fc <rb_setselect_select+0x214>
   16164:	ldr	lr, [pc, lr]
   16168:	beq	1618c <rb_setselect_select+0xa4>
   1616c:	cmp	ip, lr
   16170:	ble	161ec <rb_setselect_select+0x104>
   16174:	ldr	r7, [pc, #388]	; 16300 <rb_setselect_select+0x218>
   16178:	add	r7, pc, r7
   1617c:	str	ip, [r7]
   16180:	tst	r1, #2
   16184:	bne	161f4 <rb_setselect_select+0x10c>
   16188:	b	162f4 <rb_setselect_select+0x20c>
   1618c:	cmp	lr, #0
   16190:	bmi	161ec <rb_setselect_select+0x104>
   16194:	cmp	ip, lr
   16198:	bgt	161ec <rb_setselect_select+0x104>
   1619c:	ldr	r4, [pc, #352]	; 16304 <rb_setselect_select+0x21c>
   161a0:	ldr	r9, [pc, #352]	; 16308 <rb_setselect_select+0x220>
   161a4:	ldr	r8, [pc, #352]	; 1630c <rb_setselect_select+0x224>
   161a8:	mov	ip, #1
   161ac:	add	r4, pc, r4
   161b0:	add	r9, pc, r9
   161b4:	add	r8, pc, r8
   161b8:	lsr	r7, lr, #5
   161bc:	and	r6, lr, #31
   161c0:	ldr	r5, [r4, r7, lsl #2]
   161c4:	tst	r5, ip, lsl r6
   161c8:	lsleq	r5, ip, r6
   161cc:	ldreq	r6, [r9, r7, lsl #2]
   161d0:	tsteq	r6, r5
   161d4:	bne	161ec <rb_setselect_select+0x104>
   161d8:	sub	r5, lr, #1
   161dc:	cmp	lr, #0
   161e0:	mov	lr, r5
   161e4:	str	r5, [r8]
   161e8:	bgt	161b8 <rb_setselect_select+0xd0>
   161ec:	tst	r1, #2
   161f0:	beq	162f4 <rb_setselect_select+0x20c>
   161f4:	str	r2, [r0, #36]	; 0x24
   161f8:	str	r3, [r0, #40]	; 0x28
   161fc:	mov	r7, #1
   16200:	cmp	r2, #0
   16204:	ldr	r1, [r0, #12]
   16208:	and	r3, r1, #31
   1620c:	lsl	r3, r7, r3
   16210:	beq	16240 <rb_setselect_select+0x158>
   16214:	ldr	r7, [pc, #244]	; 16310 <rb_setselect_select+0x228>
   16218:	asr	r2, r1, #31
   1621c:	add	r2, r1, r2, lsr #27
   16220:	asr	r2, r2, #5
   16224:	add	r7, pc, r7
   16228:	ldr	r6, [r7, r2, lsl #2]
   1622c:	orr	r3, r6, r3
   16230:	str	r3, [r7, r2, lsl #2]
   16234:	ldr	r2, [r0, #20]
   16238:	orr	r2, r2, #2
   1623c:	b	16268 <rb_setselect_select+0x180>
   16240:	ldr	r7, [pc, #204]	; 16314 <rb_setselect_select+0x22c>
   16244:	asr	r2, r1, #31
   16248:	add	r2, r1, r2, lsr #27
   1624c:	asr	r2, r2, #5
   16250:	add	r7, pc, r7
   16254:	ldr	r6, [r7, r2, lsl #2]
   16258:	bic	r3, r6, r3
   1625c:	str	r3, [r7, r2, lsl #2]
   16260:	ldr	r2, [r0, #20]
   16264:	bic	r2, r2, #2
   16268:	str	r2, [r0, #20]
   1626c:	tst	r2, #3
   16270:	ldr	r0, [pc, #160]	; 16318 <rb_setselect_select+0x230>
   16274:	ldr	r0, [pc, r0]
   16278:	beq	16294 <rb_setselect_select+0x1ac>
   1627c:	cmp	r1, r0
   16280:	ble	162f4 <rb_setselect_select+0x20c>
   16284:	ldr	r0, [pc, #144]	; 1631c <rb_setselect_select+0x234>
   16288:	add	r0, pc, r0
   1628c:	str	r1, [r0]
   16290:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16294:	cmp	r0, #0
   16298:	bmi	162f4 <rb_setselect_select+0x20c>
   1629c:	cmp	r1, r0
   162a0:	bgt	162f4 <rb_setselect_select+0x20c>
   162a4:	ldr	r2, [pc, #116]	; 16320 <rb_setselect_select+0x238>
   162a8:	ldr	r3, [pc, #116]	; 16324 <rb_setselect_select+0x23c>
   162ac:	ldr	r6, [pc, #116]	; 16328 <rb_setselect_select+0x240>
   162b0:	mov	r1, #1
   162b4:	add	r2, pc, r2
   162b8:	add	r3, pc, r3
   162bc:	add	r6, pc, r6
   162c0:	lsr	r7, r0, #5
   162c4:	and	r5, r0, #31
   162c8:	ldr	r4, [r2, r7, lsl #2]
   162cc:	tst	r4, r1, lsl r5
   162d0:	ldreq	r7, [r3, r7, lsl #2]
   162d4:	lsleq	r5, r1, r5
   162d8:	tsteq	r7, r5
   162dc:	bne	162f4 <rb_setselect_select+0x20c>
   162e0:	sub	r7, r0, #1
   162e4:	cmp	r0, #0
   162e8:	mov	r0, r7
   162ec:	str	r7, [r6]
   162f0:	bgt	162c0 <rb_setselect_select+0x1d8>
   162f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   162f8:	.word	0x00034b6c
   162fc:	.word	0x000172ec
   16300:	.word	0x000172d8
   16304:	.word	0x00034ad4
   16308:	.word	0x00034b50
   1630c:	.word	0x0001729c
   16310:	.word	0x00034adc
   16314:	.word	0x00034ab0
   16318:	.word	0x000171dc
   1631c:	.word	0x000171c8
   16320:	.word	0x000349cc
   16324:	.word	0x00034a48
   16328:	.word	0x00017194

0001632c <rb_select_select>:
   1632c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16330:	add	fp, sp, #28
   16334:	sub	sp, sp, #12
   16338:	ldr	r9, [pc, #832]	; 16680 <rb_select_select+0x354>
   1633c:	ldr	r1, [pc, #832]	; 16684 <rb_select_select+0x358>
   16340:	mov	r5, r0
   16344:	mov	r2, #128	; 0x80
   16348:	add	r9, pc, r9
   1634c:	add	r1, pc, r1
   16350:	mov	r0, r9
   16354:	bl	5094 <memcpy@plt>
   16358:	ldr	sl, [pc, #808]	; 16688 <rb_select_select+0x35c>
   1635c:	ldr	r1, [pc, #808]	; 1668c <rb_select_select+0x360>
   16360:	mov	r2, #128	; 0x80
   16364:	add	sl, pc, sl
   16368:	add	r1, pc, r1
   1636c:	mov	r0, sl
   16370:	bl	5094 <memcpy@plt>
   16374:	mov	r0, #1000	; 0x3e8
   16378:	mov	r6, #0
   1637c:	add	r4, sp, #4
   16380:	mul	r7, r5, r0
   16384:	stmib	sp, {r6, r7}
   16388:	mov	r1, r9
   1638c:	mov	r2, sl
   16390:	mov	r3, #0
   16394:	ldr	r0, [pc, #756]	; 16690 <rb_select_select+0x364>
   16398:	ldr	r0, [pc, r0]
   1639c:	str	r4, [sp]
   163a0:	add	r0, r0, #1
   163a4:	bl	51b4 <select@plt>
   163a8:	cmn	r0, #1
   163ac:	bgt	163d4 <rb_select_select+0xa8>
   163b0:	bl	552c <__errno_location@plt>
   163b4:	ldr	r0, [r0]
   163b8:	bl	4cbc <rb_ignore_errno@plt>
   163bc:	cmp	r0, #0
   163c0:	bne	16384 <rb_select_select+0x58>
   163c4:	bl	5208 <rb_set_time@plt>
   163c8:	mvn	r0, #0
   163cc:	sub	sp, fp, #28
   163d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163d4:	mov	r5, r0
   163d8:	bl	5208 <rb_set_time@plt>
   163dc:	mov	r0, #0
   163e0:	cmp	r5, #0
   163e4:	beq	16678 <rb_select_select+0x34c>
   163e8:	ldr	r1, [pc, #676]	; 16694 <rb_select_select+0x368>
   163ec:	ldr	r1, [pc, r1]
   163f0:	cmp	r1, #0
   163f4:	bmi	16678 <rb_select_select+0x34c>
   163f8:	ldr	r7, [pc, #664]	; 16698 <rb_select_select+0x36c>
   163fc:	mov	ip, #1
   16400:	mov	r0, #0
   16404:	ldr	r7, [pc, r7]
   16408:	ldr	lr, [pc, #652]	; 1669c <rb_select_select+0x370>
   1640c:	add	lr, pc, lr
   16410:	b	16430 <rb_select_select+0x104>
   16414:	cmp	r1, r0
   16418:	strgt	r1, [lr]
   1641c:	ldr	r1, [pc, #684]	; 166d0 <rb_select_select+0x3a4>
   16420:	add	r0, r8, #1
   16424:	ldr	r1, [pc, r1]
   16428:	cmp	r8, r1
   1642c:	bge	16674 <rb_select_select+0x348>
   16430:	mov	r8, r0
   16434:	eor	r0, r0, r0, lsr #12
   16438:	ldr	r1, [r7]
   1643c:	bfc	r0, #12, #20
   16440:	eor	r0, r0, r8, lsr #24
   16444:	add	r0, r0, r0, lsl #1
   16448:	ldr	r0, [r1, r0, lsl #2]
   1644c:	cmp	r0, #0
   16450:	beq	1641c <rb_select_select+0xf0>
   16454:	ldr	r5, [r0]
   16458:	ldr	r1, [r5, #12]
   1645c:	cmp	r1, r8
   16460:	beq	16474 <rb_select_select+0x148>
   16464:	ldr	r0, [r0, #8]
   16468:	cmp	r0, #0
   1646c:	bne	16454 <rb_select_select+0x128>
   16470:	b	1641c <rb_select_select+0xf0>
   16474:	cmp	r5, #0
   16478:	beq	1641c <rb_select_select+0xf0>
   1647c:	lsr	r6, r8, #5
   16480:	and	r4, r8, #31
   16484:	ldr	r0, [r9, r6, lsl #2]
   16488:	tst	r0, ip, lsl r4
   1648c:	beq	164c4 <rb_select_select+0x198>
   16490:	ldr	r2, [r5, #28]
   16494:	mov	r0, #0
   16498:	str	r0, [r5, #28]
   1649c:	cmp	r2, #0
   164a0:	beq	164c4 <rb_select_select+0x198>
   164a4:	ldr	r1, [r5, #32]
   164a8:	mov	r0, r5
   164ac:	blx	r2
   164b0:	ldr	lr, [pc, #488]	; 166a0 <rb_select_select+0x374>
   164b4:	ldr	r7, [pc, #488]	; 166a4 <rb_select_select+0x378>
   164b8:	mov	ip, #1
   164bc:	ldr	r7, [pc, r7]
   164c0:	add	lr, pc, lr
   164c4:	ldrb	r0, [r5, #16]
   164c8:	tst	r0, #1
   164cc:	beq	1641c <rb_select_select+0xf0>
   164d0:	ldr	r1, [sl, r6, lsl #2]
   164d4:	lsl	r0, ip, r4
   164d8:	tst	r1, r0
   164dc:	beq	16514 <rb_select_select+0x1e8>
   164e0:	ldr	r2, [r5, #36]	; 0x24
   164e4:	mov	r0, #0
   164e8:	str	r0, [r5, #36]	; 0x24
   164ec:	cmp	r2, #0
   164f0:	beq	16514 <rb_select_select+0x1e8>
   164f4:	ldr	r1, [r5, #40]	; 0x28
   164f8:	mov	r0, r5
   164fc:	blx	r2
   16500:	ldr	lr, [pc, #416]	; 166a8 <rb_select_select+0x37c>
   16504:	ldr	r7, [pc, #416]	; 166ac <rb_select_select+0x380>
   16508:	mov	ip, #1
   1650c:	ldr	r7, [pc, r7]
   16510:	add	lr, pc, lr
   16514:	ldr	r0, [r5, #28]
   16518:	cmp	r0, #0
   1651c:	bne	165c8 <rb_select_select+0x29c>
   16520:	ldr	r1, [r5, #12]
   16524:	ldr	r2, [pc, #388]	; 166b0 <rb_select_select+0x384>
   16528:	asr	r0, r1, #31
   1652c:	add	r2, pc, r2
   16530:	and	r3, r1, #31
   16534:	add	r0, r1, r0, lsr #27
   16538:	mov	r6, r2
   1653c:	asr	r0, r0, #5
   16540:	ldr	r2, [r2, r0, lsl #2]
   16544:	bic	r2, r2, ip, lsl r3
   16548:	str	r2, [r6, r0, lsl #2]
   1654c:	ldr	r2, [r5, #20]
   16550:	bic	r0, r2, #1
   16554:	tst	r2, #2
   16558:	str	r0, [r5, #20]
   1655c:	ldr	r0, [pc, #336]	; 166b4 <rb_select_select+0x388>
   16560:	ldr	r0, [pc, r0]
   16564:	bne	165c0 <rb_select_select+0x294>
   16568:	cmp	r0, #0
   1656c:	bmi	165c8 <rb_select_select+0x29c>
   16570:	cmp	r1, r0
   16574:	bgt	165c8 <rb_select_select+0x29c>
   16578:	ldr	r3, [pc, #312]	; 166b8 <rb_select_select+0x38c>
   1657c:	lsr	r1, r0, #5
   16580:	and	r2, r0, #31
   16584:	add	r3, pc, r3
   16588:	ldr	r3, [r3, r1, lsl #2]
   1658c:	tst	r3, ip, lsl r2
   16590:	ldreq	r3, [pc, #292]	; 166bc <rb_select_select+0x390>
   16594:	lsleq	r2, ip, r2
   16598:	addeq	r3, pc, r3
   1659c:	ldreq	r1, [r3, r1, lsl #2]
   165a0:	tsteq	r1, r2
   165a4:	bne	165c8 <rb_select_select+0x29c>
   165a8:	sub	r1, r0, #1
   165ac:	cmp	r0, #0
   165b0:	mov	r0, r1
   165b4:	str	r1, [lr]
   165b8:	bgt	16578 <rb_select_select+0x24c>
   165bc:	b	165c8 <rb_select_select+0x29c>
   165c0:	cmp	r1, r0
   165c4:	strgt	r1, [lr]
   165c8:	ldr	r0, [r5, #36]	; 0x24
   165cc:	cmp	r0, #0
   165d0:	bne	1641c <rb_select_select+0xf0>
   165d4:	ldr	r1, [r5, #12]
   165d8:	ldr	r2, [pc, #224]	; 166c0 <rb_select_select+0x394>
   165dc:	asr	r0, r1, #31
   165e0:	add	r2, pc, r2
   165e4:	and	r3, r1, #31
   165e8:	add	r0, r1, r0, lsr #27
   165ec:	mov	r6, r2
   165f0:	asr	r0, r0, #5
   165f4:	ldr	r2, [r2, r0, lsl #2]
   165f8:	bic	r2, r2, ip, lsl r3
   165fc:	str	r2, [r6, r0, lsl #2]
   16600:	ldr	r2, [r5, #20]
   16604:	bic	r0, r2, #2
   16608:	tst	r2, #1
   1660c:	str	r0, [r5, #20]
   16610:	ldr	r0, [pc, #172]	; 166c4 <rb_select_select+0x398>
   16614:	ldr	r0, [pc, r0]
   16618:	bne	16414 <rb_select_select+0xe8>
   1661c:	cmp	r0, #0
   16620:	bmi	1641c <rb_select_select+0xf0>
   16624:	cmp	r1, r0
   16628:	bgt	1641c <rb_select_select+0xf0>
   1662c:	ldr	r3, [pc, #148]	; 166c8 <rb_select_select+0x39c>
   16630:	lsr	r1, r0, #5
   16634:	and	r2, r0, #31
   16638:	add	r3, pc, r3
   1663c:	ldr	r3, [r3, r1, lsl #2]
   16640:	tst	r3, ip, lsl r2
   16644:	ldreq	r3, [pc, #128]	; 166cc <rb_select_select+0x3a0>
   16648:	lsleq	r2, ip, r2
   1664c:	addeq	r3, pc, r3
   16650:	ldreq	r1, [r3, r1, lsl #2]
   16654:	tsteq	r1, r2
   16658:	bne	1641c <rb_select_select+0xf0>
   1665c:	sub	r1, r0, #1
   16660:	cmp	r0, #0
   16664:	mov	r0, r1
   16668:	str	r1, [lr]
   1666c:	bgt	1662c <rb_select_select+0x300>
   16670:	b	1641c <rb_select_select+0xf0>
   16674:	mov	r0, #0
   16678:	sub	sp, fp, #28
   1667c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16680:	.word	0x00034a38
   16684:	.word	0x00034934
   16688:	.word	0x00034a9c
   1668c:	.word	0x00034998
   16690:	.word	0x000170b8
   16694:	.word	0x00017064
   16698:	.word	0x00016f7c
   1669c:	.word	0x00017044
   166a0:	.word	0x00016f90
   166a4:	.word	0x00016ec4
   166a8:	.word	0x00016f40
   166ac:	.word	0x00016e74
   166b0:	.word	0x00034754
   166b4:	.word	0x00016ef0
   166b8:	.word	0x000346fc
   166bc:	.word	0x00034768
   166c0:	.word	0x00034720
   166c4:	.word	0x00016e3c
   166c8:	.word	0x00034648
   166cc:	.word	0x000346b4
   166d0:	.word	0x0001702c

000166d4 <rb_init_netio_kqueue>:
   166d4:	push	{fp, lr}
   166d8:	mov	fp, sp
   166dc:	bl	552c <__errno_location@plt>
   166e0:	mov	r1, #38	; 0x26
   166e4:	str	r1, [r0]
   166e8:	mvn	r0, #0
   166ec:	pop	{fp, pc}

000166f0 <rb_setselect_kqueue>:
   166f0:	push	{fp, lr}
   166f4:	mov	fp, sp
   166f8:	bl	552c <__errno_location@plt>
   166fc:	mov	r1, #38	; 0x26
   16700:	str	r1, [r0]
   16704:	pop	{fp, pc}

00016708 <rb_select_kqueue>:
   16708:	push	{fp, lr}
   1670c:	mov	fp, sp
   16710:	bl	552c <__errno_location@plt>
   16714:	mov	r1, #38	; 0x26
   16718:	str	r1, [r0]
   1671c:	mvn	r0, #0
   16720:	pop	{fp, pc}

00016724 <rb_setup_fd_kqueue>:
   16724:	push	{fp, lr}
   16728:	mov	fp, sp
   1672c:	bl	552c <__errno_location@plt>
   16730:	mov	r1, #38	; 0x26
   16734:	str	r1, [r0]
   16738:	mvn	r0, #0
   1673c:	pop	{fp, pc}

00016740 <rb_kqueue_init_event>:
   16740:	bx	lr

00016744 <rb_kqueue_sched_event>:
   16744:	push	{fp, lr}
   16748:	mov	fp, sp
   1674c:	bl	552c <__errno_location@plt>
   16750:	mov	r1, #38	; 0x26
   16754:	str	r1, [r0]
   16758:	mvn	r0, #0
   1675c:	pop	{fp, pc}

00016760 <rb_kqueue_unsched_event>:
   16760:	bx	lr

00016764 <rb_kqueue_supports_event>:
   16764:	push	{fp, lr}
   16768:	mov	fp, sp
   1676c:	bl	552c <__errno_location@plt>
   16770:	mov	r1, #38	; 0x26
   16774:	str	r1, [r0]
   16778:	mov	r0, #0
   1677c:	pop	{fp, pc}

00016780 <rb_rawbuf_flush>:
   16780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16784:	add	fp, sp, #28
   16788:	sub	sp, sp, #4
   1678c:	sub	sp, sp, #8192	; 0x2000
   16790:	mov	r4, r0
   16794:	ldr	r0, [r0]
   16798:	cmp	r0, #0
   1679c:	beq	16958 <rb_rawbuf_flush+0x1d8>
   167a0:	mov	r0, r1
   167a4:	mov	r8, r1
   167a8:	bl	4d7c <rb_fd_ssl@plt>
   167ac:	cmp	r0, #0
   167b0:	beq	167d0 <rb_rawbuf_flush+0x50>
   167b4:	ldr	r0, [r4]
   167b8:	ldr	r6, [r0]
   167bc:	ldrb	r0, [r6, #1040]	; 0x410
   167c0:	cmp	r0, #0
   167c4:	beq	16974 <rb_rawbuf_flush+0x1f4>
   167c8:	ldr	r0, [r4, #16]
   167cc:	b	16984 <rb_rawbuf_flush+0x204>
   167d0:	mov	r7, sp
   167d4:	mov	r1, #0
   167d8:	mov	r2, #8192	; 0x2000
   167dc:	mov	r6, #0
   167e0:	mov	r0, r7
   167e4:	bl	4ed8 <memset@plt>
   167e8:	ldr	r0, [r4]
   167ec:	cmp	r0, #0
   167f0:	beq	16958 <rb_rawbuf_flush+0x1d8>
   167f4:	movw	r1, #1022	; 0x3fe
   167f8:	ldr	r3, [r0]
   167fc:	ldrb	r2, [r3, #1040]	; 0x410
   16800:	cmp	r2, #0
   16804:	beq	1681c <rb_rawbuf_flush+0x9c>
   16808:	ldr	r5, [r4, #16]
   1680c:	ldr	r2, [r3, #1036]	; 0x40c
   16810:	add	r3, r3, r5
   16814:	sub	r2, r2, r5
   16818:	b	16820 <rb_rawbuf_flush+0xa0>
   1681c:	ldr	r2, [r3, #1036]	; 0x40c
   16820:	add	r5, r3, #12
   16824:	add	r3, r7, r6, lsl #3
   16828:	add	r9, r6, #1
   1682c:	cmp	r6, r1
   16830:	str	r5, [r7, r6, lsl #3]
   16834:	str	r2, [r3, #4]
   16838:	bhi	1684c <rb_rawbuf_flush+0xcc>
   1683c:	ldr	r0, [r0, #8]
   16840:	mov	r6, r9
   16844:	cmp	r0, #0
   16848:	bne	167f8 <rb_rawbuf_flush+0x78>
   1684c:	mov	r1, sp
   16850:	mov	r0, r8
   16854:	mov	r2, r9
   16858:	bl	5328 <rb_writev@plt>
   1685c:	mov	r8, r0
   16860:	cmp	r0, #1
   16864:	blt	16a2c <rb_rawbuf_flush+0x2ac>
   16868:	ldr	sl, [r4]
   1686c:	cmp	sl, #0
   16870:	beq	16a2c <rb_rawbuf_flush+0x2ac>
   16874:	mov	r6, #0
   16878:	mov	r5, r8
   1687c:	ldr	r1, [sl]
   16880:	ldr	sl, [sl, #8]
   16884:	ldrb	r0, [r1, #1040]	; 0x410
   16888:	ldr	r3, [r1, #1036]	; 0x40c
   1688c:	cmp	r0, #0
   16890:	beq	168a4 <rb_rawbuf_flush+0x124>
   16894:	ldr	r0, [r4, #16]
   16898:	sub	r7, r3, r0
   1689c:	cmp	r5, r7
   168a0:	bge	168d8 <rb_rawbuf_flush+0x158>
   168a4:	cmp	r5, r3
   168a8:	blt	16a38 <rb_rawbuf_flush+0x2b8>
   168ac:	ldr	r0, [r4, #12]
   168b0:	sub	r0, r0, r3
   168b4:	str	r0, [r4, #12]
   168b8:	ldr	r0, [r1, #8]
   168bc:	ldr	r2, [r1, #4]
   168c0:	cmp	r0, #0
   168c4:	beq	16900 <rb_rawbuf_flush+0x180>
   168c8:	str	r2, [r0, #4]
   168cc:	mov	r7, r3
   168d0:	ldr	r2, [r1, #4]
   168d4:	b	16910 <rb_rawbuf_flush+0x190>
   168d8:	ldr	r0, [r4, #12]
   168dc:	sub	r0, r0, r7
   168e0:	str	r0, [r4, #12]
   168e4:	ldr	r0, [r1, #8]
   168e8:	ldr	r2, [r1, #4]
   168ec:	cmp	r0, #0
   168f0:	beq	1690c <rb_rawbuf_flush+0x18c>
   168f4:	str	r2, [r0, #4]
   168f8:	ldr	r2, [r1, #4]
   168fc:	b	16910 <rb_rawbuf_flush+0x190>
   16900:	str	r2, [r4, #4]
   16904:	mov	r7, r3
   16908:	b	16910 <rb_rawbuf_flush+0x190>
   1690c:	str	r2, [r4, #4]
   16910:	cmp	r2, #0
   16914:	mov	r3, r4
   16918:	addne	r3, r2, #8
   1691c:	str	r0, [r3]
   16920:	str	r6, [r1, #4]
   16924:	str	r6, [r1, #8]
   16928:	ldr	r0, [r4, #8]
   1692c:	sub	r0, r0, #1
   16930:	str	r0, [r4, #8]
   16934:	ldr	r0, [pc, #276]	; 16a50 <rb_rawbuf_flush+0x2d0>
   16938:	ldr	r0, [pc, r0]
   1693c:	bl	5154 <rb_bh_free@plt>
   16940:	cmp	sl, #0
   16944:	beq	16a2c <rb_rawbuf_flush+0x2ac>
   16948:	sub	r5, r5, r7
   1694c:	subs	r9, r9, #1
   16950:	bne	1687c <rb_rawbuf_flush+0xfc>
   16954:	b	16a2c <rb_rawbuf_flush+0x2ac>
   16958:	bl	552c <__errno_location@plt>
   1695c:	mov	r1, #11
   16960:	mvn	r8, #0
   16964:	str	r1, [r0]
   16968:	mov	r0, r8
   1696c:	sub	sp, fp, #28
   16970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16974:	mov	r0, #1
   16978:	strb	r0, [r6, #1040]	; 0x410
   1697c:	mov	r0, #0
   16980:	str	r0, [r4, #16]
   16984:	ldr	r1, [r6, #1036]	; 0x40c
   16988:	sub	r2, r1, r0
   1698c:	add	r0, r6, r0
   16990:	add	r1, r0, #12
   16994:	mov	r0, r8
   16998:	bl	4efc <rb_write@plt>
   1699c:	mov	r8, r0
   169a0:	cmp	r0, #1
   169a4:	blt	16a2c <rb_rawbuf_flush+0x2ac>
   169a8:	ldr	r0, [r4, #16]
   169ac:	add	r0, r0, r8
   169b0:	str	r0, [r4, #16]
   169b4:	ldr	r1, [r6, #1036]	; 0x40c
   169b8:	cmp	r0, r1
   169bc:	bne	16a20 <rb_rawbuf_flush+0x2a0>
   169c0:	mov	r0, #0
   169c4:	str	r0, [r4, #16]
   169c8:	ldr	r0, [r6, #8]
   169cc:	ldr	r1, [r6, #4]
   169d0:	cmp	r0, #0
   169d4:	beq	169e4 <rb_rawbuf_flush+0x264>
   169d8:	str	r1, [r0, #4]
   169dc:	ldr	r1, [r6, #4]
   169e0:	b	169e8 <rb_rawbuf_flush+0x268>
   169e4:	str	r1, [r4, #4]
   169e8:	cmp	r1, #0
   169ec:	mov	r2, r4
   169f0:	addne	r2, r1, #8
   169f4:	mov	r1, r6
   169f8:	str	r0, [r2]
   169fc:	mov	r0, #0
   16a00:	str	r0, [r6, #4]
   16a04:	str	r0, [r6, #8]
   16a08:	ldr	r0, [r4, #8]
   16a0c:	sub	r0, r0, #1
   16a10:	str	r0, [r4, #8]
   16a14:	ldr	r0, [pc, #56]	; 16a54 <rb_rawbuf_flush+0x2d4>
   16a18:	ldr	r0, [pc, r0]
   16a1c:	bl	5154 <rb_bh_free@plt>
   16a20:	ldr	r0, [r4, #12]
   16a24:	sub	r0, r0, r8
   16a28:	str	r0, [r4, #12]
   16a2c:	mov	r0, r8
   16a30:	sub	sp, fp, #28
   16a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a38:	mov	r0, #1
   16a3c:	strb	r0, [r1, #1040]	; 0x410
   16a40:	str	r5, [r4, #16]
   16a44:	ldr	r0, [r4, #12]
   16a48:	sub	r0, r0, r5
   16a4c:	b	16a28 <rb_rawbuf_flush+0x2a8>
   16a50:	.word	0x00034548
   16a54:	.word	0x00034468

00016a58 <rb_rawbuf_append>:
   16a58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16a5c:	add	fp, sp, #24
   16a60:	mov	r8, r0
   16a64:	ldr	r0, [r0, #4]
   16a68:	mov	r6, r2
   16a6c:	mov	r5, r1
   16a70:	cmp	r0, #0
   16a74:	beq	16a9c <rb_rawbuf_append+0x44>
   16a78:	ldr	r4, [r0]
   16a7c:	cmp	r4, #0
   16a80:	beq	16a9c <rb_rawbuf_append+0x44>
   16a84:	ldr	r0, [r4, #1036]	; 0x40c
   16a88:	cmp	r0, #1024	; 0x400
   16a8c:	bge	16a9c <rb_rawbuf_append+0x44>
   16a90:	ldrb	r1, [r4, #1040]	; 0x410
   16a94:	cmp	r1, #0
   16a98:	beq	16b44 <rb_rawbuf_append+0xec>
   16a9c:	cmp	r6, #1
   16aa0:	blt	16b90 <rb_rawbuf_append+0x138>
   16aa4:	mov	r9, #0
   16aa8:	b	16b08 <rb_rawbuf_append+0xb0>
   16aac:	add	r0, r0, #8
   16ab0:	str	r7, [r0]
   16ab4:	str	r7, [r8, #4]
   16ab8:	cmp	r6, #1024	; 0x400
   16abc:	mov	r4, r6
   16ac0:	mov	r1, r5
   16ac4:	ldr	r0, [r8, #8]
   16ac8:	movge	r4, #1024	; 0x400
   16acc:	mov	r2, r4
   16ad0:	add	r0, r0, #1
   16ad4:	str	r0, [r8, #8]
   16ad8:	add	r0, r7, #12
   16adc:	bl	5094 <memcpy@plt>
   16ae0:	ldr	r0, [r7, #1036]	; 0x40c
   16ae4:	sub	r6, r6, r4
   16ae8:	add	r5, r5, r4
   16aec:	cmp	r6, #0
   16af0:	add	r0, r0, r4
   16af4:	str	r0, [r7, #1036]	; 0x40c
   16af8:	ldr	r0, [r8, #12]
   16afc:	add	r0, r0, r4
   16b00:	str	r0, [r8, #12]
   16b04:	ble	16b90 <rb_rawbuf_append+0x138>
   16b08:	ldr	r0, [pc, #132]	; 16b94 <rb_rawbuf_append+0x13c>
   16b0c:	ldr	r0, [pc, r0]
   16b10:	bl	51cc <rb_bh_alloc@plt>
   16b14:	str	r9, [r0, #8]
   16b18:	str	r0, [r0]
   16b1c:	mov	r7, r0
   16b20:	ldr	r0, [r8, #4]
   16b24:	cmp	r0, #0
   16b28:	str	r0, [r7, #4]
   16b2c:	bne	16aac <rb_rawbuf_append+0x54>
   16b30:	ldr	r0, [r8]
   16b34:	cmp	r0, #0
   16b38:	bne	16ab4 <rb_rawbuf_append+0x5c>
   16b3c:	mov	r0, r8
   16b40:	b	16ab0 <rb_rawbuf_append+0x58>
   16b44:	rsb	r7, r0, #1024	; 0x400
   16b48:	add	r0, r4, r0
   16b4c:	mov	r1, r5
   16b50:	cmp	r7, r6
   16b54:	add	r0, r0, #12
   16b58:	movgt	r7, r6
   16b5c:	mov	r2, r7
   16b60:	bl	5094 <memcpy@plt>
   16b64:	ldr	r0, [r4, #1036]	; 0x40c
   16b68:	subs	r6, r6, r7
   16b6c:	add	r0, r7, r0
   16b70:	str	r0, [r4, #1036]	; 0x40c
   16b74:	ldr	r0, [r8, #12]
   16b78:	add	r0, r0, r7
   16b7c:	str	r0, [r8, #12]
   16b80:	beq	16b90 <rb_rawbuf_append+0x138>
   16b84:	add	r5, r5, r7
   16b88:	cmp	r6, #1
   16b8c:	bge	16aa4 <rb_rawbuf_append+0x4c>
   16b90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b94:	.word	0x00034374

00016b98 <rb_rawbuf_get>:
   16b98:	push	{r4, r5, r6, r7, fp, lr}
   16b9c:	add	fp, sp, #16
   16ba0:	mov	r4, r0
   16ba4:	ldr	r0, [r0]
   16ba8:	cmp	r0, #0
   16bac:	beq	16bd4 <rb_rawbuf_get+0x3c>
   16bb0:	ldr	r7, [r0]
   16bb4:	mov	r5, r2
   16bb8:	ldrb	r0, [r7, #1040]	; 0x410
   16bbc:	cmp	r0, #0
   16bc0:	beq	16be0 <rb_rawbuf_get+0x48>
   16bc4:	ldr	r0, [r4, #16]
   16bc8:	add	r0, r7, r0
   16bcc:	add	r2, r0, #12
   16bd0:	b	16be4 <rb_rawbuf_get+0x4c>
   16bd4:	mov	r6, #0
   16bd8:	mov	r0, r6
   16bdc:	pop	{r4, r5, r6, r7, fp, pc}
   16be0:	add	r2, r7, #12
   16be4:	ldr	r6, [r7, #1036]	; 0x40c
   16be8:	mov	r0, r1
   16bec:	mov	r1, r2
   16bf0:	cmp	r6, r5
   16bf4:	movge	r6, r5
   16bf8:	mov	r2, r6
   16bfc:	bl	5094 <memcpy@plt>
   16c00:	ldr	r0, [r7, #1036]	; 0x40c
   16c04:	cmp	r0, r6
   16c08:	bne	16c30 <rb_rawbuf_get+0x98>
   16c0c:	mov	r0, #0
   16c10:	str	r0, [r4, #16]
   16c14:	ldr	r0, [r7, #8]
   16c18:	ldr	r1, [r7, #4]
   16c1c:	cmp	r0, #0
   16c20:	beq	16c60 <rb_rawbuf_get+0xc8>
   16c24:	str	r1, [r0, #4]
   16c28:	ldr	r1, [r7, #4]
   16c2c:	b	16c64 <rb_rawbuf_get+0xcc>
   16c30:	mov	r1, #1
   16c34:	sub	r0, r0, r6
   16c38:	strb	r1, [r7, #1040]	; 0x410
   16c3c:	str	r0, [r7, #1036]	; 0x40c
   16c40:	ldr	r0, [r4, #12]
   16c44:	ldr	r1, [r4, #16]
   16c48:	sub	r0, r0, r6
   16c4c:	add	r1, r1, r6
   16c50:	str	r0, [r4, #12]
   16c54:	mov	r0, r6
   16c58:	str	r1, [r4, #16]
   16c5c:	pop	{r4, r5, r6, r7, fp, pc}
   16c60:	str	r1, [r4, #4]
   16c64:	cmp	r1, #0
   16c68:	mov	r2, r4
   16c6c:	addne	r2, r1, #8
   16c70:	mov	r1, r7
   16c74:	str	r0, [r2]
   16c78:	mov	r0, #0
   16c7c:	str	r0, [r7, #4]
   16c80:	str	r0, [r7, #8]
   16c84:	ldr	r0, [r4, #8]
   16c88:	sub	r0, r0, #1
   16c8c:	str	r0, [r4, #8]
   16c90:	ldr	r0, [pc, #24]	; 16cb0 <rb_rawbuf_get+0x118>
   16c94:	ldr	r0, [pc, r0]
   16c98:	bl	5154 <rb_bh_free@plt>
   16c9c:	ldr	r0, [r4, #12]
   16ca0:	sub	r0, r0, r5
   16ca4:	str	r0, [r4, #12]
   16ca8:	mov	r0, r6
   16cac:	pop	{r4, r5, r6, r7, fp, pc}
   16cb0:	.word	0x000341ec

00016cb4 <rb_rawbuf_length>:
   16cb4:	ldr	r0, [r0, #12]
   16cb8:	bx	lr

00016cbc <rb_new_rawbuffer>:
   16cbc:	push	{fp, lr}
   16cc0:	mov	fp, sp
   16cc4:	mov	r0, #1
   16cc8:	mov	r1, #20
   16ccc:	bl	4e9c <calloc@plt>
   16cd0:	cmp	r0, #0
   16cd4:	popne	{fp, pc}
   16cd8:	bl	51fc <rb_outofmemory@plt>

00016cdc <rb_free_rawbuffer>:
   16cdc:	push	{r4, r5, r6, sl, fp, lr}
   16ce0:	add	fp, sp, #16
   16ce4:	ldr	r5, [r0]
   16ce8:	mov	r4, r0
   16cec:	cmp	r5, #0
   16cf0:	beq	16d5c <rb_free_rawbuffer+0x80>
   16cf4:	mov	r6, #0
   16cf8:	b	16d38 <rb_free_rawbuffer+0x5c>
   16cfc:	str	r2, [r4, #4]
   16d00:	cmp	r2, #0
   16d04:	mov	r3, r4
   16d08:	addne	r3, r2, #8
   16d0c:	str	r0, [r3]
   16d10:	str	r6, [r1, #4]
   16d14:	str	r6, [r1, #8]
   16d18:	ldr	r0, [r4, #8]
   16d1c:	sub	r0, r0, #1
   16d20:	str	r0, [r4, #8]
   16d24:	ldr	r0, [pc, #60]	; 16d68 <rb_free_rawbuffer+0x8c>
   16d28:	ldr	r0, [pc, r0]
   16d2c:	bl	5154 <rb_bh_free@plt>
   16d30:	cmp	r5, #0
   16d34:	beq	16d5c <rb_free_rawbuffer+0x80>
   16d38:	ldr	r1, [r5]
   16d3c:	ldr	r5, [r5, #8]
   16d40:	ldr	r0, [r1, #8]
   16d44:	ldr	r2, [r1, #4]
   16d48:	cmp	r0, #0
   16d4c:	beq	16cfc <rb_free_rawbuffer+0x20>
   16d50:	str	r2, [r0, #4]
   16d54:	ldr	r2, [r1, #4]
   16d58:	b	16d00 <rb_free_rawbuffer+0x24>
   16d5c:	mov	r0, r4
   16d60:	pop	{r4, r5, r6, sl, fp, lr}
   16d64:	b	4f8c <free@plt>
   16d68:	.word	0x00034158

00016d6c <rb_init_rawbuffers>:
   16d6c:	push	{fp, lr}
   16d70:	mov	fp, sp
   16d74:	mov	r1, r0
   16d78:	ldr	r0, [pc, #40]	; 16da8 <rb_init_rawbuffers+0x3c>
   16d7c:	ldr	r0, [pc, r0]
   16d80:	cmp	r0, #0
   16d84:	popne	{fp, pc}
   16d88:	ldr	r2, [pc, #28]	; 16dac <rb_init_rawbuffers+0x40>
   16d8c:	movw	r0, #1044	; 0x414
   16d90:	add	r2, pc, r2
   16d94:	bl	5304 <rb_bh_create@plt>
   16d98:	ldr	r1, [pc, #16]	; 16db0 <rb_init_rawbuffers+0x44>
   16d9c:	add	r1, pc, r1
   16da0:	str	r0, [r1]
   16da4:	pop	{fp, pc}
   16da8:	.word	0x00034104
   16dac:	.word	0x00005061
   16db0:	.word	0x000340e4

00016db4 <rb_init_patricia>:
   16db4:	bx	lr

00016db8 <rb_new_patricia>:
   16db8:	push	{r4, sl, fp, lr}
   16dbc:	add	fp, sp, #8
   16dc0:	mov	r4, r0
   16dc4:	mov	r0, #1
   16dc8:	mov	r1, #12
   16dcc:	bl	4e9c <calloc@plt>
   16dd0:	cmp	r0, #0
   16dd4:	strne	r4, [r0, #4]
   16dd8:	ldrne	r1, [pc, #24]	; 16df8 <rb_new_patricia+0x40>
   16ddc:	ldrne	r1, [pc, r1]
   16de0:	ldrne	r2, [pc, #20]	; 16dfc <rb_new_patricia+0x44>
   16de4:	addne	r1, r1, #1
   16de8:	addne	r2, pc, r2
   16dec:	strne	r1, [r2]
   16df0:	popne	{r4, sl, fp, pc}
   16df4:	bl	51fc <rb_outofmemory@plt>
   16df8:	.word	0x000340a8
   16dfc:	.word	0x0003409c

00016e00 <rb_clear_patricia>:
   16e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e04:	add	fp, sp, #28
   16e08:	sub	sp, sp, #524	; 0x20c
   16e0c:	ldr	r5, [r0]
   16e10:	mov	r4, r0
   16e14:	cmp	r5, #0
   16e18:	beq	16f7c <rb_clear_patricia+0x17c>
   16e1c:	mov	r9, r1
   16e20:	cmp	r1, #0
   16e24:	beq	16ed8 <rb_clear_patricia+0xd8>
   16e28:	mov	sl, #0
   16e2c:	add	r8, sp, #4
   16e30:	ldmib	r5, {r0, r6, r7}
   16e34:	cmp	r0, #0
   16e38:	bne	16e64 <rb_clear_patricia+0x64>
   16e3c:	b	16e88 <rb_clear_patricia+0x88>
   16e40:	cmp	r7, #0
   16e44:	mov	r5, r6
   16e48:	strne	r7, [r8, sl, lsl #2]
   16e4c:	addne	sl, sl, #1
   16e50:	cmp	r5, #0
   16e54:	beq	16f7c <rb_clear_patricia+0x17c>
   16e58:	ldmib	r5, {r0, r6, r7}
   16e5c:	cmp	r0, #0
   16e60:	beq	16e88 <rb_clear_patricia+0x88>
   16e64:	ldr	r1, [r0, #4]
   16e68:	subs	r1, r1, #1
   16e6c:	str	r1, [r0, #4]
   16e70:	bgt	16e78 <rb_clear_patricia+0x78>
   16e74:	bl	4f8c <free@plt>
   16e78:	ldr	r0, [r5, #20]
   16e7c:	cmp	r0, #0
   16e80:	beq	16e88 <rb_clear_patricia+0x88>
   16e84:	blx	r9
   16e88:	mov	r0, r5
   16e8c:	bl	4f8c <free@plt>
   16e90:	ldr	r0, [r4, #8]
   16e94:	cmp	r6, #0
   16e98:	sub	r0, r0, #1
   16e9c:	str	r0, [r4, #8]
   16ea0:	bne	16e40 <rb_clear_patricia+0x40>
   16ea4:	cmp	r7, #0
   16ea8:	beq	16ebc <rb_clear_patricia+0xbc>
   16eac:	mov	r5, r7
   16eb0:	cmp	r5, #0
   16eb4:	bne	16e58 <rb_clear_patricia+0x58>
   16eb8:	b	16f7c <rb_clear_patricia+0x17c>
   16ebc:	cmp	sl, #0
   16ec0:	beq	16f7c <rb_clear_patricia+0x17c>
   16ec4:	sub	sl, sl, #1
   16ec8:	ldr	r5, [r8, sl, lsl #2]
   16ecc:	cmp	r5, #0
   16ed0:	bne	16e58 <rb_clear_patricia+0x58>
   16ed4:	b	16f7c <rb_clear_patricia+0x17c>
   16ed8:	mov	r9, #0
   16edc:	add	r8, sp, #4
   16ee0:	ldmib	r5, {r0, r7}
   16ee4:	ldr	r6, [r5, #12]
   16ee8:	cmp	r0, #0
   16eec:	bne	16f34 <rb_clear_patricia+0x134>
   16ef0:	mov	r0, r5
   16ef4:	bl	4f8c <free@plt>
   16ef8:	ldr	r0, [r4, #8]
   16efc:	cmp	r7, #0
   16f00:	sub	r0, r0, #1
   16f04:	str	r0, [r4, #8]
   16f08:	beq	16f4c <rb_clear_patricia+0x14c>
   16f0c:	cmp	r6, #0
   16f10:	mov	r5, r7
   16f14:	strne	r6, [r8, r9, lsl #2]
   16f18:	addne	r9, r9, #1
   16f1c:	cmp	r5, #0
   16f20:	beq	16f7c <rb_clear_patricia+0x17c>
   16f24:	ldmib	r5, {r0, r7}
   16f28:	ldr	r6, [r5, #12]
   16f2c:	cmp	r0, #0
   16f30:	beq	16ef0 <rb_clear_patricia+0xf0>
   16f34:	ldr	r1, [r0, #4]
   16f38:	subs	r1, r1, #1
   16f3c:	str	r1, [r0, #4]
   16f40:	bgt	16ef0 <rb_clear_patricia+0xf0>
   16f44:	bl	4f8c <free@plt>
   16f48:	b	16ef0 <rb_clear_patricia+0xf0>
   16f4c:	cmp	r6, #0
   16f50:	beq	16f64 <rb_clear_patricia+0x164>
   16f54:	mov	r5, r6
   16f58:	cmp	r5, #0
   16f5c:	bne	16f24 <rb_clear_patricia+0x124>
   16f60:	b	16f7c <rb_clear_patricia+0x17c>
   16f64:	cmp	r9, #0
   16f68:	beq	16f7c <rb_clear_patricia+0x17c>
   16f6c:	sub	r9, r9, #1
   16f70:	ldr	r5, [r8, r9, lsl #2]
   16f74:	cmp	r5, #0
   16f78:	bne	16f24 <rb_clear_patricia+0x124>
   16f7c:	mov	r0, r4
   16f80:	sub	sp, fp, #28
   16f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f88:	b	4f8c <free@plt>

00016f8c <rb_destroy_patricia>:
   16f8c:	push	{fp, lr}
   16f90:	mov	fp, sp
   16f94:	bl	4dc4 <rb_clear_patricia@plt>
   16f98:	ldr	r0, [pc, #20]	; 16fb4 <rb_destroy_patricia+0x28>
   16f9c:	ldr	r0, [pc, r0]
   16fa0:	ldr	r1, [pc, #16]	; 16fb8 <rb_destroy_patricia+0x2c>
   16fa4:	sub	r0, r0, #1
   16fa8:	add	r1, pc, r1
   16fac:	str	r0, [r1]
   16fb0:	pop	{fp, pc}
   16fb4:	.word	0x00033ee8
   16fb8:	.word	0x00033edc

00016fbc <rb_patricia_process>:
   16fbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16fc0:	add	fp, sp, #24
   16fc4:	sub	sp, sp, #520	; 0x208
   16fc8:	ldr	r7, [r0]
   16fcc:	cmp	r7, #0
   16fd0:	beq	1704c <rb_patricia_process+0x90>
   16fd4:	mov	r4, r1
   16fd8:	mov	r5, #0
   16fdc:	add	r6, sp, #4
   16fe0:	ldr	r0, [r7, #4]
   16fe4:	cmp	r0, #0
   16fe8:	bne	17014 <rb_patricia_process+0x58>
   16fec:	b	1701c <rb_patricia_process+0x60>
   16ff0:	cmp	r7, #0
   16ff4:	strne	r7, [r6, r5, lsl #2]
   16ff8:	addne	r5, r5, #1
   16ffc:	mov	r7, r0
   17000:	cmp	r7, #0
   17004:	beq	1704c <rb_patricia_process+0x90>
   17008:	ldr	r0, [r7, #4]
   1700c:	cmp	r0, #0
   17010:	beq	1701c <rb_patricia_process+0x60>
   17014:	ldr	r1, [r7, #20]
   17018:	blx	r4
   1701c:	ldr	r0, [r7, #8]
   17020:	ldr	r7, [r7, #12]
   17024:	cmp	r0, #0
   17028:	bne	16ff0 <rb_patricia_process+0x34>
   1702c:	cmp	r7, #0
   17030:	bne	17000 <rb_patricia_process+0x44>
   17034:	cmp	r5, #0
   17038:	beq	1704c <rb_patricia_process+0x90>
   1703c:	sub	r5, r5, #1
   17040:	ldr	r7, [r6, r5, lsl #2]
   17044:	cmp	r7, #0
   17048:	bne	17008 <rb_patricia_process+0x4c>
   1704c:	sub	sp, fp, #24
   17050:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00017054 <rb_patricia_search_exact>:
   17054:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17058:	add	fp, sp, #24
   1705c:	ldr	r4, [r0]
   17060:	cmp	r4, #0
   17064:	beq	170d4 <rb_patricia_search_exact+0x80>
   17068:	ldrh	r6, [r1, #2]
   1706c:	add	r5, r1, #8
   17070:	mov	r0, #128	; 0x80
   17074:	ldr	r1, [r4]
   17078:	cmp	r1, r6
   1707c:	bcs	170a4 <rb_patricia_search_exact+0x50>
   17080:	ldrb	r2, [r5, r1, lsr #3]
   17084:	and	r1, r1, #7
   17088:	tst	r2, r0, lsr r1
   1708c:	mov	r1, #12
   17090:	movweq	r1, #8
   17094:	ldr	r4, [r4, r1]
   17098:	cmp	r4, #0
   1709c:	bne	17074 <rb_patricia_search_exact+0x20>
   170a0:	b	170d4 <rb_patricia_search_exact+0x80>
   170a4:	bhi	170d4 <rb_patricia_search_exact+0x80>
   170a8:	ldr	r0, [r4, #4]
   170ac:	cmp	r0, #0
   170b0:	beq	170d4 <rb_patricia_search_exact+0x80>
   170b4:	add	r8, r0, #8
   170b8:	lsr	r7, r6, #3
   170bc:	mov	r1, r5
   170c0:	mov	r0, r8
   170c4:	mov	r2, r7
   170c8:	bl	50f4 <bcmp@plt>
   170cc:	cmp	r0, #0
   170d0:	beq	170e0 <rb_patricia_search_exact+0x8c>
   170d4:	mov	r4, #0
   170d8:	mov	r0, r4
   170dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   170e0:	ands	r0, r6, #7
   170e4:	beq	170d8 <rb_patricia_search_exact+0x84>
   170e8:	ldrb	r1, [r8, r7]
   170ec:	ldrb	r2, [r5, r7]
   170f0:	rsb	r0, r0, #8
   170f4:	eor	r1, r2, r1
   170f8:	mov	r2, #255	; 0xff
   170fc:	tst	r1, r2, lsl r0
   17100:	movne	r4, #0
   17104:	mov	r0, r4
   17108:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001710c <rb_patricia_search_best2>:
   1710c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17110:	add	fp, sp, #28
   17114:	sub	sp, sp, #524	; 0x20c
   17118:	ldr	r7, [r0]
   1711c:	cmp	r7, #0
   17120:	beq	1722c <rb_patricia_search_best2+0x120>
   17124:	ldrh	r6, [r1, #2]
   17128:	add	sl, r1, #8
   1712c:	mov	r0, #0
   17130:	mov	r5, #128	; 0x80
   17134:	add	ip, sp, #4
   17138:	ldr	r4, [r7]
   1713c:	cmp	r4, r6
   17140:	bcs	17178 <rb_patricia_search_best2+0x6c>
   17144:	ldr	r3, [r7, #4]
   17148:	cmp	r3, #0
   1714c:	strne	r7, [ip, r0, lsl #2]
   17150:	addne	r0, r0, #1
   17154:	ldrb	r3, [sl, r4, lsr #3]
   17158:	and	r4, r4, #7
   1715c:	tst	r3, r5, lsr r4
   17160:	mov	r3, #12
   17164:	movweq	r3, #8
   17168:	ldr	r7, [r7, r3]
   1716c:	cmp	r7, #0
   17170:	bne	17138 <rb_patricia_search_best2+0x2c>
   17174:	b	17190 <rb_patricia_search_best2+0x84>
   17178:	cmp	r2, #0
   1717c:	beq	17190 <rb_patricia_search_best2+0x84>
   17180:	ldr	r2, [r7, #4]
   17184:	cmp	r2, #0
   17188:	strne	r7, [ip, r0, lsl #2]
   1718c:	addne	r0, r0, #1
   17190:	cmp	r0, #1
   17194:	blt	1722c <rb_patricia_search_best2+0x120>
   17198:	cmp	r1, #0
   1719c:	sub	r8, ip, #4
   171a0:	moveq	sl, r1
   171a4:	subs	r4, r0, #1
   171a8:	bge	171e4 <rb_patricia_search_best2+0xd8>
   171ac:	b	1722c <rb_patricia_search_best2+0x120>
   171b0:	ldrb	r1, [r6, r7]
   171b4:	ldrb	r2, [sl, r7]
   171b8:	rsb	r0, r0, #8
   171bc:	eor	r1, r2, r1
   171c0:	mov	r2, #255	; 0xff
   171c4:	and	r0, r1, r2, lsl r0
   171c8:	clz	r0, r0
   171cc:	lsr	r1, r0, #5
   171d0:	cmp	r1, #0
   171d4:	mov	r0, r4
   171d8:	bne	17220 <rb_patricia_search_best2+0x114>
   171dc:	subs	r4, r0, #1
   171e0:	blt	1722c <rb_patricia_search_best2+0x120>
   171e4:	ldr	r5, [r8, r0, lsl #2]
   171e8:	mov	r1, sl
   171ec:	ldr	r6, [r5, #4]
   171f0:	ldrh	r9, [r6, #2]
   171f4:	cmp	r6, #0
   171f8:	addne	r6, r6, #8
   171fc:	mov	r0, r6
   17200:	lsr	r7, r9, #3
   17204:	mov	r2, r7
   17208:	bl	50f4 <bcmp@plt>
   1720c:	mov	r1, #0
   17210:	cmp	r0, #0
   17214:	bne	171d0 <rb_patricia_search_best2+0xc4>
   17218:	ands	r0, r9, #7
   1721c:	bne	171b0 <rb_patricia_search_best2+0xa4>
   17220:	mov	r0, r5
   17224:	sub	sp, fp, #28
   17228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1722c:	mov	r5, #0
   17230:	mov	r0, r5
   17234:	sub	sp, fp, #28
   17238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001723c <rb_patricia_search_best>:
   1723c:	mov	r2, #1
   17240:	b	1710c <rb_patricia_search_best2>

00017244 <rb_patricia_lookup>:
   17244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17248:	add	fp, sp, #28
   1724c:	sub	sp, sp, #12
   17250:	ldr	r3, [r0]
   17254:	mov	r9, r0
   17258:	cmp	r3, #0
   1725c:	beq	172dc <rb_patricia_lookup+0x98>
   17260:	ldrh	r8, [r1, #2]
   17264:	add	r5, r1, #8
   17268:	mov	r2, #128	; 0x80
   1726c:	ldr	r6, [r3]
   17270:	mov	r0, r3
   17274:	cmp	r6, r8
   17278:	bcc	172a8 <rb_patricia_lookup+0x64>
   1727c:	b	1729c <rb_patricia_lookup+0x58>
   17280:	ldr	r3, [r0, #8]
   17284:	cmp	r3, #0
   17288:	beq	172d0 <rb_patricia_lookup+0x8c>
   1728c:	ldr	r6, [r3]
   17290:	mov	r0, r3
   17294:	cmp	r6, r8
   17298:	bcc	172a8 <rb_patricia_lookup+0x64>
   1729c:	ldr	r3, [r0, #4]
   172a0:	cmp	r3, #0
   172a4:	bne	1732c <rb_patricia_lookup+0xe8>
   172a8:	ldr	r3, [r9, #4]
   172ac:	cmp	r6, r3
   172b0:	bcs	17280 <rb_patricia_lookup+0x3c>
   172b4:	ldrb	r3, [r5, r6, lsr #3]
   172b8:	and	r7, r6, #7
   172bc:	tst	r3, r2, lsr r7
   172c0:	beq	17280 <rb_patricia_lookup+0x3c>
   172c4:	ldr	r3, [r0, #12]
   172c8:	cmp	r3, #0
   172cc:	bne	1728c <rb_patricia_lookup+0x48>
   172d0:	cmp	r6, r8
   172d4:	movcs	r6, r8
   172d8:	b	17330 <rb_patricia_lookup+0xec>
   172dc:	mov	r4, r1
   172e0:	mov	r0, #1
   172e4:	mov	r1, #24
   172e8:	bl	4e9c <calloc@plt>
   172ec:	cmp	r0, #0
   172f0:	beq	177d0 <rb_patricia_lookup+0x58c>
   172f4:	ldrh	r6, [r4, #2]
   172f8:	mov	r5, r0
   172fc:	cmp	r4, #0
   17300:	str	r6, [r0]
   17304:	mov	r0, #0
   17308:	beq	17704 <rb_patricia_lookup+0x4c0>
   1730c:	ldr	r1, [r4, #4]
   17310:	mov	r2, r4
   17314:	cmp	r1, #0
   17318:	beq	174a8 <rb_patricia_lookup+0x264>
   1731c:	add	r0, r1, #1
   17320:	str	r0, [r2, #4]
   17324:	mov	r0, r2
   17328:	b	17704 <rb_patricia_lookup+0x4c0>
   1732c:	mov	r6, r8
   17330:	ldr	r3, [r0, #4]
   17334:	cmp	r6, #0
   17338:	str	r5, [sp, #8]
   1733c:	add	r7, r3, #8
   17340:	str	r7, [sp, #4]
   17344:	beq	173d0 <rb_patricia_lookup+0x18c>
   17348:	ldrb	r2, [r5]
   1734c:	ldrb	r7, [r7]
   17350:	mov	ip, #0
   17354:	eor	r7, r7, r2
   17358:	mov	r2, #0
   1735c:	tst	r7, #255	; 0xff
   17360:	bne	17394 <rb_patricia_lookup+0x150>
   17364:	add	r5, r1, #9
   17368:	add	r3, r3, #9
   1736c:	mov	r2, #0
   17370:	add	sl, r2, #8
   17374:	cmp	sl, r6
   17378:	bcs	173d4 <rb_patricia_lookup+0x190>
   1737c:	ldrb	r7, [r5], #1
   17380:	ldrb	r4, [r3], #1
   17384:	add	r2, r2, #8
   17388:	eor	r7, r4, r7
   1738c:	tst	r7, #255	; 0xff
   17390:	beq	17370 <rb_patricia_lookup+0x12c>
   17394:	tst	r7, #128	; 0x80
   17398:	bne	173c8 <rb_patricia_lookup+0x184>
   1739c:	uxtb	r5, r7
   173a0:	mov	ip, #1
   173a4:	tst	r5, #64	; 0x40
   173a8:	moveq	ip, #2
   173ac:	tsteq	r5, #32
   173b0:	bne	173c8 <rb_patricia_lookup+0x184>
   173b4:	tst	r5, #16
   173b8:	mov	ip, #3
   173bc:	moveq	ip, #4
   173c0:	tsteq	r5, #8
   173c4:	beq	1776c <rb_patricia_lookup+0x528>
   173c8:	add	sl, ip, r2
   173cc:	b	173d4 <rb_patricia_lookup+0x190>
   173d0:	mov	sl, #0
   173d4:	cmp	sl, r6
   173d8:	movhi	sl, r6
   173dc:	mov	r5, r0
   173e0:	ldr	r0, [r0, #16]
   173e4:	cmp	r0, #0
   173e8:	beq	173f8 <rb_patricia_lookup+0x1b4>
   173ec:	ldr	r2, [r0]
   173f0:	cmp	r2, sl
   173f4:	bcs	173dc <rb_patricia_lookup+0x198>
   173f8:	mov	r4, r1
   173fc:	cmp	sl, r8
   17400:	bne	17428 <rb_patricia_lookup+0x1e4>
   17404:	ldr	r0, [r5]
   17408:	cmp	r0, r8
   1740c:	bne	17428 <rb_patricia_lookup+0x1e4>
   17410:	ldr	r0, [r5, #4]
   17414:	cmp	r0, #0
   17418:	beq	174e4 <rb_patricia_lookup+0x2a0>
   1741c:	mov	r0, r5
   17420:	sub	sp, fp, #28
   17424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17428:	mov	r0, #1
   1742c:	mov	r1, #24
   17430:	bl	4e9c <calloc@plt>
   17434:	cmp	r0, #0
   17438:	beq	177d0 <rb_patricia_lookup+0x58c>
   1743c:	mov	r7, r0
   17440:	str	r8, [r0]
   17444:	mov	r0, #0
   17448:	cmp	r4, #0
   1744c:	beq	17548 <rb_patricia_lookup+0x304>
   17450:	ldr	r1, [r4, #4]
   17454:	cmp	r1, #0
   17458:	beq	1746c <rb_patricia_lookup+0x228>
   1745c:	add	r0, r1, #1
   17460:	str	r0, [r4, #4]
   17464:	mov	r0, r4
   17468:	b	17548 <rb_patricia_lookup+0x304>
   1746c:	ldrh	r4, [r4]
   17470:	cmp	r4, #2
   17474:	beq	17518 <rb_patricia_lookup+0x2d4>
   17478:	cmp	r4, #10
   1747c:	bne	17548 <rb_patricia_lookup+0x304>
   17480:	mov	r0, #1
   17484:	mov	r1, #24
   17488:	bl	4e9c <calloc@plt>
   1748c:	cmp	r0, #0
   17490:	beq	177d0 <rb_patricia_lookup+0x58c>
   17494:	ldr	r1, [sp, #8]
   17498:	vld1.8	{d16-d17}, [r1]
   1749c:	add	r1, r0, #8
   174a0:	vst1.8	{d16-d17}, [r1]
   174a4:	b	17538 <rb_patricia_lookup+0x2f4>
   174a8:	ldrh	r7, [r2], #8
   174ac:	cmp	r7, #2
   174b0:	beq	176d4 <rb_patricia_lookup+0x490>
   174b4:	cmp	r7, #10
   174b8:	bne	17704 <rb_patricia_lookup+0x4c0>
   174bc:	mov	r0, #1
   174c0:	mov	r1, #24
   174c4:	mov	r4, r2
   174c8:	bl	4e9c <calloc@plt>
   174cc:	cmp	r0, #0
   174d0:	beq	177d0 <rb_patricia_lookup+0x58c>
   174d4:	vld1.8	{d16-d17}, [r4]
   174d8:	add	r1, r0, #8
   174dc:	vst1.8	{d16-d17}, [r1]
   174e0:	b	176f4 <rb_patricia_lookup+0x4b0>
   174e4:	mov	r0, #0
   174e8:	cmp	r4, #0
   174ec:	beq	17508 <rb_patricia_lookup+0x2c4>
   174f0:	ldr	r1, [r4, #4]
   174f4:	cmp	r1, #0
   174f8:	beq	17730 <rb_patricia_lookup+0x4ec>
   174fc:	add	r0, r1, #1
   17500:	str	r0, [r4, #4]
   17504:	mov	r0, r4
   17508:	str	r0, [r5, #4]
   1750c:	mov	r0, r5
   17510:	sub	sp, fp, #28
   17514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17518:	mov	r0, #1
   1751c:	mov	r1, #24
   17520:	bl	4e9c <calloc@plt>
   17524:	cmp	r0, #0
   17528:	beq	177d0 <rb_patricia_lookup+0x58c>
   1752c:	ldr	r1, [sp, #8]
   17530:	ldr	r1, [r1]
   17534:	str	r1, [r0, #8]
   17538:	mov	r1, #1
   1753c:	str	r1, [r0, #4]
   17540:	strh	r4, [r0]
   17544:	strh	r8, [r0, #2]
   17548:	vmov.i32	q8, #0	; 0x00000000
   1754c:	str	r0, [r7, #4]
   17550:	add	r0, r7, #8
   17554:	vst1.32	{d16-d17}, [r0]
   17558:	ldr	r4, [r9, #8]
   1755c:	add	r1, r4, #1
   17560:	str	r1, [r9, #8]
   17564:	ldr	r1, [r5]
   17568:	cmp	r1, sl
   1756c:	bne	175ac <rb_patricia_lookup+0x368>
   17570:	str	r5, [r7, #16]
   17574:	ldr	r0, [r9, #4]
   17578:	cmp	sl, r0
   1757c:	bcs	17618 <rb_patricia_lookup+0x3d4>
   17580:	ldr	r0, [sp, #8]
   17584:	and	r1, sl, #7
   17588:	mov	r2, #128	; 0x80
   1758c:	ldrb	r0, [r0, sl, lsr #3]
   17590:	tst	r0, r2, lsr r1
   17594:	beq	17618 <rb_patricia_lookup+0x3d4>
   17598:	str	r7, [r5, #12]
   1759c:	mov	r5, r7
   175a0:	mov	r0, r5
   175a4:	sub	sp, fp, #28
   175a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175ac:	cmp	sl, r8
   175b0:	bne	1762c <rb_patricia_lookup+0x3e8>
   175b4:	ldr	r1, [r9, #4]
   175b8:	cmp	r1, r8
   175bc:	bls	175d8 <rb_patricia_lookup+0x394>
   175c0:	ldr	r1, [sp, #4]
   175c4:	and	r2, r8, #7
   175c8:	mov	r3, #128	; 0x80
   175cc:	ldrb	r1, [r1, r8, lsr #3]
   175d0:	tst	r1, r3, lsr r2
   175d4:	addne	r0, r7, #12
   175d8:	str	r5, [r0]
   175dc:	ldr	r0, [r5, #16]
   175e0:	str	r0, [r7, #16]
   175e4:	ldr	r0, [r5, #16]
   175e8:	cmp	r0, #0
   175ec:	beq	17600 <rb_patricia_lookup+0x3bc>
   175f0:	mov	r9, r0
   175f4:	ldr	r1, [r9, #12]!
   175f8:	cmp	r1, r5
   175fc:	addne	r9, r0, #8
   17600:	str	r7, [r9]
   17604:	str	r7, [r5, #16]
   17608:	mov	r5, r7
   1760c:	mov	r0, r5
   17610:	sub	sp, fp, #28
   17614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17618:	str	r7, [r5, #8]
   1761c:	mov	r5, r7
   17620:	mov	r0, r5
   17624:	sub	sp, fp, #28
   17628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1762c:	mov	r0, #1
   17630:	mov	r1, #24
   17634:	bl	4e9c <calloc@plt>
   17638:	cmp	r0, #0
   1763c:	beq	177d0 <rb_patricia_lookup+0x58c>
   17640:	str	sl, [r0]
   17644:	ldr	r1, [r5, #16]
   17648:	str	r1, [r0, #16]
   1764c:	add	r1, r4, #2
   17650:	str	r1, [r9, #8]
   17654:	ldr	r1, [r9, #4]
   17658:	cmp	sl, r1
   1765c:	bcs	17694 <rb_patricia_lookup+0x450>
   17660:	ldr	r1, [sp, #8]
   17664:	and	r2, sl, #7
   17668:	mov	r3, #128	; 0x80
   1766c:	ldrb	r1, [r1, sl, lsr #3]
   17670:	tst	r1, r3, lsr r2
   17674:	beq	17694 <rb_patricia_lookup+0x450>
   17678:	str	r5, [r0, #8]
   1767c:	str	r7, [r0, #12]
   17680:	str	r0, [r7, #16]
   17684:	ldr	r1, [r5, #16]
   17688:	cmp	r1, #0
   1768c:	bne	176ac <rb_patricia_lookup+0x468>
   17690:	b	176bc <rb_patricia_lookup+0x478>
   17694:	str	r7, [r0, #8]
   17698:	str	r5, [r0, #12]
   1769c:	str	r0, [r7, #16]
   176a0:	ldr	r1, [r5, #16]
   176a4:	cmp	r1, #0
   176a8:	beq	176bc <rb_patricia_lookup+0x478>
   176ac:	mov	r9, r1
   176b0:	ldr	r2, [r9, #12]!
   176b4:	cmp	r2, r5
   176b8:	addne	r9, r1, #8
   176bc:	str	r0, [r9]
   176c0:	str	r0, [r5, #16]
   176c4:	mov	r5, r7
   176c8:	mov	r0, r5
   176cc:	sub	sp, fp, #28
   176d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176d4:	mov	r0, #1
   176d8:	mov	r1, #24
   176dc:	mov	r4, r2
   176e0:	bl	4e9c <calloc@plt>
   176e4:	cmp	r0, #0
   176e8:	beq	177d0 <rb_patricia_lookup+0x58c>
   176ec:	ldr	r1, [r4]
   176f0:	str	r1, [r0, #8]
   176f4:	mov	r1, #1
   176f8:	str	r1, [r0, #4]
   176fc:	strh	r7, [r0]
   17700:	strh	r6, [r0, #2]
   17704:	vmov.i32	q8, #0	; 0x00000000
   17708:	str	r0, [r5, #4]
   1770c:	add	r0, r5, #8
   17710:	vst1.32	{d16-d17}, [r0]
   17714:	str	r5, [r9]
   17718:	ldr	r0, [r9, #8]
   1771c:	add	r0, r0, #1
   17720:	str	r0, [r9, #8]
   17724:	mov	r0, r5
   17728:	sub	sp, fp, #28
   1772c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17730:	ldrh	r4, [r4]
   17734:	cmp	r4, #2
   17738:	beq	17790 <rb_patricia_lookup+0x54c>
   1773c:	cmp	r4, #10
   17740:	bne	17508 <rb_patricia_lookup+0x2c4>
   17744:	mov	r0, #1
   17748:	mov	r1, #24
   1774c:	bl	4e9c <calloc@plt>
   17750:	cmp	r0, #0
   17754:	beq	177d0 <rb_patricia_lookup+0x58c>
   17758:	ldr	r1, [sp, #8]
   1775c:	vld1.8	{d16-d17}, [r1]
   17760:	add	r1, r0, #8
   17764:	vst1.8	{d16-d17}, [r1]
   17768:	b	177b0 <rb_patricia_lookup+0x56c>
   1776c:	tst	r5, #4
   17770:	mov	ip, #5
   17774:	moveq	ip, #6
   17778:	tsteq	r5, #2
   1777c:	bne	173c8 <rb_patricia_lookup+0x184>
   17780:	tst	r5, #1
   17784:	mov	ip, #7
   17788:	movweq	ip, #8
   1778c:	b	173c8 <rb_patricia_lookup+0x184>
   17790:	mov	r0, #1
   17794:	mov	r1, #24
   17798:	bl	4e9c <calloc@plt>
   1779c:	cmp	r0, #0
   177a0:	beq	177d0 <rb_patricia_lookup+0x58c>
   177a4:	ldr	r1, [sp, #8]
   177a8:	ldr	r1, [r1]
   177ac:	str	r1, [r0, #8]
   177b0:	mov	r1, #1
   177b4:	str	r1, [r0, #4]
   177b8:	strh	r4, [r0]
   177bc:	strh	r8, [r0, #2]
   177c0:	str	r0, [r5, #4]
   177c4:	mov	r0, r5
   177c8:	sub	sp, fp, #28
   177cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177d0:	bl	51fc <rb_outofmemory@plt>

000177d4 <rb_patricia_remove>:
   177d4:	push	{r4, r5, r6, r7, fp, lr}
   177d8:	add	fp, sp, #16
   177dc:	ldr	r6, [r1, #12]
   177e0:	mov	r4, r0
   177e4:	ldr	r0, [r1, #8]
   177e8:	mov	r5, r1
   177ec:	cmp	r6, #0
   177f0:	beq	1782c <rb_patricia_remove+0x58>
   177f4:	cmp	r0, #0
   177f8:	beq	17838 <rb_patricia_remove+0x64>
   177fc:	ldr	r0, [r5, #4]
   17800:	cmp	r0, #0
   17804:	beq	1781c <rb_patricia_remove+0x48>
   17808:	ldr	r1, [r0, #4]
   1780c:	subs	r1, r1, #1
   17810:	str	r1, [r0, #4]
   17814:	bgt	1781c <rb_patricia_remove+0x48>
   17818:	bl	4f8c <free@plt>
   1781c:	mov	r0, #0
   17820:	str	r0, [r5, #20]
   17824:	str	r0, [r5, #4]
   17828:	pop	{r4, r5, r6, r7, fp, pc}
   1782c:	cmp	r0, #0
   17830:	mov	r6, r0
   17834:	beq	17898 <rb_patricia_remove+0xc4>
   17838:	ldr	r7, [r5, #16]
   1783c:	str	r7, [r6, #16]
   17840:	ldr	r0, [r5, #4]
   17844:	cmp	r0, #0
   17848:	beq	17860 <rb_patricia_remove+0x8c>
   1784c:	ldr	r1, [r0, #4]
   17850:	subs	r1, r1, #1
   17854:	str	r1, [r0, #4]
   17858:	bgt	17860 <rb_patricia_remove+0x8c>
   1785c:	bl	4f8c <free@plt>
   17860:	mov	r0, r5
   17864:	bl	4f8c <free@plt>
   17868:	ldr	r0, [r4, #8]
   1786c:	cmp	r7, #0
   17870:	sub	r0, r0, #1
   17874:	str	r0, [r4, #8]
   17878:	beq	17890 <rb_patricia_remove+0xbc>
   1787c:	ldr	r0, [r7, #12]
   17880:	cmp	r0, r5
   17884:	beq	178f0 <rb_patricia_remove+0x11c>
   17888:	str	r6, [r7, #8]
   1788c:	pop	{r4, r5, r6, r7, fp, pc}
   17890:	str	r6, [r4]
   17894:	pop	{r4, r5, r6, r7, fp, pc}
   17898:	ldr	r0, [r5, #4]
   1789c:	ldr	r6, [r5, #16]
   178a0:	cmp	r0, #0
   178a4:	beq	178bc <rb_patricia_remove+0xe8>
   178a8:	ldr	r1, [r0, #4]
   178ac:	subs	r1, r1, #1
   178b0:	str	r1, [r0, #4]
   178b4:	bgt	178bc <rb_patricia_remove+0xe8>
   178b8:	bl	4f8c <free@plt>
   178bc:	mov	r0, r5
   178c0:	bl	4f8c <free@plt>
   178c4:	ldr	r0, [r4, #8]
   178c8:	cmp	r6, #0
   178cc:	sub	r0, r0, #1
   178d0:	str	r0, [r4, #8]
   178d4:	beq	178f8 <rb_patricia_remove+0x124>
   178d8:	ldr	r0, [r6, #12]
   178dc:	cmp	r0, r5
   178e0:	beq	17904 <rb_patricia_remove+0x130>
   178e4:	mov	r1, #0
   178e8:	str	r1, [r6, #8]
   178ec:	b	17910 <rb_patricia_remove+0x13c>
   178f0:	str	r6, [r7, #12]
   178f4:	pop	{r4, r5, r6, r7, fp, pc}
   178f8:	mov	r0, #0
   178fc:	str	r0, [r4]
   17900:	pop	{r4, r5, r6, r7, fp, pc}
   17904:	mov	r0, #0
   17908:	str	r0, [r6, #12]
   1790c:	ldr	r0, [r6, #8]
   17910:	ldr	r1, [r6, #4]
   17914:	cmp	r1, #0
   17918:	popne	{r4, r5, r6, r7, fp, pc}
   1791c:	ldr	r1, [r6, #16]
   17920:	cmp	r1, #0
   17924:	beq	1793c <rb_patricia_remove+0x168>
   17928:	mov	r2, r1
   1792c:	ldr	r3, [r2, #12]!
   17930:	cmp	r3, r6
   17934:	subne	r2, r2, #4
   17938:	b	17940 <rb_patricia_remove+0x16c>
   1793c:	mov	r2, r4
   17940:	str	r0, [r2]
   17944:	str	r1, [r0, #16]
   17948:	mov	r0, r6
   1794c:	bl	4f8c <free@plt>
   17950:	ldr	r0, [r4, #8]
   17954:	sub	r0, r0, #1
   17958:	str	r0, [r4, #8]
   1795c:	pop	{r4, r5, r6, r7, fp, pc}

00017960 <make_and_lookup_ip>:
   17960:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17964:	add	fp, sp, #24
   17968:	mov	r5, r1
   1796c:	mov	r9, r2
   17970:	mov	r8, r0
   17974:	ldrh	r4, [r5], #8
   17978:	cmp	r4, #10
   1797c:	addne	r5, r1, #4
   17980:	cmp	r4, #2
   17984:	beq	179bc <make_and_lookup_ip+0x5c>
   17988:	mov	r7, #0
   1798c:	cmp	r4, #10
   17990:	bne	17a1c <make_and_lookup_ip+0xbc>
   17994:	mov	r0, #1
   17998:	mov	r1, #24
   1799c:	bl	4e9c <calloc@plt>
   179a0:	cmp	r0, #0
   179a4:	beq	17a24 <make_and_lookup_ip+0xc4>
   179a8:	vld1.8	{d16-d17}, [r5]
   179ac:	mov	r6, r0
   179b0:	add	r0, r0, #8
   179b4:	vst1.8	{d16-d17}, [r0]
   179b8:	b	179dc <make_and_lookup_ip+0x7c>
   179bc:	mov	r0, #1
   179c0:	mov	r1, #24
   179c4:	bl	4e9c <calloc@plt>
   179c8:	cmp	r0, #0
   179cc:	beq	17a24 <make_and_lookup_ip+0xc4>
   179d0:	mov	r6, r0
   179d4:	ldr	r0, [r5]
   179d8:	str	r0, [r6, #8]
   179dc:	cmn	r9, #1
   179e0:	mov	r0, #1
   179e4:	mov	r1, r6
   179e8:	str	r0, [r6, #4]
   179ec:	mov	r0, r8
   179f0:	movle	r9, #128	; 0x80
   179f4:	strh	r4, [r6]
   179f8:	strh	r9, [r6, #2]
   179fc:	bl	5178 <rb_patricia_lookup@plt>
   17a00:	mov	r7, r0
   17a04:	ldr	r0, [r6, #4]
   17a08:	subs	r0, r0, #1
   17a0c:	str	r0, [r6, #4]
   17a10:	bgt	17a1c <make_and_lookup_ip+0xbc>
   17a14:	mov	r0, r6
   17a18:	bl	4f8c <free@plt>
   17a1c:	mov	r0, r7
   17a20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17a24:	bl	51fc <rb_outofmemory@plt>

00017a28 <make_and_lookup>:
   17a28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17a2c:	add	fp, sp, #24
   17a30:	sub	sp, sp, #24
   17a34:	sub	sp, sp, #1024	; 0x400
   17a38:	mov	r5, r1
   17a3c:	mov	r8, r0
   17a40:	cmp	r1, #0
   17a44:	beq	17b04 <make_and_lookup+0xdc>
   17a48:	mov	r0, r5
   17a4c:	mov	r1, #47	; 0x2f
   17a50:	bl	4e6c <strchr@plt>
   17a54:	cmp	r0, #0
   17a58:	beq	17aa4 <make_and_lookup+0x7c>
   17a5c:	mov	r7, r0
   17a60:	add	r0, r0, #1
   17a64:	mov	r1, #0
   17a68:	mov	r2, #10
   17a6c:	mov	r9, #0
   17a70:	bl	510c <strtol@plt>
   17a74:	sub	r4, r7, r5
   17a78:	mov	r7, sp
   17a7c:	mov	r6, r0
   17a80:	mov	r1, r5
   17a84:	mov	r0, r7
   17a88:	mov	r2, r4
   17a8c:	bl	5094 <memcpy@plt>
   17a90:	sub	r0, r6, #1
   17a94:	strb	r9, [r7, r4]
   17a98:	cmp	r0, #31
   17a9c:	movwhi	r6, #32
   17aa0:	b	17aac <make_and_lookup+0x84>
   17aa4:	mov	r6, #32
   17aa8:	mov	r7, r5
   17aac:	sub	r2, fp, #48	; 0x30
   17ab0:	mov	r0, #2
   17ab4:	mov	r1, r7
   17ab8:	bl	4ee4 <rb_inet_pton@plt>
   17abc:	cmp	r0, #1
   17ac0:	blt	17b04 <make_and_lookup+0xdc>
   17ac4:	mov	r0, #1
   17ac8:	mov	r1, #24
   17acc:	mov	r4, #1
   17ad0:	bl	4e9c <calloc@plt>
   17ad4:	cmp	r0, #0
   17ad8:	beq	17c10 <make_and_lookup+0x1e8>
   17adc:	mov	r5, r0
   17ae0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17ae4:	cmn	r6, #1
   17ae8:	mov	r1, #2
   17aec:	movle	r6, #128	; 0x80
   17af0:	strh	r1, [r5]
   17af4:	strh	r6, [r5, #2]
   17af8:	str	r4, [r5, #4]
   17afc:	str	r0, [r5, #8]
   17b00:	b	17bcc <make_and_lookup+0x1a4>
   17b04:	cmp	r5, #0
   17b08:	beq	17c00 <make_and_lookup+0x1d8>
   17b0c:	mov	r0, r5
   17b10:	mov	r1, #47	; 0x2f
   17b14:	bl	4e6c <strchr@plt>
   17b18:	cmp	r0, #0
   17b1c:	beq	17b6c <make_and_lookup+0x144>
   17b20:	mov	r7, r0
   17b24:	add	r0, r0, #1
   17b28:	mov	r1, #0
   17b2c:	mov	r2, #10
   17b30:	mov	r9, #0
   17b34:	bl	510c <strtol@plt>
   17b38:	sub	r4, r7, r5
   17b3c:	mov	r7, sp
   17b40:	mov	r6, r0
   17b44:	mov	r1, r5
   17b48:	mov	r0, r7
   17b4c:	mov	r2, r4
   17b50:	bl	5094 <memcpy@plt>
   17b54:	sub	r0, r6, #1
   17b58:	mov	r5, r7
   17b5c:	strb	r9, [r7, r4]
   17b60:	cmp	r0, #127	; 0x7f
   17b64:	movwhi	r6, #128	; 0x80
   17b68:	b	17b70 <make_and_lookup+0x148>
   17b6c:	mov	r6, #128	; 0x80
   17b70:	sub	r7, fp, #48	; 0x30
   17b74:	mov	r0, #10
   17b78:	mov	r1, r5
   17b7c:	mov	r2, r7
   17b80:	bl	4ee4 <rb_inet_pton@plt>
   17b84:	cmp	r0, #1
   17b88:	blt	17c00 <make_and_lookup+0x1d8>
   17b8c:	mov	r0, #1
   17b90:	mov	r1, #24
   17b94:	mov	r4, #1
   17b98:	bl	4e9c <calloc@plt>
   17b9c:	cmp	r0, #0
   17ba0:	beq	17c10 <make_and_lookup+0x1e8>
   17ba4:	vld1.64	{d16-d17}, [r7]
   17ba8:	cmn	r6, #1
   17bac:	mov	r5, r0
   17bb0:	movle	r6, #128	; 0x80
   17bb4:	strh	r6, [r0, #2]
   17bb8:	str	r4, [r0, #4]
   17bbc:	mov	r0, #10
   17bc0:	strh	r0, [r5]
   17bc4:	add	r0, r5, #8
   17bc8:	vst1.32	{d16-d17}, [r0]
   17bcc:	mov	r0, r8
   17bd0:	mov	r1, r5
   17bd4:	bl	5178 <rb_patricia_lookup@plt>
   17bd8:	mov	r4, r0
   17bdc:	ldr	r0, [r5, #4]
   17be0:	subs	r0, r0, #1
   17be4:	str	r0, [r5, #4]
   17be8:	bgt	17bf4 <make_and_lookup+0x1cc>
   17bec:	mov	r0, r5
   17bf0:	bl	4f8c <free@plt>
   17bf4:	mov	r0, r4
   17bf8:	sub	sp, fp, #24
   17bfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17c00:	mov	r4, #0
   17c04:	mov	r0, r4
   17c08:	sub	sp, fp, #24
   17c0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17c10:	bl	51fc <rb_outofmemory@plt>

00017c14 <rb_match_ip>:
   17c14:	push	{r4, r5, r6, r7, fp, lr}
   17c18:	add	fp, sp, #16
   17c1c:	mov	r7, r1
   17c20:	mov	r4, r0
   17c24:	mov	r0, #1
   17c28:	ldrh	r6, [r7], #8
   17c2c:	cmp	r6, #10
   17c30:	addne	r7, r1, #4
   17c34:	mov	r1, #24
   17c38:	bl	4e9c <calloc@plt>
   17c3c:	mov	r5, r0
   17c40:	cmp	r6, #10
   17c44:	bne	17c60 <rb_match_ip+0x4c>
   17c48:	cmp	r5, #0
   17c4c:	beq	17cb4 <rb_match_ip+0xa0>
   17c50:	vld1.8	{d16-d17}, [r7]
   17c54:	add	r0, r5, #8
   17c58:	vst1.8	{d16-d17}, [r0]
   17c5c:	b	17c70 <rb_match_ip+0x5c>
   17c60:	cmp	r5, #0
   17c64:	beq	17cb4 <rb_match_ip+0xa0>
   17c68:	ldr	r0, [r7]
   17c6c:	str	r0, [r5, #8]
   17c70:	cmp	r6, #10
   17c74:	mov	r0, #1
   17c78:	mov	r1, r5
   17c7c:	mov	r2, #1
   17c80:	str	r0, [r5, #4]
   17c84:	mov	r0, #32
   17c88:	movwne	r6, #2
   17c8c:	movweq	r0, #128	; 0x80
   17c90:	strh	r6, [r5]
   17c94:	strh	r0, [r5, #2]
   17c98:	mov	r0, r4
   17c9c:	bl	4f50 <rb_patricia_search_best2@plt>
   17ca0:	mov	r4, r0
   17ca4:	mov	r0, r5
   17ca8:	bl	4f8c <free@plt>
   17cac:	mov	r0, r4
   17cb0:	pop	{r4, r5, r6, r7, fp, pc}
   17cb4:	bl	51fc <rb_outofmemory@plt>

00017cb8 <rb_match_ip_exact>:
   17cb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17cbc:	add	fp, sp, #24
   17cc0:	mov	r6, r1
   17cc4:	cmp	r2, #128	; 0x80
   17cc8:	mov	r8, r0
   17ccc:	mov	r0, r2
   17cd0:	mov	r5, r2
   17cd4:	ldrh	r7, [r6], #8
   17cd8:	movcs	r0, #128	; 0x80
   17cdc:	cmp	r2, #32
   17ce0:	movcs	r5, #32
   17ce4:	cmp	r7, #10
   17ce8:	moveq	r5, r0
   17cec:	addne	r6, r1, #4
   17cf0:	mov	r0, #1
   17cf4:	mov	r1, #24
   17cf8:	bl	4e9c <calloc@plt>
   17cfc:	mov	r4, r0
   17d00:	cmp	r7, #10
   17d04:	bne	17d20 <rb_match_ip_exact+0x68>
   17d08:	cmp	r4, #0
   17d0c:	beq	17e04 <rb_match_ip_exact+0x14c>
   17d10:	vld1.8	{d16-d17}, [r6]
   17d14:	add	r0, r4, #8
   17d18:	vst1.8	{d16-d17}, [r0]
   17d1c:	b	17d30 <rb_match_ip_exact+0x78>
   17d20:	cmp	r4, #0
   17d24:	beq	17e04 <rb_match_ip_exact+0x14c>
   17d28:	ldr	r0, [r6]
   17d2c:	str	r0, [r4, #8]
   17d30:	cmp	r7, #10
   17d34:	mov	r0, #1
   17d38:	movwne	r7, #2
   17d3c:	str	r0, [r4, #4]
   17d40:	strh	r5, [r4, #2]
   17d44:	strh	r7, [r4]
   17d48:	ldr	r6, [r8]
   17d4c:	cmp	r6, #0
   17d50:	beq	17dbc <rb_match_ip_exact+0x104>
   17d54:	add	r7, r4, #8
   17d58:	mov	r0, #128	; 0x80
   17d5c:	ldr	r1, [r6]
   17d60:	cmp	r1, r5
   17d64:	bcs	17d8c <rb_match_ip_exact+0xd4>
   17d68:	ldrb	r2, [r7, r1, lsr #3]
   17d6c:	and	r1, r1, #7
   17d70:	tst	r2, r0, lsr r1
   17d74:	mov	r1, #12
   17d78:	movweq	r1, #8
   17d7c:	ldr	r6, [r6, r1]
   17d80:	cmp	r6, #0
   17d84:	bne	17d5c <rb_match_ip_exact+0xa4>
   17d88:	b	17dbc <rb_match_ip_exact+0x104>
   17d8c:	bhi	17dbc <rb_match_ip_exact+0x104>
   17d90:	ldr	r0, [r6, #4]
   17d94:	cmp	r0, #0
   17d98:	beq	17dbc <rb_match_ip_exact+0x104>
   17d9c:	add	r8, r0, #8
   17da0:	lsr	r9, r5, #3
   17da4:	mov	r1, r7
   17da8:	mov	r0, r8
   17dac:	mov	r2, r9
   17db0:	bl	50f4 <bcmp@plt>
   17db4:	cmp	r0, #0
   17db8:	beq	17dd0 <rb_match_ip_exact+0x118>
   17dbc:	mov	r6, #0
   17dc0:	mov	r0, r4
   17dc4:	bl	4f8c <free@plt>
   17dc8:	mov	r0, r6
   17dcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17dd0:	ands	r0, r5, #7
   17dd4:	beq	17dc0 <rb_match_ip_exact+0x108>
   17dd8:	ldrb	r1, [r8, r9]
   17ddc:	ldrb	r2, [r7, r9]
   17de0:	rsb	r0, r0, #8
   17de4:	eor	r1, r2, r1
   17de8:	mov	r2, #255	; 0xff
   17dec:	tst	r1, r2, lsl r0
   17df0:	movne	r6, #0
   17df4:	mov	r0, r4
   17df8:	bl	4f8c <free@plt>
   17dfc:	mov	r0, r6
   17e00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17e04:	bl	51fc <rb_outofmemory@plt>

00017e08 <rb_match_string>:
   17e08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17e0c:	add	fp, sp, #24
   17e10:	sub	sp, sp, #24
   17e14:	sub	sp, sp, #1024	; 0x400
   17e18:	mov	r5, r1
   17e1c:	mov	r8, r0
   17e20:	cmp	r1, #0
   17e24:	beq	17ee4 <rb_match_string+0xdc>
   17e28:	mov	r0, r5
   17e2c:	mov	r1, #47	; 0x2f
   17e30:	bl	4e6c <strchr@plt>
   17e34:	cmp	r0, #0
   17e38:	beq	17e84 <rb_match_string+0x7c>
   17e3c:	mov	r7, r0
   17e40:	add	r0, r0, #1
   17e44:	mov	r1, #0
   17e48:	mov	r2, #10
   17e4c:	mov	r9, #0
   17e50:	bl	510c <strtol@plt>
   17e54:	sub	r4, r7, r5
   17e58:	mov	r7, sp
   17e5c:	mov	r6, r0
   17e60:	mov	r1, r5
   17e64:	mov	r0, r7
   17e68:	mov	r2, r4
   17e6c:	bl	5094 <memcpy@plt>
   17e70:	sub	r0, r6, #1
   17e74:	strb	r9, [r7, r4]
   17e78:	cmp	r0, #31
   17e7c:	movwhi	r6, #32
   17e80:	b	17e8c <rb_match_string+0x84>
   17e84:	mov	r6, #32
   17e88:	mov	r7, r5
   17e8c:	sub	r2, fp, #48	; 0x30
   17e90:	mov	r0, #2
   17e94:	mov	r1, r7
   17e98:	bl	4ee4 <rb_inet_pton@plt>
   17e9c:	cmp	r0, #1
   17ea0:	blt	17ee4 <rb_match_string+0xdc>
   17ea4:	mov	r0, #1
   17ea8:	mov	r1, #24
   17eac:	mov	r4, #1
   17eb0:	bl	4e9c <calloc@plt>
   17eb4:	cmp	r0, #0
   17eb8:	beq	17fe4 <rb_match_string+0x1dc>
   17ebc:	mov	r5, r0
   17ec0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17ec4:	cmn	r6, #1
   17ec8:	mov	r1, #2
   17ecc:	movle	r6, #128	; 0x80
   17ed0:	strh	r1, [r5]
   17ed4:	strh	r6, [r5, #2]
   17ed8:	str	r4, [r5, #4]
   17edc:	str	r0, [r5, #8]
   17ee0:	b	17fac <rb_match_string+0x1a4>
   17ee4:	cmp	r5, #0
   17ee8:	beq	17fd4 <rb_match_string+0x1cc>
   17eec:	mov	r0, r5
   17ef0:	mov	r1, #47	; 0x2f
   17ef4:	bl	4e6c <strchr@plt>
   17ef8:	cmp	r0, #0
   17efc:	beq	17f4c <rb_match_string+0x144>
   17f00:	mov	r7, r0
   17f04:	add	r0, r0, #1
   17f08:	mov	r1, #0
   17f0c:	mov	r2, #10
   17f10:	mov	r9, #0
   17f14:	bl	510c <strtol@plt>
   17f18:	sub	r4, r7, r5
   17f1c:	mov	r7, sp
   17f20:	mov	r6, r0
   17f24:	mov	r1, r5
   17f28:	mov	r0, r7
   17f2c:	mov	r2, r4
   17f30:	bl	5094 <memcpy@plt>
   17f34:	sub	r0, r6, #1
   17f38:	mov	r5, r7
   17f3c:	strb	r9, [r7, r4]
   17f40:	cmp	r0, #127	; 0x7f
   17f44:	movwhi	r6, #128	; 0x80
   17f48:	b	17f50 <rb_match_string+0x148>
   17f4c:	mov	r6, #128	; 0x80
   17f50:	sub	r7, fp, #48	; 0x30
   17f54:	mov	r0, #10
   17f58:	mov	r1, r5
   17f5c:	mov	r2, r7
   17f60:	bl	4ee4 <rb_inet_pton@plt>
   17f64:	cmp	r0, #1
   17f68:	blt	17fd4 <rb_match_string+0x1cc>
   17f6c:	mov	r0, #1
   17f70:	mov	r1, #24
   17f74:	mov	r4, #1
   17f78:	bl	4e9c <calloc@plt>
   17f7c:	cmp	r0, #0
   17f80:	beq	17fe4 <rb_match_string+0x1dc>
   17f84:	vld1.64	{d16-d17}, [r7]
   17f88:	cmn	r6, #1
   17f8c:	mov	r5, r0
   17f90:	movle	r6, #128	; 0x80
   17f94:	strh	r6, [r0, #2]
   17f98:	str	r4, [r0, #4]
   17f9c:	mov	r0, #10
   17fa0:	strh	r0, [r5]
   17fa4:	add	r0, r5, #8
   17fa8:	vst1.32	{d16-d17}, [r0]
   17fac:	mov	r0, r8
   17fb0:	mov	r1, r5
   17fb4:	mov	r2, #1
   17fb8:	bl	4f50 <rb_patricia_search_best2@plt>
   17fbc:	mov	r4, r0
   17fc0:	mov	r0, r5
   17fc4:	bl	4f8c <free@plt>
   17fc8:	mov	r0, r4
   17fcc:	sub	sp, fp, #24
   17fd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17fd4:	mov	r4, #0
   17fd8:	mov	r0, r4
   17fdc:	sub	sp, fp, #24
   17fe0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17fe4:	bl	51fc <rb_outofmemory@plt>

00017fe8 <rb_match_exact_string>:
   17fe8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17fec:	add	fp, sp, #24
   17ff0:	sub	sp, sp, #24
   17ff4:	sub	sp, sp, #1024	; 0x400
   17ff8:	mov	r5, r1
   17ffc:	mov	r8, r0
   18000:	cmp	r1, #0
   18004:	beq	18108 <rb_match_exact_string+0x120>
   18008:	mov	r0, r5
   1800c:	mov	r1, #47	; 0x2f
   18010:	bl	4e6c <strchr@plt>
   18014:	cmp	r0, #0
   18018:	beq	18064 <rb_match_exact_string+0x7c>
   1801c:	mov	r7, r0
   18020:	add	r0, r0, #1
   18024:	mov	r1, #0
   18028:	mov	r2, #10
   1802c:	mov	r9, #0
   18030:	bl	510c <strtol@plt>
   18034:	sub	r4, r7, r5
   18038:	mov	r7, sp
   1803c:	mov	r6, r0
   18040:	mov	r1, r5
   18044:	mov	r0, r7
   18048:	mov	r2, r4
   1804c:	bl	5094 <memcpy@plt>
   18050:	sub	r0, r6, #1
   18054:	strb	r9, [r7, r4]
   18058:	cmp	r0, #31
   1805c:	movwhi	r6, #32
   18060:	b	1806c <rb_match_exact_string+0x84>
   18064:	mov	r6, #32
   18068:	mov	r7, r5
   1806c:	sub	r2, fp, #48	; 0x30
   18070:	mov	r0, #2
   18074:	mov	r1, r7
   18078:	bl	4ee4 <rb_inet_pton@plt>
   1807c:	cmp	r0, #1
   18080:	blt	18108 <rb_match_exact_string+0x120>
   18084:	mov	r0, #1
   18088:	mov	r1, #24
   1808c:	mov	r4, #1
   18090:	bl	4e9c <calloc@plt>
   18094:	cmp	r0, #0
   18098:	beq	18294 <rb_match_exact_string+0x2ac>
   1809c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   180a0:	mov	r5, r0
   180a4:	str	r4, [r0, #4]
   180a8:	mov	r0, #2
   180ac:	cmn	r6, #1
   180b0:	strh	r0, [r5]
   180b4:	mov	r0, #128	; 0x80
   180b8:	mov	r7, r5
   180bc:	movle	r6, r0
   180c0:	strh	r6, [r5, #2]
   180c4:	str	r1, [r7, #8]!
   180c8:	ldr	r4, [r8]
   180cc:	cmp	r4, #0
   180d0:	beq	18254 <rb_match_exact_string+0x26c>
   180d4:	uxth	r1, r6
   180d8:	ldr	r2, [r4]
   180dc:	cmp	r2, r1
   180e0:	bcs	18224 <rb_match_exact_string+0x23c>
   180e4:	ldrb	r3, [r7, r2, lsr #3]
   180e8:	and	r2, r2, #7
   180ec:	tst	r3, r0, lsr r2
   180f0:	mov	r2, #12
   180f4:	movweq	r2, #8
   180f8:	ldr	r4, [r4, r2]
   180fc:	cmp	r4, #0
   18100:	bne	180d8 <rb_match_exact_string+0xf0>
   18104:	b	18254 <rb_match_exact_string+0x26c>
   18108:	cmp	r5, #0
   1810c:	beq	18214 <rb_match_exact_string+0x22c>
   18110:	mov	r0, r5
   18114:	mov	r1, #47	; 0x2f
   18118:	bl	4e6c <strchr@plt>
   1811c:	cmp	r0, #0
   18120:	beq	18170 <rb_match_exact_string+0x188>
   18124:	mov	r7, r0
   18128:	add	r0, r0, #1
   1812c:	mov	r1, #0
   18130:	mov	r2, #10
   18134:	mov	r9, #0
   18138:	bl	510c <strtol@plt>
   1813c:	sub	r4, r7, r5
   18140:	mov	r7, sp
   18144:	mov	r6, r0
   18148:	mov	r1, r5
   1814c:	mov	r0, r7
   18150:	mov	r2, r4
   18154:	bl	5094 <memcpy@plt>
   18158:	sub	r0, r6, #1
   1815c:	mov	r5, r7
   18160:	strb	r9, [r7, r4]
   18164:	cmp	r0, #127	; 0x7f
   18168:	movwhi	r6, #128	; 0x80
   1816c:	b	18174 <rb_match_exact_string+0x18c>
   18170:	mov	r6, #128	; 0x80
   18174:	sub	r7, fp, #48	; 0x30
   18178:	mov	r0, #10
   1817c:	mov	r1, r5
   18180:	mov	r2, r7
   18184:	bl	4ee4 <rb_inet_pton@plt>
   18188:	cmp	r0, #1
   1818c:	blt	18214 <rb_match_exact_string+0x22c>
   18190:	mov	r0, #1
   18194:	mov	r1, #24
   18198:	mov	r4, #1
   1819c:	bl	4e9c <calloc@plt>
   181a0:	cmp	r0, #0
   181a4:	beq	18294 <rb_match_exact_string+0x2ac>
   181a8:	vld1.64	{d16-d17}, [r7]
   181ac:	mov	r5, r0
   181b0:	mov	r0, #128	; 0x80
   181b4:	cmn	r6, #1
   181b8:	mov	r1, #10
   181bc:	movle	r6, r0
   181c0:	add	r7, r5, #8
   181c4:	strh	r6, [r5, #2]
   181c8:	str	r4, [r5, #4]
   181cc:	strh	r1, [r5]
   181d0:	vst1.32	{d16-d17}, [r7]
   181d4:	ldr	r4, [r8]
   181d8:	cmp	r4, #0
   181dc:	beq	18254 <rb_match_exact_string+0x26c>
   181e0:	uxth	r1, r6
   181e4:	ldr	r2, [r4]
   181e8:	cmp	r2, r1
   181ec:	bcs	18224 <rb_match_exact_string+0x23c>
   181f0:	ldrb	r3, [r7, r2, lsr #3]
   181f4:	and	r2, r2, #7
   181f8:	tst	r3, r0, lsr r2
   181fc:	mov	r2, #12
   18200:	movweq	r2, #8
   18204:	ldr	r4, [r4, r2]
   18208:	cmp	r4, #0
   1820c:	bne	181e4 <rb_match_exact_string+0x1fc>
   18210:	b	18254 <rb_match_exact_string+0x26c>
   18214:	mov	r4, #0
   18218:	mov	r0, r4
   1821c:	sub	sp, fp, #24
   18220:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18224:	bhi	18254 <rb_match_exact_string+0x26c>
   18228:	ldr	r0, [r4, #4]
   1822c:	cmp	r0, #0
   18230:	beq	18254 <rb_match_exact_string+0x26c>
   18234:	add	r8, r0, #8
   18238:	lsr	r9, r1, #3
   1823c:	mov	r1, r7
   18240:	mov	r0, r8
   18244:	mov	r2, r9
   18248:	bl	50f4 <bcmp@plt>
   1824c:	cmp	r0, #0
   18250:	beq	1826c <rb_match_exact_string+0x284>
   18254:	mov	r4, #0
   18258:	mov	r0, r5
   1825c:	bl	4f8c <free@plt>
   18260:	mov	r0, r4
   18264:	sub	sp, fp, #24
   18268:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1826c:	ands	r0, r6, #7
   18270:	beq	18258 <rb_match_exact_string+0x270>
   18274:	ldrb	r1, [r8, r9]
   18278:	ldrb	r2, [r7, r9]
   1827c:	rsb	r0, r0, #8
   18280:	eor	r1, r2, r1
   18284:	mov	r2, #255	; 0xff
   18288:	tst	r1, r2, lsl r0
   1828c:	movne	r4, #0
   18290:	b	18258 <rb_match_exact_string+0x270>
   18294:	bl	51fc <rb_outofmemory@plt>

00018298 <rb_dictionary_create>:
   18298:	push	{r4, r5, r6, sl, fp, lr}
   1829c:	add	fp, sp, #16
   182a0:	mov	r6, r1
   182a4:	mov	r5, r0
   182a8:	mov	r0, #1
   182ac:	mov	r1, #40	; 0x28
   182b0:	bl	4e9c <calloc@plt>
   182b4:	cmp	r0, #0
   182b8:	beq	18348 <rb_dictionary_create+0xb0>
   182bc:	mov	r4, r0
   182c0:	str	r6, [r0]
   182c4:	mov	r0, r5
   182c8:	bl	5070 <strlen@plt>
   182cc:	add	r0, r0, #1
   182d0:	bl	5214 <malloc@plt>
   182d4:	cmp	r0, #0
   182d8:	beq	18348 <rb_dictionary_create+0xb0>
   182dc:	mov	r1, r5
   182e0:	bl	5124 <strcpy@plt>
   182e4:	str	r0, [r4, #20]
   182e8:	mov	r1, #0
   182ec:	ldr	r2, [pc, #88]	; 1834c <rb_dictionary_create+0xb4>
   182f0:	ldr	r2, [pc, r2]
   182f4:	str	r4, [r4, #28]
   182f8:	str	r1, [r4, #32]
   182fc:	add	r1, r4, #28
   18300:	str	r2, [r4, #36]	; 0x24
   18304:	cmp	r2, #0
   18308:	ldr	r0, [pc, #64]	; 18350 <rb_dictionary_create+0xb8>
   1830c:	add	r0, pc, r0
   18310:	beq	18320 <rb_dictionary_create+0x88>
   18314:	add	r2, r2, #4
   18318:	str	r1, [r2]
   1831c:	b	18330 <rb_dictionary_create+0x98>
   18320:	mov	r2, r0
   18324:	ldr	r3, [r2, #4]!
   18328:	cmp	r3, #0
   1832c:	streq	r1, [r2]
   18330:	str	r1, [r0]
   18334:	ldr	r1, [r0, #8]
   18338:	add	r1, r1, #1
   1833c:	str	r1, [r0, #8]
   18340:	mov	r0, r4
   18344:	pop	{r4, r5, r6, sl, fp, pc}
   18348:	bl	51fc <rb_outofmemory@plt>
   1834c:	.word	0x00032b98
   18350:	.word	0x00032b7c

00018354 <rb_dictionary_set_comparator_func>:
   18354:	str	r1, [r0]
   18358:	bx	lr

0001835c <rb_dictionary_get_comparator_func>:
   1835c:	ldr	r0, [r0]
   18360:	bx	lr

00018364 <rb_dictionary_get_linear_index>:
   18364:	push	{r4, r5, r6, sl, fp, lr}
   18368:	add	fp, sp, #16
   1836c:	mov	r6, r1
   18370:	mov	r4, r0
   18374:	bl	1869c <rb_dictionary_retune>
   18378:	ldr	r0, [r4, #4]
   1837c:	mvn	r5, #0
   18380:	cmp	r0, #0
   18384:	beq	183ec <rb_dictionary_get_linear_index+0x88>
   18388:	ldr	r1, [r0, #20]
   1838c:	ldr	r2, [r4]
   18390:	mov	r0, r6
   18394:	blx	r2
   18398:	cmp	r0, #0
   1839c:	bne	183ec <rb_dictionary_get_linear_index+0x88>
   183a0:	ldr	r0, [r4, #4]
   183a4:	cmp	r0, #0
   183a8:	beq	183ec <rb_dictionary_get_linear_index+0x88>
   183ac:	ldrb	r2, [r4, #24]
   183b0:	tst	r2, #1
   183b4:	beq	183e8 <rb_dictionary_get_linear_index+0x84>
   183b8:	ldr	r1, [r4, #8]
   183bc:	cmp	r1, #0
   183c0:	beq	183e0 <rb_dictionary_get_linear_index+0x7c>
   183c4:	mov	r2, #0
   183c8:	str	r2, [r1, #24]
   183cc:	add	r2, r2, #1
   183d0:	ldr	r1, [r1, #12]
   183d4:	cmp	r1, #0
   183d8:	bne	183c8 <rb_dictionary_get_linear_index+0x64>
   183dc:	ldrb	r2, [r4, #24]
   183e0:	and	r1, r2, #254	; 0xfe
   183e4:	strb	r1, [r4, #24]
   183e8:	ldr	r5, [r0, #24]
   183ec:	mov	r0, r5
   183f0:	pop	{r4, r5, r6, sl, fp, pc}

000183f4 <rb_dictionary_find>:
   183f4:	push	{r4, r5, r6, sl, fp, lr}
   183f8:	add	fp, sp, #16
   183fc:	mov	r6, r1
   18400:	mov	r4, r0
   18404:	bl	1869c <rb_dictionary_retune>
   18408:	ldr	r0, [r4, #4]
   1840c:	mov	r5, #0
   18410:	cmp	r0, #0
   18414:	beq	18430 <rb_dictionary_find+0x3c>
   18418:	ldr	r1, [r0, #20]
   1841c:	ldr	r2, [r4]
   18420:	mov	r0, r6
   18424:	blx	r2
   18428:	cmp	r0, #0
   1842c:	ldreq	r5, [r4, #4]
   18430:	mov	r0, r5
   18434:	pop	{r4, r5, r6, sl, fp, pc}

00018438 <rb_dictionary_destroy>:
   18438:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1843c:	add	fp, sp, #24
   18440:	ldr	r4, [r0, #8]
   18444:	mov	r8, r0
   18448:	cmp	r4, #0
   1844c:	beq	184d0 <rb_dictionary_destroy+0x98>
   18450:	ldr	r5, [r4, #12]
   18454:	mov	r7, r1
   18458:	cmp	r1, #0
   1845c:	beq	184a8 <rb_dictionary_destroy+0x70>
   18460:	mov	r0, r4
   18464:	mov	r1, r2
   18468:	mov	r6, r2
   1846c:	blx	r7
   18470:	mov	r0, r4
   18474:	bl	4f8c <free@plt>
   18478:	cmp	r5, #0
   1847c:	beq	184d0 <rb_dictionary_destroy+0x98>
   18480:	ldr	r4, [r5, #12]
   18484:	mov	r0, r5
   18488:	mov	r1, r6
   1848c:	blx	r7
   18490:	mov	r0, r5
   18494:	bl	4f8c <free@plt>
   18498:	cmp	r4, #0
   1849c:	mov	r5, r4
   184a0:	bne	18480 <rb_dictionary_destroy+0x48>
   184a4:	b	184d0 <rb_dictionary_destroy+0x98>
   184a8:	mov	r0, r4
   184ac:	bl	4f8c <free@plt>
   184b0:	cmp	r5, #0
   184b4:	beq	184d0 <rb_dictionary_destroy+0x98>
   184b8:	ldr	r4, [r5, #12]
   184bc:	mov	r0, r5
   184c0:	bl	4f8c <free@plt>
   184c4:	cmp	r4, #0
   184c8:	mov	r5, r4
   184cc:	bne	184b8 <rb_dictionary_destroy+0x80>
   184d0:	ldr	r1, [r8, #36]	; 0x24
   184d4:	ldr	r2, [r8, #32]
   184d8:	ldr	r0, [pc, #92]	; 1853c <rb_dictionary_destroy+0x104>
   184dc:	cmp	r1, #0
   184e0:	add	r0, pc, r0
   184e4:	beq	184f4 <rb_dictionary_destroy+0xbc>
   184e8:	str	r2, [r1, #4]
   184ec:	ldr	r2, [r8, #32]
   184f0:	b	184f8 <rb_dictionary_destroy+0xc0>
   184f4:	str	r2, [r0, #4]
   184f8:	cmp	r2, #0
   184fc:	mov	r3, r0
   18500:	addne	r3, r2, #8
   18504:	str	r1, [r3]
   18508:	mov	r1, #0
   1850c:	str	r1, [r8, #32]
   18510:	str	r1, [r8, #36]	; 0x24
   18514:	ldr	r1, [r0, #8]
   18518:	sub	r1, r1, #1
   1851c:	str	r1, [r0, #8]
   18520:	ldr	r0, [r8, #20]
   18524:	cmp	r0, #0
   18528:	beq	18530 <rb_dictionary_destroy+0xf8>
   1852c:	bl	4f8c <free@plt>
   18530:	mov	r0, r8
   18534:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18538:	b	4f8c <free@plt>
   1853c:	.word	0x000329a8

00018540 <rb_dictionary_foreach>:
   18540:	push	{r4, r5, r6, r7, fp, lr}
   18544:	add	fp, sp, #16
   18548:	ldr	r0, [r0, #8]
   1854c:	cmp	r0, #0
   18550:	beq	185a4 <rb_dictionary_foreach+0x64>
   18554:	ldr	r5, [r0, #12]
   18558:	mov	r6, r1
   1855c:	cmp	r1, #0
   18560:	beq	1859c <rb_dictionary_foreach+0x5c>
   18564:	mov	r1, r2
   18568:	mov	r4, r2
   1856c:	blx	r6
   18570:	cmp	r5, #0
   18574:	beq	185a4 <rb_dictionary_foreach+0x64>
   18578:	ldr	r7, [r5, #12]
   1857c:	mov	r0, r5
   18580:	mov	r1, r4
   18584:	blx	r6
   18588:	cmp	r7, #0
   1858c:	mov	r5, r7
   18590:	bne	18578 <rb_dictionary_foreach+0x38>
   18594:	b	185a4 <rb_dictionary_foreach+0x64>
   18598:	ldr	r5, [r5, #12]
   1859c:	cmp	r5, #0
   185a0:	bne	18598 <rb_dictionary_foreach+0x58>
   185a4:	pop	{r4, r5, r6, r7, fp, pc}

000185a8 <rb_dictionary_search>:
   185a8:	push	{r4, r5, r6, r7, fp, lr}
   185ac:	add	fp, sp, #16
   185b0:	mov	r5, r1
   185b4:	ldr	r1, [r0, #8]
   185b8:	mov	r0, #0
   185bc:	cmp	r1, #0
   185c0:	beq	18620 <rb_dictionary_search+0x78>
   185c4:	ldr	r6, [r1, #12]
   185c8:	cmp	r5, #0
   185cc:	beq	18614 <rb_dictionary_search+0x6c>
   185d0:	mov	r0, r1
   185d4:	mov	r1, r2
   185d8:	mov	r4, r2
   185dc:	blx	r5
   185e0:	cmp	r0, #0
   185e4:	popne	{r4, r5, r6, r7, fp, pc}
   185e8:	cmp	r6, #0
   185ec:	beq	18620 <rb_dictionary_search+0x78>
   185f0:	ldr	r7, [r6, #12]
   185f4:	mov	r0, r6
   185f8:	mov	r1, r4
   185fc:	blx	r5
   18600:	cmp	r0, #0
   18604:	mov	r6, r7
   18608:	beq	185e8 <rb_dictionary_search+0x40>
   1860c:	b	1861c <rb_dictionary_search+0x74>
   18610:	ldr	r6, [r6, #12]
   18614:	cmp	r6, #0
   18618:	bne	18610 <rb_dictionary_search+0x68>
   1861c:	pop	{r4, r5, r6, r7, fp, pc}
   18620:	mov	r0, #0
   18624:	pop	{r4, r5, r6, r7, fp, pc}

00018628 <rb_dictionary_foreach_start>:
   18628:	mov	r2, #0
   1862c:	str	r2, [r1, #4]
   18630:	ldr	r0, [r0, #8]
   18634:	cmp	r0, #0
   18638:	str	r0, [r1]
   1863c:	strne	r0, [r1]
   18640:	ldrne	r0, [r0, #12]
   18644:	strne	r0, [r1, #4]
   18648:	bx	lr

0001864c <rb_dictionary_foreach_next>:
   1864c:	mov	r2, r0
   18650:	ldr	r0, [r1]
   18654:	cmp	r0, #0
   18658:	beq	18674 <rb_dictionary_foreach_next+0x28>
   1865c:	ldr	r0, [r1, #4]
   18660:	str	r0, [r1]
   18664:	cmp	r0, #0
   18668:	ldrne	r0, [r0, #12]
   1866c:	strne	r0, [r1, #4]
   18670:	bx	lr
   18674:	ldr	r0, [pc, #8]	; 18684 <rb_dictionary_foreach_next+0x38>
   18678:	mov	r1, r2
   1867c:	add	r0, pc, r0
   18680:	b	519c <rb_lib_log@plt>
   18684:	.word	0x00003787

00018688 <rb_dictionary_foreach_cur>:
   18688:	ldr	r0, [r1]
   1868c:	cmp	r0, #0
   18690:	ldrne	r0, [r0, #16]
   18694:	moveq	r0, #0
   18698:	bx	lr

0001869c <rb_dictionary_retune>:
   1869c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   186a0:	add	fp, sp, #24
   186a4:	sub	sp, sp, #32
   186a8:	ldr	r6, [r0, #4]
   186ac:	cmp	r6, #0
   186b0:	beq	187fc <rb_dictionary_retune+0x160>
   186b4:	mov	r4, r0
   186b8:	mov	r0, #0
   186bc:	mov	r5, r1
   186c0:	str	r0, [sp, #4]
   186c4:	str	r0, [sp, #8]
   186c8:	mov	r0, r5
   186cc:	ldr	r1, [r6, #20]
   186d0:	ldr	r2, [r4]
   186d4:	blx	r2
   186d8:	cmp	r0, #0
   186dc:	beq	187c0 <rb_dictionary_retune+0x124>
   186e0:	add	r8, sp, #4
   186e4:	mov	r7, r8
   186e8:	cmn	r0, #1
   186ec:	bgt	18728 <rb_dictionary_retune+0x8c>
   186f0:	b	1876c <rb_dictionary_retune+0xd0>
   186f4:	mov	r1, r6
   186f8:	str	r1, [r7, #4]
   186fc:	add	r0, r1, #4
   18700:	mov	r7, r1
   18704:	ldr	r6, [r0]
   18708:	ldr	r2, [r4]
   1870c:	mov	r0, r5
   18710:	ldr	r1, [r6, #20]
   18714:	blx	r2
   18718:	cmp	r0, #0
   1871c:	beq	187d8 <rb_dictionary_retune+0x13c>
   18720:	cmn	r0, #1
   18724:	ble	1876c <rb_dictionary_retune+0xd0>
   18728:	ldr	r0, [r6, #4]
   1872c:	cmp	r0, #0
   18730:	beq	187d8 <rb_dictionary_retune+0x13c>
   18734:	ldr	r1, [r0, #20]
   18738:	ldr	r2, [r4]
   1873c:	mov	r0, r5
   18740:	blx	r2
   18744:	cmp	r0, #1
   18748:	blt	186f4 <rb_dictionary_retune+0x58>
   1874c:	ldr	r1, [r6, #4]
   18750:	ldr	r0, [r1]
   18754:	str	r0, [r6, #4]
   18758:	str	r6, [r1]
   1875c:	ldr	r0, [r1, #4]
   18760:	cmp	r0, #0
   18764:	bne	186f8 <rb_dictionary_retune+0x5c>
   18768:	b	187cc <rb_dictionary_retune+0x130>
   1876c:	ldr	r0, [r6]
   18770:	cmp	r0, #0
   18774:	beq	187d8 <rb_dictionary_retune+0x13c>
   18778:	ldr	r1, [r0, #20]
   1877c:	ldr	r2, [r4]
   18780:	mov	r0, r5
   18784:	blx	r2
   18788:	cmn	r0, #1
   1878c:	ble	18798 <rb_dictionary_retune+0xfc>
   18790:	mov	r0, r6
   18794:	b	187b4 <rb_dictionary_retune+0x118>
   18798:	ldr	r0, [r6]
   1879c:	ldr	r1, [r0, #4]
   187a0:	str	r1, [r6]
   187a4:	str	r6, [r0, #4]
   187a8:	ldr	r1, [r0]
   187ac:	cmp	r1, #0
   187b0:	beq	187d4 <rb_dictionary_retune+0x138>
   187b4:	str	r0, [r8]
   187b8:	mov	r8, r0
   187bc:	b	18704 <rb_dictionary_retune+0x68>
   187c0:	add	r7, sp, #4
   187c4:	mov	r8, r7
   187c8:	b	187d8 <rb_dictionary_retune+0x13c>
   187cc:	mov	r6, r1
   187d0:	b	187d8 <rb_dictionary_retune+0x13c>
   187d4:	mov	r6, r0
   187d8:	ldr	r0, [r6]
   187dc:	str	r0, [r7, #4]
   187e0:	ldr	r0, [r6, #4]
   187e4:	str	r0, [r8]
   187e8:	ldr	r0, [sp, #8]
   187ec:	str	r0, [r6]
   187f0:	ldr	r0, [sp, #4]
   187f4:	str	r0, [r6, #4]
   187f8:	str	r6, [r4, #4]
   187fc:	sub	sp, fp, #24
   18800:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00018804 <rb_dictionary_add>:
   18804:	push	{r4, r5, r6, r7, fp, lr}
   18808:	add	fp, sp, #16
   1880c:	mov	r6, r1
   18810:	mov	r5, r0
   18814:	mov	r0, #1
   18818:	mov	r1, #28
   1881c:	mov	r7, r2
   18820:	bl	4e9c <calloc@plt>
   18824:	cmp	r0, #0
   18828:	beq	18960 <rb_dictionary_add+0x15c>
   1882c:	str	r7, [r0, #16]
   18830:	str	r6, [r0, #20]
   18834:	mov	r4, r0
   18838:	ldrb	r0, [r5, #24]
   1883c:	orr	r0, r0, #1
   18840:	strb	r0, [r5, #24]
   18844:	ldr	r1, [r5, #16]
   18848:	ldr	r0, [r5, #4]
   1884c:	add	r1, r1, #1
   18850:	cmp	r0, #0
   18854:	str	r1, [r5, #16]
   18858:	beq	188cc <rb_dictionary_add+0xc8>
   1885c:	mov	r0, r5
   18860:	mov	r1, r6
   18864:	bl	1869c <rb_dictionary_retune>
   18868:	ldr	r1, [r5, #4]
   1886c:	ldr	r0, [r4, #20]
   18870:	ldr	r2, [r5]
   18874:	ldr	r1, [r1, #20]
   18878:	blx	r2
   1887c:	cmn	r0, #1
   18880:	ble	188e8 <rb_dictionary_add+0xe4>
   18884:	cmp	r0, #0
   18888:	beq	1892c <rb_dictionary_add+0x128>
   1888c:	ldr	r0, [r5, #4]
   18890:	ldr	r1, [r0, #4]
   18894:	stm	r4, {r0, r1}
   18898:	mov	r1, #0
   1889c:	str	r1, [r0, #4]
   188a0:	ldr	r1, [r0, #12]
   188a4:	cmp	r1, #0
   188a8:	add	r2, r1, #8
   188ac:	addeq	r2, r5, #12
   188b0:	str	r4, [r2]
   188b4:	str	r0, [r4, #8]
   188b8:	str	r1, [r4, #12]
   188bc:	str	r4, [r0, #12]
   188c0:	mov	r0, r4
   188c4:	str	r4, [r5, #4]
   188c8:	pop	{r4, r5, r6, r7, fp, pc}
   188cc:	vmov.i32	q8, #0	; 0x00000000
   188d0:	mov	r0, r4
   188d4:	vst1.32	{d16-d17}, [r4]
   188d8:	str	r4, [r5, #4]
   188dc:	str	r4, [r5, #8]
   188e0:	str	r4, [r5, #12]
   188e4:	pop	{r4, r5, r6, r7, fp, pc}
   188e8:	ldr	r0, [r5, #4]
   188ec:	ldr	r1, [r0]
   188f0:	str	r0, [r4, #4]
   188f4:	str	r1, [r4]
   188f8:	mov	r1, #0
   188fc:	str	r1, [r0]
   18900:	ldr	r1, [r0, #8]
   18904:	cmp	r1, #0
   18908:	add	r2, r1, #12
   1890c:	addeq	r2, r5, #8
   18910:	str	r4, [r2]
   18914:	str	r0, [r4, #12]
   18918:	str	r1, [r4, #8]
   1891c:	str	r4, [r0, #8]
   18920:	mov	r0, r4
   18924:	str	r4, [r5, #4]
   18928:	pop	{r4, r5, r6, r7, fp, pc}
   1892c:	ldr	r0, [r5, #4]
   18930:	ldr	r1, [r4, #20]
   18934:	str	r1, [r0, #20]
   18938:	ldr	r1, [r4, #16]
   1893c:	str	r1, [r0, #16]
   18940:	ldr	r0, [r5, #16]
   18944:	sub	r0, r0, #1
   18948:	str	r0, [r5, #16]
   1894c:	mov	r0, r4
   18950:	bl	4f8c <free@plt>
   18954:	ldr	r4, [r5, #4]
   18958:	mov	r0, r4
   1895c:	pop	{r4, r5, r6, r7, fp, pc}
   18960:	bl	51fc <rb_outofmemory@plt>

00018964 <rb_dictionary_delete>:
   18964:	push	{r4, r5, r6, sl, fp, lr}
   18968:	add	fp, sp, #16
   1896c:	mov	r6, r1
   18970:	mov	r5, r0
   18974:	bl	1869c <rb_dictionary_retune>
   18978:	ldr	r0, [r5, #4]
   1897c:	mov	r4, #0
   18980:	cmp	r0, #0
   18984:	beq	18a78 <rb_dictionary_delete+0x114>
   18988:	ldr	r1, [r0, #20]
   1898c:	ldr	r2, [r5]
   18990:	mov	r0, r6
   18994:	blx	r2
   18998:	cmp	r0, #0
   1899c:	bne	18a78 <rb_dictionary_delete+0x114>
   189a0:	ldr	r0, [r5, #4]
   189a4:	cmp	r0, #0
   189a8:	beq	18a78 <rb_dictionary_delete+0x114>
   189ac:	ldrb	r1, [r5, #24]
   189b0:	ldr	r4, [r0, #16]
   189b4:	orr	r1, r1, #1
   189b8:	strb	r1, [r5, #24]
   189bc:	ldr	r3, [r0]
   189c0:	ldr	r1, [r0, #4]
   189c4:	cmp	r3, #0
   189c8:	beq	18a14 <rb_dictionary_delete+0xb0>
   189cc:	cmp	r1, #0
   189d0:	beq	18a1c <rb_dictionary_delete+0xb8>
   189d4:	ldr	r2, [r0, #12]
   189d8:	cmp	r2, r1
   189dc:	beq	18a24 <rb_dictionary_delete+0xc0>
   189e0:	mov	r3, r1
   189e4:	mov	r6, r3
   189e8:	ldr	r3, [r3]
   189ec:	cmp	r3, #0
   189f0:	cmpne	r3, r2
   189f4:	bne	189e4 <rb_dictionary_delete+0x80>
   189f8:	ldr	r3, [r2, #4]
   189fc:	str	r3, [r6]
   18a00:	str	r2, [r5, #4]
   18a04:	ldr	r3, [r0]
   18a08:	str	r3, [r2]
   18a0c:	str	r1, [r2, #4]
   18a10:	b	18a2c <rb_dictionary_delete+0xc8>
   18a14:	str	r1, [r5, #4]
   18a18:	b	18a2c <rb_dictionary_delete+0xc8>
   18a1c:	str	r3, [r5, #4]
   18a20:	b	18a2c <rb_dictionary_delete+0xc8>
   18a24:	str	r1, [r5, #4]
   18a28:	str	r3, [r1]
   18a2c:	ldr	r1, [r0, #8]
   18a30:	cmp	r1, #0
   18a34:	ldrne	r2, [r0, #12]
   18a38:	strne	r2, [r1, #12]
   18a3c:	ldr	r2, [r5, #8]
   18a40:	cmp	r2, r0
   18a44:	ldr	r2, [r0, #12]
   18a48:	streq	r2, [r5, #8]
   18a4c:	cmp	r2, #0
   18a50:	strne	r1, [r2, #8]
   18a54:	ldr	r1, [r5, #12]
   18a58:	cmp	r1, r0
   18a5c:	bne	18a68 <rb_dictionary_delete+0x104>
   18a60:	ldr	r1, [r0, #8]
   18a64:	str	r1, [r5, #12]
   18a68:	ldr	r1, [r5, #16]
   18a6c:	sub	r1, r1, #1
   18a70:	str	r1, [r5, #16]
   18a74:	bl	4f8c <free@plt>
   18a78:	mov	r0, r4
   18a7c:	pop	{r4, r5, r6, sl, fp, pc}

00018a80 <rb_dictionary_retrieve>:
   18a80:	push	{r4, r5, r6, sl, fp, lr}
   18a84:	add	fp, sp, #16
   18a88:	mov	r6, r1
   18a8c:	mov	r5, r0
   18a90:	bl	1869c <rb_dictionary_retune>
   18a94:	ldr	r0, [r5, #4]
   18a98:	mov	r4, #0
   18a9c:	cmp	r0, #0
   18aa0:	beq	18abc <rb_dictionary_retrieve+0x3c>
   18aa4:	ldr	r1, [r0, #20]
   18aa8:	ldr	r2, [r5]
   18aac:	mov	r0, r6
   18ab0:	blx	r2
   18ab4:	cmp	r0, #0
   18ab8:	beq	18ac4 <rb_dictionary_retrieve+0x44>
   18abc:	mov	r0, r4
   18ac0:	pop	{r4, r5, r6, sl, fp, pc}
   18ac4:	ldr	r0, [r5, #4]
   18ac8:	cmp	r0, #0
   18acc:	ldrne	r4, [r0, #16]
   18ad0:	mov	r0, r4
   18ad4:	pop	{r4, r5, r6, sl, fp, pc}

00018ad8 <rb_dictionary_size>:
   18ad8:	ldr	r0, [r0, #16]
   18adc:	bx	lr

00018ae0 <rb_dictionary_stats>:
   18ae0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18ae4:	add	fp, sp, #24
   18ae8:	sub	sp, sp, #280	; 0x118
   18aec:	mov	r6, r0
   18af0:	ldr	r0, [r0, #16]
   18af4:	mov	r5, r2
   18af8:	mov	r7, r1
   18afc:	cmp	r0, #0
   18b00:	beq	18b58 <rb_dictionary_stats+0x78>
   18b04:	mov	r0, #0
   18b08:	add	r2, sp, #20
   18b0c:	mov	r1, #0
   18b10:	str	r0, [sp, #20]
   18b14:	ldr	r0, [r6, #4]
   18b18:	bl	18bbc <stats_recurse>
   18b1c:	ldr	r1, [r6, #16]
   18b20:	ldr	r3, [r6, #20]
   18b24:	ldr	r2, [sp, #20]
   18b28:	ldr	r6, [pc, #120]	; 18ba8 <rb_dictionary_stats+0xc8>
   18b2c:	str	r0, [sp, #8]
   18b30:	udiv	r4, r0, r1
   18b34:	add	r6, pc, r6
   18b38:	str	r1, [sp, #4]
   18b3c:	str	r2, [sp, #16]
   18b40:	add	r0, sp, #24
   18b44:	str	r6, [sp]
   18b48:	str	r4, [sp, #12]
   18b4c:	ldr	r2, [pc, #88]	; 18bac <rb_dictionary_stats+0xcc>
   18b50:	add	r2, pc, r2
   18b54:	b	18b8c <rb_dictionary_stats+0xac>
   18b58:	ldr	r3, [r6, #20]
   18b5c:	ldr	r0, [pc, #76]	; 18bb0 <rb_dictionary_stats+0xd0>
   18b60:	ldr	r1, [pc, #76]	; 18bb4 <rb_dictionary_stats+0xd4>
   18b64:	add	r0, pc, r0
   18b68:	add	r1, pc, r1
   18b6c:	str	r1, [sp]
   18b70:	str	r0, [sp, #4]
   18b74:	str	r0, [sp, #8]
   18b78:	str	r0, [sp, #12]
   18b7c:	str	r0, [sp, #16]
   18b80:	add	r0, sp, #24
   18b84:	ldr	r2, [pc, #44]	; 18bb8 <rb_dictionary_stats+0xd8>
   18b88:	add	r2, pc, r2
   18b8c:	mov	r1, #256	; 0x100
   18b90:	bl	53f4 <snprintf@plt>
   18b94:	add	r0, sp, #24
   18b98:	mov	r1, r5
   18b9c:	blx	r7
   18ba0:	sub	sp, fp, #24
   18ba4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18ba8:	.word	0x00003344
   18bac:	.word	0x00003304
   18bb0:	.word	0x000024eb
   18bb4:	.word	0x00003310
   18bb8:	.word	0x000032f5

00018bbc <stats_recurse>:
   18bbc:	push	{r4, r5, r6, r7, fp, lr}
   18bc0:	add	fp, sp, #16
   18bc4:	mov	r6, r0
   18bc8:	ldr	r0, [r2]
   18bcc:	mov	r5, r2
   18bd0:	mov	r4, r1
   18bd4:	cmp	r0, r1
   18bd8:	strlt	r4, [r5]
   18bdc:	cmp	r6, #0
   18be0:	beq	18c28 <stats_recurse+0x6c>
   18be4:	ldr	r0, [r6]
   18be8:	mov	r7, r4
   18bec:	cmp	r0, #0
   18bf0:	beq	18c04 <stats_recurse+0x48>
   18bf4:	add	r1, r4, #1
   18bf8:	mov	r2, r5
   18bfc:	bl	18bbc <stats_recurse>
   18c00:	add	r7, r0, r4
   18c04:	ldr	r0, [r6, #4]
   18c08:	cmp	r0, #0
   18c0c:	beq	18c24 <stats_recurse+0x68>
   18c10:	add	r1, r4, #1
   18c14:	mov	r2, r5
   18c18:	bl	18bbc <stats_recurse>
   18c1c:	add	r0, r0, r7
   18c20:	pop	{r4, r5, r6, r7, fp, pc}
   18c24:	mov	r4, r7
   18c28:	mov	r0, r4
   18c2c:	pop	{r4, r5, r6, r7, fp, pc}

00018c30 <rb_dictionary_stats_walk>:
   18c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c34:	add	fp, sp, #28
   18c38:	sub	sp, sp, #284	; 0x11c
   18c3c:	ldr	r7, [pc, #232]	; 18d2c <rb_dictionary_stats_walk+0xfc>
   18c40:	ldr	r7, [pc, r7]
   18c44:	cmp	r7, #0
   18c48:	beq	18d24 <rb_dictionary_stats_walk+0xf4>
   18c4c:	ldr	r5, [pc, #220]	; 18d30 <rb_dictionary_stats_walk+0x100>
   18c50:	mov	r9, r1
   18c54:	mov	r8, r0
   18c58:	add	r6, sp, #24
   18c5c:	add	r5, pc, r5
   18c60:	ldr	sl, [r7]
   18c64:	ldr	r0, [sl, #16]
   18c68:	cmp	r0, #0
   18c6c:	bne	18cd4 <rb_dictionary_stats_walk+0xa4>
   18c70:	ldr	r3, [sl, #20]
   18c74:	ldr	r0, [pc, #188]	; 18d38 <rb_dictionary_stats_walk+0x108>
   18c78:	mov	r1, #256	; 0x100
   18c7c:	add	r0, pc, r0
   18c80:	str	r0, [sp]
   18c84:	ldr	r0, [pc, #176]	; 18d3c <rb_dictionary_stats_walk+0x10c>
   18c88:	add	r0, pc, r0
   18c8c:	str	r0, [sp, #4]
   18c90:	str	r0, [sp, #8]
   18c94:	str	r0, [sp, #12]
   18c98:	str	r0, [sp, #16]
   18c9c:	mov	r0, r6
   18ca0:	ldr	r2, [pc, #152]	; 18d40 <rb_dictionary_stats_walk+0x110>
   18ca4:	add	r2, pc, r2
   18ca8:	bl	53f4 <snprintf@plt>
   18cac:	mov	r0, r6
   18cb0:	mov	r1, r9
   18cb4:	blx	r8
   18cb8:	ldr	r7, [r7, #8]
   18cbc:	cmp	r7, #0
   18cc0:	beq	18d24 <rb_dictionary_stats_walk+0xf4>
   18cc4:	ldr	sl, [r7]
   18cc8:	ldr	r0, [sl, #16]
   18ccc:	cmp	r0, #0
   18cd0:	beq	18c70 <rb_dictionary_stats_walk+0x40>
   18cd4:	mov	r0, #0
   18cd8:	mov	r1, #0
   18cdc:	add	r2, sp, #20
   18ce0:	str	r0, [sp, #20]
   18ce4:	ldr	r0, [sl, #4]
   18ce8:	bl	18bbc <stats_recurse>
   18cec:	ldr	r1, [sl, #16]
   18cf0:	ldr	r2, [sp, #20]
   18cf4:	ldr	r3, [sl, #20]
   18cf8:	str	r5, [sp]
   18cfc:	str	r0, [sp, #8]
   18d00:	udiv	r4, r0, r1
   18d04:	str	r1, [sp, #4]
   18d08:	str	r2, [sp, #16]
   18d0c:	mov	r0, r6
   18d10:	mov	r1, #256	; 0x100
   18d14:	str	r4, [sp, #12]
   18d18:	ldr	r2, [pc, #20]	; 18d34 <rb_dictionary_stats_walk+0x104>
   18d1c:	add	r2, pc, r2
   18d20:	b	18ca8 <rb_dictionary_stats_walk+0x78>
   18d24:	sub	sp, fp, #28
   18d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d2c:	.word	0x00032248
   18d30:	.word	0x0000321c
   18d34:	.word	0x00003138
   18d38:	.word	0x000031fc
   18d3c:	.word	0x000023c7
   18d40:	.word	0x000031d9

00018d44 <rb_radixtree_create>:
   18d44:	push	{r4, r5, r6, sl, fp, lr}
   18d48:	add	fp, sp, #16
   18d4c:	mov	r6, r1
   18d50:	mov	r5, r0
   18d54:	mov	r0, #1
   18d58:	mov	r1, #28
   18d5c:	bl	4e9c <calloc@plt>
   18d60:	cmp	r0, #0
   18d64:	beq	18df4 <rb_radixtree_create+0xb0>
   18d68:	mov	r4, r0
   18d6c:	str	r6, [r0]
   18d70:	mov	r0, r5
   18d74:	bl	5070 <strlen@plt>
   18d78:	add	r0, r0, #1
   18d7c:	bl	5214 <malloc@plt>
   18d80:	cmp	r0, #0
   18d84:	beq	18df4 <rb_radixtree_create+0xb0>
   18d88:	mov	r1, r5
   18d8c:	bl	5124 <strcpy@plt>
   18d90:	mov	r3, #0
   18d94:	str	r3, [r4, #4]
   18d98:	ldr	r1, [pc, #88]	; 18df8 <rb_radixtree_create+0xb4>
   18d9c:	ldr	r1, [pc, r1]
   18da0:	str	r0, [r4, #12]
   18da4:	add	r0, r4, #16
   18da8:	str	r4, [r4, #16]
   18dac:	str	r3, [r4, #20]
   18db0:	ldr	r2, [r1]
   18db4:	cmp	r2, #0
   18db8:	str	r2, [r4, #24]
   18dbc:	beq	18dcc <rb_radixtree_create+0x88>
   18dc0:	add	r2, r2, #4
   18dc4:	str	r0, [r2]
   18dc8:	b	18ddc <rb_radixtree_create+0x98>
   18dcc:	mov	r2, r1
   18dd0:	ldr	r3, [r2, #4]!
   18dd4:	cmp	r3, #0
   18dd8:	streq	r0, [r2]
   18ddc:	str	r0, [r1]
   18de0:	ldr	r0, [r1, #8]
   18de4:	add	r0, r0, #1
   18de8:	str	r0, [r1, #8]
   18dec:	mov	r0, r4
   18df0:	pop	{r4, r5, r6, sl, fp, pc}
   18df4:	bl	51fc <rb_outofmemory@plt>
   18df8:	.word	0x00014618

00018dfc <rb_radixtree_destroy>:
   18dfc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18e00:	add	fp, sp, #24
   18e04:	sub	sp, sp, #40	; 0x28
   18e08:	mov	r6, r1
   18e0c:	mov	r1, sp
   18e10:	mov	r9, r2
   18e14:	mov	r4, r0
   18e18:	bl	4cec <rb_radixtree_foreach_start@plt>
   18e1c:	cmp	r4, #0
   18e20:	beq	1907c <rb_radixtree_destroy+0x280>
   18e24:	ldr	r7, [sp, #8]
   18e28:	cmp	r6, #0
   18e2c:	beq	18f60 <rb_radixtree_destroy+0x164>
   18e30:	cmp	r7, #0
   18e34:	beq	1907c <rb_radixtree_destroy+0x280>
   18e38:	mov	r8, #0
   18e3c:	ldr	r0, [r7, #4]
   18e40:	cmp	r0, #0
   18e44:	bne	18e64 <rb_radixtree_destroy+0x68>
   18e48:	b	1907c <rb_radixtree_destroy+0x280>
   18e4c:	str	r8, [sp, #12]
   18e50:	cmp	r7, #0
   18e54:	beq	1907c <rb_radixtree_destroy+0x280>
   18e58:	ldr	r0, [r7, #4]
   18e5c:	cmp	r0, #0
   18e60:	beq	1907c <rb_radixtree_destroy+0x280>
   18e64:	ldr	r1, [r7, #4]
   18e68:	ldr	r0, [r7, #8]
   18e6c:	mov	r2, r9
   18e70:	blx	r6
   18e74:	ldr	r1, [r7, #8]
   18e78:	mov	r0, r4
   18e7c:	mov	r2, #0
   18e80:	bl	53b8 <rb_radixtree_elem_find@plt>
   18e84:	cmp	r0, #0
   18e88:	movne	r1, r0
   18e8c:	movne	r0, r4
   18e90:	blne	4c8c <rb_radixtree_elem_delete@plt>
   18e94:	ldr	r7, [sp, #12]
   18e98:	cmp	r7, #0
   18e9c:	str	r7, [sp, #8]
   18ea0:	beq	1907c <rb_radixtree_destroy+0x280>
   18ea4:	ldr	r0, [r7, #12]
   18ea8:	cmp	r0, #0
   18eac:	beq	18e4c <rb_radixtree_destroy+0x50>
   18eb0:	ldrb	r1, [r7, #16]
   18eb4:	b	18ec8 <rb_radixtree_destroy+0xcc>
   18eb8:	sub	r1, r2, #1
   18ebc:	sub	r2, r2, #2
   18ec0:	cmp	r2, #15
   18ec4:	bge	18f08 <rb_radixtree_destroy+0x10c>
   18ec8:	add	r1, r1, #1
   18ecc:	ldr	r5, [r0, r1, lsl #2]
   18ed0:	add	r2, r1, #1
   18ed4:	cmp	r5, #0
   18ed8:	bne	18ee8 <rb_radixtree_destroy+0xec>
   18edc:	cmp	r1, #16
   18ee0:	mov	r1, r2
   18ee4:	blt	18ecc <rb_radixtree_destroy+0xd0>
   18ee8:	cmp	r5, #0
   18eec:	beq	18eb8 <rb_radixtree_destroy+0xbc>
   18ef0:	ldr	r1, [r5]
   18ef4:	cmn	r1, #1
   18ef8:	bne	18f30 <rb_radixtree_destroy+0x134>
   18efc:	cmp	r5, r7
   18f00:	beq	18eb8 <rb_radixtree_destroy+0xbc>
   18f04:	b	18f3c <rb_radixtree_destroy+0x140>
   18f08:	ldr	r2, [r0, #68]	; 0x44
   18f0c:	cmp	r2, #0
   18f10:	beq	18e4c <rb_radixtree_destroy+0x50>
   18f14:	ldrb	r1, [r0, #72]	; 0x48
   18f18:	mov	r0, r2
   18f1c:	cmp	r1, #14
   18f20:	bhi	18f08 <rb_radixtree_destroy+0x10c>
   18f24:	add	r1, r1, #1
   18f28:	mov	r0, r2
   18f2c:	b	18ec8 <rb_radixtree_destroy+0xcc>
   18f30:	mov	r1, #0
   18f34:	mov	r0, r5
   18f38:	b	18ec8 <rb_radixtree_destroy+0xcc>
   18f3c:	ldr	r1, [r7, #8]
   18f40:	ldr	r0, [r5, #8]
   18f44:	bl	5520 <strcmp@plt>
   18f48:	cmn	r0, #1
   18f4c:	ble	18e4c <rb_radixtree_destroy+0x50>
   18f50:	str	r5, [sp, #12]
   18f54:	cmp	r7, #0
   18f58:	bne	18e58 <rb_radixtree_destroy+0x5c>
   18f5c:	b	1907c <rb_radixtree_destroy+0x280>
   18f60:	cmp	r7, #0
   18f64:	beq	1907c <rb_radixtree_destroy+0x280>
   18f68:	mov	r5, #0
   18f6c:	ldr	r0, [r7, #4]
   18f70:	cmp	r0, #0
   18f74:	bne	18f94 <rb_radixtree_destroy+0x198>
   18f78:	b	1907c <rb_radixtree_destroy+0x280>
   18f7c:	str	r5, [sp, #12]
   18f80:	cmp	r7, #0
   18f84:	beq	1907c <rb_radixtree_destroy+0x280>
   18f88:	ldr	r0, [r7, #4]
   18f8c:	cmp	r0, #0
   18f90:	beq	1907c <rb_radixtree_destroy+0x280>
   18f94:	ldr	r1, [r7, #8]
   18f98:	mov	r0, r4
   18f9c:	mov	r2, #0
   18fa0:	bl	53b8 <rb_radixtree_elem_find@plt>
   18fa4:	cmp	r0, #0
   18fa8:	movne	r1, r0
   18fac:	movne	r0, r4
   18fb0:	blne	4c8c <rb_radixtree_elem_delete@plt>
   18fb4:	ldr	r7, [sp, #12]
   18fb8:	cmp	r7, #0
   18fbc:	str	r7, [sp, #8]
   18fc0:	beq	1907c <rb_radixtree_destroy+0x280>
   18fc4:	ldr	r0, [r7, #12]
   18fc8:	cmp	r0, #0
   18fcc:	beq	18f7c <rb_radixtree_destroy+0x180>
   18fd0:	ldrb	r1, [r7, #16]
   18fd4:	b	18fe8 <rb_radixtree_destroy+0x1ec>
   18fd8:	sub	r1, r2, #1
   18fdc:	sub	r2, r2, #2
   18fe0:	cmp	r2, #15
   18fe4:	bge	19028 <rb_radixtree_destroy+0x22c>
   18fe8:	add	r1, r1, #1
   18fec:	ldr	r6, [r0, r1, lsl #2]
   18ff0:	add	r2, r1, #1
   18ff4:	cmp	r6, #0
   18ff8:	bne	19008 <rb_radixtree_destroy+0x20c>
   18ffc:	cmp	r1, #16
   19000:	mov	r1, r2
   19004:	blt	18fec <rb_radixtree_destroy+0x1f0>
   19008:	cmp	r6, #0
   1900c:	beq	18fd8 <rb_radixtree_destroy+0x1dc>
   19010:	ldr	r1, [r6]
   19014:	cmn	r1, #1
   19018:	bne	19050 <rb_radixtree_destroy+0x254>
   1901c:	cmp	r6, r7
   19020:	beq	18fd8 <rb_radixtree_destroy+0x1dc>
   19024:	b	1905c <rb_radixtree_destroy+0x260>
   19028:	ldr	r2, [r0, #68]	; 0x44
   1902c:	cmp	r2, #0
   19030:	beq	18f7c <rb_radixtree_destroy+0x180>
   19034:	ldrb	r1, [r0, #72]	; 0x48
   19038:	mov	r0, r2
   1903c:	cmp	r1, #14
   19040:	bhi	19028 <rb_radixtree_destroy+0x22c>
   19044:	add	r1, r1, #1
   19048:	mov	r0, r2
   1904c:	b	18fe8 <rb_radixtree_destroy+0x1ec>
   19050:	mov	r1, #0
   19054:	mov	r0, r6
   19058:	b	18fe8 <rb_radixtree_destroy+0x1ec>
   1905c:	ldr	r1, [r7, #8]
   19060:	ldr	r0, [r6, #8]
   19064:	bl	5520 <strcmp@plt>
   19068:	cmp	r0, #0
   1906c:	bmi	18f7c <rb_radixtree_destroy+0x180>
   19070:	str	r6, [sp, #12]
   19074:	cmp	r7, #0
   19078:	bne	18f88 <rb_radixtree_destroy+0x18c>
   1907c:	ldr	r0, [r4, #24]
   19080:	ldr	r1, [r4, #20]
   19084:	cmp	r0, #0
   19088:	beq	19098 <rb_radixtree_destroy+0x29c>
   1908c:	str	r1, [r0, #4]
   19090:	ldr	r1, [r4, #20]
   19094:	b	190a4 <rb_radixtree_destroy+0x2a8>
   19098:	ldr	r2, [pc, #84]	; 190f4 <rb_radixtree_destroy+0x2f8>
   1909c:	ldr	r2, [pc, r2]
   190a0:	str	r1, [r2, #4]
   190a4:	ldr	r2, [pc, #76]	; 190f8 <rb_radixtree_destroy+0x2fc>
   190a8:	cmp	r1, #0
   190ac:	ldr	r2, [pc, r2]
   190b0:	mov	r3, r2
   190b4:	addne	r3, r1, #8
   190b8:	str	r0, [r3]
   190bc:	mov	r0, #0
   190c0:	str	r0, [r4, #20]
   190c4:	str	r0, [r4, #24]
   190c8:	ldr	r0, [r2, #8]
   190cc:	sub	r0, r0, #1
   190d0:	str	r0, [r2, #8]
   190d4:	ldr	r0, [r4, #12]
   190d8:	cmp	r0, #0
   190dc:	beq	190e4 <rb_radixtree_destroy+0x2e8>
   190e0:	bl	4f8c <free@plt>
   190e4:	mov	r0, r4
   190e8:	sub	sp, fp, #24
   190ec:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   190f0:	b	4f8c <free@plt>
   190f4:	.word	0x00014318
   190f8:	.word	0x00014308

000190fc <rb_radixtree_foreach_start>:
   190fc:	push	{r4, r5, fp, lr}
   19100:	add	fp, sp, #8
   19104:	cmp	r0, #0
   19108:	beq	192c4 <rb_radixtree_foreach_start+0x1c8>
   1910c:	ldr	r0, [r0, #4]
   19110:	mov	r4, r1
   19114:	cmp	r0, #0
   19118:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   1911c:	mov	r0, #0
   19120:	str	r0, [r4, #8]
   19124:	b	192c0 <rb_radixtree_foreach_start+0x1c4>
   19128:	mov	r1, r0
   1912c:	ldr	r0, [r0, #4]
   19130:	cmp	r0, #0
   19134:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   19138:	ldr	r0, [r1, #8]
   1913c:	cmp	r0, #0
   19140:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   19144:	ldr	r0, [r1, #12]
   19148:	cmp	r0, #0
   1914c:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   19150:	ldr	r0, [r1, #16]
   19154:	cmp	r0, #0
   19158:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   1915c:	ldr	r0, [r1, #20]
   19160:	cmp	r0, #0
   19164:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   19168:	ldr	r0, [r1, #24]
   1916c:	cmp	r0, #0
   19170:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   19174:	ldr	r0, [r1, #28]
   19178:	cmp	r0, #0
   1917c:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   19180:	ldr	r0, [r1, #32]
   19184:	cmp	r0, #0
   19188:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   1918c:	ldr	r0, [r1, #36]	; 0x24
   19190:	cmp	r0, #0
   19194:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   19198:	ldr	r0, [r1, #40]	; 0x28
   1919c:	cmp	r0, #0
   191a0:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   191a4:	ldr	r0, [r1, #44]	; 0x2c
   191a8:	cmp	r0, #0
   191ac:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   191b0:	ldr	r0, [r1, #48]	; 0x30
   191b4:	cmp	r0, #0
   191b8:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   191bc:	ldr	r0, [r1, #52]	; 0x34
   191c0:	cmp	r0, #0
   191c4:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   191c8:	ldr	r0, [r1, #56]	; 0x38
   191cc:	cmp	r0, #0
   191d0:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   191d4:	ldr	r0, [r1, #60]	; 0x3c
   191d8:	cmp	r0, #0
   191dc:	bne	191ec <rb_radixtree_foreach_start+0xf0>
   191e0:	ldr	r0, [r1, #64]	; 0x40
   191e4:	cmp	r0, #0
   191e8:	moveq	r0, r1
   191ec:	ldr	r1, [r0]
   191f0:	cmn	r1, #1
   191f4:	bne	19128 <rb_radixtree_foreach_start+0x2c>
   191f8:	cmp	r0, #0
   191fc:	str	r0, [r4, #8]
   19200:	str	r0, [r4, #12]
   19204:	popeq	{r4, r5, fp, pc}
   19208:	str	r0, [r4, #8]
   1920c:	ldr	r1, [r0, #12]
   19210:	cmp	r1, #0
   19214:	beq	192bc <rb_radixtree_foreach_start+0x1c0>
   19218:	ldrb	r2, [r0, #16]
   1921c:	b	19230 <rb_radixtree_foreach_start+0x134>
   19220:	sub	r2, r3, #1
   19224:	sub	r3, r3, #2
   19228:	cmp	r3, #15
   1922c:	bge	19270 <rb_radixtree_foreach_start+0x174>
   19230:	add	r2, r2, #1
   19234:	ldr	r5, [r1, r2, lsl #2]
   19238:	add	r3, r2, #1
   1923c:	cmp	r5, #0
   19240:	bne	19250 <rb_radixtree_foreach_start+0x154>
   19244:	cmp	r2, #16
   19248:	mov	r2, r3
   1924c:	blt	19234 <rb_radixtree_foreach_start+0x138>
   19250:	cmp	r5, #0
   19254:	beq	19220 <rb_radixtree_foreach_start+0x124>
   19258:	ldr	r2, [r5]
   1925c:	cmn	r2, #1
   19260:	bne	19298 <rb_radixtree_foreach_start+0x19c>
   19264:	cmp	r5, r0
   19268:	beq	19220 <rb_radixtree_foreach_start+0x124>
   1926c:	b	192a4 <rb_radixtree_foreach_start+0x1a8>
   19270:	ldr	r3, [r1, #68]	; 0x44
   19274:	cmp	r3, #0
   19278:	beq	192bc <rb_radixtree_foreach_start+0x1c0>
   1927c:	ldrb	r2, [r1, #72]	; 0x48
   19280:	mov	r1, r3
   19284:	cmp	r2, #14
   19288:	bhi	19270 <rb_radixtree_foreach_start+0x174>
   1928c:	add	r2, r2, #1
   19290:	mov	r1, r3
   19294:	b	19230 <rb_radixtree_foreach_start+0x134>
   19298:	mov	r2, #0
   1929c:	mov	r1, r5
   192a0:	b	19230 <rb_radixtree_foreach_start+0x134>
   192a4:	ldr	r1, [r0, #8]
   192a8:	ldr	r0, [r5, #8]
   192ac:	bl	5520 <strcmp@plt>
   192b0:	cmn	r0, #1
   192b4:	strgt	r5, [r4, #12]
   192b8:	popgt	{r4, r5, fp, pc}
   192bc:	mov	r0, #0
   192c0:	str	r0, [r4, #12]
   192c4:	pop	{r4, r5, fp, pc}

000192c8 <rb_radixtree_foreach_cur>:
   192c8:	mov	r2, r0
   192cc:	mov	r0, #0
   192d0:	cmp	r2, #0
   192d4:	bxeq	lr
   192d8:	ldr	r1, [r1, #8]
   192dc:	cmp	r1, #0
   192e0:	ldrne	r0, [r1, #4]
   192e4:	bx	lr

000192e8 <rb_radixtree_delete>:
   192e8:	push	{r4, r5, fp, lr}
   192ec:	add	fp, sp, #8
   192f0:	mov	r2, #0
   192f4:	mov	r5, r0
   192f8:	mov	r4, #0
   192fc:	bl	53b8 <rb_radixtree_elem_find@plt>
   19300:	cmp	r0, #0
   19304:	beq	19318 <rb_radixtree_delete+0x30>
   19308:	ldr	r4, [r0, #4]
   1930c:	mov	r1, r0
   19310:	mov	r0, r5
   19314:	bl	4c8c <rb_radixtree_elem_delete@plt>
   19318:	mov	r0, r4
   1931c:	pop	{r4, r5, fp, pc}

00019320 <rb_radixtree_foreach_next>:
   19320:	push	{r4, r5, fp, lr}
   19324:	add	fp, sp, #8
   19328:	cmp	r0, #0
   1932c:	beq	19408 <rb_radixtree_foreach_next+0xe8>
   19330:	ldr	r0, [r1, #8]
   19334:	mov	r4, r1
   19338:	cmp	r0, #0
   1933c:	beq	19408 <rb_radixtree_foreach_next+0xe8>
   19340:	ldr	r0, [r4, #12]
   19344:	cmp	r0, #0
   19348:	str	r0, [r4, #8]
   1934c:	popeq	{r4, r5, fp, pc}
   19350:	ldr	r1, [r0, #12]
   19354:	cmp	r1, #0
   19358:	beq	19400 <rb_radixtree_foreach_next+0xe0>
   1935c:	ldrb	r2, [r0, #16]
   19360:	b	19374 <rb_radixtree_foreach_next+0x54>
   19364:	sub	r2, r3, #1
   19368:	sub	r3, r3, #2
   1936c:	cmp	r3, #15
   19370:	bge	193b4 <rb_radixtree_foreach_next+0x94>
   19374:	add	r2, r2, #1
   19378:	ldr	r5, [r1, r2, lsl #2]
   1937c:	add	r3, r2, #1
   19380:	cmp	r5, #0
   19384:	bne	19394 <rb_radixtree_foreach_next+0x74>
   19388:	cmp	r2, #16
   1938c:	mov	r2, r3
   19390:	blt	19378 <rb_radixtree_foreach_next+0x58>
   19394:	cmp	r5, #0
   19398:	beq	19364 <rb_radixtree_foreach_next+0x44>
   1939c:	ldr	r2, [r5]
   193a0:	cmn	r2, #1
   193a4:	bne	193dc <rb_radixtree_foreach_next+0xbc>
   193a8:	cmp	r5, r0
   193ac:	beq	19364 <rb_radixtree_foreach_next+0x44>
   193b0:	b	193e8 <rb_radixtree_foreach_next+0xc8>
   193b4:	ldr	r3, [r1, #68]	; 0x44
   193b8:	cmp	r3, #0
   193bc:	beq	19400 <rb_radixtree_foreach_next+0xe0>
   193c0:	ldrb	r2, [r1, #72]	; 0x48
   193c4:	mov	r1, r3
   193c8:	cmp	r2, #14
   193cc:	bhi	193b4 <rb_radixtree_foreach_next+0x94>
   193d0:	add	r2, r2, #1
   193d4:	mov	r1, r3
   193d8:	b	19374 <rb_radixtree_foreach_next+0x54>
   193dc:	mov	r2, #0
   193e0:	mov	r1, r5
   193e4:	b	19374 <rb_radixtree_foreach_next+0x54>
   193e8:	ldr	r1, [r0, #8]
   193ec:	ldr	r0, [r5, #8]
   193f0:	bl	5520 <strcmp@plt>
   193f4:	cmn	r0, #1
   193f8:	strgt	r5, [r4, #12]
   193fc:	popgt	{r4, r5, fp, pc}
   19400:	mov	r0, #0
   19404:	str	r0, [r4, #12]
   19408:	pop	{r4, r5, fp, pc}

0001940c <rb_radixtree_foreach>:
   1940c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19410:	add	fp, sp, #24
   19414:	ldr	r5, [r0, #4]
   19418:	cmp	r5, #0
   1941c:	beq	19570 <rb_radixtree_foreach+0x164>
   19420:	ldr	r0, [r5]
   19424:	mov	r8, r2
   19428:	mov	r4, r1
   1942c:	cmn	r0, #1
   19430:	beq	194d0 <rb_radixtree_foreach+0xc4>
   19434:	cmp	r4, #0
   19438:	mov	r0, r4
   1943c:	beq	194f8 <rb_radixtree_foreach+0xec>
   19440:	mov	r0, #0
   19444:	b	19464 <rb_radixtree_foreach+0x58>
   19448:	ldr	r1, [r0, #4]
   1944c:	ldr	r0, [r0, #8]
   19450:	mov	r2, r8
   19454:	blx	r4
   19458:	sub	r0, r6, #1
   1945c:	cmp	r7, #15
   19460:	bge	194a8 <rb_radixtree_foreach+0x9c>
   19464:	add	r1, r0, #1
   19468:	ldr	r0, [r5, r1, lsl #2]
   1946c:	add	r6, r1, #1
   19470:	cmp	r0, #0
   19474:	bne	19484 <rb_radixtree_foreach+0x78>
   19478:	cmp	r1, #16
   1947c:	mov	r1, r6
   19480:	blt	19468 <rb_radixtree_foreach+0x5c>
   19484:	sub	r7, r6, #2
   19488:	cmp	r0, #0
   1948c:	beq	19458 <rb_radixtree_foreach+0x4c>
   19490:	ldr	r1, [r0]
   19494:	cmn	r1, #1
   19498:	beq	19448 <rb_radixtree_foreach+0x3c>
   1949c:	mov	r5, r0
   194a0:	mov	r0, #0
   194a4:	b	19464 <rb_radixtree_foreach+0x58>
   194a8:	mov	r0, r5
   194ac:	ldr	r5, [r0, #68]	; 0x44
   194b0:	cmp	r5, #0
   194b4:	beq	19570 <rb_radixtree_foreach+0x164>
   194b8:	ldrb	r1, [r0, #72]	; 0x48
   194bc:	mov	r0, r5
   194c0:	cmp	r1, #14
   194c4:	bhi	194ac <rb_radixtree_foreach+0xa0>
   194c8:	add	r0, r1, #1
   194cc:	b	19464 <rb_radixtree_foreach+0x58>
   194d0:	cmp	r4, #0
   194d4:	mov	r0, r4
   194d8:	beq	19570 <rb_radixtree_foreach+0x164>
   194dc:	ldr	r1, [r5, #4]
   194e0:	ldr	r0, [r5, #8]
   194e4:	mov	r2, r8
   194e8:	mov	r3, r4
   194ec:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   194f0:	bx	r3
   194f4:	mov	r5, r0
   194f8:	mov	r0, #0
   194fc:	b	1950c <rb_radixtree_foreach+0x100>
   19500:	sub	r0, r1, #1
   19504:	cmp	r2, #15
   19508:	bge	19548 <rb_radixtree_foreach+0x13c>
   1950c:	add	r2, r0, #1
   19510:	ldr	r0, [r5, r2, lsl #2]
   19514:	add	r1, r2, #1
   19518:	cmp	r0, #0
   1951c:	bne	1952c <rb_radixtree_foreach+0x120>
   19520:	cmp	r2, #16
   19524:	mov	r2, r1
   19528:	blt	19510 <rb_radixtree_foreach+0x104>
   1952c:	sub	r2, r1, #2
   19530:	cmp	r0, #0
   19534:	beq	19500 <rb_radixtree_foreach+0xf4>
   19538:	ldr	r3, [r0]
   1953c:	cmn	r3, #1
   19540:	beq	19500 <rb_radixtree_foreach+0xf4>
   19544:	b	194f4 <rb_radixtree_foreach+0xe8>
   19548:	ldr	r1, [r5, #68]	; 0x44
   1954c:	cmp	r1, #0
   19550:	beq	19570 <rb_radixtree_foreach+0x164>
   19554:	ldrb	r0, [r5, #72]	; 0x48
   19558:	mov	r5, r1
   1955c:	cmp	r0, #14
   19560:	bhi	19548 <rb_radixtree_foreach+0x13c>
   19564:	add	r0, r0, #1
   19568:	mov	r5, r1
   1956c:	b	1950c <rb_radixtree_foreach+0x100>
   19570:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00019574 <rb_radixtree_search>:
   19574:	push	{r4, r5, r6, r7, fp, lr}
   19578:	add	fp, sp, #16
   1957c:	ldr	r5, [r0, #4]
   19580:	mov	r0, #0
   19584:	cmp	r5, #0
   19588:	beq	196f0 <rb_radixtree_search+0x17c>
   1958c:	mov	r3, r1
   19590:	ldr	r1, [r5]
   19594:	mov	r4, r2
   19598:	cmn	r1, #1
   1959c:	beq	196d4 <rb_radixtree_search+0x160>
   195a0:	cmp	r3, #0
   195a4:	beq	19654 <rb_radixtree_search+0xe0>
   195a8:	mov	r0, #0
   195ac:	b	195c0 <rb_radixtree_search+0x4c>
   195b0:	sub	r1, r6, #2
   195b4:	sub	r0, r6, #1
   195b8:	cmp	r1, #15
   195bc:	bge	19618 <rb_radixtree_search+0xa4>
   195c0:	add	r1, r0, #1
   195c4:	ldr	r0, [r5, r1, lsl #2]
   195c8:	add	r6, r1, #1
   195cc:	cmp	r0, #0
   195d0:	bne	195e0 <rb_radixtree_search+0x6c>
   195d4:	cmp	r1, #16
   195d8:	mov	r1, r6
   195dc:	blt	195c4 <rb_radixtree_search+0x50>
   195e0:	cmp	r0, #0
   195e4:	beq	195b0 <rb_radixtree_search+0x3c>
   195e8:	ldr	r1, [r0]
   195ec:	cmn	r1, #1
   195f0:	bne	19648 <rb_radixtree_search+0xd4>
   195f4:	ldr	r1, [r0, #4]
   195f8:	ldr	r0, [r0, #8]
   195fc:	mov	r2, r4
   19600:	mov	r7, r3
   19604:	blx	r3
   19608:	mov	r3, r7
   1960c:	cmp	r0, #0
   19610:	beq	195b0 <rb_radixtree_search+0x3c>
   19614:	b	196f0 <rb_radixtree_search+0x17c>
   19618:	ldr	r1, [r5, #68]	; 0x44
   1961c:	ldrb	r0, [r5, #72]	; 0x48
   19620:	cmp	r1, #0
   19624:	beq	19640 <rb_radixtree_search+0xcc>
   19628:	cmp	r0, #14
   1962c:	mov	r5, r1
   19630:	bhi	19618 <rb_radixtree_search+0xa4>
   19634:	add	r0, r0, #1
   19638:	mov	r5, r1
   1963c:	b	195c0 <rb_radixtree_search+0x4c>
   19640:	mov	r5, #0
   19644:	b	195c0 <rb_radixtree_search+0x4c>
   19648:	mov	r5, r0
   1964c:	b	195a8 <rb_radixtree_search+0x34>
   19650:	mov	r5, r0
   19654:	mov	r0, #0
   19658:	b	1966c <rb_radixtree_search+0xf8>
   1965c:	sub	r0, r1, #1
   19660:	sub	r1, r1, #2
   19664:	cmp	r1, #15
   19668:	bge	196a4 <rb_radixtree_search+0x130>
   1966c:	add	r2, r0, #1
   19670:	ldr	r0, [r5, r2, lsl #2]
   19674:	add	r1, r2, #1
   19678:	cmp	r0, #0
   1967c:	bne	1968c <rb_radixtree_search+0x118>
   19680:	cmp	r2, #16
   19684:	mov	r2, r1
   19688:	blt	19670 <rb_radixtree_search+0xfc>
   1968c:	cmp	r0, #0
   19690:	beq	1965c <rb_radixtree_search+0xe8>
   19694:	ldr	r2, [r0]
   19698:	cmn	r2, #1
   1969c:	beq	1965c <rb_radixtree_search+0xe8>
   196a0:	b	19650 <rb_radixtree_search+0xdc>
   196a4:	ldr	r1, [r5, #68]	; 0x44
   196a8:	ldrb	r0, [r5, #72]	; 0x48
   196ac:	cmp	r1, #0
   196b0:	beq	196cc <rb_radixtree_search+0x158>
   196b4:	cmp	r0, #14
   196b8:	mov	r5, r1
   196bc:	bhi	196a4 <rb_radixtree_search+0x130>
   196c0:	add	r0, r0, #1
   196c4:	mov	r5, r1
   196c8:	b	1966c <rb_radixtree_search+0xf8>
   196cc:	mov	r5, #0
   196d0:	b	1966c <rb_radixtree_search+0xf8>
   196d4:	cmp	r3, #0
   196d8:	beq	196f0 <rb_radixtree_search+0x17c>
   196dc:	ldr	r1, [r5, #4]
   196e0:	ldr	r0, [r5, #8]
   196e4:	mov	r2, r4
   196e8:	pop	{r4, r5, r6, r7, fp, lr}
   196ec:	bx	r3
   196f0:	pop	{r4, r5, r6, r7, fp, pc}

000196f4 <rb_radixtree_elem_find>:
   196f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196f8:	add	fp, sp, #28
   196fc:	sub	sp, sp, #260	; 0x104
   19700:	mov	sl, r0
   19704:	mov	r0, r1
   19708:	mov	r8, r2
   1970c:	mov	r4, r1
   19710:	bl	5070 <strlen@plt>
   19714:	mov	r5, r0
   19718:	ldr	r0, [sl]
   1971c:	mov	r6, #0
   19720:	cmp	r0, #0
   19724:	beq	19768 <rb_radixtree_elem_find+0x74>
   19728:	cmp	r5, #256	; 0x100
   1972c:	blt	19780 <rb_radixtree_elem_find+0x8c>
   19730:	add	r0, r5, #1
   19734:	bl	5214 <malloc@plt>
   19738:	cmp	r0, #0
   1973c:	beq	19848 <rb_radixtree_elem_find+0x154>
   19740:	mov	r1, r4
   19744:	mov	r7, r0
   19748:	bl	5124 <strcpy@plt>
   1974c:	ldr	r1, [sl]
   19750:	blx	r1
   19754:	mov	r9, r7
   19758:	ldr	r4, [sl, #4]
   1975c:	cmp	r4, #0
   19760:	bne	197b0 <rb_radixtree_elem_find+0xbc>
   19764:	b	1982c <rb_radixtree_elem_find+0x138>
   19768:	mov	r7, r4
   1976c:	mov	r9, #0
   19770:	ldr	r4, [sl, #4]
   19774:	cmp	r4, #0
   19778:	bne	197b0 <rb_radixtree_elem_find+0xbc>
   1977c:	b	1982c <rb_radixtree_elem_find+0x138>
   19780:	mov	r7, sp
   19784:	mov	r1, r4
   19788:	mov	r2, #256	; 0x100
   1978c:	mov	r0, r7
   19790:	bl	4f44 <rb_strlcpy@plt>
   19794:	ldr	r1, [sl]
   19798:	mov	r0, r7
   1979c:	blx	r1
   197a0:	mov	r9, #0
   197a4:	ldr	r4, [sl, #4]
   197a8:	cmp	r4, #0
   197ac:	beq	1982c <rb_radixtree_elem_find+0x138>
   197b0:	mov	ip, #4
   197b4:	mov	r1, #15
   197b8:	mov	r6, #0
   197bc:	ldr	r2, [r4]
   197c0:	cmn	r2, #1
   197c4:	bne	197e8 <rb_radixtree_elem_find+0xf4>
   197c8:	b	1980c <rb_radixtree_elem_find+0x118>
   197cc:	add	r0, r4, r0, lsl #2
   197d0:	ldr	r4, [r0, #4]
   197d4:	cmp	r4, #0
   197d8:	beq	1982c <rb_radixtree_elem_find+0x138>
   197dc:	ldr	r2, [r4]
   197e0:	cmn	r2, #1
   197e4:	beq	1980c <rb_radixtree_elem_find+0x118>
   197e8:	add	r3, r2, r2, lsr #31
   197ec:	mov	r0, #0
   197f0:	cmp	r5, r3, asr #1
   197f4:	ble	197cc <rb_radixtree_elem_find+0xd8>
   197f8:	asr	r0, r3, #1
   197fc:	bic	r2, ip, r2, lsl #2
   19800:	ldrb	r0, [r7, r0]
   19804:	and	r0, r1, r0, lsr r2
   19808:	b	197cc <rb_radixtree_elem_find+0xd8>
   1980c:	cmp	r8, #0
   19810:	bne	19828 <rb_radixtree_elem_find+0x134>
   19814:	ldr	r0, [r4, #8]
   19818:	mov	r1, r7
   1981c:	bl	5520 <strcmp@plt>
   19820:	cmp	r0, #0
   19824:	movne	r4, #0
   19828:	mov	r6, r4
   1982c:	cmp	r9, #0
   19830:	beq	1983c <rb_radixtree_elem_find+0x148>
   19834:	mov	r0, r9
   19838:	bl	4f8c <free@plt>
   1983c:	mov	r0, r6
   19840:	sub	sp, fp, #28
   19844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19848:	bl	51fc <rb_outofmemory@plt>

0001984c <rb_radixtree_foreach_start_from>:
   1984c:	push	{r4, r5, fp, lr}
   19850:	add	fp, sp, #8
   19854:	mov	r4, r1
   19858:	mov	r5, r0
   1985c:	cmp	r2, #0
   19860:	beq	198a0 <rb_radixtree_foreach_start_from+0x54>
   19864:	mov	r0, #0
   19868:	mov	r1, r2
   1986c:	mov	r2, #1
   19870:	str	r0, [r4, #8]
   19874:	mov	r0, r5
   19878:	bl	53b8 <rb_radixtree_elem_find@plt>
   1987c:	cmp	r5, #0
   19880:	str	r0, [r4, #12]
   19884:	popeq	{r4, r5, fp, pc}
   19888:	ldr	r1, [r4, #8]
   1988c:	cmp	r1, #0
   19890:	strne	r0, [r4, #8]
   19894:	cmpne	r0, #0
   19898:	bne	198b0 <rb_radixtree_foreach_start_from+0x64>
   1989c:	pop	{r4, r5, fp, pc}
   198a0:	mov	r0, r5
   198a4:	mov	r1, r4
   198a8:	pop	{r4, r5, fp, lr}
   198ac:	b	190fc <rb_radixtree_foreach_start>
   198b0:	ldr	r1, [r0, #12]
   198b4:	cmp	r1, #0
   198b8:	beq	1995c <rb_radixtree_foreach_start_from+0x110>
   198bc:	ldrb	r2, [r0, #16]
   198c0:	b	198d4 <rb_radixtree_foreach_start_from+0x88>
   198c4:	sub	r2, r3, #1
   198c8:	sub	r3, r3, #2
   198cc:	cmp	r3, #15
   198d0:	bge	19914 <rb_radixtree_foreach_start_from+0xc8>
   198d4:	add	r2, r2, #1
   198d8:	ldr	r5, [r1, r2, lsl #2]
   198dc:	add	r3, r2, #1
   198e0:	cmp	r5, #0
   198e4:	bne	198f4 <rb_radixtree_foreach_start_from+0xa8>
   198e8:	cmp	r2, #16
   198ec:	mov	r2, r3
   198f0:	blt	198d8 <rb_radixtree_foreach_start_from+0x8c>
   198f4:	cmp	r5, #0
   198f8:	beq	198c4 <rb_radixtree_foreach_start_from+0x78>
   198fc:	ldr	r2, [r5]
   19900:	cmn	r2, #1
   19904:	bne	1993c <rb_radixtree_foreach_start_from+0xf0>
   19908:	cmp	r0, r5
   1990c:	beq	198c4 <rb_radixtree_foreach_start_from+0x78>
   19910:	b	19948 <rb_radixtree_foreach_start_from+0xfc>
   19914:	ldr	r3, [r1, #68]	; 0x44
   19918:	cmp	r3, #0
   1991c:	beq	1995c <rb_radixtree_foreach_start_from+0x110>
   19920:	ldrb	r2, [r1, #72]	; 0x48
   19924:	mov	r1, r3
   19928:	cmp	r2, #14
   1992c:	bhi	19914 <rb_radixtree_foreach_start_from+0xc8>
   19930:	add	r2, r2, #1
   19934:	mov	r1, r3
   19938:	b	198d4 <rb_radixtree_foreach_start_from+0x88>
   1993c:	mov	r2, #0
   19940:	mov	r1, r5
   19944:	b	198d4 <rb_radixtree_foreach_start_from+0x88>
   19948:	ldr	r1, [r0, #8]
   1994c:	ldr	r0, [r5, #8]
   19950:	bl	5520 <strcmp@plt>
   19954:	cmn	r0, #1
   19958:	bgt	19968 <rb_radixtree_foreach_start_from+0x11c>
   1995c:	mov	r0, #0
   19960:	str	r0, [r4, #12]
   19964:	pop	{r4, r5, fp, pc}
   19968:	str	r5, [r4, #12]
   1996c:	pop	{r4, r5, fp, pc}

00019970 <rb_radixtree_elem_add>:
   19970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19974:	add	fp, sp, #28
   19978:	sub	sp, sp, #28
   1997c:	mov	sl, r0
   19980:	mov	r0, r1
   19984:	mov	r4, r2
   19988:	mov	r5, r1
   1998c:	bl	5070 <strlen@plt>
   19990:	mov	r7, r0
   19994:	add	r0, r0, #1
   19998:	bl	5214 <malloc@plt>
   1999c:	cmp	r0, #0
   199a0:	beq	19dcc <rb_radixtree_elem_add+0x45c>
   199a4:	mov	r1, r5
   199a8:	str	r4, [sp, #20]
   199ac:	mov	r4, r0
   199b0:	bl	5124 <strcpy@plt>
   199b4:	ldr	r1, [sl]
   199b8:	cmp	r1, #0
   199bc:	beq	199c8 <rb_radixtree_elem_add+0x58>
   199c0:	mov	r0, r4
   199c4:	blx	r1
   199c8:	mov	r0, sl
   199cc:	str	r4, [sp, #24]
   199d0:	ldr	r6, [r0, #4]!
   199d4:	cmp	r6, #0
   199d8:	beq	19a54 <rb_radixtree_elem_add+0xe4>
   199dc:	ldr	r2, [r6]
   199e0:	str	r0, [sp, #8]
   199e4:	str	r6, [sp, #16]
   199e8:	cmn	r2, #1
   199ec:	beq	19aa8 <rb_radixtree_elem_add+0x138>
   199f0:	ldr	r1, [sp, #24]
   199f4:	mov	r0, #4
   199f8:	mov	r5, #15
   199fc:	mov	r4, r6
   19a00:	add	r3, r2, r2, lsr #31
   19a04:	mov	r9, r4
   19a08:	mov	r8, #0
   19a0c:	cmp	r7, r3, asr #1
   19a10:	ble	19a24 <rb_radixtree_elem_add+0xb4>
   19a14:	asr	r3, r3, #1
   19a18:	bic	r2, r0, r2, lsl #2
   19a1c:	ldrb	r3, [r1, r3]
   19a20:	and	r8, r5, r3, lsr r2
   19a24:	add	r2, r9, r8, lsl #2
   19a28:	ldr	r4, [r2, #4]
   19a2c:	cmp	r4, #0
   19a30:	beq	19adc <rb_radixtree_elem_add+0x16c>
   19a34:	ldr	r2, [r4]
   19a38:	cmn	r2, #1
   19a3c:	bne	19a00 <rb_radixtree_elem_add+0x90>
   19a40:	ldr	r0, [r4, #8]
   19a44:	bl	5520 <strcmp@plt>
   19a48:	cmp	r0, #0
   19a4c:	bne	19bcc <rb_radixtree_elem_add+0x25c>
   19a50:	b	19ac8 <rb_radixtree_elem_add+0x158>
   19a54:	mov	r8, #18
   19a58:	mov	r9, #0
   19a5c:	mov	r0, #1
   19a60:	mov	r1, #20
   19a64:	bl	4e9c <calloc@plt>
   19a68:	cmp	r0, #0
   19a6c:	mvnne	r1, #0
   19a70:	strne	r0, [sl, #4]
   19a74:	strbne	r8, [r0, #16]
   19a78:	strne	r1, [r0]
   19a7c:	ldrne	r1, [sp, #20]
   19a80:	strne	r1, [r0, #4]
   19a84:	ldrne	r1, [sp, #24]
   19a88:	strne	r1, [r0, #8]
   19a8c:	strne	r9, [r0, #12]
   19a90:	ldrne	r1, [sl, #8]
   19a94:	addne	r1, r1, #1
   19a98:	strne	r1, [sl, #8]
   19a9c:	subne	sp, fp, #28
   19aa0:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19aa4:	bl	51fc <rb_outofmemory@plt>
   19aa8:	ldr	r1, [sp, #24]
   19aac:	mov	r9, #0
   19ab0:	mov	r8, #18
   19ab4:	mov	r4, r6
   19ab8:	ldr	r0, [r4, #8]
   19abc:	bl	5520 <strcmp@plt>
   19ac0:	cmp	r0, #0
   19ac4:	bne	19bcc <rb_radixtree_elem_add+0x25c>
   19ac8:	ldr	r0, [sp, #24]
   19acc:	bl	4f8c <free@plt>
   19ad0:	mov	r0, #0
   19ad4:	sub	sp, fp, #28
   19ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19adc:	ldr	r0, [r9]
   19ae0:	mov	r4, r9
   19ae4:	cmn	r0, #1
   19ae8:	bne	19afc <rb_radixtree_elem_add+0x18c>
   19aec:	b	19bcc <rb_radixtree_elem_add+0x25c>
   19af0:	ldr	r0, [r4]
   19af4:	cmn	r0, #1
   19af8:	beq	19bc4 <rb_radixtree_elem_add+0x254>
   19afc:	mov	r0, r4
   19b00:	ldr	r4, [r4, #4]
   19b04:	cmp	r4, #0
   19b08:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b0c:	ldr	r4, [r0, #8]
   19b10:	cmp	r4, #0
   19b14:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b18:	ldr	r4, [r0, #12]
   19b1c:	cmp	r4, #0
   19b20:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b24:	ldr	r4, [r0, #16]
   19b28:	cmp	r4, #0
   19b2c:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b30:	ldr	r4, [r0, #20]
   19b34:	cmp	r4, #0
   19b38:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b3c:	ldr	r4, [r0, #24]
   19b40:	cmp	r4, #0
   19b44:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b48:	ldr	r4, [r0, #28]
   19b4c:	cmp	r4, #0
   19b50:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b54:	ldr	r4, [r0, #32]
   19b58:	cmp	r4, #0
   19b5c:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b60:	ldr	r4, [r0, #36]	; 0x24
   19b64:	cmp	r4, #0
   19b68:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b6c:	ldr	r4, [r0, #40]	; 0x28
   19b70:	cmp	r4, #0
   19b74:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b78:	ldr	r4, [r0, #44]	; 0x2c
   19b7c:	cmp	r4, #0
   19b80:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b84:	ldr	r4, [r0, #48]	; 0x30
   19b88:	cmp	r4, #0
   19b8c:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b90:	ldr	r4, [r0, #52]	; 0x34
   19b94:	cmp	r4, #0
   19b98:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19b9c:	ldr	r4, [r0, #56]	; 0x38
   19ba0:	cmp	r4, #0
   19ba4:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19ba8:	ldr	r4, [r0, #60]	; 0x3c
   19bac:	cmp	r4, #0
   19bb0:	bne	19af0 <rb_radixtree_elem_add+0x180>
   19bb4:	ldr	r4, [r0, #64]	; 0x40
   19bb8:	cmp	r4, #0
   19bbc:	moveq	r4, r0
   19bc0:	b	19af0 <rb_radixtree_elem_add+0x180>
   19bc4:	cmp	r4, #0
   19bc8:	beq	19a5c <rb_radixtree_elem_add+0xec>
   19bcc:	ldr	r0, [r4, #8]
   19bd0:	ldr	ip, [sp, #24]
   19bd4:	mvn	r5, #0
   19bd8:	mov	r1, #0
   19bdc:	mov	r2, #4
   19be0:	mov	r3, #15
   19be4:	str	sl, [sp, #12]
   19be8:	add	r5, r5, #1
   19bec:	bic	sl, r2, r1
   19bf0:	add	r1, r1, #4
   19bf4:	ldrb	r7, [ip, r5, lsr #1]
   19bf8:	ldrb	r6, [r0, r5, lsr #1]
   19bfc:	eor	r7, r6, r7
   19c00:	tst	r7, r3, lsl sl
   19c04:	beq	19be8 <rb_radixtree_elem_add+0x278>
   19c08:	lsr	lr, r5, #1
   19c0c:	mov	r6, #1
   19c10:	cmp	r9, #0
   19c14:	beq	19c5c <rb_radixtree_elem_add+0x2ec>
   19c18:	ldr	r0, [r9]
   19c1c:	cmp	r0, r5
   19c20:	ble	19c44 <rb_radixtree_elem_add+0x2d4>
   19c24:	mov	r1, r9
   19c28:	ldr	r9, [r9, #68]	; 0x44
   19c2c:	cmp	r9, #0
   19c30:	beq	19c58 <rb_radixtree_elem_add+0x2e8>
   19c34:	ldr	r0, [r9]
   19c38:	cmp	r0, r5
   19c3c:	bgt	19c24 <rb_radixtree_elem_add+0x2b4>
   19c40:	ldrb	r8, [r1, #72]	; 0x48
   19c44:	mov	r6, #0
   19c48:	cmp	r0, r5
   19c4c:	mov	r7, r9
   19c50:	blt	19c60 <rb_radixtree_elem_add+0x2f0>
   19c54:	b	19d5c <rb_radixtree_elem_add+0x3ec>
   19c58:	ldrb	r8, [r1, #72]	; 0x48
   19c5c:	mov	r9, #0
   19c60:	mov	r0, #1
   19c64:	mov	r1, #76	; 0x4c
   19c68:	str	lr, [sp, #4]
   19c6c:	bl	4e9c <calloc@plt>
   19c70:	cmp	r0, #0
   19c74:	beq	19dcc <rb_radixtree_elem_add+0x45c>
   19c78:	vmov.i32	q8, #0	; 0x00000000
   19c7c:	mov	r7, r0
   19c80:	ldr	r3, [sp, #16]
   19c84:	ldr	lr, [sp, #4]
   19c88:	strb	r8, [r0, #72]	; 0x48
   19c8c:	str	r9, [r0, #68]	; 0x44
   19c90:	str	r5, [r0], #4
   19c94:	cmp	r6, #0
   19c98:	add	r1, r7, #20
   19c9c:	vst1.32	{d16-d17}, [r1]
   19ca0:	add	r1, r7, #36	; 0x24
   19ca4:	vst1.32	{d16-d17}, [r0]
   19ca8:	vst1.32	{d16-d17}, [r1]
   19cac:	add	r1, r7, #52	; 0x34
   19cb0:	vst1.32	{d16-d17}, [r1]
   19cb4:	beq	19ce8 <rb_radixtree_elem_add+0x378>
   19cb8:	ldr	r1, [r4, #8]
   19cbc:	ldr	ip, [sp, #24]
   19cc0:	ldrb	r2, [r1, lr]
   19cc4:	mov	r1, #15
   19cc8:	and	r2, r1, r2, lsr sl
   19ccc:	str	r3, [r0, r2, lsl #2]
   19cd0:	ldr	r0, [r3]
   19cd4:	cmn	r0, #1
   19cd8:	beq	19d34 <rb_radixtree_elem_add+0x3c4>
   19cdc:	str	r7, [r3, #68]	; 0x44
   19ce0:	ldr	r6, [sp, #8]
   19ce4:	b	19d1c <rb_radixtree_elem_add+0x3ac>
   19ce8:	ldr	r1, [r4, #8]
   19cec:	add	r6, r9, r8, lsl #2
   19cf0:	ldr	ip, [sp, #24]
   19cf4:	ldr	r3, [r6, #4]!
   19cf8:	ldrb	r2, [r1, lr]
   19cfc:	mov	r1, #15
   19d00:	and	r2, r1, r2, lsr sl
   19d04:	str	r3, [r0, r2, lsl #2]
   19d08:	ldr	r0, [r6]
   19d0c:	ldr	r2, [r0]
   19d10:	cmn	r2, #1
   19d14:	beq	19d40 <rb_radixtree_elem_add+0x3d0>
   19d18:	str	r7, [r0, #68]	; 0x44
   19d1c:	ldr	r0, [r4, #8]
   19d20:	ldrb	r0, [r0, lr]
   19d24:	and	r0, r1, r0, lsr sl
   19d28:	ldr	r1, [r6]
   19d2c:	strb	r0, [r1, #72]	; 0x48
   19d30:	b	19d58 <rb_radixtree_elem_add+0x3e8>
   19d34:	str	r7, [r3, #12]
   19d38:	ldr	r6, [sp, #8]
   19d3c:	b	19d44 <rb_radixtree_elem_add+0x3d4>
   19d40:	str	r7, [r0, #12]
   19d44:	ldr	r0, [r4, #8]
   19d48:	ldrb	r0, [r0, lr]
   19d4c:	and	r0, r1, r0, lsr sl
   19d50:	ldr	r1, [r6]
   19d54:	strb	r0, [r1, #16]
   19d58:	str	r7, [r6]
   19d5c:	ldrb	r4, [ip, lr]
   19d60:	mov	r0, #1
   19d64:	mov	r1, #20
   19d68:	mov	r5, ip
   19d6c:	bl	4e9c <calloc@plt>
   19d70:	cmp	r0, #0
   19d74:	movne	r1, #15
   19d78:	mvnne	r3, #0
   19d7c:	andne	r1, r1, r4, lsr sl
   19d80:	addne	r2, r7, r1, lsl #2
   19d84:	strne	r0, [r2, #4]!
   19d88:	strne	r3, [r0]
   19d8c:	ldrne	r3, [sp, #20]
   19d90:	ldrne	r0, [r2]
   19d94:	strne	r3, [r0, #4]
   19d98:	ldrne	r0, [r2]
   19d9c:	strne	r5, [r0, #8]
   19da0:	ldrne	r0, [r2]
   19da4:	strne	r7, [r0, #12]
   19da8:	ldrne	r0, [r2]
   19dac:	strbne	r1, [r0, #16]
   19db0:	ldrne	r1, [sp, #12]
   19db4:	ldrne	r0, [r1, #8]
   19db8:	addne	r0, r0, #1
   19dbc:	strne	r0, [r1, #8]
   19dc0:	ldrne	r0, [r2]
   19dc4:	subne	sp, fp, #28
   19dc8:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dcc:	bl	51fc <rb_outofmemory@plt>

00019dd0 <rb_radixtree_add>:
   19dd0:	push	{fp, lr}
   19dd4:	mov	fp, sp
   19dd8:	bl	4fb0 <rb_radixtree_elem_add@plt>
   19ddc:	cmp	r0, #0
   19de0:	movwne	r0, #1
   19de4:	pop	{fp, pc}

00019de8 <rb_radixtree_elem_delete>:
   19de8:	push	{r4, r5, r6, r7, fp, lr}
   19dec:	add	fp, sp, #16
   19df0:	mov	r4, r0
   19df4:	ldr	r0, [r1, #8]
   19df8:	ldr	r5, [r1, #12]
   19dfc:	ldrb	r7, [r1, #16]
   19e00:	mov	r6, r1
   19e04:	cmp	r0, #0
   19e08:	beq	19e10 <rb_radixtree_elem_delete+0x28>
   19e0c:	bl	4f8c <free@plt>
   19e10:	mov	r0, r6
   19e14:	bl	4f8c <free@plt>
   19e18:	cmp	r5, #0
   19e1c:	beq	19fd4 <rb_radixtree_elem_delete+0x1ec>
   19e20:	add	r0, r5, #4
   19e24:	mov	r1, #0
   19e28:	mvn	r6, #1
   19e2c:	str	r1, [r0, r7, lsl #2]
   19e30:	ldmib	r5, {r0, r2, r3, r7}
   19e34:	cmp	r0, #0
   19e38:	mvn	r0, #1
   19e3c:	mvneq	r1, #0
   19e40:	movweq	r6, #1
   19e44:	cmp	r2, #0
   19e48:	mvn	r2, #1
   19e4c:	moveq	r6, r1
   19e50:	mvn	r1, #1
   19e54:	cmn	r6, #1
   19e58:	movweq	r1, #2
   19e5c:	cmp	r3, #0
   19e60:	ldr	r3, [r5, #20]
   19e64:	moveq	r1, r6
   19e68:	cmn	r1, #1
   19e6c:	movweq	r2, #3
   19e70:	cmp	r7, #0
   19e74:	moveq	r2, r1
   19e78:	mvn	r1, #1
   19e7c:	cmn	r2, #1
   19e80:	movweq	r1, #4
   19e84:	cmp	r3, #0
   19e88:	ldr	r3, [r5, #24]
   19e8c:	moveq	r1, r2
   19e90:	mvn	r2, #1
   19e94:	cmn	r1, #1
   19e98:	movweq	r2, #5
   19e9c:	cmp	r3, #0
   19ea0:	ldr	r3, [r5, #28]
   19ea4:	moveq	r2, r1
   19ea8:	mvn	r1, #1
   19eac:	cmn	r2, #1
   19eb0:	movweq	r1, #6
   19eb4:	cmp	r3, #0
   19eb8:	ldr	r3, [r5, #32]
   19ebc:	moveq	r1, r2
   19ec0:	mvn	r2, #1
   19ec4:	cmn	r1, #1
   19ec8:	movweq	r2, #7
   19ecc:	cmp	r3, #0
   19ed0:	ldr	r3, [r5, #36]	; 0x24
   19ed4:	moveq	r2, r1
   19ed8:	mvn	r1, #1
   19edc:	cmn	r2, #1
   19ee0:	movweq	r1, #8
   19ee4:	cmp	r3, #0
   19ee8:	ldr	r3, [r5, #40]	; 0x28
   19eec:	moveq	r1, r2
   19ef0:	mvn	r2, #1
   19ef4:	cmn	r1, #1
   19ef8:	movweq	r2, #9
   19efc:	cmp	r3, #0
   19f00:	ldr	r3, [r5, #44]	; 0x2c
   19f04:	moveq	r2, r1
   19f08:	mvn	r1, #1
   19f0c:	cmn	r2, #1
   19f10:	movweq	r1, #10
   19f14:	cmp	r3, #0
   19f18:	ldr	r3, [r5, #48]	; 0x30
   19f1c:	moveq	r1, r2
   19f20:	mvn	r2, #1
   19f24:	cmn	r1, #1
   19f28:	movweq	r2, #11
   19f2c:	cmp	r3, #0
   19f30:	ldr	r3, [r5, #52]	; 0x34
   19f34:	moveq	r2, r1
   19f38:	mvn	r1, #1
   19f3c:	cmn	r2, #1
   19f40:	movweq	r1, #12
   19f44:	cmp	r3, #0
   19f48:	ldr	r3, [r5, #56]	; 0x38
   19f4c:	moveq	r1, r2
   19f50:	mvn	r2, #1
   19f54:	cmn	r1, #1
   19f58:	movweq	r2, #13
   19f5c:	cmp	r3, #0
   19f60:	ldr	r3, [r5, #60]	; 0x3c
   19f64:	moveq	r2, r1
   19f68:	mvn	r1, #1
   19f6c:	cmn	r2, #1
   19f70:	movweq	r1, #14
   19f74:	cmp	r3, #0
   19f78:	moveq	r1, r2
   19f7c:	ldr	r2, [r5, #64]	; 0x40
   19f80:	cmn	r1, #1
   19f84:	movweq	r0, #15
   19f88:	cmp	r2, #0
   19f8c:	moveq	r0, r1
   19f90:	cmp	r0, #0
   19f94:	bmi	19ff4 <rb_radixtree_elem_delete+0x20c>
   19f98:	ldr	r2, [r5, #68]	; 0x44
   19f9c:	ldrb	r1, [r5, #72]	; 0x48
   19fa0:	add	r0, r5, r0, lsl #2
   19fa4:	ldr	r0, [r0, #4]
   19fa8:	add	r3, r2, r1, lsl #2
   19fac:	cmp	r2, #0
   19fb0:	add	r3, r3, #4
   19fb4:	addeq	r3, r4, #4
   19fb8:	str	r0, [r3]
   19fbc:	ldr	r3, [r0]
   19fc0:	cmn	r3, #1
   19fc4:	beq	19fe0 <rb_radixtree_elem_delete+0x1f8>
   19fc8:	str	r2, [r0, #68]	; 0x44
   19fcc:	add	r0, r0, #72	; 0x48
   19fd0:	b	19fe8 <rb_radixtree_elem_delete+0x200>
   19fd4:	mov	r0, #0
   19fd8:	str	r0, [r4, #4]
   19fdc:	b	19ff4 <rb_radixtree_elem_delete+0x20c>
   19fe0:	str	r2, [r0, #12]
   19fe4:	add	r0, r0, #16
   19fe8:	strb	r1, [r0]
   19fec:	mov	r0, r5
   19ff0:	bl	4f8c <free@plt>
   19ff4:	ldr	r0, [r4, #8]
   19ff8:	subs	r0, r0, #1
   19ffc:	str	r0, [r4, #8]
   1a000:	moveq	r0, #0
   1a004:	streq	r0, [r4, #4]
   1a008:	pop	{r4, r5, r6, r7, fp, pc}

0001a00c <rb_radixtree_retrieve>:
   1a00c:	push	{r4, sl, fp, lr}
   1a010:	add	fp, sp, #8
   1a014:	mov	r2, #0
   1a018:	mov	r4, #0
   1a01c:	bl	53b8 <rb_radixtree_elem_find@plt>
   1a020:	cmp	r0, #0
   1a024:	ldrne	r4, [r0, #4]
   1a028:	mov	r0, r4
   1a02c:	pop	{r4, sl, fp, pc}

0001a030 <rb_radixtree_elem_get_key>:
   1a030:	ldr	r0, [r0, #8]
   1a034:	bx	lr

0001a038 <rb_radixtree_elem_set_data>:
   1a038:	str	r1, [r0, #4]
   1a03c:	bx	lr

0001a040 <rb_radixtree_elem_get_data>:
   1a040:	ldr	r0, [r0, #4]
   1a044:	bx	lr

0001a048 <rb_radixtree_size>:
   1a048:	ldr	r0, [r0, #8]
   1a04c:	bx	lr

0001a050 <rb_radixtree_stats>:
   1a050:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a054:	add	fp, sp, #24
   1a058:	sub	sp, sp, #280	; 0x118
   1a05c:	mov	r6, r0
   1a060:	mov	r0, #0
   1a064:	mov	r5, r2
   1a068:	mov	r7, r1
   1a06c:	str	r0, [sp, #20]
   1a070:	ldr	r0, [r6, #8]
   1a074:	cmp	r0, #0
   1a078:	beq	1a0c8 <rb_radixtree_stats+0x78>
   1a07c:	ldr	r0, [r6, #4]
   1a080:	add	r2, sp, #20
   1a084:	mov	r1, #0
   1a088:	bl	1a12c <stats_recurse>
   1a08c:	ldr	r1, [r6, #8]
   1a090:	ldr	r3, [r6, #12]
   1a094:	ldr	r2, [sp, #20]
   1a098:	ldr	r6, [pc, #120]	; 1a118 <rb_radixtree_stats+0xc8>
   1a09c:	str	r0, [sp, #8]
   1a0a0:	udiv	r4, r0, r1
   1a0a4:	add	r6, pc, r6
   1a0a8:	str	r1, [sp, #4]
   1a0ac:	str	r2, [sp, #16]
   1a0b0:	add	r0, sp, #24
   1a0b4:	str	r6, [sp]
   1a0b8:	str	r4, [sp, #12]
   1a0bc:	ldr	r2, [pc, #88]	; 1a11c <rb_radixtree_stats+0xcc>
   1a0c0:	add	r2, pc, r2
   1a0c4:	b	1a0fc <rb_radixtree_stats+0xac>
   1a0c8:	ldr	r3, [r6, #12]
   1a0cc:	ldr	r0, [pc, #76]	; 1a120 <rb_radixtree_stats+0xd0>
   1a0d0:	ldr	r1, [pc, #76]	; 1a124 <rb_radixtree_stats+0xd4>
   1a0d4:	add	r0, pc, r0
   1a0d8:	add	r1, pc, r1
   1a0dc:	str	r1, [sp]
   1a0e0:	str	r0, [sp, #4]
   1a0e4:	str	r0, [sp, #8]
   1a0e8:	str	r0, [sp, #12]
   1a0ec:	str	r0, [sp, #16]
   1a0f0:	add	r0, sp, #24
   1a0f4:	ldr	r2, [pc, #44]	; 1a128 <rb_radixtree_stats+0xd8>
   1a0f8:	add	r2, pc, r2
   1a0fc:	mov	r1, #256	; 0x100
   1a100:	bl	53f4 <snprintf@plt>
   1a104:	add	r0, sp, #24
   1a108:	mov	r1, r5
   1a10c:	blx	r7
   1a110:	sub	sp, fp, #24
   1a114:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a118:	.word	0x00001dfd
   1a11c:	.word	0x00001d94
   1a120:	.word	0x00000f7b
   1a124:	.word	0x00001dc9
   1a128:	.word	0x00001d85

0001a12c <stats_recurse>:
   1a12c:	push	{r4, r5, r6, r7, fp, lr}
   1a130:	add	fp, sp, #16
   1a134:	mov	r6, r0
   1a138:	ldr	r0, [r2]
   1a13c:	mov	r5, r2
   1a140:	mov	r4, r1
   1a144:	cmp	r0, r1
   1a148:	strlt	r4, [r5]
   1a14c:	ldr	r0, [r6]
   1a150:	cmn	r0, #1
   1a154:	beq	1a31c <stats_recurse+0x1f0>
   1a158:	ldr	r0, [r6, #4]
   1a15c:	add	r7, r4, #1
   1a160:	cmp	r0, #0
   1a164:	beq	1a324 <stats_recurse+0x1f8>
   1a168:	mov	r1, r7
   1a16c:	mov	r2, r5
   1a170:	bl	1a12c <stats_recurse>
   1a174:	mov	r4, r0
   1a178:	ldr	r0, [r6, #8]
   1a17c:	cmp	r0, #0
   1a180:	beq	1a194 <stats_recurse+0x68>
   1a184:	mov	r1, r7
   1a188:	mov	r2, r5
   1a18c:	bl	1a12c <stats_recurse>
   1a190:	add	r4, r0, r4
   1a194:	ldr	r0, [r6, #12]
   1a198:	cmp	r0, #0
   1a19c:	beq	1a1b0 <stats_recurse+0x84>
   1a1a0:	mov	r1, r7
   1a1a4:	mov	r2, r5
   1a1a8:	bl	1a12c <stats_recurse>
   1a1ac:	add	r4, r0, r4
   1a1b0:	ldr	r0, [r6, #16]
   1a1b4:	cmp	r0, #0
   1a1b8:	beq	1a1cc <stats_recurse+0xa0>
   1a1bc:	mov	r1, r7
   1a1c0:	mov	r2, r5
   1a1c4:	bl	1a12c <stats_recurse>
   1a1c8:	add	r4, r0, r4
   1a1cc:	ldr	r0, [r6, #20]
   1a1d0:	cmp	r0, #0
   1a1d4:	beq	1a1e8 <stats_recurse+0xbc>
   1a1d8:	mov	r1, r7
   1a1dc:	mov	r2, r5
   1a1e0:	bl	1a12c <stats_recurse>
   1a1e4:	add	r4, r0, r4
   1a1e8:	ldr	r0, [r6, #24]
   1a1ec:	cmp	r0, #0
   1a1f0:	beq	1a204 <stats_recurse+0xd8>
   1a1f4:	mov	r1, r7
   1a1f8:	mov	r2, r5
   1a1fc:	bl	1a12c <stats_recurse>
   1a200:	add	r4, r0, r4
   1a204:	ldr	r0, [r6, #28]
   1a208:	cmp	r0, #0
   1a20c:	beq	1a220 <stats_recurse+0xf4>
   1a210:	mov	r1, r7
   1a214:	mov	r2, r5
   1a218:	bl	1a12c <stats_recurse>
   1a21c:	add	r4, r0, r4
   1a220:	ldr	r0, [r6, #32]
   1a224:	cmp	r0, #0
   1a228:	beq	1a23c <stats_recurse+0x110>
   1a22c:	mov	r1, r7
   1a230:	mov	r2, r5
   1a234:	bl	1a12c <stats_recurse>
   1a238:	add	r4, r0, r4
   1a23c:	ldr	r0, [r6, #36]	; 0x24
   1a240:	cmp	r0, #0
   1a244:	beq	1a258 <stats_recurse+0x12c>
   1a248:	mov	r1, r7
   1a24c:	mov	r2, r5
   1a250:	bl	1a12c <stats_recurse>
   1a254:	add	r4, r0, r4
   1a258:	ldr	r0, [r6, #40]	; 0x28
   1a25c:	cmp	r0, #0
   1a260:	beq	1a274 <stats_recurse+0x148>
   1a264:	mov	r1, r7
   1a268:	mov	r2, r5
   1a26c:	bl	1a12c <stats_recurse>
   1a270:	add	r4, r0, r4
   1a274:	ldr	r0, [r6, #44]	; 0x2c
   1a278:	cmp	r0, #0
   1a27c:	beq	1a290 <stats_recurse+0x164>
   1a280:	mov	r1, r7
   1a284:	mov	r2, r5
   1a288:	bl	1a12c <stats_recurse>
   1a28c:	add	r4, r0, r4
   1a290:	ldr	r0, [r6, #48]	; 0x30
   1a294:	cmp	r0, #0
   1a298:	beq	1a2ac <stats_recurse+0x180>
   1a29c:	mov	r1, r7
   1a2a0:	mov	r2, r5
   1a2a4:	bl	1a12c <stats_recurse>
   1a2a8:	add	r4, r0, r4
   1a2ac:	ldr	r0, [r6, #52]	; 0x34
   1a2b0:	cmp	r0, #0
   1a2b4:	beq	1a2c8 <stats_recurse+0x19c>
   1a2b8:	mov	r1, r7
   1a2bc:	mov	r2, r5
   1a2c0:	bl	1a12c <stats_recurse>
   1a2c4:	add	r4, r0, r4
   1a2c8:	ldr	r0, [r6, #56]	; 0x38
   1a2cc:	cmp	r0, #0
   1a2d0:	beq	1a2e4 <stats_recurse+0x1b8>
   1a2d4:	mov	r1, r7
   1a2d8:	mov	r2, r5
   1a2dc:	bl	1a12c <stats_recurse>
   1a2e0:	add	r4, r0, r4
   1a2e4:	ldr	r0, [r6, #60]	; 0x3c
   1a2e8:	cmp	r0, #0
   1a2ec:	beq	1a300 <stats_recurse+0x1d4>
   1a2f0:	mov	r1, r7
   1a2f4:	mov	r2, r5
   1a2f8:	bl	1a12c <stats_recurse>
   1a2fc:	add	r4, r0, r4
   1a300:	ldr	r0, [r6, #64]	; 0x40
   1a304:	cmp	r0, #0
   1a308:	beq	1a31c <stats_recurse+0x1f0>
   1a30c:	mov	r1, r7
   1a310:	mov	r2, r5
   1a314:	bl	1a12c <stats_recurse>
   1a318:	add	r4, r0, r4
   1a31c:	mov	r0, r4
   1a320:	pop	{r4, r5, r6, r7, fp, pc}
   1a324:	mov	r4, #0
   1a328:	ldr	r0, [r6, #8]
   1a32c:	cmp	r0, #0
   1a330:	bne	1a184 <stats_recurse+0x58>
   1a334:	b	1a194 <stats_recurse+0x68>

0001a338 <rb_radixtree_stats_walk>:
   1a338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a33c:	add	fp, sp, #28
   1a340:	sub	sp, sp, #284	; 0x11c
   1a344:	mov	r9, r0
   1a348:	ldr	r0, [pc, #220]	; 1a42c <rb_radixtree_stats_walk+0xf4>
   1a34c:	ldr	r0, [pc, r0]
   1a350:	ldr	r7, [r0]
   1a354:	cmp	r7, #0
   1a358:	beq	1a424 <rb_radixtree_stats_walk+0xec>
   1a35c:	ldr	r5, [pc, #204]	; 1a430 <rb_radixtree_stats_walk+0xf8>
   1a360:	mov	sl, r1
   1a364:	add	r6, sp, #24
   1a368:	add	r5, pc, r5
   1a36c:	b	1a3c4 <rb_radixtree_stats_walk+0x8c>
   1a370:	ldr	r3, [r8, #12]
   1a374:	ldr	r0, [pc, #188]	; 1a438 <rb_radixtree_stats_walk+0x100>
   1a378:	mov	r1, #256	; 0x100
   1a37c:	add	r0, pc, r0
   1a380:	str	r0, [sp]
   1a384:	ldr	r0, [pc, #176]	; 1a43c <rb_radixtree_stats_walk+0x104>
   1a388:	add	r0, pc, r0
   1a38c:	str	r0, [sp, #4]
   1a390:	str	r0, [sp, #8]
   1a394:	str	r0, [sp, #12]
   1a398:	str	r0, [sp, #16]
   1a39c:	mov	r0, r6
   1a3a0:	ldr	r2, [pc, #152]	; 1a440 <rb_radixtree_stats_walk+0x108>
   1a3a4:	add	r2, pc, r2
   1a3a8:	bl	53f4 <snprintf@plt>
   1a3ac:	mov	r0, r6
   1a3b0:	mov	r1, sl
   1a3b4:	blx	r9
   1a3b8:	ldr	r7, [r7, #8]
   1a3bc:	cmp	r7, #0
   1a3c0:	beq	1a424 <rb_radixtree_stats_walk+0xec>
   1a3c4:	ldr	r8, [r7]
   1a3c8:	mov	r0, #0
   1a3cc:	str	r0, [sp, #20]
   1a3d0:	ldr	r0, [r8, #8]
   1a3d4:	cmp	r0, #0
   1a3d8:	beq	1a370 <rb_radixtree_stats_walk+0x38>
   1a3dc:	ldr	r0, [r8, #4]
   1a3e0:	mov	r1, #0
   1a3e4:	add	r2, sp, #20
   1a3e8:	bl	1a12c <stats_recurse>
   1a3ec:	ldr	r1, [r8, #8]
   1a3f0:	ldr	r2, [sp, #20]
   1a3f4:	ldr	r3, [r8, #12]
   1a3f8:	str	r5, [sp]
   1a3fc:	str	r0, [sp, #8]
   1a400:	udiv	r4, r0, r1
   1a404:	str	r1, [sp, #4]
   1a408:	str	r2, [sp, #16]
   1a40c:	mov	r0, r6
   1a410:	mov	r1, #256	; 0x100
   1a414:	str	r4, [sp, #12]
   1a418:	ldr	r2, [pc, #20]	; 1a434 <rb_radixtree_stats_walk+0xfc>
   1a41c:	add	r2, pc, r2
   1a420:	b	1a3a8 <rb_radixtree_stats_walk+0x70>
   1a424:	sub	sp, fp, #28
   1a428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a42c:	.word	0x00013068
   1a430:	.word	0x00001b39
   1a434:	.word	0x00001a38
   1a438:	.word	0x00001b25
   1a43c:	.word	0x00000cc7
   1a440:	.word	0x00001ad9

Disassembly of section .fini:

0001a444 <_fini>:
   1a444:	push	{r3, lr}
   1a448:	pop	{r3, pc}
