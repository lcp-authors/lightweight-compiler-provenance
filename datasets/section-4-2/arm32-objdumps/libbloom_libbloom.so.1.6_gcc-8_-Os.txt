
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

000004c4 <.init>:
 4c4:	push	{r3, lr}
 4c8:	bl	560 <bloom_init@plt+0x10>
 4cc:	pop	{r3, pc}

Disassembly of section .plt:

000004d0 <calloc@plt-0x14>:
 4d0:	push	{lr}		; (str lr, [sp, #-4]!)
 4d4:	ldr	lr, [pc, #4]	; 4e0 <calloc@plt-0x4>
 4d8:	add	lr, pc, lr
 4dc:	ldr	pc, [lr, #8]!
 4e0:	andeq	r0, r1, r0, lsr #22

000004e4 <calloc@plt>:
 4e4:	add	ip, pc, #0, 12
 4e8:	add	ip, ip, #16, 20	; 0x10000
 4ec:	ldr	pc, [ip, #2848]!	; 0xb20

000004f0 <log@plt>:
 4f0:	add	ip, pc, #0, 12
 4f4:	add	ip, ip, #16, 20	; 0x10000
 4f8:	ldr	pc, [ip, #2840]!	; 0xb18

000004fc <__cxa_finalize@plt>:
 4fc:	add	ip, pc, #0, 12
 500:	add	ip, ip, #16, 20	; 0x10000
 504:	ldr	pc, [ip, #2832]!	; 0xb10

00000508 <printf@plt>:
 508:	add	ip, pc, #0, 12
 50c:	add	ip, ip, #16, 20	; 0x10000
 510:	ldr	pc, [ip, #2824]!	; 0xb08

00000514 <murmurhash2@plt>:
 514:	add	ip, pc, #0, 12
 518:	add	ip, ip, #16, 20	; 0x10000
 51c:	ldr	pc, [ip, #2816]!	; 0xb00

00000520 <free@plt>:
 520:	add	ip, pc, #0, 12
 524:	add	ip, ip, #16, 20	; 0x10000
 528:	ldr	pc, [ip, #2808]!	; 0xaf8

0000052c <__gmon_start__@plt>:
 52c:	add	ip, pc, #0, 12
 530:	add	ip, ip, #16, 20	; 0x10000
 534:	ldr	pc, [ip, #2800]!	; 0xaf0

00000538 <memset@plt>:
 538:	add	ip, pc, #0, 12
 53c:	add	ip, ip, #16, 20	; 0x10000
 540:	ldr	pc, [ip, #2792]!	; 0xae8

00000544 <ceil@plt>:
 544:	add	ip, pc, #0, 12
 548:	add	ip, ip, #16, 20	; 0x10000
 54c:	ldr	pc, [ip, #2784]!	; 0xae0

00000550 <bloom_init@plt>:
 550:	add	ip, pc, #0, 12
 554:	add	ip, ip, #16, 20	; 0x10000
 558:	ldr	pc, [ip, #2776]!	; 0xad8

Disassembly of section .text:

00000560 <bloom_init@@Base-0x1d4>:
 560:	ldr	r3, [pc, #20]	; 57c <bloom_init@plt+0x2c>
 564:	ldr	r2, [pc, #20]	; 580 <bloom_init@plt+0x30>
 568:	add	r3, pc, r3
 56c:	ldr	r2, [r3, r2]
 570:	cmp	r2, #0
 574:	bxeq	lr
 578:	b	52c <__gmon_start__@plt>
 57c:	muleq	r1, r0, sl
 580:	andeq	r0, r0, ip, lsr r0
 584:	ldr	r0, [pc, #44]	; 5b8 <bloom_init@plt+0x68>
 588:	ldr	r3, [pc, #44]	; 5bc <bloom_init@plt+0x6c>
 58c:	add	r0, pc, r0
 590:	add	r3, pc, r3
 594:	cmp	r3, r0
 598:	ldr	r3, [pc, #32]	; 5c0 <bloom_init@plt+0x70>
 59c:	add	r3, pc, r3
 5a0:	bxeq	lr
 5a4:	ldr	r2, [pc, #24]	; 5c4 <bloom_init@plt+0x74>
 5a8:	ldr	r3, [r3, r2]
 5ac:	cmp	r3, #0
 5b0:	bxeq	lr
 5b4:	bx	r3
 5b8:			; <UNDEFINED> instruction: 0x00010ab4
 5bc:			; <UNDEFINED> instruction: 0x00010ab0
 5c0:	andeq	r0, r1, ip, asr sl
 5c4:	andeq	r0, r0, r8, lsr r0
 5c8:	ldr	r0, [pc, #56]	; 608 <bloom_init@plt+0xb8>
 5cc:	ldr	r3, [pc, #56]	; 60c <bloom_init@plt+0xbc>
 5d0:	add	r0, pc, r0
 5d4:	add	r3, pc, r3
 5d8:	sub	r1, r3, r0
 5dc:	ldr	r3, [pc, #44]	; 610 <bloom_init@plt+0xc0>
 5e0:	asr	r1, r1, #2
 5e4:	add	r3, pc, r3
 5e8:	add	r1, r1, r1, lsr #31
 5ec:	asrs	r1, r1, #1
 5f0:	bxeq	lr
 5f4:	ldr	r2, [pc, #24]	; 614 <bloom_init@plt+0xc4>
 5f8:	ldr	r3, [r3, r2]
 5fc:	cmp	r3, #0
 600:	bxeq	lr
 604:	bx	r3
 608:	andeq	r0, r1, r0, ror sl
 60c:	andeq	r0, r1, ip, ror #20
 610:	andeq	r0, r1, r4, lsl sl
 614:	andeq	r0, r0, r0, asr #32
 618:	ldr	r3, [pc, #76]	; 66c <bloom_init@plt+0x11c>
 61c:	ldr	r2, [pc, #76]	; 670 <bloom_init@plt+0x120>
 620:	add	r3, pc, r3
 624:	add	r2, pc, r2
 628:	ldrb	r3, [r3]
 62c:	cmp	r3, #0
 630:	bxne	lr
 634:	ldr	r3, [pc, #56]	; 674 <bloom_init@plt+0x124>
 638:	push	{r4, lr}
 63c:	ldr	r3, [r2, r3]
 640:	cmp	r3, #0
 644:	beq	654 <bloom_init@plt+0x104>
 648:	ldr	r3, [pc, #40]	; 678 <bloom_init@plt+0x128>
 64c:	ldr	r0, [pc, r3]
 650:	bl	4fc <__cxa_finalize@plt>
 654:	bl	584 <bloom_init@plt+0x34>
 658:	ldr	r3, [pc, #28]	; 67c <bloom_init@plt+0x12c>
 65c:	mov	r2, #1
 660:	add	r3, pc, r3
 664:	strb	r2, [r3]
 668:	pop	{r4, pc}
 66c:	andeq	r0, r1, r0, lsr #20
 670:	ldrdeq	r0, [r1], -r4
 674:	andeq	r0, r0, r4, lsr r0
 678:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 67c:	andeq	r0, r1, r0, ror #19
 680:	b	5c8 <bloom_init@plt+0x78>
 684:	andeq	r0, r0, r0
 688:	push	{r4, r5, r6, r7, r8, lr}
 68c:	mov	r7, r1
 690:	mov	r8, r2
 694:	mov	r1, r8
 698:	mov	r5, r0
 69c:	mov	r0, r7
 6a0:	mov	r6, r3
 6a4:	ldr	r2, [pc, #132]	; 730 <bloom_init@plt+0x1e0>
 6a8:	bl	514 <murmurhash2@plt>
 6ac:	mov	r2, r0
 6b0:	mov	r1, r8
 6b4:	mov	r4, r0
 6b8:	mov	r0, r7
 6bc:	bl	514 <murmurhash2@plt>
 6c0:	mov	r1, #0
 6c4:	mov	r7, #1
 6c8:	mov	r3, r1
 6cc:	ldr	r2, [r5, #24]
 6d0:	cmp	r1, r2
 6d4:	bcc	6ec <bloom_init@plt+0x19c>
 6d8:	sub	r6, r3, r2
 6dc:	clz	r6, r6
 6e0:	lsr	r6, r6, #5
 6e4:	mov	r0, r6
 6e8:	pop	{r4, r5, r6, r7, r8, pc}
 6ec:	ldr	ip, [r5, #16]
 6f0:	ldr	r8, [r5, #40]	; 0x28
 6f4:	udiv	r2, r4, ip
 6f8:	mls	r2, ip, r2, r4
 6fc:	ldrb	ip, [r8, r2, lsr #3]
 700:	and	lr, r2, #7
 704:	lsl	lr, r7, lr
 708:	tst	lr, ip
 70c:	addne	r3, r3, #1
 710:	bne	724 <bloom_init@plt+0x1d4>
 714:	cmp	r6, #0
 718:	beq	6e4 <bloom_init@plt+0x194>
 71c:	orr	ip, ip, lr
 720:	strb	ip, [r8, r2, lsr #3]
 724:	add	r1, r1, #1
 728:	add	r4, r4, r0
 72c:	b	6cc <bloom_init@plt+0x17c>
 730:	strbls	fp, [r7, -ip, lsl #5]

00000734 <bloom_init@@Base>:
 734:	vcmp.f64	d0, #0.0
 738:	mov	r3, #0
 73c:	str	r3, [r0, #44]	; 0x2c
 740:	vmrs	APSR_nzcv, fpscr
 744:	moveq	r3, #1
 748:	cmp	r1, #1000	; 0x3e8
 74c:	orrlt	r3, r3, #1
 750:	cmp	r3, #0
 754:	beq	768 <bloom_init@@Base+0x34>
 758:	mov	r0, #1
 75c:	bx	lr
 760:	mov	r0, #1
 764:	pop	{r4, r5, r6, pc}
 768:	push	{r4, r5, r6, lr}
 76c:	mov	r5, r0
 770:	mov	r4, r1
 774:	str	r1, [r5]
 778:	vstr	d0, [r5, #8]
 77c:	bl	4f0 <log@plt>
 780:	vldr	d7, [pc, #144]	; 818 <bloom_init@@Base+0xe4>
 784:	vdiv.f64	d0, d0, d7
 788:	vmov	s15, r4
 78c:	vcvt.f64.s32	d7, s15
 790:	vneg.f64	d0, d0
 794:	vmul.f64	d7, d7, d0
 798:	vstr	d0, [r5, #32]
 79c:	vcvt.s32.f64	s15, d7
 7a0:	vmov	r3, s15
 7a4:	vstr	s15, [r5, #16]
 7a8:	tst	r3, #7
 7ac:	add	r4, r3, #7
 7b0:	beq	804 <bloom_init@@Base+0xd0>
 7b4:	cmp	r3, #0
 7b8:	movlt	r3, r4
 7bc:	asr	r4, r3, #3
 7c0:	add	r4, r4, #1
 7c4:	vldr	d7, [pc, #84]	; 820 <bloom_init@@Base+0xec>
 7c8:	str	r4, [r5, #20]
 7cc:	vmul.f64	d0, d0, d7
 7d0:	bl	544 <ceil@plt>
 7d4:	vcvt.s32.f64	s0, d0
 7d8:	mov	r1, #1
 7dc:	mov	r0, r4
 7e0:	vstr	s0, [r5, #24]
 7e4:	bl	4e4 <calloc@plt>
 7e8:	cmp	r0, #0
 7ec:	str	r0, [r5, #40]	; 0x28
 7f0:	beq	760 <bloom_init@@Base+0x2c>
 7f4:	mov	r3, #1
 7f8:	mov	r0, #0
 7fc:	str	r3, [r5, #44]	; 0x2c
 800:	pop	{r4, r5, r6, pc}
 804:	cmp	r3, #0
 808:	movlt	r3, r4
 80c:	asr	r4, r3, #3
 810:	b	7c4 <bloom_init@@Base+0x90>
 814:	nop	{0}
 818:			; <UNDEFINED> instruction: 0xff82c587
 81c:	svccc	0x00debfbd
 820:			; <UNDEFINED> instruction: 0xfefa39ec
 824:	svccc	0x00e62e42

00000828 <bloom_init_size@@Base>:
 828:	b	550 <bloom_init@plt>

0000082c <bloom_check@@Base>:
 82c:	ldr	ip, [r0, #44]	; 0x2c
 830:	cmp	ip, #0
 834:	beq	840 <bloom_check@@Base+0x14>
 838:	mov	r3, #0
 83c:	b	688 <bloom_init@plt+0x138>
 840:	mov	r1, r0
 844:	ldr	r0, [pc, #16]	; 85c <bloom_check@@Base+0x30>
 848:	push	{r4, lr}
 84c:	add	r0, pc, r0
 850:	bl	508 <printf@plt>
 854:	mvn	r0, #0
 858:	pop	{r4, pc}
 85c:	andeq	r0, r0, r4, asr #3

00000860 <bloom_add@@Base>:
 860:	ldr	ip, [r0, #44]	; 0x2c
 864:	cmp	ip, #0
 868:	beq	874 <bloom_add@@Base+0x14>
 86c:	mov	r3, #1
 870:	b	688 <bloom_init@plt+0x138>
 874:	mov	r1, r0
 878:	ldr	r0, [pc, #16]	; 890 <bloom_add@@Base+0x30>
 87c:	push	{r4, lr}
 880:	add	r0, pc, r0
 884:	bl	508 <printf@plt>
 888:	mvn	r0, #0
 88c:	pop	{r4, pc}
 890:	muleq	r0, r0, r1

00000894 <bloom_print@@Base>:
 894:	push	{r4, lr}
 898:	mov	r1, r0
 89c:	mov	r4, r0
 8a0:	ldr	r0, [pc, #104]	; 910 <bloom_print@@Base+0x7c>
 8a4:	add	r0, pc, r0
 8a8:	bl	508 <printf@plt>
 8ac:	ldr	r0, [pc, #96]	; 914 <bloom_print@@Base+0x80>
 8b0:	ldr	r1, [r4]
 8b4:	add	r0, pc, r0
 8b8:	bl	508 <printf@plt>
 8bc:	ldr	r0, [pc, #84]	; 918 <bloom_print@@Base+0x84>
 8c0:	ldrd	r2, [r4, #8]
 8c4:	add	r0, pc, r0
 8c8:	bl	508 <printf@plt>
 8cc:	ldr	r0, [pc, #72]	; 91c <bloom_print@@Base+0x88>
 8d0:	ldr	r1, [r4, #16]
 8d4:	add	r0, pc, r0
 8d8:	bl	508 <printf@plt>
 8dc:	ldr	r0, [pc, #60]	; 920 <bloom_print@@Base+0x8c>
 8e0:	ldrd	r2, [r4, #32]
 8e4:	add	r0, pc, r0
 8e8:	bl	508 <printf@plt>
 8ec:	ldr	r0, [pc, #48]	; 924 <bloom_print@@Base+0x90>
 8f0:	ldr	r1, [r4, #20]
 8f4:	add	r0, pc, r0
 8f8:	bl	508 <printf@plt>
 8fc:	ldr	r0, [pc, #36]	; 928 <bloom_print@@Base+0x94>
 900:	ldr	r1, [r4, #24]
 904:	pop	{r4, lr}
 908:	add	r0, pc, r0
 90c:	b	508 <printf@plt>
 910:	andeq	r0, r0, sl, lsl #3
 914:	andeq	r0, r0, r7, lsl #3
 918:	andeq	r0, r0, r8, lsl #3
 91c:	andeq	r0, r0, r7, lsl #3
 920:	andeq	r0, r0, r5, lsl #3
 924:	andeq	r0, r0, ip, lsl #3
 928:	andeq	r0, r0, r7, lsl #3

0000092c <bloom_free@@Base>:
 92c:	ldr	r3, [r0, #44]	; 0x2c
 930:	push	{r4, lr}
 934:	mov	r4, r0
 938:	cmp	r3, #0
 93c:	beq	948 <bloom_free@@Base+0x1c>
 940:	ldr	r0, [r0, #40]	; 0x28
 944:	bl	520 <free@plt>
 948:	mov	r3, #0
 94c:	str	r3, [r4, #44]	; 0x2c
 950:	pop	{r4, pc}

00000954 <bloom_reset@@Base>:
 954:	ldr	r3, [r0, #44]	; 0x2c
 958:	cmp	r3, #0
 95c:	beq	97c <bloom_reset@@Base+0x28>
 960:	push	{r4, lr}
 964:	mov	r1, #0
 968:	ldr	r2, [r0, #20]
 96c:	ldr	r0, [r0, #40]	; 0x28
 970:	bl	538 <memset@plt>
 974:	mov	r0, #0
 978:	pop	{r4, pc}
 97c:	mov	r0, #1
 980:	bx	lr

00000984 <bloom_version@@Base>:
 984:	ldr	r0, [pc, #4]	; 990 <bloom_version@@Base+0xc>
 988:	add	r0, pc, r0
 98c:	bx	lr
 990:	andeq	r0, r0, pc, lsl r1

00000994 <murmurhash2@@Base>:
 994:	ldr	r3, [pc, #112]	; a0c <murmurhash2@@Base+0x78>
 998:	eor	r2, r2, r1
 99c:	cmp	r1, #3
 9a0:	bgt	9d8 <murmurhash2@@Base+0x44>
 9a4:	cmp	r1, #2
 9a8:	beq	a00 <murmurhash2@@Base+0x6c>
 9ac:	cmp	r1, #3
 9b0:	beq	9f8 <murmurhash2@@Base+0x64>
 9b4:	cmp	r1, #1
 9b8:	bne	9c8 <murmurhash2@@Base+0x34>
 9bc:	ldrb	r0, [r0]
 9c0:	eor	r2, r2, r0
 9c4:	mul	r2, r3, r2
 9c8:	eor	r2, r2, r2, lsr #13
 9cc:	mul	r0, r3, r2
 9d0:	eor	r0, r0, r0, lsr #15
 9d4:	bx	lr
 9d8:	ldr	ip, [r0], #4
 9dc:	mul	r2, r3, r2
 9e0:	sub	r1, r1, #4
 9e4:	mul	ip, r3, ip
 9e8:	eor	ip, ip, ip, lsr #24
 9ec:	mul	ip, r3, ip
 9f0:	eor	r2, r2, ip
 9f4:	b	99c <murmurhash2@@Base+0x8>
 9f8:	ldrb	r1, [r0, #2]
 9fc:	eor	r2, r2, r1, lsl #16
 a00:	ldrb	r1, [r0, #1]
 a04:	eor	r2, r2, r1, lsl #8
 a08:	b	9bc <murmurhash2@@Base+0x28>
 a0c:	blpl	ff47b068 <murmurhash2@@Base+0xff47a6d4>

Disassembly of section .fini:

00000a10 <.fini>:
 a10:	push	{r3, lr}
 a14:	pop	{r3, pc}
