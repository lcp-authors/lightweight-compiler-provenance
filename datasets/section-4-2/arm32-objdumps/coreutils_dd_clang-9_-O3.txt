
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

00011338 <.init>:
   11338:	push	{r3, lr}
   1133c:	bl	1171c <__assert_fail@plt+0x4c>
   11340:	pop	{r3, pc}

Disassembly of section .plt:

00011344 <calloc@plt-0x14>:
   11344:	push	{lr}		; (str lr, [sp, #-4]!)
   11348:	ldr	lr, [pc, #4]	; 11354 <calloc@plt-0x4>
   1134c:	add	lr, pc, lr
   11350:	ldr	pc, [lr, #8]!
   11354:	andeq	sp, r1, ip, lsr #25

00011358 <calloc@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #118784	; 0x1d000
   11360:	ldr	pc, [ip, #3244]!	; 0xcac

00011364 <fputs_unlocked@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #118784	; 0x1d000
   1136c:	ldr	pc, [ip, #3236]!	; 0xca4

00011370 <raise@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #118784	; 0x1d000
   11378:	ldr	pc, [ip, #3228]!	; 0xc9c

0001137c <fsync@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #118784	; 0x1d000
   11384:	ldr	pc, [ip, #3220]!	; 0xc94

00011388 <strcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #118784	; 0x1d000
   11390:	ldr	pc, [ip, #3212]!	; 0xc8c

00011394 <posix_fadvise64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #118784	; 0x1d000
   1139c:	ldr	pc, [ip, #3204]!	; 0xc84

000113a0 <read@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #118784	; 0x1d000
   113a8:	ldr	pc, [ip, #3196]!	; 0xc7c

000113ac <fflush@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #118784	; 0x1d000
   113b4:	ldr	pc, [ip, #3188]!	; 0xc74

000113b8 <sigprocmask@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #118784	; 0x1d000
   113c0:	ldr	pc, [ip, #3180]!	; 0xc6c

000113c4 <memmove@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #118784	; 0x1d000
   113cc:	ldr	pc, [ip, #3172]!	; 0xc64

000113d0 <free@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #118784	; 0x1d000
   113d8:	ldr	pc, [ip, #3164]!	; 0xc5c

000113dc <clock_gettime@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #118784	; 0x1d000
   113e4:	ldr	pc, [ip, #3156]!	; 0xc54

000113e8 <_exit@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #118784	; 0x1d000
   113f0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113f4 <memcpy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #118784	; 0x1d000
   113fc:	ldr	pc, [ip, #3140]!	; 0xc44

00011400 <__strtoull_internal@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #118784	; 0x1d000
   11408:	ldr	pc, [ip, #3132]!	; 0xc3c

0001140c <mbsinit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #118784	; 0x1d000
   11414:	ldr	pc, [ip, #3124]!	; 0xc34

00011418 <ftruncate64@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #118784	; 0x1d000
   11420:	ldr	pc, [ip, #3116]!	; 0xc2c

00011424 <dcgettext@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #118784	; 0x1d000
   1142c:	ldr	pc, [ip, #3108]!	; 0xc24

00011430 <dup2@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #118784	; 0x1d000
   11438:	ldr	pc, [ip, #3100]!	; 0xc1c

0001143c <realloc@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #118784	; 0x1d000
   11444:	ldr	pc, [ip, #3092]!	; 0xc14

00011448 <sigismember@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #118784	; 0x1d000
   11450:	ldr	pc, [ip, #3084]!	; 0xc0c

00011454 <textdomain@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #118784	; 0x1d000
   1145c:	ldr	pc, [ip, #3076]!	; 0xc04

00011460 <iswprint@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #118784	; 0x1d000
   11468:	ldr	pc, [ip, #3068]!	; 0xbfc

0001146c <__fxstat64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #118784	; 0x1d000
   11474:	ldr	pc, [ip, #3060]!	; 0xbf4

00011478 <sigaction@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #118784	; 0x1d000
   11480:	ldr	pc, [ip, #3052]!	; 0xbec

00011484 <fwrite@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #118784	; 0x1d000
   1148c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011490 <lseek64@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #118784	; 0x1d000
   11498:	ldr	pc, [ip, #3036]!	; 0xbdc

0001149c <__ctype_get_mb_cur_max@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #118784	; 0x1d000
   114a4:	ldr	pc, [ip, #3028]!	; 0xbd4

000114a8 <__fpending@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #118784	; 0x1d000
   114b0:	ldr	pc, [ip, #3020]!	; 0xbcc

000114b4 <mbrtowc@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #118784	; 0x1d000
   114bc:	ldr	pc, [ip, #3012]!	; 0xbc4

000114c0 <error@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #118784	; 0x1d000
   114c8:	ldr	pc, [ip, #3004]!	; 0xbbc

000114cc <open64@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #118784	; 0x1d000
   114d4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114d8 <getenv@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #118784	; 0x1d000
   114e0:	ldr	pc, [ip, #2988]!	; 0xbac

000114e4 <malloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #118784	; 0x1d000
   114ec:	ldr	pc, [ip, #2980]!	; 0xba4

000114f0 <error_at_line@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #118784	; 0x1d000
   114f8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114fc <sigaddset@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #118784	; 0x1d000
   11504:	ldr	pc, [ip, #2964]!	; 0xb94

00011508 <__libc_start_main@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #118784	; 0x1d000
   11510:	ldr	pc, [ip, #2956]!	; 0xb8c

00011514 <__freading@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #118784	; 0x1d000
   1151c:	ldr	pc, [ip, #2948]!	; 0xb84

00011520 <__ctype_tolower_loc@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #118784	; 0x1d000
   11528:	ldr	pc, [ip, #2940]!	; 0xb7c

0001152c <__ctype_toupper_loc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #118784	; 0x1d000
   11534:	ldr	pc, [ip, #2932]!	; 0xb74

00011538 <__gmon_start__@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #118784	; 0x1d000
   11540:	ldr	pc, [ip, #2924]!	; 0xb6c

00011544 <getopt_long@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #118784	; 0x1d000
   1154c:	ldr	pc, [ip, #2916]!	; 0xb64

00011550 <__ctype_b_loc@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #118784	; 0x1d000
   11558:	ldr	pc, [ip, #2908]!	; 0xb5c

0001155c <exit@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #118784	; 0x1d000
   11564:	ldr	pc, [ip, #2900]!	; 0xb54

00011568 <bcmp@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #118784	; 0x1d000
   11570:	ldr	pc, [ip, #2892]!	; 0xb4c

00011574 <strlen@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #118784	; 0x1d000
   1157c:	ldr	pc, [ip, #2884]!	; 0xb44

00011580 <strchr@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #118784	; 0x1d000
   11588:	ldr	pc, [ip, #2876]!	; 0xb3c

0001158c <getpagesize@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #118784	; 0x1d000
   11594:	ldr	pc, [ip, #2868]!	; 0xb34

00011598 <__errno_location@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #118784	; 0x1d000
   115a0:	ldr	pc, [ip, #2860]!	; 0xb2c

000115a4 <__sprintf_chk@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #118784	; 0x1d000
   115ac:	ldr	pc, [ip, #2852]!	; 0xb24

000115b0 <__cxa_atexit@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #118784	; 0x1d000
   115b8:	ldr	pc, [ip, #2844]!	; 0xb1c

000115bc <__vasprintf_chk@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #118784	; 0x1d000
   115c4:	ldr	pc, [ip, #2836]!	; 0xb14

000115c8 <memset@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #118784	; 0x1d000
   115d0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115d4 <__printf_chk@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #118784	; 0x1d000
   115dc:	ldr	pc, [ip, #2820]!	; 0xb04

000115e0 <write@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #118784	; 0x1d000
   115e8:	ldr	pc, [ip, #2812]!	; 0xafc

000115ec <fileno@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #118784	; 0x1d000
   115f4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115f8 <__fprintf_chk@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #118784	; 0x1d000
   11600:	ldr	pc, [ip, #2796]!	; 0xaec

00011604 <fclose@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #118784	; 0x1d000
   1160c:	ldr	pc, [ip, #2788]!	; 0xae4

00011610 <fseeko64@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #118784	; 0x1d000
   11618:	ldr	pc, [ip, #2780]!	; 0xadc

0001161c <fcntl64@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #118784	; 0x1d000
   11624:	ldr	pc, [ip, #2772]!	; 0xad4

00011628 <__overflow@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #118784	; 0x1d000
   11630:	ldr	pc, [ip, #2764]!	; 0xacc

00011634 <setlocale@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #118784	; 0x1d000
   1163c:	ldr	pc, [ip, #2756]!	; 0xac4

00011640 <sigemptyset@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #118784	; 0x1d000
   11648:	ldr	pc, [ip, #2748]!	; 0xabc

0001164c <strrchr@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #118784	; 0x1d000
   11654:	ldr	pc, [ip, #2740]!	; 0xab4

00011658 <nl_langinfo@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #118784	; 0x1d000
   11660:	ldr	pc, [ip, #2732]!	; 0xaac

00011664 <localeconv@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #118784	; 0x1d000
   1166c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011670 <bindtextdomain@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #118784	; 0x1d000
   11678:	ldr	pc, [ip, #2716]!	; 0xa9c

0001167c <aligned_alloc@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #118784	; 0x1d000
   11684:	ldr	pc, [ip, #2708]!	; 0xa94

00011688 <strncmp@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #118784	; 0x1d000
   11690:	ldr	pc, [ip, #2700]!	; 0xa8c

00011694 <fdatasync@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #118784	; 0x1d000
   1169c:	ldr	pc, [ip, #2692]!	; 0xa84

000116a0 <abort@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #118784	; 0x1d000
   116a8:	ldr	pc, [ip, #2684]!	; 0xa7c

000116ac <close@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #118784	; 0x1d000
   116b4:	ldr	pc, [ip, #2676]!	; 0xa74

000116b8 <dcngettext@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #118784	; 0x1d000
   116c0:	ldr	pc, [ip, #2668]!	; 0xa6c

000116c4 <__snprintf_chk@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #118784	; 0x1d000
   116cc:	ldr	pc, [ip, #2660]!	; 0xa64

000116d0 <__assert_fail@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #118784	; 0x1d000
   116d8:	ldr	pc, [ip, #2652]!	; 0xa5c

Disassembly of section .text:

000116e0 <.text>:
   116e0:	mov	fp, #0
   116e4:	mov	lr, #0
   116e8:	pop	{r1}		; (ldr r1, [sp], #4)
   116ec:	mov	r2, sp
   116f0:	push	{r2}		; (str r2, [sp, #-4]!)
   116f4:	push	{r0}		; (str r0, [sp, #-4]!)
   116f8:	ldr	ip, [pc, #16]	; 11710 <__assert_fail@plt+0x40>
   116fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11700:	ldr	r0, [pc, #12]	; 11714 <__assert_fail@plt+0x44>
   11704:	ldr	r3, [pc, #12]	; 11718 <__assert_fail@plt+0x48>
   11708:	bl	11508 <__libc_start_main@plt>
   1170c:	bl	116a0 <abort@plt>
   11710:	ldrdeq	ip, [r1], -r0
   11714:	andeq	r1, r1, r0, asr #24
   11718:	andeq	ip, r1, r0, ror r8
   1171c:	ldr	r3, [pc, #20]	; 11738 <__assert_fail@plt+0x68>
   11720:	ldr	r2, [pc, #20]	; 1173c <__assert_fail@plt+0x6c>
   11724:	add	r3, pc, r3
   11728:	ldr	r2, [r3, r2]
   1172c:	cmp	r2, #0
   11730:	bxeq	lr
   11734:	b	11538 <__gmon_start__@plt>
   11738:	ldrdeq	sp, [r1], -r4
   1173c:	andeq	r0, r0, r8, lsr r1
   11740:	ldr	r0, [pc, #24]	; 11760 <__assert_fail@plt+0x90>
   11744:	ldr	r3, [pc, #24]	; 11764 <__assert_fail@plt+0x94>
   11748:	cmp	r3, r0
   1174c:	bxeq	lr
   11750:	ldr	r3, [pc, #16]	; 11768 <__assert_fail@plt+0x98>
   11754:	cmp	r3, #0
   11758:	bxeq	lr
   1175c:	bx	r3
   11760:			; <UNDEFINED> instruction: 0x0002f1b4
   11764:			; <UNDEFINED> instruction: 0x0002f1b4
   11768:	andeq	r0, r0, r0
   1176c:	ldr	r0, [pc, #36]	; 11798 <__assert_fail@plt+0xc8>
   11770:	ldr	r1, [pc, #36]	; 1179c <__assert_fail@plt+0xcc>
   11774:	sub	r1, r1, r0
   11778:	asr	r1, r1, #2
   1177c:	add	r1, r1, r1, lsr #31
   11780:	asrs	r1, r1, #1
   11784:	bxeq	lr
   11788:	ldr	r3, [pc, #16]	; 117a0 <__assert_fail@plt+0xd0>
   1178c:	cmp	r3, #0
   11790:	bxeq	lr
   11794:	bx	r3
   11798:			; <UNDEFINED> instruction: 0x0002f1b4
   1179c:			; <UNDEFINED> instruction: 0x0002f1b4
   117a0:	andeq	r0, r0, r0
   117a4:	push	{r4, lr}
   117a8:	ldr	r4, [pc, #24]	; 117c8 <__assert_fail@plt+0xf8>
   117ac:	ldrb	r3, [r4]
   117b0:	cmp	r3, #0
   117b4:	popne	{r4, pc}
   117b8:	bl	11740 <__assert_fail@plt+0x70>
   117bc:	mov	r3, #1
   117c0:	strb	r3, [r4]
   117c4:	pop	{r4, pc}
   117c8:	ldrdeq	pc, [r2], -ip
   117cc:	b	1176c <__assert_fail@plt+0x9c>
   117d0:	push	{fp, lr}
   117d4:	mov	fp, sp
   117d8:	sub	sp, sp, #56	; 0x38
   117dc:	mov	r4, r0
   117e0:	cmp	r0, #0
   117e4:	bne	11bf4 <__assert_fail@plt+0x524>
   117e8:	movw	r1, #51491	; 0xc923
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	movt	r1, #1
   117f8:	bl	11424 <dcgettext@plt>
   117fc:	mov	r1, r0
   11800:	movw	r0, #62532	; 0xf444
   11804:	movt	r0, #2
   11808:	ldr	r2, [r0]
   1180c:	mov	r0, #1
   11810:	mov	r3, r2
   11814:	bl	115d4 <__printf_chk@plt>
   11818:	movw	r1, #51532	; 0xc94c
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #1
   11828:	bl	11424 <dcgettext@plt>
   1182c:	movw	r7, #61908	; 0xf1d4
   11830:	movt	r7, #2
   11834:	ldr	r1, [r7]
   11838:	bl	11364 <fputs_unlocked@plt>
   1183c:	movw	r1, #51948	; 0xcaec
   11840:	mov	r0, #0
   11844:	mov	r2, #5
   11848:	movt	r1, #1
   1184c:	bl	11424 <dcgettext@plt>
   11850:	ldr	r1, [r7]
   11854:	bl	11364 <fputs_unlocked@plt>
   11858:	movw	r1, #52619	; 0xcd8b
   1185c:	mov	r0, #0
   11860:	mov	r2, #5
   11864:	movt	r1, #1
   11868:	bl	11424 <dcgettext@plt>
   1186c:	ldr	r1, [r7]
   11870:	bl	11364 <fputs_unlocked@plt>
   11874:	movw	r1, #52910	; 0xceae
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #1
   11884:	bl	11424 <dcgettext@plt>
   11888:	ldr	r1, [r7]
   1188c:	bl	11364 <fputs_unlocked@plt>
   11890:	movw	r1, #53486	; 0xd0ee
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #1
   118a0:	bl	11424 <dcgettext@plt>
   118a4:	ldr	r1, [r7]
   118a8:	bl	11364 <fputs_unlocked@plt>
   118ac:	movw	r1, #53773	; 0xd20d
   118b0:	mov	r0, #0
   118b4:	mov	r2, #5
   118b8:	movt	r1, #1
   118bc:	bl	11424 <dcgettext@plt>
   118c0:	ldr	r1, [r7]
   118c4:	bl	11364 <fputs_unlocked@plt>
   118c8:	movw	r1, #53879	; 0xd277
   118cc:	mov	r0, #0
   118d0:	mov	r2, #5
   118d4:	movt	r1, #1
   118d8:	bl	11424 <dcgettext@plt>
   118dc:	ldr	r1, [r7]
   118e0:	bl	11364 <fputs_unlocked@plt>
   118e4:	movw	r1, #53916	; 0xd29c
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #1
   118f4:	bl	11424 <dcgettext@plt>
   118f8:	ldr	r1, [r7]
   118fc:	bl	11364 <fputs_unlocked@plt>
   11900:	movw	r1, #53954	; 0xd2c2
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #1
   11910:	bl	11424 <dcgettext@plt>
   11914:	ldr	r1, [r7]
   11918:	bl	11364 <fputs_unlocked@plt>
   1191c:	movw	r1, #53997	; 0xd2ed
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	movt	r1, #1
   1192c:	bl	11424 <dcgettext@plt>
   11930:	ldr	r1, [r7]
   11934:	bl	11364 <fputs_unlocked@plt>
   11938:	movw	r1, #54042	; 0xd31a
   1193c:	mov	r0, #0
   11940:	mov	r2, #5
   11944:	movt	r1, #1
   11948:	bl	11424 <dcgettext@plt>
   1194c:	ldr	r1, [r7]
   11950:	bl	11364 <fputs_unlocked@plt>
   11954:	movw	r1, #54101	; 0xd355
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	movt	r1, #1
   11964:	bl	11424 <dcgettext@plt>
   11968:	ldr	r1, [r7]
   1196c:	bl	11364 <fputs_unlocked@plt>
   11970:	movw	r1, #54135	; 0xd377
   11974:	mov	r0, #0
   11978:	mov	r2, #5
   1197c:	movt	r1, #1
   11980:	bl	11424 <dcgettext@plt>
   11984:	ldr	r1, [r7]
   11988:	bl	11364 <fputs_unlocked@plt>
   1198c:	movw	r1, #54174	; 0xd39e
   11990:	mov	r0, #0
   11994:	mov	r2, #5
   11998:	movt	r1, #1
   1199c:	bl	11424 <dcgettext@plt>
   119a0:	ldr	r1, [r7]
   119a4:	bl	11364 <fputs_unlocked@plt>
   119a8:	movw	r1, #54231	; 0xd3d7
   119ac:	mov	r0, #0
   119b0:	mov	r2, #5
   119b4:	movt	r1, #1
   119b8:	bl	11424 <dcgettext@plt>
   119bc:	ldr	r1, [r7]
   119c0:	bl	11364 <fputs_unlocked@plt>
   119c4:	movw	r1, #54289	; 0xd411
   119c8:	mov	r0, #0
   119cc:	mov	r2, #5
   119d0:	movt	r1, #1
   119d4:	bl	11424 <dcgettext@plt>
   119d8:	ldr	r1, [r7]
   119dc:	bl	11364 <fputs_unlocked@plt>
   119e0:	movw	r1, #54325	; 0xd435
   119e4:	mov	r0, #0
   119e8:	mov	r2, #5
   119ec:	movt	r1, #1
   119f0:	bl	11424 <dcgettext@plt>
   119f4:	ldr	r1, [r7]
   119f8:	bl	11364 <fputs_unlocked@plt>
   119fc:	movw	r1, #54386	; 0xd472
   11a00:	mov	r0, #0
   11a04:	mov	r2, #5
   11a08:	movt	r1, #1
   11a0c:	bl	11424 <dcgettext@plt>
   11a10:	ldr	r1, [r7]
   11a14:	bl	11364 <fputs_unlocked@plt>
   11a18:	movw	r1, #54445	; 0xd4ad
   11a1c:	mov	r0, #0
   11a20:	mov	r2, #5
   11a24:	movt	r1, #1
   11a28:	bl	11424 <dcgettext@plt>
   11a2c:	ldr	r1, [r7]
   11a30:	bl	11364 <fputs_unlocked@plt>
   11a34:	movw	r1, #54504	; 0xd4e8
   11a38:	mov	r0, #0
   11a3c:	mov	r2, #5
   11a40:	movt	r1, #1
   11a44:	bl	11424 <dcgettext@plt>
   11a48:	movw	r2, #54640	; 0xd570
   11a4c:	mov	r1, r0
   11a50:	mov	r0, #1
   11a54:	movt	r2, #1
   11a58:	bl	115d4 <__printf_chk@plt>
   11a5c:	movw	r1, #54645	; 0xd575
   11a60:	mov	r0, #0
   11a64:	mov	r2, #5
   11a68:	movt	r1, #1
   11a6c:	bl	11424 <dcgettext@plt>
   11a70:	ldr	r1, [r7]
   11a74:	bl	11364 <fputs_unlocked@plt>
   11a78:	movw	r1, #54690	; 0xd5a2
   11a7c:	mov	r0, #0
   11a80:	mov	r2, #5
   11a84:	movt	r1, #1
   11a88:	bl	11424 <dcgettext@plt>
   11a8c:	ldr	r1, [r7]
   11a90:	bl	11364 <fputs_unlocked@plt>
   11a94:	movw	r0, #56648	; 0xdd48
   11a98:	mov	r2, #48	; 0x30
   11a9c:	mov	r6, sp
   11aa0:	movw	r5, #54744	; 0xd5d8
   11aa4:	movt	r0, #1
   11aa8:	movt	r5, #1
   11aac:	add	r1, r0, #32
   11ab0:	add	r3, r0, #16
   11ab4:	vld1.64	{d18-d19}, [r0], r2
   11ab8:	vld1.64	{d16-d17}, [r1]
   11abc:	vld1.64	{d20-d21}, [r3]
   11ac0:	vldr	d22, [r0]
   11ac4:	add	r1, r6, #32
   11ac8:	add	r0, r6, #16
   11acc:	vst1.64	{d16-d17}, [r1]
   11ad0:	movw	r1, #55035	; 0xd6fb
   11ad4:	vst1.64	{d20-d21}, [r0]
   11ad8:	mov	r0, r6
   11adc:	movt	r1, #1
   11ae0:	vst1.64	{d18-d19}, [r0], r2
   11ae4:	vstr	d22, [r0]
   11ae8:	mov	r0, r5
   11aec:	bl	11388 <strcmp@plt>
   11af0:	cmp	r0, #0
   11af4:	ldrne	r1, [r6, #8]!
   11af8:	cmpne	r1, #0
   11afc:	bne	11ae8 <__assert_fail@plt+0x418>
   11b00:	movw	r1, #55130	; 0xd75a
   11b04:	ldr	r6, [r6, #4]
   11b08:	mov	r0, #0
   11b0c:	mov	r2, #5
   11b10:	movt	r1, #1
   11b14:	bl	11424 <dcgettext@plt>
   11b18:	movw	r2, #55153	; 0xd771
   11b1c:	movw	r3, #55167	; 0xd77f
   11b20:	mov	r1, r0
   11b24:	mov	r0, #1
   11b28:	movt	r2, #1
   11b2c:	movt	r3, #1
   11b30:	bl	115d4 <__printf_chk@plt>
   11b34:	cmp	r6, #0
   11b38:	mov	r0, #5
   11b3c:	mov	r1, #0
   11b40:	moveq	r6, r5
   11b44:	bl	11634 <setlocale@plt>
   11b48:	cmp	r0, #0
   11b4c:	beq	11b84 <__assert_fail@plt+0x4b4>
   11b50:	movw	r1, #55207	; 0xd7a7
   11b54:	mov	r2, #3
   11b58:	movt	r1, #1
   11b5c:	bl	11688 <strncmp@plt>
   11b60:	cmp	r0, #0
   11b64:	beq	11b84 <__assert_fail@plt+0x4b4>
   11b68:	movw	r1, #55211	; 0xd7ab
   11b6c:	mov	r0, #0
   11b70:	mov	r2, #5
   11b74:	movt	r1, #1
   11b78:	bl	11424 <dcgettext@plt>
   11b7c:	ldr	r1, [r7]
   11b80:	bl	11364 <fputs_unlocked@plt>
   11b84:	movw	r1, #55282	; 0xd7f2
   11b88:	mov	r0, #0
   11b8c:	mov	r2, #5
   11b90:	movt	r1, #1
   11b94:	bl	11424 <dcgettext@plt>
   11b98:	movw	r2, #55167	; 0xd77f
   11b9c:	mov	r1, r0
   11ba0:	mov	r0, #1
   11ba4:	mov	r3, r5
   11ba8:	movt	r2, #1
   11bac:	bl	115d4 <__printf_chk@plt>
   11bb0:	movw	r1, #55309	; 0xd80d
   11bb4:	mov	r0, #0
   11bb8:	mov	r2, #5
   11bbc:	movt	r1, #1
   11bc0:	bl	11424 <dcgettext@plt>
   11bc4:	mov	r1, r0
   11bc8:	movw	r0, #55063	; 0xd717
   11bcc:	movw	r3, #52909	; 0xcead
   11bd0:	cmp	r6, r5
   11bd4:	mov	r2, r6
   11bd8:	movt	r0, #1
   11bdc:	movt	r3, #1
   11be0:	moveq	r3, r0
   11be4:	mov	r0, #1
   11be8:	bl	115d4 <__printf_chk@plt>
   11bec:	mov	r0, r4
   11bf0:	bl	1155c <exit@plt>
   11bf4:	movw	r0, #61904	; 0xf1d0
   11bf8:	movw	r1, #51452	; 0xc8fc
   11bfc:	mov	r2, #5
   11c00:	movt	r0, #2
   11c04:	movt	r1, #1
   11c08:	ldr	r5, [r0]
   11c0c:	mov	r0, #0
   11c10:	bl	11424 <dcgettext@plt>
   11c14:	mov	r2, r0
   11c18:	movw	r0, #62532	; 0xf444
   11c1c:	mov	r1, #1
   11c20:	movt	r0, #2
   11c24:	ldr	r3, [r0]
   11c28:	mov	r0, r5
   11c2c:	bl	115f8 <__fprintf_chk@plt>
   11c30:	mov	r0, r4
   11c34:	bl	1155c <exit@plt>
   11c38:	nop	{0}
   11c3c:	nop	{0}
   11c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c44:	add	fp, sp, #28
   11c48:	sub	sp, sp, #716	; 0x2cc
   11c4c:	mov	r8, r0
   11c50:	movw	r0, #55360	; 0xd840
   11c54:	mov	r6, r1
   11c58:	movt	r0, #1
   11c5c:	bl	114d8 <getenv@plt>
   11c60:	mov	r5, r0
   11c64:	movw	r0, #62176	; 0xf2e0
   11c68:	movt	r0, #2
   11c6c:	bl	11640 <sigemptyset@plt>
   11c70:	cmp	r5, #0
   11c74:	bne	11c88 <__assert_fail@plt+0x5b8>
   11c78:	movw	r0, #62176	; 0xf2e0
   11c7c:	mov	r1, #10
   11c80:	movt	r0, #2
   11c84:	bl	114fc <sigaddset@plt>
   11c88:	add	r2, sp, #56	; 0x38
   11c8c:	mov	r0, #2
   11c90:	mov	r1, #0
   11c94:	bl	11478 <sigaction@plt>
   11c98:	ldr	r0, [sp, #56]	; 0x38
   11c9c:	cmp	r0, #1
   11ca0:	beq	11cb4 <__assert_fail@plt+0x5e4>
   11ca4:	movw	r0, #62176	; 0xf2e0
   11ca8:	mov	r1, #2
   11cac:	movt	r0, #2
   11cb0:	bl	114fc <sigaddset@plt>
   11cb4:	movw	r5, #62176	; 0xf2e0
   11cb8:	add	r0, sp, #56	; 0x38
   11cbc:	mov	r2, #128	; 0x80
   11cc0:	movt	r5, #2
   11cc4:	add	r0, r0, #4
   11cc8:	mov	r1, r5
   11ccc:	bl	113f4 <memcpy@plt>
   11cd0:	mov	r0, r5
   11cd4:	mov	r1, #10
   11cd8:	bl	11448 <sigismember@plt>
   11cdc:	cmp	r0, #0
   11ce0:	beq	11d08 <__assert_fail@plt+0x638>
   11ce4:	mov	r0, #0
   11ce8:	add	r1, sp, #56	; 0x38
   11cec:	mov	r2, #0
   11cf0:	str	r0, [sp, #188]	; 0xbc
   11cf4:	movw	r0, #19912	; 0x4dc8
   11cf8:	movt	r0, #1
   11cfc:	str	r0, [sp, #56]	; 0x38
   11d00:	mov	r0, #10
   11d04:	bl	11478 <sigaction@plt>
   11d08:	movw	r0, #62176	; 0xf2e0
   11d0c:	mov	r1, #2
   11d10:	movt	r0, #2
   11d14:	bl	11448 <sigismember@plt>
   11d18:	cmp	r0, #0
   11d1c:	beq	11d44 <__assert_fail@plt+0x674>
   11d20:	mov	r0, #-1073741824	; 0xc0000000
   11d24:	add	r1, sp, #56	; 0x38
   11d28:	mov	r2, #0
   11d2c:	str	r0, [sp, #188]	; 0xbc
   11d30:	movw	r0, #19936	; 0x4de0
   11d34:	movt	r0, #1
   11d38:	str	r0, [sp, #56]	; 0x38
   11d3c:	mov	r0, #2
   11d40:	bl	11478 <sigaction@plt>
   11d44:	ldr	r0, [r6]
   11d48:	bl	17e84 <__assert_fail@plt+0x67b4>
   11d4c:	movw	r1, #52909	; 0xcead
   11d50:	mov	r0, #6
   11d54:	movt	r1, #1
   11d58:	bl	11634 <setlocale@plt>
   11d5c:	movw	r5, #55157	; 0xd775
   11d60:	movw	r1, #54747	; 0xd5db
   11d64:	movt	r5, #1
   11d68:	movt	r1, #1
   11d6c:	mov	r0, r5
   11d70:	bl	11670 <bindtextdomain@plt>
   11d74:	mov	r0, r5
   11d78:	bl	11454 <textdomain@plt>
   11d7c:	movw	r0, #18240	; 0x4740
   11d80:	movt	r0, #1
   11d84:	bl	1c8d4 <__assert_fail@plt+0xb204>
   11d88:	bl	1158c <getpagesize@plt>
   11d8c:	movw	sl, #62304	; 0xf360
   11d90:	movw	r2, #54782	; 0xd5fe
   11d94:	movw	r1, #54798	; 0xd60e
   11d98:	movw	r3, #54771	; 0xd5f3
   11d9c:	movw	r4, #6096	; 0x17d0
   11da0:	mov	r7, #1
   11da4:	mov	r9, #0
   11da8:	movt	sl, #2
   11dac:	movt	r2, #1
   11db0:	movt	r1, #1
   11db4:	movt	r3, #1
   11db8:	movt	r4, #1
   11dbc:	str	r0, [sl, #12]
   11dc0:	movw	r0, #61800	; 0xf168
   11dc4:	movt	r0, #2
   11dc8:	ldr	r0, [r0]
   11dcc:	stm	sp, {r0, r7}
   11dd0:	str	r2, [sp, #16]
   11dd4:	movw	r2, #54744	; 0xd5d8
   11dd8:	str	r3, [sp, #12]
   11ddc:	str	r1, [sp, #20]
   11de0:	mov	r0, r8
   11de4:	mov	r1, r6
   11de8:	mov	r3, r5
   11dec:	str	r4, [sp, #8]
   11df0:	str	r9, [sp, #24]
   11df4:	movt	r2, #1
   11df8:	bl	17dc0 <__assert_fail@plt+0x66f0>
   11dfc:	add	r0, pc, #892	; 0x37c
   11e00:	add	r1, pc, #904	; 0x388
   11e04:	add	r2, pc, #916	; 0x394
   11e08:	movw	r3, #61920	; 0xf1e0
   11e0c:	vld1.64	{d18-d19}, [r2 :128]
   11e10:	add	r2, pc, #920	; 0x398
   11e14:	vld1.64	{d16-d17}, [r0 :128]
   11e18:	movt	r3, #2
   11e1c:	vld1.64	{d2-d3}, [r1 :128]
   11e20:	vld1.64	{d20-d21}, [r2 :128]
   11e24:	add	r2, pc, #916	; 0x394
   11e28:	vld1.64	{d22-d23}, [r2 :128]
   11e2c:	add	r2, pc, #924	; 0x39c
   11e30:	add	r0, r3, #224	; 0xe0
   11e34:	vld1.64	{d24-d25}, [r2 :128]
   11e38:	add	r2, pc, #928	; 0x3a0
   11e3c:	vld1.64	{d26-d27}, [r2 :128]
   11e40:	add	r2, pc, #936	; 0x3a8
   11e44:	vld1.64	{d28-d29}, [r2 :128]
   11e48:	add	r2, pc, #944	; 0x3b0
   11e4c:	vld1.64	{d30-d31}, [r2 :128]
   11e50:	add	r2, pc, #952	; 0x3b8
   11e54:	vst1.64	{d16-d17}, [r0 :128]
   11e58:	add	r0, r3, #208	; 0xd0
   11e5c:	add	r1, pc, #956	; 0x3bc
   11e60:	vst1.64	{d18-d19}, [r0 :128]
   11e64:	add	r0, r3, #192	; 0xc0
   11e68:	vld1.64	{d16-d17}, [r1 :128]
   11e6c:	add	r1, pc, #956	; 0x3bc
   11e70:	vld1.64	{d0-d1}, [r2 :128]
   11e74:	vst1.64	{d20-d21}, [r0 :128]
   11e78:	add	r0, r3, #176	; 0xb0
   11e7c:	vld1.64	{d18-d19}, [r1 :128]
   11e80:	add	r1, pc, #952	; 0x3b8
   11e84:	vst1.64	{d22-d23}, [r0 :128]
   11e88:	add	r0, r3, #160	; 0xa0
   11e8c:	vld1.64	{d20-d21}, [r1 :128]
   11e90:	add	r1, pc, #952	; 0x3b8
   11e94:	vst1.64	{d24-d25}, [r0 :128]
   11e98:	add	r0, r3, #144	; 0x90
   11e9c:	vld1.64	{d22-d23}, [r1 :128]
   11ea0:	add	r1, pc, #952	; 0x3b8
   11ea4:	vst1.64	{d26-d27}, [r0 :128]
   11ea8:	add	r0, r3, #128	; 0x80
   11eac:	vld1.64	{d24-d25}, [r1 :128]
   11eb0:	add	r1, pc, #952	; 0x3b8
   11eb4:	strb	r7, [sl]
   11eb8:	str	r9, [sp, #56]	; 0x38
   11ebc:	vst1.64	{d28-d29}, [r0 :128]
   11ec0:	add	r0, r3, #112	; 0x70
   11ec4:	vld1.64	{d26-d27}, [r1 :128]
   11ec8:	mov	r1, r3
   11ecc:	vst1.64	{d30-d31}, [r0 :128]
   11ed0:	add	r0, r3, #96	; 0x60
   11ed4:	vst1.64	{d0-d1}, [r0 :128]
   11ed8:	add	r0, r3, #80	; 0x50
   11edc:	vst1.64	{d2-d3}, [r0 :128]
   11ee0:	add	r0, r3, #64	; 0x40
   11ee4:	vst1.64	{d16-d17}, [r0 :128]
   11ee8:	add	r0, r3, #48	; 0x30
   11eec:	vst1.64	{d18-d19}, [r0 :128]
   11ef0:	add	r0, r3, #32
   11ef4:	vst1.64	{d20-d21}, [r0 :128]
   11ef8:	add	r0, r3, #16
   11efc:	vst1.64	{d22-d23}, [r0 :128]
   11f00:	mov	r0, #240	; 0xf0
   11f04:	vst1.8	{d24-d25}, [r1 :128], r0
   11f08:	mov	r0, #0
   11f0c:	str	r0, [sp, #40]	; 0x28
   11f10:	movw	r0, #61896	; 0xf1c8
   11f14:	vst1.64	{d26-d27}, [r1 :128]
   11f18:	movt	r0, #2
   11f1c:	ldr	r0, [r0]
   11f20:	cmp	r0, r8
   11f24:	bge	125f4 <__assert_fail@plt+0xf24>
   11f28:	add	r5, r6, r0, lsl #2
   11f2c:	sub	r4, r8, r0
   11f30:	mvn	r0, #-2147483648	; 0x80000000
   11f34:	str	r0, [sp, #44]	; 0x2c
   11f38:	mvn	r0, #0
   11f3c:	str	r0, [sp, #48]	; 0x30
   11f40:	mov	r0, #0
   11f44:	str	r0, [sp, #40]	; 0x28
   11f48:	mov	r0, #0
   11f4c:	str	r0, [sp, #36]	; 0x24
   11f50:	mov	r0, #0
   11f54:	str	r0, [sp, #32]
   11f58:	mov	r0, #0
   11f5c:	str	r0, [sp, #28]
   11f60:	ldr	r8, [r5]
   11f64:	mov	r1, #61	; 0x3d
   11f68:	mov	r0, r8
   11f6c:	bl	11580 <strchr@plt>
   11f70:	cmp	r0, #0
   11f74:	beq	126c8 <__assert_fail@plt+0xff8>
   11f78:	ldrb	r1, [r8]
   11f7c:	add	r9, r0, #1
   11f80:	cmp	r1, #105	; 0x69
   11f84:	bne	11fb8 <__assert_fail@plt+0x8e8>
   11f88:	ldrb	r0, [r8, #1]
   11f8c:	cmp	r0, #102	; 0x66
   11f90:	bne	11fb8 <__assert_fail@plt+0x8e8>
   11f94:	ldrb	r0, [r8, #2]
   11f98:	cmp	r0, #0
   11f9c:	cmpne	r0, #61	; 0x3d
   11fa0:	bne	11fb8 <__assert_fail@plt+0x8e8>
   11fa4:	str	r9, [sl, #16]
   11fa8:	add	r5, r5, #4
   11fac:	subs	r4, r4, #1
   11fb0:	bne	11f60 <__assert_fail@plt+0x890>
   11fb4:	b	13d38 <__assert_fail@plt+0x2668>
   11fb8:	ldrb	r0, [r8]
   11fbc:	cmp	r0, #111	; 0x6f
   11fc0:	bne	11ff4 <__assert_fail@plt+0x924>
   11fc4:	ldrb	r0, [r8, #1]
   11fc8:	cmp	r0, #102	; 0x66
   11fcc:	bne	11ff4 <__assert_fail@plt+0x924>
   11fd0:	ldrb	r0, [r8, #2]
   11fd4:	cmp	r0, #0
   11fd8:	cmpne	r0, #61	; 0x3d
   11fdc:	bne	11ff4 <__assert_fail@plt+0x924>
   11fe0:	str	r9, [sl, #28]
   11fe4:	add	r5, r5, #4
   11fe8:	subs	r4, r4, #1
   11fec:	bne	11f60 <__assert_fail@plt+0x890>
   11ff0:	b	13d38 <__assert_fail@plt+0x2668>
   11ff4:	ldrb	r0, [r8]
   11ff8:	cmp	r0, #99	; 0x63
   11ffc:	bne	1206c <__assert_fail@plt+0x99c>
   12000:	ldrb	r0, [r8, #1]
   12004:	cmp	r0, #111	; 0x6f
   12008:	bne	1206c <__assert_fail@plt+0x99c>
   1200c:	ldrb	r0, [r8, #2]
   12010:	cmp	r0, #110	; 0x6e
   12014:	bne	1206c <__assert_fail@plt+0x99c>
   12018:	ldrb	r0, [r8, #3]
   1201c:	cmp	r0, #118	; 0x76
   12020:	bne	1206c <__assert_fail@plt+0x99c>
   12024:	ldrb	r0, [r8, #4]
   12028:	cmp	r0, #0
   1202c:	cmpne	r0, #61	; 0x3d
   12030:	bne	1206c <__assert_fail@plt+0x99c>
   12034:	movw	r1, #56704	; 0xdd80
   12038:	movw	r3, #55400	; 0xd868
   1203c:	mov	r0, r9
   12040:	mov	r2, #0
   12044:	movt	r1, #1
   12048:	movt	r3, #1
   1204c:	bl	14df0 <__assert_fail@plt+0x3720>
   12050:	ldr	r1, [sl, #36]	; 0x24
   12054:	orr	r0, r1, r0
   12058:	str	r0, [sl, #36]	; 0x24
   1205c:	add	r5, r5, #4
   12060:	subs	r4, r4, #1
   12064:	bne	11f60 <__assert_fail@plt+0x890>
   12068:	b	13d38 <__assert_fail@plt+0x2668>
   1206c:	ldrb	r0, [r8]
   12070:	cmp	r0, #105	; 0x69
   12074:	bne	120f0 <__assert_fail@plt+0xa20>
   12078:	ldrb	r0, [r8, #1]
   1207c:	cmp	r0, #102	; 0x66
   12080:	bne	120f0 <__assert_fail@plt+0xa20>
   12084:	ldrb	r0, [r8, #2]
   12088:	cmp	r0, #108	; 0x6c
   1208c:	bne	120f0 <__assert_fail@plt+0xa20>
   12090:	ldrb	r0, [r8, #3]
   12094:	cmp	r0, #97	; 0x61
   12098:	bne	120f0 <__assert_fail@plt+0xa20>
   1209c:	ldrb	r0, [r8, #4]
   120a0:	cmp	r0, #103	; 0x67
   120a4:	bne	120f0 <__assert_fail@plt+0xa20>
   120a8:	ldrb	r0, [r8, #5]
   120ac:	cmp	r0, #0
   120b0:	cmpne	r0, #61	; 0x3d
   120b4:	bne	120f0 <__assert_fail@plt+0xa20>
   120b8:	movw	r1, #56976	; 0xde90
   120bc:	movw	r3, #55419	; 0xd87b
   120c0:	mov	r0, r9
   120c4:	mov	r2, #0
   120c8:	movt	r1, #1
   120cc:	movt	r3, #1
   120d0:	bl	14df0 <__assert_fail@plt+0x3720>
   120d4:	ldr	r1, [sl, #20]
   120d8:	orr	r0, r1, r0
   120dc:	str	r0, [sl, #20]
   120e0:	add	r5, r5, #4
   120e4:	subs	r4, r4, #1
   120e8:	bne	11f60 <__assert_fail@plt+0x890>
   120ec:	b	13d38 <__assert_fail@plt+0x2668>
   120f0:	ldrb	r0, [r8]
   120f4:	cmp	r0, #111	; 0x6f
   120f8:	bne	12280 <__assert_fail@plt+0xbb0>
   120fc:	ldrb	r0, [r8, #1]
   12100:	cmp	r0, #102	; 0x66
   12104:	bne	12280 <__assert_fail@plt+0xbb0>
   12108:	ldrb	r0, [r8, #2]
   1210c:	cmp	r0, #108	; 0x6c
   12110:	bne	12280 <__assert_fail@plt+0xbb0>
   12114:	ldrb	r0, [r8, #3]
   12118:	cmp	r0, #97	; 0x61
   1211c:	bne	12280 <__assert_fail@plt+0xbb0>
   12120:	ldrb	r0, [r8, #4]
   12124:	cmp	r0, #103	; 0x67
   12128:	bne	12280 <__assert_fail@plt+0xbb0>
   1212c:	ldrb	r0, [r8, #5]
   12130:	cmp	r0, #0
   12134:	cmpne	r0, #61	; 0x3d
   12138:	bne	12280 <__assert_fail@plt+0xbb0>
   1213c:	movw	r1, #56976	; 0xde90
   12140:	movw	r3, #55438	; 0xd88e
   12144:	mov	r0, r9
   12148:	mov	r2, #0
   1214c:	movt	r1, #1
   12150:	movt	r3, #1
   12154:	bl	14df0 <__assert_fail@plt+0x3720>
   12158:	ldr	r1, [sl, #32]
   1215c:	orr	r0, r1, r0
   12160:	str	r0, [sl, #32]
   12164:	add	r5, r5, #4
   12168:	subs	r4, r4, #1
   1216c:	bne	11f60 <__assert_fail@plt+0x890>
   12170:	b	13d38 <__assert_fail@plt+0x2668>
   12174:	nop	{0}
   12178:	nop	{0}
   1217c:	nop	{0}
   12180:	mvn	lr, #224, 2	; 0x38
   12184:	strb	lr, [r6, r4, ror #11]!
   12188:	bl	ffacc930 <opterr@@GLIBC_2.4+0xffa9d758>
   1218c:	svc	0x00eeedec
   12190:	cmppl	r2, #80, 2
   12194:			; <UNDEFINED> instruction: 0x57565554
   12198:	blpl	16a8700 <opterr@@GLIBC_2.4+0x1679528>
   1219c:	svcpl	0x005e5d5c
   121a0:	bicsle	sp, r2, #208, 2	; 0x34
   121a4:			; <UNDEFINED> instruction: 0xd7d6d5d4
   121a8:	blle	ff6c8910 <opterr@@GLIBC_2.4+0xff699738>
   121ac:	svcle	0x00dedddc
   121b0:	bicgt	ip, r2, #192, 2	; 0x30
   121b4:	strbgt	ip, [r6, r4, asr #11]
   121b8:	blgt	ff2c48e0 <opterr@@GLIBC_2.4+0xff295708>
   121bc:	svcgt	0x00cecdcc
   121c0:			; <UNDEFINED> instruction: 0xb3b2b1b0
   121c4:			; <UNDEFINED> instruction: 0xb7b6b5b4
   121c8:	bllt	feec08b0 <opterr@@GLIBC_2.4+0xfee916d8>
   121cc:	svclt	0x00bebdbc
   121d0:			; <UNDEFINED> instruction: 0xa3a2a1a0
   121d4:	strge	sl, [r6, r4, lsr #11]!
   121d8:	blge	feabc880 <opterr@@GLIBC_2.4+0xfea8d6a8>
   121dc:	svcge	0x00aeadac
   121e0:	orrsls	r9, r2, #144, 2	; 0x24
   121e4:			; <UNDEFINED> instruction: 0x97969594
   121e8:	blls	fe6b8850 <opterr@@GLIBC_2.4+0xfe689678>
   121ec:	svcls	0x009e9d9c
   121f0:	orrhi	r8, r2, #128, 2
   121f4:	strhi	r8, [r6, r4, lsl #11]
   121f8:	blhi	fe2b4820 <opterr@@GLIBC_2.4+0xfe285648>
   121fc:	svchi	0x008e8d8c
   12200:	cmnvc	r2, #112, 2
   12204:			; <UNDEFINED> instruction: 0x77767574
   12208:	blvc	1eb07f0 <opterr@@GLIBC_2.4+0x1e81618>
   1220c:	svcvc	0x007e7d7c
   12210:	cmnvs	r2, #96, 2
   12214:	strbvs	r6, [r6, -r4, ror #10]!
   12218:	blvs	1aac7c0 <opterr@@GLIBC_2.4+0x1a7d5e8>
   1221c:	svcvs	0x006e6d6c
   12220:	movtmi	r4, #8512	; 0x2140
   12224:	strbmi	r4, [r6, -r4, asr #10]
   12228:	blmi	12a4750 <opterr@@GLIBC_2.4+0x1275578>
   1222c:	svcmi	0x004e4d4c
   12230:	teqcc	r2, #48, 2
   12234:			; <UNDEFINED> instruction: 0x37363534
   12238:	blcc	ea0720 <opterr@@GLIBC_2.4+0xe71548>
   1223c:	svccc	0x003e3d3c
   12240:			; <UNDEFINED> instruction: 0x23222120
   12244:	strcs	r2, [r6, -r4, lsr #10]!
   12248:	blcs	a9c6f0 <opterr@@GLIBC_2.4+0xa6d518>
   1224c:	svccs	0x002e2d2c
   12250:	tstne	r2, #16, 2
   12254:			; <UNDEFINED> instruction: 0x17161514
   12258:	blne	6986c0 <opterr@@GLIBC_2.4+0x6694e8>
   1225c:	svcne	0x001e1d1c
   12260:	movweq	r0, #8448	; 0x2100
   12264:	streq	r0, [r6, -r4, lsl #10]
   12268:	bleq	294690 <opterr@@GLIBC_2.4+0x2654b8>
   1226c:	svceq	0x000e0d0c
   12270:	vsra.u64	<illegal reg q15.5>, q8, #14
   12274:			; <UNDEFINED> instruction: 0xf7f6f5f4
   12278:	blx	ffed0a62 <opterr@@GLIBC_2.4+0xffea188a>
   1227c:			; <UNDEFINED> instruction: 0xfffefdfc
   12280:	ldrb	r0, [r8]
   12284:	cmp	r0, #115	; 0x73
   12288:	bne	12310 <__assert_fail@plt+0xc40>
   1228c:	ldrb	r0, [r8, #1]
   12290:	cmp	r0, #116	; 0x74
   12294:	bne	12310 <__assert_fail@plt+0xc40>
   12298:	ldrb	r0, [r8, #2]
   1229c:	cmp	r0, #97	; 0x61
   122a0:	bne	12310 <__assert_fail@plt+0xc40>
   122a4:	ldrb	r0, [r8, #3]
   122a8:	cmp	r0, #116	; 0x74
   122ac:	bne	12310 <__assert_fail@plt+0xc40>
   122b0:	ldrb	r0, [r8, #4]
   122b4:	cmp	r0, #117	; 0x75
   122b8:	bne	12310 <__assert_fail@plt+0xc40>
   122bc:	ldrb	r0, [r8, #5]
   122c0:	cmp	r0, #115	; 0x73
   122c4:	bne	12310 <__assert_fail@plt+0xc40>
   122c8:	ldrb	r0, [r8, #6]
   122cc:	cmp	r0, #0
   122d0:	cmpne	r0, #61	; 0x3d
   122d4:	bne	12310 <__assert_fail@plt+0xc40>
   122d8:	movw	r1, #57280	; 0xdfc0
   122dc:	movw	r3, #55458	; 0xd8a2
   122e0:	mov	r0, r9
   122e4:	mov	r2, #1
   122e8:	movt	r1, #1
   122ec:	movt	r3, #1
   122f0:	bl	14df0 <__assert_fail@plt+0x3720>
   122f4:	movw	r1, #61768	; 0xf148
   122f8:	movt	r1, #2
   122fc:	str	r0, [r1]
   12300:	add	r5, r5, #4
   12304:	subs	r4, r4, #1
   12308:	bne	11f60 <__assert_fail@plt+0x890>
   1230c:	b	13d38 <__assert_fail@plt+0x2668>
   12310:	mov	r0, #0
   12314:	add	r1, sp, #52	; 0x34
   12318:	str	r0, [sp, #52]	; 0x34
   1231c:	mov	r0, r9
   12320:	bl	14f68 <__assert_fail@plt+0x3898>
   12324:	ldrb	r2, [r8]
   12328:	cmp	r2, #105	; 0x69
   1232c:	bne	1236c <__assert_fail@plt+0xc9c>
   12330:	ldrb	r2, [r8, #1]
   12334:	cmp	r2, #98	; 0x62
   12338:	bne	1236c <__assert_fail@plt+0xc9c>
   1233c:	ldrb	r2, [r8, #2]
   12340:	cmp	r2, #115	; 0x73
   12344:	bne	1236c <__assert_fail@plt+0xc9c>
   12348:	ldrb	r2, [r8, #3]
   1234c:	add	r6, sl, #56	; 0x38
   12350:	mov	r7, #0
   12354:	mvn	ip, #-2147483647	; 0x80000001
   12358:	mov	r3, #1
   1235c:	cmp	r2, #0
   12360:	beq	12478 <__assert_fail@plt+0xda8>
   12364:	cmp	r2, #61	; 0x3d
   12368:	beq	12478 <__assert_fail@plt+0xda8>
   1236c:	ldrb	r2, [r8]
   12370:	cmp	r2, #111	; 0x6f
   12374:	bne	123b4 <__assert_fail@plt+0xce4>
   12378:	ldrb	r2, [r8, #1]
   1237c:	cmp	r2, #98	; 0x62
   12380:	bne	123b4 <__assert_fail@plt+0xce4>
   12384:	ldrb	r2, [r8, #2]
   12388:	cmp	r2, #115	; 0x73
   1238c:	bne	123b4 <__assert_fail@plt+0xce4>
   12390:	ldrb	r2, [r8, #3]
   12394:	add	r6, sl, #40	; 0x28
   12398:	mov	r7, #0
   1239c:	mvn	ip, #-2147483647	; 0x80000001
   123a0:	mov	r3, #1
   123a4:	cmp	r2, #0
   123a8:	beq	12478 <__assert_fail@plt+0xda8>
   123ac:	cmp	r2, #61	; 0x3d
   123b0:	beq	12478 <__assert_fail@plt+0xda8>
   123b4:	ldrb	r2, [r8]
   123b8:	cmp	r2, #98	; 0x62
   123bc:	bne	12430 <__assert_fail@plt+0xd60>
   123c0:	ldrb	r2, [r8, #1]
   123c4:	cmp	r2, #115	; 0x73
   123c8:	bne	12430 <__assert_fail@plt+0xd60>
   123cc:	ldrb	r2, [r8, #2]
   123d0:	mov	r7, #0
   123d4:	mvn	ip, #-2147483647	; 0x80000001
   123d8:	mov	r3, #1
   123dc:	cmp	r2, #0
   123e0:	beq	123ec <__assert_fail@plt+0xd1c>
   123e4:	cmp	r2, #61	; 0x3d
   123e8:	bne	12430 <__assert_fail@plt+0xd60>
   123ec:	mov	r2, #0
   123f0:	add	r6, sp, #56	; 0x38
   123f4:	subs	r3, r0, r3
   123f8:	sbcs	r3, r1, r7
   123fc:	blt	125e8 <__assert_fail@plt+0xf18>
   12400:	subs	r3, ip, r0
   12404:	sbcs	r1, r2, r1
   12408:	blt	14568 <__assert_fail@plt+0x2e98>
   1240c:	ldr	r1, [sp, #52]	; 0x34
   12410:	cmp	r1, #0
   12414:	bne	14574 <__assert_fail@plt+0x2ea4>
   12418:	cmp	r6, #0
   1241c:	strne	r0, [r6]
   12420:	add	r5, r5, #4
   12424:	subs	r4, r4, #1
   12428:	bne	11f60 <__assert_fail@plt+0x890>
   1242c:	b	13d38 <__assert_fail@plt+0x2668>
   12430:	ldrb	r2, [r8]
   12434:	cmp	r2, #99	; 0x63
   12438:	bne	1248c <__assert_fail@plt+0xdbc>
   1243c:	ldrb	r2, [r8, #1]
   12440:	cmp	r2, #98	; 0x62
   12444:	bne	1248c <__assert_fail@plt+0xdbc>
   12448:	ldrb	r2, [r8, #2]
   1244c:	cmp	r2, #115	; 0x73
   12450:	bne	1248c <__assert_fail@plt+0xdbc>
   12454:	ldrb	r2, [r8, #3]
   12458:	add	r6, sl, #60	; 0x3c
   1245c:	mov	r7, #0
   12460:	mvn	ip, #-2147483648	; 0x80000000
   12464:	mov	r3, #1
   12468:	cmp	r2, #0
   1246c:	beq	12478 <__assert_fail@plt+0xda8>
   12470:	cmp	r2, #61	; 0x3d
   12474:	bne	1248c <__assert_fail@plt+0xdbc>
   12478:	mov	r2, #0
   1247c:	subs	r3, r0, r3
   12480:	sbcs	r3, r1, r7
   12484:	bge	12400 <__assert_fail@plt+0xd30>
   12488:	b	125e8 <__assert_fail@plt+0xf18>
   1248c:	ldrb	r2, [r8]
   12490:	cmp	r2, #115	; 0x73
   12494:	bne	124e8 <__assert_fail@plt+0xe18>
   12498:	ldrb	r2, [r8, #1]
   1249c:	cmp	r2, #107	; 0x6b
   124a0:	bne	124e8 <__assert_fail@plt+0xe18>
   124a4:	ldrb	r2, [r8, #2]
   124a8:	cmp	r2, #105	; 0x69
   124ac:	bne	124e8 <__assert_fail@plt+0xe18>
   124b0:	ldrb	r2, [r8, #3]
   124b4:	cmp	r2, #112	; 0x70
   124b8:	bne	124e8 <__assert_fail@plt+0xe18>
   124bc:	ldrb	r7, [r8, #4]
   124c0:	mvn	r2, #-2147483648	; 0x80000000
   124c4:	mvn	ip, #0
   124c8:	mov	r3, #0
   124cc:	cmp	r7, #0
   124d0:	beq	124dc <__assert_fail@plt+0xe0c>
   124d4:	cmp	r7, #61	; 0x3d
   124d8:	bne	124e8 <__assert_fail@plt+0xe18>
   124dc:	str	r0, [sp, #40]	; 0x28
   124e0:	str	r1, [sp, #36]	; 0x24
   124e4:	b	12540 <__assert_fail@plt+0xe70>
   124e8:	ldrb	r2, [r8]
   124ec:	cmp	r2, #115	; 0x73
   124f0:	bne	12558 <__assert_fail@plt+0xe88>
   124f4:	ldrb	r2, [r8, #1]
   124f8:	cmp	r2, #101	; 0x65
   124fc:	bne	12558 <__assert_fail@plt+0xe88>
   12500:	ldrb	r2, [r8, #2]
   12504:	cmp	r2, #101	; 0x65
   12508:	bne	12558 <__assert_fail@plt+0xe88>
   1250c:	ldrb	r2, [r8, #3]
   12510:	cmp	r2, #107	; 0x6b
   12514:	bne	12558 <__assert_fail@plt+0xe88>
   12518:	ldrb	r7, [r8, #4]
   1251c:	mvn	r2, #-2147483648	; 0x80000000
   12520:	mvn	ip, #0
   12524:	mov	r3, #0
   12528:	cmp	r7, #0
   1252c:	beq	12538 <__assert_fail@plt+0xe68>
   12530:	cmp	r7, #61	; 0x3d
   12534:	bne	12558 <__assert_fail@plt+0xe88>
   12538:	str	r0, [sp, #32]
   1253c:	str	r1, [sp, #28]
   12540:	mov	r7, #0
   12544:	mov	r6, #0
   12548:	subs	r3, r0, r3
   1254c:	sbcs	r3, r1, r7
   12550:	bge	12400 <__assert_fail@plt+0xd30>
   12554:	b	125e8 <__assert_fail@plt+0xf18>
   12558:	ldrb	r2, [r8]
   1255c:	cmp	r2, #99	; 0x63
   12560:	bne	126c8 <__assert_fail@plt+0xff8>
   12564:	ldrb	r2, [r8, #1]
   12568:	cmp	r2, #111	; 0x6f
   1256c:	ldrbeq	r2, [r8, #2]
   12570:	cmpeq	r2, #117	; 0x75
   12574:	bne	126c8 <__assert_fail@plt+0xff8>
   12578:	ldrb	r2, [r8, #3]
   1257c:	cmp	r2, #110	; 0x6e
   12580:	ldrbeq	r2, [r8, #4]
   12584:	cmpeq	r2, #116	; 0x74
   12588:	bne	126c8 <__assert_fail@plt+0xff8>
   1258c:	ldrb	r7, [r8, #5]
   12590:	mvn	r2, #-2147483648	; 0x80000000
   12594:	mvn	ip, #0
   12598:	mov	r3, #0
   1259c:	cmp	r7, #0
   125a0:	beq	125cc <__assert_fail@plt+0xefc>
   125a4:	cmp	r7, #61	; 0x3d
   125a8:	mov	r7, #0
   125ac:	mov	r6, #0
   125b0:	str	r0, [sp, #48]	; 0x30
   125b4:	str	r1, [sp, #44]	; 0x2c
   125b8:	bne	126c8 <__assert_fail@plt+0xff8>
   125bc:	subs	r3, r0, r3
   125c0:	sbcs	r3, r1, r7
   125c4:	bge	12400 <__assert_fail@plt+0xd30>
   125c8:	b	125e8 <__assert_fail@plt+0xf18>
   125cc:	mov	r7, #0
   125d0:	mov	r6, #0
   125d4:	str	r0, [sp, #48]	; 0x30
   125d8:	str	r1, [sp, #44]	; 0x2c
   125dc:	subs	r3, r0, r3
   125e0:	sbcs	r3, r1, r7
   125e4:	bge	12400 <__assert_fail@plt+0xd30>
   125e8:	mov	r0, #4
   125ec:	str	r0, [sp, #52]	; 0x34
   125f0:	b	14584 <__assert_fail@plt+0x2eb4>
   125f4:	mvn	r0, #-2147483648	; 0x80000000
   125f8:	str	r0, [sp, #44]	; 0x2c
   125fc:	mvn	r0, #0
   12600:	str	r0, [sp, #48]	; 0x30
   12604:	mov	r0, #0
   12608:	str	r0, [sp, #36]	; 0x24
   1260c:	mov	r0, #0
   12610:	str	r0, [sp, #32]
   12614:	mov	r0, #0
   12618:	str	r0, [sp, #28]
   1261c:	ldr	r5, [sl, #56]	; 0x38
   12620:	ldr	r0, [sl, #36]	; 0x24
   12624:	cmp	r5, #0
   12628:	orr	r0, r0, #2048	; 0x800
   1262c:	moveq	r5, #512	; 0x200
   12630:	str	r0, [sl, #36]	; 0x24
   12634:	streq	r5, [sl, #56]	; 0x38
   12638:	ldr	r4, [sl, #40]	; 0x28
   1263c:	cmp	r4, #0
   12640:	moveq	r4, #512	; 0x200
   12644:	streq	r4, [sl, #40]	; 0x28
   12648:	ldr	r0, [sl, #60]	; 0x3c
   1264c:	cmp	r0, #0
   12650:	bne	12660 <__assert_fail@plt+0xf90>
   12654:	ldr	r0, [sl, #36]	; 0x24
   12658:	bic	r0, r0, #24
   1265c:	str	r0, [sl, #36]	; 0x24
   12660:	ldr	r6, [sl, #20]
   12664:	movw	r0, #4096	; 0x1000
   12668:	movt	r0, #16
   1266c:	tst	r6, r0
   12670:	orrne	r6, r6, r0
   12674:	strne	r6, [sl, #20]
   12678:	ldr	r8, [sl, #32]
   1267c:	tst	r8, #1
   12680:	bne	145c4 <__assert_fail@plt+0x2ef4>
   12684:	tst	r6, #16
   12688:	bne	145e8 <__assert_fail@plt+0x2f18>
   1268c:	tst	r8, #12
   12690:	bne	1460c <__assert_fail@plt+0x2f3c>
   12694:	ldr	r0, [sp, #40]	; 0x28
   12698:	ldr	r1, [sp, #36]	; 0x24
   1269c:	orrs	r0, r0, r1
   126a0:	andsne	r1, r6, #8
   126a4:	bne	12704 <__assert_fail@plt+0x1034>
   126a8:	cmp	r0, #0
   126ac:	beq	12730 <__assert_fail@plt+0x1060>
   126b0:	ldr	r0, [sp, #40]	; 0x28
   126b4:	ldr	r1, [sp, #36]	; 0x24
   126b8:	movw	r2, #62424	; 0xf3d8
   126bc:	movt	r2, #2
   126c0:	strd	r0, [r2, #24]
   126c4:	b	12730 <__assert_fail@plt+0x1060>
   126c8:	movw	r1, #55376	; 0xd850
   126cc:	mov	r0, #0
   126d0:	mov	r2, #5
   126d4:	movt	r1, #1
   126d8:	bl	11424 <dcgettext@plt>
   126dc:	mov	r4, r0
   126e0:	mov	r0, r8
   126e4:	bl	19e48 <__assert_fail@plt+0x8778>
   126e8:	mov	r3, r0
   126ec:	mov	r0, #0
   126f0:	mov	r1, #0
   126f4:	mov	r2, r4
   126f8:	bl	14890 <__assert_fail@plt+0x31c0>
   126fc:	mov	r0, #1
   12700:	bl	117d0 <__assert_fail@plt+0x100>
   12704:	ldr	r7, [sp, #40]	; 0x28
   12708:	ldr	r1, [sp, #36]	; 0x24
   1270c:	asr	r3, r5, #31
   12710:	mov	r2, r5
   12714:	mov	r0, r7
   12718:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   1271c:	movw	r2, #62424	; 0xf3d8
   12720:	movt	r2, #2
   12724:	strd	r0, [r2, #24]
   12728:	mls	r0, r0, r5, r7
   1272c:	str	r0, [sl, #64]	; 0x40
   12730:	ldr	r1, [sp, #44]	; 0x2c
   12734:	mvn	r0, #-2147483648	; 0x80000000
   12738:	eor	r0, r1, r0
   1273c:	ldr	r1, [sp, #48]	; 0x30
   12740:	mvn	r1, r1
   12744:	orrs	r0, r1, r0
   12748:	andsne	r1, r6, #4
   1274c:	bne	12774 <__assert_fail@plt+0x10a4>
   12750:	cmp	r0, #0
   12754:	beq	127a0 <__assert_fail@plt+0x10d0>
   12758:	ldr	r1, [sp, #48]	; 0x30
   1275c:	ldr	r2, [sp, #44]	; 0x2c
   12760:	movw	r0, #61768	; 0xf148
   12764:	movt	r0, #2
   12768:	str	r1, [r0, #8]
   1276c:	str	r2, [r0, #12]
   12770:	b	127a0 <__assert_fail@plt+0x10d0>
   12774:	ldr	r7, [sp, #48]	; 0x30
   12778:	ldr	r1, [sp, #44]	; 0x2c
   1277c:	asr	r3, r5, #31
   12780:	mov	r2, r5
   12784:	mov	r0, r7
   12788:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   1278c:	movw	r2, #61768	; 0xf148
   12790:	movt	r2, #2
   12794:	strd	r0, [r2, #8]
   12798:	mls	r0, r0, r5, r7
   1279c:	str	r0, [sl, #44]	; 0x2c
   127a0:	ldr	r0, [sp, #32]
   127a4:	ldr	r1, [sp, #28]
   127a8:	orrs	r0, r0, r1
   127ac:	andsne	r1, r8, #16
   127b0:	bne	127cc <__assert_fail@plt+0x10fc>
   127b4:	cmp	r0, #0
   127b8:	beq	12810 <__assert_fail@plt+0x1140>
   127bc:	ldr	r0, [sp, #32]
   127c0:	ldr	r1, [sp, #28]
   127c4:	strd	r0, [sl, #112]	; 0x70
   127c8:	b	12810 <__assert_fail@plt+0x1140>
   127cc:	ldr	r7, [sp, #32]
   127d0:	ldr	r9, [sp, #28]
   127d4:	asr	r5, r4, #31
   127d8:	mov	r2, r4
   127dc:	mov	r3, r5
   127e0:	mov	r0, r7
   127e4:	mov	r1, r9
   127e8:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   127ec:	umull	r2, r3, r0, r4
   127f0:	strd	r0, [sl, #112]	; 0x70
   127f4:	mla	r0, r0, r5, r3
   127f8:	mla	r0, r1, r4, r0
   127fc:	subs	r2, r7, r2
   12800:	sbc	r3, r9, r0
   12804:	movw	r9, #62424	; 0xf3d8
   12808:	movt	r9, #2
   1280c:	strd	r2, [r9]
   12810:	ldr	r5, [sl, #36]	; 0x24
   12814:	and	r0, r6, #1
   12818:	and	r1, r5, #2048	; 0x800
   1281c:	orrs	r1, r1, r0
   12820:	mov	r1, #0
   12824:	bne	12874 <__assert_fail@plt+0x11a4>
   12828:	movw	r1, #62424	; 0xf3d8
   1282c:	movt	r1, #2
   12830:	ldrd	r2, [r1, #24]
   12834:	orrs	r1, r2, r3
   12838:	mov	r1, #1
   1283c:	bne	12874 <__assert_fail@plt+0x11a4>
   12840:	movw	r2, #61768	; 0xf148
   12844:	movt	r2, #2
   12848:	ldrd	r2, [r2, #8]
   1284c:	subs	r4, r2, #1
   12850:	sbcs	r4, r3, #0
   12854:	blt	1286c <__assert_fail@plt+0x119c>
   12858:	mvn	r4, #-2147483648	; 0x80000000
   1285c:	mvn	r2, r2
   12860:	eor	r3, r3, r4
   12864:	orrs	r2, r2, r3
   12868:	bne	12874 <__assert_fail@plt+0x11a4>
   1286c:	orr	r1, r8, r6
   12870:	ubfx	r1, r1, #16, #1
   12874:	strb	r1, [sl, #6]
   12878:	movw	r1, #21032	; 0x5228
   1287c:	movw	r2, #20932	; 0x51c4
   12880:	cmp	r0, #0
   12884:	and	r0, r5, #7
   12888:	bic	r4, r6, #1
   1288c:	movt	r1, #1
   12890:	movt	r2, #1
   12894:	moveq	r2, r1
   12898:	sub	r1, r0, #1
   1289c:	tst	r0, r1
   128a0:	str	r2, [sl, #68]	; 0x44
   128a4:	str	r4, [sl, #20]
   128a8:	bne	14668 <__assert_fail@plt+0x2f98>
   128ac:	and	r0, r5, #24
   128b0:	sub	r1, r0, #1
   128b4:	tst	r0, r1
   128b8:	bne	14674 <__assert_fail@plt+0x2fa4>
   128bc:	and	r0, r5, #96	; 0x60
   128c0:	sub	r1, r0, #1
   128c4:	tst	r0, r1
   128c8:	bne	14680 <__assert_fail@plt+0x2fb0>
   128cc:	and	r0, r5, #12288	; 0x3000
   128d0:	sub	r1, r0, #1
   128d4:	tst	r0, r1
   128d8:	bne	1468c <__assert_fail@plt+0x2fbc>
   128dc:	movw	r0, #2
   128e0:	movt	r0, #1
   128e4:	and	r1, r6, r0
   128e8:	sub	r2, r1, #1
   128ec:	tst	r1, r2
   128f0:	andeq	r0, r8, r0
   128f4:	subeq	r1, r0, #1
   128f8:	tsteq	r0, r1
   128fc:	bne	1455c <__assert_fail@plt+0x2e8c>
   12900:	tst	r6, #2
   12904:	bne	12968 <__assert_fail@plt+0x1298>
   12908:	tst	r8, #2
   1290c:	bne	129a4 <__assert_fail@plt+0x12d4>
   12910:	movw	r6, #61920	; 0xf1e0
   12914:	tst	r5, #1
   12918:	movt	r6, #2
   1291c:	bne	129e8 <__assert_fail@plt+0x1318>
   12920:	tst	r5, #64	; 0x40
   12924:	bne	12a2c <__assert_fail@plt+0x135c>
   12928:	tst	r5, #32
   1292c:	beq	12a68 <__assert_fail@plt+0x1398>
   12930:	bl	11520 <__ctype_tolower_loc@plt>
   12934:	ldr	r0, [r0]
   12938:	mov	r1, #0
   1293c:	mov	r2, r6
   12940:	ldrb	r3, [r2, r1]!
   12944:	add	r1, r1, #2
   12948:	cmp	r1, #256	; 0x100
   1294c:	ldr	r3, [r0, r3, lsl #2]
   12950:	strb	r3, [r2]
   12954:	ldrb	r3, [r2, #1]
   12958:	ldr	r3, [r0, r3, lsl #2]
   1295c:	strb	r3, [r2, #1]
   12960:	bne	1293c <__assert_fail@plt+0x126c>
   12964:	b	12a60 <__assert_fail@plt+0x1390>
   12968:	movw	r1, #61768	; 0xf148
   1296c:	mov	r0, #1
   12970:	bic	r4, r6, #3
   12974:	movt	r1, #2
   12978:	strb	r0, [sl, #2]
   1297c:	str	r4, [sl, #20]
   12980:	ldr	r0, [sl, #44]	; 0x2c
   12984:	ldrd	r2, [r1, #8]
   12988:	orr	r1, r2, r3
   1298c:	orr	r0, r1, r0
   12990:	clz	r0, r0
   12994:	lsr	r0, r0, #5
   12998:	strb	r0, [sl, #4]
   1299c:	tst	r8, #2
   129a0:	beq	12910 <__assert_fail@plt+0x1240>
   129a4:	movw	r1, #61768	; 0xf148
   129a8:	mov	r0, #1
   129ac:	movt	r1, #2
   129b0:	strb	r0, [sl, #3]
   129b4:	bic	r0, r8, #2
   129b8:	str	r0, [sl, #32]
   129bc:	ldrd	r2, [r1, #8]
   129c0:	ldr	r0, [sl, #44]	; 0x2c
   129c4:	orr	r1, r2, r3
   129c8:	orr	r0, r1, r0
   129cc:	clz	r0, r0
   129d0:	lsr	r0, r0, #5
   129d4:	strb	r0, [sl, #5]
   129d8:	movw	r6, #61920	; 0xf1e0
   129dc:	tst	r5, #1
   129e0:	movt	r6, #2
   129e4:	beq	12920 <__assert_fail@plt+0x1250>
   129e8:	movw	r1, #57344	; 0xe000
   129ec:	mov	r0, #0
   129f0:	movt	r1, #1
   129f4:	mov	r2, r6
   129f8:	ldrb	r3, [r2, r0]!
   129fc:	add	r0, r0, #2
   12a00:	cmp	r0, #256	; 0x100
   12a04:	ldrb	r3, [r1, r3]
   12a08:	strb	r3, [r2]
   12a0c:	ldrb	r3, [r2, #1]
   12a10:	ldrb	r3, [r1, r3]
   12a14:	strb	r3, [r2, #1]
   12a18:	bne	129f4 <__assert_fail@plt+0x1324>
   12a1c:	mov	r0, #1
   12a20:	strb	r0, [sl, #7]
   12a24:	tst	r5, #64	; 0x40
   12a28:	beq	12928 <__assert_fail@plt+0x1258>
   12a2c:	bl	1152c <__ctype_toupper_loc@plt>
   12a30:	ldr	r0, [r0]
   12a34:	mov	r1, #0
   12a38:	mov	r2, r6
   12a3c:	ldrb	r3, [r2, r1]!
   12a40:	add	r1, r1, #2
   12a44:	cmp	r1, #256	; 0x100
   12a48:	ldr	r3, [r0, r3, lsl #2]
   12a4c:	strb	r3, [r2]
   12a50:	ldrb	r3, [r2, #1]
   12a54:	ldr	r3, [r0, r3, lsl #2]
   12a58:	strb	r3, [r2, #1]
   12a5c:	bne	12a38 <__assert_fail@plt+0x1368>
   12a60:	mov	r0, #1
   12a64:	strb	r0, [sl, #7]
   12a68:	tst	r5, #2
   12a6c:	bne	12ab0 <__assert_fail@plt+0x13e0>
   12a70:	tst	r5, #4
   12a74:	beq	12af4 <__assert_fail@plt+0x1424>
   12a78:	movw	r1, #57856	; 0xe200
   12a7c:	mov	r0, #0
   12a80:	movt	r1, #1
   12a84:	mov	r2, r6
   12a88:	ldrb	r3, [r2, r0]!
   12a8c:	add	r0, r0, #2
   12a90:	cmp	r0, #256	; 0x100
   12a94:	ldrb	r3, [r1, r3]
   12a98:	strb	r3, [r2]
   12a9c:	ldrb	r3, [r2, #1]
   12aa0:	ldrb	r3, [r1, r3]
   12aa4:	strb	r3, [r2, #1]
   12aa8:	bne	12a84 <__assert_fail@plt+0x13b4>
   12aac:	b	12ae4 <__assert_fail@plt+0x1414>
   12ab0:	movw	r1, #57600	; 0xe100
   12ab4:	mov	r0, #0
   12ab8:	movt	r1, #1
   12abc:	mov	r2, r6
   12ac0:	ldrb	r3, [r2, r0]!
   12ac4:	add	r0, r0, #2
   12ac8:	cmp	r0, #256	; 0x100
   12acc:	ldrb	r3, [r1, r3]
   12ad0:	strb	r3, [r2]
   12ad4:	ldrb	r3, [r2, #1]
   12ad8:	ldrb	r3, [r1, r3]
   12adc:	strb	r3, [r2, #1]
   12ae0:	bne	12abc <__assert_fail@plt+0x13ec>
   12ae4:	mov	r0, #1
   12ae8:	strb	r0, [sl, #9]
   12aec:	movw	r0, #257	; 0x101
   12af0:	strh	r0, [sl, #7]
   12af4:	ldr	r5, [sl, #16]
   12af8:	cmp	r5, #0
   12afc:	beq	12b68 <__assert_fail@plt+0x1498>
   12b00:	bl	15390 <__assert_fail@plt+0x3cc0>
   12b04:	mov	r0, #0
   12b08:	mov	r1, r5
   12b0c:	mov	r2, r4
   12b10:	mov	r3, #0
   12b14:	bl	16a78 <__assert_fail@plt+0x53a8>
   12b18:	cmn	r0, #1
   12b1c:	bgt	12b90 <__assert_fail@plt+0x14c0>
   12b20:	bl	11598 <__errno_location@plt>
   12b24:	ldr	r6, [r0]
   12b28:	cmp	r6, #4
   12b2c:	beq	12b00 <__assert_fail@plt+0x1430>
   12b30:	movw	r1, #54825	; 0xd629
   12b34:	mov	r0, #0
   12b38:	mov	r2, #5
   12b3c:	movt	r1, #1
   12b40:	bl	11424 <dcgettext@plt>
   12b44:	ldr	r1, [sl, #16]
   12b48:	mov	r4, r0
   12b4c:	mov	r0, #4
   12b50:	bl	19920 <__assert_fail@plt+0x8250>
   12b54:	mov	r3, r0
   12b58:	mov	r0, #1
   12b5c:	mov	r1, r6
   12b60:	mov	r2, r4
   12b64:	bl	14890 <__assert_fail@plt+0x31c0>
   12b68:	movw	r1, #54810	; 0xd61a
   12b6c:	mov	r0, #0
   12b70:	mov	r2, #5
   12b74:	movt	r1, #1
   12b78:	bl	11424 <dcgettext@plt>
   12b7c:	str	r0, [sl, #16]
   12b80:	mov	r2, r0
   12b84:	mov	r0, #0
   12b88:	ldr	r1, [sl, #20]
   12b8c:	bl	14784 <__assert_fail@plt+0x30b4>
   12b90:	mov	r0, #1
   12b94:	mov	r2, #0
   12b98:	mov	r3, #0
   12b9c:	mov	r4, #0
   12ba0:	str	r0, [sp]
   12ba4:	mov	r0, #0
   12ba8:	bl	11490 <lseek64@plt>
   12bac:	mov	r5, r1
   12bb0:	mvn	r1, r1
   12bb4:	lsr	r1, r1, #31
   12bb8:	strb	r1, [sl, #1]
   12bbc:	rsbs	r1, r0, #0
   12bc0:	rscs	r1, r5, #0
   12bc4:	movwlt	r4, #1
   12bc8:	cmp	r4, #0
   12bcc:	moveq	r5, r4
   12bd0:	movne	r4, r0
   12bd4:	strd	r4, [sl, #104]	; 0x68
   12bd8:	bl	11598 <__errno_location@plt>
   12bdc:	str	r0, [sp, #48]	; 0x30
   12be0:	ldr	r0, [r0]
   12be4:	str	r0, [sl, #24]
   12be8:	ldr	r6, [sl, #28]
   12bec:	cmp	r6, #0
   12bf0:	beq	12c58 <__assert_fail@plt+0x1588>
   12bf4:	add	r5, sl, #32
   12bf8:	mov	r3, #128	; 0x80
   12bfc:	ldr	r4, [sl, #112]	; 0x70
   12c00:	ldr	r9, [sl, #116]	; 0x74
   12c04:	mov	r2, #64	; 0x40
   12c08:	ldm	r5, {r0, r1, r5}
   12c0c:	and	r3, r3, r1, lsr #6
   12c10:	bic	r2, r2, r1, lsr #6
   12c14:	orrs	ip, r4, r9
   12c18:	orr	r0, r3, r0
   12c1c:	orr	r0, r0, r2
   12c20:	mov	r8, r0
   12c24:	orreq	r8, r8, #512	; 0x200
   12c28:	ands	lr, r1, #512	; 0x200
   12c2c:	movne	r8, r0
   12c30:	cmn	r5, #1
   12c34:	ble	12c84 <__assert_fail@plt+0x15b4>
   12c38:	cmp	r5, #0
   12c3c:	beq	12d78 <__assert_fail@plt+0x16a8>
   12c40:	cmn	r9, #1
   12c44:	ble	12cd0 <__assert_fail@plt+0x1600>
   12c48:	asr	r3, r5, #31
   12c4c:	mvn	r0, #0
   12c50:	mvn	r1, #-2147483648	; 0x80000000
   12c54:	b	12ca0 <__assert_fail@plt+0x15d0>
   12c58:	movw	r1, #54843	; 0xd63b
   12c5c:	mov	r0, #0
   12c60:	mov	r2, #5
   12c64:	movt	r1, #1
   12c68:	bl	11424 <dcgettext@plt>
   12c6c:	str	r0, [sl, #28]
   12c70:	mov	r2, r0
   12c74:	mov	r0, #1
   12c78:	ldr	r1, [sl, #32]
   12c7c:	bl	14784 <__assert_fail@plt+0x30b4>
   12c80:	b	12f68 <__assert_fail@plt+0x1898>
   12c84:	cmn	r9, #1
   12c88:	ble	12d20 <__assert_fail@plt+0x1650>
   12c8c:	cmn	r5, #1
   12c90:	beq	12d78 <__assert_fail@plt+0x16a8>
   12c94:	asr	r3, r5, #31
   12c98:	mov	r0, #0
   12c9c:	mov	r1, #-2147483648	; 0x80000000
   12ca0:	mov	r2, r5
   12ca4:	mov	r7, r3
   12ca8:	str	r3, [sp, #40]	; 0x28
   12cac:	str	ip, [sp, #44]	; 0x2c
   12cb0:	mov	r7, lr
   12cb4:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   12cb8:	ldr	ip, [sp, #44]	; 0x2c
   12cbc:	subs	r0, r0, r4
   12cc0:	mov	lr, r7
   12cc4:	sbcs	r0, r1, r9
   12cc8:	blt	12d58 <__assert_fail@plt+0x1688>
   12ccc:	b	12d78 <__assert_fail@plt+0x16a8>
   12cd0:	mvn	r1, #0
   12cd4:	eor	r0, r4, r1
   12cd8:	eor	r1, r9, r1
   12cdc:	orrs	r0, r0, r1
   12ce0:	beq	12d78 <__assert_fail@plt+0x16a8>
   12ce4:	mov	r0, #0
   12ce8:	mov	r1, #-2147483648	; 0x80000000
   12cec:	mov	r2, r4
   12cf0:	mov	r3, r9
   12cf4:	str	ip, [sp, #44]	; 0x2c
   12cf8:	mov	r7, lr
   12cfc:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   12d00:	ldr	ip, [sp, #44]	; 0x2c
   12d04:	subs	r0, r0, r5
   12d08:	mov	lr, r7
   12d0c:	sbcs	r0, r1, r5, asr #31
   12d10:	bge	12d78 <__assert_fail@plt+0x16a8>
   12d14:	asr	r0, r5, #31
   12d18:	str	r0, [sp, #40]	; 0x28
   12d1c:	b	12d58 <__assert_fail@plt+0x1688>
   12d20:	asr	r3, r5, #31
   12d24:	mvn	r0, #0
   12d28:	mvn	r1, #-2147483648	; 0x80000000
   12d2c:	mov	r2, r5
   12d30:	str	ip, [sp, #44]	; 0x2c
   12d34:	mov	r7, r3
   12d38:	str	r3, [sp, #40]	; 0x28
   12d3c:	mov	r7, lr
   12d40:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   12d44:	ldr	ip, [sp, #44]	; 0x2c
   12d48:	subs	r0, r4, r0
   12d4c:	mov	lr, r7
   12d50:	sbcs	r0, r9, r1
   12d54:	bge	12d78 <__assert_fail@plt+0x16a8>
   12d58:	ldr	r1, [sp, #40]	; 0x28
   12d5c:	umull	r2, r0, r4, r5
   12d60:	mla	r0, r4, r1, r0
   12d64:	mla	r5, r9, r5, r0
   12d68:	mov	r9, r2
   12d6c:	cmp	lr, #0
   12d70:	bne	12de8 <__assert_fail@plt+0x1718>
   12d74:	b	146b0 <__assert_fail@plt+0x2fe0>
   12d78:	umull	r0, r1, r4, r5
   12d7c:	asr	r2, r5, #31
   12d80:	mla	r1, r4, r2, r1
   12d84:	movw	r2, #62424	; 0xf3d8
   12d88:	movt	r2, #2
   12d8c:	mla	r1, r9, r5, r1
   12d90:	ldrd	r2, [r2]
   12d94:	adds	r9, r2, r0
   12d98:	mov	r2, #0
   12d9c:	mov	r0, #0
   12da0:	adc	r5, r3, r1
   12da4:	cmn	r5, #1
   12da8:	movwgt	r2, #1
   12dac:	cmn	r3, #1
   12db0:	mov	r3, #0
   12db4:	movwgt	r3, #1
   12db8:	subs	r2, r3, r2
   12dbc:	movwne	r2, #1
   12dc0:	cmn	r1, #1
   12dc4:	movwgt	r0, #1
   12dc8:	sub	r0, r3, r0
   12dcc:	clz	r0, r0
   12dd0:	lsr	r0, r0, #5
   12dd4:	and	r0, r0, r2
   12dd8:	cmp	r0, #1
   12ddc:	bne	12de8 <__assert_fail@plt+0x1718>
   12de0:	cmp	lr, #0
   12de4:	beq	146b0 <__assert_fail@plt+0x2fe0>
   12de8:	cmp	ip, #0
   12dec:	beq	12e28 <__assert_fail@plt+0x1758>
   12df0:	orr	r4, r8, #2
   12df4:	bl	15390 <__assert_fail@plt+0x3cc0>
   12df8:	mov	r0, #1
   12dfc:	mov	r1, r6
   12e00:	mov	r2, r4
   12e04:	movw	r3, #438	; 0x1b6
   12e08:	bl	16a78 <__assert_fail@plt+0x53a8>
   12e0c:	cmn	r0, #1
   12e10:	bgt	12e94 <__assert_fail@plt+0x17c4>
   12e14:	ldr	r0, [sp, #48]	; 0x30
   12e18:	ldr	r0, [r0]
   12e1c:	cmp	r0, #4
   12e20:	beq	12df4 <__assert_fail@plt+0x1724>
   12e24:	ldr	r6, [sl, #28]
   12e28:	orr	r7, r8, #1
   12e2c:	bl	15390 <__assert_fail@plt+0x3cc0>
   12e30:	mov	r0, #1
   12e34:	mov	r1, r6
   12e38:	mov	r2, r7
   12e3c:	movw	r3, #438	; 0x1b6
   12e40:	bl	16a78 <__assert_fail@plt+0x53a8>
   12e44:	cmn	r0, #1
   12e48:	bgt	12e94 <__assert_fail@plt+0x17c4>
   12e4c:	ldr	r0, [sp, #48]	; 0x30
   12e50:	ldr	r4, [r0]
   12e54:	cmp	r4, #4
   12e58:	beq	12e2c <__assert_fail@plt+0x175c>
   12e5c:	movw	r1, #54825	; 0xd629
   12e60:	mov	r0, #0
   12e64:	mov	r2, #5
   12e68:	movt	r1, #1
   12e6c:	bl	11424 <dcgettext@plt>
   12e70:	ldr	r1, [sl, #28]
   12e74:	mov	r5, r0
   12e78:	mov	r0, #4
   12e7c:	bl	19920 <__assert_fail@plt+0x8250>
   12e80:	mov	r3, r0
   12e84:	mov	r0, #1
   12e88:	mov	r1, r4
   12e8c:	mov	r2, r5
   12e90:	bl	14890 <__assert_fail@plt+0x31c0>
   12e94:	ldrd	r0, [sl, #112]	; 0x70
   12e98:	orrs	r0, r0, r1
   12e9c:	beq	12f68 <__assert_fail@plt+0x1898>
   12ea0:	ldrb	r0, [sl, #37]	; 0x25
   12ea4:	tst	r0, #2
   12ea8:	bne	12f68 <__assert_fail@plt+0x1898>
   12eac:	bl	15390 <__assert_fail@plt+0x3cc0>
   12eb0:	mov	r0, #1
   12eb4:	mov	r2, r9
   12eb8:	mov	r3, r5
   12ebc:	bl	11418 <ftruncate64@plt>
   12ec0:	cmn	r0, #1
   12ec4:	bgt	12edc <__assert_fail@plt+0x180c>
   12ec8:	ldr	r0, [sp, #48]	; 0x30
   12ecc:	ldr	r6, [r0]
   12ed0:	cmp	r6, #4
   12ed4:	beq	12eac <__assert_fail@plt+0x17dc>
   12ed8:	b	12eec <__assert_fail@plt+0x181c>
   12edc:	cmp	r0, #0
   12ee0:	beq	12f68 <__assert_fail@plt+0x1898>
   12ee4:	ldr	r0, [sp, #48]	; 0x30
   12ee8:	ldr	r6, [r0]
   12eec:	add	r7, sp, #56	; 0x38
   12ef0:	bl	15390 <__assert_fail@plt+0x3cc0>
   12ef4:	mov	r0, #3
   12ef8:	mov	r1, #1
   12efc:	mov	r2, r7
   12f00:	bl	1146c <__fxstat64@plt>
   12f04:	cmn	r0, #1
   12f08:	bgt	12f20 <__assert_fail@plt+0x1850>
   12f0c:	ldr	r0, [sp, #48]	; 0x30
   12f10:	ldr	r4, [r0]
   12f14:	cmp	r4, #4
   12f18:	beq	12ef0 <__assert_fail@plt+0x1820>
   12f1c:	b	12f30 <__assert_fail@plt+0x1860>
   12f20:	cmp	r0, #0
   12f24:	beq	13f98 <__assert_fail@plt+0x28c8>
   12f28:	ldr	r0, [sp, #48]	; 0x30
   12f2c:	ldr	r4, [r0]
   12f30:	movw	r1, #54936	; 0xd698
   12f34:	mov	r0, #0
   12f38:	mov	r2, #5
   12f3c:	movt	r1, #1
   12f40:	bl	11424 <dcgettext@plt>
   12f44:	ldr	r1, [sl, #28]
   12f48:	mov	r5, r0
   12f4c:	mov	r0, #4
   12f50:	bl	19920 <__assert_fail@plt+0x8250>
   12f54:	mov	r3, r0
   12f58:	mov	r0, #0
   12f5c:	mov	r1, r4
   12f60:	mov	r2, r5
   12f64:	bl	14890 <__assert_fail@plt+0x31c0>
   12f68:	bl	16be4 <__assert_fail@plt+0x5514>
   12f6c:	movw	r2, #51712	; 0xca00
   12f70:	movw	r7, #62424	; 0xf3d8
   12f74:	ldr	r6, [sl, #64]	; 0x40
   12f78:	movt	r2, #15258	; 0x3b9a
   12f7c:	movt	r7, #2
   12f80:	adds	r2, r0, r2
   12f84:	add	ip, r7, #8
   12f88:	adc	r3, r1, #0
   12f8c:	stm	ip, {r0, r1, r2, r3}
   12f90:	ldr	r4, [r7, #24]
   12f94:	ldr	r7, [r7, #28]
   12f98:	orrs	r0, r4, r7
   12f9c:	cmpeq	r6, #0
   12fa0:	beq	1319c <__assert_fail@plt+0x1acc>
   12fa4:	ldr	r5, [sl, #56]	; 0x38
   12fa8:	cmn	r5, #1
   12fac:	ble	12fd4 <__assert_fail@plt+0x1904>
   12fb0:	cmp	r5, #0
   12fb4:	mvn	r1, #0
   12fb8:	beq	13080 <__assert_fail@plt+0x19b0>
   12fbc:	cmn	r7, #1
   12fc0:	ble	1300c <__assert_fail@plt+0x193c>
   12fc4:	asr	r8, r5, #31
   12fc8:	mvn	r0, #0
   12fcc:	mvn	r1, #-2147483648	; 0x80000000
   12fd0:	b	12ff0 <__assert_fail@plt+0x1920>
   12fd4:	cmn	r7, #1
   12fd8:	ble	13044 <__assert_fail@plt+0x1974>
   12fdc:	cmn	r5, #1
   12fe0:	beq	13080 <__assert_fail@plt+0x19b0>
   12fe4:	asr	r8, r5, #31
   12fe8:	mov	r0, #0
   12fec:	mov	r1, #-2147483648	; 0x80000000
   12ff0:	mov	r2, r5
   12ff4:	mov	r3, r8
   12ff8:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   12ffc:	subs	r0, r0, r4
   13000:	sbcs	r0, r1, r7
   13004:	blt	13068 <__assert_fail@plt+0x1998>
   13008:	b	13080 <__assert_fail@plt+0x19b0>
   1300c:	eor	r0, r4, r1
   13010:	eor	r1, r7, r1
   13014:	orrs	r0, r0, r1
   13018:	beq	13080 <__assert_fail@plt+0x19b0>
   1301c:	mov	r0, #0
   13020:	mov	r1, #-2147483648	; 0x80000000
   13024:	mov	r2, r4
   13028:	mov	r3, r7
   1302c:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   13030:	subs	r0, r0, r5
   13034:	sbcs	r0, r1, r5, asr #31
   13038:	bge	13080 <__assert_fail@plt+0x19b0>
   1303c:	asr	r8, r5, #31
   13040:	b	13068 <__assert_fail@plt+0x1998>
   13044:	asr	r8, r5, #31
   13048:	mvn	r0, #0
   1304c:	mvn	r1, #-2147483648	; 0x80000000
   13050:	mov	r2, r5
   13054:	mov	r3, r8
   13058:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   1305c:	subs	r0, r4, r0
   13060:	sbcs	r0, r7, r1
   13064:	bge	13080 <__assert_fail@plt+0x19b0>
   13068:	umull	r1, r0, r5, r4
   1306c:	mla	r0, r5, r7, r0
   13070:	mla	r6, r8, r4, r0
   13074:	mov	r0, #1
   13078:	str	r1, [sp, #44]	; 0x2c
   1307c:	b	130dc <__assert_fail@plt+0x1a0c>
   13080:	umull	r0, r1, r4, r5
   13084:	asr	r2, r5, #31
   13088:	mov	r3, #0
   1308c:	mla	r1, r4, r2, r1
   13090:	asr	r2, r6, #31
   13094:	mla	r1, r7, r5, r1
   13098:	adds	r0, r6, r0
   1309c:	str	r0, [sp, #44]	; 0x2c
   130a0:	mov	r0, #0
   130a4:	adc	r6, r2, r1
   130a8:	cmn	r6, #1
   130ac:	movwgt	r3, #1
   130b0:	cmn	r2, #1
   130b4:	mov	r2, #0
   130b8:	movwgt	r2, #1
   130bc:	subs	r3, r2, r3
   130c0:	movwne	r3, #1
   130c4:	cmn	r1, #1
   130c8:	movwgt	r0, #1
   130cc:	sub	r0, r2, r0
   130d0:	clz	r0, r0
   130d4:	lsr	r0, r0, #5
   130d8:	and	r0, r0, r3
   130dc:	ldr	r1, [sl, #16]
   130e0:	ldrd	r8, [sl, #104]	; 0x68
   130e4:	str	r0, [sp, #40]	; 0x28
   130e8:	add	r0, sl, #64	; 0x40
   130ec:	mov	r2, r4
   130f0:	mov	r3, r7
   130f4:	str	r5, [sp]
   130f8:	str	r0, [sp, #4]
   130fc:	mov	r0, #0
   13100:	bl	15a50 <__assert_fail@plt+0x4380>
   13104:	orrs	r0, r0, r1
   13108:	beq	13160 <__assert_fail@plt+0x1a90>
   1310c:	movw	r0, #61768	; 0xf148
   13110:	movt	r0, #2
   13114:	ldr	r0, [r0]
   13118:	cmp	r0, #1
   1311c:	beq	1319c <__assert_fail@plt+0x1acc>
   13120:	movw	r1, #56212	; 0xdb94
   13124:	mov	r0, #0
   13128:	mov	r2, #5
   1312c:	movt	r1, #1
   13130:	bl	11424 <dcgettext@plt>
   13134:	ldr	r2, [sl, #16]
   13138:	mov	r4, r0
   1313c:	mov	r0, #0
   13140:	mov	r1, #3
   13144:	bl	19b9c <__assert_fail@plt+0x84cc>
   13148:	mov	r3, r0
   1314c:	mov	r0, #0
   13150:	mov	r1, #0
   13154:	mov	r2, r4
   13158:	bl	14890 <__assert_fail@plt+0x31c0>
   1315c:	b	1319c <__assert_fail@plt+0x1acc>
   13160:	ldrd	r0, [sl, #104]	; 0x68
   13164:	mvn	r3, #0
   13168:	subs	r2, r3, r0
   1316c:	sbcs	r2, r3, r1
   13170:	bge	1319c <__assert_fail@plt+0x1acc>
   13174:	ldr	r2, [sp, #44]	; 0x2c
   13178:	subs	r0, r0, r8
   1317c:	sbc	r1, r1, r9
   13180:	eor	r1, r6, r1
   13184:	eor	r0, r2, r0
   13188:	orrs	r0, r0, r1
   1318c:	bne	1310c <__assert_fail@plt+0x1a3c>
   13190:	ldr	r0, [sp, #40]	; 0x28
   13194:	eors	r0, r0, #1
   13198:	beq	1310c <__assert_fail@plt+0x1a3c>
   1319c:	movw	r9, #62424	; 0xf3d8
   131a0:	ldrd	r2, [sl, #112]	; 0x70
   131a4:	movw	r4, #61768	; 0xf148
   131a8:	movt	r9, #2
   131ac:	movt	r4, #2
   131b0:	ldrd	r0, [r9]
   131b4:	orr	r1, r1, r3
   131b8:	orr	r7, r0, r2
   131bc:	orrs	r1, r7, r1
   131c0:	beq	13270 <__assert_fail@plt+0x1ba0>
   131c4:	str	r0, [sp, #56]	; 0x38
   131c8:	ldr	r0, [sl, #40]	; 0x28
   131cc:	ldr	r1, [sl, #28]
   131d0:	str	r0, [sp]
   131d4:	add	r0, sp, #56	; 0x38
   131d8:	str	r0, [sp, #4]
   131dc:	mov	r0, #1
   131e0:	bl	15a50 <__assert_fail@plt+0x4380>
   131e4:	ldr	r7, [sp, #56]	; 0x38
   131e8:	mov	r6, r1
   131ec:	orrs	r1, r0, r1
   131f0:	mov	r5, r0
   131f4:	cmpeq	r7, #0
   131f8:	beq	13270 <__assert_fail@plt+0x1ba0>
   131fc:	ldr	r0, [sl, #80]	; 0x50
   13200:	cmp	r1, #0
   13204:	ldr	r2, [sl, #40]	; 0x28
   13208:	mov	r1, #0
   1320c:	mov	r8, #0
   13210:	moveq	r2, r7
   13214:	bl	115c8 <memset@plt>
   13218:	orrs	r0, r5, r6
   1321c:	ldr	r0, [sl, #80]	; 0x50
   13220:	ldr	r4, [sl, #40]	; 0x28
   13224:	moveq	r4, r7
   13228:	mov	r1, r4
   1322c:	bl	160b0 <__assert_fail@plt+0x49e0>
   13230:	cmp	r0, r4
   13234:	bne	14518 <__assert_fail@plt+0x2e48>
   13238:	subs	r5, r5, #1
   1323c:	sbcs	r6, r6, #0
   13240:	adcs	r0, r8, #0
   13244:	moveq	r6, r0
   13248:	moveq	r5, r0
   1324c:	moveq	r7, r0
   13250:	orr	r1, r5, r6
   13254:	cmp	r1, #0
   13258:	cmpeq	r7, #0
   1325c:	bne	13218 <__assert_fail@plt+0x1b48>
   13260:	movw	r4, #61768	; 0xf148
   13264:	mov	r0, #0
   13268:	movt	r4, #2
   1326c:	str	r0, [sp, #56]	; 0x38
   13270:	ldrd	r0, [r4, #8]
   13274:	orrs	r0, r0, r1
   13278:	ldreq	r0, [sl, #44]	; 0x2c
   1327c:	moveq	r8, #0
   13280:	cmpeq	r0, #0
   13284:	beq	14090 <__assert_fail@plt+0x29c0>
   13288:	ldr	r0, [sl, #84]	; 0x54
   1328c:	cmp	r0, #0
   13290:	bne	132b8 <__assert_fail@plt+0x1be8>
   13294:	ldr	r1, [sl, #36]	; 0x24
   13298:	ldr	r2, [sl, #56]	; 0x38
   1329c:	ldr	r0, [sl, #12]
   132a0:	ubfx	r1, r1, #7, #1
   132a4:	add	r1, r2, r1
   132a8:	bl	1167c <aligned_alloc@plt>
   132ac:	cmp	r0, #0
   132b0:	str	r0, [sl, #84]	; 0x54
   132b4:	beq	146e4 <__assert_fail@plt+0x3014>
   132b8:	bl	16360 <__assert_fail@plt+0x4c90>
   132bc:	mvn	r0, #0
   132c0:	mov	r9, #0
   132c4:	str	r0, [sp, #36]	; 0x24
   132c8:	mov	r0, #0
   132cc:	str	r0, [sp, #44]	; 0x2c
   132d0:	ldr	r1, [sp, #44]	; 0x2c
   132d4:	str	r9, [sp, #40]	; 0x28
   132d8:	b	132f4 <__assert_fail@plt+0x1c24>
   132dc:	ldr	r1, [sp, #44]	; 0x2c
   132e0:	cmp	r9, #0
   132e4:	bne	132f4 <__assert_fail@plt+0x1c24>
   132e8:	ldr	r0, [sl, #36]	; 0x24
   132ec:	ands	r0, r0, #1024	; 0x400
   132f0:	bne	1385c <__assert_fail@plt+0x218c>
   132f4:	ldr	r0, [r4]
   132f8:	mov	r5, sl
   132fc:	movw	sl, #62424	; 0xf3d8
   13300:	str	r1, [sp, #44]	; 0x2c
   13304:	movt	sl, #2
   13308:	cmp	r0, #4
   1330c:	bne	13340 <__assert_fail@plt+0x1c70>
   13310:	bl	16be4 <__assert_fail@plt+0x5514>
   13314:	ldrd	r2, [sl, #16]
   13318:	subs	r2, r0, r2
   1331c:	sbcs	r2, r1, r3
   13320:	blt	13340 <__assert_fail@plt+0x1c70>
   13324:	bl	156b8 <__assert_fail@plt+0x3fe8>
   13328:	ldrd	r0, [sl, #16]
   1332c:	movw	r2, #51712	; 0xca00
   13330:	movt	r2, #15258	; 0x3b9a
   13334:	adds	r0, r0, r2
   13338:	adc	r1, r1, #0
   1333c:	strd	r0, [sl, #16]
   13340:	ldr	r6, [r4, #8]
   13344:	ldr	r8, [r4, #12]
   13348:	ldr	r7, [r5, #44]	; 0x2c
   1334c:	ldr	r4, [sl, #32]
   13350:	ldr	r3, [sl, #40]	; 0x28
   13354:	ldr	ip, [sl, #36]	; 0x24
   13358:	ldr	r2, [sl, #44]	; 0x2c
   1335c:	adds	r0, r6, #1
   13360:	adc	r1, r8, #0
   13364:	cmp	r7, #0
   13368:	moveq	r0, r6
   1336c:	moveq	r1, r8
   13370:	adds	r4, r4, r3
   13374:	adc	r9, ip, r2
   13378:	subs	r0, r4, r0
   1337c:	sbcs	r0, r9, r1
   13380:	bge	13b34 <__assert_fail@plt+0x2464>
   13384:	ldr	r1, [r5, #36]	; 0x24
   13388:	mov	sl, r5
   1338c:	and	r0, r1, #1280	; 0x500
   13390:	cmp	r0, #1280	; 0x500
   13394:	bne	133b0 <__assert_fail@plt+0x1ce0>
   13398:	ldr	r2, [sl, #56]	; 0x38
   1339c:	ldr	r0, [sl, #84]	; 0x54
   133a0:	ands	r1, r1, #24
   133a4:	movwne	r1, #1
   133a8:	lsl	r1, r1, #5
   133ac:	bl	115c8 <memset@plt>
   133b0:	ldr	r0, [sl, #56]	; 0x38
   133b4:	subs	r2, r4, r6
   133b8:	ldr	r3, [sl, #68]	; 0x44
   133bc:	ldr	r1, [sl, #84]	; 0x54
   133c0:	sbcs	r2, r9, r8
   133c4:	movlt	r7, r0
   133c8:	mov	r0, #0
   133cc:	mov	r2, r7
   133d0:	blx	r3
   133d4:	mov	r8, r0
   133d8:	cmp	r0, #1
   133dc:	bge	136a4 <__assert_fail@plt+0x1fd4>
   133e0:	cmp	r8, #0
   133e4:	mvn	r8, #0
   133e8:	beq	13c08 <__assert_fail@plt+0x2538>
   133ec:	ldrb	r0, [sl, #37]	; 0x25
   133f0:	movw	r4, #61768	; 0xf148
   133f4:	movt	r4, #2
   133f8:	tst	r0, #1
   133fc:	beq	1340c <__assert_fail@plt+0x1d3c>
   13400:	ldr	r0, [r4]
   13404:	cmp	r0, #1
   13408:	beq	13458 <__assert_fail@plt+0x1d88>
   1340c:	ldr	r0, [sp, #48]	; 0x30
   13410:	movw	r1, #56262	; 0xdbc6
   13414:	mov	r2, #5
   13418:	movt	r1, #1
   1341c:	ldr	r5, [r0]
   13420:	mov	r0, #0
   13424:	bl	11424 <dcgettext@plt>
   13428:	ldr	r1, [sl, #16]
   1342c:	mov	r6, r0
   13430:	mov	r0, #4
   13434:	bl	19920 <__assert_fail@plt+0x8250>
   13438:	mov	r3, r0
   1343c:	mov	r0, #0
   13440:	mov	r1, r5
   13444:	mov	r2, r6
   13448:	bl	14890 <__assert_fail@plt+0x31c0>
   1344c:	ldrb	r0, [sl, #37]	; 0x25
   13450:	tst	r0, #1
   13454:	beq	13ce0 <__assert_fail@plt+0x2610>
   13458:	bl	1553c <__assert_fail@plt+0x3e6c>
   1345c:	ldr	r0, [sl, #56]	; 0x38
   13460:	ldr	r9, [sp, #40]	; 0x28
   13464:	sub	r7, r0, r9
   13468:	mov	r0, #0
   1346c:	asr	r5, r7, #31
   13470:	mov	r2, r7
   13474:	mov	r3, r5
   13478:	bl	14a70 <__assert_fail@plt+0x33a0>
   1347c:	ldrb	r0, [sl, #1]
   13480:	cmp	r0, #0
   13484:	beq	13620 <__assert_fail@plt+0x1f50>
   13488:	ldrd	r0, [sl, #104]	; 0x68
   1348c:	subs	r2, r8, r0
   13490:	sbcs	r2, r8, r1
   13494:	bge	135e8 <__assert_fail@plt+0x1f18>
   13498:	cmn	r1, #1
   1349c:	mov	r2, #0
   134a0:	mov	r3, #0
   134a4:	mov	r6, #0
   134a8:	movwgt	r2, #1
   134ac:	adds	r0, r0, r7
   134b0:	adc	r1, r1, r7, asr #31
   134b4:	cmn	r1, #1
   134b8:	movwgt	r3, #1
   134bc:	subs	r3, r2, r3
   134c0:	movwne	r3, #1
   134c4:	cmn	r5, #1
   134c8:	movwgt	r6, #1
   134cc:	sub	r2, r2, r6
   134d0:	clz	r2, r2
   134d4:	lsr	r2, r2, #5
   134d8:	ands	r2, r2, r3
   134dc:	movne	r1, r8
   134e0:	movne	r0, r8
   134e4:	cmn	r1, #1
   134e8:	strd	r0, [sl, #104]	; 0x68
   134ec:	ble	135e8 <__assert_fail@plt+0x1f18>
   134f0:	mov	r0, #1
   134f4:	mov	r2, #0
   134f8:	mov	r3, #0
   134fc:	str	r0, [sp]
   13500:	mov	r0, #0
   13504:	bl	11490 <lseek64@plt>
   13508:	subs	r2, r8, r0
   1350c:	sbcs	r2, r8, r1
   13510:	bge	13638 <__assert_fail@plt+0x1f68>
   13514:	ldrd	r2, [sl, #104]	; 0x68
   13518:	eor	r6, r3, r1
   1351c:	eor	r5, r2, r0
   13520:	orrs	r6, r5, r6
   13524:	beq	132dc <__assert_fail@plt+0x1c0c>
   13528:	subs	r6, r2, r0
   1352c:	sbc	r5, r3, r1
   13530:	subs	r0, r8, r6
   13534:	sbcs	r0, r8, r5
   13538:	mov	r0, #0
   1353c:	movwlt	r0, #1
   13540:	subs	r1, r7, r6
   13544:	rscs	r1, r5, r7, asr #31
   13548:	mov	r1, #0
   1354c:	movwge	r1, #1
   13550:	tst	r1, r0
   13554:	bne	13588 <__assert_fail@plt+0x1eb8>
   13558:	ldr	r0, [r4]
   1355c:	cmp	r0, #1
   13560:	beq	13588 <__assert_fail@plt+0x1eb8>
   13564:	movw	r1, #56511	; 0xdcbf
   13568:	mov	r0, #0
   1356c:	mov	r2, #5
   13570:	movt	r1, #1
   13574:	bl	11424 <dcgettext@plt>
   13578:	mov	r2, r0
   1357c:	mov	r0, #0
   13580:	mov	r1, #0
   13584:	bl	14890 <__assert_fail@plt+0x31c0>
   13588:	mov	r0, #1
   1358c:	mov	r2, r6
   13590:	mov	r3, r5
   13594:	str	r0, [sp]
   13598:	mov	r0, #0
   1359c:	bl	11490 <lseek64@plt>
   135a0:	subs	r0, r8, r0
   135a4:	sbcs	r0, r8, r1
   135a8:	ldr	r1, [sp, #44]	; 0x2c
   135ac:	blt	13698 <__assert_fail@plt+0x1fc8>
   135b0:	ldr	r0, [sp, #48]	; 0x30
   135b4:	ldr	r0, [r0]
   135b8:	cmp	r0, #0
   135bc:	bne	13638 <__assert_fail@plt+0x1f68>
   135c0:	movw	r1, #56558	; 0xdcee
   135c4:	mov	r0, #0
   135c8:	mov	r2, #5
   135cc:	movt	r1, #1
   135d0:	bl	11424 <dcgettext@plt>
   135d4:	mov	r2, r0
   135d8:	mov	r0, #0
   135dc:	mov	r1, #0
   135e0:	bl	14890 <__assert_fail@plt+0x31c0>
   135e4:	b	13638 <__assert_fail@plt+0x1f68>
   135e8:	movw	r1, #56473	; 0xdc99
   135ec:	mov	r0, #0
   135f0:	mov	r2, #5
   135f4:	movt	r1, #1
   135f8:	bl	11424 <dcgettext@plt>
   135fc:	ldr	r1, [sl, #16]
   13600:	mov	r4, r0
   13604:	mov	r0, #4
   13608:	bl	19920 <__assert_fail@plt+0x8250>
   1360c:	mov	r3, r0
   13610:	mov	r0, #0
   13614:	mov	r1, #0
   13618:	mov	r2, r4
   1361c:	b	13678 <__assert_fail@plt+0x1fa8>
   13620:	ldr	r0, [sl, #24]
   13624:	ldr	r1, [sp, #44]	; 0x2c
   13628:	cmp	r0, #29
   1362c:	beq	13698 <__assert_fail@plt+0x1fc8>
   13630:	ldr	r1, [sp, #48]	; 0x30
   13634:	str	r0, [r1]
   13638:	ldr	r0, [sp, #48]	; 0x30
   1363c:	movw	r1, #56312	; 0xdbf8
   13640:	mov	r2, #5
   13644:	movt	r1, #1
   13648:	ldr	r4, [r0]
   1364c:	mov	r0, #0
   13650:	bl	11424 <dcgettext@plt>
   13654:	ldr	r2, [sl, #16]
   13658:	mov	r5, r0
   1365c:	mov	r0, #0
   13660:	mov	r1, #3
   13664:	bl	19b9c <__assert_fail@plt+0x84cc>
   13668:	mov	r3, r0
   1366c:	mov	r0, #0
   13670:	mov	r1, r4
   13674:	mov	r2, r5
   13678:	bl	14890 <__assert_fail@plt+0x31c0>
   1367c:	movw	r4, #61768	; 0xf148
   13680:	mov	r0, #29
   13684:	mov	r1, #1
   13688:	movt	r4, #2
   1368c:	str	r0, [sl, #24]
   13690:	mov	r0, #0
   13694:	strb	r0, [sl, #1]
   13698:	cmp	r9, #0
   1369c:	beq	132e8 <__assert_fail@plt+0x1c18>
   136a0:	b	132f4 <__assert_fail@plt+0x1c24>
   136a4:	ldrd	r0, [sl, #104]	; 0x68
   136a8:	mvn	r6, #0
   136ac:	subs	r2, r6, r0
   136b0:	sbcs	r2, r6, r1
   136b4:	bge	1370c <__assert_fail@plt+0x203c>
   136b8:	cmn	r1, #1
   136bc:	mov	r2, #0
   136c0:	mov	r3, #0
   136c4:	asr	r7, r8, #31
   136c8:	movwgt	r2, #1
   136cc:	adds	r0, r0, r8
   136d0:	adc	r1, r1, r8, asr #31
   136d4:	cmn	r1, #1
   136d8:	movwgt	r3, #1
   136dc:	subs	r3, r2, r3
   136e0:	movwne	r3, #1
   136e4:	cmn	r7, #1
   136e8:	mov	r7, #0
   136ec:	movwgt	r7, #1
   136f0:	sub	r2, r2, r7
   136f4:	clz	r2, r2
   136f8:	lsr	r2, r2, #5
   136fc:	ands	r2, r2, r3
   13700:	movne	r1, r6
   13704:	movne	r0, r6
   13708:	strd	r0, [sl, #104]	; 0x68
   1370c:	ldrb	r0, [sl, #2]
   13710:	movw	r4, #61768	; 0xf148
   13714:	movw	r9, #62424	; 0xf3d8
   13718:	movt	r4, #2
   1371c:	movt	r9, #2
   13720:	cmp	r0, #1
   13724:	bne	13738 <__assert_fail@plt+0x2068>
   13728:	asr	r3, r8, #31
   1372c:	mov	r0, #0
   13730:	mov	r2, r8
   13734:	bl	14a70 <__assert_fail@plt+0x33a0>
   13738:	ldr	r6, [sl, #56]	; 0x38
   1373c:	cmp	r6, r8
   13740:	ble	13878 <__assert_fail@plt+0x21a8>
   13744:	ldrd	r0, [r9, #40]	; 0x28
   13748:	adds	r0, r0, #1
   1374c:	adc	r1, r1, #0
   13750:	strd	r0, [r9, #40]	; 0x28
   13754:	ldr	r1, [sl, #36]	; 0x24
   13758:	tst	r1, #1024	; 0x400
   1375c:	bne	138ec <__assert_fail@plt+0x221c>
   13760:	mov	r6, r8
   13764:	ldr	r0, [sl, #80]	; 0x50
   13768:	ldr	r7, [sl, #84]	; 0x54
   1376c:	cmp	r7, r0
   13770:	beq	138a0 <__assert_fail@plt+0x21d0>
   13774:	cmp	r6, #0
   13778:	ldrbne	r0, [sl, #7]
   1377c:	cmpne	r0, #0
   13780:	beq	137c8 <__assert_fail@plt+0x20f8>
   13784:	tst	r6, #1
   13788:	bne	13b08 <__assert_fail@plt+0x2438>
   1378c:	mov	r0, r6
   13790:	movw	r3, #61920	; 0xf1e0
   13794:	cmp	r6, #1
   13798:	movt	r3, #2
   1379c:	beq	137c4 <__assert_fail@plt+0x20f4>
   137a0:	ldrb	r1, [r7]
   137a4:	ldrb	r2, [r7, #1]
   137a8:	subs	r0, r0, #2
   137ac:	ldrb	r1, [r3, r1]
   137b0:	strb	r1, [r7]
   137b4:	ldrb	r1, [r3, r2]
   137b8:	strb	r1, [r7, #1]
   137bc:	add	r7, r7, #2
   137c0:	bne	137a0 <__assert_fail@plt+0x20d0>
   137c4:	ldr	r7, [sl, #84]	; 0x54
   137c8:	ldr	lr, [sl, #36]	; 0x24
   137cc:	mov	r1, #0
   137d0:	ands	r2, lr, #128	; 0x80
   137d4:	moveq	r1, r6
   137d8:	cmp	r6, #0
   137dc:	cmpne	r2, #0
   137e0:	bne	13928 <__assert_fail@plt+0x2258>
   137e4:	ldr	ip, [sp, #36]	; 0x24
   137e8:	mov	r6, r1
   137ec:	tst	lr, #8
   137f0:	str	ip, [sp, #36]	; 0x24
   137f4:	bne	139e0 <__assert_fail@plt+0x2310>
   137f8:	tst	lr, #16
   137fc:	bne	13af4 <__assert_fail@plt+0x2424>
   13800:	ldr	r0, [sl, #40]	; 0x28
   13804:	ldr	r4, [sl, #88]	; 0x58
   13808:	ldr	r1, [sl, #80]	; 0x50
   1380c:	sub	r5, r0, r4
   13810:	add	r0, r1, r4
   13814:	mov	r1, r7
   13818:	cmp	r6, r5
   1381c:	movlt	r5, r6
   13820:	mov	r2, r5
   13824:	bl	113f4 <memcpy@plt>
   13828:	add	r0, r5, r4
   1382c:	sub	r6, r6, r5
   13830:	str	r0, [sl, #88]	; 0x58
   13834:	ldr	r1, [sl, #40]	; 0x28
   13838:	cmp	r0, r1
   1383c:	blge	165b0 <__assert_fail@plt+0x4ee0>
   13840:	add	r7, r7, r5
   13844:	cmp	r6, #0
   13848:	bne	13800 <__assert_fail@plt+0x2130>
   1384c:	movw	r4, #61768	; 0xf148
   13850:	mov	r9, r8
   13854:	movt	r4, #2
   13858:	b	132d0 <__assert_fail@plt+0x1c00>
   1385c:	movw	r9, #62424	; 0xf3d8
   13860:	mov	r8, #0
   13864:	str	r1, [sp, #44]	; 0x2c
   13868:	movt	r9, #2
   1386c:	ldr	r6, [sl, #56]	; 0x38
   13870:	cmp	r6, r8
   13874:	bgt	13744 <__assert_fail@plt+0x2074>
   13878:	ldrd	r0, [r9, #32]
   1387c:	mov	r6, r8
   13880:	mov	r8, #0
   13884:	adds	r0, r0, #1
   13888:	adc	r1, r1, #0
   1388c:	strd	r0, [r9, #32]
   13890:	ldr	r0, [sl, #80]	; 0x50
   13894:	ldr	r7, [sl, #84]	; 0x54
   13898:	cmp	r7, r0
   1389c:	bne	13774 <__assert_fail@plt+0x20a4>
   138a0:	mov	r0, r7
   138a4:	mov	r1, r6
   138a8:	bl	160b0 <__assert_fail@plt+0x49e0>
   138ac:	ldrd	r2, [r9, #72]	; 0x48
   138b0:	adds	r2, r2, r0
   138b4:	adc	r3, r3, r0, asr #31
   138b8:	cmp	r0, r6
   138bc:	strd	r2, [r9, #72]	; 0x48
   138c0:	bne	13e78 <__assert_fail@plt+0x27a8>
   138c4:	ldr	r0, [sl, #56]	; 0x38
   138c8:	add	r1, r9, #56	; 0x38
   138cc:	cmp	r6, r0
   138d0:	addeq	r1, r9, #48	; 0x30
   138d4:	mov	r9, r8
   138d8:	ldm	r1, {r0, r3}
   138dc:	adds	r0, r0, #1
   138e0:	adc	r3, r3, #0
   138e4:	stm	r1, {r0, r3}
   138e8:	b	132d0 <__assert_fail@plt+0x1c00>
   138ec:	tst	r1, #256	; 0x100
   138f0:	bne	13890 <__assert_fail@plt+0x21c0>
   138f4:	ldr	r0, [sl, #84]	; 0x54
   138f8:	ands	r1, r1, #24
   138fc:	sub	r2, r6, r8
   13900:	movwne	r1, #1
   13904:	lsl	r1, r1, #5
   13908:	add	r0, r0, r8
   1390c:	bl	115c8 <memset@plt>
   13910:	ldr	r6, [sl, #56]	; 0x38
   13914:	ldr	r0, [sl, #80]	; 0x50
   13918:	ldr	r7, [sl, #84]	; 0x54
   1391c:	cmp	r7, r0
   13920:	beq	138a0 <__assert_fail@plt+0x21d0>
   13924:	b	13774 <__assert_fail@plt+0x20a4>
   13928:	ldr	r0, [sp, #36]	; 0x24
   1392c:	and	r2, r6, #1
   13930:	mvn	ip, #0
   13934:	cmp	r2, r0, lsr #31
   13938:	subeq	r6, r6, #1
   1393c:	ldrbeq	ip, [r7, r6]
   13940:	cmp	r6, #2
   13944:	blt	139b8 <__assert_fail@plt+0x22e8>
   13948:	sub	r3, r6, #2
   1394c:	mov	r0, #1
   13950:	add	r2, r0, r3, lsr #1
   13954:	ands	r5, r2, #3
   13958:	mov	r2, r6
   1395c:	beq	1397c <__assert_fail@plt+0x22ac>
   13960:	mov	r2, r6
   13964:	add	r4, r7, r2
   13968:	subs	r5, r5, #1
   1396c:	ldrb	r4, [r4, #-2]
   13970:	strb	r4, [r7, r2]
   13974:	sub	r2, r2, #2
   13978:	bne	13964 <__assert_fail@plt+0x2294>
   1397c:	cmp	r3, #6
   13980:	bcc	139b8 <__assert_fail@plt+0x22e8>
   13984:	sub	r9, r7, #4
   13988:	mov	r3, r9
   1398c:	ldrb	r4, [r3, r2]!
   13990:	sub	r2, r2, #8
   13994:	cmp	r2, #1
   13998:	ldrb	r1, [r3, #-4]
   1399c:	ldrb	r0, [r3, #-2]
   139a0:	ldrb	r5, [r3, #2]
   139a4:	strb	r5, [r3, #4]
   139a8:	strb	r0, [r3]
   139ac:	strb	r1, [r3, #-2]
   139b0:	strb	r4, [r3, #2]
   139b4:	bgt	13988 <__assert_fail@plt+0x22b8>
   139b8:	ldr	r0, [sp, #36]	; 0x24
   139bc:	movw	r4, #61768	; 0xf148
   139c0:	movt	r4, #2
   139c4:	cmp	r0, #0
   139c8:	strbpl	r0, [r7, #1]
   139cc:	addpl	r6, r6, #1
   139d0:	addmi	r7, r7, #1
   139d4:	tst	lr, #8
   139d8:	str	ip, [sp, #36]	; 0x24
   139dc:	beq	137f8 <__assert_fail@plt+0x2128>
   139e0:	cmp	r6, #0
   139e4:	mov	r9, r8
   139e8:	beq	132d0 <__assert_fail@plt+0x1c00>
   139ec:	ldr	r5, [sl, #92]	; 0x5c
   139f0:	movw	r9, #62424	; 0xf3d8
   139f4:	movt	r9, #2
   139f8:	b	13a10 <__assert_fail@plt+0x2340>
   139fc:	mov	r5, #0
   13a00:	add	r7, r7, #1
   13a04:	subs	r6, r6, #1
   13a08:	str	r5, [sl, #92]	; 0x5c
   13a0c:	beq	13aec <__assert_fail@plt+0x241c>
   13a10:	ldrb	r0, [sl, #8]
   13a14:	ldr	r1, [sl, #60]	; 0x3c
   13a18:	mov	r2, #10
   13a1c:	cmp	r0, #0
   13a20:	ldrb	r0, [r7]
   13a24:	movwne	r2, #37	; 0x25
   13a28:	cmp	r2, r0
   13a2c:	bne	13a90 <__assert_fail@plt+0x23c0>
   13a30:	cmp	r5, r1
   13a34:	bge	139fc <__assert_fail@plt+0x232c>
   13a38:	ldr	r0, [sl, #88]	; 0x58
   13a3c:	add	r1, r0, #1
   13a40:	str	r1, [sl, #88]	; 0x58
   13a44:	ldrb	r2, [sl, #9]
   13a48:	ldr	r3, [sl, #80]	; 0x50
   13a4c:	cmp	r2, #0
   13a50:	mov	r2, #32
   13a54:	movwne	r2, #64	; 0x40
   13a58:	strb	r2, [r3, r0]
   13a5c:	ldr	r0, [sl, #40]	; 0x28
   13a60:	cmp	r1, r0
   13a64:	blge	165b0 <__assert_fail@plt+0x4ee0>
   13a68:	ldr	r0, [sl, #60]	; 0x3c
   13a6c:	add	r5, r5, #1
   13a70:	cmp	r5, r0
   13a74:	blt	13a38 <__assert_fail@plt+0x2368>
   13a78:	mov	r5, #0
   13a7c:	add	r7, r7, #1
   13a80:	subs	r6, r6, #1
   13a84:	str	r5, [sl, #92]	; 0x5c
   13a88:	bne	13a10 <__assert_fail@plt+0x2340>
   13a8c:	b	13aec <__assert_fail@plt+0x241c>
   13a90:	cmp	r5, r1
   13a94:	bne	13aac <__assert_fail@plt+0x23dc>
   13a98:	ldrd	r0, [r9, #64]	; 0x40
   13a9c:	adds	r0, r0, #1
   13aa0:	adc	r1, r1, #0
   13aa4:	strd	r0, [r9, #64]	; 0x40
   13aa8:	b	13ad8 <__assert_fail@plt+0x2408>
   13aac:	bge	13ad8 <__assert_fail@plt+0x2408>
   13ab0:	ldr	r2, [sl, #88]	; 0x58
   13ab4:	ldr	r1, [sl, #80]	; 0x50
   13ab8:	add	r3, r2, #1
   13abc:	str	r3, [sl, #88]	; 0x58
   13ac0:	strb	r0, [r1, r2]
   13ac4:	ldr	r0, [sl, #40]	; 0x28
   13ac8:	cmp	r3, r0
   13acc:	blt	13ad8 <__assert_fail@plt+0x2408>
   13ad0:	bl	165b0 <__assert_fail@plt+0x4ee0>
   13ad4:	ldr	r5, [sl, #92]	; 0x5c
   13ad8:	add	r5, r5, #1
   13adc:	add	r7, r7, #1
   13ae0:	subs	r6, r6, #1
   13ae4:	str	r5, [sl, #92]	; 0x5c
   13ae8:	bne	13a10 <__assert_fail@plt+0x2340>
   13aec:	mov	r9, r8
   13af0:	b	132d0 <__assert_fail@plt+0x1c00>
   13af4:	mov	r0, r7
   13af8:	mov	r1, r6
   13afc:	bl	16460 <__assert_fail@plt+0x4d90>
   13b00:	mov	r9, r8
   13b04:	b	132d0 <__assert_fail@plt+0x1c00>
   13b08:	ldrb	r0, [r7]
   13b0c:	movw	r1, #61920	; 0xf1e0
   13b10:	movt	r1, #2
   13b14:	ldrb	r0, [r1, r0]
   13b18:	strb	r0, [r7], #1
   13b1c:	sub	r0, r6, #1
   13b20:	movw	r3, #61920	; 0xf1e0
   13b24:	cmp	r6, #1
   13b28:	movt	r3, #2
   13b2c:	beq	137c4 <__assert_fail@plt+0x20f4>
   13b30:	b	137a0 <__assert_fail@plt+0x20d0>
   13b34:	movw	r4, #61768	; 0xf148
   13b38:	movw	r9, #62424	; 0xf3d8
   13b3c:	mov	sl, r5
   13b40:	movt	r4, #2
   13b44:	movt	r9, #2
   13b48:	ldr	r8, [sp, #44]	; 0x2c
   13b4c:	ldr	r1, [sp, #36]	; 0x24
   13b50:	cmp	r1, #0
   13b54:	bmi	13d98 <__assert_fail@plt+0x26c8>
   13b58:	ldr	r0, [sl, #36]	; 0x24
   13b5c:	strb	r1, [sp, #56]	; 0x38
   13b60:	tst	r0, #8
   13b64:	bne	13c68 <__assert_fail@plt+0x2598>
   13b68:	tst	r0, #16
   13b6c:	bne	13cfc <__assert_fail@plt+0x262c>
   13b70:	mov	r3, r1
   13b74:	ldr	r1, [sl, #88]	; 0x58
   13b78:	ldr	r0, [sl, #80]	; 0x50
   13b7c:	add	r2, r1, #1
   13b80:	str	r2, [sl, #88]	; 0x58
   13b84:	strb	r3, [r0, r1]
   13b88:	ldr	r0, [sl, #40]	; 0x28
   13b8c:	cmp	r2, r0
   13b90:	blge	165b0 <__assert_fail@plt+0x4ee0>
   13b94:	ldr	r0, [sl, #36]	; 0x24
   13b98:	ldr	r5, [sl, #92]	; 0x5c
   13b9c:	tst	r0, #8
   13ba0:	beq	13da8 <__assert_fail@plt+0x26d8>
   13ba4:	cmp	r5, #1
   13ba8:	blt	13da8 <__assert_fail@plt+0x26d8>
   13bac:	ldr	r1, [sl, #60]	; 0x3c
   13bb0:	cmp	r5, r1
   13bb4:	bge	13db4 <__assert_fail@plt+0x26e4>
   13bb8:	ldr	r0, [sl, #88]	; 0x58
   13bbc:	add	r1, r0, #1
   13bc0:	str	r1, [sl, #88]	; 0x58
   13bc4:	ldrb	r2, [sl, #9]
   13bc8:	ldr	r3, [sl, #80]	; 0x50
   13bcc:	cmp	r2, #0
   13bd0:	mov	r2, #32
   13bd4:	movwne	r2, #64	; 0x40
   13bd8:	strb	r2, [r3, r0]
   13bdc:	ldr	r0, [sl, #40]	; 0x28
   13be0:	cmp	r1, r0
   13be4:	blge	165b0 <__assert_fail@plt+0x4ee0>
   13be8:	ldr	r0, [sl, #60]	; 0x3c
   13bec:	add	r5, r5, #1
   13bf0:	cmp	r5, r0
   13bf4:	blt	13bb8 <__assert_fail@plt+0x24e8>
   13bf8:	ldr	r5, [sl, #92]	; 0x5c
   13bfc:	cmp	r5, #0
   13c00:	bne	13db0 <__assert_fail@plt+0x26e0>
   13c04:	b	13df0 <__assert_fail@plt+0x2720>
   13c08:	ldrb	r0, [sl, #2]
   13c0c:	ldrb	r2, [sl, #4]
   13c10:	ldrb	r1, [sl, #3]
   13c14:	movw	r4, #61768	; 0xf148
   13c18:	movt	r4, #2
   13c1c:	orr	r0, r2, r0
   13c20:	cmp	r1, #1
   13c24:	strb	r0, [sl, #4]
   13c28:	mov	r0, #0
   13c2c:	bne	13c40 <__assert_fail@plt+0x2570>
   13c30:	ldrb	r0, [sl, #37]	; 0x25
   13c34:	mov	r1, #1
   13c38:	and	r0, r0, #2
   13c3c:	eor	r0, r1, r0, lsr #1
   13c40:	ldrb	r1, [sl, #5]
   13c44:	movw	r9, #62424	; 0xf3d8
   13c48:	movt	r9, #2
   13c4c:	orr	r0, r1, r0
   13c50:	strb	r0, [sl, #5]
   13c54:	ldr	r8, [sp, #44]	; 0x2c
   13c58:	ldr	r1, [sp, #36]	; 0x24
   13c5c:	cmp	r1, #0
   13c60:	bpl	13b58 <__assert_fail@plt+0x2488>
   13c64:	b	13d98 <__assert_fail@plt+0x26c8>
   13c68:	ldrb	r0, [sl, #8]
   13c6c:	mov	r2, r1
   13c70:	ldr	r5, [sl, #92]	; 0x5c
   13c74:	mov	r1, #10
   13c78:	uxtb	r2, r2
   13c7c:	cmp	r0, #0
   13c80:	ldr	r0, [sl, #60]	; 0x3c
   13c84:	movwne	r1, #37	; 0x25
   13c88:	cmp	r1, r2
   13c8c:	bne	13d1c <__assert_fail@plt+0x264c>
   13c90:	mov	r6, #0
   13c94:	cmp	r5, r0
   13c98:	bge	13d94 <__assert_fail@plt+0x26c4>
   13c9c:	ldr	r0, [sl, #88]	; 0x58
   13ca0:	add	r1, r0, #1
   13ca4:	str	r1, [sl, #88]	; 0x58
   13ca8:	ldrb	r2, [sl, #9]
   13cac:	ldr	r3, [sl, #80]	; 0x50
   13cb0:	cmp	r2, #0
   13cb4:	mov	r2, #32
   13cb8:	movwne	r2, #64	; 0x40
   13cbc:	strb	r2, [r3, r0]
   13cc0:	ldr	r0, [sl, #40]	; 0x28
   13cc4:	cmp	r1, r0
   13cc8:	blge	165b0 <__assert_fail@plt+0x4ee0>
   13ccc:	ldr	r0, [sl, #60]	; 0x3c
   13cd0:	add	r5, r5, #1
   13cd4:	cmp	r5, r0
   13cd8:	blt	13c9c <__assert_fail@plt+0x25cc>
   13cdc:	b	13d94 <__assert_fail@plt+0x26c4>
   13ce0:	movw	r9, #62424	; 0xf3d8
   13ce4:	mov	r8, #1
   13ce8:	movt	r9, #2
   13cec:	ldr	r1, [sp, #36]	; 0x24
   13cf0:	cmp	r1, #0
   13cf4:	bpl	13b58 <__assert_fail@plt+0x2488>
   13cf8:	b	13d98 <__assert_fail@plt+0x26c8>
   13cfc:	add	r0, sp, #56	; 0x38
   13d00:	mov	r1, #1
   13d04:	bl	16460 <__assert_fail@plt+0x4d90>
   13d08:	ldr	r0, [sl, #36]	; 0x24
   13d0c:	ldr	r5, [sl, #92]	; 0x5c
   13d10:	tst	r0, #8
   13d14:	bne	13ba4 <__assert_fail@plt+0x24d4>
   13d18:	b	13da8 <__assert_fail@plt+0x26d8>
   13d1c:	cmp	r5, r0
   13d20:	bne	13d60 <__assert_fail@plt+0x2690>
   13d24:	ldrd	r0, [r9, #64]	; 0x40
   13d28:	adds	r0, r0, #1
   13d2c:	adc	r1, r1, #0
   13d30:	strd	r0, [r9, #64]	; 0x40
   13d34:	b	13d90 <__assert_fail@plt+0x26c0>
   13d38:	ldr	r4, [sp, #56]	; 0x38
   13d3c:	cmp	r4, #0
   13d40:	beq	1261c <__assert_fail@plt+0xf4c>
   13d44:	mov	r5, r4
   13d48:	str	r4, [sl, #56]	; 0x38
   13d4c:	str	r4, [sl, #40]	; 0x28
   13d50:	ldr	r0, [sl, #60]	; 0x3c
   13d54:	cmp	r0, #0
   13d58:	bne	12660 <__assert_fail@plt+0xf90>
   13d5c:	b	12654 <__assert_fail@plt+0xf84>
   13d60:	bge	13d90 <__assert_fail@plt+0x26c0>
   13d64:	ldr	r1, [sl, #88]	; 0x58
   13d68:	ldr	r0, [sl, #80]	; 0x50
   13d6c:	ldr	r3, [sp, #36]	; 0x24
   13d70:	add	r2, r1, #1
   13d74:	str	r2, [sl, #88]	; 0x58
   13d78:	strb	r3, [r0, r1]
   13d7c:	ldr	r0, [sl, #40]	; 0x28
   13d80:	cmp	r2, r0
   13d84:	blt	13d90 <__assert_fail@plt+0x26c0>
   13d88:	bl	165b0 <__assert_fail@plt+0x4ee0>
   13d8c:	ldr	r5, [sl, #92]	; 0x5c
   13d90:	add	r6, r5, #1
   13d94:	str	r6, [sl, #92]	; 0x5c
   13d98:	ldr	r0, [sl, #36]	; 0x24
   13d9c:	ldr	r5, [sl, #92]	; 0x5c
   13da0:	tst	r0, #8
   13da4:	bne	13ba4 <__assert_fail@plt+0x24d4>
   13da8:	cmp	r5, #0
   13dac:	beq	13df0 <__assert_fail@plt+0x2720>
   13db0:	ldr	r0, [sl, #36]	; 0x24
   13db4:	tst	r0, #16
   13db8:	beq	13df0 <__assert_fail@plt+0x2720>
   13dbc:	ldr	r0, [sl, #88]	; 0x58
   13dc0:	mov	r3, #10
   13dc4:	add	r1, r0, #1
   13dc8:	str	r1, [sl, #88]	; 0x58
   13dcc:	ldrb	r2, [sl, #8]
   13dd0:	cmp	r2, #0
   13dd4:	ldr	r2, [sl, #80]	; 0x50
   13dd8:	movwne	r3, #37	; 0x25
   13ddc:	strb	r3, [r2, r0]
   13de0:	ldr	r0, [sl, #40]	; 0x28
   13de4:	cmp	r1, r0
   13de8:	blt	13df4 <__assert_fail@plt+0x2724>
   13dec:	bl	165b0 <__assert_fail@plt+0x4ee0>
   13df0:	ldr	r1, [sl, #88]	; 0x58
   13df4:	cmp	r1, #0
   13df8:	beq	13e38 <__assert_fail@plt+0x2768>
   13dfc:	ldr	r0, [sl, #80]	; 0x50
   13e00:	bl	160b0 <__assert_fail@plt+0x49e0>
   13e04:	ldrd	r2, [r9, #72]	; 0x48
   13e08:	adds	r2, r2, r0
   13e0c:	adc	r3, r3, r0, asr #31
   13e10:	cmp	r0, #0
   13e14:	strd	r2, [r9, #72]	; 0x48
   13e18:	beq	13e2c <__assert_fail@plt+0x275c>
   13e1c:	ldrd	r2, [r9, #56]	; 0x38
   13e20:	adds	r2, r2, #1
   13e24:	adc	r3, r3, #0
   13e28:	strd	r2, [r9, #56]	; 0x38
   13e2c:	ldr	r1, [sl, #88]	; 0x58
   13e30:	cmp	r0, r1
   13e34:	bne	13e78 <__assert_fail@plt+0x27a8>
   13e38:	ldrb	r0, [sl, #10]
   13e3c:	cmp	r0, #1
   13e40:	bne	1404c <__assert_fail@plt+0x297c>
   13e44:	add	r6, sp, #56	; 0x38
   13e48:	bl	15390 <__assert_fail@plt+0x3cc0>
   13e4c:	mov	r0, #3
   13e50:	mov	r1, #1
   13e54:	mov	r2, r6
   13e58:	bl	1146c <__fxstat64@plt>
   13e5c:	cmn	r0, #1
   13e60:	bgt	13ebc <__assert_fail@plt+0x27ec>
   13e64:	ldr	r0, [sp, #48]	; 0x30
   13e68:	ldr	r5, [r0]
   13e6c:	cmp	r5, #4
   13e70:	beq	13e48 <__assert_fail@plt+0x2778>
   13e74:	b	13ecc <__assert_fail@plt+0x27fc>
   13e78:	ldr	r0, [sp, #48]	; 0x30
   13e7c:	movw	r1, #56279	; 0xdbd7
   13e80:	mov	r2, #5
   13e84:	movt	r1, #1
   13e88:	ldr	r4, [r0]
   13e8c:	mov	r0, #0
   13e90:	bl	11424 <dcgettext@plt>
   13e94:	ldr	r1, [sl, #28]
   13e98:	mov	r5, r0
   13e9c:	mov	r0, #4
   13ea0:	bl	19920 <__assert_fail@plt+0x8250>
   13ea4:	mov	r1, r4
   13ea8:	movw	r4, #61768	; 0xf148
   13eac:	mov	r3, r0
   13eb0:	mov	r0, #0
   13eb4:	mov	r2, r5
   13eb8:	b	13f04 <__assert_fail@plt+0x2834>
   13ebc:	cmp	r0, #0
   13ec0:	beq	13f14 <__assert_fail@plt+0x2844>
   13ec4:	ldr	r0, [sp, #48]	; 0x30
   13ec8:	ldr	r5, [r0]
   13ecc:	movw	r1, #54936	; 0xd698
   13ed0:	mov	r0, #0
   13ed4:	mov	r2, #5
   13ed8:	movt	r1, #1
   13edc:	bl	11424 <dcgettext@plt>
   13ee0:	ldr	r1, [sl, #28]
   13ee4:	mov	r4, r0
   13ee8:	mov	r0, #4
   13eec:	bl	19920 <__assert_fail@plt+0x8250>
   13ef0:	mov	r2, r4
   13ef4:	movw	r4, #61768	; 0xf148
   13ef8:	mov	r3, r0
   13efc:	mov	r0, #0
   13f00:	mov	r1, r5
   13f04:	movt	r4, #2
   13f08:	bl	14890 <__assert_fail@plt+0x31c0>
   13f0c:	mov	r8, #1
   13f10:	b	14090 <__assert_fail@plt+0x29c0>
   13f14:	ldr	r0, [sp, #72]	; 0x48
   13f18:	and	r0, r0, #61440	; 0xf000
   13f1c:	cmp	r0, #32768	; 0x8000
   13f20:	bne	1404c <__assert_fail@plt+0x297c>
   13f24:	mov	r0, #1
   13f28:	mov	r2, #0
   13f2c:	mov	r3, #0
   13f30:	str	r0, [sp]
   13f34:	mov	r0, #1
   13f38:	bl	11490 <lseek64@plt>
   13f3c:	mov	r7, r1
   13f40:	mvn	r1, #0
   13f44:	mov	r6, r0
   13f48:	subs	r0, r1, r0
   13f4c:	sbcs	r0, r1, r7
   13f50:	bge	1404c <__assert_fail@plt+0x297c>
   13f54:	ldr	r0, [sp, #104]	; 0x68
   13f58:	ldr	r1, [sp, #108]	; 0x6c
   13f5c:	subs	r0, r0, r6
   13f60:	sbcs	r0, r1, r7
   13f64:	bge	1404c <__assert_fail@plt+0x297c>
   13f68:	bl	15390 <__assert_fail@plt+0x3cc0>
   13f6c:	mov	r0, #1
   13f70:	mov	r2, r6
   13f74:	mov	r3, r7
   13f78:	bl	11418 <ftruncate64@plt>
   13f7c:	cmn	r0, #1
   13f80:	bgt	13ff0 <__assert_fail@plt+0x2920>
   13f84:	ldr	r0, [sp, #48]	; 0x30
   13f88:	ldr	r5, [r0]
   13f8c:	cmp	r5, #4
   13f90:	beq	13f68 <__assert_fail@plt+0x2898>
   13f94:	b	14000 <__assert_fail@plt+0x2930>
   13f98:	ldr	r0, [sp, #72]	; 0x48
   13f9c:	and	r0, r0, #61440	; 0xf000
   13fa0:	cmp	r0, #32768	; 0x8000
   13fa4:	cmpne	r0, #16384	; 0x4000
   13fa8:	bne	12f68 <__assert_fail@plt+0x1898>
   13fac:	movw	r1, #54952	; 0xd6a8
   13fb0:	mov	r0, #0
   13fb4:	mov	r2, #5
   13fb8:	movt	r1, #1
   13fbc:	bl	11424 <dcgettext@plt>
   13fc0:	ldr	r1, [sl, #28]
   13fc4:	mov	r4, r0
   13fc8:	mov	r0, #4
   13fcc:	bl	19920 <__assert_fail@plt+0x8250>
   13fd0:	str	r0, [sp, #8]
   13fd4:	mov	r0, #0
   13fd8:	mov	r1, r6
   13fdc:	mov	r2, r4
   13fe0:	str	r9, [sp]
   13fe4:	str	r5, [sp, #4]
   13fe8:	bl	14890 <__assert_fail@plt+0x31c0>
   13fec:	b	12f68 <__assert_fail@plt+0x1898>
   13ff0:	cmp	r0, #0
   13ff4:	beq	1404c <__assert_fail@plt+0x297c>
   13ff8:	ldr	r0, [sp, #48]	; 0x30
   13ffc:	ldr	r5, [r0]
   14000:	movw	r1, #54952	; 0xd6a8
   14004:	mov	r0, #0
   14008:	mov	r2, #5
   1400c:	movt	r1, #1
   14010:	bl	11424 <dcgettext@plt>
   14014:	ldr	r1, [sl, #28]
   14018:	mov	r4, r0
   1401c:	mov	r0, #4
   14020:	bl	19920 <__assert_fail@plt+0x8250>
   14024:	stm	sp, {r6, r7}
   14028:	str	r0, [sp, #8]
   1402c:	mov	r2, r4
   14030:	movw	r4, #61768	; 0xf148
   14034:	mov	r0, #0
   14038:	mov	r1, r5
   1403c:	movt	r4, #2
   14040:	bl	14890 <__assert_fail@plt+0x31c0>
   14044:	mov	r8, #1
   14048:	b	14090 <__assert_fail@plt+0x29c0>
   1404c:	ldrb	r0, [sl, #37]	; 0x25
   14050:	tst	r0, #192	; 0xc0
   14054:	beq	14090 <__assert_fail@plt+0x29c0>
   14058:	ldr	r0, [r4]
   1405c:	cmp	r0, #4
   14060:	bne	14090 <__assert_fail@plt+0x29c0>
   14064:	ldrd	r0, [r4, #16]
   14068:	mvn	r3, #0
   1406c:	subs	r2, r3, r0
   14070:	sbcs	r2, r3, r1
   14074:	bge	14090 <__assert_fail@plt+0x29c0>
   14078:	ldrd	r2, [r9, #72]	; 0x48
   1407c:	subs	r0, r0, r2
   14080:	sbcs	r0, r1, r3
   14084:	movlt	r0, #0
   14088:	movlt	r1, #0
   1408c:	bllt	156b8 <__assert_fail@plt+0x3fe8>
   14090:	bl	1492c <__assert_fail@plt+0x325c>
   14094:	cmp	r0, #0
   14098:	ldr	r3, [r4, #12]
   1409c:	ldrb	r1, [sl, #2]
   140a0:	movne	r8, r0
   140a4:	ldr	r0, [r4, #8]
   140a8:	orrs	r0, r0, r3
   140ac:	ldreq	r0, [sl, #44]	; 0x2c
   140b0:	cmpeq	r0, #0
   140b4:	beq	14190 <__assert_fail@plt+0x2ac0>
   140b8:	ldrb	r0, [sl, #4]
   140bc:	cmp	r0, #0
   140c0:	bne	140cc <__assert_fail@plt+0x29fc>
   140c4:	eors	r1, r1, #1
   140c8:	bne	14274 <__assert_fail@plt+0x2ba4>
   140cc:	ldr	r2, [r9, #80]	; 0x50
   140d0:	ldr	r1, [r9, #84]	; 0x54
   140d4:	cmp	r0, #0
   140d8:	orrseq	r3, r2, r1
   140dc:	beq	14274 <__assert_fail@plt+0x2ba4>
   140e0:	ldrb	r3, [sl, #1]
   140e4:	cmp	r3, #0
   140e8:	beq	14268 <__assert_fail@plt+0x2b98>
   140ec:	ldr	r6, [sl, #104]	; 0x68
   140f0:	ldr	r3, [sl, #108]	; 0x6c
   140f4:	mvn	r5, #0
   140f8:	subs	r7, r5, r6
   140fc:	sbcs	r7, r5, r3
   14100:	bge	14274 <__assert_fail@plt+0x2ba4>
   14104:	orrs	r7, r2, r1
   14108:	mov	r4, r2
   1410c:	movwne	r7, #1
   14110:	cmp	r0, #0
   14114:	movwne	r0, #1
   14118:	ands	ip, r0, r7
   1411c:	mov	r7, r1
   14120:	movwne	r4, #0
   14124:	movwne	r7, #0
   14128:	subs	r0, r6, r4
   1412c:	sbc	r3, r3, r7
   14130:	subs	r5, r0, r2
   14134:	sbc	r6, r3, r1
   14138:	cmp	ip, #0
   1413c:	moveq	r5, r0
   14140:	moveq	r6, r3
   14144:	orrs	r0, r4, r7
   14148:	bne	14168 <__assert_fail@plt+0x2a98>
   1414c:	ldr	r2, [sl, #12]
   14150:	mov	r0, r5
   14154:	mov	r1, r6
   14158:	asr	r3, r2, #31
   1415c:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   14160:	subs	r5, r5, r2
   14164:	sbc	r6, r6, r3
   14168:	mov	r0, #4
   1416c:	stm	sp, {r4, r7}
   14170:	mov	r2, r5
   14174:	mov	r3, r6
   14178:	str	r0, [sp, #8]
   1417c:	mov	r0, #0
   14180:	bl	11394 <posix_fadvise64@plt>
   14184:	movw	r4, #61768	; 0xf148
   14188:	movt	r4, #2
   1418c:	b	14274 <__assert_fail@plt+0x2ba4>
   14190:	cmp	r1, #0
   14194:	beq	143b8 <__assert_fail@plt+0x2ce8>
   14198:	ldrb	r2, [sl, #4]
   1419c:	ldrd	r0, [r9, #80]	; 0x50
   141a0:	cmp	r2, #0
   141a4:	orrseq	r3, r0, r1
   141a8:	beq	143b8 <__assert_fail@plt+0x2ce8>
   141ac:	ldrb	r3, [sl, #1]
   141b0:	cmp	r3, #0
   141b4:	beq	14364 <__assert_fail@plt+0x2c94>
   141b8:	ldr	r4, [sl, #104]	; 0x68
   141bc:	ldr	r3, [sl, #108]	; 0x6c
   141c0:	mvn	r6, #0
   141c4:	subs	r7, r6, r4
   141c8:	sbcs	r7, r6, r3
   141cc:	bge	14370 <__assert_fail@plt+0x2ca0>
   141d0:	orrs	r7, r0, r1
   141d4:	mov	r6, r0
   141d8:	mov	r5, r1
   141dc:	str	r8, [sp, #44]	; 0x2c
   141e0:	movwne	r7, #1
   141e4:	cmp	r2, #0
   141e8:	movwne	r2, #1
   141ec:	ands	r2, r2, r7
   141f0:	movwne	r6, #0
   141f4:	movwne	r5, #0
   141f8:	subs	r4, r4, r6
   141fc:	sbc	r3, r3, r5
   14200:	subs	r8, r4, r0
   14204:	sbc	r7, r3, r1
   14208:	cmp	r2, #0
   1420c:	moveq	r8, r4
   14210:	moveq	r7, r3
   14214:	orrs	r0, r6, r5
   14218:	bne	14238 <__assert_fail@plt+0x2b68>
   1421c:	ldr	r2, [sl, #12]
   14220:	mov	r0, r8
   14224:	mov	r1, r7
   14228:	asr	r3, r2, #31
   1422c:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   14230:	subs	r8, r8, r2
   14234:	sbc	r7, r7, r3
   14238:	mov	r0, #4
   1423c:	mov	r2, r8
   14240:	mov	r3, r7
   14244:	str	r6, [sp]
   14248:	str	r5, [sp, #4]
   1424c:	str	r0, [sp, #8]
   14250:	mov	r0, #0
   14254:	bl	11394 <posix_fadvise64@plt>
   14258:	ldr	r8, [sp, #44]	; 0x2c
   1425c:	cmn	r0, #1
   14260:	bne	143b8 <__assert_fail@plt+0x2ce8>
   14264:	b	14370 <__assert_fail@plt+0x2ca0>
   14268:	ldr	r1, [sp, #48]	; 0x30
   1426c:	mov	r0, #29
   14270:	str	r0, [r1]
   14274:	ldrb	r5, [sl, #5]
   14278:	cmp	r5, #0
   1427c:	ldrbeq	r0, [sl, #3]
   14280:	cmpeq	r0, #0
   14284:	beq	14500 <__assert_fail@plt+0x2e30>
   14288:	ldrd	r6, [r9, #88]	; 0x58
   1428c:	cmp	r5, #0
   14290:	orrseq	r0, r6, r7
   14294:	beq	14500 <__assert_fail@plt+0x2e30>
   14298:	ldrd	r0, [r4, #24]
   1429c:	mvn	r9, #0
   142a0:	eor	r2, r1, r9
   142a4:	eor	r3, r0, r9
   142a8:	orrs	r2, r3, r2
   142ac:	beq	14500 <__assert_fail@plt+0x2e30>
   142b0:	cmn	r1, #1
   142b4:	bgt	142e0 <__assert_fail@plt+0x2c10>
   142b8:	mov	r0, #1
   142bc:	mov	r2, #0
   142c0:	mov	r3, #0
   142c4:	str	r0, [sp]
   142c8:	mov	r0, #1
   142cc:	bl	11490 <lseek64@plt>
   142d0:	subs	r2, r9, r0
   142d4:	strd	r0, [r4, #24]
   142d8:	sbcs	r2, r9, r1
   142dc:	bge	14500 <__assert_fail@plt+0x2e30>
   142e0:	orrs	r2, r6, r7
   142e4:	mov	r4, r6
   142e8:	movwne	r2, #1
   142ec:	cmp	r5, #0
   142f0:	movwne	r5, #1
   142f4:	ands	r2, r5, r2
   142f8:	mov	r5, r7
   142fc:	movwne	r4, #0
   14300:	movwne	r5, #0
   14304:	subs	r0, r0, r4
   14308:	sbc	r1, r1, r5
   1430c:	subs	r9, r0, r6
   14310:	sbc	r6, r1, r7
   14314:	cmp	r2, #0
   14318:	moveq	r9, r0
   1431c:	moveq	r6, r1
   14320:	orrs	r0, r4, r5
   14324:	bne	14344 <__assert_fail@plt+0x2c74>
   14328:	ldr	r2, [sl, #12]
   1432c:	mov	r0, r9
   14330:	mov	r1, r6
   14334:	asr	r3, r2, #31
   14338:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   1433c:	subs	r9, r9, r2
   14340:	sbc	r6, r6, r3
   14344:	mov	r0, #4
   14348:	stm	sp, {r4, r5}
   1434c:	mov	r2, r9
   14350:	mov	r3, r6
   14354:	str	r0, [sp, #8]
   14358:	mov	r0, #1
   1435c:	bl	11394 <posix_fadvise64@plt>
   14360:	b	14500 <__assert_fail@plt+0x2e30>
   14364:	ldr	r1, [sp, #48]	; 0x30
   14368:	mov	r0, #29
   1436c:	str	r0, [r1]
   14370:	ldr	r0, [sp, #48]	; 0x30
   14374:	movw	r1, #55003	; 0xd6db
   14378:	mov	r2, #5
   1437c:	movt	r1, #1
   14380:	ldr	r4, [r0]
   14384:	mov	r0, #0
   14388:	bl	11424 <dcgettext@plt>
   1438c:	ldr	r2, [sl, #16]
   14390:	mov	r5, r0
   14394:	mov	r0, #0
   14398:	mov	r1, #3
   1439c:	bl	19b9c <__assert_fail@plt+0x84cc>
   143a0:	mov	r3, r0
   143a4:	mov	r0, #0
   143a8:	mov	r1, r4
   143ac:	mov	r2, r5
   143b0:	bl	14890 <__assert_fail@plt+0x31c0>
   143b4:	mov	r8, #1
   143b8:	ldrb	r0, [sl, #3]
   143bc:	cmp	r0, #1
   143c0:	bne	14500 <__assert_fail@plt+0x2e30>
   143c4:	ldrb	r7, [sl, #5]
   143c8:	ldr	r6, [r9, #88]	; 0x58
   143cc:	ldr	r5, [r9, #92]	; 0x5c
   143d0:	cmp	r7, #0
   143d4:	orrseq	r0, r6, r5
   143d8:	beq	14500 <__assert_fail@plt+0x2e30>
   143dc:	movw	r4, #61768	; 0xf148
   143e0:	movt	r4, #2
   143e4:	ldrd	r0, [r4, #24]
   143e8:	mov	r9, r4
   143ec:	mvn	r4, #0
   143f0:	eor	r2, r1, r4
   143f4:	eor	r3, r0, r4
   143f8:	orrs	r2, r3, r2
   143fc:	beq	144b8 <__assert_fail@plt+0x2de8>
   14400:	cmn	r1, #1
   14404:	bgt	14430 <__assert_fail@plt+0x2d60>
   14408:	mov	r0, #1
   1440c:	mov	r2, #0
   14410:	mov	r3, #0
   14414:	str	r0, [sp]
   14418:	mov	r0, #1
   1441c:	bl	11490 <lseek64@plt>
   14420:	subs	r2, r4, r0
   14424:	strd	r0, [r9, #24]
   14428:	sbcs	r2, r4, r1
   1442c:	bge	144b8 <__assert_fail@plt+0x2de8>
   14430:	orrs	r2, r6, r5
   14434:	mov	r4, r6
   14438:	movwne	r2, #1
   1443c:	cmp	r7, #0
   14440:	movwne	r7, #1
   14444:	ands	r2, r7, r2
   14448:	mov	r7, r5
   1444c:	movwne	r4, #0
   14450:	movwne	r7, #0
   14454:	subs	r0, r0, r4
   14458:	sbc	r1, r1, r7
   1445c:	subs	r6, r0, r6
   14460:	sbc	r5, r1, r5
   14464:	cmp	r2, #0
   14468:	moveq	r6, r0
   1446c:	moveq	r5, r1
   14470:	orrs	r0, r4, r7
   14474:	bne	14494 <__assert_fail@plt+0x2dc4>
   14478:	ldr	r2, [sl, #12]
   1447c:	mov	r0, r6
   14480:	mov	r1, r5
   14484:	asr	r3, r2, #31
   14488:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   1448c:	subs	r6, r6, r2
   14490:	sbc	r5, r5, r3
   14494:	mov	r0, #4
   14498:	stm	sp, {r4, r7}
   1449c:	mov	r2, r6
   144a0:	mov	r3, r5
   144a4:	str	r0, [sp, #8]
   144a8:	mov	r0, #1
   144ac:	bl	11394 <posix_fadvise64@plt>
   144b0:	cmn	r0, #1
   144b4:	bne	14500 <__assert_fail@plt+0x2e30>
   144b8:	ldr	r0, [sp, #48]	; 0x30
   144bc:	movw	r1, #55003	; 0xd6db
   144c0:	mov	r2, #5
   144c4:	movt	r1, #1
   144c8:	ldr	r4, [r0]
   144cc:	mov	r0, #0
   144d0:	bl	11424 <dcgettext@plt>
   144d4:	ldr	r2, [sl, #28]
   144d8:	mov	r5, r0
   144dc:	mov	r0, #0
   144e0:	mov	r1, #3
   144e4:	bl	19b9c <__assert_fail@plt+0x84cc>
   144e8:	mov	r3, r0
   144ec:	mov	r0, #0
   144f0:	mov	r1, r4
   144f4:	mov	r2, r5
   144f8:	bl	14890 <__assert_fail@plt+0x31c0>
   144fc:	mov	r8, #1
   14500:	bl	15390 <__assert_fail@plt+0x3cc0>
   14504:	bl	15440 <__assert_fail@plt+0x3d70>
   14508:	bl	1553c <__assert_fail@plt+0x3e6c>
   1450c:	mov	r0, r8
   14510:	sub	sp, fp, #28
   14514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14518:	ldr	r0, [sp, #48]	; 0x30
   1451c:	movw	r1, #56248	; 0xdbb8
   14520:	mov	r2, #5
   14524:	movt	r1, #1
   14528:	ldr	r4, [r0]
   1452c:	mov	r0, #0
   14530:	bl	11424 <dcgettext@plt>
   14534:	ldr	r1, [sl, #28]
   14538:	mov	r5, r0
   1453c:	mov	r0, #4
   14540:	bl	19920 <__assert_fail@plt+0x8250>
   14544:	mov	r3, r0
   14548:	mov	r0, #0
   1454c:	mov	r1, r4
   14550:	mov	r2, r5
   14554:	bl	14890 <__assert_fail@plt+0x31c0>
   14558:	bl	1634c <__assert_fail@plt+0x4c7c>
   1455c:	movw	r1, #55676	; 0xd97c
   14560:	movt	r1, #1
   14564:	b	14694 <__assert_fail@plt+0x2fc4>
   14568:	mov	r0, #1
   1456c:	str	r0, [sp, #52]	; 0x34
   14570:	b	1457c <__assert_fail@plt+0x2eac>
   14574:	cmp	r1, #1
   14578:	bne	14584 <__assert_fail@plt+0x2eb4>
   1457c:	mov	r4, #75	; 0x4b
   14580:	b	14588 <__assert_fail@plt+0x2eb8>
   14584:	mov	r4, #0
   14588:	movw	r1, #55486	; 0xd8be
   1458c:	mov	r0, #0
   14590:	mov	r2, #5
   14594:	movt	r1, #1
   14598:	bl	11424 <dcgettext@plt>
   1459c:	mov	r5, r0
   145a0:	mov	r0, r9
   145a4:	bl	19e48 <__assert_fail@plt+0x8778>
   145a8:	movw	r2, #55479	; 0xd8b7
   145ac:	str	r0, [sp]
   145b0:	mov	r0, #1
   145b4:	mov	r1, r4
   145b8:	mov	r3, r5
   145bc:	movt	r2, #1
   145c0:	bl	14890 <__assert_fail@plt+0x31c0>
   145c4:	movw	r1, #55438	; 0xd88e
   145c8:	mov	r0, #0
   145cc:	mov	r2, #5
   145d0:	movt	r1, #1
   145d4:	bl	11424 <dcgettext@plt>
   145d8:	mov	r4, r0
   145dc:	movw	r0, #55837	; 0xda1d
   145e0:	movt	r0, #1
   145e4:	b	14640 <__assert_fail@plt+0x2f70>
   145e8:	movw	r1, #55419	; 0xd87b
   145ec:	mov	r0, #0
   145f0:	mov	r2, #5
   145f4:	movt	r1, #1
   145f8:	bl	11424 <dcgettext@plt>
   145fc:	mov	r4, r0
   14600:	movw	r0, #55501	; 0xd8cd
   14604:	movt	r0, #1
   14608:	b	14640 <__assert_fail@plt+0x2f70>
   1460c:	movw	r1, #55438	; 0xd88e
   14610:	mov	r0, #0
   14614:	mov	r2, #5
   14618:	movt	r1, #1
   1461c:	bl	11424 <dcgettext@plt>
   14620:	ldr	r1, [sl, #32]
   14624:	movw	r2, #55524	; 0xd8e4
   14628:	mov	r4, r0
   1462c:	movw	r0, #55512	; 0xd8d8
   14630:	movt	r2, #1
   14634:	movt	r0, #1
   14638:	tst	r1, #4
   1463c:	moveq	r0, r2
   14640:	bl	19e48 <__assert_fail@plt+0x8778>
   14644:	movw	r2, #55479	; 0xd8b7
   14648:	str	r0, [sp]
   1464c:	mov	r0, #0
   14650:	mov	r1, #0
   14654:	mov	r3, r4
   14658:	movt	r2, #1
   1465c:	bl	14890 <__assert_fail@plt+0x31c0>
   14660:	mov	r0, #1
   14664:	bl	117d0 <__assert_fail@plt+0x100>
   14668:	movw	r1, #55535	; 0xd8ef
   1466c:	movt	r1, #1
   14670:	b	14694 <__assert_fail@plt+0x2fc4>
   14674:	movw	r1, #55580	; 0xd91c
   14678:	movt	r1, #1
   1467c:	b	14694 <__assert_fail@plt+0x2fc4>
   14680:	movw	r1, #55613	; 0xd93d
   14684:	movt	r1, #1
   14688:	b	14694 <__assert_fail@plt+0x2fc4>
   1468c:	movw	r1, #55644	; 0xd95c
   14690:	movt	r1, #1
   14694:	mov	r0, #0
   14698:	mov	r2, #5
   1469c:	bl	11424 <dcgettext@plt>
   146a0:	mov	r2, r0
   146a4:	mov	r0, #1
   146a8:	mov	r1, #0
   146ac:	bl	14890 <__assert_fail@plt+0x31c0>
   146b0:	movw	r1, #54859	; 0xd64b
   146b4:	mov	r0, #0
   146b8:	mov	r2, #5
   146bc:	movt	r1, #1
   146c0:	bl	11424 <dcgettext@plt>
   146c4:	ldrd	r4, [sl, #112]	; 0x70
   146c8:	mov	r2, r0
   146cc:	ldr	r0, [sl, #40]	; 0x28
   146d0:	stm	sp, {r4, r5}
   146d4:	str	r0, [sp, #8]
   146d8:	mov	r0, #1
   146dc:	mov	r1, #0
   146e0:	bl	14890 <__assert_fail@plt+0x31c0>
   146e4:	movw	r1, #56360	; 0xdc28
   146e8:	mov	r0, #0
   146ec:	mov	r2, #5
   146f0:	mov	r6, #0
   146f4:	movt	r1, #1
   146f8:	bl	11424 <dcgettext@plt>
   146fc:	ldr	r5, [sl, #56]	; 0x38
   14700:	mov	r4, r0
   14704:	mov	r0, #1
   14708:	add	r2, sp, #56	; 0x38
   1470c:	movw	r3, #497	; 0x1f1
   14710:	stm	sp, {r0, r6}
   14714:	str	r0, [sp, #8]
   14718:	str	r6, [sp, #12]
   1471c:	asr	r1, r5, #31
   14720:	mov	r0, r5
   14724:	bl	16c58 <__assert_fail@plt+0x5588>
   14728:	str	r0, [sp]
   1472c:	mov	r0, #1
   14730:	mov	r1, #0
   14734:	mov	r2, r4
   14738:	mov	r3, r5
   1473c:	bl	14890 <__assert_fail@plt+0x31c0>
   14740:	push	{fp, lr}
   14744:	mov	fp, sp
   14748:	movw	r0, #62304	; 0xf360
   1474c:	movt	r0, #2
   14750:	ldrb	r0, [r0]
   14754:	cmp	r0, #0
   14758:	beq	1477c <__assert_fail@plt+0x30ac>
   1475c:	movw	r0, #61904	; 0xf1d0
   14760:	movt	r0, #2
   14764:	ldr	r0, [r0]
   14768:	bl	1666c <__assert_fail@plt+0x4f9c>
   1476c:	cmp	r0, #0
   14770:	popeq	{fp, pc}
   14774:	mov	r0, #1
   14778:	bl	113e8 <_exit@plt>
   1477c:	pop	{fp, lr}
   14780:	b	16710 <__assert_fail@plt+0x5040>
   14784:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14788:	add	fp, sp, #24
   1478c:	sub	sp, sp, #104	; 0x68
   14790:	bic	r4, r1, #33024	; 0x8100
   14794:	cmp	r4, #0
   14798:	beq	14878 <__assert_fail@plt+0x31a8>
   1479c:	mov	r1, #3
   147a0:	mov	r8, r2
   147a4:	mov	r5, r0
   147a8:	bl	16898 <__assert_fail@plt+0x51c8>
   147ac:	cmp	r0, #0
   147b0:	bmi	147fc <__assert_fail@plt+0x312c>
   147b4:	orr	r6, r0, r4
   147b8:	mov	r7, r0
   147bc:	cmp	r0, r6
   147c0:	beq	14878 <__assert_fail@plt+0x31a8>
   147c4:	tst	r6, #16384	; 0x4000
   147c8:	beq	14858 <__assert_fail@plt+0x3188>
   147cc:	mov	r4, sp
   147d0:	bl	15390 <__assert_fail@plt+0x3cc0>
   147d4:	mov	r0, #3
   147d8:	mov	r1, r5
   147dc:	mov	r2, r4
   147e0:	bl	1146c <__fxstat64@plt>
   147e4:	cmn	r0, #1
   147e8:	bgt	1483c <__assert_fail@plt+0x316c>
   147ec:	bl	11598 <__errno_location@plt>
   147f0:	ldr	r0, [r0]
   147f4:	cmp	r0, #4
   147f8:	beq	147d0 <__assert_fail@plt+0x3100>
   147fc:	bl	11598 <__errno_location@plt>
   14800:	movw	r1, #56191	; 0xdb7f
   14804:	ldr	r4, [r0]
   14808:	mov	r0, #0
   1480c:	mov	r2, #5
   14810:	movt	r1, #1
   14814:	bl	11424 <dcgettext@plt>
   14818:	mov	r5, r0
   1481c:	mov	r0, #4
   14820:	mov	r1, r8
   14824:	bl	19920 <__assert_fail@plt+0x8250>
   14828:	mov	r3, r0
   1482c:	mov	r0, #1
   14830:	mov	r1, r4
   14834:	mov	r2, r5
   14838:	bl	14890 <__assert_fail@plt+0x31c0>
   1483c:	cmp	r0, #0
   14840:	bne	147fc <__assert_fail@plt+0x312c>
   14844:	ldr	r0, [sp, #16]
   14848:	and	r0, r0, #61440	; 0xf000
   1484c:	cmp	r0, #16384	; 0x4000
   14850:	bne	14880 <__assert_fail@plt+0x31b0>
   14854:	bic	r6, r6, #16384	; 0x4000
   14858:	cmp	r7, r6
   1485c:	beq	14878 <__assert_fail@plt+0x31a8>
   14860:	mov	r0, r5
   14864:	mov	r1, #4
   14868:	mov	r2, r6
   1486c:	bl	16898 <__assert_fail@plt+0x51c8>
   14870:	cmn	r0, #1
   14874:	beq	147fc <__assert_fail@plt+0x312c>
   14878:	sub	sp, fp, #24
   1487c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14880:	bl	11598 <__errno_location@plt>
   14884:	mov	r1, #20
   14888:	str	r1, [r0]
   1488c:	b	147fc <__assert_fail@plt+0x312c>
   14890:	sub	sp, sp, #4
   14894:	push	{r4, r5, r6, r7, fp, lr}
   14898:	add	fp, sp, #16
   1489c:	sub	sp, sp, #4
   148a0:	movw	r7, #62304	; 0xf360
   148a4:	mov	r6, r0
   148a8:	mov	r4, r2
   148ac:	mov	r5, r1
   148b0:	str	r3, [fp, #8]
   148b4:	movt	r7, #2
   148b8:	ldr	r0, [r7, #76]	; 0x4c
   148bc:	cmp	r0, #1
   148c0:	blt	148f8 <__assert_fail@plt+0x3228>
   148c4:	movw	r0, #61904	; 0xf1d0
   148c8:	movt	r0, #2
   148cc:	ldr	r0, [r0]
   148d0:	ldr	r1, [r0, #20]
   148d4:	ldr	r2, [r0, #24]
   148d8:	cmp	r1, r2
   148dc:	bcs	14920 <__assert_fail@plt+0x3250>
   148e0:	add	r2, r1, #1
   148e4:	str	r2, [r0, #20]
   148e8:	mov	r0, #10
   148ec:	strb	r0, [r1]
   148f0:	mov	r0, #0
   148f4:	str	r0, [r7, #76]	; 0x4c
   148f8:	add	r3, fp, #8
   148fc:	mov	r0, r6
   14900:	mov	r1, r5
   14904:	mov	r2, r4
   14908:	str	r3, [sp]
   1490c:	bl	19e60 <__assert_fail@plt+0x8790>
   14910:	sub	sp, fp, #16
   14914:	pop	{r4, r5, r6, r7, fp, lr}
   14918:	add	sp, sp, #4
   1491c:	bx	lr
   14920:	mov	r1, #10
   14924:	bl	11628 <__overflow@plt>
   14928:	b	148f0 <__assert_fail@plt+0x3220>
   1492c:	push	{r4, r5, r6, r7, fp, lr}
   14930:	add	fp, sp, #16
   14934:	movw	r6, #62304	; 0xf360
   14938:	movt	r6, #2
   1493c:	ldr	r7, [r6, #36]	; 0x24
   14940:	bic	r0, r7, #49152	; 0xc000
   14944:	tst	r7, #16384	; 0x4000
   14948:	str	r0, [r6, #36]	; 0x24
   1494c:	bne	14960 <__assert_fail@plt+0x3290>
   14950:	mov	r4, #0
   14954:	tst	r7, #32768	; 0x8000
   14958:	bne	14994 <__assert_fail@plt+0x32c4>
   1495c:	b	14a08 <__assert_fail@plt+0x3338>
   14960:	bl	15390 <__assert_fail@plt+0x3cc0>
   14964:	mov	r0, #1
   14968:	bl	11694 <fdatasync@plt>
   1496c:	cmn	r0, #1
   14970:	bgt	14a10 <__assert_fail@plt+0x3340>
   14974:	bl	11598 <__errno_location@plt>
   14978:	ldr	r5, [r0]
   1497c:	cmp	r5, #4
   14980:	beq	14960 <__assert_fail@plt+0x3290>
   14984:	cmp	r5, #22
   14988:	mov	r4, #0
   1498c:	cmpne	r5, #38	; 0x26
   14990:	bne	14a30 <__assert_fail@plt+0x3360>
   14994:	bl	15390 <__assert_fail@plt+0x3cc0>
   14998:	mov	r0, #1
   1499c:	bl	1137c <fsync@plt>
   149a0:	cmn	r0, #1
   149a4:	bgt	149bc <__assert_fail@plt+0x32ec>
   149a8:	bl	11598 <__errno_location@plt>
   149ac:	ldr	r1, [r0]
   149b0:	cmp	r1, #4
   149b4:	beq	14994 <__assert_fail@plt+0x32c4>
   149b8:	b	149c8 <__assert_fail@plt+0x32f8>
   149bc:	cmp	r0, #0
   149c0:	beq	14a08 <__assert_fail@plt+0x3338>
   149c4:	bl	11598 <__errno_location@plt>
   149c8:	movw	r1, #56622	; 0xdd2e
   149cc:	ldr	r4, [r0]
   149d0:	mov	r0, #0
   149d4:	mov	r2, #5
   149d8:	movt	r1, #1
   149dc:	bl	11424 <dcgettext@plt>
   149e0:	ldr	r1, [r6, #28]
   149e4:	mov	r5, r0
   149e8:	mov	r0, #4
   149ec:	bl	19920 <__assert_fail@plt+0x8250>
   149f0:	mov	r3, r0
   149f4:	mov	r0, #0
   149f8:	mov	r1, r4
   149fc:	mov	r2, r5
   14a00:	bl	14890 <__assert_fail@plt+0x31c0>
   14a04:	mov	r4, #1
   14a08:	mov	r0, r4
   14a0c:	pop	{r4, r5, r6, r7, fp, pc}
   14a10:	cmp	r0, #0
   14a14:	beq	14950 <__assert_fail@plt+0x3280>
   14a18:	bl	11598 <__errno_location@plt>
   14a1c:	ldr	r5, [r0]
   14a20:	cmp	r5, #22
   14a24:	mov	r4, #0
   14a28:	cmpne	r5, #38	; 0x26
   14a2c:	beq	14994 <__assert_fail@plt+0x32c4>
   14a30:	movw	r1, #56598	; 0xdd16
   14a34:	mov	r0, #0
   14a38:	mov	r2, #5
   14a3c:	movt	r1, #1
   14a40:	bl	11424 <dcgettext@plt>
   14a44:	ldr	r1, [r6, #28]
   14a48:	mov	r4, r0
   14a4c:	mov	r0, #4
   14a50:	bl	19920 <__assert_fail@plt+0x8250>
   14a54:	mov	r3, r0
   14a58:	mov	r0, #0
   14a5c:	mov	r1, r5
   14a60:	mov	r2, r4
   14a64:	bl	14890 <__assert_fail@plt+0x31c0>
   14a68:	mov	r4, #1
   14a6c:	b	14994 <__assert_fail@plt+0x32c4>
   14a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a74:	add	fp, sp, #28
   14a78:	sub	sp, sp, #20
   14a7c:	mov	r8, r0
   14a80:	cmp	r0, #0
   14a84:	beq	14b3c <__assert_fail@plt+0x346c>
   14a88:	movw	r1, #62304	; 0xf360
   14a8c:	orrs	r0, r2, r3
   14a90:	movw	r0, #62424	; 0xf3d8
   14a94:	movt	r0, #2
   14a98:	movt	r1, #2
   14a9c:	ldr	r6, [r0, #88]	; 0x58
   14aa0:	ldr	r9, [r0, #92]	; 0x5c
   14aa4:	ldrb	sl, [r1, #5]
   14aa8:	beq	14be0 <__assert_fail@plt+0x3510>
   14aac:	cmn	r9, #1
   14ab0:	mov	r7, #0
   14ab4:	mov	r1, #0
   14ab8:	movwgt	r7, #1
   14abc:	adds	r5, r6, r2
   14ac0:	mov	r6, #0
   14ac4:	adc	r4, r9, r3
   14ac8:	cmn	r4, #1
   14acc:	movwgt	r6, #1
   14ad0:	subs	r6, r7, r6
   14ad4:	movwne	r6, #1
   14ad8:	cmn	r3, #1
   14adc:	movwgt	r1, #1
   14ae0:	sub	r1, r7, r1
   14ae4:	clz	r1, r1
   14ae8:	lsr	r1, r1, #5
   14aec:	ands	r1, r1, r6
   14af0:	mvnne	r4, #-2147483648	; 0x80000000
   14af4:	mvnne	r5, #0
   14af8:	asr	r1, r4, #31
   14afc:	adds	r6, r5, r1, lsr #15
   14b00:	adc	r9, r4, #0
   14b04:	bfc	r6, #0, #17
   14b08:	subs	r1, r5, r6
   14b0c:	sbc	r7, r4, r9
   14b10:	str	r1, [r0, #88]	; 0x58
   14b14:	subs	r1, r1, r5
   14b18:	str	r7, [r0, #92]	; 0x5c
   14b1c:	mov	r0, #1
   14b20:	sbcs	r1, r7, r4
   14b24:	bge	14d90 <__assert_fail@plt+0x36c0>
   14b28:	orrs	r0, r6, r9
   14b2c:	mov	r4, #0
   14b30:	mov	r0, #1
   14b34:	bne	14bec <__assert_fail@plt+0x351c>
   14b38:	b	14d90 <__assert_fail@plt+0x36c0>
   14b3c:	movw	r1, #62304	; 0xf360
   14b40:	orrs	r0, r2, r3
   14b44:	movw	r0, #62424	; 0xf3d8
   14b48:	movt	r0, #2
   14b4c:	movt	r1, #2
   14b50:	ldr	r6, [r0, #80]	; 0x50
   14b54:	ldr	r9, [r0, #84]	; 0x54
   14b58:	ldrb	sl, [r1, #4]
   14b5c:	beq	14be0 <__assert_fail@plt+0x3510>
   14b60:	cmn	r9, #1
   14b64:	mov	r4, #0
   14b68:	mov	r1, #0
   14b6c:	movwgt	r4, #1
   14b70:	adds	r5, r6, r2
   14b74:	mov	r6, #0
   14b78:	adc	r7, r9, r3
   14b7c:	cmn	r7, #1
   14b80:	movwgt	r6, #1
   14b84:	subs	r6, r4, r6
   14b88:	movwne	r6, #1
   14b8c:	cmn	r3, #1
   14b90:	movwgt	r1, #1
   14b94:	sub	r1, r4, r1
   14b98:	clz	r1, r1
   14b9c:	lsr	r1, r1, #5
   14ba0:	ands	r1, r1, r6
   14ba4:	mvnne	r7, #-2147483648	; 0x80000000
   14ba8:	mvnne	r5, #0
   14bac:	asr	r1, r7, #31
   14bb0:	adds	r6, r5, r1, lsr #15
   14bb4:	adc	r9, r7, #0
   14bb8:	bfc	r6, #0, #17
   14bbc:	subs	r4, r5, r6
   14bc0:	sbc	r1, r7, r9
   14bc4:	subs	r5, r4, r5
   14bc8:	str	r4, [r0, #80]	; 0x50
   14bcc:	str	r1, [r0, #84]	; 0x54
   14bd0:	mov	r0, #1
   14bd4:	sbcs	r1, r1, r7
   14bd8:	blt	14b28 <__assert_fail@plt+0x3458>
   14bdc:	b	14d90 <__assert_fail@plt+0x36c0>
   14be0:	orrs	r0, r6, r9
   14be4:	mov	r4, #1
   14be8:	movwne	r0, #1
   14bec:	cmp	sl, #0
   14bf0:	mov	r5, r0
   14bf4:	orreq	r1, r6, r2
   14bf8:	orreq	r7, r9, r3
   14bfc:	moveq	r0, #1
   14c00:	orrseq	r1, r1, r7
   14c04:	beq	14d90 <__assert_fail@plt+0x36c0>
   14c08:	orrs	r2, r2, r3
   14c0c:	beq	14c78 <__assert_fail@plt+0x35a8>
   14c10:	movw	r0, #62424	; 0xf3d8
   14c14:	cmp	r8, #0
   14c18:	movt	r0, #2
   14c1c:	add	r1, r0, #88	; 0x58
   14c20:	addeq	r1, r0, #80	; 0x50
   14c24:	ldm	r1, {ip, lr}
   14c28:	mvn	r3, #0
   14c2c:	cmp	r8, #0
   14c30:	beq	14c8c <__assert_fail@plt+0x35bc>
   14c34:	movw	r0, #61768	; 0xf148
   14c38:	mvn	r7, #0
   14c3c:	movt	r0, #2
   14c40:	ldrd	r0, [r0, #24]
   14c44:	eor	r3, r1, r3
   14c48:	eor	r7, r0, r7
   14c4c:	orrs	r3, r7, r3
   14c50:	beq	14cb0 <__assert_fail@plt+0x35e0>
   14c54:	cmn	r1, #1
   14c58:	ble	14cbc <__assert_fail@plt+0x35ec>
   14c5c:	cmp	r2, #0
   14c60:	beq	14d00 <__assert_fail@plt+0x3630>
   14c64:	adds	r2, ip, r6
   14c68:	adc	r3, lr, r9
   14c6c:	adds	r0, r2, r0
   14c70:	adc	r1, r3, r1
   14c74:	b	14ce4 <__assert_fail@plt+0x3614>
   14c78:	mov	ip, #0
   14c7c:	mov	lr, #0
   14c80:	mvn	r3, #0
   14c84:	cmp	r8, #0
   14c88:	bne	14c34 <__assert_fail@plt+0x3564>
   14c8c:	movw	r0, #62304	; 0xf360
   14c90:	movt	r0, #2
   14c94:	ldrb	r1, [r0, #1]
   14c98:	cmp	r1, #0
   14c9c:	beq	14d98 <__assert_fail@plt+0x36c8>
   14ca0:	ldrd	r0, [r0, #104]	; 0x68
   14ca4:	subs	r2, r3, r0
   14ca8:	sbcs	r2, r3, r1
   14cac:	blt	14d00 <__assert_fail@plt+0x3630>
   14cb0:	mov	r0, #0
   14cb4:	sub	sp, fp, #28
   14cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cbc:	mov	r0, #1
   14cc0:	mov	r2, #0
   14cc4:	mov	r3, #0
   14cc8:	str	ip, [sp, #16]
   14ccc:	mov	r7, lr
   14cd0:	str	r0, [sp]
   14cd4:	mov	r0, r8
   14cd8:	bl	11490 <lseek64@plt>
   14cdc:	ldr	ip, [sp, #16]
   14ce0:	mov	lr, r7
   14ce4:	movw	r2, #61768	; 0xf148
   14ce8:	mvn	r3, #0
   14cec:	movt	r2, #2
   14cf0:	strd	r0, [r2, #24]
   14cf4:	subs	r2, r3, r0
   14cf8:	sbcs	r2, r3, r1
   14cfc:	bge	14cb0 <__assert_fail@plt+0x35e0>
   14d00:	cmp	sl, #0
   14d04:	and	r2, r5, r4
   14d08:	mov	r4, r6
   14d0c:	mov	r5, r9
   14d10:	movwne	sl, #1
   14d14:	ands	r2, r2, sl
   14d18:	movwne	r4, #0
   14d1c:	movwne	r5, #0
   14d20:	subs	r0, r0, r4
   14d24:	sbc	r1, r1, r5
   14d28:	cmp	r2, #0
   14d2c:	movne	ip, r6
   14d30:	movne	lr, r9
   14d34:	subs	r7, r0, ip
   14d38:	sbc	r6, r1, lr
   14d3c:	orrs	r0, r4, r5
   14d40:	bne	14d68 <__assert_fail@plt+0x3698>
   14d44:	movw	r0, #62304	; 0xf360
   14d48:	mov	r1, r6
   14d4c:	movt	r0, #2
   14d50:	ldr	r2, [r0, #12]
   14d54:	mov	r0, r7
   14d58:	asr	r3, r2, #31
   14d5c:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   14d60:	subs	r7, r7, r2
   14d64:	sbc	r6, r6, r3
   14d68:	mov	r0, #4
   14d6c:	stm	sp, {r4, r5}
   14d70:	mov	r2, r7
   14d74:	mov	r3, r6
   14d78:	str	r0, [sp, #8]
   14d7c:	mov	r0, r8
   14d80:	bl	11394 <posix_fadvise64@plt>
   14d84:	mvn	r1, #0
   14d88:	subs	r0, r0, r1
   14d8c:	movwne	r0, #1
   14d90:	sub	sp, fp, #28
   14d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d98:	bl	11598 <__errno_location@plt>
   14d9c:	mov	r1, #29
   14da0:	str	r1, [r0]
   14da4:	mov	r0, #0
   14da8:	sub	sp, fp, #28
   14dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db0:	push	{fp, lr}
   14db4:	mov	fp, sp
   14db8:	bl	15390 <__assert_fail@plt+0x3cc0>
   14dbc:	bl	15440 <__assert_fail@plt+0x3d70>
   14dc0:	pop	{fp, lr}
   14dc4:	b	1553c <__assert_fail@plt+0x3e6c>
   14dc8:	movw	r0, #62304	; 0xf360
   14dcc:	movt	r0, #2
   14dd0:	ldr	r1, [r0, #48]	; 0x30
   14dd4:	add	r1, r1, #1
   14dd8:	str	r1, [r0, #48]	; 0x30
   14ddc:	bx	lr
   14de0:	movw	r1, #62304	; 0xf360
   14de4:	movt	r1, #2
   14de8:	str	r0, [r1, #52]	; 0x34
   14dec:	bx	lr
   14df0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14df4:	add	fp, sp, #24
   14df8:	sub	sp, sp, #8
   14dfc:	mov	r8, r3
   14e00:	mov	r6, r1
   14e04:	mov	r4, r0
   14e08:	cmp	r2, #0
   14e0c:	beq	14e80 <__assert_fail@plt+0x37b0>
   14e10:	mov	r0, r4
   14e14:	mov	r1, #44	; 0x2c
   14e18:	bl	11580 <strchr@plt>
   14e1c:	mov	r1, r6
   14e20:	b	14e30 <__assert_fail@plt+0x3760>
   14e24:	ldrb	r2, [r1], #16
   14e28:	cmp	r2, #0
   14e2c:	beq	14f00 <__assert_fail@plt+0x3830>
   14e30:	mov	r2, #0
   14e34:	ldrb	r3, [r1, r2]
   14e38:	cmp	r3, #0
   14e3c:	beq	14e54 <__assert_fail@plt+0x3784>
   14e40:	ldrb	r7, [r4, r2]
   14e44:	add	r2, r2, #1
   14e48:	cmp	r7, r3
   14e4c:	beq	14e34 <__assert_fail@plt+0x3764>
   14e50:	b	14e24 <__assert_fail@plt+0x3754>
   14e54:	ldrb	r2, [r4, r2]
   14e58:	cmp	r2, #44	; 0x2c
   14e5c:	cmpne	r2, #0
   14e60:	bne	14e24 <__assert_fail@plt+0x3754>
   14e64:	ldr	r7, [r1, #12]
   14e68:	cmp	r7, #0
   14e6c:	beq	14e24 <__assert_fail@plt+0x3754>
   14e70:	add	r4, r0, #1
   14e74:	cmp	r0, #0
   14e78:	bne	14e10 <__assert_fail@plt+0x3740>
   14e7c:	b	14ef4 <__assert_fail@plt+0x3824>
   14e80:	mov	r7, #0
   14e84:	mov	r0, r4
   14e88:	mov	r1, #44	; 0x2c
   14e8c:	bl	11580 <strchr@plt>
   14e90:	mov	r1, r6
   14e94:	b	14ea4 <__assert_fail@plt+0x37d4>
   14e98:	ldrb	r2, [r1], #16
   14e9c:	cmp	r2, #0
   14ea0:	beq	14f00 <__assert_fail@plt+0x3830>
   14ea4:	mov	r2, #0
   14ea8:	ldrb	r3, [r1, r2]
   14eac:	cmp	r3, #0
   14eb0:	beq	14ec8 <__assert_fail@plt+0x37f8>
   14eb4:	ldrb	r5, [r4, r2]
   14eb8:	add	r2, r2, #1
   14ebc:	cmp	r5, r3
   14ec0:	beq	14ea8 <__assert_fail@plt+0x37d8>
   14ec4:	b	14e98 <__assert_fail@plt+0x37c8>
   14ec8:	ldrb	r2, [r4, r2]
   14ecc:	cmp	r2, #44	; 0x2c
   14ed0:	cmpne	r2, #0
   14ed4:	bne	14e98 <__assert_fail@plt+0x37c8>
   14ed8:	ldr	r2, [r1, #12]
   14edc:	cmp	r2, #0
   14ee0:	beq	14e98 <__assert_fail@plt+0x37c8>
   14ee4:	orr	r7, r2, r7
   14ee8:	add	r4, r0, #1
   14eec:	cmp	r0, #0
   14ef0:	bne	14e84 <__assert_fail@plt+0x37b4>
   14ef4:	mov	r0, r7
   14ef8:	sub	sp, fp, #24
   14efc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f00:	cmp	r0, #0
   14f04:	bne	14f18 <__assert_fail@plt+0x3848>
   14f08:	mov	r0, r4
   14f0c:	bl	11574 <strlen@plt>
   14f10:	mov	r6, r0
   14f14:	b	14f1c <__assert_fail@plt+0x384c>
   14f18:	sub	r6, r0, r4
   14f1c:	mov	r0, #0
   14f20:	mov	r1, r8
   14f24:	mov	r2, #5
   14f28:	bl	11424 <dcgettext@plt>
   14f2c:	mov	r5, r0
   14f30:	mov	r0, #0
   14f34:	mov	r1, #8
   14f38:	mov	r2, r4
   14f3c:	mov	r3, r6
   14f40:	bl	198cc <__assert_fail@plt+0x81fc>
   14f44:	movw	r2, #55479	; 0xd8b7
   14f48:	str	r0, [sp]
   14f4c:	mov	r0, #0
   14f50:	mov	r1, #0
   14f54:	mov	r3, r5
   14f58:	movt	r2, #1
   14f5c:	bl	14890 <__assert_fail@plt+0x31c0>
   14f60:	mov	r0, #1
   14f64:	bl	117d0 <__assert_fail@plt+0x100>
   14f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f6c:	add	fp, sp, #28
   14f70:	sub	sp, sp, #36	; 0x24
   14f74:	mov	r6, r0
   14f78:	mov	r0, #0
   14f7c:	mov	r8, r1
   14f80:	add	r1, sp, #20
   14f84:	add	r3, sp, #24
   14f88:	mov	r2, #10
   14f8c:	str	r0, [sp, #28]
   14f90:	str	r0, [sp, #24]
   14f94:	movw	r0, #55710	; 0xd99e
   14f98:	movt	r0, #1
   14f9c:	str	r0, [sp]
   14fa0:	mov	r0, r6
   14fa4:	bl	1abe0 <__assert_fail@plt+0x9510>
   14fa8:	mov	r7, r0
   14fac:	bic	r0, r0, #1
   14fb0:	cmp	r0, #2
   14fb4:	bne	15008 <__assert_fail@plt+0x3938>
   14fb8:	ldr	r0, [sp, #20]
   14fbc:	ldrb	r1, [r0]
   14fc0:	cmp	r1, #120	; 0x78
   14fc4:	bne	15008 <__assert_fail@plt+0x3938>
   14fc8:	mov	r1, #0
   14fcc:	add	r0, r0, #1
   14fd0:	str	r1, [sp, #16]
   14fd4:	add	r1, sp, #16
   14fd8:	bl	14f68 <__assert_fail@plt+0x3898>
   14fdc:	ldr	sl, [sp, #16]
   14fe0:	mov	r9, r0
   14fe4:	mov	r5, r1
   14fe8:	cmp	sl, #2
   14fec:	bcc	15038 <__assert_fail@plt+0x3968>
   14ff0:	str	sl, [r8]
   14ff4:	mov	r4, r9
   14ff8:	mov	r0, r4
   14ffc:	mov	r1, r5
   15000:	sub	sp, fp, #28
   15004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15008:	ldr	r5, [sp, #28]
   1500c:	cmn	r5, #1
   15010:	ble	15030 <__assert_fail@plt+0x3960>
   15014:	ldr	r4, [sp, #24]
   15018:	cmp	r7, #0
   1501c:	strne	r7, [r8]
   15020:	mov	r0, r4
   15024:	mov	r1, r5
   15028:	sub	sp, fp, #28
   1502c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15030:	orr	r0, r7, #1
   15034:	b	15118 <__assert_fail@plt+0x3a48>
   15038:	cmn	r5, #1
   1503c:	ble	15084 <__assert_fail@plt+0x39b4>
   15040:	orrs	r0, r9, r5
   15044:	ldr	r0, [sp, #24]
   15048:	ldr	r2, [sp, #28]
   1504c:	str	r0, [sp, #12]
   15050:	beq	150f0 <__assert_fail@plt+0x3a20>
   15054:	mov	r4, r2
   15058:	mvn	r0, #0
   1505c:	mvn	r1, #-2147483648	; 0x80000000
   15060:	mov	r2, r9
   15064:	mov	r3, r5
   15068:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1506c:	ldr	r3, [sp, #12]
   15070:	mov	r2, r4
   15074:	subs	r0, r0, r3
   15078:	sbcs	r0, r1, r4
   1507c:	bcs	150f0 <__assert_fail@plt+0x3a20>
   15080:	b	15114 <__assert_fail@plt+0x3a44>
   15084:	ldr	r1, [sp, #24]
   15088:	ldr	r2, [sp, #28]
   1508c:	and	r0, r9, r5
   15090:	cmn	r0, #1
   15094:	str	r1, [sp, #12]
   15098:	beq	150cc <__assert_fail@plt+0x39fc>
   1509c:	str	r2, [sp, #8]
   150a0:	mov	r0, #0
   150a4:	mov	r1, #-2147483648	; 0x80000000
   150a8:	mov	r2, r9
   150ac:	mov	r3, r5
   150b0:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   150b4:	ldr	r3, [sp, #12]
   150b8:	ldr	r2, [sp, #8]
   150bc:	subs	r0, r0, r3
   150c0:	sbcs	r0, r1, r2
   150c4:	bcs	150f0 <__assert_fail@plt+0x3a20>
   150c8:	b	15114 <__assert_fail@plt+0x3a44>
   150cc:	ldr	r0, [sp, #12]
   150d0:	mov	r1, #0
   150d4:	subs	r0, r0, #1
   150d8:	sbcs	r0, r2, #0
   150dc:	adc	r1, r1, #0
   150e0:	cmp	r1, #1
   150e4:	bne	150f0 <__assert_fail@plt+0x3a20>
   150e8:	cmp	r0, #0
   150ec:	bmi	15114 <__assert_fail@plt+0x3a44>
   150f0:	ldr	r1, [sp, #12]
   150f4:	umull	r4, r0, r1, r9
   150f8:	mla	r0, r1, r5, r0
   150fc:	mla	r5, r2, r9, r0
   15100:	orrs	r0, r4, r5
   15104:	beq	15134 <__assert_fail@plt+0x3a64>
   15108:	orr	r0, sl, r7
   1510c:	tst	r0, #1
   15110:	beq	15124 <__assert_fail@plt+0x3a54>
   15114:	mov	r0, #1
   15118:	str	r0, [r8]
   1511c:	mvn	r5, #-2147483648	; 0x80000000
   15120:	mvn	r4, #0
   15124:	mov	r0, r4
   15128:	mov	r1, r5
   1512c:	sub	sp, fp, #28
   15130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15134:	movw	r1, #55786	; 0xd9ea
   15138:	mov	r0, r6
   1513c:	mov	r2, #2
   15140:	movt	r1, #1
   15144:	bl	11688 <strncmp@plt>
   15148:	mov	r4, #0
   1514c:	cmp	r0, #0
   15150:	mov	r5, #0
   15154:	bne	15124 <__assert_fail@plt+0x3a54>
   15158:	movw	r1, #55724	; 0xd9ac
   1515c:	mov	r0, #0
   15160:	mov	r2, #5
   15164:	mov	r4, #0
   15168:	movt	r1, #1
   1516c:	bl	11424 <dcgettext@plt>
   15170:	movw	r1, #55786	; 0xd9ea
   15174:	mov	r5, r0
   15178:	mov	r0, #0
   1517c:	movt	r1, #1
   15180:	bl	19e38 <__assert_fail@plt+0x8768>
   15184:	movw	r1, #55785	; 0xd9e9
   15188:	mov	r6, r0
   1518c:	mov	r0, #1
   15190:	movt	r1, #1
   15194:	bl	19e38 <__assert_fail@plt+0x8768>
   15198:	str	r0, [sp]
   1519c:	mov	r0, #0
   151a0:	mov	r1, #0
   151a4:	mov	r2, r5
   151a8:	mov	r3, r6
   151ac:	bl	14890 <__assert_fail@plt+0x31c0>
   151b0:	mov	r5, #0
   151b4:	mov	r0, r4
   151b8:	mov	r1, r5
   151bc:	sub	sp, fp, #28
   151c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151c4:	push	{r4, r5, r6, r7, fp, lr}
   151c8:	add	fp, sp, #16
   151cc:	cmp	r2, #1
   151d0:	blt	1521c <__assert_fail@plt+0x3b4c>
   151d4:	mov	r5, r2
   151d8:	mov	r6, r1
   151dc:	mov	r7, r0
   151e0:	mov	r4, #0
   151e4:	mov	r0, r7
   151e8:	mov	r1, r6
   151ec:	mov	r2, r5
   151f0:	bl	15228 <__assert_fail@plt+0x3b58>
   151f4:	cmp	r0, #0
   151f8:	bmi	15224 <__assert_fail@plt+0x3b54>
   151fc:	beq	15214 <__assert_fail@plt+0x3b44>
   15200:	sub	r5, r5, r0
   15204:	add	r6, r6, r0
   15208:	add	r4, r0, r4
   1520c:	cmp	r5, #0
   15210:	bgt	151e4 <__assert_fail@plt+0x3b14>
   15214:	mov	r0, r4
   15218:	pop	{r4, r5, r6, r7, fp, pc}
   1521c:	mov	r4, #0
   15220:	mov	r0, r4
   15224:	pop	{r4, r5, r6, r7, fp, pc}
   15228:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1522c:	add	fp, sp, #24
   15230:	sub	sp, sp, #8
   15234:	movw	r8, #62304	; 0xf360
   15238:	mov	r5, r2
   1523c:	mov	r6, r1
   15240:	mov	r7, r0
   15244:	movt	r8, #2
   15248:	b	15258 <__assert_fail@plt+0x3b88>
   1524c:	ldr	r0, [r0]
   15250:	cmp	r0, #4
   15254:	bne	1536c <__assert_fail@plt+0x3c9c>
   15258:	bl	15390 <__assert_fail@plt+0x3cc0>
   1525c:	mov	r0, r7
   15260:	mov	r1, r6
   15264:	mov	r2, r5
   15268:	bl	113a0 <read@plt>
   1526c:	mov	r4, r0
   15270:	cmn	r0, #1
   15274:	beq	15284 <__assert_fail@plt+0x3bb4>
   15278:	bgt	152cc <__assert_fail@plt+0x3bfc>
   1527c:	bl	11598 <__errno_location@plt>
   15280:	b	1524c <__assert_fail@plt+0x3b7c>
   15284:	bl	11598 <__errno_location@plt>
   15288:	ldr	r1, [r8, #72]	; 0x48
   1528c:	cmp	r1, r5
   15290:	bge	1524c <__assert_fail@plt+0x3b7c>
   15294:	ldr	r2, [r0]
   15298:	cmp	r2, #22
   1529c:	bne	1524c <__assert_fail@plt+0x3b7c>
   152a0:	cmp	r1, #1
   152a4:	blt	1524c <__assert_fail@plt+0x3b7c>
   152a8:	ldrb	r1, [r8, #22]
   152ac:	tst	r1, #1
   152b0:	beq	1524c <__assert_fail@plt+0x3b7c>
   152b4:	mov	r4, #0
   152b8:	str	r4, [r0]
   152bc:	str	r4, [r8, #72]	; 0x48
   152c0:	mov	r0, r4
   152c4:	sub	sp, fp, #24
   152c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   152cc:	cmp	r4, #0
   152d0:	beq	152f0 <__assert_fail@plt+0x3c20>
   152d4:	cmp	r4, r5
   152d8:	bge	152f0 <__assert_fail@plt+0x3c20>
   152dc:	bl	15390 <__assert_fail@plt+0x3cc0>
   152e0:	ldr	r6, [r8, #72]	; 0x48
   152e4:	cmp	r6, r5
   152e8:	blt	15304 <__assert_fail@plt+0x3c34>
   152ec:	b	1536c <__assert_fail@plt+0x3c9c>
   152f0:	cmp	r4, #0
   152f4:	beq	1537c <__assert_fail@plt+0x3cac>
   152f8:	ldr	r6, [r8, #72]	; 0x48
   152fc:	cmp	r6, r5
   15300:	bge	1536c <__assert_fail@plt+0x3c9c>
   15304:	ldrb	r0, [r8, #6]
   15308:	cmp	r0, #0
   1530c:	beq	1536c <__assert_fail@plt+0x3c9c>
   15310:	cmp	r6, #1
   15314:	blt	1536c <__assert_fail@plt+0x3c9c>
   15318:	movw	r0, #61768	; 0xf148
   1531c:	movt	r0, #2
   15320:	ldr	r0, [r0]
   15324:	cmp	r0, #1
   15328:	beq	15364 <__assert_fail@plt+0x3c94>
   1532c:	movw	r1, #55789	; 0xd9ed
   15330:	movw	r2, #55847	; 0xda27
   15334:	mov	r0, #5
   15338:	mov	r3, r6
   1533c:	movt	r1, #1
   15340:	movt	r2, #1
   15344:	str	r0, [sp]
   15348:	mov	r0, #0
   1534c:	bl	116b8 <dcngettext@plt>
   15350:	mov	r2, r0
   15354:	mov	r0, #0
   15358:	mov	r1, #0
   1535c:	mov	r3, r6
   15360:	bl	14890 <__assert_fail@plt+0x31c0>
   15364:	mov	r0, #0
   15368:	strb	r0, [r8, #6]
   1536c:	str	r4, [r8, #72]	; 0x48
   15370:	mov	r0, r4
   15374:	sub	sp, fp, #24
   15378:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1537c:	mov	r4, #0
   15380:	str	r4, [r8, #72]	; 0x48
   15384:	mov	r0, r4
   15388:	sub	sp, fp, #24
   1538c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15390:	push	{r4, r5, r6, r7, fp, lr}
   15394:	add	fp, sp, #16
   15398:	sub	sp, sp, #128	; 0x80
   1539c:	movw	r7, #62304	; 0xf360
   153a0:	movw	r4, #62176	; 0xf2e0
   153a4:	mov	r5, sp
   153a8:	movt	r7, #2
   153ac:	movt	r4, #2
   153b0:	ldr	r0, [r7, #52]	; 0x34
   153b4:	cmp	r0, #0
   153b8:	bne	153e8 <__assert_fail@plt+0x3d18>
   153bc:	b	153dc <__assert_fail@plt+0x3d0c>
   153c0:	bl	15440 <__assert_fail@plt+0x3d70>
   153c4:	bl	1553c <__assert_fail@plt+0x3e6c>
   153c8:	mov	r0, r6
   153cc:	bl	11370 <raise@plt>
   153d0:	ldr	r0, [r7, #52]	; 0x34
   153d4:	cmp	r0, #0
   153d8:	bne	153e8 <__assert_fail@plt+0x3d18>
   153dc:	ldr	r0, [r7, #48]	; 0x30
   153e0:	cmp	r0, #0
   153e4:	beq	15438 <__assert_fail@plt+0x3d68>
   153e8:	mov	r0, #0
   153ec:	mov	r1, r4
   153f0:	mov	r2, r5
   153f4:	bl	113b8 <sigprocmask@plt>
   153f8:	ldr	r6, [r7, #52]	; 0x34
   153fc:	ldr	r0, [r7, #48]	; 0x30
   15400:	mov	r1, r5
   15404:	mov	r2, #0
   15408:	cmp	r0, #0
   1540c:	subne	r0, r0, #1
   15410:	strne	r0, [r7, #48]	; 0x30
   15414:	mov	r0, #2
   15418:	bl	113b8 <sigprocmask@plt>
   1541c:	cmp	r6, #0
   15420:	bne	153c0 <__assert_fail@plt+0x3cf0>
   15424:	bl	1553c <__assert_fail@plt+0x3e6c>
   15428:	ldr	r0, [r7, #52]	; 0x34
   1542c:	cmp	r0, #0
   15430:	bne	153e8 <__assert_fail@plt+0x3d18>
   15434:	b	153dc <__assert_fail@plt+0x3d0c>
   15438:	sub	sp, fp, #16
   1543c:	pop	{r4, r5, r6, r7, fp, pc}
   15440:	push	{r4, r5, r6, sl, fp, lr}
   15444:	add	fp, sp, #16
   15448:	movw	r6, #62304	; 0xf360
   1544c:	movt	r6, #2
   15450:	ldr	r0, [r6, #52]	; 0x34
   15454:	cmp	r0, #0
   15458:	bne	15468 <__assert_fail@plt+0x3d98>
   1545c:	bl	1492c <__assert_fail@plt+0x325c>
   15460:	cmp	r0, #0
   15464:	bne	15538 <__assert_fail@plt+0x3e68>
   15468:	mov	r0, #0
   1546c:	bl	116ac <close@plt>
   15470:	cmp	r0, #0
   15474:	beq	154a4 <__assert_fail@plt+0x3dd4>
   15478:	bl	11598 <__errno_location@plt>
   1547c:	ldr	r4, [r0]
   15480:	mov	r5, r0
   15484:	cmp	r4, #4
   15488:	bne	154e4 <__assert_fail@plt+0x3e14>
   1548c:	mov	r0, #0
   15490:	bl	116ac <close@plt>
   15494:	cmp	r0, #0
   15498:	ldrne	r4, [r5]
   1549c:	cmpne	r4, #9
   154a0:	bne	15484 <__assert_fail@plt+0x3db4>
   154a4:	mov	r0, #1
   154a8:	bl	116ac <close@plt>
   154ac:	cmp	r0, #0
   154b0:	beq	154e0 <__assert_fail@plt+0x3e10>
   154b4:	bl	11598 <__errno_location@plt>
   154b8:	ldr	r4, [r0]
   154bc:	mov	r5, r0
   154c0:	cmp	r4, #4
   154c4:	bne	15500 <__assert_fail@plt+0x3e30>
   154c8:	mov	r0, #1
   154cc:	bl	116ac <close@plt>
   154d0:	cmp	r0, #0
   154d4:	ldrne	r4, [r5]
   154d8:	cmpne	r4, #9
   154dc:	bne	154c0 <__assert_fail@plt+0x3df0>
   154e0:	pop	{r4, r5, r6, sl, fp, pc}
   154e4:	movw	r1, #55906	; 0xda62
   154e8:	mov	r0, #0
   154ec:	mov	r2, #5
   154f0:	movt	r1, #1
   154f4:	bl	11424 <dcgettext@plt>
   154f8:	ldr	r1, [r6, #16]
   154fc:	b	15518 <__assert_fail@plt+0x3e48>
   15500:	movw	r1, #55928	; 0xda78
   15504:	mov	r0, #0
   15508:	mov	r2, #5
   1550c:	movt	r1, #1
   15510:	bl	11424 <dcgettext@plt>
   15514:	ldr	r1, [r6, #28]
   15518:	mov	r5, r0
   1551c:	mov	r0, #4
   15520:	bl	19920 <__assert_fail@plt+0x8250>
   15524:	mov	r3, r0
   15528:	mov	r0, #1
   1552c:	mov	r1, r4
   15530:	mov	r2, r5
   15534:	bl	14890 <__assert_fail@plt+0x31c0>
   15538:	bl	1155c <exit@plt>
   1553c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15540:	add	fp, sp, #28
   15544:	sub	sp, sp, #36	; 0x24
   15548:	movw	r0, #61768	; 0xf148
   1554c:	movt	r0, #2
   15550:	ldr	r0, [r0]
   15554:	cmp	r0, #1
   15558:	beq	1568c <__assert_fail@plt+0x3fbc>
   1555c:	movw	r4, #62304	; 0xf360
   15560:	movw	sl, #61904	; 0xf1d0
   15564:	movt	r4, #2
   15568:	movt	sl, #2
   1556c:	ldr	r0, [r4, #76]	; 0x4c
   15570:	cmp	r0, #1
   15574:	blt	155a4 <__assert_fail@plt+0x3ed4>
   15578:	ldr	r0, [sl]
   1557c:	ldr	r1, [r0, #20]
   15580:	ldr	r2, [r0, #24]
   15584:	cmp	r1, r2
   15588:	bcs	156a8 <__assert_fail@plt+0x3fd8>
   1558c:	add	r2, r1, #1
   15590:	str	r2, [r0, #20]
   15594:	mov	r0, #10
   15598:	strb	r0, [r1]
   1559c:	mov	r0, #0
   155a0:	str	r0, [r4, #76]	; 0x4c
   155a4:	movw	r1, #55951	; 0xda8f
   155a8:	ldr	r8, [sl]
   155ac:	mov	r0, #0
   155b0:	mov	r2, #5
   155b4:	movt	r1, #1
   155b8:	bl	11424 <dcgettext@plt>
   155bc:	movw	r7, #62424	; 0xf3d8
   155c0:	mov	ip, r0
   155c4:	movt	r7, #2
   155c8:	add	r6, r7, #32
   155cc:	ldr	r2, [r7, #56]	; 0x38
   155d0:	ldr	r5, [r7, #48]	; 0x30
   155d4:	ldr	r4, [r7, #52]	; 0x34
   155d8:	ldr	lr, [r7, #60]	; 0x3c
   155dc:	ldm	r6, {r0, r1, r3, r6}
   155e0:	stm	sp, {r0, r1, r3, r6}
   155e4:	str	r2, [sp, #24]
   155e8:	mov	r0, r8
   155ec:	mov	r1, #1
   155f0:	mov	r2, ip
   155f4:	str	r5, [sp, #16]
   155f8:	str	r4, [sp, #20]
   155fc:	str	lr, [sp, #28]
   15600:	bl	115f8 <__fprintf_chk@plt>
   15604:	ldrd	r8, [r7, #64]	; 0x40
   15608:	orrs	r0, r8, r9
   1560c:	beq	15678 <__assert_fail@plt+0x3fa8>
   15610:	ldr	r4, [sl]
   15614:	cmp	r9, #0
   15618:	beq	1563c <__assert_fail@plt+0x3f6c>
   1561c:	movw	r5, #16960	; 0x4240
   15620:	mov	r0, r8
   15624:	mov	r1, r9
   15628:	mov	r3, #0
   1562c:	movt	r5, #15
   15630:	mov	r2, r5
   15634:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   15638:	add	r8, r2, r5
   1563c:	movw	r1, #55995	; 0xdabb
   15640:	movw	r2, #56018	; 0xdad2
   15644:	mov	r0, #5
   15648:	mov	r3, r8
   1564c:	movt	r1, #1
   15650:	movt	r2, #1
   15654:	str	r0, [sp]
   15658:	mov	r0, #0
   1565c:	bl	116b8 <dcngettext@plt>
   15660:	mov	r2, r0
   15664:	ldrd	r0, [r7, #64]	; 0x40
   15668:	stm	sp, {r0, r1}
   1566c:	mov	r0, r4
   15670:	mov	r1, #1
   15674:	bl	115f8 <__fprintf_chk@plt>
   15678:	movw	r0, #61768	; 0xf148
   1567c:	movt	r0, #2
   15680:	ldr	r0, [r0]
   15684:	cmp	r0, #2
   15688:	bne	15694 <__assert_fail@plt+0x3fc4>
   1568c:	sub	sp, fp, #28
   15690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15694:	mov	r0, #0
   15698:	mov	r1, #0
   1569c:	sub	sp, fp, #28
   156a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156a4:	b	156b8 <__assert_fail@plt+0x3fe8>
   156a8:	mov	r1, #10
   156ac:	bl	11628 <__overflow@plt>
   156b0:	b	1559c <__assert_fail@plt+0x3ecc>
   156b4:	nop	{0}
   156b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156bc:	add	fp, sp, #28
   156c0:	sub	sp, sp, #4
   156c4:	vpush	{d8-d9}
   156c8:	sub	sp, sp, #2032	; 0x7f0
   156cc:	mov	r6, r0
   156d0:	orrs	r0, r0, r1
   156d4:	str	r0, [sp, #36]	; 0x24
   156d8:	bne	156e4 <__assert_fail@plt+0x4014>
   156dc:	bl	16be4 <__assert_fail@plt+0x5514>
   156e0:	mov	r6, r0
   156e4:	movw	r9, #62424	; 0xf3d8
   156e8:	mov	r7, r1
   156ec:	add	r4, sp, #66	; 0x42
   156f0:	mov	r8, #0
   156f4:	mov	r5, #1
   156f8:	movw	r3, #465	; 0x1d1
   156fc:	movt	r9, #2
   15700:	mov	r2, r4
   15704:	stm	sp, {r5, r8}
   15708:	str	r5, [sp, #8]
   1570c:	str	r8, [sp, #12]
   15710:	ldrd	r0, [r9, #72]	; 0x48
   15714:	bl	16c58 <__assert_fail@plt+0x5588>
   15718:	str	r0, [sp, #32]
   1571c:	ldrd	r0, [r9, #72]	; 0x48
   15720:	movw	r2, #654	; 0x28e
   15724:	movw	r3, #497	; 0x1f1
   15728:	stm	sp, {r5, r8}
   1572c:	str	r5, [sp, #8]
   15730:	str	r8, [sp, #12]
   15734:	add	r2, r4, r2
   15738:	bl	16c58 <__assert_fail@plt+0x5588>
   1573c:	str	r0, [sp, #28]
   15740:	movw	r0, #1308	; 0x51c
   15744:	add	r5, r4, r0
   15748:	ldrd	r0, [r9, #8]
   1574c:	subs	r2, r0, r6
   15750:	sbcs	r2, r1, r7
   15754:	bge	157cc <__assert_fail@plt+0x40fc>
   15758:	subs	r6, r6, r0
   1575c:	sbc	r7, r7, r1
   15760:	mov	r0, r6
   15764:	mov	r1, r7
   15768:	bl	1c584 <__assert_fail@plt+0xaeb4>
   1576c:	movw	r2, #51712	; 0xca00
   15770:	str	r0, [sp, #24]
   15774:	mov	r4, r1
   15778:	ldrd	r0, [r9, #72]	; 0x48
   1577c:	movw	r3, #465	; 0x1d1
   15780:	mov	sl, r9
   15784:	movt	r2, #15258	; 0x3b9a
   15788:	stm	sp, {r2, r8}
   1578c:	mov	r2, r5
   15790:	str	r6, [sp, #8]
   15794:	str	r7, [sp, #12]
   15798:	bl	16c58 <__assert_fail@plt+0x5588>
   1579c:	mov	r9, r0
   157a0:	ldr	r0, [sp, #24]
   157a4:	vldr	d8, [pc, #668]	; 15a48 <__assert_fail@plt+0x4378>
   157a8:	movw	r6, #29487	; 0x732f
   157ac:	vmov	d9, r0, r4
   157b0:	mov	r0, r9
   157b4:	bl	11574 <strlen@plt>
   157b8:	mov	r1, r9
   157bc:	vdiv.f64	d8, d9, d8
   157c0:	strh	r6, [r1, r0]!
   157c4:	strb	r8, [r1, #2]
   157c8:	b	15810 <__assert_fail@plt+0x4140>
   157cc:	movw	r1, #56049	; 0xdaf1
   157d0:	mov	r0, #0
   157d4:	mov	r2, #5
   157d8:	mov	sl, r9
   157dc:	movt	r1, #1
   157e0:	bl	11424 <dcgettext@plt>
   157e4:	movw	r1, #56042	; 0xdaea
   157e8:	str	r0, [sp, #4]
   157ec:	mov	r0, r5
   157f0:	mov	r2, #1
   157f4:	movw	r3, #654	; 0x28e
   157f8:	movt	r1, #1
   157fc:	str	r1, [sp]
   15800:	movw	r1, #654	; 0x28e
   15804:	bl	116c4 <__snprintf_chk@plt>
   15808:	vmov.i32	d8, #0	; 0x00000000
   1580c:	mov	r9, r5
   15810:	ldr	r7, [sp, #36]	; 0x24
   15814:	ldr	r5, [sp, #32]
   15818:	ldr	r6, [sp, #28]
   1581c:	movw	r8, #61904	; 0xf1d0
   15820:	movt	r8, #2
   15824:	cmp	r7, #0
   15828:	beq	15850 <__assert_fail@plt+0x4180>
   1582c:	ldr	r0, [r8]
   15830:	ldr	r1, [r0, #20]
   15834:	ldr	r2, [r0, #24]
   15838:	cmp	r1, r2
   1583c:	bcs	15a2c <__assert_fail@plt+0x435c>
   15840:	add	r2, r1, #1
   15844:	str	r2, [r0, #20]
   15848:	mov	r0, #13
   1584c:	strb	r0, [r1]
   15850:	movw	r0, #56058	; 0xdafa
   15854:	movw	r1, #56065	; 0xdb01
   15858:	cmp	r7, #0
   1585c:	add	r4, sp, #42	; 0x2a
   15860:	mov	r2, #1
   15864:	mov	r3, #24
   15868:	vstr	d8, [sp, #8]
   1586c:	movt	r0, #1
   15870:	movt	r1, #1
   15874:	movne	r1, r0
   15878:	mov	r0, r4
   1587c:	str	r1, [sp]
   15880:	mov	r1, #24
   15884:	bl	116c4 <__snprintf_chk@plt>
   15888:	mov	r0, r5
   1588c:	bl	11574 <strlen@plt>
   15890:	add	r0, r0, r5
   15894:	ldrb	r0, [r0, #-2]
   15898:	cmp	r0, #32
   1589c:	bne	15910 <__assert_fail@plt+0x4240>
   158a0:	ldr	r1, [sl, #76]	; 0x4c
   158a4:	ldr	r6, [sl, #72]	; 0x48
   158a8:	ldr	r5, [r8]
   158ac:	cmp	r1, #0
   158b0:	beq	158d8 <__assert_fail@plt+0x4208>
   158b4:	movw	r8, #16960	; 0x4240
   158b8:	mov	r0, r6
   158bc:	mov	r3, #0
   158c0:	movt	r8, #15
   158c4:	mov	r2, r8
   158c8:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   158cc:	add	r6, r2, r8
   158d0:	movw	r8, #61904	; 0xf1d0
   158d4:	movt	r8, #2
   158d8:	movw	r1, #56070	; 0xdb06
   158dc:	movw	r2, #56095	; 0xdb1f
   158e0:	mov	r0, #5
   158e4:	mov	r3, r6
   158e8:	movt	r1, #1
   158ec:	movt	r2, #1
   158f0:	str	r0, [sp]
   158f4:	mov	r0, #0
   158f8:	bl	116b8 <dcngettext@plt>
   158fc:	mov	r2, r0
   15900:	ldrd	r0, [sl, #72]	; 0x48
   15904:	stm	sp, {r0, r1, r4, r9}
   15908:	mov	r0, r5
   1590c:	b	1598c <__assert_fail@plt+0x42bc>
   15910:	mov	r0, r6
   15914:	bl	11574 <strlen@plt>
   15918:	add	r0, r0, r6
   1591c:	ldr	r4, [r8]
   15920:	ldrb	r0, [r0, #-2]
   15924:	cmp	r0, #32
   15928:	bne	1595c <__assert_fail@plt+0x428c>
   1592c:	movw	r1, #56121	; 0xdb39
   15930:	mov	r0, #0
   15934:	mov	r2, #5
   15938:	movt	r1, #1
   1593c:	bl	11424 <dcgettext@plt>
   15940:	mov	r2, r0
   15944:	ldrd	r0, [sl, #72]	; 0x48
   15948:	stm	sp, {r0, r1, r5}
   1594c:	add	r0, sp, #42	; 0x2a
   15950:	str	r9, [sp, #16]
   15954:	str	r0, [sp, #12]
   15958:	b	15988 <__assert_fail@plt+0x42b8>
   1595c:	movw	r1, #56152	; 0xdb58
   15960:	mov	r0, #0
   15964:	mov	r2, #5
   15968:	movt	r1, #1
   1596c:	bl	11424 <dcgettext@plt>
   15970:	mov	r2, r0
   15974:	ldrd	r0, [sl, #72]	; 0x48
   15978:	stm	sp, {r0, r1, r5, r6}
   1597c:	add	r0, sp, #42	; 0x2a
   15980:	str	r9, [sp, #20]
   15984:	str	r0, [sp, #16]
   15988:	mov	r0, r4
   1598c:	mov	r1, #1
   15990:	bl	115f8 <__fprintf_chk@plt>
   15994:	mov	r4, r0
   15998:	cmp	r7, #0
   1599c:	beq	159e8 <__assert_fail@plt+0x4318>
   159a0:	movw	r5, #62304	; 0xf360
   159a4:	cmp	r4, #0
   159a8:	movt	r5, #2
   159ac:	bmi	159e0 <__assert_fail@plt+0x4310>
   159b0:	ldr	r1, [r5, #76]	; 0x4c
   159b4:	cmp	r1, r4
   159b8:	ble	159e0 <__assert_fail@plt+0x4310>
   159bc:	movw	r2, #52909	; 0xcead
   159c0:	ldr	r0, [r8]
   159c4:	sub	r3, r1, r4
   159c8:	mov	r1, #1
   159cc:	movt	r2, #1
   159d0:	str	r2, [sp]
   159d4:	movw	r2, #56187	; 0xdb7b
   159d8:	movt	r2, #1
   159dc:	bl	115f8 <__fprintf_chk@plt>
   159e0:	str	r4, [r5, #76]	; 0x4c
   159e4:	b	15a0c <__assert_fail@plt+0x433c>
   159e8:	ldr	r0, [r8]
   159ec:	ldr	r1, [r0, #20]
   159f0:	ldr	r2, [r0, #24]
   159f4:	cmp	r1, r2
   159f8:	bcs	15a38 <__assert_fail@plt+0x4368>
   159fc:	add	r2, r1, #1
   15a00:	str	r2, [r0, #20]
   15a04:	mov	r0, #10
   15a08:	strb	r0, [r1]
   15a0c:	ldrd	r0, [sl, #72]	; 0x48
   15a10:	movw	r2, #61768	; 0xf148
   15a14:	movt	r2, #2
   15a18:	strd	r0, [r2, #16]
   15a1c:	sub	sp, fp, #48	; 0x30
   15a20:	vpop	{d8-d9}
   15a24:	add	sp, sp, #4
   15a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a2c:	mov	r1, #13
   15a30:	bl	11628 <__overflow@plt>
   15a34:	b	15850 <__assert_fail@plt+0x4180>
   15a38:	mov	r1, #10
   15a3c:	bl	11628 <__overflow@plt>
   15a40:	b	15a0c <__assert_fail@plt+0x433c>
   15a44:	nop	{0}
   15a48:	andeq	r0, r0, r0
   15a4c:	bicmi	ip, sp, r5, ror #26
   15a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a54:	add	fp, sp, #28
   15a58:	sub	sp, sp, #700	; 0x2bc
   15a5c:	mov	r6, r3
   15a60:	mov	sl, r2
   15a64:	mov	r7, r1
   15a68:	mov	r8, r0
   15a6c:	bl	11598 <__errno_location@plt>
   15a70:	ldr	r9, [fp, #8]
   15a74:	mov	r1, #0
   15a78:	mvn	r5, #0
   15a7c:	str	r0, [sp, #32]
   15a80:	str	r1, [r0]
   15a84:	cmn	r9, #1
   15a88:	ble	15aac <__assert_fail@plt+0x43dc>
   15a8c:	cmp	r9, #0
   15a90:	beq	15b40 <__assert_fail@plt+0x4470>
   15a94:	cmn	r6, #1
   15a98:	ble	15ae4 <__assert_fail@plt+0x4414>
   15a9c:	asr	r3, r9, #31
   15aa0:	mvn	r0, #0
   15aa4:	mvn	r1, #-2147483648	; 0x80000000
   15aa8:	b	15ac8 <__assert_fail@plt+0x43f8>
   15aac:	cmn	r6, #1
   15ab0:	ble	15b1c <__assert_fail@plt+0x444c>
   15ab4:	cmn	r9, #1
   15ab8:	beq	15b40 <__assert_fail@plt+0x4470>
   15abc:	asr	r3, r9, #31
   15ac0:	mov	r0, #0
   15ac4:	mov	r1, #-2147483648	; 0x80000000
   15ac8:	mov	r2, r9
   15acc:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   15ad0:	subs	r0, r0, sl
   15ad4:	mov	ip, #0
   15ad8:	sbcs	r0, r1, r6
   15adc:	bge	15b40 <__assert_fail@plt+0x4470>
   15ae0:	b	15c50 <__assert_fail@plt+0x4580>
   15ae4:	eor	r0, sl, r5
   15ae8:	eor	r1, r6, r5
   15aec:	orrs	r0, r0, r1
   15af0:	beq	15b40 <__assert_fail@plt+0x4470>
   15af4:	mov	r0, #0
   15af8:	mov	r1, #-2147483648	; 0x80000000
   15afc:	mov	r2, sl
   15b00:	mov	r3, r6
   15b04:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   15b08:	subs	r0, r0, r9
   15b0c:	mov	ip, #0
   15b10:	sbcs	r0, r1, r9, asr #31
   15b14:	bge	15b40 <__assert_fail@plt+0x4470>
   15b18:	b	15c50 <__assert_fail@plt+0x4580>
   15b1c:	asr	r3, r9, #31
   15b20:	mvn	r0, #0
   15b24:	mvn	r1, #-2147483648	; 0x80000000
   15b28:	mov	r2, r9
   15b2c:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   15b30:	subs	r0, sl, r0
   15b34:	mov	ip, #0
   15b38:	sbcs	r0, r6, r1
   15b3c:	blt	15c50 <__assert_fail@plt+0x4580>
   15b40:	ldr	r2, [fp, #12]
   15b44:	umull	r0, r1, r9, sl
   15b48:	mov	lr, r7
   15b4c:	asr	r4, r9, #31
   15b50:	mov	ip, #0
   15b54:	mla	r1, r9, r6, r1
   15b58:	mla	r1, r4, sl, r1
   15b5c:	ldr	r7, [r2]
   15b60:	adds	r2, r0, r7
   15b64:	mov	r0, #0
   15b68:	adc	r3, r1, r7, asr #31
   15b6c:	asr	r7, r7, #31
   15b70:	cmn	r3, #1
   15b74:	movwgt	r0, #1
   15b78:	cmn	r1, #1
   15b7c:	mov	r1, #0
   15b80:	movwgt	r1, #1
   15b84:	subs	r0, r1, r0
   15b88:	movwne	r0, #1
   15b8c:	cmn	r7, #1
   15b90:	mov	r7, #0
   15b94:	movwgt	r7, #1
   15b98:	sub	r1, r1, r7
   15b9c:	mov	r7, lr
   15ba0:	clz	r1, r1
   15ba4:	lsr	r1, r1, #5
   15ba8:	tst	r1, r0
   15bac:	bne	15c50 <__assert_fail@plt+0x4580>
   15bb0:	mov	r0, #1
   15bb4:	str	r4, [sp, #16]
   15bb8:	str	r2, [sp, #20]
   15bbc:	str	r3, [sp, #24]
   15bc0:	str	r0, [sp]
   15bc4:	mov	r0, r8
   15bc8:	bl	11490 <lseek64@plt>
   15bcc:	subs	r0, r5, r0
   15bd0:	sbcs	r0, r5, r1
   15bd4:	bge	15c48 <__assert_fail@plt+0x4578>
   15bd8:	cmp	r8, #0
   15bdc:	bne	15e08 <__assert_fail@plt+0x4738>
   15be0:	ldr	r6, [sp, #32]
   15be4:	add	r5, sp, #40	; 0x28
   15be8:	bl	15390 <__assert_fail@plt+0x3cc0>
   15bec:	mov	r0, #3
   15bf0:	mov	r1, #0
   15bf4:	mov	r2, r5
   15bf8:	bl	1146c <__fxstat64@plt>
   15bfc:	cmn	r0, #1
   15c00:	bgt	15e18 <__assert_fail@plt+0x4748>
   15c04:	ldr	r4, [r6]
   15c08:	cmp	r4, #4
   15c0c:	beq	15be8 <__assert_fail@plt+0x4518>
   15c10:	movw	r1, #54936	; 0xd698
   15c14:	mov	r0, #0
   15c18:	mov	r2, #5
   15c1c:	movt	r1, #1
   15c20:	bl	11424 <dcgettext@plt>
   15c24:	mov	r5, r0
   15c28:	mov	r0, #4
   15c2c:	mov	r1, r7
   15c30:	bl	19920 <__assert_fail@plt+0x8250>
   15c34:	mov	r3, r0
   15c38:	mov	r0, #1
   15c3c:	mov	r1, r4
   15c40:	mov	r2, r5
   15c44:	bl	14890 <__assert_fail@plt+0x31c0>
   15c48:	ldr	r0, [sp, #32]
   15c4c:	ldr	ip, [r0]
   15c50:	mov	r0, #2
   15c54:	mov	r2, #0
   15c58:	mov	r3, #0
   15c5c:	str	ip, [sp, #24]
   15c60:	str	r0, [sp]
   15c64:	mov	r0, r8
   15c68:	bl	11490 <lseek64@plt>
   15c6c:	subs	r0, r5, r0
   15c70:	sbcs	r0, r5, r1
   15c74:	blt	15ff4 <__assert_fail@plt+0x4924>
   15c78:	cmp	r8, #0
   15c7c:	str	r7, [sp, #28]
   15c80:	str	r8, [sp, #36]	; 0x24
   15c84:	beq	15d00 <__assert_fail@plt+0x4630>
   15c88:	bl	16360 <__assert_fail@plt+0x4c90>
   15c8c:	movw	r8, #62304	; 0xf360
   15c90:	movt	r8, #2
   15c94:	ldr	r4, [r8, #80]	; 0x50
   15c98:	ldr	r3, [r8, #68]	; 0x44
   15c9c:	orrs	r5, sl, r6
   15ca0:	mov	r7, r9
   15ca4:	bne	15cb0 <__assert_fail@plt+0x45e0>
   15ca8:	ldr	r0, [fp, #12]
   15cac:	ldr	r9, [r0]
   15cb0:	ldr	r0, [sp, #36]	; 0x24
   15cb4:	mov	r1, r4
   15cb8:	mov	r2, r9
   15cbc:	blx	r3
   15cc0:	cmn	r0, #1
   15cc4:	ble	15f4c <__assert_fail@plt+0x487c>
   15cc8:	cmp	r0, #0
   15ccc:	beq	15ea8 <__assert_fail@plt+0x47d8>
   15cd0:	cmp	r5, #0
   15cd4:	beq	15e08 <__assert_fail@plt+0x4738>
   15cd8:	subs	sl, sl, #1
   15cdc:	mov	r9, r7
   15ce0:	sbc	r6, r6, #0
   15ce4:	orrs	r0, sl, r6
   15ce8:	bne	15c98 <__assert_fail@plt+0x45c8>
   15cec:	ldr	r0, [fp, #12]
   15cf0:	ldr	r0, [r0]
   15cf4:	cmp	r0, #0
   15cf8:	bne	15c98 <__assert_fail@plt+0x45c8>
   15cfc:	b	15ea0 <__assert_fail@plt+0x47d0>
   15d00:	movw	r9, #62304	; 0xf360
   15d04:	movt	r9, #2
   15d08:	ldr	r7, [r9, #84]	; 0x54
   15d0c:	cmp	r7, #0
   15d10:	bne	15d3c <__assert_fail@plt+0x466c>
   15d14:	ldr	r1, [r9, #36]	; 0x24
   15d18:	ldr	r2, [r9, #56]	; 0x38
   15d1c:	ldr	r0, [r9, #12]
   15d20:	ubfx	r1, r1, #7, #1
   15d24:	add	r1, r2, r1
   15d28:	bl	1167c <aligned_alloc@plt>
   15d2c:	mov	r7, r0
   15d30:	cmp	r0, #0
   15d34:	str	r0, [r9, #84]	; 0x54
   15d38:	beq	1604c <__assert_fail@plt+0x497c>
   15d3c:	ldr	r3, [r9, #68]	; 0x44
   15d40:	ldr	r2, [fp, #8]
   15d44:	orrs	r8, sl, r6
   15d48:	bne	15d54 <__assert_fail@plt+0x4684>
   15d4c:	ldr	r0, [fp, #12]
   15d50:	ldr	r2, [r0]
   15d54:	mov	r0, #0
   15d58:	mov	r1, r7
   15d5c:	blx	r3
   15d60:	cmp	r0, #0
   15d64:	bmi	15f4c <__assert_fail@plt+0x487c>
   15d68:	beq	15ea8 <__assert_fail@plt+0x47d8>
   15d6c:	ldr	r2, [r9, #104]	; 0x68
   15d70:	ldr	r1, [r9, #108]	; 0x6c
   15d74:	subs	r3, r5, r2
   15d78:	sbcs	r3, r5, r1
   15d7c:	bge	15ddc <__assert_fail@plt+0x470c>
   15d80:	cmn	r1, #1
   15d84:	mov	r3, #0
   15d88:	mov	r5, #0
   15d8c:	movwgt	r3, #1
   15d90:	adds	r2, r2, r0
   15d94:	adc	r1, r1, r0, asr #31
   15d98:	asr	r0, r0, #31
   15d9c:	cmn	r1, #1
   15da0:	movwgt	r5, #1
   15da4:	subs	r5, r3, r5
   15da8:	movwne	r5, #1
   15dac:	cmn	r0, #1
   15db0:	mov	r0, #0
   15db4:	movwgt	r0, #1
   15db8:	sub	r0, r3, r0
   15dbc:	clz	r0, r0
   15dc0:	lsr	r0, r0, #5
   15dc4:	ands	r0, r0, r5
   15dc8:	mvn	r5, #0
   15dcc:	movne	r2, r5
   15dd0:	movne	r1, r5
   15dd4:	str	r2, [r9, #104]	; 0x68
   15dd8:	str	r1, [r9, #108]	; 0x6c
   15ddc:	cmp	r8, #0
   15de0:	beq	15e08 <__assert_fail@plt+0x4738>
   15de4:	subs	sl, sl, #1
   15de8:	sbc	r6, r6, #0
   15dec:	orrs	r0, sl, r6
   15df0:	bne	15d3c <__assert_fail@plt+0x466c>
   15df4:	ldr	r0, [fp, #12]
   15df8:	ldr	r0, [r0]
   15dfc:	cmp	r0, #0
   15e00:	bne	15d3c <__assert_fail@plt+0x466c>
   15e04:	b	15ea0 <__assert_fail@plt+0x47d0>
   15e08:	ldr	r0, [fp, #12]
   15e0c:	mov	sl, #0
   15e10:	str	sl, [r0]
   15e14:	b	15ea4 <__assert_fail@plt+0x47d4>
   15e18:	cmp	r0, #0
   15e1c:	bne	160a8 <__assert_fail@plt+0x49d8>
   15e20:	ldr	r0, [sp, #56]	; 0x38
   15e24:	ldr	lr, [sp, #20]
   15e28:	and	r0, r0, #53248	; 0xd000
   15e2c:	orr	r0, r0, #8192	; 0x2000
   15e30:	cmp	r0, #40960	; 0xa000
   15e34:	movw	r0, #62304	; 0xf360
   15e38:	movt	r0, #2
   15e3c:	bne	15eb8 <__assert_fail@plt+0x47e8>
   15e40:	ldrd	r4, [r0, #104]	; 0x68
   15e44:	mvn	r1, #0
   15e48:	subs	r0, r1, r4
   15e4c:	sbcs	r0, r1, r5
   15e50:	bge	15ea0 <__assert_fail@plt+0x47d0>
   15e54:	ldr	r0, [sp, #88]	; 0x58
   15e58:	ldr	r1, [sp, #92]	; 0x5c
   15e5c:	ldr	r6, [sp, #24]
   15e60:	mov	r2, r9
   15e64:	mov	sl, #0
   15e68:	subs	r7, r0, r4
   15e6c:	sbc	r9, r1, r5
   15e70:	subs	r3, r7, lr
   15e74:	sbcs	r3, r9, r6
   15e78:	bge	15ed8 <__assert_fail@plt+0x4808>
   15e7c:	ldr	r3, [sp, #16]
   15e80:	subs	r0, lr, r0
   15e84:	sbc	r1, r6, r1
   15e88:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   15e8c:	mov	sl, r0
   15e90:	mov	r6, r1
   15e94:	mov	lr, r7
   15e98:	str	r9, [sp, #24]
   15e9c:	b	15edc <__assert_fail@plt+0x480c>
   15ea0:	mov	sl, #0
   15ea4:	mov	r6, #0
   15ea8:	mov	r0, sl
   15eac:	mov	r1, r6
   15eb0:	sub	sp, fp, #28
   15eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb8:	ldrd	r4, [r0, #104]	; 0x68
   15ebc:	mvn	ip, #0
   15ec0:	mov	sl, #0
   15ec4:	mov	r6, #0
   15ec8:	subs	r0, ip, r4
   15ecc:	sbcs	r0, ip, r5
   15ed0:	blt	15ee0 <__assert_fail@plt+0x4810>
   15ed4:	b	15ea8 <__assert_fail@plt+0x47d8>
   15ed8:	mov	r6, #0
   15edc:	mvn	ip, #0
   15ee0:	ldr	r7, [sp, #24]
   15ee4:	cmn	r5, #1
   15ee8:	mov	r1, #0
   15eec:	mov	r0, #0
   15ef0:	movwgt	r1, #1
   15ef4:	adds	r2, r4, lr
   15ef8:	adc	r3, r5, r7
   15efc:	mov	r5, #0
   15f00:	cmn	r3, #1
   15f04:	movwgt	r5, #1
   15f08:	subs	r5, r1, r5
   15f0c:	movwne	r5, #1
   15f10:	cmn	r7, #1
   15f14:	movwgt	r0, #1
   15f18:	sub	r0, r1, r0
   15f1c:	clz	r0, r0
   15f20:	lsr	r0, r0, #5
   15f24:	ands	r0, r0, r5
   15f28:	movw	r0, #62304	; 0xf360
   15f2c:	movt	r0, #2
   15f30:	movne	r3, ip
   15f34:	movne	r2, ip
   15f38:	strd	r2, [r0, #104]	; 0x68
   15f3c:	mov	r0, sl
   15f40:	mov	r1, r6
   15f44:	sub	sp, fp, #28
   15f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f4c:	ldr	r0, [sp, #36]	; 0x24
   15f50:	cmp	r0, #0
   15f54:	bne	15fb4 <__assert_fail@plt+0x48e4>
   15f58:	ldr	r0, [sp, #32]
   15f5c:	movw	r1, #56262	; 0xdbc6
   15f60:	mov	r2, #5
   15f64:	movt	r1, #1
   15f68:	ldr	r4, [r0]
   15f6c:	mov	r0, #0
   15f70:	bl	11424 <dcgettext@plt>
   15f74:	ldr	r1, [sp, #28]
   15f78:	mov	r5, r0
   15f7c:	mov	r0, #4
   15f80:	bl	19920 <__assert_fail@plt+0x8250>
   15f84:	mov	r3, r0
   15f88:	mov	r0, #0
   15f8c:	mov	r1, r4
   15f90:	mov	r2, r5
   15f94:	bl	14890 <__assert_fail@plt+0x31c0>
   15f98:	movw	r0, #62304	; 0xf360
   15f9c:	movt	r0, #2
   15fa0:	ldrb	r0, [r0, #37]	; 0x25
   15fa4:	tst	r0, #1
   15fa8:	beq	15ff0 <__assert_fail@plt+0x4920>
   15fac:	bl	1553c <__assert_fail@plt+0x3e6c>
   15fb0:	bl	1634c <__assert_fail@plt+0x4c7c>
   15fb4:	movw	r1, #56312	; 0xdbf8
   15fb8:	mov	r0, #0
   15fbc:	mov	r2, #5
   15fc0:	movt	r1, #1
   15fc4:	bl	11424 <dcgettext@plt>
   15fc8:	ldr	r2, [sp, #28]
   15fcc:	mov	r4, r0
   15fd0:	mov	r0, #0
   15fd4:	mov	r1, #3
   15fd8:	bl	19b9c <__assert_fail@plt+0x84cc>
   15fdc:	ldr	r1, [sp, #24]
   15fe0:	mov	r3, r0
   15fe4:	mov	r0, #0
   15fe8:	mov	r2, r4
   15fec:	bl	14890 <__assert_fail@plt+0x31c0>
   15ff0:	bl	1634c <__assert_fail@plt+0x4c7c>
   15ff4:	movw	r0, #56296	; 0xdbe8
   15ff8:	movw	r1, #56312	; 0xdbf8
   15ffc:	cmp	r8, #0
   16000:	mov	r2, #5
   16004:	movt	r0, #1
   16008:	movt	r1, #1
   1600c:	moveq	r1, r0
   16010:	mov	r0, #0
   16014:	bl	11424 <dcgettext@plt>
   16018:	mov	r4, r0
   1601c:	mov	r0, #0
   16020:	mov	r1, #3
   16024:	mov	r2, r7
   16028:	bl	19b9c <__assert_fail@plt+0x84cc>
   1602c:	ldr	r1, [sp, #24]
   16030:	mov	r3, r0
   16034:	mov	r0, #0
   16038:	mov	r2, r4
   1603c:	cmp	r1, #0
   16040:	movweq	r1, #75	; 0x4b
   16044:	bl	14890 <__assert_fail@plt+0x31c0>
   16048:	bl	1634c <__assert_fail@plt+0x4c7c>
   1604c:	movw	r1, #56360	; 0xdc28
   16050:	mov	r0, #0
   16054:	mov	r2, #5
   16058:	mov	r6, #0
   1605c:	movt	r1, #1
   16060:	bl	11424 <dcgettext@plt>
   16064:	ldr	r5, [r9, #56]	; 0x38
   16068:	mov	r4, r0
   1606c:	mov	r0, #1
   16070:	add	r2, sp, #40	; 0x28
   16074:	movw	r3, #497	; 0x1f1
   16078:	stm	sp, {r0, r6}
   1607c:	str	r0, [sp, #8]
   16080:	str	r6, [sp, #12]
   16084:	asr	r1, r5, #31
   16088:	mov	r0, r5
   1608c:	bl	16c58 <__assert_fail@plt+0x5588>
   16090:	str	r0, [sp]
   16094:	mov	r0, #1
   16098:	mov	r1, #0
   1609c:	mov	r2, r4
   160a0:	mov	r3, r5
   160a4:	bl	14890 <__assert_fail@plt+0x31c0>
   160a8:	ldr	r4, [r6]
   160ac:	b	15c10 <__assert_fail@plt+0x4540>
   160b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160b4:	add	fp, sp, #28
   160b8:	sub	sp, sp, #20
   160bc:	movw	r7, #62304	; 0xf360
   160c0:	mov	r5, r0
   160c4:	mov	r4, r1
   160c8:	movt	r7, #2
   160cc:	ldrb	r0, [r7, #34]	; 0x22
   160d0:	tst	r0, #1
   160d4:	beq	16204 <__assert_fail@plt+0x4b34>
   160d8:	ldr	r0, [r7, #40]	; 0x28
   160dc:	cmp	r0, r4
   160e0:	ble	16204 <__assert_fail@plt+0x4b34>
   160e4:	mov	r0, #1
   160e8:	mov	r1, #3
   160ec:	mov	sl, #1
   160f0:	bl	16898 <__assert_fail@plt+0x51c8>
   160f4:	bic	r2, r0, #65536	; 0x10000
   160f8:	mov	r0, #1
   160fc:	mov	r1, #4
   16100:	bl	16898 <__assert_fail@plt+0x51c8>
   16104:	movw	r9, #61768	; 0xf148
   16108:	cmp	r0, #0
   1610c:	movt	r9, #2
   16110:	ldrne	r0, [r9]
   16114:	cmpne	r0, #1
   16118:	beq	16160 <__assert_fail@plt+0x4a90>
   1611c:	bl	11598 <__errno_location@plt>
   16120:	movw	r1, #56328	; 0xdc08
   16124:	ldr	r8, [r0]
   16128:	mov	r0, #0
   1612c:	mov	r2, #5
   16130:	movt	r1, #1
   16134:	bl	11424 <dcgettext@plt>
   16138:	ldr	r2, [r7, #28]
   1613c:	mov	r6, r0
   16140:	mov	r0, #0
   16144:	mov	r1, #3
   16148:	bl	19b9c <__assert_fail@plt+0x84cc>
   1614c:	mov	r3, r0
   16150:	mov	r0, #0
   16154:	mov	r1, r8
   16158:	mov	r2, r6
   1615c:	bl	14890 <__assert_fail@plt+0x31c0>
   16160:	ldrd	r0, [r9, #24]
   16164:	strb	sl, [r7, #5]
   16168:	and	r2, r0, r1
   1616c:	cmn	r2, #1
   16170:	beq	161f8 <__assert_fail@plt+0x4b28>
   16174:	movw	r2, #62424	; 0xf3d8
   16178:	cmn	r1, #1
   1617c:	movt	r2, #2
   16180:	ldr	r6, [r2, #88]	; 0x58
   16184:	ldr	r8, [r2, #92]	; 0x5c
   16188:	bgt	161b8 <__assert_fail@plt+0x4ae8>
   1618c:	mov	r0, #1
   16190:	mov	r2, #0
   16194:	mov	r3, #0
   16198:	mvn	sl, #0
   1619c:	str	r0, [sp]
   161a0:	mov	r0, #1
   161a4:	bl	11490 <lseek64@plt>
   161a8:	subs	r2, sl, r0
   161ac:	strd	r0, [r9, #24]
   161b0:	sbcs	r2, sl, r1
   161b4:	bge	161f8 <__assert_fail@plt+0x4b28>
   161b8:	ldr	r2, [r7, #12]
   161bc:	subs	r6, r0, r6
   161c0:	sbc	r8, r1, r8
   161c4:	mov	r0, r6
   161c8:	mov	r1, r8
   161cc:	asr	r3, r2, #31
   161d0:	bl	1c5e4 <__assert_fail@plt+0xaf14>
   161d4:	mov	r0, #4
   161d8:	subs	r2, r6, r2
   161dc:	mov	r1, #0
   161e0:	str	r0, [sp, #8]
   161e4:	sbc	r3, r8, r3
   161e8:	mov	r0, #1
   161ec:	str	r1, [sp]
   161f0:	str	r1, [sp, #4]
   161f4:	bl	11394 <posix_fadvise64@plt>
   161f8:	ldr	r0, [r7, #36]	; 0x24
   161fc:	orr	r0, r0, #32768	; 0x8000
   16200:	str	r0, [r7, #36]	; 0x24
   16204:	cmp	r4, #1
   16208:	blt	16308 <__assert_fail@plt+0x4c38>
   1620c:	asr	r0, r4, #31
   16210:	sub	r9, r4, #1
   16214:	mov	sl, #0
   16218:	mov	r6, #0
   1621c:	mov	r8, #1
   16220:	str	r0, [sp, #16]
   16224:	b	16240 <__assert_fail@plt+0x4b70>
   16228:	bl	11598 <__errno_location@plt>
   1622c:	ldr	r0, [r0]
   16230:	cmp	r0, #4
   16234:	bne	16324 <__assert_fail@plt+0x4c54>
   16238:	cmp	r6, r4
   1623c:	bge	16324 <__assert_fail@plt+0x4c54>
   16240:	bl	15390 <__assert_fail@plt+0x3cc0>
   16244:	strb	sl, [r7, #10]
   16248:	ldrb	r0, [r7, #38]	; 0x26
   1624c:	tst	r0, #1
   16250:	beq	16298 <__assert_fail@plt+0x4bc8>
   16254:	mov	r0, #0
   16258:	ldrb	r1, [r5, -r0]
   1625c:	cmp	r1, #0
   16260:	bne	16298 <__assert_fail@plt+0x4bc8>
   16264:	add	r1, r4, r0
   16268:	cmp	r1, #1
   1626c:	beq	162c8 <__assert_fail@plt+0x4bf8>
   16270:	add	r1, r9, r0
   16274:	sub	r0, r0, #1
   16278:	tst	r1, #15
   1627c:	bne	16258 <__assert_fail@plt+0x4b88>
   16280:	sub	r1, r5, r0
   16284:	add	r2, r4, r0
   16288:	mov	r0, r5
   1628c:	bl	11568 <bcmp@plt>
   16290:	cmp	r0, #0
   16294:	beq	162c8 <__assert_fail@plt+0x4bf8>
   16298:	add	r1, r5, r6
   1629c:	sub	r2, r4, r6
   162a0:	mov	r0, #1
   162a4:	bl	115e0 <write@plt>
   162a8:	cmn	r0, #1
   162ac:	ble	16228 <__assert_fail@plt+0x4b58>
   162b0:	cmp	r0, #0
   162b4:	beq	16318 <__assert_fail@plt+0x4c48>
   162b8:	add	r6, r0, r6
   162bc:	cmp	r6, r4
   162c0:	blt	16240 <__assert_fail@plt+0x4b70>
   162c4:	b	16324 <__assert_fail@plt+0x4c54>
   162c8:	ldr	r3, [sp, #16]
   162cc:	mov	r0, #1
   162d0:	mov	r2, r4
   162d4:	str	r8, [sp]
   162d8:	bl	11490 <lseek64@plt>
   162dc:	cmn	r1, #1
   162e0:	ble	162f8 <__assert_fail@plt+0x4c28>
   162e4:	strb	r8, [r7, #10]
   162e8:	mov	r0, r4
   162ec:	cmn	r0, #1
   162f0:	bgt	162b0 <__assert_fail@plt+0x4be0>
   162f4:	b	16228 <__assert_fail@plt+0x4b58>
   162f8:	ldr	r0, [r7, #36]	; 0x24
   162fc:	bic	r0, r0, #65536	; 0x10000
   16300:	str	r0, [r7, #36]	; 0x24
   16304:	b	16298 <__assert_fail@plt+0x4bc8>
   16308:	mov	r6, #0
   1630c:	mov	r0, r6
   16310:	sub	sp, fp, #28
   16314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16318:	bl	11598 <__errno_location@plt>
   1631c:	mov	r1, #28
   16320:	str	r1, [r0]
   16324:	cmp	r6, #0
   16328:	ldrbne	r0, [r7, #3]
   1632c:	cmpne	r0, #0
   16330:	asrne	r3, r6, #31
   16334:	movne	r0, #1
   16338:	movne	r2, r6
   1633c:	blne	14a70 <__assert_fail@plt+0x33a0>
   16340:	mov	r0, r6
   16344:	sub	sp, fp, #28
   16348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1634c:	push	{fp, lr}
   16350:	mov	fp, sp
   16354:	bl	14db0 <__assert_fail@plt+0x36e0>
   16358:	mov	r0, #1
   1635c:	bl	1155c <exit@plt>
   16360:	push	{r4, r5, r6, sl, fp, lr}
   16364:	add	fp, sp, #16
   16368:	sub	sp, sp, #672	; 0x2a0
   1636c:	movw	r5, #62304	; 0xf360
   16370:	movt	r5, #2
   16374:	ldr	r0, [r5, #80]	; 0x50
   16378:	cmp	r0, #0
   1637c:	bne	163dc <__assert_fail@plt+0x4d0c>
   16380:	ldr	r1, [r5, #36]	; 0x24
   16384:	tst	r1, #2048	; 0x800
   16388:	bne	163c4 <__assert_fail@plt+0x4cf4>
   1638c:	ldr	r0, [r5, #84]	; 0x54
   16390:	cmp	r0, #0
   16394:	bne	163b8 <__assert_fail@plt+0x4ce8>
   16398:	ldr	r2, [r5, #56]	; 0x38
   1639c:	ldr	r0, [r5, #12]
   163a0:	ubfx	r1, r1, #7, #1
   163a4:	add	r1, r2, r1
   163a8:	bl	1167c <aligned_alloc@plt>
   163ac:	cmp	r0, #0
   163b0:	str	r0, [r5, #84]	; 0x54
   163b4:	beq	16404 <__assert_fail@plt+0x4d34>
   163b8:	str	r0, [r5, #80]	; 0x50
   163bc:	sub	sp, fp, #16
   163c0:	pop	{r4, r5, r6, sl, fp, pc}
   163c4:	ldr	r0, [r5, #12]
   163c8:	ldr	r1, [r5, #40]	; 0x28
   163cc:	bl	1167c <aligned_alloc@plt>
   163d0:	cmp	r0, #0
   163d4:	str	r0, [r5, #80]	; 0x50
   163d8:	beq	163e4 <__assert_fail@plt+0x4d14>
   163dc:	sub	sp, fp, #16
   163e0:	pop	{r4, r5, r6, sl, fp, pc}
   163e4:	movw	r1, #56416	; 0xdc60
   163e8:	mov	r0, #0
   163ec:	mov	r2, #5
   163f0:	mov	r6, #0
   163f4:	movt	r1, #1
   163f8:	bl	11424 <dcgettext@plt>
   163fc:	ldr	r5, [r5, #40]	; 0x28
   16400:	b	16420 <__assert_fail@plt+0x4d50>
   16404:	movw	r1, #56360	; 0xdc28
   16408:	mov	r0, #0
   1640c:	mov	r2, #5
   16410:	mov	r6, #0
   16414:	movt	r1, #1
   16418:	bl	11424 <dcgettext@plt>
   1641c:	ldr	r5, [r5, #56]	; 0x38
   16420:	mov	r4, r0
   16424:	mov	r0, #1
   16428:	asr	r1, r5, #31
   1642c:	add	r2, sp, #20
   16430:	movw	r3, #497	; 0x1f1
   16434:	stm	sp, {r0, r6}
   16438:	str	r0, [sp, #8]
   1643c:	mov	r0, r5
   16440:	str	r6, [sp, #12]
   16444:	bl	16c58 <__assert_fail@plt+0x5588>
   16448:	str	r0, [sp]
   1644c:	mov	r0, #1
   16450:	mov	r1, #0
   16454:	mov	r2, r4
   16458:	mov	r3, r5
   1645c:	bl	14890 <__assert_fail@plt+0x31c0>
   16460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16464:	add	fp, sp, #28
   16468:	sub	sp, sp, #4
   1646c:	cmp	r1, #1
   16470:	blt	165a8 <__assert_fail@plt+0x4ed8>
   16474:	movw	r7, #62304	; 0xf360
   16478:	mov	sl, r1
   1647c:	mov	r9, r0
   16480:	mov	r8, #0
   16484:	mov	r6, #0
   16488:	movt	r7, #2
   1648c:	b	164d8 <__assert_fail@plt+0x4e08>
   16490:	str	r8, [r7, #92]	; 0x5c
   16494:	str	r8, [r7, #96]	; 0x60
   16498:	sub	r6, r6, #1
   1649c:	ldr	r0, [r7, #88]	; 0x58
   164a0:	add	r1, r0, #1
   164a4:	str	r1, [r7, #88]	; 0x58
   164a8:	ldrb	r2, [r7, #8]
   164ac:	ldr	r3, [r7, #80]	; 0x50
   164b0:	cmp	r2, #0
   164b4:	mov	r2, #10
   164b8:	movwne	r2, #37	; 0x25
   164bc:	strb	r2, [r3, r0]
   164c0:	ldr	r0, [r7, #40]	; 0x28
   164c4:	cmp	r1, r0
   164c8:	blge	165b0 <__assert_fail@plt+0x4ee0>
   164cc:	add	r6, r6, #1
   164d0:	cmp	r6, sl
   164d4:	bge	165a8 <__assert_fail@plt+0x4ed8>
   164d8:	ldr	r1, [r7, #92]	; 0x5c
   164dc:	ldr	r0, [r7, #60]	; 0x3c
   164e0:	ldrb	r5, [r9, r6]
   164e4:	add	r2, r1, #1
   164e8:	cmp	r1, r0
   164ec:	str	r2, [r7, #92]	; 0x5c
   164f0:	bge	16490 <__assert_fail@plt+0x4dc0>
   164f4:	ldrb	r1, [r7, #9]
   164f8:	ldr	r0, [r7, #96]	; 0x60
   164fc:	mov	r2, #32
   16500:	cmp	r1, #0
   16504:	movwne	r2, #64	; 0x40
   16508:	cmp	r2, r5
   1650c:	bne	16528 <__assert_fail@plt+0x4e58>
   16510:	add	r0, r0, #1
   16514:	str	r0, [r7, #96]	; 0x60
   16518:	add	r6, r6, #1
   1651c:	cmp	r6, sl
   16520:	blt	164d8 <__assert_fail@plt+0x4e08>
   16524:	b	165a8 <__assert_fail@plt+0x4ed8>
   16528:	cmp	r0, #0
   1652c:	beq	16578 <__assert_fail@plt+0x4ea8>
   16530:	ldr	r3, [r7, #88]	; 0x58
   16534:	ldr	r2, [r7, #80]	; 0x50
   16538:	tst	r1, #1
   1653c:	mov	r1, #32
   16540:	movwne	r1, #64	; 0x40
   16544:	add	r4, r3, #1
   16548:	str	r4, [r7, #88]	; 0x58
   1654c:	strb	r1, [r2, r3]
   16550:	ldr	r1, [r7, #40]	; 0x28
   16554:	cmp	r4, r1
   16558:	blt	16564 <__assert_fail@plt+0x4e94>
   1655c:	bl	165b0 <__assert_fail@plt+0x4ee0>
   16560:	ldr	r0, [r7, #96]	; 0x60
   16564:	subs	r0, r0, #1
   16568:	str	r0, [r7, #96]	; 0x60
   1656c:	beq	16578 <__assert_fail@plt+0x4ea8>
   16570:	ldrb	r1, [r7, #9]
   16574:	b	16530 <__assert_fail@plt+0x4e60>
   16578:	ldr	r1, [r7, #88]	; 0x58
   1657c:	ldr	r0, [r7, #80]	; 0x50
   16580:	add	r2, r1, #1
   16584:	str	r2, [r7, #88]	; 0x58
   16588:	strb	r5, [r0, r1]
   1658c:	ldr	r0, [r7, #40]	; 0x28
   16590:	cmp	r2, r0
   16594:	blt	164cc <__assert_fail@plt+0x4dfc>
   16598:	bl	165b0 <__assert_fail@plt+0x4ee0>
   1659c:	add	r6, r6, #1
   165a0:	cmp	r6, sl
   165a4:	blt	164d8 <__assert_fail@plt+0x4e08>
   165a8:	sub	sp, fp, #28
   165ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   165b4:	add	fp, sp, #24
   165b8:	movw	r5, #62304	; 0xf360
   165bc:	movt	r5, #2
   165c0:	ldr	r1, [r5, #40]	; 0x28
   165c4:	ldr	r0, [r5, #80]	; 0x50
   165c8:	bl	160b0 <__assert_fail@plt+0x49e0>
   165cc:	movw	r7, #62424	; 0xf3d8
   165d0:	mov	r4, r0
   165d4:	movt	r7, #2
   165d8:	ldrd	r0, [r7, #72]	; 0x48
   165dc:	adds	r0, r0, r4
   165e0:	adc	r1, r1, r4, asr #31
   165e4:	strd	r0, [r7, #72]	; 0x48
   165e8:	ldr	r0, [r5, #40]	; 0x28
   165ec:	cmp	r4, r0
   165f0:	bne	16610 <__assert_fail@plt+0x4f40>
   165f4:	mov	r0, #0
   165f8:	str	r0, [r5, #88]	; 0x58
   165fc:	ldrd	r0, [r7, #48]	; 0x30
   16600:	adds	r0, r0, #1
   16604:	adc	r1, r1, #0
   16608:	strd	r0, [r7, #48]	; 0x30
   1660c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16610:	bl	11598 <__errno_location@plt>
   16614:	movw	r1, #56248	; 0xdbb8
   16618:	ldr	r8, [r0]
   1661c:	mov	r0, #0
   16620:	mov	r2, #5
   16624:	movt	r1, #1
   16628:	bl	11424 <dcgettext@plt>
   1662c:	ldr	r1, [r5, #28]
   16630:	mov	r6, r0
   16634:	mov	r0, #4
   16638:	bl	19920 <__assert_fail@plt+0x8250>
   1663c:	mov	r3, r0
   16640:	mov	r0, #0
   16644:	mov	r1, r8
   16648:	mov	r2, r6
   1664c:	bl	14890 <__assert_fail@plt+0x31c0>
   16650:	cmp	r4, #0
   16654:	beq	16668 <__assert_fail@plt+0x4f98>
   16658:	ldrd	r0, [r7, #56]	; 0x38
   1665c:	adds	r0, r0, #1
   16660:	adc	r1, r1, #0
   16664:	strd	r0, [r7, #56]	; 0x38
   16668:	bl	1634c <__assert_fail@plt+0x4c7c>
   1666c:	push	{r4, r5, r6, sl, fp, lr}
   16670:	add	fp, sp, #16
   16674:	mov	r4, r0
   16678:	bl	114a8 <__fpending@plt>
   1667c:	ldr	r6, [r4]
   16680:	mov	r5, r0
   16684:	mov	r0, r4
   16688:	bl	167fc <__assert_fail@plt+0x512c>
   1668c:	tst	r6, #32
   16690:	bne	166c8 <__assert_fail@plt+0x4ff8>
   16694:	cmp	r0, #0
   16698:	mov	r4, r0
   1669c:	mvnne	r4, #0
   166a0:	cmp	r5, #0
   166a4:	bne	166d4 <__assert_fail@plt+0x5004>
   166a8:	cmp	r0, #0
   166ac:	beq	166d4 <__assert_fail@plt+0x5004>
   166b0:	bl	11598 <__errno_location@plt>
   166b4:	ldr	r0, [r0]
   166b8:	subs	r4, r0, #9
   166bc:	mvnne	r4, #0
   166c0:	mov	r0, r4
   166c4:	pop	{r4, r5, r6, sl, fp, pc}
   166c8:	mvn	r4, #0
   166cc:	cmp	r0, #0
   166d0:	beq	166dc <__assert_fail@plt+0x500c>
   166d4:	mov	r0, r4
   166d8:	pop	{r4, r5, r6, sl, fp, pc}
   166dc:	bl	11598 <__errno_location@plt>
   166e0:	mov	r1, #0
   166e4:	str	r1, [r0]
   166e8:	mov	r0, r4
   166ec:	pop	{r4, r5, r6, sl, fp, pc}
   166f0:	movw	r1, #62520	; 0xf438
   166f4:	movt	r1, #2
   166f8:	str	r0, [r1, #4]
   166fc:	bx	lr
   16700:	movw	r1, #62520	; 0xf438
   16704:	movt	r1, #2
   16708:	strb	r0, [r1]
   1670c:	bx	lr
   16710:	push	{r4, r5, r6, sl, fp, lr}
   16714:	add	fp, sp, #16
   16718:	sub	sp, sp, #8
   1671c:	movw	r0, #61908	; 0xf1d4
   16720:	movt	r0, #2
   16724:	ldr	r0, [r0]
   16728:	bl	1666c <__assert_fail@plt+0x4f9c>
   1672c:	cmp	r0, #0
   16730:	beq	16758 <__assert_fail@plt+0x5088>
   16734:	movw	r5, #62520	; 0xf438
   16738:	movt	r5, #2
   1673c:	ldrb	r0, [r5]
   16740:	cmp	r0, #0
   16744:	beq	16784 <__assert_fail@plt+0x50b4>
   16748:	bl	11598 <__errno_location@plt>
   1674c:	ldr	r0, [r0]
   16750:	cmp	r0, #32
   16754:	bne	16784 <__assert_fail@plt+0x50b4>
   16758:	movw	r0, #61904	; 0xf1d0
   1675c:	movt	r0, #2
   16760:	ldr	r0, [r0]
   16764:	bl	1666c <__assert_fail@plt+0x4f9c>
   16768:	cmp	r0, #0
   1676c:	subeq	sp, fp, #16
   16770:	popeq	{r4, r5, r6, sl, fp, pc}
   16774:	movw	r0, #61804	; 0xf16c
   16778:	movt	r0, #2
   1677c:	ldr	r0, [r0]
   16780:	bl	113e8 <_exit@plt>
   16784:	movw	r1, #58127	; 0xe30f
   16788:	mov	r0, #0
   1678c:	mov	r2, #5
   16790:	movt	r1, #1
   16794:	bl	11424 <dcgettext@plt>
   16798:	ldr	r6, [r5, #4]
   1679c:	mov	r4, r0
   167a0:	bl	11598 <__errno_location@plt>
   167a4:	ldr	r5, [r0]
   167a8:	cmp	r6, #0
   167ac:	bne	167c8 <__assert_fail@plt+0x50f8>
   167b0:	movw	r2, #56184	; 0xdb78
   167b4:	mov	r0, #0
   167b8:	mov	r1, r5
   167bc:	mov	r3, r4
   167c0:	movt	r2, #1
   167c4:	b	167e8 <__assert_fail@plt+0x5118>
   167c8:	mov	r0, r6
   167cc:	bl	19ac0 <__assert_fail@plt+0x83f0>
   167d0:	movw	r2, #55479	; 0xd8b7
   167d4:	mov	r3, r0
   167d8:	str	r4, [sp]
   167dc:	mov	r0, #0
   167e0:	mov	r1, r5
   167e4:	movt	r2, #1
   167e8:	bl	114c0 <error@plt>
   167ec:	movw	r0, #61804	; 0xf16c
   167f0:	movt	r0, #2
   167f4:	ldr	r0, [r0]
   167f8:	bl	113e8 <_exit@plt>
   167fc:	push	{r4, r5, r6, sl, fp, lr}
   16800:	add	fp, sp, #16
   16804:	sub	sp, sp, #8
   16808:	mov	r4, r0
   1680c:	bl	115ec <fileno@plt>
   16810:	cmn	r0, #1
   16814:	ble	16888 <__assert_fail@plt+0x51b8>
   16818:	mov	r0, r4
   1681c:	bl	11514 <__freading@plt>
   16820:	cmp	r0, #0
   16824:	beq	16850 <__assert_fail@plt+0x5180>
   16828:	mov	r0, r4
   1682c:	bl	115ec <fileno@plt>
   16830:	mov	r1, #1
   16834:	mov	r2, #0
   16838:	mov	r3, #0
   1683c:	str	r1, [sp]
   16840:	bl	11490 <lseek64@plt>
   16844:	and	r0, r0, r1
   16848:	cmn	r0, #1
   1684c:	beq	16888 <__assert_fail@plt+0x51b8>
   16850:	mov	r0, r4
   16854:	bl	16ae0 <__assert_fail@plt+0x5410>
   16858:	cmp	r0, #0
   1685c:	beq	16888 <__assert_fail@plt+0x51b8>
   16860:	bl	11598 <__errno_location@plt>
   16864:	ldr	r6, [r0]
   16868:	mov	r5, r0
   1686c:	mov	r0, r4
   16870:	bl	11604 <fclose@plt>
   16874:	cmp	r6, #0
   16878:	strne	r6, [r5]
   1687c:	mvnne	r0, #0
   16880:	sub	sp, fp, #16
   16884:	pop	{r4, r5, r6, sl, fp, pc}
   16888:	mov	r0, r4
   1688c:	sub	sp, fp, #16
   16890:	pop	{r4, r5, r6, sl, fp, lr}
   16894:	b	11604 <fclose@plt>
   16898:	sub	sp, sp, #8
   1689c:	push	{r4, r5, r6, r7, fp, lr}
   168a0:	add	fp, sp, #16
   168a4:	sub	sp, sp, #8
   168a8:	mov	r5, r0
   168ac:	add	r0, fp, #8
   168b0:	cmp	r1, #11
   168b4:	str	r2, [fp, #8]
   168b8:	str	r3, [fp, #12]
   168bc:	str	r0, [sp, #4]
   168c0:	bhi	168fc <__assert_fail@plt+0x522c>
   168c4:	mov	r0, #1
   168c8:	movw	r2, #1300	; 0x514
   168cc:	tst	r2, r0, lsl r1
   168d0:	bne	169bc <__assert_fail@plt+0x52ec>
   168d4:	movw	r2, #2570	; 0xa0a
   168d8:	tst	r2, r0, lsl r1
   168dc:	bne	16924 <__assert_fail@plt+0x5254>
   168e0:	cmp	r1, #0
   168e4:	bne	168fc <__assert_fail@plt+0x522c>
   168e8:	ldr	r0, [sp, #4]
   168ec:	add	r1, r0, #4
   168f0:	str	r1, [sp, #4]
   168f4:	mov	r1, #0
   168f8:	b	169c8 <__assert_fail@plt+0x52f8>
   168fc:	sub	r0, r1, #1024	; 0x400
   16900:	cmp	r0, #10
   16904:	bhi	169bc <__assert_fail@plt+0x52ec>
   16908:	mov	r2, #1
   1690c:	movw	r3, #645	; 0x285
   16910:	tst	r3, r2, lsl r0
   16914:	bne	169bc <__assert_fail@plt+0x52ec>
   16918:	movw	r3, #1282	; 0x502
   1691c:	tst	r3, r2, lsl r0
   16920:	beq	16930 <__assert_fail@plt+0x5260>
   16924:	mov	r0, r5
   16928:	bl	1161c <fcntl64@plt>
   1692c:	b	169d4 <__assert_fail@plt+0x5304>
   16930:	cmp	r0, #6
   16934:	bne	169bc <__assert_fail@plt+0x52ec>
   16938:	ldr	r0, [sp, #4]
   1693c:	movw	r7, #62528	; 0xf440
   16940:	movt	r7, #2
   16944:	add	r1, r0, #4
   16948:	str	r1, [sp, #4]
   1694c:	ldr	r6, [r0]
   16950:	ldr	r0, [r7]
   16954:	cmp	r0, #0
   16958:	bmi	169f8 <__assert_fail@plt+0x5328>
   1695c:	mov	r0, r5
   16960:	movw	r1, #1030	; 0x406
   16964:	mov	r2, r6
   16968:	bl	1161c <fcntl64@plt>
   1696c:	mov	r4, r0
   16970:	cmn	r0, #1
   16974:	bgt	169ec <__assert_fail@plt+0x531c>
   16978:	bl	11598 <__errno_location@plt>
   1697c:	ldr	r0, [r0]
   16980:	cmp	r0, #22
   16984:	bne	169ec <__assert_fail@plt+0x531c>
   16988:	mov	r0, r5
   1698c:	mov	r1, #0
   16990:	mov	r2, r6
   16994:	bl	1161c <fcntl64@plt>
   16998:	mov	r4, r0
   1699c:	cmp	r0, #0
   169a0:	bmi	169d8 <__assert_fail@plt+0x5308>
   169a4:	mvn	r0, #0
   169a8:	str	r0, [r7]
   169ac:	mov	r0, #1
   169b0:	cmp	r0, #0
   169b4:	bne	16a24 <__assert_fail@plt+0x5354>
   169b8:	b	169d8 <__assert_fail@plt+0x5308>
   169bc:	ldr	r0, [sp, #4]
   169c0:	add	r2, r0, #4
   169c4:	str	r2, [sp, #4]
   169c8:	ldr	r2, [r0]
   169cc:	mov	r0, r5
   169d0:	bl	1161c <fcntl64@plt>
   169d4:	mov	r4, r0
   169d8:	mov	r0, r4
   169dc:	sub	sp, fp, #16
   169e0:	pop	{r4, r5, r6, r7, fp, lr}
   169e4:	add	sp, sp, #8
   169e8:	bx	lr
   169ec:	mov	r0, #1
   169f0:	str	r0, [r7]
   169f4:	b	169d8 <__assert_fail@plt+0x5308>
   169f8:	mov	r0, r5
   169fc:	mov	r1, #0
   16a00:	mov	r2, r6
   16a04:	bl	1161c <fcntl64@plt>
   16a08:	mov	r4, r0
   16a0c:	ldr	r0, [r7]
   16a10:	add	r0, r0, #1
   16a14:	clz	r0, r0
   16a18:	lsr	r0, r0, #5
   16a1c:	cmp	r0, #0
   16a20:	beq	169d8 <__assert_fail@plt+0x5308>
   16a24:	cmp	r4, #0
   16a28:	bmi	169d8 <__assert_fail@plt+0x5308>
   16a2c:	mov	r0, r4
   16a30:	mov	r1, #1
   16a34:	bl	1161c <fcntl64@plt>
   16a38:	cmp	r0, #0
   16a3c:	bmi	16a58 <__assert_fail@plt+0x5388>
   16a40:	orr	r2, r0, #1
   16a44:	mov	r0, r4
   16a48:	mov	r1, #2
   16a4c:	bl	1161c <fcntl64@plt>
   16a50:	cmn	r0, #1
   16a54:	bne	169d8 <__assert_fail@plt+0x5308>
   16a58:	bl	11598 <__errno_location@plt>
   16a5c:	ldr	r6, [r0]
   16a60:	mov	r5, r0
   16a64:	mov	r0, r4
   16a68:	bl	116ac <close@plt>
   16a6c:	str	r6, [r5]
   16a70:	mvn	r4, #0
   16a74:	b	169d8 <__assert_fail@plt+0x5308>
   16a78:	push	{r4, r5, r6, r7, fp, lr}
   16a7c:	add	fp, sp, #16
   16a80:	mov	r5, r0
   16a84:	mov	r0, r1
   16a88:	mov	r1, r2
   16a8c:	mov	r2, r3
   16a90:	bl	114cc <open64@plt>
   16a94:	mov	r4, r0
   16a98:	cmp	r0, r5
   16a9c:	beq	16ad8 <__assert_fail@plt+0x5408>
   16aa0:	cmp	r4, #0
   16aa4:	bmi	16ad8 <__assert_fail@plt+0x5408>
   16aa8:	mov	r0, r4
   16aac:	mov	r1, r5
   16ab0:	bl	11430 <dup2@plt>
   16ab4:	mov	r5, r0
   16ab8:	bl	11598 <__errno_location@plt>
   16abc:	ldr	r7, [r0]
   16ac0:	mov	r6, r0
   16ac4:	mov	r0, r4
   16ac8:	bl	116ac <close@plt>
   16acc:	mov	r0, r5
   16ad0:	str	r7, [r6]
   16ad4:	pop	{r4, r5, r6, r7, fp, pc}
   16ad8:	mov	r0, r4
   16adc:	pop	{r4, r5, r6, r7, fp, pc}
   16ae0:	push	{r4, sl, fp, lr}
   16ae4:	add	fp, sp, #8
   16ae8:	sub	sp, sp, #8
   16aec:	mov	r4, r0
   16af0:	cmp	r0, #0
   16af4:	beq	16b2c <__assert_fail@plt+0x545c>
   16af8:	mov	r0, r4
   16afc:	bl	11514 <__freading@plt>
   16b00:	cmp	r0, #0
   16b04:	beq	16b2c <__assert_fail@plt+0x545c>
   16b08:	ldrb	r0, [r4, #1]
   16b0c:	tst	r0, #1
   16b10:	beq	16b2c <__assert_fail@plt+0x545c>
   16b14:	mov	r0, #1
   16b18:	mov	r2, #0
   16b1c:	mov	r3, #0
   16b20:	str	r0, [sp]
   16b24:	mov	r0, r4
   16b28:	bl	16b3c <__assert_fail@plt+0x546c>
   16b2c:	mov	r0, r4
   16b30:	sub	sp, fp, #8
   16b34:	pop	{r4, sl, fp, lr}
   16b38:	b	113ac <fflush@plt>
   16b3c:	push	{r4, r5, r6, r7, fp, lr}
   16b40:	add	fp, sp, #16
   16b44:	sub	sp, sp, #8
   16b48:	mov	r4, r0
   16b4c:	ldr	r0, [r0, #4]
   16b50:	mov	r5, r3
   16b54:	mov	r6, r2
   16b58:	ldr	r1, [r4, #8]
   16b5c:	cmp	r1, r0
   16b60:	bne	16b7c <__assert_fail@plt+0x54ac>
   16b64:	ldrd	r0, [r4, #16]
   16b68:	cmp	r1, r0
   16b6c:	bne	16b7c <__assert_fail@plt+0x54ac>
   16b70:	ldr	r0, [r4, #36]	; 0x24
   16b74:	cmp	r0, #0
   16b78:	beq	16b94 <__assert_fail@plt+0x54c4>
   16b7c:	mov	r0, r4
   16b80:	mov	r2, r6
   16b84:	mov	r3, r5
   16b88:	sub	sp, fp, #16
   16b8c:	pop	{r4, r5, r6, r7, fp, lr}
   16b90:	b	11610 <fseeko64@plt>
   16b94:	ldr	r7, [fp, #8]
   16b98:	mov	r0, r4
   16b9c:	bl	115ec <fileno@plt>
   16ba0:	mov	r2, r6
   16ba4:	mov	r3, r5
   16ba8:	str	r7, [sp]
   16bac:	bl	11490 <lseek64@plt>
   16bb0:	and	r2, r0, r1
   16bb4:	cmn	r2, #1
   16bb8:	beq	16bd8 <__assert_fail@plt+0x5508>
   16bbc:	strd	r0, [r4, #80]	; 0x50
   16bc0:	ldr	r0, [r4]
   16bc4:	bic	r0, r0, #16
   16bc8:	str	r0, [r4]
   16bcc:	mov	r0, #0
   16bd0:	sub	sp, fp, #16
   16bd4:	pop	{r4, r5, r6, r7, fp, pc}
   16bd8:	mvn	r0, #0
   16bdc:	sub	sp, fp, #16
   16be0:	pop	{r4, r5, r6, r7, fp, pc}
   16be4:	push	{r4, sl, fp, lr}
   16be8:	add	fp, sp, #8
   16bec:	sub	sp, sp, #8
   16bf0:	mov	r4, sp
   16bf4:	mov	r0, #1
   16bf8:	mov	r1, r4
   16bfc:	bl	113dc <clock_gettime@plt>
   16c00:	cmp	r0, #0
   16c04:	beq	16c14 <__assert_fail@plt+0x5544>
   16c08:	mov	r4, sp
   16c0c:	mov	r0, r4
   16c10:	bl	16c34 <__assert_fail@plt+0x5564>
   16c14:	ldr	r0, [r4, #4]
   16c18:	ldr	r2, [r4]
   16c1c:	movw	r3, #51712	; 0xca00
   16c20:	movt	r3, #15258	; 0x3b9a
   16c24:	asr	r1, r0, #31
   16c28:	smlal	r0, r1, r2, r3
   16c2c:	sub	sp, fp, #8
   16c30:	pop	{r4, sl, fp, pc}
   16c34:	mov	r1, r0
   16c38:	mov	r0, #0
   16c3c:	b	113dc <clock_gettime@plt>
   16c40:	push	{fp, lr}
   16c44:	mov	fp, sp
   16c48:	mov	r1, r0
   16c4c:	mov	r0, #0
   16c50:	bl	113dc <clock_gettime@plt>
   16c54:	pop	{fp, pc}
   16c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c5c:	add	fp, sp, #28
   16c60:	sub	sp, sp, #4
   16c64:	vpush	{d8-d9}
   16c68:	sub	sp, sp, #104	; 0x68
   16c6c:	mov	r6, r3
   16c70:	mov	r7, r2
   16c74:	str	r1, [sp, #44]	; 0x2c
   16c78:	mov	sl, r0
   16c7c:	bl	11664 <localeconv@plt>
   16c80:	ldr	r5, [r0]
   16c84:	mov	r4, r0
   16c88:	mov	r0, r5
   16c8c:	bl	11574 <strlen@plt>
   16c90:	sub	r1, r0, #1
   16c94:	movw	r2, #58139	; 0xe31b
   16c98:	cmp	r1, #16
   16c9c:	movt	r2, #1
   16ca0:	movcs	r0, #1
   16ca4:	movcc	r2, r5
   16ca8:	ldr	r5, [r4, #4]
   16cac:	str	r0, [sp, #12]
   16cb0:	ldr	r0, [r4, #8]
   16cb4:	str	r2, [sp, #8]
   16cb8:	str	r0, [sp, #16]
   16cbc:	mov	r0, r5
   16cc0:	bl	11574 <strlen@plt>
   16cc4:	cmp	r0, #17
   16cc8:	movw	r0, #647	; 0x287
   16ccc:	movw	r1, #52909	; 0xcead
   16cd0:	str	r7, [sp, #32]
   16cd4:	ldr	r4, [fp, #16]
   16cd8:	str	r6, [sp, #40]	; 0x28
   16cdc:	add	r0, r7, r0
   16ce0:	movt	r1, #1
   16ce4:	movcc	r1, r5
   16ce8:	ldr	r7, [fp, #8]
   16cec:	ldr	r5, [fp, #12]
   16cf0:	str	r0, [sp, #36]	; 0x24
   16cf4:	ands	r0, r6, #32
   16cf8:	str	r1, [sp, #52]	; 0x34
   16cfc:	str	r0, [sp, #24]
   16d00:	mov	r0, #1000	; 0x3e8
   16d04:	movwne	r0, #1024	; 0x400
   16d08:	str	r0, [sp, #20]
   16d0c:	and	r0, r6, #3
   16d10:	ldr	r6, [fp, #20]
   16d14:	str	r0, [sp, #48]	; 0x30
   16d18:	subs	r0, r7, r4
   16d1c:	sbcs	r0, r5, r6
   16d20:	bcs	16e0c <__assert_fail@plt+0x573c>
   16d24:	orrs	r0, r7, r5
   16d28:	beq	16f14 <__assert_fail@plt+0x5844>
   16d2c:	ldr	r9, [fp, #16]
   16d30:	mov	r1, r6
   16d34:	mov	r2, r7
   16d38:	mov	r3, r5
   16d3c:	mov	r0, r9
   16d40:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   16d44:	mov	r4, r0
   16d48:	mov	r8, r1
   16d4c:	umull	r0, r1, r0, r7
   16d50:	mla	r1, r4, r5, r1
   16d54:	mla	r1, r8, r7, r1
   16d58:	subs	r0, r9, r0
   16d5c:	sbc	r1, r6, r1
   16d60:	orrs	r0, r0, r1
   16d64:	bne	16f14 <__assert_fail@plt+0x5844>
   16d68:	ldr	r5, [sp, #44]	; 0x2c
   16d6c:	mov	r0, sl
   16d70:	mov	r2, r4
   16d74:	mov	r3, r8
   16d78:	mov	r1, r5
   16d7c:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   16d80:	mov	r9, r1
   16d84:	umull	r2, r1, r0, r4
   16d88:	str	r0, [sp, #28]
   16d8c:	mov	r3, r8
   16d90:	mla	r1, r0, r8, r1
   16d94:	mla	r1, r9, r4, r1
   16d98:	subs	r0, sl, r2
   16d9c:	mov	r2, #10
   16da0:	sbc	r1, r5, r1
   16da4:	umull	r5, r0, r0, r2
   16da8:	mov	r2, r4
   16dac:	add	r1, r1, r1, lsl #2
   16db0:	add	r6, r0, r1, lsl #1
   16db4:	mov	r0, r5
   16db8:	mov	r1, r6
   16dbc:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   16dc0:	mov	r7, r0
   16dc4:	umull	r0, r2, r0, r4
   16dc8:	mla	r2, r7, r8, r2
   16dcc:	mla	r1, r1, r4, r2
   16dd0:	mov	r2, #2
   16dd4:	subs	r0, r5, r0
   16dd8:	sbc	r1, r6, r1
   16ddc:	subs	r3, r4, r0, lsl #1
   16de0:	lsl	r1, r1, #1
   16de4:	orr	r1, r1, r0, lsr #31
   16de8:	orr	ip, r1, r0, lsl #1
   16dec:	sbcs	r3, r8, r1
   16df0:	movwcc	r2, #3
   16df4:	cmp	ip, #0
   16df8:	movwne	ip, #1
   16dfc:	rsbs	r0, r4, r0, lsl #1
   16e00:	sbcs	r0, r1, r8
   16e04:	movcs	ip, r2
   16e08:	b	16e78 <__assert_fail@plt+0x57a8>
   16e0c:	mov	r0, r7
   16e10:	mov	r1, r5
   16e14:	mov	r2, r4
   16e18:	mov	r3, r6
   16e1c:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   16e20:	mov	r2, r0
   16e24:	mov	r3, r1
   16e28:	umull	r0, r1, r0, r4
   16e2c:	mla	r1, r2, r6, r1
   16e30:	mla	r1, r3, r4, r1
   16e34:	subs	r0, r7, r0
   16e38:	sbc	r1, r5, r1
   16e3c:	orrs	r0, r0, r1
   16e40:	bne	16f14 <__assert_fail@plt+0x5844>
   16e44:	ldr	r4, [sp, #44]	; 0x2c
   16e48:	umull	r0, r1, r2, sl
   16e4c:	mla	r1, r2, r4, r1
   16e50:	str	r0, [sp, #28]
   16e54:	mla	r9, r3, sl, r1
   16e58:	mov	r1, r9
   16e5c:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   16e60:	eor	r1, r1, r4
   16e64:	eor	r0, r0, sl
   16e68:	orrs	r0, r0, r1
   16e6c:	bne	16f14 <__assert_fail@plt+0x5844>
   16e70:	mov	ip, #0
   16e74:	mov	r7, #0
   16e78:	ldr	r0, [sp, #40]	; 0x28
   16e7c:	ldr	r8, [sp, #20]
   16e80:	ldr	r5, [sp, #48]	; 0x30
   16e84:	mvn	r3, #0
   16e88:	ands	r4, r0, #16
   16e8c:	beq	17228 <__assert_fail@plt+0x5b58>
   16e90:	ldr	sl, [sp, #28]
   16e94:	mov	r3, #0
   16e98:	subs	r0, sl, r8
   16e9c:	sbcs	r0, r9, #0
   16ea0:	bcc	177ec <__assert_fail@plt+0x611c>
   16ea4:	mov	r0, sl
   16ea8:	mov	r1, r9
   16eac:	mov	r2, r8
   16eb0:	mov	r3, #0
   16eb4:	mov	r6, r5
   16eb8:	mov	r5, ip
   16ebc:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   16ec0:	mov	r3, sl
   16ec4:	mov	sl, r0
   16ec8:	mov	r2, r5
   16ecc:	mov	r9, r1
   16ed0:	mls	r0, r0, r8, r3
   16ed4:	add	r0, r0, r0, lsl #2
   16ed8:	add	r0, r7, r0, lsl #1
   16edc:	udiv	r7, r0, r8
   16ee0:	mls	r0, r7, r8, r0
   16ee4:	lsl	r0, r0, #1
   16ee8:	orr	r0, r0, r5, lsr #1
   16eec:	cmp	r0, r8
   16ef0:	bcs	17430 <__assert_fail@plt+0x5d60>
   16ef4:	rsb	r1, r2, #0
   16ef8:	subs	ip, r0, r1
   16efc:	movwne	ip, #1
   16f00:	subs	r0, sl, r8
   16f04:	mov	r3, #1
   16f08:	sbcs	r0, r9, #0
   16f0c:	bcs	17450 <__assert_fail@plt+0x5d80>
   16f10:	b	17574 <__assert_fail@plt+0x5ea4>
   16f14:	ldr	r9, [fp, #16]
   16f18:	mov	r1, r6
   16f1c:	mov	r0, r9
   16f20:	bl	1c570 <__assert_fail@plt+0xaea0>
   16f24:	vmov	d8, r0, r1
   16f28:	ldr	r1, [sp, #44]	; 0x2c
   16f2c:	mov	r0, sl
   16f30:	bl	1c570 <__assert_fail@plt+0xaea0>
   16f34:	mov	r4, r0
   16f38:	mov	r6, r1
   16f3c:	mov	r0, r7
   16f40:	mov	r1, r5
   16f44:	bl	1c570 <__assert_fail@plt+0xaea0>
   16f48:	vmov	d16, r0, r1
   16f4c:	vmov	d17, r4, r6
   16f50:	ldr	r5, [sp, #40]	; 0x28
   16f54:	tst	r5, #16
   16f58:	vdiv.f64	d16, d16, d8
   16f5c:	vmul.f64	d8, d16, d17
   16f60:	bne	16fe0 <__assert_fail@plt+0x5910>
   16f64:	ldr	r6, [sp, #48]	; 0x30
   16f68:	cmp	r6, #1
   16f6c:	beq	17270 <__assert_fail@plt+0x5ba0>
   16f70:	vldr	d16, [pc, #752]	; 17268 <__assert_fail@plt+0x5b98>
   16f74:	ldr	r7, [sp, #36]	; 0x24
   16f78:	ldr	sl, [sp, #32]
   16f7c:	vcmpe.f64	d8, d16
   16f80:	vmrs	APSR_nzcv, fpscr
   16f84:	bpl	17278 <__assert_fail@plt+0x5ba8>
   16f88:	vmov	r0, r1, d8
   16f8c:	bl	1c708 <__assert_fail@plt+0xb038>
   16f90:	mov	r4, r0
   16f94:	mov	r8, r1
   16f98:	mov	r0, #0
   16f9c:	cmp	r6, #0
   16fa0:	mov	r2, #0
   16fa4:	bne	16fcc <__assert_fail@plt+0x58fc>
   16fa8:	mov	r0, r4
   16fac:	mov	r1, r8
   16fb0:	bl	1c570 <__assert_fail@plt+0xaea0>
   16fb4:	vmov	d16, r0, r1
   16fb8:	mov	r2, #0
   16fbc:	mov	r0, #0
   16fc0:	vcmp.f64	d8, d16
   16fc4:	vmrs	APSR_nzcv, fpscr
   16fc8:	movwne	r0, #1
   16fcc:	adds	r0, r0, r4
   16fd0:	adc	r1, r2, r8
   16fd4:	bl	1c570 <__assert_fail@plt+0xaea0>
   16fd8:	vmov	d8, r0, r1
   16fdc:	b	17278 <__assert_fail@plt+0x5ba8>
   16fe0:	ldr	r0, [sp, #20]
   16fe4:	mov	r1, #1
   16fe8:	vmov	s0, r0
   16fec:	vcvt.f64.u32	d16, s0
   16ff0:	ldr	r6, [sp, #48]	; 0x30
   16ff4:	vmul.f64	d17, d16, d16
   16ff8:	vcmpe.f64	d17, d8
   16ffc:	vmrs	APSR_nzcv, fpscr
   17000:	bls	17018 <__assert_fail@plt+0x5948>
   17004:	ldr	r7, [sp, #36]	; 0x24
   17008:	ldr	sl, [sp, #32]
   1700c:	ldr	r9, [sp, #12]
   17010:	vmov.f64	d17, d16
   17014:	b	170b4 <__assert_fail@plt+0x59e4>
   17018:	vmul.f64	d18, d17, d16
   1701c:	ldr	r7, [sp, #36]	; 0x24
   17020:	ldr	sl, [sp, #32]
   17024:	ldr	r9, [sp, #12]
   17028:	mov	r1, #2
   1702c:	vcmpe.f64	d18, d8
   17030:	vmrs	APSR_nzcv, fpscr
   17034:	bhi	170b4 <__assert_fail@plt+0x59e4>
   17038:	vmul.f64	d19, d18, d16
   1703c:	vmov.f64	d17, d18
   17040:	mov	r1, #3
   17044:	vcmpe.f64	d19, d8
   17048:	vmrs	APSR_nzcv, fpscr
   1704c:	bhi	170b4 <__assert_fail@plt+0x59e4>
   17050:	vmul.f64	d18, d19, d16
   17054:	vmov.f64	d17, d19
   17058:	mov	r1, #4
   1705c:	vcmpe.f64	d18, d8
   17060:	vmrs	APSR_nzcv, fpscr
   17064:	bhi	170b4 <__assert_fail@plt+0x59e4>
   17068:	vmul.f64	d19, d18, d16
   1706c:	vmov.f64	d17, d18
   17070:	mov	r1, #5
   17074:	vcmpe.f64	d19, d8
   17078:	vmrs	APSR_nzcv, fpscr
   1707c:	bhi	170b4 <__assert_fail@plt+0x59e4>
   17080:	vmul.f64	d18, d19, d16
   17084:	vmov.f64	d17, d19
   17088:	mov	r1, #6
   1708c:	vcmpe.f64	d18, d8
   17090:	vmrs	APSR_nzcv, fpscr
   17094:	bhi	170b4 <__assert_fail@plt+0x59e4>
   17098:	vmul.f64	d16, d18, d16
   1709c:	mov	r1, #7
   170a0:	vmov.f64	d17, d18
   170a4:	vcmpe.f64	d16, d8
   170a8:	vmrs	APSR_nzcv, fpscr
   170ac:	movls	r1, #8
   170b0:	vmovls.f64	d17, d16
   170b4:	vdiv.f64	d8, d8, d17
   170b8:	cmp	r6, #1
   170bc:	str	r1, [sp, #28]
   170c0:	vmov.f64	d16, d8
   170c4:	beq	17134 <__assert_fail@plt+0x5a64>
   170c8:	vldr	d16, [pc, #408]	; 17268 <__assert_fail@plt+0x5b98>
   170cc:	vcmpe.f64	d8, d16
   170d0:	vmov.f64	d16, d8
   170d4:	vmrs	APSR_nzcv, fpscr
   170d8:	bpl	17134 <__assert_fail@plt+0x5a64>
   170dc:	vmov	r0, r1, d8
   170e0:	bl	1c708 <__assert_fail@plt+0xb038>
   170e4:	mov	r4, r0
   170e8:	mov	r8, r1
   170ec:	mov	r0, #0
   170f0:	cmp	r6, #0
   170f4:	mov	r2, #0
   170f8:	bne	17120 <__assert_fail@plt+0x5a50>
   170fc:	mov	r0, r4
   17100:	mov	r1, r8
   17104:	bl	1c570 <__assert_fail@plt+0xaea0>
   17108:	vmov	d16, r0, r1
   1710c:	mov	r2, #0
   17110:	mov	r0, #0
   17114:	vcmp.f64	d8, d16
   17118:	vmrs	APSR_nzcv, fpscr
   1711c:	movwne	r0, #1
   17120:	adds	r0, r0, r4
   17124:	adc	r1, r2, r8
   17128:	bl	1c570 <__assert_fail@plt+0xaea0>
   1712c:	vmov	d16, r0, r1
   17130:	ldr	r6, [sp, #48]	; 0x30
   17134:	movw	r3, #58147	; 0xe323
   17138:	mov	r0, sl
   1713c:	mov	r1, #1
   17140:	mvn	r2, #0
   17144:	vstr	d16, [sp]
   17148:	movt	r3, #1
   1714c:	bl	115a4 <__sprintf_chk@plt>
   17150:	ldr	r1, [sp, #24]
   17154:	mov	r0, #3
   17158:	cmp	r1, #0
   1715c:	movwne	r0, #2
   17160:	add	r4, r0, r9
   17164:	mov	r0, sl
   17168:	bl	11574 <strlen@plt>
   1716c:	cmp	r4, r0
   17170:	bcs	171f0 <__assert_fail@plt+0x5b20>
   17174:	vmov.f64	d9, #36	; 0x41200000  10.0
   17178:	cmp	r6, #1
   1717c:	vmul.f64	d8, d8, d9
   17180:	beq	17218 <__assert_fail@plt+0x5b48>
   17184:	vldr	d16, [pc, #220]	; 17268 <__assert_fail@plt+0x5b98>
   17188:	vcmpe.f64	d8, d16
   1718c:	vmrs	APSR_nzcv, fpscr
   17190:	bpl	17218 <__assert_fail@plt+0x5b48>
   17194:	vmov	r0, r1, d8
   17198:	bl	1c708 <__assert_fail@plt+0xb038>
   1719c:	ldr	r9, [fp, #16]
   171a0:	mov	r4, r0
   171a4:	mov	r8, r1
   171a8:	mov	r0, #0
   171ac:	cmp	r6, #0
   171b0:	mov	r2, #0
   171b4:	bne	171dc <__assert_fail@plt+0x5b0c>
   171b8:	mov	r0, r4
   171bc:	mov	r1, r8
   171c0:	bl	1c570 <__assert_fail@plt+0xaea0>
   171c4:	vmov	d16, r0, r1
   171c8:	mov	r2, #0
   171cc:	mov	r0, #0
   171d0:	vcmp.f64	d8, d16
   171d4:	vmrs	APSR_nzcv, fpscr
   171d8:	movwne	r0, #1
   171dc:	adds	r0, r0, r4
   171e0:	adc	r1, r2, r8
   171e4:	bl	1c570 <__assert_fail@plt+0xaea0>
   171e8:	vmov	d8, r0, r1
   171ec:	b	1721c <__assert_fail@plt+0x5b4c>
   171f0:	mov	r2, r0
   171f4:	add	r4, r9, #1
   171f8:	tst	r5, #8
   171fc:	beq	17210 <__assert_fail@plt+0x5b40>
   17200:	add	r0, r2, sl
   17204:	ldrb	r0, [r0, #-1]
   17208:	cmp	r0, #48	; 0x30
   1720c:	beq	17174 <__assert_fail@plt+0x5aa4>
   17210:	ldr	r9, [fp, #16]
   17214:	b	172ac <__assert_fail@plt+0x5bdc>
   17218:	ldr	r9, [fp, #16]
   1721c:	vdiv.f64	d16, d8, d9
   17220:	vstr	d16, [sp]
   17224:	b	17284 <__assert_fail@plt+0x5bb4>
   17228:	ldr	r6, [sp, #36]	; 0x24
   1722c:	ldr	sl, [sp, #28]
   17230:	cmp	r5, #0
   17234:	beq	177f8 <__assert_fail@plt+0x6128>
   17238:	cmp	r5, #1
   1723c:	bne	17868 <__assert_fail@plt+0x6198>
   17240:	mov	r0, #0
   17244:	rsbs	r1, ip, #0
   17248:	and	r2, sl, #1
   1724c:	sbc	r0, r0, #0
   17250:	eor	r1, r2, r1
   17254:	orrs	r0, r1, r0
   17258:	addne	r7, r7, #1
   1725c:	cmp	r7, #5
   17260:	bgt	17804 <__assert_fail@plt+0x6134>
   17264:	b	17868 <__assert_fail@plt+0x6198>
   17268:	andeq	r0, r0, r0
   1726c:	mvnsmi	r0, #0
   17270:	ldr	r7, [sp, #36]	; 0x24
   17274:	ldr	sl, [sp, #32]
   17278:	mvn	r0, #0
   1727c:	vstr	d8, [sp]
   17280:	str	r0, [sp, #28]
   17284:	movw	r3, #58141	; 0xe31d
   17288:	mov	r0, sl
   1728c:	mov	r1, #1
   17290:	mvn	r2, #0
   17294:	movt	r3, #1
   17298:	bl	115a4 <__sprintf_chk@plt>
   1729c:	mov	r0, sl
   172a0:	bl	11574 <strlen@plt>
   172a4:	mov	r2, r0
   172a8:	mov	r4, #0
   172ac:	sub	r0, r7, r2
   172b0:	mov	r1, sl
   172b4:	mov	r8, r0
   172b8:	bl	113c4 <memmove@plt>
   172bc:	sub	r6, r7, r4
   172c0:	tst	r5, #4
   172c4:	bne	178c0 <__assert_fail@plt+0x61f0>
   172c8:	ldr	r3, [sp, #28]
   172cc:	tst	r5, #128	; 0x80
   172d0:	beq	179d8 <__assert_fail@plt+0x6308>
   172d4:	cmn	r3, #1
   172d8:	bgt	173c4 <__assert_fail@plt+0x5cf4>
   172dc:	subs	r0, r9, #2
   172e0:	ldr	r0, [fp, #20]
   172e4:	mov	r3, #0
   172e8:	sbcs	r0, r0, #0
   172ec:	bcc	173c4 <__assert_fail@plt+0x5cf4>
   172f0:	ldr	r0, [sp, #20]
   172f4:	mov	r3, #1
   172f8:	subs	r0, r0, r9
   172fc:	ldr	r0, [fp, #20]
   17300:	rscs	r0, r0, #0
   17304:	bcs	173c4 <__assert_fail@plt+0x5cf4>
   17308:	ldr	r0, [sp, #20]
   1730c:	mov	r3, #2
   17310:	umull	r1, r0, r0, r0
   17314:	subs	r2, r1, r9
   17318:	ldr	r2, [fp, #20]
   1731c:	sbcs	r2, r0, r2
   17320:	bcs	173c4 <__assert_fail@plt+0x5cf4>
   17324:	ldr	r3, [sp, #20]
   17328:	umull	r1, r2, r1, r3
   1732c:	mla	r2, r0, r3, r2
   17330:	mov	r3, #3
   17334:	subs	r0, r1, r9
   17338:	ldr	r0, [fp, #20]
   1733c:	sbcs	r0, r2, r0
   17340:	bcs	173c4 <__assert_fail@plt+0x5cf4>
   17344:	ldr	r3, [sp, #20]
   17348:	umull	r0, r1, r1, r3
   1734c:	mla	r1, r2, r3, r1
   17350:	mov	r3, #4
   17354:	subs	r2, r0, r9
   17358:	ldr	r2, [fp, #20]
   1735c:	sbcs	r2, r1, r2
   17360:	bcs	173c4 <__assert_fail@plt+0x5cf4>
   17364:	ldr	r3, [sp, #20]
   17368:	umull	r0, r2, r0, r3
   1736c:	mla	r1, r1, r3, r2
   17370:	mov	r3, #5
   17374:	subs	r2, r0, r9
   17378:	ldr	r2, [fp, #20]
   1737c:	sbcs	r2, r1, r2
   17380:	bcs	173c4 <__assert_fail@plt+0x5cf4>
   17384:	ldr	r3, [sp, #20]
   17388:	umull	r0, r2, r0, r3
   1738c:	mla	r1, r1, r3, r2
   17390:	mov	r3, #6
   17394:	subs	r2, r0, r9
   17398:	ldr	r2, [fp, #20]
   1739c:	sbcs	r2, r1, r2
   173a0:	bcs	173c4 <__assert_fail@plt+0x5cf4>
   173a4:	ldr	r3, [sp, #20]
   173a8:	umull	r0, r2, r0, r3
   173ac:	mla	r1, r1, r3, r2
   173b0:	mov	r3, #7
   173b4:	subs	r0, r0, r9
   173b8:	ldr	r0, [fp, #20]
   173bc:	sbcs	r0, r1, r0
   173c0:	movwcc	r3, #8
   173c4:	and	r0, r5, #256	; 0x100
   173c8:	tst	r5, #64	; 0x40
   173cc:	orrsne	r1, r3, r0
   173d0:	movne	r1, #32
   173d4:	addne	r7, sl, #648	; 0x288
   173d8:	strbne	r1, [sl, #647]	; 0x287
   173dc:	cmp	r3, #0
   173e0:	beq	17408 <__assert_fail@plt+0x5d38>
   173e4:	ldr	r1, [sp, #24]
   173e8:	cmp	r1, #0
   173ec:	moveq	r1, #107	; 0x6b
   173f0:	cmpeq	r3, #1
   173f4:	beq	17404 <__assert_fail@plt+0x5d34>
   173f8:	movw	r1, #58212	; 0xe364
   173fc:	movt	r1, #1
   17400:	ldrb	r1, [r1, r3]
   17404:	strb	r1, [r7], #1
   17408:	cmp	r0, #0
   1740c:	beq	179d8 <__assert_fail@plt+0x6308>
   17410:	ldr	r0, [sp, #24]
   17414:	cmp	r0, #0
   17418:	cmpne	r3, #0
   1741c:	movne	r0, #105	; 0x69
   17420:	strbne	r0, [r7], #1
   17424:	mov	r0, #66	; 0x42
   17428:	strb	r0, [r7], #1
   1742c:	b	179d8 <__assert_fail@plt+0x6308>
   17430:	add	r0, r0, r2
   17434:	mov	ip, #2
   17438:	cmp	r8, r0
   1743c:	movwcc	ip, #3
   17440:	subs	r0, sl, r8
   17444:	mov	r3, #1
   17448:	sbcs	r0, r9, #0
   1744c:	bcc	17574 <__assert_fail@plt+0x5ea4>
   17450:	mov	r0, sl
   17454:	mov	r1, r9
   17458:	mov	r2, r8
   1745c:	mov	r3, #0
   17460:	str	r4, [sp, #44]	; 0x2c
   17464:	mov	r4, ip
   17468:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1746c:	mov	r2, r4
   17470:	mov	r4, r0
   17474:	mls	r0, r0, r8, sl
   17478:	mov	r9, r1
   1747c:	add	r0, r0, r0, lsl #2
   17480:	add	r0, r7, r0, lsl #1
   17484:	udiv	r7, r0, r8
   17488:	mls	r0, r7, r8, r0
   1748c:	lsl	r0, r0, #1
   17490:	orr	r0, r0, r2, lsr #1
   17494:	cmp	r0, r8
   17498:	bcs	174bc <__assert_fail@plt+0x5dec>
   1749c:	rsb	r1, r2, #0
   174a0:	subs	ip, r0, r1
   174a4:	movwne	ip, #1
   174a8:	subs	r0, r4, r8
   174ac:	mov	r3, #2
   174b0:	sbcs	r0, r9, #0
   174b4:	bcs	174f8 <__assert_fail@plt+0x5e28>
   174b8:	b	174dc <__assert_fail@plt+0x5e0c>
   174bc:	add	r0, r0, r2
   174c0:	mov	ip, #2
   174c4:	cmp	r8, r0
   174c8:	movwcc	ip, #3
   174cc:	subs	r0, r4, r8
   174d0:	mov	r3, #2
   174d4:	sbcs	r0, r9, #0
   174d8:	bcs	174f8 <__assert_fail@plt+0x5e28>
   174dc:	mov	sl, r4
   174e0:	ldr	r4, [sp, #44]	; 0x2c
   174e4:	mov	r5, r6
   174e8:	rsbs	r0, sl, #9
   174ec:	rscs	r0, r9, #0
   174f0:	bcc	177ec <__assert_fail@plt+0x611c>
   174f4:	b	17584 <__assert_fail@plt+0x5eb4>
   174f8:	mov	r0, r4
   174fc:	mov	r1, r9
   17500:	mov	r2, r8
   17504:	mov	r3, #0
   17508:	mov	r5, ip
   1750c:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   17510:	mov	sl, r0
   17514:	mls	r0, r0, r8, r4
   17518:	mov	r2, r5
   1751c:	mov	r9, r1
   17520:	add	r0, r0, r0, lsl #2
   17524:	add	r0, r7, r0, lsl #1
   17528:	udiv	r7, r0, r8
   1752c:	mls	r0, r7, r8, r0
   17530:	lsl	r0, r0, #1
   17534:	orr	r0, r0, r5, lsr #1
   17538:	cmp	r0, r8
   1753c:	bcs	17550 <__assert_fail@plt+0x5e80>
   17540:	rsb	r1, r2, #0
   17544:	subs	ip, r0, r1
   17548:	movwne	ip, #1
   1754c:	b	17560 <__assert_fail@plt+0x5e90>
   17550:	add	r0, r0, r2
   17554:	mov	ip, #2
   17558:	cmp	r8, r0
   1755c:	movwcc	ip, #3
   17560:	ldr	r4, [sp, #44]	; 0x2c
   17564:	subs	r0, sl, r8
   17568:	mov	r3, #3
   1756c:	sbcs	r0, r9, #0
   17570:	bcs	17650 <__assert_fail@plt+0x5f80>
   17574:	mov	r5, r6
   17578:	rsbs	r0, sl, #9
   1757c:	rscs	r0, r9, #0
   17580:	bcc	177ec <__assert_fail@plt+0x611c>
   17584:	cmp	r5, #1
   17588:	bne	175a0 <__assert_fail@plt+0x5ed0>
   1758c:	and	r0, r7, #1
   17590:	add	r0, ip, r0
   17594:	cmp	r0, #2
   17598:	bhi	175b0 <__assert_fail@plt+0x5ee0>
   1759c:	b	175e4 <__assert_fail@plt+0x5f14>
   175a0:	cmp	r5, #0
   175a4:	bne	175e4 <__assert_fail@plt+0x5f14>
   175a8:	cmp	ip, #0
   175ac:	beq	175e4 <__assert_fail@plt+0x5f14>
   175b0:	adds	r0, sl, #1
   175b4:	add	r7, r7, #1
   175b8:	mov	ip, #0
   175bc:	adc	r1, r9, #0
   175c0:	cmp	r7, #10
   175c4:	bne	175e4 <__assert_fail@plt+0x5f14>
   175c8:	rsbs	r2, r0, #9
   175cc:	mov	r7, #0
   175d0:	mov	sl, r0
   175d4:	mov	r9, r1
   175d8:	mov	ip, #0
   175dc:	rscs	r2, r1, #0
   175e0:	bcc	176b8 <__assert_fail@plt+0x5fe8>
   175e4:	ldr	r0, [sp, #40]	; 0x28
   175e8:	tst	r0, #8
   175ec:	beq	1760c <__assert_fail@plt+0x5f3c>
   175f0:	cmp	r7, #0
   175f4:	bne	1760c <__assert_fail@plt+0x5f3c>
   175f8:	ldr	r6, [sp, #36]	; 0x24
   175fc:	mov	r7, #0
   17600:	cmp	r5, #0
   17604:	bne	17238 <__assert_fail@plt+0x5b68>
   17608:	b	177f8 <__assert_fail@plt+0x6128>
   1760c:	ldr	r1, [sp, #32]
   17610:	ldr	r2, [sp, #12]
   17614:	add	r0, r7, #48	; 0x30
   17618:	mov	r7, r4
   1761c:	mov	r4, r3
   17620:	strb	r0, [r1, #646]!	; 0x286
   17624:	sub	r0, r1, r2
   17628:	ldr	r1, [sp, #8]
   1762c:	mov	r6, r0
   17630:	bl	113f4 <memcpy@plt>
   17634:	mov	r3, r4
   17638:	mov	r4, r7
   1763c:	mov	ip, #0
   17640:	mov	r7, #0
   17644:	cmp	r5, #0
   17648:	bne	17238 <__assert_fail@plt+0x5b68>
   1764c:	b	177f8 <__assert_fail@plt+0x6128>
   17650:	mov	r0, sl
   17654:	mov	r1, r9
   17658:	mov	r2, r8
   1765c:	mov	r3, #0
   17660:	mov	r4, ip
   17664:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   17668:	mov	r2, r4
   1766c:	mov	r4, r0
   17670:	mls	r0, r0, r8, sl
   17674:	mov	r9, r1
   17678:	add	r0, r0, r0, lsl #2
   1767c:	add	r0, r7, r0, lsl #1
   17680:	udiv	r7, r0, r8
   17684:	mls	r0, r7, r8, r0
   17688:	lsl	r0, r0, #1
   1768c:	orr	r0, r0, r2, lsr #1
   17690:	cmp	r0, r8
   17694:	bcs	176d4 <__assert_fail@plt+0x6004>
   17698:	rsb	r1, r2, #0
   1769c:	subs	ip, r0, r1
   176a0:	movwne	ip, #1
   176a4:	subs	r0, r4, r8
   176a8:	mov	r3, #4
   176ac:	sbcs	r0, r9, #0
   176b0:	bcc	174dc <__assert_fail@plt+0x5e0c>
   176b4:	b	176f4 <__assert_fail@plt+0x6024>
   176b8:	ldr	r6, [sp, #36]	; 0x24
   176bc:	mov	ip, #0
   176c0:	mov	sl, #10
   176c4:	mov	r9, #0
   176c8:	cmp	r5, #0
   176cc:	bne	17238 <__assert_fail@plt+0x5b68>
   176d0:	b	177f8 <__assert_fail@plt+0x6128>
   176d4:	add	r0, r0, r2
   176d8:	mov	ip, #2
   176dc:	cmp	r8, r0
   176e0:	movwcc	ip, #3
   176e4:	subs	r0, r4, r8
   176e8:	mov	r3, #4
   176ec:	sbcs	r0, r9, #0
   176f0:	bcc	174dc <__assert_fail@plt+0x5e0c>
   176f4:	mov	r0, r4
   176f8:	mov	r1, r9
   176fc:	mov	r2, r8
   17700:	mov	r3, #0
   17704:	mov	r5, ip
   17708:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1770c:	mov	sl, r0
   17710:	mls	r0, r0, r8, r4
   17714:	mov	r2, r5
   17718:	mov	r9, r1
   1771c:	add	r0, r0, r0, lsl #2
   17720:	add	r0, r7, r0, lsl #1
   17724:	udiv	r7, r0, r8
   17728:	mls	r0, r7, r8, r0
   1772c:	lsl	r0, r0, #1
   17730:	orr	r0, r0, r5, lsr #1
   17734:	cmp	r0, r8
   17738:	bcs	1774c <__assert_fail@plt+0x607c>
   1773c:	rsb	r1, r2, #0
   17740:	subs	ip, r0, r1
   17744:	movwne	ip, #1
   17748:	b	1775c <__assert_fail@plt+0x608c>
   1774c:	add	r0, r0, r2
   17750:	mov	ip, #2
   17754:	cmp	r8, r0
   17758:	movwcc	ip, #3
   1775c:	ldr	r4, [sp, #44]	; 0x2c
   17760:	subs	r0, sl, r8
   17764:	mov	r3, #5
   17768:	sbcs	r0, r9, #0
   1776c:	bcc	17574 <__assert_fail@plt+0x5ea4>
   17770:	mov	r0, sl
   17774:	mov	r1, r9
   17778:	mov	r2, r8
   1777c:	mov	r3, #0
   17780:	mov	r4, ip
   17784:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   17788:	mov	r2, r4
   1778c:	mov	r4, r0
   17790:	mls	r0, r0, r8, sl
   17794:	mov	r9, r1
   17798:	add	r0, r0, r0, lsl #2
   1779c:	add	r0, r7, r0, lsl #1
   177a0:	udiv	r7, r0, r8
   177a4:	mls	r0, r7, r8, r0
   177a8:	lsl	r0, r0, #1
   177ac:	orr	r0, r0, r2, lsr #1
   177b0:	cmp	r0, r8
   177b4:	bcs	179f4 <__assert_fail@plt+0x6324>
   177b8:	rsb	r1, r2, #0
   177bc:	subs	ip, r0, r1
   177c0:	movwne	ip, #1
   177c4:	subs	r0, r4, r8
   177c8:	mov	r3, #6
   177cc:	sbcs	r0, r9, #0
   177d0:	bcs	17a14 <__assert_fail@plt+0x6344>
   177d4:	mov	sl, r4
   177d8:	ldr	r4, [sp, #44]	; 0x2c
   177dc:	mov	r5, r6
   177e0:	rsbs	r0, sl, #9
   177e4:	rscs	r0, r9, #0
   177e8:	bcs	17584 <__assert_fail@plt+0x5eb4>
   177ec:	ldr	r6, [sp, #36]	; 0x24
   177f0:	cmp	r5, #0
   177f4:	bne	17238 <__assert_fail@plt+0x5b68>
   177f8:	add	r0, r7, ip
   177fc:	cmp	r0, #1
   17800:	blt	17868 <__assert_fail@plt+0x6198>
   17804:	adds	sl, sl, #1
   17808:	adc	r9, r9, #0
   1780c:	cmp	r3, #7
   17810:	bgt	17868 <__assert_fail@plt+0x6198>
   17814:	cmp	r4, #0
   17818:	beq	17868 <__assert_fail@plt+0x6198>
   1781c:	ldr	r7, [sp, #36]	; 0x24
   17820:	eor	r0, sl, r8
   17824:	orrs	r0, r0, r9
   17828:	bne	1786c <__assert_fail@plt+0x619c>
   1782c:	ldr	r0, [sp, #40]	; 0x28
   17830:	add	r3, r3, #1
   17834:	mov	r9, #0
   17838:	mov	sl, #1
   1783c:	str	r3, [sp, #28]
   17840:	tst	r0, #8
   17844:	bne	17870 <__assert_fail@plt+0x61a0>
   17848:	ldr	r2, [sp, #12]
   1784c:	mov	r0, #48	; 0x30
   17850:	ldr	r1, [sp, #8]
   17854:	strb	r0, [r6, #-1]!
   17858:	sub	r6, r6, r2
   1785c:	mov	r0, r6
   17860:	bl	113f4 <memcpy@plt>
   17864:	b	17870 <__assert_fail@plt+0x61a0>
   17868:	ldr	r7, [sp, #36]	; 0x24
   1786c:	str	r3, [sp, #28]
   17870:	mov	r8, r6
   17874:	mov	r0, sl
   17878:	mov	r1, r9
   1787c:	mov	r2, #10
   17880:	mov	r3, #0
   17884:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   17888:	add	r2, r0, r0, lsl #2
   1788c:	sub	r2, sl, r2, lsl #1
   17890:	orr	r2, r2, #48	; 0x30
   17894:	strb	r2, [r8, #-1]!
   17898:	rsbs	r2, sl, #9
   1789c:	mov	sl, r0
   178a0:	rscs	r2, r9, #0
   178a4:	mov	r9, r1
   178a8:	bcc	17874 <__assert_fail@plt+0x61a4>
   178ac:	ldr	sl, [sp, #32]
   178b0:	ldr	r5, [sp, #40]	; 0x28
   178b4:	ldr	r9, [fp, #16]
   178b8:	tst	r5, #4
   178bc:	beq	172c8 <__assert_fail@plt+0x5bf8>
   178c0:	ldr	r9, [sp, #52]	; 0x34
   178c4:	mov	r5, r8
   178c8:	sub	r4, r6, r8
   178cc:	mov	r0, r9
   178d0:	bl	11574 <strlen@plt>
   178d4:	add	r8, sp, #56	; 0x38
   178d8:	str	r0, [sp, #48]	; 0x30
   178dc:	mov	r1, r5
   178e0:	mov	r2, r4
   178e4:	mov	r0, r8
   178e8:	bl	113f4 <memcpy@plt>
   178ec:	ldr	r5, [sp, #16]
   178f0:	ldrb	r7, [r5]
   178f4:	cmp	r7, #255	; 0xff
   178f8:	mov	sl, r7
   178fc:	moveq	sl, r4
   17900:	cmp	r7, #0
   17904:	mvneq	sl, #0
   17908:	cmp	sl, r4
   1790c:	movhi	sl, r4
   17910:	sub	r0, r6, sl
   17914:	sub	r6, r4, sl
   17918:	mov	r2, sl
   1791c:	add	r1, r8, r6
   17920:	mov	r8, r0
   17924:	bl	113f4 <memcpy@plt>
   17928:	cmp	r6, #0
   1792c:	beq	179bc <__assert_fail@plt+0x62ec>
   17930:	clz	r0, r7
   17934:	lsr	r9, r0, #5
   17938:	ldr	r0, [sp, #48]	; 0x30
   1793c:	rsb	r0, r0, #0
   17940:	str	r0, [sp, #44]	; 0x2c
   17944:	ldr	r0, [sp, #44]	; 0x2c
   17948:	ldr	r1, [sp, #52]	; 0x34
   1794c:	ldr	r2, [sp, #48]	; 0x30
   17950:	add	r4, r8, r0
   17954:	mov	r0, r4
   17958:	bl	113f4 <memcpy@plt>
   1795c:	tst	r9, #1
   17960:	add	r0, sp, #56	; 0x38
   17964:	addeq	r5, r5, #1
   17968:	mov	r9, r5
   1796c:	ldrb	r5, [r5]
   17970:	cmp	r5, #255	; 0xff
   17974:	mov	r7, r5
   17978:	moveq	r7, r6
   1797c:	cmp	r5, #0
   17980:	moveq	r7, sl
   17984:	cmp	r6, r7
   17988:	movcc	r7, r6
   1798c:	sub	r6, r6, r7
   17990:	sub	r8, r4, r7
   17994:	mov	r2, r7
   17998:	add	r1, r0, r6
   1799c:	mov	r0, r8
   179a0:	bl	113f4 <memcpy@plt>
   179a4:	clz	r0, r5
   179a8:	mov	r5, r9
   179ac:	cmp	r6, #0
   179b0:	mov	sl, r7
   179b4:	lsr	r9, r0, #5
   179b8:	bne	17944 <__assert_fail@plt+0x6274>
   179bc:	ldr	r7, [sp, #36]	; 0x24
   179c0:	ldr	sl, [sp, #32]
   179c4:	ldr	r5, [sp, #40]	; 0x28
   179c8:	ldr	r9, [fp, #16]
   179cc:	ldr	r3, [sp, #28]
   179d0:	tst	r5, #128	; 0x80
   179d4:	bne	172d4 <__assert_fail@plt+0x5c04>
   179d8:	mov	r0, #0
   179dc:	strb	r0, [r7]
   179e0:	mov	r0, r8
   179e4:	sub	sp, fp, #48	; 0x30
   179e8:	vpop	{d8-d9}
   179ec:	add	sp, sp, #4
   179f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179f4:	add	r0, r0, r2
   179f8:	mov	ip, #2
   179fc:	cmp	r8, r0
   17a00:	movwcc	ip, #3
   17a04:	subs	r0, r4, r8
   17a08:	mov	r3, #6
   17a0c:	sbcs	r0, r9, #0
   17a10:	bcc	177d4 <__assert_fail@plt+0x6104>
   17a14:	mov	r0, r4
   17a18:	mov	r1, r9
   17a1c:	mov	r2, r8
   17a20:	mov	r3, #0
   17a24:	mov	r5, ip
   17a28:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   17a2c:	mov	r6, r8
   17a30:	mov	r8, r0
   17a34:	mov	r2, r5
   17a38:	mov	r9, r1
   17a3c:	mls	r0, r0, r6, r4
   17a40:	add	r0, r0, r0, lsl #2
   17a44:	add	r0, r7, r0, lsl #1
   17a48:	udiv	r4, r0, r6
   17a4c:	mls	r0, r4, r6, r0
   17a50:	lsl	r0, r0, #1
   17a54:	orr	r0, r0, r2, lsr #1
   17a58:	cmp	r0, r6
   17a5c:	bcs	17aa0 <__assert_fail@plt+0x63d0>
   17a60:	rsb	r1, r2, #0
   17a64:	subs	ip, r0, r1
   17a68:	movwne	ip, #1
   17a6c:	subs	r0, r8, r6
   17a70:	mov	r3, #7
   17a74:	sbcs	r0, r9, #0
   17a78:	bcs	17ac0 <__assert_fail@plt+0x63f0>
   17a7c:	mov	r7, r4
   17a80:	ldr	r5, [sp, #48]	; 0x30
   17a84:	ldr	r4, [sp, #44]	; 0x2c
   17a88:	mov	sl, r8
   17a8c:	mov	r8, r6
   17a90:	rsbs	r0, sl, #9
   17a94:	rscs	r0, r9, #0
   17a98:	bcc	177ec <__assert_fail@plt+0x611c>
   17a9c:	b	17584 <__assert_fail@plt+0x5eb4>
   17aa0:	add	r0, r0, r2
   17aa4:	mov	ip, #2
   17aa8:	cmp	r6, r0
   17aac:	movwcc	ip, #3
   17ab0:	subs	r0, r8, r6
   17ab4:	mov	r3, #7
   17ab8:	sbcs	r0, r9, #0
   17abc:	bcc	17a7c <__assert_fail@plt+0x63ac>
   17ac0:	mov	r0, r8
   17ac4:	mov	r1, r9
   17ac8:	mov	r2, r6
   17acc:	mov	r3, #0
   17ad0:	mov	r5, ip
   17ad4:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   17ad8:	mov	sl, r0
   17adc:	mls	r0, r0, r6, r8
   17ae0:	mov	r2, r5
   17ae4:	mov	r9, r1
   17ae8:	mov	r8, r6
   17aec:	add	r0, r0, r0, lsl #2
   17af0:	add	r0, r4, r0, lsl #1
   17af4:	udiv	r7, r0, r6
   17af8:	mls	r0, r7, r6, r0
   17afc:	lsl	r0, r0, #1
   17b00:	orr	r0, r0, r5, lsr #1
   17b04:	cmp	r0, r6
   17b08:	bcs	17b1c <__assert_fail@plt+0x644c>
   17b0c:	rsb	r1, r2, #0
   17b10:	subs	ip, r0, r1
   17b14:	movwne	ip, #1
   17b18:	b	17b2c <__assert_fail@plt+0x645c>
   17b1c:	add	r0, r0, r2
   17b20:	mov	ip, #2
   17b24:	cmp	r8, r0
   17b28:	movwcc	ip, #3
   17b2c:	ldr	r5, [sp, #48]	; 0x30
   17b30:	ldr	r4, [sp, #44]	; 0x2c
   17b34:	mov	r3, #8
   17b38:	rsbs	r0, sl, #9
   17b3c:	rscs	r0, r9, #0
   17b40:	bcc	177ec <__assert_fail@plt+0x611c>
   17b44:	b	17584 <__assert_fail@plt+0x5eb4>
   17b48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b4c:	add	fp, sp, #24
   17b50:	sub	sp, sp, #8
   17b54:	mov	r4, r2
   17b58:	mov	r8, r1
   17b5c:	cmp	r0, #0
   17b60:	bne	17b8c <__assert_fail@plt+0x64bc>
   17b64:	movw	r0, #58153	; 0xe329
   17b68:	movt	r0, #1
   17b6c:	bl	114d8 <getenv@plt>
   17b70:	cmp	r0, #0
   17b74:	bne	17b8c <__assert_fail@plt+0x64bc>
   17b78:	movw	r0, #58164	; 0xe334
   17b7c:	movt	r0, #1
   17b80:	bl	114d8 <getenv@plt>
   17b84:	cmp	r0, #0
   17b88:	beq	17cb8 <__assert_fail@plt+0x65e8>
   17b8c:	mov	r6, r0
   17b90:	movw	r7, #58236	; 0xe37c
   17b94:	movw	r1, #58224	; 0xe370
   17b98:	mov	r3, #4
   17b9c:	ldrb	r5, [r6], #1
   17ba0:	movt	r7, #1
   17ba4:	movt	r1, #1
   17ba8:	mov	r2, r7
   17bac:	cmp	r5, #39	; 0x27
   17bb0:	movne	r6, r0
   17bb4:	mov	r0, r6
   17bb8:	bl	1bae0 <__assert_fail@plt+0xa410>
   17bbc:	sub	r1, r5, #39	; 0x27
   17bc0:	cmp	r0, #0
   17bc4:	clz	r1, r1
   17bc8:	lsr	r1, r1, #5
   17bcc:	lsl	r5, r1, #2
   17bd0:	bmi	17c08 <__assert_fail@plt+0x6538>
   17bd4:	ldr	r0, [r7, r0, lsl #2]
   17bd8:	mov	r2, #1
   17bdc:	mov	r1, #0
   17be0:	str	r2, [r4]
   17be4:	str	r1, [r4, #4]
   17be8:	orr	r1, r0, r5
   17bec:	mov	r0, #0
   17bf0:	str	r1, [r8]
   17bf4:	ldrd	r2, [r4]
   17bf8:	orrs	r1, r2, r3
   17bfc:	beq	17c44 <__assert_fail@plt+0x6574>
   17c00:	sub	sp, fp, #24
   17c04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c08:	movw	r0, #58174	; 0xe33e
   17c0c:	add	r1, sp, #4
   17c10:	mov	r2, #0
   17c14:	mov	r3, r4
   17c18:	mov	r7, #0
   17c1c:	movt	r0, #1
   17c20:	str	r0, [sp]
   17c24:	mov	r0, r6
   17c28:	bl	1abe0 <__assert_fail@plt+0x9510>
   17c2c:	cmp	r0, #0
   17c30:	beq	17c74 <__assert_fail@plt+0x65a4>
   17c34:	str	r7, [r8]
   17c38:	ldrd	r2, [r4]
   17c3c:	orrs	r1, r2, r3
   17c40:	bne	17c00 <__assert_fail@plt+0x6530>
   17c44:	movw	r0, #55360	; 0xd840
   17c48:	movt	r0, #1
   17c4c:	bl	114d8 <getenv@plt>
   17c50:	cmp	r0, #0
   17c54:	mov	r2, #512	; 0x200
   17c58:	mov	r0, #4
   17c5c:	mov	r1, #0
   17c60:	movweq	r2, #1024	; 0x400
   17c64:	str	r2, [r4]
   17c68:	str	r1, [r4, #4]
   17c6c:	sub	sp, fp, #24
   17c70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c74:	ldrb	r0, [r6]
   17c78:	sub	r0, r0, #48	; 0x30
   17c7c:	uxtb	r0, r0
   17c80:	cmp	r0, #10
   17c84:	bcc	17cb0 <__assert_fail@plt+0x65e0>
   17c88:	ldr	r0, [sp, #4]
   17c8c:	cmp	r0, r6
   17c90:	beq	17ce0 <__assert_fail@plt+0x6610>
   17c94:	ldrb	r2, [r6, #1]
   17c98:	add	r1, r6, #1
   17c9c:	mov	r6, r1
   17ca0:	sub	r2, r2, #48	; 0x30
   17ca4:	uxtb	r2, r2
   17ca8:	cmp	r2, #10
   17cac:	bcs	17c8c <__assert_fail@plt+0x65bc>
   17cb0:	mov	r1, r5
   17cb4:	b	17bec <__assert_fail@plt+0x651c>
   17cb8:	movw	r0, #55360	; 0xd840
   17cbc:	movt	r0, #1
   17cc0:	bl	114d8 <getenv@plt>
   17cc4:	cmp	r0, #0
   17cc8:	mov	r2, #512	; 0x200
   17ccc:	mov	r1, #0
   17cd0:	movweq	r2, #1024	; 0x400
   17cd4:	str	r2, [r4]
   17cd8:	str	r1, [r4, #4]
   17cdc:	b	17bec <__assert_fail@plt+0x651c>
   17ce0:	ldrb	r2, [r0, #-1]
   17ce4:	orr	r1, r5, #384	; 0x180
   17ce8:	cmp	r2, #66	; 0x42
   17cec:	mov	r2, r1
   17cf0:	orrne	r2, r5, #128	; 0x80
   17cf4:	bne	17d08 <__assert_fail@plt+0x6638>
   17cf8:	ldrb	r0, [r0, #-2]
   17cfc:	cmp	r0, #105	; 0x69
   17d00:	orreq	r1, r2, #32
   17d04:	b	17bec <__assert_fail@plt+0x651c>
   17d08:	orr	r1, r2, #32
   17d0c:	b	17bec <__assert_fail@plt+0x651c>
   17d10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17d14:	add	fp, sp, #24
   17d18:	sub	sp, sp, #8
   17d1c:	movw	r6, #61912	; 0xf1d8
   17d20:	mov	r4, #0
   17d24:	cmp	r0, #2
   17d28:	movt	r6, #2
   17d2c:	ldr	r7, [r6]
   17d30:	str	r4, [r6]
   17d34:	bne	17da8 <__assert_fail@plt+0x66d8>
   17d38:	mov	r8, r3
   17d3c:	movw	r3, #58252	; 0xe38c
   17d40:	mov	r5, r2
   17d44:	movw	r2, #58244	; 0xe384
   17d48:	mov	r0, #2
   17d4c:	str	r4, [sp]
   17d50:	movt	r2, #1
   17d54:	movt	r3, #1
   17d58:	bl	11544 <getopt_long@plt>
   17d5c:	cmp	r0, #104	; 0x68
   17d60:	beq	17d9c <__assert_fail@plt+0x66cc>
   17d64:	cmp	r0, #118	; 0x76
   17d68:	bne	17da8 <__assert_fail@plt+0x66d8>
   17d6c:	movw	r0, #61908	; 0xf1d4
   17d70:	ldr	r3, [fp, #8]
   17d74:	add	r1, fp, #16
   17d78:	mov	r2, r8
   17d7c:	movt	r0, #2
   17d80:	str	r1, [sp, #4]
   17d84:	str	r1, [sp]
   17d88:	mov	r1, r5
   17d8c:	ldr	r0, [r0]
   17d90:	bl	1a318 <__assert_fail@plt+0x8c48>
   17d94:	mov	r0, #0
   17d98:	bl	1155c <exit@plt>
   17d9c:	ldr	r1, [fp, #12]
   17da0:	mov	r0, #0
   17da4:	blx	r1
   17da8:	movw	r0, #61896	; 0xf1c8
   17dac:	str	r7, [r6]
   17db0:	movt	r0, #2
   17db4:	str	r4, [r0]
   17db8:	sub	sp, fp, #24
   17dbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17dc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17dc4:	add	fp, sp, #24
   17dc8:	sub	sp, sp, #8
   17dcc:	mov	r8, r3
   17dd0:	ldr	r3, [fp, #12]
   17dd4:	movw	r7, #61912	; 0xf1d8
   17dd8:	movw	r5, #52909	; 0xcead
   17ddc:	mov	r9, r2
   17de0:	mov	r2, #1
   17de4:	mov	r6, #0
   17de8:	movt	r7, #2
   17dec:	movt	r5, #1
   17df0:	str	r6, [sp]
   17df4:	ldr	r4, [r7]
   17df8:	str	r2, [r7]
   17dfc:	movw	r2, #58244	; 0xe384
   17e00:	cmp	r3, #0
   17e04:	movw	r3, #58252	; 0xe38c
   17e08:	movt	r2, #1
   17e0c:	movt	r3, #1
   17e10:	movne	r2, r5
   17e14:	bl	11544 <getopt_long@plt>
   17e18:	cmn	r0, #1
   17e1c:	beq	17e48 <__assert_fail@plt+0x6778>
   17e20:	cmp	r0, #104	; 0x68
   17e24:	beq	17e3c <__assert_fail@plt+0x676c>
   17e28:	cmp	r0, #118	; 0x76
   17e2c:	beq	17e54 <__assert_fail@plt+0x6784>
   17e30:	movw	r0, #61804	; 0xf16c
   17e34:	movt	r0, #2
   17e38:	ldr	r6, [r0]
   17e3c:	ldr	r1, [fp, #16]
   17e40:	mov	r0, r6
   17e44:	blx	r1
   17e48:	str	r4, [r7]
   17e4c:	sub	sp, fp, #24
   17e50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17e54:	movw	r0, #61908	; 0xf1d4
   17e58:	ldr	r3, [fp, #8]
   17e5c:	add	r1, fp, #20
   17e60:	mov	r2, r8
   17e64:	movt	r0, #2
   17e68:	str	r1, [sp, #4]
   17e6c:	str	r1, [sp]
   17e70:	mov	r1, r9
   17e74:	ldr	r0, [r0]
   17e78:	bl	1a318 <__assert_fail@plt+0x8c48>
   17e7c:	mov	r0, #0
   17e80:	bl	1155c <exit@plt>
   17e84:	push	{r4, r5, fp, lr}
   17e88:	add	fp, sp, #8
   17e8c:	cmp	r0, #0
   17e90:	beq	17f24 <__assert_fail@plt+0x6854>
   17e94:	mov	r1, #47	; 0x2f
   17e98:	mov	r4, r0
   17e9c:	bl	1164c <strrchr@plt>
   17ea0:	cmp	r0, #0
   17ea4:	mov	r5, r4
   17ea8:	addne	r5, r0, #1
   17eac:	sub	r0, r5, r4
   17eb0:	cmp	r0, #7
   17eb4:	blt	17f08 <__assert_fail@plt+0x6838>
   17eb8:	movw	r1, #58356	; 0xe3f4
   17ebc:	sub	r0, r5, #7
   17ec0:	mov	r2, #7
   17ec4:	movt	r1, #1
   17ec8:	bl	11688 <strncmp@plt>
   17ecc:	cmp	r0, #0
   17ed0:	bne	17f08 <__assert_fail@plt+0x6838>
   17ed4:	movw	r1, #58364	; 0xe3fc
   17ed8:	mov	r0, r5
   17edc:	mov	r2, #3
   17ee0:	movt	r1, #1
   17ee4:	bl	11688 <strncmp@plt>
   17ee8:	cmp	r0, #0
   17eec:	beq	17ef8 <__assert_fail@plt+0x6828>
   17ef0:	mov	r4, r5
   17ef4:	b	17f08 <__assert_fail@plt+0x6838>
   17ef8:	movw	r0, #61888	; 0xf1c0
   17efc:	add	r4, r5, #3
   17f00:	movt	r0, #2
   17f04:	str	r4, [r0]
   17f08:	movw	r0, #61892	; 0xf1c4
   17f0c:	movt	r0, #2
   17f10:	str	r4, [r0]
   17f14:	movw	r0, #62532	; 0xf444
   17f18:	movt	r0, #2
   17f1c:	str	r4, [r0]
   17f20:	pop	{r4, r5, fp, pc}
   17f24:	movw	r0, #61904	; 0xf1d0
   17f28:	mov	r1, #55	; 0x37
   17f2c:	mov	r2, #1
   17f30:	movt	r0, #2
   17f34:	ldr	r3, [r0]
   17f38:	movw	r0, #58300	; 0xe3bc
   17f3c:	movt	r0, #1
   17f40:	bl	11484 <fwrite@plt>
   17f44:	bl	116a0 <abort@plt>
   17f48:	push	{r4, r5, r6, sl, fp, lr}
   17f4c:	add	fp, sp, #16
   17f50:	mov	r4, r0
   17f54:	movw	r0, #62536	; 0xf448
   17f58:	movt	r0, #2
   17f5c:	cmp	r4, #0
   17f60:	moveq	r4, r0
   17f64:	bl	11598 <__errno_location@plt>
   17f68:	ldr	r6, [r0]
   17f6c:	mov	r5, r0
   17f70:	mov	r0, r4
   17f74:	mov	r1, #48	; 0x30
   17f78:	bl	1aac0 <__assert_fail@plt+0x93f0>
   17f7c:	str	r6, [r5]
   17f80:	pop	{r4, r5, r6, sl, fp, pc}
   17f84:	movw	r1, #62536	; 0xf448
   17f88:	cmp	r0, #0
   17f8c:	movt	r1, #2
   17f90:	movne	r1, r0
   17f94:	ldr	r0, [r1]
   17f98:	bx	lr
   17f9c:	movw	r2, #62536	; 0xf448
   17fa0:	cmp	r0, #0
   17fa4:	movt	r2, #2
   17fa8:	movne	r2, r0
   17fac:	str	r1, [r2]
   17fb0:	bx	lr
   17fb4:	movw	r3, #62536	; 0xf448
   17fb8:	cmp	r0, #0
   17fbc:	and	r2, r2, #1
   17fc0:	movt	r3, #2
   17fc4:	movne	r3, r0
   17fc8:	ubfx	r0, r1, #5, #3
   17fcc:	and	r1, r1, #31
   17fd0:	add	ip, r3, r0, lsl #2
   17fd4:	mov	r0, #1
   17fd8:	ldr	r3, [ip, #8]
   17fdc:	and	r0, r0, r3, lsr r1
   17fe0:	eor	r2, r0, r2
   17fe4:	eor	r1, r3, r2, lsl r1
   17fe8:	str	r1, [ip, #8]
   17fec:	bx	lr
   17ff0:	movw	r2, #62536	; 0xf448
   17ff4:	cmp	r0, #0
   17ff8:	movt	r2, #2
   17ffc:	movne	r2, r0
   18000:	ldr	r0, [r2, #4]
   18004:	str	r1, [r2, #4]
   18008:	bx	lr
   1800c:	push	{fp, lr}
   18010:	mov	fp, sp
   18014:	movw	r3, #62536	; 0xf448
   18018:	cmp	r0, #0
   1801c:	movt	r3, #2
   18020:	movne	r3, r0
   18024:	cmp	r1, #0
   18028:	mov	r0, #10
   1802c:	cmpne	r2, #0
   18030:	str	r0, [r3]
   18034:	bne	1803c <__assert_fail@plt+0x696c>
   18038:	bl	116a0 <abort@plt>
   1803c:	str	r1, [r3, #40]	; 0x28
   18040:	str	r2, [r3, #44]	; 0x2c
   18044:	pop	{fp, pc}
   18048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1804c:	add	fp, sp, #28
   18050:	sub	sp, sp, #20
   18054:	mov	r7, r0
   18058:	ldr	r0, [fp, #8]
   1805c:	movw	r5, #62536	; 0xf448
   18060:	mov	r8, r3
   18064:	mov	r9, r2
   18068:	mov	sl, r1
   1806c:	movt	r5, #2
   18070:	cmp	r0, #0
   18074:	movne	r5, r0
   18078:	bl	11598 <__errno_location@plt>
   1807c:	ldr	r2, [r5, #40]	; 0x28
   18080:	ldr	r3, [r5, #44]	; 0x2c
   18084:	mov	r4, r0
   18088:	ldm	r5, {r0, r1}
   1808c:	add	r5, r5, #8
   18090:	ldr	r6, [r4]
   18094:	stm	sp, {r0, r1, r5}
   18098:	mov	r0, r7
   1809c:	mov	r1, sl
   180a0:	str	r2, [sp, #12]
   180a4:	str	r3, [sp, #16]
   180a8:	mov	r2, r9
   180ac:	mov	r3, r8
   180b0:	bl	180c0 <__assert_fail@plt+0x69f0>
   180b4:	str	r6, [r4]
   180b8:	sub	sp, fp, #28
   180bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c4:	add	fp, sp, #28
   180c8:	sub	sp, sp, #156	; 0x9c
   180cc:	str	r0, [fp, #-84]	; 0xffffffac
   180d0:	add	r0, r2, #1
   180d4:	mov	r6, r1
   180d8:	mov	r7, r3
   180dc:	str	r2, [fp, #-80]	; 0xffffffb0
   180e0:	str	r0, [sp, #80]	; 0x50
   180e4:	ldr	r0, [fp, #12]
   180e8:	and	r1, r0, #1
   180ec:	str	r1, [sp, #36]	; 0x24
   180f0:	and	r1, r0, #4
   180f4:	str	r1, [sp, #32]
   180f8:	ubfx	r8, r0, #1, #1
   180fc:	bl	1149c <__ctype_get_mb_cur_max@plt>
   18100:	str	r0, [sp, #40]	; 0x28
   18104:	ldr	r0, [fp, #24]
   18108:	ldr	r4, [fp, #8]
   1810c:	mov	r1, #0
   18110:	str	r1, [fp, #-52]	; 0xffffffcc
   18114:	mov	r1, #0
   18118:	str	r1, [sp, #60]	; 0x3c
   1811c:	mov	r1, #1
   18120:	str	r1, [sp, #84]	; 0x54
   18124:	str	r0, [sp, #76]	; 0x4c
   18128:	ldr	r0, [fp, #20]
   1812c:	str	r0, [sp, #72]	; 0x48
   18130:	mov	r0, #0
   18134:	str	r0, [sp, #56]	; 0x38
   18138:	mov	r0, #0
   1813c:	str	r0, [fp, #-88]	; 0xffffffa8
   18140:	mov	r0, #0
   18144:	str	r0, [fp, #-72]	; 0xffffffb8
   18148:	mov	r0, #0
   1814c:	cmp	r4, #10
   18150:	bhi	1946c <__assert_fail@plt+0x7d9c>
   18154:	add	r1, pc, #24
   18158:	ldr	ip, [fp, #-84]	; 0xffffffac
   1815c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18160:	mov	r5, r6
   18164:	mov	r9, #0
   18168:	mov	r2, #1
   1816c:	mov	r3, #0
   18170:	ldr	pc, [r1, r4, lsl #2]
   18174:	andeq	r8, r1, ip, lsr r2
   18178:	andeq	r8, r1, r8, ror r2
   1817c:	andeq	r8, r1, ip, asr #4
   18180:	andeq	r8, r1, r4, lsr r2
   18184:	andeq	r8, r1, ip, ror #4
   18188:	ldrdeq	r8, [r1], -r0
   1818c:	andeq	r8, r1, ip, asr r2
   18190:	andeq	r8, r1, r8, asr #10
   18194:	andeq	r8, r1, r0, lsr #3
   18198:	andeq	r8, r1, r0, lsr #3
   1819c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181a0:	movw	r6, #58446	; 0xe44e
   181a4:	mov	r0, #0
   181a8:	mov	r2, #5
   181ac:	movt	r6, #1
   181b0:	mov	r1, r6
   181b4:	bl	11424 <dcgettext@plt>
   181b8:	cmp	r0, r6
   181bc:	str	r0, [sp, #72]	; 0x48
   181c0:	bne	183b0 <__assert_fail@plt+0x6ce0>
   181c4:	bl	1c040 <__assert_fail@plt+0xa970>
   181c8:	ldrb	r1, [r0]
   181cc:	and	r1, r1, #223	; 0xdf
   181d0:	cmp	r1, #71	; 0x47
   181d4:	beq	18330 <__assert_fail@plt+0x6c60>
   181d8:	cmp	r1, #85	; 0x55
   181dc:	bne	18394 <__assert_fail@plt+0x6cc4>
   181e0:	ldrb	r1, [r0, #1]
   181e4:	and	r1, r1, #223	; 0xdf
   181e8:	cmp	r1, #84	; 0x54
   181ec:	bne	18394 <__assert_fail@plt+0x6cc4>
   181f0:	ldrb	r1, [r0, #2]
   181f4:	and	r1, r1, #223	; 0xdf
   181f8:	cmp	r1, #70	; 0x46
   181fc:	bne	18394 <__assert_fail@plt+0x6cc4>
   18200:	ldrb	r1, [r0, #3]
   18204:	cmp	r1, #45	; 0x2d
   18208:	bne	18394 <__assert_fail@plt+0x6cc4>
   1820c:	ldrb	r1, [r0, #4]
   18210:	cmp	r1, #56	; 0x38
   18214:	bne	18394 <__assert_fail@plt+0x6cc4>
   18218:	ldrb	r0, [r0, #5]
   1821c:	cmp	r0, #0
   18220:	movw	r0, #58450	; 0xe452
   18224:	movt	r0, #1
   18228:	str	r0, [sp, #72]	; 0x48
   1822c:	bne	18394 <__assert_fail@plt+0x6cc4>
   18230:	b	183b0 <__assert_fail@plt+0x6ce0>
   18234:	mov	r0, #1
   18238:	b	18278 <__assert_fail@plt+0x6ba8>
   1823c:	mov	r4, #0
   18240:	mov	r9, #0
   18244:	mov	r2, r0
   18248:	b	182c8 <__assert_fail@plt+0x6bf8>
   1824c:	tst	r8, #1
   18250:	bne	18278 <__assert_fail@plt+0x6ba8>
   18254:	mov	r2, r0
   18258:	b	182a0 <__assert_fail@plt+0x6bd0>
   1825c:	mov	r0, #1
   18260:	mov	r9, #0
   18264:	mov	r4, #5
   18268:	b	182e4 <__assert_fail@plt+0x6c14>
   1826c:	mov	r2, #1
   18270:	tst	r8, #1
   18274:	beq	182a0 <__assert_fail@plt+0x6bd0>
   18278:	mov	r1, #1
   1827c:	mov	r9, #0
   18280:	mov	r4, #2
   18284:	mov	r2, r0
   18288:	mov	r3, #1
   1828c:	str	r1, [fp, #-72]	; 0xffffffb8
   18290:	movw	r1, #58448	; 0xe450
   18294:	movt	r1, #1
   18298:	str	r1, [fp, #-88]	; 0xffffffa8
   1829c:	b	18548 <__assert_fail@plt+0x6e78>
   182a0:	cmp	r5, #0
   182a4:	mov	r9, #1
   182a8:	mov	r4, #2
   182ac:	movne	r0, #39	; 0x27
   182b0:	strbne	r0, [ip]
   182b4:	movw	r0, #58448	; 0xe450
   182b8:	movt	r0, #1
   182bc:	str	r0, [fp, #-88]	; 0xffffffa8
   182c0:	mov	r0, #1
   182c4:	str	r0, [fp, #-72]	; 0xffffffb8
   182c8:	mov	r3, #0
   182cc:	b	18548 <__assert_fail@plt+0x6e78>
   182d0:	mov	r4, #5
   182d4:	tst	r8, #1
   182d8:	beq	18300 <__assert_fail@plt+0x6c30>
   182dc:	mov	r0, #1
   182e0:	mov	r9, #0
   182e4:	str	r0, [fp, #-72]	; 0xffffffb8
   182e8:	movw	r0, #58444	; 0xe44c
   182ec:	mov	r2, #1
   182f0:	mov	r3, #1
   182f4:	movt	r0, #1
   182f8:	str	r0, [fp, #-88]	; 0xffffffa8
   182fc:	b	18548 <__assert_fail@plt+0x6e78>
   18300:	cmp	r5, #0
   18304:	mov	r3, #0
   18308:	mov	r9, #1
   1830c:	mov	r2, #1
   18310:	movne	r0, #34	; 0x22
   18314:	strbne	r0, [ip]
   18318:	movw	r0, #58444	; 0xe44c
   1831c:	movt	r0, #1
   18320:	str	r0, [fp, #-88]	; 0xffffffa8
   18324:	mov	r0, #1
   18328:	str	r0, [fp, #-72]	; 0xffffffb8
   1832c:	b	18548 <__assert_fail@plt+0x6e78>
   18330:	ldrb	r1, [r0, #1]
   18334:	and	r1, r1, #223	; 0xdf
   18338:	cmp	r1, #66	; 0x42
   1833c:	bne	18394 <__assert_fail@plt+0x6cc4>
   18340:	ldrb	r1, [r0, #2]
   18344:	cmp	r1, #49	; 0x31
   18348:	bne	18394 <__assert_fail@plt+0x6cc4>
   1834c:	ldrb	r1, [r0, #3]
   18350:	cmp	r1, #56	; 0x38
   18354:	bne	18394 <__assert_fail@plt+0x6cc4>
   18358:	ldrb	r1, [r0, #4]
   1835c:	cmp	r1, #48	; 0x30
   18360:	bne	18394 <__assert_fail@plt+0x6cc4>
   18364:	ldrb	r1, [r0, #5]
   18368:	cmp	r1, #51	; 0x33
   1836c:	bne	18394 <__assert_fail@plt+0x6cc4>
   18370:	ldrb	r1, [r0, #6]
   18374:	cmp	r1, #48	; 0x30
   18378:	bne	18394 <__assert_fail@plt+0x6cc4>
   1837c:	ldrb	r0, [r0, #7]
   18380:	cmp	r0, #0
   18384:	movw	r0, #58458	; 0xe45a
   18388:	movt	r0, #1
   1838c:	str	r0, [sp, #72]	; 0x48
   18390:	beq	183b0 <__assert_fail@plt+0x6ce0>
   18394:	movw	r1, #58444	; 0xe44c
   18398:	movw	r0, #58448	; 0xe450
   1839c:	cmp	r4, #9
   183a0:	movt	r1, #1
   183a4:	movt	r0, #1
   183a8:	moveq	r0, r1
   183ac:	str	r0, [sp, #72]	; 0x48
   183b0:	movw	r6, #58448	; 0xe450
   183b4:	mov	r0, #0
   183b8:	mov	r2, #5
   183bc:	movt	r6, #1
   183c0:	mov	r1, r6
   183c4:	bl	11424 <dcgettext@plt>
   183c8:	cmp	r0, r6
   183cc:	str	r0, [sp, #76]	; 0x4c
   183d0:	beq	1841c <__assert_fail@plt+0x6d4c>
   183d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   183d8:	mov	r9, #0
   183dc:	tst	r8, #1
   183e0:	bne	18524 <__assert_fail@plt+0x6e54>
   183e4:	ldr	r0, [sp, #72]	; 0x48
   183e8:	ldrb	r0, [r0]
   183ec:	cmp	r0, #0
   183f0:	beq	18524 <__assert_fail@plt+0x6e54>
   183f4:	ldr	r1, [sp, #72]	; 0x48
   183f8:	mov	r9, #0
   183fc:	add	r1, r1, #1
   18400:	cmp	r9, r5
   18404:	strbcc	r0, [ip, r9]
   18408:	ldrb	r0, [r1, r9]
   1840c:	add	r9, r9, #1
   18410:	cmp	r0, #0
   18414:	bne	18400 <__assert_fail@plt+0x6d30>
   18418:	b	18524 <__assert_fail@plt+0x6e54>
   1841c:	bl	1c040 <__assert_fail@plt+0xa970>
   18420:	ldrb	r1, [r0]
   18424:	and	r1, r1, #223	; 0xdf
   18428:	cmp	r1, #71	; 0x47
   1842c:	beq	1849c <__assert_fail@plt+0x6dcc>
   18430:	ldr	ip, [fp, #-84]	; 0xffffffac
   18434:	cmp	r1, #85	; 0x55
   18438:	bne	184f8 <__assert_fail@plt+0x6e28>
   1843c:	ldrb	r1, [r0, #1]
   18440:	and	r1, r1, #223	; 0xdf
   18444:	cmp	r1, #84	; 0x54
   18448:	bne	184f8 <__assert_fail@plt+0x6e28>
   1844c:	ldrb	r1, [r0, #2]
   18450:	and	r1, r1, #223	; 0xdf
   18454:	cmp	r1, #70	; 0x46
   18458:	bne	184f8 <__assert_fail@plt+0x6e28>
   1845c:	ldrb	r1, [r0, #3]
   18460:	cmp	r1, #45	; 0x2d
   18464:	bne	184f8 <__assert_fail@plt+0x6e28>
   18468:	ldrb	r1, [r0, #4]
   1846c:	cmp	r1, #56	; 0x38
   18470:	bne	184f8 <__assert_fail@plt+0x6e28>
   18474:	ldrb	r0, [r0, #5]
   18478:	cmp	r0, #0
   1847c:	bne	184f8 <__assert_fail@plt+0x6e28>
   18480:	movw	r0, #58454	; 0xe456
   18484:	movt	r0, #1
   18488:	str	r0, [sp, #76]	; 0x4c
   1848c:	mov	r9, #0
   18490:	tst	r8, #1
   18494:	beq	183e4 <__assert_fail@plt+0x6d14>
   18498:	b	18524 <__assert_fail@plt+0x6e54>
   1849c:	ldrb	r1, [r0, #1]
   184a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   184a4:	and	r1, r1, #223	; 0xdf
   184a8:	cmp	r1, #66	; 0x42
   184ac:	bne	184f8 <__assert_fail@plt+0x6e28>
   184b0:	ldrb	r1, [r0, #2]
   184b4:	cmp	r1, #49	; 0x31
   184b8:	bne	184f8 <__assert_fail@plt+0x6e28>
   184bc:	ldrb	r1, [r0, #3]
   184c0:	cmp	r1, #56	; 0x38
   184c4:	bne	184f8 <__assert_fail@plt+0x6e28>
   184c8:	ldrb	r1, [r0, #4]
   184cc:	cmp	r1, #48	; 0x30
   184d0:	bne	184f8 <__assert_fail@plt+0x6e28>
   184d4:	ldrb	r1, [r0, #5]
   184d8:	cmp	r1, #51	; 0x33
   184dc:	bne	184f8 <__assert_fail@plt+0x6e28>
   184e0:	ldrb	r1, [r0, #6]
   184e4:	cmp	r1, #48	; 0x30
   184e8:	bne	184f8 <__assert_fail@plt+0x6e28>
   184ec:	ldrb	r0, [r0, #7]
   184f0:	cmp	r0, #0
   184f4:	beq	1930c <__assert_fail@plt+0x7c3c>
   184f8:	movw	r0, #58448	; 0xe450
   184fc:	cmp	r4, #9
   18500:	movt	r0, #1
   18504:	mov	r1, r0
   18508:	movw	r0, #58444	; 0xe44c
   1850c:	movt	r0, #1
   18510:	moveq	r1, r0
   18514:	str	r1, [sp, #76]	; 0x4c
   18518:	mov	r9, #0
   1851c:	tst	r8, #1
   18520:	beq	183e4 <__assert_fail@plt+0x6d14>
   18524:	ldr	r6, [sp, #76]	; 0x4c
   18528:	mov	r0, r6
   1852c:	bl	11574 <strlen@plt>
   18530:	ldr	ip, [fp, #-84]	; 0xffffffac
   18534:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18538:	str	r0, [fp, #-72]	; 0xffffffb8
   1853c:	str	r6, [fp, #-88]	; 0xffffffa8
   18540:	mov	r2, #1
   18544:	mov	r3, r8
   18548:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1854c:	str	r4, [fp, #-64]	; 0xffffffc0
   18550:	mov	sl, #0
   18554:	str	r3, [fp, #-76]	; 0xffffffb4
   18558:	str	r2, [sp, #88]	; 0x58
   1855c:	cmp	r0, #0
   18560:	movwne	r0, #1
   18564:	and	r1, r0, r3
   18568:	and	r1, r2, r1
   1856c:	str	r1, [sp, #48]	; 0x30
   18570:	sub	r1, r4, #2
   18574:	clz	r1, r1
   18578:	lsr	r1, r1, #5
   1857c:	and	r1, r1, r3
   18580:	str	r1, [sp, #44]	; 0x2c
   18584:	subs	r1, r4, #2
   18588:	eor	r4, r3, #1
   1858c:	movwne	r1, #1
   18590:	str	r4, [sp, #92]	; 0x5c
   18594:	orr	r4, r1, r4
   18598:	and	r1, r1, r2
   1859c:	and	r0, r0, r1
   185a0:	str	r4, [sp, #64]	; 0x40
   185a4:	ldr	r4, [sp, #84]	; 0x54
   185a8:	str	r0, [fp, #-60]	; 0xffffffc4
   185ac:	orr	r0, r1, r3
   185b0:	ldr	r1, [fp, #16]
   185b4:	eor	r0, r0, #1
   185b8:	clz	r1, r1
   185bc:	lsr	r1, r1, #5
   185c0:	orr	r0, r1, r0
   185c4:	str	r0, [fp, #-68]	; 0xffffffbc
   185c8:	eor	r0, r2, #1
   185cc:	str	r0, [sp, #52]	; 0x34
   185d0:	cmn	r7, #1
   185d4:	beq	185e4 <__assert_fail@plt+0x6f14>
   185d8:	cmp	sl, r7
   185dc:	bne	185f0 <__assert_fail@plt+0x6f20>
   185e0:	b	19284 <__assert_fail@plt+0x7bb4>
   185e4:	ldrb	r0, [lr, sl]
   185e8:	cmp	r0, #0
   185ec:	beq	1928c <__assert_fail@plt+0x7bbc>
   185f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   185f4:	cmp	r0, #0
   185f8:	beq	18658 <__assert_fail@plt+0x6f88>
   185fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18600:	mov	r6, r5
   18604:	add	r5, sl, r0
   18608:	cmp	r0, #2
   1860c:	bcc	18678 <__assert_fail@plt+0x6fa8>
   18610:	mov	r0, #0
   18614:	cmn	r7, #1
   18618:	str	r0, [fp, #-56]	; 0xffffffc8
   1861c:	bne	18634 <__assert_fail@plt+0x6f64>
   18620:	mov	r0, lr
   18624:	bl	11574 <strlen@plt>
   18628:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1862c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18630:	mov	r7, r0
   18634:	cmp	r5, r7
   18638:	bls	18688 <__assert_fail@plt+0x6fb8>
   1863c:	mov	r0, #0
   18640:	mov	r5, r6
   18644:	str	r0, [fp, #-48]	; 0xffffffd0
   18648:	ldrb	r6, [lr, sl]
   1864c:	cmp	r6, #126	; 0x7e
   18650:	bls	186d8 <__assert_fail@plt+0x7008>
   18654:	b	18c34 <__assert_fail@plt+0x7564>
   18658:	mov	r0, #0
   1865c:	str	r0, [fp, #-56]	; 0xffffffc8
   18660:	mov	r0, #0
   18664:	str	r0, [fp, #-48]	; 0xffffffd0
   18668:	ldrb	r6, [lr, sl]
   1866c:	cmp	r6, #126	; 0x7e
   18670:	bls	186d8 <__assert_fail@plt+0x7008>
   18674:	b	18c34 <__assert_fail@plt+0x7564>
   18678:	mov	r0, #0
   1867c:	str	r0, [fp, #-56]	; 0xffffffc8
   18680:	cmp	r5, r7
   18684:	bhi	1863c <__assert_fail@plt+0x6f6c>
   18688:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1868c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   18690:	add	r0, lr, sl
   18694:	bl	11568 <bcmp@plt>
   18698:	ldr	r2, [sp, #92]	; 0x5c
   1869c:	cmp	r0, #0
   186a0:	mov	r1, r0
   186a4:	mov	r5, r6
   186a8:	movwne	r1, #1
   186ac:	orr	r1, r1, r2
   186b0:	tst	r1, #1
   186b4:	beq	1934c <__assert_fail@plt+0x7c7c>
   186b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   186bc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   186c0:	clz	r0, r0
   186c4:	lsr	r0, r0, #5
   186c8:	str	r0, [fp, #-48]	; 0xffffffd0
   186cc:	ldrb	r6, [lr, sl]
   186d0:	cmp	r6, #126	; 0x7e
   186d4:	bhi	18c34 <__assert_fail@plt+0x7564>
   186d8:	add	r3, pc, #16
   186dc:	mov	r8, #1
   186e0:	mov	r2, #110	; 0x6e
   186e4:	mov	r0, #97	; 0x61
   186e8:	mov	r1, #0
   186ec:	ldr	pc, [r3, r6, lsl #2]
   186f0:	andeq	r8, r1, ip, ror #19
   186f4:	andeq	r8, r1, r4, lsr ip
   186f8:	andeq	r8, r1, r4, lsr ip
   186fc:	andeq	r8, r1, r4, lsr ip
   18700:	andeq	r8, r1, r4, lsr ip
   18704:	andeq	r8, r1, r4, lsr ip
   18708:	andeq	r8, r1, r4, lsr ip
   1870c:	andeq	r8, r1, r8, ror #25
   18710:	andeq	r8, r1, ip, asr #19
   18714:	andeq	r8, r1, r4, asr #19
   18718:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1871c:	andeq	r8, r1, r8, lsl #22
   18720:			; <UNDEFINED> instruction: 0x000189bc
   18724:	ldrdeq	r8, [r1], -r4
   18728:	andeq	r8, r1, r4, lsr ip
   1872c:	andeq	r8, r1, r4, lsr ip
   18730:	andeq	r8, r1, r4, lsr ip
   18734:	andeq	r8, r1, r4, lsr ip
   18738:	andeq	r8, r1, r4, lsr ip
   1873c:	andeq	r8, r1, r4, lsr ip
   18740:	andeq	r8, r1, r4, lsr ip
   18744:	andeq	r8, r1, r4, lsr ip
   18748:	andeq	r8, r1, r4, lsr ip
   1874c:	andeq	r8, r1, r4, lsr ip
   18750:	andeq	r8, r1, r4, lsr ip
   18754:	andeq	r8, r1, r4, lsr ip
   18758:	andeq	r8, r1, r4, lsr ip
   1875c:	andeq	r8, r1, r4, lsr ip
   18760:	andeq	r8, r1, r4, lsr ip
   18764:	andeq	r8, r1, r4, lsr ip
   18768:	andeq	r8, r1, r4, lsr ip
   1876c:	andeq	r8, r1, r4, lsr ip
   18770:	andeq	r8, r1, r0, ror #18
   18774:	andeq	r8, r1, r4, ror #18
   18778:	andeq	r8, r1, r4, ror #18
   1877c:	andeq	r8, r1, r4, asr r9
   18780:	andeq	r8, r1, r4, ror #18
   18784:	andeq	r8, r1, ip, ror #17
   18788:	andeq	r8, r1, r4, ror #18
   1878c:	andeq	r8, r1, r0, lsl fp
   18790:	andeq	r8, r1, r4, ror #18
   18794:	andeq	r8, r1, r4, ror #18
   18798:	andeq	r8, r1, r4, ror #18
   1879c:	andeq	r8, r1, ip, ror #17
   187a0:	andeq	r8, r1, ip, ror #17
   187a4:	andeq	r8, r1, ip, ror #17
   187a8:	andeq	r8, r1, ip, ror #17
   187ac:	andeq	r8, r1, ip, ror #17
   187b0:	andeq	r8, r1, ip, ror #17
   187b4:	andeq	r8, r1, ip, ror #17
   187b8:	andeq	r8, r1, ip, ror #17
   187bc:	andeq	r8, r1, ip, ror #17
   187c0:	andeq	r8, r1, ip, ror #17
   187c4:	andeq	r8, r1, ip, ror #17
   187c8:	andeq	r8, r1, ip, ror #17
   187cc:	andeq	r8, r1, ip, ror #17
   187d0:	andeq	r8, r1, ip, ror #17
   187d4:	andeq	r8, r1, ip, ror #17
   187d8:	andeq	r8, r1, ip, ror #17
   187dc:	andeq	r8, r1, r4, ror #18
   187e0:	andeq	r8, r1, r4, ror #18
   187e4:	andeq	r8, r1, r4, ror #18
   187e8:	andeq	r8, r1, r4, ror #18
   187ec:	ldrdeq	r8, [r1], -r4
   187f0:	andeq	r8, r1, r4, lsr ip
   187f4:	andeq	r8, r1, ip, ror #17
   187f8:	andeq	r8, r1, ip, ror #17
   187fc:	andeq	r8, r1, ip, ror #17
   18800:	andeq	r8, r1, ip, ror #17
   18804:	andeq	r8, r1, ip, ror #17
   18808:	andeq	r8, r1, ip, ror #17
   1880c:	andeq	r8, r1, ip, ror #17
   18810:	andeq	r8, r1, ip, ror #17
   18814:	andeq	r8, r1, ip, ror #17
   18818:	andeq	r8, r1, ip, ror #17
   1881c:	andeq	r8, r1, ip, ror #17
   18820:	andeq	r8, r1, ip, ror #17
   18824:	andeq	r8, r1, ip, ror #17
   18828:	andeq	r8, r1, ip, ror #17
   1882c:	andeq	r8, r1, ip, ror #17
   18830:	andeq	r8, r1, ip, ror #17
   18834:	andeq	r8, r1, ip, ror #17
   18838:	andeq	r8, r1, ip, ror #17
   1883c:	andeq	r8, r1, ip, ror #17
   18840:	andeq	r8, r1, ip, ror #17
   18844:	andeq	r8, r1, ip, ror #17
   18848:	andeq	r8, r1, ip, ror #17
   1884c:	andeq	r8, r1, ip, ror #17
   18850:	andeq	r8, r1, ip, ror #17
   18854:	andeq	r8, r1, ip, ror #17
   18858:	andeq	r8, r1, ip, ror #17
   1885c:	andeq	r8, r1, r4, ror #18
   18860:	muleq	r1, r8, r9
   18864:	andeq	r8, r1, ip, ror #17
   18868:	andeq	r8, r1, r4, ror #18
   1886c:	andeq	r8, r1, ip, ror #17
   18870:	andeq	r8, r1, r4, ror #18
   18874:	andeq	r8, r1, ip, ror #17
   18878:	andeq	r8, r1, ip, ror #17
   1887c:	andeq	r8, r1, ip, ror #17
   18880:	andeq	r8, r1, ip, ror #17
   18884:	andeq	r8, r1, ip, ror #17
   18888:	andeq	r8, r1, ip, ror #17
   1888c:	andeq	r8, r1, ip, ror #17
   18890:	andeq	r8, r1, ip, ror #17
   18894:	andeq	r8, r1, ip, ror #17
   18898:	andeq	r8, r1, ip, ror #17
   1889c:	andeq	r8, r1, ip, ror #17
   188a0:	andeq	r8, r1, ip, ror #17
   188a4:	andeq	r8, r1, ip, ror #17
   188a8:	andeq	r8, r1, ip, ror #17
   188ac:	andeq	r8, r1, ip, ror #17
   188b0:	andeq	r8, r1, ip, ror #17
   188b4:	andeq	r8, r1, ip, ror #17
   188b8:	andeq	r8, r1, ip, ror #17
   188bc:	andeq	r8, r1, ip, ror #17
   188c0:	andeq	r8, r1, ip, ror #17
   188c4:	andeq	r8, r1, ip, ror #17
   188c8:	andeq	r8, r1, ip, ror #17
   188cc:	andeq	r8, r1, ip, ror #17
   188d0:	andeq	r8, r1, ip, ror #17
   188d4:	andeq	r8, r1, ip, ror #17
   188d8:	andeq	r8, r1, ip, ror #17
   188dc:	andeq	r8, r1, ip, lsr #18
   188e0:	andeq	r8, r1, r4, ror #18
   188e4:	andeq	r8, r1, ip, lsr #18
   188e8:	andeq	r8, r1, r4, asr r9
   188ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   188f0:	tst	r0, #1
   188f4:	bne	18bac <__assert_fail@plt+0x74dc>
   188f8:	ldr	r1, [fp, #16]
   188fc:	ubfx	r0, r6, #5, #3
   18900:	mov	r2, #1
   18904:	ldr	r0, [r1, r0, lsl #2]
   18908:	and	r1, r6, #31
   1890c:	tst	r0, r2, lsl r1
   18910:	beq	18bac <__assert_fail@plt+0x74dc>
   18914:	mov	r0, r6
   18918:	mov	r1, r8
   1891c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18920:	tst	r2, #1
   18924:	beq	18bcc <__assert_fail@plt+0x74fc>
   18928:	b	19328 <__assert_fail@plt+0x7c58>
   1892c:	cmp	r7, #1
   18930:	beq	18954 <__assert_fail@plt+0x7284>
   18934:	mov	r8, #0
   18938:	cmn	r7, #1
   1893c:	bne	18b98 <__assert_fail@plt+0x74c8>
   18940:	ldrb	r0, [lr, #1]
   18944:	cmp	r0, #0
   18948:	beq	18954 <__assert_fail@plt+0x7284>
   1894c:	mvn	r7, #0
   18950:	b	18b98 <__assert_fail@plt+0x74c8>
   18954:	mov	r8, #0
   18958:	cmp	sl, #0
   1895c:	bne	18b98 <__assert_fail@plt+0x74c8>
   18960:	mov	r1, #1
   18964:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18968:	cmp	r0, #2
   1896c:	bne	18984 <__assert_fail@plt+0x72b4>
   18970:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18974:	mov	r8, r1
   18978:	tst	r0, #1
   1897c:	beq	188ec <__assert_fail@plt+0x721c>
   18980:	b	19328 <__assert_fail@plt+0x7c58>
   18984:	mov	r8, r1
   18988:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1898c:	tst	r0, #1
   18990:	beq	188f8 <__assert_fail@plt+0x7228>
   18994:	b	18bac <__assert_fail@plt+0x74dc>
   18998:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1899c:	cmp	r0, #2
   189a0:	bne	18c60 <__assert_fail@plt+0x7590>
   189a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   189a8:	tst	r0, #1
   189ac:	bne	19328 <__assert_fail@plt+0x7c58>
   189b0:	mov	r0, #0
   189b4:	str	r0, [fp, #-56]	; 0xffffffc8
   189b8:	b	18c78 <__assert_fail@plt+0x75a8>
   189bc:	mov	r0, #102	; 0x66
   189c0:	b	18ce8 <__assert_fail@plt+0x7618>
   189c4:	mov	r2, #116	; 0x74
   189c8:	b	189d8 <__assert_fail@plt+0x7308>
   189cc:	mov	r0, #98	; 0x62
   189d0:	b	18ce8 <__assert_fail@plt+0x7618>
   189d4:	mov	r2, #114	; 0x72
   189d8:	ldr	r0, [sp, #64]	; 0x40
   189dc:	tst	r0, #1
   189e0:	mov	r0, r2
   189e4:	bne	18ce8 <__assert_fail@plt+0x7618>
   189e8:	b	19328 <__assert_fail@plt+0x7c58>
   189ec:	ldr	r0, [sp, #88]	; 0x58
   189f0:	tst	r0, #1
   189f4:	beq	18d08 <__assert_fail@plt+0x7638>
   189f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   189fc:	tst	r0, #1
   18a00:	bne	19464 <__assert_fail@plt+0x7d94>
   18a04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18a08:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18a0c:	subs	r0, r0, #2
   18a10:	movwne	r0, #1
   18a14:	orr	r0, r0, r1
   18a18:	tst	r0, #1
   18a1c:	bne	18a58 <__assert_fail@plt+0x7388>
   18a20:	cmp	r9, r5
   18a24:	movcc	r0, #39	; 0x27
   18a28:	strbcc	r0, [ip, r9]
   18a2c:	add	r0, r9, #1
   18a30:	cmp	r0, r5
   18a34:	movcc	r1, #36	; 0x24
   18a38:	strbcc	r1, [ip, r0]
   18a3c:	add	r0, r9, #2
   18a40:	add	r9, r9, #3
   18a44:	cmp	r0, r5
   18a48:	movcc	r1, #39	; 0x27
   18a4c:	strbcc	r1, [ip, r0]
   18a50:	mov	r0, #1
   18a54:	str	r0, [fp, #-52]	; 0xffffffcc
   18a58:	mov	r1, #1
   18a5c:	cmp	r9, r5
   18a60:	mov	r8, #0
   18a64:	mov	r6, #48	; 0x30
   18a68:	str	r1, [fp, #-56]	; 0xffffffc8
   18a6c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18a70:	movcc	r0, #92	; 0x5c
   18a74:	strbcc	r0, [ip, r9]
   18a78:	add	r0, r9, #1
   18a7c:	cmp	r1, #2
   18a80:	beq	18ed4 <__assert_fail@plt+0x7804>
   18a84:	add	r1, sl, #1
   18a88:	cmp	r1, r7
   18a8c:	bcs	18ed4 <__assert_fail@plt+0x7804>
   18a90:	ldrb	r1, [lr, r1]
   18a94:	sub	r1, r1, #48	; 0x30
   18a98:	uxtb	r1, r1
   18a9c:	cmp	r1, #9
   18aa0:	bhi	18ed4 <__assert_fail@plt+0x7804>
   18aa4:	cmp	r0, r5
   18aa8:	movcc	r1, #48	; 0x30
   18aac:	strbcc	r1, [ip, r0]
   18ab0:	add	r0, r9, #2
   18ab4:	add	r9, r9, #3
   18ab8:	cmp	r0, r5
   18abc:	movcc	r1, #48	; 0x30
   18ac0:	strbcc	r1, [ip, r0]
   18ac4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18ac8:	tst	r0, #1
   18acc:	beq	188f8 <__assert_fail@plt+0x7228>
   18ad0:	b	18bac <__assert_fail@plt+0x74dc>
   18ad4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18ad8:	mov	r6, #63	; 0x3f
   18adc:	cmp	r0, #5
   18ae0:	beq	18ee8 <__assert_fail@plt+0x7818>
   18ae4:	mov	r1, #0
   18ae8:	cmp	r0, #2
   18aec:	str	r1, [fp, #-56]	; 0xffffffc8
   18af0:	bne	18fb0 <__assert_fail@plt+0x78e0>
   18af4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18af8:	mov	r8, #0
   18afc:	tst	r0, #1
   18b00:	beq	188ec <__assert_fail@plt+0x721c>
   18b04:	b	19328 <__assert_fail@plt+0x7c58>
   18b08:	mov	r0, #118	; 0x76
   18b0c:	b	18ce8 <__assert_fail@plt+0x7618>
   18b10:	mov	r0, #1
   18b14:	mov	r6, #39	; 0x27
   18b18:	str	r0, [sp, #60]	; 0x3c
   18b1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18b20:	cmp	r0, #2
   18b24:	bne	18d28 <__assert_fail@plt+0x7658>
   18b28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18b2c:	tst	r0, #1
   18b30:	bne	19328 <__assert_fail@plt+0x7c58>
   18b34:	ldr	r2, [sp, #56]	; 0x38
   18b38:	clz	r1, r5
   18b3c:	mov	r8, #1
   18b40:	lsr	r1, r1, #5
   18b44:	cmp	r2, #0
   18b48:	mov	r0, r2
   18b4c:	movwne	r0, #1
   18b50:	orrs	r0, r0, r1
   18b54:	moveq	r2, r5
   18b58:	moveq	r5, r0
   18b5c:	cmp	r9, r5
   18b60:	str	r2, [sp, #56]	; 0x38
   18b64:	movcc	r0, #39	; 0x27
   18b68:	strbcc	r0, [ip, r9]
   18b6c:	add	r0, r9, #1
   18b70:	cmp	r0, r5
   18b74:	movcc	r1, #92	; 0x5c
   18b78:	strbcc	r1, [ip, r0]
   18b7c:	add	r0, r9, #2
   18b80:	add	r9, r9, #3
   18b84:	cmp	r0, r5
   18b88:	movcc	r1, #39	; 0x27
   18b8c:	strbcc	r1, [ip, r0]
   18b90:	mov	r0, #0
   18b94:	str	r0, [fp, #-52]	; 0xffffffcc
   18b98:	mov	r0, #0
   18b9c:	str	r0, [fp, #-56]	; 0xffffffc8
   18ba0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18ba4:	tst	r0, #1
   18ba8:	beq	188f8 <__assert_fail@plt+0x7228>
   18bac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18bb0:	mov	r1, r8
   18bb4:	cmp	r0, #0
   18bb8:	mov	r0, r6
   18bbc:	beq	18c80 <__assert_fail@plt+0x75b0>
   18bc0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18bc4:	tst	r2, #1
   18bc8:	bne	19328 <__assert_fail@plt+0x7c58>
   18bcc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18bd0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18bd4:	subs	r2, r2, #2
   18bd8:	movwne	r2, #1
   18bdc:	orr	r2, r2, r3
   18be0:	tst	r2, #1
   18be4:	bne	18c20 <__assert_fail@plt+0x7550>
   18be8:	cmp	r9, r5
   18bec:	movcc	r2, #39	; 0x27
   18bf0:	strbcc	r2, [ip, r9]
   18bf4:	add	r2, r9, #1
   18bf8:	cmp	r2, r5
   18bfc:	movcc	r3, #36	; 0x24
   18c00:	strbcc	r3, [ip, r2]
   18c04:	add	r2, r9, #2
   18c08:	add	r9, r9, #3
   18c0c:	cmp	r2, r5
   18c10:	movcc	r3, #39	; 0x27
   18c14:	strbcc	r3, [ip, r2]
   18c18:	mov	r2, #1
   18c1c:	str	r2, [fp, #-52]	; 0xffffffcc
   18c20:	cmp	r9, r5
   18c24:	movcc	r2, #92	; 0x5c
   18c28:	strbcc	r2, [ip, r9]
   18c2c:	add	r9, r9, #1
   18c30:	b	18cc8 <__assert_fail@plt+0x75f8>
   18c34:	ldr	r0, [sp, #40]	; 0x28
   18c38:	cmp	r0, #1
   18c3c:	bne	18d3c <__assert_fail@plt+0x766c>
   18c40:	bl	11550 <__ctype_b_loc@plt>
   18c44:	ldr	r0, [r0]
   18c48:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18c4c:	mov	r1, #1
   18c50:	add	r0, r0, r6, lsl #1
   18c54:	ldrb	r0, [r0, #1]
   18c58:	ubfx	r8, r0, #6, #1
   18c5c:	b	19094 <__assert_fail@plt+0x79c4>
   18c60:	ldr	r1, [sp, #48]	; 0x30
   18c64:	mov	r0, #0
   18c68:	str	r0, [fp, #-56]	; 0xffffffc8
   18c6c:	mov	r0, #92	; 0x5c
   18c70:	cmp	r1, #0
   18c74:	beq	18ce8 <__assert_fail@plt+0x7618>
   18c78:	mov	r6, #92	; 0x5c
   18c7c:	mov	r8, #0
   18c80:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18c84:	cmp	r0, #0
   18c88:	bne	18cc0 <__assert_fail@plt+0x75f0>
   18c8c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18c90:	tst	r0, #1
   18c94:	beq	18cc0 <__assert_fail@plt+0x75f0>
   18c98:	cmp	r9, r5
   18c9c:	movcc	r0, #39	; 0x27
   18ca0:	strbcc	r0, [ip, r9]
   18ca4:	add	r0, r9, #1
   18ca8:	add	r9, r9, #2
   18cac:	cmp	r0, r5
   18cb0:	movcc	r1, #39	; 0x27
   18cb4:	strbcc	r1, [ip, r0]
   18cb8:	mov	r0, #0
   18cbc:	str	r0, [fp, #-52]	; 0xffffffcc
   18cc0:	mov	r1, r8
   18cc4:	mov	r0, r6
   18cc8:	cmp	r9, r5
   18ccc:	and	r4, r4, r1
   18cd0:	strbcc	r0, [ip, r9]
   18cd4:	add	r9, r9, #1
   18cd8:	add	sl, sl, #1
   18cdc:	cmn	r7, #1
   18ce0:	bne	185d8 <__assert_fail@plt+0x6f08>
   18ce4:	b	185e4 <__assert_fail@plt+0x6f14>
   18ce8:	mov	r1, #0
   18cec:	mov	r8, #0
   18cf0:	str	r1, [fp, #-56]	; 0xffffffc8
   18cf4:	ldr	r1, [sp, #88]	; 0x58
   18cf8:	tst	r1, #1
   18cfc:	mov	r1, #0
   18d00:	beq	188ec <__assert_fail@plt+0x721c>
   18d04:	b	18bc0 <__assert_fail@plt+0x74f0>
   18d08:	ldr	r0, [sp, #36]	; 0x24
   18d0c:	mov	r6, #0
   18d10:	mov	r8, #0
   18d14:	cmp	r0, #0
   18d18:	mov	r0, #0
   18d1c:	str	r0, [fp, #-56]	; 0xffffffc8
   18d20:	bne	18cd8 <__assert_fail@plt+0x7608>
   18d24:	b	188ec <__assert_fail@plt+0x721c>
   18d28:	mov	r8, #1
   18d2c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18d30:	tst	r0, #1
   18d34:	beq	188f8 <__assert_fail@plt+0x7228>
   18d38:	b	18bac <__assert_fail@plt+0x74dc>
   18d3c:	mov	r0, #0
   18d40:	cmn	r7, #1
   18d44:	str	r0, [fp, #-36]	; 0xffffffdc
   18d48:	str	r0, [fp, #-40]	; 0xffffffd8
   18d4c:	bne	18d60 <__assert_fail@plt+0x7690>
   18d50:	mov	r0, lr
   18d54:	bl	11574 <strlen@plt>
   18d58:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18d5c:	mov	r7, r0
   18d60:	ldr	r0, [sp, #44]	; 0x2c
   18d64:	str	r4, [sp, #84]	; 0x54
   18d68:	str	r5, [sp, #28]
   18d6c:	cmp	r0, #0
   18d70:	beq	18fc4 <__assert_fail@plt+0x78f4>
   18d74:	ldr	r0, [sp, #80]	; 0x50
   18d78:	mov	r8, #1
   18d7c:	mov	r5, #0
   18d80:	add	r0, r0, sl
   18d84:	str	r0, [sp, #24]
   18d88:	sub	r0, fp, #40	; 0x28
   18d8c:	mov	r3, r0
   18d90:	b	18dcc <__assert_fail@plt+0x76fc>
   18d94:	ldr	r5, [sp, #68]	; 0x44
   18d98:	add	r5, r0, r5
   18d9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18da0:	bl	11460 <iswprint@plt>
   18da4:	cmp	r0, #0
   18da8:	sub	r4, fp, #40	; 0x28
   18dac:	movwne	r0, #1
   18db0:	and	r8, r8, r0
   18db4:	mov	r0, r4
   18db8:	bl	1140c <mbsinit@plt>
   18dbc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18dc0:	mov	r3, r4
   18dc4:	cmp	r0, #0
   18dc8:	bne	19088 <__assert_fail@plt+0x79b8>
   18dcc:	str	r5, [sp, #68]	; 0x44
   18dd0:	add	r5, r5, sl
   18dd4:	sub	r0, fp, #44	; 0x2c
   18dd8:	add	r1, lr, r5
   18ddc:	sub	r2, r7, r5
   18de0:	bl	1c078 <__assert_fail@plt+0xa9a8>
   18de4:	cmn	r0, #2
   18de8:	beq	19048 <__assert_fail@plt+0x7978>
   18dec:	ldr	ip, [fp, #-84]	; 0xffffffac
   18df0:	cmn	r0, #1
   18df4:	beq	1903c <__assert_fail@plt+0x796c>
   18df8:	cmp	r0, #0
   18dfc:	beq	19040 <__assert_fail@plt+0x7970>
   18e00:	cmp	r0, #2
   18e04:	bcc	18d94 <__assert_fail@plt+0x76c4>
   18e08:	ldr	r1, [sp, #68]	; 0x44
   18e0c:	ldr	r2, [sp, #24]
   18e10:	add	r1, r2, r1
   18e14:	sub	r2, r0, #1
   18e18:	ldrb	r3, [r1]
   18e1c:	sub	r3, r3, #91	; 0x5b
   18e20:	cmp	r3, #33	; 0x21
   18e24:	bls	18e44 <__assert_fail@plt+0x7774>
   18e28:	add	r1, r1, #1
   18e2c:	subs	r2, r2, #1
   18e30:	beq	18d94 <__assert_fail@plt+0x76c4>
   18e34:	ldrb	r3, [r1]
   18e38:	sub	r3, r3, #91	; 0x5b
   18e3c:	cmp	r3, #33	; 0x21
   18e40:	bhi	18e28 <__assert_fail@plt+0x7758>
   18e44:	add	r5, pc, #0
   18e48:	ldr	pc, [r5, r3, lsl #2]
   18e4c:	andeq	r9, r1, r0, ror #6
   18e50:	andeq	r9, r1, r0, ror #6
   18e54:	andeq	r8, r1, r8, lsr #28
   18e58:	andeq	r9, r1, r0, ror #6
   18e5c:	andeq	r8, r1, r8, lsr #28
   18e60:	andeq	r9, r1, r0, ror #6
   18e64:	andeq	r8, r1, r8, lsr #28
   18e68:	andeq	r8, r1, r8, lsr #28
   18e6c:	andeq	r8, r1, r8, lsr #28
   18e70:	andeq	r8, r1, r8, lsr #28
   18e74:	andeq	r8, r1, r8, lsr #28
   18e78:	andeq	r8, r1, r8, lsr #28
   18e7c:	andeq	r8, r1, r8, lsr #28
   18e80:	andeq	r8, r1, r8, lsr #28
   18e84:	andeq	r8, r1, r8, lsr #28
   18e88:	andeq	r8, r1, r8, lsr #28
   18e8c:	andeq	r8, r1, r8, lsr #28
   18e90:	andeq	r8, r1, r8, lsr #28
   18e94:	andeq	r8, r1, r8, lsr #28
   18e98:	andeq	r8, r1, r8, lsr #28
   18e9c:	andeq	r8, r1, r8, lsr #28
   18ea0:	andeq	r8, r1, r8, lsr #28
   18ea4:	andeq	r8, r1, r8, lsr #28
   18ea8:	andeq	r8, r1, r8, lsr #28
   18eac:	andeq	r8, r1, r8, lsr #28
   18eb0:	andeq	r8, r1, r8, lsr #28
   18eb4:	andeq	r8, r1, r8, lsr #28
   18eb8:	andeq	r8, r1, r8, lsr #28
   18ebc:	andeq	r8, r1, r8, lsr #28
   18ec0:	andeq	r8, r1, r8, lsr #28
   18ec4:	andeq	r8, r1, r8, lsr #28
   18ec8:	andeq	r8, r1, r8, lsr #28
   18ecc:	andeq	r8, r1, r8, lsr #28
   18ed0:	andeq	r9, r1, r0, ror #6
   18ed4:	mov	r9, r0
   18ed8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18edc:	tst	r0, #1
   18ee0:	beq	188f8 <__assert_fail@plt+0x7228>
   18ee4:	b	18bac <__assert_fail@plt+0x74dc>
   18ee8:	mov	r0, #0
   18eec:	str	r0, [fp, #-56]	; 0xffffffc8
   18ef0:	ldr	r0, [sp, #32]
   18ef4:	cmp	r0, #0
   18ef8:	beq	18fb0 <__assert_fail@plt+0x78e0>
   18efc:	add	r0, sl, #2
   18f00:	mov	r1, r7
   18f04:	cmp	r0, r7
   18f08:	bcs	18fb0 <__assert_fail@plt+0x78e0>
   18f0c:	add	r1, sl, lr
   18f10:	ldrb	r1, [r1, #1]
   18f14:	cmp	r1, #63	; 0x3f
   18f18:	bne	18fb0 <__assert_fail@plt+0x78e0>
   18f1c:	ldrb	r8, [lr, r0]
   18f20:	sub	r2, r8, #33	; 0x21
   18f24:	cmp	r2, #29
   18f28:	bhi	18fb0 <__assert_fail@plt+0x78e0>
   18f2c:	mov	r1, r4
   18f30:	movw	r4, #20929	; 0x51c1
   18f34:	mov	r3, #1
   18f38:	movt	r4, #14336	; 0x3800
   18f3c:	tst	r4, r3, lsl r2
   18f40:	beq	1926c <__assert_fail@plt+0x7b9c>
   18f44:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18f48:	tst	r2, #1
   18f4c:	bne	19328 <__assert_fail@plt+0x7c58>
   18f50:	cmp	r9, r5
   18f54:	mov	r6, r8
   18f58:	mov	r4, r1
   18f5c:	mov	sl, r0
   18f60:	mov	r8, #0
   18f64:	movcc	r2, #63	; 0x3f
   18f68:	strbcc	r2, [ip, r9]
   18f6c:	add	r2, r9, #1
   18f70:	cmp	r2, r5
   18f74:	movcc	r3, #34	; 0x22
   18f78:	strbcc	r3, [ip, r2]
   18f7c:	add	r2, r9, #2
   18f80:	cmp	r2, r5
   18f84:	movcc	r3, #34	; 0x22
   18f88:	strbcc	r3, [ip, r2]
   18f8c:	add	r2, r9, #3
   18f90:	add	r9, r9, #4
   18f94:	cmp	r2, r5
   18f98:	movcc	r3, #63	; 0x3f
   18f9c:	strbcc	r3, [ip, r2]
   18fa0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18fa4:	tst	r0, #1
   18fa8:	beq	188f8 <__assert_fail@plt+0x7228>
   18fac:	b	18bac <__assert_fail@plt+0x74dc>
   18fb0:	mov	r8, #0
   18fb4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18fb8:	tst	r0, #1
   18fbc:	beq	188f8 <__assert_fail@plt+0x7228>
   18fc0:	b	18bac <__assert_fail@plt+0x74dc>
   18fc4:	mov	r8, #1
   18fc8:	mov	r5, #0
   18fcc:	sub	r4, fp, #40	; 0x28
   18fd0:	str	r5, [sp, #68]	; 0x44
   18fd4:	add	r5, r5, sl
   18fd8:	sub	r0, fp, #44	; 0x2c
   18fdc:	mov	r3, r4
   18fe0:	add	r1, lr, r5
   18fe4:	sub	r2, r7, r5
   18fe8:	bl	1c078 <__assert_fail@plt+0xa9a8>
   18fec:	cmn	r0, #2
   18ff0:	beq	19048 <__assert_fail@plt+0x7978>
   18ff4:	cmn	r0, #1
   18ff8:	beq	1903c <__assert_fail@plt+0x796c>
   18ffc:	ldr	r5, [sp, #68]	; 0x44
   19000:	cmp	r0, #0
   19004:	beq	19084 <__assert_fail@plt+0x79b4>
   19008:	add	r5, r0, r5
   1900c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19010:	bl	11460 <iswprint@plt>
   19014:	cmp	r0, #0
   19018:	sub	r4, fp, #40	; 0x28
   1901c:	movwne	r0, #1
   19020:	and	r8, r8, r0
   19024:	mov	r0, r4
   19028:	bl	1140c <mbsinit@plt>
   1902c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19030:	cmp	r0, #0
   19034:	beq	18fd0 <__assert_fail@plt+0x7900>
   19038:	b	19088 <__assert_fail@plt+0x79b8>
   1903c:	mov	r8, #0
   19040:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19044:	b	1907c <__assert_fail@plt+0x79ac>
   19048:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1904c:	mov	r8, #0
   19050:	cmp	r5, r7
   19054:	bcs	1907c <__assert_fail@plt+0x79ac>
   19058:	ldrb	r0, [lr, r5]
   1905c:	cmp	r0, #0
   19060:	beq	1907c <__assert_fail@plt+0x79ac>
   19064:	ldr	r0, [sp, #68]	; 0x44
   19068:	add	r0, r0, #1
   1906c:	add	r5, r0, sl
   19070:	str	r0, [sp, #68]	; 0x44
   19074:	cmp	r5, r7
   19078:	bcc	19058 <__assert_fail@plt+0x7988>
   1907c:	ldr	r5, [sp, #68]	; 0x44
   19080:	b	19088 <__assert_fail@plt+0x79b8>
   19084:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19088:	mov	r1, r5
   1908c:	ldr	r5, [sp, #28]
   19090:	ldr	r4, [sp, #84]	; 0x54
   19094:	ldr	r0, [sp, #52]	; 0x34
   19098:	ldr	ip, [fp, #-84]	; 0xffffffac
   1909c:	cmp	r1, #1
   190a0:	orr	r2, r8, r0
   190a4:	mov	r0, r1
   190a8:	bhi	190b4 <__assert_fail@plt+0x79e4>
   190ac:	tst	r2, #1
   190b0:	bne	188ec <__assert_fail@plt+0x721c>
   190b4:	add	r0, r0, sl
   190b8:	str	r2, [sp, #84]	; 0x54
   190bc:	str	r0, [fp, #-56]	; 0xffffffc8
   190c0:	mov	r0, #0
   190c4:	tst	r2, #1
   190c8:	bne	191a8 <__assert_fail@plt+0x7ad8>
   190cc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   190d0:	tst	r1, #1
   190d4:	bne	19328 <__assert_fail@plt+0x7c58>
   190d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   190dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   190e0:	subs	r2, r1, #2
   190e4:	movwne	r2, #1
   190e8:	orr	r2, r2, r0
   190ec:	tst	r2, #1
   190f0:	bne	1912c <__assert_fail@plt+0x7a5c>
   190f4:	cmp	r9, r5
   190f8:	add	r2, r9, #1
   190fc:	mov	r0, #1
   19100:	movcc	r1, #39	; 0x27
   19104:	str	r0, [fp, #-52]	; 0xffffffcc
   19108:	strbcc	r1, [ip, r9]
   1910c:	cmp	r2, r5
   19110:	movcc	r1, #36	; 0x24
   19114:	strbcc	r1, [ip, r2]
   19118:	add	r2, r9, #2
   1911c:	add	r9, r9, #3
   19120:	cmp	r2, r5
   19124:	movcc	r1, #39	; 0x27
   19128:	strbcc	r1, [ip, r2]
   1912c:	cmp	r9, r5
   19130:	add	r2, r9, #1
   19134:	movcc	r1, #92	; 0x5c
   19138:	strbcc	r1, [ip, r9]
   1913c:	cmp	r2, r5
   19140:	bcs	19154 <__assert_fail@plt+0x7a84>
   19144:	uxtb	r3, r6
   19148:	mov	r1, #48	; 0x30
   1914c:	orr	r3, r1, r3, lsr #6
   19150:	strb	r3, [ip, r2]
   19154:	add	r2, r9, #2
   19158:	add	r9, r9, #3
   1915c:	cmp	r2, r5
   19160:	lsrcc	r3, r6, #3
   19164:	movcc	r1, #6
   19168:	bficc	r3, r1, #3, #29
   1916c:	mov	r1, #6
   19170:	bfi	r6, r1, #3, #29
   19174:	strbcc	r3, [ip, r2]
   19178:	mov	r2, #1
   1917c:	b	191dc <__assert_fail@plt+0x7b0c>
   19180:	ldr	r1, [sp, #80]	; 0x50
   19184:	cmp	r9, r2
   19188:	mov	r5, r2
   1918c:	ldr	r2, [sp, #84]	; 0x54
   19190:	strbcc	r6, [ip, r9]
   19194:	add	r9, r9, #1
   19198:	ldrb	r6, [r1, sl]
   1919c:	mov	sl, r3
   191a0:	tst	r2, #1
   191a4:	beq	190cc <__assert_fail@plt+0x79fc>
   191a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   191ac:	tst	r1, #1
   191b0:	beq	191d0 <__assert_fail@plt+0x7b00>
   191b4:	cmp	r9, r5
   191b8:	mov	r2, r0
   191bc:	movcc	r1, #92	; 0x5c
   191c0:	strbcc	r1, [ip, r9]
   191c4:	add	r9, r9, #1
   191c8:	mov	r1, #0
   191cc:	b	191d8 <__assert_fail@plt+0x7b08>
   191d0:	mov	r1, #0
   191d4:	mov	r2, r0
   191d8:	str	r1, [fp, #-48]	; 0xffffffd0
   191dc:	mov	r0, r2
   191e0:	and	r1, r2, #1
   191e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   191e8:	add	r3, sl, #1
   191ec:	cmp	r2, r3
   191f0:	bls	19250 <__assert_fail@plt+0x7b80>
   191f4:	mov	r2, r5
   191f8:	ldr	r5, [fp, #-52]	; 0xffffffcc
   191fc:	cmp	r1, #0
   19200:	movwne	r1, #1
   19204:	mvn	r5, r5
   19208:	orr	r5, r5, r1
   1920c:	tst	r5, #1
   19210:	bne	19180 <__assert_fail@plt+0x7ab0>
   19214:	cmp	r9, r2
   19218:	movcc	r5, r4
   1921c:	movcc	r4, #39	; 0x27
   19220:	strbcc	r4, [ip, r9]
   19224:	movcc	r4, r5
   19228:	add	r5, r9, #1
   1922c:	add	r9, r9, #2
   19230:	cmp	r5, r2
   19234:	movcc	r1, r4
   19238:	movcc	r4, #39	; 0x27
   1923c:	strbcc	r4, [ip, r5]
   19240:	movcc	r4, r1
   19244:	mov	r1, #0
   19248:	str	r1, [fp, #-52]	; 0xffffffcc
   1924c:	b	19180 <__assert_fail@plt+0x7ab0>
   19250:	cmp	r1, #0
   19254:	movwne	r1, #1
   19258:	str	r1, [fp, #-56]	; 0xffffffc8
   1925c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19260:	cmp	r0, #0
   19264:	beq	18c8c <__assert_fail@plt+0x75bc>
   19268:	b	18cc0 <__assert_fail@plt+0x75f0>
   1926c:	mov	r8, #0
   19270:	mov	r4, r1
   19274:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19278:	tst	r0, #1
   1927c:	beq	188f8 <__assert_fail@plt+0x7228>
   19280:	b	18bac <__assert_fail@plt+0x74dc>
   19284:	mov	r7, sl
   19288:	b	19290 <__assert_fail@plt+0x7bc0>
   1928c:	mvn	r7, #0
   19290:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19294:	ldr	r3, [fp, #-76]	; 0xffffffb4
   19298:	ldr	r2, [sp, #88]	; 0x58
   1929c:	eor	r0, r1, #2
   192a0:	orr	r0, r0, r9
   192a4:	clz	r0, r0
   192a8:	lsr	r0, r0, #5
   192ac:	tst	r3, r0
   192b0:	bne	19328 <__assert_fail@plt+0x7c58>
   192b4:	subs	r0, r1, #2
   192b8:	movwne	r0, #1
   192bc:	orr	r0, r3, r0
   192c0:	tst	r0, #1
   192c4:	ldreq	r0, [sp, #60]	; 0x3c
   192c8:	eoreq	r0, r0, #1
   192cc:	tsteq	r0, #1
   192d0:	bne	19404 <__assert_fail@plt+0x7d34>
   192d4:	tst	r4, #1
   192d8:	bne	193c8 <__assert_fail@plt+0x7cf8>
   192dc:	ldr	r6, [sp, #56]	; 0x38
   192e0:	mov	r8, #0
   192e4:	cmp	r6, #0
   192e8:	beq	19400 <__assert_fail@plt+0x7d30>
   192ec:	mov	r1, #0
   192f0:	mov	r4, #2
   192f4:	cmp	r5, #0
   192f8:	mov	r0, r2
   192fc:	mov	r3, #0
   19300:	str	r1, [sp, #84]	; 0x54
   19304:	beq	1814c <__assert_fail@plt+0x6a7c>
   19308:	b	19404 <__assert_fail@plt+0x7d34>
   1930c:	movw	r0, #58462	; 0xe45e
   19310:	movt	r0, #1
   19314:	str	r0, [sp, #76]	; 0x4c
   19318:	mov	r9, #0
   1931c:	tst	r8, #1
   19320:	beq	183e4 <__assert_fail@plt+0x6d14>
   19324:	b	18524 <__assert_fail@plt+0x6e54>
   19328:	ldr	r1, [sp, #88]	; 0x58
   1932c:	mov	r0, #2
   19330:	tst	r1, #1
   19334:	movwne	r0, #4
   19338:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1933c:	ldr	r1, [fp, #12]
   19340:	cmp	r2, #2
   19344:	moveq	r2, r0
   19348:	b	19380 <__assert_fail@plt+0x7cb0>
   1934c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19350:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19354:	ldr	r1, [fp, #12]
   19358:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1935c:	b	19380 <__assert_fail@plt+0x7cb0>
   19360:	ldr	r1, [sp, #88]	; 0x58
   19364:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19368:	ldr	r5, [sp, #28]
   1936c:	mov	r0, #2
   19370:	tst	r1, #1
   19374:	ldr	r1, [fp, #12]
   19378:	movwne	r0, #4
   1937c:	mov	r2, r0
   19380:	mov	r0, #0
   19384:	bic	r1, r1, #2
   19388:	str	r2, [sp]
   1938c:	mov	r2, lr
   19390:	str	r0, [sp, #8]
   19394:	ldr	r0, [sp, #72]	; 0x48
   19398:	str	r1, [sp, #4]
   1939c:	mov	r1, r5
   193a0:	str	r0, [sp, #12]
   193a4:	ldr	r0, [sp, #76]	; 0x4c
   193a8:	str	r0, [sp, #16]
   193ac:	mov	r0, ip
   193b0:	mov	r3, r7
   193b4:	bl	180c0 <__assert_fail@plt+0x69f0>
   193b8:	mov	r9, r0
   193bc:	mov	r0, r9
   193c0:	sub	sp, fp, #28
   193c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193c8:	mov	r0, #5
   193cc:	ldr	r1, [sp, #56]	; 0x38
   193d0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   193d4:	str	r0, [sp]
   193d8:	ldr	r0, [fp, #12]
   193dc:	str	r0, [sp, #4]
   193e0:	ldr	r0, [fp, #16]
   193e4:	str	r0, [sp, #8]
   193e8:	ldr	r0, [sp, #72]	; 0x48
   193ec:	str	r0, [sp, #12]
   193f0:	ldr	r0, [sp, #76]	; 0x4c
   193f4:	str	r0, [sp, #16]
   193f8:	ldr	r0, [fp, #-84]	; 0xffffffac
   193fc:	b	193b0 <__assert_fail@plt+0x7ce0>
   19400:	mov	r3, #0
   19404:	ldr	r1, [fp, #-88]	; 0xffffffa8
   19408:	cmp	r1, #0
   1940c:	beq	19448 <__assert_fail@plt+0x7d78>
   19410:	ldr	r2, [fp, #-84]	; 0xffffffac
   19414:	tst	r3, #1
   19418:	bne	1944c <__assert_fail@plt+0x7d7c>
   1941c:	ldrb	r0, [r1]
   19420:	cmp	r0, #0
   19424:	beq	1944c <__assert_fail@plt+0x7d7c>
   19428:	add	r1, r1, #1
   1942c:	cmp	r9, r5
   19430:	strbcc	r0, [r2, r9]
   19434:	add	r9, r9, #1
   19438:	ldrb	r0, [r1], #1
   1943c:	cmp	r0, #0
   19440:	bne	1942c <__assert_fail@plt+0x7d5c>
   19444:	b	1944c <__assert_fail@plt+0x7d7c>
   19448:	ldr	r2, [fp, #-84]	; 0xffffffac
   1944c:	cmp	r9, r5
   19450:	movcc	r0, #0
   19454:	strbcc	r0, [r2, r9]
   19458:	mov	r0, r9
   1945c:	sub	sp, fp, #28
   19460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19464:	mov	r0, #4
   19468:	b	19338 <__assert_fail@plt+0x7c68>
   1946c:	bl	116a0 <abort@plt>
   19470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19474:	add	fp, sp, #28
   19478:	sub	sp, sp, #28
   1947c:	movw	r5, #62536	; 0xf448
   19480:	cmp	r2, #0
   19484:	mov	r4, r1
   19488:	mov	r7, r0
   1948c:	str	r0, [sp, #20]
   19490:	movt	r5, #2
   19494:	movne	r5, r2
   19498:	bl	11598 <__errno_location@plt>
   1949c:	mov	sl, r0
   194a0:	ldr	r2, [r5, #40]	; 0x28
   194a4:	ldr	r3, [r5, #44]	; 0x2c
   194a8:	ldm	r5, {r0, r1}
   194ac:	orr	r8, r1, #1
   194b0:	add	r9, r5, #8
   194b4:	mov	r1, #0
   194b8:	ldr	r6, [sl]
   194bc:	stm	sp, {r0, r8, r9}
   194c0:	mov	r0, #0
   194c4:	str	r2, [sp, #12]
   194c8:	str	r3, [sp, #16]
   194cc:	mov	r2, r7
   194d0:	mov	r3, r4
   194d4:	str	r6, [sp, #24]
   194d8:	mov	r6, r4
   194dc:	bl	180c0 <__assert_fail@plt+0x69f0>
   194e0:	add	r7, r0, #1
   194e4:	mov	r0, r7
   194e8:	bl	1a690 <__assert_fail@plt+0x8fc0>
   194ec:	mov	r4, r0
   194f0:	ldr	r0, [r5]
   194f4:	ldr	r2, [r5, #44]	; 0x2c
   194f8:	ldr	r1, [r5, #40]	; 0x28
   194fc:	mov	r3, r6
   19500:	stm	sp, {r0, r8, r9}
   19504:	str	r2, [sp, #16]
   19508:	ldr	r2, [sp, #20]
   1950c:	str	r1, [sp, #12]
   19510:	mov	r0, r4
   19514:	mov	r1, r7
   19518:	bl	180c0 <__assert_fail@plt+0x69f0>
   1951c:	ldr	r0, [sp, #24]
   19520:	str	r0, [sl]
   19524:	mov	r0, r4
   19528:	sub	sp, fp, #28
   1952c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19534:	add	fp, sp, #28
   19538:	sub	sp, sp, #36	; 0x24
   1953c:	movw	r8, #62536	; 0xf448
   19540:	cmp	r3, #0
   19544:	mov	r4, r2
   19548:	str	r2, [sp, #24]
   1954c:	mov	r5, r1
   19550:	mov	r6, r0
   19554:	str	r0, [sp, #20]
   19558:	movt	r8, #2
   1955c:	movne	r8, r3
   19560:	bl	11598 <__errno_location@plt>
   19564:	str	r0, [sp, #28]
   19568:	ldr	r1, [r8, #40]	; 0x28
   1956c:	ldr	r2, [r8, #44]	; 0x2c
   19570:	ldr	r7, [r0]
   19574:	cmp	r4, #0
   19578:	add	sl, r8, #8
   1957c:	mov	r0, #0
   19580:	ldm	r8, {r3, r9}
   19584:	orreq	r9, r9, #1
   19588:	stm	sp, {r3, r9, sl}
   1958c:	str	r1, [sp, #12]
   19590:	str	r2, [sp, #16]
   19594:	mov	r1, #0
   19598:	mov	r2, r6
   1959c:	mov	r3, r5
   195a0:	str	r7, [sp, #32]
   195a4:	mov	r7, r5
   195a8:	bl	180c0 <__assert_fail@plt+0x69f0>
   195ac:	add	r4, r0, #1
   195b0:	mov	r5, r0
   195b4:	mov	r0, r4
   195b8:	bl	1a690 <__assert_fail@plt+0x8fc0>
   195bc:	mov	r6, r0
   195c0:	ldr	r0, [r8]
   195c4:	ldr	r2, [r8, #44]	; 0x2c
   195c8:	ldr	r1, [r8, #40]	; 0x28
   195cc:	mov	r3, r7
   195d0:	stm	sp, {r0, r9, sl}
   195d4:	str	r2, [sp, #16]
   195d8:	ldr	r2, [sp, #20]
   195dc:	str	r1, [sp, #12]
   195e0:	mov	r0, r6
   195e4:	mov	r1, r4
   195e8:	bl	180c0 <__assert_fail@plt+0x69f0>
   195ec:	ldr	r0, [sp, #24]
   195f0:	ldr	r1, [sp, #32]
   195f4:	ldr	r2, [sp, #28]
   195f8:	cmp	r0, #0
   195fc:	str	r1, [r2]
   19600:	strne	r5, [r0]
   19604:	mov	r0, r6
   19608:	sub	sp, fp, #28
   1960c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19610:	push	{r4, r5, r6, r7, fp, lr}
   19614:	add	fp, sp, #16
   19618:	movw	r4, #61856	; 0xf1a0
   1961c:	movt	r4, #2
   19620:	ldrd	r6, [r4]
   19624:	cmp	r7, #2
   19628:	blt	19654 <__assert_fail@plt+0x7f84>
   1962c:	add	r5, r6, #12
   19630:	mov	r7, #0
   19634:	ldr	r0, [r5, r7, lsl #3]
   19638:	bl	1c018 <__assert_fail@plt+0xa948>
   1963c:	ldr	r1, [r4, #4]
   19640:	add	r2, r7, #2
   19644:	add	r0, r7, #1
   19648:	mov	r7, r0
   1964c:	cmp	r2, r1
   19650:	blt	19634 <__assert_fail@plt+0x7f64>
   19654:	ldr	r0, [r6, #4]
   19658:	movw	r5, #62584	; 0xf478
   1965c:	movt	r5, #2
   19660:	cmp	r0, r5
   19664:	beq	19678 <__assert_fail@plt+0x7fa8>
   19668:	bl	1c018 <__assert_fail@plt+0xa948>
   1966c:	mov	r0, #256	; 0x100
   19670:	str	r0, [r4, #8]
   19674:	str	r5, [r4, #12]
   19678:	add	r5, r4, #8
   1967c:	cmp	r6, r5
   19680:	beq	19690 <__assert_fail@plt+0x7fc0>
   19684:	mov	r0, r6
   19688:	bl	1c018 <__assert_fail@plt+0xa948>
   1968c:	str	r5, [r4]
   19690:	mov	r0, #1
   19694:	str	r0, [r4, #4]
   19698:	pop	{r4, r5, r6, r7, fp, pc}
   1969c:	movw	r3, #62536	; 0xf448
   196a0:	mvn	r2, #0
   196a4:	movt	r3, #2
   196a8:	b	196ac <__assert_fail@plt+0x7fdc>
   196ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196b0:	add	fp, sp, #28
   196b4:	sub	sp, sp, #44	; 0x2c
   196b8:	mov	r7, r3
   196bc:	str	r2, [sp, #36]	; 0x24
   196c0:	str	r1, [sp, #32]
   196c4:	mov	r5, r0
   196c8:	bl	11598 <__errno_location@plt>
   196cc:	cmp	r5, #0
   196d0:	bmi	19838 <__assert_fail@plt+0x8168>
   196d4:	cmn	r5, #-2147483647	; 0x80000001
   196d8:	beq	19838 <__assert_fail@plt+0x8168>
   196dc:	movw	r8, #61856	; 0xf1a0
   196e0:	mov	r4, r0
   196e4:	ldr	r0, [r0]
   196e8:	movt	r8, #2
   196ec:	str	r4, [sp, #28]
   196f0:	ldr	r1, [r8, #4]
   196f4:	ldr	r6, [r8]
   196f8:	str	r0, [sp, #24]
   196fc:	cmp	r1, r5
   19700:	ble	1970c <__assert_fail@plt+0x803c>
   19704:	mov	sl, r6
   19708:	b	19774 <__assert_fail@plt+0x80a4>
   1970c:	mov	r0, #8
   19710:	add	r9, r8, #8
   19714:	str	r1, [fp, #-32]	; 0xffffffe0
   19718:	sub	r1, r5, r1
   1971c:	mvn	r3, #-2147483648	; 0x80000000
   19720:	str	r0, [sp]
   19724:	subs	r0, r6, r9
   19728:	add	r2, r1, #1
   1972c:	sub	r1, fp, #32
   19730:	movne	r0, r6
   19734:	bl	1a890 <__assert_fail@plt+0x91c0>
   19738:	mov	sl, r0
   1973c:	cmp	r6, r9
   19740:	str	r0, [r8]
   19744:	bne	19750 <__assert_fail@plt+0x8080>
   19748:	ldrd	r0, [r8, #8]
   1974c:	stm	sl, {r0, r1}
   19750:	ldr	r1, [r8, #4]
   19754:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19758:	add	r0, sl, r1, lsl #3
   1975c:	sub	r1, r2, r1
   19760:	lsl	r2, r1, #3
   19764:	mov	r1, #0
   19768:	bl	115c8 <memset@plt>
   1976c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19770:	str	r0, [r8, #4]
   19774:	mov	r9, sl
   19778:	ldm	r7, {r0, r1}
   1977c:	orr	r8, r1, #1
   19780:	add	r1, r7, #8
   19784:	ldr	r2, [r7, #40]	; 0x28
   19788:	ldr	r3, [r7, #44]	; 0x2c
   1978c:	ldr	r6, [r9, r5, lsl #3]!
   19790:	str	r1, [sp, #20]
   19794:	ldr	r4, [r9, #4]!
   19798:	stm	sp, {r0, r8}
   1979c:	add	r0, sp, #8
   197a0:	stm	r0, {r1, r2, r3}
   197a4:	ldr	r2, [sp, #32]
   197a8:	ldr	r3, [sp, #36]	; 0x24
   197ac:	mov	r1, r6
   197b0:	mov	r0, r4
   197b4:	bl	180c0 <__assert_fail@plt+0x69f0>
   197b8:	cmp	r6, r0
   197bc:	bhi	19820 <__assert_fail@plt+0x8150>
   197c0:	add	r6, r0, #1
   197c4:	movw	r0, #62584	; 0xf478
   197c8:	movt	r0, #2
   197cc:	str	r6, [sl, r5, lsl #3]
   197d0:	cmp	r4, r0
   197d4:	beq	197e0 <__assert_fail@plt+0x8110>
   197d8:	mov	r0, r4
   197dc:	bl	1c018 <__assert_fail@plt+0xa948>
   197e0:	mov	r0, r6
   197e4:	bl	1a690 <__assert_fail@plt+0x8fc0>
   197e8:	str	r0, [r9]
   197ec:	mov	r4, r0
   197f0:	add	r3, sp, #8
   197f4:	ldr	r0, [r7]
   197f8:	ldr	r1, [r7, #40]	; 0x28
   197fc:	ldr	r2, [r7, #44]	; 0x2c
   19800:	stm	sp, {r0, r8}
   19804:	ldr	r0, [sp, #20]
   19808:	stm	r3, {r0, r1, r2}
   1980c:	ldr	r2, [sp, #32]
   19810:	ldr	r3, [sp, #36]	; 0x24
   19814:	mov	r0, r4
   19818:	mov	r1, r6
   1981c:	bl	180c0 <__assert_fail@plt+0x69f0>
   19820:	ldr	r1, [sp, #24]
   19824:	ldr	r0, [sp, #28]
   19828:	str	r1, [r0]
   1982c:	mov	r0, r4
   19830:	sub	sp, fp, #28
   19834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19838:	bl	116a0 <abort@plt>
   1983c:	movw	r3, #62536	; 0xf448
   19840:	movt	r3, #2
   19844:	b	196ac <__assert_fail@plt+0x7fdc>
   19848:	movw	r3, #62536	; 0xf448
   1984c:	mov	r1, r0
   19850:	mov	r0, #0
   19854:	mvn	r2, #0
   19858:	movt	r3, #2
   1985c:	b	196ac <__assert_fail@plt+0x7fdc>
   19860:	movw	r3, #62536	; 0xf448
   19864:	mov	r2, r1
   19868:	mov	r1, r0
   1986c:	mov	r0, #0
   19870:	movt	r3, #2
   19874:	b	196ac <__assert_fail@plt+0x7fdc>
   19878:	push	{fp, lr}
   1987c:	mov	fp, sp
   19880:	sub	sp, sp, #48	; 0x30
   19884:	vmov.i32	q8, #0	; 0x00000000
   19888:	mov	ip, #32
   1988c:	mov	r3, sp
   19890:	mov	lr, r2
   19894:	cmp	r1, #10
   19898:	add	r2, r3, #16
   1989c:	vst1.64	{d16-d17}, [r3], ip
   198a0:	vst1.64	{d16-d17}, [r2]
   198a4:	vst1.64	{d16-d17}, [r3]
   198a8:	beq	198c8 <__assert_fail@plt+0x81f8>
   198ac:	str	r1, [sp]
   198b0:	mov	r3, sp
   198b4:	mov	r1, lr
   198b8:	mvn	r2, #0
   198bc:	bl	196ac <__assert_fail@plt+0x7fdc>
   198c0:	mov	sp, fp
   198c4:	pop	{fp, pc}
   198c8:	bl	116a0 <abort@plt>
   198cc:	push	{r4, sl, fp, lr}
   198d0:	add	fp, sp, #8
   198d4:	sub	sp, sp, #48	; 0x30
   198d8:	vmov.i32	q8, #0	; 0x00000000
   198dc:	mov	ip, r3
   198e0:	mov	r3, sp
   198e4:	mov	lr, #32
   198e8:	cmp	r1, #10
   198ec:	add	r4, r3, #16
   198f0:	vst1.64	{d16-d17}, [r3], lr
   198f4:	vst1.64	{d16-d17}, [r4]
   198f8:	vst1.64	{d16-d17}, [r3]
   198fc:	beq	1991c <__assert_fail@plt+0x824c>
   19900:	str	r1, [sp]
   19904:	mov	r1, r2
   19908:	mov	r3, sp
   1990c:	mov	r2, ip
   19910:	bl	196ac <__assert_fail@plt+0x7fdc>
   19914:	sub	sp, fp, #8
   19918:	pop	{r4, sl, fp, pc}
   1991c:	bl	116a0 <abort@plt>
   19920:	push	{fp, lr}
   19924:	mov	fp, sp
   19928:	sub	sp, sp, #48	; 0x30
   1992c:	vmov.i32	q8, #0	; 0x00000000
   19930:	mov	r3, sp
   19934:	mov	ip, #32
   19938:	cmp	r0, #10
   1993c:	add	r2, r3, #16
   19940:	vst1.64	{d16-d17}, [r3], ip
   19944:	vst1.64	{d16-d17}, [r2]
   19948:	vst1.64	{d16-d17}, [r3]
   1994c:	beq	1996c <__assert_fail@plt+0x829c>
   19950:	str	r0, [sp]
   19954:	mov	r3, sp
   19958:	mov	r0, #0
   1995c:	mvn	r2, #0
   19960:	bl	196ac <__assert_fail@plt+0x7fdc>
   19964:	mov	sp, fp
   19968:	pop	{fp, pc}
   1996c:	bl	116a0 <abort@plt>
   19970:	push	{fp, lr}
   19974:	mov	fp, sp
   19978:	sub	sp, sp, #48	; 0x30
   1997c:	vmov.i32	q8, #0	; 0x00000000
   19980:	mov	r3, sp
   19984:	mov	ip, #32
   19988:	cmp	r0, #10
   1998c:	add	lr, r3, #16
   19990:	vst1.64	{d16-d17}, [r3], ip
   19994:	vst1.64	{d16-d17}, [lr]
   19998:	vst1.64	{d16-d17}, [r3]
   1999c:	beq	199b8 <__assert_fail@plt+0x82e8>
   199a0:	str	r0, [sp]
   199a4:	mov	r3, sp
   199a8:	mov	r0, #0
   199ac:	bl	196ac <__assert_fail@plt+0x7fdc>
   199b0:	mov	sp, fp
   199b4:	pop	{fp, pc}
   199b8:	bl	116a0 <abort@plt>
   199bc:	push	{r4, sl, fp, lr}
   199c0:	add	fp, sp, #8
   199c4:	sub	sp, sp, #48	; 0x30
   199c8:	mov	lr, r0
   199cc:	movw	r0, #62536	; 0xf448
   199d0:	mov	ip, r1
   199d4:	mov	r1, #32
   199d8:	mov	r4, #1
   199dc:	movt	r0, #2
   199e0:	add	r3, r0, #16
   199e4:	vld1.64	{d16-d17}, [r0], r1
   199e8:	vld1.64	{d20-d21}, [r0]
   199ec:	vld1.64	{d18-d19}, [r3]
   199f0:	mov	r3, sp
   199f4:	add	r0, r3, #32
   199f8:	add	r1, r3, #16
   199fc:	vst1.64	{d20-d21}, [r0]
   19a00:	mov	r0, #28
   19a04:	vst1.64	{d18-d19}, [r1]
   19a08:	mov	r1, r3
   19a0c:	and	r0, r0, r2, lsr #3
   19a10:	and	r2, r2, #31
   19a14:	vst1.64	{d16-d17}, [r1], r0
   19a18:	ldr	r0, [r1, #8]
   19a1c:	bic	r4, r4, r0, lsr r2
   19a20:	eor	r0, r0, r4, lsl r2
   19a24:	mov	r2, ip
   19a28:	str	r0, [r1, #8]
   19a2c:	mov	r0, #0
   19a30:	mov	r1, lr
   19a34:	bl	196ac <__assert_fail@plt+0x7fdc>
   19a38:	sub	sp, fp, #8
   19a3c:	pop	{r4, sl, fp, pc}
   19a40:	push	{fp, lr}
   19a44:	mov	fp, sp
   19a48:	sub	sp, sp, #48	; 0x30
   19a4c:	mov	ip, r0
   19a50:	movw	r0, #62536	; 0xf448
   19a54:	mov	r2, #32
   19a58:	movt	r0, #2
   19a5c:	add	r3, r0, #16
   19a60:	vld1.64	{d16-d17}, [r0], r2
   19a64:	vld1.64	{d20-d21}, [r0]
   19a68:	vld1.64	{d18-d19}, [r3]
   19a6c:	mov	r3, sp
   19a70:	add	r0, r3, #32
   19a74:	add	r2, r3, #16
   19a78:	vst1.64	{d20-d21}, [r0]
   19a7c:	mov	r0, #28
   19a80:	vst1.64	{d18-d19}, [r2]
   19a84:	mov	r2, r3
   19a88:	and	r0, r0, r1, lsr #3
   19a8c:	and	r1, r1, #31
   19a90:	vst1.64	{d16-d17}, [r2], r0
   19a94:	mov	r0, #1
   19a98:	ldr	lr, [r2, #8]
   19a9c:	bic	r0, r0, lr, lsr r1
   19aa0:	eor	r0, lr, r0, lsl r1
   19aa4:	mov	r1, ip
   19aa8:	str	r0, [r2, #8]
   19aac:	mov	r0, #0
   19ab0:	mvn	r2, #0
   19ab4:	bl	196ac <__assert_fail@plt+0x7fdc>
   19ab8:	mov	sp, fp
   19abc:	pop	{fp, pc}
   19ac0:	push	{fp, lr}
   19ac4:	mov	fp, sp
   19ac8:	sub	sp, sp, #48	; 0x30
   19acc:	mov	r1, r0
   19ad0:	movw	r0, #62536	; 0xf448
   19ad4:	mov	r3, #32
   19ad8:	movt	r0, #2
   19adc:	add	r2, r0, #16
   19ae0:	vld1.64	{d16-d17}, [r0], r3
   19ae4:	mov	r3, sp
   19ae8:	vld1.64	{d18-d19}, [r2]
   19aec:	vld1.64	{d20-d21}, [r0]
   19af0:	add	r2, r3, #16
   19af4:	add	r0, r3, #32
   19af8:	vst1.64	{d18-d19}, [r2]
   19afc:	vst1.64	{d20-d21}, [r0]
   19b00:	mov	r0, #12
   19b04:	mov	r2, r3
   19b08:	vst1.64	{d16-d17}, [r2], r0
   19b0c:	ldr	r0, [r2]
   19b10:	orr	r0, r0, #67108864	; 0x4000000
   19b14:	str	r0, [r2]
   19b18:	mov	r0, #0
   19b1c:	mvn	r2, #0
   19b20:	bl	196ac <__assert_fail@plt+0x7fdc>
   19b24:	mov	sp, fp
   19b28:	pop	{fp, pc}
   19b2c:	push	{fp, lr}
   19b30:	mov	fp, sp
   19b34:	sub	sp, sp, #48	; 0x30
   19b38:	mov	ip, r1
   19b3c:	mov	r1, r0
   19b40:	movw	r0, #62536	; 0xf448
   19b44:	mov	r2, #32
   19b48:	movt	r0, #2
   19b4c:	add	r3, r0, #16
   19b50:	vld1.64	{d16-d17}, [r0], r2
   19b54:	vld1.64	{d18-d19}, [r3]
   19b58:	vld1.64	{d20-d21}, [r0]
   19b5c:	mov	r3, sp
   19b60:	add	r2, r3, #16
   19b64:	add	r0, r3, #32
   19b68:	vst1.64	{d18-d19}, [r2]
   19b6c:	vst1.64	{d20-d21}, [r0]
   19b70:	mov	r0, #12
   19b74:	mov	r2, r3
   19b78:	vst1.64	{d16-d17}, [r2], r0
   19b7c:	ldr	r0, [r2]
   19b80:	orr	r0, r0, #67108864	; 0x4000000
   19b84:	str	r0, [r2]
   19b88:	mov	r0, #0
   19b8c:	mov	r2, ip
   19b90:	bl	196ac <__assert_fail@plt+0x7fdc>
   19b94:	mov	sp, fp
   19b98:	pop	{fp, pc}
   19b9c:	push	{r4, sl, fp, lr}
   19ba0:	add	fp, sp, #8
   19ba4:	sub	sp, sp, #96	; 0x60
   19ba8:	vmov.i32	q8, #0	; 0x00000000
   19bac:	mov	ip, r2
   19bb0:	mov	r2, sp
   19bb4:	mov	r4, #28
   19bb8:	cmp	r1, #10
   19bbc:	mov	r3, r2
   19bc0:	add	lr, r2, #16
   19bc4:	vst1.64	{d16-d17}, [r3], r4
   19bc8:	vst1.64	{d16-d17}, [lr]
   19bcc:	vst1.32	{d16-d17}, [r3]
   19bd0:	beq	19c20 <__assert_fail@plt+0x8550>
   19bd4:	vld1.64	{d16-d17}, [r2], r4
   19bd8:	vld1.64	{d18-d19}, [lr]
   19bdc:	add	r3, sp, #48	; 0x30
   19be0:	vld1.32	{d20-d21}, [r2]
   19be4:	add	r2, r3, #20
   19be8:	add	r4, r3, #4
   19bec:	vst1.32	{d18-d19}, [r2]
   19bf0:	add	r2, r3, #32
   19bf4:	vst1.32	{d16-d17}, [r4]
   19bf8:	vst1.32	{d20-d21}, [r2]
   19bfc:	str	r1, [sp, #48]	; 0x30
   19c00:	mvn	r2, #0
   19c04:	ldr	r1, [sp, #60]	; 0x3c
   19c08:	orr	r1, r1, #67108864	; 0x4000000
   19c0c:	str	r1, [sp, #60]	; 0x3c
   19c10:	mov	r1, ip
   19c14:	bl	196ac <__assert_fail@plt+0x7fdc>
   19c18:	sub	sp, fp, #8
   19c1c:	pop	{r4, sl, fp, pc}
   19c20:	bl	116a0 <abort@plt>
   19c24:	push	{r4, r5, r6, sl, fp, lr}
   19c28:	add	fp, sp, #16
   19c2c:	sub	sp, sp, #48	; 0x30
   19c30:	mov	ip, r3
   19c34:	movw	r3, #62536	; 0xf448
   19c38:	mov	r6, #32
   19c3c:	cmp	r1, #0
   19c40:	mov	r4, sp
   19c44:	movt	r3, #2
   19c48:	cmpne	r2, #0
   19c4c:	add	r5, r4, #16
   19c50:	add	lr, r3, #16
   19c54:	vld1.64	{d16-d17}, [r3], r6
   19c58:	vld1.64	{d18-d19}, [lr]
   19c5c:	vld1.64	{d20-d21}, [r3]
   19c60:	mov	r3, #10
   19c64:	vst1.64	{d16-d17}, [r4], r6
   19c68:	vst1.64	{d18-d19}, [r5]
   19c6c:	vst1.64	{d20-d21}, [r4]
   19c70:	str	r3, [sp]
   19c74:	bne	19c7c <__assert_fail@plt+0x85ac>
   19c78:	bl	116a0 <abort@plt>
   19c7c:	str	r2, [sp, #44]	; 0x2c
   19c80:	str	r1, [sp, #40]	; 0x28
   19c84:	mov	r3, sp
   19c88:	mov	r1, ip
   19c8c:	mvn	r2, #0
   19c90:	bl	196ac <__assert_fail@plt+0x7fdc>
   19c94:	sub	sp, fp, #16
   19c98:	pop	{r4, r5, r6, sl, fp, pc}
   19c9c:	push	{r4, r5, r6, sl, fp, lr}
   19ca0:	add	fp, sp, #16
   19ca4:	sub	sp, sp, #48	; 0x30
   19ca8:	mov	lr, r3
   19cac:	movw	r3, #62536	; 0xf448
   19cb0:	mov	r6, #32
   19cb4:	cmp	r1, #0
   19cb8:	mov	r4, sp
   19cbc:	movt	r3, #2
   19cc0:	cmpne	r2, #0
   19cc4:	add	r5, r4, #16
   19cc8:	add	ip, r3, #16
   19ccc:	vld1.64	{d16-d17}, [r3], r6
   19cd0:	vld1.64	{d18-d19}, [ip]
   19cd4:	vld1.64	{d20-d21}, [r3]
   19cd8:	mov	r3, #10
   19cdc:	vst1.64	{d16-d17}, [r4], r6
   19ce0:	vst1.64	{d18-d19}, [r5]
   19ce4:	vst1.64	{d20-d21}, [r4]
   19ce8:	str	r3, [sp]
   19cec:	bne	19cf4 <__assert_fail@plt+0x8624>
   19cf0:	bl	116a0 <abort@plt>
   19cf4:	ldr	ip, [fp, #8]
   19cf8:	str	r2, [sp, #44]	; 0x2c
   19cfc:	str	r1, [sp, #40]	; 0x28
   19d00:	mov	r3, sp
   19d04:	mov	r1, lr
   19d08:	mov	r2, ip
   19d0c:	bl	196ac <__assert_fail@plt+0x7fdc>
   19d10:	sub	sp, fp, #16
   19d14:	pop	{r4, r5, r6, sl, fp, pc}
   19d18:	push	{r4, sl, fp, lr}
   19d1c:	add	fp, sp, #8
   19d20:	sub	sp, sp, #48	; 0x30
   19d24:	movw	r3, #62536	; 0xf448
   19d28:	mov	lr, #32
   19d2c:	mov	ip, r2
   19d30:	cmp	r0, #0
   19d34:	movt	r3, #2
   19d38:	cmpne	r1, #0
   19d3c:	add	r2, r3, #16
   19d40:	vld1.64	{d16-d17}, [r3], lr
   19d44:	vld1.64	{d20-d21}, [r3]
   19d48:	vld1.64	{d18-d19}, [r2]
   19d4c:	mov	r2, sp
   19d50:	add	r4, r2, #16
   19d54:	vst1.64	{d16-d17}, [r2], lr
   19d58:	vst1.64	{d20-d21}, [r2]
   19d5c:	mov	r2, #10
   19d60:	vst1.64	{d18-d19}, [r4]
   19d64:	str	r2, [sp]
   19d68:	bne	19d70 <__assert_fail@plt+0x86a0>
   19d6c:	bl	116a0 <abort@plt>
   19d70:	str	r1, [sp, #44]	; 0x2c
   19d74:	str	r0, [sp, #40]	; 0x28
   19d78:	mov	r3, sp
   19d7c:	mov	r0, #0
   19d80:	mov	r1, ip
   19d84:	mvn	r2, #0
   19d88:	bl	196ac <__assert_fail@plt+0x7fdc>
   19d8c:	sub	sp, fp, #8
   19d90:	pop	{r4, sl, fp, pc}
   19d94:	push	{r4, r5, fp, lr}
   19d98:	add	fp, sp, #8
   19d9c:	sub	sp, sp, #48	; 0x30
   19da0:	mov	ip, r3
   19da4:	movw	r3, #62536	; 0xf448
   19da8:	mov	r4, #32
   19dac:	mov	lr, r2
   19db0:	cmp	r0, #0
   19db4:	movt	r3, #2
   19db8:	cmpne	r1, #0
   19dbc:	add	r2, r3, #16
   19dc0:	vld1.64	{d16-d17}, [r3], r4
   19dc4:	vld1.64	{d20-d21}, [r3]
   19dc8:	vld1.64	{d18-d19}, [r2]
   19dcc:	mov	r2, sp
   19dd0:	add	r5, r2, #16
   19dd4:	vst1.64	{d16-d17}, [r2], r4
   19dd8:	vst1.64	{d20-d21}, [r2]
   19ddc:	mov	r2, #10
   19de0:	vst1.64	{d18-d19}, [r5]
   19de4:	str	r2, [sp]
   19de8:	bne	19df0 <__assert_fail@plt+0x8720>
   19dec:	bl	116a0 <abort@plt>
   19df0:	str	r1, [sp, #44]	; 0x2c
   19df4:	str	r0, [sp, #40]	; 0x28
   19df8:	mov	r3, sp
   19dfc:	mov	r0, #0
   19e00:	mov	r1, lr
   19e04:	mov	r2, ip
   19e08:	bl	196ac <__assert_fail@plt+0x7fdc>
   19e0c:	sub	sp, fp, #8
   19e10:	pop	{r4, r5, fp, pc}
   19e14:	movw	r3, #61808	; 0xf170
   19e18:	movt	r3, #2
   19e1c:	b	196ac <__assert_fail@plt+0x7fdc>
   19e20:	movw	r3, #61808	; 0xf170
   19e24:	mov	r2, r1
   19e28:	mov	r1, r0
   19e2c:	mov	r0, #0
   19e30:	movt	r3, #2
   19e34:	b	196ac <__assert_fail@plt+0x7fdc>
   19e38:	movw	r3, #61808	; 0xf170
   19e3c:	mvn	r2, #0
   19e40:	movt	r3, #2
   19e44:	b	196ac <__assert_fail@plt+0x7fdc>
   19e48:	movw	r3, #61808	; 0xf170
   19e4c:	mov	r1, r0
   19e50:	mov	r0, #0
   19e54:	mvn	r2, #0
   19e58:	movt	r3, #2
   19e5c:	b	196ac <__assert_fail@plt+0x7fdc>
   19e60:	push	{r4, r5, r6, sl, fp, lr}
   19e64:	add	fp, sp, #16
   19e68:	mov	r4, r1
   19e6c:	mov	r5, r0
   19e70:	mov	r0, r2
   19e74:	mov	r1, r3
   19e78:	bl	1b894 <__assert_fail@plt+0xa1c4>
   19e7c:	cmp	r0, #0
   19e80:	beq	19eac <__assert_fail@plt+0x87dc>
   19e84:	movw	r2, #56184	; 0xdb78
   19e88:	mov	r6, r0
   19e8c:	mov	r0, r5
   19e90:	mov	r1, r4
   19e94:	movt	r2, #1
   19e98:	mov	r3, r6
   19e9c:	bl	114c0 <error@plt>
   19ea0:	mov	r0, r6
   19ea4:	pop	{r4, r5, r6, sl, fp, lr}
   19ea8:	b	1c018 <__assert_fail@plt+0xa948>
   19eac:	bl	11598 <__errno_location@plt>
   19eb0:	movw	r1, #58552	; 0xe4b8
   19eb4:	ldr	r4, [r0]
   19eb8:	mov	r0, #0
   19ebc:	mov	r2, #5
   19ec0:	movt	r1, #1
   19ec4:	bl	11424 <dcgettext@plt>
   19ec8:	mov	r2, r0
   19ecc:	mov	r0, #0
   19ed0:	mov	r1, r4
   19ed4:	bl	114c0 <error@plt>
   19ed8:	bl	116a0 <abort@plt>
   19edc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ee0:	add	fp, sp, #24
   19ee4:	sub	sp, sp, #8
   19ee8:	mov	r5, r1
   19eec:	mov	r6, r0
   19ef0:	ldr	r0, [fp, #8]
   19ef4:	ldr	r1, [fp, #12]
   19ef8:	mov	r8, r3
   19efc:	mov	r7, r2
   19f00:	bl	1b894 <__assert_fail@plt+0xa1c4>
   19f04:	cmp	r0, #0
   19f08:	beq	19f70 <__assert_fail@plt+0x88a0>
   19f0c:	mov	r4, r0
   19f10:	cmp	r7, #0
   19f14:	beq	19f48 <__assert_fail@plt+0x8878>
   19f18:	movw	r0, #56184	; 0xdb78
   19f1c:	mov	r1, r5
   19f20:	mov	r2, r7
   19f24:	mov	r3, r8
   19f28:	movt	r0, #1
   19f2c:	stm	sp, {r0, r4}
   19f30:	mov	r0, r6
   19f34:	bl	114f0 <error_at_line@plt>
   19f38:	mov	r0, r4
   19f3c:	sub	sp, fp, #24
   19f40:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19f44:	b	1c018 <__assert_fail@plt+0xa948>
   19f48:	movw	r2, #56184	; 0xdb78
   19f4c:	mov	r0, r6
   19f50:	mov	r1, r5
   19f54:	mov	r3, r4
   19f58:	movt	r2, #1
   19f5c:	bl	114c0 <error@plt>
   19f60:	mov	r0, r4
   19f64:	sub	sp, fp, #24
   19f68:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19f6c:	b	1c018 <__assert_fail@plt+0xa948>
   19f70:	bl	11598 <__errno_location@plt>
   19f74:	movw	r1, #58552	; 0xe4b8
   19f78:	ldr	r4, [r0]
   19f7c:	mov	r0, #0
   19f80:	mov	r2, #5
   19f84:	movt	r1, #1
   19f88:	bl	11424 <dcgettext@plt>
   19f8c:	mov	r2, r0
   19f90:	mov	r0, #0
   19f94:	mov	r1, r4
   19f98:	bl	114c0 <error@plt>
   19f9c:	bl	116a0 <abort@plt>
   19fa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19fa4:	add	fp, sp, #24
   19fa8:	sub	sp, sp, #32
   19fac:	ldr	r6, [fp, #12]
   19fb0:	ldr	r7, [fp, #8]
   19fb4:	mov	r4, r2
   19fb8:	mov	r8, r0
   19fbc:	cmp	r1, #0
   19fc0:	beq	19fe8 <__assert_fail@plt+0x8918>
   19fc4:	movw	r2, #58584	; 0xe4d8
   19fc8:	mov	r5, r1
   19fcc:	str	r3, [sp, #4]
   19fd0:	str	r4, [sp]
   19fd4:	mov	r0, r8
   19fd8:	mov	r1, #1
   19fdc:	movt	r2, #1
   19fe0:	mov	r3, r5
   19fe4:	b	1a000 <__assert_fail@plt+0x8930>
   19fe8:	movw	r2, #58596	; 0xe4e4
   19fec:	str	r3, [sp]
   19ff0:	mov	r0, r8
   19ff4:	mov	r1, #1
   19ff8:	mov	r3, r4
   19ffc:	movt	r2, #1
   1a000:	bl	115f8 <__fprintf_chk@plt>
   1a004:	movw	r1, #58603	; 0xe4eb
   1a008:	mov	r0, #0
   1a00c:	mov	r2, #5
   1a010:	movt	r1, #1
   1a014:	bl	11424 <dcgettext@plt>
   1a018:	movw	r2, #59321	; 0xe7b9
   1a01c:	mov	r3, r0
   1a020:	movw	r0, #2022	; 0x7e6
   1a024:	mov	r1, #1
   1a028:	movt	r2, #1
   1a02c:	str	r0, [sp]
   1a030:	mov	r0, r8
   1a034:	bl	115f8 <__fprintf_chk@plt>
   1a038:	movw	r4, #52908	; 0xceac
   1a03c:	mov	r1, r8
   1a040:	movt	r4, #1
   1a044:	mov	r0, r4
   1a048:	bl	11364 <fputs_unlocked@plt>
   1a04c:	movw	r1, #58607	; 0xe4ef
   1a050:	mov	r0, #0
   1a054:	mov	r2, #5
   1a058:	movt	r1, #1
   1a05c:	bl	11424 <dcgettext@plt>
   1a060:	movw	r3, #58778	; 0xe59a
   1a064:	mov	r2, r0
   1a068:	mov	r0, r8
   1a06c:	mov	r1, #1
   1a070:	movt	r3, #1
   1a074:	bl	115f8 <__fprintf_chk@plt>
   1a078:	mov	r0, r4
   1a07c:	mov	r1, r8
   1a080:	bl	11364 <fputs_unlocked@plt>
   1a084:	cmp	r6, #9
   1a088:	bhi	1a0c4 <__assert_fail@plt+0x89f4>
   1a08c:	add	r0, pc, #0
   1a090:	ldr	pc, [r0, r6, lsl #2]
   1a094:	strheq	sl, [r1], -ip
   1a098:	ldrdeq	sl, [r1], -r0
   1a09c:	andeq	sl, r1, r0, lsl #2
   1a0a0:	andeq	sl, r1, r8, lsr #2
   1a0a4:	andeq	sl, r1, r0, asr r1
   1a0a8:	andeq	sl, r1, r8, ror r1
   1a0ac:	andeq	sl, r1, r0, lsr #3
   1a0b0:	ldrdeq	sl, [r1], -r8
   1a0b4:	andeq	sl, r1, r0, lsl #5
   1a0b8:	andeq	sl, r1, r8, lsr #4
   1a0bc:	sub	sp, fp, #24
   1a0c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a0c4:	movw	r1, #59131	; 0xe6fb
   1a0c8:	movt	r1, #1
   1a0cc:	b	1a230 <__assert_fail@plt+0x8b60>
   1a0d0:	movw	r1, #58812	; 0xe5bc
   1a0d4:	mov	r0, #0
   1a0d8:	mov	r2, #5
   1a0dc:	movt	r1, #1
   1a0e0:	bl	11424 <dcgettext@plt>
   1a0e4:	ldr	r3, [r7]
   1a0e8:	mov	r2, r0
   1a0ec:	mov	r0, r8
   1a0f0:	mov	r1, #1
   1a0f4:	sub	sp, fp, #24
   1a0f8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a0fc:	b	115f8 <__fprintf_chk@plt>
   1a100:	movw	r1, #58828	; 0xe5cc
   1a104:	mov	r0, #0
   1a108:	mov	r2, #5
   1a10c:	movt	r1, #1
   1a110:	bl	11424 <dcgettext@plt>
   1a114:	mov	r2, r0
   1a118:	ldr	r3, [r7]
   1a11c:	ldr	r0, [r7, #4]
   1a120:	str	r0, [sp]
   1a124:	b	1a214 <__assert_fail@plt+0x8b44>
   1a128:	movw	r1, #58851	; 0xe5e3
   1a12c:	mov	r0, #0
   1a130:	mov	r2, #5
   1a134:	movt	r1, #1
   1a138:	bl	11424 <dcgettext@plt>
   1a13c:	mov	r2, r0
   1a140:	ldr	r3, [r7]
   1a144:	ldmib	r7, {r0, r1}
   1a148:	stm	sp, {r0, r1}
   1a14c:	b	1a214 <__assert_fail@plt+0x8b44>
   1a150:	movw	r1, #58879	; 0xe5ff
   1a154:	mov	r0, #0
   1a158:	mov	r2, #5
   1a15c:	movt	r1, #1
   1a160:	bl	11424 <dcgettext@plt>
   1a164:	ldr	r3, [r7]
   1a168:	mov	r2, r0
   1a16c:	ldmib	r7, {r0, r1, r7}
   1a170:	stm	sp, {r0, r1, r7}
   1a174:	b	1a214 <__assert_fail@plt+0x8b44>
   1a178:	movw	r1, #58911	; 0xe61f
   1a17c:	mov	r0, #0
   1a180:	mov	r2, #5
   1a184:	movt	r1, #1
   1a188:	bl	11424 <dcgettext@plt>
   1a18c:	ldr	r3, [r7]
   1a190:	mov	r2, r0
   1a194:	ldmib	r7, {r0, r1, r6, r7}
   1a198:	stm	sp, {r0, r1, r6, r7}
   1a19c:	b	1a214 <__assert_fail@plt+0x8b44>
   1a1a0:	movw	r1, #58947	; 0xe643
   1a1a4:	mov	r0, #0
   1a1a8:	mov	r2, #5
   1a1ac:	movt	r1, #1
   1a1b0:	bl	11424 <dcgettext@plt>
   1a1b4:	mov	r2, r0
   1a1b8:	ldr	r3, [r7]
   1a1bc:	ldmib	r7, {r0, r1, r6}
   1a1c0:	ldr	r5, [r7, #16]
   1a1c4:	ldr	r7, [r7, #20]
   1a1c8:	stm	sp, {r0, r1, r6}
   1a1cc:	str	r5, [sp, #12]
   1a1d0:	str	r7, [sp, #16]
   1a1d4:	b	1a214 <__assert_fail@plt+0x8b44>
   1a1d8:	movw	r1, #58987	; 0xe66b
   1a1dc:	mov	r0, #0
   1a1e0:	mov	r2, #5
   1a1e4:	movt	r1, #1
   1a1e8:	bl	11424 <dcgettext@plt>
   1a1ec:	mov	r2, r0
   1a1f0:	ldr	r3, [r7]
   1a1f4:	ldmib	r7, {r0, r1, r6}
   1a1f8:	ldr	r5, [r7, #16]
   1a1fc:	ldr	r4, [r7, #20]
   1a200:	ldr	r7, [r7, #24]
   1a204:	stm	sp, {r0, r1, r6}
   1a208:	str	r5, [sp, #12]
   1a20c:	str	r4, [sp, #16]
   1a210:	str	r7, [sp, #20]
   1a214:	mov	r0, r8
   1a218:	mov	r1, #1
   1a21c:	bl	115f8 <__fprintf_chk@plt>
   1a220:	sub	sp, fp, #24
   1a224:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a228:	movw	r1, #59079	; 0xe6c7
   1a22c:	movt	r1, #1
   1a230:	mov	r0, #0
   1a234:	mov	r2, #5
   1a238:	bl	11424 <dcgettext@plt>
   1a23c:	mov	ip, r0
   1a240:	ldr	r3, [r7]
   1a244:	ldr	r0, [r7, #4]
   1a248:	ldr	r1, [r7, #8]
   1a24c:	ldr	r6, [r7, #12]
   1a250:	ldr	r5, [r7, #16]
   1a254:	ldr	r4, [r7, #20]
   1a258:	ldr	r2, [r7, #24]
   1a25c:	ldr	lr, [r7, #28]
   1a260:	ldr	r7, [r7, #32]
   1a264:	stm	sp, {r0, r1, r6}
   1a268:	str	r5, [sp, #12]
   1a26c:	str	r4, [sp, #16]
   1a270:	str	r2, [sp, #20]
   1a274:	str	lr, [sp, #24]
   1a278:	str	r7, [sp, #28]
   1a27c:	b	1a2c4 <__assert_fail@plt+0x8bf4>
   1a280:	movw	r1, #59031	; 0xe697
   1a284:	mov	r0, #0
   1a288:	mov	r2, #5
   1a28c:	movt	r1, #1
   1a290:	bl	11424 <dcgettext@plt>
   1a294:	mov	ip, r0
   1a298:	ldr	r3, [r7]
   1a29c:	ldmib	r7, {r0, r1, r6}
   1a2a0:	ldr	r5, [r7, #16]
   1a2a4:	ldr	r4, [r7, #20]
   1a2a8:	ldr	r2, [r7, #24]
   1a2ac:	ldr	r7, [r7, #28]
   1a2b0:	stm	sp, {r0, r1, r6}
   1a2b4:	str	r5, [sp, #12]
   1a2b8:	str	r4, [sp, #16]
   1a2bc:	str	r2, [sp, #20]
   1a2c0:	str	r7, [sp, #24]
   1a2c4:	mov	r0, r8
   1a2c8:	mov	r1, #1
   1a2cc:	mov	r2, ip
   1a2d0:	bl	115f8 <__fprintf_chk@plt>
   1a2d4:	sub	sp, fp, #24
   1a2d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a2dc:	push	{r4, sl, fp, lr}
   1a2e0:	add	fp, sp, #8
   1a2e4:	sub	sp, sp, #8
   1a2e8:	ldr	ip, [fp, #8]
   1a2ec:	mov	lr, #0
   1a2f0:	ldr	r4, [ip, lr, lsl #2]
   1a2f4:	add	lr, lr, #1
   1a2f8:	cmp	r4, #0
   1a2fc:	bne	1a2f0 <__assert_fail@plt+0x8c20>
   1a300:	sub	r4, lr, #1
   1a304:	str	ip, [sp]
   1a308:	str	r4, [sp, #4]
   1a30c:	bl	19fa0 <__assert_fail@plt+0x88d0>
   1a310:	sub	sp, fp, #8
   1a314:	pop	{r4, sl, fp, pc}
   1a318:	push	{fp, lr}
   1a31c:	mov	fp, sp
   1a320:	sub	sp, sp, #48	; 0x30
   1a324:	ldr	ip, [fp, #8]
   1a328:	ldr	lr, [ip]
   1a32c:	cmp	lr, #0
   1a330:	str	lr, [sp, #8]
   1a334:	beq	1a3d0 <__assert_fail@plt+0x8d00>
   1a338:	ldr	lr, [ip, #4]
   1a33c:	cmp	lr, #0
   1a340:	str	lr, [sp, #12]
   1a344:	beq	1a3d8 <__assert_fail@plt+0x8d08>
   1a348:	ldr	lr, [ip, #8]
   1a34c:	cmp	lr, #0
   1a350:	str	lr, [sp, #16]
   1a354:	beq	1a3e0 <__assert_fail@plt+0x8d10>
   1a358:	ldr	lr, [ip, #12]
   1a35c:	cmp	lr, #0
   1a360:	str	lr, [sp, #20]
   1a364:	beq	1a3e8 <__assert_fail@plt+0x8d18>
   1a368:	ldr	lr, [ip, #16]
   1a36c:	cmp	lr, #0
   1a370:	str	lr, [sp, #24]
   1a374:	beq	1a3f0 <__assert_fail@plt+0x8d20>
   1a378:	ldr	lr, [ip, #20]
   1a37c:	cmp	lr, #0
   1a380:	str	lr, [sp, #28]
   1a384:	beq	1a3f8 <__assert_fail@plt+0x8d28>
   1a388:	ldr	lr, [ip, #24]
   1a38c:	cmp	lr, #0
   1a390:	str	lr, [sp, #32]
   1a394:	beq	1a400 <__assert_fail@plt+0x8d30>
   1a398:	ldr	lr, [ip, #28]
   1a39c:	cmp	lr, #0
   1a3a0:	str	lr, [sp, #36]	; 0x24
   1a3a4:	beq	1a408 <__assert_fail@plt+0x8d38>
   1a3a8:	ldr	lr, [ip, #32]
   1a3ac:	cmp	lr, #0
   1a3b0:	str	lr, [sp, #40]	; 0x28
   1a3b4:	beq	1a410 <__assert_fail@plt+0x8d40>
   1a3b8:	ldr	lr, [ip, #36]	; 0x24
   1a3bc:	mov	ip, #10
   1a3c0:	cmp	lr, #0
   1a3c4:	str	lr, [sp, #44]	; 0x2c
   1a3c8:	movweq	ip, #9
   1a3cc:	b	1a414 <__assert_fail@plt+0x8d44>
   1a3d0:	mov	ip, #0
   1a3d4:	b	1a414 <__assert_fail@plt+0x8d44>
   1a3d8:	mov	ip, #1
   1a3dc:	b	1a414 <__assert_fail@plt+0x8d44>
   1a3e0:	mov	ip, #2
   1a3e4:	b	1a414 <__assert_fail@plt+0x8d44>
   1a3e8:	mov	ip, #3
   1a3ec:	b	1a414 <__assert_fail@plt+0x8d44>
   1a3f0:	mov	ip, #4
   1a3f4:	b	1a414 <__assert_fail@plt+0x8d44>
   1a3f8:	mov	ip, #5
   1a3fc:	b	1a414 <__assert_fail@plt+0x8d44>
   1a400:	mov	ip, #6
   1a404:	b	1a414 <__assert_fail@plt+0x8d44>
   1a408:	mov	ip, #7
   1a40c:	b	1a414 <__assert_fail@plt+0x8d44>
   1a410:	mov	ip, #8
   1a414:	add	lr, sp, #8
   1a418:	str	ip, [sp, #4]
   1a41c:	str	lr, [sp]
   1a420:	bl	19fa0 <__assert_fail@plt+0x88d0>
   1a424:	mov	sp, fp
   1a428:	pop	{fp, pc}
   1a42c:	push	{fp, lr}
   1a430:	mov	fp, sp
   1a434:	sub	sp, sp, #56	; 0x38
   1a438:	add	ip, fp, #8
   1a43c:	str	ip, [sp, #12]
   1a440:	ldr	lr, [fp, #8]
   1a444:	cmp	lr, #0
   1a448:	str	lr, [sp, #16]
   1a44c:	beq	1a4e8 <__assert_fail@plt+0x8e18>
   1a450:	ldr	lr, [ip, #4]
   1a454:	cmp	lr, #0
   1a458:	str	lr, [sp, #20]
   1a45c:	beq	1a4f0 <__assert_fail@plt+0x8e20>
   1a460:	ldr	lr, [ip, #8]
   1a464:	cmp	lr, #0
   1a468:	str	lr, [sp, #24]
   1a46c:	beq	1a4f8 <__assert_fail@plt+0x8e28>
   1a470:	ldr	lr, [ip, #12]
   1a474:	cmp	lr, #0
   1a478:	str	lr, [sp, #28]
   1a47c:	beq	1a500 <__assert_fail@plt+0x8e30>
   1a480:	ldr	lr, [ip, #16]
   1a484:	cmp	lr, #0
   1a488:	str	lr, [sp, #32]
   1a48c:	beq	1a508 <__assert_fail@plt+0x8e38>
   1a490:	ldr	lr, [ip, #20]
   1a494:	cmp	lr, #0
   1a498:	str	lr, [sp, #36]	; 0x24
   1a49c:	beq	1a510 <__assert_fail@plt+0x8e40>
   1a4a0:	ldr	lr, [ip, #24]
   1a4a4:	cmp	lr, #0
   1a4a8:	str	lr, [sp, #40]	; 0x28
   1a4ac:	beq	1a518 <__assert_fail@plt+0x8e48>
   1a4b0:	ldr	lr, [ip, #28]
   1a4b4:	cmp	lr, #0
   1a4b8:	str	lr, [sp, #44]	; 0x2c
   1a4bc:	beq	1a520 <__assert_fail@plt+0x8e50>
   1a4c0:	ldr	lr, [ip, #32]
   1a4c4:	cmp	lr, #0
   1a4c8:	str	lr, [sp, #48]	; 0x30
   1a4cc:	beq	1a528 <__assert_fail@plt+0x8e58>
   1a4d0:	ldr	lr, [ip, #36]	; 0x24
   1a4d4:	mov	ip, #10
   1a4d8:	cmp	lr, #0
   1a4dc:	str	lr, [sp, #52]	; 0x34
   1a4e0:	movweq	ip, #9
   1a4e4:	b	1a52c <__assert_fail@plt+0x8e5c>
   1a4e8:	mov	ip, #0
   1a4ec:	b	1a52c <__assert_fail@plt+0x8e5c>
   1a4f0:	mov	ip, #1
   1a4f4:	b	1a52c <__assert_fail@plt+0x8e5c>
   1a4f8:	mov	ip, #2
   1a4fc:	b	1a52c <__assert_fail@plt+0x8e5c>
   1a500:	mov	ip, #3
   1a504:	b	1a52c <__assert_fail@plt+0x8e5c>
   1a508:	mov	ip, #4
   1a50c:	b	1a52c <__assert_fail@plt+0x8e5c>
   1a510:	mov	ip, #5
   1a514:	b	1a52c <__assert_fail@plt+0x8e5c>
   1a518:	mov	ip, #6
   1a51c:	b	1a52c <__assert_fail@plt+0x8e5c>
   1a520:	mov	ip, #7
   1a524:	b	1a52c <__assert_fail@plt+0x8e5c>
   1a528:	mov	ip, #8
   1a52c:	add	lr, sp, #16
   1a530:	str	ip, [sp, #4]
   1a534:	str	lr, [sp]
   1a538:	bl	19fa0 <__assert_fail@plt+0x88d0>
   1a53c:	mov	sp, fp
   1a540:	pop	{fp, pc}
   1a544:	push	{fp, lr}
   1a548:	mov	fp, sp
   1a54c:	movw	r0, #61908	; 0xf1d4
   1a550:	movt	r0, #2
   1a554:	ldr	r1, [r0]
   1a558:	movw	r0, #52908	; 0xceac
   1a55c:	movt	r0, #1
   1a560:	bl	11364 <fputs_unlocked@plt>
   1a564:	movw	r1, #59191	; 0xe737
   1a568:	mov	r0, #0
   1a56c:	mov	r2, #5
   1a570:	movt	r1, #1
   1a574:	bl	11424 <dcgettext@plt>
   1a578:	movw	r2, #59211	; 0xe74b
   1a57c:	mov	r1, r0
   1a580:	mov	r0, #1
   1a584:	movt	r2, #1
   1a588:	bl	115d4 <__printf_chk@plt>
   1a58c:	movw	r1, #59233	; 0xe761
   1a590:	mov	r0, #0
   1a594:	mov	r2, #5
   1a598:	movt	r1, #1
   1a59c:	bl	11424 <dcgettext@plt>
   1a5a0:	movw	r2, #55153	; 0xd771
   1a5a4:	movw	r3, #55167	; 0xd77f
   1a5a8:	mov	r1, r0
   1a5ac:	mov	r0, #1
   1a5b0:	movt	r2, #1
   1a5b4:	movt	r3, #1
   1a5b8:	bl	115d4 <__printf_chk@plt>
   1a5bc:	movw	r1, #59253	; 0xe775
   1a5c0:	mov	r0, #0
   1a5c4:	mov	r2, #5
   1a5c8:	movt	r1, #1
   1a5cc:	bl	11424 <dcgettext@plt>
   1a5d0:	movw	r2, #59292	; 0xe79c
   1a5d4:	mov	r1, r0
   1a5d8:	mov	r0, #1
   1a5dc:	movt	r2, #1
   1a5e0:	pop	{fp, lr}
   1a5e4:	b	115d4 <__printf_chk@plt>
   1a5e8:	push	{r4, r5, r6, sl, fp, lr}
   1a5ec:	add	fp, sp, #16
   1a5f0:	mov	r4, r2
   1a5f4:	mov	r5, r1
   1a5f8:	mov	r6, r0
   1a5fc:	bl	1c0dc <__assert_fail@plt+0xaa0c>
   1a600:	cmp	r0, #0
   1a604:	popne	{r4, r5, r6, sl, fp, pc}
   1a608:	cmp	r6, #0
   1a60c:	beq	1a620 <__assert_fail@plt+0x8f50>
   1a610:	cmp	r5, #0
   1a614:	cmpne	r4, #0
   1a618:	bne	1a620 <__assert_fail@plt+0x8f50>
   1a61c:	pop	{r4, r5, r6, sl, fp, pc}
   1a620:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a624:	push	{r4, r5, r6, sl, fp, lr}
   1a628:	add	fp, sp, #16
   1a62c:	mov	r4, r2
   1a630:	mov	r5, r1
   1a634:	mov	r6, r0
   1a638:	bl	1c0dc <__assert_fail@plt+0xaa0c>
   1a63c:	cmp	r0, #0
   1a640:	popne	{r4, r5, r6, sl, fp, pc}
   1a644:	cmp	r6, #0
   1a648:	beq	1a65c <__assert_fail@plt+0x8f8c>
   1a64c:	cmp	r5, #0
   1a650:	cmpne	r4, #0
   1a654:	bne	1a65c <__assert_fail@plt+0x8f8c>
   1a658:	pop	{r4, r5, r6, sl, fp, pc}
   1a65c:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a660:	push	{fp, lr}
   1a664:	mov	fp, sp
   1a668:	bl	1ba54 <__assert_fail@plt+0xa384>
   1a66c:	cmp	r0, #0
   1a670:	popne	{fp, pc}
   1a674:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a678:	push	{fp, lr}
   1a67c:	mov	fp, sp
   1a680:	bl	1ba54 <__assert_fail@plt+0xa384>
   1a684:	cmp	r0, #0
   1a688:	popne	{fp, pc}
   1a68c:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a690:	push	{fp, lr}
   1a694:	mov	fp, sp
   1a698:	bl	1ba54 <__assert_fail@plt+0xa384>
   1a69c:	cmp	r0, #0
   1a6a0:	popne	{fp, pc}
   1a6a4:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a6a8:	push	{r4, r5, fp, lr}
   1a6ac:	add	fp, sp, #8
   1a6b0:	mov	r4, r1
   1a6b4:	mov	r5, r0
   1a6b8:	bl	1ba84 <__assert_fail@plt+0xa3b4>
   1a6bc:	cmp	r0, #0
   1a6c0:	popne	{r4, r5, fp, pc}
   1a6c4:	cmp	r5, #0
   1a6c8:	beq	1a6d8 <__assert_fail@plt+0x9008>
   1a6cc:	cmp	r4, #0
   1a6d0:	bne	1a6d8 <__assert_fail@plt+0x9008>
   1a6d4:	pop	{r4, r5, fp, pc}
   1a6d8:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a6dc:	push	{fp, lr}
   1a6e0:	mov	fp, sp
   1a6e4:	cmp	r1, #0
   1a6e8:	orreq	r1, r1, #1
   1a6ec:	bl	1ba84 <__assert_fail@plt+0xa3b4>
   1a6f0:	cmp	r0, #0
   1a6f4:	popne	{fp, pc}
   1a6f8:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a6fc:	push	{fp, lr}
   1a700:	mov	fp, sp
   1a704:	clz	r3, r2
   1a708:	lsr	ip, r3, #5
   1a70c:	clz	r3, r1
   1a710:	lsr	r3, r3, #5
   1a714:	orrs	r3, r3, ip
   1a718:	movwne	r1, #1
   1a71c:	movwne	r2, #1
   1a720:	bl	1c0dc <__assert_fail@plt+0xaa0c>
   1a724:	cmp	r0, #0
   1a728:	popne	{fp, pc}
   1a72c:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a730:	push	{fp, lr}
   1a734:	mov	fp, sp
   1a738:	mov	r2, r1
   1a73c:	mov	r1, r0
   1a740:	mov	r0, #0
   1a744:	bl	1c0dc <__assert_fail@plt+0xaa0c>
   1a748:	cmp	r0, #0
   1a74c:	popne	{fp, pc}
   1a750:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a754:	push	{fp, lr}
   1a758:	mov	fp, sp
   1a75c:	mov	r2, r1
   1a760:	mov	r1, r0
   1a764:	clz	r0, r2
   1a768:	clz	r3, r1
   1a76c:	lsr	r0, r0, #5
   1a770:	lsr	r3, r3, #5
   1a774:	orrs	r0, r3, r0
   1a778:	mov	r0, #0
   1a77c:	movwne	r1, #1
   1a780:	movwne	r2, #1
   1a784:	bl	1c0dc <__assert_fail@plt+0xaa0c>
   1a788:	cmp	r0, #0
   1a78c:	popne	{fp, pc}
   1a790:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a794:	push	{r4, r5, r6, sl, fp, lr}
   1a798:	add	fp, sp, #16
   1a79c:	ldr	r5, [r1]
   1a7a0:	mov	r4, r1
   1a7a4:	mov	r6, r0
   1a7a8:	cmp	r0, #0
   1a7ac:	beq	1a7c4 <__assert_fail@plt+0x90f4>
   1a7b0:	mov	r0, #1
   1a7b4:	add	r0, r0, r5, lsr #1
   1a7b8:	adds	r5, r5, r0
   1a7bc:	bcc	1a7cc <__assert_fail@plt+0x90fc>
   1a7c0:	b	1a808 <__assert_fail@plt+0x9138>
   1a7c4:	cmp	r5, #0
   1a7c8:	movweq	r5, #64	; 0x40
   1a7cc:	mov	r0, r6
   1a7d0:	mov	r1, r5
   1a7d4:	mov	r2, #1
   1a7d8:	bl	1c0dc <__assert_fail@plt+0xaa0c>
   1a7dc:	cmp	r5, #0
   1a7e0:	mov	r1, r5
   1a7e4:	movwne	r1, #1
   1a7e8:	cmp	r0, #0
   1a7ec:	bne	1a800 <__assert_fail@plt+0x9130>
   1a7f0:	clz	r2, r6
   1a7f4:	lsr	r2, r2, #5
   1a7f8:	orrs	r1, r2, r1
   1a7fc:	bne	1a808 <__assert_fail@plt+0x9138>
   1a800:	str	r5, [r4]
   1a804:	pop	{r4, r5, r6, sl, fp, pc}
   1a808:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a80c:	push	{r4, r5, r6, r7, fp, lr}
   1a810:	add	fp, sp, #16
   1a814:	ldr	r5, [r1]
   1a818:	mov	r6, r2
   1a81c:	mov	r4, r1
   1a820:	mov	r7, r0
   1a824:	cmp	r0, #0
   1a828:	beq	1a840 <__assert_fail@plt+0x9170>
   1a82c:	mov	r0, #1
   1a830:	add	r0, r0, r5, lsr #1
   1a834:	adds	r5, r5, r0
   1a838:	bcc	1a858 <__assert_fail@plt+0x9188>
   1a83c:	b	1a88c <__assert_fail@plt+0x91bc>
   1a840:	cmp	r5, #0
   1a844:	bne	1a858 <__assert_fail@plt+0x9188>
   1a848:	mov	r0, #64	; 0x40
   1a84c:	cmp	r6, #64	; 0x40
   1a850:	udiv	r5, r0, r6
   1a854:	addhi	r5, r5, #1
   1a858:	mov	r0, r7
   1a85c:	mov	r1, r5
   1a860:	mov	r2, r6
   1a864:	bl	1c0dc <__assert_fail@plt+0xaa0c>
   1a868:	cmp	r0, #0
   1a86c:	bne	1a884 <__assert_fail@plt+0x91b4>
   1a870:	cmp	r7, #0
   1a874:	beq	1a88c <__assert_fail@plt+0x91bc>
   1a878:	cmp	r6, #0
   1a87c:	cmpne	r5, #0
   1a880:	bne	1a88c <__assert_fail@plt+0x91bc>
   1a884:	str	r5, [r4]
   1a888:	pop	{r4, r5, r6, r7, fp, pc}
   1a88c:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1a890:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a894:	add	fp, sp, #24
   1a898:	mov	r8, r1
   1a89c:	ldr	r1, [r1]
   1a8a0:	mov	r5, r0
   1a8a4:	add	r0, r1, r1, asr #1
   1a8a8:	cmp	r0, r1
   1a8ac:	mvnvs	r0, #-2147483648	; 0x80000000
   1a8b0:	cmp	r0, r3
   1a8b4:	mov	r7, r0
   1a8b8:	movgt	r7, r3
   1a8bc:	cmn	r3, #1
   1a8c0:	movle	r7, r0
   1a8c4:	ldr	r0, [fp, #8]
   1a8c8:	cmn	r0, #1
   1a8cc:	ble	1a8f4 <__assert_fail@plt+0x9224>
   1a8d0:	cmp	r0, #0
   1a8d4:	beq	1a948 <__assert_fail@plt+0x9278>
   1a8d8:	cmn	r7, #1
   1a8dc:	ble	1a91c <__assert_fail@plt+0x924c>
   1a8e0:	mvn	r4, #-2147483648	; 0x80000000
   1a8e4:	udiv	r6, r4, r0
   1a8e8:	cmp	r6, r7
   1a8ec:	bge	1a948 <__assert_fail@plt+0x9278>
   1a8f0:	b	1a958 <__assert_fail@plt+0x9288>
   1a8f4:	cmn	r7, #1
   1a8f8:	ble	1a938 <__assert_fail@plt+0x9268>
   1a8fc:	cmn	r0, #1
   1a900:	beq	1a948 <__assert_fail@plt+0x9278>
   1a904:	mov	r6, #-2147483648	; 0x80000000
   1a908:	mvn	r4, #-2147483648	; 0x80000000
   1a90c:	sdiv	r6, r6, r0
   1a910:	cmp	r6, r7
   1a914:	bge	1a948 <__assert_fail@plt+0x9278>
   1a918:	b	1a958 <__assert_fail@plt+0x9288>
   1a91c:	beq	1a948 <__assert_fail@plt+0x9278>
   1a920:	mov	r6, #-2147483648	; 0x80000000
   1a924:	mvn	r4, #-2147483648	; 0x80000000
   1a928:	sdiv	r6, r6, r7
   1a92c:	cmp	r6, r0
   1a930:	bge	1a948 <__assert_fail@plt+0x9278>
   1a934:	b	1a958 <__assert_fail@plt+0x9288>
   1a938:	mvn	r4, #-2147483648	; 0x80000000
   1a93c:	sdiv	r6, r4, r0
   1a940:	cmp	r7, r6
   1a944:	blt	1a958 <__assert_fail@plt+0x9288>
   1a948:	mul	r6, r7, r0
   1a94c:	mov	r4, #64	; 0x40
   1a950:	cmp	r6, #63	; 0x3f
   1a954:	bgt	1a960 <__assert_fail@plt+0x9290>
   1a958:	sdiv	r7, r4, r0
   1a95c:	mul	r6, r7, r0
   1a960:	cmp	r5, #0
   1a964:	moveq	r4, #0
   1a968:	streq	r4, [r8]
   1a96c:	sub	r4, r7, r1
   1a970:	cmp	r4, r2
   1a974:	bge	1aa20 <__assert_fail@plt+0x9350>
   1a978:	add	r7, r1, r2
   1a97c:	mov	r6, #0
   1a980:	mov	r2, #0
   1a984:	cmp	r7, r3
   1a988:	movwgt	r6, #1
   1a98c:	cmn	r3, #1
   1a990:	movwgt	r2, #1
   1a994:	cmp	r7, r1
   1a998:	bvs	1aa54 <__assert_fail@plt+0x9384>
   1a99c:	ands	r1, r2, r6
   1a9a0:	bne	1aa54 <__assert_fail@plt+0x9384>
   1a9a4:	cmn	r0, #1
   1a9a8:	ble	1a9d0 <__assert_fail@plt+0x9300>
   1a9ac:	cmp	r0, #0
   1a9b0:	beq	1aa1c <__assert_fail@plt+0x934c>
   1a9b4:	cmn	r7, #1
   1a9b8:	ble	1a9f4 <__assert_fail@plt+0x9324>
   1a9bc:	mvn	r1, #-2147483648	; 0x80000000
   1a9c0:	udiv	r1, r1, r0
   1a9c4:	cmp	r1, r7
   1a9c8:	bge	1aa1c <__assert_fail@plt+0x934c>
   1a9cc:	b	1aa54 <__assert_fail@plt+0x9384>
   1a9d0:	cmn	r7, #1
   1a9d4:	ble	1aa0c <__assert_fail@plt+0x933c>
   1a9d8:	cmn	r0, #1
   1a9dc:	beq	1aa1c <__assert_fail@plt+0x934c>
   1a9e0:	mov	r1, #-2147483648	; 0x80000000
   1a9e4:	sdiv	r1, r1, r0
   1a9e8:	cmp	r1, r7
   1a9ec:	bge	1aa1c <__assert_fail@plt+0x934c>
   1a9f0:	b	1aa54 <__assert_fail@plt+0x9384>
   1a9f4:	beq	1aa1c <__assert_fail@plt+0x934c>
   1a9f8:	mov	r1, #-2147483648	; 0x80000000
   1a9fc:	sdiv	r1, r1, r7
   1aa00:	cmp	r1, r0
   1aa04:	bge	1aa1c <__assert_fail@plt+0x934c>
   1aa08:	b	1aa54 <__assert_fail@plt+0x9384>
   1aa0c:	mvn	r1, #-2147483648	; 0x80000000
   1aa10:	sdiv	r1, r1, r0
   1aa14:	cmp	r7, r1
   1aa18:	blt	1aa54 <__assert_fail@plt+0x9384>
   1aa1c:	mul	r6, r7, r0
   1aa20:	mov	r0, r5
   1aa24:	mov	r1, r6
   1aa28:	bl	1ba84 <__assert_fail@plt+0xa3b4>
   1aa2c:	cmp	r6, #0
   1aa30:	movwne	r6, #1
   1aa34:	cmp	r0, #0
   1aa38:	bne	1aa4c <__assert_fail@plt+0x937c>
   1aa3c:	clz	r1, r5
   1aa40:	lsr	r1, r1, #5
   1aa44:	orrs	r1, r1, r6
   1aa48:	bne	1aa54 <__assert_fail@plt+0x9384>
   1aa4c:	str	r7, [r8]
   1aa50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa54:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1aa58:	push	{fp, lr}
   1aa5c:	mov	fp, sp
   1aa60:	mov	r1, #1
   1aa64:	bl	1ba00 <__assert_fail@plt+0xa330>
   1aa68:	cmp	r0, #0
   1aa6c:	popne	{fp, pc}
   1aa70:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1aa74:	push	{fp, lr}
   1aa78:	mov	fp, sp
   1aa7c:	bl	1ba00 <__assert_fail@plt+0xa330>
   1aa80:	cmp	r0, #0
   1aa84:	popne	{fp, pc}
   1aa88:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1aa8c:	push	{fp, lr}
   1aa90:	mov	fp, sp
   1aa94:	mov	r1, #1
   1aa98:	bl	1ba00 <__assert_fail@plt+0xa330>
   1aa9c:	cmp	r0, #0
   1aaa0:	popne	{fp, pc}
   1aaa4:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1aaa8:	push	{fp, lr}
   1aaac:	mov	fp, sp
   1aab0:	bl	1ba00 <__assert_fail@plt+0xa330>
   1aab4:	cmp	r0, #0
   1aab8:	popne	{fp, pc}
   1aabc:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1aac0:	push	{r4, r5, fp, lr}
   1aac4:	add	fp, sp, #8
   1aac8:	mov	r5, r0
   1aacc:	mov	r0, r1
   1aad0:	mov	r4, r1
   1aad4:	bl	1ba54 <__assert_fail@plt+0xa384>
   1aad8:	cmp	r0, #0
   1aadc:	beq	1aaf0 <__assert_fail@plt+0x9420>
   1aae0:	mov	r1, r5
   1aae4:	mov	r2, r4
   1aae8:	pop	{r4, r5, fp, lr}
   1aaec:	b	113f4 <memcpy@plt>
   1aaf0:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1aaf4:	push	{r4, r5, fp, lr}
   1aaf8:	add	fp, sp, #8
   1aafc:	mov	r5, r0
   1ab00:	mov	r0, r1
   1ab04:	mov	r4, r1
   1ab08:	bl	1ba54 <__assert_fail@plt+0xa384>
   1ab0c:	cmp	r0, #0
   1ab10:	beq	1ab24 <__assert_fail@plt+0x9454>
   1ab14:	mov	r1, r5
   1ab18:	mov	r2, r4
   1ab1c:	pop	{r4, r5, fp, lr}
   1ab20:	b	113f4 <memcpy@plt>
   1ab24:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1ab28:	push	{r4, r5, fp, lr}
   1ab2c:	add	fp, sp, #8
   1ab30:	mov	r5, r0
   1ab34:	add	r0, r1, #1
   1ab38:	mov	r4, r1
   1ab3c:	bl	1ba54 <__assert_fail@plt+0xa384>
   1ab40:	cmp	r0, #0
   1ab44:	beq	1ab60 <__assert_fail@plt+0x9490>
   1ab48:	mov	r1, #0
   1ab4c:	mov	r2, r4
   1ab50:	strb	r1, [r0, r4]
   1ab54:	mov	r1, r5
   1ab58:	pop	{r4, r5, fp, lr}
   1ab5c:	b	113f4 <memcpy@plt>
   1ab60:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1ab64:	push	{r4, r5, fp, lr}
   1ab68:	add	fp, sp, #8
   1ab6c:	mov	r4, r0
   1ab70:	bl	11574 <strlen@plt>
   1ab74:	add	r5, r0, #1
   1ab78:	mov	r0, r5
   1ab7c:	bl	1ba54 <__assert_fail@plt+0xa384>
   1ab80:	cmp	r0, #0
   1ab84:	beq	1ab98 <__assert_fail@plt+0x94c8>
   1ab88:	mov	r1, r4
   1ab8c:	mov	r2, r5
   1ab90:	pop	{r4, r5, fp, lr}
   1ab94:	b	113f4 <memcpy@plt>
   1ab98:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1ab9c:	push	{fp, lr}
   1aba0:	mov	fp, sp
   1aba4:	movw	r0, #61804	; 0xf16c
   1aba8:	movw	r1, #59368	; 0xe7e8
   1abac:	mov	r2, #5
   1abb0:	movt	r0, #2
   1abb4:	movt	r1, #1
   1abb8:	ldr	r4, [r0]
   1abbc:	mov	r0, #0
   1abc0:	bl	11424 <dcgettext@plt>
   1abc4:	movw	r2, #56184	; 0xdb78
   1abc8:	mov	r3, r0
   1abcc:	mov	r0, r4
   1abd0:	mov	r1, #0
   1abd4:	movt	r2, #1
   1abd8:	bl	114c0 <error@plt>
   1abdc:	bl	116a0 <abort@plt>
   1abe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abe4:	add	fp, sp, #28
   1abe8:	sub	sp, sp, #44	; 0x2c
   1abec:	cmp	r2, #37	; 0x25
   1abf0:	bcs	1b874 <__assert_fail@plt+0xa1a4>
   1abf4:	ldr	sl, [fp, #8]
   1abf8:	mov	r6, r2
   1abfc:	mov	r7, r1
   1ac00:	mov	r4, r0
   1ac04:	str	r3, [sp, #36]	; 0x24
   1ac08:	bl	11598 <__errno_location@plt>
   1ac0c:	mov	r5, r0
   1ac10:	mov	r0, #0
   1ac14:	str	r0, [r5]
   1ac18:	bl	11550 <__ctype_b_loc@plt>
   1ac1c:	ldr	r1, [r0]
   1ac20:	mov	r2, r4
   1ac24:	ldrb	r0, [r2], #1
   1ac28:	add	r3, r1, r0, lsl #1
   1ac2c:	ldrb	r3, [r3, #1]
   1ac30:	tst	r3, #32
   1ac34:	bne	1ac24 <__assert_fail@plt+0x9554>
   1ac38:	cmp	r7, #0
   1ac3c:	sub	r9, fp, #32
   1ac40:	mov	r8, #4
   1ac44:	movne	r9, r7
   1ac48:	cmp	r0, #45	; 0x2d
   1ac4c:	beq	1b00c <__assert_fail@plt+0x993c>
   1ac50:	mov	r0, r4
   1ac54:	mov	r1, r9
   1ac58:	mov	r2, r6
   1ac5c:	mov	r3, #0
   1ac60:	bl	11400 <__strtoull_internal@plt>
   1ac64:	mov	r7, r1
   1ac68:	ldr	r1, [r9]
   1ac6c:	cmp	r1, r4
   1ac70:	beq	1aca8 <__assert_fail@plt+0x95d8>
   1ac74:	mov	r6, r0
   1ac78:	ldr	r0, [r5]
   1ac7c:	cmp	r0, #0
   1ac80:	beq	1afc4 <__assert_fail@plt+0x98f4>
   1ac84:	cmp	r0, #34	; 0x22
   1ac88:	bne	1b00c <__assert_fail@plt+0x993c>
   1ac8c:	mov	r8, #1
   1ac90:	cmp	sl, #0
   1ac94:	beq	1b860 <__assert_fail@plt+0xa190>
   1ac98:	ldrb	r4, [r1]
   1ac9c:	cmp	r4, #0
   1aca0:	bne	1acec <__assert_fail@plt+0x961c>
   1aca4:	b	1b860 <__assert_fail@plt+0xa190>
   1aca8:	cmp	sl, #0
   1acac:	beq	1b00c <__assert_fail@plt+0x993c>
   1acb0:	mov	r5, r1
   1acb4:	ldrb	r1, [r4]
   1acb8:	cmp	r1, #0
   1acbc:	beq	1b00c <__assert_fail@plt+0x993c>
   1acc0:	mov	r0, sl
   1acc4:	bl	11580 <strchr@plt>
   1acc8:	cmp	r0, #0
   1accc:	beq	1b00c <__assert_fail@plt+0x993c>
   1acd0:	mov	r1, r5
   1acd4:	mov	r8, #0
   1acd8:	mov	r6, #1
   1acdc:	mov	r7, #0
   1ace0:	ldrb	r4, [r1]
   1ace4:	cmp	r4, #0
   1ace8:	beq	1b860 <__assert_fail@plt+0xa190>
   1acec:	str	r1, [sp, #32]
   1acf0:	mov	r0, sl
   1acf4:	mov	r1, r4
   1acf8:	bl	11580 <strchr@plt>
   1acfc:	cmp	r0, #0
   1ad00:	beq	1b000 <__assert_fail@plt+0x9930>
   1ad04:	sub	r0, r4, #69	; 0x45
   1ad08:	mov	r1, #1
   1ad0c:	mov	r3, #0
   1ad10:	mov	r5, #1024	; 0x400
   1ad14:	cmp	r0, #47	; 0x2f
   1ad18:	str	r1, [sp, #28]
   1ad1c:	bhi	1ae20 <__assert_fail@plt+0x9750>
   1ad20:	add	r1, pc, #0
   1ad24:	ldr	pc, [r1, r0, lsl #2]
   1ad28:	andeq	sl, r1, r8, ror #27
   1ad2c:	andeq	sl, r1, r0, lsr #28
   1ad30:	andeq	sl, r1, r8, ror #27
   1ad34:	andeq	sl, r1, r0, lsr #28
   1ad38:	andeq	sl, r1, r0, lsr #28
   1ad3c:	andeq	sl, r1, r0, lsr #28
   1ad40:	andeq	sl, r1, r8, ror #27
   1ad44:	andeq	sl, r1, r0, lsr #28
   1ad48:	andeq	sl, r1, r8, ror #27
   1ad4c:	andeq	sl, r1, r0, lsr #28
   1ad50:	andeq	sl, r1, r0, lsr #28
   1ad54:	andeq	sl, r1, r8, ror #27
   1ad58:	andeq	sl, r1, r0, lsr #28
   1ad5c:	andeq	sl, r1, r0, lsr #28
   1ad60:	andeq	sl, r1, r0, lsr #28
   1ad64:	andeq	sl, r1, r8, ror #27
   1ad68:	andeq	sl, r1, r0, lsr #28
   1ad6c:	andeq	sl, r1, r0, lsr #28
   1ad70:	andeq	sl, r1, r0, lsr #28
   1ad74:	andeq	sl, r1, r0, lsr #28
   1ad78:	andeq	sl, r1, r8, ror #27
   1ad7c:	andeq	sl, r1, r8, ror #27
   1ad80:	andeq	sl, r1, r0, lsr #28
   1ad84:	andeq	sl, r1, r0, lsr #28
   1ad88:	andeq	sl, r1, r0, lsr #28
   1ad8c:	andeq	sl, r1, r0, lsr #28
   1ad90:	andeq	sl, r1, r0, lsr #28
   1ad94:	andeq	sl, r1, r0, lsr #28
   1ad98:	andeq	sl, r1, r0, lsr #28
   1ad9c:	andeq	sl, r1, r0, lsr #28
   1ada0:	andeq	sl, r1, r0, lsr #28
   1ada4:	andeq	sl, r1, r0, lsr #28
   1ada8:	andeq	sl, r1, r0, lsr #28
   1adac:	andeq	sl, r1, r0, lsr #28
   1adb0:	andeq	sl, r1, r8, ror #27
   1adb4:	andeq	sl, r1, r0, lsr #28
   1adb8:	andeq	sl, r1, r0, lsr #28
   1adbc:	andeq	sl, r1, r0, lsr #28
   1adc0:	andeq	sl, r1, r8, ror #27
   1adc4:	andeq	sl, r1, r0, lsr #28
   1adc8:	andeq	sl, r1, r8, ror #27
   1adcc:	andeq	sl, r1, r0, lsr #28
   1add0:	andeq	sl, r1, r0, lsr #28
   1add4:	andeq	sl, r1, r0, lsr #28
   1add8:	andeq	sl, r1, r0, lsr #28
   1addc:	andeq	sl, r1, r0, lsr #28
   1ade0:	andeq	sl, r1, r0, lsr #28
   1ade4:	andeq	sl, r1, r8, ror #27
   1ade8:	mov	r0, sl
   1adec:	mov	r1, #48	; 0x30
   1adf0:	bl	11580 <strchr@plt>
   1adf4:	cmp	r0, #0
   1adf8:	beq	1ae1c <__assert_fail@plt+0x974c>
   1adfc:	ldr	r1, [sp, #32]
   1ae00:	ldrb	r0, [r1, #1]
   1ae04:	cmp	r0, #66	; 0x42
   1ae08:	cmpne	r0, #68	; 0x44
   1ae0c:	bne	1afd4 <__assert_fail@plt+0x9904>
   1ae10:	mov	r5, #1000	; 0x3e8
   1ae14:	mov	r0, #2
   1ae18:	str	r0, [sp, #28]
   1ae1c:	mov	r3, #0
   1ae20:	sub	r0, r4, #66	; 0x42
   1ae24:	cmp	r0, #53	; 0x35
   1ae28:	bhi	1b000 <__assert_fail@plt+0x9930>
   1ae2c:	add	r1, pc, #0
   1ae30:	ldr	pc, [r1, r0, lsl #2]
   1ae34:	andeq	fp, r1, r0, ror r3
   1ae38:	andeq	fp, r1, r0
   1ae3c:	andeq	fp, r1, r0
   1ae40:	muleq	r1, r8, r3
   1ae44:	andeq	fp, r1, r0
   1ae48:	andeq	sl, r1, ip, lsl #30
   1ae4c:	andeq	fp, r1, r0
   1ae50:	andeq	fp, r1, r0
   1ae54:	andeq	fp, r1, r0
   1ae58:	andeq	fp, r1, r8, lsl r0
   1ae5c:	andeq	fp, r1, r0
   1ae60:	andeq	fp, r1, r0, rrx
   1ae64:	andeq	fp, r1, r0
   1ae68:	andeq	fp, r1, r0
   1ae6c:	andeq	fp, r1, ip, ror #9
   1ae70:	andeq	fp, r1, r0
   1ae74:	andeq	fp, r1, r0
   1ae78:	andeq	fp, r1, r0
   1ae7c:	andeq	fp, r1, ip, ror #1
   1ae80:	andeq	fp, r1, r0
   1ae84:	andeq	fp, r1, r0
   1ae88:	andeq	fp, r1, r0
   1ae8c:	andeq	fp, r1, r0
   1ae90:	andeq	fp, r1, r4, lsl r6
   1ae94:	ldrdeq	fp, [r1], -r4
   1ae98:	andeq	fp, r1, r0
   1ae9c:	andeq	fp, r1, r0
   1aea0:	andeq	fp, r1, r0
   1aea4:	andeq	fp, r1, r0
   1aea8:	andeq	fp, r1, r0
   1aeac:	andeq	fp, r1, r0
   1aeb0:	andeq	fp, r1, r0
   1aeb4:	andeq	fp, r1, r8, ror #15
   1aeb8:	andeq	fp, r1, r0, asr #16
   1aebc:	andeq	fp, r1, r0
   1aec0:	andeq	fp, r1, r0
   1aec4:	andeq	fp, r1, r0
   1aec8:	andeq	sl, r1, ip, lsl #30
   1aecc:	andeq	fp, r1, r0
   1aed0:	andeq	fp, r1, r0
   1aed4:	andeq	fp, r1, r0
   1aed8:	andeq	fp, r1, r8, lsl r0
   1aedc:	andeq	fp, r1, r0
   1aee0:	andeq	fp, r1, r0, rrx
   1aee4:	andeq	fp, r1, r0
   1aee8:	andeq	fp, r1, r0
   1aeec:	andeq	fp, r1, r0
   1aef0:	andeq	fp, r1, r0
   1aef4:	andeq	fp, r1, r0
   1aef8:	andeq	fp, r1, r0
   1aefc:	andeq	fp, r1, ip, ror #1
   1af00:	andeq	fp, r1, r0
   1af04:	andeq	fp, r1, r0
   1af08:	andeq	fp, r1, ip, lsl r8
   1af0c:	mvn	r0, #0
   1af10:	mvn	r1, #0
   1af14:	mov	r2, r5
   1af18:	mov	sl, r3
   1af1c:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1af20:	subs	r3, r0, r6
   1af24:	umull	r4, r2, r6, r5
   1af28:	mov	lr, #0
   1af2c:	str	r1, [sp, #20]
   1af30:	sbcs	r3, r1, r7
   1af34:	movwcc	lr, #1
   1af38:	mla	ip, r6, sl, r2
   1af3c:	mov	r2, r1
   1af40:	mov	r2, #0
   1af44:	cmp	lr, #0
   1af48:	mla	r7, r7, r5, ip
   1af4c:	mvnne	r4, #0
   1af50:	mvnne	r7, #0
   1af54:	subs	r6, r0, r4
   1af58:	sbcs	r6, r1, r7
   1af5c:	umull	r3, r6, r4, r5
   1af60:	movwcc	r2, #1
   1af64:	cmp	r2, #0
   1af68:	mvnne	r3, #0
   1af6c:	cmp	r2, #0
   1af70:	str	r6, [sp, #16]
   1af74:	umull	r6, ip, r3, r5
   1af78:	mla	r1, r3, sl, ip
   1af7c:	ldr	ip, [sp, #16]
   1af80:	str	r1, [sp, #12]
   1af84:	mla	r4, r4, sl, ip
   1af88:	mla	r4, r7, r5, r4
   1af8c:	mvnne	r4, #0
   1af90:	subs	r0, r0, r3
   1af94:	ldr	r0, [sp, #20]
   1af98:	ldr	r7, [sp, #12]
   1af9c:	sbcs	r0, r0, r4
   1afa0:	mov	r0, #0
   1afa4:	mla	r7, r4, r5, r7
   1afa8:	movwcc	r0, #1
   1afac:	cmp	r0, #0
   1afb0:	mov	r1, r0
   1afb4:	orr	r0, lr, r2
   1afb8:	mvnne	r7, #0
   1afbc:	mvnne	r6, #0
   1afc0:	b	1b60c <__assert_fail@plt+0x9f3c>
   1afc4:	mov	r8, r0
   1afc8:	cmp	sl, #0
   1afcc:	bne	1ac98 <__assert_fail@plt+0x95c8>
   1afd0:	b	1b860 <__assert_fail@plt+0xa190>
   1afd4:	cmp	r0, #105	; 0x69
   1afd8:	mov	r3, #0
   1afdc:	bne	1ae20 <__assert_fail@plt+0x9750>
   1afe0:	ldrb	r0, [r1, #2]
   1afe4:	mov	r1, #1
   1afe8:	cmp	r0, #66	; 0x42
   1afec:	movweq	r1, #3
   1aff0:	str	r1, [sp, #28]
   1aff4:	sub	r0, r4, #66	; 0x42
   1aff8:	cmp	r0, #53	; 0x35
   1affc:	bls	1ae2c <__assert_fail@plt+0x975c>
   1b000:	ldr	r0, [sp, #36]	; 0x24
   1b004:	orr	r8, r8, #2
   1b008:	strd	r6, [r0]
   1b00c:	mov	r0, r8
   1b010:	sub	sp, fp, #28
   1b014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b018:	mvn	r0, #0
   1b01c:	mvn	r1, #0
   1b020:	mov	r2, r5
   1b024:	mov	r4, r3
   1b028:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1b02c:	subs	r0, r0, r6
   1b030:	mov	r2, #0
   1b034:	sbcs	r0, r1, r7
   1b038:	umull	r0, r1, r6, r5
   1b03c:	movwcc	r2, #1
   1b040:	cmp	r2, #0
   1b044:	mla	r1, r6, r4, r1
   1b048:	mov	r3, r2
   1b04c:	mvnne	r0, #0
   1b050:	mla	r7, r7, r5, r1
   1b054:	mvnne	r7, #0
   1b058:	mov	r6, r0
   1b05c:	b	1b840 <__assert_fail@plt+0xa170>
   1b060:	mvn	r0, #0
   1b064:	mvn	r1, #0
   1b068:	mov	r2, r5
   1b06c:	str	r3, [sp, #24]
   1b070:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1b074:	subs	r3, r0, r6
   1b078:	mov	ip, r0
   1b07c:	umull	r4, r0, r6, r5
   1b080:	mov	sl, #0
   1b084:	sbcs	r3, r1, r7
   1b088:	mov	r3, #0
   1b08c:	movwcc	r3, #1
   1b090:	cmp	r3, #0
   1b094:	str	r0, [sp, #20]
   1b098:	ldr	r0, [sp, #24]
   1b09c:	mvnne	r4, #0
   1b0a0:	cmp	r3, #0
   1b0a4:	umull	lr, r2, r4, r5
   1b0a8:	mla	r2, r4, r0, r2
   1b0ac:	str	r2, [sp, #16]
   1b0b0:	ldr	r2, [sp, #20]
   1b0b4:	mla	r6, r6, r0, r2
   1b0b8:	ldr	r0, [sp, #16]
   1b0bc:	mla	r6, r7, r5, r6
   1b0c0:	mvnne	r6, #0
   1b0c4:	mla	r7, r6, r5, r0
   1b0c8:	subs	r0, ip, r4
   1b0cc:	sbcs	r0, r1, r6
   1b0d0:	movwcc	sl, #1
   1b0d4:	cmp	sl, #0
   1b0d8:	orr	r3, r3, sl
   1b0dc:	mvnne	lr, #0
   1b0e0:	mvnne	r7, #0
   1b0e4:	mov	r6, lr
   1b0e8:	b	1b840 <__assert_fail@plt+0xa170>
   1b0ec:	mvn	r0, #0
   1b0f0:	mvn	r1, #0
   1b0f4:	mov	r2, r5
   1b0f8:	mov	sl, r3
   1b0fc:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1b100:	subs	r3, r0, r6
   1b104:	mov	ip, r1
   1b108:	umull	r2, lr, r6, r5
   1b10c:	str	r0, [sp, #20]
   1b110:	sbcs	r3, r1, r7
   1b114:	mov	r1, #0
   1b118:	str	ip, [sp, #16]
   1b11c:	movwcc	r1, #1
   1b120:	mla	r6, r6, sl, lr
   1b124:	mov	lr, #0
   1b128:	cmp	r1, #0
   1b12c:	mla	r7, r7, r5, r6
   1b130:	mvnne	r2, #0
   1b134:	cmp	r1, #0
   1b138:	umull	r3, r4, r2, r5
   1b13c:	mvnne	r7, #0
   1b140:	mla	r4, r2, sl, r4
   1b144:	subs	r2, r0, r2
   1b148:	sbcs	r2, ip, r7
   1b14c:	mla	r4, r7, r5, r4
   1b150:	mov	r2, #0
   1b154:	movwcc	lr, #1
   1b158:	cmp	lr, #0
   1b15c:	mvnne	r3, #0
   1b160:	mvnne	r4, #0
   1b164:	subs	r7, r0, r3
   1b168:	mov	r0, r5
   1b16c:	sbcs	r7, ip, r4
   1b170:	umull	r5, r7, r3, r5
   1b174:	movwcc	r2, #1
   1b178:	cmp	r2, #0
   1b17c:	mla	r3, r3, sl, r7
   1b180:	mvnne	r5, #0
   1b184:	cmp	r2, #0
   1b188:	mla	r3, r4, r0, r3
   1b18c:	umull	r6, ip, r5, r0
   1b190:	mvnne	r3, #0
   1b194:	mla	ip, r5, sl, ip
   1b198:	mla	r7, r3, r0, ip
   1b19c:	ldr	r0, [sp, #20]
   1b1a0:	subs	r0, r0, r5
   1b1a4:	ldr	r0, [sp, #16]
   1b1a8:	sbcs	r0, r0, r3
   1b1ac:	mov	r0, #0
   1b1b0:	movwcc	r0, #1
   1b1b4:	cmp	r0, #0
   1b1b8:	mov	r3, r0
   1b1bc:	orr	r0, r1, lr
   1b1c0:	orr	r0, r0, r2
   1b1c4:	mvnne	r7, #0
   1b1c8:	mvnne	r6, #0
   1b1cc:	orr	r3, r0, r3
   1b1d0:	b	1b840 <__assert_fail@plt+0xa170>
   1b1d4:	mvn	r0, #0
   1b1d8:	mvn	r1, #0
   1b1dc:	mov	r2, r5
   1b1e0:	mov	r4, r3
   1b1e4:	str	r3, [sp, #24]
   1b1e8:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1b1ec:	umull	r3, r2, r6, r5
   1b1f0:	mla	r2, r6, r4, r2
   1b1f4:	subs	r6, r0, r6
   1b1f8:	sbcs	r6, r1, r7
   1b1fc:	mov	r6, #0
   1b200:	mla	r2, r7, r5, r2
   1b204:	mov	r7, #0
   1b208:	movwcc	r6, #1
   1b20c:	cmp	r6, #0
   1b210:	str	r6, [sp, #20]
   1b214:	mvnne	r3, #0
   1b218:	mvnne	r2, #0
   1b21c:	subs	r4, r0, r3
   1b220:	umull	r6, ip, r3, r5
   1b224:	sbcs	r4, r1, r2
   1b228:	ldr	r4, [sp, #24]
   1b22c:	movwcc	r7, #1
   1b230:	cmp	r7, #0
   1b234:	mov	lr, r7
   1b238:	str	r7, [sp, #16]
   1b23c:	mvnne	r6, #0
   1b240:	cmp	lr, #0
   1b244:	mov	lr, #0
   1b248:	umull	sl, r7, r6, r5
   1b24c:	mla	r3, r3, r4, ip
   1b250:	mla	r2, r2, r5, r3
   1b254:	mvnne	r2, #0
   1b258:	subs	r3, r0, r6
   1b25c:	mla	r7, r6, r4, r7
   1b260:	mov	r4, r0
   1b264:	mov	r0, #0
   1b268:	mla	r7, r2, r5, r7
   1b26c:	sbcs	r2, r1, r2
   1b270:	mov	r3, r4
   1b274:	movwcc	r0, #1
   1b278:	str	r3, [sp, #4]
   1b27c:	cmp	r0, #0
   1b280:	str	r0, [sp, #12]
   1b284:	mov	r0, r1
   1b288:	mvnne	sl, #0
   1b28c:	mvnne	r7, #0
   1b290:	str	r0, [sp, #8]
   1b294:	subs	r2, r4, sl
   1b298:	ldr	r4, [sp, #24]
   1b29c:	sbcs	r2, r1, r7
   1b2a0:	umull	r6, r2, sl, r5
   1b2a4:	movwcc	lr, #1
   1b2a8:	cmp	lr, #0
   1b2ac:	mvnne	r6, #0
   1b2b0:	mla	r2, sl, r4, r2
   1b2b4:	cmp	lr, #0
   1b2b8:	umull	r1, ip, r6, r5
   1b2bc:	mla	r2, r7, r5, r2
   1b2c0:	mvnne	r2, #0
   1b2c4:	mla	ip, r6, r4, ip
   1b2c8:	subs	r6, r3, r6
   1b2cc:	mla	r7, r2, r5, ip
   1b2d0:	sbcs	r2, r0, r2
   1b2d4:	mov	ip, #0
   1b2d8:	mov	r2, #0
   1b2dc:	movwcc	ip, #1
   1b2e0:	cmp	ip, #0
   1b2e4:	mvnne	r1, #0
   1b2e8:	mvnne	r7, #0
   1b2ec:	subs	r6, r3, r1
   1b2f0:	ldr	r3, [sp, #24]
   1b2f4:	sbcs	r6, r0, r7
   1b2f8:	umull	r0, sl, r1, r5
   1b2fc:	movwcc	r2, #1
   1b300:	cmp	r2, #0
   1b304:	mvnne	r0, #0
   1b308:	mla	r1, r1, r3, sl
   1b30c:	cmp	r2, #0
   1b310:	umull	r6, r4, r0, r5
   1b314:	mla	r1, r7, r5, r1
   1b318:	mvnne	r1, #0
   1b31c:	mla	r4, r0, r3, r4
   1b320:	ldr	r3, [sp, #4]
   1b324:	mla	r7, r1, r5, r4
   1b328:	ldr	r5, [sp, #16]
   1b32c:	subs	r0, r3, r0
   1b330:	ldr	r0, [sp, #8]
   1b334:	sbcs	r0, r0, r1
   1b338:	mov	r0, #0
   1b33c:	movwcc	r0, #1
   1b340:	cmp	r0, #0
   1b344:	mov	r1, r0
   1b348:	ldr	r0, [sp, #20]
   1b34c:	mvnne	r7, #0
   1b350:	mvnne	r6, #0
   1b354:	orr	r0, r0, r5
   1b358:	ldr	r5, [sp, #12]
   1b35c:	orr	r0, r0, r5
   1b360:	orr	r0, r0, lr
   1b364:	orr	r0, r0, ip
   1b368:	orr	r0, r0, r2
   1b36c:	b	1b7dc <__assert_fail@plt+0xa10c>
   1b370:	mov	r1, #0
   1b374:	lsl	r2, r7, #10
   1b378:	lsl	r0, r6, #10
   1b37c:	lsr	r3, r7, #22
   1b380:	cmp	r1, r7, lsr #22
   1b384:	orr	r2, r2, r6, lsr #22
   1b388:	mvnne	r0, #0
   1b38c:	movwne	r3, #1
   1b390:	cmp	r1, r7, lsr #22
   1b394:	b	1b80c <__assert_fail@plt+0xa13c>
   1b398:	mvn	r0, #0
   1b39c:	mvn	r1, #0
   1b3a0:	mov	r2, r5
   1b3a4:	mov	sl, r3
   1b3a8:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1b3ac:	subs	r2, r0, r6
   1b3b0:	mov	ip, r0
   1b3b4:	mov	r0, #0
   1b3b8:	sbcs	r2, r1, r7
   1b3bc:	umull	r4, r2, r6, r5
   1b3c0:	movwcc	r0, #1
   1b3c4:	cmp	r0, #0
   1b3c8:	mla	r2, r6, sl, r2
   1b3cc:	str	r0, [sp, #20]
   1b3d0:	mvnne	r4, #0
   1b3d4:	cmp	r0, #0
   1b3d8:	mla	r2, r7, r5, r2
   1b3dc:	mov	r0, #0
   1b3e0:	umull	lr, r3, r4, r5
   1b3e4:	mvnne	r2, #0
   1b3e8:	mla	r3, r4, sl, r3
   1b3ec:	mla	r6, r2, r5, r3
   1b3f0:	subs	r3, ip, r4
   1b3f4:	mov	r3, r1
   1b3f8:	sbcs	r2, r1, r2
   1b3fc:	str	r3, [sp, #8]
   1b400:	movwcc	r0, #1
   1b404:	cmp	r0, #0
   1b408:	str	r0, [sp, #16]
   1b40c:	mov	r0, ip
   1b410:	mvnne	lr, #0
   1b414:	mvnne	r6, #0
   1b418:	str	r0, [sp, #12]
   1b41c:	subs	r2, ip, lr
   1b420:	umull	r7, r4, lr, r5
   1b424:	sbcs	r2, r1, r6
   1b428:	mov	r2, #0
   1b42c:	movwcc	r2, #1
   1b430:	mla	r4, lr, sl, r4
   1b434:	cmp	r2, #0
   1b438:	mla	r6, r6, r5, r4
   1b43c:	mov	r4, #0
   1b440:	mvnne	r7, #0
   1b444:	cmp	r2, #0
   1b448:	umull	r1, ip, r7, r5
   1b44c:	mvnne	r6, #0
   1b450:	mla	ip, r7, sl, ip
   1b454:	subs	r7, r0, r7
   1b458:	sbcs	r7, r3, r6
   1b45c:	mla	lr, r6, r5, ip
   1b460:	mov	ip, #0
   1b464:	movwcc	ip, #1
   1b468:	cmp	ip, #0
   1b46c:	mvnne	r1, #0
   1b470:	mvnne	lr, #0
   1b474:	subs	r7, r0, r1
   1b478:	sbcs	r7, r3, lr
   1b47c:	umull	r0, r7, r1, r5
   1b480:	movwcc	r4, #1
   1b484:	cmp	r4, #0
   1b488:	mla	r1, r1, sl, r7
   1b48c:	mvnne	r0, #0
   1b490:	cmp	r4, #0
   1b494:	mla	r1, lr, r5, r1
   1b498:	umull	r6, r3, r0, r5
   1b49c:	mvnne	r1, #0
   1b4a0:	mla	r3, r0, sl, r3
   1b4a4:	mla	r7, r1, r5, r3
   1b4a8:	ldr	r3, [sp, #12]
   1b4ac:	subs	r0, r3, r0
   1b4b0:	ldr	r0, [sp, #8]
   1b4b4:	ldr	r3, [sp, #16]
   1b4b8:	sbcs	r0, r0, r1
   1b4bc:	mov	r0, #0
   1b4c0:	movwcc	r0, #1
   1b4c4:	cmp	r0, #0
   1b4c8:	mov	r1, r0
   1b4cc:	ldr	r0, [sp, #20]
   1b4d0:	mvnne	r7, #0
   1b4d4:	mvnne	r6, #0
   1b4d8:	orr	r0, r0, r3
   1b4dc:	orr	r0, r0, r2
   1b4e0:	orr	r0, r0, ip
   1b4e4:	orr	r0, r0, r4
   1b4e8:	b	1b60c <__assert_fail@plt+0x9f3c>
   1b4ec:	mvn	r0, #0
   1b4f0:	mvn	r1, #0
   1b4f4:	mov	r2, r5
   1b4f8:	mov	sl, r3
   1b4fc:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1b500:	umull	r3, r2, r6, r5
   1b504:	mov	lr, r1
   1b508:	mov	r1, r0
   1b50c:	mla	r2, r6, sl, r2
   1b510:	subs	r6, r0, r6
   1b514:	mov	r0, #0
   1b518:	sbcs	r6, lr, r7
   1b51c:	mla	r2, r7, r5, r2
   1b520:	movwcc	r0, #1
   1b524:	cmp	r0, #0
   1b528:	str	r0, [sp, #20]
   1b52c:	mov	r0, r1
   1b530:	mvnne	r3, #0
   1b534:	mvnne	r2, #0
   1b538:	str	r0, [sp, #16]
   1b53c:	subs	r4, r1, r3
   1b540:	umull	r7, ip, r3, r5
   1b544:	sbcs	r4, lr, r2
   1b548:	mov	r4, #0
   1b54c:	movwcc	r4, #1
   1b550:	mla	r3, r3, sl, ip
   1b554:	mov	ip, #0
   1b558:	cmp	r4, #0
   1b55c:	mla	r2, r2, r5, r3
   1b560:	mvnne	r7, #0
   1b564:	cmp	r4, #0
   1b568:	umull	r1, r6, r7, r5
   1b56c:	mvnne	r2, #0
   1b570:	mla	r6, r7, sl, r6
   1b574:	mla	r3, r2, r5, r6
   1b578:	subs	r6, r0, r7
   1b57c:	sbcs	r2, lr, r2
   1b580:	mov	r2, #0
   1b584:	movwcc	ip, #1
   1b588:	cmp	ip, #0
   1b58c:	mvnne	r1, #0
   1b590:	mvnne	r3, #0
   1b594:	subs	r6, r0, r1
   1b598:	sbcs	r6, lr, r3
   1b59c:	umull	r0, r6, r1, r5
   1b5a0:	movwcc	r2, #1
   1b5a4:	cmp	r2, #0
   1b5a8:	mvnne	r0, #0
   1b5ac:	cmp	r2, #0
   1b5b0:	str	r6, [sp, #12]
   1b5b4:	umull	r6, r7, r0, r5
   1b5b8:	mla	r7, r0, sl, r7
   1b5bc:	str	r7, [sp, #8]
   1b5c0:	ldr	r7, [sp, #12]
   1b5c4:	mla	r1, r1, sl, r7
   1b5c8:	mla	r1, r3, r5, r1
   1b5cc:	ldr	r3, [sp, #8]
   1b5d0:	mvnne	r1, #0
   1b5d4:	mla	r7, r1, r5, r3
   1b5d8:	ldr	r3, [sp, #16]
   1b5dc:	subs	r0, r3, r0
   1b5e0:	sbcs	r0, lr, r1
   1b5e4:	mov	r0, #0
   1b5e8:	movwcc	r0, #1
   1b5ec:	cmp	r0, #0
   1b5f0:	mov	r1, r0
   1b5f4:	ldr	r0, [sp, #20]
   1b5f8:	mvnne	r7, #0
   1b5fc:	mvnne	r6, #0
   1b600:	orr	r0, r0, r4
   1b604:	orr	r0, r0, ip
   1b608:	orr	r0, r0, r2
   1b60c:	orr	r3, r0, r1
   1b610:	b	1b840 <__assert_fail@plt+0xa170>
   1b614:	mvn	r0, #0
   1b618:	mvn	r1, #0
   1b61c:	mov	r2, r5
   1b620:	mov	sl, r3
   1b624:	bl	1c6b8 <__assert_fail@plt+0xafe8>
   1b628:	mov	ip, r1
   1b62c:	subs	r1, r0, r6
   1b630:	umull	r3, lr, r6, r5
   1b634:	mov	r2, r5
   1b638:	sbcs	r1, ip, r7
   1b63c:	mov	r1, #0
   1b640:	str	ip, [sp, #4]
   1b644:	movwcc	r1, #1
   1b648:	mla	r6, r6, sl, lr
   1b64c:	cmp	r1, #0
   1b650:	mla	r7, r7, r2, r6
   1b654:	str	r1, [sp, #20]
   1b658:	mvnne	r3, #0
   1b65c:	cmp	r1, #0
   1b660:	mov	r1, r0
   1b664:	umull	r4, r5, r3, r5
   1b668:	mvnne	r7, #0
   1b66c:	mov	lr, r1
   1b670:	mla	r5, r3, sl, r5
   1b674:	subs	r3, r0, r3
   1b678:	sbcs	r0, ip, r7
   1b67c:	mov	r0, #0
   1b680:	mla	r5, r7, r2, r5
   1b684:	movwcc	r0, #1
   1b688:	cmp	r0, #0
   1b68c:	str	r0, [sp, #16]
   1b690:	mvnne	r4, #0
   1b694:	mvnne	r5, #0
   1b698:	subs	r0, r1, r4
   1b69c:	mov	r1, #0
   1b6a0:	sbcs	r0, ip, r5
   1b6a4:	umull	r3, r0, r4, r2
   1b6a8:	movwcc	r1, #1
   1b6ac:	cmp	r1, #0
   1b6b0:	mla	r0, r4, sl, r0
   1b6b4:	mov	r4, lr
   1b6b8:	str	r1, [sp, #12]
   1b6bc:	mvnne	r3, #0
   1b6c0:	cmp	r1, #0
   1b6c4:	mla	r0, r5, r2, r0
   1b6c8:	str	r4, [sp]
   1b6cc:	umull	r7, r6, r3, r2
   1b6d0:	mvnne	r0, #0
   1b6d4:	mla	r6, r3, sl, r6
   1b6d8:	subs	r3, lr, r3
   1b6dc:	mov	r3, #0
   1b6e0:	mla	r5, r0, r2, r6
   1b6e4:	sbcs	r0, ip, r0
   1b6e8:	mov	r0, #0
   1b6ec:	movwcc	r0, #1
   1b6f0:	cmp	r0, #0
   1b6f4:	str	r0, [sp, #8]
   1b6f8:	mvnne	r7, #0
   1b6fc:	mvnne	r5, #0
   1b700:	subs	r0, lr, r7
   1b704:	sbcs	r0, ip, r5
   1b708:	umull	r6, r0, r7, r2
   1b70c:	movwcc	r3, #1
   1b710:	cmp	r3, #0
   1b714:	mla	r7, r7, sl, r0
   1b718:	mov	r0, ip
   1b71c:	mvnne	r6, #0
   1b720:	cmp	r3, #0
   1b724:	mla	r7, r5, r2, r7
   1b728:	mov	r5, #0
   1b72c:	umull	r1, lr, r6, r2
   1b730:	mvnne	r7, #0
   1b734:	mla	lr, r6, sl, lr
   1b738:	subs	r6, r4, r6
   1b73c:	mla	lr, r7, r2, lr
   1b740:	sbcs	r7, ip, r7
   1b744:	mov	ip, #0
   1b748:	movwcc	ip, #1
   1b74c:	cmp	ip, #0
   1b750:	mvnne	r1, #0
   1b754:	mvnne	lr, #0
   1b758:	subs	r7, r4, r1
   1b75c:	sbcs	r7, r0, lr
   1b760:	umull	r0, r7, r1, r2
   1b764:	movwcc	r5, #1
   1b768:	cmp	r5, #0
   1b76c:	mla	r1, r1, sl, r7
   1b770:	mvnne	r0, #0
   1b774:	cmp	r5, #0
   1b778:	mla	r1, lr, r2, r1
   1b77c:	umull	r6, r4, r0, r2
   1b780:	mvnne	r1, #0
   1b784:	mla	r4, r0, sl, r4
   1b788:	mla	r7, r1, r2, r4
   1b78c:	ldr	r2, [sp]
   1b790:	subs	r0, r2, r0
   1b794:	ldr	r0, [sp, #4]
   1b798:	ldr	r2, [sp, #16]
   1b79c:	sbcs	r0, r0, r1
   1b7a0:	mov	r0, #0
   1b7a4:	movwcc	r0, #1
   1b7a8:	cmp	r0, #0
   1b7ac:	mov	r1, r0
   1b7b0:	ldr	r0, [sp, #20]
   1b7b4:	mvnne	r7, #0
   1b7b8:	mvnne	r6, #0
   1b7bc:	orr	r0, r0, r2
   1b7c0:	ldr	r2, [sp, #12]
   1b7c4:	orr	r0, r0, r2
   1b7c8:	ldr	r2, [sp, #8]
   1b7cc:	orr	r0, r0, r2
   1b7d0:	orr	r0, r0, r3
   1b7d4:	orr	r0, r0, ip
   1b7d8:	orr	r0, r0, r5
   1b7dc:	orr	r0, r0, r1
   1b7e0:	and	r3, r0, #1
   1b7e4:	b	1b840 <__assert_fail@plt+0xa170>
   1b7e8:	mov	r1, #0
   1b7ec:	lsl	r2, r7, #9
   1b7f0:	lsl	r0, r6, #9
   1b7f4:	lsr	r3, r7, #23
   1b7f8:	cmp	r1, r7, lsr #23
   1b7fc:	orr	r2, r2, r6, lsr #23
   1b800:	mvnne	r0, #0
   1b804:	movwne	r3, #1
   1b808:	cmp	r1, r7, lsr #23
   1b80c:	mvnne	r2, #0
   1b810:	mov	r6, r0
   1b814:	mov	r7, r2
   1b818:	b	1b840 <__assert_fail@plt+0xa170>
   1b81c:	lsl	r1, r7, #1
   1b820:	cmp	r7, #0
   1b824:	lsl	r0, r6, #1
   1b828:	lsr	r3, r7, #31
   1b82c:	orr	r1, r1, r6, lsr #31
   1b830:	mvnmi	r0, #0
   1b834:	mvnmi	r1, #0
   1b838:	mov	r6, r0
   1b83c:	mov	r7, r1
   1b840:	ldr	r1, [sp, #32]
   1b844:	ldr	r2, [sp, #28]
   1b848:	orr	r8, r3, r8
   1b84c:	add	r0, r1, r2
   1b850:	str	r0, [r9]
   1b854:	ldrb	r0, [r1, r2]
   1b858:	cmp	r0, #0
   1b85c:	orrne	r8, r8, #2
   1b860:	ldr	r0, [sp, #36]	; 0x24
   1b864:	strd	r6, [r0]
   1b868:	mov	r0, r8
   1b86c:	sub	sp, fp, #28
   1b870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b874:	movw	r0, #59385	; 0xe7f9
   1b878:	movw	r1, #59423	; 0xe81f
   1b87c:	movw	r3, #59439	; 0xe82f
   1b880:	mov	r2, #85	; 0x55
   1b884:	movt	r0, #1
   1b888:	movt	r1, #1
   1b88c:	movt	r3, #1
   1b890:	bl	116d0 <__assert_fail@plt>
   1b894:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b898:	add	fp, sp, #24
   1b89c:	sub	sp, sp, #16
   1b8a0:	mov	r3, r1
   1b8a4:	mov	r2, r0
   1b8a8:	mov	r4, #0
   1b8ac:	mov	r0, r2
   1b8b0:	ldrb	r1, [r0, -r4, lsl #1]!
   1b8b4:	cmp	r1, #37	; 0x25
   1b8b8:	bne	1b8dc <__assert_fail@plt+0xa20c>
   1b8bc:	ldrb	r0, [r0, #1]
   1b8c0:	cmp	r0, #115	; 0x73
   1b8c4:	bne	1b978 <__assert_fail@plt+0xa2a8>
   1b8c8:	sub	r4, r4, #1
   1b8cc:	mov	r0, r2
   1b8d0:	ldrb	r1, [r0, -r4, lsl #1]!
   1b8d4:	cmp	r1, #37	; 0x25
   1b8d8:	beq	1b8bc <__assert_fail@plt+0xa1ec>
   1b8dc:	cmp	r1, #0
   1b8e0:	bne	1b978 <__assert_fail@plt+0xa2a8>
   1b8e4:	cmp	r4, #0
   1b8e8:	str	r3, [sp, #12]
   1b8ec:	str	r3, [sp, #8]
   1b8f0:	beq	1b9bc <__assert_fail@plt+0xa2ec>
   1b8f4:	ldr	r0, [sp, #8]
   1b8f8:	mov	r5, #0
   1b8fc:	mov	r7, r4
   1b900:	add	r6, r0, #4
   1b904:	str	r6, [sp, #8]
   1b908:	ldr	r0, [r6, #-4]
   1b90c:	bl	11574 <strlen@plt>
   1b910:	adds	r5, r0, r5
   1b914:	add	r6, r6, #4
   1b918:	mvncs	r5, #0
   1b91c:	adds	r7, r7, #1
   1b920:	bcc	1b904 <__assert_fail@plt+0xa234>
   1b924:	cmn	r5, #1
   1b928:	ble	1b9e0 <__assert_fail@plt+0xa310>
   1b92c:	add	r0, r5, #1
   1b930:	bl	1a660 <__assert_fail@plt+0x8f90>
   1b934:	mov	r8, r0
   1b938:	mov	r5, r0
   1b93c:	ldr	r0, [sp, #12]
   1b940:	add	r1, r0, #4
   1b944:	str	r1, [sp, #12]
   1b948:	ldr	r6, [r0]
   1b94c:	mov	r0, r6
   1b950:	bl	11574 <strlen@plt>
   1b954:	mov	r7, r0
   1b958:	mov	r0, r5
   1b95c:	mov	r1, r6
   1b960:	mov	r2, r7
   1b964:	bl	113f4 <memcpy@plt>
   1b968:	add	r5, r5, r7
   1b96c:	adds	r4, r4, #1
   1b970:	bcc	1b93c <__assert_fail@plt+0xa26c>
   1b974:	b	1b9cc <__assert_fail@plt+0xa2fc>
   1b978:	add	r0, sp, #4
   1b97c:	mov	r1, #1
   1b980:	bl	115bc <__vasprintf_chk@plt>
   1b984:	cmn	r0, #1
   1b988:	ble	1b99c <__assert_fail@plt+0xa2cc>
   1b98c:	ldr	r8, [sp, #4]
   1b990:	mov	r0, r8
   1b994:	sub	sp, fp, #24
   1b998:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b99c:	bl	11598 <__errno_location@plt>
   1b9a0:	ldr	r0, [r0]
   1b9a4:	mov	r8, #0
   1b9a8:	cmp	r0, #12
   1b9ac:	beq	1b9fc <__assert_fail@plt+0xa32c>
   1b9b0:	mov	r0, r8
   1b9b4:	sub	sp, fp, #24
   1b9b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b9bc:	mov	r0, #1
   1b9c0:	bl	1a660 <__assert_fail@plt+0x8f90>
   1b9c4:	mov	r8, r0
   1b9c8:	mov	r5, r0
   1b9cc:	mov	r0, #0
   1b9d0:	strb	r0, [r5]
   1b9d4:	mov	r0, r8
   1b9d8:	sub	sp, fp, #24
   1b9dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b9e0:	bl	11598 <__errno_location@plt>
   1b9e4:	mov	r1, #75	; 0x4b
   1b9e8:	mov	r8, #0
   1b9ec:	str	r1, [r0]
   1b9f0:	mov	r0, r8
   1b9f4:	sub	sp, fp, #24
   1b9f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b9fc:	bl	1ab9c <__assert_fail@plt+0x94cc>
   1ba00:	clz	r2, r1
   1ba04:	clz	r3, r0
   1ba08:	lsr	r2, r2, #5
   1ba0c:	lsr	r3, r3, #5
   1ba10:	orrs	r2, r3, r2
   1ba14:	movwne	r1, #1
   1ba18:	movwne	r0, #1
   1ba1c:	cmp	r1, #0
   1ba20:	beq	1ba50 <__assert_fail@plt+0xa380>
   1ba24:	mvn	r2, #-2147483648	; 0x80000000
   1ba28:	udiv	r2, r2, r1
   1ba2c:	cmp	r2, r0
   1ba30:	bcs	1ba50 <__assert_fail@plt+0xa380>
   1ba34:	push	{fp, lr}
   1ba38:	mov	fp, sp
   1ba3c:	bl	11598 <__errno_location@plt>
   1ba40:	mov	r1, #12
   1ba44:	str	r1, [r0]
   1ba48:	mov	r0, #0
   1ba4c:	pop	{fp, pc}
   1ba50:	b	11358 <calloc@plt>
   1ba54:	cmp	r0, #0
   1ba58:	movweq	r0, #1
   1ba5c:	cmn	r0, #1
   1ba60:	ble	1ba68 <__assert_fail@plt+0xa398>
   1ba64:	b	114e4 <malloc@plt>
   1ba68:	push	{fp, lr}
   1ba6c:	mov	fp, sp
   1ba70:	bl	11598 <__errno_location@plt>
   1ba74:	mov	r1, #12
   1ba78:	str	r1, [r0]
   1ba7c:	mov	r0, #0
   1ba80:	pop	{fp, pc}
   1ba84:	push	{fp, lr}
   1ba88:	mov	fp, sp
   1ba8c:	cmp	r0, #0
   1ba90:	beq	1baac <__assert_fail@plt+0xa3dc>
   1ba94:	cmp	r1, #0
   1ba98:	beq	1bab8 <__assert_fail@plt+0xa3e8>
   1ba9c:	cmn	r1, #1
   1baa0:	ble	1bac4 <__assert_fail@plt+0xa3f4>
   1baa4:	pop	{fp, lr}
   1baa8:	b	1143c <realloc@plt>
   1baac:	mov	r0, r1
   1bab0:	pop	{fp, lr}
   1bab4:	b	1ba54 <__assert_fail@plt+0xa384>
   1bab8:	bl	1c018 <__assert_fail@plt+0xa948>
   1babc:	mov	r0, #0
   1bac0:	pop	{fp, pc}
   1bac4:	bl	11598 <__errno_location@plt>
   1bac8:	mov	r1, #12
   1bacc:	str	r1, [r0]
   1bad0:	mov	r0, #0
   1bad4:	pop	{fp, pc}
   1bad8:	mov	r0, #1
   1badc:	b	117d0 <__assert_fail@plt+0x100>
   1bae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bae4:	add	fp, sp, #28
   1bae8:	sub	sp, sp, #12
   1baec:	mov	r4, r3
   1baf0:	mov	r9, r2
   1baf4:	mov	r7, r1
   1baf8:	mov	r8, r0
   1bafc:	bl	11574 <strlen@plt>
   1bb00:	ldr	r6, [r7]
   1bb04:	cmp	r6, #0
   1bb08:	beq	1bbb4 <__assert_fail@plt+0xa4e4>
   1bb0c:	mov	r5, r0
   1bb10:	cmp	r9, #0
   1bb14:	beq	1bbc4 <__assert_fail@plt+0xa4f4>
   1bb18:	add	r0, r7, #4
   1bb1c:	mvn	sl, #0
   1bb20:	mov	r7, #0
   1bb24:	str	r9, [sp]
   1bb28:	str	r0, [sp, #8]
   1bb2c:	mov	r0, #0
   1bb30:	str	r0, [sp, #4]
   1bb34:	mov	r0, r9
   1bb38:	b	1bb7c <__assert_fail@plt+0xa4ac>
   1bb3c:	ldr	r0, [sp]
   1bb40:	mov	r1, r9
   1bb44:	mov	r2, r4
   1bb48:	mla	r0, sl, r4, r0
   1bb4c:	bl	11568 <bcmp@plt>
   1bb50:	ldr	r1, [sp, #4]
   1bb54:	cmp	r0, #0
   1bb58:	movwne	r0, #1
   1bb5c:	orr	r1, r1, r0
   1bb60:	str	r1, [sp, #4]
   1bb64:	ldr	r0, [sp, #8]
   1bb68:	add	r9, r9, r4
   1bb6c:	ldr	r6, [r0, r7, lsl #2]
   1bb70:	add	r7, r7, #1
   1bb74:	cmp	r6, #0
   1bb78:	beq	1bc38 <__assert_fail@plt+0xa568>
   1bb7c:	mov	r0, r6
   1bb80:	mov	r1, r8
   1bb84:	mov	r2, r5
   1bb88:	bl	11688 <strncmp@plt>
   1bb8c:	cmp	r0, #0
   1bb90:	bne	1bb64 <__assert_fail@plt+0xa494>
   1bb94:	mov	r0, r6
   1bb98:	bl	11574 <strlen@plt>
   1bb9c:	cmp	r0, r5
   1bba0:	beq	1bbb8 <__assert_fail@plt+0xa4e8>
   1bba4:	cmn	sl, #1
   1bba8:	bne	1bb3c <__assert_fail@plt+0xa46c>
   1bbac:	mov	sl, r7
   1bbb0:	b	1bb64 <__assert_fail@plt+0xa494>
   1bbb4:	mvn	r7, #0
   1bbb8:	mov	r0, r7
   1bbbc:	sub	sp, fp, #28
   1bbc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbc4:	add	r4, r7, #4
   1bbc8:	mov	r0, #0
   1bbcc:	mvn	r9, #0
   1bbd0:	mvn	sl, #0
   1bbd4:	mov	r7, #0
   1bbd8:	str	r0, [sp, #4]
   1bbdc:	b	1bc0c <__assert_fail@plt+0xa53c>
   1bbe0:	ldr	r1, [sp, #4]
   1bbe4:	subs	r0, sl, r9
   1bbe8:	movwne	r0, #1
   1bbec:	cmn	sl, #1
   1bbf0:	moveq	sl, r7
   1bbf4:	orr	r1, r1, r0
   1bbf8:	str	r1, [sp, #4]
   1bbfc:	ldr	r6, [r4, r7, lsl #2]
   1bc00:	add	r7, r7, #1
   1bc04:	cmp	r6, #0
   1bc08:	beq	1bc38 <__assert_fail@plt+0xa568>
   1bc0c:	mov	r0, r6
   1bc10:	mov	r1, r8
   1bc14:	mov	r2, r5
   1bc18:	bl	11688 <strncmp@plt>
   1bc1c:	cmp	r0, #0
   1bc20:	bne	1bbfc <__assert_fail@plt+0xa52c>
   1bc24:	mov	r0, r6
   1bc28:	bl	11574 <strlen@plt>
   1bc2c:	cmp	r0, r5
   1bc30:	bne	1bbe0 <__assert_fail@plt+0xa510>
   1bc34:	b	1bbb8 <__assert_fail@plt+0xa4e8>
   1bc38:	ldr	r0, [sp, #4]
   1bc3c:	tst	r0, #1
   1bc40:	mvnne	sl, #1
   1bc44:	mov	r0, sl
   1bc48:	sub	sp, fp, #28
   1bc4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc50:	push	{r4, r5, r6, r7, fp, lr}
   1bc54:	add	fp, sp, #16
   1bc58:	mov	r5, r0
   1bc5c:	ldr	r0, [r1]
   1bc60:	mvn	r4, #0
   1bc64:	cmp	r0, #0
   1bc68:	beq	1bc94 <__assert_fail@plt+0xa5c4>
   1bc6c:	add	r7, r1, #4
   1bc70:	mov	r6, #0
   1bc74:	mov	r1, r5
   1bc78:	bl	11388 <strcmp@plt>
   1bc7c:	cmp	r0, #0
   1bc80:	beq	1bc9c <__assert_fail@plt+0xa5cc>
   1bc84:	ldr	r0, [r7, r6, lsl #2]
   1bc88:	add	r6, r6, #1
   1bc8c:	cmp	r0, #0
   1bc90:	bne	1bc74 <__assert_fail@plt+0xa5a4>
   1bc94:	mov	r0, r4
   1bc98:	pop	{r4, r5, r6, r7, fp, pc}
   1bc9c:	mov	r0, r6
   1bca0:	pop	{r4, r5, r6, r7, fp, pc}
   1bca4:	push	{r4, r5, r6, sl, fp, lr}
   1bca8:	add	fp, sp, #16
   1bcac:	sub	sp, sp, #8
   1bcb0:	mov	r5, r0
   1bcb4:	movw	r0, #59518	; 0xe87e
   1bcb8:	mov	r4, r1
   1bcbc:	movw	r1, #59545	; 0xe899
   1bcc0:	cmn	r2, #1
   1bcc4:	mov	r2, #5
   1bcc8:	movt	r0, #1
   1bccc:	movt	r1, #1
   1bcd0:	moveq	r1, r0
   1bcd4:	mov	r0, #0
   1bcd8:	bl	11424 <dcgettext@plt>
   1bcdc:	mov	r6, r0
   1bce0:	mov	r0, #0
   1bce4:	mov	r1, #8
   1bce8:	mov	r2, r4
   1bcec:	bl	19878 <__assert_fail@plt+0x81a8>
   1bcf0:	mov	r4, r0
   1bcf4:	mov	r0, #1
   1bcf8:	mov	r1, r5
   1bcfc:	bl	19e38 <__assert_fail@plt+0x8768>
   1bd00:	str	r0, [sp]
   1bd04:	mov	r0, #0
   1bd08:	mov	r1, #0
   1bd0c:	mov	r2, r6
   1bd10:	mov	r3, r4
   1bd14:	bl	114c0 <error@plt>
   1bd18:	sub	sp, fp, #16
   1bd1c:	pop	{r4, r5, r6, sl, fp, pc}
   1bd20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd24:	add	fp, sp, #28
   1bd28:	sub	sp, sp, #4
   1bd2c:	mov	sl, r1
   1bd30:	movw	r1, #59574	; 0xe8b6
   1bd34:	mov	r4, r2
   1bd38:	mov	r6, r0
   1bd3c:	mov	r0, #0
   1bd40:	mov	r2, #5
   1bd44:	mov	r8, #0
   1bd48:	movt	r1, #1
   1bd4c:	bl	11424 <dcgettext@plt>
   1bd50:	movw	r1, #61904	; 0xf1d0
   1bd54:	movt	r1, #2
   1bd58:	ldr	r1, [r1]
   1bd5c:	bl	11364 <fputs_unlocked@plt>
   1bd60:	ldr	r7, [r6]
   1bd64:	cmp	r7, #0
   1bd68:	beq	1be24 <__assert_fail@plt+0xa754>
   1bd6c:	add	r0, r6, #4
   1bd70:	mov	r9, #0
   1bd74:	mov	r6, #0
   1bd78:	str	r0, [sp]
   1bd7c:	cmp	r9, #0
   1bd80:	bne	1bdd8 <__assert_fail@plt+0xa708>
   1bd84:	mov	r5, #0
   1bd88:	movw	r0, #61904	; 0xf1d0
   1bd8c:	movt	r0, #2
   1bd90:	ldr	r6, [r0]
   1bd94:	mov	r0, r7
   1bd98:	bl	19e48 <__assert_fail@plt+0x8778>
   1bd9c:	movw	r2, #59595	; 0xe8cb
   1bda0:	mov	r3, r0
   1bda4:	mov	r0, r6
   1bda8:	mov	r1, #1
   1bdac:	movt	r2, #1
   1bdb0:	bl	115f8 <__fprintf_chk@plt>
   1bdb4:	add	r6, sl, r5
   1bdb8:	ldr	r0, [sp]
   1bdbc:	add	r8, r8, r4
   1bdc0:	ldr	r7, [r0, -r9, lsl #2]
   1bdc4:	sub	r9, r9, #1
   1bdc8:	cmp	r7, #0
   1bdcc:	beq	1be24 <__assert_fail@plt+0xa754>
   1bdd0:	cmp	r9, #0
   1bdd4:	beq	1bd84 <__assert_fail@plt+0xa6b4>
   1bdd8:	add	r1, sl, r8
   1bddc:	mov	r0, r6
   1bde0:	mov	r2, r4
   1bde4:	bl	11568 <bcmp@plt>
   1bde8:	cmp	r0, #0
   1bdec:	mov	r5, r8
   1bdf0:	bne	1bd88 <__assert_fail@plt+0xa6b8>
   1bdf4:	movw	r0, #61904	; 0xf1d0
   1bdf8:	movt	r0, #2
   1bdfc:	ldr	r5, [r0]
   1be00:	mov	r0, r7
   1be04:	bl	19e48 <__assert_fail@plt+0x8778>
   1be08:	movw	r2, #56182	; 0xdb76
   1be0c:	mov	r3, r0
   1be10:	mov	r0, r5
   1be14:	mov	r1, #1
   1be18:	movt	r2, #1
   1be1c:	bl	115f8 <__fprintf_chk@plt>
   1be20:	b	1bdb8 <__assert_fail@plt+0xa6e8>
   1be24:	movw	r0, #61904	; 0xf1d0
   1be28:	movt	r0, #2
   1be2c:	ldr	r0, [r0]
   1be30:	ldr	r1, [r0, #20]
   1be34:	ldr	r2, [r0, #24]
   1be38:	cmp	r1, r2
   1be3c:	addcc	r2, r1, #1
   1be40:	strcc	r2, [r0, #20]
   1be44:	movcc	r0, #10
   1be48:	strbcc	r0, [r1]
   1be4c:	subcc	sp, fp, #28
   1be50:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be54:	mov	r1, #10
   1be58:	sub	sp, fp, #28
   1be5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be60:	b	11628 <__overflow@plt>
   1be64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be68:	add	fp, sp, #28
   1be6c:	sub	sp, sp, #12
   1be70:	mov	sl, r0
   1be74:	ldr	r0, [fp, #16]
   1be78:	ldr	r9, [fp, #8]
   1be7c:	mov	r5, r3
   1be80:	mov	r8, r2
   1be84:	mov	r6, r1
   1be88:	cmp	r0, #0
   1be8c:	beq	1bebc <__assert_fail@plt+0xa7ec>
   1be90:	mov	r0, r6
   1be94:	mov	r1, r8
   1be98:	mov	r2, r5
   1be9c:	mov	r3, r9
   1bea0:	bl	1bae0 <__assert_fail@plt+0xa410>
   1bea4:	mov	r4, r0
   1bea8:	cmn	r4, #1
   1beac:	ble	1bf0c <__assert_fail@plt+0xa83c>
   1beb0:	mov	r0, r4
   1beb4:	sub	sp, fp, #28
   1beb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bebc:	ldr	r0, [r8]
   1bec0:	movw	r7, #59518	; 0xe87e
   1bec4:	str	r5, [sp, #8]
   1bec8:	movt	r7, #1
   1becc:	cmp	r0, #0
   1bed0:	beq	1bf24 <__assert_fail@plt+0xa854>
   1bed4:	add	r5, r8, #4
   1bed8:	mov	r4, #0
   1bedc:	mov	r1, r6
   1bee0:	bl	11388 <strcmp@plt>
   1bee4:	cmp	r0, #0
   1bee8:	beq	1bf00 <__assert_fail@plt+0xa830>
   1beec:	ldr	r0, [r5, r4, lsl #2]
   1bef0:	add	r4, r4, #1
   1bef4:	cmp	r0, #0
   1bef8:	bne	1bedc <__assert_fail@plt+0xa80c>
   1befc:	b	1bf24 <__assert_fail@plt+0xa854>
   1bf00:	ldr	r5, [sp, #8]
   1bf04:	cmn	r4, #1
   1bf08:	bgt	1beb0 <__assert_fail@plt+0xa7e0>
   1bf0c:	movw	r0, #59518	; 0xe87e
   1bf10:	movw	r7, #59545	; 0xe899
   1bf14:	str	r5, [sp, #8]
   1bf18:	movt	r0, #1
   1bf1c:	movt	r7, #1
   1bf20:	moveq	r7, r0
   1bf24:	ldr	r5, [fp, #12]
   1bf28:	mov	r0, #0
   1bf2c:	mov	r1, r7
   1bf30:	mov	r2, #5
   1bf34:	bl	11424 <dcgettext@plt>
   1bf38:	mov	r4, r0
   1bf3c:	mov	r0, #0
   1bf40:	mov	r1, #8
   1bf44:	mov	r2, r6
   1bf48:	bl	19878 <__assert_fail@plt+0x81a8>
   1bf4c:	mov	r6, r0
   1bf50:	mov	r0, #1
   1bf54:	mov	r1, sl
   1bf58:	bl	19e38 <__assert_fail@plt+0x8768>
   1bf5c:	str	r0, [sp]
   1bf60:	mov	r0, #0
   1bf64:	mov	r1, #0
   1bf68:	mov	r2, r4
   1bf6c:	mov	r3, r6
   1bf70:	bl	114c0 <error@plt>
   1bf74:	ldr	r1, [sp, #8]
   1bf78:	mov	r0, r8
   1bf7c:	mov	r2, r9
   1bf80:	bl	1bd20 <__assert_fail@plt+0xa650>
   1bf84:	blx	r5
   1bf88:	mvn	r4, #0
   1bf8c:	mov	r0, r4
   1bf90:	sub	sp, fp, #28
   1bf94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf98:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bf9c:	add	fp, sp, #24
   1bfa0:	ldr	r6, [r1]
   1bfa4:	cmp	r6, #0
   1bfa8:	beq	1c00c <__assert_fail@plt+0xa93c>
   1bfac:	mov	r8, r1
   1bfb0:	mov	r7, r2
   1bfb4:	mov	r1, r2
   1bfb8:	mov	r2, r3
   1bfbc:	mov	r4, r3
   1bfc0:	mov	r9, r0
   1bfc4:	bl	11568 <bcmp@plt>
   1bfc8:	cmp	r0, #0
   1bfcc:	beq	1c004 <__assert_fail@plt+0xa934>
   1bfd0:	add	r7, r7, r4
   1bfd4:	add	r5, r8, #4
   1bfd8:	ldr	r6, [r5]
   1bfdc:	cmp	r6, #0
   1bfe0:	beq	1c00c <__assert_fail@plt+0xa93c>
   1bfe4:	mov	r0, r9
   1bfe8:	mov	r1, r7
   1bfec:	mov	r2, r4
   1bff0:	bl	11568 <bcmp@plt>
   1bff4:	add	r7, r7, r4
   1bff8:	add	r5, r5, #4
   1bffc:	cmp	r0, #0
   1c000:	bne	1bfd8 <__assert_fail@plt+0xa908>
   1c004:	mov	r0, r6
   1c008:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c00c:	mov	r6, #0
   1c010:	mov	r0, r6
   1c014:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c018:	push	{r4, r5, r6, sl, fp, lr}
   1c01c:	add	fp, sp, #16
   1c020:	mov	r4, r0
   1c024:	bl	11598 <__errno_location@plt>
   1c028:	ldr	r6, [r0]
   1c02c:	mov	r5, r0
   1c030:	mov	r0, r4
   1c034:	bl	113d0 <free@plt>
   1c038:	str	r6, [r5]
   1c03c:	pop	{r4, r5, r6, sl, fp, pc}
   1c040:	push	{fp, lr}
   1c044:	mov	fp, sp
   1c048:	mov	r0, #14
   1c04c:	bl	11658 <nl_langinfo@plt>
   1c050:	movw	r1, #52909	; 0xcead
   1c054:	cmp	r0, #0
   1c058:	movt	r1, #1
   1c05c:	movne	r1, r0
   1c060:	movw	r0, #59603	; 0xe8d3
   1c064:	ldrb	r2, [r1]
   1c068:	movt	r0, #1
   1c06c:	cmp	r2, #0
   1c070:	movne	r0, r1
   1c074:	pop	{fp, pc}
   1c078:	push	{r4, r5, r6, r7, fp, lr}
   1c07c:	add	fp, sp, #16
   1c080:	sub	sp, sp, #8
   1c084:	cmp	r0, #0
   1c088:	add	r5, sp, #4
   1c08c:	mov	r7, r2
   1c090:	mov	r4, r1
   1c094:	movne	r5, r0
   1c098:	mov	r0, r5
   1c09c:	bl	114b4 <mbrtowc@plt>
   1c0a0:	mov	r6, r0
   1c0a4:	cmp	r7, #0
   1c0a8:	beq	1c0d0 <__assert_fail@plt+0xaa00>
   1c0ac:	cmn	r6, #2
   1c0b0:	bcc	1c0d0 <__assert_fail@plt+0xaa00>
   1c0b4:	mov	r0, #0
   1c0b8:	bl	1c118 <__assert_fail@plt+0xaa48>
   1c0bc:	cmp	r0, #0
   1c0c0:	bne	1c0d0 <__assert_fail@plt+0xaa00>
   1c0c4:	ldrb	r0, [r4]
   1c0c8:	mov	r6, #1
   1c0cc:	str	r0, [r5]
   1c0d0:	mov	r0, r6
   1c0d4:	sub	sp, fp, #16
   1c0d8:	pop	{r4, r5, r6, r7, fp, pc}
   1c0dc:	cmp	r2, #0
   1c0e0:	beq	1c110 <__assert_fail@plt+0xaa40>
   1c0e4:	mvn	r3, #0
   1c0e8:	udiv	r3, r3, r2
   1c0ec:	cmp	r3, r1
   1c0f0:	bcs	1c110 <__assert_fail@plt+0xaa40>
   1c0f4:	push	{fp, lr}
   1c0f8:	mov	fp, sp
   1c0fc:	bl	11598 <__errno_location@plt>
   1c100:	mov	r1, #12
   1c104:	str	r1, [r0]
   1c108:	mov	r0, #0
   1c10c:	pop	{fp, pc}
   1c110:	mul	r1, r2, r1
   1c114:	b	1ba84 <__assert_fail@plt+0xa3b4>
   1c118:	push	{r4, sl, fp, lr}
   1c11c:	add	fp, sp, #8
   1c120:	sub	sp, sp, #264	; 0x108
   1c124:	add	r1, sp, #7
   1c128:	movw	r2, #257	; 0x101
   1c12c:	bl	1c184 <__assert_fail@plt+0xaab4>
   1c130:	mov	r4, #0
   1c134:	cmp	r0, #0
   1c138:	bne	1c178 <__assert_fail@plt+0xaaa8>
   1c13c:	movw	r1, #59609	; 0xe8d9
   1c140:	add	r0, sp, #7
   1c144:	mov	r2, #2
   1c148:	movt	r1, #1
   1c14c:	bl	11568 <bcmp@plt>
   1c150:	cmp	r0, #0
   1c154:	beq	1c178 <__assert_fail@plt+0xaaa8>
   1c158:	movw	r1, #59611	; 0xe8db
   1c15c:	add	r0, sp, #7
   1c160:	mov	r2, #6
   1c164:	movt	r1, #1
   1c168:	bl	11568 <bcmp@plt>
   1c16c:	cmp	r0, #0
   1c170:	mov	r4, r0
   1c174:	movwne	r4, #1
   1c178:	mov	r0, r4
   1c17c:	sub	sp, fp, #8
   1c180:	pop	{r4, sl, fp, pc}
   1c184:	push	{r4, r5, r6, r7, fp, lr}
   1c188:	add	fp, sp, #16
   1c18c:	mov	r4, r1
   1c190:	mov	r1, #0
   1c194:	mov	r6, r2
   1c198:	bl	11634 <setlocale@plt>
   1c19c:	cmp	r0, #0
   1c1a0:	beq	1c1d0 <__assert_fail@plt+0xab00>
   1c1a4:	mov	r7, r0
   1c1a8:	bl	11574 <strlen@plt>
   1c1ac:	cmp	r0, r6
   1c1b0:	bcs	1c1ec <__assert_fail@plt+0xab1c>
   1c1b4:	add	r2, r0, #1
   1c1b8:	mov	r0, r4
   1c1bc:	mov	r1, r7
   1c1c0:	bl	113f4 <memcpy@plt>
   1c1c4:	mov	r5, #0
   1c1c8:	mov	r0, r5
   1c1cc:	pop	{r4, r5, r6, r7, fp, pc}
   1c1d0:	mov	r5, #22
   1c1d4:	cmp	r6, #0
   1c1d8:	beq	1c214 <__assert_fail@plt+0xab44>
   1c1dc:	mov	r0, #0
   1c1e0:	strb	r0, [r4]
   1c1e4:	mov	r0, r5
   1c1e8:	pop	{r4, r5, r6, r7, fp, pc}
   1c1ec:	mov	r5, #34	; 0x22
   1c1f0:	cmp	r6, #0
   1c1f4:	beq	1c214 <__assert_fail@plt+0xab44>
   1c1f8:	sub	r6, r6, #1
   1c1fc:	mov	r0, r4
   1c200:	mov	r1, r7
   1c204:	mov	r2, r6
   1c208:	bl	113f4 <memcpy@plt>
   1c20c:	mov	r0, #0
   1c210:	strb	r0, [r4, r6]
   1c214:	mov	r0, r5
   1c218:	pop	{r4, r5, r6, r7, fp, pc}
   1c21c:	mov	r1, #0
   1c220:	b	11634 <setlocale@plt>
   1c224:	eor	r1, r1, #-2147483648	; 0x80000000
   1c228:	b	1c230 <__assert_fail@plt+0xab60>
   1c22c:	eor	r3, r3, #-2147483648	; 0x80000000
   1c230:	push	{r4, r5, lr}
   1c234:	lsl	r4, r1, #1
   1c238:	lsl	r5, r3, #1
   1c23c:	teq	r4, r5
   1c240:	teqeq	r0, r2
   1c244:	orrsne	ip, r4, r0
   1c248:	orrsne	ip, r5, r2
   1c24c:	mvnsne	ip, r4, asr #21
   1c250:	mvnsne	ip, r5, asr #21
   1c254:	beq	1c440 <__assert_fail@plt+0xad70>
   1c258:	lsr	r4, r4, #21
   1c25c:	rsbs	r5, r4, r5, lsr #21
   1c260:	rsblt	r5, r5, #0
   1c264:	ble	1c284 <__assert_fail@plt+0xabb4>
   1c268:	add	r4, r4, r5
   1c26c:	eor	r2, r0, r2
   1c270:	eor	r3, r1, r3
   1c274:	eor	r0, r2, r0
   1c278:	eor	r1, r3, r1
   1c27c:	eor	r2, r0, r2
   1c280:	eor	r3, r1, r3
   1c284:	cmp	r5, #54	; 0x36
   1c288:	pophi	{r4, r5, pc}
   1c28c:	tst	r1, #-2147483648	; 0x80000000
   1c290:	lsl	r1, r1, #12
   1c294:	mov	ip, #1048576	; 0x100000
   1c298:	orr	r1, ip, r1, lsr #12
   1c29c:	beq	1c2a8 <__assert_fail@plt+0xabd8>
   1c2a0:	rsbs	r0, r0, #0
   1c2a4:	rsc	r1, r1, #0
   1c2a8:	tst	r3, #-2147483648	; 0x80000000
   1c2ac:	lsl	r3, r3, #12
   1c2b0:	orr	r3, ip, r3, lsr #12
   1c2b4:	beq	1c2c0 <__assert_fail@plt+0xabf0>
   1c2b8:	rsbs	r2, r2, #0
   1c2bc:	rsc	r3, r3, #0
   1c2c0:	teq	r4, r5
   1c2c4:	beq	1c428 <__assert_fail@plt+0xad58>
   1c2c8:	sub	r4, r4, #1
   1c2cc:	rsbs	lr, r5, #32
   1c2d0:	blt	1c2ec <__assert_fail@plt+0xac1c>
   1c2d4:	lsl	ip, r2, lr
   1c2d8:	adds	r0, r0, r2, lsr r5
   1c2dc:	adc	r1, r1, #0
   1c2e0:	adds	r0, r0, r3, lsl lr
   1c2e4:	adcs	r1, r1, r3, asr r5
   1c2e8:	b	1c308 <__assert_fail@plt+0xac38>
   1c2ec:	sub	r5, r5, #32
   1c2f0:	add	lr, lr, #32
   1c2f4:	cmp	r2, #1
   1c2f8:	lsl	ip, r3, lr
   1c2fc:	orrcs	ip, ip, #2
   1c300:	adds	r0, r0, r3, asr r5
   1c304:	adcs	r1, r1, r3, asr #31
   1c308:	and	r5, r1, #-2147483648	; 0x80000000
   1c30c:	bpl	1c31c <__assert_fail@plt+0xac4c>
   1c310:	rsbs	ip, ip, #0
   1c314:	rscs	r0, r0, #0
   1c318:	rsc	r1, r1, #0
   1c31c:	cmp	r1, #1048576	; 0x100000
   1c320:	bcc	1c360 <__assert_fail@plt+0xac90>
   1c324:	cmp	r1, #2097152	; 0x200000
   1c328:	bcc	1c348 <__assert_fail@plt+0xac78>
   1c32c:	lsrs	r1, r1, #1
   1c330:	rrxs	r0, r0
   1c334:	rrx	ip, ip
   1c338:	add	r4, r4, #1
   1c33c:	lsl	r2, r4, #21
   1c340:	cmn	r2, #4194304	; 0x400000
   1c344:	bcs	1c4a0 <__assert_fail@plt+0xadd0>
   1c348:	cmp	ip, #-2147483648	; 0x80000000
   1c34c:	lsrseq	ip, r0, #1
   1c350:	adcs	r0, r0, #0
   1c354:	adc	r1, r1, r4, lsl #20
   1c358:	orr	r1, r1, r5
   1c35c:	pop	{r4, r5, pc}
   1c360:	lsls	ip, ip, #1
   1c364:	adcs	r0, r0, r0
   1c368:	adc	r1, r1, r1
   1c36c:	tst	r1, #1048576	; 0x100000
   1c370:	sub	r4, r4, #1
   1c374:	bne	1c348 <__assert_fail@plt+0xac78>
   1c378:	teq	r1, #0
   1c37c:	moveq	r1, r0
   1c380:	moveq	r0, #0
   1c384:	clz	r3, r1
   1c388:	addeq	r3, r3, #32
   1c38c:	sub	r3, r3, #11
   1c390:	subs	r2, r3, #32
   1c394:	bge	1c3b8 <__assert_fail@plt+0xace8>
   1c398:	adds	r2, r2, #12
   1c39c:	ble	1c3b4 <__assert_fail@plt+0xace4>
   1c3a0:	add	ip, r2, #20
   1c3a4:	rsb	r2, r2, #12
   1c3a8:	lsl	r0, r1, ip
   1c3ac:	lsr	r1, r1, r2
   1c3b0:	b	1c3c8 <__assert_fail@plt+0xacf8>
   1c3b4:	add	r2, r2, #20
   1c3b8:	rsble	ip, r2, #32
   1c3bc:	lsl	r1, r1, r2
   1c3c0:	orrle	r1, r1, r0, lsr ip
   1c3c4:	lslle	r0, r0, r2
   1c3c8:	subs	r4, r4, r3
   1c3cc:	addge	r1, r1, r4, lsl #20
   1c3d0:	orrge	r1, r1, r5
   1c3d4:	popge	{r4, r5, pc}
   1c3d8:	mvn	r4, r4
   1c3dc:	subs	r4, r4, #31
   1c3e0:	bge	1c41c <__assert_fail@plt+0xad4c>
   1c3e4:	adds	r4, r4, #12
   1c3e8:	bgt	1c404 <__assert_fail@plt+0xad34>
   1c3ec:	add	r4, r4, #20
   1c3f0:	rsb	r2, r4, #32
   1c3f4:	lsr	r0, r0, r4
   1c3f8:	orr	r0, r0, r1, lsl r2
   1c3fc:	orr	r1, r5, r1, lsr r4
   1c400:	pop	{r4, r5, pc}
   1c404:	rsb	r4, r4, #12
   1c408:	rsb	r2, r4, #32
   1c40c:	lsr	r0, r0, r2
   1c410:	orr	r0, r0, r1, lsl r4
   1c414:	mov	r1, r5
   1c418:	pop	{r4, r5, pc}
   1c41c:	lsr	r0, r1, r4
   1c420:	mov	r1, r5
   1c424:	pop	{r4, r5, pc}
   1c428:	teq	r4, #0
   1c42c:	eor	r3, r3, #1048576	; 0x100000
   1c430:	eoreq	r1, r1, #1048576	; 0x100000
   1c434:	addeq	r4, r4, #1
   1c438:	subne	r5, r5, #1
   1c43c:	b	1c2c8 <__assert_fail@plt+0xabf8>
   1c440:	mvns	ip, r4, asr #21
   1c444:	mvnsne	ip, r5, asr #21
   1c448:	beq	1c4b0 <__assert_fail@plt+0xade0>
   1c44c:	teq	r4, r5
   1c450:	teqeq	r0, r2
   1c454:	beq	1c468 <__assert_fail@plt+0xad98>
   1c458:	orrs	ip, r4, r0
   1c45c:	moveq	r1, r3
   1c460:	moveq	r0, r2
   1c464:	pop	{r4, r5, pc}
   1c468:	teq	r1, r3
   1c46c:	movne	r1, #0
   1c470:	movne	r0, #0
   1c474:	popne	{r4, r5, pc}
   1c478:	lsrs	ip, r4, #21
   1c47c:	bne	1c490 <__assert_fail@plt+0xadc0>
   1c480:	lsls	r0, r0, #1
   1c484:	adcs	r1, r1, r1
   1c488:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1c48c:	pop	{r4, r5, pc}
   1c490:	adds	r4, r4, #4194304	; 0x400000
   1c494:	addcc	r1, r1, #1048576	; 0x100000
   1c498:	popcc	{r4, r5, pc}
   1c49c:	and	r5, r1, #-2147483648	; 0x80000000
   1c4a0:	orr	r1, r5, #2130706432	; 0x7f000000
   1c4a4:	orr	r1, r1, #15728640	; 0xf00000
   1c4a8:	mov	r0, #0
   1c4ac:	pop	{r4, r5, pc}
   1c4b0:	mvns	ip, r4, asr #21
   1c4b4:	movne	r1, r3
   1c4b8:	movne	r0, r2
   1c4bc:	mvnseq	ip, r5, asr #21
   1c4c0:	movne	r3, r1
   1c4c4:	movne	r2, r0
   1c4c8:	orrs	r4, r0, r1, lsl #12
   1c4cc:	orrseq	r5, r2, r3, lsl #12
   1c4d0:	teqeq	r1, r3
   1c4d4:	orrne	r1, r1, #524288	; 0x80000
   1c4d8:	pop	{r4, r5, pc}
   1c4dc:	teq	r0, #0
   1c4e0:	moveq	r1, #0
   1c4e4:	bxeq	lr
   1c4e8:	push	{r4, r5, lr}
   1c4ec:	mov	r4, #1024	; 0x400
   1c4f0:	add	r4, r4, #50	; 0x32
   1c4f4:	mov	r5, #0
   1c4f8:	mov	r1, #0
   1c4fc:	b	1c378 <__assert_fail@plt+0xaca8>
   1c500:	teq	r0, #0
   1c504:	moveq	r1, #0
   1c508:	bxeq	lr
   1c50c:	push	{r4, r5, lr}
   1c510:	mov	r4, #1024	; 0x400
   1c514:	add	r4, r4, #50	; 0x32
   1c518:	ands	r5, r0, #-2147483648	; 0x80000000
   1c51c:	rsbmi	r0, r0, #0
   1c520:	mov	r1, #0
   1c524:	b	1c378 <__assert_fail@plt+0xaca8>
   1c528:	lsls	r2, r0, #1
   1c52c:	asr	r1, r2, #3
   1c530:	rrx	r1, r1
   1c534:	lsl	r0, r2, #28
   1c538:	andsne	r3, r2, #-16777216	; 0xff000000
   1c53c:	teqne	r3, #-16777216	; 0xff000000
   1c540:	eorne	r1, r1, #939524096	; 0x38000000
   1c544:	bxne	lr
   1c548:	bics	r2, r2, #-16777216	; 0xff000000
   1c54c:	bxeq	lr
   1c550:	teq	r3, #-16777216	; 0xff000000
   1c554:	orreq	r1, r1, #524288	; 0x80000
   1c558:	bxeq	lr
   1c55c:	push	{r4, r5, lr}
   1c560:	mov	r4, #896	; 0x380
   1c564:	and	r5, r1, #-2147483648	; 0x80000000
   1c568:	bic	r1, r1, #-2147483648	; 0x80000000
   1c56c:	b	1c378 <__assert_fail@plt+0xaca8>
   1c570:	orrs	r2, r0, r1
   1c574:	bxeq	lr
   1c578:	push	{r4, r5, lr}
   1c57c:	mov	r5, #0
   1c580:	b	1c5a0 <__assert_fail@plt+0xaed0>
   1c584:	orrs	r2, r0, r1
   1c588:	bxeq	lr
   1c58c:	push	{r4, r5, lr}
   1c590:	ands	r5, r1, #-2147483648	; 0x80000000
   1c594:	bpl	1c5a0 <__assert_fail@plt+0xaed0>
   1c598:	rsbs	r0, r0, #0
   1c59c:	rsc	r1, r1, #0
   1c5a0:	mov	r4, #1024	; 0x400
   1c5a4:	add	r4, r4, #50	; 0x32
   1c5a8:	lsrs	ip, r1, #22
   1c5ac:	beq	1c31c <__assert_fail@plt+0xac4c>
   1c5b0:	mov	r2, #3
   1c5b4:	lsrs	ip, ip, #3
   1c5b8:	addne	r2, r2, #3
   1c5bc:	lsrs	ip, ip, #3
   1c5c0:	addne	r2, r2, #3
   1c5c4:	add	r2, r2, ip, lsr #3
   1c5c8:	rsb	r3, r2, #32
   1c5cc:	lsl	ip, r0, r3
   1c5d0:	lsr	r0, r0, r2
   1c5d4:	orr	r0, r0, r1, lsl r3
   1c5d8:	lsr	r1, r1, r2
   1c5dc:	add	r4, r4, r2
   1c5e0:	b	1c31c <__assert_fail@plt+0xac4c>
   1c5e4:	cmp	r3, #0
   1c5e8:	cmpeq	r2, #0
   1c5ec:	bne	1c610 <__assert_fail@plt+0xaf40>
   1c5f0:	cmp	r1, #0
   1c5f4:	movlt	r1, #-2147483648	; 0x80000000
   1c5f8:	movlt	r0, #0
   1c5fc:	blt	1c60c <__assert_fail@plt+0xaf3c>
   1c600:	cmpeq	r0, #0
   1c604:	mvnne	r1, #-2147483648	; 0x80000000
   1c608:	mvnne	r0, #0
   1c60c:	b	1c6f4 <__assert_fail@plt+0xb024>
   1c610:	sub	sp, sp, #8
   1c614:	push	{sp, lr}
   1c618:	cmp	r1, #0
   1c61c:	blt	1c63c <__assert_fail@plt+0xaf6c>
   1c620:	cmp	r3, #0
   1c624:	blt	1c670 <__assert_fail@plt+0xafa0>
   1c628:	bl	1c748 <__assert_fail@plt+0xb078>
   1c62c:	ldr	lr, [sp, #4]
   1c630:	add	sp, sp, #8
   1c634:	pop	{r2, r3}
   1c638:	bx	lr
   1c63c:	rsbs	r0, r0, #0
   1c640:	sbc	r1, r1, r1, lsl #1
   1c644:	cmp	r3, #0
   1c648:	blt	1c694 <__assert_fail@plt+0xafc4>
   1c64c:	bl	1c748 <__assert_fail@plt+0xb078>
   1c650:	ldr	lr, [sp, #4]
   1c654:	add	sp, sp, #8
   1c658:	pop	{r2, r3}
   1c65c:	rsbs	r0, r0, #0
   1c660:	sbc	r1, r1, r1, lsl #1
   1c664:	rsbs	r2, r2, #0
   1c668:	sbc	r3, r3, r3, lsl #1
   1c66c:	bx	lr
   1c670:	rsbs	r2, r2, #0
   1c674:	sbc	r3, r3, r3, lsl #1
   1c678:	bl	1c748 <__assert_fail@plt+0xb078>
   1c67c:	ldr	lr, [sp, #4]
   1c680:	add	sp, sp, #8
   1c684:	pop	{r2, r3}
   1c688:	rsbs	r0, r0, #0
   1c68c:	sbc	r1, r1, r1, lsl #1
   1c690:	bx	lr
   1c694:	rsbs	r2, r2, #0
   1c698:	sbc	r3, r3, r3, lsl #1
   1c69c:	bl	1c748 <__assert_fail@plt+0xb078>
   1c6a0:	ldr	lr, [sp, #4]
   1c6a4:	add	sp, sp, #8
   1c6a8:	pop	{r2, r3}
   1c6ac:	rsbs	r2, r2, #0
   1c6b0:	sbc	r3, r3, r3, lsl #1
   1c6b4:	bx	lr
   1c6b8:	cmp	r3, #0
   1c6bc:	cmpeq	r2, #0
   1c6c0:	bne	1c6d8 <__assert_fail@plt+0xb008>
   1c6c4:	cmp	r1, #0
   1c6c8:	cmpeq	r0, #0
   1c6cc:	mvnne	r1, #0
   1c6d0:	mvnne	r0, #0
   1c6d4:	b	1c6f4 <__assert_fail@plt+0xb024>
   1c6d8:	sub	sp, sp, #8
   1c6dc:	push	{sp, lr}
   1c6e0:	bl	1c748 <__assert_fail@plt+0xb078>
   1c6e4:	ldr	lr, [sp, #4]
   1c6e8:	add	sp, sp, #8
   1c6ec:	pop	{r2, r3}
   1c6f0:	bx	lr
   1c6f4:	push	{r1, lr}
   1c6f8:	mov	r0, #8
   1c6fc:	bl	11370 <raise@plt>
   1c700:	pop	{r1, pc}
   1c704:	andeq	r0, r0, r0
   1c708:	vmov	d6, r0, r1
   1c70c:	vldr	d7, [pc, #36]	; 1c738 <__assert_fail@plt+0xb068>
   1c710:	vldr	d5, [pc, #40]	; 1c740 <__assert_fail@plt+0xb070>
   1c714:	vmul.f64	d7, d6, d7
   1c718:	vcvt.u32.f64	s14, d7
   1c71c:	vcvt.f64.u32	d4, s14
   1c720:	vmov	r1, s14
   1c724:	vmls.f64	d6, d4, d5
   1c728:	vcvt.u32.f64	s15, d6
   1c72c:	vmov	r0, s15
   1c730:	bx	lr
   1c734:	nop			; (mov r0, r0)
   1c738:	andeq	r0, r0, r0
   1c73c:	ldclcc	0, cr0, [r0]
   1c740:	andeq	r0, r0, r0
   1c744:	mvnsmi	r0, r0
   1c748:	cmp	r1, r3
   1c74c:	cmpeq	r0, r2
   1c750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c754:	mov	r4, r0
   1c758:	movcc	r0, #0
   1c75c:	mov	r5, r1
   1c760:	ldr	lr, [sp, #36]	; 0x24
   1c764:	movcc	r1, r0
   1c768:	bcc	1c864 <__assert_fail@plt+0xb194>
   1c76c:	cmp	r3, #0
   1c770:	clzeq	ip, r2
   1c774:	clzne	ip, r3
   1c778:	addeq	ip, ip, #32
   1c77c:	cmp	r5, #0
   1c780:	clzeq	r1, r4
   1c784:	addeq	r1, r1, #32
   1c788:	clzne	r1, r5
   1c78c:	sub	ip, ip, r1
   1c790:	sub	sl, ip, #32
   1c794:	lsl	r9, r3, ip
   1c798:	rsb	fp, ip, #32
   1c79c:	orr	r9, r9, r2, lsl sl
   1c7a0:	orr	r9, r9, r2, lsr fp
   1c7a4:	lsl	r8, r2, ip
   1c7a8:	cmp	r5, r9
   1c7ac:	cmpeq	r4, r8
   1c7b0:	movcc	r0, #0
   1c7b4:	movcc	r1, r0
   1c7b8:	bcc	1c7d4 <__assert_fail@plt+0xb104>
   1c7bc:	mov	r0, #1
   1c7c0:	subs	r4, r4, r8
   1c7c4:	lsl	r1, r0, sl
   1c7c8:	orr	r1, r1, r0, lsr fp
   1c7cc:	lsl	r0, r0, ip
   1c7d0:	sbc	r5, r5, r9
   1c7d4:	cmp	ip, #0
   1c7d8:	beq	1c864 <__assert_fail@plt+0xb194>
   1c7dc:	lsr	r6, r8, #1
   1c7e0:	orr	r6, r6, r9, lsl #31
   1c7e4:	lsr	r7, r9, #1
   1c7e8:	mov	r2, ip
   1c7ec:	b	1c810 <__assert_fail@plt+0xb140>
   1c7f0:	subs	r3, r4, r6
   1c7f4:	sbc	r8, r5, r7
   1c7f8:	adds	r3, r3, r3
   1c7fc:	adc	r8, r8, r8
   1c800:	adds	r4, r3, #1
   1c804:	adc	r5, r8, #0
   1c808:	subs	r2, r2, #1
   1c80c:	beq	1c82c <__assert_fail@plt+0xb15c>
   1c810:	cmp	r5, r7
   1c814:	cmpeq	r4, r6
   1c818:	bcs	1c7f0 <__assert_fail@plt+0xb120>
   1c81c:	adds	r4, r4, r4
   1c820:	adc	r5, r5, r5
   1c824:	subs	r2, r2, #1
   1c828:	bne	1c810 <__assert_fail@plt+0xb140>
   1c82c:	lsr	r3, r4, ip
   1c830:	orr	r3, r3, r5, lsl fp
   1c834:	lsr	r2, r5, ip
   1c838:	orr	r3, r3, r5, lsr sl
   1c83c:	adds	r0, r0, r4
   1c840:	mov	r4, r3
   1c844:	lsl	r3, r2, ip
   1c848:	orr	r3, r3, r4, lsl sl
   1c84c:	lsl	ip, r4, ip
   1c850:	orr	r3, r3, r4, lsr fp
   1c854:	adc	r1, r1, r5
   1c858:	subs	r0, r0, ip
   1c85c:	mov	r5, r2
   1c860:	sbc	r1, r1, r3
   1c864:	cmp	lr, #0
   1c868:	strdne	r4, [lr]
   1c86c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c870:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c874:	mov	r7, r0
   1c878:	ldr	r6, [pc, #72]	; 1c8c8 <__assert_fail@plt+0xb1f8>
   1c87c:	ldr	r5, [pc, #72]	; 1c8cc <__assert_fail@plt+0xb1fc>
   1c880:	add	r6, pc, r6
   1c884:	add	r5, pc, r5
   1c888:	sub	r6, r6, r5
   1c88c:	mov	r8, r1
   1c890:	mov	r9, r2
   1c894:	bl	11338 <calloc@plt-0x20>
   1c898:	asrs	r6, r6, #2
   1c89c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c8a0:	mov	r4, #0
   1c8a4:	add	r4, r4, #1
   1c8a8:	ldr	r3, [r5], #4
   1c8ac:	mov	r2, r9
   1c8b0:	mov	r1, r8
   1c8b4:	mov	r0, r7
   1c8b8:	blx	r3
   1c8bc:	cmp	r6, r4
   1c8c0:	bne	1c8a4 <__assert_fail@plt+0xb1d4>
   1c8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c8c8:	andeq	r2, r1, r4, lsl #13
   1c8cc:	andeq	r2, r1, ip, ror r6
   1c8d0:	bx	lr
   1c8d4:	ldr	r3, [pc, #12]	; 1c8e8 <__assert_fail@plt+0xb218>
   1c8d8:	mov	r1, #0
   1c8dc:	add	r3, pc, r3
   1c8e0:	ldr	r2, [r3]
   1c8e4:	b	115b0 <__cxa_atexit@plt>
   1c8e8:	andeq	r2, r1, r0, ror #16

Disassembly of section .fini:

0001c8ec <.fini>:
   1c8ec:	push	{r3, lr}
   1c8f0:	pop	{r3, pc}
