
../repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

0001067c <.init>:
   1067c:	push	{r3, lr}
   10680:	bl	10720 <_start@@Base+0x3c>
   10684:	pop	{r3, pc}

Disassembly of section .plt:

00010688 <printf@plt-0x14>:
   10688:	push	{lr}		; (str lr, [sp, #-4]!)
   1068c:	ldr	lr, [pc, #4]	; 10698 <printf@plt-0x4>
   10690:	add	lr, pc, lr
   10694:	ldr	pc, [lr, #8]!
   10698:	andeq	r0, r1, r8, ror #18

0001069c <printf@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2408]!	; 0x968

000106a8 <__libc_start_main@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2400]!	; 0x960

000106b4 <__gmon_start__@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2392]!	; 0x958

000106c0 <putchar@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2384]!	; 0x950

000106cc <__isoc99_scanf@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2376]!	; 0x948

000106d8 <abort@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2368]!	; 0x940

Disassembly of section .text:

000106e4 <_start@@Base>:
   106e4:	mov	fp, #0
   106e8:	mov	lr, #0
   106ec:	pop	{r1}		; (ldr r1, [sp], #4)
   106f0:	mov	r2, sp
   106f4:	push	{r2}		; (str r2, [sp, #-4]!)
   106f8:	push	{r0}		; (str r0, [sp, #-4]!)
   106fc:	ldr	ip, [pc, #16]	; 10714 <_start@@Base+0x30>
   10700:	push	{ip}		; (str ip, [sp, #-4]!)
   10704:	ldr	r0, [pc, #12]	; 10718 <_start@@Base+0x34>
   10708:	ldr	r3, [pc, #12]	; 1071c <_start@@Base+0x38>
   1070c:	bl	106a8 <__libc_start_main@plt>
   10710:	bl	106d8 <abort@plt>
   10714:			; <UNDEFINED> instruction: 0x000109b0
   10718:	andeq	r0, r1, ip, asr r8
   1071c:	andeq	r0, r1, r0, asr r9
   10720:	ldr	r3, [pc, #20]	; 1073c <_start@@Base+0x58>
   10724:	ldr	r2, [pc, #20]	; 10740 <_start@@Base+0x5c>
   10728:	add	r3, pc, r3
   1072c:	ldr	r2, [r3, r2]
   10730:	cmp	r2, #0
   10734:	bxeq	lr
   10738:	b	106b4 <__gmon_start__@plt>
   1073c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10740:	andeq	r0, r0, r4, lsr #32
   10744:	ldr	r0, [pc, #24]	; 10764 <_start@@Base+0x80>
   10748:	ldr	r3, [pc, #24]	; 10768 <_start@@Base+0x84>
   1074c:	cmp	r3, r0
   10750:	bxeq	lr
   10754:	ldr	r3, [pc, #16]	; 1076c <_start@@Base+0x88>
   10758:	cmp	r3, #0
   1075c:	bxeq	lr
   10760:	bx	r3
   10764:	andeq	r1, r2, r0, lsr r0
   10768:	andeq	r1, r2, r0, lsr r0
   1076c:	andeq	r0, r0, r0
   10770:	ldr	r0, [pc, #36]	; 1079c <_start@@Base+0xb8>
   10774:	ldr	r1, [pc, #36]	; 107a0 <_start@@Base+0xbc>
   10778:	sub	r1, r1, r0
   1077c:	asr	r1, r1, #2
   10780:	add	r1, r1, r1, lsr #31
   10784:	asrs	r1, r1, #1
   10788:	bxeq	lr
   1078c:	ldr	r3, [pc, #16]	; 107a4 <_start@@Base+0xc0>
   10790:	cmp	r3, #0
   10794:	bxeq	lr
   10798:	bx	r3
   1079c:	andeq	r1, r2, r0, lsr r0
   107a0:	andeq	r1, r2, r0, lsr r0
   107a4:	andeq	r0, r0, r0
   107a8:	push	{r4, lr}
   107ac:	ldr	r4, [pc, #24]	; 107cc <_start@@Base+0xe8>
   107b0:	ldrb	r3, [r4]
   107b4:	cmp	r3, #0
   107b8:	popne	{r4, pc}
   107bc:	bl	10744 <_start@@Base+0x60>
   107c0:	mov	r3, #1
   107c4:	strb	r3, [r4]
   107c8:	pop	{r4, pc}
   107cc:	andeq	r1, r2, r0, lsr r0
   107d0:	b	10770 <_start@@Base+0x8c>

000107d4 <avg@@Base>:
   107d4:	mov	r1, #0
   107d8:	vldr	s0, [pc, #32]	; 10800 <avg@@Base+0x2c>
   107dc:	add	r2, r0, r1
   107e0:	vldr	s2, [r2]
   107e4:	add	r1, r1, #4
   107e8:	vadd.f32	s0, s0, s2
   107ec:	cmp	r1, #40	; 0x28
   107f0:	bne	107dc <avg@@Base+0x8>
   107f4:	vmov.f32	s2, #36	; 0x41200000  10.0
   107f8:	vdiv.f32	s0, s0, s2
   107fc:	bx	lr
   10800:	andeq	r0, r0, r0

00010804 <max@@Base>:
   10804:	mov	r1, #4
   10808:	vldr	s0, [r0]
   1080c:	add	r2, r0, r1
   10810:	vldr	s2, [r2]
   10814:	add	r1, r1, #4
   10818:	vcmpe.f32	s2, s0
   1081c:	vmrs	APSR_nzcv, fpscr
   10820:	vselgt.f32	s0, s2, s0
   10824:	cmp	r1, #40	; 0x28
   10828:	bne	1080c <max@@Base+0x8>
   1082c:	bx	lr

00010830 <min@@Base>:
   10830:	mov	r1, #4
   10834:	vldr	s0, [r0]
   10838:	add	r2, r0, r1
   1083c:	vldr	s2, [r2]
   10840:	add	r1, r1, #4
   10844:	vcmpe.f32	s0, s2
   10848:	vmrs	APSR_nzcv, fpscr
   1084c:	vselgt.f32	s0, s2, s0
   10850:	cmp	r1, #40	; 0x28
   10854:	bne	10838 <min@@Base+0x8>
   10858:	bx	lr

0001085c <main@@Base>:
   1085c:	push	{r4, r5, r6, r7, fp, lr}
   10860:	add	fp, sp, #16
   10864:	sub	sp, sp, #40	; 0x28
   10868:	mov	r4, sp
   1086c:	mov	r5, #1
   10870:	movw	r6, #2496	; 0x9c0
   10874:	movt	r6, #1
   10878:	movw	r7, #2520	; 0x9d8
   1087c:	movt	r7, #1
   10880:	mov	r0, r6
   10884:	mov	r1, r5
   10888:	bl	1069c <printf@plt>
   1088c:	mov	r0, r7
   10890:	mov	r1, r4
   10894:	bl	106cc <__isoc99_scanf@plt>
   10898:	add	r5, r5, #1
   1089c:	add	r4, r4, #4
   108a0:	cmp	r5, #11
   108a4:	bne	10880 <main@@Base+0x24>
   108a8:	mov	r4, sp
   108ac:	mov	r0, r4
   108b0:	bl	107d4 <avg@@Base>
   108b4:	vcvt.f64.f32	d16, s0
   108b8:	vmov	r2, r3, d16
   108bc:	movw	r0, #2523	; 0x9db
   108c0:	movt	r0, #1
   108c4:	bl	1069c <printf@plt>
   108c8:	mov	r0, r4
   108cc:	bl	10804 <max@@Base>
   108d0:	vcvt.f64.f32	d16, s0
   108d4:	vmov	r2, r3, d16
   108d8:	movw	r0, #2536	; 0x9e8
   108dc:	movt	r0, #1
   108e0:	bl	1069c <printf@plt>
   108e4:	mov	r0, r4
   108e8:	bl	10830 <min@@Base>
   108ec:	vcvt.f64.f32	d16, s0
   108f0:	vmov	r2, r3, d16
   108f4:	movw	r0, #2550	; 0x9f6
   108f8:	movt	r0, #1
   108fc:	bl	1069c <printf@plt>
   10900:	movw	r0, #2564	; 0xa04
   10904:	movt	r0, #1
   10908:	bl	1069c <printf@plt>
   1090c:	mov	r6, #0
   10910:	movw	r5, #2571	; 0xa0b
   10914:	movt	r5, #1
   10918:	add	r0, r4, r6
   1091c:	vldr	s0, [r0]
   10920:	vcvt.f64.f32	d16, s0
   10924:	vmov	r2, r3, d16
   10928:	mov	r0, r5
   1092c:	bl	1069c <printf@plt>
   10930:	add	r6, r6, #4
   10934:	cmp	r6, #40	; 0x28
   10938:	bne	10918 <main@@Base+0xbc>
   1093c:	mov	r0, #10
   10940:	bl	106c0 <putchar@plt>
   10944:	mov	r0, #0
   10948:	sub	sp, fp, #16
   1094c:	pop	{r4, r5, r6, r7, fp, pc}

00010950 <__libc_csu_init@@Base>:
   10950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10954:	mov	r7, r0
   10958:	ldr	r6, [pc, #72]	; 109a8 <__libc_csu_init@@Base+0x58>
   1095c:	ldr	r5, [pc, #72]	; 109ac <__libc_csu_init@@Base+0x5c>
   10960:	add	r6, pc, r6
   10964:	add	r5, pc, r5
   10968:	sub	r6, r6, r5
   1096c:	mov	r8, r1
   10970:	mov	r9, r2
   10974:	bl	1067c <printf@plt-0x20>
   10978:	asrs	r6, r6, #2
   1097c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10980:	mov	r4, #0
   10984:	add	r4, r4, #1
   10988:	ldr	r3, [r5], #4
   1098c:	mov	r2, r9
   10990:	mov	r1, r8
   10994:	mov	r0, r7
   10998:	blx	r3
   1099c:	cmp	r6, r4
   109a0:	bne	10984 <__libc_csu_init@@Base+0x34>
   109a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109a8:	andeq	r0, r1, r4, lsr #11
   109ac:	muleq	r1, ip, r5

000109b0 <__libc_csu_fini@@Base>:
   109b0:	bx	lr

Disassembly of section .fini:

000109b4 <.fini>:
   109b4:	push	{r3, lr}
   109b8:	pop	{r3, pc}
