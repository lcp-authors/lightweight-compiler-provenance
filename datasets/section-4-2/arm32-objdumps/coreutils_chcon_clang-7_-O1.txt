
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011498 <.init>:
   11498:	push	{r3, lr}
   1149c:	bl	118dc <__assert_fail@plt+0x4c>
   114a0:	pop	{r3, pc}

Disassembly of section .plt:

000114a4 <fstatfs64@plt-0x14>:
   114a4:	push	{lr}		; (str lr, [sp, #-4]!)
   114a8:	ldr	lr, [pc, #4]	; 114b4 <fstatfs64@plt-0x4>
   114ac:	add	lr, pc, lr
   114b0:	ldr	pc, [lr, #8]!
   114b4:	andeq	sl, r1, ip, asr #22

000114b8 <fstatfs64@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #2892]!	; 0xb4c

000114c4 <calloc@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #106496	; 0x1a000
   114cc:	ldr	pc, [ip, #2884]!	; 0xb44

000114d0 <fputs_unlocked@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #106496	; 0x1a000
   114d8:	ldr	pc, [ip, #2876]!	; 0xb3c

000114dc <raise@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #106496	; 0x1a000
   114e4:	ldr	pc, [ip, #2868]!	; 0xb34

000114e8 <is_selinux_enabled@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #106496	; 0x1a000
   114f0:	ldr	pc, [ip, #2860]!	; 0xb2c

000114f4 <strcmp@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #106496	; 0x1a000
   114fc:	ldr	pc, [ip, #2852]!	; 0xb24

00011500 <fflush@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #106496	; 0x1a000
   11508:	ldr	pc, [ip, #2844]!	; 0xb1c

0001150c <lsetfilecon@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #106496	; 0x1a000
   11514:	ldr	pc, [ip, #2836]!	; 0xb14

00011518 <memmove@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #106496	; 0x1a000
   11520:	ldr	pc, [ip, #2828]!	; 0xb0c

00011524 <free@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #106496	; 0x1a000
   1152c:	ldr	pc, [ip, #2820]!	; 0xb04

00011530 <_exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #106496	; 0x1a000
   11538:	ldr	pc, [ip, #2812]!	; 0xafc

0001153c <memcpy@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #106496	; 0x1a000
   11544:	ldr	pc, [ip, #2804]!	; 0xaf4

00011548 <mbsinit@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #106496	; 0x1a000
   11550:	ldr	pc, [ip, #2796]!	; 0xaec

00011554 <context_new@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #106496	; 0x1a000
   1155c:	ldr	pc, [ip, #2788]!	; 0xae4

00011560 <memcmp@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #106496	; 0x1a000
   11568:	ldr	pc, [ip, #2780]!	; 0xadc

0001156c <context_role_set@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #106496	; 0x1a000
   11574:	ldr	pc, [ip, #2772]!	; 0xad4

00011578 <dcgettext@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #106496	; 0x1a000
   11580:	ldr	pc, [ip, #2764]!	; 0xacc

00011584 <context_type_set@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #106496	; 0x1a000
   1158c:	ldr	pc, [ip, #2756]!	; 0xac4

00011590 <realloc@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #106496	; 0x1a000
   11598:	ldr	pc, [ip, #2748]!	; 0xabc

0001159c <fgetfilecon@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #106496	; 0x1a000
   115a4:	ldr	pc, [ip, #2740]!	; 0xab4

000115a8 <textdomain@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #106496	; 0x1a000
   115b0:	ldr	pc, [ip, #2732]!	; 0xaac

000115b4 <chdir@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #106496	; 0x1a000
   115bc:	ldr	pc, [ip, #2724]!	; 0xaa4

000115c0 <__fxstatat64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #106496	; 0x1a000
   115c8:	ldr	pc, [ip, #2716]!	; 0xa9c

000115cc <iswprint@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #106496	; 0x1a000
   115d4:	ldr	pc, [ip, #2708]!	; 0xa94

000115d8 <__fxstat64@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #106496	; 0x1a000
   115e0:	ldr	pc, [ip, #2700]!	; 0xa8c

000115e4 <fwrite@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #106496	; 0x1a000
   115ec:	ldr	pc, [ip, #2692]!	; 0xa84

000115f0 <lseek64@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #106496	; 0x1a000
   115f8:	ldr	pc, [ip, #2684]!	; 0xa7c

000115fc <__ctype_get_mb_cur_max@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #106496	; 0x1a000
   11604:	ldr	pc, [ip, #2676]!	; 0xa74

00011608 <strcpy@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #106496	; 0x1a000
   11610:	ldr	pc, [ip, #2668]!	; 0xa6c

00011614 <__fpending@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #106496	; 0x1a000
   1161c:	ldr	pc, [ip, #2660]!	; 0xa64

00011620 <ferror_unlocked@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #106496	; 0x1a000
   11628:	ldr	pc, [ip, #2652]!	; 0xa5c

0001162c <mbrtowc@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #106496	; 0x1a000
   11634:	ldr	pc, [ip, #2644]!	; 0xa54

00011638 <error@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #106496	; 0x1a000
   11640:	ldr	pc, [ip, #2636]!	; 0xa4c

00011644 <security_check_context@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #106496	; 0x1a000
   1164c:	ldr	pc, [ip, #2628]!	; 0xa44

00011650 <open64@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #106496	; 0x1a000
   11658:	ldr	pc, [ip, #2620]!	; 0xa3c

0001165c <lgetfilecon@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #106496	; 0x1a000
   11664:	ldr	pc, [ip, #2612]!	; 0xa34

00011668 <malloc@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #106496	; 0x1a000
   11670:	ldr	pc, [ip, #2604]!	; 0xa2c

00011674 <__libc_start_main@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #106496	; 0x1a000
   1167c:	ldr	pc, [ip, #2596]!	; 0xa24

00011680 <__freading@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #106496	; 0x1a000
   11688:	ldr	pc, [ip, #2588]!	; 0xa1c

0001168c <__gmon_start__@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #106496	; 0x1a000
   11694:	ldr	pc, [ip, #2580]!	; 0xa14

00011698 <context_free@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #106496	; 0x1a000
   116a0:	ldr	pc, [ip, #2572]!	; 0xa0c

000116a4 <getopt_long@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #106496	; 0x1a000
   116ac:	ldr	pc, [ip, #2564]!	; 0xa04

000116b0 <__ctype_b_loc@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #106496	; 0x1a000
   116b8:	ldr	pc, [ip, #2556]!	; 0x9fc

000116bc <getcwd@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #106496	; 0x1a000
   116c4:	ldr	pc, [ip, #2548]!	; 0x9f4

000116c8 <exit@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #106496	; 0x1a000
   116d0:	ldr	pc, [ip, #2540]!	; 0x9ec

000116d4 <context_user_set@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #106496	; 0x1a000
   116dc:	ldr	pc, [ip, #2532]!	; 0x9e4

000116e0 <getfilecon@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #106496	; 0x1a000
   116e8:	ldr	pc, [ip, #2524]!	; 0x9dc

000116ec <strlen@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #106496	; 0x1a000
   116f4:	ldr	pc, [ip, #2516]!	; 0x9d4

000116f8 <openat64@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #106496	; 0x1a000
   11700:	ldr	pc, [ip, #2508]!	; 0x9cc

00011704 <memrchr@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #106496	; 0x1a000
   1170c:	ldr	pc, [ip, #2500]!	; 0x9c4

00011710 <__errno_location@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #106496	; 0x1a000
   11718:	ldr	pc, [ip, #2492]!	; 0x9bc

0001171c <__sprintf_chk@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #106496	; 0x1a000
   11724:	ldr	pc, [ip, #2484]!	; 0x9b4

00011728 <__cxa_atexit@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #106496	; 0x1a000
   11730:	ldr	pc, [ip, #2476]!	; 0x9ac

00011734 <memset@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #106496	; 0x1a000
   1173c:	ldr	pc, [ip, #2468]!	; 0x9a4

00011740 <__printf_chk@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #106496	; 0x1a000
   11748:	ldr	pc, [ip, #2460]!	; 0x99c

0001174c <fileno@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #106496	; 0x1a000
   11754:	ldr	pc, [ip, #2452]!	; 0x994

00011758 <__fprintf_chk@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #106496	; 0x1a000
   11760:	ldr	pc, [ip, #2444]!	; 0x98c

00011764 <memchr@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #106496	; 0x1a000
   1176c:	ldr	pc, [ip, #2436]!	; 0x984

00011770 <setfilecon@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #106496	; 0x1a000
   11778:	ldr	pc, [ip, #2428]!	; 0x97c

0001177c <access@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #106496	; 0x1a000
   11784:	ldr	pc, [ip, #2420]!	; 0x974

00011788 <fclose@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #106496	; 0x1a000
   11790:	ldr	pc, [ip, #2412]!	; 0x96c

00011794 <fseeko64@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #106496	; 0x1a000
   1179c:	ldr	pc, [ip, #2404]!	; 0x964

000117a0 <fcntl64@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #106496	; 0x1a000
   117a8:	ldr	pc, [ip, #2396]!	; 0x95c

000117ac <setlocale@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #106496	; 0x1a000
   117b4:	ldr	pc, [ip, #2388]!	; 0x954

000117b8 <strrchr@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #106496	; 0x1a000
   117c0:	ldr	pc, [ip, #2380]!	; 0x94c

000117c4 <nl_langinfo@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #106496	; 0x1a000
   117cc:	ldr	pc, [ip, #2372]!	; 0x944

000117d0 <readdir64@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #106496	; 0x1a000
   117d8:	ldr	pc, [ip, #2364]!	; 0x93c

000117dc <fdopendir@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #106496	; 0x1a000
   117e4:	ldr	pc, [ip, #2356]!	; 0x934

000117e8 <dirfd@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #106496	; 0x1a000
   117f0:	ldr	pc, [ip, #2348]!	; 0x92c

000117f4 <fchdir@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #106496	; 0x1a000
   117fc:	ldr	pc, [ip, #2340]!	; 0x924

00011800 <qsort@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #106496	; 0x1a000
   11808:	ldr	pc, [ip, #2332]!	; 0x91c

0001180c <freecon@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #106496	; 0x1a000
   11814:	ldr	pc, [ip, #2324]!	; 0x914

00011818 <bindtextdomain@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #106496	; 0x1a000
   11820:	ldr	pc, [ip, #2316]!	; 0x90c

00011824 <context_range_set@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #106496	; 0x1a000
   1182c:	ldr	pc, [ip, #2308]!	; 0x904

00011830 <context_str@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #106496	; 0x1a000
   11838:	ldr	pc, [ip, #2300]!	; 0x8fc

0001183c <__xstat64@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #106496	; 0x1a000
   11844:	ldr	pc, [ip, #2292]!	; 0x8f4

00011848 <strncmp@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #106496	; 0x1a000
   11850:	ldr	pc, [ip, #2284]!	; 0x8ec

00011854 <abort@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #106496	; 0x1a000
   1185c:	ldr	pc, [ip, #2276]!	; 0x8e4

00011860 <close@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #106496	; 0x1a000
   11868:	ldr	pc, [ip, #2268]!	; 0x8dc

0001186c <__lxstat64@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #106496	; 0x1a000
   11874:	ldr	pc, [ip, #2260]!	; 0x8d4

00011878 <closedir@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #106496	; 0x1a000
   11880:	ldr	pc, [ip, #2252]!	; 0x8cc

00011884 <strspn@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #106496	; 0x1a000
   1188c:	ldr	pc, [ip, #2244]!	; 0x8c4

00011890 <__assert_fail@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #106496	; 0x1a000
   11898:	ldr	pc, [ip, #2236]!	; 0x8bc

Disassembly of section .text:

000118a0 <.text>:
   118a0:	mov	fp, #0
   118a4:	mov	lr, #0
   118a8:	pop	{r1}		; (ldr r1, [sp], #4)
   118ac:	mov	r2, sp
   118b0:	push	{r2}		; (str r2, [sp, #-4]!)
   118b4:	push	{r0}		; (str r0, [sp, #-4]!)
   118b8:	ldr	ip, [pc, #16]	; 118d0 <__assert_fail@plt+0x40>
   118bc:	push	{ip}		; (str ip, [sp, #-4]!)
   118c0:	ldr	r0, [pc, #12]	; 118d4 <__assert_fail@plt+0x44>
   118c4:	ldr	r3, [pc, #12]	; 118d8 <__assert_fail@plt+0x48>
   118c8:	bl	11674 <__libc_start_main@plt>
   118cc:	bl	11854 <abort@plt>
   118d0:	andeq	sl, r1, ip, ror #8
   118d4:	andeq	r1, r1, r4, lsl #26
   118d8:	andeq	sl, r1, ip, lsl #8
   118dc:	ldr	r3, [pc, #20]	; 118f8 <__assert_fail@plt+0x68>
   118e0:	ldr	r2, [pc, #20]	; 118fc <__assert_fail@plt+0x6c>
   118e4:	add	r3, pc, r3
   118e8:	ldr	r2, [r3, r2]
   118ec:	cmp	r2, #0
   118f0:	bxeq	lr
   118f4:	b	1168c <__gmon_start__@plt>
   118f8:	andeq	sl, r1, r4, lsl r7
   118fc:	andeq	r0, r0, r8, asr r1
   11900:	ldr	r0, [pc, #24]	; 11920 <__assert_fail@plt+0x90>
   11904:	ldr	r3, [pc, #24]	; 11924 <__assert_fail@plt+0x94>
   11908:	cmp	r3, r0
   1190c:	bxeq	lr
   11910:	ldr	r3, [pc, #16]	; 11928 <__assert_fail@plt+0x98>
   11914:	cmp	r3, #0
   11918:	bxeq	lr
   1191c:	bx	r3
   11920:			; <UNDEFINED> instruction: 0x0002c1b0
   11924:			; <UNDEFINED> instruction: 0x0002c1b0
   11928:	andeq	r0, r0, r0
   1192c:	ldr	r0, [pc, #36]	; 11958 <__assert_fail@plt+0xc8>
   11930:	ldr	r1, [pc, #36]	; 1195c <__assert_fail@plt+0xcc>
   11934:	sub	r1, r1, r0
   11938:	asr	r1, r1, #2
   1193c:	add	r1, r1, r1, lsr #31
   11940:	asrs	r1, r1, #1
   11944:	bxeq	lr
   11948:	ldr	r3, [pc, #16]	; 11960 <__assert_fail@plt+0xd0>
   1194c:	cmp	r3, #0
   11950:	bxeq	lr
   11954:	bx	r3
   11958:			; <UNDEFINED> instruction: 0x0002c1b0
   1195c:			; <UNDEFINED> instruction: 0x0002c1b0
   11960:	andeq	r0, r0, r0
   11964:	push	{r4, lr}
   11968:	ldr	r4, [pc, #24]	; 11988 <__assert_fail@plt+0xf8>
   1196c:	ldrb	r3, [r4]
   11970:	cmp	r3, #0
   11974:	popne	{r4, pc}
   11978:	bl	11900 <__assert_fail@plt+0x70>
   1197c:	mov	r3, #1
   11980:	strb	r3, [r4]
   11984:	pop	{r4, pc}
   11988:	andeq	ip, r2, ip, asr #3
   1198c:	b	1192c <__assert_fail@plt+0x9c>
   11990:	push	{fp, lr}
   11994:	mov	fp, sp
   11998:	sub	sp, sp, #8
   1199c:	mov	r4, r0
   119a0:	cmp	r0, #0
   119a4:	bne	11b0c <__assert_fail@plt+0x27c>
   119a8:	movw	r1, #42267	; 0xa51b
   119ac:	movt	r1, #1
   119b0:	mov	r0, #0
   119b4:	mov	r2, #5
   119b8:	bl	11578 <dcgettext@plt>
   119bc:	mov	r1, r0
   119c0:	movw	r0, #49676	; 0xc20c
   119c4:	movt	r0, #2
   119c8:	ldr	r2, [r0]
   119cc:	str	r2, [sp]
   119d0:	mov	r0, #1
   119d4:	mov	r3, r2
   119d8:	bl	11740 <__printf_chk@plt>
   119dc:	movw	r1, #42425	; 0xa5b9
   119e0:	movt	r1, #1
   119e4:	mov	r0, #0
   119e8:	mov	r2, #5
   119ec:	bl	11578 <dcgettext@plt>
   119f0:	movw	r5, #49604	; 0xc1c4
   119f4:	movt	r5, #2
   119f8:	ldr	r1, [r5]
   119fc:	bl	114d0 <fputs_unlocked@plt>
   11a00:	bl	11b50 <__assert_fail@plt+0x2c0>
   11a04:	movw	r1, #42564	; 0xa644
   11a08:	movt	r1, #1
   11a0c:	mov	r0, #0
   11a10:	mov	r2, #5
   11a14:	bl	11578 <dcgettext@plt>
   11a18:	ldr	r1, [r5]
   11a1c:	bl	114d0 <fputs_unlocked@plt>
   11a20:	movw	r1, #42795	; 0xa72b
   11a24:	movt	r1, #1
   11a28:	mov	r0, #0
   11a2c:	mov	r2, #5
   11a30:	bl	11578 <dcgettext@plt>
   11a34:	ldr	r1, [r5]
   11a38:	bl	114d0 <fputs_unlocked@plt>
   11a3c:	movw	r1, #43078	; 0xa846
   11a40:	movt	r1, #1
   11a44:	mov	r0, #0
   11a48:	mov	r2, #5
   11a4c:	bl	11578 <dcgettext@plt>
   11a50:	ldr	r1, [r5]
   11a54:	bl	114d0 <fputs_unlocked@plt>
   11a58:	movw	r1, #43206	; 0xa8c6
   11a5c:	movt	r1, #1
   11a60:	mov	r0, #0
   11a64:	mov	r2, #5
   11a68:	bl	11578 <dcgettext@plt>
   11a6c:	ldr	r1, [r5]
   11a70:	bl	114d0 <fputs_unlocked@plt>
   11a74:	movw	r1, #43325	; 0xa93d
   11a78:	movt	r1, #1
   11a7c:	mov	r0, #0
   11a80:	mov	r2, #5
   11a84:	bl	11578 <dcgettext@plt>
   11a88:	ldr	r1, [r5]
   11a8c:	bl	114d0 <fputs_unlocked@plt>
   11a90:	movw	r1, #43396	; 0xa984
   11a94:	movt	r1, #1
   11a98:	mov	r0, #0
   11a9c:	mov	r2, #5
   11aa0:	bl	11578 <dcgettext@plt>
   11aa4:	ldr	r1, [r5]
   11aa8:	bl	114d0 <fputs_unlocked@plt>
   11aac:	movw	r1, #43467	; 0xa9cb
   11ab0:	movt	r1, #1
   11ab4:	mov	r0, #0
   11ab8:	mov	r2, #5
   11abc:	bl	11578 <dcgettext@plt>
   11ac0:	ldr	r1, [r5]
   11ac4:	bl	114d0 <fputs_unlocked@plt>
   11ac8:	movw	r1, #43932	; 0xab9c
   11acc:	movt	r1, #1
   11ad0:	mov	r0, #0
   11ad4:	mov	r2, #5
   11ad8:	bl	11578 <dcgettext@plt>
   11adc:	ldr	r1, [r5]
   11ae0:	bl	114d0 <fputs_unlocked@plt>
   11ae4:	movw	r1, #43977	; 0xabc9
   11ae8:	movt	r1, #1
   11aec:	mov	r0, #0
   11af0:	mov	r2, #5
   11af4:	bl	11578 <dcgettext@plt>
   11af8:	ldr	r1, [r5]
   11afc:	bl	114d0 <fputs_unlocked@plt>
   11b00:	bl	11b80 <__assert_fail@plt+0x2f0>
   11b04:	mov	r0, r4
   11b08:	bl	116c8 <exit@plt>
   11b0c:	movw	r0, #49600	; 0xc1c0
   11b10:	movt	r0, #2
   11b14:	ldr	r5, [r0]
   11b18:	movw	r1, #42228	; 0xa4f4
   11b1c:	movt	r1, #1
   11b20:	mov	r0, #0
   11b24:	mov	r2, #5
   11b28:	bl	11578 <dcgettext@plt>
   11b2c:	mov	r2, r0
   11b30:	movw	r0, #49676	; 0xc20c
   11b34:	movt	r0, #2
   11b38:	ldr	r3, [r0]
   11b3c:	mov	r0, r5
   11b40:	mov	r1, #1
   11b44:	bl	11758 <__fprintf_chk@plt>
   11b48:	mov	r0, r4
   11b4c:	bl	116c8 <exit@plt>
   11b50:	push	{fp, lr}
   11b54:	mov	fp, sp
   11b58:	movw	r1, #44352	; 0xad40
   11b5c:	movt	r1, #1
   11b60:	mov	r0, #0
   11b64:	mov	r2, #5
   11b68:	bl	11578 <dcgettext@plt>
   11b6c:	movw	r1, #49604	; 0xc1c4
   11b70:	movt	r1, #2
   11b74:	ldr	r1, [r1]
   11b78:	pop	{fp, lr}
   11b7c:	b	114d0 <fputs_unlocked@plt>
   11b80:	push	{r4, r5, fp, lr}
   11b84:	add	fp, sp, #8
   11b88:	sub	sp, sp, #56	; 0x38
   11b8c:	movw	r0, #45672	; 0xb268
   11b90:	movt	r0, #1
   11b94:	add	r1, r0, #32
   11b98:	mov	r5, sp
   11b9c:	mov	r2, #48	; 0x30
   11ba0:	vld1.64	{d16-d17}, [r1]
   11ba4:	add	r1, r5, #32
   11ba8:	add	r3, r0, #16
   11bac:	vld1.64	{d18-d19}, [r0], r2
   11bb0:	vld1.64	{d20-d21}, [r3]
   11bb4:	vldr	d22, [r0]
   11bb8:	vst1.64	{d16-d17}, [r1]
   11bbc:	add	r0, r5, #16
   11bc0:	vst1.64	{d20-d21}, [r0]
   11bc4:	mov	r0, r5
   11bc8:	vst1.64	{d18-d19}, [r0], r2
   11bcc:	vstr	d22, [r0]
   11bd0:	ldr	r1, [sp]
   11bd4:	cmp	r1, #0
   11bd8:	beq	11c00 <__assert_fail@plt+0x370>
   11bdc:	mov	r5, sp
   11be0:	movw	r4, #44031	; 0xabff
   11be4:	movt	r4, #1
   11be8:	mov	r0, r4
   11bec:	bl	114f4 <strcmp@plt>
   11bf0:	cmp	r0, #0
   11bf4:	ldrne	r1, [r5, #8]!
   11bf8:	cmpne	r1, #0
   11bfc:	bne	11be8 <__assert_fail@plt+0x358>
   11c00:	ldr	r4, [r5, #4]
   11c04:	movw	r1, #44522	; 0xadea
   11c08:	movt	r1, #1
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	bl	11578 <dcgettext@plt>
   11c18:	mov	r1, r0
   11c1c:	movw	r2, #44076	; 0xac2c
   11c20:	movt	r2, #1
   11c24:	movw	r3, #44545	; 0xae01
   11c28:	movt	r3, #1
   11c2c:	mov	r0, #1
   11c30:	bl	11740 <__printf_chk@plt>
   11c34:	movw	r5, #44031	; 0xabff
   11c38:	movt	r5, #1
   11c3c:	cmp	r4, #0
   11c40:	moveq	r4, r5
   11c44:	mov	r0, #5
   11c48:	mov	r1, #0
   11c4c:	bl	117ac <setlocale@plt>
   11c50:	cmp	r0, #0
   11c54:	beq	11c94 <__assert_fail@plt+0x404>
   11c58:	movw	r1, #44585	; 0xae29
   11c5c:	movt	r1, #1
   11c60:	mov	r2, #3
   11c64:	bl	11848 <strncmp@plt>
   11c68:	cmp	r0, #0
   11c6c:	beq	11c94 <__assert_fail@plt+0x404>
   11c70:	movw	r1, #44589	; 0xae2d
   11c74:	movt	r1, #1
   11c78:	mov	r0, #0
   11c7c:	mov	r2, #5
   11c80:	bl	11578 <dcgettext@plt>
   11c84:	movw	r1, #49604	; 0xc1c4
   11c88:	movt	r1, #2
   11c8c:	ldr	r1, [r1]
   11c90:	bl	114d0 <fputs_unlocked@plt>
   11c94:	movw	r1, #44660	; 0xae74
   11c98:	movt	r1, #1
   11c9c:	mov	r0, #0
   11ca0:	mov	r2, #5
   11ca4:	bl	11578 <dcgettext@plt>
   11ca8:	mov	r1, r0
   11cac:	movw	r2, #44545	; 0xae01
   11cb0:	movt	r2, #1
   11cb4:	mov	r0, #1
   11cb8:	mov	r3, r5
   11cbc:	bl	11740 <__printf_chk@plt>
   11cc0:	movw	r1, #44687	; 0xae8f
   11cc4:	movt	r1, #1
   11cc8:	mov	r0, #0
   11ccc:	mov	r2, #5
   11cd0:	bl	11578 <dcgettext@plt>
   11cd4:	mov	r1, r0
   11cd8:	movw	r0, #44455	; 0xada7
   11cdc:	movt	r0, #1
   11ce0:	movw	r3, #43931	; 0xab9b
   11ce4:	movt	r3, #1
   11ce8:	cmp	r4, r5
   11cec:	moveq	r3, r0
   11cf0:	mov	r0, #1
   11cf4:	mov	r2, r4
   11cf8:	bl	11740 <__printf_chk@plt>
   11cfc:	sub	sp, fp, #8
   11d00:	pop	{r4, r5, fp, pc}
   11d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d08:	add	fp, sp, #28
   11d0c:	sub	sp, sp, #28
   11d10:	mov	r4, r1
   11d14:	mov	r5, r0
   11d18:	ldr	r0, [r1]
   11d1c:	bl	1602c <__assert_fail@plt+0x479c>
   11d20:	movw	r1, #43931	; 0xab9b
   11d24:	movt	r1, #1
   11d28:	mov	r0, #6
   11d2c:	bl	117ac <setlocale@plt>
   11d30:	movw	r6, #44080	; 0xac30
   11d34:	movt	r6, #1
   11d38:	movw	r1, #44037	; 0xac05
   11d3c:	movt	r1, #1
   11d40:	mov	r0, r6
   11d44:	bl	11818 <bindtextdomain@plt>
   11d48:	mov	r0, r6
   11d4c:	bl	115a8 <textdomain@plt>
   11d50:	movw	r0, #11764	; 0x2df4
   11d54:	movt	r0, #1
   11d58:	bl	1a470 <__assert_fail@plt+0x8be0>
   11d5c:	mov	r8, #0
   11d60:	mov	r0, #16
   11d64:	str	r0, [sp, #20]
   11d68:	mvn	r9, #0
   11d6c:	movw	r7, #44061	; 0xac1d
   11d70:	movt	r7, #1
   11d74:	movw	r6, #45448	; 0xb188
   11d78:	movt	r6, #1
   11d7c:	mov	r0, #0
   11d80:	str	r0, [sp, #16]
   11d84:	mov	sl, #0
   11d88:	mov	r0, #0
   11d8c:	b	11d9c <__assert_fail@plt+0x50c>
   11d90:	movw	r0, #49608	; 0xc1c8
   11d94:	movt	r0, #2
   11d98:	ldr	r0, [r0]
   11d9c:	str	r0, [sp, #12]
   11da0:	b	11dac <__assert_fail@plt+0x51c>
   11da4:	str	r0, [r1]
   11da8:	mov	sl, #1
   11dac:	str	r8, [sp]
   11db0:	mov	r0, r5
   11db4:	mov	r1, r4
   11db8:	mov	r2, r7
   11dbc:	mov	r3, r6
   11dc0:	bl	116a4 <getopt_long@plt>
   11dc4:	add	r1, r0, #3
   11dc8:	cmp	r1, #121	; 0x79
   11dcc:	bhi	11fcc <__assert_fail@plt+0x73c>
   11dd0:	add	r0, pc, #0
   11dd4:	ldr	pc, [r0, r1, lsl #2]
   11dd8:	andeq	r2, r1, ip, lsl #5
   11ddc:	andeq	r2, r1, r0, ror #5
   11de0:	strheq	r2, [r1], -r8
   11de4:	andeq	r2, r1, r8, lsr #6
   11de8:	andeq	r2, r1, r8, lsr #6
   11dec:	andeq	r2, r1, r8, lsr #6
   11df0:	andeq	r2, r1, r8, lsr #6
   11df4:	andeq	r2, r1, r8, lsr #6
   11df8:	andeq	r2, r1, r8, lsr #6
   11dfc:	andeq	r2, r1, r8, lsr #6
   11e00:	andeq	r2, r1, r8, lsr #6
   11e04:	andeq	r2, r1, r8, lsr #6
   11e08:	andeq	r2, r1, r8, lsr #6
   11e0c:	andeq	r2, r1, r8, lsr #6
   11e10:	andeq	r2, r1, r8, lsr #6
   11e14:	andeq	r2, r1, r8, lsr #6
   11e18:	andeq	r2, r1, r8, lsr #6
   11e1c:	andeq	r2, r1, r8, lsr #6
   11e20:	andeq	r2, r1, r8, lsr #6
   11e24:	andeq	r2, r1, r8, lsr #6
   11e28:	andeq	r2, r1, r8, lsr #6
   11e2c:	andeq	r2, r1, r8, lsr #6
   11e30:	andeq	r2, r1, r8, lsr #6
   11e34:	andeq	r2, r1, r8, lsr #6
   11e38:	andeq	r2, r1, r8, lsr #6
   11e3c:	andeq	r2, r1, r8, lsr #6
   11e40:	andeq	r2, r1, r8, lsr #6
   11e44:	andeq	r2, r1, r8, lsr #6
   11e48:	andeq	r2, r1, r8, lsr #6
   11e4c:	andeq	r2, r1, r8, lsr #6
   11e50:	andeq	r2, r1, r8, lsr #6
   11e54:	andeq	r2, r1, r8, lsr #6
   11e58:	andeq	r2, r1, r8, lsr #6
   11e5c:	andeq	r2, r1, r8, lsr #6
   11e60:	andeq	r2, r1, r8, lsr #6
   11e64:	andeq	r2, r1, r8, lsr #6
   11e68:	andeq	r2, r1, r8, lsr #6
   11e6c:	andeq	r2, r1, r8, lsr #6
   11e70:	andeq	r2, r1, r8, lsr #6
   11e74:	andeq	r2, r1, r8, lsr #6
   11e78:	andeq	r2, r1, r8, lsr #6
   11e7c:	andeq	r2, r1, r8, lsr #6
   11e80:	andeq	r2, r1, r8, lsr #6
   11e84:	andeq	r2, r1, r8, lsr #6
   11e88:	andeq	r2, r1, r8, lsr #6
   11e8c:	andeq	r2, r1, r8, lsr #6
   11e90:	andeq	r2, r1, r8, lsr #6
   11e94:	andeq	r2, r1, r8, lsr #6
   11e98:	andeq	r2, r1, r8, lsr #6
   11e9c:	andeq	r2, r1, r8, lsr #6
   11ea0:	andeq	r2, r1, r8, lsr #6
   11ea4:	andeq	r2, r1, r8, lsr #6
   11ea8:	andeq	r2, r1, r8, lsr #6
   11eac:	andeq	r2, r1, r8, lsr #6
   11eb0:	andeq	r2, r1, r8, lsr #6
   11eb4:	andeq	r2, r1, r8, lsr #6
   11eb8:	andeq	r2, r1, r8, lsr #6
   11ebc:	andeq	r2, r1, r8, lsr #6
   11ec0:	andeq	r2, r1, r8, lsr #6
   11ec4:	andeq	r2, r1, r8, lsr #6
   11ec8:	andeq	r2, r1, r8, lsr #6
   11ecc:	andeq	r2, r1, r8, lsr #6
   11ed0:	andeq	r2, r1, r8, lsr #6
   11ed4:	andeq	r2, r1, r8, lsr #6
   11ed8:	andeq	r2, r1, r8, lsr #6
   11edc:	andeq	r2, r1, r8, lsr #6
   11ee0:	andeq	r2, r1, r8, lsr #6
   11ee4:	andeq	r2, r1, r8, lsr #6
   11ee8:	andeq	r2, r1, r8, lsr #6
   11eec:	andeq	r2, r1, r8, lsr #6
   11ef0:	andeq	r2, r1, r8, lsr #6
   11ef4:	andeq	r2, r1, r8, lsr #6
   11ef8:	andeq	r2, r1, r8, lsr #6
   11efc:	andeq	r2, r1, r8, lsr #6
   11f00:	andeq	r2, r1, r8, lsr #6
   11f04:	andeq	r1, r1, r0, asr #31
   11f08:	andeq	r2, r1, r8, lsr #6
   11f0c:	andeq	r2, r1, r8, lsr #6
   11f10:	andeq	r2, r1, r8, lsr #6
   11f14:	andeq	r2, r1, r4, lsr r0
   11f18:	andeq	r2, r1, r8, lsr #6
   11f1c:	andeq	r2, r1, r8, lsr #6
   11f20:	andeq	r2, r1, r8, lsr #6
   11f24:	andeq	r2, r1, r8, lsr #32
   11f28:	andeq	r2, r1, r8, lsr #6
   11f2c:	andeq	r2, r1, r4, asr r0
   11f30:	andeq	r2, r1, r8, lsr #6
   11f34:	andeq	r2, r1, r8, lsr #6
   11f38:	andeq	r2, r1, r8, lsr #6
   11f3c:	andeq	r2, r1, r8, lsr #6
   11f40:	andeq	r2, r1, r8, lsr #6
   11f44:	andeq	r2, r1, r8, lsr #6
   11f48:	andeq	r2, r1, r8, lsr #6
   11f4c:	andeq	r2, r1, r8, lsr #6
   11f50:	andeq	r2, r1, r8, lsr #6
   11f54:	andeq	r2, r1, r8, lsr #6
   11f58:	andeq	r2, r1, r8, lsr #6
   11f5c:	andeq	r2, r1, r8, lsr #6
   11f60:	andeq	r2, r1, r8, lsr #6
   11f64:	andeq	r2, r1, r8, lsr #6
   11f68:	andeq	r2, r1, r8, lsr #6
   11f6c:	andeq	r2, r1, r8, lsr #6
   11f70:	andeq	r2, r1, r8, lsr #6
   11f74:	andeq	r2, r1, r8, lsr #6
   11f78:	andeq	r2, r1, r8, lsr #6
   11f7c:	andeq	r1, r1, ip, lsr #27
   11f80:	andeq	r2, r1, r8, lsr #6
   11f84:	andeq	r2, r1, r4, ror r0
   11f88:	andeq	r2, r1, r8, lsr #6
   11f8c:	andeq	r2, r1, r8, lsr #6
   11f90:	andeq	r2, r1, r8, lsr #6
   11f94:	strdeq	r1, [r1], -r8
   11f98:	andeq	r2, r1, r8, lsr #6
   11f9c:	andeq	r2, r1, r8, lsr #6
   11fa0:	andeq	r2, r1, r8, lsr #6
   11fa4:	andeq	r2, r1, r8, lsr #6
   11fa8:	andeq	r2, r1, r8, lsr #6
   11fac:	andeq	r2, r1, r8, lsl #1
   11fb0:	andeq	r2, r1, r8, lsr #6
   11fb4:	andeq	r2, r1, r0, lsl r0
   11fb8:	andeq	r2, r1, r0, lsr #1
   11fbc:	andeq	r2, r1, r0, asr #32
   11fc0:	mov	r0, #17
   11fc4:	str	r0, [sp, #20]
   11fc8:	b	11dac <__assert_fail@plt+0x51c>
   11fcc:	sub	r0, r0, #256	; 0x100
   11fd0:	cmp	r0, #3
   11fd4:	bhi	12328 <__assert_fail@plt+0xa98>
   11fd8:	add	r1, pc, #0
   11fdc:	ldr	pc, [r1, r0, lsl #2]
   11fe0:	strdeq	r1, [r1], -r0
   11fe4:	andeq	r2, r1, ip, ror r0
   11fe8:	andeq	r2, r1, r8, rrx
   11fec:	muleq	r1, r0, sp
   11ff0:	mov	r9, #1
   11ff4:	b	11dac <__assert_fail@plt+0x51c>
   11ff8:	movw	r0, #49608	; 0xc1c8
   11ffc:	movt	r0, #2
   12000:	ldr	r0, [r0]
   12004:	movw	r1, #49632	; 0xc1e0
   12008:	movt	r1, #2
   1200c:	b	11da4 <__assert_fail@plt+0x514>
   12010:	movw	r0, #49608	; 0xc1c8
   12014:	movt	r0, #2
   12018:	ldr	r0, [r0]
   1201c:	movw	r1, #49628	; 0xc1dc
   12020:	movt	r1, #2
   12024:	b	11da4 <__assert_fail@plt+0x514>
   12028:	mov	r0, #16
   1202c:	str	r0, [sp, #20]
   12030:	b	11dac <__assert_fail@plt+0x51c>
   12034:	mov	r0, #2
   12038:	str	r0, [sp, #20]
   1203c:	b	11dac <__assert_fail@plt+0x51c>
   12040:	mov	r0, #1
   12044:	movw	r1, #49617	; 0xc1d1
   12048:	movt	r1, #2
   1204c:	strb	r0, [r1]
   12050:	b	11dac <__assert_fail@plt+0x51c>
   12054:	movw	r0, #49616	; 0xc1d0
   12058:	movt	r0, #2
   1205c:	mov	r1, #1
   12060:	strb	r1, [r0]
   12064:	b	11dac <__assert_fail@plt+0x51c>
   12068:	mov	r0, #1
   1206c:	str	r0, [sp, #16]
   12070:	b	11dac <__assert_fail@plt+0x51c>
   12074:	mov	r9, #0
   12078:	b	11dac <__assert_fail@plt+0x51c>
   1207c:	mov	r0, #0
   12080:	str	r0, [sp, #16]
   12084:	b	11dac <__assert_fail@plt+0x51c>
   12088:	movw	r0, #49608	; 0xc1c8
   1208c:	movt	r0, #2
   12090:	ldr	r0, [r0]
   12094:	movw	r1, #49624	; 0xc1d8
   12098:	movt	r1, #2
   1209c:	b	11da4 <__assert_fail@plt+0x514>
   120a0:	movw	r0, #49608	; 0xc1c8
   120a4:	movt	r0, #2
   120a8:	ldr	r0, [r0]
   120ac:	movw	r1, #49620	; 0xc1d4
   120b0:	movt	r1, #2
   120b4:	b	11da4 <__assert_fail@plt+0x514>
   120b8:	movw	r0, #49616	; 0xc1d0
   120bc:	movt	r0, #2
   120c0:	ldrb	r0, [r0]
   120c4:	cmp	r0, #1
   120c8:	bne	120ec <__assert_fail@plt+0x85c>
   120cc:	ldr	r7, [sp, #20]
   120d0:	cmp	r7, #16
   120d4:	bne	12104 <__assert_fail@plt+0x874>
   120d8:	cmp	r9, #1
   120dc:	beq	1239c <__assert_fail@plt+0xb0c>
   120e0:	mov	r7, #16
   120e4:	mov	r0, #0
   120e8:	b	120fc <__assert_fail@plt+0x86c>
   120ec:	cmp	r9, #0
   120f0:	movwne	r9, #1
   120f4:	mov	r7, #16
   120f8:	mov	r0, r9
   120fc:	ldr	r6, [sp, #12]
   12100:	b	12114 <__assert_fail@plt+0x884>
   12104:	mov	r0, #1
   12108:	cmp	r9, #0
   1210c:	ldr	r6, [sp, #12]
   12110:	beq	123a8 <__assert_fail@plt+0xb18>
   12114:	movw	r1, #49636	; 0xc1e4
   12118:	movt	r1, #2
   1211c:	strb	r0, [r1]
   12120:	mov	r1, #2
   12124:	cmp	r6, #0
   12128:	movwne	r1, #1
   1212c:	tst	sl, #1
   12130:	movwne	r1, #1
   12134:	movw	r8, #49592	; 0xc1b8
   12138:	movt	r8, #2
   1213c:	ldr	r0, [r8]
   12140:	sub	r2, r5, r0
   12144:	cmp	r2, r1
   12148:	blt	122e8 <__assert_fail@plt+0xa58>
   1214c:	cmp	r6, #0
   12150:	beq	121a4 <__assert_fail@plt+0x914>
   12154:	mov	r0, #0
   12158:	str	r0, [sp, #24]
   1215c:	add	r1, sp, #24
   12160:	mov	r0, r6
   12164:	bl	185ac <__assert_fail@plt+0x6d1c>
   12168:	cmn	r0, #1
   1216c:	ble	12330 <__assert_fail@plt+0xaa0>
   12170:	ldr	r0, [sp, #24]
   12174:	movw	r1, #49640	; 0xc1e8
   12178:	movt	r1, #2
   1217c:	str	r0, [r1]
   12180:	mvn	r0, sl
   12184:	clz	r1, r6
   12188:	lsr	r1, r1, #5
   1218c:	orr	r0, r0, r1
   12190:	tst	r0, #1
   12194:	bne	121f4 <__assert_fail@plt+0x964>
   12198:	movw	r1, #44275	; 0xacf3
   1219c:	movt	r1, #1
   121a0:	b	12378 <__assert_fail@plt+0xae8>
   121a4:	tst	sl, #1
   121a8:	beq	121c0 <__assert_fail@plt+0x930>
   121ac:	movw	r0, #49640	; 0xc1e8
   121b0:	movt	r0, #2
   121b4:	mov	r1, #0
   121b8:	str	r1, [r0]
   121bc:	b	121f4 <__assert_fail@plt+0x964>
   121c0:	add	r1, r0, #1
   121c4:	str	r1, [r8]
   121c8:	ldr	r0, [r4, r0, lsl #2]
   121cc:	movw	r5, #49640	; 0xc1e8
   121d0:	movt	r5, #2
   121d4:	str	r0, [r5]
   121d8:	bl	114e8 <is_selinux_enabled@plt>
   121dc:	cmp	r0, #1
   121e0:	blt	121f4 <__assert_fail@plt+0x964>
   121e4:	ldr	r0, [r5]
   121e8:	bl	11644 <security_check_context@plt>
   121ec:	cmn	r0, #1
   121f0:	ble	123cc <__assert_fail@plt+0xb3c>
   121f4:	movw	r0, #49616	; 0xc1d0
   121f8:	movt	r0, #2
   121fc:	ldrb	r0, [r0]
   12200:	ldr	r1, [sp, #16]
   12204:	and	r0, r1, r0
   12208:	tst	r0, #1
   1220c:	beq	12260 <__assert_fail@plt+0x9d0>
   12210:	movw	r0, #49648	; 0xc1f0
   12214:	movt	r0, #2
   12218:	bl	17c78 <__assert_fail@plt+0x63e8>
   1221c:	movw	r1, #49664	; 0xc200
   12220:	movt	r1, #2
   12224:	str	r0, [r1]
   12228:	cmp	r0, #0
   1222c:	bne	12270 <__assert_fail@plt+0x9e0>
   12230:	bl	11710 <__errno_location@plt>
   12234:	ldr	r4, [r0]
   12238:	movw	r1, #44321	; 0xad21
   1223c:	movt	r1, #1
   12240:	mov	r0, #0
   12244:	mov	r2, #5
   12248:	bl	11578 <dcgettext@plt>
   1224c:	mov	r5, r0
   12250:	movw	r1, #47173	; 0xb845
   12254:	movt	r1, #1
   12258:	mov	r0, #4
   1225c:	b	12358 <__assert_fail@plt+0xac8>
   12260:	movw	r0, #49664	; 0xc200
   12264:	movt	r0, #2
   12268:	mov	r1, #0
   1226c:	str	r1, [r0]
   12270:	ldr	r0, [r8]
   12274:	add	r0, r4, r0, lsl #2
   12278:	orr	r1, r7, #8
   1227c:	bl	12408 <__assert_fail@plt+0xb78>
   12280:	eor	r0, r0, #1
   12284:	sub	sp, fp, #28
   12288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1228c:	movw	r0, #49512	; 0xc168
   12290:	movt	r0, #2
   12294:	ldr	r3, [r0]
   12298:	movw	r0, #49604	; 0xc1c4
   1229c:	movt	r0, #2
   122a0:	ldr	r0, [r0]
   122a4:	mov	r1, #0
   122a8:	movw	r2, #44104	; 0xac48
   122ac:	movt	r2, #1
   122b0:	movw	r7, #44090	; 0xac3a
   122b4:	movt	r7, #1
   122b8:	str	r7, [sp]
   122bc:	str	r2, [sp, #4]
   122c0:	str	r1, [sp, #8]
   122c4:	movw	r1, #44031	; 0xabff
   122c8:	movt	r1, #1
   122cc:	movw	r2, #44076	; 0xac2c
   122d0:	movt	r2, #1
   122d4:	bl	18a70 <__assert_fail@plt+0x71e0>
   122d8:	mov	r0, #0
   122dc:	bl	116c8 <exit@plt>
   122e0:	mov	r0, #0
   122e4:	bl	11990 <__assert_fail@plt+0x100>
   122e8:	cmp	r0, r5
   122ec:	bge	12370 <__assert_fail@plt+0xae0>
   122f0:	movw	r1, #44193	; 0xaca1
   122f4:	movt	r1, #1
   122f8:	mov	r0, #0
   122fc:	mov	r2, #5
   12300:	bl	11578 <dcgettext@plt>
   12304:	mov	r6, r0
   12308:	add	r0, r4, r5, lsl #2
   1230c:	ldr	r0, [r0, #-4]
   12310:	bl	17864 <__assert_fail@plt+0x5fd4>
   12314:	mov	r3, r0
   12318:	mov	r0, #0
   1231c:	mov	r1, #0
   12320:	mov	r2, r6
   12324:	bl	11638 <error@plt>
   12328:	mov	r0, #1
   1232c:	bl	11990 <__assert_fail@plt+0x100>
   12330:	bl	11710 <__errno_location@plt>
   12334:	ldr	r4, [r0]
   12338:	movw	r1, #44218	; 0xacba
   1233c:	movt	r1, #1
   12340:	mov	r0, #0
   12344:	mov	r2, #5
   12348:	bl	11578 <dcgettext@plt>
   1234c:	mov	r5, r0
   12350:	mov	r0, #4
   12354:	mov	r1, r6
   12358:	bl	17670 <__assert_fail@plt+0x5de0>
   1235c:	mov	r3, r0
   12360:	mov	r0, #1
   12364:	mov	r1, r4
   12368:	mov	r2, r5
   1236c:	bl	11638 <error@plt>
   12370:	movw	r1, #44177	; 0xac91
   12374:	movt	r1, #1
   12378:	mov	r0, #0
   1237c:	mov	r2, #5
   12380:	bl	11578 <dcgettext@plt>
   12384:	mov	r2, r0
   12388:	mov	r0, #0
   1238c:	mov	r1, #0
   12390:	bl	11638 <error@plt>
   12394:	mov	r0, #1
   12398:	bl	11990 <__assert_fail@plt+0x100>
   1239c:	movw	r1, #44117	; 0xac55
   123a0:	movt	r1, #1
   123a4:	b	123b0 <__assert_fail@plt+0xb20>
   123a8:	movw	r1, #44159	; 0xac7f
   123ac:	movt	r1, #1
   123b0:	mov	r0, #0
   123b4:	mov	r2, #5
   123b8:	bl	11578 <dcgettext@plt>
   123bc:	mov	r2, r0
   123c0:	mov	r0, #1
   123c4:	mov	r1, #0
   123c8:	bl	11638 <error@plt>
   123cc:	bl	11710 <__errno_location@plt>
   123d0:	ldr	r4, [r0]
   123d4:	movw	r1, #44255	; 0xacdf
   123d8:	movt	r1, #1
   123dc:	mov	r0, #0
   123e0:	mov	r2, #5
   123e4:	bl	11578 <dcgettext@plt>
   123e8:	mov	r6, r0
   123ec:	ldr	r0, [r5]
   123f0:	bl	17864 <__assert_fail@plt+0x5fd4>
   123f4:	mov	r3, r0
   123f8:	mov	r0, #1
   123fc:	mov	r1, r4
   12400:	mov	r2, r6
   12404:	bl	11638 <error@plt>
   12408:	push	{r4, r5, r6, sl, fp, lr}
   1240c:	add	fp, sp, #16
   12410:	mov	r2, #0
   12414:	bl	18f6c <__assert_fail@plt+0x76dc>
   12418:	mov	r5, r0
   1241c:	bl	13814 <__assert_fail@plt+0x1f84>
   12420:	cmp	r0, #0
   12424:	beq	12454 <__assert_fail@plt+0xbc4>
   12428:	mov	r1, r0
   1242c:	mov	r4, #1
   12430:	mov	r0, r5
   12434:	bl	124d8 <__assert_fail@plt+0xc48>
   12438:	and	r4, r4, r0
   1243c:	mov	r0, r5
   12440:	bl	13814 <__assert_fail@plt+0x1f84>
   12444:	mov	r1, r0
   12448:	cmp	r0, #0
   1244c:	bne	12430 <__assert_fail@plt+0xba0>
   12450:	b	12458 <__assert_fail@plt+0xbc8>
   12454:	mov	r4, #1
   12458:	bl	11710 <__errno_location@plt>
   1245c:	ldr	r6, [r0]
   12460:	cmp	r6, #0
   12464:	beq	12490 <__assert_fail@plt+0xc00>
   12468:	mov	r4, #0
   1246c:	movw	r1, #44822	; 0xaf16
   12470:	movt	r1, #1
   12474:	mov	r0, #0
   12478:	mov	r2, #5
   1247c:	bl	11578 <dcgettext@plt>
   12480:	mov	r2, r0
   12484:	mov	r0, #0
   12488:	mov	r1, r6
   1248c:	bl	11638 <error@plt>
   12490:	mov	r0, r5
   12494:	bl	13688 <__assert_fail@plt+0x1df8>
   12498:	cmp	r0, #0
   1249c:	beq	124d0 <__assert_fail@plt+0xc40>
   124a0:	bl	11710 <__errno_location@plt>
   124a4:	ldr	r5, [r0]
   124a8:	mov	r4, #0
   124ac:	movw	r1, #44838	; 0xaf26
   124b0:	movt	r1, #1
   124b4:	mov	r0, #0
   124b8:	mov	r2, #5
   124bc:	bl	11578 <dcgettext@plt>
   124c0:	mov	r2, r0
   124c4:	mov	r0, #0
   124c8:	mov	r1, r5
   124cc:	bl	11638 <error@plt>
   124d0:	mov	r0, r4
   124d4:	pop	{r4, r5, r6, sl, fp, pc}
   124d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124dc:	add	fp, sp, #28
   124e0:	sub	sp, sp, #4
   124e4:	mov	r5, r1
   124e8:	mov	sl, r0
   124ec:	add	r4, r1, #64	; 0x40
   124f0:	ldrd	r8, [r1, #24]
   124f4:	ldrh	r0, [r1, #56]	; 0x38
   124f8:	sub	r1, r0, #1
   124fc:	mov	r6, #1
   12500:	cmp	r1, #9
   12504:	bhi	12714 <__assert_fail@plt+0xe84>
   12508:	add	r2, pc, #0
   1250c:	ldr	pc, [r2, r1, lsl #2]
   12510:	andeq	r2, r1, r8, lsr r5
   12514:	andeq	r2, r1, r8, lsl #12
   12518:	andeq	r2, r1, r4, lsl r7
   1251c:	andeq	r2, r1, r0, ror #12
   12520:	andeq	r2, r1, r4, lsl r7
   12524:	andeq	r2, r1, r0, ror r6
   12528:	andeq	r2, r1, ip, lsl #13
   1252c:	andeq	r2, r1, r4, lsl r7
   12530:	andeq	r2, r1, r4, lsl r7
   12534:			; <UNDEFINED> instruction: 0x000126b8
   12538:	movw	r0, #49616	; 0xc1d0
   1253c:	movt	r0, #2
   12540:	ldrb	r0, [r0]
   12544:	cmp	r0, #1
   12548:	bne	12740 <__assert_fail@plt+0xeb0>
   1254c:	movw	r0, #49664	; 0xc200
   12550:	movt	r0, #2
   12554:	ldr	r0, [r0]
   12558:	mov	r6, #1
   1255c:	cmp	r0, #0
   12560:	beq	127c4 <__assert_fail@plt+0xf34>
   12564:	ldrd	r2, [r0]
   12568:	ldr	r8, [r5, #160]	; 0xa0
   1256c:	ldr	r1, [r5, #164]	; 0xa4
   12570:	eor	r1, r1, r3
   12574:	eor	r2, r8, r2
   12578:	orrs	r1, r2, r1
   1257c:	bne	127c4 <__assert_fail@plt+0xf34>
   12580:	ldrd	r0, [r0, #8]
   12584:	ldrd	r2, [r4]
   12588:	eor	r1, r3, r1
   1258c:	eor	r0, r2, r0
   12590:	orrs	r0, r0, r1
   12594:	bne	127c4 <__assert_fail@plt+0xf34>
   12598:	movw	r1, #47173	; 0xb845
   1259c:	movt	r1, #1
   125a0:	mov	r0, r9
   125a4:	bl	114f4 <strcmp@plt>
   125a8:	cmp	r0, #0
   125ac:	beq	128f4 <__assert_fail@plt+0x1064>
   125b0:	movw	r1, #44900	; 0xaf64
   125b4:	movt	r1, #1
   125b8:	mov	r0, #0
   125bc:	mov	r2, #5
   125c0:	bl	11578 <dcgettext@plt>
   125c4:	mov	r6, r0
   125c8:	mov	r0, #0
   125cc:	mov	r1, #4
   125d0:	mov	r2, r9
   125d4:	bl	175c0 <__assert_fail@plt+0x5d30>
   125d8:	mov	r7, r0
   125dc:	movw	r2, #47173	; 0xb845
   125e0:	movt	r2, #1
   125e4:	mov	r0, #1
   125e8:	mov	r1, #4
   125ec:	bl	175c0 <__assert_fail@plt+0x5d30>
   125f0:	str	r0, [sp]
   125f4:	mov	r0, #0
   125f8:	mov	r1, #0
   125fc:	mov	r2, r6
   12600:	mov	r3, r7
   12604:	b	12928 <__assert_fail@plt+0x1098>
   12608:	mov	r0, sl
   1260c:	mov	r1, r5
   12610:	bl	18fb8 <__assert_fail@plt+0x7728>
   12614:	cmp	r0, #0
   12618:	beq	12740 <__assert_fail@plt+0xeb0>
   1261c:	mov	r6, #0
   12620:	movw	r1, #45049	; 0xaff9
   12624:	movt	r1, #1
   12628:	mov	r0, #0
   1262c:	mov	r2, #5
   12630:	bl	11578 <dcgettext@plt>
   12634:	mov	r4, r0
   12638:	mov	r0, #0
   1263c:	mov	r1, #3
   12640:	mov	r2, r9
   12644:	bl	17724 <__assert_fail@plt+0x5e94>
   12648:	mov	r3, r0
   1264c:	mov	r0, #0
   12650:	mov	r1, #0
   12654:	mov	r2, r4
   12658:	bl	11638 <error@plt>
   1265c:	b	127c4 <__assert_fail@plt+0xf34>
   12660:	ldr	r6, [r5, #32]
   12664:	movw	r1, #45024	; 0xafe0
   12668:	movt	r1, #1
   1266c:	b	126dc <__assert_fail@plt+0xe4c>
   12670:	movw	r0, #49616	; 0xc1d0
   12674:	movt	r0, #2
   12678:	ldrb	r0, [r0]
   1267c:	mov	r6, #1
   12680:	cmp	r0, #0
   12684:	bne	1271c <__assert_fail@plt+0xe8c>
   12688:	b	127c4 <__assert_fail@plt+0xf34>
   1268c:	ldr	r6, [r5, #32]
   12690:	mov	r0, #0
   12694:	mov	r1, #3
   12698:	mov	r2, r9
   1269c:	bl	17724 <__assert_fail@plt+0x5e94>
   126a0:	mov	r3, r0
   126a4:	movw	r2, #45759	; 0xb2bf
   126a8:	movt	r2, #1
   126ac:	mov	r0, #0
   126b0:	mov	r1, r6
   126b4:	b	12708 <__assert_fail@plt+0xe78>
   126b8:	ldr	r0, [r5, #48]	; 0x30
   126bc:	cmp	r0, #0
   126c0:	bne	126d0 <__assert_fail@plt+0xe40>
   126c4:	ldr	r0, [r5, #16]
   126c8:	cmp	r0, #0
   126cc:	beq	12874 <__assert_fail@plt+0xfe4>
   126d0:	ldr	r6, [r5, #32]
   126d4:	movw	r1, #45007	; 0xafcf
   126d8:	movt	r1, #1
   126dc:	mov	r0, #0
   126e0:	mov	r2, #5
   126e4:	bl	11578 <dcgettext@plt>
   126e8:	mov	r7, r0
   126ec:	mov	r0, #4
   126f0:	mov	r1, r9
   126f4:	bl	17670 <__assert_fail@plt+0x5de0>
   126f8:	mov	r3, r0
   126fc:	mov	r0, #0
   12700:	mov	r1, r6
   12704:	mov	r2, r7
   12708:	bl	11638 <error@plt>
   1270c:	ldrh	r0, [r5, #56]	; 0x38
   12710:	mov	r6, #0
   12714:	cmp	r0, #6
   12718:	bne	12734 <__assert_fail@plt+0xea4>
   1271c:	cmp	r6, #0
   12720:	movwne	r0, #49664	; 0xc200
   12724:	movtne	r0, #2
   12728:	ldrne	r0, [r0]
   1272c:	cmpne	r0, #0
   12730:	bne	127d0 <__assert_fail@plt+0xf40>
   12734:	mov	r4, #0
   12738:	cmp	r6, #0
   1273c:	beq	1279c <__assert_fail@plt+0xf0c>
   12740:	movw	r0, #49617	; 0xc1d1
   12744:	movt	r0, #2
   12748:	ldrb	r0, [r0]
   1274c:	cmp	r0, #1
   12750:	bne	12788 <__assert_fail@plt+0xef8>
   12754:	movw	r1, #45235	; 0xb0b3
   12758:	movt	r1, #1
   1275c:	mov	r0, #0
   12760:	mov	r2, #5
   12764:	bl	11578 <dcgettext@plt>
   12768:	mov	r6, r0
   1276c:	mov	r0, #4
   12770:	mov	r1, r9
   12774:	bl	17670 <__assert_fail@plt+0x5de0>
   12778:	mov	r2, r0
   1277c:	mov	r0, #1
   12780:	mov	r1, r6
   12784:	bl	11740 <__printf_chk@plt>
   12788:	ldr	r0, [sl, #32]
   1278c:	mov	r1, r8
   12790:	bl	12970 <__assert_fail@plt+0x10e0>
   12794:	clz	r0, r0
   12798:	lsr	r4, r0, #5
   1279c:	movw	r0, #49616	; 0xc1d0
   127a0:	movt	r0, #2
   127a4:	ldrb	r0, [r0]
   127a8:	cmp	r0, #0
   127ac:	bne	127c0 <__assert_fail@plt+0xf30>
   127b0:	mov	r0, sl
   127b4:	mov	r1, r5
   127b8:	mov	r2, #4
   127bc:	bl	14aec <__assert_fail@plt+0x325c>
   127c0:	mov	r6, r4
   127c4:	mov	r0, r6
   127c8:	sub	sp, fp, #28
   127cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d0:	ldrd	r2, [r0]
   127d4:	ldr	r1, [r5, #160]	; 0xa0
   127d8:	ldr	r7, [r5, #164]	; 0xa4
   127dc:	eor	r3, r7, r3
   127e0:	eor	r1, r1, r2
   127e4:	orrs	r1, r1, r3
   127e8:	bne	12734 <__assert_fail@plt+0xea4>
   127ec:	ldrd	r0, [r0, #8]
   127f0:	ldrd	r2, [r4]
   127f4:	eor	r1, r3, r1
   127f8:	eor	r0, r2, r0
   127fc:	orrs	r0, r0, r1
   12800:	bne	12734 <__assert_fail@plt+0xea4>
   12804:	movw	r1, #47173	; 0xb845
   12808:	movt	r1, #1
   1280c:	mov	r0, r9
   12810:	bl	114f4 <strcmp@plt>
   12814:	cmp	r0, #0
   12818:	beq	12890 <__assert_fail@plt+0x1000>
   1281c:	movw	r1, #44900	; 0xaf64
   12820:	movt	r1, #1
   12824:	mov	r0, #0
   12828:	mov	r2, #5
   1282c:	bl	11578 <dcgettext@plt>
   12830:	mov	r6, r0
   12834:	mov	r0, #0
   12838:	mov	r1, #4
   1283c:	mov	r2, r9
   12840:	bl	175c0 <__assert_fail@plt+0x5d30>
   12844:	mov	r7, r0
   12848:	movw	r2, #47173	; 0xb845
   1284c:	movt	r2, #1
   12850:	mov	r0, #1
   12854:	mov	r1, #4
   12858:	bl	175c0 <__assert_fail@plt+0x5d30>
   1285c:	str	r0, [sp]
   12860:	mov	r0, #0
   12864:	mov	r1, #0
   12868:	mov	r2, r6
   1286c:	mov	r3, r7
   12870:	b	128c4 <__assert_fail@plt+0x1034>
   12874:	mov	r6, #1
   12878:	str	r6, [r5, #16]
   1287c:	mov	r0, sl
   12880:	mov	r1, r5
   12884:	mov	r2, #1
   12888:	bl	14aec <__assert_fail@plt+0x325c>
   1288c:	b	127c4 <__assert_fail@plt+0xf34>
   12890:	movw	r1, #44855	; 0xaf37
   12894:	movt	r1, #1
   12898:	mov	r0, #0
   1289c:	mov	r2, #5
   128a0:	bl	11578 <dcgettext@plt>
   128a4:	mov	r6, r0
   128a8:	mov	r0, #4
   128ac:	mov	r1, r9
   128b0:	bl	17670 <__assert_fail@plt+0x5de0>
   128b4:	mov	r3, r0
   128b8:	mov	r0, #0
   128bc:	mov	r1, #0
   128c0:	mov	r2, r6
   128c4:	bl	11638 <error@plt>
   128c8:	mov	r4, #0
   128cc:	movw	r1, #44958	; 0xaf9e
   128d0:	movt	r1, #1
   128d4:	mov	r0, #0
   128d8:	mov	r2, #5
   128dc:	bl	11578 <dcgettext@plt>
   128e0:	mov	r2, r0
   128e4:	mov	r0, #0
   128e8:	mov	r1, #0
   128ec:	bl	11638 <error@plt>
   128f0:	b	1279c <__assert_fail@plt+0xf0c>
   128f4:	movw	r1, #44855	; 0xaf37
   128f8:	movt	r1, #1
   128fc:	mov	r0, #0
   12900:	mov	r2, #5
   12904:	bl	11578 <dcgettext@plt>
   12908:	mov	r6, r0
   1290c:	mov	r0, #4
   12910:	mov	r1, r9
   12914:	bl	17670 <__assert_fail@plt+0x5de0>
   12918:	mov	r3, r0
   1291c:	mov	r0, #0
   12920:	mov	r1, #0
   12924:	mov	r2, r6
   12928:	bl	11638 <error@plt>
   1292c:	mov	r6, #0
   12930:	movw	r1, #44958	; 0xaf9e
   12934:	movt	r1, #1
   12938:	mov	r0, #0
   1293c:	mov	r2, #5
   12940:	bl	11578 <dcgettext@plt>
   12944:	mov	r2, r0
   12948:	mov	r0, #0
   1294c:	mov	r1, #0
   12950:	bl	11638 <error@plt>
   12954:	mov	r0, sl
   12958:	mov	r1, r5
   1295c:	mov	r2, #4
   12960:	bl	14aec <__assert_fail@plt+0x325c>
   12964:	mov	r0, sl
   12968:	bl	13814 <__assert_fail@plt+0x1f84>
   1296c:	b	127c4 <__assert_fail@plt+0xf34>
   12970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12974:	add	fp, sp, #28
   12978:	sub	sp, sp, #12
   1297c:	mov	r8, r1
   12980:	mov	r5, r0
   12984:	mov	r0, #0
   12988:	str	r0, [sp, #8]
   1298c:	movw	sl, #49640	; 0xc1e8
   12990:	movt	sl, #2
   12994:	ldr	r6, [sl]
   12998:	cmp	r6, #0
   1299c:	beq	129d0 <__assert_fail@plt+0x1140>
   129a0:	movw	r0, #49636	; 0xc1e4
   129a4:	movt	r0, #2
   129a8:	ldrb	r0, [r0]
   129ac:	cmp	r0, #0
   129b0:	beq	12a00 <__assert_fail@plt+0x1170>
   129b4:	mov	r0, r5
   129b8:	mov	r1, r8
   129bc:	mov	r2, r6
   129c0:	bl	1813c <__assert_fail@plt+0x68ac>
   129c4:	cmp	r0, #0
   129c8:	bne	12a18 <__assert_fail@plt+0x1188>
   129cc:	b	12ae4 <__assert_fail@plt+0x1254>
   129d0:	movw	r0, #49636	; 0xc1e4
   129d4:	movt	r0, #2
   129d8:	ldrb	r0, [r0]
   129dc:	add	r2, sp, #8
   129e0:	cmp	r0, #0
   129e4:	beq	12a78 <__assert_fail@plt+0x11e8>
   129e8:	mov	r0, r5
   129ec:	mov	r1, r8
   129f0:	bl	17ccc <__assert_fail@plt+0x643c>
   129f4:	cmn	r0, #1
   129f8:	bgt	12a9c <__assert_fail@plt+0x120c>
   129fc:	b	12a8c <__assert_fail@plt+0x11fc>
   12a00:	mov	r0, r5
   12a04:	mov	r1, r8
   12a08:	mov	r2, r6
   12a0c:	bl	18374 <__assert_fail@plt+0x6ae4>
   12a10:	cmp	r0, #0
   12a14:	beq	12ae4 <__assert_fail@plt+0x1254>
   12a18:	bl	11710 <__errno_location@plt>
   12a1c:	ldr	r9, [r0]
   12a20:	movw	r1, #45317	; 0xb105
   12a24:	movt	r1, #1
   12a28:	mov	r0, #0
   12a2c:	mov	r2, #5
   12a30:	bl	11578 <dcgettext@plt>
   12a34:	mov	r4, r0
   12a38:	mov	r0, #0
   12a3c:	mov	r1, #4
   12a40:	mov	r2, r8
   12a44:	bl	175c0 <__assert_fail@plt+0x5d30>
   12a48:	mov	r5, r0
   12a4c:	mov	r7, #1
   12a50:	mov	r0, #1
   12a54:	mov	r1, r6
   12a58:	bl	1785c <__assert_fail@plt+0x5fcc>
   12a5c:	str	r0, [sp]
   12a60:	mov	r0, #0
   12a64:	mov	r1, r9
   12a68:	mov	r2, r4
   12a6c:	mov	r3, r5
   12a70:	bl	11638 <error@plt>
   12a74:	b	12ae8 <__assert_fail@plt+0x1258>
   12a78:	mov	r0, r5
   12a7c:	mov	r1, r8
   12a80:	bl	17f04 <__assert_fail@plt+0x6674>
   12a84:	cmn	r0, #1
   12a88:	bgt	12a9c <__assert_fail@plt+0x120c>
   12a8c:	bl	11710 <__errno_location@plt>
   12a90:	ldr	r6, [r0]
   12a94:	cmp	r6, #61	; 0x3d
   12a98:	bne	12b3c <__assert_fail@plt+0x12ac>
   12a9c:	ldr	r0, [sp, #8]
   12aa0:	cmp	r0, #0
   12aa4:	beq	12b08 <__assert_fail@plt+0x1278>
   12aa8:	add	r1, sp, #4
   12aac:	bl	12b84 <__assert_fail@plt+0x12f4>
   12ab0:	mov	r7, #1
   12ab4:	cmp	r0, #0
   12ab8:	bne	12b78 <__assert_fail@plt+0x12e8>
   12abc:	ldr	r0, [sp, #4]
   12ac0:	bl	11830 <context_str@plt>
   12ac4:	mov	r6, r0
   12ac8:	ldr	r1, [sp, #8]
   12acc:	cmp	r1, #0
   12ad0:	beq	129a0 <__assert_fail@plt+0x1110>
   12ad4:	mov	r0, r6
   12ad8:	bl	114f4 <strcmp@plt>
   12adc:	cmp	r0, #0
   12ae0:	bne	129a0 <__assert_fail@plt+0x1110>
   12ae4:	mov	r7, #0
   12ae8:	ldr	r0, [sl]
   12aec:	cmp	r0, #0
   12af0:	bne	12b78 <__assert_fail@plt+0x12e8>
   12af4:	ldr	r0, [sp, #4]
   12af8:	bl	11698 <context_free@plt>
   12afc:	ldr	r0, [sp, #8]
   12b00:	bl	1180c <freecon@plt>
   12b04:	b	12b78 <__assert_fail@plt+0x12e8>
   12b08:	movw	r1, #45268	; 0xb0d4
   12b0c:	movt	r1, #1
   12b10:	mov	r0, #0
   12b14:	mov	r2, #5
   12b18:	bl	11578 <dcgettext@plt>
   12b1c:	mov	r5, r0
   12b20:	mov	r0, #4
   12b24:	mov	r1, r8
   12b28:	bl	17670 <__assert_fail@plt+0x5de0>
   12b2c:	mov	r3, r0
   12b30:	mov	r0, #0
   12b34:	mov	r1, #0
   12b38:	b	12b6c <__assert_fail@plt+0x12dc>
   12b3c:	movw	r1, #44218	; 0xacba
   12b40:	movt	r1, #1
   12b44:	mov	r0, #0
   12b48:	mov	r2, #5
   12b4c:	bl	11578 <dcgettext@plt>
   12b50:	mov	r5, r0
   12b54:	mov	r0, #4
   12b58:	mov	r1, r8
   12b5c:	bl	17670 <__assert_fail@plt+0x5de0>
   12b60:	mov	r3, r0
   12b64:	mov	r0, #0
   12b68:	mov	r1, r6
   12b6c:	mov	r2, r5
   12b70:	bl	11638 <error@plt>
   12b74:	mov	r7, #1
   12b78:	mov	r0, r7
   12b7c:	sub	sp, fp, #28
   12b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b88:	add	fp, sp, #24
   12b8c:	sub	sp, sp, #8
   12b90:	mov	r8, r1
   12b94:	mov	r6, r0
   12b98:	bl	11554 <context_new@plt>
   12b9c:	cmp	r0, #0
   12ba0:	beq	12d5c <__assert_fail@plt+0x14cc>
   12ba4:	mov	r4, r0
   12ba8:	movw	r5, #49620	; 0xc1d4
   12bac:	movt	r5, #2
   12bb0:	ldr	r1, [r5]
   12bb4:	mov	r9, #1
   12bb8:	cmp	r1, #0
   12bbc:	beq	12c18 <__assert_fail@plt+0x1388>
   12bc0:	mov	r0, r4
   12bc4:	bl	116d4 <context_user_set@plt>
   12bc8:	cmp	r0, #0
   12bcc:	beq	12c18 <__assert_fail@plt+0x1388>
   12bd0:	bl	11710 <__errno_location@plt>
   12bd4:	ldr	r6, [r0]
   12bd8:	mov	r9, #0
   12bdc:	movw	r1, #45392	; 0xb150
   12be0:	movt	r1, #1
   12be4:	mov	r0, #0
   12be8:	mov	r2, #5
   12bec:	bl	11578 <dcgettext@plt>
   12bf0:	mov	r7, r0
   12bf4:	ldr	r0, [r5]
   12bf8:	bl	17864 <__assert_fail@plt+0x5fd4>
   12bfc:	str	r0, [sp]
   12c00:	movw	r3, #44780	; 0xaeec
   12c04:	movt	r3, #1
   12c08:	mov	r0, #0
   12c0c:	mov	r1, r6
   12c10:	mov	r2, r7
   12c14:	bl	11638 <error@plt>
   12c18:	movw	r5, #49632	; 0xc1e0
   12c1c:	movt	r5, #2
   12c20:	ldr	r1, [r5]
   12c24:	cmp	r1, #0
   12c28:	beq	12c84 <__assert_fail@plt+0x13f4>
   12c2c:	mov	r0, r4
   12c30:	bl	11824 <context_range_set@plt>
   12c34:	cmp	r0, #0
   12c38:	beq	12c84 <__assert_fail@plt+0x13f4>
   12c3c:	bl	11710 <__errno_location@plt>
   12c40:	ldr	r6, [r0]
   12c44:	mov	r9, #0
   12c48:	movw	r1, #45392	; 0xb150
   12c4c:	movt	r1, #1
   12c50:	mov	r0, #0
   12c54:	mov	r2, #5
   12c58:	bl	11578 <dcgettext@plt>
   12c5c:	mov	r7, r0
   12c60:	ldr	r0, [r5]
   12c64:	bl	17864 <__assert_fail@plt+0x5fd4>
   12c68:	str	r0, [sp]
   12c6c:	movw	r3, #44795	; 0xaefb
   12c70:	movt	r3, #1
   12c74:	mov	r0, #0
   12c78:	mov	r1, r6
   12c7c:	mov	r2, r7
   12c80:	bl	11638 <error@plt>
   12c84:	movw	r5, #49624	; 0xc1d8
   12c88:	movt	r5, #2
   12c8c:	ldr	r1, [r5]
   12c90:	cmp	r1, #0
   12c94:	beq	12cf0 <__assert_fail@plt+0x1460>
   12c98:	mov	r0, r4
   12c9c:	bl	1156c <context_role_set@plt>
   12ca0:	cmp	r0, #0
   12ca4:	beq	12cf0 <__assert_fail@plt+0x1460>
   12ca8:	bl	11710 <__errno_location@plt>
   12cac:	ldr	r6, [r0]
   12cb0:	mov	r9, #0
   12cb4:	movw	r1, #45392	; 0xb150
   12cb8:	movt	r1, #1
   12cbc:	mov	r0, #0
   12cc0:	mov	r2, #5
   12cc4:	bl	11578 <dcgettext@plt>
   12cc8:	mov	r7, r0
   12ccc:	ldr	r0, [r5]
   12cd0:	bl	17864 <__assert_fail@plt+0x5fd4>
   12cd4:	str	r0, [sp]
   12cd8:	movw	r3, #44785	; 0xaef1
   12cdc:	movt	r3, #1
   12ce0:	mov	r0, #0
   12ce4:	mov	r1, r6
   12ce8:	mov	r2, r7
   12cec:	bl	11638 <error@plt>
   12cf0:	movw	r7, #49628	; 0xc1dc
   12cf4:	movt	r7, #2
   12cf8:	ldr	r1, [r7]
   12cfc:	cmp	r1, #0
   12d00:	beq	12d9c <__assert_fail@plt+0x150c>
   12d04:	mov	r0, r4
   12d08:	bl	11584 <context_type_set@plt>
   12d0c:	cmp	r0, #0
   12d10:	beq	12d9c <__assert_fail@plt+0x150c>
   12d14:	bl	11710 <__errno_location@plt>
   12d18:	ldr	r5, [r0]
   12d1c:	movw	r1, #45392	; 0xb150
   12d20:	movt	r1, #1
   12d24:	mov	r0, #0
   12d28:	mov	r2, #5
   12d2c:	bl	11578 <dcgettext@plt>
   12d30:	mov	r6, r0
   12d34:	ldr	r0, [r7]
   12d38:	bl	17864 <__assert_fail@plt+0x5fd4>
   12d3c:	str	r0, [sp]
   12d40:	movw	r3, #44790	; 0xaef6
   12d44:	movt	r3, #1
   12d48:	mov	r0, #0
   12d4c:	mov	r1, r5
   12d50:	mov	r2, r6
   12d54:	bl	11638 <error@plt>
   12d58:	b	12db0 <__assert_fail@plt+0x1520>
   12d5c:	bl	11710 <__errno_location@plt>
   12d60:	ldr	r4, [r0]
   12d64:	movw	r1, #45354	; 0xb12a
   12d68:	movt	r1, #1
   12d6c:	mov	r0, #0
   12d70:	mov	r2, #5
   12d74:	bl	11578 <dcgettext@plt>
   12d78:	mov	r5, r0
   12d7c:	mov	r0, r6
   12d80:	bl	17864 <__assert_fail@plt+0x5fd4>
   12d84:	mov	r3, r0
   12d88:	mov	r0, #0
   12d8c:	mov	r1, r4
   12d90:	mov	r2, r5
   12d94:	bl	11638 <error@plt>
   12d98:	b	12dc8 <__assert_fail@plt+0x1538>
   12d9c:	cmp	r9, #0
   12da0:	strne	r4, [r8]
   12da4:	movne	r0, #0
   12da8:	subne	sp, fp, #24
   12dac:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   12db0:	bl	11710 <__errno_location@plt>
   12db4:	mov	r5, r0
   12db8:	ldr	r6, [r0]
   12dbc:	mov	r0, r4
   12dc0:	bl	11698 <context_free@plt>
   12dc4:	str	r6, [r5]
   12dc8:	mov	r0, #1
   12dcc:	sub	sp, fp, #24
   12dd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12dd4:	movw	r1, #49668	; 0xc204
   12dd8:	movt	r1, #2
   12ddc:	str	r0, [r1]
   12de0:	bx	lr
   12de4:	movw	r1, #49672	; 0xc208
   12de8:	movt	r1, #2
   12dec:	strb	r0, [r1]
   12df0:	bx	lr
   12df4:	push	{r4, r5, r6, sl, fp, lr}
   12df8:	add	fp, sp, #16
   12dfc:	sub	sp, sp, #8
   12e00:	movw	r0, #49604	; 0xc1c4
   12e04:	movt	r0, #2
   12e08:	ldr	r0, [r0]
   12e0c:	bl	1965c <__assert_fail@plt+0x7dcc>
   12e10:	cmp	r0, #0
   12e14:	beq	12e3c <__assert_fail@plt+0x15ac>
   12e18:	movw	r0, #49672	; 0xc208
   12e1c:	movt	r0, #2
   12e20:	ldrb	r0, [r0]
   12e24:	cmp	r0, #0
   12e28:	beq	12e5c <__assert_fail@plt+0x15cc>
   12e2c:	bl	11710 <__errno_location@plt>
   12e30:	ldr	r0, [r0]
   12e34:	cmp	r0, #32
   12e38:	bne	12e5c <__assert_fail@plt+0x15cc>
   12e3c:	movw	r0, #49600	; 0xc1c0
   12e40:	movt	r0, #2
   12e44:	ldr	r0, [r0]
   12e48:	bl	1965c <__assert_fail@plt+0x7dcc>
   12e4c:	cmp	r0, #0
   12e50:	subeq	sp, fp, #16
   12e54:	popeq	{r4, r5, r6, sl, fp, pc}
   12e58:	b	12ecc <__assert_fail@plt+0x163c>
   12e5c:	movw	r1, #45743	; 0xb2af
   12e60:	movt	r1, #1
   12e64:	mov	r0, #0
   12e68:	mov	r2, #5
   12e6c:	bl	11578 <dcgettext@plt>
   12e70:	mov	r4, r0
   12e74:	movw	r0, #49668	; 0xc204
   12e78:	movt	r0, #2
   12e7c:	ldr	r6, [r0]
   12e80:	bl	11710 <__errno_location@plt>
   12e84:	ldr	r5, [r0]
   12e88:	cmp	r6, #0
   12e8c:	bne	12ea8 <__assert_fail@plt+0x1618>
   12e90:	movw	r2, #45759	; 0xb2bf
   12e94:	movt	r2, #1
   12e98:	mov	r0, #0
   12e9c:	mov	r1, r5
   12ea0:	mov	r3, r4
   12ea4:	b	12ec8 <__assert_fail@plt+0x1638>
   12ea8:	mov	r0, r6
   12eac:	bl	17714 <__assert_fail@plt+0x5e84>
   12eb0:	mov	r3, r0
   12eb4:	str	r4, [sp]
   12eb8:	movw	r2, #45755	; 0xb2bb
   12ebc:	movt	r2, #1
   12ec0:	mov	r0, #0
   12ec4:	mov	r1, r5
   12ec8:	bl	11638 <error@plt>
   12ecc:	movw	r0, #49516	; 0xc16c
   12ed0:	movt	r0, #2
   12ed4:	ldr	r0, [r0]
   12ed8:	bl	11530 <_exit@plt>
   12edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee0:	add	fp, sp, #28
   12ee4:	sub	sp, sp, #12
   12ee8:	cmp	r1, #4096	; 0x1000
   12eec:	bcs	12f08 <__assert_fail@plt+0x1678>
   12ef0:	mov	r6, r1
   12ef4:	mov	r7, r0
   12ef8:	and	r0, r1, #516	; 0x204
   12efc:	cmp	r0, #516	; 0x204
   12f00:	tstne	r6, #18
   12f04:	bne	12f24 <__assert_fail@plt+0x1694>
   12f08:	bl	11710 <__errno_location@plt>
   12f0c:	mov	r1, #22
   12f10:	str	r1, [r0]
   12f14:	mov	r4, #0
   12f18:	mov	r0, r4
   12f1c:	sub	sp, fp, #28
   12f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f24:	mov	sl, r2
   12f28:	mov	r0, #1
   12f2c:	mov	r1, #96	; 0x60
   12f30:	bl	18fe8 <__assert_fail@plt+0x7758>
   12f34:	cmp	r0, #0
   12f38:	beq	12f14 <__assert_fail@plt+0x1684>
   12f3c:	mov	r4, r0
   12f40:	mvn	r0, #99	; 0x63
   12f44:	str	r0, [r4, #32]
   12f48:	bic	r0, r6, #516	; 0x204
   12f4c:	tst	r6, #2
   12f50:	mov	r1, r6
   12f54:	orrne	r1, r0, #4
   12f58:	str	sl, [r4, #44]	; 0x2c
   12f5c:	str	r1, [r4, #48]	; 0x30
   12f60:	mov	r0, r7
   12f64:	bl	131d8 <__assert_fail@plt+0x1948>
   12f68:	mov	r1, r0
   12f6c:	cmp	r0, #4096	; 0x1000
   12f70:	movls	r1, #4096	; 0x1000
   12f74:	mov	r0, r4
   12f78:	bl	1321c <__assert_fail@plt+0x198c>
   12f7c:	cmp	r0, #0
   12f80:	beq	131cc <__assert_fail@plt+0x193c>
   12f84:	ldr	r0, [r7]
   12f88:	cmp	r0, #0
   12f8c:	beq	12fbc <__assert_fail@plt+0x172c>
   12f90:	movw	r1, #43931	; 0xab9b
   12f94:	movt	r1, #1
   12f98:	mov	r0, r4
   12f9c:	mov	r2, #0
   12fa0:	bl	13294 <__assert_fail@plt+0x1a04>
   12fa4:	cmp	r0, #0
   12fa8:	beq	131c4 <__assert_fail@plt+0x1934>
   12fac:	mov	r8, r0
   12fb0:	mvn	r0, #0
   12fb4:	str	r0, [r8, #48]	; 0x30
   12fb8:	b	12fc0 <__assert_fail@plt+0x1730>
   12fbc:	mov	r8, #0
   12fc0:	cmp	sl, #0
   12fc4:	ldrbne	r0, [r4, #49]	; 0x31
   12fc8:	ubfxne	r0, r0, #2, #1
   12fcc:	moveq	r0, #1
   12fd0:	ldr	r5, [r7]
   12fd4:	cmp	r5, #0
   12fd8:	beq	13104 <__assert_fail@plt+0x1874>
   12fdc:	and	r1, r6, #2048	; 0x800
   12fe0:	str	r1, [sp, #8]
   12fe4:	eor	r0, r0, #1
   12fe8:	str	r0, [sp, #4]
   12fec:	mov	r9, #0
   12ff0:	mov	r0, #0
   12ff4:	str	r0, [sp]
   12ff8:	mov	r6, #0
   12ffc:	mov	r0, r5
   13000:	bl	116ec <strlen@plt>
   13004:	mov	r2, r0
   13008:	ldr	r0, [sp, #8]
   1300c:	cmp	r0, #0
   13010:	bne	13048 <__assert_fail@plt+0x17b8>
   13014:	cmp	r2, #3
   13018:	bcc	13048 <__assert_fail@plt+0x17b8>
   1301c:	add	r0, r5, r2
   13020:	ldrb	r0, [r0, #-1]
   13024:	cmp	r0, #47	; 0x2f
   13028:	bne	13048 <__assert_fail@plt+0x17b8>
   1302c:	sub	r0, r5, #2
   13030:	ldrb	r1, [r0, r2]
   13034:	cmp	r1, #47	; 0x2f
   13038:	bne	13048 <__assert_fail@plt+0x17b8>
   1303c:	sub	r2, r2, #1
   13040:	cmp	r2, #1
   13044:	bhi	13030 <__assert_fail@plt+0x17a0>
   13048:	mov	r0, r4
   1304c:	mov	r1, r5
   13050:	bl	13294 <__assert_fail@plt+0x1a04>
   13054:	cmp	r0, #0
   13058:	beq	131b4 <__assert_fail@plt+0x1924>
   1305c:	mov	r5, r0
   13060:	str	r8, [r0, #4]
   13064:	mov	r0, #0
   13068:	str	r0, [r5, #48]	; 0x30
   1306c:	add	r0, r5, #168	; 0xa8
   13070:	str	r0, [r5, #24]
   13074:	clz	r0, r9
   13078:	lsr	r0, r0, #5
   1307c:	ldr	r1, [sp, #4]
   13080:	orrs	r0, r1, r0
   13084:	bne	130b0 <__assert_fail@plt+0x1820>
   13088:	mov	r0, #11
   1308c:	strh	r0, [r5, #56]	; 0x38
   13090:	mov	r0, r5
   13094:	mov	r1, #1
   13098:	bl	13314 <__assert_fail@plt+0x1a84>
   1309c:	cmp	sl, #0
   130a0:	beq	130cc <__assert_fail@plt+0x183c>
   130a4:	str	r9, [r5, #8]
   130a8:	mov	r9, r5
   130ac:	b	130e8 <__assert_fail@plt+0x1858>
   130b0:	mov	r0, r4
   130b4:	mov	r1, r5
   130b8:	mov	r2, #0
   130bc:	bl	13344 <__assert_fail@plt+0x1ab4>
   130c0:	strh	r0, [r5, #56]	; 0x38
   130c4:	cmp	sl, #0
   130c8:	bne	130a4 <__assert_fail@plt+0x1814>
   130cc:	mov	r0, #0
   130d0:	str	r0, [r5, #8]
   130d4:	cmp	r9, #0
   130d8:	beq	130fc <__assert_fail@plt+0x186c>
   130dc:	ldr	r0, [sp]
   130e0:	str	r5, [r0, #8]
   130e4:	str	r5, [sp]
   130e8:	add	r6, r6, #1
   130ec:	ldr	r5, [r7, #4]!
   130f0:	cmp	r5, #0
   130f4:	bne	12ffc <__assert_fail@plt+0x176c>
   130f8:	b	1310c <__assert_fail@plt+0x187c>
   130fc:	str	r5, [sp]
   13100:	b	130a8 <__assert_fail@plt+0x1818>
   13104:	mov	r9, #0
   13108:	b	13130 <__assert_fail@plt+0x18a0>
   1310c:	cmp	sl, #0
   13110:	beq	13130 <__assert_fail@plt+0x18a0>
   13114:	cmp	r6, #2
   13118:	bcc	13130 <__assert_fail@plt+0x18a0>
   1311c:	mov	r0, r4
   13120:	mov	r1, r9
   13124:	mov	r2, r6
   13128:	bl	134ac <__assert_fail@plt+0x1c1c>
   1312c:	mov	r9, r0
   13130:	movw	r1, #43931	; 0xab9b
   13134:	movt	r1, #1
   13138:	mov	r0, r4
   1313c:	mov	r2, #0
   13140:	bl	13294 <__assert_fail@plt+0x1a04>
   13144:	str	r0, [r4]
   13148:	cmp	r0, #0
   1314c:	beq	131b4 <__assert_fail@plt+0x1924>
   13150:	mov	r1, #9
   13154:	strh	r1, [r0, #56]	; 0x38
   13158:	str	r9, [r0, #8]
   1315c:	mov	r1, #1
   13160:	str	r1, [r0, #48]	; 0x30
   13164:	mov	r0, r4
   13168:	bl	1358c <__assert_fail@plt+0x1cfc>
   1316c:	cmp	r0, #0
   13170:	beq	131b4 <__assert_fail@plt+0x1924>
   13174:	ldrh	r0, [r4, #48]	; 0x30
   13178:	tst	r0, #516	; 0x204
   1317c:	bne	131a4 <__assert_fail@plt+0x1914>
   13180:	movw	r1, #45763	; 0xb2c3
   13184:	movt	r1, #1
   13188:	mov	r0, r4
   1318c:	bl	13618 <__assert_fail@plt+0x1d88>
   13190:	str	r0, [r4, #28]
   13194:	cmn	r0, #1
   13198:	ldrle	r0, [r4, #48]	; 0x30
   1319c:	orrle	r0, r0, #4
   131a0:	strle	r0, [r4, #48]	; 0x30
   131a4:	add	r0, r4, #60	; 0x3c
   131a8:	mvn	r1, #0
   131ac:	bl	15ec0 <__assert_fail@plt+0x4630>
   131b0:	b	12f18 <__assert_fail@plt+0x1688>
   131b4:	mov	r0, r9
   131b8:	bl	13648 <__assert_fail@plt+0x1db8>
   131bc:	mov	r0, r8
   131c0:	bl	19b34 <__assert_fail@plt+0x82a4>
   131c4:	ldr	r0, [r4, #24]
   131c8:	bl	19b34 <__assert_fail@plt+0x82a4>
   131cc:	mov	r0, r4
   131d0:	bl	19b34 <__assert_fail@plt+0x82a4>
   131d4:	b	12f14 <__assert_fail@plt+0x1684>
   131d8:	mov	r1, r0
   131dc:	ldr	r0, [r0]
   131e0:	cmp	r0, #0
   131e4:	moveq	r0, #1
   131e8:	bxeq	lr
   131ec:	push	{r4, r5, fp, lr}
   131f0:	add	fp, sp, #8
   131f4:	add	r5, r1, #4
   131f8:	mov	r4, #0
   131fc:	bl	116ec <strlen@plt>
   13200:	cmp	r0, r4
   13204:	movhi	r4, r0
   13208:	ldr	r0, [r5], #4
   1320c:	cmp	r0, #0
   13210:	bne	131fc <__assert_fail@plt+0x196c>
   13214:	add	r0, r4, #1
   13218:	pop	{r4, r5, fp, pc}
   1321c:	push	{r4, r5, fp, lr}
   13220:	add	fp, sp, #8
   13224:	mov	r4, r0
   13228:	ldr	r0, [r0, #36]	; 0x24
   1322c:	add	r1, r1, #256	; 0x100
   13230:	adds	r1, r1, r0
   13234:	bcc	1325c <__assert_fail@plt+0x19cc>
   13238:	ldr	r0, [r4, #24]
   1323c:	bl	19b34 <__assert_fail@plt+0x82a4>
   13240:	mov	r5, #0
   13244:	str	r5, [r4, #24]
   13248:	bl	11710 <__errno_location@plt>
   1324c:	mov	r1, #36	; 0x24
   13250:	str	r1, [r0]
   13254:	mov	r0, r5
   13258:	pop	{r4, r5, fp, pc}
   1325c:	str	r1, [r4, #36]	; 0x24
   13260:	ldr	r0, [r4, #24]
   13264:	bl	1906c <__assert_fail@plt+0x77dc>
   13268:	cmp	r0, #0
   1326c:	strne	r0, [r4, #24]
   13270:	movne	r5, #1
   13274:	movne	r0, r5
   13278:	popne	{r4, r5, fp, pc}
   1327c:	ldr	r0, [r4, #24]
   13280:	bl	19b34 <__assert_fail@plt+0x82a4>
   13284:	mov	r5, #0
   13288:	str	r5, [r4, #24]
   1328c:	mov	r0, r5
   13290:	pop	{r4, r5, fp, pc}
   13294:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13298:	add	fp, sp, #24
   1329c:	mov	r6, r2
   132a0:	mov	r8, r1
   132a4:	mov	r5, r0
   132a8:	add	r0, r2, #176	; 0xb0
   132ac:	bic	r0, r0, #7
   132b0:	bl	1903c <__assert_fail@plt+0x77ac>
   132b4:	cmp	r0, #0
   132b8:	moveq	r4, #0
   132bc:	moveq	r0, r4
   132c0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   132c4:	mov	r4, r0
   132c8:	add	r7, r0, #168	; 0xa8
   132cc:	mov	r0, r7
   132d0:	mov	r1, r8
   132d4:	mov	r2, r6
   132d8:	bl	1153c <memcpy@plt>
   132dc:	mov	r0, #0
   132e0:	strb	r0, [r7, r6]
   132e4:	str	r6, [r4, #52]	; 0x34
   132e8:	str	r5, [r4, #44]	; 0x2c
   132ec:	ldr	r1, [r5, #24]
   132f0:	mov	r2, #196608	; 0x30000
   132f4:	str	r2, [r4, #58]	; 0x3a
   132f8:	str	r0, [r4, #12]
   132fc:	str	r0, [r4, #16]
   13300:	str	r0, [r4, #20]
   13304:	str	r1, [r4, #28]
   13308:	str	r0, [r4, #32]
   1330c:	mov	r0, r4
   13310:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13314:	ldrh	r2, [r0, #56]	; 0x38
   13318:	cmp	r2, #11
   1331c:	bne	13338 <__assert_fail@plt+0x1aa8>
   13320:	mov	r3, #0
   13324:	mov	r2, #1
   13328:	cmp	r1, #0
   1332c:	movwne	r2, #2
   13330:	strd	r2, [r0, #112]	; 0x70
   13334:	bx	lr
   13338:	push	{fp, lr}
   1333c:	mov	fp, sp
   13340:	bl	11854 <abort@plt>
   13344:	push	{r4, r5, r6, sl, fp, lr}
   13348:	add	fp, sp, #16
   1334c:	mov	r4, r1
   13350:	ldr	r1, [r1, #48]	; 0x30
   13354:	cmp	r1, #0
   13358:	ldrbeq	r1, [r0, #48]	; 0x30
   1335c:	andeq	r1, r1, #1
   13360:	orreq	r2, r1, r2
   13364:	add	r5, r4, #64	; 0x40
   13368:	cmp	r2, #0
   1336c:	ldreq	r1, [r0, #48]	; 0x30
   13370:	andseq	r1, r1, #2
   13374:	beq	133c4 <__assert_fail@plt+0x1b34>
   13378:	ldr	r0, [r4, #24]
   1337c:	mov	r1, r5
   13380:	bl	1a488 <__assert_fail@plt+0x8bf8>
   13384:	cmp	r0, #0
   13388:	beq	13438 <__assert_fail@plt+0x1ba8>
   1338c:	bl	11710 <__errno_location@plt>
   13390:	mov	r6, r0
   13394:	ldr	r0, [r0]
   13398:	cmp	r0, #2
   1339c:	bne	133e8 <__assert_fail@plt+0x1b58>
   133a0:	ldr	r0, [r4, #24]
   133a4:	mov	r1, r5
   133a8:	bl	1a4a8 <__assert_fail@plt+0x8c18>
   133ac:	cmp	r0, #0
   133b0:	bne	133e8 <__assert_fail@plt+0x1b58>
   133b4:	mov	r0, #0
   133b8:	str	r0, [r6]
   133bc:	mov	r0, #13
   133c0:	pop	{r4, r5, r6, sl, fp, pc}
   133c4:	ldr	r1, [r4, #24]
   133c8:	ldr	r0, [r0, #32]
   133cc:	mov	r2, r5
   133d0:	mov	r3, #256	; 0x100
   133d4:	bl	1a4b8 <__assert_fail@plt+0x8c28>
   133d8:	cmp	r0, #0
   133dc:	beq	13438 <__assert_fail@plt+0x1ba8>
   133e0:	bl	11710 <__errno_location@plt>
   133e4:	mov	r6, r0
   133e8:	ldr	r0, [r6]
   133ec:	str	r0, [r4, #32]
   133f0:	mov	r0, #0
   133f4:	vmov.i32	q8, #0	; 0x00000000
   133f8:	str	r0, [r5, #96]	; 0x60
   133fc:	add	r1, r5, #80	; 0x50
   13400:	vst1.64	{d16-d17}, [r1]
   13404:	add	r1, r5, #64	; 0x40
   13408:	vst1.64	{d16-d17}, [r1]
   1340c:	add	r1, r5, #48	; 0x30
   13410:	vst1.64	{d16-d17}, [r1]
   13414:	add	r1, r5, #32
   13418:	vst1.64	{d16-d17}, [r1]
   1341c:	add	r1, r5, #16
   13420:	vst1.64	{d16-d17}, [r1]
   13424:	mov	r1, #100	; 0x64
   13428:	vst1.64	{d16-d17}, [r5], r1
   1342c:	str	r0, [r5]
   13430:	mov	r0, #10
   13434:	pop	{r4, r5, r6, sl, fp, pc}
   13438:	ldr	r0, [r4, #80]	; 0x50
   1343c:	and	r0, r0, #61440	; 0xf000
   13440:	cmp	r0, #40960	; 0xa000
   13444:	moveq	r0, #12
   13448:	popeq	{r4, r5, r6, sl, fp, pc}
   1344c:	cmp	r0, #32768	; 0x8000
   13450:	moveq	r0, #8
   13454:	popeq	{r4, r5, r6, sl, fp, pc}
   13458:	cmp	r0, #16384	; 0x4000
   1345c:	bne	13490 <__assert_fail@plt+0x1c00>
   13460:	ldrb	r1, [r4, #168]	; 0xa8
   13464:	mov	r0, #1
   13468:	cmp	r1, #46	; 0x2e
   1346c:	popne	{r4, r5, r6, sl, fp, pc}
   13470:	ldrb	r1, [r4, #169]	; 0xa9
   13474:	cmp	r1, #0
   13478:	beq	13498 <__assert_fail@plt+0x1c08>
   1347c:	cmp	r1, #46	; 0x2e
   13480:	ldrbeq	r1, [r4, #170]	; 0xaa
   13484:	cmpeq	r1, #0
   13488:	beq	13498 <__assert_fail@plt+0x1c08>
   1348c:	pop	{r4, r5, r6, sl, fp, pc}
   13490:	mov	r0, #3
   13494:	pop	{r4, r5, r6, sl, fp, pc}
   13498:	ldr	r1, [r4, #48]	; 0x30
   1349c:	mov	r0, #5
   134a0:	cmp	r1, #0
   134a4:	movweq	r0, #1
   134a8:	pop	{r4, r5, r6, sl, fp, pc}
   134ac:	push	{r4, r5, r6, r7, fp, lr}
   134b0:	add	fp, sp, #16
   134b4:	mov	r6, r2
   134b8:	mov	r4, r1
   134bc:	mov	r5, r0
   134c0:	ldr	r7, [r0, #44]	; 0x2c
   134c4:	ldr	r0, [r0, #40]	; 0x28
   134c8:	cmp	r0, r2
   134cc:	bcs	134f8 <__assert_fail@plt+0x1c68>
   134d0:	add	r1, r6, #40	; 0x28
   134d4:	str	r1, [r5, #40]	; 0x28
   134d8:	cmn	r1, #-1073741823	; 0xc0000001
   134dc:	bhi	13570 <__assert_fail@plt+0x1ce0>
   134e0:	ldr	r0, [r5, #8]
   134e4:	lsl	r1, r1, #2
   134e8:	bl	1906c <__assert_fail@plt+0x77dc>
   134ec:	cmp	r0, #0
   134f0:	beq	13570 <__assert_fail@plt+0x1ce0>
   134f4:	str	r0, [r5, #8]
   134f8:	cmp	r4, #0
   134fc:	beq	13514 <__assert_fail@plt+0x1c84>
   13500:	ldr	r0, [r5, #8]
   13504:	str	r4, [r0], #4
   13508:	ldr	r4, [r4, #8]
   1350c:	cmp	r4, #0
   13510:	bne	13504 <__assert_fail@plt+0x1c74>
   13514:	ldr	r0, [r5, #8]
   13518:	mov	r1, r6
   1351c:	mov	r2, #4
   13520:	mov	r3, r7
   13524:	bl	11800 <qsort@plt>
   13528:	subs	r1, r6, #1
   1352c:	ldr	r0, [r5, #8]
   13530:	ldr	r4, [r0]
   13534:	beq	1355c <__assert_fail@plt+0x1ccc>
   13538:	add	r2, r0, #4
   1353c:	rsb	r3, r6, #1
   13540:	ldr	r7, [r2, #-4]
   13544:	ldr	r6, [r2]
   13548:	str	r6, [r7, #8]
   1354c:	add	r2, r2, #4
   13550:	adds	r3, r3, #1
   13554:	bne	13540 <__assert_fail@plt+0x1cb0>
   13558:	add	r0, r0, r1, lsl #2
   1355c:	ldr	r0, [r0]
   13560:	mov	r1, #0
   13564:	str	r1, [r0, #8]
   13568:	mov	r0, r4
   1356c:	pop	{r4, r5, r6, r7, fp, pc}
   13570:	ldr	r0, [r5, #8]
   13574:	bl	19b34 <__assert_fail@plt+0x82a4>
   13578:	mov	r0, #0
   1357c:	str	r0, [r5, #40]	; 0x28
   13580:	str	r0, [r5, #8]
   13584:	mov	r0, r4
   13588:	pop	{r4, r5, r6, r7, fp, pc}
   1358c:	push	{r4, r5, fp, lr}
   13590:	add	fp, sp, #8
   13594:	sub	sp, sp, #8
   13598:	mov	r4, r0
   1359c:	ldrh	r0, [r0, #48]	; 0x30
   135a0:	movw	r1, #258	; 0x102
   135a4:	tst	r0, r1
   135a8:	beq	135e8 <__assert_fail@plt+0x1d58>
   135ac:	movw	r0, #39732	; 0x9b34
   135b0:	movt	r0, #1
   135b4:	str	r0, [sp]
   135b8:	mov	r5, #0
   135bc:	movw	r2, #19580	; 0x4c7c
   135c0:	movt	r2, #1
   135c4:	movw	r3, #19612	; 0x4c9c
   135c8:	movt	r3, #1
   135cc:	mov	r0, #31
   135d0:	mov	r1, #0
   135d4:	bl	15428 <__assert_fail@plt+0x3b98>
   135d8:	str	r0, [r4, #56]	; 0x38
   135dc:	cmp	r0, #0
   135e0:	movne	r5, #1
   135e4:	b	1360c <__assert_fail@plt+0x1d7c>
   135e8:	mov	r0, #32
   135ec:	bl	1903c <__assert_fail@plt+0x77ac>
   135f0:	str	r0, [r4, #56]	; 0x38
   135f4:	cmp	r0, #0
   135f8:	beq	13608 <__assert_fail@plt+0x1d78>
   135fc:	bl	196e4 <__assert_fail@plt+0x7e54>
   13600:	mov	r5, #1
   13604:	b	1360c <__assert_fail@plt+0x1d7c>
   13608:	mov	r5, #0
   1360c:	mov	r0, r5
   13610:	sub	sp, fp, #8
   13614:	pop	{r4, r5, fp, pc}
   13618:	ldr	r3, [r0, #48]	; 0x30
   1361c:	mov	r2, #32768	; 0x8000
   13620:	and	r2, r2, r3, lsl #11
   13624:	orr	r2, r2, #18688	; 0x4900
   13628:	orr	r2, r2, #524288	; 0x80000
   1362c:	tst	r3, #512	; 0x200
   13630:	bne	13640 <__assert_fail@plt+0x1db0>
   13634:	mov	r0, r1
   13638:	mov	r1, r2
   1363c:	b	19a84 <__assert_fail@plt+0x81f4>
   13640:	ldr	r0, [r0, #32]
   13644:	b	15f8c <__assert_fail@plt+0x46fc>
   13648:	push	{r4, r6, r7, sl, fp, lr}
   1364c:	add	fp, sp, #16
   13650:	cmp	r0, #0
   13654:	popeq	{r4, r6, r7, sl, fp, pc}
   13658:	mov	r4, r0
   1365c:	ldrd	r6, [r4, #8]
   13660:	cmp	r7, #0
   13664:	beq	13670 <__assert_fail@plt+0x1de0>
   13668:	mov	r0, r7
   1366c:	bl	11878 <closedir@plt>
   13670:	mov	r0, r4
   13674:	bl	19b34 <__assert_fail@plt+0x82a4>
   13678:	cmp	r6, #0
   1367c:	mov	r4, r6
   13680:	bne	1365c <__assert_fail@plt+0x1dcc>
   13684:	pop	{r4, r6, r7, sl, fp, pc}
   13688:	push	{r4, r5, fp, lr}
   1368c:	add	fp, sp, #8
   13690:	mov	r4, r0
   13694:	ldr	r0, [r0]
   13698:	cmp	r0, #0
   1369c:	beq	136dc <__assert_fail@plt+0x1e4c>
   136a0:	ldr	r1, [r0, #48]	; 0x30
   136a4:	cmp	r1, #0
   136a8:	blt	136d0 <__assert_fail@plt+0x1e40>
   136ac:	ldr	r5, [r0, #8]
   136b0:	cmp	r5, #0
   136b4:	ldreq	r5, [r0, #4]
   136b8:	bl	19b34 <__assert_fail@plt+0x82a4>
   136bc:	ldr	r0, [r5, #48]	; 0x30
   136c0:	cmn	r0, #1
   136c4:	mov	r0, r5
   136c8:	bgt	136ac <__assert_fail@plt+0x1e1c>
   136cc:	b	136d4 <__assert_fail@plt+0x1e44>
   136d0:	mov	r5, r0
   136d4:	mov	r0, r5
   136d8:	bl	19b34 <__assert_fail@plt+0x82a4>
   136dc:	ldr	r0, [r4, #4]
   136e0:	cmp	r0, #0
   136e4:	blne	13648 <__assert_fail@plt+0x1db8>
   136e8:	ldr	r0, [r4, #8]
   136ec:	bl	19b34 <__assert_fail@plt+0x82a4>
   136f0:	ldr	r0, [r4, #24]
   136f4:	bl	19b34 <__assert_fail@plt+0x82a4>
   136f8:	ldr	r0, [r4, #48]	; 0x30
   136fc:	tst	r0, #512	; 0x200
   13700:	bne	1372c <__assert_fail@plt+0x1e9c>
   13704:	mov	r5, #0
   13708:	tst	r0, #4
   1370c:	bne	13770 <__assert_fail@plt+0x1ee0>
   13710:	ldr	r0, [r4, #28]
   13714:	bl	117f4 <fchdir@plt>
   13718:	cmp	r0, #0
   1371c:	beq	1374c <__assert_fail@plt+0x1ebc>
   13720:	bl	11710 <__errno_location@plt>
   13724:	ldr	r5, [r0]
   13728:	b	13750 <__assert_fail@plt+0x1ec0>
   1372c:	ldr	r0, [r4, #32]
   13730:	mov	r5, #0
   13734:	cmp	r0, #0
   13738:	blt	13770 <__assert_fail@plt+0x1ee0>
   1373c:	bl	11860 <close@plt>
   13740:	cmp	r0, #0
   13744:	bne	13768 <__assert_fail@plt+0x1ed8>
   13748:	b	13770 <__assert_fail@plt+0x1ee0>
   1374c:	mov	r5, #0
   13750:	ldr	r0, [r4, #28]
   13754:	bl	11860 <close@plt>
   13758:	cmp	r5, #0
   1375c:	bne	13770 <__assert_fail@plt+0x1ee0>
   13760:	cmp	r0, #0
   13764:	beq	13770 <__assert_fail@plt+0x1ee0>
   13768:	bl	11710 <__errno_location@plt>
   1376c:	ldr	r5, [r0]
   13770:	add	r0, r4, #60	; 0x3c
   13774:	bl	137b4 <__assert_fail@plt+0x1f24>
   13778:	ldr	r0, [r4, #52]	; 0x34
   1377c:	cmp	r0, #0
   13780:	beq	13788 <__assert_fail@plt+0x1ef8>
   13784:	bl	156fc <__assert_fail@plt+0x3e6c>
   13788:	mov	r0, r4
   1378c:	bl	137ec <__assert_fail@plt+0x1f5c>
   13790:	mov	r0, r4
   13794:	bl	19b34 <__assert_fail@plt+0x82a4>
   13798:	cmp	r5, #0
   1379c:	moveq	r0, #0
   137a0:	popeq	{r4, r5, fp, pc}
   137a4:	bl	11710 <__errno_location@plt>
   137a8:	str	r5, [r0]
   137ac:	mvn	r0, #0
   137b0:	pop	{r4, r5, fp, pc}
   137b4:	push	{r4, sl, fp, lr}
   137b8:	add	fp, sp, #8
   137bc:	mov	r4, r0
   137c0:	b	137c8 <__assert_fail@plt+0x1f38>
   137c4:	mov	r0, r4
   137c8:	bl	15eec <__assert_fail@plt+0x465c>
   137cc:	cmp	r0, #0
   137d0:	popne	{r4, sl, fp, pc}
   137d4:	mov	r0, r4
   137d8:	bl	15f38 <__assert_fail@plt+0x46a8>
   137dc:	cmp	r0, #0
   137e0:	blt	137c4 <__assert_fail@plt+0x1f34>
   137e4:	bl	11860 <close@plt>
   137e8:	b	137c4 <__assert_fail@plt+0x1f34>
   137ec:	ldrh	r1, [r0, #48]	; 0x30
   137f0:	movw	r2, #258	; 0x102
   137f4:	tst	r1, r2
   137f8:	beq	1380c <__assert_fail@plt+0x1f7c>
   137fc:	ldr	r0, [r0, #56]	; 0x38
   13800:	cmp	r0, #0
   13804:	bxeq	lr
   13808:	b	156fc <__assert_fail@plt+0x3e6c>
   1380c:	ldr	r0, [r0, #56]	; 0x38
   13810:	b	19b34 <__assert_fail@plt+0x82a4>
   13814:	push	{r4, r5, r6, r7, fp, lr}
   13818:	add	fp, sp, #16
   1381c:	ldr	r6, [r0]
   13820:	mov	r5, #0
   13824:	cmp	r6, #0
   13828:	beq	13dc0 <__assert_fail@plt+0x2530>
   1382c:	mov	r4, r0
   13830:	ldr	r1, [r0, #48]	; 0x30
   13834:	tst	r1, #8192	; 0x2000
   13838:	bne	13dc0 <__assert_fail@plt+0x2530>
   1383c:	ldrh	r0, [r6, #60]	; 0x3c
   13840:	mov	r2, #3
   13844:	strh	r2, [r6, #60]	; 0x3c
   13848:	cmp	r0, #2
   1384c:	beq	13874 <__assert_fail@plt+0x1fe4>
   13850:	cmp	r0, #1
   13854:	bne	138e0 <__assert_fail@plt+0x2050>
   13858:	mov	r0, r4
   1385c:	mov	r1, r6
   13860:	mov	r2, #0
   13864:	bl	13344 <__assert_fail@plt+0x1ab4>
   13868:	strh	r0, [r6, #56]	; 0x38
   1386c:	mov	r0, r6
   13870:	pop	{r4, r5, r6, r7, fp, pc}
   13874:	ldrh	r2, [r6, #56]	; 0x38
   13878:	movw	r3, #65534	; 0xfffe
   1387c:	and	r2, r2, r3
   13880:	cmp	r2, #12
   13884:	bne	138e0 <__assert_fail@plt+0x2050>
   13888:	mov	r0, r4
   1388c:	mov	r1, r6
   13890:	mov	r2, #1
   13894:	bl	13344 <__assert_fail@plt+0x1ab4>
   13898:	strh	r0, [r6, #56]	; 0x38
   1389c:	cmp	r0, #1
   138a0:	bne	139a8 <__assert_fail@plt+0x2118>
   138a4:	ldrb	r0, [r4, #48]	; 0x30
   138a8:	tst	r0, #4
   138ac:	bne	139a8 <__assert_fail@plt+0x2118>
   138b0:	movw	r1, #45763	; 0xb2c3
   138b4:	movt	r1, #1
   138b8:	mov	r0, r4
   138bc:	bl	13618 <__assert_fail@plt+0x1d88>
   138c0:	str	r0, [r6, #36]	; 0x24
   138c4:	cmn	r0, #1
   138c8:	ble	13ca0 <__assert_fail@plt+0x2410>
   138cc:	ldrh	r0, [r6, #58]	; 0x3a
   138d0:	orr	r0, r0, #2
   138d4:	strh	r0, [r6, #58]	; 0x3a
   138d8:	mov	r5, r6
   138dc:	b	13b48 <__assert_fail@plt+0x22b8>
   138e0:	ldrh	r2, [r6, #56]	; 0x38
   138e4:	cmp	r2, #1
   138e8:	bne	1393c <__assert_fail@plt+0x20ac>
   138ec:	cmp	r0, #4
   138f0:	bne	139b0 <__assert_fail@plt+0x2120>
   138f4:	ldrb	r0, [r6, #58]	; 0x3a
   138f8:	tst	r0, #2
   138fc:	beq	13908 <__assert_fail@plt+0x2078>
   13900:	ldr	r0, [r6, #36]	; 0x24
   13904:	bl	11860 <close@plt>
   13908:	ldr	r0, [r4, #4]
   1390c:	cmp	r0, #0
   13910:	beq	13920 <__assert_fail@plt+0x2090>
   13914:	bl	13648 <__assert_fail@plt+0x1db8>
   13918:	mov	r0, #0
   1391c:	str	r0, [r4, #4]
   13920:	mov	r0, #6
   13924:	strh	r0, [r6, #56]	; 0x38
   13928:	mov	r0, r4
   1392c:	mov	r1, r6
   13930:	bl	13dcc <__assert_fail@plt+0x253c>
   13934:	mov	r0, r6
   13938:	pop	{r4, r5, r6, r7, fp, pc}
   1393c:	ldr	r5, [r6, #8]
   13940:	cmp	r5, #0
   13944:	beq	13a48 <__assert_fail@plt+0x21b8>
   13948:	str	r5, [r4]
   1394c:	mov	r0, r6
   13950:	bl	19b34 <__assert_fail@plt+0x82a4>
   13954:	ldr	r0, [r5, #48]	; 0x30
   13958:	cmp	r0, #0
   1395c:	beq	13a94 <__assert_fail@plt+0x2204>
   13960:	ldrh	r0, [r5, #60]	; 0x3c
   13964:	cmp	r0, #4
   13968:	mov	r6, r5
   1396c:	beq	1393c <__assert_fail@plt+0x20ac>
   13970:	cmp	r0, #2
   13974:	bne	13b0c <__assert_fail@plt+0x227c>
   13978:	mov	r0, r4
   1397c:	mov	r1, r5
   13980:	mov	r2, #1
   13984:	bl	13344 <__assert_fail@plt+0x1ab4>
   13988:	strh	r0, [r5, #56]	; 0x38
   1398c:	cmp	r0, #1
   13990:	ldrbeq	r0, [r4, #48]	; 0x30
   13994:	tsteq	r0, #4
   13998:	beq	13d2c <__assert_fail@plt+0x249c>
   1399c:	mov	r0, #3
   139a0:	strh	r0, [r5, #60]	; 0x3c
   139a4:	b	13b0c <__assert_fail@plt+0x227c>
   139a8:	mov	r5, r6
   139ac:	b	13b48 <__assert_fail@plt+0x22b8>
   139b0:	tst	r1, #64	; 0x40
   139b4:	beq	139d8 <__assert_fail@plt+0x2148>
   139b8:	ldr	r0, [r4, #16]
   139bc:	ldr	r3, [r4, #20]
   139c0:	ldr	r2, [r6, #64]	; 0x40
   139c4:	ldr	r5, [r6, #68]	; 0x44
   139c8:	eor	r3, r5, r3
   139cc:	eor	r0, r2, r0
   139d0:	orrs	r0, r0, r3
   139d4:	bne	138f4 <__assert_fail@plt+0x2064>
   139d8:	ldr	r0, [r4, #4]
   139dc:	cmp	r0, #0
   139e0:	beq	13ae8 <__assert_fail@plt+0x2258>
   139e4:	tst	r1, #4096	; 0x1000
   139e8:	bne	13ad4 <__assert_fail@plt+0x2244>
   139ec:	ldr	r3, [r6, #24]
   139f0:	mov	r0, r4
   139f4:	mov	r1, r6
   139f8:	mvn	r2, #0
   139fc:	bl	13e9c <__assert_fail@plt+0x260c>
   13a00:	cmp	r0, #0
   13a04:	beq	13b00 <__assert_fail@plt+0x2270>
   13a08:	bl	11710 <__errno_location@plt>
   13a0c:	ldr	r0, [r0]
   13a10:	str	r0, [r6, #32]
   13a14:	ldrh	r0, [r6, #58]	; 0x3a
   13a18:	orr	r0, r0, #1
   13a1c:	strh	r0, [r6, #58]	; 0x3a
   13a20:	ldr	r0, [r4, #4]
   13a24:	cmp	r0, #0
   13a28:	beq	13b00 <__assert_fail@plt+0x2270>
   13a2c:	ldmib	r0, {r1, r2}
   13a30:	ldr	r1, [r1, #24]
   13a34:	str	r1, [r0, #24]
   13a38:	cmp	r2, #0
   13a3c:	mov	r0, r2
   13a40:	bne	13a2c <__assert_fail@plt+0x219c>
   13a44:	b	13b00 <__assert_fail@plt+0x2270>
   13a48:	ldr	r0, [r6, #4]
   13a4c:	ldr	r1, [r0, #12]
   13a50:	cmp	r1, #0
   13a54:	beq	13c04 <__assert_fail@plt+0x2374>
   13a58:	str	r0, [r4]
   13a5c:	ldr	r1, [r4, #24]
   13a60:	ldr	r0, [r0, #40]	; 0x28
   13a64:	mov	r5, #0
   13a68:	strb	r5, [r1, r0]
   13a6c:	mov	r0, r4
   13a70:	mov	r1, #3
   13a74:	bl	1407c <__assert_fail@plt+0x27ec>
   13a78:	cmp	r0, #0
   13a7c:	beq	13bf8 <__assert_fail@plt+0x2368>
   13a80:	mov	r7, r0
   13a84:	mov	r0, r6
   13a88:	bl	19b34 <__assert_fail@plt+0x82a4>
   13a8c:	mov	r5, r7
   13a90:	b	13b0c <__assert_fail@plt+0x227c>
   13a94:	mov	r0, r4
   13a98:	bl	148e8 <__assert_fail@plt+0x3058>
   13a9c:	cmp	r0, #0
   13aa0:	beq	13ab4 <__assert_fail@plt+0x2224>
   13aa4:	ldr	r0, [r4, #48]	; 0x30
   13aa8:	orr	r0, r0, #8192	; 0x2000
   13aac:	str	r0, [r4, #48]	; 0x30
   13ab0:	b	13bc0 <__assert_fail@plt+0x2330>
   13ab4:	mov	r0, r4
   13ab8:	bl	137ec <__assert_fail@plt+0x1f5c>
   13abc:	mov	r0, r4
   13ac0:	mov	r1, r5
   13ac4:	bl	14944 <__assert_fail@plt+0x30b4>
   13ac8:	mov	r0, r4
   13acc:	bl	1358c <__assert_fail@plt+0x1cfc>
   13ad0:	b	13b48 <__assert_fail@plt+0x22b8>
   13ad4:	bic	r1, r1, #4096	; 0x1000
   13ad8:	str	r1, [r4, #48]	; 0x30
   13adc:	bl	13648 <__assert_fail@plt+0x1db8>
   13ae0:	mov	r0, #0
   13ae4:	str	r0, [r4, #4]
   13ae8:	mov	r0, r4
   13aec:	mov	r1, #3
   13af0:	bl	1407c <__assert_fail@plt+0x27ec>
   13af4:	str	r0, [r4, #4]
   13af8:	cmp	r0, #0
   13afc:	beq	13bcc <__assert_fail@plt+0x233c>
   13b00:	ldr	r5, [r4, #4]
   13b04:	mov	r0, #0
   13b08:	str	r0, [r4, #4]
   13b0c:	ldr	r0, [r5, #4]
   13b10:	ldr	r1, [r0, #28]
   13b14:	ldr	r0, [r0, #40]	; 0x28
   13b18:	sub	r2, r0, #1
   13b1c:	ldrb	r1, [r1, r2]
   13b20:	cmp	r1, #47	; 0x2f
   13b24:	moveq	r0, r2
   13b28:	ldr	r1, [r4, #24]
   13b2c:	mov	r2, #47	; 0x2f
   13b30:	strb	r2, [r1, r0]!
   13b34:	add	r0, r1, #1
   13b38:	add	r1, r5, #168	; 0xa8
   13b3c:	ldr	r2, [r5, #52]	; 0x34
   13b40:	add	r2, r2, #1
   13b44:	bl	11518 <memmove@plt>
   13b48:	str	r5, [r4]
   13b4c:	ldrh	r0, [r5, #56]	; 0x38
   13b50:	cmp	r0, #11
   13b54:	bne	13b88 <__assert_fail@plt+0x22f8>
   13b58:	ldrd	r0, [r5, #112]	; 0x70
   13b5c:	eor	r2, r0, #1
   13b60:	orrs	r2, r2, r1
   13b64:	beq	13dc0 <__assert_fail@plt+0x2530>
   13b68:	eor	r0, r0, #2
   13b6c:	orrs	r0, r0, r1
   13b70:	bne	13dc8 <__assert_fail@plt+0x2538>
   13b74:	mov	r0, r4
   13b78:	mov	r1, r5
   13b7c:	mov	r2, #0
   13b80:	bl	13344 <__assert_fail@plt+0x1ab4>
   13b84:	strh	r0, [r5, #56]	; 0x38
   13b88:	cmp	r0, #1
   13b8c:	bne	13dc0 <__assert_fail@plt+0x2530>
   13b90:	ldr	r0, [r5, #48]	; 0x30
   13b94:	cmp	r0, #0
   13b98:	ldrdeq	r0, [r5, #64]	; 0x40
   13b9c:	strdeq	r0, [r4, #16]
   13ba0:	mov	r0, r4
   13ba4:	mov	r1, r5
   13ba8:	bl	149cc <__assert_fail@plt+0x313c>
   13bac:	cmp	r0, #0
   13bb0:	bne	13dc0 <__assert_fail@plt+0x2530>
   13bb4:	bl	11710 <__errno_location@plt>
   13bb8:	mov	r1, #12
   13bbc:	str	r1, [r0]
   13bc0:	mov	r5, #0
   13bc4:	mov	r0, r5
   13bc8:	pop	{r4, r5, r6, r7, fp, pc}
   13bcc:	ldrb	r0, [r4, #49]	; 0x31
   13bd0:	tst	r0, #32
   13bd4:	mov	r5, #0
   13bd8:	bne	13dc0 <__assert_fail@plt+0x2530>
   13bdc:	ldr	r0, [r6, #32]
   13be0:	cmp	r0, #0
   13be4:	ldrhne	r0, [r6, #56]	; 0x38
   13be8:	cmpne	r0, #4
   13bec:	beq	13928 <__assert_fail@plt+0x2098>
   13bf0:	mov	r0, #7
   13bf4:	b	13924 <__assert_fail@plt+0x2094>
   13bf8:	ldrb	r0, [r4, #49]	; 0x31
   13bfc:	tst	r0, #32
   13c00:	bne	13dc0 <__assert_fail@plt+0x2530>
   13c04:	ldr	r5, [r6, #4]
   13c08:	str	r5, [r4]
   13c0c:	mov	r0, r6
   13c10:	bl	19b34 <__assert_fail@plt+0x82a4>
   13c14:	ldr	r0, [r5, #48]	; 0x30
   13c18:	cmn	r0, #1
   13c1c:	beq	13c80 <__assert_fail@plt+0x23f0>
   13c20:	ldrh	r0, [r5, #56]	; 0x38
   13c24:	cmp	r0, #11
   13c28:	beq	13dc8 <__assert_fail@plt+0x2538>
   13c2c:	ldr	r0, [r5, #40]	; 0x28
   13c30:	ldr	r1, [r4, #24]
   13c34:	mov	r2, #0
   13c38:	strb	r2, [r1, r0]
   13c3c:	ldr	r0, [r5, #48]	; 0x30
   13c40:	cmp	r0, #0
   13c44:	beq	13cbc <__assert_fail@plt+0x242c>
   13c48:	ldrh	r0, [r5, #58]	; 0x3a
   13c4c:	tst	r0, #2
   13c50:	bne	13ce8 <__assert_fail@plt+0x2458>
   13c54:	tst	r0, #1
   13c58:	bne	13d84 <__assert_fail@plt+0x24f4>
   13c5c:	ldr	r1, [r5, #4]
   13c60:	movw	r3, #45762	; 0xb2c2
   13c64:	movt	r3, #1
   13c68:	mov	r0, r4
   13c6c:	mvn	r2, #0
   13c70:	bl	13e9c <__assert_fail@plt+0x260c>
   13c74:	cmp	r0, #0
   13c78:	bne	13ccc <__assert_fail@plt+0x243c>
   13c7c:	b	13d84 <__assert_fail@plt+0x24f4>
   13c80:	mov	r0, r5
   13c84:	bl	19b34 <__assert_fail@plt+0x82a4>
   13c88:	bl	11710 <__errno_location@plt>
   13c8c:	mov	r5, #0
   13c90:	str	r5, [r0]
   13c94:	str	r5, [r4]
   13c98:	mov	r0, r5
   13c9c:	pop	{r4, r5, r6, r7, fp, pc}
   13ca0:	bl	11710 <__errno_location@plt>
   13ca4:	ldr	r0, [r0]
   13ca8:	mov	r1, #7
   13cac:	strh	r1, [r6, #56]	; 0x38
   13cb0:	str	r0, [r6, #32]
   13cb4:	mov	r5, r6
   13cb8:	b	13b48 <__assert_fail@plt+0x22b8>
   13cbc:	mov	r0, r4
   13cc0:	bl	148e8 <__assert_fail@plt+0x3058>
   13cc4:	cmp	r0, #0
   13cc8:	beq	13d84 <__assert_fail@plt+0x24f4>
   13ccc:	bl	11710 <__errno_location@plt>
   13cd0:	ldr	r0, [r0]
   13cd4:	str	r0, [r5, #32]
   13cd8:	ldr	r0, [r4, #48]	; 0x30
   13cdc:	orr	r0, r0, #8192	; 0x2000
   13ce0:	str	r0, [r4, #48]	; 0x30
   13ce4:	b	13d84 <__assert_fail@plt+0x24f4>
   13ce8:	ldr	r0, [r4, #48]	; 0x30
   13cec:	tst	r0, #4
   13cf0:	bne	13d7c <__assert_fail@plt+0x24ec>
   13cf4:	ldr	r1, [r5, #36]	; 0x24
   13cf8:	tst	r0, #512	; 0x200
   13cfc:	bne	13d70 <__assert_fail@plt+0x24e0>
   13d00:	mov	r0, r1
   13d04:	bl	117f4 <fchdir@plt>
   13d08:	cmp	r0, #0
   13d0c:	beq	13d7c <__assert_fail@plt+0x24ec>
   13d10:	bl	11710 <__errno_location@plt>
   13d14:	ldr	r0, [r0]
   13d18:	str	r0, [r5, #32]
   13d1c:	ldr	r0, [r4, #48]	; 0x30
   13d20:	orr	r0, r0, #8192	; 0x2000
   13d24:	str	r0, [r4, #48]	; 0x30
   13d28:	b	13d7c <__assert_fail@plt+0x24ec>
   13d2c:	movw	r1, #45763	; 0xb2c3
   13d30:	movt	r1, #1
   13d34:	mov	r0, r4
   13d38:	bl	13618 <__assert_fail@plt+0x1d88>
   13d3c:	str	r0, [r5, #36]	; 0x24
   13d40:	cmn	r0, #1
   13d44:	ble	13d58 <__assert_fail@plt+0x24c8>
   13d48:	ldrh	r0, [r5, #58]	; 0x3a
   13d4c:	orr	r0, r0, #2
   13d50:	strh	r0, [r5, #58]	; 0x3a
   13d54:	b	1399c <__assert_fail@plt+0x210c>
   13d58:	bl	11710 <__errno_location@plt>
   13d5c:	ldr	r0, [r0]
   13d60:	mov	r1, #7
   13d64:	strh	r1, [r5, #56]	; 0x38
   13d68:	str	r0, [r5, #32]
   13d6c:	b	1399c <__assert_fail@plt+0x210c>
   13d70:	mov	r0, r4
   13d74:	mov	r2, #1
   13d78:	bl	14a84 <__assert_fail@plt+0x31f4>
   13d7c:	ldr	r0, [r5, #36]	; 0x24
   13d80:	bl	11860 <close@plt>
   13d84:	ldrh	r0, [r5, #56]	; 0x38
   13d88:	cmp	r0, #2
   13d8c:	beq	13db4 <__assert_fail@plt+0x2524>
   13d90:	ldr	r0, [r5, #32]
   13d94:	mov	r1, #7
   13d98:	cmp	r0, #0
   13d9c:	movweq	r1, #6
   13da0:	strh	r1, [r5, #56]	; 0x38
   13da4:	bne	13db4 <__assert_fail@plt+0x2524>
   13da8:	mov	r0, r4
   13dac:	mov	r1, r5
   13db0:	bl	13dcc <__assert_fail@plt+0x253c>
   13db4:	ldrb	r0, [r4, #49]	; 0x31
   13db8:	tst	r0, #32
   13dbc:	movne	r5, #0
   13dc0:	mov	r0, r5
   13dc4:	pop	{r4, r5, r6, r7, fp, pc}
   13dc8:	bl	11854 <abort@plt>
   13dcc:	push	{r4, r5, r6, r7, fp, lr}
   13dd0:	add	fp, sp, #16
   13dd4:	sub	sp, sp, #24
   13dd8:	add	lr, r1, #64	; 0x40
   13ddc:	ldrh	r2, [r0, #48]	; 0x30
   13de0:	movw	r3, #258	; 0x102
   13de4:	tst	r2, r3
   13de8:	beq	13e20 <__assert_fail@plt+0x2590>
   13dec:	ldrd	r2, [lr]
   13df0:	stm	sp, {r2, r3}
   13df4:	ldrd	r2, [r1, #160]	; 0xa0
   13df8:	str	r3, [sp, #12]
   13dfc:	str	r2, [sp, #8]
   13e00:	ldr	r0, [r0, #56]	; 0x38
   13e04:	mov	r1, sp
   13e08:	bl	15cf8 <__assert_fail@plt+0x4468>
   13e0c:	cmp	r0, #0
   13e10:	beq	13e98 <__assert_fail@plt+0x2608>
   13e14:	bl	19b34 <__assert_fail@plt+0x82a4>
   13e18:	sub	sp, fp, #16
   13e1c:	pop	{r4, r5, r6, r7, fp, pc}
   13e20:	ldr	r2, [r1, #4]
   13e24:	cmp	r2, #0
   13e28:	beq	13e90 <__assert_fail@plt+0x2600>
   13e2c:	ldr	r3, [r2, #48]	; 0x30
   13e30:	cmp	r3, #0
   13e34:	blt	13e90 <__assert_fail@plt+0x2600>
   13e38:	ldr	ip, [r0, #56]	; 0x38
   13e3c:	ldrd	r4, [ip, #16]
   13e40:	orrs	r3, r4, r5
   13e44:	beq	13e98 <__assert_fail@plt+0x2608>
   13e48:	ldrd	r4, [r1, #160]	; 0xa0
   13e4c:	ldrd	r6, [ip]
   13e50:	eor	r1, r7, r5
   13e54:	eor	r3, r6, r4
   13e58:	orrs	r1, r3, r1
   13e5c:	bne	13e90 <__assert_fail@plt+0x2600>
   13e60:	ldrd	r4, [lr]
   13e64:	ldr	r1, [ip, #8]!
   13e68:	eor	r1, r1, r4
   13e6c:	ldr	r3, [ip, #4]
   13e70:	eor	r3, r3, r5
   13e74:	orrs	r1, r1, r3
   13e78:	bne	13e90 <__assert_fail@plt+0x2600>
   13e7c:	ldrd	r4, [r2, #64]	; 0x40
   13e80:	strd	r4, [ip]
   13e84:	ldr	r0, [r0, #56]	; 0x38
   13e88:	ldrd	r2, [r2, #160]	; 0xa0
   13e8c:	strd	r2, [r0]
   13e90:	sub	sp, fp, #16
   13e94:	pop	{r4, r5, r6, r7, fp, pc}
   13e98:	bl	11854 <abort@plt>
   13e9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ea0:	add	fp, sp, #24
   13ea4:	sub	sp, sp, #104	; 0x68
   13ea8:	mov	r7, r3
   13eac:	mov	r4, r2
   13eb0:	mov	r8, r1
   13eb4:	mov	r5, r0
   13eb8:	cmp	r3, #0
   13ebc:	beq	13ee0 <__assert_fail@plt+0x2650>
   13ec0:	movw	r1, #45762	; 0xb2c2
   13ec4:	movt	r1, #1
   13ec8:	mov	r0, r7
   13ecc:	bl	114f4 <strcmp@plt>
   13ed0:	mov	r6, r0
   13ed4:	cmp	r0, #0
   13ed8:	movwne	r6, #1
   13edc:	b	13ee4 <__assert_fail@plt+0x2654>
   13ee0:	mov	r6, #1
   13ee4:	ldr	r0, [r5, #48]	; 0x30
   13ee8:	tst	r0, #4
   13eec:	bne	13f44 <__assert_fail@plt+0x26b4>
   13ef0:	mov	r9, #0
   13ef4:	cmn	r4, #1
   13ef8:	mov	r1, #0
   13efc:	movwgt	r1, #1
   13f00:	orrs	r1, r1, r6
   13f04:	bne	13f64 <__assert_fail@plt+0x26d4>
   13f08:	ands	r0, r0, #512	; 0x200
   13f0c:	beq	13f64 <__assert_fail@plt+0x26d4>
   13f10:	add	r4, r5, #60	; 0x3c
   13f14:	mov	r0, r4
   13f18:	bl	15eec <__assert_fail@plt+0x465c>
   13f1c:	cmp	r0, #0
   13f20:	bne	13f6c <__assert_fail@plt+0x26dc>
   13f24:	mov	r0, r4
   13f28:	bl	15f38 <__assert_fail@plt+0x46a8>
   13f2c:	cmn	r0, #1
   13f30:	ble	13f6c <__assert_fail@plt+0x26dc>
   13f34:	mov	r4, r0
   13f38:	mov	r9, #0
   13f3c:	mov	r7, #0
   13f40:	b	13f88 <__assert_fail@plt+0x26f8>
   13f44:	mov	r5, #0
   13f48:	cmp	r4, #0
   13f4c:	blt	14070 <__assert_fail@plt+0x27e0>
   13f50:	ands	r0, r0, #512	; 0x200
   13f54:	beq	14070 <__assert_fail@plt+0x27e0>
   13f58:	mov	r0, r4
   13f5c:	bl	11860 <close@plt>
   13f60:	b	14070 <__assert_fail@plt+0x27e0>
   13f64:	cmn	r4, #1
   13f68:	bgt	13f88 <__assert_fail@plt+0x26f8>
   13f6c:	mov	r0, r5
   13f70:	mov	r1, r7
   13f74:	bl	13618 <__assert_fail@plt+0x1d88>
   13f78:	cmp	r0, #0
   13f7c:	blt	14020 <__assert_fail@plt+0x2790>
   13f80:	mov	r4, r0
   13f84:	mov	r9, #1
   13f88:	ldrb	r0, [r5, #48]	; 0x30
   13f8c:	tst	r0, #2
   13f90:	bne	13fb4 <__assert_fail@plt+0x2724>
   13f94:	cmp	r7, #0
   13f98:	beq	13ffc <__assert_fail@plt+0x276c>
   13f9c:	movw	r1, #45762	; 0xb2c2
   13fa0:	movt	r1, #1
   13fa4:	mov	r0, r7
   13fa8:	bl	114f4 <strcmp@plt>
   13fac:	cmp	r0, #0
   13fb0:	bne	13ffc <__assert_fail@plt+0x276c>
   13fb4:	mov	r1, sp
   13fb8:	mov	r0, r4
   13fbc:	bl	1a498 <__assert_fail@plt+0x8c08>
   13fc0:	cmp	r0, #0
   13fc4:	bne	1404c <__assert_fail@plt+0x27bc>
   13fc8:	ldrd	r0, [r8, #64]	; 0x40
   13fcc:	ldm	sp, {r2, r3}
   13fd0:	eor	r1, r1, r3
   13fd4:	eor	r0, r0, r2
   13fd8:	orrs	r0, r0, r1
   13fdc:	bne	14040 <__assert_fail@plt+0x27b0>
   13fe0:	ldrd	r0, [r8, #160]	; 0xa0
   13fe4:	ldr	r2, [sp, #96]	; 0x60
   13fe8:	ldr	r3, [sp, #100]	; 0x64
   13fec:	eor	r1, r1, r3
   13ff0:	eor	r0, r0, r2
   13ff4:	orrs	r0, r0, r1
   13ff8:	bne	14040 <__assert_fail@plt+0x27b0>
   13ffc:	ldrb	r0, [r5, #49]	; 0x31
   14000:	tst	r0, #2
   14004:	bne	14028 <__assert_fail@plt+0x2798>
   14008:	mov	r0, r4
   1400c:	bl	117f4 <fchdir@plt>
   14010:	mov	r5, r0
   14014:	cmp	r9, #0
   14018:	bne	14058 <__assert_fail@plt+0x27c8>
   1401c:	b	14070 <__assert_fail@plt+0x27e0>
   14020:	mvn	r5, #0
   14024:	b	14070 <__assert_fail@plt+0x27e0>
   14028:	mov	r0, r5
   1402c:	mov	r1, r4
   14030:	mov	r2, r6
   14034:	bl	14a84 <__assert_fail@plt+0x31f4>
   14038:	mov	r5, #0
   1403c:	b	14070 <__assert_fail@plt+0x27e0>
   14040:	bl	11710 <__errno_location@plt>
   14044:	mov	r1, #2
   14048:	str	r1, [r0]
   1404c:	mvn	r5, #0
   14050:	cmp	r9, #0
   14054:	beq	14070 <__assert_fail@plt+0x27e0>
   14058:	bl	11710 <__errno_location@plt>
   1405c:	mov	r6, r0
   14060:	ldr	r7, [r0]
   14064:	mov	r0, r4
   14068:	bl	11860 <close@plt>
   1406c:	str	r7, [r6]
   14070:	mov	r0, r5
   14074:	sub	sp, fp, #24
   14078:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1407c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14080:	add	fp, sp, #28
   14084:	sub	sp, sp, #68	; 0x44
   14088:	mov	r4, r1
   1408c:	ldr	sl, [r0]
   14090:	ldr	r7, [sl, #12]
   14094:	cmp	r7, #0
   14098:	str	r0, [fp, #-36]	; 0xffffffdc
   1409c:	beq	14410 <__assert_fail@plt+0x2b80>
   140a0:	mov	r0, r7
   140a4:	bl	117e8 <dirfd@plt>
   140a8:	str	r0, [fp, #-32]	; 0xffffffe0
   140ac:	cmn	r0, #1
   140b0:	ble	14448 <__assert_fail@plt+0x2bb8>
   140b4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   140b8:	mov	r1, ip
   140bc:	ldr	r0, [r1, #44]!	; 0x2c
   140c0:	str	r1, [fp, #-44]	; 0xffffffd4
   140c4:	mvn	r1, #0
   140c8:	cmp	r0, #0
   140cc:	movweq	r1, #34464	; 0x86a0
   140d0:	movteq	r1, #1
   140d4:	str	r1, [sp, #28]
   140d8:	mov	r0, #1
   140dc:	str	r0, [sp, #4]
   140e0:	str	r4, [sp, #8]
   140e4:	ldr	r1, [sl, #28]
   140e8:	ldr	r0, [sl, #40]	; 0x28
   140ec:	sub	r2, r0, #1
   140f0:	ldrb	r1, [r1, r2]
   140f4:	cmp	r1, #47	; 0x2f
   140f8:	moveq	r0, r2
   140fc:	ldrb	r1, [ip, #48]	; 0x30
   14100:	mov	r9, #0
   14104:	tst	r1, #4
   14108:	mov	r1, #0
   1410c:	str	r1, [sp, #40]	; 0x28
   14110:	beq	14128 <__assert_fail@plt+0x2898>
   14114:	ldr	r1, [ip, #24]
   14118:	mov	r2, #47	; 0x2f
   1411c:	strb	r2, [r1, r0]!
   14120:	add	r1, r1, #1
   14124:	str	r1, [sp, #40]	; 0x28
   14128:	str	r7, [sp, #12]
   1412c:	add	r1, r0, #1
   14130:	ldr	r4, [sl, #12]
   14134:	cmp	r4, #0
   14138:	str	r1, [fp, #-40]	; 0xffffffd8
   1413c:	beq	14464 <__assert_fail@plt+0x2bd4>
   14140:	ldr	r0, [sl, #48]	; 0x30
   14144:	add	r0, r0, #1
   14148:	str	r0, [sp, #24]
   1414c:	ldr	r0, [ip, #36]	; 0x24
   14150:	sub	r0, r0, r1
   14154:	str	r0, [sp, #44]	; 0x2c
   14158:	mov	r6, #0
   1415c:	bl	11710 <__errno_location@plt>
   14160:	str	r0, [sp, #36]	; 0x24
   14164:	mov	r9, #0
   14168:	mov	r7, #0
   1416c:	mov	r0, #0
   14170:	str	r0, [sp, #48]	; 0x30
   14174:	mov	r0, #0
   14178:	str	r0, [sp, #20]
   1417c:	mov	r0, #0
   14180:	str	r0, [sp, #16]
   14184:	str	sl, [sp, #32]
   14188:	ldr	r0, [sp, #36]	; 0x24
   1418c:	str	r6, [r0]
   14190:	mov	r0, r4
   14194:	bl	117d0 <readdir64@plt>
   14198:	cmp	r0, #0
   1419c:	beq	1469c <__assert_fail@plt+0x2e0c>
   141a0:	mov	r8, r0
   141a4:	mov	r6, r9
   141a8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   141ac:	ldrb	r0, [r5, #48]	; 0x30
   141b0:	tst	r0, #32
   141b4:	ldrbeq	r0, [r8, #19]
   141b8:	cmpeq	r0, #46	; 0x2e
   141bc:	beq	14264 <__assert_fail@plt+0x29d4>
   141c0:	add	r4, r8, #19
   141c4:	mov	r0, r4
   141c8:	bl	116ec <strlen@plt>
   141cc:	mov	sl, r0
   141d0:	mov	r0, r5
   141d4:	mov	r1, r4
   141d8:	mov	r2, sl
   141dc:	bl	13294 <__assert_fail@plt+0x1a04>
   141e0:	mov	r9, r0
   141e4:	cmp	r0, #0
   141e8:	beq	14478 <__assert_fail@plt+0x2be8>
   141ec:	ldr	r0, [sp, #44]	; 0x2c
   141f0:	cmp	sl, r0
   141f4:	bcs	1420c <__assert_fail@plt+0x297c>
   141f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   141fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14200:	adds	r0, sl, r3
   14204:	bcc	142a8 <__assert_fail@plt+0x2a18>
   14208:	b	1480c <__assert_fail@plt+0x2f7c>
   1420c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14210:	add	r0, sl, r0
   14214:	add	r1, r0, #1
   14218:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1421c:	ldr	r4, [r5, #24]
   14220:	mov	r0, r5
   14224:	bl	1321c <__assert_fail@plt+0x198c>
   14228:	cmp	r0, #0
   1422c:	beq	14478 <__assert_fail@plt+0x2be8>
   14230:	ldr	r0, [r5, #24]
   14234:	cmp	r4, r0
   14238:	mov	r2, r5
   1423c:	beq	14290 <__assert_fail@plt+0x2a00>
   14240:	ldrb	r1, [r2, #48]	; 0x30
   14244:	tst	r1, #4
   14248:	ldr	r1, [sp, #40]	; 0x28
   1424c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14250:	addne	r1, r0, r3
   14254:	str	r1, [sp, #40]	; 0x28
   14258:	mov	r0, #1
   1425c:	str	r0, [sp, #16]
   14260:	b	14294 <__assert_fail@plt+0x2a04>
   14264:	ldrb	r0, [r8, #20]
   14268:	cmp	r0, #0
   1426c:	beq	14280 <__assert_fail@plt+0x29f0>
   14270:	cmp	r0, #46	; 0x2e
   14274:	ldrbeq	r0, [r8, #21]
   14278:	cmpeq	r0, #0
   1427c:	bne	141c0 <__assert_fail@plt+0x2930>
   14280:	ldr	sl, [sp, #32]
   14284:	mov	r9, r6
   14288:	mov	r6, #0
   1428c:	b	143f4 <__assert_fail@plt+0x2b64>
   14290:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14294:	ldr	r0, [r2, #36]	; 0x24
   14298:	sub	r0, r0, r3
   1429c:	str	r0, [sp, #44]	; 0x2c
   142a0:	adds	r0, sl, r3
   142a4:	bcs	1480c <__assert_fail@plt+0x2f7c>
   142a8:	ldr	r1, [sp, #24]
   142ac:	str	r1, [r9, #48]	; 0x30
   142b0:	ldr	r1, [r2]
   142b4:	str	r0, [r9, #40]	; 0x28
   142b8:	str	r1, [r9, #4]
   142bc:	ldrd	r0, [r8]
   142c0:	strd	r0, [r9, #160]	; 0xa0
   142c4:	ldrb	r0, [r2, #48]	; 0x30
   142c8:	tst	r0, #4
   142cc:	ldr	sl, [sp, #32]
   142d0:	mov	r5, r6
   142d4:	bne	142e4 <__assert_fail@plt+0x2a54>
   142d8:	add	r0, r9, #168	; 0xa8
   142dc:	str	r0, [r9, #24]
   142e0:	b	14304 <__assert_fail@plt+0x2a74>
   142e4:	ldr	r0, [r9, #28]
   142e8:	ldr	r2, [r9, #52]	; 0x34
   142ec:	str	r0, [r9, #24]
   142f0:	add	r1, r9, #168	; 0xa8
   142f4:	add	r2, r2, #1
   142f8:	ldr	r0, [sp, #40]	; 0x28
   142fc:	bl	11518 <memmove@plt>
   14300:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14304:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14308:	ldr	r0, [r0]
   1430c:	cmp	r0, #0
   14310:	beq	14338 <__assert_fail@plt+0x2aa8>
   14314:	ldrb	r0, [r2, #49]	; 0x31
   14318:	tst	r0, #4
   1431c:	bne	14338 <__assert_fail@plt+0x2aa8>
   14320:	mov	r0, r2
   14324:	mov	r1, r9
   14328:	mov	r2, #0
   1432c:	bl	13344 <__assert_fail@plt+0x1ab4>
   14330:	strh	r0, [r9, #56]	; 0x38
   14334:	b	14388 <__assert_fail@plt+0x2af8>
   14338:	add	r0, r9, #64	; 0x40
   1433c:	ldr	r1, [r2, #48]	; 0x30
   14340:	mov	r4, #0
   14344:	tst	r1, #8
   14348:	beq	1436c <__assert_fail@plt+0x2adc>
   1434c:	ldrb	r2, [r8, #18]
   14350:	orr	r3, r2, #4
   14354:	cmp	r3, #4
   14358:	beq	1436c <__assert_fail@plt+0x2adc>
   1435c:	eor	r2, r2, #10
   14360:	and	r1, r1, #16
   14364:	orrs	r4, r1, r2
   14368:	movwne	r4, #1
   1436c:	mov	r1, #11
   14370:	strh	r1, [r9, #56]	; 0x38
   14374:	ldrb	r1, [r8, #18]
   14378:	bl	14d4c <__assert_fail@plt+0x34bc>
   1437c:	eor	r1, r4, #1
   14380:	mov	r0, r9
   14384:	bl	13314 <__assert_fail@plt+0x1a84>
   14388:	mov	r6, #0
   1438c:	str	r6, [r9, #8]
   14390:	cmp	r5, #0
   14394:	mov	r4, r9
   14398:	ldrne	r0, [sp, #48]	; 0x30
   1439c:	strne	r9, [r0, #8]
   143a0:	movne	r4, r5
   143a4:	movw	r0, #10000	; 0x2710
   143a8:	cmp	r7, r0
   143ac:	bne	143d0 <__assert_fail@plt+0x2b40>
   143b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   143b4:	ldr	r0, [r0]
   143b8:	cmp	r0, #0
   143bc:	bne	143d0 <__assert_fail@plt+0x2b40>
   143c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   143c4:	mov	r0, sl
   143c8:	bl	14d6c <__assert_fail@plt+0x34dc>
   143cc:	str	r0, [sp, #20]
   143d0:	add	r7, r7, #1
   143d4:	ldr	r0, [sp, #28]
   143d8:	cmp	r0, r7
   143dc:	mov	r0, #0
   143e0:	movwls	r0, #15
   143e4:	cmp	r0, #0
   143e8:	bne	14858 <__assert_fail@plt+0x2fc8>
   143ec:	str	r9, [sp, #48]	; 0x30
   143f0:	mov	r9, r4
   143f4:	ldr	r4, [sl, #12]
   143f8:	cmp	r4, #0
   143fc:	bne	14188 <__assert_fail@plt+0x28f8>
   14400:	ldr	r0, [sp, #16]
   14404:	tst	r0, #1
   14408:	ldr	r4, [sp, #8]
   1440c:	b	146e8 <__assert_fail@plt+0x2e58>
   14410:	mov	r2, r0
   14414:	ldr	r3, [r0, #48]	; 0x30
   14418:	and	r1, r3, #516	; 0x204
   1441c:	mvn	r0, #99	; 0x63
   14420:	cmp	r1, #512	; 0x200
   14424:	ldreq	r0, [r2, #32]
   14428:	ldr	r1, [sl, #24]
   1442c:	mov	r2, #0
   14430:	tst	r3, #16
   14434:	beq	144cc <__assert_fail@plt+0x2c3c>
   14438:	tst	r3, #1
   1443c:	bne	144c0 <__assert_fail@plt+0x2c30>
   14440:	mov	r2, #32768	; 0x8000
   14444:	b	144cc <__assert_fail@plt+0x2c3c>
   14448:	ldr	r0, [sl, #12]
   1444c:	bl	11878 <closedir@plt>
   14450:	mov	r9, #0
   14454:	str	r9, [sl, #12]
   14458:	cmp	r4, #3
   1445c:	beq	14518 <__assert_fail@plt+0x2c88>
   14460:	b	148c0 <__assert_fail@plt+0x3030>
   14464:	mov	r7, #0
   14468:	mov	r0, #0
   1446c:	str	r0, [sp, #20]
   14470:	ldr	r4, [sp, #8]
   14474:	b	14700 <__assert_fail@plt+0x2e70>
   14478:	ldr	r4, [sp, #36]	; 0x24
   1447c:	ldr	r8, [r4]
   14480:	mov	r0, r9
   14484:	bl	19b34 <__assert_fail@plt+0x82a4>
   14488:	mov	r0, r6
   1448c:	bl	13648 <__assert_fail@plt+0x1db8>
   14490:	ldr	r7, [sp, #32]
   14494:	ldr	r0, [r7, #12]
   14498:	bl	11878 <closedir@plt>
   1449c:	mov	r9, #0
   144a0:	str	r9, [r7, #12]
   144a4:	mov	r0, #7
   144a8:	strh	r0, [r7, #56]	; 0x38
   144ac:	ldr	r0, [r5, #48]	; 0x30
   144b0:	orr	r0, r0, #8192	; 0x2000
   144b4:	str	r0, [r5, #48]	; 0x30
   144b8:	str	r8, [r4]
   144bc:	b	148c0 <__assert_fail@plt+0x3030>
   144c0:	ldr	r3, [sl, #48]	; 0x30
   144c4:	cmp	r3, #0
   144c8:	movne	r2, #32768	; 0x8000
   144cc:	sub	r3, fp, #32
   144d0:	bl	15fd0 <__assert_fail@plt+0x4740>
   144d4:	str	r0, [sl, #12]
   144d8:	cmp	r0, #0
   144dc:	beq	1450c <__assert_fail@plt+0x2c7c>
   144e0:	ldrh	r0, [sl, #56]	; 0x38
   144e4:	cmp	r0, #11
   144e8:	bne	14530 <__assert_fail@plt+0x2ca0>
   144ec:	ldr	r6, [fp, #-36]	; 0xffffffdc
   144f0:	mov	r0, r6
   144f4:	mov	r1, sl
   144f8:	mov	r2, #0
   144fc:	bl	13344 <__assert_fail@plt+0x1ab4>
   14500:	mov	ip, r6
   14504:	strh	r0, [sl, #56]	; 0x38
   14508:	b	14578 <__assert_fail@plt+0x2ce8>
   1450c:	mov	r9, #0
   14510:	cmp	r4, #3
   14514:	bne	148c0 <__assert_fail@plt+0x3030>
   14518:	mov	r0, #4
   1451c:	strh	r0, [sl, #56]	; 0x38
   14520:	bl	11710 <__errno_location@plt>
   14524:	ldr	r0, [r0]
   14528:	str	r0, [sl, #32]
   1452c:	b	148c0 <__assert_fail@plt+0x3030>
   14530:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14534:	ldrb	r0, [ip, #49]	; 0x31
   14538:	tst	r0, #1
   1453c:	beq	14578 <__assert_fail@plt+0x2ce8>
   14540:	mov	r0, ip
   14544:	mov	r1, sl
   14548:	bl	13dcc <__assert_fail@plt+0x253c>
   1454c:	mov	r9, #0
   14550:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14554:	mov	r1, sl
   14558:	mov	r2, #0
   1455c:	bl	13344 <__assert_fail@plt+0x1ab4>
   14560:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14564:	mov	r1, sl
   14568:	bl	149cc <__assert_fail@plt+0x313c>
   1456c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14570:	cmp	r0, #0
   14574:	beq	1487c <__assert_fail@plt+0x2fec>
   14578:	mov	r1, ip
   1457c:	ldr	r0, [r1, #44]!	; 0x2c
   14580:	str	r1, [fp, #-44]	; 0xffffffd4
   14584:	mvn	r1, #0
   14588:	cmp	r0, #0
   1458c:	movweq	r1, #34464	; 0x86a0
   14590:	movteq	r1, #1
   14594:	str	r1, [sp, #28]
   14598:	mov	r6, #0
   1459c:	cmp	r4, #2
   145a0:	beq	145c4 <__assert_fail@plt+0x2d34>
   145a4:	ldr	r0, [ip, #48]	; 0x30
   145a8:	and	r1, r0, #56	; 0x38
   145ac:	mov	r0, #0
   145b0:	cmp	r1, #24
   145b4:	ldreq	r1, [sl, #84]	; 0x54
   145b8:	cmpeq	r1, #2
   145bc:	beq	148cc <__assert_fail@plt+0x303c>
   145c0:	eor	r6, r0, #1
   145c4:	cmp	r4, #3
   145c8:	beq	145dc <__assert_fail@plt+0x2d4c>
   145cc:	cmp	r6, #0
   145d0:	bne	145dc <__assert_fail@plt+0x2d4c>
   145d4:	str	r6, [sp, #4]
   145d8:	b	140e0 <__assert_fail@plt+0x2850>
   145dc:	ldrb	r0, [ip, #49]	; 0x31
   145e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   145e4:	tst	r0, #2
   145e8:	beq	14608 <__assert_fail@plt+0x2d78>
   145ec:	mov	r0, r2
   145f0:	movw	r1, #1030	; 0x406
   145f4:	mov	r2, #3
   145f8:	bl	198a0 <__assert_fail@plt+0x8010>
   145fc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14600:	mov	r2, r0
   14604:	str	r0, [fp, #-32]	; 0xffffffe0
   14608:	cmp	r2, #0
   1460c:	blt	1462c <__assert_fail@plt+0x2d9c>
   14610:	mov	r0, ip
   14614:	mov	r1, sl
   14618:	mov	r3, #0
   1461c:	bl	13e9c <__assert_fail@plt+0x260c>
   14620:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14624:	cmp	r0, #0
   14628:	beq	140d8 <__assert_fail@plt+0x2848>
   1462c:	subs	r0, r4, #3
   14630:	movwne	r0, #1
   14634:	eor	r1, r6, #1
   14638:	orrs	r0, r0, r1
   1463c:	bne	1464c <__assert_fail@plt+0x2dbc>
   14640:	bl	11710 <__errno_location@plt>
   14644:	ldr	r0, [r0]
   14648:	str	r0, [sl, #32]
   1464c:	ldrh	r0, [sl, #58]	; 0x3a
   14650:	orr	r0, r0, #1
   14654:	strh	r0, [sl, #58]	; 0x3a
   14658:	ldr	r0, [sl, #12]
   1465c:	bl	11878 <closedir@plt>
   14660:	mov	r6, #0
   14664:	str	r6, [sl, #12]
   14668:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1466c:	ldr	r0, [ip, #48]	; 0x30
   14670:	tst	r0, #512	; 0x200
   14674:	beq	1468c <__assert_fail@plt+0x2dfc>
   14678:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1467c:	cmp	r0, #0
   14680:	blt	1468c <__assert_fail@plt+0x2dfc>
   14684:	bl	11860 <close@plt>
   14688:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1468c:	mov	r0, #0
   14690:	str	r0, [sp, #4]
   14694:	str	r6, [sl, #12]
   14698:	b	140e0 <__assert_fail@plt+0x2850>
   1469c:	ldr	r0, [sp, #36]	; 0x24
   146a0:	ldr	r0, [r0]
   146a4:	cmp	r0, #0
   146a8:	beq	146c4 <__assert_fail@plt+0x2e34>
   146ac:	str	r0, [sl, #32]
   146b0:	ldr	r0, [sp, #12]
   146b4:	orrs	r0, r0, r7
   146b8:	mov	r0, #4
   146bc:	movwne	r0, #7
   146c0:	strh	r0, [sl, #56]	; 0x38
   146c4:	ldr	r0, [sl, #12]
   146c8:	cmp	r0, #0
   146cc:	ldr	r4, [sp, #8]
   146d0:	beq	14868 <__assert_fail@plt+0x2fd8>
   146d4:	bl	11878 <closedir@plt>
   146d8:	mov	r0, #0
   146dc:	str	r0, [sl, #12]
   146e0:	ldr	r0, [sp, #16]
   146e4:	tst	r0, #1
   146e8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   146ec:	beq	14700 <__assert_fail@plt+0x2e70>
   146f0:	mov	r0, ip
   146f4:	mov	r1, r9
   146f8:	bl	14db0 <__assert_fail@plt+0x3520>
   146fc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14700:	ldrb	r0, [ip, #48]	; 0x30
   14704:	tst	r0, #4
   14708:	beq	14734 <__assert_fail@plt+0x2ea4>
   1470c:	ldr	r0, [ip, #36]	; 0x24
   14710:	ldr	r2, [sp, #40]	; 0x28
   14714:	sub	r1, r2, #1
   14718:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1471c:	cmp	r3, r0
   14720:	moveq	r2, r1
   14724:	cmp	r7, #0
   14728:	moveq	r2, r1
   1472c:	mov	r0, #0
   14730:	strb	r0, [r2]
   14734:	ldr	r0, [sp, #12]
   14738:	cmp	r0, #0
   1473c:	ldreq	r0, [sp, #4]
   14740:	eorseq	r0, r0, #1
   14744:	beq	14770 <__assert_fail@plt+0x2ee0>
   14748:	cmp	r7, #0
   1474c:	bne	147a4 <__assert_fail@plt+0x2f14>
   14750:	cmp	r4, #3
   14754:	bne	148b4 <__assert_fail@plt+0x3024>
   14758:	ldrh	r0, [sl, #56]	; 0x38
   1475c:	cmp	r0, #4
   14760:	cmpne	r0, #7
   14764:	movne	r0, #6
   14768:	strhne	r0, [sl, #56]	; 0x38
   1476c:	b	148b4 <__assert_fail@plt+0x3024>
   14770:	cmp	r4, #1
   14774:	cmpne	r7, #0
   14778:	bne	147a4 <__assert_fail@plt+0x2f14>
   1477c:	ldr	r0, [sl, #48]	; 0x30
   14780:	cmp	r0, #0
   14784:	beq	1488c <__assert_fail@plt+0x2ffc>
   14788:	ldr	r1, [sl, #4]
   1478c:	movw	r3, #45762	; 0xb2c2
   14790:	movt	r3, #1
   14794:	mov	r0, ip
   14798:	mvn	r2, #0
   1479c:	bl	13e9c <__assert_fail@plt+0x260c>
   147a0:	b	14894 <__assert_fail@plt+0x3004>
   147a4:	ldr	r0, [sp, #20]
   147a8:	tst	r0, #1
   147ac:	beq	147dc <__assert_fail@plt+0x2f4c>
   147b0:	movw	r0, #20024	; 0x4e38
   147b4:	movt	r0, #1
   147b8:	str	r0, [ip, #44]	; 0x2c
   147bc:	mov	r0, ip
   147c0:	mov	r1, r9
   147c4:	mov	r2, r7
   147c8:	bl	134ac <__assert_fail@plt+0x1c1c>
   147cc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   147d0:	mov	r9, r0
   147d4:	mov	r0, #0
   147d8:	str	r0, [ip, #44]	; 0x2c
   147dc:	cmp	r7, #2
   147e0:	bcc	148c0 <__assert_fail@plt+0x3030>
   147e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   147e8:	ldr	r0, [r0]
   147ec:	cmp	r0, #0
   147f0:	beq	148c0 <__assert_fail@plt+0x3030>
   147f4:	mov	r0, ip
   147f8:	mov	r1, r9
   147fc:	mov	r2, r7
   14800:	bl	134ac <__assert_fail@plt+0x1c1c>
   14804:	mov	r9, r0
   14808:	b	148c0 <__assert_fail@plt+0x3030>
   1480c:	mov	r0, r9
   14810:	mov	r4, r2
   14814:	bl	19b34 <__assert_fail@plt+0x82a4>
   14818:	mov	r0, r6
   1481c:	bl	13648 <__assert_fail@plt+0x1db8>
   14820:	ldr	r5, [sp, #32]
   14824:	ldr	r0, [r5, #12]
   14828:	bl	11878 <closedir@plt>
   1482c:	mov	r9, #0
   14830:	str	r9, [r5, #12]
   14834:	mov	r0, #7
   14838:	strh	r0, [r5, #56]	; 0x38
   1483c:	ldr	r0, [r4, #48]	; 0x30
   14840:	orr	r0, r0, #8192	; 0x2000
   14844:	str	r0, [r4, #48]	; 0x30
   14848:	mov	r0, #36	; 0x24
   1484c:	ldr	r1, [sp, #36]	; 0x24
   14850:	str	r0, [r1]
   14854:	b	148c0 <__assert_fail@plt+0x3030>
   14858:	cmp	r0, #15
   1485c:	bne	148bc <__assert_fail@plt+0x302c>
   14860:	mov	r9, r4
   14864:	ldr	r4, [sp, #8]
   14868:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1486c:	ldr	r0, [sp, #16]
   14870:	tst	r0, #1
   14874:	bne	146f0 <__assert_fail@plt+0x2e60>
   14878:	b	14700 <__assert_fail@plt+0x2e70>
   1487c:	bl	11710 <__errno_location@plt>
   14880:	mov	r1, #12
   14884:	str	r1, [r0]
   14888:	b	148c0 <__assert_fail@plt+0x3030>
   1488c:	mov	r0, ip
   14890:	bl	148e8 <__assert_fail@plt+0x3058>
   14894:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14898:	cmp	r0, #0
   1489c:	beq	14748 <__assert_fail@plt+0x2eb8>
   148a0:	mov	r0, #7
   148a4:	strh	r0, [sl, #56]	; 0x38
   148a8:	ldr	r0, [ip, #48]	; 0x30
   148ac:	orr	r0, r0, #8192	; 0x2000
   148b0:	str	r0, [ip, #48]	; 0x30
   148b4:	mov	r0, r9
   148b8:	bl	13648 <__assert_fail@plt+0x1db8>
   148bc:	mov	r9, #0
   148c0:	mov	r0, r9
   148c4:	sub	sp, fp, #28
   148c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   148d0:	mov	r0, sl
   148d4:	bl	14ce4 <__assert_fail@plt+0x3454>
   148d8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   148dc:	cmp	r0, #0
   148e0:	movwne	r0, #1
   148e4:	b	145c0 <__assert_fail@plt+0x2d30>
   148e8:	push	{r4, r5, fp, lr}
   148ec:	add	fp, sp, #8
   148f0:	mov	r4, r0
   148f4:	ldr	r0, [r0, #48]	; 0x30
   148f8:	mov	r5, #0
   148fc:	tst	r0, #4
   14900:	bne	14934 <__assert_fail@plt+0x30a4>
   14904:	tst	r0, #512	; 0x200
   14908:	bne	14924 <__assert_fail@plt+0x3094>
   1490c:	ldr	r0, [r4, #28]
   14910:	bl	117f4 <fchdir@plt>
   14914:	mov	r5, r0
   14918:	cmp	r0, #0
   1491c:	movwne	r5, #1
   14920:	b	14934 <__assert_fail@plt+0x30a4>
   14924:	mov	r0, r4
   14928:	mvn	r1, #99	; 0x63
   1492c:	mov	r2, #1
   14930:	bl	14a84 <__assert_fail@plt+0x31f4>
   14934:	add	r0, r4, #60	; 0x3c
   14938:	bl	137b4 <__assert_fail@plt+0x1f24>
   1493c:	mov	r0, r5
   14940:	pop	{r4, r5, fp, pc}
   14944:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14948:	add	fp, sp, #24
   1494c:	mov	r4, r1
   14950:	mov	r8, r0
   14954:	ldr	r1, [r1, #52]	; 0x34
   14958:	str	r1, [r4, #40]	; 0x28
   1495c:	ldr	r0, [r0, #24]
   14960:	add	r6, r4, #168	; 0xa8
   14964:	add	r2, r1, #1
   14968:	mov	r1, r6
   1496c:	bl	11518 <memmove@plt>
   14970:	mov	r0, r6
   14974:	mov	r1, #47	; 0x2f
   14978:	bl	117b8 <strrchr@plt>
   1497c:	cmp	r0, #0
   14980:	beq	149bc <__assert_fail@plt+0x312c>
   14984:	cmp	r0, r6
   14988:	bne	14998 <__assert_fail@plt+0x3108>
   1498c:	ldrb	r1, [r0, #1]
   14990:	cmp	r1, #0
   14994:	beq	149bc <__assert_fail@plt+0x312c>
   14998:	add	r7, r0, #1
   1499c:	mov	r0, r7
   149a0:	bl	116ec <strlen@plt>
   149a4:	mov	r5, r0
   149a8:	add	r2, r0, #1
   149ac:	mov	r0, r6
   149b0:	mov	r1, r7
   149b4:	bl	11518 <memmove@plt>
   149b8:	str	r5, [r4, #52]	; 0x34
   149bc:	ldr	r0, [r8, #24]
   149c0:	str	r0, [r4, #24]
   149c4:	str	r0, [r4, #28]
   149c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149cc:	push	{r4, r5, r6, r7, fp, lr}
   149d0:	add	fp, sp, #16
   149d4:	mov	r4, r1
   149d8:	mov	r6, r0
   149dc:	ldrh	r0, [r0, #48]	; 0x30
   149e0:	movw	r1, #258	; 0x102
   149e4:	tst	r0, r1
   149e8:	beq	14a5c <__assert_fail@plt+0x31cc>
   149ec:	mov	r0, #24
   149f0:	bl	1903c <__assert_fail@plt+0x77ac>
   149f4:	mov	r5, #0
   149f8:	cmp	r0, #0
   149fc:	beq	14a7c <__assert_fail@plt+0x31ec>
   14a00:	mov	r7, r0
   14a04:	ldrd	r0, [r4, #64]	; 0x40
   14a08:	stm	r7, {r0, r1}
   14a0c:	ldrd	r0, [r4, #160]	; 0xa0
   14a10:	add	r2, r7, #8
   14a14:	stm	r2, {r0, r1, r4}
   14a18:	ldr	r0, [r6, #56]	; 0x38
   14a1c:	mov	r1, r7
   14a20:	bl	15cb8 <__assert_fail@plt+0x4428>
   14a24:	cmp	r0, r7
   14a28:	beq	14a50 <__assert_fail@plt+0x31c0>
   14a2c:	mov	r6, r0
   14a30:	mov	r0, r7
   14a34:	bl	19b34 <__assert_fail@plt+0x82a4>
   14a38:	cmp	r6, #0
   14a3c:	beq	14a7c <__assert_fail@plt+0x31ec>
   14a40:	ldr	r0, [r6, #16]
   14a44:	mov	r1, #2
   14a48:	strh	r1, [r4, #56]	; 0x38
   14a4c:	str	r0, [r4]
   14a50:	mov	r5, #1
   14a54:	mov	r0, r5
   14a58:	pop	{r4, r5, r6, r7, fp, pc}
   14a5c:	ldr	r0, [r6, #56]	; 0x38
   14a60:	add	r1, r4, #64	; 0x40
   14a64:	bl	19700 <__assert_fail@plt+0x7e70>
   14a68:	mov	r5, #1
   14a6c:	cmp	r0, #0
   14a70:	movne	r0, #2
   14a74:	strhne	r0, [r4, #56]	; 0x38
   14a78:	strne	r4, [r4]
   14a7c:	mov	r0, r5
   14a80:	pop	{r4, r5, r6, r7, fp, pc}
   14a84:	push	{r4, r5, fp, lr}
   14a88:	add	fp, sp, #8
   14a8c:	mov	r4, r1
   14a90:	mov	r5, r0
   14a94:	ldr	r1, [r0, #32]
   14a98:	cmp	r1, r4
   14a9c:	bne	14aa8 <__assert_fail@plt+0x3218>
   14aa0:	cmn	r1, #100	; 0x64
   14aa4:	bne	14ae8 <__assert_fail@plt+0x3258>
   14aa8:	cmp	r2, #0
   14aac:	beq	14ac4 <__assert_fail@plt+0x3234>
   14ab0:	add	r0, r5, #60	; 0x3c
   14ab4:	bl	15ef4 <__assert_fail@plt+0x4664>
   14ab8:	cmp	r0, #0
   14abc:	bge	14adc <__assert_fail@plt+0x324c>
   14ac0:	b	14ae0 <__assert_fail@plt+0x3250>
   14ac4:	cmp	r1, #0
   14ac8:	blt	14ae0 <__assert_fail@plt+0x3250>
   14acc:	ldr	r0, [r5, #48]	; 0x30
   14ad0:	ands	r0, r0, #4
   14ad4:	bne	14ae0 <__assert_fail@plt+0x3250>
   14ad8:	mov	r0, r1
   14adc:	bl	11860 <close@plt>
   14ae0:	str	r4, [r5, #32]
   14ae4:	pop	{r4, r5, fp, pc}
   14ae8:	bl	11854 <abort@plt>
   14aec:	cmp	r2, #5
   14af0:	strhcc	r2, [r1, #60]	; 0x3c
   14af4:	movcc	r0, #0
   14af8:	bxcc	lr
   14afc:	push	{fp, lr}
   14b00:	mov	fp, sp
   14b04:	bl	11710 <__errno_location@plt>
   14b08:	mov	r1, #22
   14b0c:	str	r1, [r0]
   14b10:	mov	r0, #1
   14b14:	pop	{fp, pc}
   14b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b1c:	add	fp, sp, #28
   14b20:	sub	sp, sp, #4
   14b24:	mov	r5, r0
   14b28:	orr	r0, r1, #4096	; 0x1000
   14b2c:	cmp	r0, #4096	; 0x1000
   14b30:	bne	14b70 <__assert_fail@plt+0x32e0>
   14b34:	mov	r7, r1
   14b38:	ldr	r6, [r5]
   14b3c:	bl	11710 <__errno_location@plt>
   14b40:	mov	sl, r0
   14b44:	mov	r4, #0
   14b48:	str	r4, [r0]
   14b4c:	ldrb	r0, [r5, #49]	; 0x31
   14b50:	tst	r0, #32
   14b54:	bne	14b80 <__assert_fail@plt+0x32f0>
   14b58:	ldrh	r0, [r6, #56]	; 0x38
   14b5c:	cmp	r0, #1
   14b60:	beq	14b8c <__assert_fail@plt+0x32fc>
   14b64:	cmp	r0, #9
   14b68:	ldreq	r4, [r6, #8]
   14b6c:	b	14b80 <__assert_fail@plt+0x32f0>
   14b70:	bl	11710 <__errno_location@plt>
   14b74:	mov	r1, #22
   14b78:	str	r1, [r0]
   14b7c:	mov	r4, #0
   14b80:	mov	r0, r4
   14b84:	sub	sp, fp, #28
   14b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b8c:	ldr	r0, [r5, #4]
   14b90:	cmp	r0, #0
   14b94:	blne	13648 <__assert_fail@plt+0x1db8>
   14b98:	mov	r9, #1
   14b9c:	cmp	r7, #4096	; 0x1000
   14ba0:	ldreq	r0, [r5, #48]	; 0x30
   14ba4:	orreq	r0, r0, #4096	; 0x1000
   14ba8:	streq	r0, [r5, #48]	; 0x30
   14bac:	moveq	r9, #2
   14bb0:	ldr	r0, [r6, #48]	; 0x30
   14bb4:	cmp	r0, #0
   14bb8:	bne	14c34 <__assert_fail@plt+0x33a4>
   14bbc:	ldr	r0, [r6, #24]
   14bc0:	ldrb	r0, [r0]
   14bc4:	cmp	r0, #47	; 0x2f
   14bc8:	beq	14c34 <__assert_fail@plt+0x33a4>
   14bcc:	ldrb	r0, [r5, #48]	; 0x30
   14bd0:	tst	r0, #4
   14bd4:	bne	14c34 <__assert_fail@plt+0x33a4>
   14bd8:	movw	r1, #45763	; 0xb2c3
   14bdc:	movt	r1, #1
   14be0:	mov	r0, r5
   14be4:	bl	13618 <__assert_fail@plt+0x1d88>
   14be8:	cmn	r0, #1
   14bec:	ble	14c4c <__assert_fail@plt+0x33bc>
   14bf0:	mov	r8, r0
   14bf4:	mov	r0, r5
   14bf8:	mov	r1, r9
   14bfc:	bl	1407c <__assert_fail@plt+0x27ec>
   14c00:	str	r0, [r5, #4]
   14c04:	ldrb	r0, [r5, #49]	; 0x31
   14c08:	tst	r0, #2
   14c0c:	bne	14c58 <__assert_fail@plt+0x33c8>
   14c10:	mov	r0, r8
   14c14:	bl	117f4 <fchdir@plt>
   14c18:	cmp	r0, #0
   14c1c:	beq	14c6c <__assert_fail@plt+0x33dc>
   14c20:	ldr	r5, [sl]
   14c24:	mov	r0, r8
   14c28:	bl	11860 <close@plt>
   14c2c:	str	r5, [sl]
   14c30:	b	14b80 <__assert_fail@plt+0x32f0>
   14c34:	mov	r0, r5
   14c38:	mov	r1, r9
   14c3c:	bl	1407c <__assert_fail@plt+0x27ec>
   14c40:	mov	r4, r0
   14c44:	str	r0, [r5, #4]
   14c48:	b	14b80 <__assert_fail@plt+0x32f0>
   14c4c:	mov	r4, #0
   14c50:	str	r4, [r5, #4]
   14c54:	b	14b80 <__assert_fail@plt+0x32f0>
   14c58:	mov	r0, r5
   14c5c:	mov	r1, r8
   14c60:	mov	r2, #1
   14c64:	bl	14a84 <__assert_fail@plt+0x31f4>
   14c68:	b	14c74 <__assert_fail@plt+0x33e4>
   14c6c:	mov	r0, r8
   14c70:	bl	11860 <close@plt>
   14c74:	ldr	r4, [r5, #4]
   14c78:	b	14b80 <__assert_fail@plt+0x32f0>
   14c7c:	push	{fp, lr}
   14c80:	mov	fp, sp
   14c84:	mov	r2, r1
   14c88:	ldrd	r0, [r0, #8]
   14c8c:	mov	r3, #0
   14c90:	bl	1a298 <__assert_fail@plt+0x8a08>
   14c94:	mov	r0, r2
   14c98:	pop	{fp, pc}
   14c9c:	push	{r4, r5, fp, lr}
   14ca0:	add	fp, sp, #8
   14ca4:	ldrd	r2, [r1, #8]
   14ca8:	ldrd	r4, [r0, #8]
   14cac:	eor	r3, r5, r3
   14cb0:	eor	r2, r4, r2
   14cb4:	orrs	r2, r2, r3
   14cb8:	mov	r2, #0
   14cbc:	bne	14cdc <__assert_fail@plt+0x344c>
   14cc0:	ldrd	r2, [r1]
   14cc4:	ldrd	r0, [r0]
   14cc8:	eor	r1, r1, r3
   14ccc:	eor	r0, r0, r2
   14cd0:	orr	r0, r0, r1
   14cd4:	clz	r0, r0
   14cd8:	lsr	r2, r0, #5
   14cdc:	mov	r0, r2
   14ce0:	pop	{r4, r5, fp, pc}
   14ce4:	push	{fp, lr}
   14ce8:	mov	fp, sp
   14cec:	bl	14e70 <__assert_fail@plt+0x35e0>
   14cf0:	mov	r1, r0
   14cf4:	mov	r0, #0
   14cf8:	movw	r2, #26984	; 0x6968
   14cfc:	cmp	r1, r2
   14d00:	ble	14d30 <__assert_fail@plt+0x34a0>
   14d04:	movw	r2, #26985	; 0x6969
   14d08:	cmp	r1, r2
   14d0c:	movwne	r2, #40864	; 0x9fa0
   14d10:	cmpne	r1, r2
   14d14:	beq	14d48 <__assert_fail@plt+0x34b8>
   14d18:	movw	r2, #16719	; 0x414f
   14d1c:	movt	r2, #21318	; 0x5346
   14d20:	cmp	r1, r2
   14d24:	popeq	{fp, pc}
   14d28:	mov	r0, #1
   14d2c:	pop	{fp, pc}
   14d30:	movw	r2, #19778	; 0x4d42
   14d34:	movt	r2, #65363	; 0xff53
   14d38:	cmp	r1, r2
   14d3c:	beq	14d48 <__assert_fail@plt+0x34b8>
   14d40:	cmp	r1, #0
   14d44:	movne	r0, #1
   14d48:	pop	{fp, pc}
   14d4c:	sub	r2, r1, #1
   14d50:	mov	r1, #0
   14d54:	cmp	r2, #11
   14d58:	movwls	r1, #45776	; 0xb2d0
   14d5c:	movtls	r1, #1
   14d60:	ldrls	r1, [r1, r2, lsl #2]
   14d64:	str	r1, [r0, #16]
   14d68:	bx	lr
   14d6c:	push	{fp, lr}
   14d70:	mov	fp, sp
   14d74:	bl	14e70 <__assert_fail@plt+0x35e0>
   14d78:	mov	r1, r0
   14d7c:	mov	r0, #0
   14d80:	movw	r2, #19778	; 0x4d42
   14d84:	movt	r2, #65363	; 0xff53
   14d88:	cmp	r1, r2
   14d8c:	movwne	r2, #26985	; 0x6969
   14d90:	cmpne	r1, r2
   14d94:	bne	14d9c <__assert_fail@plt+0x350c>
   14d98:	pop	{fp, pc}
   14d9c:	movw	r2, #6548	; 0x1994
   14da0:	movt	r2, #258	; 0x102
   14da4:	cmp	r1, r2
   14da8:	movne	r0, #1
   14dac:	pop	{fp, pc}
   14db0:	ldr	r2, [r0, #4]
   14db4:	ldr	ip, [r0, #24]
   14db8:	cmp	r2, #0
   14dbc:	beq	14dec <__assert_fail@plt+0x355c>
   14dc0:	ldr	r3, [r2, #24]
   14dc4:	add	r0, r2, #168	; 0xa8
   14dc8:	cmp	r3, r0
   14dcc:	ldrne	r0, [r2, #28]
   14dd0:	subne	r0, r3, r0
   14dd4:	addne	r0, ip, r0
   14dd8:	strne	r0, [r2, #24]
   14ddc:	str	ip, [r2, #28]
   14de0:	ldr	r2, [r2, #8]
   14de4:	cmp	r2, #0
   14de8:	bne	14dc0 <__assert_fail@plt+0x3530>
   14dec:	ldr	r2, [r1, #48]	; 0x30
   14df0:	cmp	r2, #0
   14df4:	bxlt	lr
   14df8:	ldr	r2, [r1, #24]
   14dfc:	add	r0, r1, #168	; 0xa8
   14e00:	cmp	r2, r0
   14e04:	ldrne	r0, [r1, #28]
   14e08:	subne	r0, r2, r0
   14e0c:	addne	r0, ip, r0
   14e10:	strne	r0, [r1, #24]
   14e14:	str	ip, [r1, #28]
   14e18:	ldr	r2, [r1, #8]
   14e1c:	cmp	r2, #0
   14e20:	ldreq	r2, [r1, #4]
   14e24:	ldr	r0, [r2, #48]	; 0x30
   14e28:	cmn	r0, #1
   14e2c:	mov	r1, r2
   14e30:	bgt	14df8 <__assert_fail@plt+0x3568>
   14e34:	bx	lr
   14e38:	push	{r4, r5, fp, lr}
   14e3c:	add	fp, sp, #8
   14e40:	ldr	r0, [r0]
   14e44:	ldrd	r2, [r0, #160]	; 0xa0
   14e48:	ldr	r0, [r1]
   14e4c:	ldrd	r4, [r0, #160]	; 0xa0
   14e50:	mov	r0, #0
   14e54:	subs	r1, r4, r2
   14e58:	sbcs	r1, r5, r3
   14e5c:	movwcc	r0, #1
   14e60:	subs	r1, r2, r4
   14e64:	sbcs	r1, r3, r5
   14e68:	subcc	r0, r0, #1
   14e6c:	pop	{r4, r5, fp, pc}
   14e70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14e74:	add	fp, sp, #24
   14e78:	sub	sp, sp, #96	; 0x60
   14e7c:	mov	r4, r0
   14e80:	ldr	r7, [r0, #44]	; 0x2c
   14e84:	ldrb	r0, [r7, #49]	; 0x31
   14e88:	mov	r5, #0
   14e8c:	tst	r0, #2
   14e90:	beq	14f8c <__assert_fail@plt+0x36fc>
   14e94:	mov	r9, r1
   14e98:	ldr	r6, [r7, #52]	; 0x34
   14e9c:	cmp	r6, #0
   14ea0:	bne	14ee0 <__assert_fail@plt+0x3650>
   14ea4:	movw	r0, #39732	; 0x9b34
   14ea8:	movt	r0, #1
   14eac:	str	r0, [sp]
   14eb0:	mov	r8, #0
   14eb4:	movw	r2, #20376	; 0x4f98
   14eb8:	movt	r2, #1
   14ebc:	movw	r3, #20408	; 0x4fb8
   14ec0:	movt	r3, #1
   14ec4:	mov	r0, #13
   14ec8:	mov	r1, #0
   14ecc:	bl	15428 <__assert_fail@plt+0x3b98>
   14ed0:	mov	r6, r0
   14ed4:	str	r0, [r7, #52]	; 0x34
   14ed8:	cmp	r0, #0
   14edc:	beq	14f18 <__assert_fail@plt+0x3688>
   14ee0:	ldrd	r0, [r4, #64]	; 0x40
   14ee4:	str	r1, [sp, #12]
   14ee8:	str	r0, [sp, #8]
   14eec:	add	r1, sp, #8
   14ef0:	mov	r0, r6
   14ef4:	bl	151a0 <__assert_fail@plt+0x3910>
   14ef8:	cmp	r0, #0
   14efc:	beq	14f08 <__assert_fail@plt+0x3678>
   14f00:	ldr	r5, [r0, #8]
   14f04:	b	14f8c <__assert_fail@plt+0x36fc>
   14f08:	mov	r8, #1
   14f0c:	cmp	r9, #0
   14f10:	bge	14f24 <__assert_fail@plt+0x3694>
   14f14:	b	14f8c <__assert_fail@plt+0x36fc>
   14f18:	mov	r6, #0
   14f1c:	cmp	r9, #0
   14f20:	blt	14f8c <__assert_fail@plt+0x36fc>
   14f24:	add	r1, sp, #8
   14f28:	mov	r0, r9
   14f2c:	bl	114b8 <fstatfs64@plt>
   14f30:	cmp	r0, #0
   14f34:	bne	14f8c <__assert_fail@plt+0x36fc>
   14f38:	cmp	r8, #0
   14f3c:	beq	14f88 <__assert_fail@plt+0x36f8>
   14f40:	mov	r0, #16
   14f44:	bl	1903c <__assert_fail@plt+0x77ac>
   14f48:	cmp	r0, #0
   14f4c:	beq	14f88 <__assert_fail@plt+0x36f8>
   14f50:	mov	r5, r0
   14f54:	ldrd	r0, [r4, #64]	; 0x40
   14f58:	ldr	r2, [sp, #8]
   14f5c:	stm	r5, {r0, r1, r2}
   14f60:	mov	r0, r6
   14f64:	mov	r1, r5
   14f68:	bl	15cb8 <__assert_fail@plt+0x4428>
   14f6c:	cmp	r0, #0
   14f70:	beq	14f80 <__assert_fail@plt+0x36f0>
   14f74:	cmp	r0, r5
   14f78:	beq	14f88 <__assert_fail@plt+0x36f8>
   14f7c:	bl	11854 <abort@plt>
   14f80:	mov	r0, r5
   14f84:	bl	19b34 <__assert_fail@plt+0x82a4>
   14f88:	ldr	r5, [sp, #8]
   14f8c:	mov	r0, r5
   14f90:	sub	sp, fp, #24
   14f94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14f98:	push	{fp, lr}
   14f9c:	mov	fp, sp
   14fa0:	mov	r2, r1
   14fa4:	ldrd	r0, [r0]
   14fa8:	mov	r3, #0
   14fac:	bl	1a298 <__assert_fail@plt+0x8a08>
   14fb0:	mov	r0, r2
   14fb4:	pop	{fp, pc}
   14fb8:	ldrd	r2, [r1]
   14fbc:	ldrd	r0, [r0]
   14fc0:	eor	r1, r1, r3
   14fc4:	eor	r0, r0, r2
   14fc8:	orr	r0, r0, r1
   14fcc:	clz	r0, r0
   14fd0:	lsr	r0, r0, #5
   14fd4:	bx	lr
   14fd8:	ldr	r0, [r0, #8]
   14fdc:	bx	lr
   14fe0:	ldr	r0, [r0, #12]
   14fe4:	bx	lr
   14fe8:	ldr	r0, [r0, #16]
   14fec:	bx	lr
   14ff0:	mov	r2, r0
   14ff4:	ldm	r0, {r1, r3}
   14ff8:	mov	r0, #0
   14ffc:	cmp	r1, r3
   15000:	bxcs	lr
   15004:	ldr	ip, [r2, #4]
   15008:	mov	r0, #0
   1500c:	ldr	r2, [r1]
   15010:	cmp	r2, #0
   15014:	beq	15038 <__assert_fail@plt+0x37a8>
   15018:	mov	r3, #0
   1501c:	mov	r2, r1
   15020:	add	r3, r3, #1
   15024:	ldr	r2, [r2, #4]
   15028:	cmp	r2, #0
   1502c:	bne	15020 <__assert_fail@plt+0x3790>
   15030:	cmp	r3, r0
   15034:	movhi	r0, r3
   15038:	add	r1, r1, #8
   1503c:	cmp	r1, ip
   15040:	bcc	1500c <__assert_fail@plt+0x377c>
   15044:	bx	lr
   15048:	push	{fp, lr}
   1504c:	mov	fp, sp
   15050:	ldr	r3, [r0]
   15054:	ldr	r1, [r0, #4]
   15058:	mov	lr, #0
   1505c:	cmp	r3, r1
   15060:	mov	r1, #0
   15064:	bcs	150a4 <__assert_fail@plt+0x3814>
   15068:	ldr	ip, [r0, #4]
   1506c:	mov	r1, #0
   15070:	mov	lr, #0
   15074:	ldr	r2, [r3]
   15078:	cmp	r2, #0
   1507c:	beq	15098 <__assert_fail@plt+0x3808>
   15080:	mov	r2, r3
   15084:	add	r1, r1, #1
   15088:	ldr	r2, [r2, #4]
   1508c:	cmp	r2, #0
   15090:	bne	15084 <__assert_fail@plt+0x37f4>
   15094:	add	lr, lr, #1
   15098:	add	r3, r3, #8
   1509c:	cmp	r3, ip
   150a0:	bcc	15074 <__assert_fail@plt+0x37e4>
   150a4:	ldr	r2, [r0, #12]
   150a8:	cmp	lr, r2
   150ac:	bne	150c4 <__assert_fail@plt+0x3834>
   150b0:	ldr	r2, [r0, #16]
   150b4:	mov	r0, #1
   150b8:	cmp	r1, r2
   150bc:	movne	r0, #0
   150c0:	pop	{fp, pc}
   150c4:	mov	r0, #0
   150c8:	pop	{fp, pc}
   150cc:	nop	{0}
   150d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150d4:	add	fp, sp, #24
   150d8:	sub	sp, sp, #8
   150dc:	mov	r4, r1
   150e0:	mov	r5, r0
   150e4:	bl	14fe8 <__assert_fail@plt+0x3758>
   150e8:	mov	r8, r0
   150ec:	mov	r0, r5
   150f0:	bl	14fd8 <__assert_fail@plt+0x3748>
   150f4:	mov	r7, r0
   150f8:	mov	r0, r5
   150fc:	bl	14fe0 <__assert_fail@plt+0x3750>
   15100:	mov	r6, r0
   15104:	mov	r0, r5
   15108:	bl	14ff0 <__assert_fail@plt+0x3760>
   1510c:	mov	r5, r0
   15110:	movw	r2, #45824	; 0xb300
   15114:	movt	r2, #1
   15118:	mov	r0, r4
   1511c:	mov	r1, #1
   15120:	mov	r3, r8
   15124:	bl	11758 <__fprintf_chk@plt>
   15128:	movw	r2, #45848	; 0xb318
   1512c:	movt	r2, #1
   15130:	mov	r0, r4
   15134:	mov	r1, #1
   15138:	mov	r3, r7
   1513c:	bl	11758 <__fprintf_chk@plt>
   15140:	vldr	d16, [pc, #80]	; 15198 <__assert_fail@plt+0x3908>
   15144:	vmov	s0, r6
   15148:	vmov	s2, r7
   1514c:	vcvt.f64.u32	d17, s0
   15150:	vcvt.f64.u32	d18, s2
   15154:	vmul.f64	d16, d17, d16
   15158:	vdiv.f64	d16, d16, d18
   1515c:	vstr	d16, [sp]
   15160:	movw	r2, #45872	; 0xb330
   15164:	movt	r2, #1
   15168:	mov	r0, r4
   1516c:	mov	r1, #1
   15170:	mov	r3, r6
   15174:	bl	11758 <__fprintf_chk@plt>
   15178:	movw	r2, #45905	; 0xb351
   1517c:	movt	r2, #1
   15180:	mov	r0, r4
   15184:	mov	r1, #1
   15188:	mov	r3, r5
   1518c:	sub	sp, fp, #24
   15190:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15194:	b	11758 <__fprintf_chk@plt>
   15198:	andeq	r0, r0, r0
   1519c:	subsmi	r0, r9, r0
   151a0:	push	{r4, r5, r6, r7, fp, lr}
   151a4:	add	fp, sp, #16
   151a8:	mov	r5, r1
   151ac:	mov	r6, r0
   151b0:	bl	15204 <__assert_fail@plt+0x3974>
   151b4:	mov	r7, r0
   151b8:	ldr	r0, [r0]
   151bc:	mov	r4, #0
   151c0:	cmp	r0, #0
   151c4:	bne	151d0 <__assert_fail@plt+0x3940>
   151c8:	b	151fc <__assert_fail@plt+0x396c>
   151cc:	ldr	r7, [r7, #4]
   151d0:	cmp	r7, #0
   151d4:	beq	151fc <__assert_fail@plt+0x396c>
   151d8:	ldr	r1, [r7]
   151dc:	cmp	r1, r5
   151e0:	beq	151f8 <__assert_fail@plt+0x3968>
   151e4:	ldr	r2, [r6, #28]
   151e8:	mov	r0, r5
   151ec:	blx	r2
   151f0:	cmp	r0, #0
   151f4:	beq	151cc <__assert_fail@plt+0x393c>
   151f8:	ldr	r4, [r7]
   151fc:	mov	r0, r4
   15200:	pop	{r4, r5, r6, r7, fp, pc}
   15204:	push	{r4, sl, fp, lr}
   15208:	add	fp, sp, #8
   1520c:	mov	r2, r1
   15210:	mov	r4, r0
   15214:	ldr	r1, [r0, #8]
   15218:	ldr	r3, [r0, #24]
   1521c:	mov	r0, r2
   15220:	blx	r3
   15224:	ldr	r1, [r4, #8]
   15228:	cmp	r0, r1
   1522c:	ldrcc	r1, [r4]
   15230:	addcc	r0, r1, r0, lsl #3
   15234:	popcc	{r4, sl, fp, pc}
   15238:	bl	11854 <abort@plt>
   1523c:	ldr	r1, [r0, #16]
   15240:	cmp	r1, #0
   15244:	moveq	r1, #0
   15248:	moveq	r0, r1
   1524c:	bxeq	lr
   15250:	ldr	r2, [r0]
   15254:	b	15268 <__assert_fail@plt+0x39d8>
   15258:	ldr	r1, [r2], #8
   1525c:	cmp	r1, #0
   15260:	movne	r0, r1
   15264:	bxne	lr
   15268:	ldr	r1, [r0, #4]
   1526c:	cmp	r2, r1
   15270:	bcc	15258 <__assert_fail@plt+0x39c8>
   15274:	push	{fp, lr}
   15278:	mov	fp, sp
   1527c:	bl	11854 <abort@plt>
   15280:	push	{r4, r5, fp, lr}
   15284:	add	fp, sp, #8
   15288:	mov	r5, r1
   1528c:	mov	r4, r0
   15290:	bl	15204 <__assert_fail@plt+0x3974>
   15294:	mov	r1, r0
   15298:	ldr	r2, [r1]
   1529c:	cmp	r2, r5
   152a0:	bne	152b4 <__assert_fail@plt+0x3a24>
   152a4:	ldr	r2, [r1, #4]
   152a8:	cmp	r2, #0
   152ac:	ldrne	r0, [r2]
   152b0:	popne	{r4, r5, fp, pc}
   152b4:	ldr	r1, [r1, #4]
   152b8:	cmp	r1, #0
   152bc:	bne	15298 <__assert_fail@plt+0x3a08>
   152c0:	add	r1, r0, #8
   152c4:	ldr	r2, [r4, #4]
   152c8:	cmp	r1, r2
   152cc:	movcs	r0, #0
   152d0:	popcs	{r4, r5, fp, pc}
   152d4:	ldr	r0, [r1], #8
   152d8:	cmp	r0, #0
   152dc:	popne	{r4, r5, fp, pc}
   152e0:	b	152c8 <__assert_fail@plt+0x3a38>
   152e4:	push	{r4, sl, fp, lr}
   152e8:	add	fp, sp, #8
   152ec:	mov	ip, r0
   152f0:	ldr	lr, [r0]
   152f4:	ldr	r3, [r0, #4]
   152f8:	mov	r0, #0
   152fc:	cmp	lr, r3
   15300:	bcs	1534c <__assert_fail@plt+0x3abc>
   15304:	mov	r0, #0
   15308:	ldr	r3, [lr]
   1530c:	cmp	r3, #0
   15310:	cmpne	lr, #0
   15314:	beq	1533c <__assert_fail@plt+0x3aac>
   15318:	mov	r3, lr
   1531c:	cmp	r0, r2
   15320:	popcs	{r4, sl, fp, pc}
   15324:	ldr	r4, [r3]
   15328:	str	r4, [r1, r0, lsl #2]
   1532c:	add	r0, r0, #1
   15330:	ldr	r3, [r3, #4]
   15334:	cmp	r3, #0
   15338:	bne	1531c <__assert_fail@plt+0x3a8c>
   1533c:	ldr	r3, [ip, #4]
   15340:	add	lr, lr, #8
   15344:	cmp	lr, r3
   15348:	bcc	15308 <__assert_fail@plt+0x3a78>
   1534c:	pop	{r4, sl, fp, pc}
   15350:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15354:	add	fp, sp, #24
   15358:	mov	r8, r0
   1535c:	ldr	r9, [r0]
   15360:	ldr	r0, [r0, #4]
   15364:	mov	r6, #0
   15368:	cmp	r9, r0
   1536c:	bcs	153cc <__assert_fail@plt+0x3b3c>
   15370:	mov	r4, r2
   15374:	mov	r5, r1
   15378:	mov	r6, #0
   1537c:	b	153ac <__assert_fail@plt+0x3b1c>
   15380:	mov	r7, r9
   15384:	ldr	r0, [r7]
   15388:	mov	r1, r4
   1538c:	blx	r5
   15390:	cmp	r0, #0
   15394:	beq	153cc <__assert_fail@plt+0x3b3c>
   15398:	add	r6, r6, #1
   1539c:	ldr	r7, [r7, #4]
   153a0:	cmp	r7, #0
   153a4:	bne	15384 <__assert_fail@plt+0x3af4>
   153a8:	b	153bc <__assert_fail@plt+0x3b2c>
   153ac:	ldr	r0, [r9]
   153b0:	cmp	r0, #0
   153b4:	cmpne	r9, #0
   153b8:	bne	15380 <__assert_fail@plt+0x3af0>
   153bc:	ldr	r0, [r8, #4]
   153c0:	add	r9, r9, #8
   153c4:	cmp	r9, r0
   153c8:	bcc	153ac <__assert_fail@plt+0x3b1c>
   153cc:	mov	r0, r6
   153d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   153d4:	ldrb	r2, [r0]
   153d8:	cmp	r2, #0
   153dc:	moveq	r0, #0
   153e0:	bxeq	lr
   153e4:	add	r3, r0, #1
   153e8:	mov	r0, #0
   153ec:	rsb	r0, r0, r0, lsl #5
   153f0:	uxtab	r0, r0, r2
   153f4:	udiv	r2, r0, r1
   153f8:	mls	r0, r2, r1, r0
   153fc:	ldrb	r2, [r3], #1
   15400:	cmp	r2, #0
   15404:	bne	153ec <__assert_fail@plt+0x3b5c>
   15408:	bx	lr
   1540c:	movw	r1, #45936	; 0xb370
   15410:	movt	r1, #1
   15414:	vld1.32	{d16-d17}, [r1]!
   15418:	vst1.32	{d16-d17}, [r0]!
   1541c:	ldr	r1, [r1]
   15420:	str	r1, [r0]
   15424:	bx	lr
   15428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1542c:	add	fp, sp, #28
   15430:	sub	sp, sp, #4
   15434:	mov	r7, r1
   15438:	mov	r8, r0
   1543c:	movw	sl, #21800	; 0x5528
   15440:	movt	sl, #1
   15444:	cmp	r3, #0
   15448:	movne	sl, r3
   1544c:	movw	r5, #21768	; 0x5508
   15450:	movt	r5, #1
   15454:	cmp	r2, #0
   15458:	movne	r5, r2
   1545c:	mov	r0, #40	; 0x28
   15460:	bl	1903c <__assert_fail@plt+0x77ac>
   15464:	mov	r9, #0
   15468:	cmp	r0, #0
   1546c:	beq	154fc <__assert_fail@plt+0x3c6c>
   15470:	mov	r4, r0
   15474:	movw	r6, #45936	; 0xb370
   15478:	movt	r6, #1
   1547c:	cmp	r7, #0
   15480:	movne	r6, r7
   15484:	str	r6, [r0, #20]
   15488:	bl	15538 <__assert_fail@plt+0x3ca8>
   1548c:	cmp	r0, #0
   15490:	beq	154f4 <__assert_fail@plt+0x3c64>
   15494:	mov	r0, r8
   15498:	mov	r1, r6
   1549c:	bl	155e4 <__assert_fail@plt+0x3d54>
   154a0:	str	r0, [r4, #8]
   154a4:	cmp	r0, #0
   154a8:	beq	154f4 <__assert_fail@plt+0x3c64>
   154ac:	mov	r1, #8
   154b0:	bl	18fe8 <__assert_fail@plt+0x7758>
   154b4:	str	r0, [r4]
   154b8:	cmp	r0, #0
   154bc:	beq	154f4 <__assert_fail@plt+0x3c64>
   154c0:	ldr	r1, [fp, #8]
   154c4:	mov	r2, #0
   154c8:	str	r2, [r4, #12]
   154cc:	str	r2, [r4, #16]
   154d0:	str	r5, [r4, #24]
   154d4:	str	sl, [r4, #28]
   154d8:	str	r1, [r4, #32]
   154dc:	str	r2, [r4, #36]	; 0x24
   154e0:	ldr	r1, [r4, #8]
   154e4:	add	r0, r0, r1, lsl #3
   154e8:	str	r0, [r4, #4]
   154ec:	mov	r9, r4
   154f0:	b	154fc <__assert_fail@plt+0x3c6c>
   154f4:	mov	r0, r4
   154f8:	bl	19b34 <__assert_fail@plt+0x82a4>
   154fc:	mov	r0, r9
   15500:	sub	sp, fp, #28
   15504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15508:	push	{r4, sl, fp, lr}
   1550c:	add	fp, sp, #8
   15510:	mov	r4, r1
   15514:	mov	r1, #3
   15518:	bl	192c0 <__assert_fail@plt+0x7a30>
   1551c:	udiv	r1, r0, r4
   15520:	mls	r0, r1, r4, r0
   15524:	pop	{r4, sl, fp, pc}
   15528:	sub	r0, r0, r1
   1552c:	clz	r0, r0
   15530:	lsr	r0, r0, #5
   15534:	bx	lr
   15538:	mov	r1, r0
   1553c:	ldr	r3, [r0, #20]
   15540:	mov	r0, #1
   15544:	movw	r2, #45936	; 0xb370
   15548:	movt	r2, #1
   1554c:	cmp	r3, r2
   15550:	beq	155d4 <__assert_fail@plt+0x3d44>
   15554:	vldr	s2, [pc, #124]	; 155d8 <__assert_fail@plt+0x3d48>
   15558:	vldr	s0, [r3, #8]
   1555c:	vcmpe.f32	s0, s2
   15560:	vmrs	APSR_nzcv, fpscr
   15564:	ble	155cc <__assert_fail@plt+0x3d3c>
   15568:	vldr	s4, [pc, #108]	; 155dc <__assert_fail@plt+0x3d4c>
   1556c:	vcmpe.f32	s0, s4
   15570:	vmrs	APSR_nzcv, fpscr
   15574:	bpl	155cc <__assert_fail@plt+0x3d3c>
   15578:	vldr	s4, [pc, #96]	; 155e0 <__assert_fail@plt+0x3d50>
   1557c:	vldr	s6, [r3, #12]
   15580:	vcmpe.f32	s6, s4
   15584:	vmrs	APSR_nzcv, fpscr
   15588:	ble	155cc <__assert_fail@plt+0x3d3c>
   1558c:	vldr	s4, [r3]
   15590:	vcmpe.f32	s4, #0.0
   15594:	vmrs	APSR_nzcv, fpscr
   15598:	blt	155cc <__assert_fail@plt+0x3d3c>
   1559c:	vadd.f32	s2, s4, s2
   155a0:	vcmpe.f32	s2, s0
   155a4:	vmrs	APSR_nzcv, fpscr
   155a8:	bpl	155cc <__assert_fail@plt+0x3d3c>
   155ac:	vldr	s0, [r3, #4]
   155b0:	vmov.f32	s4, #112	; 0x3f800000  1.0
   155b4:	vcmpe.f32	s0, s4
   155b8:	vmrs	APSR_nzcv, fpscr
   155bc:	bhi	155cc <__assert_fail@plt+0x3d3c>
   155c0:	vcmpe.f32	s2, s0
   155c4:	vmrs	APSR_nzcv, fpscr
   155c8:	bxmi	lr
   155cc:	str	r2, [r1, #20]
   155d0:	mov	r0, #0
   155d4:	bx	lr
   155d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   155dc:	svccc	0x00666666
   155e0:	svccc	0x008ccccd
   155e4:	ldrb	r2, [r1, #16]
   155e8:	cmp	r2, #0
   155ec:	bne	1561c <__assert_fail@plt+0x3d8c>
   155f0:	vldr	s0, [r1, #8]
   155f4:	vmov	s2, r0
   155f8:	vcvt.f32.u32	s2, s2
   155fc:	vdiv.f32	s2, s2, s0
   15600:	vcvt.u32.f32	s0, s2
   15604:	vldr	s4, [pc, #44]	; 15638 <__assert_fail@plt+0x3da8>
   15608:	mov	r0, #0
   1560c:	vcmpe.f32	s2, s4
   15610:	vmrs	APSR_nzcv, fpscr
   15614:	bxge	lr
   15618:	vmov	r0, s0
   1561c:	push	{fp, lr}
   15620:	mov	fp, sp
   15624:	bl	15e08 <__assert_fail@plt+0x4578>
   15628:	cmn	r0, #-536870911	; 0xe0000001
   1562c:	movwhi	r0, #0
   15630:	pop	{fp, lr}
   15634:	bx	lr
   15638:	svcmi	0x00800000
   1563c:	push	{r4, r5, r6, r7, fp, lr}
   15640:	add	fp, sp, #16
   15644:	mov	r4, r0
   15648:	ldr	r5, [r0]
   1564c:	ldr	r0, [r0, #4]
   15650:	cmp	r5, r0
   15654:	bcs	156ec <__assert_fail@plt+0x3e5c>
   15658:	mov	r6, #0
   1565c:	ldr	r0, [r5]
   15660:	cmp	r0, #0
   15664:	beq	156dc <__assert_fail@plt+0x3e4c>
   15668:	ldr	r7, [r5, #4]
   1566c:	ldr	r1, [r4, #32]
   15670:	cmp	r1, #0
   15674:	mov	r0, r1
   15678:	movwne	r0, #1
   1567c:	cmp	r7, #0
   15680:	beq	156c4 <__assert_fail@plt+0x3e34>
   15684:	tst	r0, #1
   15688:	beq	15694 <__assert_fail@plt+0x3e04>
   1568c:	ldr	r0, [r7]
   15690:	blx	r1
   15694:	str	r6, [r7]
   15698:	ldr	r2, [r7, #4]
   1569c:	ldr	r0, [r4, #36]	; 0x24
   156a0:	str	r0, [r7, #4]
   156a4:	str	r7, [r4, #36]	; 0x24
   156a8:	ldr	r1, [r4, #32]
   156ac:	cmp	r1, #0
   156b0:	mov	r0, r1
   156b4:	movwne	r0, #1
   156b8:	cmp	r2, #0
   156bc:	mov	r7, r2
   156c0:	bne	15684 <__assert_fail@plt+0x3df4>
   156c4:	cmp	r0, #0
   156c8:	beq	156d4 <__assert_fail@plt+0x3e44>
   156cc:	ldr	r0, [r5]
   156d0:	blx	r1
   156d4:	str	r6, [r5]
   156d8:	str	r6, [r5, #4]
   156dc:	ldr	r0, [r4, #4]
   156e0:	add	r5, r5, #8
   156e4:	cmp	r5, r0
   156e8:	bcc	1565c <__assert_fail@plt+0x3dcc>
   156ec:	mov	r0, #0
   156f0:	str	r0, [r4, #12]
   156f4:	str	r0, [r4, #16]
   156f8:	pop	{r4, r5, r6, r7, fp, pc}
   156fc:	push	{r4, r5, r6, sl, fp, lr}
   15700:	add	fp, sp, #16
   15704:	mov	r4, r0
   15708:	ldr	r0, [r0, #32]
   1570c:	cmp	r0, #0
   15710:	ldrne	r0, [r4, #16]
   15714:	cmpne	r0, #0
   15718:	beq	15770 <__assert_fail@plt+0x3ee0>
   1571c:	ldr	r5, [r4]
   15720:	ldr	r0, [r4, #4]
   15724:	cmp	r5, r0
   15728:	bcc	15740 <__assert_fail@plt+0x3eb0>
   1572c:	b	15770 <__assert_fail@plt+0x3ee0>
   15730:	ldr	r0, [r4, #4]
   15734:	add	r5, r5, #8
   15738:	cmp	r5, r0
   1573c:	bcs	15770 <__assert_fail@plt+0x3ee0>
   15740:	ldr	r0, [r5]
   15744:	cmp	r0, #0
   15748:	cmpne	r5, #0
   1574c:	beq	15730 <__assert_fail@plt+0x3ea0>
   15750:	mov	r6, r5
   15754:	ldr	r0, [r6]
   15758:	ldr	r1, [r4, #32]
   1575c:	blx	r1
   15760:	ldr	r6, [r6, #4]
   15764:	cmp	r6, #0
   15768:	bne	15754 <__assert_fail@plt+0x3ec4>
   1576c:	b	15730 <__assert_fail@plt+0x3ea0>
   15770:	ldr	r5, [r4]
   15774:	ldr	r0, [r4, #4]
   15778:	cmp	r5, r0
   1577c:	bcc	15794 <__assert_fail@plt+0x3f04>
   15780:	b	157b8 <__assert_fail@plt+0x3f28>
   15784:	ldr	r0, [r4, #4]
   15788:	add	r5, r5, #8
   1578c:	cmp	r5, r0
   15790:	bcs	157b8 <__assert_fail@plt+0x3f28>
   15794:	ldr	r0, [r5, #4]
   15798:	cmp	r0, #0
   1579c:	beq	15784 <__assert_fail@plt+0x3ef4>
   157a0:	ldr	r6, [r0, #4]
   157a4:	bl	19b34 <__assert_fail@plt+0x82a4>
   157a8:	cmp	r6, #0
   157ac:	mov	r0, r6
   157b0:	bne	157a0 <__assert_fail@plt+0x3f10>
   157b4:	b	15784 <__assert_fail@plt+0x3ef4>
   157b8:	ldr	r0, [r4, #36]	; 0x24
   157bc:	cmp	r0, #0
   157c0:	beq	157d8 <__assert_fail@plt+0x3f48>
   157c4:	ldr	r5, [r0, #4]
   157c8:	bl	19b34 <__assert_fail@plt+0x82a4>
   157cc:	cmp	r5, #0
   157d0:	mov	r0, r5
   157d4:	bne	157c4 <__assert_fail@plt+0x3f34>
   157d8:	ldr	r0, [r4]
   157dc:	bl	19b34 <__assert_fail@plt+0x82a4>
   157e0:	mov	r0, r4
   157e4:	pop	{r4, r5, r6, sl, fp, lr}
   157e8:	b	19b34 <__assert_fail@plt+0x82a4>
   157ec:	push	{r4, r5, r6, sl, fp, lr}
   157f0:	add	fp, sp, #16
   157f4:	sub	sp, sp, #40	; 0x28
   157f8:	mov	r2, r1
   157fc:	mov	r4, r0
   15800:	ldr	r1, [r0, #20]
   15804:	mov	r0, r2
   15808:	bl	155e4 <__assert_fail@plt+0x3d54>
   1580c:	mov	r5, #0
   15810:	cmp	r0, #0
   15814:	beq	158f0 <__assert_fail@plt+0x4060>
   15818:	mov	r6, r0
   1581c:	ldr	r0, [r4, #8]
   15820:	cmp	r6, r0
   15824:	bne	15830 <__assert_fail@plt+0x3fa0>
   15828:	mov	r5, #1
   1582c:	b	158f0 <__assert_fail@plt+0x4060>
   15830:	mov	r0, r6
   15834:	mov	r1, #8
   15838:	bl	18fe8 <__assert_fail@plt+0x7758>
   1583c:	str	r0, [sp]
   15840:	cmp	r0, #0
   15844:	beq	158f0 <__assert_fail@plt+0x4060>
   15848:	str	r6, [sp, #8]
   1584c:	mov	r0, #0
   15850:	str	r0, [sp, #12]
   15854:	str	r0, [sp, #16]
   15858:	ldr	r0, [sp]
   1585c:	add	r0, r0, r6, lsl #3
   15860:	str	r0, [sp, #4]
   15864:	add	r6, r4, #20
   15868:	ldm	r6, {r0, r1, r2, r3, r6}
   1586c:	add	ip, sp, #20
   15870:	stm	ip, {r0, r1, r2, r3, r6}
   15874:	mov	r0, sp
   15878:	mov	r1, r4
   1587c:	mov	r2, #0
   15880:	bl	15900 <__assert_fail@plt+0x4070>
   15884:	cmp	r0, #0
   15888:	beq	158ac <__assert_fail@plt+0x401c>
   1588c:	ldr	r0, [r4]
   15890:	bl	19b34 <__assert_fail@plt+0x82a4>
   15894:	ldm	sp, {r0, r1, r2, r3}
   15898:	stm	r4, {r0, r1, r2, r3}
   1589c:	ldr	r0, [sp, #36]	; 0x24
   158a0:	str	r0, [r4, #36]	; 0x24
   158a4:	mov	r5, #1
   158a8:	b	158f0 <__assert_fail@plt+0x4060>
   158ac:	ldr	r0, [sp, #36]	; 0x24
   158b0:	str	r0, [r4, #36]	; 0x24
   158b4:	mov	r1, sp
   158b8:	mov	r0, r4
   158bc:	mov	r2, #1
   158c0:	bl	15900 <__assert_fail@plt+0x4070>
   158c4:	cmp	r0, #0
   158c8:	beq	158fc <__assert_fail@plt+0x406c>
   158cc:	mov	r1, sp
   158d0:	mov	r5, #0
   158d4:	mov	r0, r4
   158d8:	mov	r2, #0
   158dc:	bl	15900 <__assert_fail@plt+0x4070>
   158e0:	cmp	r0, #0
   158e4:	beq	158fc <__assert_fail@plt+0x406c>
   158e8:	ldr	r0, [sp]
   158ec:	bl	19b34 <__assert_fail@plt+0x82a4>
   158f0:	mov	r0, r5
   158f4:	sub	sp, fp, #16
   158f8:	pop	{r4, r5, r6, sl, fp, pc}
   158fc:	bl	11854 <abort@plt>
   15900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15904:	add	fp, sp, #28
   15908:	sub	sp, sp, #4
   1590c:	mov	r7, r0
   15910:	ldr	r6, [r1]
   15914:	ldr	r0, [r1, #4]
   15918:	cmp	r6, r0
   1591c:	bcs	15a20 <__assert_fail@plt+0x4190>
   15920:	mov	r9, r2
   15924:	mov	sl, r1
   15928:	ldr	r0, [r6]
   1592c:	cmp	r0, #0
   15930:	beq	15a10 <__assert_fail@plt+0x4180>
   15934:	ldr	r4, [r6, #4]
   15938:	cmp	r4, #0
   1593c:	beq	15998 <__assert_fail@plt+0x4108>
   15940:	ldr	r5, [r4]
   15944:	mov	r0, r7
   15948:	mov	r1, r5
   1594c:	bl	15204 <__assert_fail@plt+0x3974>
   15950:	ldr	r1, [r0]
   15954:	ldr	r8, [r4, #4]
   15958:	cmp	r1, #0
   1595c:	beq	15970 <__assert_fail@plt+0x40e0>
   15960:	ldr	r1, [r0, #4]
   15964:	str	r1, [r4, #4]
   15968:	str	r4, [r0, #4]
   1596c:	b	1598c <__assert_fail@plt+0x40fc>
   15970:	str	r5, [r0]
   15974:	ldr	r0, [r7, #12]
   15978:	add	r0, r0, #1
   1597c:	str	r0, [r7, #12]
   15980:	mov	r0, r7
   15984:	mov	r1, r4
   15988:	bl	15ea8 <__assert_fail@plt+0x4618>
   1598c:	cmp	r8, #0
   15990:	mov	r4, r8
   15994:	bne	15940 <__assert_fail@plt+0x40b0>
   15998:	mov	r0, #0
   1599c:	str	r0, [r6, #4]
   159a0:	cmp	r9, #0
   159a4:	bne	15a10 <__assert_fail@plt+0x4180>
   159a8:	ldr	r4, [r6]
   159ac:	mov	r0, r7
   159b0:	mov	r1, r4
   159b4:	bl	15204 <__assert_fail@plt+0x3974>
   159b8:	mov	r5, r0
   159bc:	ldr	r0, [r0]
   159c0:	cmp	r0, #0
   159c4:	beq	159ec <__assert_fail@plt+0x415c>
   159c8:	mov	r0, r7
   159cc:	bl	15c8c <__assert_fail@plt+0x43fc>
   159d0:	cmp	r0, #0
   159d4:	beq	15a2c <__assert_fail@plt+0x419c>
   159d8:	str	r4, [r0]
   159dc:	ldr	r1, [r5, #4]
   159e0:	str	r1, [r0, #4]
   159e4:	str	r0, [r5, #4]
   159e8:	b	159fc <__assert_fail@plt+0x416c>
   159ec:	str	r4, [r5]
   159f0:	ldr	r0, [r7, #12]
   159f4:	add	r0, r0, #1
   159f8:	str	r0, [r7, #12]
   159fc:	mov	r0, #0
   15a00:	str	r0, [r6]
   15a04:	ldr	r0, [sl, #12]
   15a08:	sub	r0, r0, #1
   15a0c:	str	r0, [sl, #12]
   15a10:	add	r6, r6, #8
   15a14:	ldr	r0, [sl, #4]
   15a18:	cmp	r6, r0
   15a1c:	bcc	15928 <__assert_fail@plt+0x4098>
   15a20:	mov	r0, #1
   15a24:	sub	sp, fp, #28
   15a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a2c:	mov	r0, #0
   15a30:	sub	sp, fp, #28
   15a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a38:	push	{r4, r5, r6, r7, fp, lr}
   15a3c:	add	fp, sp, #16
   15a40:	sub	sp, sp, #8
   15a44:	cmp	r1, #0
   15a48:	beq	15ba8 <__assert_fail@plt+0x4318>
   15a4c:	mov	r7, r2
   15a50:	mov	r5, r1
   15a54:	mov	r4, r0
   15a58:	add	r2, sp, #4
   15a5c:	mov	r6, #0
   15a60:	mov	r3, #0
   15a64:	bl	15bb0 <__assert_fail@plt+0x4320>
   15a68:	cmp	r0, #0
   15a6c:	beq	15a7c <__assert_fail@plt+0x41ec>
   15a70:	cmp	r7, #0
   15a74:	strne	r0, [r7]
   15a78:	b	15b9c <__assert_fail@plt+0x430c>
   15a7c:	vldr	s0, [r4, #8]
   15a80:	vldr	s2, [r4, #12]
   15a84:	ldr	r0, [r4, #20]
   15a88:	vldr	s4, [r0, #8]
   15a8c:	vcvt.f32.u32	s0, s0
   15a90:	vcvt.f32.u32	s2, s2
   15a94:	vmul.f32	s0, s4, s0
   15a98:	vcmpe.f32	s0, s2
   15a9c:	vmrs	APSR_nzcv, fpscr
   15aa0:	bpl	15b34 <__assert_fail@plt+0x42a4>
   15aa4:	mov	r0, r4
   15aa8:	bl	15538 <__assert_fail@plt+0x3ca8>
   15aac:	vldr	s0, [r4, #8]
   15ab0:	vldr	s4, [r4, #12]
   15ab4:	ldr	r0, [r4, #20]
   15ab8:	vcvt.f32.u32	s2, s0
   15abc:	vldr	s0, [r0, #8]
   15ac0:	vcvt.f32.u32	s4, s4
   15ac4:	vmul.f32	s6, s0, s2
   15ac8:	vcmpe.f32	s6, s4
   15acc:	vmrs	APSR_nzcv, fpscr
   15ad0:	bpl	15b34 <__assert_fail@plt+0x42a4>
   15ad4:	vldr	s4, [r0, #12]
   15ad8:	vmul.f32	s2, s4, s2
   15adc:	ldrb	r0, [r0, #16]
   15ae0:	vmul.f32	s0, s0, s2
   15ae4:	mvn	r6, #0
   15ae8:	vldr	s4, [pc, #188]	; 15bac <__assert_fail@plt+0x431c>
   15aec:	cmp	r0, #0
   15af0:	vseleq.f32	s0, s0, s2
   15af4:	vcmpe.f32	s0, s4
   15af8:	vmrs	APSR_nzcv, fpscr
   15afc:	bge	15b9c <__assert_fail@plt+0x430c>
   15b00:	vcvt.u32.f32	s0, s0
   15b04:	vmov	r1, s0
   15b08:	mov	r0, r4
   15b0c:	bl	157ec <__assert_fail@plt+0x3f5c>
   15b10:	cmp	r0, #0
   15b14:	beq	15b9c <__assert_fail@plt+0x430c>
   15b18:	add	r2, sp, #4
   15b1c:	mov	r0, r4
   15b20:	mov	r1, r5
   15b24:	mov	r3, #0
   15b28:	bl	15bb0 <__assert_fail@plt+0x4320>
   15b2c:	cmp	r0, #0
   15b30:	bne	15ba8 <__assert_fail@plt+0x4318>
   15b34:	ldr	r6, [sp, #4]
   15b38:	ldr	r0, [r6]
   15b3c:	cmp	r0, #0
   15b40:	beq	15b74 <__assert_fail@plt+0x42e4>
   15b44:	mov	r0, r4
   15b48:	bl	15c8c <__assert_fail@plt+0x43fc>
   15b4c:	cmp	r0, #0
   15b50:	beq	15b98 <__assert_fail@plt+0x4308>
   15b54:	str	r5, [r0]
   15b58:	ldr	r1, [r6, #4]
   15b5c:	str	r1, [r0, #4]
   15b60:	str	r0, [r6, #4]
   15b64:	ldr	r0, [r4, #16]
   15b68:	add	r0, r0, #1
   15b6c:	str	r0, [r4, #16]
   15b70:	b	15b90 <__assert_fail@plt+0x4300>
   15b74:	str	r5, [r6]
   15b78:	ldr	r0, [r4, #12]
   15b7c:	ldr	r1, [r4, #16]
   15b80:	add	r1, r1, #1
   15b84:	add	r0, r0, #1
   15b88:	str	r0, [r4, #12]
   15b8c:	str	r1, [r4, #16]
   15b90:	mov	r6, #1
   15b94:	b	15b9c <__assert_fail@plt+0x430c>
   15b98:	mvn	r6, #0
   15b9c:	mov	r0, r6
   15ba0:	sub	sp, fp, #16
   15ba4:	pop	{r4, r5, r6, r7, fp, pc}
   15ba8:	bl	11854 <abort@plt>
   15bac:	svcmi	0x00800000
   15bb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15bb4:	add	fp, sp, #24
   15bb8:	mov	r8, r3
   15bbc:	mov	r4, r2
   15bc0:	mov	r7, r1
   15bc4:	mov	r5, r0
   15bc8:	bl	15204 <__assert_fail@plt+0x3974>
   15bcc:	str	r0, [r4]
   15bd0:	ldr	r1, [r0]
   15bd4:	mov	r4, #0
   15bd8:	cmp	r1, #0
   15bdc:	beq	15c84 <__assert_fail@plt+0x43f4>
   15be0:	mov	r6, r0
   15be4:	cmp	r1, r7
   15be8:	beq	15c00 <__assert_fail@plt+0x4370>
   15bec:	ldr	r2, [r5, #28]
   15bf0:	mov	r0, r7
   15bf4:	blx	r2
   15bf8:	cmp	r0, #0
   15bfc:	beq	15c28 <__assert_fail@plt+0x4398>
   15c00:	ldr	r4, [r6]
   15c04:	cmp	r8, #0
   15c08:	beq	15c84 <__assert_fail@plt+0x43f4>
   15c0c:	ldr	r1, [r6, #4]
   15c10:	cmp	r1, #0
   15c14:	beq	15c7c <__assert_fail@plt+0x43ec>
   15c18:	ldm	r1, {r0, r2}
   15c1c:	stm	r6, {r0, r2}
   15c20:	b	15c6c <__assert_fail@plt+0x43dc>
   15c24:	ldr	r6, [r6]
   15c28:	ldr	r0, [r6, #4]!
   15c2c:	cmp	r0, #0
   15c30:	beq	15c84 <__assert_fail@plt+0x43f4>
   15c34:	ldr	r1, [r0]
   15c38:	cmp	r1, r7
   15c3c:	beq	15c54 <__assert_fail@plt+0x43c4>
   15c40:	ldr	r2, [r5, #28]
   15c44:	mov	r0, r7
   15c48:	blx	r2
   15c4c:	cmp	r0, #0
   15c50:	beq	15c24 <__assert_fail@plt+0x4394>
   15c54:	ldr	r1, [r6]
   15c58:	ldr	r4, [r1]
   15c5c:	cmp	r8, #0
   15c60:	beq	15c84 <__assert_fail@plt+0x43f4>
   15c64:	ldr	r0, [r1, #4]
   15c68:	str	r0, [r6]
   15c6c:	mov	r0, r5
   15c70:	bl	15ea8 <__assert_fail@plt+0x4618>
   15c74:	mov	r0, r4
   15c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c7c:	mov	r0, #0
   15c80:	str	r0, [r6]
   15c84:	mov	r0, r4
   15c88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c8c:	mov	r1, r0
   15c90:	ldr	r0, [r0, #36]	; 0x24
   15c94:	cmp	r0, #0
   15c98:	ldrne	r2, [r0, #4]
   15c9c:	strne	r2, [r1, #36]	; 0x24
   15ca0:	bxne	lr
   15ca4:	push	{fp, lr}
   15ca8:	mov	fp, sp
   15cac:	mov	r0, #8
   15cb0:	bl	1903c <__assert_fail@plt+0x77ac>
   15cb4:	pop	{fp, pc}
   15cb8:	push	{r4, sl, fp, lr}
   15cbc:	add	fp, sp, #8
   15cc0:	sub	sp, sp, #8
   15cc4:	mov	r4, r1
   15cc8:	add	r2, sp, #4
   15ccc:	bl	15a38 <__assert_fail@plt+0x41a8>
   15cd0:	cmn	r0, #1
   15cd4:	beq	15ce8 <__assert_fail@plt+0x4458>
   15cd8:	ldr	r1, [sp, #4]
   15cdc:	cmp	r0, #0
   15ce0:	moveq	r4, r1
   15ce4:	b	15cec <__assert_fail@plt+0x445c>
   15ce8:	mov	r4, #0
   15cec:	mov	r0, r4
   15cf0:	sub	sp, fp, #8
   15cf4:	pop	{r4, sl, fp, pc}
   15cf8:	push	{r4, r5, r6, sl, fp, lr}
   15cfc:	add	fp, sp, #16
   15d00:	sub	sp, sp, #8
   15d04:	mov	r4, r0
   15d08:	add	r2, sp, #4
   15d0c:	mov	r3, #1
   15d10:	bl	15bb0 <__assert_fail@plt+0x4320>
   15d14:	mov	r5, r0
   15d18:	cmp	r0, #0
   15d1c:	beq	15df8 <__assert_fail@plt+0x4568>
   15d20:	ldr	r0, [r4, #16]
   15d24:	sub	r0, r0, #1
   15d28:	str	r0, [r4, #16]
   15d2c:	ldr	r0, [sp, #4]
   15d30:	ldr	r0, [r0]
   15d34:	cmp	r0, #0
   15d38:	bne	15df8 <__assert_fail@plt+0x4568>
   15d3c:	ldr	r0, [r4, #12]
   15d40:	sub	r0, r0, #1
   15d44:	vldr	s0, [r4, #8]
   15d48:	str	r0, [r4, #12]
   15d4c:	ldr	r1, [r4, #20]
   15d50:	vldr	s2, [r1]
   15d54:	vcvt.f32.u32	s0, s0
   15d58:	vmov	s4, r0
   15d5c:	vcvt.f32.u32	s4, s4
   15d60:	vmul.f32	s0, s2, s0
   15d64:	vcmpe.f32	s0, s4
   15d68:	vmrs	APSR_nzcv, fpscr
   15d6c:	ble	15df8 <__assert_fail@plt+0x4568>
   15d70:	mov	r0, r4
   15d74:	bl	15538 <__assert_fail@plt+0x3ca8>
   15d78:	vldr	s0, [r4, #8]
   15d7c:	vldr	s2, [r4, #12]
   15d80:	ldr	r0, [r4, #20]
   15d84:	vcvt.f32.u32	s0, s0
   15d88:	vldr	s4, [r0]
   15d8c:	vcvt.f32.u32	s2, s2
   15d90:	vmul.f32	s4, s4, s0
   15d94:	vcmpe.f32	s4, s2
   15d98:	vmrs	APSR_nzcv, fpscr
   15d9c:	ble	15df8 <__assert_fail@plt+0x4568>
   15da0:	vldr	s2, [r0, #4]
   15da4:	ldrb	r1, [r0, #16]
   15da8:	vmul.f32	s0, s2, s0
   15dac:	cmp	r1, #0
   15db0:	vldreq	s2, [r0, #8]
   15db4:	vmuleq.f32	s0, s0, s2
   15db8:	vcvt.u32.f32	s0, s0
   15dbc:	vmov	r1, s0
   15dc0:	mov	r0, r4
   15dc4:	bl	157ec <__assert_fail@plt+0x3f5c>
   15dc8:	cmp	r0, #0
   15dcc:	bne	15df8 <__assert_fail@plt+0x4568>
   15dd0:	ldr	r0, [r4, #36]	; 0x24
   15dd4:	cmp	r0, #0
   15dd8:	beq	15df0 <__assert_fail@plt+0x4560>
   15ddc:	ldr	r6, [r0, #4]
   15de0:	bl	19b34 <__assert_fail@plt+0x82a4>
   15de4:	cmp	r6, #0
   15de8:	mov	r0, r6
   15dec:	bne	15ddc <__assert_fail@plt+0x454c>
   15df0:	mov	r0, #0
   15df4:	str	r0, [r4, #36]	; 0x24
   15df8:	mov	r0, r5
   15dfc:	sub	sp, fp, #16
   15e00:	pop	{r4, r5, r6, sl, fp, pc}
   15e04:	b	15cf8 <__assert_fail@plt+0x4468>
   15e08:	push	{r4, r5, fp, lr}
   15e0c:	add	fp, sp, #8
   15e10:	cmp	r0, #10
   15e14:	movls	r0, #10
   15e18:	orr	r5, r0, #1
   15e1c:	mvn	r4, #0
   15e20:	cmn	r5, #1
   15e24:	bne	15e3c <__assert_fail@plt+0x45ac>
   15e28:	mov	r0, r4
   15e2c:	pop	{r4, r5, fp, pc}
   15e30:	add	r5, r5, #2
   15e34:	cmn	r5, #1
   15e38:	beq	15e28 <__assert_fail@plt+0x4598>
   15e3c:	mov	r0, r5
   15e40:	bl	15e58 <__assert_fail@plt+0x45c8>
   15e44:	cmp	r0, #0
   15e48:	beq	15e30 <__assert_fail@plt+0x45a0>
   15e4c:	mov	r4, r5
   15e50:	mov	r0, r4
   15e54:	pop	{r4, r5, fp, pc}
   15e58:	mov	ip, #3
   15e5c:	cmp	r0, #10
   15e60:	bcc	15e94 <__assert_fail@plt+0x4604>
   15e64:	mov	ip, #3
   15e68:	mov	r2, #9
   15e6c:	mov	r3, #16
   15e70:	udiv	r1, r0, ip
   15e74:	mls	r1, r1, ip, r0
   15e78:	cmp	r1, #0
   15e7c:	beq	15e94 <__assert_fail@plt+0x4604>
   15e80:	add	r2, r3, r2
   15e84:	add	r3, r3, #8
   15e88:	add	ip, ip, #2
   15e8c:	cmp	r2, r0
   15e90:	bcc	15e70 <__assert_fail@plt+0x45e0>
   15e94:	udiv	r1, r0, ip
   15e98:	mls	r0, r1, ip, r0
   15e9c:	cmp	r0, #0
   15ea0:	movwne	r0, #1
   15ea4:	bx	lr
   15ea8:	mov	r2, #0
   15eac:	str	r2, [r1]
   15eb0:	ldr	r2, [r0, #36]	; 0x24
   15eb4:	str	r2, [r1, #4]
   15eb8:	str	r1, [r0, #36]	; 0x24
   15ebc:	bx	lr
   15ec0:	mov	r2, #0
   15ec4:	mov	r3, #1
   15ec8:	strb	r3, [r0, #28]
   15ecc:	str	r2, [r0, #20]
   15ed0:	str	r2, [r0, #24]
   15ed4:	str	r1, [r0, r2, lsl #2]
   15ed8:	add	r2, r2, #1
   15edc:	cmp	r2, #4
   15ee0:	bne	15ed4 <__assert_fail@plt+0x4644>
   15ee4:	str	r1, [r0, #16]
   15ee8:	bx	lr
   15eec:	ldrb	r0, [r0, #28]
   15ef0:	bx	lr
   15ef4:	ldr	r2, [r0, #20]
   15ef8:	ldrb	r3, [r0, #28]
   15efc:	eor	r3, r3, #1
   15f00:	add	r2, r2, r3
   15f04:	and	r2, r2, #3
   15f08:	ldr	ip, [r0, r2, lsl #2]
   15f0c:	str	r1, [r0, r2, lsl #2]
   15f10:	str	r2, [r0, #20]
   15f14:	ldr	r1, [r0, #24]
   15f18:	cmp	r2, r1
   15f1c:	addeq	r1, r1, r3
   15f20:	andeq	r1, r1, #3
   15f24:	streq	r1, [r0, #24]
   15f28:	mov	r1, #0
   15f2c:	strb	r1, [r0, #28]
   15f30:	mov	r0, ip
   15f34:	bx	lr
   15f38:	push	{r4, sl, fp, lr}
   15f3c:	add	fp, sp, #8
   15f40:	mov	r4, r0
   15f44:	bl	15eec <__assert_fail@plt+0x465c>
   15f48:	cmp	r0, #0
   15f4c:	bne	15f88 <__assert_fail@plt+0x46f8>
   15f50:	ldr	r1, [r4, #16]
   15f54:	ldr	r2, [r4, #20]
   15f58:	ldr	r0, [r4, r2, lsl #2]
   15f5c:	str	r1, [r4, r2, lsl #2]
   15f60:	ldr	r1, [r4, #20]
   15f64:	ldr	r2, [r4, #24]
   15f68:	cmp	r1, r2
   15f6c:	moveq	r1, #1
   15f70:	strbeq	r1, [r4, #28]
   15f74:	popeq	{r4, sl, fp, pc}
   15f78:	sub	r1, r1, #1
   15f7c:	and	r1, r1, #3
   15f80:	str	r1, [r4, #20]
   15f84:	pop	{r4, sl, fp, pc}
   15f88:	bl	11854 <abort@plt>
   15f8c:	sub	sp, sp, #4
   15f90:	push	{fp, lr}
   15f94:	mov	fp, sp
   15f98:	sub	sp, sp, #4
   15f9c:	str	r3, [fp, #8]
   15fa0:	mov	r3, #0
   15fa4:	tst	r2, #64	; 0x40
   15fa8:	addne	r3, fp, #8
   15fac:	addne	r3, r3, #4
   15fb0:	strne	r3, [sp]
   15fb4:	ldrne	r3, [fp, #8]
   15fb8:	bl	116f8 <openat64@plt>
   15fbc:	bl	18670 <__assert_fail@plt+0x6de0>
   15fc0:	mov	sp, fp
   15fc4:	pop	{fp, lr}
   15fc8:	add	sp, sp, #4
   15fcc:	bx	lr
   15fd0:	push	{r4, r5, r6, sl, fp, lr}
   15fd4:	add	fp, sp, #16
   15fd8:	mov	r4, r3
   15fdc:	orr	r2, r2, #18688	; 0x4900
   15fe0:	orr	r2, r2, #524288	; 0x80000
   15fe4:	bl	15f8c <__assert_fail@plt+0x46fc>
   15fe8:	mov	r5, r0
   15fec:	mov	r0, #0
   15ff0:	cmp	r5, #0
   15ff4:	poplt	{r4, r5, r6, sl, fp, pc}
   15ff8:	mov	r0, r5
   15ffc:	bl	117dc <fdopendir@plt>
   16000:	cmp	r0, #0
   16004:	strne	r5, [r4]
   16008:	popne	{r4, r5, r6, sl, fp, pc}
   1600c:	bl	11710 <__errno_location@plt>
   16010:	mov	r4, r0
   16014:	ldr	r6, [r0]
   16018:	mov	r0, r5
   1601c:	bl	11860 <close@plt>
   16020:	str	r6, [r4]
   16024:	mov	r0, #0
   16028:	pop	{r4, r5, r6, sl, fp, pc}
   1602c:	push	{r4, r5, fp, lr}
   16030:	add	fp, sp, #8
   16034:	cmp	r0, #0
   16038:	beq	160cc <__assert_fail@plt+0x483c>
   1603c:	mov	r4, r0
   16040:	mov	r1, #47	; 0x2f
   16044:	bl	117b8 <strrchr@plt>
   16048:	cmp	r0, #0
   1604c:	mov	r5, r4
   16050:	addne	r5, r0, #1
   16054:	sub	r0, r5, r4
   16058:	cmp	r0, #7
   1605c:	blt	160b0 <__assert_fail@plt+0x4820>
   16060:	sub	r0, r5, #7
   16064:	movw	r1, #46012	; 0xb3bc
   16068:	movt	r1, #1
   1606c:	mov	r2, #7
   16070:	bl	11848 <strncmp@plt>
   16074:	cmp	r0, #0
   16078:	bne	160b0 <__assert_fail@plt+0x4820>
   1607c:	movw	r1, #46020	; 0xb3c4
   16080:	movt	r1, #1
   16084:	mov	r0, r5
   16088:	mov	r2, #3
   1608c:	bl	11848 <strncmp@plt>
   16090:	cmp	r0, #0
   16094:	beq	160a0 <__assert_fail@plt+0x4810>
   16098:	mov	r4, r5
   1609c:	b	160b0 <__assert_fail@plt+0x4820>
   160a0:	add	r4, r5, #3
   160a4:	movw	r0, #49584	; 0xc1b0
   160a8:	movt	r0, #2
   160ac:	str	r4, [r0]
   160b0:	movw	r0, #49588	; 0xc1b4
   160b4:	movt	r0, #2
   160b8:	str	r4, [r0]
   160bc:	movw	r0, #49676	; 0xc20c
   160c0:	movt	r0, #2
   160c4:	str	r4, [r0]
   160c8:	pop	{r4, r5, fp, pc}
   160cc:	movw	r0, #49600	; 0xc1c0
   160d0:	movt	r0, #2
   160d4:	ldr	r3, [r0]
   160d8:	movw	r0, #45956	; 0xb384
   160dc:	movt	r0, #1
   160e0:	mov	r1, #55	; 0x37
   160e4:	mov	r2, #1
   160e8:	bl	115e4 <fwrite@plt>
   160ec:	bl	11854 <abort@plt>
   160f0:	push	{r4, r5, r6, sl, fp, lr}
   160f4:	add	fp, sp, #16
   160f8:	mov	r4, r0
   160fc:	movw	r0, #49680	; 0xc210
   16100:	movt	r0, #2
   16104:	cmp	r4, #0
   16108:	moveq	r4, r0
   1610c:	bl	11710 <__errno_location@plt>
   16110:	mov	r5, r0
   16114:	ldr	r6, [r0]
   16118:	mov	r0, r4
   1611c:	mov	r1, #48	; 0x30
   16120:	bl	18e6c <__assert_fail@plt+0x75dc>
   16124:	str	r6, [r5]
   16128:	pop	{r4, r5, r6, sl, fp, pc}
   1612c:	movw	r1, #49680	; 0xc210
   16130:	movt	r1, #2
   16134:	cmp	r0, #0
   16138:	movne	r1, r0
   1613c:	ldr	r0, [r1]
   16140:	bx	lr
   16144:	movw	r2, #49680	; 0xc210
   16148:	movt	r2, #2
   1614c:	cmp	r0, #0
   16150:	movne	r2, r0
   16154:	str	r1, [r2]
   16158:	bx	lr
   1615c:	movw	r3, #49680	; 0xc210
   16160:	movt	r3, #2
   16164:	cmp	r0, #0
   16168:	movne	r3, r0
   1616c:	ubfx	r0, r1, #5, #3
   16170:	add	r0, r3, r0, lsl #2
   16174:	ldr	r3, [r0, #8]
   16178:	and	r1, r1, #31
   1617c:	eor	r2, r2, r3, lsr r1
   16180:	and	r2, r2, #1
   16184:	eor	r2, r3, r2, lsl r1
   16188:	str	r2, [r0, #8]
   1618c:	mov	r0, #1
   16190:	and	r0, r0, r3, lsr r1
   16194:	bx	lr
   16198:	movw	r2, #49680	; 0xc210
   1619c:	movt	r2, #2
   161a0:	cmp	r0, #0
   161a4:	movne	r2, r0
   161a8:	ldr	r0, [r2, #4]
   161ac:	str	r1, [r2, #4]
   161b0:	bx	lr
   161b4:	movw	r3, #49680	; 0xc210
   161b8:	movt	r3, #2
   161bc:	cmp	r0, #0
   161c0:	movne	r3, r0
   161c4:	mov	r0, #10
   161c8:	str	r0, [r3]
   161cc:	cmp	r1, #0
   161d0:	cmpne	r2, #0
   161d4:	bne	161e4 <__assert_fail@plt+0x4954>
   161d8:	push	{fp, lr}
   161dc:	mov	fp, sp
   161e0:	bl	11854 <abort@plt>
   161e4:	str	r1, [r3, #40]	; 0x28
   161e8:	str	r2, [r3, #44]	; 0x2c
   161ec:	bx	lr
   161f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161f4:	add	fp, sp, #28
   161f8:	sub	sp, sp, #20
   161fc:	mov	r8, r3
   16200:	mov	r9, r2
   16204:	mov	sl, r1
   16208:	mov	r7, r0
   1620c:	ldr	r0, [fp, #8]
   16210:	movw	r5, #49680	; 0xc210
   16214:	movt	r5, #2
   16218:	cmp	r0, #0
   1621c:	movne	r5, r0
   16220:	bl	11710 <__errno_location@plt>
   16224:	mov	r4, r0
   16228:	ldm	r5, {r0, r1}
   1622c:	ldr	r2, [r5, #40]	; 0x28
   16230:	ldr	r3, [r5, #44]	; 0x2c
   16234:	ldr	r6, [r4]
   16238:	add	r5, r5, #8
   1623c:	stm	sp, {r0, r1, r5}
   16240:	str	r2, [sp, #12]
   16244:	str	r3, [sp, #16]
   16248:	mov	r0, r7
   1624c:	mov	r1, sl
   16250:	mov	r2, r9
   16254:	mov	r3, r8
   16258:	bl	16268 <__assert_fail@plt+0x49d8>
   1625c:	str	r6, [r4]
   16260:	sub	sp, fp, #28
   16264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1626c:	add	fp, sp, #28
   16270:	sub	sp, sp, #156	; 0x9c
   16274:	mov	r9, r3
   16278:	str	r2, [fp, #-84]	; 0xffffffac
   1627c:	mov	r6, r1
   16280:	mov	r7, r0
   16284:	ldr	r0, [fp, #12]
   16288:	and	r1, r0, #4
   1628c:	str	r1, [sp, #32]
   16290:	and	r1, r0, #1
   16294:	str	r1, [sp, #36]	; 0x24
   16298:	ubfx	sl, r0, #1, #1
   1629c:	bl	115fc <__ctype_get_mb_cur_max@plt>
   162a0:	str	r0, [sp, #40]	; 0x28
   162a4:	ldr	r0, [fp, #24]
   162a8:	str	r0, [sp, #76]	; 0x4c
   162ac:	ldr	r0, [fp, #20]
   162b0:	str	r0, [sp, #68]	; 0x44
   162b4:	ldr	r0, [fp, #8]
   162b8:	str	r0, [fp, #-60]	; 0xffffffc4
   162bc:	mov	r0, #0
   162c0:	str	r0, [sp, #72]	; 0x48
   162c4:	mov	r0, #0
   162c8:	str	r0, [sp, #92]	; 0x5c
   162cc:	mov	r0, #0
   162d0:	str	r0, [fp, #-72]	; 0xffffffb8
   162d4:	mov	r0, #0
   162d8:	mov	r1, #0
   162dc:	str	r1, [fp, #-56]	; 0xffffffc8
   162e0:	mov	r1, #0
   162e4:	str	r1, [sp, #56]	; 0x38
   162e8:	mov	r5, #1
   162ec:	str	r7, [sp, #80]	; 0x50
   162f0:	mov	r4, r6
   162f4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   162f8:	cmp	r6, #10
   162fc:	bhi	17264 <__assert_fail@plt+0x59d4>
   16300:	add	r1, pc, #20
   16304:	mov	r8, #0
   16308:	mov	r2, #1
   1630c:	mov	r3, #0
   16310:	ldr	ip, [fp, #-84]	; 0xffffffac
   16314:	mov	lr, r9
   16318:	ldr	pc, [r1, r6, lsl #2]
   1631c:	strdeq	r6, [r1], -r4
   16320:	andeq	r6, r1, r4, lsr #8
   16324:	andeq	r6, r1, r4, ror #7
   16328:	ldrdeq	r6, [r1], -ip
   1632c:	andeq	r6, r1, r8, lsl r4
   16330:	andeq	r6, r1, r8, ror r4
   16334:	andeq	r6, r1, r4, lsl #8
   16338:	ldrdeq	r6, [r1], -r4
   1633c:	andeq	r6, r1, r8, asr #6
   16340:	andeq	r6, r1, r8, asr #6
   16344:	andeq	r6, r1, r0, ror r3
   16348:	movw	r0, #46102	; 0xb416
   1634c:	movt	r0, #1
   16350:	mov	r1, r6
   16354:	bl	17870 <__assert_fail@plt+0x5fe0>
   16358:	str	r0, [sp, #68]	; 0x44
   1635c:	movw	r0, #47449	; 0xb959
   16360:	movt	r0, #1
   16364:	mov	r1, r6
   16368:	bl	17870 <__assert_fail@plt+0x5fe0>
   1636c:	str	r0, [sp, #76]	; 0x4c
   16370:	mov	r8, #0
   16374:	tst	sl, #1
   16378:	bne	163b0 <__assert_fail@plt+0x4b20>
   1637c:	ldr	r0, [sp, #68]	; 0x44
   16380:	ldrb	r0, [r0]
   16384:	cmp	r0, #0
   16388:	beq	163b0 <__assert_fail@plt+0x4b20>
   1638c:	ldr	r1, [sp, #68]	; 0x44
   16390:	add	r1, r1, #1
   16394:	mov	r8, #0
   16398:	cmp	r8, r4
   1639c:	strbcc	r0, [r7, r8]
   163a0:	ldrb	r0, [r1, r8]
   163a4:	add	r8, r8, #1
   163a8:	cmp	r0, #0
   163ac:	bne	16398 <__assert_fail@plt+0x4b08>
   163b0:	ldr	r6, [sp, #76]	; 0x4c
   163b4:	mov	r0, r6
   163b8:	bl	116ec <strlen@plt>
   163bc:	str	r0, [fp, #-72]	; 0xffffffb8
   163c0:	str	r6, [sp, #92]	; 0x5c
   163c4:	mov	r2, #1
   163c8:	mov	r3, sl
   163cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   163d0:	mov	lr, r9
   163d4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   163d8:	b	164d4 <__assert_fail@plt+0x4c44>
   163dc:	mov	r0, #1
   163e0:	b	16424 <__assert_fail@plt+0x4b94>
   163e4:	tst	sl, #1
   163e8:	bne	16424 <__assert_fail@plt+0x4b94>
   163ec:	mov	r2, r0
   163f0:	b	1644c <__assert_fail@plt+0x4bbc>
   163f4:	mov	r6, #0
   163f8:	mov	r8, #0
   163fc:	mov	r2, r0
   16400:	b	164d0 <__assert_fail@plt+0x4c40>
   16404:	mov	r0, #1
   16408:	str	r0, [fp, #-72]	; 0xffffffb8
   1640c:	mov	r8, #0
   16410:	mov	r6, #5
   16414:	b	16490 <__assert_fail@plt+0x4c00>
   16418:	mov	r2, #1
   1641c:	tst	sl, #1
   16420:	beq	1644c <__assert_fail@plt+0x4bbc>
   16424:	mov	r1, #1
   16428:	str	r1, [fp, #-72]	; 0xffffffb8
   1642c:	mov	r8, #0
   16430:	mov	r6, #2
   16434:	movw	r1, #47449	; 0xb959
   16438:	movt	r1, #1
   1643c:	str	r1, [sp, #92]	; 0x5c
   16440:	mov	r2, r0
   16444:	mov	r3, #1
   16448:	b	164d4 <__assert_fail@plt+0x4c44>
   1644c:	mov	r8, #1
   16450:	mov	r6, #2
   16454:	cmp	r4, #0
   16458:	movne	r0, #39	; 0x27
   1645c:	strbne	r0, [r7]
   16460:	movw	r0, #47449	; 0xb959
   16464:	movt	r0, #1
   16468:	str	r0, [sp, #92]	; 0x5c
   1646c:	mov	r0, #1
   16470:	str	r0, [fp, #-72]	; 0xffffffb8
   16474:	b	164d0 <__assert_fail@plt+0x4c40>
   16478:	mov	r6, #5
   1647c:	tst	sl, #1
   16480:	beq	164a8 <__assert_fail@plt+0x4c18>
   16484:	mov	r0, #1
   16488:	str	r0, [fp, #-72]	; 0xffffffb8
   1648c:	mov	r8, #0
   16490:	movw	r0, #46100	; 0xb414
   16494:	movt	r0, #1
   16498:	str	r0, [sp, #92]	; 0x5c
   1649c:	mov	r2, #1
   164a0:	mov	r3, #1
   164a4:	b	164d4 <__assert_fail@plt+0x4c44>
   164a8:	cmp	r4, #0
   164ac:	movne	r0, #34	; 0x22
   164b0:	strbne	r0, [r7]
   164b4:	mov	r8, #1
   164b8:	movw	r0, #46100	; 0xb414
   164bc:	movt	r0, #1
   164c0:	str	r0, [sp, #92]	; 0x5c
   164c4:	mov	r0, #1
   164c8:	str	r0, [fp, #-72]	; 0xffffffb8
   164cc:	mov	r2, #1
   164d0:	mov	r3, #0
   164d4:	ldr	r0, [fp, #16]
   164d8:	cmp	r0, #0
   164dc:	movwne	r0, #1
   164e0:	and	r0, r0, r3
   164e4:	str	r0, [fp, #-88]	; 0xffffffa8
   164e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   164ec:	cmp	r0, #0
   164f0:	movwne	r0, #1
   164f4:	and	r1, r0, r3
   164f8:	and	r1, r2, r1
   164fc:	str	r1, [sp, #48]	; 0x30
   16500:	str	r6, [fp, #-60]	; 0xffffffc4
   16504:	subs	r6, r6, #2
   16508:	clz	r1, r6
   1650c:	lsr	r1, r1, #5
   16510:	and	r1, r1, r3
   16514:	str	r1, [sp, #60]	; 0x3c
   16518:	str	r6, [fp, #-80]	; 0xffffffb0
   1651c:	mov	r1, r6
   16520:	movwne	r1, #1
   16524:	str	r3, [fp, #-76]	; 0xffffffb4
   16528:	eor	r3, r3, #1
   1652c:	str	r3, [sp, #88]	; 0x58
   16530:	orr	r3, r1, r3
   16534:	str	r3, [sp, #64]	; 0x40
   16538:	and	r1, r1, r2
   1653c:	str	r1, [fp, #-68]	; 0xffffffbc
   16540:	and	r0, r0, r1
   16544:	str	r0, [fp, #-64]	; 0xffffffc0
   16548:	str	r2, [sp, #84]	; 0x54
   1654c:	eor	r0, r2, #1
   16550:	str	r0, [sp, #52]	; 0x34
   16554:	mov	r6, #0
   16558:	cmn	lr, #1
   1655c:	beq	1656c <__assert_fail@plt+0x4cdc>
   16560:	cmp	r6, lr
   16564:	bne	16578 <__assert_fail@plt+0x4ce8>
   16568:	b	170e4 <__assert_fail@plt+0x5854>
   1656c:	ldrb	r0, [ip, r6]
   16570:	cmp	r0, #0
   16574:	beq	170e4 <__assert_fail@plt+0x5854>
   16578:	str	r5, [fp, #-48]	; 0xffffffd0
   1657c:	mov	sl, #0
   16580:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16584:	cmp	r0, #0
   16588:	beq	165bc <__assert_fail@plt+0x4d2c>
   1658c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16590:	add	r5, r6, r0
   16594:	cmp	r0, #2
   16598:	bcc	165b4 <__assert_fail@plt+0x4d24>
   1659c:	cmn	lr, #1
   165a0:	bne	165b4 <__assert_fail@plt+0x4d24>
   165a4:	mov	r0, ip
   165a8:	bl	116ec <strlen@plt>
   165ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   165b0:	mov	lr, r0
   165b4:	cmp	r5, lr
   165b8:	bls	165c8 <__assert_fail@plt+0x4d38>
   165bc:	mov	r0, #0
   165c0:	str	r0, [fp, #-52]	; 0xffffffcc
   165c4:	b	16614 <__assert_fail@plt+0x4d84>
   165c8:	mov	r5, r4
   165cc:	mov	r4, lr
   165d0:	add	r0, ip, r6
   165d4:	ldr	r1, [sp, #92]	; 0x5c
   165d8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   165dc:	bl	11560 <memcmp@plt>
   165e0:	cmp	r0, #0
   165e4:	mov	r1, r0
   165e8:	movwne	r1, #1
   165ec:	ldr	r2, [sp, #88]	; 0x58
   165f0:	orr	r1, r1, r2
   165f4:	tst	r1, #1
   165f8:	beq	171a8 <__assert_fail@plt+0x5918>
   165fc:	clz	r0, r0
   16600:	lsr	r0, r0, #5
   16604:	str	r0, [fp, #-52]	; 0xffffffcc
   16608:	ldr	ip, [fp, #-84]	; 0xffffffac
   1660c:	mov	lr, r4
   16610:	mov	r4, r5
   16614:	ldrb	r5, [ip, r6]
   16618:	cmp	r5, #126	; 0x7e
   1661c:	bhi	169d8 <__assert_fail@plt+0x5148>
   16620:	mov	r9, #1
   16624:	mov	r2, #110	; 0x6e
   16628:	mov	r0, #97	; 0x61
   1662c:	add	r3, pc, #4
   16630:	mov	r1, #0
   16634:	ldr	pc, [r3, r5, lsl #2]
   16638:	ldrdeq	r6, [r1], -r0
   1663c:	ldrdeq	r6, [r1], -r8
   16640:	ldrdeq	r6, [r1], -r8
   16644:	ldrdeq	r6, [r1], -r8
   16648:	ldrdeq	r6, [r1], -r8
   1664c:	ldrdeq	r6, [r1], -r8
   16650:	ldrdeq	r6, [r1], -r8
   16654:	muleq	r1, ip, sl
   16658:			; <UNDEFINED> instruction: 0x000168b0
   1665c:	andeq	r6, r1, r8, lsr #17
   16660:			; <UNDEFINED> instruction: 0x000168bc
   16664:	andeq	r6, r1, r0, asr #18
   16668:	andeq	r6, r1, r0, lsr #17
   1666c:			; <UNDEFINED> instruction: 0x000168b8
   16670:	ldrdeq	r6, [r1], -r8
   16674:	ldrdeq	r6, [r1], -r8
   16678:	ldrdeq	r6, [r1], -r8
   1667c:	ldrdeq	r6, [r1], -r8
   16680:	ldrdeq	r6, [r1], -r8
   16684:	ldrdeq	r6, [r1], -r8
   16688:	ldrdeq	r6, [r1], -r8
   1668c:	ldrdeq	r6, [r1], -r8
   16690:	ldrdeq	r6, [r1], -r8
   16694:	ldrdeq	r6, [r1], -r8
   16698:	ldrdeq	r6, [r1], -r8
   1669c:	ldrdeq	r6, [r1], -r8
   166a0:	ldrdeq	r6, [r1], -r8
   166a4:	ldrdeq	r6, [r1], -r8
   166a8:	ldrdeq	r6, [r1], -r8
   166ac:	ldrdeq	r6, [r1], -r8
   166b0:	ldrdeq	r6, [r1], -r8
   166b4:	ldrdeq	r6, [r1], -r8
   166b8:	andeq	r6, r1, ip, asr #20
   166bc:	andeq	r6, r1, r0, asr sl
   166c0:	andeq	r6, r1, r0, asr sl
   166c4:	andeq	r6, r1, r8, asr #16
   166c8:	andeq	r6, r1, r0, asr sl
   166cc:	andeq	r6, r1, r4, lsr r8
   166d0:	andeq	r6, r1, r0, asr sl
   166d4:	andeq	r6, r1, r8, asr #18
   166d8:	andeq	r6, r1, r0, asr sl
   166dc:	andeq	r6, r1, r0, asr sl
   166e0:	andeq	r6, r1, r0, asr sl
   166e4:	andeq	r6, r1, r4, lsr r8
   166e8:	andeq	r6, r1, r4, lsr r8
   166ec:	andeq	r6, r1, r4, lsr r8
   166f0:	andeq	r6, r1, r4, lsr r8
   166f4:	andeq	r6, r1, r4, lsr r8
   166f8:	andeq	r6, r1, r4, lsr r8
   166fc:	andeq	r6, r1, r4, lsr r8
   16700:	andeq	r6, r1, r4, lsr r8
   16704:	andeq	r6, r1, r4, lsr r8
   16708:	andeq	r6, r1, r4, lsr r8
   1670c:	andeq	r6, r1, r4, lsr r8
   16710:	andeq	r6, r1, r4, lsr r8
   16714:	andeq	r6, r1, r4, lsr r8
   16718:	andeq	r6, r1, r4, lsr r8
   1671c:	andeq	r6, r1, r4, lsr r8
   16720:	andeq	r6, r1, r4, lsr r8
   16724:	andeq	r6, r1, r0, asr sl
   16728:	andeq	r6, r1, r0, asr sl
   1672c:	andeq	r6, r1, r0, asr sl
   16730:	andeq	r6, r1, r0, asr sl
   16734:	andeq	r6, r1, r0, lsl r9
   16738:	ldrdeq	r6, [r1], -r8
   1673c:	andeq	r6, r1, r4, lsr r8
   16740:	andeq	r6, r1, r4, lsr r8
   16744:	andeq	r6, r1, r4, lsr r8
   16748:	andeq	r6, r1, r4, lsr r8
   1674c:	andeq	r6, r1, r4, lsr r8
   16750:	andeq	r6, r1, r4, lsr r8
   16754:	andeq	r6, r1, r4, lsr r8
   16758:	andeq	r6, r1, r4, lsr r8
   1675c:	andeq	r6, r1, r4, lsr r8
   16760:	andeq	r6, r1, r4, lsr r8
   16764:	andeq	r6, r1, r4, lsr r8
   16768:	andeq	r6, r1, r4, lsr r8
   1676c:	andeq	r6, r1, r4, lsr r8
   16770:	andeq	r6, r1, r4, lsr r8
   16774:	andeq	r6, r1, r4, lsr r8
   16778:	andeq	r6, r1, r4, lsr r8
   1677c:	andeq	r6, r1, r4, lsr r8
   16780:	andeq	r6, r1, r4, lsr r8
   16784:	andeq	r6, r1, r4, lsr r8
   16788:	andeq	r6, r1, r4, lsr r8
   1678c:	andeq	r6, r1, r4, lsr r8
   16790:	andeq	r6, r1, r4, lsr r8
   16794:	andeq	r6, r1, r4, lsr r8
   16798:	andeq	r6, r1, r4, lsr r8
   1679c:	andeq	r6, r1, r4, lsr r8
   167a0:	andeq	r6, r1, r4, lsr r8
   167a4:	andeq	r6, r1, r0, asr sl
   167a8:	andeq	r6, r1, ip, ror r8
   167ac:	andeq	r6, r1, r4, lsr r8
   167b0:	andeq	r6, r1, r0, asr sl
   167b4:	andeq	r6, r1, r4, lsr r8
   167b8:	andeq	r6, r1, r0, asr sl
   167bc:	andeq	r6, r1, r4, lsr r8
   167c0:	andeq	r6, r1, r4, lsr r8
   167c4:	andeq	r6, r1, r4, lsr r8
   167c8:	andeq	r6, r1, r4, lsr r8
   167cc:	andeq	r6, r1, r4, lsr r8
   167d0:	andeq	r6, r1, r4, lsr r8
   167d4:	andeq	r6, r1, r4, lsr r8
   167d8:	andeq	r6, r1, r4, lsr r8
   167dc:	andeq	r6, r1, r4, lsr r8
   167e0:	andeq	r6, r1, r4, lsr r8
   167e4:	andeq	r6, r1, r4, lsr r8
   167e8:	andeq	r6, r1, r4, lsr r8
   167ec:	andeq	r6, r1, r4, lsr r8
   167f0:	andeq	r6, r1, r4, lsr r8
   167f4:	andeq	r6, r1, r4, lsr r8
   167f8:	andeq	r6, r1, r4, lsr r8
   167fc:	andeq	r6, r1, r4, lsr r8
   16800:	andeq	r6, r1, r4, lsr r8
   16804:	andeq	r6, r1, r4, lsr r8
   16808:	andeq	r6, r1, r4, lsr r8
   1680c:	andeq	r6, r1, r4, lsr r8
   16810:	andeq	r6, r1, r4, lsr r8
   16814:	andeq	r6, r1, r4, lsr r8
   16818:	andeq	r6, r1, r4, lsr r8
   1681c:	andeq	r6, r1, r4, lsr r8
   16820:	andeq	r6, r1, r4, lsr r8
   16824:	andeq	r6, r1, ip, asr r8
   16828:	andeq	r6, r1, r0, asr sl
   1682c:	andeq	r6, r1, ip, asr r8
   16830:	andeq	r6, r1, r8, asr #16
   16834:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16838:	cmp	r0, #0
   1683c:	beq	16ab0 <__assert_fail@plt+0x5220>
   16840:	ldr	r0, [fp, #16]
   16844:	b	16ab4 <__assert_fail@plt+0x5224>
   16848:	mov	r9, #0
   1684c:	cmp	r6, #0
   16850:	beq	16a4c <__assert_fail@plt+0x51bc>
   16854:	mov	sl, #0
   16858:	b	16834 <__assert_fail@plt+0x4fa4>
   1685c:	mov	r9, #0
   16860:	cmn	lr, #1
   16864:	beq	16a30 <__assert_fail@plt+0x51a0>
   16868:	cmp	r6, #0
   1686c:	bne	16854 <__assert_fail@plt+0x4fc4>
   16870:	cmp	lr, #1
   16874:	beq	16a4c <__assert_fail@plt+0x51bc>
   16878:	b	16854 <__assert_fail@plt+0x4fc4>
   1687c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16880:	cmp	r0, #2
   16884:	bne	16a78 <__assert_fail@plt+0x51e8>
   16888:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1688c:	tst	r0, #1
   16890:	bne	171c0 <__assert_fail@plt+0x5930>
   16894:	mov	sl, #0
   16898:	mov	r0, #92	; 0x5c
   1689c:	b	16a8c <__assert_fail@plt+0x51fc>
   168a0:	mov	r0, #102	; 0x66
   168a4:	b	16a9c <__assert_fail@plt+0x520c>
   168a8:	mov	r2, #116	; 0x74
   168ac:	b	168bc <__assert_fail@plt+0x502c>
   168b0:	mov	r0, #98	; 0x62
   168b4:	b	16a9c <__assert_fail@plt+0x520c>
   168b8:	mov	r2, #114	; 0x72
   168bc:	ldr	r0, [sp, #64]	; 0x40
   168c0:	tst	r0, #1
   168c4:	mov	r0, r2
   168c8:	bne	16a9c <__assert_fail@plt+0x520c>
   168cc:	b	171c0 <__assert_fail@plt+0x5930>
   168d0:	ldr	r0, [sp, #84]	; 0x54
   168d4:	tst	r0, #1
   168d8:	beq	16b8c <__assert_fail@plt+0x52fc>
   168dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   168e0:	tst	r0, #1
   168e4:	bne	171c0 <__assert_fail@plt+0x5930>
   168e8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   168ec:	cmp	r0, #2
   168f0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   168f4:	movwne	r0, #1
   168f8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   168fc:	orr	r0, r0, r2
   16900:	tst	r0, #1
   16904:	beq	16f80 <__assert_fail@plt+0x56f0>
   16908:	mov	r0, r8
   1690c:	b	16fb4 <__assert_fail@plt+0x5724>
   16910:	mov	sl, #0
   16914:	mov	r5, #63	; 0x3f
   16918:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1691c:	cmp	r0, #5
   16920:	beq	16d40 <__assert_fail@plt+0x54b0>
   16924:	cmp	r0, #2
   16928:	bne	16de0 <__assert_fail@plt+0x5550>
   1692c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16930:	tst	r0, #1
   16934:	mov	r9, #0
   16938:	beq	16834 <__assert_fail@plt+0x4fa4>
   1693c:	b	171c0 <__assert_fail@plt+0x5930>
   16940:	mov	r0, #118	; 0x76
   16944:	b	16a9c <__assert_fail@plt+0x520c>
   16948:	mov	r5, #39	; 0x27
   1694c:	mov	r0, #1
   16950:	str	r0, [sp, #56]	; 0x38
   16954:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16958:	cmp	r0, #2
   1695c:	bne	16bac <__assert_fail@plt+0x531c>
   16960:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16964:	tst	r0, #1
   16968:	bne	171c0 <__assert_fail@plt+0x5930>
   1696c:	ldr	r2, [sp, #72]	; 0x48
   16970:	cmp	r2, #0
   16974:	mov	r0, r2
   16978:	movwne	r0, #1
   1697c:	clz	r1, r4
   16980:	lsr	r1, r1, #5
   16984:	orrs	r0, r0, r1
   16988:	moveq	r2, r4
   1698c:	str	r2, [sp, #72]	; 0x48
   16990:	moveq	r4, r0
   16994:	cmp	r8, r4
   16998:	movcc	r0, #39	; 0x27
   1699c:	strbcc	r0, [r7, r8]
   169a0:	add	r0, r8, #1
   169a4:	cmp	r0, r4
   169a8:	movcc	r1, #92	; 0x5c
   169ac:	strbcc	r1, [r7, r0]
   169b0:	add	r0, r8, #2
   169b4:	cmp	r0, r4
   169b8:	movcc	r1, #39	; 0x27
   169bc:	strbcc	r1, [r7, r0]
   169c0:	add	r8, r8, #3
   169c4:	mov	r0, #0
   169c8:	str	r0, [fp, #-56]	; 0xffffffc8
   169cc:	mov	sl, #0
   169d0:	mov	r9, #1
   169d4:	b	16834 <__assert_fail@plt+0x4fa4>
   169d8:	str	r4, [sp, #24]
   169dc:	ldr	r0, [sp, #40]	; 0x28
   169e0:	cmp	r0, #1
   169e4:	bne	16bb4 <__assert_fail@plt+0x5324>
   169e8:	str	lr, [sp, #28]
   169ec:	bl	116b0 <__ctype_b_loc@plt>
   169f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   169f4:	ldr	r0, [r0]
   169f8:	add	r0, r0, r5, lsl #1
   169fc:	ldrb	r0, [r0, #1]
   16a00:	ubfx	r9, r0, #6, #1
   16a04:	mov	r1, #1
   16a08:	ldr	r4, [sp, #24]
   16a0c:	ldr	r0, [sp, #52]	; 0x34
   16a10:	orr	r0, r9, r0
   16a14:	mov	r2, r1
   16a18:	cmp	r1, #1
   16a1c:	bhi	16de8 <__assert_fail@plt+0x5558>
   16a20:	tst	r0, #1
   16a24:	beq	16de8 <__assert_fail@plt+0x5558>
   16a28:	ldr	lr, [sp, #28]
   16a2c:	b	16834 <__assert_fail@plt+0x4fa4>
   16a30:	cmp	r6, #0
   16a34:	ldrbeq	r0, [ip, #1]
   16a38:	cmpeq	r0, #0
   16a3c:	beq	16a4c <__assert_fail@plt+0x51bc>
   16a40:	mvn	lr, #0
   16a44:	mov	sl, #0
   16a48:	b	16834 <__assert_fail@plt+0x4fa4>
   16a4c:	mov	r1, #1
   16a50:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16a54:	cmp	r0, #2
   16a58:	bne	16a70 <__assert_fail@plt+0x51e0>
   16a5c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a60:	tst	r0, #1
   16a64:	mov	r9, r1
   16a68:	beq	16834 <__assert_fail@plt+0x4fa4>
   16a6c:	b	171c0 <__assert_fail@plt+0x5930>
   16a70:	mov	r9, r1
   16a74:	b	16834 <__assert_fail@plt+0x4fa4>
   16a78:	mov	sl, #0
   16a7c:	mov	r0, #92	; 0x5c
   16a80:	ldr	r1, [sp, #48]	; 0x30
   16a84:	cmp	r1, #0
   16a88:	beq	16a9c <__assert_fail@plt+0x520c>
   16a8c:	mov	r9, #0
   16a90:	cmp	sl, #0
   16a94:	beq	1704c <__assert_fail@plt+0x57bc>
   16a98:	b	17088 <__assert_fail@plt+0x57f8>
   16a9c:	mov	r9, #0
   16aa0:	ldr	r1, [sp, #84]	; 0x54
   16aa4:	tst	r1, #1
   16aa8:	mov	sl, #0
   16aac:	bne	16aec <__assert_fail@plt+0x525c>
   16ab0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16ab4:	cmp	r0, #0
   16ab8:	mov	r0, r5
   16abc:	beq	16ae0 <__assert_fail@plt+0x5250>
   16ac0:	ubfx	r0, r5, #5, #3
   16ac4:	ldr	r1, [fp, #16]
   16ac8:	ldr	r0, [r1, r0, lsl #2]
   16acc:	and	r1, r5, #31
   16ad0:	mov	r2, #1
   16ad4:	tst	r0, r2, lsl r1
   16ad8:	mov	r0, r5
   16adc:	bne	16aec <__assert_fail@plt+0x525c>
   16ae0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16ae4:	cmp	r1, #0
   16ae8:	beq	17044 <__assert_fail@plt+0x57b4>
   16aec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16af0:	tst	r1, #1
   16af4:	bne	171c0 <__assert_fail@plt+0x5930>
   16af8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16afc:	cmp	r1, #2
   16b00:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16b04:	movwne	r1, #1
   16b08:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16b0c:	orr	r1, r1, r2
   16b10:	tst	r1, #1
   16b14:	beq	16b20 <__assert_fail@plt+0x5290>
   16b18:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16b1c:	b	16b5c <__assert_fail@plt+0x52cc>
   16b20:	cmp	r8, r4
   16b24:	movcc	r1, #39	; 0x27
   16b28:	strbcc	r1, [r7, r8]
   16b2c:	add	r1, r8, #1
   16b30:	cmp	r1, r4
   16b34:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16b38:	movcc	r2, #36	; 0x24
   16b3c:	strbcc	r2, [r7, r1]
   16b40:	add	r1, r8, #2
   16b44:	cmp	r1, r4
   16b48:	movcc	r2, #39	; 0x27
   16b4c:	strbcc	r2, [r7, r1]
   16b50:	add	r8, r8, #3
   16b54:	mov	r1, #1
   16b58:	str	r1, [fp, #-56]	; 0xffffffc8
   16b5c:	cmp	r8, r4
   16b60:	movcc	r1, #92	; 0x5c
   16b64:	strbcc	r1, [r7, r8]
   16b68:	add	r8, r8, #1
   16b6c:	cmp	r8, r4
   16b70:	strbcc	r0, [r7, r8]
   16b74:	and	r5, r5, r9
   16b78:	add	r8, r8, #1
   16b7c:	add	r6, r6, #1
   16b80:	cmn	lr, #1
   16b84:	bne	16560 <__assert_fail@plt+0x4cd0>
   16b88:	b	1656c <__assert_fail@plt+0x4cdc>
   16b8c:	mov	r9, #0
   16b90:	ldr	r0, [sp, #36]	; 0x24
   16b94:	cmp	r0, #0
   16b98:	mov	sl, #0
   16b9c:	mov	r5, #0
   16ba0:	beq	16ab0 <__assert_fail@plt+0x5220>
   16ba4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16ba8:	b	16b7c <__assert_fail@plt+0x52ec>
   16bac:	mov	r9, #1
   16bb0:	b	16834 <__assert_fail@plt+0x4fa4>
   16bb4:	mov	r0, #0
   16bb8:	str	r0, [fp, #-36]	; 0xffffffdc
   16bbc:	str	r0, [fp, #-40]	; 0xffffffd8
   16bc0:	cmn	lr, #1
   16bc4:	bne	16bd8 <__assert_fail@plt+0x5348>
   16bc8:	mov	r0, ip
   16bcc:	bl	116ec <strlen@plt>
   16bd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16bd4:	mov	lr, r0
   16bd8:	add	r0, ip, r6
   16bdc:	str	r0, [sp, #20]
   16be0:	mov	r9, #1
   16be4:	mov	r7, #0
   16be8:	sub	r4, fp, #40	; 0x28
   16bec:	str	lr, [sp, #28]
   16bf0:	str	r7, [sp, #44]	; 0x2c
   16bf4:	add	r7, r7, r6
   16bf8:	add	r1, ip, r7
   16bfc:	sub	r2, lr, r7
   16c00:	sub	r0, fp, #44	; 0x2c
   16c04:	mov	r3, r4
   16c08:	bl	19c88 <__assert_fail@plt+0x83f8>
   16c0c:	cmp	r0, #0
   16c10:	beq	170d0 <__assert_fail@plt+0x5840>
   16c14:	cmn	r0, #1
   16c18:	beq	17090 <__assert_fail@plt+0x5800>
   16c1c:	cmn	r0, #2
   16c20:	ldr	lr, [sp, #28]
   16c24:	beq	17098 <__assert_fail@plt+0x5808>
   16c28:	cmp	r0, #2
   16c2c:	mov	r1, #0
   16c30:	movwcc	r1, #1
   16c34:	ldr	r2, [sp, #60]	; 0x3c
   16c38:	eor	r2, r2, #1
   16c3c:	orrs	r1, r2, r1
   16c40:	ldr	r4, [sp, #24]
   16c44:	bne	16d04 <__assert_fail@plt+0x5474>
   16c48:	ldr	r1, [sp, #44]	; 0x2c
   16c4c:	ldr	r2, [sp, #20]
   16c50:	add	r1, r2, r1
   16c54:	mov	r2, #1
   16c58:	ldrb	r3, [r1, r2]
   16c5c:	sub	r3, r3, #91	; 0x5b
   16c60:	cmp	r3, #33	; 0x21
   16c64:	bhi	16cf8 <__assert_fail@plt+0x5468>
   16c68:	add	r7, pc, #0
   16c6c:	ldr	pc, [r7, r3, lsl #2]
   16c70:			; <UNDEFINED> instruction: 0x000171b8
   16c74:			; <UNDEFINED> instruction: 0x000171b8
   16c78:	strdeq	r6, [r1], -r8
   16c7c:			; <UNDEFINED> instruction: 0x000171b8
   16c80:	strdeq	r6, [r1], -r8
   16c84:			; <UNDEFINED> instruction: 0x000171b8
   16c88:	strdeq	r6, [r1], -r8
   16c8c:	strdeq	r6, [r1], -r8
   16c90:	strdeq	r6, [r1], -r8
   16c94:	strdeq	r6, [r1], -r8
   16c98:	strdeq	r6, [r1], -r8
   16c9c:	strdeq	r6, [r1], -r8
   16ca0:	strdeq	r6, [r1], -r8
   16ca4:	strdeq	r6, [r1], -r8
   16ca8:	strdeq	r6, [r1], -r8
   16cac:	strdeq	r6, [r1], -r8
   16cb0:	strdeq	r6, [r1], -r8
   16cb4:	strdeq	r6, [r1], -r8
   16cb8:	strdeq	r6, [r1], -r8
   16cbc:	strdeq	r6, [r1], -r8
   16cc0:	strdeq	r6, [r1], -r8
   16cc4:	strdeq	r6, [r1], -r8
   16cc8:	strdeq	r6, [r1], -r8
   16ccc:	strdeq	r6, [r1], -r8
   16cd0:	strdeq	r6, [r1], -r8
   16cd4:	strdeq	r6, [r1], -r8
   16cd8:	strdeq	r6, [r1], -r8
   16cdc:	strdeq	r6, [r1], -r8
   16ce0:	strdeq	r6, [r1], -r8
   16ce4:	strdeq	r6, [r1], -r8
   16ce8:	strdeq	r6, [r1], -r8
   16cec:	strdeq	r6, [r1], -r8
   16cf0:	strdeq	r6, [r1], -r8
   16cf4:			; <UNDEFINED> instruction: 0x000171b8
   16cf8:	add	r2, r2, #1
   16cfc:	cmp	r2, r0
   16d00:	bcc	16c58 <__assert_fail@plt+0x53c8>
   16d04:	ldr	r7, [sp, #44]	; 0x2c
   16d08:	add	r7, r0, r7
   16d0c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16d10:	bl	115cc <iswprint@plt>
   16d14:	cmp	r0, #0
   16d18:	movwne	r0, #1
   16d1c:	and	r9, r9, r0
   16d20:	sub	r4, fp, #40	; 0x28
   16d24:	mov	r0, r4
   16d28:	bl	11548 <mbsinit@plt>
   16d2c:	ldr	lr, [sp, #28]
   16d30:	cmp	r0, #0
   16d34:	ldr	ip, [fp, #-84]	; 0xffffffac
   16d38:	beq	16bf0 <__assert_fail@plt+0x5360>
   16d3c:	b	170d8 <__assert_fail@plt+0x5848>
   16d40:	ldr	r0, [sp, #32]
   16d44:	cmp	r0, #0
   16d48:	beq	16de0 <__assert_fail@plt+0x5550>
   16d4c:	add	r0, r6, #2
   16d50:	cmp	r0, lr
   16d54:	bcs	16de0 <__assert_fail@plt+0x5550>
   16d58:	add	r1, ip, r6
   16d5c:	ldrb	r1, [r1, #1]
   16d60:	cmp	r1, #63	; 0x3f
   16d64:	bne	16de0 <__assert_fail@plt+0x5550>
   16d68:	ldrb	r9, [ip, r0]
   16d6c:	sub	r2, r9, #33	; 0x21
   16d70:	cmp	r2, #29
   16d74:	bhi	16de0 <__assert_fail@plt+0x5550>
   16d78:	mov	r3, #1
   16d7c:	movw	r1, #20929	; 0x51c1
   16d80:	movt	r1, #14336	; 0x3800
   16d84:	tst	r1, r3, lsl r2
   16d88:	beq	16de0 <__assert_fail@plt+0x5550>
   16d8c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16d90:	tst	r1, #1
   16d94:	bne	171c0 <__assert_fail@plt+0x5930>
   16d98:	cmp	r8, r4
   16d9c:	movcc	r1, #63	; 0x3f
   16da0:	strbcc	r1, [r7, r8]
   16da4:	add	r2, r8, #1
   16da8:	cmp	r2, r4
   16dac:	movcc	r1, #34	; 0x22
   16db0:	strbcc	r1, [r7, r2]
   16db4:	add	r2, r8, #2
   16db8:	cmp	r2, r4
   16dbc:	movcc	r1, #34	; 0x22
   16dc0:	strbcc	r1, [r7, r2]
   16dc4:	add	r2, r8, #3
   16dc8:	cmp	r2, r4
   16dcc:	movcc	r1, #63	; 0x3f
   16dd0:	strbcc	r1, [r7, r2]
   16dd4:	add	r8, r8, #4
   16dd8:	mov	r6, r0
   16ddc:	mov	r5, r9
   16de0:	mov	r9, #0
   16de4:	b	16834 <__assert_fail@plt+0x4fa4>
   16de8:	add	r1, r2, r6
   16dec:	str	r1, [sp, #44]	; 0x2c
   16df0:	add	r1, r6, #1
   16df4:	mov	r3, #0
   16df8:	ldr	lr, [sp, #28]
   16dfc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16e00:	tst	r0, #1
   16e04:	bne	16ef8 <__assert_fail@plt+0x5668>
   16e08:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16e0c:	tst	r2, #1
   16e10:	bne	171c0 <__assert_fail@plt+0x5930>
   16e14:	cmp	r6, #2
   16e18:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16e1c:	movwne	r3, #1
   16e20:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16e24:	orr	r3, r3, r2
   16e28:	tst	r3, #1
   16e2c:	bne	16e68 <__assert_fail@plt+0x55d8>
   16e30:	cmp	r8, r4
   16e34:	movcc	r2, #39	; 0x27
   16e38:	strbcc	r2, [r7, r8]
   16e3c:	add	r3, r8, #1
   16e40:	cmp	r3, r4
   16e44:	movcc	r2, #36	; 0x24
   16e48:	strbcc	r2, [r7, r3]
   16e4c:	add	r3, r8, #2
   16e50:	cmp	r3, r4
   16e54:	movcc	r2, #39	; 0x27
   16e58:	strbcc	r2, [r7, r3]
   16e5c:	add	r8, r8, #3
   16e60:	mov	r2, #1
   16e64:	str	r2, [fp, #-56]	; 0xffffffc8
   16e68:	cmp	r8, r4
   16e6c:	movcc	r2, #92	; 0x5c
   16e70:	strbcc	r2, [r7, r8]
   16e74:	add	r3, r8, #1
   16e78:	cmp	r3, r4
   16e7c:	bcs	16e9c <__assert_fail@plt+0x560c>
   16e80:	and	r7, r5, #192	; 0xc0
   16e84:	mov	r2, #48	; 0x30
   16e88:	orr	r7, r2, r7, lsr #6
   16e8c:	ldr	r6, [sp, #80]	; 0x50
   16e90:	strb	r7, [r6, r3]
   16e94:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16e98:	ldr	r7, [sp, #80]	; 0x50
   16e9c:	add	r3, r8, #2
   16ea0:	cmp	r3, r4
   16ea4:	bcs	16ec4 <__assert_fail@plt+0x5634>
   16ea8:	lsr	r7, r5, #3
   16eac:	mov	r2, #6
   16eb0:	bfi	r7, r2, #3, #29
   16eb4:	ldr	r6, [sp, #80]	; 0x50
   16eb8:	strb	r7, [r6, r3]
   16ebc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16ec0:	ldr	r7, [sp, #80]	; 0x50
   16ec4:	mov	r2, #6
   16ec8:	bfi	r5, r2, #3, #29
   16ecc:	add	r8, r8, #3
   16ed0:	mov	r3, #1
   16ed4:	b	16f1c <__assert_fail@plt+0x568c>
   16ed8:	ldr	r7, [sp, #80]	; 0x50
   16edc:	cmp	r8, r4
   16ee0:	strbcc	r5, [r7, r8]
   16ee4:	ldrb	r5, [ip, r1]
   16ee8:	add	r1, r1, #1
   16eec:	add	r8, r8, #1
   16ef0:	tst	r0, #1
   16ef4:	beq	16e08 <__assert_fail@plt+0x5578>
   16ef8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16efc:	tst	r2, #1
   16f00:	beq	16f14 <__assert_fail@plt+0x5684>
   16f04:	cmp	r8, r4
   16f08:	movcc	r2, #92	; 0x5c
   16f0c:	strbcc	r2, [r7, r8]
   16f10:	add	r8, r8, #1
   16f14:	mov	r2, #0
   16f18:	str	r2, [fp, #-52]	; 0xffffffcc
   16f1c:	and	sl, r3, #1
   16f20:	ldr	r2, [sp, #44]	; 0x2c
   16f24:	cmp	r2, r1
   16f28:	bls	17034 <__assert_fail@plt+0x57a4>
   16f2c:	cmp	sl, #0
   16f30:	movwne	sl, #1
   16f34:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16f38:	mvn	r7, r2
   16f3c:	orr	r7, r7, sl
   16f40:	tst	r7, #1
   16f44:	bne	16ed8 <__assert_fail@plt+0x5648>
   16f48:	cmp	r8, r4
   16f4c:	ldrcc	r7, [sp, #80]	; 0x50
   16f50:	movcc	r2, #39	; 0x27
   16f54:	strbcc	r2, [r7, r8]
   16f58:	add	r7, r8, #1
   16f5c:	cmp	r7, r4
   16f60:	ldrcc	r6, [sp, #80]	; 0x50
   16f64:	movcc	r2, #39	; 0x27
   16f68:	strbcc	r2, [r6, r7]
   16f6c:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   16f70:	add	r8, r8, #2
   16f74:	mov	r2, #0
   16f78:	str	r2, [fp, #-56]	; 0xffffffc8
   16f7c:	b	16ed8 <__assert_fail@plt+0x5648>
   16f80:	cmp	r8, r4
   16f84:	movcc	r0, #39	; 0x27
   16f88:	strbcc	r0, [r7, r8]
   16f8c:	add	r0, r8, #1
   16f90:	cmp	r0, r4
   16f94:	movcc	r1, #36	; 0x24
   16f98:	strbcc	r1, [r7, r0]
   16f9c:	add	r0, r8, #2
   16fa0:	cmp	r0, r4
   16fa4:	movcc	r1, #39	; 0x27
   16fa8:	strbcc	r1, [r7, r0]
   16fac:	add	r0, r8, #3
   16fb0:	mov	r2, #1
   16fb4:	cmp	r0, r4
   16fb8:	movcc	r1, #92	; 0x5c
   16fbc:	strbcc	r1, [r7, r0]
   16fc0:	str	r2, [fp, #-56]	; 0xffffffc8
   16fc4:	add	r8, r0, #1
   16fc8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16fcc:	cmp	r1, #2
   16fd0:	beq	17024 <__assert_fail@plt+0x5794>
   16fd4:	add	r1, r6, #1
   16fd8:	mov	r9, #0
   16fdc:	mov	sl, #1
   16fe0:	mov	r5, #48	; 0x30
   16fe4:	cmp	r1, lr
   16fe8:	bcs	16834 <__assert_fail@plt+0x4fa4>
   16fec:	ldrb	r1, [ip, r1]
   16ff0:	sub	r1, r1, #48	; 0x30
   16ff4:	uxtb	r1, r1
   16ff8:	cmp	r1, #9
   16ffc:	bhi	16834 <__assert_fail@plt+0x4fa4>
   17000:	cmp	r8, r4
   17004:	movcc	r1, #48	; 0x30
   17008:	strbcc	r1, [r7, r8]
   1700c:	add	r1, r0, #2
   17010:	cmp	r1, r4
   17014:	movcc	r2, #48	; 0x30
   17018:	strbcc	r2, [r7, r1]
   1701c:	add	r8, r0, #3
   17020:	b	16834 <__assert_fail@plt+0x4fa4>
   17024:	mov	r0, #48	; 0x30
   17028:	mov	sl, #1
   1702c:	mov	r9, #0
   17030:	b	16ae0 <__assert_fail@plt+0x5250>
   17034:	sub	r6, r1, #1
   17038:	cmp	sl, #0
   1703c:	movwne	sl, #1
   17040:	mov	r0, r5
   17044:	cmp	sl, #0
   17048:	bne	17088 <__assert_fail@plt+0x57f8>
   1704c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17050:	tst	r1, #1
   17054:	beq	17088 <__assert_fail@plt+0x57f8>
   17058:	cmp	r8, r4
   1705c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17060:	movcc	r1, #39	; 0x27
   17064:	strbcc	r1, [r7, r8]
   17068:	add	r1, r8, #1
   1706c:	cmp	r1, r4
   17070:	movcc	r2, #39	; 0x27
   17074:	strbcc	r2, [r7, r1]
   17078:	add	r8, r8, #2
   1707c:	mov	r1, #0
   17080:	str	r1, [fp, #-56]	; 0xffffffc8
   17084:	b	16b6c <__assert_fail@plt+0x52dc>
   17088:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1708c:	b	16b6c <__assert_fail@plt+0x52dc>
   17090:	mov	r9, #0
   17094:	b	170d0 <__assert_fail@plt+0x5840>
   17098:	mov	r9, #0
   1709c:	cmp	r7, lr
   170a0:	bcs	170d0 <__assert_fail@plt+0x5840>
   170a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   170a8:	ldr	r7, [sp, #44]	; 0x2c
   170ac:	ldr	r0, [sp, #20]
   170b0:	ldrb	r0, [r0, r7]
   170b4:	cmp	r0, #0
   170b8:	beq	170d8 <__assert_fail@plt+0x5848>
   170bc:	add	r7, r7, #1
   170c0:	add	r0, r6, r7
   170c4:	cmp	r0, lr
   170c8:	bcc	170ac <__assert_fail@plt+0x581c>
   170cc:	b	170d8 <__assert_fail@plt+0x5848>
   170d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   170d4:	ldr	r7, [sp, #44]	; 0x2c
   170d8:	mov	r1, r7
   170dc:	ldr	r7, [sp, #80]	; 0x50
   170e0:	b	16a08 <__assert_fail@plt+0x5178>
   170e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   170e8:	eor	r0, r1, #2
   170ec:	orr	r0, r0, r8
   170f0:	clz	r0, r0
   170f4:	lsr	r0, r0, #5
   170f8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   170fc:	tst	r2, r0
   17100:	bne	171c0 <__assert_fail@plt+0x5930>
   17104:	cmp	r1, #2
   17108:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1710c:	movwne	r0, #1
   17110:	orr	r0, r2, r0
   17114:	tst	r0, #1
   17118:	ldreq	r0, [sp, #56]	; 0x38
   1711c:	eoreq	r0, r0, #1
   17120:	tsteq	r0, #1
   17124:	bne	17158 <__assert_fail@plt+0x58c8>
   17128:	mov	r9, lr
   1712c:	tst	r5, #1
   17130:	bne	17228 <__assert_fail@plt+0x5998>
   17134:	ldr	r0, [sp, #72]	; 0x48
   17138:	cmp	r0, #0
   1713c:	beq	17158 <__assert_fail@plt+0x58c8>
   17140:	mov	r5, #0
   17144:	cmp	r4, #0
   17148:	ldr	r0, [sp, #84]	; 0x54
   1714c:	mov	sl, r2
   17150:	ldr	r6, [sp, #72]	; 0x48
   17154:	beq	162f0 <__assert_fail@plt+0x4a60>
   17158:	ldr	r1, [sp, #92]	; 0x5c
   1715c:	clz	r0, r1
   17160:	lsr	r0, r0, #5
   17164:	orr	r0, r0, r2
   17168:	tst	r0, #1
   1716c:	bne	17198 <__assert_fail@plt+0x5908>
   17170:	ldrb	r0, [r1]
   17174:	cmp	r0, #0
   17178:	beq	17198 <__assert_fail@plt+0x5908>
   1717c:	add	r1, r1, #1
   17180:	cmp	r8, r4
   17184:	strbcc	r0, [r7, r8]
   17188:	add	r8, r8, #1
   1718c:	ldrb	r0, [r1], #1
   17190:	cmp	r0, #0
   17194:	bne	17180 <__assert_fail@plt+0x58f0>
   17198:	cmp	r8, r4
   1719c:	movcc	r0, #0
   171a0:	strbcc	r0, [r7, r8]
   171a4:	b	1721c <__assert_fail@plt+0x598c>
   171a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   171ac:	mov	lr, r4
   171b0:	mov	r4, r5
   171b4:	b	171c0 <__assert_fail@plt+0x5930>
   171b8:	ldr	r7, [sp, #80]	; 0x50
   171bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   171c0:	mov	r0, #0
   171c4:	ldr	r1, [fp, #12]
   171c8:	bic	r1, r1, #2
   171cc:	ldr	r2, [sp, #84]	; 0x54
   171d0:	tst	r2, #1
   171d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   171d8:	mov	r2, r3
   171dc:	movwne	r2, #4
   171e0:	cmp	r3, #2
   171e4:	movne	r2, r3
   171e8:	str	r2, [sp]
   171ec:	str	r1, [sp, #4]
   171f0:	str	r0, [sp, #8]
   171f4:	ldr	r0, [sp, #68]	; 0x44
   171f8:	str	r0, [sp, #12]
   171fc:	ldr	r0, [sp, #76]	; 0x4c
   17200:	str	r0, [sp, #16]
   17204:	mov	r0, r7
   17208:	mov	r1, r4
   1720c:	mov	r2, ip
   17210:	mov	r3, lr
   17214:	bl	16268 <__assert_fail@plt+0x49d8>
   17218:	mov	r8, r0
   1721c:	mov	r0, r8
   17220:	sub	sp, fp, #28
   17224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17228:	mov	r0, #5
   1722c:	str	r0, [sp]
   17230:	ldr	r0, [fp, #12]
   17234:	str	r0, [sp, #4]
   17238:	ldr	r0, [fp, #16]
   1723c:	str	r0, [sp, #8]
   17240:	ldr	r0, [sp, #68]	; 0x44
   17244:	str	r0, [sp, #12]
   17248:	ldr	r0, [sp, #76]	; 0x4c
   1724c:	str	r0, [sp, #16]
   17250:	mov	r0, r7
   17254:	ldr	r1, [sp, #72]	; 0x48
   17258:	ldr	r2, [fp, #-84]	; 0xffffffac
   1725c:	mov	r3, r9
   17260:	b	17214 <__assert_fail@plt+0x5984>
   17264:	bl	11854 <abort@plt>
   17268:	mov	r3, r2
   1726c:	mov	r2, #0
   17270:	b	17274 <__assert_fail@plt+0x59e4>
   17274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17278:	add	fp, sp, #28
   1727c:	sub	sp, sp, #36	; 0x24
   17280:	mov	r4, r2
   17284:	str	r2, [sp, #24]
   17288:	mov	r5, r1
   1728c:	mov	r6, r0
   17290:	str	r0, [sp, #20]
   17294:	movw	r8, #49680	; 0xc210
   17298:	movt	r8, #2
   1729c:	cmp	r3, #0
   172a0:	movne	r8, r3
   172a4:	bl	11710 <__errno_location@plt>
   172a8:	str	r0, [sp, #28]
   172ac:	ldm	r8, {r3, r9}
   172b0:	ldr	r1, [r8, #40]	; 0x28
   172b4:	ldr	r2, [r8, #44]	; 0x2c
   172b8:	ldr	r7, [r0]
   172bc:	str	r7, [sp, #32]
   172c0:	add	sl, r8, #8
   172c4:	cmp	r4, #0
   172c8:	orreq	r9, r9, #1
   172cc:	stm	sp, {r3, r9, sl}
   172d0:	str	r1, [sp, #12]
   172d4:	str	r2, [sp, #16]
   172d8:	mov	r0, #0
   172dc:	mov	r1, #0
   172e0:	mov	r2, r6
   172e4:	mov	r3, r5
   172e8:	mov	r7, r5
   172ec:	bl	16268 <__assert_fail@plt+0x49d8>
   172f0:	mov	r5, r0
   172f4:	add	r4, r0, #1
   172f8:	mov	r0, r4
   172fc:	bl	18bb4 <__assert_fail@plt+0x7324>
   17300:	mov	r6, r0
   17304:	ldr	r0, [r8]
   17308:	ldr	r1, [r8, #40]	; 0x28
   1730c:	ldr	r2, [r8, #44]	; 0x2c
   17310:	stm	sp, {r0, r9, sl}
   17314:	str	r1, [sp, #12]
   17318:	str	r2, [sp, #16]
   1731c:	mov	r0, r6
   17320:	mov	r1, r4
   17324:	ldr	r2, [sp, #20]
   17328:	mov	r3, r7
   1732c:	bl	16268 <__assert_fail@plt+0x49d8>
   17330:	ldr	r0, [sp, #24]
   17334:	ldr	r1, [sp, #32]
   17338:	ldr	r2, [sp, #28]
   1733c:	str	r1, [r2]
   17340:	cmp	r0, #0
   17344:	strne	r5, [r0]
   17348:	mov	r0, r6
   1734c:	sub	sp, fp, #28
   17350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17354:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17358:	add	fp, sp, #24
   1735c:	movw	r8, #49520	; 0xc170
   17360:	movt	r8, #2
   17364:	ldr	r4, [r8]
   17368:	movw	r5, #49524	; 0xc174
   1736c:	movt	r5, #2
   17370:	ldr	r0, [r5]
   17374:	cmp	r0, #2
   17378:	blt	173a4 <__assert_fail@plt+0x5b14>
   1737c:	add	r7, r4, #12
   17380:	mov	r6, #0
   17384:	ldr	r0, [r7, r6, lsl #3]
   17388:	bl	19b34 <__assert_fail@plt+0x82a4>
   1738c:	add	r0, r6, #1
   17390:	ldr	r1, [r5]
   17394:	add	r2, r6, #2
   17398:	cmp	r2, r1
   1739c:	mov	r6, r0
   173a0:	blt	17384 <__assert_fail@plt+0x5af4>
   173a4:	ldr	r0, [r4, #4]
   173a8:	movw	r7, #49728	; 0xc240
   173ac:	movt	r7, #2
   173b0:	cmp	r0, r7
   173b4:	beq	173cc <__assert_fail@plt+0x5b3c>
   173b8:	bl	19b34 <__assert_fail@plt+0x82a4>
   173bc:	movw	r0, #49528	; 0xc178
   173c0:	movt	r0, #2
   173c4:	mov	r6, #256	; 0x100
   173c8:	strd	r6, [r0]
   173cc:	movw	r6, #49528	; 0xc178
   173d0:	movt	r6, #2
   173d4:	cmp	r4, r6
   173d8:	beq	173e8 <__assert_fail@plt+0x5b58>
   173dc:	mov	r0, r4
   173e0:	bl	19b34 <__assert_fail@plt+0x82a4>
   173e4:	str	r6, [r8]
   173e8:	mov	r0, #1
   173ec:	str	r0, [r5]
   173f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   173f4:	movw	r3, #49680	; 0xc210
   173f8:	movt	r3, #2
   173fc:	mvn	r2, #0
   17400:	b	17404 <__assert_fail@plt+0x5b74>
   17404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17408:	add	fp, sp, #28
   1740c:	sub	sp, sp, #44	; 0x2c
   17410:	mov	r7, r3
   17414:	str	r2, [sp, #36]	; 0x24
   17418:	str	r1, [sp, #32]
   1741c:	mov	r5, r0
   17420:	bl	11710 <__errno_location@plt>
   17424:	cmp	r5, #0
   17428:	blt	17594 <__assert_fail@plt+0x5d04>
   1742c:	cmn	r5, #-2147483647	; 0x80000001
   17430:	beq	17594 <__assert_fail@plt+0x5d04>
   17434:	movw	r4, #49520	; 0xc170
   17438:	movt	r4, #2
   1743c:	ldr	r6, [r4]
   17440:	str	r0, [sp, #28]
   17444:	ldr	r0, [r0]
   17448:	str	r0, [sp, #24]
   1744c:	movw	r8, #49524	; 0xc174
   17450:	movt	r8, #2
   17454:	ldr	r1, [r8]
   17458:	cmp	r1, r5
   1745c:	ble	17468 <__assert_fail@plt+0x5bd8>
   17460:	mov	sl, r6
   17464:	b	174d0 <__assert_fail@plt+0x5c40>
   17468:	str	r1, [fp, #-32]	; 0xffffffe0
   1746c:	mov	r0, #8
   17470:	str	r0, [sp]
   17474:	movw	r9, #49528	; 0xc178
   17478:	movt	r9, #2
   1747c:	subs	r0, r6, r9
   17480:	movne	r0, r6
   17484:	add	r2, r5, #1
   17488:	sub	r2, r2, r1
   1748c:	sub	r1, fp, #32
   17490:	mvn	r3, #-2147483648	; 0x80000000
   17494:	bl	18c9c <__assert_fail@plt+0x740c>
   17498:	mov	sl, r0
   1749c:	str	r0, [r4]
   174a0:	cmp	r6, r9
   174a4:	ldrdeq	r0, [r9]
   174a8:	stmeq	sl, {r0, r1}
   174ac:	ldr	r1, [r8]
   174b0:	add	r0, sl, r1, lsl #3
   174b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   174b8:	sub	r1, r2, r1
   174bc:	lsl	r2, r1, #3
   174c0:	mov	r1, #0
   174c4:	bl	11734 <memset@plt>
   174c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   174cc:	str	r0, [r8]
   174d0:	mov	r9, sl
   174d4:	ldr	r6, [r9, r5, lsl #3]!
   174d8:	ldr	r4, [r9, #4]!
   174dc:	ldm	r7, {r0, r1}
   174e0:	ldr	r2, [r7, #40]	; 0x28
   174e4:	ldr	r3, [r7, #44]	; 0x2c
   174e8:	orr	r8, r1, #1
   174ec:	add	r1, r7, #8
   174f0:	stm	sp, {r0, r8}
   174f4:	str	r1, [sp, #20]
   174f8:	add	r0, sp, #8
   174fc:	stm	r0, {r1, r2, r3}
   17500:	mov	r0, r4
   17504:	mov	r1, r6
   17508:	ldr	r2, [sp, #32]
   1750c:	ldr	r3, [sp, #36]	; 0x24
   17510:	bl	16268 <__assert_fail@plt+0x49d8>
   17514:	cmp	r6, r0
   17518:	bhi	1757c <__assert_fail@plt+0x5cec>
   1751c:	add	r6, r0, #1
   17520:	str	r6, [sl, r5, lsl #3]
   17524:	movw	r0, #49728	; 0xc240
   17528:	movt	r0, #2
   1752c:	cmp	r4, r0
   17530:	beq	1753c <__assert_fail@plt+0x5cac>
   17534:	mov	r0, r4
   17538:	bl	19b34 <__assert_fail@plt+0x82a4>
   1753c:	mov	r0, r6
   17540:	bl	18bb4 <__assert_fail@plt+0x7324>
   17544:	mov	r4, r0
   17548:	str	r0, [r9]
   1754c:	ldr	r0, [r7]
   17550:	ldr	r1, [r7, #40]	; 0x28
   17554:	ldr	r2, [r7, #44]	; 0x2c
   17558:	stm	sp, {r0, r8}
   1755c:	ldr	r0, [sp, #20]
   17560:	add	r3, sp, #8
   17564:	stm	r3, {r0, r1, r2}
   17568:	mov	r0, r4
   1756c:	mov	r1, r6
   17570:	ldr	r2, [sp, #32]
   17574:	ldr	r3, [sp, #36]	; 0x24
   17578:	bl	16268 <__assert_fail@plt+0x49d8>
   1757c:	ldr	r0, [sp, #28]
   17580:	ldr	r1, [sp, #24]
   17584:	str	r1, [r0]
   17588:	mov	r0, r4
   1758c:	sub	sp, fp, #28
   17590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17594:	bl	11854 <abort@plt>
   17598:	movw	r3, #49680	; 0xc210
   1759c:	movt	r3, #2
   175a0:	b	17404 <__assert_fail@plt+0x5b74>
   175a4:	mov	r1, r0
   175a8:	mov	r0, #0
   175ac:	b	173f4 <__assert_fail@plt+0x5b64>
   175b0:	mov	r2, r1
   175b4:	mov	r1, r0
   175b8:	mov	r0, #0
   175bc:	b	17598 <__assert_fail@plt+0x5d08>
   175c0:	push	{r4, r5, r6, sl, fp, lr}
   175c4:	add	fp, sp, #16
   175c8:	sub	sp, sp, #48	; 0x30
   175cc:	mov	r4, r2
   175d0:	mov	r5, r0
   175d4:	mov	r6, sp
   175d8:	mov	r0, r6
   175dc:	bl	175fc <__assert_fail@plt+0x5d6c>
   175e0:	mov	r0, r5
   175e4:	mov	r1, r4
   175e8:	mvn	r2, #0
   175ec:	mov	r3, r6
   175f0:	bl	17404 <__assert_fail@plt+0x5b74>
   175f4:	sub	sp, fp, #16
   175f8:	pop	{r4, r5, r6, sl, fp, pc}
   175fc:	vmov.i32	q8, #0	; 0x00000000
   17600:	mov	r2, #32
   17604:	mov	r3, r0
   17608:	vst1.32	{d16-d17}, [r3], r2
   1760c:	vst1.32	{d16-d17}, [r3]
   17610:	add	r2, r0, #16
   17614:	vst1.32	{d16-d17}, [r2]
   17618:	cmp	r1, #10
   1761c:	strne	r1, [r0]
   17620:	bxne	lr
   17624:	push	{fp, lr}
   17628:	mov	fp, sp
   1762c:	bl	11854 <abort@plt>
   17630:	push	{r4, r5, r6, r7, fp, lr}
   17634:	add	fp, sp, #16
   17638:	sub	sp, sp, #48	; 0x30
   1763c:	mov	r4, r3
   17640:	mov	r5, r2
   17644:	mov	r6, r0
   17648:	mov	r7, sp
   1764c:	mov	r0, r7
   17650:	bl	175fc <__assert_fail@plt+0x5d6c>
   17654:	mov	r0, r6
   17658:	mov	r1, r5
   1765c:	mov	r2, r4
   17660:	mov	r3, r7
   17664:	bl	17404 <__assert_fail@plt+0x5b74>
   17668:	sub	sp, fp, #16
   1766c:	pop	{r4, r5, r6, r7, fp, pc}
   17670:	mov	r2, r1
   17674:	mov	r1, r0
   17678:	mov	r0, #0
   1767c:	b	175c0 <__assert_fail@plt+0x5d30>
   17680:	mov	r3, r2
   17684:	mov	r2, r1
   17688:	mov	r1, r0
   1768c:	mov	r0, #0
   17690:	b	17630 <__assert_fail@plt+0x5da0>
   17694:	push	{r4, r5, r6, sl, fp, lr}
   17698:	add	fp, sp, #16
   1769c:	sub	sp, sp, #48	; 0x30
   176a0:	mov	r4, r1
   176a4:	mov	r5, r0
   176a8:	mov	r0, #32
   176ac:	movw	r1, #49680	; 0xc210
   176b0:	movt	r1, #2
   176b4:	add	r3, r1, #16
   176b8:	vld1.64	{d16-d17}, [r1], r0
   176bc:	mov	r6, sp
   176c0:	vld1.64	{d18-d19}, [r3]
   176c4:	add	r3, r6, #16
   176c8:	vld1.64	{d20-d21}, [r1]
   176cc:	vst1.64	{d18-d19}, [r3]
   176d0:	mov	r1, r6
   176d4:	vst1.64	{d16-d17}, [r1], r0
   176d8:	vst1.64	{d20-d21}, [r1]
   176dc:	mov	r0, r6
   176e0:	mov	r1, r2
   176e4:	mov	r2, #1
   176e8:	bl	1615c <__assert_fail@plt+0x48cc>
   176ec:	mov	r0, #0
   176f0:	mov	r1, r5
   176f4:	mov	r2, r4
   176f8:	mov	r3, r6
   176fc:	bl	17404 <__assert_fail@plt+0x5b74>
   17700:	sub	sp, fp, #16
   17704:	pop	{r4, r5, r6, sl, fp, pc}
   17708:	mov	r2, r1
   1770c:	mvn	r1, #0
   17710:	b	17694 <__assert_fail@plt+0x5e04>
   17714:	mov	r1, #58	; 0x3a
   17718:	b	17708 <__assert_fail@plt+0x5e78>
   1771c:	mov	r2, #58	; 0x3a
   17720:	b	17694 <__assert_fail@plt+0x5e04>
   17724:	push	{r4, r5, r6, sl, fp, lr}
   17728:	add	fp, sp, #16
   1772c:	sub	sp, sp, #48	; 0x30
   17730:	mov	r4, r2
   17734:	mov	r5, r0
   17738:	mov	r6, sp
   1773c:	mov	r0, r6
   17740:	bl	175fc <__assert_fail@plt+0x5d6c>
   17744:	mov	r0, r6
   17748:	mov	r1, #58	; 0x3a
   1774c:	mov	r2, #1
   17750:	bl	1615c <__assert_fail@plt+0x48cc>
   17754:	mov	r0, r5
   17758:	mov	r1, r4
   1775c:	mvn	r2, #0
   17760:	mov	r3, r6
   17764:	bl	17404 <__assert_fail@plt+0x5b74>
   17768:	sub	sp, fp, #16
   1776c:	pop	{r4, r5, r6, sl, fp, pc}
   17770:	push	{fp, lr}
   17774:	mov	fp, sp
   17778:	sub	sp, sp, #8
   1777c:	mvn	ip, #0
   17780:	str	ip, [sp]
   17784:	bl	17790 <__assert_fail@plt+0x5f00>
   17788:	mov	sp, fp
   1778c:	pop	{fp, pc}
   17790:	push	{r4, r5, r6, r7, fp, lr}
   17794:	add	fp, sp, #16
   17798:	sub	sp, sp, #48	; 0x30
   1779c:	mov	r7, r3
   177a0:	mov	r5, r0
   177a4:	mov	r0, #32
   177a8:	movw	r3, #49680	; 0xc210
   177ac:	movt	r3, #2
   177b0:	add	r4, r3, #16
   177b4:	vld1.64	{d16-d17}, [r3], r0
   177b8:	mov	r6, sp
   177bc:	vld1.64	{d18-d19}, [r4]
   177c0:	add	r4, r6, #16
   177c4:	vld1.64	{d20-d21}, [r3]
   177c8:	vst1.64	{d18-d19}, [r4]
   177cc:	mov	r3, r6
   177d0:	vst1.64	{d16-d17}, [r3], r0
   177d4:	vst1.64	{d20-d21}, [r3]
   177d8:	mov	r0, r6
   177dc:	bl	161b4 <__assert_fail@plt+0x4924>
   177e0:	ldr	r2, [fp, #8]
   177e4:	mov	r0, r5
   177e8:	mov	r1, r7
   177ec:	mov	r3, r6
   177f0:	bl	17404 <__assert_fail@plt+0x5b74>
   177f4:	sub	sp, fp, #16
   177f8:	pop	{r4, r5, r6, r7, fp, pc}
   177fc:	mov	r3, r2
   17800:	mov	r2, r1
   17804:	mov	r1, r0
   17808:	mov	r0, #0
   1780c:	b	17770 <__assert_fail@plt+0x5ee0>
   17810:	push	{fp, lr}
   17814:	mov	fp, sp
   17818:	sub	sp, sp, #8
   1781c:	mov	ip, r2
   17820:	mov	r2, r1
   17824:	mov	r1, r0
   17828:	str	r3, [sp]
   1782c:	mov	r0, #0
   17830:	mov	r3, ip
   17834:	bl	17790 <__assert_fail@plt+0x5f00>
   17838:	mov	sp, fp
   1783c:	pop	{fp, pc}
   17840:	movw	r3, #49536	; 0xc180
   17844:	movt	r3, #2
   17848:	b	17404 <__assert_fail@plt+0x5b74>
   1784c:	mov	r2, r1
   17850:	mov	r1, r0
   17854:	mov	r0, #0
   17858:	b	17840 <__assert_fail@plt+0x5fb0>
   1785c:	mvn	r2, #0
   17860:	b	17840 <__assert_fail@plt+0x5fb0>
   17864:	mov	r1, r0
   17868:	mov	r0, #0
   1786c:	b	1785c <__assert_fail@plt+0x5fcc>
   17870:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17874:	add	fp, sp, #24
   17878:	sub	sp, sp, #16
   1787c:	mov	r4, r1
   17880:	mov	r5, r0
   17884:	mov	r7, #0
   17888:	mov	r0, #0
   1788c:	mov	r1, r5
   17890:	mov	r2, #5
   17894:	bl	11578 <dcgettext@plt>
   17898:	cmp	r0, r5
   1789c:	beq	178a8 <__assert_fail@plt+0x6018>
   178a0:	sub	sp, fp, #24
   178a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178a8:	bl	19c50 <__assert_fail@plt+0x83c0>
   178ac:	mov	r6, r0
   178b0:	mov	r8, #56	; 0x38
   178b4:	mov	r0, #45	; 0x2d
   178b8:	stm	sp, {r0, r8}
   178bc:	str	r7, [sp, #8]
   178c0:	str	r7, [sp, #12]
   178c4:	mov	r0, r6
   178c8:	mov	r1, #85	; 0x55
   178cc:	mov	r2, #84	; 0x54
   178d0:	mov	r3, #70	; 0x46
   178d4:	bl	1796c <__assert_fail@plt+0x60dc>
   178d8:	cmp	r0, #0
   178dc:	beq	178f8 <__assert_fail@plt+0x6068>
   178e0:	ldrb	r1, [r5]
   178e4:	movw	r2, #46104	; 0xb418
   178e8:	movt	r2, #1
   178ec:	movw	r0, #46108	; 0xb41c
   178f0:	movt	r0, #1
   178f4:	b	1793c <__assert_fail@plt+0x60ac>
   178f8:	mov	r0, #48	; 0x30
   178fc:	mov	r1, #51	; 0x33
   17900:	str	r8, [sp]
   17904:	stmib	sp, {r0, r1}
   17908:	str	r0, [sp, #12]
   1790c:	mov	r0, r6
   17910:	mov	r1, #71	; 0x47
   17914:	mov	r2, #66	; 0x42
   17918:	mov	r3, #49	; 0x31
   1791c:	bl	1796c <__assert_fail@plt+0x60dc>
   17920:	cmp	r0, #0
   17924:	beq	1794c <__assert_fail@plt+0x60bc>
   17928:	ldrb	r1, [r5]
   1792c:	movw	r2, #46112	; 0xb420
   17930:	movt	r2, #1
   17934:	movw	r0, #46116	; 0xb424
   17938:	movt	r0, #1
   1793c:	cmp	r1, #96	; 0x60
   17940:	moveq	r0, r2
   17944:	sub	sp, fp, #24
   17948:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1794c:	movw	r1, #46100	; 0xb414
   17950:	movt	r1, #1
   17954:	movw	r0, #47449	; 0xb959
   17958:	movt	r0, #1
   1795c:	cmp	r4, #9
   17960:	moveq	r0, r1
   17964:	sub	sp, fp, #24
   17968:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1796c:	push	{r4, r5, r6, r7, fp, lr}
   17970:	add	fp, sp, #16
   17974:	sub	sp, sp, #16
   17978:	mov	r4, r3
   1797c:	mov	r5, r2
   17980:	mov	r7, r1
   17984:	mov	r6, r0
   17988:	mov	r0, r1
   1798c:	bl	195ec <__assert_fail@plt+0x7d5c>
   17990:	ldrb	r1, [r6]
   17994:	cmp	r0, #0
   17998:	andne	r1, r1, #223	; 0xdf
   1799c:	mov	r0, #0
   179a0:	cmp	r1, r7
   179a4:	bne	179e4 <__assert_fail@plt+0x6154>
   179a8:	cmp	r7, #0
   179ac:	moveq	r0, #1
   179b0:	subeq	sp, fp, #16
   179b4:	popeq	{r4, r5, r6, r7, fp, pc}
   179b8:	ldr	r0, [fp, #20]
   179bc:	ldr	r1, [fp, #16]
   179c0:	ldr	r2, [fp, #12]
   179c4:	ldr	r3, [fp, #8]
   179c8:	str	r2, [sp]
   179cc:	str	r1, [sp, #4]
   179d0:	str	r0, [sp, #8]
   179d4:	mov	r0, r6
   179d8:	mov	r1, r5
   179dc:	mov	r2, r4
   179e0:	bl	179ec <__assert_fail@plt+0x615c>
   179e4:	sub	sp, fp, #16
   179e8:	pop	{r4, r5, r6, r7, fp, pc}
   179ec:	push	{r4, r5, r6, r7, fp, lr}
   179f0:	add	fp, sp, #16
   179f4:	sub	sp, sp, #8
   179f8:	mov	r4, r3
   179fc:	mov	r5, r2
   17a00:	mov	r7, r1
   17a04:	mov	r6, r0
   17a08:	mov	r0, r1
   17a0c:	bl	195ec <__assert_fail@plt+0x7d5c>
   17a10:	ldrb	r1, [r6, #1]
   17a14:	cmp	r0, #0
   17a18:	andne	r1, r1, #223	; 0xdf
   17a1c:	mov	r0, #0
   17a20:	cmp	r1, r7
   17a24:	bne	17a5c <__assert_fail@plt+0x61cc>
   17a28:	cmp	r7, #0
   17a2c:	moveq	r0, #1
   17a30:	subeq	sp, fp, #16
   17a34:	popeq	{r4, r5, r6, r7, fp, pc}
   17a38:	ldr	r0, [fp, #16]
   17a3c:	ldr	r1, [fp, #12]
   17a40:	ldr	r3, [fp, #8]
   17a44:	str	r1, [sp]
   17a48:	str	r0, [sp, #4]
   17a4c:	mov	r0, r6
   17a50:	mov	r1, r5
   17a54:	mov	r2, r4
   17a58:	bl	17a64 <__assert_fail@plt+0x61d4>
   17a5c:	sub	sp, fp, #16
   17a60:	pop	{r4, r5, r6, r7, fp, pc}
   17a64:	push	{r4, r5, r6, r7, fp, lr}
   17a68:	add	fp, sp, #16
   17a6c:	sub	sp, sp, #8
   17a70:	mov	r4, r3
   17a74:	mov	r5, r2
   17a78:	mov	r7, r1
   17a7c:	mov	r6, r0
   17a80:	mov	r0, r1
   17a84:	bl	195ec <__assert_fail@plt+0x7d5c>
   17a88:	ldrb	r1, [r6, #2]
   17a8c:	cmp	r0, #0
   17a90:	andne	r1, r1, #223	; 0xdf
   17a94:	mov	r0, #0
   17a98:	cmp	r1, r7
   17a9c:	bne	17acc <__assert_fail@plt+0x623c>
   17aa0:	cmp	r7, #0
   17aa4:	moveq	r0, #1
   17aa8:	subeq	sp, fp, #16
   17aac:	popeq	{r4, r5, r6, r7, fp, pc}
   17ab0:	ldr	r0, [fp, #12]
   17ab4:	ldr	r3, [fp, #8]
   17ab8:	str	r0, [sp]
   17abc:	mov	r0, r6
   17ac0:	mov	r1, r5
   17ac4:	mov	r2, r4
   17ac8:	bl	17ad4 <__assert_fail@plt+0x6244>
   17acc:	sub	sp, fp, #16
   17ad0:	pop	{r4, r5, r6, r7, fp, pc}
   17ad4:	push	{r4, r5, r6, r7, fp, lr}
   17ad8:	add	fp, sp, #16
   17adc:	mov	r4, r3
   17ae0:	mov	r5, r2
   17ae4:	mov	r7, r1
   17ae8:	mov	r6, r0
   17aec:	mov	r0, r1
   17af0:	bl	195ec <__assert_fail@plt+0x7d5c>
   17af4:	ldrb	r1, [r6, #3]
   17af8:	ldr	r3, [fp, #8]
   17afc:	cmp	r0, #0
   17b00:	andne	r1, r1, #223	; 0xdf
   17b04:	mov	r0, #0
   17b08:	cmp	r1, r7
   17b0c:	popne	{r4, r5, r6, r7, fp, pc}
   17b10:	cmp	r7, #0
   17b14:	beq	17b2c <__assert_fail@plt+0x629c>
   17b18:	mov	r0, r6
   17b1c:	mov	r1, r5
   17b20:	mov	r2, r4
   17b24:	pop	{r4, r5, r6, r7, fp, lr}
   17b28:	b	17b34 <__assert_fail@plt+0x62a4>
   17b2c:	mov	r0, #1
   17b30:	pop	{r4, r5, r6, r7, fp, pc}
   17b34:	push	{r4, r5, r6, r7, fp, lr}
   17b38:	add	fp, sp, #16
   17b3c:	mov	r4, r3
   17b40:	mov	r5, r2
   17b44:	mov	r7, r1
   17b48:	mov	r6, r0
   17b4c:	mov	r0, r1
   17b50:	bl	195ec <__assert_fail@plt+0x7d5c>
   17b54:	ldrb	r1, [r6, #4]
   17b58:	cmp	r0, #0
   17b5c:	andne	r1, r1, #223	; 0xdf
   17b60:	mov	r0, #0
   17b64:	cmp	r1, r7
   17b68:	popne	{r4, r5, r6, r7, fp, pc}
   17b6c:	cmp	r7, #0
   17b70:	beq	17b88 <__assert_fail@plt+0x62f8>
   17b74:	mov	r0, r6
   17b78:	mov	r1, r5
   17b7c:	mov	r2, r4
   17b80:	pop	{r4, r5, r6, r7, fp, lr}
   17b84:	b	17b90 <__assert_fail@plt+0x6300>
   17b88:	mov	r0, #1
   17b8c:	pop	{r4, r5, r6, r7, fp, pc}
   17b90:	push	{r4, r5, r6, sl, fp, lr}
   17b94:	add	fp, sp, #16
   17b98:	mov	r4, r2
   17b9c:	mov	r6, r1
   17ba0:	mov	r5, r0
   17ba4:	mov	r0, r1
   17ba8:	bl	195ec <__assert_fail@plt+0x7d5c>
   17bac:	ldrb	r1, [r5, #5]
   17bb0:	cmp	r0, #0
   17bb4:	andne	r1, r1, #223	; 0xdf
   17bb8:	mov	r0, #0
   17bbc:	cmp	r1, r6
   17bc0:	popne	{r4, r5, r6, sl, fp, pc}
   17bc4:	cmp	r6, #0
   17bc8:	beq	17bdc <__assert_fail@plt+0x634c>
   17bcc:	mov	r0, r5
   17bd0:	mov	r1, r4
   17bd4:	pop	{r4, r5, r6, sl, fp, lr}
   17bd8:	b	17be4 <__assert_fail@plt+0x6354>
   17bdc:	mov	r0, #1
   17be0:	pop	{r4, r5, r6, sl, fp, pc}
   17be4:	push	{r4, r5, fp, lr}
   17be8:	add	fp, sp, #8
   17bec:	mov	r5, r1
   17bf0:	mov	r4, r0
   17bf4:	mov	r0, r1
   17bf8:	bl	195ec <__assert_fail@plt+0x7d5c>
   17bfc:	ldrb	r1, [r4, #6]
   17c00:	cmp	r0, #0
   17c04:	andne	r1, r1, #223	; 0xdf
   17c08:	mov	r0, #0
   17c0c:	cmp	r1, r5
   17c10:	popne	{r4, r5, fp, pc}
   17c14:	cmp	r5, #0
   17c18:	beq	17c28 <__assert_fail@plt+0x6398>
   17c1c:	mov	r0, r4
   17c20:	pop	{r4, r5, fp, lr}
   17c24:	b	17c30 <__assert_fail@plt+0x63a0>
   17c28:	mov	r0, #1
   17c2c:	pop	{r4, r5, fp, pc}
   17c30:	push	{r4, sl, fp, lr}
   17c34:	add	fp, sp, #8
   17c38:	mov	r4, r0
   17c3c:	mov	r0, #0
   17c40:	bl	195ec <__assert_fail@plt+0x7d5c>
   17c44:	ldrb	r1, [r4, #7]
   17c48:	cmp	r0, #0
   17c4c:	beq	17c64 <__assert_fail@plt+0x63d4>
   17c50:	tst	r1, #223	; 0xdf
   17c54:	moveq	r0, #1
   17c58:	popeq	{r4, sl, fp, pc}
   17c5c:	mov	r0, #0
   17c60:	pop	{r4, sl, fp, pc}
   17c64:	cmp	r1, #0
   17c68:	moveq	r0, #1
   17c6c:	popeq	{r4, sl, fp, pc}
   17c70:	mov	r0, #0
   17c74:	pop	{r4, sl, fp, pc}
   17c78:	push	{r4, sl, fp, lr}
   17c7c:	add	fp, sp, #8
   17c80:	sub	sp, sp, #104	; 0x68
   17c84:	mov	r4, r0
   17c88:	movw	r0, #47173	; 0xb845
   17c8c:	movt	r0, #1
   17c90:	mov	r1, sp
   17c94:	bl	1a4a8 <__assert_fail@plt+0x8c18>
   17c98:	mov	r1, r0
   17c9c:	mov	r0, #0
   17ca0:	cmp	r1, #0
   17ca4:	beq	17cb0 <__assert_fail@plt+0x6420>
   17ca8:	sub	sp, fp, #8
   17cac:	pop	{r4, sl, fp, pc}
   17cb0:	ldr	r0, [sp, #96]	; 0x60
   17cb4:	ldr	r1, [sp, #100]	; 0x64
   17cb8:	ldm	sp, {r2, r3}
   17cbc:	stm	r4, {r0, r1, r2, r3}
   17cc0:	mov	r0, r4
   17cc4:	sub	sp, fp, #8
   17cc8:	pop	{r4, sl, fp, pc}
   17ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cd0:	add	fp, sp, #28
   17cd4:	sub	sp, sp, #964	; 0x3c4
   17cd8:	sub	sp, sp, #3072	; 0xc00
   17cdc:	mov	r4, r2
   17ce0:	mov	r5, r1
   17ce4:	cmn	r0, #100	; 0x64
   17ce8:	beq	17cfc <__assert_fail@plt+0x646c>
   17cec:	mov	r7, r0
   17cf0:	ldrb	r0, [r5]
   17cf4:	cmp	r0, #47	; 0x2f
   17cf8:	bne	17d10 <__assert_fail@plt+0x6480>
   17cfc:	mov	r0, r5
   17d00:	mov	r1, r4
   17d04:	sub	sp, fp, #28
   17d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d0c:	b	185ac <__assert_fail@plt+0x6d1c>
   17d10:	mov	sl, sp
   17d14:	mov	r0, sl
   17d18:	mov	r1, r7
   17d1c:	mov	r2, r5
   17d20:	bl	190c0 <__assert_fail@plt+0x7830>
   17d24:	cmp	r0, #0
   17d28:	beq	17e14 <__assert_fail@plt+0x6584>
   17d2c:	mov	r6, r0
   17d30:	mov	r1, r4
   17d34:	bl	185ac <__assert_fail@plt+0x6d1c>
   17d38:	mov	r9, r0
   17d3c:	bl	11710 <__errno_location@plt>
   17d40:	mov	r8, r0
   17d44:	ldr	r2, [r0]
   17d48:	cmp	r6, sl
   17d4c:	beq	17d60 <__assert_fail@plt+0x64d0>
   17d50:	mov	r0, r6
   17d54:	mov	r6, r2
   17d58:	bl	19b34 <__assert_fail@plt+0x82a4>
   17d5c:	mov	r2, r6
   17d60:	cmn	r9, #1
   17d64:	bne	17ee0 <__assert_fail@plt+0x6650>
   17d68:	sub	r0, r2, #1
   17d6c:	cmp	r0, #37	; 0x25
   17d70:	bhi	17ed4 <__assert_fail@plt+0x6644>
   17d74:	add	r1, pc, #0
   17d78:	ldr	pc, [r1, r0, lsl #2]
   17d7c:	andeq	r7, r1, r4, lsl lr
   17d80:	andeq	r7, r1, r4, lsl lr
   17d84:	ldrdeq	r7, [r1], -ip
   17d88:	ldrdeq	r7, [r1], -ip
   17d8c:	ldrdeq	r7, [r1], -ip
   17d90:	ldrdeq	r7, [r1], -ip
   17d94:	ldrdeq	r7, [r1], -ip
   17d98:	ldrdeq	r7, [r1], -ip
   17d9c:	ldrdeq	r7, [r1], -ip
   17da0:	ldrdeq	r7, [r1], -ip
   17da4:	ldrdeq	r7, [r1], -ip
   17da8:	ldrdeq	r7, [r1], -ip
   17dac:	andeq	r7, r1, r4, lsl lr
   17db0:	ldrdeq	r7, [r1], -ip
   17db4:	ldrdeq	r7, [r1], -ip
   17db8:	ldrdeq	r7, [r1], -ip
   17dbc:	ldrdeq	r7, [r1], -ip
   17dc0:	ldrdeq	r7, [r1], -ip
   17dc4:	ldrdeq	r7, [r1], -ip
   17dc8:	andeq	r7, r1, r4, lsl lr
   17dcc:	ldrdeq	r7, [r1], -ip
   17dd0:	ldrdeq	r7, [r1], -ip
   17dd4:	ldrdeq	r7, [r1], -ip
   17dd8:	ldrdeq	r7, [r1], -ip
   17ddc:	ldrdeq	r7, [r1], -ip
   17de0:	ldrdeq	r7, [r1], -ip
   17de4:	ldrdeq	r7, [r1], -ip
   17de8:	ldrdeq	r7, [r1], -ip
   17dec:	ldrdeq	r7, [r1], -ip
   17df0:	ldrdeq	r7, [r1], -ip
   17df4:	ldrdeq	r7, [r1], -ip
   17df8:	ldrdeq	r7, [r1], -ip
   17dfc:	ldrdeq	r7, [r1], -ip
   17e00:	ldrdeq	r7, [r1], -ip
   17e04:	ldrdeq	r7, [r1], -ip
   17e08:	ldrdeq	r7, [r1], -ip
   17e0c:	ldrdeq	r7, [r1], -ip
   17e10:	andeq	r7, r1, r4, lsl lr
   17e14:	mov	r0, sp
   17e18:	bl	19da4 <__assert_fail@plt+0x8514>
   17e1c:	cmp	r0, #0
   17e20:	bne	17eec <__assert_fail@plt+0x665c>
   17e24:	cmp	r7, #0
   17e28:	blt	17e54 <__assert_fail@plt+0x65c4>
   17e2c:	ldr	r0, [sp]
   17e30:	cmp	r0, r7
   17e34:	bne	17e54 <__assert_fail@plt+0x65c4>
   17e38:	mov	r0, sp
   17e3c:	bl	19e1c <__assert_fail@plt+0x858c>
   17e40:	bl	11710 <__errno_location@plt>
   17e44:	mov	r1, #9
   17e48:	str	r1, [r0]
   17e4c:	mvn	r9, #0
   17e50:	b	17ee0 <__assert_fail@plt+0x6650>
   17e54:	mov	r0, r7
   17e58:	bl	117f4 <fchdir@plt>
   17e5c:	cmp	r0, #0
   17e60:	beq	17e84 <__assert_fail@plt+0x65f4>
   17e64:	bl	11710 <__errno_location@plt>
   17e68:	mov	r4, r0
   17e6c:	ldr	r5, [r0]
   17e70:	mov	r0, sp
   17e74:	bl	19e1c <__assert_fail@plt+0x858c>
   17e78:	str	r5, [r4]
   17e7c:	mvn	r9, #0
   17e80:	b	17ee0 <__assert_fail@plt+0x6650>
   17e84:	mov	r0, r5
   17e88:	mov	r1, r4
   17e8c:	bl	185ac <__assert_fail@plt+0x6d1c>
   17e90:	mov	r9, r0
   17e94:	mov	r4, #0
   17e98:	cmn	r0, #1
   17e9c:	bne	17ea8 <__assert_fail@plt+0x6618>
   17ea0:	bl	11710 <__errno_location@plt>
   17ea4:	ldr	r4, [r0]
   17ea8:	mov	r0, sp
   17eac:	bl	19e00 <__assert_fail@plt+0x8570>
   17eb0:	cmp	r0, #0
   17eb4:	bne	17ef8 <__assert_fail@plt+0x6668>
   17eb8:	mov	r0, sp
   17ebc:	bl	19e1c <__assert_fail@plt+0x858c>
   17ec0:	cmp	r4, #0
   17ec4:	beq	17ee0 <__assert_fail@plt+0x6650>
   17ec8:	bl	11710 <__errno_location@plt>
   17ecc:	str	r4, [r0]
   17ed0:	b	17ee0 <__assert_fail@plt+0x6650>
   17ed4:	cmp	r2, #95	; 0x5f
   17ed8:	beq	17e14 <__assert_fail@plt+0x6584>
   17edc:	str	r2, [r8]
   17ee0:	mov	r0, r9
   17ee4:	sub	sp, fp, #28
   17ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17eec:	bl	11710 <__errno_location@plt>
   17ef0:	ldr	r0, [r0]
   17ef4:	bl	19ce8 <__assert_fail@plt+0x8458>
   17ef8:	bl	11710 <__errno_location@plt>
   17efc:	ldr	r0, [r0]
   17f00:	bl	19d28 <__assert_fail@plt+0x8498>
   17f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f08:	add	fp, sp, #28
   17f0c:	sub	sp, sp, #964	; 0x3c4
   17f10:	sub	sp, sp, #3072	; 0xc00
   17f14:	mov	r4, r2
   17f18:	mov	r5, r1
   17f1c:	cmn	r0, #100	; 0x64
   17f20:	beq	17f34 <__assert_fail@plt+0x66a4>
   17f24:	mov	r7, r0
   17f28:	ldrb	r0, [r5]
   17f2c:	cmp	r0, #47	; 0x2f
   17f30:	bne	17f48 <__assert_fail@plt+0x66b8>
   17f34:	mov	r0, r5
   17f38:	mov	r1, r4
   17f3c:	sub	sp, fp, #28
   17f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f44:	b	18638 <__assert_fail@plt+0x6da8>
   17f48:	mov	sl, sp
   17f4c:	mov	r0, sl
   17f50:	mov	r1, r7
   17f54:	mov	r2, r5
   17f58:	bl	190c0 <__assert_fail@plt+0x7830>
   17f5c:	cmp	r0, #0
   17f60:	beq	1804c <__assert_fail@plt+0x67bc>
   17f64:	mov	r6, r0
   17f68:	mov	r1, r4
   17f6c:	bl	18638 <__assert_fail@plt+0x6da8>
   17f70:	mov	r9, r0
   17f74:	bl	11710 <__errno_location@plt>
   17f78:	mov	r8, r0
   17f7c:	ldr	r2, [r0]
   17f80:	cmp	r6, sl
   17f84:	beq	17f98 <__assert_fail@plt+0x6708>
   17f88:	mov	r0, r6
   17f8c:	mov	r6, r2
   17f90:	bl	19b34 <__assert_fail@plt+0x82a4>
   17f94:	mov	r2, r6
   17f98:	cmn	r9, #1
   17f9c:	bne	18118 <__assert_fail@plt+0x6888>
   17fa0:	sub	r0, r2, #1
   17fa4:	cmp	r0, #37	; 0x25
   17fa8:	bhi	1810c <__assert_fail@plt+0x687c>
   17fac:	add	r1, pc, #0
   17fb0:	ldr	pc, [r1, r0, lsl #2]
   17fb4:	andeq	r8, r1, ip, asr #32
   17fb8:	andeq	r8, r1, ip, asr #32
   17fbc:	andeq	r8, r1, r4, lsl r1
   17fc0:	andeq	r8, r1, r4, lsl r1
   17fc4:	andeq	r8, r1, r4, lsl r1
   17fc8:	andeq	r8, r1, r4, lsl r1
   17fcc:	andeq	r8, r1, r4, lsl r1
   17fd0:	andeq	r8, r1, r4, lsl r1
   17fd4:	andeq	r8, r1, r4, lsl r1
   17fd8:	andeq	r8, r1, r4, lsl r1
   17fdc:	andeq	r8, r1, r4, lsl r1
   17fe0:	andeq	r8, r1, r4, lsl r1
   17fe4:	andeq	r8, r1, ip, asr #32
   17fe8:	andeq	r8, r1, r4, lsl r1
   17fec:	andeq	r8, r1, r4, lsl r1
   17ff0:	andeq	r8, r1, r4, lsl r1
   17ff4:	andeq	r8, r1, r4, lsl r1
   17ff8:	andeq	r8, r1, r4, lsl r1
   17ffc:	andeq	r8, r1, r4, lsl r1
   18000:	andeq	r8, r1, ip, asr #32
   18004:	andeq	r8, r1, r4, lsl r1
   18008:	andeq	r8, r1, r4, lsl r1
   1800c:	andeq	r8, r1, r4, lsl r1
   18010:	andeq	r8, r1, r4, lsl r1
   18014:	andeq	r8, r1, r4, lsl r1
   18018:	andeq	r8, r1, r4, lsl r1
   1801c:	andeq	r8, r1, r4, lsl r1
   18020:	andeq	r8, r1, r4, lsl r1
   18024:	andeq	r8, r1, r4, lsl r1
   18028:	andeq	r8, r1, r4, lsl r1
   1802c:	andeq	r8, r1, r4, lsl r1
   18030:	andeq	r8, r1, r4, lsl r1
   18034:	andeq	r8, r1, r4, lsl r1
   18038:	andeq	r8, r1, r4, lsl r1
   1803c:	andeq	r8, r1, r4, lsl r1
   18040:	andeq	r8, r1, r4, lsl r1
   18044:	andeq	r8, r1, r4, lsl r1
   18048:	andeq	r8, r1, ip, asr #32
   1804c:	mov	r0, sp
   18050:	bl	19da4 <__assert_fail@plt+0x8514>
   18054:	cmp	r0, #0
   18058:	bne	18124 <__assert_fail@plt+0x6894>
   1805c:	cmp	r7, #0
   18060:	blt	1808c <__assert_fail@plt+0x67fc>
   18064:	ldr	r0, [sp]
   18068:	cmp	r0, r7
   1806c:	bne	1808c <__assert_fail@plt+0x67fc>
   18070:	mov	r0, sp
   18074:	bl	19e1c <__assert_fail@plt+0x858c>
   18078:	bl	11710 <__errno_location@plt>
   1807c:	mov	r1, #9
   18080:	str	r1, [r0]
   18084:	mvn	r9, #0
   18088:	b	18118 <__assert_fail@plt+0x6888>
   1808c:	mov	r0, r7
   18090:	bl	117f4 <fchdir@plt>
   18094:	cmp	r0, #0
   18098:	beq	180bc <__assert_fail@plt+0x682c>
   1809c:	bl	11710 <__errno_location@plt>
   180a0:	mov	r4, r0
   180a4:	ldr	r5, [r0]
   180a8:	mov	r0, sp
   180ac:	bl	19e1c <__assert_fail@plt+0x858c>
   180b0:	str	r5, [r4]
   180b4:	mvn	r9, #0
   180b8:	b	18118 <__assert_fail@plt+0x6888>
   180bc:	mov	r0, r5
   180c0:	mov	r1, r4
   180c4:	bl	18638 <__assert_fail@plt+0x6da8>
   180c8:	mov	r9, r0
   180cc:	mov	r4, #0
   180d0:	cmn	r0, #1
   180d4:	bne	180e0 <__assert_fail@plt+0x6850>
   180d8:	bl	11710 <__errno_location@plt>
   180dc:	ldr	r4, [r0]
   180e0:	mov	r0, sp
   180e4:	bl	19e00 <__assert_fail@plt+0x8570>
   180e8:	cmp	r0, #0
   180ec:	bne	18130 <__assert_fail@plt+0x68a0>
   180f0:	mov	r0, sp
   180f4:	bl	19e1c <__assert_fail@plt+0x858c>
   180f8:	cmp	r4, #0
   180fc:	beq	18118 <__assert_fail@plt+0x6888>
   18100:	bl	11710 <__errno_location@plt>
   18104:	str	r4, [r0]
   18108:	b	18118 <__assert_fail@plt+0x6888>
   1810c:	cmp	r2, #95	; 0x5f
   18110:	beq	1804c <__assert_fail@plt+0x67bc>
   18114:	str	r2, [r8]
   18118:	mov	r0, r9
   1811c:	sub	sp, fp, #28
   18120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18124:	bl	11710 <__errno_location@plt>
   18128:	ldr	r0, [r0]
   1812c:	bl	19ce8 <__assert_fail@plt+0x8458>
   18130:	bl	11710 <__errno_location@plt>
   18134:	ldr	r0, [r0]
   18138:	bl	19d28 <__assert_fail@plt+0x8498>
   1813c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18140:	add	fp, sp, #28
   18144:	sub	sp, sp, #964	; 0x3c4
   18148:	sub	sp, sp, #3072	; 0xc00
   1814c:	mov	r4, r2
   18150:	mov	r5, r1
   18154:	cmn	r0, #100	; 0x64
   18158:	beq	1816c <__assert_fail@plt+0x68dc>
   1815c:	mov	r7, r0
   18160:	ldrb	r0, [r5]
   18164:	cmp	r0, #47	; 0x2f
   18168:	bne	18180 <__assert_fail@plt+0x68f0>
   1816c:	mov	r0, r5
   18170:	mov	r1, r4
   18174:	sub	sp, fp, #28
   18178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1817c:	b	11770 <setfilecon@plt>
   18180:	mov	sl, sp
   18184:	mov	r0, sl
   18188:	mov	r1, r7
   1818c:	mov	r2, r5
   18190:	bl	190c0 <__assert_fail@plt+0x7830>
   18194:	cmp	r0, #0
   18198:	beq	18284 <__assert_fail@plt+0x69f4>
   1819c:	mov	r6, r0
   181a0:	mov	r1, r4
   181a4:	bl	11770 <setfilecon@plt>
   181a8:	mov	r9, r0
   181ac:	bl	11710 <__errno_location@plt>
   181b0:	mov	r8, r0
   181b4:	ldr	r2, [r0]
   181b8:	cmp	r6, sl
   181bc:	beq	181d0 <__assert_fail@plt+0x6940>
   181c0:	mov	r0, r6
   181c4:	mov	r6, r2
   181c8:	bl	19b34 <__assert_fail@plt+0x82a4>
   181cc:	mov	r2, r6
   181d0:	cmn	r9, #1
   181d4:	bne	18350 <__assert_fail@plt+0x6ac0>
   181d8:	sub	r0, r2, #1
   181dc:	cmp	r0, #37	; 0x25
   181e0:	bhi	18344 <__assert_fail@plt+0x6ab4>
   181e4:	add	r1, pc, #0
   181e8:	ldr	pc, [r1, r0, lsl #2]
   181ec:	andeq	r8, r1, r4, lsl #5
   181f0:	andeq	r8, r1, r4, lsl #5
   181f4:	andeq	r8, r1, ip, asr #6
   181f8:	andeq	r8, r1, ip, asr #6
   181fc:	andeq	r8, r1, ip, asr #6
   18200:	andeq	r8, r1, ip, asr #6
   18204:	andeq	r8, r1, ip, asr #6
   18208:	andeq	r8, r1, ip, asr #6
   1820c:	andeq	r8, r1, ip, asr #6
   18210:	andeq	r8, r1, ip, asr #6
   18214:	andeq	r8, r1, ip, asr #6
   18218:	andeq	r8, r1, ip, asr #6
   1821c:	andeq	r8, r1, r4, lsl #5
   18220:	andeq	r8, r1, ip, asr #6
   18224:	andeq	r8, r1, ip, asr #6
   18228:	andeq	r8, r1, ip, asr #6
   1822c:	andeq	r8, r1, ip, asr #6
   18230:	andeq	r8, r1, ip, asr #6
   18234:	andeq	r8, r1, ip, asr #6
   18238:	andeq	r8, r1, r4, lsl #5
   1823c:	andeq	r8, r1, ip, asr #6
   18240:	andeq	r8, r1, ip, asr #6
   18244:	andeq	r8, r1, ip, asr #6
   18248:	andeq	r8, r1, ip, asr #6
   1824c:	andeq	r8, r1, ip, asr #6
   18250:	andeq	r8, r1, ip, asr #6
   18254:	andeq	r8, r1, ip, asr #6
   18258:	andeq	r8, r1, ip, asr #6
   1825c:	andeq	r8, r1, ip, asr #6
   18260:	andeq	r8, r1, ip, asr #6
   18264:	andeq	r8, r1, ip, asr #6
   18268:	andeq	r8, r1, ip, asr #6
   1826c:	andeq	r8, r1, ip, asr #6
   18270:	andeq	r8, r1, ip, asr #6
   18274:	andeq	r8, r1, ip, asr #6
   18278:	andeq	r8, r1, ip, asr #6
   1827c:	andeq	r8, r1, ip, asr #6
   18280:	andeq	r8, r1, r4, lsl #5
   18284:	mov	r0, sp
   18288:	bl	19da4 <__assert_fail@plt+0x8514>
   1828c:	cmp	r0, #0
   18290:	bne	1835c <__assert_fail@plt+0x6acc>
   18294:	cmp	r7, #0
   18298:	blt	182c4 <__assert_fail@plt+0x6a34>
   1829c:	ldr	r0, [sp]
   182a0:	cmp	r0, r7
   182a4:	bne	182c4 <__assert_fail@plt+0x6a34>
   182a8:	mov	r0, sp
   182ac:	bl	19e1c <__assert_fail@plt+0x858c>
   182b0:	bl	11710 <__errno_location@plt>
   182b4:	mov	r1, #9
   182b8:	str	r1, [r0]
   182bc:	mvn	r9, #0
   182c0:	b	18350 <__assert_fail@plt+0x6ac0>
   182c4:	mov	r0, r7
   182c8:	bl	117f4 <fchdir@plt>
   182cc:	cmp	r0, #0
   182d0:	beq	182f4 <__assert_fail@plt+0x6a64>
   182d4:	bl	11710 <__errno_location@plt>
   182d8:	mov	r4, r0
   182dc:	ldr	r5, [r0]
   182e0:	mov	r0, sp
   182e4:	bl	19e1c <__assert_fail@plt+0x858c>
   182e8:	str	r5, [r4]
   182ec:	mvn	r9, #0
   182f0:	b	18350 <__assert_fail@plt+0x6ac0>
   182f4:	mov	r0, r5
   182f8:	mov	r1, r4
   182fc:	bl	11770 <setfilecon@plt>
   18300:	mov	r9, r0
   18304:	mov	r4, #0
   18308:	cmn	r0, #1
   1830c:	bne	18318 <__assert_fail@plt+0x6a88>
   18310:	bl	11710 <__errno_location@plt>
   18314:	ldr	r4, [r0]
   18318:	mov	r0, sp
   1831c:	bl	19e00 <__assert_fail@plt+0x8570>
   18320:	cmp	r0, #0
   18324:	bne	18368 <__assert_fail@plt+0x6ad8>
   18328:	mov	r0, sp
   1832c:	bl	19e1c <__assert_fail@plt+0x858c>
   18330:	cmp	r4, #0
   18334:	beq	18350 <__assert_fail@plt+0x6ac0>
   18338:	bl	11710 <__errno_location@plt>
   1833c:	str	r4, [r0]
   18340:	b	18350 <__assert_fail@plt+0x6ac0>
   18344:	cmp	r2, #95	; 0x5f
   18348:	beq	18284 <__assert_fail@plt+0x69f4>
   1834c:	str	r2, [r8]
   18350:	mov	r0, r9
   18354:	sub	sp, fp, #28
   18358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1835c:	bl	11710 <__errno_location@plt>
   18360:	ldr	r0, [r0]
   18364:	bl	19ce8 <__assert_fail@plt+0x8458>
   18368:	bl	11710 <__errno_location@plt>
   1836c:	ldr	r0, [r0]
   18370:	bl	19d28 <__assert_fail@plt+0x8498>
   18374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18378:	add	fp, sp, #28
   1837c:	sub	sp, sp, #964	; 0x3c4
   18380:	sub	sp, sp, #3072	; 0xc00
   18384:	mov	r4, r2
   18388:	mov	r5, r1
   1838c:	cmn	r0, #100	; 0x64
   18390:	beq	183a4 <__assert_fail@plt+0x6b14>
   18394:	mov	r7, r0
   18398:	ldrb	r0, [r5]
   1839c:	cmp	r0, #47	; 0x2f
   183a0:	bne	183b8 <__assert_fail@plt+0x6b28>
   183a4:	mov	r0, r5
   183a8:	mov	r1, r4
   183ac:	sub	sp, fp, #28
   183b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183b4:	b	1150c <lsetfilecon@plt>
   183b8:	mov	sl, sp
   183bc:	mov	r0, sl
   183c0:	mov	r1, r7
   183c4:	mov	r2, r5
   183c8:	bl	190c0 <__assert_fail@plt+0x7830>
   183cc:	cmp	r0, #0
   183d0:	beq	184bc <__assert_fail@plt+0x6c2c>
   183d4:	mov	r6, r0
   183d8:	mov	r1, r4
   183dc:	bl	1150c <lsetfilecon@plt>
   183e0:	mov	r9, r0
   183e4:	bl	11710 <__errno_location@plt>
   183e8:	mov	r8, r0
   183ec:	ldr	r2, [r0]
   183f0:	cmp	r6, sl
   183f4:	beq	18408 <__assert_fail@plt+0x6b78>
   183f8:	mov	r0, r6
   183fc:	mov	r6, r2
   18400:	bl	19b34 <__assert_fail@plt+0x82a4>
   18404:	mov	r2, r6
   18408:	cmn	r9, #1
   1840c:	bne	18588 <__assert_fail@plt+0x6cf8>
   18410:	sub	r0, r2, #1
   18414:	cmp	r0, #37	; 0x25
   18418:	bhi	1857c <__assert_fail@plt+0x6cec>
   1841c:	add	r1, pc, #0
   18420:	ldr	pc, [r1, r0, lsl #2]
   18424:			; <UNDEFINED> instruction: 0x000184bc
   18428:			; <UNDEFINED> instruction: 0x000184bc
   1842c:	andeq	r8, r1, r4, lsl #11
   18430:	andeq	r8, r1, r4, lsl #11
   18434:	andeq	r8, r1, r4, lsl #11
   18438:	andeq	r8, r1, r4, lsl #11
   1843c:	andeq	r8, r1, r4, lsl #11
   18440:	andeq	r8, r1, r4, lsl #11
   18444:	andeq	r8, r1, r4, lsl #11
   18448:	andeq	r8, r1, r4, lsl #11
   1844c:	andeq	r8, r1, r4, lsl #11
   18450:	andeq	r8, r1, r4, lsl #11
   18454:			; <UNDEFINED> instruction: 0x000184bc
   18458:	andeq	r8, r1, r4, lsl #11
   1845c:	andeq	r8, r1, r4, lsl #11
   18460:	andeq	r8, r1, r4, lsl #11
   18464:	andeq	r8, r1, r4, lsl #11
   18468:	andeq	r8, r1, r4, lsl #11
   1846c:	andeq	r8, r1, r4, lsl #11
   18470:			; <UNDEFINED> instruction: 0x000184bc
   18474:	andeq	r8, r1, r4, lsl #11
   18478:	andeq	r8, r1, r4, lsl #11
   1847c:	andeq	r8, r1, r4, lsl #11
   18480:	andeq	r8, r1, r4, lsl #11
   18484:	andeq	r8, r1, r4, lsl #11
   18488:	andeq	r8, r1, r4, lsl #11
   1848c:	andeq	r8, r1, r4, lsl #11
   18490:	andeq	r8, r1, r4, lsl #11
   18494:	andeq	r8, r1, r4, lsl #11
   18498:	andeq	r8, r1, r4, lsl #11
   1849c:	andeq	r8, r1, r4, lsl #11
   184a0:	andeq	r8, r1, r4, lsl #11
   184a4:	andeq	r8, r1, r4, lsl #11
   184a8:	andeq	r8, r1, r4, lsl #11
   184ac:	andeq	r8, r1, r4, lsl #11
   184b0:	andeq	r8, r1, r4, lsl #11
   184b4:	andeq	r8, r1, r4, lsl #11
   184b8:			; <UNDEFINED> instruction: 0x000184bc
   184bc:	mov	r0, sp
   184c0:	bl	19da4 <__assert_fail@plt+0x8514>
   184c4:	cmp	r0, #0
   184c8:	bne	18594 <__assert_fail@plt+0x6d04>
   184cc:	cmp	r7, #0
   184d0:	blt	184fc <__assert_fail@plt+0x6c6c>
   184d4:	ldr	r0, [sp]
   184d8:	cmp	r0, r7
   184dc:	bne	184fc <__assert_fail@plt+0x6c6c>
   184e0:	mov	r0, sp
   184e4:	bl	19e1c <__assert_fail@plt+0x858c>
   184e8:	bl	11710 <__errno_location@plt>
   184ec:	mov	r1, #9
   184f0:	str	r1, [r0]
   184f4:	mvn	r9, #0
   184f8:	b	18588 <__assert_fail@plt+0x6cf8>
   184fc:	mov	r0, r7
   18500:	bl	117f4 <fchdir@plt>
   18504:	cmp	r0, #0
   18508:	beq	1852c <__assert_fail@plt+0x6c9c>
   1850c:	bl	11710 <__errno_location@plt>
   18510:	mov	r4, r0
   18514:	ldr	r5, [r0]
   18518:	mov	r0, sp
   1851c:	bl	19e1c <__assert_fail@plt+0x858c>
   18520:	str	r5, [r4]
   18524:	mvn	r9, #0
   18528:	b	18588 <__assert_fail@plt+0x6cf8>
   1852c:	mov	r0, r5
   18530:	mov	r1, r4
   18534:	bl	1150c <lsetfilecon@plt>
   18538:	mov	r9, r0
   1853c:	mov	r4, #0
   18540:	cmn	r0, #1
   18544:	bne	18550 <__assert_fail@plt+0x6cc0>
   18548:	bl	11710 <__errno_location@plt>
   1854c:	ldr	r4, [r0]
   18550:	mov	r0, sp
   18554:	bl	19e00 <__assert_fail@plt+0x8570>
   18558:	cmp	r0, #0
   1855c:	bne	185a0 <__assert_fail@plt+0x6d10>
   18560:	mov	r0, sp
   18564:	bl	19e1c <__assert_fail@plt+0x858c>
   18568:	cmp	r4, #0
   1856c:	beq	18588 <__assert_fail@plt+0x6cf8>
   18570:	bl	11710 <__errno_location@plt>
   18574:	str	r4, [r0]
   18578:	b	18588 <__assert_fail@plt+0x6cf8>
   1857c:	cmp	r2, #95	; 0x5f
   18580:	beq	184bc <__assert_fail@plt+0x6c2c>
   18584:	str	r2, [r8]
   18588:	mov	r0, r9
   1858c:	sub	sp, fp, #28
   18590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18594:	bl	11710 <__errno_location@plt>
   18598:	ldr	r0, [r0]
   1859c:	bl	19ce8 <__assert_fail@plt+0x8458>
   185a0:	bl	11710 <__errno_location@plt>
   185a4:	ldr	r0, [r0]
   185a8:	bl	19d28 <__assert_fail@plt+0x8498>
   185ac:	push	{r4, sl, fp, lr}
   185b0:	add	fp, sp, #8
   185b4:	mov	r4, r1
   185b8:	bl	116e0 <getfilecon@plt>
   185bc:	mov	r1, r4
   185c0:	pop	{r4, sl, fp, lr}
   185c4:	b	185c8 <__assert_fail@plt+0x6d38>
   185c8:	push	{r4, r5, fp, lr}
   185cc:	add	fp, sp, #8
   185d0:	cmp	r0, #10
   185d4:	beq	185ec <__assert_fail@plt+0x6d5c>
   185d8:	cmp	r0, #0
   185dc:	bne	18634 <__assert_fail@plt+0x6da4>
   185e0:	bl	11710 <__errno_location@plt>
   185e4:	mov	r1, #95	; 0x5f
   185e8:	b	1862c <__assert_fail@plt+0x6d9c>
   185ec:	mov	r4, r1
   185f0:	ldr	r5, [r1]
   185f4:	movw	r1, #46204	; 0xb47c
   185f8:	movt	r1, #1
   185fc:	mov	r0, r5
   18600:	bl	114f4 <strcmp@plt>
   18604:	mov	r1, r0
   18608:	mov	r0, #10
   1860c:	cmp	r1, #0
   18610:	popne	{r4, r5, fp, pc}
   18614:	mov	r0, r5
   18618:	bl	1180c <freecon@plt>
   1861c:	mov	r0, #0
   18620:	str	r0, [r4]
   18624:	bl	11710 <__errno_location@plt>
   18628:	mov	r1, #61	; 0x3d
   1862c:	str	r1, [r0]
   18630:	mvn	r0, #0
   18634:	pop	{r4, r5, fp, pc}
   18638:	push	{r4, sl, fp, lr}
   1863c:	add	fp, sp, #8
   18640:	mov	r4, r1
   18644:	bl	1165c <lgetfilecon@plt>
   18648:	mov	r1, r4
   1864c:	pop	{r4, sl, fp, lr}
   18650:	b	185c8 <__assert_fail@plt+0x6d38>
   18654:	push	{r4, sl, fp, lr}
   18658:	add	fp, sp, #8
   1865c:	mov	r4, r1
   18660:	bl	1159c <fgetfilecon@plt>
   18664:	mov	r1, r4
   18668:	pop	{r4, sl, fp, lr}
   1866c:	b	185c8 <__assert_fail@plt+0x6d38>
   18670:	push	{r4, r5, r6, r7, fp, lr}
   18674:	add	fp, sp, #16
   18678:	mov	r4, r0
   1867c:	cmp	r0, #2
   18680:	movhi	r0, r4
   18684:	pophi	{r4, r5, r6, r7, fp, pc}
   18688:	mov	r0, r4
   1868c:	bl	19e44 <__assert_fail@plt+0x85b4>
   18690:	mov	r5, r0
   18694:	bl	11710 <__errno_location@plt>
   18698:	mov	r6, r0
   1869c:	ldr	r7, [r0]
   186a0:	mov	r0, r4
   186a4:	bl	11860 <close@plt>
   186a8:	str	r7, [r6]
   186ac:	mov	r0, r5
   186b0:	pop	{r4, r5, r6, r7, fp, pc}
   186b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   186b8:	add	fp, sp, #24
   186bc:	sub	sp, sp, #32
   186c0:	mov	r4, r2
   186c4:	mov	r8, r0
   186c8:	ldr	r6, [fp, #12]
   186cc:	ldr	r7, [fp, #8]
   186d0:	cmp	r1, #0
   186d4:	beq	186fc <__assert_fail@plt+0x6e6c>
   186d8:	mov	r5, r1
   186dc:	str	r4, [sp]
   186e0:	str	r3, [sp, #4]
   186e4:	movw	r2, #46214	; 0xb486
   186e8:	movt	r2, #1
   186ec:	mov	r0, r8
   186f0:	mov	r1, #1
   186f4:	mov	r3, r5
   186f8:	b	18714 <__assert_fail@plt+0x6e84>
   186fc:	str	r3, [sp]
   18700:	movw	r2, #46226	; 0xb492
   18704:	movt	r2, #1
   18708:	mov	r0, r8
   1870c:	mov	r1, #1
   18710:	mov	r3, r4
   18714:	bl	11758 <__fprintf_chk@plt>
   18718:	movw	r1, #46233	; 0xb499
   1871c:	movt	r1, #1
   18720:	mov	r0, #0
   18724:	mov	r2, #5
   18728:	bl	11578 <dcgettext@plt>
   1872c:	mov	r3, r0
   18730:	movw	r0, #2022	; 0x7e6
   18734:	str	r0, [sp]
   18738:	movw	r2, #46951	; 0xb767
   1873c:	movt	r2, #1
   18740:	mov	r0, r8
   18744:	mov	r1, #1
   18748:	bl	11758 <__fprintf_chk@plt>
   1874c:	movw	r4, #43930	; 0xab9a
   18750:	movt	r4, #1
   18754:	mov	r0, r4
   18758:	mov	r1, r8
   1875c:	bl	114d0 <fputs_unlocked@plt>
   18760:	movw	r1, #46237	; 0xb49d
   18764:	movt	r1, #1
   18768:	mov	r0, #0
   1876c:	mov	r2, #5
   18770:	bl	11578 <dcgettext@plt>
   18774:	mov	r2, r0
   18778:	movw	r3, #46408	; 0xb548
   1877c:	movt	r3, #1
   18780:	mov	r0, r8
   18784:	mov	r1, #1
   18788:	bl	11758 <__fprintf_chk@plt>
   1878c:	mov	r0, r4
   18790:	mov	r1, r8
   18794:	bl	114d0 <fputs_unlocked@plt>
   18798:	cmp	r6, #9
   1879c:	bhi	187d8 <__assert_fail@plt+0x6f48>
   187a0:	add	r0, pc, #0
   187a4:	ldr	pc, [r0, r6, lsl #2]
   187a8:	ldrdeq	r8, [r1], -r0
   187ac:	andeq	r8, r1, r4, ror #15
   187b0:	andeq	r8, r1, r4, lsl r8
   187b4:	andeq	r8, r1, ip, lsr r8
   187b8:	andeq	r8, r1, r4, ror #16
   187bc:	andeq	r8, r1, ip, lsl #17
   187c0:			; <UNDEFINED> instruction: 0x000188b4
   187c4:	andeq	r8, r1, ip, ror #17
   187c8:	andeq	r8, r1, ip, lsl #19
   187cc:	andeq	r8, r1, r4, lsr r9
   187d0:	sub	sp, fp, #24
   187d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   187d8:	movw	r1, #46761	; 0xb6a9
   187dc:	movt	r1, #1
   187e0:	b	1893c <__assert_fail@plt+0x70ac>
   187e4:	movw	r1, #46442	; 0xb56a
   187e8:	movt	r1, #1
   187ec:	mov	r0, #0
   187f0:	mov	r2, #5
   187f4:	bl	11578 <dcgettext@plt>
   187f8:	mov	r2, r0
   187fc:	ldr	r3, [r7]
   18800:	mov	r0, r8
   18804:	mov	r1, #1
   18808:	sub	sp, fp, #24
   1880c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18810:	b	11758 <__fprintf_chk@plt>
   18814:	movw	r1, #46458	; 0xb57a
   18818:	movt	r1, #1
   1881c:	mov	r0, #0
   18820:	mov	r2, #5
   18824:	bl	11578 <dcgettext@plt>
   18828:	mov	r2, r0
   1882c:	ldr	r3, [r7]
   18830:	ldr	r0, [r7, #4]
   18834:	str	r0, [sp]
   18838:	b	18928 <__assert_fail@plt+0x7098>
   1883c:	movw	r1, #46481	; 0xb591
   18840:	movt	r1, #1
   18844:	mov	r0, #0
   18848:	mov	r2, #5
   1884c:	bl	11578 <dcgettext@plt>
   18850:	mov	r2, r0
   18854:	ldr	r3, [r7]
   18858:	ldmib	r7, {r0, r1}
   1885c:	stm	sp, {r0, r1}
   18860:	b	18928 <__assert_fail@plt+0x7098>
   18864:	movw	r1, #46509	; 0xb5ad
   18868:	movt	r1, #1
   1886c:	mov	r0, #0
   18870:	mov	r2, #5
   18874:	bl	11578 <dcgettext@plt>
   18878:	mov	r2, r0
   1887c:	ldr	r3, [r7]
   18880:	ldmib	r7, {r0, r1, r7}
   18884:	stm	sp, {r0, r1, r7}
   18888:	b	18928 <__assert_fail@plt+0x7098>
   1888c:	movw	r1, #46541	; 0xb5cd
   18890:	movt	r1, #1
   18894:	mov	r0, #0
   18898:	mov	r2, #5
   1889c:	bl	11578 <dcgettext@plt>
   188a0:	mov	r2, r0
   188a4:	ldr	r3, [r7]
   188a8:	ldmib	r7, {r0, r1, r6, r7}
   188ac:	stm	sp, {r0, r1, r6, r7}
   188b0:	b	18928 <__assert_fail@plt+0x7098>
   188b4:	movw	r1, #46577	; 0xb5f1
   188b8:	movt	r1, #1
   188bc:	mov	r0, #0
   188c0:	mov	r2, #5
   188c4:	bl	11578 <dcgettext@plt>
   188c8:	mov	r2, r0
   188cc:	ldr	r3, [r7]
   188d0:	ldmib	r7, {r0, r1, r6}
   188d4:	ldr	r5, [r7, #16]
   188d8:	ldr	r7, [r7, #20]
   188dc:	stm	sp, {r0, r1, r6}
   188e0:	str	r5, [sp, #12]
   188e4:	str	r7, [sp, #16]
   188e8:	b	18928 <__assert_fail@plt+0x7098>
   188ec:	movw	r1, #46617	; 0xb619
   188f0:	movt	r1, #1
   188f4:	mov	r0, #0
   188f8:	mov	r2, #5
   188fc:	bl	11578 <dcgettext@plt>
   18900:	mov	r2, r0
   18904:	ldr	r3, [r7]
   18908:	ldmib	r7, {r0, r1, r6}
   1890c:	ldr	r5, [r7, #16]
   18910:	ldr	r4, [r7, #20]
   18914:	ldr	r7, [r7, #24]
   18918:	stm	sp, {r0, r1, r6}
   1891c:	str	r5, [sp, #12]
   18920:	str	r4, [sp, #16]
   18924:	str	r7, [sp, #20]
   18928:	mov	r0, r8
   1892c:	mov	r1, #1
   18930:	b	189dc <__assert_fail@plt+0x714c>
   18934:	movw	r1, #46709	; 0xb675
   18938:	movt	r1, #1
   1893c:	mov	r0, #0
   18940:	mov	r2, #5
   18944:	bl	11578 <dcgettext@plt>
   18948:	mov	ip, r0
   1894c:	ldr	r3, [r7]
   18950:	ldr	r0, [r7, #4]
   18954:	ldr	r1, [r7, #8]
   18958:	ldr	r6, [r7, #12]
   1895c:	ldr	r5, [r7, #16]
   18960:	ldr	r4, [r7, #20]
   18964:	ldr	r2, [r7, #24]
   18968:	ldr	lr, [r7, #28]
   1896c:	ldr	r7, [r7, #32]
   18970:	stm	sp, {r0, r1, r6}
   18974:	str	r5, [sp, #12]
   18978:	str	r4, [sp, #16]
   1897c:	str	r2, [sp, #20]
   18980:	str	lr, [sp, #24]
   18984:	str	r7, [sp, #28]
   18988:	b	189d0 <__assert_fail@plt+0x7140>
   1898c:	movw	r1, #46661	; 0xb645
   18990:	movt	r1, #1
   18994:	mov	r0, #0
   18998:	mov	r2, #5
   1899c:	bl	11578 <dcgettext@plt>
   189a0:	mov	ip, r0
   189a4:	ldr	r3, [r7]
   189a8:	ldmib	r7, {r0, r1, r6}
   189ac:	ldr	r5, [r7, #16]
   189b0:	ldr	r4, [r7, #20]
   189b4:	ldr	r2, [r7, #24]
   189b8:	ldr	r7, [r7, #28]
   189bc:	stm	sp, {r0, r1, r6}
   189c0:	str	r5, [sp, #12]
   189c4:	str	r4, [sp, #16]
   189c8:	str	r2, [sp, #20]
   189cc:	str	r7, [sp, #24]
   189d0:	mov	r0, r8
   189d4:	mov	r1, #1
   189d8:	mov	r2, ip
   189dc:	bl	11758 <__fprintf_chk@plt>
   189e0:	sub	sp, fp, #24
   189e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   189e8:	push	{r4, sl, fp, lr}
   189ec:	add	fp, sp, #8
   189f0:	sub	sp, sp, #8
   189f4:	mov	lr, #0
   189f8:	ldr	ip, [fp, #8]
   189fc:	ldr	r4, [ip, lr, lsl #2]
   18a00:	add	lr, lr, #1
   18a04:	cmp	r4, #0
   18a08:	bne	189fc <__assert_fail@plt+0x716c>
   18a0c:	sub	r4, lr, #1
   18a10:	str	ip, [sp]
   18a14:	str	r4, [sp, #4]
   18a18:	bl	186b4 <__assert_fail@plt+0x6e24>
   18a1c:	sub	sp, fp, #8
   18a20:	pop	{r4, sl, fp, pc}
   18a24:	push	{r4, r5, fp, lr}
   18a28:	add	fp, sp, #8
   18a2c:	sub	sp, sp, #48	; 0x30
   18a30:	mov	ip, #0
   18a34:	ldr	r4, [fp, #8]
   18a38:	add	lr, sp, #8
   18a3c:	ldr	r5, [r4]
   18a40:	str	r5, [lr, ip, lsl #2]
   18a44:	cmp	r5, #0
   18a48:	beq	18a5c <__assert_fail@plt+0x71cc>
   18a4c:	add	ip, ip, #1
   18a50:	add	r4, r4, #4
   18a54:	cmp	ip, #10
   18a58:	bcc	18a3c <__assert_fail@plt+0x71ac>
   18a5c:	str	lr, [sp]
   18a60:	str	ip, [sp, #4]
   18a64:	bl	186b4 <__assert_fail@plt+0x6e24>
   18a68:	sub	sp, fp, #8
   18a6c:	pop	{r4, r5, fp, pc}
   18a70:	push	{fp, lr}
   18a74:	mov	fp, sp
   18a78:	sub	sp, sp, #8
   18a7c:	add	ip, fp, #8
   18a80:	str	ip, [sp, #4]
   18a84:	str	ip, [sp]
   18a88:	bl	18a24 <__assert_fail@plt+0x7194>
   18a8c:	mov	sp, fp
   18a90:	pop	{fp, pc}
   18a94:	push	{fp, lr}
   18a98:	mov	fp, sp
   18a9c:	movw	r0, #49604	; 0xc1c4
   18aa0:	movt	r0, #2
   18aa4:	ldr	r1, [r0]
   18aa8:	movw	r0, #43930	; 0xab9a
   18aac:	movt	r0, #1
   18ab0:	bl	114d0 <fputs_unlocked@plt>
   18ab4:	movw	r1, #46821	; 0xb6e5
   18ab8:	movt	r1, #1
   18abc:	mov	r0, #0
   18ac0:	mov	r2, #5
   18ac4:	bl	11578 <dcgettext@plt>
   18ac8:	mov	r1, r0
   18acc:	movw	r2, #46841	; 0xb6f9
   18ad0:	movt	r2, #1
   18ad4:	mov	r0, #1
   18ad8:	bl	11740 <__printf_chk@plt>
   18adc:	movw	r1, #46863	; 0xb70f
   18ae0:	movt	r1, #1
   18ae4:	mov	r0, #0
   18ae8:	mov	r2, #5
   18aec:	bl	11578 <dcgettext@plt>
   18af0:	mov	r1, r0
   18af4:	movw	r2, #44076	; 0xac2c
   18af8:	movt	r2, #1
   18afc:	movw	r3, #44545	; 0xae01
   18b00:	movt	r3, #1
   18b04:	mov	r0, #1
   18b08:	bl	11740 <__printf_chk@plt>
   18b0c:	movw	r1, #46883	; 0xb723
   18b10:	movt	r1, #1
   18b14:	mov	r0, #0
   18b18:	mov	r2, #5
   18b1c:	bl	11578 <dcgettext@plt>
   18b20:	mov	r1, r0
   18b24:	movw	r2, #46922	; 0xb74a
   18b28:	movt	r2, #1
   18b2c:	mov	r0, #1
   18b30:	pop	{fp, lr}
   18b34:	b	11740 <__printf_chk@plt>
   18b38:	b	18b3c <__assert_fail@plt+0x72ac>
   18b3c:	push	{r4, r5, r6, sl, fp, lr}
   18b40:	add	fp, sp, #16
   18b44:	mov	r4, r2
   18b48:	mov	r5, r1
   18b4c:	mov	r6, r0
   18b50:	bl	19d68 <__assert_fail@plt+0x84d8>
   18b54:	cmp	r0, #0
   18b58:	popne	{r4, r5, r6, sl, fp, pc}
   18b5c:	cmp	r6, #0
   18b60:	beq	18b74 <__assert_fail@plt+0x72e4>
   18b64:	cmp	r5, #0
   18b68:	cmpne	r4, #0
   18b6c:	bne	18b74 <__assert_fail@plt+0x72e4>
   18b70:	pop	{r4, r5, r6, sl, fp, pc}
   18b74:	bl	18f28 <__assert_fail@plt+0x7698>
   18b78:	push	{fp, lr}
   18b7c:	mov	fp, sp
   18b80:	bl	1903c <__assert_fail@plt+0x77ac>
   18b84:	bl	18b8c <__assert_fail@plt+0x72fc>
   18b88:	pop	{fp, pc}
   18b8c:	cmp	r0, #0
   18b90:	bxne	lr
   18b94:	push	{fp, lr}
   18b98:	mov	fp, sp
   18b9c:	bl	18f28 <__assert_fail@plt+0x7698>
   18ba0:	push	{fp, lr}
   18ba4:	mov	fp, sp
   18ba8:	bl	19c1c <__assert_fail@plt+0x838c>
   18bac:	bl	18b8c <__assert_fail@plt+0x72fc>
   18bb0:	pop	{fp, pc}
   18bb4:	b	18b78 <__assert_fail@plt+0x72e8>
   18bb8:	push	{r4, r5, fp, lr}
   18bbc:	add	fp, sp, #8
   18bc0:	mov	r4, r1
   18bc4:	mov	r5, r0
   18bc8:	bl	1906c <__assert_fail@plt+0x77dc>
   18bcc:	cmp	r0, #0
   18bd0:	popne	{r4, r5, fp, pc}
   18bd4:	cmp	r5, #0
   18bd8:	beq	18be8 <__assert_fail@plt+0x7358>
   18bdc:	cmp	r4, #0
   18be0:	bne	18be8 <__assert_fail@plt+0x7358>
   18be4:	pop	{r4, r5, fp, pc}
   18be8:	bl	18f28 <__assert_fail@plt+0x7698>
   18bec:	push	{fp, lr}
   18bf0:	mov	fp, sp
   18bf4:	bl	19c20 <__assert_fail@plt+0x8390>
   18bf8:	bl	18b8c <__assert_fail@plt+0x72fc>
   18bfc:	pop	{fp, pc}
   18c00:	push	{fp, lr}
   18c04:	mov	fp, sp
   18c08:	bl	19c30 <__assert_fail@plt+0x83a0>
   18c0c:	bl	18b8c <__assert_fail@plt+0x72fc>
   18c10:	pop	{fp, pc}
   18c14:	push	{fp, lr}
   18c18:	mov	fp, sp
   18c1c:	mov	r2, r1
   18c20:	mov	r1, r0
   18c24:	mov	r0, #0
   18c28:	bl	18b3c <__assert_fail@plt+0x72ac>
   18c2c:	pop	{fp, pc}
   18c30:	mov	r2, r1
   18c34:	mov	r1, r0
   18c38:	mov	r0, #0
   18c3c:	b	18c00 <__assert_fail@plt+0x7370>
   18c40:	mov	r2, #1
   18c44:	b	18c48 <__assert_fail@plt+0x73b8>
   18c48:	push	{r4, r5, fp, lr}
   18c4c:	add	fp, sp, #8
   18c50:	mov	r4, r1
   18c54:	ldr	r5, [r1]
   18c58:	cmp	r0, #0
   18c5c:	beq	18c74 <__assert_fail@plt+0x73e4>
   18c60:	mov	r1, #1
   18c64:	add	r1, r1, r5, lsr #1
   18c68:	adds	r5, r5, r1
   18c6c:	bcc	18c8c <__assert_fail@plt+0x73fc>
   18c70:	bl	18f28 <__assert_fail@plt+0x7698>
   18c74:	cmp	r5, #0
   18c78:	bne	18c8c <__assert_fail@plt+0x73fc>
   18c7c:	mov	r1, #64	; 0x40
   18c80:	udiv	r5, r1, r2
   18c84:	cmp	r2, #64	; 0x40
   18c88:	addhi	r5, r5, #1
   18c8c:	mov	r1, r5
   18c90:	bl	18b3c <__assert_fail@plt+0x72ac>
   18c94:	str	r5, [r4]
   18c98:	pop	{r4, r5, fp, pc}
   18c9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18ca0:	add	fp, sp, #24
   18ca4:	mov	r8, r1
   18ca8:	ldr	r6, [r1]
   18cac:	add	r1, r6, r6, asr #1
   18cb0:	cmp	r1, r6
   18cb4:	mvnvs	r1, #-2147483648	; 0x80000000
   18cb8:	cmp	r1, r3
   18cbc:	mov	r5, r1
   18cc0:	movgt	r5, r3
   18cc4:	cmn	r3, #1
   18cc8:	movle	r5, r1
   18ccc:	ldr	r4, [fp, #8]
   18cd0:	cmn	r4, #1
   18cd4:	ble	18cfc <__assert_fail@plt+0x746c>
   18cd8:	cmp	r4, #0
   18cdc:	beq	18d50 <__assert_fail@plt+0x74c0>
   18ce0:	cmn	r5, #1
   18ce4:	ble	18d24 <__assert_fail@plt+0x7494>
   18ce8:	mvn	r7, #-2147483648	; 0x80000000
   18cec:	udiv	r1, r7, r4
   18cf0:	cmp	r1, r5
   18cf4:	bge	18d50 <__assert_fail@plt+0x74c0>
   18cf8:	b	18d60 <__assert_fail@plt+0x74d0>
   18cfc:	cmn	r5, #1
   18d00:	ble	18d40 <__assert_fail@plt+0x74b0>
   18d04:	cmn	r4, #1
   18d08:	beq	18d50 <__assert_fail@plt+0x74c0>
   18d0c:	mov	r1, #-2147483648	; 0x80000000
   18d10:	sdiv	r1, r1, r4
   18d14:	mvn	r7, #-2147483648	; 0x80000000
   18d18:	cmp	r1, r5
   18d1c:	bge	18d50 <__assert_fail@plt+0x74c0>
   18d20:	b	18d60 <__assert_fail@plt+0x74d0>
   18d24:	beq	18d50 <__assert_fail@plt+0x74c0>
   18d28:	mov	r1, #-2147483648	; 0x80000000
   18d2c:	sdiv	r1, r1, r5
   18d30:	mvn	r7, #-2147483648	; 0x80000000
   18d34:	cmp	r1, r4
   18d38:	bge	18d50 <__assert_fail@plt+0x74c0>
   18d3c:	b	18d60 <__assert_fail@plt+0x74d0>
   18d40:	mvn	r7, #-2147483648	; 0x80000000
   18d44:	sdiv	r1, r7, r4
   18d48:	cmp	r5, r1
   18d4c:	blt	18d60 <__assert_fail@plt+0x74d0>
   18d50:	mul	r1, r5, r4
   18d54:	mov	r7, #64	; 0x40
   18d58:	cmp	r1, #63	; 0x3f
   18d5c:	bgt	18d68 <__assert_fail@plt+0x74d8>
   18d60:	sdiv	r5, r7, r4
   18d64:	mul	r1, r5, r4
   18d68:	cmp	r0, #0
   18d6c:	moveq	r7, #0
   18d70:	streq	r7, [r8]
   18d74:	sub	r7, r5, r6
   18d78:	cmp	r7, r2
   18d7c:	bge	18e28 <__assert_fail@plt+0x7598>
   18d80:	add	r5, r6, r2
   18d84:	mov	r1, #0
   18d88:	cmp	r5, r3
   18d8c:	mov	r2, #0
   18d90:	movwgt	r2, #1
   18d94:	cmn	r3, #1
   18d98:	movwgt	r1, #1
   18d9c:	cmp	r5, r6
   18da0:	bvs	18e10 <__assert_fail@plt+0x7580>
   18da4:	ands	r1, r1, r2
   18da8:	bne	18e10 <__assert_fail@plt+0x7580>
   18dac:	cmn	r4, #1
   18db0:	ble	18dd8 <__assert_fail@plt+0x7548>
   18db4:	cmp	r4, #0
   18db8:	beq	18e24 <__assert_fail@plt+0x7594>
   18dbc:	cmn	r5, #1
   18dc0:	ble	18dfc <__assert_fail@plt+0x756c>
   18dc4:	mvn	r1, #-2147483648	; 0x80000000
   18dc8:	udiv	r1, r1, r4
   18dcc:	cmp	r1, r5
   18dd0:	bge	18e24 <__assert_fail@plt+0x7594>
   18dd4:	b	18e10 <__assert_fail@plt+0x7580>
   18dd8:	cmn	r5, #1
   18ddc:	ble	18e14 <__assert_fail@plt+0x7584>
   18de0:	cmn	r4, #1
   18de4:	beq	18e24 <__assert_fail@plt+0x7594>
   18de8:	mov	r1, #-2147483648	; 0x80000000
   18dec:	sdiv	r1, r1, r4
   18df0:	cmp	r1, r5
   18df4:	bge	18e24 <__assert_fail@plt+0x7594>
   18df8:	b	18e10 <__assert_fail@plt+0x7580>
   18dfc:	beq	18e24 <__assert_fail@plt+0x7594>
   18e00:	mov	r1, #-2147483648	; 0x80000000
   18e04:	sdiv	r1, r1, r5
   18e08:	cmp	r1, r4
   18e0c:	bge	18e24 <__assert_fail@plt+0x7594>
   18e10:	bl	18f28 <__assert_fail@plt+0x7698>
   18e14:	mvn	r1, #-2147483648	; 0x80000000
   18e18:	sdiv	r1, r1, r4
   18e1c:	cmp	r5, r1
   18e20:	blt	18e10 <__assert_fail@plt+0x7580>
   18e24:	mul	r1, r5, r4
   18e28:	bl	18bb8 <__assert_fail@plt+0x7328>
   18e2c:	str	r5, [r8]
   18e30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e34:	mov	r1, #1
   18e38:	b	18e3c <__assert_fail@plt+0x75ac>
   18e3c:	push	{fp, lr}
   18e40:	mov	fp, sp
   18e44:	bl	18fe8 <__assert_fail@plt+0x7758>
   18e48:	bl	18b8c <__assert_fail@plt+0x72fc>
   18e4c:	pop	{fp, pc}
   18e50:	mov	r1, #1
   18e54:	b	18e58 <__assert_fail@plt+0x75c8>
   18e58:	push	{fp, lr}
   18e5c:	mov	fp, sp
   18e60:	bl	19c2c <__assert_fail@plt+0x839c>
   18e64:	bl	18b8c <__assert_fail@plt+0x72fc>
   18e68:	pop	{fp, pc}
   18e6c:	push	{r4, r5, r6, sl, fp, lr}
   18e70:	add	fp, sp, #16
   18e74:	mov	r4, r1
   18e78:	mov	r5, r0
   18e7c:	mov	r0, r1
   18e80:	bl	18b78 <__assert_fail@plt+0x72e8>
   18e84:	mov	r6, r0
   18e88:	mov	r1, r5
   18e8c:	mov	r2, r4
   18e90:	bl	1153c <memcpy@plt>
   18e94:	mov	r0, r6
   18e98:	pop	{r4, r5, r6, sl, fp, pc}
   18e9c:	push	{r4, r5, r6, sl, fp, lr}
   18ea0:	add	fp, sp, #16
   18ea4:	mov	r4, r1
   18ea8:	mov	r5, r0
   18eac:	mov	r0, r1
   18eb0:	bl	18ba0 <__assert_fail@plt+0x7310>
   18eb4:	mov	r6, r0
   18eb8:	mov	r1, r5
   18ebc:	mov	r2, r4
   18ec0:	bl	1153c <memcpy@plt>
   18ec4:	mov	r0, r6
   18ec8:	pop	{r4, r5, r6, sl, fp, pc}
   18ecc:	push	{r4, r5, r6, sl, fp, lr}
   18ed0:	add	fp, sp, #16
   18ed4:	mov	r4, r1
   18ed8:	mov	r5, r0
   18edc:	add	r0, r1, #1
   18ee0:	bl	18ba0 <__assert_fail@plt+0x7310>
   18ee4:	mov	r6, r0
   18ee8:	mov	r0, #0
   18eec:	strb	r0, [r6, r4]
   18ef0:	mov	r0, r6
   18ef4:	mov	r1, r5
   18ef8:	mov	r2, r4
   18efc:	bl	1153c <memcpy@plt>
   18f00:	mov	r0, r6
   18f04:	pop	{r4, r5, r6, sl, fp, pc}
   18f08:	push	{r4, sl, fp, lr}
   18f0c:	add	fp, sp, #8
   18f10:	mov	r4, r0
   18f14:	bl	116ec <strlen@plt>
   18f18:	add	r1, r0, #1
   18f1c:	mov	r0, r4
   18f20:	pop	{r4, sl, fp, lr}
   18f24:	b	18e6c <__assert_fail@plt+0x75dc>
   18f28:	push	{fp, lr}
   18f2c:	mov	fp, sp
   18f30:	movw	r0, #49516	; 0xc16c
   18f34:	movt	r0, #2
   18f38:	ldr	r4, [r0]
   18f3c:	movw	r1, #46998	; 0xb796
   18f40:	movt	r1, #1
   18f44:	mov	r0, #0
   18f48:	mov	r2, #5
   18f4c:	bl	11578 <dcgettext@plt>
   18f50:	mov	r3, r0
   18f54:	movw	r2, #45759	; 0xb2bf
   18f58:	movt	r2, #1
   18f5c:	mov	r0, r4
   18f60:	mov	r1, #0
   18f64:	bl	11638 <error@plt>
   18f68:	bl	11854 <abort@plt>
   18f6c:	push	{fp, lr}
   18f70:	mov	fp, sp
   18f74:	orr	r1, r1, #512	; 0x200
   18f78:	bl	12edc <__assert_fail@plt+0x164c>
   18f7c:	cmp	r0, #0
   18f80:	popne	{fp, pc}
   18f84:	bl	11710 <__errno_location@plt>
   18f88:	ldr	r0, [r0]
   18f8c:	cmp	r0, #22
   18f90:	bne	18fb4 <__assert_fail@plt+0x7724>
   18f94:	movw	r0, #47015	; 0xb7a7
   18f98:	movt	r0, #1
   18f9c:	movw	r1, #47031	; 0xb7b7
   18fa0:	movt	r1, #1
   18fa4:	movw	r3, #47042	; 0xb7c2
   18fa8:	movt	r3, #1
   18fac:	mov	r2, #41	; 0x29
   18fb0:	bl	11890 <__assert_fail@plt>
   18fb4:	bl	18f28 <__assert_fail@plt+0x7698>
   18fb8:	ldr	r0, [r0, #48]	; 0x30
   18fbc:	and	r2, r0, #17
   18fc0:	mov	r0, #1
   18fc4:	cmp	r2, #16
   18fc8:	beq	18fe4 <__assert_fail@plt+0x7754>
   18fcc:	mov	r0, #0
   18fd0:	cmp	r2, #17
   18fd4:	bxne	lr
   18fd8:	ldr	r0, [r1, #48]	; 0x30
   18fdc:	cmp	r0, #0
   18fe0:	movwne	r0, #1
   18fe4:	bx	lr
   18fe8:	clz	r2, r1
   18fec:	lsr	r2, r2, #5
   18ff0:	clz	r3, r0
   18ff4:	lsr	r3, r3, #5
   18ff8:	orrs	r2, r3, r2
   18ffc:	movwne	r1, #1
   19000:	movwne	r0, #1
   19004:	cmp	r1, #0
   19008:	beq	19038 <__assert_fail@plt+0x77a8>
   1900c:	mvn	r2, #-2147483648	; 0x80000000
   19010:	udiv	r2, r2, r1
   19014:	cmp	r2, r0
   19018:	bcs	19038 <__assert_fail@plt+0x77a8>
   1901c:	push	{fp, lr}
   19020:	mov	fp, sp
   19024:	bl	11710 <__errno_location@plt>
   19028:	mov	r1, #12
   1902c:	str	r1, [r0]
   19030:	mov	r0, #0
   19034:	pop	{fp, pc}
   19038:	b	114c4 <calloc@plt>
   1903c:	cmp	r0, #0
   19040:	movweq	r0, #1
   19044:	cmn	r0, #1
   19048:	ble	19050 <__assert_fail@plt+0x77c0>
   1904c:	b	11668 <malloc@plt>
   19050:	push	{fp, lr}
   19054:	mov	fp, sp
   19058:	bl	11710 <__errno_location@plt>
   1905c:	mov	r1, #12
   19060:	str	r1, [r0]
   19064:	mov	r0, #0
   19068:	pop	{fp, pc}
   1906c:	push	{fp, lr}
   19070:	mov	fp, sp
   19074:	cmp	r0, #0
   19078:	beq	19094 <__assert_fail@plt+0x7804>
   1907c:	cmp	r1, #0
   19080:	beq	190a0 <__assert_fail@plt+0x7810>
   19084:	cmn	r1, #1
   19088:	ble	190ac <__assert_fail@plt+0x781c>
   1908c:	pop	{fp, lr}
   19090:	b	11590 <realloc@plt>
   19094:	mov	r0, r1
   19098:	pop	{fp, lr}
   1909c:	b	1903c <__assert_fail@plt+0x77ac>
   190a0:	bl	19b34 <__assert_fail@plt+0x82a4>
   190a4:	mov	r0, #0
   190a8:	pop	{fp, pc}
   190ac:	bl	11710 <__errno_location@plt>
   190b0:	mov	r1, #12
   190b4:	str	r1, [r0]
   190b8:	mov	r0, #0
   190bc:	pop	{fp, pc}
   190c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   190c4:	add	fp, sp, #24
   190c8:	sub	sp, sp, #40	; 0x28
   190cc:	mov	r5, r0
   190d0:	ldrb	r0, [r2]
   190d4:	cmp	r0, #0
   190d8:	beq	191bc <__assert_fail@plt+0x792c>
   190dc:	mov	r4, r2
   190e0:	mov	r6, r1
   190e4:	movw	r9, #49984	; 0xc340
   190e8:	movt	r9, #2
   190ec:	ldr	r0, [r9]
   190f0:	cmp	r0, #0
   190f4:	bne	19160 <__assert_fail@plt+0x78d0>
   190f8:	movw	r0, #47120	; 0xb810
   190fc:	movt	r0, #1
   19100:	movw	r1, #18688	; 0x4900
   19104:	movt	r1, #8
   19108:	bl	11650 <open64@plt>
   1910c:	cmn	r0, #1
   19110:	ble	191d4 <__assert_fail@plt+0x7944>
   19114:	mov	r7, r0
   19118:	str	r0, [sp]
   1911c:	add	r8, sp, #8
   19120:	movw	r3, #47134	; 0xb81e
   19124:	movt	r3, #1
   19128:	mov	r0, r8
   1912c:	mov	r1, #1
   19130:	mov	r2, #32
   19134:	bl	1171c <__sprintf_chk@plt>
   19138:	mov	r0, r8
   1913c:	mov	r1, #0
   19140:	bl	1177c <access@plt>
   19144:	mvn	r1, #0
   19148:	cmp	r0, #0
   1914c:	movweq	r1, #1
   19150:	str	r1, [r9]
   19154:	mov	r0, r7
   19158:	bl	11860 <close@plt>
   1915c:	ldr	r0, [r9]
   19160:	mov	r7, #0
   19164:	cmp	r0, #0
   19168:	blt	191c8 <__assert_fail@plt+0x7938>
   1916c:	mov	r0, r4
   19170:	bl	116ec <strlen@plt>
   19174:	add	r0, r0, #27
   19178:	cmp	r0, #4032	; 0xfc0
   1917c:	bls	19190 <__assert_fail@plt+0x7900>
   19180:	bl	1903c <__assert_fail@plt+0x77ac>
   19184:	mov	r5, r0
   19188:	cmp	r0, #0
   1918c:	beq	191c8 <__assert_fail@plt+0x7938>
   19190:	str	r6, [sp]
   19194:	movw	r3, #47157	; 0xb835
   19198:	movt	r3, #1
   1919c:	mov	r0, r5
   191a0:	mov	r1, #1
   191a4:	mvn	r2, #0
   191a8:	bl	1171c <__sprintf_chk@plt>
   191ac:	add	r0, r5, r0
   191b0:	mov	r1, r4
   191b4:	bl	11608 <strcpy@plt>
   191b8:	b	191c4 <__assert_fail@plt+0x7934>
   191bc:	mov	r0, #0
   191c0:	strb	r0, [r5]
   191c4:	mov	r7, r5
   191c8:	mov	r0, r7
   191cc:	sub	sp, fp, #24
   191d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   191d4:	mvn	r0, #0
   191d8:	str	r0, [r9]
   191dc:	mov	r7, #0
   191e0:	b	191c8 <__assert_fail@plt+0x7938>
   191e4:	push	{r4, r5, fp, lr}
   191e8:	add	fp, sp, #8
   191ec:	rsb	lr, r2, #64	; 0x40
   191f0:	lsr	ip, r0, lr
   191f4:	rsb	r3, lr, #32
   191f8:	orr	ip, ip, r1, lsl r3
   191fc:	rsb	r4, r2, #32
   19200:	cmp	r4, #0
   19204:	lsrge	ip, r1, r4
   19208:	lsl	r3, r0, r2
   1920c:	sub	r5, r2, #32
   19210:	cmp	r5, #0
   19214:	movwge	r3, #0
   19218:	orr	ip, ip, r3
   1921c:	lsr	r3, r0, r4
   19220:	orr	r2, r3, r1, lsl r2
   19224:	lslge	r2, r0, r5
   19228:	lsr	r0, r1, lr
   1922c:	cmp	r4, #0
   19230:	movwge	r0, #0
   19234:	orr	r1, r0, r2
   19238:	mov	r0, ip
   1923c:	pop	{r4, r5, fp, pc}
   19240:	push	{r4, r5, fp, lr}
   19244:	add	fp, sp, #8
   19248:	lsr	ip, r0, r2
   1924c:	rsb	r3, r2, #32
   19250:	orr	ip, ip, r1, lsl r3
   19254:	sub	lr, r2, #32
   19258:	cmp	lr, #0
   1925c:	lsrge	ip, r1, lr
   19260:	rsb	r4, r2, #64	; 0x40
   19264:	lsl	r5, r0, r4
   19268:	cmp	r3, #0
   1926c:	movwge	r5, #0
   19270:	orr	ip, r5, ip
   19274:	rsb	r5, r4, #32
   19278:	lsr	r5, r0, r5
   1927c:	orr	r4, r5, r1, lsl r4
   19280:	cmp	r3, #0
   19284:	lslge	r4, r0, r3
   19288:	lsr	r0, r1, r2
   1928c:	cmp	lr, #0
   19290:	movwge	r0, #0
   19294:	orr	r1, r4, r0
   19298:	mov	r0, ip
   1929c:	pop	{r4, r5, fp, pc}
   192a0:	rsb	r1, r1, #32
   192a4:	ror	r0, r0, r1
   192a8:	bx	lr
   192ac:	ror	r0, r0, r1
   192b0:	bx	lr
   192b4:	rsb	r1, r1, #32
   192b8:	ror	r0, r0, r1
   192bc:	bx	lr
   192c0:	ror	r0, r0, r1
   192c4:	bx	lr
   192c8:	and	r2, r1, #15
   192cc:	lsl	r2, r0, r2
   192d0:	rsb	r1, r1, #0
   192d4:	and	r1, r1, #15
   192d8:	orr	r0, r2, r0, lsr r1
   192dc:	uxth	r0, r0
   192e0:	bx	lr
   192e4:	and	r2, r1, #15
   192e8:	lsr	r2, r0, r2
   192ec:	rsb	r1, r1, #0
   192f0:	and	r1, r1, #15
   192f4:	orr	r0, r2, r0, lsl r1
   192f8:	uxth	r0, r0
   192fc:	bx	lr
   19300:	and	r2, r1, #7
   19304:	lsl	r2, r0, r2
   19308:	rsb	r1, r1, #0
   1930c:	and	r1, r1, #7
   19310:	orr	r0, r2, r0, lsr r1
   19314:	uxtb	r0, r0
   19318:	bx	lr
   1931c:	and	r2, r1, #7
   19320:	lsr	r2, r0, r2
   19324:	rsb	r1, r1, #0
   19328:	and	r1, r1, #7
   1932c:	orr	r0, r2, r0, lsl r1
   19330:	uxtb	r0, r0
   19334:	bx	lr
   19338:	mov	r1, r0
   1933c:	sub	r2, r0, #65	; 0x41
   19340:	mov	r0, #1
   19344:	cmp	r2, #26
   19348:	subcs	r2, r1, #97	; 0x61
   1934c:	cmpcs	r2, #26
   19350:	bcs	19358 <__assert_fail@plt+0x7ac8>
   19354:	bx	lr
   19358:	sub	r1, r1, #48	; 0x30
   1935c:	cmp	r1, #10
   19360:	movcs	r0, #0
   19364:	bx	lr
   19368:	mov	r1, r0
   1936c:	sub	r2, r0, #65	; 0x41
   19370:	mov	r0, #1
   19374:	cmp	r2, #26
   19378:	subcs	r1, r1, #97	; 0x61
   1937c:	cmpcs	r1, #26
   19380:	movcs	r0, #0
   19384:	bx	lr
   19388:	mov	r1, #0
   1938c:	cmp	r0, #128	; 0x80
   19390:	movwcc	r1, #1
   19394:	mov	r0, r1
   19398:	bx	lr
   1939c:	sub	r1, r0, #9
   193a0:	clz	r1, r1
   193a4:	lsr	r1, r1, #5
   193a8:	sub	r0, r0, #32
   193ac:	clz	r0, r0
   193b0:	lsr	r0, r0, #5
   193b4:	orr	r0, r0, r1
   193b8:	bx	lr
   193bc:	mov	r1, r0
   193c0:	mov	r0, #1
   193c4:	cmp	r1, #32
   193c8:	bxcc	lr
   193cc:	cmp	r1, #127	; 0x7f
   193d0:	movne	r0, #0
   193d4:	bx	lr
   193d8:	sub	r1, r0, #48	; 0x30
   193dc:	mov	r0, #0
   193e0:	cmp	r1, #10
   193e4:	movwcc	r0, #1
   193e8:	bx	lr
   193ec:	sub	r1, r0, #33	; 0x21
   193f0:	mov	r0, #0
   193f4:	cmp	r1, #94	; 0x5e
   193f8:	movwcc	r0, #1
   193fc:	bx	lr
   19400:	sub	r1, r0, #97	; 0x61
   19404:	mov	r0, #0
   19408:	cmp	r1, #26
   1940c:	movwcc	r0, #1
   19410:	bx	lr
   19414:	sub	r1, r0, #32
   19418:	mov	r0, #0
   1941c:	cmp	r1, #95	; 0x5f
   19420:	movwcc	r0, #1
   19424:	bx	lr
   19428:	sub	r1, r0, #33	; 0x21
   1942c:	cmp	r1, #93	; 0x5d
   19430:	bhi	195bc <__assert_fail@plt+0x7d2c>
   19434:	mov	r0, #1
   19438:	add	r2, pc, #0
   1943c:	ldr	pc, [r2, r1, lsl #2]
   19440:			; <UNDEFINED> instruction: 0x000195b8
   19444:			; <UNDEFINED> instruction: 0x000195b8
   19448:			; <UNDEFINED> instruction: 0x000195b8
   1944c:			; <UNDEFINED> instruction: 0x000195b8
   19450:			; <UNDEFINED> instruction: 0x000195b8
   19454:			; <UNDEFINED> instruction: 0x000195b8
   19458:			; <UNDEFINED> instruction: 0x000195b8
   1945c:			; <UNDEFINED> instruction: 0x000195b8
   19460:			; <UNDEFINED> instruction: 0x000195b8
   19464:			; <UNDEFINED> instruction: 0x000195b8
   19468:			; <UNDEFINED> instruction: 0x000195b8
   1946c:			; <UNDEFINED> instruction: 0x000195b8
   19470:			; <UNDEFINED> instruction: 0x000195b8
   19474:			; <UNDEFINED> instruction: 0x000195b8
   19478:			; <UNDEFINED> instruction: 0x000195b8
   1947c:			; <UNDEFINED> instruction: 0x000195bc
   19480:			; <UNDEFINED> instruction: 0x000195bc
   19484:			; <UNDEFINED> instruction: 0x000195bc
   19488:			; <UNDEFINED> instruction: 0x000195bc
   1948c:			; <UNDEFINED> instruction: 0x000195bc
   19490:			; <UNDEFINED> instruction: 0x000195bc
   19494:			; <UNDEFINED> instruction: 0x000195bc
   19498:			; <UNDEFINED> instruction: 0x000195bc
   1949c:			; <UNDEFINED> instruction: 0x000195bc
   194a0:			; <UNDEFINED> instruction: 0x000195bc
   194a4:			; <UNDEFINED> instruction: 0x000195b8
   194a8:			; <UNDEFINED> instruction: 0x000195b8
   194ac:			; <UNDEFINED> instruction: 0x000195b8
   194b0:			; <UNDEFINED> instruction: 0x000195b8
   194b4:			; <UNDEFINED> instruction: 0x000195b8
   194b8:			; <UNDEFINED> instruction: 0x000195b8
   194bc:			; <UNDEFINED> instruction: 0x000195b8
   194c0:			; <UNDEFINED> instruction: 0x000195bc
   194c4:			; <UNDEFINED> instruction: 0x000195bc
   194c8:			; <UNDEFINED> instruction: 0x000195bc
   194cc:			; <UNDEFINED> instruction: 0x000195bc
   194d0:			; <UNDEFINED> instruction: 0x000195bc
   194d4:			; <UNDEFINED> instruction: 0x000195bc
   194d8:			; <UNDEFINED> instruction: 0x000195bc
   194dc:			; <UNDEFINED> instruction: 0x000195bc
   194e0:			; <UNDEFINED> instruction: 0x000195bc
   194e4:			; <UNDEFINED> instruction: 0x000195bc
   194e8:			; <UNDEFINED> instruction: 0x000195bc
   194ec:			; <UNDEFINED> instruction: 0x000195bc
   194f0:			; <UNDEFINED> instruction: 0x000195bc
   194f4:			; <UNDEFINED> instruction: 0x000195bc
   194f8:			; <UNDEFINED> instruction: 0x000195bc
   194fc:			; <UNDEFINED> instruction: 0x000195bc
   19500:			; <UNDEFINED> instruction: 0x000195bc
   19504:			; <UNDEFINED> instruction: 0x000195bc
   19508:			; <UNDEFINED> instruction: 0x000195bc
   1950c:			; <UNDEFINED> instruction: 0x000195bc
   19510:			; <UNDEFINED> instruction: 0x000195bc
   19514:			; <UNDEFINED> instruction: 0x000195bc
   19518:			; <UNDEFINED> instruction: 0x000195bc
   1951c:			; <UNDEFINED> instruction: 0x000195bc
   19520:			; <UNDEFINED> instruction: 0x000195bc
   19524:			; <UNDEFINED> instruction: 0x000195bc
   19528:			; <UNDEFINED> instruction: 0x000195b8
   1952c:			; <UNDEFINED> instruction: 0x000195b8
   19530:			; <UNDEFINED> instruction: 0x000195b8
   19534:			; <UNDEFINED> instruction: 0x000195b8
   19538:			; <UNDEFINED> instruction: 0x000195b8
   1953c:			; <UNDEFINED> instruction: 0x000195b8
   19540:			; <UNDEFINED> instruction: 0x000195bc
   19544:			; <UNDEFINED> instruction: 0x000195bc
   19548:			; <UNDEFINED> instruction: 0x000195bc
   1954c:			; <UNDEFINED> instruction: 0x000195bc
   19550:			; <UNDEFINED> instruction: 0x000195bc
   19554:			; <UNDEFINED> instruction: 0x000195bc
   19558:			; <UNDEFINED> instruction: 0x000195bc
   1955c:			; <UNDEFINED> instruction: 0x000195bc
   19560:			; <UNDEFINED> instruction: 0x000195bc
   19564:			; <UNDEFINED> instruction: 0x000195bc
   19568:			; <UNDEFINED> instruction: 0x000195bc
   1956c:			; <UNDEFINED> instruction: 0x000195bc
   19570:			; <UNDEFINED> instruction: 0x000195bc
   19574:			; <UNDEFINED> instruction: 0x000195bc
   19578:			; <UNDEFINED> instruction: 0x000195bc
   1957c:			; <UNDEFINED> instruction: 0x000195bc
   19580:			; <UNDEFINED> instruction: 0x000195bc
   19584:			; <UNDEFINED> instruction: 0x000195bc
   19588:			; <UNDEFINED> instruction: 0x000195bc
   1958c:			; <UNDEFINED> instruction: 0x000195bc
   19590:			; <UNDEFINED> instruction: 0x000195bc
   19594:			; <UNDEFINED> instruction: 0x000195bc
   19598:			; <UNDEFINED> instruction: 0x000195bc
   1959c:			; <UNDEFINED> instruction: 0x000195bc
   195a0:			; <UNDEFINED> instruction: 0x000195bc
   195a4:			; <UNDEFINED> instruction: 0x000195bc
   195a8:			; <UNDEFINED> instruction: 0x000195b8
   195ac:			; <UNDEFINED> instruction: 0x000195b8
   195b0:			; <UNDEFINED> instruction: 0x000195b8
   195b4:			; <UNDEFINED> instruction: 0x000195b8
   195b8:	bx	lr
   195bc:	mov	r0, #0
   195c0:	bx	lr
   195c4:	sub	r0, r0, #9
   195c8:	cmp	r0, #23
   195cc:	movhi	r0, #0
   195d0:	bxhi	lr
   195d4:	bic	r0, r0, #-16777216	; 0xff000000
   195d8:	movw	r1, #31
   195dc:	movt	r1, #128	; 0x80
   195e0:	mov	r2, #1
   195e4:	and	r0, r2, r1, lsr r0
   195e8:	bx	lr
   195ec:	sub	r1, r0, #65	; 0x41
   195f0:	mov	r0, #0
   195f4:	cmp	r1, #26
   195f8:	movwcc	r0, #1
   195fc:	bx	lr
   19600:	mov	r1, r0
   19604:	sub	r2, r0, #48	; 0x30
   19608:	mov	r0, #1
   1960c:	cmp	r2, #22
   19610:	bhi	19628 <__assert_fail@plt+0x7d98>
   19614:	mov	ip, #1
   19618:	movw	r3, #1023	; 0x3ff
   1961c:	movt	r3, #126	; 0x7e
   19620:	tst	r3, ip, lsl r2
   19624:	bxne	lr
   19628:	sub	r1, r1, #97	; 0x61
   1962c:	cmp	r1, #6
   19630:	movcs	r0, #0
   19634:	bxcs	lr
   19638:	bx	lr
   1963c:	sub	r1, r0, #65	; 0x41
   19640:	cmp	r1, #26
   19644:	addcc	r0, r0, #32
   19648:	bx	lr
   1964c:	sub	r1, r0, #97	; 0x61
   19650:	cmp	r1, #26
   19654:	subcc	r0, r0, #32
   19658:	bx	lr
   1965c:	push	{r4, r5, r6, sl, fp, lr}
   19660:	add	fp, sp, #16
   19664:	mov	r4, r0
   19668:	bl	11614 <__fpending@plt>
   1966c:	mov	r5, r0
   19670:	mov	r0, r4
   19674:	bl	11620 <ferror_unlocked@plt>
   19678:	mov	r6, r0
   1967c:	mov	r0, r4
   19680:	bl	19800 <__assert_fail@plt+0x7f70>
   19684:	cmp	r6, #0
   19688:	beq	196a8 <__assert_fail@plt+0x7e18>
   1968c:	mvn	r4, #0
   19690:	cmp	r0, #0
   19694:	bne	196dc <__assert_fail@plt+0x7e4c>
   19698:	bl	11710 <__errno_location@plt>
   1969c:	mov	r1, #0
   196a0:	str	r1, [r0]
   196a4:	b	196dc <__assert_fail@plt+0x7e4c>
   196a8:	cmp	r0, #0
   196ac:	mov	r4, r0
   196b0:	mvnne	r4, #0
   196b4:	cmp	r5, #0
   196b8:	bne	196dc <__assert_fail@plt+0x7e4c>
   196bc:	cmp	r0, #0
   196c0:	beq	196dc <__assert_fail@plt+0x7e4c>
   196c4:	bl	11710 <__errno_location@plt>
   196c8:	ldr	r0, [r0]
   196cc:	subs	r4, r0, #9
   196d0:	mvnne	r4, #0
   196d4:	mov	r0, r4
   196d8:	pop	{r4, r5, r6, sl, fp, pc}
   196dc:	mov	r0, r4
   196e0:	pop	{r4, r5, r6, sl, fp, pc}
   196e4:	mov	r1, #0
   196e8:	movw	r2, #62998	; 0xf616
   196ec:	movt	r2, #149	; 0x95
   196f0:	str	r1, [r0, #16]
   196f4:	str	r1, [r0, #20]
   196f8:	str	r2, [r0, #24]
   196fc:	bx	lr
   19700:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   19704:	add	fp, sp, #24
   19708:	mov	r5, r1
   1970c:	mov	r4, r0
   19710:	ldr	r0, [r0, #24]
   19714:	movw	r1, #62998	; 0xf616
   19718:	movt	r1, #149	; 0x95
   1971c:	cmp	r0, r1
   19720:	bne	197c0 <__assert_fail@plt+0x7f30>
   19724:	mov	r1, r4
   19728:	ldr	r2, [r1, #16]!
   1972c:	ldr	r3, [r1, #4]
   19730:	orrs	r0, r2, r3
   19734:	beq	19774 <__assert_fail@plt+0x7ee4>
   19738:	ldm	r4, {r0, r7}
   1973c:	ldr	r6, [r5, #96]	; 0x60
   19740:	ldr	r9, [r5, #100]	; 0x64
   19744:	eor	r7, r9, r7
   19748:	eor	r0, r6, r0
   1974c:	orrs	r0, r0, r7
   19750:	bne	19774 <__assert_fail@plt+0x7ee4>
   19754:	ldr	r0, [r4, #8]
   19758:	ldr	r7, [r4, #12]
   1975c:	ldm	r5, {r6, r9}
   19760:	eor	r7, r9, r7
   19764:	eor	r0, r6, r0
   19768:	orrs	r0, r0, r7
   1976c:	mov	r0, #1
   19770:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   19774:	adds	r6, r2, #1
   19778:	adc	r7, r3, #0
   1977c:	strd	r6, [r1]
   19780:	mov	r0, r6
   19784:	mov	r1, r7
   19788:	bl	197e0 <__assert_fail@plt+0x7f50>
   1978c:	mov	r1, r0
   19790:	mov	r0, #0
   19794:	cmp	r1, #0
   19798:	beq	197bc <__assert_fail@plt+0x7f2c>
   1979c:	orrs	r1, r6, r7
   197a0:	moveq	r0, #1
   197a4:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   197a8:	ldrd	r2, [r5]
   197ac:	str	r3, [r4, #12]
   197b0:	str	r2, [r4, #8]
   197b4:	ldrd	r2, [r5, #96]	; 0x60
   197b8:	stm	r4, {r2, r3}
   197bc:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   197c0:	movw	r0, #47175	; 0xb847
   197c4:	movt	r0, #1
   197c8:	movw	r1, #47199	; 0xb85f
   197cc:	movt	r1, #1
   197d0:	movw	r3, #47217	; 0xb871
   197d4:	movt	r3, #1
   197d8:	mov	r2, #60	; 0x3c
   197dc:	bl	11890 <__assert_fail@plt>
   197e0:	subs	r2, r0, #1
   197e4:	and	r0, r2, r0
   197e8:	sbc	r2, r1, #0
   197ec:	and	r1, r2, r1
   197f0:	orr	r0, r0, r1
   197f4:	clz	r0, r0
   197f8:	lsr	r0, r0, #5
   197fc:	bx	lr
   19800:	push	{r4, r5, fp, lr}
   19804:	add	fp, sp, #8
   19808:	sub	sp, sp, #8
   1980c:	mov	r4, r0
   19810:	bl	1174c <fileno@plt>
   19814:	cmn	r0, #1
   19818:	ble	19890 <__assert_fail@plt+0x8000>
   1981c:	mov	r0, r4
   19820:	bl	11680 <__freading@plt>
   19824:	cmp	r0, #0
   19828:	beq	19854 <__assert_fail@plt+0x7fc4>
   1982c:	mov	r0, r4
   19830:	bl	1174c <fileno@plt>
   19834:	mov	r1, #1
   19838:	str	r1, [sp]
   1983c:	mov	r2, #0
   19840:	mov	r3, #0
   19844:	bl	115f0 <lseek64@plt>
   19848:	and	r0, r0, r1
   1984c:	cmn	r0, #1
   19850:	beq	19890 <__assert_fail@plt+0x8000>
   19854:	mov	r0, r4
   19858:	bl	19acc <__assert_fail@plt+0x823c>
   1985c:	cmp	r0, #0
   19860:	beq	19890 <__assert_fail@plt+0x8000>
   19864:	bl	11710 <__errno_location@plt>
   19868:	ldr	r5, [r0]
   1986c:	mov	r0, r4
   19870:	bl	11788 <fclose@plt>
   19874:	cmp	r5, #0
   19878:	beq	19888 <__assert_fail@plt+0x7ff8>
   1987c:	bl	11710 <__errno_location@plt>
   19880:	str	r5, [r0]
   19884:	mvn	r0, #0
   19888:	sub	sp, fp, #8
   1988c:	pop	{r4, r5, fp, pc}
   19890:	mov	r0, r4
   19894:	sub	sp, fp, #8
   19898:	pop	{r4, r5, fp, lr}
   1989c:	b	11788 <fclose@plt>
   198a0:	sub	sp, sp, #8
   198a4:	push	{fp, lr}
   198a8:	mov	fp, sp
   198ac:	sub	sp, sp, #8
   198b0:	str	r3, [fp, #12]
   198b4:	str	r2, [fp, #8]
   198b8:	add	r2, fp, #8
   198bc:	str	r2, [sp, #4]
   198c0:	cmp	r1, #11
   198c4:	bhi	19904 <__assert_fail@plt+0x8074>
   198c8:	mov	r2, #1
   198cc:	movw	r3, #1300	; 0x514
   198d0:	tst	r3, r2, lsl r1
   198d4:	bne	19954 <__assert_fail@plt+0x80c4>
   198d8:	movw	r3, #2570	; 0xa0a
   198dc:	tst	r3, r2, lsl r1
   198e0:	bne	1992c <__assert_fail@plt+0x809c>
   198e4:	cmp	r1, #0
   198e8:	bne	19904 <__assert_fail@plt+0x8074>
   198ec:	ldr	r1, [sp, #4]
   198f0:	add	r2, r1, #4
   198f4:	str	r2, [sp, #4]
   198f8:	ldr	r1, [r1]
   198fc:	bl	19978 <__assert_fail@plt+0x80e8>
   19900:	b	19968 <__assert_fail@plt+0x80d8>
   19904:	sub	r2, r1, #1024	; 0x400
   19908:	cmp	r2, #10
   1990c:	bhi	19954 <__assert_fail@plt+0x80c4>
   19910:	mov	ip, #1
   19914:	movw	r3, #645	; 0x285
   19918:	tst	r3, ip, lsl r2
   1991c:	bne	19954 <__assert_fail@plt+0x80c4>
   19920:	movw	r3, #1282	; 0x502
   19924:	tst	r3, ip, lsl r2
   19928:	beq	19934 <__assert_fail@plt+0x80a4>
   1992c:	bl	117a0 <fcntl64@plt>
   19930:	b	19968 <__assert_fail@plt+0x80d8>
   19934:	cmp	r2, #6
   19938:	bne	19954 <__assert_fail@plt+0x80c4>
   1993c:	ldr	r1, [sp, #4]
   19940:	add	r2, r1, #4
   19944:	str	r2, [sp, #4]
   19948:	ldr	r1, [r1]
   1994c:	bl	19984 <__assert_fail@plt+0x80f4>
   19950:	b	19968 <__assert_fail@plt+0x80d8>
   19954:	ldr	r2, [sp, #4]
   19958:	add	r3, r2, #4
   1995c:	str	r3, [sp, #4]
   19960:	ldr	r2, [r2]
   19964:	bl	117a0 <fcntl64@plt>
   19968:	mov	sp, fp
   1996c:	pop	{fp, lr}
   19970:	add	sp, sp, #8
   19974:	bx	lr
   19978:	mov	r2, r1
   1997c:	mov	r1, #0
   19980:	b	117a0 <fcntl64@plt>
   19984:	push	{r4, r5, r6, r7, fp, lr}
   19988:	add	fp, sp, #16
   1998c:	mov	r5, r1
   19990:	mov	r6, r0
   19994:	movw	r7, #49988	; 0xc344
   19998:	movt	r7, #2
   1999c:	ldr	r0, [r7]
   199a0:	cmp	r0, #0
   199a4:	blt	19a08 <__assert_fail@plt+0x8178>
   199a8:	mov	r0, r6
   199ac:	movw	r1, #1030	; 0x406
   199b0:	mov	r2, r5
   199b4:	bl	117a0 <fcntl64@plt>
   199b8:	mov	r4, r0
   199bc:	cmn	r0, #1
   199c0:	bgt	199f4 <__assert_fail@plt+0x8164>
   199c4:	bl	11710 <__errno_location@plt>
   199c8:	ldr	r0, [r0]
   199cc:	cmp	r0, #22
   199d0:	bne	199f4 <__assert_fail@plt+0x8164>
   199d4:	mov	r0, r6
   199d8:	mov	r1, r5
   199dc:	bl	19978 <__assert_fail@plt+0x80e8>
   199e0:	mov	r4, r0
   199e4:	cmp	r0, #0
   199e8:	blt	19a58 <__assert_fail@plt+0x81c8>
   199ec:	mvn	r0, #0
   199f0:	b	199f8 <__assert_fail@plt+0x8168>
   199f4:	mov	r0, #1
   199f8:	str	r0, [r7]
   199fc:	cmp	r4, #0
   19a00:	bge	19a20 <__assert_fail@plt+0x8190>
   19a04:	b	19a58 <__assert_fail@plt+0x81c8>
   19a08:	mov	r0, r6
   19a0c:	mov	r1, r5
   19a10:	bl	19978 <__assert_fail@plt+0x80e8>
   19a14:	mov	r4, r0
   19a18:	cmp	r4, #0
   19a1c:	blt	19a58 <__assert_fail@plt+0x81c8>
   19a20:	ldr	r0, [r7]
   19a24:	cmn	r0, #1
   19a28:	bne	19a58 <__assert_fail@plt+0x81c8>
   19a2c:	mov	r0, r4
   19a30:	mov	r1, #1
   19a34:	bl	117a0 <fcntl64@plt>
   19a38:	cmp	r0, #0
   19a3c:	blt	19a60 <__assert_fail@plt+0x81d0>
   19a40:	orr	r2, r0, #1
   19a44:	mov	r0, r4
   19a48:	mov	r1, #2
   19a4c:	bl	117a0 <fcntl64@plt>
   19a50:	cmn	r0, #1
   19a54:	beq	19a60 <__assert_fail@plt+0x81d0>
   19a58:	mov	r0, r4
   19a5c:	pop	{r4, r5, r6, r7, fp, pc}
   19a60:	bl	11710 <__errno_location@plt>
   19a64:	mov	r5, r0
   19a68:	ldr	r6, [r0]
   19a6c:	mov	r0, r4
   19a70:	bl	11860 <close@plt>
   19a74:	str	r6, [r5]
   19a78:	mvn	r4, #0
   19a7c:	mov	r0, r4
   19a80:	pop	{r4, r5, r6, r7, fp, pc}
   19a84:	sub	sp, sp, #8
   19a88:	push	{fp, lr}
   19a8c:	mov	fp, sp
   19a90:	sub	sp, sp, #8
   19a94:	str	r3, [fp, #12]
   19a98:	str	r2, [fp, #8]
   19a9c:	mov	r2, #0
   19aa0:	tst	r1, #64	; 0x40
   19aa4:	addne	r2, fp, #8
   19aa8:	orrne	r2, r2, #4
   19aac:	strne	r2, [sp, #4]
   19ab0:	ldrne	r2, [fp, #8]
   19ab4:	bl	11650 <open64@plt>
   19ab8:	bl	18670 <__assert_fail@plt+0x6de0>
   19abc:	mov	sp, fp
   19ac0:	pop	{fp, lr}
   19ac4:	add	sp, sp, #8
   19ac8:	bx	lr
   19acc:	push	{r4, sl, fp, lr}
   19ad0:	add	fp, sp, #8
   19ad4:	mov	r4, r0
   19ad8:	cmp	r0, #0
   19adc:	beq	19af4 <__assert_fail@plt+0x8264>
   19ae0:	mov	r0, r4
   19ae4:	bl	11680 <__freading@plt>
   19ae8:	cmp	r0, #0
   19aec:	movne	r0, r4
   19af0:	blne	19b00 <__assert_fail@plt+0x8270>
   19af4:	mov	r0, r4
   19af8:	pop	{r4, sl, fp, lr}
   19afc:	b	11500 <fflush@plt>
   19b00:	ldrb	r1, [r0, #1]
   19b04:	tst	r1, #1
   19b08:	bxeq	lr
   19b0c:	push	{fp, lr}
   19b10:	mov	fp, sp
   19b14:	sub	sp, sp, #8
   19b18:	mov	r1, #1
   19b1c:	str	r1, [sp]
   19b20:	mov	r2, #0
   19b24:	mov	r3, #0
   19b28:	bl	19b5c <__assert_fail@plt+0x82cc>
   19b2c:	mov	sp, fp
   19b30:	pop	{fp, pc}
   19b34:	push	{r4, r5, r6, sl, fp, lr}
   19b38:	add	fp, sp, #16
   19b3c:	mov	r4, r0
   19b40:	bl	11710 <__errno_location@plt>
   19b44:	mov	r5, r0
   19b48:	ldr	r6, [r0]
   19b4c:	mov	r0, r4
   19b50:	bl	11524 <free@plt>
   19b54:	str	r6, [r5]
   19b58:	pop	{r4, r5, r6, sl, fp, pc}
   19b5c:	push	{r4, r5, r6, r7, fp, lr}
   19b60:	add	fp, sp, #16
   19b64:	sub	sp, sp, #8
   19b68:	mov	r5, r3
   19b6c:	mov	r6, r2
   19b70:	mov	r4, r0
   19b74:	ldr	r0, [r0, #4]
   19b78:	ldr	r1, [r4, #8]
   19b7c:	cmp	r1, r0
   19b80:	bne	19b9c <__assert_fail@plt+0x830c>
   19b84:	ldrd	r0, [r4, #16]
   19b88:	cmp	r1, r0
   19b8c:	bne	19b9c <__assert_fail@plt+0x830c>
   19b90:	ldr	r0, [r4, #36]	; 0x24
   19b94:	cmp	r0, #0
   19b98:	beq	19bb4 <__assert_fail@plt+0x8324>
   19b9c:	mov	r0, r4
   19ba0:	mov	r2, r6
   19ba4:	mov	r3, r5
   19ba8:	sub	sp, fp, #16
   19bac:	pop	{r4, r5, r6, r7, fp, lr}
   19bb0:	b	11794 <fseeko64@plt>
   19bb4:	ldr	r7, [fp, #8]
   19bb8:	mov	r0, r4
   19bbc:	bl	1174c <fileno@plt>
   19bc0:	str	r7, [sp]
   19bc4:	mov	r2, r6
   19bc8:	mov	r3, r5
   19bcc:	bl	115f0 <lseek64@plt>
   19bd0:	and	r2, r0, r1
   19bd4:	cmn	r2, #1
   19bd8:	mvneq	r0, #0
   19bdc:	subeq	sp, fp, #16
   19be0:	popeq	{r4, r5, r6, r7, fp, pc}
   19be4:	strd	r0, [r4, #80]	; 0x50
   19be8:	ldr	r0, [r4]
   19bec:	bic	r0, r0, #16
   19bf0:	str	r0, [r4]
   19bf4:	mov	r0, #0
   19bf8:	sub	sp, fp, #16
   19bfc:	pop	{r4, r5, r6, r7, fp, pc}
   19c00:	push	{fp, lr}
   19c04:	mov	fp, sp
   19c08:	bl	11710 <__errno_location@plt>
   19c0c:	mov	r1, #12
   19c10:	str	r1, [r0]
   19c14:	mov	r0, #0
   19c18:	pop	{fp, pc}
   19c1c:	b	1903c <__assert_fail@plt+0x77ac>
   19c20:	cmp	r1, #0
   19c24:	orreq	r1, r1, #1
   19c28:	b	1906c <__assert_fail@plt+0x77dc>
   19c2c:	b	18fe8 <__assert_fail@plt+0x7758>
   19c30:	clz	r3, r2
   19c34:	lsr	ip, r3, #5
   19c38:	clz	r3, r1
   19c3c:	lsr	r3, r3, #5
   19c40:	orrs	r3, r3, ip
   19c44:	movwne	r1, #1
   19c48:	movwne	r2, #1
   19c4c:	b	19d68 <__assert_fail@plt+0x84d8>
   19c50:	push	{fp, lr}
   19c54:	mov	fp, sp
   19c58:	mov	r0, #14
   19c5c:	bl	117c4 <nl_langinfo@plt>
   19c60:	movw	r1, #43931	; 0xab9b
   19c64:	movt	r1, #1
   19c68:	cmp	r0, #0
   19c6c:	movne	r1, r0
   19c70:	ldrb	r2, [r1]
   19c74:	movw	r0, #47284	; 0xb8b4
   19c78:	movt	r0, #1
   19c7c:	cmp	r2, #0
   19c80:	movne	r0, r1
   19c84:	pop	{fp, pc}
   19c88:	push	{r4, r5, r6, r7, fp, lr}
   19c8c:	add	fp, sp, #16
   19c90:	sub	sp, sp, #8
   19c94:	mov	r7, r2
   19c98:	mov	r4, r1
   19c9c:	add	r5, sp, #4
   19ca0:	cmp	r0, #0
   19ca4:	movne	r5, r0
   19ca8:	mov	r0, r5
   19cac:	bl	1162c <mbrtowc@plt>
   19cb0:	mov	r6, r0
   19cb4:	cmp	r7, #0
   19cb8:	beq	19cdc <__assert_fail@plt+0x844c>
   19cbc:	cmn	r6, #2
   19cc0:	bcc	19cdc <__assert_fail@plt+0x844c>
   19cc4:	mov	r0, #0
   19cc8:	bl	1a18c <__assert_fail@plt+0x88fc>
   19ccc:	cmp	r0, #0
   19cd0:	ldrbeq	r0, [r4]
   19cd4:	streq	r0, [r5]
   19cd8:	moveq	r6, #1
   19cdc:	mov	r0, r6
   19ce0:	sub	sp, fp, #16
   19ce4:	pop	{r4, r5, r6, r7, fp, pc}
   19ce8:	push	{fp, lr}
   19cec:	mov	fp, sp
   19cf0:	mov	r4, r0
   19cf4:	movw	r0, #49516	; 0xc16c
   19cf8:	movt	r0, #2
   19cfc:	ldr	r5, [r0]
   19d00:	movw	r1, #47290	; 0xb8ba
   19d04:	movt	r1, #1
   19d08:	mov	r0, #0
   19d0c:	mov	r2, #5
   19d10:	bl	11578 <dcgettext@plt>
   19d14:	mov	r2, r0
   19d18:	mov	r0, r5
   19d1c:	mov	r1, r4
   19d20:	bl	11638 <error@plt>
   19d24:	bl	11854 <abort@plt>
   19d28:	push	{fp, lr}
   19d2c:	mov	fp, sp
   19d30:	mov	r4, r0
   19d34:	movw	r0, #49516	; 0xc16c
   19d38:	movt	r0, #2
   19d3c:	ldr	r5, [r0]
   19d40:	movw	r1, #47333	; 0xb8e5
   19d44:	movt	r1, #1
   19d48:	mov	r0, #0
   19d4c:	mov	r2, #5
   19d50:	bl	11578 <dcgettext@plt>
   19d54:	mov	r2, r0
   19d58:	mov	r0, r5
   19d5c:	mov	r1, r4
   19d60:	bl	11638 <error@plt>
   19d64:	bl	11854 <abort@plt>
   19d68:	cmp	r2, #0
   19d6c:	beq	19d9c <__assert_fail@plt+0x850c>
   19d70:	mvn	r3, #0
   19d74:	udiv	r3, r3, r2
   19d78:	cmp	r3, r1
   19d7c:	bcs	19d9c <__assert_fail@plt+0x850c>
   19d80:	push	{fp, lr}
   19d84:	mov	fp, sp
   19d88:	bl	11710 <__errno_location@plt>
   19d8c:	mov	r1, #12
   19d90:	str	r1, [r0]
   19d94:	mov	r0, #0
   19d98:	pop	{fp, pc}
   19d9c:	mul	r1, r2, r1
   19da0:	b	1906c <__assert_fail@plt+0x77dc>
   19da4:	push	{r4, r5, fp, lr}
   19da8:	add	fp, sp, #8
   19dac:	mov	r5, r0
   19db0:	mov	r4, #0
   19db4:	str	r4, [r0, #4]
   19db8:	movw	r0, #45763	; 0xb2c3
   19dbc:	movt	r0, #1
   19dc0:	mov	r1, #524288	; 0x80000
   19dc4:	bl	19a84 <__assert_fail@plt+0x81f4>
   19dc8:	str	r0, [r5]
   19dcc:	cmn	r0, #1
   19dd0:	ble	19ddc <__assert_fail@plt+0x854c>
   19dd4:	mov	r0, r4
   19dd8:	pop	{r4, r5, fp, pc}
   19ddc:	mov	r4, #0
   19de0:	mov	r0, #0
   19de4:	mov	r1, #0
   19de8:	bl	116bc <getcwd@plt>
   19dec:	str	r0, [r5, #4]
   19df0:	cmp	r0, #0
   19df4:	mvneq	r4, #0
   19df8:	mov	r0, r4
   19dfc:	pop	{r4, r5, fp, pc}
   19e00:	ldr	r1, [r0]
   19e04:	cmp	r1, #0
   19e08:	blt	19e14 <__assert_fail@plt+0x8584>
   19e0c:	mov	r0, r1
   19e10:	b	117f4 <fchdir@plt>
   19e14:	ldr	r0, [r0, #4]
   19e18:	b	19e50 <__assert_fail@plt+0x85c0>
   19e1c:	push	{r4, sl, fp, lr}
   19e20:	add	fp, sp, #8
   19e24:	mov	r4, r0
   19e28:	ldr	r0, [r0]
   19e2c:	cmp	r0, #0
   19e30:	blt	19e38 <__assert_fail@plt+0x85a8>
   19e34:	bl	11860 <close@plt>
   19e38:	ldr	r0, [r4, #4]
   19e3c:	pop	{r4, sl, fp, lr}
   19e40:	b	19b34 <__assert_fail@plt+0x82a4>
   19e44:	mov	r1, #0
   19e48:	mov	r2, #3
   19e4c:	b	198a0 <__assert_fail@plt+0x8010>
   19e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e54:	add	fp, sp, #28
   19e58:	sub	sp, sp, #4
   19e5c:	mov	r5, r0
   19e60:	bl	115b4 <chdir@plt>
   19e64:	cmp	r0, #0
   19e68:	beq	19f24 <__assert_fail@plt+0x8694>
   19e6c:	mov	r6, r0
   19e70:	bl	11710 <__errno_location@plt>
   19e74:	mov	r8, r0
   19e78:	ldr	r0, [r0]
   19e7c:	cmp	r0, #36	; 0x24
   19e80:	bne	1a01c <__assert_fail@plt+0x878c>
   19e84:	mov	r0, r5
   19e88:	bl	116ec <strlen@plt>
   19e8c:	mov	r6, r0
   19e90:	mov	r0, sp
   19e94:	bl	1a0d8 <__assert_fail@plt+0x8848>
   19e98:	cmp	r6, #0
   19e9c:	beq	1a058 <__assert_fail@plt+0x87c8>
   19ea0:	mov	r0, #0
   19ea4:	cmp	r0, r6, lsr #12
   19ea8:	beq	1a078 <__assert_fail@plt+0x87e8>
   19eac:	movw	r1, #47173	; 0xb845
   19eb0:	movt	r1, #1
   19eb4:	mov	r0, r5
   19eb8:	bl	11884 <strspn@plt>
   19ebc:	cmp	r0, #0
   19ec0:	mov	r7, r5
   19ec4:	beq	19f48 <__assert_fail@plt+0x86b8>
   19ec8:	mov	r4, r0
   19ecc:	cmp	r0, #2
   19ed0:	bne	19f2c <__assert_fail@plt+0x869c>
   19ed4:	add	r0, r5, #3
   19ed8:	sub	r2, r6, #3
   19edc:	mov	r7, #47	; 0x2f
   19ee0:	mov	r1, #47	; 0x2f
   19ee4:	bl	11764 <memchr@plt>
   19ee8:	cmp	r0, #0
   19eec:	beq	1a010 <__assert_fail@plt+0x8780>
   19ef0:	mov	r4, r0
   19ef4:	mov	r0, #0
   19ef8:	strb	r0, [r4]
   19efc:	mov	r0, sp
   19f00:	mov	r1, r5
   19f04:	bl	1a0e4 <__assert_fail@plt+0x8854>
   19f08:	strb	r7, [r4]
   19f0c:	cmp	r0, #0
   19f10:	bne	19ffc <__assert_fail@plt+0x876c>
   19f14:	add	r0, r4, #1
   19f18:	bl	1a120 <__assert_fail@plt+0x8890>
   19f1c:	mov	r7, r0
   19f20:	b	19f48 <__assert_fail@plt+0x86b8>
   19f24:	mov	r6, #0
   19f28:	b	1a01c <__assert_fail@plt+0x878c>
   19f2c:	mov	r0, sp
   19f30:	movw	r1, #47173	; 0xb845
   19f34:	movt	r1, #1
   19f38:	bl	1a0e4 <__assert_fail@plt+0x8854>
   19f3c:	cmp	r0, #0
   19f40:	bne	19ffc <__assert_fail@plt+0x876c>
   19f44:	add	r7, r5, r4
   19f48:	ldrb	r0, [r7]
   19f4c:	cmp	r0, #47	; 0x2f
   19f50:	beq	1a098 <__assert_fail@plt+0x8808>
   19f54:	add	r4, r5, r6
   19f58:	cmp	r7, r4
   19f5c:	bhi	1a0b8 <__assert_fail@plt+0x8828>
   19f60:	sub	r0, r4, r7
   19f64:	cmp	r0, #4096	; 0x1000
   19f68:	blt	19fd0 <__assert_fail@plt+0x8740>
   19f6c:	mov	r9, #47	; 0x2f
   19f70:	mov	sl, #0
   19f74:	mov	r5, sp
   19f78:	mov	r0, r7
   19f7c:	mov	r1, #47	; 0x2f
   19f80:	mov	r2, #4096	; 0x1000
   19f84:	bl	11704 <memrchr@plt>
   19f88:	cmp	r0, #0
   19f8c:	beq	1a010 <__assert_fail@plt+0x8780>
   19f90:	mov	r6, r0
   19f94:	strb	sl, [r0], -r7
   19f98:	cmp	r0, #4096	; 0x1000
   19f9c:	bge	1a038 <__assert_fail@plt+0x87a8>
   19fa0:	mov	r0, r5
   19fa4:	mov	r1, r7
   19fa8:	bl	1a0e4 <__assert_fail@plt+0x8854>
   19fac:	strb	r9, [r6]
   19fb0:	cmp	r0, #0
   19fb4:	bne	19ffc <__assert_fail@plt+0x876c>
   19fb8:	add	r0, r6, #1
   19fbc:	bl	1a120 <__assert_fail@plt+0x8890>
   19fc0:	mov	r7, r0
   19fc4:	sub	r0, r4, r0
   19fc8:	cmp	r0, #4096	; 0x1000
   19fcc:	bge	19f78 <__assert_fail@plt+0x86e8>
   19fd0:	cmp	r7, r4
   19fd4:	bcs	19fec <__assert_fail@plt+0x875c>
   19fd8:	mov	r0, sp
   19fdc:	mov	r1, r7
   19fe0:	bl	1a0e4 <__assert_fail@plt+0x8854>
   19fe4:	cmp	r0, #0
   19fe8:	bne	19ffc <__assert_fail@plt+0x876c>
   19fec:	mov	r0, sp
   19ff0:	bl	1a140 <__assert_fail@plt+0x88b0>
   19ff4:	cmp	r0, #0
   19ff8:	beq	1a028 <__assert_fail@plt+0x8798>
   19ffc:	ldr	r4, [r8]
   1a000:	mov	r0, sp
   1a004:	bl	1a148 <__assert_fail@plt+0x88b8>
   1a008:	str	r4, [r8]
   1a00c:	b	1a018 <__assert_fail@plt+0x8788>
   1a010:	mov	r0, #36	; 0x24
   1a014:	str	r0, [r8]
   1a018:	mvn	r6, #0
   1a01c:	mov	r0, r6
   1a020:	sub	sp, fp, #28
   1a024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a028:	mov	r0, sp
   1a02c:	bl	1a148 <__assert_fail@plt+0x88b8>
   1a030:	mov	r6, #0
   1a034:	b	1a01c <__assert_fail@plt+0x878c>
   1a038:	movw	r0, #47466	; 0xb96a
   1a03c:	movt	r0, #1
   1a040:	movw	r1, #47387	; 0xb91b
   1a044:	movt	r1, #1
   1a048:	movw	r3, #47404	; 0xb92c
   1a04c:	movt	r3, #1
   1a050:	mov	r2, #179	; 0xb3
   1a054:	bl	11890 <__assert_fail@plt>
   1a058:	movw	r0, #47379	; 0xb913
   1a05c:	movt	r0, #1
   1a060:	movw	r1, #47387	; 0xb91b
   1a064:	movt	r1, #1
   1a068:	movw	r3, #47404	; 0xb92c
   1a06c:	movt	r3, #1
   1a070:	mov	r2, #126	; 0x7e
   1a074:	bl	11890 <__assert_fail@plt>
   1a078:	movw	r0, #47427	; 0xb943
   1a07c:	movt	r0, #1
   1a080:	movw	r1, #47387	; 0xb91b
   1a084:	movt	r1, #1
   1a088:	movw	r3, #47404	; 0xb92c
   1a08c:	movt	r3, #1
   1a090:	mov	r2, #127	; 0x7f
   1a094:	bl	11890 <__assert_fail@plt>
   1a098:	movw	r0, #47439	; 0xb94f
   1a09c:	movt	r0, #1
   1a0a0:	movw	r1, #47387	; 0xb91b
   1a0a4:	movt	r1, #1
   1a0a8:	movw	r3, #47404	; 0xb92c
   1a0ac:	movt	r3, #1
   1a0b0:	mov	r2, #162	; 0xa2
   1a0b4:	bl	11890 <__assert_fail@plt>
   1a0b8:	movw	r0, #47451	; 0xb95b
   1a0bc:	movt	r0, #1
   1a0c0:	movw	r1, #47387	; 0xb91b
   1a0c4:	movt	r1, #1
   1a0c8:	movw	r3, #47404	; 0xb92c
   1a0cc:	movt	r3, #1
   1a0d0:	mov	r2, #163	; 0xa3
   1a0d4:	bl	11890 <__assert_fail@plt>
   1a0d8:	mvn	r1, #99	; 0x63
   1a0dc:	str	r1, [r0]
   1a0e0:	bx	lr
   1a0e4:	push	{r4, r5, fp, lr}
   1a0e8:	add	fp, sp, #8
   1a0ec:	mov	r4, r0
   1a0f0:	ldr	r0, [r0]
   1a0f4:	mov	r2, #18688	; 0x4900
   1a0f8:	bl	116f8 <openat64@plt>
   1a0fc:	cmp	r0, #0
   1a100:	mvnlt	r0, #0
   1a104:	poplt	{r4, r5, fp, pc}
   1a108:	mov	r5, r0
   1a10c:	mov	r0, r4
   1a110:	bl	1a148 <__assert_fail@plt+0x88b8>
   1a114:	str	r5, [r4]
   1a118:	mov	r0, #0
   1a11c:	pop	{r4, r5, fp, pc}
   1a120:	push	{r4, sl, fp, lr}
   1a124:	add	fp, sp, #8
   1a128:	mov	r4, r0
   1a12c:	movw	r1, #47173	; 0xb845
   1a130:	movt	r1, #1
   1a134:	bl	11884 <strspn@plt>
   1a138:	add	r0, r4, r0
   1a13c:	pop	{r4, sl, fp, pc}
   1a140:	ldr	r0, [r0]
   1a144:	b	117f4 <fchdir@plt>
   1a148:	push	{fp, lr}
   1a14c:	mov	fp, sp
   1a150:	ldr	r0, [r0]
   1a154:	cmp	r0, #0
   1a158:	poplt	{fp, pc}
   1a15c:	bl	11860 <close@plt>
   1a160:	cmp	r0, #0
   1a164:	bne	1a16c <__assert_fail@plt+0x88dc>
   1a168:	pop	{fp, pc}
   1a16c:	movw	r0, #47485	; 0xb97d
   1a170:	movt	r0, #1
   1a174:	movw	r1, #47387	; 0xb91b
   1a178:	movt	r1, #1
   1a17c:	movw	r3, #47498	; 0xb98a
   1a180:	movt	r3, #1
   1a184:	mov	r2, #64	; 0x40
   1a188:	bl	11890 <__assert_fail@plt>
   1a18c:	push	{r4, sl, fp, lr}
   1a190:	add	fp, sp, #8
   1a194:	sub	sp, sp, #264	; 0x108
   1a198:	add	r1, sp, #7
   1a19c:	movw	r2, #257	; 0x101
   1a1a0:	bl	1a1f0 <__assert_fail@plt+0x8960>
   1a1a4:	mov	r4, #0
   1a1a8:	cmp	r0, #0
   1a1ac:	bne	1a1e4 <__assert_fail@plt+0x8954>
   1a1b0:	add	r0, sp, #7
   1a1b4:	movw	r1, #47535	; 0xb9af
   1a1b8:	movt	r1, #1
   1a1bc:	bl	114f4 <strcmp@plt>
   1a1c0:	cmp	r0, #0
   1a1c4:	beq	1a1e4 <__assert_fail@plt+0x8954>
   1a1c8:	add	r0, sp, #7
   1a1cc:	movw	r1, #47537	; 0xb9b1
   1a1d0:	movt	r1, #1
   1a1d4:	bl	114f4 <strcmp@plt>
   1a1d8:	mov	r4, r0
   1a1dc:	cmp	r0, #0
   1a1e0:	movwne	r4, #1
   1a1e4:	mov	r0, r4
   1a1e8:	sub	sp, fp, #8
   1a1ec:	pop	{r4, sl, fp, pc}
   1a1f0:	b	1a1f4 <__assert_fail@plt+0x8964>
   1a1f4:	push	{r4, r5, r6, r7, fp, lr}
   1a1f8:	add	fp, sp, #16
   1a1fc:	mov	r6, r2
   1a200:	mov	r4, r1
   1a204:	bl	1a290 <__assert_fail@plt+0x8a00>
   1a208:	cmp	r0, #0
   1a20c:	beq	1a23c <__assert_fail@plt+0x89ac>
   1a210:	mov	r7, r0
   1a214:	bl	116ec <strlen@plt>
   1a218:	cmp	r0, r6
   1a21c:	bcs	1a25c <__assert_fail@plt+0x89cc>
   1a220:	add	r2, r0, #1
   1a224:	mov	r0, r4
   1a228:	mov	r1, r7
   1a22c:	bl	1153c <memcpy@plt>
   1a230:	mov	r5, #0
   1a234:	mov	r0, r5
   1a238:	pop	{r4, r5, r6, r7, fp, pc}
   1a23c:	mov	r5, #22
   1a240:	cmp	r6, #0
   1a244:	movne	r0, #0
   1a248:	strbne	r0, [r4]
   1a24c:	movne	r0, r5
   1a250:	popne	{r4, r5, r6, r7, fp, pc}
   1a254:	mov	r0, r5
   1a258:	pop	{r4, r5, r6, r7, fp, pc}
   1a25c:	mov	r5, #34	; 0x22
   1a260:	cmp	r6, #0
   1a264:	beq	1a284 <__assert_fail@plt+0x89f4>
   1a268:	sub	r6, r6, #1
   1a26c:	mov	r0, r4
   1a270:	mov	r1, r7
   1a274:	mov	r2, r6
   1a278:	bl	1153c <memcpy@plt>
   1a27c:	mov	r0, #0
   1a280:	strb	r0, [r4, r6]
   1a284:	mov	r0, r5
   1a288:	pop	{r4, r5, r6, r7, fp, pc}
   1a28c:	b	1a290 <__assert_fail@plt+0x8a00>
   1a290:	mov	r1, #0
   1a294:	b	117ac <setlocale@plt>
   1a298:	cmp	r3, #0
   1a29c:	cmpeq	r2, #0
   1a2a0:	bne	1a2b8 <__assert_fail@plt+0x8a28>
   1a2a4:	cmp	r1, #0
   1a2a8:	cmpeq	r0, #0
   1a2ac:	mvnne	r1, #0
   1a2b0:	mvnne	r0, #0
   1a2b4:	b	1a2d4 <__assert_fail@plt+0x8a44>
   1a2b8:	sub	sp, sp, #8
   1a2bc:	push	{sp, lr}
   1a2c0:	bl	1a2e4 <__assert_fail@plt+0x8a54>
   1a2c4:	ldr	lr, [sp, #4]
   1a2c8:	add	sp, sp, #8
   1a2cc:	pop	{r2, r3}
   1a2d0:	bx	lr
   1a2d4:	push	{r1, lr}
   1a2d8:	mov	r0, #8
   1a2dc:	bl	114dc <raise@plt>
   1a2e0:	pop	{r1, pc}
   1a2e4:	cmp	r1, r3
   1a2e8:	cmpeq	r0, r2
   1a2ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2f0:	mov	r4, r0
   1a2f4:	movcc	r0, #0
   1a2f8:	mov	r5, r1
   1a2fc:	ldr	lr, [sp, #36]	; 0x24
   1a300:	movcc	r1, r0
   1a304:	bcc	1a400 <__assert_fail@plt+0x8b70>
   1a308:	cmp	r3, #0
   1a30c:	clzeq	ip, r2
   1a310:	clzne	ip, r3
   1a314:	addeq	ip, ip, #32
   1a318:	cmp	r5, #0
   1a31c:	clzeq	r1, r4
   1a320:	addeq	r1, r1, #32
   1a324:	clzne	r1, r5
   1a328:	sub	ip, ip, r1
   1a32c:	sub	sl, ip, #32
   1a330:	lsl	r9, r3, ip
   1a334:	rsb	fp, ip, #32
   1a338:	orr	r9, r9, r2, lsl sl
   1a33c:	orr	r9, r9, r2, lsr fp
   1a340:	lsl	r8, r2, ip
   1a344:	cmp	r5, r9
   1a348:	cmpeq	r4, r8
   1a34c:	movcc	r0, #0
   1a350:	movcc	r1, r0
   1a354:	bcc	1a370 <__assert_fail@plt+0x8ae0>
   1a358:	mov	r0, #1
   1a35c:	subs	r4, r4, r8
   1a360:	lsl	r1, r0, sl
   1a364:	orr	r1, r1, r0, lsr fp
   1a368:	lsl	r0, r0, ip
   1a36c:	sbc	r5, r5, r9
   1a370:	cmp	ip, #0
   1a374:	beq	1a400 <__assert_fail@plt+0x8b70>
   1a378:	lsr	r6, r8, #1
   1a37c:	orr	r6, r6, r9, lsl #31
   1a380:	lsr	r7, r9, #1
   1a384:	mov	r2, ip
   1a388:	b	1a3ac <__assert_fail@plt+0x8b1c>
   1a38c:	subs	r3, r4, r6
   1a390:	sbc	r8, r5, r7
   1a394:	adds	r3, r3, r3
   1a398:	adc	r8, r8, r8
   1a39c:	adds	r4, r3, #1
   1a3a0:	adc	r5, r8, #0
   1a3a4:	subs	r2, r2, #1
   1a3a8:	beq	1a3c8 <__assert_fail@plt+0x8b38>
   1a3ac:	cmp	r5, r7
   1a3b0:	cmpeq	r4, r6
   1a3b4:	bcs	1a38c <__assert_fail@plt+0x8afc>
   1a3b8:	adds	r4, r4, r4
   1a3bc:	adc	r5, r5, r5
   1a3c0:	subs	r2, r2, #1
   1a3c4:	bne	1a3ac <__assert_fail@plt+0x8b1c>
   1a3c8:	lsr	r3, r4, ip
   1a3cc:	orr	r3, r3, r5, lsl fp
   1a3d0:	lsr	r2, r5, ip
   1a3d4:	orr	r3, r3, r5, lsr sl
   1a3d8:	adds	r0, r0, r4
   1a3dc:	mov	r4, r3
   1a3e0:	lsl	r3, r2, ip
   1a3e4:	orr	r3, r3, r4, lsl sl
   1a3e8:	lsl	ip, r4, ip
   1a3ec:	orr	r3, r3, r4, lsr fp
   1a3f0:	adc	r1, r1, r5
   1a3f4:	subs	r0, r0, ip
   1a3f8:	mov	r5, r2
   1a3fc:	sbc	r1, r1, r3
   1a400:	cmp	lr, #0
   1a404:	strdne	r4, [lr]
   1a408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a40c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a410:	mov	r7, r0
   1a414:	ldr	r6, [pc, #72]	; 1a464 <__assert_fail@plt+0x8bd4>
   1a418:	ldr	r5, [pc, #72]	; 1a468 <__assert_fail@plt+0x8bd8>
   1a41c:	add	r6, pc, r6
   1a420:	add	r5, pc, r5
   1a424:	sub	r6, r6, r5
   1a428:	mov	r8, r1
   1a42c:	mov	r9, r2
   1a430:	bl	11498 <fstatfs64@plt-0x20>
   1a434:	asrs	r6, r6, #2
   1a438:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a43c:	mov	r4, #0
   1a440:	add	r4, r4, #1
   1a444:	ldr	r3, [r5], #4
   1a448:	mov	r2, r9
   1a44c:	mov	r1, r8
   1a450:	mov	r0, r7
   1a454:	blx	r3
   1a458:	cmp	r6, r4
   1a45c:	bne	1a440 <__assert_fail@plt+0x8bb0>
   1a460:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a464:	andeq	r1, r1, r0, ror #21
   1a468:	ldrdeq	r1, [r1], -r8
   1a46c:	bx	lr
   1a470:	ldr	r3, [pc, #12]	; 1a484 <__assert_fail@plt+0x8bf4>
   1a474:	mov	r1, #0
   1a478:	add	r3, pc, r3
   1a47c:	ldr	r2, [r3]
   1a480:	b	11728 <__cxa_atexit@plt>
   1a484:	andeq	r1, r1, r4, ror #25
   1a488:	mov	r2, r1
   1a48c:	mov	r1, r0
   1a490:	mov	r0, #3
   1a494:	b	1183c <__xstat64@plt>
   1a498:	mov	r2, r1
   1a49c:	mov	r1, r0
   1a4a0:	mov	r0, #3
   1a4a4:	b	115d8 <__fxstat64@plt>
   1a4a8:	mov	r2, r1
   1a4ac:	mov	r1, r0
   1a4b0:	mov	r0, #3
   1a4b4:	b	1186c <__lxstat64@plt>
   1a4b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a4bc:	sub	sp, sp, #12
   1a4c0:	str	r3, [sp]
   1a4c4:	mov	r3, r2
   1a4c8:	mov	r2, r1
   1a4cc:	mov	r1, r0
   1a4d0:	mov	r0, #3
   1a4d4:	bl	115c0 <__fxstatat64@plt>
   1a4d8:	add	sp, sp, #12
   1a4dc:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001a4e0 <.fini>:
   1a4e0:	push	{r3, lr}
   1a4e4:	pop	{r3, pc}
