
../repos/coreutils/src/vdir:     file format elf32-littlearm


Disassembly of section .init:

00011838 <.init>:
   11838:	push	{r3, lr}
   1183c:	bl	13d30 <__assert_fail@plt+0x1fbc>
   11840:	pop	{r3, pc}

Disassembly of section .plt:

00011844 <calloc@plt-0x14>:
   11844:	push	{lr}		; (str lr, [sp, #-4]!)
   11848:	ldr	lr, [pc, #4]	; 11854 <calloc@plt-0x4>
   1184c:	add	lr, pc, lr
   11850:	ldr	pc, [lr, #8]!
   11854:	andeq	pc, r2, ip, lsr #15

00011858 <calloc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #192512	; 0x2f000
   11860:	ldr	pc, [ip, #1964]!	; 0x7ac

00011864 <fputs_unlocked@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #192512	; 0x2f000
   1186c:	ldr	pc, [ip, #1956]!	; 0x7a4

00011870 <cap_to_text@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #192512	; 0x2f000
   11878:	ldr	pc, [ip, #1948]!	; 0x79c

0001187c <raise@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #192512	; 0x2f000
   11884:	ldr	pc, [ip, #1940]!	; 0x794

00011888 <gmtime_r@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #192512	; 0x2f000
   11890:	ldr	pc, [ip, #1932]!	; 0x78c

00011894 <getpwnam@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #192512	; 0x2f000
   1189c:	ldr	pc, [ip, #1924]!	; 0x784

000118a0 <strcmp@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #192512	; 0x2f000
   118a8:	ldr	pc, [ip, #1916]!	; 0x77c

000118ac <getpwuid@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #192512	; 0x2f000
   118b4:	ldr	pc, [ip, #1908]!	; 0x774

000118b8 <mktime@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #192512	; 0x2f000
   118c0:	ldr	pc, [ip, #1900]!	; 0x76c

000118c4 <fflush@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #192512	; 0x2f000
   118cc:	ldr	pc, [ip, #1892]!	; 0x764

000118d0 <wcwidth@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #192512	; 0x2f000
   118d8:	ldr	pc, [ip, #1884]!	; 0x75c

000118dc <sigprocmask@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #192512	; 0x2f000
   118e4:	ldr	pc, [ip, #1876]!	; 0x754

000118e8 <_setjmp@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #192512	; 0x2f000
   118f0:	ldr	pc, [ip, #1868]!	; 0x74c

000118f4 <memmove@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #192512	; 0x2f000
   118fc:	ldr	pc, [ip, #1860]!	; 0x744

00011900 <free@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #192512	; 0x2f000
   11908:	ldr	pc, [ip, #1852]!	; 0x73c

0001190c <faccessat@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #192512	; 0x2f000
   11914:	ldr	pc, [ip, #1844]!	; 0x734

00011918 <clock_gettime@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #192512	; 0x2f000
   11920:	ldr	pc, [ip, #1836]!	; 0x72c

00011924 <_exit@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #192512	; 0x2f000
   1192c:	ldr	pc, [ip, #1828]!	; 0x724

00011930 <memcpy@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #192512	; 0x2f000
   11938:	ldr	pc, [ip, #1820]!	; 0x71c

0001193c <__strtoull_internal@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #192512	; 0x2f000
   11944:	ldr	pc, [ip, #1812]!	; 0x714

00011948 <mbsinit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #192512	; 0x2f000
   11950:	ldr	pc, [ip, #1804]!	; 0x70c

00011954 <signal@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #192512	; 0x2f000
   1195c:	ldr	pc, [ip, #1796]!	; 0x704

00011960 <fwrite_unlocked@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #192512	; 0x2f000
   11968:	ldr	pc, [ip, #1788]!	; 0x6fc

0001196c <memcmp@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #192512	; 0x2f000
   11974:	ldr	pc, [ip, #1780]!	; 0x6f4

00011978 <fputc_unlocked@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #192512	; 0x2f000
   11980:	ldr	pc, [ip, #1772]!	; 0x6ec

00011984 <dcgettext@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #192512	; 0x2f000
   1198c:	ldr	pc, [ip, #1764]!	; 0x6e4

00011990 <realloc@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #192512	; 0x2f000
   11998:	ldr	pc, [ip, #1756]!	; 0x6dc

0001199c <sigismember@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #192512	; 0x2f000
   119a4:	ldr	pc, [ip, #1748]!	; 0x6d4

000119a8 <fgetfilecon@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #192512	; 0x2f000
   119b0:	ldr	pc, [ip, #1740]!	; 0x6cc

000119b4 <localtime_r@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #192512	; 0x2f000
   119bc:	ldr	pc, [ip, #1732]!	; 0x6c4

000119c0 <textdomain@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #192512	; 0x2f000
   119c8:	ldr	pc, [ip, #1724]!	; 0x6bc

000119cc <iswcntrl@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #192512	; 0x2f000
   119d4:	ldr	pc, [ip, #1716]!	; 0x6b4

000119d8 <rawmemchr@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #192512	; 0x2f000
   119e0:	ldr	pc, [ip, #1708]!	; 0x6ac

000119e4 <fflush_unlocked@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #192512	; 0x2f000
   119ec:	ldr	pc, [ip, #1700]!	; 0x6a4

000119f0 <iswprint@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #192512	; 0x2f000
   119f8:	ldr	pc, [ip, #1692]!	; 0x69c

000119fc <tzset@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #192512	; 0x2f000
   11a04:	ldr	pc, [ip, #1684]!	; 0x694

00011a08 <readlink@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #192512	; 0x2f000
   11a10:	ldr	pc, [ip, #1676]!	; 0x68c

00011a14 <sigaction@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #192512	; 0x2f000
   11a1c:	ldr	pc, [ip, #1668]!	; 0x684

00011a20 <__memcpy_chk@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #192512	; 0x2f000
   11a28:	ldr	pc, [ip, #1660]!	; 0x67c

00011a2c <fwrite@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #192512	; 0x2f000
   11a34:	ldr	pc, [ip, #1652]!	; 0x674

00011a38 <ioctl@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #192512	; 0x2f000
   11a40:	ldr	pc, [ip, #1644]!	; 0x66c

00011a44 <lseek64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #192512	; 0x2f000
   11a4c:	ldr	pc, [ip, #1636]!	; 0x664

00011a50 <__ctype_get_mb_cur_max@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #192512	; 0x2f000
   11a58:	ldr	pc, [ip, #1628]!	; 0x65c

00011a5c <strcpy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #192512	; 0x2f000
   11a64:	ldr	pc, [ip, #1620]!	; 0x654

00011a68 <__fpending@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #192512	; 0x2f000
   11a70:	ldr	pc, [ip, #1612]!	; 0x64c

00011a74 <mbrtowc@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #192512	; 0x2f000
   11a7c:	ldr	pc, [ip, #1604]!	; 0x644

00011a80 <wcstombs@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #192512	; 0x2f000
   11a88:	ldr	pc, [ip, #1596]!	; 0x63c

00011a8c <error@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #192512	; 0x2f000
   11a94:	ldr	pc, [ip, #1588]!	; 0x634

00011a98 <gethostname@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #192512	; 0x2f000
   11aa0:	ldr	pc, [ip, #1580]!	; 0x62c

00011aa4 <opendir@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #192512	; 0x2f000
   11aac:	ldr	pc, [ip, #1572]!	; 0x624

00011ab0 <fnmatch@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #192512	; 0x2f000
   11ab8:	ldr	pc, [ip, #1564]!	; 0x61c

00011abc <strcoll@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #192512	; 0x2f000
   11ac4:	ldr	pc, [ip, #1556]!	; 0x614

00011ac8 <getenv@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #192512	; 0x2f000
   11ad0:	ldr	pc, [ip, #1548]!	; 0x60c

00011ad4 <lgetfilecon@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #192512	; 0x2f000
   11adc:	ldr	pc, [ip, #1540]!	; 0x604

00011ae0 <malloc@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #192512	; 0x2f000
   11ae8:	ldr	pc, [ip, #1532]!	; 0x5fc

00011aec <sigaddset@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #192512	; 0x2f000
   11af4:	ldr	pc, [ip, #1524]!	; 0x5f4

00011af8 <__libc_start_main@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #192512	; 0x2f000
   11b00:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b04 <strftime@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #192512	; 0x2f000
   11b0c:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b10 <__freading@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #192512	; 0x2f000
   11b18:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b1c <__ctype_tolower_loc@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #192512	; 0x2f000
   11b24:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b28 <__ctype_toupper_loc@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #192512	; 0x2f000
   11b30:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b34 <__gmon_start__@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #192512	; 0x2f000
   11b3c:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b40 <mempcpy@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #192512	; 0x2f000
   11b48:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b4c <getopt_long@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #192512	; 0x2f000
   11b54:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b58 <__ctype_b_loc@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #192512	; 0x2f000
   11b60:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b64 <getcwd@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #192512	; 0x2f000
   11b6c:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b70 <exit@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #192512	; 0x2f000
   11b78:	ldr	pc, [ip, #1436]!	; 0x59c

00011b7c <getfilecon@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #192512	; 0x2f000
   11b84:	ldr	pc, [ip, #1428]!	; 0x594

00011b88 <tcgetpgrp@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #192512	; 0x2f000
   11b90:	ldr	pc, [ip, #1420]!	; 0x58c

00011b94 <strlen@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #192512	; 0x2f000
   11b9c:	ldr	pc, [ip, #1412]!	; 0x584

00011ba0 <strchr@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #192512	; 0x2f000
   11ba8:	ldr	pc, [ip, #1404]!	; 0x57c

00011bac <setenv@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #192512	; 0x2f000
   11bb4:	ldr	pc, [ip, #1396]!	; 0x574

00011bb8 <__errno_location@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #192512	; 0x2f000
   11bc0:	ldr	pc, [ip, #1388]!	; 0x56c

00011bc4 <__sprintf_chk@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #192512	; 0x2f000
   11bcc:	ldr	pc, [ip, #1380]!	; 0x564

00011bd0 <snprintf@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #192512	; 0x2f000
   11bd8:	ldr	pc, [ip, #1372]!	; 0x55c

00011bdc <__cxa_atexit@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #192512	; 0x2f000
   11be4:	ldr	pc, [ip, #1364]!	; 0x554

00011be8 <memset@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #192512	; 0x2f000
   11bf0:	ldr	pc, [ip, #1356]!	; 0x54c

00011bf4 <__printf_chk@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #192512	; 0x2f000
   11bfc:	ldr	pc, [ip, #1348]!	; 0x544

00011c00 <stpncpy@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #192512	; 0x2f000
   11c08:	ldr	pc, [ip, #1340]!	; 0x53c

00011c0c <fileno@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #192512	; 0x2f000
   11c14:	ldr	pc, [ip, #1332]!	; 0x534

00011c18 <__fprintf_chk@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #192512	; 0x2f000
   11c20:	ldr	pc, [ip, #1324]!	; 0x52c

00011c24 <fclose@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #192512	; 0x2f000
   11c2c:	ldr	pc, [ip, #1316]!	; 0x524

00011c30 <fseeko64@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #192512	; 0x2f000
   11c38:	ldr	pc, [ip, #1308]!	; 0x51c

00011c3c <statx@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #192512	; 0x2f000
   11c44:	ldr	pc, [ip, #1300]!	; 0x514

00011c48 <__overflow@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #192512	; 0x2f000
   11c50:	ldr	pc, [ip, #1292]!	; 0x50c

00011c54 <setlocale@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #192512	; 0x2f000
   11c5c:	ldr	pc, [ip, #1284]!	; 0x504

00011c60 <sigemptyset@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #192512	; 0x2f000
   11c68:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c6c <wcswidth@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #192512	; 0x2f000
   11c74:	ldr	pc, [ip, #1268]!	; 0x4f4

00011c78 <strrchr@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #192512	; 0x2f000
   11c80:	ldr	pc, [ip, #1260]!	; 0x4ec

00011c84 <cap_get_file@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #192512	; 0x2f000
   11c8c:	ldr	pc, [ip, #1252]!	; 0x4e4

00011c90 <nl_langinfo@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #192512	; 0x2f000
   11c98:	ldr	pc, [ip, #1244]!	; 0x4dc

00011c9c <localeconv@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #192512	; 0x2f000
   11ca4:	ldr	pc, [ip, #1236]!	; 0x4d4

00011ca8 <mbstowcs@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #192512	; 0x2f000
   11cb0:	ldr	pc, [ip, #1228]!	; 0x4cc

00011cb4 <readdir64@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #192512	; 0x2f000
   11cbc:	ldr	pc, [ip, #1220]!	; 0x4c4

00011cc0 <timegm@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #192512	; 0x2f000
   11cc8:	ldr	pc, [ip, #1212]!	; 0x4bc

00011ccc <cap_free@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #192512	; 0x2f000
   11cd4:	ldr	pc, [ip, #1204]!	; 0x4b4

00011cd8 <dirfd@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #192512	; 0x2f000
   11ce0:	ldr	pc, [ip, #1196]!	; 0x4ac

00011ce4 <freecon@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #192512	; 0x2f000
   11cec:	ldr	pc, [ip, #1188]!	; 0x4a4

00011cf0 <bindtextdomain@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #192512	; 0x2f000
   11cf8:	ldr	pc, [ip, #1180]!	; 0x49c

00011cfc <__xstat64@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #192512	; 0x2f000
   11d04:	ldr	pc, [ip, #1172]!	; 0x494

00011d08 <isatty@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #192512	; 0x2f000
   11d10:	ldr	pc, [ip, #1164]!	; 0x48c

00011d14 <unsetenv@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #192512	; 0x2f000
   11d1c:	ldr	pc, [ip, #1156]!	; 0x484

00011d20 <strncmp@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #192512	; 0x2f000
   11d28:	ldr	pc, [ip, #1148]!	; 0x47c

00011d2c <abort@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #192512	; 0x2f000
   11d34:	ldr	pc, [ip, #1140]!	; 0x474

00011d38 <closedir@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #192512	; 0x2f000
   11d40:	ldr	pc, [ip, #1132]!	; 0x46c

00011d44 <getgrgid@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #192512	; 0x2f000
   11d4c:	ldr	pc, [ip, #1124]!	; 0x464

00011d50 <getgrnam@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #192512	; 0x2f000
   11d58:	ldr	pc, [ip, #1116]!	; 0x45c

00011d5c <__snprintf_chk@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #192512	; 0x2f000
   11d64:	ldr	pc, [ip, #1108]!	; 0x454

00011d68 <strspn@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #192512	; 0x2f000
   11d70:	ldr	pc, [ip, #1100]!	; 0x44c

00011d74 <__assert_fail@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #192512	; 0x2f000
   11d7c:	ldr	pc, [ip, #1092]!	; 0x444

Disassembly of section .text:

00011d80 <_obstack_begin@@Base-0x12f2c>:
   11d80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11d84:	movw	r4, #4912	; 0x1330
   11d88:	movt	r4, #4
   11d8c:	add	r3, r4, #3264	; 0xcc0
   11d90:	strd	r6, [sp, #8]
   11d94:	mov	r6, r0
   11d98:	sub	r3, r3, #4
   11d9c:	strd	r8, [sp, #16]
   11da0:	movw	r5, #13096	; 0x3328
   11da4:	movt	r5, #4
   11da8:	strd	sl, [sp, #24]
   11dac:	mov	fp, r1
   11db0:	str	lr, [sp, #32]
   11db4:	sub	sp, sp, #84	; 0x54
   11db8:	ldr	r0, [r1]
   11dbc:	add	sl, sp, #64	; 0x40
   11dc0:	str	r3, [sp, #52]	; 0x34
   11dc4:	bl	250ec <_obstack_memory_used@@Base+0x34>
   11dc8:	movw	r1, #316	; 0x13c
   11dcc:	movt	r1, #3
   11dd0:	ldr	r7, [pc, #4060]	; 12db4 <__assert_fail@plt+0x1040>
   11dd4:	mov	r0, #6
   11dd8:	bl	11c54 <setlocale@plt>
   11ddc:	movw	r1, #63472	; 0xf7f0
   11de0:	movt	r1, #2
   11de4:	movw	r0, #63280	; 0xf730
   11de8:	movt	r0, #2
   11dec:	bl	11cf0 <bindtextdomain@plt>
   11df0:	movw	r0, #63280	; 0xf730
   11df4:	movt	r0, #2
   11df8:	bl	119c0 <textdomain@plt>
   11dfc:	mov	r2, #2
   11e00:	movw	r3, #4804	; 0x12c4
   11e04:	movt	r3, #4
   11e08:	movw	r0, #57512	; 0xe0a8
   11e0c:	movt	r0, #1
   11e10:	str	r2, [r3]
   11e14:	bl	2bfec <_obstack_memory_used@@Base+0x6f34>
   11e18:	mov	r3, #0
   11e1c:	mvn	r2, #0
   11e20:	mov	r1, #-2147483648	; 0x80000000
   11e24:	mov	r0, #1
   11e28:	mov	r9, r3
   11e2c:	str	r3, [r5, #-4080]	; 0xfffff010
   11e30:	strb	r0, [r5, #-3995]	; 0xfffff065
   11e34:	str	r2, [sp, #24]
   11e38:	str	r2, [sp, #28]
   11e3c:	str	r2, [sp, #32]
   11e40:	str	r2, [sp, #36]	; 0x24
   11e44:	str	r2, [sp, #40]	; 0x28
   11e48:	str	r2, [sp, #44]	; 0x2c
   11e4c:	str	r3, [sp, #48]	; 0x30
   11e50:	str	r3, [r4, #3752]	; 0xea8
   11e54:	str	r1, [r4, #4036]	; 0xfc4
   11e58:	str	r2, [r4, #4040]	; 0xfc8
   11e5c:	mvn	ip, #0
   11e60:	movw	r2, #63496	; 0xf808
   11e64:	movt	r2, #2
   11e68:	mov	r3, r7
   11e6c:	str	sl, [sp]
   11e70:	mov	r1, fp
   11e74:	mov	r0, r6
   11e78:	str	ip, [sp, #64]	; 0x40
   11e7c:	bl	11b4c <getopt_long@plt>
   11e80:	cmn	r0, #1
   11e84:	beq	122ec <__assert_fail@plt+0x578>
   11e88:	add	r0, r0, #3
   11e8c:	cmp	r0, #276	; 0x114
   11e90:	ldrls	pc, [pc, r0, lsl #2]
   11e94:	b	13b38 <__assert_fail@plt+0x1dc4>
   11e98:	andeq	r2, r1, r0, lsr #19
   11e9c:	muleq	r1, r4, sl
   11ea0:	andeq	r3, r1, r8, lsr fp
   11ea4:	andeq	r3, r1, r8, lsr fp
   11ea8:	andeq	r3, r1, r8, lsr fp
   11eac:	andeq	r3, r1, r8, lsr fp
   11eb0:	andeq	r3, r1, r8, lsr fp
   11eb4:	andeq	r3, r1, r8, lsr fp
   11eb8:	andeq	r3, r1, r8, lsr fp
   11ebc:	andeq	r3, r1, r8, lsr fp
   11ec0:	andeq	r3, r1, r8, lsr fp
   11ec4:	andeq	r3, r1, r8, lsr fp
   11ec8:	andeq	r3, r1, r8, lsr fp
   11ecc:	andeq	r3, r1, r8, lsr fp
   11ed0:	andeq	r3, r1, r8, lsr fp
   11ed4:	andeq	r3, r1, r8, lsr fp
   11ed8:	andeq	r3, r1, r8, lsr fp
   11edc:	andeq	r3, r1, r8, lsr fp
   11ee0:	andeq	r3, r1, r8, lsr fp
   11ee4:	andeq	r3, r1, r8, lsr fp
   11ee8:	andeq	r3, r1, r8, lsr fp
   11eec:	andeq	r3, r1, r8, lsr fp
   11ef0:	andeq	r3, r1, r8, lsr fp
   11ef4:	andeq	r3, r1, r8, lsr fp
   11ef8:	andeq	r3, r1, r8, lsr fp
   11efc:	andeq	r3, r1, r8, lsr fp
   11f00:	andeq	r3, r1, r8, lsr fp
   11f04:	andeq	r3, r1, r8, lsr fp
   11f08:	andeq	r3, r1, r8, lsr fp
   11f0c:	andeq	r3, r1, r8, lsr fp
   11f10:	andeq	r3, r1, r8, lsr fp
   11f14:	andeq	r3, r1, r8, lsr fp
   11f18:	andeq	r3, r1, r8, lsr fp
   11f1c:	andeq	r3, r1, r8, lsr fp
   11f20:	andeq	r3, r1, r8, lsr fp
   11f24:	andeq	r3, r1, r8, lsr fp
   11f28:	andeq	r3, r1, r8, lsr fp
   11f2c:	andeq	r3, r1, r8, lsr fp
   11f30:	andeq	r3, r1, r8, lsr fp
   11f34:	andeq	r3, r1, r8, lsr fp
   11f38:	andeq	r3, r1, r8, lsr fp
   11f3c:	andeq	r3, r1, r8, lsr fp
   11f40:	andeq	r3, r1, r8, lsr fp
   11f44:	andeq	r3, r1, r8, lsr fp
   11f48:	andeq	r3, r1, r8, lsr fp
   11f4c:	andeq	r3, r1, r8, lsr fp
   11f50:	andeq	r3, r1, r8, lsr fp
   11f54:	andeq	r3, r1, r8, lsr fp
   11f58:	andeq	r3, r1, r8, lsr fp
   11f5c:	andeq	r3, r1, r8, lsr fp
   11f60:	andeq	r3, r1, r8, lsr fp
   11f64:	andeq	r3, r1, r8, lsr fp
   11f68:	andeq	r2, r1, ip, lsl #19
   11f6c:	andeq	r3, r1, r8, lsr fp
   11f70:	andeq	r3, r1, r8, lsr fp
   11f74:	andeq	r3, r1, r8, lsr fp
   11f78:	andeq	r3, r1, r8, lsr fp
   11f7c:	andeq	r3, r1, r8, lsr fp
   11f80:	andeq	r3, r1, r8, lsr fp
   11f84:	andeq	r3, r1, r8, lsr fp
   11f88:	andeq	r3, r1, r8, lsr fp
   11f8c:	andeq	r3, r1, r8, lsr fp
   11f90:	andeq	r3, r1, r8, lsr fp
   11f94:	andeq	r3, r1, r8, lsr fp
   11f98:	andeq	r3, r1, r8, lsr fp
   11f9c:	andeq	r3, r1, r8, lsr fp
   11fa0:	andeq	r3, r1, r8, lsr fp
   11fa4:	andeq	r3, r1, r8, lsr fp
   11fa8:	andeq	r2, r1, r0, ror #20
   11fac:	andeq	r2, r1, r8, lsl sl
   11fb0:	andeq	r2, r1, ip, ror #20
   11fb4:	andeq	r2, r1, r0, lsl #19
   11fb8:	andeq	r3, r1, r8, lsr fp
   11fbc:	andeq	r2, r1, r4, lsl #18
   11fc0:	strdeq	r2, [r1], -r0
   11fc4:	andeq	r2, r1, r4, ror #17
   11fc8:			; <UNDEFINED> instruction: 0x000128bc
   11fcc:	andeq	r3, r1, r8, lsr fp
   11fd0:	andeq	r3, r1, r8, lsr fp
   11fd4:			; <UNDEFINED> instruction: 0x000128b0
   11fd8:	andeq	r3, r1, r8, lsr fp
   11fdc:	andeq	r2, r1, r4, lsr #17
   11fe0:	andeq	r3, r1, r8, lsr fp
   11fe4:	andeq	r3, r1, r8, lsr fp
   11fe8:	muleq	r1, r8, r8
   11fec:	andeq	r2, r1, ip, lsl #17
   11ff0:	andeq	r2, r1, r0, lsl #17
   11ff4:	andeq	r2, r1, r0, lsr #16
   11ff8:	andeq	r2, r1, r4, lsl r8
   11ffc:	andeq	r3, r1, r8, lsr fp
   12000:	andeq	r3, r1, r8, lsr fp
   12004:	andeq	r2, r1, r8, lsl #16
   12008:	andeq	r3, r1, r8, lsr fp
   1200c:	strdeq	r2, [r1], -ip
   12010:	andeq	r3, r1, r8, lsr fp
   12014:	andeq	r3, r1, r8, lsr fp
   12018:	andeq	r3, r1, r8, lsr fp
   1201c:	andeq	r3, r1, r8, lsr fp
   12020:	andeq	r3, r1, r8, lsr fp
   12024:	andeq	r3, r1, r8, lsr fp
   12028:	strdeq	r2, [r1], -r0
   1202c:	andeq	r2, r1, r8, asr #14
   12030:	andeq	r2, r1, r4, ror #15
   12034:	andeq	r2, r1, ip, asr #15
   12038:	andeq	r3, r1, r8, lsr fp
   1203c:	muleq	r1, r8, r7
   12040:	andeq	r2, r1, r0, lsl #15
   12044:	andeq	r2, r1, r4, asr r7
   12048:	ldrdeq	r2, [r1], -r8
   1204c:	andeq	r3, r1, r8, lsr fp
   12050:	andeq	r2, r1, ip, lsr r7
   12054:	andeq	r2, r1, r0, lsr r7
   12058:	ldrdeq	r2, [r1], -r8
   1205c:	andeq	r2, r1, r4, asr #29
   12060:	andeq	r2, r1, ip, lsr #29
   12064:	andeq	r2, r1, r0, lsr #29
   12068:	muleq	r1, r4, lr
   1206c:	andeq	r2, r1, r8, lsl #29
   12070:	andeq	r2, r1, ip, ror lr
   12074:	andeq	r2, r1, r0, ror lr
   12078:	andeq	r2, r1, r4, asr pc
   1207c:	andeq	r2, r1, r8, asr #30
   12080:	strdeq	r2, [r1], -r0
   12084:	andeq	r2, r1, r4, ror #29
   12088:	andeq	r3, r1, r8, lsr fp
   1208c:	andeq	r3, r1, r8, lsr fp
   12090:	andeq	r3, r1, r8, lsr fp
   12094:	andeq	r3, r1, r8, lsr fp
   12098:	andeq	r3, r1, r8, lsr fp
   1209c:	andeq	r3, r1, r8, lsr fp
   120a0:	andeq	r3, r1, r8, lsr fp
   120a4:	andeq	r3, r1, r8, lsr fp
   120a8:	andeq	r3, r1, r8, lsr fp
   120ac:	andeq	r3, r1, r8, lsr fp
   120b0:	andeq	r3, r1, r8, lsr fp
   120b4:	andeq	r3, r1, r8, lsr fp
   120b8:	andeq	r3, r1, r8, lsr fp
   120bc:	andeq	r3, r1, r8, lsr fp
   120c0:	andeq	r3, r1, r8, lsr fp
   120c4:	andeq	r3, r1, r8, lsr fp
   120c8:	andeq	r3, r1, r8, lsr fp
   120cc:	andeq	r3, r1, r8, lsr fp
   120d0:	andeq	r3, r1, r8, lsr fp
   120d4:	andeq	r3, r1, r8, lsr fp
   120d8:	andeq	r3, r1, r8, lsr fp
   120dc:	andeq	r3, r1, r8, lsr fp
   120e0:	andeq	r3, r1, r8, lsr fp
   120e4:	andeq	r3, r1, r8, lsr fp
   120e8:	andeq	r3, r1, r8, lsr fp
   120ec:	andeq	r3, r1, r8, lsr fp
   120f0:	andeq	r3, r1, r8, lsr fp
   120f4:	andeq	r3, r1, r8, lsr fp
   120f8:	andeq	r3, r1, r8, lsr fp
   120fc:	andeq	r3, r1, r8, lsr fp
   12100:	andeq	r3, r1, r8, lsr fp
   12104:	andeq	r3, r1, r8, lsr fp
   12108:	andeq	r3, r1, r8, lsr fp
   1210c:	andeq	r3, r1, r8, lsr fp
   12110:	andeq	r3, r1, r8, lsr fp
   12114:	andeq	r3, r1, r8, lsr fp
   12118:	andeq	r3, r1, r8, lsr fp
   1211c:	andeq	r3, r1, r8, lsr fp
   12120:	andeq	r3, r1, r8, lsr fp
   12124:	andeq	r3, r1, r8, lsr fp
   12128:	andeq	r3, r1, r8, lsr fp
   1212c:	andeq	r3, r1, r8, lsr fp
   12130:	andeq	r3, r1, r8, lsr fp
   12134:	andeq	r3, r1, r8, lsr fp
   12138:	andeq	r3, r1, r8, lsr fp
   1213c:	andeq	r3, r1, r8, lsr fp
   12140:	andeq	r3, r1, r8, lsr fp
   12144:	andeq	r3, r1, r8, lsr fp
   12148:	andeq	r3, r1, r8, lsr fp
   1214c:	andeq	r3, r1, r8, lsr fp
   12150:	andeq	r3, r1, r8, lsr fp
   12154:	andeq	r3, r1, r8, lsr fp
   12158:	andeq	r3, r1, r8, lsr fp
   1215c:	andeq	r3, r1, r8, lsr fp
   12160:	andeq	r3, r1, r8, lsr fp
   12164:	andeq	r3, r1, r8, lsr fp
   12168:	andeq	r3, r1, r8, lsr fp
   1216c:	andeq	r3, r1, r8, lsr fp
   12170:	andeq	r3, r1, r8, lsr fp
   12174:	andeq	r3, r1, r8, lsr fp
   12178:	andeq	r3, r1, r8, lsr fp
   1217c:	andeq	r3, r1, r8, lsr fp
   12180:	andeq	r3, r1, r8, lsr fp
   12184:	andeq	r3, r1, r8, lsr fp
   12188:	andeq	r3, r1, r8, lsr fp
   1218c:	andeq	r3, r1, r8, lsr fp
   12190:	andeq	r3, r1, r8, lsr fp
   12194:	andeq	r3, r1, r8, lsr fp
   12198:	andeq	r3, r1, r8, lsr fp
   1219c:	andeq	r3, r1, r8, lsr fp
   121a0:	andeq	r3, r1, r8, lsr fp
   121a4:	andeq	r3, r1, r8, lsr fp
   121a8:	andeq	r3, r1, r8, lsr fp
   121ac:	andeq	r3, r1, r8, lsr fp
   121b0:	andeq	r3, r1, r8, lsr fp
   121b4:	andeq	r3, r1, r8, lsr fp
   121b8:	andeq	r3, r1, r8, lsr fp
   121bc:	andeq	r3, r1, r8, lsr fp
   121c0:	andeq	r3, r1, r8, lsr fp
   121c4:	andeq	r3, r1, r8, lsr fp
   121c8:	andeq	r3, r1, r8, lsr fp
   121cc:	andeq	r3, r1, r8, lsr fp
   121d0:	andeq	r3, r1, r8, lsr fp
   121d4:	andeq	r3, r1, r8, lsr fp
   121d8:	andeq	r3, r1, r8, lsr fp
   121dc:	andeq	r3, r1, r8, lsr fp
   121e0:	andeq	r3, r1, r8, lsr fp
   121e4:	andeq	r3, r1, r8, lsr fp
   121e8:	andeq	r3, r1, r8, lsr fp
   121ec:	andeq	r3, r1, r8, lsr fp
   121f0:	andeq	r3, r1, r8, lsr fp
   121f4:	andeq	r3, r1, r8, lsr fp
   121f8:	andeq	r3, r1, r8, lsr fp
   121fc:	andeq	r3, r1, r8, lsr fp
   12200:	andeq	r3, r1, r8, lsr fp
   12204:	andeq	r3, r1, r8, lsr fp
   12208:	andeq	r3, r1, r8, lsr fp
   1220c:	andeq	r3, r1, r8, lsr fp
   12210:	andeq	r3, r1, r8, lsr fp
   12214:	andeq	r3, r1, r8, lsr fp
   12218:	andeq	r3, r1, r8, lsr fp
   1221c:	andeq	r3, r1, r8, lsr fp
   12220:	andeq	r3, r1, r8, lsr fp
   12224:	andeq	r3, r1, r8, lsr fp
   12228:	andeq	r3, r1, r8, lsr fp
   1222c:	andeq	r3, r1, r8, lsr fp
   12230:	andeq	r3, r1, r8, lsr fp
   12234:	andeq	r3, r1, r8, lsr fp
   12238:	andeq	r3, r1, r8, lsr fp
   1223c:	andeq	r3, r1, r8, lsr fp
   12240:	andeq	r3, r1, r8, lsr fp
   12244:	andeq	r3, r1, r8, lsr fp
   12248:	andeq	r3, r1, r8, lsr fp
   1224c:	andeq	r3, r1, r8, lsr fp
   12250:	andeq	r3, r1, r8, lsr fp
   12254:	andeq	r3, r1, r8, lsr fp
   12258:	andeq	r3, r1, r8, lsr fp
   1225c:	andeq	r3, r1, r8, lsr fp
   12260:	andeq	r3, r1, r8, lsr fp
   12264:	andeq	r3, r1, r8, lsr fp
   12268:	andeq	r3, r1, r8, lsr fp
   1226c:	andeq	r3, r1, r8, lsr fp
   12270:	andeq	r3, r1, r8, lsr fp
   12274:	andeq	r3, r1, r8, lsr fp
   12278:	andeq	r3, r1, r8, lsr fp
   1227c:	andeq	r3, r1, r8, lsr fp
   12280:	andeq	r3, r1, r8, lsr fp
   12284:	andeq	r3, r1, r8, lsr fp
   12288:	andeq	r3, r1, r8, lsr fp
   1228c:	andeq	r3, r1, r8, lsr fp
   12290:	andeq	r3, r1, r8, lsr fp
   12294:	andeq	r3, r1, r8, lsr fp
   12298:	andeq	r3, r1, r8, lsr fp
   1229c:	andeq	r3, r1, r8, lsr fp
   122a0:	andeq	r3, r1, r8, lsr fp
   122a4:	andeq	r2, r1, r0, ror #30
   122a8:	andeq	r2, r1, r0, lsr lr
   122ac:	andeq	r2, r1, r0, asr #27
   122b0:	andeq	r2, r1, ip, asr sp
   122b4:	andeq	r2, r1, r0, asr sp
   122b8:	strdeq	r2, [r1], -r8
   122bc:	andeq	r2, r1, r4, ror #25
   122c0:	ldrdeq	r2, [r1], -r8
   122c4:			; <UNDEFINED> instruction: 0x00012cb0
   122c8:	andeq	r2, r1, r0, asr #24
   122cc:	andeq	r2, r1, r8, ror #23
   122d0:	muleq	r1, r0, fp
   122d4:	andeq	r2, r1, r4, lsl #23
   122d8:	andeq	r2, r1, ip, ror #22
   122dc:	andeq	r2, r1, r4, lsl fp
   122e0:			; <UNDEFINED> instruction: 0x00012abc
   122e4:	andeq	r2, r1, ip, lsr #21
   122e8:	andeq	r2, r1, r8, ror sl
   122ec:	ldr	r7, [pc, #2700]	; 12d80 <__assert_fail@plt+0x100c>
   122f0:	ldrd	r2, [r7]
   122f4:	orrs	r3, r2, r3
   122f8:	beq	13214 <__assert_fail@plt+0x14a0>
   122fc:	movw	r8, #4560	; 0x11d0
   12300:	movt	r8, #4
   12304:	ldr	r3, [sp, #24]
   12308:	cmp	r3, #0
   1230c:	blt	13078 <__assert_fail@plt+0x1304>
   12310:	ldr	r2, [sp, #24]
   12314:	sub	r3, r2, #2
   12318:	str	r2, [r4, #3080]	; 0xc08
   1231c:	cmp	r3, #2
   12320:	bhi	1309c <__assert_fail@plt+0x1328>
   12324:	ldr	r3, [sp, #40]	; 0x28
   12328:	cmn	r3, #1
   1232c:	beq	13810 <__assert_fail@plt+0x1a9c>
   12330:	ldr	r0, [sp, #40]	; 0x28
   12334:	mov	r3, #3
   12338:	str	r0, [r4, #3308]	; 0xcec
   1233c:	ldr	r2, [r4, #3080]	; 0xc08
   12340:	udiv	r3, r0, r3
   12344:	sub	r2, r2, #2
   12348:	add	r1, r3, r3, lsl #1
   1234c:	cmp	r0, r1
   12350:	addne	r3, r3, #1
   12354:	cmp	r2, #2
   12358:	str	r3, [r4, #3288]	; 0xcd8
   1235c:	bhi	12370 <__assert_fail@plt+0x5fc>
   12360:	ldr	r3, [sp, #44]	; 0x2c
   12364:	cmp	r3, #0
   12368:	strge	r3, [r4, #3096]	; 0xc18
   1236c:	blt	133ac <__assert_fail@plt+0x1638>
   12370:	ldr	r3, [sp, #36]	; 0x24
   12374:	cmn	r3, #1
   12378:	ldrne	r3, [sp, #36]	; 0x24
   1237c:	andne	r3, r3, #1
   12380:	beq	1318c <__assert_fail@plt+0x1418>
   12384:	ldr	r2, [sp, #32]
   12388:	strb	r3, [r4, #3252]	; 0xcb4
   1238c:	cmp	r2, #0
   12390:	blt	13750 <__assert_fail@plt+0x19dc>
   12394:	mov	r0, #0
   12398:	ldr	r1, [sp, #32]
   1239c:	bl	26f44 <_obstack_memory_used@@Base+0x1e8c>
   123a0:	mov	r0, #0
   123a4:	bl	26f2c <_obstack_memory_used@@Base+0x1e74>
   123a8:	ldr	r3, [r4, #3080]	; 0xc08
   123ac:	mov	r7, r0
   123b0:	cmp	r3, #0
   123b4:	beq	130e8 <__assert_fail@plt+0x1374>
   123b8:	sub	r3, r3, #2
   123bc:	cmp	r3, #1
   123c0:	movhi	r3, #0
   123c4:	bls	130dc <__assert_fail@plt+0x1368>
   123c8:	mov	r0, #0
   123cc:	strb	r3, [r4, #3253]	; 0xcb5
   123d0:	bl	26ee4 <_obstack_memory_used@@Base+0x1e2c>
   123d4:	cmp	r7, #7
   123d8:	str	r0, [r4, #3284]	; 0xcd4
   123dc:	beq	13800 <__assert_fail@plt+0x1a8c>
   123e0:	ldr	r7, [r4, #3104]	; 0xc20
   123e4:	cmp	r7, #1
   123e8:	bls	12420 <__assert_fail@plt+0x6ac>
   123ec:	sub	r7, r7, #2
   123f0:	movw	r3, #63980	; 0xf9ec
   123f4:	movt	r3, #2
   123f8:	ldrb	r1, [r3, r7]
   123fc:	add	r7, r7, r3
   12400:	cmp	r1, #0
   12404:	beq	12420 <__assert_fail@plt+0x6ac>
   12408:	mov	r2, #1
   1240c:	ldr	r0, [r4, #3284]	; 0xcd4
   12410:	bl	26f5c <_obstack_memory_used@@Base+0x1ea4>
   12414:	ldrb	r1, [r7, #1]!
   12418:	cmp	r1, #0
   1241c:	bne	12408 <__assert_fail@plt+0x694>
   12420:	mov	r0, #0
   12424:	bl	26ee4 <_obstack_memory_used@@Base+0x1e2c>
   12428:	mov	r2, #1
   1242c:	mov	r1, #58	; 0x3a
   12430:	str	r0, [r5, #-3992]	; 0xfffff068
   12434:	bl	26f5c <_obstack_memory_used@@Base+0x1ea4>
   12438:	ldrb	r3, [r4, #4092]	; 0xffc
   1243c:	ldr	r2, [r4, #3080]	; 0xc08
   12440:	ldrb	r0, [r4, #4016]	; 0xfb0
   12444:	eor	r3, r3, #1
   12448:	ldrb	r1, [r8, #210]	; 0xd2
   1244c:	cmp	r2, #0
   12450:	movne	r3, #0
   12454:	andeq	r3, r3, #1
   12458:	and	r3, r3, r0
   1245c:	cmp	r1, r3
   12460:	strb	r3, [r4, #4016]	; 0xfb0
   12464:	bcc	13ccc <__assert_fail@plt+0x1f58>
   12468:	ldr	r3, [sp, #28]
   1246c:	cmp	r3, #0
   12470:	ldrge	r3, [sp, #28]
   12474:	blt	13100 <__assert_fail@plt+0x138c>
   12478:	cmp	r2, #0
   1247c:	str	r3, [r4, #3092]	; 0xc14
   12480:	beq	1310c <__assert_fail@plt+0x1398>
   12484:	movw	r3, #4888	; 0x1318
   12488:	movt	r3, #4
   1248c:	ldr	r7, [r3]
   12490:	ldrb	r3, [r4, #4017]	; 0xfb1
   12494:	cmp	r3, #0
   12498:	bne	12f6c <__assert_fail@plt+0x11f8>
   1249c:	ldrb	r3, [r4, #3745]	; 0xea1
   124a0:	cmp	r3, #0
   124a4:	bne	1306c <__assert_fail@plt+0x12f8>
   124a8:	ldr	r3, [r5, #-4088]	; 0xfffff008
   124ac:	cmp	r3, #0
   124b0:	bne	124c8 <__assert_fail@plt+0x754>
   124b4:	ldrb	r3, [r5, #-4056]	; 0xfffff028
   124b8:	cmp	r3, #0
   124bc:	beq	13274 <__assert_fail@plt+0x1500>
   124c0:	mov	r3, #1
   124c4:	str	r3, [r5, #-4088]	; 0xfffff008
   124c8:	ldrb	r3, [r5, #-3996]	; 0xfffff064
   124cc:	cmp	r3, #0
   124d0:	beq	1252c <__assert_fail@plt+0x7b8>
   124d4:	movw	r1, #15972	; 0x3e64
   124d8:	movt	r1, #1
   124dc:	movw	r3, #15884	; 0x3e0c
   124e0:	movt	r3, #1
   124e4:	movw	r2, #15844	; 0x3de4
   124e8:	movt	r2, #1
   124ec:	str	r1, [sp]
   124f0:	mov	r0, #30
   124f4:	mov	r1, #0
   124f8:	bl	1f8d4 <__assert_fail@plt+0xdb60>
   124fc:	cmp	r0, #0
   12500:	str	r0, [r4, #3748]	; 0xea4
   12504:	beq	13cf0 <__assert_fail@plt+0x1f7c>
   12508:	movw	r1, #61080	; 0xee98
   1250c:	movt	r1, #1
   12510:	ldr	r0, [pc, #2128]	; 12d68 <__assert_fail@plt+0xff4>
   12514:	mov	r2, #0
   12518:	movw	r3, #46472	; 0xb588
   1251c:	movt	r3, #2
   12520:	str	r1, [sp]
   12524:	mov	r1, r2
   12528:	bl	24cac <_obstack_begin@@Base>
   1252c:	movw	r0, #64312	; 0xfb38
   12530:	movt	r0, #2
   12534:	bl	11ac8 <getenv@plt>
   12538:	bl	292f0 <_obstack_memory_used@@Base+0x4238>
   1253c:	ldr	r3, [r4, #3092]	; 0xc14
   12540:	str	r0, [r4, #4032]	; 0xfc0
   12544:	sub	r3, r3, #3
   12548:	bics	r3, r3, #2
   1254c:	beq	1255c <__assert_fail@plt+0x7e8>
   12550:	ldr	r3, [r4, #3080]	; 0xc08
   12554:	cmp	r3, #0
   12558:	bne	13294 <__assert_fail@plt+0x1520>
   1255c:	mov	r2, #1
   12560:	mov	r3, #0
   12564:	strb	r2, [r4, #4093]	; 0xffd
   12568:	ldrb	r2, [r4, #4016]	; 0xfb0
   1256c:	and	r3, r3, #1
   12570:	strb	r3, [r4, #4094]	; 0xffe
   12574:	cmp	r2, #0
   12578:	bne	136b4 <__assert_fail@plt+0x1940>
   1257c:	ldrb	r3, [r4, #4092]	; 0xffc
   12580:	cmp	r3, #0
   12584:	bne	13628 <__assert_fail@plt+0x18b4>
   12588:	mov	r3, #100	; 0x64
   1258c:	mov	r1, #152	; 0x98
   12590:	mov	r0, r3
   12594:	str	r3, [r4, #4088]	; 0xff8
   12598:	sub	r3, r6, r7
   1259c:	mov	r9, r3
   125a0:	str	r3, [sp, #24]
   125a4:	bl	29ef4 <_obstack_memory_used@@Base+0x4e3c>
   125a8:	mov	r3, #0
   125ac:	str	r3, [r4, #3296]	; 0xce0
   125b0:	str	r0, [r4, #3348]	; 0xd14
   125b4:	bl	15994 <__assert_fail@plt+0x3c20>
   125b8:	cmp	r9, #0
   125bc:	ble	131ac <__assert_fail@plt+0x1438>
   125c0:	add	r9, fp, r7, lsl #2
   125c4:	movw	fp, #316	; 0x13c
   125c8:	movt	fp, #3
   125cc:	add	r7, r7, #1
   125d0:	mov	r3, fp
   125d4:	ldr	r0, [r9], #4
   125d8:	mov	r2, #1
   125dc:	mov	r1, #0
   125e0:	bl	1b08c <__assert_fail@plt+0x9318>
   125e4:	cmp	r6, r7
   125e8:	bgt	125cc <__assert_fail@plt+0x858>
   125ec:	ldr	r3, [r4, #3296]	; 0xce0
   125f0:	cmp	r3, #0
   125f4:	bne	135ac <__assert_fail@plt+0x1838>
   125f8:	ldr	r3, [sp, #24]
   125fc:	cmp	r3, #1
   12600:	ble	131f8 <__assert_fail@plt+0x1484>
   12604:	mov	r7, #1
   12608:	b	12634 <__assert_fail@plt+0x8c0>
   1260c:	ldrb	r2, [r6, #8]
   12610:	ldr	r1, [r6, #4]
   12614:	bl	1c1e0 <__assert_fail@plt+0xa46c>
   12618:	ldr	r0, [r6]
   1261c:	bl	1ee98 <__assert_fail@plt+0xd124>
   12620:	ldr	r0, [r6, #4]
   12624:	bl	1ee98 <__assert_fail@plt+0xd124>
   12628:	mov	r0, r6
   1262c:	bl	1ee98 <__assert_fail@plt+0xd124>
   12630:	strb	r7, [r5, #-3995]	; 0xfffff065
   12634:	ldr	r6, [r4, #3752]	; 0xea8
   12638:	cmp	r6, #0
   1263c:	beq	126c8 <__assert_fail@plt+0x954>
   12640:	ldr	r1, [r4, #3748]	; 0xea4
   12644:	ldr	r0, [r6]
   12648:	ldr	r3, [r6, #12]
   1264c:	cmp	r1, #0
   12650:	str	r3, [r4, #3752]	; 0xea8
   12654:	beq	1260c <__assert_fail@plt+0x898>
   12658:	cmp	r0, #0
   1265c:	bne	1260c <__assert_fail@plt+0x898>
   12660:	ldr	r3, [r5, #-4032]	; 0xfffff040
   12664:	ldr	r0, [r5, #-4028]	; 0xfffff044
   12668:	sub	r3, r0, r3
   1266c:	cmp	r3, #15
   12670:	bls	13c94 <__assert_fail@plt+0x1f20>
   12674:	ldrd	r2, [r0, #-16]
   12678:	sub	ip, r0, #16
   1267c:	mov	r0, r1
   12680:	mov	r1, sl
   12684:	str	ip, [r5, #-4028]	; 0xfffff044
   12688:	strd	r2, [sl]
   1268c:	ldrd	r2, [ip, #8]
   12690:	strd	r2, [sl, #8]
   12694:	bl	20360 <__assert_fail@plt+0xe5ec>
   12698:	cmp	r0, #0
   1269c:	beq	13cb0 <__assert_fail@plt+0x1f3c>
   126a0:	bl	1ee98 <__assert_fail@plt+0xd124>
   126a4:	ldr	r0, [r6]
   126a8:	bl	1ee98 <__assert_fail@plt+0xd124>
   126ac:	ldr	r0, [r6, #4]
   126b0:	bl	1ee98 <__assert_fail@plt+0xd124>
   126b4:	mov	r0, r6
   126b8:	bl	1ee98 <__assert_fail@plt+0xd124>
   126bc:	ldr	r6, [r4, #3752]	; 0xea8
   126c0:	cmp	r6, #0
   126c4:	bne	12640 <__assert_fail@plt+0x8cc>
   126c8:	ldrb	r3, [r4, #4017]	; 0xfb1
   126cc:	cmp	r3, #0
   126d0:	beq	126e0 <__assert_fail@plt+0x96c>
   126d4:	ldrb	r3, [r4, #3120]	; 0xc30
   126d8:	cmp	r3, #0
   126dc:	bne	132e0 <__assert_fail@plt+0x156c>
   126e0:	ldrb	r3, [r4, #4016]	; 0xfb0
   126e4:	cmp	r3, #0
   126e8:	bne	13444 <__assert_fail@plt+0x16d0>
   126ec:	ldr	r4, [r4, #3748]	; 0xea4
   126f0:	cmp	r4, #0
   126f4:	beq	12710 <__assert_fail@plt+0x99c>
   126f8:	mov	r0, r4
   126fc:	bl	1f2e0 <__assert_fail@plt+0xd56c>
   12700:	cmp	r0, #0
   12704:	bne	13c2c <__assert_fail@plt+0x1eb8>
   12708:	mov	r0, r4
   1270c:	bl	1fc14 <__assert_fail@plt+0xdea0>
   12710:	ldr	r0, [r5, #-4080]	; 0xfffff010
   12714:	add	sp, sp, #84	; 0x54
   12718:	ldrd	r4, [sp]
   1271c:	ldrd	r6, [sp, #8]
   12720:	ldrd	r8, [sp, #16]
   12724:	ldrd	sl, [sp, #24]
   12728:	add	sp, sp, #32
   1272c:	pop	{pc}		; (ldr pc, [sp], #4)
   12730:	mov	r3, #0
   12734:	str	r3, [sp, #24]
   12738:	b	11e5c <__assert_fail@plt+0xe8>
   1273c:	mov	r3, #1
   12740:	str	r3, [sp, #48]	; 0x30
   12744:	b	11e5c <__assert_fail@plt+0xe8>
   12748:	mov	r3, #7
   1274c:	str	r3, [sp, #32]
   12750:	b	11e5c <__assert_fail@plt+0xe8>
   12754:	movw	r1, #4560	; 0x11d0
   12758:	movt	r1, #4
   1275c:	mov	r2, #1
   12760:	mov	r3, #0
   12764:	mov	r0, #176	; 0xb0
   12768:	ldr	ip, [pc, #1552]	; 12d80 <__assert_fail@plt+0x100c>
   1276c:	strd	r2, [r1, #216]	; 0xd8
   12770:	str	r0, [r4, #3260]	; 0xcbc
   12774:	str	r0, [r4, #4028]	; 0xfbc
   12778:	strd	r2, [ip]
   1277c:	b	11e5c <__assert_fail@plt+0xe8>
   12780:	mov	r3, #0
   12784:	movw	r1, #4560	; 0x11d0
   12788:	movt	r1, #4
   1278c:	str	r3, [sp, #24]
   12790:	strb	r3, [r1, #204]	; 0xcc
   12794:	b	11e5c <__assert_fail@plt+0xe8>
   12798:	ldr	r1, [sp, #24]
   1279c:	mov	r2, #0
   127a0:	mov	r3, #2
   127a4:	str	r3, [r5, #-3944]	; 0xfffff098
   127a8:	strb	r2, [r4, #3078]	; 0xc06
   127ac:	strb	r2, [r4, #4017]	; 0xfb1
   127b0:	cmp	r1, #0
   127b4:	strb	r2, [r4, #4092]	; 0xffc
   127b8:	mvneq	r1, #0
   127bc:	str	r1, [sp, #24]
   127c0:	mov	r1, #6
   127c4:	str	r1, [sp, #28]
   127c8:	b	11e5c <__assert_fail@plt+0xe8>
   127cc:	mov	r3, #1
   127d0:	strb	r3, [r5, #-4056]	; 0xfffff028
   127d4:	b	11e5c <__assert_fail@plt+0xe8>
   127d8:	mov	r3, #1
   127dc:	strb	r3, [r4, #3077]	; 0xc05
   127e0:	b	11e5c <__assert_fail@plt+0xe8>
   127e4:	mov	r3, #1
   127e8:	str	r3, [r4, #3084]	; 0xc0c
   127ec:	b	11e5c <__assert_fail@plt+0xe8>
   127f0:	mov	r3, #2
   127f4:	str	r3, [r5, #-3944]	; 0xfffff098
   127f8:	b	11e5c <__assert_fail@plt+0xe8>
   127fc:	mov	r3, #1
   12800:	strb	r3, [r4, #3276]	; 0xccc
   12804:	b	11e5c <__assert_fail@plt+0xe8>
   12808:	mov	r3, #1
   1280c:	str	r3, [sp, #28]
   12810:	b	11e5c <__assert_fail@plt+0xe8>
   12814:	mov	r3, #6
   12818:	str	r3, [sp, #28]
   1281c:	b	11e5c <__assert_fail@plt+0xe8>
   12820:	movw	r3, #4904	; 0x1328
   12824:	movt	r3, #4
   12828:	ldr	r8, [r3]
   1282c:	mov	r2, #5
   12830:	movw	r1, #63588	; 0xf864
   12834:	movt	r1, #2
   12838:	mov	r0, #0
   1283c:	bl	11984 <dcgettext@plt>
   12840:	mov	ip, #2
   12844:	mvn	r2, #-2147483648	; 0x80000000
   12848:	str	r0, [sp, #12]
   1284c:	mov	r3, #0
   12850:	movw	r1, #316	; 0x13c
   12854:	movt	r1, #3
   12858:	mov	r0, r8
   1285c:	strd	r2, [sp]
   12860:	mov	r2, #0
   12864:	mov	r3, #0
   12868:	str	r1, [sp, #8]
   1286c:	mov	r1, #0
   12870:	str	ip, [sp, #16]
   12874:	bl	2a38c <_obstack_memory_used@@Base+0x52d4>
   12878:	str	r0, [sp, #44]	; 0x2c
   1287c:	b	11e5c <__assert_fail@plt+0xe8>
   12880:	mov	r3, #3
   12884:	str	r3, [sp, #28]
   12888:	b	11e5c <__assert_fail@plt+0xe8>
   1288c:	mov	r3, #1
   12890:	strb	r3, [r5, #-3996]	; 0xfffff064
   12894:	b	11e5c <__assert_fail@plt+0xe8>
   12898:	mov	r3, #5
   1289c:	str	r3, [sp, #32]
   128a0:	b	11e5c <__assert_fail@plt+0xe8>
   128a4:	mov	r3, #0
   128a8:	str	r3, [sp, #32]
   128ac:	b	11e5c <__assert_fail@plt+0xe8>
   128b0:	mov	r3, #4
   128b4:	str	r3, [r5, #-4088]	; 0xfffff008
   128b8:	b	11e5c <__assert_fail@plt+0xe8>
   128bc:	movw	r3, #4904	; 0x1328
   128c0:	movt	r3, #4
   128c4:	mov	r0, #8
   128c8:	ldr	r8, [r3]
   128cc:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   128d0:	ldr	r3, [r5, #-3940]	; 0xfffff09c
   128d4:	str	r0, [r5, #-3940]	; 0xfffff09c
   128d8:	str	r8, [r0]
   128dc:	str	r3, [r0, #4]
   128e0:	b	11e5c <__assert_fail@plt+0xe8>
   128e4:	mov	r3, #2
   128e8:	str	r3, [r5, #-4088]	; 0xfffff008
   128ec:	b	11e5c <__assert_fail@plt+0xe8>
   128f0:	movw	r1, #4560	; 0x11d0
   128f4:	movt	r1, #4
   128f8:	mov	r3, #0
   128fc:	strb	r3, [r1, #205]	; 0xcd
   12900:	b	11e5c <__assert_fail@plt+0xe8>
   12904:	movw	r3, #4904	; 0x1328
   12908:	movt	r3, #4
   1290c:	ldr	r1, [r3]
   12910:	cmp	r1, #0
   12914:	beq	12974 <__assert_fail@plt+0xc00>
   12918:	movw	r2, #4800	; 0x12c0
   1291c:	movt	r2, #4
   12920:	ldr	r3, [pc, #1108]	; 12d7c <__assert_fail@plt+0x1008>
   12924:	mov	r0, #1
   12928:	movw	r8, #49168	; 0xc010
   1292c:	movt	r8, #2
   12930:	ldr	ip, [r2]
   12934:	mov	r2, #4
   12938:	stm	sp, {r2, ip}
   1293c:	add	r2, r3, #36	; 0x24
   12940:	str	r0, [sp, #8]
   12944:	movw	r0, #63576	; 0xf858
   12948:	movt	r0, #2
   1294c:	bl	1d608 <__assert_fail@plt+0xb894>
   12950:	add	r0, r8, r0, lsl #2
   12954:	ldr	r3, [r0, #1268]	; 0x4f4
   12958:	cmp	r3, #1
   1295c:	beq	12974 <__assert_fail@plt+0xc00>
   12960:	cmp	r3, #2
   12964:	bne	11e5c <__assert_fail@plt+0xe8>
   12968:	bl	13f3c <__assert_fail@plt+0x21c8>
   1296c:	cmp	r0, #0
   12970:	beq	11e5c <__assert_fail@plt+0xe8>
   12974:	mov	r3, #3
   12978:	str	r3, [r4, #3104]	; 0xc20
   1297c:	b	11e5c <__assert_fail@plt+0xe8>
   12980:	mov	r3, #1
   12984:	strb	r3, [r4, #4016]	; 0xfb0
   12988:	b	11e5c <__assert_fail@plt+0xe8>
   1298c:	ldr	r3, [sp, #24]
   12990:	adds	r3, r3, #0
   12994:	movne	r3, #1
   12998:	str	r3, [sp, #24]
   1299c:	b	11e5c <__assert_fail@plt+0xe8>
   129a0:	movw	r3, #4792	; 0x12b8
   129a4:	movt	r3, #4
   129a8:	ldr	r1, [r3]
   129ac:	movw	r3, #4900	; 0x1324
   129b0:	movt	r3, #4
   129b4:	ldr	r0, [r3]
   129b8:	cmp	r1, #1
   129bc:	beq	136f8 <__assert_fail@plt+0x1984>
   129c0:	cmp	r1, #2
   129c4:	movw	r3, #65168	; 0xfe90
   129c8:	movt	r3, #2
   129cc:	movw	r2, #55584	; 0xd920
   129d0:	movt	r2, #2
   129d4:	moveq	r1, r3
   129d8:	movne	r1, r2
   129dc:	mov	r4, #0
   129e0:	movw	r2, #63692	; 0xf8cc
   129e4:	movt	r2, #2
   129e8:	movw	ip, #63708	; 0xf8dc
   129ec:	movt	ip, #2
   129f0:	movw	r3, #4796	; 0x12bc
   129f4:	movt	r3, #4
   129f8:	str	ip, [sp]
   129fc:	stmib	sp, {r2, r4}
   12a00:	movw	r2, #63276	; 0xf72c
   12a04:	movt	r2, #2
   12a08:	ldr	r3, [r3]
   12a0c:	bl	29b80 <_obstack_memory_used@@Base+0x4ac8>
   12a10:	mov	r0, r4
   12a14:	bl	11b70 <exit@plt>
   12a18:	mov	r0, #8
   12a1c:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   12a20:	ldr	r1, [r5, #-3940]	; 0xfffff09c
   12a24:	mov	r3, r0
   12a28:	movw	r2, #63568	; 0xf850
   12a2c:	movt	r2, #2
   12a30:	mov	r0, #8
   12a34:	str	r3, [r5, #-3940]	; 0xfffff09c
   12a38:	str	r2, [r3]
   12a3c:	str	r1, [r3, #4]
   12a40:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   12a44:	ldr	r2, [r5, #-3940]	; 0xfffff09c
   12a48:	movw	r3, #63572	; 0xf854
   12a4c:	movt	r3, #2
   12a50:	str	r0, [r5, #-3940]	; 0xfffff09c
   12a54:	str	r3, [r0]
   12a58:	str	r2, [r0, #4]
   12a5c:	b	11e5c <__assert_fail@plt+0xe8>
   12a60:	mov	r3, #1
   12a64:	str	r3, [r5, #-3944]	; 0xfffff098
   12a68:	b	11e5c <__assert_fail@plt+0xe8>
   12a6c:	mov	r3, #2
   12a70:	str	r3, [sp, #24]
   12a74:	b	11e5c <__assert_fail@plt+0xe8>
   12a78:	ldr	r0, [sp, #24]
   12a7c:	mov	r2, #0
   12a80:	mov	r3, #0
   12a84:	movw	r1, #4560	; 0x11d0
   12a88:	movt	r1, #4
   12a8c:	str	r2, [sp, #32]
   12a90:	str	r2, [sp, #36]	; 0x24
   12a94:	strb	r3, [r1, #210]	; 0xd2
   12a98:	subs	r0, r0, r2
   12a9c:	strb	r3, [r4, #4017]	; 0xfb1
   12aa0:	movne	r0, #1
   12aa4:	str	r0, [sp, #24]
   12aa8:	b	11e5c <__assert_fail@plt+0xe8>
   12aac:	movw	r3, #4904	; 0x1328
   12ab0:	movt	r3, #4
   12ab4:	ldr	r9, [r3]
   12ab8:	b	11e5c <__assert_fail@plt+0xe8>
   12abc:	movw	r2, #4800	; 0x12c0
   12ac0:	movt	r2, #4
   12ac4:	ldr	r3, [pc, #672]	; 12d6c <__assert_fail@plt+0xff8>
   12ac8:	mov	r0, #1
   12acc:	movw	r8, #49168	; 0xc010
   12ad0:	movt	r8, #2
   12ad4:	ldr	ip, [r2]
   12ad8:	mov	r2, #4
   12adc:	movw	r1, #4904	; 0x1328
   12ae0:	movt	r1, #4
   12ae4:	str	r2, [sp]
   12ae8:	add	r2, r8, #1424	; 0x590
   12aec:	str	r0, [sp, #8]
   12af0:	movw	r0, #63616	; 0xf880
   12af4:	movt	r0, #2
   12af8:	ldr	r1, [r1]
   12afc:	str	ip, [sp, #4]
   12b00:	bl	1d608 <__assert_fail@plt+0xb894>
   12b04:	add	r0, r8, r0, lsl #2
   12b08:	ldr	r3, [r0, #1396]	; 0x574
   12b0c:	str	r3, [r4, #3084]	; 0xc0c
   12b10:	b	11e5c <__assert_fail@plt+0xe8>
   12b14:	movw	r3, #4800	; 0x12c0
   12b18:	movt	r3, #4
   12b1c:	ldr	r2, [pc, #588]	; 12d70 <__assert_fail@plt+0xffc>
   12b20:	mov	r0, #1
   12b24:	movw	r8, #49168	; 0xc010
   12b28:	movt	r8, #2
   12b2c:	ldr	ip, [r3]
   12b30:	mov	r3, #4
   12b34:	movw	r1, #4904	; 0x1328
   12b38:	movt	r1, #4
   12b3c:	str	r3, [sp]
   12b40:	add	r3, r8, #1344	; 0x540
   12b44:	str	r0, [sp, #8]
   12b48:	movw	r0, #63608	; 0xf878
   12b4c:	movt	r0, #2
   12b50:	ldr	r1, [r1]
   12b54:	str	ip, [sp, #4]
   12b58:	bl	1d608 <__assert_fail@plt+0xb894>
   12b5c:	add	r0, r8, r0, lsl #2
   12b60:	ldr	r3, [r0, #1344]	; 0x540
   12b64:	str	r3, [sp, #28]
   12b68:	b	11e5c <__assert_fail@plt+0xe8>
   12b6c:	movw	r1, #4560	; 0x11d0
   12b70:	movt	r1, #4
   12b74:	mov	r2, #1
   12b78:	mov	r3, #0
   12b7c:	mov	r0, #144	; 0x90
   12b80:	b	12768 <__assert_fail@plt+0x9f4>
   12b84:	mov	r3, #0
   12b88:	str	r3, [sp, #36]	; 0x24
   12b8c:	b	11e5c <__assert_fail@plt+0xe8>
   12b90:	movw	r3, #4800	; 0x12c0
   12b94:	movt	r3, #4
   12b98:	ldr	ip, [r3]
   12b9c:	mov	r2, #1
   12ba0:	mov	r3, #4
   12ba4:	movw	r8, #572	; 0x23c
   12ba8:	movt	r8, #3
   12bac:	movw	r1, #4904	; 0x1328
   12bb0:	movt	r1, #4
   12bb4:	str	r3, [sp]
   12bb8:	movw	r0, #63676	; 0xf8bc
   12bbc:	movt	r0, #2
   12bc0:	str	r2, [sp, #8]
   12bc4:	mov	r3, r8
   12bc8:	movw	r2, #612	; 0x264
   12bcc:	movt	r2, #3
   12bd0:	ldr	r1, [r1]
   12bd4:	str	ip, [sp, #4]
   12bd8:	bl	1d608 <__assert_fail@plt+0xb894>
   12bdc:	ldr	r3, [r8, r0, lsl #2]
   12be0:	str	r3, [sp, #32]
   12be4:	b	11e5c <__assert_fail@plt+0xe8>
   12be8:	movw	r2, #4800	; 0x12c0
   12bec:	movt	r2, #4
   12bf0:	ldr	r3, [pc, #380]	; 12d74 <__assert_fail@plt+0x1000>
   12bf4:	mov	r1, #1
   12bf8:	mov	r0, #4
   12bfc:	ldr	ip, [r2]
   12c00:	movw	r2, #4904	; 0x1328
   12c04:	movt	r2, #4
   12c08:	str	r0, [sp]
   12c0c:	movw	r0, #63656	; 0xf8a8
   12c10:	movt	r0, #2
   12c14:	str	r1, [sp, #8]
   12c18:	movw	r8, #49168	; 0xc010
   12c1c:	movt	r8, #2
   12c20:	ldr	r1, [r2]
   12c24:	add	r2, r3, #16
   12c28:	str	ip, [sp, #4]
   12c2c:	bl	1d608 <__assert_fail@plt+0xb894>
   12c30:	add	r0, r8, r0, lsl #2
   12c34:	ldr	r3, [r0, #1516]	; 0x5ec
   12c38:	str	r3, [r4, #3104]	; 0xc20
   12c3c:	b	11e5c <__assert_fail@plt+0xe8>
   12c40:	movw	r3, #4904	; 0x1328
   12c44:	movt	r3, #4
   12c48:	ldr	r1, [r3]
   12c4c:	cmp	r1, #0
   12c50:	beq	130bc <__assert_fail@plt+0x1348>
   12c54:	movw	r2, #4800	; 0x12c0
   12c58:	movt	r2, #4
   12c5c:	ldr	r3, [pc, #280]	; 12d7c <__assert_fail@plt+0x1008>
   12c60:	mov	r0, #1
   12c64:	movw	r8, #49168	; 0xc010
   12c68:	movt	r8, #2
   12c6c:	ldr	ip, [r2]
   12c70:	mov	r2, #4
   12c74:	stm	sp, {r2, ip}
   12c78:	add	r2, r3, #36	; 0x24
   12c7c:	str	r0, [sp, #8]
   12c80:	movw	r0, #63644	; 0xf89c
   12c84:	movt	r0, #2
   12c88:	bl	1d608 <__assert_fail@plt+0xb894>
   12c8c:	add	r0, r8, r0, lsl #2
   12c90:	ldr	r3, [r0, #1268]	; 0x4f4
   12c94:	cmp	r3, #1
   12c98:	beq	130bc <__assert_fail@plt+0x1348>
   12c9c:	cmp	r3, #2
   12ca0:	movne	r0, #0
   12ca4:	bne	130c0 <__assert_fail@plt+0x134c>
   12ca8:	bl	13f3c <__assert_fail@plt+0x21c8>
   12cac:	b	130c0 <__assert_fail@plt+0x134c>
   12cb0:	mov	r0, #8
   12cb4:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   12cb8:	movw	r3, #4904	; 0x1328
   12cbc:	movt	r3, #4
   12cc0:	ldr	r2, [r5, #-3936]	; 0xfffff0a0
   12cc4:	str	r0, [r5, #-3936]	; 0xfffff0a0
   12cc8:	ldr	r3, [r3]
   12ccc:	str	r3, [r0]
   12cd0:	str	r2, [r0, #4]
   12cd4:	b	11e5c <__assert_fail@plt+0xe8>
   12cd8:	mov	r3, #1
   12cdc:	strb	r3, [r4, #3745]	; 0xea1
   12ce0:	b	11e5c <__assert_fail@plt+0xe8>
   12ce4:	mov	r3, #0
   12ce8:	movw	r9, #63448	; 0xf7d8
   12cec:	movt	r9, #2
   12cf0:	str	r3, [sp, #24]
   12cf4:	b	11e5c <__assert_fail@plt+0xe8>
   12cf8:	movw	r3, #4800	; 0x12c0
   12cfc:	movt	r3, #4
   12d00:	ldr	r2, [pc, #112]	; 12d78 <__assert_fail@plt+0x1004>
   12d04:	mov	r0, #1
   12d08:	movw	r8, #49168	; 0xc010
   12d0c:	movt	r8, #2
   12d10:	ldr	ip, [r3]
   12d14:	mov	r3, #4
   12d18:	movw	r1, #4904	; 0x1328
   12d1c:	movt	r1, #4
   12d20:	str	r3, [sp]
   12d24:	add	r3, r8, #1456	; 0x5b0
   12d28:	str	r0, [sp, #8]
   12d2c:	movw	r0, #63624	; 0xf888
   12d30:	movt	r0, #2
   12d34:	ldr	r1, [r1]
   12d38:	str	ip, [sp, #4]
   12d3c:	bl	1d608 <__assert_fail@plt+0xb894>
   12d40:	add	r0, r8, r0, lsl #2
   12d44:	ldr	r3, [r0, #1456]	; 0x5b0
   12d48:	str	r3, [sp, #24]
   12d4c:	b	11e5c <__assert_fail@plt+0xe8>
   12d50:	mov	r3, #2
   12d54:	str	r3, [r4, #3104]	; 0xc20
   12d58:	b	11e5c <__assert_fail@plt+0xe8>
   12d5c:	mov	r3, #3
   12d60:	str	r3, [r5, #-4088]	; 0xfffff008
   12d64:	b	11e5c <__assert_fail@plt+0xe8>
   12d68:	andeq	r2, r4, r0, ror #6
   12d6c:	andeq	ip, r2, r4, lsl #11
   12d70:	andeq	ip, r2, r8, ror #10
   12d74:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12d78:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12d7c:	andeq	ip, r2, r4, lsl #10
   12d80:	strdeq	r1, [r4], -r0
   12d84:	andeq	ip, r2, r0, lsr #12
   12d88:	andeq	ip, r2, r8, lsr #12
   12d8c:	ldrdeq	r1, [r4], -r4
   12d90:	ldrdeq	r1, [r4], -ip
   12d94:	andeq	ip, r2, r0, lsr #32
   12d98:	andeq	r1, r4, r4, ror #30
   12d9c:	andeq	ip, r2, r8, lsr r6
   12da0:	andeq	r1, r4, r0, ror #30
   12da4:	ldrdeq	r2, [r4], -pc	; <UNPREDICTABLE>
   12da8:	strdeq	r2, [r4], -ip
   12dac:	muleq	r4, r4, r3
   12db0:	andeq	ip, r2, r0, lsr #4
   12db4:	andeq	ip, r2, r4, lsr r2
   12db8:	muleq	r2, ip, r6
   12dbc:	andeq	ip, r2, r8, lsr #13
   12dc0:	movw	r3, #4904	; 0x1328
   12dc4:	movt	r3, #4
   12dc8:	ldr	r1, [r3]
   12dcc:	cmp	r1, #0
   12dd0:	beq	130cc <__assert_fail@plt+0x1358>
   12dd4:	movw	r2, #4800	; 0x12c0
   12dd8:	movt	r2, #4
   12ddc:	ldr	r3, [pc, #-104]	; 12d7c <__assert_fail@plt+0x1008>
   12de0:	mov	r0, #1
   12de4:	movw	r8, #49168	; 0xc010
   12de8:	movt	r8, #2
   12dec:	ldr	ip, [r2]
   12df0:	mov	r2, #4
   12df4:	stm	sp, {r2, ip}
   12df8:	add	r2, r3, #36	; 0x24
   12dfc:	str	r0, [sp, #8]
   12e00:	movw	r0, #63636	; 0xf894
   12e04:	movt	r0, #2
   12e08:	bl	1d608 <__assert_fail@plt+0xb894>
   12e0c:	add	r0, r8, r0, lsl #2
   12e10:	ldr	r3, [r0, #1268]	; 0x4f4
   12e14:	cmp	r3, #1
   12e18:	beq	130cc <__assert_fail@plt+0x1358>
   12e1c:	cmp	r3, #2
   12e20:	movne	r0, #0
   12e24:	bne	130d0 <__assert_fail@plt+0x135c>
   12e28:	bl	13f3c <__assert_fail@plt+0x21c8>
   12e2c:	b	130d0 <__assert_fail@plt+0x135c>
   12e30:	movw	r8, #4904	; 0x1328
   12e34:	movt	r8, #4
   12e38:	ldr	r2, [pc, #-192]	; 12d80 <__assert_fail@plt+0x100c>
   12e3c:	ldr	r0, [r8]
   12e40:	ldr	r1, [sp, #52]	; 0x34
   12e44:	bl	21664 <__assert_fail@plt+0xf8f0>
   12e48:	cmp	r0, #0
   12e4c:	bne	13c7c <__assert_fail@plt+0x1f08>
   12e50:	ldr	r3, [pc, #-216]	; 12d80 <__assert_fail@plt+0x100c>
   12e54:	movw	r1, #4560	; 0x11d0
   12e58:	movt	r1, #4
   12e5c:	ldr	r0, [r4, #3260]	; 0xcbc
   12e60:	ldrd	r2, [r3]
   12e64:	str	r0, [r4, #4028]	; 0xfbc
   12e68:	strd	r2, [r1, #216]	; 0xd8
   12e6c:	b	11e5c <__assert_fail@plt+0xe8>
   12e70:	mov	r3, #5
   12e74:	str	r3, [sp, #28]
   12e78:	b	11e5c <__assert_fail@plt+0xe8>
   12e7c:	mov	r3, #1
   12e80:	strb	r3, [r4, #3078]	; 0xc06
   12e84:	b	11e5c <__assert_fail@plt+0xe8>
   12e88:	mov	r3, #1
   12e8c:	strb	r3, [r4, #3744]	; 0xea0
   12e90:	b	11e5c <__assert_fail@plt+0xe8>
   12e94:	mov	r3, #1
   12e98:	str	r3, [sp, #36]	; 0x24
   12e9c:	b	11e5c <__assert_fail@plt+0xe8>
   12ea0:	mov	r3, #1
   12ea4:	str	r3, [r4, #3104]	; 0xc20
   12ea8:	b	11e5c <__assert_fail@plt+0xe8>
   12eac:	mov	r3, #0
   12eb0:	movw	r1, #4560	; 0x11d0
   12eb4:	movt	r1, #4
   12eb8:	str	r3, [sp, #24]
   12ebc:	strb	r3, [r1, #205]	; 0xcd
   12ec0:	b	11e5c <__assert_fail@plt+0xe8>
   12ec4:	mov	r3, #1
   12ec8:	mov	r2, #0
   12ecc:	str	r2, [sp, #24]
   12ed0:	strb	r3, [r4, #4024]	; 0xfb8
   12ed4:	b	11e5c <__assert_fail@plt+0xe8>
   12ed8:	mov	r3, #4
   12edc:	str	r3, [sp, #24]
   12ee0:	b	11e5c <__assert_fail@plt+0xe8>
   12ee4:	mov	r3, #3
   12ee8:	str	r3, [sp, #24]
   12eec:	b	11e5c <__assert_fail@plt+0xe8>
   12ef0:	movw	r8, #4904	; 0x1328
   12ef4:	movt	r8, #4
   12ef8:	ldr	r0, [r8]
   12efc:	bl	13e68 <__assert_fail@plt+0x20f4>
   12f00:	subs	r3, r0, #0
   12f04:	str	r3, [sp, #40]	; 0x28
   12f08:	bge	11e5c <__assert_fail@plt+0xe8>
   12f0c:	mov	r2, #5
   12f10:	movw	r1, #63540	; 0xf834
   12f14:	movt	r1, #2
   12f18:	mov	r0, #0
   12f1c:	bl	11984 <dcgettext@plt>
   12f20:	mov	r4, r0
   12f24:	ldr	r0, [r8]
   12f28:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   12f2c:	movw	r2, #63560	; 0xf848
   12f30:	movt	r2, #2
   12f34:	str	r0, [sp]
   12f38:	mov	r3, r4
   12f3c:	mov	r1, #0
   12f40:	mov	r0, #2
   12f44:	bl	11a8c <error@plt>
   12f48:	mov	r3, #4
   12f4c:	str	r3, [sp, #28]
   12f50:	b	11e5c <__assert_fail@plt+0xe8>
   12f54:	mov	r3, #2
   12f58:	str	r3, [r4, #3084]	; 0xc0c
   12f5c:	b	11e5c <__assert_fail@plt+0xe8>
   12f60:	mov	r3, #1
   12f64:	strb	r3, [r4, #3088]	; 0xc10
   12f68:	b	11e5c <__assert_fail@plt+0xe8>
   12f6c:	movw	r0, #64240	; 0xfaf0
   12f70:	movt	r0, #2
   12f74:	bl	11ac8 <getenv@plt>
   12f78:	cmp	r0, #0
   12f7c:	str	r0, [sp, #60]	; 0x3c
   12f80:	beq	13888 <__assert_fail@plt+0x1b14>
   12f84:	ldrb	r3, [r0]
   12f88:	cmp	r3, #0
   12f8c:	beq	13888 <__assert_fail@plt+0x1b14>
   12f90:	movw	r3, #64552	; 0xfc28
   12f94:	movt	r3, #2
   12f98:	ldrh	r2, [r3]
   12f9c:	movw	r1, #63468	; 0xf7ec
   12fa0:	movt	r1, #2
   12fa4:	ldrb	r3, [r3, #2]
   12fa8:	str	r1, [sp, #28]
   12fac:	strh	r2, [sp, #56]	; 0x38
   12fb0:	strb	r3, [sp, #58]	; 0x3a
   12fb4:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   12fb8:	str	r0, [r5, #-3932]	; 0xfffff0a4
   12fbc:	str	r5, [sp, #24]
   12fc0:	str	r0, [sp, #64]	; 0x40
   12fc4:	ldr	r3, [sp, #60]	; 0x3c
   12fc8:	ldrb	r2, [r3]
   12fcc:	cmp	r2, #42	; 0x2a
   12fd0:	beq	13a44 <__assert_fail@plt+0x1cd0>
   12fd4:	cmp	r2, #58	; 0x3a
   12fd8:	beq	13a38 <__assert_fail@plt+0x1cc4>
   12fdc:	cmp	r2, #0
   12fe0:	bne	1348c <__assert_fail@plt+0x1718>
   12fe4:	ldr	r5, [sp, #24]
   12fe8:	ldr	r2, [r8, #56]	; 0x38
   12fec:	cmp	r2, #6
   12ff0:	bne	13010 <__assert_fail@plt+0x129c>
   12ff4:	movw	r1, #64304	; 0xfb30
   12ff8:	movt	r1, #2
   12ffc:	ldr	r0, [r8, #60]	; 0x3c
   13000:	bl	11d20 <strncmp@plt>
   13004:	cmp	r0, #0
   13008:	moveq	r3, #1
   1300c:	strbeq	r3, [r4, #4018]	; 0xfb2
   13010:	ldrb	r3, [r4, #4017]	; 0xfb1
   13014:	ldrb	r2, [r4, #3745]	; 0xea1
   13018:	cmp	r3, #0
   1301c:	beq	1249c <__assert_fail@plt+0x728>
   13020:	mov	r3, #0
   13024:	cmp	r2, r3
   13028:	str	r3, [r4, #3096]	; 0xc18
   1302c:	bne	1306c <__assert_fail@plt+0x12f8>
   13030:	mov	r0, #13
   13034:	bl	13ec8 <__assert_fail@plt+0x2154>
   13038:	cmp	r0, #0
   1303c:	bne	1306c <__assert_fail@plt+0x12f8>
   13040:	mov	r0, #14
   13044:	bl	13ec8 <__assert_fail@plt+0x2154>
   13048:	cmp	r0, #0
   1304c:	bne	139ac <__assert_fail@plt+0x1c38>
   13050:	mov	r0, #12
   13054:	bl	13ec8 <__assert_fail@plt+0x2154>
   13058:	cmp	r0, #0
   1305c:	beq	124a8 <__assert_fail@plt+0x734>
   13060:	ldr	r3, [r4, #3080]	; 0xc08
   13064:	cmp	r3, #0
   13068:	bne	124a8 <__assert_fail@plt+0x734>
   1306c:	mov	r3, #1
   13070:	strb	r3, [r5, #-4084]	; 0xfffff00c
   13074:	b	124a8 <__assert_fail@plt+0x734>
   13078:	movw	r3, #4792	; 0x12b8
   1307c:	movt	r3, #4
   13080:	ldr	r7, [r3]
   13084:	cmp	r7, #1
   13088:	beq	13960 <__assert_fail@plt+0x1bec>
   1308c:	cmp	r7, #2
   13090:	movne	r7, #0
   13094:	beq	1396c <__assert_fail@plt+0x1bf8>
   13098:	str	r7, [r4, #3080]	; 0xc08
   1309c:	ldrb	r3, [r4, #4017]	; 0xfb1
   130a0:	cmp	r3, #0
   130a4:	bne	12324 <__assert_fail@plt+0x5b0>
   130a8:	ldr	r3, [sp, #40]	; 0x28
   130ac:	cmn	r3, #1
   130b0:	bne	12330 <__assert_fail@plt+0x5bc>
   130b4:	mov	r0, #80	; 0x50
   130b8:	b	12334 <__assert_fail@plt+0x5c0>
   130bc:	mov	r0, #1
   130c0:	and	r0, r0, #1
   130c4:	strb	r0, [r4, #4092]	; 0xffc
   130c8:	b	11e5c <__assert_fail@plt+0xe8>
   130cc:	mov	r0, #1
   130d0:	and	r0, r0, #1
   130d4:	strb	r0, [r4, #4017]	; 0xfb1
   130d8:	b	11e5c <__assert_fail@plt+0xe8>
   130dc:	ldr	r3, [r4, #3308]	; 0xcec
   130e0:	cmp	r3, #0
   130e4:	beq	123c8 <__assert_fail@plt+0x654>
   130e8:	bic	r3, r7, #2
   130ec:	cmp	r7, #6
   130f0:	cmpne	r3, #1
   130f4:	moveq	r3, #1
   130f8:	movne	r3, #0
   130fc:	b	123c8 <__assert_fail@plt+0x654>
   13100:	cmp	r2, #0
   13104:	bne	1336c <__assert_fail@plt+0x15f8>
   13108:	str	r2, [r4, #3092]	; 0xc14
   1310c:	cmp	r9, #0
   13110:	beq	13b80 <__assert_fail@plt+0x1e0c>
   13114:	ldr	r7, [pc, #-920]	; 12d84 <__assert_fail@plt+0x1010>
   13118:	b	13130 <__assert_fail@plt+0x13bc>
   1311c:	mov	r0, #2
   13120:	bl	1ef3c <__assert_fail@plt+0xd1c8>
   13124:	cmp	r0, #0
   13128:	beq	12484 <__assert_fail@plt+0x710>
   1312c:	add	r9, r9, #6
   13130:	mov	r2, #6
   13134:	mov	r1, r7
   13138:	mov	r0, r9
   1313c:	bl	11d20 <strncmp@plt>
   13140:	cmp	r0, #0
   13144:	beq	1311c <__assert_fail@plt+0x13a8>
   13148:	ldrb	r3, [r9]
   1314c:	cmp	r3, #43	; 0x2b
   13150:	beq	13704 <__assert_fail@plt+0x1990>
   13154:	ldr	r2, [pc, #-980]	; 12d88 <__assert_fail@plt+0x1014>
   13158:	mov	r3, #4
   1315c:	mov	r0, r9
   13160:	ldr	r1, [pc, #-952]	; 12db0 <__assert_fail@plt+0x103c>
   13164:	bl	1d26c <__assert_fail@plt+0xb4f8>
   13168:	subs	r2, r0, #0
   1316c:	blt	13ab8 <__assert_fail@plt+0x1d44>
   13170:	cmp	r2, #3
   13174:	ldrls	pc, [pc, r2, lsl #2]
   13178:	b	13748 <__assert_fail@plt+0x19d4>
   1317c:	andeq	r3, r1, r4, lsr #20
   13180:	andeq	r3, r1, r0, lsl sl
   13184:	strdeq	r3, [r1], -r8
   13188:			; <UNDEFINED> instruction: 0x000139bc
   1318c:	movw	r3, #4792	; 0x12b8
   13190:	movt	r3, #4
   13194:	ldr	r3, [r3]
   13198:	cmp	r3, #1
   1319c:	movne	r0, #0
   131a0:	beq	13984 <__assert_fail@plt+0x1c10>
   131a4:	and	r3, r0, #1
   131a8:	b	12384 <__assert_fail@plt+0x610>
   131ac:	ldrb	r7, [r5, #-4056]	; 0xfffff028
   131b0:	cmp	r7, #0
   131b4:	bne	1338c <__assert_fail@plt+0x1618>
   131b8:	mov	r0, #16
   131bc:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   131c0:	mov	r6, r0
   131c4:	movw	r0, #64316	; 0xfb3c
   131c8:	movt	r0, #2
   131cc:	str	r7, [r6, #4]
   131d0:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   131d4:	ldr	r3, [r4, #3752]	; 0xea8
   131d8:	mov	r2, #1
   131dc:	str	r0, [r6]
   131e0:	strb	r2, [r6, #8]
   131e4:	str	r6, [r4, #3752]	; 0xea8
   131e8:	str	r3, [r6, #12]
   131ec:	ldr	r3, [r4, #3296]	; 0xce0
   131f0:	cmp	r3, #0
   131f4:	bne	135ac <__assert_fail@plt+0x1838>
   131f8:	ldr	r3, [r4, #3752]	; 0xea8
   131fc:	cmp	r3, #0
   13200:	beq	126c8 <__assert_fail@plt+0x954>
   13204:	ldr	r3, [r3, #12]
   13208:	cmp	r3, #0
   1320c:	strbeq	r3, [r5, #-3995]	; 0xfffff065
   13210:	b	12604 <__assert_fail@plt+0x890>
   13214:	movw	r0, #63728	; 0xf8f0
   13218:	movt	r0, #2
   1321c:	bl	11ac8 <getenv@plt>
   13220:	mov	r8, r0
   13224:	mov	r2, r7
   13228:	sub	r1, r7, #4
   1322c:	bl	21664 <__assert_fail@plt+0xf8f0>
   13230:	cmp	r8, #0
   13234:	beq	13bcc <__assert_fail@plt+0x1e58>
   13238:	ldrd	r2, [r7]
   1323c:	movw	r8, #4560	; 0x11d0
   13240:	movt	r8, #4
   13244:	ldr	r1, [r4, #3260]	; 0xcbc
   13248:	strd	r2, [r8, #216]	; 0xd8
   1324c:	str	r1, [r4, #4028]	; 0xfbc
   13250:	ldr	r3, [sp, #48]	; 0x30
   13254:	cmp	r3, #0
   13258:	beq	12304 <__assert_fail@plt+0x590>
   1325c:	mov	r3, #0
   13260:	mov	r0, #1024	; 0x400
   13264:	mov	r1, #0
   13268:	str	r3, [r4, #3260]	; 0xcbc
   1326c:	strd	r0, [r7]
   13270:	b	12304 <__assert_fail@plt+0x590>
   13274:	ldr	r3, [r4, #3104]	; 0xc20
   13278:	cmp	r3, #3
   1327c:	beq	124c0 <__assert_fail@plt+0x74c>
   13280:	ldr	r3, [r4, #3080]	; 0xc08
   13284:	cmp	r3, #0
   13288:	moveq	r3, #1
   1328c:	movne	r3, #3
   13290:	b	124c4 <__assert_fail@plt+0x750>
   13294:	ldrb	r3, [r4, #3276]	; 0xccc
   13298:	cmp	r3, #0
   1329c:	bne	1255c <__assert_fail@plt+0x7e8>
   132a0:	ldrb	r2, [r4, #3078]	; 0xc06
   132a4:	cmp	r2, #0
   132a8:	bne	1255c <__assert_fail@plt+0x7e8>
   132ac:	ldrb	r3, [r5, #-3996]	; 0xfffff064
   132b0:	strb	r2, [r4, #4093]	; 0xffd
   132b4:	cmp	r3, #0
   132b8:	bne	132d8 <__assert_fail@plt+0x1564>
   132bc:	ldrb	r3, [r4, #4017]	; 0xfb1
   132c0:	cmp	r3, #0
   132c4:	bne	132d8 <__assert_fail@plt+0x1564>
   132c8:	ldr	r3, [r4, #3104]	; 0xc20
   132cc:	cmp	r3, #0
   132d0:	ldrbeq	r3, [r4, #3745]	; 0xea1
   132d4:	beq	12568 <__assert_fail@plt+0x7f4>
   132d8:	mov	r3, #1
   132dc:	b	12568 <__assert_fail@plt+0x7f4>
   132e0:	ldr	r2, [r8]
   132e4:	cmp	r2, #2
   132e8:	bne	13304 <__assert_fail@plt+0x1590>
   132ec:	movw	r1, #64384	; 0xfb80
   132f0:	movt	r1, #2
   132f4:	ldr	r0, [r8, #4]
   132f8:	bl	1196c <memcmp@plt>
   132fc:	cmp	r0, #0
   13300:	beq	1398c <__assert_fail@plt+0x1c18>
   13304:	ldr	r1, [pc, #-1408]	; 12d8c <__assert_fail@plt+0x1018>
   13308:	sub	r0, r1, #4
   1330c:	bl	14cc8 <__assert_fail@plt+0x2f54>
   13310:	ldr	r1, [pc, #-1416]	; 12d90 <__assert_fail@plt+0x101c>
   13314:	sub	r0, r1, #4
   13318:	bl	14cc8 <__assert_fail@plt+0x2f54>
   1331c:	ldr	r6, [pc, #-1424]	; 12d94 <__assert_fail@plt+0x1020>
   13320:	movw	r3, #4900	; 0x1324
   13324:	movt	r3, #4
   13328:	ldr	r0, [r3]
   1332c:	ldr	r9, [pc, #-1436]	; 12d98 <__assert_fail@plt+0x1024>
   13330:	add	r8, r6, #48	; 0x30
   13334:	bl	119e4 <fflush_unlocked@plt>
   13338:	b	13344 <__assert_fail@plt+0x15d0>
   1333c:	cmp	r8, r6
   13340:	beq	137d0 <__assert_fail@plt+0x1a5c>
   13344:	ldr	r7, [r6], #4
   13348:	mov	r0, r9
   1334c:	mov	r1, r7
   13350:	bl	1199c <sigismember@plt>
   13354:	cmp	r0, #0
   13358:	beq	1333c <__assert_fail@plt+0x15c8>
   1335c:	mov	r0, r7
   13360:	mov	r1, #0
   13364:	bl	11954 <signal@plt>
   13368:	b	1333c <__assert_fail@plt+0x15c8>
   1336c:	ldr	r3, [r4, #3084]	; 0xc0c
   13370:	sub	r3, r3, #1
   13374:	cmp	r3, #2
   13378:	movhi	r3, #0
   1337c:	bhi	12478 <__assert_fail@plt+0x704>
   13380:	mov	r3, #5
   13384:	str	r3, [r4, #3092]	; 0xc14
   13388:	b	12484 <__assert_fail@plt+0x710>
   1338c:	movw	r3, #316	; 0x13c
   13390:	movt	r3, #3
   13394:	movw	r0, #64316	; 0xfb3c
   13398:	movt	r0, #2
   1339c:	mov	r2, #1
   133a0:	mov	r1, #3
   133a4:	bl	1b08c <__assert_fail@plt+0x9318>
   133a8:	b	131ec <__assert_fail@plt+0x1478>
   133ac:	mov	r3, #8
   133b0:	movw	r0, #63824	; 0xf950
   133b4:	movt	r0, #2
   133b8:	str	r3, [r4, #3096]	; 0xc18
   133bc:	bl	11ac8 <getenv@plt>
   133c0:	subs	r7, r0, #0
   133c4:	beq	12370 <__assert_fail@plt+0x5fc>
   133c8:	movw	r1, #316	; 0x13c
   133cc:	movt	r1, #3
   133d0:	mov	r2, #0
   133d4:	mov	r3, sl
   133d8:	str	r1, [sp]
   133dc:	mov	r1, r2
   133e0:	bl	2a7b8 <_obstack_memory_used@@Base+0x5700>
   133e4:	cmp	r0, #0
   133e8:	bne	13408 <__assert_fail@plt+0x1694>
   133ec:	ldrd	r2, [sp, #64]	; 0x40
   133f0:	mov	r1, #0
   133f4:	mvn	r0, #0
   133f8:	cmp	r3, r1
   133fc:	cmpeq	r2, r0
   13400:	strls	r2, [r4, #3096]	; 0xc18
   13404:	bls	12370 <__assert_fail@plt+0x5fc>
   13408:	mov	r2, #5
   1340c:	movw	r1, #63832	; 0xf958
   13410:	movt	r1, #2
   13414:	mov	r0, #0
   13418:	bl	11984 <dcgettext@plt>
   1341c:	mov	r2, r0
   13420:	mov	r0, r7
   13424:	str	r2, [sp, #24]
   13428:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   1342c:	mov	r1, #0
   13430:	mov	r3, r0
   13434:	ldr	r2, [sp, #24]
   13438:	mov	r0, r1
   1343c:	bl	11a8c <error@plt>
   13440:	b	12370 <__assert_fail@plt+0x5fc>
   13444:	ldr	r1, [pc, #-1700]	; 12da8 <__assert_fail@plt+0x1034>
   13448:	movw	r0, #64388	; 0xfb84
   1344c:	movt	r0, #2
   13450:	bl	14a64 <__assert_fail@plt+0x2cf0>
   13454:	ldr	r1, [pc, #-1712]	; 12dac <__assert_fail@plt+0x1038>
   13458:	movw	r0, #64400	; 0xfb90
   1345c:	movt	r0, #2
   13460:	bl	14a64 <__assert_fail@plt+0x2cf0>
   13464:	ldr	r0, [r4, #3284]	; 0xcd4
   13468:	bl	26f2c <_obstack_memory_used@@Base+0x1e74>
   1346c:	movw	r3, #612	; 0x264
   13470:	movt	r3, #3
   13474:	movw	r1, #64416	; 0xfba0
   13478:	movt	r1, #2
   1347c:	ldr	r2, [r3, r0, lsl #2]
   13480:	mov	r0, #1
   13484:	bl	11bf4 <__printf_chk@plt>
   13488:	b	126ec <__assert_fail@plt+0x978>
   1348c:	add	r2, r3, #1
   13490:	str	r2, [sp, #60]	; 0x3c
   13494:	ldrb	r2, [r3]
   13498:	strb	r2, [sp, #56]	; 0x38
   1349c:	ldrb	r2, [r3, #1]
   134a0:	cmp	r2, #0
   134a4:	beq	13a8c <__assert_fail@plt+0x1d18>
   134a8:	add	r2, r3, #2
   134ac:	add	r1, r3, #3
   134b0:	str	r2, [sp, #60]	; 0x3c
   134b4:	ldrb	r2, [r3, #1]
   134b8:	strb	r2, [sp, #57]	; 0x39
   134bc:	str	r1, [sp, #60]	; 0x3c
   134c0:	ldrb	r3, [r3, #2]
   134c4:	cmp	r3, #61	; 0x3d
   134c8:	bne	13a8c <__assert_fail@plt+0x1d18>
   134cc:	ldr	r5, [pc, #-1848]	; 12d9c <__assert_fail@plt+0x1028>
   134d0:	mov	r9, #0
   134d4:	ldr	r1, [sp, #28]
   134d8:	b	134ec <__assert_fail@plt+0x1778>
   134dc:	ldr	r1, [r5, #4]!
   134e0:	add	r9, r9, #1
   134e4:	cmp	r1, #0
   134e8:	beq	13524 <__assert_fail@plt+0x17b0>
   134ec:	add	r0, sp, #56	; 0x38
   134f0:	bl	118a0 <strcmp@plt>
   134f4:	cmp	r0, #0
   134f8:	bne	134dc <__assert_fail@plt+0x1768>
   134fc:	ldr	ip, [sp, #64]	; 0x40
   13500:	add	r9, r8, r9, lsl #3
   13504:	mov	r2, r0
   13508:	add	r1, sp, #60	; 0x3c
   1350c:	mov	r0, sl
   13510:	mov	r3, r9
   13514:	str	ip, [r9, #4]
   13518:	bl	14208 <__assert_fail@plt+0x2494>
   1351c:	cmp	r0, #0
   13520:	bne	12fc4 <__assert_fail@plt+0x1250>
   13524:	mov	r2, #5
   13528:	movw	r1, #64280	; 0xfb18
   1352c:	movt	r1, #2
   13530:	mov	r0, #0
   13534:	ldr	r5, [sp, #24]
   13538:	bl	11984 <dcgettext@plt>
   1353c:	mov	r9, r0
   13540:	add	r0, sp, #56	; 0x38
   13544:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   13548:	mov	r1, #0
   1354c:	mov	r3, r0
   13550:	mov	r2, r9
   13554:	mov	r0, r1
   13558:	bl	11a8c <error@plt>
   1355c:	mov	r2, #5
   13560:	movw	r1, #64500	; 0xfbf4
   13564:	movt	r1, #2
   13568:	mov	r0, #0
   1356c:	bl	11984 <dcgettext@plt>
   13570:	mov	r1, #0
   13574:	mov	r2, r0
   13578:	mov	r0, r1
   1357c:	bl	11a8c <error@plt>
   13580:	ldr	r0, [r5, #-3932]	; 0xfffff0a4
   13584:	bl	1ee98 <__assert_fail@plt+0xd124>
   13588:	ldr	r0, [r4, #4020]	; 0xfb4
   1358c:	b	1359c <__assert_fail@plt+0x1828>
   13590:	ldr	r9, [r0, #16]
   13594:	bl	1ee98 <__assert_fail@plt+0xd124>
   13598:	mov	r0, r9
   1359c:	cmp	r0, #0
   135a0:	bne	13590 <__assert_fail@plt+0x181c>
   135a4:	strb	r0, [r4, #4017]	; 0xfb1
   135a8:	b	12fe8 <__assert_fail@plt+0x1274>
   135ac:	bl	16830 <__assert_fail@plt+0x4abc>
   135b0:	ldrb	r0, [r5, #-4056]	; 0xfffff028
   135b4:	cmp	r0, #0
   135b8:	beq	13978 <__assert_fail@plt+0x1c04>
   135bc:	ldr	r3, [r4, #3296]	; 0xce0
   135c0:	cmp	r3, #0
   135c4:	beq	125f8 <__assert_fail@plt+0x884>
   135c8:	bl	1abe0 <__assert_fail@plt+0x8e6c>
   135cc:	ldr	r3, [r4, #3752]	; 0xea8
   135d0:	cmp	r3, #0
   135d4:	beq	126c8 <__assert_fail@plt+0x954>
   135d8:	ldr	r2, [pc, #-2112]	; 12da0 <__assert_fail@plt+0x102c>
   135dc:	movw	r3, #4900	; 0x1324
   135e0:	movt	r3, #4
   135e4:	ldr	r0, [r3]
   135e8:	ldr	r3, [r2, #-8]
   135ec:	ldr	ip, [r2, #-4]
   135f0:	ldr	r1, [r0, #20]
   135f4:	adds	r3, r3, #1
   135f8:	ldr	lr, [r0, #24]
   135fc:	adc	ip, ip, #0
   13600:	stmdb	r2, {r3, ip}
   13604:	cmp	r1, lr
   13608:	addcc	r2, r1, #1
   1360c:	movcc	r3, #10
   13610:	strcc	r2, [r0, #20]
   13614:	strbcc	r3, [r1]
   13618:	bcc	12604 <__assert_fail@plt+0x890>
   1361c:	mov	r1, #10
   13620:	bl	11c48 <__overflow@plt>
   13624:	b	12604 <__assert_fail@plt+0x890>
   13628:	ldr	r1, [pc, #-2188]	; 12da4 <__assert_fail@plt+0x1030>
   1362c:	mov	r3, #0
   13630:	b	1367c <__assert_fail@plt+0x1908>
   13634:	cmp	r3, #65	; 0x41
   13638:	bge	13690 <__assert_fail@plt+0x191c>
   1363c:	sub	r2, r3, #48	; 0x30
   13640:	cmp	r2, #9
   13644:	bls	13690 <__assert_fail@plt+0x191c>
   13648:	sub	r2, r3, #45	; 0x2d
   1364c:	cmp	r3, #126	; 0x7e
   13650:	cmpne	r2, #1
   13654:	bls	13690 <__assert_fail@plt+0x191c>
   13658:	sub	r2, r3, #95	; 0x5f
   1365c:	clz	r2, r2
   13660:	lsr	r2, r2, #5
   13664:	ldrb	r0, [r1, #1]!
   13668:	add	r3, r3, #1
   1366c:	cmp	r3, #256	; 0x100
   13670:	orr	r2, r2, r0
   13674:	strb	r2, [r1]
   13678:	beq	13698 <__assert_fail@plt+0x1924>
   1367c:	cmp	r3, #90	; 0x5a
   13680:	ble	13634 <__assert_fail@plt+0x18c0>
   13684:	sub	r2, r3, #97	; 0x61
   13688:	cmp	r2, #25
   1368c:	bhi	13648 <__assert_fail@plt+0x18d4>
   13690:	mov	r2, #1
   13694:	b	13664 <__assert_fail@plt+0x18f0>
   13698:	bl	2a614 <_obstack_memory_used@@Base+0x555c>
   1369c:	cmp	r0, #0
   136a0:	movweq	r3, #316	; 0x13c
   136a4:	movteq	r3, #3
   136a8:	strne	r0, [r4, #3756]	; 0xeac
   136ac:	streq	r3, [r4, #3756]	; 0xeac
   136b0:	b	12588 <__assert_fail@plt+0x814>
   136b4:	movw	r9, #61080	; 0xee98
   136b8:	movt	r9, #1
   136bc:	ldr	r0, [pc, #-2332]	; 12da8 <__assert_fail@plt+0x1034>
   136c0:	mov	r2, #0
   136c4:	movw	r3, #46472	; 0xb588
   136c8:	movt	r3, #2
   136cc:	mov	r1, r2
   136d0:	str	r9, [sp]
   136d4:	bl	24cac <_obstack_begin@@Base>
   136d8:	mov	r2, #0
   136dc:	movw	r3, #46472	; 0xb588
   136e0:	movt	r3, #2
   136e4:	mov	r1, r2
   136e8:	ldr	r0, [pc, #-2372]	; 12dac <__assert_fail@plt+0x1038>
   136ec:	str	r9, [sp]
   136f0:	bl	24cac <_obstack_begin@@Base>
   136f4:	b	1257c <__assert_fail@plt+0x808>
   136f8:	movw	r1, #55580	; 0xd91c
   136fc:	movt	r1, #2
   13700:	b	129dc <__assert_fail@plt+0xc68>
   13704:	add	r9, r9, #1
   13708:	mov	r1, #10
   1370c:	mov	r0, r9
   13710:	bl	11ba0 <strchr@plt>
   13714:	subs	r3, r0, #0
   13718:	beq	13bec <__assert_fail@plt+0x1e78>
   1371c:	add	r7, r3, #1
   13720:	mov	r1, #10
   13724:	str	r3, [sp, #24]
   13728:	mov	r0, r7
   1372c:	bl	11ba0 <strchr@plt>
   13730:	ldr	r3, [sp, #24]
   13734:	cmp	r0, #0
   13738:	strbeq	r0, [r3]
   1373c:	bne	13c48 <__assert_fail@plt+0x1ed4>
   13740:	str	r9, [r8, #196]	; 0xc4
   13744:	str	r7, [r8, #200]	; 0xc8
   13748:	bl	13f88 <__assert_fail@plt+0x2214>
   1374c:	b	12484 <__assert_fail@plt+0x710>
   13750:	movw	r0, #63896	; 0xf998
   13754:	movt	r0, #2
   13758:	bl	11ac8 <getenv@plt>
   1375c:	subs	r3, r0, #0
   13760:	str	r3, [sp, #24]
   13764:	beq	1379c <__assert_fail@plt+0x1a28>
   13768:	movw	r7, #572	; 0x23c
   1376c:	movt	r7, #3
   13770:	mov	r2, r7
   13774:	movw	r1, #612	; 0x264
   13778:	movt	r1, #3
   1377c:	mov	r3, #4
   13780:	bl	1d26c <__assert_fail@plt+0xb4f8>
   13784:	cmp	r0, #0
   13788:	blt	13bf4 <__assert_fail@plt+0x1e80>
   1378c:	ldr	r3, [r7, r0, lsl #2]
   13790:	cmp	r3, #0
   13794:	str	r3, [sp, #32]
   13798:	bge	12394 <__assert_fail@plt+0x620>
   1379c:	movw	r3, #4792	; 0x12b8
   137a0:	movt	r3, #4
   137a4:	ldr	r3, [r3]
   137a8:	cmp	r3, #1
   137ac:	movne	r3, #7
   137b0:	strne	r3, [sp, #32]
   137b4:	bne	12394 <__assert_fail@plt+0x620>
   137b8:	bl	13f3c <__assert_fail@plt+0x21c8>
   137bc:	cmp	r0, #0
   137c0:	movne	r3, #3
   137c4:	strne	r3, [sp, #32]
   137c8:	bne	12394 <__assert_fail@plt+0x620>
   137cc:	b	123a0 <__assert_fail@plt+0x62c>
   137d0:	ldr	r6, [r4, #3100]	; 0xc1c
   137d4:	cmp	r6, #0
   137d8:	beq	137ec <__assert_fail@plt+0x1a78>
   137dc:	mov	r0, #19
   137e0:	bl	1187c <raise@plt>
   137e4:	subs	r6, r6, #1
   137e8:	bne	137dc <__assert_fail@plt+0x1a68>
   137ec:	ldr	r0, [r4]
   137f0:	cmp	r0, #0
   137f4:	beq	126e0 <__assert_fail@plt+0x96c>
   137f8:	bl	1187c <raise@plt>
   137fc:	b	126e0 <__assert_fail@plt+0x96c>
   13800:	mov	r2, #1
   13804:	mov	r1, #32
   13808:	bl	26f5c <_obstack_memory_used@@Base+0x1ea4>
   1380c:	b	123e0 <__assert_fail@plt+0x66c>
   13810:	bl	13f3c <__assert_fail@plt+0x21c8>
   13814:	cmp	r0, #0
   13818:	bne	13ba0 <__assert_fail@plt+0x1e2c>
   1381c:	movw	r0, #63756	; 0xf90c
   13820:	movt	r0, #2
   13824:	bl	11ac8 <getenv@plt>
   13828:	subs	r7, r0, #0
   1382c:	beq	130b4 <__assert_fail@plt+0x1340>
   13830:	ldrb	r3, [r7]
   13834:	cmp	r3, #0
   13838:	beq	130b4 <__assert_fail@plt+0x1340>
   1383c:	bl	13e68 <__assert_fail@plt+0x20f4>
   13840:	subs	r3, r0, #0
   13844:	str	r3, [sp, #40]	; 0x28
   13848:	bge	12330 <__assert_fail@plt+0x5bc>
   1384c:	mov	r2, #5
   13850:	movw	r1, #63764	; 0xf914
   13854:	movt	r1, #2
   13858:	mov	r0, #0
   1385c:	bl	11984 <dcgettext@plt>
   13860:	mov	r2, r0
   13864:	mov	r0, r7
   13868:	str	r2, [sp, #24]
   1386c:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   13870:	mov	r1, #0
   13874:	mov	r3, r0
   13878:	ldr	r2, [sp, #24]
   1387c:	mov	r0, r1
   13880:	bl	11a8c <error@plt>
   13884:	b	130b4 <__assert_fail@plt+0x1340>
   13888:	movw	r0, #64252	; 0xfafc
   1388c:	movt	r0, #2
   13890:	bl	11ac8 <getenv@plt>
   13894:	cmp	r0, #0
   13898:	beq	138a8 <__assert_fail@plt+0x1b34>
   1389c:	ldrb	r3, [r0]
   138a0:	cmp	r3, #0
   138a4:	bne	13010 <__assert_fail@plt+0x129c>
   138a8:	movw	r0, #64264	; 0xfb08
   138ac:	movt	r0, #2
   138b0:	bl	11ac8 <getenv@plt>
   138b4:	subs	r3, r0, #0
   138b8:	beq	13aac <__assert_fail@plt+0x1d38>
   138bc:	mov	r2, r3
   138c0:	ldrb	r3, [r3]
   138c4:	cmp	r3, #0
   138c8:	beq	13aac <__assert_fail@plt+0x1d38>
   138cc:	movw	r3, #50864	; 0xc6b0
   138d0:	movt	r3, #2
   138d4:	str	r7, [sp, #24]
   138d8:	movw	r1, #64272	; 0xfb10
   138dc:	movt	r1, #2
   138e0:	str	r6, [sp, #28]
   138e4:	mov	r9, r5
   138e8:	mov	r6, r3
   138ec:	str	r4, [sp, #32]
   138f0:	mov	r7, r3
   138f4:	mov	r5, r2
   138f8:	mov	r4, r1
   138fc:	b	13920 <__assert_fail@plt+0x1bac>
   13900:	mov	r0, r6
   13904:	bl	11b94 <strlen@plt>
   13908:	add	r0, r0, #1
   1390c:	movw	r2, #4309	; 0x10d5
   13910:	add	r6, r6, r0
   13914:	sub	r1, r6, r7
   13918:	cmp	r1, r2
   1391c:	bhi	13a9c <__assert_fail@plt+0x1d28>
   13920:	mov	r2, #5
   13924:	mov	r1, r4
   13928:	mov	r0, r6
   1392c:	bl	11d20 <strncmp@plt>
   13930:	subs	r2, r0, #0
   13934:	bne	13900 <__assert_fail@plt+0x1b8c>
   13938:	mov	r1, r5
   1393c:	add	r0, r6, #5
   13940:	bl	11ab0 <fnmatch@plt>
   13944:	cmp	r0, #0
   13948:	bne	13900 <__assert_fail@plt+0x1b8c>
   1394c:	mov	r5, r9
   13950:	ldr	r7, [sp, #24]
   13954:	ldr	r6, [sp, #28]
   13958:	ldr	r4, [sp, #32]
   1395c:	b	13010 <__assert_fail@plt+0x129c>
   13960:	bl	13f3c <__assert_fail@plt+0x21c8>
   13964:	cmp	r0, #0
   13968:	beq	13098 <__assert_fail@plt+0x1324>
   1396c:	mov	r3, #2
   13970:	str	r3, [r4, #3080]	; 0xc08
   13974:	b	12324 <__assert_fail@plt+0x5b0>
   13978:	mov	r1, #1
   1397c:	bl	16dc8 <__assert_fail@plt+0x5054>
   13980:	b	135bc <__assert_fail@plt+0x1848>
   13984:	bl	13f3c <__assert_fail@plt+0x21c8>
   13988:	b	131a4 <__assert_fail@plt+0x1430>
   1398c:	ldr	r3, [r8, #8]
   13990:	cmp	r3, #1
   13994:	bne	13304 <__assert_fail@plt+0x1590>
   13998:	ldr	r3, [r8, #12]
   1399c:	ldrb	r3, [r3]
   139a0:	cmp	r3, #109	; 0x6d
   139a4:	bne	13304 <__assert_fail@plt+0x1590>
   139a8:	b	1331c <__assert_fail@plt+0x15a8>
   139ac:	ldrb	r3, [r4, #4018]	; 0xfb2
   139b0:	cmp	r3, #0
   139b4:	bne	1306c <__assert_fail@plt+0x12f8>
   139b8:	b	13050 <__assert_fail@plt+0x12dc>
   139bc:	mov	r0, #2
   139c0:	bl	1ef3c <__assert_fail@plt+0xd1c8>
   139c4:	cmp	r0, #0
   139c8:	beq	13748 <__assert_fail@plt+0x19d4>
   139cc:	mov	r2, #2
   139d0:	mov	r0, #0
   139d4:	ldr	r1, [r8, #196]	; 0xc4
   139d8:	bl	11984 <dcgettext@plt>
   139dc:	mov	r2, #2
   139e0:	str	r0, [r8, #196]	; 0xc4
   139e4:	mov	r0, #0
   139e8:	ldr	r1, [r8, #200]	; 0xc8
   139ec:	bl	11984 <dcgettext@plt>
   139f0:	str	r0, [r8, #200]	; 0xc8
   139f4:	b	13748 <__assert_fail@plt+0x19d4>
   139f8:	movw	r2, #64216	; 0xfad8
   139fc:	movt	r2, #2
   13a00:	movw	r3, #64228	; 0xfae4
   13a04:	movt	r3, #2
   13a08:	strd	r2, [r8, #196]	; 0xc4
   13a0c:	b	13748 <__assert_fail@plt+0x19d4>
   13a10:	movw	r3, #64200	; 0xfac8
   13a14:	movt	r3, #2
   13a18:	str	r3, [r8, #196]	; 0xc4
   13a1c:	str	r3, [r8, #200]	; 0xc8
   13a20:	b	13748 <__assert_fail@plt+0x19d4>
   13a24:	movw	r3, #64176	; 0xfab0
   13a28:	movt	r3, #2
   13a2c:	str	r3, [r8, #196]	; 0xc4
   13a30:	str	r3, [r8, #200]	; 0xc8
   13a34:	b	13748 <__assert_fail@plt+0x19d4>
   13a38:	add	r3, r3, #1
   13a3c:	str	r3, [sp, #60]	; 0x3c
   13a40:	b	12fc4 <__assert_fail@plt+0x1250>
   13a44:	mov	r0, #20
   13a48:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   13a4c:	ldr	ip, [sp, #60]	; 0x3c
   13a50:	mov	r2, #1
   13a54:	mov	r9, r0
   13a58:	mov	r3, r0
   13a5c:	add	r1, sp, #60	; 0x3c
   13a60:	ldr	lr, [r4, #4020]	; 0xfb4
   13a64:	mov	r0, sl
   13a68:	str	r9, [r4, #4020]	; 0xfb4
   13a6c:	add	ip, ip, r2
   13a70:	str	ip, [sp, #60]	; 0x3c
   13a74:	ldr	ip, [sp, #64]	; 0x40
   13a78:	str	ip, [r9, #4]
   13a7c:	str	lr, [r9, #16]
   13a80:	bl	14208 <__assert_fail@plt+0x2494>
   13a84:	cmp	r0, #0
   13a88:	bne	13b40 <__assert_fail@plt+0x1dcc>
   13a8c:	ldr	r5, [sp, #24]
   13a90:	b	1355c <__assert_fail@plt+0x17e8>
   13a94:	mov	r0, #0
   13a98:	bl	1caf0 <__assert_fail@plt+0xad7c>
   13a9c:	ldr	r7, [sp, #24]
   13aa0:	mov	r5, r9
   13aa4:	ldr	r6, [sp, #28]
   13aa8:	ldr	r4, [sp, #32]
   13aac:	mov	r3, #0
   13ab0:	strb	r3, [r4, #4017]	; 0xfb1
   13ab4:	b	13010 <__assert_fail@plt+0x129c>
   13ab8:	mov	r1, r9
   13abc:	movw	r0, #64068	; 0xfa44
   13ac0:	movt	r0, #2
   13ac4:	ldr	r6, [pc, #-3356]	; 12db0 <__assert_fail@plt+0x103c>
   13ac8:	movw	r4, #4896	; 0x1320
   13acc:	movt	r4, #4
   13ad0:	movw	r5, #64104	; 0xfa68
   13ad4:	movt	r5, #2
   13ad8:	bl	1d42c <__assert_fail@plt+0xb6b8>
   13adc:	mov	r2, #5
   13ae0:	movw	r1, #64080	; 0xfa50
   13ae4:	movt	r1, #2
   13ae8:	mov	r0, #0
   13aec:	bl	11984 <dcgettext@plt>
   13af0:	ldr	r1, [r4]
   13af4:	bl	11864 <fputs_unlocked@plt>
   13af8:	movw	r3, #63448	; 0xf7d8
   13afc:	movt	r3, #2
   13b00:	mov	r2, r5
   13b04:	mov	r1, #1
   13b08:	ldr	r0, [r4]
   13b0c:	bl	11c18 <__fprintf_chk@plt>
   13b10:	ldr	r3, [r6, #4]!
   13b14:	cmp	r3, #0
   13b18:	bne	13b00 <__assert_fail@plt+0x1d8c>
   13b1c:	mov	r0, r3
   13b20:	movw	r1, #64120	; 0xfa78
   13b24:	movt	r1, #2
   13b28:	mov	r2, #5
   13b2c:	bl	11984 <dcgettext@plt>
   13b30:	ldr	r1, [r4]
   13b34:	bl	11864 <fputs_unlocked@plt>
   13b38:	mov	r0, #2
   13b3c:	bl	1caf0 <__assert_fail@plt+0xad7c>
   13b40:	ldr	r3, [sp, #60]	; 0x3c
   13b44:	add	r2, r3, #1
   13b48:	str	r2, [sp, #60]	; 0x3c
   13b4c:	ldrb	r3, [r3]
   13b50:	cmp	r3, #61	; 0x3d
   13b54:	bne	13a8c <__assert_fail@plt+0x1d18>
   13b58:	ldr	ip, [sp, #64]	; 0x40
   13b5c:	add	r3, r9, #8
   13b60:	mov	r2, #0
   13b64:	add	r1, sp, #60	; 0x3c
   13b68:	mov	r0, sl
   13b6c:	str	ip, [r9, #12]
   13b70:	bl	14208 <__assert_fail@plt+0x2494>
   13b74:	cmp	r0, #0
   13b78:	bne	12fc4 <__assert_fail@plt+0x1250>
   13b7c:	b	13a8c <__assert_fail@plt+0x1d18>
   13b80:	movw	r0, #64024	; 0xfa18
   13b84:	movt	r0, #2
   13b88:	bl	11ac8 <getenv@plt>
   13b8c:	subs	r9, r0, #0
   13b90:	bne	13114 <__assert_fail@plt+0x13a0>
   13b94:	movw	r9, #63460	; 0xf7e4
   13b98:	movt	r9, #2
   13b9c:	b	13154 <__assert_fail@plt+0x13e0>
   13ba0:	mov	r2, sl
   13ba4:	movw	r1, #21523	; 0x5413
   13ba8:	mov	r0, #1
   13bac:	bl	11a38 <ioctl@plt>
   13bb0:	cmp	r0, #0
   13bb4:	blt	1381c <__assert_fail@plt+0x1aa8>
   13bb8:	ldrh	r3, [sp, #66]	; 0x42
   13bbc:	cmp	r3, #0
   13bc0:	strne	r3, [sp, #40]	; 0x28
   13bc4:	bne	12330 <__assert_fail@plt+0x5bc>
   13bc8:	b	1381c <__assert_fail@plt+0x1aa8>
   13bcc:	movw	r0, #63744	; 0xf900
   13bd0:	movt	r0, #2
   13bd4:	bl	11ac8 <getenv@plt>
   13bd8:	cmp	r0, #0
   13bdc:	bne	13238 <__assert_fail@plt+0x14c4>
   13be0:	movw	r8, #4560	; 0x11d0
   13be4:	movt	r8, #4
   13be8:	b	13250 <__assert_fail@plt+0x14dc>
   13bec:	mov	r7, r9
   13bf0:	b	13740 <__assert_fail@plt+0x19cc>
   13bf4:	mov	r2, #5
   13bf8:	movw	r1, #63912	; 0xf9a8
   13bfc:	movt	r1, #2
   13c00:	mov	r0, #0
   13c04:	bl	11984 <dcgettext@plt>
   13c08:	mov	r7, r0
   13c0c:	ldr	r0, [sp, #24]
   13c10:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   13c14:	mov	r1, #0
   13c18:	mov	r3, r0
   13c1c:	mov	r2, r7
   13c20:	mov	r0, r1
   13c24:	bl	11a8c <error@plt>
   13c28:	b	1379c <__assert_fail@plt+0x1a28>
   13c2c:	movw	r1, #55200	; 0xd7a0
   13c30:	movt	r1, #2
   13c34:	ldr	r3, [pc, #-3712]	; 12dbc <__assert_fail@plt+0x1048>
   13c38:	movw	r0, #64456	; 0xfbc8
   13c3c:	movt	r0, #2
   13c40:	movw	r2, #1857	; 0x741
   13c44:	bl	11d74 <__assert_fail@plt>
   13c48:	mov	r2, #5
   13c4c:	movw	r1, #64036	; 0xfa24
   13c50:	movt	r1, #2
   13c54:	mov	r0, #0
   13c58:	bl	11984 <dcgettext@plt>
   13c5c:	mov	r4, r0
   13c60:	mov	r0, r9
   13c64:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   13c68:	mov	r3, r0
   13c6c:	mov	r2, r4
   13c70:	mov	r1, #0
   13c74:	mov	r0, #2
   13c78:	bl	11a8c <error@plt>
   13c7c:	ldr	ip, [r8]
   13c80:	mov	r2, #0
   13c84:	ldr	r3, [pc, #-3800]	; 12db4 <__assert_fail@plt+0x1040>
   13c88:	ldr	r1, [sp, #64]	; 0x40
   13c8c:	str	ip, [sp]
   13c90:	bl	2a728 <_obstack_memory_used@@Base+0x5670>
   13c94:	movw	r1, #55200	; 0xd7a0
   13c98:	movt	r1, #2
   13c9c:	ldr	r3, [pc, #-3820]	; 12db8 <__assert_fail@plt+0x1044>
   13ca0:	movw	r0, #64320	; 0xfb40
   13ca4:	movt	r0, #2
   13ca8:	movw	r2, #1053	; 0x41d
   13cac:	bl	11d74 <__assert_fail@plt>
   13cb0:	movw	r1, #55200	; 0xd7a0
   13cb4:	movt	r1, #2
   13cb8:	ldr	r3, [pc, #-3844]	; 12dbc <__assert_fail@plt+0x1048>
   13cbc:	movw	r0, #64376	; 0xfb78
   13cc0:	movt	r0, #2
   13cc4:	movw	r2, #1805	; 0x70d
   13cc8:	bl	11d74 <__assert_fail@plt>
   13ccc:	mov	r2, #5
   13cd0:	movw	r1, #63988	; 0xf9f4
   13cd4:	movt	r1, #2
   13cd8:	mov	r0, #0
   13cdc:	bl	11984 <dcgettext@plt>
   13ce0:	mov	r2, r0
   13ce4:	mov	r1, #0
   13ce8:	mov	r0, #2
   13cec:	bl	11a8c <error@plt>
   13cf0:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   13cf4:	mov	fp, #0
   13cf8:	mov	lr, #0
   13cfc:	pop	{r1}		; (ldr r1, [sp], #4)
   13d00:	mov	r2, sp
   13d04:	push	{r2}		; (str r2, [sp, #-4]!)
   13d08:	push	{r0}		; (str r0, [sp, #-4]!)
   13d0c:	ldr	ip, [pc, #16]	; 13d24 <__assert_fail@plt+0x1fb0>
   13d10:	push	{ip}		; (str ip, [sp, #-4]!)
   13d14:	ldr	r0, [pc, #12]	; 13d28 <__assert_fail@plt+0x1fb4>
   13d18:	ldr	r3, [pc, #12]	; 13d2c <__assert_fail@plt+0x1fb8>
   13d1c:	bl	11af8 <__libc_start_main@plt>
   13d20:	bl	11d2c <abort@plt>
   13d24:	andeq	fp, r2, r8, ror #31
   13d28:	andeq	r1, r1, r0, lsl #27
   13d2c:	andeq	fp, r2, r8, lsl #31
   13d30:	ldr	r3, [pc, #20]	; 13d4c <__assert_fail@plt+0x1fd8>
   13d34:	ldr	r2, [pc, #20]	; 13d50 <__assert_fail@plt+0x1fdc>
   13d38:	add	r3, pc, r3
   13d3c:	ldr	r2, [r3, r2]
   13d40:	cmp	r2, #0
   13d44:	bxeq	lr
   13d48:	b	11b34 <__gmon_start__@plt>
   13d4c:	andeq	sp, r2, r0, asr #5
   13d50:	andeq	r0, r0, r4, asr #3
   13d54:	ldr	r0, [pc, #24]	; 13d74 <__assert_fail@plt+0x2000>
   13d58:	ldr	r3, [pc, #24]	; 13d78 <__assert_fail@plt+0x2004>
   13d5c:	cmp	r3, r0
   13d60:	bxeq	lr
   13d64:	ldr	r3, [pc, #16]	; 13d7c <__assert_fail@plt+0x2008>
   13d68:	cmp	r3, #0
   13d6c:	bxeq	lr
   13d70:	bx	r3
   13d74:	andeq	r1, r4, ip, lsl #6
   13d78:	andeq	r1, r4, ip, lsl #6
   13d7c:	andeq	r0, r0, r0
   13d80:	ldr	r0, [pc, #36]	; 13dac <__assert_fail@plt+0x2038>
   13d84:	ldr	r1, [pc, #36]	; 13db0 <__assert_fail@plt+0x203c>
   13d88:	sub	r1, r1, r0
   13d8c:	asr	r1, r1, #2
   13d90:	add	r1, r1, r1, lsr #31
   13d94:	asrs	r1, r1, #1
   13d98:	bxeq	lr
   13d9c:	ldr	r3, [pc, #16]	; 13db4 <__assert_fail@plt+0x2040>
   13da0:	cmp	r3, #0
   13da4:	bxeq	lr
   13da8:	bx	r3
   13dac:	andeq	r1, r4, ip, lsl #6
   13db0:	andeq	r1, r4, ip, lsl #6
   13db4:	andeq	r0, r0, r0
   13db8:	push	{r4, lr}
   13dbc:	ldr	r4, [pc, #24]	; 13ddc <__assert_fail@plt+0x2068>
   13dc0:	ldrb	r3, [r4]
   13dc4:	cmp	r3, #0
   13dc8:	popne	{r4, pc}
   13dcc:	bl	13d54 <__assert_fail@plt+0x1fe0>
   13dd0:	mov	r3, #1
   13dd4:	strb	r3, [r4]
   13dd8:	pop	{r4, pc}
   13ddc:	andeq	r1, r4, ip, lsr #6
   13de0:	b	13d80 <__assert_fail@plt+0x200c>
   13de4:	mov	r2, r1
   13de8:	mov	r3, #0
   13dec:	str	r4, [sp, #-8]!
   13df0:	ldrd	r0, [r0]
   13df4:	str	lr, [sp, #4]
   13df8:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   13dfc:	ldr	r4, [sp]
   13e00:	add	sp, sp, #4
   13e04:	mov	r0, r2
   13e08:	pop	{pc}		; (ldr pc, [sp], #4)
   13e0c:	strd	r4, [sp, #-8]!
   13e10:	ldrd	r2, [r1]
   13e14:	ldrd	r4, [r0]
   13e18:	cmp	r5, r3
   13e1c:	cmpeq	r4, r2
   13e20:	movne	r0, #0
   13e24:	bne	13e40 <__assert_fail@plt+0x20cc>
   13e28:	ldrd	r4, [r0, #8]
   13e2c:	ldrd	r2, [r1, #8]
   13e30:	cmp	r5, r3
   13e34:	cmpeq	r4, r2
   13e38:	moveq	r0, #1
   13e3c:	movne	r0, #0
   13e40:	ldrd	r4, [sp]
   13e44:	add	sp, sp, #8
   13e48:	bx	lr
   13e4c:	movw	r3, #4912	; 0x1330
   13e50:	movt	r3, #4
   13e54:	ldr	r2, [r3]
   13e58:	cmp	r2, #0
   13e5c:	streq	r0, [r3]
   13e60:	bx	lr
   13e64:	b	1ee98 <__assert_fail@plt+0xd124>
   13e68:	movw	ip, #316	; 0x13c
   13e6c:	movt	ip, #3
   13e70:	push	{lr}		; (str lr, [sp, #-4]!)
   13e74:	sub	sp, sp, #20
   13e78:	mov	r2, #0
   13e7c:	add	r3, sp, #8
   13e80:	mov	r1, r2
   13e84:	str	ip, [sp]
   13e88:	bl	2a7b8 <_obstack_memory_used@@Base+0x5700>
   13e8c:	cmp	r0, #0
   13e90:	beq	13ea8 <__assert_fail@plt+0x2134>
   13e94:	cmp	r0, #1
   13e98:	moveq	r0, #0
   13e9c:	mvnne	r0, #0
   13ea0:	add	sp, sp, #20
   13ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ea8:	ldrd	r0, [sp, #8]
   13eac:	mov	r3, #0
   13eb0:	mvn	r2, #-2147483648	; 0x80000000
   13eb4:	cmp	r1, r3
   13eb8:	cmpeq	r0, r2
   13ebc:	movhi	r0, #0
   13ec0:	add	sp, sp, #20
   13ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ec8:	movw	r3, #4560	; 0x11d0
   13ecc:	movt	r3, #4
   13ed0:	ldr	r2, [r3, r0, lsl #3]
   13ed4:	cmp	r2, #0
   13ed8:	beq	13efc <__assert_fail@plt+0x2188>
   13edc:	add	r3, r3, r0, lsl #3
   13ee0:	cmp	r2, #1
   13ee4:	ldr	r0, [r3, #4]
   13ee8:	beq	13f04 <__assert_fail@plt+0x2190>
   13eec:	cmp	r2, #2
   13ef0:	beq	13f14 <__assert_fail@plt+0x21a0>
   13ef4:	mov	r0, #1
   13ef8:	bx	lr
   13efc:	mov	r0, r2
   13f00:	bx	lr
   13f04:	ldrb	r2, [r0]
   13f08:	subs	r0, r2, #48	; 0x30
   13f0c:	movne	r0, #1
   13f10:	bx	lr
   13f14:	movw	r1, #55176	; 0xd788
   13f18:	movt	r1, #2
   13f1c:	str	r4, [sp, #-8]!
   13f20:	str	lr, [sp, #4]
   13f24:	bl	11d20 <strncmp@plt>
   13f28:	adds	r0, r0, #0
   13f2c:	ldr	r4, [sp]
   13f30:	add	sp, sp, #4
   13f34:	movne	r0, #1
   13f38:	pop	{pc}		; (ldr pc, [sp], #4)
   13f3c:	str	r4, [sp, #-8]!
   13f40:	movw	r4, #4560	; 0x11d0
   13f44:	movt	r4, #4
   13f48:	ldrsb	r0, [r4, #192]	; 0xc0
   13f4c:	str	lr, [sp, #4]
   13f50:	cmp	r0, #0
   13f54:	blt	13f68 <__assert_fail@plt+0x21f4>
   13f58:	ldr	r4, [sp]
   13f5c:	add	sp, sp, #4
   13f60:	and	r0, r0, #1
   13f64:	pop	{pc}		; (ldr pc, [sp], #4)
   13f68:	mov	r0, #1
   13f6c:	bl	11d08 <isatty@plt>
   13f70:	sxtb	r0, r0
   13f74:	strb	r0, [r4, #192]	; 0xc0
   13f78:	and	r0, r0, #1
   13f7c:	ldr	r4, [sp]
   13f80:	add	sp, sp, #4
   13f84:	pop	{pc}		; (ldr pc, [sp], #4)
   13f88:	ldr	r3, [pc, #596]	; 141e4 <__assert_fail@plt+0x2470>
   13f8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f90:	strd	r6, [sp, #8]
   13f94:	strd	r8, [sp, #16]
   13f98:	strd	sl, [sp, #24]
   13f9c:	str	lr, [sp, #32]
   13fa0:	sub	sp, sp, #1600	; 0x640
   13fa4:	add	ip, r3, #8
   13fa8:	sub	sp, sp, #4
   13fac:	mov	r1, r3
   13fb0:	add	r2, sp, #56	; 0x38
   13fb4:	mov	r0, r2
   13fb8:	strd	r2, [sp, #32]
   13fbc:	ldr	r2, [r1], #4
   13fc0:	ldrb	r3, [r2]
   13fc4:	cmp	r3, #0
   13fc8:	bne	13fdc <__assert_fail@plt+0x2268>
   13fcc:	b	140cc <__assert_fail@plt+0x2358>
   13fd0:	cmp	r3, #0
   13fd4:	add	r2, r2, #1
   13fd8:	beq	140cc <__assert_fail@plt+0x2358>
   13fdc:	cmp	r3, #37	; 0x25
   13fe0:	ldrb	r3, [r2, #1]
   13fe4:	bne	13fd0 <__assert_fail@plt+0x225c>
   13fe8:	cmp	r3, #37	; 0x25
   13fec:	beq	140b8 <__assert_fail@plt+0x2344>
   13ff0:	cmp	r3, #98	; 0x62
   13ff4:	bne	13fd0 <__assert_fail@plt+0x225c>
   13ff8:	cmp	r1, ip
   13ffc:	str	r2, [r0], #4
   14000:	bne	13fbc <__assert_fail@plt+0x2248>
   14004:	ldr	r3, [sp, #56]	; 0x38
   14008:	cmp	r3, #0
   1400c:	beq	14104 <__assert_fail@plt+0x2390>
   14010:	mov	fp, #26
   14014:	movt	fp, #2
   14018:	mov	r9, #12
   1401c:	add	r6, sp, #64	; 0x40
   14020:	mov	r4, #14
   14024:	movt	r4, #2
   14028:	mov	r5, #0
   1402c:	sub	r7, r6, #12
   14030:	mov	r0, r4
   14034:	str	r9, [sp, #52]	; 0x34
   14038:	add	r4, r4, #1
   1403c:	bl	11c90 <nl_langinfo@plt>
   14040:	mov	r1, #37	; 0x25
   14044:	mov	sl, r0
   14048:	bl	11ba0 <strchr@plt>
   1404c:	subs	r8, r0, #0
   14050:	bne	140e4 <__assert_fail@plt+0x2370>
   14054:	bl	11b58 <__ctype_b_loc@plt>
   14058:	str	r8, [sp, #4]
   1405c:	mov	r2, #128	; 0x80
   14060:	mov	r1, r6
   14064:	ldrb	ip, [sl]
   14068:	mov	r3, r7
   1406c:	add	r6, r6, r2
   14070:	ldr	lr, [r0]
   14074:	mov	r0, sl
   14078:	lsl	ip, ip, #1
   1407c:	ldrh	ip, [lr, ip]
   14080:	ubfx	ip, ip, #11, #1
   14084:	str	ip, [sp]
   14088:	bl	21ddc <__assert_fail@plt+0x10068>
   1408c:	cmp	r0, #127	; 0x7f
   14090:	bhi	140e4 <__assert_fail@plt+0x2370>
   14094:	ldr	r3, [sp, #52]	; 0x34
   14098:	cmp	r5, r3
   1409c:	movcc	r5, r3
   140a0:	cmp	r4, fp
   140a4:	bne	14030 <__assert_fail@plt+0x22bc>
   140a8:	cmp	r9, r5
   140ac:	bls	14114 <__assert_fail@plt+0x23a0>
   140b0:	mov	r9, r5
   140b4:	b	1401c <__assert_fail@plt+0x22a8>
   140b8:	ldrb	r3, [r2, #2]
   140bc:	add	r2, r2, #1
   140c0:	add	r2, r2, #1
   140c4:	cmp	r3, #0
   140c8:	bne	13fdc <__assert_fail@plt+0x2268>
   140cc:	mov	r2, r3
   140d0:	b	13ff8 <__assert_fail@plt+0x2284>
   140d4:	ldr	r2, [sp, #40]	; 0x28
   140d8:	movw	r3, #4912	; 0x1330
   140dc:	movt	r3, #4
   140e0:	strb	r2, [r3, #3076]	; 0xc04
   140e4:	add	sp, sp, #1600	; 0x640
   140e8:	add	sp, sp, #4
   140ec:	ldrd	r4, [sp]
   140f0:	ldrd	r6, [sp, #8]
   140f4:	ldrd	r8, [sp, #16]
   140f8:	ldrd	sl, [sp, #24]
   140fc:	add	sp, sp, #32
   14100:	pop	{pc}		; (ldr pc, [sp], #4)
   14104:	ldr	r3, [sp, #60]	; 0x3c
   14108:	cmp	r3, #0
   1410c:	bne	14010 <__assert_fail@plt+0x229c>
   14110:	b	140e4 <__assert_fail@plt+0x2370>
   14114:	movw	r3, #63820	; 0xf94c
   14118:	movt	r3, #2
   1411c:	str	r8, [sp, #40]	; 0x28
   14120:	movw	fp, #55180	; 0xd78c
   14124:	movt	fp, #2
   14128:	str	r3, [sp, #44]	; 0x2c
   1412c:	add	r9, sp, #1600	; 0x640
   14130:	ldr	r3, [pc, #176]	; 141e8 <__assert_fail@plt+0x2474>
   14134:	str	r3, [sp, #28]
   14138:	add	r4, sp, #64	; 0x40
   1413c:	ldr	r5, [sp, #28]
   14140:	ldr	r3, [sp, #36]	; 0x24
   14144:	ldr	r8, [r3], #4
   14148:	str	r3, [sp, #36]	; 0x24
   1414c:	ldr	r3, [sp, #32]
   14150:	ldr	r7, [r3], #4
   14154:	sub	r6, r7, r8
   14158:	add	sl, r7, #2
   1415c:	str	r3, [sp, #32]
   14160:	b	14198 <__assert_fail@plt+0x2424>
   14164:	cmp	r6, #128	; 0x80
   14168:	bgt	140e4 <__assert_fail@plt+0x2370>
   1416c:	str	fp, [sp]
   14170:	stmib	sp, {r6, r8}
   14174:	str	r4, [sp, #12]
   14178:	str	sl, [sp, #16]
   1417c:	bl	11d5c <__snprintf_chk@plt>
   14180:	cmp	r0, #127	; 0x7f
   14184:	add	r4, r4, #128	; 0x80
   14188:	bhi	140e4 <__assert_fail@plt+0x2370>
   1418c:	cmp	r9, r4
   14190:	add	r5, r5, #128	; 0x80
   14194:	beq	141c0 <__assert_fail@plt+0x244c>
   14198:	cmp	r7, #0
   1419c:	mov	r0, r5
   141a0:	mvn	r3, #0
   141a4:	mov	r2, #1
   141a8:	mov	r1, #128	; 0x80
   141ac:	bne	14164 <__assert_fail@plt+0x23f0>
   141b0:	mov	r3, r8
   141b4:	ldr	r2, [sp, #44]	; 0x2c
   141b8:	bl	11bd0 <snprintf@plt>
   141bc:	b	14180 <__assert_fail@plt+0x240c>
   141c0:	ldr	r3, [sp, #40]	; 0x28
   141c4:	cmp	r3, #1
   141c8:	ldr	r3, [sp, #28]
   141cc:	add	r3, r3, #1536	; 0x600
   141d0:	str	r3, [sp, #28]
   141d4:	beq	140d4 <__assert_fail@plt+0x2360>
   141d8:	mov	r3, #1
   141dc:	str	r3, [sp, #40]	; 0x28
   141e0:	b	14138 <__assert_fail@plt+0x23c4>
   141e4:	muleq	r4, r4, r2
   141e8:	andeq	r1, r4, r4, lsr r3
   141ec:	ldr	r0, [r0]
   141f0:	ldr	r1, [r1]
   141f4:	b	118a0 <strcmp@plt>
   141f8:	ldr	r3, [r1]
   141fc:	ldr	r1, [r0]
   14200:	mov	r0, r3
   14204:	b	118a0 <strcmp@plt>
   14208:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1420c:	mov	r5, #0
   14210:	strd	r6, [sp, #8]
   14214:	mov	r6, r0
   14218:	mov	r0, #127	; 0x7f
   1421c:	str	r8, [sp, #16]
   14220:	str	lr, [sp, #20]
   14224:	ldr	ip, [r1]
   14228:	ldr	lr, [r6]
   1422c:	b	14240 <__assert_fail@plt+0x24cc>
   14230:	and	r4, r4, #31
   14234:	add	ip, ip, #2
   14238:	add	r5, r5, #1
   1423c:	strb	r4, [lr], #1
   14240:	ldrb	r4, [ip]
   14244:	cmp	r4, #61	; 0x3d
   14248:	beq	144c4 <__assert_fail@plt+0x2750>
   1424c:	bls	1449c <__assert_fail@plt+0x2728>
   14250:	cmp	r4, #92	; 0x5c
   14254:	beq	142a4 <__assert_fail@plt+0x2530>
   14258:	cmp	r4, #94	; 0x5e
   1425c:	bne	144ac <__assert_fail@plt+0x2738>
   14260:	ldrb	r4, [ip, #1]
   14264:	add	r8, ip, #1
   14268:	sub	r7, r4, #64	; 0x40
   1426c:	cmp	r7, #62	; 0x3e
   14270:	bls	14230 <__assert_fail@plt+0x24bc>
   14274:	cmp	r4, #63	; 0x3f
   14278:	beq	144dc <__assert_fail@plt+0x2768>
   1427c:	mov	ip, r8
   14280:	mov	r0, #0
   14284:	ldr	r8, [sp, #16]
   14288:	str	lr, [r6]
   1428c:	str	ip, [r1]
   14290:	str	r5, [r3]
   14294:	ldrd	r4, [sp]
   14298:	ldrd	r6, [sp, #8]
   1429c:	add	sp, sp, #20
   142a0:	pop	{pc}		; (ldr pc, [sp], #4)
   142a4:	ldrb	r4, [ip, #1]
   142a8:	add	ip, ip, #2
   142ac:	cmp	r4, #120	; 0x78
   142b0:	ldrls	pc, [pc, r4, lsl #2]
   142b4:	b	14238 <__assert_fail@plt+0x24c4>
   142b8:	andeq	r4, r1, r0, lsl #5
   142bc:	andeq	r4, r1, r8, lsr r2
   142c0:	andeq	r4, r1, r8, lsr r2
   142c4:	andeq	r4, r1, r8, lsr r2
   142c8:	andeq	r4, r1, r8, lsr r2
   142cc:	andeq	r4, r1, r8, lsr r2
   142d0:	andeq	r4, r1, r8, lsr r2
   142d4:	andeq	r4, r1, r8, lsr r2
   142d8:	andeq	r4, r1, r8, lsr r2
   142dc:	andeq	r4, r1, r8, lsr r2
   142e0:	andeq	r4, r1, r8, lsr r2
   142e4:	andeq	r4, r1, r8, lsr r2
   142e8:	andeq	r4, r1, r8, lsr r2
   142ec:	andeq	r4, r1, r8, lsr r2
   142f0:	andeq	r4, r1, r8, lsr r2
   142f4:	andeq	r4, r1, r8, lsr r2
   142f8:	andeq	r4, r1, r8, lsr r2
   142fc:	andeq	r4, r1, r8, lsr r2
   14300:	andeq	r4, r1, r8, lsr r2
   14304:	andeq	r4, r1, r8, lsr r2
   14308:	andeq	r4, r1, r8, lsr r2
   1430c:	andeq	r4, r1, r8, lsr r2
   14310:	andeq	r4, r1, r8, lsr r2
   14314:	andeq	r4, r1, r8, lsr r2
   14318:	andeq	r4, r1, r8, lsr r2
   1431c:	andeq	r4, r1, r8, lsr r2
   14320:	andeq	r4, r1, r8, lsr r2
   14324:	andeq	r4, r1, r8, lsr r2
   14328:	andeq	r4, r1, r8, lsr r2
   1432c:	andeq	r4, r1, r8, lsr r2
   14330:	andeq	r4, r1, r8, lsr r2
   14334:	andeq	r4, r1, r8, lsr r2
   14338:	andeq	r4, r1, r8, lsr r2
   1433c:	andeq	r4, r1, r8, lsr r2
   14340:	andeq	r4, r1, r8, lsr r2
   14344:	andeq	r4, r1, r8, lsr r2
   14348:	andeq	r4, r1, r8, lsr r2
   1434c:	andeq	r4, r1, r8, lsr r2
   14350:	andeq	r4, r1, r8, lsr r2
   14354:	andeq	r4, r1, r8, lsr r2
   14358:	andeq	r4, r1, r8, lsr r2
   1435c:	andeq	r4, r1, r8, lsr r2
   14360:	andeq	r4, r1, r8, lsr r2
   14364:	andeq	r4, r1, r8, lsr r2
   14368:	andeq	r4, r1, r8, lsr r2
   1436c:	andeq	r4, r1, r8, lsr r2
   14370:	andeq	r4, r1, r8, lsr r2
   14374:	andeq	r4, r1, r8, lsr r2
   14378:	andeq	r4, r1, r8, asr r6
   1437c:	andeq	r4, r1, r8, asr r6
   14380:	andeq	r4, r1, r8, asr r6
   14384:	andeq	r4, r1, r8, asr r6
   14388:	andeq	r4, r1, r8, asr r6
   1438c:	andeq	r4, r1, r8, asr r6
   14390:	andeq	r4, r1, r8, asr r6
   14394:	andeq	r4, r1, r8, asr r6
   14398:	andeq	r4, r1, r8, lsr r2
   1439c:	andeq	r4, r1, r8, lsr r2
   143a0:	andeq	r4, r1, r8, lsr r2
   143a4:	andeq	r4, r1, r8, lsr r2
   143a8:	andeq	r4, r1, r8, lsr r2
   143ac:	andeq	r4, r1, r8, lsr r2
   143b0:	andeq	r4, r1, r8, lsr r2
   143b4:	andeq	r4, r1, r0, asr r6
   143b8:	andeq	r4, r1, r8, lsr r2
   143bc:	andeq	r4, r1, r8, lsr r2
   143c0:	andeq	r4, r1, r8, lsr r2
   143c4:	andeq	r4, r1, r8, lsr r2
   143c8:	andeq	r4, r1, r8, lsr r2
   143cc:	andeq	r4, r1, r8, lsr r2
   143d0:	andeq	r4, r1, r8, lsr r2
   143d4:	andeq	r4, r1, r8, lsr r2
   143d8:	andeq	r4, r1, r8, lsr r2
   143dc:	andeq	r4, r1, r8, lsr r2
   143e0:	andeq	r4, r1, r8, lsr r2
   143e4:	andeq	r4, r1, r8, lsr r2
   143e8:	andeq	r4, r1, r8, lsr r2
   143ec:	andeq	r4, r1, r8, lsr r2
   143f0:	andeq	r4, r1, r8, lsr r2
   143f4:	andeq	r4, r1, r8, lsr r2
   143f8:	andeq	r4, r1, r8, lsr r2
   143fc:	andeq	r4, r1, r8, lsr r2
   14400:	andeq	r4, r1, r8, lsr r2
   14404:	andeq	r4, r1, r8, lsr r2
   14408:	andeq	r4, r1, r8, lsr r2
   1440c:	andeq	r4, r1, r8, lsr r2
   14410:	andeq	r4, r1, r8, lsr r2
   14414:	andeq	r4, r1, r8, lsr r2
   14418:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1441c:	andeq	r4, r1, r8, lsr r2
   14420:	andeq	r4, r1, r8, lsr r2
   14424:	andeq	r4, r1, r8, lsr r2
   14428:	andeq	r4, r1, r8, lsr r2
   1442c:	andeq	r4, r1, r8, lsr r2
   14430:	andeq	r4, r1, r8, lsr r2
   14434:	andeq	r4, r1, r8, asr #12
   14438:	andeq	r4, r1, r8, lsr r2
   1443c:	andeq	r4, r1, ip, ror #9
   14440:	andeq	r4, r1, r0, asr #12
   14444:	andeq	r4, r1, r8, lsr r2
   14448:	andeq	r4, r1, r8, lsr r2
   1444c:	andeq	r4, r1, r8, lsr r6
   14450:	andeq	r4, r1, r0, lsr r6
   14454:	andeq	r4, r1, r8, lsr r2
   14458:	andeq	r4, r1, r8, lsr r2
   1445c:	andeq	r4, r1, r8, lsr r2
   14460:	andeq	r4, r1, r8, lsr r2
   14464:	andeq	r4, r1, r8, lsr r2
   14468:	andeq	r4, r1, r8, lsr r2
   1446c:	andeq	r4, r1, r8, lsr r2
   14470:	muleq	r1, ip, r6
   14474:	andeq	r4, r1, r8, lsr r2
   14478:	andeq	r4, r1, r8, lsr r2
   1447c:	andeq	r4, r1, r8, lsr r2
   14480:	muleq	r1, r4, r6
   14484:	andeq	r4, r1, r8, lsr r2
   14488:	andeq	r4, r1, ip, lsl #13
   1448c:	andeq	r4, r1, r8, lsr r2
   14490:	andeq	r4, r1, r4, lsl #13
   14494:	andeq	r4, r1, r8, lsr r2
   14498:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1449c:	cmp	r4, #0
   144a0:	beq	144d4 <__assert_fail@plt+0x2760>
   144a4:	cmp	r4, #58	; 0x3a
   144a8:	beq	144d4 <__assert_fail@plt+0x2760>
   144ac:	add	ip, ip, #1
   144b0:	strb	r4, [lr], #1
   144b4:	add	r5, r5, #1
   144b8:	ldrb	r4, [ip]
   144bc:	cmp	r4, #61	; 0x3d
   144c0:	bne	1424c <__assert_fail@plt+0x24d8>
   144c4:	cmp	r2, #0
   144c8:	beq	144ac <__assert_fail@plt+0x2738>
   144cc:	mov	r0, r2
   144d0:	b	14284 <__assert_fail@plt+0x2510>
   144d4:	mov	r0, #1
   144d8:	b	14284 <__assert_fail@plt+0x2510>
   144dc:	add	r5, r5, #1
   144e0:	mov	ip, r8
   144e4:	strb	r0, [lr], #1
   144e8:	b	14240 <__assert_fail@plt+0x24cc>
   144ec:	mov	r4, #7
   144f0:	b	14238 <__assert_fail@plt+0x24c4>
   144f4:	mov	r8, #0
   144f8:	ldrb	r4, [ip]
   144fc:	sub	r7, r4, #48	; 0x30
   14500:	cmp	r7, #54	; 0x36
   14504:	ldrls	pc, [pc, r7, lsl #2]
   14508:	b	14624 <__assert_fail@plt+0x28b0>
   1450c:	andeq	r4, r1, r0, lsl r6
   14510:	andeq	r4, r1, r0, lsl r6
   14514:	andeq	r4, r1, r0, lsl r6
   14518:	andeq	r4, r1, r0, lsl r6
   1451c:	andeq	r4, r1, r0, lsl r6
   14520:	andeq	r4, r1, r0, lsl r6
   14524:	andeq	r4, r1, r0, lsl r6
   14528:	andeq	r4, r1, r0, lsl r6
   1452c:	andeq	r4, r1, r0, lsl r6
   14530:	andeq	r4, r1, r0, lsl r6
   14534:	andeq	r4, r1, r4, lsr #12
   14538:	andeq	r4, r1, r4, lsr #12
   1453c:	andeq	r4, r1, r4, lsr #12
   14540:	andeq	r4, r1, r4, lsr #12
   14544:	andeq	r4, r1, r4, lsr #12
   14548:	andeq	r4, r1, r4, lsr #12
   1454c:	andeq	r4, r1, r4, lsr #12
   14550:	strdeq	r4, [r1], -ip
   14554:	strdeq	r4, [r1], -ip
   14558:	strdeq	r4, [r1], -ip
   1455c:	strdeq	r4, [r1], -ip
   14560:	strdeq	r4, [r1], -ip
   14564:	strdeq	r4, [r1], -ip
   14568:	andeq	r4, r1, r4, lsr #12
   1456c:	andeq	r4, r1, r4, lsr #12
   14570:	andeq	r4, r1, r4, lsr #12
   14574:	andeq	r4, r1, r4, lsr #12
   14578:	andeq	r4, r1, r4, lsr #12
   1457c:	andeq	r4, r1, r4, lsr #12
   14580:	andeq	r4, r1, r4, lsr #12
   14584:	andeq	r4, r1, r4, lsr #12
   14588:	andeq	r4, r1, r4, lsr #12
   1458c:	andeq	r4, r1, r4, lsr #12
   14590:	andeq	r4, r1, r4, lsr #12
   14594:	andeq	r4, r1, r4, lsr #12
   14598:	andeq	r4, r1, r4, lsr #12
   1459c:	andeq	r4, r1, r4, lsr #12
   145a0:	andeq	r4, r1, r4, lsr #12
   145a4:	andeq	r4, r1, r4, lsr #12
   145a8:	andeq	r4, r1, r4, lsr #12
   145ac:	andeq	r4, r1, r4, lsr #12
   145b0:	andeq	r4, r1, r4, lsr #12
   145b4:	andeq	r4, r1, r4, lsr #12
   145b8:	andeq	r4, r1, r4, lsr #12
   145bc:	andeq	r4, r1, r4, lsr #12
   145c0:	andeq	r4, r1, r4, lsr #12
   145c4:	andeq	r4, r1, r4, lsr #12
   145c8:	andeq	r4, r1, r4, lsr #12
   145cc:	andeq	r4, r1, r4, lsr #12
   145d0:	andeq	r4, r1, r8, ror #11
   145d4:	andeq	r4, r1, r8, ror #11
   145d8:	andeq	r4, r1, r8, ror #11
   145dc:	andeq	r4, r1, r8, ror #11
   145e0:	andeq	r4, r1, r8, ror #11
   145e4:	andeq	r4, r1, r8, ror #11
   145e8:	add	r4, r4, r8, lsl #4
   145ec:	add	ip, ip, #1
   145f0:	sub	r4, r4, #87	; 0x57
   145f4:	and	r8, r4, #255	; 0xff
   145f8:	b	144f8 <__assert_fail@plt+0x2784>
   145fc:	add	r4, r4, r8, lsl #4
   14600:	add	ip, ip, #1
   14604:	sub	r4, r4, #55	; 0x37
   14608:	and	r8, r4, #255	; 0xff
   1460c:	b	144f8 <__assert_fail@plt+0x2784>
   14610:	add	r4, r4, r8, lsl #4
   14614:	add	ip, ip, #1
   14618:	sub	r4, r4, #48	; 0x30
   1461c:	and	r8, r4, #255	; 0xff
   14620:	b	144f8 <__assert_fail@plt+0x2784>
   14624:	add	r5, r5, #1
   14628:	strb	r8, [lr], #1
   1462c:	b	14240 <__assert_fail@plt+0x24cc>
   14630:	mov	r4, #12
   14634:	b	14238 <__assert_fail@plt+0x24c4>
   14638:	mov	r4, #27
   1463c:	b	14238 <__assert_fail@plt+0x24c4>
   14640:	mov	r4, #8
   14644:	b	14238 <__assert_fail@plt+0x24c4>
   14648:	mov	r4, #32
   1464c:	b	14238 <__assert_fail@plt+0x24c4>
   14650:	mov	r4, #127	; 0x7f
   14654:	b	14238 <__assert_fail@plt+0x24c4>
   14658:	sub	r4, r4, #48	; 0x30
   1465c:	uxtb	r4, r4
   14660:	ldrb	r7, [ip]
   14664:	add	r8, r7, r4, lsl #3
   14668:	sub	r7, r7, #48	; 0x30
   1466c:	cmp	r7, #7
   14670:	sub	r8, r8, #48	; 0x30
   14674:	bhi	14238 <__assert_fail@plt+0x24c4>
   14678:	add	ip, ip, #1
   1467c:	and	r4, r8, #255	; 0xff
   14680:	b	14660 <__assert_fail@plt+0x28ec>
   14684:	mov	r4, #11
   14688:	b	14238 <__assert_fail@plt+0x24c4>
   1468c:	mov	r4, #9
   14690:	b	14238 <__assert_fail@plt+0x24c4>
   14694:	mov	r4, #13
   14698:	b	14238 <__assert_fail@plt+0x24c4>
   1469c:	mov	r4, #10
   146a0:	b	14238 <__assert_fail@plt+0x24c4>
   146a4:	movw	ip, #4912	; 0x1330
   146a8:	movt	ip, #4
   146ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   146b0:	strd	r6, [sp, #8]
   146b4:	movw	r0, #1282	; 0x502
   146b8:	movw	r5, #1794	; 0x702
   146bc:	ldrb	r7, [ip, #3077]	; 0xc05
   146c0:	movw	r6, #770	; 0x302
   146c4:	movw	r3, #514	; 0x202
   146c8:	movw	r1, #1538	; 0x602
   146cc:	movw	r2, #1026	; 0x402
   146d0:	str	r8, [sp, #16]
   146d4:	ldrb	r4, [ip, #3078]	; 0xc06
   146d8:	str	lr, [sp, #20]
   146dc:	ldr	lr, [ip, #3080]	; 0xc08
   146e0:	cmp	r7, #0
   146e4:	movne	r2, r0
   146e8:	movne	r3, r6
   146ec:	movne	r1, r5
   146f0:	movw	r0, #258	; 0x102
   146f4:	moveq	r0, #2
   146f8:	cmp	r4, #0
   146fc:	movne	r3, r1
   14700:	movne	r0, r2
   14704:	cmp	lr, #0
   14708:	bne	147bc <__assert_fail@plt+0x2a48>
   1470c:	ldr	r1, [ip, #3084]	; 0xc0c
   14710:	cmp	r1, #3
   14714:	bhi	147f4 <__assert_fail@plt+0x2a80>
   14718:	movw	r3, #4560	; 0x11d0
   1471c:	movt	r3, #4
   14720:	movw	r2, #49168	; 0xc010
   14724:	movt	r2, #2
   14728:	ldrb	lr, [r3, #204]	; 0xcc
   1472c:	ldr	r2, [r2, r1, lsl #2]
   14730:	cmp	lr, #0
   14734:	orr	r0, r0, r2
   14738:	bne	147b4 <__assert_fail@plt+0x2a40>
   1473c:	ldrb	r1, [ip, #3088]	; 0xc10
   14740:	cmp	r1, #0
   14744:	orreq	r0, r0, #516	; 0x204
   14748:	bne	147b4 <__assert_fail@plt+0x2a40>
   1474c:	ldrb	r3, [r3, #205]	; 0xcd
   14750:	cmp	r3, #0
   14754:	ldr	r3, [ip, #3092]	; 0xc14
   14758:	orrne	r0, r0, #16
   1475c:	cmp	r3, #6
   14760:	ldrls	pc, [pc, r3, lsl #2]
   14764:	b	147f4 <__assert_fail@plt+0x2a80>
   14768:	andeq	r4, r1, r0, lsr #15
   1476c:	andeq	r4, r1, r0, lsr #15
   14770:	andeq	r4, r1, r0, lsr #15
   14774:	andeq	r4, r1, r8, ror #15
   14778:	andeq	r4, r1, r0, lsr #15
   1477c:	muleq	r1, ip, r7
   14780:	andeq	r4, r1, r0, lsr #15
   14784:	ldr	r2, [ip, #3084]	; 0xc0c
   14788:	cmp	r2, #3
   1478c:	bhi	147f4 <__assert_fail@plt+0x2a80>
   14790:	movw	r3, #49168	; 0xc010
   14794:	movt	r3, #2
   14798:	ldr	r2, [r3, r2, lsl #2]
   1479c:	orr	r0, r0, r2
   147a0:	ldrd	r4, [sp]
   147a4:	ldrd	r6, [sp, #8]
   147a8:	ldr	r8, [sp, #16]
   147ac:	add	sp, sp, #20
   147b0:	pop	{pc}		; (ldr pc, [sp], #4)
   147b4:	orr	r0, r0, #524	; 0x20c
   147b8:	b	1474c <__assert_fail@plt+0x29d8>
   147bc:	ldr	r2, [ip, #3092]	; 0xc14
   147c0:	cmp	r2, #6
   147c4:	ldrls	pc, [pc, r2, lsl #2]
   147c8:	b	147f4 <__assert_fail@plt+0x2a80>
   147cc:	andeq	r4, r1, r0, lsr #15
   147d0:	andeq	r4, r1, r0, lsr #15
   147d4:	andeq	r4, r1, r0, lsr #15
   147d8:	andeq	r4, r1, ip, ror #15
   147dc:	andeq	r4, r1, r0, lsr #15
   147e0:	andeq	r4, r1, r4, lsl #15
   147e4:	andeq	r4, r1, r0, lsr #15
   147e8:	orr	r3, r0, #512	; 0x200
   147ec:	mov	r0, r3
   147f0:	b	147a0 <__assert_fail@plt+0x2a2c>
   147f4:	bl	11d2c <abort@plt>
   147f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   147fc:	strd	r6, [sp, #8]
   14800:	strd	r8, [sp, #16]
   14804:	mov	r8, r2
   14808:	mov	r2, r3
   1480c:	str	sl, [sp, #24]
   14810:	str	lr, [sp, #28]
   14814:	sub	sp, sp, #264	; 0x108
   14818:	add	r9, sp, #8
   1481c:	ldr	r3, [sp, #296]	; 0x128
   14820:	str	r9, [sp]
   14824:	bl	11c3c <statx@plt>
   14828:	cmp	r0, #0
   1482c:	bge	1484c <__assert_fail@plt+0x2ad8>
   14830:	add	sp, sp, #264	; 0x108
   14834:	ldrd	r4, [sp]
   14838:	ldrd	r6, [sp, #8]
   1483c:	ldrd	r8, [sp, #16]
   14840:	ldr	sl, [sp, #24]
   14844:	add	sp, sp, #28
   14848:	pop	{pc}		; (ldr pc, [sp], #4)
   1484c:	mov	r6, #65280	; 0xff00
   14850:	movt	r6, #15
   14854:	ldr	sl, [sp, #80]	; 0x50
   14858:	mov	r1, #61440	; 0xf000
   1485c:	movt	r1, #65535	; 0xffff
   14860:	ldr	r3, [sp, #296]	; 0x128
   14864:	mov	r5, #0
   14868:	movt	r5, #65520	; 0xfff0
   1486c:	ldr	lr, [sp, #144]	; 0x90
   14870:	str	sl, [r8, #76]	; 0x4c
   14874:	ldr	r2, [sp, #148]	; 0x94
   14878:	tst	r3, #2048	; 0x800
   1487c:	ldr	r4, [sp, #136]	; 0x88
   14880:	and	ip, r6, lr, lsl #8
   14884:	and	lr, lr, r1
   14888:	ldr	r3, [sp, #140]	; 0x8c
   1488c:	orr	lr, lr, r2, lsr #20
   14890:	uxtb	r7, r2
   14894:	and	r2, r5, r2, lsl #12
   14898:	orr	r7, r7, ip
   1489c:	ldr	ip, [sp, #12]
   148a0:	and	r6, r6, r4, lsl #8
   148a4:	and	r1, r1, r4
   148a8:	orr	r2, r2, r7
   148ac:	ldrh	r4, [r9, #28]
   148b0:	and	r5, r5, r3, lsl #12
   148b4:	orr	r1, r1, r3, lsr #20
   148b8:	uxtb	r3, r3
   148bc:	stm	r8, {r2, lr}
   148c0:	orr	r3, r3, r6
   148c4:	ldr	r6, [sp, #24]
   148c8:	orr	r3, r5, r3
   148cc:	ldr	r5, [sp, #28]
   148d0:	str	r4, [r8, #16]
   148d4:	ldr	r2, [sp, #32]
   148d8:	str	r6, [r8, #20]
   148dc:	ldrd	r6, [r9, #32]
   148e0:	str	r5, [r8, #24]
   148e4:	str	r3, [r8, #32]
   148e8:	str	r2, [r8, #28]
   148ec:	str	r1, [r8, #36]	; 0x24
   148f0:	str	ip, [r8, #56]	; 0x38
   148f4:	ldrd	r4, [r9, #40]	; 0x28
   148f8:	ldrd	r2, [r9, #48]	; 0x30
   148fc:	ldr	ip, [r9, #64]	; 0x40
   14900:	strd	r4, [r8, #48]	; 0x30
   14904:	ldr	r1, [r9, #112]	; 0x70
   14908:	strd	r2, [r8, #64]	; 0x40
   1490c:	ldr	lr, [sp, #128]	; 0x80
   14910:	str	ip, [r8, #72]	; 0x48
   14914:	str	r1, [r8, #80]	; 0x50
   14918:	str	lr, [r8, #84]	; 0x54
   1491c:	strd	r6, [r8, #96]	; 0x60
   14920:	ldr	r3, [r9, #96]	; 0x60
   14924:	ldr	r2, [sp, #112]	; 0x70
   14928:	str	r3, [r8, #88]	; 0x58
   1492c:	str	r2, [r8, #92]	; 0x5c
   14930:	beq	14830 <__assert_fail@plt+0x2abc>
   14934:	ldr	r3, [sp, #8]
   14938:	tst	r3, #2048	; 0x800
   1493c:	beq	14954 <__assert_fail@plt+0x2be0>
   14940:	ldr	r3, [r9, #80]	; 0x50
   14944:	ldr	r2, [sp, #96]	; 0x60
   14948:	str	r3, [r8, #80]	; 0x50
   1494c:	str	r2, [r8, #84]	; 0x54
   14950:	b	14830 <__assert_fail@plt+0x2abc>
   14954:	mvn	r2, #0
   14958:	mvn	r3, #0
   1495c:	strd	r2, [r8, #80]	; 0x50
   14960:	b	14830 <__assert_fail@plt+0x2abc>
   14964:	ldr	r3, [r1]
   14968:	ldr	r1, [r0]
   1496c:	mov	r0, r3
   14970:	b	1e80c <__assert_fail@plt+0xca98>
   14974:	ldr	r0, [r0]
   14978:	ldr	r1, [r1]
   1497c:	b	1e80c <__assert_fail@plt+0xca98>
   14980:	cmp	r0, r1
   14984:	bxcs	lr
   14988:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1498c:	mov	r4, r0
   14990:	strd	r6, [sp, #8]
   14994:	movw	r7, #4912	; 0x1330
   14998:	movt	r7, #4
   1499c:	mov	r6, r1
   149a0:	strd	r8, [sp, #16]
   149a4:	movw	r8, #4900	; 0x1324
   149a8:	movt	r8, #4
   149ac:	mov	r9, #32
   149b0:	str	sl, [sp, #24]
   149b4:	mov	sl, #9
   149b8:	str	lr, [sp, #28]
   149bc:	b	149f4 <__assert_fail@plt+0x2c80>
   149c0:	udiv	r1, r6, r2
   149c4:	udiv	lr, r5, r2
   149c8:	cmp	r1, lr
   149cc:	bls	14a10 <__assert_fail@plt+0x2c9c>
   149d0:	cmp	r3, ip
   149d4:	addcc	r1, r3, #1
   149d8:	strcc	r1, [r0, #20]
   149dc:	strbcc	sl, [r3]
   149e0:	bcs	14a54 <__assert_fail@plt+0x2ce0>
   149e4:	udiv	r4, r4, r2
   149e8:	mla	r4, r2, r4, r2
   149ec:	cmp	r4, r6
   149f0:	bcs	14a30 <__assert_fail@plt+0x2cbc>
   149f4:	ldr	r2, [r7, #3096]	; 0xc18
   149f8:	add	r5, r4, #1
   149fc:	ldr	r0, [r8]
   14a00:	cmp	r2, #0
   14a04:	ldr	r3, [r0, #20]
   14a08:	ldr	ip, [r0, #24]
   14a0c:	bne	149c0 <__assert_fail@plt+0x2c4c>
   14a10:	cmp	r3, ip
   14a14:	addcc	r2, r3, #1
   14a18:	strcc	r2, [r0, #20]
   14a1c:	strbcc	r9, [r3]
   14a20:	bcs	14a48 <__assert_fail@plt+0x2cd4>
   14a24:	mov	r4, r5
   14a28:	cmp	r4, r6
   14a2c:	bcc	149f4 <__assert_fail@plt+0x2c80>
   14a30:	ldrd	r4, [sp]
   14a34:	ldrd	r6, [sp, #8]
   14a38:	ldrd	r8, [sp, #16]
   14a3c:	ldr	sl, [sp, #24]
   14a40:	add	sp, sp, #28
   14a44:	pop	{pc}		; (ldr pc, [sp], #4)
   14a48:	mov	r1, #32
   14a4c:	bl	11c48 <__overflow@plt>
   14a50:	b	14a24 <__assert_fail@plt+0x2cb0>
   14a54:	mov	r1, #9
   14a58:	bl	11c48 <__overflow@plt>
   14a5c:	ldr	r2, [r7, #3096]	; 0xc18
   14a60:	b	149e4 <__assert_fail@plt+0x2c70>
   14a64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a68:	ldr	r4, [r1, #8]
   14a6c:	ldr	r3, [r1, #12]
   14a70:	strd	r6, [sp, #8]
   14a74:	str	r8, [sp, #16]
   14a78:	str	lr, [sp, #20]
   14a7c:	sub	r5, r3, r4
   14a80:	cmp	r5, #7
   14a84:	bls	14b1c <__assert_fail@plt+0x2da8>
   14a88:	cmp	r3, r4
   14a8c:	beq	14b30 <__assert_fail@plt+0x2dbc>
   14a90:	mov	r2, r1
   14a94:	ldr	ip, [r1, #4]
   14a98:	movw	r6, #4900	; 0x1324
   14a9c:	movt	r6, #4
   14aa0:	bic	r5, r5, #7
   14aa4:	ldr	lr, [r1, #16]
   14aa8:	add	r5, r4, r5
   14aac:	ldr	r1, [r1, #24]
   14ab0:	add	r3, r3, r1
   14ab4:	bic	r3, r3, r1
   14ab8:	ldr	r1, [r6]
   14abc:	sub	r7, r3, ip
   14ac0:	sub	ip, lr, ip
   14ac4:	cmp	r7, ip
   14ac8:	movw	r7, #55192	; 0xd798
   14acc:	movt	r7, #2
   14ad0:	movhi	r3, lr
   14ad4:	str	r3, [r2, #8]
   14ad8:	str	r3, [r2, #12]
   14adc:	bl	11864 <fputs_unlocked@plt>
   14ae0:	ldrd	r2, [r4], #8
   14ae4:	mov	r1, r7
   14ae8:	mov	r0, #1
   14aec:	bl	11bf4 <__printf_chk@plt>
   14af0:	cmp	r5, r4
   14af4:	bne	14ae0 <__assert_fail@plt+0x2d6c>
   14af8:	ldr	r0, [r6]
   14afc:	ldr	r3, [r0, #20]
   14b00:	ldr	r2, [r0, #24]
   14b04:	cmp	r3, r2
   14b08:	addcc	r1, r3, #1
   14b0c:	movcc	r2, #10
   14b10:	strcc	r1, [r0, #20]
   14b14:	strbcc	r2, [r3]
   14b18:	bcs	14b40 <__assert_fail@plt+0x2dcc>
   14b1c:	ldrd	r4, [sp]
   14b20:	ldrd	r6, [sp, #8]
   14b24:	ldr	r8, [sp, #16]
   14b28:	add	sp, sp, #20
   14b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b30:	ldrb	r2, [r1, #40]	; 0x28
   14b34:	orr	r2, r2, #2
   14b38:	strb	r2, [r1, #40]	; 0x28
   14b3c:	b	14a90 <__assert_fail@plt+0x2d1c>
   14b40:	mov	r1, #10
   14b44:	ldrd	r4, [sp]
   14b48:	ldrd	r6, [sp, #8]
   14b4c:	ldr	r8, [sp, #16]
   14b50:	ldr	lr, [sp, #20]
   14b54:	add	sp, sp, #24
   14b58:	b	11c48 <__overflow@plt>
   14b5c:	movw	r3, #4912	; 0x1330
   14b60:	movt	r3, #4
   14b64:	ldr	r2, [r3]
   14b68:	cmp	r2, #0
   14b6c:	bne	14b7c <__assert_fail@plt+0x2e08>
   14b70:	ldr	r2, [r3, #3100]	; 0xc1c
   14b74:	add	r2, r2, #1
   14b78:	str	r2, [r3, #3100]	; 0xc1c
   14b7c:	bx	lr
   14b80:	cmp	r0, #0
   14b84:	beq	14c10 <__assert_fail@plt+0x2e9c>
   14b88:	and	r3, r1, #61440	; 0xf000
   14b8c:	cmp	r3, #32768	; 0x8000
   14b90:	beq	14bf4 <__assert_fail@plt+0x2e80>
   14b94:	sub	r3, r3, #16384	; 0x4000
   14b98:	clz	r3, r3
   14b9c:	lsr	r3, r3, #5
   14ba0:	cmp	r3, #0
   14ba4:	bne	14c30 <__assert_fail@plt+0x2ebc>
   14ba8:	movw	ip, #4912	; 0x1330
   14bac:	movt	ip, #4
   14bb0:	ldr	ip, [ip, #3104]	; 0xc20
   14bb4:	cmp	ip, #1
   14bb8:	beq	14c08 <__assert_fail@plt+0x2e94>
   14bbc:	cmp	r0, #0
   14bc0:	beq	14c38 <__assert_fail@plt+0x2ec4>
   14bc4:	and	r1, r1, #61440	; 0xf000
   14bc8:	cmp	r1, #40960	; 0xa000
   14bcc:	beq	14c60 <__assert_fail@plt+0x2eec>
   14bd0:	cmp	r1, #4096	; 0x1000
   14bd4:	beq	14c48 <__assert_fail@plt+0x2ed4>
   14bd8:	sub	r2, r1, #49152	; 0xc000
   14bdc:	clz	r2, r2
   14be0:	lsr	r2, r2, #5
   14be4:	cmp	r2, #0
   14be8:	moveq	r0, #0
   14bec:	movne	r0, #61	; 0x3d
   14bf0:	bx	lr
   14bf4:	movw	r3, #4912	; 0x1330
   14bf8:	movt	r3, #4
   14bfc:	ldr	r3, [r3, #3104]	; 0xc20
   14c00:	cmp	r3, #3
   14c04:	beq	14c50 <__assert_fail@plt+0x2edc>
   14c08:	mov	r0, #0
   14c0c:	bx	lr
   14c10:	cmp	r2, #5
   14c14:	beq	14c4c <__assert_fail@plt+0x2ed8>
   14c18:	cmp	r2, #9
   14c1c:	cmpne	r2, #3
   14c20:	moveq	r3, #1
   14c24:	movne	r3, #0
   14c28:	cmp	r3, #0
   14c2c:	beq	14ba8 <__assert_fail@plt+0x2e34>
   14c30:	mov	r0, #47	; 0x2f
   14c34:	bx	lr
   14c38:	cmp	r2, #6
   14c3c:	beq	14c60 <__assert_fail@plt+0x2eec>
   14c40:	cmp	r2, #1
   14c44:	bne	14c68 <__assert_fail@plt+0x2ef4>
   14c48:	mov	r0, #124	; 0x7c
   14c4c:	bx	lr
   14c50:	tst	r1, #73	; 0x49
   14c54:	moveq	r0, #0
   14c58:	movne	r0, #42	; 0x2a
   14c5c:	bx	lr
   14c60:	mov	r0, #64	; 0x40
   14c64:	bx	lr
   14c68:	sub	r2, r2, #7
   14c6c:	clz	r2, r2
   14c70:	lsr	r2, r2, #5
   14c74:	b	14be4 <__assert_fail@plt+0x2e70>
   14c78:	ldr	ip, [pc, #68]	; 14cc4 <__assert_fail@plt+0x2f50>
   14c7c:	movw	r3, #4900	; 0x1324
   14c80:	movt	r3, #4
   14c84:	strd	r4, [sp, #-20]!	; 0xffffffec
   14c88:	mov	r2, r1
   14c8c:	ldr	r3, [r3]
   14c90:	strd	r6, [sp, #8]
   14c94:	str	lr, [sp, #16]
   14c98:	mov	lr, r1
   14c9c:	mov	r1, #1
   14ca0:	ldrd	r4, [ip, #-8]
   14ca4:	adds	r6, r4, lr
   14ca8:	ldr	lr, [sp, #16]
   14cac:	adc	r7, r5, #0
   14cb0:	ldrd	r4, [sp]
   14cb4:	strd	r6, [ip, #-8]
   14cb8:	ldrd	r6, [sp, #8]
   14cbc:	add	sp, sp, #20
   14cc0:	b	11960 <fwrite_unlocked@plt>
   14cc4:	andeq	r1, r4, r0, ror #30
   14cc8:	movw	r3, #4912	; 0x1330
   14ccc:	movt	r3, #4
   14cd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14cd4:	ldrb	r2, [r3, #3120]	; 0xc30
   14cd8:	strd	r6, [sp, #8]
   14cdc:	mov	r7, r1
   14ce0:	strd	r8, [sp, #16]
   14ce4:	mov	r8, r0
   14ce8:	strd	sl, [sp, #24]
   14cec:	str	lr, [sp, #32]
   14cf0:	sub	sp, sp, #148	; 0x94
   14cf4:	cmp	r2, #0
   14cf8:	beq	14d34 <__assert_fail@plt+0x2fc0>
   14cfc:	movw	r3, #4900	; 0x1324
   14d00:	movt	r3, #4
   14d04:	ldr	r1, [r8]
   14d08:	mov	r2, #1
   14d0c:	ldr	r3, [r3]
   14d10:	ldr	r0, [r7]
   14d14:	bl	11960 <fwrite_unlocked@plt>
   14d18:	add	sp, sp, #148	; 0x94
   14d1c:	ldrd	r4, [sp]
   14d20:	ldrd	r6, [sp, #8]
   14d24:	ldrd	r8, [sp, #16]
   14d28:	ldrd	sl, [sp, #24]
   14d2c:	add	sp, sp, #32
   14d30:	pop	{pc}		; (ldr pc, [sp], #4)
   14d34:	mov	r2, #1
   14d38:	mov	r0, r2
   14d3c:	strb	r2, [r3, #3120]	; 0xc30
   14d40:	bl	11b88 <tcgetpgrp@plt>
   14d44:	cmp	r0, #0
   14d48:	bge	14d70 <__assert_fail@plt+0x2ffc>
   14d4c:	movw	r4, #4560	; 0x11d0
   14d50:	movt	r4, #4
   14d54:	ldr	r3, [r4, #20]
   14d58:	cmp	r3, #0
   14d5c:	beq	14e2c <__assert_fail@plt+0x30b8>
   14d60:	add	r1, r4, #20
   14d64:	add	r0, r4, #16
   14d68:	bl	14cc8 <__assert_fail@plt+0x2f54>
   14d6c:	b	14cfc <__assert_fail@plt+0x2f88>
   14d70:	ldr	sl, [pc, #220]	; 14e54 <__assert_fail@plt+0x30e0>
   14d74:	ldr	r5, [pc, #220]	; 14e58 <__assert_fail@plt+0x30e4>
   14d78:	mov	r0, sl
   14d7c:	add	r6, r5, #48	; 0x30
   14d80:	mov	r4, r5
   14d84:	bl	11c60 <sigemptyset@plt>
   14d88:	ldr	r9, [r4], #4
   14d8c:	mov	r1, #0
   14d90:	add	r2, sp, #4
   14d94:	mov	r0, r9
   14d98:	bl	11a14 <sigaction@plt>
   14d9c:	ldr	r3, [sp, #4]
   14da0:	mov	r1, r9
   14da4:	mov	r0, sl
   14da8:	cmp	r3, #1
   14dac:	beq	14db4 <__assert_fail@plt+0x3040>
   14db0:	bl	11aec <sigaddset@plt>
   14db4:	cmp	r4, r6
   14db8:	bne	14d88 <__assert_fail@plt+0x3014>
   14dbc:	ldr	r9, [pc, #144]	; 14e54 <__assert_fail@plt+0x30e0>
   14dc0:	mov	r2, #128	; 0x80
   14dc4:	add	r0, sp, #8
   14dc8:	movw	fp, #19292	; 0x4b5c
   14dcc:	movt	fp, #1
   14dd0:	movw	sl, #15948	; 0x3e4c
   14dd4:	movt	sl, #1
   14dd8:	mov	r1, r9
   14ddc:	bl	11930 <memcpy@plt>
   14de0:	mov	r3, #268435456	; 0x10000000
   14de4:	str	r3, [sp, #136]	; 0x88
   14de8:	ldr	r4, [r5], #4
   14dec:	mov	r0, r9
   14df0:	mov	r1, r4
   14df4:	bl	1199c <sigismember@plt>
   14df8:	mov	r2, #0
   14dfc:	add	r1, sp, #4
   14e00:	cmp	r0, r2
   14e04:	mov	r0, r4
   14e08:	beq	14e20 <__assert_fail@plt+0x30ac>
   14e0c:	cmp	r4, #20
   14e10:	moveq	r4, fp
   14e14:	movne	r4, sl
   14e18:	str	r4, [sp, #4]
   14e1c:	bl	11a14 <sigaction@plt>
   14e20:	cmp	r5, r6
   14e24:	bne	14de8 <__assert_fail@plt+0x3074>
   14e28:	b	14d4c <__assert_fail@plt+0x2fd8>
   14e2c:	add	r1, r4, #4
   14e30:	mov	r0, r4
   14e34:	bl	14cc8 <__assert_fail@plt+0x2f54>
   14e38:	add	r1, r4, #28
   14e3c:	add	r0, r4, #24
   14e40:	bl	14cc8 <__assert_fail@plt+0x2f54>
   14e44:	add	r1, r4, #12
   14e48:	add	r0, r4, #8
   14e4c:	bl	14cc8 <__assert_fail@plt+0x2f54>
   14e50:	b	14cfc <__assert_fail@plt+0x2f88>
   14e54:	andeq	r1, r4, r4, ror #30
   14e58:	andeq	ip, r2, r0, lsr #32
   14e5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e60:	mov	r4, r1
   14e64:	mov	r5, r3
   14e68:	strd	r6, [sp, #8]
   14e6c:	mov	r6, r2
   14e70:	strd	r8, [sp, #16]
   14e74:	strd	sl, [sp, #24]
   14e78:	movw	fp, #4912	; 0x1330
   14e7c:	movt	fp, #4
   14e80:	str	lr, [sp, #32]
   14e84:	sub	sp, sp, #36	; 0x24
   14e88:	ldr	sl, [r0]
   14e8c:	str	r0, [sp, #12]
   14e90:	mov	r0, r6
   14e94:	bl	26f2c <_obstack_memory_used@@Base+0x1e74>
   14e98:	ldrb	r9, [fp, #3252]	; 0xcb4
   14e9c:	cmp	r0, #2
   14ea0:	movhi	r9, #0
   14ea4:	andls	r9, r9, #1
   14ea8:	cmp	r9, #0
   14eac:	str	r9, [sp, #8]
   14eb0:	bne	14fe4 <__assert_fail@plt+0x3270>
   14eb4:	cmp	r5, #0
   14eb8:	movne	r7, r9
   14ebc:	beq	14f20 <__assert_fail@plt+0x31ac>
   14ec0:	mvn	r3, #0
   14ec4:	mov	r2, r4
   14ec8:	str	r6, [sp]
   14ecc:	mov	r1, #8192	; 0x2000
   14ed0:	mov	r0, sl
   14ed4:	bl	26ff4 <_obstack_memory_used@@Base+0x1f3c>
   14ed8:	cmp	r0, #8192	; 0x2000
   14edc:	mov	r5, r0
   14ee0:	bcs	152cc <__assert_fail@plt+0x3558>
   14ee4:	ldrb	r3, [sl]
   14ee8:	ldrb	r2, [r4]
   14eec:	cmp	r2, r3
   14ef0:	movne	r3, #1
   14ef4:	strne	r3, [sp, #8]
   14ef8:	bne	14f10 <__assert_fail@plt+0x319c>
   14efc:	mov	r0, r4
   14f00:	bl	11b94 <strlen@plt>
   14f04:	subs	r3, r5, r0
   14f08:	movne	r3, #1
   14f0c:	str	r3, [sp, #8]
   14f10:	cmp	r7, #0
   14f14:	beq	14f30 <__assert_fail@plt+0x31bc>
   14f18:	mov	r6, r5
   14f1c:	b	1501c <__assert_fail@plt+0x32a8>
   14f20:	mov	r0, r4
   14f24:	mov	sl, r4
   14f28:	bl	11b94 <strlen@plt>
   14f2c:	mov	r5, r0
   14f30:	ldr	r3, [sp, #72]	; 0x48
   14f34:	cmp	r3, #0
   14f38:	beq	14fc8 <__assert_fail@plt+0x3254>
   14f3c:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   14f40:	cmp	r0, #1
   14f44:	bhi	1525c <__assert_fail@plt+0x34e8>
   14f48:	add	r4, sl, r5
   14f4c:	cmp	r4, sl
   14f50:	bls	152f4 <__assert_fail@plt+0x3580>
   14f54:	bl	11b58 <__ctype_b_loc@plt>
   14f58:	ldr	r0, [r0]
   14f5c:	sub	r1, r4, #1
   14f60:	sub	r2, sl, #1
   14f64:	mov	r6, #0
   14f68:	ldrb	r3, [r2, #1]!
   14f6c:	lsl	r3, r3, #1
   14f70:	ldrh	r3, [r0, r3]
   14f74:	tst	r3, #16384	; 0x4000
   14f78:	addne	r6, r6, #1
   14f7c:	cmp	r1, r2
   14f80:	bne	14f68 <__assert_fail@plt+0x31f4>
   14f84:	ldrb	r3, [fp, #3253]	; 0xcb5
   14f88:	cmp	r3, #0
   14f8c:	bne	1513c <__assert_fail@plt+0x33c8>
   14f90:	ldr	r2, [sp, #76]	; 0x4c
   14f94:	strb	r3, [r2]
   14f98:	ldr	r3, [sp, #72]	; 0x48
   14f9c:	str	r6, [r3]
   14fa0:	ldr	r3, [sp, #12]
   14fa4:	mov	r0, r5
   14fa8:	str	sl, [r3]
   14fac:	add	sp, sp, #36	; 0x24
   14fb0:	ldrd	r4, [sp]
   14fb4:	ldrd	r6, [sp, #8]
   14fb8:	ldrd	r8, [sp, #16]
   14fbc:	ldrd	sl, [sp, #24]
   14fc0:	add	sp, sp, #32
   14fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc8:	ldrb	r3, [fp, #3253]	; 0xcb5
   14fcc:	cmp	r3, #0
   14fd0:	bne	15138 <__assert_fail@plt+0x33c4>
   14fd4:	ldr	r3, [sp, #72]	; 0x48
   14fd8:	ldr	r2, [sp, #76]	; 0x4c
   14fdc:	strb	r3, [r2]
   14fe0:	b	14fa0 <__assert_fail@plt+0x322c>
   14fe4:	cmp	r5, #0
   14fe8:	bne	15310 <__assert_fail@plt+0x359c>
   14fec:	mov	r0, r4
   14ff0:	bl	11b94 <strlen@plt>
   14ff4:	cmp	r0, #8192	; 0x2000
   14ff8:	mov	r6, r0
   14ffc:	add	r5, r0, #1
   15000:	bcs	152bc <__assert_fail@plt+0x3548>
   15004:	mov	r3, #0
   15008:	mov	r2, r5
   1500c:	mov	r1, r4
   15010:	mov	r0, sl
   15014:	str	r3, [sp, #8]
   15018:	bl	11930 <memcpy@plt>
   1501c:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   15020:	cmp	r0, #1
   15024:	add	r7, sl, r6
   15028:	bls	15168 <__assert_fail@plt+0x33f4>
   1502c:	cmp	sl, r7
   15030:	bcs	15304 <__assert_fail@plt+0x3590>
   15034:	mov	r5, sl
   15038:	mov	r4, sl
   1503c:	mov	r6, #0
   15040:	b	1506c <__assert_fail@plt+0x32f8>
   15044:	cmp	r3, #37	; 0x25
   15048:	bcs	15058 <__assert_fail@plt+0x32e4>
   1504c:	sub	r2, r3, #32
   15050:	cmp	r2, #3
   15054:	bhi	15094 <__assert_fail@plt+0x3320>
   15058:	add	r4, r4, #1
   1505c:	add	r6, r6, #1
   15060:	strb	r3, [r5], #1
   15064:	cmp	r4, r7
   15068:	bcs	15254 <__assert_fail@plt+0x34e0>
   1506c:	ldrb	r3, [r4]
   15070:	cmp	r3, #63	; 0x3f
   15074:	bls	15044 <__assert_fail@plt+0x32d0>
   15078:	cmp	r3, #65	; 0x41
   1507c:	bcc	15094 <__assert_fail@plt+0x3320>
   15080:	cmp	r3, #95	; 0x5f
   15084:	bls	15058 <__assert_fail@plt+0x32e4>
   15088:	sub	r2, r3, #97	; 0x61
   1508c:	cmp	r2, #29
   15090:	bls	15058 <__assert_fail@plt+0x32e4>
   15094:	mov	r2, #0
   15098:	mov	r3, #0
   1509c:	strd	r2, [sp, #24]
   150a0:	b	150d8 <__assert_fail@plt+0x3364>
   150a4:	bl	118d0 <wcwidth@plt>
   150a8:	cmp	r0, #0
   150ac:	addlt	r8, r4, r8
   150b0:	bge	151b4 <__assert_fail@plt+0x3440>
   150b4:	mov	r3, #63	; 0x3f
   150b8:	add	r6, r6, #1
   150bc:	mov	r4, r8
   150c0:	strb	r3, [r5]
   150c4:	mov	r5, r9
   150c8:	add	r0, sp, #24
   150cc:	bl	11948 <mbsinit@plt>
   150d0:	cmp	r0, #0
   150d4:	bne	15064 <__assert_fail@plt+0x32f0>
   150d8:	add	r3, sp, #24
   150dc:	sub	r2, r7, r4
   150e0:	mov	r1, r4
   150e4:	add	r0, sp, #20
   150e8:	bl	21d6c <__assert_fail@plt+0xfff8>
   150ec:	cmn	r0, #1
   150f0:	mov	r8, r0
   150f4:	add	r9, r5, #1
   150f8:	beq	15274 <__assert_fail@plt+0x3500>
   150fc:	cmn	r0, #2
   15100:	beq	1528c <__assert_fail@plt+0x3518>
   15104:	cmp	r0, #0
   15108:	ldr	r0, [sp, #20]
   1510c:	bne	150a4 <__assert_fail@plt+0x3330>
   15110:	bl	118d0 <wcwidth@plt>
   15114:	cmp	r0, #0
   15118:	add	r8, r4, #1
   1511c:	blt	150b4 <__assert_fail@plt+0x3340>
   15120:	ldrb	r3, [r4]
   15124:	mov	r4, r8
   15128:	strb	r3, [r5]
   1512c:	mov	r5, r9
   15130:	add	r6, r6, r0
   15134:	b	150c8 <__assert_fail@plt+0x3354>
   15138:	ldr	r6, [sp, #72]	; 0x48
   1513c:	ldrb	r3, [fp, #3254]	; 0xcb6
   15140:	ldr	r2, [sp, #8]
   15144:	eor	r3, r3, #1
   15148:	orr	r9, r2, r3
   1514c:	eor	r3, r9, #1
   15150:	ldr	r2, [sp, #72]	; 0x48
   15154:	cmp	r2, #0
   15158:	ldr	r2, [sp, #76]	; 0x4c
   1515c:	strb	r3, [r2]
   15160:	bne	14f98 <__assert_fail@plt+0x3224>
   15164:	b	14fa0 <__assert_fail@plt+0x322c>
   15168:	cmp	sl, r7
   1516c:	bcs	151a0 <__assert_fail@plt+0x342c>
   15170:	bl	11b58 <__ctype_b_loc@plt>
   15174:	sub	r7, r7, #1
   15178:	sub	r2, sl, #1
   1517c:	mov	r1, #63	; 0x3f
   15180:	ldrb	r3, [r2, #1]!
   15184:	ldr	ip, [r0]
   15188:	lsl	r3, r3, #1
   1518c:	ldrh	r3, [ip, r3]
   15190:	tst	r3, #16384	; 0x4000
   15194:	strbeq	r1, [r2]
   15198:	cmp	r7, r2
   1519c:	bne	15180 <__assert_fail@plt+0x340c>
   151a0:	mov	r5, r6
   151a4:	ldrb	r3, [fp, #3253]	; 0xcb5
   151a8:	cmp	r3, #0
   151ac:	bne	1513c <__assert_fail@plt+0x33c8>
   151b0:	b	15150 <__assert_fail@plt+0x33dc>
   151b4:	add	r3, r5, #4
   151b8:	add	r2, r4, #4
   151bc:	cmp	r5, r2
   151c0:	cmpcc	r4, r3
   151c4:	sub	r2, r8, #1
   151c8:	movcs	r3, #1
   151cc:	movcc	r3, #0
   151d0:	cmp	r2, #7
   151d4:	movls	r3, #0
   151d8:	andhi	r3, r3, #1
   151dc:	cmp	r3, #0
   151e0:	beq	152a0 <__assert_fail@plt+0x352c>
   151e4:	bic	ip, r8, #3
   151e8:	mov	r3, r5
   151ec:	add	ip, ip, r5
   151f0:	mov	r2, r4
   151f4:	ldr	r1, [r2], #4
   151f8:	str	r1, [r3], #4
   151fc:	cmp	ip, r3
   15200:	bne	151f4 <__assert_fail@plt+0x3480>
   15204:	bic	r2, r8, #3
   15208:	cmp	r8, r2
   1520c:	add	r3, r4, r2
   15210:	add	ip, r5, r2
   15214:	sub	r1, r8, r2
   15218:	beq	15248 <__assert_fail@plt+0x34d4>
   1521c:	ldrb	lr, [r4, r2]
   15220:	cmp	r1, #1
   15224:	strb	lr, [r5, r2]
   15228:	beq	152fc <__assert_fail@plt+0x3588>
   1522c:	ldrb	r2, [r3, #1]
   15230:	cmp	r1, #2
   15234:	strb	r2, [ip, #1]
   15238:	beq	152fc <__assert_fail@plt+0x3588>
   1523c:	ldrb	r2, [r3, #2]
   15240:	add	r3, r4, r8
   15244:	strb	r2, [ip, #2]
   15248:	mov	r4, r3
   1524c:	add	r5, r5, r8
   15250:	b	15130 <__assert_fail@plt+0x33bc>
   15254:	sub	r5, r5, sl
   15258:	b	151a4 <__assert_fail@plt+0x3430>
   1525c:	mov	r2, #0
   15260:	mov	r1, r5
   15264:	mov	r0, sl
   15268:	bl	2260c <__assert_fail@plt+0x10898>
   1526c:	mov	r6, r0
   15270:	b	14f84 <__assert_fail@plt+0x3210>
   15274:	mov	r3, #63	; 0x3f
   15278:	add	r4, r4, #1
   1527c:	add	r6, r6, #1
   15280:	strb	r3, [r5]
   15284:	mov	r5, r9
   15288:	b	15064 <__assert_fail@plt+0x32f0>
   1528c:	mov	r3, #63	; 0x3f
   15290:	add	r6, r6, #1
   15294:	mov	r4, r7
   15298:	strb	r3, [r5]
   1529c:	b	15284 <__assert_fail@plt+0x3510>
   152a0:	sub	r2, r5, #1
   152a4:	add	r3, r4, r8
   152a8:	ldrb	r1, [r4], #1
   152ac:	cmp	r3, r4
   152b0:	strb	r1, [r2, #1]!
   152b4:	bne	152a8 <__assert_fail@plt+0x3534>
   152b8:	b	15248 <__assert_fail@plt+0x34d4>
   152bc:	mov	r0, r5
   152c0:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   152c4:	mov	sl, r0
   152c8:	b	15004 <__assert_fail@plt+0x3290>
   152cc:	add	r8, r0, #1
   152d0:	mov	r0, r8
   152d4:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   152d8:	mov	r1, r8
   152dc:	mvn	r3, #0
   152e0:	str	r6, [sp]
   152e4:	mov	r2, r4
   152e8:	mov	sl, r0
   152ec:	bl	26ff4 <_obstack_memory_used@@Base+0x1f3c>
   152f0:	b	14ee4 <__assert_fail@plt+0x3170>
   152f4:	mov	r6, #0
   152f8:	b	14f84 <__assert_fail@plt+0x3210>
   152fc:	add	r3, r4, r8
   15300:	b	15248 <__assert_fail@plt+0x34d4>
   15304:	mov	r6, #0
   15308:	mov	r5, r6
   1530c:	b	151a4 <__assert_fail@plt+0x3430>
   15310:	mov	r7, #1
   15314:	b	14ec0 <__assert_fail@plt+0x314c>
   15318:	strd	r4, [sp, #-12]!
   1531c:	mov	r3, r2
   15320:	mov	r5, r0
   15324:	str	lr, [sp, #8]
   15328:	sub	sp, sp, #8192	; 0x2000
   1532c:	mov	r2, r1
   15330:	sub	sp, sp, #28
   15334:	mov	r1, r0
   15338:	add	r4, sp, #24
   1533c:	sub	ip, r4, #9
   15340:	sub	r0, r4, #4
   15344:	str	r4, [r4, #-8]
   15348:	stm	sp, {r0, ip}
   1534c:	sub	r0, r4, #8
   15350:	bl	14e5c <__assert_fail@plt+0x30e8>
   15354:	ldr	r0, [r4, #-8]
   15358:	cmp	r0, r4
   1535c:	cmpne	r0, r5
   15360:	beq	15368 <__assert_fail@plt+0x35f4>
   15364:	bl	1ee98 <__assert_fail@plt+0xd124>
   15368:	ldrb	r0, [r4, #-9]
   1536c:	ldr	r3, [r4, #-4]
   15370:	add	r0, r0, r3
   15374:	add	sp, sp, #8192	; 0x2000
   15378:	add	sp, sp, #28
   1537c:	ldrd	r4, [sp]
   15380:	add	sp, sp, #8
   15384:	pop	{pc}		; (ldr pc, [sp], #4)
   15388:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1538c:	movw	r5, #4912	; 0x1330
   15390:	movt	r5, #4
   15394:	ldrb	r4, [r5, #3077]	; 0xc05
   15398:	strd	r6, [sp, #8]
   1539c:	str	r8, [sp, #16]
   153a0:	mov	r8, r0
   153a4:	str	lr, [sp, #20]
   153a8:	sub	sp, sp, #672	; 0x2a0
   153ac:	cmp	r4, #0
   153b0:	beq	15468 <__assert_fail@plt+0x36f4>
   153b4:	ldr	r3, [r5, #3080]	; 0xc08
   153b8:	cmp	r3, #4
   153bc:	beq	15454 <__assert_fail@plt+0x36e0>
   153c0:	ldrb	r3, [r5, #3078]	; 0xc06
   153c4:	ldr	r4, [r5, #3256]	; 0xcb8
   153c8:	cmp	r3, #0
   153cc:	add	r4, r4, #1
   153d0:	beq	154d8 <__assert_fail@plt+0x3764>
   153d4:	ldr	r0, [r5, #3272]	; 0xcc8
   153d8:	add	r0, r0, #1
   153dc:	add	r4, r4, r0
   153e0:	ldrb	r3, [r5, #3276]	; 0xccc
   153e4:	cmp	r3, #0
   153e8:	beq	15404 <__assert_fail@plt+0x3690>
   153ec:	ldr	r3, [r5, #3080]	; 0xc08
   153f0:	cmp	r3, #4
   153f4:	beq	154e8 <__assert_fail@plt+0x3774>
   153f8:	ldr	r0, [r5, #3280]	; 0xcd0
   153fc:	add	r0, r0, #1
   15400:	add	r4, r4, r0
   15404:	ldr	r0, [r8, #148]	; 0x94
   15408:	cmp	r0, #0
   1540c:	beq	154c4 <__assert_fail@plt+0x3750>
   15410:	ldr	r3, [r5, #3104]	; 0xc20
   15414:	add	r4, r4, r0
   15418:	cmp	r3, #0
   1541c:	beq	15438 <__assert_fail@plt+0x36c4>
   15420:	ldrb	r0, [r8, #132]	; 0x84
   15424:	ldr	r1, [r8, #32]
   15428:	ldr	r2, [r8, #120]	; 0x78
   1542c:	bl	14b80 <__assert_fail@plt+0x2e0c>
   15430:	cmp	r0, #0
   15434:	addne	r4, r4, #1
   15438:	mov	r0, r4
   1543c:	add	sp, sp, #672	; 0x2a0
   15440:	ldrd	r4, [sp]
   15444:	ldrd	r6, [sp, #8]
   15448:	ldr	r8, [sp, #16]
   1544c:	add	sp, sp, #20
   15450:	pop	{pc}		; (ldr pc, [sp], #4)
   15454:	add	r2, sp, #20
   15458:	ldrd	r0, [r0, #112]	; 0x70
   1545c:	bl	21cf4 <__assert_fail@plt+0xff80>
   15460:	bl	11b94 <strlen@plt>
   15464:	add	r4, r0, #1
   15468:	ldrb	r3, [r5, #3078]	; 0xc06
   1546c:	cmp	r3, #0
   15470:	beq	153e0 <__assert_fail@plt+0x366c>
   15474:	ldr	r3, [r5, #3080]	; 0xc08
   15478:	cmp	r3, #4
   1547c:	bne	153d4 <__assert_fail@plt+0x3660>
   15480:	ldrb	r3, [r8, #132]	; 0x84
   15484:	cmp	r3, #0
   15488:	moveq	r0, #2
   1548c:	beq	153dc <__assert_fail@plt+0x3668>
   15490:	ldr	r3, [pc, #96]	; 154f8 <__assert_fail@plt+0x3784>
   15494:	mov	r0, #512	; 0x200
   15498:	mov	r1, #0
   1549c:	add	r2, sp, #20
   154a0:	strd	r0, [sp]
   154a4:	ldrd	r0, [r8, #80]	; 0x50
   154a8:	ldrd	r6, [r3]
   154ac:	ldr	r3, [r5, #3260]	; 0xcbc
   154b0:	strd	r6, [sp, #8]
   154b4:	bl	20780 <__assert_fail@plt+0xea0c>
   154b8:	bl	11b94 <strlen@plt>
   154bc:	add	r0, r0, #1
   154c0:	b	153dc <__assert_fail@plt+0x3668>
   154c4:	ldr	r0, [r8]
   154c8:	ldr	r2, [r8, #144]	; 0x90
   154cc:	ldr	r1, [r5, #3284]	; 0xcd4
   154d0:	bl	15318 <__assert_fail@plt+0x35a4>
   154d4:	b	15410 <__assert_fail@plt+0x369c>
   154d8:	ldrb	r3, [r5, #3276]	; 0xccc
   154dc:	cmp	r3, #0
   154e0:	bne	153f8 <__assert_fail@plt+0x3684>
   154e4:	b	15404 <__assert_fail@plt+0x3690>
   154e8:	ldr	r0, [r8, #128]	; 0x80
   154ec:	bl	11b94 <strlen@plt>
   154f0:	add	r0, r0, #1
   154f4:	b	15400 <__assert_fail@plt+0x368c>
   154f8:	strdeq	r1, [r4], -r0
   154fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15500:	strd	r6, [sp, #8]
   15504:	movw	r6, #4912	; 0x1330
   15508:	movt	r6, #4
   1550c:	ldr	r1, [r6, #3288]	; 0xcd8
   15510:	strd	r8, [sp, #16]
   15514:	strd	sl, [sp, #24]
   15518:	str	lr, [sp, #32]
   1551c:	sub	sp, sp, #28
   15520:	ldr	r3, [r6, #3292]	; 0xcdc
   15524:	cmp	r1, #0
   15528:	str	r0, [sp, #12]
   1552c:	ldr	r4, [r6, #3296]	; 0xce0
   15530:	beq	15898 <__assert_fail@plt+0x3b24>
   15534:	cmp	r1, r4
   15538:	bcc	157bc <__assert_fail@plt+0x3a48>
   1553c:	cmp	r3, r4
   15540:	bcs	158a0 <__assert_fail@plt+0x3b2c>
   15544:	cmp	r4, r1, lsr #1
   15548:	ldr	r0, [r6, #3300]	; 0xce4
   1554c:	bcs	157dc <__assert_fail@plt+0x3a68>
   15550:	lsl	r5, r4, #1
   15554:	mov	r2, #24
   15558:	mov	r1, r4
   1555c:	bl	29e74 <_obstack_memory_used@@Base+0x4dbc>
   15560:	str	r0, [r6, #3300]	; 0xce4
   15564:	ldr	r3, [r6, #3292]	; 0xcdc
   15568:	add	r2, r3, #1
   1556c:	sub	r3, r5, r3
   15570:	adds	r2, r5, r2
   15574:	mul	r0, r2, r3
   15578:	bcs	158c4 <__assert_fail@plt+0x3b50>
   1557c:	udiv	r3, r0, r3
   15580:	cmp	r2, r3
   15584:	bne	158c4 <__assert_fail@plt+0x3b50>
   15588:	lsr	r0, r0, #1
   1558c:	mov	r1, #4
   15590:	bl	29ef4 <_obstack_memory_used@@Base+0x4e3c>
   15594:	ldr	r3, [r6, #3292]	; 0xcdc
   15598:	cmp	r5, r3
   1559c:	bls	155d4 <__assert_fail@plt+0x3860>
   155a0:	ldr	r2, [r6, #3300]	; 0xce4
   155a4:	add	ip, r3, r3, lsl #1
   155a8:	add	r1, r5, #1
   155ac:	add	r3, r3, #1
   155b0:	lsl	r1, r1, #2
   155b4:	lsl	r3, r3, #2
   155b8:	add	r2, r2, ip, lsl #2
   155bc:	str	r0, [r2, #8]
   155c0:	add	r0, r0, r3
   155c4:	add	r3, r3, #4
   155c8:	cmp	r3, r1
   155cc:	add	r2, r2, #12
   155d0:	bne	155bc <__assert_fail@plt+0x3848>
   155d4:	ldr	r3, [r6, #3296]	; 0xce0
   155d8:	cmp	r4, #0
   155dc:	str	r5, [r6, #3292]	; 0xcdc
   155e0:	str	r3, [sp, #16]
   155e4:	beq	158ac <__assert_fail@plt+0x3b38>
   155e8:	ldr	r3, [r6, #3300]	; 0xce4
   155ec:	mov	lr, #3
   155f0:	mov	r7, #0
   155f4:	mov	sl, lr
   155f8:	mov	fp, #1
   155fc:	str	r6, [sp, #20]
   15600:	mov	r0, #3
   15604:	mov	r1, #3
   15608:	sub	r2, r3, #12
   1560c:	sub	r9, r3, #8
   15610:	sub	r3, r3, #4
   15614:	strd	r2, [sp, #4]
   15618:	ldr	r3, [sp, #8]
   1561c:	cmp	r7, #2
   15620:	add	r6, r7, #1
   15624:	ldr	r5, [r3, lr, lsl #2]
   15628:	ldr	r3, [sp, #4]
   1562c:	ubfx	r2, r5, #2, #1
   15630:	strb	fp, [r3, lr, lsl #2]
   15634:	str	lr, [r9, lr, lsl #2]
   15638:	bls	15890 <__assert_fail@plt+0x3b1c>
   1563c:	sub	r8, r6, r2
   15640:	add	r3, r5, r2, lsl #2
   15644:	cmp	r2, #0
   15648:	lsr	ip, r8, #1
   1564c:	strne	sl, [r5]
   15650:	add	ip, r3, ip, lsl #3
   15654:	strd	r0, [r3], #8
   15658:	cmp	r3, ip
   1565c:	bne	15654 <__assert_fail@plt+0x38e0>
   15660:	bic	r3, r8, #1
   15664:	cmp	r3, r8
   15668:	add	r2, r2, r3
   1566c:	beq	15690 <__assert_fail@plt+0x391c>
   15670:	add	ip, r2, #1
   15674:	str	sl, [r5, r2, lsl #2]
   15678:	cmp	ip, r7
   1567c:	bhi	15690 <__assert_fail@plt+0x391c>
   15680:	add	r2, r2, #2
   15684:	str	sl, [r5, ip, lsl #2]
   15688:	cmp	r2, r7
   1568c:	strls	sl, [r5, r2, lsl #2]
   15690:	cmp	r4, r6
   15694:	add	lr, lr, #3
   15698:	mov	r7, r6
   1569c:	bhi	15618 <__assert_fail@plt+0x38a4>
   156a0:	ldr	r3, [sp, #16]
   156a4:	ldr	r6, [sp, #20]
   156a8:	cmp	r3, #0
   156ac:	beq	1575c <__assert_fail@plt+0x39e8>
   156b0:	mov	r5, #0
   156b4:	ldr	r3, [r6, #3304]	; 0xce8
   156b8:	ldr	r0, [r3, r5, lsl #2]
   156bc:	bl	15388 <__assert_fail@plt+0x3614>
   156c0:	cmp	r4, #0
   156c4:	beq	1587c <__assert_fail@plt+0x3b08>
   156c8:	ldr	ip, [sp, #12]
   156cc:	ldr	r7, [r6, #3296]	; 0xce0
   156d0:	ldr	r3, [r6, #3300]	; 0xce4
   156d4:	cmp	ip, #0
   156d8:	ldr	r8, [r6, #3308]	; 0xcec
   156dc:	bne	157f0 <__assert_fail@plt+0x3a7c>
   156e0:	add	fp, r0, #2
   156e4:	ldrb	r2, [r3]
   156e8:	add	r1, ip, #1
   156ec:	cmp	r2, #0
   156f0:	beq	15740 <__assert_fail@plt+0x39cc>
   156f4:	udiv	r2, r5, r1
   156f8:	ldr	lr, [r3, #8]
   156fc:	mls	r2, r1, r2, r5
   15700:	ldr	r9, [lr, r2, lsl #2]
   15704:	cmp	ip, r2
   15708:	moveq	ip, r0
   1570c:	movne	ip, fp
   15710:	cmp	r9, ip
   15714:	bcs	15740 <__assert_fail@plt+0x39cc>
   15718:	ldr	sl, [r3, #4]
   1571c:	sub	r9, sl, r9
   15720:	add	r9, r9, ip
   15724:	str	r9, [r3, #4]
   15728:	str	ip, [lr, r2, lsl #2]
   1572c:	ldr	r2, [r3, #4]
   15730:	cmp	r8, r2
   15734:	movls	r2, #0
   15738:	movhi	r2, #1
   1573c:	strb	r2, [r3]
   15740:	cmp	r4, r1
   15744:	mov	ip, r1
   15748:	add	r3, r3, #12
   1574c:	bne	156e4 <__assert_fail@plt+0x3970>
   15750:	add	r5, r5, #1
   15754:	cmp	r5, r7
   15758:	bcc	156b4 <__assert_fail@plt+0x3940>
   1575c:	cmp	r4, #1
   15760:	bls	1579c <__assert_fail@plt+0x3a28>
   15764:	ldr	r3, [r6, #3300]	; 0xce4
   15768:	add	r2, r4, r4, lsl #1
   1576c:	add	r3, r3, r2, lsl #2
   15770:	ldrb	r2, [r3, #-12]
   15774:	cmp	r2, #0
   15778:	beq	15790 <__assert_fail@plt+0x3a1c>
   1577c:	b	1579c <__assert_fail@plt+0x3a28>
   15780:	sub	r3, r3, #12
   15784:	ldrb	r2, [r3, #-12]
   15788:	cmp	r2, #0
   1578c:	bne	1579c <__assert_fail@plt+0x3a28>
   15790:	sub	r4, r4, #1
   15794:	cmp	r4, #1
   15798:	bne	15780 <__assert_fail@plt+0x3a0c>
   1579c:	mov	r0, r4
   157a0:	add	sp, sp, #28
   157a4:	ldrd	r4, [sp]
   157a8:	ldrd	r6, [sp, #8]
   157ac:	ldrd	r8, [sp, #16]
   157b0:	ldrd	sl, [sp, #24]
   157b4:	add	sp, sp, #32
   157b8:	pop	{pc}		; (ldr pc, [sp], #4)
   157bc:	cmp	r1, r3
   157c0:	strls	r4, [sp, #16]
   157c4:	movls	r4, r1
   157c8:	bls	155e8 <__assert_fail@plt+0x3874>
   157cc:	mov	r4, r1
   157d0:	ldr	r0, [r6, #3300]	; 0xce4
   157d4:	cmp	r4, r1, lsr #1
   157d8:	bcc	15550 <__assert_fail@plt+0x37dc>
   157dc:	mov	r2, #12
   157e0:	bl	29e74 <_obstack_memory_used@@Base+0x4dbc>
   157e4:	str	r0, [r6, #3300]	; 0xce4
   157e8:	ldr	r5, [r6, #3288]	; 0xcd8
   157ec:	b	15564 <__assert_fail@plt+0x37f0>
   157f0:	mov	ip, #0
   157f4:	add	fp, r0, #2
   157f8:	ldrb	r2, [r3]
   157fc:	add	r1, ip, #1
   15800:	cmp	r2, #0
   15804:	beq	1585c <__assert_fail@plt+0x3ae8>
   15808:	add	r2, r7, r1
   1580c:	ldr	lr, [r3, #8]
   15810:	sub	r2, r2, #1
   15814:	udiv	r2, r2, r1
   15818:	udiv	r2, r5, r2
   1581c:	ldr	r9, [lr, r2, lsl #2]
   15820:	cmp	r2, ip
   15824:	moveq	ip, r0
   15828:	movne	ip, fp
   1582c:	cmp	r9, ip
   15830:	bcs	1585c <__assert_fail@plt+0x3ae8>
   15834:	ldr	sl, [r3, #4]
   15838:	sub	r9, sl, r9
   1583c:	add	r9, r9, ip
   15840:	str	r9, [r3, #4]
   15844:	str	ip, [lr, r2, lsl #2]
   15848:	ldr	r2, [r3, #4]
   1584c:	cmp	r2, r8
   15850:	movcs	r2, #0
   15854:	movcc	r2, #1
   15858:	strb	r2, [r3]
   1585c:	cmp	r4, r1
   15860:	mov	ip, r1
   15864:	add	r3, r3, #12
   15868:	bne	157f8 <__assert_fail@plt+0x3a84>
   1586c:	add	r5, r5, #1
   15870:	cmp	r5, r7
   15874:	bcc	156b4 <__assert_fail@plt+0x3940>
   15878:	b	1575c <__assert_fail@plt+0x39e8>
   1587c:	ldr	r7, [r6, #3296]	; 0xce0
   15880:	add	r5, r5, #1
   15884:	cmp	r5, r7
   15888:	bcc	156b4 <__assert_fail@plt+0x3940>
   1588c:	b	1575c <__assert_fail@plt+0x39e8>
   15890:	mov	r2, #0
   15894:	b	15670 <__assert_fail@plt+0x38fc>
   15898:	cmp	r3, r4
   1589c:	bcc	158bc <__assert_fail@plt+0x3b48>
   158a0:	cmp	r4, #0
   158a4:	str	r4, [sp, #16]
   158a8:	bne	155e8 <__assert_fail@plt+0x3874>
   158ac:	ldr	r3, [sp, #16]
   158b0:	cmp	r3, #0
   158b4:	bne	156b0 <__assert_fail@plt+0x393c>
   158b8:	b	1579c <__assert_fail@plt+0x3a28>
   158bc:	ldr	r0, [r6, #3300]	; 0xce4
   158c0:	b	15550 <__assert_fail@plt+0x37dc>
   158c4:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   158c8:	strd	r4, [sp, #-8]!
   158cc:	ldrd	r2, [r1, #64]	; 0x40
   158d0:	ldrd	r4, [r0, #64]	; 0x40
   158d4:	cmp	r2, r4
   158d8:	sbcs	ip, r3, r5
   158dc:	blt	15900 <__assert_fail@plt+0x3b8c>
   158e0:	cmp	r3, r5
   158e4:	cmpeq	r2, r4
   158e8:	bne	15910 <__assert_fail@plt+0x3b9c>
   158ec:	ldrd	r4, [sp]
   158f0:	add	sp, sp, #8
   158f4:	ldr	r0, [r0]
   158f8:	ldr	r1, [r1]
   158fc:	b	118a0 <strcmp@plt>
   15900:	mvn	r0, #0
   15904:	ldrd	r4, [sp]
   15908:	add	sp, sp, #8
   1590c:	bx	lr
   15910:	cmp	r4, r2
   15914:	sbcs	r3, r5, r3
   15918:	ldrd	r4, [sp]
   1591c:	add	sp, sp, #8
   15920:	movlt	r0, #1
   15924:	movge	r0, #0
   15928:	bx	lr
   1592c:	strd	r4, [sp, #-8]!
   15930:	mov	ip, r1
   15934:	ldrd	r2, [r0, #64]	; 0x40
   15938:	ldrd	r4, [r1, #64]	; 0x40
   1593c:	cmp	r2, r4
   15940:	sbcs	r1, r3, r5
   15944:	blt	15968 <__assert_fail@plt+0x3bf4>
   15948:	cmp	r3, r5
   1594c:	cmpeq	r2, r4
   15950:	bne	15978 <__assert_fail@plt+0x3c04>
   15954:	ldr	r1, [r0]
   15958:	ldrd	r4, [sp]
   1595c:	add	sp, sp, #8
   15960:	ldr	r0, [ip]
   15964:	b	118a0 <strcmp@plt>
   15968:	mvn	r0, #0
   1596c:	ldrd	r4, [sp]
   15970:	add	sp, sp, #8
   15974:	bx	lr
   15978:	cmp	r4, r2
   1597c:	sbcs	r3, r5, r3
   15980:	ldrd	r4, [sp]
   15984:	add	sp, sp, #8
   15988:	movlt	r0, #1
   1598c:	movge	r0, #0
   15990:	bx	lr
   15994:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15998:	strd	r6, [sp, #8]
   1599c:	movw	r6, #4912	; 0x1330
   159a0:	movt	r6, #4
   159a4:	ldr	r3, [r6, #3296]	; 0xce0
   159a8:	str	r8, [sp, #16]
   159ac:	str	lr, [sp, #20]
   159b0:	cmp	r3, #0
   159b4:	beq	15a04 <__assert_fail@plt+0x3c90>
   159b8:	ldr	r7, [pc, #164]	; 15a64 <__assert_fail@plt+0x3cf0>
   159bc:	mov	r5, #0
   159c0:	ldr	r3, [r6, #3304]	; 0xce8
   159c4:	ldr	r4, [r3, r5, lsl #2]
   159c8:	ldr	r0, [r4]
   159cc:	bl	1ee98 <__assert_fail@plt+0xd124>
   159d0:	ldr	r0, [r4, #4]
   159d4:	bl	1ee98 <__assert_fail@plt+0xd124>
   159d8:	ldr	r0, [r4, #8]
   159dc:	bl	1ee98 <__assert_fail@plt+0xd124>
   159e0:	ldr	r3, [r4, #128]	; 0x80
   159e4:	cmp	r3, r7
   159e8:	mov	r0, r3
   159ec:	beq	15a50 <__assert_fail@plt+0x3cdc>
   159f0:	bl	11ce4 <freecon@plt>
   159f4:	ldr	r3, [r6, #3296]	; 0xce0
   159f8:	add	r5, r5, #1
   159fc:	cmp	r3, r5
   15a00:	bhi	159c0 <__assert_fail@plt+0x3c4c>
   15a04:	mov	r3, #0
   15a08:	ldrd	r4, [sp]
   15a0c:	strb	r3, [r6, #3254]	; 0xcb6
   15a10:	str	r3, [r6, #3256]	; 0xcb8
   15a14:	str	r3, [r6, #3272]	; 0xcc8
   15a18:	str	r3, [r6, #3280]	; 0xcd0
   15a1c:	str	r3, [r6, #3296]	; 0xce0
   15a20:	strb	r3, [r6, #3312]	; 0xcf0
   15a24:	str	r3, [r6, #3316]	; 0xcf4
   15a28:	str	r3, [r6, #3320]	; 0xcf8
   15a2c:	str	r3, [r6, #3324]	; 0xcfc
   15a30:	str	r3, [r6, #3328]	; 0xd00
   15a34:	str	r3, [r6, #3332]	; 0xd04
   15a38:	str	r3, [r6, #3336]	; 0xd08
   15a3c:	str	r3, [r6, #3340]	; 0xd0c
   15a40:	ldrd	r6, [sp, #8]
   15a44:	ldr	r8, [sp, #16]
   15a48:	add	sp, sp, #20
   15a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a50:	ldr	r3, [r6, #3296]	; 0xce0
   15a54:	add	r5, r5, #1
   15a58:	cmp	r3, r5
   15a5c:	bhi	159c0 <__assert_fail@plt+0x3c4c>
   15a60:	b	15a04 <__assert_fail@plt+0x3c90>
   15a64:	andeq	r1, r4, r0, lsr #5
   15a68:	str	r4, [sp, #-8]!
   15a6c:	ldr	r3, [r0, #104]	; 0x68
   15a70:	ldr	r4, [r1, #104]	; 0x68
   15a74:	ldr	ip, [r0, #108]	; 0x6c
   15a78:	str	lr, [sp, #4]
   15a7c:	ldr	lr, [r1, #108]	; 0x6c
   15a80:	cmp	r4, r3
   15a84:	movge	r2, #0
   15a88:	movlt	r2, #1
   15a8c:	cmp	r4, r3
   15a90:	rsble	r2, r2, #0
   15a94:	rsbgt	r2, r2, #1
   15a98:	cmp	lr, ip
   15a9c:	movge	r3, #0
   15aa0:	movlt	r3, #1
   15aa4:	cmp	lr, ip
   15aa8:	rsble	r3, r3, #0
   15aac:	rsbgt	r3, r3, #1
   15ab0:	adds	r3, r3, r2, lsl #1
   15ab4:	bne	15ad0 <__assert_fail@plt+0x3d5c>
   15ab8:	ldr	r4, [sp]
   15abc:	ldr	r0, [r0]
   15ac0:	ldr	r1, [r1]
   15ac4:	ldr	lr, [sp, #4]
   15ac8:	add	sp, sp, #8
   15acc:	b	118a0 <strcmp@plt>
   15ad0:	ldr	r4, [sp]
   15ad4:	add	sp, sp, #4
   15ad8:	mov	r0, r3
   15adc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ae0:	str	r4, [sp, #-8]!
   15ae4:	mov	ip, r1
   15ae8:	ldr	r3, [r1, #104]	; 0x68
   15aec:	ldr	r4, [r0, #104]	; 0x68
   15af0:	ldr	r1, [r1, #108]	; 0x6c
   15af4:	str	lr, [sp, #4]
   15af8:	ldr	lr, [r0, #108]	; 0x6c
   15afc:	cmp	r4, r3
   15b00:	movge	r2, #0
   15b04:	movlt	r2, #1
   15b08:	cmp	r4, r3
   15b0c:	rsble	r2, r2, #0
   15b10:	rsbgt	r2, r2, #1
   15b14:	cmp	lr, r1
   15b18:	movge	r3, #0
   15b1c:	movlt	r3, #1
   15b20:	cmp	lr, r1
   15b24:	rsble	r3, r3, #0
   15b28:	rsbgt	r3, r3, #1
   15b2c:	adds	r3, r3, r2, lsl #1
   15b30:	bne	15b4c <__assert_fail@plt+0x3dd8>
   15b34:	ldr	r1, [r0]
   15b38:	ldr	r4, [sp]
   15b3c:	ldr	r0, [ip]
   15b40:	ldr	lr, [sp, #4]
   15b44:	add	sp, sp, #8
   15b48:	b	118a0 <strcmp@plt>
   15b4c:	ldr	r4, [sp]
   15b50:	add	sp, sp, #4
   15b54:	mov	r0, r3
   15b58:	pop	{pc}		; (ldr pc, [sp], #4)
   15b5c:	str	r4, [sp, #-8]!
   15b60:	ldr	r3, [r0, #96]	; 0x60
   15b64:	ldr	r4, [r1, #96]	; 0x60
   15b68:	ldr	ip, [r0, #100]	; 0x64
   15b6c:	str	lr, [sp, #4]
   15b70:	ldr	lr, [r1, #100]	; 0x64
   15b74:	cmp	r4, r3
   15b78:	movge	r2, #0
   15b7c:	movlt	r2, #1
   15b80:	cmp	r4, r3
   15b84:	rsble	r2, r2, #0
   15b88:	rsbgt	r2, r2, #1
   15b8c:	cmp	lr, ip
   15b90:	movge	r3, #0
   15b94:	movlt	r3, #1
   15b98:	cmp	lr, ip
   15b9c:	rsble	r3, r3, #0
   15ba0:	rsbgt	r3, r3, #1
   15ba4:	adds	r3, r3, r2, lsl #1
   15ba8:	bne	15bc4 <__assert_fail@plt+0x3e50>
   15bac:	ldr	r4, [sp]
   15bb0:	ldr	r0, [r0]
   15bb4:	ldr	r1, [r1]
   15bb8:	ldr	lr, [sp, #4]
   15bbc:	add	sp, sp, #8
   15bc0:	b	118a0 <strcmp@plt>
   15bc4:	ldr	r4, [sp]
   15bc8:	add	sp, sp, #4
   15bcc:	mov	r0, r3
   15bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd4:	str	r4, [sp, #-8]!
   15bd8:	mov	ip, r1
   15bdc:	ldr	r3, [r1, #96]	; 0x60
   15be0:	ldr	r4, [r0, #96]	; 0x60
   15be4:	ldr	r1, [r1, #100]	; 0x64
   15be8:	str	lr, [sp, #4]
   15bec:	ldr	lr, [r0, #100]	; 0x64
   15bf0:	cmp	r4, r3
   15bf4:	movge	r2, #0
   15bf8:	movlt	r2, #1
   15bfc:	cmp	r4, r3
   15c00:	rsble	r2, r2, #0
   15c04:	rsbgt	r2, r2, #1
   15c08:	cmp	lr, r1
   15c0c:	movge	r3, #0
   15c10:	movlt	r3, #1
   15c14:	cmp	lr, r1
   15c18:	rsble	r3, r3, #0
   15c1c:	rsbgt	r3, r3, #1
   15c20:	adds	r3, r3, r2, lsl #1
   15c24:	bne	15c40 <__assert_fail@plt+0x3ecc>
   15c28:	ldr	r1, [r0]
   15c2c:	ldr	r4, [sp]
   15c30:	ldr	r0, [ip]
   15c34:	ldr	lr, [sp, #4]
   15c38:	add	sp, sp, #8
   15c3c:	b	118a0 <strcmp@plt>
   15c40:	ldr	r4, [sp]
   15c44:	add	sp, sp, #4
   15c48:	mov	r0, r3
   15c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c50:	str	r4, [sp, #-8]!
   15c54:	ldr	r3, [r0, #88]	; 0x58
   15c58:	ldr	r4, [r1, #88]	; 0x58
   15c5c:	ldr	ip, [r0, #92]	; 0x5c
   15c60:	str	lr, [sp, #4]
   15c64:	ldr	lr, [r1, #92]	; 0x5c
   15c68:	cmp	r4, r3
   15c6c:	movge	r2, #0
   15c70:	movlt	r2, #1
   15c74:	cmp	r4, r3
   15c78:	rsble	r2, r2, #0
   15c7c:	rsbgt	r2, r2, #1
   15c80:	cmp	lr, ip
   15c84:	movge	r3, #0
   15c88:	movlt	r3, #1
   15c8c:	cmp	lr, ip
   15c90:	rsble	r3, r3, #0
   15c94:	rsbgt	r3, r3, #1
   15c98:	adds	r3, r3, r2, lsl #1
   15c9c:	bne	15cb8 <__assert_fail@plt+0x3f44>
   15ca0:	ldr	r4, [sp]
   15ca4:	ldr	r0, [r0]
   15ca8:	ldr	r1, [r1]
   15cac:	ldr	lr, [sp, #4]
   15cb0:	add	sp, sp, #8
   15cb4:	b	118a0 <strcmp@plt>
   15cb8:	ldr	r4, [sp]
   15cbc:	add	sp, sp, #4
   15cc0:	mov	r0, r3
   15cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cc8:	str	r4, [sp, #-8]!
   15ccc:	mov	ip, r1
   15cd0:	ldr	r3, [r1, #88]	; 0x58
   15cd4:	ldr	r4, [r0, #88]	; 0x58
   15cd8:	ldr	r1, [r1, #92]	; 0x5c
   15cdc:	str	lr, [sp, #4]
   15ce0:	ldr	lr, [r0, #92]	; 0x5c
   15ce4:	cmp	r4, r3
   15ce8:	movge	r2, #0
   15cec:	movlt	r2, #1
   15cf0:	cmp	r4, r3
   15cf4:	rsble	r2, r2, #0
   15cf8:	rsbgt	r2, r2, #1
   15cfc:	cmp	lr, r1
   15d00:	movge	r3, #0
   15d04:	movlt	r3, #1
   15d08:	cmp	lr, r1
   15d0c:	rsble	r3, r3, #0
   15d10:	rsbgt	r3, r3, #1
   15d14:	adds	r3, r3, r2, lsl #1
   15d18:	bne	15d34 <__assert_fail@plt+0x3fc0>
   15d1c:	ldr	r1, [r0]
   15d20:	ldr	r4, [sp]
   15d24:	ldr	r0, [ip]
   15d28:	ldr	lr, [sp, #4]
   15d2c:	add	sp, sp, #8
   15d30:	b	118a0 <strcmp@plt>
   15d34:	ldr	r4, [sp]
   15d38:	add	sp, sp, #4
   15d3c:	mov	r0, r3
   15d40:	pop	{pc}		; (ldr pc, [sp], #4)
   15d44:	str	r4, [sp, #-8]!
   15d48:	ldr	r3, [r0, #96]	; 0x60
   15d4c:	ldr	r4, [r1, #96]	; 0x60
   15d50:	ldr	ip, [r0, #100]	; 0x64
   15d54:	str	lr, [sp, #4]
   15d58:	ldr	lr, [r1, #100]	; 0x64
   15d5c:	cmp	r4, r3
   15d60:	movge	r2, #0
   15d64:	movlt	r2, #1
   15d68:	cmp	r4, r3
   15d6c:	rsble	r2, r2, #0
   15d70:	rsbgt	r2, r2, #1
   15d74:	cmp	lr, ip
   15d78:	movge	r3, #0
   15d7c:	movlt	r3, #1
   15d80:	cmp	lr, ip
   15d84:	rsble	r3, r3, #0
   15d88:	rsbgt	r3, r3, #1
   15d8c:	adds	r3, r3, r2, lsl #1
   15d90:	bne	15dac <__assert_fail@plt+0x4038>
   15d94:	ldr	r4, [sp]
   15d98:	ldr	r0, [r0]
   15d9c:	ldr	r1, [r1]
   15da0:	ldr	lr, [sp, #4]
   15da4:	add	sp, sp, #8
   15da8:	b	118a0 <strcmp@plt>
   15dac:	ldr	r4, [sp]
   15db0:	add	sp, sp, #4
   15db4:	mov	r0, r3
   15db8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dbc:	str	r4, [sp, #-8]!
   15dc0:	mov	ip, r1
   15dc4:	ldr	r3, [r1, #96]	; 0x60
   15dc8:	ldr	r4, [r0, #96]	; 0x60
   15dcc:	ldr	r1, [r1, #100]	; 0x64
   15dd0:	str	lr, [sp, #4]
   15dd4:	ldr	lr, [r0, #100]	; 0x64
   15dd8:	cmp	r4, r3
   15ddc:	movge	r2, #0
   15de0:	movlt	r2, #1
   15de4:	cmp	r4, r3
   15de8:	rsble	r2, r2, #0
   15dec:	rsbgt	r2, r2, #1
   15df0:	cmp	lr, r1
   15df4:	movge	r3, #0
   15df8:	movlt	r3, #1
   15dfc:	cmp	lr, r1
   15e00:	rsble	r3, r3, #0
   15e04:	rsbgt	r3, r3, #1
   15e08:	adds	r3, r3, r2, lsl #1
   15e0c:	bne	15e28 <__assert_fail@plt+0x40b4>
   15e10:	ldr	r1, [r0]
   15e14:	ldr	r4, [sp]
   15e18:	ldr	r0, [ip]
   15e1c:	ldr	lr, [sp, #4]
   15e20:	add	sp, sp, #8
   15e24:	b	118a0 <strcmp@plt>
   15e28:	ldr	r4, [sp]
   15e2c:	add	sp, sp, #4
   15e30:	mov	r0, r3
   15e34:	pop	{pc}		; (ldr pc, [sp], #4)
   15e38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15e3c:	movw	r4, #4912	; 0x1330
   15e40:	movt	r4, #4
   15e44:	strd	r6, [sp, #8]
   15e48:	movw	r6, #4900	; 0x1324
   15e4c:	movt	r6, #4
   15e50:	ldr	r7, [pc, #196]	; 15f1c <__assert_fail@plt+0x41a8>
   15e54:	str	r8, [sp, #16]
   15e58:	str	lr, [sp, #20]
   15e5c:	sub	sp, sp, #128	; 0x80
   15e60:	add	r8, r7, #8
   15e64:	b	15eb4 <__assert_fail@plt+0x4140>
   15e68:	ldr	r0, [r6]
   15e6c:	bl	119e4 <fflush_unlocked@plt>
   15e70:	ldr	r1, [pc, #168]	; 15f20 <__assert_fail@plt+0x41ac>
   15e74:	mov	r2, sp
   15e78:	mov	r0, #0
   15e7c:	bl	118dc <sigprocmask@plt>
   15e80:	ldr	r5, [r4]
   15e84:	ldr	r1, [r4, #3100]	; 0xc1c
   15e88:	cmp	r1, #0
   15e8c:	sub	r3, r1, #1
   15e90:	beq	15ef8 <__assert_fail@plt+0x4184>
   15e94:	mov	r5, #19
   15e98:	str	r3, [r4, #3100]	; 0xc1c
   15e9c:	mov	r0, r5
   15ea0:	bl	1187c <raise@plt>
   15ea4:	mov	r1, sp
   15ea8:	mov	r2, #0
   15eac:	mov	r0, #2
   15eb0:	bl	118dc <sigprocmask@plt>
   15eb4:	ldr	r3, [r4]
   15eb8:	cmp	r3, #0
   15ebc:	bne	15ecc <__assert_fail@plt+0x4158>
   15ec0:	ldr	r3, [r4, #3100]	; 0xc1c
   15ec4:	cmp	r3, #0
   15ec8:	beq	15f04 <__assert_fail@plt+0x4190>
   15ecc:	ldrb	r3, [r4, #3120]	; 0xc30
   15ed0:	cmp	r3, #0
   15ed4:	beq	15e68 <__assert_fail@plt+0x40f4>
   15ed8:	mov	r1, r7
   15edc:	movw	r0, #4560	; 0x11d0
   15ee0:	movt	r0, #4
   15ee4:	bl	14cc8 <__assert_fail@plt+0x2f54>
   15ee8:	mov	r1, r8
   15eec:	ldr	r0, [pc, #48]	; 15f24 <__assert_fail@plt+0x41b0>
   15ef0:	bl	14cc8 <__assert_fail@plt+0x2f54>
   15ef4:	b	15e68 <__assert_fail@plt+0x40f4>
   15ef8:	mov	r0, r5
   15efc:	bl	11954 <signal@plt>
   15f00:	b	15e9c <__assert_fail@plt+0x4128>
   15f04:	add	sp, sp, #128	; 0x80
   15f08:	ldrd	r4, [sp]
   15f0c:	ldrd	r6, [sp, #8]
   15f10:	ldr	r8, [sp, #16]
   15f14:	add	sp, sp, #20
   15f18:	pop	{pc}		; (ldr pc, [sp], #4)
   15f1c:	ldrdeq	r1, [r4], -r4
   15f20:	andeq	r1, r4, r4, ror #30
   15f24:	ldrdeq	r1, [r4], -r8
   15f28:	strd	r4, [sp, #-16]!
   15f2c:	ldr	r5, [r0]
   15f30:	ldr	r4, [r1]
   15f34:	str	r6, [sp, #8]
   15f38:	str	lr, [sp, #12]
   15f3c:	bl	11bb8 <__errno_location@plt>
   15f40:	mov	r3, r0
   15f44:	mov	r2, #0
   15f48:	ldr	r6, [sp, #8]
   15f4c:	mov	r0, r5
   15f50:	mov	r1, r4
   15f54:	ldrd	r4, [sp]
   15f58:	ldr	lr, [sp, #12]
   15f5c:	add	sp, sp, #16
   15f60:	str	r2, [r3]
   15f64:	b	11abc <strcoll@plt>
   15f68:	strd	r4, [sp, #-16]!
   15f6c:	ldr	r5, [r1]
   15f70:	ldr	r4, [r0]
   15f74:	str	r6, [sp, #8]
   15f78:	str	lr, [sp, #12]
   15f7c:	bl	11bb8 <__errno_location@plt>
   15f80:	mov	r3, r0
   15f84:	mov	r2, #0
   15f88:	ldr	r6, [sp, #8]
   15f8c:	mov	r0, r5
   15f90:	mov	r1, r4
   15f94:	ldrd	r4, [sp]
   15f98:	ldr	lr, [sp, #12]
   15f9c:	add	sp, sp, #16
   15fa0:	str	r2, [r3]
   15fa4:	b	11abc <strcoll@plt>
   15fa8:	strd	r4, [sp, #-16]!
   15fac:	ldr	r3, [r1, #88]	; 0x58
   15fb0:	ldr	ip, [r0, #92]	; 0x5c
   15fb4:	ldr	r2, [r1, #92]	; 0x5c
   15fb8:	str	r6, [sp, #8]
   15fbc:	str	lr, [sp, #12]
   15fc0:	ldr	lr, [r0, #88]	; 0x58
   15fc4:	cmp	lr, r3
   15fc8:	movge	r4, #0
   15fcc:	movlt	r4, #1
   15fd0:	cmp	lr, r3
   15fd4:	rsble	r4, r4, #0
   15fd8:	rsbgt	r4, r4, #1
   15fdc:	cmp	ip, r2
   15fe0:	movge	r3, #0
   15fe4:	movlt	r3, #1
   15fe8:	cmp	ip, r2
   15fec:	rsble	r3, r3, #0
   15ff0:	rsbgt	r3, r3, #1
   15ff4:	adds	r4, r3, r4, lsl #1
   15ff8:	bne	16028 <__assert_fail@plt+0x42b4>
   15ffc:	ldr	r6, [r1]
   16000:	ldr	r5, [r0]
   16004:	bl	11bb8 <__errno_location@plt>
   16008:	ldr	lr, [sp, #12]
   1600c:	str	r4, [r0]
   16010:	mov	r0, r6
   16014:	ldr	r6, [sp, #8]
   16018:	mov	r1, r5
   1601c:	ldrd	r4, [sp]
   16020:	add	sp, sp, #16
   16024:	b	11abc <strcoll@plt>
   16028:	mov	r0, r4
   1602c:	ldrd	r4, [sp]
   16030:	ldr	r6, [sp, #8]
   16034:	add	sp, sp, #12
   16038:	pop	{pc}		; (ldr pc, [sp], #4)
   1603c:	strd	r4, [sp, #-16]!
   16040:	ldr	r3, [r0, #104]	; 0x68
   16044:	ldr	r2, [r0, #108]	; 0x6c
   16048:	ldr	ip, [r1, #108]	; 0x6c
   1604c:	str	r6, [sp, #8]
   16050:	str	lr, [sp, #12]
   16054:	ldr	lr, [r1, #104]	; 0x68
   16058:	cmp	lr, r3
   1605c:	movge	r4, #0
   16060:	movlt	r4, #1
   16064:	cmp	lr, r3
   16068:	rsble	r4, r4, #0
   1606c:	rsbgt	r4, r4, #1
   16070:	cmp	ip, r2
   16074:	movge	r3, #0
   16078:	movlt	r3, #1
   1607c:	cmp	ip, r2
   16080:	rsble	r3, r3, #0
   16084:	rsbgt	r3, r3, #1
   16088:	adds	r4, r3, r4, lsl #1
   1608c:	bne	160bc <__assert_fail@plt+0x4348>
   16090:	ldr	r6, [r0]
   16094:	ldr	r5, [r1]
   16098:	bl	11bb8 <__errno_location@plt>
   1609c:	ldr	lr, [sp, #12]
   160a0:	str	r4, [r0]
   160a4:	mov	r0, r6
   160a8:	ldr	r6, [sp, #8]
   160ac:	mov	r1, r5
   160b0:	ldrd	r4, [sp]
   160b4:	add	sp, sp, #16
   160b8:	b	11abc <strcoll@plt>
   160bc:	mov	r0, r4
   160c0:	ldrd	r4, [sp]
   160c4:	ldr	r6, [sp, #8]
   160c8:	add	sp, sp, #12
   160cc:	pop	{pc}		; (ldr pc, [sp], #4)
   160d0:	strd	r4, [sp, #-16]!
   160d4:	ldr	r3, [r0, #96]	; 0x60
   160d8:	ldr	r2, [r0, #100]	; 0x64
   160dc:	ldr	ip, [r1, #100]	; 0x64
   160e0:	str	r6, [sp, #8]
   160e4:	str	lr, [sp, #12]
   160e8:	ldr	lr, [r1, #96]	; 0x60
   160ec:	cmp	lr, r3
   160f0:	movge	r4, #0
   160f4:	movlt	r4, #1
   160f8:	cmp	lr, r3
   160fc:	rsble	r4, r4, #0
   16100:	rsbgt	r4, r4, #1
   16104:	cmp	ip, r2
   16108:	movge	r3, #0
   1610c:	movlt	r3, #1
   16110:	cmp	ip, r2
   16114:	rsble	r3, r3, #0
   16118:	rsbgt	r3, r3, #1
   1611c:	adds	r4, r3, r4, lsl #1
   16120:	bne	16150 <__assert_fail@plt+0x43dc>
   16124:	ldr	r6, [r0]
   16128:	ldr	r5, [r1]
   1612c:	bl	11bb8 <__errno_location@plt>
   16130:	ldr	lr, [sp, #12]
   16134:	str	r4, [r0]
   16138:	mov	r0, r6
   1613c:	ldr	r6, [sp, #8]
   16140:	mov	r1, r5
   16144:	ldrd	r4, [sp]
   16148:	add	sp, sp, #16
   1614c:	b	11abc <strcoll@plt>
   16150:	mov	r0, r4
   16154:	ldrd	r4, [sp]
   16158:	ldr	r6, [sp, #8]
   1615c:	add	sp, sp, #12
   16160:	pop	{pc}		; (ldr pc, [sp], #4)
   16164:	strd	r4, [sp, #-16]!
   16168:	ldr	r3, [r0, #88]	; 0x58
   1616c:	ldr	r2, [r0, #92]	; 0x5c
   16170:	ldr	ip, [r1, #92]	; 0x5c
   16174:	str	r6, [sp, #8]
   16178:	str	lr, [sp, #12]
   1617c:	ldr	lr, [r1, #88]	; 0x58
   16180:	cmp	lr, r3
   16184:	movge	r4, #0
   16188:	movlt	r4, #1
   1618c:	cmp	lr, r3
   16190:	rsble	r4, r4, #0
   16194:	rsbgt	r4, r4, #1
   16198:	cmp	ip, r2
   1619c:	movge	r3, #0
   161a0:	movlt	r3, #1
   161a4:	cmp	ip, r2
   161a8:	rsble	r3, r3, #0
   161ac:	rsbgt	r3, r3, #1
   161b0:	adds	r4, r3, r4, lsl #1
   161b4:	bne	161e4 <__assert_fail@plt+0x4470>
   161b8:	ldr	r6, [r0]
   161bc:	ldr	r5, [r1]
   161c0:	bl	11bb8 <__errno_location@plt>
   161c4:	ldr	lr, [sp, #12]
   161c8:	str	r4, [r0]
   161cc:	mov	r0, r6
   161d0:	ldr	r6, [sp, #8]
   161d4:	mov	r1, r5
   161d8:	ldrd	r4, [sp]
   161dc:	add	sp, sp, #16
   161e0:	b	11abc <strcoll@plt>
   161e4:	mov	r0, r4
   161e8:	ldrd	r4, [sp]
   161ec:	ldr	r6, [sp, #8]
   161f0:	add	sp, sp, #12
   161f4:	pop	{pc}		; (ldr pc, [sp], #4)
   161f8:	strd	r4, [sp, #-16]!
   161fc:	ldr	r3, [r1, #96]	; 0x60
   16200:	ldr	ip, [r0, #100]	; 0x64
   16204:	ldr	r2, [r1, #100]	; 0x64
   16208:	str	r6, [sp, #8]
   1620c:	str	lr, [sp, #12]
   16210:	ldr	lr, [r0, #96]	; 0x60
   16214:	cmp	lr, r3
   16218:	movge	r4, #0
   1621c:	movlt	r4, #1
   16220:	cmp	lr, r3
   16224:	rsble	r4, r4, #0
   16228:	rsbgt	r4, r4, #1
   1622c:	cmp	ip, r2
   16230:	movge	r3, #0
   16234:	movlt	r3, #1
   16238:	cmp	ip, r2
   1623c:	rsble	r3, r3, #0
   16240:	rsbgt	r3, r3, #1
   16244:	adds	r4, r3, r4, lsl #1
   16248:	bne	16278 <__assert_fail@plt+0x4504>
   1624c:	ldr	r6, [r1]
   16250:	ldr	r5, [r0]
   16254:	bl	11bb8 <__errno_location@plt>
   16258:	ldr	lr, [sp, #12]
   1625c:	str	r4, [r0]
   16260:	mov	r0, r6
   16264:	ldr	r6, [sp, #8]
   16268:	mov	r1, r5
   1626c:	ldrd	r4, [sp]
   16270:	add	sp, sp, #16
   16274:	b	11abc <strcoll@plt>
   16278:	mov	r0, r4
   1627c:	ldrd	r4, [sp]
   16280:	ldr	r6, [sp, #8]
   16284:	add	sp, sp, #12
   16288:	pop	{pc}		; (ldr pc, [sp], #4)
   1628c:	strd	r4, [sp, #-16]!
   16290:	ldr	r3, [r1, #104]	; 0x68
   16294:	ldr	ip, [r0, #108]	; 0x6c
   16298:	ldr	r2, [r1, #108]	; 0x6c
   1629c:	str	r6, [sp, #8]
   162a0:	str	lr, [sp, #12]
   162a4:	ldr	lr, [r0, #104]	; 0x68
   162a8:	cmp	lr, r3
   162ac:	movge	r4, #0
   162b0:	movlt	r4, #1
   162b4:	cmp	lr, r3
   162b8:	rsble	r4, r4, #0
   162bc:	rsbgt	r4, r4, #1
   162c0:	cmp	ip, r2
   162c4:	movge	r3, #0
   162c8:	movlt	r3, #1
   162cc:	cmp	ip, r2
   162d0:	rsble	r3, r3, #0
   162d4:	rsbgt	r3, r3, #1
   162d8:	adds	r4, r3, r4, lsl #1
   162dc:	bne	1630c <__assert_fail@plt+0x4598>
   162e0:	ldr	r6, [r1]
   162e4:	ldr	r5, [r0]
   162e8:	bl	11bb8 <__errno_location@plt>
   162ec:	ldr	lr, [sp, #12]
   162f0:	str	r4, [r0]
   162f4:	mov	r0, r6
   162f8:	ldr	r6, [sp, #8]
   162fc:	mov	r1, r5
   16300:	ldrd	r4, [sp]
   16304:	add	sp, sp, #16
   16308:	b	11abc <strcoll@plt>
   1630c:	mov	r0, r4
   16310:	ldrd	r4, [sp]
   16314:	ldr	r6, [sp, #8]
   16318:	add	sp, sp, #12
   1631c:	pop	{pc}		; (ldr pc, [sp], #4)
   16320:	strd	r4, [sp, #-16]!
   16324:	ldr	r3, [r0, #96]	; 0x60
   16328:	ldr	r2, [r0, #100]	; 0x64
   1632c:	ldr	ip, [r1, #100]	; 0x64
   16330:	str	r6, [sp, #8]
   16334:	str	lr, [sp, #12]
   16338:	ldr	lr, [r1, #96]	; 0x60
   1633c:	cmp	lr, r3
   16340:	movge	r4, #0
   16344:	movlt	r4, #1
   16348:	cmp	lr, r3
   1634c:	rsble	r4, r4, #0
   16350:	rsbgt	r4, r4, #1
   16354:	cmp	ip, r2
   16358:	movge	r3, #0
   1635c:	movlt	r3, #1
   16360:	cmp	ip, r2
   16364:	rsble	r3, r3, #0
   16368:	rsbgt	r3, r3, #1
   1636c:	adds	r4, r3, r4, lsl #1
   16370:	bne	163a0 <__assert_fail@plt+0x462c>
   16374:	ldr	r6, [r0]
   16378:	ldr	r5, [r1]
   1637c:	bl	11bb8 <__errno_location@plt>
   16380:	ldr	lr, [sp, #12]
   16384:	str	r4, [r0]
   16388:	mov	r0, r6
   1638c:	ldr	r6, [sp, #8]
   16390:	mov	r1, r5
   16394:	ldrd	r4, [sp]
   16398:	add	sp, sp, #16
   1639c:	b	11abc <strcoll@plt>
   163a0:	mov	r0, r4
   163a4:	ldrd	r4, [sp]
   163a8:	ldr	r6, [sp, #8]
   163ac:	add	sp, sp, #12
   163b0:	pop	{pc}		; (ldr pc, [sp], #4)
   163b4:	strd	r4, [sp, #-16]!
   163b8:	ldr	r3, [r1, #96]	; 0x60
   163bc:	ldr	ip, [r0, #100]	; 0x64
   163c0:	ldr	r2, [r1, #100]	; 0x64
   163c4:	str	r6, [sp, #8]
   163c8:	str	lr, [sp, #12]
   163cc:	ldr	lr, [r0, #96]	; 0x60
   163d0:	cmp	lr, r3
   163d4:	movge	r4, #0
   163d8:	movlt	r4, #1
   163dc:	cmp	lr, r3
   163e0:	rsble	r4, r4, #0
   163e4:	rsbgt	r4, r4, #1
   163e8:	cmp	ip, r2
   163ec:	movge	r3, #0
   163f0:	movlt	r3, #1
   163f4:	cmp	ip, r2
   163f8:	rsble	r3, r3, #0
   163fc:	rsbgt	r3, r3, #1
   16400:	adds	r4, r3, r4, lsl #1
   16404:	bne	16434 <__assert_fail@plt+0x46c0>
   16408:	ldr	r6, [r1]
   1640c:	ldr	r5, [r0]
   16410:	bl	11bb8 <__errno_location@plt>
   16414:	ldr	lr, [sp, #12]
   16418:	str	r4, [r0]
   1641c:	mov	r0, r6
   16420:	ldr	r6, [sp, #8]
   16424:	mov	r1, r5
   16428:	ldrd	r4, [sp]
   1642c:	add	sp, sp, #16
   16430:	b	11abc <strcoll@plt>
   16434:	mov	r0, r4
   16438:	ldrd	r4, [sp]
   1643c:	ldr	r6, [sp, #8]
   16440:	add	sp, sp, #12
   16444:	pop	{pc}		; (ldr pc, [sp], #4)
   16448:	strd	r4, [sp, #-16]!
   1644c:	mov	r5, r1
   16450:	ldr	r4, [r1, #148]	; 0x94
   16454:	str	r6, [sp, #8]
   16458:	mov	r6, r0
   1645c:	str	lr, [sp, #12]
   16460:	cmp	r4, #0
   16464:	beq	164a8 <__assert_fail@plt+0x4734>
   16468:	ldr	r0, [r6, #148]	; 0x94
   1646c:	cmp	r0, #0
   16470:	beq	164d0 <__assert_fail@plt+0x475c>
   16474:	subs	r0, r4, r0
   16478:	bne	16498 <__assert_fail@plt+0x4724>
   1647c:	ldr	r0, [r5]
   16480:	ldr	r1, [r6]
   16484:	ldrd	r4, [sp]
   16488:	ldr	r6, [sp, #8]
   1648c:	ldr	lr, [sp, #12]
   16490:	add	sp, sp, #16
   16494:	b	118a0 <strcmp@plt>
   16498:	ldrd	r4, [sp]
   1649c:	ldr	r6, [sp, #8]
   164a0:	add	sp, sp, #12
   164a4:	pop	{pc}		; (ldr pc, [sp], #4)
   164a8:	movw	r3, #4912	; 0x1330
   164ac:	movt	r3, #4
   164b0:	ldr	r0, [r5]
   164b4:	ldr	r2, [r5, #144]	; 0x90
   164b8:	ldr	r1, [r3, #3284]	; 0xcd4
   164bc:	bl	15318 <__assert_fail@plt+0x35a4>
   164c0:	mov	r4, r0
   164c4:	ldr	r0, [r6, #148]	; 0x94
   164c8:	cmp	r0, #0
   164cc:	bne	16474 <__assert_fail@plt+0x4700>
   164d0:	movw	r3, #4912	; 0x1330
   164d4:	movt	r3, #4
   164d8:	ldr	r0, [r6]
   164dc:	ldr	r2, [r6, #144]	; 0x90
   164e0:	ldr	r1, [r3, #3284]	; 0xcd4
   164e4:	bl	15318 <__assert_fail@plt+0x35a4>
   164e8:	b	16474 <__assert_fail@plt+0x4700>
   164ec:	strd	r4, [sp, #-16]!
   164f0:	mov	r5, r0
   164f4:	ldr	r4, [r0, #148]	; 0x94
   164f8:	str	r6, [sp, #8]
   164fc:	mov	r6, r1
   16500:	str	lr, [sp, #12]
   16504:	cmp	r4, #0
   16508:	beq	1654c <__assert_fail@plt+0x47d8>
   1650c:	ldr	r0, [r6, #148]	; 0x94
   16510:	cmp	r0, #0
   16514:	beq	16574 <__assert_fail@plt+0x4800>
   16518:	subs	r0, r4, r0
   1651c:	bne	1653c <__assert_fail@plt+0x47c8>
   16520:	ldr	r0, [r5]
   16524:	ldr	r1, [r6]
   16528:	ldrd	r4, [sp]
   1652c:	ldr	r6, [sp, #8]
   16530:	ldr	lr, [sp, #12]
   16534:	add	sp, sp, #16
   16538:	b	118a0 <strcmp@plt>
   1653c:	ldrd	r4, [sp]
   16540:	ldr	r6, [sp, #8]
   16544:	add	sp, sp, #12
   16548:	pop	{pc}		; (ldr pc, [sp], #4)
   1654c:	movw	r3, #4912	; 0x1330
   16550:	movt	r3, #4
   16554:	ldr	r0, [r0]
   16558:	ldr	r2, [r5, #144]	; 0x90
   1655c:	ldr	r1, [r3, #3284]	; 0xcd4
   16560:	bl	15318 <__assert_fail@plt+0x35a4>
   16564:	mov	r4, r0
   16568:	ldr	r0, [r6, #148]	; 0x94
   1656c:	cmp	r0, #0
   16570:	bne	16518 <__assert_fail@plt+0x47a4>
   16574:	movw	r3, #4912	; 0x1330
   16578:	movt	r3, #4
   1657c:	ldr	r0, [r6]
   16580:	ldr	r2, [r6, #144]	; 0x90
   16584:	ldr	r1, [r3, #3284]	; 0xcd4
   16588:	bl	15318 <__assert_fail@plt+0x35a4>
   1658c:	b	16518 <__assert_fail@plt+0x47a4>
   16590:	strd	r4, [sp, #-16]!
   16594:	mov	r5, r1
   16598:	ldr	r4, [r0, #148]	; 0x94
   1659c:	str	r6, [sp, #8]
   165a0:	mov	r6, r0
   165a4:	str	lr, [sp, #12]
   165a8:	cmp	r4, #0
   165ac:	beq	16600 <__assert_fail@plt+0x488c>
   165b0:	ldr	r0, [r5, #148]	; 0x94
   165b4:	cmp	r0, #0
   165b8:	beq	16628 <__assert_fail@plt+0x48b4>
   165bc:	subs	r4, r4, r0
   165c0:	bne	165ec <__assert_fail@plt+0x4878>
   165c4:	bl	11bb8 <__errno_location@plt>
   165c8:	ldr	r6, [r6]
   165cc:	ldr	r1, [r5]
   165d0:	ldr	lr, [sp, #12]
   165d4:	str	r4, [r0]
   165d8:	mov	r0, r6
   165dc:	ldrd	r4, [sp]
   165e0:	ldr	r6, [sp, #8]
   165e4:	add	sp, sp, #16
   165e8:	b	11abc <strcoll@plt>
   165ec:	mov	r0, r4
   165f0:	ldrd	r4, [sp]
   165f4:	ldr	r6, [sp, #8]
   165f8:	add	sp, sp, #12
   165fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16600:	movw	r3, #4912	; 0x1330
   16604:	movt	r3, #4
   16608:	ldr	r0, [r0]
   1660c:	ldr	r2, [r6, #144]	; 0x90
   16610:	ldr	r1, [r3, #3284]	; 0xcd4
   16614:	bl	15318 <__assert_fail@plt+0x35a4>
   16618:	mov	r4, r0
   1661c:	ldr	r0, [r5, #148]	; 0x94
   16620:	cmp	r0, #0
   16624:	bne	165bc <__assert_fail@plt+0x4848>
   16628:	movw	r3, #4912	; 0x1330
   1662c:	movt	r3, #4
   16630:	ldr	r0, [r5]
   16634:	ldr	r2, [r5, #144]	; 0x90
   16638:	ldr	r1, [r3, #3284]	; 0xcd4
   1663c:	bl	15318 <__assert_fail@plt+0x35a4>
   16640:	b	165bc <__assert_fail@plt+0x4848>
   16644:	strd	r4, [sp, #-16]!
   16648:	mov	r5, r0
   1664c:	ldr	r4, [r1, #148]	; 0x94
   16650:	str	r6, [sp, #8]
   16654:	mov	r6, r1
   16658:	str	lr, [sp, #12]
   1665c:	cmp	r4, #0
   16660:	beq	166b4 <__assert_fail@plt+0x4940>
   16664:	ldr	r0, [r5, #148]	; 0x94
   16668:	cmp	r0, #0
   1666c:	beq	166dc <__assert_fail@plt+0x4968>
   16670:	subs	r4, r4, r0
   16674:	bne	166a0 <__assert_fail@plt+0x492c>
   16678:	bl	11bb8 <__errno_location@plt>
   1667c:	ldr	r6, [r6]
   16680:	ldr	r1, [r5]
   16684:	ldr	lr, [sp, #12]
   16688:	str	r4, [r0]
   1668c:	mov	r0, r6
   16690:	ldrd	r4, [sp]
   16694:	ldr	r6, [sp, #8]
   16698:	add	sp, sp, #16
   1669c:	b	11abc <strcoll@plt>
   166a0:	mov	r0, r4
   166a4:	ldrd	r4, [sp]
   166a8:	ldr	r6, [sp, #8]
   166ac:	add	sp, sp, #12
   166b0:	pop	{pc}		; (ldr pc, [sp], #4)
   166b4:	movw	r3, #4912	; 0x1330
   166b8:	movt	r3, #4
   166bc:	ldr	r0, [r6]
   166c0:	ldr	r2, [r6, #144]	; 0x90
   166c4:	ldr	r1, [r3, #3284]	; 0xcd4
   166c8:	bl	15318 <__assert_fail@plt+0x35a4>
   166cc:	mov	r4, r0
   166d0:	ldr	r0, [r5, #148]	; 0x94
   166d4:	cmp	r0, #0
   166d8:	bne	16670 <__assert_fail@plt+0x48fc>
   166dc:	movw	r3, #4912	; 0x1330
   166e0:	movt	r3, #4
   166e4:	ldr	r0, [r5]
   166e8:	ldr	r2, [r5, #144]	; 0x90
   166ec:	ldr	r1, [r3, #3284]	; 0xcd4
   166f0:	bl	15318 <__assert_fail@plt+0x35a4>
   166f4:	b	16670 <__assert_fail@plt+0x48fc>
   166f8:	strd	r4, [sp, #-16]!
   166fc:	ldr	r5, [r0]
   16700:	str	r6, [sp, #8]
   16704:	mov	r6, r1
   16708:	mov	r1, #46	; 0x2e
   1670c:	str	lr, [sp, #12]
   16710:	mov	r0, r5
   16714:	bl	11c78 <strrchr@plt>
   16718:	ldr	r6, [r6]
   1671c:	mov	r4, r0
   16720:	mov	r1, #46	; 0x2e
   16724:	mov	r0, r6
   16728:	bl	11c78 <strrchr@plt>
   1672c:	cmp	r4, #0
   16730:	beq	16768 <__assert_fail@plt+0x49f4>
   16734:	movw	r3, #316	; 0x13c
   16738:	movt	r3, #3
   1673c:	cmp	r0, #0
   16740:	moveq	r0, r3
   16744:	mov	r1, r0
   16748:	mov	r0, r4
   1674c:	bl	118a0 <strcmp@plt>
   16750:	cmp	r0, #0
   16754:	beq	16778 <__assert_fail@plt+0x4a04>
   16758:	ldrd	r4, [sp]
   1675c:	ldr	r6, [sp, #8]
   16760:	add	sp, sp, #12
   16764:	pop	{pc}		; (ldr pc, [sp], #4)
   16768:	cmp	r0, #0
   1676c:	movwne	r4, #316	; 0x13c
   16770:	movtne	r4, #3
   16774:	bne	16744 <__assert_fail@plt+0x49d0>
   16778:	mov	r1, r6
   1677c:	mov	r0, r5
   16780:	ldrd	r4, [sp]
   16784:	ldr	r6, [sp, #8]
   16788:	ldr	lr, [sp, #12]
   1678c:	add	sp, sp, #16
   16790:	b	118a0 <strcmp@plt>
   16794:	strd	r4, [sp, #-16]!
   16798:	ldr	r5, [r1]
   1679c:	mov	r1, #46	; 0x2e
   167a0:	str	r6, [sp, #8]
   167a4:	mov	r6, r0
   167a8:	str	lr, [sp, #12]
   167ac:	mov	r0, r5
   167b0:	bl	11c78 <strrchr@plt>
   167b4:	ldr	r6, [r6]
   167b8:	mov	r4, r0
   167bc:	mov	r1, #46	; 0x2e
   167c0:	mov	r0, r6
   167c4:	bl	11c78 <strrchr@plt>
   167c8:	cmp	r4, #0
   167cc:	beq	16804 <__assert_fail@plt+0x4a90>
   167d0:	movw	r3, #316	; 0x13c
   167d4:	movt	r3, #3
   167d8:	cmp	r0, #0
   167dc:	moveq	r0, r3
   167e0:	mov	r1, r0
   167e4:	mov	r0, r4
   167e8:	bl	118a0 <strcmp@plt>
   167ec:	cmp	r0, #0
   167f0:	beq	16814 <__assert_fail@plt+0x4aa0>
   167f4:	ldrd	r4, [sp]
   167f8:	ldr	r6, [sp, #8]
   167fc:	add	sp, sp, #12
   16800:	pop	{pc}		; (ldr pc, [sp], #4)
   16804:	cmp	r0, #0
   16808:	movwne	r4, #316	; 0x13c
   1680c:	movtne	r4, #3
   16810:	bne	167e0 <__assert_fail@plt+0x4a6c>
   16814:	mov	r1, r6
   16818:	mov	r0, r5
   1681c:	ldrd	r4, [sp]
   16820:	ldr	r6, [sp, #8]
   16824:	ldr	lr, [sp, #12]
   16828:	add	sp, sp, #16
   1682c:	b	118a0 <strcmp@plt>
   16830:	strd	r4, [sp, #-16]!
   16834:	movw	r4, #4912	; 0x1330
   16838:	movt	r4, #4
   1683c:	ldr	r1, [r4, #3296]	; 0xce0
   16840:	ldr	r3, [r4, #3344]	; 0xd10
   16844:	str	r6, [sp, #8]
   16848:	str	lr, [sp, #12]
   1684c:	add	r2, r1, r1, lsr #1
   16850:	cmp	r2, r3
   16854:	bhi	169ec <__assert_fail@plt+0x4c78>
   16858:	cmp	r1, #0
   1685c:	beq	16a18 <__assert_fail@plt+0x4ca4>
   16860:	movw	r2, #4912	; 0x1330
   16864:	movt	r2, #4
   16868:	ldr	r3, [r2, #3304]	; 0xce8
   1686c:	ldr	r2, [r2, #3348]	; 0xd14
   16870:	add	r0, r3, r1, lsl #2
   16874:	str	r2, [r3], #4
   16878:	cmp	r0, r3
   1687c:	add	r2, r2, #152	; 0x98
   16880:	bne	16874 <__assert_fail@plt+0x4b00>
   16884:	movw	r3, #4912	; 0x1330
   16888:	movt	r3, #4
   1688c:	ldr	r3, [r3, #3092]	; 0xc14
   16890:	cmp	r3, #2
   16894:	beq	16984 <__assert_fail@plt+0x4c10>
   16898:	movw	r2, #4912	; 0x1330
   1689c:	movt	r2, #4
   168a0:	ldr	r0, [r2, #3308]	; 0xcec
   168a4:	cmp	r0, #0
   168a8:	bne	1696c <__assert_fail@plt+0x4bf8>
   168ac:	cmp	r3, #6
   168b0:	beq	16950 <__assert_fail@plt+0x4bdc>
   168b4:	ldr	r0, [pc, #400]	; 16a4c <__assert_fail@plt+0x4cd8>
   168b8:	bl	118e8 <_setjmp@plt>
   168bc:	subs	lr, r0, #0
   168c0:	movw	r3, #4912	; 0x1330
   168c4:	movt	r3, #4
   168c8:	ldr	ip, [r3, #3092]	; 0xc14
   168cc:	beq	16960 <__assert_fail@plt+0x4bec>
   168d0:	cmp	ip, #4
   168d4:	beq	16a30 <__assert_fail@plt+0x4cbc>
   168d8:	ldr	r1, [r3, #3296]	; 0xce0
   168dc:	ldr	r0, [r3, #3304]	; 0xce8
   168e0:	cmp	r1, #0
   168e4:	beq	16904 <__assert_fail@plt+0x4b90>
   168e8:	add	lr, r0, r1, lsl #2
   168ec:	ldr	r2, [r3, #3348]	; 0xd14
   168f0:	mov	r3, r0
   168f4:	str	r2, [r3], #4
   168f8:	cmp	r3, lr
   168fc:	add	r2, r2, #152	; 0x98
   16900:	bne	168f4 <__assert_fail@plt+0x4b80>
   16904:	mov	lr, #1
   16908:	cmp	ip, #5
   1690c:	bne	16920 <__assert_fail@plt+0x4bac>
   16910:	movw	r3, #4912	; 0x1330
   16914:	movt	r3, #4
   16918:	ldr	ip, [r3, #3084]	; 0xc0c
   1691c:	add	ip, ip, #5
   16920:	movw	r2, #4912	; 0x1330
   16924:	movt	r2, #4
   16928:	add	ip, lr, ip, lsl #1
   1692c:	ldrb	lr, [r2, #3744]	; 0xea0
   16930:	movw	r3, #49168	; 0xc010
   16934:	movt	r3, #2
   16938:	ldrb	r2, [r2, #3745]	; 0xea1
   1693c:	add	ip, lr, ip, lsl #1
   16940:	add	ip, r2, ip, lsl #1
   16944:	add	r3, r3, ip, lsl #2
   16948:	ldr	r2, [r3, #76]	; 0x4c
   1694c:	bl	22b34 <__assert_fail@plt+0x10dc0>
   16950:	ldrd	r4, [sp]
   16954:	ldr	r6, [sp, #8]
   16958:	add	sp, sp, #12
   1695c:	pop	{pc}		; (ldr pc, [sp], #4)
   16960:	ldr	r1, [r3, #3296]	; 0xce0
   16964:	ldr	r0, [r3, #3304]	; 0xce8
   16968:	b	16908 <__assert_fail@plt+0x4b94>
   1696c:	ldr	r2, [r2, #3080]	; 0xc08
   16970:	sub	r2, r2, #2
   16974:	cmp	r2, #1
   16978:	bhi	168ac <__assert_fail@plt+0x4b38>
   1697c:	cmp	r1, #0
   16980:	beq	168ac <__assert_fail@plt+0x4b38>
   16984:	movw	r6, #4912	; 0x1330
   16988:	movt	r6, #4
   1698c:	mov	r4, #0
   16990:	b	169a4 <__assert_fail@plt+0x4c30>
   16994:	add	r4, r4, #1
   16998:	str	r0, [r5, #148]	; 0x94
   1699c:	cmp	r4, r1
   169a0:	bcs	169dc <__assert_fail@plt+0x4c68>
   169a4:	ldr	r3, [r6, #3304]	; 0xce8
   169a8:	ldr	r5, [r3, r4, lsl #2]
   169ac:	ldr	r0, [r5, #148]	; 0x94
   169b0:	cmp	r0, #0
   169b4:	bne	16994 <__assert_fail@plt+0x4c20>
   169b8:	ldr	r0, [r5]
   169bc:	add	r4, r4, #1
   169c0:	ldr	r2, [r5, #144]	; 0x90
   169c4:	ldr	r1, [r6, #3284]	; 0xcd4
   169c8:	bl	15318 <__assert_fail@plt+0x35a4>
   169cc:	ldr	r1, [r6, #3296]	; 0xce0
   169d0:	str	r0, [r5, #148]	; 0x94
   169d4:	cmp	r4, r1
   169d8:	bcc	169a4 <__assert_fail@plt+0x4c30>
   169dc:	movw	r3, #4912	; 0x1330
   169e0:	movt	r3, #4
   169e4:	ldr	r3, [r3, #3092]	; 0xc14
   169e8:	b	168ac <__assert_fail@plt+0x4b38>
   169ec:	ldr	r0, [r4, #3304]	; 0xce8
   169f0:	bl	1ee98 <__assert_fail@plt+0xd124>
   169f4:	mov	r1, #12
   169f8:	ldr	r0, [r4, #3296]	; 0xce0
   169fc:	bl	29ef4 <_obstack_memory_used@@Base+0x4e3c>
   16a00:	ldr	r1, [r4, #3296]	; 0xce0
   16a04:	str	r0, [r4, #3304]	; 0xce8
   16a08:	add	r3, r1, r1, lsl #1
   16a0c:	cmp	r1, #0
   16a10:	str	r3, [r4, #3344]	; 0xd10
   16a14:	bne	16860 <__assert_fail@plt+0x4aec>
   16a18:	movw	r3, #4912	; 0x1330
   16a1c:	movt	r3, #4
   16a20:	ldr	r3, [r3, #3092]	; 0xc14
   16a24:	cmp	r3, #2
   16a28:	bne	16898 <__assert_fail@plt+0x4b24>
   16a2c:	b	168b4 <__assert_fail@plt+0x4b40>
   16a30:	movw	r1, #55200	; 0xd7a0
   16a34:	movt	r1, #2
   16a38:	ldr	r3, [pc, #16]	; 16a50 <__assert_fail@plt+0x4cdc>
   16a3c:	movw	r0, #55212	; 0xd7ac
   16a40:	movt	r0, #2
   16a44:	movw	r2, #4102	; 0x1006
   16a48:	bl	11d74 <__assert_fail@plt>
   16a4c:	andeq	r2, r4, r8, asr #32
   16a50:	andeq	ip, r2, r0, asr r0
   16a54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16a58:	ldr	r5, [r0]
   16a5c:	strd	r6, [sp, #8]
   16a60:	mov	r6, r1
   16a64:	mov	r1, #46	; 0x2e
   16a68:	str	r8, [sp, #16]
   16a6c:	str	lr, [sp, #20]
   16a70:	mov	r0, r5
   16a74:	bl	11c78 <strrchr@plt>
   16a78:	ldr	r6, [r6]
   16a7c:	mov	r4, r0
   16a80:	mov	r1, #46	; 0x2e
   16a84:	mov	r0, r6
   16a88:	bl	11c78 <strrchr@plt>
   16a8c:	cmp	r0, #0
   16a90:	movw	r3, #316	; 0x13c
   16a94:	movt	r3, #3
   16a98:	movne	r7, r0
   16a9c:	moveq	r7, r3
   16aa0:	cmp	r4, #0
   16aa4:	moveq	r4, r3
   16aa8:	bl	11bb8 <__errno_location@plt>
   16aac:	mov	r3, r0
   16ab0:	mov	r2, #0
   16ab4:	mov	r1, r7
   16ab8:	mov	r0, r4
   16abc:	str	r2, [r3]
   16ac0:	bl	11abc <strcoll@plt>
   16ac4:	cmp	r0, #0
   16ac8:	bne	16aec <__assert_fail@plt+0x4d78>
   16acc:	mov	r1, r6
   16ad0:	mov	r0, r5
   16ad4:	ldrd	r4, [sp]
   16ad8:	ldrd	r6, [sp, #8]
   16adc:	ldr	r8, [sp, #16]
   16ae0:	ldr	lr, [sp, #20]
   16ae4:	add	sp, sp, #24
   16ae8:	b	11abc <strcoll@plt>
   16aec:	ldrd	r4, [sp]
   16af0:	ldrd	r6, [sp, #8]
   16af4:	ldr	r8, [sp, #16]
   16af8:	add	sp, sp, #20
   16afc:	pop	{pc}		; (ldr pc, [sp], #4)
   16b00:	strd	r4, [sp, #-16]!
   16b04:	ldrd	r2, [r1, #64]	; 0x40
   16b08:	ldrd	r4, [r0, #64]	; 0x40
   16b0c:	str	r6, [sp, #8]
   16b10:	str	lr, [sp, #12]
   16b14:	cmp	r2, r4
   16b18:	sbcs	ip, r3, r5
   16b1c:	blt	16b60 <__assert_fail@plt+0x4dec>
   16b20:	cmp	r3, r5
   16b24:	cmpeq	r2, r4
   16b28:	bne	16b74 <__assert_fail@plt+0x4e00>
   16b2c:	ldr	r5, [r0]
   16b30:	ldr	r4, [r1]
   16b34:	bl	11bb8 <__errno_location@plt>
   16b38:	mov	r3, r0
   16b3c:	mov	r2, #0
   16b40:	ldr	r6, [sp, #8]
   16b44:	mov	r0, r5
   16b48:	ldr	lr, [sp, #12]
   16b4c:	mov	r1, r4
   16b50:	ldrd	r4, [sp]
   16b54:	add	sp, sp, #16
   16b58:	str	r2, [r3]
   16b5c:	b	11abc <strcoll@plt>
   16b60:	ldrd	r4, [sp]
   16b64:	mvn	r0, #0
   16b68:	ldr	r6, [sp, #8]
   16b6c:	add	sp, sp, #12
   16b70:	pop	{pc}		; (ldr pc, [sp], #4)
   16b74:	cmp	r4, r2
   16b78:	ldr	r6, [sp, #8]
   16b7c:	sbcs	r3, r5, r3
   16b80:	ldrd	r4, [sp]
   16b84:	add	sp, sp, #12
   16b88:	movlt	r0, #1
   16b8c:	movge	r0, #0
   16b90:	pop	{pc}		; (ldr pc, [sp], #4)
   16b94:	strd	r4, [sp, #-16]!
   16b98:	ldrd	r2, [r0, #64]	; 0x40
   16b9c:	ldrd	r4, [r1, #64]	; 0x40
   16ba0:	str	r6, [sp, #8]
   16ba4:	str	lr, [sp, #12]
   16ba8:	cmp	r2, r4
   16bac:	sbcs	ip, r3, r5
   16bb0:	blt	16bf4 <__assert_fail@plt+0x4e80>
   16bb4:	cmp	r3, r5
   16bb8:	cmpeq	r2, r4
   16bbc:	bne	16c08 <__assert_fail@plt+0x4e94>
   16bc0:	ldr	r5, [r1]
   16bc4:	ldr	r4, [r0]
   16bc8:	bl	11bb8 <__errno_location@plt>
   16bcc:	mov	r3, r0
   16bd0:	mov	r2, #0
   16bd4:	ldr	r6, [sp, #8]
   16bd8:	mov	r0, r5
   16bdc:	ldr	lr, [sp, #12]
   16be0:	mov	r1, r4
   16be4:	ldrd	r4, [sp]
   16be8:	add	sp, sp, #16
   16bec:	str	r2, [r3]
   16bf0:	b	11abc <strcoll@plt>
   16bf4:	ldrd	r4, [sp]
   16bf8:	mvn	r0, #0
   16bfc:	ldr	r6, [sp, #8]
   16c00:	add	sp, sp, #12
   16c04:	pop	{pc}		; (ldr pc, [sp], #4)
   16c08:	cmp	r4, r2
   16c0c:	ldr	r6, [sp, #8]
   16c10:	sbcs	r3, r5, r3
   16c14:	ldrd	r4, [sp]
   16c18:	add	sp, sp, #12
   16c1c:	movlt	r0, #1
   16c20:	movge	r0, #0
   16c24:	pop	{pc}		; (ldr pc, [sp], #4)
   16c28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16c2c:	ldr	r5, [r1]
   16c30:	mov	r1, #46	; 0x2e
   16c34:	strd	r6, [sp, #8]
   16c38:	mov	r6, r0
   16c3c:	str	r8, [sp, #16]
   16c40:	str	lr, [sp, #20]
   16c44:	mov	r0, r5
   16c48:	bl	11c78 <strrchr@plt>
   16c4c:	ldr	r6, [r6]
   16c50:	mov	r4, r0
   16c54:	mov	r1, #46	; 0x2e
   16c58:	mov	r0, r6
   16c5c:	bl	11c78 <strrchr@plt>
   16c60:	cmp	r0, #0
   16c64:	movw	r3, #316	; 0x13c
   16c68:	movt	r3, #3
   16c6c:	movne	r7, r0
   16c70:	moveq	r7, r3
   16c74:	cmp	r4, #0
   16c78:	moveq	r4, r3
   16c7c:	bl	11bb8 <__errno_location@plt>
   16c80:	mov	r3, r0
   16c84:	mov	r2, #0
   16c88:	mov	r1, r7
   16c8c:	mov	r0, r4
   16c90:	str	r2, [r3]
   16c94:	bl	11abc <strcoll@plt>
   16c98:	cmp	r0, #0
   16c9c:	bne	16cc0 <__assert_fail@plt+0x4f4c>
   16ca0:	mov	r1, r6
   16ca4:	mov	r0, r5
   16ca8:	ldrd	r4, [sp]
   16cac:	ldrd	r6, [sp, #8]
   16cb0:	ldr	r8, [sp, #16]
   16cb4:	ldr	lr, [sp, #20]
   16cb8:	add	sp, sp, #24
   16cbc:	b	11abc <strcoll@plt>
   16cc0:	ldrd	r4, [sp]
   16cc4:	ldrd	r6, [sp, #8]
   16cc8:	ldr	r8, [sp, #16]
   16ccc:	add	sp, sp, #20
   16cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16cd8:	strd	r6, [sp, #8]
   16cdc:	str	r8, [sp, #16]
   16ce0:	subs	r8, r0, #0
   16ce4:	str	lr, [sp, #20]
   16ce8:	sub	sp, sp, #8
   16cec:	beq	16d8c <__assert_fail@plt+0x5018>
   16cf0:	mov	r1, #0
   16cf4:	movw	r6, #4900	; 0x1324
   16cf8:	movt	r6, #4
   16cfc:	ldr	r4, [pc, #192]	; 16dc4 <__assert_fail@plt+0x5050>
   16d00:	mov	r7, #32
   16d04:	bl	22878 <__assert_fail@plt+0x10b04>
   16d08:	ldr	r3, [sp, #32]
   16d0c:	sub	r5, r3, r0
   16d10:	mov	r0, r8
   16d14:	bl	11b94 <strlen@plt>
   16d18:	mov	r1, r0
   16d1c:	mov	r0, r8
   16d20:	bic	r5, r5, r5, asr #31
   16d24:	bl	14c78 <__assert_fail@plt+0x2f04>
   16d28:	ldr	r0, [r6]
   16d2c:	ldr	r3, [r4, #-8]
   16d30:	ldr	r2, [r4, #-4]
   16d34:	ldr	r1, [r0, #20]
   16d38:	adds	r3, r3, #1
   16d3c:	ldr	ip, [r0, #24]
   16d40:	adc	r2, r2, #0
   16d44:	str	r3, [r4, #-8]
   16d48:	add	r3, r1, #1
   16d4c:	str	r2, [r4, #-4]
   16d50:	cmp	r1, ip
   16d54:	strcc	r3, [r0, #20]
   16d58:	strbcc	r7, [r1]
   16d5c:	bcs	16d80 <__assert_fail@plt+0x500c>
   16d60:	subs	r5, r5, #1
   16d64:	bcs	16d28 <__assert_fail@plt+0x4fb4>
   16d68:	add	sp, sp, #8
   16d6c:	ldrd	r4, [sp]
   16d70:	ldrd	r6, [sp, #8]
   16d74:	ldr	r8, [sp, #16]
   16d78:	add	sp, sp, #20
   16d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d80:	mov	r1, #32
   16d84:	bl	11c48 <__overflow@plt>
   16d88:	b	16d60 <__assert_fail@plt+0x4fec>
   16d8c:	movw	r1, #55240	; 0xd7c8
   16d90:	movt	r1, #2
   16d94:	strd	r2, [sp]
   16d98:	mov	r0, #1
   16d9c:	ldr	r2, [sp, #32]
   16da0:	bl	11bf4 <__printf_chk@plt>
   16da4:	ldr	ip, [pc, #24]	; 16dc4 <__assert_fail@plt+0x5050>
   16da8:	ldrd	r2, [ip, #-8]
   16dac:	adds	r4, r2, r0
   16db0:	adc	r5, r3, r0, asr #31
   16db4:	mov	r0, r4
   16db8:	mov	r1, r5
   16dbc:	strd	r0, [ip, #-8]
   16dc0:	b	16d68 <__assert_fail@plt+0x4ff4>
   16dc4:	andeq	r1, r4, r0, ror #30
   16dc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16dcc:	strd	r6, [sp, #8]
   16dd0:	subs	r7, r0, #0
   16dd4:	movw	r6, #4912	; 0x1330
   16dd8:	movt	r6, #4
   16ddc:	strd	r8, [sp, #16]
   16de0:	mov	r8, r1
   16de4:	strd	sl, [sp, #24]
   16de8:	str	lr, [sp, #32]
   16dec:	sub	sp, sp, #4
   16df0:	beq	16e30 <__assert_fail@plt+0x50bc>
   16df4:	ldr	r3, [r6, #3748]	; 0xea4
   16df8:	cmp	r3, #0
   16dfc:	beq	16e30 <__assert_fail@plt+0x50bc>
   16e00:	mov	r0, #16
   16e04:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   16e08:	mov	r4, r0
   16e0c:	mov	r0, r7
   16e10:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   16e14:	ldr	r2, [r6, #3752]	; 0xea8
   16e18:	mov	r3, #0
   16e1c:	str	r4, [r6, #3752]	; 0xea8
   16e20:	str	r3, [r4]
   16e24:	str	r0, [r4, #4]
   16e28:	strb	r3, [r4, #8]
   16e2c:	str	r2, [r4, #12]
   16e30:	ldr	r3, [r6, #3296]	; 0xce0
   16e34:	cmp	r3, #0
   16e38:	sub	r4, r3, #1
   16e3c:	bne	16ebc <__assert_fail@plt+0x5148>
   16e40:	b	16fec <__assert_fail@plt+0x5278>
   16e44:	mov	r0, sl
   16e48:	bl	1d7a8 <__assert_fail@plt+0xba34>
   16e4c:	ldrb	r3, [r0]
   16e50:	cmp	r3, #46	; 0x2e
   16e54:	beq	1700c <__assert_fail@plt+0x5298>
   16e58:	ldrb	r3, [sl]
   16e5c:	cmp	r3, #47	; 0x2f
   16e60:	bne	16f14 <__assert_fail@plt+0x51a0>
   16e64:	ldr	r9, [r5, #4]
   16e68:	mov	r0, #16
   16e6c:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   16e70:	mov	fp, r0
   16e74:	cmp	r9, #0
   16e78:	beq	17030 <__assert_fail@plt+0x52bc>
   16e7c:	mov	r0, r9
   16e80:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   16e84:	mov	r9, r0
   16e88:	cmp	sl, #0
   16e8c:	str	r9, [fp, #4]
   16e90:	bne	16f04 <__assert_fail@plt+0x5190>
   16e94:	ldr	r3, [r6, #3752]	; 0xea8
   16e98:	str	sl, [fp]
   16e9c:	strb	r8, [fp, #8]
   16ea0:	str	fp, [r6, #3752]	; 0xea8
   16ea4:	str	r3, [fp, #12]
   16ea8:	ldr	r3, [r5, #120]	; 0x78
   16eac:	cmp	r3, #9
   16eb0:	beq	16f80 <__assert_fail@plt+0x520c>
   16eb4:	subs	r4, r4, #1
   16eb8:	bcc	16fb4 <__assert_fail@plt+0x5240>
   16ebc:	ldr	r3, [r6, #3304]	; 0xce8
   16ec0:	ldr	r5, [r3, r4, lsl #2]
   16ec4:	ldr	r3, [r5, #120]	; 0x78
   16ec8:	cmp	r3, #9
   16ecc:	cmpne	r3, #3
   16ed0:	bne	16eb4 <__assert_fail@plt+0x5140>
   16ed4:	cmp	r7, #0
   16ed8:	ldr	sl, [r5]
   16edc:	bne	16e44 <__assert_fail@plt+0x50d0>
   16ee0:	ldr	r9, [r5, #4]
   16ee4:	mov	r0, #16
   16ee8:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   16eec:	mov	fp, r0
   16ef0:	cmp	r9, #0
   16ef4:	bne	16e7c <__assert_fail@plt+0x5108>
   16ef8:	cmp	sl, #0
   16efc:	str	r9, [fp, #4]
   16f00:	beq	16e94 <__assert_fail@plt+0x5120>
   16f04:	mov	r0, sl
   16f08:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   16f0c:	mov	sl, r0
   16f10:	b	16e94 <__assert_fail@plt+0x5120>
   16f14:	mov	r1, sl
   16f18:	mov	r2, #0
   16f1c:	mov	r0, r7
   16f20:	bl	1e6ec <__assert_fail@plt+0xc978>
   16f24:	ldr	r9, [r5, #4]
   16f28:	mov	fp, r0
   16f2c:	mov	r0, #16
   16f30:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   16f34:	mov	sl, r0
   16f38:	cmp	r9, #0
   16f3c:	beq	16f4c <__assert_fail@plt+0x51d8>
   16f40:	mov	r0, r9
   16f44:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   16f48:	mov	r9, r0
   16f4c:	mov	r0, fp
   16f50:	str	r9, [sl, #4]
   16f54:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   16f58:	ldr	r3, [r6, #3752]	; 0xea8
   16f5c:	str	r0, [sl]
   16f60:	mov	r0, fp
   16f64:	strb	r8, [sl, #8]
   16f68:	str	sl, [r6, #3752]	; 0xea8
   16f6c:	str	r3, [sl, #12]
   16f70:	bl	1ee98 <__assert_fail@plt+0xd124>
   16f74:	ldr	r3, [r5, #120]	; 0x78
   16f78:	cmp	r3, #9
   16f7c:	bne	16eb4 <__assert_fail@plt+0x5140>
   16f80:	ldr	r0, [r5]
   16f84:	bl	1ee98 <__assert_fail@plt+0xd124>
   16f88:	ldr	r0, [r5, #4]
   16f8c:	bl	1ee98 <__assert_fail@plt+0xd124>
   16f90:	ldr	r0, [r5, #8]
   16f94:	bl	1ee98 <__assert_fail@plt+0xd124>
   16f98:	ldr	r3, [pc, #164]	; 17044 <__assert_fail@plt+0x52d0>
   16f9c:	ldr	r0, [r5, #128]	; 0x80
   16fa0:	cmp	r0, r3
   16fa4:	beq	16eb4 <__assert_fail@plt+0x5140>
   16fa8:	bl	11ce4 <freecon@plt>
   16fac:	subs	r4, r4, #1
   16fb0:	bcs	16ebc <__assert_fail@plt+0x5148>
   16fb4:	ldr	r3, [r6, #3296]	; 0xce0
   16fb8:	cmp	r3, #0
   16fbc:	beq	16fec <__assert_fail@plt+0x5278>
   16fc0:	ldr	ip, [r6, #3304]	; 0xce8
   16fc4:	add	lr, ip, r3, lsl #2
   16fc8:	mov	r2, ip
   16fcc:	mov	r3, #0
   16fd0:	ldr	r1, [r2], #4
   16fd4:	ldr	r0, [r1, #120]	; 0x78
   16fd8:	str	r1, [ip, r3, lsl #2]
   16fdc:	cmp	r0, #9
   16fe0:	addne	r3, r3, #1
   16fe4:	cmp	r2, lr
   16fe8:	bne	16fd0 <__assert_fail@plt+0x525c>
   16fec:	str	r3, [r6, #3296]	; 0xce0
   16ff0:	add	sp, sp, #4
   16ff4:	ldrd	r4, [sp]
   16ff8:	ldrd	r6, [sp, #8]
   16ffc:	ldrd	r8, [sp, #16]
   17000:	ldrd	sl, [sp, #24]
   17004:	add	sp, sp, #32
   17008:	pop	{pc}		; (ldr pc, [sp], #4)
   1700c:	ldrb	r3, [r0, #1]
   17010:	cmp	r3, #46	; 0x2e
   17014:	moveq	r3, #2
   17018:	movne	r3, #1
   1701c:	ldrb	r3, [r0, r3]
   17020:	cmp	r3, #47	; 0x2f
   17024:	cmpne	r3, #0
   17028:	beq	16eb4 <__assert_fail@plt+0x5140>
   1702c:	b	16e58 <__assert_fail@plt+0x50e4>
   17030:	mov	r0, sl
   17034:	str	r9, [fp, #4]
   17038:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   1703c:	mov	sl, r0
   17040:	b	16e94 <__assert_fail@plt+0x5120>
   17044:	andeq	r1, r4, r0, lsr #5
   17048:	ldr	r3, [r0, #120]	; 0x78
   1704c:	strd	r4, [sp, #-16]!
   17050:	ldr	r2, [r1, #120]	; 0x78
   17054:	str	r6, [sp, #8]
   17058:	str	lr, [sp, #12]
   1705c:	cmp	r3, #3
   17060:	cmpne	r3, #9
   17064:	moveq	r3, #1
   17068:	movne	r3, #0
   1706c:	cmp	r2, #9
   17070:	cmpne	r2, #3
   17074:	beq	170a8 <__assert_fail@plt+0x5334>
   17078:	ldr	r2, [r1, #124]	; 0x7c
   1707c:	and	r2, r2, #61440	; 0xf000
   17080:	cmp	r2, #16384	; 0x4000
   17084:	beq	170a8 <__assert_fail@plt+0x5334>
   17088:	cmp	r3, #0
   1708c:	beq	17128 <__assert_fail@plt+0x53b4>
   17090:	mvn	r4, #0
   17094:	mov	r0, r4
   17098:	ldrd	r4, [sp]
   1709c:	ldr	r6, [sp, #8]
   170a0:	add	sp, sp, #12
   170a4:	pop	{pc}		; (ldr pc, [sp], #4)
   170a8:	cmp	r3, #0
   170ac:	moveq	r3, #1
   170b0:	beq	17128 <__assert_fail@plt+0x53b4>
   170b4:	ldr	r4, [r1, #88]	; 0x58
   170b8:	ldr	lr, [r0, #88]	; 0x58
   170bc:	ldr	ip, [r0, #92]	; 0x5c
   170c0:	ldr	r2, [r1, #92]	; 0x5c
   170c4:	cmp	lr, r4
   170c8:	movge	r3, #0
   170cc:	movlt	r3, #1
   170d0:	cmp	lr, r4
   170d4:	rsble	r3, r3, #0
   170d8:	rsbgt	r3, r3, #1
   170dc:	cmp	ip, r2
   170e0:	movge	r4, #0
   170e4:	movlt	r4, #1
   170e8:	cmp	ip, r2
   170ec:	rsble	r4, r4, #0
   170f0:	rsbgt	r4, r4, #1
   170f4:	adds	r4, r4, r3, lsl #1
   170f8:	bne	17094 <__assert_fail@plt+0x5320>
   170fc:	ldr	r6, [r1]
   17100:	ldr	r5, [r0]
   17104:	bl	11bb8 <__errno_location@plt>
   17108:	ldr	lr, [sp, #12]
   1710c:	str	r4, [r0]
   17110:	mov	r0, r6
   17114:	ldr	r6, [sp, #8]
   17118:	mov	r1, r5
   1711c:	ldrd	r4, [sp]
   17120:	add	sp, sp, #16
   17124:	b	11abc <strcoll@plt>
   17128:	ldr	r4, [r0, #124]	; 0x7c
   1712c:	and	r4, r4, #61440	; 0xf000
   17130:	cmp	r4, #16384	; 0x4000
   17134:	movne	r4, r3
   17138:	subeq	r4, r3, #1
   1713c:	cmp	r4, #0
   17140:	bne	17094 <__assert_fail@plt+0x5320>
   17144:	b	170b4 <__assert_fail@plt+0x5340>
   17148:	ldr	r3, [r0, #120]	; 0x78
   1714c:	strd	r4, [sp, #-16]!
   17150:	ldr	r2, [r1, #120]	; 0x78
   17154:	str	r6, [sp, #8]
   17158:	str	lr, [sp, #12]
   1715c:	cmp	r3, #3
   17160:	cmpne	r3, #9
   17164:	moveq	r3, #1
   17168:	movne	r3, #0
   1716c:	cmp	r2, #9
   17170:	cmpne	r2, #3
   17174:	beq	171a8 <__assert_fail@plt+0x5434>
   17178:	ldr	r2, [r1, #124]	; 0x7c
   1717c:	and	r2, r2, #61440	; 0xf000
   17180:	cmp	r2, #16384	; 0x4000
   17184:	beq	171a8 <__assert_fail@plt+0x5434>
   17188:	cmp	r3, #0
   1718c:	beq	17228 <__assert_fail@plt+0x54b4>
   17190:	mvn	r4, #0
   17194:	mov	r0, r4
   17198:	ldrd	r4, [sp]
   1719c:	ldr	r6, [sp, #8]
   171a0:	add	sp, sp, #12
   171a4:	pop	{pc}		; (ldr pc, [sp], #4)
   171a8:	cmp	r3, #0
   171ac:	moveq	r3, #1
   171b0:	beq	17228 <__assert_fail@plt+0x54b4>
   171b4:	ldr	r4, [r0, #96]	; 0x60
   171b8:	ldr	lr, [r1, #96]	; 0x60
   171bc:	ldr	r2, [r0, #100]	; 0x64
   171c0:	ldr	ip, [r1, #100]	; 0x64
   171c4:	cmp	lr, r4
   171c8:	movge	r3, #0
   171cc:	movlt	r3, #1
   171d0:	cmp	lr, r4
   171d4:	rsble	r3, r3, #0
   171d8:	rsbgt	r3, r3, #1
   171dc:	cmp	ip, r2
   171e0:	movge	r4, #0
   171e4:	movlt	r4, #1
   171e8:	cmp	ip, r2
   171ec:	rsble	r4, r4, #0
   171f0:	rsbgt	r4, r4, #1
   171f4:	adds	r4, r4, r3, lsl #1
   171f8:	bne	17194 <__assert_fail@plt+0x5420>
   171fc:	ldr	r6, [r0]
   17200:	ldr	r5, [r1]
   17204:	bl	11bb8 <__errno_location@plt>
   17208:	ldr	lr, [sp, #12]
   1720c:	str	r4, [r0]
   17210:	mov	r0, r6
   17214:	ldr	r6, [sp, #8]
   17218:	mov	r1, r5
   1721c:	ldrd	r4, [sp]
   17220:	add	sp, sp, #16
   17224:	b	11abc <strcoll@plt>
   17228:	ldr	r4, [r0, #124]	; 0x7c
   1722c:	and	r4, r4, #61440	; 0xf000
   17230:	cmp	r4, #16384	; 0x4000
   17234:	movne	r4, r3
   17238:	subeq	r4, r3, #1
   1723c:	cmp	r4, #0
   17240:	bne	17194 <__assert_fail@plt+0x5420>
   17244:	b	171b4 <__assert_fail@plt+0x5440>
   17248:	ldr	r3, [r0, #120]	; 0x78
   1724c:	ldr	r2, [r1, #120]	; 0x78
   17250:	cmp	r3, #9
   17254:	cmpne	r3, #3
   17258:	moveq	r3, #1
   1725c:	movne	r3, #0
   17260:	cmp	r2, #9
   17264:	cmpne	r2, #3
   17268:	beq	172a4 <__assert_fail@plt+0x5530>
   1726c:	ldr	r2, [r1, #124]	; 0x7c
   17270:	and	r2, r2, #61440	; 0xf000
   17274:	cmp	r2, #16384	; 0x4000
   17278:	beq	172a4 <__assert_fail@plt+0x5530>
   1727c:	cmp	r3, #0
   17280:	bne	17328 <__assert_fail@plt+0x55b4>
   17284:	ldr	r2, [r0, #124]	; 0x7c
   17288:	and	r2, r2, #61440	; 0xf000
   1728c:	cmp	r2, #16384	; 0x4000
   17290:	subeq	r3, r3, #1
   17294:	cmp	r3, #0
   17298:	beq	172b0 <__assert_fail@plt+0x553c>
   1729c:	mov	r0, r3
   172a0:	bx	lr
   172a4:	cmp	r3, #0
   172a8:	moveq	r3, #1
   172ac:	beq	17284 <__assert_fail@plt+0x5510>
   172b0:	strd	r4, [sp, #-16]!
   172b4:	ldrd	r2, [r1, #64]	; 0x40
   172b8:	ldrd	r4, [r0, #64]	; 0x40
   172bc:	str	r6, [sp, #8]
   172c0:	str	lr, [sp, #12]
   172c4:	cmp	r2, r4
   172c8:	sbcs	ip, r3, r5
   172cc:	blt	17310 <__assert_fail@plt+0x559c>
   172d0:	cmp	r3, r5
   172d4:	cmpeq	r2, r4
   172d8:	bne	17334 <__assert_fail@plt+0x55c0>
   172dc:	ldr	r5, [r0]
   172e0:	ldr	r4, [r1]
   172e4:	bl	11bb8 <__errno_location@plt>
   172e8:	mov	r3, r0
   172ec:	mov	r2, #0
   172f0:	ldr	r6, [sp, #8]
   172f4:	mov	r0, r5
   172f8:	ldr	lr, [sp, #12]
   172fc:	mov	r1, r4
   17300:	ldrd	r4, [sp]
   17304:	add	sp, sp, #16
   17308:	str	r2, [r3]
   1730c:	b	11abc <strcoll@plt>
   17310:	mvn	r3, #0
   17314:	ldrd	r4, [sp]
   17318:	mov	r0, r3
   1731c:	ldr	r6, [sp, #8]
   17320:	add	sp, sp, #12
   17324:	pop	{pc}		; (ldr pc, [sp], #4)
   17328:	mvn	r3, #0
   1732c:	mov	r0, r3
   17330:	bx	lr
   17334:	cmp	r4, r2
   17338:	sbcs	r3, r5, r3
   1733c:	movlt	r3, #1
   17340:	movge	r3, #0
   17344:	b	17314 <__assert_fail@plt+0x55a0>
   17348:	ldr	r3, [r0, #120]	; 0x78
   1734c:	strd	r4, [sp, #-16]!
   17350:	ldr	r2, [r1, #120]	; 0x78
   17354:	str	r6, [sp, #8]
   17358:	str	lr, [sp, #12]
   1735c:	cmp	r3, #3
   17360:	cmpne	r3, #9
   17364:	moveq	r3, #1
   17368:	movne	r3, #0
   1736c:	cmp	r2, #9
   17370:	cmpne	r2, #3
   17374:	beq	173a8 <__assert_fail@plt+0x5634>
   17378:	ldr	r2, [r1, #124]	; 0x7c
   1737c:	and	r2, r2, #61440	; 0xf000
   17380:	cmp	r2, #16384	; 0x4000
   17384:	beq	173a8 <__assert_fail@plt+0x5634>
   17388:	cmp	r3, #0
   1738c:	beq	17428 <__assert_fail@plt+0x56b4>
   17390:	mvn	r4, #0
   17394:	mov	r0, r4
   17398:	ldrd	r4, [sp]
   1739c:	ldr	r6, [sp, #8]
   173a0:	add	sp, sp, #12
   173a4:	pop	{pc}		; (ldr pc, [sp], #4)
   173a8:	cmp	r3, #0
   173ac:	moveq	r3, #1
   173b0:	beq	17428 <__assert_fail@plt+0x56b4>
   173b4:	ldr	r4, [r0, #104]	; 0x68
   173b8:	ldr	lr, [r1, #104]	; 0x68
   173bc:	ldr	r2, [r0, #108]	; 0x6c
   173c0:	ldr	ip, [r1, #108]	; 0x6c
   173c4:	cmp	lr, r4
   173c8:	movge	r3, #0
   173cc:	movlt	r3, #1
   173d0:	cmp	lr, r4
   173d4:	rsble	r3, r3, #0
   173d8:	rsbgt	r3, r3, #1
   173dc:	cmp	ip, r2
   173e0:	movge	r4, #0
   173e4:	movlt	r4, #1
   173e8:	cmp	ip, r2
   173ec:	rsble	r4, r4, #0
   173f0:	rsbgt	r4, r4, #1
   173f4:	adds	r4, r4, r3, lsl #1
   173f8:	bne	17394 <__assert_fail@plt+0x5620>
   173fc:	ldr	r6, [r0]
   17400:	ldr	r5, [r1]
   17404:	bl	11bb8 <__errno_location@plt>
   17408:	ldr	lr, [sp, #12]
   1740c:	str	r4, [r0]
   17410:	mov	r0, r6
   17414:	ldr	r6, [sp, #8]
   17418:	mov	r1, r5
   1741c:	ldrd	r4, [sp]
   17420:	add	sp, sp, #16
   17424:	b	11abc <strcoll@plt>
   17428:	ldr	r4, [r0, #124]	; 0x7c
   1742c:	and	r4, r4, #61440	; 0xf000
   17430:	cmp	r4, #16384	; 0x4000
   17434:	movne	r4, r3
   17438:	subeq	r4, r3, #1
   1743c:	cmp	r4, #0
   17440:	bne	17394 <__assert_fail@plt+0x5620>
   17444:	b	173b4 <__assert_fail@plt+0x5640>
   17448:	ldr	r3, [r0, #120]	; 0x78
   1744c:	strd	r4, [sp, #-16]!
   17450:	ldr	r2, [r1, #120]	; 0x78
   17454:	str	r6, [sp, #8]
   17458:	str	lr, [sp, #12]
   1745c:	cmp	r3, #3
   17460:	cmpne	r3, #9
   17464:	moveq	r3, #1
   17468:	movne	r3, #0
   1746c:	cmp	r2, #9
   17470:	cmpne	r2, #3
   17474:	beq	174a8 <__assert_fail@plt+0x5734>
   17478:	ldr	r2, [r1, #124]	; 0x7c
   1747c:	and	r2, r2, #61440	; 0xf000
   17480:	cmp	r2, #16384	; 0x4000
   17484:	beq	174a8 <__assert_fail@plt+0x5734>
   17488:	cmp	r3, #0
   1748c:	beq	17528 <__assert_fail@plt+0x57b4>
   17490:	mvn	r4, #0
   17494:	mov	r0, r4
   17498:	ldrd	r4, [sp]
   1749c:	ldr	r6, [sp, #8]
   174a0:	add	sp, sp, #12
   174a4:	pop	{pc}		; (ldr pc, [sp], #4)
   174a8:	cmp	r3, #0
   174ac:	moveq	r3, #1
   174b0:	beq	17528 <__assert_fail@plt+0x57b4>
   174b4:	ldr	r4, [r1, #104]	; 0x68
   174b8:	ldr	lr, [r0, #104]	; 0x68
   174bc:	ldr	ip, [r0, #108]	; 0x6c
   174c0:	ldr	r2, [r1, #108]	; 0x6c
   174c4:	cmp	lr, r4
   174c8:	movge	r3, #0
   174cc:	movlt	r3, #1
   174d0:	cmp	lr, r4
   174d4:	rsble	r3, r3, #0
   174d8:	rsbgt	r3, r3, #1
   174dc:	cmp	ip, r2
   174e0:	movge	r4, #0
   174e4:	movlt	r4, #1
   174e8:	cmp	ip, r2
   174ec:	rsble	r4, r4, #0
   174f0:	rsbgt	r4, r4, #1
   174f4:	adds	r4, r4, r3, lsl #1
   174f8:	bne	17494 <__assert_fail@plt+0x5720>
   174fc:	ldr	r6, [r1]
   17500:	ldr	r5, [r0]
   17504:	bl	11bb8 <__errno_location@plt>
   17508:	ldr	lr, [sp, #12]
   1750c:	str	r4, [r0]
   17510:	mov	r0, r6
   17514:	ldr	r6, [sp, #8]
   17518:	mov	r1, r5
   1751c:	ldrd	r4, [sp]
   17520:	add	sp, sp, #16
   17524:	b	11abc <strcoll@plt>
   17528:	ldr	r4, [r0, #124]	; 0x7c
   1752c:	and	r4, r4, #61440	; 0xf000
   17530:	cmp	r4, #16384	; 0x4000
   17534:	movne	r4, r3
   17538:	subeq	r4, r3, #1
   1753c:	cmp	r4, #0
   17540:	bne	17494 <__assert_fail@plt+0x5720>
   17544:	b	174b4 <__assert_fail@plt+0x5740>
   17548:	ldr	r3, [r0, #120]	; 0x78
   1754c:	strd	r4, [sp, #-16]!
   17550:	ldr	r2, [r1, #120]	; 0x78
   17554:	str	r6, [sp, #8]
   17558:	str	lr, [sp, #12]
   1755c:	cmp	r3, #3
   17560:	cmpne	r3, #9
   17564:	moveq	r3, #1
   17568:	movne	r3, #0
   1756c:	cmp	r2, #9
   17570:	cmpne	r2, #3
   17574:	beq	175a8 <__assert_fail@plt+0x5834>
   17578:	ldr	r2, [r1, #124]	; 0x7c
   1757c:	and	r2, r2, #61440	; 0xf000
   17580:	cmp	r2, #16384	; 0x4000
   17584:	beq	175a8 <__assert_fail@plt+0x5834>
   17588:	cmp	r3, #0
   1758c:	beq	17628 <__assert_fail@plt+0x58b4>
   17590:	mvn	r4, #0
   17594:	mov	r0, r4
   17598:	ldrd	r4, [sp]
   1759c:	ldr	r6, [sp, #8]
   175a0:	add	sp, sp, #12
   175a4:	pop	{pc}		; (ldr pc, [sp], #4)
   175a8:	cmp	r3, #0
   175ac:	moveq	r3, #1
   175b0:	beq	17628 <__assert_fail@plt+0x58b4>
   175b4:	ldr	r4, [r1, #96]	; 0x60
   175b8:	ldr	lr, [r0, #96]	; 0x60
   175bc:	ldr	ip, [r0, #100]	; 0x64
   175c0:	ldr	r2, [r1, #100]	; 0x64
   175c4:	cmp	lr, r4
   175c8:	movge	r3, #0
   175cc:	movlt	r3, #1
   175d0:	cmp	lr, r4
   175d4:	rsble	r3, r3, #0
   175d8:	rsbgt	r3, r3, #1
   175dc:	cmp	ip, r2
   175e0:	movge	r4, #0
   175e4:	movlt	r4, #1
   175e8:	cmp	ip, r2
   175ec:	rsble	r4, r4, #0
   175f0:	rsbgt	r4, r4, #1
   175f4:	adds	r4, r4, r3, lsl #1
   175f8:	bne	17594 <__assert_fail@plt+0x5820>
   175fc:	ldr	r6, [r1]
   17600:	ldr	r5, [r0]
   17604:	bl	11bb8 <__errno_location@plt>
   17608:	ldr	lr, [sp, #12]
   1760c:	str	r4, [r0]
   17610:	mov	r0, r6
   17614:	ldr	r6, [sp, #8]
   17618:	mov	r1, r5
   1761c:	ldrd	r4, [sp]
   17620:	add	sp, sp, #16
   17624:	b	11abc <strcoll@plt>
   17628:	ldr	r4, [r0, #124]	; 0x7c
   1762c:	and	r4, r4, #61440	; 0xf000
   17630:	cmp	r4, #16384	; 0x4000
   17634:	movne	r4, r3
   17638:	subeq	r4, r3, #1
   1763c:	cmp	r4, #0
   17640:	bne	17594 <__assert_fail@plt+0x5820>
   17644:	b	175b4 <__assert_fail@plt+0x5840>
   17648:	ldr	r3, [r0, #120]	; 0x78
   1764c:	strd	r4, [sp, #-16]!
   17650:	ldr	r2, [r1, #120]	; 0x78
   17654:	str	r6, [sp, #8]
   17658:	str	lr, [sp, #12]
   1765c:	cmp	r3, #3
   17660:	cmpne	r3, #9
   17664:	moveq	r3, #1
   17668:	movne	r3, #0
   1766c:	cmp	r2, #9
   17670:	cmpne	r2, #3
   17674:	beq	176a8 <__assert_fail@plt+0x5934>
   17678:	ldr	r2, [r1, #124]	; 0x7c
   1767c:	and	r2, r2, #61440	; 0xf000
   17680:	cmp	r2, #16384	; 0x4000
   17684:	beq	176a8 <__assert_fail@plt+0x5934>
   17688:	cmp	r3, #0
   1768c:	beq	17728 <__assert_fail@plt+0x59b4>
   17690:	mvn	r4, #0
   17694:	mov	r0, r4
   17698:	ldrd	r4, [sp]
   1769c:	ldr	r6, [sp, #8]
   176a0:	add	sp, sp, #12
   176a4:	pop	{pc}		; (ldr pc, [sp], #4)
   176a8:	cmp	r3, #0
   176ac:	moveq	r3, #1
   176b0:	beq	17728 <__assert_fail@plt+0x59b4>
   176b4:	ldr	r4, [r0, #96]	; 0x60
   176b8:	ldr	lr, [r1, #96]	; 0x60
   176bc:	ldr	r2, [r0, #100]	; 0x64
   176c0:	ldr	ip, [r1, #100]	; 0x64
   176c4:	cmp	lr, r4
   176c8:	movge	r3, #0
   176cc:	movlt	r3, #1
   176d0:	cmp	lr, r4
   176d4:	rsble	r3, r3, #0
   176d8:	rsbgt	r3, r3, #1
   176dc:	cmp	ip, r2
   176e0:	movge	r4, #0
   176e4:	movlt	r4, #1
   176e8:	cmp	ip, r2
   176ec:	rsble	r4, r4, #0
   176f0:	rsbgt	r4, r4, #1
   176f4:	adds	r4, r4, r3, lsl #1
   176f8:	bne	17694 <__assert_fail@plt+0x5920>
   176fc:	ldr	r6, [r0]
   17700:	ldr	r5, [r1]
   17704:	bl	11bb8 <__errno_location@plt>
   17708:	ldr	lr, [sp, #12]
   1770c:	str	r4, [r0]
   17710:	mov	r0, r6
   17714:	ldr	r6, [sp, #8]
   17718:	mov	r1, r5
   1771c:	ldrd	r4, [sp]
   17720:	add	sp, sp, #16
   17724:	b	11abc <strcoll@plt>
   17728:	ldr	r4, [r0, #124]	; 0x7c
   1772c:	and	r4, r4, #61440	; 0xf000
   17730:	cmp	r4, #16384	; 0x4000
   17734:	movne	r4, r3
   17738:	subeq	r4, r3, #1
   1773c:	cmp	r4, #0
   17740:	bne	17694 <__assert_fail@plt+0x5920>
   17744:	b	176b4 <__assert_fail@plt+0x5940>
   17748:	ldr	r3, [r0, #120]	; 0x78
   1774c:	strd	r4, [sp, #-16]!
   17750:	ldr	r2, [r1, #120]	; 0x78
   17754:	str	r6, [sp, #8]
   17758:	str	lr, [sp, #12]
   1775c:	cmp	r3, #3
   17760:	cmpne	r3, #9
   17764:	moveq	r3, #1
   17768:	movne	r3, #0
   1776c:	cmp	r2, #9
   17770:	cmpne	r2, #3
   17774:	beq	177a8 <__assert_fail@plt+0x5a34>
   17778:	ldr	r2, [r1, #124]	; 0x7c
   1777c:	and	r2, r2, #61440	; 0xf000
   17780:	cmp	r2, #16384	; 0x4000
   17784:	beq	177a8 <__assert_fail@plt+0x5a34>
   17788:	cmp	r3, #0
   1778c:	beq	17828 <__assert_fail@plt+0x5ab4>
   17790:	mvn	r4, #0
   17794:	mov	r0, r4
   17798:	ldrd	r4, [sp]
   1779c:	ldr	r6, [sp, #8]
   177a0:	add	sp, sp, #12
   177a4:	pop	{pc}		; (ldr pc, [sp], #4)
   177a8:	cmp	r3, #0
   177ac:	moveq	r3, #1
   177b0:	beq	17828 <__assert_fail@plt+0x5ab4>
   177b4:	ldr	r4, [r0, #88]	; 0x58
   177b8:	ldr	lr, [r1, #88]	; 0x58
   177bc:	ldr	r2, [r0, #92]	; 0x5c
   177c0:	ldr	ip, [r1, #92]	; 0x5c
   177c4:	cmp	lr, r4
   177c8:	movge	r3, #0
   177cc:	movlt	r3, #1
   177d0:	cmp	lr, r4
   177d4:	rsble	r3, r3, #0
   177d8:	rsbgt	r3, r3, #1
   177dc:	cmp	ip, r2
   177e0:	movge	r4, #0
   177e4:	movlt	r4, #1
   177e8:	cmp	ip, r2
   177ec:	rsble	r4, r4, #0
   177f0:	rsbgt	r4, r4, #1
   177f4:	adds	r4, r4, r3, lsl #1
   177f8:	bne	17794 <__assert_fail@plt+0x5a20>
   177fc:	ldr	r6, [r0]
   17800:	ldr	r5, [r1]
   17804:	bl	11bb8 <__errno_location@plt>
   17808:	ldr	lr, [sp, #12]
   1780c:	str	r4, [r0]
   17810:	mov	r0, r6
   17814:	ldr	r6, [sp, #8]
   17818:	mov	r1, r5
   1781c:	ldrd	r4, [sp]
   17820:	add	sp, sp, #16
   17824:	b	11abc <strcoll@plt>
   17828:	ldr	r4, [r0, #124]	; 0x7c
   1782c:	and	r4, r4, #61440	; 0xf000
   17830:	cmp	r4, #16384	; 0x4000
   17834:	movne	r4, r3
   17838:	subeq	r4, r3, #1
   1783c:	cmp	r4, #0
   17840:	bne	17794 <__assert_fail@plt+0x5a20>
   17844:	b	177b4 <__assert_fail@plt+0x5a40>
   17848:	ldr	r3, [r0, #120]	; 0x78
   1784c:	mov	r2, r1
   17850:	ldr	r1, [r1, #120]	; 0x78
   17854:	cmp	r3, #3
   17858:	cmpne	r3, #9
   1785c:	moveq	r3, #1
   17860:	movne	r3, #0
   17864:	cmp	r1, #9
   17868:	cmpne	r1, #3
   1786c:	beq	17894 <__assert_fail@plt+0x5b20>
   17870:	ldr	r1, [r2, #124]	; 0x7c
   17874:	and	r1, r1, #61440	; 0xf000
   17878:	cmp	r1, #16384	; 0x4000
   1787c:	beq	17894 <__assert_fail@plt+0x5b20>
   17880:	cmp	r3, #0
   17884:	beq	17908 <__assert_fail@plt+0x5b94>
   17888:	mvn	r3, #0
   1788c:	mov	r0, r3
   17890:	bx	lr
   17894:	cmp	r3, #0
   17898:	moveq	r3, #1
   1789c:	beq	17908 <__assert_fail@plt+0x5b94>
   178a0:	str	r4, [sp, #-8]!
   178a4:	ldr	r3, [r2, #96]	; 0x60
   178a8:	ldr	r4, [r0, #96]	; 0x60
   178ac:	ldr	ip, [r2, #100]	; 0x64
   178b0:	str	lr, [sp, #4]
   178b4:	ldr	lr, [r0, #100]	; 0x64
   178b8:	cmp	r4, r3
   178bc:	movge	r1, #0
   178c0:	movlt	r1, #1
   178c4:	cmp	r4, r3
   178c8:	rsble	r1, r1, #0
   178cc:	rsbgt	r1, r1, #1
   178d0:	cmp	lr, ip
   178d4:	movge	r3, #0
   178d8:	movlt	r3, #1
   178dc:	cmp	lr, ip
   178e0:	rsble	r3, r3, #0
   178e4:	rsbgt	r3, r3, #1
   178e8:	adds	r3, r3, r1, lsl #1
   178ec:	bne	17928 <__assert_fail@plt+0x5bb4>
   178f0:	ldr	r1, [r0]
   178f4:	ldr	r4, [sp]
   178f8:	ldr	r0, [r2]
   178fc:	ldr	lr, [sp, #4]
   17900:	add	sp, sp, #8
   17904:	b	118a0 <strcmp@plt>
   17908:	ldr	r1, [r0, #124]	; 0x7c
   1790c:	and	r1, r1, #61440	; 0xf000
   17910:	cmp	r1, #16384	; 0x4000
   17914:	subeq	r3, r3, #1
   17918:	cmp	r3, #0
   1791c:	beq	178a0 <__assert_fail@plt+0x5b2c>
   17920:	mov	r0, r3
   17924:	bx	lr
   17928:	ldr	r4, [sp]
   1792c:	add	sp, sp, #4
   17930:	mov	r0, r3
   17934:	pop	{pc}		; (ldr pc, [sp], #4)
   17938:	ldr	r3, [r0, #120]	; 0x78
   1793c:	ldr	r2, [r1, #120]	; 0x78
   17940:	cmp	r3, #9
   17944:	cmpne	r3, #3
   17948:	moveq	r3, #1
   1794c:	movne	r3, #0
   17950:	cmp	r2, #9
   17954:	cmpne	r2, #3
   17958:	beq	17994 <__assert_fail@plt+0x5c20>
   1795c:	ldr	r2, [r1, #124]	; 0x7c
   17960:	and	r2, r2, #61440	; 0xf000
   17964:	cmp	r2, #16384	; 0x4000
   17968:	beq	17994 <__assert_fail@plt+0x5c20>
   1796c:	cmp	r3, #0
   17970:	bne	179ec <__assert_fail@plt+0x5c78>
   17974:	ldr	r2, [r0, #124]	; 0x7c
   17978:	and	r2, r2, #61440	; 0xf000
   1797c:	cmp	r2, #16384	; 0x4000
   17980:	subeq	r3, r3, #1
   17984:	cmp	r3, #0
   17988:	beq	179a0 <__assert_fail@plt+0x5c2c>
   1798c:	mov	r0, r3
   17990:	bx	lr
   17994:	cmp	r3, #0
   17998:	moveq	r3, #1
   1799c:	beq	17974 <__assert_fail@plt+0x5c00>
   179a0:	strd	r4, [sp, #-8]!
   179a4:	ldrd	r2, [r1, #64]	; 0x40
   179a8:	ldrd	r4, [r0, #64]	; 0x40
   179ac:	cmp	r2, r4
   179b0:	sbcs	ip, r3, r5
   179b4:	blt	179d8 <__assert_fail@plt+0x5c64>
   179b8:	cmp	r3, r5
   179bc:	cmpeq	r2, r4
   179c0:	bne	179f8 <__assert_fail@plt+0x5c84>
   179c4:	ldrd	r4, [sp]
   179c8:	add	sp, sp, #8
   179cc:	ldr	r0, [r0]
   179d0:	ldr	r1, [r1]
   179d4:	b	118a0 <strcmp@plt>
   179d8:	mvn	r3, #0
   179dc:	ldrd	r4, [sp]
   179e0:	add	sp, sp, #8
   179e4:	mov	r0, r3
   179e8:	bx	lr
   179ec:	mvn	r3, #0
   179f0:	mov	r0, r3
   179f4:	bx	lr
   179f8:	cmp	r4, r2
   179fc:	sbcs	r3, r5, r3
   17a00:	ldrd	r4, [sp]
   17a04:	add	sp, sp, #8
   17a08:	movlt	r3, #1
   17a0c:	movge	r3, #0
   17a10:	mov	r0, r3
   17a14:	bx	lr
   17a18:	ldr	r3, [r0, #120]	; 0x78
   17a1c:	mov	r2, r1
   17a20:	ldr	r1, [r1, #120]	; 0x78
   17a24:	cmp	r3, #9
   17a28:	cmpne	r3, #3
   17a2c:	moveq	r3, #1
   17a30:	movne	r3, #0
   17a34:	cmp	r1, #9
   17a38:	cmpne	r1, #3
   17a3c:	beq	17a78 <__assert_fail@plt+0x5d04>
   17a40:	ldr	r1, [r2, #124]	; 0x7c
   17a44:	and	r1, r1, #61440	; 0xf000
   17a48:	cmp	r1, #16384	; 0x4000
   17a4c:	beq	17a78 <__assert_fail@plt+0x5d04>
   17a50:	cmp	r3, #0
   17a54:	bne	17adc <__assert_fail@plt+0x5d68>
   17a58:	ldr	r1, [r0, #124]	; 0x7c
   17a5c:	and	r1, r1, #61440	; 0xf000
   17a60:	cmp	r1, #16384	; 0x4000
   17a64:	subeq	r3, r3, #1
   17a68:	cmp	r3, #0
   17a6c:	beq	17a84 <__assert_fail@plt+0x5d10>
   17a70:	mov	r0, r3
   17a74:	bx	lr
   17a78:	cmp	r3, #0
   17a7c:	moveq	r3, #1
   17a80:	beq	17a58 <__assert_fail@plt+0x5ce4>
   17a84:	strd	r4, [sp, #-16]!
   17a88:	ldrd	r4, [r0, #64]	; 0x40
   17a8c:	strd	r6, [sp, #8]
   17a90:	ldrd	r6, [r2, #64]	; 0x40
   17a94:	cmp	r4, r6
   17a98:	sbcs	r3, r5, r7
   17a9c:	blt	17ac4 <__assert_fail@plt+0x5d50>
   17aa0:	cmp	r5, r7
   17aa4:	cmpeq	r4, r6
   17aa8:	bne	17ae8 <__assert_fail@plt+0x5d74>
   17aac:	ldr	r1, [r0]
   17ab0:	ldrd	r4, [sp]
   17ab4:	ldr	r0, [r2]
   17ab8:	ldrd	r6, [sp, #8]
   17abc:	add	sp, sp, #16
   17ac0:	b	118a0 <strcmp@plt>
   17ac4:	mvn	r3, #0
   17ac8:	mov	r0, r3
   17acc:	ldrd	r4, [sp]
   17ad0:	ldrd	r6, [sp, #8]
   17ad4:	add	sp, sp, #16
   17ad8:	bx	lr
   17adc:	mvn	r3, #0
   17ae0:	mov	r0, r3
   17ae4:	bx	lr
   17ae8:	cmp	r6, r4
   17aec:	sbcs	r3, r7, r5
   17af0:	movlt	r3, #1
   17af4:	movge	r3, #0
   17af8:	b	17ac8 <__assert_fail@plt+0x5d54>
   17afc:	ldr	r3, [r0, #120]	; 0x78
   17b00:	ldr	r2, [r1, #120]	; 0x78
   17b04:	cmp	r3, #3
   17b08:	cmpne	r3, #9
   17b0c:	moveq	r3, #1
   17b10:	movne	r3, #0
   17b14:	cmp	r2, #9
   17b18:	cmpne	r2, #3
   17b1c:	beq	17b44 <__assert_fail@plt+0x5dd0>
   17b20:	ldr	r2, [r1, #124]	; 0x7c
   17b24:	and	r2, r2, #61440	; 0xf000
   17b28:	cmp	r2, #16384	; 0x4000
   17b2c:	beq	17b44 <__assert_fail@plt+0x5dd0>
   17b30:	cmp	r3, #0
   17b34:	beq	17b50 <__assert_fail@plt+0x5ddc>
   17b38:	mvn	r3, #0
   17b3c:	mov	r0, r3
   17b40:	bx	lr
   17b44:	cmp	r3, #0
   17b48:	moveq	r3, #1
   17b4c:	bne	17b68 <__assert_fail@plt+0x5df4>
   17b50:	ldr	r2, [r0, #124]	; 0x7c
   17b54:	and	r2, r2, #61440	; 0xf000
   17b58:	cmp	r2, #16384	; 0x4000
   17b5c:	subeq	r3, r3, #1
   17b60:	cmp	r3, #0
   17b64:	bne	17b3c <__assert_fail@plt+0x5dc8>
   17b68:	strd	r4, [sp, #-16]!
   17b6c:	ldr	r5, [r0]
   17b70:	ldr	r4, [r1]
   17b74:	str	r6, [sp, #8]
   17b78:	str	lr, [sp, #12]
   17b7c:	bl	11bb8 <__errno_location@plt>
   17b80:	mov	r3, r0
   17b84:	mov	r2, #0
   17b88:	ldr	r6, [sp, #8]
   17b8c:	mov	r0, r5
   17b90:	mov	r1, r4
   17b94:	ldrd	r4, [sp]
   17b98:	ldr	lr, [sp, #12]
   17b9c:	add	sp, sp, #16
   17ba0:	str	r2, [r3]
   17ba4:	b	11abc <strcoll@plt>
   17ba8:	ldr	r3, [r0, #120]	; 0x78
   17bac:	ldr	r2, [r1, #120]	; 0x78
   17bb0:	cmp	r3, #9
   17bb4:	cmpne	r3, #3
   17bb8:	moveq	r3, #1
   17bbc:	movne	r3, #0
   17bc0:	cmp	r2, #9
   17bc4:	cmpne	r2, #3
   17bc8:	beq	17bf0 <__assert_fail@plt+0x5e7c>
   17bcc:	ldr	r2, [r1, #124]	; 0x7c
   17bd0:	and	r2, r2, #61440	; 0xf000
   17bd4:	cmp	r2, #16384	; 0x4000
   17bd8:	beq	17bf0 <__assert_fail@plt+0x5e7c>
   17bdc:	cmp	r3, #0
   17be0:	beq	17bfc <__assert_fail@plt+0x5e88>
   17be4:	mvn	r3, #0
   17be8:	mov	r0, r3
   17bec:	bx	lr
   17bf0:	cmp	r3, #0
   17bf4:	moveq	r3, #1
   17bf8:	bne	17c14 <__assert_fail@plt+0x5ea0>
   17bfc:	ldr	r2, [r0, #124]	; 0x7c
   17c00:	and	r2, r2, #61440	; 0xf000
   17c04:	cmp	r2, #16384	; 0x4000
   17c08:	subeq	r3, r3, #1
   17c0c:	cmp	r3, #0
   17c10:	bne	17be8 <__assert_fail@plt+0x5e74>
   17c14:	ldr	r0, [r0]
   17c18:	ldr	r1, [r1]
   17c1c:	b	118a0 <strcmp@plt>
   17c20:	ldr	r3, [r0, #120]	; 0x78
   17c24:	ldr	r2, [r1, #120]	; 0x78
   17c28:	cmp	r3, #3
   17c2c:	cmpne	r3, #9
   17c30:	moveq	r3, #1
   17c34:	movne	r3, #0
   17c38:	cmp	r2, #9
   17c3c:	cmpne	r2, #3
   17c40:	beq	17c68 <__assert_fail@plt+0x5ef4>
   17c44:	ldr	r2, [r1, #124]	; 0x7c
   17c48:	and	r2, r2, #61440	; 0xf000
   17c4c:	cmp	r2, #16384	; 0x4000
   17c50:	beq	17c68 <__assert_fail@plt+0x5ef4>
   17c54:	cmp	r3, #0
   17c58:	beq	17c74 <__assert_fail@plt+0x5f00>
   17c5c:	mvn	r3, #0
   17c60:	mov	r0, r3
   17c64:	bx	lr
   17c68:	cmp	r3, #0
   17c6c:	moveq	r3, #1
   17c70:	bne	17c8c <__assert_fail@plt+0x5f18>
   17c74:	ldr	r2, [r0, #124]	; 0x7c
   17c78:	and	r2, r2, #61440	; 0xf000
   17c7c:	cmp	r2, #16384	; 0x4000
   17c80:	subeq	r3, r3, #1
   17c84:	cmp	r3, #0
   17c88:	bne	17c60 <__assert_fail@plt+0x5eec>
   17c8c:	strd	r4, [sp, #-16]!
   17c90:	ldr	r5, [r1]
   17c94:	ldr	r4, [r0]
   17c98:	str	r6, [sp, #8]
   17c9c:	str	lr, [sp, #12]
   17ca0:	bl	11bb8 <__errno_location@plt>
   17ca4:	mov	r3, r0
   17ca8:	mov	r2, #0
   17cac:	ldr	r6, [sp, #8]
   17cb0:	mov	r0, r5
   17cb4:	mov	r1, r4
   17cb8:	ldrd	r4, [sp]
   17cbc:	ldr	lr, [sp, #12]
   17cc0:	add	sp, sp, #16
   17cc4:	str	r2, [r3]
   17cc8:	b	11abc <strcoll@plt>
   17ccc:	ldr	r3, [r0, #120]	; 0x78
   17cd0:	mov	r2, r1
   17cd4:	ldr	r1, [r1, #120]	; 0x78
   17cd8:	cmp	r3, #9
   17cdc:	cmpne	r3, #3
   17ce0:	moveq	r3, #1
   17ce4:	movne	r3, #0
   17ce8:	cmp	r1, #9
   17cec:	cmpne	r1, #3
   17cf0:	beq	17d18 <__assert_fail@plt+0x5fa4>
   17cf4:	ldr	r1, [r2, #124]	; 0x7c
   17cf8:	and	r1, r1, #61440	; 0xf000
   17cfc:	cmp	r1, #16384	; 0x4000
   17d00:	beq	17d18 <__assert_fail@plt+0x5fa4>
   17d04:	cmp	r3, #0
   17d08:	beq	17d24 <__assert_fail@plt+0x5fb0>
   17d0c:	mvn	r3, #0
   17d10:	mov	r0, r3
   17d14:	bx	lr
   17d18:	cmp	r3, #0
   17d1c:	moveq	r3, #1
   17d20:	bne	17d3c <__assert_fail@plt+0x5fc8>
   17d24:	ldr	r1, [r0, #124]	; 0x7c
   17d28:	and	r1, r1, #61440	; 0xf000
   17d2c:	cmp	r1, #16384	; 0x4000
   17d30:	subeq	r3, r3, #1
   17d34:	cmp	r3, #0
   17d38:	bne	17d10 <__assert_fail@plt+0x5f9c>
   17d3c:	ldr	r1, [r0]
   17d40:	ldr	r0, [r2]
   17d44:	b	118a0 <strcmp@plt>
   17d48:	ldr	r3, [r0, #120]	; 0x78
   17d4c:	ldr	r2, [r1, #120]	; 0x78
   17d50:	cmp	r3, #3
   17d54:	cmpne	r3, #9
   17d58:	moveq	r3, #1
   17d5c:	movne	r3, #0
   17d60:	cmp	r2, #9
   17d64:	cmpne	r2, #3
   17d68:	beq	17d90 <__assert_fail@plt+0x601c>
   17d6c:	ldr	r2, [r1, #124]	; 0x7c
   17d70:	and	r2, r2, #61440	; 0xf000
   17d74:	cmp	r2, #16384	; 0x4000
   17d78:	beq	17d90 <__assert_fail@plt+0x601c>
   17d7c:	cmp	r3, #0
   17d80:	beq	17e34 <__assert_fail@plt+0x60c0>
   17d84:	mvn	r3, #0
   17d88:	mov	r0, r3
   17d8c:	bx	lr
   17d90:	cmp	r3, #0
   17d94:	moveq	r3, #1
   17d98:	beq	17e34 <__assert_fail@plt+0x60c0>
   17d9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17da0:	mov	r4, r1
   17da4:	mov	r1, #46	; 0x2e
   17da8:	strd	r6, [sp, #8]
   17dac:	ldr	r6, [r0]
   17db0:	str	r8, [sp, #16]
   17db4:	str	lr, [sp, #20]
   17db8:	mov	r0, r6
   17dbc:	bl	11c78 <strrchr@plt>
   17dc0:	ldr	r4, [r4]
   17dc4:	mov	r5, r0
   17dc8:	mov	r1, #46	; 0x2e
   17dcc:	mov	r0, r4
   17dd0:	bl	11c78 <strrchr@plt>
   17dd4:	cmp	r0, #0
   17dd8:	movw	r3, #316	; 0x13c
   17ddc:	movt	r3, #3
   17de0:	movne	r7, r0
   17de4:	moveq	r7, r3
   17de8:	cmp	r5, #0
   17dec:	moveq	r5, r3
   17df0:	bl	11bb8 <__errno_location@plt>
   17df4:	mov	r3, r0
   17df8:	mov	r2, #0
   17dfc:	mov	r1, r7
   17e00:	mov	r0, r5
   17e04:	str	r2, [r3]
   17e08:	bl	11abc <strcoll@plt>
   17e0c:	subs	r3, r0, #0
   17e10:	bne	17e54 <__assert_fail@plt+0x60e0>
   17e14:	mov	r1, r4
   17e18:	mov	r0, r6
   17e1c:	ldrd	r4, [sp]
   17e20:	ldrd	r6, [sp, #8]
   17e24:	ldr	r8, [sp, #16]
   17e28:	ldr	lr, [sp, #20]
   17e2c:	add	sp, sp, #24
   17e30:	b	11abc <strcoll@plt>
   17e34:	ldr	r2, [r0, #124]	; 0x7c
   17e38:	and	r2, r2, #61440	; 0xf000
   17e3c:	cmp	r2, #16384	; 0x4000
   17e40:	subeq	r3, r3, #1
   17e44:	cmp	r3, #0
   17e48:	beq	17d9c <__assert_fail@plt+0x6028>
   17e4c:	mov	r0, r3
   17e50:	bx	lr
   17e54:	ldrd	r4, [sp]
   17e58:	mov	r0, r3
   17e5c:	ldrd	r6, [sp, #8]
   17e60:	ldr	r8, [sp, #16]
   17e64:	add	sp, sp, #20
   17e68:	pop	{pc}		; (ldr pc, [sp], #4)
   17e6c:	ldr	r3, [r0, #120]	; 0x78
   17e70:	ldr	r2, [r1, #120]	; 0x78
   17e74:	cmp	r3, #3
   17e78:	cmpne	r3, #9
   17e7c:	moveq	r3, #1
   17e80:	movne	r3, #0
   17e84:	cmp	r2, #9
   17e88:	cmpne	r2, #3
   17e8c:	beq	17eb4 <__assert_fail@plt+0x6140>
   17e90:	ldr	r2, [r1, #124]	; 0x7c
   17e94:	and	r2, r2, #61440	; 0xf000
   17e98:	cmp	r2, #16384	; 0x4000
   17e9c:	beq	17eb4 <__assert_fail@plt+0x6140>
   17ea0:	cmp	r3, #0
   17ea4:	beq	17f34 <__assert_fail@plt+0x61c0>
   17ea8:	mvn	r3, #0
   17eac:	mov	r0, r3
   17eb0:	bx	lr
   17eb4:	cmp	r3, #0
   17eb8:	moveq	r3, #1
   17ebc:	beq	17f34 <__assert_fail@plt+0x61c0>
   17ec0:	strd	r4, [sp, #-16]!
   17ec4:	mov	r4, r1
   17ec8:	mov	r1, #46	; 0x2e
   17ecc:	str	r6, [sp, #8]
   17ed0:	ldr	r6, [r0]
   17ed4:	str	lr, [sp, #12]
   17ed8:	mov	r0, r6
   17edc:	bl	11c78 <strrchr@plt>
   17ee0:	ldr	r4, [r4]
   17ee4:	mov	r5, r0
   17ee8:	mov	r1, #46	; 0x2e
   17eec:	mov	r0, r4
   17ef0:	bl	11c78 <strrchr@plt>
   17ef4:	cmp	r5, #0
   17ef8:	beq	17f54 <__assert_fail@plt+0x61e0>
   17efc:	movw	r3, #316	; 0x13c
   17f00:	movt	r3, #3
   17f04:	cmp	r0, #0
   17f08:	moveq	r0, r3
   17f0c:	mov	r1, r0
   17f10:	mov	r0, r5
   17f14:	bl	118a0 <strcmp@plt>
   17f18:	subs	r3, r0, #0
   17f1c:	beq	17f64 <__assert_fail@plt+0x61f0>
   17f20:	ldrd	r4, [sp]
   17f24:	mov	r0, r3
   17f28:	ldr	r6, [sp, #8]
   17f2c:	add	sp, sp, #12
   17f30:	pop	{pc}		; (ldr pc, [sp], #4)
   17f34:	ldr	r2, [r0, #124]	; 0x7c
   17f38:	and	r2, r2, #61440	; 0xf000
   17f3c:	cmp	r2, #16384	; 0x4000
   17f40:	subeq	r3, r3, #1
   17f44:	cmp	r3, #0
   17f48:	beq	17ec0 <__assert_fail@plt+0x614c>
   17f4c:	mov	r0, r3
   17f50:	bx	lr
   17f54:	cmp	r0, #0
   17f58:	movwne	r5, #316	; 0x13c
   17f5c:	movtne	r5, #3
   17f60:	bne	17f0c <__assert_fail@plt+0x6198>
   17f64:	mov	r1, r4
   17f68:	mov	r0, r6
   17f6c:	ldrd	r4, [sp]
   17f70:	ldr	r6, [sp, #8]
   17f74:	ldr	lr, [sp, #12]
   17f78:	add	sp, sp, #16
   17f7c:	b	118a0 <strcmp@plt>
   17f80:	ldr	r3, [r0, #120]	; 0x78
   17f84:	ldr	r2, [r1, #120]	; 0x78
   17f88:	cmp	r3, #3
   17f8c:	cmpne	r3, #9
   17f90:	moveq	r3, #1
   17f94:	movne	r3, #0
   17f98:	cmp	r2, #9
   17f9c:	cmpne	r2, #3
   17fa0:	beq	17fc8 <__assert_fail@plt+0x6254>
   17fa4:	ldr	r2, [r1, #124]	; 0x7c
   17fa8:	and	r2, r2, #61440	; 0xf000
   17fac:	cmp	r2, #16384	; 0x4000
   17fb0:	beq	17fc8 <__assert_fail@plt+0x6254>
   17fb4:	cmp	r3, #0
   17fb8:	beq	1806c <__assert_fail@plt+0x62f8>
   17fbc:	mvn	r3, #0
   17fc0:	mov	r0, r3
   17fc4:	bx	lr
   17fc8:	cmp	r3, #0
   17fcc:	moveq	r3, #1
   17fd0:	beq	1806c <__assert_fail@plt+0x62f8>
   17fd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17fd8:	mov	r4, r0
   17fdc:	strd	r6, [sp, #8]
   17fe0:	ldr	r6, [r1]
   17fe4:	mov	r1, #46	; 0x2e
   17fe8:	str	r8, [sp, #16]
   17fec:	str	lr, [sp, #20]
   17ff0:	mov	r0, r6
   17ff4:	bl	11c78 <strrchr@plt>
   17ff8:	ldr	r4, [r4]
   17ffc:	mov	r5, r0
   18000:	mov	r1, #46	; 0x2e
   18004:	mov	r0, r4
   18008:	bl	11c78 <strrchr@plt>
   1800c:	cmp	r0, #0
   18010:	movw	r3, #316	; 0x13c
   18014:	movt	r3, #3
   18018:	movne	r7, r0
   1801c:	moveq	r7, r3
   18020:	cmp	r5, #0
   18024:	moveq	r5, r3
   18028:	bl	11bb8 <__errno_location@plt>
   1802c:	mov	r3, r0
   18030:	mov	r2, #0
   18034:	mov	r1, r7
   18038:	mov	r0, r5
   1803c:	str	r2, [r3]
   18040:	bl	11abc <strcoll@plt>
   18044:	subs	r3, r0, #0
   18048:	bne	1808c <__assert_fail@plt+0x6318>
   1804c:	mov	r1, r4
   18050:	mov	r0, r6
   18054:	ldrd	r4, [sp]
   18058:	ldrd	r6, [sp, #8]
   1805c:	ldr	r8, [sp, #16]
   18060:	ldr	lr, [sp, #20]
   18064:	add	sp, sp, #24
   18068:	b	11abc <strcoll@plt>
   1806c:	ldr	r2, [r0, #124]	; 0x7c
   18070:	and	r2, r2, #61440	; 0xf000
   18074:	cmp	r2, #16384	; 0x4000
   18078:	subeq	r3, r3, #1
   1807c:	cmp	r3, #0
   18080:	beq	17fd4 <__assert_fail@plt+0x6260>
   18084:	mov	r0, r3
   18088:	bx	lr
   1808c:	ldrd	r4, [sp]
   18090:	mov	r0, r3
   18094:	ldrd	r6, [sp, #8]
   18098:	ldr	r8, [sp, #16]
   1809c:	add	sp, sp, #20
   180a0:	pop	{pc}		; (ldr pc, [sp], #4)
   180a4:	ldr	r3, [r0, #120]	; 0x78
   180a8:	ldr	r2, [r1, #120]	; 0x78
   180ac:	cmp	r3, #3
   180b0:	cmpne	r3, #9
   180b4:	moveq	r3, #1
   180b8:	movne	r3, #0
   180bc:	cmp	r2, #9
   180c0:	cmpne	r2, #3
   180c4:	beq	180ec <__assert_fail@plt+0x6378>
   180c8:	ldr	r2, [r1, #124]	; 0x7c
   180cc:	and	r2, r2, #61440	; 0xf000
   180d0:	cmp	r2, #16384	; 0x4000
   180d4:	beq	180ec <__assert_fail@plt+0x6378>
   180d8:	cmp	r3, #0
   180dc:	beq	1816c <__assert_fail@plt+0x63f8>
   180e0:	mvn	r3, #0
   180e4:	mov	r0, r3
   180e8:	bx	lr
   180ec:	cmp	r3, #0
   180f0:	moveq	r3, #1
   180f4:	beq	1816c <__assert_fail@plt+0x63f8>
   180f8:	strd	r4, [sp, #-16]!
   180fc:	mov	r4, r0
   18100:	str	r6, [sp, #8]
   18104:	ldr	r6, [r1]
   18108:	mov	r1, #46	; 0x2e
   1810c:	str	lr, [sp, #12]
   18110:	mov	r0, r6
   18114:	bl	11c78 <strrchr@plt>
   18118:	ldr	r4, [r4]
   1811c:	mov	r5, r0
   18120:	mov	r1, #46	; 0x2e
   18124:	mov	r0, r4
   18128:	bl	11c78 <strrchr@plt>
   1812c:	cmp	r5, #0
   18130:	beq	1818c <__assert_fail@plt+0x6418>
   18134:	movw	r3, #316	; 0x13c
   18138:	movt	r3, #3
   1813c:	cmp	r0, #0
   18140:	moveq	r0, r3
   18144:	mov	r1, r0
   18148:	mov	r0, r5
   1814c:	bl	118a0 <strcmp@plt>
   18150:	subs	r3, r0, #0
   18154:	beq	1819c <__assert_fail@plt+0x6428>
   18158:	ldrd	r4, [sp]
   1815c:	mov	r0, r3
   18160:	ldr	r6, [sp, #8]
   18164:	add	sp, sp, #12
   18168:	pop	{pc}		; (ldr pc, [sp], #4)
   1816c:	ldr	r2, [r0, #124]	; 0x7c
   18170:	and	r2, r2, #61440	; 0xf000
   18174:	cmp	r2, #16384	; 0x4000
   18178:	subeq	r3, r3, #1
   1817c:	cmp	r3, #0
   18180:	beq	180f8 <__assert_fail@plt+0x6384>
   18184:	mov	r0, r3
   18188:	bx	lr
   1818c:	cmp	r0, #0
   18190:	movwne	r5, #316	; 0x13c
   18194:	movtne	r5, #3
   18198:	bne	18144 <__assert_fail@plt+0x63d0>
   1819c:	mov	r1, r4
   181a0:	mov	r0, r6
   181a4:	ldrd	r4, [sp]
   181a8:	ldr	r6, [sp, #8]
   181ac:	ldr	lr, [sp, #12]
   181b0:	add	sp, sp, #16
   181b4:	b	118a0 <strcmp@plt>
   181b8:	ldr	r3, [r0, #120]	; 0x78
   181bc:	strd	r4, [sp, #-16]!
   181c0:	ldr	r2, [r1, #120]	; 0x78
   181c4:	str	r6, [sp, #8]
   181c8:	str	lr, [sp, #12]
   181cc:	cmp	r3, #3
   181d0:	cmpne	r3, #9
   181d4:	moveq	r3, #1
   181d8:	movne	r3, #0
   181dc:	cmp	r2, #9
   181e0:	cmpne	r2, #3
   181e4:	beq	18218 <__assert_fail@plt+0x64a4>
   181e8:	ldr	r2, [r1, #124]	; 0x7c
   181ec:	and	r2, r2, #61440	; 0xf000
   181f0:	cmp	r2, #16384	; 0x4000
   181f4:	beq	18218 <__assert_fail@plt+0x64a4>
   181f8:	cmp	r3, #0
   181fc:	beq	18274 <__assert_fail@plt+0x6500>
   18200:	mvn	r4, #0
   18204:	mov	r0, r4
   18208:	ldrd	r4, [sp]
   1820c:	ldr	r6, [sp, #8]
   18210:	add	sp, sp, #12
   18214:	pop	{pc}		; (ldr pc, [sp], #4)
   18218:	cmp	r3, #0
   1821c:	moveq	r3, #1
   18220:	beq	18274 <__assert_fail@plt+0x6500>
   18224:	ldr	r4, [r0, #148]	; 0x94
   18228:	mov	r6, r1
   1822c:	mov	r5, r0
   18230:	cmp	r4, #0
   18234:	beq	182b0 <__assert_fail@plt+0x653c>
   18238:	ldr	r0, [r6, #148]	; 0x94
   1823c:	cmp	r0, #0
   18240:	beq	18294 <__assert_fail@plt+0x6520>
   18244:	subs	r4, r4, r0
   18248:	bne	18204 <__assert_fail@plt+0x6490>
   1824c:	bl	11bb8 <__errno_location@plt>
   18250:	ldr	r5, [r5]
   18254:	ldr	r1, [r6]
   18258:	ldr	r6, [sp, #8]
   1825c:	ldr	lr, [sp, #12]
   18260:	str	r4, [r0]
   18264:	mov	r0, r5
   18268:	ldrd	r4, [sp]
   1826c:	add	sp, sp, #16
   18270:	b	11abc <strcoll@plt>
   18274:	ldr	r4, [r0, #124]	; 0x7c
   18278:	and	r4, r4, #61440	; 0xf000
   1827c:	cmp	r4, #16384	; 0x4000
   18280:	movne	r4, r3
   18284:	subeq	r4, r3, #1
   18288:	cmp	r4, #0
   1828c:	bne	18204 <__assert_fail@plt+0x6490>
   18290:	b	18224 <__assert_fail@plt+0x64b0>
   18294:	movw	r3, #4912	; 0x1330
   18298:	movt	r3, #4
   1829c:	ldr	r0, [r6]
   182a0:	ldr	r2, [r6, #144]	; 0x90
   182a4:	ldr	r1, [r3, #3284]	; 0xcd4
   182a8:	bl	15318 <__assert_fail@plt+0x35a4>
   182ac:	b	18244 <__assert_fail@plt+0x64d0>
   182b0:	movw	r3, #4912	; 0x1330
   182b4:	movt	r3, #4
   182b8:	ldr	r0, [r0]
   182bc:	ldr	r2, [r5, #144]	; 0x90
   182c0:	ldr	r1, [r3, #3284]	; 0xcd4
   182c4:	bl	15318 <__assert_fail@plt+0x35a4>
   182c8:	mov	r4, r0
   182cc:	b	18238 <__assert_fail@plt+0x64c4>
   182d0:	ldr	r3, [r0, #120]	; 0x78
   182d4:	ldr	r2, [r1, #120]	; 0x78
   182d8:	cmp	r3, #3
   182dc:	cmpne	r3, #9
   182e0:	moveq	r3, #1
   182e4:	movne	r3, #0
   182e8:	cmp	r2, #9
   182ec:	cmpne	r2, #3
   182f0:	beq	18318 <__assert_fail@plt+0x65a4>
   182f4:	ldr	r2, [r1, #124]	; 0x7c
   182f8:	and	r2, r2, #61440	; 0xf000
   182fc:	cmp	r2, #16384	; 0x4000
   18300:	beq	18318 <__assert_fail@plt+0x65a4>
   18304:	cmp	r3, #0
   18308:	beq	18374 <__assert_fail@plt+0x6600>
   1830c:	mvn	r3, #0
   18310:	mov	r0, r3
   18314:	bx	lr
   18318:	cmp	r3, #0
   1831c:	moveq	r3, #1
   18320:	beq	18374 <__assert_fail@plt+0x6600>
   18324:	strd	r4, [sp, #-16]!
   18328:	mov	r5, r0
   1832c:	ldr	r4, [r0, #148]	; 0x94
   18330:	str	r6, [sp, #8]
   18334:	mov	r6, r1
   18338:	str	lr, [sp, #12]
   1833c:	cmp	r4, #0
   18340:	beq	18394 <__assert_fail@plt+0x6620>
   18344:	ldr	r0, [r6, #148]	; 0x94
   18348:	cmp	r0, #0
   1834c:	beq	183bc <__assert_fail@plt+0x6648>
   18350:	subs	r3, r4, r0
   18354:	bne	183dc <__assert_fail@plt+0x6668>
   18358:	ldr	r0, [r5]
   1835c:	ldr	r1, [r6]
   18360:	ldrd	r4, [sp]
   18364:	ldr	r6, [sp, #8]
   18368:	ldr	lr, [sp, #12]
   1836c:	add	sp, sp, #16
   18370:	b	118a0 <strcmp@plt>
   18374:	ldr	r2, [r0, #124]	; 0x7c
   18378:	and	r2, r2, #61440	; 0xf000
   1837c:	cmp	r2, #16384	; 0x4000
   18380:	subeq	r3, r3, #1
   18384:	cmp	r3, #0
   18388:	beq	18324 <__assert_fail@plt+0x65b0>
   1838c:	mov	r0, r3
   18390:	bx	lr
   18394:	movw	r3, #4912	; 0x1330
   18398:	movt	r3, #4
   1839c:	ldr	r0, [r0]
   183a0:	ldr	r2, [r5, #144]	; 0x90
   183a4:	ldr	r1, [r3, #3284]	; 0xcd4
   183a8:	bl	15318 <__assert_fail@plt+0x35a4>
   183ac:	mov	r4, r0
   183b0:	ldr	r0, [r6, #148]	; 0x94
   183b4:	cmp	r0, #0
   183b8:	bne	18350 <__assert_fail@plt+0x65dc>
   183bc:	movw	r3, #4912	; 0x1330
   183c0:	movt	r3, #4
   183c4:	ldr	r0, [r6]
   183c8:	ldr	r2, [r6, #144]	; 0x90
   183cc:	ldr	r1, [r3, #3284]	; 0xcd4
   183d0:	bl	15318 <__assert_fail@plt+0x35a4>
   183d4:	subs	r3, r4, r0
   183d8:	beq	18358 <__assert_fail@plt+0x65e4>
   183dc:	ldrd	r4, [sp]
   183e0:	mov	r0, r3
   183e4:	ldr	r6, [sp, #8]
   183e8:	add	sp, sp, #12
   183ec:	pop	{pc}		; (ldr pc, [sp], #4)
   183f0:	ldr	r3, [r0, #120]	; 0x78
   183f4:	strd	r4, [sp, #-16]!
   183f8:	ldr	r2, [r1, #120]	; 0x78
   183fc:	str	r6, [sp, #8]
   18400:	str	lr, [sp, #12]
   18404:	cmp	r3, #3
   18408:	cmpne	r3, #9
   1840c:	moveq	r3, #1
   18410:	movne	r3, #0
   18414:	cmp	r2, #9
   18418:	cmpne	r2, #3
   1841c:	beq	18450 <__assert_fail@plt+0x66dc>
   18420:	ldr	r2, [r1, #124]	; 0x7c
   18424:	and	r2, r2, #61440	; 0xf000
   18428:	cmp	r2, #16384	; 0x4000
   1842c:	beq	18450 <__assert_fail@plt+0x66dc>
   18430:	cmp	r3, #0
   18434:	beq	184ac <__assert_fail@plt+0x6738>
   18438:	mvn	r4, #0
   1843c:	mov	r0, r4
   18440:	ldrd	r4, [sp]
   18444:	ldr	r6, [sp, #8]
   18448:	add	sp, sp, #12
   1844c:	pop	{pc}		; (ldr pc, [sp], #4)
   18450:	cmp	r3, #0
   18454:	moveq	r3, #1
   18458:	beq	184ac <__assert_fail@plt+0x6738>
   1845c:	ldr	r4, [r1, #148]	; 0x94
   18460:	mov	r6, r1
   18464:	mov	r5, r0
   18468:	cmp	r4, #0
   1846c:	beq	184e8 <__assert_fail@plt+0x6774>
   18470:	ldr	r0, [r5, #148]	; 0x94
   18474:	cmp	r0, #0
   18478:	beq	184cc <__assert_fail@plt+0x6758>
   1847c:	subs	r4, r4, r0
   18480:	bne	1843c <__assert_fail@plt+0x66c8>
   18484:	bl	11bb8 <__errno_location@plt>
   18488:	ldr	r6, [r6]
   1848c:	ldr	r1, [r5]
   18490:	ldr	lr, [sp, #12]
   18494:	str	r4, [r0]
   18498:	mov	r0, r6
   1849c:	ldrd	r4, [sp]
   184a0:	ldr	r6, [sp, #8]
   184a4:	add	sp, sp, #16
   184a8:	b	11abc <strcoll@plt>
   184ac:	ldr	r4, [r0, #124]	; 0x7c
   184b0:	and	r4, r4, #61440	; 0xf000
   184b4:	cmp	r4, #16384	; 0x4000
   184b8:	movne	r4, r3
   184bc:	subeq	r4, r3, #1
   184c0:	cmp	r4, #0
   184c4:	bne	1843c <__assert_fail@plt+0x66c8>
   184c8:	b	1845c <__assert_fail@plt+0x66e8>
   184cc:	movw	r3, #4912	; 0x1330
   184d0:	movt	r3, #4
   184d4:	ldr	r0, [r5]
   184d8:	ldr	r2, [r5, #144]	; 0x90
   184dc:	ldr	r1, [r3, #3284]	; 0xcd4
   184e0:	bl	15318 <__assert_fail@plt+0x35a4>
   184e4:	b	1847c <__assert_fail@plt+0x6708>
   184e8:	movw	r3, #4912	; 0x1330
   184ec:	movt	r3, #4
   184f0:	ldr	r0, [r6]
   184f4:	ldr	r2, [r6, #144]	; 0x90
   184f8:	ldr	r1, [r3, #3284]	; 0xcd4
   184fc:	bl	15318 <__assert_fail@plt+0x35a4>
   18500:	mov	r4, r0
   18504:	b	18470 <__assert_fail@plt+0x66fc>
   18508:	ldr	r3, [r0, #120]	; 0x78
   1850c:	ldr	r2, [r1, #120]	; 0x78
   18510:	cmp	r3, #3
   18514:	cmpne	r3, #9
   18518:	moveq	r3, #1
   1851c:	movne	r3, #0
   18520:	cmp	r2, #9
   18524:	cmpne	r2, #3
   18528:	beq	18550 <__assert_fail@plt+0x67dc>
   1852c:	ldr	r2, [r1, #124]	; 0x7c
   18530:	and	r2, r2, #61440	; 0xf000
   18534:	cmp	r2, #16384	; 0x4000
   18538:	beq	18550 <__assert_fail@plt+0x67dc>
   1853c:	cmp	r3, #0
   18540:	beq	185ac <__assert_fail@plt+0x6838>
   18544:	mvn	r3, #0
   18548:	mov	r0, r3
   1854c:	bx	lr
   18550:	cmp	r3, #0
   18554:	moveq	r3, #1
   18558:	beq	185ac <__assert_fail@plt+0x6838>
   1855c:	strd	r4, [sp, #-16]!
   18560:	mov	r5, r0
   18564:	ldr	r4, [r1, #148]	; 0x94
   18568:	str	r6, [sp, #8]
   1856c:	mov	r6, r1
   18570:	str	lr, [sp, #12]
   18574:	cmp	r4, #0
   18578:	beq	185cc <__assert_fail@plt+0x6858>
   1857c:	ldr	r0, [r5, #148]	; 0x94
   18580:	cmp	r0, #0
   18584:	beq	185f4 <__assert_fail@plt+0x6880>
   18588:	subs	r3, r4, r0
   1858c:	bne	18614 <__assert_fail@plt+0x68a0>
   18590:	ldr	r1, [r5]
   18594:	ldr	r0, [r6]
   18598:	ldrd	r4, [sp]
   1859c:	ldr	r6, [sp, #8]
   185a0:	ldr	lr, [sp, #12]
   185a4:	add	sp, sp, #16
   185a8:	b	118a0 <strcmp@plt>
   185ac:	ldr	r2, [r0, #124]	; 0x7c
   185b0:	and	r2, r2, #61440	; 0xf000
   185b4:	cmp	r2, #16384	; 0x4000
   185b8:	subeq	r3, r3, #1
   185bc:	cmp	r3, #0
   185c0:	beq	1855c <__assert_fail@plt+0x67e8>
   185c4:	mov	r0, r3
   185c8:	bx	lr
   185cc:	movw	r3, #4912	; 0x1330
   185d0:	movt	r3, #4
   185d4:	ldr	r0, [r6]
   185d8:	ldr	r2, [r6, #144]	; 0x90
   185dc:	ldr	r1, [r3, #3284]	; 0xcd4
   185e0:	bl	15318 <__assert_fail@plt+0x35a4>
   185e4:	mov	r4, r0
   185e8:	ldr	r0, [r5, #148]	; 0x94
   185ec:	cmp	r0, #0
   185f0:	bne	18588 <__assert_fail@plt+0x6814>
   185f4:	movw	r3, #4912	; 0x1330
   185f8:	movt	r3, #4
   185fc:	ldr	r0, [r5]
   18600:	ldr	r2, [r5, #144]	; 0x90
   18604:	ldr	r1, [r3, #3284]	; 0xcd4
   18608:	bl	15318 <__assert_fail@plt+0x35a4>
   1860c:	subs	r3, r4, r0
   18610:	beq	18590 <__assert_fail@plt+0x681c>
   18614:	ldrd	r4, [sp]
   18618:	mov	r0, r3
   1861c:	ldr	r6, [sp, #8]
   18620:	add	sp, sp, #12
   18624:	pop	{pc}		; (ldr pc, [sp], #4)
   18628:	ldr	r3, [r0, #120]	; 0x78
   1862c:	mov	r2, r1
   18630:	ldr	r1, [r1, #120]	; 0x78
   18634:	cmp	r3, #9
   18638:	cmpne	r3, #3
   1863c:	moveq	r3, #1
   18640:	movne	r3, #0
   18644:	cmp	r1, #9
   18648:	cmpne	r1, #3
   1864c:	beq	18674 <__assert_fail@plt+0x6900>
   18650:	ldr	r1, [r2, #124]	; 0x7c
   18654:	and	r1, r1, #61440	; 0xf000
   18658:	cmp	r1, #16384	; 0x4000
   1865c:	beq	18674 <__assert_fail@plt+0x6900>
   18660:	cmp	r3, #0
   18664:	beq	18680 <__assert_fail@plt+0x690c>
   18668:	mvn	r3, #0
   1866c:	mov	r0, r3
   18670:	bx	lr
   18674:	cmp	r3, #0
   18678:	moveq	r3, #1
   1867c:	bne	18698 <__assert_fail@plt+0x6924>
   18680:	ldr	r1, [r0, #124]	; 0x7c
   18684:	and	r1, r1, #61440	; 0xf000
   18688:	cmp	r1, #16384	; 0x4000
   1868c:	subeq	r3, r3, #1
   18690:	cmp	r3, #0
   18694:	bne	1866c <__assert_fail@plt+0x68f8>
   18698:	ldr	r1, [r0]
   1869c:	ldr	r0, [r2]
   186a0:	b	1e80c <__assert_fail@plt+0xca98>
   186a4:	ldr	r3, [r0, #120]	; 0x78
   186a8:	strd	r4, [sp, #-16]!
   186ac:	ldr	r2, [r1, #120]	; 0x78
   186b0:	str	r6, [sp, #8]
   186b4:	str	lr, [sp, #12]
   186b8:	cmp	r3, #3
   186bc:	cmpne	r3, #9
   186c0:	moveq	r3, #1
   186c4:	movne	r3, #0
   186c8:	cmp	r2, #9
   186cc:	cmpne	r2, #3
   186d0:	beq	18704 <__assert_fail@plt+0x6990>
   186d4:	ldr	r2, [r1, #124]	; 0x7c
   186d8:	and	r2, r2, #61440	; 0xf000
   186dc:	cmp	r2, #16384	; 0x4000
   186e0:	beq	18704 <__assert_fail@plt+0x6990>
   186e4:	cmp	r3, #0
   186e8:	beq	18784 <__assert_fail@plt+0x6a10>
   186ec:	mvn	r4, #0
   186f0:	mov	r0, r4
   186f4:	ldrd	r4, [sp]
   186f8:	ldr	r6, [sp, #8]
   186fc:	add	sp, sp, #12
   18700:	pop	{pc}		; (ldr pc, [sp], #4)
   18704:	cmp	r3, #0
   18708:	moveq	r3, #1
   1870c:	beq	18784 <__assert_fail@plt+0x6a10>
   18710:	ldr	r4, [r1, #96]	; 0x60
   18714:	ldr	lr, [r0, #96]	; 0x60
   18718:	ldr	ip, [r0, #100]	; 0x64
   1871c:	ldr	r2, [r1, #100]	; 0x64
   18720:	cmp	lr, r4
   18724:	movge	r3, #0
   18728:	movlt	r3, #1
   1872c:	cmp	lr, r4
   18730:	rsble	r3, r3, #0
   18734:	rsbgt	r3, r3, #1
   18738:	cmp	ip, r2
   1873c:	movge	r4, #0
   18740:	movlt	r4, #1
   18744:	cmp	ip, r2
   18748:	rsble	r4, r4, #0
   1874c:	rsbgt	r4, r4, #1
   18750:	adds	r4, r4, r3, lsl #1
   18754:	bne	186f0 <__assert_fail@plt+0x697c>
   18758:	ldr	r6, [r1]
   1875c:	ldr	r5, [r0]
   18760:	bl	11bb8 <__errno_location@plt>
   18764:	ldr	lr, [sp, #12]
   18768:	str	r4, [r0]
   1876c:	mov	r0, r6
   18770:	ldr	r6, [sp, #8]
   18774:	mov	r1, r5
   18778:	ldrd	r4, [sp]
   1877c:	add	sp, sp, #16
   18780:	b	11abc <strcoll@plt>
   18784:	ldr	r4, [r0, #124]	; 0x7c
   18788:	and	r4, r4, #61440	; 0xf000
   1878c:	cmp	r4, #16384	; 0x4000
   18790:	movne	r4, r3
   18794:	subeq	r4, r3, #1
   18798:	cmp	r4, #0
   1879c:	bne	186f0 <__assert_fail@plt+0x697c>
   187a0:	b	18710 <__assert_fail@plt+0x699c>
   187a4:	ldr	r3, [r0, #120]	; 0x78
   187a8:	ldr	r2, [r1, #120]	; 0x78
   187ac:	cmp	r3, #3
   187b0:	cmpne	r3, #9
   187b4:	moveq	r3, #1
   187b8:	movne	r3, #0
   187bc:	cmp	r2, #9
   187c0:	cmpne	r2, #3
   187c4:	beq	187ec <__assert_fail@plt+0x6a78>
   187c8:	ldr	r2, [r1, #124]	; 0x7c
   187cc:	and	r2, r2, #61440	; 0xf000
   187d0:	cmp	r2, #16384	; 0x4000
   187d4:	beq	187ec <__assert_fail@plt+0x6a78>
   187d8:	cmp	r3, #0
   187dc:	beq	18860 <__assert_fail@plt+0x6aec>
   187e0:	mvn	r3, #0
   187e4:	mov	r0, r3
   187e8:	bx	lr
   187ec:	cmp	r3, #0
   187f0:	moveq	r3, #1
   187f4:	beq	18860 <__assert_fail@plt+0x6aec>
   187f8:	str	r4, [sp, #-8]!
   187fc:	ldr	r3, [r0, #104]	; 0x68
   18800:	ldr	r4, [r1, #104]	; 0x68
   18804:	ldr	ip, [r0, #108]	; 0x6c
   18808:	str	lr, [sp, #4]
   1880c:	ldr	lr, [r1, #108]	; 0x6c
   18810:	cmp	r4, r3
   18814:	movge	r2, #0
   18818:	movlt	r2, #1
   1881c:	cmp	r4, r3
   18820:	rsble	r2, r2, #0
   18824:	rsbgt	r2, r2, #1
   18828:	cmp	lr, ip
   1882c:	movge	r3, #0
   18830:	movlt	r3, #1
   18834:	cmp	lr, ip
   18838:	rsble	r3, r3, #0
   1883c:	rsbgt	r3, r3, #1
   18840:	adds	r3, r3, r2, lsl #1
   18844:	bne	18880 <__assert_fail@plt+0x6b0c>
   18848:	ldr	r4, [sp]
   1884c:	ldr	r0, [r0]
   18850:	ldr	r1, [r1]
   18854:	ldr	lr, [sp, #4]
   18858:	add	sp, sp, #8
   1885c:	b	118a0 <strcmp@plt>
   18860:	ldr	r2, [r0, #124]	; 0x7c
   18864:	and	r2, r2, #61440	; 0xf000
   18868:	cmp	r2, #16384	; 0x4000
   1886c:	subeq	r3, r3, #1
   18870:	cmp	r3, #0
   18874:	beq	187f8 <__assert_fail@plt+0x6a84>
   18878:	mov	r0, r3
   1887c:	bx	lr
   18880:	ldr	r4, [sp]
   18884:	add	sp, sp, #4
   18888:	mov	r0, r3
   1888c:	pop	{pc}		; (ldr pc, [sp], #4)
   18890:	ldr	r3, [r0, #120]	; 0x78
   18894:	mov	r2, r1
   18898:	ldr	r1, [r1, #120]	; 0x78
   1889c:	cmp	r3, #3
   188a0:	cmpne	r3, #9
   188a4:	moveq	r3, #1
   188a8:	movne	r3, #0
   188ac:	cmp	r1, #9
   188b0:	cmpne	r1, #3
   188b4:	beq	188dc <__assert_fail@plt+0x6b68>
   188b8:	ldr	r1, [r2, #124]	; 0x7c
   188bc:	and	r1, r1, #61440	; 0xf000
   188c0:	cmp	r1, #16384	; 0x4000
   188c4:	beq	188dc <__assert_fail@plt+0x6b68>
   188c8:	cmp	r3, #0
   188cc:	beq	18950 <__assert_fail@plt+0x6bdc>
   188d0:	mvn	r3, #0
   188d4:	mov	r0, r3
   188d8:	bx	lr
   188dc:	cmp	r3, #0
   188e0:	moveq	r3, #1
   188e4:	beq	18950 <__assert_fail@plt+0x6bdc>
   188e8:	str	r4, [sp, #-8]!
   188ec:	ldr	r3, [r2, #104]	; 0x68
   188f0:	ldr	r4, [r0, #104]	; 0x68
   188f4:	ldr	ip, [r2, #108]	; 0x6c
   188f8:	str	lr, [sp, #4]
   188fc:	ldr	lr, [r0, #108]	; 0x6c
   18900:	cmp	r4, r3
   18904:	movge	r1, #0
   18908:	movlt	r1, #1
   1890c:	cmp	r4, r3
   18910:	rsble	r1, r1, #0
   18914:	rsbgt	r1, r1, #1
   18918:	cmp	lr, ip
   1891c:	movge	r3, #0
   18920:	movlt	r3, #1
   18924:	cmp	lr, ip
   18928:	rsble	r3, r3, #0
   1892c:	rsbgt	r3, r3, #1
   18930:	adds	r3, r3, r1, lsl #1
   18934:	bne	18970 <__assert_fail@plt+0x6bfc>
   18938:	ldr	r1, [r0]
   1893c:	ldr	r4, [sp]
   18940:	ldr	r0, [r2]
   18944:	ldr	lr, [sp, #4]
   18948:	add	sp, sp, #8
   1894c:	b	118a0 <strcmp@plt>
   18950:	ldr	r1, [r0, #124]	; 0x7c
   18954:	and	r1, r1, #61440	; 0xf000
   18958:	cmp	r1, #16384	; 0x4000
   1895c:	subeq	r3, r3, #1
   18960:	cmp	r3, #0
   18964:	beq	188e8 <__assert_fail@plt+0x6b74>
   18968:	mov	r0, r3
   1896c:	bx	lr
   18970:	ldr	r4, [sp]
   18974:	add	sp, sp, #4
   18978:	mov	r0, r3
   1897c:	pop	{pc}		; (ldr pc, [sp], #4)
   18980:	ldr	r3, [r0, #120]	; 0x78
   18984:	ldr	r2, [r1, #120]	; 0x78
   18988:	cmp	r3, #3
   1898c:	cmpne	r3, #9
   18990:	moveq	r3, #1
   18994:	movne	r3, #0
   18998:	cmp	r2, #9
   1899c:	cmpne	r2, #3
   189a0:	beq	189c8 <__assert_fail@plt+0x6c54>
   189a4:	ldr	r2, [r1, #124]	; 0x7c
   189a8:	and	r2, r2, #61440	; 0xf000
   189ac:	cmp	r2, #16384	; 0x4000
   189b0:	beq	189c8 <__assert_fail@plt+0x6c54>
   189b4:	cmp	r3, #0
   189b8:	beq	18a3c <__assert_fail@plt+0x6cc8>
   189bc:	mvn	r3, #0
   189c0:	mov	r0, r3
   189c4:	bx	lr
   189c8:	cmp	r3, #0
   189cc:	moveq	r3, #1
   189d0:	beq	18a3c <__assert_fail@plt+0x6cc8>
   189d4:	str	r4, [sp, #-8]!
   189d8:	ldr	r3, [r0, #96]	; 0x60
   189dc:	ldr	r4, [r1, #96]	; 0x60
   189e0:	ldr	ip, [r0, #100]	; 0x64
   189e4:	str	lr, [sp, #4]
   189e8:	ldr	lr, [r1, #100]	; 0x64
   189ec:	cmp	r4, r3
   189f0:	movge	r2, #0
   189f4:	movlt	r2, #1
   189f8:	cmp	r4, r3
   189fc:	rsble	r2, r2, #0
   18a00:	rsbgt	r2, r2, #1
   18a04:	cmp	lr, ip
   18a08:	movge	r3, #0
   18a0c:	movlt	r3, #1
   18a10:	cmp	lr, ip
   18a14:	rsble	r3, r3, #0
   18a18:	rsbgt	r3, r3, #1
   18a1c:	adds	r3, r3, r2, lsl #1
   18a20:	bne	18a5c <__assert_fail@plt+0x6ce8>
   18a24:	ldr	r4, [sp]
   18a28:	ldr	r0, [r0]
   18a2c:	ldr	r1, [r1]
   18a30:	ldr	lr, [sp, #4]
   18a34:	add	sp, sp, #8
   18a38:	b	118a0 <strcmp@plt>
   18a3c:	ldr	r2, [r0, #124]	; 0x7c
   18a40:	and	r2, r2, #61440	; 0xf000
   18a44:	cmp	r2, #16384	; 0x4000
   18a48:	subeq	r3, r3, #1
   18a4c:	cmp	r3, #0
   18a50:	beq	189d4 <__assert_fail@plt+0x6c60>
   18a54:	mov	r0, r3
   18a58:	bx	lr
   18a5c:	ldr	r4, [sp]
   18a60:	add	sp, sp, #4
   18a64:	mov	r0, r3
   18a68:	pop	{pc}		; (ldr pc, [sp], #4)
   18a6c:	ldr	r3, [r0, #120]	; 0x78
   18a70:	mov	r2, r1
   18a74:	ldr	r1, [r1, #120]	; 0x78
   18a78:	cmp	r3, #3
   18a7c:	cmpne	r3, #9
   18a80:	moveq	r3, #1
   18a84:	movne	r3, #0
   18a88:	cmp	r1, #9
   18a8c:	cmpne	r1, #3
   18a90:	beq	18ab8 <__assert_fail@plt+0x6d44>
   18a94:	ldr	r1, [r2, #124]	; 0x7c
   18a98:	and	r1, r1, #61440	; 0xf000
   18a9c:	cmp	r1, #16384	; 0x4000
   18aa0:	beq	18ab8 <__assert_fail@plt+0x6d44>
   18aa4:	cmp	r3, #0
   18aa8:	beq	18b2c <__assert_fail@plt+0x6db8>
   18aac:	mvn	r3, #0
   18ab0:	mov	r0, r3
   18ab4:	bx	lr
   18ab8:	cmp	r3, #0
   18abc:	moveq	r3, #1
   18ac0:	beq	18b2c <__assert_fail@plt+0x6db8>
   18ac4:	str	r4, [sp, #-8]!
   18ac8:	ldr	r3, [r2, #96]	; 0x60
   18acc:	ldr	r4, [r0, #96]	; 0x60
   18ad0:	ldr	ip, [r2, #100]	; 0x64
   18ad4:	str	lr, [sp, #4]
   18ad8:	ldr	lr, [r0, #100]	; 0x64
   18adc:	cmp	r4, r3
   18ae0:	movge	r1, #0
   18ae4:	movlt	r1, #1
   18ae8:	cmp	r4, r3
   18aec:	rsble	r1, r1, #0
   18af0:	rsbgt	r1, r1, #1
   18af4:	cmp	lr, ip
   18af8:	movge	r3, #0
   18afc:	movlt	r3, #1
   18b00:	cmp	lr, ip
   18b04:	rsble	r3, r3, #0
   18b08:	rsbgt	r3, r3, #1
   18b0c:	adds	r3, r3, r1, lsl #1
   18b10:	bne	18b4c <__assert_fail@plt+0x6dd8>
   18b14:	ldr	r1, [r0]
   18b18:	ldr	r4, [sp]
   18b1c:	ldr	r0, [r2]
   18b20:	ldr	lr, [sp, #4]
   18b24:	add	sp, sp, #8
   18b28:	b	118a0 <strcmp@plt>
   18b2c:	ldr	r1, [r0, #124]	; 0x7c
   18b30:	and	r1, r1, #61440	; 0xf000
   18b34:	cmp	r1, #16384	; 0x4000
   18b38:	subeq	r3, r3, #1
   18b3c:	cmp	r3, #0
   18b40:	beq	18ac4 <__assert_fail@plt+0x6d50>
   18b44:	mov	r0, r3
   18b48:	bx	lr
   18b4c:	ldr	r4, [sp]
   18b50:	add	sp, sp, #4
   18b54:	mov	r0, r3
   18b58:	pop	{pc}		; (ldr pc, [sp], #4)
   18b5c:	ldr	r3, [r0, #120]	; 0x78
   18b60:	ldr	r2, [r1, #120]	; 0x78
   18b64:	cmp	r3, #3
   18b68:	cmpne	r3, #9
   18b6c:	moveq	r3, #1
   18b70:	movne	r3, #0
   18b74:	cmp	r2, #9
   18b78:	cmpne	r2, #3
   18b7c:	beq	18ba4 <__assert_fail@plt+0x6e30>
   18b80:	ldr	r2, [r1, #124]	; 0x7c
   18b84:	and	r2, r2, #61440	; 0xf000
   18b88:	cmp	r2, #16384	; 0x4000
   18b8c:	beq	18ba4 <__assert_fail@plt+0x6e30>
   18b90:	cmp	r3, #0
   18b94:	beq	18c18 <__assert_fail@plt+0x6ea4>
   18b98:	mvn	r3, #0
   18b9c:	mov	r0, r3
   18ba0:	bx	lr
   18ba4:	cmp	r3, #0
   18ba8:	moveq	r3, #1
   18bac:	beq	18c18 <__assert_fail@plt+0x6ea4>
   18bb0:	str	r4, [sp, #-8]!
   18bb4:	ldr	r3, [r0, #88]	; 0x58
   18bb8:	ldr	r4, [r1, #88]	; 0x58
   18bbc:	ldr	ip, [r0, #92]	; 0x5c
   18bc0:	str	lr, [sp, #4]
   18bc4:	ldr	lr, [r1, #92]	; 0x5c
   18bc8:	cmp	r4, r3
   18bcc:	movge	r2, #0
   18bd0:	movlt	r2, #1
   18bd4:	cmp	r4, r3
   18bd8:	rsble	r2, r2, #0
   18bdc:	rsbgt	r2, r2, #1
   18be0:	cmp	lr, ip
   18be4:	movge	r3, #0
   18be8:	movlt	r3, #1
   18bec:	cmp	lr, ip
   18bf0:	rsble	r3, r3, #0
   18bf4:	rsbgt	r3, r3, #1
   18bf8:	adds	r3, r3, r2, lsl #1
   18bfc:	bne	18c38 <__assert_fail@plt+0x6ec4>
   18c00:	ldr	r4, [sp]
   18c04:	ldr	r0, [r0]
   18c08:	ldr	r1, [r1]
   18c0c:	ldr	lr, [sp, #4]
   18c10:	add	sp, sp, #8
   18c14:	b	118a0 <strcmp@plt>
   18c18:	ldr	r2, [r0, #124]	; 0x7c
   18c1c:	and	r2, r2, #61440	; 0xf000
   18c20:	cmp	r2, #16384	; 0x4000
   18c24:	subeq	r3, r3, #1
   18c28:	cmp	r3, #0
   18c2c:	beq	18bb0 <__assert_fail@plt+0x6e3c>
   18c30:	mov	r0, r3
   18c34:	bx	lr
   18c38:	ldr	r4, [sp]
   18c3c:	add	sp, sp, #4
   18c40:	mov	r0, r3
   18c44:	pop	{pc}		; (ldr pc, [sp], #4)
   18c48:	ldr	r3, [r0, #120]	; 0x78
   18c4c:	mov	r2, r1
   18c50:	ldr	r1, [r1, #120]	; 0x78
   18c54:	cmp	r3, #3
   18c58:	cmpne	r3, #9
   18c5c:	moveq	r3, #1
   18c60:	movne	r3, #0
   18c64:	cmp	r1, #9
   18c68:	cmpne	r1, #3
   18c6c:	beq	18c94 <__assert_fail@plt+0x6f20>
   18c70:	ldr	r1, [r2, #124]	; 0x7c
   18c74:	and	r1, r1, #61440	; 0xf000
   18c78:	cmp	r1, #16384	; 0x4000
   18c7c:	beq	18c94 <__assert_fail@plt+0x6f20>
   18c80:	cmp	r3, #0
   18c84:	beq	18d08 <__assert_fail@plt+0x6f94>
   18c88:	mvn	r3, #0
   18c8c:	mov	r0, r3
   18c90:	bx	lr
   18c94:	cmp	r3, #0
   18c98:	moveq	r3, #1
   18c9c:	beq	18d08 <__assert_fail@plt+0x6f94>
   18ca0:	str	r4, [sp, #-8]!
   18ca4:	ldr	r3, [r2, #88]	; 0x58
   18ca8:	ldr	r4, [r0, #88]	; 0x58
   18cac:	ldr	ip, [r2, #92]	; 0x5c
   18cb0:	str	lr, [sp, #4]
   18cb4:	ldr	lr, [r0, #92]	; 0x5c
   18cb8:	cmp	r4, r3
   18cbc:	movge	r1, #0
   18cc0:	movlt	r1, #1
   18cc4:	cmp	r4, r3
   18cc8:	rsble	r1, r1, #0
   18ccc:	rsbgt	r1, r1, #1
   18cd0:	cmp	lr, ip
   18cd4:	movge	r3, #0
   18cd8:	movlt	r3, #1
   18cdc:	cmp	lr, ip
   18ce0:	rsble	r3, r3, #0
   18ce4:	rsbgt	r3, r3, #1
   18ce8:	adds	r3, r3, r1, lsl #1
   18cec:	bne	18d28 <__assert_fail@plt+0x6fb4>
   18cf0:	ldr	r1, [r0]
   18cf4:	ldr	r4, [sp]
   18cf8:	ldr	r0, [r2]
   18cfc:	ldr	lr, [sp, #4]
   18d00:	add	sp, sp, #8
   18d04:	b	118a0 <strcmp@plt>
   18d08:	ldr	r1, [r0, #124]	; 0x7c
   18d0c:	and	r1, r1, #61440	; 0xf000
   18d10:	cmp	r1, #16384	; 0x4000
   18d14:	subeq	r3, r3, #1
   18d18:	cmp	r3, #0
   18d1c:	beq	18ca0 <__assert_fail@plt+0x6f2c>
   18d20:	mov	r0, r3
   18d24:	bx	lr
   18d28:	ldr	r4, [sp]
   18d2c:	add	sp, sp, #4
   18d30:	mov	r0, r3
   18d34:	pop	{pc}		; (ldr pc, [sp], #4)
   18d38:	ldr	r3, [r0, #120]	; 0x78
   18d3c:	ldr	r2, [r1, #120]	; 0x78
   18d40:	cmp	r3, #3
   18d44:	cmpne	r3, #9
   18d48:	moveq	r3, #1
   18d4c:	movne	r3, #0
   18d50:	cmp	r2, #9
   18d54:	cmpne	r2, #3
   18d58:	beq	18d80 <__assert_fail@plt+0x700c>
   18d5c:	ldr	r2, [r1, #124]	; 0x7c
   18d60:	and	r2, r2, #61440	; 0xf000
   18d64:	cmp	r2, #16384	; 0x4000
   18d68:	beq	18d80 <__assert_fail@plt+0x700c>
   18d6c:	cmp	r3, #0
   18d70:	beq	18df4 <__assert_fail@plt+0x7080>
   18d74:	mvn	r3, #0
   18d78:	mov	r0, r3
   18d7c:	bx	lr
   18d80:	cmp	r3, #0
   18d84:	moveq	r3, #1
   18d88:	beq	18df4 <__assert_fail@plt+0x7080>
   18d8c:	str	r4, [sp, #-8]!
   18d90:	ldr	r3, [r0, #96]	; 0x60
   18d94:	ldr	r4, [r1, #96]	; 0x60
   18d98:	ldr	ip, [r0, #100]	; 0x64
   18d9c:	str	lr, [sp, #4]
   18da0:	ldr	lr, [r1, #100]	; 0x64
   18da4:	cmp	r4, r3
   18da8:	movge	r2, #0
   18dac:	movlt	r2, #1
   18db0:	cmp	r4, r3
   18db4:	rsble	r2, r2, #0
   18db8:	rsbgt	r2, r2, #1
   18dbc:	cmp	lr, ip
   18dc0:	movge	r3, #0
   18dc4:	movlt	r3, #1
   18dc8:	cmp	lr, ip
   18dcc:	rsble	r3, r3, #0
   18dd0:	rsbgt	r3, r3, #1
   18dd4:	adds	r3, r3, r2, lsl #1
   18dd8:	bne	18e14 <__assert_fail@plt+0x70a0>
   18ddc:	ldr	r4, [sp]
   18de0:	ldr	r0, [r0]
   18de4:	ldr	r1, [r1]
   18de8:	ldr	lr, [sp, #4]
   18dec:	add	sp, sp, #8
   18df0:	b	118a0 <strcmp@plt>
   18df4:	ldr	r2, [r0, #124]	; 0x7c
   18df8:	and	r2, r2, #61440	; 0xf000
   18dfc:	cmp	r2, #16384	; 0x4000
   18e00:	subeq	r3, r3, #1
   18e04:	cmp	r3, #0
   18e08:	beq	18d8c <__assert_fail@plt+0x7018>
   18e0c:	mov	r0, r3
   18e10:	bx	lr
   18e14:	ldr	r4, [sp]
   18e18:	add	sp, sp, #4
   18e1c:	mov	r0, r3
   18e20:	pop	{pc}		; (ldr pc, [sp], #4)
   18e24:	ldr	r3, [r0, #120]	; 0x78
   18e28:	ldr	r2, [r1, #120]	; 0x78
   18e2c:	cmp	r3, #9
   18e30:	cmpne	r3, #3
   18e34:	moveq	r3, #1
   18e38:	movne	r3, #0
   18e3c:	cmp	r2, #9
   18e40:	cmpne	r2, #3
   18e44:	beq	18e6c <__assert_fail@plt+0x70f8>
   18e48:	ldr	r2, [r1, #124]	; 0x7c
   18e4c:	and	r2, r2, #61440	; 0xf000
   18e50:	cmp	r2, #16384	; 0x4000
   18e54:	beq	18e6c <__assert_fail@plt+0x70f8>
   18e58:	cmp	r3, #0
   18e5c:	beq	18e78 <__assert_fail@plt+0x7104>
   18e60:	mvn	r3, #0
   18e64:	mov	r0, r3
   18e68:	bx	lr
   18e6c:	cmp	r3, #0
   18e70:	moveq	r3, #1
   18e74:	bne	18e90 <__assert_fail@plt+0x711c>
   18e78:	ldr	r2, [r0, #124]	; 0x7c
   18e7c:	and	r2, r2, #61440	; 0xf000
   18e80:	cmp	r2, #16384	; 0x4000
   18e84:	subeq	r3, r3, #1
   18e88:	cmp	r3, #0
   18e8c:	bne	18e64 <__assert_fail@plt+0x70f0>
   18e90:	ldr	r0, [r0]
   18e94:	ldr	r1, [r1]
   18e98:	b	1e80c <__assert_fail@plt+0xca98>
   18e9c:	ldr	r3, [r0, #120]	; 0x78
   18ea0:	ldr	r2, [r1, #120]	; 0x78
   18ea4:	cmp	r3, #9
   18ea8:	cmpne	r3, #3
   18eac:	moveq	r3, #1
   18eb0:	movne	r3, #0
   18eb4:	cmp	r2, #9
   18eb8:	cmpne	r2, #3
   18ebc:	beq	18ef8 <__assert_fail@plt+0x7184>
   18ec0:	ldr	r2, [r1, #124]	; 0x7c
   18ec4:	and	r2, r2, #61440	; 0xf000
   18ec8:	cmp	r2, #16384	; 0x4000
   18ecc:	beq	18ef8 <__assert_fail@plt+0x7184>
   18ed0:	cmp	r3, #0
   18ed4:	bne	18f7c <__assert_fail@plt+0x7208>
   18ed8:	ldr	r2, [r0, #124]	; 0x7c
   18edc:	and	r2, r2, #61440	; 0xf000
   18ee0:	cmp	r2, #16384	; 0x4000
   18ee4:	subeq	r3, r3, #1
   18ee8:	cmp	r3, #0
   18eec:	beq	18f04 <__assert_fail@plt+0x7190>
   18ef0:	mov	r0, r3
   18ef4:	bx	lr
   18ef8:	cmp	r3, #0
   18efc:	moveq	r3, #1
   18f00:	beq	18ed8 <__assert_fail@plt+0x7164>
   18f04:	strd	r4, [sp, #-16]!
   18f08:	ldrd	r2, [r0, #64]	; 0x40
   18f0c:	ldrd	r4, [r1, #64]	; 0x40
   18f10:	str	r6, [sp, #8]
   18f14:	str	lr, [sp, #12]
   18f18:	cmp	r2, r4
   18f1c:	sbcs	ip, r3, r5
   18f20:	blt	18f64 <__assert_fail@plt+0x71f0>
   18f24:	cmp	r3, r5
   18f28:	cmpeq	r2, r4
   18f2c:	bne	18f88 <__assert_fail@plt+0x7214>
   18f30:	ldr	r5, [r1]
   18f34:	ldr	r4, [r0]
   18f38:	bl	11bb8 <__errno_location@plt>
   18f3c:	mov	r3, r0
   18f40:	mov	r2, #0
   18f44:	ldr	r6, [sp, #8]
   18f48:	mov	r0, r5
   18f4c:	ldr	lr, [sp, #12]
   18f50:	mov	r1, r4
   18f54:	ldrd	r4, [sp]
   18f58:	add	sp, sp, #16
   18f5c:	str	r2, [r3]
   18f60:	b	11abc <strcoll@plt>
   18f64:	mvn	r3, #0
   18f68:	ldrd	r4, [sp]
   18f6c:	mov	r0, r3
   18f70:	ldr	r6, [sp, #8]
   18f74:	add	sp, sp, #12
   18f78:	pop	{pc}		; (ldr pc, [sp], #4)
   18f7c:	mvn	r3, #0
   18f80:	mov	r0, r3
   18f84:	bx	lr
   18f88:	cmp	r4, r2
   18f8c:	sbcs	r3, r5, r3
   18f90:	movlt	r3, #1
   18f94:	movge	r3, #0
   18f98:	b	18f68 <__assert_fail@plt+0x71f4>
   18f9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18fa0:	mov	r4, r3
   18fa4:	mov	r3, r2
   18fa8:	strd	r6, [sp, #8]
   18fac:	mov	r2, r1
   18fb0:	mov	r1, r0
   18fb4:	strd	r8, [sp, #16]
   18fb8:	strd	sl, [sp, #24]
   18fbc:	str	lr, [sp, #32]
   18fc0:	sub	sp, sp, #8192	; 0x2000
   18fc4:	mov	lr, #0
   18fc8:	sub	sp, sp, #52	; 0x34
   18fcc:	add	ip, sp, #8256	; 0x2040
   18fd0:	add	r6, sp, #48	; 0x30
   18fd4:	add	ip, ip, #24
   18fd8:	ldrb	r5, [ip]
   18fdc:	sub	ip, r6, #5
   18fe0:	str	lr, [sp]
   18fe4:	str	ip, [sp, #4]
   18fe8:	add	ip, sp, #8256	; 0x2040
   18fec:	add	ip, ip, #28
   18ff0:	str	r6, [r6, #-4]
   18ff4:	ldr	ip, [ip]
   18ff8:	str	r0, [sp, #20]
   18ffc:	sub	r0, r6, #4
   19000:	str	ip, [sp, #8]
   19004:	bl	14e5c <__assert_fail@plt+0x30e8>
   19008:	ldrb	r3, [r6, #-5]
   1900c:	str	r0, [sp, #12]
   19010:	tst	r5, r3
   19014:	bne	194cc <__assert_fail@plt+0x7758>
   19018:	ldr	r9, [pc, #1420]	; 195ac <__assert_fail@plt+0x7838>
   1901c:	movw	r8, #4900	; 0x1324
   19020:	movt	r8, #4
   19024:	cmp	r4, #0
   19028:	beq	19090 <__assert_fail@plt+0x731c>
   1902c:	movw	r3, #4560	; 0x11d0
   19030:	movt	r3, #4
   19034:	ldr	r2, [r3, #32]
   19038:	cmp	r2, #0
   1903c:	beq	1906c <__assert_fail@plt+0x72f8>
   19040:	cmp	r2, #1
   19044:	ldr	r0, [r3, #36]	; 0x24
   19048:	beq	19574 <__assert_fail@plt+0x7800>
   1904c:	cmp	r2, #2
   19050:	beq	19584 <__assert_fail@plt+0x7810>
   19054:	ldr	r1, [pc, #1364]	; 195b0 <__assert_fail@plt+0x783c>
   19058:	sub	r0, r1, #4
   1905c:	bl	14cc8 <__assert_fail@plt+0x2f54>
   19060:	ldr	r1, [pc, #1356]	; 195b4 <__assert_fail@plt+0x7840>
   19064:	sub	r0, r1, #4
   19068:	bl	14cc8 <__assert_fail@plt+0x2f54>
   1906c:	ldr	r1, [pc, #1340]	; 195b0 <__assert_fail@plt+0x783c>
   19070:	sub	r0, r1, #4
   19074:	bl	14cc8 <__assert_fail@plt+0x2f54>
   19078:	add	r1, r4, #4
   1907c:	mov	r0, r4
   19080:	bl	14cc8 <__assert_fail@plt+0x2f54>
   19084:	ldr	r1, [pc, #1320]	; 195b4 <__assert_fail@plt+0x7840>
   19088:	sub	r0, r1, #4
   1908c:	bl	14cc8 <__assert_fail@plt+0x2f54>
   19090:	add	r3, sp, #8256	; 0x2040
   19094:	add	r3, r3, #32
   19098:	ldr	r3, [r3]
   1909c:	cmp	r3, #0
   190a0:	beq	19464 <__assert_fail@plt+0x76f0>
   190a4:	movw	r5, #4912	; 0x1330
   190a8:	movt	r5, #4
   190ac:	ldrb	r3, [r5, #3253]	; 0xcb5
   190b0:	cmp	r3, #0
   190b4:	str	r3, [sp, #16]
   190b8:	bne	193d0 <__assert_fail@plt+0x765c>
   190bc:	ldr	r3, [sp, #12]
   190c0:	str	r3, [sp, #24]
   190c4:	ldr	r3, [sp, #16]
   190c8:	str	r3, [sp, #28]
   190cc:	ldr	r4, [r5, #3756]	; 0xeac
   190d0:	mov	r0, r4
   190d4:	bl	11b94 <strlen@plt>
   190d8:	add	r1, r0, #1
   190dc:	mov	r0, #3
   190e0:	bl	29ef4 <_obstack_memory_used@@Base+0x4e3c>
   190e4:	ldrb	r1, [r4]
   190e8:	str	r0, [sp, #36]	; 0x24
   190ec:	cmp	r1, #0
   190f0:	beq	1956c <__assert_fail@plt+0x77f8>
   190f4:	movw	sl, #55248	; 0xd7d0
   190f8:	movt	sl, #2
   190fc:	ldr	fp, [sp, #8]
   19100:	mov	r7, r0
   19104:	b	1911c <__assert_fail@plt+0x73a8>
   19108:	strb	r1, [r3], #1
   1910c:	ldrb	r1, [r4, #1]!
   19110:	cmp	r1, #0
   19114:	beq	19158 <__assert_fail@plt+0x73e4>
   19118:	mov	r7, r3
   1911c:	add	r2, r5, r1
   19120:	mov	r3, r7
   19124:	ldrb	r2, [r2, #3760]	; 0xeb0
   19128:	cmp	r2, #0
   1912c:	bne	19108 <__assert_fail@plt+0x7394>
   19130:	mov	r3, sl
   19134:	mvn	r2, #0
   19138:	str	r1, [sp]
   1913c:	mov	r0, r7
   19140:	mov	r1, #1
   19144:	bl	11bc4 <__sprintf_chk@plt>
   19148:	ldrb	r1, [r4, #1]!
   1914c:	add	r3, r7, #3
   19150:	cmp	r1, #0
   19154:	bne	19118 <__assert_fail@plt+0x73a4>
   19158:	str	fp, [sp, #8]
   1915c:	mov	r2, #0
   19160:	add	r1, sp, #8256	; 0x2040
   19164:	add	r1, r1, #32
   19168:	ldr	r0, [r1]
   1916c:	strb	r2, [r3]
   19170:	bl	11b94 <strlen@plt>
   19174:	add	r1, r0, #1
   19178:	mov	r0, #3
   1917c:	bl	29ef4 <_obstack_memory_used@@Base+0x4e3c>
   19180:	add	r3, sp, #8256	; 0x2040
   19184:	mov	sl, r0
   19188:	add	r3, r3, #32
   1918c:	ldr	r3, [r3]
   19190:	ldrb	r1, [r3]
   19194:	cmp	r1, #0
   19198:	beq	19564 <__assert_fail@plt+0x77f0>
   1919c:	movw	r3, #55248	; 0xd7d0
   191a0:	movt	r3, #2
   191a4:	ldr	fp, [sp, #8]
   191a8:	mov	r4, r0
   191ac:	str	r3, [sp, #32]
   191b0:	add	r3, sp, #8256	; 0x2040
   191b4:	add	r3, r3, #32
   191b8:	ldr	r7, [r3]
   191bc:	b	191d4 <__assert_fail@plt+0x7460>
   191c0:	strb	r1, [r3], #1
   191c4:	mov	r4, r3
   191c8:	ldrb	r1, [r7, #1]!
   191cc:	cmp	r1, #0
   191d0:	beq	1921c <__assert_fail@plt+0x74a8>
   191d4:	cmp	r1, #47	; 0x2f
   191d8:	mov	r3, r4
   191dc:	add	r2, r5, r1
   191e0:	strbeq	r1, [r4], #1
   191e4:	beq	191c8 <__assert_fail@plt+0x7454>
   191e8:	ldrb	r2, [r2, #3760]	; 0xeb0
   191ec:	cmp	r2, #0
   191f0:	bne	191c0 <__assert_fail@plt+0x744c>
   191f4:	mov	r0, r4
   191f8:	mvn	r2, #0
   191fc:	str	r1, [sp]
   19200:	mov	r1, #1
   19204:	ldr	r3, [sp, #32]
   19208:	add	r4, r4, #3
   1920c:	bl	11bc4 <__sprintf_chk@plt>
   19210:	ldrb	r1, [r7, #1]!
   19214:	cmp	r1, #0
   19218:	bne	191d4 <__assert_fail@plt+0x7460>
   1921c:	str	fp, [sp, #8]
   19220:	mov	r2, #0
   19224:	movw	ip, #64396	; 0xfb8c
   19228:	movt	ip, #2
   1922c:	movw	r3, #316	; 0x13c
   19230:	movt	r3, #3
   19234:	strb	r2, [r4]
   19238:	movw	r1, #55256	; 0xd7d8
   1923c:	movt	r1, #2
   19240:	ldrb	lr, [sl]
   19244:	mov	r0, #1
   19248:	str	sl, [sp]
   1924c:	ldr	r4, [sp, #36]	; 0x24
   19250:	cmp	lr, #47	; 0x2f
   19254:	movne	r3, ip
   19258:	mov	r2, r4
   1925c:	bl	11bf4 <__printf_chk@plt>
   19260:	mov	r0, r4
   19264:	bl	1ee98 <__assert_fail@plt+0xd124>
   19268:	mov	r0, sl
   1926c:	bl	1ee98 <__assert_fail@plt+0xd124>
   19270:	ldr	r3, [sp, #8]
   19274:	cmp	r3, #0
   19278:	beq	19498 <__assert_fail@plt+0x7724>
   1927c:	movw	r5, #4912	; 0x1330
   19280:	movt	r5, #4
   19284:	ldrb	r3, [r5, #4016]	; 0xfb0
   19288:	cmp	r3, #0
   1928c:	beq	192d0 <__assert_fail@plt+0x755c>
   19290:	ldr	r3, [sp, #8]
   19294:	ldr	r2, [sp, #8]
   19298:	ldr	r3, [r3, #12]
   1929c:	ldr	r2, [r2, #16]
   192a0:	sub	r2, r2, r3
   192a4:	cmp	r2, #7
   192a8:	bls	19538 <__assert_fail@plt+0x77c4>
   192ac:	ldr	r1, [r9, #-4]
   192b0:	ldr	r2, [r5, #3112]	; 0xc28
   192b4:	str	r2, [r3]
   192b8:	str	r1, [r3, #4]
   192bc:	ldr	r3, [sp, #8]
   192c0:	ldr	r2, [sp, #8]
   192c4:	ldr	r3, [r3, #12]
   192c8:	add	r3, r3, #8
   192cc:	str	r3, [r2, #12]
   192d0:	ldr	r0, [r6, #-4]
   192d4:	mov	r1, #1
   192d8:	ldr	r3, [r8]
   192dc:	ldr	ip, [sp, #28]
   192e0:	ldr	r2, [sp, #24]
   192e4:	add	r0, r0, ip
   192e8:	bl	11960 <fwrite_unlocked@plt>
   192ec:	ldrd	r2, [r9, #-8]
   192f0:	ldr	r0, [sp, #12]
   192f4:	ldrb	r1, [r5, #4016]	; 0xfb0
   192f8:	adds	sl, r2, r0
   192fc:	adc	fp, r3, #0
   19300:	mov	r2, sl
   19304:	mov	r3, fp
   19308:	cmp	r1, #0
   1930c:	strd	r2, [r9, #-8]
   19310:	beq	19354 <__assert_fail@plt+0x75e0>
   19314:	ldr	r3, [sp, #8]
   19318:	ldr	r2, [sp, #8]
   1931c:	ldr	r3, [r3, #12]
   19320:	ldr	r2, [r2, #16]
   19324:	sub	r2, r2, r3
   19328:	cmp	r2, #7
   1932c:	bls	19520 <__assert_fail@plt+0x77ac>
   19330:	ldr	r1, [r9, #-4]
   19334:	ldr	r2, [r5, #3112]	; 0xc28
   19338:	str	r2, [r3]
   1933c:	str	r1, [r3, #4]
   19340:	ldr	r3, [sp, #8]
   19344:	ldr	r2, [sp, #8]
   19348:	ldr	r3, [r3, #12]
   1934c:	add	r3, r3, #8
   19350:	str	r3, [r2, #12]
   19354:	add	r3, sp, #8256	; 0x2040
   19358:	add	r3, r3, #32
   1935c:	ldr	r3, [r3]
   19360:	cmp	r3, #0
   19364:	beq	1938c <__assert_fail@plt+0x7618>
   19368:	movw	r0, #55276	; 0xd7ec
   1936c:	movt	r0, #2
   19370:	ldr	r3, [r8]
   19374:	mov	r2, #6
   19378:	mov	r1, #1
   1937c:	bl	11960 <fwrite_unlocked@plt>
   19380:	ldr	r3, [sp, #16]
   19384:	cmp	r3, #0
   19388:	bne	1942c <__assert_fail@plt+0x76b8>
   1938c:	ldr	r0, [r6, #-4]
   19390:	ldr	r3, [sp, #20]
   19394:	cmp	r0, r3
   19398:	cmpne	r0, r6
   1939c:	beq	193a4 <__assert_fail@plt+0x7630>
   193a0:	bl	1ee98 <__assert_fail@plt+0xd124>
   193a4:	ldrb	r0, [r6, #-5]
   193a8:	ldr	r3, [sp, #12]
   193ac:	add	r0, r0, r3
   193b0:	add	sp, sp, #8192	; 0x2000
   193b4:	add	sp, sp, #52	; 0x34
   193b8:	ldrd	r4, [sp]
   193bc:	ldrd	r6, [sp, #8]
   193c0:	ldrd	r8, [sp, #16]
   193c4:	ldrd	sl, [sp, #24]
   193c8:	add	sp, sp, #32
   193cc:	pop	{pc}		; (ldr pc, [sp], #4)
   193d0:	ldrb	r3, [r5, #3254]	; 0xcb6
   193d4:	cmp	r3, #0
   193d8:	str	r3, [sp, #16]
   193dc:	beq	190bc <__assert_fail@plt+0x7348>
   193e0:	ldrb	r3, [r6, #-5]
   193e4:	cmp	r3, #0
   193e8:	bne	19550 <__assert_fail@plt+0x77dc>
   193ec:	ldr	r3, [sp, #12]
   193f0:	ldr	r0, [r8]
   193f4:	ldr	r1, [r6, #-4]
   193f8:	sub	r3, r3, #2
   193fc:	str	r3, [sp, #24]
   19400:	ldr	r3, [r0, #20]
   19404:	ldr	r2, [r0, #24]
   19408:	ldrb	r1, [r1]
   1940c:	cmp	r3, r2
   19410:	bcs	1959c <__assert_fail@plt+0x7828>
   19414:	add	r2, r3, #1
   19418:	mov	ip, #1
   1941c:	str	r2, [r0, #20]
   19420:	strb	r1, [r3]
   19424:	str	ip, [sp, #28]
   19428:	b	190cc <__assert_fail@plt+0x7358>
   1942c:	ldr	r0, [r8]
   19430:	ldr	r3, [r6, #-4]
   19434:	ldr	r1, [sp, #12]
   19438:	ldr	r2, [r0, #20]
   1943c:	ldr	ip, [r0, #24]
   19440:	add	r3, r3, r1
   19444:	ldrb	r1, [r3, #-1]
   19448:	cmp	r2, ip
   1944c:	addcc	r3, r2, #1
   19450:	strcc	r3, [r0, #20]
   19454:	strbcc	r1, [r2]
   19458:	bcc	1938c <__assert_fail@plt+0x7618>
   1945c:	bl	11c48 <__overflow@plt>
   19460:	b	1938c <__assert_fail@plt+0x7618>
   19464:	ldr	r3, [sp, #12]
   19468:	str	r3, [sp, #24]
   1946c:	add	r3, sp, #8256	; 0x2040
   19470:	add	r3, r3, #32
   19474:	ldr	r3, [r3]
   19478:	str	r3, [sp, #28]
   1947c:	add	r3, sp, #8256	; 0x2040
   19480:	add	r3, r3, #32
   19484:	ldr	r3, [r3]
   19488:	str	r3, [sp, #16]
   1948c:	ldr	r3, [sp, #8]
   19490:	cmp	r3, #0
   19494:	bne	1927c <__assert_fail@plt+0x7508>
   19498:	ldr	r0, [r6, #-4]
   1949c:	mov	r1, #1
   194a0:	ldr	r3, [r8]
   194a4:	ldr	ip, [sp, #28]
   194a8:	ldr	r2, [sp, #24]
   194ac:	add	r0, r0, ip
   194b0:	bl	11960 <fwrite_unlocked@plt>
   194b4:	ldrd	r2, [r9, #-8]
   194b8:	ldr	r1, [sp, #12]
   194bc:	adds	r4, r2, r1
   194c0:	adc	r5, r3, #0
   194c4:	strd	r4, [r9, #-8]
   194c8:	b	19354 <__assert_fail@plt+0x75e0>
   194cc:	ldr	r9, [pc, #216]	; 195ac <__assert_fail@plt+0x7838>
   194d0:	movw	r8, #4900	; 0x1324
   194d4:	movt	r8, #4
   194d8:	ldr	r0, [r8]
   194dc:	ldr	r3, [r9, #-8]
   194e0:	ldr	r2, [r9, #-4]
   194e4:	ldr	r1, [r0, #20]
   194e8:	adds	r3, r3, #1
   194ec:	ldr	ip, [r0, #24]
   194f0:	adc	r2, r2, #0
   194f4:	str	r3, [r9, #-8]
   194f8:	str	r2, [r9, #-4]
   194fc:	cmp	r1, ip
   19500:	addcc	r2, r1, #1
   19504:	movcc	r3, #32
   19508:	strcc	r2, [r0, #20]
   1950c:	strbcc	r3, [r1]
   19510:	bcc	19024 <__assert_fail@plt+0x72b0>
   19514:	mov	r1, #32
   19518:	bl	11c48 <__overflow@plt>
   1951c:	b	19024 <__assert_fail@plt+0x72b0>
   19520:	mov	r1, #8
   19524:	ldr	r0, [sp, #8]
   19528:	bl	24e70 <_obstack_newchunk@@Base>
   1952c:	ldr	r3, [sp, #8]
   19530:	ldr	r3, [r3, #12]
   19534:	b	19330 <__assert_fail@plt+0x75bc>
   19538:	mov	r1, #8
   1953c:	ldr	r0, [sp, #8]
   19540:	bl	24e70 <_obstack_newchunk@@Base>
   19544:	ldr	r3, [sp, #8]
   19548:	ldr	r3, [r3, #12]
   1954c:	b	192ac <__assert_fail@plt+0x7538>
   19550:	ldr	r2, [sp, #12]
   19554:	mov	r3, #0
   19558:	str	r3, [sp, #16]
   1955c:	strd	r2, [sp, #24]
   19560:	b	190cc <__assert_fail@plt+0x7358>
   19564:	mov	r4, r0
   19568:	b	19220 <__assert_fail@plt+0x74ac>
   1956c:	mov	r3, r0
   19570:	b	1915c <__assert_fail@plt+0x73e8>
   19574:	ldrb	r3, [r0]
   19578:	cmp	r3, #48	; 0x30
   1957c:	bne	19054 <__assert_fail@plt+0x72e0>
   19580:	b	1906c <__assert_fail@plt+0x72f8>
   19584:	movw	r1, #55176	; 0xd788
   19588:	movt	r1, #2
   1958c:	bl	11d20 <strncmp@plt>
   19590:	cmp	r0, #0
   19594:	bne	19054 <__assert_fail@plt+0x72e0>
   19598:	b	1906c <__assert_fail@plt+0x72f8>
   1959c:	bl	11c48 <__overflow@plt>
   195a0:	mov	r3, #1
   195a4:	str	r3, [sp, #28]
   195a8:	b	190cc <__assert_fail@plt+0x7358>
   195ac:	andeq	r1, r4, r0, ror #30
   195b0:	ldrdeq	r1, [r4], -r4
   195b4:	ldrdeq	r1, [r4], -ip
   195b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   195bc:	movw	r5, #4912	; 0x1330
   195c0:	movt	r5, #4
   195c4:	strd	r6, [sp, #8]
   195c8:	subs	r7, r1, #0
   195cc:	mov	r6, r0
   195d0:	strd	r8, [sp, #16]
   195d4:	strd	sl, [sp, #24]
   195d8:	mov	fp, r3
   195dc:	mov	sl, r2
   195e0:	ldrb	r3, [r5, #4017]	; 0xfb1
   195e4:	str	lr, [sp, #32]
   195e8:	sub	sp, sp, #28
   195ec:	beq	1972c <__assert_fail@plt+0x79b8>
   195f0:	cmp	r3, #0
   195f4:	ldr	r9, [r0, #4]
   195f8:	bne	19648 <__assert_fail@plt+0x78d4>
   195fc:	ldr	r1, [r6, #8]
   19600:	eor	r7, r7, #1
   19604:	mov	r0, r9
   19608:	mov	r3, #0
   1960c:	stm	sp, {r7, sl}
   19610:	ldr	r2, [r6, #144]	; 0x90
   19614:	str	r1, [sp, #8]
   19618:	ldr	r1, [r5, #3284]	; 0xcd4
   1961c:	bl	18f9c <__assert_fail@plt+0x7228>
   19620:	mov	r4, r0
   19624:	bl	15e38 <__assert_fail@plt+0x40c4>
   19628:	mov	r0, r4
   1962c:	add	sp, sp, #28
   19630:	ldrd	r4, [sp]
   19634:	ldrd	r6, [sp, #8]
   19638:	ldrd	r8, [sp, #16]
   1963c:	ldrd	sl, [sp, #24]
   19640:	add	sp, sp, #32
   19644:	pop	{pc}		; (ldr pc, [sp], #4)
   19648:	ldrb	r3, [r0, #133]	; 0x85
   1964c:	movw	r8, #4560	; 0x11d0
   19650:	movt	r8, #4
   19654:	ldr	r4, [r0, #124]	; 0x7c
   19658:	cmp	r3, #0
   1965c:	bne	19800 <__assert_fail@plt+0x7a8c>
   19660:	ldr	r2, [r8, #96]	; 0x60
   19664:	cmp	r2, #0
   19668:	beq	1987c <__assert_fail@plt+0x7b08>
   1966c:	cmp	r2, #1
   19670:	ldr	r0, [r8, #100]	; 0x64
   19674:	beq	19ad4 <__assert_fail@plt+0x7d60>
   19678:	cmp	r2, #2
   1967c:	beq	19868 <__assert_fail@plt+0x7af4>
   19680:	mov	r3, #96	; 0x60
   19684:	add	r3, r8, r3
   19688:	ldr	r4, [r3, #4]
   1968c:	cmp	r4, #0
   19690:	bne	196b8 <__assert_fail@plt+0x7944>
   19694:	ldr	r2, [r8, #32]
   19698:	cmp	r2, #0
   1969c:	beq	195fc <__assert_fail@plt+0x7888>
   196a0:	cmp	r2, #1
   196a4:	ldr	r0, [r8, #36]	; 0x24
   196a8:	beq	199cc <__assert_fail@plt+0x7c58>
   196ac:	cmp	r2, #2
   196b0:	beq	19ae4 <__assert_fail@plt+0x7d70>
   196b4:	mov	r3, r4
   196b8:	ldr	r1, [r6, #8]
   196bc:	eor	r7, r7, #1
   196c0:	mov	r0, r9
   196c4:	stm	sp, {r7, sl}
   196c8:	ldr	r2, [r6, #144]	; 0x90
   196cc:	str	r1, [sp, #8]
   196d0:	ldr	r1, [r5, #3284]	; 0xcd4
   196d4:	bl	18f9c <__assert_fail@plt+0x7228>
   196d8:	mov	r4, r0
   196dc:	bl	15e38 <__assert_fail@plt+0x40c4>
   196e0:	ldr	r3, [r8, #20]
   196e4:	cmp	r3, #0
   196e8:	beq	19884 <__assert_fail@plt+0x7b10>
   196ec:	ldr	r1, [pc, #1332]	; 19c28 <__assert_fail@plt+0x7eb4>
   196f0:	sub	r0, r1, #4
   196f4:	bl	14cc8 <__assert_fail@plt+0x2f54>
   196f8:	ldr	r2, [r5, #3308]	; 0xcec
   196fc:	cmp	r2, #0
   19700:	beq	19628 <__assert_fail@plt+0x78b4>
   19704:	sub	r3, fp, #1
   19708:	udiv	fp, fp, r2
   1970c:	add	r3, r3, r4
   19710:	udiv	r3, r3, r2
   19714:	cmp	fp, r3
   19718:	beq	19628 <__assert_fail@plt+0x78b4>
   1971c:	ldr	r1, [pc, #1288]	; 19c2c <__assert_fail@plt+0x7eb8>
   19720:	sub	r0, r1, #4
   19724:	bl	14cc8 <__assert_fail@plt+0x2f54>
   19728:	b	19628 <__assert_fail@plt+0x78b4>
   1972c:	cmp	r3, #0
   19730:	ldr	r9, [r0]
   19734:	beq	195fc <__assert_fail@plt+0x7888>
   19738:	ldrb	r3, [r5, #4018]	; 0xfb2
   1973c:	ldrb	r2, [r0, #133]	; 0x85
   19740:	cmp	r3, #0
   19744:	bne	197f0 <__assert_fail@plt+0x7a7c>
   19748:	ldr	r4, [r6, #32]
   1974c:	movw	r8, #4560	; 0x11d0
   19750:	movt	r8, #4
   19754:	mov	r1, r2
   19758:	ldrb	r2, [r6, #132]	; 0x84
   1975c:	cmp	r2, #0
   19760:	bne	19810 <__assert_fail@plt+0x7a9c>
   19764:	ldr	r2, [r6, #120]	; 0x78
   19768:	movw	r3, #49168	; 0xc010
   1976c:	movt	r3, #2
   19770:	add	r3, r3, r2, lsl #2
   19774:	ldr	r3, [r3, #364]	; 0x16c
   19778:	cmp	r3, #5
   1977c:	beq	198c0 <__assert_fail@plt+0x7b4c>
   19780:	sub	r2, r3, #7
   19784:	clz	r2, r2
   19788:	lsr	r2, r2, #5
   1978c:	cmp	r1, #0
   19790:	movne	r2, #0
   19794:	andeq	r2, r2, #1
   19798:	cmp	r2, #0
   1979c:	lsleq	r3, r3, #3
   197a0:	beq	19684 <__assert_fail@plt+0x7910>
   197a4:	ldrb	r3, [r5, #4018]	; 0xfb2
   197a8:	cmp	r3, #0
   197ac:	bne	19860 <__assert_fail@plt+0x7aec>
   197b0:	ldr	r2, [r8, #104]	; 0x68
   197b4:	cmp	r2, #0
   197b8:	moveq	r3, #56	; 0x38
   197bc:	beq	19684 <__assert_fail@plt+0x7910>
   197c0:	cmp	r2, #1
   197c4:	ldr	r0, [r8, #108]	; 0x6c
   197c8:	beq	199dc <__assert_fail@plt+0x7c68>
   197cc:	cmp	r2, #2
   197d0:	bne	19860 <__assert_fail@plt+0x7aec>
   197d4:	movw	r1, #55176	; 0xd788
   197d8:	movt	r1, #2
   197dc:	bl	11d20 <strncmp@plt>
   197e0:	cmp	r0, #0
   197e4:	moveq	r3, #56	; 0x38
   197e8:	movne	r3, #104	; 0x68
   197ec:	b	19684 <__assert_fail@plt+0x7910>
   197f0:	cmp	r2, #0
   197f4:	beq	19748 <__assert_fail@plt+0x79d4>
   197f8:	ldr	r4, [r0, #124]	; 0x7c
   197fc:	b	1974c <__assert_fail@plt+0x79d8>
   19800:	ldrb	r2, [r6, #132]	; 0x84
   19804:	mov	r1, #0
   19808:	cmp	r2, #0
   1980c:	beq	19764 <__assert_fail@plt+0x79f0>
   19810:	and	r3, r4, #61440	; 0xf000
   19814:	cmp	r3, #32768	; 0x8000
   19818:	beq	19924 <__assert_fail@plt+0x7bb0>
   1981c:	cmp	r3, #16384	; 0x4000
   19820:	beq	199f0 <__assert_fail@plt+0x7c7c>
   19824:	cmp	r3, #40960	; 0xa000
   19828:	beq	19a2c <__assert_fail@plt+0x7cb8>
   1982c:	cmp	r3, #4096	; 0x1000
   19830:	moveq	r3, #64	; 0x40
   19834:	beq	19684 <__assert_fail@plt+0x7910>
   19838:	cmp	r3, #49152	; 0xc000
   1983c:	moveq	r3, #72	; 0x48
   19840:	beq	19684 <__assert_fail@plt+0x7910>
   19844:	cmp	r3, #24576	; 0x6000
   19848:	moveq	r3, #80	; 0x50
   1984c:	beq	19684 <__assert_fail@plt+0x7910>
   19850:	cmp	r3, #8192	; 0x2000
   19854:	moveq	r3, #88	; 0x58
   19858:	movne	r3, #104	; 0x68
   1985c:	b	19684 <__assert_fail@plt+0x7910>
   19860:	mov	r3, #104	; 0x68
   19864:	b	19684 <__assert_fail@plt+0x7910>
   19868:	movw	r1, #55176	; 0xd788
   1986c:	movt	r1, #2
   19870:	bl	11d20 <strncmp@plt>
   19874:	cmp	r0, #0
   19878:	bne	19680 <__assert_fail@plt+0x790c>
   1987c:	mvn	r1, #0
   19880:	b	19758 <__assert_fail@plt+0x79e4>
   19884:	ldr	r1, [pc, #932]	; 19c30 <__assert_fail@plt+0x7ebc>
   19888:	sub	r0, r1, #4
   1988c:	bl	14cc8 <__assert_fail@plt+0x2f54>
   19890:	ldr	r1, [pc, #924]	; 19c34 <__assert_fail@plt+0x7ec0>
   19894:	sub	r0, r1, #4
   19898:	bl	14cc8 <__assert_fail@plt+0x2f54>
   1989c:	ldr	r1, [pc, #916]	; 19c38 <__assert_fail@plt+0x7ec4>
   198a0:	sub	r0, r1, #4
   198a4:	bl	14cc8 <__assert_fail@plt+0x2f54>
   198a8:	b	196f8 <__assert_fail@plt+0x7984>
   198ac:	movw	r1, #55176	; 0xd788
   198b0:	movt	r1, #2
   198b4:	bl	11d20 <strncmp@plt>
   198b8:	cmp	r0, #0
   198bc:	bne	19b3c <__assert_fail@plt+0x7dc8>
   198c0:	mov	r0, r9
   198c4:	bl	11b94 <strlen@plt>
   198c8:	ldr	r4, [r5, #4020]	; 0xfb4
   198cc:	mov	r3, r0
   198d0:	cmp	r4, #0
   198d4:	beq	19914 <__assert_fail@plt+0x7ba0>
   198d8:	ldr	r1, [r4]
   198dc:	sub	r0, r3, r1
   198e0:	cmp	r3, r1
   198e4:	mov	r2, r1
   198e8:	add	r0, r9, r0
   198ec:	bcc	19908 <__assert_fail@plt+0x7b94>
   198f0:	ldr	r1, [r4, #4]
   198f4:	str	r3, [sp, #20]
   198f8:	bl	1d87c <__assert_fail@plt+0xbb08>
   198fc:	cmp	r0, #0
   19900:	ldr	r3, [sp, #20]
   19904:	beq	1991c <__assert_fail@plt+0x7ba8>
   19908:	ldr	r4, [r4, #16]
   1990c:	cmp	r4, #0
   19910:	bne	198d8 <__assert_fail@plt+0x7b64>
   19914:	mov	r3, #40	; 0x28
   19918:	b	19684 <__assert_fail@plt+0x7910>
   1991c:	add	r3, r4, #8
   19920:	b	19688 <__assert_fail@plt+0x7914>
   19924:	tst	r4, #2048	; 0x800
   19928:	beq	19968 <__assert_fail@plt+0x7bf4>
   1992c:	ldr	r2, [r8, #128]	; 0x80
   19930:	cmp	r2, #0
   19934:	beq	19968 <__assert_fail@plt+0x7bf4>
   19938:	cmp	r2, #1
   1993c:	ldr	r0, [r8, #132]	; 0x84
   19940:	beq	19b84 <__assert_fail@plt+0x7e10>
   19944:	cmp	r2, #2
   19948:	beq	19954 <__assert_fail@plt+0x7be0>
   1994c:	mov	r3, #128	; 0x80
   19950:	b	19684 <__assert_fail@plt+0x7910>
   19954:	movw	r1, #55176	; 0xd788
   19958:	movt	r1, #2
   1995c:	bl	11d20 <strncmp@plt>
   19960:	cmp	r0, #0
   19964:	bne	1994c <__assert_fail@plt+0x7bd8>
   19968:	tst	r4, #1024	; 0x400
   1996c:	bne	199a4 <__assert_fail@plt+0x7c30>
   19970:	ldr	r2, [r8, #168]	; 0xa8
   19974:	cmp	r2, #0
   19978:	beq	19a48 <__assert_fail@plt+0x7cd4>
   1997c:	cmp	r2, #1
   19980:	ldr	r0, [r8, #172]	; 0xac
   19984:	beq	19b74 <__assert_fail@plt+0x7e00>
   19988:	cmp	r2, #2
   1998c:	beq	19a34 <__assert_fail@plt+0x7cc0>
   19990:	ldrb	r3, [r6, #140]	; 0x8c
   19994:	cmp	r3, #0
   19998:	beq	19a48 <__assert_fail@plt+0x7cd4>
   1999c:	mov	r3, #168	; 0xa8
   199a0:	b	19684 <__assert_fail@plt+0x7910>
   199a4:	ldr	r2, [r8, #136]	; 0x88
   199a8:	cmp	r2, #0
   199ac:	beq	19970 <__assert_fail@plt+0x7bfc>
   199b0:	cmp	r2, #1
   199b4:	ldr	r0, [r8, #140]	; 0x8c
   199b8:	beq	19b94 <__assert_fail@plt+0x7e20>
   199bc:	cmp	r2, #2
   199c0:	beq	19ba4 <__assert_fail@plt+0x7e30>
   199c4:	mov	r3, #136	; 0x88
   199c8:	b	19684 <__assert_fail@plt+0x7910>
   199cc:	ldrb	r3, [r0]
   199d0:	cmp	r3, #48	; 0x30
   199d4:	bne	196b4 <__assert_fail@plt+0x7940>
   199d8:	b	195fc <__assert_fail@plt+0x7888>
   199dc:	ldrb	r3, [r0]
   199e0:	cmp	r3, #48	; 0x30
   199e4:	moveq	r3, #56	; 0x38
   199e8:	movne	r3, #104	; 0x68
   199ec:	b	19684 <__assert_fail@plt+0x7910>
   199f0:	movw	r3, #514	; 0x202
   199f4:	bics	r3, r3, r4
   199f8:	beq	19b4c <__assert_fail@plt+0x7dd8>
   199fc:	tst	r4, #2
   19a00:	beq	19a8c <__assert_fail@plt+0x7d18>
   19a04:	ldr	r2, [r8, #152]	; 0x98
   19a08:	cmp	r2, #0
   19a0c:	beq	19a8c <__assert_fail@plt+0x7d18>
   19a10:	cmp	r2, #1
   19a14:	ldr	r0, [r8, #156]	; 0x9c
   19a18:	beq	19bbc <__assert_fail@plt+0x7e48>
   19a1c:	cmp	r2, #2
   19a20:	beq	19a78 <__assert_fail@plt+0x7d04>
   19a24:	mov	r3, #152	; 0x98
   19a28:	b	19684 <__assert_fail@plt+0x7910>
   19a2c:	mov	r3, #7
   19a30:	b	1978c <__assert_fail@plt+0x7a18>
   19a34:	movw	r1, #55176	; 0xd788
   19a38:	movt	r1, #2
   19a3c:	bl	11d20 <strncmp@plt>
   19a40:	cmp	r0, #0
   19a44:	bne	19990 <__assert_fail@plt+0x7c1c>
   19a48:	tst	r4, #73	; 0x49
   19a4c:	beq	19b10 <__assert_fail@plt+0x7d9c>
   19a50:	ldr	r2, [r8, #112]	; 0x70
   19a54:	cmp	r2, #0
   19a58:	beq	19b10 <__assert_fail@plt+0x7d9c>
   19a5c:	cmp	r2, #1
   19a60:	ldr	r0, [r8, #116]	; 0x74
   19a64:	beq	19bdc <__assert_fail@plt+0x7e68>
   19a68:	cmp	r2, #2
   19a6c:	beq	19afc <__assert_fail@plt+0x7d88>
   19a70:	mov	r3, #112	; 0x70
   19a74:	b	19684 <__assert_fail@plt+0x7910>
   19a78:	movw	r1, #55176	; 0xd788
   19a7c:	movt	r1, #2
   19a80:	bl	11d20 <strncmp@plt>
   19a84:	cmp	r0, #0
   19a88:	bne	19a24 <__assert_fail@plt+0x7cb0>
   19a8c:	tst	r4, #512	; 0x200
   19a90:	beq	19b44 <__assert_fail@plt+0x7dd0>
   19a94:	ldr	r2, [r8, #144]	; 0x90
   19a98:	cmp	r2, #0
   19a9c:	beq	19b44 <__assert_fail@plt+0x7dd0>
   19aa0:	cmp	r2, #1
   19aa4:	ldr	r0, [r8, #148]	; 0x94
   19aa8:	beq	19bec <__assert_fail@plt+0x7e78>
   19aac:	cmp	r2, #2
   19ab0:	movne	r3, #144	; 0x90
   19ab4:	bne	19684 <__assert_fail@plt+0x7910>
   19ab8:	movw	r1, #55176	; 0xd788
   19abc:	movt	r1, #2
   19ac0:	bl	11d20 <strncmp@plt>
   19ac4:	cmp	r0, #0
   19ac8:	moveq	r3, #48	; 0x30
   19acc:	movne	r3, #144	; 0x90
   19ad0:	b	19684 <__assert_fail@plt+0x7910>
   19ad4:	ldrb	r3, [r0]
   19ad8:	cmp	r3, #48	; 0x30
   19adc:	bne	19680 <__assert_fail@plt+0x790c>
   19ae0:	b	1987c <__assert_fail@plt+0x7b08>
   19ae4:	movw	r1, #55176	; 0xd788
   19ae8:	movt	r1, #2
   19aec:	bl	11d20 <strncmp@plt>
   19af0:	cmp	r0, #0
   19af4:	bne	196b4 <__assert_fail@plt+0x7940>
   19af8:	b	195fc <__assert_fail@plt+0x7888>
   19afc:	movw	r1, #55176	; 0xd788
   19b00:	movt	r1, #2
   19b04:	bl	11d20 <strncmp@plt>
   19b08:	cmp	r0, #0
   19b0c:	bne	19a70 <__assert_fail@plt+0x7cfc>
   19b10:	ldr	r3, [r6, #36]	; 0x24
   19b14:	cmp	r3, #1
   19b18:	bls	198c0 <__assert_fail@plt+0x7b4c>
   19b1c:	ldr	r2, [r8, #176]	; 0xb0
   19b20:	cmp	r2, #0
   19b24:	beq	198c0 <__assert_fail@plt+0x7b4c>
   19b28:	cmp	r2, #1
   19b2c:	ldr	r0, [r8, #180]	; 0xb4
   19b30:	beq	19c18 <__assert_fail@plt+0x7ea4>
   19b34:	cmp	r2, #2
   19b38:	beq	198ac <__assert_fail@plt+0x7b38>
   19b3c:	mov	r3, #176	; 0xb0
   19b40:	b	19684 <__assert_fail@plt+0x7910>
   19b44:	mov	r3, #48	; 0x30
   19b48:	b	19684 <__assert_fail@plt+0x7910>
   19b4c:	ldr	r2, [r8, #160]	; 0xa0
   19b50:	cmp	r2, #0
   19b54:	beq	199fc <__assert_fail@plt+0x7c88>
   19b58:	cmp	r2, #1
   19b5c:	ldr	r0, [r8, #164]	; 0xa4
   19b60:	beq	19bcc <__assert_fail@plt+0x7e58>
   19b64:	cmp	r2, #2
   19b68:	beq	19c00 <__assert_fail@plt+0x7e8c>
   19b6c:	mov	r3, #160	; 0xa0
   19b70:	b	19684 <__assert_fail@plt+0x7910>
   19b74:	ldrb	r3, [r0]
   19b78:	cmp	r3, #48	; 0x30
   19b7c:	bne	19990 <__assert_fail@plt+0x7c1c>
   19b80:	b	19a48 <__assert_fail@plt+0x7cd4>
   19b84:	ldrb	r3, [r0]
   19b88:	cmp	r3, #48	; 0x30
   19b8c:	bne	1994c <__assert_fail@plt+0x7bd8>
   19b90:	b	19968 <__assert_fail@plt+0x7bf4>
   19b94:	ldrb	r3, [r0]
   19b98:	cmp	r3, #48	; 0x30
   19b9c:	bne	199c4 <__assert_fail@plt+0x7c50>
   19ba0:	b	19970 <__assert_fail@plt+0x7bfc>
   19ba4:	movw	r1, #55176	; 0xd788
   19ba8:	movt	r1, #2
   19bac:	bl	11d20 <strncmp@plt>
   19bb0:	cmp	r0, #0
   19bb4:	bne	199c4 <__assert_fail@plt+0x7c50>
   19bb8:	b	19970 <__assert_fail@plt+0x7bfc>
   19bbc:	ldrb	r3, [r0]
   19bc0:	cmp	r3, #48	; 0x30
   19bc4:	bne	19a24 <__assert_fail@plt+0x7cb0>
   19bc8:	b	19a8c <__assert_fail@plt+0x7d18>
   19bcc:	ldrb	r3, [r0]
   19bd0:	cmp	r3, #48	; 0x30
   19bd4:	bne	19b6c <__assert_fail@plt+0x7df8>
   19bd8:	b	199fc <__assert_fail@plt+0x7c88>
   19bdc:	ldrb	r3, [r0]
   19be0:	cmp	r3, #48	; 0x30
   19be4:	bne	19a70 <__assert_fail@plt+0x7cfc>
   19be8:	b	19b10 <__assert_fail@plt+0x7d9c>
   19bec:	ldrb	r3, [r0]
   19bf0:	cmp	r3, #48	; 0x30
   19bf4:	moveq	r3, #48	; 0x30
   19bf8:	movne	r3, #144	; 0x90
   19bfc:	b	19684 <__assert_fail@plt+0x7910>
   19c00:	movw	r1, #55176	; 0xd788
   19c04:	movt	r1, #2
   19c08:	bl	11d20 <strncmp@plt>
   19c0c:	cmp	r0, #0
   19c10:	bne	19b6c <__assert_fail@plt+0x7df8>
   19c14:	b	199fc <__assert_fail@plt+0x7c88>
   19c18:	ldrb	r3, [r0]
   19c1c:	cmp	r3, #48	; 0x30
   19c20:	bne	19b3c <__assert_fail@plt+0x7dc8>
   19c24:	b	198c0 <__assert_fail@plt+0x7b4c>
   19c28:	andeq	r1, r4, r4, ror #3
   19c2c:	andeq	r1, r4, ip, lsl #5
   19c30:	ldrdeq	r1, [r4], -r4
   19c34:	andeq	r1, r4, ip, ror #3
   19c38:	ldrdeq	r1, [r4], -ip
   19c3c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19c40:	movw	r4, #4912	; 0x1330
   19c44:	movt	r4, #4
   19c48:	ldrb	r3, [r4, #4017]	; 0xfb1
   19c4c:	mov	r5, r0
   19c50:	strd	r6, [sp, #8]
   19c54:	strd	r8, [sp, #16]
   19c58:	mov	r8, r1
   19c5c:	str	lr, [sp, #24]
   19c60:	sub	sp, sp, #676	; 0x2a4
   19c64:	cmp	r3, #0
   19c68:	beq	19c80 <__assert_fail@plt+0x7f0c>
   19c6c:	movw	r3, #4560	; 0x11d0
   19c70:	movt	r3, #4
   19c74:	ldr	r2, [r3, #32]
   19c78:	cmp	r2, #0
   19c7c:	bne	19d98 <__assert_fail@plt+0x8024>
   19c80:	ldrb	r3, [r4, #3077]	; 0xc05
   19c84:	cmp	r3, #0
   19c88:	beq	19cc4 <__assert_fail@plt+0x7f50>
   19c8c:	ldr	r3, [r4, #3080]	; 0xc08
   19c90:	cmp	r3, #4
   19c94:	ldrb	r3, [r5, #132]	; 0x84
   19c98:	moveq	r6, #0
   19c9c:	ldrne	r6, [r4, #3256]	; 0xcb8
   19ca0:	cmp	r3, #0
   19ca4:	bne	19d7c <__assert_fail@plt+0x8008>
   19ca8:	movw	r3, #55284	; 0xd7f4
   19cac:	movt	r3, #2
   19cb0:	movw	r1, #55288	; 0xd7f8
   19cb4:	movt	r1, #2
   19cb8:	mov	r2, r6
   19cbc:	mov	r0, #1
   19cc0:	bl	11bf4 <__printf_chk@plt>
   19cc4:	ldrb	r3, [r4, #3078]	; 0xc06
   19cc8:	cmp	r3, #0
   19ccc:	beq	19d08 <__assert_fail@plt+0x7f94>
   19cd0:	ldr	r3, [r4, #3080]	; 0xc08
   19cd4:	cmp	r3, #4
   19cd8:	ldrb	r3, [r5, #132]	; 0x84
   19cdc:	moveq	r9, #0
   19ce0:	ldrne	r9, [r4, #3272]	; 0xcc8
   19ce4:	cmp	r3, #0
   19ce8:	movweq	r3, #55284	; 0xd7f4
   19cec:	movteq	r3, #2
   19cf0:	bne	19df8 <__assert_fail@plt+0x8084>
   19cf4:	movw	r1, #55288	; 0xd7f8
   19cf8:	movt	r1, #2
   19cfc:	mov	r2, r9
   19d00:	mov	r0, #1
   19d04:	bl	11bf4 <__printf_chk@plt>
   19d08:	ldrb	r3, [r4, #3276]	; 0xccc
   19d0c:	cmp	r3, #0
   19d10:	bne	19d54 <__assert_fail@plt+0x7fe0>
   19d14:	mov	r2, #0
   19d18:	mov	r3, r8
   19d1c:	mov	r1, r2
   19d20:	mov	r0, r5
   19d24:	bl	195b8 <__assert_fail@plt+0x7844>
   19d28:	ldr	r3, [r4, #3104]	; 0xc20
   19d2c:	mov	r6, r0
   19d30:	cmp	r3, #0
   19d34:	bne	19dd4 <__assert_fail@plt+0x8060>
   19d38:	mov	r0, r6
   19d3c:	add	sp, sp, #676	; 0x2a4
   19d40:	ldrd	r4, [sp]
   19d44:	ldrd	r6, [sp, #8]
   19d48:	ldrd	r8, [sp, #16]
   19d4c:	add	sp, sp, #24
   19d50:	pop	{pc}		; (ldr pc, [sp], #4)
   19d54:	ldr	r3, [r4, #3080]	; 0xc08
   19d58:	movw	r1, #55288	; 0xd7f8
   19d5c:	movt	r1, #2
   19d60:	mov	r0, #1
   19d64:	cmp	r3, #4
   19d68:	ldr	r3, [r5, #128]	; 0x80
   19d6c:	moveq	r2, #0
   19d70:	ldrne	r2, [r4, #3280]	; 0xcd0
   19d74:	bl	11bf4 <__printf_chk@plt>
   19d78:	b	19d14 <__assert_fail@plt+0x7fa0>
   19d7c:	ldrd	r0, [r5, #112]	; 0x70
   19d80:	orrs	r3, r0, r1
   19d84:	beq	19ca8 <__assert_fail@plt+0x7f34>
   19d88:	add	r2, sp, #20
   19d8c:	bl	21cf4 <__assert_fail@plt+0xff80>
   19d90:	mov	r3, r0
   19d94:	b	19cb0 <__assert_fail@plt+0x7f3c>
   19d98:	cmp	r2, #1
   19d9c:	ldr	r0, [r3, #36]	; 0x24
   19da0:	beq	19e28 <__assert_fail@plt+0x80b4>
   19da4:	cmp	r2, #2
   19da8:	beq	19e88 <__assert_fail@plt+0x8114>
   19dac:	ldr	r1, [pc, #236]	; 19ea0 <__assert_fail@plt+0x812c>
   19db0:	sub	r0, r1, #4
   19db4:	bl	14cc8 <__assert_fail@plt+0x2f54>
   19db8:	ldr	r1, [pc, #228]	; 19ea4 <__assert_fail@plt+0x8130>
   19dbc:	sub	r0, r1, #4
   19dc0:	bl	14cc8 <__assert_fail@plt+0x2f54>
   19dc4:	ldr	r1, [pc, #220]	; 19ea8 <__assert_fail@plt+0x8134>
   19dc8:	sub	r0, r1, #4
   19dcc:	bl	14cc8 <__assert_fail@plt+0x2f54>
   19dd0:	b	19c80 <__assert_fail@plt+0x7f0c>
   19dd4:	ldrb	r0, [r5, #132]	; 0x84
   19dd8:	ldr	r1, [r5, #32]
   19ddc:	ldr	r2, [r5, #120]	; 0x78
   19de0:	bl	14b80 <__assert_fail@plt+0x2e0c>
   19de4:	subs	r4, r0, #0
   19de8:	bne	19e38 <__assert_fail@plt+0x80c4>
   19dec:	cmp	r4, #0
   19df0:	addne	r6, r6, #1
   19df4:	b	19d38 <__assert_fail@plt+0x7fc4>
   19df8:	ldr	r3, [pc, #172]	; 19eac <__assert_fail@plt+0x8138>
   19dfc:	mov	r0, #512	; 0x200
   19e00:	mov	r1, #0
   19e04:	add	r2, sp, #20
   19e08:	strd	r0, [sp]
   19e0c:	ldrd	r0, [r5, #80]	; 0x50
   19e10:	ldrd	r6, [r3]
   19e14:	ldr	r3, [r4, #3260]	; 0xcbc
   19e18:	strd	r6, [sp, #8]
   19e1c:	bl	20780 <__assert_fail@plt+0xea0c>
   19e20:	mov	r3, r0
   19e24:	b	19cf4 <__assert_fail@plt+0x7f80>
   19e28:	ldrb	r3, [r0]
   19e2c:	cmp	r3, #48	; 0x30
   19e30:	bne	19dac <__assert_fail@plt+0x8038>
   19e34:	b	19c80 <__assert_fail@plt+0x7f0c>
   19e38:	ldr	r2, [pc, #112]	; 19eb0 <__assert_fail@plt+0x813c>
   19e3c:	movw	r3, #4900	; 0x1324
   19e40:	movt	r3, #4
   19e44:	ldr	r0, [r3]
   19e48:	ldr	r3, [r2, #-8]
   19e4c:	ldr	r1, [r2, #-4]
   19e50:	ldr	ip, [r0, #20]
   19e54:	adds	r3, r3, #1
   19e58:	ldr	lr, [r0, #24]
   19e5c:	adc	r1, r1, #0
   19e60:	str	r3, [r2, #-8]
   19e64:	str	r1, [r2, #-4]
   19e68:	cmp	ip, lr
   19e6c:	addcc	r3, ip, #1
   19e70:	strcc	r3, [r0, #20]
   19e74:	strbcc	r4, [ip]
   19e78:	bcc	19dec <__assert_fail@plt+0x8078>
   19e7c:	mov	r1, r4
   19e80:	bl	11c48 <__overflow@plt>
   19e84:	b	19dec <__assert_fail@plt+0x8078>
   19e88:	movw	r1, #55176	; 0xd788
   19e8c:	movt	r1, #2
   19e90:	bl	11d20 <strncmp@plt>
   19e94:	cmp	r0, #0
   19e98:	bne	19dac <__assert_fail@plt+0x8038>
   19e9c:	b	19c80 <__assert_fail@plt+0x7f0c>
   19ea0:	ldrdeq	r1, [r4], -r4
   19ea4:	strdeq	r1, [r4], -r4
   19ea8:	ldrdeq	r1, [r4], -ip
   19eac:	strdeq	r1, [r4], -r0
   19eb0:	andeq	r1, r4, r0, ror #30
   19eb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19eb8:	movw	r5, #4912	; 0x1330
   19ebc:	movt	r5, #4
   19ec0:	ldr	r3, [r5, #3296]	; 0xce0
   19ec4:	strd	r6, [sp, #8]
   19ec8:	strd	r8, [sp, #16]
   19ecc:	strd	sl, [sp, #24]
   19ed0:	str	lr, [sp, #32]
   19ed4:	sub	sp, sp, #12
   19ed8:	cmp	r3, #0
   19edc:	beq	19ff4 <__assert_fail@plt+0x8280>
   19ee0:	mov	r8, #0
   19ee4:	movw	fp, #4560	; 0x11d0
   19ee8:	movt	fp, #4
   19eec:	movw	r9, #4900	; 0x1324
   19ef0:	movt	r9, #4
   19ef4:	mov	sl, r0
   19ef8:	mov	r4, r8
   19efc:	b	19f30 <__assert_fail@plt+0x81bc>
   19f00:	cmp	r4, #0
   19f04:	addne	r8, r8, #2
   19f08:	movne	r6, r8
   19f0c:	bne	19f8c <__assert_fail@plt+0x8218>
   19f10:	mov	r6, r8
   19f14:	mov	r1, r6
   19f18:	mov	r0, r7
   19f1c:	bl	19c3c <__assert_fail@plt+0x7ec8>
   19f20:	ldr	r3, [r5, #3296]	; 0xce0
   19f24:	add	r4, r4, #1
   19f28:	cmp	r3, r4
   19f2c:	bls	1a004 <__assert_fail@plt+0x8290>
   19f30:	ldr	r3, [r5, #3304]	; 0xce8
   19f34:	ldr	r2, [r5, #3308]	; 0xcec
   19f38:	ldr	r7, [r3, r4, lsl #2]
   19f3c:	cmp	r2, #0
   19f40:	beq	19f00 <__assert_fail@plt+0x818c>
   19f44:	mov	r0, r7
   19f48:	bl	15388 <__assert_fail@plt+0x3614>
   19f4c:	cmp	r4, #0
   19f50:	moveq	r6, r8
   19f54:	addeq	r8, r0, r8
   19f58:	beq	19f14 <__assert_fail@plt+0x81a0>
   19f5c:	ldr	r3, [r5, #3308]	; 0xcec
   19f60:	add	r6, r8, #2
   19f64:	add	r2, r0, r6
   19f68:	cmp	r3, #0
   19f6c:	beq	19f88 <__assert_fail@plt+0x8214>
   19f70:	cmp	r3, r2
   19f74:	bls	19fe0 <__assert_fail@plt+0x826c>
   19f78:	mvn	r3, #2
   19f7c:	sub	r3, r3, r0
   19f80:	cmp	r3, r8
   19f84:	bcc	19fe0 <__assert_fail@plt+0x826c>
   19f88:	mov	r8, r2
   19f8c:	mov	r2, #32
   19f90:	mov	r3, r2
   19f94:	ldr	r0, [r9]
   19f98:	ldr	r1, [r0, #20]
   19f9c:	ldr	ip, [r0, #24]
   19fa0:	cmp	r1, ip
   19fa4:	addcc	ip, r1, #1
   19fa8:	strcc	ip, [r0, #20]
   19fac:	strbcc	sl, [r1]
   19fb0:	bcs	1a044 <__assert_fail@plt+0x82d0>
   19fb4:	ldr	r0, [r9]
   19fb8:	ldr	r1, [r0, #20]
   19fbc:	ldr	ip, [r0, #24]
   19fc0:	cmp	r1, ip
   19fc4:	addcc	r2, r1, #1
   19fc8:	strcc	r2, [r0, #20]
   19fcc:	strbcc	r3, [r1]
   19fd0:	bcc	19f14 <__assert_fail@plt+0x81a0>
   19fd4:	mov	r1, r2
   19fd8:	bl	11c48 <__overflow@plt>
   19fdc:	b	19f14 <__assert_fail@plt+0x81a0>
   19fe0:	ldrb	r3, [fp, #210]	; 0xd2
   19fe4:	mov	r8, r0
   19fe8:	mov	r6, #0
   19fec:	mov	r2, r3
   19ff0:	b	19f94 <__assert_fail@plt+0x8220>
   19ff4:	movw	fp, #4560	; 0x11d0
   19ff8:	movt	fp, #4
   19ffc:	movw	r9, #4900	; 0x1324
   1a000:	movt	r9, #4
   1a004:	ldr	r0, [r9]
   1a008:	ldrb	r1, [fp, #210]	; 0xd2
   1a00c:	ldr	r3, [r0, #20]
   1a010:	ldr	r2, [r0, #24]
   1a014:	cmp	r3, r2
   1a018:	bcs	1a060 <__assert_fail@plt+0x82ec>
   1a01c:	add	r2, r3, #1
   1a020:	str	r2, [r0, #20]
   1a024:	strb	r1, [r3]
   1a028:	add	sp, sp, #12
   1a02c:	ldrd	r4, [sp]
   1a030:	ldrd	r6, [sp, #8]
   1a034:	ldrd	r8, [sp, #16]
   1a038:	ldrd	sl, [sp, #24]
   1a03c:	add	sp, sp, #32
   1a040:	pop	{pc}		; (ldr pc, [sp], #4)
   1a044:	mov	r1, sl
   1a048:	str	r3, [sp]
   1a04c:	str	r2, [sp, #4]
   1a050:	bl	11c48 <__overflow@plt>
   1a054:	ldr	r3, [sp]
   1a058:	ldr	r2, [sp, #4]
   1a05c:	b	19fb4 <__assert_fail@plt+0x8240>
   1a060:	add	sp, sp, #12
   1a064:	ldrd	r4, [sp]
   1a068:	ldrd	r6, [sp, #8]
   1a06c:	ldrd	r8, [sp, #16]
   1a070:	ldrd	sl, [sp, #24]
   1a074:	ldr	lr, [sp, #32]
   1a078:	add	sp, sp, #36	; 0x24
   1a07c:	b	11c48 <__overflow@plt>
   1a080:	ldrb	r2, [r0, #132]	; 0x84
   1a084:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a088:	strd	r6, [sp, #8]
   1a08c:	mov	r6, r0
   1a090:	strd	r8, [sp, #16]
   1a094:	strd	sl, [sp, #24]
   1a098:	cmp	r2, #0
   1a09c:	str	lr, [sp, #32]
   1a0a0:	sub	sp, sp, #4736	; 0x1280
   1a0a4:	sub	sp, sp, #60	; 0x3c
   1a0a8:	beq	1a118 <__assert_fail@plt+0x83a4>
   1a0ac:	add	r9, sp, #56	; 0x38
   1a0b0:	add	r0, r0, #16
   1a0b4:	sub	r1, r9, #12
   1a0b8:	bl	1e594 <__assert_fail@plt+0xc820>
   1a0bc:	movw	r5, #4912	; 0x1330
   1a0c0:	movt	r5, #4
   1a0c4:	ldrb	r3, [r5, #3312]	; 0xcf0
   1a0c8:	cmp	r3, #0
   1a0cc:	beq	1a110 <__assert_fail@plt+0x839c>
   1a0d0:	ldr	r3, [r6, #136]	; 0x88
   1a0d4:	cmp	r3, #1
   1a0d8:	moveq	r3, #46	; 0x2e
   1a0dc:	strbeq	r3, [sp, #54]	; 0x36
   1a0e0:	beq	1a0ec <__assert_fail@plt+0x8378>
   1a0e4:	cmp	r3, #2
   1a0e8:	beq	1a10c <__assert_fail@plt+0x8398>
   1a0ec:	ldr	r3, [r5, #3084]	; 0xc0c
   1a0f0:	cmp	r3, #3
   1a0f4:	ldrls	pc, [pc, r3, lsl #2]
   1a0f8:	b	1abc8 <__assert_fail@plt+0x8e54>
   1a0fc:	strdeq	sl, [r1], -ip
   1a100:	andeq	sl, r1, r8, lsl r4
   1a104:	andeq	sl, r1, r0, ror #7
   1a108:	andeq	sl, r1, r0, asr r1
   1a10c:	mov	r3, #43	; 0x2b
   1a110:	strb	r3, [sp, #54]	; 0x36
   1a114:	b	1a0ec <__assert_fail@plt+0x8378>
   1a118:	ldr	ip, [r0, #120]	; 0x78
   1a11c:	movw	r3, #49168	; 0xc010
   1a120:	movt	r3, #2
   1a124:	add	r9, sp, #56	; 0x38
   1a128:	movw	r1, #16191	; 0x3f3f
   1a12c:	movt	r1, #16191	; 0x3f3f
   1a130:	add	r3, r3, ip
   1a134:	ldrb	r3, [r3, #404]	; 0x194
   1a138:	strb	r3, [sp, #44]	; 0x2c
   1a13c:	str	r1, [r9, #-11]
   1a140:	str	r1, [r9, #-7]
   1a144:	strh	r1, [r9, #-3]
   1a148:	strb	r2, [sp, #55]	; 0x37
   1a14c:	b	1a0bc <__assert_fail@plt+0x8348>
   1a150:	ldr	sl, [r6, #96]	; 0x60
   1a154:	ldrd	r2, [r6, #96]	; 0x60
   1a158:	ldr	r1, [r6, #100]	; 0x64
   1a15c:	strd	r2, [r9, #-24]	; 0xffffffe8
   1a160:	and	sl, sl, r1
   1a164:	adds	r1, sl, #1
   1a168:	movne	r1, #1
   1a16c:	str	r1, [sp, #16]
   1a170:	ldrb	r2, [r5, #3077]	; 0xc05
   1a174:	ldrb	r3, [r6, #132]	; 0x84
   1a178:	cmp	r2, #0
   1a17c:	addeq	r8, sp, #1136	; 0x470
   1a180:	addeq	r8, r8, #12
   1a184:	moveq	r4, r8
   1a188:	bne	1a440 <__assert_fail@plt+0x86cc>
   1a18c:	ldrb	r2, [r5, #3078]	; 0xc06
   1a190:	cmp	r2, #0
   1a194:	beq	1a1fc <__assert_fail@plt+0x8488>
   1a198:	cmp	r3, #0
   1a19c:	movweq	r7, #55284	; 0xd7f4
   1a1a0:	movteq	r7, #2
   1a1a4:	bne	1a894 <__assert_fail@plt+0x8b20>
   1a1a8:	ldr	fp, [r5, #3272]	; 0xcc8
   1a1ac:	mov	r1, #0
   1a1b0:	mov	r0, r7
   1a1b4:	bl	22878 <__assert_fail@plt+0x10b04>
   1a1b8:	sub	r2, fp, r0
   1a1bc:	cmp	r2, #0
   1a1c0:	ble	1a1d4 <__assert_fail@plt+0x8460>
   1a1c4:	mov	r0, r4
   1a1c8:	mov	r1, #32
   1a1cc:	add	r4, r4, r2
   1a1d0:	bl	11be8 <memset@plt>
   1a1d4:	ldr	sl, [sp, #16]
   1a1d8:	sub	r7, r7, #1
   1a1dc:	ldrb	r3, [r7, #1]!
   1a1e0:	cmp	r3, #0
   1a1e4:	strb	r3, [r4], #1
   1a1e8:	bne	1a1dc <__assert_fail@plt+0x8468>
   1a1ec:	mov	r2, #32
   1a1f0:	ldrb	r3, [r6, #132]	; 0x84
   1a1f4:	str	sl, [sp, #16]
   1a1f8:	strb	r2, [r4, #-1]
   1a1fc:	cmp	r3, #0
   1a200:	ldr	r7, [r5, #3316]	; 0xcf4
   1a204:	movweq	ip, #55284	; 0xd7f4
   1a208:	movteq	ip, #2
   1a20c:	bne	1a510 <__assert_fail@plt+0x879c>
   1a210:	sub	r1, r9, #12
   1a214:	mov	r0, r4
   1a218:	movw	r3, #55296	; 0xd800
   1a21c:	movt	r3, #2
   1a220:	mvn	r2, #0
   1a224:	stm	sp, {r1, r7, ip}
   1a228:	mov	r1, #1
   1a22c:	bl	11bc4 <__sprintf_chk@plt>
   1a230:	ldrb	r3, [r5, #4016]	; 0xfb0
   1a234:	add	r4, r4, r0
   1a238:	cmp	r3, #0
   1a23c:	bne	1a4a4 <__assert_fail@plt+0x8730>
   1a240:	movw	r7, #4560	; 0x11d0
   1a244:	movt	r7, #4
   1a248:	ldrb	r3, [r7, #204]	; 0xcc
   1a24c:	cmp	r3, #0
   1a250:	bne	1a26c <__assert_fail@plt+0x84f8>
   1a254:	ldrb	r3, [r7, #205]	; 0xcd
   1a258:	cmp	r3, #0
   1a25c:	bne	1a26c <__assert_fail@plt+0x84f8>
   1a260:	ldrb	r3, [r5, #3088]	; 0xc10
   1a264:	cmp	r3, #0
   1a268:	beq	1a790 <__assert_fail@plt+0x8a1c>
   1a26c:	sub	r1, r4, r8
   1a270:	mov	r0, r8
   1a274:	bl	14c78 <__assert_fail@plt+0x2f04>
   1a278:	ldrb	r3, [r7, #204]	; 0xcc
   1a27c:	cmp	r3, #0
   1a280:	bne	1a5a0 <__assert_fail@plt+0x882c>
   1a284:	ldrb	r3, [r7, #205]	; 0xcd
   1a288:	cmp	r3, #0
   1a28c:	bne	1a574 <__assert_fail@plt+0x8800>
   1a290:	ldrb	r3, [r5, #3088]	; 0xc10
   1a294:	cmp	r3, #0
   1a298:	bne	1a548 <__assert_fail@plt+0x87d4>
   1a29c:	ldrb	r3, [r5, #3276]	; 0xccc
   1a2a0:	cmp	r3, #0
   1a2a4:	moveq	r4, r8
   1a2a8:	bne	1a528 <__assert_fail@plt+0x87b4>
   1a2ac:	ldrb	r3, [r6, #132]	; 0x84
   1a2b0:	cmp	r3, #0
   1a2b4:	beq	1a434 <__assert_fail@plt+0x86c0>
   1a2b8:	ldr	r3, [r6, #32]
   1a2bc:	and	r3, r3, #45056	; 0xb000
   1a2c0:	cmp	r3, #8192	; 0x2000
   1a2c4:	beq	1a9d0 <__assert_fail@plt+0x8c5c>
   1a2c8:	mov	r0, #1
   1a2cc:	mov	r1, #0
   1a2d0:	ldr	r3, [r5, #4028]	; 0xfbc
   1a2d4:	add	r2, sp, #144	; 0x90
   1a2d8:	strd	r0, [sp]
   1a2dc:	ldrd	r0, [r7, #216]	; 0xd8
   1a2e0:	strd	r0, [sp, #8]
   1a2e4:	ldrd	r0, [r6, #64]	; 0x40
   1a2e8:	bl	20780 <__assert_fail@plt+0xea0c>
   1a2ec:	mov	fp, r0
   1a2f0:	ldr	r2, [r5, #3340]	; 0xd0c
   1a2f4:	mov	r1, #0
   1a2f8:	mov	r0, fp
   1a2fc:	str	r2, [sp, #20]
   1a300:	bl	22878 <__assert_fail@plt+0x10b04>
   1a304:	ldr	r2, [sp, #20]
   1a308:	sub	r2, r2, r0
   1a30c:	cmp	r2, #0
   1a310:	ble	1a324 <__assert_fail@plt+0x85b0>
   1a314:	mov	r0, r4
   1a318:	mov	r1, #32
   1a31c:	add	r4, r4, r2
   1a320:	bl	11be8 <memset@plt>
   1a324:	ldr	sl, [sp, #16]
   1a328:	sub	fp, fp, #1
   1a32c:	ldrb	r3, [fp, #1]!
   1a330:	cmp	r3, #0
   1a334:	strb	r3, [r4], #1
   1a338:	bne	1a32c <__assert_fail@plt+0x85b8>
   1a33c:	mov	r3, #32
   1a340:	str	sl, [sp, #16]
   1a344:	strb	r3, [r4, #-1]
   1a348:	mov	r2, #1
   1a34c:	ldrb	r3, [r6, #132]	; 0x84
   1a350:	strb	r2, [r4]
   1a354:	ldr	r2, [sp, #16]
   1a358:	tst	r2, r3
   1a35c:	bne	1a8c4 <__assert_fail@plt+0x8b50>
   1a360:	ldr	fp, [r7, #224]	; 0xe0
   1a364:	cmp	fp, #0
   1a368:	bge	1a5cc <__assert_fail@plt+0x8858>
   1a36c:	mov	r3, #0
   1a370:	sub	r1, r9, #28
   1a374:	ldr	r0, [r5, #4032]	; 0xfc0
   1a378:	add	r2, sp, #100	; 0x64
   1a37c:	str	r3, [sp, #28]
   1a380:	bl	293bc <_obstack_memory_used@@Base+0x4304>
   1a384:	cmp	r0, #0
   1a388:	beq	1a80c <__assert_fail@plt+0x8a98>
   1a38c:	ldrb	r2, [r5, #3076]	; 0xc04
   1a390:	mov	r9, #0
   1a394:	add	r0, sp, #144	; 0x90
   1a398:	ldr	r3, [r5, #4032]	; 0xfc0
   1a39c:	cmp	r2, #0
   1a3a0:	ldrne	r1, [sp, #116]	; 0x74
   1a3a4:	ldrne	r2, [pc, #2080]	; 1abcc <__assert_fail@plt+0x8e58>
   1a3a8:	ldreq	r2, [r7, #196]	; 0xc4
   1a3ac:	stm	sp, {r3, r9}
   1a3b0:	add	r3, sp, #100	; 0x64
   1a3b4:	addne	r2, r2, r1, lsl #7
   1a3b8:	movw	r1, #1001	; 0x3e9
   1a3bc:	bl	24c04 <__assert_fail@plt+0x12e90>
   1a3c0:	subs	r1, r0, #0
   1a3c4:	beq	1a80c <__assert_fail@plt+0x8a98>
   1a3c8:	mov	r2, r9
   1a3cc:	add	r0, sp, #144	; 0x90
   1a3d0:	bl	2260c <__assert_fail@plt+0x10898>
   1a3d4:	mov	fp, r0
   1a3d8:	str	r0, [r7, #224]	; 0xe0
   1a3dc:	b	1a810 <__assert_fail@plt+0x8a9c>
   1a3e0:	mov	r3, #1
   1a3e4:	ldr	r2, [r6, #92]	; 0x5c
   1a3e8:	str	r3, [sp, #16]
   1a3ec:	ldr	r3, [r6, #88]	; 0x58
   1a3f0:	str	r3, [sp, #32]
   1a3f4:	str	r2, [sp, #36]	; 0x24
   1a3f8:	b	1a170 <__assert_fail@plt+0x83fc>
   1a3fc:	mov	r3, #1
   1a400:	ldr	r2, [r6, #100]	; 0x64
   1a404:	str	r3, [sp, #16]
   1a408:	ldr	r3, [r6, #96]	; 0x60
   1a40c:	str	r3, [sp, #32]
   1a410:	str	r2, [sp, #36]	; 0x24
   1a414:	b	1a170 <__assert_fail@plt+0x83fc>
   1a418:	mov	r3, #1
   1a41c:	ldr	r2, [r6, #108]	; 0x6c
   1a420:	str	r3, [sp, #16]
   1a424:	ldr	r3, [r6, #104]	; 0x68
   1a428:	str	r3, [sp, #32]
   1a42c:	str	r2, [sp, #36]	; 0x24
   1a430:	b	1a170 <__assert_fail@plt+0x83fc>
   1a434:	movw	fp, #55284	; 0xd7f4
   1a438:	movt	fp, #2
   1a43c:	b	1a2f0 <__assert_fail@plt+0x857c>
   1a440:	cmp	r3, #0
   1a444:	ldr	r4, [r5, #3256]	; 0xcb8
   1a448:	beq	1a468 <__assert_fail@plt+0x86f4>
   1a44c:	ldrd	r0, [r6, #112]	; 0x70
   1a450:	orrs	r3, r0, r1
   1a454:	beq	1a468 <__assert_fail@plt+0x86f4>
   1a458:	add	r2, sp, #144	; 0x90
   1a45c:	bl	21cf4 <__assert_fail@plt+0xff80>
   1a460:	mov	r1, r0
   1a464:	b	1a470 <__assert_fail@plt+0x86fc>
   1a468:	movw	r1, #55284	; 0xd7f4
   1a46c:	movt	r1, #2
   1a470:	add	r8, sp, #1136	; 0x470
   1a474:	movw	r3, #55288	; 0xd7f8
   1a478:	movt	r3, #2
   1a47c:	add	r8, r8, #12
   1a480:	str	r4, [sp]
   1a484:	mov	r0, r8
   1a488:	movw	r2, #3643	; 0xe3b
   1a48c:	str	r1, [sp, #4]
   1a490:	mov	r1, #1
   1a494:	bl	11bc4 <__sprintf_chk@plt>
   1a498:	add	r4, r8, r0
   1a49c:	ldrb	r3, [r6, #132]	; 0x84
   1a4a0:	b	1a18c <__assert_fail@plt+0x8418>
   1a4a4:	ldr	r2, [pc, #1828]	; 1abd0 <__assert_fail@plt+0x8e5c>
   1a4a8:	movw	r3, #4900	; 0x1324
   1a4ac:	movt	r3, #4
   1a4b0:	ldr	r7, [r3]
   1a4b4:	ldr	r3, [r2, #-8]
   1a4b8:	ldr	r1, [r2, #-4]
   1a4bc:	ldr	r0, [r7, #20]
   1a4c0:	adds	r3, r3, #2
   1a4c4:	ldr	ip, [r7, #24]
   1a4c8:	adc	r1, r1, #0
   1a4cc:	str	r3, [r2, #-8]
   1a4d0:	str	r1, [r2, #-4]
   1a4d4:	cmp	r0, ip
   1a4d8:	bcs	1aaac <__assert_fail@plt+0x8d38>
   1a4dc:	add	r2, r0, #1
   1a4e0:	mov	r3, #32
   1a4e4:	str	r2, [r7, #20]
   1a4e8:	strb	r3, [r0]
   1a4ec:	ldr	r3, [r7, #20]
   1a4f0:	ldr	r2, [r7, #24]
   1a4f4:	cmp	r3, r2
   1a4f8:	bcs	1aac4 <__assert_fail@plt+0x8d50>
   1a4fc:	add	r1, r3, #1
   1a500:	mov	r2, #32
   1a504:	str	r1, [r7, #20]
   1a508:	strb	r2, [r3]
   1a50c:	b	1a240 <__assert_fail@plt+0x84cc>
   1a510:	add	r2, sp, #144	; 0x90
   1a514:	mov	r1, #0
   1a518:	ldr	r0, [r6, #36]	; 0x24
   1a51c:	bl	21cf4 <__assert_fail@plt+0xff80>
   1a520:	mov	ip, r0
   1a524:	b	1a210 <__assert_fail@plt+0x849c>
   1a528:	ldr	r1, [r5, #3280]	; 0xcd0
   1a52c:	mov	r2, #0
   1a530:	mov	r3, #0
   1a534:	mov	r4, r8
   1a538:	ldr	r0, [r6, #128]	; 0x80
   1a53c:	str	r1, [sp]
   1a540:	bl	16cd4 <__assert_fail@plt+0x4f60>
   1a544:	b	1a2ac <__assert_fail@plt+0x8538>
   1a548:	ldrb	r3, [r6, #132]	; 0x84
   1a54c:	ldr	r2, [r6, #40]	; 0x28
   1a550:	ldr	r4, [r5, #3328]	; 0xd00
   1a554:	cmp	r3, #0
   1a558:	movweq	r0, #55284	; 0xd7f4
   1a55c:	movteq	r0, #2
   1a560:	bne	1a7e8 <__assert_fail@plt+0x8a74>
   1a564:	mov	r3, #0
   1a568:	str	r4, [sp]
   1a56c:	bl	16cd4 <__assert_fail@plt+0x4f60>
   1a570:	b	1a29c <__assert_fail@plt+0x8528>
   1a574:	ldrb	r3, [r6, #132]	; 0x84
   1a578:	ldr	r2, [r6, #44]	; 0x2c
   1a57c:	ldr	r4, [r5, #3324]	; 0xcfc
   1a580:	cmp	r3, #0
   1a584:	movweq	r0, #55284	; 0xd7f4
   1a588:	movteq	r0, #2
   1a58c:	bne	1a7c4 <__assert_fail@plt+0x8a50>
   1a590:	mov	r3, #0
   1a594:	str	r4, [sp]
   1a598:	bl	16cd4 <__assert_fail@plt+0x4f60>
   1a59c:	b	1a290 <__assert_fail@plt+0x851c>
   1a5a0:	ldrb	r3, [r6, #132]	; 0x84
   1a5a4:	ldr	r2, [r6, #40]	; 0x28
   1a5a8:	ldr	r4, [r5, #3320]	; 0xcf8
   1a5ac:	cmp	r3, #0
   1a5b0:	movweq	r0, #55284	; 0xd7f4
   1a5b4:	movteq	r0, #2
   1a5b8:	bne	1a7a0 <__assert_fail@plt+0x8a2c>
   1a5bc:	mov	r3, #0
   1a5c0:	str	r4, [sp]
   1a5c4:	bl	16cd4 <__assert_fail@plt+0x4f60>
   1a5c8:	b	1a284 <__assert_fail@plt+0x8510>
   1a5cc:	movw	r0, #55284	; 0xd7f4
   1a5d0:	movt	r0, #2
   1a5d4:	movw	r3, #55288	; 0xd7f8
   1a5d8:	movt	r3, #2
   1a5dc:	str	fp, [sp]
   1a5e0:	mvn	r2, #0
   1a5e4:	mov	r1, #1
   1a5e8:	str	r0, [sp, #4]
   1a5ec:	mov	r0, r4
   1a5f0:	bl	11bc4 <__sprintf_chk@plt>
   1a5f4:	add	r4, r4, r0
   1a5f8:	sub	r4, r4, r8
   1a5fc:	mov	r0, r8
   1a600:	mov	r1, r4
   1a604:	bl	14c78 <__assert_fail@plt+0x2f04>
   1a608:	ldr	r2, [pc, #1476]	; 1abd4 <__assert_fail@plt+0x8e60>
   1a60c:	mov	r3, r4
   1a610:	mov	r1, #0
   1a614:	mov	r0, r6
   1a618:	bl	195b8 <__assert_fail@plt+0x7844>
   1a61c:	ldr	r2, [r6, #120]	; 0x78
   1a620:	mov	r8, r0
   1a624:	cmp	r2, #6
   1a628:	beq	1a658 <__assert_fail@plt+0x88e4>
   1a62c:	ldr	r3, [r5, #3104]	; 0xc20
   1a630:	cmp	r3, #0
   1a634:	bne	1a83c <__assert_fail@plt+0x8ac8>
   1a638:	add	sp, sp, #4736	; 0x1280
   1a63c:	add	sp, sp, #60	; 0x3c
   1a640:	ldrd	r4, [sp]
   1a644:	ldrd	r6, [sp, #8]
   1a648:	ldrd	r8, [sp, #16]
   1a64c:	ldrd	sl, [sp, #24]
   1a650:	add	sp, sp, #32
   1a654:	pop	{pc}		; (ldr pc, [sp], #4)
   1a658:	ldr	r3, [r6, #4]
   1a65c:	cmp	r3, #0
   1a660:	beq	1a638 <__assert_fail@plt+0x88c4>
   1a664:	ldr	r9, [pc, #1380]	; 1abd0 <__assert_fail@plt+0x8e5c>
   1a668:	movw	sl, #4900	; 0x1324
   1a66c:	movt	sl, #4
   1a670:	ldr	r7, [sl]
   1a674:	ldr	r3, [r9, #-8]
   1a678:	ldr	r2, [r9, #-4]
   1a67c:	ldr	r1, [r7, #20]
   1a680:	adds	r3, r3, #4
   1a684:	ldr	r0, [r7, #24]
   1a688:	adc	r2, r2, #0
   1a68c:	str	r3, [r9, #-8]
   1a690:	str	r2, [r9, #-4]
   1a694:	cmp	r1, r0
   1a698:	bcs	1ab08 <__assert_fail@plt+0x8d94>
   1a69c:	add	r2, r1, #1
   1a6a0:	mov	r3, #32
   1a6a4:	str	r2, [r7, #20]
   1a6a8:	strb	r3, [r1]
   1a6ac:	ldr	r3, [r7, #20]
   1a6b0:	ldr	r2, [r7, #24]
   1a6b4:	cmp	r2, r3
   1a6b8:	bls	1ab20 <__assert_fail@plt+0x8dac>
   1a6bc:	add	r1, r3, #1
   1a6c0:	mov	r2, #45	; 0x2d
   1a6c4:	str	r1, [r7, #20]
   1a6c8:	strb	r2, [r3]
   1a6cc:	ldr	r3, [r7, #20]
   1a6d0:	ldr	r2, [r7, #24]
   1a6d4:	cmp	r2, r3
   1a6d8:	bls	1ab38 <__assert_fail@plt+0x8dc4>
   1a6dc:	add	r1, r3, #1
   1a6e0:	mov	r2, #62	; 0x3e
   1a6e4:	str	r1, [r7, #20]
   1a6e8:	strb	r2, [r3]
   1a6ec:	ldr	r3, [r7, #20]
   1a6f0:	ldr	r2, [r7, #24]
   1a6f4:	cmp	r3, r2
   1a6f8:	addcc	r1, r3, #1
   1a6fc:	movcc	r2, #32
   1a700:	strcc	r1, [r7, #20]
   1a704:	strbcc	r2, [r3]
   1a708:	bcs	1ab50 <__assert_fail@plt+0x8ddc>
   1a70c:	add	r3, r8, #4
   1a710:	mov	r2, #0
   1a714:	add	r3, r3, r4
   1a718:	mov	r1, #1
   1a71c:	mov	r0, r6
   1a720:	bl	195b8 <__assert_fail@plt+0x7844>
   1a724:	ldr	r3, [r5, #3104]	; 0xc20
   1a728:	cmp	r3, #0
   1a72c:	beq	1a638 <__assert_fail@plt+0x88c4>
   1a730:	ldr	r1, [r6, #124]	; 0x7c
   1a734:	and	r2, r1, #61440	; 0xf000
   1a738:	cmp	r2, #32768	; 0x8000
   1a73c:	bne	1ab60 <__assert_fail@plt+0x8dec>
   1a740:	cmp	r3, #3
   1a744:	bne	1a638 <__assert_fail@plt+0x88c4>
   1a748:	tst	r1, #73	; 0x49
   1a74c:	beq	1a638 <__assert_fail@plt+0x88c4>
   1a750:	mov	r1, #42	; 0x2a
   1a754:	mov	r3, r1
   1a758:	ldr	r0, [sl]
   1a75c:	ldmdb	r9, {r2, lr}
   1a760:	ldr	ip, [r0, #20]
   1a764:	ldr	r4, [r0, #24]
   1a768:	adds	r2, r2, #1
   1a76c:	adc	lr, lr, #0
   1a770:	stmdb	r9, {r2, lr}
   1a774:	cmp	ip, r4
   1a778:	addcc	r2, ip, #1
   1a77c:	strcc	r2, [r0, #20]
   1a780:	strbcc	r3, [ip]
   1a784:	bcc	1a638 <__assert_fail@plt+0x88c4>
   1a788:	bl	11c48 <__overflow@plt>
   1a78c:	b	1a638 <__assert_fail@plt+0x88c4>
   1a790:	ldrb	r3, [r5, #3276]	; 0xccc
   1a794:	cmp	r3, #0
   1a798:	beq	1a2ac <__assert_fail@plt+0x8538>
   1a79c:	b	1a26c <__assert_fail@plt+0x84f8>
   1a7a0:	ldrb	r3, [r5, #4024]	; 0xfb8
   1a7a4:	cmp	r3, #0
   1a7a8:	movne	r0, #0
   1a7ac:	bne	1a5bc <__assert_fail@plt+0x8848>
   1a7b0:	mov	r0, r2
   1a7b4:	str	r2, [sp, #20]
   1a7b8:	bl	21860 <__assert_fail@plt+0xfaec>
   1a7bc:	ldr	r2, [sp, #20]
   1a7c0:	b	1a5bc <__assert_fail@plt+0x8848>
   1a7c4:	ldrb	r3, [r5, #4024]	; 0xfb8
   1a7c8:	cmp	r3, #0
   1a7cc:	movne	r0, #0
   1a7d0:	bne	1a590 <__assert_fail@plt+0x881c>
   1a7d4:	mov	r0, r2
   1a7d8:	str	r2, [sp, #20]
   1a7dc:	bl	21a3c <__assert_fail@plt+0xfcc8>
   1a7e0:	ldr	r2, [sp, #20]
   1a7e4:	b	1a590 <__assert_fail@plt+0x881c>
   1a7e8:	ldrb	r3, [r5, #4024]	; 0xfb8
   1a7ec:	cmp	r3, #0
   1a7f0:	movne	r0, #0
   1a7f4:	bne	1a564 <__assert_fail@plt+0x87f0>
   1a7f8:	mov	r0, r2
   1a7fc:	str	r2, [sp, #20]
   1a800:	bl	21860 <__assert_fail@plt+0xfaec>
   1a804:	ldr	r2, [sp, #20]
   1a808:	b	1a564 <__assert_fail@plt+0x87f0>
   1a80c:	ldr	fp, [r7, #224]	; 0xe0
   1a810:	cmp	fp, #0
   1a814:	blt	1aa9c <__assert_fail@plt+0x8d28>
   1a818:	ldrb	r3, [r6, #132]	; 0x84
   1a81c:	ldr	r2, [sp, #16]
   1a820:	tst	r2, r3
   1a824:	beq	1a5cc <__assert_fail@plt+0x8858>
   1a828:	ldr	r0, [sp, #32]
   1a82c:	add	r2, sp, #144	; 0x90
   1a830:	asr	r1, r0, #31
   1a834:	bl	21c14 <__assert_fail@plt+0xfea0>
   1a838:	b	1a5d4 <__assert_fail@plt+0x8860>
   1a83c:	ldrb	r0, [r6, #132]	; 0x84
   1a840:	ldr	r1, [r6, #32]
   1a844:	bl	14b80 <__assert_fail@plt+0x2e0c>
   1a848:	subs	r1, r0, #0
   1a84c:	beq	1a638 <__assert_fail@plt+0x88c4>
   1a850:	ldr	r2, [pc, #888]	; 1abd0 <__assert_fail@plt+0x8e5c>
   1a854:	movw	r3, #4900	; 0x1324
   1a858:	movt	r3, #4
   1a85c:	ldr	r0, [r3]
   1a860:	ldr	r3, [r2, #-8]
   1a864:	ldr	lr, [r2, #-4]
   1a868:	ldr	ip, [r0, #20]
   1a86c:	adds	r3, r3, #1
   1a870:	ldr	r4, [r0, #24]
   1a874:	adc	lr, lr, #0
   1a878:	stmdb	r2, {r3, lr}
   1a87c:	cmp	ip, r4
   1a880:	addcc	r3, ip, #1
   1a884:	strcc	r3, [r0, #20]
   1a888:	strbcc	r1, [ip]
   1a88c:	bcc	1a638 <__assert_fail@plt+0x88c4>
   1a890:	b	1a788 <__assert_fail@plt+0x8a14>
   1a894:	ldr	r3, [pc, #828]	; 1abd8 <__assert_fail@plt+0x8e64>
   1a898:	mov	r0, #512	; 0x200
   1a89c:	mov	r1, #0
   1a8a0:	add	r2, sp, #144	; 0x90
   1a8a4:	strd	r0, [sp]
   1a8a8:	ldrd	r0, [r6, #80]	; 0x50
   1a8ac:	ldrd	sl, [r3]
   1a8b0:	ldr	r3, [r5, #3260]	; 0xcbc
   1a8b4:	strd	sl, [sp, #8]
   1a8b8:	bl	20780 <__assert_fail@plt+0xea0c>
   1a8bc:	mov	r7, r0
   1a8c0:	b	1a1a8 <__assert_fail@plt+0x8434>
   1a8c4:	mov	r2, r9
   1a8c8:	sub	r1, r9, #24
   1a8cc:	ldr	r0, [r5, #4032]	; 0xfc0
   1a8d0:	bl	293bc <_obstack_memory_used@@Base+0x4304>
   1a8d4:	cmp	r0, #0
   1a8d8:	beq	1a9b8 <__assert_fail@plt+0x8c44>
   1a8dc:	ldr	r2, [sp, #32]
   1a8e0:	ldr	r0, [sp, #36]	; 0x24
   1a8e4:	ldr	r3, [r5, #4040]	; 0xfc8
   1a8e8:	ldr	ip, [r5, #4036]	; 0xfc4
   1a8ec:	cmp	r3, r0
   1a8f0:	movgt	lr, #1
   1a8f4:	movle	lr, #0
   1a8f8:	movlt	r3, #1
   1a8fc:	movge	r3, #0
   1a900:	cmp	ip, r2
   1a904:	sub	fp, lr, r3
   1a908:	movge	r1, #0
   1a90c:	movlt	r1, #1
   1a910:	cmp	ip, r2
   1a914:	rsble	r1, r1, #0
   1a918:	rsbgt	r1, r1, #1
   1a91c:	adds	r1, fp, r1, lsl #1
   1a920:	bmi	1aad4 <__assert_fail@plt+0x8d60>
   1a924:	movw	r1, #15700	; 0x3d54
   1a928:	movt	r1, #65295	; 0xff0f
   1a92c:	add	r1, ip, r1
   1a930:	cmp	r1, r2
   1a934:	movge	sl, #0
   1a938:	movlt	sl, #1
   1a93c:	cmp	r1, r2
   1a940:	rsble	sl, sl, #0
   1a944:	rsbgt	sl, sl, #1
   1a948:	mov	r1, sl
   1a94c:	adds	r1, fp, r1, lsl #1
   1a950:	movpl	r3, #0
   1a954:	bpl	1a97c <__assert_fail@plt+0x8c08>
   1a958:	cmp	ip, r2
   1a95c:	sub	r3, r3, lr
   1a960:	movle	r1, #0
   1a964:	movgt	r1, #1
   1a968:	cmp	ip, r2
   1a96c:	rsbge	r2, r1, #0
   1a970:	rsblt	r2, r1, #1
   1a974:	add	r3, r3, r2, lsl #1
   1a978:	lsr	r3, r3, #31
   1a97c:	ldrb	r2, [r5, #3076]	; 0xc04
   1a980:	ldr	r1, [r5, #4032]	; 0xfc0
   1a984:	cmp	r2, #0
   1a988:	bne	1aa80 <__assert_fail@plt+0x8d0c>
   1a98c:	add	r3, r7, r3, lsl #2
   1a990:	ldr	r2, [r3, #196]	; 0xc4
   1a994:	mov	r3, r9
   1a998:	str	r1, [sp]
   1a99c:	movw	r1, #1001	; 0x3e9
   1a9a0:	str	r0, [sp, #4]
   1a9a4:	mov	r0, r4
   1a9a8:	bl	24c04 <__assert_fail@plt+0x12e90>
   1a9ac:	cmp	r0, #0
   1a9b0:	addne	r4, r4, r0
   1a9b4:	bne	1a9c4 <__assert_fail@plt+0x8c50>
   1a9b8:	ldrb	r3, [r4]
   1a9bc:	cmp	r3, #0
   1a9c0:	bne	1abb8 <__assert_fail@plt+0x8e44>
   1a9c4:	mov	r3, #32
   1a9c8:	strb	r3, [r4], #1
   1a9cc:	b	1a5f8 <__assert_fail@plt+0x8884>
   1a9d0:	ldr	r0, [r6, #48]	; 0x30
   1a9d4:	mov	r1, #0
   1a9d8:	add	r2, sp, #100	; 0x64
   1a9dc:	ldr	r3, [r6, #52]	; 0x34
   1a9e0:	ldr	lr, [r5, #3332]	; 0xd04
   1a9e4:	ubfx	r0, r0, #8, #12
   1a9e8:	ldr	fp, [r5, #3336]	; 0xd08
   1a9ec:	bic	r3, r3, #4080	; 0xff0
   1a9f0:	bic	r3, r3, #15
   1a9f4:	orr	r0, r3, r0
   1a9f8:	ldr	r3, [r5, #3340]	; 0xd0c
   1a9fc:	add	ip, lr, #2
   1aa00:	add	ip, ip, fp
   1aa04:	sub	ip, r3, ip
   1aa08:	cmp	ip, r1
   1aa0c:	addge	lr, lr, ip
   1aa10:	addlt	lr, lr, r1
   1aa14:	mov	sl, lr
   1aa18:	bl	21cf4 <__assert_fail@plt+0xff80>
   1aa1c:	mov	fp, r0
   1aa20:	ldr	r0, [r6, #48]	; 0x30
   1aa24:	add	r2, sp, #144	; 0x90
   1aa28:	mov	r1, #0
   1aa2c:	ldr	ip, [r6, #52]	; 0x34
   1aa30:	ldr	lr, [r5, #3336]	; 0xd08
   1aa34:	lsr	r3, r0, #12
   1aa38:	uxtb	r0, r0
   1aa3c:	orr	r3, r3, ip, lsl #20
   1aa40:	bic	r3, r3, #255	; 0xff
   1aa44:	str	lr, [sp, #20]
   1aa48:	orr	r0, r3, r0
   1aa4c:	bl	21cf4 <__assert_fail@plt+0xff80>
   1aa50:	ldr	lr, [sp, #20]
   1aa54:	movw	r3, #55304	; 0xd808
   1aa58:	movt	r3, #2
   1aa5c:	mvn	r2, #0
   1aa60:	mov	r1, #1
   1aa64:	strd	sl, [sp]
   1aa68:	str	lr, [sp, #8]
   1aa6c:	str	r0, [sp, #12]
   1aa70:	mov	r0, r4
   1aa74:	bl	11bc4 <__sprintf_chk@plt>
   1aa78:	add	r4, r4, r0
   1aa7c:	b	1a348 <__assert_fail@plt+0x85d4>
   1aa80:	ldr	ip, [sp, #72]	; 0x48
   1aa84:	lsl	lr, r3, #1
   1aa88:	ldr	r2, [pc, #316]	; 1abcc <__assert_fail@plt+0x8e58>
   1aa8c:	add	r3, lr, r3
   1aa90:	add	r3, ip, r3, lsl #2
   1aa94:	add	r2, r2, r3, lsl #7
   1aa98:	b	1a994 <__assert_fail@plt+0x8c20>
   1aa9c:	mov	r3, #0
   1aaa0:	mov	fp, r3
   1aaa4:	str	r3, [r7, #224]	; 0xe0
   1aaa8:	b	1a818 <__assert_fail@plt+0x8aa4>
   1aaac:	mov	r1, #32
   1aab0:	mov	r0, r7
   1aab4:	bl	11c48 <__overflow@plt>
   1aab8:	cmn	r0, #1
   1aabc:	bne	1a4ec <__assert_fail@plt+0x8778>
   1aac0:	b	1a240 <__assert_fail@plt+0x84cc>
   1aac4:	mov	r0, r7
   1aac8:	mov	r1, #32
   1aacc:	bl	11c48 <__overflow@plt>
   1aad0:	b	1a240 <__assert_fail@plt+0x84cc>
   1aad4:	ldr	r0, [pc, #256]	; 1abdc <__assert_fail@plt+0x8e68>
   1aad8:	bl	1eef8 <__assert_fail@plt+0xd184>
   1aadc:	ldr	r2, [sp, #32]
   1aae0:	ldr	r0, [sp, #36]	; 0x24
   1aae4:	ldr	r3, [r5, #4040]	; 0xfc8
   1aae8:	ldr	ip, [r5, #4036]	; 0xfc4
   1aaec:	cmp	r3, r0
   1aaf0:	movgt	lr, #1
   1aaf4:	movle	lr, #0
   1aaf8:	movlt	r3, #1
   1aafc:	movge	r3, #0
   1ab00:	sub	fp, lr, r3
   1ab04:	b	1a924 <__assert_fail@plt+0x8bb0>
   1ab08:	mov	r1, #32
   1ab0c:	mov	r0, r7
   1ab10:	bl	11c48 <__overflow@plt>
   1ab14:	cmn	r0, #1
   1ab18:	beq	1a70c <__assert_fail@plt+0x8998>
   1ab1c:	b	1a6ac <__assert_fail@plt+0x8938>
   1ab20:	mov	r1, #45	; 0x2d
   1ab24:	mov	r0, r7
   1ab28:	bl	11c48 <__overflow@plt>
   1ab2c:	cmn	r0, #1
   1ab30:	beq	1a70c <__assert_fail@plt+0x8998>
   1ab34:	b	1a6cc <__assert_fail@plt+0x8958>
   1ab38:	mov	r1, #62	; 0x3e
   1ab3c:	mov	r0, r7
   1ab40:	bl	11c48 <__overflow@plt>
   1ab44:	cmn	r0, #1
   1ab48:	beq	1a70c <__assert_fail@plt+0x8998>
   1ab4c:	b	1a6ec <__assert_fail@plt+0x8978>
   1ab50:	mov	r0, r7
   1ab54:	mov	r1, #32
   1ab58:	bl	11c48 <__overflow@plt>
   1ab5c:	b	1a70c <__assert_fail@plt+0x8998>
   1ab60:	cmp	r2, #16384	; 0x4000
   1ab64:	beq	1ab94 <__assert_fail@plt+0x8e20>
   1ab68:	cmp	r3, #1
   1ab6c:	beq	1a638 <__assert_fail@plt+0x88c4>
   1ab70:	cmp	r2, #40960	; 0xa000
   1ab74:	beq	1abac <__assert_fail@plt+0x8e38>
   1ab78:	cmp	r2, #4096	; 0x1000
   1ab7c:	beq	1aba0 <__assert_fail@plt+0x8e2c>
   1ab80:	cmp	r2, #49152	; 0xc000
   1ab84:	moveq	r1, #61	; 0x3d
   1ab88:	moveq	r3, r1
   1ab8c:	bne	1a638 <__assert_fail@plt+0x88c4>
   1ab90:	b	1a758 <__assert_fail@plt+0x89e4>
   1ab94:	mov	r1, #47	; 0x2f
   1ab98:	mov	r3, r1
   1ab9c:	b	1a758 <__assert_fail@plt+0x89e4>
   1aba0:	mov	r1, #124	; 0x7c
   1aba4:	mov	r3, r1
   1aba8:	b	1a758 <__assert_fail@plt+0x89e4>
   1abac:	mov	r1, #64	; 0x40
   1abb0:	mov	r3, r1
   1abb4:	b	1a758 <__assert_fail@plt+0x89e4>
   1abb8:	ldr	fp, [r7, #224]	; 0xe0
   1abbc:	cmp	fp, #0
   1abc0:	bge	1a818 <__assert_fail@plt+0x8aa4>
   1abc4:	b	1a36c <__assert_fail@plt+0x85f8>
   1abc8:	bl	11d2c <abort@plt>
   1abcc:	andeq	r1, r4, r4, lsr r3
   1abd0:	andeq	r1, r4, r0, ror #30
   1abd4:	strdeq	r2, [r4], -ip
   1abd8:	strdeq	r1, [r4], -r0
   1abdc:	strdeq	r2, [r4], -r4
   1abe0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1abe4:	movw	r4, #4912	; 0x1330
   1abe8:	movt	r4, #4
   1abec:	ldr	r5, [r4, #3080]	; 0xc08
   1abf0:	strd	r6, [sp, #8]
   1abf4:	strd	r8, [sp, #16]
   1abf8:	strd	sl, [sp, #24]
   1abfc:	str	lr, [sp, #32]
   1ac00:	sub	sp, sp, #20
   1ac04:	cmp	r5, #4
   1ac08:	ldrls	pc, [pc, r5, lsl #2]
   1ac0c:	b	1ac4c <__assert_fail@plt+0x8ed8>
   1ac10:	andeq	sl, r1, ip, lsl #25
   1ac14:	andeq	sl, r1, r0, lsl #27
   1ac18:	andeq	sl, r1, r0, lsl #28
   1ac1c:	andeq	sl, r1, ip, lsl #30
   1ac20:	andeq	sl, r1, r8, ror #24
   1ac24:	ldr	r7, [sp, #4]
   1ac28:	ldr	r0, [r9]
   1ac2c:	ldrb	r1, [r7, #210]	; 0xd2
   1ac30:	ldr	r3, [r0, #20]
   1ac34:	ldr	r2, [r0, #24]
   1ac38:	cmp	r3, r2
   1ac3c:	addcc	r2, r3, #1
   1ac40:	strcc	r2, [r0, #20]
   1ac44:	strbcc	r1, [r3]
   1ac48:	bcs	1b058 <__assert_fail@plt+0x92e4>
   1ac4c:	add	sp, sp, #20
   1ac50:	ldrd	r4, [sp]
   1ac54:	ldrd	r6, [sp, #8]
   1ac58:	ldrd	r8, [sp, #16]
   1ac5c:	ldrd	sl, [sp, #24]
   1ac60:	add	sp, sp, #32
   1ac64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac68:	mov	r0, #44	; 0x2c
   1ac6c:	add	sp, sp, #20
   1ac70:	ldrd	r4, [sp]
   1ac74:	ldrd	r6, [sp, #8]
   1ac78:	ldrd	r8, [sp, #16]
   1ac7c:	ldrd	sl, [sp, #24]
   1ac80:	ldr	lr, [sp, #32]
   1ac84:	add	sp, sp, #36	; 0x24
   1ac88:	b	19eb4 <__assert_fail@plt+0x8140>
   1ac8c:	ldr	r3, [r4, #3296]	; 0xce0
   1ac90:	cmp	r3, #0
   1ac94:	beq	1ac4c <__assert_fail@plt+0x8ed8>
   1ac98:	movw	r7, #4560	; 0x11d0
   1ac9c:	movt	r7, #4
   1aca0:	ldr	fp, [pc, #984]	; 1b080 <__assert_fail@plt+0x930c>
   1aca4:	movw	r9, #4900	; 0x1324
   1aca8:	movt	r9, #4
   1acac:	add	sl, r7, #4
   1acb0:	add	r8, r7, #36	; 0x24
   1acb4:	add	r6, r7, #12
   1acb8:	b	1acd8 <__assert_fail@plt+0x8f64>
   1acbc:	ldr	r3, [r4, #3296]	; 0xce0
   1acc0:	add	r5, r5, #1
   1acc4:	add	r2, ip, #1
   1acc8:	str	r2, [r0, #20]
   1accc:	strb	r1, [ip]
   1acd0:	cmp	r3, r5
   1acd4:	bls	1ac4c <__assert_fail@plt+0x8ed8>
   1acd8:	ldrb	r3, [r4, #4017]	; 0xfb1
   1acdc:	cmp	r3, #0
   1ace0:	beq	1ad2c <__assert_fail@plt+0x8fb8>
   1ace4:	ldr	r2, [r7, #32]
   1ace8:	cmp	r2, #0
   1acec:	beq	1ad2c <__assert_fail@plt+0x8fb8>
   1acf0:	cmp	r2, #1
   1acf4:	ldr	r0, [r7, #36]	; 0x24
   1acf8:	beq	1b028 <__assert_fail@plt+0x92b4>
   1acfc:	cmp	r2, #2
   1ad00:	beq	1b038 <__assert_fail@plt+0x92c4>
   1ad04:	mov	r1, sl
   1ad08:	movw	r0, #4560	; 0x11d0
   1ad0c:	movt	r0, #4
   1ad10:	bl	14cc8 <__assert_fail@plt+0x2f54>
   1ad14:	mov	r1, r8
   1ad18:	ldr	r0, [pc, #868]	; 1b084 <__assert_fail@plt+0x9310>
   1ad1c:	bl	14cc8 <__assert_fail@plt+0x2f54>
   1ad20:	mov	r1, r6
   1ad24:	ldr	r0, [pc, #860]	; 1b088 <__assert_fail@plt+0x9314>
   1ad28:	bl	14cc8 <__assert_fail@plt+0x2f54>
   1ad2c:	ldr	r3, [r4, #3304]	; 0xce8
   1ad30:	ldr	r0, [r3, r5, lsl #2]
   1ad34:	bl	1a080 <__assert_fail@plt+0x830c>
   1ad38:	ldr	r0, [r9]
   1ad3c:	ldr	r3, [fp, #-8]
   1ad40:	ldr	r2, [fp, #-4]
   1ad44:	ldr	ip, [r0, #20]
   1ad48:	adds	r3, r3, #1
   1ad4c:	ldr	lr, [r0, #24]
   1ad50:	adc	r2, r2, #0
   1ad54:	str	r3, [fp, #-8]
   1ad58:	ldrb	r1, [r7, #210]	; 0xd2
   1ad5c:	str	r2, [fp, #-4]
   1ad60:	cmp	ip, lr
   1ad64:	bcc	1acbc <__assert_fail@plt+0x8f48>
   1ad68:	bl	11c48 <__overflow@plt>
   1ad6c:	ldr	r3, [r4, #3296]	; 0xce0
   1ad70:	add	r5, r5, #1
   1ad74:	cmp	r5, r3
   1ad78:	bcc	1acd8 <__assert_fail@plt+0x8f64>
   1ad7c:	b	1ac4c <__assert_fail@plt+0x8ed8>
   1ad80:	ldr	r3, [r4, #3296]	; 0xce0
   1ad84:	cmp	r3, #0
   1ad88:	beq	1ac4c <__assert_fail@plt+0x8ed8>
   1ad8c:	movw	r7, #4560	; 0x11d0
   1ad90:	movt	r7, #4
   1ad94:	movw	r9, #4900	; 0x1324
   1ad98:	movt	r9, #4
   1ad9c:	mov	r5, #0
   1ada0:	b	1adbc <__assert_fail@plt+0x9048>
   1ada4:	ldr	r2, [r4, #3296]	; 0xce0
   1ada8:	add	r5, r5, #1
   1adac:	str	ip, [r0, #20]
   1adb0:	strb	r1, [r3]
   1adb4:	cmp	r2, r5
   1adb8:	bls	1ac4c <__assert_fail@plt+0x8ed8>
   1adbc:	ldr	r3, [r4, #3304]	; 0xce8
   1adc0:	mov	r1, #0
   1adc4:	ldr	r0, [r3, r5, lsl #2]
   1adc8:	bl	19c3c <__assert_fail@plt+0x7ec8>
   1adcc:	ldr	r0, [r9]
   1add0:	ldrb	r1, [r7, #210]	; 0xd2
   1add4:	ldr	r3, [r0, #20]
   1add8:	ldr	r2, [r0, #24]
   1addc:	add	ip, r3, #1
   1ade0:	cmp	r3, r2
   1ade4:	bcc	1ada4 <__assert_fail@plt+0x9030>
   1ade8:	bl	11c48 <__overflow@plt>
   1adec:	ldr	r3, [r4, #3296]	; 0xce0
   1adf0:	add	r5, r5, #1
   1adf4:	cmp	r3, r5
   1adf8:	bhi	1adbc <__assert_fail@plt+0x9048>
   1adfc:	b	1ac4c <__assert_fail@plt+0x8ed8>
   1ae00:	ldr	r3, [r4, #3308]	; 0xcec
   1ae04:	cmp	r3, #0
   1ae08:	beq	1b020 <__assert_fail@plt+0x92ac>
   1ae0c:	mov	r0, #1
   1ae10:	bl	154fc <__assert_fail@plt+0x3788>
   1ae14:	ldr	r1, [r4, #3296]	; 0xce0
   1ae18:	add	r3, r0, r0, lsl #1
   1ae1c:	ldr	fp, [r4, #3300]	; 0xce4
   1ae20:	lsl	r3, r3, #2
   1ae24:	sub	r3, r3, #12
   1ae28:	udiv	r2, r1, r0
   1ae2c:	add	fp, fp, r3
   1ae30:	mls	r0, r0, r2, r1
   1ae34:	cmp	r0, #0
   1ae38:	addne	r2, r2, #1
   1ae3c:	cmp	r2, #0
   1ae40:	str	r2, [sp, #4]
   1ae44:	beq	1ac4c <__assert_fail@plt+0x8ed8>
   1ae48:	movw	r7, #4560	; 0x11d0
   1ae4c:	movt	r7, #4
   1ae50:	movw	r9, #4900	; 0x1324
   1ae54:	movt	r9, #4
   1ae58:	mov	r8, #0
   1ae5c:	str	r7, [sp, #8]
   1ae60:	str	r9, [sp, #12]
   1ae64:	mov	r7, #0
   1ae68:	mov	r6, r8
   1ae6c:	mov	r5, r7
   1ae70:	mov	sl, r4
   1ae74:	b	1ae7c <__assert_fail@plt+0x9108>
   1ae78:	bl	14980 <__assert_fail@plt+0x2c0c>
   1ae7c:	ldr	r2, [sl, #3304]	; 0xce8
   1ae80:	ldr	r3, [sp, #4]
   1ae84:	ldr	r4, [r2, r6, lsl #2]
   1ae88:	add	r6, r6, r3
   1ae8c:	mov	r0, r4
   1ae90:	bl	15388 <__assert_fail@plt+0x3614>
   1ae94:	ldr	r2, [fp, #8]
   1ae98:	mov	r1, r5
   1ae9c:	mov	r9, r0
   1aea0:	mov	r0, r4
   1aea4:	ldr	r4, [r2, r7]
   1aea8:	add	r7, r7, #4
   1aeac:	bl	19c3c <__assert_fail@plt+0x7ec8>
   1aeb0:	ldr	r2, [sl, #3296]	; 0xce0
   1aeb4:	add	r0, r9, r5
   1aeb8:	add	r5, r5, r4
   1aebc:	mov	r1, r5
   1aec0:	cmp	r6, r2
   1aec4:	bcc	1ae78 <__assert_fail@plt+0x9104>
   1aec8:	ldr	r3, [sp, #12]
   1aecc:	mov	r4, sl
   1aed0:	ldr	r0, [r3]
   1aed4:	ldr	r3, [sp, #8]
   1aed8:	ldr	r2, [r0, #24]
   1aedc:	ldrb	r1, [r3, #210]	; 0xd2
   1aee0:	ldr	r3, [r0, #20]
   1aee4:	cmp	r3, r2
   1aee8:	addcc	r2, r3, #1
   1aeec:	strcc	r2, [r0, #20]
   1aef0:	strbcc	r1, [r3]
   1aef4:	bcs	1b050 <__assert_fail@plt+0x92dc>
   1aef8:	ldr	r3, [sp, #4]
   1aefc:	add	r8, r8, #1
   1af00:	cmp	r3, r8
   1af04:	bne	1ae64 <__assert_fail@plt+0x90f0>
   1af08:	b	1ac4c <__assert_fail@plt+0x8ed8>
   1af0c:	ldr	r3, [r4, #3308]	; 0xcec
   1af10:	cmp	r3, #0
   1af14:	beq	1b020 <__assert_fail@plt+0x92ac>
   1af18:	mov	r0, #0
   1af1c:	movw	r7, #4560	; 0x11d0
   1af20:	movt	r7, #4
   1af24:	movw	r9, #4900	; 0x1324
   1af28:	movt	r9, #4
   1af2c:	bl	154fc <__assert_fail@plt+0x3788>
   1af30:	add	r3, r0, r0, lsl #1
   1af34:	ldr	fp, [r4, #3300]	; 0xce4
   1af38:	mov	sl, r0
   1af3c:	ldr	r2, [r4, #3304]	; 0xce8
   1af40:	lsl	r3, r3, #2
   1af44:	sub	r3, r3, #12
   1af48:	add	fp, fp, r3
   1af4c:	ldr	r5, [r2]
   1af50:	mov	r0, r5
   1af54:	bl	15388 <__assert_fail@plt+0x3614>
   1af58:	ldr	r2, [fp, #8]
   1af5c:	mov	r3, r0
   1af60:	mov	r1, #0
   1af64:	mov	r0, r5
   1af68:	ldr	r2, [r2]
   1af6c:	strd	r2, [sp, #4]
   1af70:	bl	19c3c <__assert_fail@plt+0x7ec8>
   1af74:	ldr	r1, [r4, #3296]	; 0xce0
   1af78:	ldrd	r2, [sp, #4]
   1af7c:	cmp	r1, #1
   1af80:	bls	1ac28 <__assert_fail@plt+0x8eb4>
   1af84:	mov	r8, #0
   1af88:	mov	r5, #1
   1af8c:	str	r7, [sp, #4]
   1af90:	mov	r0, r3
   1af94:	mov	r7, r4
   1af98:	b	1affc <__assert_fail@plt+0x9288>
   1af9c:	ldr	r0, [r9]
   1afa0:	mov	r8, r6
   1afa4:	ldr	r3, [sp, #4]
   1afa8:	ldr	r2, [r0, #20]
   1afac:	ldr	ip, [r0, #24]
   1afb0:	ldrb	r1, [r3, #210]	; 0xd2
   1afb4:	add	lr, r2, #1
   1afb8:	cmp	r2, ip
   1afbc:	strcc	lr, [r0, #20]
   1afc0:	strbcc	r1, [r2]
   1afc4:	bcs	1b078 <__assert_fail@plt+0x9304>
   1afc8:	ldr	r2, [r7, #3304]	; 0xce8
   1afcc:	mov	r1, r8
   1afd0:	ldr	r4, [r2, r5, lsl #2]
   1afd4:	add	r5, r5, #1
   1afd8:	mov	r0, r4
   1afdc:	bl	19c3c <__assert_fail@plt+0x7ec8>
   1afe0:	mov	r0, r4
   1afe4:	bl	15388 <__assert_fail@plt+0x3614>
   1afe8:	ldr	r1, [r7, #3296]	; 0xce0
   1afec:	ldr	r2, [fp, #8]
   1aff0:	cmp	r5, r1
   1aff4:	ldr	r2, [r2, r6, lsl #2]
   1aff8:	bcs	1ac24 <__assert_fail@plt+0x8eb0>
   1affc:	udiv	r6, r5, sl
   1b000:	mls	r6, sl, r6, r5
   1b004:	cmp	r6, #0
   1b008:	beq	1af9c <__assert_fail@plt+0x9228>
   1b00c:	add	r0, r0, r8
   1b010:	add	r8, r8, r2
   1b014:	mov	r1, r8
   1b018:	bl	14980 <__assert_fail@plt+0x2c0c>
   1b01c:	b	1afc8 <__assert_fail@plt+0x9254>
   1b020:	mov	r0, #32
   1b024:	b	1ac6c <__assert_fail@plt+0x8ef8>
   1b028:	ldrb	r3, [r0]
   1b02c:	cmp	r3, #48	; 0x30
   1b030:	bne	1ad04 <__assert_fail@plt+0x8f90>
   1b034:	b	1ad2c <__assert_fail@plt+0x8fb8>
   1b038:	movw	r1, #55176	; 0xd788
   1b03c:	movt	r1, #2
   1b040:	bl	11d20 <strncmp@plt>
   1b044:	cmp	r0, #0
   1b048:	bne	1ad04 <__assert_fail@plt+0x8f90>
   1b04c:	b	1ad2c <__assert_fail@plt+0x8fb8>
   1b050:	bl	11c48 <__overflow@plt>
   1b054:	b	1aef8 <__assert_fail@plt+0x9184>
   1b058:	add	sp, sp, #20
   1b05c:	ldrd	r4, [sp]
   1b060:	ldrd	r6, [sp, #8]
   1b064:	ldrd	r8, [sp, #16]
   1b068:	ldrd	sl, [sp, #24]
   1b06c:	ldr	lr, [sp, #32]
   1b070:	add	sp, sp, #36	; 0x24
   1b074:	b	11c48 <__overflow@plt>
   1b078:	bl	11c48 <__overflow@plt>
   1b07c:	b	1afc8 <__assert_fail@plt+0x9254>
   1b080:	andeq	r1, r4, r0, ror #30
   1b084:	strdeq	r1, [r4], -r0
   1b088:	ldrdeq	r1, [r4], -r8
   1b08c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b090:	movw	r5, #4912	; 0x1330
   1b094:	movt	r5, #4
   1b098:	strd	r6, [sp, #8]
   1b09c:	mov	r4, r1
   1b0a0:	strd	r8, [sp, #16]
   1b0a4:	mov	r8, r3
   1b0a8:	strd	sl, [sp, #24]
   1b0ac:	add	fp, sp, #32
   1b0b0:	str	lr, [sp, #32]
   1b0b4:	sub	sp, sp, #724	; 0x2d4
   1b0b8:	ldr	r6, [r5, #3296]	; 0xce0
   1b0bc:	str	r2, [fp, #-732]	; 0xfffffd24
   1b0c0:	ldr	r3, [r5, #4088]	; 0xff8
   1b0c4:	str	r0, [fp, #-720]	; 0xfffffd30
   1b0c8:	ldr	r0, [r5, #3348]	; 0xd14
   1b0cc:	cmp	r6, r3
   1b0d0:	beq	1b95c <__assert_fail@plt+0x9be8>
   1b0d4:	mov	r3, #152	; 0x98
   1b0d8:	mov	r1, #0
   1b0dc:	mov	r2, r3
   1b0e0:	mla	r6, r3, r6, r0
   1b0e4:	mov	r0, r6
   1b0e8:	bl	11be8 <memset@plt>
   1b0ec:	ldrb	r7, [r5, #3254]	; 0xcb6
   1b0f0:	mvn	r3, #0
   1b0f4:	str	r4, [r6, #120]	; 0x78
   1b0f8:	str	r3, [r6, #144]	; 0x90
   1b0fc:	cmp	r7, #0
   1b100:	bne	1b110 <__assert_fail@plt+0x939c>
   1b104:	ldrb	r2, [r5, #3253]	; 0xcb5
   1b108:	cmp	r2, #0
   1b10c:	bne	1b990 <__assert_fail@plt+0x9c1c>
   1b110:	ldr	r3, [fp, #-732]	; 0xfffffd24
   1b114:	cmp	r3, #0
   1b118:	ldrb	r3, [r5, #4092]	; 0xffc
   1b11c:	str	r3, [fp, #-736]	; 0xfffffd20
   1b120:	bne	1b188 <__assert_fail@plt+0x9414>
   1b124:	cmp	r3, #0
   1b128:	bne	1b6fc <__assert_fail@plt+0x9988>
   1b12c:	ldrb	r3, [r5, #4093]	; 0xffd
   1b130:	cmp	r3, #0
   1b134:	beq	1ba68 <__assert_fail@plt+0x9cf4>
   1b138:	movw	sl, #13096	; 0x3328
   1b13c:	movt	sl, #4
   1b140:	ldr	r3, [fp, #-720]	; 0xfffffd30
   1b144:	ldrb	r7, [r3]
   1b148:	add	r3, r6, #16
   1b14c:	str	r3, [fp, #-724]	; 0xfffffd2c
   1b150:	cmp	r7, #47	; 0x2f
   1b154:	beq	1b2f4 <__assert_fail@plt+0x9580>
   1b158:	ldrb	r3, [r8]
   1b15c:	cmp	r3, #0
   1b160:	bne	1b828 <__assert_fail@plt+0x9ab4>
   1b164:	ldr	r3, [sl, #-4088]	; 0xfffff008
   1b168:	cmp	r3, #2
   1b16c:	bcc	1b300 <__assert_fail@plt+0x958c>
   1b170:	cmp	r3, #3
   1b174:	bls	1b300 <__assert_fail@plt+0x958c>
   1b178:	cmp	r3, #4
   1b17c:	bne	1b300 <__assert_fail@plt+0x958c>
   1b180:	ldr	r9, [fp, #-720]	; 0xfffffd30
   1b184:	b	1b1e0 <__assert_fail@plt+0x946c>
   1b188:	ldr	r3, [fp, #-720]	; 0xfffffd30
   1b18c:	ldrb	r7, [r3]
   1b190:	add	r3, r6, #16
   1b194:	str	r3, [fp, #-724]	; 0xfffffd2c
   1b198:	cmp	r7, #47	; 0x2f
   1b19c:	beq	1b980 <__assert_fail@plt+0x9c0c>
   1b1a0:	ldrb	r3, [r8]
   1b1a4:	movw	sl, #13096	; 0x3328
   1b1a8:	movt	sl, #4
   1b1ac:	cmp	r3, #0
   1b1b0:	bne	1b828 <__assert_fail@plt+0x9ab4>
   1b1b4:	ldr	r9, [fp, #-720]	; 0xfffffd30
   1b1b8:	ldr	r3, [fp, #-736]	; 0xfffffd20
   1b1bc:	cmp	r3, #0
   1b1c0:	bne	1b8d8 <__assert_fail@plt+0x9b64>
   1b1c4:	ldr	r7, [sl, #-4088]	; 0xfffff008
   1b1c8:	cmp	r7, #2
   1b1cc:	bcc	1b304 <__assert_fail@plt+0x9590>
   1b1d0:	cmp	r7, #3
   1b1d4:	bls	1b750 <__assert_fail@plt+0x99dc>
   1b1d8:	cmp	r7, #4
   1b1dc:	bne	1b304 <__assert_fail@plt+0x9590>
   1b1e0:	bl	146a4 <__assert_fail@plt+0x2930>
   1b1e4:	mov	r3, #0
   1b1e8:	mov	r1, r9
   1b1ec:	str	r0, [sp]
   1b1f0:	mvn	r0, #99	; 0x63
   1b1f4:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   1b1f8:	mov	r7, #1
   1b1fc:	bl	147f8 <__assert_fail@plt+0x2a84>
   1b200:	cmp	r0, #0
   1b204:	bne	1b32c <__assert_fail@plt+0x95b8>
   1b208:	mov	r3, #1
   1b20c:	cmp	r4, #5
   1b210:	strb	r3, [r6, #132]	; 0x84
   1b214:	beq	1b650 <__assert_fail@plt+0x98dc>
   1b218:	ldr	r3, [r6, #32]
   1b21c:	and	r3, r3, #61440	; 0xf000
   1b220:	cmp	r3, #32768	; 0x8000
   1b224:	beq	1b650 <__assert_fail@plt+0x98dc>
   1b228:	ldr	r1, [r5, #3080]	; 0xc08
   1b22c:	cmp	r1, #0
   1b230:	beq	1b510 <__assert_fail@plt+0x979c>
   1b234:	ldrb	r3, [r5, #3276]	; 0xccc
   1b238:	cmp	r3, #0
   1b23c:	bne	1b510 <__assert_fail@plt+0x979c>
   1b240:	ldr	r3, [r6, #32]
   1b244:	and	r3, r3, #61440	; 0xf000
   1b248:	cmp	r3, #40960	; 0xa000
   1b24c:	beq	1bbdc <__assert_fail@plt+0x9e68>
   1b250:	cmp	r3, #16384	; 0x4000
   1b254:	beq	1bcfc <__assert_fail@plt+0x9f88>
   1b258:	ldr	r1, [r5, #3080]	; 0xc08
   1b25c:	mov	r3, #5
   1b260:	str	r3, [r6, #120]	; 0x78
   1b264:	ldrd	r2, [r6, #80]	; 0x50
   1b268:	sub	r0, fp, #732	; 0x2dc
   1b26c:	cmp	r1, #0
   1b270:	strd	r2, [r0]
   1b274:	beq	1b3a8 <__assert_fail@plt+0x9634>
   1b278:	ldrb	r3, [r5, #3078]	; 0xc06
   1b27c:	cmp	r3, #0
   1b280:	bne	1b3a8 <__assert_fail@plt+0x9634>
   1b284:	ldrb	r3, [r5, #3276]	; 0xccc
   1b288:	cmp	r3, #0
   1b28c:	bne	1b9d4 <__assert_fail@plt+0x9c60>
   1b290:	ldrb	r3, [r5, #3077]	; 0xc05
   1b294:	cmp	r3, #0
   1b298:	beq	1b2b8 <__assert_fail@plt+0x9544>
   1b29c:	sub	r2, fp, #692	; 0x2b4
   1b2a0:	ldrd	r0, [r6, #112]	; 0x70
   1b2a4:	bl	21cf4 <__assert_fail@plt+0xff80>
   1b2a8:	bl	11b94 <strlen@plt>
   1b2ac:	ldr	r3, [r5, #3256]	; 0xcb8
   1b2b0:	cmp	r0, r3
   1b2b4:	strgt	r0, [r5, #3256]	; 0xcb8
   1b2b8:	ldr	r0, [fp, #-720]	; 0xfffffd30
   1b2bc:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   1b2c0:	ldr	r3, [r5, #3296]	; 0xce0
   1b2c4:	str	r0, [r6]
   1b2c8:	add	r3, r3, #1
   1b2cc:	str	r3, [r5, #3296]	; 0xce0
   1b2d0:	sub	r3, fp, #732	; 0x2dc
   1b2d4:	ldrd	r0, [r3]
   1b2d8:	sub	sp, fp, #32
   1b2dc:	ldrd	r4, [sp]
   1b2e0:	ldrd	r6, [sp, #8]
   1b2e4:	ldrd	r8, [sp, #16]
   1b2e8:	ldrd	sl, [sp, #24]
   1b2ec:	add	sp, sp, #32
   1b2f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2f4:	ldr	r3, [sl, #-4088]	; 0xfffff008
   1b2f8:	cmp	r3, #4
   1b2fc:	beq	1b180 <__assert_fail@plt+0x940c>
   1b300:	ldr	r9, [fp, #-720]	; 0xfffffd30
   1b304:	bl	146a4 <__assert_fail@plt+0x2930>
   1b308:	mov	r3, #256	; 0x100
   1b30c:	mov	r1, r9
   1b310:	str	r0, [sp]
   1b314:	mvn	r0, #99	; 0x63
   1b318:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   1b31c:	mov	r7, #0
   1b320:	bl	147f8 <__assert_fail@plt+0x2a84>
   1b324:	cmp	r0, #0
   1b328:	beq	1b208 <__assert_fail@plt+0x9494>
   1b32c:	mov	r2, #5
   1b330:	movw	r1, #55340	; 0xd82c
   1b334:	movt	r1, #2
   1b338:	mov	r0, #0
   1b33c:	bl	11984 <dcgettext@plt>
   1b340:	mov	r7, r0
   1b344:	bl	11bb8 <__errno_location@plt>
   1b348:	ldr	r4, [r0]
   1b34c:	mov	r1, r9
   1b350:	mov	r0, #4
   1b354:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1b358:	mov	r3, r0
   1b35c:	mov	r2, r7
   1b360:	mov	r0, #0
   1b364:	mov	r1, r4
   1b368:	bl	11a8c <error@plt>
   1b36c:	ldr	r3, [fp, #-732]	; 0xfffffd24
   1b370:	cmp	r3, #0
   1b374:	bne	1ba44 <__assert_fail@plt+0x9cd0>
   1b378:	ldr	r3, [sl, #-4080]	; 0xfffff010
   1b37c:	mov	r8, #0
   1b380:	mov	r9, #0
   1b384:	sub	r2, fp, #732	; 0x2dc
   1b388:	ldr	r0, [fp, #-720]	; 0xfffffd30
   1b38c:	strd	r8, [r2]
   1b390:	cmp	r3, #0
   1b394:	moveq	r3, #1
   1b398:	streq	r3, [sl, #-4080]	; 0xfffff010
   1b39c:	ldr	r3, [pc, #3628]	; 1c1d0 <__assert_fail@plt+0xa45c>
   1b3a0:	str	r3, [r6, #128]	; 0x80
   1b3a4:	b	1b2bc <__assert_fail@plt+0x9548>
   1b3a8:	ldr	ip, [pc, #3620]	; 1c1d4 <__assert_fail@plt+0xa460>
   1b3ac:	mov	r0, #512	; 0x200
   1b3b0:	mov	r1, #0
   1b3b4:	sub	r3, fp, #732	; 0x2dc
   1b3b8:	sub	r2, fp, #692	; 0x2b4
   1b3bc:	strd	r0, [sp]
   1b3c0:	ldrd	r0, [r3]
   1b3c4:	ldrd	r8, [ip]
   1b3c8:	ldr	r3, [r5, #3260]	; 0xcbc
   1b3cc:	strd	r8, [sp, #8]
   1b3d0:	bl	20780 <__assert_fail@plt+0xea0c>
   1b3d4:	mov	r1, #0
   1b3d8:	bl	22878 <__assert_fail@plt+0x10b04>
   1b3dc:	ldr	r1, [r5, #3080]	; 0xc08
   1b3e0:	ldr	r3, [r5, #3272]	; 0xcc8
   1b3e4:	cmp	r0, r3
   1b3e8:	strgt	r0, [r5, #3272]	; 0xcc8
   1b3ec:	cmp	r1, #0
   1b3f0:	bne	1b284 <__assert_fail@plt+0x9510>
   1b3f4:	movw	r7, #4560	; 0x11d0
   1b3f8:	movt	r7, #4
   1b3fc:	ldrb	r3, [r7, #204]	; 0xcc
   1b400:	cmp	r3, #0
   1b404:	bne	1bd34 <__assert_fail@plt+0x9fc0>
   1b408:	ldrb	r3, [r7, #205]	; 0xcd
   1b40c:	cmp	r3, #0
   1b410:	bne	1bd88 <__assert_fail@plt+0xa014>
   1b414:	ldrb	r3, [r5, #3088]	; 0xc10
   1b418:	cmp	r3, #0
   1b41c:	bne	1bddc <__assert_fail@plt+0xa068>
   1b420:	ldrb	r3, [r5, #3276]	; 0xccc
   1b424:	ldr	r1, [r5, #3080]	; 0xc08
   1b428:	cmp	r3, #0
   1b42c:	beq	1b450 <__assert_fail@plt+0x96dc>
   1b430:	ldr	r0, [r6, #128]	; 0x80
   1b434:	str	r1, [fp, #-724]	; 0xfffffd2c
   1b438:	bl	11b94 <strlen@plt>
   1b43c:	ldr	r3, [r5, #3280]	; 0xcd0
   1b440:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1b444:	cmp	r0, r3
   1b448:	ble	1b450 <__assert_fail@plt+0x96dc>
   1b44c:	str	r0, [r5, #3280]	; 0xcd0
   1b450:	cmp	r1, #0
   1b454:	bne	1b290 <__assert_fail@plt+0x951c>
   1b458:	sub	r2, fp, #716	; 0x2cc
   1b45c:	ldr	r0, [r6, #36]	; 0x24
   1b460:	bl	21cf4 <__assert_fail@plt+0xff80>
   1b464:	bl	11b94 <strlen@plt>
   1b468:	ldr	r3, [r5, #3316]	; 0xcf4
   1b46c:	cmp	r0, r3
   1b470:	ldr	r3, [r6, #32]
   1b474:	strgt	r0, [r5, #3316]	; 0xcf4
   1b478:	and	r3, r3, #45056	; 0xb000
   1b47c:	cmp	r3, #8192	; 0x2000
   1b480:	bne	1bb84 <__assert_fail@plt+0x9e10>
   1b484:	ldr	r0, [r6, #48]	; 0x30
   1b488:	mov	r1, #0
   1b48c:	sub	r2, fp, #692	; 0x2b4
   1b490:	ldr	r3, [r6, #52]	; 0x34
   1b494:	ubfx	r0, r0, #8, #12
   1b498:	bic	r3, r3, #4080	; 0xff0
   1b49c:	bic	r3, r3, #15
   1b4a0:	orr	r0, r3, r0
   1b4a4:	bl	21cf4 <__assert_fail@plt+0xff80>
   1b4a8:	bl	11b94 <strlen@plt>
   1b4ac:	ldr	r3, [r5, #3332]	; 0xd04
   1b4b0:	sub	r2, fp, #692	; 0x2b4
   1b4b4:	mov	r1, #0
   1b4b8:	ldr	ip, [r6, #52]	; 0x34
   1b4bc:	cmp	r0, r3
   1b4c0:	strgt	r0, [r5, #3332]	; 0xd04
   1b4c4:	ldr	r0, [r6, #48]	; 0x30
   1b4c8:	lsr	r3, r0, #12
   1b4cc:	uxtb	r0, r0
   1b4d0:	orr	r3, r3, ip, lsl #20
   1b4d4:	bic	r3, r3, #255	; 0xff
   1b4d8:	orr	r0, r3, r0
   1b4dc:	bl	21cf4 <__assert_fail@plt+0xff80>
   1b4e0:	bl	11b94 <strlen@plt>
   1b4e4:	ldr	r3, [r5, #3332]	; 0xd04
   1b4e8:	ldr	r2, [r5, #3336]	; 0xd08
   1b4ec:	ldr	r1, [r5, #3340]	; 0xd0c
   1b4f0:	add	r3, r3, #2
   1b4f4:	cmp	r0, r2
   1b4f8:	movgt	r2, r0
   1b4fc:	add	r3, r3, r2
   1b500:	strgt	r0, [r5, #3336]	; 0xd08
   1b504:	cmp	r3, r1
   1b508:	strgt	r3, [r5, #3340]	; 0xd0c
   1b50c:	b	1b290 <__assert_fail@plt+0x951c>
   1b510:	ldr	r4, [pc, #3264]	; 1c1d8 <__assert_fail@plt+0xa464>
   1b514:	ldrd	r0, [r6, #16]
   1b518:	ldrd	r2, [r4, #-8]
   1b51c:	cmp	r1, r3
   1b520:	cmpeq	r0, r2
   1b524:	beq	1c184 <__assert_fail@plt+0xa410>
   1b528:	cmp	r7, #0
   1b52c:	mov	r0, r9
   1b530:	add	r1, r6, #128	; 0x80
   1b534:	beq	1b7b0 <__assert_fail@plt+0x9a3c>
   1b538:	bl	28dac <_obstack_memory_used@@Base+0x3cf4>
   1b53c:	cmp	r0, #0
   1b540:	blt	1b7bc <__assert_fail@plt+0x9a48>
   1b544:	movw	r0, #55400	; 0xd868
   1b548:	movt	r0, #2
   1b54c:	ldr	r1, [r6, #128]	; 0x80
   1b550:	bl	118a0 <strcmp@plt>
   1b554:	ldr	r1, [r5, #3080]	; 0xc08
   1b558:	adds	r8, r0, #0
   1b55c:	movne	r8, #1
   1b560:	cmp	r1, #0
   1b564:	beq	1bc18 <__assert_fail@plt+0x9ea4>
   1b568:	cmp	r0, #0
   1b56c:	beq	1bbc8 <__assert_fail@plt+0x9e54>
   1b570:	mov	r3, #1
   1b574:	str	r3, [r6, #136]	; 0x88
   1b578:	strb	r3, [r5, #3312]	; 0xcf0
   1b57c:	ldr	r3, [r6, #32]
   1b580:	and	r3, r3, #61440	; 0xf000
   1b584:	cmp	r3, #40960	; 0xa000
   1b588:	bne	1b250 <__assert_fail@plt+0x94dc>
   1b58c:	ldr	r1, [r5, #3080]	; 0xc08
   1b590:	cmp	r1, #0
   1b594:	bne	1bbdc <__assert_fail@plt+0x9e68>
   1b598:	mov	r0, r9
   1b59c:	ldr	r1, [r6, #64]	; 0x40
   1b5a0:	bl	1d120 <__assert_fail@plt+0xb3ac>
   1b5a4:	cmp	r0, #0
   1b5a8:	mov	r4, r0
   1b5ac:	str	r0, [r6, #4]
   1b5b0:	beq	1c0a8 <__assert_fail@plt+0xa334>
   1b5b4:	ldrb	r3, [r4]
   1b5b8:	cmp	r3, #47	; 0x2f
   1b5bc:	beq	1c150 <__assert_fail@plt+0xa3dc>
   1b5c0:	mov	r0, r9
   1b5c4:	bl	1e194 <__assert_fail@plt+0xc420>
   1b5c8:	subs	r8, r0, #0
   1b5cc:	mov	r0, r4
   1b5d0:	beq	1bf7c <__assert_fail@plt+0xa208>
   1b5d4:	bl	11b94 <strlen@plt>
   1b5d8:	add	r3, r8, #2
   1b5dc:	add	r0, r3, r0
   1b5e0:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   1b5e4:	add	r3, r9, r8
   1b5e8:	mov	r1, r9
   1b5ec:	ldrb	r3, [r3, #-1]
   1b5f0:	mov	r7, r0
   1b5f4:	cmp	r3, #47	; 0x2f
   1b5f8:	addne	r8, r8, #1
   1b5fc:	mov	r2, r8
   1b600:	bl	11c00 <stpncpy@plt>
   1b604:	mov	r1, r4
   1b608:	bl	11a5c <strcpy@plt>
   1b60c:	ldr	r3, [r6, #144]	; 0x90
   1b610:	cmp	r3, #0
   1b614:	beq	1bfe8 <__assert_fail@plt+0xa274>
   1b618:	ldr	r3, [r5, #3104]	; 0xc20
   1b61c:	cmp	r3, #1
   1b620:	bhi	1bcc4 <__assert_fail@plt+0x9f50>
   1b624:	ldrb	r3, [sl, #-4084]	; 0xfffff00c
   1b628:	cmp	r3, #0
   1b62c:	bne	1bcc4 <__assert_fail@plt+0x9f50>
   1b630:	mov	r0, r7
   1b634:	bl	1ee98 <__assert_fail@plt+0xd124>
   1b638:	ldr	r3, [r6, #32]
   1b63c:	and	r3, r3, #61440	; 0xf000
   1b640:	cmp	r3, #40960	; 0xa000
   1b644:	bne	1b250 <__assert_fail@plt+0x94dc>
   1b648:	ldr	r1, [r5, #3080]	; 0xc08
   1b64c:	b	1bbe8 <__assert_fail@plt+0x9e74>
   1b650:	ldrb	r4, [r5, #4017]	; 0xfb1
   1b654:	cmp	r4, #0
   1b658:	beq	1b228 <__assert_fail@plt+0x94b4>
   1b65c:	movw	r3, #4560	; 0x11d0
   1b660:	movt	r3, #4
   1b664:	ldr	r2, [r3, #168]	; 0xa8
   1b668:	cmp	r2, #0
   1b66c:	beq	1b228 <__assert_fail@plt+0x94b4>
   1b670:	cmp	r2, #1
   1b674:	ldr	r0, [r3, #172]	; 0xac
   1b678:	beq	1c030 <__assert_fail@plt+0xa2bc>
   1b67c:	cmp	r2, #2
   1b680:	beq	1be9c <__assert_fail@plt+0xa128>
   1b684:	ldr	r8, [pc, #2896]	; 1c1dc <__assert_fail@plt+0xa468>
   1b688:	ldrd	r0, [r6, #16]
   1b68c:	ldrd	r2, [r8]
   1b690:	cmp	r1, r3
   1b694:	cmpeq	r0, r2
   1b698:	beq	1beb4 <__assert_fail@plt+0xa140>
   1b69c:	mov	r0, r9
   1b6a0:	bl	11c84 <cap_get_file@plt>
   1b6a4:	subs	r3, r0, #0
   1b6a8:	beq	1c11c <__assert_fail@plt+0xa3a8>
   1b6ac:	mov	r1, #0
   1b6b0:	str	r3, [fp, #-740]	; 0xfffffd1c
   1b6b4:	bl	11870 <cap_to_text@plt>
   1b6b8:	ldr	r3, [fp, #-740]	; 0xfffffd1c
   1b6bc:	mov	r2, r0
   1b6c0:	str	r2, [fp, #-736]	; 0xfffffd20
   1b6c4:	mov	r0, r3
   1b6c8:	bl	11ccc <cap_free@plt>
   1b6cc:	ldr	r2, [fp, #-736]	; 0xfffffd20
   1b6d0:	cmp	r2, #0
   1b6d4:	beq	1c11c <__assert_fail@plt+0xa3a8>
   1b6d8:	ldrb	r3, [r2]
   1b6dc:	mov	r0, r2
   1b6e0:	str	r3, [fp, #-736]	; 0xfffffd20
   1b6e4:	bl	11ccc <cap_free@plt>
   1b6e8:	ldr	r3, [fp, #-736]	; 0xfffffd20
   1b6ec:	cmp	r3, #0
   1b6f0:	beq	1c11c <__assert_fail@plt+0xa3a8>
   1b6f4:	strb	r4, [r6, #140]	; 0x8c
   1b6f8:	b	1b228 <__assert_fail@plt+0x94b4>
   1b6fc:	ldr	r3, [fp, #-720]	; 0xfffffd30
   1b700:	ldrb	r7, [r3]
   1b704:	add	r3, r6, #16
   1b708:	str	r3, [fp, #-724]	; 0xfffffd2c
   1b70c:	cmp	r7, #47	; 0x2f
   1b710:	beq	1bbf4 <__assert_fail@plt+0x9e80>
   1b714:	ldrb	r3, [r8]
   1b718:	cmp	r3, #0
   1b71c:	movwne	sl, #13096	; 0x3328
   1b720:	movtne	sl, #4
   1b724:	bne	1b828 <__assert_fail@plt+0x9ab4>
   1b728:	ldr	r9, [fp, #-720]	; 0xfffffd30
   1b72c:	mov	r1, #2
   1b730:	mov	r0, r9
   1b734:	bl	1d920 <__assert_fail@plt+0xbbac>
   1b738:	cmp	r0, #0
   1b73c:	str	r0, [r6, #8]
   1b740:	beq	1c040 <__assert_fail@plt+0xa2cc>
   1b744:	movw	sl, #13096	; 0x3328
   1b748:	movt	sl, #4
   1b74c:	b	1b1c4 <__assert_fail@plt+0x9450>
   1b750:	ldr	r3, [fp, #-732]	; 0xfffffd24
   1b754:	cmp	r3, #0
   1b758:	beq	1b304 <__assert_fail@plt+0x9590>
   1b75c:	bl	146a4 <__assert_fail@plt+0x2930>
   1b760:	mov	r3, #0
   1b764:	mov	r1, r9
   1b768:	str	r0, [sp]
   1b76c:	mvn	r0, #99	; 0x63
   1b770:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   1b774:	bl	147f8 <__assert_fail@plt+0x2a84>
   1b778:	cmp	r7, #2
   1b77c:	beq	1b798 <__assert_fail@plt+0x9a24>
   1b780:	cmp	r0, #0
   1b784:	blt	1b9f4 <__assert_fail@plt+0x9c80>
   1b788:	ldr	r3, [r6, #32]
   1b78c:	and	r3, r3, #61440	; 0xf000
   1b790:	cmp	r3, #16384	; 0x4000
   1b794:	bne	1b304 <__assert_fail@plt+0x9590>
   1b798:	cmp	r0, #0
   1b79c:	moveq	r7, #1
   1b7a0:	beq	1b208 <__assert_fail@plt+0x9494>
   1b7a4:	bl	11bb8 <__errno_location@plt>
   1b7a8:	mov	r7, r0
   1b7ac:	b	1ba08 <__assert_fail@plt+0x9c94>
   1b7b0:	bl	28e3c <_obstack_memory_used@@Base+0x3d84>
   1b7b4:	cmp	r0, #0
   1b7b8:	bge	1b544 <__assert_fail@plt+0x97d0>
   1b7bc:	bl	11bb8 <__errno_location@plt>
   1b7c0:	ldr	r1, [r0]
   1b7c4:	mov	r7, r0
   1b7c8:	sub	r0, r1, #95	; 0x5f
   1b7cc:	sub	r3, r1, #22
   1b7d0:	clz	r0, r0
   1b7d4:	bics	r3, r3, #16
   1b7d8:	lsr	r0, r0, #5
   1b7dc:	moveq	r3, #1
   1b7e0:	movne	r3, r0
   1b7e4:	cmp	r3, #0
   1b7e8:	beq	1b7f4 <__assert_fail@plt+0x9a80>
   1b7ec:	ldrd	r2, [r6, #16]
   1b7f0:	strd	r2, [r4, #-8]
   1b7f4:	ldr	r3, [pc, #2516]	; 1c1d0 <__assert_fail@plt+0xa45c>
   1b7f8:	cmp	r1, #61	; 0x3d
   1b7fc:	movne	r1, r0
   1b800:	orreq	r1, r0, #1
   1b804:	cmp	r1, #0
   1b808:	str	r3, [r6, #128]	; 0x80
   1b80c:	beq	1be64 <__assert_fail@plt+0xa0f0>
   1b810:	ldr	r1, [r5, #3080]	; 0xc08
   1b814:	cmp	r1, #0
   1b818:	beq	1c028 <__assert_fail@plt+0xa2b4>
   1b81c:	mov	r3, #0
   1b820:	str	r3, [r6, #136]	; 0x88
   1b824:	b	1b240 <__assert_fail@plt+0x94cc>
   1b828:	ldr	r0, [fp, #-720]	; 0xfffffd30
   1b82c:	str	r3, [fp, #-740]	; 0xfffffd1c
   1b830:	bl	11b94 <strlen@plt>
   1b834:	mov	r9, r0
   1b838:	mov	r0, r8
   1b83c:	bl	11b94 <strlen@plt>
   1b840:	ldr	r3, [fp, #-740]	; 0xfffffd1c
   1b844:	add	r0, r9, r0
   1b848:	add	r0, r0, #9
   1b84c:	bic	r0, r0, #7
   1b850:	sub	sp, sp, r0
   1b854:	add	r9, sp, #16
   1b858:	cmp	r3, #46	; 0x2e
   1b85c:	beq	1bcb0 <__assert_fail@plt+0x9f3c>
   1b860:	add	r1, r8, #1
   1b864:	mov	r0, r9
   1b868:	b	1b870 <__assert_fail@plt+0x9afc>
   1b86c:	mov	r0, r2
   1b870:	mov	r2, r0
   1b874:	mov	ip, r1
   1b878:	strb	r3, [r2], #1
   1b87c:	ldrb	r3, [r1], #1
   1b880:	cmp	r3, #0
   1b884:	bne	1b86c <__assert_fail@plt+0x9af8>
   1b888:	cmp	r8, ip
   1b88c:	bcs	1b8a8 <__assert_fail@plt+0x9b34>
   1b890:	ldrb	r3, [ip, #-1]
   1b894:	cmp	r3, #47	; 0x2f
   1b898:	beq	1b8a8 <__assert_fail@plt+0x9b34>
   1b89c:	mov	r3, #47	; 0x2f
   1b8a0:	strb	r3, [r2]
   1b8a4:	add	r2, r0, #2
   1b8a8:	cmp	r7, #0
   1b8ac:	beq	1b8c4 <__assert_fail@plt+0x9b50>
   1b8b0:	ldr	r3, [fp, #-720]	; 0xfffffd30
   1b8b4:	strb	r7, [r2], #1
   1b8b8:	ldrb	r7, [r3, #1]!
   1b8bc:	cmp	r7, #0
   1b8c0:	bne	1b8b4 <__assert_fail@plt+0x9b40>
   1b8c4:	mov	r3, #0
   1b8c8:	strb	r3, [r2]
   1b8cc:	ldr	r3, [fp, #-736]	; 0xfffffd20
   1b8d0:	cmp	r3, #0
   1b8d4:	beq	1b1c4 <__assert_fail@plt+0x9450>
   1b8d8:	mov	r1, #2
   1b8dc:	mov	r0, r9
   1b8e0:	bl	1d920 <__assert_fail@plt+0xbbac>
   1b8e4:	cmp	r0, #0
   1b8e8:	mov	r7, r0
   1b8ec:	str	r0, [r6, #8]
   1b8f0:	bne	1b1c4 <__assert_fail@plt+0x9450>
   1b8f4:	mov	r2, #5
   1b8f8:	movw	r1, #55316	; 0xd814
   1b8fc:	movt	r1, #2
   1b900:	bl	11984 <dcgettext@plt>
   1b904:	str	r0, [fp, #-736]	; 0xfffffd20
   1b908:	bl	11bb8 <__errno_location@plt>
   1b90c:	ldr	r8, [r0]
   1b910:	mov	r1, r9
   1b914:	mov	r0, #4
   1b918:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1b91c:	mov	r3, r0
   1b920:	mov	r0, r7
   1b924:	ldr	r2, [fp, #-736]	; 0xfffffd20
   1b928:	mov	r1, r8
   1b92c:	bl	11a8c <error@plt>
   1b930:	ldr	r3, [fp, #-732]	; 0xfffffd24
   1b934:	cmp	r3, #0
   1b938:	beq	1c088 <__assert_fail@plt+0xa314>
   1b93c:	ldr	r7, [sl, #-4088]	; 0xfffff008
   1b940:	mov	r3, #2
   1b944:	str	r3, [sl, #-4080]	; 0xfffff010
   1b948:	cmp	r7, r3
   1b94c:	bcc	1b304 <__assert_fail@plt+0x9590>
   1b950:	cmp	r7, #3
   1b954:	bhi	1b1d8 <__assert_fail@plt+0x9464>
   1b958:	b	1b75c <__assert_fail@plt+0x99e8>
   1b95c:	mov	r1, r6
   1b960:	mov	r2, #304	; 0x130
   1b964:	bl	29e74 <_obstack_memory_used@@Base+0x4dbc>
   1b968:	str	r0, [r5, #3348]	; 0xd14
   1b96c:	ldr	r3, [r5, #4088]	; 0xff8
   1b970:	ldr	r6, [r5, #3296]	; 0xce0
   1b974:	lsl	r3, r3, #1
   1b978:	str	r3, [r5, #4088]	; 0xff8
   1b97c:	b	1b0d4 <__assert_fail@plt+0x9360>
   1b980:	movw	sl, #13096	; 0x3328
   1b984:	movt	sl, #4
   1b988:	ldr	r9, [fp, #-720]	; 0xfffffd30
   1b98c:	b	1b1b8 <__assert_fail@plt+0x9444>
   1b990:	ldr	sl, [fp, #-720]	; 0xfffffd30
   1b994:	mov	r1, #2
   1b998:	sub	r0, fp, #692	; 0x2b4
   1b99c:	ldr	ip, [r5, #3284]	; 0xcd4
   1b9a0:	mov	r2, sl
   1b9a4:	str	ip, [sp]
   1b9a8:	bl	26ff4 <_obstack_memory_used@@Base+0x1f3c>
   1b9ac:	ldrb	r2, [sl]
   1b9b0:	mov	r9, r0
   1b9b4:	ldrb	r3, [fp, #-692]	; 0xfffffd4c
   1b9b8:	cmp	r2, r3
   1b9bc:	beq	1be6c <__assert_fail@plt+0xa0f8>
   1b9c0:	mov	r3, #1
   1b9c4:	str	r3, [r6, #144]	; 0x90
   1b9c8:	mov	r3, #1
   1b9cc:	strb	r3, [r5, #3254]	; 0xcb6
   1b9d0:	b	1b110 <__assert_fail@plt+0x939c>
   1b9d4:	ldr	r0, [r6, #128]	; 0x80
   1b9d8:	str	r1, [fp, #-724]	; 0xfffffd2c
   1b9dc:	bl	11b94 <strlen@plt>
   1b9e0:	ldr	r3, [r5, #3280]	; 0xcd0
   1b9e4:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1b9e8:	cmp	r0, r3
   1b9ec:	bgt	1b44c <__assert_fail@plt+0x96d8>
   1b9f0:	b	1b290 <__assert_fail@plt+0x951c>
   1b9f4:	bl	11bb8 <__errno_location@plt>
   1b9f8:	ldr	r3, [r0]
   1b9fc:	mov	r7, r0
   1ba00:	cmp	r3, #2
   1ba04:	beq	1b304 <__assert_fail@plt+0x9590>
   1ba08:	mov	r2, #5
   1ba0c:	movw	r1, #55340	; 0xd82c
   1ba10:	movt	r1, #2
   1ba14:	mov	r0, #0
   1ba18:	bl	11984 <dcgettext@plt>
   1ba1c:	ldr	r4, [r7]
   1ba20:	mov	r5, r0
   1ba24:	mov	r1, r9
   1ba28:	mov	r0, #4
   1ba2c:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1ba30:	mov	r3, r0
   1ba34:	mov	r2, r5
   1ba38:	mov	r0, #0
   1ba3c:	mov	r1, r4
   1ba40:	bl	11a8c <error@plt>
   1ba44:	ldr	r3, [pc, #1924]	; 1c1d0 <__assert_fail@plt+0xa45c>
   1ba48:	mov	r2, #2
   1ba4c:	mov	r0, #0
   1ba50:	mov	r1, #0
   1ba54:	sub	ip, fp, #732	; 0x2dc
   1ba58:	str	r2, [sl, #-4080]	; 0xfffff010
   1ba5c:	strd	r0, [ip]
   1ba60:	str	r3, [r6, #128]	; 0x80
   1ba64:	b	1b2d0 <__assert_fail@plt+0x955c>
   1ba68:	cmp	r4, #3
   1ba6c:	beq	1bec8 <__assert_fail@plt+0xa154>
   1ba70:	ldrb	r2, [r5, #3077]	; 0xc05
   1ba74:	cmp	r2, #0
   1ba78:	bne	1be84 <__assert_fail@plt+0xa110>
   1ba7c:	ldrb	r3, [r5, #4094]	; 0xffe
   1ba80:	cmp	r3, #0
   1ba84:	beq	1bb70 <__assert_fail@plt+0x9dfc>
   1ba88:	clz	r3, r4
   1ba8c:	cmp	r4, #0
   1ba90:	cmpne	r4, #6
   1ba94:	lsr	r3, r3, #5
   1ba98:	bne	1bae4 <__assert_fail@plt+0x9d70>
   1ba9c:	movw	sl, #13096	; 0x3328
   1baa0:	movt	sl, #4
   1baa4:	ldr	r1, [sl, #-4088]	; 0xfffff008
   1baa8:	cmp	r1, #4
   1baac:	beq	1b140 <__assert_fail@plt+0x93cc>
   1bab0:	ldrb	r1, [r5, #4018]	; 0xfb2
   1bab4:	cmp	r1, #0
   1bab8:	bne	1b140 <__assert_fail@plt+0x93cc>
   1babc:	ldrb	r1, [sl, #-4084]	; 0xfffff00c
   1bac0:	cmp	r1, #0
   1bac4:	bne	1b140 <__assert_fail@plt+0x93cc>
   1bac8:	cmp	r2, #0
   1bacc:	bne	1b140 <__assert_fail@plt+0x93cc>
   1bad0:	ldrb	r2, [r5, #4094]	; 0xffe
   1bad4:	cmp	r2, #0
   1bad8:	beq	1bb70 <__assert_fail@plt+0x9dfc>
   1badc:	cmp	r3, #0
   1bae0:	bne	1b140 <__assert_fail@plt+0x93cc>
   1bae4:	cmp	r4, #5
   1bae8:	bne	1bb70 <__assert_fail@plt+0x9dfc>
   1baec:	ldr	r3, [r5, #3104]	; 0xc20
   1baf0:	cmp	r3, #3
   1baf4:	beq	1b138 <__assert_fail@plt+0x93c4>
   1baf8:	ldrb	r3, [r5, #4017]	; 0xfb1
   1bafc:	cmp	r3, #0
   1bb00:	beq	1bb70 <__assert_fail@plt+0x9dfc>
   1bb04:	movw	r3, #4560	; 0x11d0
   1bb08:	movt	r3, #4
   1bb0c:	ldr	r2, [r3, #112]	; 0x70
   1bb10:	cmp	r2, #0
   1bb14:	beq	1bb40 <__assert_fail@plt+0x9dcc>
   1bb18:	cmp	r2, #1
   1bb1c:	ldr	r0, [r3, #116]	; 0x74
   1bb20:	beq	1c1c0 <__assert_fail@plt+0xa44c>
   1bb24:	cmp	r2, #2
   1bb28:	bne	1b138 <__assert_fail@plt+0x93c4>
   1bb2c:	movw	r1, #55176	; 0xd788
   1bb30:	movt	r1, #2
   1bb34:	bl	11d20 <strncmp@plt>
   1bb38:	cmp	r0, #0
   1bb3c:	bne	1b138 <__assert_fail@plt+0x93c4>
   1bb40:	mov	r0, #16
   1bb44:	bl	13ec8 <__assert_fail@plt+0x2154>
   1bb48:	cmp	r0, #0
   1bb4c:	bne	1b138 <__assert_fail@plt+0x93c4>
   1bb50:	mov	r0, #17
   1bb54:	bl	13ec8 <__assert_fail@plt+0x2154>
   1bb58:	cmp	r0, #0
   1bb5c:	bne	1b138 <__assert_fail@plt+0x93c4>
   1bb60:	mov	r0, #21
   1bb64:	bl	13ec8 <__assert_fail@plt+0x2154>
   1bb68:	cmp	r0, #0
   1bb6c:	bne	1b138 <__assert_fail@plt+0x93c4>
   1bb70:	mov	r2, #0
   1bb74:	mov	r3, #0
   1bb78:	sub	r1, fp, #732	; 0x2dc
   1bb7c:	strd	r2, [r1]
   1bb80:	b	1b2b8 <__assert_fail@plt+0x9544>
   1bb84:	movw	r3, #4560	; 0x11d0
   1bb88:	movt	r3, #4
   1bb8c:	ldrd	r0, [r6, #64]	; 0x40
   1bb90:	sub	r2, fp, #692	; 0x2b4
   1bb94:	ldrd	r8, [r3, #216]	; 0xd8
   1bb98:	strd	r8, [sp, #8]
   1bb9c:	mov	r8, #1
   1bba0:	mov	r9, #0
   1bba4:	strd	r8, [sp]
   1bba8:	ldr	r3, [r5, #4028]	; 0xfbc
   1bbac:	bl	20780 <__assert_fail@plt+0xea0c>
   1bbb0:	mov	r1, #0
   1bbb4:	bl	22878 <__assert_fail@plt+0x10b04>
   1bbb8:	ldr	r3, [r5, #3340]	; 0xd0c
   1bbbc:	cmp	r0, r3
   1bbc0:	strgt	r0, [r5, #3340]	; 0xd0c
   1bbc4:	b	1b290 <__assert_fail@plt+0x951c>
   1bbc8:	ldr	r3, [r6, #32]
   1bbcc:	str	r0, [r6, #136]	; 0x88
   1bbd0:	and	r3, r3, #61440	; 0xf000
   1bbd4:	cmp	r3, #40960	; 0xa000
   1bbd8:	bne	1b250 <__assert_fail@plt+0x94dc>
   1bbdc:	ldrb	r3, [sl, #-4084]	; 0xfffff00c
   1bbe0:	cmp	r3, #0
   1bbe4:	bne	1b598 <__assert_fail@plt+0x9824>
   1bbe8:	mov	r3, #6
   1bbec:	str	r3, [r6, #120]	; 0x78
   1bbf0:	b	1b264 <__assert_fail@plt+0x94f0>
   1bbf4:	mov	r1, #2
   1bbf8:	ldr	r0, [fp, #-720]	; 0xfffffd30
   1bbfc:	bl	1d920 <__assert_fail@plt+0xbbac>
   1bc00:	cmp	r0, #0
   1bc04:	str	r0, [r6, #8]
   1bc08:	beq	1c040 <__assert_fail@plt+0xa2cc>
   1bc0c:	movw	sl, #13096	; 0x3328
   1bc10:	movt	sl, #4
   1bc14:	b	1b164 <__assert_fail@plt+0x93f0>
   1bc18:	bl	11bb8 <__errno_location@plt>
   1bc1c:	mov	r7, r0
   1bc20:	ldrd	r2, [r4]
   1bc24:	ldrd	r0, [r6, #16]
   1bc28:	cmp	r1, r3
   1bc2c:	cmpeq	r0, r2
   1bc30:	moveq	r3, #95	; 0x5f
   1bc34:	moveq	r0, #0
   1bc38:	streq	r3, [r7]
   1bc3c:	beq	1be4c <__assert_fail@plt+0xa0d8>
   1bc40:	mov	r3, #0
   1bc44:	mov	r0, r9
   1bc48:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1bc4c:	str	r3, [r7]
   1bc50:	bl	1e34c <__assert_fail@plt+0xc5d8>
   1bc54:	cmp	r0, #0
   1bc58:	mov	r3, #0
   1bc5c:	ble	1be28 <__assert_fail@plt+0xa0b4>
   1bc60:	mov	r0, r3
   1bc64:	mov	r8, #1
   1bc68:	mov	r3, #2
   1bc6c:	cmp	r0, #0
   1bc70:	str	r3, [r6, #136]	; 0x88
   1bc74:	strb	r8, [r5, #3312]	; 0xcf0
   1bc78:	beq	1b57c <__assert_fail@plt+0x9808>
   1bc7c:	bl	11bb8 <__errno_location@plt>
   1bc80:	ldr	r4, [r0]
   1bc84:	mov	r2, r9
   1bc88:	mov	r1, #3
   1bc8c:	mov	r0, #0
   1bc90:	bl	282b0 <_obstack_memory_used@@Base+0x31f8>
   1bc94:	mov	r3, r0
   1bc98:	movw	r2, #63820	; 0xf94c
   1bc9c:	movt	r2, #2
   1bca0:	mov	r0, #0
   1bca4:	mov	r1, r4
   1bca8:	bl	11a8c <error@plt>
   1bcac:	b	1b57c <__assert_fail@plt+0x9808>
   1bcb0:	ldrb	r2, [r8, #1]
   1bcb4:	cmp	r2, #0
   1bcb8:	moveq	r2, r9
   1bcbc:	beq	1b8a8 <__assert_fail@plt+0x9b34>
   1bcc0:	b	1b860 <__assert_fail@plt+0x9aec>
   1bcc4:	mov	r0, #2
   1bcc8:	mov	r3, #0
   1bccc:	sub	r2, fp, #692	; 0x2b4
   1bcd0:	mov	r1, r7
   1bcd4:	str	r0, [sp]
   1bcd8:	mvn	r0, #99	; 0x63
   1bcdc:	bl	147f8 <__assert_fail@plt+0x2a84>
   1bce0:	cmp	r0, #0
   1bce4:	bne	1b630 <__assert_fail@plt+0x98bc>
   1bce8:	ldr	r3, [fp, #-676]	; 0xfffffd5c
   1bcec:	mov	r2, #1
   1bcf0:	str	r3, [r6, #124]	; 0x7c
   1bcf4:	strb	r2, [r6, #133]	; 0x85
   1bcf8:	b	1b630 <__assert_fail@plt+0x98bc>
   1bcfc:	ldr	r3, [fp, #-732]	; 0xfffffd24
   1bd00:	cmp	r3, #0
   1bd04:	beq	1bd24 <__assert_fail@plt+0x9fb0>
   1bd08:	ldrb	r3, [sl, #-4056]	; 0xfffff028
   1bd0c:	cmp	r3, #0
   1bd10:	bne	1bd24 <__assert_fail@plt+0x9fb0>
   1bd14:	mov	r3, #9
   1bd18:	ldr	r1, [r5, #3080]	; 0xc08
   1bd1c:	str	r3, [r6, #120]	; 0x78
   1bd20:	b	1b264 <__assert_fail@plt+0x94f0>
   1bd24:	mov	r3, #3
   1bd28:	ldr	r1, [r5, #3080]	; 0xc08
   1bd2c:	str	r3, [r6, #120]	; 0x78
   1bd30:	b	1b264 <__assert_fail@plt+0x94f0>
   1bd34:	ldrb	r4, [r5, #4024]	; 0xfb8
   1bd38:	ldr	sl, [r6, #40]	; 0x28
   1bd3c:	cmp	r4, #0
   1bd40:	beq	1bf88 <__assert_fail@plt+0xa214>
   1bd44:	mov	ip, #0
   1bd48:	movw	r2, #55392	; 0xd860
   1bd4c:	movt	r2, #2
   1bd50:	mvn	r3, #0
   1bd54:	mov	r1, ip
   1bd58:	mov	r0, ip
   1bd5c:	str	r2, [sp]
   1bd60:	mov	r2, #1
   1bd64:	str	sl, [sp, #8]
   1bd68:	str	ip, [sp, #12]
   1bd6c:	bl	11d5c <__snprintf_chk@plt>
   1bd70:	ldr	r3, [r5, #3320]	; 0xcf8
   1bd74:	cmp	r3, r0
   1bd78:	ldrb	r3, [r7, #205]	; 0xcd
   1bd7c:	strlt	r0, [r5, #3320]	; 0xcf8
   1bd80:	cmp	r3, #0
   1bd84:	beq	1b414 <__assert_fail@plt+0x96a0>
   1bd88:	ldrb	r4, [r5, #4024]	; 0xfb8
   1bd8c:	ldr	r7, [r6, #44]	; 0x2c
   1bd90:	cmp	r4, #0
   1bd94:	beq	1bfa8 <__assert_fail@plt+0xa234>
   1bd98:	mov	ip, #0
   1bd9c:	movw	r2, #55392	; 0xd860
   1bda0:	movt	r2, #2
   1bda4:	mvn	r3, #0
   1bda8:	mov	r1, ip
   1bdac:	mov	r0, ip
   1bdb0:	str	r2, [sp]
   1bdb4:	mov	r2, #1
   1bdb8:	str	r7, [sp, #8]
   1bdbc:	str	ip, [sp, #12]
   1bdc0:	bl	11d5c <__snprintf_chk@plt>
   1bdc4:	ldr	r3, [r5, #3324]	; 0xcfc
   1bdc8:	cmp	r3, r0
   1bdcc:	ldrb	r3, [r5, #3088]	; 0xc10
   1bdd0:	strlt	r0, [r5, #3324]	; 0xcfc
   1bdd4:	cmp	r3, #0
   1bdd8:	beq	1b420 <__assert_fail@plt+0x96ac>
   1bddc:	ldrb	r4, [r5, #4024]	; 0xfb8
   1bde0:	ldr	r7, [r6, #40]	; 0x28
   1bde4:	cmp	r4, #0
   1bde8:	beq	1bfc8 <__assert_fail@plt+0xa254>
   1bdec:	mov	ip, #0
   1bdf0:	movw	r2, #55392	; 0xd860
   1bdf4:	movt	r2, #2
   1bdf8:	mvn	r3, #0
   1bdfc:	mov	r1, ip
   1be00:	mov	r0, ip
   1be04:	str	r2, [sp]
   1be08:	mov	r2, #1
   1be0c:	str	r7, [sp, #8]
   1be10:	str	ip, [sp, #12]
   1be14:	bl	11d5c <__snprintf_chk@plt>
   1be18:	ldr	r3, [r5, #3328]	; 0xd00
   1be1c:	cmp	r3, r0
   1be20:	strlt	r0, [r5, #3328]	; 0xd00
   1be24:	b	1b420 <__assert_fail@plt+0x96ac>
   1be28:	ldr	r2, [r7]
   1be2c:	lsr	r0, r0, #31
   1be30:	sub	r3, r2, #22
   1be34:	bic	r3, r3, #16
   1be38:	cmp	r3, #0
   1be3c:	cmpne	r2, #95	; 0x5f
   1be40:	bne	1be4c <__assert_fail@plt+0xa0d8>
   1be44:	ldrd	r2, [r6, #16]
   1be48:	strd	r2, [r4]
   1be4c:	cmp	r8, #0
   1be50:	movne	r3, #1
   1be54:	bne	1bc6c <__assert_fail@plt+0x9ef8>
   1be58:	ldrb	r8, [r5, #3312]	; 0xcf0
   1be5c:	mov	r3, #0
   1be60:	b	1bc6c <__assert_fail@plt+0x9ef8>
   1be64:	str	r1, [r6, #136]	; 0x88
   1be68:	b	1bc7c <__assert_fail@plt+0x9f08>
   1be6c:	ldr	r0, [fp, #-720]	; 0xfffffd30
   1be70:	bl	11b94 <strlen@plt>
   1be74:	cmp	r9, r0
   1be78:	streq	r7, [r6, #144]	; 0x90
   1be7c:	bne	1b9c0 <__assert_fail@plt+0x9c4c>
   1be80:	b	1b110 <__assert_fail@plt+0x939c>
   1be84:	clz	r3, r4
   1be88:	cmp	r4, #0
   1be8c:	cmpne	r4, #6
   1be90:	lsr	r3, r3, #5
   1be94:	bne	1b138 <__assert_fail@plt+0x93c4>
   1be98:	b	1ba9c <__assert_fail@plt+0x9d28>
   1be9c:	movw	r1, #55176	; 0xd788
   1bea0:	movt	r1, #2
   1bea4:	bl	11d20 <strncmp@plt>
   1bea8:	cmp	r0, #0
   1beac:	bne	1b684 <__assert_fail@plt+0x9910>
   1beb0:	b	1b228 <__assert_fail@plt+0x94b4>
   1beb4:	bl	11bb8 <__errno_location@plt>
   1beb8:	mov	r3, #95	; 0x5f
   1bebc:	mov	r4, #0
   1bec0:	str	r3, [r0]
   1bec4:	b	1b6f4 <__assert_fail@plt+0x9980>
   1bec8:	ldrb	r3, [r5, #4017]	; 0xfb1
   1becc:	cmp	r3, #0
   1bed0:	beq	1ba70 <__assert_fail@plt+0x9cfc>
   1bed4:	movw	r7, #4560	; 0x11d0
   1bed8:	movt	r7, #4
   1bedc:	ldr	r2, [r7, #152]	; 0x98
   1bee0:	cmp	r2, #0
   1bee4:	beq	1bf10 <__assert_fail@plt+0xa19c>
   1bee8:	cmp	r2, #1
   1beec:	ldr	r0, [r7, #156]	; 0x9c
   1bef0:	beq	1c174 <__assert_fail@plt+0xa400>
   1bef4:	cmp	r2, #2
   1bef8:	bne	1b138 <__assert_fail@plt+0x93c4>
   1befc:	movw	r1, #55176	; 0xd788
   1bf00:	movt	r1, #2
   1bf04:	bl	11d20 <strncmp@plt>
   1bf08:	cmp	r0, #0
   1bf0c:	bne	1b138 <__assert_fail@plt+0x93c4>
   1bf10:	ldr	r2, [r7, #144]	; 0x90
   1bf14:	cmp	r2, #0
   1bf18:	beq	1bf44 <__assert_fail@plt+0xa1d0>
   1bf1c:	cmp	r2, #1
   1bf20:	ldr	r0, [r7, #148]	; 0x94
   1bf24:	beq	1c1a0 <__assert_fail@plt+0xa42c>
   1bf28:	cmp	r2, #2
   1bf2c:	bne	1b138 <__assert_fail@plt+0x93c4>
   1bf30:	movw	r1, #55176	; 0xd788
   1bf34:	movt	r1, #2
   1bf38:	bl	11d20 <strncmp@plt>
   1bf3c:	cmp	r0, #0
   1bf40:	bne	1b138 <__assert_fail@plt+0x93c4>
   1bf44:	ldr	r2, [r7, #160]	; 0xa0
   1bf48:	cmp	r2, #0
   1bf4c:	beq	1ba70 <__assert_fail@plt+0x9cfc>
   1bf50:	cmp	r2, #1
   1bf54:	ldr	r0, [r7, #164]	; 0xa4
   1bf58:	beq	1c1b0 <__assert_fail@plt+0xa43c>
   1bf5c:	cmp	r2, #2
   1bf60:	bne	1b138 <__assert_fail@plt+0x93c4>
   1bf64:	movw	r1, #55176	; 0xd788
   1bf68:	movt	r1, #2
   1bf6c:	bl	11d20 <strncmp@plt>
   1bf70:	cmp	r0, #0
   1bf74:	beq	1ba70 <__assert_fail@plt+0x9cfc>
   1bf78:	b	1b138 <__assert_fail@plt+0x93c4>
   1bf7c:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   1bf80:	mov	r7, r0
   1bf84:	b	1b60c <__assert_fail@plt+0x9898>
   1bf88:	mov	r0, sl
   1bf8c:	bl	21860 <__assert_fail@plt+0xfaec>
   1bf90:	cmp	r0, #0
   1bf94:	beq	1bd44 <__assert_fail@plt+0x9fd0>
   1bf98:	mov	r1, r4
   1bf9c:	bl	22878 <__assert_fail@plt+0x10b04>
   1bfa0:	bic	r0, r0, r0, asr #31
   1bfa4:	b	1bd70 <__assert_fail@plt+0x9ffc>
   1bfa8:	mov	r0, r7
   1bfac:	bl	21a3c <__assert_fail@plt+0xfcc8>
   1bfb0:	cmp	r0, #0
   1bfb4:	beq	1bd98 <__assert_fail@plt+0xa024>
   1bfb8:	mov	r1, r4
   1bfbc:	bl	22878 <__assert_fail@plt+0x10b04>
   1bfc0:	bic	r0, r0, r0, asr #31
   1bfc4:	b	1bdc4 <__assert_fail@plt+0xa050>
   1bfc8:	mov	r0, r7
   1bfcc:	bl	21860 <__assert_fail@plt+0xfaec>
   1bfd0:	cmp	r0, #0
   1bfd4:	beq	1bdec <__assert_fail@plt+0xa078>
   1bfd8:	mov	r1, r4
   1bfdc:	bl	22878 <__assert_fail@plt+0x10b04>
   1bfe0:	bic	r0, r0, r0, asr #31
   1bfe4:	b	1be18 <__assert_fail@plt+0xa0a4>
   1bfe8:	ldr	r4, [r6, #4]
   1bfec:	mvn	r3, #0
   1bff0:	mov	r1, #2
   1bff4:	sub	r0, fp, #692	; 0x2b4
   1bff8:	ldr	ip, [r5, #3284]	; 0xcd4
   1bffc:	mov	r2, r4
   1c000:	str	ip, [sp]
   1c004:	bl	26ff4 <_obstack_memory_used@@Base+0x1f3c>
   1c008:	ldrb	r2, [r4]
   1c00c:	mov	r8, r0
   1c010:	ldrb	r3, [fp, #-692]	; 0xfffffd4c
   1c014:	cmp	r2, r3
   1c018:	beq	1c160 <__assert_fail@plt+0xa3ec>
   1c01c:	mvn	r3, #0
   1c020:	str	r3, [r6, #144]	; 0x90
   1c024:	b	1b618 <__assert_fail@plt+0x98a4>
   1c028:	mov	r8, r1
   1c02c:	b	1bc20 <__assert_fail@plt+0x9eac>
   1c030:	ldrb	r3, [r0]
   1c034:	cmp	r3, #48	; 0x30
   1c038:	bne	1b684 <__assert_fail@plt+0x9910>
   1c03c:	b	1b228 <__assert_fail@plt+0x94b4>
   1c040:	mov	r2, #5
   1c044:	movw	r1, #55316	; 0xd814
   1c048:	movt	r1, #2
   1c04c:	movw	sl, #13096	; 0x3328
   1c050:	movt	sl, #4
   1c054:	bl	11984 <dcgettext@plt>
   1c058:	mov	r8, r0
   1c05c:	bl	11bb8 <__errno_location@plt>
   1c060:	ldr	r9, [fp, #-720]	; 0xfffffd30
   1c064:	ldr	r7, [r0]
   1c068:	mov	r0, #4
   1c06c:	mov	r1, r9
   1c070:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1c074:	mov	r3, r0
   1c078:	mov	r2, r8
   1c07c:	ldr	r0, [fp, #-732]	; 0xfffffd24
   1c080:	mov	r1, r7
   1c084:	bl	11a8c <error@plt>
   1c088:	ldr	r3, [sl, #-4080]	; 0xfffff010
   1c08c:	cmp	r3, #0
   1c090:	moveq	r3, #1
   1c094:	streq	r3, [sl, #-4080]	; 0xfffff010
   1c098:	ldr	r3, [sl, #-4088]	; 0xfffff008
   1c09c:	cmp	r3, #4
   1c0a0:	bne	1b304 <__assert_fail@plt+0x9590>
   1c0a4:	b	1b1e0 <__assert_fail@plt+0x946c>
   1c0a8:	mov	r2, #5
   1c0ac:	movw	r1, #55360	; 0xd840
   1c0b0:	movt	r1, #2
   1c0b4:	bl	11984 <dcgettext@plt>
   1c0b8:	mov	r8, r0
   1c0bc:	bl	11bb8 <__errno_location@plt>
   1c0c0:	ldr	r7, [r0]
   1c0c4:	mov	r1, r9
   1c0c8:	mov	r0, #4
   1c0cc:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1c0d0:	mov	r3, r0
   1c0d4:	mov	r2, r8
   1c0d8:	mov	r0, r4
   1c0dc:	mov	r1, r7
   1c0e0:	bl	11a8c <error@plt>
   1c0e4:	ldr	r3, [fp, #-732]	; 0xfffffd24
   1c0e8:	cmp	r3, #0
   1c0ec:	movne	r3, #2
   1c0f0:	strne	r3, [sl, #-4080]	; 0xfffff010
   1c0f4:	bne	1c108 <__assert_fail@plt+0xa394>
   1c0f8:	ldr	r3, [sl, #-4080]	; 0xfffff010
   1c0fc:	cmp	r3, #0
   1c100:	moveq	r3, #1
   1c104:	streq	r3, [sl, #-4080]	; 0xfffff010
   1c108:	ldr	r4, [r6, #4]
   1c10c:	cmp	r4, #0
   1c110:	moveq	r7, r4
   1c114:	bne	1b5b4 <__assert_fail@plt+0x9840>
   1c118:	b	1b630 <__assert_fail@plt+0x98bc>
   1c11c:	bl	11bb8 <__errno_location@plt>
   1c120:	ldr	r4, [r0]
   1c124:	sub	r3, r4, #22
   1c128:	bic	r3, r3, #16
   1c12c:	cmp	r3, #0
   1c130:	cmpne	r4, #95	; 0x5f
   1c134:	moveq	r4, #1
   1c138:	movne	r4, #0
   1c13c:	bne	1b6f4 <__assert_fail@plt+0x9980>
   1c140:	ldrd	r2, [r6, #16]
   1c144:	mov	r4, #0
   1c148:	strd	r2, [r8]
   1c14c:	b	1b6f4 <__assert_fail@plt+0x9980>
   1c150:	mov	r0, r4
   1c154:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   1c158:	mov	r7, r0
   1c15c:	b	1b60c <__assert_fail@plt+0x9898>
   1c160:	mov	r0, r4
   1c164:	bl	11b94 <strlen@plt>
   1c168:	cmp	r8, r0
   1c16c:	bne	1c01c <__assert_fail@plt+0xa2a8>
   1c170:	b	1b618 <__assert_fail@plt+0x98a4>
   1c174:	ldrb	r3, [r0]
   1c178:	cmp	r3, #48	; 0x30
   1c17c:	bne	1b138 <__assert_fail@plt+0x93c4>
   1c180:	b	1bf10 <__assert_fail@plt+0xa19c>
   1c184:	bl	11bb8 <__errno_location@plt>
   1c188:	ldr	r3, [pc, #64]	; 1c1d0 <__assert_fail@plt+0xa45c>
   1c18c:	mov	r2, #95	; 0x5f
   1c190:	mov	r7, r0
   1c194:	str	r2, [r0]
   1c198:	str	r3, [r6, #128]	; 0x80
   1c19c:	b	1b810 <__assert_fail@plt+0x9a9c>
   1c1a0:	ldrb	r3, [r0]
   1c1a4:	cmp	r3, #48	; 0x30
   1c1a8:	bne	1b138 <__assert_fail@plt+0x93c4>
   1c1ac:	b	1bf44 <__assert_fail@plt+0xa1d0>
   1c1b0:	ldrb	r3, [r0]
   1c1b4:	cmp	r3, #48	; 0x30
   1c1b8:	bne	1b138 <__assert_fail@plt+0x93c4>
   1c1bc:	b	1ba70 <__assert_fail@plt+0x9cfc>
   1c1c0:	ldrb	r3, [r0]
   1c1c4:	cmp	r3, #48	; 0x30
   1c1c8:	bne	1b138 <__assert_fail@plt+0x93c4>
   1c1cc:	b	1bb40 <__assert_fail@plt+0x9dcc>
   1c1d0:	andeq	r1, r4, r0, lsr #5
   1c1d4:	strdeq	r1, [r4], -r0
   1c1d8:	andeq	r2, r4, r8, asr #6
   1c1dc:	andeq	r2, r4, r8, asr r3
   1c1e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c1e4:	mov	r5, #0
   1c1e8:	strd	r6, [sp, #8]
   1c1ec:	strd	r8, [sp, #16]
   1c1f0:	mov	r8, r0
   1c1f4:	strd	sl, [sp, #24]
   1c1f8:	str	lr, [sp, #32]
   1c1fc:	sub	sp, sp, #708	; 0x2c4
   1c200:	str	r2, [sp, #20]
   1c204:	str	r1, [sp, #40]	; 0x28
   1c208:	bl	11bb8 <__errno_location@plt>
   1c20c:	mov	r4, r0
   1c210:	mov	r0, r8
   1c214:	str	r5, [r4]
   1c218:	bl	11aa4 <opendir@plt>
   1c21c:	subs	r7, r0, #0
   1c220:	beq	1ca08 <__assert_fail@plt+0xac94>
   1c224:	movw	r6, #4912	; 0x1330
   1c228:	movt	r6, #4
   1c22c:	ldr	r3, [r6, #3748]	; 0xea4
   1c230:	cmp	r3, #0
   1c234:	movweq	r5, #13096	; 0x3328
   1c238:	movteq	r5, #4
   1c23c:	beq	1c384 <__assert_fail@plt+0xa610>
   1c240:	bl	11cd8 <dirfd@plt>
   1c244:	cmp	r0, #0
   1c248:	blt	1c518 <__assert_fail@plt+0xa7a4>
   1c24c:	mov	r3, #256	; 0x100
   1c250:	add	r9, sp, #48	; 0x30
   1c254:	mov	r2, r9
   1c258:	movw	r1, #316	; 0x13c
   1c25c:	movt	r1, #3
   1c260:	str	r3, [sp]
   1c264:	mov	r3, #4096	; 0x1000
   1c268:	bl	147f8 <__assert_fail@plt+0x2a84>
   1c26c:	lsr	r5, r0, #31
   1c270:	cmp	r5, #0
   1c274:	bne	1c544 <__assert_fail@plt+0xa7d0>
   1c278:	ldrd	r2, [r9]
   1c27c:	mov	r0, #16
   1c280:	strd	r2, [sp, #32]
   1c284:	ldrd	r2, [r9, #96]	; 0x60
   1c288:	strd	r2, [sp, #24]
   1c28c:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   1c290:	ldrd	r2, [sp, #32]
   1c294:	mov	sl, r0
   1c298:	mov	r1, r0
   1c29c:	ldr	r0, [r6, #3748]	; 0xea4
   1c2a0:	strd	r2, [sl, #8]
   1c2a4:	ldrd	r2, [sp, #24]
   1c2a8:	strd	r2, [sl]
   1c2ac:	bl	2013c <__assert_fail@plt+0xe3c8>
   1c2b0:	cmp	r0, #0
   1c2b4:	beq	1cadc <__assert_fail@plt+0xad68>
   1c2b8:	cmp	sl, r0
   1c2bc:	beq	1c338 <__assert_fail@plt+0xa5c4>
   1c2c0:	mov	r0, sl
   1c2c4:	bl	1ee98 <__assert_fail@plt+0xd124>
   1c2c8:	mov	r2, #5
   1c2cc:	movw	r1, #55480	; 0xd8b8
   1c2d0:	movt	r1, #2
   1c2d4:	mov	r0, r5
   1c2d8:	bl	11984 <dcgettext@plt>
   1c2dc:	mov	r4, r0
   1c2e0:	mov	r2, r8
   1c2e4:	mov	r1, #3
   1c2e8:	mov	r0, r5
   1c2ec:	bl	282b0 <_obstack_memory_used@@Base+0x31f8>
   1c2f0:	mov	r3, r0
   1c2f4:	mov	r2, r4
   1c2f8:	mov	r1, r5
   1c2fc:	mov	r0, r5
   1c300:	bl	11a8c <error@plt>
   1c304:	mov	r0, r7
   1c308:	bl	11d38 <closedir@plt>
   1c30c:	movw	r3, #13096	; 0x3328
   1c310:	movt	r3, #4
   1c314:	mov	r2, #2
   1c318:	str	r2, [r3, #-4080]	; 0xfffff010
   1c31c:	add	sp, sp, #708	; 0x2c4
   1c320:	ldrd	r4, [sp]
   1c324:	ldrd	r6, [sp, #8]
   1c328:	ldrd	r8, [sp, #16]
   1c32c:	ldrd	sl, [sp, #24]
   1c330:	add	sp, sp, #32
   1c334:	pop	{pc}		; (ldr pc, [sp], #4)
   1c338:	movw	r5, #13096	; 0x3328
   1c33c:	movt	r5, #4
   1c340:	ldrd	r2, [r9]
   1c344:	ldr	r1, [r5, #-4028]	; 0xfffff044
   1c348:	ldr	r0, [r5, #-4024]	; 0xfffff048
   1c34c:	ldrd	sl, [r9, #96]	; 0x60
   1c350:	sub	r0, r0, r1
   1c354:	cmp	r0, #15
   1c358:	bhi	1c374 <__assert_fail@plt+0xa600>
   1c35c:	mov	r1, #16
   1c360:	ldr	r0, [pc, #1912]	; 1cae0 <__assert_fail@plt+0xad6c>
   1c364:	strd	r2, [sp, #24]
   1c368:	bl	24e70 <_obstack_newchunk@@Base>
   1c36c:	ldr	r1, [r5, #-4028]	; 0xfffff044
   1c370:	ldrd	r2, [sp, #24]
   1c374:	add	r0, r1, #16
   1c378:	str	r0, [r5, #-4028]	; 0xfffff044
   1c37c:	strd	sl, [r1]
   1c380:	strd	r2, [r1, #8]
   1c384:	bl	15994 <__assert_fail@plt+0x3c20>
   1c388:	ldrb	r3, [r5, #-3996]	; 0xfffff064
   1c38c:	cmp	r3, #0
   1c390:	beq	1c508 <__assert_fail@plt+0xa794>
   1c394:	movw	fp, #4560	; 0x11d0
   1c398:	movt	fp, #4
   1c39c:	ldrb	r3, [fp, #228]	; 0xe4
   1c3a0:	cmp	r3, #0
   1c3a4:	beq	1c940 <__assert_fail@plt+0xabcc>
   1c3a8:	ldr	r9, [pc, #1844]	; 1cae4 <__assert_fail@plt+0xad70>
   1c3ac:	movw	sl, #4900	; 0x1324
   1c3b0:	movt	sl, #4
   1c3b4:	mov	r2, #0
   1c3b8:	ldrb	r3, [r6, #4016]	; 0xfb0
   1c3bc:	strb	r2, [fp, #228]	; 0xe4
   1c3c0:	cmp	r3, r2
   1c3c4:	bne	1c858 <__assert_fail@plt+0xaae4>
   1c3c8:	ldrb	r3, [r6, #4092]	; 0xffc
   1c3cc:	cmp	r3, #0
   1c3d0:	bne	1c8c0 <__assert_fail@plt+0xab4c>
   1c3d4:	mov	fp, #0
   1c3d8:	ldr	r0, [sp, #40]	; 0x28
   1c3dc:	mov	r1, #1
   1c3e0:	mov	r3, #0
   1c3e4:	mvn	r2, #0
   1c3e8:	ldr	ip, [pc, #1784]	; 1cae8 <__assert_fail@plt+0xad74>
   1c3ec:	str	r1, [sp]
   1c3f0:	str	fp, [sp, #8]
   1c3f4:	cmp	r0, #0
   1c3f8:	ldr	r1, [r5, #-3992]	; 0xfffff068
   1c3fc:	moveq	r0, r8
   1c400:	str	ip, [sp, #4]
   1c404:	bl	18f9c <__assert_fail@plt+0x7228>
   1c408:	mov	r0, fp
   1c40c:	bl	1ee98 <__assert_fail@plt+0xd124>
   1c410:	ldr	sl, [sl]
   1c414:	ldr	r3, [r9, #-8]
   1c418:	ldr	r2, [r9, #-4]
   1c41c:	ldr	r1, [sl, #20]
   1c420:	adds	r3, r3, #2
   1c424:	ldr	r0, [sl, #24]
   1c428:	adc	r2, r2, #0
   1c42c:	str	r3, [r9, #-8]
   1c430:	str	r2, [r9, #-4]
   1c434:	cmp	r1, r0
   1c438:	bcs	1ca68 <__assert_fail@plt+0xacf4>
   1c43c:	add	r2, r1, #1
   1c440:	mov	r3, #58	; 0x3a
   1c444:	str	r2, [sl, #20]
   1c448:	strb	r3, [r1]
   1c44c:	ldr	r3, [sl, #20]
   1c450:	ldr	r2, [sl, #24]
   1c454:	cmp	r3, r2
   1c458:	bcs	1ca80 <__assert_fail@plt+0xad0c>
   1c45c:	add	r1, r3, #1
   1c460:	mov	r2, #10
   1c464:	str	r1, [sl, #20]
   1c468:	strb	r2, [r3]
   1c46c:	movw	r3, #55524	; 0xd8e4
   1c470:	movt	r3, #2
   1c474:	str	r3, [sp, #32]
   1c478:	movw	r3, #49168	; 0xc010
   1c47c:	movt	r3, #2
   1c480:	str	r3, [sp, #44]	; 0x2c
   1c484:	mov	r3, #0
   1c488:	str	r3, [sp, #24]
   1c48c:	str	r3, [sp, #40]	; 0x28
   1c490:	mov	r3, #0
   1c494:	mov	r0, r7
   1c498:	str	r3, [r4]
   1c49c:	bl	11cb4 <readdir64@plt>
   1c4a0:	subs	sl, r0, #0
   1c4a4:	beq	1c5b8 <__assert_fail@plt+0xa844>
   1c4a8:	ldr	r3, [r5, #-3944]	; 0xfffff098
   1c4ac:	add	r9, sl, #19
   1c4b0:	cmp	r3, #2
   1c4b4:	beq	1c730 <__assert_fail@plt+0xa9bc>
   1c4b8:	ldrb	r2, [sl, #19]
   1c4bc:	cmp	r2, #46	; 0x2e
   1c4c0:	beq	1c70c <__assert_fail@plt+0xa998>
   1c4c4:	cmp	r3, #0
   1c4c8:	bne	1c730 <__assert_fail@plt+0xa9bc>
   1c4cc:	ldr	fp, [r5, #-3936]	; 0xfffff0a0
   1c4d0:	cmp	fp, #0
   1c4d4:	bne	1c4e8 <__assert_fail@plt+0xa774>
   1c4d8:	b	1c730 <__assert_fail@plt+0xa9bc>
   1c4dc:	ldr	fp, [fp, #4]
   1c4e0:	cmp	fp, #0
   1c4e4:	beq	1c730 <__assert_fail@plt+0xa9bc>
   1c4e8:	mov	r2, #4
   1c4ec:	mov	r1, r9
   1c4f0:	ldr	r0, [fp]
   1c4f4:	bl	11ab0 <fnmatch@plt>
   1c4f8:	cmp	r0, #0
   1c4fc:	bne	1c4dc <__assert_fail@plt+0xa768>
   1c500:	bl	15e38 <__assert_fail@plt+0x40c4>
   1c504:	b	1c490 <__assert_fail@plt+0xa71c>
   1c508:	ldrb	r3, [r5, #-3995]	; 0xfffff065
   1c50c:	cmp	r3, #0
   1c510:	beq	1c46c <__assert_fail@plt+0xa6f8>
   1c514:	b	1c394 <__assert_fail@plt+0xa620>
   1c518:	mov	r0, #256	; 0x100
   1c51c:	add	r9, sp, #48	; 0x30
   1c520:	mov	r3, r5
   1c524:	mov	r2, r9
   1c528:	mov	r1, r8
   1c52c:	str	r0, [sp]
   1c530:	mvn	r0, #99	; 0x63
   1c534:	bl	147f8 <__assert_fail@plt+0x2a84>
   1c538:	lsr	r5, r0, #31
   1c53c:	cmp	r5, #0
   1c540:	beq	1c278 <__assert_fail@plt+0xa504>
   1c544:	mov	r2, #5
   1c548:	movw	r1, #55440	; 0xd890
   1c54c:	movt	r1, #2
   1c550:	mov	r0, #0
   1c554:	bl	11984 <dcgettext@plt>
   1c558:	ldr	r4, [r4]
   1c55c:	mov	r5, r0
   1c560:	mov	r1, r8
   1c564:	mov	r0, #4
   1c568:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1c56c:	mov	r3, r0
   1c570:	mov	r2, r5
   1c574:	mov	r0, #0
   1c578:	mov	r1, r4
   1c57c:	bl	11a8c <error@plt>
   1c580:	ldr	r3, [sp, #20]
   1c584:	cmp	r3, #0
   1c588:	movw	r3, #13096	; 0x3328
   1c58c:	movt	r3, #4
   1c590:	movne	r2, #2
   1c594:	strne	r2, [r3, #-4080]	; 0xfffff010
   1c598:	bne	1c5ac <__assert_fail@plt+0xa838>
   1c59c:	ldr	r2, [r3, #-4080]	; 0xfffff010
   1c5a0:	cmp	r2, #0
   1c5a4:	moveq	r2, #1
   1c5a8:	streq	r2, [r3, #-4080]	; 0xfffff010
   1c5ac:	mov	r0, r7
   1c5b0:	bl	11d38 <closedir@plt>
   1c5b4:	b	1c31c <__assert_fail@plt+0xa5a8>
   1c5b8:	ldr	r3, [r4]
   1c5bc:	cmp	r3, #0
   1c5c0:	beq	1c628 <__assert_fail@plt+0xa8b4>
   1c5c4:	mov	r2, #5
   1c5c8:	ldr	r1, [sp, #32]
   1c5cc:	bl	11984 <dcgettext@plt>
   1c5d0:	ldr	r9, [r4]
   1c5d4:	mov	fp, r0
   1c5d8:	mov	r1, r8
   1c5dc:	mov	r0, #4
   1c5e0:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1c5e4:	mov	r3, r0
   1c5e8:	mov	r2, fp
   1c5ec:	mov	r0, sl
   1c5f0:	mov	r1, r9
   1c5f4:	bl	11a8c <error@plt>
   1c5f8:	ldr	r3, [sp, #20]
   1c5fc:	cmp	r3, #0
   1c600:	movne	r3, #2
   1c604:	strne	r3, [r5, #-4080]	; 0xfffff010
   1c608:	bne	1c61c <__assert_fail@plt+0xa8a8>
   1c60c:	ldr	r3, [r5, #-4080]	; 0xfffff010
   1c610:	cmp	r3, #0
   1c614:	moveq	r3, #1
   1c618:	streq	r3, [r5, #-4080]	; 0xfffff010
   1c61c:	ldr	r3, [r4]
   1c620:	cmp	r3, #75	; 0x4b
   1c624:	beq	1c500 <__assert_fail@plt+0xa78c>
   1c628:	mov	r0, r7
   1c62c:	bl	11d38 <closedir@plt>
   1c630:	cmp	r0, #0
   1c634:	bne	1c9a4 <__assert_fail@plt+0xac30>
   1c638:	bl	16830 <__assert_fail@plt+0x4abc>
   1c63c:	ldrb	r3, [r5, #-3996]	; 0xfffff064
   1c640:	cmp	r3, #0
   1c644:	bne	1c994 <__assert_fail@plt+0xac20>
   1c648:	ldr	r3, [r6, #3080]	; 0xc08
   1c64c:	cmp	r3, #0
   1c650:	beq	1c660 <__assert_fail@plt+0xa8ec>
   1c654:	ldrb	r3, [r6, #3078]	; 0xc06
   1c658:	cmp	r3, #0
   1c65c:	beq	1c6f8 <__assert_fail@plt+0xa984>
   1c660:	ldr	r7, [pc, #1156]	; 1caec <__assert_fail@plt+0xad78>
   1c664:	mov	r2, #512	; 0x200
   1c668:	mov	r3, #0
   1c66c:	strd	r2, [sp]
   1c670:	add	r2, sp, #49	; 0x31
   1c674:	ldr	r1, [sp, #24]
   1c678:	ldrd	r4, [r7]
   1c67c:	ldr	r0, [sp, #40]	; 0x28
   1c680:	ldr	r3, [r6, #3260]	; 0xcbc
   1c684:	strd	r4, [sp, #8]
   1c688:	bl	20780 <__assert_fail@plt+0xea0c>
   1c68c:	mov	r4, r0
   1c690:	bl	11b94 <strlen@plt>
   1c694:	movw	r3, #4560	; 0x11d0
   1c698:	movt	r3, #4
   1c69c:	ldrb	r2, [r6, #4016]	; 0xfb0
   1c6a0:	mov	r1, #32
   1c6a4:	add	r5, r4, r0
   1c6a8:	ldrb	r3, [r3, #210]	; 0xd2
   1c6ac:	add	r5, r5, #1
   1c6b0:	sub	r8, r4, #1
   1c6b4:	strb	r1, [r4, #-1]
   1c6b8:	cmp	r2, #0
   1c6bc:	strb	r3, [r4, r0]
   1c6c0:	bne	1c7f4 <__assert_fail@plt+0xaa80>
   1c6c4:	mov	r2, #5
   1c6c8:	movw	r1, #55572	; 0xd914
   1c6cc:	movt	r1, #2
   1c6d0:	mov	r0, #0
   1c6d4:	bl	11984 <dcgettext@plt>
   1c6d8:	mov	r4, r0
   1c6dc:	bl	11b94 <strlen@plt>
   1c6e0:	mov	r1, r0
   1c6e4:	mov	r0, r4
   1c6e8:	bl	14c78 <__assert_fail@plt+0x2f04>
   1c6ec:	sub	r1, r5, r8
   1c6f0:	mov	r0, r8
   1c6f4:	bl	14c78 <__assert_fail@plt+0x2f04>
   1c6f8:	ldr	r3, [r6, #3296]	; 0xce0
   1c6fc:	cmp	r3, #0
   1c700:	beq	1c31c <__assert_fail@plt+0xa5a8>
   1c704:	bl	1abe0 <__assert_fail@plt+0x8e6c>
   1c708:	b	1c31c <__assert_fail@plt+0xa5a8>
   1c70c:	cmp	r3, #0
   1c710:	beq	1c500 <__assert_fail@plt+0xa78c>
   1c714:	ldrb	r3, [sl, #20]
   1c718:	cmp	r3, #46	; 0x2e
   1c71c:	moveq	r3, #2
   1c720:	movne	r3, #1
   1c724:	ldrb	r3, [r9, r3]
   1c728:	cmp	r3, #0
   1c72c:	beq	1c500 <__assert_fail@plt+0xa78c>
   1c730:	ldr	fp, [r5, #-3940]	; 0xfffff09c
   1c734:	cmp	fp, #0
   1c738:	bne	1c74c <__assert_fail@plt+0xa9d8>
   1c73c:	b	1c768 <__assert_fail@plt+0xa9f4>
   1c740:	ldr	fp, [fp, #4]
   1c744:	cmp	fp, #0
   1c748:	beq	1c768 <__assert_fail@plt+0xa9f4>
   1c74c:	mov	r2, #4
   1c750:	mov	r1, r9
   1c754:	ldr	r0, [fp]
   1c758:	bl	11ab0 <fnmatch@plt>
   1c75c:	cmp	r0, #0
   1c760:	bne	1c740 <__assert_fail@plt+0xa9cc>
   1c764:	b	1c500 <__assert_fail@plt+0xa78c>
   1c768:	ldrb	r3, [sl, #18]
   1c76c:	sub	r3, r3, #1
   1c770:	uxtb	r3, r3
   1c774:	cmp	r3, #13
   1c778:	movhi	r1, #0
   1c77c:	bhi	1c78c <__assert_fail@plt+0xaa18>
   1c780:	ldr	r2, [sp, #44]	; 0x2c
   1c784:	add	r3, r2, r3, lsl #2
   1c788:	ldr	r1, [r3, #416]	; 0x1a0
   1c78c:	mov	r3, r8
   1c790:	mov	r2, #0
   1c794:	mov	r0, r9
   1c798:	bl	1b08c <__assert_fail@plt+0x9318>
   1c79c:	ldr	r2, [sp, #40]	; 0x28
   1c7a0:	ldr	r3, [r6, #3080]	; 0xc08
   1c7a4:	adds	r2, r2, r0
   1c7a8:	str	r2, [sp, #40]	; 0x28
   1c7ac:	ldr	r2, [sp, #24]
   1c7b0:	adc	r2, r2, r1
   1c7b4:	cmp	r3, #1
   1c7b8:	str	r2, [sp, #24]
   1c7bc:	bne	1c500 <__assert_fail@plt+0xa78c>
   1c7c0:	ldr	r3, [r6, #3092]	; 0xc14
   1c7c4:	cmp	r3, #6
   1c7c8:	bne	1c500 <__assert_fail@plt+0xa78c>
   1c7cc:	ldrb	r3, [r6, #3078]	; 0xc06
   1c7d0:	cmp	r3, #0
   1c7d4:	bne	1c500 <__assert_fail@plt+0xa78c>
   1c7d8:	ldrb	r3, [r5, #-3996]	; 0xfffff064
   1c7dc:	cmp	r3, #0
   1c7e0:	bne	1c500 <__assert_fail@plt+0xa78c>
   1c7e4:	bl	16830 <__assert_fail@plt+0x4abc>
   1c7e8:	bl	1abe0 <__assert_fail@plt+0x8e6c>
   1c7ec:	bl	15994 <__assert_fail@plt+0x3c20>
   1c7f0:	b	1c500 <__assert_fail@plt+0xa78c>
   1c7f4:	movw	r3, #4900	; 0x1324
   1c7f8:	movt	r3, #4
   1c7fc:	ldr	r2, [r7, #-148]	; 0xffffff6c
   1c800:	ldr	r4, [r3]
   1c804:	ldr	r3, [r7, #-152]	; 0xffffff68
   1c808:	ldr	r0, [r4, #20]
   1c80c:	ldr	ip, [r4, #24]
   1c810:	adds	r3, r3, #2
   1c814:	adc	r2, r2, #0
   1c818:	str	r3, [r7, #-152]	; 0xffffff68
   1c81c:	str	r2, [r7, #-148]	; 0xffffff6c
   1c820:	cmp	ip, r0
   1c824:	bls	1cac8 <__assert_fail@plt+0xad54>
   1c828:	add	r3, r0, #1
   1c82c:	str	r3, [r4, #20]
   1c830:	strb	r1, [r0]
   1c834:	ldr	r3, [r4, #20]
   1c838:	ldr	r2, [r4, #24]
   1c83c:	cmp	r2, r3
   1c840:	bls	1cab8 <__assert_fail@plt+0xad44>
   1c844:	add	r1, r3, #1
   1c848:	mov	r2, #32
   1c84c:	str	r1, [r4, #20]
   1c850:	strb	r2, [r3]
   1c854:	b	1c6c4 <__assert_fail@plt+0xa950>
   1c858:	ldr	fp, [sl]
   1c85c:	ldr	r3, [r9, #-8]
   1c860:	ldr	r2, [r9, #-4]
   1c864:	ldr	r1, [fp, #20]
   1c868:	adds	r3, r3, #2
   1c86c:	ldr	r0, [fp, #24]
   1c870:	adc	r2, r2, #0
   1c874:	str	r3, [r9, #-8]
   1c878:	str	r2, [r9, #-4]
   1c87c:	cmp	r1, r0
   1c880:	bcs	1caa0 <__assert_fail@plt+0xad2c>
   1c884:	add	r2, r1, #1
   1c888:	mov	r3, #32
   1c88c:	str	r2, [fp, #20]
   1c890:	strb	r3, [r1]
   1c894:	ldr	r3, [fp, #20]
   1c898:	ldr	r2, [fp, #24]
   1c89c:	cmp	r3, r2
   1c8a0:	bcs	1ca90 <__assert_fail@plt+0xad1c>
   1c8a4:	add	r1, r3, #1
   1c8a8:	mov	r2, #32
   1c8ac:	str	r1, [fp, #20]
   1c8b0:	strb	r2, [r3]
   1c8b4:	ldrb	r3, [r6, #4092]	; 0xffc
   1c8b8:	cmp	r3, #0
   1c8bc:	beq	1c3d4 <__assert_fail@plt+0xa660>
   1c8c0:	mov	r1, #2
   1c8c4:	mov	r0, r8
   1c8c8:	bl	1d920 <__assert_fail@plt+0xbbac>
   1c8cc:	subs	fp, r0, #0
   1c8d0:	bne	1c3d8 <__assert_fail@plt+0xa664>
   1c8d4:	mov	r2, #5
   1c8d8:	movw	r1, #55316	; 0xd814
   1c8dc:	movt	r1, #2
   1c8e0:	bl	11984 <dcgettext@plt>
   1c8e4:	ldr	r3, [r4]
   1c8e8:	mov	r2, r0
   1c8ec:	mov	r1, r8
   1c8f0:	mov	r0, #4
   1c8f4:	str	r3, [sp, #24]
   1c8f8:	str	r2, [sp, #32]
   1c8fc:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1c900:	mov	r3, r0
   1c904:	mov	r0, fp
   1c908:	ldr	r1, [sp, #24]
   1c90c:	ldr	r2, [sp, #32]
   1c910:	bl	11a8c <error@plt>
   1c914:	ldr	r3, [sp, #20]
   1c918:	cmp	r3, #0
   1c91c:	movne	r3, #2
   1c920:	strne	r3, [r5, #-4080]	; 0xfffff010
   1c924:	bne	1c3d8 <__assert_fail@plt+0xa664>
   1c928:	ldr	r3, [r5, #-4080]	; 0xfffff010
   1c92c:	cmp	r3, #0
   1c930:	bne	1c3d4 <__assert_fail@plt+0xa660>
   1c934:	mov	r3, #1
   1c938:	str	r3, [r5, #-4080]	; 0xfffff010
   1c93c:	b	1c3d8 <__assert_fail@plt+0xa664>
   1c940:	ldr	r9, [pc, #412]	; 1cae4 <__assert_fail@plt+0xad70>
   1c944:	movw	sl, #4900	; 0x1324
   1c948:	movt	sl, #4
   1c94c:	ldr	r0, [sl]
   1c950:	ldr	r3, [r9, #-8]
   1c954:	ldr	r2, [r9, #-4]
   1c958:	ldr	r1, [r0, #20]
   1c95c:	adds	r3, r3, #1
   1c960:	ldr	ip, [r0, #24]
   1c964:	adc	r2, r2, #0
   1c968:	str	r3, [r9, #-8]
   1c96c:	str	r2, [r9, #-4]
   1c970:	cmp	r1, ip
   1c974:	addcc	r2, r1, #1
   1c978:	movcc	r3, #10
   1c97c:	strcc	r2, [r0, #20]
   1c980:	strbcc	r3, [r1]
   1c984:	bcc	1c3b4 <__assert_fail@plt+0xa640>
   1c988:	mov	r1, #10
   1c98c:	bl	11c48 <__overflow@plt>
   1c990:	b	1c3b4 <__assert_fail@plt+0xa640>
   1c994:	mov	r0, r8
   1c998:	mov	r1, #0
   1c99c:	bl	16dc8 <__assert_fail@plt+0x5054>
   1c9a0:	b	1c648 <__assert_fail@plt+0xa8d4>
   1c9a4:	mov	r2, #5
   1c9a8:	movw	r1, #55548	; 0xd8fc
   1c9ac:	movt	r1, #2
   1c9b0:	mov	r0, #0
   1c9b4:	bl	11984 <dcgettext@plt>
   1c9b8:	ldr	r4, [r4]
   1c9bc:	mov	r7, r0
   1c9c0:	mov	r1, r8
   1c9c4:	mov	r0, #4
   1c9c8:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1c9cc:	mov	r3, r0
   1c9d0:	mov	r2, r7
   1c9d4:	mov	r0, #0
   1c9d8:	mov	r1, r4
   1c9dc:	bl	11a8c <error@plt>
   1c9e0:	ldr	r3, [sp, #20]
   1c9e4:	cmp	r3, #0
   1c9e8:	movne	r3, #2
   1c9ec:	strne	r3, [r5, #-4080]	; 0xfffff010
   1c9f0:	bne	1c638 <__assert_fail@plt+0xa8c4>
   1c9f4:	ldr	r3, [r5, #-4080]	; 0xfffff010
   1c9f8:	cmp	r3, #0
   1c9fc:	moveq	r3, #1
   1ca00:	streq	r3, [r5, #-4080]	; 0xfffff010
   1ca04:	b	1c638 <__assert_fail@plt+0xa8c4>
   1ca08:	mov	r2, #5
   1ca0c:	movw	r1, #55412	; 0xd874
   1ca10:	movt	r1, #2
   1ca14:	bl	11984 <dcgettext@plt>
   1ca18:	ldr	r4, [r4]
   1ca1c:	mov	r5, r0
   1ca20:	mov	r1, r8
   1ca24:	mov	r0, #4
   1ca28:	bl	27730 <_obstack_memory_used@@Base+0x2678>
   1ca2c:	mov	r3, r0
   1ca30:	mov	r2, r5
   1ca34:	mov	r0, r7
   1ca38:	mov	r1, r4
   1ca3c:	bl	11a8c <error@plt>
   1ca40:	ldr	r3, [sp, #20]
   1ca44:	cmp	r3, #0
   1ca48:	movw	r3, #13096	; 0x3328
   1ca4c:	movt	r3, #4
   1ca50:	bne	1c314 <__assert_fail@plt+0xa5a0>
   1ca54:	ldr	r2, [r3, #-4080]	; 0xfffff010
   1ca58:	cmp	r2, #0
   1ca5c:	moveq	r2, #1
   1ca60:	streq	r2, [r3, #-4080]	; 0xfffff010
   1ca64:	b	1c31c <__assert_fail@plt+0xa5a8>
   1ca68:	mov	r1, #58	; 0x3a
   1ca6c:	mov	r0, sl
   1ca70:	bl	11c48 <__overflow@plt>
   1ca74:	cmn	r0, #1
   1ca78:	bne	1c44c <__assert_fail@plt+0xa6d8>
   1ca7c:	b	1c46c <__assert_fail@plt+0xa6f8>
   1ca80:	mov	r0, sl
   1ca84:	mov	r1, #10
   1ca88:	bl	11c48 <__overflow@plt>
   1ca8c:	b	1c46c <__assert_fail@plt+0xa6f8>
   1ca90:	mov	r0, fp
   1ca94:	mov	r1, #32
   1ca98:	bl	11c48 <__overflow@plt>
   1ca9c:	b	1c3c8 <__assert_fail@plt+0xa654>
   1caa0:	mov	r1, #32
   1caa4:	mov	r0, fp
   1caa8:	bl	11c48 <__overflow@plt>
   1caac:	cmn	r0, #1
   1cab0:	bne	1c894 <__assert_fail@plt+0xab20>
   1cab4:	b	1c3c8 <__assert_fail@plt+0xa654>
   1cab8:	mov	r0, r4
   1cabc:	mov	r1, #32
   1cac0:	bl	11c48 <__overflow@plt>
   1cac4:	b	1c6c4 <__assert_fail@plt+0xa950>
   1cac8:	mov	r0, r4
   1cacc:	bl	11c48 <__overflow@plt>
   1cad0:	cmn	r0, #1
   1cad4:	bne	1c834 <__assert_fail@plt+0xaac0>
   1cad8:	b	1c6c4 <__assert_fail@plt+0xa950>
   1cadc:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   1cae0:	andeq	r2, r4, r0, ror #6
   1cae4:	andeq	r1, r4, r0, ror #30
   1cae8:	muleq	r4, r4, r3
   1caec:	strdeq	r1, [r4], -r0
   1caf0:	subs	r4, r0, #0
   1caf4:	str	r7, [sp, #-12]!
   1caf8:	stmib	sp, {fp, lr}
   1cafc:	sub	sp, sp, #60	; 0x3c
   1cb00:	beq	1cb48 <__assert_fail@plt+0xadd4>
   1cb04:	movw	r3, #4896	; 0x1320
   1cb08:	movt	r3, #4
   1cb0c:	ldr	r5, [r3]
   1cb10:	mov	r2, #5
   1cb14:	movw	r1, #55592	; 0xd928
   1cb18:	movt	r1, #2
   1cb1c:	mov	r0, #0
   1cb20:	bl	11984 <dcgettext@plt>
   1cb24:	movw	r3, #9192	; 0x23e8
   1cb28:	movt	r3, #4
   1cb2c:	mov	r2, r0
   1cb30:	mov	r1, #1
   1cb34:	ldr	r3, [r3]
   1cb38:	mov	r0, r5
   1cb3c:	bl	11c18 <__fprintf_chk@plt>
   1cb40:	mov	r0, r4
   1cb44:	bl	11b70 <exit@plt>
   1cb48:	mov	r2, #5
   1cb4c:	movw	r1, #55632	; 0xd950
   1cb50:	movt	r1, #2
   1cb54:	movw	r5, #4900	; 0x1324
   1cb58:	movt	r5, #4
   1cb5c:	bl	11984 <dcgettext@plt>
   1cb60:	movw	r3, #9192	; 0x23e8
   1cb64:	movt	r3, #4
   1cb68:	mov	r1, r0
   1cb6c:	mov	r0, #1
   1cb70:	ldr	r2, [r3]
   1cb74:	bl	11bf4 <__printf_chk@plt>
   1cb78:	mov	r2, #5
   1cb7c:	movw	r1, #55668	; 0xd974
   1cb80:	movt	r1, #2
   1cb84:	mov	r0, r4
   1cb88:	bl	11984 <dcgettext@plt>
   1cb8c:	ldr	r1, [r5]
   1cb90:	bl	11864 <fputs_unlocked@plt>
   1cb94:	mov	r2, #5
   1cb98:	movw	r1, #55812	; 0xda04
   1cb9c:	movt	r1, #2
   1cba0:	mov	r0, r4
   1cba4:	bl	11984 <dcgettext@plt>
   1cba8:	ldr	r1, [r5]
   1cbac:	bl	11864 <fputs_unlocked@plt>
   1cbb0:	mov	r2, #5
   1cbb4:	movw	r1, #55888	; 0xda50
   1cbb8:	movt	r1, #2
   1cbbc:	mov	r0, r4
   1cbc0:	bl	11984 <dcgettext@plt>
   1cbc4:	ldr	r1, [r5]
   1cbc8:	bl	11864 <fputs_unlocked@plt>
   1cbcc:	mov	r2, #5
   1cbd0:	movw	r1, #56160	; 0xdb60
   1cbd4:	movt	r1, #2
   1cbd8:	mov	r0, r4
   1cbdc:	bl	11984 <dcgettext@plt>
   1cbe0:	ldr	r1, [r5]
   1cbe4:	bl	11864 <fputs_unlocked@plt>
   1cbe8:	mov	r2, #5
   1cbec:	movw	r1, #56316	; 0xdbfc
   1cbf0:	movt	r1, #2
   1cbf4:	mov	r0, r4
   1cbf8:	bl	11984 <dcgettext@plt>
   1cbfc:	ldr	r1, [r5]
   1cc00:	bl	11864 <fputs_unlocked@plt>
   1cc04:	mov	r2, #5
   1cc08:	movw	r1, #56680	; 0xdd68
   1cc0c:	movt	r1, #2
   1cc10:	mov	r0, r4
   1cc14:	bl	11984 <dcgettext@plt>
   1cc18:	ldr	r1, [r5]
   1cc1c:	bl	11864 <fputs_unlocked@plt>
   1cc20:	mov	r2, #5
   1cc24:	movw	r1, #56956	; 0xde7c
   1cc28:	movt	r1, #2
   1cc2c:	mov	r0, r4
   1cc30:	bl	11984 <dcgettext@plt>
   1cc34:	ldr	r1, [r5]
   1cc38:	bl	11864 <fputs_unlocked@plt>
   1cc3c:	mov	r2, #5
   1cc40:	movw	r1, #57372	; 0xe01c
   1cc44:	movt	r1, #2
   1cc48:	mov	r0, r4
   1cc4c:	bl	11984 <dcgettext@plt>
   1cc50:	ldr	r1, [r5]
   1cc54:	bl	11864 <fputs_unlocked@plt>
   1cc58:	mov	r2, #5
   1cc5c:	movw	r1, #57436	; 0xe05c
   1cc60:	movt	r1, #2
   1cc64:	mov	r0, r4
   1cc68:	bl	11984 <dcgettext@plt>
   1cc6c:	ldr	r1, [r5]
   1cc70:	bl	11864 <fputs_unlocked@plt>
   1cc74:	mov	r2, #5
   1cc78:	movw	r1, #57684	; 0xe154
   1cc7c:	movt	r1, #2
   1cc80:	mov	r0, r4
   1cc84:	bl	11984 <dcgettext@plt>
   1cc88:	ldr	r1, [r5]
   1cc8c:	bl	11864 <fputs_unlocked@plt>
   1cc90:	mov	r2, #5
   1cc94:	movw	r1, #57760	; 0xe1a0
   1cc98:	movt	r1, #2
   1cc9c:	mov	r0, r4
   1cca0:	bl	11984 <dcgettext@plt>
   1cca4:	ldr	r1, [r5]
   1cca8:	bl	11864 <fputs_unlocked@plt>
   1ccac:	mov	r2, #5
   1ccb0:	movw	r1, #57912	; 0xe238
   1ccb4:	movt	r1, #2
   1ccb8:	mov	r0, r4
   1ccbc:	bl	11984 <dcgettext@plt>
   1ccc0:	ldr	r1, [r5]
   1ccc4:	bl	11864 <fputs_unlocked@plt>
   1ccc8:	mov	r2, #5
   1cccc:	movw	r1, #58336	; 0xe3e0
   1ccd0:	movt	r1, #2
   1ccd4:	mov	r0, r4
   1ccd8:	bl	11984 <dcgettext@plt>
   1ccdc:	ldr	r1, [r5]
   1cce0:	bl	11864 <fputs_unlocked@plt>
   1cce4:	mov	r2, #5
   1cce8:	movw	r1, #58392	; 0xe418
   1ccec:	movt	r1, #2
   1ccf0:	mov	r0, r4
   1ccf4:	bl	11984 <dcgettext@plt>
   1ccf8:	ldr	r1, [r5]
   1ccfc:	bl	11864 <fputs_unlocked@plt>
   1cd00:	mov	r2, #5
   1cd04:	movw	r1, #58748	; 0xe57c
   1cd08:	movt	r1, #2
   1cd0c:	mov	r0, r4
   1cd10:	bl	11984 <dcgettext@plt>
   1cd14:	ldr	r1, [r5]
   1cd18:	bl	11864 <fputs_unlocked@plt>
   1cd1c:	mov	r2, #5
   1cd20:	movw	r1, #58904	; 0xe618
   1cd24:	movt	r1, #2
   1cd28:	mov	r0, r4
   1cd2c:	bl	11984 <dcgettext@plt>
   1cd30:	ldr	r1, [r5]
   1cd34:	bl	11864 <fputs_unlocked@plt>
   1cd38:	mov	r2, #5
   1cd3c:	movw	r1, #59264	; 0xe780
   1cd40:	movt	r1, #2
   1cd44:	mov	r0, r4
   1cd48:	bl	11984 <dcgettext@plt>
   1cd4c:	ldr	r1, [r5]
   1cd50:	bl	11864 <fputs_unlocked@plt>
   1cd54:	mov	r2, #5
   1cd58:	movw	r1, #59568	; 0xe8b0
   1cd5c:	movt	r1, #2
   1cd60:	mov	r0, r4
   1cd64:	bl	11984 <dcgettext@plt>
   1cd68:	ldr	r1, [r5]
   1cd6c:	bl	11864 <fputs_unlocked@plt>
   1cd70:	mov	r2, #5
   1cd74:	movw	r1, #60156	; 0xeafc
   1cd78:	movt	r1, #2
   1cd7c:	mov	r0, r4
   1cd80:	bl	11984 <dcgettext@plt>
   1cd84:	ldr	r1, [r5]
   1cd88:	bl	11864 <fputs_unlocked@plt>
   1cd8c:	mov	r2, #5
   1cd90:	movw	r1, #60356	; 0xebc4
   1cd94:	movt	r1, #2
   1cd98:	mov	r0, r4
   1cd9c:	bl	11984 <dcgettext@plt>
   1cda0:	ldr	r1, [r5]
   1cda4:	bl	11864 <fputs_unlocked@plt>
   1cda8:	mov	r2, #5
   1cdac:	movw	r1, #61000	; 0xee48
   1cdb0:	movt	r1, #2
   1cdb4:	mov	r0, r4
   1cdb8:	bl	11984 <dcgettext@plt>
   1cdbc:	ldr	r1, [r5]
   1cdc0:	bl	11864 <fputs_unlocked@plt>
   1cdc4:	mov	r2, #5
   1cdc8:	movw	r1, #61080	; 0xee98
   1cdcc:	movt	r1, #2
   1cdd0:	mov	r0, r4
   1cdd4:	bl	11984 <dcgettext@plt>
   1cdd8:	ldr	r1, [r5]
   1cddc:	bl	11864 <fputs_unlocked@plt>
   1cde0:	mov	r2, #5
   1cde4:	movw	r1, #61224	; 0xef28
   1cde8:	movt	r1, #2
   1cdec:	mov	r0, r4
   1cdf0:	bl	11984 <dcgettext@plt>
   1cdf4:	ldr	r1, [r5]
   1cdf8:	bl	11864 <fputs_unlocked@plt>
   1cdfc:	mov	r2, #5
   1ce00:	movw	r1, #61596	; 0xf09c
   1ce04:	movt	r1, #2
   1ce08:	mov	r0, r4
   1ce0c:	bl	11984 <dcgettext@plt>
   1ce10:	ldr	r1, [r5]
   1ce14:	bl	11864 <fputs_unlocked@plt>
   1ce18:	mov	r2, #5
   1ce1c:	movw	r1, #62004	; 0xf234
   1ce20:	movt	r1, #2
   1ce24:	mov	r0, r4
   1ce28:	bl	11984 <dcgettext@plt>
   1ce2c:	ldr	r1, [r5]
   1ce30:	bl	11864 <fputs_unlocked@plt>
   1ce34:	mov	r2, #5
   1ce38:	movw	r1, #62052	; 0xf264
   1ce3c:	movt	r1, #2
   1ce40:	mov	r0, r4
   1ce44:	bl	11984 <dcgettext@plt>
   1ce48:	ldr	r1, [r5]
   1ce4c:	bl	11864 <fputs_unlocked@plt>
   1ce50:	mov	r2, #5
   1ce54:	movw	r1, #62108	; 0xf29c
   1ce58:	movt	r1, #2
   1ce5c:	mov	r0, r4
   1ce60:	bl	11984 <dcgettext@plt>
   1ce64:	ldr	r1, [r5]
   1ce68:	bl	11864 <fputs_unlocked@plt>
   1ce6c:	mov	r2, #5
   1ce70:	movw	r1, #62320	; 0xf370
   1ce74:	movt	r1, #2
   1ce78:	mov	r0, r4
   1ce7c:	bl	11984 <dcgettext@plt>
   1ce80:	ldr	r1, [r5]
   1ce84:	bl	11864 <fputs_unlocked@plt>
   1ce88:	mov	r2, #5
   1ce8c:	movw	r1, #62696	; 0xf4e8
   1ce90:	movt	r1, #2
   1ce94:	mov	r0, r4
   1ce98:	bl	11984 <dcgettext@plt>
   1ce9c:	ldr	r1, [r5]
   1cea0:	bl	11864 <fputs_unlocked@plt>
   1cea4:	mov	r2, #5
   1cea8:	movw	r1, #62772	; 0xf534
   1ceac:	movt	r1, #2
   1ceb0:	mov	r0, r4
   1ceb4:	bl	11984 <dcgettext@plt>
   1ceb8:	ldr	r1, [r5]
   1cebc:	bl	11864 <fputs_unlocked@plt>
   1cec0:	mov	r2, #5
   1cec4:	movw	r1, #63060	; 0xf654
   1cec8:	movt	r1, #2
   1cecc:	mov	r0, r4
   1ced0:	bl	11984 <dcgettext@plt>
   1ced4:	ldr	r1, [r5]
   1ced8:	bl	11864 <fputs_unlocked@plt>
   1cedc:	movw	r3, #4792	; 0x12b8
   1cee0:	movt	r3, #4
   1cee4:	ldr	r2, [r3]
   1cee8:	cmp	r2, #1
   1ceec:	beq	1d04c <__assert_fail@plt+0xb2d8>
   1cef0:	movw	r3, #55584	; 0xd920
   1cef4:	movt	r3, #2
   1cef8:	cmp	r2, #2
   1cefc:	movw	r6, #65168	; 0xfe90
   1cf00:	movt	r6, #2
   1cf04:	movne	r6, r3
   1cf08:	ldr	lr, [pc, #524]	; 1d11c <__assert_fail@plt+0xb3a8>
   1cf0c:	ldr	ip, [lr]
   1cf10:	ldrd	sl, [lr, #8]
   1cf14:	ldrd	r2, [lr, #16]
   1cf18:	subs	r1, ip, #0
   1cf1c:	str	ip, [sp]
   1cf20:	ldrd	r8, [lr, #24]
   1cf24:	strd	sl, [sp, #8]
   1cf28:	ldr	r7, [lr, #4]
   1cf2c:	ldrd	sl, [lr, #32]
   1cf30:	strd	r2, [sp, #16]
   1cf34:	strd	r8, [sp, #24]
   1cf38:	ldrd	r2, [lr, #40]	; 0x28
   1cf3c:	str	r7, [sp, #4]
   1cf40:	mov	r7, sp
   1cf44:	ldrd	r8, [lr, #48]	; 0x30
   1cf48:	strd	sl, [sp, #32]
   1cf4c:	strd	r2, [sp, #40]	; 0x28
   1cf50:	strd	r8, [sp, #48]	; 0x30
   1cf54:	bne	1cf68 <__assert_fail@plt+0xb1f4>
   1cf58:	b	1cf78 <__assert_fail@plt+0xb204>
   1cf5c:	ldr	r1, [r7, #8]!
   1cf60:	cmp	r1, #0
   1cf64:	beq	1cf78 <__assert_fail@plt+0xb204>
   1cf68:	mov	r0, r6
   1cf6c:	bl	118a0 <strcmp@plt>
   1cf70:	cmp	r0, #0
   1cf74:	bne	1cf5c <__assert_fail@plt+0xb1e8>
   1cf78:	ldr	r7, [r7, #4]
   1cf7c:	movw	r1, #63212	; 0xf6ec
   1cf80:	movt	r1, #2
   1cf84:	mov	r2, #5
   1cf88:	cmp	r7, #0
   1cf8c:	beq	1d07c <__assert_fail@plt+0xb308>
   1cf90:	mov	r0, #0
   1cf94:	bl	11984 <dcgettext@plt>
   1cf98:	mov	r1, r0
   1cf9c:	movw	r3, #63236	; 0xf704
   1cfa0:	movt	r3, #2
   1cfa4:	movw	r2, #63276	; 0xf72c
   1cfa8:	movt	r2, #2
   1cfac:	mov	r0, #1
   1cfb0:	bl	11bf4 <__printf_chk@plt>
   1cfb4:	mov	r1, #0
   1cfb8:	mov	r0, #5
   1cfbc:	bl	11c54 <setlocale@plt>
   1cfc0:	cmp	r0, #0
   1cfc4:	beq	1cfe0 <__assert_fail@plt+0xb26c>
   1cfc8:	movw	r1, #63292	; 0xf73c
   1cfcc:	movt	r1, #2
   1cfd0:	mov	r2, #3
   1cfd4:	bl	11d20 <strncmp@plt>
   1cfd8:	cmp	r0, #0
   1cfdc:	bne	1d05c <__assert_fail@plt+0xb2e8>
   1cfe0:	mov	r2, #5
   1cfe4:	movw	r1, #63368	; 0xf788
   1cfe8:	movt	r1, #2
   1cfec:	mov	r0, #0
   1cff0:	bl	11984 <dcgettext@plt>
   1cff4:	mov	r1, r0
   1cff8:	mov	r3, r6
   1cffc:	movw	r2, #63236	; 0xf704
   1d000:	movt	r2, #2
   1d004:	mov	r0, #1
   1d008:	bl	11bf4 <__printf_chk@plt>
   1d00c:	mov	r2, #5
   1d010:	movw	r1, #63396	; 0xf7a4
   1d014:	movt	r1, #2
   1d018:	mov	r0, #0
   1d01c:	bl	11984 <dcgettext@plt>
   1d020:	movw	r2, #316	; 0x13c
   1d024:	movt	r2, #3
   1d028:	cmp	r6, r7
   1d02c:	movw	r3, #64564	; 0xfc34
   1d030:	movt	r3, #2
   1d034:	mov	r1, r0
   1d038:	movne	r3, r2
   1d03c:	mov	r2, r7
   1d040:	mov	r0, #1
   1d044:	bl	11bf4 <__printf_chk@plt>
   1d048:	b	1cb40 <__assert_fail@plt+0xadcc>
   1d04c:	movw	r6, #55580	; 0xd91c
   1d050:	movt	r6, #2
   1d054:	b	1cf08 <__assert_fail@plt+0xb194>
   1d058:	mov	r7, r6
   1d05c:	mov	r2, #5
   1d060:	movw	r1, #63296	; 0xf740
   1d064:	movt	r1, #2
   1d068:	mov	r0, #0
   1d06c:	bl	11984 <dcgettext@plt>
   1d070:	ldr	r1, [r5]
   1d074:	bl	11864 <fputs_unlocked@plt>
   1d078:	b	1cfe0 <__assert_fail@plt+0xb26c>
   1d07c:	mov	r0, r7
   1d080:	bl	11984 <dcgettext@plt>
   1d084:	mov	r1, r0
   1d088:	movw	r3, #63236	; 0xf704
   1d08c:	movt	r3, #2
   1d090:	movw	r2, #63276	; 0xf72c
   1d094:	movt	r2, #2
   1d098:	mov	r0, #1
   1d09c:	bl	11bf4 <__printf_chk@plt>
   1d0a0:	mov	r1, r7
   1d0a4:	mov	r0, #5
   1d0a8:	bl	11c54 <setlocale@plt>
   1d0ac:	cmp	r0, #0
   1d0b0:	beq	1d0cc <__assert_fail@plt+0xb358>
   1d0b4:	movw	r1, #63292	; 0xf73c
   1d0b8:	movt	r1, #2
   1d0bc:	mov	r2, #3
   1d0c0:	bl	11d20 <strncmp@plt>
   1d0c4:	cmp	r0, #0
   1d0c8:	bne	1d058 <__assert_fail@plt+0xb2e4>
   1d0cc:	mov	r2, #5
   1d0d0:	movw	r1, #63368	; 0xf788
   1d0d4:	movt	r1, #2
   1d0d8:	bl	11984 <dcgettext@plt>
   1d0dc:	mov	r1, r0
   1d0e0:	mov	r3, r6
   1d0e4:	movw	r2, #63236	; 0xf704
   1d0e8:	movt	r2, #2
   1d0ec:	mov	r0, #1
   1d0f0:	bl	11bf4 <__printf_chk@plt>
   1d0f4:	mov	r0, r7
   1d0f8:	movw	r1, #63396	; 0xf7a4
   1d0fc:	movt	r1, #2
   1d100:	mov	r2, #5
   1d104:	bl	11984 <dcgettext@plt>
   1d108:	mov	r7, r6
   1d10c:	movw	r3, #64564	; 0xfc34
   1d110:	movt	r3, #2
   1d114:	mov	r1, r0
   1d118:	b	1d03c <__assert_fail@plt+0xb2c8>
   1d11c:	andeq	ip, r2, r8, ror #3
   1d120:	cmp	r1, #0
   1d124:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d128:	moveq	r4, #128	; 0x80
   1d12c:	strd	r6, [sp, #8]
   1d130:	movne	r7, #1
   1d134:	moveq	r7, #0
   1d138:	str	r8, [sp, #16]
   1d13c:	mov	r8, r0
   1d140:	str	lr, [sp, #20]
   1d144:	sub	sp, sp, #128	; 0x80
   1d148:	beq	1d158 <__assert_fail@plt+0xb3e4>
   1d14c:	cmp	r1, #1024	; 0x400
   1d150:	addls	r4, r1, #1
   1d154:	movwhi	r4, #1025	; 0x401
   1d158:	cmp	r4, #128	; 0x80
   1d15c:	moveq	r0, r7
   1d160:	orrne	r0, r7, #1
   1d164:	mov	r6, sp
   1d168:	cmp	r0, #0
   1d16c:	mov	r5, r0
   1d170:	bne	1d1c8 <__assert_fail@plt+0xb454>
   1d174:	mov	r2, r4
   1d178:	mov	r1, r6
   1d17c:	mov	r0, r8
   1d180:	bl	11a08 <readlink@plt>
   1d184:	subs	r3, r0, #0
   1d188:	mov	r0, r5
   1d18c:	blt	1d1ec <__assert_fail@plt+0xb478>
   1d190:	cmp	r4, r3
   1d194:	bhi	1d210 <__assert_fail@plt+0xb49c>
   1d198:	bl	1ee98 <__assert_fail@plt+0xd124>
   1d19c:	cmn	r4, #-1073741823	; 0xc0000001
   1d1a0:	lslls	r4, r4, #1
   1d1a4:	bls	1d158 <__assert_fail@plt+0xb3e4>
   1d1a8:	cmn	r4, #-2147483646	; 0x80000002
   1d1ac:	mvn	r4, #-2147483648	; 0x80000000
   1d1b0:	bls	1d158 <__assert_fail@plt+0xb3e4>
   1d1b4:	bl	11bb8 <__errno_location@plt>
   1d1b8:	mov	r3, #12
   1d1bc:	mov	r5, #0
   1d1c0:	str	r3, [r0]
   1d1c4:	b	1d1f4 <__assert_fail@plt+0xb480>
   1d1c8:	mov	r0, r4
   1d1cc:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   1d1d0:	subs	r6, r0, #0
   1d1d4:	mov	r5, r6
   1d1d8:	bne	1d174 <__assert_fail@plt+0xb400>
   1d1dc:	bl	11bb8 <__errno_location@plt>
   1d1e0:	mov	r3, #12
   1d1e4:	str	r3, [r0]
   1d1e8:	b	1d1f4 <__assert_fail@plt+0xb480>
   1d1ec:	mov	r5, #0
   1d1f0:	bl	1ee98 <__assert_fail@plt+0xd124>
   1d1f4:	mov	r0, r5
   1d1f8:	add	sp, sp, #128	; 0x80
   1d1fc:	ldrd	r4, [sp]
   1d200:	ldrd	r6, [sp, #8]
   1d204:	ldr	r8, [sp, #16]
   1d208:	add	sp, sp, #20
   1d20c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d210:	mov	r2, #0
   1d214:	add	r7, r3, #1
   1d218:	cmp	r5, r2
   1d21c:	strb	r2, [r6, r3]
   1d220:	beq	1d240 <__assert_fail@plt+0xb4cc>
   1d224:	cmp	r4, r7
   1d228:	bls	1d1f4 <__assert_fail@plt+0xb480>
   1d22c:	mov	r1, r7
   1d230:	bl	2b5c4 <_obstack_memory_used@@Base+0x650c>
   1d234:	cmp	r0, #0
   1d238:	movne	r5, r0
   1d23c:	b	1d1f4 <__assert_fail@plt+0xb480>
   1d240:	mov	r0, r7
   1d244:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   1d248:	subs	r5, r0, #0
   1d24c:	beq	1d1f4 <__assert_fail@plt+0xb480>
   1d250:	mov	r2, r7
   1d254:	mov	r1, r6
   1d258:	bl	11930 <memcpy@plt>
   1d25c:	mov	r5, r0
   1d260:	b	1d1f4 <__assert_fail@plt+0xb480>
   1d264:	mov	r0, #1
   1d268:	b	1caf0 <__assert_fail@plt+0xad7c>
   1d26c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d270:	mov	r4, r1
   1d274:	strd	r6, [sp, #8]
   1d278:	mov	r6, r2
   1d27c:	strd	r8, [sp, #16]
   1d280:	mov	r8, r3
   1d284:	strd	sl, [sp, #24]
   1d288:	mov	sl, r0
   1d28c:	str	lr, [sp, #32]
   1d290:	sub	sp, sp, #12
   1d294:	str	r2, [sp]
   1d298:	bl	11b94 <strlen@plt>
   1d29c:	ldr	fp, [r4]
   1d2a0:	cmp	fp, #0
   1d2a4:	beq	1d3b4 <__assert_fail@plt+0xb640>
   1d2a8:	cmp	r6, #0
   1d2ac:	mov	r7, r0
   1d2b0:	beq	1d360 <__assert_fail@plt+0xb5ec>
   1d2b4:	mov	r5, #0
   1d2b8:	mvn	r9, #0
   1d2bc:	str	r5, [sp, #4]
   1d2c0:	mov	r2, r7
   1d2c4:	mov	r1, sl
   1d2c8:	mov	r0, fp
   1d2cc:	bl	11d20 <strncmp@plt>
   1d2d0:	cmp	r0, #0
   1d2d4:	mov	r0, fp
   1d2d8:	bne	1d318 <__assert_fail@plt+0xb5a4>
   1d2dc:	bl	11b94 <strlen@plt>
   1d2e0:	ldr	r3, [sp]
   1d2e4:	cmp	r0, r7
   1d2e8:	mov	r2, r8
   1d2ec:	mov	r1, r6
   1d2f0:	mla	r0, r8, r9, r3
   1d2f4:	beq	1d358 <__assert_fail@plt+0xb5e4>
   1d2f8:	cmn	r9, #1
   1d2fc:	moveq	r9, r5
   1d300:	beq	1d318 <__assert_fail@plt+0xb5a4>
   1d304:	bl	1196c <memcmp@plt>
   1d308:	ldr	r3, [sp, #4]
   1d30c:	cmp	r0, #0
   1d310:	movne	r3, #1
   1d314:	str	r3, [sp, #4]
   1d318:	ldr	fp, [r4, #4]!
   1d31c:	add	r5, r5, #1
   1d320:	add	r6, r6, r8
   1d324:	cmp	fp, #0
   1d328:	bne	1d2c0 <__assert_fail@plt+0xb54c>
   1d32c:	ldr	r3, [sp, #4]
   1d330:	cmp	r3, #0
   1d334:	mvnne	r9, #1
   1d338:	mov	r0, r9
   1d33c:	add	sp, sp, #12
   1d340:	ldrd	r4, [sp]
   1d344:	ldrd	r6, [sp, #8]
   1d348:	ldrd	r8, [sp, #16]
   1d34c:	ldrd	sl, [sp, #24]
   1d350:	add	sp, sp, #32
   1d354:	pop	{pc}		; (ldr pc, [sp], #4)
   1d358:	mov	r9, r5
   1d35c:	b	1d338 <__assert_fail@plt+0xb5c4>
   1d360:	mov	r5, r6
   1d364:	mvn	r9, #0
   1d368:	mov	r2, r7
   1d36c:	mov	r1, sl
   1d370:	mov	r0, fp
   1d374:	bl	11d20 <strncmp@plt>
   1d378:	cmp	r0, #0
   1d37c:	mov	r0, fp
   1d380:	bne	1d39c <__assert_fail@plt+0xb628>
   1d384:	bl	11b94 <strlen@plt>
   1d388:	cmp	r0, r7
   1d38c:	beq	1d358 <__assert_fail@plt+0xb5e4>
   1d390:	cmn	r9, #1
   1d394:	moveq	r9, r5
   1d398:	movne	r6, #1
   1d39c:	ldr	fp, [r4, #4]!
   1d3a0:	add	r5, r5, #1
   1d3a4:	cmp	fp, #0
   1d3a8:	bne	1d368 <__assert_fail@plt+0xb5f4>
   1d3ac:	str	r6, [sp, #4]
   1d3b0:	b	1d32c <__assert_fail@plt+0xb5b8>
   1d3b4:	mvn	r9, #0
   1d3b8:	b	1d338 <__assert_fail@plt+0xb5c4>
   1d3bc:	strd	r4, [sp, #-16]!
   1d3c0:	str	r6, [sp, #8]
   1d3c4:	mov	r6, r0
   1d3c8:	ldr	r0, [r1]
   1d3cc:	str	lr, [sp, #12]
   1d3d0:	cmp	r0, #0
   1d3d4:	beq	1d418 <__assert_fail@plt+0xb6a4>
   1d3d8:	mov	r4, r1
   1d3dc:	mov	r5, #0
   1d3e0:	b	1d3f4 <__assert_fail@plt+0xb680>
   1d3e4:	ldr	r0, [r4, #4]!
   1d3e8:	add	r5, r5, #1
   1d3ec:	cmp	r0, #0
   1d3f0:	beq	1d418 <__assert_fail@plt+0xb6a4>
   1d3f4:	mov	r1, r6
   1d3f8:	bl	118a0 <strcmp@plt>
   1d3fc:	cmp	r0, #0
   1d400:	bne	1d3e4 <__assert_fail@plt+0xb670>
   1d404:	mov	r0, r5
   1d408:	ldrd	r4, [sp]
   1d40c:	ldr	r6, [sp, #8]
   1d410:	add	sp, sp, #12
   1d414:	pop	{pc}		; (ldr pc, [sp], #4)
   1d418:	ldrd	r4, [sp]
   1d41c:	mvn	r0, #0
   1d420:	ldr	r6, [sp, #8]
   1d424:	add	sp, sp, #12
   1d428:	pop	{pc}		; (ldr pc, [sp], #4)
   1d42c:	cmn	r2, #1
   1d430:	strd	r4, [sp, #-16]!
   1d434:	mov	r5, r1
   1d438:	movweq	r1, #88	; 0x58
   1d43c:	movwne	r1, #116	; 0x74
   1d440:	str	r6, [sp, #8]
   1d444:	movteq	r1, #3
   1d448:	movtne	r1, #3
   1d44c:	str	lr, [sp, #12]
   1d450:	mov	r6, r0
   1d454:	sub	sp, sp, #8
   1d458:	mov	r2, #5
   1d45c:	mov	r0, #0
   1d460:	bl	11984 <dcgettext@plt>
   1d464:	mov	r4, r0
   1d468:	mov	r2, r5
   1d46c:	mov	r1, #8
   1d470:	mov	r0, #0
   1d474:	bl	27654 <_obstack_memory_used@@Base+0x259c>
   1d478:	mov	r5, r0
   1d47c:	mov	r1, r6
   1d480:	mov	r0, #1
   1d484:	bl	28a4c <_obstack_memory_used@@Base+0x3994>
   1d488:	mov	r1, #0
   1d48c:	mov	r3, r5
   1d490:	str	r0, [sp]
   1d494:	mov	r2, r4
   1d498:	mov	r0, r1
   1d49c:	bl	11a8c <error@plt>
   1d4a0:	add	sp, sp, #8
   1d4a4:	ldrd	r4, [sp]
   1d4a8:	ldr	r6, [sp, #8]
   1d4ac:	add	sp, sp, #12
   1d4b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d4b8:	mov	r4, r1
   1d4bc:	movw	r1, #148	; 0x94
   1d4c0:	movt	r1, #3
   1d4c4:	strd	r6, [sp, #8]
   1d4c8:	mov	r6, r0
   1d4cc:	mov	r7, r2
   1d4d0:	mov	r0, #0
   1d4d4:	strd	r8, [sp, #16]
   1d4d8:	mov	r2, #5
   1d4dc:	strd	sl, [sp, #24]
   1d4e0:	movw	sl, #4896	; 0x1320
   1d4e4:	movt	sl, #4
   1d4e8:	str	lr, [sp, #32]
   1d4ec:	sub	sp, sp, #12
   1d4f0:	bl	11984 <dcgettext@plt>
   1d4f4:	ldr	r1, [sl]
   1d4f8:	bl	11864 <fputs_unlocked@plt>
   1d4fc:	ldr	fp, [r6]
   1d500:	cmp	fp, #0
   1d504:	beq	1d5a4 <__assert_fail@plt+0xb830>
   1d508:	movw	r3, #172	; 0xac
   1d50c:	movt	r3, #3
   1d510:	mov	r9, #0
   1d514:	str	r3, [sp]
   1d518:	movw	r3, #180	; 0xb4
   1d51c:	movt	r3, #3
   1d520:	mov	r5, r9
   1d524:	str	r3, [sp, #4]
   1d528:	b	1d560 <__assert_fail@plt+0xb7ec>
   1d52c:	mov	r0, fp
   1d530:	mov	r9, r4
   1d534:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   1d538:	mov	r3, r0
   1d53c:	mov	r1, #1
   1d540:	ldr	r2, [sp]
   1d544:	mov	r0, r8
   1d548:	bl	11c18 <__fprintf_chk@plt>
   1d54c:	ldr	fp, [r6, #4]!
   1d550:	add	r5, r5, #1
   1d554:	add	r4, r4, r7
   1d558:	cmp	fp, #0
   1d55c:	beq	1d5a4 <__assert_fail@plt+0xb830>
   1d560:	cmp	r5, #0
   1d564:	mov	r1, r4
   1d568:	ldr	r8, [sl]
   1d56c:	mov	r2, r7
   1d570:	mov	r0, r9
   1d574:	beq	1d52c <__assert_fail@plt+0xb7b8>
   1d578:	bl	1196c <memcmp@plt>
   1d57c:	cmp	r0, #0
   1d580:	bne	1d52c <__assert_fail@plt+0xb7b8>
   1d584:	mov	r0, fp
   1d588:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   1d58c:	mov	r3, r0
   1d590:	mov	r1, #1
   1d594:	ldr	r2, [sp, #4]
   1d598:	mov	r0, r8
   1d59c:	bl	11c18 <__fprintf_chk@plt>
   1d5a0:	b	1d54c <__assert_fail@plt+0xb7d8>
   1d5a4:	ldr	r0, [sl]
   1d5a8:	ldr	r3, [r0, #20]
   1d5ac:	ldr	r2, [r0, #24]
   1d5b0:	cmp	r3, r2
   1d5b4:	bcs	1d5e4 <__assert_fail@plt+0xb870>
   1d5b8:	add	r1, r3, #1
   1d5bc:	mov	r2, #10
   1d5c0:	str	r1, [r0, #20]
   1d5c4:	strb	r2, [r3]
   1d5c8:	add	sp, sp, #12
   1d5cc:	ldrd	r4, [sp]
   1d5d0:	ldrd	r6, [sp, #8]
   1d5d4:	ldrd	r8, [sp, #16]
   1d5d8:	ldrd	sl, [sp, #24]
   1d5dc:	add	sp, sp, #32
   1d5e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5e4:	mov	r1, #10
   1d5e8:	add	sp, sp, #12
   1d5ec:	ldrd	r4, [sp]
   1d5f0:	ldrd	r6, [sp, #8]
   1d5f4:	ldrd	r8, [sp, #16]
   1d5f8:	ldrd	sl, [sp, #24]
   1d5fc:	ldr	lr, [sp, #32]
   1d600:	add	sp, sp, #36	; 0x24
   1d604:	b	11c48 <__overflow@plt>
   1d608:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1d60c:	mov	r5, r1
   1d610:	strd	r6, [sp, #8]
   1d614:	mov	r6, r2
   1d618:	mov	r7, r3
   1d61c:	strd	r8, [sp, #16]
   1d620:	mov	r8, r0
   1d624:	str	lr, [sp, #24]
   1d628:	sub	sp, sp, #12
   1d62c:	ldrb	r4, [sp, #48]	; 0x30
   1d630:	cmp	r4, #0
   1d634:	bne	1d6e0 <__assert_fail@plt+0xb96c>
   1d638:	ldr	r0, [r2]
   1d63c:	cmp	r0, #0
   1d640:	movne	r9, r2
   1d644:	bne	1d6c8 <__assert_fail@plt+0xb954>
   1d648:	movw	r1, #88	; 0x58
   1d64c:	movt	r1, #3
   1d650:	mov	r2, #5
   1d654:	mov	r0, #0
   1d658:	bl	11984 <dcgettext@plt>
   1d65c:	mov	r9, r0
   1d660:	mov	r2, r5
   1d664:	mov	r1, #8
   1d668:	mov	r0, #0
   1d66c:	bl	27654 <_obstack_memory_used@@Base+0x259c>
   1d670:	mov	r4, r0
   1d674:	mov	r1, r8
   1d678:	mov	r0, #1
   1d67c:	bl	28a4c <_obstack_memory_used@@Base+0x3994>
   1d680:	mov	r1, #0
   1d684:	mov	r3, r4
   1d688:	str	r0, [sp]
   1d68c:	mov	r2, r9
   1d690:	mov	r0, r1
   1d694:	bl	11a8c <error@plt>
   1d698:	mov	r0, r6
   1d69c:	mov	r1, r7
   1d6a0:	ldr	r2, [sp, #40]	; 0x28
   1d6a4:	bl	1d4b4 <__assert_fail@plt+0xb740>
   1d6a8:	ldr	r3, [sp, #44]	; 0x2c
   1d6ac:	blx	r3
   1d6b0:	mvn	r0, #0
   1d6b4:	b	1d6fc <__assert_fail@plt+0xb988>
   1d6b8:	ldr	r0, [r9, #4]!
   1d6bc:	add	r4, r4, #1
   1d6c0:	cmp	r0, #0
   1d6c4:	beq	1d648 <__assert_fail@plt+0xb8d4>
   1d6c8:	mov	r1, r5
   1d6cc:	bl	118a0 <strcmp@plt>
   1d6d0:	cmp	r0, #0
   1d6d4:	bne	1d6b8 <__assert_fail@plt+0xb944>
   1d6d8:	mov	r0, r4
   1d6dc:	b	1d6fc <__assert_fail@plt+0xb988>
   1d6e0:	mov	r2, r3
   1d6e4:	mov	r1, r6
   1d6e8:	ldr	r3, [sp, #40]	; 0x28
   1d6ec:	mov	r0, r5
   1d6f0:	bl	1d26c <__assert_fail@plt+0xb4f8>
   1d6f4:	cmp	r0, #0
   1d6f8:	blt	1d714 <__assert_fail@plt+0xb9a0>
   1d6fc:	add	sp, sp, #12
   1d700:	ldrd	r4, [sp]
   1d704:	ldrd	r6, [sp, #8]
   1d708:	ldrd	r8, [sp, #16]
   1d70c:	add	sp, sp, #24
   1d710:	pop	{pc}		; (ldr pc, [sp], #4)
   1d714:	cmn	r0, #1
   1d718:	beq	1d648 <__assert_fail@plt+0xb8d4>
   1d71c:	movw	r1, #116	; 0x74
   1d720:	movt	r1, #3
   1d724:	mov	r2, #5
   1d728:	mov	r0, #0
   1d72c:	bl	11984 <dcgettext@plt>
   1d730:	mov	r9, r0
   1d734:	b	1d660 <__assert_fail@plt+0xb8ec>
   1d738:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d73c:	strd	r6, [sp, #8]
   1d740:	ldr	r7, [r1]
   1d744:	str	r8, [sp, #16]
   1d748:	str	lr, [sp, #20]
   1d74c:	cmp	r7, #0
   1d750:	beq	1d790 <__assert_fail@plt+0xba1c>
   1d754:	mov	r6, r3
   1d758:	mov	r8, r0
   1d75c:	mov	r4, r2
   1d760:	mov	r5, r1
   1d764:	b	1d774 <__assert_fail@plt+0xba00>
   1d768:	ldr	r7, [r5, #4]!
   1d76c:	cmp	r7, #0
   1d770:	beq	1d790 <__assert_fail@plt+0xba1c>
   1d774:	mov	r1, r4
   1d778:	mov	r2, r6
   1d77c:	mov	r0, r8
   1d780:	add	r4, r4, r6
   1d784:	bl	1196c <memcmp@plt>
   1d788:	cmp	r0, #0
   1d78c:	bne	1d768 <__assert_fail@plt+0xb9f4>
   1d790:	mov	r0, r7
   1d794:	ldrd	r4, [sp]
   1d798:	ldrd	r6, [sp, #8]
   1d79c:	ldr	r8, [sp, #16]
   1d7a0:	add	sp, sp, #20
   1d7a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7a8:	ldrb	r3, [r0]
   1d7ac:	cmp	r3, #47	; 0x2f
   1d7b0:	bne	1d7c0 <__assert_fail@plt+0xba4c>
   1d7b4:	ldrb	r3, [r0, #1]!
   1d7b8:	cmp	r3, #47	; 0x2f
   1d7bc:	beq	1d7b4 <__assert_fail@plt+0xba40>
   1d7c0:	cmp	r3, #0
   1d7c4:	beq	1d7f4 <__assert_fail@plt+0xba80>
   1d7c8:	mov	r2, r0
   1d7cc:	mov	r1, #0
   1d7d0:	cmp	r3, #47	; 0x2f
   1d7d4:	moveq	r1, #1
   1d7d8:	beq	1d7e8 <__assert_fail@plt+0xba74>
   1d7dc:	cmp	r1, #0
   1d7e0:	movne	r0, r2
   1d7e4:	movne	r1, #0
   1d7e8:	ldrb	r3, [r2, #1]!
   1d7ec:	cmp	r3, #0
   1d7f0:	bne	1d7d0 <__assert_fail@plt+0xba5c>
   1d7f4:	bx	lr
   1d7f8:	str	r4, [sp, #-8]!
   1d7fc:	mov	r4, r0
   1d800:	str	lr, [sp, #4]
   1d804:	bl	11b94 <strlen@plt>
   1d808:	cmp	r0, #1
   1d80c:	bls	1d820 <__assert_fail@plt+0xbaac>
   1d810:	sub	r2, r0, #1
   1d814:	ldrb	r1, [r4, r2]
   1d818:	cmp	r1, #47	; 0x2f
   1d81c:	beq	1d82c <__assert_fail@plt+0xbab8>
   1d820:	ldr	r4, [sp]
   1d824:	add	sp, sp, #4
   1d828:	pop	{pc}		; (ldr pc, [sp], #4)
   1d82c:	cmp	r2, #1
   1d830:	beq	1d844 <__assert_fail@plt+0xbad0>
   1d834:	add	r1, r4, r0
   1d838:	ldrb	r1, [r1, #-2]
   1d83c:	cmp	r1, #47	; 0x2f
   1d840:	beq	1d854 <__assert_fail@plt+0xbae0>
   1d844:	ldr	r4, [sp]
   1d848:	add	sp, sp, #4
   1d84c:	mov	r0, r2
   1d850:	pop	{pc}		; (ldr pc, [sp], #4)
   1d854:	sub	r3, r0, #3
   1d858:	rsb	r0, r4, #1
   1d85c:	add	r3, r4, r3
   1d860:	cmp	r3, r4
   1d864:	add	r2, r0, r3
   1d868:	beq	1d844 <__assert_fail@plt+0xbad0>
   1d86c:	ldrb	r1, [r3], #-1
   1d870:	cmp	r1, #47	; 0x2f
   1d874:	bne	1d844 <__assert_fail@plt+0xbad0>
   1d878:	b	1d860 <__assert_fail@plt+0xbaec>
   1d87c:	cmp	r2, #0
   1d880:	cmpne	r0, r1
   1d884:	beq	1d918 <__assert_fail@plt+0xbba4>
   1d888:	sub	r1, r1, #1
   1d88c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d890:	sub	r4, r0, #1
   1d894:	strd	r6, [sp, #8]
   1d898:	str	lr, [sp, #16]
   1d89c:	b	1d8a8 <__assert_fail@plt+0xbb34>
   1d8a0:	cmp	r3, ip
   1d8a4:	bne	1d8fc <__assert_fail@plt+0xbb88>
   1d8a8:	ldrb	r3, [r4, #1]!
   1d8ac:	sub	ip, r3, #65	; 0x41
   1d8b0:	mov	r5, r3
   1d8b4:	cmp	ip, #25
   1d8b8:	ldrb	ip, [r1, #1]!
   1d8bc:	mvn	lr, r4
   1d8c0:	addls	r5, r3, #32
   1d8c4:	add	lr, lr, r2
   1d8c8:	uxtbls	r3, r5
   1d8cc:	sub	r7, ip, #65	; 0x41
   1d8d0:	mov	r6, ip
   1d8d4:	cmp	r7, #25
   1d8d8:	addls	r6, ip, #32
   1d8dc:	uxtbls	ip, r6
   1d8e0:	cmn	r0, lr
   1d8e4:	moveq	lr, #1
   1d8e8:	movne	lr, #0
   1d8ec:	cmp	r3, #0
   1d8f0:	moveq	lr, #1
   1d8f4:	cmp	lr, #0
   1d8f8:	beq	1d8a0 <__assert_fail@plt+0xbb2c>
   1d8fc:	uxtb	r5, r5
   1d900:	uxtb	r0, r6
   1d904:	ldrd	r6, [sp, #8]
   1d908:	sub	r0, r5, r0
   1d90c:	ldrd	r4, [sp]
   1d910:	add	sp, sp, #16
   1d914:	pop	{pc}		; (ldr pc, [sp], #4)
   1d918:	mov	r0, #0
   1d91c:	bx	lr
   1d920:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d924:	strd	r6, [sp, #8]
   1d928:	strd	sl, [sp, #24]
   1d92c:	and	fp, r1, #3
   1d930:	sub	r3, fp, #1
   1d934:	strd	r8, [sp, #16]
   1d938:	tst	r3, fp
   1d93c:	str	lr, [sp, #32]
   1d940:	sub	sp, sp, #3248	; 0xcb0
   1d944:	sub	sp, sp, #4
   1d948:	bne	1da64 <__assert_fail@plt+0xbcf0>
   1d94c:	cmp	r0, #0
   1d950:	mov	r5, r0
   1d954:	beq	1da64 <__assert_fail@plt+0xbcf0>
   1d958:	ldrb	r9, [r0]
   1d95c:	cmp	r9, #0
   1d960:	beq	1de38 <__assert_fail@plt+0xc0c4>
   1d964:	add	r3, sp, #1184	; 0x4a0
   1d968:	cmp	r9, #47	; 0x2f
   1d96c:	add	r3, r3, #8
   1d970:	mov	r6, r1
   1d974:	addne	r4, sp, #160	; 0xa0
   1d978:	mov	r1, #1024	; 0x400
   1d97c:	str	r3, [sp, #1184]	; 0x4a0
   1d980:	add	r3, sp, #160	; 0xa0
   1d984:	str	r3, [sp, #152]	; 0x98
   1d988:	add	r3, sp, #2224	; 0x8b0
   1d98c:	str	r1, [sp, #156]	; 0x9c
   1d990:	str	r1, [sp, #1188]	; 0x4a4
   1d994:	str	r3, [sp, #2216]	; 0x8a8
   1d998:	movne	r3, r4
   1d99c:	subne	r7, r3, #8
   1d9a0:	str	r1, [sp, #2220]	; 0x8ac
   1d9a4:	beq	1da78 <__assert_fail@plt+0xbd04>
   1d9a8:	mov	r0, r4
   1d9ac:	bl	11b64 <getcwd@plt>
   1d9b0:	cmp	r0, #0
   1d9b4:	bne	1dfc4 <__assert_fail@plt+0xc250>
   1d9b8:	bl	11bb8 <__errno_location@plt>
   1d9bc:	ldr	r3, [r0]
   1d9c0:	cmp	r3, #12
   1d9c4:	beq	1df88 <__assert_fail@plt+0xc214>
   1d9c8:	cmp	r3, #34	; 0x22
   1d9cc:	beq	1da48 <__assert_fail@plt+0xbcd4>
   1d9d0:	mov	r6, r4
   1d9d4:	mov	r7, #1
   1d9d8:	ldr	r0, [sp, #1184]	; 0x4a0
   1d9dc:	add	r3, sp, #1184	; 0x4a0
   1d9e0:	add	r3, r3, #8
   1d9e4:	cmp	r0, r3
   1d9e8:	beq	1d9f0 <__assert_fail@plt+0xbc7c>
   1d9ec:	bl	1ee98 <__assert_fail@plt+0xd124>
   1d9f0:	ldr	r0, [sp, #2216]	; 0x8a8
   1d9f4:	add	r3, sp, #2224	; 0x8b0
   1d9f8:	cmp	r0, r3
   1d9fc:	beq	1da04 <__assert_fail@plt+0xbc90>
   1da00:	bl	1ee98 <__assert_fail@plt+0xd124>
   1da04:	cmp	r7, #0
   1da08:	bne	1de18 <__assert_fail@plt+0xc0a4>
   1da0c:	add	r0, sp, #152	; 0x98
   1da10:	strb	r7, [r4], #1
   1da14:	sub	r1, r4, r6
   1da18:	bl	28bf0 <_obstack_memory_used@@Base+0x3b38>
   1da1c:	subs	r9, r0, #0
   1da20:	beq	1df88 <__assert_fail@plt+0xc214>
   1da24:	mov	r0, r9
   1da28:	add	sp, sp, #3248	; 0xcb0
   1da2c:	add	sp, sp, #4
   1da30:	ldrd	r4, [sp]
   1da34:	ldrd	r6, [sp, #8]
   1da38:	ldrd	r8, [sp, #16]
   1da3c:	ldrd	sl, [sp, #24]
   1da40:	add	sp, sp, #32
   1da44:	pop	{pc}		; (ldr pc, [sp], #4)
   1da48:	mov	r0, r7
   1da4c:	bl	28c60 <_obstack_memory_used@@Base+0x3ba8>
   1da50:	cmp	r0, #0
   1da54:	beq	1df88 <__assert_fail@plt+0xc214>
   1da58:	ldr	r4, [sp, #152]	; 0x98
   1da5c:	ldr	r1, [sp, #156]	; 0x9c
   1da60:	b	1d9a8 <__assert_fail@plt+0xbc34>
   1da64:	bl	11bb8 <__errno_location@plt>
   1da68:	mov	r3, #22
   1da6c:	mov	r9, #0
   1da70:	str	r3, [r0]
   1da74:	b	1da24 <__assert_fail@plt+0xbcb0>
   1da78:	and	r3, r6, #4
   1da7c:	add	r4, sp, #161	; 0xa1
   1da80:	str	r3, [sp, #12]
   1da84:	add	r3, sp, #160	; 0xa0
   1da88:	mov	r6, r3
   1da8c:	strb	r9, [sp, #160]	; 0xa0
   1da90:	mov	r3, #0
   1da94:	movw	r2, #64396	; 0xfb8c
   1da98:	movt	r2, #2
   1da9c:	str	fp, [sp, #16]
   1daa0:	str	r3, [sp, #20]
   1daa4:	strd	r2, [sp, #24]
   1daa8:	str	r3, [sp, #32]
   1daac:	movw	r3, #64316	; 0xfb3c
   1dab0:	movt	r3, #2
   1dab4:	str	r3, [sp, #36]	; 0x24
   1dab8:	movw	r3, #1876	; 0x754
   1dabc:	movt	r3, #2
   1dac0:	str	r3, [sp, #40]	; 0x28
   1dac4:	cmp	r9, #47	; 0x2f
   1dac8:	movne	r3, r9
   1dacc:	movne	r7, r5
   1dad0:	bne	1daec <__assert_fail@plt+0xbd78>
   1dad4:	ldrb	r3, [r5, #1]!
   1dad8:	cmp	r3, #47	; 0x2f
   1dadc:	beq	1dad4 <__assert_fail@plt+0xbd60>
   1dae0:	cmp	r3, #0
   1dae4:	beq	1dc64 <__assert_fail@plt+0xbef0>
   1dae8:	mov	r7, r5
   1daec:	mov	r8, r5
   1daf0:	ldrb	r9, [r5, #1]!
   1daf4:	cmp	r9, #0
   1daf8:	cmpne	r9, #47	; 0x2f
   1dafc:	bne	1daec <__assert_fail@plt+0xbd78>
   1db00:	subs	sl, r5, r7
   1db04:	beq	1dc64 <__assert_fail@plt+0xbef0>
   1db08:	cmp	sl, #1
   1db0c:	beq	1dc8c <__assert_fail@plt+0xbf18>
   1db10:	cmp	r3, #46	; 0x2e
   1db14:	cmpeq	sl, #2
   1db18:	beq	1dca0 <__assert_fail@plt+0xbf2c>
   1db1c:	ldrb	r3, [r4, #-1]
   1db20:	cmp	r3, #47	; 0x2f
   1db24:	beq	1db30 <__assert_fail@plt+0xbdbc>
   1db28:	mov	r3, #47	; 0x2f
   1db2c:	strb	r3, [r4], #1
   1db30:	ldr	r3, [sp, #156]	; 0x9c
   1db34:	add	r9, sl, #2
   1db38:	add	r3, r6, r3
   1db3c:	sub	r3, r3, r4
   1db40:	cmp	r3, r9
   1db44:	bcs	1db74 <__assert_fail@plt+0xbe00>
   1db48:	add	r0, sp, #152	; 0x98
   1db4c:	sub	r4, r4, r6
   1db50:	bl	28cf4 <_obstack_memory_used@@Base+0x3c3c>
   1db54:	cmp	r0, #0
   1db58:	beq	1df88 <__assert_fail@plt+0xc214>
   1db5c:	ldr	r6, [sp, #152]	; 0x98
   1db60:	ldr	r3, [sp, #156]	; 0x9c
   1db64:	sub	r3, r3, r4
   1db68:	add	r4, r6, r4
   1db6c:	cmp	r3, r9
   1db70:	bcc	1db48 <__assert_fail@plt+0xbdd4>
   1db74:	mov	r2, sl
   1db78:	mov	r0, r4
   1db7c:	mov	r1, r7
   1db80:	bl	11b40 <mempcpy@plt>
   1db84:	ldr	r2, [sp, #12]
   1db88:	mov	r3, #0
   1db8c:	mov	r4, r0
   1db90:	strb	r3, [r0]
   1db94:	cmp	r2, r3
   1db98:	beq	1dcd8 <__assert_fail@plt+0xbf64>
   1db9c:	ldr	r3, [sp, #16]
   1dba0:	ldrb	r9, [r8, #1]
   1dba4:	cmp	r3, #2
   1dba8:	beq	1dc5c <__assert_fail@plt+0xbee8>
   1dbac:	cmp	r9, #47	; 0x2f
   1dbb0:	bne	1dc00 <__assert_fail@plt+0xbe8c>
   1dbb4:	mov	r3, r5
   1dbb8:	ldrb	r2, [r3, #1]
   1dbbc:	add	r0, r3, #1
   1dbc0:	cmp	r2, #47	; 0x2f
   1dbc4:	moveq	r3, r0
   1dbc8:	beq	1dbb8 <__assert_fail@plt+0xbe44>
   1dbcc:	cmp	r2, #0
   1dbd0:	add	r3, r3, #2
   1dbd4:	beq	1ddc4 <__assert_fail@plt+0xc050>
   1dbd8:	cmp	r2, #46	; 0x2e
   1dbdc:	bne	1dc00 <__assert_fail@plt+0xbe8c>
   1dbe0:	ldrb	r2, [r0, #1]
   1dbe4:	cmp	r2, #0
   1dbe8:	beq	1ddc4 <__assert_fail@plt+0xc050>
   1dbec:	cmp	r2, #46	; 0x2e
   1dbf0:	beq	1df14 <__assert_fail@plt+0xc1a0>
   1dbf4:	cmp	r2, #47	; 0x2f
   1dbf8:	beq	1dbb8 <__assert_fail@plt+0xbe44>
   1dbfc:	b	1df24 <__assert_fail@plt+0xc1b0>
   1dc00:	ldr	r3, [sp, #12]
   1dc04:	cmp	r3, #0
   1dc08:	bne	1ddf0 <__assert_fail@plt+0xc07c>
   1dc0c:	bl	11bb8 <__errno_location@plt>
   1dc10:	ldr	r7, [r0]
   1dc14:	subs	r7, r7, #22
   1dc18:	movne	r7, #1
   1dc1c:	cmp	r7, #0
   1dc20:	beq	1dc58 <__assert_fail@plt+0xbee4>
   1dc24:	ldr	r3, [sp, #16]
   1dc28:	cmp	r3, #1
   1dc2c:	bne	1dc74 <__assert_fail@plt+0xbf00>
   1dc30:	bl	11bb8 <__errno_location@plt>
   1dc34:	ldr	r3, [r0]
   1dc38:	cmp	r3, #2
   1dc3c:	bne	1dc74 <__assert_fail@plt+0xbf00>
   1dc40:	mov	r0, r5
   1dc44:	ldr	r1, [sp, #24]
   1dc48:	bl	11d68 <strspn@plt>
   1dc4c:	ldrb	r3, [r5, r0]
   1dc50:	cmp	r3, #0
   1dc54:	bne	1dc74 <__assert_fail@plt+0xbf00>
   1dc58:	ldrb	r9, [r8, #1]
   1dc5c:	cmp	r9, #0
   1dc60:	bne	1dac4 <__assert_fail@plt+0xbd50>
   1dc64:	add	r3, r6, #1
   1dc68:	cmp	r4, r3
   1dc6c:	bhi	1dfac <__assert_fail@plt+0xc238>
   1dc70:	mov	r7, #0
   1dc74:	ldr	r3, [sp, #20]
   1dc78:	cmp	r3, #0
   1dc7c:	beq	1d9d8 <__assert_fail@plt+0xbc64>
   1dc80:	mov	r0, r3
   1dc84:	bl	1fc14 <__assert_fail@plt+0xdea0>
   1dc88:	b	1d9d8 <__assert_fail@plt+0xbc64>
   1dc8c:	cmp	r3, #46	; 0x2e
   1dc90:	bne	1db1c <__assert_fail@plt+0xbda8>
   1dc94:	cmp	r9, #0
   1dc98:	bne	1dac4 <__assert_fail@plt+0xbd50>
   1dc9c:	b	1dc64 <__assert_fail@plt+0xbef0>
   1dca0:	ldrb	r3, [r7, #1]
   1dca4:	cmp	r3, #46	; 0x2e
   1dca8:	bne	1db1c <__assert_fail@plt+0xbda8>
   1dcac:	add	r3, r6, #1
   1dcb0:	cmp	r4, r3
   1dcb4:	bls	1dc5c <__assert_fail@plt+0xbee8>
   1dcb8:	sub	r3, r4, #1
   1dcbc:	cmp	r3, r6
   1dcc0:	bls	1dcd0 <__assert_fail@plt+0xbf5c>
   1dcc4:	ldrb	r2, [r4, #-2]
   1dcc8:	cmp	r2, #47	; 0x2f
   1dccc:	bne	1df8c <__assert_fail@plt+0xc218>
   1dcd0:	mov	r4, r3
   1dcd4:	b	1dc5c <__assert_fail@plt+0xbee8>
   1dcd8:	add	r3, sp, #2224	; 0x8b0
   1dcdc:	sub	r9, r3, #8
   1dce0:	b	1dcf4 <__assert_fail@plt+0xbf80>
   1dce4:	mov	r0, r9
   1dce8:	bl	28c60 <_obstack_memory_used@@Base+0x3ba8>
   1dcec:	cmp	r0, #0
   1dcf0:	beq	1df88 <__assert_fail@plt+0xc214>
   1dcf4:	ldr	sl, [sp, #2216]	; 0x8a8
   1dcf8:	mov	r0, r6
   1dcfc:	ldr	fp, [sp, #2220]	; 0x8ac
   1dd00:	mov	r1, sl
   1dd04:	sub	fp, fp, #1
   1dd08:	mov	r2, fp
   1dd0c:	bl	11a08 <readlink@plt>
   1dd10:	cmp	fp, r0
   1dd14:	ble	1dce4 <__assert_fail@plt+0xbf70>
   1dd18:	cmp	r0, #0
   1dd1c:	mov	r9, r0
   1dd20:	blt	1db9c <__assert_fail@plt+0xbe28>
   1dd24:	ldr	r3, [sp, #32]
   1dd28:	cmp	r3, #19
   1dd2c:	addle	r3, r3, #1
   1dd30:	strle	r3, [sp, #32]
   1dd34:	ble	1de58 <__assert_fail@plt+0xc0e4>
   1dd38:	ldrb	r3, [r7]
   1dd3c:	cmp	r3, #0
   1dd40:	beq	1de58 <__assert_fail@plt+0xc0e4>
   1dd44:	mov	r3, #0
   1dd48:	sub	fp, r7, r5
   1dd4c:	mov	r0, #3
   1dd50:	add	r2, sp, #48	; 0x30
   1dd54:	strb	r3, [r4, fp]
   1dd58:	ldrb	r1, [r6]
   1dd5c:	ldr	r3, [sp, #36]	; 0x24
   1dd60:	cmp	r1, #0
   1dd64:	movne	r3, r6
   1dd68:	mov	r1, r3
   1dd6c:	bl	11cfc <__xstat64@plt>
   1dd70:	cmp	r0, #0
   1dd74:	bne	1ddbc <__assert_fail@plt+0xc048>
   1dd78:	ldr	r2, [sp, #20]
   1dd7c:	ldrb	r3, [r7]
   1dd80:	cmp	r2, #0
   1dd84:	strb	r3, [r4, fp]
   1dd88:	beq	1df58 <__assert_fail@plt+0xc1e4>
   1dd8c:	add	r2, sp, #48	; 0x30
   1dd90:	mov	r1, r7
   1dd94:	ldr	r0, [sp, #20]
   1dd98:	bl	1e3ec <__assert_fail@plt+0xc678>
   1dd9c:	cmp	r0, #0
   1dda0:	beq	1de48 <__assert_fail@plt+0xc0d4>
   1dda4:	ldr	r3, [sp, #16]
   1dda8:	cmp	r3, #2
   1ddac:	beq	1dc58 <__assert_fail@plt+0xbee4>
   1ddb0:	bl	11bb8 <__errno_location@plt>
   1ddb4:	mov	r3, #40	; 0x28
   1ddb8:	str	r3, [r0]
   1ddbc:	mov	r7, #1
   1ddc0:	b	1dc74 <__assert_fail@plt+0xbf00>
   1ddc4:	ldr	r3, [sp, #24]
   1ddc8:	mov	r2, #0
   1ddcc:	mov	r1, r6
   1ddd0:	mvn	r0, #99	; 0x63
   1ddd4:	ldrh	ip, [r3]
   1ddd8:	mov	r3, #512	; 0x200
   1dddc:	strh	ip, [r4]
   1dde0:	bl	1190c <faccessat@plt>
   1dde4:	adds	r7, r0, #0
   1dde8:	movne	r7, #1
   1ddec:	b	1dc1c <__assert_fail@plt+0xbea8>
   1ddf0:	cmp	r9, #0
   1ddf4:	bne	1dc5c <__assert_fail@plt+0xbee8>
   1ddf8:	mov	r2, r9
   1ddfc:	mov	r3, #512	; 0x200
   1de00:	mov	r1, r6
   1de04:	mvn	r0, #99	; 0x63
   1de08:	bl	1190c <faccessat@plt>
   1de0c:	adds	r7, r0, #0
   1de10:	movne	r7, #1
   1de14:	b	1dc1c <__assert_fail@plt+0xbea8>
   1de18:	ldr	r0, [sp, #152]	; 0x98
   1de1c:	add	r3, sp, #160	; 0xa0
   1de20:	cmp	r0, r3
   1de24:	moveq	r9, #0
   1de28:	beq	1da24 <__assert_fail@plt+0xbcb0>
   1de2c:	bl	1ee98 <__assert_fail@plt+0xd124>
   1de30:	mov	r9, #0
   1de34:	b	1da24 <__assert_fail@plt+0xbcb0>
   1de38:	bl	11bb8 <__errno_location@plt>
   1de3c:	mov	r3, #2
   1de40:	str	r3, [r0]
   1de44:	b	1da24 <__assert_fail@plt+0xbcb0>
   1de48:	add	r2, sp, #48	; 0x30
   1de4c:	mov	r1, r7
   1de50:	ldr	r0, [sp, #20]
   1de54:	bl	1e354 <__assert_fail@plt+0xc5e0>
   1de58:	ldr	r2, [sp, #28]
   1de5c:	mov	r3, #0
   1de60:	mov	r0, r5
   1de64:	strb	r3, [sl, r9]
   1de68:	ldr	fp, [sp, #1184]	; 0x4a0
   1de6c:	cmp	r2, r3
   1de70:	beq	1df34 <__assert_fail@plt+0xc1c0>
   1de74:	sub	r3, r5, fp
   1de78:	str	r3, [sp, #44]	; 0x2c
   1de7c:	bl	11b94 <strlen@plt>
   1de80:	ldr	r2, [sp, #1188]	; 0x4a4
   1de84:	add	r7, r0, r9
   1de88:	mov	r8, r0
   1de8c:	cmp	r7, r2
   1de90:	bcc	1dec0 <__assert_fail@plt+0xc14c>
   1de94:	add	r0, sp, #1184	; 0x4a0
   1de98:	bl	28cf4 <_obstack_memory_used@@Base+0x3c3c>
   1de9c:	cmp	r0, #0
   1dea0:	beq	1df88 <__assert_fail@plt+0xc214>
   1dea4:	ldr	r3, [sp, #1188]	; 0x4a4
   1dea8:	cmp	r3, r7
   1deac:	bls	1de94 <__assert_fail@plt+0xc120>
   1deb0:	ldr	r3, [sp, #28]
   1deb4:	ldr	fp, [sp, #1184]	; 0x4a0
   1deb8:	cmp	r3, #0
   1debc:	beq	1dec8 <__assert_fail@plt+0xc154>
   1dec0:	ldr	r3, [sp, #44]	; 0x2c
   1dec4:	add	r5, fp, r3
   1dec8:	mov	r1, r5
   1decc:	add	r2, r8, #1
   1ded0:	add	r0, fp, r9
   1ded4:	bl	118f4 <memmove@plt>
   1ded8:	mov	r2, r9
   1dedc:	mov	r1, sl
   1dee0:	mov	r0, fp
   1dee4:	bl	11930 <memcpy@plt>
   1dee8:	ldrb	r3, [sl]
   1deec:	mov	r5, r0
   1def0:	add	r2, r6, #1
   1def4:	cmp	r3, #47	; 0x2f
   1def8:	beq	1e050 <__assert_fail@plt+0xc2dc>
   1defc:	cmp	r4, r2
   1df00:	ldrb	r9, [r0]
   1df04:	bhi	1e014 <__assert_fail@plt+0xc2a0>
   1df08:	mov	r3, #1
   1df0c:	str	r3, [sp, #28]
   1df10:	b	1dc5c <__assert_fail@plt+0xbee8>
   1df14:	ldrb	r3, [r0, #2]
   1df18:	cmp	r3, #47	; 0x2f
   1df1c:	cmpne	r3, #0
   1df20:	beq	1ddc4 <__assert_fail@plt+0xc050>
   1df24:	ldr	r3, [sp, #12]
   1df28:	cmp	r3, #0
   1df2c:	beq	1dc0c <__assert_fail@plt+0xbe98>
   1df30:	b	1dc5c <__assert_fail@plt+0xbee8>
   1df34:	bl	11b94 <strlen@plt>
   1df38:	ldr	r2, [sp, #1188]	; 0x4a4
   1df3c:	add	r7, r9, r0
   1df40:	mov	r8, r0
   1df44:	cmp	r7, r2
   1df48:	bcc	1dec8 <__assert_fail@plt+0xc154>
   1df4c:	ldr	r3, [sp, #28]
   1df50:	str	r3, [sp, #44]	; 0x2c
   1df54:	b	1de94 <__assert_fail@plt+0xc120>
   1df58:	ldr	ip, [sp, #40]	; 0x28
   1df5c:	mov	r1, r2
   1df60:	movw	r3, #1768	; 0x6e8
   1df64:	movt	r3, #2
   1df68:	movw	r2, #1696	; 0x6a0
   1df6c:	movt	r2, #2
   1df70:	mov	r0, #7
   1df74:	str	ip, [sp]
   1df78:	bl	1f8d4 <__assert_fail@plt+0xdb60>
   1df7c:	subs	r3, r0, #0
   1df80:	str	r3, [sp, #20]
   1df84:	bne	1dd8c <__assert_fail@plt+0xc018>
   1df88:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   1df8c:	sub	r3, r4, #2
   1df90:	cmp	r3, r6
   1df94:	mov	r4, r3
   1df98:	beq	1dc5c <__assert_fail@plt+0xbee8>
   1df9c:	ldrb	r2, [r3, #-1]!
   1dfa0:	cmp	r2, #47	; 0x2f
   1dfa4:	beq	1dc5c <__assert_fail@plt+0xbee8>
   1dfa8:	b	1df90 <__assert_fail@plt+0xc21c>
   1dfac:	ldrb	r3, [r4, #-1]
   1dfb0:	cmp	r3, #47	; 0x2f
   1dfb4:	bne	1dc70 <__assert_fail@plt+0xbefc>
   1dfb8:	sub	r4, r4, #1
   1dfbc:	mov	r7, #0
   1dfc0:	b	1dc74 <__assert_fail@plt+0xbf00>
   1dfc4:	mov	r0, r4
   1dfc8:	mov	r1, #0
   1dfcc:	bl	119d8 <rawmemchr@plt>
   1dfd0:	ldrb	r9, [r5]
   1dfd4:	and	r3, r6, #4
   1dfd8:	str	r3, [sp, #12]
   1dfdc:	cmp	r9, #0
   1dfe0:	movne	r6, r4
   1dfe4:	movne	r4, r0
   1dfe8:	bne	1da90 <__assert_fail@plt+0xbd1c>
   1dfec:	add	r3, r4, #1
   1dff0:	cmp	r0, r3
   1dff4:	bls	1e004 <__assert_fail@plt+0xc290>
   1dff8:	ldrb	r3, [r0, #-1]
   1dffc:	cmp	r3, #47	; 0x2f
   1e000:	beq	1e078 <__assert_fail@plt+0xc304>
   1e004:	mov	r6, r4
   1e008:	mov	r7, r9
   1e00c:	mov	r4, r0
   1e010:	b	1d9d8 <__assert_fail@plt+0xbc64>
   1e014:	sub	r3, r4, #1
   1e018:	cmp	r3, r6
   1e01c:	bls	1e068 <__assert_fail@plt+0xc2f4>
   1e020:	ldrb	r2, [r4, #-2]
   1e024:	cmp	r2, #47	; 0x2f
   1e028:	beq	1e068 <__assert_fail@plt+0xc2f4>
   1e02c:	sub	r3, r4, #2
   1e030:	cmp	r6, r3
   1e034:	mov	r4, r3
   1e038:	beq	1df08 <__assert_fail@plt+0xc194>
   1e03c:	ldrb	r2, [r3, #-1]
   1e040:	sub	r3, r3, #1
   1e044:	cmp	r2, #47	; 0x2f
   1e048:	beq	1df08 <__assert_fail@plt+0xc194>
   1e04c:	b	1e030 <__assert_fail@plt+0xc2bc>
   1e050:	mov	r4, r2
   1e054:	mov	r2, #1
   1e058:	strb	r3, [r6]
   1e05c:	ldrb	r9, [r0]
   1e060:	str	r2, [sp, #28]
   1e064:	b	1dc5c <__assert_fail@plt+0xbee8>
   1e068:	mov	r4, r3
   1e06c:	mov	r3, #1
   1e070:	str	r3, [sp, #28]
   1e074:	b	1dc5c <__assert_fail@plt+0xbee8>
   1e078:	mov	r6, r4
   1e07c:	mov	r4, r0
   1e080:	str	r9, [sp, #20]
   1e084:	b	1dfb8 <__assert_fail@plt+0xc244>
   1e088:	movw	r3, #9168	; 0x23d0
   1e08c:	movt	r3, #4
   1e090:	str	r0, [r3]
   1e094:	bx	lr
   1e098:	movw	r3, #9168	; 0x23d0
   1e09c:	movt	r3, #4
   1e0a0:	strb	r0, [r3, #4]
   1e0a4:	bx	lr
   1e0a8:	movw	r3, #4900	; 0x1324
   1e0ac:	movt	r3, #4
   1e0b0:	strd	r4, [sp, #-16]!
   1e0b4:	ldr	r0, [r3]
   1e0b8:	str	r6, [sp, #8]
   1e0bc:	str	lr, [sp, #12]
   1e0c0:	sub	sp, sp, #8
   1e0c4:	bl	2b61c <_obstack_memory_used@@Base+0x6564>
   1e0c8:	cmp	r0, #0
   1e0cc:	beq	1e0f8 <__assert_fail@plt+0xc384>
   1e0d0:	movw	r4, #9168	; 0x23d0
   1e0d4:	movt	r4, #4
   1e0d8:	ldrb	r6, [r4, #4]
   1e0dc:	bl	11bb8 <__errno_location@plt>
   1e0e0:	mov	r5, r0
   1e0e4:	cmp	r6, #0
   1e0e8:	beq	1e124 <__assert_fail@plt+0xc3b0>
   1e0ec:	ldr	r3, [r0]
   1e0f0:	cmp	r3, #32
   1e0f4:	bne	1e124 <__assert_fail@plt+0xc3b0>
   1e0f8:	movw	r3, #4896	; 0x1320
   1e0fc:	movt	r3, #4
   1e100:	ldr	r0, [r3]
   1e104:	bl	2b61c <_obstack_memory_used@@Base+0x6564>
   1e108:	cmp	r0, #0
   1e10c:	bne	1e16c <__assert_fail@plt+0xc3f8>
   1e110:	add	sp, sp, #8
   1e114:	ldrd	r4, [sp]
   1e118:	ldr	r6, [sp, #8]
   1e11c:	add	sp, sp, #12
   1e120:	pop	{pc}		; (ldr pc, [sp], #4)
   1e124:	movw	r1, #188	; 0xbc
   1e128:	movt	r1, #3
   1e12c:	mov	r2, #5
   1e130:	mov	r0, #0
   1e134:	bl	11984 <dcgettext@plt>
   1e138:	mov	r6, r0
   1e13c:	ldr	r0, [r4]
   1e140:	cmp	r0, #0
   1e144:	beq	1e17c <__assert_fail@plt+0xc408>
   1e148:	ldr	r4, [r5]
   1e14c:	bl	27ee0 <_obstack_memory_used@@Base+0x2e28>
   1e150:	mov	r3, r0
   1e154:	movw	r2, #63560	; 0xf848
   1e158:	movt	r2, #2
   1e15c:	mov	r0, #0
   1e160:	str	r6, [sp]
   1e164:	mov	r1, r4
   1e168:	bl	11a8c <error@plt>
   1e16c:	movw	r3, #4804	; 0x12c4
   1e170:	movt	r3, #4
   1e174:	ldr	r0, [r3]
   1e178:	bl	11924 <_exit@plt>
   1e17c:	mov	r3, r6
   1e180:	movw	r2, #63820	; 0xf94c
   1e184:	movt	r2, #2
   1e188:	ldr	r1, [r5]
   1e18c:	bl	11a8c <error@plt>
   1e190:	b	1e16c <__assert_fail@plt+0xc3f8>
   1e194:	strd	r4, [sp, #-16]!
   1e198:	mov	r4, r0
   1e19c:	str	r6, [sp, #8]
   1e1a0:	str	lr, [sp, #12]
   1e1a4:	ldrb	ip, [r0]
   1e1a8:	sub	r5, ip, #47	; 0x2f
   1e1ac:	clz	r5, r5
   1e1b0:	bl	1d7a8 <__assert_fail@plt+0xba34>
   1e1b4:	lsr	r5, r5, #5
   1e1b8:	sub	r0, r0, r4
   1e1bc:	cmp	r0, r5
   1e1c0:	bls	1e21c <__assert_fail@plt+0xc4a8>
   1e1c4:	sub	r3, r0, #1
   1e1c8:	ldrb	r2, [r4, r3]
   1e1cc:	cmp	r2, #47	; 0x2f
   1e1d0:	bne	1e21c <__assert_fail@plt+0xc4a8>
   1e1d4:	cmp	r3, r5
   1e1d8:	bls	1e22c <__assert_fail@plt+0xc4b8>
   1e1dc:	add	r2, r4, r0
   1e1e0:	ldrb	r2, [r2, #-2]
   1e1e4:	cmp	r2, #47	; 0x2f
   1e1e8:	bne	1e22c <__assert_fail@plt+0xc4b8>
   1e1ec:	sub	r0, r0, #3
   1e1f0:	sub	ip, r4, #1
   1e1f4:	add	r3, r4, r0
   1e1f8:	add	ip, ip, r5
   1e1fc:	rsb	r2, r4, #1
   1e200:	b	1e210 <__assert_fail@plt+0xc49c>
   1e204:	ldrb	r1, [r3], #-1
   1e208:	cmp	r1, #47	; 0x2f
   1e20c:	bne	1e21c <__assert_fail@plt+0xc4a8>
   1e210:	cmp	r3, ip
   1e214:	add	r0, r2, r3
   1e218:	bne	1e204 <__assert_fail@plt+0xc490>
   1e21c:	ldrd	r4, [sp]
   1e220:	ldr	r6, [sp, #8]
   1e224:	add	sp, sp, #12
   1e228:	pop	{pc}		; (ldr pc, [sp], #4)
   1e22c:	mov	r0, r3
   1e230:	b	1e21c <__assert_fail@plt+0xc4a8>
   1e234:	strd	r4, [sp, #-16]!
   1e238:	mov	r5, r0
   1e23c:	str	r6, [sp, #8]
   1e240:	str	lr, [sp, #12]
   1e244:	ldrb	r6, [r0]
   1e248:	bl	1d7a8 <__assert_fail@plt+0xba34>
   1e24c:	sub	r4, r0, r5
   1e250:	sub	r6, r6, #47	; 0x2f
   1e254:	clz	r6, r6
   1e258:	lsr	r6, r6, #5
   1e25c:	cmp	r6, r4
   1e260:	bcs	1e2bc <__assert_fail@plt+0xc548>
   1e264:	sub	r3, r4, #1
   1e268:	ldrb	r2, [r5, r3]
   1e26c:	cmp	r2, #47	; 0x2f
   1e270:	bne	1e314 <__assert_fail@plt+0xc5a0>
   1e274:	cmp	r6, r3
   1e278:	bcs	1e344 <__assert_fail@plt+0xc5d0>
   1e27c:	add	r2, r5, r4
   1e280:	ldrb	r2, [r2, #-2]
   1e284:	cmp	r2, #47	; 0x2f
   1e288:	bne	1e310 <__assert_fail@plt+0xc59c>
   1e28c:	sub	r4, r4, #3
   1e290:	sub	r2, r5, #1
   1e294:	add	r3, r5, r4
   1e298:	add	r6, r2, r6
   1e29c:	rsb	r1, r5, #1
   1e2a0:	b	1e2b0 <__assert_fail@plt+0xc53c>
   1e2a4:	ldrb	r2, [r3], #-1
   1e2a8:	cmp	r2, #47	; 0x2f
   1e2ac:	bne	1e314 <__assert_fail@plt+0xc5a0>
   1e2b0:	cmp	r3, r6
   1e2b4:	add	r4, r1, r3
   1e2b8:	bne	1e2a4 <__assert_fail@plt+0xc530>
   1e2bc:	add	r0, r4, #1
   1e2c0:	cmp	r4, #0
   1e2c4:	addeq	r0, r0, #1
   1e2c8:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   1e2cc:	subs	r6, r0, #0
   1e2d0:	beq	1e33c <__assert_fail@plt+0xc5c8>
   1e2d4:	mov	r1, r5
   1e2d8:	mov	r2, r4
   1e2dc:	bl	11930 <memcpy@plt>
   1e2e0:	cmp	r4, #0
   1e2e4:	bne	1e2f4 <__assert_fail@plt+0xc580>
   1e2e8:	mov	r3, #46	; 0x2e
   1e2ec:	mov	r4, #1
   1e2f0:	strb	r3, [r6]
   1e2f4:	mov	r3, #0
   1e2f8:	strb	r3, [r6, r4]
   1e2fc:	mov	r0, r6
   1e300:	ldrd	r4, [sp]
   1e304:	ldr	r6, [sp, #8]
   1e308:	add	sp, sp, #12
   1e30c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e310:	mov	r4, r3
   1e314:	add	r0, r4, #1
   1e318:	cmp	r4, #0
   1e31c:	addeq	r0, r0, #1
   1e320:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   1e324:	subs	r6, r0, #0
   1e328:	beq	1e33c <__assert_fail@plt+0xc5c8>
   1e32c:	mov	r1, r5
   1e330:	mov	r2, r4
   1e334:	bl	11930 <memcpy@plt>
   1e338:	b	1e2f4 <__assert_fail@plt+0xc580>
   1e33c:	mov	r6, #0
   1e340:	b	1e2fc <__assert_fail@plt+0xc588>
   1e344:	mov	r4, r3
   1e348:	b	1e2bc <__assert_fail@plt+0xc548>
   1e34c:	mov	r0, #0
   1e350:	bx	lr
   1e354:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e358:	strd	r6, [sp, #8]
   1e35c:	str	r8, [sp, #16]
   1e360:	subs	r8, r0, #0
   1e364:	str	lr, [sp, #20]
   1e368:	beq	1e3d4 <__assert_fail@plt+0xc660>
   1e36c:	mov	r0, #24
   1e370:	mov	r4, r1
   1e374:	mov	r7, r2
   1e378:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   1e37c:	mov	r6, r0
   1e380:	mov	r0, r4
   1e384:	bl	2a2fc <_obstack_memory_used@@Base+0x5244>
   1e388:	ldrd	r4, [r7]
   1e38c:	mov	r1, r6
   1e390:	str	r0, [r6]
   1e394:	mov	r0, r8
   1e398:	ldrd	r2, [r7, #96]	; 0x60
   1e39c:	strd	r2, [r6, #8]
   1e3a0:	strd	r4, [r6, #16]
   1e3a4:	bl	2013c <__assert_fail@plt+0xe3c8>
   1e3a8:	cmp	r0, #0
   1e3ac:	beq	1e3e8 <__assert_fail@plt+0xc674>
   1e3b0:	cmp	r6, r0
   1e3b4:	beq	1e3d4 <__assert_fail@plt+0xc660>
   1e3b8:	mov	r0, r6
   1e3bc:	ldrd	r4, [sp]
   1e3c0:	ldrd	r6, [sp, #8]
   1e3c4:	ldr	r8, [sp, #16]
   1e3c8:	ldr	lr, [sp, #20]
   1e3cc:	add	sp, sp, #24
   1e3d0:	b	20754 <__assert_fail@plt+0xe9e0>
   1e3d4:	ldrd	r4, [sp]
   1e3d8:	ldrd	r6, [sp, #8]
   1e3dc:	ldr	r8, [sp, #16]
   1e3e0:	add	sp, sp, #20
   1e3e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e3e8:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   1e3ec:	subs	r3, r0, #0
   1e3f0:	beq	1e438 <__assert_fail@plt+0xc6c4>
   1e3f4:	mov	r3, r1
   1e3f8:	strd	r4, [sp, #-12]!
   1e3fc:	ldrd	r4, [r2, #96]	; 0x60
   1e400:	str	lr, [sp, #8]
   1e404:	sub	sp, sp, #28
   1e408:	mov	r1, sp
   1e40c:	str	r3, [sp]
   1e410:	ldrd	r2, [r2]
   1e414:	strd	r4, [sp, #8]
   1e418:	strd	r2, [sp, #16]
   1e41c:	bl	1f550 <__assert_fail@plt+0xd7dc>
   1e420:	adds	r0, r0, #0
   1e424:	movne	r0, #1
   1e428:	add	sp, sp, #28
   1e42c:	ldrd	r4, [sp]
   1e430:	add	sp, sp, #8
   1e434:	pop	{pc}		; (ldr pc, [sp], #4)
   1e438:	mov	r0, r3
   1e43c:	bx	lr
   1e440:	and	r3, r0, #61440	; 0xf000
   1e444:	cmp	r3, #32768	; 0x8000
   1e448:	moveq	r2, #45	; 0x2d
   1e44c:	beq	1e498 <__assert_fail@plt+0xc724>
   1e450:	cmp	r3, #16384	; 0x4000
   1e454:	moveq	r2, #100	; 0x64
   1e458:	beq	1e498 <__assert_fail@plt+0xc724>
   1e45c:	cmp	r3, #24576	; 0x6000
   1e460:	moveq	r2, #98	; 0x62
   1e464:	beq	1e498 <__assert_fail@plt+0xc724>
   1e468:	cmp	r3, #8192	; 0x2000
   1e46c:	moveq	r2, #99	; 0x63
   1e470:	beq	1e498 <__assert_fail@plt+0xc724>
   1e474:	cmp	r3, #40960	; 0xa000
   1e478:	moveq	r2, #108	; 0x6c
   1e47c:	beq	1e498 <__assert_fail@plt+0xc724>
   1e480:	cmp	r3, #4096	; 0x1000
   1e484:	moveq	r2, #112	; 0x70
   1e488:	beq	1e498 <__assert_fail@plt+0xc724>
   1e48c:	cmp	r3, #49152	; 0xc000
   1e490:	moveq	r2, #115	; 0x73
   1e494:	movne	r2, #63	; 0x3f
   1e498:	tst	r0, #256	; 0x100
   1e49c:	strb	r2, [r1]
   1e4a0:	and	r3, r0, #64	; 0x40
   1e4a4:	movne	ip, #114	; 0x72
   1e4a8:	moveq	ip, #45	; 0x2d
   1e4ac:	tst	r0, #128	; 0x80
   1e4b0:	movne	r2, #119	; 0x77
   1e4b4:	moveq	r2, #45	; 0x2d
   1e4b8:	strb	ip, [r1, #1]
   1e4bc:	tst	r0, #2048	; 0x800
   1e4c0:	strb	r2, [r1, #2]
   1e4c4:	beq	1e564 <__assert_fail@plt+0xc7f0>
   1e4c8:	cmp	r3, #0
   1e4cc:	movne	r2, #115	; 0x73
   1e4d0:	moveq	r2, #83	; 0x53
   1e4d4:	tst	r0, #32
   1e4d8:	strb	r2, [r1, #3]
   1e4dc:	and	r3, r0, #8
   1e4e0:	movne	ip, #114	; 0x72
   1e4e4:	moveq	ip, #45	; 0x2d
   1e4e8:	tst	r0, #16
   1e4ec:	movne	r2, #119	; 0x77
   1e4f0:	moveq	r2, #45	; 0x2d
   1e4f4:	strb	ip, [r1, #4]
   1e4f8:	tst	r0, #1024	; 0x400
   1e4fc:	strb	r2, [r1, #5]
   1e500:	beq	1e574 <__assert_fail@plt+0xc800>
   1e504:	cmp	r3, #0
   1e508:	movne	r2, #115	; 0x73
   1e50c:	moveq	r2, #83	; 0x53
   1e510:	tst	r0, #4
   1e514:	strb	r2, [r1, #6]
   1e518:	and	r3, r0, #1
   1e51c:	movne	ip, #114	; 0x72
   1e520:	moveq	ip, #45	; 0x2d
   1e524:	tst	r0, #2
   1e528:	movne	r2, #119	; 0x77
   1e52c:	moveq	r2, #45	; 0x2d
   1e530:	strb	ip, [r1, #7]
   1e534:	tst	r0, #512	; 0x200
   1e538:	strb	r2, [r1, #8]
   1e53c:	beq	1e584 <__assert_fail@plt+0xc810>
   1e540:	cmp	r3, #0
   1e544:	movne	r0, #116	; 0x74
   1e548:	moveq	r0, #84	; 0x54
   1e54c:	mov	r2, #32
   1e550:	mov	r3, #0
   1e554:	strb	r0, [r1, #9]
   1e558:	strb	r2, [r1, #10]
   1e55c:	strb	r3, [r1, #11]
   1e560:	bx	lr
   1e564:	cmp	r3, #0
   1e568:	movne	r2, #120	; 0x78
   1e56c:	moveq	r2, #45	; 0x2d
   1e570:	b	1e4d4 <__assert_fail@plt+0xc760>
   1e574:	cmp	r3, #0
   1e578:	movne	r2, #120	; 0x78
   1e57c:	moveq	r2, #45	; 0x2d
   1e580:	b	1e510 <__assert_fail@plt+0xc79c>
   1e584:	cmp	r3, #0
   1e588:	movne	r0, #120	; 0x78
   1e58c:	moveq	r0, #45	; 0x2d
   1e590:	b	1e54c <__assert_fail@plt+0xc7d8>
   1e594:	ldr	r3, [r0, #16]
   1e598:	and	r2, r3, #61440	; 0xf000
   1e59c:	cmp	r2, #32768	; 0x8000
   1e5a0:	moveq	r0, #45	; 0x2d
   1e5a4:	beq	1e5f0 <__assert_fail@plt+0xc87c>
   1e5a8:	cmp	r2, #16384	; 0x4000
   1e5ac:	moveq	r0, #100	; 0x64
   1e5b0:	beq	1e5f0 <__assert_fail@plt+0xc87c>
   1e5b4:	cmp	r2, #24576	; 0x6000
   1e5b8:	moveq	r0, #98	; 0x62
   1e5bc:	beq	1e5f0 <__assert_fail@plt+0xc87c>
   1e5c0:	cmp	r2, #8192	; 0x2000
   1e5c4:	moveq	r0, #99	; 0x63
   1e5c8:	beq	1e5f0 <__assert_fail@plt+0xc87c>
   1e5cc:	cmp	r2, #40960	; 0xa000
   1e5d0:	moveq	r0, #108	; 0x6c
   1e5d4:	beq	1e5f0 <__assert_fail@plt+0xc87c>
   1e5d8:	cmp	r2, #4096	; 0x1000
   1e5dc:	moveq	r0, #112	; 0x70
   1e5e0:	beq	1e5f0 <__assert_fail@plt+0xc87c>
   1e5e4:	cmp	r2, #49152	; 0xc000
   1e5e8:	moveq	r0, #115	; 0x73
   1e5ec:	movne	r0, #63	; 0x3f
   1e5f0:	tst	r3, #256	; 0x100
   1e5f4:	strb	r0, [r1]
   1e5f8:	and	r2, r3, #64	; 0x40
   1e5fc:	movne	ip, #114	; 0x72
   1e600:	moveq	ip, #45	; 0x2d
   1e604:	tst	r3, #128	; 0x80
   1e608:	movne	r0, #119	; 0x77
   1e60c:	moveq	r0, #45	; 0x2d
   1e610:	strb	ip, [r1, #1]
   1e614:	tst	r3, #2048	; 0x800
   1e618:	strb	r0, [r1, #2]
   1e61c:	beq	1e6bc <__assert_fail@plt+0xc948>
   1e620:	cmp	r2, #0
   1e624:	movne	r0, #115	; 0x73
   1e628:	moveq	r0, #83	; 0x53
   1e62c:	tst	r3, #32
   1e630:	strb	r0, [r1, #3]
   1e634:	and	r2, r3, #8
   1e638:	movne	ip, #114	; 0x72
   1e63c:	moveq	ip, #45	; 0x2d
   1e640:	tst	r3, #16
   1e644:	movne	r0, #119	; 0x77
   1e648:	moveq	r0, #45	; 0x2d
   1e64c:	strb	ip, [r1, #4]
   1e650:	tst	r3, #1024	; 0x400
   1e654:	strb	r0, [r1, #5]
   1e658:	beq	1e6cc <__assert_fail@plt+0xc958>
   1e65c:	cmp	r2, #0
   1e660:	movne	r0, #115	; 0x73
   1e664:	moveq	r0, #83	; 0x53
   1e668:	tst	r3, #4
   1e66c:	strb	r0, [r1, #6]
   1e670:	and	r2, r3, #1
   1e674:	movne	ip, #114	; 0x72
   1e678:	moveq	ip, #45	; 0x2d
   1e67c:	tst	r3, #2
   1e680:	movne	r0, #119	; 0x77
   1e684:	moveq	r0, #45	; 0x2d
   1e688:	strb	ip, [r1, #7]
   1e68c:	tst	r3, #512	; 0x200
   1e690:	strb	r0, [r1, #8]
   1e694:	beq	1e6dc <__assert_fail@plt+0xc968>
   1e698:	cmp	r2, #0
   1e69c:	movne	r0, #116	; 0x74
   1e6a0:	moveq	r0, #84	; 0x54
   1e6a4:	mov	r2, #32
   1e6a8:	mov	r3, #0
   1e6ac:	strb	r0, [r1, #9]
   1e6b0:	strb	r2, [r1, #10]
   1e6b4:	strb	r3, [r1, #11]
   1e6b8:	bx	lr
   1e6bc:	cmp	r2, #0
   1e6c0:	movne	r0, #120	; 0x78
   1e6c4:	moveq	r0, #45	; 0x2d
   1e6c8:	b	1e62c <__assert_fail@plt+0xc8b8>
   1e6cc:	cmp	r2, #0
   1e6d0:	movne	r0, #120	; 0x78
   1e6d4:	moveq	r0, #45	; 0x2d
   1e6d8:	b	1e668 <__assert_fail@plt+0xc8f4>
   1e6dc:	cmp	r2, #0
   1e6e0:	movne	r0, #120	; 0x78
   1e6e4:	moveq	r0, #45	; 0x2d
   1e6e8:	b	1e6a4 <__assert_fail@plt+0xc930>
   1e6ec:	str	r4, [sp, #-8]!
   1e6f0:	str	lr, [sp, #4]
   1e6f4:	bl	1e710 <__assert_fail@plt+0xc99c>
   1e6f8:	cmp	r0, #0
   1e6fc:	beq	1e70c <__assert_fail@plt+0xc998>
   1e700:	ldr	r4, [sp]
   1e704:	add	sp, sp, #4
   1e708:	pop	{pc}		; (ldr pc, [sp], #4)
   1e70c:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   1e710:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e714:	strd	r6, [sp, #8]
   1e718:	mov	r6, r1
   1e71c:	mov	r7, r0
   1e720:	strd	r8, [sp, #16]
   1e724:	mov	r9, r2
   1e728:	strd	sl, [sp, #24]
   1e72c:	str	lr, [sp, #32]
   1e730:	sub	sp, sp, #4
   1e734:	bl	1d7a8 <__assert_fail@plt+0xba34>
   1e738:	mov	r4, r0
   1e73c:	bl	1d7f8 <__assert_fail@plt+0xba84>
   1e740:	mov	r5, r0
   1e744:	mov	r0, r6
   1e748:	bl	11b94 <strlen@plt>
   1e74c:	sub	r4, r4, r7
   1e750:	cmp	r5, #0
   1e754:	add	r4, r4, r5
   1e758:	mov	r8, r0
   1e75c:	beq	1e7f4 <__assert_fail@plt+0xca80>
   1e760:	add	r3, r7, r4
   1e764:	ldrb	r3, [r3, #-1]
   1e768:	cmp	r3, #47	; 0x2f
   1e76c:	beq	1e7e8 <__assert_fail@plt+0xca74>
   1e770:	ldrb	r3, [r6]
   1e774:	cmp	r3, #47	; 0x2f
   1e778:	beq	1e7e8 <__assert_fail@plt+0xca74>
   1e77c:	mov	r5, #1
   1e780:	mov	sl, #47	; 0x2f
   1e784:	add	r0, r8, #1
   1e788:	add	r0, r0, r4
   1e78c:	add	r0, r0, r5
   1e790:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   1e794:	subs	fp, r0, #0
   1e798:	beq	1e7c8 <__assert_fail@plt+0xca54>
   1e79c:	mov	r2, r4
   1e7a0:	mov	r1, r7
   1e7a4:	bl	11b40 <mempcpy@plt>
   1e7a8:	cmp	r9, #0
   1e7ac:	mov	r2, r8
   1e7b0:	strb	sl, [r0], r5
   1e7b4:	mov	r1, r6
   1e7b8:	strne	r0, [r9]
   1e7bc:	bl	11b40 <mempcpy@plt>
   1e7c0:	mov	r3, #0
   1e7c4:	strb	r3, [r0]
   1e7c8:	mov	r0, fp
   1e7cc:	add	sp, sp, #4
   1e7d0:	ldrd	r4, [sp]
   1e7d4:	ldrd	r6, [sp, #8]
   1e7d8:	ldrd	r8, [sp, #16]
   1e7dc:	ldrd	sl, [sp, #24]
   1e7e0:	add	sp, sp, #32
   1e7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7e8:	mov	r5, #0
   1e7ec:	mov	sl, r5
   1e7f0:	b	1e784 <__assert_fail@plt+0xca10>
   1e7f4:	ldrb	r3, [r6]
   1e7f8:	cmp	r3, #47	; 0x2f
   1e7fc:	moveq	r5, #1
   1e800:	movne	sl, #0
   1e804:	moveq	sl, #46	; 0x2e
   1e808:	b	1e784 <__assert_fail@plt+0xca10>
   1e80c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e810:	mov	r4, r0
   1e814:	mov	r5, r1
   1e818:	strd	r6, [sp, #8]
   1e81c:	strd	r8, [sp, #16]
   1e820:	strd	sl, [sp, #24]
   1e824:	str	lr, [sp, #32]
   1e828:	sub	sp, sp, #20
   1e82c:	bl	118a0 <strcmp@plt>
   1e830:	subs	r6, r0, #0
   1e834:	beq	1eb08 <__assert_fail@plt+0xcd94>
   1e838:	ldrb	r7, [r4]
   1e83c:	cmp	r7, #0
   1e840:	beq	1ecb4 <__assert_fail@plt+0xcf40>
   1e844:	ldrb	r8, [r5]
   1e848:	cmp	r8, #0
   1e84c:	beq	1eb04 <__assert_fail@plt+0xcd90>
   1e850:	movw	r0, #64316	; 0xfb3c
   1e854:	movt	r0, #2
   1e858:	mov	r1, r4
   1e85c:	bl	118a0 <strcmp@plt>
   1e860:	cmp	r0, #0
   1e864:	beq	1ecb4 <__assert_fail@plt+0xcf40>
   1e868:	movw	r0, #64316	; 0xfb3c
   1e86c:	movt	r0, #2
   1e870:	mov	r1, r5
   1e874:	bl	118a0 <strcmp@plt>
   1e878:	cmp	r0, #0
   1e87c:	beq	1eb04 <__assert_fail@plt+0xcd90>
   1e880:	movw	r0, #200	; 0xc8
   1e884:	movt	r0, #3
   1e888:	mov	r1, r4
   1e88c:	bl	118a0 <strcmp@plt>
   1e890:	cmp	r0, #0
   1e894:	beq	1ecb4 <__assert_fail@plt+0xcf40>
   1e898:	movw	r0, #200	; 0xc8
   1e89c:	movt	r0, #3
   1e8a0:	mov	r1, r5
   1e8a4:	bl	118a0 <strcmp@plt>
   1e8a8:	cmp	r0, #0
   1e8ac:	beq	1eb04 <__assert_fail@plt+0xcd90>
   1e8b0:	sub	r3, r7, #46	; 0x2e
   1e8b4:	clz	r3, r3
   1e8b8:	lsr	r3, r3, #5
   1e8bc:	cmp	r8, #46	; 0x2e
   1e8c0:	moveq	r2, #0
   1e8c4:	andne	r2, r3, #1
   1e8c8:	cmp	r2, #0
   1e8cc:	bne	1ecb4 <__assert_fail@plt+0xcf40>
   1e8d0:	sub	r2, r8, #46	; 0x2e
   1e8d4:	clz	r2, r2
   1e8d8:	lsr	r2, r2, #5
   1e8dc:	cmp	r7, #46	; 0x2e
   1e8e0:	moveq	r1, #0
   1e8e4:	andne	r1, r2, #1
   1e8e8:	cmp	r1, #0
   1e8ec:	bne	1eb04 <__assert_fail@plt+0xcd90>
   1e8f0:	tst	r3, r2
   1e8f4:	ldrb	r3, [r4, #1]
   1e8f8:	bne	1ecdc <__assert_fail@plt+0xcf68>
   1e8fc:	cmp	r7, #46	; 0x2e
   1e900:	mov	r9, r4
   1e904:	mov	r2, #0
   1e908:	beq	1eb48 <__assert_fail@plt+0xcdd4>
   1e90c:	sub	r1, r7, #48	; 0x30
   1e910:	sub	r3, r7, #97	; 0x61
   1e914:	cmp	r7, #90	; 0x5a
   1e918:	mov	r0, r9
   1e91c:	uxtb	r1, r1
   1e920:	uxtb	r3, r3
   1e924:	add	r9, r9, #1
   1e928:	bhi	1eb28 <__assert_fail@plt+0xcdb4>
   1e92c:	cmp	r7, #65	; 0x41
   1e930:	bcs	1eb30 <__assert_fail@plt+0xcdbc>
   1e934:	cmp	r1, #9
   1e938:	bls	1eb30 <__assert_fail@plt+0xcdbc>
   1e93c:	cmp	r7, #126	; 0x7e
   1e940:	beq	1eb30 <__assert_fail@plt+0xcdbc>
   1e944:	ldrb	r7, [r9]
   1e948:	mov	r2, #0
   1e94c:	cmp	r7, r2
   1e950:	beq	1ecf4 <__assert_fail@plt+0xcf80>
   1e954:	cmp	r7, #46	; 0x2e
   1e958:	bne	1e90c <__assert_fail@plt+0xcb98>
   1e95c:	mov	r2, r9
   1e960:	add	r1, r0, #2
   1e964:	ldrb	r3, [r0, #2]
   1e968:	b	1eba8 <__assert_fail@plt+0xce34>
   1e96c:	cmp	r0, #0
   1e970:	add	lr, sl, #1
   1e974:	ldrb	r3, [sl, #1]
   1e978:	beq	1ee44 <__assert_fail@plt+0xd0d0>
   1e97c:	cmp	r3, #0
   1e980:	beq	1ede8 <__assert_fail@plt+0xd074>
   1e984:	mov	sl, lr
   1e988:	cmp	r3, #65	; 0x41
   1e98c:	ldrb	r8, [sl, #1]!
   1e990:	bcc	1e9a8 <__assert_fail@plt+0xcc34>
   1e994:	cmp	r3, #90	; 0x5a
   1e998:	bls	1eca0 <__assert_fail@plt+0xcf2c>
   1e99c:	sub	r1, r3, #97	; 0x61
   1e9a0:	cmp	r1, #25
   1e9a4:	bls	1eca0 <__assert_fail@plt+0xcf2c>
   1e9a8:	cmp	r3, #126	; 0x7e
   1e9ac:	beq	1eca0 <__assert_fail@plt+0xcf2c>
   1e9b0:	cmp	r8, #0
   1e9b4:	beq	1edac <__assert_fail@plt+0xd038>
   1e9b8:	cmp	r8, #46	; 0x2e
   1e9bc:	movne	r0, #0
   1e9c0:	bne	1ebcc <__assert_fail@plt+0xce58>
   1e9c4:	ldrb	r3, [lr, #2]
   1e9c8:	mov	r0, sl
   1e9cc:	add	lr, lr, #2
   1e9d0:	cmp	r3, #0
   1e9d4:	bne	1e984 <__assert_fail@plt+0xcc10>
   1e9d8:	mov	sl, lr
   1e9dc:	cmp	r2, #0
   1e9e0:	beq	1ee2c <__assert_fail@plt+0xd0b8>
   1e9e4:	cmp	r0, #0
   1e9e8:	sub	r7, r2, r4
   1e9ec:	beq	1ee7c <__assert_fail@plt+0xd108>
   1e9f0:	sub	fp, r0, r5
   1e9f4:	cmp	r7, fp
   1e9f8:	beq	1edcc <__assert_fail@plt+0xd058>
   1e9fc:	mov	r3, #0
   1ea00:	rsb	ip, r4, #1
   1ea04:	mov	r2, r3
   1ea08:	rsb	sl, r5, #1
   1ea0c:	cmp	fp, r3
   1ea10:	cmpls	r7, r2
   1ea14:	bls	1eb08 <__assert_fail@plt+0xcd94>
   1ea18:	cmp	r7, r2
   1ea1c:	sub	r8, r3, r2
   1ea20:	bls	1ea98 <__assert_fail@plt+0xcd24>
   1ea24:	ldrb	r0, [r4, r2]
   1ea28:	sub	r1, r0, #48	; 0x30
   1ea2c:	cmp	r1, #9
   1ea30:	bls	1ea98 <__assert_fail@plt+0xcd24>
   1ea34:	cmp	r0, #65	; 0x41
   1ea38:	mov	lr, r0
   1ea3c:	bcc	1ea54 <__assert_fail@plt+0xcce0>
   1ea40:	cmp	r0, #90	; 0x5a
   1ea44:	bls	1eccc <__assert_fail@plt+0xcf58>
   1ea48:	sub	r1, r0, #97	; 0x61
   1ea4c:	cmp	r1, #25
   1ea50:	bls	1eccc <__assert_fail@plt+0xcf58>
   1ea54:	cmp	r0, #126	; 0x7e
   1ea58:	beq	1ee68 <__assert_fail@plt+0xd0f4>
   1ea5c:	add	lr, r0, #256	; 0x100
   1ea60:	add	r1, r2, r8
   1ea64:	cmp	fp, r1
   1ea68:	beq	1ee24 <__assert_fail@plt+0xd0b0>
   1ea6c:	ldrb	r1, [r5, r3]
   1ea70:	sub	r0, r1, #48	; 0x30
   1ea74:	cmp	r0, #9
   1ea78:	bhi	1ec70 <__assert_fail@plt+0xcefc>
   1ea7c:	mov	r0, #0
   1ea80:	cmp	r0, lr
   1ea84:	bne	1ee70 <__assert_fail@plt+0xd0fc>
   1ea88:	add	r2, r2, #1
   1ea8c:	add	r3, r3, #1
   1ea90:	cmp	r7, r2
   1ea94:	bhi	1ea24 <__assert_fail@plt+0xccb0>
   1ea98:	cmp	fp, r3
   1ea9c:	ldrb	r1, [r5, r3]
   1eaa0:	bls	1eab0 <__assert_fail@plt+0xcd3c>
   1eaa4:	sub	r0, r1, #48	; 0x30
   1eaa8:	cmp	r0, #9
   1eaac:	bhi	1ec54 <__assert_fail@plt+0xcee0>
   1eab0:	ldrb	r0, [r4, r2]
   1eab4:	add	lr, r4, r2
   1eab8:	cmp	r0, #48	; 0x30
   1eabc:	bne	1ead0 <__assert_fail@plt+0xcd5c>
   1eac0:	add	r2, ip, lr
   1eac4:	ldrb	r0, [lr, #1]!
   1eac8:	cmp	r0, #48	; 0x30
   1eacc:	beq	1eac0 <__assert_fail@plt+0xcd4c>
   1ead0:	cmp	r1, #48	; 0x30
   1ead4:	bne	1eaec <__assert_fail@plt+0xcd78>
   1ead8:	add	lr, r5, r3
   1eadc:	add	r3, sl, lr
   1eae0:	ldrb	r1, [lr, #1]!
   1eae4:	cmp	r1, #48	; 0x30
   1eae8:	beq	1eadc <__assert_fail@plt+0xcd68>
   1eaec:	sub	lr, r0, #48	; 0x30
   1eaf0:	sub	r8, r1, #48	; 0x30
   1eaf4:	cmp	lr, #9
   1eaf8:	bhi	1ecac <__assert_fail@plt+0xcf38>
   1eafc:	cmp	r8, #9
   1eb00:	bls	1ed0c <__assert_fail@plt+0xcf98>
   1eb04:	mov	r6, #1
   1eb08:	mov	r0, r6
   1eb0c:	add	sp, sp, #20
   1eb10:	ldrd	r4, [sp]
   1eb14:	ldrd	r6, [sp, #8]
   1eb18:	ldrd	r8, [sp, #16]
   1eb1c:	ldrd	sl, [sp, #24]
   1eb20:	add	sp, sp, #32
   1eb24:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb28:	cmp	r3, #25
   1eb2c:	bhi	1e93c <__assert_fail@plt+0xcbc8>
   1eb30:	ldrb	r7, [r0, #1]
   1eb34:	cmp	r7, #0
   1eb38:	beq	1eda0 <__assert_fail@plt+0xd02c>
   1eb3c:	cmp	r7, #46	; 0x2e
   1eb40:	ldrb	r3, [r9, #1]
   1eb44:	bne	1e90c <__assert_fail@plt+0xcb98>
   1eb48:	cmp	r2, #0
   1eb4c:	add	r1, r9, #1
   1eb50:	beq	1ee3c <__assert_fail@plt+0xd0c8>
   1eb54:	cmp	r3, #0
   1eb58:	beq	1ee04 <__assert_fail@plt+0xd090>
   1eb5c:	cmp	r3, #65	; 0x41
   1eb60:	add	r9, r1, #1
   1eb64:	ldrb	r7, [r1, #1]
   1eb68:	bcc	1eb80 <__assert_fail@plt+0xce0c>
   1eb6c:	cmp	r3, #90	; 0x5a
   1eb70:	bls	1ec30 <__assert_fail@plt+0xcebc>
   1eb74:	sub	r0, r3, #97	; 0x61
   1eb78:	cmp	r0, #25
   1eb7c:	bls	1ec30 <__assert_fail@plt+0xcebc>
   1eb80:	cmp	r3, #126	; 0x7e
   1eb84:	beq	1ec30 <__assert_fail@plt+0xcebc>
   1eb88:	cmp	r7, #0
   1eb8c:	beq	1ecf4 <__assert_fail@plt+0xcf80>
   1eb90:	cmp	r7, #46	; 0x2e
   1eb94:	movne	r2, #0
   1eb98:	bne	1e90c <__assert_fail@plt+0xcb98>
   1eb9c:	ldrb	r3, [r1, #2]
   1eba0:	mov	r2, r9
   1eba4:	add	r1, r1, #2
   1eba8:	cmp	r3, #0
   1ebac:	bne	1eb5c <__assert_fail@plt+0xcde8>
   1ebb0:	mov	r9, r1
   1ebb4:	cmp	r8, #0
   1ebb8:	beq	1ed8c <__assert_fail@plt+0xd018>
   1ebbc:	mov	sl, r5
   1ebc0:	mov	r0, #0
   1ebc4:	cmp	r8, #46	; 0x2e
   1ebc8:	beq	1e96c <__assert_fail@plt+0xcbf8>
   1ebcc:	sub	r1, r8, #48	; 0x30
   1ebd0:	sub	r3, r8, #97	; 0x61
   1ebd4:	cmp	r8, #90	; 0x5a
   1ebd8:	mov	ip, sl
   1ebdc:	uxtb	r1, r1
   1ebe0:	uxtb	r3, r3
   1ebe4:	add	sl, sl, #1
   1ebe8:	bhi	1ec3c <__assert_fail@plt+0xcec8>
   1ebec:	cmp	r8, #65	; 0x41
   1ebf0:	bcs	1ec44 <__assert_fail@plt+0xced0>
   1ebf4:	cmp	r1, #9
   1ebf8:	bls	1ec44 <__assert_fail@plt+0xced0>
   1ebfc:	cmp	r8, #126	; 0x7e
   1ec00:	ldrb	r3, [sl]
   1ec04:	beq	1ecbc <__assert_fail@plt+0xcf48>
   1ec08:	mov	r0, #0
   1ec0c:	mov	r8, r3
   1ec10:	cmp	r3, r0
   1ec14:	beq	1edac <__assert_fail@plt+0xd038>
   1ec18:	cmp	r3, #46	; 0x2e
   1ec1c:	bne	1ebcc <__assert_fail@plt+0xce58>
   1ec20:	mov	r0, sl
   1ec24:	add	lr, ip, #2
   1ec28:	ldrb	r3, [ip, #2]
   1ec2c:	b	1e9d0 <__assert_fail@plt+0xcc5c>
   1ec30:	cmp	r7, #0
   1ec34:	bne	1eb3c <__assert_fail@plt+0xcdc8>
   1ec38:	b	1ebb4 <__assert_fail@plt+0xce40>
   1ec3c:	cmp	r3, #25
   1ec40:	bhi	1ebfc <__assert_fail@plt+0xce88>
   1ec44:	ldrb	r8, [ip, #1]
   1ec48:	cmp	r8, #0
   1ec4c:	bne	1ebc4 <__assert_fail@plt+0xce50>
   1ec50:	b	1e9dc <__assert_fail@plt+0xcc68>
   1ec54:	cmp	r7, r2
   1ec58:	beq	1ec6c <__assert_fail@plt+0xcef8>
   1ec5c:	ldrb	r0, [r4, r2]
   1ec60:	sub	lr, r0, #48	; 0x30
   1ec64:	cmp	lr, #9
   1ec68:	bhi	1ea34 <__assert_fail@plt+0xccc0>
   1ec6c:	mov	lr, #0
   1ec70:	cmp	r1, #65	; 0x41
   1ec74:	mov	r0, r1
   1ec78:	bcc	1ec90 <__assert_fail@plt+0xcf1c>
   1ec7c:	cmp	r1, #90	; 0x5a
   1ec80:	bls	1ea80 <__assert_fail@plt+0xcd0c>
   1ec84:	sub	r9, r1, #97	; 0x61
   1ec88:	cmp	r9, #25
   1ec8c:	bls	1ea80 <__assert_fail@plt+0xcd0c>
   1ec90:	cmp	r1, #126	; 0x7e
   1ec94:	beq	1ee60 <__assert_fail@plt+0xd0ec>
   1ec98:	add	r0, r1, #256	; 0x100
   1ec9c:	b	1ea80 <__assert_fail@plt+0xcd0c>
   1eca0:	cmp	r8, #0
   1eca4:	bne	1ebc4 <__assert_fail@plt+0xce50>
   1eca8:	b	1e9dc <__assert_fail@plt+0xcc68>
   1ecac:	cmp	r8, #9
   1ecb0:	bhi	1ea0c <__assert_fail@plt+0xcc98>
   1ecb4:	mvn	r6, #0
   1ecb8:	b	1eb08 <__assert_fail@plt+0xcd94>
   1ecbc:	cmp	r3, #0
   1ecc0:	beq	1e9dc <__assert_fail@plt+0xcc68>
   1ecc4:	mov	r8, r3
   1ecc8:	b	1ebc4 <__assert_fail@plt+0xce50>
   1eccc:	add	r1, r2, r8
   1ecd0:	cmp	fp, r1
   1ecd4:	bne	1ea6c <__assert_fail@plt+0xccf8>
   1ecd8:	b	1ea7c <__assert_fail@plt+0xcd08>
   1ecdc:	cmp	r3, #0
   1ece0:	ldrb	r8, [r5, #1]
   1ece4:	add	r9, r4, #1
   1ece8:	add	r5, r5, #1
   1ecec:	bne	1ee4c <__assert_fail@plt+0xd0d8>
   1ecf0:	mov	r4, r9
   1ecf4:	cmp	r8, #0
   1ecf8:	subeq	r7, r9, r4
   1ecfc:	moveq	fp, r8
   1ed00:	beq	1e9fc <__assert_fail@plt+0xcc88>
   1ed04:	mov	r2, #0
   1ed08:	b	1ebbc <__assert_fail@plt+0xce48>
   1ed0c:	add	lr, r4, r2
   1ed10:	mov	r8, #0
   1ed14:	str	lr, [sp, #8]
   1ed18:	add	lr, r5, r3
   1ed1c:	str	lr, [sp, #4]
   1ed20:	mov	lr, r2
   1ed24:	str	r8, [sp, #12]
   1ed28:	ldr	r9, [sp, #4]
   1ed2c:	add	lr, lr, #1
   1ed30:	ldr	r8, [sp, #12]
   1ed34:	cmp	r8, #0
   1ed38:	sub	r8, lr, r2
   1ed3c:	subeq	r1, r0, r1
   1ed40:	add	r8, r8, r3
   1ed44:	streq	r1, [sp, #12]
   1ed48:	ldr	r1, [sp, #8]
   1ed4c:	ldrb	r0, [r1, #1]!
   1ed50:	str	r1, [sp, #8]
   1ed54:	ldrb	r1, [r9, #1]!
   1ed58:	str	r9, [sp, #4]
   1ed5c:	sub	r9, r0, #48	; 0x30
   1ed60:	cmp	r9, #9
   1ed64:	sub	r9, r1, #48	; 0x30
   1ed68:	bls	1edc0 <__assert_fail@plt+0xd04c>
   1ed6c:	cmp	r9, #9
   1ed70:	bls	1ecb4 <__assert_fail@plt+0xcf40>
   1ed74:	ldr	r3, [sp, #12]
   1ed78:	cmp	r3, #0
   1ed7c:	bne	1ee84 <__assert_fail@plt+0xd110>
   1ed80:	mov	r2, lr
   1ed84:	mov	r3, r8
   1ed88:	b	1ea0c <__assert_fail@plt+0xcc98>
   1ed8c:	cmp	r2, #0
   1ed90:	sub	r7, r2, r4
   1ed94:	bne	1ee8c <__assert_fail@plt+0xd118>
   1ed98:	mov	fp, r2
   1ed9c:	b	1e9fc <__assert_fail@plt+0xcc88>
   1eda0:	cmp	r8, #0
   1eda4:	bne	1ebbc <__assert_fail@plt+0xce48>
   1eda8:	mov	sl, r5
   1edac:	cmp	r2, #0
   1edb0:	bne	1ee78 <__assert_fail@plt+0xd104>
   1edb4:	sub	r7, r9, r4
   1edb8:	sub	fp, sl, r5
   1edbc:	b	1e9fc <__assert_fail@plt+0xcc88>
   1edc0:	cmp	r9, #9
   1edc4:	bhi	1eb04 <__assert_fail@plt+0xcd90>
   1edc8:	b	1ed28 <__assert_fail@plt+0xcfb4>
   1edcc:	mov	r2, r7
   1edd0:	mov	r1, r5
   1edd4:	mov	r0, r4
   1edd8:	bl	11d20 <strncmp@plt>
   1eddc:	cmp	r0, #0
   1ede0:	bne	1e9fc <__assert_fail@plt+0xcc88>
   1ede4:	b	1edb4 <__assert_fail@plt+0xd040>
   1ede8:	cmp	r2, #0
   1edec:	subne	r7, r2, r4
   1edf0:	movne	sl, lr
   1edf4:	bne	1e9f0 <__assert_fail@plt+0xcc7c>
   1edf8:	mov	sl, lr
   1edfc:	sub	r7, r9, r4
   1ee00:	b	1e9f0 <__assert_fail@plt+0xcc7c>
   1ee04:	cmp	r8, #0
   1ee08:	movne	r9, r1
   1ee0c:	bne	1ebbc <__assert_fail@plt+0xce48>
   1ee10:	sub	r7, r2, r4
   1ee14:	mov	r9, r1
   1ee18:	mov	fp, r8
   1ee1c:	mov	sl, r5
   1ee20:	b	1e9f4 <__assert_fail@plt+0xcc80>
   1ee24:	mov	r6, lr
   1ee28:	b	1eb08 <__assert_fail@plt+0xcd94>
   1ee2c:	cmp	r0, #0
   1ee30:	sub	r7, r9, r4
   1ee34:	bne	1e9f0 <__assert_fail@plt+0xcc7c>
   1ee38:	b	1edb8 <__assert_fail@plt+0xd044>
   1ee3c:	mov	r2, r9
   1ee40:	b	1eba8 <__assert_fail@plt+0xce34>
   1ee44:	mov	r0, sl
   1ee48:	b	1e9d0 <__assert_fail@plt+0xcc5c>
   1ee4c:	ldrb	r2, [r4, #2]
   1ee50:	mov	r7, r3
   1ee54:	mov	r4, r9
   1ee58:	mov	r3, r2
   1ee5c:	b	1e8fc <__assert_fail@plt+0xcb88>
   1ee60:	mvn	r0, #0
   1ee64:	b	1ea80 <__assert_fail@plt+0xcd0c>
   1ee68:	mvn	lr, #0
   1ee6c:	b	1ea60 <__assert_fail@plt+0xccec>
   1ee70:	sub	r6, lr, r0
   1ee74:	b	1eb08 <__assert_fail@plt+0xcd94>
   1ee78:	sub	r7, r2, r4
   1ee7c:	sub	fp, sl, r5
   1ee80:	b	1e9f4 <__assert_fail@plt+0xcc80>
   1ee84:	ldr	r6, [sp, #12]
   1ee88:	b	1eb08 <__assert_fail@plt+0xcd94>
   1ee8c:	mov	fp, r8
   1ee90:	mov	sl, r5
   1ee94:	b	1e9f4 <__assert_fail@plt+0xcc80>
   1ee98:	strd	r4, [sp, #-12]!
   1ee9c:	mov	r5, r0
   1eea0:	str	lr, [sp, #8]
   1eea4:	sub	sp, sp, #12
   1eea8:	bl	11bb8 <__errno_location@plt>
   1eeac:	mov	r4, r0
   1eeb0:	mov	r2, #0
   1eeb4:	ldr	r3, [r4]
   1eeb8:	mov	r0, r5
   1eebc:	str	r2, [r4]
   1eec0:	str	r3, [sp]
   1eec4:	str	r3, [sp, #4]
   1eec8:	bl	11900 <free@plt>
   1eecc:	ldr	r3, [r4]
   1eed0:	add	r2, sp, #8
   1eed4:	clz	r3, r3
   1eed8:	lsr	r3, r3, #5
   1eedc:	add	r3, r2, r3, lsl #2
   1eee0:	ldr	r3, [r3, #-8]
   1eee4:	str	r3, [r4]
   1eee8:	add	sp, sp, #12
   1eeec:	ldrd	r4, [sp]
   1eef0:	add	sp, sp, #8
   1eef4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eef8:	mov	r1, r0
   1eefc:	mov	r0, #0
   1ef00:	b	11918 <clock_gettime@plt>
   1ef04:	str	r4, [sp, #-8]!
   1ef08:	mov	r4, r0
   1ef0c:	mov	r0, #0
   1ef10:	str	lr, [sp, #4]
   1ef14:	sub	sp, sp, #8
   1ef18:	mov	r1, sp
   1ef1c:	bl	11918 <clock_gettime@plt>
   1ef20:	ldrd	r2, [sp]
   1ef24:	mov	r0, r4
   1ef28:	strd	r2, [r4]
   1ef2c:	add	sp, sp, #8
   1ef30:	ldr	r4, [sp]
   1ef34:	add	sp, sp, #4
   1ef38:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef3c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ef40:	sub	sp, sp, #268	; 0x10c
   1ef44:	movw	r2, #257	; 0x101
   1ef48:	add	r1, sp, #4
   1ef4c:	bl	28f5c <_obstack_memory_used@@Base+0x3ea4>
   1ef50:	cmp	r0, #0
   1ef54:	movne	r0, #0
   1ef58:	bne	1ef8c <__assert_fail@plt+0xd218>
   1ef5c:	movw	r1, #204	; 0xcc
   1ef60:	movt	r1, #3
   1ef64:	add	r0, sp, #4
   1ef68:	bl	118a0 <strcmp@plt>
   1ef6c:	cmp	r0, #0
   1ef70:	beq	1ef8c <__assert_fail@plt+0xd218>
   1ef74:	add	r0, sp, #4
   1ef78:	movw	r1, #208	; 0xd0
   1ef7c:	movt	r1, #3
   1ef80:	bl	118a0 <strcmp@plt>
   1ef84:	adds	r0, r0, #0
   1ef88:	movne	r0, #1
   1ef8c:	add	sp, sp, #268	; 0x10c
   1ef90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef94:	andeq	r0, r0, r0
   1ef98:	ror	r0, r0, #3
   1ef9c:	udiv	r3, r0, r1
   1efa0:	mls	r0, r3, r1, r0
   1efa4:	bx	lr
   1efa8:	sub	r0, r1, r0
   1efac:	clz	r0, r0
   1efb0:	lsr	r0, r0, #5
   1efb4:	bx	lr
   1efb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1efbc:	mov	r5, r1
   1efc0:	strd	r6, [sp, #8]
   1efc4:	mov	r6, r0
   1efc8:	mov	r7, r3
   1efcc:	mov	r0, r1
   1efd0:	strd	r8, [sp, #16]
   1efd4:	strd	sl, [sp, #24]
   1efd8:	mov	fp, r2
   1efdc:	str	lr, [sp, #32]
   1efe0:	sub	sp, sp, #4
   1efe4:	ldr	r1, [r6, #8]
   1efe8:	ldr	r3, [r6, #24]
   1efec:	blx	r3
   1eff0:	ldr	r3, [r6, #8]
   1eff4:	cmp	r0, r3
   1eff8:	bcs	1f114 <__assert_fail@plt+0xd3a0>
   1effc:	ldr	r8, [r6]
   1f000:	lsl	r9, r0, #3
   1f004:	mov	sl, r0
   1f008:	add	r4, r8, r9
   1f00c:	str	r4, [fp]
   1f010:	ldr	r1, [r8, r0, lsl #3]
   1f014:	cmp	r1, #0
   1f018:	beq	1f10c <__assert_fail@plt+0xd398>
   1f01c:	cmp	r1, r5
   1f020:	beq	1f0d4 <__assert_fail@plt+0xd360>
   1f024:	mov	r0, r5
   1f028:	ldr	r3, [r6, #28]
   1f02c:	blx	r3
   1f030:	cmp	r0, #0
   1f034:	bne	1f0d0 <__assert_fail@plt+0xd35c>
   1f038:	ldr	r3, [r4, #4]
   1f03c:	cmp	r3, #0
   1f040:	beq	1f10c <__assert_fail@plt+0xd398>
   1f044:	ldr	r1, [r3]
   1f048:	cmp	r5, r1
   1f04c:	bne	1f070 <__assert_fail@plt+0xd2fc>
   1f050:	b	1f08c <__assert_fail@plt+0xd318>
   1f054:	ldr	r4, [r4, #4]
   1f058:	ldr	r3, [r4, #4]
   1f05c:	cmp	r3, #0
   1f060:	beq	1f10c <__assert_fail@plt+0xd398>
   1f064:	ldr	r1, [r3]
   1f068:	cmp	r1, r5
   1f06c:	beq	1f08c <__assert_fail@plt+0xd318>
   1f070:	mov	r0, r5
   1f074:	ldr	r3, [r6, #28]
   1f078:	blx	r3
   1f07c:	cmp	r0, #0
   1f080:	beq	1f054 <__assert_fail@plt+0xd2e0>
   1f084:	ldr	r3, [r4, #4]
   1f088:	ldr	r1, [r3]
   1f08c:	cmp	r7, #0
   1f090:	beq	1f0b0 <__assert_fail@plt+0xd33c>
   1f094:	ldr	r0, [r3, #4]
   1f098:	mov	r2, #0
   1f09c:	str	r0, [r4, #4]
   1f0a0:	str	r2, [r3]
   1f0a4:	ldr	r2, [r6, #36]	; 0x24
   1f0a8:	str	r2, [r3, #4]
   1f0ac:	str	r3, [r6, #36]	; 0x24
   1f0b0:	mov	r0, r1
   1f0b4:	add	sp, sp, #4
   1f0b8:	ldrd	r4, [sp]
   1f0bc:	ldrd	r6, [sp, #8]
   1f0c0:	ldrd	r8, [sp, #16]
   1f0c4:	ldrd	sl, [sp, #24]
   1f0c8:	add	sp, sp, #32
   1f0cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0d0:	ldr	r1, [r8, sl, lsl #3]
   1f0d4:	cmp	r7, #0
   1f0d8:	beq	1f0b0 <__assert_fail@plt+0xd33c>
   1f0dc:	ldr	r0, [r4, #4]
   1f0e0:	cmp	r0, #0
   1f0e4:	streq	r0, [r8, sl, lsl #3]
   1f0e8:	beq	1f0b0 <__assert_fail@plt+0xd33c>
   1f0ec:	ldrd	r2, [r0]
   1f0f0:	mov	ip, #0
   1f0f4:	strd	r2, [r8, r9]
   1f0f8:	str	ip, [r0]
   1f0fc:	ldr	r3, [r6, #36]	; 0x24
   1f100:	str	r3, [r0, #4]
   1f104:	str	r0, [r6, #36]	; 0x24
   1f108:	b	1f0b0 <__assert_fail@plt+0xd33c>
   1f10c:	mov	r1, #0
   1f110:	b	1f0b0 <__assert_fail@plt+0xd33c>
   1f114:	bl	11d2c <abort@plt>
   1f118:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f11c:	ldr	r3, [r1, #4]
   1f120:	strd	r6, [sp, #8]
   1f124:	ldr	r6, [r1]
   1f128:	strd	r8, [sp, #16]
   1f12c:	str	sl, [sp, #24]
   1f130:	str	lr, [sp, #28]
   1f134:	cmp	r6, r3
   1f138:	bcs	1f218 <__assert_fail@plt+0xd4a4>
   1f13c:	mov	r8, r2
   1f140:	mov	r5, r0
   1f144:	mov	r7, r1
   1f148:	add	r6, r6, #8
   1f14c:	mov	r9, #0
   1f150:	b	1f160 <__assert_fail@plt+0xd3ec>
   1f154:	cmp	r3, r6
   1f158:	add	r6, r6, #8
   1f15c:	bls	1f218 <__assert_fail@plt+0xd4a4>
   1f160:	ldr	sl, [r6, #-8]
   1f164:	cmp	sl, #0
   1f168:	beq	1f154 <__assert_fail@plt+0xd3e0>
   1f16c:	ldr	r4, [r6, #-4]
   1f170:	cmp	r4, #0
   1f174:	beq	1f1fc <__assert_fail@plt+0xd488>
   1f178:	ldr	r1, [r5, #8]
   1f17c:	b	1f198 <__assert_fail@plt+0xd424>
   1f180:	ldr	r3, [ip, #4]
   1f184:	cmp	r2, #0
   1f188:	str	r3, [r4, #4]
   1f18c:	str	r4, [ip, #4]
   1f190:	mov	r4, r2
   1f194:	beq	1f1f8 <__assert_fail@plt+0xd484>
   1f198:	ldr	sl, [r4]
   1f19c:	ldr	r3, [r5, #24]
   1f1a0:	mov	r0, sl
   1f1a4:	blx	r3
   1f1a8:	ldr	r1, [r5, #8]
   1f1ac:	cmp	r0, r1
   1f1b0:	bcs	1f2cc <__assert_fail@plt+0xd558>
   1f1b4:	ldr	r3, [r5]
   1f1b8:	ldr	r2, [r4, #4]
   1f1bc:	ldr	lr, [r3, r0, lsl #3]
   1f1c0:	add	ip, r3, r0, lsl #3
   1f1c4:	cmp	lr, #0
   1f1c8:	bne	1f180 <__assert_fail@plt+0xd40c>
   1f1cc:	ldr	ip, [r5, #12]
   1f1d0:	cmp	r2, #0
   1f1d4:	str	sl, [r3, r0, lsl #3]
   1f1d8:	add	ip, ip, #1
   1f1dc:	str	ip, [r5, #12]
   1f1e0:	str	lr, [r4]
   1f1e4:	ldr	r3, [r5, #36]	; 0x24
   1f1e8:	str	r3, [r4, #4]
   1f1ec:	str	r4, [r5, #36]	; 0x24
   1f1f0:	mov	r4, r2
   1f1f4:	bne	1f198 <__assert_fail@plt+0xd424>
   1f1f8:	ldr	sl, [r6, #-8]
   1f1fc:	cmp	r8, #0
   1f200:	str	r9, [r6, #-4]
   1f204:	beq	1f234 <__assert_fail@plt+0xd4c0>
   1f208:	ldr	r3, [r7, #4]
   1f20c:	cmp	r3, r6
   1f210:	add	r6, r6, #8
   1f214:	bhi	1f160 <__assert_fail@plt+0xd3ec>
   1f218:	mov	r0, #1
   1f21c:	ldrd	r4, [sp]
   1f220:	ldrd	r6, [sp, #8]
   1f224:	ldrd	r8, [sp, #16]
   1f228:	ldr	sl, [sp, #24]
   1f22c:	add	sp, sp, #28
   1f230:	pop	{pc}		; (ldr pc, [sp], #4)
   1f234:	mov	r0, sl
   1f238:	ldr	r1, [r5, #8]
   1f23c:	ldr	r3, [r5, #24]
   1f240:	blx	r3
   1f244:	ldr	r3, [r5, #8]
   1f248:	cmp	r0, r3
   1f24c:	bcs	1f2cc <__assert_fail@plt+0xd558>
   1f250:	ldr	r3, [r5]
   1f254:	ldr	r2, [r3, r0, lsl #3]
   1f258:	add	r4, r3, r0, lsl #3
   1f25c:	cmp	r2, #0
   1f260:	beq	1f2a0 <__assert_fail@plt+0xd52c>
   1f264:	ldr	r0, [r5, #36]	; 0x24
   1f268:	cmp	r0, #0
   1f26c:	beq	1f2b4 <__assert_fail@plt+0xd540>
   1f270:	ldr	r3, [r0, #4]
   1f274:	str	r3, [r5, #36]	; 0x24
   1f278:	ldr	r3, [r4, #4]
   1f27c:	str	sl, [r0]
   1f280:	str	r3, [r0, #4]
   1f284:	str	r0, [r4, #4]
   1f288:	ldr	r2, [r7, #12]
   1f28c:	str	r9, [r6, #-8]
   1f290:	ldr	r3, [r7, #4]
   1f294:	sub	r2, r2, #1
   1f298:	str	r2, [r7, #12]
   1f29c:	b	1f154 <__assert_fail@plt+0xd3e0>
   1f2a0:	ldr	r2, [r5, #12]
   1f2a4:	str	sl, [r3, r0, lsl #3]
   1f2a8:	add	r2, r2, #1
   1f2ac:	str	r2, [r5, #12]
   1f2b0:	b	1f288 <__assert_fail@plt+0xd514>
   1f2b4:	mov	r0, #8
   1f2b8:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   1f2bc:	cmp	r0, #0
   1f2c0:	bne	1f278 <__assert_fail@plt+0xd504>
   1f2c4:	mov	r0, r8
   1f2c8:	b	1f21c <__assert_fail@plt+0xd4a8>
   1f2cc:	bl	11d2c <abort@plt>
   1f2d0:	ldr	r0, [r0, #8]
   1f2d4:	bx	lr
   1f2d8:	ldr	r0, [r0, #12]
   1f2dc:	bx	lr
   1f2e0:	ldr	r0, [r0, #16]
   1f2e4:	bx	lr
   1f2e8:	ldm	r0, {r1, r3}
   1f2ec:	cmp	r1, r3
   1f2f0:	bcs	1f364 <__assert_fail@plt+0xd5f0>
   1f2f4:	sub	ip, r3, #1
   1f2f8:	add	r3, r1, #16
   1f2fc:	sub	ip, ip, r1
   1f300:	mov	r0, #0
   1f304:	bic	ip, ip, #7
   1f308:	add	r1, r1, #8
   1f30c:	add	ip, ip, r3
   1f310:	b	1f320 <__assert_fail@plt+0xd5ac>
   1f314:	add	r1, r1, #8
   1f318:	cmp	r1, ip
   1f31c:	beq	1f360 <__assert_fail@plt+0xd5ec>
   1f320:	ldr	r3, [r1, #-8]
   1f324:	cmp	r3, #0
   1f328:	beq	1f314 <__assert_fail@plt+0xd5a0>
   1f32c:	ldr	r3, [r1, #-4]
   1f330:	mov	r2, #1
   1f334:	cmp	r3, #0
   1f338:	beq	1f34c <__assert_fail@plt+0xd5d8>
   1f33c:	ldr	r3, [r3, #4]
   1f340:	add	r2, r2, #1
   1f344:	cmp	r3, #0
   1f348:	bne	1f33c <__assert_fail@plt+0xd5c8>
   1f34c:	cmp	r0, r2
   1f350:	add	r1, r1, #8
   1f354:	movcc	r0, r2
   1f358:	cmp	r1, ip
   1f35c:	bne	1f320 <__assert_fail@plt+0xd5ac>
   1f360:	bx	lr
   1f364:	mov	r0, #0
   1f368:	bx	lr
   1f36c:	ldm	r0, {r1, r3}
   1f370:	push	{lr}		; (str lr, [sp, #-4]!)
   1f374:	cmp	r1, r3
   1f378:	bcs	1f40c <__assert_fail@plt+0xd698>
   1f37c:	sub	ip, r3, #1
   1f380:	mov	r2, #0
   1f384:	sub	ip, ip, r1
   1f388:	add	r3, r1, #16
   1f38c:	bic	ip, ip, #7
   1f390:	add	r1, r1, #8
   1f394:	add	ip, ip, r3
   1f398:	mov	lr, r2
   1f39c:	b	1f3ac <__assert_fail@plt+0xd638>
   1f3a0:	add	r1, r1, #8
   1f3a4:	cmp	r1, ip
   1f3a8:	beq	1f3e8 <__assert_fail@plt+0xd674>
   1f3ac:	ldr	r3, [r1, #-8]
   1f3b0:	cmp	r3, #0
   1f3b4:	beq	1f3a0 <__assert_fail@plt+0xd62c>
   1f3b8:	ldr	r3, [r1, #-4]
   1f3bc:	add	lr, lr, #1
   1f3c0:	add	r2, r2, #1
   1f3c4:	cmp	r3, #0
   1f3c8:	beq	1f3a0 <__assert_fail@plt+0xd62c>
   1f3cc:	ldr	r3, [r3, #4]
   1f3d0:	add	r2, r2, #1
   1f3d4:	cmp	r3, #0
   1f3d8:	bne	1f3cc <__assert_fail@plt+0xd658>
   1f3dc:	add	r1, r1, #8
   1f3e0:	cmp	r1, ip
   1f3e4:	bne	1f3ac <__assert_fail@plt+0xd638>
   1f3e8:	ldr	r3, [r0, #12]
   1f3ec:	cmp	r3, lr
   1f3f0:	movne	r0, #0
   1f3f4:	bne	1f408 <__assert_fail@plt+0xd694>
   1f3f8:	ldr	r0, [r0, #16]
   1f3fc:	sub	r0, r0, r2
   1f400:	clz	r0, r0
   1f404:	lsr	r0, r0, #5
   1f408:	pop	{pc}		; (ldr pc, [sp], #4)
   1f40c:	mov	r2, #0
   1f410:	mov	lr, r2
   1f414:	b	1f3e8 <__assert_fail@plt+0xd674>
   1f418:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f41c:	mov	r4, r1
   1f420:	ldr	r2, [r0]
   1f424:	ldr	r1, [r0, #4]
   1f428:	ldr	r3, [r0, #16]
   1f42c:	strd	r6, [sp, #8]
   1f430:	str	lr, [sp, #16]
   1f434:	sub	sp, sp, #12
   1f438:	cmp	r2, r1
   1f43c:	ldrd	r6, [r0, #8]
   1f440:	bcs	1f540 <__assert_fail@plt+0xd7cc>
   1f444:	sub	ip, r1, #1
   1f448:	add	r1, r2, #16
   1f44c:	sub	ip, ip, r2
   1f450:	add	r0, r2, #8
   1f454:	bic	ip, ip, #7
   1f458:	mov	r5, #0
   1f45c:	add	ip, ip, r1
   1f460:	b	1f470 <__assert_fail@plt+0xd6fc>
   1f464:	add	r0, r0, #8
   1f468:	cmp	r0, ip
   1f46c:	beq	1f4b0 <__assert_fail@plt+0xd73c>
   1f470:	ldr	r2, [r0, #-8]
   1f474:	cmp	r2, #0
   1f478:	beq	1f464 <__assert_fail@plt+0xd6f0>
   1f47c:	ldr	r2, [r0, #-4]
   1f480:	mov	r1, #1
   1f484:	cmp	r2, #0
   1f488:	beq	1f49c <__assert_fail@plt+0xd728>
   1f48c:	ldr	r2, [r2, #4]
   1f490:	add	r1, r1, #1
   1f494:	cmp	r2, #0
   1f498:	bne	1f48c <__assert_fail@plt+0xd718>
   1f49c:	cmp	r5, r1
   1f4a0:	add	r0, r0, #8
   1f4a4:	movcc	r5, r1
   1f4a8:	cmp	r0, ip
   1f4ac:	bne	1f470 <__assert_fail@plt+0xd6fc>
   1f4b0:	mov	r1, #1
   1f4b4:	mov	r0, r4
   1f4b8:	movw	r2, #236	; 0xec
   1f4bc:	movt	r2, #3
   1f4c0:	bl	11c18 <__fprintf_chk@plt>
   1f4c4:	mov	r3, r6
   1f4c8:	mov	r1, #1
   1f4cc:	mov	r0, r4
   1f4d0:	movw	r2, #260	; 0x104
   1f4d4:	movt	r2, #3
   1f4d8:	bl	11c18 <__fprintf_chk@plt>
   1f4dc:	vmov	s15, r7
   1f4e0:	mov	r3, r7
   1f4e4:	mov	r1, #1
   1f4e8:	vldr	d5, [pc, #88]	; 1f548 <__assert_fail@plt+0xd7d4>
   1f4ec:	mov	r0, r4
   1f4f0:	movw	r2, #284	; 0x11c
   1f4f4:	movt	r2, #3
   1f4f8:	vcvt.f64.u32	d6, s15
   1f4fc:	vmov	s15, r6
   1f500:	vmul.f64	d6, d6, d5
   1f504:	vcvt.f64.u32	d7, s15
   1f508:	vdiv.f64	d5, d6, d7
   1f50c:	vstr	d5, [sp]
   1f510:	bl	11c18 <__fprintf_chk@plt>
   1f514:	mov	r3, r5
   1f518:	mov	r0, r4
   1f51c:	movw	r2, #320	; 0x140
   1f520:	movt	r2, #3
   1f524:	mov	r1, #1
   1f528:	add	sp, sp, #12
   1f52c:	ldrd	r4, [sp]
   1f530:	ldrd	r6, [sp, #8]
   1f534:	ldr	lr, [sp, #16]
   1f538:	add	sp, sp, #20
   1f53c:	b	11c18 <__fprintf_chk@plt>
   1f540:	mov	r5, #0
   1f544:	b	1f4b0 <__assert_fail@plt+0xd73c>
   1f548:	andeq	r0, r0, r0
   1f54c:	subsmi	r0, r9, r0
   1f550:	strd	r4, [sp, #-16]!
   1f554:	mov	r5, r1
   1f558:	str	r6, [sp, #8]
   1f55c:	mov	r6, r0
   1f560:	mov	r0, r1
   1f564:	str	lr, [sp, #12]
   1f568:	ldr	r1, [r6, #8]
   1f56c:	ldr	r3, [r6, #24]
   1f570:	blx	r3
   1f574:	ldr	r3, [r6, #8]
   1f578:	cmp	r0, r3
   1f57c:	bcs	1f5ec <__assert_fail@plt+0xd878>
   1f580:	ldr	r4, [r6]
   1f584:	ldr	r1, [r4, r0, lsl #3]
   1f588:	add	r4, r4, r0, lsl #3
   1f58c:	cmp	r1, #0
   1f590:	beq	1f5cc <__assert_fail@plt+0xd858>
   1f594:	cmp	r1, r5
   1f598:	bne	1f5ac <__assert_fail@plt+0xd838>
   1f59c:	b	1f5d0 <__assert_fail@plt+0xd85c>
   1f5a0:	ldr	r1, [r4]
   1f5a4:	cmp	r5, r1
   1f5a8:	beq	1f5d0 <__assert_fail@plt+0xd85c>
   1f5ac:	mov	r0, r5
   1f5b0:	ldr	r3, [r6, #28]
   1f5b4:	blx	r3
   1f5b8:	cmp	r0, #0
   1f5bc:	bne	1f5e4 <__assert_fail@plt+0xd870>
   1f5c0:	ldr	r4, [r4, #4]
   1f5c4:	cmp	r4, #0
   1f5c8:	bne	1f5a0 <__assert_fail@plt+0xd82c>
   1f5cc:	mov	r1, #0
   1f5d0:	ldrd	r4, [sp]
   1f5d4:	mov	r0, r1
   1f5d8:	ldr	r6, [sp, #8]
   1f5dc:	add	sp, sp, #12
   1f5e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5e4:	ldr	r1, [r4]
   1f5e8:	b	1f5d0 <__assert_fail@plt+0xd85c>
   1f5ec:	bl	11d2c <abort@plt>
   1f5f0:	ldr	r3, [r0, #16]
   1f5f4:	cmp	r3, #0
   1f5f8:	beq	1f64c <__assert_fail@plt+0xd8d8>
   1f5fc:	ldr	r3, [r0]
   1f600:	ldr	r2, [r0, #4]
   1f604:	cmp	r3, r2
   1f608:	bcs	1f640 <__assert_fail@plt+0xd8cc>
   1f60c:	ldr	r0, [r3]
   1f610:	cmp	r0, #0
   1f614:	bxne	lr
   1f618:	sub	r2, r2, #1
   1f61c:	sub	r2, r2, r3
   1f620:	bic	r2, r2, #7
   1f624:	add	r2, r3, r2
   1f628:	b	1f638 <__assert_fail@plt+0xd8c4>
   1f62c:	ldr	r0, [r3, #8]!
   1f630:	cmp	r0, #0
   1f634:	bxne	lr
   1f638:	cmp	r3, r2
   1f63c:	bne	1f62c <__assert_fail@plt+0xd8b8>
   1f640:	str	r4, [sp, #-8]!
   1f644:	str	lr, [sp, #4]
   1f648:	bl	11d2c <abort@plt>
   1f64c:	mov	r0, r3
   1f650:	bx	lr
   1f654:	strd	r4, [sp, #-16]!
   1f658:	mov	r5, r0
   1f65c:	mov	r4, r1
   1f660:	mov	r0, r1
   1f664:	ldr	r1, [r5, #8]
   1f668:	ldr	r3, [r5, #24]
   1f66c:	str	r6, [sp, #8]
   1f670:	str	lr, [sp, #12]
   1f674:	blx	r3
   1f678:	ldr	r3, [r5, #8]
   1f67c:	cmp	r0, r3
   1f680:	bcs	1f6e8 <__assert_fail@plt+0xd974>
   1f684:	ldr	r2, [r5]
   1f688:	add	r2, r2, r0, lsl #3
   1f68c:	mov	r3, r2
   1f690:	b	1f69c <__assert_fail@plt+0xd928>
   1f694:	cmp	r3, #0
   1f698:	beq	1f6b4 <__assert_fail@plt+0xd940>
   1f69c:	ldm	r3, {r1, r3}
   1f6a0:	cmp	r1, r4
   1f6a4:	bne	1f694 <__assert_fail@plt+0xd920>
   1f6a8:	cmp	r3, #0
   1f6ac:	ldrne	r0, [r3]
   1f6b0:	bne	1f6d8 <__assert_fail@plt+0xd964>
   1f6b4:	ldr	r3, [r5, #4]
   1f6b8:	b	1f6c8 <__assert_fail@plt+0xd954>
   1f6bc:	ldr	r0, [r2]
   1f6c0:	cmp	r0, #0
   1f6c4:	bne	1f6d8 <__assert_fail@plt+0xd964>
   1f6c8:	add	r2, r2, #8
   1f6cc:	cmp	r3, r2
   1f6d0:	bhi	1f6bc <__assert_fail@plt+0xd948>
   1f6d4:	mov	r0, #0
   1f6d8:	ldrd	r4, [sp]
   1f6dc:	ldr	r6, [sp, #8]
   1f6e0:	add	sp, sp, #12
   1f6e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f6e8:	bl	11d2c <abort@plt>
   1f6ec:	strd	r4, [sp, #-16]!
   1f6f0:	mov	r3, #0
   1f6f4:	ldr	r5, [r0]
   1f6f8:	str	r6, [sp, #8]
   1f6fc:	str	lr, [sp, #12]
   1f700:	ldr	lr, [r0, #4]
   1f704:	cmp	lr, r5
   1f708:	bls	1f724 <__assert_fail@plt+0xd9b0>
   1f70c:	ldr	ip, [r5]
   1f710:	cmp	ip, #0
   1f714:	bne	1f738 <__assert_fail@plt+0xd9c4>
   1f718:	add	r5, r5, #8
   1f71c:	cmp	r5, lr
   1f720:	bcc	1f70c <__assert_fail@plt+0xd998>
   1f724:	ldrd	r4, [sp]
   1f728:	mov	r0, r3
   1f72c:	ldr	r6, [sp, #8]
   1f730:	add	sp, sp, #12
   1f734:	pop	{pc}		; (ldr pc, [sp], #4)
   1f738:	cmp	r2, r3
   1f73c:	bls	1f724 <__assert_fail@plt+0xd9b0>
   1f740:	str	ip, [r1, r3, lsl #2]
   1f744:	add	r4, r3, #1
   1f748:	lsl	lr, r3, #2
   1f74c:	ldr	ip, [r5, #4]
   1f750:	cmp	ip, #0
   1f754:	beq	1f7b4 <__assert_fail@plt+0xda40>
   1f758:	cmp	r2, r4
   1f75c:	bls	1f7a8 <__assert_fail@plt+0xda34>
   1f760:	ldr	r6, [ip]
   1f764:	add	r3, r3, #2
   1f768:	str	r6, [r1, r4, lsl #2]
   1f76c:	ldr	ip, [ip, #4]
   1f770:	cmp	ip, #0
   1f774:	beq	1f7a0 <__assert_fail@plt+0xda2c>
   1f778:	add	lr, lr, #4
   1f77c:	add	lr, r1, lr
   1f780:	cmp	r2, r3
   1f784:	add	r3, r3, #1
   1f788:	beq	1f7ac <__assert_fail@plt+0xda38>
   1f78c:	ldr	r4, [ip]
   1f790:	str	r4, [lr, #4]!
   1f794:	ldr	ip, [ip, #4]
   1f798:	cmp	ip, #0
   1f79c:	bne	1f780 <__assert_fail@plt+0xda0c>
   1f7a0:	ldr	lr, [r0, #4]
   1f7a4:	b	1f718 <__assert_fail@plt+0xd9a4>
   1f7a8:	mov	r2, r4
   1f7ac:	mov	r3, r2
   1f7b0:	b	1f724 <__assert_fail@plt+0xd9b0>
   1f7b4:	mov	r3, r4
   1f7b8:	ldr	lr, [r0, #4]
   1f7bc:	b	1f718 <__assert_fail@plt+0xd9a4>
   1f7c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f7c4:	ldr	r3, [r0, #4]
   1f7c8:	strd	r6, [sp, #8]
   1f7cc:	strd	r8, [sp, #16]
   1f7d0:	ldr	r8, [r0]
   1f7d4:	str	sl, [sp, #24]
   1f7d8:	str	lr, [sp, #28]
   1f7dc:	cmp	r3, r8
   1f7e0:	bls	1f85c <__assert_fail@plt+0xdae8>
   1f7e4:	mov	r7, r2
   1f7e8:	mov	r6, r1
   1f7ec:	mov	r9, r0
   1f7f0:	mov	r5, #0
   1f7f4:	ldr	r0, [r8]
   1f7f8:	cmp	r0, #0
   1f7fc:	bne	1f828 <__assert_fail@plt+0xdab4>
   1f800:	add	r8, r8, #8
   1f804:	cmp	r8, r3
   1f808:	bcc	1f7f4 <__assert_fail@plt+0xda80>
   1f80c:	mov	r0, r5
   1f810:	ldrd	r4, [sp]
   1f814:	ldrd	r6, [sp, #8]
   1f818:	ldrd	r8, [sp, #16]
   1f81c:	ldr	sl, [sp, #24]
   1f820:	add	sp, sp, #28
   1f824:	pop	{pc}		; (ldr pc, [sp], #4)
   1f828:	mov	r4, r8
   1f82c:	b	1f834 <__assert_fail@plt+0xdac0>
   1f830:	ldr	r0, [r4]
   1f834:	mov	r1, r7
   1f838:	blx	r6
   1f83c:	cmp	r0, #0
   1f840:	beq	1f80c <__assert_fail@plt+0xda98>
   1f844:	ldr	r4, [r4, #4]
   1f848:	add	r5, r5, #1
   1f84c:	cmp	r4, #0
   1f850:	bne	1f830 <__assert_fail@plt+0xdabc>
   1f854:	ldr	r3, [r9, #4]
   1f858:	b	1f800 <__assert_fail@plt+0xda8c>
   1f85c:	mov	r5, #0
   1f860:	b	1f80c <__assert_fail@plt+0xda98>
   1f864:	ldrb	r2, [r0]
   1f868:	cmp	r2, #0
   1f86c:	beq	1f898 <__assert_fail@plt+0xdb24>
   1f870:	mov	r3, #0
   1f874:	rsb	r3, r3, r3, lsl #5
   1f878:	add	r3, r3, r2
   1f87c:	ldrb	r2, [r0, #1]!
   1f880:	udiv	ip, r3, r1
   1f884:	cmp	r2, #0
   1f888:	mls	r3, r1, ip, r3
   1f88c:	bne	1f874 <__assert_fail@plt+0xdb00>
   1f890:	mov	r0, r3
   1f894:	bx	lr
   1f898:	mov	r3, r2
   1f89c:	mov	r0, r3
   1f8a0:	bx	lr
   1f8a4:	movw	r3, #216	; 0xd8
   1f8a8:	movt	r3, #3
   1f8ac:	strd	r4, [sp, #-8]!
   1f8b0:	ldrd	r4, [r3]
   1f8b4:	ldr	r1, [r3, #16]
   1f8b8:	ldrd	r2, [r3, #8]
   1f8bc:	strd	r4, [r0]
   1f8c0:	ldrd	r4, [sp]
   1f8c4:	add	sp, sp, #8
   1f8c8:	strd	r2, [r0, #8]
   1f8cc:	str	r1, [r0, #16]
   1f8d0:	bx	lr
   1f8d4:	cmp	r2, #0
   1f8d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f8dc:	movw	r4, #61336	; 0xef98
   1f8e0:	movt	r4, #1
   1f8e4:	movne	r4, r2
   1f8e8:	strd	r6, [sp, #8]
   1f8ec:	cmp	r3, #0
   1f8f0:	str	r8, [sp, #16]
   1f8f4:	mov	r8, r0
   1f8f8:	mov	r0, #40	; 0x28
   1f8fc:	movw	r5, #61352	; 0xefa8
   1f900:	movt	r5, #1
   1f904:	mov	r7, r1
   1f908:	str	lr, [sp, #20]
   1f90c:	movne	r5, r3
   1f910:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   1f914:	subs	r6, r0, #0
   1f918:	beq	1f95c <__assert_fail@plt+0xdbe8>
   1f91c:	cmp	r7, #0
   1f920:	movw	r3, #216	; 0xd8
   1f924:	movt	r3, #3
   1f928:	beq	1f9e8 <__assert_fail@plt+0xdc74>
   1f92c:	cmp	r7, r3
   1f930:	str	r7, [r6, #20]
   1f934:	beq	1f9ec <__assert_fail@plt+0xdc78>
   1f938:	vldr	s14, [pc, #456]	; 1fb08 <__assert_fail@plt+0xdd94>
   1f93c:	vldr	s15, [r7, #8]
   1f940:	vcmpe.f32	s15, s14
   1f944:	vmrs	APSR_nzcv, fpscr
   1f948:	bgt	1f974 <__assert_fail@plt+0xdc00>
   1f94c:	str	r3, [r6, #20]
   1f950:	mov	r0, r6
   1f954:	mov	r6, #0
   1f958:	bl	1ee98 <__assert_fail@plt+0xd124>
   1f95c:	mov	r0, r6
   1f960:	ldrd	r4, [sp]
   1f964:	ldrd	r6, [sp, #8]
   1f968:	ldr	r8, [sp, #16]
   1f96c:	add	sp, sp, #20
   1f970:	pop	{pc}		; (ldr pc, [sp], #4)
   1f974:	vldr	s13, [pc, #400]	; 1fb0c <__assert_fail@plt+0xdd98>
   1f978:	vcmpe.f32	s15, s13
   1f97c:	vmrs	APSR_nzcv, fpscr
   1f980:	bpl	1f94c <__assert_fail@plt+0xdbd8>
   1f984:	vldr	s13, [pc, #388]	; 1fb10 <__assert_fail@plt+0xdd9c>
   1f988:	vldr	s12, [r7, #12]
   1f98c:	vcmpe.f32	s12, s13
   1f990:	vmrs	APSR_nzcv, fpscr
   1f994:	ble	1f94c <__assert_fail@plt+0xdbd8>
   1f998:	vldr	s13, [r7]
   1f99c:	vcmpe.f32	s13, #0.0
   1f9a0:	vmrs	APSR_nzcv, fpscr
   1f9a4:	blt	1f94c <__assert_fail@plt+0xdbd8>
   1f9a8:	vadd.f32	s14, s13, s14
   1f9ac:	vldr	s13, [r7, #4]
   1f9b0:	vcmpe.f32	s14, s13
   1f9b4:	vmrs	APSR_nzcv, fpscr
   1f9b8:	bpl	1f94c <__assert_fail@plt+0xdbd8>
   1f9bc:	vldr	s12, [pc, #336]	; 1fb14 <__assert_fail@plt+0xdda0>
   1f9c0:	vcmpe.f32	s13, s12
   1f9c4:	vmrs	APSR_nzcv, fpscr
   1f9c8:	bhi	1f94c <__assert_fail@plt+0xdbd8>
   1f9cc:	vcmpe.f32	s15, s14
   1f9d0:	vmrs	APSR_nzcv, fpscr
   1f9d4:	ble	1f94c <__assert_fail@plt+0xdbd8>
   1f9d8:	ldrb	r3, [r7, #16]
   1f9dc:	cmp	r3, #0
   1f9e0:	bne	1fa14 <__assert_fail@plt+0xdca0>
   1f9e4:	b	1f9f0 <__assert_fail@plt+0xdc7c>
   1f9e8:	str	r3, [r6, #20]
   1f9ec:	vldr	s15, [pc, #292]	; 1fb18 <__assert_fail@plt+0xdda4>
   1f9f0:	vmov	s14, r8
   1f9f4:	vldr	s13, [pc, #288]	; 1fb1c <__assert_fail@plt+0xdda8>
   1f9f8:	vcvt.f32.u32	s12, s14
   1f9fc:	vdiv.f32	s14, s12, s15
   1fa00:	vcmpe.f32	s14, s13
   1fa04:	vmrs	APSR_nzcv, fpscr
   1fa08:	bge	1fa9c <__assert_fail@plt+0xdd28>
   1fa0c:	vcvt.u32.f32	s15, s14
   1fa10:	vmov	r8, s15
   1fa14:	cmp	r8, #10
   1fa18:	movcs	r3, r8
   1fa1c:	movcc	r3, #10
   1fa20:	orr	r3, r3, #1
   1fa24:	cmn	r3, #1
   1fa28:	beq	1fa9c <__assert_fail@plt+0xdd28>
   1fa2c:	movw	lr, #43691	; 0xaaab
   1fa30:	movt	lr, #43690	; 0xaaaa
   1fa34:	umull	r1, r2, lr, r3
   1fa38:	cmp	r3, #9
   1fa3c:	lsr	r2, r2, #1
   1fa40:	add	r2, r2, r2, lsl #1
   1fa44:	sub	r2, r3, r2
   1fa48:	bls	1fa88 <__assert_fail@plt+0xdd14>
   1fa4c:	cmp	r2, #0
   1fa50:	beq	1fa90 <__assert_fail@plt+0xdd1c>
   1fa54:	mov	ip, #16
   1fa58:	mov	r0, #9
   1fa5c:	mov	r1, #3
   1fa60:	b	1fa6c <__assert_fail@plt+0xdcf8>
   1fa64:	cmp	r2, #0
   1fa68:	beq	1fa90 <__assert_fail@plt+0xdd1c>
   1fa6c:	add	r1, r1, #2
   1fa70:	add	r0, r0, ip
   1fa74:	cmp	r0, r3
   1fa78:	add	ip, ip, #8
   1fa7c:	udiv	r2, r3, r1
   1fa80:	mls	r2, r1, r2, r3
   1fa84:	bcc	1fa64 <__assert_fail@plt+0xdcf0>
   1fa88:	cmp	r2, #0
   1fa8c:	bne	1faa8 <__assert_fail@plt+0xdd34>
   1fa90:	add	r3, r3, #2
   1fa94:	cmn	r3, #1
   1fa98:	bne	1fa34 <__assert_fail@plt+0xdcc0>
   1fa9c:	mov	r3, #0
   1faa0:	str	r3, [r6, #8]
   1faa4:	b	1f950 <__assert_fail@plt+0xdbdc>
   1faa8:	lsrs	r2, r3, #30
   1faac:	movne	r7, #1
   1fab0:	moveq	r7, #0
   1fab4:	tst	r3, #536870912	; 0x20000000
   1fab8:	bne	1fa9c <__assert_fail@plt+0xdd28>
   1fabc:	cmp	r7, #0
   1fac0:	bne	1fa9c <__assert_fail@plt+0xdd28>
   1fac4:	mov	r0, r3
   1fac8:	mov	r1, #8
   1facc:	str	r3, [r6, #8]
   1fad0:	bl	2b514 <_obstack_memory_used@@Base+0x645c>
   1fad4:	cmp	r0, #0
   1fad8:	str	r0, [r6]
   1fadc:	beq	1f950 <__assert_fail@plt+0xdbdc>
   1fae0:	ldr	r3, [r6, #8]
   1fae4:	str	r7, [r6, #12]
   1fae8:	str	r7, [r6, #16]
   1faec:	strd	r4, [r6, #24]
   1faf0:	str	r7, [r6, #36]	; 0x24
   1faf4:	add	r0, r0, r3, lsl #3
   1faf8:	ldr	r3, [sp, #24]
   1fafc:	str	r0, [r6, #4]
   1fb00:	str	r3, [r6, #32]
   1fb04:	b	1f95c <__assert_fail@plt+0xdbe8>
   1fb08:	stclcc	12, cr12, [ip, #820]	; 0x334
   1fb0c:	svccc	0x00666666
   1fb10:	svccc	0x008ccccd
   1fb14:	svccc	0x00800000
   1fb18:	svccc	0x004ccccd
   1fb1c:	svcmi	0x00800000
   1fb20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fb24:	mov	r5, r0
   1fb28:	ldr	r2, [r0, #4]
   1fb2c:	strd	r6, [sp, #8]
   1fb30:	ldr	r6, [r0]
   1fb34:	str	r8, [sp, #16]
   1fb38:	str	lr, [sp, #20]
   1fb3c:	cmp	r6, r2
   1fb40:	addcc	r6, r6, #8
   1fb44:	movcc	r7, #0
   1fb48:	bcc	1fb5c <__assert_fail@plt+0xdde8>
   1fb4c:	b	1fbd0 <__assert_fail@plt+0xde5c>
   1fb50:	cmp	r2, r6
   1fb54:	add	r6, r6, #8
   1fb58:	bls	1fbd0 <__assert_fail@plt+0xde5c>
   1fb5c:	ldr	r3, [r6, #-8]
   1fb60:	cmp	r3, #0
   1fb64:	beq	1fb50 <__assert_fail@plt+0xdddc>
   1fb68:	ldr	r4, [r6, #-4]
   1fb6c:	ldr	r3, [r5, #32]
   1fb70:	cmp	r4, #0
   1fb74:	beq	1fba8 <__assert_fail@plt+0xde34>
   1fb78:	cmp	r3, #0
   1fb7c:	beq	1fbf0 <__assert_fail@plt+0xde7c>
   1fb80:	ldr	r0, [r4]
   1fb84:	blx	r3
   1fb88:	ldr	r1, [r4, #4]
   1fb8c:	ldr	r3, [r5, #32]
   1fb90:	ldr	r2, [r5, #36]	; 0x24
   1fb94:	str	r7, [r4]
   1fb98:	str	r2, [r4, #4]
   1fb9c:	str	r4, [r5, #36]	; 0x24
   1fba0:	subs	r4, r1, #0
   1fba4:	bne	1fb78 <__assert_fail@plt+0xde04>
   1fba8:	cmp	r3, #0
   1fbac:	beq	1fbb8 <__assert_fail@plt+0xde44>
   1fbb0:	ldr	r0, [r6, #-8]
   1fbb4:	blx	r3
   1fbb8:	str	r7, [r6, #-8]
   1fbbc:	str	r7, [r6, #-4]
   1fbc0:	ldr	r2, [r5, #4]
   1fbc4:	cmp	r2, r6
   1fbc8:	add	r6, r6, #8
   1fbcc:	bhi	1fb5c <__assert_fail@plt+0xdde8>
   1fbd0:	mov	r3, #0
   1fbd4:	ldrd	r6, [sp, #8]
   1fbd8:	ldr	r8, [sp, #16]
   1fbdc:	str	r3, [r5, #12]
   1fbe0:	str	r3, [r5, #16]
   1fbe4:	ldrd	r4, [sp]
   1fbe8:	add	sp, sp, #20
   1fbec:	pop	{pc}		; (ldr pc, [sp], #4)
   1fbf0:	ldr	r2, [r5, #36]	; 0x24
   1fbf4:	str	r7, [r4]
   1fbf8:	ldr	r3, [r4, #4]
   1fbfc:	str	r2, [r4, #4]
   1fc00:	mov	r2, r4
   1fc04:	str	r2, [r5, #36]	; 0x24
   1fc08:	subs	r4, r3, #0
   1fc0c:	bne	1fbf4 <__assert_fail@plt+0xde80>
   1fc10:	b	1fbb8 <__assert_fail@plt+0xde44>
   1fc14:	strd	r4, [sp, #-16]!
   1fc18:	ldr	r2, [r0, #32]
   1fc1c:	ldr	r5, [r0]
   1fc20:	ldr	r3, [r0, #4]
   1fc24:	cmp	r2, #0
   1fc28:	str	r6, [sp, #8]
   1fc2c:	mov	r6, r0
   1fc30:	str	lr, [sp, #12]
   1fc34:	beq	1fc9c <__assert_fail@plt+0xdf28>
   1fc38:	ldr	r2, [r0, #16]
   1fc3c:	cmp	r2, #0
   1fc40:	beq	1fc9c <__assert_fail@plt+0xdf28>
   1fc44:	cmp	r5, r3
   1fc48:	bcc	1fc5c <__assert_fail@plt+0xdee8>
   1fc4c:	b	1fcd0 <__assert_fail@plt+0xdf5c>
   1fc50:	add	r5, r5, #8
   1fc54:	cmp	r5, r3
   1fc58:	bcs	1fc98 <__assert_fail@plt+0xdf24>
   1fc5c:	ldr	r0, [r5]
   1fc60:	cmp	r0, #0
   1fc64:	beq	1fc50 <__assert_fail@plt+0xdedc>
   1fc68:	mov	r4, r5
   1fc6c:	b	1fc74 <__assert_fail@plt+0xdf00>
   1fc70:	ldr	r0, [r4]
   1fc74:	ldr	r3, [r6, #32]
   1fc78:	blx	r3
   1fc7c:	ldr	r4, [r4, #4]
   1fc80:	cmp	r4, #0
   1fc84:	bne	1fc70 <__assert_fail@plt+0xdefc>
   1fc88:	ldr	r3, [r6, #4]
   1fc8c:	add	r5, r5, #8
   1fc90:	cmp	r5, r3
   1fc94:	bcc	1fc5c <__assert_fail@plt+0xdee8>
   1fc98:	ldr	r5, [r6]
   1fc9c:	cmp	r3, r5
   1fca0:	bls	1fcd0 <__assert_fail@plt+0xdf5c>
   1fca4:	ldr	r0, [r5, #4]
   1fca8:	cmp	r0, #0
   1fcac:	beq	1fcc4 <__assert_fail@plt+0xdf50>
   1fcb0:	ldr	r4, [r0, #4]
   1fcb4:	bl	1ee98 <__assert_fail@plt+0xd124>
   1fcb8:	subs	r0, r4, #0
   1fcbc:	bne	1fcb0 <__assert_fail@plt+0xdf3c>
   1fcc0:	ldr	r3, [r6, #4]
   1fcc4:	add	r5, r5, #8
   1fcc8:	cmp	r5, r3
   1fccc:	bcc	1fca4 <__assert_fail@plt+0xdf30>
   1fcd0:	ldr	r0, [r6, #36]	; 0x24
   1fcd4:	cmp	r0, #0
   1fcd8:	beq	1fcec <__assert_fail@plt+0xdf78>
   1fcdc:	ldr	r4, [r0, #4]
   1fce0:	bl	1ee98 <__assert_fail@plt+0xd124>
   1fce4:	subs	r0, r4, #0
   1fce8:	bne	1fcdc <__assert_fail@plt+0xdf68>
   1fcec:	ldr	r0, [r6]
   1fcf0:	bl	1ee98 <__assert_fail@plt+0xd124>
   1fcf4:	mov	r0, r6
   1fcf8:	ldrd	r4, [sp]
   1fcfc:	ldr	r6, [sp, #8]
   1fd00:	ldr	lr, [sp, #12]
   1fd04:	add	sp, sp, #16
   1fd08:	b	1ee98 <__assert_fail@plt+0xd124>
   1fd0c:	ldr	r3, [r0, #20]
   1fd10:	strd	r4, [sp, #-20]!	; 0xffffffec
   1fd14:	mov	r5, r0
   1fd18:	ldrb	r2, [r3, #16]
   1fd1c:	strd	r6, [sp, #8]
   1fd20:	str	lr, [sp, #16]
   1fd24:	sub	sp, sp, #44	; 0x2c
   1fd28:	cmp	r2, #0
   1fd2c:	bne	1fd58 <__assert_fail@plt+0xdfe4>
   1fd30:	vmov	s15, r1
   1fd34:	vldr	s12, [r3, #8]
   1fd38:	vldr	s13, [pc, #444]	; 1fefc <__assert_fail@plt+0xe188>
   1fd3c:	vcvt.f32.u32	s15, s15
   1fd40:	vdiv.f32	s14, s15, s12
   1fd44:	vcmpe.f32	s14, s13
   1fd48:	vmrs	APSR_nzcv, fpscr
   1fd4c:	vcvtlt.u32.f32	s15, s14
   1fd50:	vmovlt	r1, s15
   1fd54:	bge	1fddc <__assert_fail@plt+0xe068>
   1fd58:	cmp	r1, #10
   1fd5c:	movcc	r1, #10
   1fd60:	orr	r4, r1, #1
   1fd64:	cmn	r4, #1
   1fd68:	beq	1fddc <__assert_fail@plt+0xe068>
   1fd6c:	movw	ip, #43691	; 0xaaab
   1fd70:	movt	ip, #43690	; 0xaaaa
   1fd74:	umull	r2, r3, ip, r4
   1fd78:	cmp	r4, #9
   1fd7c:	lsr	r3, r3, #1
   1fd80:	add	r3, r3, r3, lsl #1
   1fd84:	sub	r3, r4, r3
   1fd88:	bls	1fdc8 <__assert_fail@plt+0xe054>
   1fd8c:	cmp	r3, #0
   1fd90:	beq	1fdd0 <__assert_fail@plt+0xe05c>
   1fd94:	mov	r0, #16
   1fd98:	mov	r1, #9
   1fd9c:	mov	r2, #3
   1fda0:	b	1fdb0 <__assert_fail@plt+0xe03c>
   1fda4:	cmp	r3, #0
   1fda8:	add	r0, r0, #8
   1fdac:	beq	1fdd0 <__assert_fail@plt+0xe05c>
   1fdb0:	add	r2, r2, #2
   1fdb4:	add	r1, r1, r0
   1fdb8:	cmp	r1, r4
   1fdbc:	udiv	r3, r4, r2
   1fdc0:	mls	r3, r2, r3, r4
   1fdc4:	bcc	1fda4 <__assert_fail@plt+0xe030>
   1fdc8:	cmp	r3, #0
   1fdcc:	bne	1fdf8 <__assert_fail@plt+0xe084>
   1fdd0:	add	r4, r4, #2
   1fdd4:	cmn	r4, #1
   1fdd8:	bne	1fd74 <__assert_fail@plt+0xe000>
   1fddc:	mov	r4, #0
   1fde0:	mov	r0, r4
   1fde4:	add	sp, sp, #44	; 0x2c
   1fde8:	ldrd	r4, [sp]
   1fdec:	ldrd	r6, [sp, #8]
   1fdf0:	add	sp, sp, #16
   1fdf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fdf8:	lsrs	r3, r4, #30
   1fdfc:	movne	r6, #1
   1fe00:	moveq	r6, #0
   1fe04:	tst	r4, #536870912	; 0x20000000
   1fe08:	bne	1fddc <__assert_fail@plt+0xe068>
   1fe0c:	cmp	r6, #0
   1fe10:	bne	1fddc <__assert_fail@plt+0xe068>
   1fe14:	ldr	r3, [r5, #8]
   1fe18:	cmp	r3, r4
   1fe1c:	beq	1fec4 <__assert_fail@plt+0xe150>
   1fe20:	mov	r1, #8
   1fe24:	mov	r0, r4
   1fe28:	bl	2b514 <_obstack_memory_used@@Base+0x645c>
   1fe2c:	cmp	r0, #0
   1fe30:	str	r0, [sp]
   1fe34:	beq	1fddc <__assert_fail@plt+0xe068>
   1fe38:	add	r3, r0, r4, lsl #3
   1fe3c:	ldr	r7, [r5, #20]
   1fe40:	mov	r2, r6
   1fe44:	mov	r0, sp
   1fe48:	mov	r1, r5
   1fe4c:	ldr	lr, [r5, #28]
   1fe50:	stmib	sp, {r3, r4, r6}
   1fe54:	ldr	r4, [r5, #24]
   1fe58:	strd	r6, [sp, #16]
   1fe5c:	ldr	ip, [r5, #32]
   1fe60:	ldr	r3, [r5, #36]	; 0x24
   1fe64:	str	r4, [sp, #24]
   1fe68:	str	lr, [sp, #28]
   1fe6c:	str	ip, [sp, #32]
   1fe70:	str	r3, [sp, #36]	; 0x24
   1fe74:	bl	1f118 <__assert_fail@plt+0xd3a4>
   1fe78:	subs	r4, r0, #0
   1fe7c:	bne	1fecc <__assert_fail@plt+0xe158>
   1fe80:	ldr	r3, [sp, #36]	; 0x24
   1fe84:	mov	r2, #1
   1fe88:	mov	r1, sp
   1fe8c:	mov	r0, r5
   1fe90:	str	r3, [r5, #36]	; 0x24
   1fe94:	bl	1f118 <__assert_fail@plt+0xd3a4>
   1fe98:	cmp	r0, #0
   1fe9c:	beq	1fef8 <__assert_fail@plt+0xe184>
   1fea0:	mov	r1, sp
   1fea4:	mov	r0, r5
   1fea8:	mov	r2, r4
   1feac:	bl	1f118 <__assert_fail@plt+0xd3a4>
   1feb0:	cmp	r0, #0
   1feb4:	beq	1fef8 <__assert_fail@plt+0xe184>
   1feb8:	ldr	r0, [sp]
   1febc:	bl	1ee98 <__assert_fail@plt+0xd124>
   1fec0:	b	1fde0 <__assert_fail@plt+0xe06c>
   1fec4:	mov	r4, #1
   1fec8:	b	1fde0 <__assert_fail@plt+0xe06c>
   1fecc:	ldr	r0, [r5]
   1fed0:	bl	1ee98 <__assert_fail@plt+0xd124>
   1fed4:	ldrd	r2, [sp]
   1fed8:	ldr	r1, [sp, #8]
   1fedc:	strd	r2, [r5]
   1fee0:	ldr	r2, [sp, #12]
   1fee4:	str	r1, [r5, #8]
   1fee8:	ldr	r3, [sp, #36]	; 0x24
   1feec:	str	r2, [r5, #12]
   1fef0:	str	r3, [r5, #36]	; 0x24
   1fef4:	b	1fde0 <__assert_fail@plt+0xe06c>
   1fef8:	bl	11d2c <abort@plt>
   1fefc:	svcmi	0x00800000
   1ff00:	strd	r4, [sp, #-16]!
   1ff04:	str	r6, [sp, #8]
   1ff08:	subs	r6, r1, #0
   1ff0c:	str	lr, [sp, #12]
   1ff10:	sub	sp, sp, #8
   1ff14:	beq	200a0 <__assert_fail@plt+0xe32c>
   1ff18:	mov	r3, #0
   1ff1c:	mov	r5, r2
   1ff20:	add	r2, sp, #4
   1ff24:	mov	r4, r0
   1ff28:	bl	1efb8 <__assert_fail@plt+0xd244>
   1ff2c:	subs	r3, r0, #0
   1ff30:	beq	1ff5c <__assert_fail@plt+0xe1e8>
   1ff34:	cmp	r5, #0
   1ff38:	moveq	r0, r5
   1ff3c:	beq	1ff48 <__assert_fail@plt+0xe1d4>
   1ff40:	mov	r0, #0
   1ff44:	str	r3, [r5]
   1ff48:	add	sp, sp, #8
   1ff4c:	ldrd	r4, [sp]
   1ff50:	ldr	r6, [sp, #8]
   1ff54:	add	sp, sp, #12
   1ff58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff5c:	vldr	s15, [r4, #8]
   1ff60:	vldr	s14, [r4, #12]
   1ff64:	ldr	r3, [r4, #20]
   1ff68:	vcvt.f32.u32	s15, s15
   1ff6c:	vcvt.f32.u32	s14, s14
   1ff70:	vldr	s13, [r3, #8]
   1ff74:	vmul.f32	s12, s13, s15
   1ff78:	vcmpe.f32	s14, s12
   1ff7c:	vmrs	APSR_nzcv, fpscr
   1ff80:	bgt	1ffc8 <__assert_fail@plt+0xe254>
   1ff84:	ldr	r2, [sp, #4]
   1ff88:	ldr	r3, [r2]
   1ff8c:	cmp	r3, #0
   1ff90:	beq	200cc <__assert_fail@plt+0xe358>
   1ff94:	ldr	r3, [r4, #36]	; 0x24
   1ff98:	cmp	r3, #0
   1ff9c:	beq	200f0 <__assert_fail@plt+0xe37c>
   1ffa0:	ldr	r1, [r3, #4]
   1ffa4:	str	r1, [r4, #36]	; 0x24
   1ffa8:	ldr	r1, [r4, #16]
   1ffac:	mov	r0, #1
   1ffb0:	ldr	ip, [r2, #4]
   1ffb4:	add	r1, r1, r0
   1ffb8:	stm	r3, {r6, ip}
   1ffbc:	str	r3, [r2, #4]
   1ffc0:	str	r1, [r4, #16]
   1ffc4:	b	1ff48 <__assert_fail@plt+0xe1d4>
   1ffc8:	movw	r2, #216	; 0xd8
   1ffcc:	movt	r2, #3
   1ffd0:	cmp	r3, r2
   1ffd4:	beq	20108 <__assert_fail@plt+0xe394>
   1ffd8:	vldr	s12, [pc, #320]	; 20120 <__assert_fail@plt+0xe3ac>
   1ffdc:	vcmpe.f32	s13, s12
   1ffe0:	vmrs	APSR_nzcv, fpscr
   1ffe4:	ble	200a4 <__assert_fail@plt+0xe330>
   1ffe8:	vldr	s11, [pc, #308]	; 20124 <__assert_fail@plt+0xe3b0>
   1ffec:	vcmpe.f32	s13, s11
   1fff0:	vmrs	APSR_nzcv, fpscr
   1fff4:	bpl	200a4 <__assert_fail@plt+0xe330>
   1fff8:	vldr	s10, [pc, #296]	; 20128 <__assert_fail@plt+0xe3b4>
   1fffc:	vldr	s11, [r3, #12]
   20000:	vcmpe.f32	s11, s10
   20004:	vmrs	APSR_nzcv, fpscr
   20008:	ble	200a4 <__assert_fail@plt+0xe330>
   2000c:	vldr	s10, [r3]
   20010:	vcmpe.f32	s10, #0.0
   20014:	vmrs	APSR_nzcv, fpscr
   20018:	blt	200a4 <__assert_fail@plt+0xe330>
   2001c:	vadd.f32	s12, s10, s12
   20020:	vldr	s10, [r3, #4]
   20024:	vcmpe.f32	s12, s10
   20028:	vmrs	APSR_nzcv, fpscr
   2002c:	bpl	200a4 <__assert_fail@plt+0xe330>
   20030:	vldr	s9, [pc, #244]	; 2012c <__assert_fail@plt+0xe3b8>
   20034:	vcmpe.f32	s10, s9
   20038:	vmrs	APSR_nzcv, fpscr
   2003c:	bhi	200a4 <__assert_fail@plt+0xe330>
   20040:	vcmpe.f32	s13, s12
   20044:	vmrs	APSR_nzcv, fpscr
   20048:	ble	200a4 <__assert_fail@plt+0xe330>
   2004c:	ldrb	r3, [r3, #16]
   20050:	vmul.f32	s15, s15, s11
   20054:	cmp	r3, #0
   20058:	beq	200c4 <__assert_fail@plt+0xe350>
   2005c:	vldr	s14, [pc, #204]	; 20130 <__assert_fail@plt+0xe3bc>
   20060:	vcmpe.f32	s15, s14
   20064:	vmrs	APSR_nzcv, fpscr
   20068:	bge	20100 <__assert_fail@plt+0xe38c>
   2006c:	vcvt.u32.f32	s15, s15
   20070:	mov	r0, r4
   20074:	vmov	r1, s15
   20078:	bl	1fd0c <__assert_fail@plt+0xdf98>
   2007c:	cmp	r0, #0
   20080:	beq	20100 <__assert_fail@plt+0xe38c>
   20084:	add	r2, sp, #4
   20088:	mov	r3, #0
   2008c:	mov	r1, r6
   20090:	mov	r0, r4
   20094:	bl	1efb8 <__assert_fail@plt+0xd244>
   20098:	cmp	r0, #0
   2009c:	beq	1ff84 <__assert_fail@plt+0xe210>
   200a0:	bl	11d2c <abort@plt>
   200a4:	vldr	s13, [pc, #136]	; 20134 <__assert_fail@plt+0xe3c0>
   200a8:	str	r2, [r4, #20]
   200ac:	vmul.f32	s12, s15, s13
   200b0:	vcmpe.f32	s14, s12
   200b4:	vmrs	APSR_nzcv, fpscr
   200b8:	ble	1ff84 <__assert_fail@plt+0xe210>
   200bc:	vldr	s14, [pc, #116]	; 20138 <__assert_fail@plt+0xe3c4>
   200c0:	vmul.f32	s15, s15, s14
   200c4:	vmul.f32	s15, s15, s13
   200c8:	b	2005c <__assert_fail@plt+0xe2e8>
   200cc:	ldr	r1, [r4, #12]
   200d0:	mov	r0, #1
   200d4:	ldr	r3, [r4, #16]
   200d8:	str	r6, [r2]
   200dc:	add	r2, r1, r0
   200e0:	add	r3, r3, r0
   200e4:	str	r2, [r4, #12]
   200e8:	str	r3, [r4, #16]
   200ec:	b	1ff48 <__assert_fail@plt+0xe1d4>
   200f0:	mov	r0, #8
   200f4:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   200f8:	subs	r3, r0, #0
   200fc:	bne	20118 <__assert_fail@plt+0xe3a4>
   20100:	mvn	r0, #0
   20104:	b	1ff48 <__assert_fail@plt+0xe1d4>
   20108:	vldr	s14, [pc, #40]	; 20138 <__assert_fail@plt+0xe3c4>
   2010c:	vldr	s13, [pc, #32]	; 20134 <__assert_fail@plt+0xe3c0>
   20110:	vmul.f32	s15, s15, s14
   20114:	b	200c4 <__assert_fail@plt+0xe350>
   20118:	ldr	r2, [sp, #4]
   2011c:	b	1ffa8 <__assert_fail@plt+0xe234>
   20120:	stclcc	12, cr12, [ip, #820]	; 0x334
   20124:	svccc	0x00666666
   20128:	svccc	0x008ccccd
   2012c:	svccc	0x00800000
   20130:	svcmi	0x00800000
   20134:	svccc	0x004ccccd
   20138:	svccc	0x00b4fdf4
   2013c:	strd	r4, [sp, #-16]!
   20140:	str	r6, [sp, #8]
   20144:	subs	r6, r1, #0
   20148:	str	lr, [sp, #12]
   2014c:	sub	sp, sp, #8
   20150:	beq	202cc <__assert_fail@plt+0xe558>
   20154:	mov	r3, #0
   20158:	add	r2, sp, #4
   2015c:	mov	r4, r0
   20160:	bl	1efb8 <__assert_fail@plt+0xd244>
   20164:	subs	r5, r0, #0
   20168:	beq	20184 <__assert_fail@plt+0xe410>
   2016c:	mov	r0, r5
   20170:	add	sp, sp, #8
   20174:	ldrd	r4, [sp]
   20178:	ldr	r6, [sp, #8]
   2017c:	add	sp, sp, #12
   20180:	pop	{pc}		; (ldr pc, [sp], #4)
   20184:	vldr	s15, [r4, #8]
   20188:	vldr	s14, [r4, #12]
   2018c:	ldr	r3, [r4, #20]
   20190:	vcvt.f32.u32	s15, s15
   20194:	vcvt.f32.u32	s14, s14
   20198:	vldr	s13, [r3, #8]
   2019c:	vmul.f32	s12, s13, s15
   201a0:	vcmpe.f32	s14, s12
   201a4:	vmrs	APSR_nzcv, fpscr
   201a8:	bgt	201f4 <__assert_fail@plt+0xe480>
   201ac:	ldr	r3, [sp, #4]
   201b0:	ldr	r2, [r3]
   201b4:	cmp	r2, #0
   201b8:	beq	202f8 <__assert_fail@plt+0xe584>
   201bc:	ldr	r0, [r4, #36]	; 0x24
   201c0:	cmp	r0, #0
   201c4:	beq	2031c <__assert_fail@plt+0xe5a8>
   201c8:	ldr	r2, [r0, #4]
   201cc:	str	r2, [r4, #36]	; 0x24
   201d0:	ldr	r2, [r4, #16]
   201d4:	mov	r5, r6
   201d8:	ldr	r1, [r3, #4]
   201dc:	str	r6, [r0]
   201e0:	add	r2, r2, #1
   201e4:	str	r1, [r0, #4]
   201e8:	str	r0, [r3, #4]
   201ec:	str	r2, [r4, #16]
   201f0:	b	2016c <__assert_fail@plt+0xe3f8>
   201f4:	movw	r2, #216	; 0xd8
   201f8:	movt	r2, #3
   201fc:	cmp	r3, r2
   20200:	beq	20334 <__assert_fail@plt+0xe5c0>
   20204:	vldr	s12, [pc, #312]	; 20344 <__assert_fail@plt+0xe5d0>
   20208:	vcmpe.f32	s13, s12
   2020c:	vmrs	APSR_nzcv, fpscr
   20210:	ble	202d0 <__assert_fail@plt+0xe55c>
   20214:	vldr	s11, [pc, #300]	; 20348 <__assert_fail@plt+0xe5d4>
   20218:	vcmpe.f32	s13, s11
   2021c:	vmrs	APSR_nzcv, fpscr
   20220:	bpl	202d0 <__assert_fail@plt+0xe55c>
   20224:	vldr	s10, [pc, #288]	; 2034c <__assert_fail@plt+0xe5d8>
   20228:	vldr	s11, [r3, #12]
   2022c:	vcmpe.f32	s11, s10
   20230:	vmrs	APSR_nzcv, fpscr
   20234:	ble	202d0 <__assert_fail@plt+0xe55c>
   20238:	vldr	s10, [r3]
   2023c:	vcmpe.f32	s10, #0.0
   20240:	vmrs	APSR_nzcv, fpscr
   20244:	blt	202d0 <__assert_fail@plt+0xe55c>
   20248:	vadd.f32	s12, s10, s12
   2024c:	vldr	s10, [r3, #4]
   20250:	vcmpe.f32	s12, s10
   20254:	vmrs	APSR_nzcv, fpscr
   20258:	bpl	202d0 <__assert_fail@plt+0xe55c>
   2025c:	vldr	s9, [pc, #236]	; 20350 <__assert_fail@plt+0xe5dc>
   20260:	vcmpe.f32	s10, s9
   20264:	vmrs	APSR_nzcv, fpscr
   20268:	bhi	202d0 <__assert_fail@plt+0xe55c>
   2026c:	vcmpe.f32	s13, s12
   20270:	vmrs	APSR_nzcv, fpscr
   20274:	ble	202d0 <__assert_fail@plt+0xe55c>
   20278:	ldrb	r3, [r3, #16]
   2027c:	vmul.f32	s15, s15, s11
   20280:	cmp	r3, #0
   20284:	beq	202f0 <__assert_fail@plt+0xe57c>
   20288:	vldr	s14, [pc, #196]	; 20354 <__assert_fail@plt+0xe5e0>
   2028c:	vcmpe.f32	s15, s14
   20290:	vmrs	APSR_nzcv, fpscr
   20294:	bge	2016c <__assert_fail@plt+0xe3f8>
   20298:	vcvt.u32.f32	s15, s15
   2029c:	mov	r0, r4
   202a0:	vmov	r1, s15
   202a4:	bl	1fd0c <__assert_fail@plt+0xdf98>
   202a8:	cmp	r0, #0
   202ac:	beq	2016c <__assert_fail@plt+0xe3f8>
   202b0:	add	r2, sp, #4
   202b4:	mov	r3, #0
   202b8:	mov	r1, r6
   202bc:	mov	r0, r4
   202c0:	bl	1efb8 <__assert_fail@plt+0xd244>
   202c4:	cmp	r0, #0
   202c8:	beq	201ac <__assert_fail@plt+0xe438>
   202cc:	bl	11d2c <abort@plt>
   202d0:	vldr	s13, [pc, #128]	; 20358 <__assert_fail@plt+0xe5e4>
   202d4:	str	r2, [r4, #20]
   202d8:	vmul.f32	s12, s15, s13
   202dc:	vcmpe.f32	s14, s12
   202e0:	vmrs	APSR_nzcv, fpscr
   202e4:	ble	201ac <__assert_fail@plt+0xe438>
   202e8:	vldr	s14, [pc, #108]	; 2035c <__assert_fail@plt+0xe5e8>
   202ec:	vmul.f32	s15, s15, s14
   202f0:	vmul.f32	s15, s15, s13
   202f4:	b	20288 <__assert_fail@plt+0xe514>
   202f8:	ldr	r2, [r4, #12]
   202fc:	mov	r5, r6
   20300:	str	r6, [r3]
   20304:	ldr	r3, [r4, #16]
   20308:	add	r2, r2, #1
   2030c:	add	r3, r3, #1
   20310:	str	r2, [r4, #12]
   20314:	str	r3, [r4, #16]
   20318:	b	2016c <__assert_fail@plt+0xe3f8>
   2031c:	mov	r0, #8
   20320:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   20324:	cmp	r0, #0
   20328:	beq	2016c <__assert_fail@plt+0xe3f8>
   2032c:	ldr	r3, [sp, #4]
   20330:	b	201d0 <__assert_fail@plt+0xe45c>
   20334:	vldr	s14, [pc, #32]	; 2035c <__assert_fail@plt+0xe5e8>
   20338:	vldr	s13, [pc, #24]	; 20358 <__assert_fail@plt+0xe5e4>
   2033c:	vmul.f32	s15, s15, s14
   20340:	b	202f0 <__assert_fail@plt+0xe57c>
   20344:	stclcc	12, cr12, [ip, #820]	; 0x334
   20348:	svccc	0x00666666
   2034c:	svccc	0x008ccccd
   20350:	svccc	0x00800000
   20354:	svcmi	0x00800000
   20358:	svccc	0x004ccccd
   2035c:	svccc	0x00b4fdf4
   20360:	strd	r4, [sp, #-16]!
   20364:	mov	r3, #1
   20368:	mov	r4, r0
   2036c:	str	r6, [sp, #8]
   20370:	str	lr, [sp, #12]
   20374:	sub	sp, sp, #8
   20378:	add	r2, sp, #4
   2037c:	bl	1efb8 <__assert_fail@plt+0xd244>
   20380:	subs	r5, r0, #0
   20384:	beq	203a4 <__assert_fail@plt+0xe630>
   20388:	ldr	r2, [sp, #4]
   2038c:	ldr	r3, [r4, #16]
   20390:	ldr	r2, [r2]
   20394:	sub	r3, r3, #1
   20398:	str	r3, [r4, #16]
   2039c:	cmp	r2, #0
   203a0:	beq	203bc <__assert_fail@plt+0xe648>
   203a4:	mov	r0, r5
   203a8:	add	sp, sp, #8
   203ac:	ldrd	r4, [sp]
   203b0:	ldr	r6, [sp, #8]
   203b4:	add	sp, sp, #12
   203b8:	pop	{pc}		; (ldr pc, [sp], #4)
   203bc:	vldr	s15, [r4, #8]
   203c0:	ldr	r3, [r4, #12]
   203c4:	ldr	r2, [r4, #20]
   203c8:	vcvt.f32.u32	s15, s15
   203cc:	sub	r3, r3, #1
   203d0:	vmov	s14, r3
   203d4:	vldr	s13, [r2]
   203d8:	str	r3, [r4, #12]
   203dc:	vmul.f32	s12, s13, s15
   203e0:	vcvt.f32.u32	s14, s14
   203e4:	vcmpe.f32	s14, s12
   203e8:	vmrs	APSR_nzcv, fpscr
   203ec:	bpl	203a4 <__assert_fail@plt+0xe630>
   203f0:	movw	r3, #216	; 0xd8
   203f4:	movt	r3, #3
   203f8:	cmp	r2, r3
   203fc:	beq	204dc <__assert_fail@plt+0xe768>
   20400:	vldr	s11, [pc, #224]	; 204e8 <__assert_fail@plt+0xe774>
   20404:	vldr	s12, [r2, #8]
   20408:	vcmpe.f32	s12, s11
   2040c:	vmrs	APSR_nzcv, fpscr
   20410:	ble	204c4 <__assert_fail@plt+0xe750>
   20414:	vldr	s10, [pc, #208]	; 204ec <__assert_fail@plt+0xe778>
   20418:	vcmpe.f32	s12, s10
   2041c:	vmrs	APSR_nzcv, fpscr
   20420:	bpl	204c4 <__assert_fail@plt+0xe750>
   20424:	vldr	s10, [pc, #196]	; 204f0 <__assert_fail@plt+0xe77c>
   20428:	vldr	s9, [r2, #12]
   2042c:	vcmpe.f32	s9, s10
   20430:	vmrs	APSR_nzcv, fpscr
   20434:	ble	204c4 <__assert_fail@plt+0xe750>
   20438:	vcmpe.f32	s13, #0.0
   2043c:	vmrs	APSR_nzcv, fpscr
   20440:	blt	204c4 <__assert_fail@plt+0xe750>
   20444:	vadd.f32	s13, s13, s11
   20448:	vldr	s11, [r2, #4]
   2044c:	vcmpe.f32	s13, s11
   20450:	vmrs	APSR_nzcv, fpscr
   20454:	bpl	204c4 <__assert_fail@plt+0xe750>
   20458:	vldr	s10, [pc, #148]	; 204f4 <__assert_fail@plt+0xe780>
   2045c:	vcmpe.f32	s11, s10
   20460:	vmrs	APSR_nzcv, fpscr
   20464:	bhi	204c4 <__assert_fail@plt+0xe750>
   20468:	vcmpe.f32	s12, s13
   2046c:	vmrs	APSR_nzcv, fpscr
   20470:	ble	204c4 <__assert_fail@plt+0xe750>
   20474:	ldrb	r3, [r2, #16]
   20478:	vmul.f32	s15, s15, s11
   2047c:	cmp	r3, #0
   20480:	beq	204e0 <__assert_fail@plt+0xe76c>
   20484:	vcvt.u32.f32	s15, s15
   20488:	mov	r0, r4
   2048c:	vmov	r1, s15
   20490:	bl	1fd0c <__assert_fail@plt+0xdf98>
   20494:	cmp	r0, #0
   20498:	bne	203a4 <__assert_fail@plt+0xe630>
   2049c:	ldr	r0, [r4, #36]	; 0x24
   204a0:	cmp	r0, #0
   204a4:	beq	204b8 <__assert_fail@plt+0xe744>
   204a8:	ldr	r6, [r0, #4]
   204ac:	bl	1ee98 <__assert_fail@plt+0xd124>
   204b0:	subs	r0, r6, #0
   204b4:	bne	204a8 <__assert_fail@plt+0xe734>
   204b8:	mov	r3, #0
   204bc:	str	r3, [r4, #36]	; 0x24
   204c0:	b	203a4 <__assert_fail@plt+0xe630>
   204c4:	vldr	s13, [pc, #44]	; 204f8 <__assert_fail@plt+0xe784>
   204c8:	str	r3, [r4, #20]
   204cc:	vmul.f32	s13, s15, s13
   204d0:	vcmpe.f32	s14, s13
   204d4:	vmrs	APSR_nzcv, fpscr
   204d8:	bpl	203a4 <__assert_fail@plt+0xe630>
   204dc:	vldr	s12, [pc, #24]	; 204fc <__assert_fail@plt+0xe788>
   204e0:	vmul.f32	s15, s15, s12
   204e4:	b	20484 <__assert_fail@plt+0xe710>
   204e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   204ec:	svccc	0x00666666
   204f0:	svccc	0x008ccccd
   204f4:	svccc	0x00800000
   204f8:	andeq	r0, r0, r0
   204fc:	svccc	0x004ccccd
   20500:	strd	r4, [sp, #-16]!
   20504:	mov	r3, #1
   20508:	mov	r4, r0
   2050c:	str	r6, [sp, #8]
   20510:	str	lr, [sp, #12]
   20514:	sub	sp, sp, #8
   20518:	add	r2, sp, #4
   2051c:	bl	1efb8 <__assert_fail@plt+0xd244>
   20520:	subs	r5, r0, #0
   20524:	beq	20544 <__assert_fail@plt+0xe7d0>
   20528:	ldr	r2, [sp, #4]
   2052c:	ldr	r3, [r4, #16]
   20530:	ldr	r2, [r2]
   20534:	sub	r3, r3, #1
   20538:	str	r3, [r4, #16]
   2053c:	cmp	r2, #0
   20540:	beq	2055c <__assert_fail@plt+0xe7e8>
   20544:	mov	r0, r5
   20548:	add	sp, sp, #8
   2054c:	ldrd	r4, [sp]
   20550:	ldr	r6, [sp, #8]
   20554:	add	sp, sp, #12
   20558:	pop	{pc}		; (ldr pc, [sp], #4)
   2055c:	vldr	s15, [r4, #8]
   20560:	ldr	r3, [r4, #12]
   20564:	ldr	r2, [r4, #20]
   20568:	vcvt.f32.u32	s15, s15
   2056c:	sub	r3, r3, #1
   20570:	vmov	s14, r3
   20574:	vldr	s13, [r2]
   20578:	str	r3, [r4, #12]
   2057c:	vmul.f32	s12, s13, s15
   20580:	vcvt.f32.u32	s14, s14
   20584:	vcmpe.f32	s14, s12
   20588:	vmrs	APSR_nzcv, fpscr
   2058c:	bpl	20544 <__assert_fail@plt+0xe7d0>
   20590:	movw	r3, #216	; 0xd8
   20594:	movt	r3, #3
   20598:	cmp	r2, r3
   2059c:	beq	2067c <__assert_fail@plt+0xe908>
   205a0:	vldr	s11, [pc, #224]	; 20688 <__assert_fail@plt+0xe914>
   205a4:	vldr	s12, [r2, #8]
   205a8:	vcmpe.f32	s12, s11
   205ac:	vmrs	APSR_nzcv, fpscr
   205b0:	ble	20664 <__assert_fail@plt+0xe8f0>
   205b4:	vldr	s10, [pc, #208]	; 2068c <__assert_fail@plt+0xe918>
   205b8:	vcmpe.f32	s12, s10
   205bc:	vmrs	APSR_nzcv, fpscr
   205c0:	bpl	20664 <__assert_fail@plt+0xe8f0>
   205c4:	vldr	s10, [pc, #196]	; 20690 <__assert_fail@plt+0xe91c>
   205c8:	vldr	s9, [r2, #12]
   205cc:	vcmpe.f32	s9, s10
   205d0:	vmrs	APSR_nzcv, fpscr
   205d4:	ble	20664 <__assert_fail@plt+0xe8f0>
   205d8:	vcmpe.f32	s13, #0.0
   205dc:	vmrs	APSR_nzcv, fpscr
   205e0:	blt	20664 <__assert_fail@plt+0xe8f0>
   205e4:	vadd.f32	s13, s13, s11
   205e8:	vldr	s11, [r2, #4]
   205ec:	vcmpe.f32	s13, s11
   205f0:	vmrs	APSR_nzcv, fpscr
   205f4:	bpl	20664 <__assert_fail@plt+0xe8f0>
   205f8:	vldr	s10, [pc, #148]	; 20694 <__assert_fail@plt+0xe920>
   205fc:	vcmpe.f32	s11, s10
   20600:	vmrs	APSR_nzcv, fpscr
   20604:	bhi	20664 <__assert_fail@plt+0xe8f0>
   20608:	vcmpe.f32	s12, s13
   2060c:	vmrs	APSR_nzcv, fpscr
   20610:	ble	20664 <__assert_fail@plt+0xe8f0>
   20614:	ldrb	r3, [r2, #16]
   20618:	vmul.f32	s15, s15, s11
   2061c:	cmp	r3, #0
   20620:	beq	20680 <__assert_fail@plt+0xe90c>
   20624:	vcvt.u32.f32	s15, s15
   20628:	mov	r0, r4
   2062c:	vmov	r1, s15
   20630:	bl	1fd0c <__assert_fail@plt+0xdf98>
   20634:	cmp	r0, #0
   20638:	bne	20544 <__assert_fail@plt+0xe7d0>
   2063c:	ldr	r0, [r4, #36]	; 0x24
   20640:	cmp	r0, #0
   20644:	beq	20658 <__assert_fail@plt+0xe8e4>
   20648:	ldr	r6, [r0, #4]
   2064c:	bl	1ee98 <__assert_fail@plt+0xd124>
   20650:	subs	r0, r6, #0
   20654:	bne	20648 <__assert_fail@plt+0xe8d4>
   20658:	mov	r3, #0
   2065c:	str	r3, [r4, #36]	; 0x24
   20660:	b	20544 <__assert_fail@plt+0xe7d0>
   20664:	vldr	s13, [pc, #44]	; 20698 <__assert_fail@plt+0xe924>
   20668:	str	r3, [r4, #20]
   2066c:	vmul.f32	s13, s15, s13
   20670:	vcmpe.f32	s14, s13
   20674:	vmrs	APSR_nzcv, fpscr
   20678:	bpl	20544 <__assert_fail@plt+0xe7d0>
   2067c:	vldr	s12, [pc, #24]	; 2069c <__assert_fail@plt+0xe928>
   20680:	vmul.f32	s15, s15, s12
   20684:	b	20624 <__assert_fail@plt+0xe8b0>
   20688:	stclcc	12, cr12, [ip, #820]	; 0x334
   2068c:	svccc	0x00666666
   20690:	svccc	0x008ccccd
   20694:	svccc	0x00800000
   20698:	andeq	r0, r0, r0
   2069c:	svccc	0x004ccccd
   206a0:	strd	r4, [sp, #-16]!
   206a4:	mov	r4, r0
   206a8:	mov	r5, r1
   206ac:	ldr	r0, [r0]
   206b0:	str	r6, [sp, #8]
   206b4:	str	lr, [sp, #12]
   206b8:	bl	2b888 <_obstack_memory_used@@Base+0x67d0>
   206bc:	ldr	ip, [r4, #8]
   206c0:	mov	r2, r5
   206c4:	mov	r3, #0
   206c8:	ldr	r1, [r4, #12]
   206cc:	eor	r0, r0, ip
   206d0:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   206d4:	ldrd	r4, [sp]
   206d8:	mov	r0, r2
   206dc:	ldr	r6, [sp, #8]
   206e0:	add	sp, sp, #12
   206e4:	pop	{pc}		; (ldr pc, [sp], #4)
   206e8:	strd	r4, [sp, #-16]!
   206ec:	ldrd	r2, [r1, #8]
   206f0:	ldrd	r4, [r0, #8]
   206f4:	str	r6, [sp, #8]
   206f8:	str	lr, [sp, #12]
   206fc:	cmp	r5, r3
   20700:	cmpeq	r4, r2
   20704:	beq	2071c <__assert_fail@plt+0xe9a8>
   20708:	ldrd	r4, [sp]
   2070c:	mov	r0, #0
   20710:	ldr	r6, [sp, #8]
   20714:	add	sp, sp, #12
   20718:	pop	{pc}		; (ldr pc, [sp], #4)
   2071c:	ldrd	r4, [r0, #16]
   20720:	ldrd	r2, [r1, #16]
   20724:	cmp	r5, r3
   20728:	cmpeq	r4, r2
   2072c:	bne	20708 <__assert_fail@plt+0xe994>
   20730:	ldr	r0, [r0]
   20734:	ldr	r1, [r1]
   20738:	bl	118a0 <strcmp@plt>
   2073c:	clz	r0, r0
   20740:	ldrd	r4, [sp]
   20744:	lsr	r0, r0, #5
   20748:	ldr	r6, [sp, #8]
   2074c:	add	sp, sp, #12
   20750:	pop	{pc}		; (ldr pc, [sp], #4)
   20754:	str	r4, [sp, #-8]!
   20758:	mov	r4, r0
   2075c:	ldr	r0, [r0]
   20760:	str	lr, [sp, #4]
   20764:	bl	1ee98 <__assert_fail@plt+0xd124>
   20768:	mov	r0, r4
   2076c:	ldr	r4, [sp]
   20770:	ldr	lr, [sp, #4]
   20774:	add	sp, sp, #8
   20778:	b	1ee98 <__assert_fail@plt+0xd124>
   2077c:	andeq	r0, r0, r0
   20780:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20784:	strd	r6, [sp, #8]
   20788:	mov	r6, r3
   2078c:	ands	r3, r3, #32
   20790:	strd	r8, [sp, #16]
   20794:	mov	r9, r1
   20798:	moveq	r1, #1000	; 0x3e8
   2079c:	strd	sl, [sp, #24]
   207a0:	movne	r1, #1024	; 0x400
   207a4:	mov	r8, r0
   207a8:	str	lr, [sp, #32]
   207ac:	vpush	{d8-d9}
   207b0:	sub	sp, sp, #108	; 0x6c
   207b4:	str	r2, [sp, #12]
   207b8:	moveq	r2, #1000	; 0x3e8
   207bc:	movne	r2, #1024	; 0x400
   207c0:	str	r3, [sp, #40]	; 0x28
   207c4:	and	r3, r6, #3
   207c8:	str	r1, [sp, #16]
   207cc:	str	r3, [sp, #32]
   207d0:	mov	r3, #0
   207d4:	strd	r2, [sp, #24]
   207d8:	str	r1, [sp, #36]	; 0x24
   207dc:	bl	11c9c <localeconv@plt>
   207e0:	ldr	r3, [sp, #12]
   207e4:	mov	r4, r0
   207e8:	add	r2, r3, #644	; 0x284
   207ec:	ldr	r3, [r0]
   207f0:	add	r2, r2, #3
   207f4:	str	r2, [sp, #32]
   207f8:	mov	r0, r3
   207fc:	mov	r5, r3
   20800:	bl	11b94 <strlen@plt>
   20804:	ldmib	r4, {r7, sl}
   20808:	sub	r2, r0, #1
   2080c:	movw	r3, #64316	; 0xfb3c
   20810:	movt	r3, #2
   20814:	cmp	r2, #16
   20818:	movcc	r3, r5
   2081c:	mov	fp, r0
   20820:	movcs	fp, #1
   20824:	str	r3, [sp, #44]	; 0x2c
   20828:	mov	r0, r7
   2082c:	bl	11b94 <strlen@plt>
   20830:	cmp	r0, #16
   20834:	movw	r3, #316	; 0x13c
   20838:	movt	r3, #3
   2083c:	ldrd	r0, [sp, #160]	; 0xa0
   20840:	movhi	r7, r3
   20844:	ldrd	r2, [sp, #168]	; 0xa8
   20848:	cmp	r3, r1
   2084c:	cmpeq	r2, r0
   20850:	bhi	20b68 <__assert_fail@plt+0xedf4>
   20854:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20858:	orrs	r3, r2, r3
   2085c:	bne	20890 <__assert_fail@plt+0xeb1c>
   20860:	mul	ip, r0, r9
   20864:	mov	r3, r1
   20868:	mov	r2, r0
   2086c:	umull	r4, r5, r0, r8
   20870:	mla	r1, r8, r1, ip
   20874:	mov	r0, r4
   20878:	add	r5, r1, r5
   2087c:	mov	r1, r5
   20880:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20884:	cmp	r1, r9
   20888:	cmpeq	r0, r8
   2088c:	beq	21168 <__assert_fail@plt+0xf3f4>
   20890:	ldrd	r0, [sp, #160]	; 0xa0
   20894:	bl	2bc8c <_obstack_memory_used@@Base+0x6bd4>
   20898:	vmov	d9, r0, r1
   2089c:	ldrd	r0, [sp, #168]	; 0xa8
   208a0:	bl	2bc8c <_obstack_memory_used@@Base+0x6bd4>
   208a4:	vmov	d7, r0, r1
   208a8:	mov	r0, r8
   208ac:	mov	r1, r9
   208b0:	vdiv.f64	d8, d9, d7
   208b4:	bl	2bc8c <_obstack_memory_used@@Base+0x6bd4>
   208b8:	vmov	d7, r0, r1
   208bc:	tst	r6, #16
   208c0:	vmul.f64	d8, d8, d7
   208c4:	beq	20a90 <__assert_fail@plt+0xed1c>
   208c8:	vldr	s15, [sp, #16]
   208cc:	vcvt.f64.s32	d7, s15
   208d0:	vmul.f64	d6, d7, d7
   208d4:	vcmpe.f64	d8, d6
   208d8:	vmrs	APSR_nzcv, fpscr
   208dc:	blt	213c4 <__assert_fail@plt+0xf650>
   208e0:	vmul.f64	d5, d7, d6
   208e4:	vcmpe.f64	d8, d5
   208e8:	vmrs	APSR_nzcv, fpscr
   208ec:	blt	213d0 <__assert_fail@plt+0xf65c>
   208f0:	vmul.f64	d6, d7, d5
   208f4:	vcmpe.f64	d8, d6
   208f8:	vmrs	APSR_nzcv, fpscr
   208fc:	blt	213e0 <__assert_fail@plt+0xf66c>
   20900:	vmul.f64	d5, d7, d6
   20904:	vcmpe.f64	d8, d5
   20908:	vmrs	APSR_nzcv, fpscr
   2090c:	blt	21404 <__assert_fail@plt+0xf690>
   20910:	vmul.f64	d6, d7, d5
   20914:	vcmpe.f64	d8, d6
   20918:	vmrs	APSR_nzcv, fpscr
   2091c:	blt	21414 <__assert_fail@plt+0xf6a0>
   20920:	vmul.f64	d5, d7, d6
   20924:	vcmpe.f64	d8, d5
   20928:	vmrs	APSR_nzcv, fpscr
   2092c:	blt	21424 <__assert_fail@plt+0xf6b0>
   20930:	vmul.f64	d7, d7, d5
   20934:	vcmpe.f64	d8, d7
   20938:	vmrs	APSR_nzcv, fpscr
   2093c:	movlt	r3, #7
   20940:	vmovlt.f64	d7, d5
   20944:	strlt	r3, [sp, #16]
   20948:	blt	20954 <__assert_fail@plt+0xebe0>
   2094c:	mov	r3, #8
   20950:	str	r3, [sp, #16]
   20954:	ands	r3, r6, #32
   20958:	and	r9, r6, #3
   2095c:	vdiv.f64	d9, d8, d7
   20960:	clz	r4, r3
   20964:	add	fp, fp, #1
   20968:	lsr	r4, r4, #5
   2096c:	cmp	r9, #1
   20970:	add	r4, r4, #1
   20974:	add	r4, r4, fp
   20978:	beq	21220 <__assert_fail@plt+0xf4ac>
   2097c:	vldr	d7, [pc, #468]	; 20b58 <__assert_fail@plt+0xede4>
   20980:	vcmpe.f64	d9, d7
   20984:	vmrs	APSR_nzcv, fpscr
   20988:	vmovpl.f64	d7, d9
   2098c:	bpl	209cc <__assert_fail@plt+0xec58>
   20990:	vmov	r0, r1, d9
   20994:	bl	2be20 <_obstack_memory_used@@Base+0x6d68>
   20998:	mov	r5, r0
   2099c:	mov	r8, r1
   209a0:	bl	2bc8c <_obstack_memory_used@@Base+0x6bd4>
   209a4:	cmp	r9, #0
   209a8:	vmov	d7, r0, r1
   209ac:	bne	209cc <__assert_fail@plt+0xec58>
   209b0:	vcmp.f64	d9, d7
   209b4:	vmrs	APSR_nzcv, fpscr
   209b8:	beq	209cc <__assert_fail@plt+0xec58>
   209bc:	adds	r0, r5, #1
   209c0:	adc	r1, r8, #0
   209c4:	bl	2bc8c <_obstack_memory_used@@Base+0x6bd4>
   209c8:	vmov	d7, r0, r1
   209cc:	ldr	r5, [sp, #12]
   209d0:	mvn	r2, #0
   209d4:	mov	r1, #1
   209d8:	movw	r3, #384	; 0x180
   209dc:	movt	r3, #3
   209e0:	vstr	d7, [sp]
   209e4:	mov	r0, r5
   209e8:	bl	11bc4 <__sprintf_chk@plt>
   209ec:	mov	r0, r5
   209f0:	bl	11b94 <strlen@plt>
   209f4:	cmp	r0, r4
   209f8:	bls	21100 <__assert_fail@plt+0xf38c>
   209fc:	vldr	d7, [pc, #348]	; 20b60 <__assert_fail@plt+0xedec>
   20a00:	vmul.f64	d9, d9, d7
   20a04:	vldr	d7, [pc, #332]	; 20b58 <__assert_fail@plt+0xede4>
   20a08:	vcmpe.f64	d9, d7
   20a0c:	vmrs	APSR_nzcv, fpscr
   20a10:	bpl	20a58 <__assert_fail@plt+0xece4>
   20a14:	vmov	r0, r1, d9
   20a18:	bl	2be20 <_obstack_memory_used@@Base+0x6d68>
   20a1c:	mov	r4, r0
   20a20:	mov	r5, r1
   20a24:	bl	2bc8c <_obstack_memory_used@@Base+0x6bd4>
   20a28:	and	r3, r6, #3
   20a2c:	vmov	d7, r0, r1
   20a30:	cmp	r3, #0
   20a34:	bne	20a54 <__assert_fail@plt+0xece0>
   20a38:	vcmp.f64	d9, d7
   20a3c:	vmrs	APSR_nzcv, fpscr
   20a40:	beq	20a54 <__assert_fail@plt+0xece0>
   20a44:	adds	r0, r4, #1
   20a48:	adc	r1, r5, #0
   20a4c:	bl	2bc8c <_obstack_memory_used@@Base+0x6bd4>
   20a50:	vmov	d7, r0, r1
   20a54:	vmov.f64	d9, d7
   20a58:	vldr	d6, [pc, #256]	; 20b60 <__assert_fail@plt+0xedec>
   20a5c:	mvn	r2, #0
   20a60:	mov	r1, #1
   20a64:	movw	r3, #376	; 0x178
   20a68:	movt	r3, #3
   20a6c:	ldr	r4, [sp, #12]
   20a70:	vdiv.f64	d7, d9, d6
   20a74:	mov	r0, r4
   20a78:	vstr	d7, [sp]
   20a7c:	bl	11bc4 <__sprintf_chk@plt>
   20a80:	mov	r0, r4
   20a84:	bl	11b94 <strlen@plt>
   20a88:	mov	r9, r0
   20a8c:	b	20adc <__assert_fail@plt+0xed68>
   20a90:	and	r8, r6, #3
   20a94:	cmp	r8, #1
   20a98:	beq	20aac <__assert_fail@plt+0xed38>
   20a9c:	vldr	d7, [pc, #180]	; 20b58 <__assert_fail@plt+0xede4>
   20aa0:	vcmpe.f64	d8, d7
   20aa4:	vmrs	APSR_nzcv, fpscr
   20aa8:	bmi	21124 <__assert_fail@plt+0xf3b0>
   20aac:	ldr	r4, [sp, #12]
   20ab0:	mvn	r2, #0
   20ab4:	mov	r1, #1
   20ab8:	movw	r3, #376	; 0x178
   20abc:	movt	r3, #3
   20ac0:	vstr	d8, [sp]
   20ac4:	str	r2, [sp, #16]
   20ac8:	mov	r0, r4
   20acc:	bl	11bc4 <__sprintf_chk@plt>
   20ad0:	mov	r0, r4
   20ad4:	bl	11b94 <strlen@plt>
   20ad8:	mov	r9, r0
   20adc:	mov	r2, r0
   20ae0:	ldr	r1, [sp, #12]
   20ae4:	ldr	r3, [sp, #32]
   20ae8:	sub	r8, r3, r0
   20aec:	mov	r0, r8
   20af0:	add	r9, r8, r9
   20af4:	bl	118f4 <memmove@plt>
   20af8:	tst	r6, #4
   20afc:	bne	20ef4 <__assert_fail@plt+0xf180>
   20b00:	tst	r6, #128	; 0x80
   20b04:	beq	20b24 <__assert_fail@plt+0xedb0>
   20b08:	ldr	r3, [sp, #16]
   20b0c:	cmn	r3, #1
   20b10:	beq	20f94 <__assert_fail@plt+0xf220>
   20b14:	ldr	r2, [sp, #16]
   20b18:	and	r3, r6, #256	; 0x100
   20b1c:	orrs	r2, r3, r2
   20b20:	bne	21298 <__assert_fail@plt+0xf524>
   20b24:	ldr	r2, [sp, #32]
   20b28:	mov	r3, #0
   20b2c:	mov	r0, r8
   20b30:	strb	r3, [r2]
   20b34:	add	sp, sp, #108	; 0x6c
   20b38:	vpop	{d8-d9}
   20b3c:	ldrd	r4, [sp]
   20b40:	ldrd	r6, [sp, #8]
   20b44:	ldrd	r8, [sp, #16]
   20b48:	ldrd	sl, [sp, #24]
   20b4c:	add	sp, sp, #32
   20b50:	pop	{pc}		; (ldr pc, [sp], #4)
   20b54:	nop	{0}
   20b58:	andeq	r0, r0, r0
   20b5c:	mvnsmi	r0, #0
   20b60:	andeq	r0, r0, r0
   20b64:	eormi	r0, r4, r0
   20b68:	mov	r2, r0
   20b6c:	mov	r3, r1
   20b70:	orrs	r3, r2, r3
   20b74:	beq	20890 <__assert_fail@plt+0xeb1c>
   20b78:	ldrd	r2, [sp, #160]	; 0xa0
   20b7c:	ldrd	r0, [sp, #168]	; 0xa8
   20b80:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20b84:	orrs	r3, r2, r3
   20b88:	mov	r4, r0
   20b8c:	mov	r5, r1
   20b90:	bne	20890 <__assert_fail@plt+0xeb1c>
   20b94:	mov	r0, r8
   20b98:	mov	r1, r9
   20b9c:	mov	r2, r4
   20ba0:	mov	r3, r5
   20ba4:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20ba8:	mov	lr, r2
   20bac:	mov	r8, r1
   20bb0:	lsl	r1, r3, #2
   20bb4:	mov	r9, r0
   20bb8:	lsl	r0, lr, #2
   20bbc:	mov	ip, r3
   20bc0:	orr	r1, r1, lr, lsr #30
   20bc4:	mov	r2, r4
   20bc8:	mov	r3, r5
   20bcc:	adds	r0, r0, lr
   20bd0:	strd	r4, [sp, #16]
   20bd4:	mov	r4, r9
   20bd8:	adc	r1, r1, ip
   20bdc:	adds	r0, r0, r0
   20be0:	adc	r1, r1, r1
   20be4:	mov	r5, r8
   20be8:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20bec:	adds	r1, r2, r2
   20bf0:	adc	r3, r3, r3
   20bf4:	str	r1, [sp, #48]	; 0x30
   20bf8:	str	r3, [sp, #52]	; 0x34
   20bfc:	ldrd	r2, [sp, #16]
   20c00:	ldrd	r8, [sp, #48]	; 0x30
   20c04:	str	r0, [sp, #48]	; 0x30
   20c08:	cmp	r3, r9
   20c0c:	cmpeq	r2, r8
   20c10:	bls	2128c <__assert_fail@plt+0xf518>
   20c14:	mov	r3, r8
   20c18:	orrs	r3, r3, r9
   20c1c:	movne	r8, #1
   20c20:	moveq	r8, #0
   20c24:	ands	r3, r6, #16
   20c28:	str	r3, [sp, #16]
   20c2c:	beq	2117c <__assert_fail@plt+0xf408>
   20c30:	ldrd	r2, [sp, #24]
   20c34:	cmp	r5, r3
   20c38:	cmpeq	r4, r2
   20c3c:	bcc	212e4 <__assert_fail@plt+0xf570>
   20c40:	mov	r0, r4
   20c44:	mov	r1, r5
   20c48:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20c4c:	ldr	ip, [sp, #48]	; 0x30
   20c50:	add	r2, r2, r2, lsl #2
   20c54:	mov	r4, r0
   20c58:	asr	r3, r8, #1
   20c5c:	mov	r5, r1
   20c60:	add	r2, ip, r2, lsl #1
   20c64:	ldr	ip, [sp, #36]	; 0x24
   20c68:	udiv	r9, r2, ip
   20c6c:	mls	r2, ip, r9, r2
   20c70:	str	r9, [sp, #48]	; 0x30
   20c74:	add	r2, r3, r2, lsl #1
   20c78:	cmp	ip, r2
   20c7c:	add	r2, r8, r2
   20c80:	bhi	2131c <__assert_fail@plt+0xf5a8>
   20c84:	cmp	ip, r2
   20c88:	mov	ip, #1
   20c8c:	movcc	r8, #3
   20c90:	movcs	r8, #2
   20c94:	ldrd	r2, [sp, #24]
   20c98:	cmp	r1, r3
   20c9c:	cmpeq	r0, r2
   20ca0:	bcc	21568 <__assert_fail@plt+0xf7f4>
   20ca4:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20ca8:	add	r2, r2, r2, lsl #2
   20cac:	ldr	ip, [sp, #36]	; 0x24
   20cb0:	mov	r4, r0
   20cb4:	asr	r3, r8, #1
   20cb8:	mov	r5, r1
   20cbc:	add	r2, r9, r2, lsl #1
   20cc0:	udiv	r9, r2, ip
   20cc4:	mls	r2, ip, r9, r2
   20cc8:	str	r9, [sp, #48]	; 0x30
   20ccc:	add	r3, r3, r2, lsl #1
   20cd0:	cmp	ip, r3
   20cd4:	add	r3, r8, r3
   20cd8:	bhi	2135c <__assert_fail@plt+0xf5e8>
   20cdc:	cmp	ip, r3
   20ce0:	mov	ip, #1
   20ce4:	movcc	r8, #3
   20ce8:	movcs	r8, #2
   20cec:	ldrd	r2, [sp, #24]
   20cf0:	cmp	r1, r3
   20cf4:	cmpeq	r0, r2
   20cf8:	bcc	21580 <__assert_fail@plt+0xf80c>
   20cfc:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20d00:	add	r2, r2, r2, lsl #2
   20d04:	mov	r4, r0
   20d08:	mov	r5, r1
   20d0c:	asr	r3, r8, #1
   20d10:	add	r9, r9, r2, lsl #1
   20d14:	ldr	r2, [sp, #36]	; 0x24
   20d18:	udiv	ip, r9, r2
   20d1c:	mls	r9, r2, ip, r9
   20d20:	str	ip, [sp, #16]
   20d24:	str	ip, [sp, #48]	; 0x30
   20d28:	add	r3, r3, r9, lsl #1
   20d2c:	cmp	r2, r3
   20d30:	add	r3, r8, r3
   20d34:	bhi	2136c <__assert_fail@plt+0xf5f8>
   20d38:	cmp	r2, r3
   20d3c:	mov	ip, #1
   20d40:	movcc	r8, #3
   20d44:	movcs	r8, #2
   20d48:	ldrd	r2, [sp, #24]
   20d4c:	cmp	r1, r3
   20d50:	cmpeq	r0, r2
   20d54:	bcc	21574 <__assert_fail@plt+0xf800>
   20d58:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20d5c:	ldr	ip, [sp, #16]
   20d60:	add	r2, r2, r2, lsl #2
   20d64:	mov	r4, r0
   20d68:	asr	r3, r8, #1
   20d6c:	mov	r5, r1
   20d70:	add	r2, ip, r2, lsl #1
   20d74:	ldr	ip, [sp, #36]	; 0x24
   20d78:	udiv	r9, r2, ip
   20d7c:	mls	r2, ip, r9, r2
   20d80:	str	r9, [sp, #48]	; 0x30
   20d84:	add	r3, r3, r2, lsl #1
   20d88:	cmp	ip, r3
   20d8c:	add	r3, r8, r3
   20d90:	bhi	21394 <__assert_fail@plt+0xf620>
   20d94:	cmp	r3, ip
   20d98:	mov	ip, #1
   20d9c:	movhi	r8, #3
   20da0:	movls	r8, #2
   20da4:	ldrd	r2, [sp, #24]
   20da8:	cmp	r1, r3
   20dac:	cmpeq	r0, r2
   20db0:	bcc	2158c <__assert_fail@plt+0xf818>
   20db4:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20db8:	add	r2, r2, r2, lsl #2
   20dbc:	mov	r4, r0
   20dc0:	mov	r5, r1
   20dc4:	asr	r3, r8, #1
   20dc8:	add	r9, r9, r2, lsl #1
   20dcc:	ldr	r2, [sp, #36]	; 0x24
   20dd0:	udiv	ip, r9, r2
   20dd4:	mls	r9, r2, ip, r9
   20dd8:	str	ip, [sp, #16]
   20ddc:	str	ip, [sp, #48]	; 0x30
   20de0:	add	r3, r3, r9, lsl #1
   20de4:	cmp	r2, r3
   20de8:	add	r3, r8, r3
   20dec:	bhi	213a4 <__assert_fail@plt+0xf630>
   20df0:	cmp	r2, r3
   20df4:	mov	ip, #1
   20df8:	movcc	r8, #3
   20dfc:	movcs	r8, #2
   20e00:	ldrd	r2, [sp, #24]
   20e04:	cmp	r1, r3
   20e08:	cmpeq	r0, r2
   20e0c:	bcc	215a4 <__assert_fail@plt+0xf830>
   20e10:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   20e14:	mov	r5, r1
   20e18:	ldr	r1, [sp, #16]
   20e1c:	add	r2, r2, r2, lsl #2
   20e20:	mov	r4, r0
   20e24:	asr	r3, r8, #1
   20e28:	ldr	r0, [sp, #36]	; 0x24
   20e2c:	add	r1, r1, r2, lsl #1
   20e30:	udiv	r2, r1, r0
   20e34:	mls	r1, r0, r2, r1
   20e38:	str	r2, [sp, #48]	; 0x30
   20e3c:	add	r3, r3, r1, lsl #1
   20e40:	cmp	r0, r3
   20e44:	add	r3, r8, r3
   20e48:	bhi	213b4 <__assert_fail@plt+0xf640>
   20e4c:	cmp	r0, r3
   20e50:	mov	ip, #1
   20e54:	movcs	r8, #2
   20e58:	movcc	r8, #3
   20e5c:	mov	r3, #6
   20e60:	str	r3, [sp, #16]
   20e64:	cmp	r5, #0
   20e68:	cmpeq	r4, #9
   20e6c:	bhi	21184 <__assert_fail@plt+0xf410>
   20e70:	and	r3, r6, #3
   20e74:	cmp	r3, #1
   20e78:	beq	21434 <__assert_fail@plt+0xf6c0>
   20e7c:	and	r3, r6, #3
   20e80:	cmp	r3, #0
   20e84:	moveq	r3, ip
   20e88:	movne	r3, #0
   20e8c:	cmp	r3, #0
   20e90:	ldr	r3, [sp, #48]	; 0x30
   20e94:	bne	213f0 <__assert_fail@plt+0xf67c>
   20e98:	cmp	r3, #0
   20e9c:	addne	r3, r3, #48	; 0x30
   20ea0:	uxtbne	r3, r3
   20ea4:	bne	20eb4 <__assert_fail@plt+0xf140>
   20ea8:	tst	r6, #8
   20eac:	bne	2153c <__assert_fail@plt+0xf7c8>
   20eb0:	mov	r3, #48	; 0x30
   20eb4:	ldr	r1, [sp, #12]
   20eb8:	mov	r2, fp
   20ebc:	mov	r8, #0
   20ec0:	add	r9, r1, #644	; 0x284
   20ec4:	strb	r3, [r1, #646]	; 0x286
   20ec8:	add	r9, r9, #2
   20ecc:	ldr	r1, [sp, #44]	; 0x2c
   20ed0:	sub	r9, r9, fp
   20ed4:	mov	r0, r9
   20ed8:	bl	11930 <memcpy@plt>
   20edc:	and	r3, r6, #3
   20ee0:	cmp	r3, #1
   20ee4:	beq	211d4 <__assert_fail@plt+0xf460>
   20ee8:	mov	r3, #0
   20eec:	str	r3, [sp, #48]	; 0x30
   20ef0:	b	21194 <__assert_fail@plt+0xf420>
   20ef4:	mov	r0, r7
   20ef8:	sub	r4, r9, r8
   20efc:	bl	11b94 <strlen@plt>
   20f00:	mov	fp, r0
   20f04:	mov	r1, r8
   20f08:	mov	r2, r4
   20f0c:	add	r0, sp, #60	; 0x3c
   20f10:	mov	r3, #41	; 0x29
   20f14:	mvn	r5, #0
   20f18:	bl	11a20 <__memcpy_chk@plt>
   20f1c:	ldrb	r3, [sl]
   20f20:	cmp	r3, #0
   20f24:	beq	20f38 <__assert_fail@plt+0xf1c4>
   20f28:	cmp	r3, #255	; 0xff
   20f2c:	add	sl, sl, #1
   20f30:	movne	r5, r3
   20f34:	moveq	r5, r4
   20f38:	sub	r8, r9, r5
   20f3c:	cmp	r5, r4
   20f40:	mov	r2, r5
   20f44:	mov	r0, r8
   20f48:	bls	20f64 <__assert_fail@plt+0xf1f0>
   20f4c:	sub	r8, r9, r4
   20f50:	mov	r2, r4
   20f54:	add	r1, sp, #60	; 0x3c
   20f58:	mov	r0, r8
   20f5c:	bl	11930 <memcpy@plt>
   20f60:	b	20b00 <__assert_fail@plt+0xed8c>
   20f64:	sub	r4, r4, r5
   20f68:	add	r3, sp, #60	; 0x3c
   20f6c:	add	r1, r3, r4
   20f70:	sub	r9, r8, fp
   20f74:	bl	11930 <memcpy@plt>
   20f78:	cmp	r4, #0
   20f7c:	mov	r2, fp
   20f80:	mov	r1, r7
   20f84:	mov	r0, r9
   20f88:	beq	20b00 <__assert_fail@plt+0xed8c>
   20f8c:	bl	11930 <memcpy@plt>
   20f90:	b	20f1c <__assert_fail@plt+0xf1a8>
   20f94:	ldrd	r2, [sp, #168]	; 0xa8
   20f98:	cmp	r3, #0
   20f9c:	cmpeq	r2, #1
   20fa0:	bls	21350 <__assert_fail@plt+0xf5dc>
   20fa4:	mov	r0, r2
   20fa8:	mov	r1, r3
   20fac:	ldrd	r2, [sp, #24]
   20fb0:	cmp	r1, r3
   20fb4:	cmpeq	r0, r2
   20fb8:	bls	215e4 <__assert_fail@plt+0xf870>
   20fbc:	mul	r1, r2, r3
   20fc0:	mov	r4, r2
   20fc4:	mov	r5, r3
   20fc8:	umull	sl, fp, r2, r2
   20fcc:	add	fp, fp, r1, lsl #1
   20fd0:	ldrd	r0, [sp, #168]	; 0xa8
   20fd4:	cmp	r1, fp
   20fd8:	cmpeq	r0, sl
   20fdc:	bls	21450 <__assert_fail@plt+0xf6dc>
   20fe0:	mul	r3, r2, fp
   20fe4:	umull	r0, r1, r4, sl
   20fe8:	mla	r2, sl, r5, r3
   20fec:	strd	r0, [sp, #16]
   20ff0:	add	r3, r2, r1
   20ff4:	str	r3, [sp, #20]
   20ff8:	ldrd	sl, [sp, #16]
   20ffc:	ldrd	r2, [sp, #168]	; 0xa8
   21000:	cmp	r3, fp
   21004:	cmpeq	r2, sl
   21008:	bls	21484 <__assert_fail@plt+0xf710>
   2100c:	ldr	r2, [sp, #16]
   21010:	mul	r1, r4, fp
   21014:	umull	sl, fp, r4, sl
   21018:	mla	r0, r2, r5, r1
   2101c:	ldrd	r2, [sp, #168]	; 0xa8
   21020:	add	fp, r0, fp
   21024:	cmp	r3, fp
   21028:	cmpeq	r2, sl
   2102c:	bls	215b0 <__assert_fail@plt+0xf83c>
   21030:	mul	r3, r4, fp
   21034:	umull	r0, r1, r4, sl
   21038:	mla	r2, sl, r5, r3
   2103c:	add	r1, r2, r1
   21040:	ldrd	r2, [sp, #168]	; 0xa8
   21044:	cmp	r3, r1
   21048:	cmpeq	r2, r0
   2104c:	bls	214b8 <__assert_fail@plt+0xf744>
   21050:	mul	ip, r0, r5
   21054:	mov	lr, r4
   21058:	umull	r2, r3, r0, r4
   2105c:	mla	r1, r4, r1, ip
   21060:	add	r3, r1, r3
   21064:	ldrd	r0, [sp, #168]	; 0xa8
   21068:	cmp	r1, r3
   2106c:	cmpeq	r0, r2
   21070:	bls	214ec <__assert_fail@plt+0xf778>
   21074:	mul	ip, r2, r5
   21078:	umull	r0, r1, r2, r4
   2107c:	mla	r3, r4, r3, ip
   21080:	add	r1, r3, r1
   21084:	ldrd	r2, [sp, #168]	; 0xa8
   21088:	cmp	r3, r1
   2108c:	cmpeq	r2, r0
   21090:	bls	21630 <__assert_fail@plt+0xf8bc>
   21094:	tst	r6, #64	; 0x40
   21098:	and	r3, r6, #256	; 0x100
   2109c:	beq	210b4 <__assert_fail@plt+0xf340>
   210a0:	ldr	r1, [sp, #12]
   210a4:	mov	r2, #32
   210a8:	add	r0, r1, #648	; 0x288
   210ac:	strb	r2, [r1, #647]	; 0x287
   210b0:	str	r0, [sp, #32]
   210b4:	mov	r2, #8
   210b8:	str	r2, [sp, #16]
   210bc:	ldr	r2, [sp, #40]	; 0x28
   210c0:	adds	r1, r2, #0
   210c4:	movne	r1, #1
   210c8:	ldr	r0, [sp, #16]
   210cc:	movw	r2, #344	; 0x158
   210d0:	movt	r2, #3
   210d4:	cmp	r3, #0
   210d8:	ldrb	r0, [r2, r0]
   210dc:	ldr	r2, [sp, #32]
   210e0:	strb	r0, [r2], #1
   210e4:	beq	212dc <__assert_fail@plt+0xf568>
   210e8:	cmp	r1, #0
   210ec:	bne	212f0 <__assert_fail@plt+0xf57c>
   210f0:	mov	r3, #66	; 0x42
   210f4:	strb	r3, [r2], #1
   210f8:	str	r2, [sp, #32]
   210fc:	b	20b24 <__assert_fail@plt+0xedb0>
   21100:	tst	r6, #8
   21104:	beq	2111c <__assert_fail@plt+0xf3a8>
   21108:	ldr	r3, [sp, #12]
   2110c:	add	r3, r3, r0
   21110:	ldrb	r3, [r3, #-1]
   21114:	cmp	r3, #48	; 0x30
   21118:	beq	2137c <__assert_fail@plt+0xf608>
   2111c:	sub	r9, r0, fp
   21120:	b	20adc <__assert_fail@plt+0xed68>
   21124:	vmov	r0, r1, d8
   21128:	bl	2be20 <_obstack_memory_used@@Base+0x6d68>
   2112c:	mov	r4, r0
   21130:	mov	r5, r1
   21134:	bl	2bc8c <_obstack_memory_used@@Base+0x6bd4>
   21138:	cmp	r8, #0
   2113c:	vmov	d7, r0, r1
   21140:	bne	21160 <__assert_fail@plt+0xf3ec>
   21144:	vcmp.f64	d8, d7
   21148:	vmrs	APSR_nzcv, fpscr
   2114c:	beq	21160 <__assert_fail@plt+0xf3ec>
   21150:	adds	r0, r4, #1
   21154:	adc	r1, r5, #0
   21158:	bl	2bc8c <_obstack_memory_used@@Base+0x6bd4>
   2115c:	vmov	d7, r0, r1
   21160:	vmov.f64	d8, d7
   21164:	b	20aac <__assert_fail@plt+0xed38>
   21168:	mov	r8, #0
   2116c:	ands	r3, r6, #16
   21170:	str	r3, [sp, #16]
   21174:	str	r8, [sp, #48]	; 0x30
   21178:	bne	20c30 <__assert_fail@plt+0xeebc>
   2117c:	mvn	r3, #0
   21180:	str	r3, [sp, #16]
   21184:	and	r3, r6, #3
   21188:	cmp	r3, #1
   2118c:	beq	2125c <__assert_fail@plt+0xf4e8>
   21190:	ldr	r9, [sp, #32]
   21194:	and	r3, r6, #3
   21198:	cmp	r3, #0
   2119c:	bne	211d4 <__assert_fail@plt+0xf460>
   211a0:	ldr	r3, [sp, #48]	; 0x30
   211a4:	add	r3, r8, r3
   211a8:	cmp	r3, #0
   211ac:	ble	211d4 <__assert_fail@plt+0xf460>
   211b0:	adds	r4, r4, #1
   211b4:	adc	r5, r5, #0
   211b8:	ands	r3, r6, #16
   211bc:	cmp	r3, #0
   211c0:	beq	211d4 <__assert_fail@plt+0xf460>
   211c4:	ldrd	r2, [sp, #24]
   211c8:	cmp	r5, r3
   211cc:	cmpeq	r4, r2
   211d0:	beq	2132c <__assert_fail@plt+0xf5b8>
   211d4:	mov	r8, r9
   211d8:	mov	r0, r4
   211dc:	mov	r1, r5
   211e0:	mov	r2, #10
   211e4:	mov	r3, #0
   211e8:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   211ec:	add	r2, r2, #48	; 0x30
   211f0:	mov	r0, r4
   211f4:	mov	r1, r5
   211f8:	mov	r3, #0
   211fc:	strb	r2, [r8, #-1]!
   21200:	mov	r2, #10
   21204:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   21208:	cmp	r5, #0
   2120c:	mov	r5, r1
   21210:	cmpeq	r4, #9
   21214:	mov	r4, r0
   21218:	bhi	211d8 <__assert_fail@plt+0xf464>
   2121c:	b	20af8 <__assert_fail@plt+0xed84>
   21220:	ldr	r5, [sp, #12]
   21224:	mvn	r2, #0
   21228:	and	r1, r6, #3
   2122c:	movw	r3, #384	; 0x180
   21230:	movt	r3, #3
   21234:	vstr	d9, [sp]
   21238:	mov	r0, r5
   2123c:	bl	11bc4 <__sprintf_chk@plt>
   21240:	mov	r0, r5
   21244:	bl	11b94 <strlen@plt>
   21248:	cmp	r0, r4
   2124c:	bls	21100 <__assert_fail@plt+0xf38c>
   21250:	vldr	d7, [pc, #976]	; 21628 <__assert_fail@plt+0xf8b4>
   21254:	vmul.f64	d9, d9, d7
   21258:	b	20a58 <__assert_fail@plt+0xece4>
   2125c:	and	r0, r4, #1
   21260:	mov	r1, #0
   21264:	ldr	r9, [sp, #32]
   21268:	adds	r2, r0, r8
   2126c:	adc	r3, r1, r8, asr #31
   21270:	orr	r2, r2, r3
   21274:	ldr	r3, [sp, #48]	; 0x30
   21278:	cmp	r2, r1
   2127c:	addne	r3, r3, #1
   21280:	cmp	r3, #5
   21284:	bgt	211b0 <__assert_fail@plt+0xf43c>
   21288:	b	211d4 <__assert_fail@plt+0xf460>
   2128c:	movcs	r8, #2
   21290:	movcc	r8, #3
   21294:	b	20c24 <__assert_fail@plt+0xeeb0>
   21298:	tst	r6, #64	; 0x40
   2129c:	bne	21304 <__assert_fail@plt+0xf590>
   212a0:	ldr	r2, [sp, #16]
   212a4:	cmp	r2, #0
   212a8:	beq	21618 <__assert_fail@plt+0xf8a4>
   212ac:	ldr	r0, [sp, #16]
   212b0:	ldr	r2, [sp, #40]	; 0x28
   212b4:	adds	r1, r2, #0
   212b8:	movne	r1, #1
   212bc:	cmp	r2, #0
   212c0:	cmpeq	r0, #1
   212c4:	bne	210c8 <__assert_fail@plt+0xf354>
   212c8:	ldr	r2, [sp, #32]
   212cc:	mov	r1, #107	; 0x6b
   212d0:	cmp	r3, #0
   212d4:	strb	r1, [r2], #1
   212d8:	bne	210f0 <__assert_fail@plt+0xf37c>
   212dc:	str	r2, [sp, #32]
   212e0:	b	20b24 <__assert_fail@plt+0xedb0>
   212e4:	mov	r3, #0
   212e8:	str	r3, [sp, #16]
   212ec:	b	21184 <__assert_fail@plt+0xf410>
   212f0:	ldr	r1, [sp, #32]
   212f4:	mov	r3, #105	; 0x69
   212f8:	add	r2, r1, #2
   212fc:	strb	r3, [r1, #1]
   21300:	b	210f0 <__assert_fail@plt+0xf37c>
   21304:	ldr	r1, [sp, #12]
   21308:	mov	r2, #32
   2130c:	add	r0, r1, #648	; 0x288
   21310:	strb	r2, [r1, #647]	; 0x287
   21314:	str	r0, [sp, #32]
   21318:	b	212a0 <__assert_fail@plt+0xf52c>
   2131c:	adds	r8, r2, #0
   21320:	movne	r8, #1
   21324:	mov	ip, r8
   21328:	b	20c94 <__assert_fail@plt+0xef20>
   2132c:	ldr	r3, [sp, #16]
   21330:	tst	r6, #8
   21334:	add	r3, r3, #1
   21338:	str	r3, [sp, #16]
   2133c:	beq	21544 <__assert_fail@plt+0xf7d0>
   21340:	mov	r3, #49	; 0x31
   21344:	sub	r8, r9, #1
   21348:	strb	r3, [r9, #-1]
   2134c:	b	20af8 <__assert_fail@plt+0xed84>
   21350:	mov	r3, #0
   21354:	str	r3, [sp, #16]
   21358:	b	20b14 <__assert_fail@plt+0xeda0>
   2135c:	adds	ip, r3, #0
   21360:	movne	ip, #1
   21364:	mov	r8, ip
   21368:	b	20cec <__assert_fail@plt+0xef78>
   2136c:	adds	ip, r3, #0
   21370:	movne	ip, #1
   21374:	mov	r8, ip
   21378:	b	20d48 <__assert_fail@plt+0xefd4>
   2137c:	vldr	d7, [pc, #676]	; 21628 <__assert_fail@plt+0xf8b4>
   21380:	and	r3, r6, #3
   21384:	cmp	r3, #1
   21388:	vmul.f64	d9, d9, d7
   2138c:	bne	20a04 <__assert_fail@plt+0xec90>
   21390:	b	20a58 <__assert_fail@plt+0xece4>
   21394:	adds	ip, r3, #0
   21398:	movne	ip, #1
   2139c:	mov	r8, ip
   213a0:	b	20da4 <__assert_fail@plt+0xf030>
   213a4:	adds	ip, r3, #0
   213a8:	movne	ip, #1
   213ac:	mov	r8, ip
   213b0:	b	20e00 <__assert_fail@plt+0xf08c>
   213b4:	adds	ip, r3, #0
   213b8:	movne	ip, #1
   213bc:	mov	r8, ip
   213c0:	b	20e5c <__assert_fail@plt+0xf0e8>
   213c4:	mov	r3, #1
   213c8:	str	r3, [sp, #16]
   213cc:	b	20954 <__assert_fail@plt+0xebe0>
   213d0:	mov	r3, #2
   213d4:	vmov.f64	d7, d6
   213d8:	str	r3, [sp, #16]
   213dc:	b	20954 <__assert_fail@plt+0xebe0>
   213e0:	mov	r3, #3
   213e4:	vmov.f64	d7, d5
   213e8:	str	r3, [sp, #16]
   213ec:	b	20954 <__assert_fail@plt+0xebe0>
   213f0:	cmp	r3, #9
   213f4:	beq	21520 <__assert_fail@plt+0xf7ac>
   213f8:	add	r3, r3, #49	; 0x31
   213fc:	uxtb	r3, r3
   21400:	b	20eb4 <__assert_fail@plt+0xf140>
   21404:	mov	r3, #4
   21408:	vmov.f64	d7, d6
   2140c:	str	r3, [sp, #16]
   21410:	b	20954 <__assert_fail@plt+0xebe0>
   21414:	mov	r3, #5
   21418:	vmov.f64	d7, d5
   2141c:	str	r3, [sp, #16]
   21420:	b	20954 <__assert_fail@plt+0xebe0>
   21424:	mov	r3, #6
   21428:	vmov.f64	d7, d6
   2142c:	str	r3, [sp, #16]
   21430:	b	20954 <__assert_fail@plt+0xebe0>
   21434:	ldr	r3, [sp, #48]	; 0x30
   21438:	and	r3, r3, #1
   2143c:	add	r3, r3, r8
   21440:	cmp	r3, #2
   21444:	movle	r3, #0
   21448:	movgt	r3, #1
   2144c:	b	20e8c <__assert_fail@plt+0xf118>
   21450:	tst	r6, #64	; 0x40
   21454:	and	r3, r6, #256	; 0x100
   21458:	moveq	r2, #2
   2145c:	streq	r2, [sp, #16]
   21460:	beq	210bc <__assert_fail@plt+0xf348>
   21464:	ldr	r1, [sp, #12]
   21468:	mov	r2, #32
   2146c:	add	r0, r1, #648	; 0x288
   21470:	strb	r2, [r1, #647]	; 0x287
   21474:	mov	r2, #2
   21478:	str	r2, [sp, #16]
   2147c:	str	r0, [sp, #32]
   21480:	b	210bc <__assert_fail@plt+0xf348>
   21484:	tst	r6, #64	; 0x40
   21488:	and	r3, r6, #256	; 0x100
   2148c:	moveq	r2, #3
   21490:	streq	r2, [sp, #16]
   21494:	beq	210bc <__assert_fail@plt+0xf348>
   21498:	ldr	r1, [sp, #12]
   2149c:	mov	r2, #32
   214a0:	add	r0, r1, #648	; 0x288
   214a4:	strb	r2, [r1, #647]	; 0x287
   214a8:	mov	r2, #3
   214ac:	str	r2, [sp, #16]
   214b0:	str	r0, [sp, #32]
   214b4:	b	210bc <__assert_fail@plt+0xf348>
   214b8:	tst	r6, #64	; 0x40
   214bc:	and	r3, r6, #256	; 0x100
   214c0:	moveq	r2, #5
   214c4:	streq	r2, [sp, #16]
   214c8:	beq	210bc <__assert_fail@plt+0xf348>
   214cc:	ldr	r1, [sp, #12]
   214d0:	mov	r2, #32
   214d4:	add	r0, r1, #648	; 0x288
   214d8:	strb	r2, [r1, #647]	; 0x287
   214dc:	mov	r2, #5
   214e0:	str	r2, [sp, #16]
   214e4:	str	r0, [sp, #32]
   214e8:	b	210bc <__assert_fail@plt+0xf348>
   214ec:	tst	r6, #64	; 0x40
   214f0:	and	r3, r6, #256	; 0x100
   214f4:	moveq	r2, #6
   214f8:	streq	r2, [sp, #16]
   214fc:	beq	210bc <__assert_fail@plt+0xf348>
   21500:	ldr	r1, [sp, #12]
   21504:	mov	r2, #32
   21508:	add	r0, r1, #648	; 0x288
   2150c:	strb	r2, [r1, #647]	; 0x287
   21510:	mov	r2, #6
   21514:	str	r2, [sp, #16]
   21518:	str	r0, [sp, #32]
   2151c:	b	210bc <__assert_fail@plt+0xf348>
   21520:	adds	r4, r4, #1
   21524:	adc	r5, r5, #0
   21528:	cmp	r5, #0
   2152c:	cmpeq	r4, #10
   21530:	beq	21598 <__assert_fail@plt+0xf824>
   21534:	mov	r8, #0
   21538:	b	20ea8 <__assert_fail@plt+0xf134>
   2153c:	ldr	r9, [sp, #32]
   21540:	b	20edc <__assert_fail@plt+0xf168>
   21544:	mov	r0, #48	; 0x30
   21548:	mvn	r3, fp
   2154c:	ldr	r1, [sp, #44]	; 0x2c
   21550:	mov	r2, fp
   21554:	strb	r0, [r9, #-1]
   21558:	add	r9, r9, r3
   2155c:	mov	r0, r9
   21560:	bl	11930 <memcpy@plt>
   21564:	b	21340 <__assert_fail@plt+0xf5cc>
   21568:	mov	r3, #1
   2156c:	str	r3, [sp, #16]
   21570:	b	20e64 <__assert_fail@plt+0xf0f0>
   21574:	mov	r3, #3
   21578:	str	r3, [sp, #16]
   2157c:	b	20e64 <__assert_fail@plt+0xf0f0>
   21580:	mov	r3, #2
   21584:	str	r3, [sp, #16]
   21588:	b	20e64 <__assert_fail@plt+0xf0f0>
   2158c:	mov	r3, #4
   21590:	str	r3, [sp, #16]
   21594:	b	20e64 <__assert_fail@plt+0xf0f0>
   21598:	mov	r8, #0
   2159c:	ldr	r9, [sp, #32]
   215a0:	b	20edc <__assert_fail@plt+0xf168>
   215a4:	mov	r3, #5
   215a8:	str	r3, [sp, #16]
   215ac:	b	20e64 <__assert_fail@plt+0xf0f0>
   215b0:	tst	r6, #64	; 0x40
   215b4:	and	r3, r6, #256	; 0x100
   215b8:	moveq	r2, #4
   215bc:	streq	r2, [sp, #16]
   215c0:	beq	210bc <__assert_fail@plt+0xf348>
   215c4:	ldr	r1, [sp, #12]
   215c8:	mov	r2, #32
   215cc:	add	r0, r1, #648	; 0x288
   215d0:	strb	r2, [r1, #647]	; 0x287
   215d4:	mov	r2, #4
   215d8:	str	r2, [sp, #16]
   215dc:	str	r0, [sp, #32]
   215e0:	b	210bc <__assert_fail@plt+0xf348>
   215e4:	tst	r6, #64	; 0x40
   215e8:	and	r3, r6, #256	; 0x100
   215ec:	moveq	r2, #1
   215f0:	streq	r2, [sp, #16]
   215f4:	beq	212ac <__assert_fail@plt+0xf538>
   215f8:	ldr	r1, [sp, #12]
   215fc:	mov	r2, #32
   21600:	add	r0, r1, #648	; 0x288
   21604:	strb	r2, [r1, #647]	; 0x287
   21608:	mov	r2, #1
   2160c:	str	r2, [sp, #16]
   21610:	str	r0, [sp, #32]
   21614:	b	212ac <__assert_fail@plt+0xf538>
   21618:	cmp	r3, #0
   2161c:	ldrne	r2, [sp, #32]
   21620:	bne	210f0 <__assert_fail@plt+0xf37c>
   21624:	b	20b24 <__assert_fail@plt+0xedb0>
   21628:	andeq	r0, r0, r0
   2162c:	eormi	r0, r4, r0
   21630:	tst	r6, #64	; 0x40
   21634:	and	r3, r6, #256	; 0x100
   21638:	moveq	r2, #7
   2163c:	streq	r2, [sp, #16]
   21640:	beq	210bc <__assert_fail@plt+0xf348>
   21644:	ldr	r1, [sp, #12]
   21648:	mov	r2, #32
   2164c:	add	r0, r1, #648	; 0x288
   21650:	strb	r2, [r1, #647]	; 0x287
   21654:	mov	r2, #7
   21658:	str	r2, [sp, #16]
   2165c:	str	r0, [sp, #32]
   21660:	b	210bc <__assert_fail@plt+0xf348>
   21664:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21668:	subs	r4, r0, #0
   2166c:	strd	r6, [sp, #8]
   21670:	mov	r7, r1
   21674:	mov	r6, r2
   21678:	strd	r8, [sp, #16]
   2167c:	strd	sl, [sp, #24]
   21680:	str	lr, [sp, #32]
   21684:	sub	sp, sp, #20
   21688:	beq	217c8 <__assert_fail@plt+0xfa54>
   2168c:	ldrb	r3, [r4]
   21690:	cmp	r3, #39	; 0x27
   21694:	beq	21708 <__assert_fail@plt+0xf994>
   21698:	mov	r9, #160	; 0xa0
   2169c:	mov	fp, #416	; 0x1a0
   216a0:	mov	sl, #384	; 0x180
   216a4:	mov	r8, #0
   216a8:	movw	r5, #344	; 0x158
   216ac:	movt	r5, #3
   216b0:	add	r2, r5, #12
   216b4:	add	r1, r5, #20
   216b8:	mov	r3, #4
   216bc:	mov	r0, r4
   216c0:	bl	1d26c <__assert_fail@plt+0xb4f8>
   216c4:	cmp	r0, #0
   216c8:	blt	21720 <__assert_fail@plt+0xf9ac>
   216cc:	add	r5, r5, r0, lsl #2
   216d0:	mov	r2, #1
   216d4:	mov	r3, #0
   216d8:	mov	r0, #0
   216dc:	ldr	r1, [r5, #12]
   216e0:	strd	r2, [r6]
   216e4:	orr	r8, r8, r1
   216e8:	str	r8, [r7]
   216ec:	add	sp, sp, #20
   216f0:	ldrd	r4, [sp]
   216f4:	ldrd	r6, [sp, #8]
   216f8:	ldrd	r8, [sp, #16]
   216fc:	ldrd	sl, [sp, #24]
   21700:	add	sp, sp, #32
   21704:	pop	{pc}		; (ldr pc, [sp], #4)
   21708:	add	r4, r4, #1
   2170c:	mov	r9, #164	; 0xa4
   21710:	mov	fp, #420	; 0x1a4
   21714:	mov	sl, #388	; 0x184
   21718:	mov	r8, #4
   2171c:	b	216a8 <__assert_fail@plt+0xf934>
   21720:	movw	r0, #420	; 0x1a4
   21724:	movt	r0, #3
   21728:	mov	r3, r6
   2172c:	mov	r2, #0
   21730:	add	r1, sp, #12
   21734:	str	r0, [sp]
   21738:	mov	r0, r4
   2173c:	bl	2a7b8 <_obstack_memory_used@@Base+0x5700>
   21740:	cmp	r0, #0
   21744:	bne	2178c <__assert_fail@plt+0xfa18>
   21748:	ldrb	r3, [r4]
   2174c:	sub	r3, r3, #48	; 0x30
   21750:	cmp	r3, #9
   21754:	bls	21780 <__assert_fail@plt+0xfa0c>
   21758:	ldr	r2, [sp, #12]
   2175c:	cmp	r4, r2
   21760:	bne	21770 <__assert_fail@plt+0xf9fc>
   21764:	b	2181c <__assert_fail@plt+0xfaa8>
   21768:	cmp	r2, r4
   2176c:	beq	2181c <__assert_fail@plt+0xfaa8>
   21770:	ldrb	r3, [r4, #1]!
   21774:	sub	r3, r3, #48	; 0x30
   21778:	cmp	r3, #9
   2177c:	bhi	21768 <__assert_fail@plt+0xf9f4>
   21780:	ldrd	r2, [r6]
   21784:	str	r8, [r7]
   21788:	b	21798 <__assert_fail@plt+0xfa24>
   2178c:	mov	r1, #0
   21790:	ldrd	r2, [r6]
   21794:	str	r1, [r7]
   21798:	orrs	r3, r2, r3
   2179c:	bne	216ec <__assert_fail@plt+0xf978>
   217a0:	movw	r0, #404	; 0x194
   217a4:	movt	r0, #3
   217a8:	bl	11ac8 <getenv@plt>
   217ac:	cmp	r0, #0
   217b0:	mov	r3, #0
   217b4:	moveq	r2, #1024	; 0x400
   217b8:	movne	r2, #512	; 0x200
   217bc:	mov	r0, #4
   217c0:	strd	r2, [r6]
   217c4:	b	216ec <__assert_fail@plt+0xf978>
   217c8:	movw	r0, #63744	; 0xf900
   217cc:	movt	r0, #2
   217d0:	bl	11ac8 <getenv@plt>
   217d4:	subs	r4, r0, #0
   217d8:	bne	2168c <__assert_fail@plt+0xf918>
   217dc:	movw	r0, #392	; 0x188
   217e0:	movt	r0, #3
   217e4:	bl	11ac8 <getenv@plt>
   217e8:	subs	r4, r0, #0
   217ec:	bne	2168c <__assert_fail@plt+0xf918>
   217f0:	movw	r0, #404	; 0x194
   217f4:	movt	r0, #3
   217f8:	bl	11ac8 <getenv@plt>
   217fc:	subs	r3, r0, #0
   21800:	beq	21848 <__assert_fail@plt+0xfad4>
   21804:	mov	r2, #512	; 0x200
   21808:	mov	r3, #0
   2180c:	mov	r0, r4
   21810:	strd	r2, [r6]
   21814:	str	r4, [r7]
   21818:	b	216ec <__assert_fail@plt+0xf978>
   2181c:	ldrb	r3, [r2, #-1]
   21820:	cmp	r3, #66	; 0x42
   21824:	beq	21830 <__assert_fail@plt+0xfabc>
   21828:	mov	r8, r9
   2182c:	b	21780 <__assert_fail@plt+0xfa0c>
   21830:	ldrb	r3, [r2, #-2]
   21834:	cmp	r3, #105	; 0x69
   21838:	movne	r8, sl
   2183c:	bne	21780 <__assert_fail@plt+0xfa0c>
   21840:	mov	r9, fp
   21844:	b	21828 <__assert_fail@plt+0xfab4>
   21848:	mov	r4, #1024	; 0x400
   2184c:	mov	r5, #0
   21850:	mov	r0, r3
   21854:	strd	r4, [r6]
   21858:	str	r3, [r7]
   2185c:	b	216ec <__assert_fail@plt+0xf978>
   21860:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21864:	strd	r6, [sp, #8]
   21868:	movw	r6, #9176	; 0x23d8
   2186c:	movt	r6, #4
   21870:	ldr	r4, [r6]
   21874:	str	r8, [sp, #16]
   21878:	str	lr, [sp, #20]
   2187c:	cmp	r4, #0
   21880:	beq	218ac <__assert_fail@plt+0xfb38>
   21884:	ldr	r3, [r4]
   21888:	cmp	r0, r3
   2188c:	bne	218a0 <__assert_fail@plt+0xfb2c>
   21890:	b	218fc <__assert_fail@plt+0xfb88>
   21894:	ldr	r3, [r4]
   21898:	cmp	r3, r0
   2189c:	beq	218fc <__assert_fail@plt+0xfb88>
   218a0:	ldr	r4, [r4, #4]
   218a4:	cmp	r4, #0
   218a8:	bne	21894 <__assert_fail@plt+0xfb20>
   218ac:	mov	r5, r0
   218b0:	bl	118ac <getpwuid@plt>
   218b4:	cmp	r0, #0
   218b8:	movweq	r7, #316	; 0x13c
   218bc:	moveq	r0, #12
   218c0:	movteq	r7, #3
   218c4:	beq	218dc <__assert_fail@plt+0xfb68>
   218c8:	ldr	r7, [r0]
   218cc:	mov	r0, r7
   218d0:	bl	11b94 <strlen@plt>
   218d4:	add	r0, r0, #12
   218d8:	bic	r0, r0, #3
   218dc:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   218e0:	mov	r4, r0
   218e4:	mov	r1, r7
   218e8:	str	r5, [r0], #8
   218ec:	bl	11a5c <strcpy@plt>
   218f0:	ldr	r3, [r6]
   218f4:	str	r4, [r6]
   218f8:	str	r3, [r4, #4]
   218fc:	ldrb	r0, [r4, #8]
   21900:	ldrd	r6, [sp, #8]
   21904:	ldr	r8, [sp, #16]
   21908:	cmp	r0, #0
   2190c:	addne	r0, r4, #8
   21910:	ldrd	r4, [sp]
   21914:	add	sp, sp, #20
   21918:	pop	{pc}		; (ldr pc, [sp], #4)
   2191c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21920:	mov	r5, r0
   21924:	strd	r6, [sp, #8]
   21928:	movw	r6, #9176	; 0x23d8
   2192c:	movt	r6, #4
   21930:	ldr	r4, [r6]
   21934:	str	r8, [sp, #16]
   21938:	str	lr, [sp, #20]
   2193c:	cmp	r4, #0
   21940:	beq	21990 <__assert_fail@plt+0xfc1c>
   21944:	ldrb	r7, [r0]
   21948:	b	21958 <__assert_fail@plt+0xfbe4>
   2194c:	ldr	r4, [r4, #4]
   21950:	cmp	r4, #0
   21954:	beq	21990 <__assert_fail@plt+0xfc1c>
   21958:	ldrb	r3, [r4, #8]
   2195c:	cmp	r3, r7
   21960:	bne	2194c <__assert_fail@plt+0xfbd8>
   21964:	mov	r1, r5
   21968:	add	r0, r4, #8
   2196c:	bl	118a0 <strcmp@plt>
   21970:	cmp	r0, #0
   21974:	bne	2194c <__assert_fail@plt+0xfbd8>
   21978:	mov	r0, r4
   2197c:	ldrd	r4, [sp]
   21980:	ldrd	r6, [sp, #8]
   21984:	ldr	r8, [sp, #16]
   21988:	add	sp, sp, #20
   2198c:	pop	{pc}		; (ldr pc, [sp], #4)
   21990:	ldr	r4, [r6, #4]
   21994:	cmp	r4, #0
   21998:	beq	219d8 <__assert_fail@plt+0xfc64>
   2199c:	ldrb	r7, [r5]
   219a0:	b	219b0 <__assert_fail@plt+0xfc3c>
   219a4:	ldr	r4, [r4, #4]
   219a8:	cmp	r4, #0
   219ac:	beq	219d8 <__assert_fail@plt+0xfc64>
   219b0:	ldrb	r3, [r4, #8]
   219b4:	cmp	r3, r7
   219b8:	bne	219a4 <__assert_fail@plt+0xfc30>
   219bc:	mov	r1, r5
   219c0:	add	r0, r4, #8
   219c4:	bl	118a0 <strcmp@plt>
   219c8:	cmp	r0, #0
   219cc:	bne	219a4 <__assert_fail@plt+0xfc30>
   219d0:	mov	r4, r0
   219d4:	b	21978 <__assert_fail@plt+0xfc04>
   219d8:	mov	r0, r5
   219dc:	bl	11894 <getpwnam@plt>
   219e0:	mov	r4, r0
   219e4:	mov	r0, r5
   219e8:	bl	11b94 <strlen@plt>
   219ec:	add	r0, r0, #12
   219f0:	bic	r0, r0, #3
   219f4:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   219f8:	mov	r7, r0
   219fc:	mov	r1, r5
   21a00:	add	r0, r0, #8
   21a04:	bl	11a5c <strcpy@plt>
   21a08:	cmp	r4, #0
   21a0c:	beq	21a2c <__assert_fail@plt+0xfcb8>
   21a10:	ldr	r2, [r6]
   21a14:	str	r7, [r6]
   21a18:	ldr	r3, [r4, #8]
   21a1c:	mov	r4, r7
   21a20:	str	r3, [r7]
   21a24:	str	r2, [r7, #4]
   21a28:	b	21978 <__assert_fail@plt+0xfc04>
   21a2c:	ldr	r3, [r6, #4]
   21a30:	str	r7, [r6, #4]
   21a34:	str	r3, [r7, #4]
   21a38:	b	21978 <__assert_fail@plt+0xfc04>
   21a3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21a40:	strd	r6, [sp, #8]
   21a44:	movw	r6, #9176	; 0x23d8
   21a48:	movt	r6, #4
   21a4c:	ldr	r4, [r6, #8]
   21a50:	str	r8, [sp, #16]
   21a54:	str	lr, [sp, #20]
   21a58:	cmp	r4, #0
   21a5c:	beq	21a88 <__assert_fail@plt+0xfd14>
   21a60:	ldr	r3, [r4]
   21a64:	cmp	r0, r3
   21a68:	bne	21a7c <__assert_fail@plt+0xfd08>
   21a6c:	b	21ad8 <__assert_fail@plt+0xfd64>
   21a70:	ldr	r3, [r4]
   21a74:	cmp	r3, r0
   21a78:	beq	21ad8 <__assert_fail@plt+0xfd64>
   21a7c:	ldr	r4, [r4, #4]
   21a80:	cmp	r4, #0
   21a84:	bne	21a70 <__assert_fail@plt+0xfcfc>
   21a88:	mov	r5, r0
   21a8c:	bl	11d44 <getgrgid@plt>
   21a90:	cmp	r0, #0
   21a94:	movweq	r7, #316	; 0x13c
   21a98:	moveq	r0, #12
   21a9c:	movteq	r7, #3
   21aa0:	beq	21ab8 <__assert_fail@plt+0xfd44>
   21aa4:	ldr	r7, [r0]
   21aa8:	mov	r0, r7
   21aac:	bl	11b94 <strlen@plt>
   21ab0:	add	r0, r0, #12
   21ab4:	bic	r0, r0, #3
   21ab8:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   21abc:	mov	r4, r0
   21ac0:	mov	r1, r7
   21ac4:	str	r5, [r0], #8
   21ac8:	bl	11a5c <strcpy@plt>
   21acc:	ldr	r3, [r6, #8]
   21ad0:	str	r4, [r6, #8]
   21ad4:	str	r3, [r4, #4]
   21ad8:	ldrb	r0, [r4, #8]
   21adc:	ldrd	r6, [sp, #8]
   21ae0:	ldr	r8, [sp, #16]
   21ae4:	cmp	r0, #0
   21ae8:	addne	r0, r4, #8
   21aec:	ldrd	r4, [sp]
   21af0:	add	sp, sp, #20
   21af4:	pop	{pc}		; (ldr pc, [sp], #4)
   21af8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21afc:	mov	r5, r0
   21b00:	strd	r6, [sp, #8]
   21b04:	movw	r6, #9176	; 0x23d8
   21b08:	movt	r6, #4
   21b0c:	ldr	r4, [r6, #8]
   21b10:	str	r8, [sp, #16]
   21b14:	str	lr, [sp, #20]
   21b18:	cmp	r4, #0
   21b1c:	beq	21b6c <__assert_fail@plt+0xfdf8>
   21b20:	ldrb	r7, [r0]
   21b24:	b	21b34 <__assert_fail@plt+0xfdc0>
   21b28:	ldr	r4, [r4, #4]
   21b2c:	cmp	r4, #0
   21b30:	beq	21b6c <__assert_fail@plt+0xfdf8>
   21b34:	ldrb	r3, [r4, #8]
   21b38:	cmp	r3, r7
   21b3c:	bne	21b28 <__assert_fail@plt+0xfdb4>
   21b40:	mov	r1, r5
   21b44:	add	r0, r4, #8
   21b48:	bl	118a0 <strcmp@plt>
   21b4c:	cmp	r0, #0
   21b50:	bne	21b28 <__assert_fail@plt+0xfdb4>
   21b54:	mov	r0, r4
   21b58:	ldrd	r4, [sp]
   21b5c:	ldrd	r6, [sp, #8]
   21b60:	ldr	r8, [sp, #16]
   21b64:	add	sp, sp, #20
   21b68:	pop	{pc}		; (ldr pc, [sp], #4)
   21b6c:	ldr	r4, [r6, #12]
   21b70:	cmp	r4, #0
   21b74:	beq	21bb4 <__assert_fail@plt+0xfe40>
   21b78:	ldrb	r7, [r5]
   21b7c:	b	21b8c <__assert_fail@plt+0xfe18>
   21b80:	ldr	r4, [r4, #4]
   21b84:	cmp	r4, #0
   21b88:	beq	21bb4 <__assert_fail@plt+0xfe40>
   21b8c:	ldrb	r3, [r4, #8]
   21b90:	cmp	r3, r7
   21b94:	bne	21b80 <__assert_fail@plt+0xfe0c>
   21b98:	mov	r1, r5
   21b9c:	add	r0, r4, #8
   21ba0:	bl	118a0 <strcmp@plt>
   21ba4:	cmp	r0, #0
   21ba8:	bne	21b80 <__assert_fail@plt+0xfe0c>
   21bac:	mov	r4, r0
   21bb0:	b	21b54 <__assert_fail@plt+0xfde0>
   21bb4:	mov	r0, r5
   21bb8:	bl	11d50 <getgrnam@plt>
   21bbc:	mov	r4, r0
   21bc0:	mov	r0, r5
   21bc4:	bl	11b94 <strlen@plt>
   21bc8:	add	r0, r0, #12
   21bcc:	bic	r0, r0, #3
   21bd0:	bl	29d90 <_obstack_memory_used@@Base+0x4cd8>
   21bd4:	mov	r7, r0
   21bd8:	mov	r1, r5
   21bdc:	add	r0, r0, #8
   21be0:	bl	11a5c <strcpy@plt>
   21be4:	cmp	r4, #0
   21be8:	beq	21c04 <__assert_fail@plt+0xfe90>
   21bec:	ldr	r2, [r4, #8]
   21bf0:	mov	r4, r7
   21bf4:	ldr	r3, [r6, #8]
   21bf8:	str	r7, [r6, #8]
   21bfc:	strd	r2, [r7]
   21c00:	b	21b54 <__assert_fail@plt+0xfde0>
   21c04:	ldr	r3, [r6, #12]
   21c08:	str	r7, [r6, #12]
   21c0c:	str	r3, [r7, #4]
   21c10:	b	21b54 <__assert_fail@plt+0xfde0>
   21c14:	mov	r3, #0
   21c18:	cmp	r0, #0
   21c1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21c20:	mov	r5, r1
   21c24:	sbcs	r1, r1, #0
   21c28:	strd	r6, [sp, #8]
   21c2c:	mov	r4, r0
   21c30:	add	r6, r2, #20
   21c34:	str	r8, [sp, #16]
   21c38:	str	lr, [sp, #20]
   21c3c:	strb	r3, [r2, #20]
   21c40:	blt	21ca0 <__assert_fail@plt+0xff2c>
   21c44:	mov	r0, r4
   21c48:	mov	r1, r5
   21c4c:	mov	r2, #10
   21c50:	mov	r3, #0
   21c54:	bl	2bd00 <_obstack_memory_used@@Base+0x6c48>
   21c58:	add	ip, r2, #48	; 0x30
   21c5c:	mov	r0, r4
   21c60:	mov	r1, r5
   21c64:	mov	r3, #0
   21c68:	mov	r2, #10
   21c6c:	strb	ip, [r6, #-1]!
   21c70:	bl	2bd00 <_obstack_memory_used@@Base+0x6c48>
   21c74:	mov	r4, r0
   21c78:	mov	r5, r1
   21c7c:	orrs	r3, r4, r5
   21c80:	bne	21c44 <__assert_fail@plt+0xfed0>
   21c84:	mov	r0, r6
   21c88:	ldrd	r4, [sp]
   21c8c:	ldrd	r6, [sp, #8]
   21c90:	ldr	r8, [sp, #16]
   21c94:	add	sp, sp, #20
   21c98:	pop	{pc}		; (ldr pc, [sp], #4)
   21c9c:	mov	r6, r7
   21ca0:	mov	r0, r4
   21ca4:	mov	r1, r5
   21ca8:	mov	r2, #10
   21cac:	mov	r3, #0
   21cb0:	bl	2bd00 <_obstack_memory_used@@Base+0x6c48>
   21cb4:	rsb	ip, r2, #48	; 0x30
   21cb8:	mov	r0, r4
   21cbc:	mov	r1, r5
   21cc0:	mov	r3, #0
   21cc4:	mov	r2, #10
   21cc8:	strb	ip, [r6, #-1]
   21ccc:	sub	r7, r6, #1
   21cd0:	bl	2bd00 <_obstack_memory_used@@Base+0x6c48>
   21cd4:	mov	r4, r0
   21cd8:	mov	r5, r1
   21cdc:	orrs	r3, r4, r5
   21ce0:	bne	21c9c <__assert_fail@plt+0xff28>
   21ce4:	mov	r3, #45	; 0x2d
   21ce8:	sub	r6, r6, #2
   21cec:	strb	r3, [r7, #-1]
   21cf0:	b	21c84 <__assert_fail@plt+0xff10>
   21cf4:	mov	r3, #0
   21cf8:	strd	r4, [sp, #-16]!
   21cfc:	mov	r4, r0
   21d00:	mov	r5, r1
   21d04:	str	r6, [sp, #8]
   21d08:	add	r6, r2, #20
   21d0c:	str	lr, [sp, #12]
   21d10:	strb	r3, [r2, #20]
   21d14:	mov	r0, r4
   21d18:	mov	r1, r5
   21d1c:	mov	r2, #10
   21d20:	mov	r3, #0
   21d24:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   21d28:	add	ip, r2, #48	; 0x30
   21d2c:	mov	r0, r4
   21d30:	mov	r1, r5
   21d34:	mov	r2, #10
   21d38:	mov	r3, #0
   21d3c:	strb	ip, [r6, #-1]!
   21d40:	bl	2bdd4 <_obstack_memory_used@@Base+0x6d1c>
   21d44:	cmp	r5, #0
   21d48:	mov	r5, r1
   21d4c:	cmpeq	r4, #9
   21d50:	mov	r4, r0
   21d54:	bhi	21d14 <__assert_fail@plt+0xffa0>
   21d58:	mov	r0, r6
   21d5c:	ldrd	r4, [sp]
   21d60:	ldr	r6, [sp, #8]
   21d64:	add	sp, sp, #12
   21d68:	pop	{pc}		; (ldr pc, [sp], #4)
   21d6c:	strd	r4, [sp, #-20]!	; 0xffffffec
   21d70:	mov	r5, r2
   21d74:	strd	r6, [sp, #8]
   21d78:	subs	r6, r0, #0
   21d7c:	mov	r7, r1
   21d80:	str	lr, [sp, #16]
   21d84:	sub	sp, sp, #12
   21d88:	addeq	r6, sp, #4
   21d8c:	mov	r0, r6
   21d90:	bl	11a74 <mbrtowc@plt>
   21d94:	cmp	r5, #0
   21d98:	cmnne	r0, #3
   21d9c:	mov	r4, r0
   21da0:	bhi	21dbc <__assert_fail@plt+0x10048>
   21da4:	mov	r0, r4
   21da8:	add	sp, sp, #12
   21dac:	ldrd	r4, [sp]
   21db0:	ldrd	r6, [sp, #8]
   21db4:	add	sp, sp, #16
   21db8:	pop	{pc}		; (ldr pc, [sp], #4)
   21dbc:	mov	r0, #0
   21dc0:	bl	1ef3c <__assert_fail@plt+0xd1c8>
   21dc4:	cmp	r0, #0
   21dc8:	bne	21da4 <__assert_fail@plt+0x10030>
   21dcc:	ldrb	r3, [r7]
   21dd0:	mov	r4, #1
   21dd4:	str	r3, [r6]
   21dd8:	b	21da4 <__assert_fail@plt+0x10030>
   21ddc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21de0:	mov	r4, r2
   21de4:	strd	r6, [sp, #8]
   21de8:	mov	r6, r1
   21dec:	strd	r8, [sp, #16]
   21df0:	mov	r9, r3
   21df4:	strd	sl, [sp, #24]
   21df8:	str	lr, [sp, #32]
   21dfc:	sub	sp, sp, #12
   21e00:	ldr	r7, [sp, #52]	; 0x34
   21e04:	str	r0, [sp]
   21e08:	bl	11b94 <strlen@plt>
   21e0c:	mov	fp, r0
   21e10:	ands	sl, r7, #2
   21e14:	beq	21f68 <__assert_fail@plt+0x101f4>
   21e18:	mov	r8, #0
   21e1c:	mov	r5, fp
   21e20:	mov	sl, r8
   21e24:	ldr	r2, [r9]
   21e28:	cmp	r2, r5
   21e2c:	movcc	fp, r2
   21e30:	movcc	r1, #0
   21e34:	bcs	21f38 <__assert_fail@plt+0x101c4>
   21e38:	ldr	r3, [sp, #48]	; 0x30
   21e3c:	str	r2, [r9]
   21e40:	cmp	r3, #0
   21e44:	beq	21f5c <__assert_fail@plt+0x101e8>
   21e48:	cmp	r3, #1
   21e4c:	moveq	r5, #0
   21e50:	beq	21e60 <__assert_fail@plt+0x100ec>
   21e54:	lsr	r5, r1, #1
   21e58:	and	r1, r1, #1
   21e5c:	add	r1, r1, r5
   21e60:	tst	r7, #4
   21e64:	addeq	r9, r1, fp
   21e68:	movne	r9, fp
   21e6c:	movne	r1, #0
   21e70:	tst	r7, #8
   21e74:	addeq	r9, r9, r5
   21e78:	movne	r5, #0
   21e7c:	cmp	r4, #0
   21e80:	beq	21f04 <__assert_fail@plt+0x10190>
   21e84:	sub	r4, r4, #1
   21e88:	mov	r0, r6
   21e8c:	add	r4, r6, r4
   21e90:	cmp	r1, #0
   21e94:	cmpne	r6, r4
   21e98:	bcs	21eb8 <__assert_fail@plt+0x10144>
   21e9c:	mov	lr, #32
   21ea0:	rsb	r3, r1, #0
   21ea4:	strb	lr, [r0], #1
   21ea8:	sub	r2, r6, r0
   21eac:	cmp	r3, r2
   21eb0:	cmpne	r4, r0
   21eb4:	bhi	21ea0 <__assert_fail@plt+0x1012c>
   21eb8:	sub	r2, r4, r0
   21ebc:	mov	ip, #0
   21ec0:	ldr	r1, [sp]
   21ec4:	cmp	r2, fp
   21ec8:	movcs	r2, fp
   21ecc:	strb	ip, [r0]
   21ed0:	bl	11b40 <mempcpy@plt>
   21ed4:	cmp	r5, #0
   21ed8:	cmpne	r4, r0
   21edc:	mov	r3, r0
   21ee0:	bls	21efc <__assert_fail@plt+0x10188>
   21ee4:	mov	r1, #32
   21ee8:	strb	r1, [r3], #1
   21eec:	sub	r2, r3, r5
   21ef0:	cmp	r0, r2
   21ef4:	cmpne	r4, r3
   21ef8:	bhi	21ee8 <__assert_fail@plt+0x10174>
   21efc:	mov	r2, #0
   21f00:	strb	r2, [r3]
   21f04:	mov	r0, r8
   21f08:	bl	1ee98 <__assert_fail@plt+0xd124>
   21f0c:	mov	r0, sl
   21f10:	bl	1ee98 <__assert_fail@plt+0xd124>
   21f14:	mov	r0, r9
   21f18:	add	sp, sp, #12
   21f1c:	ldrd	r4, [sp]
   21f20:	ldrd	r6, [sp, #8]
   21f24:	ldrd	r8, [sp, #16]
   21f28:	ldrd	sl, [sp, #24]
   21f2c:	add	sp, sp, #32
   21f30:	pop	{pc}		; (ldr pc, [sp], #4)
   21f34:	mov	sl, #0
   21f38:	ldr	r3, [sp, #48]	; 0x30
   21f3c:	cmp	r2, r5
   21f40:	subhi	r1, r2, r5
   21f44:	movls	r2, r5
   21f48:	movhi	r2, r5
   21f4c:	movls	r1, #0
   21f50:	str	r2, [r9]
   21f54:	cmp	r3, #0
   21f58:	bne	21e48 <__assert_fail@plt+0x100d4>
   21f5c:	mov	r5, r1
   21f60:	ldr	r1, [sp, #48]	; 0x30
   21f64:	b	21e60 <__assert_fail@plt+0x100ec>
   21f68:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   21f6c:	cmp	r0, #1
   21f70:	bls	21e18 <__assert_fail@plt+0x100a4>
   21f74:	mov	r2, sl
   21f78:	mov	r0, sl
   21f7c:	ldr	r1, [sp]
   21f80:	bl	11ca8 <mbstowcs@plt>
   21f84:	cmn	r0, #1
   21f88:	bne	21fa4 <__assert_fail@plt+0x10230>
   21f8c:	tst	r7, #1
   21f90:	bne	21e18 <__assert_fail@plt+0x100a4>
   21f94:	mov	r8, #0
   21f98:	mvn	r9, #0
   21f9c:	mov	sl, r8
   21fa0:	b	21f04 <__assert_fail@plt+0x10190>
   21fa4:	add	r5, r0, #1
   21fa8:	lsl	r3, r5, #2
   21fac:	mov	r0, r3
   21fb0:	str	r3, [sp, #4]
   21fb4:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   21fb8:	subs	r8, r0, #0
   21fbc:	beq	220d4 <__assert_fail@plt+0x10360>
   21fc0:	mov	r2, r5
   21fc4:	ldr	r1, [sp]
   21fc8:	bl	11ca8 <mbstowcs@plt>
   21fcc:	cmp	r0, #0
   21fd0:	beq	2213c <__assert_fail@plt+0x103c8>
   21fd4:	ldr	r3, [sp, #4]
   21fd8:	add	r3, r8, r3
   21fdc:	str	sl, [r3, #-4]
   21fe0:	ldr	r0, [r8]
   21fe4:	cmp	r0, #0
   21fe8:	beq	22154 <__assert_fail@plt+0x103e0>
   21fec:	str	r4, [sp, #4]
   21ff0:	mov	r4, r8
   21ff4:	bl	119f0 <iswprint@plt>
   21ff8:	cmp	r0, #0
   21ffc:	bne	220f8 <__assert_fail@plt+0x10384>
   22000:	movw	r3, #65533	; 0xfffd
   22004:	mov	sl, #1
   22008:	str	r3, [r4]
   2200c:	ldr	r0, [r4, #4]!
   22010:	cmp	r0, #0
   22014:	bne	21ff4 <__assert_fail@plt+0x10280>
   22018:	mov	r1, r5
   2201c:	mov	r0, r8
   22020:	ldr	r4, [sp, #4]
   22024:	bl	11c6c <wcswidth@plt>
   22028:	mov	r5, r0
   2202c:	mov	r2, #0
   22030:	mov	r1, r8
   22034:	mov	r0, r2
   22038:	bl	11a80 <wcstombs@plt>
   2203c:	add	r3, r0, #1
   22040:	mov	r0, r3
   22044:	str	r3, [sp, #4]
   22048:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   2204c:	subs	sl, r0, #0
   22050:	beq	220e8 <__assert_fail@plt+0x10374>
   22054:	ldr	r0, [r8]
   22058:	ldr	r3, [r9]
   2205c:	cmp	r0, #0
   22060:	beq	22148 <__assert_fail@plt+0x103d4>
   22064:	mov	fp, r8
   22068:	mov	r5, #0
   2206c:	str	r4, [sp]
   22070:	mov	r4, r3
   22074:	b	22088 <__assert_fail@plt+0x10314>
   22078:	ldr	r0, [fp, #4]!
   2207c:	mov	r5, r3
   22080:	cmp	r0, #0
   22084:	beq	220ac <__assert_fail@plt+0x10338>
   22088:	bl	118d0 <wcwidth@plt>
   2208c:	cmn	r0, #1
   22090:	bne	220a0 <__assert_fail@plt+0x1032c>
   22094:	movw	r3, #65533	; 0xfffd
   22098:	mov	r0, #1
   2209c:	str	r3, [fp]
   220a0:	add	r3, r0, r5
   220a4:	cmp	r4, r3
   220a8:	bcs	22078 <__assert_fail@plt+0x10304>
   220ac:	ldr	r4, [sp]
   220b0:	mov	r0, #0
   220b4:	mov	r1, r8
   220b8:	str	sl, [sp]
   220bc:	ldr	r2, [sp, #4]
   220c0:	str	r0, [fp]
   220c4:	mov	r0, sl
   220c8:	bl	11a80 <wcstombs@plt>
   220cc:	mov	fp, r0
   220d0:	b	21e24 <__assert_fail@plt+0x100b0>
   220d4:	tst	r7, #1
   220d8:	movne	r5, fp
   220dc:	movne	sl, r8
   220e0:	bne	21e24 <__assert_fail@plt+0x100b0>
   220e4:	b	21f94 <__assert_fail@plt+0x10220>
   220e8:	tst	r7, #1
   220ec:	mvneq	r9, #0
   220f0:	bne	21e24 <__assert_fail@plt+0x100b0>
   220f4:	b	21f04 <__assert_fail@plt+0x10190>
   220f8:	ldr	r0, [r4, #4]!
   220fc:	cmp	r0, #0
   22100:	bne	21ff4 <__assert_fail@plt+0x10280>
   22104:	mov	r1, r5
   22108:	mov	r0, r8
   2210c:	ldr	r4, [sp, #4]
   22110:	bl	11c6c <wcswidth@plt>
   22114:	cmp	sl, #0
   22118:	mov	r5, r0
   2211c:	bne	2202c <__assert_fail@plt+0x102b8>
   22120:	ldr	r2, [r9]
   22124:	cmp	r2, r5
   22128:	bcs	21f34 <__assert_fail@plt+0x101c0>
   2212c:	add	r3, fp, #1
   22130:	mov	r0, r3
   22134:	str	r3, [sp, #4]
   22138:	b	22048 <__assert_fail@plt+0x102d4>
   2213c:	mov	sl, r0
   22140:	mov	r5, fp
   22144:	b	21e24 <__assert_fail@plt+0x100b0>
   22148:	mov	r5, r0
   2214c:	mov	fp, r8
   22150:	b	220b0 <__assert_fail@plt+0x1033c>
   22154:	mov	r1, r5
   22158:	mov	r0, r8
   2215c:	bl	11c6c <wcswidth@plt>
   22160:	mov	r5, r0
   22164:	b	22120 <__assert_fail@plt+0x103ac>
   22168:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2216c:	strd	r6, [sp, #8]
   22170:	mov	r6, #0
   22174:	strd	r8, [sp, #16]
   22178:	strd	sl, [sp, #24]
   2217c:	str	lr, [sp, #32]
   22180:	sub	sp, sp, #44	; 0x2c
   22184:	ldr	sl, [r1]
   22188:	str	r1, [sp, #4]
   2218c:	str	r2, [sp, #20]
   22190:	and	r2, r3, #2
   22194:	str	r0, [sp, #8]
   22198:	str	r2, [sp, #16]
   2219c:	and	r2, r3, #1
   221a0:	mov	fp, sl
   221a4:	str	sl, [sp, #12]
   221a8:	str	r2, [sp, #36]	; 0x24
   221ac:	and	r2, r3, #4
   221b0:	and	r3, r3, #8
   221b4:	strd	r2, [sp, #24]
   221b8:	add	r8, fp, #1
   221bc:	mov	r0, r6
   221c0:	mov	r1, r8
   221c4:	bl	2b5c4 <_obstack_memory_used@@Base+0x650c>
   221c8:	subs	r5, r0, #0
   221cc:	beq	2244c <__assert_fail@plt+0x106d8>
   221d0:	ldr	r3, [sp, #4]
   221d4:	ldr	r0, [sp, #8]
   221d8:	ldr	r2, [sp, #12]
   221dc:	str	r2, [r3]
   221e0:	bl	11b94 <strlen@plt>
   221e4:	ldr	r3, [sp, #16]
   221e8:	mov	r9, r0
   221ec:	cmp	r3, #0
   221f0:	beq	22350 <__assert_fail@plt+0x105dc>
   221f4:	ldr	r1, [sp, #8]
   221f8:	mov	r7, #0
   221fc:	mov	r4, r0
   22200:	mov	r6, r7
   22204:	ldr	r2, [sp, #12]
   22208:	cmp	r4, r2
   2220c:	movhi	r9, r2
   22210:	movhi	r3, #0
   22214:	bls	22338 <__assert_fail@plt+0x105c4>
   22218:	ldr	ip, [sp, #4]
   2221c:	ldr	r0, [sp, #20]
   22220:	str	r2, [ip]
   22224:	cmp	r0, #0
   22228:	beq	22378 <__assert_fail@plt+0x10604>
   2222c:	cmp	r0, #1
   22230:	moveq	sl, #0
   22234:	beq	22244 <__assert_fail@plt+0x104d0>
   22238:	lsr	sl, r3, #1
   2223c:	and	r3, r3, #1
   22240:	add	r3, r3, sl
   22244:	ldr	r2, [sp, #24]
   22248:	cmp	r2, #0
   2224c:	ldr	r2, [sp, #28]
   22250:	addeq	r4, r3, r9
   22254:	movne	r4, r9
   22258:	movne	r3, #0
   2225c:	cmp	r2, #0
   22260:	addeq	r4, r4, sl
   22264:	movne	sl, #0
   22268:	cmp	r8, #0
   2226c:	beq	22314 <__assert_fail@plt+0x105a0>
   22270:	add	fp, r5, fp
   22274:	mov	r0, r5
   22278:	cmp	r3, #0
   2227c:	cmpne	r5, fp
   22280:	bcs	222a0 <__assert_fail@plt+0x1052c>
   22284:	mov	lr, #32
   22288:	rsb	r2, r3, #0
   2228c:	strb	lr, [r0], #1
   22290:	sub	ip, r5, r0
   22294:	cmp	r2, ip
   22298:	cmpne	fp, r0
   2229c:	bhi	22288 <__assert_fail@plt+0x10514>
   222a0:	sub	r2, fp, r0
   222a4:	mov	r3, #0
   222a8:	cmp	r2, r9
   222ac:	movcs	r2, r9
   222b0:	strb	r3, [r0]
   222b4:	bl	11b40 <mempcpy@plt>
   222b8:	cmp	sl, #0
   222bc:	cmpne	fp, r0
   222c0:	mov	r3, r0
   222c4:	bls	222e0 <__assert_fail@plt+0x1056c>
   222c8:	mov	r1, #32
   222cc:	strb	r1, [r3], #1
   222d0:	sub	r2, r3, sl
   222d4:	cmp	r0, r2
   222d8:	cmpne	fp, r3
   222dc:	bhi	222cc <__assert_fail@plt+0x10558>
   222e0:	mov	r2, #0
   222e4:	mov	r0, r7
   222e8:	strb	r2, [r3]
   222ec:	bl	1ee98 <__assert_fail@plt+0xd124>
   222f0:	mov	r0, r6
   222f4:	bl	1ee98 <__assert_fail@plt+0xd124>
   222f8:	cmn	r4, #1
   222fc:	beq	223d8 <__assert_fail@plt+0x10664>
   22300:	cmp	r8, r4
   22304:	bhi	223e4 <__assert_fail@plt+0x10670>
   22308:	mov	r6, r5
   2230c:	mov	fp, r4
   22310:	b	221b8 <__assert_fail@plt+0x10444>
   22314:	mov	r0, r7
   22318:	bl	1ee98 <__assert_fail@plt+0xd124>
   2231c:	mov	r0, r6
   22320:	bl	1ee98 <__assert_fail@plt+0xd124>
   22324:	cmn	r4, #1
   22328:	bne	22308 <__assert_fail@plt+0x10594>
   2232c:	b	223d8 <__assert_fail@plt+0x10664>
   22330:	ldr	r1, [sp, #8]
   22334:	mov	r6, #0
   22338:	cmp	r4, r2
   2233c:	subcc	r3, r2, r4
   22340:	movcs	r2, r4
   22344:	movcc	r2, r4
   22348:	movcs	r3, #0
   2234c:	b	22218 <__assert_fail@plt+0x104a4>
   22350:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   22354:	cmp	r0, #1
   22358:	bhi	22384 <__assert_fail@plt+0x10610>
   2235c:	ldr	r3, [sp, #4]
   22360:	mov	r4, r9
   22364:	ldr	r1, [sp, #8]
   22368:	ldr	r6, [sp, #16]
   2236c:	ldr	r2, [r3]
   22370:	mov	r7, r6
   22374:	b	22208 <__assert_fail@plt+0x10494>
   22378:	mov	sl, r3
   2237c:	ldr	r3, [sp, #20]
   22380:	b	22244 <__assert_fail@plt+0x104d0>
   22384:	ldr	r7, [sp, #8]
   22388:	ldr	r6, [sp, #16]
   2238c:	mov	r1, r7
   22390:	mov	r2, r6
   22394:	mov	r0, r6
   22398:	bl	11ca8 <mbstowcs@plt>
   2239c:	cmn	r0, #1
   223a0:	bne	22404 <__assert_fail@plt+0x10690>
   223a4:	ldr	r3, [sp, #36]	; 0x24
   223a8:	cmp	r3, #0
   223ac:	beq	223c8 <__assert_fail@plt+0x10654>
   223b0:	ldr	r3, [sp, #4]
   223b4:	mov	r1, r7
   223b8:	mov	r4, r9
   223bc:	mov	r7, r6
   223c0:	ldr	r2, [r3]
   223c4:	b	22208 <__assert_fail@plt+0x10494>
   223c8:	mov	r0, #0
   223cc:	bl	1ee98 <__assert_fail@plt+0xd124>
   223d0:	mov	r0, #0
   223d4:	bl	1ee98 <__assert_fail@plt+0xd124>
   223d8:	mov	r0, r5
   223dc:	mov	r5, #0
   223e0:	bl	1ee98 <__assert_fail@plt+0xd124>
   223e4:	mov	r0, r5
   223e8:	add	sp, sp, #44	; 0x2c
   223ec:	ldrd	r4, [sp]
   223f0:	ldrd	r6, [sp, #8]
   223f4:	ldrd	r8, [sp, #16]
   223f8:	ldrd	sl, [sp, #24]
   223fc:	add	sp, sp, #32
   22400:	pop	{pc}		; (ldr pc, [sp], #4)
   22404:	add	r4, r0, #1
   22408:	lsl	r6, r4, #2
   2240c:	mov	r0, r6
   22410:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   22414:	subs	r7, r0, #0
   22418:	beq	22554 <__assert_fail@plt+0x107e0>
   2241c:	ldr	sl, [sp, #8]
   22420:	mov	r2, r4
   22424:	mov	r1, sl
   22428:	bl	11ca8 <mbstowcs@plt>
   2242c:	cmp	r0, #0
   22430:	bne	22458 <__assert_fail@plt+0x106e4>
   22434:	ldr	r3, [sp, #4]
   22438:	mov	r4, r9
   2243c:	mov	r1, sl
   22440:	ldr	r6, [sp, #16]
   22444:	ldr	r2, [r3]
   22448:	b	22208 <__assert_fail@plt+0x10494>
   2244c:	mov	r0, r6
   22450:	bl	1ee98 <__assert_fail@plt+0xd124>
   22454:	b	223e4 <__assert_fail@plt+0x10670>
   22458:	ldr	r3, [sp, #16]
   2245c:	add	r6, r7, r6
   22460:	str	r3, [r6, #-4]
   22464:	ldr	r0, [r7]
   22468:	cmp	r0, #0
   2246c:	beq	225f8 <__assert_fail@plt+0x10884>
   22470:	mov	sl, r7
   22474:	mov	r6, r3
   22478:	bl	119f0 <iswprint@plt>
   2247c:	cmp	r0, #0
   22480:	bne	22594 <__assert_fail@plt+0x10820>
   22484:	movw	r3, #65533	; 0xfffd
   22488:	mov	r6, #1
   2248c:	str	r3, [sl]
   22490:	ldr	r0, [sl, #4]!
   22494:	cmp	r0, #0
   22498:	bne	22478 <__assert_fail@plt+0x10704>
   2249c:	mov	r1, r4
   224a0:	mov	r0, r7
   224a4:	bl	11c6c <wcswidth@plt>
   224a8:	mov	r4, r0
   224ac:	mov	r2, #0
   224b0:	mov	r1, r7
   224b4:	mov	r0, r2
   224b8:	bl	11a80 <wcstombs@plt>
   224bc:	add	r3, r0, #1
   224c0:	mov	r0, r3
   224c4:	str	r3, [sp, #32]
   224c8:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   224cc:	subs	r6, r0, #0
   224d0:	beq	22578 <__assert_fail@plt+0x10804>
   224d4:	ldr	r0, [r7]
   224d8:	ldr	r3, [sp, #4]
   224dc:	cmp	r0, #0
   224e0:	ldr	r9, [r3]
   224e4:	beq	225ec <__assert_fail@plt+0x10878>
   224e8:	mov	sl, r7
   224ec:	mov	r4, #0
   224f0:	b	22504 <__assert_fail@plt+0x10790>
   224f4:	ldr	r0, [sl, #4]!
   224f8:	mov	r4, r3
   224fc:	cmp	r0, #0
   22500:	beq	22528 <__assert_fail@plt+0x107b4>
   22504:	bl	118d0 <wcwidth@plt>
   22508:	cmn	r0, #1
   2250c:	bne	2251c <__assert_fail@plt+0x107a8>
   22510:	movw	r3, #65533	; 0xfffd
   22514:	mov	r0, #1
   22518:	str	r3, [sl]
   2251c:	add	r3, r4, r0
   22520:	cmp	r9, r3
   22524:	bcs	224f4 <__assert_fail@plt+0x10780>
   22528:	mov	r3, #0
   2252c:	mov	r1, r7
   22530:	ldr	r2, [sp, #32]
   22534:	mov	r0, r6
   22538:	str	r3, [sl]
   2253c:	bl	11a80 <wcstombs@plt>
   22540:	ldr	r3, [sp, #4]
   22544:	mov	r9, r0
   22548:	mov	r1, r6
   2254c:	ldr	r2, [r3]
   22550:	b	22208 <__assert_fail@plt+0x10494>
   22554:	ldr	r3, [sp, #36]	; 0x24
   22558:	cmp	r3, #0
   2255c:	beq	223c8 <__assert_fail@plt+0x10654>
   22560:	ldr	r3, [sp, #4]
   22564:	mov	r4, r9
   22568:	ldr	r1, [sp, #8]
   2256c:	ldr	r6, [sp, #16]
   22570:	ldr	r2, [r3]
   22574:	b	22208 <__assert_fail@plt+0x10494>
   22578:	ldr	r3, [sp, #36]	; 0x24
   2257c:	cmp	r3, #0
   22580:	beq	225d8 <__assert_fail@plt+0x10864>
   22584:	ldr	r3, [sp, #4]
   22588:	ldr	r1, [sp, #8]
   2258c:	ldr	r2, [r3]
   22590:	b	22208 <__assert_fail@plt+0x10494>
   22594:	ldr	r0, [sl, #4]!
   22598:	cmp	r0, #0
   2259c:	bne	22478 <__assert_fail@plt+0x10704>
   225a0:	mov	r1, r4
   225a4:	mov	r0, r7
   225a8:	bl	11c6c <wcswidth@plt>
   225ac:	cmp	r6, #0
   225b0:	mov	r4, r0
   225b4:	bne	224ac <__assert_fail@plt+0x10738>
   225b8:	ldr	r3, [sp, #4]
   225bc:	ldr	r2, [r3]
   225c0:	cmp	r2, r4
   225c4:	bcs	22330 <__assert_fail@plt+0x105bc>
   225c8:	add	r3, r9, #1
   225cc:	mov	r0, r3
   225d0:	str	r3, [sp, #32]
   225d4:	b	224c8 <__assert_fail@plt+0x10754>
   225d8:	mov	r0, r7
   225dc:	bl	1ee98 <__assert_fail@plt+0xd124>
   225e0:	ldr	r0, [sp, #36]	; 0x24
   225e4:	bl	1ee98 <__assert_fail@plt+0xd124>
   225e8:	b	223d8 <__assert_fail@plt+0x10664>
   225ec:	mov	r4, r0
   225f0:	mov	sl, r7
   225f4:	b	22528 <__assert_fail@plt+0x107b4>
   225f8:	mov	r1, r4
   225fc:	mov	r0, r7
   22600:	bl	11c6c <wcswidth@plt>
   22604:	mov	r4, r0
   22608:	b	225b8 <__assert_fail@plt+0x10844>
   2260c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22610:	mov	r4, r0
   22614:	strd	r6, [sp, #8]
   22618:	add	r6, r0, r1
   2261c:	strd	r8, [sp, #16]
   22620:	mov	r9, r2
   22624:	strd	sl, [sp, #24]
   22628:	str	lr, [sp, #32]
   2262c:	sub	sp, sp, #20
   22630:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   22634:	cmp	r0, #1
   22638:	bls	227d0 <__assert_fail@plt+0x10a5c>
   2263c:	cmp	r4, r6
   22640:	bcs	2283c <__assert_fail@plt+0x10ac8>
   22644:	and	sl, r9, #2
   22648:	mov	r5, #0
   2264c:	and	r9, r9, #1
   22650:	mvn	r8, #-2147483648	; 0x80000000
   22654:	b	2267c <__assert_fail@plt+0x10908>
   22658:	cmp	r3, #37	; 0x25
   2265c:	bcs	2266c <__assert_fail@plt+0x108f8>
   22660:	sub	r3, r3, #32
   22664:	cmp	r3, #3
   22668:	bhi	226a4 <__assert_fail@plt+0x10930>
   2266c:	add	r4, r4, #1
   22670:	add	r5, r5, #1
   22674:	cmp	r4, r6
   22678:	bcs	22744 <__assert_fail@plt+0x109d0>
   2267c:	ldrb	r3, [r4]
   22680:	cmp	r3, #63	; 0x3f
   22684:	bls	22658 <__assert_fail@plt+0x108e4>
   22688:	cmp	r3, #65	; 0x41
   2268c:	bcc	226a4 <__assert_fail@plt+0x10930>
   22690:	cmp	r3, #95	; 0x5f
   22694:	bls	2266c <__assert_fail@plt+0x108f8>
   22698:	sub	r3, r3, #97	; 0x61
   2269c:	cmp	r3, #29
   226a0:	bls	2266c <__assert_fail@plt+0x108f8>
   226a4:	mov	r2, #0
   226a8:	mov	r3, #0
   226ac:	cmp	sl, #0
   226b0:	add	fp, sp, #4
   226b4:	strd	r2, [sp, #8]
   226b8:	beq	226e0 <__assert_fail@plt+0x1096c>
   226bc:	b	2277c <__assert_fail@plt+0x10a08>
   226c0:	cmp	r3, r0
   226c4:	add	r5, r5, r0
   226c8:	blt	22740 <__assert_fail@plt+0x109cc>
   226cc:	add	r0, sp, #8
   226d0:	add	r4, r4, r7
   226d4:	bl	11948 <mbsinit@plt>
   226d8:	cmp	r0, #0
   226dc:	bne	22674 <__assert_fail@plt+0x10900>
   226e0:	add	r3, sp, #8
   226e4:	sub	r2, r6, r4
   226e8:	mov	r1, r4
   226ec:	mov	r0, fp
   226f0:	bl	21d6c <__assert_fail@plt+0xfff8>
   226f4:	cmn	r0, #1
   226f8:	mov	r7, r0
   226fc:	beq	2281c <__assert_fail@plt+0x10aa8>
   22700:	cmn	r0, #2
   22704:	beq	22828 <__assert_fail@plt+0x10ab4>
   22708:	cmp	r0, #0
   2270c:	ldr	r0, [sp, #4]
   22710:	moveq	r7, #1
   22714:	bl	118d0 <wcwidth@plt>
   22718:	cmp	r0, #0
   2271c:	sub	r3, r8, r5
   22720:	bge	226c0 <__assert_fail@plt+0x1094c>
   22724:	ldr	r0, [sp, #4]
   22728:	bl	119cc <iswcntrl@plt>
   2272c:	cmp	r0, #0
   22730:	bne	226cc <__assert_fail@plt+0x10958>
   22734:	cmn	r5, #-2147483647	; 0x80000001
   22738:	add	r5, r5, #1
   2273c:	bne	226cc <__assert_fail@plt+0x10958>
   22740:	mvn	r5, #-2147483648	; 0x80000000
   22744:	mov	r0, r5
   22748:	add	sp, sp, #20
   2274c:	ldrd	r4, [sp]
   22750:	ldrd	r6, [sp, #8]
   22754:	ldrd	r8, [sp, #16]
   22758:	ldrd	sl, [sp, #24]
   2275c:	add	sp, sp, #32
   22760:	pop	{pc}		; (ldr pc, [sp], #4)
   22764:	cmp	r3, r2
   22768:	add	r4, r4, r7
   2276c:	bgt	22740 <__assert_fail@plt+0x109cc>
   22770:	bl	11948 <mbsinit@plt>
   22774:	cmp	r0, #0
   22778:	bne	22674 <__assert_fail@plt+0x10900>
   2277c:	add	r3, sp, #8
   22780:	sub	r2, r6, r4
   22784:	mov	r1, r4
   22788:	mov	r0, fp
   2278c:	bl	21d6c <__assert_fail@plt+0xfff8>
   22790:	cmn	r0, #1
   22794:	mov	r7, r0
   22798:	beq	2281c <__assert_fail@plt+0x10aa8>
   2279c:	cmn	r0, #2
   227a0:	beq	22828 <__assert_fail@plt+0x10ab4>
   227a4:	cmp	r0, #0
   227a8:	ldr	r0, [sp, #4]
   227ac:	moveq	r7, #1
   227b0:	bl	118d0 <wcwidth@plt>
   227b4:	subs	r3, r0, #0
   227b8:	sub	r2, r8, r5
   227bc:	add	r0, sp, #8
   227c0:	add	r5, r5, r3
   227c4:	bge	22764 <__assert_fail@plt+0x109f0>
   227c8:	mvn	r5, #0
   227cc:	b	22744 <__assert_fail@plt+0x109d0>
   227d0:	cmp	r4, r6
   227d4:	bcs	2283c <__assert_fail@plt+0x10ac8>
   227d8:	bl	11b58 <__ctype_b_loc@plt>
   227dc:	ands	r5, r9, #2
   227e0:	ldr	r2, [r0]
   227e4:	bne	22844 <__assert_fail@plt+0x10ad0>
   227e8:	ldrb	r3, [r4], #1
   227ec:	lsl	r3, r3, #1
   227f0:	ldrh	r3, [r2, r3]
   227f4:	tst	r3, #16384	; 0x4000
   227f8:	bne	22804 <__assert_fail@plt+0x10a90>
   227fc:	tst	r3, #2
   22800:	bne	22810 <__assert_fail@plt+0x10a9c>
   22804:	cmn	r5, #-2147483647	; 0x80000001
   22808:	beq	22744 <__assert_fail@plt+0x109d0>
   2280c:	add	r5, r5, #1
   22810:	cmp	r6, r4
   22814:	bne	227e8 <__assert_fail@plt+0x10a74>
   22818:	b	22744 <__assert_fail@plt+0x109d0>
   2281c:	cmp	r9, #0
   22820:	beq	2266c <__assert_fail@plt+0x108f8>
   22824:	b	227c8 <__assert_fail@plt+0x10a54>
   22828:	cmp	r9, #0
   2282c:	bne	227c8 <__assert_fail@plt+0x10a54>
   22830:	add	r5, r5, #1
   22834:	mov	r4, r6
   22838:	b	22674 <__assert_fail@plt+0x10900>
   2283c:	mov	r5, #0
   22840:	b	22744 <__assert_fail@plt+0x109d0>
   22844:	mov	r5, #0
   22848:	b	22860 <__assert_fail@plt+0x10aec>
   2284c:	cmn	r5, #-2147483647	; 0x80000001
   22850:	beq	22744 <__assert_fail@plt+0x109d0>
   22854:	cmp	r6, r4
   22858:	add	r5, r5, #1
   2285c:	beq	22744 <__assert_fail@plt+0x109d0>
   22860:	ldrb	r3, [r4], #1
   22864:	lsl	r3, r3, #1
   22868:	ldrh	r3, [r2, r3]
   2286c:	tst	r3, #16384	; 0x4000
   22870:	beq	227c8 <__assert_fail@plt+0x10a54>
   22874:	b	2284c <__assert_fail@plt+0x10ad8>
   22878:	strd	r4, [sp, #-16]!
   2287c:	mov	r5, r1
   22880:	mov	r4, r0
   22884:	str	r6, [sp, #8]
   22888:	str	lr, [sp, #12]
   2288c:	bl	11b94 <strlen@plt>
   22890:	mov	r1, r0
   22894:	mov	r2, r5
   22898:	ldr	r6, [sp, #8]
   2289c:	mov	r0, r4
   228a0:	ldrd	r4, [sp]
   228a4:	ldr	lr, [sp, #12]
   228a8:	add	sp, sp, #16
   228ac:	b	2260c <__assert_fail@plt+0x10898>
   228b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   228b4:	mov	r4, r0
   228b8:	mov	r5, r3
   228bc:	strd	r6, [sp, #8]
   228c0:	lsr	r7, r1, #1
   228c4:	strd	r8, [sp, #16]
   228c8:	strd	sl, [sp, #24]
   228cc:	add	r6, r0, r7, lsl #2
   228d0:	str	lr, [sp, #32]
   228d4:	sub	sp, sp, #20
   228d8:	str	r2, [sp, #4]
   228dc:	str	r1, [sp, #12]
   228e0:	sub	r1, r1, r7
   228e4:	cmp	r1, #2
   228e8:	bhi	22a68 <__assert_fail@plt+0x10cf4>
   228ec:	beq	229a4 <__assert_fail@plt+0x10c30>
   228f0:	ldr	r3, [sp, #12]
   228f4:	cmp	r3, #3
   228f8:	bhi	229d0 <__assert_fail@plt+0x10c5c>
   228fc:	ldr	r9, [r4]
   22900:	ldr	r3, [sp, #4]
   22904:	str	r9, [r3]
   22908:	mov	r6, #0
   2290c:	str	r7, [sp, #8]
   22910:	mov	sl, r6
   22914:	ldr	fp, [r4, r7, lsl #2]
   22918:	ldr	r8, [sp, #12]
   2291c:	b	22938 <__assert_fail@plt+0x10bc4>
   22920:	add	r7, r7, #1
   22924:	str	fp, [r4, r6, lsl #2]
   22928:	cmp	r8, r7
   2292c:	beq	22970 <__assert_fail@plt+0x10bfc>
   22930:	ldr	fp, [r4, r7, lsl #2]
   22934:	mov	r6, r0
   22938:	mov	r1, fp
   2293c:	mov	r0, r9
   22940:	blx	r5
   22944:	cmp	r0, #0
   22948:	add	r0, r6, #1
   2294c:	bgt	22920 <__assert_fail@plt+0x10bac>
   22950:	ldr	r3, [sp, #8]
   22954:	add	sl, sl, #1
   22958:	str	r9, [r4, r6, lsl #2]
   2295c:	cmp	r3, sl
   22960:	beq	22a4c <__assert_fail@plt+0x10cd8>
   22964:	ldr	r3, [sp, #4]
   22968:	ldr	r9, [r3, sl, lsl #2]
   2296c:	b	22934 <__assert_fail@plt+0x10bc0>
   22970:	ldmib	sp, {r3, r7}
   22974:	add	r0, r4, r0, lsl #2
   22978:	sub	r2, r7, sl
   2297c:	add	r1, r3, sl, lsl #2
   22980:	lsl	r2, r2, #2
   22984:	add	sp, sp, #20
   22988:	ldrd	r4, [sp]
   2298c:	ldrd	r6, [sp, #8]
   22990:	ldrd	r8, [sp, #16]
   22994:	ldrd	sl, [sp, #24]
   22998:	ldr	lr, [sp, #32]
   2299c:	add	sp, sp, #36	; 0x24
   229a0:	b	11930 <memcpy@plt>
   229a4:	ldr	r9, [r0, r7, lsl #2]
   229a8:	ldr	sl, [r6, #4]
   229ac:	mov	r0, r9
   229b0:	mov	r1, sl
   229b4:	blx	r3
   229b8:	ldr	r3, [sp, #12]
   229bc:	cmp	r0, #0
   229c0:	strgt	sl, [r4, r7, lsl #2]
   229c4:	strgt	r9, [r6, #4]
   229c8:	cmp	r3, #3
   229cc:	bls	228fc <__assert_fail@plt+0x10b88>
   229d0:	mov	r2, r3
   229d4:	lsr	r3, r3, #2
   229d8:	bic	sl, r2, #3
   229dc:	sub	r1, r7, r3
   229e0:	add	r6, r4, sl
   229e4:	cmp	r1, #2
   229e8:	str	r3, [sp, #8]
   229ec:	bhi	22b20 <__assert_fail@plt+0x10dac>
   229f0:	beq	22ae0 <__assert_fail@plt+0x10d6c>
   229f4:	ldr	r3, [sp, #12]
   229f8:	cmp	r3, #11
   229fc:	bhi	22b04 <__assert_fail@plt+0x10d90>
   22a00:	ldr	r3, [sp, #8]
   22a04:	ldr	r9, [r4]
   22a08:	cmp	r3, #2
   22a0c:	beq	22abc <__assert_fail@plt+0x10d48>
   22a10:	ldmib	sp, {r6, fp}
   22a14:	ldr	r8, [r4, sl]
   22a18:	mov	sl, #0
   22a1c:	mov	r1, r8
   22a20:	mov	r0, r9
   22a24:	blx	r5
   22a28:	cmp	r0, #0
   22a2c:	add	r6, r6, #4
   22a30:	ble	22a74 <__assert_fail@plt+0x10d00>
   22a34:	add	fp, fp, #1
   22a38:	str	r8, [r6, #-4]
   22a3c:	cmp	r7, fp
   22a40:	beq	22a98 <__assert_fail@plt+0x10d24>
   22a44:	ldr	r8, [r4, fp, lsl #2]
   22a48:	b	22a1c <__assert_fail@plt+0x10ca8>
   22a4c:	add	sp, sp, #20
   22a50:	ldrd	r4, [sp]
   22a54:	ldrd	r6, [sp, #8]
   22a58:	ldrd	r8, [sp, #16]
   22a5c:	ldrd	sl, [sp, #24]
   22a60:	add	sp, sp, #32
   22a64:	pop	{pc}		; (ldr pc, [sp], #4)
   22a68:	mov	r0, r6
   22a6c:	bl	228b0 <__assert_fail@plt+0x10b3c>
   22a70:	b	228f0 <__assert_fail@plt+0x10b7c>
   22a74:	ldr	r3, [sp, #8]
   22a78:	add	sl, sl, #1
   22a7c:	str	r9, [r6, #-4]
   22a80:	cmp	r3, sl
   22a84:	beq	22a90 <__assert_fail@plt+0x10d1c>
   22a88:	ldr	r9, [r4, sl, lsl #2]
   22a8c:	b	22a1c <__assert_fail@plt+0x10ca8>
   22a90:	mov	sl, fp
   22a94:	str	r7, [sp, #8]
   22a98:	ldr	r3, [sp, #8]
   22a9c:	add	r1, r4, sl, lsl #2
   22aa0:	mov	r0, r6
   22aa4:	sub	r2, r3, sl
   22aa8:	lsl	r2, r2, #2
   22aac:	bl	11930 <memcpy@plt>
   22ab0:	ldr	r3, [sp, #4]
   22ab4:	ldr	r9, [r3]
   22ab8:	b	22908 <__assert_fail@plt+0x10b94>
   22abc:	ldr	r6, [r4, #4]
   22ac0:	mov	r0, r9
   22ac4:	mov	r1, r6
   22ac8:	blx	r5
   22acc:	cmp	r0, #0
   22ad0:	ble	22b18 <__assert_fail@plt+0x10da4>
   22ad4:	stm	r4, {r6, r9}
   22ad8:	mov	r9, r6
   22adc:	b	22a10 <__assert_fail@plt+0x10c9c>
   22ae0:	ldr	r9, [r4, sl]
   22ae4:	ldr	r8, [r6, #4]
   22ae8:	mov	r0, r9
   22aec:	mov	r1, r8
   22af0:	blx	r5
   22af4:	cmp	r0, #0
   22af8:	strgt	r8, [r4, sl]
   22afc:	strgt	r9, [r6, #4]
   22b00:	b	229f4 <__assert_fail@plt+0x10c80>
   22b04:	mov	r3, r5
   22b08:	mov	r0, r4
   22b0c:	ldr	r2, [sp, #4]
   22b10:	ldr	r1, [sp, #8]
   22b14:	bl	228b0 <__assert_fail@plt+0x10b3c>
   22b18:	ldr	r9, [r4]
   22b1c:	b	22a10 <__assert_fail@plt+0x10c9c>
   22b20:	mov	r0, r6
   22b24:	mov	r3, r5
   22b28:	ldr	r2, [sp, #4]
   22b2c:	bl	228b0 <__assert_fail@plt+0x10b3c>
   22b30:	b	229f4 <__assert_fail@plt+0x10c80>
   22b34:	cmp	r1, #2
   22b38:	strd	r4, [sp, #-16]!
   22b3c:	mov	r4, r0
   22b40:	str	r6, [sp, #8]
   22b44:	str	lr, [sp, #12]
   22b48:	bhi	22b8c <__assert_fail@plt+0x10e18>
   22b4c:	beq	22b60 <__assert_fail@plt+0x10dec>
   22b50:	ldrd	r4, [sp]
   22b54:	ldr	r6, [sp, #8]
   22b58:	add	sp, sp, #12
   22b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   22b60:	ldm	r0, {r5, r6}
   22b64:	mov	r0, r5
   22b68:	mov	r1, r6
   22b6c:	blx	r2
   22b70:	cmp	r0, #0
   22b74:	strgt	r6, [r4]
   22b78:	strgt	r5, [r4, #4]
   22b7c:	ldrd	r4, [sp]
   22b80:	ldr	r6, [sp, #8]
   22b84:	add	sp, sp, #12
   22b88:	pop	{pc}		; (ldr pc, [sp], #4)
   22b8c:	mov	r3, r2
   22b90:	add	r2, r0, r1, lsl #2
   22b94:	ldrd	r4, [sp]
   22b98:	ldr	r6, [sp, #8]
   22b9c:	ldr	lr, [sp, #12]
   22ba0:	add	sp, sp, #16
   22ba4:	b	228b0 <__assert_fail@plt+0x10b3c>
   22ba8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22bac:	mov	r4, r3
   22bb0:	strd	r6, [sp, #8]
   22bb4:	strd	r8, [sp, #16]
   22bb8:	strd	sl, [sp, #24]
   22bbc:	str	lr, [sp, #32]
   22bc0:	sub	sp, sp, #1184	; 0x4a0
   22bc4:	sub	sp, sp, #12
   22bc8:	str	r1, [sp, #48]	; 0x30
   22bcc:	str	r3, [sp, #100]	; 0x64
   22bd0:	ldrb	r3, [sp, #1232]	; 0x4d0
   22bd4:	str	r2, [sp, #52]	; 0x34
   22bd8:	str	r0, [sp, #84]	; 0x54
   22bdc:	str	r3, [sp, #96]	; 0x60
   22be0:	bl	11bb8 <__errno_location@plt>
   22be4:	ldr	r1, [r0]
   22be8:	movw	r3, #316	; 0x13c
   22bec:	movt	r3, #3
   22bf0:	str	r0, [sp, #88]	; 0x58
   22bf4:	ldr	r2, [r4, #40]	; 0x28
   22bf8:	ldr	ip, [r4, #8]
   22bfc:	ldr	fp, [sp, #1240]	; 0x4d8
   22c00:	cmp	r2, #0
   22c04:	ldr	r9, [sp, #1252]	; 0x4e4
   22c08:	str	r1, [sp, #104]	; 0x68
   22c0c:	mov	r1, r2
   22c10:	moveq	r1, r3
   22c14:	cmp	ip, #12
   22c18:	str	ip, [sp, #80]	; 0x50
   22c1c:	subgt	r3, ip, #12
   22c20:	str	r1, [sp, #112]	; 0x70
   22c24:	strgt	r3, [sp, #80]	; 0x50
   22c28:	bgt	22c3c <__assert_fail@plt+0x10ec8>
   22c2c:	cmp	ip, #0
   22c30:	mov	r3, ip
   22c34:	moveq	r3, #12
   22c38:	str	r3, [sp, #80]	; 0x50
   22c3c:	ldr	r3, [sp, #52]	; 0x34
   22c40:	ldrb	r1, [r3]
   22c44:	cmp	r1, #0
   22c48:	beq	2443c <__assert_fail@plt+0x126c8>
   22c4c:	movw	r8, #34079	; 0x851f
   22c50:	movt	r8, #20971	; 0x51eb
   22c54:	asr	r2, r9, #31
   22c58:	movw	r3, #26215	; 0x6667
   22c5c:	movt	r3, #26214	; 0x6666
   22c60:	smull	r0, r8, r8, r9
   22c64:	movw	r4, #46473	; 0xb589
   22c68:	movt	r4, #5368	; 0x14f8
   22c6c:	smull	r0, r6, r3, r9
   22c70:	movw	ip, #51819	; 0xca6b
   22c74:	movt	ip, #27487	; 0x6b5f
   22c78:	movw	r5, #35757	; 0x8bad
   22c7c:	movt	r5, #26843	; 0x68db
   22c80:	smull	r0, r4, r4, r9
   22c84:	rsb	r8, r2, r8, asr #5
   22c88:	movw	r7, #19923	; 0x4dd3
   22c8c:	movt	r7, #4194	; 0x1062
   22c90:	smull	sl, ip, ip, r9
   22c94:	movw	lr, #56963	; 0xde83
   22c98:	movt	lr, #17179	; 0x431b
   22c9c:	smull	r0, r5, r5, r9
   22ca0:	movw	sl, #46021	; 0xb3c5
   22ca4:	movt	sl, #37282	; 0x91a2
   22ca8:	asr	r6, r6, #2
   22cac:	str	r8, [sp, #44]	; 0x2c
   22cb0:	smull	r0, r7, r7, r9
   22cb4:	str	sl, [sp, #116]	; 0x74
   22cb8:	movw	sl, #52429	; 0xcccd
   22cbc:	movt	sl, #52428	; 0xcccc
   22cc0:	sub	r8, r6, r2
   22cc4:	rsb	r6, r2, r4, asr #13
   22cc8:	rsb	r4, r2, ip, asr #22
   22ccc:	ldr	ip, [sp, #44]	; 0x2c
   22cd0:	rsb	r5, r2, r5, asr #12
   22cd4:	rsb	r7, r2, r7, asr #6
   22cd8:	str	r4, [sp, #28]
   22cdc:	smull	r0, lr, lr, r9
   22ce0:	movw	r0, #15241	; 0x3b89
   22ce4:	movt	r0, #21990	; 0x55e6
   22ce8:	str	r6, [sp, #36]	; 0x24
   22cec:	str	r5, [sp, #40]	; 0x28
   22cf0:	smull	r5, r6, r3, ip
   22cf4:	str	r8, [sp, #56]	; 0x38
   22cf8:	rsb	lr, r2, lr, asr #18
   22cfc:	str	r8, [sp, #76]	; 0x4c
   22d00:	smull	r5, r8, r3, r8
   22d04:	smull	r4, r5, r3, r7
   22d08:	ldr	r4, [sp, #40]	; 0x28
   22d0c:	str	lr, [sp, #32]
   22d10:	smull	lr, r0, r0, r9
   22d14:	str	r7, [sp, #72]	; 0x48
   22d18:	str	sl, [sp, #108]	; 0x6c
   22d1c:	mov	sl, #0
   22d20:	rsb	r2, r2, r0, asr #25
   22d24:	smull	ip, r4, r3, r4
   22d28:	ldr	ip, [sp, #36]	; 0x24
   22d2c:	str	r2, [sp, #92]	; 0x5c
   22d30:	ldr	r2, [sp, #44]	; 0x2c
   22d34:	smull	r7, lr, r3, ip
   22d38:	ldr	ip, [sp, #32]
   22d3c:	asr	r2, r2, #31
   22d40:	smull	r7, ip, r3, ip
   22d44:	ldr	r7, [sp, #28]
   22d48:	rsb	r6, r2, r6, asr #2
   22d4c:	ldr	r2, [sp, #40]	; 0x28
   22d50:	add	r6, r6, r6, lsl #2
   22d54:	smull	r7, r3, r3, r7
   22d58:	ldr	r7, [sp, #76]	; 0x4c
   22d5c:	asr	r2, r2, #31
   22d60:	rsb	r4, r2, r4, asr #2
   22d64:	asr	r7, r7, #31
   22d68:	rsb	r8, r7, r8, asr #2
   22d6c:	ldr	r7, [sp, #72]	; 0x48
   22d70:	str	r4, [sp, #68]	; 0x44
   22d74:	ldr	r4, [sp, #32]
   22d78:	asr	r0, r7, #31
   22d7c:	add	r7, r8, r8, lsl #2
   22d80:	rsb	r5, r0, r5, asr #2
   22d84:	ldr	r0, [sp, #36]	; 0x24
   22d88:	asr	r2, r4, #31
   22d8c:	add	r5, r5, r5, lsl #2
   22d90:	rsb	r2, r2, ip, asr #2
   22d94:	ldr	ip, [sp, #92]	; 0x5c
   22d98:	asr	r0, r0, #31
   22d9c:	str	r2, [sp, #60]	; 0x3c
   22da0:	movw	r2, #26215	; 0x6667
   22da4:	movt	r2, #26214	; 0x6666
   22da8:	rsb	lr, r0, lr, asr #2
   22dac:	str	lr, [sp, #64]	; 0x40
   22db0:	ldr	lr, [sp, #28]
   22db4:	asr	r0, lr, #31
   22db8:	smull	lr, r2, r2, ip
   22dbc:	ldr	ip, [sp, #56]	; 0x38
   22dc0:	rsb	r3, r0, r3, asr #2
   22dc4:	add	r3, r3, r3, lsl #2
   22dc8:	asr	r2, r2, #2
   22dcc:	add	r0, ip, ip, lsl #2
   22dd0:	ldr	ip, [sp, #68]	; 0x44
   22dd4:	sub	r8, r9, r0, lsl #1
   22dd8:	add	r4, ip, ip, lsl #2
   22ddc:	ldr	ip, [sp, #64]	; 0x40
   22de0:	str	r8, [sp, #56]	; 0x38
   22de4:	add	lr, ip, ip, lsl #2
   22de8:	ldr	ip, [sp, #60]	; 0x3c
   22dec:	ldr	r8, [sp, #76]	; 0x4c
   22df0:	str	r2, [sp, #124]	; 0x7c
   22df4:	ldr	r0, [sp, #44]	; 0x2c
   22df8:	add	ip, ip, ip, lsl #2
   22dfc:	str	r9, [sp, #1252]	; 0x4e4
   22e00:	sub	r8, r8, r7, lsl #1
   22e04:	sub	r6, r0, r6, lsl #1
   22e08:	ldr	r0, [sp, #72]	; 0x48
   22e0c:	str	r6, [sp, #132]	; 0x84
   22e10:	str	r8, [sp, #136]	; 0x88
   22e14:	sub	r5, r0, r5, lsl #1
   22e18:	ldr	r0, [sp, #40]	; 0x28
   22e1c:	str	r5, [sp, #128]	; 0x80
   22e20:	ldr	r5, [sp, #84]	; 0x54
   22e24:	sub	r7, r0, r4, lsl #1
   22e28:	ldr	r4, [sp, #32]
   22e2c:	ldr	r0, [sp, #36]	; 0x24
   22e30:	str	r7, [sp, #68]	; 0x44
   22e34:	ldr	r7, [sp, #52]	; 0x34
   22e38:	sub	r0, r0, lr, lsl #1
   22e3c:	ldr	lr, [sp, #28]
   22e40:	str	r0, [sp, #64]	; 0x40
   22e44:	sub	r0, r4, ip, lsl #1
   22e48:	str	r0, [sp, #60]	; 0x3c
   22e4c:	sub	r0, lr, r3, lsl #1
   22e50:	str	r0, [sp, #120]	; 0x78
   22e54:	cmp	r1, #37	; 0x25
   22e58:	beq	22f44 <__assert_fail@plt+0x111d0>
   22e5c:	ldr	r3, [sp, #48]	; 0x30
   22e60:	cmp	fp, #0
   22e64:	sub	r3, r3, sl
   22e68:	blt	22ef8 <__assert_fail@plt+0x11184>
   22e6c:	cmp	fp, #1
   22e70:	movcs	r4, fp
   22e74:	movcc	r4, #1
   22e78:	cmp	r4, r3
   22e7c:	bcs	22f00 <__assert_fail@plt+0x1118c>
   22e80:	cmp	r5, #0
   22e84:	beq	22eb0 <__assert_fail@plt+0x1113c>
   22e88:	cmp	fp, #1
   22e8c:	ble	22eac <__assert_fail@plt+0x11138>
   22e90:	sub	fp, fp, #1
   22e94:	mov	r1, #32
   22e98:	mov	r0, r5
   22e9c:	mov	r2, fp
   22ea0:	bl	11be8 <memset@plt>
   22ea4:	ldrb	r1, [r7]
   22ea8:	add	r5, r5, fp
   22eac:	strb	r1, [r5], #1
   22eb0:	add	sl, sl, r4
   22eb4:	mov	r4, r7
   22eb8:	ldrb	r1, [r4, #1]
   22ebc:	add	r7, r4, #1
   22ec0:	mvn	fp, #0
   22ec4:	cmp	r1, #0
   22ec8:	bne	22e54 <__assert_fail@plt+0x110e0>
   22ecc:	str	r5, [sp, #84]	; 0x54
   22ed0:	ldr	r3, [sp, #48]	; 0x30
   22ed4:	ldr	r2, [sp, #84]	; 0x54
   22ed8:	cmp	r2, #0
   22edc:	cmpne	r3, #0
   22ee0:	movne	r3, #0
   22ee4:	strbne	r3, [r2]
   22ee8:	ldr	r3, [sp, #88]	; 0x58
   22eec:	ldr	r2, [sp, #104]	; 0x68
   22ef0:	str	r2, [r3]
   22ef4:	b	22f10 <__assert_fail@plt+0x1119c>
   22ef8:	cmp	r3, #1
   22efc:	bhi	22f34 <__assert_fail@plt+0x111c0>
   22f00:	ldr	r2, [sp, #88]	; 0x58
   22f04:	mov	r3, #34	; 0x22
   22f08:	str	r3, [r2]
   22f0c:	mov	sl, #0
   22f10:	mov	r0, sl
   22f14:	add	sp, sp, #1184	; 0x4a0
   22f18:	add	sp, sp, #12
   22f1c:	ldrd	r4, [sp]
   22f20:	ldrd	r6, [sp, #8]
   22f24:	ldrd	r8, [sp, #16]
   22f28:	ldrd	sl, [sp, #24]
   22f2c:	add	sp, sp, #32
   22f30:	pop	{pc}		; (ldr pc, [sp], #4)
   22f34:	cmp	r5, #0
   22f38:	mov	r4, #1
   22f3c:	bne	22eac <__assert_fail@plt+0x11138>
   22f40:	b	22eb0 <__assert_fail@plt+0x1113c>
   22f44:	ldr	r3, [sp, #96]	; 0x60
   22f48:	mov	r8, #0
   22f4c:	mov	r4, r7
   22f50:	mov	r9, r8
   22f54:	str	r3, [sp, #52]	; 0x34
   22f58:	ldrb	r3, [r4, #1]!
   22f5c:	sub	r2, r3, #35	; 0x23
   22f60:	mov	r6, r3
   22f64:	cmp	r2, #60	; 0x3c
   22f68:	ldrls	pc, [pc, r2, lsl #2]
   22f6c:	b	23080 <__assert_fail@plt+0x1130c>
   22f70:	andeq	r3, r2, r8, ror r0
   22f74:	andeq	r3, r2, r0, lsl #1
   22f78:	andeq	r3, r2, r0, lsl #1
   22f7c:	andeq	r3, r2, r0, lsl #1
   22f80:	andeq	r3, r2, r0, lsl #1
   22f84:	andeq	r3, r2, r0, lsl #1
   22f88:	andeq	r3, r2, r0, lsl #1
   22f8c:	andeq	r3, r2, r0, lsl #1
   22f90:	andeq	r3, r2, r0, ror r0
   22f94:	andeq	r3, r2, r0, lsl #1
   22f98:	andeq	r3, r2, r0, ror r0
   22f9c:	andeq	r3, r2, r0, lsl #1
   22fa0:	andeq	r3, r2, r0, lsl #1
   22fa4:	andeq	r3, r2, r0, ror r0
   22fa8:	andeq	r3, r2, r0, lsl #1
   22fac:	andeq	r3, r2, r0, lsl #1
   22fb0:	andeq	r3, r2, r0, lsl #1
   22fb4:	andeq	r3, r2, r0, lsl #1
   22fb8:	andeq	r3, r2, r0, lsl #1
   22fbc:	andeq	r3, r2, r0, lsl #1
   22fc0:	andeq	r3, r2, r0, lsl #1
   22fc4:	andeq	r3, r2, r0, lsl #1
   22fc8:	andeq	r3, r2, r0, lsl #1
   22fcc:	andeq	r3, r2, r0, lsl #1
   22fd0:	andeq	r3, r2, r0, lsl #1
   22fd4:	andeq	r3, r2, r0, lsl #1
   22fd8:	andeq	r3, r2, r0, lsl #1
   22fdc:	andeq	r3, r2, r0, lsl #1
   22fe0:	andeq	r3, r2, r0, lsl #1
   22fe4:	andeq	r3, r2, r0, lsl #1
   22fe8:	andeq	r3, r2, r0, lsl #1
   22fec:	andeq	r3, r2, r0, lsl #1
   22ff0:	andeq	r3, r2, r0, lsl #1
   22ff4:	andeq	r3, r2, r0, lsl #1
   22ff8:	andeq	r3, r2, r0, lsl #1
   22ffc:	andeq	r3, r2, r0, lsl #1
   23000:	andeq	r3, r2, r0, lsl #1
   23004:	andeq	r3, r2, r0, lsl #1
   23008:	andeq	r3, r2, r0, lsl #1
   2300c:	andeq	r3, r2, r0, lsl #1
   23010:	andeq	r3, r2, r0, lsl #1
   23014:	andeq	r3, r2, r0, lsl #1
   23018:	andeq	r3, r2, r0, lsl #1
   2301c:	andeq	r3, r2, r0, lsl #1
   23020:	andeq	r3, r2, r0, lsl #1
   23024:	andeq	r3, r2, r0, lsl #1
   23028:	andeq	r3, r2, r0, lsl #1
   2302c:	andeq	r3, r2, r0, lsl #1
   23030:	andeq	r3, r2, r0, lsl #1
   23034:	andeq	r3, r2, r0, lsl #1
   23038:	andeq	r3, r2, r0, lsl #1
   2303c:	andeq	r3, r2, r0, lsl #1
   23040:	andeq	r3, r2, r0, lsl #1
   23044:	andeq	r3, r2, r0, lsl #1
   23048:	andeq	r3, r2, r0, lsl #1
   2304c:	andeq	r3, r2, r0, lsl #1
   23050:	andeq	r3, r2, r0, lsl #1
   23054:	andeq	r3, r2, r0, lsl #1
   23058:	andeq	r3, r2, r0, lsl #1
   2305c:	andeq	r3, r2, r4, rrx
   23060:	andeq	r3, r2, r0, ror r0
   23064:	mov	r3, #1
   23068:	str	r3, [sp, #52]	; 0x34
   2306c:	b	22f58 <__assert_fail@plt+0x111e4>
   23070:	mov	r9, r3
   23074:	b	22f58 <__assert_fail@plt+0x111e4>
   23078:	mov	r8, #1
   2307c:	b	22f58 <__assert_fail@plt+0x111e4>
   23080:	sub	r2, r3, #48	; 0x30
   23084:	cmp	r2, #9
   23088:	bls	23388 <__assert_fail@plt+0x11614>
   2308c:	cmp	r3, #69	; 0x45
   23090:	beq	2335c <__assert_fail@plt+0x115e8>
   23094:	cmp	r3, #79	; 0x4f
   23098:	movne	r6, #0
   2309c:	movne	lr, r6
   230a0:	beq	2335c <__assert_fail@plt+0x115e8>
   230a4:	cmp	r3, #122	; 0x7a
   230a8:	ldrls	pc, [pc, r3, lsl #2]
   230ac:	b	232a0 <__assert_fail@plt+0x1152c>
   230b0:	muleq	r2, ip, r2
   230b4:	andeq	r3, r2, r0, lsr #5
   230b8:	andeq	r3, r2, r0, lsr #5
   230bc:	andeq	r3, r2, r0, lsr #5
   230c0:	andeq	r3, r2, r0, lsr #5
   230c4:	andeq	r3, r2, r0, lsr #5
   230c8:	andeq	r3, r2, r0, lsr #5
   230cc:	andeq	r3, r2, r0, lsr #5
   230d0:	andeq	r3, r2, r0, lsr #5
   230d4:	andeq	r3, r2, r0, lsr #5
   230d8:	andeq	r3, r2, r0, lsr #5
   230dc:	andeq	r3, r2, r0, lsr #5
   230e0:	andeq	r3, r2, r0, lsr #5
   230e4:	andeq	r3, r2, r0, lsr #5
   230e8:	andeq	r3, r2, r0, lsr #5
   230ec:	andeq	r3, r2, r0, lsr #5
   230f0:	andeq	r3, r2, r0, lsr #5
   230f4:	andeq	r3, r2, r0, lsr #5
   230f8:	andeq	r3, r2, r0, lsr #5
   230fc:	andeq	r3, r2, r0, lsr #5
   23100:	andeq	r3, r2, r0, lsr #5
   23104:	andeq	r3, r2, r0, lsr #5
   23108:	andeq	r3, r2, r0, lsr #5
   2310c:	andeq	r3, r2, r0, lsr #5
   23110:	andeq	r3, r2, r0, lsr #5
   23114:	andeq	r3, r2, r0, lsr #5
   23118:	andeq	r3, r2, r0, lsr #5
   2311c:	andeq	r3, r2, r0, lsr #5
   23120:	andeq	r3, r2, r0, lsr #5
   23124:	andeq	r3, r2, r0, lsr #5
   23128:	andeq	r3, r2, r0, lsr #5
   2312c:	andeq	r3, r2, r0, lsr #5
   23130:	andeq	r3, r2, r0, lsr #5
   23134:	andeq	r3, r2, r0, lsr #5
   23138:	andeq	r3, r2, r0, lsr #5
   2313c:	andeq	r3, r2, r0, lsr #5
   23140:	andeq	r3, r2, r0, lsr #5
   23144:	andeq	r3, r2, r8, lsr #26
   23148:	andeq	r3, r2, r0, lsr #5
   2314c:	andeq	r3, r2, r0, lsr #5
   23150:	andeq	r3, r2, r0, lsr #5
   23154:	andeq	r3, r2, r0, lsr #5
   23158:	andeq	r3, r2, r0, lsr #5
   2315c:	andeq	r3, r2, r0, lsr #5
   23160:	andeq	r3, r2, r0, lsr #5
   23164:	andeq	r3, r2, r0, lsr #5
   23168:	andeq	r3, r2, r0, lsr #5
   2316c:	andeq	r3, r2, r0, lsr #5
   23170:	andeq	r3, r2, r0, lsr #5
   23174:	andeq	r3, r2, r0, lsr #5
   23178:	andeq	r3, r2, r0, lsr #5
   2317c:	andeq	r3, r2, r0, lsr #5
   23180:	andeq	r3, r2, r0, lsr #5
   23184:	andeq	r3, r2, r0, lsr #5
   23188:	andeq	r3, r2, r0, lsr #5
   2318c:	andeq	r3, r2, r0, lsr #5
   23190:	andeq	r3, r2, r0, lsr #5
   23194:	andeq	r3, r2, r0, lsr #5
   23198:	andeq	r4, r2, ip, lsl #6
   2319c:	andeq	r3, r2, r0, lsr #5
   231a0:	andeq	r3, r2, r0, lsr #5
   231a4:	andeq	r3, r2, r0, lsr #5
   231a8:	andeq	r3, r2, r0, lsr #5
   231ac:	andeq	r3, r2, r0, lsr #5
   231b0:	andeq	r3, r2, r0, lsr #5
   231b4:	ldrdeq	r3, [r2], -r4
   231b8:	andeq	r3, r2, r0, lsl r6
   231bc:	andeq	r3, r2, r8, ror #31
   231c0:	muleq	r2, r0, r2
   231c4:	andeq	r3, r2, r0, lsr #5
   231c8:			; <UNDEFINED> instruction: 0x000242bc
   231cc:	andeq	r4, r2, ip, lsr #1
   231d0:	andeq	r4, r2, r0, asr #4
   231d4:	andeq	r4, r2, ip, asr r2
   231d8:	andeq	r3, r2, r0, lsr #5
   231dc:	andeq	r3, r2, r0, lsr #5
   231e0:	andeq	r3, r2, r0, lsr #5
   231e4:	andeq	r4, r2, r4, ror r2
   231e8:	strdeq	r3, [r2], -ip
   231ec:	andeq	r3, r2, r0, lsr #5
   231f0:	andeq	r4, r2, r4, lsr r3
   231f4:	andeq	r3, r2, r0, lsr #5
   231f8:	andeq	r4, r2, r0, lsl #6
   231fc:	andeq	r3, r2, r4, asr sl
   23200:	andeq	r3, r2, r0, ror sl
   23204:	andeq	r3, r2, r4, ror #22
   23208:	andeq	r4, r2, ip, lsr #1
   2320c:	andeq	r3, r2, r0, lsr #23
   23210:	andeq	r3, r2, r8, asr #7
   23214:	andeq	r3, r2, ip, ror pc
   23218:	andeq	r3, r2, r0, lsr #13
   2321c:	andeq	r3, r2, r0, lsr #5
   23220:	andeq	r3, r2, r0, lsr #5
   23224:	andeq	r3, r2, r0, lsr #5
   23228:	andeq	r3, r2, r0, lsr #5
   2322c:	andeq	r3, r2, r0, lsr #5
   23230:	andeq	r3, r2, r0, lsr #5
   23234:	ldrdeq	r3, [r2], -r4
   23238:	andeq	r3, r2, r0, ror #29
   2323c:	andeq	r3, r2, r8, asr #7
   23240:	andeq	r3, r2, r0, asr #16
   23244:	andeq	r3, r2, r0, lsr sl
   23248:	andeq	r3, r2, r0, lsr #5
   2324c:	andeq	r4, r2, ip, lsr #1
   23250:	andeq	r3, r2, r0, ror #29
   23254:	andeq	r3, r2, r0, lsr #5
   23258:	andeq	r4, r2, ip, ror r0
   2325c:	muleq	r2, r8, r0
   23260:	andeq	r3, r2, r4, lsl #28
   23264:	andeq	r3, r2, r4, lsl lr
   23268:	andeq	r3, r2, r4, asr lr
   2326c:	andeq	r3, r2, r0, lsr #5
   23270:	andeq	r3, r2, r0, asr #29
   23274:	andeq	r3, r2, r4, ror #11
   23278:	ldrdeq	r3, [r2], -r0
   2327c:	andeq	r3, r2, r4, lsl #10
   23280:	andeq	r3, r2, r0, lsr r6
   23284:	andeq	r3, r2, ip, lsr #27
   23288:	andeq	r3, r2, r0, lsr #5
   2328c:	andeq	r3, r2, r8, ror #27
   23290:	andeq	r3, r2, r8, asr #7
   23294:	strdeq	r3, [r2], -ip
   23298:	andeq	r3, r2, ip, ror r7
   2329c:	sub	r4, r4, #1
   232a0:	ldr	r3, [sp, #48]	; 0x30
   232a4:	sub	r3, r3, sl
   232a8:	str	r3, [sp, #84]	; 0x54
   232ac:	mvn	r3, fp
   232b0:	cmp	r9, #45	; 0x2d
   232b4:	lsr	r3, r3, #31
   232b8:	sub	r6, r4, r7
   232bc:	moveq	r3, #0
   232c0:	add	r6, r6, #1
   232c4:	cmp	r3, #0
   232c8:	moveq	fp, r3
   232cc:	moveq	r8, r6
   232d0:	beq	232e0 <__assert_fail@plt+0x1156c>
   232d4:	cmp	r6, fp
   232d8:	movcs	r8, r6
   232dc:	movcc	r8, fp
   232e0:	ldr	r3, [sp, #84]	; 0x54
   232e4:	cmp	r8, r3
   232e8:	bcs	22f00 <__assert_fail@plt+0x1118c>
   232ec:	cmp	r5, #0
   232f0:	beq	23380 <__assert_fail@plt+0x1160c>
   232f4:	cmp	r6, fp
   232f8:	bcs	23320 <__assert_fail@plt+0x115ac>
   232fc:	cmp	r9, #43	; 0x2b
   23300:	cmpne	r9, #48	; 0x30
   23304:	sub	r2, fp, r6
   23308:	mov	r0, r5
   2330c:	add	r3, r5, r2
   23310:	moveq	r1, #48	; 0x30
   23314:	movne	r1, #32
   23318:	mov	r5, r3
   2331c:	bl	11be8 <memset@plt>
   23320:	ldr	r3, [sp, #52]	; 0x34
   23324:	cmp	r3, #0
   23328:	beq	2336c <__assert_fail@plt+0x115f8>
   2332c:	cmp	r6, #0
   23330:	beq	2337c <__assert_fail@plt+0x11608>
   23334:	bl	11b28 <__ctype_toupper_loc@plt>
   23338:	add	r3, r7, r6
   2333c:	add	r2, r5, r6
   23340:	ldrb	ip, [r3, #-1]!
   23344:	ldr	r1, [r0]
   23348:	cmp	r7, r3
   2334c:	ldr	r1, [r1, ip, lsl #2]
   23350:	strb	r1, [r2, #-1]!
   23354:	bne	23340 <__assert_fail@plt+0x115cc>
   23358:	b	2337c <__assert_fail@plt+0x11608>
   2335c:	mov	lr, r3
   23360:	add	r4, r4, #1
   23364:	ldrb	r3, [r4]
   23368:	b	230a4 <__assert_fail@plt+0x11330>
   2336c:	mov	r1, r7
   23370:	mov	r2, r6
   23374:	mov	r0, r5
   23378:	bl	11930 <memcpy@plt>
   2337c:	add	r5, r5, r6
   23380:	add	sl, sl, r8
   23384:	b	22eb8 <__assert_fail@plt+0x11144>
   23388:	mov	fp, #0
   2338c:	mov	r1, #10
   23390:	smull	r2, r3, fp, r1
   23394:	mvn	fp, #-2147483648	; 0x80000000
   23398:	cmp	r3, r2, asr #31
   2339c:	bne	233b0 <__assert_fail@plt+0x1163c>
   233a0:	ldrb	r3, [r4]
   233a4:	sub	fp, r3, #48	; 0x30
   233a8:	adds	fp, r2, fp
   233ac:	mvnvs	fp, #-2147483648	; 0x80000000
   233b0:	ldrb	r3, [r4, #1]!
   233b4:	sub	r2, r3, #48	; 0x30
   233b8:	cmp	r2, #9
   233bc:	bls	23390 <__assert_fail@plt+0x1161c>
   233c0:	mov	r6, r3
   233c4:	b	2308c <__assert_fail@plt+0x11318>
   233c8:	cmp	r6, #79	; 0x4f
   233cc:	beq	232a0 <__assert_fail@plt+0x1152c>
   233d0:	mov	r7, #0
   233d4:	add	r2, sp, #152	; 0x98
   233d8:	movw	r1, #9504	; 0x2520
   233dc:	cmp	r6, #0
   233e0:	strh	r1, [r2]
   233e4:	addeq	r1, r2, #2
   233e8:	bne	23604 <__assert_fail@plt+0x11890>
   233ec:	mov	ip, #0
   233f0:	add	r6, sp, #168	; 0xa8
   233f4:	strb	r3, [r1]
   233f8:	mov	r0, r6
   233fc:	ldr	r3, [sp, #100]	; 0x64
   23400:	strb	ip, [r1, #1]
   23404:	mov	r1, #1024	; 0x400
   23408:	bl	11b04 <strftime@plt>
   2340c:	cmp	r0, #0
   23410:	beq	22eb8 <__assert_fail@plt+0x11144>
   23414:	mvn	r3, fp
   23418:	cmp	r9, #45	; 0x2d
   2341c:	lsr	r3, r3, #31
   23420:	moveq	r3, #0
   23424:	sub	r8, r0, #1
   23428:	cmp	r3, #0
   2342c:	moveq	fp, r8
   23430:	beq	23444 <__assert_fail@plt+0x116d0>
   23434:	mov	r3, fp
   23438:	cmp	r8, fp
   2343c:	movcs	fp, r8
   23440:	movcc	fp, r3
   23444:	ldr	r2, [sp, #48]	; 0x30
   23448:	sub	r2, r2, sl
   2344c:	cmp	r2, fp
   23450:	bls	22f00 <__assert_fail@plt+0x1118c>
   23454:	cmp	r5, #0
   23458:	beq	234cc <__assert_fail@plt+0x11758>
   2345c:	cmp	r8, r3
   23460:	bcs	23488 <__assert_fail@plt+0x11714>
   23464:	cmp	r9, #43	; 0x2b
   23468:	cmpne	r9, #48	; 0x30
   2346c:	sub	r2, r3, r8
   23470:	mov	r0, r5
   23474:	add	r3, r5, r2
   23478:	moveq	r1, #48	; 0x30
   2347c:	movne	r1, #32
   23480:	mov	r5, r3
   23484:	bl	11be8 <memset@plt>
   23488:	cmp	r7, #0
   2348c:	bne	24474 <__assert_fail@plt+0x12700>
   23490:	ldr	r3, [sp, #52]	; 0x34
   23494:	cmp	r3, #0
   23498:	beq	2445c <__assert_fail@plt+0x126e8>
   2349c:	cmp	r8, #0
   234a0:	beq	234cc <__assert_fail@plt+0x11758>
   234a4:	add	r5, r5, r8
   234a8:	add	r8, r6, r8
   234ac:	bl	11b28 <__ctype_toupper_loc@plt>
   234b0:	mov	r3, r5
   234b4:	ldrb	r1, [r8], #-1
   234b8:	ldr	r2, [r0]
   234bc:	cmp	r6, r8
   234c0:	ldr	r2, [r2, r1, lsl #2]
   234c4:	strb	r2, [r3, #-1]!
   234c8:	bne	234b4 <__assert_fail@plt+0x11740>
   234cc:	add	sl, sl, fp
   234d0:	b	22eb8 <__assert_fail@plt+0x11144>
   234d4:	cmp	r6, #0
   234d8:	bne	232a0 <__assert_fail@plt+0x1152c>
   234dc:	ldr	r2, [sp, #52]	; 0x34
   234e0:	cmp	r8, #0
   234e4:	movw	r0, #9504	; 0x2520
   234e8:	movne	r2, r8
   234ec:	mov	r7, #0
   234f0:	str	r2, [sp, #52]	; 0x34
   234f4:	add	r2, sp, #152	; 0x98
   234f8:	mov	r1, r2
   234fc:	strh	r0, [r1], #2
   23500:	b	233ec <__assert_fail@plt+0x11678>
   23504:	ldr	lr, [sp, #100]	; 0x64
   23508:	mvn	ip, #0
   2350c:	add	r1, sp, #168	; 0xa8
   23510:	ldr	r0, [sp, #1248]	; 0x4e0
   23514:	ldrd	r6, [lr]
   23518:	ldrd	r2, [lr, #24]
   2351c:	strd	r6, [sp, #168]	; 0xa8
   23520:	ldrd	r6, [lr, #8]
   23524:	strd	r2, [sp, #192]	; 0xc0
   23528:	ldr	r3, [lr, #40]	; 0x28
   2352c:	strd	r6, [sp, #176]	; 0xb0
   23530:	ldrd	r6, [lr, #32]
   23534:	str	ip, [sp, #196]	; 0xc4
   23538:	str	r3, [sp, #208]	; 0xd0
   2353c:	ldrd	r2, [lr, #16]
   23540:	strd	r2, [sp, #184]	; 0xb8
   23544:	strd	r6, [sp, #200]	; 0xc8
   23548:	bl	294d8 <_obstack_memory_used@@Base+0x4420>
   2354c:	ldr	r3, [sp, #196]	; 0xc4
   23550:	cmp	r3, #0
   23554:	blt	24bbc <__assert_fail@plt+0x12e48>
   23558:	lsr	r3, r0, #31
   2355c:	add	r2, sp, #152	; 0x98
   23560:	cmp	r0, #0
   23564:	add	r6, r2, #14
   23568:	str	r3, [sp, #84]	; 0x54
   2356c:	blt	235b0 <__assert_fail@plt+0x1183c>
   23570:	movw	r3, #26215	; 0x6667
   23574:	movt	r3, #26214	; 0x6666
   23578:	asr	ip, r0, #31
   2357c:	smull	r3, r1, r3, r0
   23580:	asr	r1, r1, #2
   23584:	sub	r3, r1, ip
   23588:	add	r3, r3, r3, lsl #2
   2358c:	sub	r3, r0, r3, lsl #1
   23590:	subs	r0, r1, ip
   23594:	add	r3, r3, #48	; 0x30
   23598:	strb	r3, [r6, #-1]!
   2359c:	bne	23570 <__assert_fail@plt+0x117fc>
   235a0:	mov	r0, #1
   235a4:	mov	r1, #0
   235a8:	strd	r0, [sp, #140]	; 0x8c
   235ac:	b	23934 <__assert_fail@plt+0x11bc0>
   235b0:	movw	r3, #26215	; 0x6667
   235b4:	movt	r3, #26214	; 0x6666
   235b8:	asr	ip, r0, #31
   235bc:	smull	r3, r1, r3, r0
   235c0:	asr	r1, r1, #2
   235c4:	sub	r3, r1, ip
   235c8:	add	r3, r3, r3, lsl #2
   235cc:	sub	r3, r0, r3, lsl #1
   235d0:	subs	r0, r1, ip
   235d4:	rsb	r3, r3, #48	; 0x30
   235d8:	strb	r3, [r6, #-1]!
   235dc:	bne	235b0 <__assert_fail@plt+0x1183c>
   235e0:	b	235a0 <__assert_fail@plt+0x1182c>
   235e4:	ldr	r2, [sp, #100]	; 0x64
   235e8:	cmp	r6, #79	; 0x4f
   235ec:	ldr	r2, [r2, #16]
   235f0:	bne	245c4 <__assert_fail@plt+0x12850>
   235f4:	add	r2, sp, #152	; 0x98
   235f8:	movw	r1, #9504	; 0x2520
   235fc:	mov	r7, #0
   23600:	strh	r1, [r2]
   23604:	add	r1, r2, #3
   23608:	strb	lr, [sp, #154]	; 0x9a
   2360c:	b	233ec <__assert_fail@plt+0x11678>
   23610:	cmp	r6, #69	; 0x45
   23614:	beq	232a0 <__assert_fail@plt+0x1152c>
   23618:	ldr	r2, [sp, #52]	; 0x34
   2361c:	cmp	r8, #0
   23620:	mov	r7, #0
   23624:	movne	r2, r8
   23628:	str	r2, [sp, #52]	; 0x34
   2362c:	b	233d4 <__assert_fail@plt+0x11660>
   23630:	ldr	r3, [sp, #48]	; 0x30
   23634:	cmp	r9, #45	; 0x2d
   23638:	sub	r3, r3, sl
   2363c:	beq	244f0 <__assert_fail@plt+0x1277c>
   23640:	cmp	fp, #0
   23644:	blt	244f0 <__assert_fail@plt+0x1277c>
   23648:	cmp	fp, #1
   2364c:	movcs	r6, fp
   23650:	movcc	r6, #1
   23654:	cmp	r6, r3
   23658:	bcs	22f00 <__assert_fail@plt+0x1118c>
   2365c:	cmp	r5, #0
   23660:	beq	23698 <__assert_fail@plt+0x11924>
   23664:	cmp	fp, #1
   23668:	ble	23690 <__assert_fail@plt+0x1191c>
   2366c:	cmp	r9, #43	; 0x2b
   23670:	cmpne	r9, #48	; 0x30
   23674:	sub	r2, fp, #1
   23678:	mov	r0, r5
   2367c:	add	r3, r5, r2
   23680:	moveq	r1, #48	; 0x30
   23684:	movne	r1, #32
   23688:	mov	r5, r3
   2368c:	bl	11be8 <memset@plt>
   23690:	mov	r3, #9
   23694:	strb	r3, [r5], #1
   23698:	add	sl, sl, r6
   2369c:	b	22eb8 <__assert_fail@plt+0x11144>
   236a0:	ldr	r3, [sp, #52]	; 0x34
   236a4:	cmp	r8, #0
   236a8:	movne	r3, #0
   236ac:	ldr	r0, [sp, #112]	; 0x70
   236b0:	str	r3, [sp, #52]	; 0x34
   236b4:	bl	11b94 <strlen@plt>
   236b8:	subs	r3, r9, #45	; 0x2d
   236bc:	mov	r6, r0
   236c0:	movne	r3, #1
   236c4:	cmp	fp, #0
   236c8:	movlt	r3, #0
   236cc:	cmp	r3, #0
   236d0:	moveq	fp, r3
   236d4:	moveq	r7, r0
   236d8:	beq	236e8 <__assert_fail@plt+0x11974>
   236dc:	cmp	r0, fp
   236e0:	movcs	r7, r0
   236e4:	movcc	r7, fp
   236e8:	ldr	r3, [sp, #48]	; 0x30
   236ec:	sub	r3, r3, sl
   236f0:	cmp	r3, r7
   236f4:	bls	22f00 <__assert_fail@plt+0x1118c>
   236f8:	cmp	r5, #0
   236fc:	beq	23774 <__assert_fail@plt+0x11a00>
   23700:	cmp	r6, fp
   23704:	bcs	2372c <__assert_fail@plt+0x119b8>
   23708:	cmp	r9, #43	; 0x2b
   2370c:	cmpne	r9, #48	; 0x30
   23710:	sub	r2, fp, r6
   23714:	mov	r0, r5
   23718:	add	r3, r5, r2
   2371c:	moveq	r1, #48	; 0x30
   23720:	movne	r1, #32
   23724:	mov	r5, r3
   23728:	bl	11be8 <memset@plt>
   2372c:	cmp	r8, #0
   23730:	bne	24a88 <__assert_fail@plt+0x12d14>
   23734:	ldr	r3, [sp, #52]	; 0x34
   23738:	cmp	r3, #0
   2373c:	beq	24a70 <__assert_fail@plt+0x12cfc>
   23740:	cmp	r6, #0
   23744:	beq	23774 <__assert_fail@plt+0x11a00>
   23748:	bl	11b28 <__ctype_toupper_loc@plt>
   2374c:	ldr	ip, [sp, #112]	; 0x70
   23750:	add	r5, r5, r6
   23754:	mov	r3, r5
   23758:	add	r6, ip, r6
   2375c:	ldrb	r1, [r6, #-1]!
   23760:	ldr	r2, [r0]
   23764:	cmp	ip, r6
   23768:	ldr	r2, [r2, r1, lsl #2]
   2376c:	strb	r2, [r3, #-1]!
   23770:	bne	2375c <__assert_fail@plt+0x119e8>
   23774:	add	sl, sl, r7
   23778:	b	22eb8 <__assert_fail@plt+0x11144>
   2377c:	mov	r2, #0
   23780:	str	r2, [sp, #140]	; 0x8c
   23784:	ldr	r1, [sp, #100]	; 0x64
   23788:	ldr	r2, [r1, #32]
   2378c:	cmp	r2, #0
   23790:	blt	22eb8 <__assert_fail@plt+0x11144>
   23794:	ldr	r1, [r1, #36]	; 0x24
   23798:	cmp	r1, #0
   2379c:	blt	246a0 <__assert_fail@plt+0x1292c>
   237a0:	bne	24798 <__assert_fail@plt+0x12a24>
   237a4:	ldr	r2, [sp, #112]	; 0x70
   237a8:	ldrb	r2, [r2]
   237ac:	cmp	r2, #45	; 0x2d
   237b0:	movne	r2, r1
   237b4:	moveq	r2, #1
   237b8:	moveq	r8, r1
   237bc:	movne	r8, #1
   237c0:	str	r2, [sp, #84]	; 0x54
   237c4:	ldr	r0, [sp, #116]	; 0x74
   237c8:	movw	ip, #34953	; 0x8889
   237cc:	movt	ip, #34952	; 0x8888
   237d0:	smull	r2, r0, r0, r1
   237d4:	str	r0, [sp, #144]	; 0x90
   237d8:	smull	r0, r2, ip, r1
   237dc:	ldr	r0, [sp, #144]	; 0x90
   237e0:	add	r2, r2, r1
   237e4:	str	r2, [sp, #144]	; 0x90
   237e8:	asr	r2, r1, #31
   237ec:	add	r0, r0, r1
   237f0:	rsb	r0, r2, r0, asr #11
   237f4:	str	r0, [sp, #148]	; 0x94
   237f8:	ldr	r0, [sp, #144]	; 0x90
   237fc:	rsb	r2, r2, r0, asr #5
   23800:	smull	ip, r0, ip, r2
   23804:	rsb	ip, r2, r2, lsl #4
   23808:	sub	ip, r1, ip, lsl #2
   2380c:	add	r0, r0, r2
   23810:	asr	r1, r2, #31
   23814:	rsb	r0, r1, r0, asr #5
   23818:	rsb	r0, r0, r0, lsl #4
   2381c:	sub	r0, r2, r0, lsl #2
   23820:	ldr	r2, [sp, #140]	; 0x8c
   23824:	cmp	r2, #3
   23828:	ldrls	pc, [pc, r2, lsl #2]
   2382c:	b	232a0 <__assert_fail@plt+0x1152c>
   23830:	muleq	r2, r0, r3
   23834:	andeq	r4, r2, ip, lsr r3
   23838:	andeq	r4, r2, r0, ror #6
   2383c:			; <UNDEFINED> instruction: 0x000243b0
   23840:	cmp	r6, #69	; 0x45
   23844:	beq	232a0 <__assert_fail@plt+0x1152c>
   23848:	mov	r2, #2
   2384c:	str	r2, [sp, #140]	; 0x8c
   23850:	ldr	r2, [sp, #100]	; 0x64
   23854:	ldr	r2, [r2, #12]
   23858:	mov	r1, r2
   2385c:	mov	r0, #0
   23860:	lsr	r2, r2, #31
   23864:	cmp	r1, r0
   23868:	movlt	r8, #0
   2386c:	movge	r8, #1
   23870:	str	r2, [sp, #84]	; 0x54
   23874:	str	r0, [sp, #144]	; 0x90
   23878:	cmp	r6, #79	; 0x4f
   2387c:	movne	r6, #0
   23880:	andeq	r6, r8, #1
   23884:	cmp	r6, #0
   23888:	bne	235f4 <__assert_fail@plt+0x11880>
   2388c:	ldr	r3, [sp, #84]	; 0x54
   23890:	cmp	r3, #0
   23894:	rsbne	r1, r1, #0
   23898:	add	r2, sp, #152	; 0x98
   2389c:	mov	r7, #58	; 0x3a
   238a0:	str	r4, [sp, #148]	; 0x94
   238a4:	add	ip, r2, #14
   238a8:	ldr	r4, [sp, #108]	; 0x6c
   238ac:	b	238f0 <__assert_fail@plt+0x11b7c>
   238b0:	lsr	r3, r3, #3
   238b4:	sub	r6, ip, #2
   238b8:	strb	r7, [ip, #-1]
   238bc:	asrs	r0, r0, #1
   238c0:	add	lr, r3, r3, lsl #2
   238c4:	movne	r8, #1
   238c8:	moveq	r8, #0
   238cc:	cmp	r1, #9
   238d0:	orrhi	r8, r8, #1
   238d4:	sub	r1, r1, lr, lsl #1
   238d8:	cmp	r8, #0
   238dc:	add	r1, r1, #48	; 0x30
   238e0:	strb	r1, [ip, #-2]
   238e4:	beq	23930 <__assert_fail@plt+0x11bbc>
   238e8:	mov	ip, r6
   238ec:	mov	r1, r3
   238f0:	tst	r0, #1
   238f4:	umull	lr, r3, r4, r1
   238f8:	sub	r6, ip, #1
   238fc:	bne	238b0 <__assert_fail@plt+0x11b3c>
   23900:	lsr	r3, r3, #3
   23904:	asrs	r0, r0, #1
   23908:	add	lr, r3, r3, lsl #2
   2390c:	movne	r8, #1
   23910:	moveq	r8, #0
   23914:	cmp	r1, #9
   23918:	orrhi	r8, r8, #1
   2391c:	sub	r1, r1, lr, lsl #1
   23920:	cmp	r8, #0
   23924:	add	r1, r1, #48	; 0x30
   23928:	strb	r1, [ip, #-1]
   2392c:	bne	238e8 <__assert_fail@plt+0x11b74>
   23930:	ldr	r4, [sp, #148]	; 0x94
   23934:	cmp	r9, #0
   23938:	moveq	r3, #1
   2393c:	moveq	r9, #48	; 0x30
   23940:	beq	2394c <__assert_fail@plt+0x11bd8>
   23944:	subs	r3, r9, #45	; 0x2d
   23948:	movne	r3, #1
   2394c:	ldr	r1, [sp, #140]	; 0x8c
   23950:	cmp	fp, #0
   23954:	add	r2, r2, #14
   23958:	sub	r7, r2, r6
   2395c:	movlt	fp, r1
   23960:	ldr	r1, [sp, #84]	; 0x54
   23964:	cmp	r1, #0
   23968:	bne	243d8 <__assert_fail@plt+0x12664>
   2396c:	ldr	r1, [sp, #144]	; 0x90
   23970:	cmp	r1, #0
   23974:	bne	244b4 <__assert_fail@plt+0x12740>
   23978:	sub	r2, fp, r7
   2397c:	cmp	r2, #0
   23980:	movle	r3, #0
   23984:	andgt	r3, r3, #1
   23988:	cmp	r3, #0
   2398c:	bne	239a0 <__assert_fail@plt+0x11c2c>
   23990:	cmp	r9, #45	; 0x2d
   23994:	moveq	fp, r1
   23998:	moveq	r8, r7
   2399c:	beq	239ac <__assert_fail@plt+0x11c38>
   239a0:	cmp	fp, r7
   239a4:	movcs	r8, fp
   239a8:	movcc	r8, r7
   239ac:	ldr	r3, [sp, #48]	; 0x30
   239b0:	sub	r3, r3, sl
   239b4:	cmp	r3, r8
   239b8:	bls	22f00 <__assert_fail@plt+0x1118c>
   239bc:	cmp	r5, #0
   239c0:	beq	23380 <__assert_fail@plt+0x1160c>
   239c4:	cmp	fp, r7
   239c8:	bls	239f0 <__assert_fail@plt+0x11c7c>
   239cc:	cmp	r9, #43	; 0x2b
   239d0:	cmpne	r9, #48	; 0x30
   239d4:	sub	r2, fp, r7
   239d8:	mov	r0, r5
   239dc:	add	r3, r5, r2
   239e0:	moveq	r1, #48	; 0x30
   239e4:	movne	r1, #32
   239e8:	mov	r5, r3
   239ec:	bl	11be8 <memset@plt>
   239f0:	ldr	r3, [sp, #52]	; 0x34
   239f4:	cmp	r3, #0
   239f8:	beq	24444 <__assert_fail@plt+0x126d0>
   239fc:	cmp	r7, #0
   23a00:	beq	23380 <__assert_fail@plt+0x1160c>
   23a04:	add	r5, r5, r7
   23a08:	add	r7, r6, r7
   23a0c:	bl	11b28 <__ctype_toupper_loc@plt>
   23a10:	mov	r3, r5
   23a14:	ldrb	r1, [r7, #-1]!
   23a18:	ldr	r2, [r0]
   23a1c:	cmp	r6, r7
   23a20:	ldr	r2, [r2, r1, lsl #2]
   23a24:	strb	r2, [r3, #-1]!
   23a28:	bne	23a14 <__assert_fail@plt+0x11ca0>
   23a2c:	b	23380 <__assert_fail@plt+0x1160c>
   23a30:	cmp	r6, #69	; 0x45
   23a34:	beq	232a0 <__assert_fail@plt+0x1152c>
   23a38:	ldr	r2, [sp, #100]	; 0x64
   23a3c:	ldr	r2, [r2, #12]
   23a40:	mov	r1, #2
   23a44:	cmp	r9, #0
   23a48:	moveq	r9, #95	; 0x5f
   23a4c:	str	r1, [sp, #140]	; 0x8c
   23a50:	b	23858 <__assert_fail@plt+0x11ae4>
   23a54:	cmp	r6, #69	; 0x45
   23a58:	beq	232a0 <__assert_fail@plt+0x1152c>
   23a5c:	mov	r2, #2
   23a60:	str	r2, [sp, #140]	; 0x8c
   23a64:	ldr	r2, [sp, #100]	; 0x64
   23a68:	ldr	r2, [r2]
   23a6c:	b	23858 <__assert_fail@plt+0x11ae4>
   23a70:	movw	r8, #440	; 0x1b8
   23a74:	movt	r8, #3
   23a78:	ldr	r3, [sp, #48]	; 0x30
   23a7c:	sub	r3, r3, sl
   23a80:	str	r3, [sp, #84]	; 0x54
   23a84:	mvn	r3, #0
   23a88:	mov	ip, r3
   23a8c:	str	r3, [sp, #140]	; 0x8c
   23a90:	ldr	r1, [sp, #52]	; 0x34
   23a94:	mov	r2, r8
   23a98:	mov	r0, #0
   23a9c:	ldr	r3, [sp, #100]	; 0x64
   23aa0:	stm	sp, {r1, r9, ip}
   23aa4:	mvn	r1, #0
   23aa8:	ldr	ip, [sp, #1244]	; 0x4dc
   23aac:	str	ip, [sp, #12]
   23ab0:	ldr	ip, [sp, #1248]	; 0x4e0
   23ab4:	str	ip, [sp, #16]
   23ab8:	ldr	ip, [sp, #1252]	; 0x4e4
   23abc:	str	ip, [sp, #20]
   23ac0:	bl	22ba8 <__assert_fail@plt+0x10e34>
   23ac4:	cmp	r9, #45	; 0x2d
   23ac8:	mov	r7, r0
   23acc:	beq	244a8 <__assert_fail@plt+0x12734>
   23ad0:	cmp	fp, #0
   23ad4:	blt	244a8 <__assert_fail@plt+0x12734>
   23ad8:	cmp	r0, fp
   23adc:	movcs	r6, r0
   23ae0:	movcc	r6, fp
   23ae4:	ldr	r3, [sp, #84]	; 0x54
   23ae8:	cmp	r6, r3
   23aec:	bcs	22f00 <__assert_fail@plt+0x1118c>
   23af0:	cmp	r5, #0
   23af4:	beq	23698 <__assert_fail@plt+0x11924>
   23af8:	cmp	fp, r7
   23afc:	bls	23b24 <__assert_fail@plt+0x11db0>
   23b00:	cmp	r9, #43	; 0x2b
   23b04:	cmpne	r9, #48	; 0x30
   23b08:	sub	r2, fp, r7
   23b0c:	mov	r0, r5
   23b10:	add	r3, r5, r2
   23b14:	moveq	r1, #48	; 0x30
   23b18:	movne	r1, #32
   23b1c:	mov	r5, r3
   23b20:	bl	11be8 <memset@plt>
   23b24:	ldr	r3, [sp, #52]	; 0x34
   23b28:	mov	r2, r8
   23b2c:	mov	r0, r5
   23b30:	add	r5, r5, r7
   23b34:	ldr	r1, [sp, #84]	; 0x54
   23b38:	ldr	ip, [sp, #140]	; 0x8c
   23b3c:	stm	sp, {r3, r9, ip}
   23b40:	ldr	r3, [sp, #100]	; 0x64
   23b44:	ldr	ip, [sp, #1244]	; 0x4dc
   23b48:	str	ip, [sp, #12]
   23b4c:	ldr	ip, [sp, #1248]	; 0x4e0
   23b50:	str	ip, [sp, #16]
   23b54:	ldr	ip, [sp, #1252]	; 0x4e4
   23b58:	str	ip, [sp, #20]
   23b5c:	bl	22ba8 <__assert_fail@plt+0x10e34>
   23b60:	b	23698 <__assert_fail@plt+0x11924>
   23b64:	cmp	r6, #69	; 0x45
   23b68:	beq	232a0 <__assert_fail@plt+0x1152c>
   23b6c:	ldr	r1, [sp, #100]	; 0x64
   23b70:	movw	r2, #9363	; 0x2493
   23b74:	movt	r2, #37449	; 0x9249
   23b78:	mov	ip, #2
   23b7c:	str	ip, [sp, #140]	; 0x8c
   23b80:	ldrd	r0, [r1, #24]
   23b84:	sub	r1, r1, r0
   23b88:	add	r1, r1, #7
   23b8c:	smull	r2, r0, r2, r1
   23b90:	asr	r2, r1, #31
   23b94:	add	r1, r0, r1
   23b98:	rsb	r2, r2, r1, asr ip
   23b9c:	b	23858 <__assert_fail@plt+0x11ae4>
   23ba0:	cmp	r6, #69	; 0x45
   23ba4:	beq	232a0 <__assert_fail@plt+0x1152c>
   23ba8:	ldr	r0, [sp, #100]	; 0x64
   23bac:	mov	ip, #2
   23bb0:	movw	r1, #9363	; 0x2493
   23bb4:	movt	r1, #37449	; 0x9249
   23bb8:	str	ip, [sp, #140]	; 0x8c
   23bbc:	ldr	r2, [r0, #24]
   23bc0:	ldr	r7, [r0, #28]
   23bc4:	add	r2, r2, #6
   23bc8:	asr	r0, r2, #31
   23bcc:	smull	r8, ip, r1, r2
   23bd0:	add	ip, ip, r2
   23bd4:	rsb	r0, r0, ip, asr #2
   23bd8:	rsb	r0, r0, r0, lsl #3
   23bdc:	sub	r0, r2, r0
   23be0:	sub	r0, r7, r0
   23be4:	add	r0, r0, #7
   23be8:	asr	r2, r0, #31
   23bec:	smull	ip, r1, r1, r0
   23bf0:	add	r1, r1, r0
   23bf4:	rsb	r2, r2, r1, asr #2
   23bf8:	b	23858 <__assert_fail@plt+0x11ae4>
   23bfc:	ldr	r3, [sp, #48]	; 0x30
   23c00:	cmp	r6, #69	; 0x45
   23c04:	sub	r3, r3, sl
   23c08:	str	r3, [sp, #84]	; 0x54
   23c0c:	beq	232ac <__assert_fail@plt+0x11538>
   23c10:	cmp	fp, #0
   23c14:	ble	247a8 <__assert_fail@plt+0x12a34>
   23c18:	cmp	fp, #8
   23c1c:	bgt	24bec <__assert_fail@plt+0x12e78>
   23c20:	cmp	fp, #7
   23c24:	bgt	247b8 <__assert_fail@plt+0x12a44>
   23c28:	beq	247cc <__assert_fail@plt+0x12a58>
   23c2c:	cmp	fp, #6
   23c30:	beq	247e0 <__assert_fail@plt+0x12a6c>
   23c34:	cmp	fp, #5
   23c38:	beq	247f4 <__assert_fail@plt+0x12a80>
   23c3c:	cmp	fp, #4
   23c40:	beq	24808 <__assert_fail@plt+0x12a94>
   23c44:	cmp	fp, #3
   23c48:	beq	2481c <__assert_fail@plt+0x12aa8>
   23c4c:	cmp	fp, #1
   23c50:	bne	24bcc <__assert_fail@plt+0x12e58>
   23c54:	ldr	r2, [sp, #92]	; 0x5c
   23c58:	mov	r6, #1
   23c5c:	ldr	r3, [sp, #124]	; 0x7c
   23c60:	sub	r3, r3, r2, asr #31
   23c64:	add	r3, r3, r3, lsl #2
   23c68:	sub	r3, r2, r3, lsl r6
   23c6c:	add	r3, r3, #48	; 0x30
   23c70:	strb	r3, [sp, #152]	; 0x98
   23c74:	cmp	r9, #0
   23c78:	ldr	r3, [sp, #84]	; 0x54
   23c7c:	bne	246cc <__assert_fail@plt+0x12958>
   23c80:	cmp	r6, r3
   23c84:	bcs	22f00 <__assert_fail@plt+0x1118c>
   23c88:	ldr	r3, [sp, #48]	; 0x30
   23c8c:	add	sl, sl, r6
   23c90:	cmp	r5, #0
   23c94:	movne	r9, #48	; 0x30
   23c98:	sub	r7, r3, sl
   23c9c:	beq	24b84 <__assert_fail@plt+0x12e10>
   23ca0:	ldr	r3, [sp, #52]	; 0x34
   23ca4:	cmp	r3, #0
   23ca8:	beq	24ac0 <__assert_fail@plt+0x12d4c>
   23cac:	bl	11b28 <__ctype_toupper_loc@plt>
   23cb0:	add	r5, r5, r6
   23cb4:	add	lr, sp, #152	; 0x98
   23cb8:	mov	r2, r5
   23cbc:	add	r3, lr, r6
   23cc0:	ldrb	ip, [r3, #-1]!
   23cc4:	ldr	r1, [r0]
   23cc8:	cmp	lr, r3
   23ccc:	ldr	r1, [r1, ip, lsl #2]
   23cd0:	strb	r1, [r2, #-1]!
   23cd4:	bne	23cc0 <__assert_fail@plt+0x11f4c>
   23cd8:	cmp	r9, #45	; 0x2d
   23cdc:	beq	246f0 <__assert_fail@plt+0x1297c>
   23ce0:	sub	r2, fp, r6
   23ce4:	cmp	r2, r7
   23ce8:	bcs	22f00 <__assert_fail@plt+0x1118c>
   23cec:	cmp	r5, #0
   23cf0:	addeq	sl, sl, r2
   23cf4:	beq	22eb8 <__assert_fail@plt+0x11144>
   23cf8:	cmp	r2, #0
   23cfc:	beq	22eb8 <__assert_fail@plt+0x11144>
   23d00:	cmp	r9, #43	; 0x2b
   23d04:	cmpne	r9, #48	; 0x30
   23d08:	add	r3, r5, r2
   23d0c:	mov	r0, r5
   23d10:	moveq	r1, #48	; 0x30
   23d14:	movne	r1, #32
   23d18:	add	sl, sl, r2
   23d1c:	mov	r5, r3
   23d20:	bl	11be8 <memset@plt>
   23d24:	b	22eb8 <__assert_fail@plt+0x11144>
   23d28:	ldr	r2, [sp, #48]	; 0x30
   23d2c:	sub	r3, r4, #1
   23d30:	cmp	r3, r7
   23d34:	movne	r4, r3
   23d38:	sub	r2, r2, sl
   23d3c:	str	r2, [sp, #84]	; 0x54
   23d40:	bne	232ac <__assert_fail@plt+0x11538>
   23d44:	cmp	r9, #45	; 0x2d
   23d48:	mov	r3, r2
   23d4c:	beq	24700 <__assert_fail@plt+0x1298c>
   23d50:	cmp	fp, #0
   23d54:	blt	24700 <__assert_fail@plt+0x1298c>
   23d58:	cmp	fp, #1
   23d5c:	movcs	r6, fp
   23d60:	movcc	r6, #1
   23d64:	cmp	r6, r2
   23d68:	bcs	22f00 <__assert_fail@plt+0x1118c>
   23d6c:	cmp	r5, #0
   23d70:	beq	23698 <__assert_fail@plt+0x11924>
   23d74:	cmp	fp, #1
   23d78:	ble	23da0 <__assert_fail@plt+0x1202c>
   23d7c:	cmp	r9, #43	; 0x2b
   23d80:	cmpne	r9, #48	; 0x30
   23d84:	sub	r2, fp, #1
   23d88:	mov	r0, r5
   23d8c:	add	r3, r5, r2
   23d90:	moveq	r1, #48	; 0x30
   23d94:	movne	r1, #32
   23d98:	mov	r5, r3
   23d9c:	bl	11be8 <memset@plt>
   23da0:	ldrb	r3, [r4]
   23da4:	strb	r3, [r5], #1
   23da8:	b	23698 <__assert_fail@plt+0x11924>
   23dac:	ldr	r2, [sp, #100]	; 0x64
   23db0:	movw	r0, #9363	; 0x2493
   23db4:	movt	r0, #37449	; 0x9249
   23db8:	mov	r1, #1
   23dbc:	str	r1, [sp, #140]	; 0x8c
   23dc0:	ldr	r2, [r2, #24]
   23dc4:	add	r2, r2, #6
   23dc8:	asr	r1, r2, #31
   23dcc:	smull	ip, r0, r0, r2
   23dd0:	add	r0, r0, r2
   23dd4:	rsb	r1, r1, r0, asr #2
   23dd8:	rsb	r1, r1, r1, lsl #3
   23ddc:	sub	r2, r2, r1
   23de0:	add	r2, r2, #1
   23de4:	b	23858 <__assert_fail@plt+0x11ae4>
   23de8:	cmp	r6, #69	; 0x45
   23dec:	beq	232a0 <__assert_fail@plt+0x1152c>
   23df0:	mov	r2, #1
   23df4:	str	r2, [sp, #140]	; 0x8c
   23df8:	ldr	r2, [sp, #100]	; 0x64
   23dfc:	ldr	r2, [r2, #24]
   23e00:	b	23858 <__assert_fail@plt+0x11ae4>
   23e04:	cmp	r6, #69	; 0x45
   23e08:	beq	232a0 <__assert_fail@plt+0x1152c>
   23e0c:	ldr	r2, [sp, #80]	; 0x50
   23e10:	b	23a40 <__assert_fail@plt+0x11ccc>
   23e14:	cmp	r6, #69	; 0x45
   23e18:	beq	232a0 <__assert_fail@plt+0x1152c>
   23e1c:	ldr	r2, [sp, #100]	; 0x64
   23e20:	mov	r0, #0
   23e24:	ldr	r1, [r2, #16]
   23e28:	mov	r2, #2
   23e2c:	cmn	r1, #1
   23e30:	str	r2, [sp, #140]	; 0x8c
   23e34:	add	r1, r1, #1
   23e38:	movlt	r2, #1
   23e3c:	movge	r2, r0
   23e40:	movge	r8, #1
   23e44:	movlt	r8, r0
   23e48:	str	r2, [sp, #84]	; 0x54
   23e4c:	str	r0, [sp, #144]	; 0x90
   23e50:	b	23878 <__assert_fail@plt+0x11b04>
   23e54:	ldr	r3, [sp, #48]	; 0x30
   23e58:	cmp	r9, #45	; 0x2d
   23e5c:	sub	r3, r3, sl
   23e60:	beq	24508 <__assert_fail@plt+0x12794>
   23e64:	cmp	fp, #0
   23e68:	blt	24508 <__assert_fail@plt+0x12794>
   23e6c:	cmp	fp, #1
   23e70:	movcs	r6, fp
   23e74:	movcc	r6, #1
   23e78:	cmp	r6, r3
   23e7c:	bcs	22f00 <__assert_fail@plt+0x1118c>
   23e80:	cmp	r5, #0
   23e84:	beq	23698 <__assert_fail@plt+0x11924>
   23e88:	cmp	fp, #1
   23e8c:	ble	23eb4 <__assert_fail@plt+0x12140>
   23e90:	cmp	r9, #43	; 0x2b
   23e94:	cmpne	r9, #48	; 0x30
   23e98:	sub	r2, fp, #1
   23e9c:	mov	r0, r5
   23ea0:	add	r3, r5, r2
   23ea4:	moveq	r1, #48	; 0x30
   23ea8:	movne	r1, #32
   23eac:	mov	r5, r3
   23eb0:	bl	11be8 <memset@plt>
   23eb4:	mov	r3, #10
   23eb8:	strb	r3, [r5], #1
   23ebc:	b	23698 <__assert_fail@plt+0x11924>
   23ec0:	mov	r7, #0
   23ec4:	ldr	r2, [sp, #52]	; 0x34
   23ec8:	cmp	r8, #0
   23ecc:	mov	r3, #112	; 0x70
   23ed0:	movne	r2, #0
   23ed4:	movne	r7, r8
   23ed8:	str	r2, [sp, #52]	; 0x34
   23edc:	b	233d4 <__assert_fail@plt+0x11660>
   23ee0:	ldr	r2, [sp, #52]	; 0x34
   23ee4:	cmp	r8, #0
   23ee8:	movne	r2, r8
   23eec:	cmp	r6, #69	; 0x45
   23ef0:	str	r2, [sp, #52]	; 0x34
   23ef4:	bne	233d0 <__assert_fail@plt+0x1165c>
   23ef8:	b	232a0 <__assert_fail@plt+0x1152c>
   23efc:	cmp	r6, #69	; 0x45
   23f00:	beq	235f4 <__assert_fail@plt+0x11880>
   23f04:	ldr	r2, [sp, #100]	; 0x64
   23f08:	movw	r1, #34079	; 0x851f
   23f0c:	movt	r1, #20971	; 0x51eb
   23f10:	mov	r0, #100	; 0x64
   23f14:	ldr	r2, [r2, #20]
   23f18:	smull	r1, ip, r1, r2
   23f1c:	asr	r1, r2, #31
   23f20:	rsb	r1, r1, ip, asr #5
   23f24:	mls	r1, r0, r1, r2
   23f28:	cmp	r1, #0
   23f2c:	bge	23f44 <__assert_fail@plt+0x121d0>
   23f30:	movw	r0, #63636	; 0xf894
   23f34:	movt	r0, #65535	; 0xffff
   23f38:	cmp	r2, r0
   23f3c:	rsblt	r1, r1, #0
   23f40:	addge	r1, r1, #100	; 0x64
   23f44:	cmp	r9, #0
   23f48:	bne	245a0 <__assert_fail@plt+0x1282c>
   23f4c:	ldr	r2, [sp, #1236]	; 0x4d4
   23f50:	cmp	r2, #43	; 0x2b
   23f54:	beq	24b14 <__assert_fail@plt+0x12da0>
   23f58:	mov	r9, r2
   23f5c:	mov	r2, #0
   23f60:	mov	r8, #1
   23f64:	str	r2, [sp, #84]	; 0x54
   23f68:	str	r2, [sp, #144]	; 0x90
   23f6c:	mov	r2, #2
   23f70:	str	r2, [sp, #140]	; 0x8c
   23f74:	mov	r0, #0
   23f78:	b	23878 <__assert_fail@plt+0x11b04>
   23f7c:	cmp	r6, #69	; 0x45
   23f80:	beq	235f4 <__assert_fail@plt+0x11880>
   23f84:	cmp	r6, #79	; 0x4f
   23f88:	beq	232a0 <__assert_fail@plt+0x1152c>
   23f8c:	ldr	r2, [sp, #100]	; 0x64
   23f90:	ldr	r1, [r2, #20]
   23f94:	movw	r2, #63636	; 0xf894
   23f98:	movt	r2, #65535	; 0xffff
   23f9c:	cmp	r1, r2
   23fa0:	add	r1, r1, #1888	; 0x760
   23fa4:	movlt	r2, #1
   23fa8:	movge	r2, #0
   23fac:	movge	r8, #1
   23fb0:	movlt	r8, #0
   23fb4:	cmp	r9, #0
   23fb8:	add	r1, r1, #12
   23fbc:	str	r2, [sp, #84]	; 0x54
   23fc0:	bne	24534 <__assert_fail@plt+0x127c0>
   23fc4:	ldr	r2, [sp, #1236]	; 0x4d4
   23fc8:	cmp	r2, #43	; 0x2b
   23fcc:	beq	2454c <__assert_fail@plt+0x127d8>
   23fd0:	mov	r0, r9
   23fd4:	mov	r3, #4
   23fd8:	mov	r9, r2
   23fdc:	str	r3, [sp, #140]	; 0x8c
   23fe0:	str	r0, [sp, #144]	; 0x90
   23fe4:	b	2388c <__assert_fail@plt+0x11b18>
   23fe8:	cmp	r6, #69	; 0x45
   23fec:	beq	235f4 <__assert_fail@plt+0x11880>
   23ff0:	ldr	r2, [sp, #100]	; 0x64
   23ff4:	movw	r0, #63636	; 0xf894
   23ff8:	movt	r0, #65535	; 0xffff
   23ffc:	movw	r7, #1899	; 0x76b
   24000:	movw	ip, #34079	; 0x851f
   24004:	movt	ip, #20971	; 0x51eb
   24008:	ldr	r1, [r2, #20]
   2400c:	add	r2, r1, #1888	; 0x760
   24010:	cmp	r1, r0
   24014:	add	r2, r2, #12
   24018:	movge	r8, #0
   2401c:	movlt	r8, #1
   24020:	cmp	r2, r7
   24024:	mvnls	r2, #98	; 0x62
   24028:	movhi	r2, #0
   2402c:	add	r2, r2, r1
   24030:	cmp	r1, r0
   24034:	str	r8, [sp, #84]	; 0x54
   24038:	asr	r0, r2, #31
   2403c:	movlt	r8, #0
   24040:	movge	r8, #1
   24044:	smull	r1, r2, ip, r2
   24048:	cmp	r9, #0
   2404c:	rsb	r2, r0, r2, asr #5
   24050:	add	r1, r2, #19
   24054:	bne	246b0 <__assert_fail@plt+0x1293c>
   24058:	ldr	r2, [sp, #1236]	; 0x4d4
   2405c:	cmp	r2, #43	; 0x2b
   24060:	beq	24b9c <__assert_fail@plt+0x12e28>
   24064:	mov	r9, r2
   24068:	mov	r2, #0
   2406c:	str	r2, [sp, #144]	; 0x90
   24070:	mov	r2, #2
   24074:	str	r2, [sp, #140]	; 0x8c
   24078:	b	23f74 <__assert_fail@plt+0x12200>
   2407c:	cmp	r6, #69	; 0x45
   24080:	beq	232a0 <__assert_fail@plt+0x1152c>
   24084:	ldr	r2, [sp, #100]	; 0x64
   24088:	mov	r0, #0
   2408c:	ldr	r1, [r2, #28]
   24090:	mov	r2, #3
   24094:	b	23e2c <__assert_fail@plt+0x120b8>
   24098:	cmp	r6, #69	; 0x45
   2409c:	beq	232a0 <__assert_fail@plt+0x1152c>
   240a0:	ldr	r2, [sp, #100]	; 0x64
   240a4:	ldr	r2, [r2, #8]
   240a8:	b	23a40 <__assert_fail@plt+0x11ccc>
   240ac:	cmp	r6, #69	; 0x45
   240b0:	beq	232a0 <__assert_fail@plt+0x1152c>
   240b4:	ldr	r2, [sp, #100]	; 0x64
   240b8:	movw	r0, #9363	; 0x2493
   240bc:	movt	r0, #37449	; 0x9249
   240c0:	ldr	r7, [r2, #20]
   240c4:	ldr	r1, [r2, #24]
   240c8:	ldr	r8, [r2, #28]
   240cc:	cmp	r7, #0
   240d0:	str	r1, [sp, #140]	; 0x8c
   240d4:	sub	r2, r8, r1
   240d8:	add	r2, r2, #380	; 0x17c
   240dc:	add	r2, r2, #2
   240e0:	asr	r1, r2, #31
   240e4:	smull	ip, r0, r0, r2
   240e8:	movlt	ip, #300	; 0x12c
   240ec:	mvnge	ip, #99	; 0x63
   240f0:	add	r0, r0, r2
   240f4:	add	ip, r7, ip
   240f8:	rsb	r1, r1, r0, asr #2
   240fc:	rsb	r1, r1, r1, lsl #3
   24100:	sub	r2, r2, r1
   24104:	sub	r2, r8, r2
   24108:	adds	r2, r2, #3
   2410c:	str	r2, [sp, #84]	; 0x54
   24110:	bmi	245ec <__assert_fail@plt+0x12878>
   24114:	tst	ip, #3
   24118:	movwne	r1, #365	; 0x16d
   2411c:	bne	24168 <__assert_fail@plt+0x123f4>
   24120:	movw	r1, #34079	; 0x851f
   24124:	movt	r1, #20971	; 0x51eb
   24128:	asr	r2, ip, #31
   2412c:	smull	r0, r1, r1, ip
   24130:	rsb	r2, r2, r1, asr #5
   24134:	mov	r1, #100	; 0x64
   24138:	mls	r2, r1, r2, ip
   2413c:	cmp	r2, #0
   24140:	movwne	r1, #366	; 0x16e
   24144:	bne	24168 <__assert_fail@plt+0x123f4>
   24148:	mov	r0, #400	; 0x190
   2414c:	movw	r2, #365	; 0x16d
   24150:	sdiv	r1, ip, r0
   24154:	mls	r1, r0, r1, ip
   24158:	movw	r0, #366	; 0x16e
   2415c:	cmp	r1, #0
   24160:	movne	r0, r2
   24164:	mov	r1, r0
   24168:	ldr	r2, [sp, #140]	; 0x8c
   2416c:	sub	r1, r8, r1
   24170:	movw	ip, #9363	; 0x2493
   24174:	movt	ip, #37449	; 0x9249
   24178:	sub	r2, r1, r2
   2417c:	add	r2, r2, #380	; 0x17c
   24180:	add	r2, r2, #2
   24184:	asr	r0, r2, #31
   24188:	smull	r8, ip, ip, r2
   2418c:	add	ip, ip, r2
   24190:	rsb	r0, r0, ip, asr #2
   24194:	rsb	r0, r0, r0, lsl #3
   24198:	sub	r0, r2, r0
   2419c:	sub	r0, r1, r0
   241a0:	adds	r0, r0, #3
   241a4:	bmi	24ad8 <__assert_fail@plt+0x12d64>
   241a8:	mov	r1, #1
   241ac:	movw	r2, #63635	; 0xf893
   241b0:	movt	r2, #65535	; 0xffff
   241b4:	mov	r8, r1
   241b8:	str	r0, [sp, #84]	; 0x54
   241bc:	str	r2, [sp, #140]	; 0x8c
   241c0:	cmp	r3, #71	; 0x47
   241c4:	beq	24744 <__assert_fail@plt+0x129d0>
   241c8:	cmp	r3, #103	; 0x67
   241cc:	bne	24718 <__assert_fail@plt+0x129a4>
   241d0:	movw	r1, #34079	; 0x851f
   241d4:	movt	r1, #20971	; 0x51eb
   241d8:	asr	r2, r7, #31
   241dc:	smull	r0, ip, r1, r7
   241e0:	rsb	r2, r2, ip, asr #5
   241e4:	mov	ip, #100	; 0x64
   241e8:	mls	r2, ip, r2, r7
   241ec:	add	r2, r2, r8
   241f0:	asr	ip, r2, #31
   241f4:	smull	r0, r1, r1, r2
   241f8:	rsb	r1, ip, r1, asr #5
   241fc:	mov	ip, #100	; 0x64
   24200:	mls	r1, ip, r1, r2
   24204:	cmp	r1, #0
   24208:	blt	24588 <__assert_fail@plt+0x12814>
   2420c:	cmp	r9, #0
   24210:	bne	245a0 <__assert_fail@plt+0x1282c>
   24214:	ldr	r2, [sp, #1236]	; 0x4d4
   24218:	cmp	r2, #43	; 0x2b
   2421c:	beq	24b14 <__assert_fail@plt+0x12da0>
   24220:	mov	r2, #0
   24224:	mov	r8, #1
   24228:	ldr	r9, [sp, #1236]	; 0x4d4
   2422c:	str	r2, [sp, #84]	; 0x54
   24230:	str	r2, [sp, #144]	; 0x90
   24234:	mov	r2, #2
   24238:	str	r2, [sp, #140]	; 0x8c
   2423c:	b	23f74 <__assert_fail@plt+0x12200>
   24240:	cmp	r6, #69	; 0x45
   24244:	beq	232a0 <__assert_fail@plt+0x1152c>
   24248:	mov	r2, #2
   2424c:	str	r2, [sp, #140]	; 0x8c
   24250:	ldr	r2, [sp, #100]	; 0x64
   24254:	ldr	r2, [r2, #8]
   24258:	b	23858 <__assert_fail@plt+0x11ae4>
   2425c:	cmp	r6, #69	; 0x45
   24260:	beq	232a0 <__assert_fail@plt+0x1152c>
   24264:	mov	r1, #2
   24268:	ldr	r2, [sp, #80]	; 0x50
   2426c:	str	r1, [sp, #140]	; 0x8c
   24270:	b	23858 <__assert_fail@plt+0x11ae4>
   24274:	cmp	r6, #69	; 0x45
   24278:	beq	232a0 <__assert_fail@plt+0x1152c>
   2427c:	mov	r2, #2
   24280:	str	r2, [sp, #140]	; 0x8c
   24284:	ldr	r2, [sp, #100]	; 0x64
   24288:	ldr	r2, [r2, #4]
   2428c:	b	23858 <__assert_fail@plt+0x11ae4>
   24290:	ldr	r3, [sp, #48]	; 0x30
   24294:	cmp	r6, #0
   24298:	sub	r3, r3, sl
   2429c:	str	r3, [sp, #84]	; 0x54
   242a0:	bne	232ac <__assert_fail@plt+0x11538>
   242a4:	mvn	r3, #0
   242a8:	movw	r8, #472	; 0x1d8
   242ac:	movt	r8, #3
   242b0:	mov	ip, r3
   242b4:	str	r3, [sp, #140]	; 0x8c
   242b8:	b	23a90 <__assert_fail@plt+0x11d1c>
   242bc:	ldr	r3, [sp, #48]	; 0x30
   242c0:	cmp	r6, #0
   242c4:	sub	r3, r3, sl
   242c8:	str	r3, [sp, #84]	; 0x54
   242cc:	bne	232ac <__assert_fail@plt+0x11538>
   242d0:	cmp	r9, #0
   242d4:	lsreq	r3, fp, #31
   242d8:	movne	r3, #0
   242dc:	cmp	r3, #0
   242e0:	bne	24b28 <__assert_fail@plt+0x12db4>
   242e4:	sub	r3, fp, #6
   242e8:	movw	r8, #452	; 0x1c4
   242ec:	movt	r8, #3
   242f0:	bic	r3, r3, r3, asr #31
   242f4:	mov	ip, r3
   242f8:	str	r3, [sp, #140]	; 0x8c
   242fc:	b	23a90 <__assert_fail@plt+0x11d1c>
   24300:	movw	r8, #464	; 0x1d0
   24304:	movt	r8, #3
   24308:	b	23a78 <__assert_fail@plt+0x11d04>
   2430c:	ldrb	r2, [r4, #1]
   24310:	add	r1, r4, #1
   24314:	cmp	r2, #58	; 0x3a
   24318:	beq	24af0 <__assert_fail@plt+0x12d7c>
   2431c:	mov	r0, #1
   24320:	str	r0, [sp, #140]	; 0x8c
   24324:	cmp	r2, #122	; 0x7a
   24328:	bne	232a0 <__assert_fail@plt+0x1152c>
   2432c:	mov	r4, r1
   24330:	b	23784 <__assert_fail@plt+0x11a10>
   24334:	mov	r7, #1
   24338:	b	23ec4 <__assert_fail@plt+0x12150>
   2433c:	mov	r2, #1
   24340:	mov	r1, #100	; 0x64
   24344:	str	r2, [sp, #144]	; 0x90
   24348:	mov	r2, #6
   2434c:	str	r2, [sp, #140]	; 0x8c
   24350:	ldr	r2, [sp, #148]	; 0x94
   24354:	mla	r1, r1, r2, r0
   24358:	mov	r0, #4
   2435c:	b	23878 <__assert_fail@plt+0x11b04>
   24360:	mov	r1, #100	; 0x64
   24364:	ldr	r7, [sp, #148]	; 0x94
   24368:	movw	r2, #10000	; 0x2710
   2436c:	mul	r1, r1, r0
   24370:	mov	r0, #1
   24374:	str	r0, [sp, #144]	; 0x90
   24378:	mov	r0, #20
   2437c:	mla	r1, r2, r7, r1
   24380:	mov	r2, #9
   24384:	str	r2, [sp, #140]	; 0x8c
   24388:	add	r1, r1, ip
   2438c:	b	23878 <__assert_fail@plt+0x11b04>
   24390:	mov	r2, #1
   24394:	mov	r1, #100	; 0x64
   24398:	str	r2, [sp, #144]	; 0x90
   2439c:	mov	r2, #5
   243a0:	str	r2, [sp, #140]	; 0x8c
   243a4:	ldr	r2, [sp, #148]	; 0x94
   243a8:	mla	r1, r1, r2, r0
   243ac:	b	23f74 <__assert_fail@plt+0x12200>
   243b0:	cmp	ip, #0
   243b4:	bne	24360 <__assert_fail@plt+0x125ec>
   243b8:	cmp	r0, #0
   243bc:	bne	2433c <__assert_fail@plt+0x125c8>
   243c0:	mov	r2, #1
   243c4:	ldr	r1, [sp, #148]	; 0x94
   243c8:	str	r2, [sp, #144]	; 0x90
   243cc:	mov	r2, #3
   243d0:	str	r2, [sp, #140]	; 0x8c
   243d4:	b	23878 <__assert_fail@plt+0x11b04>
   243d8:	mov	r8, #45	; 0x2d
   243dc:	sub	r2, fp, #1
   243e0:	sub	r2, r2, r7
   243e4:	cmp	r2, #0
   243e8:	movle	r3, #0
   243ec:	andgt	r3, r3, #1
   243f0:	cmp	r3, #0
   243f4:	moveq	r2, #0
   243f8:	cmp	r9, #95	; 0x5f
   243fc:	beq	244bc <__assert_fail@plt+0x12748>
   24400:	ldr	r3, [sp, #48]	; 0x30
   24404:	sub	r3, r3, sl
   24408:	cmp	r3, #1
   2440c:	bls	22f00 <__assert_fail@plt+0x1118c>
   24410:	cmp	r5, #0
   24414:	add	sl, sl, #1
   24418:	strbne	r8, [r5], #1
   2441c:	cmp	r9, #45	; 0x2d
   24420:	beq	24430 <__assert_fail@plt+0x126bc>
   24424:	sub	fp, fp, #1
   24428:	cmp	fp, #0
   2442c:	bge	239a0 <__assert_fail@plt+0x11c2c>
   24430:	mov	r8, r7
   24434:	mov	fp, #0
   24438:	b	239ac <__assert_fail@plt+0x11c38>
   2443c:	mov	sl, r1
   24440:	b	22ed0 <__assert_fail@plt+0x1115c>
   24444:	mov	r0, r5
   24448:	mov	r1, r6
   2444c:	mov	r2, r7
   24450:	add	r5, r5, r7
   24454:	bl	11930 <memcpy@plt>
   24458:	b	23380 <__assert_fail@plt+0x1160c>
   2445c:	mov	r0, r5
   24460:	add	r1, r6, #1
   24464:	mov	r2, r8
   24468:	add	r5, r5, r8
   2446c:	bl	11930 <memcpy@plt>
   24470:	b	234cc <__assert_fail@plt+0x11758>
   24474:	cmp	r8, #0
   24478:	beq	234cc <__assert_fail@plt+0x11758>
   2447c:	add	r5, r5, r8
   24480:	add	r8, r6, r8
   24484:	bl	11b1c <__ctype_tolower_loc@plt>
   24488:	mov	r3, r5
   2448c:	ldrb	r1, [r8], #-1
   24490:	ldr	r2, [r0]
   24494:	cmp	r8, r6
   24498:	ldr	r2, [r2, r1, lsl #2]
   2449c:	strb	r2, [r3, #-1]!
   244a0:	bne	2448c <__assert_fail@plt+0x12718>
   244a4:	b	234cc <__assert_fail@plt+0x11758>
   244a8:	mov	r6, r7
   244ac:	mov	fp, #0
   244b0:	b	23ae4 <__assert_fail@plt+0x11d70>
   244b4:	mov	r8, #43	; 0x2b
   244b8:	b	243dc <__assert_fail@plt+0x12668>
   244bc:	ldr	r3, [sp, #48]	; 0x30
   244c0:	add	sl, sl, r2
   244c4:	cmp	r5, #0
   244c8:	sub	fp, fp, r2
   244cc:	sub	r3, r3, sl
   244d0:	beq	24520 <__assert_fail@plt+0x127ac>
   244d4:	mov	r0, r5
   244d8:	mov	r1, #32
   244dc:	str	r3, [sp, #84]	; 0x54
   244e0:	add	r5, r5, r2
   244e4:	bl	11be8 <memset@plt>
   244e8:	ldr	r3, [sp, #84]	; 0x54
   244ec:	b	24408 <__assert_fail@plt+0x12694>
   244f0:	cmp	r3, #1
   244f4:	bls	22f00 <__assert_fail@plt+0x1118c>
   244f8:	cmp	r5, #0
   244fc:	mov	r6, #1
   24500:	bne	23690 <__assert_fail@plt+0x1191c>
   24504:	b	23698 <__assert_fail@plt+0x11924>
   24508:	cmp	r3, #1
   2450c:	bls	22f00 <__assert_fail@plt+0x1118c>
   24510:	cmp	r5, #0
   24514:	mov	r6, #1
   24518:	bne	23eb4 <__assert_fail@plt+0x12140>
   2451c:	b	23698 <__assert_fail@plt+0x11924>
   24520:	cmp	r3, #1
   24524:	bls	22f00 <__assert_fail@plt+0x1118c>
   24528:	add	sl, sl, #1
   2452c:	sub	fp, fp, #1
   24530:	b	24428 <__assert_fail@plt+0x126b4>
   24534:	cmp	r9, #43	; 0x2b
   24538:	movne	r2, #0
   2453c:	strne	r2, [sp, #144]	; 0x90
   24540:	movne	r2, #4
   24544:	strne	r2, [sp, #140]	; 0x8c
   24548:	bne	23f74 <__assert_fail@plt+0x12200>
   2454c:	mov	r2, #4
   24550:	str	r2, [sp, #140]	; 0x8c
   24554:	movw	r2, #9999	; 0x270f
   24558:	cmp	r2, r1
   2455c:	movcc	r2, #1
   24560:	movcc	r9, #43	; 0x2b
   24564:	strcc	r2, [sp, #144]	; 0x90
   24568:	bcc	23f74 <__assert_fail@plt+0x12200>
   2456c:	ldr	r2, [sp, #140]	; 0x8c
   24570:	mov	r9, #43	; 0x2b
   24574:	cmp	fp, r2
   24578:	movle	r2, #0
   2457c:	movgt	r2, #1
   24580:	str	r2, [sp, #144]	; 0x90
   24584:	b	23f74 <__assert_fail@plt+0x12200>
   24588:	ldr	r2, [sp, #140]	; 0x8c
   2458c:	cmp	r7, r2
   24590:	bge	24bac <__assert_fail@plt+0x12e38>
   24594:	cmp	r9, #0
   24598:	rsb	r1, r1, #0
   2459c:	beq	24214 <__assert_fail@plt+0x124a0>
   245a0:	cmp	r9, #43	; 0x2b
   245a4:	beq	24bd4 <__assert_fail@plt+0x12e60>
   245a8:	mov	r2, #0
   245ac:	mov	r8, #1
   245b0:	str	r2, [sp, #84]	; 0x54
   245b4:	str	r2, [sp, #144]	; 0x90
   245b8:	mov	r2, #2
   245bc:	str	r2, [sp, #140]	; 0x8c
   245c0:	b	23f74 <__assert_fail@plt+0x12200>
   245c4:	mov	r1, #11
   245c8:	mov	r0, #0
   245cc:	mov	r3, #1
   245d0:	mul	r1, r1, r2
   245d4:	str	r0, [sp, #84]	; 0x54
   245d8:	str	r3, [sp, #140]	; 0x8c
   245dc:	str	r0, [sp, #144]	; 0x90
   245e0:	asr	r1, r1, #5
   245e4:	add	r1, r1, r3
   245e8:	b	23898 <__assert_fail@plt+0x11b24>
   245ec:	sub	ip, ip, #1
   245f0:	tst	ip, #3
   245f4:	movwne	r2, #365	; 0x16d
   245f8:	bne	24640 <__assert_fail@plt+0x128cc>
   245fc:	movw	r1, #34079	; 0x851f
   24600:	movt	r1, #20971	; 0x51eb
   24604:	asr	r2, ip, #31
   24608:	smull	r0, r1, r1, ip
   2460c:	rsb	r2, r2, r1, asr #5
   24610:	mov	r1, #100	; 0x64
   24614:	mls	r2, r1, r2, ip
   24618:	cmp	r2, #0
   2461c:	movwne	r2, #366	; 0x16e
   24620:	bne	24640 <__assert_fail@plt+0x128cc>
   24624:	mov	r0, #400	; 0x190
   24628:	movw	r2, #365	; 0x16d
   2462c:	sdiv	r1, ip, r0
   24630:	mls	r1, r0, r1, ip
   24634:	movw	r0, #366	; 0x16e
   24638:	cmp	r1, #0
   2463c:	moveq	r2, r0
   24640:	ldr	r1, [sp, #140]	; 0x8c
   24644:	add	r2, r8, r2
   24648:	movw	ip, #9363	; 0x2493
   2464c:	movt	ip, #37449	; 0x9249
   24650:	movw	r0, #63637	; 0xf895
   24654:	movt	r0, #65535	; 0xffff
   24658:	str	r2, [sp, #84]	; 0x54
   2465c:	str	r0, [sp, #140]	; 0x8c
   24660:	sub	r2, r2, r1
   24664:	mvn	r1, #0
   24668:	add	r2, r2, #380	; 0x17c
   2466c:	add	r2, r2, #2
   24670:	asr	r0, r2, #31
   24674:	smull	r8, ip, ip, r2
   24678:	mov	r8, r1
   2467c:	add	ip, ip, r2
   24680:	rsb	ip, r0, ip, asr #2
   24684:	rsb	ip, ip, ip, lsl #3
   24688:	sub	r2, r2, ip
   2468c:	ldr	ip, [sp, #84]	; 0x54
   24690:	sub	r2, ip, r2
   24694:	add	r2, r2, #3
   24698:	str	r2, [sp, #84]	; 0x54
   2469c:	b	241c0 <__assert_fail@plt+0x1244c>
   246a0:	mov	r2, #1
   246a4:	mov	r8, #0
   246a8:	str	r2, [sp, #84]	; 0x54
   246ac:	b	237c4 <__assert_fail@plt+0x11a50>
   246b0:	cmp	r9, #43	; 0x2b
   246b4:	beq	24b9c <__assert_fail@plt+0x12e28>
   246b8:	mov	r2, #0
   246bc:	str	r2, [sp, #144]	; 0x90
   246c0:	mov	r2, #2
   246c4:	str	r2, [sp, #140]	; 0x8c
   246c8:	b	23f74 <__assert_fail@plt+0x12200>
   246cc:	cmp	r6, r3
   246d0:	bcs	22f00 <__assert_fail@plt+0x1118c>
   246d4:	ldr	r3, [sp, #48]	; 0x30
   246d8:	add	sl, sl, r6
   246dc:	cmp	r5, #0
   246e0:	sub	r7, r3, sl
   246e4:	bne	23ca0 <__assert_fail@plt+0x11f2c>
   246e8:	cmp	r9, #45	; 0x2d
   246ec:	bne	24b84 <__assert_fail@plt+0x12e10>
   246f0:	ldr	r3, [sp, #48]	; 0x30
   246f4:	cmp	r3, sl
   246f8:	bne	22eb8 <__assert_fail@plt+0x11144>
   246fc:	b	22f00 <__assert_fail@plt+0x1118c>
   24700:	cmp	r3, #1
   24704:	bls	22f00 <__assert_fail@plt+0x1118c>
   24708:	cmp	r5, #0
   2470c:	mov	r6, #1
   24710:	bne	23da0 <__assert_fail@plt+0x1202c>
   24714:	b	23698 <__assert_fail@plt+0x11924>
   24718:	ldr	r0, [sp, #84]	; 0x54
   2471c:	movw	r1, #9363	; 0x2493
   24720:	movt	r1, #37449	; 0x9249
   24724:	smull	ip, r1, r1, r0
   24728:	mov	ip, #2
   2472c:	asr	r2, r0, #31
   24730:	str	ip, [sp, #140]	; 0x8c
   24734:	add	r1, r1, r0
   24738:	rsb	r2, r2, r1, asr ip
   2473c:	add	r2, r2, #1
   24740:	b	23858 <__assert_fail@plt+0x11ae4>
   24744:	ldr	r2, [sp, #140]	; 0x8c
   24748:	cmp	r7, r2
   2474c:	add	r7, r7, #1888	; 0x760
   24750:	movlt	r2, #1
   24754:	movge	r2, #0
   24758:	add	r7, r7, #12
   2475c:	movge	r8, #1
   24760:	movlt	r8, #0
   24764:	cmp	r9, #0
   24768:	str	r2, [sp, #84]	; 0x54
   2476c:	add	r1, r7, r1
   24770:	bne	24534 <__assert_fail@plt+0x127c0>
   24774:	ldr	r2, [sp, #1236]	; 0x4d4
   24778:	cmp	r2, #43	; 0x2b
   2477c:	beq	2454c <__assert_fail@plt+0x127d8>
   24780:	mov	r9, r2
   24784:	mov	r2, #0
   24788:	str	r2, [sp, #144]	; 0x90
   2478c:	mov	r2, #4
   24790:	str	r2, [sp, #140]	; 0x8c
   24794:	b	23f74 <__assert_fail@plt+0x12200>
   24798:	mov	r2, #0
   2479c:	mov	r8, #1
   247a0:	str	r2, [sp, #84]	; 0x54
   247a4:	b	237c4 <__assert_fail@plt+0x11a50>
   247a8:	ldr	r3, [sp, #56]	; 0x38
   247ac:	mov	fp, #9
   247b0:	cmp	r3, #0
   247b4:	bne	24bf8 <__assert_fail@plt+0x12e84>
   247b8:	ldr	r3, [sp, #136]	; 0x88
   247bc:	cmp	r3, #0
   247c0:	movne	r6, #8
   247c4:	ldrne	r3, [sp, #76]	; 0x4c
   247c8:	bne	24844 <__assert_fail@plt+0x12ad0>
   247cc:	ldr	r3, [sp, #132]	; 0x84
   247d0:	cmp	r3, #0
   247d4:	movne	r6, #7
   247d8:	ldrne	r3, [sp, #44]	; 0x2c
   247dc:	bne	24844 <__assert_fail@plt+0x12ad0>
   247e0:	ldr	r3, [sp, #128]	; 0x80
   247e4:	cmp	r3, #0
   247e8:	movne	r6, #6
   247ec:	ldrne	r3, [sp, #72]	; 0x48
   247f0:	bne	24844 <__assert_fail@plt+0x12ad0>
   247f4:	ldr	r3, [sp, #68]	; 0x44
   247f8:	cmp	r3, #0
   247fc:	movne	r6, #5
   24800:	ldrne	r3, [sp, #40]	; 0x28
   24804:	bne	24844 <__assert_fail@plt+0x12ad0>
   24808:	ldr	r3, [sp, #64]	; 0x40
   2480c:	cmp	r3, #0
   24810:	movne	r6, #4
   24814:	ldrne	r3, [sp, #36]	; 0x24
   24818:	bne	24844 <__assert_fail@plt+0x12ad0>
   2481c:	ldr	r3, [sp, #60]	; 0x3c
   24820:	cmp	r3, #0
   24824:	movne	r6, #3
   24828:	ldrne	r3, [sp, #32]
   2482c:	bne	24844 <__assert_fail@plt+0x12ad0>
   24830:	ldr	r3, [sp, #120]	; 0x78
   24834:	cmp	r3, #0
   24838:	beq	23c54 <__assert_fail@plt+0x11ee0>
   2483c:	ldr	r3, [sp, #28]
   24840:	mov	r6, #2
   24844:	movw	ip, #26215	; 0x6667
   24848:	movt	ip, #26214	; 0x6666
   2484c:	asr	lr, r3, #31
   24850:	movw	r0, #34079	; 0x851f
   24854:	movt	r0, #20971	; 0x51eb
   24858:	smull	r2, r1, ip, r3
   2485c:	sub	r8, r6, #2
   24860:	smull	r2, r0, r0, r3
   24864:	add	r2, sp, #1184	; 0x4a0
   24868:	cmp	r8, #0
   2486c:	add	r2, r2, #8
   24870:	rsb	r1, lr, r1, asr #2
   24874:	add	r8, r2, r8
   24878:	asr	r2, r1, #31
   2487c:	smull	r7, ip, ip, r1
   24880:	rsb	r7, lr, r0, asr #5
   24884:	add	r0, r1, r1, lsl #2
   24888:	rsb	r2, r2, ip, asr #2
   2488c:	add	r2, r2, r2, lsl #2
   24890:	sub	r2, r1, r2, lsl #1
   24894:	sub	r1, r3, r0, lsl #1
   24898:	add	r0, sp, #1184	; 0x4a0
   2489c:	add	r0, r0, #8
   248a0:	add	r2, r2, #48	; 0x30
   248a4:	add	r1, r1, #48	; 0x30
   248a8:	add	r0, r0, r6
   248ac:	strb	r1, [r0, #-1041]	; 0xfffffbef
   248b0:	strb	r2, [r8, #-1040]	; 0xfffffbf0
   248b4:	beq	23c74 <__assert_fail@plt+0x11f00>
   248b8:	movw	r8, #26215	; 0x6667
   248bc:	movt	r8, #26214	; 0x6666
   248c0:	movw	r1, #19923	; 0x4dd3
   248c4:	movt	r1, #4194	; 0x1062
   248c8:	smull	r2, r0, r8, r7
   248cc:	asr	r2, r7, #31
   248d0:	smull	ip, r1, r1, r3
   248d4:	add	ip, sp, #1184	; 0x4a0
   248d8:	rsb	r2, r2, r0, asr #2
   248dc:	add	ip, ip, #8
   248e0:	sub	r0, r6, #3
   248e4:	cmp	r0, #0
   248e8:	add	r0, ip, r0
   248ec:	add	r2, r2, r2, lsl #2
   248f0:	rsb	r1, lr, r1, asr #6
   248f4:	sub	r2, r7, r2, lsl #1
   248f8:	add	r2, r2, #48	; 0x30
   248fc:	strb	r2, [r0, #-1040]	; 0xfffffbf0
   24900:	beq	23c74 <__assert_fail@plt+0x11f00>
   24904:	smull	r2, ip, r8, r1
   24908:	movw	r2, #35757	; 0x8bad
   2490c:	movt	r2, #26843	; 0x68db
   24910:	asr	r0, r1, #31
   24914:	smull	r7, r2, r2, r3
   24918:	add	r7, sp, #1184	; 0x4a0
   2491c:	rsb	r0, r0, ip, asr #2
   24920:	add	r7, r7, #8
   24924:	sub	ip, r6, #4
   24928:	cmp	ip, #0
   2492c:	add	ip, r7, ip
   24930:	add	r0, r0, r0, lsl #2
   24934:	rsb	r2, lr, r2, asr #12
   24938:	sub	r1, r1, r0, lsl #1
   2493c:	add	r1, r1, #48	; 0x30
   24940:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   24944:	beq	23c74 <__assert_fail@plt+0x11f00>
   24948:	smull	r1, ip, r8, r2
   2494c:	movw	r1, #46473	; 0xb589
   24950:	movt	r1, #5368	; 0x14f8
   24954:	asr	r0, r2, #31
   24958:	smull	r7, r1, r1, r3
   2495c:	add	r7, sp, #1184	; 0x4a0
   24960:	rsb	r0, r0, ip, asr #2
   24964:	add	r7, r7, #8
   24968:	sub	ip, r6, #5
   2496c:	cmp	ip, #0
   24970:	add	ip, r7, ip
   24974:	add	r0, r0, r0, lsl #2
   24978:	rsb	r1, lr, r1, asr #13
   2497c:	sub	r2, r2, r0, lsl #1
   24980:	add	r2, r2, #48	; 0x30
   24984:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   24988:	beq	23c74 <__assert_fail@plt+0x11f00>
   2498c:	smull	r2, ip, r8, r1
   24990:	movw	r2, #56963	; 0xde83
   24994:	movt	r2, #17179	; 0x431b
   24998:	asr	r0, r1, #31
   2499c:	smull	r7, r2, r2, r3
   249a0:	add	r7, sp, #1184	; 0x4a0
   249a4:	rsb	r0, r0, ip, asr #2
   249a8:	add	r7, r7, #8
   249ac:	sub	ip, r6, #6
   249b0:	cmp	ip, #0
   249b4:	add	ip, r7, ip
   249b8:	add	r0, r0, r0, lsl #2
   249bc:	rsb	r2, lr, r2, asr #18
   249c0:	sub	r1, r1, r0, lsl #1
   249c4:	add	r1, r1, #48	; 0x30
   249c8:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   249cc:	beq	23c74 <__assert_fail@plt+0x11f00>
   249d0:	smull	r1, ip, r8, r2
   249d4:	movw	r1, #51819	; 0xca6b
   249d8:	movt	r1, #27487	; 0x6b5f
   249dc:	asr	r0, r2, #31
   249e0:	smull	r7, r1, r1, r3
   249e4:	add	r7, sp, #1184	; 0x4a0
   249e8:	rsb	r0, r0, ip, asr #2
   249ec:	add	r7, r7, #8
   249f0:	sub	ip, r6, #7
   249f4:	cmp	ip, #0
   249f8:	add	ip, r7, ip
   249fc:	add	r0, r0, r0, lsl #2
   24a00:	rsb	r1, lr, r1, asr #22
   24a04:	sub	r2, r2, r0, lsl #1
   24a08:	add	r2, r2, #48	; 0x30
   24a0c:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   24a10:	beq	23c74 <__assert_fail@plt+0x11f00>
   24a14:	smull	r2, ip, r8, r1
   24a18:	movw	r2, #15241	; 0x3b89
   24a1c:	movt	r2, #21990	; 0x55e6
   24a20:	asr	r0, r1, #31
   24a24:	smull	r2, r3, r2, r3
   24a28:	sub	r2, r6, #8
   24a2c:	rsb	r0, r0, ip, asr #2
   24a30:	add	r7, r7, r2
   24a34:	cmp	r2, #1
   24a38:	add	r0, r0, r0, lsl #2
   24a3c:	rsb	r3, lr, r3, asr #25
   24a40:	sub	r0, r1, r0, lsl #1
   24a44:	add	r2, r0, #48	; 0x30
   24a48:	strb	r2, [r7, #-1040]	; 0xfffffbf0
   24a4c:	bne	23c74 <__assert_fail@plt+0x11f00>
   24a50:	smull	r2, r1, r8, r3
   24a54:	asr	r2, r3, #31
   24a58:	rsb	r2, r2, r1, asr #2
   24a5c:	add	r2, r2, r2, lsl #2
   24a60:	sub	r3, r3, r2, lsl #1
   24a64:	add	r3, r3, #48	; 0x30
   24a68:	strb	r3, [sp, #152]	; 0x98
   24a6c:	b	23c74 <__assert_fail@plt+0x11f00>
   24a70:	mov	r2, r6
   24a74:	mov	r0, r5
   24a78:	ldr	r1, [sp, #112]	; 0x70
   24a7c:	add	r5, r5, r6
   24a80:	bl	11930 <memcpy@plt>
   24a84:	b	23774 <__assert_fail@plt+0x11a00>
   24a88:	cmp	r6, #0
   24a8c:	beq	23774 <__assert_fail@plt+0x11a00>
   24a90:	bl	11b1c <__ctype_tolower_loc@plt>
   24a94:	ldr	ip, [sp, #112]	; 0x70
   24a98:	add	r5, r5, r6
   24a9c:	mov	r3, r5
   24aa0:	add	r6, ip, r6
   24aa4:	ldrb	r1, [r6, #-1]!
   24aa8:	ldr	r2, [r0]
   24aac:	cmp	ip, r6
   24ab0:	ldr	r2, [r2, r1, lsl #2]
   24ab4:	strb	r2, [r3, #-1]!
   24ab8:	bne	24aa4 <__assert_fail@plt+0x12d30>
   24abc:	b	23774 <__assert_fail@plt+0x11a00>
   24ac0:	mov	r0, r5
   24ac4:	mov	r2, r6
   24ac8:	add	r1, sp, #152	; 0x98
   24acc:	add	r5, r5, r6
   24ad0:	bl	11930 <memcpy@plt>
   24ad4:	b	23cd8 <__assert_fail@plt+0x11f64>
   24ad8:	movw	r2, #63636	; 0xf894
   24adc:	movt	r2, #65535	; 0xffff
   24ae0:	mov	r1, #0
   24ae4:	mov	r8, r1
   24ae8:	str	r2, [sp, #140]	; 0x8c
   24aec:	b	241c0 <__assert_fail@plt+0x1244c>
   24af0:	add	r0, r4, #2
   24af4:	mov	ip, #1
   24af8:	mov	r1, r0
   24afc:	ldrb	r2, [r0], #1
   24b00:	add	ip, ip, #1
   24b04:	cmp	r2, #58	; 0x3a
   24b08:	beq	24af8 <__assert_fail@plt+0x12d84>
   24b0c:	str	ip, [sp, #140]	; 0x8c
   24b10:	b	24324 <__assert_fail@plt+0x125b0>
   24b14:	mov	r2, #2
   24b18:	mov	r8, #1
   24b1c:	str	r9, [sp, #84]	; 0x54
   24b20:	str	r2, [sp, #140]	; 0x8c
   24b24:	b	2456c <__assert_fail@plt+0x127f8>
   24b28:	ldr	r3, [sp, #52]	; 0x34
   24b2c:	mov	lr, #4
   24b30:	mov	ip, #43	; 0x2b
   24b34:	mov	r9, ip
   24b38:	mov	r0, r6
   24b3c:	movw	r2, #452	; 0x1c4
   24b40:	movt	r2, #3
   24b44:	mvn	r1, #0
   24b48:	mov	r8, r2
   24b4c:	mov	fp, r6
   24b50:	stm	sp, {r3, ip, lr}
   24b54:	str	lr, [sp, #140]	; 0x8c
   24b58:	ldr	r3, [sp, #1244]	; 0x4dc
   24b5c:	ldr	lr, [sp, #1248]	; 0x4e0
   24b60:	ldr	ip, [sp, #1252]	; 0x4e4
   24b64:	str	r3, [sp, #12]
   24b68:	ldr	r3, [sp, #100]	; 0x64
   24b6c:	str	lr, [sp, #16]
   24b70:	str	ip, [sp, #20]
   24b74:	bl	22ba8 <__assert_fail@plt+0x10e34>
   24b78:	mov	r7, r0
   24b7c:	mov	r6, r0
   24b80:	b	23ae4 <__assert_fail@plt+0x11d70>
   24b84:	sub	r6, fp, r6
   24b88:	cmp	r6, r7
   24b8c:	bcs	22f00 <__assert_fail@plt+0x1118c>
   24b90:	add	sl, sl, r6
   24b94:	mov	r5, #0
   24b98:	b	22eb8 <__assert_fail@plt+0x11144>
   24b9c:	mov	r2, #2
   24ba0:	str	r2, [sp, #140]	; 0x8c
   24ba4:	mov	r2, #99	; 0x63
   24ba8:	b	24558 <__assert_fail@plt+0x127e4>
   24bac:	cmp	r9, #0
   24bb0:	add	r1, r1, #100	; 0x64
   24bb4:	beq	24214 <__assert_fail@plt+0x124a0>
   24bb8:	b	245a0 <__assert_fail@plt+0x1282c>
   24bbc:	ldr	r2, [sp, #88]	; 0x58
   24bc0:	mov	r3, #75	; 0x4b
   24bc4:	str	r3, [r2]
   24bc8:	b	22f0c <__assert_fail@plt+0x11198>
   24bcc:	mov	fp, #2
   24bd0:	b	24830 <__assert_fail@plt+0x12abc>
   24bd4:	mov	r2, #0
   24bd8:	mov	r8, #1
   24bdc:	str	r2, [sp, #84]	; 0x54
   24be0:	mov	r2, #2
   24be4:	str	r2, [sp, #140]	; 0x8c
   24be8:	b	2456c <__assert_fail@plt+0x127f8>
   24bec:	ldr	r3, [sp, #56]	; 0x38
   24bf0:	cmp	r3, #0
   24bf4:	beq	247b8 <__assert_fail@plt+0x12a44>
   24bf8:	mov	r6, #9
   24bfc:	ldr	r3, [sp, #1252]	; 0x4e4
   24c00:	b	24844 <__assert_fail@plt+0x12ad0>
   24c04:	strd	r4, [sp, #-16]!
   24c08:	mov	ip, #0
   24c0c:	str	r6, [sp, #8]
   24c10:	mvn	r6, #0
   24c14:	str	lr, [sp, #12]
   24c18:	sub	sp, sp, #32
   24c1c:	ldr	r4, [sp, #48]	; 0x30
   24c20:	add	r5, sp, #31
   24c24:	str	ip, [sp]
   24c28:	ldr	lr, [sp, #52]	; 0x34
   24c2c:	str	ip, [sp, #4]
   24c30:	str	r6, [sp, #8]
   24c34:	str	r5, [sp, #12]
   24c38:	str	r4, [sp, #16]
   24c3c:	str	lr, [sp, #20]
   24c40:	strb	ip, [sp, #31]
   24c44:	bl	22ba8 <__assert_fail@plt+0x10e34>
   24c48:	add	sp, sp, #32
   24c4c:	ldrd	r4, [sp]
   24c50:	ldr	r6, [sp, #8]
   24c54:	add	sp, sp, #12
   24c58:	pop	{pc}		; (ldr pc, [sp], #4)
   24c5c:	movw	r3, #4896	; 0x1320
   24c60:	movt	r3, #4
   24c64:	str	r4, [sp, #-8]!
   24c68:	ldr	r4, [r3]
   24c6c:	mov	r2, #5
   24c70:	movw	r1, #484	; 0x1e4
   24c74:	movt	r1, #3
   24c78:	mov	r0, #0
   24c7c:	str	lr, [sp, #4]
   24c80:	bl	11984 <dcgettext@plt>
   24c84:	mov	r3, r0
   24c88:	movw	r2, #768	; 0x300
   24c8c:	movt	r2, #3
   24c90:	mov	r1, #1
   24c94:	mov	r0, r4
   24c98:	bl	11c18 <__fprintf_chk@plt>
   24c9c:	movw	r3, #4804	; 0x12c4
   24ca0:	movt	r3, #4
   24ca4:	ldr	r0, [r3]
   24ca8:	bl	11b70 <exit@plt>

00024cac <_obstack_begin@@Base>:
   24cac:	strd	r4, [sp, #-16]!
   24cb0:	subs	r5, r2, #0
   24cb4:	mov	r4, r0
   24cb8:	ldrb	r2, [r0, #40]	; 0x28
   24cbc:	moveq	r5, #8
   24cc0:	str	r6, [sp, #8]
   24cc4:	subne	r6, r5, #1
   24cc8:	moveq	r6, #7
   24ccc:	ldr	r0, [sp, #16]
   24cd0:	cmp	r1, #0
   24cd4:	str	lr, [sp, #12]
   24cd8:	str	r6, [r4, #24]
   24cdc:	bfc	r2, #0, #1
   24ce0:	str	r3, [r4, #28]
   24ce4:	str	r0, [r4, #32]
   24ce8:	movw	r0, #4072	; 0xfe8
   24cec:	strb	r2, [r4, #40]	; 0x28
   24cf0:	moveq	r1, r0
   24cf4:	ldrb	r2, [r4, #40]	; 0x28
   24cf8:	str	r1, [r4]
   24cfc:	tst	r2, #1
   24d00:	beq	24d6c <_obstack_begin@@Base+0xc0>
   24d04:	ldr	r0, [r4, #36]	; 0x24
   24d08:	blx	r3
   24d0c:	mov	r3, r0
   24d10:	cmp	r3, #0
   24d14:	str	r3, [r4, #4]
   24d18:	beq	24d7c <_obstack_begin@@Base+0xd0>
   24d1c:	ldrb	lr, [r4, #40]	; 0x28
   24d20:	add	r1, r3, #8
   24d24:	rsb	r2, r5, #0
   24d28:	add	r1, r1, r6
   24d2c:	mov	r5, #0
   24d30:	ldr	ip, [r4]
   24d34:	and	r2, r2, r1
   24d38:	mov	r0, #1
   24d3c:	ldr	r6, [sp, #8]
   24d40:	bic	lr, lr, #6
   24d44:	str	r2, [r4, #8]
   24d48:	str	r2, [r4, #12]
   24d4c:	add	r2, r3, ip
   24d50:	str	r2, [r3]
   24d54:	str	r2, [r4, #16]
   24d58:	str	r5, [r3, #4]
   24d5c:	strb	lr, [r4, #40]	; 0x28
   24d60:	ldrd	r4, [sp]
   24d64:	add	sp, sp, #12
   24d68:	pop	{pc}		; (ldr pc, [sp], #4)
   24d6c:	mov	r0, r1
   24d70:	blx	r3
   24d74:	mov	r3, r0
   24d78:	b	24d10 <_obstack_begin@@Base+0x64>
   24d7c:	movw	r3, #4808	; 0x12c8
   24d80:	movt	r3, #4
   24d84:	ldr	r3, [r3]
   24d88:	blx	r3

00024d8c <_obstack_begin_1@@Base>:
   24d8c:	strd	r4, [sp, #-16]!
   24d90:	subs	r5, r2, #0
   24d94:	mov	r4, r0
   24d98:	ldrb	r2, [r0, #40]	; 0x28
   24d9c:	moveq	r5, #8
   24da0:	str	r6, [sp, #8]
   24da4:	subne	r6, r5, #1
   24da8:	moveq	r6, #7
   24dac:	ldr	ip, [sp, #16]
   24db0:	cmp	r1, #0
   24db4:	str	lr, [sp, #12]
   24db8:	str	r3, [r0, #28]
   24dbc:	orr	r2, r2, #1
   24dc0:	str	ip, [r0, #32]
   24dc4:	movw	ip, #4072	; 0xfe8
   24dc8:	strb	r2, [r0, #40]	; 0x28
   24dcc:	moveq	r1, ip
   24dd0:	ldrb	r2, [r4, #40]	; 0x28
   24dd4:	str	r1, [r4]
   24dd8:	ldr	r0, [sp, #20]
   24ddc:	str	r6, [r4, #24]
   24de0:	tst	r2, #1
   24de4:	str	r0, [r4, #36]	; 0x24
   24de8:	beq	24e50 <_obstack_begin_1@@Base+0xc4>
   24dec:	blx	r3
   24df0:	mov	r3, r0
   24df4:	cmp	r3, #0
   24df8:	str	r3, [r4, #4]
   24dfc:	beq	24e60 <_obstack_begin_1@@Base+0xd4>
   24e00:	ldrb	lr, [r4, #40]	; 0x28
   24e04:	add	r1, r3, #8
   24e08:	rsb	r2, r5, #0
   24e0c:	add	r1, r1, r6
   24e10:	mov	r5, #0
   24e14:	ldr	ip, [r4]
   24e18:	and	r2, r2, r1
   24e1c:	mov	r0, #1
   24e20:	ldr	r6, [sp, #8]
   24e24:	bic	lr, lr, #6
   24e28:	str	r2, [r4, #8]
   24e2c:	str	r2, [r4, #12]
   24e30:	add	r2, r3, ip
   24e34:	str	r2, [r3]
   24e38:	str	r2, [r4, #16]
   24e3c:	str	r5, [r3, #4]
   24e40:	strb	lr, [r4, #40]	; 0x28
   24e44:	ldrd	r4, [sp]
   24e48:	add	sp, sp, #12
   24e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   24e50:	mov	r0, r1
   24e54:	blx	r3
   24e58:	mov	r3, r0
   24e5c:	b	24df4 <_obstack_begin_1@@Base+0x68>
   24e60:	movw	r3, #4808	; 0x12c8
   24e64:	movt	r3, #4
   24e68:	ldr	r3, [r3]
   24e6c:	blx	r3

00024e70 <_obstack_newchunk@@Base>:
   24e70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24e74:	mov	r4, r0
   24e78:	ldr	ip, [r0]
   24e7c:	ldr	r2, [r0, #8]
   24e80:	ldr	r3, [r0, #24]
   24e84:	strd	r6, [sp, #8]
   24e88:	ldr	r7, [r0, #4]
   24e8c:	str	r8, [sp, #16]
   24e90:	ldr	r6, [r0, #12]
   24e94:	str	lr, [sp, #20]
   24e98:	sub	r6, r6, r2
   24e9c:	adds	r1, r6, r1
   24ea0:	movcs	r0, #1
   24ea4:	movcc	r0, #0
   24ea8:	adds	r3, r3, r1
   24eac:	eor	r0, r0, #1
   24eb0:	add	r5, r3, r6, lsr #3
   24eb4:	movcs	r2, #1
   24eb8:	movcc	r2, #0
   24ebc:	cmp	r3, ip
   24ec0:	eor	r2, r2, #1
   24ec4:	add	r5, r5, #100	; 0x64
   24ec8:	movcc	r3, ip
   24ecc:	cmp	r3, r5
   24ed0:	movcs	r5, r3
   24ed4:	tst	r0, r2
   24ed8:	beq	24fcc <_obstack_newchunk@@Base+0x15c>
   24edc:	ldrb	r3, [r4, #40]	; 0x28
   24ee0:	ldr	r2, [r4, #28]
   24ee4:	tst	r3, #1
   24ee8:	bne	24f88 <_obstack_newchunk@@Base+0x118>
   24eec:	mov	r0, r5
   24ef0:	blx	r2
   24ef4:	mov	r8, r0
   24ef8:	cmp	r8, #0
   24efc:	beq	24fcc <_obstack_newchunk@@Base+0x15c>
   24f00:	add	r3, r8, r5
   24f04:	mov	r5, r8
   24f08:	str	r8, [r4, #4]
   24f0c:	ldr	r0, [r4, #24]
   24f10:	mov	r2, r6
   24f14:	ldr	r1, [r4, #8]
   24f18:	str	r7, [r8, #4]
   24f1c:	str	r3, [r4, #16]
   24f20:	str	r3, [r5], #8
   24f24:	add	r5, r5, r0
   24f28:	bic	r5, r5, r0
   24f2c:	mov	r0, r5
   24f30:	bl	11930 <memcpy@plt>
   24f34:	ldrb	r2, [r4, #40]	; 0x28
   24f38:	tst	r2, #2
   24f3c:	bne	24f5c <_obstack_newchunk@@Base+0xec>
   24f40:	ldr	r0, [r4, #8]
   24f44:	add	r3, r7, #8
   24f48:	ldr	r1, [r4, #24]
   24f4c:	add	r3, r3, r1
   24f50:	bic	r3, r3, r1
   24f54:	cmp	r0, r3
   24f58:	beq	24f9c <_obstack_newchunk@@Base+0x12c>
   24f5c:	ldrb	r3, [r4, #40]	; 0x28
   24f60:	add	r6, r5, r6
   24f64:	ldr	r8, [sp, #16]
   24f68:	str	r5, [r4, #8]
   24f6c:	str	r6, [r4, #12]
   24f70:	bfc	r3, #1, #1
   24f74:	ldrd	r6, [sp, #8]
   24f78:	strb	r3, [r4, #40]	; 0x28
   24f7c:	ldrd	r4, [sp]
   24f80:	add	sp, sp, #20
   24f84:	pop	{pc}		; (ldr pc, [sp], #4)
   24f88:	mov	r1, r5
   24f8c:	ldr	r0, [r4, #36]	; 0x24
   24f90:	blx	r2
   24f94:	mov	r8, r0
   24f98:	b	24ef8 <_obstack_newchunk@@Base+0x88>
   24f9c:	ldr	r3, [r7, #4]
   24fa0:	tst	r2, #1
   24fa4:	ldr	r2, [r4, #32]
   24fa8:	str	r3, [r8, #4]
   24fac:	beq	24fc0 <_obstack_newchunk@@Base+0x150>
   24fb0:	mov	r1, r7
   24fb4:	ldr	r0, [r4, #36]	; 0x24
   24fb8:	blx	r2
   24fbc:	b	24f5c <_obstack_newchunk@@Base+0xec>
   24fc0:	mov	r0, r7
   24fc4:	blx	r2
   24fc8:	b	24f5c <_obstack_newchunk@@Base+0xec>
   24fcc:	movw	r3, #4808	; 0x12c8
   24fd0:	movt	r3, #4
   24fd4:	ldr	r3, [r3]
   24fd8:	blx	r3

00024fdc <_obstack_allocated_p@@Base>:
   24fdc:	ldr	r0, [r0, #4]
   24fe0:	cmp	r0, #0
   24fe4:	beq	25014 <_obstack_allocated_p@@Base+0x38>
   24fe8:	cmp	r1, r0
   24fec:	bls	24ffc <_obstack_allocated_p@@Base+0x20>
   24ff0:	ldr	r3, [r0]
   24ff4:	cmp	r3, r1
   24ff8:	bcs	2500c <_obstack_allocated_p@@Base+0x30>
   24ffc:	ldr	r0, [r0, #4]
   25000:	cmp	r0, #0
   25004:	bne	24fe8 <_obstack_allocated_p@@Base+0xc>
   25008:	bx	lr
   2500c:	mov	r0, #1
   25010:	bx	lr
   25014:	bx	lr

00025018 <_obstack_free@@Base>:
   25018:	strd	r4, [sp, #-16]!
   2501c:	str	r6, [sp, #8]
   25020:	mov	r6, r1
   25024:	ldr	r1, [r0, #4]
   25028:	str	lr, [sp, #12]
   2502c:	cmp	r1, #0
   25030:	movne	r4, r0
   25034:	bne	2505c <_obstack_free@@Base+0x44>
   25038:	b	250ac <_obstack_free@@Base+0x94>
   2503c:	ldr	r0, [r4, #36]	; 0x24
   25040:	blx	r3
   25044:	ldrb	r3, [r4, #40]	; 0x28
   25048:	cmp	r5, #0
   2504c:	orr	r3, r3, #2
   25050:	strb	r3, [r4, #40]	; 0x28
   25054:	beq	250ac <_obstack_free@@Base+0x94>
   25058:	mov	r1, r5
   2505c:	cmp	r1, r6
   25060:	bcs	25070 <_obstack_free@@Base+0x58>
   25064:	ldr	r3, [r1]
   25068:	cmp	r3, r6
   2506c:	bcs	25090 <_obstack_free@@Base+0x78>
   25070:	ldrb	r2, [r4, #40]	; 0x28
   25074:	ldr	r5, [r1, #4]
   25078:	ldr	r3, [r4, #32]
   2507c:	tst	r2, #1
   25080:	bne	2503c <_obstack_free@@Base+0x24>
   25084:	mov	r0, r1
   25088:	blx	r3
   2508c:	b	25044 <_obstack_free@@Base+0x2c>
   25090:	stmib	r4, {r1, r6}
   25094:	str	r6, [r4, #12]
   25098:	str	r3, [r4, #16]
   2509c:	ldrd	r4, [sp]
   250a0:	ldr	r6, [sp, #8]
   250a4:	add	sp, sp, #12
   250a8:	pop	{pc}		; (ldr pc, [sp], #4)
   250ac:	cmp	r6, #0
   250b0:	beq	2509c <_obstack_free@@Base+0x84>
   250b4:	bl	11d2c <abort@plt>

000250b8 <_obstack_memory_used@@Base>:
   250b8:	ldr	r3, [r0, #4]
   250bc:	cmp	r3, #0
   250c0:	beq	250e4 <_obstack_memory_used@@Base+0x2c>
   250c4:	mov	r0, #0
   250c8:	ldr	r2, [r3]
   250cc:	sub	r2, r2, r3
   250d0:	ldr	r3, [r3, #4]
   250d4:	add	r0, r0, r2
   250d8:	cmp	r3, #0
   250dc:	bne	250c8 <_obstack_memory_used@@Base+0x10>
   250e0:	bx	lr
   250e4:	mov	r0, r3
   250e8:	bx	lr
   250ec:	strd	r4, [sp, #-16]!
   250f0:	subs	r4, r0, #0
   250f4:	str	r6, [sp, #8]
   250f8:	str	lr, [sp, #12]
   250fc:	beq	25194 <_obstack_memory_used@@Base+0xdc>
   25100:	mov	r1, #47	; 0x2f
   25104:	bl	11c78 <strrchr@plt>
   25108:	subs	r5, r0, #0
   2510c:	beq	2516c <_obstack_memory_used@@Base+0xb4>
   25110:	add	r6, r5, #1
   25114:	sub	r3, r6, r4
   25118:	cmp	r3, #6
   2511c:	ble	2516c <_obstack_memory_used@@Base+0xb4>
   25120:	movw	r1, #560	; 0x230
   25124:	movt	r1, #3
   25128:	mov	r2, #7
   2512c:	sub	r0, r5, #6
   25130:	bl	11d20 <strncmp@plt>
   25134:	cmp	r0, #0
   25138:	bne	2516c <_obstack_memory_used@@Base+0xb4>
   2513c:	movw	r1, #568	; 0x238
   25140:	movt	r1, #3
   25144:	mov	r2, #3
   25148:	mov	r0, r6
   2514c:	bl	11d20 <strncmp@plt>
   25150:	cmp	r0, #0
   25154:	movne	r4, r6
   25158:	bne	2516c <_obstack_memory_used@@Base+0xb4>
   2515c:	add	r4, r5, #4
   25160:	movw	r3, #4880	; 0x1310
   25164:	movt	r3, #4
   25168:	str	r4, [r3]
   2516c:	movw	r2, #9192	; 0x23e8
   25170:	movt	r2, #4
   25174:	ldr	r6, [sp, #8]
   25178:	movw	r3, #4884	; 0x1314
   2517c:	movt	r3, #4
   25180:	str	r4, [r2]
   25184:	str	r4, [r3]
   25188:	ldrd	r4, [sp]
   2518c:	add	sp, sp, #12
   25190:	pop	{pc}		; (ldr pc, [sp], #4)
   25194:	movw	r3, #4896	; 0x1320
   25198:	movt	r3, #4
   2519c:	movw	r0, #504	; 0x1f8
   251a0:	movt	r0, #3
   251a4:	ldr	r3, [r3]
   251a8:	mov	r2, #55	; 0x37
   251ac:	mov	r1, #1
   251b0:	bl	11a2c <fwrite@plt>
   251b4:	bl	11d2c <abort@plt>
   251b8:	mov	r2, #5
   251bc:	strd	r4, [sp, #-16]!
   251c0:	mov	r5, r0
   251c4:	str	r6, [sp, #8]
   251c8:	mov	r6, r1
   251cc:	mov	r1, r0
   251d0:	mov	r0, #0
   251d4:	str	lr, [sp, #12]
   251d8:	bl	11984 <dcgettext@plt>
   251dc:	cmp	r5, r0
   251e0:	mov	r4, r0
   251e4:	beq	251fc <_obstack_memory_used@@Base+0x144>
   251e8:	mov	r0, r4
   251ec:	ldrd	r4, [sp]
   251f0:	ldr	r6, [sp, #8]
   251f4:	add	sp, sp, #12
   251f8:	pop	{pc}		; (ldr pc, [sp], #4)
   251fc:	bl	2b8bc <_obstack_memory_used@@Base+0x6804>
   25200:	ldrb	r3, [r0]
   25204:	bic	r3, r3, #32
   25208:	cmp	r3, #85	; 0x55
   2520c:	bne	25274 <_obstack_memory_used@@Base+0x1bc>
   25210:	ldrb	r3, [r0, #1]
   25214:	bic	r3, r3, #32
   25218:	cmp	r3, #84	; 0x54
   2521c:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   25220:	ldrb	r3, [r0, #2]
   25224:	bic	r3, r3, #32
   25228:	cmp	r3, #70	; 0x46
   2522c:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   25230:	ldrb	r3, [r0, #3]
   25234:	cmp	r3, #45	; 0x2d
   25238:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   2523c:	ldrb	r3, [r0, #4]
   25240:	cmp	r3, #56	; 0x38
   25244:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   25248:	ldrb	r3, [r0, #5]
   2524c:	cmp	r3, #0
   25250:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   25254:	ldrb	r2, [r4]
   25258:	movw	r3, #660	; 0x294
   2525c:	movt	r3, #3
   25260:	movw	r4, #672	; 0x2a0
   25264:	movt	r4, #3
   25268:	cmp	r2, #96	; 0x60
   2526c:	movne	r4, r3
   25270:	b	251e8 <_obstack_memory_used@@Base+0x130>
   25274:	cmp	r3, #71	; 0x47
   25278:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   2527c:	ldrb	r3, [r0, #1]
   25280:	bic	r3, r3, #32
   25284:	cmp	r3, #66	; 0x42
   25288:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   2528c:	ldrb	r3, [r0, #2]
   25290:	cmp	r3, #49	; 0x31
   25294:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   25298:	ldrb	r3, [r0, #3]
   2529c:	cmp	r3, #56	; 0x38
   252a0:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   252a4:	ldrb	r3, [r0, #4]
   252a8:	cmp	r3, #48	; 0x30
   252ac:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   252b0:	ldrb	r3, [r0, #5]
   252b4:	cmp	r3, #51	; 0x33
   252b8:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   252bc:	ldrb	r3, [r0, #6]
   252c0:	cmp	r3, #48	; 0x30
   252c4:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   252c8:	ldrb	r3, [r0, #7]
   252cc:	cmp	r3, #0
   252d0:	bne	252f4 <_obstack_memory_used@@Base+0x23c>
   252d4:	ldrb	r2, [r4]
   252d8:	movw	r3, #664	; 0x298
   252dc:	movt	r3, #3
   252e0:	movw	r4, #668	; 0x29c
   252e4:	movt	r4, #3
   252e8:	cmp	r2, #96	; 0x60
   252ec:	movne	r4, r3
   252f0:	b	251e8 <_obstack_memory_used@@Base+0x130>
   252f4:	movw	r3, #676	; 0x2a4
   252f8:	movt	r3, #3
   252fc:	cmp	r6, #9
   25300:	movw	r4, #656	; 0x290
   25304:	movt	r4, #3
   25308:	movne	r4, r3
   2530c:	b	251e8 <_obstack_memory_used@@Base+0x130>
   25310:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25314:	strd	r6, [sp, #8]
   25318:	strd	r8, [sp, #16]
   2531c:	mov	r8, r3
   25320:	strd	sl, [sp, #24]
   25324:	mov	fp, r0
   25328:	mov	sl, r1
   2532c:	str	lr, [sp, #32]
   25330:	sub	sp, sp, #140	; 0x8c
   25334:	ldr	r3, [sp, #180]	; 0xb4
   25338:	str	r2, [sp, #28]
   2533c:	and	r4, r3, #2
   25340:	ubfx	r3, r3, #1, #1
   25344:	str	r3, [sp, #44]	; 0x2c
   25348:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   2534c:	ldr	r3, [sp, #176]	; 0xb0
   25350:	str	r0, [sp, #76]	; 0x4c
   25354:	cmp	r3, #10
   25358:	ldrls	pc, [pc, r3, lsl #2]
   2535c:	b	26cf8 <_obstack_memory_used@@Base+0x1c40>
   25360:	andeq	r5, r2, r0, ror #15
   25364:	strdeq	r5, [r2], -ip
   25368:	andeq	r5, r2, r8, ror lr
   2536c:	andeq	r5, r2, r8, ror #18
   25370:	andeq	r5, r2, r8, ror #13
   25374:	andeq	r5, r2, r4, ror #14
   25378:	andeq	r5, r2, ip, lsr r8
   2537c:	andeq	r5, r2, r4, lsr #17
   25380:	andeq	r5, r2, ip, lsl #7
   25384:	andeq	r5, r2, ip, lsl #7
   25388:	andeq	r5, r2, ip, lsl #7
   2538c:	ldr	r3, [sp, #176]	; 0xb0
   25390:	cmp	r3, #10
   25394:	beq	253c0 <_obstack_memory_used@@Base+0x308>
   25398:	mov	r1, r3
   2539c:	movw	r0, #680	; 0x2a8
   253a0:	movt	r0, #3
   253a4:	bl	251b8 <_obstack_memory_used@@Base+0x100>
   253a8:	str	r0, [sp, #188]	; 0xbc
   253ac:	movw	r0, #676	; 0x2a4
   253b0:	movt	r0, #3
   253b4:	ldr	r1, [sp, #176]	; 0xb0
   253b8:	bl	251b8 <_obstack_memory_used@@Base+0x100>
   253bc:	str	r0, [sp, #192]	; 0xc0
   253c0:	cmp	r4, #0
   253c4:	movne	r4, #0
   253c8:	beq	26a84 <_obstack_memory_used@@Base+0x19cc>
   253cc:	mov	r5, #0
   253d0:	ldr	r0, [sp, #192]	; 0xc0
   253d4:	mov	r9, r5
   253d8:	str	r5, [sp, #64]	; 0x40
   253dc:	bl	11b94 <strlen@plt>
   253e0:	mov	r3, #1
   253e4:	ldr	r2, [sp, #44]	; 0x2c
   253e8:	cmp	r0, r5
   253ec:	moveq	r2, r5
   253f0:	str	r3, [sp, #32]
   253f4:	str	r3, [sp, #48]	; 0x30
   253f8:	str	r5, [sp, #52]	; 0x34
   253fc:	str	r3, [sp, #60]	; 0x3c
   25400:	ldr	r3, [sp, #180]	; 0xb4
   25404:	str	r0, [sp, #56]	; 0x38
   25408:	str	r5, [sp, #68]	; 0x44
   2540c:	str	r5, [sp, #80]	; 0x50
   25410:	str	r5, [sp, #84]	; 0x54
   25414:	and	r3, r3, #1
   25418:	str	r2, [sp, #88]	; 0x58
   2541c:	str	r3, [sp, #92]	; 0x5c
   25420:	ldr	r3, [sp, #180]	; 0xb4
   25424:	and	r3, r3, #4
   25428:	str	r3, [sp, #96]	; 0x60
   2542c:	ldr	r3, [sp, #192]	; 0xc0
   25430:	str	r3, [sp, #72]	; 0x48
   25434:	mov	r3, fp
   25438:	mov	r7, #0
   2543c:	mov	fp, r9
   25440:	mov	r9, r3
   25444:	cmn	r8, #1
   25448:	beq	25a4c <_obstack_memory_used@@Base+0x994>
   2544c:	subs	r6, r8, r7
   25450:	movne	r6, #1
   25454:	cmp	r6, #0
   25458:	beq	25a64 <_obstack_memory_used@@Base+0x9ac>
   2545c:	ldr	r0, [sp, #28]
   25460:	ldr	r3, [sp, #48]	; 0x30
   25464:	cmp	r3, #0
   25468:	add	r3, r0, r7
   2546c:	str	r3, [sp, #36]	; 0x24
   25470:	beq	25ef0 <_obstack_memory_used@@Base+0xe38>
   25474:	ldr	r2, [sp, #56]	; 0x38
   25478:	cmp	r2, #0
   2547c:	beq	263f0 <_obstack_memory_used@@Base+0x1338>
   25480:	cmp	r2, #1
   25484:	mov	r3, r2
   25488:	movls	r3, #0
   2548c:	movhi	r3, #1
   25490:	cmn	r8, #1
   25494:	add	r5, r7, r2
   25498:	movne	r3, #0
   2549c:	cmp	r3, #0
   254a0:	beq	254ac <_obstack_memory_used@@Base+0x3f4>
   254a4:	bl	11b94 <strlen@plt>
   254a8:	mov	r8, r0
   254ac:	cmp	r5, r8
   254b0:	bhi	263f0 <_obstack_memory_used@@Base+0x1338>
   254b4:	ldr	r0, [sp, #36]	; 0x24
   254b8:	ldr	r2, [sp, #56]	; 0x38
   254bc:	ldr	r1, [sp, #72]	; 0x48
   254c0:	bl	1196c <memcmp@plt>
   254c4:	cmp	r0, #0
   254c8:	bne	263f0 <_obstack_memory_used@@Base+0x1338>
   254cc:	ldr	r3, [sp, #44]	; 0x2c
   254d0:	cmp	r3, #0
   254d4:	bne	26b9c <_obstack_memory_used@@Base+0x1ae4>
   254d8:	ldr	r3, [sp, #36]	; 0x24
   254dc:	ldrb	r5, [r3]
   254e0:	cmp	r5, #126	; 0x7e
   254e4:	ldrls	pc, [pc, r5, lsl #2]
   254e8:	b	26984 <_obstack_memory_used@@Base+0x18cc>
   254ec:	andeq	r5, r2, r0, asr #23
   254f0:	andeq	r6, r2, r4, lsl #19
   254f4:	andeq	r6, r2, r4, lsl #19
   254f8:	andeq	r6, r2, r4, lsl #19
   254fc:	andeq	r6, r2, r4, lsl #19
   25500:	andeq	r6, r2, r4, lsl #19
   25504:	andeq	r6, r2, r4, lsl #19
   25508:	andeq	r5, r2, r8, lsl fp
   2550c:	andeq	r5, r2, r0, lsl fp
   25510:	andeq	r5, r2, r0, lsr #22
   25514:	andeq	r5, r2, r4, lsr #25
   25518:	muleq	r2, r4, ip
   2551c:			; <UNDEFINED> instruction: 0x000259bc
   25520:	andeq	r5, r2, r0, ror ip
   25524:	andeq	r6, r2, r4, lsl #19
   25528:	andeq	r6, r2, r4, lsl #19
   2552c:	andeq	r6, r2, r4, lsl #19
   25530:	andeq	r6, r2, r4, lsl #19
   25534:	andeq	r6, r2, r4, lsl #19
   25538:	andeq	r6, r2, r4, lsl #19
   2553c:	andeq	r6, r2, r4, lsl #19
   25540:	andeq	r6, r2, r4, lsl #19
   25544:	andeq	r6, r2, r4, lsl #19
   25548:	andeq	r6, r2, r4, lsl #19
   2554c:	andeq	r6, r2, r4, lsl #19
   25550:	andeq	r6, r2, r4, lsl #19
   25554:	andeq	r6, r2, r4, lsl #19
   25558:	andeq	r6, r2, r4, lsl #19
   2555c:	andeq	r6, r2, r4, lsl #19
   25560:	andeq	r6, r2, r4, lsl #19
   25564:	andeq	r6, r2, r4, lsl #19
   25568:	andeq	r6, r2, r4, lsl #19
   2556c:	andeq	r5, r2, ip, lsl sp
   25570:	andeq	r5, r2, r0, lsl sp
   25574:	andeq	r5, r2, r0, lsl sp
   25578:	andeq	r5, r2, r4, lsl #26
   2557c:	andeq	r5, r2, r0, lsl sp
   25580:	andeq	r5, r2, r8, ror #27
   25584:	andeq	r5, r2, r0, lsl sp
   25588:	andeq	r5, r2, r8, asr lr
   2558c:	andeq	r5, r2, r0, lsl sp
   25590:	andeq	r5, r2, r0, lsl sp
   25594:	andeq	r5, r2, r0, lsl sp
   25598:	andeq	r5, r2, r8, ror #27
   2559c:	andeq	r5, r2, r8, ror #27
   255a0:	andeq	r5, r2, r8, ror #27
   255a4:	andeq	r5, r2, r8, ror #27
   255a8:	andeq	r5, r2, r8, ror #27
   255ac:	andeq	r5, r2, r8, ror #27
   255b0:	andeq	r5, r2, r8, ror #27
   255b4:	andeq	r5, r2, r8, ror #27
   255b8:	andeq	r5, r2, r8, ror #27
   255bc:	andeq	r5, r2, r8, ror #27
   255c0:	andeq	r5, r2, r8, ror #27
   255c4:	andeq	r5, r2, r8, ror #27
   255c8:	andeq	r5, r2, r8, ror #27
   255cc:	andeq	r5, r2, r8, ror #27
   255d0:	andeq	r5, r2, r8, ror #27
   255d4:	andeq	r5, r2, r8, ror #27
   255d8:	andeq	r5, r2, r0, lsl sp
   255dc:	andeq	r5, r2, r0, lsl sp
   255e0:	andeq	r5, r2, r0, lsl sp
   255e4:	andeq	r5, r2, r0, lsl sp
   255e8:	andeq	r5, r2, r8, lsl #28
   255ec:	andeq	r6, r2, r4, lsl #19
   255f0:	andeq	r5, r2, r8, ror #27
   255f4:	andeq	r5, r2, r8, ror #27
   255f8:	andeq	r5, r2, r8, ror #27
   255fc:	andeq	r5, r2, r8, ror #27
   25600:	andeq	r5, r2, r8, ror #27
   25604:	andeq	r5, r2, r8, ror #27
   25608:	andeq	r5, r2, r8, ror #27
   2560c:	andeq	r5, r2, r8, ror #27
   25610:	andeq	r5, r2, r8, ror #27
   25614:	andeq	r5, r2, r8, ror #27
   25618:	andeq	r5, r2, r8, ror #27
   2561c:	andeq	r5, r2, r8, ror #27
   25620:	andeq	r5, r2, r8, ror #27
   25624:	andeq	r5, r2, r8, ror #27
   25628:	andeq	r5, r2, r8, ror #27
   2562c:	andeq	r5, r2, r8, ror #27
   25630:	andeq	r5, r2, r8, ror #27
   25634:	andeq	r5, r2, r8, ror #27
   25638:	andeq	r5, r2, r8, ror #27
   2563c:	andeq	r5, r2, r8, ror #27
   25640:	andeq	r5, r2, r8, ror #27
   25644:	andeq	r5, r2, r8, ror #27
   25648:	andeq	r5, r2, r8, ror #27
   2564c:	andeq	r5, r2, r8, ror #27
   25650:	andeq	r5, r2, r8, ror #27
   25654:	andeq	r5, r2, r8, ror #27
   25658:	andeq	r5, r2, r0, lsl sp
   2565c:	andeq	r5, r2, ip, lsr #27
   25660:	andeq	r5, r2, r8, ror #27
   25664:	andeq	r5, r2, r0, lsl sp
   25668:	andeq	r5, r2, r8, ror #27
   2566c:	andeq	r5, r2, r0, lsl sp
   25670:	andeq	r5, r2, r8, ror #27
   25674:	andeq	r5, r2, r8, ror #27
   25678:	andeq	r5, r2, r8, ror #27
   2567c:	andeq	r5, r2, r8, ror #27
   25680:	andeq	r5, r2, r8, ror #27
   25684:	andeq	r5, r2, r8, ror #27
   25688:	andeq	r5, r2, r8, ror #27
   2568c:	andeq	r5, r2, r8, ror #27
   25690:	andeq	r5, r2, r8, ror #27
   25694:	andeq	r5, r2, r8, ror #27
   25698:	andeq	r5, r2, r8, ror #27
   2569c:	andeq	r5, r2, r8, ror #27
   256a0:	andeq	r5, r2, r8, ror #27
   256a4:	andeq	r5, r2, r8, ror #27
   256a8:	andeq	r5, r2, r8, ror #27
   256ac:	andeq	r5, r2, r8, ror #27
   256b0:	andeq	r5, r2, r8, ror #27
   256b4:	andeq	r5, r2, r8, ror #27
   256b8:	andeq	r5, r2, r8, ror #27
   256bc:	andeq	r5, r2, r8, ror #27
   256c0:	andeq	r5, r2, r8, ror #27
   256c4:	andeq	r5, r2, r8, ror #27
   256c8:	andeq	r5, r2, r8, ror #27
   256cc:	andeq	r5, r2, r8, ror #27
   256d0:	andeq	r5, r2, r8, ror #27
   256d4:	andeq	r5, r2, r8, ror #27
   256d8:			; <UNDEFINED> instruction: 0x00025cb8
   256dc:	andeq	r5, r2, r0, lsl sp
   256e0:			; <UNDEFINED> instruction: 0x00025cb8
   256e4:	andeq	r5, r2, r4, lsl #26
   256e8:	ldr	r3, [sp, #180]	; 0xb4
   256ec:	cmp	r4, #0
   256f0:	and	r3, r3, #1
   256f4:	str	r3, [sp, #92]	; 0x5c
   256f8:	ldr	r3, [sp, #180]	; 0xb4
   256fc:	and	r3, r3, #4
   25700:	str	r3, [sp, #96]	; 0x60
   25704:	moveq	r3, #1
   25708:	streq	r3, [sp, #60]	; 0x3c
   2570c:	beq	25e9c <_obstack_memory_used@@Base+0xde4>
   25710:	mov	r3, #0
   25714:	mov	r2, #1
   25718:	mov	r4, r3
   2571c:	mov	r9, r3
   25720:	str	r2, [sp, #32]
   25724:	str	r2, [sp, #44]	; 0x2c
   25728:	str	r3, [sp, #48]	; 0x30
   2572c:	str	r2, [sp, #52]	; 0x34
   25730:	str	r2, [sp, #56]	; 0x38
   25734:	str	r3, [sp, #60]	; 0x3c
   25738:	str	r2, [sp, #64]	; 0x40
   2573c:	str	r2, [sp, #68]	; 0x44
   25740:	str	r3, [sp, #80]	; 0x50
   25744:	str	r3, [sp, #84]	; 0x54
   25748:	str	r3, [sp, #88]	; 0x58
   2574c:	movw	r3, #676	; 0x2a4
   25750:	movt	r3, #3
   25754:	str	r3, [sp, #72]	; 0x48
   25758:	mov	r3, #2
   2575c:	str	r3, [sp, #176]	; 0xb0
   25760:	b	25434 <_obstack_memory_used@@Base+0x37c>
   25764:	ldr	r3, [sp, #180]	; 0xb4
   25768:	cmp	r4, #0
   2576c:	and	r3, r3, #1
   25770:	str	r3, [sp, #92]	; 0x5c
   25774:	ldr	r3, [sp, #180]	; 0xb4
   25778:	and	r3, r3, #4
   2577c:	str	r3, [sp, #96]	; 0x60
   25780:	bne	26b54 <_obstack_memory_used@@Base+0x1a9c>
   25784:	cmp	sl, #0
   25788:	beq	26900 <_obstack_memory_used@@Base+0x1848>
   2578c:	mov	r3, #34	; 0x22
   25790:	mov	r2, r4
   25794:	mov	r1, #1
   25798:	mov	r9, r2
   2579c:	strb	r3, [fp]
   257a0:	movw	r3, #656	; 0x290
   257a4:	movt	r3, #3
   257a8:	mov	r4, r1
   257ac:	str	r1, [sp, #32]
   257b0:	str	r2, [sp, #44]	; 0x2c
   257b4:	str	r1, [sp, #48]	; 0x30
   257b8:	str	r2, [sp, #52]	; 0x34
   257bc:	str	r1, [sp, #56]	; 0x38
   257c0:	str	r1, [sp, #60]	; 0x3c
   257c4:	str	r2, [sp, #64]	; 0x40
   257c8:	str	r2, [sp, #68]	; 0x44
   257cc:	str	r3, [sp, #72]	; 0x48
   257d0:	str	r2, [sp, #80]	; 0x50
   257d4:	str	r2, [sp, #84]	; 0x54
   257d8:	str	r2, [sp, #88]	; 0x58
   257dc:	b	25434 <_obstack_memory_used@@Base+0x37c>
   257e0:	mov	r3, #0
   257e4:	mov	r2, #1
   257e8:	mov	r9, r3
   257ec:	str	r2, [sp, #32]
   257f0:	str	r3, [sp, #44]	; 0x2c
   257f4:	str	r3, [sp, #48]	; 0x30
   257f8:	str	r3, [sp, #52]	; 0x34
   257fc:	str	r3, [sp, #60]	; 0x3c
   25800:	strd	r2, [sp, #64]	; 0x40
   25804:	str	r3, [sp, #72]	; 0x48
   25808:	str	r3, [sp, #80]	; 0x50
   2580c:	str	r3, [sp, #88]	; 0x58
   25810:	ldr	r3, [sp, #180]	; 0xb4
   25814:	and	r3, r3, r2
   25818:	str	r3, [sp, #92]	; 0x5c
   2581c:	ldr	r3, [sp, #180]	; 0xb4
   25820:	and	r3, r3, #4
   25824:	str	r3, [sp, #96]	; 0x60
   25828:	ldr	r3, [sp, #176]	; 0xb0
   2582c:	mov	r4, r3
   25830:	str	r3, [sp, #56]	; 0x38
   25834:	str	r3, [sp, #84]	; 0x54
   25838:	b	25434 <_obstack_memory_used@@Base+0x37c>
   2583c:	mov	r3, #1
   25840:	mov	r4, #0
   25844:	mov	r9, r4
   25848:	str	r3, [sp, #32]
   2584c:	str	r3, [sp, #44]	; 0x2c
   25850:	str	r3, [sp, #48]	; 0x30
   25854:	str	r4, [sp, #52]	; 0x34
   25858:	str	r3, [sp, #56]	; 0x38
   2585c:	str	r3, [sp, #60]	; 0x3c
   25860:	str	r3, [sp, #88]	; 0x58
   25864:	movw	r3, #656	; 0x290
   25868:	movt	r3, #3
   2586c:	str	r4, [sp, #64]	; 0x40
   25870:	str	r4, [sp, #68]	; 0x44
   25874:	str	r3, [sp, #72]	; 0x48
   25878:	ldr	r3, [sp, #180]	; 0xb4
   2587c:	str	r4, [sp, #80]	; 0x50
   25880:	str	r4, [sp, #84]	; 0x54
   25884:	and	r3, r3, #1
   25888:	str	r3, [sp, #92]	; 0x5c
   2588c:	ldr	r3, [sp, #180]	; 0xb4
   25890:	and	r3, r3, #4
   25894:	str	r3, [sp, #96]	; 0x60
   25898:	mov	r3, #5
   2589c:	str	r3, [sp, #176]	; 0xb0
   258a0:	b	25434 <_obstack_memory_used@@Base+0x37c>
   258a4:	mov	r3, #1
   258a8:	mov	r4, #0
   258ac:	mov	r9, r4
   258b0:	str	r3, [sp, #32]
   258b4:	str	r4, [sp, #44]	; 0x2c
   258b8:	str	r3, [sp, #48]	; 0x30
   258bc:	str	r3, [sp, #60]	; 0x3c
   258c0:	ldr	r3, [sp, #180]	; 0xb4
   258c4:	str	r4, [sp, #52]	; 0x34
   258c8:	str	r4, [sp, #56]	; 0x38
   258cc:	str	r4, [sp, #64]	; 0x40
   258d0:	str	r4, [sp, #68]	; 0x44
   258d4:	and	r3, r3, #1
   258d8:	str	r4, [sp, #72]	; 0x48
   258dc:	str	r4, [sp, #80]	; 0x50
   258e0:	str	r4, [sp, #84]	; 0x54
   258e4:	str	r3, [sp, #92]	; 0x5c
   258e8:	ldr	r3, [sp, #180]	; 0xb4
   258ec:	str	r4, [sp, #88]	; 0x58
   258f0:	and	r3, r3, #4
   258f4:	str	r3, [sp, #96]	; 0x60
   258f8:	b	25434 <_obstack_memory_used@@Base+0x37c>
   258fc:	mov	r3, #0
   25900:	mov	r2, #1
   25904:	ldr	r1, [sp, #176]	; 0xb0
   25908:	mov	r4, r3
   2590c:	mov	r9, r3
   25910:	movw	r3, #676	; 0x2a4
   25914:	movt	r3, #3
   25918:	str	r2, [sp, #32]
   2591c:	str	r2, [sp, #44]	; 0x2c
   25920:	str	r4, [sp, #48]	; 0x30
   25924:	strd	r2, [sp, #68]	; 0x44
   25928:	ldr	r3, [sp, #180]	; 0xb4
   2592c:	str	r2, [sp, #52]	; 0x34
   25930:	str	r1, [sp, #56]	; 0x38
   25934:	str	r4, [sp, #60]	; 0x3c
   25938:	str	r2, [sp, #64]	; 0x40
   2593c:	and	r3, r3, r2
   25940:	str	r4, [sp, #80]	; 0x50
   25944:	str	r4, [sp, #84]	; 0x54
   25948:	str	r4, [sp, #88]	; 0x58
   2594c:	str	r3, [sp, #92]	; 0x5c
   25950:	ldr	r3, [sp, #180]	; 0xb4
   25954:	and	r3, r3, #4
   25958:	str	r3, [sp, #96]	; 0x60
   2595c:	mov	r3, #2
   25960:	str	r3, [sp, #176]	; 0xb0
   25964:	b	25434 <_obstack_memory_used@@Base+0x37c>
   25968:	mov	r3, #1
   2596c:	mov	r2, #0
   25970:	mov	r4, r2
   25974:	mov	r9, r2
   25978:	str	r3, [sp, #32]
   2597c:	str	r3, [sp, #44]	; 0x2c
   25980:	str	r2, [sp, #48]	; 0x30
   25984:	str	r3, [sp, #52]	; 0x34
   25988:	str	r3, [sp, #56]	; 0x38
   2598c:	str	r3, [sp, #60]	; 0x3c
   25990:	str	r3, [sp, #64]	; 0x40
   25994:	str	r3, [sp, #68]	; 0x44
   25998:	str	r3, [sp, #88]	; 0x58
   2599c:	movw	r3, #676	; 0x2a4
   259a0:	movt	r3, #3
   259a4:	str	r3, [sp, #72]	; 0x48
   259a8:	ldr	r3, [sp, #180]	; 0xb4
   259ac:	str	r2, [sp, #80]	; 0x50
   259b0:	str	r2, [sp, #84]	; 0x54
   259b4:	and	r3, r3, #1
   259b8:	b	2594c <_obstack_memory_used@@Base+0x894>
   259bc:	mov	r5, #102	; 0x66
   259c0:	mov	r6, #0
   259c4:	ldr	r3, [sp, #44]	; 0x2c
   259c8:	cmp	r3, #0
   259cc:	bne	2687c <_obstack_memory_used@@Base+0x17c4>
   259d0:	ldr	r2, [sp, #52]	; 0x34
   259d4:	eor	r3, fp, #1
   259d8:	ands	r3, r2, r3
   259dc:	beq	25a14 <_obstack_memory_used@@Base+0x95c>
   259e0:	cmp	sl, r4
   259e4:	mov	fp, r3
   259e8:	movhi	r2, #39	; 0x27
   259ec:	strbhi	r2, [r9, r4]
   259f0:	add	r2, r4, #1
   259f4:	cmp	sl, r2
   259f8:	movhi	r1, #36	; 0x24
   259fc:	strbhi	r1, [r9, r2]
   25a00:	add	r2, r4, #2
   25a04:	add	r4, r4, #3
   25a08:	cmp	sl, r2
   25a0c:	movhi	r1, #39	; 0x27
   25a10:	strbhi	r1, [r9, r2]
   25a14:	cmp	sl, r4
   25a18:	add	r7, r7, #1
   25a1c:	movhi	r3, #92	; 0x5c
   25a20:	strbhi	r3, [r9, r4]
   25a24:	add	r4, r4, #1
   25a28:	cmp	r4, sl
   25a2c:	ldr	r3, [sp, #32]
   25a30:	strbcc	r5, [r9, r4]
   25a34:	cmp	r6, #0
   25a38:	add	r4, r4, #1
   25a3c:	moveq	r3, #0
   25a40:	cmn	r8, #1
   25a44:	str	r3, [sp, #32]
   25a48:	bne	2544c <_obstack_memory_used@@Base+0x394>
   25a4c:	ldr	r3, [sp, #28]
   25a50:	ldrb	r6, [r3, r7]
   25a54:	adds	r6, r6, #0
   25a58:	movne	r6, #1
   25a5c:	cmp	r6, #0
   25a60:	bne	2545c <_obstack_memory_used@@Base+0x3a4>
   25a64:	mov	r3, r9
   25a68:	mov	r9, fp
   25a6c:	mov	fp, r3
   25a70:	ldr	r3, [sp, #68]	; 0x44
   25a74:	cmp	r4, #0
   25a78:	movne	r3, #0
   25a7c:	cmp	r3, #0
   25a80:	bne	26c74 <_obstack_memory_used@@Base+0x1bbc>
   25a84:	ldr	r3, [sp, #44]	; 0x2c
   25a88:	ldr	r2, [sp, #52]	; 0x34
   25a8c:	eor	r3, r3, #1
   25a90:	ands	r2, r3, r2
   25a94:	beq	26bac <_obstack_memory_used@@Base+0x1af4>
   25a98:	ldr	r3, [sp, #80]	; 0x50
   25a9c:	cmp	r3, #0
   25aa0:	beq	26bb0 <_obstack_memory_used@@Base+0x1af8>
   25aa4:	ldr	r3, [sp, #32]
   25aa8:	cmp	r3, #0
   25aac:	bne	26c24 <_obstack_memory_used@@Base+0x1b6c>
   25ab0:	ldr	r3, [sp, #84]	; 0x54
   25ab4:	adds	r3, r3, #0
   25ab8:	movne	r3, #1
   25abc:	cmp	sl, #0
   25ac0:	movne	r3, #0
   25ac4:	cmp	r3, #0
   25ac8:	ldreq	r2, [sp, #80]	; 0x50
   25acc:	beq	26bb0 <_obstack_memory_used@@Base+0x1af8>
   25ad0:	ldr	r2, [sp, #84]	; 0x54
   25ad4:	mov	sl, r2
   25ad8:	mov	r0, #0
   25adc:	mov	r4, #1
   25ae0:	mov	r1, #39	; 0x27
   25ae4:	str	r0, [sp, #44]	; 0x2c
   25ae8:	strb	r1, [fp]
   25aec:	str	r0, [sp, #48]	; 0x30
   25af0:	str	r4, [sp, #52]	; 0x34
   25af4:	str	r4, [sp, #56]	; 0x38
   25af8:	str	r4, [sp, #64]	; 0x40
   25afc:	str	r0, [sp, #68]	; 0x44
   25b00:	str	r3, [sp, #80]	; 0x50
   25b04:	str	r2, [sp, #84]	; 0x54
   25b08:	str	r0, [sp, #88]	; 0x58
   25b0c:	b	2574c <_obstack_memory_used@@Base+0x694>
   25b10:	mov	r5, #98	; 0x62
   25b14:	b	259c0 <_obstack_memory_used@@Base+0x908>
   25b18:	mov	r5, #97	; 0x61
   25b1c:	b	259c0 <_obstack_memory_used@@Base+0x908>
   25b20:	ldr	r3, [sp, #48]	; 0x30
   25b24:	str	r3, [sp, #40]	; 0x28
   25b28:	mov	r3, #116	; 0x74
   25b2c:	ldr	r2, [sp, #68]	; 0x44
   25b30:	cmp	r2, #0
   25b34:	bne	25d30 <_obstack_memory_used@@Base+0xc78>
   25b38:	ldr	r2, [sp, #60]	; 0x3c
   25b3c:	cmp	r2, #0
   25b40:	bne	25c8c <_obstack_memory_used@@Base+0xbd4>
   25b44:	ldr	r3, [sp, #44]	; 0x2c
   25b48:	mov	r6, #0
   25b4c:	cmp	r3, #0
   25b50:	beq	25cfc <_obstack_memory_used@@Base+0xc44>
   25b54:	mov	r3, fp
   25b58:	ldr	r2, [sp, #184]	; 0xb8
   25b5c:	cmp	r2, #0
   25b60:	beq	25b80 <_obstack_memory_used@@Base+0xac8>
   25b64:	ubfx	r1, r5, #5, #8
   25b68:	mov	r0, r2
   25b6c:	and	r2, r5, #31
   25b70:	ldr	r1, [r0, r1, lsl #2]
   25b74:	lsr	r2, r1, r2
   25b78:	tst	r2, #1
   25b7c:	bne	259c4 <_obstack_memory_used@@Base+0x90c>
   25b80:	ldr	r2, [sp, #40]	; 0x28
   25b84:	cmp	r2, #0
   25b88:	addeq	r7, r7, #1
   25b8c:	bne	259c4 <_obstack_memory_used@@Base+0x90c>
   25b90:	cmp	r3, #0
   25b94:	beq	25a28 <_obstack_memory_used@@Base+0x970>
   25b98:	cmp	sl, r4
   25b9c:	mov	fp, #0
   25ba0:	movhi	r3, #39	; 0x27
   25ba4:	strbhi	r3, [r9, r4]
   25ba8:	add	r3, r4, #1
   25bac:	add	r4, r4, #2
   25bb0:	cmp	sl, r3
   25bb4:	movhi	r2, #39	; 0x27
   25bb8:	strbhi	r2, [r9, r3]
   25bbc:	b	25a28 <_obstack_memory_used@@Base+0x970>
   25bc0:	ldr	r3, [sp, #48]	; 0x30
   25bc4:	str	r3, [sp, #40]	; 0x28
   25bc8:	eor	r3, fp, #1
   25bcc:	ldr	r2, [sp, #52]	; 0x34
   25bd0:	ands	r2, r2, r3
   25bd4:	beq	26894 <_obstack_memory_used@@Base+0x17dc>
   25bd8:	cmp	sl, r4
   25bdc:	movhi	r3, #39	; 0x27
   25be0:	strbhi	r3, [r9, r4]
   25be4:	add	r3, r4, #1
   25be8:	cmp	sl, r3
   25bec:	movhi	r1, #36	; 0x24
   25bf0:	strbhi	r1, [r9, r3]
   25bf4:	add	r3, r4, #2
   25bf8:	cmp	sl, r3
   25bfc:	movhi	r1, #39	; 0x27
   25c00:	strbhi	r1, [r9, r3]
   25c04:	add	r3, r4, #3
   25c08:	cmp	sl, r3
   25c0c:	bls	268e0 <_obstack_memory_used@@Base+0x1828>
   25c10:	mov	r4, r3
   25c14:	mov	r3, #92	; 0x5c
   25c18:	mov	fp, r2
   25c1c:	mov	r2, r4
   25c20:	strb	r3, [r9, r4]
   25c24:	ldr	r3, [sp, #176]	; 0xb0
   25c28:	add	r4, r4, #1
   25c2c:	cmp	r3, #2
   25c30:	beq	26948 <_obstack_memory_used@@Base+0x1890>
   25c34:	add	r3, r7, #1
   25c38:	cmp	r3, r8
   25c3c:	bcs	25c54 <_obstack_memory_used@@Base+0xb9c>
   25c40:	ldr	r1, [sp, #28]
   25c44:	ldrb	r3, [r1, r3]
   25c48:	sub	r3, r3, #48	; 0x30
   25c4c:	cmp	r3, #9
   25c50:	bls	26958 <_obstack_memory_used@@Base+0x18a0>
   25c54:	mov	r3, #0
   25c58:	mov	r5, #48	; 0x30
   25c5c:	ldr	r6, [sp, #64]	; 0x40
   25c60:	cmp	r6, #0
   25c64:	beq	25b58 <_obstack_memory_used@@Base+0xaa0>
   25c68:	mov	r6, #0
   25c6c:	b	25b80 <_obstack_memory_used@@Base+0xac8>
   25c70:	ldr	r3, [sp, #48]	; 0x30
   25c74:	str	r3, [sp, #40]	; 0x28
   25c78:	ldr	r2, [sp, #60]	; 0x3c
   25c7c:	mov	r5, #13
   25c80:	mov	r3, #114	; 0x72
   25c84:	cmp	r2, #0
   25c88:	beq	25b44 <_obstack_memory_used@@Base+0xa8c>
   25c8c:	mov	r5, r3
   25c90:	b	259c0 <_obstack_memory_used@@Base+0x908>
   25c94:	ldr	r3, [sp, #48]	; 0x30
   25c98:	str	r3, [sp, #40]	; 0x28
   25c9c:	mov	r3, #118	; 0x76
   25ca0:	b	25b38 <_obstack_memory_used@@Base+0xa80>
   25ca4:	ldr	r3, [sp, #48]	; 0x30
   25ca8:	str	r3, [sp, #40]	; 0x28
   25cac:	mov	r5, #10
   25cb0:	mov	r3, #110	; 0x6e
   25cb4:	b	25b38 <_obstack_memory_used@@Base+0xa80>
   25cb8:	ldr	r3, [sp, #48]	; 0x30
   25cbc:	cmn	r8, #1
   25cc0:	str	r3, [sp, #40]	; 0x28
   25cc4:	beq	2610c <_obstack_memory_used@@Base+0x1054>
   25cc8:	subs	r3, r8, #1
   25ccc:	movne	r3, #1
   25cd0:	cmp	r3, #0
   25cd4:	bne	25ce0 <_obstack_memory_used@@Base+0xc28>
   25cd8:	cmp	r7, #0
   25cdc:	beq	25d24 <_obstack_memory_used@@Base+0xc6c>
   25ce0:	mov	r6, #0
   25ce4:	ldr	r3, [sp, #64]	; 0x40
   25ce8:	cmp	r3, #0
   25cec:	beq	25b54 <_obstack_memory_used@@Base+0xa9c>
   25cf0:	ldr	r3, [sp, #44]	; 0x2c
   25cf4:	cmp	r3, #0
   25cf8:	bne	25b54 <_obstack_memory_used@@Base+0xa9c>
   25cfc:	mov	r3, fp
   25d00:	b	25b80 <_obstack_memory_used@@Base+0xac8>
   25d04:	ldr	r3, [sp, #48]	; 0x30
   25d08:	str	r3, [sp, #40]	; 0x28
   25d0c:	b	25cd8 <_obstack_memory_used@@Base+0xc20>
   25d10:	ldr	r3, [sp, #48]	; 0x30
   25d14:	str	r3, [sp, #40]	; 0x28
   25d18:	b	25ce0 <_obstack_memory_used@@Base+0xc28>
   25d1c:	ldr	r6, [sp, #48]	; 0x30
   25d20:	str	r6, [sp, #40]	; 0x28
   25d24:	ldr	r3, [sp, #68]	; 0x44
   25d28:	cmp	r3, #0
   25d2c:	beq	25ce4 <_obstack_memory_used@@Base+0xc2c>
   25d30:	mov	r3, #2
   25d34:	mov	fp, r9
   25d38:	str	r3, [sp, #176]	; 0xb0
   25d3c:	ldr	r3, [sp, #60]	; 0x3c
   25d40:	cmp	r3, #0
   25d44:	ldr	r3, [sp, #176]	; 0xb0
   25d48:	movne	r3, #4
   25d4c:	str	r3, [sp, #176]	; 0xb0
   25d50:	mov	lr, #0
   25d54:	mov	r0, fp
   25d58:	ldr	r2, [sp, #28]
   25d5c:	ldr	r3, [sp, #180]	; 0xb4
   25d60:	ldr	r1, [sp, #188]	; 0xbc
   25d64:	bic	ip, r3, #2
   25d68:	ldr	r3, [sp, #176]	; 0xb0
   25d6c:	stm	sp, {r3, ip, lr}
   25d70:	mov	r3, r8
   25d74:	ldr	ip, [sp, #192]	; 0xc0
   25d78:	str	r1, [sp, #12]
   25d7c:	mov	r1, sl
   25d80:	str	ip, [sp, #16]
   25d84:	bl	25310 <_obstack_memory_used@@Base+0x258>
   25d88:	mov	r4, r0
   25d8c:	mov	r0, r4
   25d90:	add	sp, sp, #140	; 0x8c
   25d94:	ldrd	r4, [sp]
   25d98:	ldrd	r6, [sp, #8]
   25d9c:	ldrd	r8, [sp, #16]
   25da0:	ldrd	sl, [sp, #24]
   25da4:	add	sp, sp, #32
   25da8:	pop	{pc}		; (ldr pc, [sp], #4)
   25dac:	ldr	r3, [sp, #48]	; 0x30
   25db0:	str	r3, [sp, #40]	; 0x28
   25db4:	ldr	r3, [sp, #176]	; 0xb0
   25db8:	cmp	r3, #2
   25dbc:	beq	26134 <_obstack_memory_used@@Base+0x107c>
   25dc0:	ldr	r3, [sp, #88]	; 0x58
   25dc4:	cmp	r3, #0
   25dc8:	moveq	r5, #92	; 0x5c
   25dcc:	moveq	r3, r5
   25dd0:	beq	25b38 <_obstack_memory_used@@Base+0xa80>
   25dd4:	add	r7, r7, #1
   25dd8:	mov	r3, fp
   25ddc:	mov	r6, #0
   25de0:	mov	r5, #92	; 0x5c
   25de4:	b	25b90 <_obstack_memory_used@@Base+0xad8>
   25de8:	ldr	r3, [sp, #64]	; 0x40
   25dec:	cmp	r3, #0
   25df0:	bne	26c68 <_obstack_memory_used@@Base+0x1bb0>
   25df4:	ldr	r2, [sp, #48]	; 0x30
   25df8:	mov	r3, fp
   25dfc:	mov	r6, r2
   25e00:	str	r2, [sp, #40]	; 0x28
   25e04:	b	25b58 <_obstack_memory_used@@Base+0xaa0>
   25e08:	ldr	r3, [sp, #176]	; 0xb0
   25e0c:	cmp	r3, #2
   25e10:	beq	26ba4 <_obstack_memory_used@@Base+0x1aec>
   25e14:	cmp	r3, #5
   25e18:	ldr	r3, [sp, #48]	; 0x30
   25e1c:	str	r3, [sp, #40]	; 0x28
   25e20:	bne	25e4c <_obstack_memory_used@@Base+0xd94>
   25e24:	ldr	r3, [sp, #96]	; 0x60
   25e28:	cmp	r3, #0
   25e2c:	beq	268a8 <_obstack_memory_used@@Base+0x17f0>
   25e30:	add	r3, r7, #2
   25e34:	cmp	r3, r8
   25e38:	bcs	25e4c <_obstack_memory_used@@Base+0xd94>
   25e3c:	ldr	r2, [sp, #36]	; 0x24
   25e40:	ldrb	r5, [r2, #1]
   25e44:	cmp	r5, #63	; 0x3f
   25e48:	beq	26990 <_obstack_memory_used@@Base+0x18d8>
   25e4c:	mov	r6, #0
   25e50:	mov	r5, #63	; 0x3f
   25e54:	b	25ce4 <_obstack_memory_used@@Base+0xc2c>
   25e58:	ldr	r3, [sp, #176]	; 0xb0
   25e5c:	cmp	r3, #2
   25e60:	ldr	r3, [sp, #48]	; 0x30
   25e64:	beq	2664c <_obstack_memory_used@@Base+0x1594>
   25e68:	mov	r5, #39	; 0x27
   25e6c:	str	r3, [sp, #40]	; 0x28
   25e70:	str	r6, [sp, #80]	; 0x50
   25e74:	b	25ce4 <_obstack_memory_used@@Base+0xc2c>
   25e78:	ldr	r3, [sp, #180]	; 0xb4
   25e7c:	cmp	r4, #0
   25e80:	and	r3, r3, #1
   25e84:	str	r3, [sp, #92]	; 0x5c
   25e88:	ldr	r3, [sp, #180]	; 0xb4
   25e8c:	and	r3, r3, #4
   25e90:	str	r3, [sp, #96]	; 0x60
   25e94:	bne	26cb4 <_obstack_memory_used@@Base+0x1bfc>
   25e98:	str	r4, [sp, #60]	; 0x3c
   25e9c:	cmp	sl, #0
   25ea0:	bne	26c98 <_obstack_memory_used@@Base+0x1be0>
   25ea4:	mov	r3, #1
   25ea8:	movw	r2, #676	; 0x2a4
   25eac:	movt	r2, #3
   25eb0:	mov	r4, r3
   25eb4:	mov	r3, #2
   25eb8:	mov	r9, sl
   25ebc:	str	r4, [sp, #32]
   25ec0:	str	sl, [sp, #44]	; 0x2c
   25ec4:	str	sl, [sp, #48]	; 0x30
   25ec8:	str	r4, [sp, #52]	; 0x34
   25ecc:	str	r4, [sp, #56]	; 0x38
   25ed0:	str	r4, [sp, #64]	; 0x40
   25ed4:	str	sl, [sp, #68]	; 0x44
   25ed8:	str	r2, [sp, #72]	; 0x48
   25edc:	str	sl, [sp, #80]	; 0x50
   25ee0:	str	sl, [sp, #84]	; 0x54
   25ee4:	str	sl, [sp, #88]	; 0x58
   25ee8:	str	r3, [sp, #176]	; 0xb0
   25eec:	b	25434 <_obstack_memory_used@@Base+0x37c>
   25ef0:	ldrb	r5, [r0, r7]
   25ef4:	cmp	r5, #126	; 0x7e
   25ef8:	ldrls	pc, [pc, r5, lsl #2]
   25efc:	b	26260 <_obstack_memory_used@@Base+0x11a8>
   25f00:	andeq	r6, r2, ip, lsr #4
   25f04:	andeq	r6, r2, r0, ror #4
   25f08:	andeq	r6, r2, r0, ror #4
   25f0c:	andeq	r6, r2, r0, ror #4
   25f10:	andeq	r6, r2, r0, ror #4
   25f14:	andeq	r6, r2, r0, ror #4
   25f18:	andeq	r6, r2, r0, ror #4
   25f1c:	andeq	r6, r2, ip, lsl r2
   25f20:	andeq	r6, r2, ip, lsl #4
   25f24:	muleq	r2, r0, r1
   25f28:	strdeq	r6, [r2], -ip
   25f2c:	andeq	r6, r2, r0, ror r1
   25f30:	andeq	r6, r2, r0, asr r2
   25f34:	ldrdeq	r6, [r2], -ip
   25f38:	andeq	r6, r2, r0, ror #4
   25f3c:	andeq	r6, r2, r0, ror #4
   25f40:	andeq	r6, r2, r0, ror #4
   25f44:	andeq	r6, r2, r0, ror #4
   25f48:	andeq	r6, r2, r0, ror #4
   25f4c:	andeq	r6, r2, r0, ror #4
   25f50:	andeq	r6, r2, r0, ror #4
   25f54:	andeq	r6, r2, r0, ror #4
   25f58:	andeq	r6, r2, r0, ror #4
   25f5c:	andeq	r6, r2, r0, ror #4
   25f60:	andeq	r6, r2, r0, ror #4
   25f64:	andeq	r6, r2, r0, ror #4
   25f68:	andeq	r6, r2, r0, ror #4
   25f6c:	andeq	r6, r2, r0, ror #4
   25f70:	andeq	r6, r2, r0, ror #4
   25f74:	andeq	r6, r2, r0, ror #4
   25f78:	andeq	r6, r2, r0, ror #4
   25f7c:	andeq	r6, r2, r0, ror #4
   25f80:	andeq	r6, r2, r4, lsl #3
   25f84:	andeq	r6, r2, ip, ror #3
   25f88:	andeq	r6, r2, ip, ror #3
   25f8c:	andeq	r6, r2, r4, ror #2
   25f90:	andeq	r6, r2, ip, ror #3
   25f94:	andeq	r6, r2, r8, asr r1
   25f98:	andeq	r6, r2, ip, ror #3
   25f9c:	andeq	r6, r2, r8, asr #3
   25fa0:	andeq	r6, r2, ip, ror #3
   25fa4:	andeq	r6, r2, ip, ror #3
   25fa8:	andeq	r6, r2, ip, ror #3
   25fac:	andeq	r6, r2, r8, asr r1
   25fb0:	andeq	r6, r2, r8, asr r1
   25fb4:	andeq	r6, r2, r8, asr r1
   25fb8:	andeq	r6, r2, r8, asr r1
   25fbc:	andeq	r6, r2, r8, asr r1
   25fc0:	andeq	r6, r2, r8, asr r1
   25fc4:	andeq	r6, r2, r8, asr r1
   25fc8:	andeq	r6, r2, r8, asr r1
   25fcc:	andeq	r6, r2, r8, asr r1
   25fd0:	andeq	r6, r2, r8, asr r1
   25fd4:	andeq	r6, r2, r8, asr r1
   25fd8:	andeq	r6, r2, r8, asr r1
   25fdc:	andeq	r6, r2, r8, asr r1
   25fe0:	andeq	r6, r2, r8, asr r1
   25fe4:	andeq	r6, r2, r8, asr r1
   25fe8:	andeq	r6, r2, r8, asr r1
   25fec:	andeq	r6, r2, ip, ror #3
   25ff0:	andeq	r6, r2, ip, ror #3
   25ff4:	andeq	r6, r2, ip, ror #3
   25ff8:	andeq	r6, r2, ip, ror #3
   25ffc:	andeq	r6, r2, r0, lsr #3
   26000:	andeq	r6, r2, r0, ror #4
   26004:	andeq	r6, r2, r8, asr r1
   26008:	andeq	r6, r2, r8, asr r1
   2600c:	andeq	r6, r2, r8, asr r1
   26010:	andeq	r6, r2, r8, asr r1
   26014:	andeq	r6, r2, r8, asr r1
   26018:	andeq	r6, r2, r8, asr r1
   2601c:	andeq	r6, r2, r8, asr r1
   26020:	andeq	r6, r2, r8, asr r1
   26024:	andeq	r6, r2, r8, asr r1
   26028:	andeq	r6, r2, r8, asr r1
   2602c:	andeq	r6, r2, r8, asr r1
   26030:	andeq	r6, r2, r8, asr r1
   26034:	andeq	r6, r2, r8, asr r1
   26038:	andeq	r6, r2, r8, asr r1
   2603c:	andeq	r6, r2, r8, asr r1
   26040:	andeq	r6, r2, r8, asr r1
   26044:	andeq	r6, r2, r8, asr r1
   26048:	andeq	r6, r2, r8, asr r1
   2604c:	andeq	r6, r2, r8, asr r1
   26050:	andeq	r6, r2, r8, asr r1
   26054:	andeq	r6, r2, r8, asr r1
   26058:	andeq	r6, r2, r8, asr r1
   2605c:	andeq	r6, r2, r8, asr r1
   26060:	andeq	r6, r2, r8, asr r1
   26064:	andeq	r6, r2, r8, asr r1
   26068:	andeq	r6, r2, r8, asr r1
   2606c:	andeq	r6, r2, ip, ror #3
   26070:	andeq	r6, r2, r0, lsr #2
   26074:	andeq	r6, r2, r8, asr r1
   26078:	andeq	r6, r2, ip, ror #3
   2607c:	andeq	r6, r2, r8, asr r1
   26080:	andeq	r6, r2, ip, ror #3
   26084:	andeq	r6, r2, r8, asr r1
   26088:	andeq	r6, r2, r8, asr r1
   2608c:	andeq	r6, r2, r8, asr r1
   26090:	andeq	r6, r2, r8, asr r1
   26094:	andeq	r6, r2, r8, asr r1
   26098:	andeq	r6, r2, r8, asr r1
   2609c:	andeq	r6, r2, r8, asr r1
   260a0:	andeq	r6, r2, r8, asr r1
   260a4:	andeq	r6, r2, r8, asr r1
   260a8:	andeq	r6, r2, r8, asr r1
   260ac:	andeq	r6, r2, r8, asr r1
   260b0:	andeq	r6, r2, r8, asr r1
   260b4:	andeq	r6, r2, r8, asr r1
   260b8:	andeq	r6, r2, r8, asr r1
   260bc:	andeq	r6, r2, r8, asr r1
   260c0:	andeq	r6, r2, r8, asr r1
   260c4:	andeq	r6, r2, r8, asr r1
   260c8:	andeq	r6, r2, r8, asr r1
   260cc:	andeq	r6, r2, r8, asr r1
   260d0:	andeq	r6, r2, r8, asr r1
   260d4:	andeq	r6, r2, r8, asr r1
   260d8:	andeq	r6, r2, r8, asr r1
   260dc:	andeq	r6, r2, r8, asr r1
   260e0:	andeq	r6, r2, r8, asr r1
   260e4:	andeq	r6, r2, r8, asr r1
   260e8:	andeq	r6, r2, r8, asr r1
   260ec:	strdeq	r6, [r2], -ip
   260f0:	andeq	r6, r2, ip, ror #3
   260f4:	strdeq	r6, [r2], -ip
   260f8:	andeq	r6, r2, r4, ror #2
   260fc:	mov	r3, #0
   26100:	cmn	r8, #1
   26104:	str	r3, [sp, #40]	; 0x28
   26108:	bne	25cc8 <_obstack_memory_used@@Base+0xc10>
   2610c:	ldr	r3, [sp, #28]
   26110:	ldrb	r3, [r3, #1]
   26114:	adds	r3, r3, #0
   26118:	movne	r3, #1
   2611c:	b	25cd0 <_obstack_memory_used@@Base+0xc18>
   26120:	mov	r3, #0
   26124:	str	r3, [sp, #40]	; 0x28
   26128:	ldr	r3, [sp, #176]	; 0xb0
   2612c:	cmp	r3, #2
   26130:	bne	25dc0 <_obstack_memory_used@@Base+0xd08>
   26134:	ldr	r3, [sp, #44]	; 0x2c
   26138:	cmp	r3, #0
   2613c:	bne	26a7c <_obstack_memory_used@@Base+0x19c4>
   26140:	mov	r6, r3
   26144:	add	r7, r7, #1
   26148:	mov	r3, fp
   2614c:	mov	r5, #92	; 0x5c
   26150:	b	25b90 <_obstack_memory_used@@Base+0xad8>
   26154:	ldr	r6, [sp, #48]	; 0x30
   26158:	mov	r3, #0
   2615c:	str	r3, [sp, #40]	; 0x28
   26160:	b	25ce4 <_obstack_memory_used@@Base+0xc2c>
   26164:	mov	r3, #0
   26168:	str	r3, [sp, #40]	; 0x28
   2616c:	b	25cd8 <_obstack_memory_used@@Base+0xc20>
   26170:	mov	r3, #0
   26174:	str	r3, [sp, #40]	; 0x28
   26178:	mov	r3, #118	; 0x76
   2617c:	b	25b38 <_obstack_memory_used@@Base+0xa80>
   26180:	ldr	r6, [sp, #48]	; 0x30
   26184:	mov	r3, #0
   26188:	str	r3, [sp, #40]	; 0x28
   2618c:	b	25d24 <_obstack_memory_used@@Base+0xc6c>
   26190:	mov	r3, #0
   26194:	str	r3, [sp, #40]	; 0x28
   26198:	mov	r3, #116	; 0x74
   2619c:	b	25b2c <_obstack_memory_used@@Base+0xa74>
   261a0:	ldr	r3, [sp, #176]	; 0xb0
   261a4:	cmp	r3, #2
   261a8:	beq	266b8 <_obstack_memory_used@@Base+0x1600>
   261ac:	cmp	r3, #5
   261b0:	mov	r3, #0
   261b4:	str	r3, [sp, #40]	; 0x28
   261b8:	beq	25e24 <_obstack_memory_used@@Base+0xd6c>
   261bc:	mov	r6, #0
   261c0:	mov	r5, #63	; 0x3f
   261c4:	b	25ce4 <_obstack_memory_used@@Base+0xc2c>
   261c8:	ldr	r3, [sp, #176]	; 0xb0
   261cc:	cmp	r3, #2
   261d0:	beq	26640 <_obstack_memory_used@@Base+0x1588>
   261d4:	mov	r3, #0
   261d8:	b	25e68 <_obstack_memory_used@@Base+0xdb0>
   261dc:	mov	r3, #0
   261e0:	str	r3, [sp, #40]	; 0x28
   261e4:	mov	r3, #114	; 0x72
   261e8:	b	25b2c <_obstack_memory_used@@Base+0xa74>
   261ec:	mov	r3, #0
   261f0:	mov	r6, r3
   261f4:	str	r3, [sp, #40]	; 0x28
   261f8:	b	25d24 <_obstack_memory_used@@Base+0xc6c>
   261fc:	mov	r3, #0
   26200:	str	r3, [sp, #40]	; 0x28
   26204:	mov	r3, #110	; 0x6e
   26208:	b	25b2c <_obstack_memory_used@@Base+0xa74>
   2620c:	mov	r3, #0
   26210:	str	r3, [sp, #40]	; 0x28
   26214:	mov	r3, #98	; 0x62
   26218:	b	25b38 <_obstack_memory_used@@Base+0xa80>
   2621c:	mov	r3, #0
   26220:	str	r3, [sp, #40]	; 0x28
   26224:	mov	r3, #97	; 0x61
   26228:	b	25b38 <_obstack_memory_used@@Base+0xa80>
   2622c:	ldr	r3, [sp, #60]	; 0x3c
   26230:	cmp	r3, #0
   26234:	bne	26624 <_obstack_memory_used@@Base+0x156c>
   26238:	ldr	r3, [sp, #92]	; 0x5c
   2623c:	cmp	r3, #0
   26240:	addne	r7, r7, #1
   26244:	bne	25444 <_obstack_memory_used@@Base+0x38c>
   26248:	str	r3, [sp, #40]	; 0x28
   2624c:	b	25b44 <_obstack_memory_used@@Base+0xa8c>
   26250:	mov	r3, #0
   26254:	str	r3, [sp, #40]	; 0x28
   26258:	mov	r3, #102	; 0x66
   2625c:	b	25b38 <_obstack_memory_used@@Base+0xa80>
   26260:	mov	r3, #0
   26264:	str	r3, [sp, #40]	; 0x28
   26268:	ldr	r3, [sp, #76]	; 0x4c
   2626c:	cmp	r3, #1
   26270:	bne	266d8 <_obstack_memory_used@@Base+0x1620>
   26274:	bl	11b58 <__ctype_b_loc@plt>
   26278:	ldr	r2, [r0]
   2627c:	sxth	r3, r5
   26280:	lsl	r3, r3, #1
   26284:	ldr	r1, [sp, #76]	; 0x4c
   26288:	ldrh	r3, [r2, r3]
   2628c:	mov	r0, r1
   26290:	and	r3, r3, #16384	; 0x4000
   26294:	cmp	r3, #0
   26298:	ldr	r3, [sp, #60]	; 0x3c
   2629c:	movne	r6, #1
   262a0:	moveq	r6, #0
   262a4:	movne	r2, #0
   262a8:	andeq	r2, r3, #1
   262ac:	cmp	r2, #0
   262b0:	beq	25ce4 <_obstack_memory_used@@Base+0xc2c>
   262b4:	ldr	r2, [sp, #60]	; 0x3c
   262b8:	mov	r6, #0
   262bc:	add	r1, r0, r7
   262c0:	mov	ip, #39	; 0x27
   262c4:	str	r6, [sp, #100]	; 0x64
   262c8:	mov	r0, #0
   262cc:	ldr	lr, [sp, #36]	; 0x24
   262d0:	str	r8, [sp, #36]	; 0x24
   262d4:	ldr	r6, [sp, #40]	; 0x28
   262d8:	ldr	r8, [sp, #44]	; 0x2c
   262dc:	b	2638c <_obstack_memory_used@@Base+0x12d4>
   262e0:	cmp	r8, #0
   262e4:	bne	268c0 <_obstack_memory_used@@Base+0x1808>
   262e8:	ldr	r0, [sp, #52]	; 0x34
   262ec:	eor	r3, fp, #1
   262f0:	ands	r3, r0, r3
   262f4:	beq	26324 <_obstack_memory_used@@Base+0x126c>
   262f8:	cmp	sl, r4
   262fc:	add	r0, r4, #1
   26300:	strbhi	ip, [r9, r4]
   26304:	cmp	sl, r0
   26308:	movhi	fp, #36	; 0x24
   2630c:	strbhi	fp, [r9, r0]
   26310:	add	r0, r4, #2
   26314:	mov	fp, r3
   26318:	cmp	sl, r0
   2631c:	add	r4, r4, #3
   26320:	strbhi	ip, [r9, r0]
   26324:	cmp	sl, r4
   26328:	movhi	r3, #92	; 0x5c
   2632c:	strbhi	r3, [r9, r4]
   26330:	add	r3, r4, #1
   26334:	cmp	sl, r3
   26338:	bls	26348 <_obstack_memory_used@@Base+0x1290>
   2633c:	lsr	r0, r5, #6
   26340:	add	r0, r0, #48	; 0x30
   26344:	strb	r0, [r9, r3]
   26348:	add	r3, r4, #2
   2634c:	cmp	sl, r3
   26350:	bls	26360 <_obstack_memory_used@@Base+0x12a8>
   26354:	ubfx	r0, r5, #3, #3
   26358:	add	r0, r0, #48	; 0x30
   2635c:	strb	r0, [r9, r3]
   26360:	add	r7, r7, #1
   26364:	and	r5, r5, #7
   26368:	cmp	r1, r7
   2636c:	add	r5, r5, #48	; 0x30
   26370:	add	r4, r4, #3
   26374:	bls	268d4 <_obstack_memory_used@@Base+0x181c>
   26378:	mov	r0, r2
   2637c:	cmp	sl, r4
   26380:	strbhi	r5, [r9, r4]
   26384:	add	r4, r4, #1
   26388:	ldrb	r5, [lr, #1]!
   2638c:	cmp	r2, #0
   26390:	bne	262e0 <_obstack_memory_used@@Base+0x1228>
   26394:	eor	r3, r0, #1
   26398:	cmp	r6, #0
   2639c:	and	r3, r3, fp
   263a0:	uxtb	r3, r3
   263a4:	beq	263b8 <_obstack_memory_used@@Base+0x1300>
   263a8:	cmp	sl, r4
   263ac:	movhi	r6, #92	; 0x5c
   263b0:	strbhi	r6, [r9, r4]
   263b4:	add	r4, r4, #1
   263b8:	add	r7, r7, #1
   263bc:	cmp	r7, r1
   263c0:	bcs	268b4 <_obstack_memory_used@@Base+0x17fc>
   263c4:	cmp	r3, #0
   263c8:	beq	268f8 <_obstack_memory_used@@Base+0x1840>
   263cc:	cmp	sl, r4
   263d0:	add	r3, r4, #1
   263d4:	mov	r6, #0
   263d8:	strbhi	ip, [r9, r4]
   263dc:	cmp	sl, r3
   263e0:	add	r4, r4, #2
   263e4:	mov	fp, r6
   263e8:	strbhi	ip, [r9, r3]
   263ec:	b	2637c <_obstack_memory_used@@Base+0x12c4>
   263f0:	ldr	r3, [sp, #36]	; 0x24
   263f4:	ldrb	r5, [r3]
   263f8:	cmp	r5, #126	; 0x7e
   263fc:	ldrls	pc, [pc, r5, lsl #2]
   26400:	b	26260 <_obstack_memory_used@@Base+0x11a8>
   26404:	andeq	r6, r2, r4, lsr #12
   26408:	andeq	r6, r2, r0, ror #4
   2640c:	andeq	r6, r2, r0, ror #4
   26410:	andeq	r6, r2, r0, ror #4
   26414:	andeq	r6, r2, r0, ror #4
   26418:	andeq	r6, r2, r0, ror #4
   2641c:	andeq	r6, r2, r0, ror #4
   26420:	andeq	r5, r2, r8, lsl fp
   26424:	andeq	r5, r2, r0, lsl fp
   26428:	muleq	r2, r0, r1
   2642c:	andeq	r6, r2, r8, lsl r6
   26430:	andeq	r6, r2, r0, ror r1
   26434:			; <UNDEFINED> instruction: 0x000259bc
   26438:	andeq	r6, r2, ip, lsl #12
   2643c:	andeq	r6, r2, r0, ror #4
   26440:	andeq	r6, r2, r0, ror #4
   26444:	andeq	r6, r2, r0, ror #4
   26448:	andeq	r6, r2, r0, ror #4
   2644c:	andeq	r6, r2, r0, ror #4
   26450:	andeq	r6, r2, r0, ror #4
   26454:	andeq	r6, r2, r0, ror #4
   26458:	andeq	r6, r2, r0, ror #4
   2645c:	andeq	r6, r2, r0, ror #4
   26460:	andeq	r6, r2, r0, ror #4
   26464:	andeq	r6, r2, r0, ror #4
   26468:	andeq	r6, r2, r0, ror #4
   2646c:	andeq	r6, r2, r0, ror #4
   26470:	andeq	r6, r2, r0, ror #4
   26474:	andeq	r6, r2, r0, ror #4
   26478:	andeq	r6, r2, r0, ror #4
   2647c:	andeq	r6, r2, r0, ror #4
   26480:	andeq	r6, r2, r0, ror #4
   26484:	andeq	r6, r2, r0, lsl #3
   26488:	andeq	r6, r2, r0, lsl #12
   2648c:	andeq	r6, r2, r0, lsl #12
   26490:	andeq	r6, r2, r4, ror #2
   26494:	andeq	r6, r2, r0, lsl #12
   26498:	andeq	r6, r2, r4, asr r1
   2649c:	andeq	r6, r2, r0, lsl #12
   264a0:	andeq	r6, r2, r8, asr #3
   264a4:	andeq	r6, r2, r0, lsl #12
   264a8:	andeq	r6, r2, r0, lsl #12
   264ac:	andeq	r6, r2, r0, lsl #12
   264b0:	andeq	r6, r2, r4, asr r1
   264b4:	andeq	r6, r2, r4, asr r1
   264b8:	andeq	r6, r2, r4, asr r1
   264bc:	andeq	r6, r2, r4, asr r1
   264c0:	andeq	r6, r2, r4, asr r1
   264c4:	andeq	r6, r2, r4, asr r1
   264c8:	andeq	r6, r2, r4, asr r1
   264cc:	andeq	r6, r2, r4, asr r1
   264d0:	andeq	r6, r2, r4, asr r1
   264d4:	andeq	r6, r2, r4, asr r1
   264d8:	andeq	r6, r2, r4, asr r1
   264dc:	andeq	r6, r2, r4, asr r1
   264e0:	andeq	r6, r2, r4, asr r1
   264e4:	andeq	r6, r2, r4, asr r1
   264e8:	andeq	r6, r2, r4, asr r1
   264ec:	andeq	r6, r2, r4, asr r1
   264f0:	andeq	r6, r2, r0, lsl #12
   264f4:	andeq	r6, r2, r0, lsl #12
   264f8:	andeq	r6, r2, r0, lsl #12
   264fc:	andeq	r6, r2, r0, lsl #12
   26500:	andeq	r6, r2, r0, lsr #3
   26504:	andeq	r6, r2, r0, ror #4
   26508:	andeq	r6, r2, r4, asr r1
   2650c:	andeq	r6, r2, r4, asr r1
   26510:	andeq	r6, r2, r4, asr r1
   26514:	andeq	r6, r2, r4, asr r1
   26518:	andeq	r6, r2, r4, asr r1
   2651c:	andeq	r6, r2, r4, asr r1
   26520:	andeq	r6, r2, r4, asr r1
   26524:	andeq	r6, r2, r4, asr r1
   26528:	andeq	r6, r2, r4, asr r1
   2652c:	andeq	r6, r2, r4, asr r1
   26530:	andeq	r6, r2, r4, asr r1
   26534:	andeq	r6, r2, r4, asr r1
   26538:	andeq	r6, r2, r4, asr r1
   2653c:	andeq	r6, r2, r4, asr r1
   26540:	andeq	r6, r2, r4, asr r1
   26544:	andeq	r6, r2, r4, asr r1
   26548:	andeq	r6, r2, r4, asr r1
   2654c:	andeq	r6, r2, r4, asr r1
   26550:	andeq	r6, r2, r4, asr r1
   26554:	andeq	r6, r2, r4, asr r1
   26558:	andeq	r6, r2, r4, asr r1
   2655c:	andeq	r6, r2, r4, asr r1
   26560:	andeq	r6, r2, r4, asr r1
   26564:	andeq	r6, r2, r4, asr r1
   26568:	andeq	r6, r2, r4, asr r1
   2656c:	andeq	r6, r2, r4, asr r1
   26570:	andeq	r6, r2, r0, lsl #12
   26574:	andeq	r6, r2, r0, lsr #2
   26578:	andeq	r6, r2, r4, asr r1
   2657c:	andeq	r6, r2, r0, lsl #12
   26580:	andeq	r6, r2, r4, asr r1
   26584:	andeq	r6, r2, r0, lsl #12
   26588:	andeq	r6, r2, r4, asr r1
   2658c:	andeq	r6, r2, r4, asr r1
   26590:	andeq	r6, r2, r4, asr r1
   26594:	andeq	r6, r2, r4, asr r1
   26598:	andeq	r6, r2, r4, asr r1
   2659c:	andeq	r6, r2, r4, asr r1
   265a0:	andeq	r6, r2, r4, asr r1
   265a4:	andeq	r6, r2, r4, asr r1
   265a8:	andeq	r6, r2, r4, asr r1
   265ac:	andeq	r6, r2, r4, asr r1
   265b0:	andeq	r6, r2, r4, asr r1
   265b4:	andeq	r6, r2, r4, asr r1
   265b8:	andeq	r6, r2, r4, asr r1
   265bc:	andeq	r6, r2, r4, asr r1
   265c0:	andeq	r6, r2, r4, asr r1
   265c4:	andeq	r6, r2, r4, asr r1
   265c8:	andeq	r6, r2, r4, asr r1
   265cc:	andeq	r6, r2, r4, asr r1
   265d0:	andeq	r6, r2, r4, asr r1
   265d4:	andeq	r6, r2, r4, asr r1
   265d8:	andeq	r6, r2, r4, asr r1
   265dc:	andeq	r6, r2, r4, asr r1
   265e0:	andeq	r6, r2, r4, asr r1
   265e4:	andeq	r6, r2, r4, asr r1
   265e8:	andeq	r6, r2, r4, asr r1
   265ec:	andeq	r6, r2, r4, asr r1
   265f0:	strdeq	r6, [r2], -ip
   265f4:	andeq	r6, r2, r0, lsl #12
   265f8:	strdeq	r6, [r2], -ip
   265fc:	andeq	r6, r2, r4, ror #2
   26600:	mov	r3, #0
   26604:	str	r3, [sp, #40]	; 0x28
   26608:	b	25ce0 <_obstack_memory_used@@Base+0xc28>
   2660c:	mov	r3, #0
   26610:	str	r3, [sp, #40]	; 0x28
   26614:	b	25c78 <_obstack_memory_used@@Base+0xbc0>
   26618:	mov	r3, #0
   2661c:	str	r3, [sp, #40]	; 0x28
   26620:	b	25cac <_obstack_memory_used@@Base+0xbf4>
   26624:	ldr	r3, [sp, #44]	; 0x2c
   26628:	cmp	r3, #0
   2662c:	beq	25bc4 <_obstack_memory_used@@Base+0xb0c>
   26630:	ldr	r3, [sp, #52]	; 0x34
   26634:	mov	fp, r9
   26638:	str	r3, [sp, #60]	; 0x3c
   2663c:	b	25d3c <_obstack_memory_used@@Base+0xc84>
   26640:	ldr	r3, [sp, #44]	; 0x2c
   26644:	cmp	r3, #0
   26648:	bne	26a7c <_obstack_memory_used@@Base+0x19c4>
   2664c:	str	r3, [sp, #40]	; 0x28
   26650:	cmp	sl, #0
   26654:	ldr	r3, [sp, #84]	; 0x54
   26658:	clz	r3, r3
   2665c:	lsr	r3, r3, #5
   26660:	moveq	r3, #0
   26664:	cmp	r3, #0
   26668:	strne	sl, [sp, #84]	; 0x54
   2666c:	movne	sl, #0
   26670:	bne	266a0 <_obstack_memory_used@@Base+0x15e8>
   26674:	cmp	sl, r4
   26678:	movhi	r3, #39	; 0x27
   2667c:	strbhi	r3, [r9, r4]
   26680:	add	r3, r4, #1
   26684:	cmp	sl, r3
   26688:	movhi	r2, #92	; 0x5c
   2668c:	strbhi	r2, [r9, r3]
   26690:	add	r3, r4, #2
   26694:	cmp	sl, r3
   26698:	movhi	r2, #39	; 0x27
   2669c:	strbhi	r2, [r9, r3]
   266a0:	mov	r3, #0
   266a4:	add	r4, r4, #3
   266a8:	str	r6, [sp, #80]	; 0x50
   266ac:	mov	fp, r3
   266b0:	mov	r5, #39	; 0x27
   266b4:	b	25b80 <_obstack_memory_used@@Base+0xac8>
   266b8:	ldr	r3, [sp, #44]	; 0x2c
   266bc:	cmp	r3, #0
   266c0:	bne	26a7c <_obstack_memory_used@@Base+0x19c4>
   266c4:	mov	r6, #0
   266c8:	mov	r5, #63	; 0x3f
   266cc:	str	r3, [sp, #40]	; 0x28
   266d0:	mov	r3, fp
   266d4:	b	25b80 <_obstack_memory_used@@Base+0xac8>
   266d8:	mov	r2, #0
   266dc:	mov	r3, #0
   266e0:	cmn	r8, #1
   266e4:	strd	r2, [sp, #128]	; 0x80
   266e8:	bne	266f8 <_obstack_memory_used@@Base+0x1640>
   266ec:	ldr	r0, [sp, #28]
   266f0:	bl	11b94 <strlen@plt>
   266f4:	mov	r8, r0
   266f8:	str	r9, [sp, #100]	; 0x64
   266fc:	mov	r3, #0
   26700:	strd	sl, [sp, #104]	; 0x68
   26704:	ldr	sl, [sp, #28]
   26708:	str	r5, [sp, #112]	; 0x70
   2670c:	mov	r5, r3
   26710:	ldr	r9, [sp, #68]	; 0x44
   26714:	str	r4, [sp, #116]	; 0x74
   26718:	add	r4, r7, r5
   2671c:	add	r3, sp, #128	; 0x80
   26720:	add	fp, sl, r4
   26724:	sub	r2, r8, r4
   26728:	mov	r1, fp
   2672c:	add	r0, sp, #124	; 0x7c
   26730:	bl	21d6c <__assert_fail@plt+0xfff8>
   26734:	subs	r1, r0, #0
   26738:	beq	26778 <_obstack_memory_used@@Base+0x16c0>
   2673c:	cmn	r1, #1
   26740:	beq	26ad0 <_obstack_memory_used@@Base+0x1a18>
   26744:	cmn	r1, #2
   26748:	beq	26af0 <_obstack_memory_used@@Base+0x1a38>
   2674c:	cmp	r9, #0
   26750:	bne	267a8 <_obstack_memory_used@@Base+0x16f0>
   26754:	ldr	r0, [sp, #124]	; 0x7c
   26758:	add	r5, r5, r1
   2675c:	bl	119f0 <iswprint@plt>
   26760:	cmp	r0, #0
   26764:	add	r0, sp, #128	; 0x80
   26768:	moveq	r6, #0
   2676c:	bl	11948 <mbsinit@plt>
   26770:	cmp	r0, #0
   26774:	beq	26718 <_obstack_memory_used@@Base+0x1660>
   26778:	ldr	r3, [sp, #60]	; 0x3c
   2677c:	add	r9, sp, #100	; 0x64
   26780:	mov	r0, r5
   26784:	ldm	r9, {r9, sl, fp}
   26788:	eor	r2, r6, #1
   2678c:	ldr	r5, [sp, #112]	; 0x70
   26790:	and	r2, r2, r3
   26794:	uxtb	r2, r2
   26798:	ldr	r4, [sp, #116]	; 0x74
   2679c:	cmp	r0, #1
   267a0:	bhi	262bc <_obstack_memory_used@@Base+0x1204>
   267a4:	b	262ac <_obstack_memory_used@@Base+0x11f4>
   267a8:	cmp	r1, #1
   267ac:	beq	26754 <_obstack_memory_used@@Base+0x169c>
   267b0:	add	r2, r4, #1
   267b4:	add	r3, sl, r1
   267b8:	add	r2, sl, r2
   267bc:	add	r4, r3, r4
   267c0:	ldrb	r3, [r2], #1
   267c4:	sub	r3, r3, #91	; 0x5b
   267c8:	cmp	r3, #33	; 0x21
   267cc:	ldrls	pc, [pc, r3, lsl #2]
   267d0:	b	2685c <_obstack_memory_used@@Base+0x17a4>
   267d4:	andeq	r6, r2, r8, ror #16
   267d8:	andeq	r6, r2, r8, ror #16
   267dc:	andeq	r6, r2, ip, asr r8
   267e0:	andeq	r6, r2, r8, ror #16
   267e4:	andeq	r6, r2, ip, asr r8
   267e8:	andeq	r6, r2, r8, ror #16
   267ec:	andeq	r6, r2, ip, asr r8
   267f0:	andeq	r6, r2, ip, asr r8
   267f4:	andeq	r6, r2, ip, asr r8
   267f8:	andeq	r6, r2, ip, asr r8
   267fc:	andeq	r6, r2, ip, asr r8
   26800:	andeq	r6, r2, ip, asr r8
   26804:	andeq	r6, r2, ip, asr r8
   26808:	andeq	r6, r2, ip, asr r8
   2680c:	andeq	r6, r2, ip, asr r8
   26810:	andeq	r6, r2, ip, asr r8
   26814:	andeq	r6, r2, ip, asr r8
   26818:	andeq	r6, r2, ip, asr r8
   2681c:	andeq	r6, r2, ip, asr r8
   26820:	andeq	r6, r2, ip, asr r8
   26824:	andeq	r6, r2, ip, asr r8
   26828:	andeq	r6, r2, ip, asr r8
   2682c:	andeq	r6, r2, ip, asr r8
   26830:	andeq	r6, r2, ip, asr r8
   26834:	andeq	r6, r2, ip, asr r8
   26838:	andeq	r6, r2, ip, asr r8
   2683c:	andeq	r6, r2, ip, asr r8
   26840:	andeq	r6, r2, ip, asr r8
   26844:	andeq	r6, r2, ip, asr r8
   26848:	andeq	r6, r2, ip, asr r8
   2684c:	andeq	r6, r2, ip, asr r8
   26850:	andeq	r6, r2, ip, asr r8
   26854:	andeq	r6, r2, ip, asr r8
   26858:	andeq	r6, r2, r8, ror #16
   2685c:	cmp	r4, r2
   26860:	bne	267c0 <_obstack_memory_used@@Base+0x1708>
   26864:	b	26754 <_obstack_memory_used@@Base+0x169c>
   26868:	mov	r3, #2
   2686c:	ldr	fp, [sp, #100]	; 0x64
   26870:	str	r3, [sp, #176]	; 0xb0
   26874:	ldr	sl, [sp, #104]	; 0x68
   26878:	b	25d3c <_obstack_memory_used@@Base+0xc84>
   2687c:	ldr	r2, [sp, #52]	; 0x34
   26880:	mov	fp, r9
   26884:	ldr	r3, [sp, #60]	; 0x3c
   26888:	and	r3, r3, r2
   2688c:	str	r3, [sp, #60]	; 0x3c
   26890:	b	25d3c <_obstack_memory_used@@Base+0xc84>
   26894:	cmp	sl, r4
   26898:	movhi	r2, fp
   2689c:	bhi	25c14 <_obstack_memory_used@@Base+0xb5c>
   268a0:	mov	r2, r4
   268a4:	b	25c24 <_obstack_memory_used@@Base+0xb6c>
   268a8:	mov	r6, r3
   268ac:	mov	r5, #63	; 0x3f
   268b0:	b	25ce4 <_obstack_memory_used@@Base+0xc2c>
   268b4:	ldr	r8, [sp, #36]	; 0x24
   268b8:	ldr	r6, [sp, #100]	; 0x64
   268bc:	b	25b90 <_obstack_memory_used@@Base+0xad8>
   268c0:	mov	fp, r9
   268c4:	ldr	r8, [sp, #36]	; 0x24
   268c8:	ldr	r3, [sp, #52]	; 0x34
   268cc:	str	r3, [sp, #60]	; 0x3c
   268d0:	b	25d3c <_obstack_memory_used@@Base+0xc84>
   268d4:	ldr	r8, [sp, #36]	; 0x24
   268d8:	ldr	r6, [sp, #100]	; 0x64
   268dc:	b	25a28 <_obstack_memory_used@@Base+0x970>
   268e0:	mov	r3, #0
   268e4:	add	r4, r4, #4
   268e8:	mov	fp, r2
   268ec:	mov	r6, r3
   268f0:	mov	r5, #48	; 0x30
   268f4:	b	25b80 <_obstack_memory_used@@Base+0xac8>
   268f8:	mov	r6, r3
   268fc:	b	2637c <_obstack_memory_used@@Base+0x12c4>
   26900:	mov	r3, #1
   26904:	movw	r2, #656	; 0x290
   26908:	movt	r2, #3
   2690c:	mov	r4, r3
   26910:	mov	r9, sl
   26914:	str	r3, [sp, #32]
   26918:	str	sl, [sp, #44]	; 0x2c
   2691c:	str	r3, [sp, #48]	; 0x30
   26920:	str	sl, [sp, #52]	; 0x34
   26924:	str	r3, [sp, #56]	; 0x38
   26928:	str	r3, [sp, #60]	; 0x3c
   2692c:	str	sl, [sp, #64]	; 0x40
   26930:	str	sl, [sp, #68]	; 0x44
   26934:	str	r2, [sp, #72]	; 0x48
   26938:	str	sl, [sp, #80]	; 0x50
   2693c:	str	sl, [sp, #84]	; 0x54
   26940:	str	sl, [sp, #88]	; 0x58
   26944:	b	25434 <_obstack_memory_used@@Base+0x37c>
   26948:	mov	r3, #0
   2694c:	mov	r5, #48	; 0x30
   26950:	mov	r6, r3
   26954:	b	25b80 <_obstack_memory_used@@Base+0xac8>
   26958:	cmp	sl, r4
   2695c:	mov	r5, #48	; 0x30
   26960:	movhi	r3, #48	; 0x30
   26964:	strbhi	r3, [r9, r4]
   26968:	add	r3, r2, #2
   2696c:	add	r4, r2, #3
   26970:	cmp	sl, r3
   26974:	movhi	r1, #48	; 0x30
   26978:	strbhi	r1, [r9, r3]
   2697c:	mov	r3, #0
   26980:	b	25c5c <_obstack_memory_used@@Base+0xba4>
   26984:	ldr	r3, [sp, #48]	; 0x30
   26988:	str	r3, [sp, #40]	; 0x28
   2698c:	b	26268 <_obstack_memory_used@@Base+0x11b0>
   26990:	ldr	r2, [sp, #28]
   26994:	ldrb	r2, [r2, r3]
   26998:	sub	r1, r2, #33	; 0x21
   2699c:	cmp	r1, #29
   269a0:	ldrls	pc, [pc, r1, lsl #2]
   269a4:	b	25ce0 <_obstack_memory_used@@Base+0xc28>
   269a8:	andeq	r6, r2, r0, lsr #20
   269ac:	andeq	r5, r2, r0, ror #25
   269b0:	andeq	r5, r2, r0, ror #25
   269b4:	andeq	r5, r2, r0, ror #25
   269b8:	andeq	r5, r2, r0, ror #25
   269bc:	andeq	r5, r2, r0, ror #25
   269c0:	andeq	r6, r2, r0, lsr #20
   269c4:	andeq	r6, r2, r0, lsr #20
   269c8:	andeq	r6, r2, r0, lsr #20
   269cc:	andeq	r5, r2, r0, ror #25
   269d0:	andeq	r5, r2, r0, ror #25
   269d4:	andeq	r5, r2, r0, ror #25
   269d8:	andeq	r6, r2, r0, lsr #20
   269dc:	andeq	r5, r2, r0, ror #25
   269e0:	andeq	r6, r2, r0, lsr #20
   269e4:	andeq	r5, r2, r0, ror #25
   269e8:	andeq	r5, r2, r0, ror #25
   269ec:	andeq	r5, r2, r0, ror #25
   269f0:	andeq	r5, r2, r0, ror #25
   269f4:	andeq	r5, r2, r0, ror #25
   269f8:	andeq	r5, r2, r0, ror #25
   269fc:	andeq	r5, r2, r0, ror #25
   26a00:	andeq	r5, r2, r0, ror #25
   26a04:	andeq	r5, r2, r0, ror #25
   26a08:	andeq	r5, r2, r0, ror #25
   26a0c:	andeq	r5, r2, r0, ror #25
   26a10:	andeq	r5, r2, r0, ror #25
   26a14:	andeq	r6, r2, r0, lsr #20
   26a18:	andeq	r6, r2, r0, lsr #20
   26a1c:	andeq	r6, r2, r0, lsr #20
   26a20:	ldr	r1, [sp, #44]	; 0x2c
   26a24:	cmp	r1, #0
   26a28:	bne	26c88 <_obstack_memory_used@@Base+0x1bd0>
   26a2c:	cmp	sl, r4
   26a30:	mov	r7, r3
   26a34:	movhi	r1, #63	; 0x3f
   26a38:	mov	r5, r2
   26a3c:	mov	r3, fp
   26a40:	strbhi	r1, [r9, r4]
   26a44:	add	r1, r4, #1
   26a48:	cmp	sl, r1
   26a4c:	movhi	r0, #34	; 0x22
   26a50:	strbhi	r0, [r9, r1]
   26a54:	add	r1, r4, #2
   26a58:	cmp	sl, r1
   26a5c:	movhi	r0, #34	; 0x22
   26a60:	strbhi	r0, [r9, r1]
   26a64:	add	r1, r4, #3
   26a68:	add	r4, r4, #4
   26a6c:	cmp	sl, r1
   26a70:	movhi	r0, #63	; 0x3f
   26a74:	strbhi	r0, [r9, r1]
   26a78:	b	25c5c <_obstack_memory_used@@Base+0xba4>
   26a7c:	mov	fp, r9
   26a80:	b	25d3c <_obstack_memory_used@@Base+0xc84>
   26a84:	ldr	r3, [sp, #188]	; 0xbc
   26a88:	ldrb	r3, [r3]
   26a8c:	cmp	r3, #0
   26a90:	beq	253cc <_obstack_memory_used@@Base+0x314>
   26a94:	ldr	r2, [sp, #188]	; 0xbc
   26a98:	cmp	sl, r4
   26a9c:	bls	26abc <_obstack_memory_used@@Base+0x1a04>
   26aa0:	strb	r3, [fp, r4]
   26aa4:	add	r4, r4, #1
   26aa8:	ldrb	r3, [r2, #1]!
   26aac:	cmp	r3, #0
   26ab0:	beq	253cc <_obstack_memory_used@@Base+0x314>
   26ab4:	cmp	sl, r4
   26ab8:	bhi	26aa0 <_obstack_memory_used@@Base+0x19e8>
   26abc:	ldrb	r3, [r2, #1]!
   26ac0:	add	r4, r4, #1
   26ac4:	cmp	r3, #0
   26ac8:	bne	26a98 <_obstack_memory_used@@Base+0x19e0>
   26acc:	b	253cc <_obstack_memory_used@@Base+0x314>
   26ad0:	add	r9, sp, #100	; 0x64
   26ad4:	mov	r0, r5
   26ad8:	ldr	r2, [sp, #60]	; 0x3c
   26adc:	mov	r6, #0
   26ae0:	ldm	r9, {r9, sl, fp}
   26ae4:	ldr	r5, [sp, #112]	; 0x70
   26ae8:	ldr	r4, [sp, #116]	; 0x74
   26aec:	b	2679c <_obstack_memory_used@@Base+0x16e4>
   26af0:	cmp	r4, r8
   26af4:	add	r9, sp, #100	; 0x64
   26af8:	mov	r1, r4
   26afc:	mov	r2, fp
   26b00:	ldm	r9, {r9, sl, fp}
   26b04:	mov	r3, r5
   26b08:	mov	r0, r5
   26b0c:	ldr	r5, [sp, #112]	; 0x70
   26b10:	ldr	r4, [sp, #116]	; 0x74
   26b14:	bcs	26b48 <_obstack_memory_used@@Base+0x1a90>
   26b18:	ldrb	r6, [r2]
   26b1c:	cmp	r6, #0
   26b20:	bne	26b34 <_obstack_memory_used@@Base+0x1a7c>
   26b24:	b	26c80 <_obstack_memory_used@@Base+0x1bc8>
   26b28:	ldrb	r6, [r2, #1]!
   26b2c:	cmp	r6, #0
   26b30:	beq	26c18 <_obstack_memory_used@@Base+0x1b60>
   26b34:	add	r3, r3, #1
   26b38:	add	r1, r7, r3
   26b3c:	cmp	r8, r1
   26b40:	bhi	26b28 <_obstack_memory_used@@Base+0x1a70>
   26b44:	mov	r0, r3
   26b48:	mov	r6, #0
   26b4c:	ldr	r2, [sp, #60]	; 0x3c
   26b50:	b	2679c <_obstack_memory_used@@Base+0x16e4>
   26b54:	mov	r3, #1
   26b58:	mov	r4, #0
   26b5c:	mov	r9, r4
   26b60:	str	r3, [sp, #32]
   26b64:	str	r3, [sp, #44]	; 0x2c
   26b68:	str	r3, [sp, #48]	; 0x30
   26b6c:	str	r4, [sp, #52]	; 0x34
   26b70:	str	r3, [sp, #56]	; 0x38
   26b74:	str	r3, [sp, #60]	; 0x3c
   26b78:	str	r3, [sp, #88]	; 0x58
   26b7c:	movw	r3, #656	; 0x290
   26b80:	movt	r3, #3
   26b84:	str	r4, [sp, #64]	; 0x40
   26b88:	str	r4, [sp, #68]	; 0x44
   26b8c:	str	r3, [sp, #72]	; 0x48
   26b90:	str	r4, [sp, #80]	; 0x50
   26b94:	str	r4, [sp, #84]	; 0x54
   26b98:	b	25434 <_obstack_memory_used@@Base+0x37c>
   26b9c:	mov	fp, r9
   26ba0:	b	25d50 <_obstack_memory_used@@Base+0xc98>
   26ba4:	ldr	r3, [sp, #48]	; 0x30
   26ba8:	b	266c4 <_obstack_memory_used@@Base+0x160c>
   26bac:	mov	r2, r3
   26bb0:	ldr	r3, [sp, #72]	; 0x48
   26bb4:	cmp	r3, #0
   26bb8:	moveq	r2, #0
   26bbc:	andne	r2, r2, #1
   26bc0:	cmp	r2, #0
   26bc4:	beq	26bf4 <_obstack_memory_used@@Base+0x1b3c>
   26bc8:	mov	r2, r3
   26bcc:	ldrb	r3, [r3]
   26bd0:	cmp	r3, #0
   26bd4:	beq	26bf4 <_obstack_memory_used@@Base+0x1b3c>
   26bd8:	cmp	sl, r4
   26bdc:	bls	26c04 <_obstack_memory_used@@Base+0x1b4c>
   26be0:	strb	r3, [fp, r4]
   26be4:	add	r4, r4, #1
   26be8:	ldrb	r3, [r2, #1]!
   26bec:	cmp	r3, #0
   26bf0:	bne	26bd8 <_obstack_memory_used@@Base+0x1b20>
   26bf4:	cmp	sl, r4
   26bf8:	movhi	r3, #0
   26bfc:	strbhi	r3, [fp, r4]
   26c00:	b	25d8c <_obstack_memory_used@@Base+0xcd4>
   26c04:	ldrb	r3, [r2, #1]!
   26c08:	add	r4, r4, #1
   26c0c:	cmp	r3, #0
   26c10:	bne	26bd8 <_obstack_memory_used@@Base+0x1b20>
   26c14:	b	26bf4 <_obstack_memory_used@@Base+0x1b3c>
   26c18:	mov	r0, r3
   26c1c:	ldr	r2, [sp, #60]	; 0x3c
   26c20:	b	2679c <_obstack_memory_used@@Base+0x16e4>
   26c24:	mov	ip, #5
   26c28:	mov	r3, r8
   26c2c:	ldr	r1, [sp, #84]	; 0x54
   26c30:	str	ip, [sp]
   26c34:	ldr	r2, [sp, #180]	; 0xb4
   26c38:	ldr	ip, [sp, #188]	; 0xbc
   26c3c:	ldr	r0, [sp, #184]	; 0xb8
   26c40:	str	r2, [sp, #4]
   26c44:	ldr	r2, [sp, #28]
   26c48:	str	ip, [sp, #12]
   26c4c:	ldr	ip, [sp, #192]	; 0xc0
   26c50:	str	r0, [sp, #8]
   26c54:	mov	r0, fp
   26c58:	str	ip, [sp, #16]
   26c5c:	bl	25310 <_obstack_memory_used@@Base+0x258>
   26c60:	mov	r4, r0
   26c64:	b	25d8c <_obstack_memory_used@@Base+0xcd4>
   26c68:	mov	r6, r3
   26c6c:	str	r3, [sp, #40]	; 0x28
   26c70:	b	25cfc <_obstack_memory_used@@Base+0xc44>
   26c74:	mov	r3, #2
   26c78:	str	r3, [sp, #176]	; 0xb0
   26c7c:	b	25d3c <_obstack_memory_used@@Base+0xc84>
   26c80:	ldr	r2, [sp, #60]	; 0x3c
   26c84:	b	2679c <_obstack_memory_used@@Base+0x16e4>
   26c88:	mov	r3, #5
   26c8c:	mov	fp, r9
   26c90:	str	r3, [sp, #176]	; 0xb0
   26c94:	b	25d50 <_obstack_memory_used@@Base+0xc98>
   26c98:	mov	r1, #1
   26c9c:	mov	r9, #0
   26ca0:	mov	r3, r9
   26ca4:	mov	r2, r9
   26ca8:	str	r1, [sp, #32]
   26cac:	str	sl, [sp, #84]	; 0x54
   26cb0:	b	25ad8 <_obstack_memory_used@@Base+0xa20>
   26cb4:	mov	r3, #0
   26cb8:	mov	r2, #1
   26cbc:	mov	r9, r3
   26cc0:	mov	r4, r3
   26cc4:	str	r2, [sp, #32]
   26cc8:	strd	r2, [sp, #44]	; 0x2c
   26ccc:	strd	r2, [sp, #56]	; 0x38
   26cd0:	str	r3, [sp, #80]	; 0x50
   26cd4:	str	r3, [sp, #84]	; 0x54
   26cd8:	str	r3, [sp, #88]	; 0x58
   26cdc:	movw	r3, #676	; 0x2a4
   26ce0:	movt	r3, #3
   26ce4:	str	r2, [sp, #52]	; 0x34
   26ce8:	str	r2, [sp, #64]	; 0x40
   26cec:	str	r2, [sp, #68]	; 0x44
   26cf0:	str	r3, [sp, #72]	; 0x48
   26cf4:	b	25434 <_obstack_memory_used@@Base+0x37c>
   26cf8:	bl	11d2c <abort@plt>
   26cfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26d00:	mov	r4, r0
   26d04:	mov	r5, r3
   26d08:	strd	r6, [sp, #8]
   26d0c:	movw	r7, #4812	; 0x12cc
   26d10:	movt	r7, #4
   26d14:	strd	r8, [sp, #16]
   26d18:	strd	sl, [sp, #24]
   26d1c:	mov	sl, r1
   26d20:	mov	fp, r2
   26d24:	str	lr, [sp, #32]
   26d28:	sub	sp, sp, #60	; 0x3c
   26d2c:	bl	11bb8 <__errno_location@plt>
   26d30:	mov	r8, r0
   26d34:	cmn	r4, #-2147483647	; 0x80000001
   26d38:	ldr	r6, [r7]
   26d3c:	movne	r0, #0
   26d40:	moveq	r0, #1
   26d44:	ldr	r3, [r8]
   26d48:	orrs	r0, r0, r4, lsr #31
   26d4c:	str	r3, [sp, #28]
   26d50:	bne	26ee0 <_obstack_memory_used@@Base+0x1e28>
   26d54:	ldr	r3, [r7, #4]
   26d58:	cmp	r3, r4
   26d5c:	bgt	26dbc <_obstack_memory_used@@Base+0x1d04>
   26d60:	add	r1, r7, #8
   26d64:	sub	r2, r4, r3
   26d68:	str	r3, [sp, #52]	; 0x34
   26d6c:	cmp	r6, r1
   26d70:	add	r2, r2, #1
   26d74:	beq	26eb8 <_obstack_memory_used@@Base+0x1e00>
   26d78:	mov	r1, #8
   26d7c:	mov	r0, r6
   26d80:	mvn	r3, #-2147483648	; 0x80000000
   26d84:	str	r1, [sp]
   26d88:	add	r1, sp, #52	; 0x34
   26d8c:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   26d90:	mov	r6, r0
   26d94:	str	r0, [r7]
   26d98:	ldr	r0, [r7, #4]
   26d9c:	mov	r1, #0
   26da0:	ldr	r2, [sp, #52]	; 0x34
   26da4:	sub	r2, r2, r0
   26da8:	add	r0, r6, r0, lsl #3
   26dac:	lsl	r2, r2, #3
   26db0:	bl	11be8 <memset@plt>
   26db4:	ldr	r3, [sp, #52]	; 0x34
   26db8:	str	r3, [r7, #4]
   26dbc:	ldr	r1, [r5, #4]
   26dc0:	add	r0, r6, r4, lsl #3
   26dc4:	add	ip, r5, #8
   26dc8:	mov	r3, fp
   26dcc:	mov	r2, sl
   26dd0:	ldr	r7, [r0, #4]
   26dd4:	str	r0, [sp, #36]	; 0x24
   26dd8:	str	ip, [sp, #40]	; 0x28
   26ddc:	orr	r0, r1, #1
   26de0:	ldr	r9, [r6, r4, lsl #3]
   26de4:	str	ip, [sp, #8]
   26de8:	ldr	lr, [r5, #44]	; 0x2c
   26dec:	str	r0, [sp, #4]
   26df0:	ldr	ip, [r5]
   26df4:	mov	r1, r9
   26df8:	str	ip, [sp, #32]
   26dfc:	ldr	ip, [r5, #40]	; 0x28
   26e00:	str	ip, [sp, #12]
   26e04:	ldr	ip, [sp, #32]
   26e08:	str	lr, [sp, #16]
   26e0c:	str	r0, [sp, #44]	; 0x2c
   26e10:	mov	r0, r7
   26e14:	str	ip, [sp]
   26e18:	bl	25310 <_obstack_memory_used@@Base+0x258>
   26e1c:	cmp	r9, r0
   26e20:	bhi	26e90 <_obstack_memory_used@@Base+0x1dd8>
   26e24:	add	r9, r0, #1
   26e28:	movw	r3, #9196	; 0x23ec
   26e2c:	movt	r3, #4
   26e30:	cmp	r7, r3
   26e34:	str	r9, [r6, r4, lsl #3]
   26e38:	beq	26e44 <_obstack_memory_used@@Base+0x1d8c>
   26e3c:	mov	r0, r7
   26e40:	bl	1ee98 <__assert_fail@plt+0xd124>
   26e44:	mov	r0, r9
   26e48:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   26e4c:	ldr	ip, [r5]
   26e50:	mov	r3, fp
   26e54:	mov	r2, sl
   26e58:	mov	r1, r9
   26e5c:	mov	r7, r0
   26e60:	ldr	lr, [sp, #36]	; 0x24
   26e64:	ldr	r4, [r5, #40]	; 0x28
   26e68:	str	r0, [lr, #4]
   26e6c:	ldr	lr, [r5, #44]	; 0x2c
   26e70:	str	ip, [sp]
   26e74:	ldr	ip, [sp, #44]	; 0x2c
   26e78:	str	ip, [sp, #4]
   26e7c:	ldr	ip, [sp, #40]	; 0x28
   26e80:	str	r4, [sp, #12]
   26e84:	str	lr, [sp, #16]
   26e88:	str	ip, [sp, #8]
   26e8c:	bl	25310 <_obstack_memory_used@@Base+0x258>
   26e90:	ldr	r3, [sp, #28]
   26e94:	mov	r0, r7
   26e98:	str	r3, [r8]
   26e9c:	add	sp, sp, #60	; 0x3c
   26ea0:	ldrd	r4, [sp]
   26ea4:	ldrd	r6, [sp, #8]
   26ea8:	ldrd	r8, [sp, #16]
   26eac:	ldrd	sl, [sp, #24]
   26eb0:	add	sp, sp, #32
   26eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   26eb8:	mov	r1, #8
   26ebc:	mvn	r3, #-2147483648	; 0x80000000
   26ec0:	str	r1, [sp]
   26ec4:	add	r1, sp, #52	; 0x34
   26ec8:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   26ecc:	ldrd	r2, [r7, #8]
   26ed0:	mov	r6, r0
   26ed4:	str	r0, [r7]
   26ed8:	strd	r2, [r0]
   26edc:	b	26d98 <_obstack_memory_used@@Base+0x1ce0>
   26ee0:	bl	11d2c <abort@plt>
   26ee4:	strd	r4, [sp, #-16]!
   26ee8:	mov	r5, r0
   26eec:	str	r6, [sp, #8]
   26ef0:	str	lr, [sp, #12]
   26ef4:	bl	11bb8 <__errno_location@plt>
   26ef8:	mov	r4, r0
   26efc:	cmp	r5, #0
   26f00:	ldr	r0, [pc, #32]	; 26f28 <_obstack_memory_used@@Base+0x1e70>
   26f04:	mov	r1, #48	; 0x30
   26f08:	movne	r0, r5
   26f0c:	ldr	r6, [r4]
   26f10:	bl	2a21c <_obstack_memory_used@@Base+0x5164>
   26f14:	str	r6, [r4]
   26f18:	ldrd	r4, [sp]
   26f1c:	ldr	r6, [sp, #8]
   26f20:	add	sp, sp, #12
   26f24:	pop	{pc}		; (ldr pc, [sp], #4)
   26f28:	andeq	r2, r4, ip, ror #9
   26f2c:	ldr	r3, [pc, #12]	; 26f40 <_obstack_memory_used@@Base+0x1e88>
   26f30:	cmp	r0, #0
   26f34:	moveq	r0, r3
   26f38:	ldr	r0, [r0]
   26f3c:	bx	lr
   26f40:	andeq	r2, r4, ip, ror #9
   26f44:	ldr	r3, [pc, #12]	; 26f58 <_obstack_memory_used@@Base+0x1ea0>
   26f48:	cmp	r0, #0
   26f4c:	moveq	r0, r3
   26f50:	str	r1, [r0]
   26f54:	bx	lr
   26f58:	andeq	r2, r4, ip, ror #9
   26f5c:	ldr	r3, [pc, #52]	; 26f98 <_obstack_memory_used@@Base+0x1ee0>
   26f60:	cmp	r0, #0
   26f64:	push	{lr}		; (str lr, [sp, #-4]!)
   26f68:	lsr	lr, r1, #5
   26f6c:	and	r1, r1, #31
   26f70:	moveq	r0, r3
   26f74:	add	r3, r0, #8
   26f78:	ldr	ip, [r3, lr, lsl #2]
   26f7c:	lsr	r0, ip, r1
   26f80:	eor	r2, r2, r0
   26f84:	and	r0, r0, #1
   26f88:	and	r2, r2, #1
   26f8c:	eor	r1, ip, r2, lsl r1
   26f90:	str	r1, [r3, lr, lsl #2]
   26f94:	pop	{pc}		; (ldr pc, [sp], #4)
   26f98:	andeq	r2, r4, ip, ror #9
   26f9c:	ldr	r3, [pc, #16]	; 26fb4 <_obstack_memory_used@@Base+0x1efc>
   26fa0:	cmp	r0, #0
   26fa4:	movne	r3, r0
   26fa8:	ldr	r0, [r3, #4]
   26fac:	str	r1, [r3, #4]
   26fb0:	bx	lr
   26fb4:	andeq	r2, r4, ip, ror #9
   26fb8:	ldr	r3, [pc, #48]	; 26ff0 <_obstack_memory_used@@Base+0x1f38>
   26fbc:	cmp	r0, #0
   26fc0:	mov	ip, #10
   26fc4:	moveq	r0, r3
   26fc8:	cmp	r2, #0
   26fcc:	cmpne	r1, #0
   26fd0:	str	ip, [r0]
   26fd4:	beq	26fe4 <_obstack_memory_used@@Base+0x1f2c>
   26fd8:	str	r1, [r0, #40]	; 0x28
   26fdc:	str	r2, [r0, #44]	; 0x2c
   26fe0:	bx	lr
   26fe4:	str	r4, [sp, #-8]!
   26fe8:	str	lr, [sp, #4]
   26fec:	bl	11d2c <abort@plt>
   26ff0:	andeq	r2, r4, ip, ror #9
   26ff4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   26ff8:	strd	r6, [sp, #8]
   26ffc:	mov	r7, r0
   27000:	mov	r6, r1
   27004:	strd	r8, [sp, #16]
   27008:	mov	r8, r2
   2700c:	mov	r9, r3
   27010:	str	lr, [sp, #24]
   27014:	sub	sp, sp, #28
   27018:	ldr	r4, [sp, #56]	; 0x38
   2701c:	ldr	ip, [pc, #104]	; 2708c <_obstack_memory_used@@Base+0x1fd4>
   27020:	cmp	r4, #0
   27024:	moveq	r4, ip
   27028:	bl	11bb8 <__errno_location@plt>
   2702c:	ldr	ip, [r4, #44]	; 0x2c
   27030:	mov	r5, r0
   27034:	mov	r1, r6
   27038:	add	lr, r4, #8
   2703c:	mov	r3, r9
   27040:	ldr	r6, [r5]
   27044:	mov	r2, r8
   27048:	mov	r0, r7
   2704c:	str	ip, [sp, #16]
   27050:	ldr	ip, [r4, #40]	; 0x28
   27054:	str	lr, [sp, #8]
   27058:	str	ip, [sp, #12]
   2705c:	ldr	ip, [r4, #4]
   27060:	str	ip, [sp, #4]
   27064:	ldr	ip, [r4]
   27068:	str	ip, [sp]
   2706c:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27070:	str	r6, [r5]
   27074:	add	sp, sp, #28
   27078:	ldrd	r4, [sp]
   2707c:	ldrd	r6, [sp, #8]
   27080:	ldrd	r8, [sp, #16]
   27084:	add	sp, sp, #24
   27088:	pop	{pc}		; (ldr pc, [sp], #4)
   2708c:	andeq	r2, r4, ip, ror #9
   27090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27094:	cmp	r2, #0
   27098:	ldr	r4, [pc, #192]	; 27160 <_obstack_memory_used@@Base+0x20a8>
   2709c:	movne	r4, r2
   270a0:	strd	r6, [sp, #8]
   270a4:	strd	r8, [sp, #16]
   270a8:	mov	r9, r1
   270ac:	mov	r8, r0
   270b0:	strd	sl, [sp, #24]
   270b4:	str	lr, [sp, #32]
   270b8:	sub	sp, sp, #36	; 0x24
   270bc:	bl	11bb8 <__errno_location@plt>
   270c0:	ldr	r5, [r4, #4]
   270c4:	mov	r6, r0
   270c8:	add	r7, r4, #8
   270cc:	mov	r1, #0
   270d0:	mov	r3, r9
   270d4:	ldr	ip, [r4, #44]	; 0x2c
   270d8:	mov	r2, r8
   270dc:	mov	r0, r1
   270e0:	ldr	sl, [r6]
   270e4:	orr	r5, r5, #1
   270e8:	str	ip, [sp, #16]
   270ec:	ldr	ip, [r4, #40]	; 0x28
   270f0:	stmib	sp, {r5, r7, ip}
   270f4:	ldr	ip, [r4]
   270f8:	str	ip, [sp]
   270fc:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27100:	add	r1, r0, #1
   27104:	mov	r0, r1
   27108:	str	r1, [sp, #28]
   2710c:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   27110:	ldr	ip, [r4, #44]	; 0x2c
   27114:	mov	fp, r0
   27118:	mov	r3, r9
   2711c:	mov	r2, r8
   27120:	ldr	r1, [sp, #28]
   27124:	str	ip, [sp, #16]
   27128:	ldr	ip, [r4, #40]	; 0x28
   2712c:	stmib	sp, {r5, r7, ip}
   27130:	ldr	ip, [r4]
   27134:	str	ip, [sp]
   27138:	bl	25310 <_obstack_memory_used@@Base+0x258>
   2713c:	mov	r0, fp
   27140:	str	sl, [r6]
   27144:	add	sp, sp, #36	; 0x24
   27148:	ldrd	r4, [sp]
   2714c:	ldrd	r6, [sp, #8]
   27150:	ldrd	r8, [sp, #16]
   27154:	ldrd	sl, [sp, #24]
   27158:	add	sp, sp, #32
   2715c:	pop	{pc}		; (ldr pc, [sp], #4)
   27160:	andeq	r2, r4, ip, ror #9
   27164:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27168:	cmp	r3, #0
   2716c:	ldr	r4, [pc, #220]	; 27250 <_obstack_memory_used@@Base+0x2198>
   27170:	movne	r4, r3
   27174:	strd	r6, [sp, #8]
   27178:	mov	r6, r2
   2717c:	strd	r8, [sp, #16]
   27180:	mov	r9, r0
   27184:	strd	sl, [sp, #24]
   27188:	mov	sl, r1
   2718c:	str	lr, [sp, #32]
   27190:	sub	sp, sp, #44	; 0x2c
   27194:	bl	11bb8 <__errno_location@plt>
   27198:	ldr	r5, [r4, #4]
   2719c:	mov	r7, r0
   271a0:	mov	r1, #0
   271a4:	add	r8, r4, #8
   271a8:	mov	r3, sl
   271ac:	ldr	ip, [r4, #44]	; 0x2c
   271b0:	mov	r2, r9
   271b4:	mov	r0, r1
   271b8:	ldr	lr, [r7]
   271bc:	cmp	r6, r1
   271c0:	orreq	r5, r5, #1
   271c4:	str	ip, [sp, #16]
   271c8:	ldr	ip, [r4, #40]	; 0x28
   271cc:	stmib	sp, {r5, r8, ip}
   271d0:	ldr	ip, [r4]
   271d4:	str	lr, [sp, #28]
   271d8:	str	ip, [sp]
   271dc:	bl	25310 <_obstack_memory_used@@Base+0x258>
   271e0:	add	r1, r0, #1
   271e4:	mov	fp, r0
   271e8:	mov	r0, r1
   271ec:	str	r1, [sp, #36]	; 0x24
   271f0:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   271f4:	ldr	ip, [r4, #44]	; 0x2c
   271f8:	mov	r3, sl
   271fc:	mov	r2, r9
   27200:	ldr	r1, [sp, #36]	; 0x24
   27204:	str	ip, [sp, #16]
   27208:	ldr	ip, [r4, #40]	; 0x28
   2720c:	str	r0, [sp, #32]
   27210:	stmib	sp, {r5, r8, ip}
   27214:	ldr	ip, [r4]
   27218:	str	ip, [sp]
   2721c:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27220:	ldr	lr, [sp, #28]
   27224:	cmp	r6, #0
   27228:	ldr	r0, [sp, #32]
   2722c:	str	lr, [r7]
   27230:	strne	fp, [r6]
   27234:	add	sp, sp, #44	; 0x2c
   27238:	ldrd	r4, [sp]
   2723c:	ldrd	r6, [sp, #8]
   27240:	ldrd	r8, [sp, #16]
   27244:	ldrd	sl, [sp, #24]
   27248:	add	sp, sp, #32
   2724c:	pop	{pc}		; (ldr pc, [sp], #4)
   27250:	andeq	r2, r4, ip, ror #9
   27254:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27258:	movw	r5, #4812	; 0x12cc
   2725c:	movt	r5, #4
   27260:	ldr	r3, [r5, #4]
   27264:	strd	r6, [sp, #8]
   27268:	str	r8, [sp, #16]
   2726c:	str	lr, [sp, #20]
   27270:	ldr	r7, [r5]
   27274:	cmp	r3, #1
   27278:	ble	2729c <_obstack_memory_used@@Base+0x21e4>
   2727c:	mov	r4, #1
   27280:	add	r6, r7, #4
   27284:	ldr	r0, [r6, r4, lsl #3]
   27288:	add	r4, r4, #1
   2728c:	bl	1ee98 <__assert_fail@plt+0xd124>
   27290:	ldr	r3, [r5, #4]
   27294:	cmp	r3, r4
   27298:	bgt	27284 <_obstack_memory_used@@Base+0x21cc>
   2729c:	ldr	r0, [r7, #4]
   272a0:	movw	r4, #9196	; 0x23ec
   272a4:	movt	r4, #4
   272a8:	cmp	r0, r4
   272ac:	beq	272c0 <_obstack_memory_used@@Base+0x2208>
   272b0:	bl	1ee98 <__assert_fail@plt+0xd124>
   272b4:	mov	r3, #256	; 0x100
   272b8:	str	r3, [r5, #8]
   272bc:	str	r4, [r5, #12]
   272c0:	ldr	r4, [pc, #44]	; 272f4 <_obstack_memory_used@@Base+0x223c>
   272c4:	cmp	r7, r4
   272c8:	beq	272d8 <_obstack_memory_used@@Base+0x2220>
   272cc:	mov	r0, r7
   272d0:	bl	1ee98 <__assert_fail@plt+0xd124>
   272d4:	str	r4, [r5]
   272d8:	mov	r3, #1
   272dc:	ldrd	r6, [sp, #8]
   272e0:	str	r3, [r5, #4]
   272e4:	ldrd	r4, [sp]
   272e8:	ldr	r8, [sp, #16]
   272ec:	add	sp, sp, #20
   272f0:	pop	{pc}		; (ldr pc, [sp], #4)
   272f4:	ldrdeq	r1, [r4], -r4
   272f8:	ldr	r3, [pc, #4]	; 27304 <_obstack_memory_used@@Base+0x224c>
   272fc:	mvn	r2, #0
   27300:	b	26cfc <_obstack_memory_used@@Base+0x1c44>
   27304:	andeq	r2, r4, ip, ror #9
   27308:	ldr	r3, [pc]	; 27310 <_obstack_memory_used@@Base+0x2258>
   2730c:	b	26cfc <_obstack_memory_used@@Base+0x1c44>
   27310:	andeq	r2, r4, ip, ror #9
   27314:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27318:	movw	r4, #4812	; 0x12cc
   2731c:	movt	r4, #4
   27320:	strd	r6, [sp, #8]
   27324:	strd	r8, [sp, #16]
   27328:	strd	sl, [sp, #24]
   2732c:	mov	sl, r0
   27330:	str	lr, [sp, #32]
   27334:	sub	sp, sp, #44	; 0x2c
   27338:	bl	11bb8 <__errno_location@plt>
   2733c:	ldr	r3, [r0]
   27340:	mov	r8, r0
   27344:	ldr	r2, [r4, #4]
   27348:	ldr	r5, [r4]
   2734c:	str	r3, [sp, #28]
   27350:	cmp	r2, #0
   27354:	bgt	273b0 <_obstack_memory_used@@Base+0x22f8>
   27358:	add	r3, r4, #8
   2735c:	str	r2, [sp, #36]	; 0x24
   27360:	rsb	r2, r2, #1
   27364:	cmp	r5, r3
   27368:	beq	2747c <_obstack_memory_used@@Base+0x23c4>
   2736c:	mov	r1, #8
   27370:	mov	r0, r5
   27374:	mvn	r3, #-2147483648	; 0x80000000
   27378:	str	r1, [sp]
   2737c:	add	r1, sp, #36	; 0x24
   27380:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   27384:	mov	r5, r0
   27388:	str	r0, [r4]
   2738c:	ldr	r0, [r4, #4]
   27390:	mov	r1, #0
   27394:	ldr	r2, [sp, #36]	; 0x24
   27398:	sub	r2, r2, r0
   2739c:	add	r0, r5, r0, lsl #3
   273a0:	lsl	r2, r2, #3
   273a4:	bl	11be8 <memset@plt>
   273a8:	ldr	r3, [sp, #36]	; 0x24
   273ac:	str	r3, [r4, #4]
   273b0:	movw	r4, #9196	; 0x23ec
   273b4:	movt	r4, #4
   273b8:	ldr	r9, [r5]
   273bc:	add	fp, r4, #264	; 0x108
   273c0:	mvn	r3, #0
   273c4:	ldr	r7, [r4, #260]	; 0x104
   273c8:	mov	r2, sl
   273cc:	ldr	r6, [r5, #4]
   273d0:	str	fp, [sp, #8]
   273d4:	mov	r1, r9
   273d8:	ldr	ip, [r4, #256]	; 0x100
   273dc:	orr	r7, r7, #1
   273e0:	ldr	lr, [r4, #300]	; 0x12c
   273e4:	mov	r0, r6
   273e8:	str	ip, [sp]
   273ec:	str	r7, [sp, #4]
   273f0:	str	lr, [sp, #16]
   273f4:	ldr	ip, [r4, #296]	; 0x128
   273f8:	str	ip, [sp, #12]
   273fc:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27400:	cmp	r9, r0
   27404:	bhi	27454 <_obstack_memory_used@@Base+0x239c>
   27408:	add	r9, r0, #1
   2740c:	cmp	r6, r4
   27410:	str	r9, [r5]
   27414:	beq	27420 <_obstack_memory_used@@Base+0x2368>
   27418:	mov	r0, r6
   2741c:	bl	1ee98 <__assert_fail@plt+0xd124>
   27420:	mov	r0, r9
   27424:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   27428:	ldr	r3, [r4, #256]	; 0x100
   2742c:	mov	r2, sl
   27430:	mov	r1, r9
   27434:	mov	r6, r0
   27438:	ldr	lr, [r4, #296]	; 0x128
   2743c:	ldr	ip, [r4, #300]	; 0x12c
   27440:	str	r0, [r5, #4]
   27444:	stm	sp, {r3, r7, fp, lr}
   27448:	mvn	r3, #0
   2744c:	str	ip, [sp, #16]
   27450:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27454:	ldr	r3, [sp, #28]
   27458:	mov	r0, r6
   2745c:	str	r3, [r8]
   27460:	add	sp, sp, #44	; 0x2c
   27464:	ldrd	r4, [sp]
   27468:	ldrd	r6, [sp, #8]
   2746c:	ldrd	r8, [sp, #16]
   27470:	ldrd	sl, [sp, #24]
   27474:	add	sp, sp, #32
   27478:	pop	{pc}		; (ldr pc, [sp], #4)
   2747c:	mov	r0, #8
   27480:	mvn	r3, #-2147483648	; 0x80000000
   27484:	add	r1, sp, #36	; 0x24
   27488:	str	r0, [sp]
   2748c:	mov	r0, #0
   27490:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   27494:	ldrd	r2, [r4, #8]
   27498:	mov	r5, r0
   2749c:	str	r0, [r4]
   274a0:	strd	r2, [r0]
   274a4:	b	2738c <_obstack_memory_used@@Base+0x22d4>
   274a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   274ac:	movw	r4, #4812	; 0x12cc
   274b0:	movt	r4, #4
   274b4:	strd	r6, [sp, #8]
   274b8:	strd	r8, [sp, #16]
   274bc:	strd	sl, [sp, #24]
   274c0:	mov	sl, r0
   274c4:	mov	fp, r1
   274c8:	str	lr, [sp, #32]
   274cc:	sub	sp, sp, #44	; 0x2c
   274d0:	bl	11bb8 <__errno_location@plt>
   274d4:	ldr	r3, [r0]
   274d8:	mov	r8, r0
   274dc:	ldr	r2, [r4, #4]
   274e0:	ldr	r5, [r4]
   274e4:	str	r3, [sp, #28]
   274e8:	cmp	r2, #0
   274ec:	bgt	27548 <_obstack_memory_used@@Base+0x2490>
   274f0:	add	r3, r4, #8
   274f4:	str	r2, [sp, #36]	; 0x24
   274f8:	rsb	r2, r2, #1
   274fc:	cmp	r5, r3
   27500:	beq	27624 <_obstack_memory_used@@Base+0x256c>
   27504:	mov	r1, #8
   27508:	mov	r0, r5
   2750c:	mvn	r3, #-2147483648	; 0x80000000
   27510:	str	r1, [sp]
   27514:	add	r1, sp, #36	; 0x24
   27518:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   2751c:	mov	r5, r0
   27520:	str	r0, [r4]
   27524:	ldr	r0, [r4, #4]
   27528:	mov	r1, #0
   2752c:	ldr	r2, [sp, #36]	; 0x24
   27530:	sub	r2, r2, r0
   27534:	add	r0, r5, r0, lsl #3
   27538:	lsl	r2, r2, #3
   2753c:	bl	11be8 <memset@plt>
   27540:	ldr	r3, [sp, #36]	; 0x24
   27544:	str	r3, [r4, #4]
   27548:	movw	r4, #9196	; 0x23ec
   2754c:	movt	r4, #4
   27550:	ldr	r9, [r5]
   27554:	add	r0, r4, #264	; 0x108
   27558:	mov	r3, fp
   2755c:	ldr	r7, [r4, #260]	; 0x104
   27560:	mov	r2, sl
   27564:	ldr	r6, [r5, #4]
   27568:	str	r0, [sp, #8]
   2756c:	mov	r1, r9
   27570:	ldr	ip, [r4, #256]	; 0x100
   27574:	orr	r7, r7, #1
   27578:	ldr	lr, [r4, #300]	; 0x12c
   2757c:	mov	r0, r6
   27580:	str	ip, [sp]
   27584:	str	r7, [sp, #4]
   27588:	str	lr, [sp, #16]
   2758c:	ldr	ip, [r4, #296]	; 0x128
   27590:	str	ip, [sp, #12]
   27594:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27598:	cmp	r9, r0
   2759c:	bhi	275fc <_obstack_memory_used@@Base+0x2544>
   275a0:	add	r9, r0, #1
   275a4:	cmp	r6, r4
   275a8:	str	r9, [r5]
   275ac:	beq	275b8 <_obstack_memory_used@@Base+0x2500>
   275b0:	mov	r0, r6
   275b4:	bl	1ee98 <__assert_fail@plt+0xd124>
   275b8:	mov	r0, r9
   275bc:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   275c0:	ldr	ip, [r4, #256]	; 0x100
   275c4:	mov	r1, r9
   275c8:	mov	r3, fp
   275cc:	mov	r2, sl
   275d0:	mov	r6, r0
   275d4:	ldr	r9, [r4, #296]	; 0x128
   275d8:	ldr	lr, [r4, #300]	; 0x12c
   275dc:	str	r0, [r5, #4]
   275e0:	str	ip, [sp]
   275e4:	ldr	ip, [pc, #100]	; 27650 <_obstack_memory_used@@Base+0x2598>
   275e8:	str	r7, [sp, #4]
   275ec:	str	ip, [sp, #8]
   275f0:	str	r9, [sp, #12]
   275f4:	str	lr, [sp, #16]
   275f8:	bl	25310 <_obstack_memory_used@@Base+0x258>
   275fc:	ldr	r3, [sp, #28]
   27600:	mov	r0, r6
   27604:	str	r3, [r8]
   27608:	add	sp, sp, #44	; 0x2c
   2760c:	ldrd	r4, [sp]
   27610:	ldrd	r6, [sp, #8]
   27614:	ldrd	r8, [sp, #16]
   27618:	ldrd	sl, [sp, #24]
   2761c:	add	sp, sp, #32
   27620:	pop	{pc}		; (ldr pc, [sp], #4)
   27624:	mov	r0, #8
   27628:	mvn	r3, #-2147483648	; 0x80000000
   2762c:	add	r1, sp, #36	; 0x24
   27630:	str	r0, [sp]
   27634:	mov	r0, #0
   27638:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   2763c:	ldrd	r2, [r4, #8]
   27640:	mov	r5, r0
   27644:	str	r0, [r4]
   27648:	strd	r2, [r0]
   2764c:	b	27524 <_obstack_memory_used@@Base+0x246c>
   27650:	strdeq	r2, [r4], -r4
   27654:	strd	r4, [sp, #-20]!	; 0xffffffec
   27658:	mov	r4, #0
   2765c:	mov	r5, #0
   27660:	strd	r6, [sp, #8]
   27664:	cmp	r1, #10
   27668:	str	lr, [sp, #16]
   2766c:	sub	sp, sp, #100	; 0x64
   27670:	strd	r4, [sp, #48]	; 0x30
   27674:	beq	276bc <_obstack_memory_used@@Base+0x2604>
   27678:	mov	r3, sp
   2767c:	strd	r4, [sp, #8]
   27680:	str	r1, [sp, #48]	; 0x30
   27684:	mov	r1, r2
   27688:	mvn	r2, #0
   2768c:	ldrd	r6, [sp, #48]	; 0x30
   27690:	strd	r6, [sp]
   27694:	strd	r4, [sp, #16]
   27698:	strd	r4, [sp, #24]
   2769c:	strd	r4, [sp, #32]
   276a0:	strd	r4, [sp, #40]	; 0x28
   276a4:	bl	26cfc <_obstack_memory_used@@Base+0x1c44>
   276a8:	add	sp, sp, #100	; 0x64
   276ac:	ldrd	r4, [sp]
   276b0:	ldrd	r6, [sp, #8]
   276b4:	add	sp, sp, #16
   276b8:	pop	{pc}		; (ldr pc, [sp], #4)
   276bc:	bl	11d2c <abort@plt>
   276c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   276c4:	mov	r4, #0
   276c8:	mov	r5, #0
   276cc:	strd	r6, [sp, #8]
   276d0:	cmp	r1, #10
   276d4:	str	lr, [sp, #16]
   276d8:	sub	sp, sp, #100	; 0x64
   276dc:	strd	r4, [sp, #48]	; 0x30
   276e0:	beq	2772c <_obstack_memory_used@@Base+0x2674>
   276e4:	mov	ip, r2
   276e8:	mov	r2, r3
   276ec:	strd	r4, [sp, #8]
   276f0:	str	r1, [sp, #48]	; 0x30
   276f4:	mov	r3, sp
   276f8:	mov	r1, ip
   276fc:	ldrd	r6, [sp, #48]	; 0x30
   27700:	strd	r6, [sp]
   27704:	strd	r4, [sp, #16]
   27708:	strd	r4, [sp, #24]
   2770c:	strd	r4, [sp, #32]
   27710:	strd	r4, [sp, #40]	; 0x28
   27714:	bl	26cfc <_obstack_memory_used@@Base+0x1c44>
   27718:	add	sp, sp, #100	; 0x64
   2771c:	ldrd	r4, [sp]
   27720:	ldrd	r6, [sp, #8]
   27724:	add	sp, sp, #16
   27728:	pop	{pc}		; (ldr pc, [sp], #4)
   2772c:	bl	11d2c <abort@plt>
   27730:	mov	r2, #0
   27734:	mov	r3, #0
   27738:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2773c:	strd	r6, [sp, #8]
   27740:	cmp	r0, #10
   27744:	strd	r8, [sp, #16]
   27748:	strd	sl, [sp, #24]
   2774c:	str	lr, [sp, #32]
   27750:	sub	sp, sp, #124	; 0x7c
   27754:	strd	r2, [sp, #72]	; 0x48
   27758:	strd	r2, [sp, #80]	; 0x50
   2775c:	strd	r2, [sp, #88]	; 0x58
   27760:	strd	r2, [sp, #96]	; 0x60
   27764:	strd	r2, [sp, #104]	; 0x68
   27768:	strd	r2, [sp, #112]	; 0x70
   2776c:	beq	27910 <_obstack_memory_used@@Base+0x2858>
   27770:	mov	r6, r1
   27774:	movw	r4, #4812	; 0x12cc
   27778:	movt	r4, #4
   2777c:	str	r0, [sp, #72]	; 0x48
   27780:	ldrd	r0, [sp, #72]	; 0x48
   27784:	strd	r0, [sp, #24]
   27788:	strd	r2, [sp, #32]
   2778c:	strd	r2, [sp, #40]	; 0x28
   27790:	strd	r2, [sp, #48]	; 0x30
   27794:	strd	r2, [sp, #56]	; 0x38
   27798:	strd	r2, [sp, #64]	; 0x40
   2779c:	bl	11bb8 <__errno_location@plt>
   277a0:	mov	r8, r0
   277a4:	ldr	r5, [r4]
   277a8:	ldr	r2, [r4, #4]
   277ac:	ldr	r9, [r0]
   277b0:	cmp	r2, #0
   277b4:	bgt	27810 <_obstack_memory_used@@Base+0x2758>
   277b8:	add	r3, r4, #8
   277bc:	str	r2, [sp, #72]	; 0x48
   277c0:	rsb	r2, r2, #1
   277c4:	cmp	r5, r3
   277c8:	beq	278e4 <_obstack_memory_used@@Base+0x282c>
   277cc:	mov	r3, #8
   277d0:	mov	r0, r5
   277d4:	add	r1, sp, #72	; 0x48
   277d8:	str	r3, [sp]
   277dc:	mvn	r3, #-2147483648	; 0x80000000
   277e0:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   277e4:	mov	r5, r0
   277e8:	str	r0, [r4]
   277ec:	ldr	r0, [r4, #4]
   277f0:	mov	r1, #0
   277f4:	ldr	r2, [sp, #72]	; 0x48
   277f8:	sub	r2, r2, r0
   277fc:	add	r0, r5, r0, lsl #3
   27800:	lsl	r2, r2, #3
   27804:	bl	11be8 <memset@plt>
   27808:	ldr	r3, [sp, #72]	; 0x48
   2780c:	str	r3, [r4, #4]
   27810:	ldr	sl, [r5]
   27814:	add	r0, sp, #32
   27818:	mvn	r3, #0
   2781c:	mov	r2, r6
   27820:	ldr	r7, [sp, #28]
   27824:	ldr	r4, [r5, #4]
   27828:	mov	r1, sl
   2782c:	str	r0, [sp, #8]
   27830:	ldr	lr, [sp, #24]
   27834:	orr	r7, r7, #1
   27838:	ldr	ip, [sp, #64]	; 0x40
   2783c:	mov	r0, r4
   27840:	ldr	fp, [sp, #68]	; 0x44
   27844:	str	lr, [sp]
   27848:	str	r7, [sp, #4]
   2784c:	str	ip, [sp, #12]
   27850:	str	fp, [sp, #16]
   27854:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27858:	cmp	sl, r0
   2785c:	bhi	278c0 <_obstack_memory_used@@Base+0x2808>
   27860:	add	sl, r0, #1
   27864:	movw	r3, #9196	; 0x23ec
   27868:	movt	r3, #4
   2786c:	cmp	r4, r3
   27870:	str	sl, [r5]
   27874:	beq	27880 <_obstack_memory_used@@Base+0x27c8>
   27878:	mov	r0, r4
   2787c:	bl	1ee98 <__assert_fail@plt+0xd124>
   27880:	mov	r0, sl
   27884:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   27888:	ldr	r3, [sp, #24]
   2788c:	mov	r2, r6
   27890:	mov	r1, sl
   27894:	mov	r4, r0
   27898:	ldr	lr, [sp, #64]	; 0x40
   2789c:	ldr	ip, [sp, #68]	; 0x44
   278a0:	str	r0, [r5, #4]
   278a4:	add	r5, sp, #32
   278a8:	stm	sp, {r3, r7}
   278ac:	mvn	r3, #0
   278b0:	str	r5, [sp, #8]
   278b4:	str	lr, [sp, #12]
   278b8:	str	ip, [sp, #16]
   278bc:	bl	25310 <_obstack_memory_used@@Base+0x258>
   278c0:	mov	r0, r4
   278c4:	str	r9, [r8]
   278c8:	add	sp, sp, #124	; 0x7c
   278cc:	ldrd	r4, [sp]
   278d0:	ldrd	r6, [sp, #8]
   278d4:	ldrd	r8, [sp, #16]
   278d8:	ldrd	sl, [sp, #24]
   278dc:	add	sp, sp, #32
   278e0:	pop	{pc}		; (ldr pc, [sp], #4)
   278e4:	mov	r0, #8
   278e8:	mvn	r3, #-2147483648	; 0x80000000
   278ec:	add	r1, sp, #72	; 0x48
   278f0:	str	r0, [sp]
   278f4:	mov	r0, #0
   278f8:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   278fc:	ldrd	r2, [r4, #8]
   27900:	mov	r5, r0
   27904:	str	r0, [r4]
   27908:	strd	r2, [r0]
   2790c:	b	277ec <_obstack_memory_used@@Base+0x2734>
   27910:	bl	11d2c <abort@plt>
   27914:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27918:	cmp	r0, #10
   2791c:	strd	r6, [sp, #8]
   27920:	mov	r6, #0
   27924:	mov	r7, #0
   27928:	strd	r8, [sp, #16]
   2792c:	strd	sl, [sp, #24]
   27930:	str	lr, [sp, #32]
   27934:	sub	sp, sp, #124	; 0x7c
   27938:	strd	r6, [sp, #72]	; 0x48
   2793c:	strd	r6, [sp, #80]	; 0x50
   27940:	strd	r6, [sp, #88]	; 0x58
   27944:	strd	r6, [sp, #96]	; 0x60
   27948:	strd	r6, [sp, #104]	; 0x68
   2794c:	strd	r6, [sp, #112]	; 0x70
   27950:	beq	27afc <_obstack_memory_used@@Base+0x2a44>
   27954:	mov	sl, r2
   27958:	movw	r5, #4812	; 0x12cc
   2795c:	movt	r5, #4
   27960:	str	r0, [sp, #72]	; 0x48
   27964:	mov	r9, r1
   27968:	ldrd	r2, [sp, #72]	; 0x48
   2796c:	strd	r2, [sp, #24]
   27970:	strd	r6, [sp, #32]
   27974:	strd	r6, [sp, #40]	; 0x28
   27978:	strd	r6, [sp, #48]	; 0x30
   2797c:	strd	r6, [sp, #56]	; 0x38
   27980:	strd	r6, [sp, #64]	; 0x40
   27984:	bl	11bb8 <__errno_location@plt>
   27988:	mov	r7, r0
   2798c:	ldr	r4, [r5]
   27990:	ldr	r2, [r5, #4]
   27994:	ldr	fp, [r0]
   27998:	cmp	r2, #0
   2799c:	bgt	279f8 <_obstack_memory_used@@Base+0x2940>
   279a0:	add	r3, r5, #8
   279a4:	str	r2, [sp, #72]	; 0x48
   279a8:	rsb	r2, r2, #1
   279ac:	cmp	r4, r3
   279b0:	beq	27ad0 <_obstack_memory_used@@Base+0x2a18>
   279b4:	mov	r3, #8
   279b8:	mov	r0, r4
   279bc:	add	r1, sp, #72	; 0x48
   279c0:	str	r3, [sp]
   279c4:	mvn	r3, #-2147483648	; 0x80000000
   279c8:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   279cc:	mov	r4, r0
   279d0:	str	r0, [r5]
   279d4:	ldr	r0, [r5, #4]
   279d8:	mov	r1, #0
   279dc:	ldr	r2, [sp, #72]	; 0x48
   279e0:	sub	r2, r2, r0
   279e4:	add	r0, r4, r0, lsl #3
   279e8:	lsl	r2, r2, #3
   279ec:	bl	11be8 <memset@plt>
   279f0:	ldr	r3, [sp, #72]	; 0x48
   279f4:	str	r3, [r5, #4]
   279f8:	ldr	ip, [sp, #24]
   279fc:	add	r0, sp, #32
   27a00:	mov	r3, sl
   27a04:	mov	r2, r9
   27a08:	ldr	r6, [sp, #28]
   27a0c:	ldr	r8, [r4]
   27a10:	ldr	r5, [r4, #4]
   27a14:	str	ip, [sp]
   27a18:	orr	r6, r6, #1
   27a1c:	ldr	ip, [sp, #64]	; 0x40
   27a20:	mov	r1, r8
   27a24:	str	r6, [sp, #4]
   27a28:	ldr	lr, [sp, #68]	; 0x44
   27a2c:	str	r0, [sp, #8]
   27a30:	mov	r0, r5
   27a34:	str	ip, [sp, #12]
   27a38:	str	lr, [sp, #16]
   27a3c:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27a40:	cmp	r8, r0
   27a44:	bhi	27aac <_obstack_memory_used@@Base+0x29f4>
   27a48:	add	r8, r0, #1
   27a4c:	movw	r3, #9196	; 0x23ec
   27a50:	movt	r3, #4
   27a54:	cmp	r5, r3
   27a58:	str	r8, [r4]
   27a5c:	beq	27a68 <_obstack_memory_used@@Base+0x29b0>
   27a60:	mov	r0, r5
   27a64:	bl	1ee98 <__assert_fail@plt+0xd124>
   27a68:	mov	r0, r8
   27a6c:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   27a70:	ldr	lr, [sp, #24]
   27a74:	mov	r1, r8
   27a78:	mov	r3, sl
   27a7c:	mov	r2, r9
   27a80:	mov	r5, r0
   27a84:	ldr	r8, [sp, #64]	; 0x40
   27a88:	ldr	ip, [sp, #68]	; 0x44
   27a8c:	str	r0, [r4, #4]
   27a90:	str	lr, [sp]
   27a94:	add	lr, sp, #32
   27a98:	str	r6, [sp, #4]
   27a9c:	str	lr, [sp, #8]
   27aa0:	str	r8, [sp, #12]
   27aa4:	str	ip, [sp, #16]
   27aa8:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27aac:	mov	r0, r5
   27ab0:	str	fp, [r7]
   27ab4:	add	sp, sp, #124	; 0x7c
   27ab8:	ldrd	r4, [sp]
   27abc:	ldrd	r6, [sp, #8]
   27ac0:	ldrd	r8, [sp, #16]
   27ac4:	ldrd	sl, [sp, #24]
   27ac8:	add	sp, sp, #32
   27acc:	pop	{pc}		; (ldr pc, [sp], #4)
   27ad0:	mov	r0, #8
   27ad4:	mvn	r3, #-2147483648	; 0x80000000
   27ad8:	add	r1, sp, #72	; 0x48
   27adc:	str	r0, [sp]
   27ae0:	mov	r0, #0
   27ae4:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   27ae8:	ldrd	r2, [r5, #8]
   27aec:	mov	r4, r0
   27af0:	str	r0, [r5]
   27af4:	strd	r2, [r0]
   27af8:	b	279d4 <_obstack_memory_used@@Base+0x291c>
   27afc:	bl	11d2c <abort@plt>
   27b00:	ldr	r3, [pc, #492]	; 27cf4 <_obstack_memory_used@@Base+0x2c3c>
   27b04:	lsr	ip, r2, #5
   27b08:	and	r2, r2, #31
   27b0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27b10:	movw	r5, #4812	; 0x12cc
   27b14:	movt	r5, #4
   27b18:	strd	r6, [sp, #8]
   27b1c:	strd	r8, [sp, #16]
   27b20:	strd	sl, [sp, #24]
   27b24:	mov	sl, r0
   27b28:	mov	fp, r1
   27b2c:	ldrd	r0, [r3]
   27b30:	str	lr, [sp, #32]
   27b34:	sub	sp, sp, #92	; 0x5c
   27b38:	ldrd	r8, [r3, #8]
   27b3c:	add	r6, sp, #48	; 0x30
   27b40:	strd	r0, [sp, #40]	; 0x28
   27b44:	ldrd	r0, [r3, #16]
   27b48:	strd	r8, [sp, #48]	; 0x30
   27b4c:	ldrd	r8, [r3, #24]
   27b50:	strd	r0, [sp, #56]	; 0x38
   27b54:	ldrd	r0, [r3, #32]
   27b58:	strd	r8, [sp, #64]	; 0x40
   27b5c:	ldrd	r8, [r3, #40]	; 0x28
   27b60:	strd	r0, [sp, #72]	; 0x48
   27b64:	strd	r8, [sp, #80]	; 0x50
   27b68:	ldr	r3, [r6, ip, lsl #2]
   27b6c:	mvn	r1, r3, lsr r2
   27b70:	and	r1, r1, #1
   27b74:	eor	r2, r3, r1, lsl r2
   27b78:	str	r2, [r6, ip, lsl #2]
   27b7c:	bl	11bb8 <__errno_location@plt>
   27b80:	ldr	r3, [r0]
   27b84:	mov	r8, r0
   27b88:	ldr	r2, [r5, #4]
   27b8c:	ldr	r4, [r5]
   27b90:	str	r3, [sp, #28]
   27b94:	cmp	r2, #0
   27b98:	bgt	27bf4 <_obstack_memory_used@@Base+0x2b3c>
   27b9c:	add	r3, r5, #8
   27ba0:	str	r2, [sp, #36]	; 0x24
   27ba4:	rsb	r2, r2, #1
   27ba8:	cmp	r4, r3
   27bac:	beq	27cc8 <_obstack_memory_used@@Base+0x2c10>
   27bb0:	mov	r1, #8
   27bb4:	mov	r0, r4
   27bb8:	mvn	r3, #-2147483648	; 0x80000000
   27bbc:	str	r1, [sp]
   27bc0:	add	r1, sp, #36	; 0x24
   27bc4:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   27bc8:	mov	r4, r0
   27bcc:	str	r0, [r5]
   27bd0:	ldr	r0, [r5, #4]
   27bd4:	mov	r1, #0
   27bd8:	ldr	r2, [sp, #36]	; 0x24
   27bdc:	sub	r2, r2, r0
   27be0:	add	r0, r4, r0, lsl #3
   27be4:	lsl	r2, r2, #3
   27be8:	bl	11be8 <memset@plt>
   27bec:	ldr	r3, [sp, #36]	; 0x24
   27bf0:	str	r3, [r5, #4]
   27bf4:	ldr	ip, [sp, #40]	; 0x28
   27bf8:	mov	r3, fp
   27bfc:	mov	r2, sl
   27c00:	ldr	r7, [sp, #44]	; 0x2c
   27c04:	ldr	r9, [r4]
   27c08:	ldr	r5, [r4, #4]
   27c0c:	str	ip, [sp]
   27c10:	orr	r7, r7, #1
   27c14:	ldr	ip, [sp, #80]	; 0x50
   27c18:	mov	r1, r9
   27c1c:	str	r7, [sp, #4]
   27c20:	ldr	lr, [sp, #84]	; 0x54
   27c24:	mov	r0, r5
   27c28:	str	r6, [sp, #8]
   27c2c:	str	ip, [sp, #12]
   27c30:	str	lr, [sp, #16]
   27c34:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27c38:	cmp	r9, r0
   27c3c:	bhi	27ca0 <_obstack_memory_used@@Base+0x2be8>
   27c40:	add	r9, r0, #1
   27c44:	movw	r3, #9196	; 0x23ec
   27c48:	movt	r3, #4
   27c4c:	cmp	r5, r3
   27c50:	str	r9, [r4]
   27c54:	beq	27c60 <_obstack_memory_used@@Base+0x2ba8>
   27c58:	mov	r0, r5
   27c5c:	bl	1ee98 <__assert_fail@plt+0xd124>
   27c60:	mov	r0, r9
   27c64:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   27c68:	mov	r1, r9
   27c6c:	ldr	ip, [sp, #40]	; 0x28
   27c70:	mov	r3, fp
   27c74:	mov	r2, sl
   27c78:	mov	r5, r0
   27c7c:	ldr	r9, [sp, #80]	; 0x50
   27c80:	ldr	lr, [sp, #84]	; 0x54
   27c84:	str	r0, [r4, #4]
   27c88:	str	ip, [sp]
   27c8c:	str	r7, [sp, #4]
   27c90:	str	r6, [sp, #8]
   27c94:	str	r9, [sp, #12]
   27c98:	str	lr, [sp, #16]
   27c9c:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27ca0:	ldr	r3, [sp, #28]
   27ca4:	mov	r0, r5
   27ca8:	str	r3, [r8]
   27cac:	add	sp, sp, #92	; 0x5c
   27cb0:	ldrd	r4, [sp]
   27cb4:	ldrd	r6, [sp, #8]
   27cb8:	ldrd	r8, [sp, #16]
   27cbc:	ldrd	sl, [sp, #24]
   27cc0:	add	sp, sp, #32
   27cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   27cc8:	mov	r0, #8
   27ccc:	mvn	r3, #-2147483648	; 0x80000000
   27cd0:	add	r1, sp, #36	; 0x24
   27cd4:	str	r0, [sp]
   27cd8:	mov	r0, #0
   27cdc:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   27ce0:	ldrd	r2, [r5, #8]
   27ce4:	mov	r4, r0
   27ce8:	str	r0, [r5]
   27cec:	strd	r2, [r0]
   27cf0:	b	27bd0 <_obstack_memory_used@@Base+0x2b18>
   27cf4:	andeq	r2, r4, ip, ror #9
   27cf8:	ldr	ip, [pc, #476]	; 27edc <_obstack_memory_used@@Base+0x2e24>
   27cfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27d00:	movw	r4, #4812	; 0x12cc
   27d04:	movt	r4, #4
   27d08:	ldrd	r2, [ip, #8]
   27d0c:	strd	r6, [sp, #8]
   27d10:	lsr	r7, r1, #5
   27d14:	mov	r6, r0
   27d18:	strd	r8, [sp, #16]
   27d1c:	str	lr, [sp, #32]
   27d20:	and	lr, r1, #31
   27d24:	ldrd	r0, [ip]
   27d28:	strd	sl, [sp, #24]
   27d2c:	sub	sp, sp, #84	; 0x54
   27d30:	add	r5, sp, #40	; 0x28
   27d34:	strd	r0, [sp, #32]
   27d38:	strd	r2, [sp, #40]	; 0x28
   27d3c:	ldrd	r0, [ip, #16]
   27d40:	ldrd	r2, [ip, #24]
   27d44:	strd	r0, [sp, #48]	; 0x30
   27d48:	ldrd	r0, [ip, #32]
   27d4c:	strd	r2, [sp, #56]	; 0x38
   27d50:	ldrd	r2, [ip, #40]	; 0x28
   27d54:	strd	r0, [sp, #64]	; 0x40
   27d58:	strd	r2, [sp, #72]	; 0x48
   27d5c:	ldr	r1, [r5, r7, lsl #2]
   27d60:	mvn	r3, r1, lsr lr
   27d64:	and	r3, r3, #1
   27d68:	eor	r1, r1, r3, lsl lr
   27d6c:	str	r1, [r5, r7, lsl #2]
   27d70:	bl	11bb8 <__errno_location@plt>
   27d74:	mov	r9, r0
   27d78:	ldr	sl, [r0]
   27d7c:	ldr	r2, [r4, #4]
   27d80:	ldr	r7, [r4]
   27d84:	cmp	r2, #0
   27d88:	bgt	27de4 <_obstack_memory_used@@Base+0x2d2c>
   27d8c:	add	r3, r4, #8
   27d90:	str	r2, [sp, #28]
   27d94:	rsb	r2, r2, #1
   27d98:	cmp	r7, r3
   27d9c:	beq	27eb0 <_obstack_memory_used@@Base+0x2df8>
   27da0:	mov	r1, #8
   27da4:	mov	r0, r7
   27da8:	mvn	r3, #-2147483648	; 0x80000000
   27dac:	str	r1, [sp]
   27db0:	add	r1, sp, #28
   27db4:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   27db8:	mov	r7, r0
   27dbc:	str	r0, [r4]
   27dc0:	ldr	r0, [r4, #4]
   27dc4:	mov	r1, #0
   27dc8:	ldr	r2, [sp, #28]
   27dcc:	sub	r2, r2, r0
   27dd0:	add	r0, r7, r0, lsl #3
   27dd4:	lsl	r2, r2, #3
   27dd8:	bl	11be8 <memset@plt>
   27ddc:	ldr	r3, [sp, #28]
   27de0:	str	r3, [r4, #4]
   27de4:	ldr	ip, [sp, #32]
   27de8:	mvn	r3, #0
   27dec:	mov	r2, r6
   27df0:	ldr	r8, [sp, #36]	; 0x24
   27df4:	ldr	fp, [r7]
   27df8:	ldr	r4, [r7, #4]
   27dfc:	str	ip, [sp]
   27e00:	orr	r8, r8, #1
   27e04:	ldr	ip, [sp, #72]	; 0x48
   27e08:	mov	r1, fp
   27e0c:	str	r8, [sp, #4]
   27e10:	ldr	lr, [sp, #76]	; 0x4c
   27e14:	mov	r0, r4
   27e18:	str	r5, [sp, #8]
   27e1c:	str	ip, [sp, #12]
   27e20:	str	lr, [sp, #16]
   27e24:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27e28:	cmp	fp, r0
   27e2c:	bhi	27e8c <_obstack_memory_used@@Base+0x2dd4>
   27e30:	add	fp, r0, #1
   27e34:	movw	r3, #9196	; 0x23ec
   27e38:	movt	r3, #4
   27e3c:	cmp	r4, r3
   27e40:	str	fp, [r7]
   27e44:	beq	27e50 <_obstack_memory_used@@Base+0x2d98>
   27e48:	mov	r0, r4
   27e4c:	bl	1ee98 <__assert_fail@plt+0xd124>
   27e50:	mov	r0, fp
   27e54:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   27e58:	ldr	r3, [sp, #32]
   27e5c:	mov	r2, r6
   27e60:	mov	r1, fp
   27e64:	mov	r4, r0
   27e68:	ldr	lr, [sp, #72]	; 0x48
   27e6c:	ldr	ip, [sp, #76]	; 0x4c
   27e70:	str	r0, [r7, #4]
   27e74:	stm	sp, {r3, r8}
   27e78:	mvn	r3, #0
   27e7c:	str	r5, [sp, #8]
   27e80:	str	lr, [sp, #12]
   27e84:	str	ip, [sp, #16]
   27e88:	bl	25310 <_obstack_memory_used@@Base+0x258>
   27e8c:	mov	r0, r4
   27e90:	str	sl, [r9]
   27e94:	add	sp, sp, #84	; 0x54
   27e98:	ldrd	r4, [sp]
   27e9c:	ldrd	r6, [sp, #8]
   27ea0:	ldrd	r8, [sp, #16]
   27ea4:	ldrd	sl, [sp, #24]
   27ea8:	add	sp, sp, #32
   27eac:	pop	{pc}		; (ldr pc, [sp], #4)
   27eb0:	mov	r0, #8
   27eb4:	mvn	r3, #-2147483648	; 0x80000000
   27eb8:	add	r1, sp, #28
   27ebc:	str	r0, [sp]
   27ec0:	mov	r0, #0
   27ec4:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   27ec8:	ldrd	r2, [r4, #8]
   27ecc:	mov	r7, r0
   27ed0:	str	r0, [r4]
   27ed4:	strd	r2, [r0]
   27ed8:	b	27dc0 <_obstack_memory_used@@Base+0x2d08>
   27edc:	andeq	r2, r4, ip, ror #9
   27ee0:	ldr	ip, [pc, #472]	; 280c0 <_obstack_memory_used@@Base+0x3008>
   27ee4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27ee8:	mov	r5, r0
   27eec:	movw	r4, #4812	; 0x12cc
   27ef0:	movt	r4, #4
   27ef4:	ldrd	r2, [ip]
   27ef8:	ldrd	r0, [ip, #8]
   27efc:	strd	r6, [sp, #8]
   27f00:	strd	r8, [sp, #16]
   27f04:	strd	sl, [sp, #24]
   27f08:	str	lr, [sp, #32]
   27f0c:	sub	sp, sp, #84	; 0x54
   27f10:	strd	r2, [sp, #32]
   27f14:	strd	r0, [sp, #40]	; 0x28
   27f18:	ldr	r6, [sp, #44]	; 0x2c
   27f1c:	ldrd	r2, [ip, #16]
   27f20:	ldrd	r0, [ip, #24]
   27f24:	mvn	lr, r6
   27f28:	and	lr, lr, #67108864	; 0x4000000
   27f2c:	eor	lr, lr, r6
   27f30:	ldrd	r6, [ip, #40]	; 0x28
   27f34:	strd	r2, [sp, #48]	; 0x30
   27f38:	ldrd	r2, [ip, #32]
   27f3c:	str	lr, [sp, #44]	; 0x2c
   27f40:	strd	r0, [sp, #56]	; 0x38
   27f44:	strd	r2, [sp, #64]	; 0x40
   27f48:	strd	r6, [sp, #72]	; 0x48
   27f4c:	bl	11bb8 <__errno_location@plt>
   27f50:	mov	r8, r0
   27f54:	ldr	r9, [r0]
   27f58:	ldr	r2, [r4, #4]
   27f5c:	ldr	r6, [r4]
   27f60:	cmp	r2, #0
   27f64:	bgt	27fc0 <_obstack_memory_used@@Base+0x2f08>
   27f68:	add	r3, r4, #8
   27f6c:	str	r2, [sp, #28]
   27f70:	rsb	r2, r2, #1
   27f74:	cmp	r6, r3
   27f78:	beq	28094 <_obstack_memory_used@@Base+0x2fdc>
   27f7c:	mov	r1, #8
   27f80:	mov	r0, r6
   27f84:	mvn	r3, #-2147483648	; 0x80000000
   27f88:	str	r1, [sp]
   27f8c:	add	r1, sp, #28
   27f90:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   27f94:	mov	r6, r0
   27f98:	str	r0, [r4]
   27f9c:	ldr	r0, [r4, #4]
   27fa0:	mov	r1, #0
   27fa4:	ldr	r2, [sp, #28]
   27fa8:	sub	r2, r2, r0
   27fac:	add	r0, r6, r0, lsl #3
   27fb0:	lsl	r2, r2, #3
   27fb4:	bl	11be8 <memset@plt>
   27fb8:	ldr	r3, [sp, #28]
   27fbc:	str	r3, [r4, #4]
   27fc0:	ldr	sl, [r6]
   27fc4:	add	r0, sp, #40	; 0x28
   27fc8:	mvn	r3, #0
   27fcc:	mov	r2, r5
   27fd0:	ldr	r7, [sp, #36]	; 0x24
   27fd4:	ldr	r4, [r6, #4]
   27fd8:	mov	r1, sl
   27fdc:	str	r0, [sp, #8]
   27fe0:	ldr	lr, [sp, #32]
   27fe4:	orr	r7, r7, #1
   27fe8:	ldr	ip, [sp, #72]	; 0x48
   27fec:	mov	r0, r4
   27ff0:	ldr	fp, [sp, #76]	; 0x4c
   27ff4:	str	lr, [sp]
   27ff8:	str	r7, [sp, #4]
   27ffc:	str	ip, [sp, #12]
   28000:	str	fp, [sp, #16]
   28004:	bl	25310 <_obstack_memory_used@@Base+0x258>
   28008:	cmp	sl, r0
   2800c:	bhi	28070 <_obstack_memory_used@@Base+0x2fb8>
   28010:	add	sl, r0, #1
   28014:	movw	r3, #9196	; 0x23ec
   28018:	movt	r3, #4
   2801c:	cmp	r4, r3
   28020:	str	sl, [r6]
   28024:	beq	28030 <_obstack_memory_used@@Base+0x2f78>
   28028:	mov	r0, r4
   2802c:	bl	1ee98 <__assert_fail@plt+0xd124>
   28030:	mov	r0, sl
   28034:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   28038:	ldr	r3, [sp, #32]
   2803c:	mov	r2, r5
   28040:	add	r5, sp, #40	; 0x28
   28044:	mov	r1, sl
   28048:	mov	r4, r0
   2804c:	ldr	lr, [sp, #72]	; 0x48
   28050:	ldr	ip, [sp, #76]	; 0x4c
   28054:	str	r0, [r6, #4]
   28058:	stm	sp, {r3, r7}
   2805c:	mvn	r3, #0
   28060:	str	r5, [sp, #8]
   28064:	str	lr, [sp, #12]
   28068:	str	ip, [sp, #16]
   2806c:	bl	25310 <_obstack_memory_used@@Base+0x258>
   28070:	mov	r0, r4
   28074:	str	r9, [r8]
   28078:	add	sp, sp, #84	; 0x54
   2807c:	ldrd	r4, [sp]
   28080:	ldrd	r6, [sp, #8]
   28084:	ldrd	r8, [sp, #16]
   28088:	ldrd	sl, [sp, #24]
   2808c:	add	sp, sp, #32
   28090:	pop	{pc}		; (ldr pc, [sp], #4)
   28094:	mov	r0, #8
   28098:	mvn	r3, #-2147483648	; 0x80000000
   2809c:	add	r1, sp, #28
   280a0:	str	r0, [sp]
   280a4:	mov	r0, #0
   280a8:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   280ac:	ldrd	r2, [r4, #8]
   280b0:	mov	r6, r0
   280b4:	str	r0, [r4]
   280b8:	strd	r2, [r0]
   280bc:	b	27f9c <_obstack_memory_used@@Base+0x2ee4>
   280c0:	andeq	r2, r4, ip, ror #9
   280c4:	ldr	ip, [pc, #480]	; 282ac <_obstack_memory_used@@Base+0x31f4>
   280c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   280cc:	mov	r5, r0
   280d0:	movw	r4, #4812	; 0x12cc
   280d4:	movt	r4, #4
   280d8:	ldrd	r2, [ip]
   280dc:	strd	r6, [sp, #8]
   280e0:	mov	r6, r1
   280e4:	ldrd	r0, [ip, #8]
   280e8:	strd	r8, [sp, #16]
   280ec:	strd	sl, [sp, #24]
   280f0:	str	lr, [sp, #32]
   280f4:	sub	sp, sp, #84	; 0x54
   280f8:	ldrd	r8, [ip, #40]	; 0x28
   280fc:	strd	r2, [sp, #32]
   28100:	strd	r0, [sp, #40]	; 0x28
   28104:	ldrd	r2, [ip, #16]
   28108:	ldr	r7, [sp, #44]	; 0x2c
   2810c:	ldrd	r0, [ip, #24]
   28110:	strd	r2, [sp, #48]	; 0x30
   28114:	ldrd	r2, [ip, #32]
   28118:	mvn	lr, r7
   2811c:	and	lr, lr, #67108864	; 0x4000000
   28120:	eor	lr, lr, r7
   28124:	str	lr, [sp, #44]	; 0x2c
   28128:	strd	r0, [sp, #56]	; 0x38
   2812c:	strd	r2, [sp, #64]	; 0x40
   28130:	strd	r8, [sp, #72]	; 0x48
   28134:	bl	11bb8 <__errno_location@plt>
   28138:	mov	r9, r0
   2813c:	ldr	sl, [r0]
   28140:	ldr	r2, [r4, #4]
   28144:	ldr	r7, [r4]
   28148:	cmp	r2, #0
   2814c:	bgt	281a8 <_obstack_memory_used@@Base+0x30f0>
   28150:	add	r3, r4, #8
   28154:	str	r2, [sp, #28]
   28158:	rsb	r2, r2, #1
   2815c:	cmp	r7, r3
   28160:	beq	28280 <_obstack_memory_used@@Base+0x31c8>
   28164:	mov	r1, #8
   28168:	mov	r0, r7
   2816c:	mvn	r3, #-2147483648	; 0x80000000
   28170:	str	r1, [sp]
   28174:	add	r1, sp, #28
   28178:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   2817c:	mov	r7, r0
   28180:	str	r0, [r4]
   28184:	ldr	r0, [r4, #4]
   28188:	mov	r1, #0
   2818c:	ldr	r2, [sp, #28]
   28190:	sub	r2, r2, r0
   28194:	add	r0, r7, r0, lsl #3
   28198:	lsl	r2, r2, #3
   2819c:	bl	11be8 <memset@plt>
   281a0:	ldr	r3, [sp, #28]
   281a4:	str	r3, [r4, #4]
   281a8:	ldr	ip, [sp, #32]
   281ac:	add	r0, sp, #40	; 0x28
   281b0:	mov	r3, r6
   281b4:	mov	r2, r5
   281b8:	ldr	r8, [sp, #36]	; 0x24
   281bc:	ldr	fp, [r7]
   281c0:	ldr	r4, [r7, #4]
   281c4:	str	ip, [sp]
   281c8:	orr	r8, r8, #1
   281cc:	ldr	ip, [sp, #72]	; 0x48
   281d0:	mov	r1, fp
   281d4:	str	r8, [sp, #4]
   281d8:	ldr	lr, [sp, #76]	; 0x4c
   281dc:	str	r0, [sp, #8]
   281e0:	mov	r0, r4
   281e4:	str	ip, [sp, #12]
   281e8:	str	lr, [sp, #16]
   281ec:	bl	25310 <_obstack_memory_used@@Base+0x258>
   281f0:	cmp	fp, r0
   281f4:	bhi	2825c <_obstack_memory_used@@Base+0x31a4>
   281f8:	add	fp, r0, #1
   281fc:	movw	r3, #9196	; 0x23ec
   28200:	movt	r3, #4
   28204:	cmp	r4, r3
   28208:	str	fp, [r7]
   2820c:	beq	28218 <_obstack_memory_used@@Base+0x3160>
   28210:	mov	r0, r4
   28214:	bl	1ee98 <__assert_fail@plt+0xd124>
   28218:	mov	r0, fp
   2821c:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   28220:	ldr	lr, [sp, #32]
   28224:	mov	r2, r5
   28228:	mov	r3, r6
   2822c:	mov	r1, fp
   28230:	mov	r4, r0
   28234:	ldr	r5, [sp, #72]	; 0x48
   28238:	ldr	ip, [sp, #76]	; 0x4c
   2823c:	str	r0, [r7, #4]
   28240:	str	lr, [sp]
   28244:	add	lr, sp, #40	; 0x28
   28248:	str	r8, [sp, #4]
   2824c:	str	lr, [sp, #8]
   28250:	str	r5, [sp, #12]
   28254:	str	ip, [sp, #16]
   28258:	bl	25310 <_obstack_memory_used@@Base+0x258>
   2825c:	mov	r0, r4
   28260:	str	sl, [r9]
   28264:	add	sp, sp, #84	; 0x54
   28268:	ldrd	r4, [sp]
   2826c:	ldrd	r6, [sp, #8]
   28270:	ldrd	r8, [sp, #16]
   28274:	ldrd	sl, [sp, #24]
   28278:	add	sp, sp, #32
   2827c:	pop	{pc}		; (ldr pc, [sp], #4)
   28280:	mov	r0, #8
   28284:	mvn	r3, #-2147483648	; 0x80000000
   28288:	add	r1, sp, #28
   2828c:	str	r0, [sp]
   28290:	mov	r0, #0
   28294:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   28298:	ldrd	r2, [r4, #8]
   2829c:	mov	r7, r0
   282a0:	str	r0, [r4]
   282a4:	strd	r2, [r0]
   282a8:	b	28184 <_obstack_memory_used@@Base+0x30cc>
   282ac:	andeq	r2, r4, ip, ror #9
   282b0:	strd	r4, [sp, #-12]!
   282b4:	mov	r4, #0
   282b8:	mov	r5, #0
   282bc:	str	lr, [sp, #8]
   282c0:	sub	sp, sp, #100	; 0x64
   282c4:	cmp	r1, #10
   282c8:	strd	r4, [sp]
   282cc:	strd	r4, [sp, #8]
   282d0:	strd	r4, [sp, #16]
   282d4:	strd	r4, [sp, #24]
   282d8:	strd	r4, [sp, #32]
   282dc:	strd	r4, [sp, #40]	; 0x28
   282e0:	beq	28310 <_obstack_memory_used@@Base+0x3258>
   282e4:	mov	ip, #67108864	; 0x4000000
   282e8:	mov	r3, sp
   282ec:	str	r1, [sp]
   282f0:	mov	r1, r2
   282f4:	mvn	r2, #0
   282f8:	str	ip, [sp, #12]
   282fc:	bl	26cfc <_obstack_memory_used@@Base+0x1c44>
   28300:	add	sp, sp, #100	; 0x64
   28304:	ldrd	r4, [sp]
   28308:	add	sp, sp, #8
   2830c:	pop	{pc}		; (ldr pc, [sp], #4)
   28310:	bl	11d2c <abort@plt>
   28314:	ldr	ip, [pc, #156]	; 283b8 <_obstack_memory_used@@Base+0x3300>
   28318:	cmp	r2, #0
   2831c:	cmpne	r1, #0
   28320:	strd	r4, [sp, #-32]!	; 0xffffffe0
   28324:	strd	r6, [sp, #8]
   28328:	mov	r6, r2
   2832c:	str	r8, [sp, #16]
   28330:	mov	r8, r3
   28334:	strd	sl, [sp, #20]
   28338:	ldrd	r4, [ip]
   2833c:	str	lr, [sp, #28]
   28340:	sub	sp, sp, #48	; 0x30
   28344:	mov	lr, #10
   28348:	ldrd	r2, [ip, #8]
   2834c:	ldrd	sl, [ip, #16]
   28350:	strd	r4, [sp]
   28354:	ldrd	r4, [ip, #32]
   28358:	str	lr, [sp]
   2835c:	strd	r2, [sp, #8]
   28360:	strd	sl, [sp, #16]
   28364:	ldrd	r2, [ip, #24]
   28368:	ldrd	sl, [ip, #40]	; 0x28
   2836c:	strd	r2, [sp, #24]
   28370:	strd	r4, [sp, #32]
   28374:	strd	sl, [sp, #40]	; 0x28
   28378:	beq	283b4 <_obstack_memory_used@@Base+0x32fc>
   2837c:	mov	r7, r1
   28380:	mov	r3, sp
   28384:	mov	r1, r8
   28388:	mvn	r2, #0
   2838c:	str	r7, [sp, #40]	; 0x28
   28390:	str	r6, [sp, #44]	; 0x2c
   28394:	bl	26cfc <_obstack_memory_used@@Base+0x1c44>
   28398:	add	sp, sp, #48	; 0x30
   2839c:	ldrd	r4, [sp]
   283a0:	ldrd	r6, [sp, #8]
   283a4:	ldr	r8, [sp, #16]
   283a8:	ldrd	sl, [sp, #20]
   283ac:	add	sp, sp, #28
   283b0:	pop	{pc}		; (ldr pc, [sp], #4)
   283b4:	bl	11d2c <abort@plt>
   283b8:	andeq	r2, r4, ip, ror #9
   283bc:	ldr	ip, [pc, #156]	; 28460 <_obstack_memory_used@@Base+0x33a8>
   283c0:	cmp	r2, #0
   283c4:	cmpne	r1, #0
   283c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   283cc:	strd	r6, [sp, #8]
   283d0:	mov	r6, r2
   283d4:	str	r8, [sp, #16]
   283d8:	mov	r8, r3
   283dc:	strd	sl, [sp, #20]
   283e0:	ldrd	r4, [ip]
   283e4:	str	lr, [sp, #28]
   283e8:	sub	sp, sp, #48	; 0x30
   283ec:	mov	lr, #10
   283f0:	ldrd	r2, [ip, #8]
   283f4:	ldrd	sl, [ip, #16]
   283f8:	strd	r4, [sp]
   283fc:	ldrd	r4, [ip, #32]
   28400:	str	lr, [sp]
   28404:	strd	r2, [sp, #8]
   28408:	strd	sl, [sp, #16]
   2840c:	ldrd	r2, [ip, #24]
   28410:	ldrd	sl, [ip, #40]	; 0x28
   28414:	strd	r2, [sp, #24]
   28418:	strd	r4, [sp, #32]
   2841c:	strd	sl, [sp, #40]	; 0x28
   28420:	beq	2845c <_obstack_memory_used@@Base+0x33a4>
   28424:	ldr	r2, [sp, #80]	; 0x50
   28428:	mov	r7, r1
   2842c:	mov	r3, sp
   28430:	mov	r1, r8
   28434:	str	r7, [sp, #40]	; 0x28
   28438:	str	r6, [sp, #44]	; 0x2c
   2843c:	bl	26cfc <_obstack_memory_used@@Base+0x1c44>
   28440:	add	sp, sp, #48	; 0x30
   28444:	ldrd	r4, [sp]
   28448:	ldrd	r6, [sp, #8]
   2844c:	ldr	r8, [sp, #16]
   28450:	ldrd	sl, [sp, #20]
   28454:	add	sp, sp, #28
   28458:	pop	{pc}		; (ldr pc, [sp], #4)
   2845c:	bl	11d2c <abort@plt>
   28460:	andeq	r2, r4, ip, ror #9
   28464:	ldr	ip, [pc, #512]	; 2866c <_obstack_memory_used@@Base+0x35b4>
   28468:	cmp	r0, #0
   2846c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28470:	ldrd	r4, [ip, #16]
   28474:	strd	r6, [sp, #8]
   28478:	clz	r6, r1
   2847c:	mov	r7, r1
   28480:	strd	r8, [sp, #16]
   28484:	mov	r8, r0
   28488:	lsr	r6, r6, #5
   2848c:	strd	sl, [sp, #24]
   28490:	mov	fp, r2
   28494:	mov	sl, #10
   28498:	ldrd	r2, [ip]
   2849c:	moveq	r6, #1
   284a0:	str	lr, [sp, #32]
   284a4:	sub	sp, sp, #92	; 0x5c
   284a8:	cmp	r6, #0
   284ac:	ldrd	r0, [ip, #8]
   284b0:	strd	r2, [sp, #40]	; 0x28
   284b4:	strd	r4, [sp, #56]	; 0x38
   284b8:	ldrd	r2, [ip, #24]
   284bc:	strd	r0, [sp, #48]	; 0x30
   284c0:	ldrd	r0, [ip, #32]
   284c4:	str	sl, [sp, #40]	; 0x28
   284c8:	ldrd	r4, [ip, #40]	; 0x28
   284cc:	strd	r2, [sp, #64]	; 0x40
   284d0:	strd	r0, [sp, #72]	; 0x48
   284d4:	strd	r4, [sp, #80]	; 0x50
   284d8:	bne	28668 <_obstack_memory_used@@Base+0x35b0>
   284dc:	movw	r5, #4812	; 0x12cc
   284e0:	movt	r5, #4
   284e4:	str	r8, [sp, #80]	; 0x50
   284e8:	str	r7, [sp, #84]	; 0x54
   284ec:	bl	11bb8 <__errno_location@plt>
   284f0:	ldr	r3, [r0]
   284f4:	mov	r9, r0
   284f8:	ldr	r2, [r5, #4]
   284fc:	ldr	r4, [r5]
   28500:	str	r3, [sp, #28]
   28504:	cmp	r2, #0
   28508:	movgt	r1, sl
   2850c:	bgt	28574 <_obstack_memory_used@@Base+0x34bc>
   28510:	add	r3, r5, #8
   28514:	str	r2, [sp, #36]	; 0x24
   28518:	rsb	r2, r2, #1
   2851c:	cmp	r4, r3
   28520:	beq	2863c <_obstack_memory_used@@Base+0x3584>
   28524:	mov	r1, #8
   28528:	mov	r0, r4
   2852c:	mvn	r3, #-2147483648	; 0x80000000
   28530:	str	r1, [sp]
   28534:	add	r1, sp, #36	; 0x24
   28538:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   2853c:	mov	r4, r0
   28540:	str	r0, [r5]
   28544:	ldr	r0, [r5, #4]
   28548:	mov	r1, #0
   2854c:	ldr	r2, [sp, #36]	; 0x24
   28550:	sub	r2, r2, r0
   28554:	add	r0, r4, r0, lsl #3
   28558:	lsl	r2, r2, #3
   2855c:	bl	11be8 <memset@plt>
   28560:	ldr	r3, [sp, #36]	; 0x24
   28564:	ldr	r1, [sp, #40]	; 0x28
   28568:	ldr	r8, [sp, #80]	; 0x50
   2856c:	str	r3, [r5, #4]
   28570:	ldr	r7, [sp, #84]	; 0x54
   28574:	mvn	r3, #0
   28578:	mov	r2, fp
   2857c:	ldr	r6, [sp, #44]	; 0x2c
   28580:	ldr	sl, [r4]
   28584:	ldr	r5, [r4, #4]
   28588:	orr	r6, r6, #1
   2858c:	stm	sp, {r1, r6}
   28590:	add	r1, sp, #48	; 0x30
   28594:	str	r8, [sp, #12]
   28598:	mov	r0, r5
   2859c:	str	r1, [sp, #8]
   285a0:	mov	r1, sl
   285a4:	str	r7, [sp, #16]
   285a8:	bl	25310 <_obstack_memory_used@@Base+0x258>
   285ac:	cmp	sl, r0
   285b0:	bhi	28614 <_obstack_memory_used@@Base+0x355c>
   285b4:	add	r7, r0, #1
   285b8:	movw	r3, #9196	; 0x23ec
   285bc:	movt	r3, #4
   285c0:	cmp	r5, r3
   285c4:	str	r7, [r4]
   285c8:	beq	285d4 <_obstack_memory_used@@Base+0x351c>
   285cc:	mov	r0, r5
   285d0:	bl	1ee98 <__assert_fail@plt+0xd124>
   285d4:	mov	r0, r7
   285d8:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   285dc:	ldr	r3, [sp, #40]	; 0x28
   285e0:	mov	r2, fp
   285e4:	mov	r1, r7
   285e8:	mov	r5, r0
   285ec:	ldr	lr, [sp, #80]	; 0x50
   285f0:	ldr	ip, [sp, #84]	; 0x54
   285f4:	str	r0, [r4, #4]
   285f8:	add	r4, sp, #48	; 0x30
   285fc:	stm	sp, {r3, r6}
   28600:	mvn	r3, #0
   28604:	str	r4, [sp, #8]
   28608:	str	lr, [sp, #12]
   2860c:	str	ip, [sp, #16]
   28610:	bl	25310 <_obstack_memory_used@@Base+0x258>
   28614:	ldr	r3, [sp, #28]
   28618:	mov	r0, r5
   2861c:	str	r3, [r9]
   28620:	add	sp, sp, #92	; 0x5c
   28624:	ldrd	r4, [sp]
   28628:	ldrd	r6, [sp, #8]
   2862c:	ldrd	r8, [sp, #16]
   28630:	ldrd	sl, [sp, #24]
   28634:	add	sp, sp, #32
   28638:	pop	{pc}		; (ldr pc, [sp], #4)
   2863c:	mov	r1, #8
   28640:	mvn	r3, #-2147483648	; 0x80000000
   28644:	mov	r0, r6
   28648:	str	r1, [sp]
   2864c:	add	r1, sp, #36	; 0x24
   28650:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   28654:	ldrd	r2, [r5, #8]
   28658:	mov	r4, r0
   2865c:	str	r0, [r5]
   28660:	strd	r2, [r0]
   28664:	b	28544 <_obstack_memory_used@@Base+0x348c>
   28668:	bl	11d2c <abort@plt>
   2866c:	andeq	r2, r4, ip, ror #9
   28670:	ldr	ip, [pc, #536]	; 28890 <_obstack_memory_used@@Base+0x37d8>
   28674:	cmp	r0, #0
   28678:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2867c:	ldrd	r4, [ip, #16]
   28680:	strd	r6, [sp, #8]
   28684:	mov	r6, r1
   28688:	mov	r7, r0
   2868c:	strd	r8, [sp, #16]
   28690:	mov	r9, #10
   28694:	strd	sl, [sp, #24]
   28698:	mov	sl, r2
   2869c:	mov	fp, r3
   286a0:	str	lr, [sp, #32]
   286a4:	clz	lr, r1
   286a8:	sub	sp, sp, #92	; 0x5c
   286ac:	ldrd	r2, [ip]
   286b0:	lsr	lr, lr, #5
   286b4:	moveq	lr, #1
   286b8:	ldrd	r0, [ip, #8]
   286bc:	cmp	lr, #0
   286c0:	strd	r4, [sp, #56]	; 0x38
   286c4:	ldrd	r4, [ip, #40]	; 0x28
   286c8:	str	lr, [sp, #28]
   286cc:	strd	r2, [sp, #40]	; 0x28
   286d0:	ldrd	r2, [ip, #24]
   286d4:	strd	r0, [sp, #48]	; 0x30
   286d8:	ldrd	r0, [ip, #32]
   286dc:	str	r9, [sp, #40]	; 0x28
   286e0:	strd	r2, [sp, #64]	; 0x40
   286e4:	strd	r4, [sp, #80]	; 0x50
   286e8:	strd	r0, [sp, #72]	; 0x48
   286ec:	bne	2888c <_obstack_memory_used@@Base+0x37d4>
   286f0:	movw	r5, #4812	; 0x12cc
   286f4:	movt	r5, #4
   286f8:	str	r7, [sp, #80]	; 0x50
   286fc:	str	r6, [sp, #84]	; 0x54
   28700:	bl	11bb8 <__errno_location@plt>
   28704:	ldr	r3, [r0]
   28708:	mov	r8, r0
   2870c:	ldr	r2, [r5, #4]
   28710:	ldr	r4, [r5]
   28714:	str	r3, [sp, #24]
   28718:	cmp	r2, #0
   2871c:	movgt	r1, r9
   28720:	bgt	28788 <_obstack_memory_used@@Base+0x36d0>
   28724:	add	r3, r5, #8
   28728:	str	r2, [sp, #36]	; 0x24
   2872c:	rsb	r2, r2, #1
   28730:	cmp	r4, r3
   28734:	beq	28860 <_obstack_memory_used@@Base+0x37a8>
   28738:	mov	r1, #8
   2873c:	mov	r0, r4
   28740:	mvn	r3, #-2147483648	; 0x80000000
   28744:	str	r1, [sp]
   28748:	add	r1, sp, #36	; 0x24
   2874c:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   28750:	mov	r4, r0
   28754:	str	r0, [r5]
   28758:	ldr	r0, [r5, #4]
   2875c:	mov	r1, #0
   28760:	ldr	r2, [sp, #36]	; 0x24
   28764:	sub	r2, r2, r0
   28768:	add	r0, r4, r0, lsl #3
   2876c:	lsl	r2, r2, #3
   28770:	bl	11be8 <memset@plt>
   28774:	ldr	r3, [sp, #36]	; 0x24
   28778:	ldr	r1, [sp, #40]	; 0x28
   2877c:	ldr	r7, [sp, #80]	; 0x50
   28780:	str	r3, [r5, #4]
   28784:	ldr	r6, [sp, #84]	; 0x54
   28788:	mov	r3, fp
   2878c:	mov	r2, sl
   28790:	ldr	r0, [sp, #44]	; 0x2c
   28794:	ldr	r9, [r4]
   28798:	ldr	r5, [r4, #4]
   2879c:	orr	r0, r0, #1
   287a0:	str	r1, [sp]
   287a4:	add	r1, sp, #48	; 0x30
   287a8:	str	r0, [sp, #4]
   287ac:	str	r1, [sp, #8]
   287b0:	mov	r1, r9
   287b4:	str	r7, [sp, #12]
   287b8:	str	r6, [sp, #16]
   287bc:	str	r0, [sp, #28]
   287c0:	mov	r0, r5
   287c4:	bl	25310 <_obstack_memory_used@@Base+0x258>
   287c8:	cmp	r9, r0
   287cc:	bhi	28838 <_obstack_memory_used@@Base+0x3780>
   287d0:	add	r6, r0, #1
   287d4:	movw	r3, #9196	; 0x23ec
   287d8:	movt	r3, #4
   287dc:	cmp	r5, r3
   287e0:	str	r6, [r4]
   287e4:	beq	287f0 <_obstack_memory_used@@Base+0x3738>
   287e8:	mov	r0, r5
   287ec:	bl	1ee98 <__assert_fail@plt+0xd124>
   287f0:	mov	r0, r6
   287f4:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   287f8:	ldr	lr, [sp, #40]	; 0x28
   287fc:	mov	r1, r6
   28800:	mov	r3, fp
   28804:	mov	r2, sl
   28808:	mov	r5, r0
   2880c:	ldr	r6, [sp, #80]	; 0x50
   28810:	ldr	ip, [sp, #84]	; 0x54
   28814:	str	r0, [r4, #4]
   28818:	str	lr, [sp]
   2881c:	ldr	lr, [sp, #28]
   28820:	str	lr, [sp, #4]
   28824:	add	lr, sp, #48	; 0x30
   28828:	str	r6, [sp, #12]
   2882c:	str	lr, [sp, #8]
   28830:	str	ip, [sp, #16]
   28834:	bl	25310 <_obstack_memory_used@@Base+0x258>
   28838:	ldr	r3, [sp, #24]
   2883c:	mov	r0, r5
   28840:	str	r3, [r8]
   28844:	add	sp, sp, #92	; 0x5c
   28848:	ldrd	r4, [sp]
   2884c:	ldrd	r6, [sp, #8]
   28850:	ldrd	r8, [sp, #16]
   28854:	ldrd	sl, [sp, #24]
   28858:	add	sp, sp, #32
   2885c:	pop	{pc}		; (ldr pc, [sp], #4)
   28860:	mov	r1, #8
   28864:	mvn	r3, #-2147483648	; 0x80000000
   28868:	ldr	r0, [sp, #28]
   2886c:	str	r1, [sp]
   28870:	add	r1, sp, #36	; 0x24
   28874:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   28878:	ldrd	r2, [r5, #8]
   2887c:	mov	r4, r0
   28880:	str	r0, [r5]
   28884:	strd	r2, [r0]
   28888:	b	28758 <_obstack_memory_used@@Base+0x36a0>
   2888c:	bl	11d2c <abort@plt>
   28890:	andeq	r2, r4, ip, ror #9
   28894:	ldr	r3, [pc]	; 2889c <_obstack_memory_used@@Base+0x37e4>
   28898:	b	26cfc <_obstack_memory_used@@Base+0x1c44>
   2889c:	ldrdeq	r1, [r4], -ip
   288a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   288a4:	movw	r4, #4812	; 0x12cc
   288a8:	movt	r4, #4
   288ac:	strd	r6, [sp, #8]
   288b0:	strd	r8, [sp, #16]
   288b4:	strd	sl, [sp, #24]
   288b8:	mov	sl, r0
   288bc:	mov	fp, r1
   288c0:	str	lr, [sp, #32]
   288c4:	sub	sp, sp, #44	; 0x2c
   288c8:	bl	11bb8 <__errno_location@plt>
   288cc:	ldr	r3, [r0]
   288d0:	mov	r8, r0
   288d4:	ldr	r2, [r4, #4]
   288d8:	ldr	r5, [r4]
   288dc:	str	r3, [sp, #28]
   288e0:	cmp	r2, #0
   288e4:	bgt	28940 <_obstack_memory_used@@Base+0x3888>
   288e8:	add	r3, r4, #8
   288ec:	str	r2, [sp, #36]	; 0x24
   288f0:	rsb	r2, r2, #1
   288f4:	cmp	r5, r3
   288f8:	beq	28a1c <_obstack_memory_used@@Base+0x3964>
   288fc:	mov	r1, #8
   28900:	mov	r0, r5
   28904:	mvn	r3, #-2147483648	; 0x80000000
   28908:	str	r1, [sp]
   2890c:	add	r1, sp, #36	; 0x24
   28910:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   28914:	mov	r5, r0
   28918:	str	r0, [r4]
   2891c:	ldr	r0, [r4, #4]
   28920:	mov	r1, #0
   28924:	ldr	r2, [sp, #36]	; 0x24
   28928:	sub	r2, r2, r0
   2892c:	add	r0, r5, r0, lsl #3
   28930:	lsl	r2, r2, #3
   28934:	bl	11be8 <memset@plt>
   28938:	ldr	r3, [sp, #36]	; 0x24
   2893c:	str	r3, [r4, #4]
   28940:	ldr	ip, [r4, #16]
   28944:	mov	r3, fp
   28948:	mov	r2, sl
   2894c:	ldr	r7, [r4, #20]
   28950:	ldr	r0, [pc, #240]	; 28a48 <_obstack_memory_used@@Base+0x3990>
   28954:	ldr	r9, [r5]
   28958:	orr	r7, r7, #1
   2895c:	ldr	r6, [r5, #4]
   28960:	str	ip, [sp]
   28964:	ldr	ip, [r4, #56]	; 0x38
   28968:	mov	r1, r9
   2896c:	str	r7, [sp, #4]
   28970:	ldr	lr, [r4, #60]	; 0x3c
   28974:	str	r0, [sp, #8]
   28978:	mov	r0, r6
   2897c:	str	ip, [sp, #12]
   28980:	str	lr, [sp, #16]
   28984:	bl	25310 <_obstack_memory_used@@Base+0x258>
   28988:	cmp	r9, r0
   2898c:	bhi	289f4 <_obstack_memory_used@@Base+0x393c>
   28990:	add	r9, r0, #1
   28994:	movw	r3, #9196	; 0x23ec
   28998:	movt	r3, #4
   2899c:	cmp	r6, r3
   289a0:	str	r9, [r5]
   289a4:	beq	289b0 <_obstack_memory_used@@Base+0x38f8>
   289a8:	mov	r0, r6
   289ac:	bl	1ee98 <__assert_fail@plt+0xd124>
   289b0:	mov	r0, r9
   289b4:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   289b8:	ldr	ip, [r4, #16]
   289bc:	mov	r1, r9
   289c0:	mov	r3, fp
   289c4:	mov	r2, sl
   289c8:	mov	r6, r0
   289cc:	ldr	r9, [r4, #56]	; 0x38
   289d0:	ldr	lr, [r4, #60]	; 0x3c
   289d4:	str	r0, [r5, #4]
   289d8:	str	ip, [sp]
   289dc:	ldr	ip, [pc, #100]	; 28a48 <_obstack_memory_used@@Base+0x3990>
   289e0:	str	r7, [sp, #4]
   289e4:	str	ip, [sp, #8]
   289e8:	str	r9, [sp, #12]
   289ec:	str	lr, [sp, #16]
   289f0:	bl	25310 <_obstack_memory_used@@Base+0x258>
   289f4:	ldr	r3, [sp, #28]
   289f8:	mov	r0, r6
   289fc:	str	r3, [r8]
   28a00:	add	sp, sp, #44	; 0x2c
   28a04:	ldrd	r4, [sp]
   28a08:	ldrd	r6, [sp, #8]
   28a0c:	ldrd	r8, [sp, #16]
   28a10:	ldrd	sl, [sp, #24]
   28a14:	add	sp, sp, #32
   28a18:	pop	{pc}		; (ldr pc, [sp], #4)
   28a1c:	mov	r0, #8
   28a20:	mvn	r3, #-2147483648	; 0x80000000
   28a24:	add	r1, sp, #36	; 0x24
   28a28:	str	r0, [sp]
   28a2c:	mov	r0, #0
   28a30:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   28a34:	ldrd	r2, [r4, #8]
   28a38:	mov	r5, r0
   28a3c:	str	r0, [r4]
   28a40:	strd	r2, [r0]
   28a44:	b	2891c <_obstack_memory_used@@Base+0x3864>
   28a48:	andeq	r1, r4, r4, ror #5
   28a4c:	ldr	r3, [pc, #4]	; 28a58 <_obstack_memory_used@@Base+0x39a0>
   28a50:	mvn	r2, #0
   28a54:	b	26cfc <_obstack_memory_used@@Base+0x1c44>
   28a58:	ldrdeq	r1, [r4], -ip
   28a5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28a60:	movw	r4, #4812	; 0x12cc
   28a64:	movt	r4, #4
   28a68:	strd	r6, [sp, #8]
   28a6c:	strd	r8, [sp, #16]
   28a70:	strd	sl, [sp, #24]
   28a74:	mov	sl, r0
   28a78:	str	lr, [sp, #32]
   28a7c:	sub	sp, sp, #44	; 0x2c
   28a80:	bl	11bb8 <__errno_location@plt>
   28a84:	ldr	r3, [r0]
   28a88:	mov	r8, r0
   28a8c:	ldr	r2, [r4, #4]
   28a90:	ldr	r5, [r4]
   28a94:	str	r3, [sp, #28]
   28a98:	cmp	r2, #0
   28a9c:	bgt	28af8 <_obstack_memory_used@@Base+0x3a40>
   28aa0:	add	r3, r4, #8
   28aa4:	str	r2, [sp, #36]	; 0x24
   28aa8:	rsb	r2, r2, #1
   28aac:	cmp	r5, r3
   28ab0:	beq	28bc0 <_obstack_memory_used@@Base+0x3b08>
   28ab4:	mov	r1, #8
   28ab8:	mov	r0, r5
   28abc:	mvn	r3, #-2147483648	; 0x80000000
   28ac0:	str	r1, [sp]
   28ac4:	add	r1, sp, #36	; 0x24
   28ac8:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   28acc:	mov	r5, r0
   28ad0:	str	r0, [r4]
   28ad4:	ldr	r0, [r4, #4]
   28ad8:	mov	r1, #0
   28adc:	ldr	r2, [sp, #36]	; 0x24
   28ae0:	sub	r2, r2, r0
   28ae4:	add	r0, r5, r0, lsl #3
   28ae8:	lsl	r2, r2, #3
   28aec:	bl	11be8 <memset@plt>
   28af0:	ldr	r3, [sp, #36]	; 0x24
   28af4:	str	r3, [r4, #4]
   28af8:	ldr	ip, [r4, #16]
   28afc:	mvn	r3, #0
   28b00:	mov	r2, sl
   28b04:	ldr	r7, [r4, #20]
   28b08:	ldr	fp, [pc, #220]	; 28bec <_obstack_memory_used@@Base+0x3b34>
   28b0c:	ldr	r9, [r5]
   28b10:	orr	r7, r7, #1
   28b14:	ldr	r6, [r5, #4]
   28b18:	str	ip, [sp]
   28b1c:	ldr	ip, [r4, #56]	; 0x38
   28b20:	mov	r1, r9
   28b24:	stmib	sp, {r7, fp}
   28b28:	ldr	lr, [r4, #60]	; 0x3c
   28b2c:	mov	r0, r6
   28b30:	str	ip, [sp, #12]
   28b34:	str	lr, [sp, #16]
   28b38:	bl	25310 <_obstack_memory_used@@Base+0x258>
   28b3c:	cmp	r9, r0
   28b40:	bhi	28b98 <_obstack_memory_used@@Base+0x3ae0>
   28b44:	add	r9, r0, #1
   28b48:	movw	r3, #9196	; 0x23ec
   28b4c:	movt	r3, #4
   28b50:	cmp	r6, r3
   28b54:	str	r9, [r5]
   28b58:	beq	28b64 <_obstack_memory_used@@Base+0x3aac>
   28b5c:	mov	r0, r6
   28b60:	bl	1ee98 <__assert_fail@plt+0xd124>
   28b64:	mov	r0, r9
   28b68:	bl	29dd8 <_obstack_memory_used@@Base+0x4d20>
   28b6c:	ldr	r3, [r4, #16]
   28b70:	mov	r2, sl
   28b74:	mov	r1, r9
   28b78:	mov	r6, r0
   28b7c:	ldr	lr, [r4, #56]	; 0x38
   28b80:	ldr	ip, [r4, #60]	; 0x3c
   28b84:	str	r0, [r5, #4]
   28b88:	stm	sp, {r3, r7, fp, lr}
   28b8c:	mvn	r3, #0
   28b90:	str	ip, [sp, #16]
   28b94:	bl	25310 <_obstack_memory_used@@Base+0x258>
   28b98:	ldr	r3, [sp, #28]
   28b9c:	mov	r0, r6
   28ba0:	str	r3, [r8]
   28ba4:	add	sp, sp, #44	; 0x2c
   28ba8:	ldrd	r4, [sp]
   28bac:	ldrd	r6, [sp, #8]
   28bb0:	ldrd	r8, [sp, #16]
   28bb4:	ldrd	sl, [sp, #24]
   28bb8:	add	sp, sp, #32
   28bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   28bc0:	mov	r0, #8
   28bc4:	mvn	r3, #-2147483648	; 0x80000000
   28bc8:	add	r1, sp, #36	; 0x24
   28bcc:	str	r0, [sp]
   28bd0:	mov	r0, #0
   28bd4:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   28bd8:	ldrd	r2, [r4, #8]
   28bdc:	mov	r5, r0
   28be0:	str	r0, [r4]
   28be4:	strd	r2, [r0]
   28be8:	b	28ad4 <_obstack_memory_used@@Base+0x3a1c>
   28bec:	andeq	r1, r4, r4, ror #5
   28bf0:	strd	r4, [sp, #-16]!
   28bf4:	ldr	r4, [r0], #8
   28bf8:	str	r6, [sp, #8]
   28bfc:	str	lr, [sp, #12]
   28c00:	cmp	r4, r0
   28c04:	beq	28c30 <_obstack_memory_used@@Base+0x3b78>
   28c08:	mov	r0, r4
   28c0c:	bl	2b5c4 <_obstack_memory_used@@Base+0x650c>
   28c10:	cmp	r0, #0
   28c14:	movne	r3, r0
   28c18:	moveq	r3, r4
   28c1c:	ldrd	r4, [sp]
   28c20:	mov	r0, r3
   28c24:	ldr	r6, [sp, #8]
   28c28:	add	sp, sp, #12
   28c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   28c30:	mov	r0, r1
   28c34:	mov	r5, r1
   28c38:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   28c3c:	subs	r3, r0, #0
   28c40:	beq	28c1c <_obstack_memory_used@@Base+0x3b64>
   28c44:	mov	r2, r5
   28c48:	mov	r1, r4
   28c4c:	ldrd	r4, [sp]
   28c50:	ldr	r6, [sp, #8]
   28c54:	ldr	lr, [sp, #12]
   28c58:	add	sp, sp, #16
   28c5c:	b	11930 <memcpy@plt>
   28c60:	strd	r4, [sp, #-16]!
   28c64:	mov	r5, r0
   28c68:	mov	r4, r0
   28c6c:	ldr	r3, [r0, #4]
   28c70:	ldr	r0, [r5], #8
   28c74:	str	r6, [sp, #8]
   28c78:	str	lr, [sp, #12]
   28c7c:	lsl	r6, r3, #1
   28c80:	cmp	r0, r5
   28c84:	beq	28c90 <_obstack_memory_used@@Base+0x3bd8>
   28c88:	bl	1ee98 <__assert_fail@plt+0xd124>
   28c8c:	ldr	r3, [r4, #4]
   28c90:	cmp	r6, r3
   28c94:	bcc	28ccc <_obstack_memory_used@@Base+0x3c14>
   28c98:	mov	r0, r6
   28c9c:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   28ca0:	cmp	r0, #0
   28ca4:	mov	r3, r0
   28ca8:	mov	r2, r0
   28cac:	beq	28ce8 <_obstack_memory_used@@Base+0x3c30>
   28cb0:	mov	r2, #1
   28cb4:	stm	r4, {r3, r6}
   28cb8:	mov	r0, r2
   28cbc:	ldrd	r4, [sp]
   28cc0:	ldr	r6, [sp, #8]
   28cc4:	add	sp, sp, #12
   28cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   28ccc:	bl	11bb8 <__errno_location@plt>
   28cd0:	mov	r1, #12
   28cd4:	mov	r3, r5
   28cd8:	mov	r6, #1024	; 0x400
   28cdc:	mov	r2, #0
   28ce0:	str	r1, [r0]
   28ce4:	b	28cb4 <_obstack_memory_used@@Base+0x3bfc>
   28ce8:	mov	r3, r5
   28cec:	mov	r6, #1024	; 0x400
   28cf0:	b	28cb4 <_obstack_memory_used@@Base+0x3bfc>
   28cf4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28cf8:	mov	r5, r0
   28cfc:	mov	r4, r0
   28d00:	ldr	r3, [r0, #4]
   28d04:	strd	r6, [sp, #8]
   28d08:	ldr	r7, [r5], #8
   28d0c:	str	r8, [sp, #16]
   28d10:	str	lr, [sp, #20]
   28d14:	lsl	r6, r3, #1
   28d18:	cmp	r7, r5
   28d1c:	beq	28d60 <_obstack_memory_used@@Base+0x3ca8>
   28d20:	cmp	r3, r6
   28d24:	bhi	28d84 <_obstack_memory_used@@Base+0x3ccc>
   28d28:	mov	r0, r7
   28d2c:	mov	r1, r6
   28d30:	bl	2b5c4 <_obstack_memory_used@@Base+0x650c>
   28d34:	subs	r8, r0, #0
   28d38:	ldreq	r7, [r4]
   28d3c:	beq	28d90 <_obstack_memory_used@@Base+0x3cd8>
   28d40:	mov	r0, #1
   28d44:	str	r8, [r4]
   28d48:	str	r6, [r4, #4]
   28d4c:	ldrd	r4, [sp]
   28d50:	ldrd	r6, [sp, #8]
   28d54:	ldr	r8, [sp, #16]
   28d58:	add	sp, sp, #20
   28d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   28d60:	mov	r0, r6
   28d64:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   28d68:	subs	r8, r0, #0
   28d6c:	moveq	r0, r8
   28d70:	beq	28d4c <_obstack_memory_used@@Base+0x3c94>
   28d74:	mov	r1, r7
   28d78:	ldr	r2, [r4, #4]
   28d7c:	bl	11930 <memcpy@plt>
   28d80:	b	28d40 <_obstack_memory_used@@Base+0x3c88>
   28d84:	bl	11bb8 <__errno_location@plt>
   28d88:	mov	r3, #12
   28d8c:	str	r3, [r0]
   28d90:	mov	r0, r7
   28d94:	bl	1ee98 <__assert_fail@plt+0xd124>
   28d98:	mov	r3, #1024	; 0x400
   28d9c:	mov	r0, #0
   28da0:	str	r5, [r4]
   28da4:	str	r3, [r4, #4]
   28da8:	b	28d4c <_obstack_memory_used@@Base+0x3c94>
   28dac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28db0:	mov	r5, r1
   28db4:	strd	r6, [sp, #8]
   28db8:	str	r8, [sp, #16]
   28dbc:	str	lr, [sp, #20]
   28dc0:	bl	11b7c <getfilecon@plt>
   28dc4:	subs	r4, r0, #0
   28dc8:	beq	28e28 <_obstack_memory_used@@Base+0x3d70>
   28dcc:	cmp	r4, #10
   28dd0:	beq	28dec <_obstack_memory_used@@Base+0x3d34>
   28dd4:	mov	r0, r4
   28dd8:	ldrd	r4, [sp]
   28ddc:	ldrd	r6, [sp, #8]
   28de0:	ldr	r8, [sp, #16]
   28de4:	add	sp, sp, #20
   28de8:	pop	{pc}		; (ldr pc, [sp], #4)
   28dec:	ldr	r6, [r5]
   28df0:	movw	r1, #55400	; 0xd868
   28df4:	movt	r1, #2
   28df8:	mov	r0, r6
   28dfc:	bl	118a0 <strcmp@plt>
   28e00:	subs	r7, r0, #0
   28e04:	bne	28dd4 <_obstack_memory_used@@Base+0x3d1c>
   28e08:	mov	r0, r6
   28e0c:	mvn	r4, #0
   28e10:	bl	11ce4 <freecon@plt>
   28e14:	str	r7, [r5]
   28e18:	bl	11bb8 <__errno_location@plt>
   28e1c:	mov	r3, #61	; 0x3d
   28e20:	str	r3, [r0]
   28e24:	b	28dd4 <_obstack_memory_used@@Base+0x3d1c>
   28e28:	bl	11bb8 <__errno_location@plt>
   28e2c:	mov	r3, #95	; 0x5f
   28e30:	mvn	r4, #0
   28e34:	str	r3, [r0]
   28e38:	b	28dd4 <_obstack_memory_used@@Base+0x3d1c>
   28e3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28e40:	mov	r5, r1
   28e44:	strd	r6, [sp, #8]
   28e48:	str	r8, [sp, #16]
   28e4c:	str	lr, [sp, #20]
   28e50:	bl	11ad4 <lgetfilecon@plt>
   28e54:	subs	r4, r0, #0
   28e58:	beq	28eb8 <_obstack_memory_used@@Base+0x3e00>
   28e5c:	cmp	r4, #10
   28e60:	beq	28e7c <_obstack_memory_used@@Base+0x3dc4>
   28e64:	mov	r0, r4
   28e68:	ldrd	r4, [sp]
   28e6c:	ldrd	r6, [sp, #8]
   28e70:	ldr	r8, [sp, #16]
   28e74:	add	sp, sp, #20
   28e78:	pop	{pc}		; (ldr pc, [sp], #4)
   28e7c:	ldr	r6, [r5]
   28e80:	movw	r1, #55400	; 0xd868
   28e84:	movt	r1, #2
   28e88:	mov	r0, r6
   28e8c:	bl	118a0 <strcmp@plt>
   28e90:	subs	r7, r0, #0
   28e94:	bne	28e64 <_obstack_memory_used@@Base+0x3dac>
   28e98:	mov	r0, r6
   28e9c:	mvn	r4, #0
   28ea0:	bl	11ce4 <freecon@plt>
   28ea4:	str	r7, [r5]
   28ea8:	bl	11bb8 <__errno_location@plt>
   28eac:	mov	r3, #61	; 0x3d
   28eb0:	str	r3, [r0]
   28eb4:	b	28e64 <_obstack_memory_used@@Base+0x3dac>
   28eb8:	bl	11bb8 <__errno_location@plt>
   28ebc:	mov	r3, #95	; 0x5f
   28ec0:	mvn	r4, #0
   28ec4:	str	r3, [r0]
   28ec8:	b	28e64 <_obstack_memory_used@@Base+0x3dac>
   28ecc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28ed0:	mov	r5, r1
   28ed4:	strd	r6, [sp, #8]
   28ed8:	str	r8, [sp, #16]
   28edc:	str	lr, [sp, #20]
   28ee0:	bl	119a8 <fgetfilecon@plt>
   28ee4:	subs	r4, r0, #0
   28ee8:	beq	28f48 <_obstack_memory_used@@Base+0x3e90>
   28eec:	cmp	r4, #10
   28ef0:	beq	28f0c <_obstack_memory_used@@Base+0x3e54>
   28ef4:	mov	r0, r4
   28ef8:	ldrd	r4, [sp]
   28efc:	ldrd	r6, [sp, #8]
   28f00:	ldr	r8, [sp, #16]
   28f04:	add	sp, sp, #20
   28f08:	pop	{pc}		; (ldr pc, [sp], #4)
   28f0c:	ldr	r6, [r5]
   28f10:	movw	r1, #55400	; 0xd868
   28f14:	movt	r1, #2
   28f18:	mov	r0, r6
   28f1c:	bl	118a0 <strcmp@plt>
   28f20:	subs	r7, r0, #0
   28f24:	bne	28ef4 <_obstack_memory_used@@Base+0x3e3c>
   28f28:	mov	r0, r6
   28f2c:	mvn	r4, #0
   28f30:	bl	11ce4 <freecon@plt>
   28f34:	str	r7, [r5]
   28f38:	bl	11bb8 <__errno_location@plt>
   28f3c:	mov	r3, #61	; 0x3d
   28f40:	str	r3, [r0]
   28f44:	b	28ef4 <_obstack_memory_used@@Base+0x3e3c>
   28f48:	bl	11bb8 <__errno_location@plt>
   28f4c:	mov	r3, #95	; 0x5f
   28f50:	mvn	r4, #0
   28f54:	str	r3, [r0]
   28f58:	b	28ef4 <_obstack_memory_used@@Base+0x3e3c>
   28f5c:	strd	r4, [sp, #-16]!
   28f60:	mov	r5, r1
   28f64:	mov	r1, #0
   28f68:	mov	r4, r2
   28f6c:	str	r6, [sp, #8]
   28f70:	str	lr, [sp, #12]
   28f74:	bl	11c54 <setlocale@plt>
   28f78:	subs	r6, r0, #0
   28f7c:	beq	28ffc <_obstack_memory_used@@Base+0x3f44>
   28f80:	bl	11b94 <strlen@plt>
   28f84:	cmp	r4, r0
   28f88:	bhi	28fa8 <_obstack_memory_used@@Base+0x3ef0>
   28f8c:	cmp	r4, #0
   28f90:	moveq	r0, #34	; 0x22
   28f94:	bne	28fcc <_obstack_memory_used@@Base+0x3f14>
   28f98:	ldrd	r4, [sp]
   28f9c:	ldr	r6, [sp, #8]
   28fa0:	add	sp, sp, #12
   28fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   28fa8:	add	r2, r0, #1
   28fac:	mov	r1, r6
   28fb0:	mov	r0, r5
   28fb4:	bl	11930 <memcpy@plt>
   28fb8:	ldrd	r4, [sp]
   28fbc:	mov	r0, #0
   28fc0:	ldr	r6, [sp, #8]
   28fc4:	add	sp, sp, #12
   28fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   28fcc:	sub	r4, r4, #1
   28fd0:	mov	r1, r6
   28fd4:	mov	r2, r4
   28fd8:	mov	r0, r5
   28fdc:	bl	11930 <memcpy@plt>
   28fe0:	mov	r3, #0
   28fe4:	mov	r0, #34	; 0x22
   28fe8:	strb	r3, [r5, r4]
   28fec:	ldrd	r4, [sp]
   28ff0:	ldr	r6, [sp, #8]
   28ff4:	add	sp, sp, #12
   28ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   28ffc:	cmp	r4, #0
   29000:	mov	r0, #22
   29004:	strbne	r6, [r5]
   29008:	ldrd	r4, [sp]
   2900c:	ldr	r6, [sp, #8]
   29010:	add	sp, sp, #12
   29014:	pop	{pc}		; (ldr pc, [sp], #4)
   29018:	mov	r1, #0
   2901c:	b	11c54 <setlocale@plt>
   29020:	strd	r4, [sp, #-24]!	; 0xffffffe8
   29024:	strd	r6, [sp, #8]
   29028:	mov	r6, r0
   2902c:	movw	r0, #64312	; 0xfb38
   29030:	movt	r0, #2
   29034:	str	r8, [sp, #16]
   29038:	str	lr, [sp, #20]
   2903c:	bl	11ac8 <getenv@plt>
   29040:	subs	r5, r0, #0
   29044:	ldrb	r3, [r6, #4]
   29048:	beq	29100 <_obstack_memory_used@@Base+0x4048>
   2904c:	cmp	r3, #0
   29050:	beq	29084 <_obstack_memory_used@@Base+0x3fcc>
   29054:	mov	r1, r5
   29058:	add	r0, r6, #5
   2905c:	bl	118a0 <strcmp@plt>
   29060:	cmp	r0, #0
   29064:	bne	29084 <_obstack_memory_used@@Base+0x3fcc>
   29068:	mov	r4, #1
   2906c:	mov	r0, r4
   29070:	ldrd	r4, [sp]
   29074:	ldrd	r6, [sp, #8]
   29078:	ldr	r8, [sp, #16]
   2907c:	add	sp, sp, #20
   29080:	pop	{pc}		; (ldr pc, [sp], #4)
   29084:	mov	r0, r5
   29088:	bl	11b94 <strlen@plt>
   2908c:	add	r7, r0, #1
   29090:	cmp	r7, #58	; 0x3a
   29094:	movcs	r0, r7
   29098:	movcc	r0, #58	; 0x3a
   2909c:	add	r0, r0, #9
   290a0:	bic	r0, r0, #3
   290a4:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   290a8:	subs	r4, r0, #0
   290ac:	beq	29120 <_obstack_memory_used@@Base+0x4068>
   290b0:	mov	r8, #0
   290b4:	mov	ip, #1
   290b8:	add	r3, r4, #5
   290bc:	mov	r1, r5
   290c0:	mov	r0, r3
   290c4:	mov	r2, r7
   290c8:	str	r8, [r4]
   290cc:	strh	ip, [r4, #4]
   290d0:	bl	11930 <memcpy@plt>
   290d4:	strb	r8, [r0, r7]
   290d8:	ldrb	r3, [r6, #4]
   290dc:	cmp	r3, #0
   290e0:	bne	29128 <_obstack_memory_used@@Base+0x4070>
   290e4:	movw	r0, #64312	; 0xfb38
   290e8:	movt	r0, #2
   290ec:	bl	11d14 <unsetenv@plt>
   290f0:	cmp	r0, #0
   290f4:	bne	29144 <_obstack_memory_used@@Base+0x408c>
   290f8:	bl	119fc <tzset@plt>
   290fc:	b	2906c <_obstack_memory_used@@Base+0x3fb4>
   29100:	cmp	r3, #0
   29104:	beq	29068 <_obstack_memory_used@@Base+0x3fb0>
   29108:	mov	r0, #64	; 0x40
   2910c:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   29110:	subs	r4, r0, #0
   29114:	strne	r5, [r4]
   29118:	strhne	r5, [r4, #4]
   2911c:	bne	290d8 <_obstack_memory_used@@Base+0x4020>
   29120:	mov	r4, #0
   29124:	b	2906c <_obstack_memory_used@@Base+0x3fb4>
   29128:	add	r1, r6, #5
   2912c:	movw	r0, #64312	; 0xfb38
   29130:	movt	r0, #2
   29134:	mov	r2, #1
   29138:	bl	11bac <setenv@plt>
   2913c:	cmp	r0, #0
   29140:	beq	290f8 <_obstack_memory_used@@Base+0x4040>
   29144:	bl	11bb8 <__errno_location@plt>
   29148:	cmp	r4, #1
   2914c:	mov	r5, r0
   29150:	ldr	r6, [r0]
   29154:	beq	2916c <_obstack_memory_used@@Base+0x40b4>
   29158:	mov	r0, r4
   2915c:	ldr	r4, [r4]
   29160:	bl	1ee98 <__assert_fail@plt+0xd124>
   29164:	cmp	r4, #0
   29168:	bne	29158 <_obstack_memory_used@@Base+0x40a0>
   2916c:	mov	r4, #0
   29170:	str	r6, [r5]
   29174:	b	2906c <_obstack_memory_used@@Base+0x3fb4>
   29178:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2917c:	strd	r6, [sp, #8]
   29180:	ldr	r6, [r1, #40]	; 0x28
   29184:	strd	r8, [sp, #16]
   29188:	str	sl, [sp, #24]
   2918c:	str	lr, [sp, #28]
   29190:	cmp	r6, #0
   29194:	beq	292a4 <_obstack_memory_used@@Base+0x41ec>
   29198:	cmp	r1, r6
   2919c:	mov	r7, r1
   291a0:	mov	r5, r0
   291a4:	bhi	291b4 <_obstack_memory_used@@Base+0x40fc>
   291a8:	add	r3, r1, #44	; 0x2c
   291ac:	cmp	r6, r3
   291b0:	bcc	292a4 <_obstack_memory_used@@Base+0x41ec>
   291b4:	ldrb	r3, [r6]
   291b8:	cmp	r3, #0
   291bc:	addne	r4, r5, #5
   291c0:	beq	29298 <_obstack_memory_used@@Base+0x41e0>
   291c4:	mov	r1, r6
   291c8:	mov	r0, r4
   291cc:	bl	118a0 <strcmp@plt>
   291d0:	cmp	r0, #0
   291d4:	add	r2, r5, #5
   291d8:	mov	r0, r4
   291dc:	beq	29278 <_obstack_memory_used@@Base+0x41c0>
   291e0:	ldrb	r3, [r4]
   291e4:	cmp	r3, #0
   291e8:	bne	29200 <_obstack_memory_used@@Base+0x4148>
   291ec:	cmp	r4, r2
   291f0:	bne	292ac <_obstack_memory_used@@Base+0x41f4>
   291f4:	ldrb	r3, [r5, #4]
   291f8:	cmp	r3, #0
   291fc:	beq	292ac <_obstack_memory_used@@Base+0x41f4>
   29200:	bl	11b94 <strlen@plt>
   29204:	add	r0, r0, #1
   29208:	ldrb	r3, [r4, r0]!
   2920c:	cmp	r3, #0
   29210:	bne	291c4 <_obstack_memory_used@@Base+0x410c>
   29214:	ldr	r3, [r5]
   29218:	cmp	r3, #0
   2921c:	addne	r4, r3, #5
   29220:	movne	r5, r3
   29224:	b	291c4 <_obstack_memory_used@@Base+0x410c>
   29228:	cmp	r8, #58	; 0x3a
   2922c:	movcs	r0, r8
   29230:	movcc	r0, #58	; 0x3a
   29234:	add	r0, r0, #9
   29238:	bic	r0, r0, #3
   2923c:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   29240:	subs	r9, r0, #0
   29244:	beq	292e4 <_obstack_memory_used@@Base+0x422c>
   29248:	mov	sl, #0
   2924c:	mov	r3, #1
   29250:	add	r4, r9, #5
   29254:	mov	r1, r6
   29258:	mov	r0, r4
   2925c:	mov	r2, r8
   29260:	str	sl, [r9]
   29264:	strh	r3, [r9, #4]
   29268:	bl	11930 <memcpy@plt>
   2926c:	strb	sl, [r4, r8]
   29270:	str	r9, [r5]
   29274:	strb	sl, [r9, #4]
   29278:	mov	r0, #1
   2927c:	str	r4, [r7, #40]	; 0x28
   29280:	ldrd	r4, [sp]
   29284:	ldrd	r6, [sp, #8]
   29288:	ldrd	r8, [sp, #16]
   2928c:	ldr	sl, [sp, #24]
   29290:	add	sp, sp, #28
   29294:	pop	{pc}		; (ldr pc, [sp], #4)
   29298:	movw	r4, #316	; 0x13c
   2929c:	movt	r4, #3
   292a0:	b	29278 <_obstack_memory_used@@Base+0x41c0>
   292a4:	mov	r0, #1
   292a8:	b	29280 <_obstack_memory_used@@Base+0x41c8>
   292ac:	mov	r0, r6
   292b0:	bl	11b94 <strlen@plt>
   292b4:	add	r3, r5, #64	; 0x40
   292b8:	add	r8, r0, #1
   292bc:	sub	r3, r3, r4
   292c0:	cmp	r3, r8
   292c4:	ble	29228 <_obstack_memory_used@@Base+0x4170>
   292c8:	mov	r1, r6
   292cc:	mov	r2, r8
   292d0:	mov	r0, r4
   292d4:	bl	11930 <memcpy@plt>
   292d8:	mov	r3, #0
   292dc:	strb	r3, [r4, r8]
   292e0:	b	29278 <_obstack_memory_used@@Base+0x41c0>
   292e4:	mov	r0, r9
   292e8:	str	r9, [r5]
   292ec:	b	29280 <_obstack_memory_used@@Base+0x41c8>
   292f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   292f4:	strd	r6, [sp, #8]
   292f8:	subs	r6, r0, #0
   292fc:	str	r8, [sp, #16]
   29300:	str	lr, [sp, #20]
   29304:	beq	29370 <_obstack_memory_used@@Base+0x42b8>
   29308:	bl	11b94 <strlen@plt>
   2930c:	add	r5, r0, #1
   29310:	cmp	r5, #58	; 0x3a
   29314:	movcs	r0, r5
   29318:	movcc	r0, #58	; 0x3a
   2931c:	add	r0, r0, #9
   29320:	bic	r0, r0, #3
   29324:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   29328:	subs	r4, r0, #0
   2932c:	beq	29358 <_obstack_memory_used@@Base+0x42a0>
   29330:	mov	r7, #0
   29334:	mov	ip, #1
   29338:	add	r3, r4, #5
   2933c:	mov	r1, r6
   29340:	mov	r0, r3
   29344:	mov	r2, r5
   29348:	str	r7, [r4]
   2934c:	strh	ip, [r4, #4]
   29350:	bl	11930 <memcpy@plt>
   29354:	strb	r7, [r0, r5]
   29358:	mov	r0, r4
   2935c:	ldrd	r4, [sp]
   29360:	ldrd	r6, [sp, #8]
   29364:	ldr	r8, [sp, #16]
   29368:	add	sp, sp, #20
   2936c:	pop	{pc}		; (ldr pc, [sp], #4)
   29370:	mov	r0, #64	; 0x40
   29374:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   29378:	subs	r4, r0, #0
   2937c:	strne	r6, [r4]
   29380:	strhne	r6, [r4, #4]
   29384:	b	29358 <_obstack_memory_used@@Base+0x42a0>
   29388:	cmp	r0, #1
   2938c:	bxeq	lr
   29390:	cmp	r0, #0
   29394:	bxeq	lr
   29398:	str	r4, [sp, #-8]!
   2939c:	str	lr, [sp, #4]
   293a0:	ldr	r4, [r0]
   293a4:	bl	1ee98 <__assert_fail@plt+0xd124>
   293a8:	subs	r0, r4, #0
   293ac:	bne	293a0 <_obstack_memory_used@@Base+0x42e8>
   293b0:	ldr	r4, [sp]
   293b4:	add	sp, sp, #4
   293b8:	pop	{pc}		; (ldr pc, [sp], #4)
   293bc:	subs	ip, r0, #0
   293c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   293c4:	strd	r6, [sp, #8]
   293c8:	mov	r6, r1
   293cc:	str	r8, [sp, #16]
   293d0:	str	lr, [sp, #20]
   293d4:	beq	294b8 <_obstack_memory_used@@Base+0x4400>
   293d8:	mov	r5, r2
   293dc:	mov	r7, ip
   293e0:	bl	29020 <_obstack_memory_used@@Base+0x3f68>
   293e4:	subs	r4, r0, #0
   293e8:	beq	2948c <_obstack_memory_used@@Base+0x43d4>
   293ec:	mov	r0, r6
   293f0:	mov	r1, r5
   293f4:	bl	119b4 <localtime_r@plt>
   293f8:	cmp	r0, #0
   293fc:	beq	29480 <_obstack_memory_used@@Base+0x43c8>
   29400:	mov	r0, r7
   29404:	mov	r1, r5
   29408:	bl	29178 <_obstack_memory_used@@Base+0x40c0>
   2940c:	subs	r7, r0, #0
   29410:	beq	29480 <_obstack_memory_used@@Base+0x43c8>
   29414:	cmp	r4, #1
   29418:	beq	29478 <_obstack_memory_used@@Base+0x43c0>
   2941c:	bl	11bb8 <__errno_location@plt>
   29420:	ldrb	r3, [r4, #4]
   29424:	mov	r6, r0
   29428:	movw	r0, #64312	; 0xfb38
   2942c:	movt	r0, #2
   29430:	ldr	r8, [r6]
   29434:	cmp	r3, #0
   29438:	beq	294a4 <_obstack_memory_used@@Base+0x43ec>
   2943c:	mov	r2, #1
   29440:	add	r1, r4, #5
   29444:	bl	11bac <setenv@plt>
   29448:	cmp	r0, #0
   2944c:	beq	294b0 <_obstack_memory_used@@Base+0x43f8>
   29450:	ldr	r8, [r6]
   29454:	mov	r7, #0
   29458:	mov	r0, r4
   2945c:	ldr	r4, [r4]
   29460:	bl	1ee98 <__assert_fail@plt+0xd124>
   29464:	cmp	r4, #0
   29468:	bne	29458 <_obstack_memory_used@@Base+0x43a0>
   2946c:	cmp	r7, #0
   29470:	str	r8, [r6]
   29474:	beq	2948c <_obstack_memory_used@@Base+0x43d4>
   29478:	mov	r0, r5
   2947c:	b	29490 <_obstack_memory_used@@Base+0x43d8>
   29480:	cmp	r4, #1
   29484:	movne	r7, #0
   29488:	bne	2941c <_obstack_memory_used@@Base+0x4364>
   2948c:	mov	r0, #0
   29490:	ldrd	r4, [sp]
   29494:	ldrd	r6, [sp, #8]
   29498:	ldr	r8, [sp, #16]
   2949c:	add	sp, sp, #20
   294a0:	pop	{pc}		; (ldr pc, [sp], #4)
   294a4:	bl	11d14 <unsetenv@plt>
   294a8:	cmp	r0, #0
   294ac:	bne	29450 <_obstack_memory_used@@Base+0x4398>
   294b0:	bl	119fc <tzset@plt>
   294b4:	b	29458 <_obstack_memory_used@@Base+0x43a0>
   294b8:	mov	r0, r6
   294bc:	mov	r1, r2
   294c0:	ldrd	r4, [sp]
   294c4:	ldrd	r6, [sp, #8]
   294c8:	ldr	r8, [sp, #16]
   294cc:	ldr	lr, [sp, #20]
   294d0:	add	sp, sp, #24
   294d4:	b	11888 <gmtime_r@plt>
   294d8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   294dc:	subs	r5, r0, #0
   294e0:	strd	r6, [sp, #8]
   294e4:	mov	r6, r1
   294e8:	strd	r8, [sp, #16]
   294ec:	str	lr, [sp, #24]
   294f0:	sub	sp, sp, #52	; 0x34
   294f4:	beq	29638 <_obstack_memory_used@@Base+0x4580>
   294f8:	bl	29020 <_obstack_memory_used@@Base+0x3f68>
   294fc:	subs	r4, r0, #0
   29500:	beq	29648 <_obstack_memory_used@@Base+0x4590>
   29504:	ldr	r3, [r6]
   29508:	mvn	r2, #0
   2950c:	add	r0, sp, #4
   29510:	ldr	r1, [r6, #4]
   29514:	str	r3, [sp, #4]
   29518:	str	r2, [sp, #32]
   2951c:	ldrd	r2, [r6, #8]
   29520:	str	r1, [sp, #8]
   29524:	ldr	r1, [r6, #16]
   29528:	strd	r2, [sp, #12]
   2952c:	ldr	r2, [r6, #20]
   29530:	str	r1, [sp, #20]
   29534:	ldr	r3, [r6, #32]
   29538:	str	r2, [sp, #24]
   2953c:	str	r3, [sp, #36]	; 0x24
   29540:	bl	118b8 <mktime@plt>
   29544:	ldr	r3, [sp, #32]
   29548:	mov	r7, r0
   2954c:	cmp	r3, #0
   29550:	bge	29604 <_obstack_memory_used@@Base+0x454c>
   29554:	cmp	r4, #1
   29558:	beq	29648 <_obstack_memory_used@@Base+0x4590>
   2955c:	mov	r5, #0
   29560:	bl	11bb8 <__errno_location@plt>
   29564:	ldrb	r3, [r4, #4]
   29568:	mov	r8, r0
   2956c:	movw	r0, #64312	; 0xfb38
   29570:	movt	r0, #2
   29574:	ldr	r9, [r8]
   29578:	cmp	r3, #0
   2957c:	beq	29630 <_obstack_memory_used@@Base+0x4578>
   29580:	mov	r2, #1
   29584:	add	r1, r4, #5
   29588:	bl	11bac <setenv@plt>
   2958c:	cmp	r0, #0
   29590:	bne	29624 <_obstack_memory_used@@Base+0x456c>
   29594:	bl	119fc <tzset@plt>
   29598:	mov	r0, r4
   2959c:	ldr	r4, [r4]
   295a0:	bl	1ee98 <__assert_fail@plt+0xd124>
   295a4:	cmp	r4, #0
   295a8:	bne	29598 <_obstack_memory_used@@Base+0x44e0>
   295ac:	cmp	r5, #0
   295b0:	str	r9, [r8]
   295b4:	beq	29648 <_obstack_memory_used@@Base+0x4590>
   295b8:	ldrd	r0, [sp, #4]
   295bc:	ldrd	r2, [sp, #12]
   295c0:	ldrd	r4, [sp, #20]
   295c4:	strd	r0, [r6]
   295c8:	ldrd	r0, [sp, #28]
   295cc:	strd	r2, [r6, #8]
   295d0:	ldrd	r2, [sp, #36]	; 0x24
   295d4:	strd	r4, [r6, #16]
   295d8:	ldr	ip, [sp, #44]	; 0x2c
   295dc:	strd	r0, [r6, #24]
   295e0:	strd	r2, [r6, #32]
   295e4:	str	ip, [r6, #40]	; 0x28
   295e8:	mov	r0, r7
   295ec:	add	sp, sp, #52	; 0x34
   295f0:	ldrd	r4, [sp]
   295f4:	ldrd	r6, [sp, #8]
   295f8:	ldrd	r8, [sp, #16]
   295fc:	add	sp, sp, #24
   29600:	pop	{pc}		; (ldr pc, [sp], #4)
   29604:	mov	r0, r5
   29608:	add	r1, sp, #4
   2960c:	bl	29178 <_obstack_memory_used@@Base+0x40c0>
   29610:	subs	r5, r0, #0
   29614:	beq	29554 <_obstack_memory_used@@Base+0x449c>
   29618:	cmp	r4, #1
   2961c:	beq	295b8 <_obstack_memory_used@@Base+0x4500>
   29620:	b	29560 <_obstack_memory_used@@Base+0x44a8>
   29624:	mov	r5, #0
   29628:	ldr	r9, [r8]
   2962c:	b	29598 <_obstack_memory_used@@Base+0x44e0>
   29630:	bl	11d14 <unsetenv@plt>
   29634:	b	2958c <_obstack_memory_used@@Base+0x44d4>
   29638:	mov	r0, r1
   2963c:	bl	11cc0 <timegm@plt>
   29640:	mov	r7, r0
   29644:	b	295e8 <_obstack_memory_used@@Base+0x4530>
   29648:	mvn	r7, #0
   2964c:	b	295e8 <_obstack_memory_used@@Base+0x4530>
   29650:	cmp	r1, #0
   29654:	strd	r4, [sp, #-16]!
   29658:	mov	ip, r3
   2965c:	str	r6, [sp, #8]
   29660:	mov	r4, r0
   29664:	str	lr, [sp, #12]
   29668:	sub	sp, sp, #32
   2966c:	ldr	r5, [sp, #48]	; 0x30
   29670:	ldr	r6, [sp, #52]	; 0x34
   29674:	beq	297b8 <_obstack_memory_used@@Base+0x4700>
   29678:	mov	r3, r1
   2967c:	mov	r1, #1
   29680:	stm	sp, {r2, ip}
   29684:	movw	r2, #760	; 0x2f8
   29688:	movt	r2, #3
   2968c:	bl	11c18 <__fprintf_chk@plt>
   29690:	mov	r2, #5
   29694:	movw	r1, #780	; 0x30c
   29698:	movt	r1, #3
   2969c:	mov	r0, #0
   296a0:	bl	11984 <dcgettext@plt>
   296a4:	movw	ip, #2022	; 0x7e6
   296a8:	mov	r3, r0
   296ac:	mov	r1, #1
   296b0:	movw	r2, #1508	; 0x5e4
   296b4:	movt	r2, #3
   296b8:	mov	r0, r4
   296bc:	str	ip, [sp]
   296c0:	bl	11c18 <__fprintf_chk@plt>
   296c4:	mov	r1, r4
   296c8:	mov	r0, #10
   296cc:	bl	11978 <fputc_unlocked@plt>
   296d0:	mov	r2, #5
   296d4:	movw	r1, #784	; 0x310
   296d8:	movt	r1, #3
   296dc:	mov	r0, #0
   296e0:	bl	11984 <dcgettext@plt>
   296e4:	mov	r2, r0
   296e8:	mov	r1, #1
   296ec:	movw	r3, #956	; 0x3bc
   296f0:	movt	r3, #3
   296f4:	mov	r0, r4
   296f8:	bl	11c18 <__fprintf_chk@plt>
   296fc:	mov	r1, r4
   29700:	mov	r0, #10
   29704:	bl	11978 <fputc_unlocked@plt>
   29708:	cmp	r6, #9
   2970c:	ldrls	pc, [pc, r6, lsl #2]
   29710:	b	29a24 <_obstack_memory_used@@Base+0x496c>
   29714:	andeq	r9, r2, r4, lsr #15
   29718:	ldrdeq	r9, [r2], -r4
   2971c:	andeq	r9, r2, r0, lsl r8
   29720:	andeq	r9, r2, r0, asr r8
   29724:	muleq	r2, r8, r8
   29728:	ldrdeq	r9, [r2], -r0
   2972c:	andeq	r9, r2, r8, lsl r9
   29730:	andeq	r9, r2, ip, ror #18
   29734:	andeq	r9, r2, r4, asr #19
   29738:	andeq	r9, r2, ip, lsr r7
   2973c:	movw	r1, #1260	; 0x4ec
   29740:	movt	r1, #3
   29744:	mov	r2, #5
   29748:	mov	r0, #0
   2974c:	bl	11984 <dcgettext@plt>
   29750:	ldr	lr, [r5, #4]
   29754:	mov	r2, r0
   29758:	mov	r1, #1
   2975c:	mov	r0, r4
   29760:	ldr	r3, [r5, #8]
   29764:	ldr	ip, [r5, #32]
   29768:	str	lr, [sp]
   2976c:	ldr	lr, [r5, #12]
   29770:	str	ip, [sp, #28]
   29774:	ldr	ip, [r5, #28]
   29778:	str	r3, [sp, #4]
   2977c:	ldr	r3, [r5, #16]
   29780:	str	lr, [sp, #8]
   29784:	ldr	lr, [r5, #20]
   29788:	str	ip, [sp, #24]
   2978c:	ldr	ip, [r5, #24]
   29790:	str	r3, [sp, #12]
   29794:	ldr	r3, [r5]
   29798:	str	lr, [sp, #16]
   2979c:	str	ip, [sp, #20]
   297a0:	bl	11c18 <__fprintf_chk@plt>
   297a4:	add	sp, sp, #32
   297a8:	ldrd	r4, [sp]
   297ac:	ldr	r6, [sp, #8]
   297b0:	add	sp, sp, #12
   297b4:	pop	{pc}		; (ldr pc, [sp], #4)
   297b8:	mov	r3, r2
   297bc:	mov	r1, #1
   297c0:	str	ip, [sp]
   297c4:	movw	r2, #772	; 0x304
   297c8:	movt	r2, #3
   297cc:	bl	11c18 <__fprintf_chk@plt>
   297d0:	b	29690 <_obstack_memory_used@@Base+0x45d8>
   297d4:	mov	r2, #5
   297d8:	movw	r1, #992	; 0x3e0
   297dc:	movt	r1, #3
   297e0:	mov	r0, #0
   297e4:	bl	11984 <dcgettext@plt>
   297e8:	ldr	r3, [r5]
   297ec:	mov	r2, r0
   297f0:	mov	r1, #1
   297f4:	mov	r0, r4
   297f8:	add	sp, sp, #32
   297fc:	ldrd	r4, [sp]
   29800:	ldr	r6, [sp, #8]
   29804:	ldr	lr, [sp, #12]
   29808:	add	sp, sp, #16
   2980c:	b	11c18 <__fprintf_chk@plt>
   29810:	mov	r2, #5
   29814:	movw	r1, #1008	; 0x3f0
   29818:	movt	r1, #3
   2981c:	mov	r0, #0
   29820:	bl	11984 <dcgettext@plt>
   29824:	ldm	r5, {r3, ip}
   29828:	mov	r2, r0
   2982c:	mov	r1, #1
   29830:	mov	r0, r4
   29834:	str	ip, [sp, #48]	; 0x30
   29838:	add	sp, sp, #32
   2983c:	ldrd	r4, [sp]
   29840:	ldr	r6, [sp, #8]
   29844:	ldr	lr, [sp, #12]
   29848:	add	sp, sp, #16
   2984c:	b	11c18 <__fprintf_chk@plt>
   29850:	mov	r2, #5
   29854:	movw	r1, #1032	; 0x408
   29858:	movt	r1, #3
   2985c:	mov	r0, #0
   29860:	bl	11984 <dcgettext@plt>
   29864:	ldm	r5, {r3, lr}
   29868:	mov	r2, r0
   2986c:	mov	r1, #1
   29870:	mov	r0, r4
   29874:	ldr	ip, [r5, #8]
   29878:	str	lr, [sp, #48]	; 0x30
   2987c:	str	ip, [sp, #52]	; 0x34
   29880:	add	sp, sp, #32
   29884:	ldrd	r4, [sp]
   29888:	ldr	r6, [sp, #8]
   2988c:	ldr	lr, [sp, #12]
   29890:	add	sp, sp, #16
   29894:	b	11c18 <__fprintf_chk@plt>
   29898:	mov	r2, #5
   2989c:	movw	r1, #1060	; 0x424
   298a0:	movt	r1, #3
   298a4:	mov	r0, #0
   298a8:	bl	11984 <dcgettext@plt>
   298ac:	ldmib	r5, {r3, ip, lr}
   298b0:	mov	r2, r0
   298b4:	mov	r1, #1
   298b8:	mov	r0, r4
   298bc:	str	r3, [sp]
   298c0:	ldr	r3, [r5]
   298c4:	stmib	sp, {ip, lr}
   298c8:	bl	11c18 <__fprintf_chk@plt>
   298cc:	b	297a4 <_obstack_memory_used@@Base+0x46ec>
   298d0:	mov	r2, #5
   298d4:	movw	r1, #1092	; 0x444
   298d8:	movt	r1, #3
   298dc:	mov	r0, #0
   298e0:	bl	11984 <dcgettext@plt>
   298e4:	ldmib	r5, {ip, lr}
   298e8:	mov	r2, r0
   298ec:	mov	r1, #1
   298f0:	mov	r0, r4
   298f4:	ldr	r3, [r5, #16]
   298f8:	str	ip, [sp]
   298fc:	ldr	ip, [r5, #12]
   29900:	str	r3, [sp, #12]
   29904:	ldr	r3, [r5]
   29908:	str	lr, [sp, #4]
   2990c:	str	ip, [sp, #8]
   29910:	bl	11c18 <__fprintf_chk@plt>
   29914:	b	297a4 <_obstack_memory_used@@Base+0x46ec>
   29918:	mov	r2, #5
   2991c:	movw	r1, #1128	; 0x468
   29920:	movt	r1, #3
   29924:	mov	r0, #0
   29928:	bl	11984 <dcgettext@plt>
   2992c:	ldr	lr, [r5, #4]
   29930:	mov	r2, r0
   29934:	mov	r1, #1
   29938:	mov	r0, r4
   2993c:	ldr	r3, [r5, #8]
   29940:	ldr	ip, [r5, #20]
   29944:	str	lr, [sp]
   29948:	ldr	lr, [r5, #12]
   2994c:	str	ip, [sp, #16]
   29950:	ldr	ip, [r5, #16]
   29954:	str	r3, [sp, #4]
   29958:	ldr	r3, [r5]
   2995c:	str	lr, [sp, #8]
   29960:	str	ip, [sp, #12]
   29964:	bl	11c18 <__fprintf_chk@plt>
   29968:	b	297a4 <_obstack_memory_used@@Base+0x46ec>
   2996c:	mov	r2, #5
   29970:	movw	r1, #1168	; 0x490
   29974:	movt	r1, #3
   29978:	mov	r0, #0
   2997c:	bl	11984 <dcgettext@plt>
   29980:	ldmib	r5, {r3, ip}
   29984:	mov	r2, r0
   29988:	mov	r1, #1
   2998c:	mov	r0, r4
   29990:	ldr	lr, [r5, #24]
   29994:	str	r3, [sp]
   29998:	ldr	r3, [r5, #12]
   2999c:	str	lr, [sp, #20]
   299a0:	ldr	lr, [r5, #20]
   299a4:	str	ip, [sp, #4]
   299a8:	ldr	ip, [r5, #16]
   299ac:	str	r3, [sp, #8]
   299b0:	ldr	r3, [r5]
   299b4:	str	ip, [sp, #12]
   299b8:	str	lr, [sp, #16]
   299bc:	bl	11c18 <__fprintf_chk@plt>
   299c0:	b	297a4 <_obstack_memory_used@@Base+0x46ec>
   299c4:	mov	r2, #5
   299c8:	movw	r1, #1212	; 0x4bc
   299cc:	movt	r1, #3
   299d0:	mov	r0, #0
   299d4:	bl	11984 <dcgettext@plt>
   299d8:	ldmib	r5, {ip, lr}
   299dc:	mov	r2, r0
   299e0:	mov	r1, #1
   299e4:	mov	r0, r4
   299e8:	ldr	r3, [r5, #28]
   299ec:	str	ip, [sp]
   299f0:	ldr	ip, [r5, #12]
   299f4:	str	r3, [sp, #24]
   299f8:	ldr	r3, [r5, #24]
   299fc:	str	lr, [sp, #4]
   29a00:	ldr	lr, [r5, #16]
   29a04:	str	ip, [sp, #8]
   29a08:	ldr	ip, [r5, #20]
   29a0c:	str	r3, [sp, #20]
   29a10:	ldr	r3, [r5]
   29a14:	str	lr, [sp, #12]
   29a18:	str	ip, [sp, #16]
   29a1c:	bl	11c18 <__fprintf_chk@plt>
   29a20:	b	297a4 <_obstack_memory_used@@Base+0x46ec>
   29a24:	movw	r1, #1312	; 0x520
   29a28:	movt	r1, #3
   29a2c:	b	29744 <_obstack_memory_used@@Base+0x468c>
   29a30:	strd	r4, [sp, #-12]!
   29a34:	str	lr, [sp, #8]
   29a38:	sub	sp, sp, #12
   29a3c:	ldr	r5, [sp, #24]
   29a40:	ldr	ip, [r5]
   29a44:	cmp	ip, #0
   29a48:	beq	29a64 <_obstack_memory_used@@Base+0x49ac>
   29a4c:	mov	lr, r5
   29a50:	mov	ip, #0
   29a54:	ldr	r4, [lr, #4]!
   29a58:	add	ip, ip, #1
   29a5c:	cmp	r4, #0
   29a60:	bne	29a54 <_obstack_memory_used@@Base+0x499c>
   29a64:	stm	sp, {r5, ip}
   29a68:	bl	29650 <_obstack_memory_used@@Base+0x4598>
   29a6c:	add	sp, sp, #12
   29a70:	ldrd	r4, [sp]
   29a74:	add	sp, sp, #8
   29a78:	pop	{pc}		; (ldr pc, [sp], #4)
   29a7c:	push	{lr}		; (str lr, [sp, #-4]!)
   29a80:	sub	sp, sp, #52	; 0x34
   29a84:	ldr	ip, [sp, #56]	; 0x38
   29a88:	ldr	lr, [ip]
   29a8c:	cmp	lr, #0
   29a90:	str	lr, [sp, #8]
   29a94:	beq	29b2c <_obstack_memory_used@@Base+0x4a74>
   29a98:	ldr	lr, [ip, #4]
   29a9c:	cmp	lr, #0
   29aa0:	str	lr, [sp, #12]
   29aa4:	beq	29b40 <_obstack_memory_used@@Base+0x4a88>
   29aa8:	ldr	lr, [ip, #8]
   29aac:	cmp	lr, #0
   29ab0:	str	lr, [sp, #16]
   29ab4:	beq	29b48 <_obstack_memory_used@@Base+0x4a90>
   29ab8:	ldr	lr, [ip, #12]
   29abc:	cmp	lr, #0
   29ac0:	str	lr, [sp, #20]
   29ac4:	beq	29b50 <_obstack_memory_used@@Base+0x4a98>
   29ac8:	ldr	lr, [ip, #16]
   29acc:	cmp	lr, #0
   29ad0:	str	lr, [sp, #24]
   29ad4:	beq	29b58 <_obstack_memory_used@@Base+0x4aa0>
   29ad8:	ldr	lr, [ip, #20]
   29adc:	cmp	lr, #0
   29ae0:	str	lr, [sp, #28]
   29ae4:	beq	29b60 <_obstack_memory_used@@Base+0x4aa8>
   29ae8:	ldr	lr, [ip, #24]
   29aec:	cmp	lr, #0
   29af0:	str	lr, [sp, #32]
   29af4:	beq	29b68 <_obstack_memory_used@@Base+0x4ab0>
   29af8:	ldr	lr, [ip, #28]
   29afc:	cmp	lr, #0
   29b00:	str	lr, [sp, #36]	; 0x24
   29b04:	beq	29b70 <_obstack_memory_used@@Base+0x4ab8>
   29b08:	ldr	lr, [ip, #32]
   29b0c:	cmp	lr, #0
   29b10:	str	lr, [sp, #40]	; 0x28
   29b14:	beq	29b78 <_obstack_memory_used@@Base+0x4ac0>
   29b18:	ldr	ip, [ip, #36]	; 0x24
   29b1c:	cmp	ip, #0
   29b20:	str	ip, [sp, #44]	; 0x2c
   29b24:	movne	lr, #10
   29b28:	moveq	lr, #9
   29b2c:	add	ip, sp, #8
   29b30:	stm	sp, {ip, lr}
   29b34:	bl	29650 <_obstack_memory_used@@Base+0x4598>
   29b38:	add	sp, sp, #52	; 0x34
   29b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   29b40:	mov	lr, #1
   29b44:	b	29b2c <_obstack_memory_used@@Base+0x4a74>
   29b48:	mov	lr, #2
   29b4c:	b	29b2c <_obstack_memory_used@@Base+0x4a74>
   29b50:	mov	lr, #3
   29b54:	b	29b2c <_obstack_memory_used@@Base+0x4a74>
   29b58:	mov	lr, #4
   29b5c:	b	29b2c <_obstack_memory_used@@Base+0x4a74>
   29b60:	mov	lr, #5
   29b64:	b	29b2c <_obstack_memory_used@@Base+0x4a74>
   29b68:	mov	lr, #6
   29b6c:	b	29b2c <_obstack_memory_used@@Base+0x4a74>
   29b70:	mov	lr, #7
   29b74:	b	29b2c <_obstack_memory_used@@Base+0x4a74>
   29b78:	mov	lr, #8
   29b7c:	b	29b2c <_obstack_memory_used@@Base+0x4a74>
   29b80:	push	{r3}		; (str r3, [sp, #-4]!)
   29b84:	push	{lr}		; (str lr, [sp, #-4]!)
   29b88:	sub	sp, sp, #56	; 0x38
   29b8c:	ldr	ip, [sp, #64]	; 0x40
   29b90:	add	r3, sp, #64	; 0x40
   29b94:	str	r3, [sp, #12]
   29b98:	cmp	ip, #0
   29b9c:	str	ip, [sp, #16]
   29ba0:	beq	29c38 <_obstack_memory_used@@Base+0x4b80>
   29ba4:	ldr	ip, [sp, #68]	; 0x44
   29ba8:	cmp	ip, #0
   29bac:	str	ip, [sp, #20]
   29bb0:	beq	29c5c <_obstack_memory_used@@Base+0x4ba4>
   29bb4:	ldr	ip, [sp, #72]	; 0x48
   29bb8:	cmp	ip, #0
   29bbc:	str	ip, [sp, #24]
   29bc0:	beq	29c64 <_obstack_memory_used@@Base+0x4bac>
   29bc4:	ldr	ip, [sp, #76]	; 0x4c
   29bc8:	cmp	ip, #0
   29bcc:	str	ip, [sp, #28]
   29bd0:	beq	29c6c <_obstack_memory_used@@Base+0x4bb4>
   29bd4:	ldr	ip, [sp, #80]	; 0x50
   29bd8:	cmp	ip, #0
   29bdc:	str	ip, [sp, #32]
   29be0:	beq	29c74 <_obstack_memory_used@@Base+0x4bbc>
   29be4:	ldr	ip, [sp, #84]	; 0x54
   29be8:	cmp	ip, #0
   29bec:	str	ip, [sp, #36]	; 0x24
   29bf0:	beq	29c7c <_obstack_memory_used@@Base+0x4bc4>
   29bf4:	ldr	ip, [sp, #88]	; 0x58
   29bf8:	cmp	ip, #0
   29bfc:	str	ip, [sp, #40]	; 0x28
   29c00:	beq	29c84 <_obstack_memory_used@@Base+0x4bcc>
   29c04:	ldr	ip, [sp, #92]	; 0x5c
   29c08:	cmp	ip, #0
   29c0c:	str	ip, [sp, #44]	; 0x2c
   29c10:	beq	29c8c <_obstack_memory_used@@Base+0x4bd4>
   29c14:	ldr	ip, [sp, #96]	; 0x60
   29c18:	cmp	ip, #0
   29c1c:	str	ip, [sp, #48]	; 0x30
   29c20:	beq	29c94 <_obstack_memory_used@@Base+0x4bdc>
   29c24:	ldr	r3, [sp, #100]	; 0x64
   29c28:	cmp	r3, #0
   29c2c:	str	r3, [sp, #52]	; 0x34
   29c30:	movne	ip, #10
   29c34:	moveq	ip, #9
   29c38:	ldr	r3, [sp, #60]	; 0x3c
   29c3c:	add	lr, sp, #16
   29c40:	str	lr, [sp]
   29c44:	str	ip, [sp, #4]
   29c48:	bl	29650 <_obstack_memory_used@@Base+0x4598>
   29c4c:	add	sp, sp, #56	; 0x38
   29c50:	pop	{lr}		; (ldr lr, [sp], #4)
   29c54:	add	sp, sp, #4
   29c58:	bx	lr
   29c5c:	mov	ip, #1
   29c60:	b	29c38 <_obstack_memory_used@@Base+0x4b80>
   29c64:	mov	ip, #2
   29c68:	b	29c38 <_obstack_memory_used@@Base+0x4b80>
   29c6c:	mov	ip, #3
   29c70:	b	29c38 <_obstack_memory_used@@Base+0x4b80>
   29c74:	mov	ip, #4
   29c78:	b	29c38 <_obstack_memory_used@@Base+0x4b80>
   29c7c:	mov	ip, #5
   29c80:	b	29c38 <_obstack_memory_used@@Base+0x4b80>
   29c84:	mov	ip, #6
   29c88:	b	29c38 <_obstack_memory_used@@Base+0x4b80>
   29c8c:	mov	ip, #7
   29c90:	b	29c38 <_obstack_memory_used@@Base+0x4b80>
   29c94:	mov	ip, #8
   29c98:	b	29c38 <_obstack_memory_used@@Base+0x4b80>
   29c9c:	movw	r3, #4900	; 0x1324
   29ca0:	movt	r3, #4
   29ca4:	str	r4, [sp, #-8]!
   29ca8:	mov	r0, #10
   29cac:	ldr	r1, [r3]
   29cb0:	str	lr, [sp, #4]
   29cb4:	bl	11978 <fputc_unlocked@plt>
   29cb8:	mov	r2, #5
   29cbc:	movw	r1, #1372	; 0x55c
   29cc0:	movt	r1, #3
   29cc4:	mov	r0, #0
   29cc8:	bl	11984 <dcgettext@plt>
   29ccc:	mov	r1, r0
   29cd0:	movw	r2, #1392	; 0x570
   29cd4:	movt	r2, #3
   29cd8:	mov	r0, #1
   29cdc:	bl	11bf4 <__printf_chk@plt>
   29ce0:	mov	r2, #5
   29ce4:	movw	r1, #1416	; 0x588
   29ce8:	movt	r1, #3
   29cec:	mov	r0, #0
   29cf0:	bl	11984 <dcgettext@plt>
   29cf4:	mov	r1, r0
   29cf8:	movw	r3, #63236	; 0xf704
   29cfc:	movt	r3, #2
   29d00:	movw	r2, #63276	; 0xf72c
   29d04:	movt	r2, #2
   29d08:	mov	r0, #1
   29d0c:	bl	11bf4 <__printf_chk@plt>
   29d10:	mov	r2, #5
   29d14:	movw	r1, #1436	; 0x59c
   29d18:	movt	r1, #3
   29d1c:	mov	r0, #0
   29d20:	bl	11984 <dcgettext@plt>
   29d24:	mov	r1, r0
   29d28:	movw	r2, #1476	; 0x5c4
   29d2c:	movt	r2, #3
   29d30:	mov	r0, #1
   29d34:	ldr	r4, [sp]
   29d38:	ldr	lr, [sp, #4]
   29d3c:	add	sp, sp, #8
   29d40:	b	11bf4 <__printf_chk@plt>
   29d44:	strd	r4, [sp, #-16]!
   29d48:	mov	r4, r0
   29d4c:	mov	r5, r2
   29d50:	str	r6, [sp, #8]
   29d54:	mov	r6, r1
   29d58:	str	lr, [sp, #12]
   29d5c:	bl	2b908 <_obstack_memory_used@@Base+0x6850>
   29d60:	cmp	r0, #0
   29d64:	beq	29d78 <_obstack_memory_used@@Base+0x4cc0>
   29d68:	ldrd	r4, [sp]
   29d6c:	ldr	r6, [sp, #8]
   29d70:	add	sp, sp, #12
   29d74:	pop	{pc}		; (ldr pc, [sp], #4)
   29d78:	cmp	r4, #0
   29d7c:	beq	29d8c <_obstack_memory_used@@Base+0x4cd4>
   29d80:	cmp	r6, #0
   29d84:	cmpne	r5, #0
   29d88:	beq	29d68 <_obstack_memory_used@@Base+0x4cb0>
   29d8c:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29d90:	str	r4, [sp, #-8]!
   29d94:	str	lr, [sp, #4]
   29d98:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   29d9c:	cmp	r0, #0
   29da0:	beq	29db0 <_obstack_memory_used@@Base+0x4cf8>
   29da4:	ldr	r4, [sp]
   29da8:	add	sp, sp, #4
   29dac:	pop	{pc}		; (ldr pc, [sp], #4)
   29db0:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29db4:	str	r4, [sp, #-8]!
   29db8:	str	lr, [sp, #4]
   29dbc:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   29dc0:	cmp	r0, #0
   29dc4:	beq	29dd4 <_obstack_memory_used@@Base+0x4d1c>
   29dc8:	ldr	r4, [sp]
   29dcc:	add	sp, sp, #4
   29dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   29dd4:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29dd8:	str	r4, [sp, #-8]!
   29ddc:	str	lr, [sp, #4]
   29de0:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   29de4:	cmp	r0, #0
   29de8:	beq	29df8 <_obstack_memory_used@@Base+0x4d40>
   29dec:	ldr	r4, [sp]
   29df0:	add	sp, sp, #4
   29df4:	pop	{pc}		; (ldr pc, [sp], #4)
   29df8:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29dfc:	strd	r4, [sp, #-16]!
   29e00:	mov	r5, r0
   29e04:	mov	r4, r1
   29e08:	str	r6, [sp, #8]
   29e0c:	str	lr, [sp, #12]
   29e10:	bl	2b5c4 <_obstack_memory_used@@Base+0x650c>
   29e14:	cmp	r0, #0
   29e18:	beq	29e2c <_obstack_memory_used@@Base+0x4d74>
   29e1c:	ldrd	r4, [sp]
   29e20:	ldr	r6, [sp, #8]
   29e24:	add	sp, sp, #12
   29e28:	pop	{pc}		; (ldr pc, [sp], #4)
   29e2c:	adds	r4, r4, #0
   29e30:	movne	r4, #1
   29e34:	cmp	r5, #0
   29e38:	moveq	r4, #1
   29e3c:	cmp	r4, #0
   29e40:	beq	29e1c <_obstack_memory_used@@Base+0x4d64>
   29e44:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29e48:	cmp	r1, #0
   29e4c:	orreq	r1, r1, #1
   29e50:	str	r4, [sp, #-8]!
   29e54:	str	lr, [sp, #4]
   29e58:	bl	2b5c4 <_obstack_memory_used@@Base+0x650c>
   29e5c:	cmp	r0, #0
   29e60:	beq	29e70 <_obstack_memory_used@@Base+0x4db8>
   29e64:	ldr	r4, [sp]
   29e68:	add	sp, sp, #4
   29e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   29e70:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29e74:	strd	r4, [sp, #-16]!
   29e78:	mov	r4, r0
   29e7c:	mov	r5, r2
   29e80:	str	r6, [sp, #8]
   29e84:	mov	r6, r1
   29e88:	str	lr, [sp, #12]
   29e8c:	bl	2b908 <_obstack_memory_used@@Base+0x6850>
   29e90:	cmp	r0, #0
   29e94:	beq	29ea8 <_obstack_memory_used@@Base+0x4df0>
   29e98:	ldrd	r4, [sp]
   29e9c:	ldr	r6, [sp, #8]
   29ea0:	add	sp, sp, #12
   29ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   29ea8:	cmp	r4, #0
   29eac:	beq	29ebc <_obstack_memory_used@@Base+0x4e04>
   29eb0:	cmp	r6, #0
   29eb4:	cmpne	r5, #0
   29eb8:	beq	29e98 <_obstack_memory_used@@Base+0x4de0>
   29ebc:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29ec0:	cmp	r2, #0
   29ec4:	cmpne	r1, #0
   29ec8:	str	r4, [sp, #-8]!
   29ecc:	moveq	r2, #1
   29ed0:	str	lr, [sp, #4]
   29ed4:	moveq	r1, r2
   29ed8:	bl	2b908 <_obstack_memory_used@@Base+0x6850>
   29edc:	cmp	r0, #0
   29ee0:	beq	29ef0 <_obstack_memory_used@@Base+0x4e38>
   29ee4:	ldr	r4, [sp]
   29ee8:	add	sp, sp, #4
   29eec:	pop	{pc}		; (ldr pc, [sp], #4)
   29ef0:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29ef4:	mov	r2, r1
   29ef8:	mov	r1, r0
   29efc:	str	r4, [sp, #-8]!
   29f00:	mov	r0, #0
   29f04:	str	lr, [sp, #4]
   29f08:	bl	2b908 <_obstack_memory_used@@Base+0x6850>
   29f0c:	cmp	r0, #0
   29f10:	beq	29f20 <_obstack_memory_used@@Base+0x4e68>
   29f14:	ldr	r4, [sp]
   29f18:	add	sp, sp, #4
   29f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   29f20:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29f24:	cmp	r1, #0
   29f28:	cmpne	r0, #0
   29f2c:	str	r4, [sp, #-8]!
   29f30:	moveq	r2, #1
   29f34:	movne	r2, r1
   29f38:	str	lr, [sp, #4]
   29f3c:	movne	r1, r0
   29f40:	moveq	r1, r2
   29f44:	mov	r0, #0
   29f48:	bl	2b908 <_obstack_memory_used@@Base+0x6850>
   29f4c:	cmp	r0, #0
   29f50:	beq	29f60 <_obstack_memory_used@@Base+0x4ea8>
   29f54:	ldr	r4, [sp]
   29f58:	add	sp, sp, #4
   29f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   29f60:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29f64:	cmp	r0, #0
   29f68:	strd	r4, [sp, #-16]!
   29f6c:	mov	r5, r1
   29f70:	ldr	r4, [r1]
   29f74:	str	r6, [sp, #8]
   29f78:	str	lr, [sp, #12]
   29f7c:	beq	29fc4 <_obstack_memory_used@@Base+0x4f0c>
   29f80:	lsr	r3, r4, #1
   29f84:	add	r3, r3, #1
   29f88:	adds	r4, r4, r3
   29f8c:	bcs	29fc0 <_obstack_memory_used@@Base+0x4f08>
   29f90:	mov	r2, #1
   29f94:	mov	r1, r4
   29f98:	bl	2b908 <_obstack_memory_used@@Base+0x6850>
   29f9c:	cmp	r0, #0
   29fa0:	beq	29fb8 <_obstack_memory_used@@Base+0x4f00>
   29fa4:	ldr	r6, [sp, #8]
   29fa8:	str	r4, [r5]
   29fac:	ldrd	r4, [sp]
   29fb0:	add	sp, sp, #12
   29fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   29fb8:	cmp	r4, #0
   29fbc:	beq	29fa4 <_obstack_memory_used@@Base+0x4eec>
   29fc0:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   29fc4:	cmp	r4, #0
   29fc8:	mov	r2, #1
   29fcc:	moveq	r4, #64	; 0x40
   29fd0:	mov	r1, r4
   29fd4:	bl	2b908 <_obstack_memory_used@@Base+0x6850>
   29fd8:	cmp	r0, #0
   29fdc:	bne	29fa4 <_obstack_memory_used@@Base+0x4eec>
   29fe0:	b	29fc0 <_obstack_memory_used@@Base+0x4f08>
   29fe4:	cmp	r0, #0
   29fe8:	strd	r4, [sp, #-16]!
   29fec:	mov	r5, r1
   29ff0:	ldr	r4, [r1]
   29ff4:	str	r6, [sp, #8]
   29ff8:	mov	r6, r2
   29ffc:	str	lr, [sp, #12]
   2a000:	beq	2a048 <_obstack_memory_used@@Base+0x4f90>
   2a004:	lsr	r3, r4, #1
   2a008:	add	r3, r3, #1
   2a00c:	adds	r4, r4, r3
   2a010:	bcs	2a044 <_obstack_memory_used@@Base+0x4f8c>
   2a014:	mov	r1, r4
   2a018:	bl	2b908 <_obstack_memory_used@@Base+0x6850>
   2a01c:	cmp	r0, #0
   2a020:	beq	2a038 <_obstack_memory_used@@Base+0x4f80>
   2a024:	ldr	r6, [sp, #8]
   2a028:	str	r4, [r5]
   2a02c:	ldrd	r4, [sp]
   2a030:	add	sp, sp, #12
   2a034:	pop	{pc}		; (ldr pc, [sp], #4)
   2a038:	cmp	r4, #0
   2a03c:	cmpne	r6, #0
   2a040:	beq	2a024 <_obstack_memory_used@@Base+0x4f6c>
   2a044:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a048:	cmp	r4, #0
   2a04c:	bne	2a060 <_obstack_memory_used@@Base+0x4fa8>
   2a050:	mov	r4, #64	; 0x40
   2a054:	udiv	r4, r4, r2
   2a058:	cmp	r2, #64	; 0x40
   2a05c:	addhi	r4, r4, #1
   2a060:	mov	r2, r6
   2a064:	mov	r1, r4
   2a068:	mov	r0, #0
   2a06c:	bl	2b908 <_obstack_memory_used@@Base+0x6850>
   2a070:	cmp	r0, #0
   2a074:	bne	2a024 <_obstack_memory_used@@Base+0x4f6c>
   2a078:	b	2a044 <_obstack_memory_used@@Base+0x4f8c>
   2a07c:	ldr	ip, [r1]
   2a080:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a084:	strd	r6, [sp, #8]
   2a088:	mov	r7, r1
   2a08c:	mov	r6, r0
   2a090:	str	r8, [sp, #16]
   2a094:	mvn	r8, r3
   2a098:	lsr	r8, r8, #31
   2a09c:	str	lr, [sp, #20]
   2a0a0:	asr	r1, ip, #1
   2a0a4:	ldr	lr, [sp, #24]
   2a0a8:	adds	r4, ip, r1
   2a0ac:	mvnvs	r4, #-2147483648	; 0x80000000
   2a0b0:	cmp	r3, r4
   2a0b4:	movge	r1, #0
   2a0b8:	andlt	r1, r8, #1
   2a0bc:	cmp	r1, #0
   2a0c0:	movne	r4, r3
   2a0c4:	smull	r0, r1, r4, lr
   2a0c8:	cmp	r1, r0, asr #31
   2a0cc:	bne	2a17c <_obstack_memory_used@@Base+0x50c4>
   2a0d0:	cmp	r0, #63	; 0x3f
   2a0d4:	mov	r5, r0
   2a0d8:	ble	2a148 <_obstack_memory_used@@Base+0x5090>
   2a0dc:	cmp	r6, #0
   2a0e0:	sub	r1, r4, ip
   2a0e4:	streq	r6, [r7]
   2a0e8:	cmp	r1, r2
   2a0ec:	bge	2a11c <_obstack_memory_used@@Base+0x5064>
   2a0f0:	adds	r4, ip, r2
   2a0f4:	bvs	2a178 <_obstack_memory_used@@Base+0x50c0>
   2a0f8:	cmp	r4, r3
   2a0fc:	movle	r3, #0
   2a100:	andgt	r3, r8, #1
   2a104:	cmp	r3, #0
   2a108:	bne	2a178 <_obstack_memory_used@@Base+0x50c0>
   2a10c:	smull	r0, r1, r4, lr
   2a110:	cmp	r1, r0, asr #31
   2a114:	mov	r5, r0
   2a118:	bne	2a178 <_obstack_memory_used@@Base+0x50c0>
   2a11c:	mov	r1, r5
   2a120:	mov	r0, r6
   2a124:	bl	2b5c4 <_obstack_memory_used@@Base+0x650c>
   2a128:	cmp	r0, #0
   2a12c:	beq	2a15c <_obstack_memory_used@@Base+0x50a4>
   2a130:	ldr	r8, [sp, #16]
   2a134:	str	r4, [r7]
   2a138:	ldrd	r4, [sp]
   2a13c:	ldrd	r6, [sp, #8]
   2a140:	add	sp, sp, #20
   2a144:	pop	{pc}		; (ldr pc, [sp], #4)
   2a148:	mov	r0, #64	; 0x40
   2a14c:	sdiv	r4, r0, lr
   2a150:	mls	r5, lr, r4, r0
   2a154:	sub	r5, r0, r5
   2a158:	b	2a0dc <_obstack_memory_used@@Base+0x5024>
   2a15c:	adds	r5, r5, #0
   2a160:	movne	r5, #1
   2a164:	cmp	r6, #0
   2a168:	movne	r6, r5
   2a16c:	moveq	r6, #1
   2a170:	cmp	r6, #0
   2a174:	beq	2a130 <_obstack_memory_used@@Base+0x5078>
   2a178:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a17c:	mvn	r0, #-2147483648	; 0x80000000
   2a180:	b	2a14c <_obstack_memory_used@@Base+0x5094>
   2a184:	mov	r1, #1
   2a188:	str	r4, [sp, #-8]!
   2a18c:	str	lr, [sp, #4]
   2a190:	bl	2b514 <_obstack_memory_used@@Base+0x645c>
   2a194:	cmp	r0, #0
   2a198:	beq	2a1a8 <_obstack_memory_used@@Base+0x50f0>
   2a19c:	ldr	r4, [sp]
   2a1a0:	add	sp, sp, #4
   2a1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a1a8:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a1ac:	mov	r1, #1
   2a1b0:	str	r4, [sp, #-8]!
   2a1b4:	str	lr, [sp, #4]
   2a1b8:	bl	2b514 <_obstack_memory_used@@Base+0x645c>
   2a1bc:	cmp	r0, #0
   2a1c0:	beq	2a1d0 <_obstack_memory_used@@Base+0x5118>
   2a1c4:	ldr	r4, [sp]
   2a1c8:	add	sp, sp, #4
   2a1cc:	pop	{pc}		; (ldr pc, [sp], #4)
   2a1d0:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a1d4:	str	r4, [sp, #-8]!
   2a1d8:	str	lr, [sp, #4]
   2a1dc:	bl	2b514 <_obstack_memory_used@@Base+0x645c>
   2a1e0:	cmp	r0, #0
   2a1e4:	beq	2a1f4 <_obstack_memory_used@@Base+0x513c>
   2a1e8:	ldr	r4, [sp]
   2a1ec:	add	sp, sp, #4
   2a1f0:	pop	{pc}		; (ldr pc, [sp], #4)
   2a1f4:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a1f8:	str	r4, [sp, #-8]!
   2a1fc:	str	lr, [sp, #4]
   2a200:	bl	2b514 <_obstack_memory_used@@Base+0x645c>
   2a204:	cmp	r0, #0
   2a208:	beq	2a218 <_obstack_memory_used@@Base+0x5160>
   2a20c:	ldr	r4, [sp]
   2a210:	add	sp, sp, #4
   2a214:	pop	{pc}		; (ldr pc, [sp], #4)
   2a218:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a21c:	strd	r4, [sp, #-16]!
   2a220:	mov	r4, r1
   2a224:	str	r6, [sp, #8]
   2a228:	mov	r6, r0
   2a22c:	mov	r0, r1
   2a230:	str	lr, [sp, #12]
   2a234:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   2a238:	subs	r5, r0, #0
   2a23c:	beq	2a260 <_obstack_memory_used@@Base+0x51a8>
   2a240:	mov	r2, r4
   2a244:	mov	r1, r6
   2a248:	bl	11930 <memcpy@plt>
   2a24c:	mov	r0, r5
   2a250:	ldrd	r4, [sp]
   2a254:	ldr	r6, [sp, #8]
   2a258:	add	sp, sp, #12
   2a25c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a260:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a264:	strd	r4, [sp, #-16]!
   2a268:	mov	r4, r1
   2a26c:	str	r6, [sp, #8]
   2a270:	mov	r6, r0
   2a274:	mov	r0, r1
   2a278:	str	lr, [sp, #12]
   2a27c:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   2a280:	subs	r5, r0, #0
   2a284:	beq	2a2a8 <_obstack_memory_used@@Base+0x51f0>
   2a288:	mov	r2, r4
   2a28c:	mov	r1, r6
   2a290:	bl	11930 <memcpy@plt>
   2a294:	mov	r0, r5
   2a298:	ldrd	r4, [sp]
   2a29c:	ldr	r6, [sp, #8]
   2a2a0:	add	sp, sp, #12
   2a2a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a2a8:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a2ac:	strd	r4, [sp, #-16]!
   2a2b0:	mov	r4, r1
   2a2b4:	str	r6, [sp, #8]
   2a2b8:	mov	r6, r0
   2a2bc:	add	r0, r1, #1
   2a2c0:	str	lr, [sp, #12]
   2a2c4:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   2a2c8:	subs	r5, r0, #0
   2a2cc:	beq	2a2f8 <_obstack_memory_used@@Base+0x5240>
   2a2d0:	mov	r3, #0
   2a2d4:	mov	r1, r6
   2a2d8:	mov	r2, r4
   2a2dc:	strb	r3, [r5, r4]
   2a2e0:	bl	11930 <memcpy@plt>
   2a2e4:	mov	r0, r5
   2a2e8:	ldrd	r4, [sp]
   2a2ec:	ldr	r6, [sp, #8]
   2a2f0:	add	sp, sp, #12
   2a2f4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a2f8:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a2fc:	strd	r4, [sp, #-16]!
   2a300:	str	r6, [sp, #8]
   2a304:	mov	r6, r0
   2a308:	str	lr, [sp, #12]
   2a30c:	bl	11b94 <strlen@plt>
   2a310:	add	r4, r0, #1
   2a314:	mov	r0, r4
   2a318:	bl	2b588 <_obstack_memory_used@@Base+0x64d0>
   2a31c:	subs	r5, r0, #0
   2a320:	beq	2a344 <_obstack_memory_used@@Base+0x528c>
   2a324:	mov	r2, r4
   2a328:	mov	r1, r6
   2a32c:	bl	11930 <memcpy@plt>
   2a330:	mov	r0, r5
   2a334:	ldrd	r4, [sp]
   2a338:	ldr	r6, [sp, #8]
   2a33c:	add	sp, sp, #12
   2a340:	pop	{pc}		; (ldr pc, [sp], #4)
   2a344:	bl	2a348 <_obstack_memory_used@@Base+0x5290>
   2a348:	movw	r3, #4804	; 0x12c4
   2a34c:	movt	r3, #4
   2a350:	str	r4, [sp, #-8]!
   2a354:	ldr	r4, [r3]
   2a358:	mov	r2, #5
   2a35c:	movw	r1, #484	; 0x1e4
   2a360:	movt	r1, #3
   2a364:	mov	r0, #0
   2a368:	str	lr, [sp, #4]
   2a36c:	bl	11984 <dcgettext@plt>
   2a370:	mov	r3, r0
   2a374:	movw	r2, #63820	; 0xf94c
   2a378:	movt	r2, #2
   2a37c:	mov	r1, #0
   2a380:	mov	r0, r4
   2a384:	bl	11a8c <error@plt>
   2a388:	bl	11d2c <abort@plt>
   2a38c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a390:	strd	r6, [sp, #8]
   2a394:	mov	r6, r2
   2a398:	mov	r7, r3
   2a39c:	str	r8, [sp, #16]
   2a3a0:	mov	r2, r1
   2a3a4:	mov	r1, #0
   2a3a8:	str	lr, [sp, #20]
   2a3ac:	sub	sp, sp, #16
   2a3b0:	mov	r8, r0
   2a3b4:	ldr	ip, [sp, #48]	; 0x30
   2a3b8:	add	r3, sp, #8
   2a3bc:	str	ip, [sp]
   2a3c0:	bl	2a7b8 <_obstack_memory_used@@Base+0x5700>
   2a3c4:	subs	r4, r0, #0
   2a3c8:	bne	2a418 <_obstack_memory_used@@Base+0x5360>
   2a3cc:	ldrd	r4, [sp, #8]
   2a3d0:	ldrd	r0, [sp, #40]	; 0x28
   2a3d4:	cmp	r5, r7
   2a3d8:	cmpeq	r4, r6
   2a3dc:	movcc	r3, #1
   2a3e0:	movcs	r3, #0
   2a3e4:	cmp	r5, r1
   2a3e8:	cmpeq	r4, r0
   2a3ec:	orrhi	r3, r3, #1
   2a3f0:	cmp	r3, #0
   2a3f4:	bne	2a498 <_obstack_memory_used@@Base+0x53e0>
   2a3f8:	mov	r0, r4
   2a3fc:	mov	r1, r5
   2a400:	add	sp, sp, #16
   2a404:	ldrd	r4, [sp]
   2a408:	ldrd	r6, [sp, #8]
   2a40c:	ldr	r8, [sp, #16]
   2a410:	add	sp, sp, #20
   2a414:	pop	{pc}		; (ldr pc, [sp], #4)
   2a418:	bl	11bb8 <__errno_location@plt>
   2a41c:	cmp	r4, #1
   2a420:	moveq	r3, #75	; 0x4b
   2a424:	moveq	r4, r3
   2a428:	streq	r3, [r0]
   2a42c:	beq	2a480 <_obstack_memory_used@@Base+0x53c8>
   2a430:	cmp	r4, #3
   2a434:	beq	2a474 <_obstack_memory_used@@Base+0x53bc>
   2a438:	ldr	r3, [sp, #56]	; 0x38
   2a43c:	ldr	r4, [r0]
   2a440:	cmp	r3, #0
   2a444:	beq	2a48c <_obstack_memory_used@@Base+0x53d4>
   2a448:	cmp	r4, #22
   2a44c:	moveq	r4, #0
   2a450:	mov	r0, r8
   2a454:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   2a458:	movw	r2, #63560	; 0xf848
   2a45c:	movt	r2, #2
   2a460:	str	r0, [sp]
   2a464:	mov	r1, r4
   2a468:	ldr	r3, [sp, #52]	; 0x34
   2a46c:	ldr	r0, [sp, #56]	; 0x38
   2a470:	bl	11a8c <error@plt>
   2a474:	mov	r3, #0
   2a478:	mov	r4, r3
   2a47c:	str	r3, [r0]
   2a480:	ldr	r3, [sp, #56]	; 0x38
   2a484:	cmp	r3, #0
   2a488:	bne	2a450 <_obstack_memory_used@@Base+0x5398>
   2a48c:	mov	r3, #1
   2a490:	str	r3, [sp, #56]	; 0x38
   2a494:	b	2a448 <_obstack_memory_used@@Base+0x5390>
   2a498:	bl	11bb8 <__errno_location@plt>
   2a49c:	mov	r3, #0
   2a4a0:	mvn	r2, #-1073741824	; 0xc0000000
   2a4a4:	cmp	r5, r3
   2a4a8:	cmpeq	r4, r2
   2a4ac:	movhi	r3, #75	; 0x4b
   2a4b0:	movls	r3, #34	; 0x22
   2a4b4:	mov	r4, r3
   2a4b8:	str	r3, [r0]
   2a4bc:	ldr	r3, [sp, #56]	; 0x38
   2a4c0:	cmp	r3, #0
   2a4c4:	moveq	r3, #1
   2a4c8:	str	r3, [sp, #56]	; 0x38
   2a4cc:	b	2a450 <_obstack_memory_used@@Base+0x5398>
   2a4d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a4d4:	mov	r1, #0
   2a4d8:	strd	r6, [sp, #8]
   2a4dc:	mov	r6, r2
   2a4e0:	mov	r7, r3
   2a4e4:	str	r8, [sp, #16]
   2a4e8:	mov	r2, #10
   2a4ec:	mov	r8, r0
   2a4f0:	str	lr, [sp, #20]
   2a4f4:	sub	sp, sp, #16
   2a4f8:	ldr	ip, [sp, #48]	; 0x30
   2a4fc:	add	r3, sp, #8
   2a500:	str	ip, [sp]
   2a504:	bl	2a7b8 <_obstack_memory_used@@Base+0x5700>
   2a508:	subs	r4, r0, #0
   2a50c:	bne	2a55c <_obstack_memory_used@@Base+0x54a4>
   2a510:	ldrd	r4, [sp, #8]
   2a514:	ldrd	r0, [sp, #40]	; 0x28
   2a518:	cmp	r7, r5
   2a51c:	cmpeq	r6, r4
   2a520:	movhi	r3, #1
   2a524:	movls	r3, #0
   2a528:	cmp	r1, r5
   2a52c:	cmpeq	r0, r4
   2a530:	orrcc	r3, r3, #1
   2a534:	cmp	r3, #0
   2a538:	bne	2a5dc <_obstack_memory_used@@Base+0x5524>
   2a53c:	mov	r0, r4
   2a540:	mov	r1, r5
   2a544:	add	sp, sp, #16
   2a548:	ldrd	r4, [sp]
   2a54c:	ldrd	r6, [sp, #8]
   2a550:	ldr	r8, [sp, #16]
   2a554:	add	sp, sp, #20
   2a558:	pop	{pc}		; (ldr pc, [sp], #4)
   2a55c:	bl	11bb8 <__errno_location@plt>
   2a560:	cmp	r4, #1
   2a564:	moveq	r3, #75	; 0x4b
   2a568:	moveq	r4, r3
   2a56c:	streq	r3, [r0]
   2a570:	beq	2a5cc <_obstack_memory_used@@Base+0x5514>
   2a574:	cmp	r4, #3
   2a578:	beq	2a5c0 <_obstack_memory_used@@Base+0x5508>
   2a57c:	ldr	r3, [sp, #56]	; 0x38
   2a580:	ldr	r4, [r0]
   2a584:	cmp	r3, #0
   2a588:	bne	2a594 <_obstack_memory_used@@Base+0x54dc>
   2a58c:	mov	r3, #1
   2a590:	str	r3, [sp, #56]	; 0x38
   2a594:	cmp	r4, #22
   2a598:	moveq	r4, #0
   2a59c:	mov	r0, r8
   2a5a0:	bl	28a5c <_obstack_memory_used@@Base+0x39a4>
   2a5a4:	movw	r2, #63560	; 0xf848
   2a5a8:	movt	r2, #2
   2a5ac:	str	r0, [sp]
   2a5b0:	mov	r1, r4
   2a5b4:	ldr	r3, [sp, #52]	; 0x34
   2a5b8:	ldr	r0, [sp, #56]	; 0x38
   2a5bc:	bl	11a8c <error@plt>
   2a5c0:	mov	r3, #0
   2a5c4:	mov	r4, r3
   2a5c8:	str	r3, [r0]
   2a5cc:	ldr	r3, [sp, #56]	; 0x38
   2a5d0:	cmp	r3, #0
   2a5d4:	bne	2a59c <_obstack_memory_used@@Base+0x54e4>
   2a5d8:	b	2a58c <_obstack_memory_used@@Base+0x54d4>
   2a5dc:	bl	11bb8 <__errno_location@plt>
   2a5e0:	mov	r3, #0
   2a5e4:	mvn	r2, #-1073741824	; 0xc0000000
   2a5e8:	cmp	r5, r3
   2a5ec:	cmpeq	r4, r2
   2a5f0:	movhi	r3, #75	; 0x4b
   2a5f4:	movls	r3, #34	; 0x22
   2a5f8:	mov	r4, r3
   2a5fc:	str	r3, [r0]
   2a600:	ldr	r3, [sp, #56]	; 0x38
   2a604:	cmp	r3, #0
   2a608:	moveq	r3, #1
   2a60c:	str	r3, [sp, #56]	; 0x38
   2a610:	b	2a59c <_obstack_memory_used@@Base+0x54e4>
   2a614:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2a618:	mov	r4, #100	; 0x64
   2a61c:	strd	r6, [sp, #8]
   2a620:	mov	r7, #1
   2a624:	strd	r8, [sp, #16]
   2a628:	mov	r9, #0
   2a62c:	str	sl, [sp, #24]
   2a630:	mov	r6, r9
   2a634:	str	lr, [sp, #28]
   2a638:	sub	sp, sp, #112	; 0x70
   2a63c:	add	r8, sp, #12
   2a640:	str	r4, [sp, #8]
   2a644:	bl	11bb8 <__errno_location@plt>
   2a648:	mov	r5, r0
   2a64c:	b	2a6b0 <_obstack_memory_used@@Base+0x55f8>
   2a650:	str	sl, [r5]
   2a654:	mov	r0, r9
   2a658:	bl	1ee98 <__assert_fail@plt+0xd124>
   2a65c:	ldr	r0, [r5]
   2a660:	mvn	r3, #0
   2a664:	mov	r2, #1
   2a668:	add	r1, sp, #8
   2a66c:	subs	ip, r0, #36	; 0x24
   2a670:	movne	ip, #1
   2a674:	cmp	r0, #0
   2a678:	moveq	ip, #0
   2a67c:	cmp	r0, #22
   2a680:	moveq	ip, #0
   2a684:	andne	ip, ip, #1
   2a688:	cmp	r0, #12
   2a68c:	moveq	ip, #0
   2a690:	andne	ip, ip, #1
   2a694:	subs	r0, ip, #0
   2a698:	bne	2a70c <_obstack_memory_used@@Base+0x5654>
   2a69c:	str	r7, [sp]
   2a6a0:	bl	2a07c <_obstack_memory_used@@Base+0x4fc4>
   2a6a4:	ldr	r4, [sp, #8]
   2a6a8:	mov	r8, r0
   2a6ac:	mov	r9, r0
   2a6b0:	sub	r4, r4, #1
   2a6b4:	mov	r0, r8
   2a6b8:	mov	r1, r4
   2a6bc:	strb	r6, [r8, r4]
   2a6c0:	str	r6, [r5]
   2a6c4:	bl	11a98 <gethostname@plt>
   2a6c8:	subs	sl, r0, #0
   2a6cc:	mov	r0, r8
   2a6d0:	bne	2a654 <_obstack_memory_used@@Base+0x559c>
   2a6d4:	bl	11b94 <strlen@plt>
   2a6d8:	add	r0, r0, #1
   2a6dc:	cmp	r4, r0
   2a6e0:	ble	2a650 <_obstack_memory_used@@Base+0x5598>
   2a6e4:	cmp	r9, #0
   2a6e8:	beq	2a714 <_obstack_memory_used@@Base+0x565c>
   2a6ec:	mov	r0, r9
   2a6f0:	add	sp, sp, #112	; 0x70
   2a6f4:	ldrd	r4, [sp]
   2a6f8:	ldrd	r6, [sp, #8]
   2a6fc:	ldrd	r8, [sp, #16]
   2a700:	ldr	sl, [sp, #24]
   2a704:	add	sp, sp, #28
   2a708:	pop	{pc}		; (ldr pc, [sp], #4)
   2a70c:	mov	r9, #0
   2a710:	b	2a6ec <_obstack_memory_used@@Base+0x5634>
   2a714:	mov	r1, r0
   2a718:	mov	r0, r8
   2a71c:	bl	2a264 <_obstack_memory_used@@Base+0x51ac>
   2a720:	mov	r9, r0
   2a724:	b	2a6ec <_obstack_memory_used@@Base+0x5634>
   2a728:	sub	r0, r0, #1
   2a72c:	movw	ip, #4804	; 0x12c4
   2a730:	movt	ip, #4
   2a734:	cmp	r0, #3
   2a738:	push	{lr}		; (str lr, [sp, #-4]!)
   2a73c:	sub	sp, sp, #20
   2a740:	ldr	r5, [ip]
   2a744:	bhi	2a794 <_obstack_memory_used@@Base+0x56dc>
   2a748:	movw	ip, #1556	; 0x614
   2a74c:	movt	ip, #3
   2a750:	cmp	r1, #0
   2a754:	ldr	r0, [ip, r0, lsl #2]
   2a758:	blt	2a798 <_obstack_memory_used@@Base+0x56e0>
   2a75c:	ldr	r6, [r3, r1, lsl #4]
   2a760:	movw	r4, #1572	; 0x624
   2a764:	movt	r4, #3
   2a768:	mov	r1, r0
   2a76c:	mov	r2, #5
   2a770:	mov	r0, #0
   2a774:	bl	11984 <dcgettext@plt>
   2a778:	ldr	ip, [sp, #24]
   2a77c:	mov	r2, r0
   2a780:	mov	r3, r4
   2a784:	mov	r0, r5
   2a788:	mov	r1, #0
   2a78c:	stm	sp, {r6, ip}
   2a790:	bl	11a8c <error@plt>
   2a794:	bl	11d2c <abort@plt>
   2a798:	mov	r3, #0
   2a79c:	movw	r4, #1572	; 0x624
   2a7a0:	movt	r4, #3
   2a7a4:	add	r6, sp, #12
   2a7a8:	strb	r2, [sp, #12]
   2a7ac:	sub	r4, r4, r1
   2a7b0:	strb	r3, [sp, #13]
   2a7b4:	b	2a768 <_obstack_memory_used@@Base+0x56b0>
   2a7b8:	cmp	r2, #36	; 0x24
   2a7bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a7c0:	strd	r6, [sp, #8]
   2a7c4:	strd	r8, [sp, #16]
   2a7c8:	strd	sl, [sp, #24]
   2a7cc:	str	lr, [sp, #32]
   2a7d0:	sub	sp, sp, #36	; 0x24
   2a7d4:	bhi	2b44c <_obstack_memory_used@@Base+0x6394>
   2a7d8:	cmp	r1, #0
   2a7dc:	mov	r6, r2
   2a7e0:	mov	r5, r1
   2a7e4:	mov	sl, r0
   2a7e8:	addeq	r5, sp, #28
   2a7ec:	mov	r9, r3
   2a7f0:	bl	11bb8 <__errno_location@plt>
   2a7f4:	mov	r3, #0
   2a7f8:	mov	fp, r0
   2a7fc:	str	r3, [r0]
   2a800:	ldrb	r4, [sl]
   2a804:	bl	11b58 <__ctype_b_loc@plt>
   2a808:	ldr	r2, [r0]
   2a80c:	lsl	r3, r4, #1
   2a810:	ldrh	r3, [r2, r3]
   2a814:	tst	r3, #8192	; 0x2000
   2a818:	beq	2a834 <_obstack_memory_used@@Base+0x577c>
   2a81c:	mov	r3, sl
   2a820:	ldrb	r4, [r3, #1]!
   2a824:	lsl	r1, r4, #1
   2a828:	ldrh	r1, [r2, r1]
   2a82c:	tst	r1, #8192	; 0x2000
   2a830:	bne	2a820 <_obstack_memory_used@@Base+0x5768>
   2a834:	cmp	r4, #45	; 0x2d
   2a838:	beq	2a8d4 <_obstack_memory_used@@Base+0x581c>
   2a83c:	mov	r2, r6
   2a840:	mov	r3, #0
   2a844:	mov	r1, r5
   2a848:	mov	r0, sl
   2a84c:	bl	1193c <__strtoull_internal@plt>
   2a850:	ldr	r8, [r5]
   2a854:	mov	r6, r0
   2a858:	mov	r7, r1
   2a85c:	cmp	r8, sl
   2a860:	beq	2a8bc <_obstack_memory_used@@Base+0x5804>
   2a864:	ldr	r4, [fp]
   2a868:	cmp	r4, #0
   2a86c:	bne	2a8ac <_obstack_memory_used@@Base+0x57f4>
   2a870:	ldr	r3, [sp, #72]	; 0x48
   2a874:	cmp	r3, #0
   2a878:	beq	2a888 <_obstack_memory_used@@Base+0x57d0>
   2a87c:	ldrb	sl, [r8]
   2a880:	cmp	sl, #0
   2a884:	bne	2ac40 <_obstack_memory_used@@Base+0x5b88>
   2a888:	strd	r6, [r9]
   2a88c:	mov	r0, r4
   2a890:	add	sp, sp, #36	; 0x24
   2a894:	ldrd	r4, [sp]
   2a898:	ldrd	r6, [sp, #8]
   2a89c:	ldrd	r8, [sp, #16]
   2a8a0:	ldrd	sl, [sp, #24]
   2a8a4:	add	sp, sp, #32
   2a8a8:	pop	{pc}		; (ldr pc, [sp], #4)
   2a8ac:	cmp	r4, #34	; 0x22
   2a8b0:	bne	2a8d4 <_obstack_memory_used@@Base+0x581c>
   2a8b4:	mov	r4, #1
   2a8b8:	b	2a870 <_obstack_memory_used@@Base+0x57b8>
   2a8bc:	ldr	r3, [sp, #72]	; 0x48
   2a8c0:	cmp	r3, #0
   2a8c4:	beq	2a8d4 <_obstack_memory_used@@Base+0x581c>
   2a8c8:	ldrb	sl, [sl]
   2a8cc:	cmp	sl, #0
   2a8d0:	bne	2a8dc <_obstack_memory_used@@Base+0x5824>
   2a8d4:	mov	r4, #4
   2a8d8:	b	2a88c <_obstack_memory_used@@Base+0x57d4>
   2a8dc:	mov	r1, sl
   2a8e0:	mov	r0, r3
   2a8e4:	bl	11ba0 <strchr@plt>
   2a8e8:	cmp	r0, #0
   2a8ec:	movne	r4, #0
   2a8f0:	movne	r6, #1
   2a8f4:	movne	r7, r4
   2a8f8:	beq	2a8d4 <_obstack_memory_used@@Base+0x581c>
   2a8fc:	sub	r3, sl, #69	; 0x45
   2a900:	cmp	r3, #47	; 0x2f
   2a904:	ldrls	pc, [pc, r3, lsl #2]
   2a908:	b	2aa10 <_obstack_memory_used@@Base+0x5958>
   2a90c:	andeq	sl, r2, ip, asr #19
   2a910:	andeq	sl, r2, r0, lsl sl
   2a914:	andeq	sl, r2, ip, asr #19
   2a918:	andeq	sl, r2, r0, lsl sl
   2a91c:	andeq	sl, r2, r0, lsl sl
   2a920:	andeq	sl, r2, r0, lsl sl
   2a924:	andeq	sl, r2, ip, asr #19
   2a928:	andeq	sl, r2, r0, lsl sl
   2a92c:	andeq	sl, r2, ip, asr #19
   2a930:	andeq	sl, r2, r0, lsl sl
   2a934:	andeq	sl, r2, r0, lsl sl
   2a938:	andeq	sl, r2, ip, asr #19
   2a93c:	andeq	sl, r2, r0, lsl sl
   2a940:	andeq	sl, r2, r0, lsl sl
   2a944:	andeq	sl, r2, r0, lsl sl
   2a948:	andeq	sl, r2, ip, asr #19
   2a94c:	andeq	sl, r2, r0, lsl sl
   2a950:	andeq	sl, r2, r0, lsl sl
   2a954:	andeq	sl, r2, r0, lsl sl
   2a958:	andeq	sl, r2, r0, lsl sl
   2a95c:	andeq	sl, r2, ip, asr #19
   2a960:	andeq	sl, r2, ip, asr #19
   2a964:	andeq	sl, r2, r0, lsl sl
   2a968:	andeq	sl, r2, r0, lsl sl
   2a96c:	andeq	sl, r2, r0, lsl sl
   2a970:	andeq	sl, r2, r0, lsl sl
   2a974:	andeq	sl, r2, r0, lsl sl
   2a978:	andeq	sl, r2, r0, lsl sl
   2a97c:	andeq	sl, r2, r0, lsl sl
   2a980:	andeq	sl, r2, r0, lsl sl
   2a984:	andeq	sl, r2, r0, lsl sl
   2a988:	andeq	sl, r2, r0, lsl sl
   2a98c:	andeq	sl, r2, r0, lsl sl
   2a990:	andeq	sl, r2, r0, lsl sl
   2a994:	andeq	sl, r2, ip, asr #19
   2a998:	andeq	sl, r2, r0, lsl sl
   2a99c:	andeq	sl, r2, r0, lsl sl
   2a9a0:	andeq	sl, r2, r0, lsl sl
   2a9a4:	andeq	sl, r2, ip, asr #19
   2a9a8:	andeq	sl, r2, r0, lsl sl
   2a9ac:	andeq	sl, r2, ip, asr #19
   2a9b0:	andeq	sl, r2, r0, lsl sl
   2a9b4:	andeq	sl, r2, r0, lsl sl
   2a9b8:	andeq	sl, r2, r0, lsl sl
   2a9bc:	andeq	sl, r2, r0, lsl sl
   2a9c0:	andeq	sl, r2, r0, lsl sl
   2a9c4:	andeq	sl, r2, r0, lsl sl
   2a9c8:	andeq	sl, r2, ip, asr #19
   2a9cc:	mov	r1, #48	; 0x30
   2a9d0:	ldr	r0, [sp, #72]	; 0x48
   2a9d4:	bl	11ba0 <strchr@plt>
   2a9d8:	cmp	r0, #0
   2a9dc:	beq	2aa10 <_obstack_memory_used@@Base+0x5958>
   2a9e0:	ldrb	r3, [r8, #1]
   2a9e4:	cmp	r3, #68	; 0x44
   2a9e8:	beq	2afa0 <_obstack_memory_used@@Base+0x5ee8>
   2a9ec:	cmp	r3, #105	; 0x69
   2a9f0:	beq	2ac58 <_obstack_memory_used@@Base+0x5ba0>
   2a9f4:	cmp	r3, #66	; 0x42
   2a9f8:	moveq	r3, #2
   2a9fc:	movne	r3, #1
   2aa00:	moveq	ip, #1000	; 0x3e8
   2aa04:	movne	ip, #1024	; 0x400
   2aa08:	str	r3, [sp, #12]
   2aa0c:	b	2aa1c <_obstack_memory_used@@Base+0x5964>
   2aa10:	mov	r3, #1
   2aa14:	mov	ip, #1024	; 0x400
   2aa18:	str	r3, [sp, #12]
   2aa1c:	sub	sl, sl, #66	; 0x42
   2aa20:	cmp	sl, #53	; 0x35
   2aa24:	ldrls	pc, [pc, sl, lsl #2]
   2aa28:	b	2ac04 <_obstack_memory_used@@Base+0x5b4c>
   2aa2c:	andeq	sl, r2, ip, ror #29
   2aa30:	andeq	sl, r2, r4, lsl #24
   2aa34:	andeq	sl, r2, r4, lsl #24
   2aa38:	andeq	sl, r2, ip, lsl #29
   2aa3c:	andeq	sl, r2, r4, lsl #24
   2aa40:	andeq	sl, r2, r8, lsl #30
   2aa44:	andeq	sl, r2, r4, lsl #24
   2aa48:	andeq	sl, r2, r4, lsl #24
   2aa4c:	andeq	sl, r2, r4, lsl #24
   2aa50:	andeq	sl, r2, ip, lsl #24
   2aa54:	andeq	sl, r2, r4, lsl #24
   2aa58:	andeq	sl, r2, r4, lsr lr
   2aa5c:	andeq	sl, r2, r4, lsl #24
   2aa60:	andeq	sl, r2, r4, lsl #24
   2aa64:	ldrdeq	sl, [r2], -r8
   2aa68:	andeq	sl, r2, r4, lsl #24
   2aa6c:	andeq	sl, r2, r4, lsl #24
   2aa70:	andeq	sl, r2, r4, lsl #24
   2aa74:	andeq	sl, r2, r8, ror sp
   2aa78:	andeq	sl, r2, r4, lsl #24
   2aa7c:	andeq	sl, r2, r4, lsl #24
   2aa80:	andeq	sl, r2, r4, lsl #24
   2aa84:	andeq	sl, r2, r4, lsl #24
   2aa88:	andeq	sl, r2, ip, lsr #25
   2aa8c:	andeq	sl, r2, r4, lsl #22
   2aa90:	andeq	sl, r2, r4, lsl #24
   2aa94:	andeq	sl, r2, r4, lsl #24
   2aa98:	andeq	sl, r2, r4, lsl #24
   2aa9c:	andeq	sl, r2, r4, lsl #24
   2aaa0:	andeq	sl, r2, r4, lsl #24
   2aaa4:	andeq	sl, r2, r4, lsl #24
   2aaa8:	andeq	sl, r2, r4, lsl #24
   2aaac:	andeq	sl, r2, ip, lsl #25
   2aab0:	andeq	sl, r2, ip, ror #23
   2aab4:	andeq	sl, r2, r4, lsl #24
   2aab8:	andeq	sl, r2, r4, lsl #24
   2aabc:	andeq	sl, r2, r4, lsl #24
   2aac0:	andeq	sl, r2, r8, lsl #30
   2aac4:	andeq	sl, r2, r4, lsl #24
   2aac8:	andeq	sl, r2, r4, lsl #24
   2aacc:	andeq	sl, r2, r4, lsl #24
   2aad0:	andeq	sl, r2, ip, lsl #24
   2aad4:	andeq	sl, r2, r4, lsl #24
   2aad8:	andeq	sl, r2, r4, lsr lr
   2aadc:	andeq	sl, r2, r4, lsl #24
   2aae0:	andeq	sl, r2, r4, lsl #24
   2aae4:	andeq	sl, r2, r4, lsl #24
   2aae8:	andeq	sl, r2, r4, lsl #24
   2aaec:	andeq	sl, r2, r4, lsl #24
   2aaf0:	andeq	sl, r2, r4, lsl #24
   2aaf4:	andeq	sl, r2, r8, ror sp
   2aaf8:	andeq	sl, r2, r4, lsl #24
   2aafc:	andeq	sl, r2, r4, lsl #24
   2ab00:	andeq	sl, r2, r4, ror ip
   2ab04:	asr	r3, ip, #31
   2ab08:	mov	r2, ip
   2ab0c:	cmp	r7, #0
   2ab10:	mov	r1, #0
   2ab14:	strd	r2, [sp]
   2ab18:	bne	2b058 <_obstack_memory_used@@Base+0x5fa0>
   2ab1c:	umull	r6, r7, r6, ip
   2ab20:	mov	r2, r6
   2ab24:	mov	r3, r7
   2ab28:	cmp	r1, #0
   2ab2c:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2ab30:	cmp	r3, #0
   2ab34:	mov	lr, r1
   2ab38:	bne	2b184 <_obstack_memory_used@@Base+0x60cc>
   2ab3c:	umull	r2, r3, r2, ip
   2ab40:	mov	r0, r2
   2ab44:	mov	r1, r3
   2ab48:	cmp	lr, #0
   2ab4c:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2ab50:	cmp	r1, #0
   2ab54:	bne	2b160 <_obstack_memory_used@@Base+0x60a8>
   2ab58:	umull	r0, r1, r0, ip
   2ab5c:	mov	r2, r0
   2ab60:	mov	r3, r1
   2ab64:	cmp	lr, #0
   2ab68:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2ab6c:	cmp	r3, #0
   2ab70:	bne	2ae10 <_obstack_memory_used@@Base+0x5d58>
   2ab74:	umull	r2, r3, r2, ip
   2ab78:	mov	r0, r2
   2ab7c:	mov	r1, r3
   2ab80:	cmp	lr, #0
   2ab84:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2ab88:	cmp	r1, #0
   2ab8c:	bne	2b010 <_obstack_memory_used@@Base+0x5f58>
   2ab90:	umull	r0, r1, r0, ip
   2ab94:	mov	r2, r0
   2ab98:	mov	r3, r1
   2ab9c:	cmp	lr, #0
   2aba0:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2aba4:	cmp	r3, #0
   2aba8:	mov	r7, lr
   2abac:	bne	2afec <_obstack_memory_used@@Base+0x5f34>
   2abb0:	umull	r2, r3, r2, ip
   2abb4:	mov	r6, r2
   2abb8:	mov	lr, r3
   2abbc:	cmp	r7, #0
   2abc0:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2abc4:	cmp	lr, #0
   2abc8:	bne	2afb0 <_obstack_memory_used@@Base+0x5ef8>
   2abcc:	umull	r2, r3, r6, ip
   2abd0:	mov	r0, r2
   2abd4:	mov	r2, r3
   2abd8:	subs	r3, r7, #0
   2abdc:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2abe0:	mov	r6, r0
   2abe4:	mov	r7, r2
   2abe8:	orr	r4, r4, r3
   2abec:	ldr	r2, [sp, #12]
   2abf0:	add	r3, r8, r2
   2abf4:	str	r3, [r5]
   2abf8:	ldrb	r3, [r8, r2]
   2abfc:	cmp	r3, #0
   2ac00:	beq	2a888 <_obstack_memory_used@@Base+0x57d0>
   2ac04:	orr	r4, r4, #2
   2ac08:	b	2a888 <_obstack_memory_used@@Base+0x57d0>
   2ac0c:	cmp	r7, #0
   2ac10:	asr	r1, ip, #31
   2ac14:	mov	lr, #0
   2ac18:	bne	2af7c <_obstack_memory_used@@Base+0x5ec4>
   2ac1c:	umull	r2, r3, r6, ip
   2ac20:	mov	r6, r2
   2ac24:	mov	r7, r3
   2ac28:	cmp	lr, #0
   2ac2c:	beq	2abec <_obstack_memory_used@@Base+0x5b34>
   2ac30:	mvn	r6, #0
   2ac34:	mov	r4, #1
   2ac38:	mov	r7, r6
   2ac3c:	b	2abec <_obstack_memory_used@@Base+0x5b34>
   2ac40:	mov	r0, r3
   2ac44:	mov	r1, sl
   2ac48:	bl	11ba0 <strchr@plt>
   2ac4c:	cmp	r0, #0
   2ac50:	bne	2a8fc <_obstack_memory_used@@Base+0x5844>
   2ac54:	b	2ac04 <_obstack_memory_used@@Base+0x5b4c>
   2ac58:	ldrb	r3, [r8, #2]
   2ac5c:	mov	ip, #1024	; 0x400
   2ac60:	cmp	r3, #66	; 0x42
   2ac64:	movne	r3, #1
   2ac68:	moveq	r3, #3
   2ac6c:	str	r3, [sp, #12]
   2ac70:	b	2aa1c <_obstack_memory_used@@Base+0x5964>
   2ac74:	lsr	r3, r7, #31
   2ac78:	adds	r6, r6, r6
   2ac7c:	adc	r7, r7, r7
   2ac80:	cmp	r3, #0
   2ac84:	beq	2abec <_obstack_memory_used@@Base+0x5b34>
   2ac88:	b	2ac30 <_obstack_memory_used@@Base+0x5b78>
   2ac8c:	lsr	r3, r7, #23
   2ac90:	lsl	r7, r7, #9
   2ac94:	cmp	r3, #0
   2ac98:	lsl	r3, r6, #9
   2ac9c:	orr	r7, r7, r6, lsr #23
   2aca0:	bne	2ac30 <_obstack_memory_used@@Base+0x5b78>
   2aca4:	mov	r6, r3
   2aca8:	b	2abec <_obstack_memory_used@@Base+0x5b34>
   2acac:	asr	r3, ip, #31
   2acb0:	mov	r2, ip
   2acb4:	cmp	r7, #0
   2acb8:	mov	r1, #0
   2acbc:	strd	r2, [sp]
   2acc0:	bne	2b0cc <_obstack_memory_used@@Base+0x6014>
   2acc4:	umull	r6, r7, r6, ip
   2acc8:	mov	r0, r6
   2accc:	mov	fp, r7
   2acd0:	cmp	r1, #0
   2acd4:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2acd8:	cmp	fp, #0
   2acdc:	mov	lr, r1
   2ace0:	bne	2b25c <_obstack_memory_used@@Base+0x61a4>
   2ace4:	umull	r0, r1, r0, ip
   2ace8:	mov	r2, r0
   2acec:	mov	r3, r1
   2acf0:	cmp	lr, #0
   2acf4:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2acf8:	cmp	r3, #0
   2acfc:	bne	2b284 <_obstack_memory_used@@Base+0x61cc>
   2ad00:	umull	r2, r3, r2, ip
   2ad04:	mov	r0, r2
   2ad08:	mov	r1, r3
   2ad0c:	cmp	lr, #0
   2ad10:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2ad14:	cmp	r1, #0
   2ad18:	bne	2b204 <_obstack_memory_used@@Base+0x614c>
   2ad1c:	umull	r0, r1, r0, ip
   2ad20:	mov	r2, r0
   2ad24:	mov	r3, r1
   2ad28:	cmp	lr, #0
   2ad2c:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2ad30:	cmp	r3, #0
   2ad34:	bne	2b034 <_obstack_memory_used@@Base+0x5f7c>
   2ad38:	umull	r2, r3, r2, ip
   2ad3c:	mov	r0, r2
   2ad40:	mov	r1, r3
   2ad44:	cmp	lr, #0
   2ad48:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2ad4c:	cmp	r1, #0
   2ad50:	beq	2ab90 <_obstack_memory_used@@Base+0x5ad8>
   2ad54:	umull	r6, r7, r0, ip
   2ad58:	mov	fp, lr
   2ad5c:	mov	sl, r7
   2ad60:	umlal	sl, fp, r1, ip
   2ad64:	cmp	fp, #0
   2ad68:	bne	2b46c <_obstack_memory_used@@Base+0x63b4>
   2ad6c:	mov	r2, r6
   2ad70:	mov	r3, sl
   2ad74:	b	2ab9c <_obstack_memory_used@@Base+0x5ae4>
   2ad78:	asr	r3, ip, #31
   2ad7c:	mov	r2, ip
   2ad80:	cmp	r7, #0
   2ad84:	mov	r1, #0
   2ad88:	strd	r2, [sp]
   2ad8c:	bne	2b0f0 <_obstack_memory_used@@Base+0x6038>
   2ad90:	umull	r6, r7, r6, ip
   2ad94:	mov	r0, r6
   2ad98:	mov	fp, r7
   2ad9c:	cmp	r1, #0
   2ada0:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2ada4:	cmp	fp, #0
   2ada8:	mov	lr, r1
   2adac:	beq	2ab90 <_obstack_memory_used@@Base+0x5ad8>
   2adb0:	umull	r6, r7, r0, ip
   2adb4:	mov	r3, r1
   2adb8:	mov	r2, r7
   2adbc:	umlal	r2, r3, fp, ip
   2adc0:	cmp	r3, #0
   2adc4:	strd	r2, [sp, #16]
   2adc8:	bne	2b350 <_obstack_memory_used@@Base+0x6298>
   2adcc:	mov	r2, r6
   2add0:	ldr	r3, [sp, #16]
   2add4:	b	2ab9c <_obstack_memory_used@@Base+0x5ae4>
   2add8:	asr	r3, ip, #31
   2addc:	mov	r2, ip
   2ade0:	cmp	r7, #0
   2ade4:	mov	r1, #0
   2ade8:	strd	r2, [sp]
   2adec:	bne	2b138 <_obstack_memory_used@@Base+0x6080>
   2adf0:	umull	r6, r7, r6, ip
   2adf4:	mov	r2, r6
   2adf8:	mov	r3, r7
   2adfc:	cmp	r1, #0
   2ae00:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2ae04:	cmp	r3, #0
   2ae08:	mov	lr, r1
   2ae0c:	beq	2ab74 <_obstack_memory_used@@Base+0x5abc>
   2ae10:	umull	r6, r7, r2, ip
   2ae14:	mov	fp, lr
   2ae18:	mov	sl, r7
   2ae1c:	umlal	sl, fp, r3, ip
   2ae20:	cmp	fp, #0
   2ae24:	bne	2b430 <_obstack_memory_used@@Base+0x6378>
   2ae28:	mov	r0, r6
   2ae2c:	mov	r1, sl
   2ae30:	b	2ab80 <_obstack_memory_used@@Base+0x5ac8>
   2ae34:	asr	r3, ip, #31
   2ae38:	mov	r2, ip
   2ae3c:	cmp	r7, #0
   2ae40:	mov	r1, #0
   2ae44:	strd	r2, [sp]
   2ae48:	bne	2b114 <_obstack_memory_used@@Base+0x605c>
   2ae4c:	umull	r6, r7, r6, ip
   2ae50:	mov	sl, r6
   2ae54:	mov	lr, r7
   2ae58:	cmp	r1, #0
   2ae5c:	bne	2ac30 <_obstack_memory_used@@Base+0x5b78>
   2ae60:	cmp	lr, #0
   2ae64:	mov	r7, r1
   2ae68:	bne	2b228 <_obstack_memory_used@@Base+0x6170>
   2ae6c:	umull	sl, fp, sl, ip
   2ae70:	mov	r0, sl
   2ae74:	mov	r2, fp
   2ae78:	cmp	r7, #0
   2ae7c:	mov	r6, r0
   2ae80:	mov	r7, r2
   2ae84:	beq	2abec <_obstack_memory_used@@Base+0x5b34>
   2ae88:	b	2ac30 <_obstack_memory_used@@Base+0x5b78>
   2ae8c:	asr	r3, ip, #31
   2ae90:	mov	r2, ip
   2ae94:	cmp	r7, #0
   2ae98:	mov	r1, #0
   2ae9c:	strd	r2, [sp]
   2aea0:	bne	2b0a8 <_obstack_memory_used@@Base+0x5ff0>
   2aea4:	umull	r6, r7, r6, ip
   2aea8:	mov	r0, r6
   2aeac:	mov	fp, r7
   2aeb0:	cmp	r1, #0
   2aeb4:	bne	2af6c <_obstack_memory_used@@Base+0x5eb4>
   2aeb8:	cmp	fp, #0
   2aebc:	mov	lr, r1
   2aec0:	beq	2ad1c <_obstack_memory_used@@Base+0x5c64>
   2aec4:	umull	r6, r7, r0, ip
   2aec8:	mov	r3, r1
   2aecc:	mov	r2, r7
   2aed0:	umlal	r2, r3, fp, ip
   2aed4:	cmp	r3, #0
   2aed8:	strd	r2, [sp, #16]
   2aedc:	bne	2b3c0 <_obstack_memory_used@@Base+0x6308>
   2aee0:	mov	r2, r6
   2aee4:	ldr	r3, [sp, #16]
   2aee8:	b	2ad28 <_obstack_memory_used@@Base+0x5c70>
   2aeec:	lsr	r3, r7, #22
   2aef0:	lsl	r7, r7, #10
   2aef4:	cmp	r3, #0
   2aef8:	lsl	r3, r6, #10
   2aefc:	orr	r7, r7, r6, lsr #22
   2af00:	beq	2aca4 <_obstack_memory_used@@Base+0x5bec>
   2af04:	b	2ac30 <_obstack_memory_used@@Base+0x5b78>
   2af08:	asr	r3, ip, #31
   2af0c:	mov	r2, ip
   2af10:	cmp	r7, #0
   2af14:	mov	r1, #0
   2af18:	strd	r2, [sp]
   2af1c:	bne	2b080 <_obstack_memory_used@@Base+0x5fc8>
   2af20:	umull	r6, r7, r6, ip
   2af24:	mov	r2, r6
   2af28:	mov	r3, r7
   2af2c:	cmp	r1, #0
   2af30:	bne	2ac30 <_obstack_memory_used@@Base+0x5b78>
   2af34:	cmp	r3, #0
   2af38:	mov	r7, r1
   2af3c:	bne	2b1e4 <_obstack_memory_used@@Base+0x612c>
   2af40:	umull	r2, r3, r2, ip
   2af44:	mov	r6, r2
   2af48:	mov	lr, r3
   2af4c:	cmp	r7, #0
   2af50:	bne	2ac30 <_obstack_memory_used@@Base+0x5b78>
   2af54:	cmp	lr, #0
   2af58:	bne	2b1a8 <_obstack_memory_used@@Base+0x60f0>
   2af5c:	umull	r2, r3, r6, ip
   2af60:	mov	r0, r2
   2af64:	mov	r2, r3
   2af68:	b	2ae78 <_obstack_memory_used@@Base+0x5dc0>
   2af6c:	mvn	r6, #0
   2af70:	mov	r3, #1
   2af74:	mov	r7, r6
   2af78:	b	2abe8 <_obstack_memory_used@@Base+0x5b30>
   2af7c:	umull	sl, fp, r6, ip
   2af80:	mov	r3, lr
   2af84:	mov	r2, fp
   2af88:	umlal	r2, r3, r7, ip
   2af8c:	cmp	r3, #0
   2af90:	bne	2b388 <_obstack_memory_used@@Base+0x62d0>
   2af94:	mov	r6, sl
   2af98:	mov	r7, r2
   2af9c:	b	2ac28 <_obstack_memory_used@@Base+0x5b70>
   2afa0:	mov	r3, #2
   2afa4:	mov	ip, #1000	; 0x3e8
   2afa8:	str	r3, [sp, #12]
   2afac:	b	2aa1c <_obstack_memory_used@@Base+0x5964>
   2afb0:	umull	r0, r1, r6, ip
   2afb4:	mov	r3, r7
   2afb8:	mov	r2, r1
   2afbc:	strd	r0, [sp, #16]
   2afc0:	umlal	r2, r3, lr, ip
   2afc4:	cmp	r3, #0
   2afc8:	beq	2abd8 <_obstack_memory_used@@Base+0x5b20>
   2afcc:	ldrd	sl, [sp]
   2afd0:	mov	r7, #1
   2afd4:	ldr	r0, [sp, #16]
   2afd8:	ldr	r3, [sp, #20]
   2afdc:	mul	r2, r6, fp
   2afe0:	mla	r2, lr, sl, r2
   2afe4:	add	r2, r2, r3
   2afe8:	b	2abd8 <_obstack_memory_used@@Base+0x5b20>
   2afec:	umull	sl, fp, r2, ip
   2aff0:	mov	r1, lr
   2aff4:	mov	r0, fp
   2aff8:	umlal	r0, r1, r3, ip
   2affc:	cmp	r1, #0
   2b000:	bne	2b2e0 <_obstack_memory_used@@Base+0x6228>
   2b004:	mov	r6, sl
   2b008:	mov	lr, r0
   2b00c:	b	2abbc <_obstack_memory_used@@Base+0x5b04>
   2b010:	umull	sl, fp, r0, ip
   2b014:	mov	r7, lr
   2b018:	mov	r6, fp
   2b01c:	umlal	r6, r7, r1, ip
   2b020:	cmp	r7, #0
   2b024:	bne	2b488 <_obstack_memory_used@@Base+0x63d0>
   2b028:	mov	r2, sl
   2b02c:	mov	r3, r6
   2b030:	b	2ab9c <_obstack_memory_used@@Base+0x5ae4>
   2b034:	umull	sl, fp, r2, ip
   2b038:	mov	r7, lr
   2b03c:	mov	r6, fp
   2b040:	umlal	r6, r7, r3, ip
   2b044:	cmp	r7, #0
   2b048:	bne	2b318 <_obstack_memory_used@@Base+0x6260>
   2b04c:	mov	r0, sl
   2b050:	mov	r1, r6
   2b054:	b	2ad44 <_obstack_memory_used@@Base+0x5c8c>
   2b058:	umull	sl, fp, r6, ip
   2b05c:	mov	r3, r1
   2b060:	mov	r2, fp
   2b064:	umlal	r2, r3, r7, ip
   2b068:	cmp	r3, #0
   2b06c:	strd	r2, [sp, #16]
   2b070:	bne	2b2fc <_obstack_memory_used@@Base+0x6244>
   2b074:	mov	r2, sl
   2b078:	ldr	r3, [sp, #16]
   2b07c:	b	2ab28 <_obstack_memory_used@@Base+0x5a70>
   2b080:	umull	sl, fp, r6, ip
   2b084:	mov	r3, r1
   2b088:	mov	r2, fp
   2b08c:	umlal	r2, r3, r7, ip
   2b090:	cmp	r3, #0
   2b094:	strd	r2, [sp, #16]
   2b098:	bne	2b3dc <_obstack_memory_used@@Base+0x6324>
   2b09c:	mov	r2, sl
   2b0a0:	ldr	r3, [sp, #16]
   2b0a4:	b	2af2c <_obstack_memory_used@@Base+0x5e74>
   2b0a8:	umull	sl, fp, r6, ip
   2b0ac:	mov	r3, r1
   2b0b0:	mov	r2, fp
   2b0b4:	umlal	r2, r3, r7, ip
   2b0b8:	cmp	r3, #0
   2b0bc:	bne	2b2a8 <_obstack_memory_used@@Base+0x61f0>
   2b0c0:	mov	r0, sl
   2b0c4:	mov	fp, r2
   2b0c8:	b	2aeb0 <_obstack_memory_used@@Base+0x5df8>
   2b0cc:	umull	sl, fp, r6, ip
   2b0d0:	mov	r3, r1
   2b0d4:	mov	r2, fp
   2b0d8:	umlal	r2, r3, r7, ip
   2b0dc:	cmp	r3, #0
   2b0e0:	bne	2b36c <_obstack_memory_used@@Base+0x62b4>
   2b0e4:	mov	r0, sl
   2b0e8:	mov	fp, r2
   2b0ec:	b	2acd0 <_obstack_memory_used@@Base+0x5c18>
   2b0f0:	umull	sl, fp, r6, ip
   2b0f4:	mov	r3, r1
   2b0f8:	mov	r2, fp
   2b0fc:	umlal	r2, r3, r7, ip
   2b100:	cmp	r3, #0
   2b104:	bne	2b3f8 <_obstack_memory_used@@Base+0x6340>
   2b108:	mov	r0, sl
   2b10c:	mov	fp, r2
   2b110:	b	2ad9c <_obstack_memory_used@@Base+0x5ce4>
   2b114:	umull	sl, fp, r6, ip
   2b118:	mov	r3, r1
   2b11c:	mov	r2, fp
   2b120:	strd	sl, [sp, #16]
   2b124:	umlal	r2, r3, r7, ip
   2b128:	cmp	r3, #0
   2b12c:	bne	2b3a0 <_obstack_memory_used@@Base+0x62e8>
   2b130:	mov	lr, r2
   2b134:	b	2ae58 <_obstack_memory_used@@Base+0x5da0>
   2b138:	umull	sl, fp, r6, ip
   2b13c:	mov	r3, r1
   2b140:	mov	r2, fp
   2b144:	umlal	r2, r3, r7, ip
   2b148:	cmp	r3, #0
   2b14c:	strd	r2, [sp, #16]
   2b150:	bne	2b4a4 <_obstack_memory_used@@Base+0x63ec>
   2b154:	mov	r2, sl
   2b158:	ldr	r3, [sp, #16]
   2b15c:	b	2adfc <_obstack_memory_used@@Base+0x5d44>
   2b160:	umull	sl, fp, r0, ip
   2b164:	mov	r7, lr
   2b168:	mov	r6, fp
   2b16c:	umlal	r6, r7, r1, ip
   2b170:	cmp	r7, #0
   2b174:	bne	2b4c0 <_obstack_memory_used@@Base+0x6408>
   2b178:	mov	r2, sl
   2b17c:	mov	r3, r6
   2b180:	b	2ab64 <_obstack_memory_used@@Base+0x5aac>
   2b184:	umull	r6, r7, r2, ip
   2b188:	mov	fp, r1
   2b18c:	mov	sl, r7
   2b190:	umlal	sl, fp, r3, ip
   2b194:	cmp	fp, #0
   2b198:	bne	2b334 <_obstack_memory_used@@Base+0x627c>
   2b19c:	mov	r0, r6
   2b1a0:	mov	r1, sl
   2b1a4:	b	2ab48 <_obstack_memory_used@@Base+0x5a90>
   2b1a8:	umull	r0, r1, r6, ip
   2b1ac:	mov	r3, r7
   2b1b0:	mov	r2, r1
   2b1b4:	strd	r0, [sp, #16]
   2b1b8:	umlal	r2, r3, lr, ip
   2b1bc:	cmp	r3, #0
   2b1c0:	beq	2ae78 <_obstack_memory_used@@Base+0x5dc0>
   2b1c4:	ldrd	sl, [sp]
   2b1c8:	mov	r7, #1
   2b1cc:	ldr	r0, [sp, #16]
   2b1d0:	ldr	r3, [sp, #20]
   2b1d4:	mul	r2, r6, fp
   2b1d8:	mla	r2, lr, sl, r2
   2b1dc:	add	r2, r2, r3
   2b1e0:	b	2ae78 <_obstack_memory_used@@Base+0x5dc0>
   2b1e4:	umull	sl, fp, r2, ip
   2b1e8:	mov	r0, fp
   2b1ec:	umlal	r0, r1, r3, ip
   2b1f0:	cmp	r1, #0
   2b1f4:	bne	2b4dc <_obstack_memory_used@@Base+0x6424>
   2b1f8:	mov	r6, sl
   2b1fc:	mov	lr, r0
   2b200:	b	2af4c <_obstack_memory_used@@Base+0x5e94>
   2b204:	umull	r6, r7, r0, ip
   2b208:	mov	fp, lr
   2b20c:	mov	sl, r7
   2b210:	umlal	sl, fp, r1, ip
   2b214:	cmp	fp, #0
   2b218:	bne	2b414 <_obstack_memory_used@@Base+0x635c>
   2b21c:	mov	r2, r6
   2b220:	mov	r3, sl
   2b224:	b	2ad28 <_obstack_memory_used@@Base+0x5c70>
   2b228:	umull	r0, r1, sl, ip
   2b22c:	mov	r3, r7
   2b230:	mov	r2, r1
   2b234:	umlal	r2, r3, lr, ip
   2b238:	cmp	r3, #0
   2b23c:	beq	2ae78 <_obstack_memory_used@@Base+0x5dc0>
   2b240:	ldr	r3, [sp, #4]
   2b244:	mov	r7, #1
   2b248:	mul	r2, sl, r3
   2b24c:	ldr	r3, [sp]
   2b250:	mla	r2, lr, r3, r2
   2b254:	add	r2, r2, r1
   2b258:	b	2ae78 <_obstack_memory_used@@Base+0x5dc0>
   2b25c:	umull	r6, r7, r0, ip
   2b260:	mov	r3, r1
   2b264:	mov	r2, r7
   2b268:	umlal	r2, r3, fp, ip
   2b26c:	cmp	r3, #0
   2b270:	strd	r2, [sp, #16]
   2b274:	bne	2b4f8 <_obstack_memory_used@@Base+0x6440>
   2b278:	mov	r2, r6
   2b27c:	ldr	r3, [sp, #16]
   2b280:	b	2acf0 <_obstack_memory_used@@Base+0x5c38>
   2b284:	umull	sl, fp, r2, ip
   2b288:	mov	r7, lr
   2b28c:	mov	r6, fp
   2b290:	umlal	r6, r7, r3, ip
   2b294:	cmp	r7, #0
   2b298:	bne	2b2c4 <_obstack_memory_used@@Base+0x620c>
   2b29c:	mov	r0, sl
   2b2a0:	mov	r1, r6
   2b2a4:	b	2ad0c <_obstack_memory_used@@Base+0x5c54>
   2b2a8:	ldrd	r2, [sp]
   2b2ac:	mov	r0, sl
   2b2b0:	mov	r1, #1
   2b2b4:	mul	r6, r6, r3
   2b2b8:	mla	r7, r2, r7, r6
   2b2bc:	add	fp, r7, fp
   2b2c0:	b	2aeb0 <_obstack_memory_used@@Base+0x5df8>
   2b2c4:	ldrd	r6, [sp]
   2b2c8:	mov	r0, sl
   2b2cc:	mov	lr, #1
   2b2d0:	mul	r2, r2, r7
   2b2d4:	mla	r1, r3, r6, r2
   2b2d8:	add	r1, r1, fp
   2b2dc:	b	2ad0c <_obstack_memory_used@@Base+0x5c54>
   2b2e0:	ldrd	r0, [sp]
   2b2e4:	mov	r6, sl
   2b2e8:	mov	r7, #1
   2b2ec:	mul	r2, r2, r1
   2b2f0:	mla	lr, r3, r0, r2
   2b2f4:	add	lr, lr, fp
   2b2f8:	b	2abbc <_obstack_memory_used@@Base+0x5b04>
   2b2fc:	ldm	sp, {r0, r3}
   2b300:	mov	r2, sl
   2b304:	mov	r1, #1
   2b308:	mul	r3, r6, r3
   2b30c:	mla	r3, r0, r7, r3
   2b310:	add	r3, r3, fp
   2b314:	b	2ab28 <_obstack_memory_used@@Base+0x5a70>
   2b318:	ldrd	r6, [sp]
   2b31c:	mov	r0, sl
   2b320:	mov	lr, #1
   2b324:	mul	r2, r2, r7
   2b328:	mla	r1, r3, r6, r2
   2b32c:	add	r1, r1, fp
   2b330:	b	2ad44 <_obstack_memory_used@@Base+0x5c8c>
   2b334:	ldrd	sl, [sp]
   2b338:	mov	r0, r6
   2b33c:	mov	lr, #1
   2b340:	mul	r2, r2, fp
   2b344:	mla	r1, r3, sl, r2
   2b348:	add	r1, r1, r7
   2b34c:	b	2ab48 <_obstack_memory_used@@Base+0x5a90>
   2b350:	ldm	sp, {r1, r3}
   2b354:	mov	r2, r6
   2b358:	mov	lr, #1
   2b35c:	mul	r3, r0, r3
   2b360:	mla	r3, fp, r1, r3
   2b364:	add	r3, r3, r7
   2b368:	b	2ab9c <_obstack_memory_used@@Base+0x5ae4>
   2b36c:	ldrd	r2, [sp]
   2b370:	mov	r0, sl
   2b374:	mov	r1, #1
   2b378:	mul	r6, r6, r3
   2b37c:	mla	r7, r2, r7, r6
   2b380:	add	fp, r7, fp
   2b384:	b	2acd0 <_obstack_memory_used@@Base+0x5c18>
   2b388:	mul	r3, r6, r1
   2b38c:	mov	lr, #1
   2b390:	mov	r6, sl
   2b394:	mla	r7, ip, r7, r3
   2b398:	add	r7, r7, fp
   2b39c:	b	2ac28 <_obstack_memory_used@@Base+0x5b70>
   2b3a0:	ldrd	r2, [sp]
   2b3a4:	mov	r1, #1
   2b3a8:	ldr	sl, [sp, #16]
   2b3ac:	mul	lr, r6, r3
   2b3b0:	ldr	r3, [sp, #20]
   2b3b4:	mla	lr, r2, r7, lr
   2b3b8:	add	lr, lr, r3
   2b3bc:	b	2ae58 <_obstack_memory_used@@Base+0x5da0>
   2b3c0:	ldm	sp, {r1, r3}
   2b3c4:	mov	r2, r6
   2b3c8:	mov	lr, #1
   2b3cc:	mul	r3, r0, r3
   2b3d0:	mla	r3, fp, r1, r3
   2b3d4:	add	r3, r3, r7
   2b3d8:	b	2ad28 <_obstack_memory_used@@Base+0x5c70>
   2b3dc:	ldm	sp, {r0, r3}
   2b3e0:	mov	r2, sl
   2b3e4:	mov	r1, #1
   2b3e8:	mul	r3, r6, r3
   2b3ec:	mla	r3, r0, r7, r3
   2b3f0:	add	r3, r3, fp
   2b3f4:	b	2af2c <_obstack_memory_used@@Base+0x5e74>
   2b3f8:	ldrd	r2, [sp]
   2b3fc:	mov	r0, sl
   2b400:	mov	r1, #1
   2b404:	mul	r6, r6, r3
   2b408:	mla	r7, r2, r7, r6
   2b40c:	add	fp, r7, fp
   2b410:	b	2ad9c <_obstack_memory_used@@Base+0x5ce4>
   2b414:	ldrd	sl, [sp]
   2b418:	mov	r2, r6
   2b41c:	mov	lr, #1
   2b420:	mul	r3, r0, fp
   2b424:	mla	r3, r1, sl, r3
   2b428:	add	r3, r3, r7
   2b42c:	b	2ad28 <_obstack_memory_used@@Base+0x5c70>
   2b430:	ldrd	sl, [sp]
   2b434:	mov	r0, r6
   2b438:	mov	lr, #1
   2b43c:	mul	r2, r2, fp
   2b440:	mla	r1, r3, sl, r2
   2b444:	add	r1, r1, r7
   2b448:	b	2ab80 <_obstack_memory_used@@Base+0x5ac8>
   2b44c:	movw	r3, #1676	; 0x68c
   2b450:	movt	r3, #3
   2b454:	movw	r1, #1688	; 0x698
   2b458:	movt	r1, #3
   2b45c:	movw	r0, #1704	; 0x6a8
   2b460:	movt	r0, #3
   2b464:	mov	r2, #85	; 0x55
   2b468:	bl	11d74 <__assert_fail@plt>
   2b46c:	ldrd	sl, [sp]
   2b470:	mov	r2, r6
   2b474:	mov	lr, #1
   2b478:	mul	r3, r0, fp
   2b47c:	mla	r3, r1, sl, r3
   2b480:	add	r3, r3, r7
   2b484:	b	2ab9c <_obstack_memory_used@@Base+0x5ae4>
   2b488:	ldrd	r6, [sp]
   2b48c:	mov	r2, sl
   2b490:	mov	lr, #1
   2b494:	mul	r3, r0, r7
   2b498:	mla	r3, r1, r6, r3
   2b49c:	add	r3, r3, fp
   2b4a0:	b	2ab9c <_obstack_memory_used@@Base+0x5ae4>
   2b4a4:	ldm	sp, {r0, r3}
   2b4a8:	mov	r2, sl
   2b4ac:	mov	r1, #1
   2b4b0:	mul	r3, r6, r3
   2b4b4:	mla	r3, r0, r7, r3
   2b4b8:	add	r3, r3, fp
   2b4bc:	b	2adfc <_obstack_memory_used@@Base+0x5d44>
   2b4c0:	ldrd	r6, [sp]
   2b4c4:	mov	r2, sl
   2b4c8:	mov	lr, #1
   2b4cc:	mul	r3, r0, r7
   2b4d0:	mla	r3, r1, r6, r3
   2b4d4:	add	r3, r3, fp
   2b4d8:	b	2ab64 <_obstack_memory_used@@Base+0x5aac>
   2b4dc:	ldrd	r0, [sp]
   2b4e0:	mov	r6, sl
   2b4e4:	mov	r7, #1
   2b4e8:	mul	r2, r2, r1
   2b4ec:	mla	lr, r3, r0, r2
   2b4f0:	add	lr, lr, fp
   2b4f4:	b	2af4c <_obstack_memory_used@@Base+0x5e94>
   2b4f8:	ldm	sp, {r1, r3}
   2b4fc:	mov	r2, r6
   2b500:	mov	lr, #1
   2b504:	mul	r3, r0, r3
   2b508:	mla	r3, fp, r1, r3
   2b50c:	add	r3, r3, r7
   2b510:	b	2acf0 <_obstack_memory_used@@Base+0x5c38>
   2b514:	cmp	r1, #0
   2b518:	cmpne	r0, #0
   2b51c:	beq	2b568 <_obstack_memory_used@@Base+0x64b0>
   2b520:	strd	r4, [sp, #-16]!
   2b524:	umull	r4, r5, r0, r1
   2b528:	str	r6, [sp, #8]
   2b52c:	str	lr, [sp, #12]
   2b530:	adds	r3, r5, #0
   2b534:	movne	r3, #1
   2b538:	cmp	r4, #0
   2b53c:	blt	2b548 <_obstack_memory_used@@Base+0x6490>
   2b540:	cmp	r3, #0
   2b544:	beq	2b574 <_obstack_memory_used@@Base+0x64bc>
   2b548:	bl	11bb8 <__errno_location@plt>
   2b54c:	mov	r3, #12
   2b550:	ldrd	r4, [sp]
   2b554:	ldr	r6, [sp, #8]
   2b558:	add	sp, sp, #12
   2b55c:	str	r3, [r0]
   2b560:	mov	r0, #0
   2b564:	pop	{pc}		; (ldr pc, [sp], #4)
   2b568:	mov	r1, #1
   2b56c:	mov	r0, r1
   2b570:	b	11858 <calloc@plt>
   2b574:	ldrd	r4, [sp]
   2b578:	ldr	r6, [sp, #8]
   2b57c:	ldr	lr, [sp, #12]
   2b580:	add	sp, sp, #16
   2b584:	b	11858 <calloc@plt>
   2b588:	cmp	r0, #0
   2b58c:	beq	2b598 <_obstack_memory_used@@Base+0x64e0>
   2b590:	blt	2b5a0 <_obstack_memory_used@@Base+0x64e8>
   2b594:	b	11ae0 <malloc@plt>
   2b598:	mov	r0, #1
   2b59c:	b	11ae0 <malloc@plt>
   2b5a0:	str	r4, [sp, #-8]!
   2b5a4:	str	lr, [sp, #4]
   2b5a8:	bl	11bb8 <__errno_location@plt>
   2b5ac:	mov	r3, #12
   2b5b0:	ldr	r4, [sp]
   2b5b4:	add	sp, sp, #4
   2b5b8:	str	r3, [r0]
   2b5bc:	mov	r0, #0
   2b5c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b5c4:	cmp	r0, #0
   2b5c8:	beq	2b5f0 <_obstack_memory_used@@Base+0x6538>
   2b5cc:	cmp	r1, #0
   2b5d0:	str	r4, [sp, #-8]!
   2b5d4:	str	lr, [sp, #4]
   2b5d8:	beq	2b5f8 <_obstack_memory_used@@Base+0x6540>
   2b5dc:	blt	2b60c <_obstack_memory_used@@Base+0x6554>
   2b5e0:	ldr	r4, [sp]
   2b5e4:	ldr	lr, [sp, #4]
   2b5e8:	add	sp, sp, #8
   2b5ec:	b	11990 <realloc@plt>
   2b5f0:	mov	r0, r1
   2b5f4:	b	2b588 <_obstack_memory_used@@Base+0x64d0>
   2b5f8:	bl	1ee98 <__assert_fail@plt+0xd124>
   2b5fc:	ldr	r4, [sp]
   2b600:	add	sp, sp, #4
   2b604:	mov	r0, #0
   2b608:	pop	{pc}		; (ldr pc, [sp], #4)
   2b60c:	bl	11bb8 <__errno_location@plt>
   2b610:	mov	r3, #12
   2b614:	str	r3, [r0]
   2b618:	b	2b5fc <_obstack_memory_used@@Base+0x6544>
   2b61c:	strd	r4, [sp, #-16]!
   2b620:	mov	r4, r0
   2b624:	str	r6, [sp, #8]
   2b628:	str	lr, [sp, #12]
   2b62c:	bl	11a68 <__fpending@plt>
   2b630:	ldr	r5, [r4]
   2b634:	mov	r6, r0
   2b638:	mov	r0, r4
   2b63c:	bl	2b6a4 <_obstack_memory_used@@Base+0x65ec>
   2b640:	mov	r4, r0
   2b644:	and	r5, r5, #32
   2b648:	cmp	r5, #0
   2b64c:	bne	2b684 <_obstack_memory_used@@Base+0x65cc>
   2b650:	cmp	r0, #0
   2b654:	beq	2b670 <_obstack_memory_used@@Base+0x65b8>
   2b658:	cmp	r6, #0
   2b65c:	bne	2b69c <_obstack_memory_used@@Base+0x65e4>
   2b660:	bl	11bb8 <__errno_location@plt>
   2b664:	ldr	r4, [r0]
   2b668:	subs	r4, r4, #9
   2b66c:	mvnne	r4, #0
   2b670:	mov	r0, r4
   2b674:	ldrd	r4, [sp]
   2b678:	ldr	r6, [sp, #8]
   2b67c:	add	sp, sp, #12
   2b680:	pop	{pc}		; (ldr pc, [sp], #4)
   2b684:	cmp	r0, #0
   2b688:	bne	2b69c <_obstack_memory_used@@Base+0x65e4>
   2b68c:	bl	11bb8 <__errno_location@plt>
   2b690:	str	r4, [r0]
   2b694:	mvn	r4, #0
   2b698:	b	2b670 <_obstack_memory_used@@Base+0x65b8>
   2b69c:	mvn	r4, #0
   2b6a0:	b	2b670 <_obstack_memory_used@@Base+0x65b8>
   2b6a4:	strd	r4, [sp, #-12]!
   2b6a8:	mov	r4, r0
   2b6ac:	str	lr, [sp, #8]
   2b6b0:	sub	sp, sp, #12
   2b6b4:	bl	11c0c <fileno@plt>
   2b6b8:	cmp	r0, #0
   2b6bc:	mov	r0, r4
   2b6c0:	blt	2b744 <_obstack_memory_used@@Base+0x668c>
   2b6c4:	bl	11b10 <__freading@plt>
   2b6c8:	cmp	r0, #0
   2b6cc:	bne	2b710 <_obstack_memory_used@@Base+0x6658>
   2b6d0:	mov	r0, r4
   2b6d4:	bl	2b758 <_obstack_memory_used@@Base+0x66a0>
   2b6d8:	cmp	r0, #0
   2b6dc:	beq	2b740 <_obstack_memory_used@@Base+0x6688>
   2b6e0:	bl	11bb8 <__errno_location@plt>
   2b6e4:	mov	r5, r0
   2b6e8:	mov	r0, r4
   2b6ec:	ldr	r4, [r5]
   2b6f0:	bl	11c24 <fclose@plt>
   2b6f4:	cmp	r4, #0
   2b6f8:	mvnne	r0, #0
   2b6fc:	strne	r4, [r5]
   2b700:	add	sp, sp, #12
   2b704:	ldrd	r4, [sp]
   2b708:	add	sp, sp, #8
   2b70c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b710:	mov	r0, r4
   2b714:	bl	11c0c <fileno@plt>
   2b718:	mov	r1, #1
   2b71c:	mov	r2, #0
   2b720:	mov	r3, #0
   2b724:	str	r1, [sp]
   2b728:	bl	11a44 <lseek64@plt>
   2b72c:	mvn	r3, #0
   2b730:	mvn	r2, #0
   2b734:	cmp	r1, r3
   2b738:	cmpeq	r0, r2
   2b73c:	bne	2b6d0 <_obstack_memory_used@@Base+0x6618>
   2b740:	mov	r0, r4
   2b744:	add	sp, sp, #12
   2b748:	ldrd	r4, [sp]
   2b74c:	ldr	lr, [sp, #8]
   2b750:	add	sp, sp, #12
   2b754:	b	11c24 <fclose@plt>
   2b758:	str	r4, [sp, #-8]!
   2b75c:	subs	r4, r0, #0
   2b760:	str	lr, [sp, #4]
   2b764:	sub	sp, sp, #8
   2b768:	beq	2b784 <_obstack_memory_used@@Base+0x66cc>
   2b76c:	bl	11b10 <__freading@plt>
   2b770:	cmp	r0, #0
   2b774:	beq	2b784 <_obstack_memory_used@@Base+0x66cc>
   2b778:	ldr	r3, [r4]
   2b77c:	tst	r3, #256	; 0x100
   2b780:	bne	2b79c <_obstack_memory_used@@Base+0x66e4>
   2b784:	mov	r0, r4
   2b788:	add	sp, sp, #8
   2b78c:	ldr	r4, [sp]
   2b790:	ldr	lr, [sp, #4]
   2b794:	add	sp, sp, #8
   2b798:	b	118c4 <fflush@plt>
   2b79c:	mov	r1, #1
   2b7a0:	mov	r2, #0
   2b7a4:	mov	r3, #0
   2b7a8:	mov	r0, r4
   2b7ac:	str	r1, [sp]
   2b7b0:	bl	2b7b8 <_obstack_memory_used@@Base+0x6700>
   2b7b4:	b	2b784 <_obstack_memory_used@@Base+0x66cc>
   2b7b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2b7bc:	mov	r4, r0
   2b7c0:	ldr	ip, [r0, #4]
   2b7c4:	strd	r6, [sp, #8]
   2b7c8:	str	lr, [sp, #20]
   2b7cc:	ldr	lr, [r0, #8]
   2b7d0:	str	r8, [sp, #16]
   2b7d4:	sub	sp, sp, #8
   2b7d8:	ldr	r5, [sp, #32]
   2b7dc:	cmp	lr, ip
   2b7e0:	beq	2b808 <_obstack_memory_used@@Base+0x6750>
   2b7e4:	mov	r0, r4
   2b7e8:	str	r5, [sp, #32]
   2b7ec:	add	sp, sp, #8
   2b7f0:	ldrd	r4, [sp]
   2b7f4:	ldrd	r6, [sp, #8]
   2b7f8:	ldr	r8, [sp, #16]
   2b7fc:	ldr	lr, [sp, #20]
   2b800:	add	sp, sp, #24
   2b804:	b	11c30 <fseeko64@plt>
   2b808:	ldr	ip, [r0, #16]
   2b80c:	ldr	lr, [r0, #20]
   2b810:	cmp	lr, ip
   2b814:	bne	2b7e4 <_obstack_memory_used@@Base+0x672c>
   2b818:	ldr	r8, [r0, #36]	; 0x24
   2b81c:	cmp	r8, #0
   2b820:	bne	2b7e4 <_obstack_memory_used@@Base+0x672c>
   2b824:	mov	r6, r2
   2b828:	mov	r7, r3
   2b82c:	bl	11c0c <fileno@plt>
   2b830:	mov	r2, r6
   2b834:	mov	r3, r7
   2b838:	str	r5, [sp]
   2b83c:	bl	11a44 <lseek64@plt>
   2b840:	mvn	r3, #0
   2b844:	mvn	r2, #0
   2b848:	cmp	r1, r3
   2b84c:	cmpeq	r0, r2
   2b850:	beq	2b880 <_obstack_memory_used@@Base+0x67c8>
   2b854:	ldr	r3, [r4]
   2b858:	strd	r0, [r4, #80]	; 0x50
   2b85c:	bic	r3, r3, #16
   2b860:	str	r3, [r4]
   2b864:	mov	r0, r8
   2b868:	add	sp, sp, #8
   2b86c:	ldrd	r4, [sp]
   2b870:	ldrd	r6, [sp, #8]
   2b874:	ldr	r8, [sp, #16]
   2b878:	add	sp, sp, #20
   2b87c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b880:	mvn	r8, #0
   2b884:	b	2b864 <_obstack_memory_used@@Base+0x67ac>
   2b888:	ldrb	r3, [r0]
   2b88c:	cmp	r3, #0
   2b890:	beq	2b8b4 <_obstack_memory_used@@Base+0x67fc>
   2b894:	mov	r2, #0
   2b898:	add	r2, r3, r2, ror #23
   2b89c:	ldrb	r3, [r0, #1]!
   2b8a0:	cmp	r3, #0
   2b8a4:	bne	2b898 <_obstack_memory_used@@Base+0x67e0>
   2b8a8:	udiv	r3, r2, r1
   2b8ac:	mls	r0, r1, r3, r2
   2b8b0:	bx	lr
   2b8b4:	mov	r0, r3
   2b8b8:	bx	lr
   2b8bc:	mov	r0, #14
   2b8c0:	str	r4, [sp, #-8]!
   2b8c4:	str	lr, [sp, #4]
   2b8c8:	bl	11c90 <nl_langinfo@plt>
   2b8cc:	cmp	r0, #0
   2b8d0:	beq	2b8f4 <_obstack_memory_used@@Base+0x683c>
   2b8d4:	ldrb	r2, [r0]
   2b8d8:	movw	r3, #1744	; 0x6d0
   2b8dc:	movt	r3, #3
   2b8e0:	ldr	r4, [sp]
   2b8e4:	add	sp, sp, #4
   2b8e8:	cmp	r2, #0
   2b8ec:	moveq	r0, r3
   2b8f0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b8f4:	ldr	r4, [sp]
   2b8f8:	add	sp, sp, #4
   2b8fc:	movw	r0, #1744	; 0x6d0
   2b900:	movt	r0, #3
   2b904:	pop	{pc}		; (ldr pc, [sp], #4)
   2b908:	umull	r2, r3, r1, r2
   2b90c:	cmp	r3, #0
   2b910:	bne	2b91c <_obstack_memory_used@@Base+0x6864>
   2b914:	mov	r1, r2
   2b918:	b	2b5c4 <_obstack_memory_used@@Base+0x650c>
   2b91c:	str	r4, [sp, #-8]!
   2b920:	str	lr, [sp, #4]
   2b924:	bl	11bb8 <__errno_location@plt>
   2b928:	mov	r3, #12
   2b92c:	ldr	r4, [sp]
   2b930:	add	sp, sp, #4
   2b934:	str	r3, [r0]
   2b938:	mov	r0, #0
   2b93c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b940:	eor	r1, r1, #-2147483648	; 0x80000000
   2b944:	b	2b94c <_obstack_memory_used@@Base+0x6894>
   2b948:	eor	r3, r3, #-2147483648	; 0x80000000
   2b94c:	push	{r4, r5, lr}
   2b950:	lsl	r4, r1, #1
   2b954:	lsl	r5, r3, #1
   2b958:	teq	r4, r5
   2b95c:	teqeq	r0, r2
   2b960:	orrsne	ip, r4, r0
   2b964:	orrsne	ip, r5, r2
   2b968:	mvnsne	ip, r4, asr #21
   2b96c:	mvnsne	ip, r5, asr #21
   2b970:	beq	2bb5c <_obstack_memory_used@@Base+0x6aa4>
   2b974:	lsr	r4, r4, #21
   2b978:	rsbs	r5, r4, r5, lsr #21
   2b97c:	rsblt	r5, r5, #0
   2b980:	ble	2b9a0 <_obstack_memory_used@@Base+0x68e8>
   2b984:	add	r4, r4, r5
   2b988:	eor	r2, r0, r2
   2b98c:	eor	r3, r1, r3
   2b990:	eor	r0, r2, r0
   2b994:	eor	r1, r3, r1
   2b998:	eor	r2, r0, r2
   2b99c:	eor	r3, r1, r3
   2b9a0:	cmp	r5, #54	; 0x36
   2b9a4:	pophi	{r4, r5, pc}
   2b9a8:	tst	r1, #-2147483648	; 0x80000000
   2b9ac:	lsl	r1, r1, #12
   2b9b0:	mov	ip, #1048576	; 0x100000
   2b9b4:	orr	r1, ip, r1, lsr #12
   2b9b8:	beq	2b9c4 <_obstack_memory_used@@Base+0x690c>
   2b9bc:	rsbs	r0, r0, #0
   2b9c0:	rsc	r1, r1, #0
   2b9c4:	tst	r3, #-2147483648	; 0x80000000
   2b9c8:	lsl	r3, r3, #12
   2b9cc:	orr	r3, ip, r3, lsr #12
   2b9d0:	beq	2b9dc <_obstack_memory_used@@Base+0x6924>
   2b9d4:	rsbs	r2, r2, #0
   2b9d8:	rsc	r3, r3, #0
   2b9dc:	teq	r4, r5
   2b9e0:	beq	2bb44 <_obstack_memory_used@@Base+0x6a8c>
   2b9e4:	sub	r4, r4, #1
   2b9e8:	rsbs	lr, r5, #32
   2b9ec:	blt	2ba08 <_obstack_memory_used@@Base+0x6950>
   2b9f0:	lsl	ip, r2, lr
   2b9f4:	adds	r0, r0, r2, lsr r5
   2b9f8:	adc	r1, r1, #0
   2b9fc:	adds	r0, r0, r3, lsl lr
   2ba00:	adcs	r1, r1, r3, asr r5
   2ba04:	b	2ba24 <_obstack_memory_used@@Base+0x696c>
   2ba08:	sub	r5, r5, #32
   2ba0c:	add	lr, lr, #32
   2ba10:	cmp	r2, #1
   2ba14:	lsl	ip, r3, lr
   2ba18:	orrcs	ip, ip, #2
   2ba1c:	adds	r0, r0, r3, asr r5
   2ba20:	adcs	r1, r1, r3, asr #31
   2ba24:	and	r5, r1, #-2147483648	; 0x80000000
   2ba28:	bpl	2ba38 <_obstack_memory_used@@Base+0x6980>
   2ba2c:	rsbs	ip, ip, #0
   2ba30:	rscs	r0, r0, #0
   2ba34:	rsc	r1, r1, #0
   2ba38:	cmp	r1, #1048576	; 0x100000
   2ba3c:	bcc	2ba7c <_obstack_memory_used@@Base+0x69c4>
   2ba40:	cmp	r1, #2097152	; 0x200000
   2ba44:	bcc	2ba64 <_obstack_memory_used@@Base+0x69ac>
   2ba48:	lsrs	r1, r1, #1
   2ba4c:	rrxs	r0, r0
   2ba50:	rrx	ip, ip
   2ba54:	add	r4, r4, #1
   2ba58:	lsl	r2, r4, #21
   2ba5c:	cmn	r2, #4194304	; 0x400000
   2ba60:	bcs	2bbbc <_obstack_memory_used@@Base+0x6b04>
   2ba64:	cmp	ip, #-2147483648	; 0x80000000
   2ba68:	lsrseq	ip, r0, #1
   2ba6c:	adcs	r0, r0, #0
   2ba70:	adc	r1, r1, r4, lsl #20
   2ba74:	orr	r1, r1, r5
   2ba78:	pop	{r4, r5, pc}
   2ba7c:	lsls	ip, ip, #1
   2ba80:	adcs	r0, r0, r0
   2ba84:	adc	r1, r1, r1
   2ba88:	tst	r1, #1048576	; 0x100000
   2ba8c:	sub	r4, r4, #1
   2ba90:	bne	2ba64 <_obstack_memory_used@@Base+0x69ac>
   2ba94:	teq	r1, #0
   2ba98:	moveq	r1, r0
   2ba9c:	moveq	r0, #0
   2baa0:	clz	r3, r1
   2baa4:	addeq	r3, r3, #32
   2baa8:	sub	r3, r3, #11
   2baac:	subs	r2, r3, #32
   2bab0:	bge	2bad4 <_obstack_memory_used@@Base+0x6a1c>
   2bab4:	adds	r2, r2, #12
   2bab8:	ble	2bad0 <_obstack_memory_used@@Base+0x6a18>
   2babc:	add	ip, r2, #20
   2bac0:	rsb	r2, r2, #12
   2bac4:	lsl	r0, r1, ip
   2bac8:	lsr	r1, r1, r2
   2bacc:	b	2bae4 <_obstack_memory_used@@Base+0x6a2c>
   2bad0:	add	r2, r2, #20
   2bad4:	rsble	ip, r2, #32
   2bad8:	lsl	r1, r1, r2
   2badc:	orrle	r1, r1, r0, lsr ip
   2bae0:	lslle	r0, r0, r2
   2bae4:	subs	r4, r4, r3
   2bae8:	addge	r1, r1, r4, lsl #20
   2baec:	orrge	r1, r1, r5
   2baf0:	popge	{r4, r5, pc}
   2baf4:	mvn	r4, r4
   2baf8:	subs	r4, r4, #31
   2bafc:	bge	2bb38 <_obstack_memory_used@@Base+0x6a80>
   2bb00:	adds	r4, r4, #12
   2bb04:	bgt	2bb20 <_obstack_memory_used@@Base+0x6a68>
   2bb08:	add	r4, r4, #20
   2bb0c:	rsb	r2, r4, #32
   2bb10:	lsr	r0, r0, r4
   2bb14:	orr	r0, r0, r1, lsl r2
   2bb18:	orr	r1, r5, r1, lsr r4
   2bb1c:	pop	{r4, r5, pc}
   2bb20:	rsb	r4, r4, #12
   2bb24:	rsb	r2, r4, #32
   2bb28:	lsr	r0, r0, r2
   2bb2c:	orr	r0, r0, r1, lsl r4
   2bb30:	mov	r1, r5
   2bb34:	pop	{r4, r5, pc}
   2bb38:	lsr	r0, r1, r4
   2bb3c:	mov	r1, r5
   2bb40:	pop	{r4, r5, pc}
   2bb44:	teq	r4, #0
   2bb48:	eor	r3, r3, #1048576	; 0x100000
   2bb4c:	eoreq	r1, r1, #1048576	; 0x100000
   2bb50:	addeq	r4, r4, #1
   2bb54:	subne	r5, r5, #1
   2bb58:	b	2b9e4 <_obstack_memory_used@@Base+0x692c>
   2bb5c:	mvns	ip, r4, asr #21
   2bb60:	mvnsne	ip, r5, asr #21
   2bb64:	beq	2bbcc <_obstack_memory_used@@Base+0x6b14>
   2bb68:	teq	r4, r5
   2bb6c:	teqeq	r0, r2
   2bb70:	beq	2bb84 <_obstack_memory_used@@Base+0x6acc>
   2bb74:	orrs	ip, r4, r0
   2bb78:	moveq	r1, r3
   2bb7c:	moveq	r0, r2
   2bb80:	pop	{r4, r5, pc}
   2bb84:	teq	r1, r3
   2bb88:	movne	r1, #0
   2bb8c:	movne	r0, #0
   2bb90:	popne	{r4, r5, pc}
   2bb94:	lsrs	ip, r4, #21
   2bb98:	bne	2bbac <_obstack_memory_used@@Base+0x6af4>
   2bb9c:	lsls	r0, r0, #1
   2bba0:	adcs	r1, r1, r1
   2bba4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2bba8:	pop	{r4, r5, pc}
   2bbac:	adds	r4, r4, #4194304	; 0x400000
   2bbb0:	addcc	r1, r1, #1048576	; 0x100000
   2bbb4:	popcc	{r4, r5, pc}
   2bbb8:	and	r5, r1, #-2147483648	; 0x80000000
   2bbbc:	orr	r1, r5, #2130706432	; 0x7f000000
   2bbc0:	orr	r1, r1, #15728640	; 0xf00000
   2bbc4:	mov	r0, #0
   2bbc8:	pop	{r4, r5, pc}
   2bbcc:	mvns	ip, r4, asr #21
   2bbd0:	movne	r1, r3
   2bbd4:	movne	r0, r2
   2bbd8:	mvnseq	ip, r5, asr #21
   2bbdc:	movne	r3, r1
   2bbe0:	movne	r2, r0
   2bbe4:	orrs	r4, r0, r1, lsl #12
   2bbe8:	orrseq	r5, r2, r3, lsl #12
   2bbec:	teqeq	r1, r3
   2bbf0:	orrne	r1, r1, #524288	; 0x80000
   2bbf4:	pop	{r4, r5, pc}
   2bbf8:	teq	r0, #0
   2bbfc:	moveq	r1, #0
   2bc00:	bxeq	lr
   2bc04:	push	{r4, r5, lr}
   2bc08:	mov	r4, #1024	; 0x400
   2bc0c:	add	r4, r4, #50	; 0x32
   2bc10:	mov	r5, #0
   2bc14:	mov	r1, #0
   2bc18:	b	2ba94 <_obstack_memory_used@@Base+0x69dc>
   2bc1c:	teq	r0, #0
   2bc20:	moveq	r1, #0
   2bc24:	bxeq	lr
   2bc28:	push	{r4, r5, lr}
   2bc2c:	mov	r4, #1024	; 0x400
   2bc30:	add	r4, r4, #50	; 0x32
   2bc34:	ands	r5, r0, #-2147483648	; 0x80000000
   2bc38:	rsbmi	r0, r0, #0
   2bc3c:	mov	r1, #0
   2bc40:	b	2ba94 <_obstack_memory_used@@Base+0x69dc>
   2bc44:	lsls	r2, r0, #1
   2bc48:	asr	r1, r2, #3
   2bc4c:	rrx	r1, r1
   2bc50:	lsl	r0, r2, #28
   2bc54:	andsne	r3, r2, #-16777216	; 0xff000000
   2bc58:	teqne	r3, #-16777216	; 0xff000000
   2bc5c:	eorne	r1, r1, #939524096	; 0x38000000
   2bc60:	bxne	lr
   2bc64:	bics	r2, r2, #-16777216	; 0xff000000
   2bc68:	bxeq	lr
   2bc6c:	teq	r3, #-16777216	; 0xff000000
   2bc70:	orreq	r1, r1, #524288	; 0x80000
   2bc74:	bxeq	lr
   2bc78:	push	{r4, r5, lr}
   2bc7c:	mov	r4, #896	; 0x380
   2bc80:	and	r5, r1, #-2147483648	; 0x80000000
   2bc84:	bic	r1, r1, #-2147483648	; 0x80000000
   2bc88:	b	2ba94 <_obstack_memory_used@@Base+0x69dc>
   2bc8c:	orrs	r2, r0, r1
   2bc90:	bxeq	lr
   2bc94:	push	{r4, r5, lr}
   2bc98:	mov	r5, #0
   2bc9c:	b	2bcbc <_obstack_memory_used@@Base+0x6c04>
   2bca0:	orrs	r2, r0, r1
   2bca4:	bxeq	lr
   2bca8:	push	{r4, r5, lr}
   2bcac:	ands	r5, r1, #-2147483648	; 0x80000000
   2bcb0:	bpl	2bcbc <_obstack_memory_used@@Base+0x6c04>
   2bcb4:	rsbs	r0, r0, #0
   2bcb8:	rsc	r1, r1, #0
   2bcbc:	mov	r4, #1024	; 0x400
   2bcc0:	add	r4, r4, #50	; 0x32
   2bcc4:	lsrs	ip, r1, #22
   2bcc8:	beq	2ba38 <_obstack_memory_used@@Base+0x6980>
   2bccc:	mov	r2, #3
   2bcd0:	lsrs	ip, ip, #3
   2bcd4:	addne	r2, r2, #3
   2bcd8:	lsrs	ip, ip, #3
   2bcdc:	addne	r2, r2, #3
   2bce0:	add	r2, r2, ip, lsr #3
   2bce4:	rsb	r3, r2, #32
   2bce8:	lsl	ip, r0, r3
   2bcec:	lsr	r0, r0, r2
   2bcf0:	orr	r0, r0, r1, lsl r3
   2bcf4:	lsr	r1, r1, r2
   2bcf8:	add	r4, r4, r2
   2bcfc:	b	2ba38 <_obstack_memory_used@@Base+0x6980>
   2bd00:	cmp	r3, #0
   2bd04:	cmpeq	r2, #0
   2bd08:	bne	2bd2c <_obstack_memory_used@@Base+0x6c74>
   2bd0c:	cmp	r1, #0
   2bd10:	movlt	r1, #-2147483648	; 0x80000000
   2bd14:	movlt	r0, #0
   2bd18:	blt	2bd28 <_obstack_memory_used@@Base+0x6c70>
   2bd1c:	cmpeq	r0, #0
   2bd20:	mvnne	r1, #-2147483648	; 0x80000000
   2bd24:	mvnne	r0, #0
   2bd28:	b	2be10 <_obstack_memory_used@@Base+0x6d58>
   2bd2c:	sub	sp, sp, #8
   2bd30:	push	{sp, lr}
   2bd34:	cmp	r1, #0
   2bd38:	blt	2bd58 <_obstack_memory_used@@Base+0x6ca0>
   2bd3c:	cmp	r3, #0
   2bd40:	blt	2bd8c <_obstack_memory_used@@Base+0x6cd4>
   2bd44:	bl	2be60 <_obstack_memory_used@@Base+0x6da8>
   2bd48:	ldr	lr, [sp, #4]
   2bd4c:	add	sp, sp, #8
   2bd50:	pop	{r2, r3}
   2bd54:	bx	lr
   2bd58:	rsbs	r0, r0, #0
   2bd5c:	sbc	r1, r1, r1, lsl #1
   2bd60:	cmp	r3, #0
   2bd64:	blt	2bdb0 <_obstack_memory_used@@Base+0x6cf8>
   2bd68:	bl	2be60 <_obstack_memory_used@@Base+0x6da8>
   2bd6c:	ldr	lr, [sp, #4]
   2bd70:	add	sp, sp, #8
   2bd74:	pop	{r2, r3}
   2bd78:	rsbs	r0, r0, #0
   2bd7c:	sbc	r1, r1, r1, lsl #1
   2bd80:	rsbs	r2, r2, #0
   2bd84:	sbc	r3, r3, r3, lsl #1
   2bd88:	bx	lr
   2bd8c:	rsbs	r2, r2, #0
   2bd90:	sbc	r3, r3, r3, lsl #1
   2bd94:	bl	2be60 <_obstack_memory_used@@Base+0x6da8>
   2bd98:	ldr	lr, [sp, #4]
   2bd9c:	add	sp, sp, #8
   2bda0:	pop	{r2, r3}
   2bda4:	rsbs	r0, r0, #0
   2bda8:	sbc	r1, r1, r1, lsl #1
   2bdac:	bx	lr
   2bdb0:	rsbs	r2, r2, #0
   2bdb4:	sbc	r3, r3, r3, lsl #1
   2bdb8:	bl	2be60 <_obstack_memory_used@@Base+0x6da8>
   2bdbc:	ldr	lr, [sp, #4]
   2bdc0:	add	sp, sp, #8
   2bdc4:	pop	{r2, r3}
   2bdc8:	rsbs	r2, r2, #0
   2bdcc:	sbc	r3, r3, r3, lsl #1
   2bdd0:	bx	lr
   2bdd4:	cmp	r3, #0
   2bdd8:	cmpeq	r2, #0
   2bddc:	bne	2bdf4 <_obstack_memory_used@@Base+0x6d3c>
   2bde0:	cmp	r1, #0
   2bde4:	cmpeq	r0, #0
   2bde8:	mvnne	r1, #0
   2bdec:	mvnne	r0, #0
   2bdf0:	b	2be10 <_obstack_memory_used@@Base+0x6d58>
   2bdf4:	sub	sp, sp, #8
   2bdf8:	push	{sp, lr}
   2bdfc:	bl	2be60 <_obstack_memory_used@@Base+0x6da8>
   2be00:	ldr	lr, [sp, #4]
   2be04:	add	sp, sp, #8
   2be08:	pop	{r2, r3}
   2be0c:	bx	lr
   2be10:	push	{r1, lr}
   2be14:	mov	r0, #8
   2be18:	bl	1187c <raise@plt>
   2be1c:	pop	{r1, pc}
   2be20:	vmov	d6, r0, r1
   2be24:	vldr	d7, [pc, #36]	; 2be50 <_obstack_memory_used@@Base+0x6d98>
   2be28:	vldr	d5, [pc, #40]	; 2be58 <_obstack_memory_used@@Base+0x6da0>
   2be2c:	vmul.f64	d7, d6, d7
   2be30:	vcvt.u32.f64	s14, d7
   2be34:	vcvt.f64.u32	d4, s14
   2be38:	vmov	r1, s14
   2be3c:	vmls.f64	d6, d4, d5
   2be40:	vcvt.u32.f64	s15, d6
   2be44:	vmov	r0, s15
   2be48:	bx	lr
   2be4c:	nop			; (mov r0, r0)
   2be50:	andeq	r0, r0, r0
   2be54:	ldclcc	0, cr0, [r0]
   2be58:	andeq	r0, r0, r0
   2be5c:	mvnsmi	r0, r0
   2be60:	cmp	r1, r3
   2be64:	cmpeq	r0, r2
   2be68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be6c:	mov	r4, r0
   2be70:	movcc	r0, #0
   2be74:	mov	r5, r1
   2be78:	ldr	lr, [sp, #36]	; 0x24
   2be7c:	movcc	r1, r0
   2be80:	bcc	2bf7c <_obstack_memory_used@@Base+0x6ec4>
   2be84:	cmp	r3, #0
   2be88:	clzeq	ip, r2
   2be8c:	clzne	ip, r3
   2be90:	addeq	ip, ip, #32
   2be94:	cmp	r5, #0
   2be98:	clzeq	r1, r4
   2be9c:	addeq	r1, r1, #32
   2bea0:	clzne	r1, r5
   2bea4:	sub	ip, ip, r1
   2bea8:	sub	sl, ip, #32
   2beac:	lsl	r9, r3, ip
   2beb0:	rsb	fp, ip, #32
   2beb4:	orr	r9, r9, r2, lsl sl
   2beb8:	orr	r9, r9, r2, lsr fp
   2bebc:	lsl	r8, r2, ip
   2bec0:	cmp	r5, r9
   2bec4:	cmpeq	r4, r8
   2bec8:	movcc	r0, #0
   2becc:	movcc	r1, r0
   2bed0:	bcc	2beec <_obstack_memory_used@@Base+0x6e34>
   2bed4:	mov	r0, #1
   2bed8:	subs	r4, r4, r8
   2bedc:	lsl	r1, r0, sl
   2bee0:	orr	r1, r1, r0, lsr fp
   2bee4:	lsl	r0, r0, ip
   2bee8:	sbc	r5, r5, r9
   2beec:	cmp	ip, #0
   2bef0:	beq	2bf7c <_obstack_memory_used@@Base+0x6ec4>
   2bef4:	lsr	r6, r8, #1
   2bef8:	orr	r6, r6, r9, lsl #31
   2befc:	lsr	r7, r9, #1
   2bf00:	mov	r2, ip
   2bf04:	b	2bf28 <_obstack_memory_used@@Base+0x6e70>
   2bf08:	subs	r3, r4, r6
   2bf0c:	sbc	r8, r5, r7
   2bf10:	adds	r3, r3, r3
   2bf14:	adc	r8, r8, r8
   2bf18:	adds	r4, r3, #1
   2bf1c:	adc	r5, r8, #0
   2bf20:	subs	r2, r2, #1
   2bf24:	beq	2bf44 <_obstack_memory_used@@Base+0x6e8c>
   2bf28:	cmp	r5, r7
   2bf2c:	cmpeq	r4, r6
   2bf30:	bcs	2bf08 <_obstack_memory_used@@Base+0x6e50>
   2bf34:	adds	r4, r4, r4
   2bf38:	adc	r5, r5, r5
   2bf3c:	subs	r2, r2, #1
   2bf40:	bne	2bf28 <_obstack_memory_used@@Base+0x6e70>
   2bf44:	lsr	r3, r4, ip
   2bf48:	orr	r3, r3, r5, lsl fp
   2bf4c:	lsr	r2, r5, ip
   2bf50:	orr	r3, r3, r5, lsr sl
   2bf54:	adds	r0, r0, r4
   2bf58:	mov	r4, r3
   2bf5c:	lsl	r3, r2, ip
   2bf60:	orr	r3, r3, r4, lsl sl
   2bf64:	lsl	ip, r4, ip
   2bf68:	orr	r3, r3, r4, lsr fp
   2bf6c:	adc	r1, r1, r5
   2bf70:	subs	r0, r0, ip
   2bf74:	mov	r5, r2
   2bf78:	sbc	r1, r1, r3
   2bf7c:	cmp	lr, #0
   2bf80:	strdne	r4, [lr]
   2bf84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bf88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bf8c:	mov	r7, r0
   2bf90:	ldr	r6, [pc, #72]	; 2bfe0 <_obstack_memory_used@@Base+0x6f28>
   2bf94:	ldr	r5, [pc, #72]	; 2bfe4 <_obstack_memory_used@@Base+0x6f2c>
   2bf98:	add	r6, pc, r6
   2bf9c:	add	r5, pc, r5
   2bfa0:	sub	r6, r6, r5
   2bfa4:	mov	r8, r1
   2bfa8:	mov	r9, r2
   2bfac:	bl	11838 <calloc@plt-0x20>
   2bfb0:	asrs	r6, r6, #2
   2bfb4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bfb8:	mov	r4, #0
   2bfbc:	add	r4, r4, #1
   2bfc0:	ldr	r3, [r5], #4
   2bfc4:	mov	r2, r9
   2bfc8:	mov	r1, r8
   2bfcc:	mov	r0, r7
   2bfd0:	blx	r3
   2bfd4:	cmp	r6, r4
   2bfd8:	bne	2bfbc <_obstack_memory_used@@Base+0x6f04>
   2bfdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bfe0:	andeq	r4, r1, r4, ror #30
   2bfe4:	andeq	r4, r1, ip, asr pc
   2bfe8:	bx	lr
   2bfec:	ldr	r3, [pc, #12]	; 2c000 <_obstack_memory_used@@Base+0x6f48>
   2bff0:	mov	r1, #0
   2bff4:	add	r3, pc, r3
   2bff8:	ldr	r2, [r3]
   2bffc:	b	11bdc <__cxa_atexit@plt>
   2c000:	ldrdeq	r5, [r1], -r0

Disassembly of section .fini:

0002c004 <.fini>:
   2c004:	push	{r3, lr}
   2c008:	pop	{r3, pc}
