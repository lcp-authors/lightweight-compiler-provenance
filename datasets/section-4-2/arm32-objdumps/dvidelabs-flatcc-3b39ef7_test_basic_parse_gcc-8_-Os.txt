
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000123dc <.init>:
   123dc:	push	{r3, lr}
   123e0:	bl	12544 <_start@@Base+0x3c>
   123e4:	pop	{r3, pc}

Disassembly of section .plt:

000123e8 <free@plt-0x14>:
   123e8:	push	{lr}		; (str lr, [sp, #-4]!)
   123ec:	ldr	lr, [pc, #4]	; 123f8 <free@plt-0x4>
   123f0:	add	lr, pc, lr
   123f4:	ldr	pc, [lr, #8]!
   123f8:	andeq	r9, r1, r8, lsl #24

000123fc <free@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #102400	; 0x19000
   12404:	ldr	pc, [ip, #3080]!	; 0xc08

00012408 <memcpy@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #102400	; 0x19000
   12410:	ldr	pc, [ip, #3072]!	; 0xc00

00012414 <memcmp@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #102400	; 0x19000
   1241c:	ldr	pc, [ip, #3064]!	; 0xbf8

00012420 <realloc@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #102400	; 0x19000
   12428:	ldr	pc, [ip, #3056]!	; 0xbf0

0001242c <malloc@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #102400	; 0x19000
   12434:	ldr	pc, [ip, #3048]!	; 0xbe8

00012438 <__libc_start_main@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #102400	; 0x19000
   12440:	ldr	pc, [ip, #3040]!	; 0xbe0

00012444 <__gmon_start__@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #102400	; 0x19000
   1244c:	ldr	pc, [ip, #3032]!	; 0xbd8

00012450 <strlen@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #102400	; 0x19000
   12458:	ldr	pc, [ip, #3024]!	; 0xbd0

0001245c <fprintf@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #102400	; 0x19000
   12464:	ldr	pc, [ip, #3016]!	; 0xbc8

00012468 <posix_memalign@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #102400	; 0x19000
   12470:	ldr	pc, [ip, #3008]!	; 0xbc0

00012474 <memset@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #102400	; 0x19000
   1247c:	ldr	pc, [ip, #3000]!	; 0xbb8

00012480 <strtod@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #102400	; 0x19000
   12488:	ldr	pc, [ip, #2992]!	; 0xbb0

0001248c <memchr@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #102400	; 0x19000
   12494:	ldr	pc, [ip, #2984]!	; 0xba8

00012498 <fputs@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #102400	; 0x19000
   124a0:	ldr	pc, [ip, #2976]!	; 0xba0

000124a4 <abort@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #102400	; 0x19000
   124ac:	ldr	pc, [ip, #2968]!	; 0xb98

000124b0 <__assert_fail@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #102400	; 0x19000
   124b8:	ldr	pc, [ip, #2960]!	; 0xb90

Disassembly of section .text:

000124c0 <main@@Base>:
   124c0:	mvn	r3, #0
   124c4:	push	{lr}		; (str lr, [sp, #-4]!)
   124c8:	sub	sp, sp, #244	; 0xf4
   124cc:	add	r0, sp, #8
   124d0:	str	r3, [sp, #4]
   124d4:	bl	139dc <flatcc_builder_init@@Base>
   124d8:	ldr	r1, [pc, #36]	; 12504 <main@@Base+0x44>
   124dc:	add	r3, sp, #4
   124e0:	add	r0, sp, #8
   124e4:	add	r2, r1, #644	; 0x284
   124e8:	add	r2, r2, #1
   124ec:	bl	127e4 <test@@Base>
   124f0:	add	r0, sp, #8
   124f4:	bl	13b58 <flatcc_builder_clear@@Base>
   124f8:	ldr	r0, [sp, #4]
   124fc:	add	sp, sp, #244	; 0xf4
   12500:	pop	{pc}		; (ldr pc, [sp], #4)
   12504:	andeq	r9, r1, ip, ror #9

00012508 <_start@@Base>:
   12508:	mov	fp, #0
   1250c:	mov	lr, #0
   12510:	pop	{r1}		; (ldr r1, [sp], #4)
   12514:	mov	r2, sp
   12518:	push	{r2}		; (str r2, [sp, #-4]!)
   1251c:	push	{r0}		; (str r0, [sp, #-4]!)
   12520:	ldr	ip, [pc, #16]	; 12538 <_start@@Base+0x30>
   12524:	push	{ip}		; (str ip, [sp, #-4]!)
   12528:	ldr	r0, [pc, #12]	; 1253c <_start@@Base+0x34>
   1252c:	ldr	r3, [pc, #12]	; 12540 <_start@@Base+0x38>
   12530:	bl	12438 <__libc_start_main@plt>
   12534:	bl	124a4 <abort@plt>
   12538:	ldrdeq	r9, [r1], -r8
   1253c:	andeq	r2, r1, r0, asr #9
   12540:	andeq	r9, r1, r8, ror r4
   12544:	ldr	r3, [pc, #20]	; 12560 <_start@@Base+0x58>
   12548:	ldr	r2, [pc, #20]	; 12564 <_start@@Base+0x5c>
   1254c:	add	r3, pc, r3
   12550:	ldr	r2, [r3, r2]
   12554:	cmp	r2, #0
   12558:	bxeq	lr
   1255c:	b	12444 <__gmon_start__@plt>
   12560:	andeq	r9, r1, ip, lsr #21
   12564:	andeq	r0, r0, ip, asr #32
   12568:	ldr	r0, [pc, #24]	; 12588 <_start@@Base+0x80>
   1256c:	ldr	r3, [pc, #24]	; 1258c <_start@@Base+0x84>
   12570:	cmp	r3, r0
   12574:	bxeq	lr
   12578:	ldr	r3, [pc, #16]	; 12590 <_start@@Base+0x88>
   1257c:	cmp	r3, #0
   12580:	bxeq	lr
   12584:	bx	r3
   12588:	andeq	ip, r2, r8, asr #1
   1258c:	andeq	ip, r2, r8, asr #1
   12590:	andeq	r0, r0, r0
   12594:	ldr	r0, [pc, #36]	; 125c0 <_start@@Base+0xb8>
   12598:	ldr	r1, [pc, #36]	; 125c4 <_start@@Base+0xbc>
   1259c:	sub	r1, r1, r0
   125a0:	asr	r1, r1, #2
   125a4:	add	r1, r1, r1, lsr #31
   125a8:	asrs	r1, r1, #1
   125ac:	bxeq	lr
   125b0:	ldr	r3, [pc, #16]	; 125c8 <_start@@Base+0xc0>
   125b4:	cmp	r3, #0
   125b8:	bxeq	lr
   125bc:	bx	r3
   125c0:	andeq	ip, r2, r8, asr #1
   125c4:	andeq	ip, r2, r8, asr #1
   125c8:	andeq	r0, r0, r0
   125cc:	push	{r4, lr}
   125d0:	ldr	r4, [pc, #24]	; 125f0 <_start@@Base+0xe8>
   125d4:	ldrb	r3, [r4]
   125d8:	cmp	r3, #0
   125dc:	popne	{r4, pc}
   125e0:	bl	12568 <_start@@Base+0x60>
   125e4:	mov	r3, #1
   125e8:	strb	r3, [r4]
   125ec:	pop	{r4, pc}
   125f0:	andeq	ip, r2, ip, asr #1
   125f4:	b	12594 <_start@@Base+0x8c>
   125f8:	sub	r1, r1, r0
   125fc:	push	{r4, r5, lr}
   12600:	cmp	r1, #8
   12604:	bhi	12638 <_start@@Base+0x130>
   12608:	sub	r1, r1, #1
   1260c:	cmp	r1, #7
   12610:	ldrls	pc, [pc, r1, lsl #2]
   12614:	b	126d8 <_start@@Base+0x1d0>
   12618:	andeq	r2, r1, ip, asr #13
   1261c:	andeq	r2, r1, r0, asr #13
   12620:			; <UNDEFINED> instruction: 0x000126b4
   12624:	andeq	r2, r1, r8, lsr #13
   12628:	muleq	r1, ip, r6
   1262c:	muleq	r1, r0, r6
   12630:	andeq	r2, r1, r8, lsl #13
   12634:	andeq	r2, r1, r8, lsr r6
   12638:	ldrb	r4, [r0, #7]
   1263c:	mov	r5, #0
   12640:	ldrb	r2, [r0, #6]
   12644:	mov	r1, r5
   12648:	orr	r2, r4, r2, lsl #8
   1264c:	ldrb	r4, [r0, #5]
   12650:	orr	r2, r2, r4, lsl #16
   12654:	ldrb	r4, [r0, #4]
   12658:	orr	r2, r2, r4, lsl #24
   1265c:	ldrb	r4, [r0, #3]
   12660:	orr	r1, r1, r4
   12664:	ldrb	r4, [r0, #2]
   12668:	orr	r1, r1, r4, lsl #8
   1266c:	ldrb	r4, [r0, #1]
   12670:	orr	r1, r1, r4, lsl #16
   12674:	ldrb	r4, [r0]
   12678:	mov	r5, #0
   1267c:	mov	r0, r2
   12680:	orr	r1, r1, r4, lsl #24
   12684:	pop	{r4, r5, pc}
   12688:	mov	r4, #0
   1268c:	b	1263c <_start@@Base+0x134>
   12690:	mov	r2, #0
   12694:	mov	r1, r2
   12698:	b	1264c <_start@@Base+0x144>
   1269c:	mov	r2, #0
   126a0:	mov	r1, r2
   126a4:	b	12654 <_start@@Base+0x14c>
   126a8:	mov	r2, #0
   126ac:	mov	r1, r2
   126b0:	b	1265c <_start@@Base+0x154>
   126b4:	mov	r2, #0
   126b8:	mov	r1, r2
   126bc:	b	12664 <_start@@Base+0x15c>
   126c0:	mov	r2, #0
   126c4:	mov	r1, r2
   126c8:	b	1266c <_start@@Base+0x164>
   126cc:	mov	r2, #0
   126d0:	mov	r1, r2
   126d4:	b	12674 <_start@@Base+0x16c>
   126d8:	mov	r0, #0
   126dc:	mov	r1, r0
   126e0:	pop	{r4, r5, pc}
   126e4:	sub	r3, r2, r1
   126e8:	cmp	r3, #1
   126ec:	ble	12710 <_start@@Base+0x208>
   126f0:	ldrb	r3, [r1]
   126f4:	cmp	r3, #32
   126f8:	bhi	12714 <_start@@Base+0x20c>
   126fc:	bne	12710 <_start@@Base+0x208>
   12700:	ldrb	r3, [r1, #1]
   12704:	cmp	r3, #32
   12708:	addhi	r1, r1, #1
   1270c:	bhi	12714 <_start@@Base+0x20c>
   12710:	b	172f0 <flatcc_json_parser_space_ext@@Base>
   12714:	mov	r0, r1
   12718:	bx	lr
   1271c:	ldr	r3, [r0, #12]
   12720:	cmp	r3, #0
   12724:	beq	127b4 <_start@@Base+0x2ac>
   12728:	mov	r3, r1
   1272c:	push	{lr}		; (str lr, [sp, #-4]!)
   12730:	mov	lr, #0
   12734:	cmp	r3, r2
   12738:	mov	r1, r3
   1273c:	bne	12754 <_start@@Base+0x24c>
   12740:	cmp	lr, #46	; 0x2e
   12744:	bne	127dc <_start@@Base+0x2d4>
   12748:	pop	{lr}		; (ldr lr, [sp], #4)
   1274c:	mov	r3, #5
   12750:	b	17138 <flatcc_json_parser_set_error@@Base>
   12754:	ldrb	ip, [r3], #1
   12758:	cmp	ip, #32
   1275c:	bls	12740 <_start@@Base+0x238>
   12760:	cmp	ip, #46	; 0x2e
   12764:	cmpne	ip, #95	; 0x5f
   12768:	beq	12790 <_start@@Base+0x288>
   1276c:	tst	ip, #128	; 0x80
   12770:	bne	12790 <_start@@Base+0x288>
   12774:	sub	lr, ip, #48	; 0x30
   12778:	cmp	lr, #9
   1277c:	bls	12790 <_start@@Base+0x288>
   12780:	orr	lr, ip, #32
   12784:	sub	lr, lr, #97	; 0x61
   12788:	cmp	lr, #25
   1278c:	bhi	127dc <_start@@Base+0x2d4>
   12790:	mov	lr, ip
   12794:	b	12734 <_start@@Base+0x22c>
   12798:	cmp	r3, #92	; 0x5c
   1279c:	bne	127b0 <_start@@Base+0x2a8>
   127a0:	sub	r3, r2, r1
   127a4:	cmp	r3, #1
   127a8:	ble	127d4 <_start@@Base+0x2cc>
   127ac:	add	r1, r1, #1
   127b0:	add	r1, r1, #1
   127b4:	cmp	r1, r2
   127b8:	beq	127d4 <_start@@Base+0x2cc>
   127bc:	ldrb	r3, [r1]
   127c0:	cmp	r3, #34	; 0x22
   127c4:	bne	12798 <_start@@Base+0x290>
   127c8:	add	r1, r1, #1
   127cc:	mov	r0, r1
   127d0:	bx	lr
   127d4:	mov	r3, #20
   127d8:	b	12750 <_start@@Base+0x248>
   127dc:	mov	r0, r1
   127e0:	pop	{pc}		; (ldr pc, [sp], #4)

000127e4 <test@@Base>:
   127e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e8:	sub	sp, sp, #108	; 0x6c
   127ec:	mov	r4, r1
   127f0:	mov	r5, r2
   127f4:	mov	r7, r0
   127f8:	mov	r2, #44	; 0x2c
   127fc:	mov	r1, #0
   12800:	add	r0, sp, #60	; 0x3c
   12804:	mov	r9, r3
   12808:	bl	12474 <memset@plt>
   1280c:	mov	r3, #1
   12810:	ldr	r1, [pc, #1128]	; 12c80 <test@@Base+0x49c>
   12814:	mov	r0, r7
   12818:	str	r4, [sp, #64]	; 0x40
   1281c:	str	r3, [sp, #76]	; 0x4c
   12820:	mov	r3, #0
   12824:	mov	r2, r3
   12828:	bl	140bc <flatcc_builder_start_buffer@@Base>
   1282c:	mov	r1, r4
   12830:	mov	r2, r5
   12834:	add	r0, sp, #60	; 0x3c
   12838:	bl	126e4 <_start@@Base+0x1dc>
   1283c:	cmp	r5, r0
   12840:	mov	r4, r0
   12844:	bne	1285c <test@@Base+0x78>
   12848:	ldr	r3, [pc, #1076]	; 12c84 <test@@Base+0x4a0>
   1284c:	ldr	r0, [pc, #1076]	; 12c88 <test@@Base+0x4a4>
   12850:	ldr	r1, [r3]
   12854:	bl	12498 <fputs@plt>
   12858:	b	12a5c <test@@Base+0x278>
   1285c:	bls	12950 <test@@Base+0x16c>
   12860:	ldrb	r3, [r0]
   12864:	cmp	r3, #123	; 0x7b
   12868:	bne	12950 <test@@Base+0x16c>
   1286c:	add	r1, r0, #1
   12870:	mov	r2, r5
   12874:	add	r0, sp, #60	; 0x3c
   12878:	bl	126e4 <_start@@Base+0x1dc>
   1287c:	cmp	r5, r0
   12880:	mov	r4, r0
   12884:	beq	12848 <test@@Base+0x64>
   12888:	mov	r1, #11
   1288c:	mov	r0, r7
   12890:	bl	14898 <flatcc_builder_start_table@@Base>
   12894:	cmp	r4, r5
   12898:	beq	128d4 <test@@Base+0xf0>
   1289c:	ldrb	r3, [r4]
   128a0:	cmp	r3, #34	; 0x22
   128a4:	addeq	r4, r4, #1
   128a8:	moveq	r3, #0
   128ac:	beq	12978 <test@@Base+0x194>
   128b0:	cmp	r3, #46	; 0x2e
   128b4:	movne	r3, #1
   128b8:	bne	12978 <test@@Base+0x194>
   128bc:	mov	r1, r4
   128c0:	mov	r3, #5
   128c4:	mov	r2, r5
   128c8:	add	r0, sp, #60	; 0x3c
   128cc:	bl	17138 <flatcc_json_parser_set_error@@Base>
   128d0:	mov	r4, r0
   128d4:	mov	r1, r5
   128d8:	mov	r0, r4
   128dc:	add	fp, pc, #860	; 0x35c
   128e0:	ldrd	sl, [fp]
   128e4:	bl	125f8 <_start@@Base+0xf0>
   128e8:	sub	r3, r5, r4
   128ec:	str	r1, [sp, #12]
   128f0:	add	r6, sp, #60	; 0x3c
   128f4:	cmp	r3, #8
   128f8:	lsr	r3, r0, #16
   128fc:	addgt	r8, r4, #8
   12900:	movle	r8, r5
   12904:	lsl	r3, r3, #16
   12908:	str	r3, [sp, #8]
   1290c:	ldrd	r2, [sp, #8]
   12910:	cmp	r3, fp
   12914:	cmpeq	r2, sl
   12918:	bhi	12ae4 <test@@Base+0x300>
   1291c:	and	r3, r0, #-16777216	; 0xff000000
   12920:	str	r3, [sp, #32]
   12924:	str	r1, [sp, #36]	; 0x24
   12928:	add	r3, pc, #792	; 0x318
   1292c:	ldrd	r2, [r3]
   12930:	ldrd	r0, [sp, #32]
   12934:	cmp	r1, r3
   12938:	cmpeq	r0, r2
   1293c:	beq	12980 <test@@Base+0x19c>
   12940:	mov	r3, #13
   12944:	mov	r2, r5
   12948:	mov	r1, r4
   1294c:	b	12c30 <test@@Base+0x44c>
   12950:	mov	r2, #123	; 0x7b
   12954:	ldr	r3, [pc, #808]	; 12c84 <test@@Base+0x4a0>
   12958:	ldr	r1, [pc, #812]	; 12c8c <test@@Base+0x4a8>
   1295c:	ldr	r0, [r3]
   12960:	bl	1245c <fprintf@plt>
   12964:	mov	r3, #17
   12968:	mov	r2, r5
   1296c:	mov	r1, r4
   12970:	add	r0, sp, #60	; 0x3c
   12974:	b	12c34 <test@@Base+0x450>
   12978:	str	r3, [sp, #72]	; 0x48
   1297c:	b	128d4 <test@@Base+0xf0>
   12980:	add	r1, r4, #5
   12984:	mov	r2, r5
   12988:	mov	r0, r6
   1298c:	mov	r8, r6
   12990:	bl	1271c <_start@@Base+0x214>
   12994:	mov	r1, r0
   12998:	mov	r2, r5
   1299c:	mov	r0, r6
   129a0:	bl	126e4 <_start@@Base+0x1dc>
   129a4:	cmp	r5, r0
   129a8:	mov	r4, r0
   129ac:	beq	12848 <test@@Base+0x64>
   129b0:	bls	13038 <test@@Base+0x854>
   129b4:	ldrb	r3, [r0]
   129b8:	cmp	r3, #58	; 0x3a
   129bc:	bne	13038 <test@@Base+0x854>
   129c0:	add	r1, r0, #1
   129c4:	mov	r2, r5
   129c8:	mov	r0, r6
   129cc:	bl	126e4 <_start@@Base+0x1dc>
   129d0:	cmp	r5, r0
   129d4:	mov	r4, r0
   129d8:	beq	12848 <test@@Base+0x64>
   129dc:	mov	r3, #1
   129e0:	mov	r1, #0
   129e4:	mov	r2, r3
   129e8:	mov	r0, r7
   129ec:	bl	1581c <flatcc_builder_table_add@@Base>
   129f0:	subs	r8, r0, #0
   129f4:	beq	12a5c <test@@Base+0x278>
   129f8:	mov	r2, #0
   129fc:	mov	r3, #0
   12a00:	mov	r1, r4
   12a04:	mov	r0, r6
   12a08:	strd	r2, [sp, #48]	; 0x30
   12a0c:	mov	r3, #0
   12a10:	mov	r2, r5
   12a14:	str	r3, [sp, #44]	; 0x2c
   12a18:	strb	r3, [r8]
   12a1c:	add	r3, sp, #48	; 0x30
   12a20:	str	r3, [sp]
   12a24:	add	r3, sp, #44	; 0x2c
   12a28:	bl	183a4 <flatcc_json_parser_integer@@Base>
   12a2c:	cmp	r4, r0
   12a30:	beq	12a5c <test@@Base+0x278>
   12a34:	ldr	r3, [sp, #44]	; 0x2c
   12a38:	cmp	r3, #0
   12a3c:	beq	12abc <test@@Base+0x2d8>
   12a40:	mov	r1, r0
   12a44:	mov	r3, #8
   12a48:	mov	r2, r5
   12a4c:	mov	r0, r6
   12a50:	bl	17138 <flatcc_json_parser_set_error@@Base>
   12a54:	cmp	r4, r0
   12a58:	bne	12d78 <test@@Base+0x594>
   12a5c:	ldr	r0, [sp, #84]	; 0x54
   12a60:	ldr	r3, [pc, #540]	; 12c84 <test@@Base+0x4a0>
   12a64:	cmp	r0, #0
   12a68:	ldr	r6, [r3]
   12a6c:	beq	13148 <test@@Base+0x964>
   12a70:	ldr	r3, [sp, #64]	; 0x40
   12a74:	ldr	r8, [sp, #76]	; 0x4c
   12a78:	ldr	r5, [sp, #96]	; 0x60
   12a7c:	sub	r5, r5, r3
   12a80:	add	r5, r5, #1
   12a84:	bl	17118 <flatcc_json_parser_error_string@@Base>
   12a88:	mov	r3, r5
   12a8c:	mov	r2, r8
   12a90:	ldr	r1, [pc, #504]	; 12c90 <test@@Base+0x4ac>
   12a94:	str	r0, [sp]
   12a98:	mov	r0, r6
   12a9c:	bl	1245c <fprintf@plt>
   12aa0:	mov	r0, r7
   12aa4:	bl	13b4c <flatcc_builder_reset@@Base>
   12aa8:	ldr	r3, [sp, #84]	; 0x54
   12aac:	mov	r0, r4
   12ab0:	str	r3, [r9]
   12ab4:	add	sp, sp, #108	; 0x6c
   12ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12abc:	ldrd	r2, [sp, #48]	; 0x30
   12ac0:	cmp	r3, #0
   12ac4:	cmpeq	r2, #255	; 0xff
   12ac8:	strbls	r2, [r8]
   12acc:	bls	12d78 <test@@Base+0x594>
   12ad0:	mov	r3, #7
   12ad4:	mov	r1, r0
   12ad8:	mov	r2, r5
   12adc:	add	r0, sp, #60	; 0x3c
   12ae0:	b	12a50 <test@@Base+0x26c>
   12ae4:	mov	r3, #0
   12ae8:	str	r3, [sp, #24]
   12aec:	str	r1, [sp, #28]
   12af0:	add	r3, pc, #344	; 0x158
   12af4:	ldrd	r2, [r3]
   12af8:	ldrd	sl, [sp, #24]
   12afc:	cmp	fp, r3
   12b00:	cmpeq	sl, r2
   12b04:	bhi	12f08 <test@@Base+0x724>
   12b08:	add	r3, pc, #328	; 0x148
   12b0c:	ldrd	r2, [r3]
   12b10:	cmp	r1, r3
   12b14:	cmpeq	r0, r2
   12b18:	bhi	12bcc <test@@Base+0x3e8>
   12b1c:	add	r1, pc, #316	; 0x13c
   12b20:	ldrd	r0, [r1]
   12b24:	ldrd	r2, [sp, #8]
   12b28:	cmp	r3, r1
   12b2c:	cmpeq	r2, r0
   12b30:	bne	12940 <test@@Base+0x15c>
   12b34:	add	r1, r4, #6
   12b38:	mov	r2, r5
   12b3c:	mov	r0, r6
   12b40:	mov	r8, r6
   12b44:	bl	1271c <_start@@Base+0x214>
   12b48:	mov	r1, r0
   12b4c:	mov	r2, r5
   12b50:	mov	r0, r6
   12b54:	bl	126e4 <_start@@Base+0x1dc>
   12b58:	cmp	r5, r0
   12b5c:	mov	r4, r0
   12b60:	beq	12848 <test@@Base+0x64>
   12b64:	bls	13038 <test@@Base+0x854>
   12b68:	ldrb	r3, [r0]
   12b6c:	cmp	r3, #58	; 0x3a
   12b70:	bne	13038 <test@@Base+0x854>
   12b74:	add	r1, r0, #1
   12b78:	mov	r2, r5
   12b7c:	mov	r0, r6
   12b80:	bl	126e4 <_start@@Base+0x1dc>
   12b84:	cmp	r5, r0
   12b88:	mov	r4, r0
   12b8c:	beq	12848 <test@@Base+0x64>
   12b90:	mov	r3, #8
   12b94:	mov	r1, #1
   12b98:	mov	r2, r3
   12b9c:	mov	r0, r7
   12ba0:	bl	1581c <flatcc_builder_table_add@@Base>
   12ba4:	subs	r3, r0, #0
   12ba8:	beq	12a5c <test@@Base+0x278>
   12bac:	mov	r2, r5
   12bb0:	mov	r1, r4
   12bb4:	mov	r0, r6
   12bb8:	bl	17c6c <flatcc_json_parser_double@@Base>
   12bbc:	cmp	r4, r0
   12bc0:	bne	12d78 <test@@Base+0x594>
   12bc4:	mov	r4, r0
   12bc8:	b	12a5c <test@@Base+0x278>
   12bcc:	add	r3, pc, #148	; 0x94
   12bd0:	ldrd	r2, [r3]
   12bd4:	cmp	r1, r3
   12bd8:	cmpeq	r0, r2
   12bdc:	bne	12940 <test@@Base+0x15c>
   12be0:	mov	r1, r5
   12be4:	mov	r0, r8
   12be8:	bl	125f8 <_start@@Base+0xf0>
   12bec:	mov	r3, #0
   12bf0:	str	r3, [sp, #16]
   12bf4:	str	r1, [sp, #20]
   12bf8:	add	r3, pc, #112	; 0x70
   12bfc:	ldrd	r2, [r3]
   12c00:	ldrd	r0, [sp, #16]
   12c04:	cmp	r1, r3
   12c08:	cmpeq	r0, r2
   12c0c:	bhi	12de8 <test@@Base+0x604>
   12c10:	add	r3, pc, #96	; 0x60
   12c14:	ldrd	r2, [r3]
   12c18:	cmp	r1, r3
   12c1c:	cmpeq	r0, r2
   12c20:	beq	12c94 <test@@Base+0x4b0>
   12c24:	mov	r3, #13
   12c28:	mov	r2, r5
   12c2c:	mov	r1, r8
   12c30:	mov	r0, r6
   12c34:	bl	17138 <flatcc_json_parser_set_error@@Base>
   12c38:	b	12bc4 <test@@Base+0x3e0>
   12c3c:	nop	{0}
   12c40:	mcrvs	15, 3, pc, cr3, cr15, {7}	; <UNPREDICTABLE>
   12c44:	cmnvc	r5, #-1140850687	; 0xbc000001
   12c48:	strvc	r0, [r0], #-0
   12c4c:			; <UNDEFINED> instruction: 0x66697273
   12c50:			; <UNDEFINED> instruction: 0xffffffff
   12c54:	bvc	1d6de2c <__bss_end__@@Base+0x1d41d5c>
   12c58:	mcrvs	3, 3, r7, cr4, cr15, {0}
   12c5c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12c60:	cdpvs	0, 6, cr0, cr4, cr0, {0}
   12c64:	cmnvc	r5, #-1140850687	; 0xbc000001
   12c68:	cdpvs	3, 6, cr7, cr4, cr0, {1}
   12c6c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12c70:			; <UNDEFINED> instruction: 0xffffffff
   12c74:	stclvs	6, cr6, [r5], #-460	; 0xfffffe34
   12c78:	andeq	r0, r0, r0
   12c7c:	stfvse	f6, [r5], #-400	; 0xfffffe70
   12c80:	andeq	r9, r1, r2, ror r7
   12c84:	andeq	ip, r2, r8, asr #1
   12c88:	andeq	r9, r1, r7, ror r7
   12c8c:	andeq	r9, r1, r5, lsl #15
   12c90:			; <UNDEFINED> instruction: 0x000197b6
   12c94:	mov	r2, r5
   12c98:	add	r1, r8, #4
   12c9c:	mov	r0, r6
   12ca0:	mov	sl, r6
   12ca4:	bl	1271c <_start@@Base+0x214>
   12ca8:	mov	r1, r0
   12cac:	mov	r2, r5
   12cb0:	mov	r0, r6
   12cb4:	bl	126e4 <_start@@Base+0x1dc>
   12cb8:	cmp	r5, r0
   12cbc:	mov	r4, r0
   12cc0:	beq	12848 <test@@Base+0x64>
   12cc4:	bls	12ee0 <test@@Base+0x6fc>
   12cc8:	ldrb	r3, [r0]
   12ccc:	cmp	r3, #58	; 0x3a
   12cd0:	bne	12ee0 <test@@Base+0x6fc>
   12cd4:	add	r1, r0, #1
   12cd8:	mov	r2, r5
   12cdc:	mov	r0, r6
   12ce0:	bl	126e4 <_start@@Base+0x1dc>
   12ce4:	cmp	r5, r0
   12ce8:	mov	r4, r0
   12cec:	beq	12848 <test@@Base+0x64>
   12cf0:	mov	r3, #8
   12cf4:	mov	r1, #3
   12cf8:	mov	r2, r3
   12cfc:	mov	r0, r7
   12d00:	bl	1581c <flatcc_builder_table_add@@Base>
   12d04:	subs	r6, r0, #0
   12d08:	beq	12a5c <test@@Base+0x278>
   12d0c:	mov	r2, #0
   12d10:	mov	r3, #0
   12d14:	mov	r1, #0
   12d18:	add	r0, sp, #60	; 0x3c
   12d1c:	str	r1, [sp, #44]	; 0x2c
   12d20:	mov	r1, r4
   12d24:	strd	r2, [sp, #48]	; 0x30
   12d28:	strd	r2, [r6]
   12d2c:	add	r3, sp, #48	; 0x30
   12d30:	mov	r2, r5
   12d34:	str	r3, [sp]
   12d38:	add	r3, sp, #44	; 0x2c
   12d3c:	bl	183a4 <flatcc_json_parser_integer@@Base>
   12d40:	cmp	r4, r0
   12d44:	beq	12a5c <test@@Base+0x278>
   12d48:	ldr	r1, [sp, #44]	; 0x2c
   12d4c:	ldrd	r2, [sp, #48]	; 0x30
   12d50:	cmp	r1, #0
   12d54:	beq	12dd8 <test@@Base+0x5f4>
   12d58:	cmp	r3, #-2147483648	; 0x80000000
   12d5c:	cmpeq	r2, #0
   12d60:	bls	12d6c <test@@Base+0x588>
   12d64:	mov	r3, #8
   12d68:	b	12ad4 <test@@Base+0x2f0>
   12d6c:	rsbs	r2, r2, #0
   12d70:	rsc	r3, r3, #0
   12d74:	strd	r2, [r6]
   12d78:	mov	r1, r0
   12d7c:	mov	r2, r5
   12d80:	add	r0, sp, #60	; 0x3c
   12d84:	bl	126e4 <_start@@Base+0x1dc>
   12d88:	cmp	r5, r0
   12d8c:	mov	r4, r0
   12d90:	beq	12848 <test@@Base+0x64>
   12d94:	ldrb	r3, [r0]
   12d98:	cmp	r3, #44	; 0x2c
   12d9c:	bne	130f4 <test@@Base+0x910>
   12da0:	add	r1, r0, #1
   12da4:	mov	r2, r5
   12da8:	add	r0, sp, #60	; 0x3c
   12dac:	bl	126e4 <_start@@Base+0x1dc>
   12db0:	cmp	r5, r0
   12db4:	mov	r4, r0
   12db8:	beq	12848 <test@@Base+0x64>
   12dbc:	ldrb	r3, [r0]
   12dc0:	cmp	r3, #125	; 0x7d
   12dc4:	bne	12894 <test@@Base+0xb0>
   12dc8:	cmp	r5, r0
   12dcc:	bhi	13104 <test@@Base+0x920>
   12dd0:	mov	r2, #125	; 0x7d
   12dd4:	b	12954 <test@@Base+0x170>
   12dd8:	cmp	r2, #0
   12ddc:	sbcs	r1, r3, #0
   12de0:	bge	12d74 <test@@Base+0x590>
   12de4:	b	12ad0 <test@@Base+0x2ec>
   12de8:	add	r3, pc, #872	; 0x368
   12dec:	ldrd	r2, [r3]
   12df0:	ldrd	r0, [sp, #16]
   12df4:	cmp	r1, r3
   12df8:	cmpeq	r0, r2
   12dfc:	bne	12c24 <test@@Base+0x440>
   12e00:	mov	r2, r5
   12e04:	add	r1, r8, #4
   12e08:	mov	r0, r6
   12e0c:	mov	sl, r6
   12e10:	bl	1271c <_start@@Base+0x214>
   12e14:	mov	r1, r0
   12e18:	mov	r2, r5
   12e1c:	mov	r0, r6
   12e20:	bl	126e4 <_start@@Base+0x1dc>
   12e24:	cmp	r5, r0
   12e28:	mov	r4, r0
   12e2c:	beq	12848 <test@@Base+0x64>
   12e30:	bls	12ee0 <test@@Base+0x6fc>
   12e34:	ldrb	r3, [r0]
   12e38:	cmp	r3, #58	; 0x3a
   12e3c:	bne	12ee0 <test@@Base+0x6fc>
   12e40:	add	r1, r0, #1
   12e44:	mov	r2, r5
   12e48:	mov	r0, r6
   12e4c:	bl	126e4 <_start@@Base+0x1dc>
   12e50:	cmp	r5, r0
   12e54:	mov	r4, r0
   12e58:	beq	12848 <test@@Base+0x64>
   12e5c:	mov	r3, #4
   12e60:	mov	r1, #2
   12e64:	mov	r2, r3
   12e68:	mov	r0, r7
   12e6c:	bl	1581c <flatcc_builder_table_add@@Base>
   12e70:	subs	r6, r0, #0
   12e74:	beq	12a5c <test@@Base+0x278>
   12e78:	mov	r2, #0
   12e7c:	mov	r3, #0
   12e80:	mov	r1, r4
   12e84:	add	r0, sp, #60	; 0x3c
   12e88:	strd	r2, [sp, #48]	; 0x30
   12e8c:	mov	r3, #0
   12e90:	mov	r2, r5
   12e94:	str	r3, [sp, #44]	; 0x2c
   12e98:	str	r3, [r6]
   12e9c:	add	r3, sp, #48	; 0x30
   12ea0:	str	r3, [sp]
   12ea4:	add	r3, sp, #44	; 0x2c
   12ea8:	bl	183a4 <flatcc_json_parser_integer@@Base>
   12eac:	cmp	r4, r0
   12eb0:	beq	12a5c <test@@Base+0x278>
   12eb4:	ldr	r3, [sp, #44]	; 0x2c
   12eb8:	cmp	r3, #0
   12ebc:	bne	12d64 <test@@Base+0x580>
   12ec0:	ldrd	r2, [sp, #48]	; 0x30
   12ec4:	mov	fp, #0
   12ec8:	mvn	sl, #0
   12ecc:	cmp	r3, fp
   12ed0:	cmpeq	r2, sl
   12ed4:	strls	r2, [r6]
   12ed8:	bls	12d78 <test@@Base+0x594>
   12edc:	b	12ad0 <test@@Base+0x2ec>
   12ee0:	ldr	r3, [pc, #640]	; 13168 <test@@Base+0x984>
   12ee4:	mov	r2, #58	; 0x3a
   12ee8:	ldr	r1, [pc, #636]	; 1316c <test@@Base+0x988>
   12eec:	ldr	r0, [r3]
   12ef0:	bl	1245c <fprintf@plt>
   12ef4:	mov	r3, #17
   12ef8:	mov	r2, r5
   12efc:	mov	r1, r4
   12f00:	mov	r0, sl
   12f04:	b	12c34 <test@@Base+0x450>
   12f08:	add	r1, pc, #592	; 0x250
   12f0c:	ldrd	r0, [r1]
   12f10:	ldrd	r2, [sp, #24]
   12f14:	cmp	r3, r1
   12f18:	cmpeq	r2, r0
   12f1c:	bne	12940 <test@@Base+0x15c>
   12f20:	add	r1, r4, #4
   12f24:	mov	r2, r5
   12f28:	mov	r0, r6
   12f2c:	mov	r8, r6
   12f30:	bl	1271c <_start@@Base+0x214>
   12f34:	mov	r1, r0
   12f38:	mov	r2, r5
   12f3c:	mov	r0, r6
   12f40:	bl	126e4 <_start@@Base+0x1dc>
   12f44:	cmp	r5, r0
   12f48:	mov	r4, r0
   12f4c:	beq	12848 <test@@Base+0x64>
   12f50:	bls	13038 <test@@Base+0x854>
   12f54:	ldrb	r3, [r0]
   12f58:	cmp	r3, #58	; 0x3a
   12f5c:	bne	13038 <test@@Base+0x854>
   12f60:	add	r1, r0, #1
   12f64:	mov	r2, r5
   12f68:	mov	r0, r6
   12f6c:	bl	126e4 <_start@@Base+0x1dc>
   12f70:	cmp	r5, r0
   12f74:	mov	r4, r0
   12f78:	beq	12848 <test@@Base+0x64>
   12f7c:	ldrb	r3, [r0]
   12f80:	cmp	r3, #34	; 0x22
   12f84:	addeq	r8, r0, #1
   12f88:	beq	12fa4 <test@@Base+0x7c0>
   12f8c:	mov	r1, r0
   12f90:	mov	r3, #16
   12f94:	mov	r2, r5
   12f98:	mov	r0, r6
   12f9c:	bl	17138 <flatcc_json_parser_set_error@@Base>
   12fa0:	mov	r8, r0
   12fa4:	add	r6, sp, #60	; 0x3c
   12fa8:	mov	r2, r5
   12fac:	mov	r1, r8
   12fb0:	mov	r0, r6
   12fb4:	bl	17274 <flatcc_json_parser_string_part@@Base>
   12fb8:	cmp	r5, r0
   12fbc:	mov	r4, r0
   12fc0:	beq	12a5c <test@@Base+0x278>
   12fc4:	ldrb	r3, [r0]
   12fc8:	sub	sl, r0, r8
   12fcc:	cmp	r3, #34	; 0x22
   12fd0:	bne	13060 <test@@Base+0x87c>
   12fd4:	mov	r2, sl
   12fd8:	mov	r1, r8
   12fdc:	mov	r0, r7
   12fe0:	bl	15690 <flatcc_builder_create_string@@Base>
   12fe4:	cmp	r0, #0
   12fe8:	mov	r6, r0
   12fec:	beq	12a5c <test@@Base+0x278>
   12ff0:	mov	r1, #10
   12ff4:	mov	r0, r7
   12ff8:	bl	159c0 <flatcc_builder_table_add_offset@@Base>
   12ffc:	cmp	r0, #0
   13000:	beq	12a5c <test@@Base+0x278>
   13004:	cmp	r4, r5
   13008:	str	r6, [r0]
   1300c:	beq	13020 <test@@Base+0x83c>
   13010:	ldrb	r3, [r4]
   13014:	cmp	r3, #34	; 0x22
   13018:	addeq	r0, r4, #1
   1301c:	beq	12d78 <test@@Base+0x594>
   13020:	mov	r3, #20
   13024:	mov	r2, r5
   13028:	mov	r1, r4
   1302c:	add	r0, sp, #60	; 0x3c
   13030:	bl	17138 <flatcc_json_parser_set_error@@Base>
   13034:	b	12d78 <test@@Base+0x594>
   13038:	ldr	r3, [pc, #296]	; 13168 <test@@Base+0x984>
   1303c:	mov	r2, #58	; 0x3a
   13040:	ldr	r1, [pc, #292]	; 1316c <test@@Base+0x988>
   13044:	ldr	r0, [r3]
   13048:	bl	1245c <fprintf@plt>
   1304c:	mov	r3, #17
   13050:	mov	r2, r5
   13054:	mov	r1, r4
   13058:	mov	r0, r8
   1305c:	b	12c34 <test@@Base+0x450>
   13060:	mov	r0, r7
   13064:	bl	14820 <flatcc_builder_start_string@@Base>
   13068:	mov	r1, sl
   1306c:	mov	r0, r7
   13070:	bl	144f8 <flatcc_builder_extend_string@@Base>
   13074:	cmp	r0, #0
   13078:	beq	12a5c <test@@Base+0x278>
   1307c:	mov	r2, sl
   13080:	mov	r1, r8
   13084:	bl	12408 <memcpy@plt>
   13088:	add	r3, sp, #40	; 0x28
   1308c:	mov	r1, r4
   13090:	mov	r2, r5
   13094:	mov	r0, r6
   13098:	bl	177e0 <flatcc_json_parser_string_escape@@Base>
   1309c:	mov	r8, r0
   130a0:	ldrb	r2, [sp, #40]	; 0x28
   130a4:	add	r1, sp, #41	; 0x29
   130a8:	mov	r0, r7
   130ac:	bl	1455c <flatcc_builder_append_string@@Base>
   130b0:	mov	r2, r5
   130b4:	mov	r1, r8
   130b8:	mov	r0, r6
   130bc:	bl	17274 <flatcc_json_parser_string_part@@Base>
   130c0:	cmp	r5, r0
   130c4:	mov	r4, r0
   130c8:	beq	12a5c <test@@Base+0x278>
   130cc:	sub	r2, r0, r8
   130d0:	mov	r1, r8
   130d4:	mov	r0, r7
   130d8:	bl	1455c <flatcc_builder_append_string@@Base>
   130dc:	ldrb	r3, [r4]
   130e0:	cmp	r3, #34	; 0x22
   130e4:	bne	13088 <test@@Base+0x8a4>
   130e8:	mov	r0, r7
   130ec:	bl	15788 <flatcc_builder_end_string@@Base>
   130f0:	b	12fe4 <test@@Base+0x800>
   130f4:	cmp	r5, r0
   130f8:	bls	12dd0 <test@@Base+0x5ec>
   130fc:	cmp	r3, #125	; 0x7d
   13100:	bne	12dd0 <test@@Base+0x5ec>
   13104:	mov	r0, r7
   13108:	add	r4, r4, #1
   1310c:	bl	14ec0 <flatcc_builder_end_table@@Base>
   13110:	mov	r1, r0
   13114:	mov	r0, r7
   13118:	bl	14158 <flatcc_builder_end_buffer@@Base>
   1311c:	mov	r1, r4
   13120:	mov	r2, r5
   13124:	add	r0, sp, #60	; 0x3c
   13128:	bl	126e4 <_start@@Base+0x1dc>
   1312c:	cmp	r5, r0
   13130:	mov	r4, r0
   13134:	beq	12a5c <test@@Base+0x278>
   13138:	ldr	r3, [pc, #40]	; 13168 <test@@Base+0x984>
   1313c:	ldr	r0, [pc, #44]	; 13170 <test@@Base+0x98c>
   13140:	ldr	r1, [r3]
   13144:	b	12854 <test@@Base+0x70>
   13148:	mov	r1, r6
   1314c:	ldr	r0, [pc, #32]	; 13174 <test@@Base+0x990>
   13150:	bl	12498 <fputs@plt>
   13154:	b	12aa8 <test@@Base+0x2c4>
   13158:	andeq	r0, r0, r0
   1315c:	stclvs	6, cr6, [r5], #-464	; 0xfffffe30
   13160:	andeq	r0, r0, r0
   13164:	bvc	1d6e340 <__bss_end__@@Base+0x1d42270>
   13168:	andeq	ip, r2, r8, asr #1
   1316c:	andeq	r9, r1, r5, lsl #15
   13170:	muleq	r1, fp, r7
   13174:	andeq	r9, r1, r1, asr #15
   13178:	ldr	ip, [r0, #28]
   1317c:	ldrd	r2, [r0, #60]	; 0x3c
   13180:	sub	r3, r3, ip
   13184:	add	r2, r2, ip
   13188:	cmp	r3, r1
   1318c:	strls	r3, [r0, #24]
   13190:	strhi	r1, [r0, #24]
   13194:	ldr	r3, [r0, #32]
   13198:	str	r2, [r0, #16]
   1319c:	str	r1, [r3, #4]
   131a0:	bx	lr
   131a4:	push	{r0, r1, r4, r5, r6, lr}
   131a8:	mov	r6, r2
   131ac:	mov	r3, #1
   131b0:	mov	r4, r0
   131b4:	ldr	r2, [r0, #28]
   131b8:	str	r3, [sp]
   131bc:	ldr	r5, [r0, #48]	; 0x30
   131c0:	add	r2, r1, r2
   131c4:	add	r1, r0, #60	; 0x3c
   131c8:	ldr	r0, [r0, #40]	; 0x28
   131cc:	blx	r5
   131d0:	subs	r5, r0, #0
   131d4:	mvnne	r5, #0
   131d8:	bne	131e8 <test@@Base+0xa04>
   131dc:	mov	r1, r6
   131e0:	mov	r0, r4
   131e4:	bl	13178 <test@@Base+0x994>
   131e8:	mov	r0, r5
   131ec:	add	sp, sp, #8
   131f0:	pop	{r4, r5, r6, pc}
   131f4:	push	{r4, r5, r6, lr}
   131f8:	mov	r4, r0
   131fc:	ldr	r5, [r0, #20]
   13200:	ldr	r3, [r0, #24]
   13204:	add	r1, r5, r1
   13208:	cmp	r1, r3
   1320c:	str	r1, [r0, #20]
   13210:	bcs	13220 <test@@Base+0xa3c>
   13214:	ldr	r0, [r4, #16]
   13218:	add	r0, r0, r5
   1321c:	pop	{r4, r5, r6, pc}
   13220:	mvn	r2, #3
   13224:	add	r1, r1, #1
   13228:	bl	131a4 <test@@Base+0x9c0>
   1322c:	cmp	r0, #0
   13230:	beq	13214 <test@@Base+0xa30>
   13234:	mov	r0, #0
   13238:	pop	{r4, r5, r6, pc}
   1323c:	push	{r4, lr}
   13240:	mov	r1, #0
   13244:	mov	r4, r0
   13248:	ldr	r2, [r0, #20]
   1324c:	ldr	r0, [r0, #16]
   13250:	bl	12474 <memset@plt>
   13254:	ldr	r3, [r4, #32]
   13258:	mov	r0, r4
   1325c:	ldmib	r3, {r1, r2}
   13260:	str	r2, [r4, #20]
   13264:	ldr	r2, [r3]
   13268:	str	r2, [r4, #28]
   1326c:	bl	13178 <test@@Base+0x994>
   13270:	ldrh	r3, [r4, #130]	; 0x82
   13274:	ldrh	r2, [r4, #128]	; 0x80
   13278:	cmp	r2, r3
   1327c:	strhcc	r3, [r4, #128]	; 0x80
   13280:	ldr	r3, [r4, #32]
   13284:	ldrh	r2, [r3, #12]
   13288:	sub	r3, r3, #36	; 0x24
   1328c:	str	r3, [r4, #32]
   13290:	ldr	r3, [r4, #156]	; 0x9c
   13294:	strh	r2, [r4, #130]	; 0x82
   13298:	sub	r3, r3, #1
   1329c:	str	r3, [r4, #156]	; 0x9c
   132a0:	pop	{r4, pc}
   132a4:	ldr	r3, [r0, #20]
   132a8:	mov	r2, r1
   132ac:	mov	r1, #0
   132b0:	sub	r3, r3, r2
   132b4:	str	r3, [r0, #20]
   132b8:	ldr	r0, [r0, #16]
   132bc:	add	r0, r0, r3
   132c0:	b	12474 <memset@plt>
   132c4:	push	{r4, r5, r6, lr}
   132c8:	mov	r6, r1
   132cc:	mov	r1, r2
   132d0:	mov	r4, r2
   132d4:	bl	131f4 <test@@Base+0xa10>
   132d8:	subs	r5, r0, #0
   132dc:	beq	132ec <test@@Base+0xb08>
   132e0:	mov	r2, r4
   132e4:	mov	r1, r6
   132e8:	bl	12408 <memcpy@plt>
   132ec:	mov	r0, r5
   132f0:	pop	{r4, r5, r6, pc}
   132f4:	push	{r0, r1, r4, lr}
   132f8:	cmp	r0, #4
   132fc:	mov	r4, #0
   13300:	mov	r2, r1
   13304:	movcs	r1, r0
   13308:	movcc	r1, #4
   1330c:	add	r0, sp, #4
   13310:	str	r4, [sp, #4]
   13314:	bl	12468 <posix_memalign@plt>
   13318:	cmp	r0, r4
   1331c:	beq	13334 <test@@Base+0xb50>
   13320:	ldr	r0, [sp, #4]
   13324:	cmp	r0, r4
   13328:	beq	13334 <test@@Base+0xb50>
   1332c:	bl	123fc <free@plt>
   13330:	str	r4, [sp, #4]
   13334:	ldr	r0, [sp, #4]
   13338:	add	sp, sp, #8
   1333c:	pop	{r4, pc}

00013340 <flatcc_builder_default_alloc@@Base>:
   13340:	push	{r4, r5, r6, r7, r8, lr}
   13344:	subs	r6, r2, #0
   13348:	mov	r5, r1
   1334c:	bne	13370 <flatcc_builder_default_alloc@@Base+0x30>
   13350:	ldr	r0, [r1]
   13354:	cmp	r0, #0
   13358:	popeq	{r4, r5, r6, r7, r8, pc}
   1335c:	bl	123fc <free@plt>
   13360:	str	r6, [r5]
   13364:	str	r6, [r5, #4]
   13368:	mov	r0, #0
   1336c:	pop	{r4, r5, r6, r7, r8, pc}
   13370:	ldr	r2, [sp, #24]
   13374:	mov	r7, r3
   13378:	sub	r2, r2, #1
   1337c:	cmp	r2, #6
   13380:	ldrls	pc, [pc, r2, lsl #2]
   13384:	b	13418 <flatcc_builder_default_alloc@@Base+0xd8>
   13388:	andeq	r3, r1, r0, lsr #8
   1338c:	andeq	r3, r1, r8, lsl r4
   13390:	andeq	r3, r1, r8, lsl r4
   13394:	andeq	r3, r1, r8, lsl #8
   13398:	andeq	r3, r1, r4, lsr #7
   1339c:	andeq	r3, r1, r8, lsl r4
   133a0:	andeq	r3, r1, r0, lsl r4
   133a4:	mov	r4, r6
   133a8:	cmp	r6, r4
   133ac:	bhi	13428 <flatcc_builder_default_alloc@@Base+0xe8>
   133b0:	ldr	r2, [r5, #4]
   133b4:	cmp	r6, r2
   133b8:	bhi	133c4 <flatcc_builder_default_alloc@@Base+0x84>
   133bc:	cmp	r4, r2, lsr #1
   133c0:	bls	13368 <flatcc_builder_default_alloc@@Base+0x28>
   133c4:	mov	r1, r4
   133c8:	ldr	r0, [r5]
   133cc:	bl	12420 <realloc@plt>
   133d0:	subs	r6, r0, #0
   133d4:	beq	13430 <flatcc_builder_default_alloc@@Base+0xf0>
   133d8:	cmp	r7, #0
   133dc:	beq	133fc <flatcc_builder_default_alloc@@Base+0xbc>
   133e0:	ldr	r0, [r5, #4]
   133e4:	cmp	r4, r0
   133e8:	bls	133fc <flatcc_builder_default_alloc@@Base+0xbc>
   133ec:	sub	r2, r4, r0
   133f0:	mov	r1, #0
   133f4:	add	r0, r6, r0
   133f8:	bl	12474 <memset@plt>
   133fc:	str	r6, [r5]
   13400:	str	r4, [r5, #4]
   13404:	b	13368 <flatcc_builder_default_alloc@@Base+0x28>
   13408:	mov	r4, #288	; 0x120
   1340c:	b	133a8 <flatcc_builder_default_alloc@@Base+0x68>
   13410:	mov	r4, #64	; 0x40
   13414:	b	133a8 <flatcc_builder_default_alloc@@Base+0x68>
   13418:	mov	r4, #32
   1341c:	b	133a8 <flatcc_builder_default_alloc@@Base+0x68>
   13420:	mov	r4, #256	; 0x100
   13424:	b	133a8 <flatcc_builder_default_alloc@@Base+0x68>
   13428:	lsl	r4, r4, #1
   1342c:	b	133a8 <flatcc_builder_default_alloc@@Base+0x68>
   13430:	mvn	r0, #0
   13434:	pop	{r4, r5, r6, r7, r8, pc}
   13438:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1343c:	add	r6, r0, #52	; 0x34
   13440:	mov	r4, r1
   13444:	add	r1, r6, r1, lsl #3
   13448:	mov	r5, r2
   1344c:	add	r2, r2, r3
   13450:	ldr	r3, [r1, #4]
   13454:	cmp	r2, r3
   13458:	bls	1348c <flatcc_builder_default_alloc@@Base+0x14c>
   1345c:	str	r4, [sp]
   13460:	ldr	r3, [sp, #32]
   13464:	ldr	r7, [r0, #48]	; 0x30
   13468:	ldr	r0, [r0, #40]	; 0x28
   1346c:	blx	r7
   13470:	cmp	r0, #0
   13474:	beq	1348c <flatcc_builder_default_alloc@@Base+0x14c>
   13478:	ldr	r3, [pc, #28]	; 1349c <flatcc_builder_default_alloc@@Base+0x15c>
   1347c:	mov	r2, #308	; 0x134
   13480:	ldr	r1, [pc, #24]	; 134a0 <flatcc_builder_default_alloc@@Base+0x160>
   13484:	ldr	r0, [pc, #24]	; 134a4 <flatcc_builder_default_alloc@@Base+0x164>
   13488:	bl	124b0 <__assert_fail@plt>
   1348c:	ldr	r0, [r6, r4, lsl #3]
   13490:	add	r0, r0, r5
   13494:	add	sp, sp, #12
   13498:	pop	{r4, r5, r6, r7, pc}
   1349c:	ldrdeq	r9, [r1], -r1
   134a0:	ldrdeq	r9, [r1], -r0
   134a4:	andeq	r9, r1, sp, lsr pc
   134a8:	ldrd	r2, [r0, #156]	; 0x9c
   134ac:	push	{r0, r1, r4, r5, r6, lr}
   134b0:	mov	r5, r1
   134b4:	mov	r4, r0
   134b8:	add	r1, r2, #1
   134bc:	cmp	r1, r3
   134c0:	str	r1, [r0, #156]	; 0x9c
   134c4:	ble	13570 <flatcc_builder_default_alloc@@Base+0x230>
   134c8:	ldr	r3, [r0, #176]	; 0xb0
   134cc:	cmp	r1, r3
   134d0:	cmpgt	r3, #0
   134d4:	movgt	r3, #1
   134d8:	movle	r3, #0
   134dc:	ble	134ec <flatcc_builder_default_alloc@@Base+0x1ac>
   134e0:	mvn	r0, #0
   134e4:	add	sp, sp, #8
   134e8:	pop	{r4, r5, r6, pc}
   134ec:	mov	r6, #36	; 0x24
   134f0:	mov	r1, #4
   134f4:	str	r3, [sp]
   134f8:	mov	r3, r6
   134fc:	mul	r2, r6, r2
   13500:	bl	13438 <flatcc_builder_default_alloc@@Base+0xf8>
   13504:	cmp	r0, #0
   13508:	str	r0, [r4, #32]
   1350c:	beq	134e0 <flatcc_builder_default_alloc@@Base+0x1a0>
   13510:	ldr	r3, [r4, #88]	; 0x58
   13514:	ldr	r2, [r4, #176]	; 0xb0
   13518:	udiv	r3, r3, r6
   1351c:	cmp	r2, #0
   13520:	cmpgt	r3, r2
   13524:	movgt	r3, r2
   13528:	str	r3, [r4, #160]	; 0xa0
   1352c:	ldrh	r1, [r4, #130]	; 0x82
   13530:	mvn	r0, #3
   13534:	ldr	r3, [r4, #20]
   13538:	ldr	r2, [r4, #32]
   1353c:	str	r3, [r2, #8]
   13540:	strh	r1, [r2, #12]
   13544:	ldr	r1, [r4, #28]
   13548:	strh	r5, [r4, #130]	; 0x82
   1354c:	add	r3, r3, r1
   13550:	str	r0, [r2, #4]
   13554:	mov	r0, #0
   13558:	add	r3, r3, #7
   1355c:	str	r1, [r2]
   13560:	bic	r3, r3, #7
   13564:	str	r0, [r4, #20]
   13568:	str	r3, [r4, #28]
   1356c:	b	134e4 <flatcc_builder_default_alloc@@Base+0x1a4>
   13570:	ldr	r3, [r0, #32]
   13574:	add	r3, r3, #36	; 0x24
   13578:	str	r3, [r0, #32]
   1357c:	b	1352c <flatcc_builder_default_alloc@@Base+0x1ec>
   13580:	ldr	r3, [r0, #32]
   13584:	push	{r0, r1, r2, r4, r5, lr}
   13588:	add	r1, r1, #2
   1358c:	mov	r4, r0
   13590:	lsl	r5, r1, #1
   13594:	ldrh	r1, [r3, #28]
   13598:	ldr	r2, [r3, #16]
   1359c:	mov	r3, #1
   135a0:	str	r3, [sp]
   135a4:	mov	r3, r5
   135a8:	add	r2, r2, r1, lsl #1
   135ac:	mov	r1, #0
   135b0:	bl	13438 <flatcc_builder_default_alloc@@Base+0xf8>
   135b4:	cmp	r0, #0
   135b8:	streq	r0, [r4, #4]
   135bc:	mvneq	r0, #0
   135c0:	beq	135fc <flatcc_builder_default_alloc@@Base+0x2bc>
   135c4:	ldr	r2, [r4, #32]
   135c8:	add	r0, r0, #4
   135cc:	mov	r3, #0
   135d0:	mov	r1, #3
   135d4:	str	r0, [r4, #4]
   135d8:	mov	r0, r4
   135dc:	str	r3, [sp]
   135e0:	sub	r3, r5, #3
   135e4:	ldr	r2, [r2, #20]
   135e8:	bl	13438 <flatcc_builder_default_alloc@@Base+0xf8>
   135ec:	str	r0, [r4]
   135f0:	clz	r0, r0
   135f4:	lsr	r0, r0, #5
   135f8:	rsb	r0, r0, #0
   135fc:	add	sp, sp, #12
   13600:	pop	{r4, r5, pc}
   13604:	push	{r0, r1, r2, r4, r5, lr}
   13608:	ldr	r3, [r1]
   1360c:	ldr	r4, [r0, #140]	; 0x8c
   13610:	add	r2, r3, r4
   13614:	cmp	r2, r4
   13618:	ldrlt	r3, [pc, #76]	; 1366c <flatcc_builder_default_alloc@@Base+0x32c>
   1361c:	str	r2, [r0, #140]	; 0x8c
   13620:	movwlt	r2, #673	; 0x2a1
   13624:	blt	13654 <flatcc_builder_default_alloc@@Base+0x314>
   13628:	add	r1, r1, #8
   1362c:	str	r3, [sp]
   13630:	mov	r3, r4
   13634:	ldr	r2, [r1, #-4]
   13638:	ldr	r5, [r0, #44]	; 0x2c
   1363c:	ldr	r0, [r0, #36]	; 0x24
   13640:	blx	r5
   13644:	cmp	r0, #0
   13648:	beq	13660 <flatcc_builder_default_alloc@@Base+0x320>
   1364c:	ldr	r3, [pc, #24]	; 1366c <flatcc_builder_default_alloc@@Base+0x32c>
   13650:	movw	r2, #677	; 0x2a5
   13654:	ldr	r1, [pc, #20]	; 13670 <flatcc_builder_default_alloc@@Base+0x330>
   13658:	ldr	r0, [pc, #20]	; 13674 <flatcc_builder_default_alloc@@Base+0x334>
   1365c:	bl	124b0 <__assert_fail@plt>
   13660:	add	r0, r4, #1
   13664:	add	sp, sp, #12
   13668:	pop	{r4, r5, pc}
   1366c:	andeq	r9, r1, r0, ror #15
   13670:	ldrdeq	r9, [r1], -r0
   13674:	andeq	r9, r1, sp, lsr pc
   13678:	cmp	r2, #0
   1367c:	bne	1368c <flatcc_builder_default_alloc@@Base+0x34c>
   13680:	ldrh	r2, [r0, #132]	; 0x84
   13684:	cmp	r2, #0
   13688:	moveq	r2, #1
   1368c:	ldrh	ip, [r1]
   13690:	cmp	ip, #3
   13694:	movls	ip, #4
   13698:	strhls	ip, [r1]
   1369c:	ldrh	ip, [r1]
   136a0:	cmp	ip, r2
   136a4:	strhcc	r2, [r1]
   136a8:	cmp	r3, #0
   136ac:	bne	1370c <flatcc_builder_default_alloc@@Base+0x3cc>
   136b0:	ldr	r3, [r0, #140]	; 0x8c
   136b4:	sub	r2, r2, #1
   136b8:	ands	r2, r2, r3
   136bc:	beq	1370c <flatcc_builder_default_alloc@@Base+0x3cc>
   136c0:	push	{r4, lr}
   136c4:	mov	r3, #1
   136c8:	sub	sp, sp, #72	; 0x48
   136cc:	mov	r1, sp
   136d0:	ldr	r4, [pc, #60]	; 13714 <flatcc_builder_default_alloc@@Base+0x3d4>
   136d4:	strd	r2, [sp]
   136d8:	str	r4, [sp, #8]
   136dc:	str	r2, [sp, #12]
   136e0:	bl	13604 <flatcc_builder_default_alloc@@Base+0x2c4>
   136e4:	cmp	r0, #0
   136e8:	bne	13700 <flatcc_builder_default_alloc@@Base+0x3c0>
   136ec:	add	r3, r4, #512	; 0x200
   136f0:	movw	r2, #702	; 0x2be
   136f4:	ldr	r1, [pc, #28]	; 13718 <flatcc_builder_default_alloc@@Base+0x3d8>
   136f8:	ldr	r0, [pc, #28]	; 1371c <flatcc_builder_default_alloc@@Base+0x3dc>
   136fc:	bl	124b0 <__assert_fail@plt>
   13700:	mov	r0, #0
   13704:	add	sp, sp, #72	; 0x48
   13708:	pop	{r4, pc}
   1370c:	mov	r0, #0
   13710:	bx	lr
   13714:	andeq	r9, r1, sl, ror #15
   13718:	ldrdeq	r9, [r1], -r0
   1371c:	andeq	r9, r1, sp, lsr pc
   13720:	ldr	r3, [r1]
   13724:	push	{r0, r1, r4, r5, r6, lr}
   13728:	ldr	r2, [r0, #136]	; 0x88
   1372c:	sub	r4, r2, r3
   13730:	cmp	r2, r4
   13734:	ldrle	r3, [pc, #80]	; 1378c <flatcc_builder_default_alloc@@Base+0x44c>
   13738:	movwle	r2, #647	; 0x287
   1373c:	ble	13770 <flatcc_builder_default_alloc@@Base+0x430>
   13740:	mov	r5, r0
   13744:	add	r1, r1, #8
   13748:	str	r3, [sp]
   1374c:	mov	r3, r4
   13750:	ldr	r2, [r1, #-4]
   13754:	ldr	r0, [r0, #36]	; 0x24
   13758:	ldr	r6, [r5, #44]	; 0x2c
   1375c:	blx	r6
   13760:	cmp	r0, #0
   13764:	beq	1377c <flatcc_builder_default_alloc@@Base+0x43c>
   13768:	ldr	r3, [pc, #28]	; 1378c <flatcc_builder_default_alloc@@Base+0x44c>
   1376c:	movw	r2, #651	; 0x28b
   13770:	ldr	r1, [pc, #24]	; 13790 <flatcc_builder_default_alloc@@Base+0x450>
   13774:	ldr	r0, [pc, #24]	; 13794 <flatcc_builder_default_alloc@@Base+0x454>
   13778:	bl	124b0 <__assert_fail@plt>
   1377c:	mov	r0, r4
   13780:	str	r4, [r5, #136]	; 0x88
   13784:	add	sp, sp, #8
   13788:	pop	{r4, r5, r6, pc}
   1378c:	strdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   13790:	ldrdeq	r9, [r1], -r0
   13794:	andeq	r9, r1, sp, lsr pc
   13798:	ldr	r3, [r0, #20]
   1379c:	adds	r1, r3, r1
   137a0:	movcs	r3, #1
   137a4:	movcc	r3, #0
   137a8:	cmp	r1, r2
   137ac:	movls	r2, r3
   137b0:	orrhi	r2, r3, #1
   137b4:	cmp	r2, #0
   137b8:	beq	137d4 <flatcc_builder_default_alloc@@Base+0x494>
   137bc:	push	{r4, lr}
   137c0:	mov	r2, #892	; 0x37c
   137c4:	ldr	r3, [pc, #20]	; 137e0 <flatcc_builder_default_alloc@@Base+0x4a0>
   137c8:	ldr	r1, [pc, #20]	; 137e4 <flatcc_builder_default_alloc@@Base+0x4a4>
   137cc:	ldr	r0, [pc, #20]	; 137e8 <flatcc_builder_default_alloc@@Base+0x4a8>
   137d0:	bl	124b0 <__assert_fail@plt>
   137d4:	str	r1, [r0, #20]
   137d8:	mov	r0, r2
   137dc:	bx	lr
   137e0:	andeq	r9, r1, r4, lsl #20
   137e4:	ldrdeq	r9, [r1], -r0
   137e8:	andeq	r9, r1, r6, lsl pc
   137ec:	ldrh	ip, [r0, #128]	; 0x80
   137f0:	push	{r4, r5, r6, lr}
   137f4:	sub	sp, sp, #80	; 0x50
   137f8:	ldr	r5, [r0, #136]	; 0x88
   137fc:	cmp	ip, #3
   13800:	movls	ip, #4
   13804:	strhls	ip, [r0, #128]	; 0x80
   13808:	mov	ip, #4
   1380c:	add	lr, sp, ip
   13810:	and	r4, r5, #3
   13814:	stmib	sp, {r2, ip}
   13818:	str	lr, [sp, #16]
   1381c:	str	ip, [sp, #20]
   13820:	mov	ip, #1
   13824:	str	ip, [sp, #12]
   13828:	lsls	ip, r2, #2
   1382c:	beq	13848 <flatcc_builder_default_alloc@@Base+0x508>
   13830:	add	lr, ip, #4
   13834:	str	ip, [sp, #28]
   13838:	mov	ip, #2
   1383c:	str	lr, [sp, #8]
   13840:	str	ip, [sp, #12]
   13844:	str	r1, [sp, #24]
   13848:	cmp	r4, #0
   1384c:	beq	1387c <flatcc_builder_default_alloc@@Base+0x53c>
   13850:	ldr	ip, [sp, #8]
   13854:	add	lr, sp, #80	; 0x50
   13858:	ldr	r6, [pc, #204]	; 1392c <flatcc_builder_default_alloc@@Base+0x5ec>
   1385c:	add	ip, ip, r4
   13860:	str	ip, [sp, #8]
   13864:	ldr	ip, [sp, #12]
   13868:	add	ip, ip, #1
   1386c:	add	lr, lr, ip, lsl #3
   13870:	str	ip, [sp, #12]
   13874:	str	r6, [lr, #-72]	; 0xffffffb8
   13878:	str	r4, [lr, #-68]	; 0xffffffbc
   1387c:	ldr	lr, [sp, #8]
   13880:	mov	ip, #0
   13884:	mvn	r6, #3
   13888:	sub	lr, lr, #4
   1388c:	sub	lr, lr, r5
   13890:	cmp	r2, ip
   13894:	bne	138a8 <flatcc_builder_default_alloc@@Base+0x568>
   13898:	add	r1, sp, #8
   1389c:	bl	13720 <flatcc_builder_default_alloc@@Base+0x3e0>
   138a0:	add	sp, sp, #80	; 0x50
   138a4:	pop	{r4, r5, r6, pc}
   138a8:	ldr	r5, [r1, ip, lsl #2]
   138ac:	cmp	r5, #0
   138b0:	beq	138e8 <flatcc_builder_default_alloc@@Base+0x5a8>
   138b4:	mla	r4, r6, ip, lr
   138b8:	cmp	r3, #0
   138bc:	add	r4, r4, r5
   138c0:	str	r4, [r1, ip, lsl #2]
   138c4:	beq	13924 <flatcc_builder_default_alloc@@Base+0x5e4>
   138c8:	ldrb	r4, [r3, ip]
   138cc:	cmp	r4, #0
   138d0:	bne	13924 <flatcc_builder_default_alloc@@Base+0x5e4>
   138d4:	ldr	r3, [pc, #84]	; 13930 <flatcc_builder_default_alloc@@Base+0x5f0>
   138d8:	movw	r2, #1457	; 0x5b1
   138dc:	ldr	r1, [pc, #80]	; 13934 <flatcc_builder_default_alloc@@Base+0x5f4>
   138e0:	ldr	r0, [pc, #80]	; 13938 <flatcc_builder_default_alloc@@Base+0x5f8>
   138e4:	bl	124b0 <__assert_fail@plt>
   138e8:	cmp	r3, #0
   138ec:	beq	13910 <flatcc_builder_default_alloc@@Base+0x5d0>
   138f0:	ldrb	r4, [r3, ip]
   138f4:	cmp	r4, #0
   138f8:	beq	13924 <flatcc_builder_default_alloc@@Base+0x5e4>
   138fc:	ldr	r3, [pc, #44]	; 13930 <flatcc_builder_default_alloc@@Base+0x5f0>
   13900:	movw	r2, #1461	; 0x5b5
   13904:	ldr	r1, [pc, #40]	; 13934 <flatcc_builder_default_alloc@@Base+0x5f4>
   13908:	ldr	r0, [pc, #44]	; 1393c <flatcc_builder_default_alloc@@Base+0x5fc>
   1390c:	b	138e4 <flatcc_builder_default_alloc@@Base+0x5a4>
   13910:	ldr	r3, [pc, #24]	; 13930 <flatcc_builder_default_alloc@@Base+0x5f0>
   13914:	movw	r2, #1463	; 0x5b7
   13918:	ldr	r1, [pc, #20]	; 13934 <flatcc_builder_default_alloc@@Base+0x5f4>
   1391c:	ldr	r0, [pc, #28]	; 13940 <flatcc_builder_default_alloc@@Base+0x600>
   13920:	b	138e4 <flatcc_builder_default_alloc@@Base+0x5a4>
   13924:	add	ip, ip, #1
   13928:	b	13890 <flatcc_builder_default_alloc@@Base+0x550>
   1392c:	andeq	r9, r1, sl, ror #15
   13930:	andeq	r9, r1, r5, lsl sl
   13934:	ldrdeq	r9, [r1], -r0
   13938:	andeq	r9, r1, r1, lsr pc
   1393c:	andeq	r9, r1, pc, lsr pc
   13940:	andeq	r9, r1, sp, lsr pc

00013944 <flatcc_builder_flush_vtable_cache@@Base>:
   13944:	ldr	r3, [r0, #116]	; 0x74
   13948:	cmp	r3, #0
   1394c:	bxeq	lr
   13950:	push	{r4, lr}
   13954:	mov	r4, r0
   13958:	mov	r1, #0
   1395c:	ldr	r0, [r0, #92]	; 0x5c
   13960:	ldr	r2, [r4, #96]	; 0x60
   13964:	bl	12474 <memset@plt>
   13968:	mov	r0, #0
   1396c:	mov	r1, #16
   13970:	strd	r0, [r4, #120]	; 0x78
   13974:	pop	{r4, pc}

00013978 <flatcc_builder_custom_init@@Base>:
   13978:	push	{r4, r5, r6, r7, r8, lr}
   1397c:	mov	r6, r1
   13980:	mov	r7, r2
   13984:	mov	r1, #0
   13988:	mov	r2, #232	; 0xe8
   1398c:	mov	r4, r0
   13990:	mov	r5, r3
   13994:	bl	12474 <memset@plt>
   13998:	cmp	r6, #0
   1399c:	mov	r0, #0
   139a0:	moveq	r3, #1
   139a4:	addeq	r7, r4, #188	; 0xbc
   139a8:	ldreq	r6, [pc, #36]	; 139d4 <flatcc_builder_custom_init@@Base+0x5c>
   139ac:	streq	r3, [r4, #184]	; 0xb8
   139b0:	cmp	r5, #0
   139b4:	ldr	r3, [pc, #28]	; 139d8 <flatcc_builder_custom_init@@Base+0x60>
   139b8:	str	r7, [r4, #36]	; 0x24
   139bc:	str	r6, [r4, #44]	; 0x2c
   139c0:	moveq	r5, r3
   139c4:	ldr	r3, [sp, #24]
   139c8:	str	r3, [r4, #40]	; 0x28
   139cc:	str	r5, [r4, #48]	; 0x30
   139d0:	pop	{r4, r5, r6, r7, r8, pc}
   139d4:	andeq	r6, r1, r8, lsl #1
   139d8:	andeq	r3, r1, r0, asr #6

000139dc <flatcc_builder_init@@Base>:
   139dc:	push	{r4, lr}
   139e0:	mov	r2, #232	; 0xe8
   139e4:	mov	r1, #0
   139e8:	bl	12474 <memset@plt>
   139ec:	mov	r3, r0
   139f0:	mov	r2, #1
   139f4:	mov	r0, #0
   139f8:	str	r2, [r3, #184]	; 0xb8
   139fc:	ldr	r2, [pc, #20]	; 13a18 <flatcc_builder_init@@Base+0x3c>
   13a00:	str	r2, [r3, #48]	; 0x30
   13a04:	add	r2, r3, #188	; 0xbc
   13a08:	str	r2, [r3, #36]	; 0x24
   13a0c:	ldr	r2, [pc, #8]	; 13a1c <flatcc_builder_init@@Base+0x40>
   13a10:	str	r2, [r3, #44]	; 0x2c
   13a14:	pop	{r4, pc}
   13a18:	andeq	r3, r1, r0, asr #6
   13a1c:	andeq	r6, r1, r8, lsl #1

00013a20 <flatcc_builder_custom_reset@@Base>:
   13a20:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13a24:	mov	r4, r0
   13a28:	mov	r7, r1
   13a2c:	mov	r8, r2
   13a30:	mov	r5, r0
   13a34:	mov	r6, #0
   13a38:	ldr	r3, [r5, #52]	; 0x34
   13a3c:	add	r1, r5, #52	; 0x34
   13a40:	cmp	r3, #0
   13a44:	beq	13b20 <flatcc_builder_custom_reset@@Base+0x100>
   13a48:	cmp	r6, #5
   13a4c:	cmpne	r8, #0
   13a50:	bne	13af8 <flatcc_builder_custom_reset@@Base+0xd8>
   13a54:	mov	r1, #0
   13a58:	ldr	r0, [r5, #52]	; 0x34
   13a5c:	ldr	r2, [r5, #56]	; 0x38
   13a60:	bl	12474 <memset@plt>
   13a64:	add	r6, r6, #1
   13a68:	add	r5, r5, #8
   13a6c:	cmp	r6, #8
   13a70:	bne	13a38 <flatcc_builder_custom_reset@@Base+0x18>
   13a74:	ldr	r2, [r4, #124]	; 0x7c
   13a78:	mov	r3, #0
   13a7c:	ldr	r0, [r4, #184]	; 0xb8
   13a80:	str	r3, [r4, #24]
   13a84:	str	r3, [r4, #32]
   13a88:	cmp	r2, r3
   13a8c:	str	r3, [r4, #120]	; 0x78
   13a90:	movne	r2, #16
   13a94:	strh	r3, [r4, #128]	; 0x80
   13a98:	str	r3, [r4, #136]	; 0x88
   13a9c:	strne	r2, [r4, #124]	; 0x7c
   13aa0:	cmp	r7, #0
   13aa4:	ldr	r2, [r4, #60]	; 0x3c
   13aa8:	strne	r3, [r4, #172]	; 0xac
   13aac:	strne	r3, [r4, #176]	; 0xb0
   13ab0:	strne	r3, [r4, #180]	; 0xb4
   13ab4:	cmp	r0, #0
   13ab8:	strd	r2, [r4, #16]
   13abc:	ldr	r2, [r4, #76]	; 0x4c
   13ac0:	str	r2, [r4]
   13ac4:	ldr	r2, [r4, #52]	; 0x34
   13ac8:	str	r3, [r4, #140]	; 0x8c
   13acc:	str	r3, [r4, #148]	; 0x94
   13ad0:	str	r3, [r4, #152]	; 0x98
   13ad4:	str	r3, [r4, #156]	; 0x9c
   13ad8:	str	r2, [r4, #4]
   13adc:	str	r3, [r4, #160]	; 0xa0
   13ae0:	beq	13af0 <flatcc_builder_custom_reset@@Base+0xd0>
   13ae4:	add	r0, r4, #188	; 0xbc
   13ae8:	bl	15f88 <flatcc_emitter_reset@@Base>
   13aec:	mov	r0, #0
   13af0:	add	sp, sp, #12
   13af4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13af8:	mov	r3, #1
   13afc:	ldr	r0, [r4, #40]	; 0x28
   13b00:	mov	r2, r3
   13b04:	ldr	r9, [r4, #48]	; 0x30
   13b08:	str	r6, [sp]
   13b0c:	blx	r9
   13b10:	cmp	r0, #0
   13b14:	beq	13a54 <flatcc_builder_custom_reset@@Base+0x34>
   13b18:	mvn	r0, #0
   13b1c:	b	13af0 <flatcc_builder_custom_reset@@Base+0xd0>
   13b20:	ldr	r3, [r5, #56]	; 0x38
   13b24:	cmp	r3, #0
   13b28:	beq	13a64 <flatcc_builder_custom_reset@@Base+0x44>
   13b2c:	ldr	r3, [pc, #12]	; 13b40 <flatcc_builder_custom_reset@@Base+0x120>
   13b30:	movw	r2, #434	; 0x1b2
   13b34:	ldr	r1, [pc, #8]	; 13b44 <flatcc_builder_custom_reset@@Base+0x124>
   13b38:	ldr	r0, [pc, #8]	; 13b48 <flatcc_builder_custom_reset@@Base+0x128>
   13b3c:	bl	124b0 <__assert_fail@plt>
   13b40:	andeq	r9, r1, r2, lsr sl
   13b44:	ldrdeq	r9, [r1], -r0
   13b48:	andeq	r9, r1, sp, asr #30

00013b4c <flatcc_builder_reset@@Base>:
   13b4c:	mov	r2, #0
   13b50:	mov	r1, r2
   13b54:	b	13a20 <flatcc_builder_custom_reset@@Base>

00013b58 <flatcc_builder_clear@@Base>:
   13b58:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13b5c:	mov	r4, r0
   13b60:	add	r6, r0, #52	; 0x34
   13b64:	mov	r5, #0
   13b68:	mov	r3, #0
   13b6c:	mov	r1, r6
   13b70:	mov	r2, r3
   13b74:	ldr	r0, [r4, #40]	; 0x28
   13b78:	add	r6, r6, #8
   13b7c:	ldr	r7, [r4, #48]	; 0x30
   13b80:	str	r5, [sp]
   13b84:	add	r5, r5, #1
   13b88:	blx	r7
   13b8c:	cmp	r5, #8
   13b90:	bne	13b68 <flatcc_builder_clear@@Base+0x10>
   13b94:	ldr	r3, [r4, #184]	; 0xb8
   13b98:	cmp	r3, #0
   13b9c:	beq	13ba8 <flatcc_builder_clear@@Base+0x50>
   13ba0:	add	r0, r4, #188	; 0xbc
   13ba4:	bl	16030 <flatcc_emitter_clear@@Base>
   13ba8:	mov	r2, #232	; 0xe8
   13bac:	mov	r1, #0
   13bb0:	mov	r0, r4
   13bb4:	add	sp, sp, #12
   13bb8:	pop	{r4, r5, r6, r7, lr}
   13bbc:	b	12474 <memset@plt>

00013bc0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13bc0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13bc4:	add	r5, r1, #3
   13bc8:	mov	r7, #0
   13bcc:	bic	r5, r5, #3
   13bd0:	mov	r1, #7
   13bd4:	add	r5, r5, #4
   13bd8:	mov	r6, r0
   13bdc:	mov	r3, r5
   13be0:	str	r7, [sp]
   13be4:	ldr	r2, [r0, #228]	; 0xe4
   13be8:	bl	13438 <flatcc_builder_default_alloc@@Base+0xf8>
   13bec:	subs	r4, r0, #0
   13bf0:	beq	13c1c <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   13bf4:	mov	r2, r5
   13bf8:	mov	r1, r7
   13bfc:	bl	12474 <memset@plt>
   13c00:	ldr	r3, [r6, #224]	; 0xe0
   13c04:	str	r3, [r4], #4
   13c08:	ldr	r1, [r6, #228]	; 0xe4
   13c0c:	add	r3, r1, #4
   13c10:	add	r5, r1, r5
   13c14:	str	r3, [r6, #224]	; 0xe0
   13c18:	str	r5, [r6, #228]	; 0xe4
   13c1c:	mov	r0, r4
   13c20:	add	sp, sp, #12
   13c24:	pop	{r4, r5, r6, r7, pc}

00013c28 <flatcc_builder_enter_user_frame@@Base>:
   13c28:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13c2c:	add	r4, r1, #3
   13c30:	mov	r7, #0
   13c34:	bic	r4, r4, #3
   13c38:	mov	r1, #7
   13c3c:	add	r4, r4, #4
   13c40:	mov	r6, r0
   13c44:	mov	r3, r4
   13c48:	str	r7, [sp]
   13c4c:	ldr	r2, [r0, #228]	; 0xe4
   13c50:	bl	13438 <flatcc_builder_default_alloc@@Base+0xf8>
   13c54:	subs	r5, r0, #0
   13c58:	moveq	r0, r5
   13c5c:	beq	13c88 <flatcc_builder_enter_user_frame@@Base+0x60>
   13c60:	mov	r2, r4
   13c64:	mov	r1, r7
   13c68:	bl	12474 <memset@plt>
   13c6c:	ldr	r3, [r6, #224]	; 0xe0
   13c70:	str	r3, [r5]
   13c74:	ldr	r1, [r6, #228]	; 0xe4
   13c78:	add	r0, r1, #4
   13c7c:	add	r4, r1, r4
   13c80:	str	r0, [r6, #224]	; 0xe0
   13c84:	str	r4, [r6, #228]	; 0xe4
   13c88:	add	sp, sp, #12
   13c8c:	pop	{r4, r5, r6, r7, pc}

00013c90 <flatcc_builder_exit_user_frame@@Base>:
   13c90:	ldr	r3, [r0, #224]	; 0xe0
   13c94:	cmp	r3, #0
   13c98:	bne	13cb4 <flatcc_builder_exit_user_frame@@Base+0x24>
   13c9c:	push	{r4, lr}
   13ca0:	movw	r2, #542	; 0x21e
   13ca4:	ldr	r3, [pc, #40]	; 13cd4 <flatcc_builder_exit_user_frame@@Base+0x44>
   13ca8:	ldr	r1, [pc, #40]	; 13cd8 <flatcc_builder_exit_user_frame@@Base+0x48>
   13cac:	ldr	r0, [pc, #40]	; 13cdc <flatcc_builder_exit_user_frame@@Base+0x4c>
   13cb0:	bl	124b0 <__assert_fail@plt>
   13cb4:	ldr	r1, [r0, #108]	; 0x6c
   13cb8:	mov	r2, r0
   13cbc:	add	r1, r1, r3
   13cc0:	sub	r3, r3, #4
   13cc4:	str	r3, [r0, #228]	; 0xe4
   13cc8:	ldr	r0, [r1, #-4]
   13ccc:	str	r0, [r2, #224]	; 0xe0
   13cd0:	bx	lr
   13cd4:	andeq	r9, r1, lr, asr #20
   13cd8:	ldrdeq	r9, [r1], -r0
   13cdc:	andeq	r9, r1, pc, asr pc

00013ce0 <flatcc_builder_exit_user_frame_at@@Base>:
   13ce0:	ldr	r2, [r0, #224]	; 0xe0
   13ce4:	cmp	r2, r1
   13ce8:	bcs	13d04 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   13cec:	push	{r4, lr}
   13cf0:	movw	r2, #551	; 0x227
   13cf4:	ldr	r3, [pc, #16]	; 13d0c <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   13cf8:	ldr	r1, [pc, #16]	; 13d10 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13cfc:	ldr	r0, [pc, #16]	; 13d14 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13d00:	bl	124b0 <__assert_fail@plt>
   13d04:	str	r1, [r0, #224]	; 0xe0
   13d08:	b	13c90 <flatcc_builder_exit_user_frame@@Base>
   13d0c:	andeq	r9, r1, sp, ror #20
   13d10:	ldrdeq	r9, [r1], -r0
   13d14:	andeq	r9, r1, r8, ror pc

00013d18 <flatcc_builder_get_current_user_frame@@Base>:
   13d18:	ldr	r0, [r0, #224]	; 0xe0
   13d1c:	bx	lr

00013d20 <flatcc_builder_get_user_frame_ptr@@Base>:
   13d20:	ldr	r0, [r0, #108]	; 0x6c
   13d24:	add	r0, r0, r1
   13d28:	bx	lr

00013d2c <flatcc_builder_embed_buffer@@Base>:
   13d2c:	push	{r4, r5, r6, lr}
   13d30:	mov	r4, r3
   13d34:	sub	sp, sp, #80	; 0x50
   13d38:	mov	r6, r2
   13d3c:	mov	r2, r1
   13d40:	add	r1, sp, #96	; 0x60
   13d44:	mov	r5, r0
   13d48:	ldr	r3, [r0, #152]	; 0x98
   13d4c:	adds	r3, r3, #0
   13d50:	movne	r3, #1
   13d54:	bl	13678 <flatcc_builder_default_alloc@@Base+0x338>
   13d58:	cmp	r0, #0
   13d5c:	movne	r0, #0
   13d60:	bne	13e34 <flatcc_builder_embed_buffer@@Base+0x108>
   13d64:	ldr	r3, [sp, #100]	; 0x64
   13d68:	str	r0, [sp, #8]
   13d6c:	str	r0, [sp, #12]
   13d70:	tst	r3, #2
   13d74:	ldr	r3, [r5, #136]	; 0x88
   13d78:	movne	r2, #4
   13d7c:	moveq	r2, #0
   13d80:	sub	r3, r3, r4
   13d84:	sub	r3, r3, r2
   13d88:	ldrh	r2, [sp, #96]	; 0x60
   13d8c:	sub	r2, r2, #1
   13d90:	and	r3, r3, r2
   13d94:	add	r2, r4, r3
   13d98:	str	r2, [sp, #4]
   13d9c:	ldr	r2, [r5, #152]	; 0x98
   13da0:	cmp	r2, #0
   13da4:	beq	13dc4 <flatcc_builder_embed_buffer@@Base+0x98>
   13da8:	mov	r2, #4
   13dac:	add	r1, sp, r2
   13db0:	str	r2, [sp, #8]
   13db4:	str	r1, [sp, #16]
   13db8:	str	r2, [sp, #20]
   13dbc:	mov	r2, #1
   13dc0:	str	r2, [sp, #12]
   13dc4:	cmp	r4, #0
   13dc8:	beq	13df4 <flatcc_builder_embed_buffer@@Base+0xc8>
   13dcc:	ldr	r2, [sp, #8]
   13dd0:	add	r1, sp, #80	; 0x50
   13dd4:	add	r2, r2, r4
   13dd8:	str	r2, [sp, #8]
   13ddc:	ldr	r2, [sp, #12]
   13de0:	add	r2, r2, #1
   13de4:	add	r1, r1, r2, lsl #3
   13de8:	str	r2, [sp, #12]
   13dec:	str	r6, [r1, #-72]	; 0xffffffb8
   13df0:	str	r4, [r1, #-68]	; 0xffffffbc
   13df4:	cmp	r3, #0
   13df8:	beq	13e28 <flatcc_builder_embed_buffer@@Base+0xfc>
   13dfc:	ldr	r2, [sp, #8]
   13e00:	add	r1, sp, #80	; 0x50
   13e04:	ldr	r0, [pc, #48]	; 13e3c <flatcc_builder_embed_buffer@@Base+0x110>
   13e08:	add	r2, r2, r3
   13e0c:	str	r2, [sp, #8]
   13e10:	ldr	r2, [sp, #12]
   13e14:	add	r2, r2, #1
   13e18:	add	r1, r1, r2, lsl #3
   13e1c:	str	r2, [sp, #12]
   13e20:	str	r0, [r1, #-72]	; 0xffffffb8
   13e24:	str	r3, [r1, #-68]	; 0xffffffbc
   13e28:	add	r1, sp, #8
   13e2c:	mov	r0, r5
   13e30:	bl	13720 <flatcc_builder_default_alloc@@Base+0x3e0>
   13e34:	add	sp, sp, #80	; 0x50
   13e38:	pop	{r4, r5, r6, pc}
   13e3c:	andeq	r9, r1, sl, ror #15

00013e40 <flatcc_builder_create_buffer@@Base>:
   13e40:	push	{r4, r5, r6, r7, r8, r9, lr}
   13e44:	sub	sp, sp, #92	; 0x5c
   13e48:	mov	r8, #0
   13e4c:	mov	r9, r1
   13e50:	mov	r5, r3
   13e54:	add	r1, sp, #120	; 0x78
   13e58:	mov	r4, r0
   13e5c:	ldr	r7, [sp, #124]	; 0x7c
   13e60:	str	r8, [sp, #12]
   13e64:	and	r6, r7, #1
   13e68:	mov	r3, r6
   13e6c:	bl	13678 <flatcc_builder_default_alloc@@Base+0x338>
   13e70:	cmp	r0, r8
   13e74:	bne	13fe4 <flatcc_builder_create_buffer@@Base+0x1a4>
   13e78:	ldrh	r3, [r4, #128]	; 0x80
   13e7c:	ldrh	r1, [sp, #120]	; 0x78
   13e80:	ldr	r2, [r4, #136]	; 0x88
   13e84:	cmp	r3, r1
   13e88:	strhcc	r1, [r4, #128]	; 0x80
   13e8c:	cmp	r9, #0
   13e90:	sub	r1, r1, #1
   13e94:	ldrne	r3, [r9]
   13e98:	strne	r3, [sp, #12]
   13e9c:	sub	r3, r2, #4
   13ea0:	ldr	r0, [sp, #12]
   13ea4:	cmp	r0, #0
   13ea8:	movne	r0, #4
   13eac:	tst	r7, #2
   13eb0:	movne	ip, #4
   13eb4:	moveq	ip, #0
   13eb8:	sub	r3, r3, r0
   13ebc:	ands	r7, r7, #3
   13ec0:	sub	r3, r3, ip
   13ec4:	and	r3, r3, r1
   13ec8:	mov	r1, #0
   13ecc:	str	r1, [sp, #16]
   13ed0:	str	r1, [sp, #20]
   13ed4:	beq	13ef4 <flatcc_builder_create_buffer@@Base+0xb4>
   13ed8:	mov	r1, #4
   13edc:	add	ip, sp, #8
   13ee0:	str	r1, [sp, #16]
   13ee4:	str	ip, [sp, #24]
   13ee8:	str	r1, [sp, #28]
   13eec:	mov	r1, #1
   13ef0:	str	r1, [sp, #20]
   13ef4:	ldr	ip, [sp, #16]
   13ef8:	add	r8, sp, #88	; 0x58
   13efc:	add	r9, sp, #4
   13f00:	cmp	r0, #0
   13f04:	ldr	lr, [sp, #20]
   13f08:	add	ip, ip, #4
   13f0c:	add	r1, lr, #1
   13f10:	str	ip, [sp, #16]
   13f14:	add	r8, r8, r1, lsl #3
   13f18:	str	r1, [sp, #20]
   13f1c:	str	r9, [r8, #-72]	; 0xffffffb8
   13f20:	mov	r9, #4
   13f24:	str	r9, [r8, #-68]	; 0xffffffbc
   13f28:	beq	13f54 <flatcc_builder_create_buffer@@Base+0x114>
   13f2c:	add	ip, ip, r0
   13f30:	add	r1, lr, #2
   13f34:	add	lr, lr, #2
   13f38:	str	ip, [sp, #16]
   13f3c:	add	ip, sp, #88	; 0x58
   13f40:	add	r1, ip, r1, lsl #3
   13f44:	add	ip, sp, #12
   13f48:	str	lr, [sp, #20]
   13f4c:	str	ip, [r1, #-72]	; 0xffffffb8
   13f50:	str	r0, [r1, #-68]	; 0xffffffbc
   13f54:	cmp	r3, #0
   13f58:	beq	13f88 <flatcc_builder_create_buffer@@Base+0x148>
   13f5c:	ldr	r1, [sp, #16]
   13f60:	add	r0, sp, #88	; 0x58
   13f64:	ldr	ip, [pc, #132]	; 13ff0 <flatcc_builder_create_buffer@@Base+0x1b0>
   13f68:	add	r1, r1, r3
   13f6c:	str	r1, [sp, #16]
   13f70:	ldr	r1, [sp, #20]
   13f74:	add	r1, r1, #1
   13f78:	add	r0, r0, r1, lsl #3
   13f7c:	str	r1, [sp, #20]
   13f80:	str	ip, [r0, #-72]	; 0xffffffb8
   13f84:	str	r3, [r0, #-68]	; 0xffffffbc
   13f88:	ldr	r3, [sp, #16]
   13f8c:	cmp	r7, #0
   13f90:	add	r1, sp, #16
   13f94:	mov	r0, r4
   13f98:	sub	r3, r2, r3
   13f9c:	movne	r2, #4
   13fa0:	moveq	r2, #0
   13fa4:	cmp	r6, #0
   13fa8:	add	r3, r3, r2
   13fac:	ldrne	r2, [r4, #144]	; 0x90
   13fb0:	ldreq	r2, [r4, #140]	; 0x8c
   13fb4:	sub	r2, r2, r3
   13fb8:	sub	r3, r5, r3
   13fbc:	str	r3, [sp, #4]
   13fc0:	str	r2, [sp, #8]
   13fc4:	bl	13720 <flatcc_builder_default_alloc@@Base+0x3e0>
   13fc8:	cmp	r0, #0
   13fcc:	bne	13fe8 <flatcc_builder_create_buffer@@Base+0x1a8>
   13fd0:	ldr	r3, [pc, #28]	; 13ff4 <flatcc_builder_create_buffer@@Base+0x1b4>
   13fd4:	mov	r2, #772	; 0x304
   13fd8:	ldr	r1, [pc, #24]	; 13ff8 <flatcc_builder_create_buffer@@Base+0x1b8>
   13fdc:	ldr	r0, [pc, #24]	; 13ffc <flatcc_builder_create_buffer@@Base+0x1bc>
   13fe0:	bl	124b0 <__assert_fail@plt>
   13fe4:	mov	r0, r8
   13fe8:	add	sp, sp, #92	; 0x5c
   13fec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13ff0:	andeq	r9, r1, sl, ror #15
   13ff4:	andeq	r9, r1, pc, lsl #21
   13ff8:	ldrdeq	r9, [r1], -r0
   13ffc:	andeq	r9, r1, sp, lsr pc

00014000 <flatcc_builder_create_struct@@Base>:
   14000:	cmp	r3, #0
   14004:	push	{lr}		; (str lr, [sp, #-4]!)
   14008:	sub	sp, sp, #76	; 0x4c
   1400c:	bne	14024 <flatcc_builder_create_struct@@Base+0x24>
   14010:	ldr	r3, [pc, #148]	; 140ac <flatcc_builder_create_struct@@Base+0xac>
   14014:	movw	r2, #783	; 0x30f
   14018:	ldr	r1, [pc, #144]	; 140b0 <flatcc_builder_create_struct@@Base+0xb0>
   1401c:	ldr	r0, [pc, #144]	; 140b4 <flatcc_builder_create_struct@@Base+0xb4>
   14020:	bl	124b0 <__assert_fail@plt>
   14024:	ldrh	ip, [r0, #128]	; 0x80
   14028:	cmp	ip, r3
   1402c:	ldr	ip, [r0, #136]	; 0x88
   14030:	strhcc	r3, [r0, #128]	; 0x80
   14034:	sub	r3, r3, #1
   14038:	sub	ip, ip, r2
   1403c:	and	r3, r3, ip
   14040:	mov	ip, #0
   14044:	cmp	r2, ip
   14048:	str	ip, [sp]
   1404c:	str	ip, [sp, #4]
   14050:	beq	14068 <flatcc_builder_create_struct@@Base+0x68>
   14054:	str	r2, [sp]
   14058:	str	r1, [sp, #8]
   1405c:	str	r2, [sp, #12]
   14060:	mov	r2, #1
   14064:	str	r2, [sp, #4]
   14068:	cmp	r3, #0
   1406c:	beq	1409c <flatcc_builder_create_struct@@Base+0x9c>
   14070:	ldr	r2, [sp]
   14074:	add	r1, sp, #72	; 0x48
   14078:	ldr	ip, [pc, #56]	; 140b8 <flatcc_builder_create_struct@@Base+0xb8>
   1407c:	add	r2, r2, r3
   14080:	str	r2, [sp]
   14084:	ldr	r2, [sp, #4]
   14088:	add	r2, r2, #1
   1408c:	add	r1, r1, r2, lsl #3
   14090:	str	r2, [sp, #4]
   14094:	str	ip, [r1, #-72]	; 0xffffffb8
   14098:	str	r3, [r1, #-68]	; 0xffffffbc
   1409c:	mov	r1, sp
   140a0:	bl	13720 <flatcc_builder_default_alloc@@Base+0x3e0>
   140a4:	add	sp, sp, #76	; 0x4c
   140a8:	pop	{pc}		; (ldr pc, [sp], #4)
   140ac:	andeq	r9, r1, ip, lsr #21
   140b0:	ldrdeq	r9, [r1], -r0
   140b4:	muleq	r1, r7, pc	; <UNPREDICTABLE>
   140b8:	andeq	r9, r1, sl, ror #15

000140bc <flatcc_builder_start_buffer@@Base>:
   140bc:	push	{r4, r5, r6, r7, r8, lr}
   140c0:	mov	r5, r1
   140c4:	mov	r4, r0
   140c8:	mov	r7, r2
   140cc:	mov	r6, r3
   140d0:	ldrh	r1, [r0, #128]	; 0x80
   140d4:	bl	134a8 <flatcc_builder_default_alloc@@Base+0x168>
   140d8:	cmp	r0, #0
   140dc:	bne	1414c <flatcc_builder_start_buffer@@Base+0x90>
   140e0:	ldrh	r3, [r4, #132]	; 0x84
   140e4:	mov	ip, #1
   140e8:	cmp	r5, #0
   140ec:	ldr	r1, [r4, #32]
   140f0:	strh	ip, [r4, #128]	; 0x80
   140f4:	strh	r3, [r1, #34]	; 0x22
   140f8:	ldrh	r3, [r4, #164]	; 0xa4
   140fc:	strh	r7, [r4, #132]	; 0x84
   14100:	strh	r3, [r1, #32]
   14104:	ldr	r3, [r4, #144]	; 0x90
   14108:	strh	r6, [r4, #164]	; 0xa4
   1410c:	str	r3, [r1, #20]
   14110:	ldr	r3, [r4, #152]	; 0x98
   14114:	str	r3, [r1, #28]
   14118:	ldr	r3, [r4, #136]	; 0x88
   1411c:	str	r3, [r4, #144]	; 0x90
   14120:	ldr	r3, [r4, #148]	; 0x94
   14124:	add	r2, r3, ip
   14128:	strd	r2, [r4, #148]	; 0x94
   1412c:	ldr	r3, [r4, #168]	; 0xa8
   14130:	str	r3, [r1, #16]
   14134:	ldr	r3, [pc, #24]	; 14154 <flatcc_builder_start_buffer@@Base+0x98>
   14138:	moveq	r5, r3
   1413c:	ldr	r3, [r5]
   14140:	str	r3, [r4, #168]	; 0xa8
   14144:	strh	ip, [r1, #14]
   14148:	pop	{r4, r5, r6, r7, r8, pc}
   1414c:	mvn	r0, #0
   14150:	pop	{r4, r5, r6, r7, r8, pc}
   14154:	andeq	r9, r1, sl, ror #15

00014158 <flatcc_builder_end_buffer@@Base>:
   14158:	push	{r0, r1, r2, r4, r5, lr}
   1415c:	mov	r4, r0
   14160:	ldrh	r0, [r0, #164]	; 0xa4
   14164:	ldr	r2, [r4, #152]	; 0x98
   14168:	and	r0, r0, #2
   1416c:	cmp	r2, #0
   14170:	orrne	r0, r0, #1
   14174:	ldr	r2, [r4, #32]
   14178:	ldrh	r2, [r2, #14]
   1417c:	cmp	r2, #1
   14180:	beq	14198 <flatcc_builder_end_buffer@@Base+0x40>
   14184:	ldr	r3, [pc, #120]	; 14204 <flatcc_builder_end_buffer@@Base+0xac>
   14188:	movw	r2, #838	; 0x346
   1418c:	ldr	r1, [pc, #116]	; 14208 <flatcc_builder_end_buffer@@Base+0xb0>
   14190:	ldr	r0, [pc, #116]	; 1420c <flatcc_builder_end_buffer@@Base+0xb4>
   14194:	bl	124b0 <__assert_fail@plt>
   14198:	ldrh	r2, [r4, #132]	; 0x84
   1419c:	mov	r3, r1
   141a0:	ldrh	r1, [r4, #128]	; 0x80
   141a4:	cmp	r1, r2
   141a8:	strhcc	r2, [r4, #128]	; 0x80
   141ac:	ldrh	r1, [r4, #128]	; 0x80
   141b0:	str	r1, [sp]
   141b4:	add	r1, r4, #168	; 0xa8
   141b8:	str	r0, [sp, #4]
   141bc:	mov	r0, r4
   141c0:	bl	13e40 <flatcc_builder_create_buffer@@Base>
   141c4:	subs	r5, r0, #0
   141c8:	beq	141f8 <flatcc_builder_end_buffer@@Base+0xa0>
   141cc:	ldr	r3, [r4, #32]
   141d0:	mov	r0, r4
   141d4:	ldr	r2, [r3, #20]
   141d8:	str	r2, [r4, #144]	; 0x90
   141dc:	ldr	r2, [r3, #28]
   141e0:	str	r2, [r4, #152]	; 0x98
   141e4:	ldr	r2, [r3, #16]
   141e8:	ldrh	r3, [r3, #32]
   141ec:	strh	r3, [r4, #164]	; 0xa4
   141f0:	str	r2, [r4, #168]	; 0xa8
   141f4:	bl	1323c <test@@Base+0xa58>
   141f8:	mov	r0, r5
   141fc:	add	sp, sp, #12
   14200:	pop	{r4, r5, pc}
   14204:	andeq	r9, r1, r9, asr #21
   14208:	ldrdeq	r9, [r1], -r0
   1420c:	andeq	r9, r1, r2, lsr #31

00014210 <flatcc_builder_start_struct@@Base>:
   14210:	push	{r4, r5, r6, lr}
   14214:	mov	r5, r1
   14218:	mov	r1, r2
   1421c:	mov	r4, r0
   14220:	bl	134a8 <flatcc_builder_default_alloc@@Base+0x168>
   14224:	cmp	r0, #0
   14228:	bne	14250 <flatcc_builder_start_struct@@Base+0x40>
   1422c:	ldr	r3, [r4, #32]
   14230:	mov	r2, #2
   14234:	mvn	r1, #3
   14238:	mov	r0, r4
   1423c:	strh	r2, [r3, #14]
   14240:	bl	13178 <test@@Base+0x994>
   14244:	mov	r1, r5
   14248:	pop	{r4, r5, r6, lr}
   1424c:	b	131f4 <test@@Base+0xa10>
   14250:	mov	r0, #0
   14254:	pop	{r4, r5, r6, pc}

00014258 <flatcc_builder_struct_edit@@Base>:
   14258:	ldr	r0, [r0, #16]
   1425c:	bx	lr

00014260 <flatcc_builder_end_struct@@Base>:
   14260:	ldr	r3, [r0, #32]
   14264:	push	{r4, r5, r6, lr}
   14268:	ldrh	r3, [r3, #14]
   1426c:	cmp	r3, #2
   14270:	beq	14288 <flatcc_builder_end_struct@@Base+0x28>
   14274:	ldr	r3, [pc, #56]	; 142b4 <flatcc_builder_end_struct@@Base+0x54>
   14278:	mov	r2, #872	; 0x368
   1427c:	ldr	r1, [pc, #52]	; 142b8 <flatcc_builder_end_struct@@Base+0x58>
   14280:	ldr	r0, [pc, #52]	; 142bc <flatcc_builder_end_struct@@Base+0x5c>
   14284:	bl	124b0 <__assert_fail@plt>
   14288:	ldrh	r3, [r0, #130]	; 0x82
   1428c:	mov	r4, r0
   14290:	ldr	r1, [r0, #16]
   14294:	ldr	r2, [r0, #20]
   14298:	bl	14000 <flatcc_builder_create_struct@@Base>
   1429c:	subs	r5, r0, #0
   142a0:	beq	142ac <flatcc_builder_end_struct@@Base+0x4c>
   142a4:	mov	r0, r4
   142a8:	bl	1323c <test@@Base+0xa58>
   142ac:	mov	r0, r5
   142b0:	pop	{r4, r5, r6, pc}
   142b4:	andeq	r9, r1, r3, ror #21
   142b8:	ldrdeq	r9, [r1], -r0
   142bc:	andeq	r9, r1, lr, asr #31

000142c0 <flatcc_builder_extend_vector@@Base>:
   142c0:	push	{r4, r5, r6, lr}
   142c4:	mov	r4, r0
   142c8:	mov	r5, r1
   142cc:	ldr	r0, [r0, #32]
   142d0:	ldr	r2, [r0, #24]
   142d4:	bl	13798 <flatcc_builder_default_alloc@@Base+0x458>
   142d8:	cmp	r0, #0
   142dc:	bne	142f8 <flatcc_builder_extend_vector@@Base+0x38>
   142e0:	ldr	r3, [r4, #32]
   142e4:	mov	r0, r4
   142e8:	ldr	r1, [r3, #16]
   142ec:	mul	r1, r1, r5
   142f0:	pop	{r4, r5, r6, lr}
   142f4:	b	131f4 <test@@Base+0xa10>
   142f8:	mov	r0, #0
   142fc:	pop	{r4, r5, r6, pc}

00014300 <flatcc_builder_vector_push@@Base>:
   14300:	ldr	r3, [r0, #32]
   14304:	push	{r4, lr}
   14308:	ldrh	r2, [r3, #14]
   1430c:	cmp	r2, #4
   14310:	beq	14328 <flatcc_builder_vector_push@@Base+0x28>
   14314:	ldr	r3, [pc, #68]	; 14360 <flatcc_builder_vector_push@@Base+0x60>
   14318:	movw	r2, #907	; 0x38b
   1431c:	ldr	r1, [pc, #64]	; 14364 <flatcc_builder_vector_push@@Base+0x64>
   14320:	ldr	r0, [pc, #64]	; 14368 <flatcc_builder_vector_push@@Base+0x68>
   14324:	bl	124b0 <__assert_fail@plt>
   14328:	ldr	r2, [r3, #20]
   1432c:	ldr	ip, [r3, #24]
   14330:	cmp	r2, ip
   14334:	bls	1434c <flatcc_builder_vector_push@@Base+0x4c>
   14338:	ldr	r3, [pc, #32]	; 14360 <flatcc_builder_vector_push@@Base+0x60>
   1433c:	mov	r2, #908	; 0x38c
   14340:	ldr	r1, [pc, #28]	; 14364 <flatcc_builder_vector_push@@Base+0x64>
   14344:	ldr	r0, [pc, #32]	; 1436c <flatcc_builder_vector_push@@Base+0x6c>
   14348:	b	14324 <flatcc_builder_vector_push@@Base+0x24>
   1434c:	add	r2, r2, #1
   14350:	pop	{r4, lr}
   14354:	str	r2, [r3, #20]
   14358:	ldr	r2, [r3, #16]
   1435c:	b	132c4 <test@@Base+0xae0>
   14360:	strdeq	r9, [r1], -sp
   14364:	ldrdeq	r9, [r1], -r0
   14368:	strdeq	r9, [r1], -sl
   1436c:	andeq	sl, r1, r6, lsr #32

00014370 <flatcc_builder_append_vector@@Base>:
   14370:	push	{r4, r5, r6, lr}
   14374:	mov	r4, r0
   14378:	ldr	r0, [r0, #32]
   1437c:	ldrh	r3, [r0, #14]
   14380:	cmp	r3, #4
   14384:	beq	1439c <flatcc_builder_append_vector@@Base+0x2c>
   14388:	ldr	r3, [pc, #76]	; 143dc <flatcc_builder_append_vector@@Base+0x6c>
   1438c:	movw	r2, #915	; 0x393
   14390:	ldr	r1, [pc, #72]	; 143e0 <flatcc_builder_append_vector@@Base+0x70>
   14394:	ldr	r0, [pc, #72]	; 143e4 <flatcc_builder_append_vector@@Base+0x74>
   14398:	bl	124b0 <__assert_fail@plt>
   1439c:	mov	r6, r1
   143a0:	mov	r5, r2
   143a4:	mov	r1, r2
   143a8:	ldr	r2, [r0, #24]
   143ac:	bl	13798 <flatcc_builder_default_alloc@@Base+0x458>
   143b0:	cmp	r0, #0
   143b4:	bne	143d4 <flatcc_builder_append_vector@@Base+0x64>
   143b8:	ldr	r3, [r4, #32]
   143bc:	mov	r1, r6
   143c0:	mov	r0, r4
   143c4:	ldr	r2, [r3, #16]
   143c8:	mul	r2, r2, r5
   143cc:	pop	{r4, r5, r6, lr}
   143d0:	b	132c4 <test@@Base+0xae0>
   143d4:	mov	r0, #0
   143d8:	pop	{r4, r5, r6, pc}
   143dc:	andeq	r9, r1, r8, lsl fp
   143e0:	ldrdeq	r9, [r1], -r0
   143e4:	strdeq	r9, [r1], -sl

000143e8 <flatcc_builder_extend_offset_vector@@Base>:
   143e8:	push	{r4, r5, r6, lr}
   143ec:	mvn	r2, #-1073741824	; 0xc0000000
   143f0:	mov	r4, r0
   143f4:	mov	r5, r1
   143f8:	ldr	r0, [r0, #32]
   143fc:	bl	13798 <flatcc_builder_default_alloc@@Base+0x458>
   14400:	cmp	r0, #0
   14404:	bne	14418 <flatcc_builder_extend_offset_vector@@Base+0x30>
   14408:	lsl	r1, r5, #2
   1440c:	mov	r0, r4
   14410:	pop	{r4, r5, r6, lr}
   14414:	b	131f4 <test@@Base+0xa10>
   14418:	mov	r0, #0
   1441c:	pop	{r4, r5, r6, pc}

00014420 <flatcc_builder_offset_vector_push@@Base>:
   14420:	ldr	r2, [r0, #32]
   14424:	push	{r4, lr}
   14428:	ldrh	r3, [r2, #14]
   1442c:	cmp	r3, #5
   14430:	beq	14448 <flatcc_builder_offset_vector_push@@Base+0x28>
   14434:	ldr	r3, [pc, #64]	; 1447c <flatcc_builder_offset_vector_push@@Base+0x5c>
   14438:	movw	r2, #934	; 0x3a6
   1443c:	ldr	r1, [pc, #60]	; 14480 <flatcc_builder_offset_vector_push@@Base+0x60>
   14440:	ldr	r0, [pc, #60]	; 14484 <flatcc_builder_offset_vector_push@@Base+0x64>
   14444:	bl	124b0 <__assert_fail@plt>
   14448:	ldr	r3, [r2, #20]
   1444c:	cmn	r3, #-1073741823	; 0xc0000001
   14450:	beq	14474 <flatcc_builder_offset_vector_push@@Base+0x54>
   14454:	add	r3, r3, #1
   14458:	mov	r4, r1
   1445c:	mov	r1, #4
   14460:	str	r3, [r2, #20]
   14464:	bl	131f4 <test@@Base+0xa10>
   14468:	cmp	r0, #0
   1446c:	strne	r4, [r0]
   14470:	pop	{r4, pc}
   14474:	mov	r0, #0
   14478:	pop	{r4, pc}
   1447c:	andeq	r9, r1, r5, lsr fp
   14480:	ldrdeq	r9, [r1], -r0
   14484:	andeq	sl, r1, r3, rrx

00014488 <flatcc_builder_append_offset_vector@@Base>:
   14488:	push	{r4, r5, r6, lr}
   1448c:	mov	r4, r0
   14490:	ldr	r0, [r0, #32]
   14494:	ldrh	r3, [r0, #14]
   14498:	cmp	r3, #5
   1449c:	beq	144b4 <flatcc_builder_append_offset_vector@@Base+0x2c>
   144a0:	ldr	r3, [pc, #68]	; 144ec <flatcc_builder_append_offset_vector@@Base+0x64>
   144a4:	mov	r2, #948	; 0x3b4
   144a8:	ldr	r1, [pc, #64]	; 144f0 <flatcc_builder_append_offset_vector@@Base+0x68>
   144ac:	ldr	r0, [pc, #64]	; 144f4 <flatcc_builder_append_offset_vector@@Base+0x6c>
   144b0:	bl	124b0 <__assert_fail@plt>
   144b4:	mov	r5, r2
   144b8:	mov	r6, r1
   144bc:	mvn	r2, #-1073741824	; 0xc0000000
   144c0:	mov	r1, r5
   144c4:	bl	13798 <flatcc_builder_default_alloc@@Base+0x458>
   144c8:	cmp	r0, #0
   144cc:	bne	144e4 <flatcc_builder_append_offset_vector@@Base+0x5c>
   144d0:	lsl	r2, r5, #2
   144d4:	mov	r1, r6
   144d8:	mov	r0, r4
   144dc:	pop	{r4, r5, r6, lr}
   144e0:	b	132c4 <test@@Base+0xae0>
   144e4:	mov	r0, #0
   144e8:	pop	{r4, r5, r6, pc}
   144ec:	andeq	r9, r1, r7, asr fp
   144f0:	ldrdeq	r9, [r1], -r0
   144f4:	andeq	sl, r1, r3, rrx

000144f8 <flatcc_builder_extend_string@@Base>:
   144f8:	push	{r4, r5, r6, lr}
   144fc:	mov	r4, r0
   14500:	ldr	r0, [r0, #32]
   14504:	ldrh	r3, [r0, #14]
   14508:	cmp	r3, #6
   1450c:	beq	14524 <flatcc_builder_extend_string@@Base+0x2c>
   14510:	ldr	r3, [pc, #56]	; 14550 <flatcc_builder_extend_string@@Base+0x58>
   14514:	movw	r2, #957	; 0x3bd
   14518:	ldr	r1, [pc, #52]	; 14554 <flatcc_builder_extend_string@@Base+0x5c>
   1451c:	ldr	r0, [pc, #52]	; 14558 <flatcc_builder_extend_string@@Base+0x60>
   14520:	bl	124b0 <__assert_fail@plt>
   14524:	mvn	r2, #0
   14528:	mov	r5, r1
   1452c:	bl	13798 <flatcc_builder_default_alloc@@Base+0x458>
   14530:	cmp	r0, #0
   14534:	bne	14548 <flatcc_builder_extend_string@@Base+0x50>
   14538:	mov	r1, r5
   1453c:	mov	r0, r4
   14540:	pop	{r4, r5, r6, lr}
   14544:	b	131f4 <test@@Base+0xa10>
   14548:	mov	r0, #0
   1454c:	pop	{r4, r5, r6, pc}
   14550:	andeq	r9, r1, fp, ror fp
   14554:	ldrdeq	r9, [r1], -r0
   14558:	muleq	r1, r6, r0

0001455c <flatcc_builder_append_string@@Base>:
   1455c:	push	{r4, r5, r6, lr}
   14560:	mov	r4, r0
   14564:	ldr	r0, [r0, #32]
   14568:	ldrh	r3, [r0, #14]
   1456c:	cmp	r3, #6
   14570:	beq	14588 <flatcc_builder_append_string@@Base+0x2c>
   14574:	ldr	r3, [pc, #68]	; 145c0 <flatcc_builder_append_string@@Base+0x64>
   14578:	movw	r2, #966	; 0x3c6
   1457c:	ldr	r1, [pc, #64]	; 145c4 <flatcc_builder_append_string@@Base+0x68>
   14580:	ldr	r0, [pc, #64]	; 145c8 <flatcc_builder_append_string@@Base+0x6c>
   14584:	bl	124b0 <__assert_fail@plt>
   14588:	mov	r5, r2
   1458c:	mov	r6, r1
   14590:	mvn	r2, #0
   14594:	mov	r1, r5
   14598:	bl	13798 <flatcc_builder_default_alloc@@Base+0x458>
   1459c:	cmp	r0, #0
   145a0:	bne	145b8 <flatcc_builder_append_string@@Base+0x5c>
   145a4:	mov	r2, r5
   145a8:	mov	r1, r6
   145ac:	mov	r0, r4
   145b0:	pop	{r4, r5, r6, lr}
   145b4:	b	132c4 <test@@Base+0xae0>
   145b8:	mov	r0, #0
   145bc:	pop	{r4, r5, r6, pc}
   145c0:	muleq	r1, r8, fp
   145c4:	ldrdeq	r9, [r1], -r0
   145c8:	muleq	r1, r6, r0

000145cc <flatcc_builder_append_string_str@@Base>:
   145cc:	push	{r4, r5, r6, lr}
   145d0:	mov	r5, r0
   145d4:	mov	r0, r1
   145d8:	mov	r4, r1
   145dc:	bl	12450 <strlen@plt>
   145e0:	mov	r2, r0
   145e4:	mov	r1, r4
   145e8:	mov	r0, r5
   145ec:	pop	{r4, r5, r6, lr}
   145f0:	b	1455c <flatcc_builder_append_string@@Base>

000145f4 <flatcc_builder_append_string_strn@@Base>:
   145f4:	push	{r4, r5, r6, lr}
   145f8:	mov	r4, r1
   145fc:	mov	r6, r0
   14600:	mov	r1, #0
   14604:	mov	r0, r4
   14608:	mov	r5, r2
   1460c:	bl	1248c <memchr@plt>
   14610:	cmp	r0, #0
   14614:	mov	r1, r4
   14618:	subne	r5, r0, r4
   1461c:	mov	r0, r6
   14620:	mov	r2, r5
   14624:	pop	{r4, r5, r6, lr}
   14628:	b	1455c <flatcc_builder_append_string@@Base>

0001462c <flatcc_builder_truncate_vector@@Base>:
   1462c:	ldr	r3, [r0, #32]
   14630:	push	{r4, lr}
   14634:	ldrh	r2, [r3, #14]
   14638:	cmp	r2, #4
   1463c:	beq	14654 <flatcc_builder_truncate_vector@@Base+0x28>
   14640:	ldr	r3, [pc, #72]	; 14690 <flatcc_builder_truncate_vector@@Base+0x64>
   14644:	movw	r2, #985	; 0x3d9
   14648:	ldr	r1, [pc, #68]	; 14694 <flatcc_builder_truncate_vector@@Base+0x68>
   1464c:	ldr	r0, [pc, #68]	; 14698 <flatcc_builder_truncate_vector@@Base+0x6c>
   14650:	bl	124b0 <__assert_fail@plt>
   14654:	ldr	r2, [r3, #20]
   14658:	cmp	r2, r1
   1465c:	bcs	14674 <flatcc_builder_truncate_vector@@Base+0x48>
   14660:	ldr	r3, [pc, #40]	; 14690 <flatcc_builder_truncate_vector@@Base+0x64>
   14664:	movw	r2, #986	; 0x3da
   14668:	ldr	r1, [pc, #36]	; 14694 <flatcc_builder_truncate_vector@@Base+0x68>
   1466c:	ldr	r0, [pc, #40]	; 1469c <flatcc_builder_truncate_vector@@Base+0x70>
   14670:	b	14650 <flatcc_builder_truncate_vector@@Base+0x24>
   14674:	sub	r2, r2, r1
   14678:	str	r2, [r3, #20]
   1467c:	ldr	r3, [r3, #16]
   14680:	mul	r1, r3, r1
   14684:	bl	132a4 <test@@Base+0xac0>
   14688:	mov	r0, #0
   1468c:	pop	{r4, pc}
   14690:			; <UNDEFINED> instruction: 0x00019bb5
   14694:	ldrdeq	r9, [r1], -r0
   14698:	strdeq	r9, [r1], -sl
   1469c:	andeq	sl, r1, r2, asr #1

000146a0 <flatcc_builder_truncate_offset_vector@@Base>:
   146a0:	ldr	r3, [r0, #32]
   146a4:	push	{r4, lr}
   146a8:	ldrh	r2, [r3, #14]
   146ac:	cmp	r2, #5
   146b0:	beq	146c8 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   146b4:	ldr	r3, [pc, #72]	; 14704 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   146b8:	movw	r2, #994	; 0x3e2
   146bc:	ldr	r1, [pc, #68]	; 14708 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   146c0:	ldr	r0, [pc, #68]	; 1470c <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   146c4:	bl	124b0 <__assert_fail@plt>
   146c8:	ldr	r2, [r3, #20]
   146cc:	cmp	r2, r1
   146d0:	bcs	146e8 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   146d4:	ldr	r3, [pc, #40]	; 14704 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   146d8:	movw	r2, #995	; 0x3e3
   146dc:	ldr	r1, [pc, #36]	; 14708 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   146e0:	ldr	r0, [pc, #40]	; 14710 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   146e4:	b	146c4 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   146e8:	sub	r2, r2, r1
   146ec:	str	r2, [r3, #20]
   146f0:	ldr	r3, [r3, #16]
   146f4:	mul	r1, r3, r1
   146f8:	bl	132a4 <test@@Base+0xac0>
   146fc:	mov	r0, #0
   14700:	pop	{r4, pc}
   14704:	ldrdeq	r9, [r1], -r4
   14708:	ldrdeq	r9, [r1], -r0
   1470c:	andeq	sl, r1, r3, rrx
   14710:	andeq	sl, r1, r6, ror #1

00014714 <flatcc_builder_truncate_string@@Base>:
   14714:	ldr	r2, [r0, #32]
   14718:	push	{r4, lr}
   1471c:	ldrh	r3, [r2, #14]
   14720:	cmp	r3, #6
   14724:	beq	1473c <flatcc_builder_truncate_string@@Base+0x28>
   14728:	ldr	r3, [pc, #64]	; 14770 <flatcc_builder_truncate_string@@Base+0x5c>
   1472c:	movw	r2, #1003	; 0x3eb
   14730:	ldr	r1, [pc, #60]	; 14774 <flatcc_builder_truncate_string@@Base+0x60>
   14734:	ldr	r0, [pc, #60]	; 14778 <flatcc_builder_truncate_string@@Base+0x64>
   14738:	bl	124b0 <__assert_fail@plt>
   1473c:	ldr	r3, [r2, #20]
   14740:	cmp	r3, r1
   14744:	bcs	1475c <flatcc_builder_truncate_string@@Base+0x48>
   14748:	ldr	r3, [pc, #32]	; 14770 <flatcc_builder_truncate_string@@Base+0x5c>
   1474c:	mov	r2, #1004	; 0x3ec
   14750:	ldr	r1, [pc, #28]	; 14774 <flatcc_builder_truncate_string@@Base+0x60>
   14754:	ldr	r0, [pc, #32]	; 1477c <flatcc_builder_truncate_string@@Base+0x68>
   14758:	b	14738 <flatcc_builder_truncate_string@@Base+0x24>
   1475c:	sub	r3, r3, r1
   14760:	str	r3, [r2, #20]
   14764:	bl	132a4 <test@@Base+0xac0>
   14768:	mov	r0, #0
   1476c:	pop	{r4, pc}
   14770:	strdeq	r9, [r1], -sl
   14774:	ldrdeq	r9, [r1], -r0
   14778:	muleq	r1, r6, r0
   1477c:	andeq	sl, r1, r1, lsr #2

00014780 <flatcc_builder_start_vector@@Base>:
   14780:	cmp	r2, #4
   14784:	push	{r4, r5, r6, r7, r8, lr}
   14788:	mov	r7, r1
   1478c:	movcs	r1, r2
   14790:	movcc	r1, #4
   14794:	mov	r5, r0
   14798:	mov	r6, r3
   1479c:	bl	134a8 <flatcc_builder_default_alloc@@Base+0x168>
   147a0:	subs	r4, r0, #0
   147a4:	mvnne	r4, #0
   147a8:	bne	147d0 <flatcc_builder_start_vector@@Base+0x50>
   147ac:	ldr	r2, [r5, #32]
   147b0:	mov	r3, #4
   147b4:	mvn	r1, #3
   147b8:	mov	r0, r5
   147bc:	strh	r3, [r2, #14]
   147c0:	str	r7, [r2, #16]
   147c4:	str	r4, [r2, #20]
   147c8:	str	r6, [r2, #24]
   147cc:	bl	13178 <test@@Base+0x994>
   147d0:	mov	r0, r4
   147d4:	pop	{r4, r5, r6, r7, r8, pc}

000147d8 <flatcc_builder_start_offset_vector@@Base>:
   147d8:	push	{r4, r5, r6, lr}
   147dc:	mov	r1, #4
   147e0:	mov	r5, r0
   147e4:	bl	134a8 <flatcc_builder_default_alloc@@Base+0x168>
   147e8:	subs	r4, r0, #0
   147ec:	mvnne	r4, #0
   147f0:	bne	14818 <flatcc_builder_start_offset_vector@@Base+0x40>
   147f4:	ldr	r3, [r5, #32]
   147f8:	mov	r2, #4
   147fc:	mvn	r1, #3
   14800:	mov	r0, r5
   14804:	str	r2, [r3, #16]
   14808:	mov	r2, #5
   1480c:	strh	r2, [r3, #14]
   14810:	str	r4, [r3, #20]
   14814:	bl	13178 <test@@Base+0x994>
   14818:	mov	r0, r4
   1481c:	pop	{r4, r5, r6, pc}

00014820 <flatcc_builder_start_string@@Base>:
   14820:	push	{r4, r5, r6, lr}
   14824:	mov	r1, #1
   14828:	mov	r5, r0
   1482c:	bl	134a8 <flatcc_builder_default_alloc@@Base+0x168>
   14830:	subs	r4, r0, #0
   14834:	mvnne	r4, #0
   14838:	bne	14860 <flatcc_builder_start_string@@Base+0x40>
   1483c:	ldr	r3, [r5, #32]
   14840:	mov	r2, #1
   14844:	mvn	r1, #3
   14848:	mov	r0, r5
   1484c:	str	r2, [r3, #16]
   14850:	mov	r2, #6
   14854:	strh	r2, [r3, #14]
   14858:	str	r4, [r3, #20]
   1485c:	bl	13178 <test@@Base+0x994>
   14860:	mov	r0, r4
   14864:	pop	{r4, r5, r6, pc}

00014868 <flatcc_builder_reserve_table@@Base>:
   14868:	cmp	r1, #0
   1486c:	bge	14888 <flatcc_builder_reserve_table@@Base+0x20>
   14870:	push	{r4, lr}
   14874:	movw	r2, #1065	; 0x429
   14878:	ldr	r3, [pc, #12]	; 1488c <flatcc_builder_reserve_table@@Base+0x24>
   1487c:	ldr	r1, [pc, #12]	; 14890 <flatcc_builder_reserve_table@@Base+0x28>
   14880:	ldr	r0, [pc, #12]	; 14894 <flatcc_builder_reserve_table@@Base+0x2c>
   14884:	bl	124b0 <__assert_fail@plt>
   14888:	b	13580 <flatcc_builder_default_alloc@@Base+0x240>
   1488c:	andeq	r9, r1, r9, lsl ip
   14890:	ldrdeq	r9, [r1], -r0
   14894:	andeq	sl, r1, r9, asr r1

00014898 <flatcc_builder_start_table@@Base>:
   14898:	push	{r4, r5, r6, lr}
   1489c:	mov	r5, r1
   148a0:	mov	r1, #4
   148a4:	mov	r4, r0
   148a8:	bl	134a8 <flatcc_builder_default_alloc@@Base+0x168>
   148ac:	cmp	r0, #0
   148b0:	beq	148c0 <flatcc_builder_start_table@@Base+0x28>
   148b4:	mvn	r5, #0
   148b8:	mov	r0, r5
   148bc:	pop	{r4, r5, r6, pc}
   148c0:	ldr	r2, [r4, #4]
   148c4:	ldr	r3, [r4, #32]
   148c8:	ldr	r1, [r4, #52]	; 0x34
   148cc:	sub	r2, r2, r1
   148d0:	ldr	r1, [r4, #76]	; 0x4c
   148d4:	str	r2, [r3, #16]
   148d8:	ldr	r2, [r4]
   148dc:	sub	r2, r2, r1
   148e0:	mov	r1, r5
   148e4:	str	r2, [r3, #20]
   148e8:	ldr	r2, [r4, #12]
   148ec:	str	r2, [r3, #24]
   148f0:	ldrh	r2, [r4, #8]
   148f4:	strh	r2, [r3, #28]
   148f8:	ldr	r2, [pc, #44]	; 1492c <flatcc_builder_start_table@@Base+0x94>
   148fc:	strh	r0, [r4, #8]
   14900:	mov	r0, r4
   14904:	str	r2, [r4, #12]
   14908:	mov	r2, #3
   1490c:	strh	r2, [r3, #14]
   14910:	bl	13580 <flatcc_builder_default_alloc@@Base+0x240>
   14914:	subs	r5, r0, #0
   14918:	bne	148b4 <flatcc_builder_start_table@@Base+0x1c>
   1491c:	movw	r1, #65532	; 0xfffc
   14920:	mov	r0, r4
   14924:	bl	13178 <test@@Base+0x994>
   14928:	b	148b8 <flatcc_builder_start_table@@Base+0x20>
   1492c:	svccs	0x00693b52

00014930 <flatcc_builder_create_vtable@@Base>:
   14930:	mov	r3, #0
   14934:	push	{lr}		; (str lr, [sp, #-4]!)
   14938:	sub	sp, sp, #76	; 0x4c
   1493c:	cmp	r2, #0
   14940:	str	r3, [sp]
   14944:	str	r3, [sp, #4]
   14948:	movne	r3, #1
   1494c:	strne	r1, [sp, #8]
   14950:	mov	r1, sp
   14954:	strdne	r2, [sp]
   14958:	ldr	r3, [r0, #152]	; 0x98
   1495c:	strne	r2, [sp, #12]
   14960:	cmp	r3, #0
   14964:	bne	14980 <flatcc_builder_create_vtable@@Base+0x50>
   14968:	ldr	r3, [r0, #180]	; 0xb4
   1496c:	cmp	r3, #0
   14970:	bne	14980 <flatcc_builder_create_vtable@@Base+0x50>
   14974:	bl	13604 <flatcc_builder_default_alloc@@Base+0x2c4>
   14978:	add	sp, sp, #76	; 0x4c
   1497c:	pop	{pc}		; (ldr pc, [sp], #4)
   14980:	bl	13720 <flatcc_builder_default_alloc@@Base+0x3e0>
   14984:	cmp	r0, #0
   14988:	addne	r0, r0, #1
   1498c:	b	14978 <flatcc_builder_create_vtable@@Base+0x48>

00014990 <flatcc_builder_create_cached_vtable@@Base>:
   14990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14994:	mov	r6, r3
   14998:	sub	sp, sp, #20
   1499c:	mov	r4, r0
   149a0:	mov	sl, r1
   149a4:	mov	r7, r2
   149a8:	ldr	r3, [r0, #116]	; 0x74
   149ac:	cmp	r3, #0
   149b0:	bne	14a58 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   149b4:	ldr	r5, [r0, #124]	; 0x7c
   149b8:	add	r9, r0, #92	; 0x5c
   149bc:	cmp	r5, #0
   149c0:	beq	149d8 <flatcc_builder_create_cached_vtable@@Base+0x48>
   149c4:	ldr	r3, [pc, #560]	; 14bfc <flatcc_builder_create_cached_vtable@@Base+0x26c>
   149c8:	movw	r2, #342	; 0x156
   149cc:	ldr	r1, [pc, #556]	; 14c00 <flatcc_builder_create_cached_vtable@@Base+0x270>
   149d0:	ldr	r0, [pc, #556]	; 14c04 <flatcc_builder_create_cached_vtable@@Base+0x274>
   149d4:	bl	124b0 <__assert_fail@plt>
   149d8:	mov	r3, #16
   149dc:	mov	r2, r5
   149e0:	str	r5, [sp]
   149e4:	mov	r1, #6
   149e8:	bl	13438 <flatcc_builder_default_alloc@@Base+0xf8>
   149ec:	cmp	r0, #0
   149f0:	bne	14a00 <flatcc_builder_create_cached_vtable@@Base+0x70>
   149f4:	mov	r0, #0
   149f8:	add	sp, sp, #20
   149fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a00:	mov	r3, #16
   14a04:	mov	r1, r9
   14a08:	ldr	r0, [r4, #40]	; 0x28
   14a0c:	mov	r2, #256	; 0x100
   14a10:	str	r3, [r4, #124]	; 0x7c
   14a14:	mov	r3, #5
   14a18:	ldr	r8, [r4, #48]	; 0x30
   14a1c:	str	r3, [sp]
   14a20:	mov	r3, #1
   14a24:	blx	r8
   14a28:	cmp	r0, #0
   14a2c:	moveq	r3, #256	; 0x100
   14a30:	ldreq	r1, [r4, #96]	; 0x60
   14a34:	bne	149f4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14a38:	lsl	r2, r3, #1
   14a3c:	cmp	r2, r1
   14a40:	bls	14b18 <flatcc_builder_create_cached_vtable@@Base+0x188>
   14a44:	lsr	r3, r3, #2
   14a48:	mov	r2, #1
   14a4c:	cmp	r3, r2, lsl r5
   14a50:	bhi	14b20 <flatcc_builder_create_cached_vtable@@Base+0x190>
   14a54:	str	r5, [r4, #116]	; 0x74
   14a58:	ldr	r8, [r4, #92]	; 0x5c
   14a5c:	ldr	r3, [r4, #116]	; 0x74
   14a60:	rsb	r3, r3, #32
   14a64:	lsr	r6, r6, r3
   14a68:	adds	r3, r8, r6, lsl #2
   14a6c:	ldrne	r9, [r8, r6, lsl #2]
   14a70:	movne	fp, #0
   14a74:	str	r3, [sp, #8]
   14a78:	beq	149f4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14a7c:	cmp	r9, #0
   14a80:	bne	14b28 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14a84:	mov	r3, #16
   14a88:	mov	r1, #6
   14a8c:	ldr	r2, [r4, #124]	; 0x7c
   14a90:	mov	r0, r4
   14a94:	str	r9, [sp]
   14a98:	bl	13438 <flatcc_builder_default_alloc@@Base+0xf8>
   14a9c:	subs	r5, r0, #0
   14aa0:	beq	149f4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14aa4:	ldr	r3, [r4, #124]	; 0x7c
   14aa8:	mov	r1, sl
   14aac:	mov	r0, r4
   14ab0:	add	r2, r3, #16
   14ab4:	str	r2, [r4, #124]	; 0x7c
   14ab8:	ldr	r2, [r4, #152]	; 0x98
   14abc:	str	r2, [r5, #4]
   14ac0:	ldr	r2, [r8, r6, lsl #2]
   14ac4:	str	r2, [r5, #12]
   14ac8:	mov	r2, r7
   14acc:	str	r3, [r8, r6, lsl #2]
   14ad0:	bl	14930 <flatcc_builder_create_vtable@@Base>
   14ad4:	cmp	r0, #0
   14ad8:	str	r0, [r5]
   14adc:	beq	149f4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   14ae0:	cmp	fp, #0
   14ae4:	ldrne	r3, [fp, #8]
   14ae8:	strne	r3, [r5, #8]
   14aec:	bne	14bb0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14af0:	ldr	r2, [r4, #120]	; 0x78
   14af4:	ldr	r3, [r4, #172]	; 0xac
   14af8:	cmp	r3, #0
   14afc:	beq	14bb8 <flatcc_builder_create_cached_vtable@@Base+0x228>
   14b00:	add	r1, r7, r2
   14b04:	cmp	r3, r1
   14b08:	bcs	14bb8 <flatcc_builder_create_cached_vtable@@Base+0x228>
   14b0c:	mov	r0, r4
   14b10:	bl	13944 <flatcc_builder_flush_vtable_cache@@Base>
   14b14:	b	14bb0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14b18:	mov	r3, r2
   14b1c:	b	14a38 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   14b20:	add	r5, r5, #1
   14b24:	b	14a4c <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14b28:	ldr	r0, [r4, #68]	; 0x44
   14b2c:	str	r3, [sp, #12]
   14b30:	ldr	r5, [r4, #100]	; 0x64
   14b34:	add	r5, r5, r9
   14b38:	ldr	r2, [r5, #8]
   14b3c:	add	r1, r0, r2
   14b40:	ldrh	r2, [r0, r2]
   14b44:	cmp	r2, r7
   14b48:	bne	14b64 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   14b4c:	mov	r2, r7
   14b50:	mov	r0, sl
   14b54:	bl	12414 <memcmp@plt>
   14b58:	cmp	r0, #0
   14b5c:	ldr	r3, [sp, #12]
   14b60:	beq	14b70 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   14b64:	add	r3, r5, #12
   14b68:	ldr	r9, [r5, #12]
   14b6c:	b	14a7c <flatcc_builder_create_cached_vtable@@Base+0xec>
   14b70:	ldr	r1, [r5, #4]
   14b74:	ldr	r2, [r4, #152]	; 0x98
   14b78:	cmp	r1, r2
   14b7c:	beq	14b90 <flatcc_builder_create_cached_vtable@@Base+0x200>
   14b80:	add	r3, r5, #12
   14b84:	mov	fp, r5
   14b88:	ldr	r9, [r5, #12]
   14b8c:	b	14a7c <flatcc_builder_create_cached_vtable@@Base+0xec>
   14b90:	ldr	r2, [sp, #8]
   14b94:	cmp	r3, r2
   14b98:	beq	14bb0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14b9c:	ldr	r2, [r5, #12]
   14ba0:	str	r2, [r3]
   14ba4:	ldr	r3, [r8, r6, lsl #2]
   14ba8:	str	r3, [r5, #12]
   14bac:	str	r9, [r8, r6, lsl #2]
   14bb0:	ldr	r0, [r5]
   14bb4:	b	149f8 <flatcc_builder_create_cached_vtable@@Base+0x68>
   14bb8:	mov	r3, #0
   14bbc:	mov	r1, #2
   14bc0:	mov	r0, r4
   14bc4:	str	r3, [sp]
   14bc8:	mov	r3, r7
   14bcc:	bl	13438 <flatcc_builder_default_alloc@@Base+0xf8>
   14bd0:	cmp	r0, #0
   14bd4:	mvneq	r0, #0
   14bd8:	beq	149f8 <flatcc_builder_create_cached_vtable@@Base+0x68>
   14bdc:	ldr	r3, [r4, #120]	; 0x78
   14be0:	mov	r2, r7
   14be4:	mov	r1, sl
   14be8:	str	r3, [r5, #8]
   14bec:	add	r3, r3, r7
   14bf0:	str	r3, [r4, #120]	; 0x78
   14bf4:	bl	12408 <memcpy@plt>
   14bf8:	b	14bb0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14bfc:	andeq	r9, r1, r6, lsr ip
   14c00:	ldrdeq	r9, [r1], -r0
   14c04:	andeq	sl, r1, r3, asr #2

00014c08 <flatcc_builder_create_table@@Base>:
   14c08:	push	{r4, r5, r6, r7, lr}
   14c0c:	sub	sp, sp, #84	; 0x54
   14c10:	ldr	r4, [sp, #108]	; 0x6c
   14c14:	ldr	ip, [sp, #112]	; 0x70
   14c18:	cmp	r4, #0
   14c1c:	bge	14c34 <flatcc_builder_create_table@@Base+0x2c>
   14c20:	ldr	r3, [pc, #276]	; 14d3c <flatcc_builder_create_table@@Base+0x134>
   14c24:	movw	r2, #1237	; 0x4d5
   14c28:	ldr	r1, [pc, #272]	; 14d40 <flatcc_builder_create_table@@Base+0x138>
   14c2c:	ldr	r0, [pc, #272]	; 14d44 <flatcc_builder_create_table@@Base+0x13c>
   14c30:	bl	124b0 <__assert_fail@plt>
   14c34:	tst	ip, #1
   14c38:	bne	14c50 <flatcc_builder_create_table@@Base+0x48>
   14c3c:	ldr	r3, [pc, #248]	; 14d3c <flatcc_builder_create_table@@Base+0x134>
   14c40:	movw	r2, #1243	; 0x4db
   14c44:	ldr	r1, [pc, #244]	; 14d40 <flatcc_builder_create_table@@Base+0x138>
   14c48:	ldr	r0, [pc, #248]	; 14d48 <flatcc_builder_create_table@@Base+0x140>
   14c4c:	b	14c30 <flatcc_builder_create_table@@Base+0x28>
   14c50:	cmp	r3, #4
   14c54:	sub	ip, ip, #1
   14c58:	movcs	lr, r3
   14c5c:	ldrh	r3, [r0, #128]	; 0x80
   14c60:	movcc	lr, #4
   14c64:	cmp	r3, lr
   14c68:	ldr	r3, [r0, #136]	; 0x88
   14c6c:	strhcc	lr, [r0, #128]	; 0x80
   14c70:	sub	lr, lr, #1
   14c74:	sub	r5, r3, r2
   14c78:	sub	r3, r5, #4
   14c7c:	and	lr, lr, r5
   14c80:	sub	ip, r3, ip
   14c84:	sub	r3, lr, r3
   14c88:	sub	ip, ip, lr
   14c8c:	sub	r3, r3, #4
   14c90:	str	ip, [sp, #4]
   14c94:	ldr	ip, [sp, #104]	; 0x68
   14c98:	add	r4, ip, r4, lsl #1
   14c9c:	cmp	r4, ip
   14ca0:	bne	14d24 <flatcc_builder_create_table@@Base+0x11c>
   14ca4:	mov	r3, #4
   14ca8:	cmp	r2, #0
   14cac:	add	ip, sp, r3
   14cb0:	str	r3, [sp, #8]
   14cb4:	str	ip, [sp, #16]
   14cb8:	str	r3, [sp, #20]
   14cbc:	mov	r3, #1
   14cc0:	str	r3, [sp, #12]
   14cc4:	beq	14ce0 <flatcc_builder_create_table@@Base+0xd8>
   14cc8:	add	r3, r2, #4
   14ccc:	str	r3, [sp, #8]
   14cd0:	mov	r3, #2
   14cd4:	str	r1, [sp, #24]
   14cd8:	str	r3, [sp, #12]
   14cdc:	str	r2, [sp, #28]
   14ce0:	cmp	lr, #0
   14ce4:	beq	14d14 <flatcc_builder_create_table@@Base+0x10c>
   14ce8:	ldr	r3, [sp, #8]
   14cec:	add	r2, sp, #80	; 0x50
   14cf0:	ldr	r1, [pc, #84]	; 14d4c <flatcc_builder_create_table@@Base+0x144>
   14cf4:	add	r3, r3, lr
   14cf8:	str	r3, [sp, #8]
   14cfc:	ldr	r3, [sp, #12]
   14d00:	add	r3, r3, #1
   14d04:	add	r2, r2, r3, lsl #3
   14d08:	str	r3, [sp, #12]
   14d0c:	str	r1, [r2, #-72]	; 0xffffffb8
   14d10:	str	lr, [r2, #-68]	; 0xffffffbc
   14d14:	add	r1, sp, #8
   14d18:	bl	13720 <flatcc_builder_default_alloc@@Base+0x3e0>
   14d1c:	add	sp, sp, #84	; 0x54
   14d20:	pop	{r4, r5, r6, r7, pc}
   14d24:	ldrh	r5, [ip], #2
   14d28:	ldr	r6, [r1, r5]
   14d2c:	sub	r7, r3, r5
   14d30:	add	r6, r6, r7
   14d34:	str	r6, [r1, r5]
   14d38:	b	14c9c <flatcc_builder_create_table@@Base+0x94>
   14d3c:	andeq	r9, r1, pc, lsr ip
   14d40:	ldrdeq	r9, [r1], -r0
   14d44:	andeq	sl, r1, r2, asr r1
   14d48:	andeq	sl, r1, r4, ror #2
   14d4c:	andeq	r9, r1, sl, ror #15

00014d50 <flatcc_builder_check_required_field@@Base>:
   14d50:	ldr	r3, [r0, #32]
   14d54:	ldrh	r3, [r3, #14]
   14d58:	cmp	r3, #3
   14d5c:	beq	14d78 <flatcc_builder_check_required_field@@Base+0x28>
   14d60:	push	{r4, lr}
   14d64:	movw	r2, #1272	; 0x4f8
   14d68:	ldr	r3, [pc, #52]	; 14da4 <flatcc_builder_check_required_field@@Base+0x54>
   14d6c:	ldr	r1, [pc, #52]	; 14da8 <flatcc_builder_check_required_field@@Base+0x58>
   14d70:	ldr	r0, [pc, #52]	; 14dac <flatcc_builder_check_required_field@@Base+0x5c>
   14d74:	bl	124b0 <__assert_fail@plt>
   14d78:	ldrh	r3, [r0, #8]
   14d7c:	cmp	r3, r1
   14d80:	bls	14d9c <flatcc_builder_check_required_field@@Base+0x4c>
   14d84:	ldr	r3, [r0, #4]
   14d88:	lsl	r1, r1, #1
   14d8c:	ldrh	r0, [r3, r1]
   14d90:	adds	r0, r0, #0
   14d94:	movne	r0, #1
   14d98:	bx	lr
   14d9c:	mov	r0, #0
   14da0:	bx	lr
   14da4:	andeq	r9, r1, fp, asr ip
   14da8:	ldrdeq	r9, [r1], -r0
   14dac:	andeq	sl, r1, pc, ror #2

00014db0 <flatcc_builder_check_union_field@@Base>:
   14db0:	ldr	r3, [r0, #32]
   14db4:	ldrh	r3, [r3, #14]
   14db8:	cmp	r3, #3
   14dbc:	beq	14dd8 <flatcc_builder_check_union_field@@Base+0x28>
   14dc0:	push	{r4, lr}
   14dc4:	movw	r2, #1279	; 0x4ff
   14dc8:	ldr	r3, [pc, #104]	; 14e38 <flatcc_builder_check_union_field@@Base+0x88>
   14dcc:	ldr	r1, [pc, #104]	; 14e3c <flatcc_builder_check_union_field@@Base+0x8c>
   14dd0:	ldr	r0, [pc, #104]	; 14e40 <flatcc_builder_check_union_field@@Base+0x90>
   14dd4:	bl	124b0 <__assert_fail@plt>
   14dd8:	cmp	r1, #0
   14ddc:	beq	14e30 <flatcc_builder_check_union_field@@Base+0x80>
   14de0:	ldrh	r3, [r0, #8]
   14de4:	cmp	r3, r1
   14de8:	bls	14e30 <flatcc_builder_check_union_field@@Base+0x80>
   14dec:	ldr	r3, [r0, #4]
   14df0:	sub	r1, r1, #-2147483647	; 0x80000001
   14df4:	lsl	r1, r1, #1
   14df8:	ldrh	r2, [r3, r1]!
   14dfc:	cmp	r2, #0
   14e00:	ldrh	r1, [r3, #2]
   14e04:	bne	14e14 <flatcc_builder_check_union_field@@Base+0x64>
   14e08:	clz	r0, r1
   14e0c:	lsr	r0, r0, #5
   14e10:	bx	lr
   14e14:	ldr	r3, [r0, #16]
   14e18:	ldrb	r3, [r3, r2]
   14e1c:	cmp	r3, #0
   14e20:	beq	14e08 <flatcc_builder_check_union_field@@Base+0x58>
   14e24:	adds	r0, r1, #0
   14e28:	movne	r0, #1
   14e2c:	bx	lr
   14e30:	mov	r0, #0
   14e34:	bx	lr
   14e38:	andeq	r9, r1, pc, ror ip
   14e3c:	ldrdeq	r9, [r1], -r0
   14e40:	andeq	sl, r1, pc, ror #2

00014e44 <flatcc_builder_check_required@@Base>:
   14e44:	ldr	r3, [r0, #32]
   14e48:	push	{r4, lr}
   14e4c:	ldrh	r3, [r3, #14]
   14e50:	cmp	r3, #3
   14e54:	beq	14e6c <flatcc_builder_check_required@@Base+0x28>
   14e58:	ldr	r3, [pc, #84]	; 14eb4 <flatcc_builder_check_required@@Base+0x70>
   14e5c:	movw	r2, #1297	; 0x511
   14e60:	ldr	r1, [pc, #80]	; 14eb8 <flatcc_builder_check_required@@Base+0x74>
   14e64:	ldr	r0, [pc, #80]	; 14ebc <flatcc_builder_check_required@@Base+0x78>
   14e68:	bl	124b0 <__assert_fail@plt>
   14e6c:	ldrh	r3, [r0, #8]
   14e70:	cmp	r3, r2
   14e74:	subge	r1, r1, #2
   14e78:	movge	ip, #0
   14e7c:	bge	14ea4 <flatcc_builder_check_required@@Base+0x60>
   14e80:	mov	r0, #0
   14e84:	pop	{r4, pc}
   14e88:	ldrh	r3, [r1, #2]!
   14e8c:	ldr	lr, [r0, #4]
   14e90:	lsl	r3, r3, #1
   14e94:	ldrh	r3, [lr, r3]
   14e98:	cmp	r3, #0
   14e9c:	beq	14e80 <flatcc_builder_check_required@@Base+0x3c>
   14ea0:	add	ip, ip, #1
   14ea4:	cmp	ip, r2
   14ea8:	blt	14e88 <flatcc_builder_check_required@@Base+0x44>
   14eac:	mov	r0, #1
   14eb0:	pop	{r4, pc}
   14eb4:	andeq	r9, r1, r0, lsr #25
   14eb8:	ldrdeq	r9, [r1], -r0
   14ebc:	andeq	sl, r1, pc, ror #2

00014ec0 <flatcc_builder_end_table@@Base>:
   14ec0:	ldr	r3, [r0, #32]
   14ec4:	push	{r4, r5, r6, r7, lr}
   14ec8:	sub	sp, sp, #20
   14ecc:	ldrh	r3, [r3, #14]
   14ed0:	cmp	r3, #3
   14ed4:	beq	14eec <flatcc_builder_end_table@@Base+0x2c>
   14ed8:	ldr	r3, [pc, #260]	; 14fe4 <flatcc_builder_end_table@@Base+0x124>
   14edc:	movw	r2, #1317	; 0x525
   14ee0:	ldr	r1, [pc, #256]	; 14fe8 <flatcc_builder_end_table@@Base+0x128>
   14ee4:	ldr	r0, [pc, #256]	; 14fec <flatcc_builder_end_table@@Base+0x12c>
   14ee8:	bl	124b0 <__assert_fail@plt>
   14eec:	ldrh	r5, [r0, #8]
   14ef0:	mov	r4, r0
   14ef4:	ldr	r1, [r0, #4]
   14ef8:	ldr	r3, [r0, #20]
   14efc:	add	r5, r5, #2
   14f00:	lsl	r5, r5, #1
   14f04:	sub	r6, r1, #4
   14f08:	uxth	r5, r5
   14f0c:	add	r3, r3, #4
   14f10:	uxth	r2, r3
   14f14:	ldr	r3, [r0, #12]
   14f18:	strh	r5, [r1, #-4]
   14f1c:	strh	r2, [r1, #-2]
   14f20:	ldr	r1, [pc, #200]	; 14ff0 <flatcc_builder_end_table@@Base+0x130>
   14f24:	eor	r3, r3, r5
   14f28:	mul	r3, r1, r3
   14f2c:	eor	r3, r3, r2
   14f30:	mov	r2, r5
   14f34:	mul	r3, r1, r3
   14f38:	mov	r1, r6
   14f3c:	str	r3, [r0, #12]
   14f40:	bl	14990 <flatcc_builder_create_cached_vtable@@Base>
   14f44:	subs	r7, r0, #0
   14f48:	beq	14fd8 <flatcc_builder_end_table@@Base+0x118>
   14f4c:	mov	r2, r5
   14f50:	mov	r1, #0
   14f54:	mov	r0, r6
   14f58:	bl	12474 <memset@plt>
   14f5c:	ldr	r3, [r4, #32]
   14f60:	mov	r0, r4
   14f64:	ldr	r2, [r4, #76]	; 0x4c
   14f68:	ldr	r3, [r3, #20]
   14f6c:	str	r7, [sp, #8]
   14f70:	add	r2, r2, r3
   14f74:	ldr	r3, [r4]
   14f78:	sub	r3, r3, r2
   14f7c:	asr	r3, r3, #1
   14f80:	strd	r2, [sp]
   14f84:	ldrh	r3, [r4, #130]	; 0x82
   14f88:	ldr	r1, [r4, #16]
   14f8c:	ldr	r2, [r4, #20]
   14f90:	bl	14c08 <flatcc_builder_create_table@@Base>
   14f94:	subs	r7, r0, #0
   14f98:	beq	14fd8 <flatcc_builder_end_table@@Base+0x118>
   14f9c:	ldr	r3, [r4, #32]
   14fa0:	mov	r0, r4
   14fa4:	ldr	r1, [r3, #16]
   14fa8:	ldr	r2, [r3, #24]
   14fac:	str	r2, [r4, #12]
   14fb0:	ldrh	r2, [r3, #28]
   14fb4:	ldr	r3, [r3, #20]
   14fb8:	strh	r2, [r4, #8]
   14fbc:	ldr	r2, [r4, #52]	; 0x34
   14fc0:	add	r2, r2, r1
   14fc4:	str	r2, [r4, #4]
   14fc8:	ldr	r2, [r4, #76]	; 0x4c
   14fcc:	add	r3, r2, r3
   14fd0:	str	r3, [r4]
   14fd4:	bl	1323c <test@@Base+0xa58>
   14fd8:	mov	r0, r7
   14fdc:	add	sp, sp, #20
   14fe0:	pop	{r4, r5, r6, r7, pc}
   14fe4:			; <UNDEFINED> instruction: 0x00019cbe
   14fe8:	ldrdeq	r9, [r1], -r0
   14fec:	andeq	sl, r1, pc, ror #2
   14ff0:			; <UNDEFINED> instruction: 0x9e3779b1

00014ff4 <flatcc_builder_create_vector@@Base>:
   14ff4:	push	{lr}		; (str lr, [sp, #-4]!)
   14ff8:	sub	sp, sp, #84	; 0x54
   14ffc:	ldr	lr, [sp, #92]	; 0x5c
   15000:	ldrh	ip, [sp, #88]	; 0x58
   15004:	cmp	r2, lr
   15008:	bls	15020 <flatcc_builder_create_vector@@Base+0x2c>
   1500c:	ldr	r3, [pc, #184]	; 150cc <flatcc_builder_create_vector@@Base+0xd8>
   15010:	movw	r2, #1365	; 0x555
   15014:	ldr	r1, [pc, #180]	; 150d0 <flatcc_builder_create_vector@@Base+0xdc>
   15018:	ldr	r0, [pc, #180]	; 150d4 <flatcc_builder_create_vector@@Base+0xe0>
   1501c:	bl	124b0 <__assert_fail@plt>
   15020:	ldrh	lr, [r0, #128]	; 0x80
   15024:	mul	r3, r3, r2
   15028:	cmp	ip, #4
   1502c:	str	r2, [sp, #4]
   15030:	movcc	ip, #4
   15034:	ldr	r2, [r0, #136]	; 0x88
   15038:	cmp	lr, ip
   1503c:	sub	r2, r2, r3
   15040:	strhcc	ip, [r0, #128]	; 0x80
   15044:	sub	ip, ip, #1
   15048:	and	ip, ip, r2
   1504c:	mov	r2, #4
   15050:	add	lr, sp, r2
   15054:	cmp	r3, #0
   15058:	str	r2, [sp, #8]
   1505c:	str	lr, [sp, #16]
   15060:	str	r2, [sp, #20]
   15064:	mov	r2, #1
   15068:	str	r2, [sp, #12]
   1506c:	beq	15088 <flatcc_builder_create_vector@@Base+0x94>
   15070:	add	r2, r3, #4
   15074:	str	r3, [sp, #28]
   15078:	mov	r3, #2
   1507c:	str	r2, [sp, #8]
   15080:	str	r3, [sp, #12]
   15084:	str	r1, [sp, #24]
   15088:	cmp	ip, #0
   1508c:	beq	150bc <flatcc_builder_create_vector@@Base+0xc8>
   15090:	ldr	r3, [sp, #8]
   15094:	add	r2, sp, #80	; 0x50
   15098:	ldr	r1, [pc, #56]	; 150d8 <flatcc_builder_create_vector@@Base+0xe4>
   1509c:	add	r3, r3, ip
   150a0:	str	r3, [sp, #8]
   150a4:	ldr	r3, [sp, #12]
   150a8:	add	r3, r3, #1
   150ac:	add	r2, r2, r3, lsl #3
   150b0:	str	r3, [sp, #12]
   150b4:	str	r1, [r2, #-72]	; 0xffffffb8
   150b8:	str	ip, [r2, #-68]	; 0xffffffbc
   150bc:	add	r1, sp, #8
   150c0:	bl	13720 <flatcc_builder_default_alloc@@Base+0x3e0>
   150c4:	add	sp, sp, #84	; 0x54
   150c8:	pop	{pc}		; (ldr pc, [sp], #4)
   150cc:	ldrdeq	r9, [r1], -r7
   150d0:	ldrdeq	r9, [r1], -r0
   150d4:	muleq	r1, sl, r1
   150d8:	andeq	r9, r1, sl, ror #15

000150dc <flatcc_builder_end_vector@@Base>:
   150dc:	push	{r0, r1, r2, r4, r5, lr}
   150e0:	ldr	r2, [r0, #32]
   150e4:	ldrh	r3, [r2, #14]
   150e8:	cmp	r3, #4
   150ec:	beq	15104 <flatcc_builder_end_vector@@Base+0x28>
   150f0:	ldr	r3, [pc, #76]	; 15144 <flatcc_builder_end_vector@@Base+0x68>
   150f4:	movw	r2, #1400	; 0x578
   150f8:	ldr	r1, [pc, #72]	; 15148 <flatcc_builder_end_vector@@Base+0x6c>
   150fc:	ldr	r0, [pc, #72]	; 1514c <flatcc_builder_end_vector@@Base+0x70>
   15100:	bl	124b0 <__assert_fail@plt>
   15104:	ldr	r3, [r2, #24]
   15108:	mov	r4, r0
   1510c:	str	r3, [sp, #4]
   15110:	ldrh	r3, [r0, #130]	; 0x82
   15114:	str	r3, [sp]
   15118:	ldr	r3, [r2, #16]
   1511c:	ldr	r1, [r0, #16]
   15120:	ldr	r2, [r2, #20]
   15124:	bl	14ff4 <flatcc_builder_create_vector@@Base>
   15128:	subs	r5, r0, #0
   1512c:	beq	15138 <flatcc_builder_end_vector@@Base+0x5c>
   15130:	mov	r0, r4
   15134:	bl	1323c <test@@Base+0xa58>
   15138:	mov	r0, r5
   1513c:	add	sp, sp, #12
   15140:	pop	{r4, r5, pc}
   15144:	strdeq	r9, [r1], -r4
   15148:	ldrdeq	r9, [r1], -r0
   1514c:	strdeq	r9, [r1], -sl

00015150 <flatcc_builder_vector_count@@Base>:
   15150:	ldr	r3, [r0, #32]
   15154:	ldr	r0, [r3, #20]
   15158:	bx	lr

0001515c <flatcc_builder_vector_edit@@Base>:
   1515c:	ldr	r0, [r0, #16]
   15160:	bx	lr

00015164 <flatcc_builder_create_offset_vector_direct@@Base>:
   15164:	cmn	r2, #-1073741823	; 0xc0000001
   15168:	bhi	15174 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   1516c:	mov	r3, #0
   15170:	b	137ec <flatcc_builder_default_alloc@@Base+0x4ac>
   15174:	mov	r0, #0
   15178:	bx	lr

0001517c <flatcc_builder_end_offset_vector@@Base>:
   1517c:	ldr	r3, [r0, #32]
   15180:	push	{r4, r5, r6, lr}
   15184:	ldrh	r2, [r3, #14]
   15188:	cmp	r2, #5
   1518c:	beq	151a4 <flatcc_builder_end_offset_vector@@Base+0x28>
   15190:	ldr	r3, [pc, #52]	; 151cc <flatcc_builder_end_offset_vector@@Base+0x50>
   15194:	movw	r2, #1480	; 0x5c8
   15198:	ldr	r1, [pc, #48]	; 151d0 <flatcc_builder_end_offset_vector@@Base+0x54>
   1519c:	ldr	r0, [pc, #48]	; 151d4 <flatcc_builder_end_offset_vector@@Base+0x58>
   151a0:	bl	124b0 <__assert_fail@plt>
   151a4:	ldr	r1, [r0, #16]
   151a8:	mov	r4, r0
   151ac:	ldr	r2, [r3, #20]
   151b0:	bl	15164 <flatcc_builder_create_offset_vector_direct@@Base>
   151b4:	subs	r5, r0, #0
   151b8:	beq	151c4 <flatcc_builder_end_offset_vector@@Base+0x48>
   151bc:	mov	r0, r4
   151c0:	bl	1323c <test@@Base+0xa58>
   151c4:	mov	r0, r5
   151c8:	pop	{r4, r5, r6, pc}
   151cc:	andeq	r9, r1, lr, lsl #26
   151d0:	ldrdeq	r9, [r1], -r0
   151d4:	andeq	sl, r1, r3, rrx

000151d8 <flatcc_builder_create_offset_vector@@Base>:
   151d8:	push	{r4, r5, r6, lr}
   151dc:	mov	r4, r0
   151e0:	mov	r6, r1
   151e4:	mov	r5, r2
   151e8:	bl	147d8 <flatcc_builder_start_offset_vector@@Base>
   151ec:	cmp	r0, #0
   151f0:	bne	15220 <flatcc_builder_create_offset_vector@@Base+0x48>
   151f4:	mov	r1, r5
   151f8:	mov	r0, r4
   151fc:	bl	143e8 <flatcc_builder_extend_offset_vector@@Base>
   15200:	cmp	r0, #0
   15204:	beq	15220 <flatcc_builder_create_offset_vector@@Base+0x48>
   15208:	lsl	r2, r5, #2
   1520c:	mov	r1, r6
   15210:	bl	12408 <memcpy@plt>
   15214:	mov	r0, r4
   15218:	pop	{r4, r5, r6, lr}
   1521c:	b	1517c <flatcc_builder_end_offset_vector@@Base>
   15220:	mov	r0, #0
   15224:	pop	{r4, r5, r6, pc}

00015228 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15228:	ldr	r2, [r0, #32]
   1522c:	mov	r3, r1
   15230:	push	{r4, r5, r6, lr}
   15234:	ldrh	r1, [r2, #14]
   15238:	cmp	r1, #5
   1523c:	beq	15254 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   15240:	ldr	r3, [pc, #64]	; 15288 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   15244:	movw	r2, #1493	; 0x5d5
   15248:	ldr	r1, [pc, #60]	; 1528c <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   1524c:	ldr	r0, [pc, #60]	; 15290 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   15250:	bl	124b0 <__assert_fail@plt>
   15254:	ldr	r2, [r2, #20]
   15258:	cmn	r2, #-1073741823	; 0xc0000001
   1525c:	movhi	r5, #0
   15260:	bhi	15280 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   15264:	ldr	r1, [r0, #16]
   15268:	mov	r4, r0
   1526c:	bl	137ec <flatcc_builder_default_alloc@@Base+0x4ac>
   15270:	subs	r5, r0, #0
   15274:	beq	15280 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   15278:	mov	r0, r4
   1527c:	bl	1323c <test@@Base+0xa58>
   15280:	mov	r0, r5
   15284:	pop	{r4, r5, r6, pc}
   15288:	andeq	r9, r1, pc, lsr #26
   1528c:	ldrdeq	r9, [r1], -r0
   15290:	andeq	sl, r1, r3, rrx

00015294 <flatcc_builder_offset_vector_edit@@Base>:
   15294:	ldr	r0, [r0, #16]
   15298:	bx	lr

0001529c <flatcc_builder_offset_vector_count@@Base>:
   1529c:	ldr	r3, [r0, #32]
   152a0:	ldr	r0, [r3, #20]
   152a4:	bx	lr

000152a8 <flatcc_builder_create_union_vector_direct@@Base>:
   152a8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   152ac:	mov	r4, r0
   152b0:	ldr	r5, [sp, #32]
   152b4:	cmn	r5, #-1073741823	; 0xc0000001
   152b8:	bls	152d4 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   152bc:	mov	r3, #0
   152c0:	str	r3, [r4]
   152c4:	str	r3, [r4, #4]
   152c8:	mov	r0, r4
   152cc:	add	sp, sp, #8
   152d0:	pop	{r4, r5, r6, r7, r8, pc}
   152d4:	mov	r7, r1
   152d8:	mov	r8, r2
   152dc:	mov	r1, r3
   152e0:	mov	r0, r7
   152e4:	mov	r3, r2
   152e8:	mov	r2, r5
   152ec:	bl	137ec <flatcc_builder_default_alloc@@Base+0x4ac>
   152f0:	subs	r6, r0, #0
   152f4:	beq	152bc <flatcc_builder_create_union_vector_direct@@Base+0x14>
   152f8:	mvn	r3, #0
   152fc:	mov	r2, r5
   15300:	mov	r1, r8
   15304:	mov	r0, r7
   15308:	str	r3, [sp, #4]
   1530c:	mov	r3, #1
   15310:	str	r3, [sp]
   15314:	bl	14ff4 <flatcc_builder_create_vector@@Base>
   15318:	stm	r4, {r0, r6}
   1531c:	b	152c8 <flatcc_builder_create_union_vector_direct@@Base+0x20>

00015320 <flatcc_builder_create_union_vector@@Base>:
   15320:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15324:	mov	r6, r0
   15328:	mov	r0, r1
   1532c:	mov	r5, r1
   15330:	mov	r8, r2
   15334:	mov	r7, r3
   15338:	bl	147d8 <flatcc_builder_start_offset_vector@@Base>
   1533c:	subs	r4, r0, #0
   15340:	beq	1535c <flatcc_builder_create_union_vector@@Base+0x3c>
   15344:	mov	r3, #0
   15348:	str	r3, [r6]
   1534c:	str	r3, [r6, #4]
   15350:	mov	r0, r6
   15354:	add	sp, sp, #16
   15358:	pop	{r4, r5, r6, r7, r8, pc}
   1535c:	mov	r1, r7
   15360:	mov	r0, r5
   15364:	bl	143e8 <flatcc_builder_extend_offset_vector@@Base>
   15368:	cmp	r0, #0
   1536c:	beq	15344 <flatcc_builder_create_union_vector@@Base+0x24>
   15370:	mov	r1, r7
   15374:	mov	r0, r5
   15378:	bl	131f4 <test@@Base+0xa10>
   1537c:	subs	r2, r0, #0
   15380:	movne	r1, r4
   15384:	addne	r0, r8, #4
   15388:	ldrne	r3, [r5, #16]
   1538c:	beq	15344 <flatcc_builder_create_union_vector@@Base+0x24>
   15390:	cmp	r1, r7
   15394:	bne	153c4 <flatcc_builder_create_union_vector@@Base+0xa4>
   15398:	add	r0, sp, #8
   1539c:	str	r1, [sp]
   153a0:	mov	r1, r5
   153a4:	bl	152a8 <flatcc_builder_create_union_vector_direct@@Base>
   153a8:	ldr	r7, [sp, #8]
   153ac:	mov	r0, r5
   153b0:	ldr	r4, [sp, #12]
   153b4:	bl	1323c <test@@Base+0xa58>
   153b8:	str	r7, [r6]
   153bc:	str	r4, [r6, #4]
   153c0:	b	15350 <flatcc_builder_create_union_vector@@Base+0x30>
   153c4:	ldrb	ip, [r8, r1, lsl #3]
   153c8:	strb	ip, [r2, r1]
   153cc:	ldr	ip, [r0, r1, lsl #3]
   153d0:	str	ip, [r3, r1, lsl #2]
   153d4:	add	r1, r1, #1
   153d8:	b	15390 <flatcc_builder_create_union_vector@@Base+0x70>

000153dc <flatcc_builder_start_union_vector@@Base>:
   153dc:	push	{r4, r5, r6, lr}
   153e0:	mov	r1, #4
   153e4:	mov	r5, r0
   153e8:	bl	134a8 <flatcc_builder_default_alloc@@Base+0x168>
   153ec:	subs	r4, r0, #0
   153f0:	mvnne	r4, #0
   153f4:	bne	1541c <flatcc_builder_start_union_vector@@Base+0x40>
   153f8:	ldr	r3, [r5, #32]
   153fc:	mov	r2, #8
   15400:	mvn	r1, #3
   15404:	mov	r0, r5
   15408:	str	r2, [r3, #16]
   1540c:	mov	r2, #7
   15410:	strh	r2, [r3, #14]
   15414:	str	r4, [r3, #20]
   15418:	bl	13178 <test@@Base+0x994>
   1541c:	mov	r0, r4
   15420:	pop	{r4, r5, r6, pc}

00015424 <flatcc_builder_end_union_vector@@Base>:
   15424:	ldr	r3, [r1, #32]
   15428:	push	{r4, r5, r6, r7, lr}
   1542c:	sub	sp, sp, #20
   15430:	ldrh	r2, [r3, #14]
   15434:	cmp	r2, #7
   15438:	beq	15450 <flatcc_builder_end_union_vector@@Base+0x2c>
   1543c:	ldr	r3, [pc, #156]	; 154e0 <flatcc_builder_end_union_vector@@Base+0xbc>
   15440:	movw	r2, #1617	; 0x651
   15444:	ldr	r1, [pc, #152]	; 154e4 <flatcc_builder_end_union_vector@@Base+0xc0>
   15448:	ldr	r0, [pc, #152]	; 154e8 <flatcc_builder_end_union_vector@@Base+0xc4>
   1544c:	bl	124b0 <__assert_fail@plt>
   15450:	ldr	r7, [r3, #20]
   15454:	mov	r4, r0
   15458:	mov	r5, r1
   1545c:	mov	r0, r1
   15460:	lsl	r6, r7, #2
   15464:	add	r1, r6, r7
   15468:	bl	131f4 <test@@Base+0xa10>
   1546c:	subs	r3, r0, #0
   15470:	streq	r3, [r4]
   15474:	streq	r3, [r4, #4]
   15478:	beq	154bc <flatcc_builder_end_union_vector@@Base+0x98>
   1547c:	ldr	r0, [r5, #16]
   15480:	add	r2, r3, r6
   15484:	mov	r1, #0
   15488:	add	ip, r0, #4
   1548c:	cmp	r1, r7
   15490:	bne	154c8 <flatcc_builder_end_union_vector@@Base+0xa4>
   15494:	add	r0, sp, #8
   15498:	str	r1, [sp]
   1549c:	mov	r1, r5
   154a0:	bl	152a8 <flatcc_builder_create_union_vector_direct@@Base>
   154a4:	ldr	r7, [sp, #8]
   154a8:	mov	r0, r5
   154ac:	ldr	r6, [sp, #12]
   154b0:	bl	1323c <test@@Base+0xa58>
   154b4:	str	r7, [r4]
   154b8:	str	r6, [r4, #4]
   154bc:	mov	r0, r4
   154c0:	add	sp, sp, #20
   154c4:	pop	{r4, r5, r6, r7, pc}
   154c8:	ldrb	lr, [r0, r1, lsl #3]
   154cc:	strb	lr, [r2, r1]
   154d0:	ldr	lr, [ip, r1, lsl #3]
   154d4:	str	lr, [r3, r1, lsl #2]
   154d8:	add	r1, r1, #1
   154dc:	b	1548c <flatcc_builder_end_union_vector@@Base+0x68>
   154e0:	andeq	r9, r1, fp, asr sp
   154e4:	ldrdeq	r9, [r1], -r0
   154e8:	andeq	sl, r1, sp, lsr #3

000154ec <flatcc_builder_union_vector_edit@@Base>:
   154ec:	ldr	r0, [r0, #16]
   154f0:	bx	lr

000154f4 <flatcc_builder_union_vector_count@@Base>:
   154f4:	ldr	r3, [r0, #32]
   154f8:	ldr	r0, [r3, #20]
   154fc:	bx	lr

00015500 <flatcc_builder_extend_union_vector@@Base>:
   15500:	push	{r4, r5, r6, lr}
   15504:	mvn	r2, #-536870912	; 0xe0000000
   15508:	mov	r4, r0
   1550c:	mov	r5, r1
   15510:	ldr	r0, [r0, #32]
   15514:	bl	13798 <flatcc_builder_default_alloc@@Base+0x458>
   15518:	cmp	r0, #0
   1551c:	bne	15530 <flatcc_builder_extend_union_vector@@Base+0x30>
   15520:	lsl	r1, r5, #3
   15524:	mov	r0, r4
   15528:	pop	{r4, r5, r6, lr}
   1552c:	b	131f4 <test@@Base+0xa10>
   15530:	mov	r0, #0
   15534:	pop	{r4, r5, r6, pc}

00015538 <flatcc_builder_truncate_union_vector@@Base>:
   15538:	ldr	r3, [r0, #32]
   1553c:	push	{r4, lr}
   15540:	ldrh	r2, [r3, #14]
   15544:	cmp	r2, #7
   15548:	beq	15560 <flatcc_builder_truncate_union_vector@@Base+0x28>
   1554c:	ldr	r3, [pc, #72]	; 1559c <flatcc_builder_truncate_union_vector@@Base+0x64>
   15550:	movw	r2, #1665	; 0x681
   15554:	ldr	r1, [pc, #68]	; 155a0 <flatcc_builder_truncate_union_vector@@Base+0x68>
   15558:	ldr	r0, [pc, #68]	; 155a4 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   1555c:	bl	124b0 <__assert_fail@plt>
   15560:	ldr	r2, [r3, #20]
   15564:	cmp	r2, r1
   15568:	bcs	15580 <flatcc_builder_truncate_union_vector@@Base+0x48>
   1556c:	ldr	r3, [pc, #40]	; 1559c <flatcc_builder_truncate_union_vector@@Base+0x64>
   15570:	movw	r2, #1666	; 0x682
   15574:	ldr	r1, [pc, #36]	; 155a0 <flatcc_builder_truncate_union_vector@@Base+0x68>
   15578:	ldr	r0, [pc, #40]	; 155a8 <flatcc_builder_truncate_union_vector@@Base+0x70>
   1557c:	b	1555c <flatcc_builder_truncate_union_vector@@Base+0x24>
   15580:	sub	r2, r2, r1
   15584:	str	r2, [r3, #20]
   15588:	ldr	r3, [r3, #16]
   1558c:	mul	r1, r3, r1
   15590:	bl	132a4 <test@@Base+0xac0>
   15594:	mov	r0, #0
   15598:	pop	{r4, pc}
   1559c:	andeq	r9, r1, fp, ror sp
   155a0:	ldrdeq	r9, [r1], -r0
   155a4:	andeq	sl, r1, sp, lsr #3
   155a8:	andeq	sl, r1, r6, ror #1

000155ac <flatcc_builder_union_vector_push@@Base>:
   155ac:	push	{r0, r1, r4, lr}
   155b0:	mov	r4, sp
   155b4:	stm	r4, {r1, r2}
   155b8:	ldr	r2, [r0, #32]
   155bc:	ldrh	r3, [r2, #14]
   155c0:	cmp	r3, #7
   155c4:	beq	155dc <flatcc_builder_union_vector_push@@Base+0x30>
   155c8:	ldr	r3, [pc, #68]	; 15614 <flatcc_builder_union_vector_push@@Base+0x68>
   155cc:	movw	r2, #1677	; 0x68d
   155d0:	ldr	r1, [pc, #64]	; 15618 <flatcc_builder_union_vector_push@@Base+0x6c>
   155d4:	ldr	r0, [pc, #64]	; 1561c <flatcc_builder_union_vector_push@@Base+0x70>
   155d8:	bl	124b0 <__assert_fail@plt>
   155dc:	ldr	r3, [r2, #20]
   155e0:	cmn	r3, #-536870911	; 0xe0000001
   155e4:	moveq	r3, #0
   155e8:	beq	15608 <flatcc_builder_union_vector_push@@Base+0x5c>
   155ec:	add	r3, r3, #1
   155f0:	mov	r1, #8
   155f4:	str	r3, [r2, #20]
   155f8:	bl	131f4 <test@@Base+0xa10>
   155fc:	subs	r3, r0, #0
   15600:	ldmne	r4, {r0, r1}
   15604:	stmne	r3, {r0, r1}
   15608:	mov	r0, r3
   1560c:	add	sp, sp, #8
   15610:	pop	{r4, pc}
   15614:	andeq	r9, r1, r0, lsr #27
   15618:	ldrdeq	r9, [r1], -r0
   1561c:	andeq	sl, r1, sp, lsr #3

00015620 <flatcc_builder_append_union_vector@@Base>:
   15620:	push	{r4, r5, r6, lr}
   15624:	mov	r4, r0
   15628:	ldr	r0, [r0, #32]
   1562c:	ldrh	r3, [r0, #14]
   15630:	cmp	r3, #7
   15634:	beq	1564c <flatcc_builder_append_union_vector@@Base+0x2c>
   15638:	ldr	r3, [pc, #68]	; 15684 <flatcc_builder_append_union_vector@@Base+0x64>
   1563c:	movw	r2, #1692	; 0x69c
   15640:	ldr	r1, [pc, #64]	; 15688 <flatcc_builder_append_union_vector@@Base+0x68>
   15644:	ldr	r0, [pc, #64]	; 1568c <flatcc_builder_append_union_vector@@Base+0x6c>
   15648:	bl	124b0 <__assert_fail@plt>
   1564c:	mov	r5, r2
   15650:	mov	r6, r1
   15654:	mvn	r2, #-536870912	; 0xe0000000
   15658:	mov	r1, r5
   1565c:	bl	13798 <flatcc_builder_default_alloc@@Base+0x458>
   15660:	cmp	r0, #0
   15664:	bne	1567c <flatcc_builder_append_union_vector@@Base+0x5c>
   15668:	lsl	r2, r5, #3
   1566c:	mov	r1, r6
   15670:	mov	r0, r4
   15674:	pop	{r4, r5, r6, lr}
   15678:	b	132c4 <test@@Base+0xae0>
   1567c:	mov	r0, #0
   15680:	pop	{r4, r5, r6, pc}
   15684:	andeq	r9, r1, r1, asr #27
   15688:	ldrdeq	r9, [r1], -r0
   1568c:	andeq	sl, r1, sp, lsr #3

00015690 <flatcc_builder_create_string@@Base>:
   15690:	ldr	r3, [r0, #136]	; 0x88
   15694:	mov	ip, #4
   15698:	cmp	r2, #0
   1569c:	push	{lr}		; (str lr, [sp, #-4]!)
   156a0:	sub	sp, sp, #84	; 0x54
   156a4:	add	lr, sp, ip
   156a8:	stmib	sp, {r2, ip}
   156ac:	sub	r3, r3, r2
   156b0:	str	lr, [sp, #16]
   156b4:	sub	r3, r3, #1
   156b8:	str	ip, [sp, #20]
   156bc:	mov	ip, #1
   156c0:	and	r3, r3, #3
   156c4:	add	r3, r3, #1
   156c8:	str	ip, [sp, #12]
   156cc:	beq	156e8 <flatcc_builder_create_string@@Base+0x58>
   156d0:	add	ip, r2, #4
   156d4:	str	r2, [sp, #28]
   156d8:	mov	r2, #2
   156dc:	str	ip, [sp, #8]
   156e0:	str	r2, [sp, #12]
   156e4:	str	r1, [sp, #24]
   156e8:	ldr	r2, [sp, #8]
   156ec:	add	r1, sp, #80	; 0x50
   156f0:	ldr	ip, [pc, #44]	; 15724 <flatcc_builder_create_string@@Base+0x94>
   156f4:	add	r2, r2, r3
   156f8:	str	r2, [sp, #8]
   156fc:	ldr	r2, [sp, #12]
   15700:	add	r2, r2, #1
   15704:	add	r1, r1, r2, lsl #3
   15708:	str	r2, [sp, #12]
   1570c:	str	ip, [r1, #-72]	; 0xffffffb8
   15710:	str	r3, [r1, #-68]	; 0xffffffbc
   15714:	add	r1, sp, #8
   15718:	bl	13720 <flatcc_builder_default_alloc@@Base+0x3e0>
   1571c:	add	sp, sp, #84	; 0x54
   15720:	pop	{pc}		; (ldr pc, [sp], #4)
   15724:	andeq	r9, r1, sl, ror #15

00015728 <flatcc_builder_create_string_str@@Base>:
   15728:	push	{r4, r5, r6, lr}
   1572c:	mov	r5, r0
   15730:	mov	r0, r1
   15734:	mov	r4, r1
   15738:	bl	12450 <strlen@plt>
   1573c:	mov	r2, r0
   15740:	mov	r1, r4
   15744:	mov	r0, r5
   15748:	pop	{r4, r5, r6, lr}
   1574c:	b	15690 <flatcc_builder_create_string@@Base>

00015750 <flatcc_builder_create_string_strn@@Base>:
   15750:	push	{r4, r5, r6, lr}
   15754:	mov	r4, r1
   15758:	mov	r6, r0
   1575c:	mov	r1, #0
   15760:	mov	r0, r4
   15764:	mov	r5, r2
   15768:	bl	1248c <memchr@plt>
   1576c:	cmp	r0, #0
   15770:	mov	r1, r4
   15774:	subne	r5, r0, r4
   15778:	mov	r0, r6
   1577c:	mov	r2, r5
   15780:	pop	{r4, r5, r6, lr}
   15784:	b	15690 <flatcc_builder_create_string@@Base>

00015788 <flatcc_builder_end_string@@Base>:
   15788:	ldr	r3, [r0, #32]
   1578c:	push	{r4, r5, r6, lr}
   15790:	ldrh	r2, [r3, #14]
   15794:	cmp	r2, #6
   15798:	beq	157b0 <flatcc_builder_end_string@@Base+0x28>
   1579c:	ldr	r3, [pc, #84]	; 157f8 <flatcc_builder_end_string@@Base+0x70>
   157a0:	movw	r2, #1732	; 0x6c4
   157a4:	ldr	r1, [pc, #80]	; 157fc <flatcc_builder_end_string@@Base+0x74>
   157a8:	ldr	r0, [pc, #80]	; 15800 <flatcc_builder_end_string@@Base+0x78>
   157ac:	bl	124b0 <__assert_fail@plt>
   157b0:	ldr	r2, [r3, #20]
   157b4:	mov	r4, r0
   157b8:	ldr	r1, [r0, #20]
   157bc:	cmp	r2, r1
   157c0:	beq	157d8 <flatcc_builder_end_string@@Base+0x50>
   157c4:	ldr	r3, [pc, #44]	; 157f8 <flatcc_builder_end_string@@Base+0x70>
   157c8:	movw	r2, #1733	; 0x6c5
   157cc:	ldr	r1, [pc, #40]	; 157fc <flatcc_builder_end_string@@Base+0x74>
   157d0:	ldr	r0, [pc, #44]	; 15804 <flatcc_builder_end_string@@Base+0x7c>
   157d4:	b	157ac <flatcc_builder_end_string@@Base+0x24>
   157d8:	ldr	r1, [r0, #16]
   157dc:	bl	15690 <flatcc_builder_create_string@@Base>
   157e0:	subs	r5, r0, #0
   157e4:	beq	157f0 <flatcc_builder_end_string@@Base+0x68>
   157e8:	mov	r0, r4
   157ec:	bl	1323c <test@@Base+0xa58>
   157f0:	mov	r0, r5
   157f4:	pop	{r4, r5, r6, pc}
   157f8:	andeq	r9, r1, r4, ror #27
   157fc:	ldrdeq	r9, [r1], -r0
   15800:	muleq	r1, r6, r0
   15804:	ldrdeq	sl, [r1], -pc	; <UNPREDICTABLE>

00015808 <flatcc_builder_string_edit@@Base>:
   15808:	ldr	r0, [r0, #16]
   1580c:	bx	lr

00015810 <flatcc_builder_string_len@@Base>:
   15810:	ldr	r3, [r0, #32]
   15814:	ldr	r0, [r3, #20]
   15818:	bx	lr

0001581c <flatcc_builder_table_add@@Base>:
   1581c:	push	{r4, r5, r6, r7, r8, lr}
   15820:	mov	r4, r0
   15824:	ldr	r0, [r0, #32]
   15828:	ldrh	r0, [r0, #14]
   1582c:	cmp	r0, #3
   15830:	beq	15848 <flatcc_builder_table_add@@Base+0x2c>
   15834:	ldr	r3, [pc, #240]	; 1592c <flatcc_builder_table_add@@Base+0x110>
   15838:	movw	r2, #1773	; 0x6ed
   1583c:	ldr	r1, [pc, #236]	; 15930 <flatcc_builder_table_add@@Base+0x114>
   15840:	ldr	r0, [pc, #236]	; 15934 <flatcc_builder_table_add@@Base+0x118>
   15844:	bl	124b0 <__assert_fail@plt>
   15848:	movw	r0, #32764	; 0x7ffc
   1584c:	cmp	r1, r0
   15850:	bls	15868 <flatcc_builder_table_add@@Base+0x4c>
   15854:	ldr	r3, [pc, #208]	; 1592c <flatcc_builder_table_add@@Base+0x110>
   15858:	movw	r2, #1774	; 0x6ee
   1585c:	ldr	r1, [pc, #204]	; 15930 <flatcc_builder_table_add@@Base+0x114>
   15860:	ldr	r0, [pc, #208]	; 15938 <flatcc_builder_table_add@@Base+0x11c>
   15864:	b	15844 <flatcc_builder_table_add@@Base+0x28>
   15868:	ldrh	r0, [r4, #130]	; 0x82
   1586c:	lsl	r7, r1, #1
   15870:	cmp	r0, r3
   15874:	ldr	r0, [r4, #4]
   15878:	strhcc	r3, [r4, #130]	; 0x82
   1587c:	ldrh	r5, [r0, r7]
   15880:	cmp	r5, #0
   15884:	beq	1589c <flatcc_builder_table_add@@Base+0x80>
   15888:	ldr	r3, [pc, #156]	; 1592c <flatcc_builder_table_add@@Base+0x110>
   1588c:	movw	r2, #1784	; 0x6f8
   15890:	ldr	r1, [pc, #152]	; 15930 <flatcc_builder_table_add@@Base+0x114>
   15894:	ldr	r0, [pc, #160]	; 1593c <flatcc_builder_table_add@@Base+0x120>
   15898:	b	15844 <flatcc_builder_table_add@@Base+0x28>
   1589c:	ldr	ip, [r4, #12]
   158a0:	sub	r0, r3, #1
   158a4:	rsb	r3, r3, #0
   158a8:	uxth	r8, r1
   158ac:	ldr	lr, [pc, #140]	; 15940 <flatcc_builder_table_add@@Base+0x124>
   158b0:	ldr	r6, [r4, #20]
   158b4:	eor	ip, ip, r1
   158b8:	mul	ip, lr, ip
   158bc:	add	r0, r0, r6
   158c0:	and	r6, r0, r3
   158c4:	ldr	r3, [r4, #24]
   158c8:	eor	ip, ip, r2
   158cc:	add	r1, r2, r6
   158d0:	mul	ip, lr, ip
   158d4:	cmp	r1, r3
   158d8:	str	ip, [r4, #12]
   158dc:	str	r1, [r4, #20]
   158e0:	bcs	1590c <flatcc_builder_table_add@@Base+0xf0>
   158e4:	ldr	r3, [r4, #4]
   158e8:	add	r2, r6, #4
   158ec:	ldr	r0, [r4, #16]
   158f0:	strh	r2, [r3, r7]
   158f4:	ldrh	r3, [r4, #8]
   158f8:	add	r0, r0, r6
   158fc:	cmp	r3, r8
   15900:	addls	r1, r8, #1
   15904:	strhls	r1, [r4, #8]
   15908:	pop	{r4, r5, r6, r7, r8, pc}
   1590c:	movw	r2, #65532	; 0xfffc
   15910:	add	r1, r1, #1
   15914:	mov	r0, r4
   15918:	bl	131a4 <test@@Base+0x9c0>
   1591c:	cmp	r0, #0
   15920:	beq	158e4 <flatcc_builder_table_add@@Base+0xc8>
   15924:	mov	r0, r5
   15928:	pop	{r4, r5, r6, r7, r8, pc}
   1592c:	strdeq	r9, [r1], -lr
   15930:	ldrdeq	r9, [r1], -r0
   15934:	andeq	sl, r1, pc, ror #2
   15938:	andeq	sl, r1, r3, lsl #4
   1593c:	andeq	r9, r1, sp, lsr pc
   15940:			; <UNDEFINED> instruction: 0x9e3779b1

00015944 <flatcc_builder_table_edit@@Base>:
   15944:	ldr	r3, [r0, #32]
   15948:	ldrh	r3, [r3, #14]
   1594c:	cmp	r3, #3
   15950:	beq	1596c <flatcc_builder_table_edit@@Base+0x28>
   15954:	push	{r4, lr}
   15958:	movw	r2, #1794	; 0x702
   1595c:	ldr	r3, [pc, #28]	; 15980 <flatcc_builder_table_edit@@Base+0x3c>
   15960:	ldr	r1, [pc, #28]	; 15984 <flatcc_builder_table_edit@@Base+0x40>
   15964:	ldr	r0, [pc, #28]	; 15988 <flatcc_builder_table_edit@@Base+0x44>
   15968:	bl	124b0 <__assert_fail@plt>
   1596c:	ldr	r3, [r0, #20]
   15970:	ldr	r0, [r0, #16]
   15974:	sub	r3, r3, r1
   15978:	add	r0, r0, r3
   1597c:	bx	lr
   15980:	andeq	r9, r1, r7, lsl lr
   15984:	ldrdeq	r9, [r1], -r0
   15988:	andeq	sl, r1, pc, ror #2

0001598c <flatcc_builder_table_add_copy@@Base>:
   1598c:	push	{r4, r5, r6, lr}
   15990:	mov	r4, r3
   15994:	mov	r6, r2
   15998:	mov	r2, r4
   1599c:	ldrh	r3, [sp, #16]
   159a0:	bl	1581c <flatcc_builder_table_add@@Base>
   159a4:	subs	r5, r0, #0
   159a8:	beq	159b8 <flatcc_builder_table_add_copy@@Base+0x2c>
   159ac:	mov	r2, r4
   159b0:	mov	r1, r6
   159b4:	bl	12408 <memcpy@plt>
   159b8:	mov	r0, r5
   159bc:	pop	{r4, r5, r6, pc}

000159c0 <flatcc_builder_table_add_offset@@Base>:
   159c0:	ldr	r3, [r0, #32]
   159c4:	push	{r4, r5, r6, r7, r8, lr}
   159c8:	ldrh	r3, [r3, #14]
   159cc:	cmp	r3, #3
   159d0:	beq	159e8 <flatcc_builder_table_add_offset@@Base+0x28>
   159d4:	ldr	r3, [pc, #236]	; 15ac8 <flatcc_builder_table_add_offset@@Base+0x108>
   159d8:	movw	r2, #1811	; 0x713
   159dc:	ldr	r1, [pc, #232]	; 15acc <flatcc_builder_table_add_offset@@Base+0x10c>
   159e0:	ldr	r0, [pc, #232]	; 15ad0 <flatcc_builder_table_add_offset@@Base+0x110>
   159e4:	bl	124b0 <__assert_fail@plt>
   159e8:	movw	r3, #32764	; 0x7ffc
   159ec:	cmp	r1, r3
   159f0:	bls	15a08 <flatcc_builder_table_add_offset@@Base+0x48>
   159f4:	ldr	r3, [pc, #204]	; 15ac8 <flatcc_builder_table_add_offset@@Base+0x108>
   159f8:	movw	r2, #1812	; 0x714
   159fc:	ldr	r1, [pc, #200]	; 15acc <flatcc_builder_table_add_offset@@Base+0x10c>
   15a00:	ldr	r0, [pc, #204]	; 15ad4 <flatcc_builder_table_add_offset@@Base+0x114>
   15a04:	b	159e4 <flatcc_builder_table_add_offset@@Base+0x24>
   15a08:	ldr	r3, [r0, #4]
   15a0c:	lsl	r7, r1, #1
   15a10:	mov	r4, r0
   15a14:	ldrh	r6, [r3, r7]
   15a18:	cmp	r6, #0
   15a1c:	beq	15a34 <flatcc_builder_table_add_offset@@Base+0x74>
   15a20:	ldr	r3, [pc, #160]	; 15ac8 <flatcc_builder_table_add_offset@@Base+0x108>
   15a24:	movw	r2, #1819	; 0x71b
   15a28:	ldr	r1, [pc, #156]	; 15acc <flatcc_builder_table_add_offset@@Base+0x10c>
   15a2c:	ldr	r0, [pc, #164]	; 15ad8 <flatcc_builder_table_add_offset@@Base+0x118>
   15a30:	b	159e4 <flatcc_builder_table_add_offset@@Base+0x24>
   15a34:	ldr	r3, [r0, #12]
   15a38:	uxth	r5, r1
   15a3c:	ldr	r2, [pc, #152]	; 15adc <flatcc_builder_table_add_offset@@Base+0x11c>
   15a40:	ldr	r8, [r0, #20]
   15a44:	eor	r3, r3, r1
   15a48:	mul	r3, r2, r3
   15a4c:	add	r8, r8, #3
   15a50:	eor	r3, r3, #4
   15a54:	bic	r8, r8, #3
   15a58:	add	r1, r8, #4
   15a5c:	mul	r3, r2, r3
   15a60:	str	r3, [r0, #12]
   15a64:	ldr	r3, [r0, #24]
   15a68:	str	r1, [r0, #20]
   15a6c:	cmp	r1, r3
   15a70:	bhi	15ab0 <flatcc_builder_table_add_offset@@Base+0xf0>
   15a74:	ldr	r3, [r4, #4]
   15a78:	uxth	r2, r8
   15a7c:	add	r1, r2, #4
   15a80:	ldr	r0, [r4, #16]
   15a84:	strh	r1, [r3, r7]
   15a88:	ldrh	r3, [r4, #8]
   15a8c:	add	r0, r0, r8
   15a90:	cmp	r3, r5
   15a94:	ldr	r3, [r4]
   15a98:	addls	r1, r5, #1
   15a9c:	strhls	r1, [r4, #8]
   15aa0:	add	r1, r3, #2
   15aa4:	str	r1, [r4]
   15aa8:	strh	r2, [r3]
   15aac:	pop	{r4, r5, r6, r7, r8, pc}
   15ab0:	movw	r2, #65532	; 0xfffc
   15ab4:	bl	131a4 <test@@Base+0x9c0>
   15ab8:	cmp	r0, #0
   15abc:	beq	15a74 <flatcc_builder_table_add_offset@@Base+0xb4>
   15ac0:	mov	r0, r6
   15ac4:	pop	{r4, r5, r6, r7, r8, pc}
   15ac8:	andeq	r9, r1, r1, lsr lr
   15acc:	ldrdeq	r9, [r1], -r0
   15ad0:	andeq	sl, r1, pc, ror #2
   15ad4:	andeq	sl, r1, r3, lsl #4
   15ad8:	andeq	r9, r1, sp, lsr pc
   15adc:			; <UNDEFINED> instruction: 0x9e3779b1

00015ae0 <flatcc_builder_table_add_union@@Base>:
   15ae0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15ae4:	add	ip, sp, #8
   15ae8:	stmdb	ip, {r2, r3}
   15aec:	ldr	r3, [r0, #32]
   15af0:	ldrb	r5, [sp]
   15af4:	ldr	r4, [sp, #4]
   15af8:	ldrh	r3, [r3, #14]
   15afc:	cmp	r3, #3
   15b00:	beq	15b18 <flatcc_builder_table_add_union@@Base+0x38>
   15b04:	ldr	r3, [pc, #164]	; 15bb0 <flatcc_builder_table_add_union@@Base+0xd0>
   15b08:	movw	r2, #1518	; 0x5ee
   15b0c:	ldr	r1, [pc, #160]	; 15bb4 <flatcc_builder_table_add_union@@Base+0xd4>
   15b10:	ldr	r0, [pc, #160]	; 15bb8 <flatcc_builder_table_add_union@@Base+0xd8>
   15b14:	bl	124b0 <__assert_fail@plt>
   15b18:	cmp	r5, #0
   15b1c:	mov	r6, r0
   15b20:	mov	r7, r1
   15b24:	bne	15b44 <flatcc_builder_table_add_union@@Base+0x64>
   15b28:	cmp	r4, #0
   15b2c:	beq	15b70 <flatcc_builder_table_add_union@@Base+0x90>
   15b30:	ldr	r3, [pc, #120]	; 15bb0 <flatcc_builder_table_add_union@@Base+0xd0>
   15b34:	movw	r2, #1519	; 0x5ef
   15b38:	ldr	r1, [pc, #116]	; 15bb4 <flatcc_builder_table_add_union@@Base+0xd4>
   15b3c:	ldr	r0, [pc, #120]	; 15bbc <flatcc_builder_table_add_union@@Base+0xdc>
   15b40:	b	15b14 <flatcc_builder_table_add_union@@Base+0x34>
   15b44:	cmp	r4, #0
   15b48:	beq	15b70 <flatcc_builder_table_add_union@@Base+0x90>
   15b4c:	bl	159c0 <flatcc_builder_table_add_offset@@Base>
   15b50:	cmp	r0, #0
   15b54:	strne	r4, [r0]
   15b58:	bne	15b70 <flatcc_builder_table_add_union@@Base+0x90>
   15b5c:	ldr	r3, [pc, #76]	; 15bb0 <flatcc_builder_table_add_union@@Base+0xd0>
   15b60:	movw	r2, #1522	; 0x5f2
   15b64:	ldr	r1, [pc, #72]	; 15bb4 <flatcc_builder_table_add_union@@Base+0xd4>
   15b68:	ldr	r0, [pc, #80]	; 15bc0 <flatcc_builder_table_add_union@@Base+0xe0>
   15b6c:	b	15b14 <flatcc_builder_table_add_union@@Base+0x34>
   15b70:	mov	r3, #1
   15b74:	sub	r1, r7, #1
   15b78:	mov	r2, r3
   15b7c:	mov	r0, r6
   15b80:	bl	1581c <flatcc_builder_table_add@@Base>
   15b84:	cmp	r0, #0
   15b88:	bne	15ba0 <flatcc_builder_table_add_union@@Base+0xc0>
   15b8c:	ldr	r3, [pc, #28]	; 15bb0 <flatcc_builder_table_add_union@@Base+0xd0>
   15b90:	movw	r2, #1526	; 0x5f6
   15b94:	ldr	r1, [pc, #24]	; 15bb4 <flatcc_builder_table_add_union@@Base+0xd4>
   15b98:	ldr	r0, [pc, #36]	; 15bc4 <flatcc_builder_table_add_union@@Base+0xe4>
   15b9c:	b	15b14 <flatcc_builder_table_add_union@@Base+0x34>
   15ba0:	strb	r5, [r0]
   15ba4:	mov	r0, #0
   15ba8:	add	sp, sp, #12
   15bac:	pop	{r4, r5, r6, r7, pc}
   15bb0:	andeq	r9, r1, r1, asr lr
   15bb4:	ldrdeq	r9, [r1], -r0
   15bb8:	andeq	sl, r1, pc, ror #2
   15bbc:	andeq	sl, r1, r7, asr #4
   15bc0:	andeq	sl, r1, r9, ror #4
   15bc4:	andeq	sl, r1, r3, ror r2

00015bc8 <flatcc_builder_table_add_union_vector@@Base>:
   15bc8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15bcc:	mov	r7, r1
   15bd0:	add	r1, sp, #8
   15bd4:	stmdb	r1, {r2, r3}
   15bd8:	ldr	r3, [r0, #32]
   15bdc:	ldrd	r4, [sp]
   15be0:	ldrh	r3, [r3, #14]
   15be4:	cmp	r3, #3
   15be8:	beq	15c00 <flatcc_builder_table_add_union_vector@@Base+0x38>
   15bec:	ldr	r3, [pc, #176]	; 15ca4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15bf0:	mov	r2, #1536	; 0x600
   15bf4:	ldr	r1, [pc, #172]	; 15ca8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15bf8:	ldr	r0, [pc, #172]	; 15cac <flatcc_builder_table_add_union_vector@@Base+0xe4>
   15bfc:	bl	124b0 <__assert_fail@plt>
   15c00:	clz	r3, r5
   15c04:	clz	r2, r4
   15c08:	lsr	r3, r3, #5
   15c0c:	lsr	r2, r2, #5
   15c10:	cmp	r2, r3
   15c14:	beq	15c40 <flatcc_builder_table_add_union_vector@@Base+0x78>
   15c18:	adds	r4, r4, #0
   15c1c:	movne	r4, #1
   15c20:	cmp	r4, r3
   15c24:	mvnne	r4, #0
   15c28:	bne	15c98 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   15c2c:	ldr	r3, [pc, #112]	; 15ca4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15c30:	movw	r2, #1537	; 0x601
   15c34:	ldr	r1, [pc, #108]	; 15ca8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15c38:	ldr	r0, [pc, #112]	; 15cb0 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   15c3c:	b	15bfc <flatcc_builder_table_add_union_vector@@Base+0x34>
   15c40:	cmp	r4, #0
   15c44:	beq	15c98 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   15c48:	sub	r1, r7, #1
   15c4c:	mov	r6, r0
   15c50:	bl	159c0 <flatcc_builder_table_add_offset@@Base>
   15c54:	cmp	r0, #0
   15c58:	ldreq	r3, [pc, #68]	; 15ca4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15c5c:	movweq	r2, #1540	; 0x604
   15c60:	beq	15c8c <flatcc_builder_table_add_union_vector@@Base+0xc4>
   15c64:	mov	r1, r7
   15c68:	str	r4, [r0]
   15c6c:	mov	r0, r6
   15c70:	bl	159c0 <flatcc_builder_table_add_offset@@Base>
   15c74:	cmp	r0, #0
   15c78:	movne	r4, #0
   15c7c:	strne	r5, [r0]
   15c80:	bne	15c98 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   15c84:	ldr	r3, [pc, #24]	; 15ca4 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15c88:	movw	r2, #1544	; 0x608
   15c8c:	ldr	r1, [pc, #20]	; 15ca8 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15c90:	ldr	r0, [pc, #28]	; 15cb4 <flatcc_builder_table_add_union_vector@@Base+0xec>
   15c94:	b	15bfc <flatcc_builder_table_add_union_vector@@Base+0x34>
   15c98:	mov	r0, r4
   15c9c:	add	sp, sp, #12
   15ca0:	pop	{r4, r5, r6, r7, pc}
   15ca4:	andeq	r9, r1, r0, ror lr
   15ca8:	ldrdeq	r9, [r1], -r0
   15cac:	andeq	sl, r1, pc, ror #2
   15cb0:	andeq	sl, r1, pc, ror r2
   15cb4:	andeq	sl, r1, r9, ror #4

00015cb8 <flatcc_builder_push_buffer_alignment@@Base>:
   15cb8:	mov	r3, r0
   15cbc:	mov	r2, #4
   15cc0:	ldrh	r0, [r0, #128]	; 0x80
   15cc4:	strh	r2, [r3, #128]	; 0x80
   15cc8:	bx	lr

00015ccc <flatcc_builder_pop_buffer_alignment@@Base>:
   15ccc:	ldrh	r3, [r0, #128]	; 0x80
   15cd0:	cmp	r3, r1
   15cd4:	strhcc	r1, [r0, #128]	; 0x80
   15cd8:	bx	lr

00015cdc <flatcc_builder_get_buffer_alignment@@Base>:
   15cdc:	ldrh	r0, [r0, #128]	; 0x80
   15ce0:	bx	lr

00015ce4 <flatcc_builder_set_vtable_clustering@@Base>:
   15ce4:	clz	r1, r1
   15ce8:	lsr	r1, r1, #5
   15cec:	str	r1, [r0, #180]	; 0xb4
   15cf0:	bx	lr

00015cf4 <flatcc_builder_set_block_align@@Base>:
   15cf4:	strh	r1, [r0, #132]	; 0x84
   15cf8:	bx	lr

00015cfc <flatcc_builder_get_level@@Base>:
   15cfc:	ldr	r0, [r0, #156]	; 0x9c
   15d00:	bx	lr

00015d04 <flatcc_builder_set_max_level@@Base>:
   15d04:	ldr	r3, [r0, #160]	; 0xa0
   15d08:	str	r1, [r0, #176]	; 0xb0
   15d0c:	cmp	r3, r1
   15d10:	strlt	r1, [r0, #160]	; 0xa0
   15d14:	bx	lr

00015d18 <flatcc_builder_get_buffer_size@@Base>:
   15d18:	ldr	r2, [r0, #140]	; 0x8c
   15d1c:	ldr	r0, [r0, #136]	; 0x88
   15d20:	sub	r0, r2, r0
   15d24:	bx	lr

00015d28 <flatcc_builder_get_buffer_start@@Base>:
   15d28:	ldr	r0, [r0, #136]	; 0x88
   15d2c:	bx	lr

00015d30 <flatcc_builder_get_buffer_end@@Base>:
   15d30:	ldr	r0, [r0, #140]	; 0x8c
   15d34:	bx	lr

00015d38 <flatcc_builder_set_vtable_cache_limit@@Base>:
   15d38:	str	r1, [r0, #172]	; 0xac
   15d3c:	bx	lr

00015d40 <flatcc_builder_set_identifier@@Base>:
   15d40:	ldr	r3, [pc, #16]	; 15d58 <flatcc_builder_set_identifier@@Base+0x18>
   15d44:	cmp	r1, #0
   15d48:	moveq	r1, r3
   15d4c:	ldr	r3, [r1]
   15d50:	str	r3, [r0, #168]	; 0xa8
   15d54:	bx	lr
   15d58:	andeq	r9, r1, sl, ror #15

00015d5c <flatcc_builder_get_type@@Base>:
   15d5c:	ldr	r0, [r0, #32]
   15d60:	cmp	r0, #0
   15d64:	ldrhne	r0, [r0, #14]
   15d68:	bx	lr

00015d6c <flatcc_builder_get_type_at@@Base>:
   15d6c:	cmp	r1, #0
   15d70:	ble	15d98 <flatcc_builder_get_type_at@@Base+0x2c>
   15d74:	ldr	r3, [r0, #156]	; 0x9c
   15d78:	cmp	r3, r1
   15d7c:	blt	15d98 <flatcc_builder_get_type_at@@Base+0x2c>
   15d80:	sub	r1, r1, r3
   15d84:	ldr	r3, [r0, #32]
   15d88:	mov	r2, #36	; 0x24
   15d8c:	mla	r1, r2, r1, r3
   15d90:	ldrh	r0, [r1, #14]
   15d94:	bx	lr
   15d98:	mov	r0, #0
   15d9c:	bx	lr

00015da0 <flatcc_builder_get_direct_buffer@@Base>:
   15da0:	ldr	r3, [r0, #184]	; 0xb8
   15da4:	cmp	r3, #0
   15da8:	beq	15dd0 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15dac:	ldrd	r2, [r0, #188]	; 0xbc
   15db0:	cmp	r2, r3
   15db4:	bne	15dd0 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15db8:	cmp	r1, #0
   15dbc:	ldrne	r3, [r0, #212]	; 0xd4
   15dc0:	strne	r3, [r1]
   15dc4:	ldr	r1, [r0, #196]	; 0xc4
   15dc8:	mov	r0, r1
   15dcc:	bx	lr
   15dd0:	cmp	r1, #0
   15dd4:	movne	r3, #0
   15dd8:	strne	r3, [r1]
   15ddc:	movne	r1, r3
   15de0:	b	15dc8 <flatcc_builder_get_direct_buffer@@Base+0x28>

00015de4 <flatcc_builder_copy_buffer@@Base>:
   15de4:	ldr	r3, [r0, #184]	; 0xb8
   15de8:	cmp	r3, #0
   15dec:	beq	15e18 <flatcc_builder_copy_buffer@@Base+0x34>
   15df0:	push	{r4, lr}
   15df4:	add	r0, r0, #188	; 0xbc
   15df8:	bl	1638c <flatcc_emitter_copy_buffer@@Base>
   15dfc:	cmp	r0, #0
   15e00:	popne	{r4, pc}
   15e04:	ldr	r3, [pc, #20]	; 15e20 <flatcc_builder_copy_buffer@@Base+0x3c>
   15e08:	movw	r2, #1926	; 0x786
   15e0c:	ldr	r1, [pc, #16]	; 15e24 <flatcc_builder_copy_buffer@@Base+0x40>
   15e10:	ldr	r0, [pc, #16]	; 15e28 <flatcc_builder_copy_buffer@@Base+0x44>
   15e14:	bl	124b0 <__assert_fail@plt>
   15e18:	mov	r0, r3
   15e1c:	bx	lr
   15e20:	muleq	r1, r6, lr
   15e24:	ldrdeq	r9, [r1], -r0
   15e28:	andeq	r9, r1, r7, asr #31

00015e2c <flatcc_builder_finalize_buffer@@Base>:
   15e2c:	push	{r4, r5, r6, lr}
   15e30:	cmp	r1, #0
   15e34:	mov	r5, r0
   15e38:	ldr	r2, [r0, #136]	; 0x88
   15e3c:	ldr	r4, [r0, #140]	; 0x8c
   15e40:	sub	r4, r4, r2
   15e44:	mov	r0, r4
   15e48:	strne	r4, [r1]
   15e4c:	bl	1242c <malloc@plt>
   15e50:	subs	r6, r0, #0
   15e54:	ldreq	r3, [pc, #56]	; 15e94 <flatcc_builder_finalize_buffer@@Base+0x68>
   15e58:	movweq	r2, #1944	; 0x798
   15e5c:	beq	15e80 <flatcc_builder_finalize_buffer@@Base+0x54>
   15e60:	mov	r2, r4
   15e64:	mov	r1, r6
   15e68:	mov	r0, r5
   15e6c:	bl	15de4 <flatcc_builder_copy_buffer@@Base>
   15e70:	cmp	r0, #0
   15e74:	bne	15e8c <flatcc_builder_finalize_buffer@@Base+0x60>
   15e78:	ldr	r3, [pc, #20]	; 15e94 <flatcc_builder_finalize_buffer@@Base+0x68>
   15e7c:	movw	r2, #1948	; 0x79c
   15e80:	ldr	r1, [pc, #16]	; 15e98 <flatcc_builder_finalize_buffer@@Base+0x6c>
   15e84:	ldr	r0, [pc, #16]	; 15e9c <flatcc_builder_finalize_buffer@@Base+0x70>
   15e88:	bl	124b0 <__assert_fail@plt>
   15e8c:	mov	r0, r6
   15e90:	pop	{r4, r5, r6, pc}
   15e94:			; <UNDEFINED> instruction: 0x00019eb1
   15e98:	ldrdeq	r9, [r1], -r0
   15e9c:	andeq	r9, r1, sp, lsr pc

00015ea0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   15ea0:	push	{r4, r5, r6, r7, r8, lr}
   15ea4:	mov	r6, r0
   15ea8:	subs	r7, r1, #0
   15eac:	ldr	r2, [r0, #136]	; 0x88
   15eb0:	ldr	r4, [r0, #140]	; 0x8c
   15eb4:	ldrh	r0, [r0, #128]	; 0x80
   15eb8:	sub	r2, r4, r2
   15ebc:	sub	r4, r0, #1
   15ec0:	strne	r2, [r7]
   15ec4:	add	r4, r4, r2
   15ec8:	rsb	r2, r0, #0
   15ecc:	and	r4, r4, r2
   15ed0:	mov	r1, r4
   15ed4:	bl	132f4 <test@@Base+0xb10>
   15ed8:	subs	r5, r0, #0
   15edc:	beq	15f04 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15ee0:	mov	r2, r4
   15ee4:	mov	r1, r5
   15ee8:	mov	r0, r6
   15eec:	bl	15de4 <flatcc_builder_copy_buffer@@Base>
   15ef0:	subs	r4, r0, #0
   15ef4:	bne	15f04 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15ef8:	mov	r0, r5
   15efc:	mov	r5, r4
   15f00:	bl	123fc <free@plt>
   15f04:	adds	r3, r7, #0
   15f08:	mov	r0, r5
   15f0c:	movne	r3, #1
   15f10:	cmp	r5, #0
   15f14:	movne	r3, #0
   15f18:	cmp	r3, #0
   15f1c:	movne	r3, #0
   15f20:	strne	r3, [r7]
   15f24:	pop	{r4, r5, r6, r7, r8, pc}

00015f28 <flatcc_builder_aligned_alloc@@Base>:
   15f28:	b	132f4 <test@@Base+0xb10>

00015f2c <flatcc_builder_aligned_free@@Base>:
   15f2c:	b	123fc <free@plt>

00015f30 <flatcc_builder_get_emit_context@@Base>:
   15f30:	ldr	r0, [r0, #36]	; 0x24
   15f34:	bx	lr

00015f38 <flatcc_emitter_recycle_page@@Base>:
   15f38:	ldr	r3, [r0]
   15f3c:	cmp	r3, r1
   15f40:	beq	15f80 <flatcc_emitter_recycle_page@@Base+0x48>
   15f44:	ldr	r2, [r0, #4]
   15f48:	cmp	r2, r1
   15f4c:	beq	15f80 <flatcc_emitter_recycle_page@@Base+0x48>
   15f50:	ldr	r0, [r1, #2944]	; 0xb80
   15f54:	ldr	r2, [r1, #2948]	; 0xb84
   15f58:	str	r2, [r0, #2948]	; 0xb84
   15f5c:	str	r0, [r2, #2944]	; 0xb80
   15f60:	mov	r0, #0
   15f64:	ldr	r2, [r3, #2948]	; 0xb84
   15f68:	str	r3, [r1, #2944]	; 0xb80
   15f6c:	str	r2, [r1, #2948]	; 0xb84
   15f70:	str	r1, [r2, #2944]	; 0xb80
   15f74:	ldr	r3, [r1, #2944]	; 0xb80
   15f78:	str	r1, [r3, #2948]	; 0xb84
   15f7c:	bx	lr
   15f80:	mvn	r0, #0
   15f84:	bx	lr

00015f88 <flatcc_emitter_reset@@Base>:
   15f88:	ldr	r3, [r0]
   15f8c:	cmp	r3, #0
   15f90:	bxeq	lr
   15f94:	add	r2, r3, #1472	; 0x5c0
   15f98:	push	{r4, lr}
   15f9c:	mov	r4, r0
   15fa0:	str	r3, [r0, #4]
   15fa4:	str	r2, [r0, #8]
   15fa8:	str	r2, [r0, #16]
   15fac:	mov	r2, #1472	; 0x5c0
   15fb0:	str	r2, [r0, #12]
   15fb4:	str	r2, [r0, #20]
   15fb8:	sub	r2, r2, #2944	; 0xb80
   15fbc:	str	r2, [r3, #2952]	; 0xb88
   15fc0:	ldr	r3, [r0, #24]
   15fc4:	ldr	r2, [r0, #32]
   15fc8:	cmp	r2, #0
   15fcc:	streq	r3, [r0, #32]
   15fd0:	lsr	r3, r3, #2
   15fd4:	ldr	r2, [r0, #32]
   15fd8:	add	r2, r2, r2, lsl #1
   15fdc:	add	r3, r3, r2, lsr #2
   15fe0:	str	r3, [r0, #32]
   15fe4:	mov	r3, #0
   15fe8:	str	r3, [r0, #24]
   15fec:	ldr	r3, [r4, #28]
   15ff0:	ldr	r2, [r4, #32]
   15ff4:	cmp	r3, r2, lsl #1
   15ff8:	popls	{r4, pc}
   15ffc:	ldrd	r2, [r4]
   16000:	ldr	r0, [r3, #2944]	; 0xb80
   16004:	cmp	r0, r2
   16008:	popeq	{r4, pc}
   1600c:	ldr	r2, [r0, #2944]	; 0xb80
   16010:	str	r2, [r3, #2944]	; 0xb80
   16014:	ldr	r2, [r0, #2944]	; 0xb80
   16018:	str	r3, [r2, #2948]	; 0xb84
   1601c:	bl	123fc <free@plt>
   16020:	ldr	r3, [r4, #28]
   16024:	sub	r3, r3, #2944	; 0xb80
   16028:	str	r3, [r4, #28]
   1602c:	b	15fec <flatcc_emitter_reset@@Base+0x64>

00016030 <flatcc_emitter_clear@@Base>:
   16030:	ldr	r3, [r0]
   16034:	cmp	r3, #0
   16038:	bxeq	lr
   1603c:	push	{r4, r5, r6, lr}
   16040:	mov	r1, #0
   16044:	mov	r4, r0
   16048:	ldr	r2, [r3, #2948]	; 0xb84
   1604c:	str	r1, [r2, #2944]	; 0xb80
   16050:	ldr	r5, [r3, #2944]	; 0xb80
   16054:	cmp	r5, #0
   16058:	bne	16078 <flatcc_emitter_clear@@Base+0x48>
   1605c:	mov	r0, r3
   16060:	bl	123fc <free@plt>
   16064:	mov	r1, r5
   16068:	mov	r0, r4
   1606c:	pop	{r4, r5, r6, lr}
   16070:	mov	r2, #36	; 0x24
   16074:	b	12474 <memset@plt>
   16078:	ldr	r0, [r5, #2948]	; 0xb84
   1607c:	bl	123fc <free@plt>
   16080:	mov	r3, r5
   16084:	b	16050 <flatcc_emitter_clear@@Base+0x20>

00016088 <flatcc_emitter@@Base>:
   16088:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1608c:	mov	r4, r0
   16090:	mov	r6, r2
   16094:	cmp	r3, #0
   16098:	ldr	r0, [r0, #24]
   1609c:	ldr	r2, [sp, #40]	; 0x28
   160a0:	add	r0, r0, r2
   160a4:	str	r0, [r4, #24]
   160a8:	bge	16240 <flatcc_emitter@@Base+0x1b8>
   160ac:	ldr	r0, [r4, #12]
   160b0:	cmp	r0, r2
   160b4:	bcc	160f8 <flatcc_emitter@@Base+0x70>
   160b8:	ldr	r3, [r4, #8]
   160bc:	sub	r3, r3, r2
   160c0:	sub	r2, r0, r2
   160c4:	str	r3, [r4, #8]
   160c8:	str	r2, [r4, #12]
   160cc:	mov	r4, r1
   160d0:	sub	r6, r6, #1
   160d4:	add	r4, r4, #8
   160d8:	cmn	r6, #1
   160dc:	beq	1610c <flatcc_emitter@@Base+0x84>
   160e0:	mov	r0, r3
   160e4:	ldmdb	r4, {r1, r2}
   160e8:	bl	12408 <memcpy@plt>
   160ec:	ldr	r2, [r4, #-4]
   160f0:	add	r3, r0, r2
   160f4:	b	160d0 <flatcc_emitter@@Base+0x48>
   160f8:	ldr	r9, [pc, #648]	; 16388 <flatcc_emitter@@Base+0x300>
   160fc:	add	r5, r1, r6, lsl #3
   16100:	mov	r8, #2944	; 0xb80
   16104:	cmp	r6, #0
   16108:	bne	16114 <flatcc_emitter@@Base+0x8c>
   1610c:	mov	r0, #0
   16110:	b	161ac <flatcc_emitter@@Base+0x124>
   16114:	ldr	sl, [r5, #-8]
   16118:	ldr	r7, [r5, #-4]
   1611c:	add	sl, sl, r7
   16120:	cmp	r7, #0
   16124:	subeq	r5, r5, #8
   16128:	subeq	r6, r6, #1
   1612c:	beq	16104 <flatcc_emitter@@Base+0x7c>
   16130:	ldr	r3, [r4, #12]
   16134:	cmp	r3, r7
   16138:	bcs	16210 <flatcc_emitter@@Base+0x188>
   1613c:	cmp	r3, #0
   16140:	movne	r2, r3
   16144:	bne	16214 <flatcc_emitter@@Base+0x18c>
   16148:	ldr	fp, [r4]
   1614c:	cmp	fp, #0
   16150:	beq	16198 <flatcc_emitter@@Base+0x110>
   16154:	ldr	r2, [r4, #4]
   16158:	ldr	r3, [fp, #2948]	; 0xb84
   1615c:	cmp	r3, r2
   16160:	beq	16198 <flatcc_emitter@@Base+0x110>
   16164:	ldr	r2, [fp, #2952]	; 0xb88
   16168:	sub	r2, r2, #2944	; 0xb80
   1616c:	str	r2, [r3, #2952]	; 0xb88
   16170:	str	r3, [r4]
   16174:	ldr	r3, [r4]
   16178:	str	r8, [r4, #12]
   1617c:	add	r2, r3, #2944	; 0xb80
   16180:	str	r2, [r4, #8]
   16184:	ldr	r2, [r3, #2944]	; 0xb80
   16188:	ldr	r2, [r2, #2952]	; 0xb88
   1618c:	sub	r2, r2, #2944	; 0xb80
   16190:	str	r2, [r3, #2952]	; 0xb88
   16194:	b	16120 <flatcc_emitter@@Base+0x98>
   16198:	movw	r0, #2956	; 0xb8c
   1619c:	bl	1242c <malloc@plt>
   161a0:	cmp	r0, #0
   161a4:	bne	161b4 <flatcc_emitter@@Base+0x12c>
   161a8:	mvn	r0, #0
   161ac:	add	sp, sp, #4
   161b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161b4:	ldr	r3, [r4, #28]
   161b8:	cmp	fp, #0
   161bc:	add	r3, r3, #2944	; 0xb80
   161c0:	str	r3, [r4, #28]
   161c4:	beq	161e4 <flatcc_emitter@@Base+0x15c>
   161c8:	ldr	r3, [r4, #4]
   161cc:	str	fp, [r0, #2944]	; 0xb80
   161d0:	str	r3, [r0, #2948]	; 0xb84
   161d4:	str	r0, [fp, #2948]	; 0xb84
   161d8:	str	r0, [r3, #2944]	; 0xb80
   161dc:	str	r0, [r4]
   161e0:	b	16174 <flatcc_emitter@@Base+0xec>
   161e4:	add	r3, r0, #1472	; 0x5c0
   161e8:	str	r0, [r4]
   161ec:	str	r0, [r0, #2944]	; 0xb80
   161f0:	stmib	r4, {r0, r3}
   161f4:	str	r3, [r4, #16]
   161f8:	mov	r3, #1472	; 0x5c0
   161fc:	str	r0, [r0, #2948]	; 0xb84
   16200:	str	r3, [r4, #12]
   16204:	str	r3, [r4, #20]
   16208:	str	r9, [r0, #2952]	; 0xb88
   1620c:	b	16120 <flatcc_emitter@@Base+0x98>
   16210:	mov	r2, r7
   16214:	ldr	r0, [r4, #8]
   16218:	rsb	r1, r2, #0
   1621c:	sub	r3, r3, r2
   16220:	add	sl, sl, r1
   16224:	sub	r7, r7, r2
   16228:	str	r3, [r4, #12]
   1622c:	add	r0, r0, r1
   16230:	mov	r1, sl
   16234:	str	r0, [r4, #8]
   16238:	bl	12408 <memcpy@plt>
   1623c:	b	16120 <flatcc_emitter@@Base+0x98>
   16240:	ldr	r0, [r4, #20]
   16244:	cmp	r0, r2
   16248:	bcs	1627c <flatcc_emitter@@Base+0x1f4>
   1624c:	ldr	sl, [pc, #308]	; 16388 <flatcc_emitter@@Base+0x300>
   16250:	add	r5, r1, #8
   16254:	mov	r9, #2944	; 0xb80
   16258:	cmp	r6, #0
   1625c:	beq	1610c <flatcc_emitter@@Base+0x84>
   16260:	ldr	fp, [r5, #-8]
   16264:	ldr	r8, [r5, #-4]
   16268:	cmp	r8, #0
   1626c:	bne	16294 <flatcc_emitter@@Base+0x20c>
   16270:	sub	r6, r6, #1
   16274:	add	r5, r5, #8
   16278:	b	16258 <flatcc_emitter@@Base+0x1d0>
   1627c:	ldr	r3, [r4, #16]
   16280:	add	ip, r3, r2
   16284:	sub	r2, r0, r2
   16288:	str	ip, [r4, #16]
   1628c:	str	r2, [r4, #20]
   16290:	b	160cc <flatcc_emitter@@Base+0x44>
   16294:	ldr	r7, [r4, #20]
   16298:	cmp	r7, r8
   1629c:	bcs	16350 <flatcc_emitter@@Base+0x2c8>
   162a0:	cmp	r7, #0
   162a4:	bne	16354 <flatcc_emitter@@Base+0x2cc>
   162a8:	ldr	r7, [r4, #4]
   162ac:	cmp	r7, #0
   162b0:	beq	162c8 <flatcc_emitter@@Base+0x240>
   162b4:	ldr	r2, [r4]
   162b8:	ldr	r3, [r7, #2944]	; 0xb80
   162bc:	cmp	r3, r2
   162c0:	strne	r3, [r4, #4]
   162c4:	bne	16304 <flatcc_emitter@@Base+0x27c>
   162c8:	movw	r0, #2956	; 0xb8c
   162cc:	bl	1242c <malloc@plt>
   162d0:	cmp	r0, #0
   162d4:	beq	161a8 <flatcc_emitter@@Base+0x120>
   162d8:	ldr	r3, [r4, #28]
   162dc:	cmp	r7, #0
   162e0:	add	r3, r3, #2944	; 0xb80
   162e4:	str	r3, [r4, #28]
   162e8:	beq	16324 <flatcc_emitter@@Base+0x29c>
   162ec:	ldr	r3, [r4]
   162f0:	str	r3, [r0, #2944]	; 0xb80
   162f4:	str	r7, [r0, #2948]	; 0xb84
   162f8:	str	r0, [r3, #2948]	; 0xb84
   162fc:	str	r0, [r7, #2944]	; 0xb80
   16300:	str	r0, [r4, #4]
   16304:	ldr	r3, [r4, #4]
   16308:	ldr	r2, [r3, #2948]	; 0xb84
   1630c:	ldr	r2, [r2, #2952]	; 0xb88
   16310:	str	r3, [r4, #16]
   16314:	str	r9, [r4, #20]
   16318:	add	r2, r2, #2944	; 0xb80
   1631c:	str	r2, [r3, #2952]	; 0xb88
   16320:	b	16268 <flatcc_emitter@@Base+0x1e0>
   16324:	add	r3, r0, #1472	; 0x5c0
   16328:	str	r0, [r4]
   1632c:	str	r0, [r0, #2944]	; 0xb80
   16330:	stmib	r4, {r0, r3}
   16334:	str	r3, [r4, #16]
   16338:	mov	r3, #1472	; 0x5c0
   1633c:	str	r0, [r0, #2948]	; 0xb84
   16340:	str	r3, [r4, #12]
   16344:	str	r3, [r4, #20]
   16348:	str	sl, [r0, #2952]	; 0xb88
   1634c:	b	16268 <flatcc_emitter@@Base+0x1e0>
   16350:	mov	r7, r8
   16354:	mov	r2, r7
   16358:	mov	r1, fp
   1635c:	ldr	r0, [r4, #16]
   16360:	bl	12408 <memcpy@plt>
   16364:	ldr	r3, [r4, #16]
   16368:	sub	r8, r8, r7
   1636c:	add	fp, fp, r7
   16370:	add	r3, r3, r7
   16374:	str	r3, [r4, #16]
   16378:	ldr	r3, [r4, #20]
   1637c:	sub	r7, r3, r7
   16380:	str	r7, [r4, #20]
   16384:	b	16268 <flatcc_emitter@@Base+0x1e0>
   16388:			; <UNDEFINED> instruction: 0xfffffa40

0001638c <flatcc_emitter_copy_buffer@@Base>:
   1638c:	ldr	ip, [r0, #24]
   16390:	push	{r4, r5, r6, lr}
   16394:	cmp	ip, r2
   16398:	movhi	r6, #0
   1639c:	bhi	163d4 <flatcc_emitter_copy_buffer@@Base+0x48>
   163a0:	ldr	r6, [r0]
   163a4:	cmp	r6, #0
   163a8:	beq	163d4 <flatcc_emitter_copy_buffer@@Base+0x48>
   163ac:	ldr	r2, [r0, #4]
   163b0:	mov	r5, r1
   163b4:	mov	r4, r0
   163b8:	ldr	r1, [r0, #8]
   163bc:	cmp	r6, r2
   163c0:	bne	163dc <flatcc_emitter_copy_buffer@@Base+0x50>
   163c4:	mov	r2, ip
   163c8:	mov	r0, r5
   163cc:	mov	r6, r5
   163d0:	bl	12408 <memcpy@plt>
   163d4:	mov	r0, r6
   163d8:	pop	{r4, r5, r6, pc}
   163dc:	ldr	r3, [r4, #12]
   163e0:	mov	r0, r5
   163e4:	rsb	r6, r3, #2944	; 0xb80
   163e8:	mov	r2, r6
   163ec:	add	r6, r5, r6
   163f0:	bl	12408 <memcpy@plt>
   163f4:	ldr	r2, [r4]
   163f8:	ldr	r5, [r2, #2944]	; 0xb80
   163fc:	ldr	r2, [r4, #4]
   16400:	cmp	r2, r5
   16404:	bne	16420 <flatcc_emitter_copy_buffer@@Base+0x94>
   16408:	ldr	r2, [r4, #20]
   1640c:	mov	r1, r5
   16410:	mov	r0, r6
   16414:	rsb	r2, r2, #2944	; 0xb80
   16418:	bl	12408 <memcpy@plt>
   1641c:	b	163d4 <flatcc_emitter_copy_buffer@@Base+0x48>
   16420:	mov	r1, r5
   16424:	mov	r0, r6
   16428:	mov	r2, #2944	; 0xb80
   1642c:	add	r6, r6, #2944	; 0xb80
   16430:	bl	12408 <memcpy@plt>
   16434:	ldr	r5, [r5, #2944]	; 0xb80
   16438:	b	163fc <flatcc_emitter_copy_buffer@@Base+0x70>
   1643c:	andeq	r0, r0, r0
   16440:	push	{r4, lr}
   16444:	mov	r2, #260	; 0x104
   16448:	ldr	r3, [pc, #8]	; 16458 <flatcc_emitter_copy_buffer@@Base+0xcc>
   1644c:	ldr	r1, [pc, #8]	; 1645c <flatcc_emitter_copy_buffer@@Base+0xd0>
   16450:	ldr	r0, [pc, #8]	; 16460 <flatcc_emitter_copy_buffer@@Base+0xd4>
   16454:	bl	124b0 <__assert_fail@plt>
   16458:	andeq	sl, r1, r8, lsr #5
   1645c:	andeq	sl, r1, fp, lsr fp
   16460:	muleq	r1, r1, fp

00016464 <grisu3_diy_fp_encode_double@@Base>:
   16464:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16468:	sub	sp, sp, #76	; 0x4c
   1646c:	sub	r2, r2, r3
   16470:	ldr	ip, [sp, #112]	; 0x70
   16474:	strd	r0, [sp]
   16478:	str	r3, [sp, #24]
   1647c:	cmp	ip, #0
   16480:	movne	ip, #4
   16484:	orrs	r3, r0, r1
   16488:	bne	16500 <grisu3_diy_fp_encode_double@@Base+0x9c>
   1648c:	bl	16440 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16490:	ldm	sp, {r1, r3}
   16494:	lsl	r3, r3, #10
   16498:	lsl	sl, r1, #10
   1649c:	orr	r3, r3, r1, lsr #22
   164a0:	str	sl, [sp]
   164a4:	str	r3, [sp, #4]
   164a8:	mov	r3, r9
   164ac:	ldr	r1, [sp, #4]
   164b0:	mov	r6, r8
   164b4:	sub	r9, r3, #10
   164b8:	and	r7, r1, lr
   164bc:	orrs	r1, r6, r7
   164c0:	beq	16490 <grisu3_diy_fp_encode_double@@Base+0x2c>
   164c4:	ldrd	r0, [sp]
   164c8:	mov	fp, r3
   164cc:	sub	r3, r3, #1
   164d0:	cmp	r0, #0
   164d4:	sbcs	r1, r1, #0
   164d8:	bge	16510 <grisu3_diy_fp_encode_double@@Base+0xac>
   164dc:	rsb	r3, fp, #0
   164e0:	cmn	r2, #348	; 0x15c
   164e4:	lsl	ip, ip, r3
   164e8:	bge	1652c <grisu3_diy_fp_encode_double@@Base+0xc8>
   164ec:	ldr	r3, [pc, #1128]	; 1695c <grisu3_diy_fp_encode_double@@Base+0x4f8>
   164f0:	mov	r2, #80	; 0x50
   164f4:	ldr	r1, [pc, #1124]	; 16960 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   164f8:	ldr	r0, [pc, #1124]	; 16964 <grisu3_diy_fp_encode_double@@Base+0x500>
   164fc:	bl	124b0 <__assert_fail@plt>
   16500:	mov	r3, #0
   16504:	ldr	lr, [pc, #1116]	; 16968 <grisu3_diy_fp_encode_double@@Base+0x504>
   16508:	mov	r8, r3
   1650c:	b	164ac <grisu3_diy_fp_encode_double@@Base+0x48>
   16510:	ldr	r1, [sp]
   16514:	adds	r1, r1, r1
   16518:	str	r1, [sp]
   1651c:	ldr	r1, [sp, #4]
   16520:	adc	r1, r1, r1
   16524:	str	r1, [sp, #4]
   16528:	b	164c4 <grisu3_diy_fp_encode_double@@Base+0x60>
   1652c:	cmp	r2, #348	; 0x15c
   16530:	blt	16548 <grisu3_diy_fp_encode_double@@Base+0xe4>
   16534:	ldr	r3, [pc, #1056]	; 1695c <grisu3_diy_fp_encode_double@@Base+0x4f8>
   16538:	mov	r2, #81	; 0x51
   1653c:	ldr	r1, [pc, #1052]	; 16960 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   16540:	ldr	r0, [pc, #1060]	; 1696c <grisu3_diy_fp_encode_double@@Base+0x508>
   16544:	b	164fc <grisu3_diy_fp_encode_double@@Base+0x98>
   16548:	ldr	r3, [pc, #1056]	; 16970 <grisu3_diy_fp_encode_double@@Base+0x50c>
   1654c:	add	lr, r2, #348	; 0x15c
   16550:	asr	lr, lr, #3
   16554:	add	lr, r3, lr, lsl #4
   16558:	ldr	r1, [lr, #56]	; 0x38
   1655c:	ldrsh	r6, [lr, #66]	; 0x42
   16560:	str	r1, [sp, #60]	; 0x3c
   16564:	ldr	r1, [lr, #60]	; 0x3c
   16568:	cmp	r2, r6
   1656c:	str	r1, [sp, #64]	; 0x40
   16570:	ldrsh	r1, [lr, #64]	; 0x40
   16574:	str	r1, [sp, #68]	; 0x44
   16578:	bge	16590 <grisu3_diy_fp_encode_double@@Base+0x12c>
   1657c:	add	r3, r3, #24
   16580:	mov	r2, #88	; 0x58
   16584:	ldr	r1, [pc, #980]	; 16960 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   16588:	ldr	r0, [pc, #996]	; 16974 <grisu3_diy_fp_encode_double@@Base+0x510>
   1658c:	b	164fc <grisu3_diy_fp_encode_double@@Base+0x98>
   16590:	add	lr, r6, #7
   16594:	cmp	r2, lr
   16598:	ble	165b0 <grisu3_diy_fp_encode_double@@Base+0x14c>
   1659c:	add	r3, r3, #24
   165a0:	mov	r2, #89	; 0x59
   165a4:	ldr	r1, [pc, #948]	; 16960 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   165a8:	ldr	r0, [pc, #968]	; 16978 <grisu3_diy_fp_encode_double@@Base+0x514>
   165ac:	b	164fc <grisu3_diy_fp_encode_double@@Base+0x98>
   165b0:	cmp	r2, r6
   165b4:	beq	16690 <grisu3_diy_fp_encode_double@@Base+0x22c>
   165b8:	sub	r2, r2, r6
   165bc:	sub	r2, r2, #1
   165c0:	cmp	r2, #6
   165c4:	bls	165dc <grisu3_diy_fp_encode_double@@Base+0x178>
   165c8:	ldr	r3, [pc, #940]	; 1697c <grisu3_diy_fp_encode_double@@Base+0x518>
   165cc:	mov	r2, #185	; 0xb9
   165d0:	ldr	r1, [pc, #904]	; 16960 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   165d4:	ldr	r0, [pc, #932]	; 16980 <grisu3_diy_fp_encode_double@@Base+0x51c>
   165d8:	b	164fc <grisu3_diy_fp_encode_double@@Base+0x98>
   165dc:	ldr	r3, [pc, #928]	; 16984 <grisu3_diy_fp_encode_double@@Base+0x520>
   165e0:	ldr	r1, [sp]
   165e4:	add	lr, r3, r2, lsl #4
   165e8:	ldr	r6, [r3, r2, lsl #4]
   165ec:	ldr	r3, [lr, #4]
   165f0:	umull	r0, r1, r1, r3
   165f4:	ldr	r3, [sp, #4]
   165f8:	umull	r8, r9, r3, r6
   165fc:	ldr	r3, [sp]
   16600:	strd	r8, [sp, #16]
   16604:	ldr	sl, [sp, #16]
   16608:	umull	r6, r7, r3, r6
   1660c:	mov	r3, #0
   16610:	mov	r9, r3
   16614:	str	r3, [sp, #16]
   16618:	mov	r6, r7
   1661c:	adds	r6, r6, sl
   16620:	adc	r7, r3, r3
   16624:	adds	r6, r6, #-2147483648	; 0x80000000
   16628:	adc	r7, r7, r3
   1662c:	adds	r6, r6, r0
   16630:	ldr	r6, [sp, #20]
   16634:	adc	r7, r7, r3
   16638:	mov	r8, r7
   1663c:	mov	r7, r1
   16640:	ldr	r1, [sp, #4]
   16644:	adds	r3, r6, r7
   16648:	str	r3, [sp, #32]
   1664c:	adc	r3, r9, r9
   16650:	str	r3, [sp, #36]	; 0x24
   16654:	ldr	r3, [lr, #4]
   16658:	ldrd	r6, [sp, #32]
   1665c:	umlal	r6, r7, r3, r1
   16660:	adds	r3, r8, r6
   16664:	str	r3, [sp]
   16668:	adc	r3, r9, r7
   1666c:	str	r3, [sp, #4]
   16670:	ldr	r3, [lr, #8]
   16674:	add	r3, fp, r3
   16678:	add	fp, r3, #64	; 0x40
   1667c:	ldr	r3, [sp, #24]
   16680:	add	r3, r3, #1
   16684:	add	r2, r3, r2
   16688:	cmp	r2, #19
   1668c:	addgt	ip, ip, #4
   16690:	ldr	r2, [sp]
   16694:	mov	lr, #0
   16698:	ldr	r3, [sp, #64]	; 0x40
   1669c:	umull	r2, r3, r2, r3
   166a0:	strd	r2, [sp, #16]
   166a4:	ldr	r2, [sp, #4]
   166a8:	ldr	r3, [sp, #60]	; 0x3c
   166ac:	umull	r2, r3, r2, r3
   166b0:	strd	r2, [sp, #24]
   166b4:	ldr	r2, [sp]
   166b8:	ldr	r0, [sp, #24]
   166bc:	ldr	r3, [sp, #60]	; 0x3c
   166c0:	umull	r6, r7, r2, r3
   166c4:	ldr	r3, [sp, #20]
   166c8:	mov	sl, r7
   166cc:	adds	r0, sl, r0
   166d0:	ldr	sl, [sp, #16]
   166d4:	adc	r6, lr, lr
   166d8:	adds	r0, r0, #-2147483648	; 0x80000000
   166dc:	adc	r6, r6, lr
   166e0:	adds	r0, r0, sl
   166e4:	ldr	r0, [sp, #28]
   166e8:	adc	r6, r6, lr
   166ec:	mov	r2, r6
   166f0:	ldr	r6, [sp, #4]
   166f4:	adds	r3, r0, r3
   166f8:	str	r3, [sp, #40]	; 0x28
   166fc:	adc	r3, lr, lr
   16700:	str	r3, [sp, #44]	; 0x2c
   16704:	ldrd	r0, [sp, #40]	; 0x28
   16708:	ldr	r3, [sp, #64]	; 0x40
   1670c:	umlal	r0, r1, r3, r6
   16710:	ldr	r3, [sp, #68]	; 0x44
   16714:	adds	r4, r2, r0
   16718:	adc	r5, lr, r1
   1671c:	cmp	ip, lr
   16720:	add	r2, fp, r3
   16724:	movne	r3, #9
   16728:	moveq	r3, #8
   1672c:	add	r2, r2, #64	; 0x40
   16730:	add	ip, ip, r3
   16734:	orrs	r3, r4, r5
   16738:	movne	r1, r2
   1673c:	ldrne	r0, [pc, #548]	; 16968 <grisu3_diy_fp_encode_double@@Base+0x504>
   16740:	beq	1648c <grisu3_diy_fp_encode_double@@Base+0x28>
   16744:	and	r3, r5, r0
   16748:	str	lr, [sp, #48]	; 0x30
   1674c:	sub	r6, r1, #10
   16750:	str	r3, [sp, #52]	; 0x34
   16754:	ldrd	r8, [sp, #48]	; 0x30
   16758:	orrs	r3, r8, r9
   1675c:	beq	16860 <grisu3_diy_fp_encode_double@@Base+0x3fc>
   16760:	cmp	r4, #0
   16764:	mov	r8, r1
   16768:	sbcs	r3, r5, #0
   1676c:	sub	r1, r1, #1
   16770:	bge	1687c <grisu3_diy_fp_encode_double@@Base+0x418>
   16774:	sub	r2, r2, r8
   16778:	add	r3, r8, #64	; 0x40
   1677c:	lsl	ip, ip, r2
   16780:	ldr	r2, [pc, #512]	; 16988 <grisu3_diy_fp_encode_double@@Base+0x524>
   16784:	cmp	r3, r2
   16788:	movge	r3, #64	; 0x40
   1678c:	bge	167a4 <grisu3_diy_fp_encode_double@@Base+0x340>
   16790:	mvn	r2, #1072	; 0x430
   16794:	cmp	r3, r2
   16798:	addge	r3, r8, #1136	; 0x470
   1679c:	movlt	r3, #0
   167a0:	addge	r3, r3, #2
   167a4:	rsb	lr, r3, #64	; 0x40
   167a8:	cmp	lr, #60	; 0x3c
   167ac:	ble	167e4 <grisu3_diy_fp_encode_double@@Base+0x380>
   167b0:	rsb	r3, r3, #2
   167b4:	mov	lr, #62	; 0x3e
   167b8:	lsr	r2, r4, r3
   167bc:	rsb	r0, r3, #32
   167c0:	sub	r1, r3, #32
   167c4:	add	r8, r8, r3
   167c8:	orr	r2, r2, r5, lsl r0
   167cc:	orr	r2, r2, r5, lsr r1
   167d0:	lsr	r1, r5, r3
   167d4:	asr	r3, ip, r3
   167d8:	mov	r4, r2
   167dc:	mov	r5, r1
   167e0:	add	ip, r3, #9
   167e4:	lsr	sl, r4, lr
   167e8:	rsb	r0, lr, #32
   167ec:	sub	r1, lr, #32
   167f0:	lsr	fp, r5, lr
   167f4:	add	r8, lr, r8
   167f8:	orr	sl, sl, r5, lsl r0
   167fc:	mov	r0, #1
   16800:	orr	sl, sl, r5, lsr r1
   16804:	sub	r1, lr, #1
   16808:	and	r4, r4, r0, lsl r1
   1680c:	mov	r0, #8
   16810:	lsl	r0, r0, r1
   16814:	lsl	r4, r4, #3
   16818:	add	r1, ip, r0
   1681c:	cmp	r1, lr
   16820:	bgt	16854 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   16824:	adds	sl, sl, #1
   16828:	mov	r6, #0
   1682c:	adc	fp, fp, #0
   16830:	and	r7, fp, #2097152	; 0x200000
   16834:	orrs	r3, r6, r7
   16838:	beq	16854 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   1683c:	lsr	lr, sl, #1
   16840:	add	r8, r8, #1
   16844:	lsr	r5, fp, #1
   16848:	orr	lr, lr, fp, lsl #31
   1684c:	mov	fp, r5
   16850:	mov	sl, lr
   16854:	mvn	r6, #0
   16858:	ldr	r7, [pc, #300]	; 1698c <grisu3_diy_fp_encode_double@@Base+0x528>
   1685c:	b	168a0 <grisu3_diy_fp_encode_double@@Base+0x43c>
   16860:	lsl	r3, r5, #10
   16864:	lsl	r1, r4, #10
   16868:	orr	r3, r3, r4, lsr #22
   1686c:	mov	r4, r1
   16870:	mov	r1, r6
   16874:	mov	r5, r3
   16878:	b	16744 <grisu3_diy_fp_encode_double@@Base+0x2e0>
   1687c:	adds	r4, r4, r4
   16880:	adc	r5, r5, r5
   16884:	b	16760 <grisu3_diy_fp_encode_double@@Base+0x2fc>
   16888:	lsr	lr, sl, #1
   1688c:	lsr	r8, fp, #1
   16890:	orr	lr, lr, fp, lsl #31
   16894:	mov	fp, r8
   16898:	mov	r8, r5
   1689c:	mov	sl, lr
   168a0:	cmp	fp, r7
   168a4:	add	r5, r8, #1
   168a8:	cmpeq	sl, r6
   168ac:	bhi	16888 <grisu3_diy_fp_encode_double@@Base+0x424>
   168b0:	ldr	lr, [pc, #216]	; 16990 <grisu3_diy_fp_encode_double@@Base+0x52c>
   168b4:	mov	r6, #0
   168b8:	cmp	r8, lr
   168bc:	movge	r5, lr
   168c0:	bge	168d4 <grisu3_diy_fp_encode_double@@Base+0x470>
   168c4:	mov	r7, #0
   168c8:	b	16920 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   168cc:	adds	sl, sl, sl
   168d0:	adc	fp, fp, fp
   168d4:	and	r3, fp, #1048576	; 0x100000
   168d8:	cmp	r8, r5
   168dc:	str	r6, [sp, #8]
   168e0:	mov	lr, r8
   168e4:	str	r3, [sp, #12]
   168e8:	beq	1694c <grisu3_diy_fp_encode_double@@Base+0x4e8>
   168ec:	ldrd	r2, [sp, #8]
   168f0:	sub	r8, r8, #1
   168f4:	orrs	r3, r2, r3
   168f8:	beq	168cc <grisu3_diy_fp_encode_double@@Base+0x468>
   168fc:	add	lr, lr, #1072	; 0x430
   16900:	add	lr, lr, #3
   16904:	asr	r3, lr, #31
   16908:	mov	r2, lr
   1690c:	strd	r2, [sp, #8]
   16910:	ldr	r2, [sp, #8]
   16914:	ubfx	r3, fp, #0, #20
   16918:	mov	r6, sl
   1691c:	orr	r7, r3, r2, lsl #20
   16920:	ldr	r3, [sp, #116]	; 0x74
   16924:	cmp	r1, r4
   16928:	sub	r0, r0, ip
   1692c:	movgt	r1, #0
   16930:	movle	r1, #1
   16934:	cmp	r0, r4
   16938:	movlt	r0, r1
   1693c:	orrge	r0, r1, #1
   16940:	strd	r6, [r3]
   16944:	add	sp, sp, #76	; 0x4c
   16948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1694c:	ldrd	r2, [sp, #8]
   16950:	orrs	r3, r2, r3
   16954:	beq	16910 <grisu3_diy_fp_encode_double@@Base+0x4ac>
   16958:	b	168fc <grisu3_diy_fp_encode_double@@Base+0x498>
   1695c:	andeq	sl, r1, r0, asr #5
   16960:	muleq	r1, sl, fp
   16964:	strdeq	sl, [r1], -r1
   16968:			; <UNDEFINED> instruction: 0xffc00000
   1696c:	andeq	sl, r1, r0, lsl ip
   16970:	andeq	sl, r1, r8, lsr #5
   16974:	andeq	sl, r1, fp, lsr ip
   16978:	andeq	sl, r1, sl, asr #24
   1697c:	andeq	sl, r1, r0, asr r8
   16980:	andeq	sl, r1, r5, ror #24
   16984:	andeq	ip, r2, r8, asr r0
   16988:			; <UNDEFINED> instruction: 0xfffffc0e
   1698c:			; <UNDEFINED> instruction: 0x001fffff
   16990:			; <UNDEFINED> instruction: 0xfffffbce
   16994:	cmp	r1, #1000	; 0x3e8
   16998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1699c:	mov	r3, #0
   169a0:	addle	r1, r1, #1
   169a4:	addgt	r1, r0, #1000	; 0x3e8
   169a8:	mov	r8, r2
   169ac:	addle	r1, r0, r1
   169b0:	mov	r2, #0
   169b4:	addgt	r1, r1, #1
   169b8:	cmp	r1, r0
   169bc:	sub	sp, sp, #44	; 0x2c
   169c0:	mov	r7, r0
   169c4:	strd	r2, [r8]
   169c8:	beq	16a8c <grisu3_diy_fp_encode_double@@Base+0x628>
   169cc:	ldrb	r3, [r0]
   169d0:	cmp	r3, #45	; 0x2d
   169d4:	movne	r6, r0
   169d8:	movne	r3, #0
   169dc:	bne	169f8 <grisu3_diy_fp_encode_double@@Base+0x594>
   169e0:	add	r6, r0, #1
   169e4:	cmp	r1, r6
   169e8:	movne	r3, #1
   169ec:	bne	169f8 <grisu3_diy_fp_encode_double@@Base+0x594>
   169f0:	mov	r7, #0
   169f4:	b	16a8c <grisu3_diy_fp_encode_double@@Base+0x628>
   169f8:	ldrb	r0, [r6]
   169fc:	str	r3, [sp, #20]
   16a00:	cmp	r0, #48	; 0x30
   16a04:	bne	16a74 <grisu3_diy_fp_encode_double@@Base+0x610>
   16a08:	add	r3, r6, #1
   16a0c:	cmp	r1, r3
   16a10:	beq	16a24 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   16a14:	ldrb	r2, [r6, #1]
   16a18:	orr	r2, r2, #32
   16a1c:	cmp	r2, #120	; 0x78
   16a20:	beq	16a8c <grisu3_diy_fp_encode_double@@Base+0x628>
   16a24:	cmp	r1, r3
   16a28:	mov	r6, r3
   16a2c:	beq	16c30 <grisu3_diy_fp_encode_double@@Base+0x7cc>
   16a30:	ldrb	r2, [r3], #1
   16a34:	cmp	r2, #48	; 0x30
   16a38:	beq	16a24 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   16a3c:	mov	sl, #0
   16a40:	mov	fp, #0
   16a44:	mov	r2, r6
   16a48:	mov	ip, #10
   16a4c:	cmp	r1, r2
   16a50:	mov	r0, r2
   16a54:	beq	16a6c <grisu3_diy_fp_encode_double@@Base+0x608>
   16a58:	ldrb	r3, [r2]
   16a5c:	add	r2, r2, #1
   16a60:	sub	lr, r3, #48	; 0x30
   16a64:	cmp	lr, #9
   16a68:	bls	16aac <grisu3_diy_fp_encode_double@@Base+0x648>
   16a6c:	mov	ip, #0
   16a70:	b	16ad8 <grisu3_diy_fp_encode_double@@Base+0x674>
   16a74:	sub	r3, r0, #49	; 0x31
   16a78:	cmp	r3, #8
   16a7c:	bls	16a98 <grisu3_diy_fp_encode_double@@Base+0x634>
   16a80:	ldr	r3, [sp, #20]
   16a84:	cmp	r3, #0
   16a88:	movne	r7, #0
   16a8c:	mov	r0, r7
   16a90:	add	sp, sp, #44	; 0x2c
   16a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a98:	sub	r0, r0, #48	; 0x30
   16a9c:	add	r6, r6, #1
   16aa0:	mov	sl, r0
   16aa4:	asr	fp, r0, #31
   16aa8:	b	16a44 <grisu3_diy_fp_encode_double@@Base+0x5e0>
   16aac:	add	r5, pc, #748	; 0x2ec
   16ab0:	ldrd	r4, [r5]
   16ab4:	cmp	fp, r5
   16ab8:	cmpeq	sl, r4
   16abc:	bls	16c08 <grisu3_diy_fp_encode_double@@Base+0x7a4>
   16ac0:	cmp	r3, #52	; 0x34
   16ac4:	mov	ip, #1
   16ac8:	movls	r3, #0
   16acc:	movhi	r3, #1
   16ad0:	adds	sl, sl, r3
   16ad4:	adc	fp, fp, #0
   16ad8:	sub	r6, r0, r6
   16adc:	mov	lr, r0
   16ae0:	cmp	lr, r1
   16ae4:	mov	r4, lr
   16ae8:	sub	r2, lr, r0
   16aec:	beq	16c78 <grisu3_diy_fp_encode_double@@Base+0x814>
   16af0:	ldrb	r3, [lr], #1
   16af4:	cmp	r3, #48	; 0x30
   16af8:	beq	16ae0 <grisu3_diy_fp_encode_double@@Base+0x67c>
   16afc:	sub	r3, r3, #49	; 0x31
   16b00:	cmp	r3, #8
   16b04:	bhi	16b30 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   16b08:	mov	r3, lr
   16b0c:	cmp	r3, r1
   16b10:	mov	r4, r3
   16b14:	sub	r2, r3, r0
   16b18:	beq	16d48 <grisu3_diy_fp_encode_double@@Base+0x8e4>
   16b1c:	ldrb	ip, [r3], #1
   16b20:	sub	ip, ip, #48	; 0x30
   16b24:	cmp	ip, #9
   16b28:	bls	16b0c <grisu3_diy_fp_encode_double@@Base+0x6a8>
   16b2c:	mov	ip, #1
   16b30:	ldrb	r3, [r4]
   16b34:	cmp	r3, #46	; 0x2e
   16b38:	bne	16c7c <grisu3_diy_fp_encode_double@@Base+0x818>
   16b3c:	ldrb	r3, [r4, #1]
   16b40:	add	r0, r4, #1
   16b44:	sub	r3, r3, #48	; 0x30
   16b48:	cmp	r3, #9
   16b4c:	movls	r9, #10
   16b50:	strls	r0, [sp, #8]
   16b54:	bhi	169f0 <grisu3_diy_fp_encode_double@@Base+0x58c>
   16b58:	ldr	r3, [sp, #8]
   16b5c:	cmp	r3, r1
   16b60:	beq	16bac <grisu3_diy_fp_encode_double@@Base+0x748>
   16b64:	mov	lr, r3
   16b68:	ldrb	r3, [lr], #1
   16b6c:	sub	r5, r3, #48	; 0x30
   16b70:	cmp	r5, #9
   16b74:	bhi	16bac <grisu3_diy_fp_encode_double@@Base+0x748>
   16b78:	add	r5, pc, #544	; 0x220
   16b7c:	ldrd	r4, [r5]
   16b80:	cmp	fp, r5
   16b84:	cmpeq	sl, r4
   16b88:	bls	16c48 <grisu3_diy_fp_encode_double@@Base+0x7e4>
   16b8c:	cmp	ip, #0
   16b90:	bne	16bac <grisu3_diy_fp_encode_double@@Base+0x748>
   16b94:	cmp	r3, #52	; 0x34
   16b98:	mov	ip, #1
   16b9c:	movls	r3, #0
   16ba0:	movhi	r3, #1
   16ba4:	adds	sl, sl, r3
   16ba8:	adc	fp, fp, #0
   16bac:	ldr	r3, [sp, #8]
   16bb0:	sub	r0, r3, r0
   16bb4:	sub	r5, r2, r3
   16bb8:	add	r6, r6, r0
   16bbc:	cmp	r1, r3
   16bc0:	mov	r4, r3
   16bc4:	add	r2, r5, r3
   16bc8:	beq	16c78 <grisu3_diy_fp_encode_double@@Base+0x814>
   16bcc:	ldrb	r0, [r3], #1
   16bd0:	cmp	r0, #48	; 0x30
   16bd4:	beq	16bbc <grisu3_diy_fp_encode_double@@Base+0x758>
   16bd8:	sub	r0, r0, #49	; 0x31
   16bdc:	cmp	r0, #8
   16be0:	bhi	16c7c <grisu3_diy_fp_encode_double@@Base+0x818>
   16be4:	cmp	r3, r1
   16be8:	mov	r4, r3
   16bec:	beq	16d48 <grisu3_diy_fp_encode_double@@Base+0x8e4>
   16bf0:	ldrb	r0, [r3], #1
   16bf4:	sub	r0, r0, #48	; 0x30
   16bf8:	cmp	r0, #9
   16bfc:	bls	16be4 <grisu3_diy_fp_encode_double@@Base+0x780>
   16c00:	mov	ip, #1
   16c04:	b	16c7c <grisu3_diy_fp_encode_double@@Base+0x818>
   16c08:	umull	r4, r5, sl, ip
   16c0c:	mla	r5, ip, fp, r5
   16c10:	subs	r0, r4, #48	; 0x30
   16c14:	str	r0, [sp, #8]
   16c18:	sbc	r0, r5, #0
   16c1c:	str	r0, [sp, #12]
   16c20:	ldrd	sl, [sp, #8]
   16c24:	adds	sl, sl, r3
   16c28:	adc	fp, fp, #0
   16c2c:	b	16a4c <grisu3_diy_fp_encode_double@@Base+0x5e8>
   16c30:	mov	r0, r1
   16c34:	mov	r6, r1
   16c38:	mov	ip, #0
   16c3c:	mov	sl, #0
   16c40:	mov	fp, #0
   16c44:	b	16ad8 <grisu3_diy_fp_encode_double@@Base+0x674>
   16c48:	umull	r4, r5, sl, r9
   16c4c:	sub	r2, r2, #1
   16c50:	str	lr, [sp, #8]
   16c54:	mla	r5, r9, fp, r5
   16c58:	subs	sl, r4, #48	; 0x30
   16c5c:	str	sl, [sp, #24]
   16c60:	sbc	r4, r5, #0
   16c64:	str	r4, [sp, #28]
   16c68:	ldrd	sl, [sp, #24]
   16c6c:	adds	sl, sl, r3
   16c70:	adc	fp, fp, #0
   16c74:	b	16b58 <grisu3_diy_fp_encode_double@@Base+0x6f4>
   16c78:	mov	r4, r1
   16c7c:	cmp	r4, r1
   16c80:	add	r5, r2, r6
   16c84:	beq	16d94 <grisu3_diy_fp_encode_double@@Base+0x930>
   16c88:	ldrb	r3, [r4]
   16c8c:	orr	r3, r3, #32
   16c90:	cmp	r3, #101	; 0x65
   16c94:	bne	16d94 <grisu3_diy_fp_encode_double@@Base+0x930>
   16c98:	sub	r3, r1, r4
   16c9c:	cmp	r3, #1
   16ca0:	ble	169f0 <grisu3_diy_fp_encode_double@@Base+0x58c>
   16ca4:	ldrb	r3, [r4, #1]
   16ca8:	cmp	r3, #43	; 0x2b
   16cac:	bne	16d50 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   16cb0:	add	r4, r4, #2
   16cb4:	cmp	r1, r4
   16cb8:	beq	169f0 <grisu3_diy_fp_encode_double@@Base+0x58c>
   16cbc:	mov	lr, #0
   16cc0:	ldrb	r2, [r4]
   16cc4:	sub	r2, r2, #48	; 0x30
   16cc8:	uxtb	r3, r2
   16ccc:	cmp	r3, #9
   16cd0:	addls	r0, r4, #1
   16cd4:	bhi	169f0 <grisu3_diy_fp_encode_double@@Base+0x58c>
   16cd8:	cmp	r0, r1
   16cdc:	mov	r4, r0
   16ce0:	bne	16d70 <grisu3_diy_fp_encode_double@@Base+0x90c>
   16ce4:	cmp	lr, #0
   16ce8:	rsbne	r2, r2, #0
   16cec:	cmp	r1, r4
   16cf0:	add	r5, r2, r5
   16cf4:	beq	169f0 <grisu3_diy_fp_encode_double@@Base+0x58c>
   16cf8:	orrs	r3, sl, fp
   16cfc:	moveq	r2, #1
   16d00:	movne	r2, #0
   16d04:	cmn	r5, #324	; 0x144
   16d08:	movge	r3, #0
   16d0c:	movlt	r3, #1
   16d10:	orrs	r3, r2, r3
   16d14:	bne	16d30 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   16d18:	movw	r3, #310	; 0x136
   16d1c:	cmp	r5, r3
   16d20:	ble	16db0 <grisu3_diy_fp_encode_double@@Base+0x94c>
   16d24:	ldr	r3, [pc, #124]	; 16da8 <grisu3_diy_fp_encode_double@@Base+0x944>
   16d28:	mov	r2, #0
   16d2c:	strd	r2, [r8]
   16d30:	ldr	r3, [sp, #20]
   16d34:	cmp	r3, #0
   16d38:	vldrne	d7, [r8]
   16d3c:	vnegne.f64	d7, d7
   16d40:	vstrne	d7, [r8]
   16d44:	b	17060 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   16d48:	mov	r4, r1
   16d4c:	b	16c00 <grisu3_diy_fp_encode_double@@Base+0x79c>
   16d50:	cmp	r3, #45	; 0x2d
   16d54:	addne	r4, r4, #1
   16d58:	bne	16cbc <grisu3_diy_fp_encode_double@@Base+0x858>
   16d5c:	add	r4, r4, #2
   16d60:	cmp	r1, r4
   16d64:	beq	169f0 <grisu3_diy_fp_encode_double@@Base+0x58c>
   16d68:	mov	lr, #1
   16d6c:	b	16cc0 <grisu3_diy_fp_encode_double@@Base+0x85c>
   16d70:	ldrb	r3, [r0], #1
   16d74:	sub	r9, r3, #48	; 0x30
   16d78:	cmp	r9, #9
   16d7c:	bhi	16ce4 <grisu3_diy_fp_encode_double@@Base+0x880>
   16d80:	cmp	r2, #32768	; 0x8000
   16d84:	movlt	r4, #10
   16d88:	mlalt	r2, r4, r2, r3
   16d8c:	sublt	r2, r2, #48	; 0x30
   16d90:	b	16cd8 <grisu3_diy_fp_encode_double@@Base+0x874>
   16d94:	mov	r2, #0
   16d98:	b	16cec <grisu3_diy_fp_encode_double@@Base+0x888>
   16d9c:	nop	{0}
   16da0:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   16da4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   16da8:	svcvc	0x00f00000	; IMB
   16dac:			; <UNDEFINED> instruction: 0x001fffff
   16db0:	ldr	r3, [pc, #-12]	; 16dac <grisu3_diy_fp_encode_double@@Base+0x948>
   16db4:	mvn	r2, #0
   16db8:	cmp	fp, r3
   16dbc:	cmpeq	sl, r2
   16dc0:	movls	r3, #1
   16dc4:	movhi	r3, #0
   16dc8:	cmp	r5, #22
   16dcc:	movhi	r3, #0
   16dd0:	andls	r3, r3, #1
   16dd4:	cmp	r3, #0
   16dd8:	beq	17020 <grisu3_diy_fp_encode_double@@Base+0xbbc>
   16ddc:	mov	r0, sl
   16de0:	mov	r1, fp
   16de4:	bl	19404 <flatcc_json_parser_struct_as_root@@Base+0x350>
   16de8:	sub	r2, r5, r6
   16dec:	vmov	d7, r0, r1
   16df0:	add	r2, r2, #22
   16df4:	cmp	r2, #44	; 0x2c
   16df8:	ldrls	pc, [pc, r2, lsl #2]
   16dfc:	b	16ebc <grisu3_diy_fp_encode_double@@Base+0xa58>
   16e00:			; <UNDEFINED> instruction: 0x00016eb4
   16e04:	andeq	r6, r1, r4, asr #29
   16e08:	andeq	r6, r1, ip, asr #29
   16e0c:	ldrdeq	r6, [r1], -r4
   16e10:	ldrdeq	r6, [r1], -ip
   16e14:	andeq	r6, r1, r4, ror #29
   16e18:	andeq	r6, r1, ip, ror #29
   16e1c:	strdeq	r6, [r1], -r4
   16e20:	strdeq	r6, [r1], -ip
   16e24:	andeq	r6, r1, r4, lsl #30
   16e28:	andeq	r6, r1, ip, lsl #30
   16e2c:	andeq	r6, r1, r4, lsl pc
   16e30:	andeq	r6, r1, ip, lsl pc
   16e34:	andeq	r6, r1, r4, lsr #30
   16e38:	andeq	r6, r1, ip, lsr #30
   16e3c:	andeq	r6, r1, r4, lsr pc
   16e40:	andeq	r6, r1, ip, lsr pc
   16e44:	andeq	r6, r1, r4, asr #30
   16e48:	andeq	r6, r1, ip, asr #30
   16e4c:	andeq	r6, r1, r4, asr pc
   16e50:	andeq	r6, r1, ip, asr pc
   16e54:	andeq	r6, r1, r4, ror #30
   16e58:			; <UNDEFINED> instruction: 0x00016ebc
   16e5c:	andeq	r6, r1, ip, ror #30
   16e60:	andeq	r6, r1, r8, ror pc
   16e64:	andeq	r6, r1, r0, lsl #31
   16e68:	andeq	r6, r1, r8, lsl #31
   16e6c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   16e70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16e74:	andeq	r6, r1, r0, lsr #31
   16e78:	andeq	r6, r1, r8, lsr #31
   16e7c:			; <UNDEFINED> instruction: 0x00016fb0
   16e80:			; <UNDEFINED> instruction: 0x00016fb8
   16e84:	andeq	r6, r1, r0, asr #31
   16e88:	andeq	r6, r1, r8, asr #31
   16e8c:	ldrdeq	r6, [r1], -r0
   16e90:	ldrdeq	r6, [r1], -r8
   16e94:	andeq	r6, r1, r0, ror #31
   16e98:	andeq	r6, r1, r8, ror #31
   16e9c:	strdeq	r6, [r1], -r0
   16ea0:	strdeq	r6, [r1], -r8
   16ea4:	andeq	r7, r1, r0
   16ea8:	andeq	r7, r1, r8
   16eac:	andeq	r7, r1, r0, lsl r0
   16eb0:	andeq	r7, r1, r8, lsl r0
   16eb4:	vldr	d6, [pc, #428]	; 17068 <grisu3_diy_fp_encode_double@@Base+0xc04>
   16eb8:	vdiv.f64	d7, d7, d6
   16ebc:	vstr	d7, [r8]
   16ec0:	b	16d30 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   16ec4:	vldr	d6, [pc, #420]	; 17070 <grisu3_diy_fp_encode_double@@Base+0xc0c>
   16ec8:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16ecc:	vldr	d6, [pc, #420]	; 17078 <grisu3_diy_fp_encode_double@@Base+0xc14>
   16ed0:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16ed4:	vldr	d6, [pc, #420]	; 17080 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   16ed8:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16edc:	vldr	d6, [pc, #420]	; 17088 <grisu3_diy_fp_encode_double@@Base+0xc24>
   16ee0:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16ee4:	vldr	d6, [pc, #420]	; 17090 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   16ee8:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16eec:	vldr	d6, [pc, #420]	; 17098 <grisu3_diy_fp_encode_double@@Base+0xc34>
   16ef0:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16ef4:	vldr	d6, [pc, #420]	; 170a0 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   16ef8:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16efc:	vldr	d6, [pc, #420]	; 170a8 <grisu3_diy_fp_encode_double@@Base+0xc44>
   16f00:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f04:	vldr	d6, [pc, #420]	; 170b0 <grisu3_diy_fp_encode_double@@Base+0xc4c>
   16f08:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f0c:	vldr	d6, [pc, #420]	; 170b8 <grisu3_diy_fp_encode_double@@Base+0xc54>
   16f10:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f14:	vldr	d6, [pc, #420]	; 170c0 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   16f18:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f1c:	vldr	d6, [pc, #420]	; 170c8 <grisu3_diy_fp_encode_double@@Base+0xc64>
   16f20:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f24:	vldr	d6, [pc, #420]	; 170d0 <grisu3_diy_fp_encode_double@@Base+0xc6c>
   16f28:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f2c:	vldr	d6, [pc, #420]	; 170d8 <grisu3_diy_fp_encode_double@@Base+0xc74>
   16f30:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f34:	vldr	d6, [pc, #420]	; 170e0 <grisu3_diy_fp_encode_double@@Base+0xc7c>
   16f38:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f3c:	vldr	d6, [pc, #420]	; 170e8 <grisu3_diy_fp_encode_double@@Base+0xc84>
   16f40:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f44:	vldr	d6, [pc, #420]	; 170f0 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   16f48:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f4c:	vldr	d6, [pc, #420]	; 170f8 <grisu3_diy_fp_encode_double@@Base+0xc94>
   16f50:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f54:	vldr	d6, [pc, #420]	; 17100 <grisu3_diy_fp_encode_double@@Base+0xc9c>
   16f58:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f5c:	vldr	d6, [pc, #420]	; 17108 <grisu3_diy_fp_encode_double@@Base+0xca4>
   16f60:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f64:	vldr	d6, [pc, #420]	; 17110 <grisu3_diy_fp_encode_double@@Base+0xcac>
   16f68:	b	16eb8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   16f6c:	vldr	d6, [pc, #412]	; 17110 <grisu3_diy_fp_encode_double@@Base+0xcac>
   16f70:	vmul.f64	d7, d7, d6
   16f74:	b	16ebc <grisu3_diy_fp_encode_double@@Base+0xa58>
   16f78:	vldr	d6, [pc, #392]	; 17108 <grisu3_diy_fp_encode_double@@Base+0xca4>
   16f7c:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16f80:	vldr	d6, [pc, #376]	; 17100 <grisu3_diy_fp_encode_double@@Base+0xc9c>
   16f84:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16f88:	vldr	d6, [pc, #360]	; 170f8 <grisu3_diy_fp_encode_double@@Base+0xc94>
   16f8c:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16f90:	vldr	d6, [pc, #344]	; 170f0 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   16f94:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16f98:	vldr	d6, [pc, #328]	; 170e8 <grisu3_diy_fp_encode_double@@Base+0xc84>
   16f9c:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fa0:	vldr	d6, [pc, #312]	; 170e0 <grisu3_diy_fp_encode_double@@Base+0xc7c>
   16fa4:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fa8:	vldr	d6, [pc, #296]	; 170d8 <grisu3_diy_fp_encode_double@@Base+0xc74>
   16fac:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fb0:	vldr	d6, [pc, #280]	; 170d0 <grisu3_diy_fp_encode_double@@Base+0xc6c>
   16fb4:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fb8:	vldr	d6, [pc, #264]	; 170c8 <grisu3_diy_fp_encode_double@@Base+0xc64>
   16fbc:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fc0:	vldr	d6, [pc, #248]	; 170c0 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   16fc4:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fc8:	vldr	d6, [pc, #232]	; 170b8 <grisu3_diy_fp_encode_double@@Base+0xc54>
   16fcc:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fd0:	vldr	d6, [pc, #216]	; 170b0 <grisu3_diy_fp_encode_double@@Base+0xc4c>
   16fd4:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fd8:	vldr	d6, [pc, #200]	; 170a8 <grisu3_diy_fp_encode_double@@Base+0xc44>
   16fdc:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fe0:	vldr	d6, [pc, #184]	; 170a0 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   16fe4:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16fe8:	vldr	d6, [pc, #168]	; 17098 <grisu3_diy_fp_encode_double@@Base+0xc34>
   16fec:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16ff0:	vldr	d6, [pc, #152]	; 17090 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   16ff4:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   16ff8:	vldr	d6, [pc, #136]	; 17088 <grisu3_diy_fp_encode_double@@Base+0xc24>
   16ffc:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   17000:	vldr	d6, [pc, #120]	; 17080 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   17004:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   17008:	vldr	d6, [pc, #104]	; 17078 <grisu3_diy_fp_encode_double@@Base+0xc14>
   1700c:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   17010:	vldr	d6, [pc, #88]	; 17070 <grisu3_diy_fp_encode_double@@Base+0xc0c>
   17014:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   17018:	vldr	d6, [pc, #72]	; 17068 <grisu3_diy_fp_encode_double@@Base+0xc04>
   1701c:	b	16f70 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   17020:	mov	r3, r6
   17024:	mov	r2, r5
   17028:	str	ip, [sp]
   1702c:	mov	r0, sl
   17030:	mov	r1, fp
   17034:	str	r8, [sp, #4]
   17038:	bl	16464 <grisu3_diy_fp_encode_double@@Base>
   1703c:	cmp	r0, #0
   17040:	bne	16d30 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   17044:	add	r1, sp, #36	; 0x24
   17048:	mov	r0, r7
   1704c:	bl	12480 <strtod@plt>
   17050:	ldr	r3, [sp, #36]	; 0x24
   17054:	vstr	d0, [r8]
   17058:	cmp	r4, r3
   1705c:	movcs	r4, r3
   17060:	mov	r7, r4
   17064:	b	16a8c <grisu3_diy_fp_encode_double@@Base+0x628>
   17068:			; <UNDEFINED> instruction: 0x064dd592
   1706c:	strmi	pc, [r0], #207	; 0xcf
   17070:	usatle	lr, #2, r0, asr #30
   17074:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   17078:	ldmvc	r5!, {r6, sl, fp, pc}
   1707c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   17080:	addsvs	r3, r1, r0, lsl #26
   17084:	mvnmi	r5, #228, 16	; 0xe40000
   17088:	strbvs	ip, [lr, -r0, lsl #16]
   1708c:			; <UNDEFINED> instruction: 0x43abc16d
   17090:	ldrbhi	sl, [r8]
   17094:	cmnmi	r6, #1459617792	; 0x57000000
   17098:	strbcc	r8, [r0, r0]!
   1709c:	movtmi	ip, #4985	; 0x1379
   170a0:	ldrtcs	r0, [r4], -r0
   170a4:	movwmi	r6, #52213	; 0xcbf5
   170a8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   170ac:	sbcsmi	fp, r6, #196, 24	; 0xc400
   170b0:	strb	r0, [r0, #-0]
   170b4:	adcmi	r3, r2, #156	; 0x9c
   170b8:	andge	r0, r0, #0
   170bc:	rsbmi	r1, sp, #148, 20	; 0x94000
   170c0:	stmda	r0, {}	; <UNPREDICTABLE>
   170c4:	eorsmi	r4, r7, #7733248	; 0x760000
   170c8:	andcs	r0, r0, r0
   170cc:	andmi	sl, r2, #95	; 0x5f
   170d0:	andeq	r0, r0, r0
   170d4:	bicmi	ip, sp, r5, ror #26
   170d8:	andeq	r0, r0, r0
   170dc:	orrsmi	sp, r7, r4, lsl #15
   170e0:	andeq	r0, r0, r0
   170e4:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   170e8:	andeq	r0, r0, r0
   170ec:	smlawbmi	lr, r0, r4, r8
   170f0:	andeq	r0, r0, r0
   170f4:	rscsmi	r6, r8, r0, lsl #20
   170f8:	andeq	r0, r0, r0
   170fc:	sbcmi	r8, r3, r0, lsl #16
   17100:	andeq	r0, r0, r0
   17104:	addmi	r4, pc, r0
   17108:	andeq	r0, r0, r0
   1710c:	subsmi	r0, r9, r0
   17110:	andeq	r0, r0, r0
   17114:	eormi	r0, r4, r0

00017118 <flatcc_json_parser_error_string@@Base>:
   17118:	cmp	r0, #34	; 0x22
   1711c:	ldrls	r3, [pc, #12]	; 17130 <flatcc_json_parser_error_string@@Base+0x18>
   17120:	addls	r3, r3, r0, lsl #2
   17124:	ldrls	r0, [r3, #1476]	; 0x5c4
   17128:	ldrhi	r0, [pc, #4]	; 17134 <flatcc_json_parser_error_string@@Base+0x1c>
   1712c:	bx	lr
   17130:	andeq	sl, r1, r8, lsr #5
   17134:	andeq	sl, r1, r1, lsl #25

00017138 <flatcc_json_parser_set_error@@Base>:
   17138:	ldr	ip, [r0, #24]
   1713c:	cmp	ip, #0
   17140:	bne	1715c <flatcc_json_parser_set_error@@Base+0x24>
   17144:	str	r3, [r0, #24]
   17148:	ldr	r3, [r0, #4]
   1714c:	str	r1, [r0, #36]	; 0x24
   17150:	sub	r3, r1, r3
   17154:	add	r3, r3, #1
   17158:	str	r3, [r0, #20]
   1715c:	mov	r0, r2
   17160:	bx	lr
   17164:	ldr	r3, [r0, #12]
   17168:	cmp	r3, #0
   1716c:	beq	171fc <flatcc_json_parser_set_error@@Base+0xc4>
   17170:	mov	r3, r1
   17174:	push	{lr}		; (str lr, [sp, #-4]!)
   17178:	mov	lr, #0
   1717c:	cmp	r3, r2
   17180:	mov	r1, r3
   17184:	bne	1719c <flatcc_json_parser_set_error@@Base+0x64>
   17188:	cmp	lr, #46	; 0x2e
   1718c:	bne	17224 <flatcc_json_parser_set_error@@Base+0xec>
   17190:	pop	{lr}		; (ldr lr, [sp], #4)
   17194:	mov	r3, #5
   17198:	b	17138 <flatcc_json_parser_set_error@@Base>
   1719c:	ldrb	ip, [r3], #1
   171a0:	cmp	ip, #32
   171a4:	bls	17188 <flatcc_json_parser_set_error@@Base+0x50>
   171a8:	cmp	ip, #46	; 0x2e
   171ac:	cmpne	ip, #95	; 0x5f
   171b0:	beq	171d8 <flatcc_json_parser_set_error@@Base+0xa0>
   171b4:	tst	ip, #128	; 0x80
   171b8:	bne	171d8 <flatcc_json_parser_set_error@@Base+0xa0>
   171bc:	sub	lr, ip, #48	; 0x30
   171c0:	cmp	lr, #9
   171c4:	bls	171d8 <flatcc_json_parser_set_error@@Base+0xa0>
   171c8:	orr	lr, ip, #32
   171cc:	sub	lr, lr, #97	; 0x61
   171d0:	cmp	lr, #25
   171d4:	bhi	17224 <flatcc_json_parser_set_error@@Base+0xec>
   171d8:	mov	lr, ip
   171dc:	b	1717c <flatcc_json_parser_set_error@@Base+0x44>
   171e0:	cmp	r3, #92	; 0x5c
   171e4:	bne	171f8 <flatcc_json_parser_set_error@@Base+0xc0>
   171e8:	sub	r3, r2, r1
   171ec:	cmp	r3, #1
   171f0:	ble	1721c <flatcc_json_parser_set_error@@Base+0xe4>
   171f4:	add	r1, r1, #1
   171f8:	add	r1, r1, #1
   171fc:	cmp	r1, r2
   17200:	beq	1721c <flatcc_json_parser_set_error@@Base+0xe4>
   17204:	ldrb	r3, [r1]
   17208:	cmp	r3, #34	; 0x22
   1720c:	bne	171e0 <flatcc_json_parser_set_error@@Base+0xa8>
   17210:	add	r1, r1, #1
   17214:	mov	r0, r1
   17218:	bx	lr
   1721c:	mov	r3, #20
   17220:	b	17198 <flatcc_json_parser_set_error@@Base+0x60>
   17224:	mov	r0, r1
   17228:	pop	{pc}		; (ldr pc, [sp], #4)
   1722c:	cmp	r1, r2
   17230:	beq	17240 <flatcc_json_parser_set_error@@Base+0x108>
   17234:	ldrb	r3, [r1]
   17238:	cmp	r3, #34	; 0x22
   1723c:	beq	17248 <flatcc_json_parser_set_error@@Base+0x110>
   17240:	mov	r3, #16
   17244:	b	17138 <flatcc_json_parser_set_error@@Base>
   17248:	add	r0, r1, #1
   1724c:	bx	lr
   17250:	cmp	r1, r2
   17254:	beq	17264 <flatcc_json_parser_set_error@@Base+0x12c>
   17258:	ldrb	r3, [r1]
   1725c:	cmp	r3, #34	; 0x22
   17260:	beq	1726c <flatcc_json_parser_set_error@@Base+0x134>
   17264:	mov	r3, #20
   17268:	b	17138 <flatcc_json_parser_set_error@@Base>
   1726c:	add	r0, r1, #1
   17270:	bx	lr

00017274 <flatcc_json_parser_string_part@@Base>:
   17274:	cmp	r2, r1
   17278:	bne	172e8 <flatcc_json_parser_string_part@@Base+0x74>
   1727c:	mov	r3, #20
   17280:	mov	r1, r2
   17284:	b	172d8 <flatcc_json_parser_string_part@@Base+0x64>
   17288:	cmp	r2, r1
   1728c:	beq	172dc <flatcc_json_parser_string_part@@Base+0x68>
   17290:	mov	lr, r1
   17294:	ldrb	r3, [r1], #1
   17298:	cmp	r3, #34	; 0x22
   1729c:	cmpne	r3, #31
   172a0:	movhi	ip, #1
   172a4:	movls	ip, #0
   172a8:	cmp	r3, #92	; 0x5c
   172ac:	moveq	ip, #0
   172b0:	andne	ip, ip, #1
   172b4:	cmp	ip, #0
   172b8:	bne	17288 <flatcc_json_parser_string_part@@Base+0x14>
   172bc:	cmp	r3, #31
   172c0:	bls	172cc <flatcc_json_parser_string_part@@Base+0x58>
   172c4:	mov	r0, lr
   172c8:	pop	{pc}		; (ldr pc, [sp], #4)
   172cc:	mov	r3, #17
   172d0:	mov	r1, lr
   172d4:	pop	{lr}		; (ldr lr, [sp], #4)
   172d8:	b	17138 <flatcc_json_parser_set_error@@Base>
   172dc:	mov	r3, #20
   172e0:	mov	r1, r2
   172e4:	b	172d4 <flatcc_json_parser_string_part@@Base+0x60>
   172e8:	push	{lr}		; (str lr, [sp, #-4]!)
   172ec:	b	17290 <flatcc_json_parser_string_part@@Base+0x1c>

000172f0 <flatcc_json_parser_space_ext@@Base>:
   172f0:	mov	r3, r1
   172f4:	cmp	r3, r2
   172f8:	mov	r1, r3
   172fc:	bne	1730c <flatcc_json_parser_space_ext@@Base+0x1c>
   17300:	mov	r1, r2
   17304:	mov	r0, r1
   17308:	bx	lr
   1730c:	ldrb	ip, [r1]
   17310:	add	r3, r3, #1
   17314:	cmp	ip, #32
   17318:	beq	172f4 <flatcc_json_parser_space_ext@@Base+0x4>
   1731c:	ldrb	r3, [r1]
   17320:	cmp	r3, #32
   17324:	bhi	17304 <flatcc_json_parser_space_ext@@Base+0x14>
   17328:	cmp	r3, #10
   1732c:	beq	17378 <flatcc_json_parser_space_ext@@Base+0x88>
   17330:	bhi	17344 <flatcc_json_parser_space_ext@@Base+0x54>
   17334:	cmp	r3, #9
   17338:	beq	17398 <flatcc_json_parser_space_ext@@Base+0xa8>
   1733c:	mov	r3, #5
   17340:	b	17138 <flatcc_json_parser_set_error@@Base>
   17344:	cmp	r3, #13
   17348:	beq	17358 <flatcc_json_parser_space_ext@@Base+0x68>
   1734c:	cmp	r3, #32
   17350:	beq	172f0 <flatcc_json_parser_space_ext@@Base>
   17354:	b	1733c <flatcc_json_parser_space_ext@@Base+0x4c>
   17358:	sub	r3, r2, r1
   1735c:	cmp	r3, #1
   17360:	ldrbgt	r3, [r1, #1]
   17364:	movle	r3, #0
   17368:	subgt	r3, r3, #10
   1736c:	clzgt	r3, r3
   17370:	lsrgt	r3, r3, #5
   17374:	add	r1, r1, r3
   17378:	ldr	r3, [r0, #16]
   1737c:	add	r1, r1, #1
   17380:	str	r1, [r0, #4]
   17384:	add	r3, r3, #1
   17388:	str	r3, [r0, #16]
   1738c:	cmp	r2, r1
   17390:	bne	1731c <flatcc_json_parser_space_ext@@Base+0x2c>
   17394:	b	17300 <flatcc_json_parser_space_ext@@Base+0x10>
   17398:	add	r1, r1, #1
   1739c:	b	1738c <flatcc_json_parser_space_ext@@Base+0x9c>
   173a0:	sub	r3, r2, r1
   173a4:	cmp	r3, #1
   173a8:	ble	173cc <flatcc_json_parser_space_ext@@Base+0xdc>
   173ac:	ldrb	r3, [r1]
   173b0:	cmp	r3, #32
   173b4:	bhi	173d0 <flatcc_json_parser_space_ext@@Base+0xe0>
   173b8:	bne	173cc <flatcc_json_parser_space_ext@@Base+0xdc>
   173bc:	ldrb	r3, [r1, #1]
   173c0:	cmp	r3, #32
   173c4:	addhi	r1, r1, #1
   173c8:	bhi	173d0 <flatcc_json_parser_space_ext@@Base+0xe0>
   173cc:	b	172f0 <flatcc_json_parser_space_ext@@Base>
   173d0:	mov	r0, r1
   173d4:	bx	lr
   173d8:	push	{r4, r5, r6, lr}
   173dc:	mov	r5, r3
   173e0:	mov	r6, r0
   173e4:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   173e8:	cmp	r2, r0
   173ec:	moveq	r3, #0
   173f0:	beq	1747c <flatcc_json_parser_space_ext@@Base+0x18c>
   173f4:	ldrb	r3, [r0]
   173f8:	mov	r4, r2
   173fc:	cmp	r3, #44	; 0x2c
   17400:	beq	17434 <flatcc_json_parser_space_ext@@Base+0x144>
   17404:	mov	r3, #0
   17408:	str	r3, [r5]
   1740c:	ldrb	r3, [r0]
   17410:	cmp	r3, #93	; 0x5d
   17414:	movne	r3, #9
   17418:	movne	r1, r0
   1741c:	bne	17458 <flatcc_json_parser_space_ext@@Base+0x168>
   17420:	mov	r2, r4
   17424:	add	r1, r0, #1
   17428:	mov	r0, r6
   1742c:	pop	{r4, r5, r6, lr}
   17430:	b	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   17434:	add	r1, r0, #1
   17438:	mov	r0, r6
   1743c:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   17440:	cmp	r2, r0
   17444:	bne	17464 <flatcc_json_parser_space_ext@@Base+0x174>
   17448:	mov	r3, #0
   1744c:	mov	r1, r2
   17450:	str	r3, [r5]
   17454:	mov	r3, #9
   17458:	mov	r0, r6
   1745c:	pop	{r4, r5, r6, lr}
   17460:	b	17138 <flatcc_json_parser_set_error@@Base>
   17464:	ldrb	r3, [r0]
   17468:	cmp	r3, #93	; 0x5d
   1746c:	movne	r3, #1
   17470:	moveq	r3, #0
   17474:	streq	r3, [r5]
   17478:	beq	17420 <flatcc_json_parser_space_ext@@Base+0x130>
   1747c:	str	r3, [r5]
   17480:	pop	{r4, r5, r6, pc}
   17484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17488:	sub	sp, sp, #28
   1748c:	mov	fp, r3
   17490:	mov	ip, #0
   17494:	cmp	r1, r2
   17498:	mov	r6, r0
   1749c:	mov	r4, r1
   174a0:	ldr	r3, [sp, #64]	; 0x40
   174a4:	mov	r5, r2
   174a8:	strb	ip, [r3]
   174ac:	beq	174e0 <flatcc_json_parser_space_ext@@Base+0x1f0>
   174b0:	ldrb	r3, [r1]
   174b4:	cmp	r3, #34	; 0x22
   174b8:	addeq	r4, r1, #1
   174bc:	streq	ip, [r0, #12]
   174c0:	beq	174e0 <flatcc_json_parser_space_ext@@Base+0x1f0>
   174c4:	cmp	r3, #46	; 0x2e
   174c8:	movne	r3, #1
   174cc:	strne	r3, [r0, #12]
   174d0:	bne	174e0 <flatcc_json_parser_space_ext@@Base+0x1f0>
   174d4:	mov	r3, #5
   174d8:	bl	17138 <flatcc_json_parser_set_error@@Base>
   174dc:	mov	r4, r0
   174e0:	ldr	r3, [r6, #12]
   174e4:	cmp	r3, #0
   174e8:	bne	17500 <flatcc_json_parser_space_ext@@Base+0x210>
   174ec:	mov	r1, r4
   174f0:	mov	r2, r5
   174f4:	mov	r0, r6
   174f8:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   174fc:	mov	r4, r0
   17500:	cmp	r5, r4
   17504:	beq	17608 <flatcc_json_parser_space_ext@@Base+0x318>
   17508:	mov	r7, #0
   1750c:	mov	r9, r7
   17510:	mov	r8, fp
   17514:	mov	sl, r4
   17518:	add	r3, sp, #12
   1751c:	mov	r1, r4
   17520:	mov	r2, r5
   17524:	mov	r0, r6
   17528:	str	r3, [sp, #4]
   1752c:	add	r3, sp, #16
   17530:	str	r3, [sp]
   17534:	add	r3, sp, #8
   17538:	ldr	ip, [r8]
   1753c:	blx	ip
   17540:	cmp	r5, r0
   17544:	mov	r4, r0
   17548:	beq	17608 <flatcc_json_parser_space_ext@@Base+0x318>
   1754c:	cmp	sl, r0
   17550:	bne	1759c <flatcc_json_parser_space_ext@@Base+0x2ac>
   17554:	ldr	r3, [r8, #4]!
   17558:	mov	sl, r0
   1755c:	cmp	r3, #0
   17560:	bne	17518 <flatcc_json_parser_space_ext@@Base+0x228>
   17564:	mov	r3, #23
   17568:	b	1757c <flatcc_json_parser_space_ext@@Base+0x28c>
   1756c:	ldr	r3, [r6, #12]
   17570:	cmp	r3, #0
   17574:	beq	175a4 <flatcc_json_parser_space_ext@@Base+0x2b4>
   17578:	mov	r3, #14
   1757c:	mov	r1, r4
   17580:	mov	r2, r5
   17584:	mov	r0, r6
   17588:	bl	17138 <flatcc_json_parser_set_error@@Base>
   1758c:	mov	r4, r0
   17590:	b	17608 <flatcc_json_parser_space_ext@@Base+0x318>
   17594:	mov	r4, r5
   17598:	b	17608 <flatcc_json_parser_space_ext@@Base+0x318>
   1759c:	cmp	r7, #0
   175a0:	bne	1756c <flatcc_json_parser_space_ext@@Base+0x27c>
   175a4:	ldr	r3, [sp, #8]
   175a8:	cmp	r3, #0
   175ac:	movne	r3, #8
   175b0:	bne	175cc <flatcc_json_parser_space_ext@@Base+0x2dc>
   175b4:	ldrd	r2, [sp, #16]
   175b8:	cmp	r3, #0
   175bc:	cmpeq	r2, #255	; 0xff
   175c0:	uxtbls	r9, r2
   175c4:	bls	175e4 <flatcc_json_parser_space_ext@@Base+0x2f4>
   175c8:	mov	r3, #7
   175cc:	mov	r2, r5
   175d0:	mov	r1, r4
   175d4:	mov	r0, r6
   175d8:	bl	17138 <flatcc_json_parser_set_error@@Base>
   175dc:	cmp	r5, r0
   175e0:	beq	17594 <flatcc_json_parser_space_ext@@Base+0x2a4>
   175e4:	ldr	r3, [sp, #64]	; 0x40
   175e8:	add	r7, r7, #1
   175ec:	ldr	r2, [sp, #64]	; 0x40
   175f0:	ldrb	r3, [r3]
   175f4:	add	r3, r9, r3
   175f8:	strb	r3, [r2]
   175fc:	ldr	r3, [sp, #12]
   17600:	cmp	r3, #0
   17604:	bne	17510 <flatcc_json_parser_space_ext@@Base+0x220>
   17608:	mov	r0, r4
   1760c:	add	sp, sp, #28
   17610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17614:	cmp	r1, r2
   17618:	push	{r4, r5, r6, lr}
   1761c:	mov	ip, r2
   17620:	mov	r6, r0
   17624:	beq	17634 <flatcc_json_parser_space_ext@@Base+0x344>
   17628:	ldrb	r4, [r1]
   1762c:	cmp	r4, #91	; 0x5b
   17630:	beq	17650 <flatcc_json_parser_space_ext@@Base+0x360>
   17634:	mov	r2, #0
   17638:	mov	r0, r6
   1763c:	pop	{r4, r5, r6, lr}
   17640:	str	r2, [r3]
   17644:	mov	r3, #22
   17648:	mov	r2, ip
   1764c:	b	17138 <flatcc_json_parser_set_error@@Base>
   17650:	add	r1, r1, #1
   17654:	mov	r5, r3
   17658:	mov	r4, r2
   1765c:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   17660:	cmp	r2, r0
   17664:	beq	1768c <flatcc_json_parser_space_ext@@Base+0x39c>
   17668:	ldrb	r3, [r0]
   1766c:	cmp	r3, #93	; 0x5d
   17670:	bne	1768c <flatcc_json_parser_space_ext@@Base+0x39c>
   17674:	mov	r3, #0
   17678:	add	r1, r0, #1
   1767c:	mov	r0, r6
   17680:	str	r3, [r5]
   17684:	pop	{r4, r5, r6, lr}
   17688:	b	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   1768c:	mov	r3, #1
   17690:	str	r3, [r5]
   17694:	pop	{r4, r5, r6, pc}
   17698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1769c:	mov	r8, r3
   176a0:	sub	sp, sp, #20
   176a4:	mov	r3, #0
   176a8:	mov	r5, r0
   176ac:	mov	r4, r1
   176b0:	mov	r6, r2
   176b4:	ldr	r0, [r0]
   176b8:	str	r3, [sp, #8]
   176bc:	ldr	r9, [sp, #56]	; 0x38
   176c0:	ldr	sl, [sp, #64]	; 0x40
   176c4:	bl	147d8 <flatcc_builder_start_offset_vector@@Base>
   176c8:	subs	r7, r0, #0
   176cc:	bne	17740 <flatcc_json_parser_space_ext@@Base+0x450>
   176d0:	mov	r1, r4
   176d4:	add	r3, sp, #12
   176d8:	mov	r2, r6
   176dc:	mov	r0, r5
   176e0:	bl	17614 <flatcc_json_parser_space_ext@@Base+0x324>
   176e4:	mov	r4, r0
   176e8:	add	fp, sp, #8
   176ec:	ldr	r3, [sp, #12]
   176f0:	cmp	r3, #0
   176f4:	bne	17748 <flatcc_json_parser_space_ext@@Base+0x458>
   176f8:	cmp	r7, r9
   176fc:	bne	17750 <flatcc_json_parser_space_ext@@Base+0x460>
   17700:	mov	r1, r8
   17704:	ldr	r0, [r5]
   17708:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   1770c:	mov	r1, r0
   17710:	ldr	r0, [r5]
   17714:	bl	15228 <flatcc_builder_end_offset_vector_for_unions@@Base>
   17718:	cmp	r0, #0
   1771c:	str	r0, [sp, #8]
   17720:	beq	17740 <flatcc_json_parser_space_ext@@Base+0x450>
   17724:	ldrh	r1, [sp, #60]	; 0x3c
   17728:	ldr	r0, [r5]
   1772c:	bl	159c0 <flatcc_builder_table_add_offset@@Base>
   17730:	cmp	r0, #0
   17734:	ldrne	r3, [sp, #8]
   17738:	strne	r3, [r0]
   1773c:	bne	17768 <flatcc_json_parser_space_ext@@Base+0x478>
   17740:	mov	r3, #33	; 0x21
   17744:	b	17754 <flatcc_json_parser_space_ext@@Base+0x464>
   17748:	cmp	r7, r9
   1774c:	bne	17774 <flatcc_json_parser_space_ext@@Base+0x484>
   17750:	mov	r3, #30
   17754:	mov	r1, r4
   17758:	mov	r2, r6
   1775c:	mov	r0, r5
   17760:	bl	17138 <flatcc_json_parser_set_error@@Base>
   17764:	mov	r4, r0
   17768:	mov	r0, r4
   1776c:	add	sp, sp, #20
   17770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17774:	mov	r1, r8
   17778:	ldr	r0, [r5]
   1777c:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   17780:	ldrb	r3, [r0, r7]
   17784:	mov	r1, r4
   17788:	mov	r2, r6
   1778c:	mov	r0, r5
   17790:	str	fp, [sp]
   17794:	blx	sl
   17798:	cmp	r6, r0
   1779c:	mov	r4, r0
   177a0:	beq	17768 <flatcc_json_parser_space_ext@@Base+0x478>
   177a4:	mov	r1, #1
   177a8:	ldr	r0, [r5]
   177ac:	bl	143e8 <flatcc_builder_extend_offset_vector@@Base>
   177b0:	cmp	r0, #0
   177b4:	beq	17740 <flatcc_json_parser_space_ext@@Base+0x450>
   177b8:	ldr	r3, [sp, #8]
   177bc:	mov	r1, r4
   177c0:	mov	r2, r6
   177c4:	add	r7, r7, #1
   177c8:	str	r3, [r0]
   177cc:	add	r3, sp, #12
   177d0:	mov	r0, r5
   177d4:	bl	173d8 <flatcc_json_parser_space_ext@@Base+0xe8>
   177d8:	mov	r4, r0
   177dc:	b	176ec <flatcc_json_parser_space_ext@@Base+0x3fc>

000177e0 <flatcc_json_parser_string_escape@@Base>:
   177e0:	push	{r4, r5, lr}
   177e4:	sub	lr, r2, r1
   177e8:	cmp	lr, #1
   177ec:	ble	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   177f0:	ldrb	ip, [r1]
   177f4:	cmp	ip, #92	; 0x5c
   177f8:	beq	17810 <flatcc_json_parser_string_escape@@Base+0x30>
   177fc:	mov	ip, #0
   17800:	strb	ip, [r3]
   17804:	mov	r3, #18
   17808:	pop	{r4, r5, lr}
   1780c:	b	17138 <flatcc_json_parser_set_error@@Base>
   17810:	ldrb	ip, [r1, #1]
   17814:	cmp	ip, #102	; 0x66
   17818:	beq	17aac <flatcc_json_parser_string_escape@@Base+0x2cc>
   1781c:	bhi	1786c <flatcc_json_parser_string_escape@@Base+0x8c>
   17820:	cmp	ip, #47	; 0x2f
   17824:	beq	17834 <flatcc_json_parser_string_escape@@Base+0x54>
   17828:	bhi	17844 <flatcc_json_parser_string_escape@@Base+0x64>
   1782c:	cmp	ip, #34	; 0x22
   17830:	bne	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   17834:	mov	r2, #1
   17838:	strb	r2, [r3]
   1783c:	strb	ip, [r3, #1]
   17840:	b	17864 <flatcc_json_parser_string_escape@@Base+0x84>
   17844:	cmp	ip, #92	; 0x5c
   17848:	beq	17834 <flatcc_json_parser_string_escape@@Base+0x54>
   1784c:	cmp	ip, #98	; 0x62
   17850:	moveq	r2, #1
   17854:	strbeq	r2, [r3]
   17858:	moveq	r2, #8
   1785c:	bne	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   17860:	strb	r2, [r3, #1]
   17864:	add	r0, r1, #2
   17868:	pop	{r4, r5, pc}
   1786c:	cmp	ip, #116	; 0x74
   17870:	beq	17a8c <flatcc_json_parser_string_escape@@Base+0x2ac>
   17874:	bhi	17898 <flatcc_json_parser_string_escape@@Base+0xb8>
   17878:	cmp	ip, #110	; 0x6e
   1787c:	beq	17a9c <flatcc_json_parser_string_escape@@Base+0x2bc>
   17880:	cmp	ip, #114	; 0x72
   17884:	moveq	r2, #1
   17888:	strbeq	r2, [r3]
   1788c:	moveq	r2, #13
   17890:	beq	17860 <flatcc_json_parser_string_escape@@Base+0x80>
   17894:	b	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   17898:	cmp	ip, #117	; 0x75
   1789c:	beq	1792c <flatcc_json_parser_string_escape@@Base+0x14c>
   178a0:	cmp	ip, #120	; 0x78
   178a4:	bne	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   178a8:	mov	ip, #1
   178ac:	cmp	lr, #3
   178b0:	strb	ip, [r3]
   178b4:	ble	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   178b8:	ldrb	ip, [r1, #2]
   178bc:	sub	lr, ip, #48	; 0x30
   178c0:	uxtb	r4, lr
   178c4:	cmp	r4, #9
   178c8:	lslls	ip, lr, #4
   178cc:	bls	178e8 <flatcc_json_parser_string_escape@@Base+0x108>
   178d0:	orr	ip, ip, #32
   178d4:	sub	lr, ip, #97	; 0x61
   178d8:	cmp	lr, #5
   178dc:	bhi	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   178e0:	sub	ip, ip, #87	; 0x57
   178e4:	lsl	ip, ip, #4
   178e8:	ldrb	lr, [r1, #3]
   178ec:	uxtb	ip, ip
   178f0:	sub	r4, lr, #48	; 0x30
   178f4:	uxtb	r4, r4
   178f8:	cmp	r4, #9
   178fc:	orrls	ip, r4, ip
   17900:	bls	17920 <flatcc_json_parser_string_escape@@Base+0x140>
   17904:	orr	lr, lr, #32
   17908:	sub	r4, lr, #97	; 0x61
   1790c:	cmp	r4, #5
   17910:	bhi	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   17914:	sub	lr, lr, #87	; 0x57
   17918:	orr	ip, lr, ip
   1791c:	uxtb	ip, ip
   17920:	add	r0, r1, #4
   17924:	strb	ip, [r3, #1]
   17928:	pop	{r4, r5, pc}
   1792c:	cmp	lr, #5
   17930:	ble	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   17934:	ldrb	ip, [r1, #2]
   17938:	sub	lr, ip, #48	; 0x30
   1793c:	uxtb	r4, lr
   17940:	cmp	r4, #9
   17944:	lslls	ip, lr, #12
   17948:	uxthls	ip, ip
   1794c:	bls	1796c <flatcc_json_parser_string_escape@@Base+0x18c>
   17950:	orr	ip, ip, #32
   17954:	sub	lr, ip, #97	; 0x61
   17958:	cmp	lr, #5
   1795c:	bhi	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   17960:	sub	ip, ip, #87	; 0x57
   17964:	lsl	ip, ip, #12
   17968:	and	ip, ip, #61440	; 0xf000
   1796c:	ldrb	lr, [r1, #3]
   17970:	sub	r4, lr, #48	; 0x30
   17974:	uxtb	r5, r4
   17978:	cmp	r5, #9
   1797c:	uxthls	r4, r4
   17980:	orrls	ip, ip, r4, lsl #8
   17984:	bls	179a4 <flatcc_json_parser_string_escape@@Base+0x1c4>
   17988:	orr	lr, lr, #32
   1798c:	sub	r4, lr, #97	; 0x61
   17990:	cmp	r4, #5
   17994:	bhi	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   17998:	sub	lr, lr, #87	; 0x57
   1799c:	uxth	lr, lr
   179a0:	orr	ip, ip, lr, lsl #8
   179a4:	ldrb	lr, [r1, #4]
   179a8:	and	ip, ip, #65280	; 0xff00
   179ac:	sub	r4, lr, #48	; 0x30
   179b0:	uxtb	r5, r4
   179b4:	cmp	r5, #9
   179b8:	uxthls	r4, r4
   179bc:	orrls	ip, ip, r4, lsl #4
   179c0:	bls	179e0 <flatcc_json_parser_string_escape@@Base+0x200>
   179c4:	orr	lr, lr, #32
   179c8:	sub	r4, lr, #97	; 0x61
   179cc:	cmp	r4, #5
   179d0:	bhi	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   179d4:	sub	lr, lr, #87	; 0x57
   179d8:	uxth	lr, lr
   179dc:	orr	ip, ip, lr, lsl #4
   179e0:	ldrb	lr, [r1, #5]
   179e4:	uxth	ip, ip
   179e8:	sub	r4, lr, #48	; 0x30
   179ec:	uxtb	r5, r4
   179f0:	cmp	r5, #9
   179f4:	orrls	r2, ip, r4
   179f8:	bls	17a14 <flatcc_json_parser_string_escape@@Base+0x234>
   179fc:	orr	lr, lr, #32
   17a00:	sub	r4, lr, #97	; 0x61
   17a04:	cmp	r4, #5
   17a08:	bhi	177fc <flatcc_json_parser_string_escape@@Base+0x1c>
   17a0c:	sub	r2, lr, #87	; 0x57
   17a10:	orr	r2, ip, r2
   17a14:	uxth	r2, r2
   17a18:	cmp	r2, #127	; 0x7f
   17a1c:	movls	r0, #1
   17a20:	strbls	r2, [r3, #1]
   17a24:	strbls	r0, [r3]
   17a28:	bls	17a58 <flatcc_json_parser_string_escape@@Base+0x278>
   17a2c:	and	ip, r2, #63	; 0x3f
   17a30:	cmp	r2, #2048	; 0x800
   17a34:	lsr	r0, r2, #6
   17a38:	orr	ip, ip, #128	; 0x80
   17a3c:	bcs	17a60 <flatcc_json_parser_string_escape@@Base+0x280>
   17a40:	mov	r2, #2
   17a44:	strb	r2, [r3]
   17a48:	mvn	r2, r0, lsl #26
   17a4c:	strb	ip, [r3, #2]
   17a50:	mvn	r2, r2, lsr #26
   17a54:	strb	r2, [r3, #1]
   17a58:	add	r0, r1, #6
   17a5c:	pop	{r4, r5, pc}
   17a60:	mov	lr, #3
   17a64:	strb	lr, [r3]
   17a68:	mvn	lr, #31
   17a6c:	orr	r2, lr, r2, lsr #12
   17a70:	strb	ip, [r3, #3]
   17a74:	strb	r2, [r3, #1]
   17a78:	and	r2, r0, #63	; 0x3f
   17a7c:	mvn	r2, r2, lsl #25
   17a80:	mvn	r2, r2, lsr #25
   17a84:	strb	r2, [r3, #2]
   17a88:	b	17a58 <flatcc_json_parser_string_escape@@Base+0x278>
   17a8c:	mov	r2, #1
   17a90:	strb	r2, [r3]
   17a94:	mov	r2, #9
   17a98:	b	17860 <flatcc_json_parser_string_escape@@Base+0x80>
   17a9c:	mov	r2, #1
   17aa0:	strb	r2, [r3]
   17aa4:	mov	r2, #10
   17aa8:	b	17860 <flatcc_json_parser_string_escape@@Base+0x80>
   17aac:	mov	r2, #1
   17ab0:	strb	r2, [r3]
   17ab4:	mov	r2, #12
   17ab8:	b	17860 <flatcc_json_parser_string_escape@@Base+0x80>

00017abc <flatcc_json_parser_skip_constant@@Base>:
   17abc:	push	{r4, r5, r6, lr}
   17ac0:	mov	r6, r0
   17ac4:	mov	r4, r1
   17ac8:	mov	r5, r2
   17acc:	cmp	r4, r5
   17ad0:	bne	17adc <flatcc_json_parser_skip_constant@@Base+0x20>
   17ad4:	mov	r0, r4
   17ad8:	pop	{r4, r5, r6, pc}
   17adc:	ldrb	r3, [r4]
   17ae0:	sub	r2, r3, #95	; 0x5f
   17ae4:	clz	r2, r2
   17ae8:	lsr	r2, r2, #5
   17aec:	orrs	r2, r2, r3, lsr #7
   17af0:	bne	17b04 <flatcc_json_parser_skip_constant@@Base+0x48>
   17af4:	sub	r2, r3, #48	; 0x30
   17af8:	cmp	r3, #46	; 0x2e
   17afc:	cmpne	r2, #9
   17b00:	bhi	17b10 <flatcc_json_parser_skip_constant@@Base+0x54>
   17b04:	add	r0, r4, #1
   17b08:	mov	r4, r0
   17b0c:	b	17acc <flatcc_json_parser_skip_constant@@Base+0x10>
   17b10:	orr	r3, r3, #32
   17b14:	sub	r3, r3, #97	; 0x61
   17b18:	cmp	r3, #25
   17b1c:	bls	17b04 <flatcc_json_parser_skip_constant@@Base+0x48>
   17b20:	mov	r2, r5
   17b24:	mov	r1, r4
   17b28:	mov	r0, r6
   17b2c:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   17b30:	cmp	r4, r0
   17b34:	bne	17b08 <flatcc_json_parser_skip_constant@@Base+0x4c>
   17b38:	pop	{r4, r5, r6, pc}

00017b3c <flatcc_json_parser_match_constant@@Base>:
   17b3c:	push	{r4, r5, r6, r7, r8, lr}
   17b40:	sub	lr, r2, r1
   17b44:	cmp	lr, r3
   17b48:	ldr	r4, [sp, #24]
   17b4c:	bgt	17b60 <flatcc_json_parser_match_constant@@Base+0x24>
   17b50:	mov	r3, #0
   17b54:	mov	r0, r1
   17b58:	str	r3, [r4]
   17b5c:	pop	{r4, r5, r6, r7, r8, pc}
   17b60:	mov	r7, r1
   17b64:	add	r5, r1, r3
   17b68:	ldr	r1, [r0, #12]
   17b6c:	mov	ip, r0
   17b70:	mov	r6, r2
   17b74:	cmp	r1, #0
   17b78:	beq	17bf0 <flatcc_json_parser_match_constant@@Base+0xb4>
   17b7c:	mov	r1, r5
   17b80:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   17b84:	cmp	r2, r0
   17b88:	bne	17b94 <flatcc_json_parser_match_constant@@Base+0x58>
   17b8c:	mov	r3, #0
   17b90:	b	17bb8 <flatcc_json_parser_match_constant@@Base+0x7c>
   17b94:	cmp	r5, r0
   17b98:	beq	17bd0 <flatcc_json_parser_match_constant@@Base+0x94>
   17b9c:	ldrb	r3, [r0]
   17ba0:	sub	r2, r3, #95	; 0x5f
   17ba4:	clz	r2, r2
   17ba8:	lsr	r2, r2, #5
   17bac:	orrs	r2, r2, r3, lsr #7
   17bb0:	beq	17bc0 <flatcc_json_parser_match_constant@@Base+0x84>
   17bb4:	mov	r3, #1
   17bb8:	str	r3, [r4]
   17bbc:	pop	{r4, r5, r6, r7, r8, pc}
   17bc0:	orr	r3, r3, #32
   17bc4:	sub	r3, r3, #97	; 0x61
   17bc8:	cmp	r3, #25
   17bcc:	bls	17bb4 <flatcc_json_parser_match_constant@@Base+0x78>
   17bd0:	mov	r3, #0
   17bd4:	str	r3, [r4]
   17bd8:	ldrb	r3, [r0]
   17bdc:	and	r2, r3, #223	; 0xdf
   17be0:	cmp	r3, #44	; 0x2c
   17be4:	cmpne	r2, #93	; 0x5d
   17be8:	movne	r0, r7
   17bec:	pop	{r4, r5, r6, r7, r8, pc}
   17bf0:	ldrb	r3, [r7, r3]
   17bf4:	cmp	r3, #32
   17bf8:	bne	17c28 <flatcc_json_parser_match_constant@@Base+0xec>
   17bfc:	add	r5, r5, #1
   17c00:	cmp	r5, r6
   17c04:	mov	r0, r5
   17c08:	beq	17b8c <flatcc_json_parser_match_constant@@Base+0x50>
   17c0c:	ldrb	r3, [r5]
   17c10:	add	r5, r5, #1
   17c14:	cmp	r3, #32
   17c18:	beq	17c00 <flatcc_json_parser_match_constant@@Base+0xc4>
   17c1c:	cmp	r3, #34	; 0x22
   17c20:	bne	17bb4 <flatcc_json_parser_match_constant@@Base+0x78>
   17c24:	b	17c50 <flatcc_json_parser_match_constant@@Base+0x114>
   17c28:	cmp	r3, #34	; 0x22
   17c2c:	beq	17c4c <flatcc_json_parser_match_constant@@Base+0x110>
   17c30:	cmp	r3, #92	; 0x5c
   17c34:	str	r1, [r4]
   17c38:	bne	17c64 <flatcc_json_parser_match_constant@@Base+0x128>
   17c3c:	mov	r1, r5
   17c40:	mov	r3, #18
   17c44:	pop	{r4, r5, r6, r7, r8, lr}
   17c48:	b	17138 <flatcc_json_parser_set_error@@Base>
   17c4c:	mov	r0, r5
   17c50:	add	r1, r0, #1
   17c54:	mov	r2, #0
   17c58:	mov	r0, ip
   17c5c:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   17c60:	b	17b8c <flatcc_json_parser_match_constant@@Base+0x50>
   17c64:	mov	r0, r7
   17c68:	pop	{r4, r5, r6, r7, r8, pc}

00017c6c <flatcc_json_parser_double@@Base>:
   17c6c:	push	{r4, r5, r6, r7, r8, lr}
   17c70:	mov	r4, #0
   17c74:	mov	r5, #0
   17c78:	cmp	r1, r2
   17c7c:	strd	r4, [r3]
   17c80:	beq	17d28 <flatcc_json_parser_double@@Base+0xbc>
   17c84:	ldrb	ip, [r1]
   17c88:	cmp	ip, #45	; 0x2d
   17c8c:	addeq	ip, r1, #1
   17c90:	movne	ip, r1
   17c94:	sub	lr, r2, ip
   17c98:	cmp	lr, #1
   17c9c:	ble	17ccc <flatcc_json_parser_double@@Base+0x60>
   17ca0:	ldrb	lr, [ip]
   17ca4:	cmp	lr, #46	; 0x2e
   17ca8:	beq	17cc0 <flatcc_json_parser_double@@Base+0x54>
   17cac:	cmp	lr, #48	; 0x30
   17cb0:	bne	17ccc <flatcc_json_parser_double@@Base+0x60>
   17cb4:	ldrb	ip, [ip, #1]
   17cb8:	cmp	ip, #48	; 0x30
   17cbc:	bne	17ccc <flatcc_json_parser_double@@Base+0x60>
   17cc0:	mov	r3, #6
   17cc4:	pop	{r4, r5, r6, r7, r8, lr}
   17cc8:	b	17138 <flatcc_json_parser_set_error@@Base>
   17ccc:	mov	r6, r1
   17cd0:	mov	r4, r2
   17cd4:	sub	r1, r4, r1
   17cd8:	mov	r5, r0
   17cdc:	mov	r2, r3
   17ce0:	mov	r0, r6
   17ce4:	mov	r7, r3
   17ce8:	bl	16994 <grisu3_diy_fp_encode_double@@Base+0x530>
   17cec:	cmp	r6, r0
   17cf0:	cmpne	r0, #0
   17cf4:	mov	r1, r0
   17cf8:	bne	17d28 <flatcc_json_parser_double@@Base+0xbc>
   17cfc:	vldr	d7, [r7]
   17d00:	mov	r2, r4
   17d04:	mov	r1, r6
   17d08:	mov	r0, r5
   17d0c:	vldr	d6, [pc, #28]	; 17d30 <flatcc_json_parser_double@@Base+0xc4>
   17d10:	vabs.f64	d7, d7
   17d14:	vcmp.f64	d7, d6
   17d18:	vmrs	APSR_nzcv, fpscr
   17d1c:	movgt	r3, #7
   17d20:	movle	r3, #6
   17d24:	b	17cc4 <flatcc_json_parser_double@@Base+0x58>
   17d28:	mov	r0, r1
   17d2c:	pop	{r4, r5, r6, r7, r8, pc}
   17d30:			; <UNDEFINED> instruction: 0xffffffff
   17d34:	svcvc	0x00efffff

00017d38 <flatcc_json_parser_float@@Base>:
   17d38:	mov	ip, #0
   17d3c:	cmp	r1, r2
   17d40:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17d44:	moveq	r0, r1
   17d48:	str	ip, [r3]
   17d4c:	beq	17e24 <flatcc_json_parser_float@@Base+0xec>
   17d50:	ldrb	ip, [r1]
   17d54:	mov	r7, r3
   17d58:	mov	r4, r2
   17d5c:	mov	r5, r1
   17d60:	mov	r6, r0
   17d64:	cmp	ip, #45	; 0x2d
   17d68:	addeq	ip, r1, #1
   17d6c:	movne	ip, r1
   17d70:	sub	r3, r2, ip
   17d74:	cmp	r3, #1
   17d78:	ble	17da4 <flatcc_json_parser_float@@Base+0x6c>
   17d7c:	ldrb	r2, [ip]
   17d80:	cmp	r2, #46	; 0x2e
   17d84:	beq	17d9c <flatcc_json_parser_float@@Base+0x64>
   17d88:	cmp	r2, #48	; 0x30
   17d8c:	bne	17da4 <flatcc_json_parser_float@@Base+0x6c>
   17d90:	ldrb	r3, [ip, #1]
   17d94:	cmp	r3, #48	; 0x30
   17d98:	bne	17da4 <flatcc_json_parser_float@@Base+0x6c>
   17d9c:	mov	r3, #6
   17da0:	b	17e14 <flatcc_json_parser_float@@Base+0xdc>
   17da4:	mov	r2, sp
   17da8:	sub	r1, r4, r5
   17dac:	mov	r0, r5
   17db0:	bl	16994 <grisu3_diy_fp_encode_double@@Base+0x530>
   17db4:	vldr	d6, [sp]
   17db8:	vldr	s15, [pc, #108]	; 17e2c <flatcc_json_parser_float@@Base+0xf4>
   17dbc:	vcvt.f32.f64	s14, d6
   17dc0:	vabs.f32	s11, s14
   17dc4:	vcmp.f32	s11, s15
   17dc8:	vmrs	APSR_nzcv, fpscr
   17dcc:	vstrle	s14, [r7]
   17dd0:	ble	17df0 <flatcc_json_parser_float@@Base+0xb8>
   17dd4:	vcmpe.f64	d6, #0.0
   17dd8:	vldr	s14, [pc, #80]	; 17e30 <flatcc_json_parser_float@@Base+0xf8>
   17ddc:	mov	r0, r5
   17de0:	vldr	s13, [pc, #76]	; 17e34 <flatcc_json_parser_float@@Base+0xfc>
   17de4:	vmrs	APSR_nzcv, fpscr
   17de8:	vmovpl.f32	s14, s13
   17dec:	vstr	s14, [r7]
   17df0:	cmp	r5, r0
   17df4:	cmpne	r0, #0
   17df8:	bne	17e24 <flatcc_json_parser_float@@Base+0xec>
   17dfc:	vldr	s14, [r7]
   17e00:	vabs.f32	s14, s14
   17e04:	vcmp.f32	s14, s15
   17e08:	vmrs	APSR_nzcv, fpscr
   17e0c:	movgt	r3, #7
   17e10:	ble	17d9c <flatcc_json_parser_float@@Base+0x64>
   17e14:	mov	r2, r4
   17e18:	mov	r1, r5
   17e1c:	mov	r0, r6
   17e20:	bl	17138 <flatcc_json_parser_set_error@@Base>
   17e24:	add	sp, sp, #12
   17e28:	pop	{r4, r5, r6, r7, pc}
   17e2c:	svcvc	0x007fffff
   17e30:			; <UNDEFINED> instruction: 0xff800000
   17e34:	svcvc	0x00800000

00017e38 <flatcc_json_parser_generic_json@@Base>:
   17e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e3c:	sub	sp, sp, #524	; 0x20c
   17e40:	mov	r9, #1
   17e44:	add	r6, sp, #8
   17e48:	mov	r3, #0
   17e4c:	mov	r5, r0
   17e50:	mov	r7, r1
   17e54:	mov	r4, r2
   17e58:	mov	r8, r6
   17e5c:	str	r3, [sp, #4]
   17e60:	mov	sl, r9
   17e64:	cmp	r7, r4
   17e68:	beq	18244 <flatcc_json_parser_generic_json@@Base+0x40c>
   17e6c:	cmp	r6, r8
   17e70:	beq	17f20 <flatcc_json_parser_generic_json@@Base+0xe8>
   17e74:	ldrb	r3, [r6, #-1]
   17e78:	cmp	r3, #125	; 0x7d
   17e7c:	bne	17f20 <flatcc_json_parser_generic_json@@Base+0xe8>
   17e80:	ldrb	r3, [r7]
   17e84:	cmp	r3, #34	; 0x22
   17e88:	moveq	r3, #0
   17e8c:	addeq	r7, r7, #1
   17e90:	streq	r3, [r5, #12]
   17e94:	beq	17ebc <flatcc_json_parser_generic_json@@Base+0x84>
   17e98:	cmp	r3, #46	; 0x2e
   17e9c:	strne	r9, [r5, #12]
   17ea0:	bne	17ebc <flatcc_json_parser_generic_json@@Base+0x84>
   17ea4:	mov	r1, r7
   17ea8:	mov	r3, #5
   17eac:	mov	r2, r4
   17eb0:	mov	r0, r5
   17eb4:	bl	17138 <flatcc_json_parser_set_error@@Base>
   17eb8:	mov	r7, r0
   17ebc:	mov	r2, r4
   17ec0:	mov	r1, r7
   17ec4:	mov	r0, r5
   17ec8:	bl	17164 <flatcc_json_parser_set_error@@Base+0x2c>
   17ecc:	mov	r1, r0
   17ed0:	mov	r0, r5
   17ed4:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   17ed8:	cmp	r4, r0
   17edc:	mov	r1, r0
   17ee0:	bne	17ef4 <flatcc_json_parser_generic_json@@Base+0xbc>
   17ee4:	mov	r3, #10
   17ee8:	mov	r2, r4
   17eec:	mov	r1, r4
   17ef0:	b	17f04 <flatcc_json_parser_generic_json@@Base+0xcc>
   17ef4:	ldrb	r3, [r0]
   17ef8:	cmp	r3, #58	; 0x3a
   17efc:	beq	17f10 <flatcc_json_parser_generic_json@@Base+0xd8>
   17f00:	mov	r3, #4
   17f04:	mov	r0, r5
   17f08:	bl	17138 <flatcc_json_parser_set_error@@Base>
   17f0c:	b	18240 <flatcc_json_parser_generic_json@@Base+0x408>
   17f10:	add	r1, r0, #1
   17f14:	mov	r0, r5
   17f18:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   17f1c:	mov	r7, r0
   17f20:	ldrb	r3, [r7]
   17f24:	cmp	r3, #57	; 0x39
   17f28:	bhi	17f64 <flatcc_json_parser_generic_json@@Base+0x12c>
   17f2c:	cmp	r3, #48	; 0x30
   17f30:	bcs	18020 <flatcc_json_parser_generic_json@@Base+0x1e8>
   17f34:	cmp	r3, #34	; 0x22
   17f38:	beq	17fac <flatcc_json_parser_generic_json@@Base+0x174>
   17f3c:	cmp	r3, #45	; 0x2d
   17f40:	beq	18020 <flatcc_json_parser_generic_json@@Base+0x1e8>
   17f44:	mov	r2, r4
   17f48:	mov	r1, r7
   17f4c:	mov	r0, r5
   17f50:	bl	17abc <flatcc_json_parser_skip_constant@@Base>
   17f54:	cmp	r7, r0
   17f58:	bne	17fe0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   17f5c:	mov	r3, #5
   17f60:	b	181bc <flatcc_json_parser_generic_json@@Base+0x384>
   17f64:	cmp	r3, #91	; 0x5b
   17f68:	beq	181ac <flatcc_json_parser_generic_json@@Base+0x374>
   17f6c:	cmp	r3, #123	; 0x7b
   17f70:	bne	17f44 <flatcc_json_parser_generic_json@@Base+0x10c>
   17f74:	add	r3, sp, #520	; 0x208
   17f78:	cmp	r6, r3
   17f7c:	beq	181b8 <flatcc_json_parser_generic_json@@Base+0x380>
   17f80:	mov	r3, #125	; 0x7d
   17f84:	mov	r2, r4
   17f88:	add	r1, r7, #1
   17f8c:	mov	r0, r5
   17f90:	strb	r3, [r6], #1
   17f94:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   17f98:	cmp	r4, r0
   17f9c:	beq	181f4 <flatcc_json_parser_generic_json@@Base+0x3bc>
   17fa0:	ldrb	r3, [r0]
   17fa4:	cmp	r3, #125	; 0x7d
   17fa8:	b	181f0 <flatcc_json_parser_generic_json@@Base+0x3b8>
   17fac:	mov	r2, r4
   17fb0:	mov	r1, r7
   17fb4:	mov	r0, r5
   17fb8:	bl	1722c <flatcc_json_parser_set_error@@Base+0xf4>
   17fbc:	cmp	r0, r4
   17fc0:	mov	r1, r0
   17fc4:	beq	17fd4 <flatcc_json_parser_generic_json@@Base+0x19c>
   17fc8:	ldrb	r3, [r0]
   17fcc:	cmp	r3, #34	; 0x22
   17fd0:	bne	17fe8 <flatcc_json_parser_generic_json@@Base+0x1b0>
   17fd4:	mov	r2, r4
   17fd8:	mov	r0, r5
   17fdc:	bl	17250 <flatcc_json_parser_set_error@@Base+0x118>
   17fe0:	mov	r7, #0
   17fe4:	b	18230 <flatcc_json_parser_generic_json@@Base+0x3f8>
   17fe8:	mov	r2, r4
   17fec:	mov	r0, r5
   17ff0:	bl	17274 <flatcc_json_parser_string_part@@Base>
   17ff4:	cmp	r4, r0
   17ff8:	mov	r1, r0
   17ffc:	beq	1800c <flatcc_json_parser_generic_json@@Base+0x1d4>
   18000:	ldrb	r3, [r0]
   18004:	cmp	r3, #34	; 0x22
   18008:	beq	17fd4 <flatcc_json_parser_generic_json@@Base+0x19c>
   1800c:	mov	r3, sp
   18010:	mov	r2, r4
   18014:	mov	r0, r5
   18018:	bl	177e0 <flatcc_json_parser_string_escape@@Base>
   1801c:	b	17fbc <flatcc_json_parser_generic_json@@Base+0x184>
   18020:	cmp	r7, r4
   18024:	moveq	r0, r4
   18028:	beq	17fe0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1802c:	cmp	r3, #45	; 0x2d
   18030:	bne	18058 <flatcc_json_parser_generic_json@@Base+0x220>
   18034:	add	r7, r7, #1
   18038:	cmp	r4, r7
   1803c:	bne	18058 <flatcc_json_parser_generic_json@@Base+0x220>
   18040:	mov	r3, #6
   18044:	mov	r2, r4
   18048:	mov	r1, r4
   1804c:	mov	r0, r5
   18050:	bl	17138 <flatcc_json_parser_set_error@@Base>
   18054:	b	17fe0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   18058:	ldrb	r3, [r7]
   1805c:	cmp	r3, #48	; 0x30
   18060:	bne	18080 <flatcc_json_parser_generic_json@@Base+0x248>
   18064:	add	r0, r7, #1
   18068:	cmp	r4, r0
   1806c:	bne	180bc <flatcc_json_parser_generic_json@@Base+0x284>
   18070:	mov	r3, #6
   18074:	mov	r2, r4
   18078:	mov	r1, r0
   1807c:	b	1804c <flatcc_json_parser_generic_json@@Base+0x214>
   18080:	sub	r3, r3, #49	; 0x31
   18084:	cmp	r3, #8
   18088:	movhi	r3, #6
   1808c:	movhi	r2, r4
   18090:	movhi	r1, r7
   18094:	bhi	1804c <flatcc_json_parser_generic_json@@Base+0x214>
   18098:	add	r7, r7, #1
   1809c:	cmp	r7, r4
   180a0:	mov	r0, r7
   180a4:	beq	18070 <flatcc_json_parser_generic_json@@Base+0x238>
   180a8:	ldrb	r3, [r0]
   180ac:	add	r7, r7, #1
   180b0:	sub	r3, r3, #48	; 0x30
   180b4:	cmp	r3, #9
   180b8:	bls	1809c <flatcc_json_parser_generic_json@@Base+0x264>
   180bc:	ldrb	r3, [r0]
   180c0:	cmp	r3, #46	; 0x2e
   180c4:	bne	18108 <flatcc_json_parser_generic_json@@Base+0x2d0>
   180c8:	ldrb	r3, [r0, #1]
   180cc:	sub	r3, r3, #48	; 0x30
   180d0:	cmp	r3, #9
   180d4:	movhi	r3, #6
   180d8:	movhi	r2, r4
   180dc:	addhi	r1, r0, #1
   180e0:	bhi	1804c <flatcc_json_parser_generic_json@@Base+0x214>
   180e4:	add	r3, r0, #2
   180e8:	cmp	r4, r3
   180ec:	mov	r0, r3
   180f0:	beq	18070 <flatcc_json_parser_generic_json@@Base+0x238>
   180f4:	ldrb	r2, [r0]
   180f8:	add	r3, r3, #1
   180fc:	sub	r2, r2, #48	; 0x30
   18100:	cmp	r2, #9
   18104:	bls	180e8 <flatcc_json_parser_generic_json@@Base+0x2b0>
   18108:	ldrb	r3, [r0]
   1810c:	and	r3, r3, #223	; 0xdf
   18110:	cmp	r3, #69	; 0x45
   18114:	bne	18180 <flatcc_json_parser_generic_json@@Base+0x348>
   18118:	add	r1, r0, #1
   1811c:	cmp	r4, r1
   18120:	beq	18040 <flatcc_json_parser_generic_json@@Base+0x208>
   18124:	ldrb	r3, [r0, #1]
   18128:	sub	r3, r3, #43	; 0x2b
   1812c:	tst	r3, #253	; 0xfd
   18130:	bne	18140 <flatcc_json_parser_generic_json@@Base+0x308>
   18134:	add	r1, r0, #2
   18138:	cmp	r4, r1
   1813c:	beq	18150 <flatcc_json_parser_generic_json@@Base+0x318>
   18140:	ldrb	r3, [r1]
   18144:	sub	r3, r3, #48	; 0x30
   18148:	cmp	r3, #9
   1814c:	bls	1815c <flatcc_json_parser_generic_json@@Base+0x324>
   18150:	mov	r3, #6
   18154:	mov	r2, r4
   18158:	b	1804c <flatcc_json_parser_generic_json@@Base+0x214>
   1815c:	add	r1, r1, #1
   18160:	cmp	r4, r1
   18164:	mov	r0, r1
   18168:	beq	18070 <flatcc_json_parser_generic_json@@Base+0x238>
   1816c:	ldrb	r3, [r0]
   18170:	add	r1, r1, #1
   18174:	sub	r3, r3, #48	; 0x30
   18178:	cmp	r3, #9
   1817c:	bls	18160 <flatcc_json_parser_generic_json@@Base+0x328>
   18180:	ldrb	r3, [r0]
   18184:	cmp	r3, #32
   18188:	beq	17fe0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1818c:	bhi	18308 <flatcc_json_parser_generic_json@@Base+0x4d0>
   18190:	cmp	r3, #9
   18194:	bcc	18070 <flatcc_json_parser_generic_json@@Base+0x238>
   18198:	cmp	r3, #11
   1819c:	bls	17fe0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   181a0:	cmp	r3, #13
   181a4:	bne	18070 <flatcc_json_parser_generic_json@@Base+0x238>
   181a8:	b	17fe0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   181ac:	add	r3, sp, #520	; 0x208
   181b0:	cmp	r6, r3
   181b4:	bne	181c8 <flatcc_json_parser_generic_json@@Base+0x390>
   181b8:	mov	r3, #2
   181bc:	mov	r2, r4
   181c0:	mov	r1, r7
   181c4:	b	17f04 <flatcc_json_parser_generic_json@@Base+0xcc>
   181c8:	mov	r3, #93	; 0x5d
   181cc:	mov	r2, r4
   181d0:	add	r1, r7, #1
   181d4:	mov	r0, r5
   181d8:	strb	r3, [r6], #1
   181dc:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   181e0:	cmp	r4, r0
   181e4:	beq	181f4 <flatcc_json_parser_generic_json@@Base+0x3bc>
   181e8:	ldrb	r3, [r0]
   181ec:	cmp	r3, #93	; 0x5d
   181f0:	beq	17fe0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   181f4:	mov	r7, r0
   181f8:	b	17e64 <flatcc_json_parser_generic_json@@Base+0x2c>
   181fc:	ldrb	r3, [r6, #-1]
   18200:	sub	fp, r6, #1
   18204:	cmp	r3, #93	; 0x5d
   18208:	bne	18250 <flatcc_json_parser_generic_json@@Base+0x418>
   1820c:	mov	r1, r0
   18210:	add	r3, sp, #4
   18214:	mov	r2, r4
   18218:	mov	r0, r5
   1821c:	bl	173d8 <flatcc_json_parser_space_ext@@Base+0xe8>
   18220:	ldr	r3, [sp, #4]
   18224:	cmp	r3, #0
   18228:	bne	181f4 <flatcc_json_parser_generic_json@@Base+0x3bc>
   1822c:	mov	r6, fp
   18230:	cmp	r0, r4
   18234:	beq	182ec <flatcc_json_parser_generic_json@@Base+0x4b4>
   18238:	cmp	r6, r8
   1823c:	bne	181fc <flatcc_json_parser_generic_json@@Base+0x3c4>
   18240:	mov	r4, r0
   18244:	mov	r0, r4
   18248:	add	sp, sp, #524	; 0x20c
   1824c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18250:	mov	r1, r0
   18254:	mov	r2, r4
   18258:	mov	r0, r5
   1825c:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   18260:	cmp	r4, r0
   18264:	streq	r7, [sp, #4]
   18268:	beq	18220 <flatcc_json_parser_generic_json@@Base+0x3e8>
   1826c:	ldrb	r3, [r0]
   18270:	cmp	r3, #44	; 0x2c
   18274:	beq	182a8 <flatcc_json_parser_generic_json@@Base+0x470>
   18278:	str	r7, [sp, #4]
   1827c:	ldrb	r3, [r0]
   18280:	cmp	r3, #125	; 0x7d
   18284:	movne	r3, #10
   18288:	movne	r2, r4
   1828c:	movne	r1, r0
   18290:	bne	182c8 <flatcc_json_parser_generic_json@@Base+0x490>
   18294:	add	r1, r0, #1
   18298:	mov	r2, r4
   1829c:	mov	r0, r5
   182a0:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   182a4:	b	18220 <flatcc_json_parser_generic_json@@Base+0x3e8>
   182a8:	add	r1, r0, #1
   182ac:	mov	r0, r5
   182b0:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   182b4:	cmp	r4, r0
   182b8:	bne	182d4 <flatcc_json_parser_generic_json@@Base+0x49c>
   182bc:	mov	r3, #10
   182c0:	mov	r1, r4
   182c4:	str	r7, [sp, #4]
   182c8:	mov	r0, r5
   182cc:	bl	17138 <flatcc_json_parser_set_error@@Base>
   182d0:	b	18220 <flatcc_json_parser_generic_json@@Base+0x3e8>
   182d4:	ldrb	r3, [r0]
   182d8:	cmp	r3, #125	; 0x7d
   182dc:	strne	sl, [sp, #4]
   182e0:	bne	18220 <flatcc_json_parser_generic_json@@Base+0x3e8>
   182e4:	str	r7, [sp, #4]
   182e8:	b	18294 <flatcc_json_parser_generic_json@@Base+0x45c>
   182ec:	cmp	r6, r8
   182f0:	beq	18244 <flatcc_json_parser_generic_json@@Base+0x40c>
   182f4:	ldrb	r3, [r6, #-1]
   182f8:	cmp	r3, #93	; 0x5d
   182fc:	moveq	r3, #9
   18300:	movne	r3, #10
   18304:	b	17ee8 <flatcc_json_parser_generic_json@@Base+0xb0>
   18308:	cmp	r3, #58	; 0x3a
   1830c:	beq	17fe0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   18310:	bhi	1831c <flatcc_json_parser_generic_json@@Base+0x4e4>
   18314:	cmp	r3, #44	; 0x2c
   18318:	b	181a4 <flatcc_json_parser_generic_json@@Base+0x36c>
   1831c:	cmp	r3, #93	; 0x5d
   18320:	beq	17fe0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   18324:	cmp	r3, #125	; 0x7d
   18328:	b	181a4 <flatcc_json_parser_generic_json@@Base+0x36c>

0001832c <flatcc_json_parser_unmatched_symbol@@Base>:
   1832c:	ldr	r3, [r0, #8]
   18330:	tst	r3, #1
   18334:	beq	1839c <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   18338:	push	{r4, r5, r6, lr}
   1833c:	mov	r4, r0
   18340:	mov	r5, r2
   18344:	bl	17164 <flatcc_json_parser_set_error@@Base+0x2c>
   18348:	mov	r1, r0
   1834c:	mov	r0, r4
   18350:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   18354:	cmp	r2, r0
   18358:	mov	r1, r0
   1835c:	beq	18388 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   18360:	ldrb	r3, [r0]
   18364:	cmp	r3, #58	; 0x3a
   18368:	bne	18388 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   1836c:	add	r1, r0, #1
   18370:	mov	r0, r4
   18374:	bl	173a0 <flatcc_json_parser_space_ext@@Base+0xb0>
   18378:	mov	r1, r0
   1837c:	mov	r0, r4
   18380:	pop	{r4, r5, r6, lr}
   18384:	b	17e38 <flatcc_json_parser_generic_json@@Base>
   18388:	mov	r2, r5
   1838c:	mov	r0, r4
   18390:	pop	{r4, r5, r6, lr}
   18394:	mov	r3, #4
   18398:	b	17138 <flatcc_json_parser_set_error@@Base>
   1839c:	mov	r3, #13
   183a0:	b	18398 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>

000183a4 <flatcc_json_parser_integer@@Base>:
   183a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183a8:	cmp	r1, r2
   183ac:	ldr	r9, [sp, #36]	; 0x24
   183b0:	beq	1845c <flatcc_json_parser_integer@@Base+0xb8>
   183b4:	mov	ip, r1
   183b8:	mov	r6, #0
   183bc:	ldrb	r1, [r1]
   183c0:	mov	r7, #0
   183c4:	mov	r8, #10
   183c8:	sub	r1, r1, #45	; 0x2d
   183cc:	clz	r1, r1
   183d0:	lsr	r1, r1, #5
   183d4:	str	r1, [r3]
   183d8:	add	r3, ip, r1
   183dc:	cmp	r3, r2
   183e0:	mov	r1, r3
   183e4:	beq	18454 <flatcc_json_parser_integer@@Base+0xb0>
   183e8:	ldrb	lr, [r3], #1
   183ec:	sub	r4, lr, #48	; 0x30
   183f0:	cmp	r4, #9
   183f4:	bls	18418 <flatcc_json_parser_integer@@Base+0x74>
   183f8:	cmp	r1, ip
   183fc:	beq	18464 <flatcc_json_parser_integer@@Base+0xc0>
   18400:	and	r3, lr, #223	; 0xdf
   18404:	cmp	lr, #46	; 0x2e
   18408:	cmpne	r3, #69	; 0x45
   1840c:	bne	18454 <flatcc_json_parser_integer@@Base+0xb0>
   18410:	mov	r3, #12
   18414:	b	18440 <flatcc_json_parser_integer@@Base+0x9c>
   18418:	umull	r4, r5, r6, r8
   1841c:	mla	r5, r8, r7, r5
   18420:	subs	sl, r4, #48	; 0x30
   18424:	sbc	fp, r5, #0
   18428:	adds	r4, sl, lr
   1842c:	adc	r5, fp, #0
   18430:	cmp	r7, r5
   18434:	cmpeq	r6, r4
   18438:	bls	18448 <flatcc_json_parser_integer@@Base+0xa4>
   1843c:	mov	r3, #8
   18440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18444:	b	17138 <flatcc_json_parser_set_error@@Base>
   18448:	mov	r6, r4
   1844c:	mov	r7, r5
   18450:	b	183dc <flatcc_json_parser_integer@@Base+0x38>
   18454:	mov	r2, r1
   18458:	strd	r6, [r9]
   1845c:	mov	r0, r2
   18460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18464:	mov	r2, ip
   18468:	b	1845c <flatcc_json_parser_integer@@Base+0xb8>
   1846c:	push	{r4, r5, r6, r7, lr}
   18470:	mov	lr, #0
   18474:	sub	sp, sp, #28
   18478:	mov	r6, #0
   1847c:	mov	r7, #0
   18480:	cmp	r1, r2
   18484:	moveq	r0, r1
   18488:	strb	lr, [r3]
   1848c:	str	lr, [sp, #12]
   18490:	strd	r6, [sp, #16]
   18494:	beq	184f8 <flatcc_json_parser_integer@@Base+0x154>
   18498:	mov	r6, r3
   1849c:	add	r3, sp, #16
   184a0:	mov	r7, r1
   184a4:	mov	r5, r0
   184a8:	str	r3, [sp]
   184ac:	add	r3, sp, #12
   184b0:	mov	r4, r2
   184b4:	bl	183a4 <flatcc_json_parser_integer@@Base>
   184b8:	cmp	r7, r0
   184bc:	beq	184f8 <flatcc_json_parser_integer@@Base+0x154>
   184c0:	ldr	r3, [sp, #12]
   184c4:	cmp	r3, #0
   184c8:	movne	r3, #8
   184cc:	bne	184e8 <flatcc_json_parser_integer@@Base+0x144>
   184d0:	ldrd	r2, [sp, #16]
   184d4:	cmp	r3, #0
   184d8:	cmpeq	r2, #255	; 0xff
   184dc:	strbls	r2, [r6]
   184e0:	bls	184f8 <flatcc_json_parser_integer@@Base+0x154>
   184e4:	mov	r3, #7
   184e8:	mov	r1, r0
   184ec:	mov	r2, r4
   184f0:	mov	r0, r5
   184f4:	bl	17138 <flatcc_json_parser_set_error@@Base>
   184f8:	add	sp, sp, #28
   184fc:	pop	{r4, r5, r6, r7, pc}

00018500 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   18500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18504:	sub	sp, sp, #36	; 0x24
   18508:	mov	r6, r0
   1850c:	mov	r8, r2
   18510:	str	r3, [sp, #8]
   18514:	ldr	r3, [sp, #72]	; 0x48
   18518:	str	r3, [sp, #20]
   1851c:	bl	1722c <flatcc_json_parser_set_error@@Base+0xf4>
   18520:	mov	r1, r0
   18524:	mov	r9, r0
   18528:	mov	r0, r6
   1852c:	bl	17274 <flatcc_json_parser_string_part@@Base>
   18530:	cmp	r2, r0
   18534:	mov	r7, r0
   18538:	beq	18694 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>
   1853c:	ldrb	r3, [r0]
   18540:	cmp	r3, #34	; 0x22
   18544:	bne	18694 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>
   18548:	sub	r2, r0, r9
   1854c:	sub	r3, r0, r9
   18550:	lsr	r5, r2, #2
   18554:	str	r3, [sp, #12]
   18558:	and	r3, r3, #3
   1855c:	add	r5, r5, r5, lsl #1
   18560:	cmp	r3, #2
   18564:	addeq	r5, r5, #1
   18568:	beq	18574 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   1856c:	cmp	r3, #3
   18570:	addeq	r5, r5, #2
   18574:	mov	r2, #1
   18578:	mvn	r3, #0
   1857c:	ldr	r0, [r6]
   18580:	mov	r1, r2
   18584:	bl	14780 <flatcc_builder_start_vector@@Base>
   18588:	subs	r4, r0, #0
   1858c:	bne	187fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   18590:	mov	r1, r5
   18594:	ldr	r0, [r6]
   18598:	bl	142c0 <flatcc_builder_extend_vector@@Base>
   1859c:	subs	r3, r0, #0
   185a0:	str	r3, [sp, #16]
   185a4:	beq	187fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   185a8:	ldr	r3, [pc, #628]	; 18824 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x324>
   185ac:	mov	sl, r9
   185b0:	ldr	r1, [sp, #20]
   185b4:	add	r2, r3, #256	; 0x100
   185b8:	cmp	r1, #0
   185bc:	mov	r1, r0
   185c0:	moveq	r3, r2
   185c4:	cmp	r5, #0
   185c8:	mov	lr, r3
   185cc:	sub	r2, r7, r9
   185d0:	movne	r3, r5
   185d4:	mvneq	r3, #0
   185d8:	str	r3, [sp, #4]
   185dc:	mov	ip, r2
   185e0:	mov	r0, #0
   185e4:	cmp	r0, ip
   185e8:	beq	18724 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   185ec:	ldrb	r3, [sl, r0]
   185f0:	add	fp, sp, #32
   185f4:	add	fp, fp, r0
   185f8:	ldrb	r3, [lr, r3]
   185fc:	cmp	r3, #63	; 0x3f
   18600:	strb	r3, [fp, #-4]
   18604:	bls	1861c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   18608:	cmp	r3, #65	; 0x41
   1860c:	bne	186b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b4>
   18610:	add	sl, sl, #1
   18614:	sub	ip, ip, #1
   18618:	sub	r0, r0, #1
   1861c:	add	r0, r0, #1
   18620:	cmp	r0, #3
   18624:	bls	185e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe4>
   18628:	ldr	r3, [sp, #4]
   1862c:	cmp	r3, #2
   18630:	bls	18714 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   18634:	ldrb	r0, [sp, #29]
   18638:	add	sl, sl, #4
   1863c:	add	r1, r1, #3
   18640:	ldrb	r3, [sp, #28]
   18644:	lsr	r2, r0, #4
   18648:	orr	r2, r2, r3, lsl #2
   1864c:	strb	r2, [r1, #-3]
   18650:	ldrb	r2, [sp, #30]
   18654:	lsr	r3, r2, #2
   18658:	orr	r3, r3, r0, lsl #4
   1865c:	strb	r3, [r1, #-2]
   18660:	ldrb	r3, [sp, #31]
   18664:	orr	r2, r3, r2, lsl #6
   18668:	ldr	r3, [sp, #4]
   1866c:	strb	r2, [r1, #-1]
   18670:	sub	r2, ip, #4
   18674:	subs	r3, r3, #3
   18678:	str	r3, [sp, #4]
   1867c:	bne	185dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdc>
   18680:	ldr	r3, [sp, #12]
   18684:	cmp	r4, #0
   18688:	sub	r2, r3, r2
   1868c:	beq	1879c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x29c>
   18690:	add	r7, r9, r2
   18694:	ldr	r2, [sp, #8]
   18698:	mov	r3, #0
   1869c:	str	r3, [r2]
   186a0:	ldr	r3, [sp, #20]
   186a4:	cmp	r3, #0
   186a8:	movne	r3, #32
   186ac:	moveq	r3, #31
   186b0:	b	1880c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   186b4:	cmp	r3, #66	; 0x42
   186b8:	addeq	r3, r0, #1
   186bc:	beq	186e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e0>
   186c0:	mov	r3, r0
   186c4:	b	186ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   186c8:	ldrb	fp, [sl, r3]
   186cc:	ldrb	fp, [lr, fp]
   186d0:	sub	fp, fp, #65	; 0x41
   186d4:	cmp	fp, #1
   186d8:	bhi	186ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   186dc:	add	r3, r3, #1
   186e0:	cmp	r3, #7
   186e4:	cmpls	r3, ip
   186e8:	bcc	186c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   186ec:	sub	r3, ip, r3
   186f0:	mov	ip, r0
   186f4:	cmp	ip, #2
   186f8:	beq	1872c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x22c>
   186fc:	cmp	ip, #3
   18700:	beq	18754 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   18704:	cmp	ip, #0
   18708:	movne	r4, #4
   1870c:	moveq	r2, r3
   18710:	b	18680 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   18714:	mov	r4, #1
   18718:	b	18680 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   1871c:	mov	r4, #5
   18720:	b	18680 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   18724:	mov	r3, #0
   18728:	b	186f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   1872c:	ldrb	r0, [sp, #29]
   18730:	lsl	r4, r0, #4
   18734:	ands	r4, r4, #255	; 0xff
   18738:	bne	1871c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   1873c:	ldrb	r2, [sp, #28]
   18740:	lsr	r0, r0, #4
   18744:	orr	r0, r0, r2, lsl #2
   18748:	strb	r0, [r1], #1
   1874c:	mov	r2, r3
   18750:	b	18680 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   18754:	ldrb	r0, [sp, #30]
   18758:	lsl	r4, r0, #6
   1875c:	ands	r4, r4, #255	; 0xff
   18760:	bne	1871c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   18764:	ldr	ip, [sp, #4]
   18768:	cmp	ip, #1
   1876c:	ldreq	r4, [sp, #4]
   18770:	beq	18680 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   18774:	lsr	r0, r0, #2
   18778:	add	r1, r1, #2
   1877c:	ldrb	ip, [sp, #29]
   18780:	ldrb	lr, [sp, #28]
   18784:	lsr	r2, ip, #4
   18788:	orr	ip, r0, ip, lsl #4
   1878c:	orr	r2, r2, lr, lsl #2
   18790:	strb	r2, [r1, #-2]
   18794:	strb	ip, [r1, #-1]
   18798:	b	1874c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x24c>
   1879c:	ldr	r3, [sp, #12]
   187a0:	cmp	r3, r2
   187a4:	bne	18690 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   187a8:	ldr	r3, [sp, #16]
   187ac:	sub	r1, r1, r3
   187b0:	cmp	r5, r1
   187b4:	bhi	187e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e8>
   187b8:	ldr	r0, [r6]
   187bc:	bl	150dc <flatcc_builder_end_vector@@Base>
   187c0:	ldr	r3, [sp, #8]
   187c4:	cmp	r0, #0
   187c8:	str	r0, [r3]
   187cc:	beq	187fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   187d0:	mov	r2, r8
   187d4:	mov	r1, r7
   187d8:	mov	r0, r6
   187dc:	add	sp, sp, #36	; 0x24
   187e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187e4:	b	17250 <flatcc_json_parser_set_error@@Base+0x118>
   187e8:	sub	r1, r5, r1
   187ec:	ldr	r0, [r6]
   187f0:	bl	1462c <flatcc_builder_truncate_vector@@Base>
   187f4:	cmp	r0, #0
   187f8:	beq	187b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   187fc:	ldr	r2, [sp, #8]
   18800:	mov	r3, #0
   18804:	str	r3, [r2]
   18808:	mov	r3, #33	; 0x21
   1880c:	mov	r2, r8
   18810:	mov	r1, r7
   18814:	mov	r0, r6
   18818:	add	sp, sp, #36	; 0x24
   1881c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18820:	b	17138 <flatcc_json_parser_set_error@@Base>
   18824:	strdeq	sl, [r1], -r8

00018828 <flatcc_json_parser_build_string@@Base>:
   18828:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1882c:	mov	r5, r0
   18830:	mov	r6, r2
   18834:	mov	r8, r3
   18838:	bl	1722c <flatcc_json_parser_set_error@@Base+0xf4>
   1883c:	mov	r1, r0
   18840:	mov	r7, r0
   18844:	mov	r0, r5
   18848:	bl	17274 <flatcc_json_parser_string_part@@Base>
   1884c:	cmp	r2, r0
   18850:	mov	r4, r0
   18854:	beq	18898 <flatcc_json_parser_build_string@@Base+0x70>
   18858:	ldrb	r3, [r0]
   1885c:	cmp	r3, #34	; 0x22
   18860:	bne	18898 <flatcc_json_parser_build_string@@Base+0x70>
   18864:	sub	r2, r0, r7
   18868:	mov	r1, r7
   1886c:	ldr	r0, [r5]
   18870:	bl	15690 <flatcc_builder_create_string@@Base>
   18874:	mov	r1, r4
   18878:	mov	r2, r6
   1887c:	str	r0, [r8]
   18880:	mov	r0, r5
   18884:	bl	17250 <flatcc_json_parser_set_error@@Base+0x118>
   18888:	mov	r4, r0
   1888c:	mov	r0, r4
   18890:	add	sp, sp, #8
   18894:	pop	{r4, r5, r6, r7, r8, pc}
   18898:	ldr	r0, [r5]
   1889c:	bl	14820 <flatcc_builder_start_string@@Base>
   188a0:	cmp	r0, #0
   188a4:	bne	18950 <flatcc_json_parser_build_string@@Base+0x128>
   188a8:	sub	r2, r4, r7
   188ac:	mov	r1, r7
   188b0:	ldr	r0, [r5]
   188b4:	bl	1455c <flatcc_builder_append_string@@Base>
   188b8:	cmp	r0, #0
   188bc:	beq	18950 <flatcc_json_parser_build_string@@Base+0x128>
   188c0:	cmp	r4, r6
   188c4:	beq	188d4 <flatcc_json_parser_build_string@@Base+0xac>
   188c8:	ldrb	r3, [r4]
   188cc:	cmp	r3, #34	; 0x22
   188d0:	bne	188e0 <flatcc_json_parser_build_string@@Base+0xb8>
   188d4:	ldr	r0, [r5]
   188d8:	bl	15788 <flatcc_builder_end_string@@Base>
   188dc:	b	18874 <flatcc_json_parser_build_string@@Base+0x4c>
   188e0:	mov	r1, r4
   188e4:	add	r3, sp, #4
   188e8:	mov	r2, r6
   188ec:	mov	r0, r5
   188f0:	bl	177e0 <flatcc_json_parser_string_escape@@Base>
   188f4:	mov	r4, r0
   188f8:	ldrb	r2, [sp, #4]
   188fc:	add	r1, sp, #5
   18900:	ldr	r0, [r5]
   18904:	bl	1455c <flatcc_builder_append_string@@Base>
   18908:	cmp	r0, #0
   1890c:	beq	18950 <flatcc_json_parser_build_string@@Base+0x128>
   18910:	mov	r2, r6
   18914:	mov	r1, r4
   18918:	mov	r0, r5
   1891c:	bl	17274 <flatcc_json_parser_string_part@@Base>
   18920:	cmp	r6, r0
   18924:	mov	r7, r0
   18928:	bne	18934 <flatcc_json_parser_build_string@@Base+0x10c>
   1892c:	mov	r4, r7
   18930:	b	188c0 <flatcc_json_parser_build_string@@Base+0x98>
   18934:	sub	r2, r0, r4
   18938:	mov	r1, r4
   1893c:	ldr	r0, [r5]
   18940:	bl	1455c <flatcc_builder_append_string@@Base>
   18944:	cmp	r0, #0
   18948:	bne	1892c <flatcc_json_parser_build_string@@Base+0x104>
   1894c:	mov	r4, r7
   18950:	mov	r3, #0
   18954:	str	r3, [r8]
   18958:	b	1888c <flatcc_json_parser_build_string@@Base+0x64>

0001895c <flatcc_json_parser_prepare_unions@@Base>:
   1895c:	push	{r4, r5, r6, r7, r8, lr}
   18960:	mov	r5, r1
   18964:	mov	r1, #24
   18968:	mov	r4, r0
   1896c:	mov	r7, r2
   18970:	mul	r1, r1, r3
   18974:	mov	r6, r3
   18978:	ldr	r8, [sp, #24]
   1897c:	add	r1, r1, #8
   18980:	ldr	r0, [r0]
   18984:	bl	13c28 <flatcc_builder_enter_user_frame@@Base>
   18988:	cmp	r0, #0
   1898c:	str	r0, [r8]
   18990:	bne	189ac <flatcc_json_parser_prepare_unions@@Base+0x50>
   18994:	mov	r2, r7
   18998:	mov	r1, r5
   1899c:	mov	r0, r4
   189a0:	mov	r3, #33	; 0x21
   189a4:	pop	{r4, r5, r6, r7, r8, lr}
   189a8:	b	17138 <flatcc_json_parser_set_error@@Base>
   189ac:	mov	r1, r0
   189b0:	ldr	r0, [r4]
   189b4:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   189b8:	str	r6, [r0]
   189bc:	mov	r0, r5
   189c0:	pop	{r4, r5, r6, r7, r8, pc}

000189c4 <flatcc_json_parser_finalize_unions@@Base>:
   189c4:	push	{r4, r5, r6, r7, r8, lr}
   189c8:	mov	r5, r0
   189cc:	mov	r4, r1
   189d0:	mov	r1, r3
   189d4:	mov	r6, r3
   189d8:	mov	r7, r2
   189dc:	ldr	r0, [r0]
   189e0:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   189e4:	ldr	r3, [r0, #4]
   189e8:	cmp	r3, #0
   189ec:	beq	18a08 <flatcc_json_parser_finalize_unions@@Base+0x44>
   189f0:	mov	r1, r4
   189f4:	mov	r3, #27
   189f8:	mov	r2, r7
   189fc:	mov	r0, r5
   18a00:	bl	17138 <flatcc_json_parser_set_error@@Base>
   18a04:	mov	r4, r0
   18a08:	mov	r1, r6
   18a0c:	ldr	r0, [r5]
   18a10:	bl	13ce0 <flatcc_builder_exit_user_frame_at@@Base>
   18a14:	mov	r0, r4
   18a18:	pop	{r4, r5, r6, r7, r8, pc}

00018a1c <flatcc_json_parser_union@@Base>:
   18a1c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18a20:	mov	r4, r0
   18a24:	mov	r7, r1
   18a28:	mov	r5, r3
   18a2c:	mov	r6, r2
   18a30:	ldr	r0, [r0]
   18a34:	ldr	r1, [sp, #44]	; 0x2c
   18a38:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   18a3c:	mov	r3, #24
   18a40:	mla	r3, r3, r5, r0
   18a44:	ldr	r2, [r3, #8]
   18a48:	cmp	r2, #0
   18a4c:	movne	r3, #28
   18a50:	bne	18ab4 <flatcc_json_parser_union@@Base+0x98>
   18a54:	ldrb	r2, [r3, #20]
   18a58:	cmp	r2, #0
   18a5c:	bne	18aa0 <flatcc_json_parser_union@@Base+0x84>
   18a60:	ldr	r2, [r0, #4]
   18a64:	mov	r1, r7
   18a68:	add	r2, r2, #1
   18a6c:	str	r2, [r0, #4]
   18a70:	mov	r0, r4
   18a74:	ldr	r2, [r4, #16]
   18a78:	str	r2, [r3, #16]
   18a7c:	ldr	r2, [r4, #4]
   18a80:	str	r7, [r3, #8]
   18a84:	str	r2, [r3, #12]
   18a88:	mov	r2, r6
   18a8c:	bl	17e38 <flatcc_json_parser_generic_json@@Base>
   18a90:	mov	r5, r0
   18a94:	mov	r0, r5
   18a98:	add	sp, sp, #16
   18a9c:	pop	{r4, r5, r6, r7, r8, pc}
   18aa0:	ldrb	r3, [r3, #21]
   18aa4:	cmp	r3, #0
   18aa8:	strb	r3, [sp, #8]
   18aac:	bne	18ac8 <flatcc_json_parser_union@@Base+0xac>
   18ab0:	mov	r3, #25
   18ab4:	mov	r2, r6
   18ab8:	mov	r1, r7
   18abc:	mov	r0, r4
   18ac0:	bl	17138 <flatcc_json_parser_set_error@@Base>
   18ac4:	b	18a90 <flatcc_json_parser_union@@Base+0x74>
   18ac8:	ldr	r2, [r0, #4]
   18acc:	mov	r1, r7
   18ad0:	add	r8, sp, #8
   18ad4:	ldr	r5, [sp, #48]	; 0x30
   18ad8:	sub	r2, r2, #1
   18adc:	str	r2, [r0, #4]
   18ae0:	add	r2, sp, #12
   18ae4:	mov	r0, r4
   18ae8:	str	r2, [sp]
   18aec:	mov	r2, r6
   18af0:	blx	r5
   18af4:	cmp	r6, r0
   18af8:	mov	r5, r0
   18afc:	beq	18a94 <flatcc_json_parser_union@@Base+0x78>
   18b00:	ldrh	r1, [sp, #40]	; 0x28
   18b04:	ldm	r8, {r2, r3}
   18b08:	ldr	r0, [r4]
   18b0c:	bl	15ae0 <flatcc_builder_table_add_union@@Base>
   18b10:	cmp	r0, #0
   18b14:	beq	18a94 <flatcc_json_parser_union@@Base+0x78>
   18b18:	mov	r3, #28
   18b1c:	mov	r2, r6
   18b20:	mov	r1, r5
   18b24:	b	18abc <flatcc_json_parser_union@@Base+0xa0>

00018b28 <flatcc_json_parser_union_type@@Base>:
   18b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b2c:	sub	sp, sp, #28
   18b30:	mov	r9, r1
   18b34:	mov	r4, r0
   18b38:	mov	r5, r3
   18b3c:	mov	r6, r2
   18b40:	ldr	r0, [r0]
   18b44:	ldr	r1, [sp, #68]	; 0x44
   18b48:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   18b4c:	mov	r3, #24
   18b50:	add	sl, r0, #8
   18b54:	mul	r3, r3, r5
   18b58:	add	r7, sl, r3
   18b5c:	str	r3, [sp, #12]
   18b60:	ldrb	r3, [r7, #12]
   18b64:	cmp	r3, #0
   18b68:	movne	r3, #28
   18b6c:	movne	r2, r6
   18b70:	movne	r1, r9
   18b74:	bne	18c8c <flatcc_json_parser_union_type@@Base+0x164>
   18b78:	mov	r3, #1
   18b7c:	add	fp, r7, #13
   18b80:	mov	r8, r0
   18b84:	mov	r2, r6
   18b88:	mov	r1, r9
   18b8c:	mov	r0, r4
   18b90:	strb	r3, [r7, #12]
   18b94:	mov	r3, fp
   18b98:	bl	1846c <flatcc_json_parser_integer@@Base+0xc8>
   18b9c:	cmp	r9, r0
   18ba0:	mov	r5, r0
   18ba4:	bne	18bc4 <flatcc_json_parser_union_type@@Base+0x9c>
   18ba8:	mov	r1, r0
   18bac:	mov	r2, r6
   18bb0:	str	fp, [sp]
   18bb4:	mov	r0, r4
   18bb8:	ldr	r3, [sp, #72]	; 0x48
   18bbc:	bl	17484 <flatcc_json_parser_space_ext@@Base+0x194>
   18bc0:	mov	r5, r0
   18bc4:	ldr	r3, [sp, #12]
   18bc8:	ldr	r1, [sl, r3]
   18bcc:	ldr	r3, [r8, #4]
   18bd0:	cmp	r1, #0
   18bd4:	bne	18bf4 <flatcc_json_parser_union_type@@Base+0xcc>
   18bd8:	ldrb	r2, [r7, #13]
   18bdc:	cmp	r2, #0
   18be0:	addne	r3, r3, #1
   18be4:	str	r3, [r8, #4]
   18be8:	mov	r0, r5
   18bec:	add	sp, sp, #28
   18bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bf4:	cmp	r3, #0
   18bf8:	bne	18c10 <flatcc_json_parser_union_type@@Base+0xe8>
   18bfc:	ldr	r3, [pc, #152]	; 18c9c <flatcc_json_parser_union_type@@Base+0x174>
   18c00:	movw	r2, #965	; 0x3c5
   18c04:	ldr	r1, [pc, #148]	; 18ca0 <flatcc_json_parser_union_type@@Base+0x178>
   18c08:	ldr	r0, [pc, #148]	; 18ca4 <flatcc_json_parser_union_type@@Base+0x17c>
   18c0c:	bl	124b0 <__assert_fail@plt>
   18c10:	sub	r3, r3, #1
   18c14:	ldr	r9, [r4, #16]
   18c18:	add	r2, sp, #20
   18c1c:	mov	r0, r4
   18c20:	str	r3, [r8, #4]
   18c24:	ldr	r3, [r7, #8]
   18c28:	ldr	r8, [r4, #4]
   18c2c:	ldr	sl, [sp, #76]	; 0x4c
   18c30:	str	r3, [r4, #16]
   18c34:	ldr	r3, [r7, #4]
   18c38:	str	r3, [r4, #4]
   18c3c:	ldrb	r3, [r7, #13]
   18c40:	add	r7, sp, #16
   18c44:	str	r2, [sp]
   18c48:	mov	r2, r6
   18c4c:	strb	r3, [sp, #16]
   18c50:	blx	sl
   18c54:	cmp	r6, r0
   18c58:	moveq	r5, r6
   18c5c:	beq	18be8 <flatcc_json_parser_union_type@@Base+0xc0>
   18c60:	ldrh	r1, [sp, #64]	; 0x40
   18c64:	ldm	r7, {r2, r3}
   18c68:	ldr	r0, [r4]
   18c6c:	bl	15ae0 <flatcc_builder_table_add_union@@Base>
   18c70:	cmp	r0, #0
   18c74:	streq	r8, [r4, #4]
   18c78:	streq	r9, [r4, #16]
   18c7c:	beq	18be8 <flatcc_json_parser_union_type@@Base+0xc0>
   18c80:	mov	r3, #28
   18c84:	mov	r2, r6
   18c88:	mov	r1, r5
   18c8c:	mov	r0, r4
   18c90:	bl	17138 <flatcc_json_parser_set_error@@Base>
   18c94:	mov	r5, r0
   18c98:	b	18be8 <flatcc_json_parser_union_type@@Base+0xc0>
   18c9c:	strdeq	sl, [r1], -r8
   18ca0:	andeq	sl, r1, r9, lsl #25
   18ca4:	ldrdeq	sl, [r1], -r3

00018ca8 <flatcc_json_parser_union_vector@@Base>:
   18ca8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18cac:	mov	r4, r0
   18cb0:	mov	r5, r1
   18cb4:	mov	r9, r3
   18cb8:	mov	r6, r2
   18cbc:	ldr	r0, [r0]
   18cc0:	ldr	r1, [sp, #36]	; 0x24
   18cc4:	ldrh	r7, [sp, #32]
   18cc8:	ldr	r8, [sp, #40]	; 0x28
   18ccc:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   18cd0:	mov	r3, #24
   18cd4:	add	r2, r0, #8
   18cd8:	mul	r3, r3, r9
   18cdc:	ldr	r1, [r2, r3]
   18ce0:	add	ip, r2, r3
   18ce4:	cmp	r1, #0
   18ce8:	beq	18d04 <flatcc_json_parser_union_vector@@Base+0x5c>
   18cec:	mov	r2, r6
   18cf0:	mov	r1, r5
   18cf4:	mov	r0, r4
   18cf8:	mov	r3, #28
   18cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d00:	b	17138 <flatcc_json_parser_set_error@@Base>
   18d04:	ldrb	lr, [ip, #12]
   18d08:	ldr	r1, [r0, #4]
   18d0c:	cmp	lr, #0
   18d10:	bne	18d44 <flatcc_json_parser_union_vector@@Base+0x9c>
   18d14:	add	r1, r1, #1
   18d18:	str	r1, [r0, #4]
   18d1c:	mov	r0, r4
   18d20:	ldr	r1, [r4, #16]
   18d24:	str	r1, [ip, #8]
   18d28:	ldr	r1, [r4, #4]
   18d2c:	str	r1, [ip, #4]
   18d30:	mov	r1, r5
   18d34:	str	r5, [r2, r3]
   18d38:	mov	r2, r6
   18d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d40:	b	17e38 <flatcc_json_parser_generic_json@@Base>
   18d44:	sub	r1, r1, #1
   18d48:	mov	r2, r6
   18d4c:	str	r1, [r0, #4]
   18d50:	mov	r1, r5
   18d54:	mov	r0, r4
   18d58:	str	r7, [sp, #36]	; 0x24
   18d5c:	str	r8, [sp, #40]	; 0x28
   18d60:	ldr	r3, [ip, #16]
   18d64:	str	r3, [sp, #32]
   18d68:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d6c:	ldr	r3, [ip, #20]
   18d70:	b	17698 <flatcc_json_parser_space_ext@@Base+0x3a8>

00018d74 <flatcc_json_parser_union_type_vector@@Base>:
   18d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d78:	sub	sp, sp, #36	; 0x24
   18d7c:	mov	r4, r0
   18d80:	mov	r5, r1
   18d84:	mov	r7, r3
   18d88:	mov	r6, r2
   18d8c:	ldr	r0, [r0]
   18d90:	ldr	r1, [sp, #76]	; 0x4c
   18d94:	ldrh	sl, [sp, #72]	; 0x48
   18d98:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   18d9c:	mov	r3, #24
   18da0:	add	r0, r0, #8
   18da4:	mul	r7, r3, r7
   18da8:	add	r8, r0, r7
   18dac:	ldrb	r3, [r8, #12]
   18db0:	cmp	r3, #0
   18db4:	movne	r3, #28
   18db8:	bne	18f4c <flatcc_json_parser_union_type_vector@@Base+0x1d8>
   18dbc:	mov	r2, #1
   18dc0:	mvn	r3, #0
   18dc4:	mov	r1, r2
   18dc8:	strb	r2, [r8, #12]
   18dcc:	ldr	r0, [r4]
   18dd0:	bl	14780 <flatcc_builder_start_vector@@Base>
   18dd4:	cmp	r0, #0
   18dd8:	bne	18f20 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   18ddc:	mov	r1, r5
   18de0:	add	r3, sp, #28
   18de4:	mov	r2, r6
   18de8:	mov	r0, r4
   18dec:	bl	17614 <flatcc_json_parser_space_ext@@Base+0x324>
   18df0:	mov	r5, r0
   18df4:	add	fp, sp, #27
   18df8:	ldr	r3, [sp, #28]
   18dfc:	ldr	r0, [r4]
   18e00:	cmp	r3, #0
   18e04:	bne	18ec0 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   18e08:	bl	15150 <flatcc_builder_vector_count@@Base>
   18e0c:	mov	r9, r0
   18e10:	mov	r1, r0
   18e14:	ldr	r0, [r4]
   18e18:	str	r9, [r8, #16]
   18e1c:	bl	13c28 <flatcc_builder_enter_user_frame@@Base>
   18e20:	mov	r1, r0
   18e24:	mov	r8, r0
   18e28:	ldr	r0, [r4]
   18e2c:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   18e30:	mov	fp, r0
   18e34:	ldr	r0, [r4]
   18e38:	bl	1515c <flatcc_builder_vector_edit@@Base>
   18e3c:	mov	r1, r0
   18e40:	mov	r2, r9
   18e44:	mov	r0, fp
   18e48:	bl	12408 <memcpy@plt>
   18e4c:	ldr	r0, [r4]
   18e50:	bl	150dc <flatcc_builder_end_vector@@Base>
   18e54:	subs	fp, r0, #0
   18e58:	beq	18f20 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   18e5c:	sub	r1, sl, #1
   18e60:	ldr	r0, [r4]
   18e64:	bl	159c0 <flatcc_builder_table_add_offset@@Base>
   18e68:	cmp	r0, #0
   18e6c:	beq	18f20 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   18e70:	str	fp, [r0]
   18e74:	ldr	r0, [r4]
   18e78:	ldr	r1, [sp, #76]	; 0x4c
   18e7c:	bl	13d20 <flatcc_builder_get_user_frame_ptr@@Base>
   18e80:	add	r3, r0, #8
   18e84:	ldr	r1, [r3, r7]
   18e88:	add	r2, r3, r7
   18e8c:	ldr	r3, [r0, #4]
   18e90:	str	r8, [r2, #20]
   18e94:	cmp	r1, #0
   18e98:	addeq	r3, r3, #1
   18e9c:	streq	r3, [r0, #4]
   18ea0:	beq	18f60 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   18ea4:	cmp	r3, #0
   18ea8:	bne	18f98 <flatcc_json_parser_union_type_vector@@Base+0x224>
   18eac:	ldr	r3, [pc, #308]	; 18fe8 <flatcc_json_parser_union_type_vector@@Base+0x274>
   18eb0:	movw	r2, #1122	; 0x462
   18eb4:	ldr	r1, [pc, #304]	; 18fec <flatcc_json_parser_union_type_vector@@Base+0x278>
   18eb8:	ldr	r0, [pc, #304]	; 18ff0 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   18ebc:	bl	124b0 <__assert_fail@plt>
   18ec0:	mov	r1, #1
   18ec4:	bl	142c0 <flatcc_builder_extend_vector@@Base>
   18ec8:	subs	r3, r0, #0
   18ecc:	str	r3, [sp, #20]
   18ed0:	beq	18f20 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   18ed4:	mov	r1, r5
   18ed8:	mov	r3, fp
   18edc:	mov	r2, r6
   18ee0:	mov	r0, r4
   18ee4:	bl	1846c <flatcc_json_parser_integer@@Base+0xc8>
   18ee8:	cmp	r5, r0
   18eec:	mov	r9, r0
   18ef0:	movne	r5, r0
   18ef4:	bne	18f28 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   18ef8:	mov	r1, r5
   18efc:	mov	r2, r6
   18f00:	str	fp, [sp]
   18f04:	mov	r0, r4
   18f08:	ldr	r3, [sp, #80]	; 0x50
   18f0c:	bl	17484 <flatcc_json_parser_space_ext@@Base+0x194>
   18f10:	cmp	r6, r0
   18f14:	cmpne	r9, r0
   18f18:	mov	r5, r0
   18f1c:	bne	18f28 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   18f20:	mov	r3, #33	; 0x21
   18f24:	b	18f4c <flatcc_json_parser_union_type_vector@@Base+0x1d8>
   18f28:	ldrb	r0, [sp, #27]
   18f2c:	ldr	r3, [sp, #88]	; 0x58
   18f30:	blx	r3
   18f34:	cmp	r0, #0
   18f38:	bne	18f70 <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   18f3c:	ldr	r3, [r4, #8]
   18f40:	tst	r3, #1
   18f44:	bne	18f6c <flatcc_json_parser_union_type_vector@@Base+0x1f8>
   18f48:	mov	r3, #15
   18f4c:	mov	r1, r5
   18f50:	mov	r2, r6
   18f54:	mov	r0, r4
   18f58:	bl	17138 <flatcc_json_parser_set_error@@Base>
   18f5c:	mov	r5, r0
   18f60:	mov	r0, r5
   18f64:	add	sp, sp, #36	; 0x24
   18f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f6c:	strb	r0, [sp, #27]
   18f70:	ldrb	r3, [sp, #27]
   18f74:	mov	r1, r5
   18f78:	mov	r0, r4
   18f7c:	ldr	r2, [sp, #20]
   18f80:	strb	r3, [r2]
   18f84:	add	r3, sp, #28
   18f88:	mov	r2, r6
   18f8c:	bl	173d8 <flatcc_json_parser_space_ext@@Base+0xe8>
   18f90:	mov	r5, r0
   18f94:	b	18df8 <flatcc_json_parser_union_type_vector@@Base+0x84>
   18f98:	sub	r3, r3, #1
   18f9c:	ldr	r7, [r4, #4]
   18fa0:	ldr	fp, [r4, #16]
   18fa4:	str	r3, [r0, #4]
   18fa8:	mov	r0, r4
   18fac:	ldr	r3, [r2, #8]
   18fb0:	str	r3, [r4, #16]
   18fb4:	ldr	r3, [r2, #4]
   18fb8:	mov	r2, r6
   18fbc:	str	r3, [r4, #4]
   18fc0:	ldr	r3, [sp, #84]	; 0x54
   18fc4:	stm	sp, {r9, sl}
   18fc8:	str	r3, [sp, #8]
   18fcc:	mov	r3, r8
   18fd0:	bl	17698 <flatcc_json_parser_space_ext@@Base+0x3a8>
   18fd4:	cmp	r6, r0
   18fd8:	strne	r7, [r4, #4]
   18fdc:	strne	fp, [r4, #16]
   18fe0:	moveq	r5, r6
   18fe4:	b	18f60 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   18fe8:	andeq	sl, r1, r6, lsl fp
   18fec:	andeq	sl, r1, r9, lsl #25
   18ff0:	ldrdeq	sl, [r1], -r3

00018ff4 <flatcc_json_parser_table_as_root@@Base>:
   18ff4:	push	{r4, r5, r6, r7, r8, r9, lr}
   18ff8:	sub	sp, sp, #52	; 0x34
   18ffc:	subs	r4, r1, #0
   19000:	addeq	r4, sp, #4
   19004:	mov	r5, r2
   19008:	add	r6, r2, r3
   1900c:	mov	r7, r0
   19010:	ldr	r9, [sp, #80]	; 0x50
   19014:	mov	r2, #32
   19018:	mov	r1, #0
   1901c:	add	r0, r4, #12
   19020:	bl	12474 <memset@plt>
   19024:	mov	r3, #1
   19028:	mov	r2, #0
   1902c:	str	r7, [r4]
   19030:	mov	r0, r7
   19034:	ldr	r1, [sp, #84]	; 0x54
   19038:	asr	r8, r9, #1
   1903c:	stmib	r4, {r5, r9}
   19040:	str	r3, [r4, #16]
   19044:	and	r8, r8, #2
   19048:	str	r5, [r4, #28]
   1904c:	mov	r3, r8
   19050:	str	r6, [r4, #32]
   19054:	str	r5, [r4, #36]	; 0x24
   19058:	bl	140bc <flatcc_builder_start_buffer@@Base>
   1905c:	cmp	r0, #0
   19060:	beq	19074 <flatcc_json_parser_table_as_root@@Base+0x80>
   19064:	mvn	r6, #0
   19068:	mov	r0, r6
   1906c:	add	sp, sp, #52	; 0x34
   19070:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19074:	mov	r2, r6
   19078:	mov	r3, sp
   1907c:	ldr	r6, [sp, #88]	; 0x58
   19080:	mov	r1, r5
   19084:	mov	r0, r4
   19088:	blx	r6
   1908c:	ldr	r6, [r4, #24]
   19090:	cmp	r6, #0
   19094:	bne	19068 <flatcc_json_parser_table_as_root@@Base+0x74>
   19098:	mov	r0, r7
   1909c:	ldr	r1, [sp]
   190a0:	bl	14158 <flatcc_builder_end_buffer@@Base>
   190a4:	cmp	r0, #0
   190a8:	beq	19064 <flatcc_json_parser_table_as_root@@Base+0x70>
   190ac:	str	r5, [r4, #40]	; 0x28
   190b0:	b	19068 <flatcc_json_parser_table_as_root@@Base+0x74>

000190b4 <flatcc_json_parser_struct_as_root@@Base>:
   190b4:	b	18ff4 <flatcc_json_parser_table_as_root@@Base>
   190b8:	eor	r1, r1, #-2147483648	; 0x80000000
   190bc:	b	190c4 <flatcc_json_parser_struct_as_root@@Base+0x10>
   190c0:	eor	r3, r3, #-2147483648	; 0x80000000
   190c4:	push	{r4, r5, lr}
   190c8:	lsl	r4, r1, #1
   190cc:	lsl	r5, r3, #1
   190d0:	teq	r4, r5
   190d4:	teqeq	r0, r2
   190d8:	orrsne	ip, r4, r0
   190dc:	orrsne	ip, r5, r2
   190e0:	mvnsne	ip, r4, asr #21
   190e4:	mvnsne	ip, r5, asr #21
   190e8:	beq	192d4 <flatcc_json_parser_struct_as_root@@Base+0x220>
   190ec:	lsr	r4, r4, #21
   190f0:	rsbs	r5, r4, r5, lsr #21
   190f4:	rsblt	r5, r5, #0
   190f8:	ble	19118 <flatcc_json_parser_struct_as_root@@Base+0x64>
   190fc:	add	r4, r4, r5
   19100:	eor	r2, r0, r2
   19104:	eor	r3, r1, r3
   19108:	eor	r0, r2, r0
   1910c:	eor	r1, r3, r1
   19110:	eor	r2, r0, r2
   19114:	eor	r3, r1, r3
   19118:	cmp	r5, #54	; 0x36
   1911c:	pophi	{r4, r5, pc}
   19120:	tst	r1, #-2147483648	; 0x80000000
   19124:	lsl	r1, r1, #12
   19128:	mov	ip, #1048576	; 0x100000
   1912c:	orr	r1, ip, r1, lsr #12
   19130:	beq	1913c <flatcc_json_parser_struct_as_root@@Base+0x88>
   19134:	rsbs	r0, r0, #0
   19138:	rsc	r1, r1, #0
   1913c:	tst	r3, #-2147483648	; 0x80000000
   19140:	lsl	r3, r3, #12
   19144:	orr	r3, ip, r3, lsr #12
   19148:	beq	19154 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   1914c:	rsbs	r2, r2, #0
   19150:	rsc	r3, r3, #0
   19154:	teq	r4, r5
   19158:	beq	192bc <flatcc_json_parser_struct_as_root@@Base+0x208>
   1915c:	sub	r4, r4, #1
   19160:	rsbs	lr, r5, #32
   19164:	blt	19180 <flatcc_json_parser_struct_as_root@@Base+0xcc>
   19168:	lsl	ip, r2, lr
   1916c:	adds	r0, r0, r2, lsr r5
   19170:	adc	r1, r1, #0
   19174:	adds	r0, r0, r3, lsl lr
   19178:	adcs	r1, r1, r3, asr r5
   1917c:	b	1919c <flatcc_json_parser_struct_as_root@@Base+0xe8>
   19180:	sub	r5, r5, #32
   19184:	add	lr, lr, #32
   19188:	cmp	r2, #1
   1918c:	lsl	ip, r3, lr
   19190:	orrcs	ip, ip, #2
   19194:	adds	r0, r0, r3, asr r5
   19198:	adcs	r1, r1, r3, asr #31
   1919c:	and	r5, r1, #-2147483648	; 0x80000000
   191a0:	bpl	191b0 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   191a4:	rsbs	ip, ip, #0
   191a8:	rscs	r0, r0, #0
   191ac:	rsc	r1, r1, #0
   191b0:	cmp	r1, #1048576	; 0x100000
   191b4:	bcc	191f4 <flatcc_json_parser_struct_as_root@@Base+0x140>
   191b8:	cmp	r1, #2097152	; 0x200000
   191bc:	bcc	191dc <flatcc_json_parser_struct_as_root@@Base+0x128>
   191c0:	lsrs	r1, r1, #1
   191c4:	rrxs	r0, r0
   191c8:	rrx	ip, ip
   191cc:	add	r4, r4, #1
   191d0:	lsl	r2, r4, #21
   191d4:	cmn	r2, #4194304	; 0x400000
   191d8:	bcs	19334 <flatcc_json_parser_struct_as_root@@Base+0x280>
   191dc:	cmp	ip, #-2147483648	; 0x80000000
   191e0:	lsrseq	ip, r0, #1
   191e4:	adcs	r0, r0, #0
   191e8:	adc	r1, r1, r4, lsl #20
   191ec:	orr	r1, r1, r5
   191f0:	pop	{r4, r5, pc}
   191f4:	lsls	ip, ip, #1
   191f8:	adcs	r0, r0, r0
   191fc:	adc	r1, r1, r1
   19200:	tst	r1, #1048576	; 0x100000
   19204:	sub	r4, r4, #1
   19208:	bne	191dc <flatcc_json_parser_struct_as_root@@Base+0x128>
   1920c:	teq	r1, #0
   19210:	moveq	r1, r0
   19214:	moveq	r0, #0
   19218:	clz	r3, r1
   1921c:	addeq	r3, r3, #32
   19220:	sub	r3, r3, #11
   19224:	subs	r2, r3, #32
   19228:	bge	1924c <flatcc_json_parser_struct_as_root@@Base+0x198>
   1922c:	adds	r2, r2, #12
   19230:	ble	19248 <flatcc_json_parser_struct_as_root@@Base+0x194>
   19234:	add	ip, r2, #20
   19238:	rsb	r2, r2, #12
   1923c:	lsl	r0, r1, ip
   19240:	lsr	r1, r1, r2
   19244:	b	1925c <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   19248:	add	r2, r2, #20
   1924c:	rsble	ip, r2, #32
   19250:	lsl	r1, r1, r2
   19254:	orrle	r1, r1, r0, lsr ip
   19258:	lslle	r0, r0, r2
   1925c:	subs	r4, r4, r3
   19260:	addge	r1, r1, r4, lsl #20
   19264:	orrge	r1, r1, r5
   19268:	popge	{r4, r5, pc}
   1926c:	mvn	r4, r4
   19270:	subs	r4, r4, #31
   19274:	bge	192b0 <flatcc_json_parser_struct_as_root@@Base+0x1fc>
   19278:	adds	r4, r4, #12
   1927c:	bgt	19298 <flatcc_json_parser_struct_as_root@@Base+0x1e4>
   19280:	add	r4, r4, #20
   19284:	rsb	r2, r4, #32
   19288:	lsr	r0, r0, r4
   1928c:	orr	r0, r0, r1, lsl r2
   19290:	orr	r1, r5, r1, lsr r4
   19294:	pop	{r4, r5, pc}
   19298:	rsb	r4, r4, #12
   1929c:	rsb	r2, r4, #32
   192a0:	lsr	r0, r0, r2
   192a4:	orr	r0, r0, r1, lsl r4
   192a8:	mov	r1, r5
   192ac:	pop	{r4, r5, pc}
   192b0:	lsr	r0, r1, r4
   192b4:	mov	r1, r5
   192b8:	pop	{r4, r5, pc}
   192bc:	teq	r4, #0
   192c0:	eor	r3, r3, #1048576	; 0x100000
   192c4:	eoreq	r1, r1, #1048576	; 0x100000
   192c8:	addeq	r4, r4, #1
   192cc:	subne	r5, r5, #1
   192d0:	b	1915c <flatcc_json_parser_struct_as_root@@Base+0xa8>
   192d4:	mvns	ip, r4, asr #21
   192d8:	mvnsne	ip, r5, asr #21
   192dc:	beq	19344 <flatcc_json_parser_struct_as_root@@Base+0x290>
   192e0:	teq	r4, r5
   192e4:	teqeq	r0, r2
   192e8:	beq	192fc <flatcc_json_parser_struct_as_root@@Base+0x248>
   192ec:	orrs	ip, r4, r0
   192f0:	moveq	r1, r3
   192f4:	moveq	r0, r2
   192f8:	pop	{r4, r5, pc}
   192fc:	teq	r1, r3
   19300:	movne	r1, #0
   19304:	movne	r0, #0
   19308:	popne	{r4, r5, pc}
   1930c:	lsrs	ip, r4, #21
   19310:	bne	19324 <flatcc_json_parser_struct_as_root@@Base+0x270>
   19314:	lsls	r0, r0, #1
   19318:	adcs	r1, r1, r1
   1931c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19320:	pop	{r4, r5, pc}
   19324:	adds	r4, r4, #4194304	; 0x400000
   19328:	addcc	r1, r1, #1048576	; 0x100000
   1932c:	popcc	{r4, r5, pc}
   19330:	and	r5, r1, #-2147483648	; 0x80000000
   19334:	orr	r1, r5, #2130706432	; 0x7f000000
   19338:	orr	r1, r1, #15728640	; 0xf00000
   1933c:	mov	r0, #0
   19340:	pop	{r4, r5, pc}
   19344:	mvns	ip, r4, asr #21
   19348:	movne	r1, r3
   1934c:	movne	r0, r2
   19350:	mvnseq	ip, r5, asr #21
   19354:	movne	r3, r1
   19358:	movne	r2, r0
   1935c:	orrs	r4, r0, r1, lsl #12
   19360:	orrseq	r5, r2, r3, lsl #12
   19364:	teqeq	r1, r3
   19368:	orrne	r1, r1, #524288	; 0x80000
   1936c:	pop	{r4, r5, pc}
   19370:	teq	r0, #0
   19374:	moveq	r1, #0
   19378:	bxeq	lr
   1937c:	push	{r4, r5, lr}
   19380:	mov	r4, #1024	; 0x400
   19384:	add	r4, r4, #50	; 0x32
   19388:	mov	r5, #0
   1938c:	mov	r1, #0
   19390:	b	1920c <flatcc_json_parser_struct_as_root@@Base+0x158>
   19394:	teq	r0, #0
   19398:	moveq	r1, #0
   1939c:	bxeq	lr
   193a0:	push	{r4, r5, lr}
   193a4:	mov	r4, #1024	; 0x400
   193a8:	add	r4, r4, #50	; 0x32
   193ac:	ands	r5, r0, #-2147483648	; 0x80000000
   193b0:	rsbmi	r0, r0, #0
   193b4:	mov	r1, #0
   193b8:	b	1920c <flatcc_json_parser_struct_as_root@@Base+0x158>
   193bc:	lsls	r2, r0, #1
   193c0:	asr	r1, r2, #3
   193c4:	rrx	r1, r1
   193c8:	lsl	r0, r2, #28
   193cc:	andsne	r3, r2, #-16777216	; 0xff000000
   193d0:	teqne	r3, #-16777216	; 0xff000000
   193d4:	eorne	r1, r1, #939524096	; 0x38000000
   193d8:	bxne	lr
   193dc:	bics	r2, r2, #-16777216	; 0xff000000
   193e0:	bxeq	lr
   193e4:	teq	r3, #-16777216	; 0xff000000
   193e8:	orreq	r1, r1, #524288	; 0x80000
   193ec:	bxeq	lr
   193f0:	push	{r4, r5, lr}
   193f4:	mov	r4, #896	; 0x380
   193f8:	and	r5, r1, #-2147483648	; 0x80000000
   193fc:	bic	r1, r1, #-2147483648	; 0x80000000
   19400:	b	1920c <flatcc_json_parser_struct_as_root@@Base+0x158>
   19404:	orrs	r2, r0, r1
   19408:	bxeq	lr
   1940c:	push	{r4, r5, lr}
   19410:	mov	r5, #0
   19414:	b	19434 <flatcc_json_parser_struct_as_root@@Base+0x380>
   19418:	orrs	r2, r0, r1
   1941c:	bxeq	lr
   19420:	push	{r4, r5, lr}
   19424:	ands	r5, r1, #-2147483648	; 0x80000000
   19428:	bpl	19434 <flatcc_json_parser_struct_as_root@@Base+0x380>
   1942c:	rsbs	r0, r0, #0
   19430:	rsc	r1, r1, #0
   19434:	mov	r4, #1024	; 0x400
   19438:	add	r4, r4, #50	; 0x32
   1943c:	lsrs	ip, r1, #22
   19440:	beq	191b0 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   19444:	mov	r2, #3
   19448:	lsrs	ip, ip, #3
   1944c:	addne	r2, r2, #3
   19450:	lsrs	ip, ip, #3
   19454:	addne	r2, r2, #3
   19458:	add	r2, r2, ip, lsr #3
   1945c:	rsb	r3, r2, #32
   19460:	lsl	ip, r0, r3
   19464:	lsr	r0, r0, r2
   19468:	orr	r0, r0, r1, lsl r3
   1946c:	lsr	r1, r1, r2
   19470:	add	r4, r4, r2
   19474:	b	191b0 <flatcc_json_parser_struct_as_root@@Base+0xfc>

00019478 <__libc_csu_init@@Base>:
   19478:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1947c:	mov	r7, r0
   19480:	ldr	r6, [pc, #72]	; 194d0 <__libc_csu_init@@Base+0x58>
   19484:	ldr	r5, [pc, #72]	; 194d4 <__libc_csu_init@@Base+0x5c>
   19488:	add	r6, pc, r6
   1948c:	add	r5, pc, r5
   19490:	sub	r6, r6, r5
   19494:	mov	r8, r1
   19498:	mov	r9, r2
   1949c:	bl	123dc <free@plt-0x20>
   194a0:	asrs	r6, r6, #2
   194a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   194a8:	mov	r4, #0
   194ac:	add	r4, r4, #1
   194b0:	ldr	r3, [r5], #4
   194b4:	mov	r2, r9
   194b8:	mov	r1, r8
   194bc:	mov	r0, r7
   194c0:	blx	r3
   194c4:	cmp	r6, r4
   194c8:	bne	194ac <__libc_csu_init@@Base+0x34>
   194cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194d0:	andeq	r2, r1, r4, lsl #21
   194d4:	andeq	r2, r1, ip, ror sl

000194d8 <__libc_csu_fini@@Base>:
   194d8:	bx	lr

Disassembly of section .fini:

000194dc <.fini>:
   194dc:	push	{r3, lr}
   194e0:	pop	{r3, pc}
