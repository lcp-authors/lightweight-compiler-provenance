
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000114d0 <.init>:
   114d0:	push	{r3, lr}
   114d4:	bl	12888 <__assert_fail@plt+0xee8>
   114d8:	pop	{r3, pc}

Disassembly of section .plt:

000114dc <pthread_mutex_unlock@plt-0x14>:
   114dc:	push	{lr}		; (str lr, [sp, #-4]!)
   114e0:	ldr	lr, [pc, #4]	; 114ec <pthread_mutex_unlock@plt-0x4>
   114e4:	add	lr, pc, lr
   114e8:	ldr	pc, [lr, #8]!
   114ec:	andeq	r4, r3, r4, lsl fp

000114f0 <pthread_mutex_unlock@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #52, 20	; 0x34000
   114f8:	ldr	pc, [ip, #2836]!	; 0xb14

000114fc <fdopen@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #52, 20	; 0x34000
   11504:	ldr	pc, [ip, #2828]!	; 0xb0c

00011508 <calloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #52, 20	; 0x34000
   11510:	ldr	pc, [ip, #2820]!	; 0xb04

00011514 <wctype@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #52, 20	; 0x34000
   1151c:	ldr	pc, [ip, #2812]!	; 0xafc

00011520 <raise@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #52, 20	; 0x34000
   11528:	ldr	pc, [ip, #2804]!	; 0xaf4

0001152c <wcrtomb@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #52, 20	; 0x34000
   11534:	ldr	pc, [ip, #2796]!	; 0xaec

00011538 <iswctype@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #52, 20	; 0x34000
   11540:	ldr	pc, [ip, #2788]!	; 0xae4

00011544 <strcmp@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #52, 20	; 0x34000
   1154c:	ldr	pc, [ip, #2780]!	; 0xadc

00011550 <printf@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #52, 20	; 0x34000
   11558:	ldr	pc, [ip, #2772]!	; 0xad4

0001155c <pthread_mutex_destroy@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #52, 20	; 0x34000
   11564:	ldr	pc, [ip, #2764]!	; 0xacc

00011568 <fflush@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #52, 20	; 0x34000
   11570:	ldr	pc, [ip, #2756]!	; 0xac4

00011574 <wcwidth@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #52, 20	; 0x34000
   1157c:	ldr	pc, [ip, #2748]!	; 0xabc

00011580 <getuid@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #52, 20	; 0x34000
   11588:	ldr	pc, [ip, #2740]!	; 0xab4

0001158c <memmove@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #52, 20	; 0x34000
   11594:	ldr	pc, [ip, #2732]!	; 0xaac

00011598 <free@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #52, 20	; 0x34000
   115a0:	ldr	pc, [ip, #2724]!	; 0xaa4

000115a4 <pthread_mutex_lock@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #52, 20	; 0x34000
   115ac:	ldr	pc, [ip, #2716]!	; 0xa9c

000115b0 <ferror@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #52, 20	; 0x34000
   115b8:	ldr	pc, [ip, #2708]!	; 0xa94

000115bc <strndup@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #52, 20	; 0x34000
   115c4:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c8 <_exit@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #52, 20	; 0x34000
   115d0:	ldr	pc, [ip, #2692]!	; 0xa84

000115d4 <memcpy@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #52, 20	; 0x34000
   115dc:	ldr	pc, [ip, #2684]!	; 0xa7c

000115e0 <pthread_mutex_init@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #52, 20	; 0x34000
   115e8:	ldr	pc, [ip, #2676]!	; 0xa74

000115ec <__strtoull_internal@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #52, 20	; 0x34000
   115f4:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f8 <towlower@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #52, 20	; 0x34000
   11600:	ldr	pc, [ip, #2660]!	; 0xa64

00011604 <mbsinit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #52, 20	; 0x34000
   1160c:	ldr	pc, [ip, #2652]!	; 0xa5c

00011610 <time@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #52, 20	; 0x34000
   11618:	ldr	pc, [ip, #2644]!	; 0xa54

0001161c <memcmp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #52, 20	; 0x34000
   11624:	ldr	pc, [ip, #2636]!	; 0xa4c

00011628 <dcgettext@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #52, 20	; 0x34000
   11630:	ldr	pc, [ip, #2628]!	; 0xa44

00011634 <realloc@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #52, 20	; 0x34000
   1163c:	ldr	pc, [ip, #2620]!	; 0xa3c

00011640 <textdomain@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #52, 20	; 0x34000
   11648:	ldr	pc, [ip, #2612]!	; 0xa34

0001164c <iswcntrl@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #52, 20	; 0x34000
   11654:	ldr	pc, [ip, #2604]!	; 0xa2c

00011658 <geteuid@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #52, 20	; 0x34000
   11660:	ldr	pc, [ip, #2596]!	; 0xa24

00011664 <iswprint@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #52, 20	; 0x34000
   1166c:	ldr	pc, [ip, #2588]!	; 0xa1c

00011670 <setgroups@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #52, 20	; 0x34000
   11678:	ldr	pc, [ip, #2580]!	; 0xa14

0001167c <__fxstat64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #52, 20	; 0x34000
   11684:	ldr	pc, [ip, #2572]!	; 0xa0c

00011688 <fwrite@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #52, 20	; 0x34000
   11690:	ldr	pc, [ip, #2564]!	; 0xa04

00011694 <lseek64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #52, 20	; 0x34000
   1169c:	ldr	pc, [ip, #2556]!	; 0x9fc

000116a0 <__ctype_get_mb_cur_max@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #52, 20	; 0x34000
   116a8:	ldr	pc, [ip, #2548]!	; 0x9f4

000116ac <fread@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #52, 20	; 0x34000
   116b4:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b8 <__fpending@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #52, 20	; 0x34000
   116c0:	ldr	pc, [ip, #2532]!	; 0x9e4

000116c4 <mbrtowc@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #52, 20	; 0x34000
   116cc:	ldr	pc, [ip, #2524]!	; 0x9dc

000116d0 <error@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #52, 20	; 0x34000
   116d8:	ldr	pc, [ip, #2516]!	; 0x9d4

000116dc <fnmatch@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #52, 20	; 0x34000
   116e4:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e8 <open64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #52, 20	; 0x34000
   116f0:	ldr	pc, [ip, #2500]!	; 0x9c4

000116f4 <getenv@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #52, 20	; 0x34000
   116fc:	ldr	pc, [ip, #2492]!	; 0x9bc

00011700 <setgid@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #52, 20	; 0x34000
   11708:	ldr	pc, [ip, #2484]!	; 0x9b4

0001170c <malloc@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #52, 20	; 0x34000
   11714:	ldr	pc, [ip, #2476]!	; 0x9ac

00011718 <__libc_start_main@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #52, 20	; 0x34000
   11720:	ldr	pc, [ip, #2468]!	; 0x9a4

00011724 <strftime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #52, 20	; 0x34000
   1172c:	ldr	pc, [ip, #2460]!	; 0x99c

00011730 <__freading@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #52, 20	; 0x34000
   11738:	ldr	pc, [ip, #2452]!	; 0x994

0001173c <localtime@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #52, 20	; 0x34000
   11744:	ldr	pc, [ip, #2444]!	; 0x98c

00011748 <__ctype_tolower_loc@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #52, 20	; 0x34000
   11750:	ldr	pc, [ip, #2436]!	; 0x984

00011754 <__ctype_toupper_loc@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #52, 20	; 0x34000
   1175c:	ldr	pc, [ip, #2428]!	; 0x97c

00011760 <__gmon_start__@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #52, 20	; 0x34000
   11768:	ldr	pc, [ip, #2420]!	; 0x974

0001176c <getopt_long@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #52, 20	; 0x34000
   11774:	ldr	pc, [ip, #2412]!	; 0x96c

00011778 <__ctype_b_loc@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #52, 20	; 0x34000
   11780:	ldr	pc, [ip, #2404]!	; 0x964

00011784 <exit@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #52, 20	; 0x34000
   1178c:	ldr	pc, [ip, #2396]!	; 0x95c

00011790 <feof@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #52, 20	; 0x34000
   11798:	ldr	pc, [ip, #2388]!	; 0x954

0001179c <strtoul@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #52, 20	; 0x34000
   117a4:	ldr	pc, [ip, #2380]!	; 0x94c

000117a8 <strlen@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #52, 20	; 0x34000
   117b0:	ldr	pc, [ip, #2372]!	; 0x944

000117b4 <strchr@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #52, 20	; 0x34000
   117bc:	ldr	pc, [ip, #2364]!	; 0x93c

000117c0 <fprintf@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #52, 20	; 0x34000
   117c8:	ldr	pc, [ip, #2356]!	; 0x934

000117cc <ungetc@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #52, 20	; 0x34000
   117d4:	ldr	pc, [ip, #2348]!	; 0x92c

000117d8 <__errno_location@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #52, 20	; 0x34000
   117e0:	ldr	pc, [ip, #2340]!	; 0x924

000117e4 <iswalnum@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #52, 20	; 0x34000
   117ec:	ldr	pc, [ip, #2332]!	; 0x91c

000117f0 <strncasecmp@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #52, 20	; 0x34000
   117f8:	ldr	pc, [ip, #2324]!	; 0x914

000117fc <__cxa_atexit@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #52, 20	; 0x34000
   11804:	ldr	pc, [ip, #2316]!	; 0x90c

00011808 <getgid@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #52, 20	; 0x34000
   11810:	ldr	pc, [ip, #2308]!	; 0x904

00011814 <memset@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #52, 20	; 0x34000
   1181c:	ldr	pc, [ip, #2300]!	; 0x8fc

00011820 <putchar@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #52, 20	; 0x34000
   11828:	ldr	pc, [ip, #2292]!	; 0x8f4

0001182c <btowc@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #52, 20	; 0x34000
   11834:	ldr	pc, [ip, #2284]!	; 0x8ec

00011838 <fgetc@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #52, 20	; 0x34000
   11840:	ldr	pc, [ip, #2276]!	; 0x8e4

00011844 <fileno@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #52, 20	; 0x34000
   1184c:	ldr	pc, [ip, #2268]!	; 0x8dc

00011850 <difftime@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #52, 20	; 0x34000
   11858:	ldr	pc, [ip, #2260]!	; 0x8d4

0001185c <memchr@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #52, 20	; 0x34000
   11864:	ldr	pc, [ip, #2252]!	; 0x8cc

00011868 <fclose@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #52, 20	; 0x34000
   11870:	ldr	pc, [ip, #2244]!	; 0x8c4

00011874 <strnlen@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #52, 20	; 0x34000
   1187c:	ldr	pc, [ip, #2236]!	; 0x8bc

00011880 <fseeko64@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #52, 20	; 0x34000
   11888:	ldr	pc, [ip, #2228]!	; 0x8b4

0001188c <fcntl64@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #52, 20	; 0x34000
   11894:	ldr	pc, [ip, #2220]!	; 0x8ac

00011898 <setlocale@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #52, 20	; 0x34000
   118a0:	ldr	pc, [ip, #2212]!	; 0x8a4

000118a4 <strrchr@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #52, 20	; 0x34000
   118ac:	ldr	pc, [ip, #2204]!	; 0x89c

000118b0 <nl_langinfo@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #52, 20	; 0x34000
   118b8:	ldr	pc, [ip, #2196]!	; 0x894

000118bc <fputc@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #52, 20	; 0x34000
   118c4:	ldr	pc, [ip, #2188]!	; 0x88c

000118c8 <setuid@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #52, 20	; 0x34000
   118d0:	ldr	pc, [ip, #2180]!	; 0x884

000118d4 <localeconv@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #52, 20	; 0x34000
   118dc:	ldr	pc, [ip, #2172]!	; 0x87c

000118e0 <clearerr@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #52, 20	; 0x34000
   118e8:	ldr	pc, [ip, #2164]!	; 0x874

000118ec <sprintf@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #52, 20	; 0x34000
   118f4:	ldr	pc, [ip, #2156]!	; 0x86c

000118f8 <putc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #52, 20	; 0x34000
   11900:	ldr	pc, [ip, #2148]!	; 0x864

00011904 <strpbrk@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #52, 20	; 0x34000
   1190c:	ldr	pc, [ip, #2140]!	; 0x85c

00011910 <bindtextdomain@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #52, 20	; 0x34000
   11918:	ldr	pc, [ip, #2132]!	; 0x854

0001191c <getdelim@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #52, 20	; 0x34000
   11924:	ldr	pc, [ip, #2124]!	; 0x84c

00011928 <__xstat64@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #52, 20	; 0x34000
   11930:	ldr	pc, [ip, #2116]!	; 0x844

00011934 <isatty@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #52, 20	; 0x34000
   1193c:	ldr	pc, [ip, #2108]!	; 0x83c

00011940 <towupper@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #52, 20	; 0x34000
   11948:	ldr	pc, [ip, #2100]!	; 0x834

0001194c <fputs@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #52, 20	; 0x34000
   11954:	ldr	pc, [ip, #2092]!	; 0x82c

00011958 <strncmp@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #52, 20	; 0x34000
   11960:	ldr	pc, [ip, #2084]!	; 0x824

00011964 <abort@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #52, 20	; 0x34000
   1196c:	ldr	pc, [ip, #2076]!	; 0x81c

00011970 <getc@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #52, 20	; 0x34000
   11978:	ldr	pc, [ip, #2068]!	; 0x814

0001197c <close@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #52, 20	; 0x34000
   11984:	ldr	pc, [ip, #2060]!	; 0x80c

00011988 <__lxstat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #52, 20	; 0x34000
   11990:	ldr	pc, [ip, #2052]!	; 0x804

00011994 <dcngettext@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #52, 20	; 0x34000
   1199c:	ldr	pc, [ip, #2044]!	; 0x7fc

000119a0 <__assert_fail@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #52, 20	; 0x34000
   119a8:	ldr	pc, [ip, #2036]!	; 0x7f4

Disassembly of section .text:

000119b0 <.text>:
   119b0:	movw	r3, #14992	; 0x3a90
   119b4:	movt	r3, #3
   119b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   119bc:	ldr	r4, [r3, #192]	; 0xc0
   119c0:	strd	r6, [sp, #8]
   119c4:	ldrd	r2, [r3, #196]	; 0xc4
   119c8:	strd	r8, [sp, #16]
   119cc:	strd	sl, [sp, #24]
   119d0:	str	lr, [sp, #32]
   119d4:	vpush	{d8-d9}
   119d8:	sub	sp, sp, #268	; 0x10c
   119dc:	str	r1, [sp, #48]	; 0x30
   119e0:	str	r4, [sp, #160]	; 0xa0
   119e4:	cmp	r4, #0
   119e8:	addne	r5, sp, #164	; 0xa4
   119ec:	str	r0, [sp, #56]	; 0x38
   119f0:	strd	r2, [sp, #164]	; 0xa4
   119f4:	bne	11a08 <__assert_fail@plt+0x68>
   119f8:	b	120c8 <__assert_fail@plt+0x728>
   119fc:	ldr	r4, [r5], #4
   11a00:	cmp	r4, #0
   11a04:	beq	120c8 <__assert_fail@plt+0x728>
   11a08:	mov	r1, #131072	; 0x20000
   11a0c:	mov	r0, r4
   11a10:	bl	14efc <__assert_fail@plt+0x355c>
   11a14:	subs	r6, r0, #0
   11a18:	blt	119fc <__assert_fail@plt+0x5c>
   11a1c:	mov	r2, #1
   11a20:	mov	r1, #2
   11a24:	bl	1ed4c <__assert_fail@plt+0xd3ac>
   11a28:	cmp	r0, #0
   11a2c:	bne	12738 <__assert_fail@plt+0xd98>
   11a30:	movw	r3, #25128	; 0x6228
   11a34:	movt	r3, #4
   11a38:	str	r6, [sp, #84]	; 0x54
   11a3c:	str	r4, [r3, #108]	; 0x6c
   11a40:	bl	11658 <geteuid@plt>
   11a44:	mov	r5, r0
   11a48:	bl	11580 <getuid@plt>
   11a4c:	mov	r4, r0
   11a50:	bl	11808 <getgid@plt>
   11a54:	cmp	r5, #0
   11a58:	mov	r6, r0
   11a5c:	beq	12120 <__assert_fail@plt+0x780>
   11a60:	cmp	r4, #0
   11a64:	cmpne	r5, r4
   11a68:	moveq	r4, #1
   11a6c:	movne	r4, #0
   11a70:	bl	117d8 <__errno_location@plt>
   11a74:	cmp	r4, #0
   11a78:	str	r0, [sp, #52]	; 0x34
   11a7c:	beq	122cc <__assert_fail@plt+0x92c>
   11a80:	ldr	r3, [sp, #52]	; 0x34
   11a84:	mov	r4, #0
   11a88:	mov	r0, r6
   11a8c:	str	r4, [r3]
   11a90:	bl	11700 <setgid@plt>
   11a94:	cmp	r0, r4
   11a98:	bne	1279c <__assert_fail@plt+0xdfc>
   11a9c:	ldr	r3, [sp, #48]	; 0x30
   11aa0:	ldr	r0, [r3]
   11aa4:	cmp	r0, #0
   11aa8:	beq	12154 <__assert_fail@plt+0x7b4>
   11aac:	bl	19480 <__assert_fail@plt+0x7ae0>
   11ab0:	movw	r1, #17212	; 0x433c
   11ab4:	movt	r1, #3
   11ab8:	mov	r0, #6
   11abc:	movw	r4, #25128	; 0x6228
   11ac0:	movt	r4, #4
   11ac4:	bl	11898 <setlocale@plt>
   11ac8:	movw	r1, #17848	; 0x45b8
   11acc:	movt	r1, #3
   11ad0:	movw	r0, #18692	; 0x4904
   11ad4:	movt	r0, #3
   11ad8:	bl	11910 <bindtextdomain@plt>
   11adc:	movw	r0, #18692	; 0x4904
   11ae0:	movt	r0, #3
   11ae4:	bl	11640 <textdomain@plt>
   11ae8:	mov	r0, #0
   11aec:	bl	1b278 <__assert_fail@plt+0x98d8>
   11af0:	str	r0, [r4, #4]
   11af4:	movw	r0, #19984	; 0x4e10
   11af8:	movt	r0, #1
   11afc:	bl	33a6c <__assert_fail@plt+0x220cc>
   11b00:	cmp	r0, #0
   11b04:	bne	12770 <__assert_fail@plt+0xdd0>
   11b08:	movw	r0, #10764	; 0x2a0c
   11b0c:	movt	r0, #1
   11b10:	bl	33a6c <__assert_fail@plt+0x220cc>
   11b14:	subs	sl, r0, #0
   11b18:	bne	12770 <__assert_fail@plt+0xdd0>
   11b1c:	mov	r2, #0
   11b20:	mov	r3, #0
   11b24:	ldr	r7, [pc, #2744]	; 125e4 <__assert_fail@plt+0xc44>
   11b28:	mov	r1, #1
   11b2c:	movw	r0, #17908	; 0x45f4
   11b30:	movt	r0, #3
   11b34:	str	sl, [sp, #80]	; 0x50
   11b38:	movw	r6, #17920	; 0x4600
   11b3c:	movt	r6, #3
   11b40:	strb	r1, [r4, #80]	; 0x50
   11b44:	movw	r5, #25120	; 0x6220
   11b48:	movt	r5, #4
   11b4c:	strd	r2, [r4, #88]	; 0x58
   11b50:	strd	r2, [r4, #96]	; 0x60
   11b54:	str	sl, [sp, #96]	; 0x60
   11b58:	str	sl, [sp, #100]	; 0x64
   11b5c:	str	sl, [sp, #104]	; 0x68
   11b60:	bl	116f4 <getenv@plt>
   11b64:	mov	fp, r0
   11b68:	str	sl, [r4, #16]
   11b6c:	str	sl, [sp, #60]	; 0x3c
   11b70:	str	sl, [sp, #68]	; 0x44
   11b74:	str	sl, [sp, #88]	; 0x58
   11b78:	str	sl, [sp, #92]	; 0x5c
   11b7c:	str	sl, [sp, #108]	; 0x6c
   11b80:	add	r2, sp, #152	; 0x98
   11b84:	mvn	ip, #0
   11b88:	ldr	r1, [sp, #48]	; 0x30
   11b8c:	mov	r3, r7
   11b90:	str	r2, [sp]
   11b94:	mov	r2, r6
   11b98:	ldr	r0, [sp, #56]	; 0x38
   11b9c:	str	ip, [sp, #152]	; 0x98
   11ba0:	bl	1176c <getopt_long@plt>
   11ba4:	cmn	r0, #1
   11ba8:	beq	12160 <__assert_fail@plt+0x7c0>
   11bac:	sub	r0, r0, #48	; 0x30
   11bb0:	cmp	r0, #209	; 0xd1
   11bb4:	ldrls	pc, [pc, r0, lsl #2]
   11bb8:	b	1271c <__assert_fail@plt+0xd7c>
   11bbc:	muleq	r1, r8, r0
   11bc0:	andeq	r2, r1, ip, lsl r7
   11bc4:	andeq	r2, r1, ip, lsl r7
   11bc8:	andeq	r2, r1, ip, lsl r7
   11bcc:	andeq	r2, r1, ip, lsl r7
   11bd0:	andeq	r2, r1, ip, lsl r7
   11bd4:	andeq	r2, r1, ip, lsl r7
   11bd8:	andeq	r2, r1, ip, lsl r7
   11bdc:	andeq	r2, r1, ip, lsl r7
   11be0:	andeq	r2, r1, ip, lsl r7
   11be4:	andeq	r2, r1, ip, lsl r7
   11be8:	andeq	r2, r1, ip, lsl r7
   11bec:	andeq	r2, r1, ip, lsl r7
   11bf0:	andeq	r2, r1, ip, lsl r7
   11bf4:	andeq	r2, r1, ip, lsl r7
   11bf8:	andeq	r2, r1, ip, lsl r7
   11bfc:	andeq	r2, r1, ip, lsl r7
   11c00:	strheq	r2, [r1], -ip
   11c04:	andeq	r2, r1, ip, lsl r7
   11c08:	andeq	r2, r1, ip, lsl r7
   11c0c:	andeq	r2, r1, ip, lsl r7
   11c10:	andeq	r2, r1, ip, lsl #1
   11c14:	andeq	r2, r1, ip, lsl r7
   11c18:	andeq	r2, r1, ip, lsl r7
   11c1c:	andeq	r2, r1, r8, ror r0
   11c20:	andeq	r2, r1, ip, lsl r7
   11c24:	andeq	r2, r1, ip, lsl r7
   11c28:	andeq	r2, r1, ip, lsl r7
   11c2c:	andeq	r2, r1, r4, rrx
   11c30:	andeq	r2, r1, ip, lsl r7
   11c34:	andeq	r2, r1, ip, lsl r7
   11c38:	andeq	r2, r1, ip, lsl r7
   11c3c:	andeq	r2, r1, r8, ror r0
   11c40:	andeq	r2, r1, ip, lsl r7
   11c44:	andeq	r2, r1, ip, lsl r7
   11c48:	andeq	r2, r1, r8, asr r0
   11c4c:	andeq	r2, r1, ip, lsl r7
   11c50:	andeq	r2, r1, ip, lsl r7
   11c54:	andeq	r2, r1, ip, lsl r7
   11c58:	andeq	r2, r1, ip, lsl r7
   11c5c:	andeq	r2, r1, ip, lsl r7
   11c60:	andeq	r2, r1, ip, lsl r7
   11c64:	andeq	r2, r1, ip, lsl r7
   11c68:	andeq	r2, r1, ip, lsl r7
   11c6c:	andeq	r2, r1, ip, lsl r7
   11c70:	andeq	r2, r1, ip, lsl r7
   11c74:	andeq	r2, r1, ip, lsl r7
   11c78:	andeq	r2, r1, ip, lsl r7
   11c7c:	andeq	r2, r1, ip, lsl r7
   11c80:	andeq	r2, r1, ip, lsl r7
   11c84:	strheq	r2, [r1], -r0
   11c88:	andeq	r2, r1, ip, asr #32
   11c8c:	andeq	r2, r1, r4, lsr #32
   11c90:	andeq	r2, r1, r8, lsl r0
   11c94:	andeq	r2, r1, ip, lsl r7
   11c98:	andeq	r2, r1, ip, lsl r7
   11c9c:	strdeq	r2, [r1], -r0
   11ca0:	andeq	r2, r1, ip
   11ca4:	andeq	r2, r1, ip, lsl r7
   11ca8:	andeq	r2, r1, ip, lsl r7
   11cac:	ldrdeq	r1, [r1], -r4
   11cb0:	andeq	r1, r1, r0, lsl #23
   11cb4:	andeq	r2, r1, ip, lsl r7
   11cb8:	andeq	r2, r1, ip, lsl r7
   11cbc:	andeq	r1, r1, r8, asr #31
   11cc0:	andeq	r2, r1, ip, lsl r7
   11cc4:			; <UNDEFINED> instruction: 0x00011fbc
   11cc8:	andeq	r1, r1, r0, lsl #23
   11ccc:	andeq	r2, r1, ip, lsl r7
   11cd0:	andeq	r2, r1, ip, lsl r7
   11cd4:	andeq	r1, r1, ip, lsl #31
   11cd8:	andeq	r1, r1, r0, lsl #31
   11cdc:	andeq	r2, r1, ip, lsl r7
   11ce0:	andeq	r2, r1, ip, lsl r7
   11ce4:	andeq	r2, r1, ip, lsl r7
   11ce8:	andeq	r2, r1, ip, lsl r7
   11cec:	andeq	r2, r1, ip, lsl r7
   11cf0:	andeq	r2, r1, ip, lsl r7
   11cf4:	andeq	r2, r1, ip, lsl r7
   11cf8:	andeq	r2, r1, ip, lsl r7
   11cfc:	andeq	r2, r1, ip, lsl r7
   11d00:	andeq	r2, r1, ip, lsl r7
   11d04:	andeq	r2, r1, ip, lsl r7
   11d08:	andeq	r2, r1, ip, lsl r7
   11d0c:	andeq	r2, r1, ip, lsl r7
   11d10:	andeq	r2, r1, ip, lsl r7
   11d14:	andeq	r2, r1, ip, lsl r7
   11d18:	andeq	r2, r1, ip, lsl r7
   11d1c:	andeq	r2, r1, ip, lsl r7
   11d20:	andeq	r2, r1, ip, lsl r7
   11d24:	andeq	r2, r1, ip, lsl r7
   11d28:	andeq	r2, r1, ip, lsl r7
   11d2c:	andeq	r2, r1, ip, lsl r7
   11d30:	andeq	r2, r1, ip, lsl r7
   11d34:	andeq	r2, r1, ip, lsl r7
   11d38:	andeq	r2, r1, ip, lsl r7
   11d3c:	andeq	r2, r1, ip, lsl r7
   11d40:	andeq	r2, r1, ip, lsl r7
   11d44:	andeq	r2, r1, ip, lsl r7
   11d48:	andeq	r2, r1, ip, lsl r7
   11d4c:	andeq	r2, r1, ip, lsl r7
   11d50:	andeq	r2, r1, ip, lsl r7
   11d54:	andeq	r2, r1, ip, lsl r7
   11d58:	andeq	r2, r1, ip, lsl r7
   11d5c:	andeq	r2, r1, ip, lsl r7
   11d60:	andeq	r2, r1, ip, lsl r7
   11d64:	andeq	r2, r1, ip, lsl r7
   11d68:	andeq	r2, r1, ip, lsl r7
   11d6c:	andeq	r2, r1, ip, lsl r7
   11d70:	andeq	r2, r1, ip, lsl r7
   11d74:	andeq	r2, r1, ip, lsl r7
   11d78:	andeq	r2, r1, ip, lsl r7
   11d7c:	andeq	r2, r1, ip, lsl r7
   11d80:	andeq	r2, r1, ip, lsl r7
   11d84:	andeq	r2, r1, ip, lsl r7
   11d88:	andeq	r2, r1, ip, lsl r7
   11d8c:	andeq	r2, r1, ip, lsl r7
   11d90:	andeq	r2, r1, ip, lsl r7
   11d94:	andeq	r2, r1, ip, lsl r7
   11d98:	andeq	r2, r1, ip, lsl r7
   11d9c:	andeq	r2, r1, ip, lsl r7
   11da0:	andeq	r2, r1, ip, lsl r7
   11da4:	andeq	r2, r1, ip, lsl r7
   11da8:	andeq	r2, r1, ip, lsl r7
   11dac:	andeq	r2, r1, ip, lsl r7
   11db0:	andeq	r2, r1, ip, lsl r7
   11db4:	andeq	r2, r1, ip, lsl r7
   11db8:	andeq	r2, r1, ip, lsl r7
   11dbc:	andeq	r2, r1, ip, lsl r7
   11dc0:	andeq	r2, r1, ip, lsl r7
   11dc4:	andeq	r2, r1, ip, lsl r7
   11dc8:	andeq	r2, r1, ip, lsl r7
   11dcc:	andeq	r2, r1, ip, lsl r7
   11dd0:	andeq	r2, r1, ip, lsl r7
   11dd4:	andeq	r2, r1, ip, lsl r7
   11dd8:	andeq	r2, r1, ip, lsl r7
   11ddc:	andeq	r2, r1, ip, lsl r7
   11de0:	andeq	r2, r1, ip, lsl r7
   11de4:	andeq	r2, r1, ip, lsl r7
   11de8:	andeq	r2, r1, ip, lsl r7
   11dec:	andeq	r2, r1, ip, lsl r7
   11df0:	andeq	r2, r1, ip, lsl r7
   11df4:	andeq	r2, r1, ip, lsl r7
   11df8:	andeq	r2, r1, ip, lsl r7
   11dfc:	andeq	r2, r1, ip, lsl r7
   11e00:	andeq	r2, r1, ip, lsl r7
   11e04:	andeq	r2, r1, ip, lsl r7
   11e08:	andeq	r2, r1, ip, lsl r7
   11e0c:	andeq	r2, r1, ip, lsl r7
   11e10:	andeq	r2, r1, ip, lsl r7
   11e14:	andeq	r2, r1, ip, lsl r7
   11e18:	andeq	r2, r1, ip, lsl r7
   11e1c:	andeq	r2, r1, ip, lsl r7
   11e20:	andeq	r2, r1, ip, lsl r7
   11e24:	andeq	r2, r1, ip, lsl r7
   11e28:	andeq	r2, r1, ip, lsl r7
   11e2c:	andeq	r2, r1, ip, lsl r7
   11e30:	andeq	r2, r1, ip, lsl r7
   11e34:	andeq	r2, r1, ip, lsl r7
   11e38:	andeq	r2, r1, ip, lsl r7
   11e3c:	andeq	r2, r1, ip, lsl r7
   11e40:	andeq	r2, r1, ip, lsl r7
   11e44:	andeq	r2, r1, ip, lsl r7
   11e48:	andeq	r2, r1, ip, lsl r7
   11e4c:	andeq	r2, r1, ip, lsl r7
   11e50:	andeq	r2, r1, ip, lsl r7
   11e54:	andeq	r2, r1, ip, lsl r7
   11e58:	andeq	r2, r1, ip, lsl r7
   11e5c:	andeq	r2, r1, ip, lsl r7
   11e60:	andeq	r2, r1, ip, lsl r7
   11e64:	andeq	r2, r1, ip, lsl r7
   11e68:	andeq	r2, r1, ip, lsl r7
   11e6c:	andeq	r2, r1, ip, lsl r7
   11e70:	andeq	r2, r1, ip, lsl r7
   11e74:	andeq	r2, r1, ip, lsl r7
   11e78:	andeq	r2, r1, ip, lsl r7
   11e7c:	andeq	r2, r1, ip, lsl r7
   11e80:	andeq	r2, r1, ip, lsl r7
   11e84:	andeq	r2, r1, ip, lsl r7
   11e88:	andeq	r2, r1, ip, lsl r7
   11e8c:	andeq	r2, r1, ip, lsl r7
   11e90:	andeq	r2, r1, ip, lsl r7
   11e94:	andeq	r2, r1, ip, lsl r7
   11e98:	andeq	r2, r1, ip, lsl r7
   11e9c:	andeq	r2, r1, ip, lsl r7
   11ea0:	andeq	r2, r1, ip, lsl r7
   11ea4:	andeq	r2, r1, ip, lsl r7
   11ea8:	andeq	r2, r1, ip, lsl r7
   11eac:	andeq	r2, r1, ip, lsl r7
   11eb0:	andeq	r2, r1, ip, lsl r7
   11eb4:	andeq	r2, r1, ip, lsl r7
   11eb8:	andeq	r2, r1, ip, lsl r7
   11ebc:	andeq	r2, r1, ip, lsl r7
   11ec0:	andeq	r2, r1, ip, lsl r7
   11ec4:	andeq	r2, r1, ip, lsl r7
   11ec8:	andeq	r2, r1, ip, lsl r7
   11ecc:	andeq	r2, r1, ip, lsl r7
   11ed0:	andeq	r2, r1, ip, lsl r7
   11ed4:	andeq	r2, r1, ip, lsl r7
   11ed8:	andeq	r2, r1, ip, lsl r7
   11edc:	andeq	r2, r1, ip, lsl r7
   11ee0:	andeq	r2, r1, ip, lsl r7
   11ee4:	andeq	r2, r1, ip, lsl r7
   11ee8:	andeq	r2, r1, ip, lsl r7
   11eec:	andeq	r2, r1, ip, lsl r7
   11ef0:	andeq	r2, r1, ip, lsl r7
   11ef4:	andeq	r2, r1, ip, lsl r7
   11ef8:	andeq	r2, r1, ip, lsl r7
   11efc:	andeq	r1, r1, r0, ror pc
   11f00:	andeq	r1, r1, r4, lsl #30
   11f04:	ldr	r9, [r5]
   11f08:	ldrb	r8, [r9]
   11f0c:	cmp	r8, #0
   11f10:	beq	127b8 <__assert_fail@plt+0xe18>
   11f14:	ldr	ip, [sp, #52]	; 0x34
   11f18:	mov	r3, #0
   11f1c:	mov	r2, #10
   11f20:	add	r1, sp, #160	; 0xa0
   11f24:	mov	r0, r9
   11f28:	str	r3, [ip]
   11f2c:	bl	1179c <strtoul@plt>
   11f30:	cmn	r0, #1
   11f34:	beq	120d4 <__assert_fail@plt+0x734>
   11f38:	cmp	r0, #0
   11f3c:	bne	11f50 <__assert_fail@plt+0x5b0>
   11f40:	ldr	r3, [sp, #52]	; 0x34
   11f44:	ldr	r8, [r3]
   11f48:	cmp	r8, #22
   11f4c:	beq	120e4 <__assert_fail@plt+0x744>
   11f50:	ldr	r3, [sp, #160]	; 0xa0
   11f54:	ldrb	r3, [r3]
   11f58:	cmp	r3, #0
   11f5c:	bne	127f4 <__assert_fail@plt+0xe54>
   11f60:	movw	r3, #25004	; 0x61ac
   11f64:	movt	r3, #4
   11f68:	str	r0, [r3, #8]
   11f6c:	b	11b80 <__assert_fail@plt+0x1e0>
   11f70:	ldr	r0, [r5]
   11f74:	bl	149bc <__assert_fail@plt+0x301c>
   11f78:	str	r0, [sp, #100]	; 0x64
   11f7c:	b	11b80 <__assert_fail@plt+0x1e0>
   11f80:	mov	r3, #0
   11f84:	str	r3, [sp, #68]	; 0x44
   11f88:	b	11b80 <__assert_fail@plt+0x1e0>
   11f8c:	movw	r0, #17840	; 0x45b0
   11f90:	movt	r0, #3
   11f94:	bl	14554 <__assert_fail@plt+0x2bb4>
   11f98:	mov	r0, sl
   11f9c:	add	sp, sp, #268	; 0x10c
   11fa0:	vpop	{d8-d9}
   11fa4:	ldrd	r4, [sp]
   11fa8:	ldrd	r6, [sp, #8]
   11fac:	ldrd	r8, [sp, #16]
   11fb0:	ldrd	sl, [sp, #24]
   11fb4:	add	sp, sp, #32
   11fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   11fbc:	mov	r3, #1
   11fc0:	str	r3, [sp, #96]	; 0x60
   11fc4:	b	11b80 <__assert_fail@plt+0x1e0>
   11fc8:	mov	r3, #1
   11fcc:	str	r3, [sp, #88]	; 0x58
   11fd0:	b	11b80 <__assert_fail@plt+0x1e0>
   11fd4:	ldr	ip, [r5]
   11fd8:	mov	r3, #0
   11fdc:	mov	r2, #10
   11fe0:	add	r1, sp, #160	; 0xa0
   11fe4:	str	r3, [sp]
   11fe8:	ldr	r3, [pc, #1512]	; 125d8 <__assert_fail@plt+0xc38>
   11fec:	mov	r0, ip
   11ff0:	str	ip, [sp, #160]	; 0xa0
   11ff4:	bl	1dda0 <__assert_fail@plt+0xc400>
   11ff8:	cmp	r0, #0
   11ffc:	bne	127dc <__assert_fail@plt+0xe3c>
   12000:	mov	r3, #1
   12004:	str	r3, [sp, #60]	; 0x3c
   12008:	b	11b80 <__assert_fail@plt+0x1e0>
   1200c:	mov	r3, #1
   12010:	str	r3, [sp, #92]	; 0x5c
   12014:	b	11b80 <__assert_fail@plt+0x1e0>
   12018:	mov	r3, #1
   1201c:	str	r3, [r4, #16]
   12020:	b	11b80 <__assert_fail@plt+0x1e0>
   12024:	ldr	fp, [r5]
   12028:	cmp	fp, #0
   1202c:	bne	11b80 <__assert_fail@plt+0x1e0>
   12030:	movw	r1, #16040	; 0x3ea8
   12034:	movt	r1, #3
   12038:	ldr	r3, [pc, #1436]	; 125dc <__assert_fail@plt+0xc3c>
   1203c:	movw	r0, #17944	; 0x4618
   12040:	movt	r0, #3
   12044:	movw	r2, #1613	; 0x64d
   12048:	bl	119a0 <__assert_fail@plt>
   1204c:	mov	r3, #1
   12050:	str	r3, [sp, #108]	; 0x6c
   12054:	b	11b80 <__assert_fail@plt+0x1e0>
   12058:	mov	r3, #1
   1205c:	str	r3, [sp, #80]	; 0x50
   12060:	b	11b80 <__assert_fail@plt+0x1e0>
   12064:	movw	r3, #25004	; 0x61ac
   12068:	movt	r3, #4
   1206c:	mov	r2, #1
   12070:	str	r2, [r3, #4]
   12074:	b	11b80 <__assert_fail@plt+0x1e0>
   12078:	movw	r3, #25004	; 0x61ac
   1207c:	movt	r3, #4
   12080:	mov	r2, #0
   12084:	str	r2, [r3, #4]
   12088:	b	11b80 <__assert_fail@plt+0x1e0>
   1208c:	mov	r3, #2
   12090:	str	r3, [r4, #16]
   12094:	b	11b80 <__assert_fail@plt+0x1e0>
   12098:	mov	r2, #0
   1209c:	movw	r3, #25004	; 0x61ac
   120a0:	movt	r3, #4
   120a4:	strb	r2, [r4, #80]	; 0x50
   120a8:	str	r2, [r3]
   120ac:	b	11b80 <__assert_fail@plt+0x1e0>
   120b0:	mov	r3, #1
   120b4:	str	r3, [sp, #68]	; 0x44
   120b8:	b	11b80 <__assert_fail@plt+0x1e0>
   120bc:	mov	r3, #1
   120c0:	str	r3, [sp, #104]	; 0x68
   120c4:	b	11b80 <__assert_fail@plt+0x1e0>
   120c8:	mvn	r3, #0
   120cc:	str	r3, [sp, #84]	; 0x54
   120d0:	b	11a40 <__assert_fail@plt+0xa0>
   120d4:	ldr	r3, [sp, #52]	; 0x34
   120d8:	ldr	r8, [r3]
   120dc:	cmp	r8, #34	; 0x22
   120e0:	bne	11f50 <__assert_fail@plt+0x5b0>
   120e4:	mov	r2, #5
   120e8:	movw	r1, #18024	; 0x4668
   120ec:	movt	r1, #3
   120f0:	mov	r0, #0
   120f4:	bl	11628 <dcgettext@plt>
   120f8:	mov	r4, r0
   120fc:	mov	r2, r9
   12100:	mov	r1, #8
   12104:	mov	r0, #0
   12108:	bl	1b9e8 <__assert_fail@plt+0xa048>
   1210c:	mov	r3, r0
   12110:	mov	r2, r4
   12114:	mov	r1, r8
   12118:	mov	r0, #1
   1211c:	bl	116d0 <error@plt>
   12120:	add	r1, sp, #160	; 0xa0
   12124:	mov	r0, #1
   12128:	str	r6, [sp, #160]	; 0xa0
   1212c:	bl	11670 <setgroups@plt>
   12130:	cmp	r0, #0
   12134:	beq	11a60 <__assert_fail@plt+0xc0>
   12138:	mov	r0, r5
   1213c:	movw	r1, #17704	; 0x4528
   12140:	movt	r1, #3
   12144:	mov	r2, #5
   12148:	bl	11628 <dcgettext@plt>
   1214c:	mov	r5, r0
   12150:	b	12308 <__assert_fail@plt+0x968>
   12154:	movw	r0, #17840	; 0x45b0
   12158:	movt	r0, #3
   1215c:	b	11aac <__assert_fail@plt+0x10c>
   12160:	cmp	fp, #0
   12164:	mov	r3, r0
   12168:	beq	12184 <__assert_fail@plt+0x7e4>
   1216c:	ldr	r2, [sp, #84]	; 0x54
   12170:	cmn	r2, #1
   12174:	beq	12184 <__assert_fail@plt+0x7e4>
   12178:	mov	r0, r2
   1217c:	str	r3, [sp, #84]	; 0x54
   12180:	bl	1197c <close@plt>
   12184:	ldr	r3, [sp, #80]	; 0x50
   12188:	ldr	r2, [sp, #108]	; 0x6c
   1218c:	orrs	r5, r2, r3
   12190:	beq	12338 <__assert_fail@plt+0x998>
   12194:	cmp	r3, #0
   12198:	beq	121bc <__assert_fail@plt+0x81c>
   1219c:	movw	r3, #25104	; 0x6210
   121a0:	movt	r3, #4
   121a4:	ldr	r1, [sp, #56]	; 0x38
   121a8:	ldr	r3, [r3]
   121ac:	ldr	r2, [sp, #60]	; 0x3c
   121b0:	cmp	r1, r3
   121b4:	moveq	r2, #0
   121b8:	str	r2, [sp, #60]	; 0x3c
   121bc:	mov	r0, #1
   121c0:	bl	11934 <isatty@plt>
   121c4:	sub	r0, r0, #1
   121c8:	cmp	fp, #0
   121cc:	clz	r0, r0
   121d0:	lsr	r0, r0, #5
   121d4:	strb	r0, [r4, #8]
   121d8:	beq	121fc <__assert_fail@plt+0x85c>
   121dc:	add	r0, sp, #144	; 0x90
   121e0:	movw	r1, #18104	; 0x46b8
   121e4:	movt	r1, #3
   121e8:	add	r3, sp, #140	; 0x8c
   121ec:	mov	r2, #1
   121f0:	str	r0, [sp]
   121f4:	mov	r0, fp
   121f8:	bl	14bf8 <__assert_fail@plt+0x3258>
   121fc:	vldr	d9, [pc, #972]	; 125d0 <__assert_fail@plt+0xc30>
   12200:	mov	r6, #0
   12204:	movw	r3, #17672	; 0x4508
   12208:	movt	r3, #3
   1220c:	mov	r8, #0
   12210:	str	sl, [sp, #112]	; 0x70
   12214:	mov	r9, #0
   12218:	str	r3, [sp, #116]	; 0x74
   1221c:	str	r6, [sp, #120]	; 0x78
   12220:	ldr	r3, [sp, #60]	; 0x3c
   12224:	cmp	r3, #0
   12228:	beq	12240 <__assert_fail@plt+0x8a0>
   1222c:	ldrd	r0, [r4, #88]	; 0x58
   12230:	ldrd	r2, [r4, #96]	; 0x60
   12234:	cmp	r1, r3
   12238:	cmpeq	r0, r2
   1223c:	bls	124b8 <__assert_fail@plt+0xb18>
   12240:	cmp	fp, #0
   12244:	strd	r8, [r4, #32]
   12248:	strd	r8, [r4, #40]	; 0x28
   1224c:	strd	r8, [r4, #48]	; 0x30
   12250:	strd	r8, [r4, #56]	; 0x38
   12254:	strd	r8, [r4, #64]	; 0x40
   12258:	strd	r8, [r4, #72]	; 0x48
   1225c:	beq	1235c <__assert_fail@plt+0x9bc>
   12260:	ldr	r1, [sp, #144]	; 0x90
   12264:	cmp	r1, #1
   12268:	beq	125e8 <__assert_fail@plt+0xc48>
   1226c:	cmp	r1, #0
   12270:	ldrne	r0, [sp, #140]	; 0x8c
   12274:	bne	125b8 <__assert_fail@plt+0xc18>
   12278:	str	r1, [sp, #64]	; 0x40
   1227c:	ldr	r5, [sp, #116]	; 0x74
   12280:	mov	r1, #131072	; 0x20000
   12284:	mov	r0, r5
   12288:	bl	14efc <__assert_fail@plt+0x355c>
   1228c:	subs	r6, r0, #0
   12290:	bge	12594 <__assert_fail@plt+0xbf4>
   12294:	ldr	sl, [sp, #112]	; 0x70
   12298:	mov	r2, r5
   1229c:	mov	r1, #8
   122a0:	ldr	r3, [sp, #52]	; 0x34
   122a4:	mov	r0, #0
   122a8:	ldr	r4, [r3]
   122ac:	bl	1b9e8 <__assert_fail@plt+0xa048>
   122b0:	mov	r3, r0
   122b4:	movw	r2, #19400	; 0x4bc8
   122b8:	movt	r2, #3
   122bc:	mov	r0, #0
   122c0:	mov	r1, r4
   122c4:	bl	116d0 <error@plt>
   122c8:	b	11f98 <__assert_fail@plt+0x5f8>
   122cc:	str	r4, [r0]
   122d0:	bl	11580 <getuid@plt>
   122d4:	bl	118c8 <setuid@plt>
   122d8:	cmp	r0, #0
   122dc:	bne	12830 <__assert_fail@plt+0xe90>
   122e0:	bl	118c8 <setuid@plt>
   122e4:	subs	r4, r0, #0
   122e8:	bne	11a80 <__assert_fail@plt+0xe0>
   122ec:	movw	r1, #17772	; 0x456c
   122f0:	movt	r1, #3
   122f4:	mov	r2, #5
   122f8:	bl	11628 <dcgettext@plt>
   122fc:	ldr	r3, [sp, #52]	; 0x34
   12300:	mov	r5, r0
   12304:	str	r4, [r3]
   12308:	bl	117d8 <__errno_location@plt>
   1230c:	ldr	r4, [r0]
   12310:	mov	r2, r5
   12314:	mov	r1, #8
   12318:	mov	r0, #0
   1231c:	bl	1b9e8 <__assert_fail@plt+0xa048>
   12320:	mov	r3, r0
   12324:	movw	r2, #19400	; 0x4bc8
   12328:	movt	r2, #3
   1232c:	mov	r0, #1
   12330:	mov	r1, r4
   12334:	bl	116d0 <error@plt>
   12338:	movw	r3, #25104	; 0x6210
   1233c:	movt	r3, #4
   12340:	ldr	r2, [sp, #56]	; 0x38
   12344:	ldr	r3, [r3]
   12348:	cmp	r2, r3
   1234c:	beq	126f8 <__assert_fail@plt+0xd58>
   12350:	mov	r3, #1
   12354:	str	r3, [sp, #88]	; 0x58
   12358:	b	121bc <__assert_fail@plt+0x81c>
   1235c:	ldr	r3, [sp, #84]	; 0x54
   12360:	cmn	r3, #1
   12364:	beq	124b8 <__assert_fail@plt+0xb18>
   12368:	ldr	r5, [r4, #108]	; 0x6c
   1236c:	mov	r6, r3
   12370:	mvn	r3, #0
   12374:	str	fp, [sp, #64]	; 0x40
   12378:	str	r3, [sp, #84]	; 0x54
   1237c:	add	r2, sp, #160	; 0xa0
   12380:	mov	r1, r6
   12384:	mov	r0, #3
   12388:	bl	1167c <__fxstat64@plt>
   1238c:	subs	r7, r0, #0
   12390:	beq	124f4 <__assert_fail@plt+0xb54>
   12394:	ldr	r3, [sp, #52]	; 0x34
   12398:	mov	r2, r5
   1239c:	mov	r1, #8
   123a0:	mov	r0, #0
   123a4:	ldr	r7, [r3]
   123a8:	bl	1b9e8 <__assert_fail@plt+0xa048>
   123ac:	mov	r3, r0
   123b0:	movw	r2, #19400	; 0x4bc8
   123b4:	movt	r2, #3
   123b8:	mov	r0, #0
   123bc:	mov	r1, r7
   123c0:	bl	116d0 <error@plt>
   123c4:	mov	r0, r6
   123c8:	movw	r1, #18636	; 0x48cc
   123cc:	movt	r1, #3
   123d0:	bl	114fc <fdopen@plt>
   123d4:	subs	r7, r0, #0
   123d8:	beq	12294 <__assert_fail@plt+0x8f4>
   123dc:	movw	r3, #25104	; 0x6210
   123e0:	movt	r3, #4
   123e4:	mov	r2, #0
   123e8:	ldr	r1, [r3]
   123ec:	mov	r3, #0
   123f0:	mov	ip, #0
   123f4:	strd	r2, [sp, #72]	; 0x48
   123f8:	ldr	r3, [sp, #56]	; 0x38
   123fc:	sub	r0, r3, r1
   12400:	ldr	r3, [sp, #48]	; 0x30
   12404:	add	r1, r3, r1, lsl #2
   12408:	str	ip, [sp, #8]
   1240c:	ldrd	r2, [sp, #72]	; 0x48
   12410:	ldr	ip, [sp, #92]	; 0x5c
   12414:	strd	r2, [sp]
   12418:	mov	r3, r7
   1241c:	mov	r2, r5
   12420:	str	ip, [sp, #12]
   12424:	ldr	ip, [sp, #88]	; 0x58
   12428:	str	ip, [sp, #16]
   1242c:	ldr	ip, [sp, #68]	; 0x44
   12430:	str	ip, [sp, #20]
   12434:	ldr	ip, [sp, #60]	; 0x3c
   12438:	str	ip, [sp, #24]
   1243c:	ldr	ip, [sp, #80]	; 0x50
   12440:	str	ip, [sp, #28]
   12444:	ldr	ip, [sp, #104]	; 0x68
   12448:	str	ip, [sp, #32]
   1244c:	ldr	ip, [sp, #96]	; 0x60
   12450:	str	ip, [sp, #36]	; 0x24
   12454:	ldr	ip, [sp, #100]	; 0x64
   12458:	str	ip, [sp, #40]	; 0x28
   1245c:	bl	13594 <__assert_fail@plt+0x1bf4>
   12460:	mov	r6, r0
   12464:	mov	r0, r7
   12468:	bl	11868 <fclose@plt>
   1246c:	cmn	r0, #1
   12470:	beq	12294 <__assert_fail@plt+0x8f4>
   12474:	ldr	r3, [sp, #64]	; 0x40
   12478:	cmp	r3, #0
   1247c:	beq	12488 <__assert_fail@plt+0xae8>
   12480:	mov	r0, r3
   12484:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   12488:	cmp	fp, #0
   1248c:	beq	124b8 <__assert_fail@plt+0xb18>
   12490:	add	r0, sp, #144	; 0x90
   12494:	movw	r1, #18104	; 0x46b8
   12498:	movt	r1, #3
   1249c:	add	r3, sp, #140	; 0x8c
   124a0:	mov	r2, #0
   124a4:	str	r0, [sp]
   124a8:	mov	r0, fp
   124ac:	bl	14bf8 <__assert_fail@plt+0x3258>
   124b0:	cmp	r0, #0
   124b4:	bne	12220 <__assert_fail@plt+0x880>
   124b8:	ldr	r3, [sp, #108]	; 0x6c
   124bc:	ldr	sl, [sp, #112]	; 0x70
   124c0:	cmp	r3, #0
   124c4:	bne	12724 <__assert_fail@plt+0xd84>
   124c8:	cmp	r6, #0
   124cc:	bne	11f98 <__assert_fail@plt+0x5f8>
   124d0:	ldr	r3, [sp, #60]	; 0x3c
   124d4:	cmp	r3, #0
   124d8:	beq	124e8 <__assert_fail@plt+0xb48>
   124dc:	ldrd	r2, [r4, #88]	; 0x58
   124e0:	orrs	r3, r2, r3
   124e4:	beq	11f98 <__assert_fail@plt+0x5f8>
   124e8:	ldr	r3, [sp, #80]	; 0x50
   124ec:	eor	sl, r3, #1
   124f0:	b	11f98 <__assert_fail@plt+0x5f8>
   124f4:	ldrd	r2, [sp, #208]	; 0xd0
   124f8:	add	r0, sp, #148	; 0x94
   124fc:	ldr	ip, [sp, #240]	; 0xf0
   12500:	ldr	r1, [sp, #244]	; 0xf4
   12504:	strd	r2, [sp, #72]	; 0x48
   12508:	str	ip, [sp, #152]	; 0x98
   1250c:	str	r1, [sp, #156]	; 0x9c
   12510:	bl	11610 <time@plt>
   12514:	cmn	r0, #1
   12518:	beq	1269c <__assert_fail@plt+0xcfc>
   1251c:	movw	sl, #25004	; 0x61ac
   12520:	movt	sl, #4
   12524:	ldr	r0, [sp, #148]	; 0x94
   12528:	ldr	r1, [sp, #240]	; 0xf0
   1252c:	bl	11850 <difftime@plt>
   12530:	ldr	r2, [sl, #8]
   12534:	movw	r3, #20864	; 0x5180
   12538:	movt	r3, #1
   1253c:	vmov.f64	d8, d0
   12540:	mul	r3, r3, r2
   12544:	vmov	s15, r3
   12548:	vcvt.f64.u32	d7, s15
   1254c:	vcmpe.f64	d0, d7
   12550:	vmrs	APSR_nzcv, fpscr
   12554:	bgt	12610 <__assert_fail@plt+0xc70>
   12558:	mov	r0, r6
   1255c:	movw	r1, #18636	; 0x48cc
   12560:	movt	r1, #3
   12564:	bl	114fc <fdopen@plt>
   12568:	subs	r7, r0, #0
   1256c:	beq	12294 <__assert_fail@plt+0x8f4>
   12570:	movw	r3, #25104	; 0x6210
   12574:	movt	r3, #4
   12578:	ldr	r1, [r3]
   1257c:	add	ip, sp, #152	; 0x98
   12580:	ldr	r3, [sp, #56]	; 0x38
   12584:	sub	r0, r3, r1
   12588:	ldr	r3, [sp, #48]	; 0x30
   1258c:	add	r1, r3, r1, lsl #2
   12590:	b	12408 <__assert_fail@plt+0xa68>
   12594:	mov	r2, #1
   12598:	mov	r1, #2
   1259c:	bl	1ed4c <__assert_fail@plt+0xd3ac>
   125a0:	cmp	r0, #0
   125a4:	beq	1237c <__assert_fail@plt+0x9dc>
   125a8:	mov	r0, r6
   125ac:	ldr	sl, [sp, #112]	; 0x70
   125b0:	bl	1197c <close@plt>
   125b4:	b	12298 <__assert_fail@plt+0x8f8>
   125b8:	add	r0, fp, r0
   125bc:	bl	115bc <strndup@plt>
   125c0:	mov	r5, r0
   125c4:	str	r0, [sp, #64]	; 0x40
   125c8:	b	12280 <__assert_fail@plt+0x8e0>
   125cc:	nop	{0}
   125d0:	andeq	r0, r0, r0
   125d4:	rscsmi	r1, r5, r0, lsl #16
   125d8:	andeq	r6, r4, r0, lsl #5
   125dc:	andeq	r3, r3, ip, asr #25
   125e0:	ldrdeq	r3, [r3], -r8
   125e4:	andeq	r3, r3, ip, asr fp
   125e8:	ldr	r0, [sp, #140]	; 0x8c
   125ec:	ldrb	r3, [fp, r0]
   125f0:	cmp	r3, #45	; 0x2d
   125f4:	beq	126cc <__assert_fail@plt+0xd2c>
   125f8:	cmp	r3, #46	; 0x2e
   125fc:	bne	125b8 <__assert_fail@plt+0xc18>
   12600:	mov	r3, #0
   12604:	ldr	r5, [sp, #116]	; 0x74
   12608:	str	r3, [sp, #64]	; 0x40
   1260c:	b	12280 <__assert_fail@plt+0x8e0>
   12610:	mov	r2, #5
   12614:	mov	r0, r7
   12618:	movw	r1, #18196	; 0x4714
   1261c:	movt	r1, #3
   12620:	bl	11628 <dcgettext@plt>
   12624:	mov	r2, r5
   12628:	mov	r1, #8
   1262c:	str	r0, [sp, #124]	; 0x7c
   12630:	mov	r0, r7
   12634:	bl	1b9e8 <__assert_fail@plt+0xa048>
   12638:	mov	r3, r0
   1263c:	mov	r2, #5
   12640:	ldr	r1, [pc, #-104]	; 125e0 <__assert_fail@plt+0xc40>
   12644:	mov	r0, r7
   12648:	str	r3, [sp, #132]	; 0x84
   1264c:	ldr	r3, [sl, #8]
   12650:	str	r3, [sp, #128]	; 0x80
   12654:	bl	11628 <dcgettext@plt>
   12658:	mov	sl, r0
   1265c:	mov	r2, #5
   12660:	ldr	r1, [pc, #-136]	; 125e0 <__assert_fail@plt+0xc40>
   12664:	mov	r0, r7
   12668:	bl	11628 <dcgettext@plt>
   1266c:	vdiv.f64	d7, d8, d9
   12670:	mov	r1, r7
   12674:	str	sl, [sp, #4]
   12678:	ldr	ip, [sp, #128]	; 0x80
   1267c:	ldr	r2, [sp, #124]	; 0x7c
   12680:	ldr	r3, [sp, #132]	; 0x84
   12684:	str	ip, [sp]
   12688:	vstr	d7, [sp, #8]
   1268c:	str	r0, [sp, #16]
   12690:	mov	r0, r7
   12694:	bl	116d0 <error@plt>
   12698:	b	12558 <__assert_fail@plt+0xbb8>
   1269c:	ldr	r3, [sp, #52]	; 0x34
   126a0:	mov	r2, #5
   126a4:	mov	r0, r7
   126a8:	movw	r1, #18172	; 0x46fc
   126ac:	movt	r1, #3
   126b0:	ldr	sl, [r3]
   126b4:	bl	11628 <dcgettext@plt>
   126b8:	mov	r2, r0
   126bc:	mov	r0, r7
   126c0:	mov	r1, sl
   126c4:	bl	116d0 <error@plt>
   126c8:	b	12558 <__assert_fail@plt+0xbb8>
   126cc:	ldr	r3, [sp, #120]	; 0x78
   126d0:	cmp	r3, #0
   126d4:	bne	12744 <__assert_fail@plt+0xda4>
   126d8:	ldr	r6, [sp, #120]	; 0x78
   126dc:	movw	r5, #17696	; 0x4520
   126e0:	movt	r5, #3
   126e4:	str	r6, [sp, #64]	; 0x40
   126e8:	str	r1, [sp, #120]	; 0x78
   126ec:	b	1237c <__assert_fail@plt+0x9dc>
   126f0:	mov	r0, #0
   126f4:	bl	12a1c <__assert_fail@plt+0x107c>
   126f8:	mov	r2, #5
   126fc:	movw	r1, #18076	; 0x469c
   12700:	movt	r1, #3
   12704:	mov	r0, r5
   12708:	bl	11628 <dcgettext@plt>
   1270c:	mov	r2, r0
   12710:	mov	r1, r5
   12714:	mov	r0, r5
   12718:	bl	116d0 <error@plt>
   1271c:	mov	r0, #1
   12720:	bl	12a1c <__assert_fail@plt+0x107c>
   12724:	movw	r0, #18264	; 0x4758
   12728:	movt	r0, #3
   1272c:	mov	r1, r6
   12730:	bl	11550 <printf@plt>
   12734:	b	124c8 <__assert_fail@plt+0xb28>
   12738:	mov	r0, r6
   1273c:	bl	1197c <close@plt>
   12740:	b	119fc <__assert_fail@plt+0x5c>
   12744:	mov	r2, #5
   12748:	movw	r1, #18108	; 0x46bc
   1274c:	movt	r1, #3
   12750:	mov	r0, #0
   12754:	ldr	sl, [sp, #112]	; 0x70
   12758:	bl	11628 <dcgettext@plt>
   1275c:	mov	r1, #0
   12760:	mov	r2, r0
   12764:	mov	r0, r1
   12768:	bl	116d0 <error@plt>
   1276c:	b	11f98 <__assert_fail@plt+0x5f8>
   12770:	ldr	r3, [sp, #52]	; 0x34
   12774:	mov	r2, #5
   12778:	movw	r1, #17872	; 0x45d0
   1277c:	movt	r1, #3
   12780:	mov	r0, #0
   12784:	ldr	r4, [r3]
   12788:	bl	11628 <dcgettext@plt>
   1278c:	mov	r2, r0
   12790:	mov	r0, #1
   12794:	mov	r1, r4
   12798:	bl	116d0 <error@plt>
   1279c:	mov	r0, r4
   127a0:	movw	r1, #17804	; 0x458c
   127a4:	movt	r1, #3
   127a8:	mov	r2, #5
   127ac:	bl	11628 <dcgettext@plt>
   127b0:	mov	r5, r0
   127b4:	b	12308 <__assert_fail@plt+0x968>
   127b8:	mov	r2, #5
   127bc:	movw	r1, #17960	; 0x4628
   127c0:	movt	r1, #3
   127c4:	mov	r0, r8
   127c8:	bl	11628 <dcgettext@plt>
   127cc:	mov	r2, r0
   127d0:	mov	r1, r8
   127d4:	mov	r0, #1
   127d8:	bl	116d0 <error@plt>
   127dc:	ldr	ip, [r5]
   127e0:	mov	r2, #108	; 0x6c
   127e4:	ldr	r3, [pc, #-520]	; 125e4 <__assert_fail@plt+0xc44>
   127e8:	ldr	r1, [sp, #152]	; 0x98
   127ec:	str	ip, [sp]
   127f0:	bl	1dd10 <__assert_fail@plt+0xc370>
   127f4:	mov	r2, #5
   127f8:	movw	r1, #18024	; 0x4668
   127fc:	movt	r1, #3
   12800:	mov	r0, #0
   12804:	bl	11628 <dcgettext@plt>
   12808:	mov	r4, r0
   1280c:	mov	r2, r9
   12810:	mov	r1, #8
   12814:	mov	r0, #0
   12818:	bl	1b9e8 <__assert_fail@plt+0xa048>
   1281c:	mov	r3, r0
   12820:	mov	r2, r4
   12824:	mov	r1, #0
   12828:	mov	r0, #1
   1282c:	bl	116d0 <error@plt>
   12830:	mov	r0, r4
   12834:	movw	r1, #17736	; 0x4548
   12838:	movt	r1, #3
   1283c:	mov	r2, #5
   12840:	bl	11628 <dcgettext@plt>
   12844:	mov	r5, r0
   12848:	b	12308 <__assert_fail@plt+0x968>
   1284c:	mov	fp, #0
   12850:	mov	lr, #0
   12854:	pop	{r1}		; (ldr r1, [sp], #4)
   12858:	mov	r2, sp
   1285c:	push	{r2}		; (str r2, [sp, #-4]!)
   12860:	push	{r0}		; (str r0, [sp, #-4]!)
   12864:	ldr	ip, [pc, #16]	; 1287c <__assert_fail@plt+0xedc>
   12868:	push	{ip}		; (str ip, [sp, #-4]!)
   1286c:	ldr	r0, [pc, #12]	; 12880 <__assert_fail@plt+0xee0>
   12870:	ldr	r3, [pc, #12]	; 12884 <__assert_fail@plt+0xee4>
   12874:	bl	11718 <__libc_start_main@plt>
   12878:	bl	11964 <abort@plt>
   1287c:	andeq	r3, r3, r8, ror #20
   12880:			; <UNDEFINED> instruction: 0x000119b0
   12884:	andeq	r3, r3, r8, lsl #20
   12888:	ldr	r3, [pc, #20]	; 128a4 <__assert_fail@plt+0xf04>
   1288c:	ldr	r2, [pc, #20]	; 128a8 <__assert_fail@plt+0xf08>
   12890:	add	r3, pc, r3
   12894:	ldr	r2, [r3, r2]
   12898:	cmp	r2, #0
   1289c:	bxeq	lr
   128a0:	b	11760 <__gmon_start__@plt>
   128a4:	andeq	r3, r3, r8, ror #14
   128a8:	andeq	r0, r0, r0, lsr #3
   128ac:	ldr	r0, [pc, #24]	; 128cc <__assert_fail@plt+0xf2c>
   128b0:	ldr	r3, [pc, #24]	; 128d0 <__assert_fail@plt+0xf30>
   128b4:	cmp	r3, r0
   128b8:	bxeq	lr
   128bc:	ldr	r3, [pc, #16]	; 128d4 <__assert_fail@plt+0xf34>
   128c0:	cmp	r3, #0
   128c4:	bxeq	lr
   128c8:	bx	r3
   128cc:	andeq	r6, r4, r4, lsl #4
   128d0:	andeq	r6, r4, r4, lsl #4
   128d4:	andeq	r0, r0, r0
   128d8:	ldr	r0, [pc, #36]	; 12904 <__assert_fail@plt+0xf64>
   128dc:	ldr	r1, [pc, #36]	; 12908 <__assert_fail@plt+0xf68>
   128e0:	sub	r1, r1, r0
   128e4:	asr	r1, r1, #2
   128e8:	add	r1, r1, r1, lsr #31
   128ec:	asrs	r1, r1, #1
   128f0:	bxeq	lr
   128f4:	ldr	r3, [pc, #16]	; 1290c <__assert_fail@plt+0xf6c>
   128f8:	cmp	r3, #0
   128fc:	bxeq	lr
   12900:	bx	r3
   12904:	andeq	r6, r4, r4, lsl #4
   12908:	andeq	r6, r4, r4, lsl #4
   1290c:	andeq	r0, r0, r0
   12910:	push	{r4, lr}
   12914:	ldr	r4, [pc, #24]	; 12934 <__assert_fail@plt+0xf94>
   12918:	ldrb	r3, [r4]
   1291c:	cmp	r3, #0
   12920:	popne	{r4, pc}
   12924:	bl	128ac <__assert_fail@plt+0xf0c>
   12928:	mov	r3, #1
   1292c:	strb	r3, [r4]
   12930:	pop	{r4, pc}
   12934:	andeq	r6, r4, r4, lsr #4
   12938:	b	128d8 <__assert_fail@plt+0xf38>
   1293c:	andeq	r0, r0, r0
   12940:	movw	r3, #25128	; 0x6228
   12944:	movt	r3, #4
   12948:	strd	r4, [sp, #-16]!
   1294c:	ldr	r4, [r3]
   12950:	str	r6, [sp, #8]
   12954:	str	lr, [sp, #12]
   12958:	cmp	r4, #0
   1295c:	beq	129a0 <__assert_fail@plt+0x1000>
   12960:	mov	r5, r0
   12964:	mov	r0, r5
   12968:	ldr	r3, [r4]
   1296c:	ldr	r1, [r4, #4]
   12970:	blx	r3
   12974:	ldr	r4, [r4, #8]
   12978:	adds	r2, r4, #0
   1297c:	movne	r2, #1
   12980:	ands	r3, r0, #3
   12984:	movne	r3, r2
   12988:	cmp	r3, #0
   1298c:	bne	12964 <__assert_fail@plt+0xfc4>
   12990:	ldrd	r4, [sp]
   12994:	ldr	r6, [sp, #8]
   12998:	add	sp, sp, #12
   1299c:	pop	{pc}		; (ldr pc, [sp], #4)
   129a0:	ldrd	r4, [sp]
   129a4:	mov	r0, #3
   129a8:	ldr	r6, [sp, #8]
   129ac:	add	sp, sp, #12
   129b0:	pop	{pc}		; (ldr pc, [sp], #4)
   129b4:	ldr	r0, [r1, #8]
   129b8:	strd	r4, [sp, #-8]!
   129bc:	ldrd	r4, [r1]
   129c0:	ldr	ip, [r1, #12]
   129c4:	adds	r2, r0, #1
   129c8:	adc	r3, ip, #0
   129cc:	cmp	r3, r5
   129d0:	cmpeq	r2, r4
   129d4:	strd	r2, [r1, #8]
   129d8:	movcs	r0, #8
   129dc:	movcc	r0, #1
   129e0:	ldrd	r4, [sp]
   129e4:	add	sp, sp, #8
   129e8:	bx	lr
   129ec:	ldr	r3, [r1, #8]
   129f0:	mov	r0, #1
   129f4:	ldr	r2, [r1, #12]
   129f8:	adds	r3, r3, r0
   129fc:	adc	r2, r2, #0
   12a00:	str	r3, [r1, #8]
   12a04:	str	r2, [r1, #12]
   12a08:	bx	lr
   12a0c:	movw	r3, #25128	; 0x6228
   12a10:	movt	r3, #4
   12a14:	ldr	r0, [r3, #4]
   12a18:	b	1ef94 <__assert_fail@plt+0xd5f4>
   12a1c:	subs	r6, r0, #0
   12a20:	str	r7, [sp, #-8]!
   12a24:	str	lr, [sp, #4]
   12a28:	beq	12a6c <__assert_fail@plt+0x10cc>
   12a2c:	movw	r3, #25112	; 0x6218
   12a30:	movt	r3, #4
   12a34:	ldr	r4, [r3]
   12a38:	mov	r2, #5
   12a3c:	movw	r1, #15584	; 0x3ce0
   12a40:	movt	r1, #3
   12a44:	mov	r0, #0
   12a48:	bl	11628 <dcgettext@plt>
   12a4c:	movw	r3, #25248	; 0x62a0
   12a50:	movt	r3, #4
   12a54:	mov	r1, r0
   12a58:	ldr	r2, [r3]
   12a5c:	mov	r0, r4
   12a60:	bl	117c0 <fprintf@plt>
   12a64:	mov	r0, #1
   12a68:	bl	11784 <exit@plt>
   12a6c:	movw	r4, #25116	; 0x621c
   12a70:	movt	r4, #4
   12a74:	ldr	r7, [r4]
   12a78:	mov	r2, #5
   12a7c:	movw	r1, #15624	; 0x3d08
   12a80:	movt	r1, #3
   12a84:	movw	r5, #25248	; 0x62a0
   12a88:	movt	r5, #4
   12a8c:	bl	11628 <dcgettext@plt>
   12a90:	mov	r1, r0
   12a94:	ldr	r2, [r5]
   12a98:	mov	r0, r7
   12a9c:	bl	117c0 <fprintf@plt>
   12aa0:	ldr	r0, [r4]
   12aa4:	ldr	r1, [r5]
   12aa8:	bl	14ca8 <__assert_fail@plt+0x3308>
   12aac:	mov	r0, r6
   12ab0:	bl	11784 <exit@plt>
   12ab4:	str	r4, [sp, #-8]!
   12ab8:	movw	r4, #25116	; 0x621c
   12abc:	movt	r4, #4
   12ac0:	ldr	r1, [r4]
   12ac4:	ldr	r0, [r0, #12]
   12ac8:	str	lr, [sp, #4]
   12acc:	bl	1194c <fputs@plt>
   12ad0:	movw	r3, #25004	; 0x61ac
   12ad4:	movt	r3, #4
   12ad8:	ldr	r1, [r4]
   12adc:	ldr	r0, [r3]
   12ae0:	bl	118f8 <putc@plt>
   12ae4:	ldr	r4, [sp]
   12ae8:	add	sp, sp, #4
   12aec:	mov	r0, #1
   12af0:	pop	{pc}		; (ldr pc, [sp], #4)
   12af4:	ldr	r0, [r0, #12]
   12af8:	movw	r1, #25128	; 0x6228
   12afc:	movt	r1, #4
   12b00:	str	r4, [sp, #-8]!
   12b04:	movw	r4, #25116	; 0x621c
   12b08:	movt	r4, #4
   12b0c:	ldrb	r2, [r1, #8]
   12b10:	movw	r3, #19400	; 0x4bc8
   12b14:	movt	r3, #3
   12b18:	ldr	r1, [r1, #4]
   12b1c:	str	lr, [sp, #4]
   12b20:	sub	sp, sp, #8
   12b24:	str	r0, [sp]
   12b28:	ldr	r0, [r4]
   12b2c:	bl	1461c <__assert_fail@plt+0x2c7c>
   12b30:	ldr	r1, [r4]
   12b34:	movw	r3, #25004	; 0x61ac
   12b38:	movt	r3, #4
   12b3c:	ldr	r0, [r3]
   12b40:	bl	118f8 <putc@plt>
   12b44:	mov	r0, #1
   12b48:	add	sp, sp, #8
   12b4c:	ldr	r4, [sp]
   12b50:	add	sp, sp, #4
   12b54:	pop	{pc}		; (ldr pc, [sp], #4)
   12b58:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12b5c:	ldr	r5, [r0, #12]
   12b60:	strd	r6, [sp, #8]
   12b64:	mov	r7, r1
   12b68:	strd	r8, [sp, #16]
   12b6c:	str	sl, [sp, #24]
   12b70:	str	lr, [sp, #28]
   12b74:	mov	r0, r5
   12b78:	bl	117a8 <strlen@plt>
   12b7c:	ldr	r1, [r7, #8]
   12b80:	ldr	ip, [r7, #12]
   12b84:	ldrd	r2, [r7, #16]
   12b88:	adds	r1, r1, #1
   12b8c:	adc	ip, ip, #0
   12b90:	str	r1, [r7, #8]
   12b94:	adds	r8, r2, r0
   12b98:	str	ip, [r7, #12]
   12b9c:	adc	r9, r3, #0
   12ba0:	mov	r0, r8
   12ba4:	mov	r1, r9
   12ba8:	strd	r0, [r7, #16]
   12bac:	ldrb	r4, [r5]
   12bb0:	cmp	r4, #0
   12bb4:	beq	12c74 <__assert_fail@plt+0x12d4>
   12bb8:	mov	r8, #0
   12bbc:	mov	r6, r8
   12bc0:	mov	r9, r8
   12bc4:	b	12be4 <__assert_fail@plt+0x1244>
   12bc8:	cmp	r4, #10
   12bcc:	moveq	r8, #1
   12bd0:	moveq	r6, r8
   12bd4:	bne	12bf0 <__assert_fail@plt+0x1250>
   12bd8:	ldrb	r4, [r5, #1]!
   12bdc:	cmp	r4, #0
   12be0:	beq	12c14 <__assert_fail@plt+0x1274>
   12be4:	tst	r4, #128	; 0x80
   12be8:	beq	12bc8 <__assert_fail@plt+0x1228>
   12bec:	mov	r9, #1
   12bf0:	bl	11778 <__ctype_b_loc@plt>
   12bf4:	ldr	r3, [r0]
   12bf8:	lsl	r4, r4, #1
   12bfc:	ldrh	r3, [r3, r4]
   12c00:	ldrb	r4, [r5, #1]!
   12c04:	tst	r3, #8192	; 0x2000
   12c08:	movne	r6, #1
   12c0c:	cmp	r4, #0
   12c10:	bne	12be4 <__assert_fail@plt+0x1244>
   12c14:	cmp	r9, #0
   12c18:	beq	12c34 <__assert_fail@plt+0x1294>
   12c1c:	ldr	r3, [r7, #40]	; 0x28
   12c20:	ldr	r2, [r7, #44]	; 0x2c
   12c24:	adds	r3, r3, #1
   12c28:	adc	r2, r2, #0
   12c2c:	str	r3, [r7, #40]	; 0x28
   12c30:	str	r2, [r7, #44]	; 0x2c
   12c34:	cmp	r6, #0
   12c38:	beq	12c54 <__assert_fail@plt+0x12b4>
   12c3c:	ldr	r3, [r7, #24]
   12c40:	ldr	r2, [r7, #28]
   12c44:	adds	r3, r3, #1
   12c48:	adc	r2, r2, #0
   12c4c:	str	r3, [r7, #24]
   12c50:	str	r2, [r7, #28]
   12c54:	cmp	r8, #0
   12c58:	beq	12c74 <__assert_fail@plt+0x12d4>
   12c5c:	ldr	r3, [r7, #32]
   12c60:	ldr	r2, [r7, #36]	; 0x24
   12c64:	adds	r3, r3, #1
   12c68:	adc	r2, r2, #0
   12c6c:	str	r3, [r7, #32]
   12c70:	str	r2, [r7, #36]	; 0x24
   12c74:	ldrd	r4, [sp]
   12c78:	mov	r0, #1
   12c7c:	ldrd	r6, [sp, #8]
   12c80:	ldrd	r8, [sp, #16]
   12c84:	ldr	sl, [sp, #24]
   12c88:	add	sp, sp, #28
   12c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c90:	push	{lr}		; (str lr, [sp, #-4]!)
   12c94:	sub	sp, sp, #108	; 0x6c
   12c98:	mov	r2, sp
   12c9c:	ldr	r1, [r0, #12]
   12ca0:	mov	r0, #3
   12ca4:	bl	11988 <__lxstat64@plt>
   12ca8:	cmp	r0, #0
   12cac:	movne	r0, #4
   12cb0:	moveq	r0, #1
   12cb4:	add	sp, sp, #108	; 0x6c
   12cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   12cc0:	sub	sp, sp, #108	; 0x6c
   12cc4:	mov	r2, sp
   12cc8:	ldr	r1, [r0, #12]
   12ccc:	mov	r0, #3
   12cd0:	bl	11988 <__lxstat64@plt>
   12cd4:	cmp	r0, #0
   12cd8:	moveq	r0, #4
   12cdc:	movne	r0, #1
   12ce0:	add	sp, sp, #108	; 0x6c
   12ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ce8:	push	{lr}		; (str lr, [sp, #-4]!)
   12cec:	sub	sp, sp, #108	; 0x6c
   12cf0:	mov	r2, sp
   12cf4:	ldr	r1, [r0, #12]
   12cf8:	mov	r0, #3
   12cfc:	bl	11928 <__xstat64@plt>
   12d00:	cmp	r0, #0
   12d04:	movne	r0, #4
   12d08:	moveq	r0, #1
   12d0c:	add	sp, sp, #108	; 0x6c
   12d10:	pop	{pc}		; (ldr pc, [sp], #4)
   12d14:	push	{lr}		; (str lr, [sp, #-4]!)
   12d18:	sub	sp, sp, #108	; 0x6c
   12d1c:	mov	r2, sp
   12d20:	ldr	r1, [r0, #12]
   12d24:	mov	r0, #3
   12d28:	bl	11928 <__xstat64@plt>
   12d2c:	cmp	r0, #0
   12d30:	moveq	r0, #4
   12d34:	movne	r0, #1
   12d38:	add	sp, sp, #108	; 0x6c
   12d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d40:	str	r4, [sp, #-8]!
   12d44:	ldr	r0, [r0, #20]
   12d48:	str	lr, [sp, #4]
   12d4c:	bl	187b0 <__assert_fail@plt+0x6e10>
   12d50:	cmp	r0, #0
   12d54:	ldr	r4, [sp]
   12d58:	add	sp, sp, #4
   12d5c:	movne	r0, #2
   12d60:	moveq	r0, #4
   12d64:	pop	{pc}		; (ldr pc, [sp], #4)
   12d68:	str	r4, [sp, #-8]!
   12d6c:	ldr	r0, [r0, #20]
   12d70:	str	lr, [sp, #4]
   12d74:	bl	16c58 <__assert_fail@plt+0x52b8>
   12d78:	cmp	r0, #0
   12d7c:	ldr	r4, [sp]
   12d80:	add	sp, sp, #4
   12d84:	movne	r0, #2
   12d88:	moveq	r0, #4
   12d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d90:	mov	r3, r1
   12d94:	mov	r2, #0
   12d98:	str	r4, [sp, #-8]!
   12d9c:	ldr	r1, [r0, #20]
   12da0:	mov	r0, r3
   12da4:	str	lr, [sp, #4]
   12da8:	bl	116dc <fnmatch@plt>
   12dac:	cmp	r0, #0
   12db0:	ldr	r4, [sp]
   12db4:	add	sp, sp, #4
   12db8:	movne	r0, #4
   12dbc:	moveq	r0, #2
   12dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   12dc4:	mov	r3, r1
   12dc8:	mov	r2, #16
   12dcc:	str	r4, [sp, #-8]!
   12dd0:	ldr	r1, [r0, #20]
   12dd4:	mov	r0, r3
   12dd8:	str	lr, [sp, #4]
   12ddc:	bl	116dc <fnmatch@plt>
   12de0:	cmp	r0, #0
   12de4:	ldr	r4, [sp]
   12de8:	add	sp, sp, #4
   12dec:	movne	r0, #4
   12df0:	moveq	r0, #2
   12df4:	pop	{pc}		; (ldr pc, [sp], #4)
   12df8:	strd	r4, [sp, #-12]!
   12dfc:	mov	r5, r1
   12e00:	ldr	r4, [r0, #20]
   12e04:	str	lr, [sp, #8]
   12e08:	sub	sp, sp, #12
   12e0c:	mov	r0, r4
   12e10:	bl	117a8 <strlen@plt>
   12e14:	mov	r3, r0
   12e18:	mov	ip, #0
   12e1c:	mov	r2, r0
   12e20:	mov	r1, r4
   12e24:	mov	r0, r5
   12e28:	stm	sp, {r3, ip}
   12e2c:	mov	r3, ip
   12e30:	bl	31178 <__assert_fail@plt+0x1f7d8>
   12e34:	cmp	r0, #0
   12e38:	movlt	r0, #4
   12e3c:	movge	r0, #2
   12e40:	add	sp, sp, #12
   12e44:	ldrd	r4, [sp]
   12e48:	add	sp, sp, #8
   12e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e50:	str	r4, [sp, #-8]!
   12e54:	mov	r4, r0
   12e58:	ldr	r0, [r0, #12]
   12e5c:	str	lr, [sp, #4]
   12e60:	bl	14d1c <__assert_fail@plt+0x337c>
   12e64:	str	r0, [r4, #20]
   12e68:	mov	r0, #1
   12e6c:	ldr	r4, [sp]
   12e70:	add	sp, sp, #4
   12e74:	pop	{pc}		; (ldr pc, [sp], #4)
   12e78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12e7c:	strd	r6, [sp, #8]
   12e80:	movw	r7, #25128	; 0x6228
   12e84:	movt	r7, #4
   12e88:	ldr	r4, [r7]
   12e8c:	mov	r6, r0
   12e90:	str	r8, [sp, #16]
   12e94:	ldr	r5, [r7, #12]
   12e98:	str	lr, [sp, #20]
   12e9c:	cmp	r4, r5
   12ea0:	beq	12ee8 <__assert_fail@plt+0x1548>
   12ea4:	mov	r0, r6
   12ea8:	ldr	r3, [r4]
   12eac:	ldr	r1, [r4, #4]
   12eb0:	blx	r3
   12eb4:	ldr	r4, [r4, #8]
   12eb8:	subs	r2, r5, r4
   12ebc:	movne	r2, #1
   12ec0:	ands	r3, r0, #3
   12ec4:	movne	r3, r2
   12ec8:	cmp	r3, #0
   12ecc:	bne	12ea4 <__assert_fail@plt+0x1504>
   12ed0:	cmp	r0, #1
   12ed4:	moveq	r0, #4
   12ed8:	beq	12f20 <__assert_fail@plt+0x1580>
   12edc:	tst	r0, #12
   12ee0:	bne	12f20 <__assert_fail@plt+0x1580>
   12ee4:	ldr	r5, [r7, #12]
   12ee8:	cmp	r5, #0
   12eec:	beq	12f34 <__assert_fail@plt+0x1594>
   12ef0:	mov	r0, r6
   12ef4:	ldr	r3, [r5]
   12ef8:	ldr	r1, [r5, #4]
   12efc:	blx	r3
   12f00:	ldr	r5, [r5, #8]
   12f04:	cmp	r5, #0
   12f08:	andne	r3, r0, #1
   12f0c:	moveq	r3, #0
   12f10:	cmp	r3, #0
   12f14:	bne	12ef0 <__assert_fail@plt+0x1550>
   12f18:	cmp	r0, #1
   12f1c:	beq	12f34 <__assert_fail@plt+0x1594>
   12f20:	ldrd	r4, [sp]
   12f24:	ldrd	r6, [sp, #8]
   12f28:	ldr	r8, [sp, #16]
   12f2c:	add	sp, sp, #20
   12f30:	pop	{pc}		; (ldr pc, [sp], #4)
   12f34:	mov	r0, #2
   12f38:	b	12f20 <__assert_fail@plt+0x1580>
   12f3c:	strd	r4, [sp, #-16]!
   12f40:	mov	r4, r0
   12f44:	mov	r5, r1
   12f48:	str	r6, [sp, #8]
   12f4c:	str	lr, [sp, #12]
   12f50:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   12f54:	cmp	r0, #1
   12f58:	bne	12f84 <__assert_fail@plt+0x15e4>
   12f5c:	mov	r1, r5
   12f60:	ldr	r0, [r4, #20]
   12f64:	bl	3283c <__assert_fail@plt+0x20e9c>
   12f68:	cmp	r0, #0
   12f6c:	ldrd	r4, [sp]
   12f70:	movne	r0, #2
   12f74:	moveq	r0, #4
   12f78:	ldr	r6, [sp, #8]
   12f7c:	add	sp, sp, #12
   12f80:	pop	{pc}		; (ldr pc, [sp], #4)
   12f84:	movw	r3, #14992	; 0x3a90
   12f88:	movt	r3, #3
   12f8c:	movw	r1, #16040	; 0x3ea8
   12f90:	movt	r1, #3
   12f94:	movw	r0, #16052	; 0x3eb4
   12f98:	movt	r0, #3
   12f9c:	movw	r2, #690	; 0x2b2
   12fa0:	bl	119a0 <__assert_fail@plt>
   12fa4:	strd	r4, [sp, #-16]!
   12fa8:	mov	r4, r0
   12fac:	mov	r5, r1
   12fb0:	str	r6, [sp, #8]
   12fb4:	str	lr, [sp, #12]
   12fb8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   12fbc:	cmp	r0, #1
   12fc0:	bne	12fec <__assert_fail@plt+0x164c>
   12fc4:	mov	r1, r5
   12fc8:	ldr	r0, [r4, #20]
   12fcc:	bl	31cf4 <__assert_fail@plt+0x20354>
   12fd0:	cmp	r0, #0
   12fd4:	ldrd	r4, [sp]
   12fd8:	movne	r0, #2
   12fdc:	moveq	r0, #4
   12fe0:	ldr	r6, [sp, #8]
   12fe4:	add	sp, sp, #12
   12fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fec:	movw	r1, #16040	; 0x3ea8
   12ff0:	movt	r1, #3
   12ff4:	ldr	r3, [pc, #12]	; 13008 <__assert_fail@plt+0x1668>
   12ff8:	movw	r0, #16052	; 0x3eb4
   12ffc:	movt	r0, #3
   13000:	movw	r2, #714	; 0x2ca
   13004:	bl	119a0 <__assert_fail@plt>
   13008:			; <UNDEFINED> instruction: 0x00033ab8
   1300c:	ldr	r3, [r0]
   13010:	strd	r4, [sp, #-20]!	; 0xffffffec
   13014:	mov	r4, r0
   13018:	strd	r6, [sp, #8]
   1301c:	str	lr, [sp, #16]
   13020:	sub	sp, sp, #12
   13024:	cmp	r3, #128	; 0x80
   13028:	beq	13154 <__assert_fail@plt+0x17b4>
   1302c:	ldr	r6, [r0, #4]
   13030:	cmp	r3, #127	; 0x7f
   13034:	subgt	r3, r3, #256	; 0x100
   13038:	add	r6, r3, r6
   1303c:	str	r6, [r0, #4]
   13040:	ldr	r3, [r4, #8]
   13044:	lsr	ip, r6, #31
   13048:	cmp	r3, r6
   1304c:	orrlt	ip, ip, #1
   13050:	cmp	ip, #0
   13054:	bne	131cc <__assert_fail@plt+0x182c>
   13058:	mov	r2, ip
   1305c:	add	r1, sp, #4
   13060:	ldr	r3, [r4, #24]
   13064:	mov	r0, sp
   13068:	str	ip, [sp]
   1306c:	str	ip, [sp, #4]
   13070:	bl	1191c <getdelim@plt>
   13074:	subs	r5, r0, #0
   13078:	blt	1314c <__assert_fail@plt+0x17ac>
   1307c:	ldr	r1, [sp]
   13080:	cmp	r1, #0
   13084:	beq	1325c <__assert_fail@plt+0x18bc>
   13088:	add	r7, r6, r5
   1308c:	ldr	r0, [r4, #12]
   13090:	add	r7, r7, #1
   13094:	ldr	r3, [r4, #16]
   13098:	cmp	r7, r3
   1309c:	bhi	1312c <__assert_fail@plt+0x178c>
   130a0:	add	r2, r5, #1
   130a4:	add	r0, r0, r6
   130a8:	bl	115d4 <memcpy@plt>
   130ac:	ldr	r0, [sp]
   130b0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   130b4:	cmp	r5, #0
   130b8:	beq	1314c <__assert_fail@plt+0x17ac>
   130bc:	ldr	r0, [r4, #24]
   130c0:	bl	11970 <getc@plt>
   130c4:	ldr	r3, [r4, #4]
   130c8:	str	r0, [r4]
   130cc:	add	r5, r5, r3
   130d0:	sub	r5, r5, #1
   130d4:	cmp	r5, #0
   130d8:	str	r5, [r4, #8]
   130dc:	ble	13188 <__assert_fail@plt+0x17e8>
   130e0:	ldr	r3, [r4, #12]
   130e4:	sub	r5, r5, #1
   130e8:	ldrb	r2, [r3, r5]
   130ec:	add	r5, r3, r5
   130f0:	cmp	r2, #0
   130f4:	beq	13240 <__assert_fail@plt+0x18a0>
   130f8:	ldrb	r2, [r5, #1]
   130fc:	cmp	r2, #0
   13100:	bne	13224 <__assert_fail@plt+0x1884>
   13104:	ldrb	r2, [r5, #2]
   13108:	cmp	r2, #0
   1310c:	moveq	r0, #1
   13110:	streq	r3, [r4, #20]
   13114:	bne	13208 <__assert_fail@plt+0x1868>
   13118:	add	sp, sp, #12
   1311c:	ldrd	r4, [sp]
   13120:	ldrd	r6, [sp, #8]
   13124:	add	sp, sp, #16
   13128:	pop	{pc}		; (ldr pc, [sp], #4)
   1312c:	mov	r1, r7
   13130:	bl	1f170 <__assert_fail@plt+0xd7d0>
   13134:	cmp	r0, #0
   13138:	beq	1314c <__assert_fail@plt+0x17ac>
   1313c:	str	r0, [r4, #12]
   13140:	str	r7, [r4, #16]
   13144:	ldr	r1, [sp]
   13148:	b	130a0 <__assert_fail@plt+0x1700>
   1314c:	mov	r0, #8
   13150:	b	13118 <__assert_fail@plt+0x1778>
   13154:	ldr	r6, [r0, #24]
   13158:	mov	r0, r6
   1315c:	bl	11838 <fgetc@plt>
   13160:	sxtb	r5, r0
   13164:	mov	r0, r6
   13168:	bl	11838 <fgetc@plt>
   1316c:	ldr	r6, [r4, #4]
   13170:	lsl	r5, r5, #8
   13174:	uxtb	r0, r0
   13178:	orr	r5, r5, r0
   1317c:	add	r6, r5, r6
   13180:	str	r6, [r4, #4]
   13184:	b	13040 <__assert_fail@plt+0x16a0>
   13188:	mov	r2, #5
   1318c:	movw	r1, #16068	; 0x3ec4
   13190:	movt	r1, #3
   13194:	mov	r0, #0
   13198:	bl	11628 <dcgettext@plt>
   1319c:	mov	r5, r0
   131a0:	mov	r1, #8
   131a4:	ldr	r2, [r4, #28]
   131a8:	mov	r0, #0
   131ac:	bl	1b9e8 <__assert_fail@plt+0xa048>
   131b0:	mov	r3, r0
   131b4:	mov	r2, r5
   131b8:	mov	r1, #0
   131bc:	mov	r0, #1
   131c0:	bl	116d0 <error@plt>
   131c4:	ldr	r5, [r4, #8]
   131c8:	b	130e0 <__assert_fail@plt+0x1740>
   131cc:	mov	r2, #5
   131d0:	movw	r1, #16068	; 0x3ec4
   131d4:	movt	r1, #3
   131d8:	mov	r0, #0
   131dc:	bl	11628 <dcgettext@plt>
   131e0:	mov	r5, r0
   131e4:	mov	r1, #8
   131e8:	ldr	r2, [r4, #28]
   131ec:	mov	r0, #0
   131f0:	bl	1b9e8 <__assert_fail@plt+0xa048>
   131f4:	mov	r3, r0
   131f8:	mov	r2, r5
   131fc:	mov	r1, #0
   13200:	mov	r0, #1
   13204:	bl	116d0 <error@plt>
   13208:	movw	r1, #16040	; 0x3ea8
   1320c:	movt	r1, #3
   13210:	ldr	r3, [pc, #96]	; 13278 <__assert_fail@plt+0x18d8>
   13214:	movw	r0, #16156	; 0x3f1c
   13218:	movt	r0, #3
   1321c:	movw	r2, #570	; 0x23a
   13220:	bl	119a0 <__assert_fail@plt>
   13224:	movw	r1, #16040	; 0x3ea8
   13228:	movt	r1, #3
   1322c:	ldr	r3, [pc, #68]	; 13278 <__assert_fail@plt+0x18d8>
   13230:	movw	r0, #16140	; 0x3f0c
   13234:	movt	r0, #3
   13238:	movw	r2, #569	; 0x239
   1323c:	bl	119a0 <__assert_fail@plt>
   13240:	movw	r1, #16040	; 0x3ea8
   13244:	movt	r1, #3
   13248:	ldr	r3, [pc, #40]	; 13278 <__assert_fail@plt+0x18d8>
   1324c:	movw	r0, #16124	; 0x3efc
   13250:	movt	r0, #3
   13254:	mov	r2, #568	; 0x238
   13258:	bl	119a0 <__assert_fail@plt>
   1325c:	movw	r1, #16040	; 0x3ea8
   13260:	movt	r1, #3
   13264:	ldr	r3, [pc, #16]	; 1327c <__assert_fail@plt+0x18dc>
   13268:	movw	r0, #16112	; 0x3ef0
   1326c:	movt	r0, #3
   13270:	mov	r2, #245	; 0xf5
   13274:	bl	119a0 <__assert_fail@plt>
   13278:	strdeq	r3, [r3], -r0
   1327c:	andeq	r3, r3, r0, ror #21
   13280:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13284:	strd	r6, [sp, #8]
   13288:	movw	r7, #25128	; 0x6228
   1328c:	movt	r7, #4
   13290:	ldr	r4, [r7]
   13294:	str	r8, [sp, #16]
   13298:	ldr	r6, [r7, #12]
   1329c:	str	lr, [sp, #20]
   132a0:	cmp	r4, r6
   132a4:	beq	1333c <__assert_fail@plt+0x199c>
   132a8:	mov	r5, r0
   132ac:	mov	r0, r5
   132b0:	ldr	r3, [r4]
   132b4:	ldr	r1, [r4, #4]
   132b8:	blx	r3
   132bc:	ldr	r4, [r4, #8]
   132c0:	and	r3, r0, #5
   132c4:	cmp	r6, r4
   132c8:	cmpne	r3, #0
   132cc:	bne	132ac <__assert_fail@plt+0x190c>
   132d0:	cmp	r0, #1
   132d4:	moveq	r0, #4
   132d8:	beq	13320 <__assert_fail@plt+0x1980>
   132dc:	tst	r0, #12
   132e0:	bne	13320 <__assert_fail@plt+0x1980>
   132e4:	ldr	r4, [r7, #12]
   132e8:	cmp	r4, #0
   132ec:	beq	13334 <__assert_fail@plt+0x1994>
   132f0:	mov	r0, r5
   132f4:	ldr	r3, [r4]
   132f8:	ldr	r1, [r4, #4]
   132fc:	blx	r3
   13300:	ldr	r4, [r4, #8]
   13304:	cmp	r4, #0
   13308:	andne	r3, r0, #1
   1330c:	moveq	r3, #0
   13310:	cmp	r3, #0
   13314:	bne	132f0 <__assert_fail@plt+0x1950>
   13318:	cmp	r0, #1
   1331c:	beq	13334 <__assert_fail@plt+0x1994>
   13320:	ldrd	r4, [sp]
   13324:	ldrd	r6, [sp, #8]
   13328:	ldr	r8, [sp, #16]
   1332c:	add	sp, sp, #20
   13330:	pop	{pc}		; (ldr pc, [sp], #4)
   13334:	mov	r0, #2
   13338:	b	13320 <__assert_fail@plt+0x1980>
   1333c:	mov	r0, #5
   13340:	b	13320 <__assert_fail@plt+0x1980>
   13344:	ldr	r3, [r0]
   13348:	cmn	r3, #1
   1334c:	beq	13528 <__assert_fail@plt+0x1b88>
   13350:	cmp	r3, #30
   13354:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13358:	mov	r4, r0
   1335c:	ldr	r0, [r0, #4]
   13360:	strd	r6, [sp, #8]
   13364:	str	r8, [sp, #16]
   13368:	str	lr, [sp, #20]
   1336c:	beq	134ac <__assert_fail@plt+0x1b0c>
   13370:	sub	r5, r3, #14
   13374:	add	r5, r5, r0
   13378:	cmp	r5, #0
   1337c:	str	r5, [r4, #4]
   13380:	blt	13574 <__assert_fail@plt+0x1bd4>
   13384:	add	r6, r4, #16
   13388:	ldr	r0, [r4, #24]
   1338c:	bl	11970 <getc@plt>
   13390:	cmp	r0, #30
   13394:	str	r0, [r4]
   13398:	ble	13464 <__assert_fail@plt+0x1ac4>
   1339c:	cmp	r0, #127	; 0x7f
   133a0:	bgt	133cc <__assert_fail@plt+0x1a2c>
   133a4:	cmn	r5, #1
   133a8:	beq	13530 <__assert_fail@plt+0x1b90>
   133ac:	add	r7, r5, #1
   133b0:	ldr	r3, [r4, #12]
   133b4:	ldr	r2, [r4, #16]
   133b8:	cmp	r2, r7
   133bc:	bcc	1341c <__assert_fail@plt+0x1a7c>
   133c0:	strb	r0, [r3, r5]
   133c4:	mov	r5, r7
   133c8:	b	13388 <__assert_fail@plt+0x19e8>
   133cc:	cmn	r5, #3
   133d0:	bhi	13530 <__assert_fail@plt+0x1b90>
   133d4:	add	r7, r5, #2
   133d8:	ldr	r1, [r4, #12]
   133dc:	ldr	r3, [r4, #16]
   133e0:	cmp	r3, r7
   133e4:	bcc	13440 <__assert_fail@plt+0x1aa0>
   133e8:	mov	r2, r4
   133ec:	and	r3, r0, #127	; 0x7f
   133f0:	str	r3, [r2], r3
   133f4:	ldrb	r3, [r2, #36]	; 0x24
   133f8:	strb	r3, [r1, r5]
   133fc:	ldr	r2, [r4]
   13400:	ldr	r3, [r4, #12]
   13404:	add	r2, r4, r2
   13408:	ldrb	r2, [r2, #164]	; 0xa4
   1340c:	add	r3, r3, r5
   13410:	mov	r5, r7
   13414:	strb	r2, [r3, #1]
   13418:	b	13388 <__assert_fail@plt+0x19e8>
   1341c:	mov	r0, r3
   13420:	mov	r2, #1
   13424:	str	r7, [r4, #16]
   13428:	mov	r1, r6
   1342c:	bl	1d968 <__assert_fail@plt+0xbfc8>
   13430:	mov	r3, r0
   13434:	ldr	r0, [r4]
   13438:	str	r3, [r4, #12]
   1343c:	b	133c0 <__assert_fail@plt+0x1a20>
   13440:	mov	r0, r1
   13444:	mov	r2, #1
   13448:	str	r7, [r4, #16]
   1344c:	mov	r1, r6
   13450:	bl	1d968 <__assert_fail@plt+0xbfc8>
   13454:	mov	r1, r0
   13458:	ldr	r0, [r4]
   1345c:	str	r1, [r4, #12]
   13460:	b	133e8 <__assert_fail@plt+0x1a48>
   13464:	cmn	r5, #1
   13468:	beq	13530 <__assert_fail@plt+0x1b90>
   1346c:	add	ip, r5, #1
   13470:	ldr	r3, [r4, #12]
   13474:	ldr	r2, [r4, #16]
   13478:	cmp	r2, ip
   1347c:	bcc	13508 <__assert_fail@plt+0x1b68>
   13480:	mov	r2, #0
   13484:	mov	r0, #1
   13488:	strb	r2, [r3, r5]
   1348c:	ldr	r3, [r4, #12]
   13490:	ldrd	r6, [sp, #8]
   13494:	ldr	r8, [sp, #16]
   13498:	str	r5, [r4, #8]
   1349c:	str	r3, [r4, #20]
   134a0:	ldrd	r4, [sp]
   134a4:	add	sp, sp, #20
   134a8:	pop	{pc}		; (ldr pc, [sp], #4)
   134ac:	ldr	r2, [r4, #8]
   134b0:	sub	r3, r0, #14
   134b4:	rsb	r5, r0, #14
   134b8:	cmp	r3, #0
   134bc:	str	r3, [r4, #4]
   134c0:	ldrd	r0, [r4, #24]
   134c4:	subge	r2, r2, r3
   134c8:	add	r3, r4, #32
   134cc:	bl	143f4 <__assert_fail@plt+0x2a54>
   134d0:	cmp	r5, r0
   134d4:	bgt	13558 <__assert_fail@plt+0x1bb8>
   134d8:	ldr	r5, [r4, #4]
   134dc:	add	r5, r0, r5
   134e0:	cmp	r5, #0
   134e4:	str	r5, [r4, #4]
   134e8:	bge	13384 <__assert_fail@plt+0x19e4>
   134ec:	movw	r1, #16040	; 0x3ea8
   134f0:	movt	r1, #3
   134f4:	ldr	r3, [pc, #148]	; 13590 <__assert_fail@plt+0x1bf0>
   134f8:	movw	r0, #16188	; 0x3f3c
   134fc:	movt	r0, #3
   13500:	mov	r2, #480	; 0x1e0
   13504:	bl	119a0 <__assert_fail@plt>
   13508:	mov	r1, r4
   1350c:	mov	r0, r3
   13510:	mov	r2, #1
   13514:	str	ip, [r1, #16]!
   13518:	bl	1d968 <__assert_fail@plt+0xbfc8>
   1351c:	mov	r3, r0
   13520:	str	r0, [r4, #12]
   13524:	b	13480 <__assert_fail@plt+0x1ae0>
   13528:	mov	r0, #8
   1352c:	bx	lr
   13530:	mov	r2, #5
   13534:	movw	r1, #16212	; 0x3f54
   13538:	movt	r1, #3
   1353c:	mov	r0, #0
   13540:	bl	11628 <dcgettext@plt>
   13544:	mov	r2, r0
   13548:	mov	r1, #0
   1354c:	ldr	r3, [r4, #28]
   13550:	mov	r0, #1
   13554:	bl	116d0 <error@plt>
   13558:	movw	r1, #16040	; 0x3ea8
   1355c:	movt	r1, #3
   13560:	ldr	r3, [pc, #40]	; 13590 <__assert_fail@plt+0x1bf0>
   13564:	movw	r0, #16172	; 0x3f2c
   13568:	movt	r0, #3
   1356c:	movw	r2, #478	; 0x1de
   13570:	bl	119a0 <__assert_fail@plt>
   13574:	movw	r1, #16040	; 0x3ea8
   13578:	movt	r1, #3
   1357c:	ldr	r3, [pc, #12]	; 13590 <__assert_fail@plt+0x1bf0>
   13580:	movw	r0, #16188	; 0x3f3c
   13584:	movt	r0, #3
   13588:	movw	r2, #485	; 0x1e5
   1358c:	bl	119a0 <__assert_fail@plt>
   13590:	andeq	r3, r3, r8, lsl #22
   13594:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13598:	movw	r4, #25128	; 0x6228
   1359c:	movt	r4, #4
   135a0:	strd	r6, [sp, #8]
   135a4:	mov	r7, r2
   135a8:	strd	r8, [sp, #16]
   135ac:	mov	r8, r1
   135b0:	strd	sl, [sp, #24]
   135b4:	mov	fp, r0
   135b8:	str	lr, [sp, #32]
   135bc:	sub	sp, sp, #2960	; 0xb90
   135c0:	sub	sp, sp, #4
   135c4:	ldr	r2, [sp, #3000]	; 0xbb8
   135c8:	ldr	sl, [sp, #3036]	; 0xbdc
   135cc:	str	r2, [sp, #40]	; 0x28
   135d0:	ldr	r2, [sp, #3004]	; 0xbbc
   135d4:	str	r2, [sp, #48]	; 0x30
   135d8:	ldr	r2, [sp, #3012]	; 0xbc4
   135dc:	cmp	r2, #0
   135e0:	ldr	r2, [r4, #16]
   135e4:	str	r2, [sp, #24]
   135e8:	beq	135f8 <__assert_fail@plt+0x1c58>
   135ec:	ldr	r2, [sp, #3040]	; 0xbe0
   135f0:	orr	r2, r2, #4194304	; 0x400000
   135f4:	str	r2, [sp, #3040]	; 0xbe0
   135f8:	mov	r2, #0
   135fc:	mov	r1, #128	; 0x80
   13600:	mov	r0, r1
   13604:	str	r2, [r4]
   13608:	str	r2, [r4, #12]
   1360c:	str	r2, [r4, #20]
   13610:	strb	r2, [r4, #24]
   13614:	str	r2, [sp, #64]	; 0x40
   13618:	str	r2, [sp, #68]	; 0x44
   1361c:	str	r1, [sp, #76]	; 0x4c
   13620:	str	r3, [sp, #84]	; 0x54
   13624:	str	r7, [sp, #88]	; 0x58
   13628:	str	r2, [sp, #92]	; 0x5c
   1362c:	bl	1d714 <__assert_fail@plt+0xbd74>
   13630:	mov	r2, #2
   13634:	mov	r1, #1
   13638:	ldr	r3, [sp, #84]	; 0x54
   1363c:	str	r0, [sp, #72]	; 0x48
   13640:	bl	116ac <fread@plt>
   13644:	cmp	r0, #2
   13648:	mov	r6, r0
   1364c:	ldr	r9, [sp, #72]	; 0x48
   13650:	bhi	14348 <__assert_fail@plt+0x29a8>
   13654:	bne	13a4c <__assert_fail@plt+0x20ac>
   13658:	ldrb	r5, [r9, #1]
   1365c:	cmp	r5, #0
   13660:	bne	13a4c <__assert_fail@plt+0x20ac>
   13664:	bl	11778 <__ctype_b_loc@plt>
   13668:	ldrb	r3, [r9]
   1366c:	ldr	r1, [r0]
   13670:	lsl	r2, r3, #1
   13674:	ldrh	r2, [r1, r2]
   13678:	tst	r2, #2048	; 0x800
   1367c:	beq	13a4c <__assert_fail@plt+0x20ac>
   13680:	sub	r6, r3, #48	; 0x30
   13684:	cmp	r6, #1
   13688:	bgt	13d6c <__assert_fail@plt+0x23cc>
   1368c:	bne	136bc <__assert_fail@plt+0x1d1c>
   13690:	ldr	r3, [r4, #16]
   13694:	cmp	r3, #2
   13698:	beq	142b0 <__assert_fail@plt+0x2910>
   1369c:	ldr	r3, [sp, #24]
   136a0:	cmp	r3, #1
   136a4:	beq	136bc <__assert_fail@plt+0x1d1c>
   136a8:	ldr	r3, [sp, #3016]	; 0xbc8
   136ac:	ldr	r2, [sp, #3028]	; 0xbd4
   136b0:	orrs	r3, r3, r2
   136b4:	streq	r6, [sp, #24]
   136b8:	bne	13e90 <__assert_fail@plt+0x24f0>
   136bc:	mov	r0, #12
   136c0:	bl	1d714 <__assert_fail@plt+0xbd74>
   136c4:	ldr	r1, [r4, #20]
   136c8:	mov	r2, #0
   136cc:	movw	r3, #12300	; 0x300c
   136d0:	movt	r3, #1
   136d4:	mov	r9, r0
   136d8:	str	r3, [r0]
   136dc:	str	r2, [r0, #4]
   136e0:	cmp	r1, r2
   136e4:	str	r2, [r0, #8]
   136e8:	beq	13f44 <__assert_fail@plt+0x25a4>
   136ec:	movw	r3, #16284	; 0x3f9c
   136f0:	movt	r3, #3
   136f4:	str	r0, [r1, #8]
   136f8:	str	r0, [r4, #20]
   136fc:	str	r2, [sp, #44]	; 0x2c
   13700:	str	r3, [sp, #52]	; 0x34
   13704:	mov	r3, #1
   13708:	str	r3, [sp, #36]	; 0x24
   1370c:	ldr	r3, [sp, #3020]	; 0xbcc
   13710:	cmp	r3, #0
   13714:	bne	13af4 <__assert_fail@plt+0x2154>
   13718:	cmp	fp, #0
   1371c:	ble	1385c <__assert_fail@plt+0x1ebc>
   13720:	movw	r3, #16824	; 0x41b8
   13724:	movt	r3, #3
   13728:	sub	r8, r8, #4
   1372c:	mov	r5, #0
   13730:	str	r3, [sp, #20]
   13734:	movw	r3, #11624	; 0x2d68
   13738:	movt	r3, #1
   1373c:	str	r3, [sp, #28]
   13740:	movw	r3, #11584	; 0x2d40
   13744:	movt	r3, #1
   13748:	str	r3, [sp, #32]
   1374c:	b	137a4 <__assert_fail@plt+0x1e04>
   13750:	mov	r0, r6
   13754:	ldr	r1, [sp, #20]
   13758:	bl	11904 <strpbrk@plt>
   1375c:	cmp	r0, #0
   13760:	beq	13be8 <__assert_fail@plt+0x2248>
   13764:	ldr	r3, [sp, #3012]	; 0xbc4
   13768:	cmp	r3, #0
   1376c:	beq	13bbc <__assert_fail@plt+0x221c>
   13770:	mov	r0, #12
   13774:	bl	1d714 <__assert_fail@plt+0xbd74>
   13778:	ldr	r2, [r4, #20]
   1377c:	movw	r3, #11716	; 0x2dc4
   13780:	movt	r3, #1
   13784:	stm	r0, {r3, r6, sl}
   13788:	cmp	r2, #0
   1378c:	beq	13844 <__assert_fail@plt+0x1ea4>
   13790:	str	r0, [r2, #8]
   13794:	str	r0, [r4, #20]
   13798:	add	r5, r5, #1
   1379c:	cmp	r5, fp
   137a0:	beq	13858 <__assert_fail@plt+0x1eb8>
   137a4:	mov	r9, #1
   137a8:	cmp	sl, #0
   137ac:	ldr	r6, [r8, #4]!
   137b0:	strb	r9, [r4, #24]
   137b4:	beq	13750 <__assert_fail@plt+0x1db0>
   137b8:	mov	r0, #32
   137bc:	bl	1d714 <__assert_fail@plt+0xbd74>
   137c0:	mov	r2, #32
   137c4:	mov	r1, #0
   137c8:	mov	r7, r0
   137cc:	bl	11814 <memset@plt>
   137d0:	ldr	r0, [sp, #3040]	; 0xbe0
   137d4:	bl	30604 <__assert_fail@plt+0x1ec64>
   137d8:	mov	r3, #100	; 0x64
   137dc:	mov	r0, r3
   137e0:	str	r3, [r7, #4]
   137e4:	bl	1d714 <__assert_fail@plt+0xbd74>
   137e8:	ldr	r3, [sp, #3040]	; 0xbe0
   137ec:	str	r0, [r7]
   137f0:	mov	r0, r6
   137f4:	str	r3, [r7, #12]
   137f8:	mov	r3, #0
   137fc:	str	r3, [r7, #16]
   13800:	str	r3, [r7, #20]
   13804:	bl	117a8 <strlen@plt>
   13808:	mov	r1, r0
   1380c:	mov	r2, r7
   13810:	mov	r0, r6
   13814:	bl	30580 <__assert_fail@plt+0x1ebe0>
   13818:	subs	r6, r0, #0
   1381c:	bne	142f4 <__assert_fail@plt+0x2954>
   13820:	mov	r0, #12
   13824:	bl	1d714 <__assert_fail@plt+0xbd74>
   13828:	ldr	r2, [r4, #20]
   1382c:	movw	r3, #11768	; 0x2df8
   13830:	movt	r3, #1
   13834:	stm	r0, {r3, r7}
   13838:	str	r6, [r0, #8]
   1383c:	cmp	r2, #0
   13840:	bne	13790 <__assert_fail@plt+0x1df0>
   13844:	add	r5, r5, #1
   13848:	str	r0, [r4]
   1384c:	cmp	r5, fp
   13850:	str	r0, [r4, #20]
   13854:	bne	137a4 <__assert_fail@plt+0x1e04>
   13858:	mov	r9, r0
   1385c:	ldr	r3, [sp, #24]
   13860:	cmp	r3, #1
   13864:	beq	13ccc <__assert_fail@plt+0x232c>
   13868:	cmp	r3, #2
   1386c:	bne	138c0 <__assert_fail@plt+0x1f20>
   13870:	movw	r3, #25004	; 0x61ac
   13874:	movt	r3, #4
   13878:	ldr	r5, [r3, #4]
   1387c:	mov	r3, #1
   13880:	mov	r0, #12
   13884:	strb	r3, [r4, #24]
   13888:	cmp	r5, #0
   1388c:	bne	13dfc <__assert_fail@plt+0x245c>
   13890:	bl	1d714 <__assert_fail@plt+0xbd74>
   13894:	ldr	r2, [r4, #20]
   13898:	movw	r3, #11452	; 0x2cbc
   1389c:	movt	r3, #1
   138a0:	cmp	r2, #0
   138a4:	stm	r0, {r3, r5}
   138a8:	str	r5, [r0, #8]
   138ac:	strne	r0, [r2, #8]
   138b0:	strne	r0, [r4, #20]
   138b4:	bne	138c0 <__assert_fail@plt+0x1f20>
   138b8:	str	r0, [r4]
   138bc:	str	r0, [r4, #20]
   138c0:	ldr	r3, [sp, #3028]	; 0xbd4
   138c4:	cmp	r3, #0
   138c8:	bne	13d00 <__assert_fail@plt+0x2360>
   138cc:	ldr	r3, [sp, #3016]	; 0xbc8
   138d0:	cmp	r3, #0
   138d4:	beq	13918 <__assert_fail@plt+0x1f78>
   138d8:	ldrb	r5, [r4, #80]	; 0x50
   138dc:	mov	r0, #12
   138e0:	cmp	r5, #0
   138e4:	bne	13d38 <__assert_fail@plt+0x2398>
   138e8:	bl	1d714 <__assert_fail@plt+0xbd74>
   138ec:	ldr	r2, [r4, #20]
   138f0:	movw	r3, #10932	; 0x2ab4
   138f4:	movt	r3, #1
   138f8:	stm	r0, {r3, r5}
   138fc:	str	r5, [r0, #8]
   13900:	cmp	r2, #0
   13904:	strne	r0, [r2, #8]
   13908:	strne	r0, [r4, #20]
   1390c:	bne	13918 <__assert_fail@plt+0x1f78>
   13910:	str	r0, [r4]
   13914:	str	r0, [r4, #20]
   13918:	ldr	r3, [sp, #3024]	; 0xbd0
   1391c:	mov	r0, #12
   13920:	cmp	r3, #0
   13924:	beq	13c58 <__assert_fail@plt+0x22b8>
   13928:	bl	1d714 <__assert_fail@plt+0xbd74>
   1392c:	ldr	r2, [r4, #20]
   13930:	mov	ip, #0
   13934:	movw	r3, #10676	; 0x29b4
   13938:	movt	r3, #1
   1393c:	ldr	r1, [pc, #2716]	; 143e0 <__assert_fail@plt+0x2a40>
   13940:	str	r3, [r0]
   13944:	cmp	r2, ip
   13948:	stmib	r0, {r1, ip}
   1394c:	beq	13c80 <__assert_fail@plt+0x22e0>
   13950:	cmp	fp, #1
   13954:	str	r0, [r2, #8]
   13958:	str	r0, [r4, #20]
   1395c:	ble	13c90 <__assert_fail@plt+0x22f0>
   13960:	ldr	r2, [sp, #3032]	; 0xbd8
   13964:	ldr	r3, [r9, #8]
   13968:	cmp	r2, #0
   1396c:	str	r3, [r4, #12]
   13970:	movwne	r3, #11896	; 0x2e78
   13974:	movweq	r3, #12928	; 0x3280
   13978:	movtne	r3, #1
   1397c:	movteq	r3, #1
   13980:	str	r3, [r4, #104]	; 0x68
   13984:	ldr	r3, [sp, #3028]	; 0xbd4
   13988:	cmp	r3, #0
   1398c:	bne	13ca8 <__assert_fail@plt+0x2308>
   13990:	ldr	r0, [sp, #84]	; 0x54
   13994:	bl	11970 <getc@plt>
   13998:	ldr	r1, [sp, #36]	; 0x24
   1399c:	adds	r2, r0, #1
   139a0:	mov	r3, r0
   139a4:	movne	r2, #1
   139a8:	str	r0, [sp, #60]	; 0x3c
   139ac:	tst	r1, r2
   139b0:	beq	139d0 <__assert_fail@plt+0x2030>
   139b4:	b	13ef8 <__assert_fail@plt+0x2558>
   139b8:	add	r0, sp, #60	; 0x3c
   139bc:	ldr	r3, [r4, #104]	; 0x68
   139c0:	blx	r3
   139c4:	cmp	r0, #8
   139c8:	beq	139d8 <__assert_fail@plt+0x2038>
   139cc:	ldr	r3, [sp, #60]	; 0x3c
   139d0:	cmn	r3, #1
   139d4:	bne	139b8 <__assert_fail@plt+0x2018>
   139d8:	ldr	r3, [sp, #3028]	; 0xbd4
   139dc:	cmp	r3, #0
   139e0:	beq	13a18 <__assert_fail@plt+0x2078>
   139e4:	ldr	r3, [sp, #44]	; 0x2c
   139e8:	cmp	r3, #0
   139ec:	bne	13f68 <__assert_fail@plt+0x25c8>
   139f0:	ldr	r3, [sp, #40]	; 0x28
   139f4:	ldr	r2, [sp, #48]	; 0x30
   139f8:	orrs	r3, r3, r2
   139fc:	ldr	r2, [sp, #3008]	; 0xbc0
   13a00:	movne	r3, #1
   13a04:	moveq	r3, #0
   13a08:	cmp	r2, #0
   13a0c:	movne	r3, #1
   13a10:	cmp	r3, #0
   13a14:	bne	13fbc <__assert_fail@plt+0x261c>
   13a18:	ldr	r0, [sp, #84]	; 0x54
   13a1c:	bl	115b0 <ferror@plt>
   13a20:	cmp	r0, #0
   13a24:	bne	13f0c <__assert_fail@plt+0x256c>
   13a28:	ldr	r0, [r4, #96]	; 0x60
   13a2c:	add	sp, sp, #2960	; 0xb90
   13a30:	add	sp, sp, #4
   13a34:	ldrd	r4, [sp]
   13a38:	ldrd	r6, [sp, #8]
   13a3c:	ldrd	r8, [sp, #16]
   13a40:	ldrd	sl, [sp, #24]
   13a44:	add	sp, sp, #32
   13a48:	pop	{pc}		; (ldr pc, [sp], #4)
   13a4c:	ldr	r3, [sp, #76]	; 0x4c
   13a50:	cmp	r3, #9
   13a54:	bls	1422c <__assert_fail@plt+0x288c>
   13a58:	add	r0, r9, r6
   13a5c:	rsb	r2, r6, #10
   13a60:	ldr	r3, [sp, #84]	; 0x54
   13a64:	mov	r1, #1
   13a68:	bl	116ac <fread@plt>
   13a6c:	add	r6, r6, r0
   13a70:	ldr	r5, [sp, #72]	; 0x48
   13a74:	cmp	r6, #9
   13a78:	bls	13b30 <__assert_fail@plt+0x2190>
   13a7c:	mov	r2, #10
   13a80:	ldr	r1, [pc, #2396]	; 143e4 <__assert_fail@plt+0x2a44>
   13a84:	mov	r0, r5
   13a88:	bl	1161c <memcmp@plt>
   13a8c:	subs	r3, r0, #0
   13a90:	str	r3, [sp, #44]	; 0x2c
   13a94:	bne	13b30 <__assert_fail@plt+0x2190>
   13a98:	mov	r0, #12
   13a9c:	bl	1d714 <__assert_fail@plt+0xbd74>
   13aa0:	ldr	r2, [r4, #20]
   13aa4:	movw	r3, #12300	; 0x300c
   13aa8:	movt	r3, #1
   13aac:	mov	r9, r0
   13ab0:	str	r0, [r4, #20]
   13ab4:	str	r3, [r0]
   13ab8:	movw	r3, #16292	; 0x3fa4
   13abc:	movt	r3, #3
   13ac0:	ldr	r1, [sp, #44]	; 0x2c
   13ac4:	str	r3, [sp, #52]	; 0x34
   13ac8:	cmp	r2, #0
   13acc:	ldrne	r3, [sp, #44]	; 0x2c
   13ad0:	streq	r0, [r4]
   13ad4:	moveq	r3, r1
   13ad8:	str	r1, [r0, #4]
   13adc:	str	r1, [r0, #8]
   13ae0:	strne	r0, [r2, #8]
   13ae4:	str	r3, [sp, #36]	; 0x24
   13ae8:	ldr	r3, [sp, #3020]	; 0xbcc
   13aec:	cmp	r3, #0
   13af0:	beq	13718 <__assert_fail@plt+0x1d78>
   13af4:	mov	r0, #12
   13af8:	bl	1d714 <__assert_fail@plt+0xbd74>
   13afc:	ldr	r1, [r4, #20]
   13b00:	mov	r2, #0
   13b04:	movw	r3, #11856	; 0x2e50
   13b08:	movt	r3, #1
   13b0c:	mov	r9, r0
   13b10:	str	r0, [r4, #20]
   13b14:	str	r3, [r0]
   13b18:	str	r2, [r0, #4]
   13b1c:	cmp	r1, r2
   13b20:	str	r2, [r0, #8]
   13b24:	streq	r0, [r4]
   13b28:	strne	r0, [r1, #8]
   13b2c:	b	13718 <__assert_fail@plt+0x1d78>
   13b30:	ldr	r3, [sp, #76]	; 0x4c
   13b34:	cmp	r3, #255	; 0xff
   13b38:	bls	13e6c <__assert_fail@plt+0x24cc>
   13b3c:	cmp	r6, #255	; 0xff
   13b40:	ble	13e44 <__assert_fail@plt+0x24a4>
   13b44:	add	r2, r5, #1
   13b48:	add	r3, sp, #95	; 0x5f
   13b4c:	add	r0, sp, #223	; 0xdf
   13b50:	ldrb	r1, [r2, #-1]
   13b54:	strb	r1, [r3, #1]!
   13b58:	cmp	r3, r0
   13b5c:	ldrb	r1, [r2], #2
   13b60:	strb	r1, [r3, #128]	; 0x80
   13b64:	bne	13b50 <__assert_fail@plt+0x21b0>
   13b68:	mov	r0, #12
   13b6c:	bl	1d714 <__assert_fail@plt+0xbd74>
   13b70:	ldr	r1, [r4, #20]
   13b74:	mov	r2, #0
   13b78:	movw	r3, #13124	; 0x3344
   13b7c:	movt	r3, #1
   13b80:	mov	r9, r0
   13b84:	str	r3, [r0]
   13b88:	str	r2, [r0, #4]
   13b8c:	cmp	r1, r2
   13b90:	str	r2, [r0, #8]
   13b94:	beq	13ed4 <__assert_fail@plt+0x2534>
   13b98:	movw	r3, #16308	; 0x3fb4
   13b9c:	movt	r3, #3
   13ba0:	str	r0, [r1, #8]
   13ba4:	str	r0, [r4, #20]
   13ba8:	str	r2, [sp, #36]	; 0x24
   13bac:	str	r3, [sp, #52]	; 0x34
   13bb0:	mov	r3, #1
   13bb4:	str	r3, [sp, #44]	; 0x2c
   13bb8:	b	1370c <__assert_fail@plt+0x1d6c>
   13bbc:	mov	r0, #12
   13bc0:	bl	1d714 <__assert_fail@plt+0xbd74>
   13bc4:	movw	r3, #11664	; 0x2d90
   13bc8:	movt	r3, #1
   13bcc:	ldr	r2, [r4, #20]
   13bd0:	stm	r0, {r3, r6}
   13bd4:	ldr	r3, [sp, #3012]	; 0xbc4
   13bd8:	cmp	r2, #0
   13bdc:	str	r3, [r0, #8]
   13be0:	bne	13790 <__assert_fail@plt+0x1df0>
   13be4:	b	13844 <__assert_fail@plt+0x1ea4>
   13be8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   13bec:	cmp	r0, #1
   13bf0:	beq	13c38 <__assert_fail@plt+0x2298>
   13bf4:	ldr	r7, [sp, #28]
   13bf8:	ldr	r2, [sp, #3012]	; 0xbc4
   13bfc:	ldr	r3, [sp, #32]
   13c00:	cmp	r2, #0
   13c04:	moveq	r7, r3
   13c08:	mov	r0, #12
   13c0c:	bl	1d714 <__assert_fail@plt+0xbd74>
   13c10:	ldr	r3, [r4, #20]
   13c14:	mov	r2, #0
   13c18:	str	r7, [r0]
   13c1c:	str	r6, [r0, #4]
   13c20:	str	r2, [r0, #8]
   13c24:	cmp	r3, r2
   13c28:	strne	r0, [r3, #8]
   13c2c:	strne	r0, [r4, #20]
   13c30:	bne	13798 <__assert_fail@plt+0x1df8>
   13c34:	b	13844 <__assert_fail@plt+0x1ea4>
   13c38:	ldr	r2, [sp, #3012]	; 0xbc4
   13c3c:	movw	r3, #12092	; 0x2f3c
   13c40:	movt	r3, #1
   13c44:	movw	r7, #12196	; 0x2fa4
   13c48:	movt	r7, #1
   13c4c:	cmp	r2, #0
   13c50:	moveq	r7, r3
   13c54:	b	13c08 <__assert_fail@plt+0x2268>
   13c58:	bl	1d714 <__assert_fail@plt+0xbd74>
   13c5c:	movw	r3, #10732	; 0x29ec
   13c60:	movt	r3, #1
   13c64:	ldr	r2, [r4, #20]
   13c68:	ldr	r1, [pc, #1904]	; 143e0 <__assert_fail@plt+0x2a40>
   13c6c:	str	r3, [r0]
   13c70:	ldr	r3, [sp, #3024]	; 0xbd0
   13c74:	cmp	r2, #0
   13c78:	stmib	r0, {r1, r3}
   13c7c:	bne	13950 <__assert_fail@plt+0x1fb0>
   13c80:	cmp	fp, #1
   13c84:	str	r0, [r4]
   13c88:	str	r0, [r4, #20]
   13c8c:	bgt	13960 <__assert_fail@plt+0x1fc0>
   13c90:	movw	r3, #10560	; 0x2940
   13c94:	movt	r3, #1
   13c98:	str	r3, [r4, #104]	; 0x68
   13c9c:	ldr	r3, [sp, #3028]	; 0xbd4
   13ca0:	cmp	r3, #0
   13ca4:	beq	13990 <__assert_fail@plt+0x1ff0>
   13ca8:	mov	r2, #5
   13cac:	movw	r1, #16832	; 0x41c0
   13cb0:	movt	r1, #3
   13cb4:	mov	r0, #0
   13cb8:	bl	11628 <dcgettext@plt>
   13cbc:	ldr	r2, [sp, #52]	; 0x34
   13cc0:	ldr	r1, [sp, #88]	; 0x58
   13cc4:	bl	11550 <printf@plt>
   13cc8:	b	13990 <__assert_fail@plt+0x1ff0>
   13ccc:	mov	r2, r3
   13cd0:	movw	r3, #25004	; 0x61ac
   13cd4:	movt	r3, #4
   13cd8:	mov	r0, #12
   13cdc:	ldr	r5, [r3, #4]
   13ce0:	strb	r2, [r4, #24]
   13ce4:	cmp	r5, #0
   13ce8:	beq	13e30 <__assert_fail@plt+0x2490>
   13cec:	bl	1d714 <__assert_fail@plt+0xbd74>
   13cf0:	movw	r3, #11496	; 0x2ce8
   13cf4:	movt	r3, #1
   13cf8:	ldr	r1, [r4, #20]
   13cfc:	b	13e0c <__assert_fail@plt+0x246c>
   13d00:	mov	r0, #12
   13d04:	bl	1d714 <__assert_fail@plt+0xbd74>
   13d08:	ldr	r2, [r4, #20]
   13d0c:	mov	ip, #0
   13d10:	movw	r3, #11096	; 0x2b58
   13d14:	movt	r3, #1
   13d18:	str	r0, [r4, #20]
   13d1c:	ldr	r1, [pc, #1732]	; 143e8 <__assert_fail@plt+0x2a48>
   13d20:	str	r3, [r0]
   13d24:	cmp	r2, ip
   13d28:	streq	r0, [r4]
   13d2c:	stmib	r0, {r1, ip}
   13d30:	strne	r0, [r2, #8]
   13d34:	b	138cc <__assert_fail@plt+0x1f2c>
   13d38:	bl	1d714 <__assert_fail@plt+0xbd74>
   13d3c:	ldr	r1, [r4, #20]
   13d40:	mov	r2, #0
   13d44:	movw	r3, #10996	; 0x2af4
   13d48:	movt	r3, #1
   13d4c:	str	r3, [r0]
   13d50:	str	r2, [r0, #4]
   13d54:	cmp	r1, r2
   13d58:	str	r2, [r0, #8]
   13d5c:	strne	r0, [r4, #20]
   13d60:	strne	r0, [r1, #8]
   13d64:	bne	13918 <__assert_fail@plt+0x1f78>
   13d68:	b	13910 <__assert_fail@plt+0x1f70>
   13d6c:	ldr	r7, [sp, #88]	; 0x58
   13d70:	mov	r2, #5
   13d74:	movw	r1, #16324	; 0x3fc4
   13d78:	movt	r1, #3
   13d7c:	mov	r0, r5
   13d80:	bl	11628 <dcgettext@plt>
   13d84:	mov	r4, r0
   13d88:	mov	r1, #8
   13d8c:	mov	r0, r5
   13d90:	mov	r2, r7
   13d94:	bl	1b9e8 <__assert_fail@plt+0xa048>
   13d98:	ldrb	ip, [r9, #1]
   13d9c:	mov	r3, r0
   13da0:	mov	r2, r4
   13da4:	mov	r1, r5
   13da8:	mov	r0, r5
   13dac:	str	ip, [sp]
   13db0:	bl	116d0 <error@plt>
   13db4:	mov	r2, #5
   13db8:	movw	r1, #16464	; 0x4050
   13dbc:	movt	r1, #3
   13dc0:	mov	r0, r5
   13dc4:	bl	11628 <dcgettext@plt>
   13dc8:	mov	r4, r0
   13dcc:	mov	r1, #8
   13dd0:	ldr	r2, [sp, #88]	; 0x58
   13dd4:	mov	r0, r5
   13dd8:	bl	1b9e8 <__assert_fail@plt+0xa048>
   13ddc:	mov	r3, r0
   13de0:	mov	r2, r4
   13de4:	str	r6, [sp]
   13de8:	mov	r0, r5
   13dec:	mov	r1, r5
   13df0:	bl	116d0 <error@plt>
   13df4:	mov	r0, r5
   13df8:	b	13a2c <__assert_fail@plt+0x208c>
   13dfc:	bl	1d714 <__assert_fail@plt+0xbd74>
   13e00:	ldr	r1, [r4, #20]
   13e04:	movw	r3, #11540	; 0x2d14
   13e08:	movt	r3, #1
   13e0c:	mov	r2, #0
   13e10:	str	r3, [r0]
   13e14:	cmp	r1, r2
   13e18:	str	r2, [r0, #4]
   13e1c:	str	r2, [r0, #8]
   13e20:	strne	r0, [r1, #8]
   13e24:	strne	r0, [r4, #20]
   13e28:	bne	138c0 <__assert_fail@plt+0x1f20>
   13e2c:	b	138b8 <__assert_fail@plt+0x1f18>
   13e30:	bl	1d714 <__assert_fail@plt+0xbd74>
   13e34:	movw	r3, #11408	; 0x2c90
   13e38:	movt	r3, #1
   13e3c:	ldr	r2, [r4, #20]
   13e40:	b	138a0 <__assert_fail@plt+0x1f00>
   13e44:	add	r0, r5, r6
   13e48:	rsb	r2, r6, #256	; 0x100
   13e4c:	ldr	r3, [sp, #84]	; 0x54
   13e50:	mov	r1, #1
   13e54:	bl	116ac <fread@plt>
   13e58:	add	r6, r0, r6
   13e5c:	cmp	r6, #256	; 0x100
   13e60:	bne	1430c <__assert_fail@plt+0x296c>
   13e64:	ldr	r5, [sp, #72]	; 0x48
   13e68:	b	13b44 <__assert_fail@plt+0x21a4>
   13e6c:	mov	r3, #256	; 0x100
   13e70:	mov	r0, r5
   13e74:	mov	r2, #1
   13e78:	add	r1, sp, #76	; 0x4c
   13e7c:	str	r3, [sp, #76]	; 0x4c
   13e80:	bl	1d968 <__assert_fail@plt+0xbfc8>
   13e84:	mov	r5, r0
   13e88:	str	r0, [sp, #72]	; 0x48
   13e8c:	b	13b3c <__assert_fail@plt+0x219c>
   13e90:	mov	r2, #5
   13e94:	mov	r0, r5
   13e98:	movw	r1, #16712	; 0x4148
   13e9c:	movt	r1, #3
   13ea0:	bl	11628 <dcgettext@plt>
   13ea4:	mov	r7, r0
   13ea8:	mov	r1, #8
   13eac:	ldr	r2, [sp, #88]	; 0x58
   13eb0:	mov	r0, r5
   13eb4:	str	r6, [sp, #24]
   13eb8:	bl	1b9e8 <__assert_fail@plt+0xa048>
   13ebc:	mov	r3, r0
   13ec0:	mov	r2, r7
   13ec4:	mov	r1, r5
   13ec8:	mov	r0, r5
   13ecc:	bl	116d0 <error@plt>
   13ed0:	b	136bc <__assert_fail@plt+0x1d1c>
   13ed4:	movw	r3, #16308	; 0x3fb4
   13ed8:	movt	r3, #3
   13edc:	str	r0, [r4]
   13ee0:	str	r0, [r4, #20]
   13ee4:	str	r1, [sp, #36]	; 0x24
   13ee8:	str	r3, [sp, #52]	; 0x34
   13eec:	mov	r3, #1
   13ef0:	str	r3, [sp, #44]	; 0x2c
   13ef4:	b	1370c <__assert_fail@plt+0x1d6c>
   13ef8:	ldr	r1, [sp, #84]	; 0x54
   13efc:	bl	117cc <ungetc@plt>
   13f00:	mov	r3, #0
   13f04:	str	r3, [sp, #60]	; 0x3c
   13f08:	b	139b8 <__assert_fail@plt+0x2018>
   13f0c:	bl	117d8 <__errno_location@plt>
   13f10:	ldr	r4, [r0]
   13f14:	mov	r1, #8
   13f18:	mov	r0, #0
   13f1c:	ldr	r2, [sp, #88]	; 0x58
   13f20:	bl	1b9e8 <__assert_fail@plt+0xa048>
   13f24:	mov	r3, r0
   13f28:	movw	r2, #19400	; 0x4bc8
   13f2c:	movt	r2, #3
   13f30:	mov	r0, #0
   13f34:	mov	r1, r4
   13f38:	bl	116d0 <error@plt>
   13f3c:	mov	r0, #0
   13f40:	b	13a2c <__assert_fail@plt+0x208c>
   13f44:	movw	r3, #16284	; 0x3f9c
   13f48:	movt	r3, #3
   13f4c:	str	r0, [r4]
   13f50:	str	r0, [r4, #20]
   13f54:	str	r1, [sp, #44]	; 0x2c
   13f58:	str	r3, [sp, #52]	; 0x34
   13f5c:	mov	r3, #1
   13f60:	str	r3, [sp, #36]	; 0x24
   13f64:	b	1370c <__assert_fail@plt+0x1d6c>
   13f68:	mov	r2, #5
   13f6c:	movw	r1, #16868	; 0x41e4
   13f70:	movt	r1, #3
   13f74:	mov	r0, #0
   13f78:	bl	11628 <dcgettext@plt>
   13f7c:	mov	r5, r0
   13f80:	movw	r1, #16924	; 0x421c
   13f84:	movt	r1, #3
   13f88:	mov	r2, #5
   13f8c:	mov	r0, #0
   13f90:	bl	11628 <dcgettext@plt>
   13f94:	ldr	r3, [sp, #92]	; 0x5c
   13f98:	cmp	r3, #1
   13f9c:	beq	1429c <__assert_fail@plt+0x28fc>
   13fa0:	cmp	r3, #2
   13fa4:	bne	14264 <__assert_fail@plt+0x28c4>
   13fa8:	mov	r1, r0
   13fac:	movw	r0, #19400	; 0x4bc8
   13fb0:	movt	r0, #3
   13fb4:	bl	11550 <printf@plt>
   13fb8:	b	139f0 <__assert_fail@plt+0x2050>
   13fbc:	cmp	r2, #0
   13fc0:	addeq	r5, sp, #2304	; 0x900
   13fc4:	addeq	r5, r5, #4
   13fc8:	beq	1406c <__assert_fail@plt+0x26cc>
   13fcc:	mov	r0, r2
   13fd0:	add	r5, sp, #2304	; 0x900
   13fd4:	bl	1173c <localtime@plt>
   13fd8:	subs	r6, r0, #0
   13fdc:	add	r5, r5, #4
   13fe0:	beq	1406c <__assert_fail@plt+0x26cc>
   13fe4:	movw	r2, #17036	; 0x428c
   13fe8:	movt	r2, #3
   13fec:	mov	r0, r5
   13ff0:	mov	r3, r6
   13ff4:	mov	r1, #20
   13ff8:	bl	11724 <strftime@plt>
   13ffc:	cmp	r0, #19
   14000:	bne	143b8 <__assert_fail@plt+0x2a18>
   14004:	ldrb	r0, [sp, #2327]	; 0x917
   14008:	cmp	r0, #0
   1400c:	bne	1439c <__assert_fail@plt+0x29fc>
   14010:	ldrb	r3, [sp, #2326]	; 0x916
   14014:	cmp	r3, #0
   14018:	beq	14380 <__assert_fail@plt+0x29e0>
   1401c:	mov	r2, #5
   14020:	movw	r1, #17148	; 0x42fc
   14024:	movt	r1, #3
   14028:	bl	11628 <dcgettext@plt>
   1402c:	ldr	r3, [sp, #3008]	; 0xbc0
   14030:	mov	r1, r5
   14034:	ldr	r2, [r3, #4]
   14038:	bl	11550 <printf@plt>
   1403c:	mov	r3, r6
   14040:	movw	r2, #17188	; 0x4324
   14044:	movt	r2, #3
   14048:	mov	r1, #20
   1404c:	mov	r0, r5
   14050:	bl	11724 <strftime@plt>
   14054:	cmp	r0, #5
   14058:	bne	14364 <__assert_fail@plt+0x29c4>
   1405c:	movw	r0, #17208	; 0x4338
   14060:	movt	r0, #3
   14064:	mov	r1, r5
   14068:	bl	11550 <printf@plt>
   1406c:	ldr	sl, [sp, #40]	; 0x28
   14070:	mov	r8, #5
   14074:	mov	r6, #1
   14078:	mov	r7, #0
   1407c:	movw	r2, #17216	; 0x4340
   14080:	movt	r2, #3
   14084:	movw	r1, #17248	; 0x4360
   14088:	movt	r1, #3
   1408c:	mov	r0, #0
   14090:	str	r8, [sp]
   14094:	mov	r3, sl
   14098:	bl	11994 <dcngettext@plt>
   1409c:	mov	r3, #0
   140a0:	add	r2, sp, #352	; 0x160
   140a4:	strd	r6, [sp]
   140a8:	mov	r1, r3
   140ac:	mov	r9, r0
   140b0:	strd	r6, [sp, #8]
   140b4:	mov	r0, sl
   140b8:	bl	14f40 <__assert_fail@plt+0x35a0>
   140bc:	mov	r1, r0
   140c0:	mov	r0, r9
   140c4:	bl	11550 <printf@plt>
   140c8:	ldrb	r0, [r4, #24]
   140cc:	mov	r2, r8
   140d0:	cmp	r0, #0
   140d4:	beq	14250 <__assert_fail@plt+0x28b0>
   140d8:	movw	r1, #17280	; 0x4380
   140dc:	movt	r1, #3
   140e0:	mov	r0, #0
   140e4:	bl	11628 <dcgettext@plt>
   140e8:	mov	r8, r0
   140ec:	mov	r6, #1
   140f0:	mov	r7, #0
   140f4:	ldrd	r0, [r4, #40]	; 0x28
   140f8:	mov	r3, #0
   140fc:	add	r2, sp, #352	; 0x160
   14100:	strd	r6, [sp]
   14104:	strd	r6, [sp, #8]
   14108:	bl	14f40 <__assert_fail@plt+0x35a0>
   1410c:	mov	r1, r0
   14110:	mov	r0, r8
   14114:	bl	11550 <printf@plt>
   14118:	mov	r2, #5
   1411c:	movw	r1, #17324	; 0x43ac
   14120:	movt	r1, #3
   14124:	mov	r0, #0
   14128:	bl	11628 <dcgettext@plt>
   1412c:	mov	r8, r0
   14130:	add	r2, sp, #352	; 0x160
   14134:	strd	r6, [sp]
   14138:	mov	r3, #0
   1413c:	strd	r6, [sp, #8]
   14140:	ldrd	r0, [r4, #48]	; 0x30
   14144:	bl	14f40 <__assert_fail@plt+0x35a0>
   14148:	mov	r9, r0
   1414c:	mov	r3, #0
   14150:	strd	r6, [sp]
   14154:	add	r2, sp, #1004	; 0x3ec
   14158:	strd	r6, [sp, #8]
   1415c:	ldrd	r0, [r4, #56]	; 0x38
   14160:	bl	14f40 <__assert_fail@plt+0x35a0>
   14164:	add	r2, sp, #1648	; 0x670
   14168:	mov	sl, r0
   1416c:	strd	r6, [sp]
   14170:	mov	r3, #0
   14174:	add	r2, r2, #8
   14178:	strd	r6, [sp, #8]
   1417c:	ldrd	r0, [r4, #64]	; 0x40
   14180:	bl	14f40 <__assert_fail@plt+0x35a0>
   14184:	mov	r2, r5
   14188:	mov	r3, #0
   1418c:	strd	r6, [sp]
   14190:	strd	r6, [sp, #8]
   14194:	str	r0, [sp, #20]
   14198:	ldrd	r0, [r4, #72]	; 0x48
   1419c:	bl	14f40 <__assert_fail@plt+0x35a0>
   141a0:	mov	r2, sl
   141a4:	mov	r1, r9
   141a8:	str	r0, [sp]
   141ac:	mov	r0, r8
   141b0:	ldr	r3, [sp, #20]
   141b4:	bl	11550 <printf@plt>
   141b8:	cmp	fp, #0
   141bc:	bne	14220 <__assert_fail@plt+0x2880>
   141c0:	ldrb	r3, [r4, #24]
   141c4:	cmp	r3, #0
   141c8:	bne	14280 <__assert_fail@plt+0x28e0>
   141cc:	ldrd	r2, [r4, #48]	; 0x30
   141d0:	mov	r0, fp
   141d4:	orrs	r3, r2, r3
   141d8:	beq	142dc <__assert_fail@plt+0x293c>
   141dc:	mov	r2, #5
   141e0:	movw	r1, #17592	; 0x44b8
   141e4:	movt	r1, #3
   141e8:	bl	11628 <dcgettext@plt>
   141ec:	mov	r5, r0
   141f0:	ldrd	r0, [r4, #48]	; 0x30
   141f4:	bl	337e0 <__assert_fail@plt+0x21e40>
   141f8:	vldr	s15, [sp, #40]	; 0x28
   141fc:	vmov	d6, r0, r1
   14200:	mov	r0, r5
   14204:	vldr	d5, [pc, #460]	; 143d8 <__assert_fail@plt+0x2a38>
   14208:	vcvt.f64.u32	d7, s15
   1420c:	vsub.f64	d7, d6, d7
   14210:	vmul.f64	d7, d7, d5
   14214:	vdiv.f64	d7, d7, d6
   14218:	vmov	r2, r3, d7
   1421c:	bl	11550 <printf@plt>
   14220:	mov	r0, #10
   14224:	bl	11820 <putchar@plt>
   14228:	b	13a18 <__assert_fail@plt+0x2078>
   1422c:	mov	r3, #10
   14230:	mov	r0, r9
   14234:	mov	r2, #1
   14238:	add	r1, sp, #76	; 0x4c
   1423c:	str	r3, [sp, #76]	; 0x4c
   14240:	bl	1d968 <__assert_fail@plt+0xbfc8>
   14244:	mov	r9, r0
   14248:	str	r0, [sp, #72]	; 0x48
   1424c:	b	13a58 <__assert_fail@plt+0x20b8>
   14250:	movw	r1, #17304	; 0x4398
   14254:	movt	r1, #3
   14258:	bl	11628 <dcgettext@plt>
   1425c:	mov	r8, r0
   14260:	b	140ec <__assert_fail@plt+0x274c>
   14264:	mov	r2, #5
   14268:	movw	r1, #16976	; 0x4250
   1426c:	movt	r1, #3
   14270:	mov	r0, #0
   14274:	bl	11628 <dcgettext@plt>
   14278:	bl	11550 <printf@plt>
   1427c:	b	139f0 <__assert_fail@plt+0x2050>
   14280:	mov	r2, #5
   14284:	mov	r0, fp
   14288:	movw	r1, #17504	; 0x4460
   1428c:	movt	r1, #3
   14290:	bl	11628 <dcgettext@plt>
   14294:	bl	11550 <printf@plt>
   14298:	b	14220 <__assert_fail@plt+0x2880>
   1429c:	mov	r1, r5
   142a0:	movw	r0, #19400	; 0x4bc8
   142a4:	movt	r0, #3
   142a8:	bl	11550 <printf@plt>
   142ac:	b	139f0 <__assert_fail@plt+0x2050>
   142b0:	mov	r2, #5
   142b4:	movw	r1, #16540	; 0x409c
   142b8:	movt	r1, #3
   142bc:	mov	r0, r5
   142c0:	bl	11628 <dcgettext@plt>
   142c4:	mov	r2, r0
   142c8:	mov	r1, r5
   142cc:	mov	r0, r5
   142d0:	bl	116d0 <error@plt>
   142d4:	mov	r0, r5
   142d8:	b	13a2c <__assert_fail@plt+0x208c>
   142dc:	mov	r2, #5
   142e0:	movw	r1, #17640	; 0x44e8
   142e4:	movt	r1, #3
   142e8:	bl	11628 <dcgettext@plt>
   142ec:	bl	11550 <printf@plt>
   142f0:	b	14220 <__assert_fail@plt+0x2880>
   142f4:	movw	r2, #19400	; 0x4bc8
   142f8:	movt	r2, #3
   142fc:	mov	r3, r6
   14300:	mov	r1, #0
   14304:	mov	r0, r9
   14308:	bl	116d0 <error@plt>
   1430c:	mov	r2, #5
   14310:	movw	r1, #16768	; 0x4180
   14314:	movt	r1, #3
   14318:	mov	r0, #0
   1431c:	bl	11628 <dcgettext@plt>
   14320:	mov	r4, r0
   14324:	mov	r2, r7
   14328:	mov	r1, #8
   1432c:	mov	r0, #0
   14330:	bl	1b9e8 <__assert_fail@plt+0xa048>
   14334:	mov	r3, r0
   14338:	mov	r2, r4
   1433c:	mov	r1, #0
   14340:	mov	r0, #1
   14344:	bl	116d0 <error@plt>
   14348:	movw	r1, #16040	; 0x3ea8
   1434c:	movt	r1, #3
   14350:	ldr	r3, [pc, #148]	; 143ec <__assert_fail@plt+0x2a4c>
   14354:	movw	r0, #16312	; 0x3fb8
   14358:	movt	r0, #3
   1435c:	movw	r2, #935	; 0x3a7
   14360:	bl	119a0 <__assert_fail@plt>
   14364:	movw	r1, #16040	; 0x3ea8
   14368:	movt	r1, #3
   1436c:	ldr	r3, [pc, #124]	; 143f0 <__assert_fail@plt+0x2a50>
   14370:	movw	r0, #17192	; 0x4328
   14374:	movt	r0, #3
   14378:	movw	r2, #851	; 0x353
   1437c:	bl	119a0 <__assert_fail@plt>
   14380:	movw	r1, #16040	; 0x3ea8
   14384:	movt	r1, #3
   14388:	ldr	r3, [pc, #96]	; 143f0 <__assert_fail@plt+0x2a50>
   1438c:	movw	r0, #17116	; 0x42dc
   14390:	movt	r0, #3
   14394:	movw	r2, #847	; 0x34f
   14398:	bl	119a0 <__assert_fail@plt>
   1439c:	movw	r1, #16040	; 0x3ea8
   143a0:	movt	r1, #3
   143a4:	ldr	r3, [pc, #68]	; 143f0 <__assert_fail@plt+0x2a50>
   143a8:	movw	r0, #17084	; 0x42bc
   143ac:	movt	r0, #3
   143b0:	movw	r2, #846	; 0x34e
   143b4:	bl	119a0 <__assert_fail@plt>
   143b8:	movw	r1, #16040	; 0x3ea8
   143bc:	movt	r1, #3
   143c0:	ldr	r3, [pc, #40]	; 143f0 <__assert_fail@plt+0x2a50>
   143c4:	movw	r0, #17056	; 0x42a0
   143c8:	movt	r0, #3
   143cc:	movw	r2, #845	; 0x34d
   143d0:	bl	119a0 <__assert_fail@plt>
   143d4:	nop	{0}
   143d8:	andeq	r0, r0, r0
   143dc:	subsmi	r0, r9, r0
   143e0:	andeq	r6, r4, r0, lsl #5
   143e4:	andeq	r3, r3, r8, lsr fp
   143e8:	andeq	r6, r4, r8, asr #4
   143ec:	andeq	r3, r3, ip, lsl fp
   143f0:	andeq	r3, r3, r4, asr #22
   143f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143f8:	mov	r4, r0
   143fc:	mov	r5, r1
   14400:	strd	r6, [sp, #8]
   14404:	mov	r7, r2
   14408:	mov	r6, r3
   1440c:	str	r8, [sp, #16]
   14410:	str	lr, [sp, #20]
   14414:	sub	sp, sp, #8
   14418:	bl	118e0 <clearerr@plt>
   1441c:	mov	r1, #4
   14420:	mov	r3, r4
   14424:	mov	r2, #1
   14428:	add	r0, sp, r1
   1442c:	bl	116ac <fread@plt>
   14430:	cmp	r0, #1
   14434:	beq	144b4 <__assert_fail@plt+0x2b14>
   14438:	mov	r2, r5
   1443c:	mov	r1, #8
   14440:	mov	r0, #0
   14444:	bl	1b9e8 <__assert_fail@plt+0xa048>
   14448:	mov	r5, r0
   1444c:	mov	r0, r4
   14450:	bl	11790 <feof@plt>
   14454:	subs	r4, r0, #0
   14458:	beq	14484 <__assert_fail@plt+0x2ae4>
   1445c:	mov	r2, #5
   14460:	movw	r1, #18516	; 0x4854
   14464:	movt	r1, #3
   14468:	mov	r0, #0
   1446c:	bl	11628 <dcgettext@plt>
   14470:	mov	r2, r0
   14474:	mov	r3, r5
   14478:	mov	r1, #0
   1447c:	mov	r0, #1
   14480:	bl	116d0 <error@plt>
   14484:	bl	117d8 <__errno_location@plt>
   14488:	ldr	r6, [r0]
   1448c:	mov	r2, #5
   14490:	movw	r1, #18540	; 0x486c
   14494:	movt	r1, #3
   14498:	mov	r0, r4
   1449c:	bl	11628 <dcgettext@plt>
   144a0:	mov	r2, r0
   144a4:	mov	r3, r5
   144a8:	mov	r0, #1
   144ac:	mov	r1, r6
   144b0:	bl	116d0 <error@plt>
   144b4:	ldr	r4, [r6]
   144b8:	ldr	r3, [sp, #4]
   144bc:	cmp	r4, #0
   144c0:	rev	r8, r3
   144c4:	bne	14524 <__assert_fail@plt+0x2b84>
   144c8:	cmp	r7, r3
   144cc:	bge	14548 <__assert_fail@plt+0x2ba8>
   144d0:	cmp	r7, r8
   144d4:	blt	1452c <__assert_fail@plt+0x2b8c>
   144d8:	mov	r2, #5
   144dc:	movw	r1, #18572	; 0x488c
   144e0:	movt	r1, #3
   144e4:	mov	r0, r4
   144e8:	bl	11628 <dcgettext@plt>
   144ec:	mov	r7, r0
   144f0:	mov	r2, r5
   144f4:	mov	r1, #8
   144f8:	mov	r0, r4
   144fc:	bl	1b9e8 <__assert_fail@plt+0xa048>
   14500:	mov	r3, r0
   14504:	mov	r2, r7
   14508:	mov	r1, r4
   1450c:	mov	r0, r4
   14510:	bl	116d0 <error@plt>
   14514:	mov	r2, #2
   14518:	mov	r3, r8
   1451c:	str	r2, [r6]
   14520:	b	1452c <__assert_fail@plt+0x2b8c>
   14524:	cmp	r4, #2
   14528:	moveq	r3, r8
   1452c:	mov	r0, r3
   14530:	add	sp, sp, #8
   14534:	ldrd	r4, [sp]
   14538:	ldrd	r6, [sp, #8]
   1453c:	ldr	r8, [sp, #16]
   14540:	add	sp, sp, #20
   14544:	pop	{pc}		; (ldr pc, [sp], #4)
   14548:	cmp	r7, r8
   1454c:	strlt	r0, [r6]
   14550:	b	1452c <__assert_fail@plt+0x2b8c>
   14554:	movw	r3, #25112	; 0x6218
   14558:	movt	r3, #4
   1455c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14560:	strd	r6, [sp, #8]
   14564:	mov	r6, r0
   14568:	str	r8, [sp, #16]
   1456c:	str	lr, [sp, #20]
   14570:	sub	sp, sp, #16
   14574:	ldr	r0, [r3]
   14578:	bl	1ef34 <__assert_fail@plt+0xd594>
   1457c:	movw	r2, #25116	; 0x621c
   14580:	movt	r2, #4
   14584:	movw	r3, #25016	; 0x61b8
   14588:	movt	r3, #4
   1458c:	ldr	r4, [r2]
   14590:	movw	r1, #18640	; 0x48d0
   14594:	movt	r1, #3
   14598:	mov	r2, #5
   1459c:	mov	r0, #0
   145a0:	ldr	r8, [r3]
   145a4:	bl	11628 <dcgettext@plt>
   145a8:	mov	r7, r0
   145ac:	mov	r2, #5
   145b0:	movw	r1, #18656	; 0x48e0
   145b4:	movt	r1, #3
   145b8:	mov	r0, #0
   145bc:	bl	11628 <dcgettext@plt>
   145c0:	mov	r5, r0
   145c4:	mov	r2, #5
   145c8:	movw	r1, #18672	; 0x48f0
   145cc:	movt	r1, #3
   145d0:	mov	r0, #0
   145d4:	bl	11628 <dcgettext@plt>
   145d8:	mov	ip, #0
   145dc:	mov	r3, r8
   145e0:	str	r7, [sp]
   145e4:	mov	r1, r6
   145e8:	movw	r2, #18688	; 0x4900
   145ec:	movt	r2, #3
   145f0:	str	r5, [sp, #4]
   145f4:	str	r0, [sp, #8]
   145f8:	mov	r0, r4
   145fc:	str	ip, [sp, #12]
   14600:	bl	1d51c <__assert_fail@plt+0xbb7c>
   14604:	add	sp, sp, #16
   14608:	ldrd	r4, [sp]
   1460c:	ldrd	r6, [sp, #8]
   14610:	ldr	r8, [sp, #16]
   14614:	add	sp, sp, #20
   14618:	pop	{pc}		; (ldr pc, [sp], #4)
   1461c:	cmp	r2, #0
   14620:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14624:	mov	r4, r3
   14628:	strd	r6, [sp, #8]
   1462c:	strd	r8, [sp, #16]
   14630:	str	lr, [sp, #24]
   14634:	sub	sp, sp, #8192	; 0x2000
   14638:	sub	sp, sp, #12
   1463c:	beq	14724 <__assert_fail@plt+0x2d84>
   14640:	mov	r5, r1
   14644:	add	r2, sp, #8192	; 0x2000
   14648:	add	r2, r2, #40	; 0x28
   1464c:	mov	r7, r0
   14650:	mvn	r3, #0
   14654:	add	r0, sp, #8
   14658:	str	r5, [sp]
   1465c:	mov	r1, #8192	; 0x2000
   14660:	ldr	r2, [r2]
   14664:	bl	1b388 <__assert_fail@plt+0x99e8>
   14668:	cmp	r0, #8192	; 0x2000
   1466c:	mov	r6, r0
   14670:	bcs	146c0 <__assert_fail@plt+0x2d20>
   14674:	mov	r1, r0
   14678:	add	r0, sp, #8
   1467c:	bl	14740 <__assert_fail@plt+0x2da0>
   14680:	mov	r3, r0
   14684:	mov	ip, #0
   14688:	add	r2, sp, #8
   1468c:	mov	r1, r4
   14690:	mov	r0, r7
   14694:	strb	ip, [r2, r3]
   14698:	bl	117c0 <fprintf@plt>
   1469c:	mov	r4, r0
   146a0:	mov	r0, r4
   146a4:	add	sp, sp, #8192	; 0x2000
   146a8:	add	sp, sp, #12
   146ac:	ldrd	r4, [sp]
   146b0:	ldrd	r6, [sp, #8]
   146b4:	ldrd	r8, [sp, #16]
   146b8:	add	sp, sp, #24
   146bc:	pop	{pc}		; (ldr pc, [sp], #4)
   146c0:	add	r9, r0, #1
   146c4:	mov	r0, r9
   146c8:	bl	1d714 <__assert_fail@plt+0xbd74>
   146cc:	add	r2, sp, #8192	; 0x2000
   146d0:	mov	r8, r0
   146d4:	str	r5, [sp]
   146d8:	add	r2, r2, #40	; 0x28
   146dc:	mov	r1, r9
   146e0:	mvn	r3, #0
   146e4:	ldr	r2, [r2]
   146e8:	bl	1b388 <__assert_fail@plt+0x99e8>
   146ec:	mov	r1, r6
   146f0:	mov	r0, r8
   146f4:	bl	14740 <__assert_fail@plt+0x2da0>
   146f8:	mov	r3, r0
   146fc:	mov	ip, #0
   14700:	mov	r1, r4
   14704:	mov	r0, r7
   14708:	mov	r2, r8
   1470c:	strb	ip, [r8, r3]
   14710:	bl	117c0 <fprintf@plt>
   14714:	mov	r4, r0
   14718:	mov	r0, r8
   1471c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   14720:	b	146a0 <__assert_fail@plt+0x2d00>
   14724:	mov	r1, r3
   14728:	add	r3, sp, #8192	; 0x2000
   1472c:	add	r3, r3, #40	; 0x28
   14730:	ldr	r2, [r3]
   14734:	bl	117c0 <fprintf@plt>
   14738:	mov	r4, r0
   1473c:	b	146a0 <__assert_fail@plt+0x2d00>
   14740:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14744:	mov	r5, r1
   14748:	strd	r6, [sp, #8]
   1474c:	str	r8, [sp, #16]
   14750:	strd	sl, [sp, #20]
   14754:	mov	sl, r0
   14758:	str	lr, [sp, #28]
   1475c:	sub	sp, sp, #16
   14760:	add	r7, sl, r5
   14764:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   14768:	cmp	r0, #1
   1476c:	bls	1496c <__assert_fail@plt+0x2fcc>
   14770:	cmp	sl, r7
   14774:	bcs	149b4 <__assert_fail@plt+0x3014>
   14778:	mov	r5, sl
   1477c:	mov	r4, sl
   14780:	mov	fp, #63	; 0x3f
   14784:	b	147b0 <__assert_fail@plt+0x2e10>
   14788:	cmp	r3, #37	; 0x25
   1478c:	bcs	1479c <__assert_fail@plt+0x2dfc>
   14790:	sub	r2, r3, #32
   14794:	cmp	r2, #3
   14798:	bhi	147dc <__assert_fail@plt+0x2e3c>
   1479c:	add	r4, r4, #1
   147a0:	strb	r3, [r5]
   147a4:	mov	r5, r6
   147a8:	cmp	r4, r7
   147ac:	bcs	14914 <__assert_fail@plt+0x2f74>
   147b0:	ldrb	r3, [r4]
   147b4:	add	r6, r5, #1
   147b8:	cmp	r3, #63	; 0x3f
   147bc:	bls	14788 <__assert_fail@plt+0x2de8>
   147c0:	cmp	r3, #65	; 0x41
   147c4:	bcc	147dc <__assert_fail@plt+0x2e3c>
   147c8:	cmp	r3, #95	; 0x5f
   147cc:	bls	1479c <__assert_fail@plt+0x2dfc>
   147d0:	sub	r2, r3, #97	; 0x61
   147d4:	cmp	r2, #29
   147d8:	bls	1479c <__assert_fail@plt+0x2dfc>
   147dc:	mov	r2, #0
   147e0:	mov	r3, #0
   147e4:	strd	r2, [sp, #8]
   147e8:	b	1481c <__assert_fail@plt+0x2e7c>
   147ec:	bl	11574 <wcwidth@plt>
   147f0:	cmp	r0, #0
   147f4:	addlt	r3, r4, r8
   147f8:	bge	14874 <__assert_fail@plt+0x2ed4>
   147fc:	mov	r4, r3
   14800:	strb	fp, [r5]
   14804:	mov	r5, r6
   14808:	add	r0, sp, #8
   1480c:	bl	11604 <mbsinit@plt>
   14810:	cmp	r0, #0
   14814:	bne	147a8 <__assert_fail@plt+0x2e08>
   14818:	add	r6, r5, #1
   1481c:	add	r3, sp, #8
   14820:	sub	r2, r7, r4
   14824:	mov	r1, r4
   14828:	add	r0, sp, #4
   1482c:	bl	1f100 <__assert_fail@plt+0xd760>
   14830:	cmn	r0, #1
   14834:	mov	r8, r0
   14838:	beq	14934 <__assert_fail@plt+0x2f94>
   1483c:	cmn	r0, #2
   14840:	beq	14944 <__assert_fail@plt+0x2fa4>
   14844:	cmp	r0, #0
   14848:	ldr	r0, [sp, #4]
   1484c:	bne	147ec <__assert_fail@plt+0x2e4c>
   14850:	bl	11574 <wcwidth@plt>
   14854:	cmp	r0, #0
   14858:	add	r3, r4, #1
   1485c:	blt	147fc <__assert_fail@plt+0x2e5c>
   14860:	ldrb	r2, [r4]
   14864:	mov	r4, r3
   14868:	strb	r2, [r5]
   1486c:	mov	r5, r6
   14870:	b	14808 <__assert_fail@plt+0x2e68>
   14874:	add	r2, r5, #4
   14878:	add	r1, r4, #4
   1487c:	cmp	r5, r1
   14880:	cmpcc	r4, r2
   14884:	sub	r1, r8, #1
   14888:	movcs	r2, #1
   1488c:	movcc	r2, #0
   14890:	cmp	r1, #7
   14894:	movls	r2, #0
   14898:	andhi	r2, r2, #1
   1489c:	cmp	r2, #0
   148a0:	beq	14950 <__assert_fail@plt+0x2fb0>
   148a4:	bic	ip, r8, #3
   148a8:	mov	r2, r5
   148ac:	add	ip, ip, r5
   148b0:	mov	r1, r4
   148b4:	ldr	r0, [r1], #4
   148b8:	str	r0, [r2], #4
   148bc:	cmp	r2, ip
   148c0:	bne	148b4 <__assert_fail@plt+0x2f14>
   148c4:	bic	r1, r8, #3
   148c8:	cmp	r1, r8
   148cc:	add	r2, r4, r1
   148d0:	add	ip, r5, r1
   148d4:	sub	r0, r8, r1
   148d8:	beq	14908 <__assert_fail@plt+0x2f68>
   148dc:	ldrb	lr, [r4, r1]
   148e0:	cmp	r0, #1
   148e4:	strb	lr, [r5, r1]
   148e8:	beq	149ac <__assert_fail@plt+0x300c>
   148ec:	ldrb	r1, [r2, #1]
   148f0:	cmp	r0, #2
   148f4:	strb	r1, [ip, #1]
   148f8:	beq	149ac <__assert_fail@plt+0x300c>
   148fc:	ldrb	r1, [r2, #2]
   14900:	add	r2, r4, r8
   14904:	strb	r1, [ip, #2]
   14908:	mov	r4, r2
   1490c:	add	r5, r5, r8
   14910:	b	14808 <__assert_fail@plt+0x2e68>
   14914:	sub	r0, r5, sl
   14918:	add	sp, sp, #16
   1491c:	ldrd	r4, [sp]
   14920:	ldrd	r6, [sp, #8]
   14924:	ldr	r8, [sp, #16]
   14928:	ldrd	sl, [sp, #20]
   1492c:	add	sp, sp, #28
   14930:	pop	{pc}		; (ldr pc, [sp], #4)
   14934:	add	r4, r4, #1
   14938:	strb	fp, [r5]
   1493c:	mov	r5, r6
   14940:	b	147a8 <__assert_fail@plt+0x2e08>
   14944:	mov	r4, r7
   14948:	strb	fp, [r5]
   1494c:	b	1493c <__assert_fail@plt+0x2f9c>
   14950:	sub	r1, r5, #1
   14954:	add	r2, r4, r8
   14958:	ldrb	r0, [r4], #1
   1495c:	cmp	r4, r2
   14960:	strb	r0, [r1, #1]!
   14964:	bne	14958 <__assert_fail@plt+0x2fb8>
   14968:	b	14908 <__assert_fail@plt+0x2f68>
   1496c:	cmp	sl, r7
   14970:	bcs	149a4 <__assert_fail@plt+0x3004>
   14974:	bl	11778 <__ctype_b_loc@plt>
   14978:	sub	sl, sl, #1
   1497c:	sub	r7, r7, #1
   14980:	mov	r1, #63	; 0x3f
   14984:	ldrb	r3, [sl, #1]!
   14988:	ldr	r2, [r0]
   1498c:	lsl	r3, r3, #1
   14990:	ldrh	r3, [r2, r3]
   14994:	tst	r3, #16384	; 0x4000
   14998:	strbeq	r1, [sl]
   1499c:	cmp	sl, r7
   149a0:	bne	14984 <__assert_fail@plt+0x2fe4>
   149a4:	mov	r0, r5
   149a8:	b	14918 <__assert_fail@plt+0x2f78>
   149ac:	add	r2, r4, r8
   149b0:	b	14908 <__assert_fail@plt+0x2f68>
   149b4:	mov	r0, #0
   149b8:	b	14918 <__assert_fail@plt+0x2f78>
   149bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149c0:	movw	r4, #18720	; 0x4920
   149c4:	movt	r4, #3
   149c8:	strd	r6, [sp, #8]
   149cc:	mov	r6, r4
   149d0:	strd	r8, [sp, #16]
   149d4:	mov	r9, #0
   149d8:	mov	r8, r0
   149dc:	mov	r5, r9
   149e0:	strd	sl, [sp, #24]
   149e4:	mov	sl, r4
   149e8:	str	lr, [sp, #32]
   149ec:	sub	sp, sp, #12
   149f0:	ldr	r7, [r6]
   149f4:	mov	r1, r8
   149f8:	mov	r0, r7
   149fc:	bl	11544 <strcmp@plt>
   14a00:	cmp	r0, #0
   14a04:	beq	14af0 <__assert_fail@plt+0x3150>
   14a08:	mov	r0, r7
   14a0c:	add	r5, r5, #1
   14a10:	bl	1cdf0 <__assert_fail@plt+0xb450>
   14a14:	bl	117a8 <strlen@plt>
   14a18:	add	r0, r0, #2
   14a1c:	cmp	r5, #13
   14a20:	add	r9, r9, r0
   14a24:	add	r6, r6, #12
   14a28:	bne	149f0 <__assert_fail@plt+0x3050>
   14a2c:	add	r0, r9, #1
   14a30:	movw	sl, #18876	; 0x49bc
   14a34:	movt	sl, #3
   14a38:	movw	r9, #19400	; 0x4bc8
   14a3c:	movt	r9, #3
   14a40:	mov	r5, #0
   14a44:	bl	1d714 <__assert_fail@plt+0xbd74>
   14a48:	mov	fp, r0
   14a4c:	mov	r6, r0
   14a50:	b	14a78 <__assert_fail@plt+0x30d8>
   14a54:	ldr	r0, [r4]
   14a58:	bl	1cdf0 <__assert_fail@plt+0xb450>
   14a5c:	mov	r2, r0
   14a60:	mov	r1, r9
   14a64:	mov	r0, r6
   14a68:	bl	118ec <sprintf@plt>
   14a6c:	add	r6, r6, r0
   14a70:	add	r5, r5, #1
   14a74:	add	r4, r4, #12
   14a78:	cmp	r5, #0
   14a7c:	beq	14a54 <__assert_fail@plt+0x30b4>
   14a80:	ldrh	r2, [sl]
   14a84:	mov	r7, r6
   14a88:	ldrb	r3, [sl, #2]
   14a8c:	ldr	r0, [r4]
   14a90:	strh	r2, [r6]
   14a94:	strb	r3, [r7, #2]!
   14a98:	bl	1cdf0 <__assert_fail@plt+0xb450>
   14a9c:	mov	r2, r0
   14aa0:	mov	r1, r9
   14aa4:	mov	r0, r7
   14aa8:	bl	118ec <sprintf@plt>
   14aac:	cmp	r5, #12
   14ab0:	add	r6, r7, r0
   14ab4:	bne	14a70 <__assert_fail@plt+0x30d0>
   14ab8:	mov	r2, #5
   14abc:	movw	r1, #18880	; 0x49c0
   14ac0:	movt	r1, #3
   14ac4:	mov	r0, #0
   14ac8:	bl	11628 <dcgettext@plt>
   14acc:	mov	r4, r0
   14ad0:	mov	r0, r8
   14ad4:	bl	1cdf0 <__assert_fail@plt+0xb450>
   14ad8:	mov	r3, r0
   14adc:	mov	r2, r4
   14ae0:	str	fp, [sp]
   14ae4:	mov	r1, #0
   14ae8:	mov	r0, #1
   14aec:	bl	116d0 <error@plt>
   14af0:	add	r5, r5, r5, lsl #1
   14af4:	add	r5, sl, r5, lsl #2
   14af8:	ldr	r0, [r5, #8]
   14afc:	add	sp, sp, #12
   14b00:	ldrd	r4, [sp]
   14b04:	ldrd	r6, [sp, #8]
   14b08:	ldrd	r8, [sp, #16]
   14b0c:	ldrd	sl, [sp, #24]
   14b10:	add	sp, sp, #32
   14b14:	pop	{pc}		; (ldr pc, [sp], #4)
   14b18:	cmp	r0, #12
   14b1c:	bhi	14b34 <__assert_fail@plt+0x3194>
   14b20:	add	r0, r0, r0, lsl #1
   14b24:	movw	r3, #18720	; 0x4920
   14b28:	movt	r3, #3
   14b2c:	ldr	r0, [r3, r0, lsl #2]
   14b30:	bx	lr
   14b34:	mov	r0, #0
   14b38:	bx	lr
   14b3c:	cmp	r0, #12
   14b40:	bhi	14b5c <__assert_fail@plt+0x31bc>
   14b44:	add	r0, r0, r0, lsl #1
   14b48:	movw	r3, #18720	; 0x4920
   14b4c:	movt	r3, #3
   14b50:	add	r0, r3, r0, lsl #2
   14b54:	ldr	r0, [r0, #8]
   14b58:	bx	lr
   14b5c:	mvn	r0, #0
   14b60:	bx	lr
   14b64:	cmp	r0, #12
   14b68:	bhi	14b84 <__assert_fail@plt+0x31e4>
   14b6c:	add	r0, r0, r0, lsl #1
   14b70:	movw	r3, #18720	; 0x4920
   14b74:	movt	r3, #3
   14b78:	add	r0, r3, r0, lsl #2
   14b7c:	ldr	r0, [r0, #4]
   14b80:	bx	lr
   14b84:	mov	r0, #0
   14b88:	bx	lr
   14b8c:	cmp	r0, #12
   14b90:	bhi	14bf0 <__assert_fail@plt+0x3250>
   14b94:	add	r2, r0, r0, lsl #1
   14b98:	movw	r3, #18720	; 0x4920
   14b9c:	movt	r3, #3
   14ba0:	cmp	r0, #0
   14ba4:	push	{lr}		; (str lr, [sp, #-4]!)
   14ba8:	add	r2, r3, r2, lsl #2
   14bac:	ldr	lr, [r2, #8]
   14bb0:	beq	14be0 <__assert_fail@plt+0x3240>
   14bb4:	mov	r2, #0
   14bb8:	ldr	ip, [r3, #4]
   14bbc:	tst	r1, ip
   14bc0:	beq	14bd0 <__assert_fail@plt+0x3230>
   14bc4:	ldr	ip, [r3, #8]
   14bc8:	cmp	ip, lr
   14bcc:	beq	14be8 <__assert_fail@plt+0x3248>
   14bd0:	add	r2, r2, #1
   14bd4:	add	r3, r3, #12
   14bd8:	cmp	r0, r2
   14bdc:	bne	14bb8 <__assert_fail@plt+0x3218>
   14be0:	mvn	r0, #0
   14be4:	pop	{pc}		; (ldr pc, [sp], #4)
   14be8:	mov	r0, r2
   14bec:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf0:	mvn	r0, #0
   14bf4:	bx	lr
   14bf8:	cmp	r2, #0
   14bfc:	strd	r4, [sp, #-16]!
   14c00:	str	r6, [sp, #8]
   14c04:	str	lr, [sp, #12]
   14c08:	ldr	r5, [sp, #16]
   14c0c:	beq	14c6c <__assert_fail@plt+0x32cc>
   14c10:	mov	r2, #0
   14c14:	str	r2, [r3]
   14c18:	str	r2, [r5]
   14c1c:	ldr	r4, [r3]
   14c20:	ldrb	r3, [r1]
   14c24:	add	r4, r0, r4
   14c28:	cmp	r3, #0
   14c2c:	bne	14c54 <__assert_fail@plt+0x32b4>
   14c30:	mov	r0, r4
   14c34:	bl	117a8 <strlen@plt>
   14c38:	mov	r4, r0
   14c3c:	mov	r0, #1
   14c40:	str	r4, [r5]
   14c44:	ldrd	r4, [sp]
   14c48:	ldr	r6, [sp, #8]
   14c4c:	add	sp, sp, #12
   14c50:	pop	{pc}		; (ldr pc, [sp], #4)
   14c54:	mov	r0, r4
   14c58:	bl	11904 <strpbrk@plt>
   14c5c:	cmp	r0, #0
   14c60:	subne	r4, r0, r4
   14c64:	bne	14c3c <__assert_fail@plt+0x329c>
   14c68:	b	14c30 <__assert_fail@plt+0x3290>
   14c6c:	ldr	r2, [r5]
   14c70:	ldr	r4, [r3]
   14c74:	add	r4, r4, r2
   14c78:	str	r4, [r3]
   14c7c:	ldrb	r2, [r0, r4]
   14c80:	cmp	r2, #0
   14c84:	moveq	r0, r2
   14c88:	beq	14c44 <__assert_fail@plt+0x32a4>
   14c8c:	add	r4, r4, #1
   14c90:	str	r4, [r3]
   14c94:	add	r4, r0, r4
   14c98:	ldrb	r3, [r1]
   14c9c:	cmp	r3, #0
   14ca0:	beq	14c30 <__assert_fail@plt+0x3290>
   14ca4:	b	14c54 <__assert_fail@plt+0x32b4>
   14ca8:	mov	r2, #5
   14cac:	strd	r4, [sp, #-12]!
   14cb0:	mov	r5, r1
   14cb4:	mov	r4, r0
   14cb8:	movw	r1, #19064	; 0x4a78
   14cbc:	movt	r1, #3
   14cc0:	mov	r0, #0
   14cc4:	str	lr, [sp, #8]
   14cc8:	sub	sp, sp, #20
   14ccc:	bl	11628 <dcgettext@plt>
   14cd0:	movw	r1, #19312	; 0x4b70
   14cd4:	movt	r1, #3
   14cd8:	movw	r2, #19336	; 0x4b88
   14cdc:	movt	r2, #3
   14ce0:	movw	ip, #18688	; 0x4900
   14ce4:	movt	ip, #3
   14ce8:	mov	r3, r5
   14cec:	str	ip, [sp]
   14cf0:	str	r2, [sp, #4]
   14cf4:	movw	r2, #19272	; 0x4b48
   14cf8:	movt	r2, #3
   14cfc:	str	r1, [sp, #8]
   14d00:	mov	r1, r0
   14d04:	mov	r0, r4
   14d08:	bl	117c0 <fprintf@plt>
   14d0c:	add	sp, sp, #20
   14d10:	ldrd	r4, [sp]
   14d14:	add	sp, sp, #8
   14d18:	pop	{pc}		; (ldr pc, [sp], #4)
   14d1c:	ldrb	r3, [r0]
   14d20:	cmp	r3, #47	; 0x2f
   14d24:	bne	14d34 <__assert_fail@plt+0x3394>
   14d28:	ldrb	r3, [r0, #1]!
   14d2c:	cmp	r3, #47	; 0x2f
   14d30:	beq	14d28 <__assert_fail@plt+0x3388>
   14d34:	cmp	r3, #0
   14d38:	beq	14d68 <__assert_fail@plt+0x33c8>
   14d3c:	mov	r2, r0
   14d40:	mov	r1, #0
   14d44:	cmp	r3, #47	; 0x2f
   14d48:	moveq	r1, #1
   14d4c:	beq	14d5c <__assert_fail@plt+0x33bc>
   14d50:	cmp	r1, #0
   14d54:	movne	r0, r2
   14d58:	movne	r1, #0
   14d5c:	ldrb	r3, [r2, #1]!
   14d60:	cmp	r3, #0
   14d64:	bne	14d44 <__assert_fail@plt+0x33a4>
   14d68:	bx	lr
   14d6c:	str	r4, [sp, #-8]!
   14d70:	mov	r4, r0
   14d74:	str	lr, [sp, #4]
   14d78:	bl	117a8 <strlen@plt>
   14d7c:	cmp	r0, #1
   14d80:	bls	14d94 <__assert_fail@plt+0x33f4>
   14d84:	sub	r2, r0, #1
   14d88:	ldrb	r1, [r4, r2]
   14d8c:	cmp	r1, #47	; 0x2f
   14d90:	beq	14da0 <__assert_fail@plt+0x3400>
   14d94:	ldr	r4, [sp]
   14d98:	add	sp, sp, #4
   14d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14da0:	cmp	r2, #1
   14da4:	beq	14db8 <__assert_fail@plt+0x3418>
   14da8:	add	r1, r4, r0
   14dac:	ldrb	r1, [r1, #-2]
   14db0:	cmp	r1, #47	; 0x2f
   14db4:	beq	14dc8 <__assert_fail@plt+0x3428>
   14db8:	ldr	r4, [sp]
   14dbc:	add	sp, sp, #4
   14dc0:	mov	r0, r2
   14dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc8:	sub	r3, r0, #3
   14dcc:	rsb	r0, r4, #1
   14dd0:	add	r3, r4, r3
   14dd4:	cmp	r3, r4
   14dd8:	add	r2, r0, r3
   14ddc:	beq	14db8 <__assert_fail@plt+0x3418>
   14de0:	ldrb	r1, [r3], #-1
   14de4:	cmp	r1, #47	; 0x2f
   14de8:	bne	14db8 <__assert_fail@plt+0x3418>
   14dec:	b	14dd4 <__assert_fail@plt+0x3434>
   14df0:	movw	r3, #25240	; 0x6298
   14df4:	movt	r3, #4
   14df8:	str	r0, [r3]
   14dfc:	bx	lr
   14e00:	movw	r3, #25240	; 0x6298
   14e04:	movt	r3, #4
   14e08:	strb	r0, [r3, #4]
   14e0c:	bx	lr
   14e10:	movw	r3, #25116	; 0x621c
   14e14:	movt	r3, #4
   14e18:	strd	r4, [sp, #-16]!
   14e1c:	ldr	r0, [r3]
   14e20:	str	r6, [sp, #8]
   14e24:	str	lr, [sp, #12]
   14e28:	sub	sp, sp, #8
   14e2c:	bl	33088 <__assert_fail@plt+0x216e8>
   14e30:	cmp	r0, #0
   14e34:	beq	14e60 <__assert_fail@plt+0x34c0>
   14e38:	movw	r4, #25240	; 0x6298
   14e3c:	movt	r4, #4
   14e40:	ldrb	r6, [r4, #4]
   14e44:	bl	117d8 <__errno_location@plt>
   14e48:	mov	r5, r0
   14e4c:	cmp	r6, #0
   14e50:	beq	14e8c <__assert_fail@plt+0x34ec>
   14e54:	ldr	r3, [r0]
   14e58:	cmp	r3, #32
   14e5c:	bne	14e8c <__assert_fail@plt+0x34ec>
   14e60:	movw	r3, #25112	; 0x6218
   14e64:	movt	r3, #4
   14e68:	ldr	r0, [r3]
   14e6c:	bl	33088 <__assert_fail@plt+0x216e8>
   14e70:	cmp	r0, #0
   14e74:	bne	14ed4 <__assert_fail@plt+0x3534>
   14e78:	add	sp, sp, #8
   14e7c:	ldrd	r4, [sp]
   14e80:	ldr	r6, [sp, #8]
   14e84:	add	sp, sp, #12
   14e88:	pop	{pc}		; (ldr pc, [sp], #4)
   14e8c:	movw	r1, #19384	; 0x4bb8
   14e90:	movt	r1, #3
   14e94:	mov	r2, #5
   14e98:	mov	r0, #0
   14e9c:	bl	11628 <dcgettext@plt>
   14ea0:	mov	r6, r0
   14ea4:	ldr	r0, [r4]
   14ea8:	cmp	r0, #0
   14eac:	beq	14ee4 <__assert_fail@plt+0x3544>
   14eb0:	ldr	r4, [r5]
   14eb4:	bl	1c274 <__assert_fail@plt+0xa8d4>
   14eb8:	mov	r3, r0
   14ebc:	movw	r2, #19396	; 0x4bc4
   14ec0:	movt	r2, #3
   14ec4:	mov	r0, #0
   14ec8:	str	r6, [sp]
   14ecc:	mov	r1, r4
   14ed0:	bl	116d0 <error@plt>
   14ed4:	movw	r3, #25020	; 0x61bc
   14ed8:	movt	r3, #4
   14edc:	ldr	r0, [r3]
   14ee0:	bl	115c8 <_exit@plt>
   14ee4:	mov	r3, r6
   14ee8:	movw	r2, #19400	; 0x4bc8
   14eec:	movt	r2, #3
   14ef0:	ldr	r1, [r5]
   14ef4:	bl	116d0 <error@plt>
   14ef8:	b	14ed4 <__assert_fail@plt+0x3534>
   14efc:	push	{r1, r2, r3}
   14f00:	push	{lr}		; (str lr, [sp, #-4]!)
   14f04:	sub	sp, sp, #8
   14f08:	ldr	r1, [sp, #12]
   14f0c:	ands	r2, r1, #64	; 0x40
   14f10:	bne	14f2c <__assert_fail@plt+0x358c>
   14f14:	bl	116e8 <open64@plt>
   14f18:	bl	1cfc4 <__assert_fail@plt+0xb624>
   14f1c:	add	sp, sp, #8
   14f20:	pop	{lr}		; (ldr lr, [sp], #4)
   14f24:	add	sp, sp, #12
   14f28:	bx	lr
   14f2c:	add	r3, sp, #16
   14f30:	ldr	r2, [sp, #16]
   14f34:	str	r3, [sp, #4]
   14f38:	b	14f14 <__assert_fail@plt+0x3574>
   14f3c:	andeq	r0, r0, r0
   14f40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f44:	strd	r6, [sp, #8]
   14f48:	mov	r6, r3
   14f4c:	ands	r3, r3, #32
   14f50:	strd	r8, [sp, #16]
   14f54:	mov	r9, r1
   14f58:	moveq	r1, #1000	; 0x3e8
   14f5c:	strd	sl, [sp, #24]
   14f60:	movne	r1, #1024	; 0x400
   14f64:	mov	r8, r0
   14f68:	str	lr, [sp, #32]
   14f6c:	vpush	{d8-d9}
   14f70:	sub	sp, sp, #100	; 0x64
   14f74:	str	r2, [sp, #4]
   14f78:	moveq	r2, #1000	; 0x3e8
   14f7c:	movne	r2, #1024	; 0x400
   14f80:	str	r3, [sp, #32]
   14f84:	and	r3, r6, #3
   14f88:	str	r1, [sp, #8]
   14f8c:	str	r3, [sp, #24]
   14f90:	mov	r3, #0
   14f94:	strd	r2, [sp, #16]
   14f98:	str	r1, [sp, #28]
   14f9c:	bl	118d4 <localeconv@plt>
   14fa0:	ldr	r3, [sp, #4]
   14fa4:	mov	r4, r0
   14fa8:	add	r2, r3, #644	; 0x284
   14fac:	ldr	r3, [r0]
   14fb0:	add	r2, r2, #3
   14fb4:	str	r2, [sp, #24]
   14fb8:	mov	r0, r3
   14fbc:	mov	r5, r3
   14fc0:	bl	117a8 <strlen@plt>
   14fc4:	ldmib	r4, {r7, sl}
   14fc8:	sub	r2, r0, #1
   14fcc:	movw	r3, #19436	; 0x4bec
   14fd0:	movt	r3, #3
   14fd4:	cmp	r2, #16
   14fd8:	movcc	r3, r5
   14fdc:	mov	fp, r0
   14fe0:	movcs	fp, #1
   14fe4:	str	r3, [sp, #36]	; 0x24
   14fe8:	mov	r0, r7
   14fec:	bl	117a8 <strlen@plt>
   14ff0:	cmp	r0, #16
   14ff4:	movw	r3, #17212	; 0x433c
   14ff8:	movt	r3, #3
   14ffc:	ldrd	r0, [sp, #152]	; 0x98
   15000:	movhi	r7, r3
   15004:	ldrd	r2, [sp, #160]	; 0xa0
   15008:	cmp	r3, r1
   1500c:	cmpeq	r2, r0
   15010:	bhi	15310 <__assert_fail@plt+0x3970>
   15014:	bl	33854 <__assert_fail@plt+0x21eb4>
   15018:	orrs	r3, r2, r3
   1501c:	bne	15050 <__assert_fail@plt+0x36b0>
   15020:	mul	ip, r0, r9
   15024:	mov	r3, r1
   15028:	mov	r2, r0
   1502c:	umull	r4, r5, r0, r8
   15030:	mla	r1, r8, r1, ip
   15034:	mov	r0, r4
   15038:	add	r5, r1, r5
   1503c:	mov	r1, r5
   15040:	bl	33854 <__assert_fail@plt+0x21eb4>
   15044:	cmp	r1, r9
   15048:	cmpeq	r0, r8
   1504c:	beq	15924 <__assert_fail@plt+0x3f84>
   15050:	ldrd	r0, [sp, #152]	; 0x98
   15054:	bl	337e0 <__assert_fail@plt+0x21e40>
   15058:	vmov	d9, r0, r1
   1505c:	ldrd	r0, [sp, #160]	; 0xa0
   15060:	bl	337e0 <__assert_fail@plt+0x21e40>
   15064:	vmov	d7, r0, r1
   15068:	mov	r0, r8
   1506c:	mov	r1, r9
   15070:	vdiv.f64	d8, d9, d7
   15074:	bl	337e0 <__assert_fail@plt+0x21e40>
   15078:	vmov	d7, r0, r1
   1507c:	tst	r6, #16
   15080:	vmul.f64	d8, d8, d7
   15084:	beq	15240 <__assert_fail@plt+0x38a0>
   15088:	vldr	s15, [sp, #8]
   1508c:	vcvt.f64.s32	d7, s15
   15090:	vmul.f64	d6, d7, d7
   15094:	vcmpe.f64	d8, d6
   15098:	vmrs	APSR_nzcv, fpscr
   1509c:	blt	15b78 <__assert_fail@plt+0x41d8>
   150a0:	vmul.f64	d5, d7, d6
   150a4:	vcmpe.f64	d8, d5
   150a8:	vmrs	APSR_nzcv, fpscr
   150ac:	blt	15b84 <__assert_fail@plt+0x41e4>
   150b0:	vmul.f64	d6, d7, d5
   150b4:	vcmpe.f64	d8, d6
   150b8:	vmrs	APSR_nzcv, fpscr
   150bc:	blt	15b94 <__assert_fail@plt+0x41f4>
   150c0:	vmul.f64	d5, d7, d6
   150c4:	vcmpe.f64	d8, d5
   150c8:	vmrs	APSR_nzcv, fpscr
   150cc:	blt	15bb8 <__assert_fail@plt+0x4218>
   150d0:	vmul.f64	d6, d7, d5
   150d4:	vcmpe.f64	d8, d6
   150d8:	vmrs	APSR_nzcv, fpscr
   150dc:	blt	15bc8 <__assert_fail@plt+0x4228>
   150e0:	vmul.f64	d5, d7, d6
   150e4:	vcmpe.f64	d8, d5
   150e8:	vmrs	APSR_nzcv, fpscr
   150ec:	blt	15bd8 <__assert_fail@plt+0x4238>
   150f0:	vmul.f64	d7, d7, d5
   150f4:	vcmpe.f64	d8, d7
   150f8:	vmrs	APSR_nzcv, fpscr
   150fc:	movlt	r3, #7
   15100:	vmovlt.f64	d7, d5
   15104:	strlt	r3, [sp, #8]
   15108:	blt	15114 <__assert_fail@plt+0x3774>
   1510c:	mov	r3, #8
   15110:	str	r3, [sp, #8]
   15114:	ands	r3, r6, #32
   15118:	and	r8, r6, #3
   1511c:	vdiv.f64	d9, d8, d7
   15120:	clz	r4, r3
   15124:	add	fp, fp, #1
   15128:	lsr	r4, r4, #5
   1512c:	cmp	r8, #1
   15130:	add	r4, r4, #1
   15134:	add	r4, r4, fp
   15138:	beq	159dc <__assert_fail@plt+0x403c>
   1513c:	vldr	d7, [pc, #444]	; 15300 <__assert_fail@plt+0x3960>
   15140:	vcmpe.f64	d9, d7
   15144:	vmrs	APSR_nzcv, fpscr
   15148:	vmovpl.f64	d7, d9
   1514c:	bpl	1518c <__assert_fail@plt+0x37ec>
   15150:	vmov	r0, r1, d9
   15154:	bl	338a0 <__assert_fail@plt+0x21f00>
   15158:	mov	r5, r0
   1515c:	mov	r9, r1
   15160:	bl	337e0 <__assert_fail@plt+0x21e40>
   15164:	cmp	r8, #0
   15168:	vmov	d7, r0, r1
   1516c:	bne	1518c <__assert_fail@plt+0x37ec>
   15170:	vcmp.f64	d9, d7
   15174:	vmrs	APSR_nzcv, fpscr
   15178:	beq	1518c <__assert_fail@plt+0x37ec>
   1517c:	adds	r0, r5, #1
   15180:	adc	r1, r9, #0
   15184:	bl	337e0 <__assert_fail@plt+0x21e40>
   15188:	vmov	d7, r0, r1
   1518c:	ldr	r5, [sp, #4]
   15190:	movw	r1, #19448	; 0x4bf8
   15194:	movt	r1, #3
   15198:	vmov	r2, r3, d7
   1519c:	mov	r0, r5
   151a0:	bl	118ec <sprintf@plt>
   151a4:	mov	r0, r5
   151a8:	bl	117a8 <strlen@plt>
   151ac:	cmp	r0, r4
   151b0:	bls	158bc <__assert_fail@plt+0x3f1c>
   151b4:	vldr	d7, [pc, #332]	; 15308 <__assert_fail@plt+0x3968>
   151b8:	vmul.f64	d9, d9, d7
   151bc:	vldr	d7, [pc, #316]	; 15300 <__assert_fail@plt+0x3960>
   151c0:	vcmpe.f64	d9, d7
   151c4:	vmrs	APSR_nzcv, fpscr
   151c8:	bpl	15210 <__assert_fail@plt+0x3870>
   151cc:	vmov	r0, r1, d9
   151d0:	bl	338a0 <__assert_fail@plt+0x21f00>
   151d4:	mov	r4, r0
   151d8:	mov	r5, r1
   151dc:	bl	337e0 <__assert_fail@plt+0x21e40>
   151e0:	and	r3, r6, #3
   151e4:	vmov	d7, r0, r1
   151e8:	cmp	r3, #0
   151ec:	bne	1520c <__assert_fail@plt+0x386c>
   151f0:	vcmp.f64	d9, d7
   151f4:	vmrs	APSR_nzcv, fpscr
   151f8:	beq	1520c <__assert_fail@plt+0x386c>
   151fc:	adds	r0, r4, #1
   15200:	adc	r1, r5, #0
   15204:	bl	337e0 <__assert_fail@plt+0x21e40>
   15208:	vmov	d7, r0, r1
   1520c:	vmov.f64	d9, d7
   15210:	vldr	d7, [pc, #240]	; 15308 <__assert_fail@plt+0x3968>
   15214:	movw	r1, #19440	; 0x4bf0
   15218:	movt	r1, #3
   1521c:	ldr	r4, [sp, #4]
   15220:	vdiv.f64	d7, d9, d7
   15224:	mov	r0, r4
   15228:	vmov	r2, r3, d7
   1522c:	bl	118ec <sprintf@plt>
   15230:	mov	r0, r4
   15234:	bl	117a8 <strlen@plt>
   15238:	mov	r8, r0
   1523c:	b	15288 <__assert_fail@plt+0x38e8>
   15240:	and	r8, r6, #3
   15244:	cmp	r8, #1
   15248:	beq	1525c <__assert_fail@plt+0x38bc>
   1524c:	vldr	d7, [pc, #172]	; 15300 <__assert_fail@plt+0x3960>
   15250:	vcmpe.f64	d8, d7
   15254:	vmrs	APSR_nzcv, fpscr
   15258:	bmi	158e0 <__assert_fail@plt+0x3f40>
   1525c:	ldr	r4, [sp, #4]
   15260:	mvn	ip, #0
   15264:	movw	r1, #19440	; 0x4bf0
   15268:	movt	r1, #3
   1526c:	vmov	r2, r3, d8
   15270:	str	ip, [sp, #8]
   15274:	mov	r0, r4
   15278:	bl	118ec <sprintf@plt>
   1527c:	mov	r0, r4
   15280:	bl	117a8 <strlen@plt>
   15284:	mov	r8, r0
   15288:	mov	r2, r0
   1528c:	ldr	r1, [sp, #4]
   15290:	ldr	r3, [sp, #24]
   15294:	sub	r9, r3, r0
   15298:	mov	r0, r9
   1529c:	add	r8, r9, r8
   152a0:	bl	1158c <memmove@plt>
   152a4:	tst	r6, #4
   152a8:	bne	1569c <__assert_fail@plt+0x3cfc>
   152ac:	tst	r6, #128	; 0x80
   152b0:	beq	152d0 <__assert_fail@plt+0x3930>
   152b4:	ldr	r3, [sp, #8]
   152b8:	cmn	r3, #1
   152bc:	beq	15734 <__assert_fail@plt+0x3d94>
   152c0:	ldr	r2, [sp, #8]
   152c4:	and	r3, r6, #256	; 0x100
   152c8:	orrs	r2, r3, r2
   152cc:	bne	15a4c <__assert_fail@plt+0x40ac>
   152d0:	ldr	r2, [sp, #24]
   152d4:	mov	r3, #0
   152d8:	mov	r0, r9
   152dc:	strb	r3, [r2]
   152e0:	add	sp, sp, #100	; 0x64
   152e4:	vpop	{d8-d9}
   152e8:	ldrd	r4, [sp]
   152ec:	ldrd	r6, [sp, #8]
   152f0:	ldrd	r8, [sp, #16]
   152f4:	ldrd	sl, [sp, #24]
   152f8:	add	sp, sp, #32
   152fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15300:	andeq	r0, r0, r0
   15304:	mvnsmi	r0, #0
   15308:	andeq	r0, r0, r0
   1530c:	eormi	r0, r4, r0
   15310:	mov	r2, r0
   15314:	mov	r3, r1
   15318:	orrs	r3, r2, r3
   1531c:	beq	15050 <__assert_fail@plt+0x36b0>
   15320:	ldrd	r2, [sp, #152]	; 0x98
   15324:	ldrd	r0, [sp, #160]	; 0xa0
   15328:	bl	33854 <__assert_fail@plt+0x21eb4>
   1532c:	orrs	r3, r2, r3
   15330:	mov	r4, r0
   15334:	mov	r5, r1
   15338:	bne	15050 <__assert_fail@plt+0x36b0>
   1533c:	mov	r0, r8
   15340:	mov	r1, r9
   15344:	mov	r2, r4
   15348:	mov	r3, r5
   1534c:	bl	33854 <__assert_fail@plt+0x21eb4>
   15350:	mov	lr, r2
   15354:	mov	r8, r1
   15358:	lsl	r1, r3, #2
   1535c:	mov	r9, r0
   15360:	lsl	r0, lr, #2
   15364:	mov	ip, r3
   15368:	orr	r1, r1, lr, lsr #30
   1536c:	mov	r2, r4
   15370:	mov	r3, r5
   15374:	adds	r0, r0, lr
   15378:	strd	r4, [sp, #8]
   1537c:	mov	r4, r9
   15380:	adc	r1, r1, ip
   15384:	adds	r0, r0, r0
   15388:	adc	r1, r1, r1
   1538c:	mov	r5, r8
   15390:	bl	33854 <__assert_fail@plt+0x21eb4>
   15394:	adds	r1, r2, r2
   15398:	adc	r3, r3, r3
   1539c:	str	r1, [sp, #40]	; 0x28
   153a0:	str	r3, [sp, #44]	; 0x2c
   153a4:	ldrd	r2, [sp, #8]
   153a8:	ldrd	r8, [sp, #40]	; 0x28
   153ac:	str	r0, [sp, #40]	; 0x28
   153b0:	cmp	r3, r9
   153b4:	cmpeq	r2, r8
   153b8:	bls	15a40 <__assert_fail@plt+0x40a0>
   153bc:	mov	r3, r8
   153c0:	orrs	r3, r3, r9
   153c4:	movne	r9, #1
   153c8:	moveq	r9, #0
   153cc:	ands	r3, r6, #16
   153d0:	str	r3, [sp, #8]
   153d4:	beq	15938 <__assert_fail@plt+0x3f98>
   153d8:	ldrd	r2, [sp, #16]
   153dc:	cmp	r5, r3
   153e0:	cmpeq	r4, r2
   153e4:	bcc	15a98 <__assert_fail@plt+0x40f8>
   153e8:	mov	r0, r4
   153ec:	mov	r1, r5
   153f0:	bl	33854 <__assert_fail@plt+0x21eb4>
   153f4:	ldr	ip, [sp, #40]	; 0x28
   153f8:	add	r2, r2, r2, lsl #2
   153fc:	mov	r4, r0
   15400:	asr	r3, r9, #1
   15404:	mov	r5, r1
   15408:	add	r2, ip, r2, lsl #1
   1540c:	ldr	ip, [sp, #28]
   15410:	udiv	r8, r2, ip
   15414:	mls	r2, ip, r8, r2
   15418:	str	r8, [sp, #40]	; 0x28
   1541c:	add	r2, r3, r2, lsl #1
   15420:	cmp	ip, r2
   15424:	add	r2, r9, r2
   15428:	bhi	15ad0 <__assert_fail@plt+0x4130>
   1542c:	cmp	ip, r2
   15430:	mov	ip, #1
   15434:	movcc	r9, #3
   15438:	movcs	r9, #2
   1543c:	ldrd	r2, [sp, #16]
   15440:	cmp	r3, r1
   15444:	cmpeq	r2, r0
   15448:	bhi	15d1c <__assert_fail@plt+0x437c>
   1544c:	bl	33854 <__assert_fail@plt+0x21eb4>
   15450:	add	r2, r2, r2, lsl #2
   15454:	mov	r4, r0
   15458:	mov	r5, r1
   1545c:	asr	r3, r9, #1
   15460:	add	r8, r8, r2, lsl #1
   15464:	ldr	r2, [sp, #28]
   15468:	udiv	ip, r8, r2
   1546c:	mls	r8, r2, ip, r8
   15470:	str	ip, [sp, #8]
   15474:	str	ip, [sp, #40]	; 0x28
   15478:	add	r3, r3, r8, lsl #1
   1547c:	cmp	r2, r3
   15480:	add	r3, r9, r3
   15484:	bhi	15b10 <__assert_fail@plt+0x4170>
   15488:	cmp	r2, r3
   1548c:	mov	ip, #1
   15490:	movcc	r9, #3
   15494:	movcs	r9, #2
   15498:	ldrd	r2, [sp, #16]
   1549c:	cmp	r1, r3
   154a0:	cmpeq	r0, r2
   154a4:	bcc	15d34 <__assert_fail@plt+0x4394>
   154a8:	bl	33854 <__assert_fail@plt+0x21eb4>
   154ac:	ldr	ip, [sp, #8]
   154b0:	add	r2, r2, r2, lsl #2
   154b4:	mov	r4, r0
   154b8:	asr	r3, r9, #1
   154bc:	mov	r5, r1
   154c0:	add	r2, ip, r2, lsl #1
   154c4:	ldr	ip, [sp, #28]
   154c8:	udiv	r8, r2, ip
   154cc:	mls	r2, ip, r8, r2
   154d0:	str	r8, [sp, #40]	; 0x28
   154d4:	add	r3, r3, r2, lsl #1
   154d8:	cmp	ip, r3
   154dc:	add	r3, r9, r3
   154e0:	bhi	15b20 <__assert_fail@plt+0x4180>
   154e4:	cmp	ip, r3
   154e8:	mov	ip, #1
   154ec:	movcc	r9, #3
   154f0:	movcs	r9, #2
   154f4:	ldrd	r2, [sp, #16]
   154f8:	cmp	r1, r3
   154fc:	cmpeq	r0, r2
   15500:	bcc	15d28 <__assert_fail@plt+0x4388>
   15504:	bl	33854 <__assert_fail@plt+0x21eb4>
   15508:	add	r2, r2, r2, lsl #2
   1550c:	mov	r4, r0
   15510:	mov	r5, r1
   15514:	asr	r3, r9, #1
   15518:	add	r8, r8, r2, lsl #1
   1551c:	ldr	r2, [sp, #28]
   15520:	udiv	ip, r8, r2
   15524:	mls	r8, r2, ip, r8
   15528:	str	ip, [sp, #8]
   1552c:	str	ip, [sp, #40]	; 0x28
   15530:	add	r3, r3, r8, lsl #1
   15534:	cmp	r2, r3
   15538:	add	r3, r9, r3
   1553c:	bhi	15b48 <__assert_fail@plt+0x41a8>
   15540:	cmp	r3, r2
   15544:	mov	ip, #1
   15548:	movhi	r9, #3
   1554c:	movls	r9, #2
   15550:	ldrd	r2, [sp, #16]
   15554:	cmp	r1, r3
   15558:	cmpeq	r0, r2
   1555c:	bcc	15d40 <__assert_fail@plt+0x43a0>
   15560:	bl	33854 <__assert_fail@plt+0x21eb4>
   15564:	ldr	ip, [sp, #8]
   15568:	add	r2, r2, r2, lsl #2
   1556c:	mov	r4, r0
   15570:	asr	r3, r9, #1
   15574:	mov	r5, r1
   15578:	add	r2, ip, r2, lsl #1
   1557c:	ldr	ip, [sp, #28]
   15580:	udiv	r8, r2, ip
   15584:	mls	r2, ip, r8, r2
   15588:	str	r8, [sp, #40]	; 0x28
   1558c:	add	r3, r3, r2, lsl #1
   15590:	cmp	ip, r3
   15594:	add	r3, r9, r3
   15598:	bhi	15b58 <__assert_fail@plt+0x41b8>
   1559c:	cmp	ip, r3
   155a0:	mov	ip, #1
   155a4:	movcc	r9, #3
   155a8:	movcs	r9, #2
   155ac:	ldrd	r2, [sp, #16]
   155b0:	cmp	r3, r1
   155b4:	cmpeq	r2, r0
   155b8:	bhi	15d58 <__assert_fail@plt+0x43b8>
   155bc:	bl	33854 <__assert_fail@plt+0x21eb4>
   155c0:	add	r2, r2, r2, lsl #2
   155c4:	mov	r5, r1
   155c8:	ldr	r1, [sp, #28]
   155cc:	asr	r3, r9, #1
   155d0:	mov	r4, r0
   155d4:	add	r8, r8, r2, lsl #1
   155d8:	udiv	r2, r8, r1
   155dc:	mls	r8, r1, r2, r8
   155e0:	str	r2, [sp, #40]	; 0x28
   155e4:	add	r3, r3, r8, lsl #1
   155e8:	cmp	r1, r3
   155ec:	add	r3, r9, r3
   155f0:	bhi	15b68 <__assert_fail@plt+0x41c8>
   155f4:	cmp	r1, r3
   155f8:	mov	ip, #1
   155fc:	movcs	r9, #2
   15600:	movcc	r9, #3
   15604:	mov	r3, #6
   15608:	str	r3, [sp, #8]
   1560c:	cmp	r5, #0
   15610:	cmpeq	r4, #9
   15614:	bhi	15940 <__assert_fail@plt+0x3fa0>
   15618:	and	r3, r6, #3
   1561c:	cmp	r3, #1
   15620:	beq	15be8 <__assert_fail@plt+0x4248>
   15624:	and	r3, r6, #3
   15628:	cmp	r3, #0
   1562c:	moveq	r3, ip
   15630:	movne	r3, #0
   15634:	cmp	r3, #0
   15638:	ldr	r3, [sp, #40]	; 0x28
   1563c:	bne	15ba4 <__assert_fail@plt+0x4204>
   15640:	cmp	r3, #0
   15644:	addne	r3, r3, #48	; 0x30
   15648:	uxtbne	r3, r3
   1564c:	bne	1565c <__assert_fail@plt+0x3cbc>
   15650:	tst	r6, #8
   15654:	bne	15cf0 <__assert_fail@plt+0x4350>
   15658:	mov	r3, #48	; 0x30
   1565c:	ldr	r1, [sp, #4]
   15660:	mov	r2, fp
   15664:	mov	r9, #0
   15668:	add	r8, r1, #644	; 0x284
   1566c:	strb	r3, [r1, #646]	; 0x286
   15670:	add	r8, r8, #2
   15674:	ldr	r1, [sp, #36]	; 0x24
   15678:	sub	r8, r8, fp
   1567c:	mov	r0, r8
   15680:	bl	115d4 <memcpy@plt>
   15684:	and	r3, r6, #3
   15688:	cmp	r3, #1
   1568c:	beq	15990 <__assert_fail@plt+0x3ff0>
   15690:	mov	r3, #0
   15694:	str	r3, [sp, #40]	; 0x28
   15698:	b	15950 <__assert_fail@plt+0x3fb0>
   1569c:	mov	r0, r7
   156a0:	sub	r4, r8, r9
   156a4:	bl	117a8 <strlen@plt>
   156a8:	mov	r5, r0
   156ac:	mvn	fp, #0
   156b0:	mov	r1, r9
   156b4:	mov	r2, r4
   156b8:	add	r0, sp, #52	; 0x34
   156bc:	bl	115d4 <memcpy@plt>
   156c0:	ldrb	r3, [sl]
   156c4:	cmp	r3, #0
   156c8:	beq	156dc <__assert_fail@plt+0x3d3c>
   156cc:	cmp	r3, #255	; 0xff
   156d0:	add	sl, sl, #1
   156d4:	movne	fp, r3
   156d8:	moveq	fp, r4
   156dc:	sub	r9, r8, fp
   156e0:	cmp	fp, r4
   156e4:	mov	r2, fp
   156e8:	mov	r0, r9
   156ec:	bls	15708 <__assert_fail@plt+0x3d68>
   156f0:	sub	r9, r8, r4
   156f4:	mov	r2, r4
   156f8:	add	r1, sp, #52	; 0x34
   156fc:	mov	r0, r9
   15700:	bl	115d4 <memcpy@plt>
   15704:	b	152ac <__assert_fail@plt+0x390c>
   15708:	sub	r4, r4, fp
   1570c:	add	r3, sp, #52	; 0x34
   15710:	add	r1, r3, r4
   15714:	sub	r8, r9, r5
   15718:	bl	115d4 <memcpy@plt>
   1571c:	cmp	r4, #0
   15720:	mov	r2, r5
   15724:	mov	r1, r7
   15728:	mov	r0, r8
   1572c:	bne	156bc <__assert_fail@plt+0x3d1c>
   15730:	b	152ac <__assert_fail@plt+0x390c>
   15734:	ldrd	r2, [sp, #160]	; 0xa0
   15738:	cmp	r3, #0
   1573c:	cmpeq	r2, #1
   15740:	bls	15b04 <__assert_fail@plt+0x4164>
   15744:	mov	r0, r2
   15748:	mov	r1, r3
   1574c:	ldrd	r2, [sp, #16]
   15750:	cmp	r1, r3
   15754:	cmpeq	r0, r2
   15758:	bls	15d98 <__assert_fail@plt+0x43f8>
   1575c:	mul	r1, r2, r3
   15760:	umull	r4, r5, r2, r2
   15764:	add	r5, r5, r1, lsl #1
   15768:	ldrd	r0, [sp, #160]	; 0xa0
   1576c:	cmp	r1, r5
   15770:	cmpeq	r0, r4
   15774:	bls	15c04 <__assert_fail@plt+0x4264>
   15778:	mov	r1, r3
   1577c:	mul	r3, r2, r5
   15780:	mov	r0, r2
   15784:	umull	sl, fp, r0, r4
   15788:	mla	r2, r4, r1, r3
   1578c:	add	fp, r2, fp
   15790:	ldrd	r2, [sp, #160]	; 0xa0
   15794:	cmp	r3, fp
   15798:	cmpeq	r2, sl
   1579c:	bls	15c38 <__assert_fail@plt+0x4298>
   157a0:	mov	r3, r1
   157a4:	mul	r1, r0, fp
   157a8:	mov	r2, r0
   157ac:	umull	r4, r5, r0, sl
   157b0:	mla	r0, sl, r3, r1
   157b4:	add	r5, r0, r5
   157b8:	ldrd	r0, [sp, #160]	; 0xa0
   157bc:	cmp	r1, r5
   157c0:	cmpeq	r0, r4
   157c4:	bls	15d64 <__assert_fail@plt+0x43c4>
   157c8:	mov	r1, r3
   157cc:	mul	r3, r2, r5
   157d0:	mov	r0, r2
   157d4:	umull	sl, fp, r2, r4
   157d8:	mla	r2, r4, r1, r3
   157dc:	add	fp, r2, fp
   157e0:	ldrd	r2, [sp, #160]	; 0xa0
   157e4:	cmp	r3, fp
   157e8:	cmpeq	r2, sl
   157ec:	bls	15c6c <__assert_fail@plt+0x42cc>
   157f0:	umull	r4, r5, r0, sl
   157f4:	mov	r3, r1
   157f8:	mov	r2, r0
   157fc:	mul	r1, r0, fp
   15800:	strd	r4, [sp, #8]
   15804:	mov	r4, r0
   15808:	mov	r5, r3
   1580c:	mla	r0, sl, r3, r1
   15810:	ldr	r3, [sp, #12]
   15814:	add	r3, r0, r3
   15818:	ldrd	r0, [sp, #160]	; 0xa0
   1581c:	str	r3, [sp, #12]
   15820:	ldrd	sl, [sp, #8]
   15824:	cmp	r1, fp
   15828:	cmpeq	r0, sl
   1582c:	bls	15ca0 <__assert_fail@plt+0x4300>
   15830:	mul	r3, r4, fp
   15834:	umull	r0, r1, r4, sl
   15838:	mla	r2, sl, r5, r3
   1583c:	add	r1, r2, r1
   15840:	ldrd	r2, [sp, #160]	; 0xa0
   15844:	cmp	r3, r1
   15848:	cmpeq	r2, r0
   1584c:	bls	15de8 <__assert_fail@plt+0x4448>
   15850:	tst	r6, #64	; 0x40
   15854:	and	r3, r6, #256	; 0x100
   15858:	beq	15870 <__assert_fail@plt+0x3ed0>
   1585c:	ldr	r1, [sp, #4]
   15860:	mov	r2, #32
   15864:	add	r0, r1, #648	; 0x288
   15868:	strb	r2, [r1, #647]	; 0x287
   1586c:	str	r0, [sp, #24]
   15870:	mov	r2, #8
   15874:	str	r2, [sp, #8]
   15878:	ldr	r2, [sp, #32]
   1587c:	adds	r1, r2, #0
   15880:	movne	r1, #1
   15884:	ldr	r0, [sp, #8]
   15888:	movw	r2, #19404	; 0x4bcc
   1588c:	movt	r2, #3
   15890:	cmp	r3, #0
   15894:	ldrb	r0, [r2, r0]
   15898:	ldr	r2, [sp, #24]
   1589c:	strb	r0, [r2], #1
   158a0:	beq	15a90 <__assert_fail@plt+0x40f0>
   158a4:	cmp	r1, #0
   158a8:	bne	15aa4 <__assert_fail@plt+0x4104>
   158ac:	mov	r3, #66	; 0x42
   158b0:	strb	r3, [r2], #1
   158b4:	str	r2, [sp, #24]
   158b8:	b	152d0 <__assert_fail@plt+0x3930>
   158bc:	tst	r6, #8
   158c0:	beq	158d8 <__assert_fail@plt+0x3f38>
   158c4:	ldr	r3, [sp, #4]
   158c8:	add	r3, r3, r0
   158cc:	ldrb	r3, [r3, #-1]
   158d0:	cmp	r3, #48	; 0x30
   158d4:	beq	15b30 <__assert_fail@plt+0x4190>
   158d8:	sub	r8, r0, fp
   158dc:	b	15288 <__assert_fail@plt+0x38e8>
   158e0:	vmov	r0, r1, d8
   158e4:	bl	338a0 <__assert_fail@plt+0x21f00>
   158e8:	mov	r4, r0
   158ec:	mov	r5, r1
   158f0:	bl	337e0 <__assert_fail@plt+0x21e40>
   158f4:	cmp	r8, #0
   158f8:	vmov	d7, r0, r1
   158fc:	bne	1591c <__assert_fail@plt+0x3f7c>
   15900:	vcmp.f64	d8, d7
   15904:	vmrs	APSR_nzcv, fpscr
   15908:	beq	1591c <__assert_fail@plt+0x3f7c>
   1590c:	adds	r0, r4, #1
   15910:	adc	r1, r5, #0
   15914:	bl	337e0 <__assert_fail@plt+0x21e40>
   15918:	vmov	d7, r0, r1
   1591c:	vmov.f64	d8, d7
   15920:	b	1525c <__assert_fail@plt+0x38bc>
   15924:	mov	r9, #0
   15928:	ands	r3, r6, #16
   1592c:	str	r3, [sp, #8]
   15930:	str	r9, [sp, #40]	; 0x28
   15934:	bne	153d8 <__assert_fail@plt+0x3a38>
   15938:	mvn	r3, #0
   1593c:	str	r3, [sp, #8]
   15940:	and	r3, r6, #3
   15944:	cmp	r3, #1
   15948:	beq	15a10 <__assert_fail@plt+0x4070>
   1594c:	ldr	r8, [sp, #24]
   15950:	and	r3, r6, #3
   15954:	cmp	r3, #0
   15958:	bne	15990 <__assert_fail@plt+0x3ff0>
   1595c:	ldr	r3, [sp, #40]	; 0x28
   15960:	add	r3, r9, r3
   15964:	cmp	r3, #0
   15968:	ble	15990 <__assert_fail@plt+0x3ff0>
   1596c:	adds	r4, r4, #1
   15970:	adc	r5, r5, #0
   15974:	ands	r3, r6, #16
   15978:	cmp	r3, #0
   1597c:	beq	15990 <__assert_fail@plt+0x3ff0>
   15980:	ldrd	r2, [sp, #16]
   15984:	cmp	r5, r3
   15988:	cmpeq	r4, r2
   1598c:	beq	15ae0 <__assert_fail@plt+0x4140>
   15990:	mov	r9, r8
   15994:	mov	r0, r4
   15998:	mov	r1, r5
   1599c:	mov	r2, #10
   159a0:	mov	r3, #0
   159a4:	bl	33854 <__assert_fail@plt+0x21eb4>
   159a8:	add	r2, r2, #48	; 0x30
   159ac:	mov	r0, r4
   159b0:	mov	r1, r5
   159b4:	mov	r3, #0
   159b8:	strb	r2, [r9, #-1]!
   159bc:	mov	r2, #10
   159c0:	bl	33854 <__assert_fail@plt+0x21eb4>
   159c4:	cmp	r5, #0
   159c8:	mov	r5, r1
   159cc:	cmpeq	r4, #9
   159d0:	mov	r4, r0
   159d4:	bhi	15994 <__assert_fail@plt+0x3ff4>
   159d8:	b	152a4 <__assert_fail@plt+0x3904>
   159dc:	ldr	r5, [sp, #4]
   159e0:	movw	r1, #19448	; 0x4bf8
   159e4:	movt	r1, #3
   159e8:	vmov	r2, r3, d9
   159ec:	mov	r0, r5
   159f0:	bl	118ec <sprintf@plt>
   159f4:	mov	r0, r5
   159f8:	bl	117a8 <strlen@plt>
   159fc:	cmp	r4, r0
   15a00:	bcs	158bc <__assert_fail@plt+0x3f1c>
   15a04:	vldr	d7, [pc, #980]	; 15de0 <__assert_fail@plt+0x4440>
   15a08:	vmul.f64	d9, d9, d7
   15a0c:	b	15210 <__assert_fail@plt+0x3870>
   15a10:	and	r0, r4, #1
   15a14:	mov	r1, #0
   15a18:	ldr	r8, [sp, #24]
   15a1c:	adds	r2, r0, r9
   15a20:	adc	r3, r1, r9, asr #31
   15a24:	orr	r2, r2, r3
   15a28:	ldr	r3, [sp, #40]	; 0x28
   15a2c:	cmp	r2, r1
   15a30:	addne	r3, r3, #1
   15a34:	cmp	r3, #5
   15a38:	bgt	1596c <__assert_fail@plt+0x3fcc>
   15a3c:	b	15990 <__assert_fail@plt+0x3ff0>
   15a40:	movcs	r9, #2
   15a44:	movcc	r9, #3
   15a48:	b	153cc <__assert_fail@plt+0x3a2c>
   15a4c:	tst	r6, #64	; 0x40
   15a50:	bne	15ab8 <__assert_fail@plt+0x4118>
   15a54:	ldr	r2, [sp, #8]
   15a58:	cmp	r2, #0
   15a5c:	beq	15dcc <__assert_fail@plt+0x442c>
   15a60:	ldr	r0, [sp, #8]
   15a64:	ldr	r2, [sp, #32]
   15a68:	adds	r1, r2, #0
   15a6c:	movne	r1, #1
   15a70:	cmp	r2, #0
   15a74:	cmpeq	r0, #1
   15a78:	bne	15884 <__assert_fail@plt+0x3ee4>
   15a7c:	ldr	r2, [sp, #24]
   15a80:	mov	r1, #107	; 0x6b
   15a84:	cmp	r3, #0
   15a88:	strb	r1, [r2], #1
   15a8c:	bne	158ac <__assert_fail@plt+0x3f0c>
   15a90:	str	r2, [sp, #24]
   15a94:	b	152d0 <__assert_fail@plt+0x3930>
   15a98:	mov	r3, #0
   15a9c:	str	r3, [sp, #8]
   15aa0:	b	15940 <__assert_fail@plt+0x3fa0>
   15aa4:	ldr	r1, [sp, #24]
   15aa8:	mov	r3, #105	; 0x69
   15aac:	add	r2, r1, #2
   15ab0:	strb	r3, [r1, #1]
   15ab4:	b	158ac <__assert_fail@plt+0x3f0c>
   15ab8:	ldr	r1, [sp, #4]
   15abc:	mov	r2, #32
   15ac0:	add	r0, r1, #648	; 0x288
   15ac4:	strb	r2, [r1, #647]	; 0x287
   15ac8:	str	r0, [sp, #24]
   15acc:	b	15a54 <__assert_fail@plt+0x40b4>
   15ad0:	adds	r9, r2, #0
   15ad4:	movne	r9, #1
   15ad8:	mov	ip, r9
   15adc:	b	1543c <__assert_fail@plt+0x3a9c>
   15ae0:	ldr	r3, [sp, #8]
   15ae4:	tst	r6, #8
   15ae8:	add	r3, r3, #1
   15aec:	str	r3, [sp, #8]
   15af0:	beq	15cf8 <__assert_fail@plt+0x4358>
   15af4:	mov	r3, #49	; 0x31
   15af8:	sub	r9, r8, #1
   15afc:	strb	r3, [r8, #-1]
   15b00:	b	152a4 <__assert_fail@plt+0x3904>
   15b04:	mov	r3, #0
   15b08:	str	r3, [sp, #8]
   15b0c:	b	152c0 <__assert_fail@plt+0x3920>
   15b10:	adds	ip, r3, #0
   15b14:	movne	ip, #1
   15b18:	mov	r9, ip
   15b1c:	b	15498 <__assert_fail@plt+0x3af8>
   15b20:	adds	ip, r3, #0
   15b24:	movne	ip, #1
   15b28:	mov	r9, ip
   15b2c:	b	154f4 <__assert_fail@plt+0x3b54>
   15b30:	vldr	d7, [pc, #680]	; 15de0 <__assert_fail@plt+0x4440>
   15b34:	and	r3, r6, #3
   15b38:	cmp	r3, #1
   15b3c:	vmul.f64	d9, d9, d7
   15b40:	bne	151bc <__assert_fail@plt+0x381c>
   15b44:	b	15210 <__assert_fail@plt+0x3870>
   15b48:	adds	ip, r3, #0
   15b4c:	movne	ip, #1
   15b50:	mov	r9, ip
   15b54:	b	15550 <__assert_fail@plt+0x3bb0>
   15b58:	adds	ip, r3, #0
   15b5c:	movne	ip, #1
   15b60:	mov	r9, ip
   15b64:	b	155ac <__assert_fail@plt+0x3c0c>
   15b68:	adds	ip, r3, #0
   15b6c:	movne	ip, #1
   15b70:	mov	r9, ip
   15b74:	b	15604 <__assert_fail@plt+0x3c64>
   15b78:	mov	r3, #1
   15b7c:	str	r3, [sp, #8]
   15b80:	b	15114 <__assert_fail@plt+0x3774>
   15b84:	mov	r3, #2
   15b88:	vmov.f64	d7, d6
   15b8c:	str	r3, [sp, #8]
   15b90:	b	15114 <__assert_fail@plt+0x3774>
   15b94:	mov	r3, #3
   15b98:	vmov.f64	d7, d5
   15b9c:	str	r3, [sp, #8]
   15ba0:	b	15114 <__assert_fail@plt+0x3774>
   15ba4:	cmp	r3, #9
   15ba8:	beq	15cd4 <__assert_fail@plt+0x4334>
   15bac:	add	r3, r3, #49	; 0x31
   15bb0:	uxtb	r3, r3
   15bb4:	b	1565c <__assert_fail@plt+0x3cbc>
   15bb8:	mov	r3, #4
   15bbc:	vmov.f64	d7, d6
   15bc0:	str	r3, [sp, #8]
   15bc4:	b	15114 <__assert_fail@plt+0x3774>
   15bc8:	mov	r3, #5
   15bcc:	vmov.f64	d7, d5
   15bd0:	str	r3, [sp, #8]
   15bd4:	b	15114 <__assert_fail@plt+0x3774>
   15bd8:	mov	r3, #6
   15bdc:	vmov.f64	d7, d6
   15be0:	str	r3, [sp, #8]
   15be4:	b	15114 <__assert_fail@plt+0x3774>
   15be8:	ldr	r3, [sp, #40]	; 0x28
   15bec:	and	r3, r3, #1
   15bf0:	add	r3, r3, r9
   15bf4:	cmp	r3, #2
   15bf8:	movle	r3, #0
   15bfc:	movgt	r3, #1
   15c00:	b	15634 <__assert_fail@plt+0x3c94>
   15c04:	tst	r6, #64	; 0x40
   15c08:	and	r3, r6, #256	; 0x100
   15c0c:	moveq	r2, #2
   15c10:	streq	r2, [sp, #8]
   15c14:	beq	15878 <__assert_fail@plt+0x3ed8>
   15c18:	ldr	r1, [sp, #4]
   15c1c:	mov	r2, #32
   15c20:	add	r0, r1, #648	; 0x288
   15c24:	strb	r2, [r1, #647]	; 0x287
   15c28:	mov	r2, #2
   15c2c:	str	r2, [sp, #8]
   15c30:	str	r0, [sp, #24]
   15c34:	b	15878 <__assert_fail@plt+0x3ed8>
   15c38:	tst	r6, #64	; 0x40
   15c3c:	and	r3, r6, #256	; 0x100
   15c40:	moveq	r2, #3
   15c44:	streq	r2, [sp, #8]
   15c48:	beq	15878 <__assert_fail@plt+0x3ed8>
   15c4c:	ldr	r1, [sp, #4]
   15c50:	mov	r2, #32
   15c54:	add	r0, r1, #648	; 0x288
   15c58:	strb	r2, [r1, #647]	; 0x287
   15c5c:	mov	r2, #3
   15c60:	str	r2, [sp, #8]
   15c64:	str	r0, [sp, #24]
   15c68:	b	15878 <__assert_fail@plt+0x3ed8>
   15c6c:	tst	r6, #64	; 0x40
   15c70:	and	r3, r6, #256	; 0x100
   15c74:	moveq	r2, #5
   15c78:	streq	r2, [sp, #8]
   15c7c:	beq	15878 <__assert_fail@plt+0x3ed8>
   15c80:	ldr	r1, [sp, #4]
   15c84:	mov	r2, #32
   15c88:	add	r0, r1, #648	; 0x288
   15c8c:	strb	r2, [r1, #647]	; 0x287
   15c90:	mov	r2, #5
   15c94:	str	r2, [sp, #8]
   15c98:	str	r0, [sp, #24]
   15c9c:	b	15878 <__assert_fail@plt+0x3ed8>
   15ca0:	tst	r6, #64	; 0x40
   15ca4:	and	r3, r6, #256	; 0x100
   15ca8:	moveq	r2, #6
   15cac:	streq	r2, [sp, #8]
   15cb0:	beq	15878 <__assert_fail@plt+0x3ed8>
   15cb4:	ldr	r1, [sp, #4]
   15cb8:	mov	r2, #32
   15cbc:	add	r0, r1, #648	; 0x288
   15cc0:	strb	r2, [r1, #647]	; 0x287
   15cc4:	mov	r2, #6
   15cc8:	str	r2, [sp, #8]
   15ccc:	str	r0, [sp, #24]
   15cd0:	b	15878 <__assert_fail@plt+0x3ed8>
   15cd4:	adds	r4, r4, #1
   15cd8:	adc	r5, r5, #0
   15cdc:	cmp	r5, #0
   15ce0:	cmpeq	r4, #10
   15ce4:	beq	15d4c <__assert_fail@plt+0x43ac>
   15ce8:	mov	r9, #0
   15cec:	b	15650 <__assert_fail@plt+0x3cb0>
   15cf0:	ldr	r8, [sp, #24]
   15cf4:	b	15684 <__assert_fail@plt+0x3ce4>
   15cf8:	mov	r0, #48	; 0x30
   15cfc:	mvn	r3, fp
   15d00:	ldr	r1, [sp, #36]	; 0x24
   15d04:	mov	r2, fp
   15d08:	strb	r0, [r8, #-1]
   15d0c:	add	r8, r8, r3
   15d10:	mov	r0, r8
   15d14:	bl	115d4 <memcpy@plt>
   15d18:	b	15af4 <__assert_fail@plt+0x4154>
   15d1c:	mov	r3, #1
   15d20:	str	r3, [sp, #8]
   15d24:	b	1560c <__assert_fail@plt+0x3c6c>
   15d28:	mov	r3, #3
   15d2c:	str	r3, [sp, #8]
   15d30:	b	1560c <__assert_fail@plt+0x3c6c>
   15d34:	mov	r3, #2
   15d38:	str	r3, [sp, #8]
   15d3c:	b	1560c <__assert_fail@plt+0x3c6c>
   15d40:	mov	r3, #4
   15d44:	str	r3, [sp, #8]
   15d48:	b	1560c <__assert_fail@plt+0x3c6c>
   15d4c:	mov	r9, #0
   15d50:	ldr	r8, [sp, #24]
   15d54:	b	15684 <__assert_fail@plt+0x3ce4>
   15d58:	mov	r3, #5
   15d5c:	str	r3, [sp, #8]
   15d60:	b	1560c <__assert_fail@plt+0x3c6c>
   15d64:	tst	r6, #64	; 0x40
   15d68:	and	r3, r6, #256	; 0x100
   15d6c:	moveq	r2, #4
   15d70:	streq	r2, [sp, #8]
   15d74:	beq	15878 <__assert_fail@plt+0x3ed8>
   15d78:	ldr	r1, [sp, #4]
   15d7c:	mov	r2, #32
   15d80:	add	r0, r1, #648	; 0x288
   15d84:	strb	r2, [r1, #647]	; 0x287
   15d88:	mov	r2, #4
   15d8c:	str	r2, [sp, #8]
   15d90:	str	r0, [sp, #24]
   15d94:	b	15878 <__assert_fail@plt+0x3ed8>
   15d98:	tst	r6, #64	; 0x40
   15d9c:	and	r3, r6, #256	; 0x100
   15da0:	moveq	r2, #1
   15da4:	streq	r2, [sp, #8]
   15da8:	beq	15a60 <__assert_fail@plt+0x40c0>
   15dac:	ldr	r1, [sp, #4]
   15db0:	mov	r2, #32
   15db4:	add	r0, r1, #648	; 0x288
   15db8:	strb	r2, [r1, #647]	; 0x287
   15dbc:	mov	r2, #1
   15dc0:	str	r2, [sp, #8]
   15dc4:	str	r0, [sp, #24]
   15dc8:	b	15a60 <__assert_fail@plt+0x40c0>
   15dcc:	cmp	r3, #0
   15dd0:	ldrne	r2, [sp, #24]
   15dd4:	bne	158ac <__assert_fail@plt+0x3f0c>
   15dd8:	b	152d0 <__assert_fail@plt+0x3930>
   15ddc:	nop	{0}
   15de0:	andeq	r0, r0, r0
   15de4:	eormi	r0, r4, r0
   15de8:	tst	r6, #64	; 0x40
   15dec:	and	r3, r6, #256	; 0x100
   15df0:	moveq	r2, #7
   15df4:	streq	r2, [sp, #8]
   15df8:	beq	15878 <__assert_fail@plt+0x3ed8>
   15dfc:	ldr	r1, [sp, #4]
   15e00:	mov	r2, #32
   15e04:	add	r0, r1, #648	; 0x288
   15e08:	strb	r2, [r1, #647]	; 0x287
   15e0c:	mov	r2, #7
   15e10:	str	r2, [sp, #8]
   15e14:	str	r0, [sp, #24]
   15e18:	b	15878 <__assert_fail@plt+0x3ed8>
   15e1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e20:	subs	r4, r0, #0
   15e24:	strd	r6, [sp, #8]
   15e28:	mov	r7, r1
   15e2c:	mov	r6, r2
   15e30:	strd	r8, [sp, #16]
   15e34:	strd	sl, [sp, #24]
   15e38:	str	lr, [sp, #32]
   15e3c:	sub	sp, sp, #20
   15e40:	beq	15f80 <__assert_fail@plt+0x45e0>
   15e44:	ldrb	r3, [r4]
   15e48:	cmp	r3, #39	; 0x27
   15e4c:	beq	15ec0 <__assert_fail@plt+0x4520>
   15e50:	mov	r9, #160	; 0xa0
   15e54:	mov	fp, #416	; 0x1a0
   15e58:	mov	sl, #384	; 0x180
   15e5c:	mov	r8, #0
   15e60:	movw	r5, #19404	; 0x4bcc
   15e64:	movt	r5, #3
   15e68:	add	r2, r5, #12
   15e6c:	add	r1, r5, #20
   15e70:	mov	r3, #4
   15e74:	mov	r0, r4
   15e78:	bl	32c5c <__assert_fail@plt+0x212bc>
   15e7c:	cmp	r0, #0
   15e80:	blt	15ed8 <__assert_fail@plt+0x4538>
   15e84:	add	r5, r5, r0, lsl #2
   15e88:	mov	r2, #1
   15e8c:	mov	r3, #0
   15e90:	mov	r0, #0
   15e94:	ldr	r1, [r5, #12]
   15e98:	strd	r2, [r6]
   15e9c:	orr	r8, r8, r1
   15ea0:	str	r8, [r7]
   15ea4:	add	sp, sp, #20
   15ea8:	ldrd	r4, [sp]
   15eac:	ldrd	r6, [sp, #8]
   15eb0:	ldrd	r8, [sp, #16]
   15eb4:	ldrd	sl, [sp, #24]
   15eb8:	add	sp, sp, #32
   15ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec0:	add	r4, r4, #1
   15ec4:	mov	r9, #164	; 0xa4
   15ec8:	mov	fp, #420	; 0x1a4
   15ecc:	mov	sl, #388	; 0x184
   15ed0:	mov	r8, #4
   15ed4:	b	15e60 <__assert_fail@plt+0x44c0>
   15ed8:	movw	r0, #19496	; 0x4c28
   15edc:	movt	r0, #3
   15ee0:	mov	r3, r6
   15ee4:	mov	r2, #0
   15ee8:	add	r1, sp, #12
   15eec:	str	r0, [sp]
   15ef0:	mov	r0, r4
   15ef4:	bl	1dda0 <__assert_fail@plt+0xc400>
   15ef8:	cmp	r0, #0
   15efc:	bne	15f44 <__assert_fail@plt+0x45a4>
   15f00:	ldrb	r3, [r4]
   15f04:	sub	r3, r3, #48	; 0x30
   15f08:	cmp	r3, #9
   15f0c:	bls	15f38 <__assert_fail@plt+0x4598>
   15f10:	ldr	r2, [sp, #12]
   15f14:	cmp	r4, r2
   15f18:	bne	15f28 <__assert_fail@plt+0x4588>
   15f1c:	b	15fd4 <__assert_fail@plt+0x4634>
   15f20:	cmp	r2, r4
   15f24:	beq	15fd4 <__assert_fail@plt+0x4634>
   15f28:	ldrb	r3, [r4, #1]!
   15f2c:	sub	r3, r3, #48	; 0x30
   15f30:	cmp	r3, #9
   15f34:	bhi	15f20 <__assert_fail@plt+0x4580>
   15f38:	ldrd	r2, [r6]
   15f3c:	str	r8, [r7]
   15f40:	b	15f50 <__assert_fail@plt+0x45b0>
   15f44:	mov	r1, #0
   15f48:	ldrd	r2, [r6]
   15f4c:	str	r1, [r7]
   15f50:	orrs	r3, r2, r3
   15f54:	bne	15ea4 <__assert_fail@plt+0x4504>
   15f58:	movw	r0, #19480	; 0x4c18
   15f5c:	movt	r0, #3
   15f60:	bl	116f4 <getenv@plt>
   15f64:	cmp	r0, #0
   15f68:	mov	r3, #0
   15f6c:	moveq	r2, #1024	; 0x400
   15f70:	movne	r2, #512	; 0x200
   15f74:	mov	r0, #4
   15f78:	strd	r2, [r6]
   15f7c:	b	15ea4 <__assert_fail@plt+0x4504>
   15f80:	movw	r0, #19456	; 0x4c00
   15f84:	movt	r0, #3
   15f88:	bl	116f4 <getenv@plt>
   15f8c:	subs	r4, r0, #0
   15f90:	bne	15e44 <__assert_fail@plt+0x44a4>
   15f94:	movw	r0, #19468	; 0x4c0c
   15f98:	movt	r0, #3
   15f9c:	bl	116f4 <getenv@plt>
   15fa0:	subs	r4, r0, #0
   15fa4:	bne	15e44 <__assert_fail@plt+0x44a4>
   15fa8:	movw	r0, #19480	; 0x4c18
   15fac:	movt	r0, #3
   15fb0:	bl	116f4 <getenv@plt>
   15fb4:	subs	r3, r0, #0
   15fb8:	beq	16000 <__assert_fail@plt+0x4660>
   15fbc:	mov	r2, #512	; 0x200
   15fc0:	mov	r3, #0
   15fc4:	mov	r0, r4
   15fc8:	strd	r2, [r6]
   15fcc:	str	r4, [r7]
   15fd0:	b	15ea4 <__assert_fail@plt+0x4504>
   15fd4:	ldrb	r3, [r2, #-1]
   15fd8:	cmp	r3, #66	; 0x42
   15fdc:	beq	15fe8 <__assert_fail@plt+0x4648>
   15fe0:	mov	r8, r9
   15fe4:	b	15f38 <__assert_fail@plt+0x4598>
   15fe8:	ldrb	r3, [r2, #-2]
   15fec:	cmp	r3, #105	; 0x69
   15ff0:	movne	r8, sl
   15ff4:	bne	15f38 <__assert_fail@plt+0x4598>
   15ff8:	mov	r9, fp
   15ffc:	b	15fe0 <__assert_fail@plt+0x4640>
   16000:	mov	r4, #1024	; 0x400
   16004:	mov	r5, #0
   16008:	mov	r0, r3
   1600c:	strd	r4, [r6]
   16010:	str	r3, [r7]
   16014:	b	15ea4 <__assert_fail@plt+0x4504>
   16018:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1601c:	strd	r6, [sp, #8]
   16020:	strd	r8, [sp, #16]
   16024:	strd	sl, [sp, #24]
   16028:	add	fp, sp, #32
   1602c:	str	lr, [sp, #32]
   16030:	sub	sp, sp, #20
   16034:	str	r3, [fp, #-52]	; 0xffffffcc
   16038:	str	r0, [fp, #-40]	; 0xffffffd8
   1603c:	mov	r0, r2
   16040:	str	r2, [fp, #-48]	; 0xffffffd0
   16044:	lsrs	r2, r0, #30
   16048:	movne	r2, #1
   1604c:	moveq	r2, #0
   16050:	lsls	r0, r0, #2
   16054:	bmi	161f4 <__assert_fail@plt+0x4854>
   16058:	cmp	r2, #0
   1605c:	bne	161f4 <__assert_fail@plt+0x4854>
   16060:	cmp	r0, #4016	; 0xfb0
   16064:	mov	r6, r1
   16068:	bhi	161e4 <__assert_fail@plt+0x4844>
   1606c:	add	r3, r0, #22
   16070:	bic	r3, r3, #7
   16074:	sub	sp, sp, r3
   16078:	add	r2, sp, #15
   1607c:	bic	r9, r2, #15
   16080:	cmp	r9, #0
   16084:	beq	161f4 <__assert_fail@plt+0x4854>
   16088:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1608c:	mov	r3, #1
   16090:	str	r3, [r9, #4]
   16094:	cmp	r2, #2
   16098:	bls	16138 <__assert_fail@plt+0x4798>
   1609c:	bl	11778 <__ctype_b_loc@plt>
   160a0:	ldr	r8, [r0]
   160a4:	mov	r4, #0
   160a8:	mov	r7, #2
   160ac:	str	r6, [fp, #-44]	; 0xffffffd4
   160b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   160b4:	ldrb	sl, [r3, #1]!
   160b8:	sxth	r5, sl
   160bc:	str	r3, [fp, #-44]	; 0xffffffd4
   160c0:	lsl	r0, r5, #1
   160c4:	ldrh	r0, [r8, r0]
   160c8:	tst	r0, #256	; 0x100
   160cc:	beq	160f0 <__assert_fail@plt+0x4750>
   160d0:	bl	11748 <__ctype_tolower_loc@plt>
   160d4:	ldr	r3, [r0]
   160d8:	ldrb	sl, [r3, r5, lsl #2]
   160dc:	b	160f0 <__assert_fail@plt+0x4750>
   160e0:	cmp	r4, #0
   160e4:	beq	16260 <__assert_fail@plt+0x48c0>
   160e8:	ldr	r0, [r9, r4, lsl #2]
   160ec:	sub	r4, r4, r0
   160f0:	ldrb	r0, [r6, r4]
   160f4:	sxth	r5, r0
   160f8:	lsl	ip, r5, #1
   160fc:	ldrh	ip, [r8, ip]
   16100:	tst	ip, #256	; 0x100
   16104:	beq	16114 <__assert_fail@plt+0x4774>
   16108:	bl	11748 <__ctype_tolower_loc@plt>
   1610c:	ldr	r0, [r0]
   16110:	ldr	r0, [r0, r5, lsl #2]
   16114:	cmp	r0, sl
   16118:	bne	160e0 <__assert_fail@plt+0x4740>
   1611c:	add	r4, r4, #1
   16120:	sub	r3, r7, r4
   16124:	str	r3, [r9, r7, lsl #2]
   16128:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1612c:	add	r7, r7, #1
   16130:	cmp	r7, r3
   16134:	bne	160b0 <__assert_fail@plt+0x4710>
   16138:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1613c:	mov	r5, #0
   16140:	str	r5, [r3]
   16144:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16148:	ldrb	r7, [r3]
   1614c:	cmp	r7, r5
   16150:	beq	16220 <__assert_fail@plt+0x4880>
   16154:	mov	r8, r3
   16158:	bl	11778 <__ctype_b_loc@plt>
   1615c:	ldr	r3, [r0]
   16160:	sxth	sl, r7
   16164:	ldrb	r0, [r6, r5]
   16168:	sxth	r4, r0
   1616c:	lsl	ip, r4, #1
   16170:	ldrh	ip, [r3, ip]
   16174:	tst	ip, #256	; 0x100
   16178:	moveq	r4, r0
   1617c:	beq	16194 <__assert_fail@plt+0x47f4>
   16180:	str	r3, [fp, #-44]	; 0xffffffd4
   16184:	bl	11748 <__ctype_tolower_loc@plt>
   16188:	ldr	r0, [r0]
   1618c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16190:	ldr	r4, [r0, r4, lsl #2]
   16194:	lsl	r0, sl, #1
   16198:	ldrh	r0, [r3, r0]
   1619c:	tst	r0, #256	; 0x100
   161a0:	moveq	r0, r7
   161a4:	beq	161bc <__assert_fail@plt+0x481c>
   161a8:	str	r3, [fp, #-44]	; 0xffffffd4
   161ac:	bl	11748 <__ctype_tolower_loc@plt>
   161b0:	ldr	r0, [r0]
   161b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   161b8:	ldr	r0, [r0, sl, lsl #2]
   161bc:	cmp	r0, r4
   161c0:	beq	161fc <__assert_fail@plt+0x485c>
   161c4:	cmp	r5, #0
   161c8:	beq	16248 <__assert_fail@plt+0x48a8>
   161cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   161d0:	ldr	r0, [r9, r5, lsl #2]
   161d4:	add	r2, r2, r0
   161d8:	sub	r5, r5, r0
   161dc:	str	r2, [fp, #-40]	; 0xffffffd8
   161e0:	b	16164 <__assert_fail@plt+0x47c4>
   161e4:	bl	33284 <__assert_fail@plt+0x218e4>
   161e8:	mov	r9, r0
   161ec:	cmp	r9, #0
   161f0:	bne	16088 <__assert_fail@plt+0x46e8>
   161f4:	mov	r0, #0
   161f8:	b	1622c <__assert_fail@plt+0x488c>
   161fc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16200:	add	r5, r5, #1
   16204:	add	r0, r8, #1
   16208:	cmp	r2, r5
   1620c:	beq	16268 <__assert_fail@plt+0x48c8>
   16210:	ldrb	r7, [r8, #1]
   16214:	mov	r8, r0
   16218:	cmp	r7, #0
   1621c:	bne	16160 <__assert_fail@plt+0x47c0>
   16220:	mov	r0, r9
   16224:	bl	332dc <__assert_fail@plt+0x2193c>
   16228:	mov	r0, #1
   1622c:	sub	sp, fp, #32
   16230:	ldrd	r4, [sp]
   16234:	ldrd	r6, [sp, #8]
   16238:	ldrd	r8, [sp, #16]
   1623c:	ldrd	sl, [sp, #24]
   16240:	add	sp, sp, #32
   16244:	pop	{pc}		; (ldr pc, [sp], #4)
   16248:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1624c:	add	r8, r8, #1
   16250:	ldrb	r7, [r8]
   16254:	add	r2, r2, #1
   16258:	str	r2, [fp, #-40]	; 0xffffffd8
   1625c:	b	16218 <__assert_fail@plt+0x4878>
   16260:	str	r7, [r9, r7, lsl #2]
   16264:	b	16128 <__assert_fail@plt+0x4788>
   16268:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1626c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16270:	str	r2, [r3]
   16274:	b	16220 <__assert_fail@plt+0x4880>
   16278:	movw	r3, #19536	; 0x4c50
   1627c:	movt	r3, #3
   16280:	str	r4, [sp, #-8]!
   16284:	movw	r1, #19556	; 0x4c64
   16288:	movt	r1, #3
   1628c:	str	lr, [sp, #4]
   16290:	movw	r0, #19568	; 0x4c70
   16294:	movt	r0, #3
   16298:	mov	r2, #172	; 0xac
   1629c:	bl	119a0 <__assert_fail@plt>
   162a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   162a4:	mov	r4, r1
   162a8:	strd	r6, [sp, #8]
   162ac:	strd	r8, [sp, #16]
   162b0:	strd	sl, [sp, #24]
   162b4:	add	fp, sp, #32
   162b8:	str	lr, [sp, #32]
   162bc:	sub	sp, sp, #236	; 0xec
   162c0:	str	r2, [fp, #-260]	; 0xfffffefc
   162c4:	str	r0, [fp, #-256]	; 0xffffff00
   162c8:	mov	r0, r1
   162cc:	bl	17aec <__assert_fail@plt+0x614c>
   162d0:	mov	r3, #44	; 0x2c
   162d4:	str	r0, [fp, #-252]	; 0xffffff04
   162d8:	umull	r0, r1, r0, r3
   162dc:	adds	r2, r1, #0
   162e0:	movne	r2, #1
   162e4:	cmp	r0, #0
   162e8:	blt	1665c <__assert_fail@plt+0x4cbc>
   162ec:	cmp	r2, #0
   162f0:	bne	1665c <__assert_fail@plt+0x4cbc>
   162f4:	ldr	r2, [fp, #-252]	; 0xffffff04
   162f8:	mul	r0, r3, r2
   162fc:	cmp	r0, #4016	; 0xfb0
   16300:	bhi	1667c <__assert_fail@plt+0x4cdc>
   16304:	add	r3, r0, #22
   16308:	bic	r3, r3, #7
   1630c:	sub	sp, sp, r3
   16310:	add	r3, sp, #15
   16314:	bic	r3, r3, #15
   16318:	mov	r2, r3
   1631c:	str	r3, [fp, #-248]	; 0xffffff08
   16320:	cmp	r2, #0
   16324:	beq	1665c <__assert_fail@plt+0x4cbc>
   16328:	ldr	r3, [fp, #-252]	; 0xffffff04
   1632c:	mov	r0, #0
   16330:	mov	r1, #0
   16334:	movw	sl, #21632	; 0x5480
   16338:	movt	sl, #3
   1633c:	add	r5, r2, #16
   16340:	strd	r0, [fp, #-200]	; 0xffffff38
   16344:	str	r4, [fp, #-188]	; 0xffffff44
   16348:	add	r8, r3, r3, lsl #2
   1634c:	mov	r3, #0
   16350:	mov	r6, r3
   16354:	add	r8, r2, r8, lsl #3
   16358:	strb	r3, [fp, #-204]	; 0xffffff34
   1635c:	strb	r3, [fp, #-192]	; 0xffffff40
   16360:	b	163f4 <__assert_fail@plt+0x4a54>
   16364:	ldrb	r3, [r4]
   16368:	lsr	r2, r3, #5
   1636c:	and	r3, r3, #31
   16370:	ldr	r2, [sl, r2, lsl #2]
   16374:	lsr	r3, r2, r3
   16378:	tst	r3, #1
   1637c:	beq	1668c <__assert_fail@plt+0x4cec>
   16380:	mov	r3, #1
   16384:	str	r3, [fp, #-184]	; 0xffffff48
   16388:	ldrb	r2, [r4]
   1638c:	strb	r3, [fp, #-192]	; 0xffffff40
   16390:	strb	r3, [fp, #-180]	; 0xffffff4c
   16394:	mov	r4, r2
   16398:	str	r2, [fp, #-176]	; 0xffffff50
   1639c:	cmp	r4, #0
   163a0:	beq	1646c <__assert_fail@plt+0x4acc>
   163a4:	mov	r9, #1
   163a8:	ldr	r4, [fp, #-188]	; 0xffffff44
   163ac:	sub	r3, fp, #172	; 0xac
   163b0:	ldr	r7, [fp, #-184]	; 0xffffff48
   163b4:	cmp	r4, r3
   163b8:	strne	r4, [r5, #-16]
   163bc:	beq	166ac <__assert_fail@plt+0x4d0c>
   163c0:	cmp	r9, #0
   163c4:	str	r7, [r5, #-12]
   163c8:	strb	r9, [r5, #-8]
   163cc:	beq	163e4 <__assert_fail@plt+0x4a44>
   163d0:	ldr	r3, [fp, #-176]	; 0xffffff50
   163d4:	mov	r0, r3
   163d8:	str	r3, [r5, #-4]
   163dc:	bl	115f8 <towlower@plt>
   163e0:	str	r0, [r5, #-4]
   163e4:	add	r4, r4, r7
   163e8:	add	r5, r5, #40	; 0x28
   163ec:	strb	r6, [fp, #-192]	; 0xffffff40
   163f0:	str	r4, [fp, #-188]	; 0xffffff44
   163f4:	ldrb	r3, [fp, #-204]	; 0xffffff34
   163f8:	cmp	r3, #0
   163fc:	subne	r7, fp, #200	; 0xc8
   16400:	beq	16364 <__assert_fail@plt+0x49c4>
   16404:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16408:	mov	r1, r0
   1640c:	mov	r0, r4
   16410:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   16414:	mov	r2, r0
   16418:	mov	r3, r7
   1641c:	mov	r1, r4
   16420:	sub	r0, fp, #176	; 0xb0
   16424:	bl	1f100 <__assert_fail@plt+0xd760>
   16428:	cmn	r0, #1
   1642c:	str	r0, [fp, #-184]	; 0xffffff48
   16430:	beq	166c4 <__assert_fail@plt+0x4d24>
   16434:	cmn	r0, #2
   16438:	beq	166dc <__assert_fail@plt+0x4d3c>
   1643c:	cmp	r0, #0
   16440:	beq	166fc <__assert_fail@plt+0x4d5c>
   16444:	ldr	r4, [fp, #-176]	; 0xffffff50
   16448:	mov	r9, #1
   1644c:	mov	r0, r7
   16450:	strb	r9, [fp, #-180]	; 0xffffff4c
   16454:	bl	11604 <mbsinit@plt>
   16458:	cmp	r0, #0
   1645c:	strb	r9, [fp, #-192]	; 0xffffff40
   16460:	strbne	r6, [fp, #-204]	; 0xffffff34
   16464:	cmp	r4, #0
   16468:	bne	163a4 <__assert_fail@plt+0x4a04>
   1646c:	ldr	r2, [fp, #-252]	; 0xffffff04
   16470:	mov	r3, #1
   16474:	mov	r7, r4
   16478:	str	r3, [r8, #4]
   1647c:	cmp	r2, #2
   16480:	bls	1650c <__assert_fail@plt+0x4b6c>
   16484:	ldr	r6, [fp, #-248]	; 0xffffff08
   16488:	mov	sl, r2
   1648c:	mov	r9, #2
   16490:	str	r4, [fp, #-264]	; 0xfffffef8
   16494:	mov	r5, r6
   16498:	ldrb	r3, [r5, #48]	; 0x30
   1649c:	cmp	r3, #0
   164a0:	bne	16744 <__assert_fail@plt+0x4da4>
   164a4:	ldr	r7, [r5, #44]	; 0x2c
   164a8:	b	164bc <__assert_fail@plt+0x4b1c>
   164ac:	cmp	r4, #0
   164b0:	beq	164f0 <__assert_fail@plt+0x4b50>
   164b4:	ldr	r3, [r8, r4, lsl #2]
   164b8:	sub	r4, r4, r3
   164bc:	add	r3, r4, r4, lsl #2
   164c0:	add	r2, r6, r3, lsl #3
   164c4:	ldr	r2, [r2, #4]
   164c8:	cmp	r7, r2
   164cc:	bne	164ac <__assert_fail@plt+0x4b0c>
   164d0:	mov	r2, r7
   164d4:	ldr	r1, [r6, r3, lsl #3]
   164d8:	ldr	r0, [r5, #40]	; 0x28
   164dc:	bl	1161c <memcmp@plt>
   164e0:	cmp	r0, #0
   164e4:	beq	1677c <__assert_fail@plt+0x4ddc>
   164e8:	cmp	r4, #0
   164ec:	bne	164b4 <__assert_fail@plt+0x4b14>
   164f0:	str	r9, [r8, r9, lsl #2]
   164f4:	add	r9, r9, #1
   164f8:	mov	r4, #0
   164fc:	cmp	sl, r9
   16500:	add	r5, r5, #40	; 0x28
   16504:	bne	16498 <__assert_fail@plt+0x4af8>
   16508:	ldr	r7, [fp, #-264]	; 0xfffffef8
   1650c:	mov	r1, #0
   16510:	mov	r0, #0
   16514:	ldr	ip, [fp, #-256]	; 0xffffff00
   16518:	mov	r2, #0
   1651c:	movw	r9, #21632	; 0x5480
   16520:	movt	r9, #3
   16524:	mov	r3, r2
   16528:	str	r8, [fp, #-256]	; 0xffffff00
   1652c:	strd	r0, [fp, #-144]	; 0xffffff70
   16530:	mov	r6, r2
   16534:	strd	r0, [fp, #-88]	; 0xffffffa8
   16538:	ldr	r1, [fp, #-260]	; 0xfffffefc
   1653c:	strb	r2, [fp, #-148]	; 0xffffff6c
   16540:	strb	r2, [fp, #-136]	; 0xffffff78
   16544:	str	ip, [fp, #-132]	; 0xffffff7c
   16548:	strb	r2, [fp, #-92]	; 0xffffffa4
   1654c:	strb	r2, [fp, #-80]	; 0xffffffb0
   16550:	str	ip, [fp, #-76]	; 0xffffffb4
   16554:	str	r2, [r1]
   16558:	cmp	r3, #0
   1655c:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   16560:	beq	165f8 <__assert_fail@plt+0x4c58>
   16564:	ldrb	sl, [fp, #-68]	; 0xffffffbc
   16568:	cmp	sl, #0
   1656c:	beq	16580 <__assert_fail@plt+0x4be0>
   16570:	ldr	r5, [fp, #-64]	; 0xffffffc0
   16574:	cmp	r5, #0
   16578:	mov	sl, #1
   1657c:	beq	1664c <__assert_fail@plt+0x4cac>
   16580:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   16584:	sub	r3, fp, #60	; 0x3c
   16588:	cmp	r4, r3
   1658c:	movne	r8, r4
   16590:	strne	r4, [fp, #-244]	; 0xffffff0c
   16594:	beq	16a8c <__assert_fail@plt+0x50ec>
   16598:	add	r3, r7, r7, lsl #2
   1659c:	cmp	sl, #0
   165a0:	str	r5, [fp, #-240]	; 0xffffff10
   165a4:	strb	sl, [fp, #-236]	; 0xffffff14
   165a8:	mov	sl, r3
   165ac:	ldr	r3, [fp, #-248]	; 0xffffff08
   165b0:	add	sl, r3, sl, lsl #3
   165b4:	beq	1679c <__assert_fail@plt+0x4dfc>
   165b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   165bc:	bl	115f8 <towlower@plt>
   165c0:	ldrb	r3, [sl, #8]
   165c4:	str	r0, [fp, #-232]	; 0xffffff18
   165c8:	cmp	r3, #0
   165cc:	beq	1679c <__assert_fail@plt+0x4dfc>
   165d0:	ldr	r3, [sl, #12]
   165d4:	cmp	r0, r3
   165d8:	bne	167a8 <__assert_fail@plt+0x4e08>
   165dc:	ldr	r3, [fp, #-252]	; 0xffffff04
   165e0:	add	r7, r7, #1
   165e4:	add	r5, r4, r5
   165e8:	strb	r6, [fp, #-80]	; 0xffffffb0
   165ec:	str	r5, [fp, #-76]	; 0xffffffb4
   165f0:	cmp	r3, r7
   165f4:	beq	16bfc <__assert_fail@plt+0x525c>
   165f8:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   165fc:	cmp	r3, #0
   16600:	subne	r4, fp, #88	; 0x58
   16604:	bne	16848 <__assert_fail@plt+0x4ea8>
   16608:	ldrb	r3, [r5]
   1660c:	lsr	r2, r3, #5
   16610:	and	r3, r3, #31
   16614:	ldr	r2, [r9, r2, lsl #2]
   16618:	lsr	r3, r2, r3
   1661c:	tst	r3, #1
   16620:	beq	168c8 <__assert_fail@plt+0x4f28>
   16624:	mov	r3, #1
   16628:	mov	sl, #1
   1662c:	str	r3, [fp, #-72]	; 0xffffffb8
   16630:	ldrb	r2, [r5]
   16634:	strb	r3, [fp, #-80]	; 0xffffffb0
   16638:	strb	r3, [fp, #-68]	; 0xffffffbc
   1663c:	mov	r5, r2
   16640:	str	r2, [fp, #-64]	; 0xffffffc0
   16644:	cmp	r5, #0
   16648:	bne	16580 <__assert_fail@plt+0x4be0>
   1664c:	ldr	r0, [fp, #-248]	; 0xffffff08
   16650:	bl	332dc <__assert_fail@plt+0x2193c>
   16654:	mov	r0, #1
   16658:	b	16660 <__assert_fail@plt+0x4cc0>
   1665c:	mov	r0, #0
   16660:	sub	sp, fp, #32
   16664:	ldrd	r4, [sp]
   16668:	ldrd	r6, [sp, #8]
   1666c:	ldrd	r8, [sp, #16]
   16670:	ldrd	sl, [sp, #24]
   16674:	add	sp, sp, #32
   16678:	pop	{pc}		; (ldr pc, [sp], #4)
   1667c:	bl	33284 <__assert_fail@plt+0x218e4>
   16680:	mov	r2, r0
   16684:	str	r0, [fp, #-248]	; 0xffffff08
   16688:	b	16320 <__assert_fail@plt+0x4980>
   1668c:	sub	r7, fp, #200	; 0xc8
   16690:	mov	r0, r7
   16694:	bl	11604 <mbsinit@plt>
   16698:	cmp	r0, #0
   1669c:	beq	16c38 <__assert_fail@plt+0x5298>
   166a0:	mov	r3, #1
   166a4:	strb	r3, [fp, #-204]	; 0xffffff34
   166a8:	b	16404 <__assert_fail@plt+0x4a64>
   166ac:	mov	r2, r7
   166b0:	mov	r1, r4
   166b4:	mov	r0, r5
   166b8:	bl	115d4 <memcpy@plt>
   166bc:	str	r5, [r5, #-16]
   166c0:	b	163c0 <__assert_fail@plt+0x4a20>
   166c4:	mov	r3, #1
   166c8:	mov	r9, #0
   166cc:	strb	r3, [fp, #-192]	; 0xffffff40
   166d0:	str	r3, [fp, #-184]	; 0xffffff48
   166d4:	strb	r6, [fp, #-180]	; 0xffffff4c
   166d8:	b	163a8 <__assert_fail@plt+0x4a08>
   166dc:	ldr	r0, [fp, #-188]	; 0xffffff44
   166e0:	mov	r9, #0
   166e4:	bl	117a8 <strlen@plt>
   166e8:	mov	r3, #1
   166ec:	strb	r3, [fp, #-192]	; 0xffffff40
   166f0:	str	r0, [fp, #-184]	; 0xffffff48
   166f4:	strb	r6, [fp, #-180]	; 0xffffff4c
   166f8:	b	163a8 <__assert_fail@plt+0x4a08>
   166fc:	ldr	r3, [fp, #-188]	; 0xffffff44
   16700:	mov	r2, #1
   16704:	str	r2, [fp, #-184]	; 0xffffff48
   16708:	ldrb	r3, [r3]
   1670c:	cmp	r3, #0
   16710:	bne	16c18 <__assert_fail@plt+0x5278>
   16714:	ldr	r4, [fp, #-176]	; 0xffffff50
   16718:	cmp	r4, #0
   1671c:	beq	16448 <__assert_fail@plt+0x4aa8>
   16720:	bl	16278 <__assert_fail@plt+0x48d8>
   16724:	ldr	r3, [r3, #12]
   16728:	ldr	r2, [r5, #52]	; 0x34
   1672c:	cmp	r2, r3
   16730:	beq	1677c <__assert_fail@plt+0x4ddc>
   16734:	cmp	r4, #0
   16738:	beq	164f0 <__assert_fail@plt+0x4b50>
   1673c:	ldr	r3, [r8, r4, lsl #2]
   16740:	sub	r4, r4, r3
   16744:	add	r3, r4, r4, lsl #2
   16748:	add	r3, r6, r3, lsl #3
   1674c:	ldrb	r2, [r3, #8]
   16750:	cmp	r2, #0
   16754:	bne	16724 <__assert_fail@plt+0x4d84>
   16758:	ldr	r1, [r3, #4]
   1675c:	ldr	r2, [r5, #44]	; 0x2c
   16760:	cmp	r2, r1
   16764:	bne	16734 <__assert_fail@plt+0x4d94>
   16768:	ldr	r1, [r3]
   1676c:	ldr	r0, [r5, #40]	; 0x28
   16770:	bl	1161c <memcmp@plt>
   16774:	cmp	r0, #0
   16778:	bne	16734 <__assert_fail@plt+0x4d94>
   1677c:	add	r4, r4, #1
   16780:	add	r5, r5, #40	; 0x28
   16784:	sub	r3, r9, r4
   16788:	str	r3, [r8, r9, lsl #2]
   1678c:	add	r9, r9, #1
   16790:	cmp	sl, r9
   16794:	bne	16498 <__assert_fail@plt+0x4af8>
   16798:	b	16508 <__assert_fail@plt+0x4b68>
   1679c:	ldr	r3, [sl, #4]
   167a0:	cmp	r3, r5
   167a4:	beq	168ac <__assert_fail@plt+0x4f0c>
   167a8:	cmp	r7, #0
   167ac:	bne	168e8 <__assert_fail@plt+0x4f48>
   167b0:	ldrb	r3, [fp, #-136]	; 0xffffff78
   167b4:	cmp	r3, #0
   167b8:	bne	16b8c <__assert_fail@plt+0x51ec>
   167bc:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   167c0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   167c4:	cmp	r3, #0
   167c8:	subne	sl, fp, #144	; 0x90
   167cc:	bne	16ae0 <__assert_fail@plt+0x5140>
   167d0:	ldrb	r3, [r4]
   167d4:	lsr	r2, r3, #5
   167d8:	and	r3, r3, #31
   167dc:	ldr	r2, [r9, r2, lsl #2]
   167e0:	lsr	r3, r2, r3
   167e4:	tst	r3, #1
   167e8:	beq	16ac4 <__assert_fail@plt+0x5124>
   167ec:	mov	r3, #1
   167f0:	str	r3, [fp, #-128]	; 0xffffff80
   167f4:	ldrb	r2, [r4]
   167f8:	strb	r3, [fp, #-136]	; 0xffffff78
   167fc:	strb	r3, [fp, #-124]	; 0xffffff84
   16800:	mov	r4, r2
   16804:	str	r2, [fp, #-120]	; 0xffffff88
   16808:	cmp	r4, #0
   1680c:	beq	16984 <__assert_fail@plt+0x4fe4>
   16810:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16814:	strb	r6, [fp, #-136]	; 0xffffff78
   16818:	ldr	r2, [fp, #-128]	; 0xffffff80
   1681c:	strb	r6, [fp, #-80]	; 0xffffffb0
   16820:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16824:	ldr	r3, [fp, #-72]	; 0xffffffb8
   16828:	add	r4, r4, r2
   1682c:	str	r4, [fp, #-132]	; 0xffffff7c
   16830:	add	r5, r5, r3
   16834:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   16838:	str	r5, [fp, #-76]	; 0xffffffb4
   1683c:	cmp	r3, #0
   16840:	subne	r4, fp, #88	; 0x58
   16844:	beq	16608 <__assert_fail@plt+0x4c68>
   16848:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1684c:	mov	r1, r0
   16850:	mov	r0, r5
   16854:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   16858:	mov	r2, r0
   1685c:	mov	r3, r4
   16860:	mov	r1, r5
   16864:	sub	r0, fp, #64	; 0x40
   16868:	bl	1f100 <__assert_fail@plt+0xd760>
   1686c:	cmn	r0, #1
   16870:	str	r0, [fp, #-72]	; 0xffffffb8
   16874:	beq	16aac <__assert_fail@plt+0x510c>
   16878:	cmn	r0, #2
   1687c:	beq	16b44 <__assert_fail@plt+0x51a4>
   16880:	cmp	r0, #0
   16884:	beq	16b64 <__assert_fail@plt+0x51c4>
   16888:	ldr	r5, [fp, #-64]	; 0xffffffc0
   1688c:	mov	sl, #1
   16890:	mov	r0, r4
   16894:	strb	sl, [fp, #-68]	; 0xffffffbc
   16898:	bl	11604 <mbsinit@plt>
   1689c:	cmp	r0, #0
   168a0:	strb	sl, [fp, #-80]	; 0xffffffb0
   168a4:	strbne	r6, [fp, #-92]	; 0xffffffa4
   168a8:	b	16574 <__assert_fail@plt+0x4bd4>
   168ac:	mov	r1, r8
   168b0:	mov	r2, r5
   168b4:	ldr	r0, [sl]
   168b8:	bl	1161c <memcmp@plt>
   168bc:	cmp	r0, #0
   168c0:	bne	167a8 <__assert_fail@plt+0x4e08>
   168c4:	b	165dc <__assert_fail@plt+0x4c3c>
   168c8:	sub	r4, fp, #88	; 0x58
   168cc:	mov	r0, r4
   168d0:	bl	11604 <mbsinit@plt>
   168d4:	cmp	r0, #0
   168d8:	beq	16c38 <__assert_fail@plt+0x5298>
   168dc:	mov	r3, #1
   168e0:	strb	r3, [fp, #-92]	; 0xffffffa4
   168e4:	b	16848 <__assert_fail@plt+0x4ea8>
   168e8:	ldr	r3, [fp, #-256]	; 0xffffff00
   168ec:	ldr	r5, [r3, r7, lsl #2]
   168f0:	sub	r3, r7, r5
   168f4:	cmp	r5, #0
   168f8:	mov	r8, r3
   168fc:	beq	16a84 <__assert_fail@plt+0x50e4>
   16900:	ldrb	r3, [fp, #-136]	; 0xffffff78
   16904:	cmp	r3, #0
   16908:	beq	16ba0 <__assert_fail@plt+0x5200>
   1690c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16910:	cmp	r3, #0
   16914:	bne	16a78 <__assert_fail@plt+0x50d8>
   16918:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1691c:	subs	r5, r5, #1
   16920:	strb	r6, [fp, #-136]	; 0xffffff78
   16924:	ldr	r3, [fp, #-128]	; 0xffffff80
   16928:	add	r4, r4, r3
   1692c:	str	r4, [fp, #-132]	; 0xffffff7c
   16930:	beq	16a80 <__assert_fail@plt+0x50e0>
   16934:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   16938:	cmp	r3, #0
   1693c:	subne	sl, fp, #144	; 0x90
   16940:	bne	169a4 <__assert_fail@plt+0x5004>
   16944:	ldrb	r3, [r4]
   16948:	lsr	r2, r3, #5
   1694c:	and	r3, r3, #31
   16950:	ldr	r2, [r9, r2, lsl #2]
   16954:	lsr	r3, r2, r3
   16958:	tst	r3, #1
   1695c:	beq	16988 <__assert_fail@plt+0x4fe8>
   16960:	mov	r3, #1
   16964:	str	r3, [fp, #-128]	; 0xffffff80
   16968:	ldrb	r2, [r4]
   1696c:	strb	r3, [fp, #-136]	; 0xffffff78
   16970:	strb	r3, [fp, #-124]	; 0xffffff84
   16974:	mov	r4, r2
   16978:	str	r2, [fp, #-120]	; 0xffffff88
   1697c:	cmp	r4, #0
   16980:	bne	16918 <__assert_fail@plt+0x4f78>
   16984:	bl	11964 <abort@plt>
   16988:	sub	sl, fp, #144	; 0x90
   1698c:	mov	r0, sl
   16990:	bl	11604 <mbsinit@plt>
   16994:	cmp	r0, #0
   16998:	beq	16c38 <__assert_fail@plt+0x5298>
   1699c:	mov	r3, #1
   169a0:	strb	r3, [fp, #-148]	; 0xffffff6c
   169a4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   169a8:	mov	r1, r0
   169ac:	mov	r0, r4
   169b0:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   169b4:	mov	r2, r0
   169b8:	mov	r3, sl
   169bc:	mov	r1, r4
   169c0:	sub	r0, fp, #120	; 0x78
   169c4:	bl	1f100 <__assert_fail@plt+0xd760>
   169c8:	cmn	r0, #1
   169cc:	str	r0, [fp, #-128]	; 0xffffff80
   169d0:	beq	16a08 <__assert_fail@plt+0x5068>
   169d4:	cmn	r0, #2
   169d8:	beq	16a1c <__assert_fail@plt+0x507c>
   169dc:	cmp	r0, #0
   169e0:	beq	16a34 <__assert_fail@plt+0x5094>
   169e4:	ldr	r4, [fp, #-120]	; 0xffffff88
   169e8:	mov	r7, #1
   169ec:	mov	r0, sl
   169f0:	strb	r7, [fp, #-124]	; 0xffffff84
   169f4:	bl	11604 <mbsinit@plt>
   169f8:	cmp	r0, #0
   169fc:	strb	r7, [fp, #-136]	; 0xffffff78
   16a00:	strbne	r6, [fp, #-148]	; 0xffffff6c
   16a04:	b	1697c <__assert_fail@plt+0x4fdc>
   16a08:	mov	r3, #1
   16a0c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16a10:	str	r3, [fp, #-128]	; 0xffffff80
   16a14:	strb	r6, [fp, #-124]	; 0xffffff84
   16a18:	b	1691c <__assert_fail@plt+0x4f7c>
   16a1c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16a20:	mov	r0, r4
   16a24:	bl	117a8 <strlen@plt>
   16a28:	str	r0, [fp, #-128]	; 0xffffff80
   16a2c:	strb	r6, [fp, #-124]	; 0xffffff84
   16a30:	b	1691c <__assert_fail@plt+0x4f7c>
   16a34:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16a38:	mov	r3, #1
   16a3c:	str	r3, [fp, #-128]	; 0xffffff80
   16a40:	ldrb	r3, [r4]
   16a44:	cmp	r3, #0
   16a48:	bne	16c18 <__assert_fail@plt+0x5278>
   16a4c:	ldr	r4, [fp, #-120]	; 0xffffff88
   16a50:	cmp	r4, #0
   16a54:	beq	169e8 <__assert_fail@plt+0x5048>
   16a58:	movw	r3, #19536	; 0x4c50
   16a5c:	movt	r3, #3
   16a60:	movw	r1, #19556	; 0x4c64
   16a64:	movt	r1, #3
   16a68:	movw	r0, #19568	; 0x4c70
   16a6c:	movt	r0, #3
   16a70:	mov	r2, #172	; 0xac
   16a74:	bl	119a0 <__assert_fail@plt>
   16a78:	ldr	r4, [fp, #-120]	; 0xffffff88
   16a7c:	b	1697c <__assert_fail@plt+0x4fdc>
   16a80:	mov	r7, r8
   16a84:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   16a88:	b	16558 <__assert_fail@plt+0x4bb8>
   16a8c:	sub	r3, fp, #228	; 0xe4
   16a90:	mov	r2, r5
   16a94:	mov	r0, r3
   16a98:	mov	r1, r4
   16a9c:	bl	115d4 <memcpy@plt>
   16aa0:	mov	r8, r0
   16aa4:	str	r0, [fp, #-244]	; 0xffffff0c
   16aa8:	b	16598 <__assert_fail@plt+0x4bf8>
   16aac:	mov	r3, #1
   16ab0:	mov	sl, #0
   16ab4:	strb	r3, [fp, #-80]	; 0xffffffb0
   16ab8:	str	r3, [fp, #-72]	; 0xffffffb8
   16abc:	strb	r6, [fp, #-68]	; 0xffffffbc
   16ac0:	b	16580 <__assert_fail@plt+0x4be0>
   16ac4:	sub	sl, fp, #144	; 0x90
   16ac8:	mov	r0, sl
   16acc:	bl	11604 <mbsinit@plt>
   16ad0:	cmp	r0, #0
   16ad4:	beq	16c38 <__assert_fail@plt+0x5298>
   16ad8:	mov	r3, #1
   16adc:	strb	r3, [fp, #-148]	; 0xffffff6c
   16ae0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16ae4:	mov	r1, r0
   16ae8:	mov	r0, r4
   16aec:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   16af0:	mov	r2, r0
   16af4:	mov	r3, sl
   16af8:	mov	r1, r4
   16afc:	sub	r0, fp, #120	; 0x78
   16b00:	bl	1f100 <__assert_fail@plt+0xd760>
   16b04:	cmn	r0, #1
   16b08:	str	r0, [fp, #-128]	; 0xffffff80
   16b0c:	beq	16ba8 <__assert_fail@plt+0x5208>
   16b10:	cmn	r0, #2
   16b14:	beq	16bbc <__assert_fail@plt+0x521c>
   16b18:	cmp	r0, #0
   16b1c:	beq	16bd4 <__assert_fail@plt+0x5234>
   16b20:	ldr	r4, [fp, #-120]	; 0xffffff88
   16b24:	mov	r5, #1
   16b28:	mov	r0, sl
   16b2c:	strb	r5, [fp, #-124]	; 0xffffff84
   16b30:	bl	11604 <mbsinit@plt>
   16b34:	cmp	r0, #0
   16b38:	strb	r5, [fp, #-136]	; 0xffffff78
   16b3c:	strbne	r6, [fp, #-148]	; 0xffffff6c
   16b40:	b	16808 <__assert_fail@plt+0x4e68>
   16b44:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16b48:	mov	sl, #0
   16b4c:	bl	117a8 <strlen@plt>
   16b50:	mov	r3, #1
   16b54:	strb	r3, [fp, #-80]	; 0xffffffb0
   16b58:	str	r0, [fp, #-72]	; 0xffffffb8
   16b5c:	strb	r6, [fp, #-68]	; 0xffffffbc
   16b60:	b	16580 <__assert_fail@plt+0x4be0>
   16b64:	ldr	r5, [fp, #-76]	; 0xffffffb4
   16b68:	mov	r3, #1
   16b6c:	str	r3, [fp, #-72]	; 0xffffffb8
   16b70:	ldrb	r3, [r5]
   16b74:	cmp	r3, #0
   16b78:	bne	16c18 <__assert_fail@plt+0x5278>
   16b7c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   16b80:	cmp	r5, #0
   16b84:	beq	1688c <__assert_fail@plt+0x4eec>
   16b88:	b	16720 <__assert_fail@plt+0x4d80>
   16b8c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16b90:	cmp	r3, #0
   16b94:	beq	16810 <__assert_fail@plt+0x4e70>
   16b98:	ldr	r4, [fp, #-120]	; 0xffffff88
   16b9c:	b	16808 <__assert_fail@plt+0x4e68>
   16ba0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16ba4:	b	16934 <__assert_fail@plt+0x4f94>
   16ba8:	mov	r3, #1
   16bac:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16bb0:	str	r3, [fp, #-128]	; 0xffffff80
   16bb4:	strb	r6, [fp, #-124]	; 0xffffff84
   16bb8:	b	16814 <__assert_fail@plt+0x4e74>
   16bbc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16bc0:	mov	r0, r4
   16bc4:	bl	117a8 <strlen@plt>
   16bc8:	str	r0, [fp, #-128]	; 0xffffff80
   16bcc:	strb	r6, [fp, #-124]	; 0xffffff84
   16bd0:	b	16814 <__assert_fail@plt+0x4e74>
   16bd4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   16bd8:	mov	r3, #1
   16bdc:	str	r3, [fp, #-128]	; 0xffffff80
   16be0:	ldrb	r3, [r4]
   16be4:	cmp	r3, #0
   16be8:	bne	16c18 <__assert_fail@plt+0x5278>
   16bec:	ldr	r4, [fp, #-120]	; 0xffffff88
   16bf0:	cmp	r4, #0
   16bf4:	beq	16b24 <__assert_fail@plt+0x5184>
   16bf8:	b	16720 <__assert_fail@plt+0x4d80>
   16bfc:	ldr	r2, [fp, #-260]	; 0xfffffefc
   16c00:	ldr	r0, [fp, #-248]	; 0xffffff08
   16c04:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16c08:	str	r3, [r2]
   16c0c:	bl	332dc <__assert_fail@plt+0x2193c>
   16c10:	mov	r0, #1
   16c14:	b	16660 <__assert_fail@plt+0x4cc0>
   16c18:	movw	r3, #19536	; 0x4c50
   16c1c:	movt	r3, #3
   16c20:	movw	r1, #19556	; 0x4c64
   16c24:	movt	r1, #3
   16c28:	movw	r0, #19612	; 0x4c9c
   16c2c:	movt	r0, #3
   16c30:	mov	r2, #171	; 0xab
   16c34:	bl	119a0 <__assert_fail@plt>
   16c38:	movw	r3, #19536	; 0x4c50
   16c3c:	movt	r3, #3
   16c40:	movw	r1, #19556	; 0x4c64
   16c44:	movt	r1, #3
   16c48:	movw	r0, #19588	; 0x4c84
   16c4c:	movt	r0, #3
   16c50:	mov	r2, #143	; 0x8f
   16c54:	bl	119a0 <__assert_fail@plt>
   16c58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c5c:	mov	r4, r1
   16c60:	strd	r6, [sp, #8]
   16c64:	strd	r8, [sp, #16]
   16c68:	strd	sl, [sp, #24]
   16c6c:	str	lr, [sp, #32]
   16c70:	sub	sp, sp, #420	; 0x1a4
   16c74:	str	r1, [sp, #4]
   16c78:	str	r0, [sp, #24]
   16c7c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16c80:	cmp	r0, #1
   16c84:	bhi	16f54 <__assert_fail@plt+0x55b4>
   16c88:	ldr	r3, [sp, #4]
   16c8c:	ldrb	r4, [r3]
   16c90:	cmp	r4, #0
   16c94:	str	r4, [sp, #16]
   16c98:	beq	16e74 <__assert_fail@plt+0x54d4>
   16c9c:	bl	11778 <__ctype_b_loc@plt>
   16ca0:	ldr	r7, [r0]
   16ca4:	sxth	r4, r4
   16ca8:	lsl	r3, r4, #1
   16cac:	str	r0, [sp, #44]	; 0x2c
   16cb0:	ldrh	r3, [r7, r3]
   16cb4:	tst	r3, #256	; 0x100
   16cb8:	bne	16fc8 <__assert_fail@plt+0x5628>
   16cbc:	ldr	r3, [sp, #4]
   16cc0:	add	r3, r3, #1
   16cc4:	str	r3, [sp, #36]	; 0x24
   16cc8:	ldr	r3, [sp, #24]
   16ccc:	ldrb	r3, [r3]
   16cd0:	cmp	r3, #0
   16cd4:	beq	16fb4 <__assert_fail@plt+0x5614>
   16cd8:	ldr	r3, [sp, #4]
   16cdc:	mov	r2, #1
   16ce0:	mov	sl, #0
   16ce4:	mov	r9, sl
   16ce8:	mov	r8, sl
   16cec:	str	r2, [sp, #8]
   16cf0:	ldr	r6, [sp, #24]
   16cf4:	str	r3, [sp, #28]
   16cf8:	sub	r3, r2, r3
   16cfc:	str	sl, [sp, #32]
   16d00:	str	r3, [sp, #40]	; 0x28
   16d04:	b	16d78 <__assert_fail@plt+0x53d8>
   16d08:	ldr	r8, [sp, #28]
   16d0c:	cmp	r8, #0
   16d10:	beq	16d3c <__assert_fail@plt+0x539c>
   16d14:	ldr	r2, [sp, #32]
   16d18:	mov	r0, r8
   16d1c:	sub	r1, r5, r2
   16d20:	bl	11874 <strnlen@plt>
   16d24:	mov	r2, r8
   16d28:	ldrb	r3, [r2, r0]!
   16d2c:	cmp	r3, #0
   16d30:	str	r2, [sp, #28]
   16d34:	bne	16fbc <__assert_fail@plt+0x561c>
   16d38:	str	r5, [sp, #32]
   16d3c:	ldr	r4, [sp, #4]
   16d40:	mov	r0, r4
   16d44:	bl	117a8 <strlen@plt>
   16d48:	mov	r2, r0
   16d4c:	add	r3, sp, #360	; 0x168
   16d50:	mov	r1, r4
   16d54:	mov	r0, r6
   16d58:	bl	16018 <__assert_fail@plt+0x4678>
   16d5c:	subs	r3, r0, #0
   16d60:	str	r3, [sp, #8]
   16d64:	bne	17664 <__assert_fail@plt+0x5cc4>
   16d68:	str	r3, [sp, #28]
   16d6c:	ldr	r3, [sp, #44]	; 0x2c
   16d70:	ldr	r7, [r3]
   16d74:	mov	r8, r5
   16d78:	str	r6, [sp, #24]
   16d7c:	add	r9, r9, #1
   16d80:	add	r5, r8, #1
   16d84:	ldrb	r3, [r6], #1
   16d88:	sxth	r4, r3
   16d8c:	lsl	r2, r4, #1
   16d90:	ldrh	r2, [r7, r2]
   16d94:	tst	r2, #256	; 0x100
   16d98:	beq	16da8 <__assert_fail@plt+0x5408>
   16d9c:	bl	11748 <__ctype_tolower_loc@plt>
   16da0:	ldr	r3, [r0]
   16da4:	ldr	r3, [r3, r4, lsl #2]
   16da8:	ldr	r2, [sp, #16]
   16dac:	cmp	r3, r2
   16db0:	beq	16e98 <__assert_fail@plt+0x54f8>
   16db4:	ldrb	r3, [r6]
   16db8:	cmp	r3, #0
   16dbc:	beq	16fb4 <__assert_fail@plt+0x5614>
   16dc0:	ldr	r4, [sp, #8]
   16dc4:	cmp	r9, #9
   16dc8:	movls	r4, #0
   16dcc:	andhi	r4, r4, #1
   16dd0:	cmp	r4, #0
   16dd4:	beq	16d74 <__assert_fail@plt+0x53d4>
   16dd8:	add	r3, r9, r9, lsl #2
   16ddc:	cmp	r5, r3
   16de0:	bcs	16d08 <__assert_fail@plt+0x5368>
   16de4:	str	r4, [sp, #8]
   16de8:	b	16d74 <__assert_fail@plt+0x53d4>
   16dec:	add	r0, sp, #140	; 0x8c
   16df0:	bl	11604 <mbsinit@plt>
   16df4:	cmp	r0, #0
   16df8:	beq	17aac <__assert_fail@plt+0x610c>
   16dfc:	mov	r5, #1
   16e00:	strb	r5, [sp, #136]	; 0x88
   16e04:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16e08:	ldr	r7, [sp, #4]
   16e0c:	mov	r1, r0
   16e10:	mov	r0, r7
   16e14:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   16e18:	mov	r2, r0
   16e1c:	add	r3, sp, #140	; 0x8c
   16e20:	mov	r1, r7
   16e24:	add	r0, sp, #164	; 0xa4
   16e28:	bl	1f100 <__assert_fail@plt+0xd760>
   16e2c:	cmn	r0, #1
   16e30:	str	r0, [sp, #156]	; 0x9c
   16e34:	beq	1797c <__assert_fail@plt+0x5fdc>
   16e38:	cmn	r0, #2
   16e3c:	beq	17a50 <__assert_fail@plt+0x60b0>
   16e40:	cmp	r0, #0
   16e44:	beq	179ec <__assert_fail@plt+0x604c>
   16e48:	ldr	r4, [sp, #164]	; 0xa4
   16e4c:	mov	r5, #1
   16e50:	add	r0, sp, #140	; 0x8c
   16e54:	strb	r5, [sp, #160]	; 0xa0
   16e58:	bl	11604 <mbsinit@plt>
   16e5c:	cmp	r0, #0
   16e60:	strb	r5, [sp, #148]	; 0x94
   16e64:	movne	r3, #0
   16e68:	strbne	r3, [sp, #136]	; 0x88
   16e6c:	cmp	r4, #0
   16e70:	bne	16fdc <__assert_fail@plt+0x563c>
   16e74:	ldr	r5, [sp, #24]
   16e78:	mov	r0, r5
   16e7c:	add	sp, sp, #420	; 0x1a4
   16e80:	ldrd	r4, [sp]
   16e84:	ldrd	r6, [sp, #8]
   16e88:	ldrd	r8, [sp, #16]
   16e8c:	ldrd	sl, [sp, #24]
   16e90:	add	sp, sp, #32
   16e94:	pop	{pc}		; (ldr pc, [sp], #4)
   16e98:	ldr	r3, [sp, #4]
   16e9c:	ldrb	r4, [r3, #1]
   16ea0:	cmp	r4, #0
   16ea4:	beq	16e74 <__assert_fail@plt+0x54d4>
   16ea8:	ldrb	r3, [r6]
   16eac:	cmp	r3, #0
   16eb0:	beq	16fb4 <__assert_fail@plt+0x5614>
   16eb4:	ldr	fp, [sp, #36]	; 0x24
   16eb8:	mov	sl, r6
   16ebc:	str	r9, [sp, #48]	; 0x30
   16ec0:	ldr	r2, [sp, #40]	; 0x28
   16ec4:	str	r6, [sp, #52]	; 0x34
   16ec8:	mov	r6, r7
   16ecc:	mov	r7, fp
   16ed0:	add	r8, r2, r8
   16ed4:	b	16ef0 <__assert_fail@plt+0x5550>
   16ed8:	ldrb	r4, [r7, #1]!
   16edc:	cmp	r4, #0
   16ee0:	beq	16e74 <__assert_fail@plt+0x54d4>
   16ee4:	ldrb	r3, [sl, #1]!
   16ee8:	cmp	r3, #0
   16eec:	beq	16fb4 <__assert_fail@plt+0x5614>
   16ef0:	sxth	r5, r3
   16ef4:	add	fp, r7, r8
   16ef8:	lsl	r1, r5, #1
   16efc:	ldrh	r1, [r6, r1]
   16f00:	tst	r1, #256	; 0x100
   16f04:	moveq	r5, r3
   16f08:	beq	16f18 <__assert_fail@plt+0x5578>
   16f0c:	bl	11748 <__ctype_tolower_loc@plt>
   16f10:	ldr	r3, [r0]
   16f14:	ldr	r5, [r3, r5, lsl #2]
   16f18:	sxth	r9, r4
   16f1c:	lsl	r1, r9, #1
   16f20:	ldrh	r1, [r6, r1]
   16f24:	tst	r1, #256	; 0x100
   16f28:	beq	16f38 <__assert_fail@plt+0x5598>
   16f2c:	bl	11748 <__ctype_tolower_loc@plt>
   16f30:	ldr	r1, [r0]
   16f34:	ldr	r4, [r1, r9, lsl #2]
   16f38:	cmp	r5, r4
   16f3c:	beq	16ed8 <__assert_fail@plt+0x5538>
   16f40:	mov	r7, r6
   16f44:	mov	r5, fp
   16f48:	ldr	r9, [sp, #48]	; 0x30
   16f4c:	ldr	r6, [sp, #52]	; 0x34
   16f50:	b	16dc0 <__assert_fail@plt+0x5420>
   16f54:	ldrb	r2, [r4]
   16f58:	mov	r3, #0
   16f5c:	movw	r6, #21632	; 0x5480
   16f60:	movt	r6, #3
   16f64:	mov	r1, r4
   16f68:	strb	r3, [sp, #136]	; 0x88
   16f6c:	mov	r4, #0
   16f70:	mov	r5, #0
   16f74:	strb	r3, [sp, #148]	; 0x94
   16f78:	lsr	r3, r2, #5
   16f7c:	str	r1, [sp, #152]	; 0x98
   16f80:	and	r1, r2, #31
   16f84:	strd	r4, [sp, #140]	; 0x8c
   16f88:	ldr	r3, [r6, r3, lsl #2]
   16f8c:	lsr	r3, r3, r1
   16f90:	ands	r4, r3, #1
   16f94:	beq	16dec <__assert_fail@plt+0x544c>
   16f98:	mov	r3, #1
   16f9c:	mov	r4, r2
   16fa0:	strb	r3, [sp, #148]	; 0x94
   16fa4:	str	r3, [sp, #156]	; 0x9c
   16fa8:	strb	r3, [sp, #160]	; 0xa0
   16fac:	str	r2, [sp, #164]	; 0xa4
   16fb0:	b	16e6c <__assert_fail@plt+0x54cc>
   16fb4:	mov	r5, #0
   16fb8:	b	16e78 <__assert_fail@plt+0x54d8>
   16fbc:	str	r4, [sp, #8]
   16fc0:	str	r5, [sp, #32]
   16fc4:	b	16d74 <__assert_fail@plt+0x53d4>
   16fc8:	bl	11748 <__ctype_tolower_loc@plt>
   16fcc:	ldr	r3, [r0]
   16fd0:	ldrb	r3, [r3, r4, lsl #2]
   16fd4:	str	r3, [sp, #16]
   16fd8:	b	16cbc <__assert_fail@plt+0x531c>
   16fdc:	mov	r7, #1
   16fe0:	ldr	r0, [sp, #4]
   16fe4:	add	r2, sp, #168	; 0xa8
   16fe8:	mov	r3, #0
   16fec:	mov	r4, #0
   16ff0:	mov	r5, #0
   16ff4:	ldr	r1, [sp, #152]	; 0x98
   16ff8:	strb	r3, [sp, #192]	; 0xc0
   16ffc:	strd	r4, [sp, #196]	; 0xc4
   17000:	strb	r3, [sp, #204]	; 0xcc
   17004:	str	r0, [sp, #208]	; 0xd0
   17008:	cmp	r1, r2
   1700c:	ldr	r4, [sp, #156]	; 0x9c
   17010:	strne	r1, [sp, #56]	; 0x38
   17014:	beq	17990 <__assert_fail@plt+0x5ff0>
   17018:	cmp	r7, #0
   1701c:	str	r4, [sp, #60]	; 0x3c
   17020:	strb	r7, [sp, #64]	; 0x40
   17024:	beq	17034 <__assert_fail@plt+0x5694>
   17028:	ldr	r0, [sp, #164]	; 0xa4
   1702c:	bl	115f8 <towlower@plt>
   17030:	str	r0, [sp, #68]	; 0x44
   17034:	mov	r3, #0
   17038:	ldr	r4, [sp, #24]
   1703c:	mov	fp, #1
   17040:	mov	r5, r3
   17044:	mov	sl, r3
   17048:	mov	r8, r3
   1704c:	str	r3, [sp, #28]
   17050:	str	r3, [sp, #32]
   17054:	str	r3, [sp, #36]	; 0x24
   17058:	strb	r3, [sp, #248]	; 0xf8
   1705c:	str	r3, [sp, #252]	; 0xfc
   17060:	str	r3, [sp, #256]	; 0x100
   17064:	strb	r3, [sp, #260]	; 0x104
   17068:	ldrb	r3, [sp, #248]	; 0xf8
   1706c:	str	r4, [sp, #264]	; 0x108
   17070:	cmp	r3, #0
   17074:	addne	r7, sp, #252	; 0xfc
   17078:	bne	173e8 <__assert_fail@plt+0x5a48>
   1707c:	ldrb	r3, [r4]
   17080:	lsr	r2, r3, #5
   17084:	and	r3, r3, #31
   17088:	ldr	r2, [r6, r2, lsl #2]
   1708c:	lsr	r3, r2, r3
   17090:	tst	r3, #1
   17094:	beq	1759c <__assert_fail@plt+0x5bfc>
   17098:	mov	r3, #1
   1709c:	str	r3, [sp, #268]	; 0x10c
   170a0:	ldrb	r2, [r4]
   170a4:	strb	r3, [sp, #260]	; 0x104
   170a8:	strb	r3, [sp, #272]	; 0x110
   170ac:	mov	r4, r2
   170b0:	str	r2, [sp, #276]	; 0x114
   170b4:	cmp	r4, #0
   170b8:	beq	16fb4 <__assert_fail@plt+0x5614>
   170bc:	cmp	r8, #9
   170c0:	movls	r3, #0
   170c4:	andhi	r3, fp, #1
   170c8:	cmp	r3, #0
   170cc:	str	r3, [sp, #8]
   170d0:	beq	170e4 <__assert_fail@plt+0x5744>
   170d4:	add	r3, r8, r8, lsl #2
   170d8:	cmp	sl, r3
   170dc:	bcs	175bc <__assert_fail@plt+0x5c1c>
   170e0:	ldr	fp, [sp, #8]
   170e4:	add	r3, sp, #280	; 0x118
   170e8:	add	r8, r8, #1
   170ec:	ldr	r7, [sp, #264]	; 0x108
   170f0:	add	r9, sl, #1
   170f4:	ldr	r4, [sp, #268]	; 0x10c
   170f8:	cmp	r7, r3
   170fc:	strne	r7, [sp, #96]	; 0x60
   17100:	beq	1777c <__assert_fail@plt+0x5ddc>
   17104:	ldrb	r3, [sp, #272]	; 0x110
   17108:	str	r4, [sp, #100]	; 0x64
   1710c:	cmp	r3, #0
   17110:	strb	r3, [sp, #104]	; 0x68
   17114:	beq	17514 <__assert_fail@plt+0x5b74>
   17118:	ldr	r0, [sp, #276]	; 0x114
   1711c:	bl	115f8 <towlower@plt>
   17120:	ldrb	r3, [sp, #64]	; 0x40
   17124:	str	r0, [sp, #108]	; 0x6c
   17128:	cmp	r3, #0
   1712c:	beq	17514 <__assert_fail@plt+0x5b74>
   17130:	ldr	r3, [sp, #68]	; 0x44
   17134:	cmp	r0, r3
   17138:	bne	173c4 <__assert_fail@plt+0x5a24>
   1713c:	ldr	r1, [sp, #4]
   17140:	add	r3, sp, #304	; 0x130
   17144:	strb	r5, [sp, #360]	; 0x168
   17148:	ldr	r2, [sp, #28]
   1714c:	ldr	ip, [sp, #268]	; 0x10c
   17150:	ldrb	r9, [r1]
   17154:	str	r1, [sp, #376]	; 0x178
   17158:	str	r2, [sp, #364]	; 0x16c
   1715c:	ldr	r2, [sp, #32]
   17160:	lsr	r0, r9, #5
   17164:	str	ip, [sp, #324]	; 0x144
   17168:	strb	r5, [sp, #372]	; 0x174
   1716c:	ldr	lr, [r6, r0, lsl #2]
   17170:	ldr	r0, [sp, #264]	; 0x108
   17174:	str	r2, [sp, #368]	; 0x170
   17178:	and	r2, r9, #31
   1717c:	lsr	r2, lr, r2
   17180:	ands	r7, r2, #1
   17184:	add	r2, sp, #256	; 0x100
   17188:	add	r4, r4, r0
   1718c:	ldrd	r0, [r2]
   17190:	add	r2, sp, #272	; 0x110
   17194:	strd	r0, [sp, #8]
   17198:	ldrd	r0, [sp, #248]	; 0xf8
   1719c:	str	r4, [sp, #320]	; 0x140
   171a0:	strd	r0, [r3]
   171a4:	ldrd	r0, [r2]
   171a8:	add	r2, sp, #280	; 0x118
   171ac:	strd	r0, [sp, #16]
   171b0:	ldrd	r0, [sp, #8]
   171b4:	strd	r0, [r3, #8]
   171b8:	ldrd	r0, [r2]
   171bc:	add	r2, sp, #288	; 0x120
   171c0:	strb	r5, [sp, #316]	; 0x13c
   171c4:	strd	r0, [r3, #32]
   171c8:	ldrd	r0, [r2]
   171cc:	add	r2, sp, #296	; 0x128
   171d0:	strd	r0, [r3, #40]	; 0x28
   171d4:	ldrd	r0, [sp, #16]
   171d8:	strd	r0, [r3, #24]
   171dc:	ldrd	r0, [r2]
   171e0:	strd	r0, [r3, #48]	; 0x30
   171e4:	beq	178d8 <__assert_fail@plt+0x5f38>
   171e8:	mov	r3, #1
   171ec:	mov	r4, r9
   171f0:	cmp	r4, #0
   171f4:	strb	r3, [sp, #372]	; 0x174
   171f8:	str	r3, [sp, #380]	; 0x17c
   171fc:	strb	r3, [sp, #384]	; 0x180
   17200:	str	r9, [sp, #388]	; 0x184
   17204:	beq	1795c <__assert_fail@plt+0x5fbc>
   17208:	ldr	r3, [sp, #376]	; 0x178
   1720c:	add	r9, sl, #2
   17210:	mov	r4, #1
   17214:	strb	r5, [sp, #372]	; 0x174
   17218:	ldr	r7, [sp, #380]	; 0x17c
   1721c:	add	r7, r3, r7
   17220:	str	r7, [sp, #376]	; 0x178
   17224:	b	17318 <__assert_fail@plt+0x5978>
   17228:	ldrb	r3, [r7]
   1722c:	lsr	r2, r3, #5
   17230:	and	r3, r3, #31
   17234:	ldr	r2, [r6, r2, lsl #2]
   17238:	lsr	r3, r2, r3
   1723c:	tst	r3, #1
   17240:	beq	174fc <__assert_fail@plt+0x5b5c>
   17244:	str	r4, [sp, #380]	; 0x17c
   17248:	ldrb	r7, [r7]
   1724c:	strb	r4, [sp, #372]	; 0x174
   17250:	strb	r4, [sp, #384]	; 0x180
   17254:	cmp	r7, #0
   17258:	str	r7, [sp, #388]	; 0x184
   1725c:	beq	17394 <__assert_fail@plt+0x59f4>
   17260:	ldrb	r3, [sp, #316]	; 0x13c
   17264:	cmp	r3, #0
   17268:	bne	174d0 <__assert_fail@plt+0x5b30>
   1726c:	ldrb	r3, [sp, #304]	; 0x130
   17270:	ldr	r7, [sp, #320]	; 0x140
   17274:	cmp	r3, #0
   17278:	addne	sl, sp, #308	; 0x134
   1727c:	bne	17464 <__assert_fail@plt+0x5ac4>
   17280:	ldrb	r3, [r7]
   17284:	lsr	r2, r3, #5
   17288:	and	r3, r3, #31
   1728c:	ldr	r2, [r6, r2, lsl #2]
   17290:	lsr	r3, r2, r3
   17294:	tst	r3, #1
   17298:	beq	1744c <__assert_fail@plt+0x5aac>
   1729c:	str	r4, [sp, #324]	; 0x144
   172a0:	ldrb	r7, [r7]
   172a4:	strb	r4, [sp, #316]	; 0x13c
   172a8:	strb	r4, [sp, #328]	; 0x148
   172ac:	str	r7, [sp, #332]	; 0x14c
   172b0:	cmp	r7, #0
   172b4:	beq	16fb4 <__assert_fail@plt+0x5614>
   172b8:	ldrb	r3, [sp, #384]	; 0x180
   172bc:	cmp	r3, #0
   172c0:	beq	173b0 <__assert_fail@plt+0x5a10>
   172c4:	mov	r0, r7
   172c8:	bl	115f8 <towlower@plt>
   172cc:	mov	r7, r0
   172d0:	ldr	r0, [sp, #388]	; 0x184
   172d4:	bl	115f8 <towlower@plt>
   172d8:	subs	r0, r7, r0
   172dc:	movne	r0, #1
   172e0:	cmp	r0, #0
   172e4:	add	r2, r9, #1
   172e8:	bne	173c0 <__assert_fail@plt+0x5a20>
   172ec:	mov	r9, r2
   172f0:	ldr	r3, [sp, #320]	; 0x140
   172f4:	strb	r0, [sp, #316]	; 0x13c
   172f8:	ldr	r1, [sp, #324]	; 0x144
   172fc:	strb	r0, [sp, #372]	; 0x174
   17300:	ldr	r7, [sp, #376]	; 0x178
   17304:	ldr	r2, [sp, #380]	; 0x17c
   17308:	add	r3, r3, r1
   1730c:	str	r3, [sp, #320]	; 0x140
   17310:	add	r7, r7, r2
   17314:	str	r7, [sp, #376]	; 0x178
   17318:	ldrb	r3, [sp, #360]	; 0x168
   1731c:	cmp	r3, #0
   17320:	beq	17228 <__assert_fail@plt+0x5888>
   17324:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17328:	mov	r1, r0
   1732c:	mov	r0, r7
   17330:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   17334:	mov	r2, r0
   17338:	add	r3, sp, #364	; 0x16c
   1733c:	mov	r1, r7
   17340:	add	r0, sp, #388	; 0x184
   17344:	bl	1f100 <__assert_fail@plt+0xd760>
   17348:	cmn	r0, #1
   1734c:	str	r0, [sp, #380]	; 0x17c
   17350:	strbeq	r4, [sp, #372]	; 0x174
   17354:	streq	r4, [sp, #380]	; 0x17c
   17358:	strbeq	r5, [sp, #384]	; 0x180
   1735c:	beq	17260 <__assert_fail@plt+0x58c0>
   17360:	cmn	r0, #2
   17364:	beq	1753c <__assert_fail@plt+0x5b9c>
   17368:	cmp	r0, #0
   1736c:	beq	17554 <__assert_fail@plt+0x5bb4>
   17370:	ldr	r7, [sp, #388]	; 0x184
   17374:	add	r0, sp, #364	; 0x16c
   17378:	strb	r4, [sp, #384]	; 0x180
   1737c:	bl	11604 <mbsinit@plt>
   17380:	cmp	r0, #0
   17384:	strb	r4, [sp, #372]	; 0x174
   17388:	strbne	r5, [sp, #360]	; 0x168
   1738c:	cmp	r7, #0
   17390:	bne	17260 <__assert_fail@plt+0x58c0>
   17394:	ldr	r5, [sp, #264]	; 0x108
   17398:	b	16e78 <__assert_fail@plt+0x54d8>
   1739c:	ldr	r0, [sp, #320]	; 0x140
   173a0:	bl	117a8 <strlen@plt>
   173a4:	strb	r4, [sp, #316]	; 0x13c
   173a8:	str	r0, [sp, #324]	; 0x144
   173ac:	strb	r5, [sp, #328]	; 0x148
   173b0:	ldr	r2, [sp, #324]	; 0x144
   173b4:	ldr	r3, [sp, #380]	; 0x17c
   173b8:	cmp	r2, r3
   173bc:	beq	174e4 <__assert_fail@plt+0x5b44>
   173c0:	ldr	r4, [sp, #268]	; 0x10c
   173c4:	mov	sl, r9
   173c8:	strb	r5, [sp, #260]	; 0x104
   173cc:	ldr	r3, [sp, #264]	; 0x108
   173d0:	add	r4, r3, r4
   173d4:	ldrb	r3, [sp, #248]	; 0xf8
   173d8:	str	r4, [sp, #264]	; 0x108
   173dc:	cmp	r3, #0
   173e0:	addne	r7, sp, #252	; 0xfc
   173e4:	beq	1707c <__assert_fail@plt+0x56dc>
   173e8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   173ec:	mov	r1, r0
   173f0:	mov	r0, r4
   173f4:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   173f8:	mov	r2, r0
   173fc:	mov	r3, r7
   17400:	mov	r1, r4
   17404:	add	r0, sp, #276	; 0x114
   17408:	bl	1f100 <__assert_fail@plt+0xd760>
   1740c:	cmn	r0, #1
   17410:	str	r0, [sp, #268]	; 0x10c
   17414:	beq	1779c <__assert_fail@plt+0x5dfc>
   17418:	cmn	r0, #2
   1741c:	beq	17810 <__assert_fail@plt+0x5e70>
   17420:	cmp	r0, #0
   17424:	beq	1782c <__assert_fail@plt+0x5e8c>
   17428:	ldr	r4, [sp, #276]	; 0x114
   1742c:	mov	r9, #1
   17430:	mov	r0, r7
   17434:	strb	r9, [sp, #272]	; 0x110
   17438:	bl	11604 <mbsinit@plt>
   1743c:	cmp	r0, #0
   17440:	strb	r9, [sp, #260]	; 0x104
   17444:	strbne	r5, [sp, #248]	; 0xf8
   17448:	b	170b4 <__assert_fail@plt+0x5714>
   1744c:	add	sl, sp, #308	; 0x134
   17450:	mov	r0, sl
   17454:	bl	11604 <mbsinit@plt>
   17458:	cmp	r0, #0
   1745c:	beq	17aac <__assert_fail@plt+0x610c>
   17460:	strb	r4, [sp, #304]	; 0x130
   17464:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17468:	mov	r1, r0
   1746c:	mov	r0, r7
   17470:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   17474:	mov	r2, r0
   17478:	mov	r3, sl
   1747c:	mov	r1, r7
   17480:	add	r0, sp, #332	; 0x14c
   17484:	bl	1f100 <__assert_fail@plt+0xd760>
   17488:	cmn	r0, #1
   1748c:	str	r0, [sp, #324]	; 0x144
   17490:	strbeq	r4, [sp, #316]	; 0x13c
   17494:	streq	r4, [sp, #324]	; 0x144
   17498:	strbeq	r5, [sp, #328]	; 0x148
   1749c:	beq	173b0 <__assert_fail@plt+0x5a10>
   174a0:	cmn	r0, #2
   174a4:	beq	1739c <__assert_fail@plt+0x59fc>
   174a8:	cmp	r0, #0
   174ac:	beq	17578 <__assert_fail@plt+0x5bd8>
   174b0:	ldr	r7, [sp, #332]	; 0x14c
   174b4:	mov	r0, sl
   174b8:	strb	r4, [sp, #328]	; 0x148
   174bc:	bl	11604 <mbsinit@plt>
   174c0:	cmp	r0, #0
   174c4:	strb	r4, [sp, #316]	; 0x13c
   174c8:	strbne	r5, [sp, #304]	; 0x130
   174cc:	b	172b0 <__assert_fail@plt+0x5910>
   174d0:	ldrb	r3, [sp, #328]	; 0x148
   174d4:	cmp	r3, #0
   174d8:	beq	173b0 <__assert_fail@plt+0x5a10>
   174dc:	ldr	r7, [sp, #332]	; 0x14c
   174e0:	b	172b0 <__assert_fail@plt+0x5910>
   174e4:	ldr	r0, [sp, #320]	; 0x140
   174e8:	ldr	r1, [sp, #376]	; 0x178
   174ec:	bl	1161c <memcmp@plt>
   174f0:	adds	r0, r0, #0
   174f4:	movne	r0, #1
   174f8:	b	172e0 <__assert_fail@plt+0x5940>
   174fc:	add	r0, sp, #364	; 0x16c
   17500:	bl	11604 <mbsinit@plt>
   17504:	cmp	r0, #0
   17508:	beq	17aac <__assert_fail@plt+0x610c>
   1750c:	strb	r4, [sp, #360]	; 0x168
   17510:	b	17324 <__assert_fail@plt+0x5984>
   17514:	ldr	r3, [sp, #60]	; 0x3c
   17518:	cmp	r3, r4
   1751c:	bne	173c4 <__assert_fail@plt+0x5a24>
   17520:	mov	r0, r7
   17524:	mov	r2, r4
   17528:	ldr	r1, [sp, #56]	; 0x38
   1752c:	bl	1161c <memcmp@plt>
   17530:	cmp	r0, #0
   17534:	bne	173c4 <__assert_fail@plt+0x5a24>
   17538:	b	1713c <__assert_fail@plt+0x579c>
   1753c:	ldr	r0, [sp, #376]	; 0x178
   17540:	bl	117a8 <strlen@plt>
   17544:	strb	r4, [sp, #372]	; 0x174
   17548:	str	r0, [sp, #380]	; 0x17c
   1754c:	strb	r5, [sp, #384]	; 0x180
   17550:	b	17260 <__assert_fail@plt+0x58c0>
   17554:	ldr	r3, [sp, #376]	; 0x178
   17558:	str	r4, [sp, #380]	; 0x17c
   1755c:	ldrb	r3, [r3]
   17560:	cmp	r3, #0
   17564:	bne	17acc <__assert_fail@plt+0x612c>
   17568:	ldr	r7, [sp, #388]	; 0x184
   1756c:	cmp	r7, #0
   17570:	beq	17374 <__assert_fail@plt+0x59d4>
   17574:	b	17a0c <__assert_fail@plt+0x606c>
   17578:	ldr	r3, [sp, #320]	; 0x140
   1757c:	str	r4, [sp, #324]	; 0x144
   17580:	ldrb	r3, [r3]
   17584:	cmp	r3, #0
   17588:	bne	17acc <__assert_fail@plt+0x612c>
   1758c:	ldr	r7, [sp, #332]	; 0x14c
   17590:	cmp	r7, #0
   17594:	beq	174b4 <__assert_fail@plt+0x5b14>
   17598:	b	17a0c <__assert_fail@plt+0x606c>
   1759c:	add	r7, sp, #252	; 0xfc
   175a0:	mov	r0, r7
   175a4:	bl	11604 <mbsinit@plt>
   175a8:	cmp	r0, #0
   175ac:	beq	17aac <__assert_fail@plt+0x610c>
   175b0:	mov	r3, #1
   175b4:	strb	r3, [sp, #248]	; 0xf8
   175b8:	b	173e8 <__assert_fail@plt+0x5a48>
   175bc:	ldr	r3, [sp, #36]	; 0x24
   175c0:	ldrb	fp, [sp, #204]	; 0xcc
   175c4:	subs	r7, sl, r3
   175c8:	beq	17a90 <__assert_fail@plt+0x60f0>
   175cc:	cmp	fp, #0
   175d0:	beq	17960 <__assert_fail@plt+0x5fc0>
   175d4:	ldrb	r3, [sp, #216]	; 0xd8
   175d8:	cmp	r3, #0
   175dc:	bne	1776c <__assert_fail@plt+0x5dcc>
   175e0:	ldrb	r1, [sp, #192]	; 0xc0
   175e4:	ldr	r4, [sp, #208]	; 0xd0
   175e8:	subs	r7, r7, #1
   175ec:	strb	r5, [sp, #204]	; 0xcc
   175f0:	ldr	r3, [sp, #212]	; 0xd4
   175f4:	add	r4, r4, r3
   175f8:	mov	fp, r4
   175fc:	str	r4, [sp, #208]	; 0xd0
   17600:	beq	177b8 <__assert_fail@plt+0x5e18>
   17604:	cmp	r1, #0
   17608:	addne	r9, sp, #196	; 0xc4
   1760c:	bne	17688 <__assert_fail@plt+0x5ce8>
   17610:	ldrb	r3, [r4]
   17614:	lsr	r2, r3, #5
   17618:	and	r3, r3, #31
   1761c:	ldr	r2, [r6, r2, lsl #2]
   17620:	lsr	r3, r2, r3
   17624:	tst	r3, #1
   17628:	beq	1766c <__assert_fail@plt+0x5ccc>
   1762c:	mov	r3, #1
   17630:	str	r3, [sp, #212]	; 0xd4
   17634:	ldrb	r2, [r4]
   17638:	strb	r3, [sp, #204]	; 0xcc
   1763c:	strb	r3, [sp, #216]	; 0xd8
   17640:	cmp	r2, #0
   17644:	str	r2, [sp, #220]	; 0xdc
   17648:	bne	175e8 <__assert_fail@plt+0x5c48>
   1764c:	add	r2, sp, #360	; 0x168
   17650:	ldr	r1, [sp, #4]
   17654:	ldr	r0, [sp, #24]
   17658:	bl	162a0 <__assert_fail@plt+0x4900>
   1765c:	subs	fp, r0, #0
   17660:	beq	17808 <__assert_fail@plt+0x5e68>
   17664:	ldr	r5, [sp, #360]	; 0x168
   17668:	b	16e78 <__assert_fail@plt+0x54d8>
   1766c:	add	r9, sp, #196	; 0xc4
   17670:	mov	r0, r9
   17674:	bl	11604 <mbsinit@plt>
   17678:	cmp	r0, #0
   1767c:	beq	17aac <__assert_fail@plt+0x610c>
   17680:	mov	r3, #1
   17684:	strb	r3, [sp, #192]	; 0xc0
   17688:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1768c:	mov	r1, r0
   17690:	mov	r0, r4
   17694:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   17698:	mov	r2, r0
   1769c:	mov	r3, r9
   176a0:	mov	r1, r4
   176a4:	add	r0, sp, #220	; 0xdc
   176a8:	bl	1f100 <__assert_fail@plt+0xd760>
   176ac:	cmn	r0, #1
   176b0:	str	r0, [sp, #212]	; 0xd4
   176b4:	beq	176f4 <__assert_fail@plt+0x5d54>
   176b8:	cmn	r0, #2
   176bc:	beq	1770c <__assert_fail@plt+0x5d6c>
   176c0:	cmp	r0, #0
   176c4:	beq	17728 <__assert_fail@plt+0x5d88>
   176c8:	ldr	fp, [sp, #220]	; 0xdc
   176cc:	mov	r4, #1
   176d0:	mov	r0, r9
   176d4:	strb	r4, [sp, #216]	; 0xd8
   176d8:	bl	11604 <mbsinit@plt>
   176dc:	cmp	r0, #0
   176e0:	bne	17750 <__assert_fail@plt+0x5db0>
   176e4:	cmp	fp, #0
   176e8:	strb	r4, [sp, #204]	; 0xcc
   176ec:	bne	175e0 <__assert_fail@plt+0x5c40>
   176f0:	b	1764c <__assert_fail@plt+0x5cac>
   176f4:	mov	r3, #1
   176f8:	ldrb	r1, [sp, #192]	; 0xc0
   176fc:	str	r3, [sp, #212]	; 0xd4
   17700:	strb	r5, [sp, #216]	; 0xd8
   17704:	ldr	r4, [sp, #208]	; 0xd0
   17708:	b	175e8 <__assert_fail@plt+0x5c48>
   1770c:	ldr	r4, [sp, #208]	; 0xd0
   17710:	mov	r0, r4
   17714:	bl	117a8 <strlen@plt>
   17718:	ldrb	r1, [sp, #192]	; 0xc0
   1771c:	str	r0, [sp, #212]	; 0xd4
   17720:	strb	r5, [sp, #216]	; 0xd8
   17724:	b	175e8 <__assert_fail@plt+0x5c48>
   17728:	ldr	r4, [sp, #208]	; 0xd0
   1772c:	mov	r3, #1
   17730:	str	r3, [sp, #212]	; 0xd4
   17734:	ldrb	r3, [r4]
   17738:	cmp	r3, #0
   1773c:	bne	17acc <__assert_fail@plt+0x612c>
   17740:	ldr	fp, [sp, #220]	; 0xdc
   17744:	cmp	fp, #0
   17748:	beq	176cc <__assert_fail@plt+0x5d2c>
   1774c:	b	17a0c <__assert_fail@plt+0x606c>
   17750:	cmp	fp, #0
   17754:	strb	r5, [sp, #192]	; 0xc0
   17758:	strb	r4, [sp, #204]	; 0xcc
   1775c:	beq	1764c <__assert_fail@plt+0x5cac>
   17760:	uxtb	r1, r5
   17764:	ldr	r4, [sp, #208]	; 0xd0
   17768:	b	175e8 <__assert_fail@plt+0x5c48>
   1776c:	ldr	r3, [sp, #220]	; 0xdc
   17770:	cmp	r3, #0
   17774:	bne	175e0 <__assert_fail@plt+0x5c40>
   17778:	b	1764c <__assert_fail@plt+0x5cac>
   1777c:	add	r3, sp, #112	; 0x70
   17780:	mov	r1, r7
   17784:	mov	r0, r3
   17788:	mov	r2, r4
   1778c:	bl	115d4 <memcpy@plt>
   17790:	mov	r7, r0
   17794:	str	r0, [sp, #96]	; 0x60
   17798:	b	17104 <__assert_fail@plt+0x5764>
   1779c:	mov	r3, #1
   177a0:	strb	r3, [sp, #260]	; 0x104
   177a4:	str	r3, [sp, #268]	; 0x10c
   177a8:	strb	r5, [sp, #272]	; 0x110
   177ac:	b	170bc <__assert_fail@plt+0x571c>
   177b0:	ldrb	r1, [sp, #192]	; 0xc0
   177b4:	ldr	fp, [sp, #208]	; 0xd0
   177b8:	cmp	r1, #0
   177bc:	addne	r9, sp, #196	; 0xc4
   177c0:	bne	17870 <__assert_fail@plt+0x5ed0>
   177c4:	ldrb	r3, [fp]
   177c8:	lsr	r2, r3, #5
   177cc:	and	r3, r3, #31
   177d0:	ldr	r2, [r6, r2, lsl #2]
   177d4:	lsr	r3, r2, r3
   177d8:	tst	r3, #1
   177dc:	beq	17854 <__assert_fail@plt+0x5eb4>
   177e0:	mov	r3, #1
   177e4:	str	r3, [sp, #212]	; 0xd4
   177e8:	ldrb	r2, [fp]
   177ec:	strb	r3, [sp, #204]	; 0xcc
   177f0:	strb	r3, [sp, #216]	; 0xd8
   177f4:	mov	fp, r2
   177f8:	str	r2, [sp, #220]	; 0xdc
   177fc:	cmp	fp, #0
   17800:	ldrne	fp, [sp, #8]
   17804:	beq	1764c <__assert_fail@plt+0x5cac>
   17808:	str	sl, [sp, #36]	; 0x24
   1780c:	b	170e4 <__assert_fail@plt+0x5744>
   17810:	ldr	r0, [sp, #264]	; 0x108
   17814:	bl	117a8 <strlen@plt>
   17818:	mov	r3, #1
   1781c:	strb	r3, [sp, #260]	; 0x104
   17820:	str	r0, [sp, #268]	; 0x10c
   17824:	strb	r5, [sp, #272]	; 0x110
   17828:	b	170bc <__assert_fail@plt+0x571c>
   1782c:	ldr	r3, [sp, #264]	; 0x108
   17830:	mov	r2, #1
   17834:	str	r2, [sp, #268]	; 0x10c
   17838:	ldrb	r3, [r3]
   1783c:	cmp	r3, #0
   17840:	bne	17acc <__assert_fail@plt+0x612c>
   17844:	ldr	r4, [sp, #276]	; 0x114
   17848:	cmp	r4, #0
   1784c:	beq	1742c <__assert_fail@plt+0x5a8c>
   17850:	b	17a0c <__assert_fail@plt+0x606c>
   17854:	add	r9, sp, #196	; 0xc4
   17858:	mov	r0, r9
   1785c:	bl	11604 <mbsinit@plt>
   17860:	cmp	r0, #0
   17864:	beq	17aac <__assert_fail@plt+0x610c>
   17868:	mov	r3, #1
   1786c:	strb	r3, [sp, #192]	; 0xc0
   17870:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17874:	mov	r1, r0
   17878:	mov	r0, fp
   1787c:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   17880:	mov	r2, r0
   17884:	mov	r3, r9
   17888:	mov	r1, fp
   1788c:	add	r0, sp, #220	; 0xdc
   17890:	bl	1f100 <__assert_fail@plt+0xd760>
   17894:	cmn	r0, #1
   17898:	str	r0, [sp, #212]	; 0xd4
   1789c:	beq	17a34 <__assert_fail@plt+0x6094>
   178a0:	cmn	r0, #2
   178a4:	beq	17a6c <__assert_fail@plt+0x60cc>
   178a8:	cmp	r0, #0
   178ac:	bne	17a10 <__assert_fail@plt+0x6070>
   178b0:	ldr	r4, [sp, #208]	; 0xd0
   178b4:	mov	r3, #1
   178b8:	str	r3, [sp, #212]	; 0xd4
   178bc:	ldrb	r3, [r4]
   178c0:	cmp	r3, #0
   178c4:	bne	17acc <__assert_fail@plt+0x612c>
   178c8:	ldr	fp, [sp, #220]	; 0xdc
   178cc:	cmp	fp, #0
   178d0:	beq	17a14 <__assert_fail@plt+0x6074>
   178d4:	b	17a0c <__assert_fail@plt+0x606c>
   178d8:	add	r0, sp, #364	; 0x16c
   178dc:	bl	11604 <mbsinit@plt>
   178e0:	cmp	r0, #0
   178e4:	beq	17aac <__assert_fail@plt+0x610c>
   178e8:	mov	r4, #1
   178ec:	strb	r4, [sp, #360]	; 0x168
   178f0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   178f4:	ldr	r9, [sp, #4]
   178f8:	mov	r1, r0
   178fc:	mov	r0, r9
   17900:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   17904:	mov	r2, r0
   17908:	add	r3, sp, #364	; 0x16c
   1790c:	mov	r1, r9
   17910:	add	r0, sp, #388	; 0x184
   17914:	bl	1f100 <__assert_fail@plt+0xd760>
   17918:	cmn	r0, #1
   1791c:	str	r0, [sp, #380]	; 0x17c
   17920:	beq	1796c <__assert_fail@plt+0x5fcc>
   17924:	cmn	r0, #2
   17928:	beq	179a8 <__assert_fail@plt+0x6008>
   1792c:	cmp	r0, #0
   17930:	beq	179c8 <__assert_fail@plt+0x6028>
   17934:	ldr	r4, [sp, #388]	; 0x184
   17938:	mov	r7, #1
   1793c:	add	r0, sp, #364	; 0x16c
   17940:	strb	r7, [sp, #384]	; 0x180
   17944:	bl	11604 <mbsinit@plt>
   17948:	cmp	r0, #0
   1794c:	strb	r7, [sp, #372]	; 0x174
   17950:	strbne	r5, [sp, #360]	; 0x168
   17954:	cmp	r4, #0
   17958:	bne	17208 <__assert_fail@plt+0x5868>
   1795c:	bl	11964 <abort@plt>
   17960:	ldrb	r1, [sp, #192]	; 0xc0
   17964:	ldr	r4, [sp, #208]	; 0xd0
   17968:	b	17604 <__assert_fail@plt+0x5c64>
   1796c:	str	r4, [sp, #380]	; 0x17c
   17970:	strb	r7, [sp, #384]	; 0x180
   17974:	ldr	r3, [sp, #376]	; 0x178
   17978:	b	1720c <__assert_fail@plt+0x586c>
   1797c:	mov	r7, r4
   17980:	strb	r5, [sp, #148]	; 0x94
   17984:	str	r5, [sp, #156]	; 0x9c
   17988:	strb	r4, [sp, #160]	; 0xa0
   1798c:	b	16fe0 <__assert_fail@plt+0x5640>
   17990:	add	r3, sp, #72	; 0x48
   17994:	mov	r2, r4
   17998:	mov	r0, r3
   1799c:	bl	115d4 <memcpy@plt>
   179a0:	str	r0, [sp, #56]	; 0x38
   179a4:	b	17018 <__assert_fail@plt+0x5678>
   179a8:	ldr	r3, [sp, #376]	; 0x178
   179ac:	mov	r0, r3
   179b0:	str	r3, [sp, #8]
   179b4:	bl	117a8 <strlen@plt>
   179b8:	str	r0, [sp, #380]	; 0x17c
   179bc:	strb	r7, [sp, #384]	; 0x180
   179c0:	ldr	r3, [sp, #8]
   179c4:	b	1720c <__assert_fail@plt+0x586c>
   179c8:	ldr	r3, [sp, #376]	; 0x178
   179cc:	str	r4, [sp, #380]	; 0x17c
   179d0:	ldrb	r3, [r3]
   179d4:	cmp	r3, #0
   179d8:	bne	17acc <__assert_fail@plt+0x612c>
   179dc:	ldr	r4, [sp, #388]	; 0x184
   179e0:	cmp	r4, #0
   179e4:	beq	17938 <__assert_fail@plt+0x5f98>
   179e8:	b	17a0c <__assert_fail@plt+0x606c>
   179ec:	ldr	r3, [sp, #152]	; 0x98
   179f0:	str	r5, [sp, #156]	; 0x9c
   179f4:	ldrb	r3, [r3]
   179f8:	cmp	r3, #0
   179fc:	bne	17acc <__assert_fail@plt+0x612c>
   17a00:	ldr	r4, [sp, #164]	; 0xa4
   17a04:	cmp	r4, #0
   17a08:	beq	16e4c <__assert_fail@plt+0x54ac>
   17a0c:	bl	16278 <__assert_fail@plt+0x48d8>
   17a10:	ldr	fp, [sp, #220]	; 0xdc
   17a14:	mov	r4, #1
   17a18:	mov	r0, r9
   17a1c:	strb	r4, [sp, #216]	; 0xd8
   17a20:	bl	11604 <mbsinit@plt>
   17a24:	cmp	r0, #0
   17a28:	strb	r4, [sp, #204]	; 0xcc
   17a2c:	strbne	r5, [sp, #192]	; 0xc0
   17a30:	b	177fc <__assert_fail@plt+0x5e5c>
   17a34:	mov	r3, #1
   17a38:	str	sl, [sp, #36]	; 0x24
   17a3c:	ldr	fp, [sp, #8]
   17a40:	strb	r3, [sp, #204]	; 0xcc
   17a44:	str	r3, [sp, #212]	; 0xd4
   17a48:	strb	r5, [sp, #216]	; 0xd8
   17a4c:	b	170e4 <__assert_fail@plt+0x5744>
   17a50:	ldr	r0, [sp, #152]	; 0x98
   17a54:	mov	r7, r4
   17a58:	bl	117a8 <strlen@plt>
   17a5c:	strb	r5, [sp, #148]	; 0x94
   17a60:	str	r0, [sp, #156]	; 0x9c
   17a64:	strb	r4, [sp, #160]	; 0xa0
   17a68:	b	16fe0 <__assert_fail@plt+0x5640>
   17a6c:	str	sl, [sp, #36]	; 0x24
   17a70:	ldr	r0, [sp, #208]	; 0xd0
   17a74:	bl	117a8 <strlen@plt>
   17a78:	mov	r3, #1
   17a7c:	ldr	fp, [sp, #8]
   17a80:	strb	r3, [sp, #204]	; 0xcc
   17a84:	str	r0, [sp, #212]	; 0xd4
   17a88:	strb	r5, [sp, #216]	; 0xd8
   17a8c:	b	170e4 <__assert_fail@plt+0x5744>
   17a90:	cmp	fp, #0
   17a94:	beq	177b0 <__assert_fail@plt+0x5e10>
   17a98:	ldrb	r3, [sp, #216]	; 0xd8
   17a9c:	cmp	r3, #0
   17aa0:	ldrne	fp, [sp, #220]	; 0xdc
   17aa4:	beq	17808 <__assert_fail@plt+0x5e68>
   17aa8:	b	177fc <__assert_fail@plt+0x5e5c>
   17aac:	movw	r3, #19536	; 0x4c50
   17ab0:	movt	r3, #3
   17ab4:	movw	r1, #19556	; 0x4c64
   17ab8:	movt	r1, #3
   17abc:	movw	r0, #19588	; 0x4c84
   17ac0:	movt	r0, #3
   17ac4:	mov	r2, #143	; 0x8f
   17ac8:	bl	119a0 <__assert_fail@plt>
   17acc:	movw	r3, #19536	; 0x4c50
   17ad0:	movt	r3, #3
   17ad4:	movw	r1, #19556	; 0x4c64
   17ad8:	movt	r1, #3
   17adc:	movw	r0, #19612	; 0x4c9c
   17ae0:	movt	r0, #3
   17ae4:	mov	r2, #171	; 0xab
   17ae8:	bl	119a0 <__assert_fail@plt>
   17aec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17af0:	mov	r4, r0
   17af4:	strd	r6, [sp, #8]
   17af8:	str	r8, [sp, #16]
   17afc:	str	lr, [sp, #20]
   17b00:	sub	sp, sp, #56	; 0x38
   17b04:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17b08:	cmp	r0, #1
   17b0c:	bhi	17b38 <__assert_fail@plt+0x6198>
   17b10:	mov	r0, r4
   17b14:	bl	117a8 <strlen@plt>
   17b18:	mov	r5, r0
   17b1c:	mov	r0, r5
   17b20:	add	sp, sp, #56	; 0x38
   17b24:	ldrd	r4, [sp]
   17b28:	ldrd	r6, [sp, #8]
   17b2c:	ldr	r8, [sp, #16]
   17b30:	add	sp, sp, #20
   17b34:	pop	{pc}		; (ldr pc, [sp], #4)
   17b38:	mov	r3, #0
   17b3c:	mov	r0, #0
   17b40:	mov	r1, #0
   17b44:	movw	r7, #21632	; 0x5480
   17b48:	movt	r7, #3
   17b4c:	mov	r5, r3
   17b50:	strb	r3, [sp]
   17b54:	mov	r6, #1
   17b58:	strd	r0, [sp, #4]
   17b5c:	strb	r3, [sp, #12]
   17b60:	str	r4, [sp, #16]
   17b64:	b	17bbc <__assert_fail@plt+0x621c>
   17b68:	ldrb	r3, [r4]
   17b6c:	lsr	r2, r3, #5
   17b70:	and	r3, r3, #31
   17b74:	ldr	r2, [r7, r2, lsl #2]
   17b78:	lsr	r3, r2, r3
   17b7c:	tst	r3, #1
   17b80:	beq	17c2c <__assert_fail@plt+0x628c>
   17b84:	str	r6, [sp, #20]
   17b88:	ldrb	r3, [r4]
   17b8c:	strb	r6, [sp, #24]
   17b90:	mov	r4, r3
   17b94:	str	r3, [sp, #28]
   17b98:	cmp	r4, #0
   17b9c:	beq	17b1c <__assert_fail@plt+0x617c>
   17ba0:	ldr	r4, [sp, #16]
   17ba4:	mov	r2, #0
   17ba8:	add	r5, r5, #1
   17bac:	ldr	r3, [sp, #20]
   17bb0:	strb	r2, [sp, #12]
   17bb4:	add	r4, r4, r3
   17bb8:	str	r4, [sp, #16]
   17bbc:	ldrb	r3, [sp]
   17bc0:	cmp	r3, #0
   17bc4:	addne	r8, sp, #4
   17bc8:	beq	17b68 <__assert_fail@plt+0x61c8>
   17bcc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17bd0:	mov	r1, r0
   17bd4:	mov	r0, r4
   17bd8:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   17bdc:	mov	r2, r0
   17be0:	mov	r3, r8
   17be4:	mov	r1, r4
   17be8:	add	r0, sp, #28
   17bec:	bl	1f100 <__assert_fail@plt+0xd760>
   17bf0:	cmn	r0, #1
   17bf4:	str	r0, [sp, #20]
   17bf8:	beq	17c48 <__assert_fail@plt+0x62a8>
   17bfc:	cmn	r0, #2
   17c00:	beq	17c5c <__assert_fail@plt+0x62bc>
   17c04:	cmp	r0, #0
   17c08:	beq	17c78 <__assert_fail@plt+0x62d8>
   17c0c:	ldr	r4, [sp, #28]
   17c10:	mov	r0, r8
   17c14:	strb	r6, [sp, #24]
   17c18:	bl	11604 <mbsinit@plt>
   17c1c:	cmp	r0, #0
   17c20:	movne	r3, #0
   17c24:	strbne	r3, [sp]
   17c28:	b	17b98 <__assert_fail@plt+0x61f8>
   17c2c:	add	r8, sp, #4
   17c30:	mov	r0, r8
   17c34:	bl	11604 <mbsinit@plt>
   17c38:	cmp	r0, #0
   17c3c:	beq	17cb8 <__assert_fail@plt+0x6318>
   17c40:	strb	r6, [sp]
   17c44:	b	17bcc <__assert_fail@plt+0x622c>
   17c48:	mov	r3, #0
   17c4c:	str	r6, [sp, #20]
   17c50:	ldr	r4, [sp, #16]
   17c54:	strb	r3, [sp, #24]
   17c58:	b	17ba4 <__assert_fail@plt+0x6204>
   17c5c:	ldr	r4, [sp, #16]
   17c60:	mov	r0, r4
   17c64:	bl	117a8 <strlen@plt>
   17c68:	mov	r3, #0
   17c6c:	str	r0, [sp, #20]
   17c70:	strb	r3, [sp, #24]
   17c74:	b	17ba4 <__assert_fail@plt+0x6204>
   17c78:	ldr	r4, [sp, #16]
   17c7c:	str	r6, [sp, #20]
   17c80:	ldrb	r3, [r4]
   17c84:	cmp	r3, #0
   17c88:	bne	17cd8 <__assert_fail@plt+0x6338>
   17c8c:	ldr	r4, [sp, #28]
   17c90:	cmp	r4, #0
   17c94:	beq	17c10 <__assert_fail@plt+0x6270>
   17c98:	movw	r3, #19636	; 0x4cb4
   17c9c:	movt	r3, #3
   17ca0:	movw	r1, #19556	; 0x4c64
   17ca4:	movt	r1, #3
   17ca8:	movw	r0, #19568	; 0x4c70
   17cac:	movt	r0, #3
   17cb0:	mov	r2, #172	; 0xac
   17cb4:	bl	119a0 <__assert_fail@plt>
   17cb8:	movw	r3, #19636	; 0x4cb4
   17cbc:	movt	r3, #3
   17cc0:	movw	r1, #19556	; 0x4c64
   17cc4:	movt	r1, #3
   17cc8:	movw	r0, #19588	; 0x4c84
   17ccc:	movt	r0, #3
   17cd0:	mov	r2, #143	; 0x8f
   17cd4:	bl	119a0 <__assert_fail@plt>
   17cd8:	movw	r3, #19636	; 0x4cb4
   17cdc:	movt	r3, #3
   17ce0:	movw	r1, #19556	; 0x4c64
   17ce4:	movt	r1, #3
   17ce8:	movw	r0, #19612	; 0x4c9c
   17cec:	movt	r0, #3
   17cf0:	mov	r2, #171	; 0xab
   17cf4:	bl	119a0 <__assert_fail@plt>
   17cf8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17cfc:	mov	r5, r0
   17d00:	strd	r6, [sp, #8]
   17d04:	mov	r6, r2
   17d08:	lsrs	r2, r6, #30
   17d0c:	str	fp, [sp, #16]
   17d10:	add	fp, sp, #20
   17d14:	movne	r2, #1
   17d18:	moveq	r2, #0
   17d1c:	lsls	r0, r6, #2
   17d20:	str	lr, [sp, #20]
   17d24:	bmi	17e4c <__assert_fail@plt+0x64ac>
   17d28:	cmp	r2, #0
   17d2c:	bne	17e4c <__assert_fail@plt+0x64ac>
   17d30:	cmp	r0, #4016	; 0xfb0
   17d34:	mov	r4, r1
   17d38:	mov	r7, r3
   17d3c:	bhi	17e40 <__assert_fail@plt+0x64a0>
   17d40:	add	r3, r0, #22
   17d44:	bic	r3, r3, #7
   17d48:	sub	sp, sp, r3
   17d4c:	add	r0, sp, #15
   17d50:	bic	r0, r0, #15
   17d54:	cmp	r0, #0
   17d58:	beq	17e4c <__assert_fail@plt+0x64ac>
   17d5c:	mov	r3, #1
   17d60:	cmp	r6, #2
   17d64:	movhi	r2, r4
   17d68:	movhi	ip, #0
   17d6c:	str	r3, [r0, #4]
   17d70:	movhi	r3, #2
   17d74:	bls	17dbc <__assert_fail@plt+0x641c>
   17d78:	ldrb	r1, [r2, #1]!
   17d7c:	ldrb	lr, [r4, ip]
   17d80:	cmp	lr, r1
   17d84:	bne	17da0 <__assert_fail@plt+0x6400>
   17d88:	b	17e64 <__assert_fail@plt+0x64c4>
   17d8c:	ldr	lr, [r0, ip, lsl #2]
   17d90:	sub	ip, ip, lr
   17d94:	ldrb	lr, [r4, ip]
   17d98:	cmp	lr, r1
   17d9c:	beq	17e64 <__assert_fail@plt+0x64c4>
   17da0:	cmp	ip, #0
   17da4:	bne	17d8c <__assert_fail@plt+0x63ec>
   17da8:	mov	ip, #0
   17dac:	str	r3, [r0, r3, lsl #2]
   17db0:	add	r3, r3, #1
   17db4:	cmp	r6, r3
   17db8:	bne	17d78 <__assert_fail@plt+0x63d8>
   17dbc:	mov	r2, #0
   17dc0:	str	r2, [r7]
   17dc4:	ldrb	r3, [r5]
   17dc8:	cmp	r3, r2
   17dcc:	movne	r1, r5
   17dd0:	beq	17e20 <__assert_fail@plt+0x6480>
   17dd4:	ldrb	ip, [r4, r2]
   17dd8:	cmp	ip, r3
   17ddc:	beq	17e00 <__assert_fail@plt+0x6460>
   17de0:	cmp	r2, #0
   17de4:	beq	17e54 <__assert_fail@plt+0x64b4>
   17de8:	ldr	ip, [r0, r2, lsl #2]
   17dec:	sub	r2, r2, ip
   17df0:	add	r5, r5, ip
   17df4:	ldrb	ip, [r4, r2]
   17df8:	cmp	ip, r3
   17dfc:	bne	17de0 <__assert_fail@plt+0x6440>
   17e00:	add	r2, r2, #1
   17e04:	add	ip, r1, #1
   17e08:	cmp	r6, r2
   17e0c:	beq	17e74 <__assert_fail@plt+0x64d4>
   17e10:	ldrb	r3, [r1, #1]
   17e14:	mov	r1, ip
   17e18:	cmp	r3, #0
   17e1c:	bne	17dd4 <__assert_fail@plt+0x6434>
   17e20:	bl	332dc <__assert_fail@plt+0x2193c>
   17e24:	mov	r0, #1
   17e28:	sub	sp, fp, #20
   17e2c:	ldrd	r4, [sp]
   17e30:	ldrd	r6, [sp, #8]
   17e34:	ldr	fp, [sp, #16]
   17e38:	add	sp, sp, #20
   17e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e40:	bl	33284 <__assert_fail@plt+0x218e4>
   17e44:	cmp	r0, #0
   17e48:	bne	17d5c <__assert_fail@plt+0x63bc>
   17e4c:	mov	r0, #0
   17e50:	b	17e28 <__assert_fail@plt+0x6488>
   17e54:	ldrb	r3, [r1, #1]
   17e58:	add	r5, r5, #1
   17e5c:	add	r1, r1, #1
   17e60:	b	17e18 <__assert_fail@plt+0x6478>
   17e64:	add	ip, ip, #1
   17e68:	sub	r1, r3, ip
   17e6c:	str	r1, [r0, r3, lsl #2]
   17e70:	b	17db0 <__assert_fail@plt+0x6410>
   17e74:	str	r5, [r7]
   17e78:	b	17e20 <__assert_fail@plt+0x6480>
   17e7c:	movw	r3, #19656	; 0x4cc8
   17e80:	movt	r3, #3
   17e84:	str	r4, [sp, #-8]!
   17e88:	movw	r1, #19556	; 0x4c64
   17e8c:	movt	r1, #3
   17e90:	str	lr, [sp, #4]
   17e94:	movw	r0, #19568	; 0x4c70
   17e98:	movt	r0, #3
   17e9c:	mov	r2, #172	; 0xac
   17ea0:	bl	119a0 <__assert_fail@plt>
   17ea4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17ea8:	mov	r4, r1
   17eac:	strd	r6, [sp, #8]
   17eb0:	strd	r8, [sp, #16]
   17eb4:	strd	sl, [sp, #24]
   17eb8:	add	fp, sp, #32
   17ebc:	str	lr, [sp, #32]
   17ec0:	sub	sp, sp, #188	; 0xbc
   17ec4:	str	r2, [fp, #-216]	; 0xffffff28
   17ec8:	str	r0, [fp, #-212]	; 0xffffff2c
   17ecc:	mov	r0, r1
   17ed0:	bl	17aec <__assert_fail@plt+0x614c>
   17ed4:	mov	r3, #44	; 0x2c
   17ed8:	str	r0, [fp, #-208]	; 0xffffff30
   17edc:	umull	r0, r1, r0, r3
   17ee0:	adds	r2, r1, #0
   17ee4:	movne	r2, #1
   17ee8:	cmp	r0, #0
   17eec:	blt	182b8 <__assert_fail@plt+0x6918>
   17ef0:	cmp	r2, #0
   17ef4:	bne	182b8 <__assert_fail@plt+0x6918>
   17ef8:	ldr	r2, [fp, #-208]	; 0xffffff30
   17efc:	mul	r0, r3, r2
   17f00:	cmp	r0, #4016	; 0xfb0
   17f04:	bhi	182d8 <__assert_fail@plt+0x6938>
   17f08:	add	r3, r0, #22
   17f0c:	bic	r3, r3, #7
   17f10:	sub	sp, sp, r3
   17f14:	add	r3, sp, #15
   17f18:	bic	sl, r3, #15
   17f1c:	cmp	sl, #0
   17f20:	beq	182b8 <__assert_fail@plt+0x6918>
   17f24:	ldr	r3, [fp, #-208]	; 0xffffff30
   17f28:	mov	r0, #0
   17f2c:	mov	r1, #0
   17f30:	movw	r8, #21632	; 0x5480
   17f34:	movt	r8, #3
   17f38:	add	r5, sl, #16
   17f3c:	strd	r0, [fp, #-200]	; 0xffffff38
   17f40:	str	r4, [fp, #-188]	; 0xffffff44
   17f44:	add	r9, r3, r3, lsl #2
   17f48:	mov	r3, #0
   17f4c:	mov	r6, r3
   17f50:	add	r9, sl, r9, lsl #3
   17f54:	str	r9, [fp, #-220]	; 0xffffff24
   17f58:	strb	r3, [fp, #-204]	; 0xffffff34
   17f5c:	strb	r3, [fp, #-192]	; 0xffffff40
   17f60:	b	17fe4 <__assert_fail@plt+0x6644>
   17f64:	ldrb	r3, [r4]
   17f68:	lsr	r2, r3, #5
   17f6c:	and	r3, r3, #31
   17f70:	ldr	r2, [r8, r2, lsl #2]
   17f74:	lsr	r3, r2, r3
   17f78:	tst	r3, #1
   17f7c:	beq	182e4 <__assert_fail@plt+0x6944>
   17f80:	mov	r3, #1
   17f84:	str	r3, [fp, #-184]	; 0xffffff48
   17f88:	ldrb	r2, [r4]
   17f8c:	strb	r3, [fp, #-192]	; 0xffffff40
   17f90:	strb	r3, [fp, #-180]	; 0xffffff4c
   17f94:	mov	r4, r2
   17f98:	str	r2, [fp, #-176]	; 0xffffff50
   17f9c:	cmp	r4, #0
   17fa0:	beq	1805c <__assert_fail@plt+0x66bc>
   17fa4:	mov	r9, #1
   17fa8:	ldr	r4, [fp, #-188]	; 0xffffff44
   17fac:	sub	r2, fp, #172	; 0xac
   17fb0:	ldr	r7, [fp, #-184]	; 0xffffff48
   17fb4:	cmp	r4, r2
   17fb8:	strne	r4, [r5, #-16]
   17fbc:	beq	18304 <__assert_fail@plt+0x6964>
   17fc0:	cmp	r9, #0
   17fc4:	add	r4, r4, r7
   17fc8:	str	r7, [r5, #-12]
   17fcc:	ldrne	r3, [fp, #-176]	; 0xffffff50
   17fd0:	add	r5, r5, #40	; 0x28
   17fd4:	strb	r9, [r5, #-48]	; 0xffffffd0
   17fd8:	strb	r6, [fp, #-192]	; 0xffffff40
   17fdc:	str	r4, [fp, #-188]	; 0xffffff44
   17fe0:	strne	r3, [r5, #-44]	; 0xffffffd4
   17fe4:	ldrb	r3, [fp, #-204]	; 0xffffff34
   17fe8:	cmp	r3, #0
   17fec:	subne	r7, fp, #200	; 0xc8
   17ff0:	beq	17f64 <__assert_fail@plt+0x65c4>
   17ff4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17ff8:	mov	r1, r0
   17ffc:	mov	r0, r4
   18000:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   18004:	mov	r2, r0
   18008:	mov	r3, r7
   1800c:	mov	r1, r4
   18010:	sub	r0, fp, #176	; 0xb0
   18014:	bl	1f100 <__assert_fail@plt+0xd760>
   18018:	cmn	r0, #1
   1801c:	str	r0, [fp, #-184]	; 0xffffff48
   18020:	beq	1831c <__assert_fail@plt+0x697c>
   18024:	cmn	r0, #2
   18028:	beq	18334 <__assert_fail@plt+0x6994>
   1802c:	cmp	r0, #0
   18030:	beq	18354 <__assert_fail@plt+0x69b4>
   18034:	ldr	r4, [fp, #-176]	; 0xffffff50
   18038:	mov	r9, #1
   1803c:	mov	r0, r7
   18040:	strb	r9, [fp, #-180]	; 0xffffff4c
   18044:	bl	11604 <mbsinit@plt>
   18048:	cmp	r0, #0
   1804c:	strb	r9, [fp, #-192]	; 0xffffff40
   18050:	strbne	r6, [fp, #-204]	; 0xffffff34
   18054:	cmp	r4, #0
   18058:	bne	17fa4 <__assert_fail@plt+0x6604>
   1805c:	ldr	r9, [fp, #-220]	; 0xffffff24
   18060:	mov	r3, #1
   18064:	mov	r7, r4
   18068:	ldr	r2, [fp, #-208]	; 0xffffff30
   1806c:	str	r3, [r9, #4]
   18070:	cmp	r2, #2
   18074:	bls	180fc <__assert_fail@plt+0x675c>
   18078:	mov	r6, r2
   1807c:	mov	r5, sl
   18080:	str	r4, [fp, #-220]	; 0xffffff24
   18084:	mov	r8, #2
   18088:	ldrb	r3, [r5, #48]	; 0x30
   1808c:	cmp	r3, #0
   18090:	bne	1839c <__assert_fail@plt+0x69fc>
   18094:	ldr	r7, [r5, #44]	; 0x2c
   18098:	b	180ac <__assert_fail@plt+0x670c>
   1809c:	cmp	r4, #0
   180a0:	beq	180e0 <__assert_fail@plt+0x6740>
   180a4:	ldr	r3, [r9, r4, lsl #2]
   180a8:	sub	r4, r4, r3
   180ac:	add	r3, r4, r4, lsl #2
   180b0:	add	r2, sl, r3, lsl #3
   180b4:	ldr	r2, [r2, #4]
   180b8:	cmp	r7, r2
   180bc:	bne	1809c <__assert_fail@plt+0x66fc>
   180c0:	mov	r2, r7
   180c4:	ldr	r1, [sl, r3, lsl #3]
   180c8:	ldr	r0, [r5, #40]	; 0x28
   180cc:	bl	1161c <memcmp@plt>
   180d0:	cmp	r0, #0
   180d4:	beq	183d4 <__assert_fail@plt+0x6a34>
   180d8:	cmp	r4, #0
   180dc:	bne	180a4 <__assert_fail@plt+0x6704>
   180e0:	str	r8, [r9, r8, lsl #2]
   180e4:	add	r8, r8, #1
   180e8:	mov	r4, #0
   180ec:	cmp	r6, r8
   180f0:	add	r5, r5, #40	; 0x28
   180f4:	bne	18088 <__assert_fail@plt+0x66e8>
   180f8:	ldr	r7, [fp, #-220]	; 0xffffff24
   180fc:	mov	r1, #0
   18100:	mov	r0, #0
   18104:	ldr	r3, [fp, #-212]	; 0xffffff2c
   18108:	mov	r2, #0
   1810c:	movw	ip, #21632	; 0x5480
   18110:	movt	ip, #3
   18114:	mov	r6, #1
   18118:	str	r9, [fp, #-212]	; 0xffffff2c
   1811c:	strd	r0, [fp, #-144]	; 0xffffff70
   18120:	mov	r9, ip
   18124:	strd	r0, [fp, #-88]	; 0xffffffa8
   18128:	ldr	r1, [fp, #-216]	; 0xffffff28
   1812c:	strb	r2, [fp, #-148]	; 0xffffff6c
   18130:	str	r3, [fp, #-132]	; 0xffffff7c
   18134:	str	r3, [fp, #-76]	; 0xffffffb4
   18138:	mov	r3, r2
   1813c:	strb	r2, [fp, #-136]	; 0xffffff78
   18140:	strb	r2, [fp, #-92]	; 0xffffffa4
   18144:	strb	r2, [fp, #-80]	; 0xffffffb0
   18148:	str	r2, [r1]
   1814c:	cmp	r3, #0
   18150:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   18154:	beq	18208 <__assert_fail@plt+0x6868>
   18158:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1815c:	cmp	r3, #0
   18160:	bne	1870c <__assert_fail@plt+0x6d6c>
   18164:	add	r3, r7, r7, lsl #2
   18168:	add	r3, sl, r3, lsl #3
   1816c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   18170:	ldr	r2, [r3, #4]
   18174:	cmp	r2, r4
   18178:	beq	18470 <__assert_fail@plt+0x6ad0>
   1817c:	cmp	r7, #0
   18180:	bne	18494 <__assert_fail@plt+0x6af4>
   18184:	ldrb	r3, [fp, #-136]	; 0xffffff78
   18188:	cmp	r3, #0
   1818c:	bne	186f8 <__assert_fail@plt+0x6d58>
   18190:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   18194:	ldr	r4, [fp, #-132]	; 0xffffff7c
   18198:	cmp	r3, #0
   1819c:	subne	r8, fp, #144	; 0x90
   181a0:	bne	18654 <__assert_fail@plt+0x6cb4>
   181a4:	ldrb	r3, [r4]
   181a8:	lsr	r2, r3, #5
   181ac:	and	r3, r3, #31
   181b0:	ldr	r2, [r9, r2, lsl #2]
   181b4:	lsr	r3, r2, r3
   181b8:	tst	r3, #1
   181bc:	beq	1863c <__assert_fail@plt+0x6c9c>
   181c0:	str	r6, [fp, #-128]	; 0xffffff80
   181c4:	ldrb	r4, [r4]
   181c8:	strb	r6, [fp, #-136]	; 0xffffff78
   181cc:	strb	r6, [fp, #-124]	; 0xffffff84
   181d0:	str	r4, [fp, #-120]	; 0xffffff88
   181d4:	cmp	r4, #0
   181d8:	beq	18530 <__assert_fail@plt+0x6b90>
   181dc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   181e0:	mov	r3, #0
   181e4:	ldr	r2, [fp, #-128]	; 0xffffff80
   181e8:	strb	r3, [fp, #-136]	; 0xffffff78
   181ec:	strb	r3, [fp, #-80]	; 0xffffffb0
   181f0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   181f4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   181f8:	add	r4, r4, r2
   181fc:	str	r4, [fp, #-132]	; 0xffffff7c
   18200:	add	r5, r5, r3
   18204:	str	r5, [fp, #-76]	; 0xffffffb4
   18208:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   1820c:	cmp	r3, #0
   18210:	subne	r4, fp, #88	; 0x58
   18214:	bne	1840c <__assert_fail@plt+0x6a6c>
   18218:	ldrb	r3, [r5]
   1821c:	lsr	r2, r3, #5
   18220:	and	r3, r3, #31
   18224:	ldr	r2, [r9, r2, lsl #2]
   18228:	lsr	r3, r2, r3
   1822c:	tst	r3, #1
   18230:	beq	183f4 <__assert_fail@plt+0x6a54>
   18234:	str	r6, [fp, #-72]	; 0xffffffb8
   18238:	ldrb	r3, [r5]
   1823c:	strb	r6, [fp, #-80]	; 0xffffffb0
   18240:	strb	r6, [fp, #-68]	; 0xffffffbc
   18244:	mov	r5, r3
   18248:	str	r3, [fp, #-64]	; 0xffffffc0
   1824c:	cmp	r5, #0
   18250:	beq	182a8 <__assert_fail@plt+0x6908>
   18254:	add	r3, r7, r7, lsl #2
   18258:	add	r3, sl, r3, lsl #3
   1825c:	ldrb	r2, [r3, #8]
   18260:	cmp	r2, #0
   18264:	beq	1816c <__assert_fail@plt+0x67cc>
   18268:	ldr	r3, [r3, #12]
   1826c:	cmp	r3, r5
   18270:	bne	1817c <__assert_fail@plt+0x67dc>
   18274:	ldr	r5, [fp, #-76]	; 0xffffffb4
   18278:	ldr	r4, [fp, #-72]	; 0xffffffb8
   1827c:	add	r7, r7, #1
   18280:	add	r5, r5, r4
   18284:	ldr	r2, [fp, #-208]	; 0xffffff30
   18288:	mov	r3, #0
   1828c:	strb	r3, [fp, #-80]	; 0xffffffb0
   18290:	str	r5, [fp, #-76]	; 0xffffffb4
   18294:	cmp	r2, r7
   18298:	bne	18208 <__assert_fail@plt+0x6868>
   1829c:	ldr	r2, [fp, #-216]	; 0xffffff28
   182a0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   182a4:	str	r3, [r2]
   182a8:	mov	r0, sl
   182ac:	bl	332dc <__assert_fail@plt+0x2193c>
   182b0:	mov	r0, #1
   182b4:	b	182bc <__assert_fail@plt+0x691c>
   182b8:	mov	r0, #0
   182bc:	sub	sp, fp, #32
   182c0:	ldrd	r4, [sp]
   182c4:	ldrd	r6, [sp, #8]
   182c8:	ldrd	r8, [sp, #16]
   182cc:	ldrd	sl, [sp, #24]
   182d0:	add	sp, sp, #32
   182d4:	pop	{pc}		; (ldr pc, [sp], #4)
   182d8:	bl	33284 <__assert_fail@plt+0x218e4>
   182dc:	mov	sl, r0
   182e0:	b	17f1c <__assert_fail@plt+0x657c>
   182e4:	sub	r7, fp, #200	; 0xc8
   182e8:	mov	r0, r7
   182ec:	bl	11604 <mbsinit@plt>
   182f0:	cmp	r0, #0
   182f4:	beq	18770 <__assert_fail@plt+0x6dd0>
   182f8:	mov	r3, #1
   182fc:	strb	r3, [fp, #-204]	; 0xffffff34
   18300:	b	17ff4 <__assert_fail@plt+0x6654>
   18304:	mov	r2, r7
   18308:	mov	r1, r4
   1830c:	mov	r0, r5
   18310:	bl	115d4 <memcpy@plt>
   18314:	str	r5, [r5, #-16]
   18318:	b	17fc0 <__assert_fail@plt+0x6620>
   1831c:	mov	r2, #1
   18320:	mov	r9, #0
   18324:	strb	r2, [fp, #-192]	; 0xffffff40
   18328:	str	r2, [fp, #-184]	; 0xffffff48
   1832c:	strb	r6, [fp, #-180]	; 0xffffff4c
   18330:	b	17fa8 <__assert_fail@plt+0x6608>
   18334:	ldr	r0, [fp, #-188]	; 0xffffff44
   18338:	mov	r9, #0
   1833c:	bl	117a8 <strlen@plt>
   18340:	mov	r2, #1
   18344:	strb	r2, [fp, #-192]	; 0xffffff40
   18348:	str	r0, [fp, #-184]	; 0xffffff48
   1834c:	strb	r6, [fp, #-180]	; 0xffffff4c
   18350:	b	17fa8 <__assert_fail@plt+0x6608>
   18354:	ldr	r3, [fp, #-188]	; 0xffffff44
   18358:	mov	r2, #1
   1835c:	str	r2, [fp, #-184]	; 0xffffff48
   18360:	ldrb	r3, [r3]
   18364:	cmp	r3, #0
   18368:	bne	18790 <__assert_fail@plt+0x6df0>
   1836c:	ldr	r4, [fp, #-176]	; 0xffffff50
   18370:	cmp	r4, #0
   18374:	beq	18038 <__assert_fail@plt+0x6698>
   18378:	bl	17e7c <__assert_fail@plt+0x64dc>
   1837c:	ldr	r3, [r3, #12]
   18380:	ldr	r2, [r5, #52]	; 0x34
   18384:	cmp	r2, r3
   18388:	beq	183d4 <__assert_fail@plt+0x6a34>
   1838c:	cmp	r4, #0
   18390:	beq	180e0 <__assert_fail@plt+0x6740>
   18394:	ldr	r3, [r9, r4, lsl #2]
   18398:	sub	r4, r4, r3
   1839c:	add	r3, r4, r4, lsl #2
   183a0:	add	r3, sl, r3, lsl #3
   183a4:	ldrb	r2, [r3, #8]
   183a8:	cmp	r2, #0
   183ac:	bne	1837c <__assert_fail@plt+0x69dc>
   183b0:	ldr	r1, [r3, #4]
   183b4:	ldr	r2, [r5, #44]	; 0x2c
   183b8:	cmp	r2, r1
   183bc:	bne	1838c <__assert_fail@plt+0x69ec>
   183c0:	ldr	r1, [r3]
   183c4:	ldr	r0, [r5, #40]	; 0x28
   183c8:	bl	1161c <memcmp@plt>
   183cc:	cmp	r0, #0
   183d0:	bne	1838c <__assert_fail@plt+0x69ec>
   183d4:	add	r4, r4, #1
   183d8:	add	r5, r5, #40	; 0x28
   183dc:	sub	r3, r8, r4
   183e0:	str	r3, [r9, r8, lsl #2]
   183e4:	add	r8, r8, #1
   183e8:	cmp	r6, r8
   183ec:	bne	18088 <__assert_fail@plt+0x66e8>
   183f0:	b	180f8 <__assert_fail@plt+0x6758>
   183f4:	sub	r4, fp, #88	; 0x58
   183f8:	mov	r0, r4
   183fc:	bl	11604 <mbsinit@plt>
   18400:	cmp	r0, #0
   18404:	beq	18770 <__assert_fail@plt+0x6dd0>
   18408:	strb	r6, [fp, #-92]	; 0xffffffa4
   1840c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18410:	mov	r1, r0
   18414:	mov	r0, r5
   18418:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   1841c:	mov	r2, r0
   18420:	mov	r3, r4
   18424:	mov	r1, r5
   18428:	sub	r0, fp, #64	; 0x40
   1842c:	bl	1f100 <__assert_fail@plt+0xd760>
   18430:	cmn	r0, #1
   18434:	str	r0, [fp, #-72]	; 0xffffffb8
   18438:	beq	18628 <__assert_fail@plt+0x6c88>
   1843c:	cmn	r0, #2
   18440:	beq	186b8 <__assert_fail@plt+0x6d18>
   18444:	cmp	r0, #0
   18448:	beq	186d4 <__assert_fail@plt+0x6d34>
   1844c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   18450:	mov	r0, r4
   18454:	strb	r6, [fp, #-68]	; 0xffffffbc
   18458:	bl	11604 <mbsinit@plt>
   1845c:	cmp	r0, #0
   18460:	strb	r6, [fp, #-80]	; 0xffffffb0
   18464:	movne	r3, #0
   18468:	strbne	r3, [fp, #-92]	; 0xffffffa4
   1846c:	b	1824c <__assert_fail@plt+0x68ac>
   18470:	ldr	r5, [fp, #-76]	; 0xffffffb4
   18474:	mov	r2, r4
   18478:	ldr	r0, [r3]
   1847c:	mov	r1, r5
   18480:	bl	1161c <memcmp@plt>
   18484:	cmp	r0, #0
   18488:	beq	1827c <__assert_fail@plt+0x68dc>
   1848c:	cmp	r7, #0
   18490:	beq	18184 <__assert_fail@plt+0x67e4>
   18494:	ldr	r3, [fp, #-212]	; 0xffffff2c
   18498:	ldr	r5, [r3, r7, lsl #2]
   1849c:	cmp	r5, #0
   184a0:	sub	r7, r7, r5
   184a4:	beq	18158 <__assert_fail@plt+0x67b8>
   184a8:	ldrb	r3, [fp, #-136]	; 0xffffff78
   184ac:	cmp	r3, #0
   184b0:	beq	18714 <__assert_fail@plt+0x6d74>
   184b4:	ldrb	r3, [fp, #-124]	; 0xffffff84
   184b8:	cmp	r3, #0
   184bc:	bne	18620 <__assert_fail@plt+0x6c80>
   184c0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   184c4:	mov	r2, #0
   184c8:	subs	r5, r5, #1
   184cc:	ldr	r3, [fp, #-128]	; 0xffffff80
   184d0:	strb	r2, [fp, #-136]	; 0xffffff78
   184d4:	add	r4, r4, r3
   184d8:	ldrbeq	r3, [fp, #-80]	; 0xffffffb0
   184dc:	str	r4, [fp, #-132]	; 0xffffff7c
   184e0:	beq	1814c <__assert_fail@plt+0x67ac>
   184e4:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   184e8:	cmp	r3, #0
   184ec:	subne	r8, fp, #144	; 0x90
   184f0:	bne	1854c <__assert_fail@plt+0x6bac>
   184f4:	ldrb	r3, [r4]
   184f8:	lsr	r2, r3, #5
   184fc:	and	r3, r3, #31
   18500:	ldr	r2, [r9, r2, lsl #2]
   18504:	lsr	r3, r2, r3
   18508:	tst	r3, #1
   1850c:	beq	18534 <__assert_fail@plt+0x6b94>
   18510:	str	r6, [fp, #-128]	; 0xffffff80
   18514:	ldrb	r3, [r4]
   18518:	strb	r6, [fp, #-136]	; 0xffffff78
   1851c:	strb	r6, [fp, #-124]	; 0xffffff84
   18520:	mov	r4, r3
   18524:	str	r3, [fp, #-120]	; 0xffffff88
   18528:	cmp	r4, #0
   1852c:	bne	184c0 <__assert_fail@plt+0x6b20>
   18530:	bl	11964 <abort@plt>
   18534:	sub	r8, fp, #144	; 0x90
   18538:	mov	r0, r8
   1853c:	bl	11604 <mbsinit@plt>
   18540:	cmp	r0, #0
   18544:	beq	18770 <__assert_fail@plt+0x6dd0>
   18548:	strb	r6, [fp, #-148]	; 0xffffff6c
   1854c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18550:	mov	r1, r0
   18554:	mov	r0, r4
   18558:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   1855c:	mov	r2, r0
   18560:	mov	r3, r8
   18564:	mov	r1, r4
   18568:	sub	r0, fp, #120	; 0x78
   1856c:	bl	1f100 <__assert_fail@plt+0xd760>
   18570:	cmn	r0, #1
   18574:	str	r0, [fp, #-128]	; 0xffffff80
   18578:	beq	185b0 <__assert_fail@plt+0x6c10>
   1857c:	cmn	r0, #2
   18580:	beq	185c4 <__assert_fail@plt+0x6c24>
   18584:	cmp	r0, #0
   18588:	beq	185e0 <__assert_fail@plt+0x6c40>
   1858c:	ldr	r4, [fp, #-120]	; 0xffffff88
   18590:	mov	r0, r8
   18594:	strb	r6, [fp, #-124]	; 0xffffff84
   18598:	bl	11604 <mbsinit@plt>
   1859c:	cmp	r0, #0
   185a0:	strb	r6, [fp, #-136]	; 0xffffff78
   185a4:	movne	r3, #0
   185a8:	strbne	r3, [fp, #-148]	; 0xffffff6c
   185ac:	b	18528 <__assert_fail@plt+0x6b88>
   185b0:	mov	r3, #0
   185b4:	str	r6, [fp, #-128]	; 0xffffff80
   185b8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   185bc:	strb	r3, [fp, #-124]	; 0xffffff84
   185c0:	b	184c4 <__assert_fail@plt+0x6b24>
   185c4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   185c8:	mov	r0, r4
   185cc:	bl	117a8 <strlen@plt>
   185d0:	mov	r3, #0
   185d4:	str	r0, [fp, #-128]	; 0xffffff80
   185d8:	strb	r3, [fp, #-124]	; 0xffffff84
   185dc:	b	184c4 <__assert_fail@plt+0x6b24>
   185e0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   185e4:	str	r6, [fp, #-128]	; 0xffffff80
   185e8:	ldrb	r3, [r4]
   185ec:	cmp	r3, #0
   185f0:	bne	18790 <__assert_fail@plt+0x6df0>
   185f4:	ldr	r4, [fp, #-120]	; 0xffffff88
   185f8:	cmp	r4, #0
   185fc:	beq	18590 <__assert_fail@plt+0x6bf0>
   18600:	movw	r3, #19656	; 0x4cc8
   18604:	movt	r3, #3
   18608:	movw	r1, #19556	; 0x4c64
   1860c:	movt	r1, #3
   18610:	movw	r0, #19568	; 0x4c70
   18614:	movt	r0, #3
   18618:	mov	r2, #172	; 0xac
   1861c:	bl	119a0 <__assert_fail@plt>
   18620:	ldr	r4, [fp, #-120]	; 0xffffff88
   18624:	b	18528 <__assert_fail@plt+0x6b88>
   18628:	mov	r3, #0
   1862c:	strb	r6, [fp, #-80]	; 0xffffffb0
   18630:	str	r6, [fp, #-72]	; 0xffffffb8
   18634:	strb	r3, [fp, #-68]	; 0xffffffbc
   18638:	b	18164 <__assert_fail@plt+0x67c4>
   1863c:	sub	r8, fp, #144	; 0x90
   18640:	mov	r0, r8
   18644:	bl	11604 <mbsinit@plt>
   18648:	cmp	r0, #0
   1864c:	beq	18770 <__assert_fail@plt+0x6dd0>
   18650:	strb	r6, [fp, #-148]	; 0xffffff6c
   18654:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18658:	mov	r1, r0
   1865c:	mov	r0, r4
   18660:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   18664:	mov	r2, r0
   18668:	mov	r3, r8
   1866c:	mov	r1, r4
   18670:	sub	r0, fp, #120	; 0x78
   18674:	bl	1f100 <__assert_fail@plt+0xd760>
   18678:	cmn	r0, #1
   1867c:	str	r0, [fp, #-128]	; 0xffffff80
   18680:	beq	1871c <__assert_fail@plt+0x6d7c>
   18684:	cmn	r0, #2
   18688:	beq	18730 <__assert_fail@plt+0x6d90>
   1868c:	cmp	r0, #0
   18690:	beq	1874c <__assert_fail@plt+0x6dac>
   18694:	ldr	r4, [fp, #-120]	; 0xffffff88
   18698:	mov	r0, r8
   1869c:	strb	r6, [fp, #-124]	; 0xffffff84
   186a0:	bl	11604 <mbsinit@plt>
   186a4:	cmp	r0, #0
   186a8:	strb	r6, [fp, #-136]	; 0xffffff78
   186ac:	movne	r3, #0
   186b0:	strbne	r3, [fp, #-148]	; 0xffffff6c
   186b4:	b	181d4 <__assert_fail@plt+0x6834>
   186b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   186bc:	bl	117a8 <strlen@plt>
   186c0:	mov	r3, #0
   186c4:	strb	r6, [fp, #-80]	; 0xffffffb0
   186c8:	str	r0, [fp, #-72]	; 0xffffffb8
   186cc:	strb	r3, [fp, #-68]	; 0xffffffbc
   186d0:	b	18164 <__assert_fail@plt+0x67c4>
   186d4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   186d8:	str	r6, [fp, #-72]	; 0xffffffb8
   186dc:	ldrb	r3, [r5]
   186e0:	cmp	r3, #0
   186e4:	bne	18790 <__assert_fail@plt+0x6df0>
   186e8:	ldr	r5, [fp, #-64]	; 0xffffffc0
   186ec:	cmp	r5, #0
   186f0:	beq	18450 <__assert_fail@plt+0x6ab0>
   186f4:	b	18378 <__assert_fail@plt+0x69d8>
   186f8:	ldrb	r3, [fp, #-124]	; 0xffffff84
   186fc:	cmp	r3, #0
   18700:	beq	181dc <__assert_fail@plt+0x683c>
   18704:	ldr	r4, [fp, #-120]	; 0xffffff88
   18708:	b	181d4 <__assert_fail@plt+0x6834>
   1870c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   18710:	b	1824c <__assert_fail@plt+0x68ac>
   18714:	ldr	r4, [fp, #-132]	; 0xffffff7c
   18718:	b	184e4 <__assert_fail@plt+0x6b44>
   1871c:	mov	r3, #0
   18720:	str	r6, [fp, #-128]	; 0xffffff80
   18724:	ldr	r4, [fp, #-132]	; 0xffffff7c
   18728:	strb	r3, [fp, #-124]	; 0xffffff84
   1872c:	b	181e0 <__assert_fail@plt+0x6840>
   18730:	ldr	r4, [fp, #-132]	; 0xffffff7c
   18734:	mov	r0, r4
   18738:	bl	117a8 <strlen@plt>
   1873c:	mov	r3, #0
   18740:	str	r0, [fp, #-128]	; 0xffffff80
   18744:	strb	r3, [fp, #-124]	; 0xffffff84
   18748:	b	181e0 <__assert_fail@plt+0x6840>
   1874c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   18750:	str	r6, [fp, #-128]	; 0xffffff80
   18754:	ldrb	r3, [r4]
   18758:	cmp	r3, #0
   1875c:	bne	18790 <__assert_fail@plt+0x6df0>
   18760:	ldr	r4, [fp, #-120]	; 0xffffff88
   18764:	cmp	r4, #0
   18768:	beq	18698 <__assert_fail@plt+0x6cf8>
   1876c:	b	18378 <__assert_fail@plt+0x69d8>
   18770:	movw	r3, #19656	; 0x4cc8
   18774:	movt	r3, #3
   18778:	movw	r1, #19556	; 0x4c64
   1877c:	movt	r1, #3
   18780:	movw	r0, #19588	; 0x4c84
   18784:	movt	r0, #3
   18788:	mov	r2, #143	; 0x8f
   1878c:	bl	119a0 <__assert_fail@plt>
   18790:	movw	r3, #19656	; 0x4cc8
   18794:	movt	r3, #3
   18798:	movw	r1, #19556	; 0x4c64
   1879c:	movt	r1, #3
   187a0:	movw	r0, #19612	; 0x4c9c
   187a4:	movt	r0, #3
   187a8:	mov	r2, #171	; 0xab
   187ac:	bl	119a0 <__assert_fail@plt>
   187b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   187b4:	mov	r4, r0
   187b8:	strd	r6, [sp, #8]
   187bc:	strd	r8, [sp, #16]
   187c0:	mov	r8, r1
   187c4:	strd	sl, [sp, #24]
   187c8:	str	lr, [sp, #32]
   187cc:	sub	sp, sp, #316	; 0x13c
   187d0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   187d4:	cmp	r0, #1
   187d8:	bhi	189c8 <__assert_fail@plt+0x7028>
   187dc:	ldrb	r9, [r8]
   187e0:	cmp	r9, #0
   187e4:	beq	18944 <__assert_fail@plt+0x6fa4>
   187e8:	ldrb	r3, [r4]
   187ec:	add	r2, r8, #1
   187f0:	str	r2, [sp, #4]
   187f4:	cmp	r3, #0
   187f8:	beq	18ea0 <__assert_fail@plt+0x7500>
   187fc:	mov	r6, #0
   18800:	mov	fp, r8
   18804:	mov	ip, r6
   18808:	mov	sl, r6
   1880c:	mov	r0, #1
   18810:	b	18868 <__assert_fail@plt+0x6ec8>
   18814:	cmp	fp, #0
   18818:	beq	18838 <__assert_fail@plt+0x6e98>
   1881c:	mov	r0, fp
   18820:	sub	r1, r5, sl
   18824:	bl	11874 <strnlen@plt>
   18828:	ldrb	r3, [fp, r0]!
   1882c:	cmp	r3, #0
   18830:	bne	19180 <__assert_fail@plt+0x77e0>
   18834:	mov	sl, r5
   18838:	mov	r0, r8
   1883c:	bl	117a8 <strlen@plt>
   18840:	mov	r2, r0
   18844:	add	r3, sp, #256	; 0x100
   18848:	mov	r1, r8
   1884c:	mov	r0, r7
   18850:	bl	17cf8 <__assert_fail@plt+0x6358>
   18854:	cmp	r0, #0
   18858:	bne	19438 <__assert_fail@plt+0x7a98>
   1885c:	mov	fp, r0
   18860:	mov	r4, r7
   18864:	mov	ip, r5
   18868:	mov	r7, r4
   1886c:	add	r6, r6, #1
   18870:	ldrb	r3, [r7], #1
   18874:	add	r5, ip, #1
   18878:	cmp	r3, r9
   1887c:	beq	18964 <__assert_fail@plt+0x6fc4>
   18880:	ldrb	r3, [r4, #1]
   18884:	cmp	r3, #0
   18888:	beq	18ea0 <__assert_fail@plt+0x7500>
   1888c:	cmp	r6, #9
   18890:	movls	r4, #0
   18894:	andhi	r4, r0, #1
   18898:	cmp	r4, #0
   1889c:	beq	18860 <__assert_fail@plt+0x6ec0>
   188a0:	add	r3, r6, r6, lsl #2
   188a4:	cmp	r5, r3
   188a8:	bcs	18814 <__assert_fail@plt+0x6e74>
   188ac:	mov	r0, r4
   188b0:	b	18860 <__assert_fail@plt+0x6ec0>
   188b4:	add	r0, sp, #36	; 0x24
   188b8:	bl	11604 <mbsinit@plt>
   188bc:	cmp	r0, #0
   188c0:	beq	19440 <__assert_fail@plt+0x7aa0>
   188c4:	mov	r6, #1
   188c8:	strb	r6, [sp, #32]
   188cc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   188d0:	mov	r1, r0
   188d4:	mov	r0, r8
   188d8:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   188dc:	mov	r2, r0
   188e0:	add	r3, sp, #36	; 0x24
   188e4:	mov	r1, r8
   188e8:	add	r0, sp, #60	; 0x3c
   188ec:	bl	1f100 <__assert_fail@plt+0xd760>
   188f0:	cmn	r0, #1
   188f4:	str	r0, [sp, #52]	; 0x34
   188f8:	strbeq	r6, [sp, #44]	; 0x2c
   188fc:	streq	r6, [sp, #52]	; 0x34
   18900:	strbeq	r5, [sp, #56]	; 0x38
   18904:	beq	18a38 <__assert_fail@plt+0x7098>
   18908:	cmn	r0, #2
   1890c:	beq	18a24 <__assert_fail@plt+0x7084>
   18910:	cmp	r0, #0
   18914:	beq	193a4 <__assert_fail@plt+0x7a04>
   18918:	ldr	r5, [sp, #60]	; 0x3c
   1891c:	mov	r6, #1
   18920:	add	r0, sp, #36	; 0x24
   18924:	strb	r6, [sp, #56]	; 0x38
   18928:	bl	11604 <mbsinit@plt>
   1892c:	cmp	r0, #0
   18930:	strb	r6, [sp, #44]	; 0x2c
   18934:	movne	r3, #0
   18938:	strbne	r3, [sp, #32]
   1893c:	cmp	r5, #0
   18940:	bne	18a38 <__assert_fail@plt+0x7098>
   18944:	mov	r0, r4
   18948:	add	sp, sp, #316	; 0x13c
   1894c:	ldrd	r4, [sp]
   18950:	ldrd	r6, [sp, #8]
   18954:	ldrd	r8, [sp, #16]
   18958:	ldrd	sl, [sp, #24]
   1895c:	add	sp, sp, #32
   18960:	pop	{pc}		; (ldr pc, [sp], #4)
   18964:	ldrb	r3, [r8, #1]
   18968:	cmp	r3, #0
   1896c:	beq	18944 <__assert_fail@plt+0x6fa4>
   18970:	ldrb	r2, [r7]
   18974:	cmp	r2, #0
   18978:	beq	18ea0 <__assert_fail@plt+0x7500>
   1897c:	cmp	r3, r2
   18980:	add	r5, ip, #2
   18984:	bne	1888c <__assert_fail@plt+0x6eec>
   18988:	ldr	r3, [sp, #4]
   1898c:	mov	r1, r7
   18990:	add	r3, r3, #1
   18994:	b	189b8 <__assert_fail@plt+0x7018>
   18998:	ldrb	lr, [r1, #1]!
   1899c:	cmp	lr, #0
   189a0:	beq	18ea0 <__assert_fail@plt+0x7500>
   189a4:	add	r3, r3, #1
   189a8:	cmp	r2, lr
   189ac:	sub	r5, r3, r8
   189b0:	add	r5, r5, ip
   189b4:	bne	1888c <__assert_fail@plt+0x6eec>
   189b8:	ldrb	r2, [r3]
   189bc:	cmp	r2, #0
   189c0:	bne	18998 <__assert_fail@plt+0x6ff8>
   189c4:	b	18944 <__assert_fail@plt+0x6fa4>
   189c8:	ldrb	r2, [r8]
   189cc:	mov	r3, #0
   189d0:	movw	sl, #21632	; 0x5480
   189d4:	movt	sl, #3
   189d8:	mov	r6, #0
   189dc:	strb	r3, [sp, #32]
   189e0:	mov	r7, #0
   189e4:	strb	r3, [sp, #44]	; 0x2c
   189e8:	lsr	r3, r2, #5
   189ec:	and	r1, r2, #31
   189f0:	strd	r6, [sp, #36]	; 0x24
   189f4:	str	r8, [sp, #48]	; 0x30
   189f8:	ldr	r3, [sl, r3, lsl #2]
   189fc:	lsr	r3, r3, r1
   18a00:	ands	r5, r3, #1
   18a04:	beq	188b4 <__assert_fail@plt+0x6f14>
   18a08:	mov	r3, #1
   18a0c:	mov	r5, r2
   18a10:	strb	r3, [sp, #44]	; 0x2c
   18a14:	str	r3, [sp, #52]	; 0x34
   18a18:	strb	r3, [sp, #56]	; 0x38
   18a1c:	str	r2, [sp, #60]	; 0x3c
   18a20:	b	1893c <__assert_fail@plt+0x6f9c>
   18a24:	ldr	r0, [sp, #48]	; 0x30
   18a28:	bl	117a8 <strlen@plt>
   18a2c:	strb	r6, [sp, #44]	; 0x2c
   18a30:	str	r0, [sp, #52]	; 0x34
   18a34:	strb	r5, [sp, #56]	; 0x38
   18a38:	mov	r3, #0
   18a3c:	mov	r0, #1
   18a40:	mov	r7, r3
   18a44:	mov	r6, r4
   18a48:	str	r3, [sp, #4]
   18a4c:	mov	r5, r0
   18a50:	mov	fp, r0
   18a54:	str	r0, [sp, #8]
   18a58:	str	r3, [sp, #16]
   18a5c:	str	r3, [sp, #20]
   18a60:	str	r3, [sp, #24]
   18a64:	strb	r3, [sp, #88]	; 0x58
   18a68:	str	r3, [sp, #92]	; 0x5c
   18a6c:	str	r3, [sp, #96]	; 0x60
   18a70:	strb	r3, [sp, #100]	; 0x64
   18a74:	strb	r3, [sp, #144]	; 0x90
   18a78:	str	r3, [sp, #148]	; 0x94
   18a7c:	str	r3, [sp, #152]	; 0x98
   18a80:	strb	r3, [sp, #156]	; 0x9c
   18a84:	ldrb	r3, [sp, #144]	; 0x90
   18a88:	str	r8, [sp, #12]
   18a8c:	str	r4, [sp, #28]
   18a90:	str	r8, [sp, #104]	; 0x68
   18a94:	str	r4, [sp, #160]	; 0xa0
   18a98:	cmp	r3, #0
   18a9c:	addne	r4, sp, #148	; 0x94
   18aa0:	bne	18db4 <__assert_fail@plt+0x7414>
   18aa4:	ldrb	r3, [r6]
   18aa8:	lsr	r2, r3, #5
   18aac:	and	r3, r3, #31
   18ab0:	ldr	r2, [sl, r2, lsl #2]
   18ab4:	lsr	r3, r2, r3
   18ab8:	tst	r3, #1
   18abc:	beq	18f80 <__assert_fail@plt+0x75e0>
   18ac0:	str	fp, [sp, #164]	; 0xa4
   18ac4:	ldrb	r6, [r6]
   18ac8:	strb	r5, [sp, #156]	; 0x9c
   18acc:	strb	r5, [sp, #168]	; 0xa8
   18ad0:	str	r6, [sp, #172]	; 0xac
   18ad4:	cmp	r6, #0
   18ad8:	beq	18ea0 <__assert_fail@plt+0x7500>
   18adc:	ldrd	r2, [sp, #4]
   18ae0:	cmp	r2, #9
   18ae4:	movls	r3, #0
   18ae8:	andhi	r3, r3, #1
   18aec:	cmp	r3, #0
   18af0:	addeq	r7, r7, #1
   18af4:	beq	18b0c <__assert_fail@plt+0x716c>
   18af8:	add	r2, r2, r2, lsl #2
   18afc:	cmp	r7, r2
   18b00:	addcc	r7, r7, #1
   18b04:	strcc	r3, [sp, #8]
   18b08:	bcs	18fd8 <__assert_fail@plt+0x7638>
   18b0c:	ldrb	r3, [sp, #56]	; 0x38
   18b10:	cmp	r3, #0
   18b14:	beq	18ef0 <__assert_fail@plt+0x7550>
   18b18:	ldr	r3, [sp, #60]	; 0x3c
   18b1c:	ldr	r2, [sp, #172]	; 0xac
   18b20:	cmp	r2, r3
   18b24:	bne	18d80 <__assert_fail@plt+0x73e0>
   18b28:	ldr	ip, [sp, #12]
   18b2c:	ldr	r3, [sp, #16]
   18b30:	ldr	r0, [sp, #160]	; 0xa0
   18b34:	ldrb	r1, [ip]
   18b38:	str	r3, [sp, #260]	; 0x104
   18b3c:	ldr	r3, [sp, #20]
   18b40:	str	ip, [sp, #272]	; 0x110
   18b44:	ldr	r2, [sp, #164]	; 0xa4
   18b48:	and	ip, r1, #31
   18b4c:	ldrd	r8, [sp, #168]	; 0xa8
   18b50:	str	r3, [sp, #264]	; 0x108
   18b54:	lsr	r3, r1, #5
   18b58:	str	r2, [sp, #220]	; 0xdc
   18b5c:	ldr	r6, [sl, r3, lsl #2]
   18b60:	strd	r8, [sp, #224]	; 0xe0
   18b64:	ldrd	r2, [sp, #152]	; 0x98
   18b68:	ldrd	r8, [sp, #184]	; 0xb8
   18b6c:	lsr	r6, r6, ip
   18b70:	mov	ip, #0
   18b74:	ldr	lr, [sp, #220]	; 0xdc
   18b78:	strd	r2, [sp, #208]	; 0xd0
   18b7c:	ands	r6, r6, #1
   18b80:	ldrd	r2, [sp, #144]	; 0x90
   18b84:	add	r0, lr, r0
   18b88:	strd	r2, [sp, #200]	; 0xc8
   18b8c:	ldrd	r2, [sp, #176]	; 0xb0
   18b90:	strb	ip, [sp, #212]	; 0xd4
   18b94:	str	r0, [sp, #216]	; 0xd8
   18b98:	strd	r8, [sp, #240]	; 0xf0
   18b9c:	strb	ip, [sp, #256]	; 0x100
   18ba0:	strd	r2, [sp, #232]	; 0xe8
   18ba4:	ldrd	r2, [sp, #192]	; 0xc0
   18ba8:	strb	ip, [sp, #268]	; 0x10c
   18bac:	strd	r2, [sp, #248]	; 0xf8
   18bb0:	beq	19258 <__assert_fail@plt+0x78b8>
   18bb4:	mov	r4, r1
   18bb8:	strb	r5, [sp, #268]	; 0x10c
   18bbc:	cmp	r4, #0
   18bc0:	str	fp, [sp, #276]	; 0x114
   18bc4:	strb	r5, [sp, #280]	; 0x118
   18bc8:	str	r1, [sp, #284]	; 0x11c
   18bcc:	beq	192d8 <__assert_fail@plt+0x7938>
   18bd0:	ldr	r4, [sp, #272]	; 0x110
   18bd4:	mov	r3, #0
   18bd8:	add	r7, r7, #1
   18bdc:	ldr	r2, [sp, #276]	; 0x114
   18be0:	mov	r9, r3
   18be4:	strb	r3, [sp, #268]	; 0x10c
   18be8:	add	r4, r4, r2
   18bec:	str	r4, [sp, #272]	; 0x110
   18bf0:	b	18cd8 <__assert_fail@plt+0x7338>
   18bf4:	ldrb	r3, [r4]
   18bf8:	lsr	r2, r3, #5
   18bfc:	and	r3, r3, #31
   18c00:	ldr	r2, [sl, r2, lsl #2]
   18c04:	lsr	r3, r2, r3
   18c08:	tst	r3, #1
   18c0c:	beq	18ed4 <__assert_fail@plt+0x7534>
   18c10:	str	fp, [sp, #276]	; 0x114
   18c14:	ldrb	r4, [r4]
   18c18:	strb	r5, [sp, #268]	; 0x10c
   18c1c:	strb	r5, [sp, #280]	; 0x118
   18c20:	cmp	r4, #0
   18c24:	str	r4, [sp, #284]	; 0x11c
   18c28:	beq	18d54 <__assert_fail@plt+0x73b4>
   18c2c:	ldrb	r3, [sp, #212]	; 0xd4
   18c30:	cmp	r3, #0
   18c34:	bne	18ea8 <__assert_fail@plt+0x7508>
   18c38:	ldrb	r3, [sp, #200]	; 0xc8
   18c3c:	ldr	r4, [sp, #216]	; 0xd8
   18c40:	cmp	r3, #0
   18c44:	addne	r8, sp, #204	; 0xcc
   18c48:	bne	18e30 <__assert_fail@plt+0x7490>
   18c4c:	ldrb	r3, [r4]
   18c50:	lsr	r2, r3, #5
   18c54:	and	r3, r3, #31
   18c58:	ldr	r2, [sl, r2, lsl #2]
   18c5c:	lsr	r3, r2, r3
   18c60:	tst	r3, #1
   18c64:	beq	18e18 <__assert_fail@plt+0x7478>
   18c68:	str	fp, [sp, #220]	; 0xdc
   18c6c:	ldrb	r0, [r4]
   18c70:	strb	r5, [sp, #212]	; 0xd4
   18c74:	strb	r5, [sp, #224]	; 0xe0
   18c78:	mov	r6, r0
   18c7c:	str	r0, [sp, #228]	; 0xe4
   18c80:	cmp	r6, #0
   18c84:	beq	18ea0 <__assert_fail@plt+0x7500>
   18c88:	ldrb	r3, [sp, #280]	; 0x118
   18c8c:	cmp	r3, #0
   18c90:	beq	18d70 <__assert_fail@plt+0x73d0>
   18c94:	ldr	r0, [sp, #284]	; 0x11c
   18c98:	subs	r0, r0, r6
   18c9c:	movne	r0, #1
   18ca0:	cmp	r0, #0
   18ca4:	add	r2, r7, #1
   18ca8:	bne	18d80 <__assert_fail@plt+0x73e0>
   18cac:	mov	r7, r2
   18cb0:	ldr	r3, [sp, #216]	; 0xd8
   18cb4:	strb	r0, [sp, #212]	; 0xd4
   18cb8:	ldr	r1, [sp, #220]	; 0xdc
   18cbc:	strb	r0, [sp, #268]	; 0x10c
   18cc0:	ldr	r4, [sp, #272]	; 0x110
   18cc4:	ldr	r2, [sp, #276]	; 0x114
   18cc8:	add	r3, r3, r1
   18ccc:	str	r3, [sp, #216]	; 0xd8
   18cd0:	add	r4, r4, r2
   18cd4:	str	r4, [sp, #272]	; 0x110
   18cd8:	ldrb	r3, [sp, #256]	; 0x100
   18cdc:	cmp	r3, #0
   18ce0:	beq	18bf4 <__assert_fail@plt+0x7254>
   18ce4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18ce8:	mov	r1, r0
   18cec:	mov	r0, r4
   18cf0:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   18cf4:	mov	r2, r0
   18cf8:	add	r3, sp, #260	; 0x104
   18cfc:	mov	r1, r4
   18d00:	add	r0, sp, #284	; 0x11c
   18d04:	bl	1f100 <__assert_fail@plt+0xd760>
   18d08:	cmn	r0, #1
   18d0c:	str	r0, [sp, #276]	; 0x114
   18d10:	strbeq	r5, [sp, #268]	; 0x10c
   18d14:	streq	fp, [sp, #276]	; 0x114
   18d18:	strbeq	r9, [sp, #280]	; 0x118
   18d1c:	beq	18c2c <__assert_fail@plt+0x728c>
   18d20:	cmn	r0, #2
   18d24:	beq	18f20 <__assert_fail@plt+0x7580>
   18d28:	cmp	r0, #0
   18d2c:	beq	18f38 <__assert_fail@plt+0x7598>
   18d30:	ldr	r4, [sp, #284]	; 0x11c
   18d34:	add	r0, sp, #260	; 0x104
   18d38:	strb	r5, [sp, #280]	; 0x118
   18d3c:	bl	11604 <mbsinit@plt>
   18d40:	cmp	r0, #0
   18d44:	strb	r5, [sp, #268]	; 0x10c
   18d48:	strbne	r9, [sp, #256]	; 0x100
   18d4c:	cmp	r4, #0
   18d50:	bne	18c2c <__assert_fail@plt+0x728c>
   18d54:	ldr	r0, [sp, #160]	; 0xa0
   18d58:	b	18948 <__assert_fail@plt+0x6fa8>
   18d5c:	ldr	r0, [sp, #216]	; 0xd8
   18d60:	bl	117a8 <strlen@plt>
   18d64:	strb	r5, [sp, #212]	; 0xd4
   18d68:	str	r0, [sp, #220]	; 0xdc
   18d6c:	strb	r9, [sp, #224]	; 0xe0
   18d70:	ldr	r2, [sp, #220]	; 0xdc
   18d74:	ldr	r3, [sp, #276]	; 0x114
   18d78:	cmp	r2, r3
   18d7c:	beq	18ebc <__assert_fail@plt+0x751c>
   18d80:	ldr	r6, [sp, #160]	; 0xa0
   18d84:	ldr	r4, [sp, #164]	; 0xa4
   18d88:	mov	r3, #0
   18d8c:	add	r6, r6, r4
   18d90:	ldr	r2, [sp, #4]
   18d94:	strb	r3, [sp, #156]	; 0x9c
   18d98:	ldrb	r3, [sp, #144]	; 0x90
   18d9c:	str	r6, [sp, #160]	; 0xa0
   18da0:	add	r2, r2, #1
   18da4:	cmp	r3, #0
   18da8:	str	r2, [sp, #4]
   18dac:	addne	r4, sp, #148	; 0x94
   18db0:	beq	18aa4 <__assert_fail@plt+0x7104>
   18db4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18db8:	mov	r1, r0
   18dbc:	mov	r0, r6
   18dc0:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   18dc4:	mov	r2, r0
   18dc8:	mov	r3, r4
   18dcc:	mov	r1, r6
   18dd0:	add	r0, sp, #172	; 0xac
   18dd4:	bl	1f100 <__assert_fail@plt+0xd760>
   18dd8:	cmn	r0, #1
   18ddc:	str	r0, [sp, #164]	; 0xa4
   18de0:	beq	18f9c <__assert_fail@plt+0x75fc>
   18de4:	cmn	r0, #2
   18de8:	beq	191cc <__assert_fail@plt+0x782c>
   18dec:	cmp	r0, #0
   18df0:	bne	1919c <__assert_fail@plt+0x77fc>
   18df4:	ldr	r6, [sp, #160]	; 0xa0
   18df8:	str	fp, [sp, #164]	; 0xa4
   18dfc:	ldrb	r3, [r6]
   18e00:	cmp	r3, #0
   18e04:	bne	19460 <__assert_fail@plt+0x7ac0>
   18e08:	ldr	r6, [sp, #172]	; 0xac
   18e0c:	cmp	r6, #0
   18e10:	beq	191a0 <__assert_fail@plt+0x7800>
   18e14:	b	193c4 <__assert_fail@plt+0x7a24>
   18e18:	add	r8, sp, #204	; 0xcc
   18e1c:	mov	r0, r8
   18e20:	bl	11604 <mbsinit@plt>
   18e24:	cmp	r0, #0
   18e28:	beq	19440 <__assert_fail@plt+0x7aa0>
   18e2c:	strb	r5, [sp, #200]	; 0xc8
   18e30:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18e34:	mov	r1, r0
   18e38:	mov	r0, r4
   18e3c:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   18e40:	mov	r2, r0
   18e44:	mov	r3, r8
   18e48:	mov	r1, r4
   18e4c:	add	r0, sp, #228	; 0xe4
   18e50:	bl	1f100 <__assert_fail@plt+0xd760>
   18e54:	cmn	r0, #1
   18e58:	str	r0, [sp, #220]	; 0xdc
   18e5c:	strbeq	r5, [sp, #212]	; 0xd4
   18e60:	streq	fp, [sp, #220]	; 0xdc
   18e64:	strbeq	r9, [sp, #224]	; 0xe0
   18e68:	beq	18d70 <__assert_fail@plt+0x73d0>
   18e6c:	cmn	r0, #2
   18e70:	beq	18d5c <__assert_fail@plt+0x73bc>
   18e74:	cmp	r0, #0
   18e78:	beq	18f5c <__assert_fail@plt+0x75bc>
   18e7c:	ldr	r6, [sp, #228]	; 0xe4
   18e80:	mov	r0, r8
   18e84:	strb	r5, [sp, #224]	; 0xe0
   18e88:	bl	11604 <mbsinit@plt>
   18e8c:	cmp	r0, #0
   18e90:	strb	r5, [sp, #212]	; 0xd4
   18e94:	strbne	r9, [sp, #200]	; 0xc8
   18e98:	cmp	r6, #0
   18e9c:	bne	18c88 <__assert_fail@plt+0x72e8>
   18ea0:	mov	r0, #0
   18ea4:	b	18948 <__assert_fail@plt+0x6fa8>
   18ea8:	ldrb	r3, [sp, #224]	; 0xe0
   18eac:	cmp	r3, #0
   18eb0:	beq	18d70 <__assert_fail@plt+0x73d0>
   18eb4:	ldr	r6, [sp, #228]	; 0xe4
   18eb8:	b	18c80 <__assert_fail@plt+0x72e0>
   18ebc:	ldr	r0, [sp, #216]	; 0xd8
   18ec0:	ldr	r1, [sp, #272]	; 0x110
   18ec4:	bl	1161c <memcmp@plt>
   18ec8:	adds	r0, r0, #0
   18ecc:	movne	r0, #1
   18ed0:	b	18ca0 <__assert_fail@plt+0x7300>
   18ed4:	add	r0, sp, #260	; 0x104
   18ed8:	bl	11604 <mbsinit@plt>
   18edc:	cmp	r0, #0
   18ee0:	beq	19440 <__assert_fail@plt+0x7aa0>
   18ee4:	strb	r5, [sp, #256]	; 0x100
   18ee8:	b	18ce4 <__assert_fail@plt+0x7344>
   18eec:	add	r7, r7, #1
   18ef0:	ldr	r3, [sp, #52]	; 0x34
   18ef4:	ldr	r6, [sp, #160]	; 0xa0
   18ef8:	ldr	r4, [sp, #164]	; 0xa4
   18efc:	cmp	r4, r3
   18f00:	bne	18d88 <__assert_fail@plt+0x73e8>
   18f04:	mov	r2, r4
   18f08:	mov	r0, r6
   18f0c:	ldr	r1, [sp, #48]	; 0x30
   18f10:	bl	1161c <memcmp@plt>
   18f14:	cmp	r0, #0
   18f18:	bne	18d88 <__assert_fail@plt+0x73e8>
   18f1c:	b	18b28 <__assert_fail@plt+0x7188>
   18f20:	ldr	r0, [sp, #272]	; 0x110
   18f24:	bl	117a8 <strlen@plt>
   18f28:	strb	r5, [sp, #268]	; 0x10c
   18f2c:	str	r0, [sp, #276]	; 0x114
   18f30:	strb	r9, [sp, #280]	; 0x118
   18f34:	b	18c2c <__assert_fail@plt+0x728c>
   18f38:	ldr	r3, [sp, #272]	; 0x110
   18f3c:	str	fp, [sp, #276]	; 0x114
   18f40:	ldrb	r3, [r3]
   18f44:	cmp	r3, #0
   18f48:	bne	19460 <__assert_fail@plt+0x7ac0>
   18f4c:	ldr	r4, [sp, #284]	; 0x11c
   18f50:	cmp	r4, #0
   18f54:	beq	18d34 <__assert_fail@plt+0x7394>
   18f58:	b	193c4 <__assert_fail@plt+0x7a24>
   18f5c:	ldr	r3, [sp, #216]	; 0xd8
   18f60:	str	fp, [sp, #220]	; 0xdc
   18f64:	ldrb	r3, [r3]
   18f68:	cmp	r3, #0
   18f6c:	bne	19460 <__assert_fail@plt+0x7ac0>
   18f70:	ldr	r6, [sp, #228]	; 0xe4
   18f74:	cmp	r6, #0
   18f78:	beq	18e80 <__assert_fail@plt+0x74e0>
   18f7c:	b	193c4 <__assert_fail@plt+0x7a24>
   18f80:	add	r4, sp, #148	; 0x94
   18f84:	mov	r0, r4
   18f88:	bl	11604 <mbsinit@plt>
   18f8c:	cmp	r0, #0
   18f90:	beq	19440 <__assert_fail@plt+0x7aa0>
   18f94:	strb	r5, [sp, #144]	; 0x90
   18f98:	b	18db4 <__assert_fail@plt+0x7414>
   18f9c:	mov	r3, #0
   18fa0:	strb	r5, [sp, #156]	; 0x9c
   18fa4:	str	fp, [sp, #164]	; 0xa4
   18fa8:	strb	r3, [sp, #168]	; 0xa8
   18fac:	ldrd	r2, [sp, #4]
   18fb0:	cmp	r2, #9
   18fb4:	movls	r3, #0
   18fb8:	andhi	r3, r3, #1
   18fbc:	cmp	r3, #0
   18fc0:	beq	18eec <__assert_fail@plt+0x754c>
   18fc4:	add	r2, r2, r2, lsl #2
   18fc8:	cmp	r7, r2
   18fcc:	addcc	r7, r7, #1
   18fd0:	strcc	r3, [sp, #8]
   18fd4:	bcc	18ef0 <__assert_fail@plt+0x7550>
   18fd8:	ldr	r3, [sp, #24]
   18fdc:	subs	r6, r7, r3
   18fe0:	ldrb	r3, [sp, #100]	; 0x64
   18fe4:	beq	1941c <__assert_fail@plt+0x7a7c>
   18fe8:	cmp	r3, #0
   18fec:	beq	191c0 <__assert_fail@plt+0x7820>
   18ff0:	ldrb	r3, [sp, #112]	; 0x70
   18ff4:	cmp	r3, #0
   18ff8:	bne	1918c <__assert_fail@plt+0x77ec>
   18ffc:	ldrb	r1, [sp, #88]	; 0x58
   19000:	ldr	r4, [sp, #104]	; 0x68
   19004:	mov	r2, #0
   19008:	subs	r6, r6, #1
   1900c:	ldr	r3, [sp, #108]	; 0x6c
   19010:	strb	r2, [sp, #100]	; 0x64
   19014:	add	r4, r4, r3
   19018:	mov	r9, r4
   1901c:	str	r4, [sp, #104]	; 0x68
   19020:	beq	191f0 <__assert_fail@plt+0x7850>
   19024:	cmp	r1, #0
   19028:	addne	r8, sp, #92	; 0x5c
   1902c:	bne	190a4 <__assert_fail@plt+0x7704>
   19030:	ldrb	r3, [r4]
   19034:	lsr	r2, r3, #5
   19038:	and	r3, r3, #31
   1903c:	ldr	r2, [sl, r2, lsl #2]
   19040:	lsr	r3, r2, r3
   19044:	tst	r3, #1
   19048:	beq	1908c <__assert_fail@plt+0x76ec>
   1904c:	str	fp, [sp, #108]	; 0x6c
   19050:	ldrb	r3, [r4]
   19054:	strb	r5, [sp, #100]	; 0x64
   19058:	strb	r5, [sp, #112]	; 0x70
   1905c:	cmp	r3, #0
   19060:	str	r3, [sp, #116]	; 0x74
   19064:	bne	19004 <__assert_fail@plt+0x7664>
   19068:	add	r2, sp, #256	; 0x100
   1906c:	ldr	r1, [sp, #12]
   19070:	ldr	r0, [sp, #28]
   19074:	bl	17ea4 <__assert_fail@plt+0x6504>
   19078:	subs	r3, r0, #0
   1907c:	str	r3, [sp, #8]
   19080:	bne	19438 <__assert_fail@plt+0x7a98>
   19084:	ldrb	r3, [sp, #168]	; 0xa8
   19088:	b	19240 <__assert_fail@plt+0x78a0>
   1908c:	add	r8, sp, #92	; 0x5c
   19090:	mov	r0, r8
   19094:	bl	11604 <mbsinit@plt>
   19098:	cmp	r0, #0
   1909c:	beq	19440 <__assert_fail@plt+0x7aa0>
   190a0:	strb	r5, [sp, #88]	; 0x58
   190a4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   190a8:	mov	r1, r0
   190ac:	mov	r0, r4
   190b0:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   190b4:	mov	r2, r0
   190b8:	mov	r3, r8
   190bc:	mov	r1, r4
   190c0:	add	r0, sp, #116	; 0x74
   190c4:	bl	1f100 <__assert_fail@plt+0xd760>
   190c8:	cmn	r0, #1
   190cc:	str	r0, [sp, #108]	; 0x6c
   190d0:	beq	1910c <__assert_fail@plt+0x776c>
   190d4:	cmn	r0, #2
   190d8:	beq	19124 <__assert_fail@plt+0x7784>
   190dc:	cmp	r0, #0
   190e0:	beq	1915c <__assert_fail@plt+0x77bc>
   190e4:	ldr	r4, [sp, #116]	; 0x74
   190e8:	mov	r0, r8
   190ec:	strb	r5, [sp, #112]	; 0x70
   190f0:	bl	11604 <mbsinit@plt>
   190f4:	cmp	r0, #0
   190f8:	bne	19144 <__assert_fail@plt+0x77a4>
   190fc:	cmp	r4, #0
   19100:	strb	r5, [sp, #100]	; 0x64
   19104:	bne	18ffc <__assert_fail@plt+0x765c>
   19108:	b	19068 <__assert_fail@plt+0x76c8>
   1910c:	mov	r3, #0
   19110:	ldrb	r1, [sp, #88]	; 0x58
   19114:	str	fp, [sp, #108]	; 0x6c
   19118:	strb	r3, [sp, #112]	; 0x70
   1911c:	ldr	r4, [sp, #104]	; 0x68
   19120:	b	19004 <__assert_fail@plt+0x7664>
   19124:	ldr	r4, [sp, #104]	; 0x68
   19128:	mov	r0, r4
   1912c:	bl	117a8 <strlen@plt>
   19130:	mov	r3, #0
   19134:	ldrb	r1, [sp, #88]	; 0x58
   19138:	str	r0, [sp, #108]	; 0x6c
   1913c:	strb	r3, [sp, #112]	; 0x70
   19140:	b	19004 <__assert_fail@plt+0x7664>
   19144:	mov	r1, #0
   19148:	cmp	r4, r1
   1914c:	strb	r1, [sp, #88]	; 0x58
   19150:	strb	r5, [sp, #100]	; 0x64
   19154:	bne	19000 <__assert_fail@plt+0x7660>
   19158:	b	19068 <__assert_fail@plt+0x76c8>
   1915c:	ldr	r4, [sp, #104]	; 0x68
   19160:	str	fp, [sp, #108]	; 0x6c
   19164:	ldrb	r3, [r4]
   19168:	cmp	r3, #0
   1916c:	bne	19460 <__assert_fail@plt+0x7ac0>
   19170:	ldr	r4, [sp, #116]	; 0x74
   19174:	cmp	r4, #0
   19178:	beq	190e8 <__assert_fail@plt+0x7748>
   1917c:	b	193c4 <__assert_fail@plt+0x7a24>
   19180:	mov	r0, r4
   19184:	mov	sl, r5
   19188:	b	18860 <__assert_fail@plt+0x6ec0>
   1918c:	ldr	r3, [sp, #116]	; 0x74
   19190:	cmp	r3, #0
   19194:	bne	18ffc <__assert_fail@plt+0x765c>
   19198:	b	19068 <__assert_fail@plt+0x76c8>
   1919c:	ldr	r6, [sp, #172]	; 0xac
   191a0:	mov	r0, r4
   191a4:	strb	r5, [sp, #168]	; 0xa8
   191a8:	bl	11604 <mbsinit@plt>
   191ac:	cmp	r0, #0
   191b0:	strb	r5, [sp, #156]	; 0x9c
   191b4:	movne	r3, #0
   191b8:	strbne	r3, [sp, #144]	; 0x90
   191bc:	b	18ad4 <__assert_fail@plt+0x7134>
   191c0:	ldrb	r1, [sp, #88]	; 0x58
   191c4:	ldr	r4, [sp, #104]	; 0x68
   191c8:	b	19024 <__assert_fail@plt+0x7684>
   191cc:	ldr	r0, [sp, #160]	; 0xa0
   191d0:	bl	117a8 <strlen@plt>
   191d4:	mov	r3, #0
   191d8:	strb	r5, [sp, #156]	; 0x9c
   191dc:	str	r0, [sp, #164]	; 0xa4
   191e0:	strb	r3, [sp, #168]	; 0xa8
   191e4:	b	18fac <__assert_fail@plt+0x760c>
   191e8:	ldrb	r1, [sp, #88]	; 0x58
   191ec:	ldr	r9, [sp, #104]	; 0x68
   191f0:	cmp	r1, #0
   191f4:	addne	r8, sp, #92	; 0x5c
   191f8:	bne	192f4 <__assert_fail@plt+0x7954>
   191fc:	ldrb	r3, [r9]
   19200:	lsr	r2, r3, #5
   19204:	and	r3, r3, #31
   19208:	ldr	r2, [sl, r2, lsl #2]
   1920c:	lsr	r3, r2, r3
   19210:	tst	r3, #1
   19214:	beq	192dc <__assert_fail@plt+0x793c>
   19218:	str	fp, [sp, #108]	; 0x6c
   1921c:	ldrb	r4, [r9]
   19220:	strb	r5, [sp, #100]	; 0x64
   19224:	strb	r5, [sp, #112]	; 0x70
   19228:	str	r4, [sp, #116]	; 0x74
   1922c:	cmp	r4, #0
   19230:	beq	19068 <__assert_fail@plt+0x76c8>
   19234:	ldrb	r3, [sp, #168]	; 0xa8
   19238:	mov	r2, #1
   1923c:	str	r2, [sp, #8]
   19240:	cmp	r3, #0
   19244:	add	r3, r7, #1
   19248:	str	r7, [sp, #24]
   1924c:	mov	r7, r3
   19250:	bne	18b0c <__assert_fail@plt+0x716c>
   19254:	b	18ef0 <__assert_fail@plt+0x7550>
   19258:	add	r0, sp, #260	; 0x104
   1925c:	bl	11604 <mbsinit@plt>
   19260:	cmp	r0, #0
   19264:	beq	19440 <__assert_fail@plt+0x7aa0>
   19268:	strb	r5, [sp, #256]	; 0x100
   1926c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   19270:	ldr	r4, [sp, #12]
   19274:	mov	r1, r0
   19278:	mov	r0, r4
   1927c:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   19280:	mov	r2, r0
   19284:	add	r3, sp, #260	; 0x104
   19288:	mov	r1, r4
   1928c:	add	r0, sp, #284	; 0x11c
   19290:	bl	1f100 <__assert_fail@plt+0xd760>
   19294:	cmn	r0, #1
   19298:	str	r0, [sp, #276]	; 0x114
   1929c:	beq	19358 <__assert_fail@plt+0x79b8>
   192a0:	cmn	r0, #2
   192a4:	beq	19368 <__assert_fail@plt+0x79c8>
   192a8:	cmp	r0, #0
   192ac:	beq	19380 <__assert_fail@plt+0x79e0>
   192b0:	ldr	r4, [sp, #284]	; 0x11c
   192b4:	add	r0, sp, #260	; 0x104
   192b8:	strb	r5, [sp, #280]	; 0x118
   192bc:	bl	11604 <mbsinit@plt>
   192c0:	cmp	r0, #0
   192c4:	strb	r5, [sp, #268]	; 0x10c
   192c8:	movne	r3, #0
   192cc:	strbne	r3, [sp, #256]	; 0x100
   192d0:	cmp	r4, #0
   192d4:	bne	18bd0 <__assert_fail@plt+0x7230>
   192d8:	bl	11964 <abort@plt>
   192dc:	add	r8, sp, #92	; 0x5c
   192e0:	mov	r0, r8
   192e4:	bl	11604 <mbsinit@plt>
   192e8:	cmp	r0, #0
   192ec:	beq	19440 <__assert_fail@plt+0x7aa0>
   192f0:	strb	r5, [sp, #88]	; 0x58
   192f4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   192f8:	mov	r1, r0
   192fc:	mov	r0, r9
   19300:	bl	1cf84 <__assert_fail@plt+0xb5e4>
   19304:	mov	r2, r0
   19308:	mov	r3, r8
   1930c:	mov	r1, r9
   19310:	add	r0, sp, #116	; 0x74
   19314:	bl	1f100 <__assert_fail@plt+0xd760>
   19318:	cmn	r0, #1
   1931c:	str	r0, [sp, #108]	; 0x6c
   19320:	beq	193e4 <__assert_fail@plt+0x7a44>
   19324:	cmn	r0, #2
   19328:	beq	193c8 <__assert_fail@plt+0x7a28>
   1932c:	cmp	r0, #0
   19330:	beq	193f8 <__assert_fail@plt+0x7a58>
   19334:	ldr	r4, [sp, #116]	; 0x74
   19338:	mov	r0, r8
   1933c:	strb	r5, [sp, #112]	; 0x70
   19340:	bl	11604 <mbsinit@plt>
   19344:	cmp	r0, #0
   19348:	strb	r5, [sp, #100]	; 0x64
   1934c:	movne	r3, #0
   19350:	strbne	r3, [sp, #88]	; 0x58
   19354:	b	1922c <__assert_fail@plt+0x788c>
   19358:	str	fp, [sp, #276]	; 0x114
   1935c:	strb	r6, [sp, #280]	; 0x118
   19360:	ldr	r4, [sp, #272]	; 0x110
   19364:	b	18bd4 <__assert_fail@plt+0x7234>
   19368:	ldr	r4, [sp, #272]	; 0x110
   1936c:	mov	r0, r4
   19370:	bl	117a8 <strlen@plt>
   19374:	str	r0, [sp, #276]	; 0x114
   19378:	strb	r6, [sp, #280]	; 0x118
   1937c:	b	18bd4 <__assert_fail@plt+0x7234>
   19380:	ldr	r4, [sp, #272]	; 0x110
   19384:	str	fp, [sp, #276]	; 0x114
   19388:	ldrb	r3, [r4]
   1938c:	cmp	r3, #0
   19390:	bne	19460 <__assert_fail@plt+0x7ac0>
   19394:	ldr	r4, [sp, #284]	; 0x11c
   19398:	cmp	r4, #0
   1939c:	beq	192b4 <__assert_fail@plt+0x7914>
   193a0:	b	193c4 <__assert_fail@plt+0x7a24>
   193a4:	ldr	r3, [sp, #48]	; 0x30
   193a8:	str	r6, [sp, #52]	; 0x34
   193ac:	ldrb	r3, [r3]
   193b0:	cmp	r3, #0
   193b4:	bne	19460 <__assert_fail@plt+0x7ac0>
   193b8:	ldr	r5, [sp, #60]	; 0x3c
   193bc:	cmp	r5, #0
   193c0:	beq	1891c <__assert_fail@plt+0x6f7c>
   193c4:	bl	17e7c <__assert_fail@plt+0x64dc>
   193c8:	ldr	r0, [sp, #104]	; 0x68
   193cc:	bl	117a8 <strlen@plt>
   193d0:	mov	r3, #0
   193d4:	strb	r5, [sp, #100]	; 0x64
   193d8:	str	r0, [sp, #108]	; 0x6c
   193dc:	strb	r3, [sp, #112]	; 0x70
   193e0:	b	19234 <__assert_fail@plt+0x7894>
   193e4:	mov	r3, #0
   193e8:	strb	r5, [sp, #100]	; 0x64
   193ec:	str	fp, [sp, #108]	; 0x6c
   193f0:	strb	r3, [sp, #112]	; 0x70
   193f4:	b	19234 <__assert_fail@plt+0x7894>
   193f8:	ldr	r4, [sp, #104]	; 0x68
   193fc:	str	fp, [sp, #108]	; 0x6c
   19400:	ldrb	r3, [r4]
   19404:	cmp	r3, #0
   19408:	bne	19460 <__assert_fail@plt+0x7ac0>
   1940c:	ldr	r4, [sp, #116]	; 0x74
   19410:	cmp	r4, #0
   19414:	beq	19338 <__assert_fail@plt+0x7998>
   19418:	b	193c4 <__assert_fail@plt+0x7a24>
   1941c:	cmp	r3, #0
   19420:	beq	191e8 <__assert_fail@plt+0x7848>
   19424:	ldrb	r3, [sp, #112]	; 0x70
   19428:	cmp	r3, #0
   1942c:	ldrne	r4, [sp, #116]	; 0x74
   19430:	beq	19234 <__assert_fail@plt+0x7894>
   19434:	b	1922c <__assert_fail@plt+0x788c>
   19438:	ldr	r0, [sp, #256]	; 0x100
   1943c:	b	18948 <__assert_fail@plt+0x6fa8>
   19440:	movw	r3, #19656	; 0x4cc8
   19444:	movt	r3, #3
   19448:	movw	r1, #19556	; 0x4c64
   1944c:	movt	r1, #3
   19450:	movw	r0, #19588	; 0x4c84
   19454:	movt	r0, #3
   19458:	mov	r2, #143	; 0x8f
   1945c:	bl	119a0 <__assert_fail@plt>
   19460:	movw	r3, #19656	; 0x4cc8
   19464:	movt	r3, #3
   19468:	movw	r1, #19556	; 0x4c64
   1946c:	movt	r1, #3
   19470:	movw	r0, #19612	; 0x4c9c
   19474:	movt	r0, #3
   19478:	mov	r2, #171	; 0xab
   1947c:	bl	119a0 <__assert_fail@plt>
   19480:	strd	r4, [sp, #-16]!
   19484:	subs	r4, r0, #0
   19488:	str	r6, [sp, #8]
   1948c:	str	lr, [sp, #12]
   19490:	beq	19528 <__assert_fail@plt+0x7b88>
   19494:	mov	r1, #47	; 0x2f
   19498:	bl	118a4 <strrchr@plt>
   1949c:	subs	r5, r0, #0
   194a0:	beq	19500 <__assert_fail@plt+0x7b60>
   194a4:	add	r6, r5, #1
   194a8:	sub	r3, r6, r4
   194ac:	cmp	r3, #6
   194b0:	ble	19500 <__assert_fail@plt+0x7b60>
   194b4:	movw	r1, #19732	; 0x4d14
   194b8:	movt	r1, #3
   194bc:	mov	r2, #7
   194c0:	sub	r0, r5, #6
   194c4:	bl	11958 <strncmp@plt>
   194c8:	cmp	r0, #0
   194cc:	bne	19500 <__assert_fail@plt+0x7b60>
   194d0:	movw	r1, #19740	; 0x4d1c
   194d4:	movt	r1, #3
   194d8:	mov	r2, #3
   194dc:	mov	r0, r6
   194e0:	bl	11958 <strncmp@plt>
   194e4:	cmp	r0, #0
   194e8:	movne	r4, r6
   194ec:	bne	19500 <__assert_fail@plt+0x7b60>
   194f0:	add	r4, r5, #4
   194f4:	movw	r3, #25096	; 0x6208
   194f8:	movt	r3, #4
   194fc:	str	r4, [r3]
   19500:	movw	r2, #25248	; 0x62a0
   19504:	movt	r2, #4
   19508:	ldr	r6, [sp, #8]
   1950c:	movw	r3, #25100	; 0x620c
   19510:	movt	r3, #4
   19514:	str	r4, [r2]
   19518:	str	r4, [r3]
   1951c:	ldrd	r4, [sp]
   19520:	add	sp, sp, #12
   19524:	pop	{pc}		; (ldr pc, [sp], #4)
   19528:	movw	r3, #25112	; 0x6218
   1952c:	movt	r3, #4
   19530:	movw	r0, #19676	; 0x4cdc
   19534:	movt	r0, #3
   19538:	ldr	r3, [r3]
   1953c:	mov	r2, #55	; 0x37
   19540:	mov	r1, #1
   19544:	bl	11688 <fwrite@plt>
   19548:	bl	11964 <abort@plt>
   1954c:	mov	r2, #5
   19550:	strd	r4, [sp, #-16]!
   19554:	mov	r5, r0
   19558:	str	r6, [sp, #8]
   1955c:	mov	r6, r1
   19560:	mov	r1, r0
   19564:	mov	r0, #0
   19568:	str	lr, [sp, #12]
   1956c:	bl	11628 <dcgettext@plt>
   19570:	cmp	r5, r0
   19574:	mov	r4, r0
   19578:	beq	19590 <__assert_fail@plt+0x7bf0>
   1957c:	mov	r0, r4
   19580:	ldrd	r4, [sp]
   19584:	ldr	r6, [sp, #8]
   19588:	add	sp, sp, #12
   1958c:	pop	{pc}		; (ldr pc, [sp], #4)
   19590:	bl	33238 <__assert_fail@plt+0x21898>
   19594:	ldrb	r3, [r0]
   19598:	bic	r3, r3, #32
   1959c:	cmp	r3, #85	; 0x55
   195a0:	bne	19608 <__assert_fail@plt+0x7c68>
   195a4:	ldrb	r3, [r0, #1]
   195a8:	bic	r3, r3, #32
   195ac:	cmp	r3, #84	; 0x54
   195b0:	bne	19688 <__assert_fail@plt+0x7ce8>
   195b4:	ldrb	r3, [r0, #2]
   195b8:	bic	r3, r3, #32
   195bc:	cmp	r3, #70	; 0x46
   195c0:	bne	19688 <__assert_fail@plt+0x7ce8>
   195c4:	ldrb	r3, [r0, #3]
   195c8:	cmp	r3, #45	; 0x2d
   195cc:	bne	19688 <__assert_fail@plt+0x7ce8>
   195d0:	ldrb	r3, [r0, #4]
   195d4:	cmp	r3, #56	; 0x38
   195d8:	bne	19688 <__assert_fail@plt+0x7ce8>
   195dc:	ldrb	r3, [r0, #5]
   195e0:	cmp	r3, #0
   195e4:	bne	19688 <__assert_fail@plt+0x7ce8>
   195e8:	ldrb	r2, [r4]
   195ec:	movw	r3, #19832	; 0x4d78
   195f0:	movt	r3, #3
   195f4:	movw	r4, #19844	; 0x4d84
   195f8:	movt	r4, #3
   195fc:	cmp	r2, #96	; 0x60
   19600:	movne	r4, r3
   19604:	b	1957c <__assert_fail@plt+0x7bdc>
   19608:	cmp	r3, #71	; 0x47
   1960c:	bne	19688 <__assert_fail@plt+0x7ce8>
   19610:	ldrb	r3, [r0, #1]
   19614:	bic	r3, r3, #32
   19618:	cmp	r3, #66	; 0x42
   1961c:	bne	19688 <__assert_fail@plt+0x7ce8>
   19620:	ldrb	r3, [r0, #2]
   19624:	cmp	r3, #49	; 0x31
   19628:	bne	19688 <__assert_fail@plt+0x7ce8>
   1962c:	ldrb	r3, [r0, #3]
   19630:	cmp	r3, #56	; 0x38
   19634:	bne	19688 <__assert_fail@plt+0x7ce8>
   19638:	ldrb	r3, [r0, #4]
   1963c:	cmp	r3, #48	; 0x30
   19640:	bne	19688 <__assert_fail@plt+0x7ce8>
   19644:	ldrb	r3, [r0, #5]
   19648:	cmp	r3, #51	; 0x33
   1964c:	bne	19688 <__assert_fail@plt+0x7ce8>
   19650:	ldrb	r3, [r0, #6]
   19654:	cmp	r3, #48	; 0x30
   19658:	bne	19688 <__assert_fail@plt+0x7ce8>
   1965c:	ldrb	r3, [r0, #7]
   19660:	cmp	r3, #0
   19664:	bne	19688 <__assert_fail@plt+0x7ce8>
   19668:	ldrb	r2, [r4]
   1966c:	movw	r3, #19836	; 0x4d7c
   19670:	movt	r3, #3
   19674:	movw	r4, #19840	; 0x4d80
   19678:	movt	r4, #3
   1967c:	cmp	r2, #96	; 0x60
   19680:	movne	r4, r3
   19684:	b	1957c <__assert_fail@plt+0x7bdc>
   19688:	movw	r3, #19848	; 0x4d88
   1968c:	movt	r3, #3
   19690:	cmp	r6, #9
   19694:	movw	r4, #19828	; 0x4d74
   19698:	movt	r4, #3
   1969c:	movne	r4, r3
   196a0:	b	1957c <__assert_fail@plt+0x7bdc>
   196a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   196a8:	strd	r6, [sp, #8]
   196ac:	strd	r8, [sp, #16]
   196b0:	mov	r8, r3
   196b4:	strd	sl, [sp, #24]
   196b8:	mov	fp, r0
   196bc:	mov	sl, r1
   196c0:	str	lr, [sp, #32]
   196c4:	sub	sp, sp, #140	; 0x8c
   196c8:	ldr	r3, [sp, #180]	; 0xb4
   196cc:	str	r2, [sp, #28]
   196d0:	and	r4, r3, #2
   196d4:	ubfx	r3, r3, #1, #1
   196d8:	str	r3, [sp, #44]	; 0x2c
   196dc:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   196e0:	ldr	r3, [sp, #176]	; 0xb0
   196e4:	str	r0, [sp, #76]	; 0x4c
   196e8:	cmp	r3, #10
   196ec:	ldrls	pc, [pc, r3, lsl #2]
   196f0:	b	1b08c <__assert_fail@plt+0x96ec>
   196f4:	andeq	r9, r1, r4, ror fp
   196f8:	muleq	r1, r0, ip
   196fc:	andeq	sl, r1, ip, lsl #4
   19700:	strdeq	r9, [r1], -ip
   19704:	andeq	r9, r1, ip, ror sl
   19708:	strdeq	r9, [r1], -r8
   1970c:	ldrdeq	r9, [r1], -r0
   19710:	andeq	r9, r1, r8, lsr ip
   19714:	andeq	r9, r1, r0, lsr #14
   19718:	andeq	r9, r1, r0, lsr #14
   1971c:	andeq	r9, r1, r0, lsr #14
   19720:	ldr	r3, [sp, #176]	; 0xb0
   19724:	cmp	r3, #10
   19728:	beq	19754 <__assert_fail@plt+0x7db4>
   1972c:	mov	r1, r3
   19730:	movw	r0, #19852	; 0x4d8c
   19734:	movt	r0, #3
   19738:	bl	1954c <__assert_fail@plt+0x7bac>
   1973c:	str	r0, [sp, #188]	; 0xbc
   19740:	movw	r0, #19848	; 0x4d88
   19744:	movt	r0, #3
   19748:	ldr	r1, [sp, #176]	; 0xb0
   1974c:	bl	1954c <__assert_fail@plt+0x7bac>
   19750:	str	r0, [sp, #192]	; 0xc0
   19754:	cmp	r4, #0
   19758:	movne	r4, #0
   1975c:	beq	1ae18 <__assert_fail@plt+0x9478>
   19760:	mov	r5, #0
   19764:	ldr	r0, [sp, #192]	; 0xc0
   19768:	mov	r9, r5
   1976c:	str	r5, [sp, #64]	; 0x40
   19770:	bl	117a8 <strlen@plt>
   19774:	mov	r3, #1
   19778:	ldr	r2, [sp, #44]	; 0x2c
   1977c:	cmp	r0, r5
   19780:	moveq	r2, r5
   19784:	str	r3, [sp, #32]
   19788:	str	r3, [sp, #48]	; 0x30
   1978c:	str	r5, [sp, #52]	; 0x34
   19790:	str	r3, [sp, #60]	; 0x3c
   19794:	ldr	r3, [sp, #180]	; 0xb4
   19798:	str	r0, [sp, #56]	; 0x38
   1979c:	str	r5, [sp, #68]	; 0x44
   197a0:	str	r5, [sp, #80]	; 0x50
   197a4:	str	r5, [sp, #84]	; 0x54
   197a8:	and	r3, r3, #1
   197ac:	str	r2, [sp, #88]	; 0x58
   197b0:	str	r3, [sp, #92]	; 0x5c
   197b4:	ldr	r3, [sp, #180]	; 0xb4
   197b8:	and	r3, r3, #4
   197bc:	str	r3, [sp, #96]	; 0x60
   197c0:	ldr	r3, [sp, #192]	; 0xc0
   197c4:	str	r3, [sp, #72]	; 0x48
   197c8:	mov	r3, fp
   197cc:	mov	r7, #0
   197d0:	mov	fp, r9
   197d4:	mov	r9, r3
   197d8:	cmn	r8, #1
   197dc:	beq	19de0 <__assert_fail@plt+0x8440>
   197e0:	subs	r6, r8, r7
   197e4:	movne	r6, #1
   197e8:	cmp	r6, #0
   197ec:	beq	19df8 <__assert_fail@plt+0x8458>
   197f0:	ldr	r0, [sp, #28]
   197f4:	ldr	r3, [sp, #48]	; 0x30
   197f8:	cmp	r3, #0
   197fc:	add	r3, r0, r7
   19800:	str	r3, [sp, #36]	; 0x24
   19804:	beq	1a284 <__assert_fail@plt+0x88e4>
   19808:	ldr	r2, [sp, #56]	; 0x38
   1980c:	cmp	r2, #0
   19810:	beq	1a784 <__assert_fail@plt+0x8de4>
   19814:	cmp	r2, #1
   19818:	mov	r3, r2
   1981c:	movls	r3, #0
   19820:	movhi	r3, #1
   19824:	cmn	r8, #1
   19828:	add	r5, r7, r2
   1982c:	movne	r3, #0
   19830:	cmp	r3, #0
   19834:	beq	19840 <__assert_fail@plt+0x7ea0>
   19838:	bl	117a8 <strlen@plt>
   1983c:	mov	r8, r0
   19840:	cmp	r5, r8
   19844:	bhi	1a784 <__assert_fail@plt+0x8de4>
   19848:	ldr	r0, [sp, #36]	; 0x24
   1984c:	ldr	r2, [sp, #56]	; 0x38
   19850:	ldr	r1, [sp, #72]	; 0x48
   19854:	bl	1161c <memcmp@plt>
   19858:	cmp	r0, #0
   1985c:	bne	1a784 <__assert_fail@plt+0x8de4>
   19860:	ldr	r3, [sp, #44]	; 0x2c
   19864:	cmp	r3, #0
   19868:	bne	1af30 <__assert_fail@plt+0x9590>
   1986c:	ldr	r3, [sp, #36]	; 0x24
   19870:	ldrb	r5, [r3]
   19874:	cmp	r5, #126	; 0x7e
   19878:	ldrls	pc, [pc, r5, lsl #2]
   1987c:	b	1ad18 <__assert_fail@plt+0x9378>
   19880:	andeq	r9, r1, r4, asr pc
   19884:	andeq	sl, r1, r8, lsl sp
   19888:	andeq	sl, r1, r8, lsl sp
   1988c:	andeq	sl, r1, r8, lsl sp
   19890:	andeq	sl, r1, r8, lsl sp
   19894:	andeq	sl, r1, r8, lsl sp
   19898:	andeq	sl, r1, r8, lsl sp
   1989c:	andeq	r9, r1, ip, lsr #29
   198a0:	andeq	r9, r1, r4, lsr #29
   198a4:			; <UNDEFINED> instruction: 0x00019eb4
   198a8:	andeq	sl, r1, r8, lsr r0
   198ac:	andeq	sl, r1, r8, lsr #32
   198b0:	andeq	r9, r1, r0, asr sp
   198b4:	andeq	sl, r1, r4
   198b8:	andeq	sl, r1, r8, lsl sp
   198bc:	andeq	sl, r1, r8, lsl sp
   198c0:	andeq	sl, r1, r8, lsl sp
   198c4:	andeq	sl, r1, r8, lsl sp
   198c8:	andeq	sl, r1, r8, lsl sp
   198cc:	andeq	sl, r1, r8, lsl sp
   198d0:	andeq	sl, r1, r8, lsl sp
   198d4:	andeq	sl, r1, r8, lsl sp
   198d8:	andeq	sl, r1, r8, lsl sp
   198dc:	andeq	sl, r1, r8, lsl sp
   198e0:	andeq	sl, r1, r8, lsl sp
   198e4:	andeq	sl, r1, r8, lsl sp
   198e8:	andeq	sl, r1, r8, lsl sp
   198ec:	andeq	sl, r1, r8, lsl sp
   198f0:	andeq	sl, r1, r8, lsl sp
   198f4:	andeq	sl, r1, r8, lsl sp
   198f8:	andeq	sl, r1, r8, lsl sp
   198fc:	andeq	sl, r1, r8, lsl sp
   19900:	strheq	sl, [r1], -r0
   19904:	andeq	sl, r1, r4, lsr #1
   19908:	andeq	sl, r1, r4, lsr #1
   1990c:	muleq	r1, r8, r0
   19910:	andeq	sl, r1, r4, lsr #1
   19914:	andeq	sl, r1, ip, ror r1
   19918:	andeq	sl, r1, r4, lsr #1
   1991c:	andeq	sl, r1, ip, ror #3
   19920:	andeq	sl, r1, r4, lsr #1
   19924:	andeq	sl, r1, r4, lsr #1
   19928:	andeq	sl, r1, r4, lsr #1
   1992c:	andeq	sl, r1, ip, ror r1
   19930:	andeq	sl, r1, ip, ror r1
   19934:	andeq	sl, r1, ip, ror r1
   19938:	andeq	sl, r1, ip, ror r1
   1993c:	andeq	sl, r1, ip, ror r1
   19940:	andeq	sl, r1, ip, ror r1
   19944:	andeq	sl, r1, ip, ror r1
   19948:	andeq	sl, r1, ip, ror r1
   1994c:	andeq	sl, r1, ip, ror r1
   19950:	andeq	sl, r1, ip, ror r1
   19954:	andeq	sl, r1, ip, ror r1
   19958:	andeq	sl, r1, ip, ror r1
   1995c:	andeq	sl, r1, ip, ror r1
   19960:	andeq	sl, r1, ip, ror r1
   19964:	andeq	sl, r1, ip, ror r1
   19968:	andeq	sl, r1, ip, ror r1
   1996c:	andeq	sl, r1, r4, lsr #1
   19970:	andeq	sl, r1, r4, lsr #1
   19974:	andeq	sl, r1, r4, lsr #1
   19978:	andeq	sl, r1, r4, lsr #1
   1997c:	muleq	r1, ip, r1
   19980:	andeq	sl, r1, r8, lsl sp
   19984:	andeq	sl, r1, ip, ror r1
   19988:	andeq	sl, r1, ip, ror r1
   1998c:	andeq	sl, r1, ip, ror r1
   19990:	andeq	sl, r1, ip, ror r1
   19994:	andeq	sl, r1, ip, ror r1
   19998:	andeq	sl, r1, ip, ror r1
   1999c:	andeq	sl, r1, ip, ror r1
   199a0:	andeq	sl, r1, ip, ror r1
   199a4:	andeq	sl, r1, ip, ror r1
   199a8:	andeq	sl, r1, ip, ror r1
   199ac:	andeq	sl, r1, ip, ror r1
   199b0:	andeq	sl, r1, ip, ror r1
   199b4:	andeq	sl, r1, ip, ror r1
   199b8:	andeq	sl, r1, ip, ror r1
   199bc:	andeq	sl, r1, ip, ror r1
   199c0:	andeq	sl, r1, ip, ror r1
   199c4:	andeq	sl, r1, ip, ror r1
   199c8:	andeq	sl, r1, ip, ror r1
   199cc:	andeq	sl, r1, ip, ror r1
   199d0:	andeq	sl, r1, ip, ror r1
   199d4:	andeq	sl, r1, ip, ror r1
   199d8:	andeq	sl, r1, ip, ror r1
   199dc:	andeq	sl, r1, ip, ror r1
   199e0:	andeq	sl, r1, ip, ror r1
   199e4:	andeq	sl, r1, ip, ror r1
   199e8:	andeq	sl, r1, ip, ror r1
   199ec:	andeq	sl, r1, r4, lsr #1
   199f0:	andeq	sl, r1, r0, asr #2
   199f4:	andeq	sl, r1, ip, ror r1
   199f8:	andeq	sl, r1, r4, lsr #1
   199fc:	andeq	sl, r1, ip, ror r1
   19a00:	andeq	sl, r1, r4, lsr #1
   19a04:	andeq	sl, r1, ip, ror r1
   19a08:	andeq	sl, r1, ip, ror r1
   19a0c:	andeq	sl, r1, ip, ror r1
   19a10:	andeq	sl, r1, ip, ror r1
   19a14:	andeq	sl, r1, ip, ror r1
   19a18:	andeq	sl, r1, ip, ror r1
   19a1c:	andeq	sl, r1, ip, ror r1
   19a20:	andeq	sl, r1, ip, ror r1
   19a24:	andeq	sl, r1, ip, ror r1
   19a28:	andeq	sl, r1, ip, ror r1
   19a2c:	andeq	sl, r1, ip, ror r1
   19a30:	andeq	sl, r1, ip, ror r1
   19a34:	andeq	sl, r1, ip, ror r1
   19a38:	andeq	sl, r1, ip, ror r1
   19a3c:	andeq	sl, r1, ip, ror r1
   19a40:	andeq	sl, r1, ip, ror r1
   19a44:	andeq	sl, r1, ip, ror r1
   19a48:	andeq	sl, r1, ip, ror r1
   19a4c:	andeq	sl, r1, ip, ror r1
   19a50:	andeq	sl, r1, ip, ror r1
   19a54:	andeq	sl, r1, ip, ror r1
   19a58:	andeq	sl, r1, ip, ror r1
   19a5c:	andeq	sl, r1, ip, ror r1
   19a60:	andeq	sl, r1, ip, ror r1
   19a64:	andeq	sl, r1, ip, ror r1
   19a68:	andeq	sl, r1, ip, ror r1
   19a6c:	andeq	sl, r1, ip, asr #32
   19a70:	andeq	sl, r1, r4, lsr #1
   19a74:	andeq	sl, r1, ip, asr #32
   19a78:	muleq	r1, r8, r0
   19a7c:	ldr	r3, [sp, #180]	; 0xb4
   19a80:	cmp	r4, #0
   19a84:	and	r3, r3, #1
   19a88:	str	r3, [sp, #92]	; 0x5c
   19a8c:	ldr	r3, [sp, #180]	; 0xb4
   19a90:	and	r3, r3, #4
   19a94:	str	r3, [sp, #96]	; 0x60
   19a98:	moveq	r3, #1
   19a9c:	streq	r3, [sp, #60]	; 0x3c
   19aa0:	beq	1a230 <__assert_fail@plt+0x8890>
   19aa4:	mov	r3, #0
   19aa8:	mov	r2, #1
   19aac:	mov	r4, r3
   19ab0:	mov	r9, r3
   19ab4:	str	r2, [sp, #32]
   19ab8:	str	r2, [sp, #44]	; 0x2c
   19abc:	str	r3, [sp, #48]	; 0x30
   19ac0:	str	r2, [sp, #52]	; 0x34
   19ac4:	str	r2, [sp, #56]	; 0x38
   19ac8:	str	r3, [sp, #60]	; 0x3c
   19acc:	str	r2, [sp, #64]	; 0x40
   19ad0:	str	r2, [sp, #68]	; 0x44
   19ad4:	str	r3, [sp, #80]	; 0x50
   19ad8:	str	r3, [sp, #84]	; 0x54
   19adc:	str	r3, [sp, #88]	; 0x58
   19ae0:	movw	r3, #19848	; 0x4d88
   19ae4:	movt	r3, #3
   19ae8:	str	r3, [sp, #72]	; 0x48
   19aec:	mov	r3, #2
   19af0:	str	r3, [sp, #176]	; 0xb0
   19af4:	b	197c8 <__assert_fail@plt+0x7e28>
   19af8:	ldr	r3, [sp, #180]	; 0xb4
   19afc:	cmp	r4, #0
   19b00:	and	r3, r3, #1
   19b04:	str	r3, [sp, #92]	; 0x5c
   19b08:	ldr	r3, [sp, #180]	; 0xb4
   19b0c:	and	r3, r3, #4
   19b10:	str	r3, [sp, #96]	; 0x60
   19b14:	bne	1aee8 <__assert_fail@plt+0x9548>
   19b18:	cmp	sl, #0
   19b1c:	beq	1ac94 <__assert_fail@plt+0x92f4>
   19b20:	mov	r3, #34	; 0x22
   19b24:	mov	r2, r4
   19b28:	mov	r1, #1
   19b2c:	mov	r9, r2
   19b30:	strb	r3, [fp]
   19b34:	movw	r3, #19828	; 0x4d74
   19b38:	movt	r3, #3
   19b3c:	mov	r4, r1
   19b40:	str	r1, [sp, #32]
   19b44:	str	r2, [sp, #44]	; 0x2c
   19b48:	str	r1, [sp, #48]	; 0x30
   19b4c:	str	r2, [sp, #52]	; 0x34
   19b50:	str	r1, [sp, #56]	; 0x38
   19b54:	str	r1, [sp, #60]	; 0x3c
   19b58:	str	r2, [sp, #64]	; 0x40
   19b5c:	str	r2, [sp, #68]	; 0x44
   19b60:	str	r3, [sp, #72]	; 0x48
   19b64:	str	r2, [sp, #80]	; 0x50
   19b68:	str	r2, [sp, #84]	; 0x54
   19b6c:	str	r2, [sp, #88]	; 0x58
   19b70:	b	197c8 <__assert_fail@plt+0x7e28>
   19b74:	mov	r3, #0
   19b78:	mov	r2, #1
   19b7c:	mov	r9, r3
   19b80:	str	r2, [sp, #32]
   19b84:	str	r3, [sp, #44]	; 0x2c
   19b88:	str	r3, [sp, #48]	; 0x30
   19b8c:	str	r3, [sp, #52]	; 0x34
   19b90:	str	r3, [sp, #60]	; 0x3c
   19b94:	strd	r2, [sp, #64]	; 0x40
   19b98:	str	r3, [sp, #72]	; 0x48
   19b9c:	str	r3, [sp, #80]	; 0x50
   19ba0:	str	r3, [sp, #88]	; 0x58
   19ba4:	ldr	r3, [sp, #180]	; 0xb4
   19ba8:	and	r3, r3, r2
   19bac:	str	r3, [sp, #92]	; 0x5c
   19bb0:	ldr	r3, [sp, #180]	; 0xb4
   19bb4:	and	r3, r3, #4
   19bb8:	str	r3, [sp, #96]	; 0x60
   19bbc:	ldr	r3, [sp, #176]	; 0xb0
   19bc0:	mov	r4, r3
   19bc4:	str	r3, [sp, #56]	; 0x38
   19bc8:	str	r3, [sp, #84]	; 0x54
   19bcc:	b	197c8 <__assert_fail@plt+0x7e28>
   19bd0:	mov	r3, #1
   19bd4:	mov	r4, #0
   19bd8:	mov	r9, r4
   19bdc:	str	r3, [sp, #32]
   19be0:	str	r3, [sp, #44]	; 0x2c
   19be4:	str	r3, [sp, #48]	; 0x30
   19be8:	str	r4, [sp, #52]	; 0x34
   19bec:	str	r3, [sp, #56]	; 0x38
   19bf0:	str	r3, [sp, #60]	; 0x3c
   19bf4:	str	r3, [sp, #88]	; 0x58
   19bf8:	movw	r3, #19828	; 0x4d74
   19bfc:	movt	r3, #3
   19c00:	str	r4, [sp, #64]	; 0x40
   19c04:	str	r4, [sp, #68]	; 0x44
   19c08:	str	r3, [sp, #72]	; 0x48
   19c0c:	ldr	r3, [sp, #180]	; 0xb4
   19c10:	str	r4, [sp, #80]	; 0x50
   19c14:	str	r4, [sp, #84]	; 0x54
   19c18:	and	r3, r3, #1
   19c1c:	str	r3, [sp, #92]	; 0x5c
   19c20:	ldr	r3, [sp, #180]	; 0xb4
   19c24:	and	r3, r3, #4
   19c28:	str	r3, [sp, #96]	; 0x60
   19c2c:	mov	r3, #5
   19c30:	str	r3, [sp, #176]	; 0xb0
   19c34:	b	197c8 <__assert_fail@plt+0x7e28>
   19c38:	mov	r3, #1
   19c3c:	mov	r4, #0
   19c40:	mov	r9, r4
   19c44:	str	r3, [sp, #32]
   19c48:	str	r4, [sp, #44]	; 0x2c
   19c4c:	str	r3, [sp, #48]	; 0x30
   19c50:	str	r3, [sp, #60]	; 0x3c
   19c54:	ldr	r3, [sp, #180]	; 0xb4
   19c58:	str	r4, [sp, #52]	; 0x34
   19c5c:	str	r4, [sp, #56]	; 0x38
   19c60:	str	r4, [sp, #64]	; 0x40
   19c64:	str	r4, [sp, #68]	; 0x44
   19c68:	and	r3, r3, #1
   19c6c:	str	r4, [sp, #72]	; 0x48
   19c70:	str	r4, [sp, #80]	; 0x50
   19c74:	str	r4, [sp, #84]	; 0x54
   19c78:	str	r3, [sp, #92]	; 0x5c
   19c7c:	ldr	r3, [sp, #180]	; 0xb4
   19c80:	str	r4, [sp, #88]	; 0x58
   19c84:	and	r3, r3, #4
   19c88:	str	r3, [sp, #96]	; 0x60
   19c8c:	b	197c8 <__assert_fail@plt+0x7e28>
   19c90:	mov	r3, #0
   19c94:	mov	r2, #1
   19c98:	ldr	r1, [sp, #176]	; 0xb0
   19c9c:	mov	r4, r3
   19ca0:	mov	r9, r3
   19ca4:	movw	r3, #19848	; 0x4d88
   19ca8:	movt	r3, #3
   19cac:	str	r2, [sp, #32]
   19cb0:	str	r2, [sp, #44]	; 0x2c
   19cb4:	str	r4, [sp, #48]	; 0x30
   19cb8:	strd	r2, [sp, #68]	; 0x44
   19cbc:	ldr	r3, [sp, #180]	; 0xb4
   19cc0:	str	r2, [sp, #52]	; 0x34
   19cc4:	str	r1, [sp, #56]	; 0x38
   19cc8:	str	r4, [sp, #60]	; 0x3c
   19ccc:	str	r2, [sp, #64]	; 0x40
   19cd0:	and	r3, r3, r2
   19cd4:	str	r4, [sp, #80]	; 0x50
   19cd8:	str	r4, [sp, #84]	; 0x54
   19cdc:	str	r4, [sp, #88]	; 0x58
   19ce0:	str	r3, [sp, #92]	; 0x5c
   19ce4:	ldr	r3, [sp, #180]	; 0xb4
   19ce8:	and	r3, r3, #4
   19cec:	str	r3, [sp, #96]	; 0x60
   19cf0:	mov	r3, #2
   19cf4:	str	r3, [sp, #176]	; 0xb0
   19cf8:	b	197c8 <__assert_fail@plt+0x7e28>
   19cfc:	mov	r3, #1
   19d00:	mov	r2, #0
   19d04:	mov	r4, r2
   19d08:	mov	r9, r2
   19d0c:	str	r3, [sp, #32]
   19d10:	str	r3, [sp, #44]	; 0x2c
   19d14:	str	r2, [sp, #48]	; 0x30
   19d18:	str	r3, [sp, #52]	; 0x34
   19d1c:	str	r3, [sp, #56]	; 0x38
   19d20:	str	r3, [sp, #60]	; 0x3c
   19d24:	str	r3, [sp, #64]	; 0x40
   19d28:	str	r3, [sp, #68]	; 0x44
   19d2c:	str	r3, [sp, #88]	; 0x58
   19d30:	movw	r3, #19848	; 0x4d88
   19d34:	movt	r3, #3
   19d38:	str	r3, [sp, #72]	; 0x48
   19d3c:	ldr	r3, [sp, #180]	; 0xb4
   19d40:	str	r2, [sp, #80]	; 0x50
   19d44:	str	r2, [sp, #84]	; 0x54
   19d48:	and	r3, r3, #1
   19d4c:	b	19ce0 <__assert_fail@plt+0x8340>
   19d50:	mov	r5, #102	; 0x66
   19d54:	mov	r6, #0
   19d58:	ldr	r3, [sp, #44]	; 0x2c
   19d5c:	cmp	r3, #0
   19d60:	bne	1ac10 <__assert_fail@plt+0x9270>
   19d64:	ldr	r2, [sp, #52]	; 0x34
   19d68:	eor	r3, fp, #1
   19d6c:	ands	r3, r2, r3
   19d70:	beq	19da8 <__assert_fail@plt+0x8408>
   19d74:	cmp	sl, r4
   19d78:	mov	fp, r3
   19d7c:	movhi	r2, #39	; 0x27
   19d80:	strbhi	r2, [r9, r4]
   19d84:	add	r2, r4, #1
   19d88:	cmp	sl, r2
   19d8c:	movhi	r1, #36	; 0x24
   19d90:	strbhi	r1, [r9, r2]
   19d94:	add	r2, r4, #2
   19d98:	add	r4, r4, #3
   19d9c:	cmp	sl, r2
   19da0:	movhi	r1, #39	; 0x27
   19da4:	strbhi	r1, [r9, r2]
   19da8:	cmp	sl, r4
   19dac:	add	r7, r7, #1
   19db0:	movhi	r3, #92	; 0x5c
   19db4:	strbhi	r3, [r9, r4]
   19db8:	add	r4, r4, #1
   19dbc:	cmp	r4, sl
   19dc0:	ldr	r3, [sp, #32]
   19dc4:	strbcc	r5, [r9, r4]
   19dc8:	cmp	r6, #0
   19dcc:	add	r4, r4, #1
   19dd0:	moveq	r3, #0
   19dd4:	cmn	r8, #1
   19dd8:	str	r3, [sp, #32]
   19ddc:	bne	197e0 <__assert_fail@plt+0x7e40>
   19de0:	ldr	r3, [sp, #28]
   19de4:	ldrb	r6, [r3, r7]
   19de8:	adds	r6, r6, #0
   19dec:	movne	r6, #1
   19df0:	cmp	r6, #0
   19df4:	bne	197f0 <__assert_fail@plt+0x7e50>
   19df8:	mov	r3, r9
   19dfc:	mov	r9, fp
   19e00:	mov	fp, r3
   19e04:	ldr	r3, [sp, #68]	; 0x44
   19e08:	cmp	r4, #0
   19e0c:	movne	r3, #0
   19e10:	cmp	r3, #0
   19e14:	bne	1b008 <__assert_fail@plt+0x9668>
   19e18:	ldr	r3, [sp, #44]	; 0x2c
   19e1c:	ldr	r2, [sp, #52]	; 0x34
   19e20:	eor	r3, r3, #1
   19e24:	ands	r2, r3, r2
   19e28:	beq	1af40 <__assert_fail@plt+0x95a0>
   19e2c:	ldr	r3, [sp, #80]	; 0x50
   19e30:	cmp	r3, #0
   19e34:	beq	1af44 <__assert_fail@plt+0x95a4>
   19e38:	ldr	r3, [sp, #32]
   19e3c:	cmp	r3, #0
   19e40:	bne	1afb8 <__assert_fail@plt+0x9618>
   19e44:	ldr	r3, [sp, #84]	; 0x54
   19e48:	adds	r3, r3, #0
   19e4c:	movne	r3, #1
   19e50:	cmp	sl, #0
   19e54:	movne	r3, #0
   19e58:	cmp	r3, #0
   19e5c:	ldreq	r2, [sp, #80]	; 0x50
   19e60:	beq	1af44 <__assert_fail@plt+0x95a4>
   19e64:	ldr	r2, [sp, #84]	; 0x54
   19e68:	mov	sl, r2
   19e6c:	mov	r0, #0
   19e70:	mov	r4, #1
   19e74:	mov	r1, #39	; 0x27
   19e78:	str	r0, [sp, #44]	; 0x2c
   19e7c:	strb	r1, [fp]
   19e80:	str	r0, [sp, #48]	; 0x30
   19e84:	str	r4, [sp, #52]	; 0x34
   19e88:	str	r4, [sp, #56]	; 0x38
   19e8c:	str	r4, [sp, #64]	; 0x40
   19e90:	str	r0, [sp, #68]	; 0x44
   19e94:	str	r3, [sp, #80]	; 0x50
   19e98:	str	r2, [sp, #84]	; 0x54
   19e9c:	str	r0, [sp, #88]	; 0x58
   19ea0:	b	19ae0 <__assert_fail@plt+0x8140>
   19ea4:	mov	r5, #98	; 0x62
   19ea8:	b	19d54 <__assert_fail@plt+0x83b4>
   19eac:	mov	r5, #97	; 0x61
   19eb0:	b	19d54 <__assert_fail@plt+0x83b4>
   19eb4:	ldr	r3, [sp, #48]	; 0x30
   19eb8:	str	r3, [sp, #40]	; 0x28
   19ebc:	mov	r3, #116	; 0x74
   19ec0:	ldr	r2, [sp, #68]	; 0x44
   19ec4:	cmp	r2, #0
   19ec8:	bne	1a0c4 <__assert_fail@plt+0x8724>
   19ecc:	ldr	r2, [sp, #60]	; 0x3c
   19ed0:	cmp	r2, #0
   19ed4:	bne	1a020 <__assert_fail@plt+0x8680>
   19ed8:	ldr	r3, [sp, #44]	; 0x2c
   19edc:	mov	r6, #0
   19ee0:	cmp	r3, #0
   19ee4:	beq	1a090 <__assert_fail@plt+0x86f0>
   19ee8:	mov	r3, fp
   19eec:	ldr	r2, [sp, #184]	; 0xb8
   19ef0:	cmp	r2, #0
   19ef4:	beq	19f14 <__assert_fail@plt+0x8574>
   19ef8:	ubfx	r1, r5, #5, #8
   19efc:	mov	r0, r2
   19f00:	and	r2, r5, #31
   19f04:	ldr	r1, [r0, r1, lsl #2]
   19f08:	lsr	r2, r1, r2
   19f0c:	tst	r2, #1
   19f10:	bne	19d58 <__assert_fail@plt+0x83b8>
   19f14:	ldr	r2, [sp, #40]	; 0x28
   19f18:	cmp	r2, #0
   19f1c:	addeq	r7, r7, #1
   19f20:	bne	19d58 <__assert_fail@plt+0x83b8>
   19f24:	cmp	r3, #0
   19f28:	beq	19dbc <__assert_fail@plt+0x841c>
   19f2c:	cmp	sl, r4
   19f30:	mov	fp, #0
   19f34:	movhi	r3, #39	; 0x27
   19f38:	strbhi	r3, [r9, r4]
   19f3c:	add	r3, r4, #1
   19f40:	add	r4, r4, #2
   19f44:	cmp	sl, r3
   19f48:	movhi	r2, #39	; 0x27
   19f4c:	strbhi	r2, [r9, r3]
   19f50:	b	19dbc <__assert_fail@plt+0x841c>
   19f54:	ldr	r3, [sp, #48]	; 0x30
   19f58:	str	r3, [sp, #40]	; 0x28
   19f5c:	eor	r3, fp, #1
   19f60:	ldr	r2, [sp, #52]	; 0x34
   19f64:	ands	r2, r2, r3
   19f68:	beq	1ac28 <__assert_fail@plt+0x9288>
   19f6c:	cmp	sl, r4
   19f70:	movhi	r3, #39	; 0x27
   19f74:	strbhi	r3, [r9, r4]
   19f78:	add	r3, r4, #1
   19f7c:	cmp	sl, r3
   19f80:	movhi	r1, #36	; 0x24
   19f84:	strbhi	r1, [r9, r3]
   19f88:	add	r3, r4, #2
   19f8c:	cmp	sl, r3
   19f90:	movhi	r1, #39	; 0x27
   19f94:	strbhi	r1, [r9, r3]
   19f98:	add	r3, r4, #3
   19f9c:	cmp	sl, r3
   19fa0:	bls	1ac74 <__assert_fail@plt+0x92d4>
   19fa4:	mov	r4, r3
   19fa8:	mov	r3, #92	; 0x5c
   19fac:	mov	fp, r2
   19fb0:	mov	r2, r4
   19fb4:	strb	r3, [r9, r4]
   19fb8:	ldr	r3, [sp, #176]	; 0xb0
   19fbc:	add	r4, r4, #1
   19fc0:	cmp	r3, #2
   19fc4:	beq	1acdc <__assert_fail@plt+0x933c>
   19fc8:	add	r3, r7, #1
   19fcc:	cmp	r3, r8
   19fd0:	bcs	19fe8 <__assert_fail@plt+0x8648>
   19fd4:	ldr	r1, [sp, #28]
   19fd8:	ldrb	r3, [r1, r3]
   19fdc:	sub	r3, r3, #48	; 0x30
   19fe0:	cmp	r3, #9
   19fe4:	bls	1acec <__assert_fail@plt+0x934c>
   19fe8:	mov	r3, #0
   19fec:	mov	r5, #48	; 0x30
   19ff0:	ldr	r6, [sp, #64]	; 0x40
   19ff4:	cmp	r6, #0
   19ff8:	beq	19eec <__assert_fail@plt+0x854c>
   19ffc:	mov	r6, #0
   1a000:	b	19f14 <__assert_fail@plt+0x8574>
   1a004:	ldr	r3, [sp, #48]	; 0x30
   1a008:	str	r3, [sp, #40]	; 0x28
   1a00c:	ldr	r2, [sp, #60]	; 0x3c
   1a010:	mov	r5, #13
   1a014:	mov	r3, #114	; 0x72
   1a018:	cmp	r2, #0
   1a01c:	beq	19ed8 <__assert_fail@plt+0x8538>
   1a020:	mov	r5, r3
   1a024:	b	19d54 <__assert_fail@plt+0x83b4>
   1a028:	ldr	r3, [sp, #48]	; 0x30
   1a02c:	str	r3, [sp, #40]	; 0x28
   1a030:	mov	r3, #118	; 0x76
   1a034:	b	19ecc <__assert_fail@plt+0x852c>
   1a038:	ldr	r3, [sp, #48]	; 0x30
   1a03c:	str	r3, [sp, #40]	; 0x28
   1a040:	mov	r5, #10
   1a044:	mov	r3, #110	; 0x6e
   1a048:	b	19ecc <__assert_fail@plt+0x852c>
   1a04c:	ldr	r3, [sp, #48]	; 0x30
   1a050:	cmn	r8, #1
   1a054:	str	r3, [sp, #40]	; 0x28
   1a058:	beq	1a4a0 <__assert_fail@plt+0x8b00>
   1a05c:	subs	r3, r8, #1
   1a060:	movne	r3, #1
   1a064:	cmp	r3, #0
   1a068:	bne	1a074 <__assert_fail@plt+0x86d4>
   1a06c:	cmp	r7, #0
   1a070:	beq	1a0b8 <__assert_fail@plt+0x8718>
   1a074:	mov	r6, #0
   1a078:	ldr	r3, [sp, #64]	; 0x40
   1a07c:	cmp	r3, #0
   1a080:	beq	19ee8 <__assert_fail@plt+0x8548>
   1a084:	ldr	r3, [sp, #44]	; 0x2c
   1a088:	cmp	r3, #0
   1a08c:	bne	19ee8 <__assert_fail@plt+0x8548>
   1a090:	mov	r3, fp
   1a094:	b	19f14 <__assert_fail@plt+0x8574>
   1a098:	ldr	r3, [sp, #48]	; 0x30
   1a09c:	str	r3, [sp, #40]	; 0x28
   1a0a0:	b	1a06c <__assert_fail@plt+0x86cc>
   1a0a4:	ldr	r3, [sp, #48]	; 0x30
   1a0a8:	str	r3, [sp, #40]	; 0x28
   1a0ac:	b	1a074 <__assert_fail@plt+0x86d4>
   1a0b0:	ldr	r6, [sp, #48]	; 0x30
   1a0b4:	str	r6, [sp, #40]	; 0x28
   1a0b8:	ldr	r3, [sp, #68]	; 0x44
   1a0bc:	cmp	r3, #0
   1a0c0:	beq	1a078 <__assert_fail@plt+0x86d8>
   1a0c4:	mov	r3, #2
   1a0c8:	mov	fp, r9
   1a0cc:	str	r3, [sp, #176]	; 0xb0
   1a0d0:	ldr	r3, [sp, #60]	; 0x3c
   1a0d4:	cmp	r3, #0
   1a0d8:	ldr	r3, [sp, #176]	; 0xb0
   1a0dc:	movne	r3, #4
   1a0e0:	str	r3, [sp, #176]	; 0xb0
   1a0e4:	mov	lr, #0
   1a0e8:	mov	r0, fp
   1a0ec:	ldr	r2, [sp, #28]
   1a0f0:	ldr	r3, [sp, #180]	; 0xb4
   1a0f4:	ldr	r1, [sp, #188]	; 0xbc
   1a0f8:	bic	ip, r3, #2
   1a0fc:	ldr	r3, [sp, #176]	; 0xb0
   1a100:	stm	sp, {r3, ip, lr}
   1a104:	mov	r3, r8
   1a108:	ldr	ip, [sp, #192]	; 0xc0
   1a10c:	str	r1, [sp, #12]
   1a110:	mov	r1, sl
   1a114:	str	ip, [sp, #16]
   1a118:	bl	196a4 <__assert_fail@plt+0x7d04>
   1a11c:	mov	r4, r0
   1a120:	mov	r0, r4
   1a124:	add	sp, sp, #140	; 0x8c
   1a128:	ldrd	r4, [sp]
   1a12c:	ldrd	r6, [sp, #8]
   1a130:	ldrd	r8, [sp, #16]
   1a134:	ldrd	sl, [sp, #24]
   1a138:	add	sp, sp, #32
   1a13c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a140:	ldr	r3, [sp, #48]	; 0x30
   1a144:	str	r3, [sp, #40]	; 0x28
   1a148:	ldr	r3, [sp, #176]	; 0xb0
   1a14c:	cmp	r3, #2
   1a150:	beq	1a4c8 <__assert_fail@plt+0x8b28>
   1a154:	ldr	r3, [sp, #88]	; 0x58
   1a158:	cmp	r3, #0
   1a15c:	moveq	r5, #92	; 0x5c
   1a160:	moveq	r3, r5
   1a164:	beq	19ecc <__assert_fail@plt+0x852c>
   1a168:	add	r7, r7, #1
   1a16c:	mov	r3, fp
   1a170:	mov	r6, #0
   1a174:	mov	r5, #92	; 0x5c
   1a178:	b	19f24 <__assert_fail@plt+0x8584>
   1a17c:	ldr	r3, [sp, #64]	; 0x40
   1a180:	cmp	r3, #0
   1a184:	bne	1affc <__assert_fail@plt+0x965c>
   1a188:	ldr	r2, [sp, #48]	; 0x30
   1a18c:	mov	r3, fp
   1a190:	mov	r6, r2
   1a194:	str	r2, [sp, #40]	; 0x28
   1a198:	b	19eec <__assert_fail@plt+0x854c>
   1a19c:	ldr	r3, [sp, #176]	; 0xb0
   1a1a0:	cmp	r3, #2
   1a1a4:	beq	1af38 <__assert_fail@plt+0x9598>
   1a1a8:	cmp	r3, #5
   1a1ac:	ldr	r3, [sp, #48]	; 0x30
   1a1b0:	str	r3, [sp, #40]	; 0x28
   1a1b4:	bne	1a1e0 <__assert_fail@plt+0x8840>
   1a1b8:	ldr	r3, [sp, #96]	; 0x60
   1a1bc:	cmp	r3, #0
   1a1c0:	beq	1ac3c <__assert_fail@plt+0x929c>
   1a1c4:	add	r3, r7, #2
   1a1c8:	cmp	r3, r8
   1a1cc:	bcs	1a1e0 <__assert_fail@plt+0x8840>
   1a1d0:	ldr	r2, [sp, #36]	; 0x24
   1a1d4:	ldrb	r5, [r2, #1]
   1a1d8:	cmp	r5, #63	; 0x3f
   1a1dc:	beq	1ad24 <__assert_fail@plt+0x9384>
   1a1e0:	mov	r6, #0
   1a1e4:	mov	r5, #63	; 0x3f
   1a1e8:	b	1a078 <__assert_fail@plt+0x86d8>
   1a1ec:	ldr	r3, [sp, #176]	; 0xb0
   1a1f0:	cmp	r3, #2
   1a1f4:	ldr	r3, [sp, #48]	; 0x30
   1a1f8:	beq	1a9e0 <__assert_fail@plt+0x9040>
   1a1fc:	mov	r5, #39	; 0x27
   1a200:	str	r3, [sp, #40]	; 0x28
   1a204:	str	r6, [sp, #80]	; 0x50
   1a208:	b	1a078 <__assert_fail@plt+0x86d8>
   1a20c:	ldr	r3, [sp, #180]	; 0xb4
   1a210:	cmp	r4, #0
   1a214:	and	r3, r3, #1
   1a218:	str	r3, [sp, #92]	; 0x5c
   1a21c:	ldr	r3, [sp, #180]	; 0xb4
   1a220:	and	r3, r3, #4
   1a224:	str	r3, [sp, #96]	; 0x60
   1a228:	bne	1b048 <__assert_fail@plt+0x96a8>
   1a22c:	str	r4, [sp, #60]	; 0x3c
   1a230:	cmp	sl, #0
   1a234:	bne	1b02c <__assert_fail@plt+0x968c>
   1a238:	mov	r3, #1
   1a23c:	movw	r2, #19848	; 0x4d88
   1a240:	movt	r2, #3
   1a244:	mov	r4, r3
   1a248:	mov	r3, #2
   1a24c:	mov	r9, sl
   1a250:	str	r4, [sp, #32]
   1a254:	str	sl, [sp, #44]	; 0x2c
   1a258:	str	sl, [sp, #48]	; 0x30
   1a25c:	str	r4, [sp, #52]	; 0x34
   1a260:	str	r4, [sp, #56]	; 0x38
   1a264:	str	r4, [sp, #64]	; 0x40
   1a268:	str	sl, [sp, #68]	; 0x44
   1a26c:	str	r2, [sp, #72]	; 0x48
   1a270:	str	sl, [sp, #80]	; 0x50
   1a274:	str	sl, [sp, #84]	; 0x54
   1a278:	str	sl, [sp, #88]	; 0x58
   1a27c:	str	r3, [sp, #176]	; 0xb0
   1a280:	b	197c8 <__assert_fail@plt+0x7e28>
   1a284:	ldrb	r5, [r0, r7]
   1a288:	cmp	r5, #126	; 0x7e
   1a28c:	ldrls	pc, [pc, r5, lsl #2]
   1a290:	b	1a5f4 <__assert_fail@plt+0x8c54>
   1a294:	andeq	sl, r1, r0, asr #11
   1a298:	strdeq	sl, [r1], -r4
   1a29c:	strdeq	sl, [r1], -r4
   1a2a0:	strdeq	sl, [r1], -r4
   1a2a4:	strdeq	sl, [r1], -r4
   1a2a8:	strdeq	sl, [r1], -r4
   1a2ac:	strdeq	sl, [r1], -r4
   1a2b0:			; <UNDEFINED> instruction: 0x0001a5b0
   1a2b4:	andeq	sl, r1, r0, lsr #11
   1a2b8:	andeq	sl, r1, r4, lsr #10
   1a2bc:	muleq	r1, r0, r5
   1a2c0:	andeq	sl, r1, r4, lsl #10
   1a2c4:	andeq	sl, r1, r4, ror #11
   1a2c8:	andeq	sl, r1, r0, ror r5
   1a2cc:	strdeq	sl, [r1], -r4
   1a2d0:	strdeq	sl, [r1], -r4
   1a2d4:	strdeq	sl, [r1], -r4
   1a2d8:	strdeq	sl, [r1], -r4
   1a2dc:	strdeq	sl, [r1], -r4
   1a2e0:	strdeq	sl, [r1], -r4
   1a2e4:	strdeq	sl, [r1], -r4
   1a2e8:	strdeq	sl, [r1], -r4
   1a2ec:	strdeq	sl, [r1], -r4
   1a2f0:	strdeq	sl, [r1], -r4
   1a2f4:	strdeq	sl, [r1], -r4
   1a2f8:	strdeq	sl, [r1], -r4
   1a2fc:	strdeq	sl, [r1], -r4
   1a300:	strdeq	sl, [r1], -r4
   1a304:	strdeq	sl, [r1], -r4
   1a308:	strdeq	sl, [r1], -r4
   1a30c:	strdeq	sl, [r1], -r4
   1a310:	strdeq	sl, [r1], -r4
   1a314:	andeq	sl, r1, r8, lsl r5
   1a318:	andeq	sl, r1, r0, lsl #11
   1a31c:	andeq	sl, r1, r0, lsl #11
   1a320:	strdeq	sl, [r1], -r8
   1a324:	andeq	sl, r1, r0, lsl #11
   1a328:	andeq	sl, r1, ip, ror #9
   1a32c:	andeq	sl, r1, r0, lsl #11
   1a330:	andeq	sl, r1, ip, asr r5
   1a334:	andeq	sl, r1, r0, lsl #11
   1a338:	andeq	sl, r1, r0, lsl #11
   1a33c:	andeq	sl, r1, r0, lsl #11
   1a340:	andeq	sl, r1, ip, ror #9
   1a344:	andeq	sl, r1, ip, ror #9
   1a348:	andeq	sl, r1, ip, ror #9
   1a34c:	andeq	sl, r1, ip, ror #9
   1a350:	andeq	sl, r1, ip, ror #9
   1a354:	andeq	sl, r1, ip, ror #9
   1a358:	andeq	sl, r1, ip, ror #9
   1a35c:	andeq	sl, r1, ip, ror #9
   1a360:	andeq	sl, r1, ip, ror #9
   1a364:	andeq	sl, r1, ip, ror #9
   1a368:	andeq	sl, r1, ip, ror #9
   1a36c:	andeq	sl, r1, ip, ror #9
   1a370:	andeq	sl, r1, ip, ror #9
   1a374:	andeq	sl, r1, ip, ror #9
   1a378:	andeq	sl, r1, ip, ror #9
   1a37c:	andeq	sl, r1, ip, ror #9
   1a380:	andeq	sl, r1, r0, lsl #11
   1a384:	andeq	sl, r1, r0, lsl #11
   1a388:	andeq	sl, r1, r0, lsl #11
   1a38c:	andeq	sl, r1, r0, lsl #11
   1a390:	andeq	sl, r1, r4, lsr r5
   1a394:	strdeq	sl, [r1], -r4
   1a398:	andeq	sl, r1, ip, ror #9
   1a39c:	andeq	sl, r1, ip, ror #9
   1a3a0:	andeq	sl, r1, ip, ror #9
   1a3a4:	andeq	sl, r1, ip, ror #9
   1a3a8:	andeq	sl, r1, ip, ror #9
   1a3ac:	andeq	sl, r1, ip, ror #9
   1a3b0:	andeq	sl, r1, ip, ror #9
   1a3b4:	andeq	sl, r1, ip, ror #9
   1a3b8:	andeq	sl, r1, ip, ror #9
   1a3bc:	andeq	sl, r1, ip, ror #9
   1a3c0:	andeq	sl, r1, ip, ror #9
   1a3c4:	andeq	sl, r1, ip, ror #9
   1a3c8:	andeq	sl, r1, ip, ror #9
   1a3cc:	andeq	sl, r1, ip, ror #9
   1a3d0:	andeq	sl, r1, ip, ror #9
   1a3d4:	andeq	sl, r1, ip, ror #9
   1a3d8:	andeq	sl, r1, ip, ror #9
   1a3dc:	andeq	sl, r1, ip, ror #9
   1a3e0:	andeq	sl, r1, ip, ror #9
   1a3e4:	andeq	sl, r1, ip, ror #9
   1a3e8:	andeq	sl, r1, ip, ror #9
   1a3ec:	andeq	sl, r1, ip, ror #9
   1a3f0:	andeq	sl, r1, ip, ror #9
   1a3f4:	andeq	sl, r1, ip, ror #9
   1a3f8:	andeq	sl, r1, ip, ror #9
   1a3fc:	andeq	sl, r1, ip, ror #9
   1a400:	andeq	sl, r1, r0, lsl #11
   1a404:			; <UNDEFINED> instruction: 0x0001a4b4
   1a408:	andeq	sl, r1, ip, ror #9
   1a40c:	andeq	sl, r1, r0, lsl #11
   1a410:	andeq	sl, r1, ip, ror #9
   1a414:	andeq	sl, r1, r0, lsl #11
   1a418:	andeq	sl, r1, ip, ror #9
   1a41c:	andeq	sl, r1, ip, ror #9
   1a420:	andeq	sl, r1, ip, ror #9
   1a424:	andeq	sl, r1, ip, ror #9
   1a428:	andeq	sl, r1, ip, ror #9
   1a42c:	andeq	sl, r1, ip, ror #9
   1a430:	andeq	sl, r1, ip, ror #9
   1a434:	andeq	sl, r1, ip, ror #9
   1a438:	andeq	sl, r1, ip, ror #9
   1a43c:	andeq	sl, r1, ip, ror #9
   1a440:	andeq	sl, r1, ip, ror #9
   1a444:	andeq	sl, r1, ip, ror #9
   1a448:	andeq	sl, r1, ip, ror #9
   1a44c:	andeq	sl, r1, ip, ror #9
   1a450:	andeq	sl, r1, ip, ror #9
   1a454:	andeq	sl, r1, ip, ror #9
   1a458:	andeq	sl, r1, ip, ror #9
   1a45c:	andeq	sl, r1, ip, ror #9
   1a460:	andeq	sl, r1, ip, ror #9
   1a464:	andeq	sl, r1, ip, ror #9
   1a468:	andeq	sl, r1, ip, ror #9
   1a46c:	andeq	sl, r1, ip, ror #9
   1a470:	andeq	sl, r1, ip, ror #9
   1a474:	andeq	sl, r1, ip, ror #9
   1a478:	andeq	sl, r1, ip, ror #9
   1a47c:	andeq	sl, r1, ip, ror #9
   1a480:	muleq	r1, r0, r4
   1a484:	andeq	sl, r1, r0, lsl #11
   1a488:	muleq	r1, r0, r4
   1a48c:	strdeq	sl, [r1], -r8
   1a490:	mov	r3, #0
   1a494:	cmn	r8, #1
   1a498:	str	r3, [sp, #40]	; 0x28
   1a49c:	bne	1a05c <__assert_fail@plt+0x86bc>
   1a4a0:	ldr	r3, [sp, #28]
   1a4a4:	ldrb	r3, [r3, #1]
   1a4a8:	adds	r3, r3, #0
   1a4ac:	movne	r3, #1
   1a4b0:	b	1a064 <__assert_fail@plt+0x86c4>
   1a4b4:	mov	r3, #0
   1a4b8:	str	r3, [sp, #40]	; 0x28
   1a4bc:	ldr	r3, [sp, #176]	; 0xb0
   1a4c0:	cmp	r3, #2
   1a4c4:	bne	1a154 <__assert_fail@plt+0x87b4>
   1a4c8:	ldr	r3, [sp, #44]	; 0x2c
   1a4cc:	cmp	r3, #0
   1a4d0:	bne	1ae10 <__assert_fail@plt+0x9470>
   1a4d4:	mov	r6, r3
   1a4d8:	add	r7, r7, #1
   1a4dc:	mov	r3, fp
   1a4e0:	mov	r5, #92	; 0x5c
   1a4e4:	b	19f24 <__assert_fail@plt+0x8584>
   1a4e8:	ldr	r6, [sp, #48]	; 0x30
   1a4ec:	mov	r3, #0
   1a4f0:	str	r3, [sp, #40]	; 0x28
   1a4f4:	b	1a078 <__assert_fail@plt+0x86d8>
   1a4f8:	mov	r3, #0
   1a4fc:	str	r3, [sp, #40]	; 0x28
   1a500:	b	1a06c <__assert_fail@plt+0x86cc>
   1a504:	mov	r3, #0
   1a508:	str	r3, [sp, #40]	; 0x28
   1a50c:	mov	r3, #118	; 0x76
   1a510:	b	19ecc <__assert_fail@plt+0x852c>
   1a514:	ldr	r6, [sp, #48]	; 0x30
   1a518:	mov	r3, #0
   1a51c:	str	r3, [sp, #40]	; 0x28
   1a520:	b	1a0b8 <__assert_fail@plt+0x8718>
   1a524:	mov	r3, #0
   1a528:	str	r3, [sp, #40]	; 0x28
   1a52c:	mov	r3, #116	; 0x74
   1a530:	b	19ec0 <__assert_fail@plt+0x8520>
   1a534:	ldr	r3, [sp, #176]	; 0xb0
   1a538:	cmp	r3, #2
   1a53c:	beq	1aa4c <__assert_fail@plt+0x90ac>
   1a540:	cmp	r3, #5
   1a544:	mov	r3, #0
   1a548:	str	r3, [sp, #40]	; 0x28
   1a54c:	beq	1a1b8 <__assert_fail@plt+0x8818>
   1a550:	mov	r6, #0
   1a554:	mov	r5, #63	; 0x3f
   1a558:	b	1a078 <__assert_fail@plt+0x86d8>
   1a55c:	ldr	r3, [sp, #176]	; 0xb0
   1a560:	cmp	r3, #2
   1a564:	beq	1a9d4 <__assert_fail@plt+0x9034>
   1a568:	mov	r3, #0
   1a56c:	b	1a1fc <__assert_fail@plt+0x885c>
   1a570:	mov	r3, #0
   1a574:	str	r3, [sp, #40]	; 0x28
   1a578:	mov	r3, #114	; 0x72
   1a57c:	b	19ec0 <__assert_fail@plt+0x8520>
   1a580:	mov	r3, #0
   1a584:	mov	r6, r3
   1a588:	str	r3, [sp, #40]	; 0x28
   1a58c:	b	1a0b8 <__assert_fail@plt+0x8718>
   1a590:	mov	r3, #0
   1a594:	str	r3, [sp, #40]	; 0x28
   1a598:	mov	r3, #110	; 0x6e
   1a59c:	b	19ec0 <__assert_fail@plt+0x8520>
   1a5a0:	mov	r3, #0
   1a5a4:	str	r3, [sp, #40]	; 0x28
   1a5a8:	mov	r3, #98	; 0x62
   1a5ac:	b	19ecc <__assert_fail@plt+0x852c>
   1a5b0:	mov	r3, #0
   1a5b4:	str	r3, [sp, #40]	; 0x28
   1a5b8:	mov	r3, #97	; 0x61
   1a5bc:	b	19ecc <__assert_fail@plt+0x852c>
   1a5c0:	ldr	r3, [sp, #60]	; 0x3c
   1a5c4:	cmp	r3, #0
   1a5c8:	bne	1a9b8 <__assert_fail@plt+0x9018>
   1a5cc:	ldr	r3, [sp, #92]	; 0x5c
   1a5d0:	cmp	r3, #0
   1a5d4:	addne	r7, r7, #1
   1a5d8:	bne	197d8 <__assert_fail@plt+0x7e38>
   1a5dc:	str	r3, [sp, #40]	; 0x28
   1a5e0:	b	19ed8 <__assert_fail@plt+0x8538>
   1a5e4:	mov	r3, #0
   1a5e8:	str	r3, [sp, #40]	; 0x28
   1a5ec:	mov	r3, #102	; 0x66
   1a5f0:	b	19ecc <__assert_fail@plt+0x852c>
   1a5f4:	mov	r3, #0
   1a5f8:	str	r3, [sp, #40]	; 0x28
   1a5fc:	ldr	r3, [sp, #76]	; 0x4c
   1a600:	cmp	r3, #1
   1a604:	bne	1aa6c <__assert_fail@plt+0x90cc>
   1a608:	bl	11778 <__ctype_b_loc@plt>
   1a60c:	ldr	r2, [r0]
   1a610:	sxth	r3, r5
   1a614:	lsl	r3, r3, #1
   1a618:	ldr	r1, [sp, #76]	; 0x4c
   1a61c:	ldrh	r3, [r2, r3]
   1a620:	mov	r0, r1
   1a624:	and	r3, r3, #16384	; 0x4000
   1a628:	cmp	r3, #0
   1a62c:	ldr	r3, [sp, #60]	; 0x3c
   1a630:	movne	r6, #1
   1a634:	moveq	r6, #0
   1a638:	movne	r2, #0
   1a63c:	andeq	r2, r3, #1
   1a640:	cmp	r2, #0
   1a644:	beq	1a078 <__assert_fail@plt+0x86d8>
   1a648:	ldr	r2, [sp, #60]	; 0x3c
   1a64c:	mov	r6, #0
   1a650:	add	r1, r7, r0
   1a654:	mov	ip, #39	; 0x27
   1a658:	str	r6, [sp, #100]	; 0x64
   1a65c:	mov	r0, #0
   1a660:	ldr	lr, [sp, #36]	; 0x24
   1a664:	str	r8, [sp, #36]	; 0x24
   1a668:	ldr	r6, [sp, #40]	; 0x28
   1a66c:	ldr	r8, [sp, #44]	; 0x2c
   1a670:	b	1a720 <__assert_fail@plt+0x8d80>
   1a674:	cmp	r8, #0
   1a678:	bne	1ac54 <__assert_fail@plt+0x92b4>
   1a67c:	ldr	r0, [sp, #52]	; 0x34
   1a680:	eor	r3, fp, #1
   1a684:	ands	r3, r0, r3
   1a688:	beq	1a6b8 <__assert_fail@plt+0x8d18>
   1a68c:	cmp	sl, r4
   1a690:	add	r0, r4, #1
   1a694:	strbhi	ip, [r9, r4]
   1a698:	cmp	sl, r0
   1a69c:	movhi	fp, #36	; 0x24
   1a6a0:	strbhi	fp, [r9, r0]
   1a6a4:	add	r0, r4, #2
   1a6a8:	mov	fp, r3
   1a6ac:	cmp	sl, r0
   1a6b0:	add	r4, r4, #3
   1a6b4:	strbhi	ip, [r9, r0]
   1a6b8:	cmp	sl, r4
   1a6bc:	movhi	r3, #92	; 0x5c
   1a6c0:	strbhi	r3, [r9, r4]
   1a6c4:	add	r3, r4, #1
   1a6c8:	cmp	sl, r3
   1a6cc:	bls	1a6dc <__assert_fail@plt+0x8d3c>
   1a6d0:	lsr	r0, r5, #6
   1a6d4:	add	r0, r0, #48	; 0x30
   1a6d8:	strb	r0, [r9, r3]
   1a6dc:	add	r3, r4, #2
   1a6e0:	cmp	sl, r3
   1a6e4:	bls	1a6f4 <__assert_fail@plt+0x8d54>
   1a6e8:	ubfx	r0, r5, #3, #3
   1a6ec:	add	r0, r0, #48	; 0x30
   1a6f0:	strb	r0, [r9, r3]
   1a6f4:	add	r7, r7, #1
   1a6f8:	and	r5, r5, #7
   1a6fc:	cmp	r1, r7
   1a700:	add	r5, r5, #48	; 0x30
   1a704:	add	r4, r4, #3
   1a708:	bls	1ac68 <__assert_fail@plt+0x92c8>
   1a70c:	mov	r0, r2
   1a710:	cmp	sl, r4
   1a714:	strbhi	r5, [r9, r4]
   1a718:	add	r4, r4, #1
   1a71c:	ldrb	r5, [lr, #1]!
   1a720:	cmp	r2, #0
   1a724:	bne	1a674 <__assert_fail@plt+0x8cd4>
   1a728:	eor	r3, r0, #1
   1a72c:	cmp	r6, #0
   1a730:	and	r3, r3, fp
   1a734:	uxtb	r3, r3
   1a738:	beq	1a74c <__assert_fail@plt+0x8dac>
   1a73c:	cmp	sl, r4
   1a740:	movhi	r6, #92	; 0x5c
   1a744:	strbhi	r6, [r9, r4]
   1a748:	add	r4, r4, #1
   1a74c:	add	r7, r7, #1
   1a750:	cmp	r7, r1
   1a754:	bcs	1ac48 <__assert_fail@plt+0x92a8>
   1a758:	cmp	r3, #0
   1a75c:	beq	1ac8c <__assert_fail@plt+0x92ec>
   1a760:	cmp	sl, r4
   1a764:	add	r3, r4, #1
   1a768:	mov	r6, #0
   1a76c:	strbhi	ip, [r9, r4]
   1a770:	cmp	sl, r3
   1a774:	add	r4, r4, #2
   1a778:	mov	fp, r6
   1a77c:	strbhi	ip, [r9, r3]
   1a780:	b	1a710 <__assert_fail@plt+0x8d70>
   1a784:	ldr	r3, [sp, #36]	; 0x24
   1a788:	ldrb	r5, [r3]
   1a78c:	cmp	r5, #126	; 0x7e
   1a790:	ldrls	pc, [pc, r5, lsl #2]
   1a794:	b	1a5f4 <__assert_fail@plt+0x8c54>
   1a798:			; <UNDEFINED> instruction: 0x0001a9b8
   1a79c:	strdeq	sl, [r1], -r4
   1a7a0:	strdeq	sl, [r1], -r4
   1a7a4:	strdeq	sl, [r1], -r4
   1a7a8:	strdeq	sl, [r1], -r4
   1a7ac:	strdeq	sl, [r1], -r4
   1a7b0:	strdeq	sl, [r1], -r4
   1a7b4:	andeq	r9, r1, ip, lsr #29
   1a7b8:	andeq	r9, r1, r4, lsr #29
   1a7bc:	andeq	sl, r1, r4, lsr #10
   1a7c0:	andeq	sl, r1, ip, lsr #19
   1a7c4:	andeq	sl, r1, r4, lsl #10
   1a7c8:	andeq	r9, r1, r0, asr sp
   1a7cc:	andeq	sl, r1, r0, lsr #19
   1a7d0:	strdeq	sl, [r1], -r4
   1a7d4:	strdeq	sl, [r1], -r4
   1a7d8:	strdeq	sl, [r1], -r4
   1a7dc:	strdeq	sl, [r1], -r4
   1a7e0:	strdeq	sl, [r1], -r4
   1a7e4:	strdeq	sl, [r1], -r4
   1a7e8:	strdeq	sl, [r1], -r4
   1a7ec:	strdeq	sl, [r1], -r4
   1a7f0:	strdeq	sl, [r1], -r4
   1a7f4:	strdeq	sl, [r1], -r4
   1a7f8:	strdeq	sl, [r1], -r4
   1a7fc:	strdeq	sl, [r1], -r4
   1a800:	strdeq	sl, [r1], -r4
   1a804:	strdeq	sl, [r1], -r4
   1a808:	strdeq	sl, [r1], -r4
   1a80c:	strdeq	sl, [r1], -r4
   1a810:	strdeq	sl, [r1], -r4
   1a814:	strdeq	sl, [r1], -r4
   1a818:	andeq	sl, r1, r4, lsl r5
   1a81c:	muleq	r1, r4, r9
   1a820:	muleq	r1, r4, r9
   1a824:	strdeq	sl, [r1], -r8
   1a828:	muleq	r1, r4, r9
   1a82c:	andeq	sl, r1, r8, ror #9
   1a830:	muleq	r1, r4, r9
   1a834:	andeq	sl, r1, ip, asr r5
   1a838:	muleq	r1, r4, r9
   1a83c:	muleq	r1, r4, r9
   1a840:	muleq	r1, r4, r9
   1a844:	andeq	sl, r1, r8, ror #9
   1a848:	andeq	sl, r1, r8, ror #9
   1a84c:	andeq	sl, r1, r8, ror #9
   1a850:	andeq	sl, r1, r8, ror #9
   1a854:	andeq	sl, r1, r8, ror #9
   1a858:	andeq	sl, r1, r8, ror #9
   1a85c:	andeq	sl, r1, r8, ror #9
   1a860:	andeq	sl, r1, r8, ror #9
   1a864:	andeq	sl, r1, r8, ror #9
   1a868:	andeq	sl, r1, r8, ror #9
   1a86c:	andeq	sl, r1, r8, ror #9
   1a870:	andeq	sl, r1, r8, ror #9
   1a874:	andeq	sl, r1, r8, ror #9
   1a878:	andeq	sl, r1, r8, ror #9
   1a87c:	andeq	sl, r1, r8, ror #9
   1a880:	andeq	sl, r1, r8, ror #9
   1a884:	muleq	r1, r4, r9
   1a888:	muleq	r1, r4, r9
   1a88c:	muleq	r1, r4, r9
   1a890:	muleq	r1, r4, r9
   1a894:	andeq	sl, r1, r4, lsr r5
   1a898:	strdeq	sl, [r1], -r4
   1a89c:	andeq	sl, r1, r8, ror #9
   1a8a0:	andeq	sl, r1, r8, ror #9
   1a8a4:	andeq	sl, r1, r8, ror #9
   1a8a8:	andeq	sl, r1, r8, ror #9
   1a8ac:	andeq	sl, r1, r8, ror #9
   1a8b0:	andeq	sl, r1, r8, ror #9
   1a8b4:	andeq	sl, r1, r8, ror #9
   1a8b8:	andeq	sl, r1, r8, ror #9
   1a8bc:	andeq	sl, r1, r8, ror #9
   1a8c0:	andeq	sl, r1, r8, ror #9
   1a8c4:	andeq	sl, r1, r8, ror #9
   1a8c8:	andeq	sl, r1, r8, ror #9
   1a8cc:	andeq	sl, r1, r8, ror #9
   1a8d0:	andeq	sl, r1, r8, ror #9
   1a8d4:	andeq	sl, r1, r8, ror #9
   1a8d8:	andeq	sl, r1, r8, ror #9
   1a8dc:	andeq	sl, r1, r8, ror #9
   1a8e0:	andeq	sl, r1, r8, ror #9
   1a8e4:	andeq	sl, r1, r8, ror #9
   1a8e8:	andeq	sl, r1, r8, ror #9
   1a8ec:	andeq	sl, r1, r8, ror #9
   1a8f0:	andeq	sl, r1, r8, ror #9
   1a8f4:	andeq	sl, r1, r8, ror #9
   1a8f8:	andeq	sl, r1, r8, ror #9
   1a8fc:	andeq	sl, r1, r8, ror #9
   1a900:	andeq	sl, r1, r8, ror #9
   1a904:	muleq	r1, r4, r9
   1a908:			; <UNDEFINED> instruction: 0x0001a4b4
   1a90c:	andeq	sl, r1, r8, ror #9
   1a910:	muleq	r1, r4, r9
   1a914:	andeq	sl, r1, r8, ror #9
   1a918:	muleq	r1, r4, r9
   1a91c:	andeq	sl, r1, r8, ror #9
   1a920:	andeq	sl, r1, r8, ror #9
   1a924:	andeq	sl, r1, r8, ror #9
   1a928:	andeq	sl, r1, r8, ror #9
   1a92c:	andeq	sl, r1, r8, ror #9
   1a930:	andeq	sl, r1, r8, ror #9
   1a934:	andeq	sl, r1, r8, ror #9
   1a938:	andeq	sl, r1, r8, ror #9
   1a93c:	andeq	sl, r1, r8, ror #9
   1a940:	andeq	sl, r1, r8, ror #9
   1a944:	andeq	sl, r1, r8, ror #9
   1a948:	andeq	sl, r1, r8, ror #9
   1a94c:	andeq	sl, r1, r8, ror #9
   1a950:	andeq	sl, r1, r8, ror #9
   1a954:	andeq	sl, r1, r8, ror #9
   1a958:	andeq	sl, r1, r8, ror #9
   1a95c:	andeq	sl, r1, r8, ror #9
   1a960:	andeq	sl, r1, r8, ror #9
   1a964:	andeq	sl, r1, r8, ror #9
   1a968:	andeq	sl, r1, r8, ror #9
   1a96c:	andeq	sl, r1, r8, ror #9
   1a970:	andeq	sl, r1, r8, ror #9
   1a974:	andeq	sl, r1, r8, ror #9
   1a978:	andeq	sl, r1, r8, ror #9
   1a97c:	andeq	sl, r1, r8, ror #9
   1a980:	andeq	sl, r1, r8, ror #9
   1a984:	muleq	r1, r0, r4
   1a988:	muleq	r1, r4, r9
   1a98c:	muleq	r1, r0, r4
   1a990:	strdeq	sl, [r1], -r8
   1a994:	mov	r3, #0
   1a998:	str	r3, [sp, #40]	; 0x28
   1a99c:	b	1a074 <__assert_fail@plt+0x86d4>
   1a9a0:	mov	r3, #0
   1a9a4:	str	r3, [sp, #40]	; 0x28
   1a9a8:	b	1a00c <__assert_fail@plt+0x866c>
   1a9ac:	mov	r3, #0
   1a9b0:	str	r3, [sp, #40]	; 0x28
   1a9b4:	b	1a040 <__assert_fail@plt+0x86a0>
   1a9b8:	ldr	r3, [sp, #44]	; 0x2c
   1a9bc:	cmp	r3, #0
   1a9c0:	beq	19f58 <__assert_fail@plt+0x85b8>
   1a9c4:	ldr	r3, [sp, #52]	; 0x34
   1a9c8:	mov	fp, r9
   1a9cc:	str	r3, [sp, #60]	; 0x3c
   1a9d0:	b	1a0d0 <__assert_fail@plt+0x8730>
   1a9d4:	ldr	r3, [sp, #44]	; 0x2c
   1a9d8:	cmp	r3, #0
   1a9dc:	bne	1ae10 <__assert_fail@plt+0x9470>
   1a9e0:	str	r3, [sp, #40]	; 0x28
   1a9e4:	cmp	sl, #0
   1a9e8:	ldr	r3, [sp, #84]	; 0x54
   1a9ec:	clz	r3, r3
   1a9f0:	lsr	r3, r3, #5
   1a9f4:	moveq	r3, #0
   1a9f8:	cmp	r3, #0
   1a9fc:	strne	sl, [sp, #84]	; 0x54
   1aa00:	movne	sl, #0
   1aa04:	bne	1aa34 <__assert_fail@plt+0x9094>
   1aa08:	cmp	sl, r4
   1aa0c:	movhi	r3, #39	; 0x27
   1aa10:	strbhi	r3, [r9, r4]
   1aa14:	add	r3, r4, #1
   1aa18:	cmp	sl, r3
   1aa1c:	movhi	r2, #92	; 0x5c
   1aa20:	strbhi	r2, [r9, r3]
   1aa24:	add	r3, r4, #2
   1aa28:	cmp	sl, r3
   1aa2c:	movhi	r2, #39	; 0x27
   1aa30:	strbhi	r2, [r9, r3]
   1aa34:	mov	r3, #0
   1aa38:	add	r4, r4, #3
   1aa3c:	str	r6, [sp, #80]	; 0x50
   1aa40:	mov	fp, r3
   1aa44:	mov	r5, #39	; 0x27
   1aa48:	b	19f14 <__assert_fail@plt+0x8574>
   1aa4c:	ldr	r3, [sp, #44]	; 0x2c
   1aa50:	cmp	r3, #0
   1aa54:	bne	1ae10 <__assert_fail@plt+0x9470>
   1aa58:	mov	r6, #0
   1aa5c:	mov	r5, #63	; 0x3f
   1aa60:	str	r3, [sp, #40]	; 0x28
   1aa64:	mov	r3, fp
   1aa68:	b	19f14 <__assert_fail@plt+0x8574>
   1aa6c:	mov	r2, #0
   1aa70:	mov	r3, #0
   1aa74:	cmn	r8, #1
   1aa78:	strd	r2, [sp, #128]	; 0x80
   1aa7c:	bne	1aa8c <__assert_fail@plt+0x90ec>
   1aa80:	ldr	r0, [sp, #28]
   1aa84:	bl	117a8 <strlen@plt>
   1aa88:	mov	r8, r0
   1aa8c:	str	r9, [sp, #100]	; 0x64
   1aa90:	mov	r3, #0
   1aa94:	strd	sl, [sp, #104]	; 0x68
   1aa98:	ldr	sl, [sp, #28]
   1aa9c:	str	r5, [sp, #112]	; 0x70
   1aaa0:	mov	r5, r3
   1aaa4:	ldr	r9, [sp, #68]	; 0x44
   1aaa8:	str	r4, [sp, #116]	; 0x74
   1aaac:	add	r4, r7, r5
   1aab0:	add	r3, sp, #128	; 0x80
   1aab4:	add	fp, sl, r4
   1aab8:	sub	r2, r8, r4
   1aabc:	mov	r1, fp
   1aac0:	add	r0, sp, #124	; 0x7c
   1aac4:	bl	1f100 <__assert_fail@plt+0xd760>
   1aac8:	subs	r1, r0, #0
   1aacc:	beq	1ab0c <__assert_fail@plt+0x916c>
   1aad0:	cmn	r1, #1
   1aad4:	beq	1ae64 <__assert_fail@plt+0x94c4>
   1aad8:	cmn	r1, #2
   1aadc:	beq	1ae84 <__assert_fail@plt+0x94e4>
   1aae0:	cmp	r9, #0
   1aae4:	bne	1ab3c <__assert_fail@plt+0x919c>
   1aae8:	ldr	r0, [sp, #124]	; 0x7c
   1aaec:	add	r5, r5, r1
   1aaf0:	bl	11664 <iswprint@plt>
   1aaf4:	cmp	r0, #0
   1aaf8:	add	r0, sp, #128	; 0x80
   1aafc:	moveq	r6, #0
   1ab00:	bl	11604 <mbsinit@plt>
   1ab04:	cmp	r0, #0
   1ab08:	beq	1aaac <__assert_fail@plt+0x910c>
   1ab0c:	ldr	r3, [sp, #60]	; 0x3c
   1ab10:	add	r9, sp, #100	; 0x64
   1ab14:	mov	r0, r5
   1ab18:	ldm	r9, {r9, sl, fp}
   1ab1c:	eor	r2, r6, #1
   1ab20:	ldr	r5, [sp, #112]	; 0x70
   1ab24:	and	r2, r2, r3
   1ab28:	uxtb	r2, r2
   1ab2c:	ldr	r4, [sp, #116]	; 0x74
   1ab30:	cmp	r0, #1
   1ab34:	bhi	1a650 <__assert_fail@plt+0x8cb0>
   1ab38:	b	1a640 <__assert_fail@plt+0x8ca0>
   1ab3c:	cmp	r1, #1
   1ab40:	beq	1aae8 <__assert_fail@plt+0x9148>
   1ab44:	add	r2, r4, #1
   1ab48:	add	r3, sl, r1
   1ab4c:	add	r2, sl, r2
   1ab50:	add	r4, r3, r4
   1ab54:	ldrb	r3, [r2], #1
   1ab58:	sub	r3, r3, #91	; 0x5b
   1ab5c:	cmp	r3, #33	; 0x21
   1ab60:	ldrls	pc, [pc, r3, lsl #2]
   1ab64:	b	1abf0 <__assert_fail@plt+0x9250>
   1ab68:	strdeq	sl, [r1], -ip
   1ab6c:	strdeq	sl, [r1], -ip
   1ab70:	strdeq	sl, [r1], -r0
   1ab74:	strdeq	sl, [r1], -ip
   1ab78:	strdeq	sl, [r1], -r0
   1ab7c:	strdeq	sl, [r1], -ip
   1ab80:	strdeq	sl, [r1], -r0
   1ab84:	strdeq	sl, [r1], -r0
   1ab88:	strdeq	sl, [r1], -r0
   1ab8c:	strdeq	sl, [r1], -r0
   1ab90:	strdeq	sl, [r1], -r0
   1ab94:	strdeq	sl, [r1], -r0
   1ab98:	strdeq	sl, [r1], -r0
   1ab9c:	strdeq	sl, [r1], -r0
   1aba0:	strdeq	sl, [r1], -r0
   1aba4:	strdeq	sl, [r1], -r0
   1aba8:	strdeq	sl, [r1], -r0
   1abac:	strdeq	sl, [r1], -r0
   1abb0:	strdeq	sl, [r1], -r0
   1abb4:	strdeq	sl, [r1], -r0
   1abb8:	strdeq	sl, [r1], -r0
   1abbc:	strdeq	sl, [r1], -r0
   1abc0:	strdeq	sl, [r1], -r0
   1abc4:	strdeq	sl, [r1], -r0
   1abc8:	strdeq	sl, [r1], -r0
   1abcc:	strdeq	sl, [r1], -r0
   1abd0:	strdeq	sl, [r1], -r0
   1abd4:	strdeq	sl, [r1], -r0
   1abd8:	strdeq	sl, [r1], -r0
   1abdc:	strdeq	sl, [r1], -r0
   1abe0:	strdeq	sl, [r1], -r0
   1abe4:	strdeq	sl, [r1], -r0
   1abe8:	strdeq	sl, [r1], -r0
   1abec:	strdeq	sl, [r1], -ip
   1abf0:	cmp	r4, r2
   1abf4:	bne	1ab54 <__assert_fail@plt+0x91b4>
   1abf8:	b	1aae8 <__assert_fail@plt+0x9148>
   1abfc:	mov	r3, #2
   1ac00:	ldr	fp, [sp, #100]	; 0x64
   1ac04:	str	r3, [sp, #176]	; 0xb0
   1ac08:	ldr	sl, [sp, #104]	; 0x68
   1ac0c:	b	1a0d0 <__assert_fail@plt+0x8730>
   1ac10:	ldr	r2, [sp, #52]	; 0x34
   1ac14:	mov	fp, r9
   1ac18:	ldr	r3, [sp, #60]	; 0x3c
   1ac1c:	and	r3, r3, r2
   1ac20:	str	r3, [sp, #60]	; 0x3c
   1ac24:	b	1a0d0 <__assert_fail@plt+0x8730>
   1ac28:	cmp	sl, r4
   1ac2c:	movhi	r2, fp
   1ac30:	bhi	19fa8 <__assert_fail@plt+0x8608>
   1ac34:	mov	r2, r4
   1ac38:	b	19fb8 <__assert_fail@plt+0x8618>
   1ac3c:	mov	r6, r3
   1ac40:	mov	r5, #63	; 0x3f
   1ac44:	b	1a078 <__assert_fail@plt+0x86d8>
   1ac48:	ldr	r8, [sp, #36]	; 0x24
   1ac4c:	ldr	r6, [sp, #100]	; 0x64
   1ac50:	b	19f24 <__assert_fail@plt+0x8584>
   1ac54:	mov	fp, r9
   1ac58:	ldr	r8, [sp, #36]	; 0x24
   1ac5c:	ldr	r3, [sp, #52]	; 0x34
   1ac60:	str	r3, [sp, #60]	; 0x3c
   1ac64:	b	1a0d0 <__assert_fail@plt+0x8730>
   1ac68:	ldr	r8, [sp, #36]	; 0x24
   1ac6c:	ldr	r6, [sp, #100]	; 0x64
   1ac70:	b	19dbc <__assert_fail@plt+0x841c>
   1ac74:	mov	r3, #0
   1ac78:	add	r4, r4, #4
   1ac7c:	mov	fp, r2
   1ac80:	mov	r6, r3
   1ac84:	mov	r5, #48	; 0x30
   1ac88:	b	19f14 <__assert_fail@plt+0x8574>
   1ac8c:	mov	r6, r3
   1ac90:	b	1a710 <__assert_fail@plt+0x8d70>
   1ac94:	mov	r3, #1
   1ac98:	movw	r2, #19828	; 0x4d74
   1ac9c:	movt	r2, #3
   1aca0:	mov	r4, r3
   1aca4:	mov	r9, sl
   1aca8:	str	r3, [sp, #32]
   1acac:	str	sl, [sp, #44]	; 0x2c
   1acb0:	str	r3, [sp, #48]	; 0x30
   1acb4:	str	sl, [sp, #52]	; 0x34
   1acb8:	str	r3, [sp, #56]	; 0x38
   1acbc:	str	r3, [sp, #60]	; 0x3c
   1acc0:	str	sl, [sp, #64]	; 0x40
   1acc4:	str	sl, [sp, #68]	; 0x44
   1acc8:	str	r2, [sp, #72]	; 0x48
   1accc:	str	sl, [sp, #80]	; 0x50
   1acd0:	str	sl, [sp, #84]	; 0x54
   1acd4:	str	sl, [sp, #88]	; 0x58
   1acd8:	b	197c8 <__assert_fail@plt+0x7e28>
   1acdc:	mov	r3, #0
   1ace0:	mov	r5, #48	; 0x30
   1ace4:	mov	r6, r3
   1ace8:	b	19f14 <__assert_fail@plt+0x8574>
   1acec:	cmp	sl, r4
   1acf0:	mov	r5, #48	; 0x30
   1acf4:	movhi	r3, #48	; 0x30
   1acf8:	strbhi	r3, [r9, r4]
   1acfc:	add	r3, r2, #2
   1ad00:	add	r4, r2, #3
   1ad04:	cmp	sl, r3
   1ad08:	movhi	r1, #48	; 0x30
   1ad0c:	strbhi	r1, [r9, r3]
   1ad10:	mov	r3, #0
   1ad14:	b	19ff0 <__assert_fail@plt+0x8650>
   1ad18:	ldr	r3, [sp, #48]	; 0x30
   1ad1c:	str	r3, [sp, #40]	; 0x28
   1ad20:	b	1a5fc <__assert_fail@plt+0x8c5c>
   1ad24:	ldr	r2, [sp, #28]
   1ad28:	ldrb	r2, [r2, r3]
   1ad2c:	sub	r1, r2, #33	; 0x21
   1ad30:	cmp	r1, #29
   1ad34:	ldrls	pc, [pc, r1, lsl #2]
   1ad38:	b	1a074 <__assert_fail@plt+0x86d4>
   1ad3c:			; <UNDEFINED> instruction: 0x0001adb4
   1ad40:	andeq	sl, r1, r4, ror r0
   1ad44:	andeq	sl, r1, r4, ror r0
   1ad48:	andeq	sl, r1, r4, ror r0
   1ad4c:	andeq	sl, r1, r4, ror r0
   1ad50:	andeq	sl, r1, r4, ror r0
   1ad54:			; <UNDEFINED> instruction: 0x0001adb4
   1ad58:			; <UNDEFINED> instruction: 0x0001adb4
   1ad5c:			; <UNDEFINED> instruction: 0x0001adb4
   1ad60:	andeq	sl, r1, r4, ror r0
   1ad64:	andeq	sl, r1, r4, ror r0
   1ad68:	andeq	sl, r1, r4, ror r0
   1ad6c:			; <UNDEFINED> instruction: 0x0001adb4
   1ad70:	andeq	sl, r1, r4, ror r0
   1ad74:			; <UNDEFINED> instruction: 0x0001adb4
   1ad78:	andeq	sl, r1, r4, ror r0
   1ad7c:	andeq	sl, r1, r4, ror r0
   1ad80:	andeq	sl, r1, r4, ror r0
   1ad84:	andeq	sl, r1, r4, ror r0
   1ad88:	andeq	sl, r1, r4, ror r0
   1ad8c:	andeq	sl, r1, r4, ror r0
   1ad90:	andeq	sl, r1, r4, ror r0
   1ad94:	andeq	sl, r1, r4, ror r0
   1ad98:	andeq	sl, r1, r4, ror r0
   1ad9c:	andeq	sl, r1, r4, ror r0
   1ada0:	andeq	sl, r1, r4, ror r0
   1ada4:	andeq	sl, r1, r4, ror r0
   1ada8:			; <UNDEFINED> instruction: 0x0001adb4
   1adac:			; <UNDEFINED> instruction: 0x0001adb4
   1adb0:			; <UNDEFINED> instruction: 0x0001adb4
   1adb4:	ldr	r1, [sp, #44]	; 0x2c
   1adb8:	cmp	r1, #0
   1adbc:	bne	1b01c <__assert_fail@plt+0x967c>
   1adc0:	cmp	sl, r4
   1adc4:	mov	r7, r3
   1adc8:	movhi	r1, #63	; 0x3f
   1adcc:	mov	r5, r2
   1add0:	mov	r3, fp
   1add4:	strbhi	r1, [r9, r4]
   1add8:	add	r1, r4, #1
   1addc:	cmp	sl, r1
   1ade0:	movhi	r0, #34	; 0x22
   1ade4:	strbhi	r0, [r9, r1]
   1ade8:	add	r1, r4, #2
   1adec:	cmp	sl, r1
   1adf0:	movhi	r0, #34	; 0x22
   1adf4:	strbhi	r0, [r9, r1]
   1adf8:	add	r1, r4, #3
   1adfc:	add	r4, r4, #4
   1ae00:	cmp	sl, r1
   1ae04:	movhi	r0, #63	; 0x3f
   1ae08:	strbhi	r0, [r9, r1]
   1ae0c:	b	19ff0 <__assert_fail@plt+0x8650>
   1ae10:	mov	fp, r9
   1ae14:	b	1a0d0 <__assert_fail@plt+0x8730>
   1ae18:	ldr	r3, [sp, #188]	; 0xbc
   1ae1c:	ldrb	r3, [r3]
   1ae20:	cmp	r3, #0
   1ae24:	beq	19760 <__assert_fail@plt+0x7dc0>
   1ae28:	ldr	r2, [sp, #188]	; 0xbc
   1ae2c:	cmp	sl, r4
   1ae30:	bls	1ae50 <__assert_fail@plt+0x94b0>
   1ae34:	strb	r3, [fp, r4]
   1ae38:	add	r4, r4, #1
   1ae3c:	ldrb	r3, [r2, #1]!
   1ae40:	cmp	r3, #0
   1ae44:	beq	19760 <__assert_fail@plt+0x7dc0>
   1ae48:	cmp	sl, r4
   1ae4c:	bhi	1ae34 <__assert_fail@plt+0x9494>
   1ae50:	ldrb	r3, [r2, #1]!
   1ae54:	add	r4, r4, #1
   1ae58:	cmp	r3, #0
   1ae5c:	bne	1ae2c <__assert_fail@plt+0x948c>
   1ae60:	b	19760 <__assert_fail@plt+0x7dc0>
   1ae64:	add	r9, sp, #100	; 0x64
   1ae68:	mov	r0, r5
   1ae6c:	ldr	r2, [sp, #60]	; 0x3c
   1ae70:	mov	r6, #0
   1ae74:	ldm	r9, {r9, sl, fp}
   1ae78:	ldr	r5, [sp, #112]	; 0x70
   1ae7c:	ldr	r4, [sp, #116]	; 0x74
   1ae80:	b	1ab30 <__assert_fail@plt+0x9190>
   1ae84:	cmp	r4, r8
   1ae88:	add	r9, sp, #100	; 0x64
   1ae8c:	mov	r1, r4
   1ae90:	mov	r2, fp
   1ae94:	ldm	r9, {r9, sl, fp}
   1ae98:	mov	r3, r5
   1ae9c:	mov	r0, r5
   1aea0:	ldr	r5, [sp, #112]	; 0x70
   1aea4:	ldr	r4, [sp, #116]	; 0x74
   1aea8:	bcs	1aedc <__assert_fail@plt+0x953c>
   1aeac:	ldrb	r6, [r2]
   1aeb0:	cmp	r6, #0
   1aeb4:	bne	1aec8 <__assert_fail@plt+0x9528>
   1aeb8:	b	1b014 <__assert_fail@plt+0x9674>
   1aebc:	ldrb	r6, [r2, #1]!
   1aec0:	cmp	r6, #0
   1aec4:	beq	1afac <__assert_fail@plt+0x960c>
   1aec8:	add	r3, r3, #1
   1aecc:	add	r1, r7, r3
   1aed0:	cmp	r8, r1
   1aed4:	bhi	1aebc <__assert_fail@plt+0x951c>
   1aed8:	mov	r0, r3
   1aedc:	mov	r6, #0
   1aee0:	ldr	r2, [sp, #60]	; 0x3c
   1aee4:	b	1ab30 <__assert_fail@plt+0x9190>
   1aee8:	mov	r3, #1
   1aeec:	mov	r4, #0
   1aef0:	mov	r9, r4
   1aef4:	str	r3, [sp, #32]
   1aef8:	str	r3, [sp, #44]	; 0x2c
   1aefc:	str	r3, [sp, #48]	; 0x30
   1af00:	str	r4, [sp, #52]	; 0x34
   1af04:	str	r3, [sp, #56]	; 0x38
   1af08:	str	r3, [sp, #60]	; 0x3c
   1af0c:	str	r3, [sp, #88]	; 0x58
   1af10:	movw	r3, #19828	; 0x4d74
   1af14:	movt	r3, #3
   1af18:	str	r4, [sp, #64]	; 0x40
   1af1c:	str	r4, [sp, #68]	; 0x44
   1af20:	str	r3, [sp, #72]	; 0x48
   1af24:	str	r4, [sp, #80]	; 0x50
   1af28:	str	r4, [sp, #84]	; 0x54
   1af2c:	b	197c8 <__assert_fail@plt+0x7e28>
   1af30:	mov	fp, r9
   1af34:	b	1a0e4 <__assert_fail@plt+0x8744>
   1af38:	ldr	r3, [sp, #48]	; 0x30
   1af3c:	b	1aa58 <__assert_fail@plt+0x90b8>
   1af40:	mov	r2, r3
   1af44:	ldr	r3, [sp, #72]	; 0x48
   1af48:	cmp	r3, #0
   1af4c:	moveq	r2, #0
   1af50:	andne	r2, r2, #1
   1af54:	cmp	r2, #0
   1af58:	beq	1af88 <__assert_fail@plt+0x95e8>
   1af5c:	mov	r2, r3
   1af60:	ldrb	r3, [r3]
   1af64:	cmp	r3, #0
   1af68:	beq	1af88 <__assert_fail@plt+0x95e8>
   1af6c:	cmp	sl, r4
   1af70:	bls	1af98 <__assert_fail@plt+0x95f8>
   1af74:	strb	r3, [fp, r4]
   1af78:	add	r4, r4, #1
   1af7c:	ldrb	r3, [r2, #1]!
   1af80:	cmp	r3, #0
   1af84:	bne	1af6c <__assert_fail@plt+0x95cc>
   1af88:	cmp	sl, r4
   1af8c:	movhi	r3, #0
   1af90:	strbhi	r3, [fp, r4]
   1af94:	b	1a120 <__assert_fail@plt+0x8780>
   1af98:	ldrb	r3, [r2, #1]!
   1af9c:	add	r4, r4, #1
   1afa0:	cmp	r3, #0
   1afa4:	bne	1af6c <__assert_fail@plt+0x95cc>
   1afa8:	b	1af88 <__assert_fail@plt+0x95e8>
   1afac:	mov	r0, r3
   1afb0:	ldr	r2, [sp, #60]	; 0x3c
   1afb4:	b	1ab30 <__assert_fail@plt+0x9190>
   1afb8:	mov	ip, #5
   1afbc:	mov	r3, r8
   1afc0:	ldr	r1, [sp, #84]	; 0x54
   1afc4:	str	ip, [sp]
   1afc8:	ldr	r2, [sp, #180]	; 0xb4
   1afcc:	ldr	ip, [sp, #188]	; 0xbc
   1afd0:	ldr	r0, [sp, #184]	; 0xb8
   1afd4:	str	r2, [sp, #4]
   1afd8:	ldr	r2, [sp, #28]
   1afdc:	str	ip, [sp, #12]
   1afe0:	ldr	ip, [sp, #192]	; 0xc0
   1afe4:	str	r0, [sp, #8]
   1afe8:	mov	r0, fp
   1afec:	str	ip, [sp, #16]
   1aff0:	bl	196a4 <__assert_fail@plt+0x7d04>
   1aff4:	mov	r4, r0
   1aff8:	b	1a120 <__assert_fail@plt+0x8780>
   1affc:	mov	r6, r3
   1b000:	str	r3, [sp, #40]	; 0x28
   1b004:	b	1a090 <__assert_fail@plt+0x86f0>
   1b008:	mov	r3, #2
   1b00c:	str	r3, [sp, #176]	; 0xb0
   1b010:	b	1a0d0 <__assert_fail@plt+0x8730>
   1b014:	ldr	r2, [sp, #60]	; 0x3c
   1b018:	b	1ab30 <__assert_fail@plt+0x9190>
   1b01c:	mov	r3, #5
   1b020:	mov	fp, r9
   1b024:	str	r3, [sp, #176]	; 0xb0
   1b028:	b	1a0e4 <__assert_fail@plt+0x8744>
   1b02c:	mov	r1, #1
   1b030:	mov	r3, #0
   1b034:	mov	r2, r3
   1b038:	mov	r9, r3
   1b03c:	str	r1, [sp, #32]
   1b040:	str	sl, [sp, #84]	; 0x54
   1b044:	b	19e6c <__assert_fail@plt+0x84cc>
   1b048:	mov	r3, #0
   1b04c:	mov	r2, #1
   1b050:	mov	r9, r3
   1b054:	mov	r4, r3
   1b058:	str	r2, [sp, #32]
   1b05c:	strd	r2, [sp, #44]	; 0x2c
   1b060:	strd	r2, [sp, #56]	; 0x38
   1b064:	str	r3, [sp, #80]	; 0x50
   1b068:	str	r3, [sp, #84]	; 0x54
   1b06c:	str	r3, [sp, #88]	; 0x58
   1b070:	movw	r3, #19848	; 0x4d88
   1b074:	movt	r3, #3
   1b078:	str	r2, [sp, #52]	; 0x34
   1b07c:	str	r2, [sp, #64]	; 0x40
   1b080:	str	r2, [sp, #68]	; 0x44
   1b084:	str	r3, [sp, #72]	; 0x48
   1b088:	b	197c8 <__assert_fail@plt+0x7e28>
   1b08c:	bl	11964 <abort@plt>
   1b090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b094:	mov	r4, r0
   1b098:	mov	r5, r3
   1b09c:	strd	r6, [sp, #8]
   1b0a0:	movw	r7, #25024	; 0x61c0
   1b0a4:	movt	r7, #4
   1b0a8:	strd	r8, [sp, #16]
   1b0ac:	strd	sl, [sp, #24]
   1b0b0:	mov	sl, r1
   1b0b4:	mov	fp, r2
   1b0b8:	str	lr, [sp, #32]
   1b0bc:	sub	sp, sp, #60	; 0x3c
   1b0c0:	bl	117d8 <__errno_location@plt>
   1b0c4:	mov	r8, r0
   1b0c8:	cmn	r4, #-2147483647	; 0x80000001
   1b0cc:	ldr	r6, [r7]
   1b0d0:	movne	r0, #0
   1b0d4:	moveq	r0, #1
   1b0d8:	ldr	r3, [r8]
   1b0dc:	orrs	r0, r0, r4, lsr #31
   1b0e0:	str	r3, [sp, #28]
   1b0e4:	bne	1b274 <__assert_fail@plt+0x98d4>
   1b0e8:	ldr	r3, [r7, #4]
   1b0ec:	cmp	r3, r4
   1b0f0:	bgt	1b150 <__assert_fail@plt+0x97b0>
   1b0f4:	add	r1, r7, #8
   1b0f8:	sub	r2, r4, r3
   1b0fc:	str	r3, [sp, #52]	; 0x34
   1b100:	cmp	r6, r1
   1b104:	add	r2, r2, #1
   1b108:	beq	1b24c <__assert_fail@plt+0x98ac>
   1b10c:	mov	r1, #8
   1b110:	mov	r0, r6
   1b114:	mvn	r3, #-2147483648	; 0x80000000
   1b118:	str	r1, [sp]
   1b11c:	add	r1, sp, #52	; 0x34
   1b120:	bl	1da00 <__assert_fail@plt+0xc060>
   1b124:	mov	r6, r0
   1b128:	str	r0, [r7]
   1b12c:	ldr	r0, [r7, #4]
   1b130:	mov	r1, #0
   1b134:	ldr	r2, [sp, #52]	; 0x34
   1b138:	sub	r2, r2, r0
   1b13c:	add	r0, r6, r0, lsl #3
   1b140:	lsl	r2, r2, #3
   1b144:	bl	11814 <memset@plt>
   1b148:	ldr	r3, [sp, #52]	; 0x34
   1b14c:	str	r3, [r7, #4]
   1b150:	ldr	r1, [r5, #4]
   1b154:	add	r0, r6, r4, lsl #3
   1b158:	add	ip, r5, #8
   1b15c:	mov	r3, fp
   1b160:	mov	r2, sl
   1b164:	ldr	r7, [r0, #4]
   1b168:	str	r0, [sp, #36]	; 0x24
   1b16c:	str	ip, [sp, #40]	; 0x28
   1b170:	orr	r0, r1, #1
   1b174:	ldr	r9, [r6, r4, lsl #3]
   1b178:	str	ip, [sp, #8]
   1b17c:	ldr	lr, [r5, #44]	; 0x2c
   1b180:	str	r0, [sp, #4]
   1b184:	ldr	ip, [r5]
   1b188:	mov	r1, r9
   1b18c:	str	ip, [sp, #32]
   1b190:	ldr	ip, [r5, #40]	; 0x28
   1b194:	str	ip, [sp, #12]
   1b198:	ldr	ip, [sp, #32]
   1b19c:	str	lr, [sp, #16]
   1b1a0:	str	r0, [sp, #44]	; 0x2c
   1b1a4:	mov	r0, r7
   1b1a8:	str	ip, [sp]
   1b1ac:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b1b0:	cmp	r9, r0
   1b1b4:	bhi	1b224 <__assert_fail@plt+0x9884>
   1b1b8:	add	r9, r0, #1
   1b1bc:	movw	r3, #25252	; 0x62a4
   1b1c0:	movt	r3, #4
   1b1c4:	cmp	r7, r3
   1b1c8:	str	r9, [r6, r4, lsl #3]
   1b1cc:	beq	1b1d8 <__assert_fail@plt+0x9838>
   1b1d0:	mov	r0, r7
   1b1d4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1b1d8:	mov	r0, r9
   1b1dc:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1b1e0:	ldr	ip, [r5]
   1b1e4:	mov	r3, fp
   1b1e8:	mov	r2, sl
   1b1ec:	mov	r1, r9
   1b1f0:	mov	r7, r0
   1b1f4:	ldr	lr, [sp, #36]	; 0x24
   1b1f8:	ldr	r4, [r5, #40]	; 0x28
   1b1fc:	str	r0, [lr, #4]
   1b200:	ldr	lr, [r5, #44]	; 0x2c
   1b204:	str	ip, [sp]
   1b208:	ldr	ip, [sp, #44]	; 0x2c
   1b20c:	str	ip, [sp, #4]
   1b210:	ldr	ip, [sp, #40]	; 0x28
   1b214:	str	r4, [sp, #12]
   1b218:	str	lr, [sp, #16]
   1b21c:	str	ip, [sp, #8]
   1b220:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b224:	ldr	r3, [sp, #28]
   1b228:	mov	r0, r7
   1b22c:	str	r3, [r8]
   1b230:	add	sp, sp, #60	; 0x3c
   1b234:	ldrd	r4, [sp]
   1b238:	ldrd	r6, [sp, #8]
   1b23c:	ldrd	r8, [sp, #16]
   1b240:	ldrd	sl, [sp, #24]
   1b244:	add	sp, sp, #32
   1b248:	pop	{pc}		; (ldr pc, [sp], #4)
   1b24c:	mov	r1, #8
   1b250:	mvn	r3, #-2147483648	; 0x80000000
   1b254:	str	r1, [sp]
   1b258:	add	r1, sp, #52	; 0x34
   1b25c:	bl	1da00 <__assert_fail@plt+0xc060>
   1b260:	ldrd	r2, [r7, #8]
   1b264:	mov	r6, r0
   1b268:	str	r0, [r7]
   1b26c:	strd	r2, [r0]
   1b270:	b	1b12c <__assert_fail@plt+0x978c>
   1b274:	bl	11964 <abort@plt>
   1b278:	strd	r4, [sp, #-16]!
   1b27c:	mov	r5, r0
   1b280:	str	r6, [sp, #8]
   1b284:	str	lr, [sp, #12]
   1b288:	bl	117d8 <__errno_location@plt>
   1b28c:	mov	r4, r0
   1b290:	cmp	r5, #0
   1b294:	ldr	r0, [pc, #32]	; 1b2bc <__assert_fail@plt+0x991c>
   1b298:	mov	r1, #48	; 0x30
   1b29c:	movne	r0, r5
   1b2a0:	ldr	r6, [r4]
   1b2a4:	bl	1dba0 <__assert_fail@plt+0xc200>
   1b2a8:	str	r6, [r4]
   1b2ac:	ldrd	r4, [sp]
   1b2b0:	ldr	r6, [sp, #8]
   1b2b4:	add	sp, sp, #12
   1b2b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2bc:	andeq	r6, r4, r4, lsr #7
   1b2c0:	ldr	r3, [pc, #12]	; 1b2d4 <__assert_fail@plt+0x9934>
   1b2c4:	cmp	r0, #0
   1b2c8:	moveq	r0, r3
   1b2cc:	ldr	r0, [r0]
   1b2d0:	bx	lr
   1b2d4:	andeq	r6, r4, r4, lsr #7
   1b2d8:	ldr	r3, [pc, #12]	; 1b2ec <__assert_fail@plt+0x994c>
   1b2dc:	cmp	r0, #0
   1b2e0:	moveq	r0, r3
   1b2e4:	str	r1, [r0]
   1b2e8:	bx	lr
   1b2ec:	andeq	r6, r4, r4, lsr #7
   1b2f0:	ldr	r3, [pc, #52]	; 1b32c <__assert_fail@plt+0x998c>
   1b2f4:	cmp	r0, #0
   1b2f8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b2fc:	lsr	lr, r1, #5
   1b300:	and	r1, r1, #31
   1b304:	moveq	r0, r3
   1b308:	add	r3, r0, #8
   1b30c:	ldr	ip, [r3, lr, lsl #2]
   1b310:	lsr	r0, ip, r1
   1b314:	eor	r2, r2, r0
   1b318:	and	r0, r0, #1
   1b31c:	and	r2, r2, #1
   1b320:	eor	r1, ip, r2, lsl r1
   1b324:	str	r1, [r3, lr, lsl #2]
   1b328:	pop	{pc}		; (ldr pc, [sp], #4)
   1b32c:	andeq	r6, r4, r4, lsr #7
   1b330:	ldr	r3, [pc, #16]	; 1b348 <__assert_fail@plt+0x99a8>
   1b334:	cmp	r0, #0
   1b338:	movne	r3, r0
   1b33c:	ldr	r0, [r3, #4]
   1b340:	str	r1, [r3, #4]
   1b344:	bx	lr
   1b348:	andeq	r6, r4, r4, lsr #7
   1b34c:	ldr	r3, [pc, #48]	; 1b384 <__assert_fail@plt+0x99e4>
   1b350:	cmp	r0, #0
   1b354:	mov	ip, #10
   1b358:	moveq	r0, r3
   1b35c:	cmp	r2, #0
   1b360:	cmpne	r1, #0
   1b364:	str	ip, [r0]
   1b368:	beq	1b378 <__assert_fail@plt+0x99d8>
   1b36c:	str	r1, [r0, #40]	; 0x28
   1b370:	str	r2, [r0, #44]	; 0x2c
   1b374:	bx	lr
   1b378:	str	r4, [sp, #-8]!
   1b37c:	str	lr, [sp, #4]
   1b380:	bl	11964 <abort@plt>
   1b384:	andeq	r6, r4, r4, lsr #7
   1b388:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1b38c:	strd	r6, [sp, #8]
   1b390:	mov	r7, r0
   1b394:	mov	r6, r1
   1b398:	strd	r8, [sp, #16]
   1b39c:	mov	r8, r2
   1b3a0:	mov	r9, r3
   1b3a4:	str	lr, [sp, #24]
   1b3a8:	sub	sp, sp, #28
   1b3ac:	ldr	r4, [sp, #56]	; 0x38
   1b3b0:	ldr	ip, [pc, #104]	; 1b420 <__assert_fail@plt+0x9a80>
   1b3b4:	cmp	r4, #0
   1b3b8:	moveq	r4, ip
   1b3bc:	bl	117d8 <__errno_location@plt>
   1b3c0:	ldr	ip, [r4, #44]	; 0x2c
   1b3c4:	mov	r5, r0
   1b3c8:	mov	r1, r6
   1b3cc:	add	lr, r4, #8
   1b3d0:	mov	r3, r9
   1b3d4:	ldr	r6, [r5]
   1b3d8:	mov	r2, r8
   1b3dc:	mov	r0, r7
   1b3e0:	str	ip, [sp, #16]
   1b3e4:	ldr	ip, [r4, #40]	; 0x28
   1b3e8:	str	lr, [sp, #8]
   1b3ec:	str	ip, [sp, #12]
   1b3f0:	ldr	ip, [r4, #4]
   1b3f4:	str	ip, [sp, #4]
   1b3f8:	ldr	ip, [r4]
   1b3fc:	str	ip, [sp]
   1b400:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b404:	str	r6, [r5]
   1b408:	add	sp, sp, #28
   1b40c:	ldrd	r4, [sp]
   1b410:	ldrd	r6, [sp, #8]
   1b414:	ldrd	r8, [sp, #16]
   1b418:	add	sp, sp, #24
   1b41c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b420:	andeq	r6, r4, r4, lsr #7
   1b424:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b428:	cmp	r2, #0
   1b42c:	ldr	r4, [pc, #192]	; 1b4f4 <__assert_fail@plt+0x9b54>
   1b430:	movne	r4, r2
   1b434:	strd	r6, [sp, #8]
   1b438:	strd	r8, [sp, #16]
   1b43c:	mov	r9, r1
   1b440:	mov	r8, r0
   1b444:	strd	sl, [sp, #24]
   1b448:	str	lr, [sp, #32]
   1b44c:	sub	sp, sp, #36	; 0x24
   1b450:	bl	117d8 <__errno_location@plt>
   1b454:	ldr	r5, [r4, #4]
   1b458:	mov	r6, r0
   1b45c:	add	r7, r4, #8
   1b460:	mov	r1, #0
   1b464:	mov	r3, r9
   1b468:	ldr	ip, [r4, #44]	; 0x2c
   1b46c:	mov	r2, r8
   1b470:	mov	r0, r1
   1b474:	ldr	sl, [r6]
   1b478:	orr	r5, r5, #1
   1b47c:	str	ip, [sp, #16]
   1b480:	ldr	ip, [r4, #40]	; 0x28
   1b484:	stmib	sp, {r5, r7, ip}
   1b488:	ldr	ip, [r4]
   1b48c:	str	ip, [sp]
   1b490:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b494:	add	r1, r0, #1
   1b498:	mov	r0, r1
   1b49c:	str	r1, [sp, #28]
   1b4a0:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1b4a4:	ldr	ip, [r4, #44]	; 0x2c
   1b4a8:	mov	fp, r0
   1b4ac:	mov	r3, r9
   1b4b0:	mov	r2, r8
   1b4b4:	ldr	r1, [sp, #28]
   1b4b8:	str	ip, [sp, #16]
   1b4bc:	ldr	ip, [r4, #40]	; 0x28
   1b4c0:	stmib	sp, {r5, r7, ip}
   1b4c4:	ldr	ip, [r4]
   1b4c8:	str	ip, [sp]
   1b4cc:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b4d0:	mov	r0, fp
   1b4d4:	str	sl, [r6]
   1b4d8:	add	sp, sp, #36	; 0x24
   1b4dc:	ldrd	r4, [sp]
   1b4e0:	ldrd	r6, [sp, #8]
   1b4e4:	ldrd	r8, [sp, #16]
   1b4e8:	ldrd	sl, [sp, #24]
   1b4ec:	add	sp, sp, #32
   1b4f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4f4:	andeq	r6, r4, r4, lsr #7
   1b4f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b4fc:	cmp	r3, #0
   1b500:	ldr	r4, [pc, #220]	; 1b5e4 <__assert_fail@plt+0x9c44>
   1b504:	movne	r4, r3
   1b508:	strd	r6, [sp, #8]
   1b50c:	mov	r6, r2
   1b510:	strd	r8, [sp, #16]
   1b514:	mov	r9, r0
   1b518:	strd	sl, [sp, #24]
   1b51c:	mov	sl, r1
   1b520:	str	lr, [sp, #32]
   1b524:	sub	sp, sp, #44	; 0x2c
   1b528:	bl	117d8 <__errno_location@plt>
   1b52c:	ldr	r5, [r4, #4]
   1b530:	mov	r7, r0
   1b534:	mov	r1, #0
   1b538:	add	r8, r4, #8
   1b53c:	mov	r3, sl
   1b540:	ldr	ip, [r4, #44]	; 0x2c
   1b544:	mov	r2, r9
   1b548:	mov	r0, r1
   1b54c:	ldr	lr, [r7]
   1b550:	cmp	r6, r1
   1b554:	orreq	r5, r5, #1
   1b558:	str	ip, [sp, #16]
   1b55c:	ldr	ip, [r4, #40]	; 0x28
   1b560:	stmib	sp, {r5, r8, ip}
   1b564:	ldr	ip, [r4]
   1b568:	str	lr, [sp, #28]
   1b56c:	str	ip, [sp]
   1b570:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b574:	add	r1, r0, #1
   1b578:	mov	fp, r0
   1b57c:	mov	r0, r1
   1b580:	str	r1, [sp, #36]	; 0x24
   1b584:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1b588:	ldr	ip, [r4, #44]	; 0x2c
   1b58c:	mov	r3, sl
   1b590:	mov	r2, r9
   1b594:	ldr	r1, [sp, #36]	; 0x24
   1b598:	str	ip, [sp, #16]
   1b59c:	ldr	ip, [r4, #40]	; 0x28
   1b5a0:	str	r0, [sp, #32]
   1b5a4:	stmib	sp, {r5, r8, ip}
   1b5a8:	ldr	ip, [r4]
   1b5ac:	str	ip, [sp]
   1b5b0:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b5b4:	ldr	lr, [sp, #28]
   1b5b8:	cmp	r6, #0
   1b5bc:	ldr	r0, [sp, #32]
   1b5c0:	str	lr, [r7]
   1b5c4:	strne	fp, [r6]
   1b5c8:	add	sp, sp, #44	; 0x2c
   1b5cc:	ldrd	r4, [sp]
   1b5d0:	ldrd	r6, [sp, #8]
   1b5d4:	ldrd	r8, [sp, #16]
   1b5d8:	ldrd	sl, [sp, #24]
   1b5dc:	add	sp, sp, #32
   1b5e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5e4:	andeq	r6, r4, r4, lsr #7
   1b5e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b5ec:	movw	r5, #25024	; 0x61c0
   1b5f0:	movt	r5, #4
   1b5f4:	ldr	r3, [r5, #4]
   1b5f8:	strd	r6, [sp, #8]
   1b5fc:	str	r8, [sp, #16]
   1b600:	str	lr, [sp, #20]
   1b604:	ldr	r7, [r5]
   1b608:	cmp	r3, #1
   1b60c:	ble	1b630 <__assert_fail@plt+0x9c90>
   1b610:	mov	r4, #1
   1b614:	add	r6, r7, #4
   1b618:	ldr	r0, [r6, r4, lsl #3]
   1b61c:	add	r4, r4, #1
   1b620:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1b624:	ldr	r3, [r5, #4]
   1b628:	cmp	r3, r4
   1b62c:	bgt	1b618 <__assert_fail@plt+0x9c78>
   1b630:	ldr	r0, [r7, #4]
   1b634:	movw	r4, #25252	; 0x62a4
   1b638:	movt	r4, #4
   1b63c:	cmp	r0, r4
   1b640:	beq	1b654 <__assert_fail@plt+0x9cb4>
   1b644:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1b648:	mov	r3, #256	; 0x100
   1b64c:	str	r3, [r5, #8]
   1b650:	str	r4, [r5, #12]
   1b654:	ldr	r4, [pc, #44]	; 1b688 <__assert_fail@plt+0x9ce8>
   1b658:	cmp	r7, r4
   1b65c:	beq	1b66c <__assert_fail@plt+0x9ccc>
   1b660:	mov	r0, r7
   1b664:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1b668:	str	r4, [r5]
   1b66c:	mov	r3, #1
   1b670:	ldrd	r6, [sp, #8]
   1b674:	str	r3, [r5, #4]
   1b678:	ldrd	r4, [sp]
   1b67c:	ldr	r8, [sp, #16]
   1b680:	add	sp, sp, #20
   1b684:	pop	{pc}		; (ldr pc, [sp], #4)
   1b688:	andeq	r6, r4, r8, asr #3
   1b68c:	ldr	r3, [pc, #4]	; 1b698 <__assert_fail@plt+0x9cf8>
   1b690:	mvn	r2, #0
   1b694:	b	1b090 <__assert_fail@plt+0x96f0>
   1b698:	andeq	r6, r4, r4, lsr #7
   1b69c:	ldr	r3, [pc]	; 1b6a4 <__assert_fail@plt+0x9d04>
   1b6a0:	b	1b090 <__assert_fail@plt+0x96f0>
   1b6a4:	andeq	r6, r4, r4, lsr #7
   1b6a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b6ac:	movw	r4, #25024	; 0x61c0
   1b6b0:	movt	r4, #4
   1b6b4:	strd	r6, [sp, #8]
   1b6b8:	strd	r8, [sp, #16]
   1b6bc:	strd	sl, [sp, #24]
   1b6c0:	mov	sl, r0
   1b6c4:	str	lr, [sp, #32]
   1b6c8:	sub	sp, sp, #44	; 0x2c
   1b6cc:	bl	117d8 <__errno_location@plt>
   1b6d0:	ldr	r3, [r0]
   1b6d4:	mov	r8, r0
   1b6d8:	ldr	r2, [r4, #4]
   1b6dc:	ldr	r5, [r4]
   1b6e0:	str	r3, [sp, #28]
   1b6e4:	cmp	r2, #0
   1b6e8:	bgt	1b744 <__assert_fail@plt+0x9da4>
   1b6ec:	add	r3, r4, #8
   1b6f0:	str	r2, [sp, #36]	; 0x24
   1b6f4:	rsb	r2, r2, #1
   1b6f8:	cmp	r5, r3
   1b6fc:	beq	1b810 <__assert_fail@plt+0x9e70>
   1b700:	mov	r1, #8
   1b704:	mov	r0, r5
   1b708:	mvn	r3, #-2147483648	; 0x80000000
   1b70c:	str	r1, [sp]
   1b710:	add	r1, sp, #36	; 0x24
   1b714:	bl	1da00 <__assert_fail@plt+0xc060>
   1b718:	mov	r5, r0
   1b71c:	str	r0, [r4]
   1b720:	ldr	r0, [r4, #4]
   1b724:	mov	r1, #0
   1b728:	ldr	r2, [sp, #36]	; 0x24
   1b72c:	sub	r2, r2, r0
   1b730:	add	r0, r5, r0, lsl #3
   1b734:	lsl	r2, r2, #3
   1b738:	bl	11814 <memset@plt>
   1b73c:	ldr	r3, [sp, #36]	; 0x24
   1b740:	str	r3, [r4, #4]
   1b744:	movw	r4, #25252	; 0x62a4
   1b748:	movt	r4, #4
   1b74c:	ldr	r9, [r5]
   1b750:	add	fp, r4, #264	; 0x108
   1b754:	mvn	r3, #0
   1b758:	ldr	r7, [r4, #260]	; 0x104
   1b75c:	mov	r2, sl
   1b760:	ldr	r6, [r5, #4]
   1b764:	str	fp, [sp, #8]
   1b768:	mov	r1, r9
   1b76c:	ldr	ip, [r4, #256]	; 0x100
   1b770:	orr	r7, r7, #1
   1b774:	ldr	lr, [r4, #300]	; 0x12c
   1b778:	mov	r0, r6
   1b77c:	str	ip, [sp]
   1b780:	str	r7, [sp, #4]
   1b784:	str	lr, [sp, #16]
   1b788:	ldr	ip, [r4, #296]	; 0x128
   1b78c:	str	ip, [sp, #12]
   1b790:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b794:	cmp	r9, r0
   1b798:	bhi	1b7e8 <__assert_fail@plt+0x9e48>
   1b79c:	add	r9, r0, #1
   1b7a0:	cmp	r6, r4
   1b7a4:	str	r9, [r5]
   1b7a8:	beq	1b7b4 <__assert_fail@plt+0x9e14>
   1b7ac:	mov	r0, r6
   1b7b0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1b7b4:	mov	r0, r9
   1b7b8:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1b7bc:	ldr	r3, [r4, #256]	; 0x100
   1b7c0:	mov	r2, sl
   1b7c4:	mov	r1, r9
   1b7c8:	mov	r6, r0
   1b7cc:	ldr	lr, [r4, #296]	; 0x128
   1b7d0:	ldr	ip, [r4, #300]	; 0x12c
   1b7d4:	str	r0, [r5, #4]
   1b7d8:	stm	sp, {r3, r7, fp, lr}
   1b7dc:	mvn	r3, #0
   1b7e0:	str	ip, [sp, #16]
   1b7e4:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b7e8:	ldr	r3, [sp, #28]
   1b7ec:	mov	r0, r6
   1b7f0:	str	r3, [r8]
   1b7f4:	add	sp, sp, #44	; 0x2c
   1b7f8:	ldrd	r4, [sp]
   1b7fc:	ldrd	r6, [sp, #8]
   1b800:	ldrd	r8, [sp, #16]
   1b804:	ldrd	sl, [sp, #24]
   1b808:	add	sp, sp, #32
   1b80c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b810:	mov	r0, #8
   1b814:	mvn	r3, #-2147483648	; 0x80000000
   1b818:	add	r1, sp, #36	; 0x24
   1b81c:	str	r0, [sp]
   1b820:	mov	r0, #0
   1b824:	bl	1da00 <__assert_fail@plt+0xc060>
   1b828:	ldrd	r2, [r4, #8]
   1b82c:	mov	r5, r0
   1b830:	str	r0, [r4]
   1b834:	strd	r2, [r0]
   1b838:	b	1b720 <__assert_fail@plt+0x9d80>
   1b83c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b840:	movw	r4, #25024	; 0x61c0
   1b844:	movt	r4, #4
   1b848:	strd	r6, [sp, #8]
   1b84c:	strd	r8, [sp, #16]
   1b850:	strd	sl, [sp, #24]
   1b854:	mov	sl, r0
   1b858:	mov	fp, r1
   1b85c:	str	lr, [sp, #32]
   1b860:	sub	sp, sp, #44	; 0x2c
   1b864:	bl	117d8 <__errno_location@plt>
   1b868:	ldr	r3, [r0]
   1b86c:	mov	r8, r0
   1b870:	ldr	r2, [r4, #4]
   1b874:	ldr	r5, [r4]
   1b878:	str	r3, [sp, #28]
   1b87c:	cmp	r2, #0
   1b880:	bgt	1b8dc <__assert_fail@plt+0x9f3c>
   1b884:	add	r3, r4, #8
   1b888:	str	r2, [sp, #36]	; 0x24
   1b88c:	rsb	r2, r2, #1
   1b890:	cmp	r5, r3
   1b894:	beq	1b9b8 <__assert_fail@plt+0xa018>
   1b898:	mov	r1, #8
   1b89c:	mov	r0, r5
   1b8a0:	mvn	r3, #-2147483648	; 0x80000000
   1b8a4:	str	r1, [sp]
   1b8a8:	add	r1, sp, #36	; 0x24
   1b8ac:	bl	1da00 <__assert_fail@plt+0xc060>
   1b8b0:	mov	r5, r0
   1b8b4:	str	r0, [r4]
   1b8b8:	ldr	r0, [r4, #4]
   1b8bc:	mov	r1, #0
   1b8c0:	ldr	r2, [sp, #36]	; 0x24
   1b8c4:	sub	r2, r2, r0
   1b8c8:	add	r0, r5, r0, lsl #3
   1b8cc:	lsl	r2, r2, #3
   1b8d0:	bl	11814 <memset@plt>
   1b8d4:	ldr	r3, [sp, #36]	; 0x24
   1b8d8:	str	r3, [r4, #4]
   1b8dc:	movw	r4, #25252	; 0x62a4
   1b8e0:	movt	r4, #4
   1b8e4:	ldr	r9, [r5]
   1b8e8:	add	r0, r4, #264	; 0x108
   1b8ec:	mov	r3, fp
   1b8f0:	ldr	r7, [r4, #260]	; 0x104
   1b8f4:	mov	r2, sl
   1b8f8:	ldr	r6, [r5, #4]
   1b8fc:	str	r0, [sp, #8]
   1b900:	mov	r1, r9
   1b904:	ldr	ip, [r4, #256]	; 0x100
   1b908:	orr	r7, r7, #1
   1b90c:	ldr	lr, [r4, #300]	; 0x12c
   1b910:	mov	r0, r6
   1b914:	str	ip, [sp]
   1b918:	str	r7, [sp, #4]
   1b91c:	str	lr, [sp, #16]
   1b920:	ldr	ip, [r4, #296]	; 0x128
   1b924:	str	ip, [sp, #12]
   1b928:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b92c:	cmp	r9, r0
   1b930:	bhi	1b990 <__assert_fail@plt+0x9ff0>
   1b934:	add	r9, r0, #1
   1b938:	cmp	r6, r4
   1b93c:	str	r9, [r5]
   1b940:	beq	1b94c <__assert_fail@plt+0x9fac>
   1b944:	mov	r0, r6
   1b948:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1b94c:	mov	r0, r9
   1b950:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1b954:	ldr	ip, [r4, #256]	; 0x100
   1b958:	mov	r1, r9
   1b95c:	mov	r3, fp
   1b960:	mov	r2, sl
   1b964:	mov	r6, r0
   1b968:	ldr	r9, [r4, #296]	; 0x128
   1b96c:	ldr	lr, [r4, #300]	; 0x12c
   1b970:	str	r0, [r5, #4]
   1b974:	str	ip, [sp]
   1b978:	ldr	ip, [pc, #100]	; 1b9e4 <__assert_fail@plt+0xa044>
   1b97c:	str	r7, [sp, #4]
   1b980:	str	ip, [sp, #8]
   1b984:	str	r9, [sp, #12]
   1b988:	str	lr, [sp, #16]
   1b98c:	bl	196a4 <__assert_fail@plt+0x7d04>
   1b990:	ldr	r3, [sp, #28]
   1b994:	mov	r0, r6
   1b998:	str	r3, [r8]
   1b99c:	add	sp, sp, #44	; 0x2c
   1b9a0:	ldrd	r4, [sp]
   1b9a4:	ldrd	r6, [sp, #8]
   1b9a8:	ldrd	r8, [sp, #16]
   1b9ac:	ldrd	sl, [sp, #24]
   1b9b0:	add	sp, sp, #32
   1b9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9b8:	mov	r0, #8
   1b9bc:	mvn	r3, #-2147483648	; 0x80000000
   1b9c0:	add	r1, sp, #36	; 0x24
   1b9c4:	str	r0, [sp]
   1b9c8:	mov	r0, #0
   1b9cc:	bl	1da00 <__assert_fail@plt+0xc060>
   1b9d0:	ldrd	r2, [r4, #8]
   1b9d4:	mov	r5, r0
   1b9d8:	str	r0, [r4]
   1b9dc:	strd	r2, [r0]
   1b9e0:	b	1b8b8 <__assert_fail@plt+0x9f18>
   1b9e4:	andeq	r6, r4, ip, lsr #7
   1b9e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b9ec:	mov	r4, #0
   1b9f0:	mov	r5, #0
   1b9f4:	strd	r6, [sp, #8]
   1b9f8:	cmp	r1, #10
   1b9fc:	str	lr, [sp, #16]
   1ba00:	sub	sp, sp, #100	; 0x64
   1ba04:	strd	r4, [sp, #48]	; 0x30
   1ba08:	beq	1ba50 <__assert_fail@plt+0xa0b0>
   1ba0c:	mov	r3, sp
   1ba10:	strd	r4, [sp, #8]
   1ba14:	str	r1, [sp, #48]	; 0x30
   1ba18:	mov	r1, r2
   1ba1c:	mvn	r2, #0
   1ba20:	ldrd	r6, [sp, #48]	; 0x30
   1ba24:	strd	r6, [sp]
   1ba28:	strd	r4, [sp, #16]
   1ba2c:	strd	r4, [sp, #24]
   1ba30:	strd	r4, [sp, #32]
   1ba34:	strd	r4, [sp, #40]	; 0x28
   1ba38:	bl	1b090 <__assert_fail@plt+0x96f0>
   1ba3c:	add	sp, sp, #100	; 0x64
   1ba40:	ldrd	r4, [sp]
   1ba44:	ldrd	r6, [sp, #8]
   1ba48:	add	sp, sp, #16
   1ba4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba50:	bl	11964 <abort@plt>
   1ba54:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ba58:	mov	r4, #0
   1ba5c:	mov	r5, #0
   1ba60:	strd	r6, [sp, #8]
   1ba64:	cmp	r1, #10
   1ba68:	str	lr, [sp, #16]
   1ba6c:	sub	sp, sp, #100	; 0x64
   1ba70:	strd	r4, [sp, #48]	; 0x30
   1ba74:	beq	1bac0 <__assert_fail@plt+0xa120>
   1ba78:	mov	ip, r2
   1ba7c:	mov	r2, r3
   1ba80:	strd	r4, [sp, #8]
   1ba84:	str	r1, [sp, #48]	; 0x30
   1ba88:	mov	r3, sp
   1ba8c:	mov	r1, ip
   1ba90:	ldrd	r6, [sp, #48]	; 0x30
   1ba94:	strd	r6, [sp]
   1ba98:	strd	r4, [sp, #16]
   1ba9c:	strd	r4, [sp, #24]
   1baa0:	strd	r4, [sp, #32]
   1baa4:	strd	r4, [sp, #40]	; 0x28
   1baa8:	bl	1b090 <__assert_fail@plt+0x96f0>
   1baac:	add	sp, sp, #100	; 0x64
   1bab0:	ldrd	r4, [sp]
   1bab4:	ldrd	r6, [sp, #8]
   1bab8:	add	sp, sp, #16
   1babc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bac0:	bl	11964 <abort@plt>
   1bac4:	mov	r2, #0
   1bac8:	mov	r3, #0
   1bacc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bad0:	strd	r6, [sp, #8]
   1bad4:	cmp	r0, #10
   1bad8:	strd	r8, [sp, #16]
   1badc:	strd	sl, [sp, #24]
   1bae0:	str	lr, [sp, #32]
   1bae4:	sub	sp, sp, #124	; 0x7c
   1bae8:	strd	r2, [sp, #72]	; 0x48
   1baec:	strd	r2, [sp, #80]	; 0x50
   1baf0:	strd	r2, [sp, #88]	; 0x58
   1baf4:	strd	r2, [sp, #96]	; 0x60
   1baf8:	strd	r2, [sp, #104]	; 0x68
   1bafc:	strd	r2, [sp, #112]	; 0x70
   1bb00:	beq	1bca4 <__assert_fail@plt+0xa304>
   1bb04:	mov	r6, r1
   1bb08:	movw	r4, #25024	; 0x61c0
   1bb0c:	movt	r4, #4
   1bb10:	str	r0, [sp, #72]	; 0x48
   1bb14:	ldrd	r0, [sp, #72]	; 0x48
   1bb18:	strd	r0, [sp, #24]
   1bb1c:	strd	r2, [sp, #32]
   1bb20:	strd	r2, [sp, #40]	; 0x28
   1bb24:	strd	r2, [sp, #48]	; 0x30
   1bb28:	strd	r2, [sp, #56]	; 0x38
   1bb2c:	strd	r2, [sp, #64]	; 0x40
   1bb30:	bl	117d8 <__errno_location@plt>
   1bb34:	mov	r8, r0
   1bb38:	ldr	r5, [r4]
   1bb3c:	ldr	r2, [r4, #4]
   1bb40:	ldr	r9, [r0]
   1bb44:	cmp	r2, #0
   1bb48:	bgt	1bba4 <__assert_fail@plt+0xa204>
   1bb4c:	add	r3, r4, #8
   1bb50:	str	r2, [sp, #72]	; 0x48
   1bb54:	rsb	r2, r2, #1
   1bb58:	cmp	r5, r3
   1bb5c:	beq	1bc78 <__assert_fail@plt+0xa2d8>
   1bb60:	mov	r3, #8
   1bb64:	mov	r0, r5
   1bb68:	add	r1, sp, #72	; 0x48
   1bb6c:	str	r3, [sp]
   1bb70:	mvn	r3, #-2147483648	; 0x80000000
   1bb74:	bl	1da00 <__assert_fail@plt+0xc060>
   1bb78:	mov	r5, r0
   1bb7c:	str	r0, [r4]
   1bb80:	ldr	r0, [r4, #4]
   1bb84:	mov	r1, #0
   1bb88:	ldr	r2, [sp, #72]	; 0x48
   1bb8c:	sub	r2, r2, r0
   1bb90:	add	r0, r5, r0, lsl #3
   1bb94:	lsl	r2, r2, #3
   1bb98:	bl	11814 <memset@plt>
   1bb9c:	ldr	r3, [sp, #72]	; 0x48
   1bba0:	str	r3, [r4, #4]
   1bba4:	ldr	sl, [r5]
   1bba8:	add	r0, sp, #32
   1bbac:	mvn	r3, #0
   1bbb0:	mov	r2, r6
   1bbb4:	ldr	r7, [sp, #28]
   1bbb8:	ldr	r4, [r5, #4]
   1bbbc:	mov	r1, sl
   1bbc0:	str	r0, [sp, #8]
   1bbc4:	ldr	lr, [sp, #24]
   1bbc8:	orr	r7, r7, #1
   1bbcc:	ldr	ip, [sp, #64]	; 0x40
   1bbd0:	mov	r0, r4
   1bbd4:	ldr	fp, [sp, #68]	; 0x44
   1bbd8:	str	lr, [sp]
   1bbdc:	str	r7, [sp, #4]
   1bbe0:	str	ip, [sp, #12]
   1bbe4:	str	fp, [sp, #16]
   1bbe8:	bl	196a4 <__assert_fail@plt+0x7d04>
   1bbec:	cmp	sl, r0
   1bbf0:	bhi	1bc54 <__assert_fail@plt+0xa2b4>
   1bbf4:	add	sl, r0, #1
   1bbf8:	movw	r3, #25252	; 0x62a4
   1bbfc:	movt	r3, #4
   1bc00:	cmp	r4, r3
   1bc04:	str	sl, [r5]
   1bc08:	beq	1bc14 <__assert_fail@plt+0xa274>
   1bc0c:	mov	r0, r4
   1bc10:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1bc14:	mov	r0, sl
   1bc18:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1bc1c:	ldr	r3, [sp, #24]
   1bc20:	mov	r2, r6
   1bc24:	mov	r1, sl
   1bc28:	mov	r4, r0
   1bc2c:	ldr	lr, [sp, #64]	; 0x40
   1bc30:	ldr	ip, [sp, #68]	; 0x44
   1bc34:	str	r0, [r5, #4]
   1bc38:	add	r5, sp, #32
   1bc3c:	stm	sp, {r3, r7}
   1bc40:	mvn	r3, #0
   1bc44:	str	r5, [sp, #8]
   1bc48:	str	lr, [sp, #12]
   1bc4c:	str	ip, [sp, #16]
   1bc50:	bl	196a4 <__assert_fail@plt+0x7d04>
   1bc54:	mov	r0, r4
   1bc58:	str	r9, [r8]
   1bc5c:	add	sp, sp, #124	; 0x7c
   1bc60:	ldrd	r4, [sp]
   1bc64:	ldrd	r6, [sp, #8]
   1bc68:	ldrd	r8, [sp, #16]
   1bc6c:	ldrd	sl, [sp, #24]
   1bc70:	add	sp, sp, #32
   1bc74:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc78:	mov	r0, #8
   1bc7c:	mvn	r3, #-2147483648	; 0x80000000
   1bc80:	add	r1, sp, #72	; 0x48
   1bc84:	str	r0, [sp]
   1bc88:	mov	r0, #0
   1bc8c:	bl	1da00 <__assert_fail@plt+0xc060>
   1bc90:	ldrd	r2, [r4, #8]
   1bc94:	mov	r5, r0
   1bc98:	str	r0, [r4]
   1bc9c:	strd	r2, [r0]
   1bca0:	b	1bb80 <__assert_fail@plt+0xa1e0>
   1bca4:	bl	11964 <abort@plt>
   1bca8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bcac:	cmp	r0, #10
   1bcb0:	strd	r6, [sp, #8]
   1bcb4:	mov	r6, #0
   1bcb8:	mov	r7, #0
   1bcbc:	strd	r8, [sp, #16]
   1bcc0:	strd	sl, [sp, #24]
   1bcc4:	str	lr, [sp, #32]
   1bcc8:	sub	sp, sp, #124	; 0x7c
   1bccc:	strd	r6, [sp, #72]	; 0x48
   1bcd0:	strd	r6, [sp, #80]	; 0x50
   1bcd4:	strd	r6, [sp, #88]	; 0x58
   1bcd8:	strd	r6, [sp, #96]	; 0x60
   1bcdc:	strd	r6, [sp, #104]	; 0x68
   1bce0:	strd	r6, [sp, #112]	; 0x70
   1bce4:	beq	1be90 <__assert_fail@plt+0xa4f0>
   1bce8:	mov	sl, r2
   1bcec:	movw	r5, #25024	; 0x61c0
   1bcf0:	movt	r5, #4
   1bcf4:	str	r0, [sp, #72]	; 0x48
   1bcf8:	mov	r9, r1
   1bcfc:	ldrd	r2, [sp, #72]	; 0x48
   1bd00:	strd	r2, [sp, #24]
   1bd04:	strd	r6, [sp, #32]
   1bd08:	strd	r6, [sp, #40]	; 0x28
   1bd0c:	strd	r6, [sp, #48]	; 0x30
   1bd10:	strd	r6, [sp, #56]	; 0x38
   1bd14:	strd	r6, [sp, #64]	; 0x40
   1bd18:	bl	117d8 <__errno_location@plt>
   1bd1c:	mov	r7, r0
   1bd20:	ldr	r4, [r5]
   1bd24:	ldr	r2, [r5, #4]
   1bd28:	ldr	fp, [r0]
   1bd2c:	cmp	r2, #0
   1bd30:	bgt	1bd8c <__assert_fail@plt+0xa3ec>
   1bd34:	add	r3, r5, #8
   1bd38:	str	r2, [sp, #72]	; 0x48
   1bd3c:	rsb	r2, r2, #1
   1bd40:	cmp	r4, r3
   1bd44:	beq	1be64 <__assert_fail@plt+0xa4c4>
   1bd48:	mov	r3, #8
   1bd4c:	mov	r0, r4
   1bd50:	add	r1, sp, #72	; 0x48
   1bd54:	str	r3, [sp]
   1bd58:	mvn	r3, #-2147483648	; 0x80000000
   1bd5c:	bl	1da00 <__assert_fail@plt+0xc060>
   1bd60:	mov	r4, r0
   1bd64:	str	r0, [r5]
   1bd68:	ldr	r0, [r5, #4]
   1bd6c:	mov	r1, #0
   1bd70:	ldr	r2, [sp, #72]	; 0x48
   1bd74:	sub	r2, r2, r0
   1bd78:	add	r0, r4, r0, lsl #3
   1bd7c:	lsl	r2, r2, #3
   1bd80:	bl	11814 <memset@plt>
   1bd84:	ldr	r3, [sp, #72]	; 0x48
   1bd88:	str	r3, [r5, #4]
   1bd8c:	ldr	ip, [sp, #24]
   1bd90:	add	r0, sp, #32
   1bd94:	mov	r3, sl
   1bd98:	mov	r2, r9
   1bd9c:	ldr	r6, [sp, #28]
   1bda0:	ldr	r8, [r4]
   1bda4:	ldr	r5, [r4, #4]
   1bda8:	str	ip, [sp]
   1bdac:	orr	r6, r6, #1
   1bdb0:	ldr	ip, [sp, #64]	; 0x40
   1bdb4:	mov	r1, r8
   1bdb8:	str	r6, [sp, #4]
   1bdbc:	ldr	lr, [sp, #68]	; 0x44
   1bdc0:	str	r0, [sp, #8]
   1bdc4:	mov	r0, r5
   1bdc8:	str	ip, [sp, #12]
   1bdcc:	str	lr, [sp, #16]
   1bdd0:	bl	196a4 <__assert_fail@plt+0x7d04>
   1bdd4:	cmp	r8, r0
   1bdd8:	bhi	1be40 <__assert_fail@plt+0xa4a0>
   1bddc:	add	r8, r0, #1
   1bde0:	movw	r3, #25252	; 0x62a4
   1bde4:	movt	r3, #4
   1bde8:	cmp	r5, r3
   1bdec:	str	r8, [r4]
   1bdf0:	beq	1bdfc <__assert_fail@plt+0xa45c>
   1bdf4:	mov	r0, r5
   1bdf8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1bdfc:	mov	r0, r8
   1be00:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1be04:	ldr	lr, [sp, #24]
   1be08:	mov	r1, r8
   1be0c:	mov	r3, sl
   1be10:	mov	r2, r9
   1be14:	mov	r5, r0
   1be18:	ldr	r8, [sp, #64]	; 0x40
   1be1c:	ldr	ip, [sp, #68]	; 0x44
   1be20:	str	r0, [r4, #4]
   1be24:	str	lr, [sp]
   1be28:	add	lr, sp, #32
   1be2c:	str	r6, [sp, #4]
   1be30:	str	lr, [sp, #8]
   1be34:	str	r8, [sp, #12]
   1be38:	str	ip, [sp, #16]
   1be3c:	bl	196a4 <__assert_fail@plt+0x7d04>
   1be40:	mov	r0, r5
   1be44:	str	fp, [r7]
   1be48:	add	sp, sp, #124	; 0x7c
   1be4c:	ldrd	r4, [sp]
   1be50:	ldrd	r6, [sp, #8]
   1be54:	ldrd	r8, [sp, #16]
   1be58:	ldrd	sl, [sp, #24]
   1be5c:	add	sp, sp, #32
   1be60:	pop	{pc}		; (ldr pc, [sp], #4)
   1be64:	mov	r0, #8
   1be68:	mvn	r3, #-2147483648	; 0x80000000
   1be6c:	add	r1, sp, #72	; 0x48
   1be70:	str	r0, [sp]
   1be74:	mov	r0, #0
   1be78:	bl	1da00 <__assert_fail@plt+0xc060>
   1be7c:	ldrd	r2, [r5, #8]
   1be80:	mov	r4, r0
   1be84:	str	r0, [r5]
   1be88:	strd	r2, [r0]
   1be8c:	b	1bd68 <__assert_fail@plt+0xa3c8>
   1be90:	bl	11964 <abort@plt>
   1be94:	ldr	r3, [pc, #492]	; 1c088 <__assert_fail@plt+0xa6e8>
   1be98:	lsr	ip, r2, #5
   1be9c:	and	r2, r2, #31
   1bea0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bea4:	movw	r5, #25024	; 0x61c0
   1bea8:	movt	r5, #4
   1beac:	strd	r6, [sp, #8]
   1beb0:	strd	r8, [sp, #16]
   1beb4:	strd	sl, [sp, #24]
   1beb8:	mov	sl, r0
   1bebc:	mov	fp, r1
   1bec0:	ldrd	r0, [r3]
   1bec4:	str	lr, [sp, #32]
   1bec8:	sub	sp, sp, #92	; 0x5c
   1becc:	ldrd	r8, [r3, #8]
   1bed0:	add	r6, sp, #48	; 0x30
   1bed4:	strd	r0, [sp, #40]	; 0x28
   1bed8:	ldrd	r0, [r3, #16]
   1bedc:	strd	r8, [sp, #48]	; 0x30
   1bee0:	ldrd	r8, [r3, #24]
   1bee4:	strd	r0, [sp, #56]	; 0x38
   1bee8:	ldrd	r0, [r3, #32]
   1beec:	strd	r8, [sp, #64]	; 0x40
   1bef0:	ldrd	r8, [r3, #40]	; 0x28
   1bef4:	strd	r0, [sp, #72]	; 0x48
   1bef8:	strd	r8, [sp, #80]	; 0x50
   1befc:	ldr	r3, [r6, ip, lsl #2]
   1bf00:	mvn	r1, r3, lsr r2
   1bf04:	and	r1, r1, #1
   1bf08:	eor	r2, r3, r1, lsl r2
   1bf0c:	str	r2, [r6, ip, lsl #2]
   1bf10:	bl	117d8 <__errno_location@plt>
   1bf14:	ldr	r3, [r0]
   1bf18:	mov	r8, r0
   1bf1c:	ldr	r2, [r5, #4]
   1bf20:	ldr	r4, [r5]
   1bf24:	str	r3, [sp, #28]
   1bf28:	cmp	r2, #0
   1bf2c:	bgt	1bf88 <__assert_fail@plt+0xa5e8>
   1bf30:	add	r3, r5, #8
   1bf34:	str	r2, [sp, #36]	; 0x24
   1bf38:	rsb	r2, r2, #1
   1bf3c:	cmp	r4, r3
   1bf40:	beq	1c05c <__assert_fail@plt+0xa6bc>
   1bf44:	mov	r1, #8
   1bf48:	mov	r0, r4
   1bf4c:	mvn	r3, #-2147483648	; 0x80000000
   1bf50:	str	r1, [sp]
   1bf54:	add	r1, sp, #36	; 0x24
   1bf58:	bl	1da00 <__assert_fail@plt+0xc060>
   1bf5c:	mov	r4, r0
   1bf60:	str	r0, [r5]
   1bf64:	ldr	r0, [r5, #4]
   1bf68:	mov	r1, #0
   1bf6c:	ldr	r2, [sp, #36]	; 0x24
   1bf70:	sub	r2, r2, r0
   1bf74:	add	r0, r4, r0, lsl #3
   1bf78:	lsl	r2, r2, #3
   1bf7c:	bl	11814 <memset@plt>
   1bf80:	ldr	r3, [sp, #36]	; 0x24
   1bf84:	str	r3, [r5, #4]
   1bf88:	ldr	ip, [sp, #40]	; 0x28
   1bf8c:	mov	r3, fp
   1bf90:	mov	r2, sl
   1bf94:	ldr	r7, [sp, #44]	; 0x2c
   1bf98:	ldr	r9, [r4]
   1bf9c:	ldr	r5, [r4, #4]
   1bfa0:	str	ip, [sp]
   1bfa4:	orr	r7, r7, #1
   1bfa8:	ldr	ip, [sp, #80]	; 0x50
   1bfac:	mov	r1, r9
   1bfb0:	str	r7, [sp, #4]
   1bfb4:	ldr	lr, [sp, #84]	; 0x54
   1bfb8:	mov	r0, r5
   1bfbc:	str	r6, [sp, #8]
   1bfc0:	str	ip, [sp, #12]
   1bfc4:	str	lr, [sp, #16]
   1bfc8:	bl	196a4 <__assert_fail@plt+0x7d04>
   1bfcc:	cmp	r9, r0
   1bfd0:	bhi	1c034 <__assert_fail@plt+0xa694>
   1bfd4:	add	r9, r0, #1
   1bfd8:	movw	r3, #25252	; 0x62a4
   1bfdc:	movt	r3, #4
   1bfe0:	cmp	r5, r3
   1bfe4:	str	r9, [r4]
   1bfe8:	beq	1bff4 <__assert_fail@plt+0xa654>
   1bfec:	mov	r0, r5
   1bff0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1bff4:	mov	r0, r9
   1bff8:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1bffc:	mov	r1, r9
   1c000:	ldr	ip, [sp, #40]	; 0x28
   1c004:	mov	r3, fp
   1c008:	mov	r2, sl
   1c00c:	mov	r5, r0
   1c010:	ldr	r9, [sp, #80]	; 0x50
   1c014:	ldr	lr, [sp, #84]	; 0x54
   1c018:	str	r0, [r4, #4]
   1c01c:	str	ip, [sp]
   1c020:	str	r7, [sp, #4]
   1c024:	str	r6, [sp, #8]
   1c028:	str	r9, [sp, #12]
   1c02c:	str	lr, [sp, #16]
   1c030:	bl	196a4 <__assert_fail@plt+0x7d04>
   1c034:	ldr	r3, [sp, #28]
   1c038:	mov	r0, r5
   1c03c:	str	r3, [r8]
   1c040:	add	sp, sp, #92	; 0x5c
   1c044:	ldrd	r4, [sp]
   1c048:	ldrd	r6, [sp, #8]
   1c04c:	ldrd	r8, [sp, #16]
   1c050:	ldrd	sl, [sp, #24]
   1c054:	add	sp, sp, #32
   1c058:	pop	{pc}		; (ldr pc, [sp], #4)
   1c05c:	mov	r0, #8
   1c060:	mvn	r3, #-2147483648	; 0x80000000
   1c064:	add	r1, sp, #36	; 0x24
   1c068:	str	r0, [sp]
   1c06c:	mov	r0, #0
   1c070:	bl	1da00 <__assert_fail@plt+0xc060>
   1c074:	ldrd	r2, [r5, #8]
   1c078:	mov	r4, r0
   1c07c:	str	r0, [r5]
   1c080:	strd	r2, [r0]
   1c084:	b	1bf64 <__assert_fail@plt+0xa5c4>
   1c088:	andeq	r6, r4, r4, lsr #7
   1c08c:	ldr	ip, [pc, #476]	; 1c270 <__assert_fail@plt+0xa8d0>
   1c090:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c094:	movw	r4, #25024	; 0x61c0
   1c098:	movt	r4, #4
   1c09c:	ldrd	r2, [ip, #8]
   1c0a0:	strd	r6, [sp, #8]
   1c0a4:	lsr	r7, r1, #5
   1c0a8:	mov	r6, r0
   1c0ac:	strd	r8, [sp, #16]
   1c0b0:	str	lr, [sp, #32]
   1c0b4:	and	lr, r1, #31
   1c0b8:	ldrd	r0, [ip]
   1c0bc:	strd	sl, [sp, #24]
   1c0c0:	sub	sp, sp, #84	; 0x54
   1c0c4:	add	r5, sp, #40	; 0x28
   1c0c8:	strd	r0, [sp, #32]
   1c0cc:	strd	r2, [sp, #40]	; 0x28
   1c0d0:	ldrd	r0, [ip, #16]
   1c0d4:	ldrd	r2, [ip, #24]
   1c0d8:	strd	r0, [sp, #48]	; 0x30
   1c0dc:	ldrd	r0, [ip, #32]
   1c0e0:	strd	r2, [sp, #56]	; 0x38
   1c0e4:	ldrd	r2, [ip, #40]	; 0x28
   1c0e8:	strd	r0, [sp, #64]	; 0x40
   1c0ec:	strd	r2, [sp, #72]	; 0x48
   1c0f0:	ldr	r1, [r5, r7, lsl #2]
   1c0f4:	mvn	r3, r1, lsr lr
   1c0f8:	and	r3, r3, #1
   1c0fc:	eor	r1, r1, r3, lsl lr
   1c100:	str	r1, [r5, r7, lsl #2]
   1c104:	bl	117d8 <__errno_location@plt>
   1c108:	mov	r9, r0
   1c10c:	ldr	sl, [r0]
   1c110:	ldr	r2, [r4, #4]
   1c114:	ldr	r7, [r4]
   1c118:	cmp	r2, #0
   1c11c:	bgt	1c178 <__assert_fail@plt+0xa7d8>
   1c120:	add	r3, r4, #8
   1c124:	str	r2, [sp, #28]
   1c128:	rsb	r2, r2, #1
   1c12c:	cmp	r7, r3
   1c130:	beq	1c244 <__assert_fail@plt+0xa8a4>
   1c134:	mov	r1, #8
   1c138:	mov	r0, r7
   1c13c:	mvn	r3, #-2147483648	; 0x80000000
   1c140:	str	r1, [sp]
   1c144:	add	r1, sp, #28
   1c148:	bl	1da00 <__assert_fail@plt+0xc060>
   1c14c:	mov	r7, r0
   1c150:	str	r0, [r4]
   1c154:	ldr	r0, [r4, #4]
   1c158:	mov	r1, #0
   1c15c:	ldr	r2, [sp, #28]
   1c160:	sub	r2, r2, r0
   1c164:	add	r0, r7, r0, lsl #3
   1c168:	lsl	r2, r2, #3
   1c16c:	bl	11814 <memset@plt>
   1c170:	ldr	r3, [sp, #28]
   1c174:	str	r3, [r4, #4]
   1c178:	ldr	ip, [sp, #32]
   1c17c:	mvn	r3, #0
   1c180:	mov	r2, r6
   1c184:	ldr	r8, [sp, #36]	; 0x24
   1c188:	ldr	fp, [r7]
   1c18c:	ldr	r4, [r7, #4]
   1c190:	str	ip, [sp]
   1c194:	orr	r8, r8, #1
   1c198:	ldr	ip, [sp, #72]	; 0x48
   1c19c:	mov	r1, fp
   1c1a0:	str	r8, [sp, #4]
   1c1a4:	ldr	lr, [sp, #76]	; 0x4c
   1c1a8:	mov	r0, r4
   1c1ac:	str	r5, [sp, #8]
   1c1b0:	str	ip, [sp, #12]
   1c1b4:	str	lr, [sp, #16]
   1c1b8:	bl	196a4 <__assert_fail@plt+0x7d04>
   1c1bc:	cmp	fp, r0
   1c1c0:	bhi	1c220 <__assert_fail@plt+0xa880>
   1c1c4:	add	fp, r0, #1
   1c1c8:	movw	r3, #25252	; 0x62a4
   1c1cc:	movt	r3, #4
   1c1d0:	cmp	r4, r3
   1c1d4:	str	fp, [r7]
   1c1d8:	beq	1c1e4 <__assert_fail@plt+0xa844>
   1c1dc:	mov	r0, r4
   1c1e0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1c1e4:	mov	r0, fp
   1c1e8:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1c1ec:	ldr	r3, [sp, #32]
   1c1f0:	mov	r2, r6
   1c1f4:	mov	r1, fp
   1c1f8:	mov	r4, r0
   1c1fc:	ldr	lr, [sp, #72]	; 0x48
   1c200:	ldr	ip, [sp, #76]	; 0x4c
   1c204:	str	r0, [r7, #4]
   1c208:	stm	sp, {r3, r8}
   1c20c:	mvn	r3, #0
   1c210:	str	r5, [sp, #8]
   1c214:	str	lr, [sp, #12]
   1c218:	str	ip, [sp, #16]
   1c21c:	bl	196a4 <__assert_fail@plt+0x7d04>
   1c220:	mov	r0, r4
   1c224:	str	sl, [r9]
   1c228:	add	sp, sp, #84	; 0x54
   1c22c:	ldrd	r4, [sp]
   1c230:	ldrd	r6, [sp, #8]
   1c234:	ldrd	r8, [sp, #16]
   1c238:	ldrd	sl, [sp, #24]
   1c23c:	add	sp, sp, #32
   1c240:	pop	{pc}		; (ldr pc, [sp], #4)
   1c244:	mov	r0, #8
   1c248:	mvn	r3, #-2147483648	; 0x80000000
   1c24c:	add	r1, sp, #28
   1c250:	str	r0, [sp]
   1c254:	mov	r0, #0
   1c258:	bl	1da00 <__assert_fail@plt+0xc060>
   1c25c:	ldrd	r2, [r4, #8]
   1c260:	mov	r7, r0
   1c264:	str	r0, [r4]
   1c268:	strd	r2, [r0]
   1c26c:	b	1c154 <__assert_fail@plt+0xa7b4>
   1c270:	andeq	r6, r4, r4, lsr #7
   1c274:	ldr	ip, [pc, #472]	; 1c454 <__assert_fail@plt+0xaab4>
   1c278:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c27c:	mov	r5, r0
   1c280:	movw	r4, #25024	; 0x61c0
   1c284:	movt	r4, #4
   1c288:	ldrd	r2, [ip]
   1c28c:	ldrd	r0, [ip, #8]
   1c290:	strd	r6, [sp, #8]
   1c294:	strd	r8, [sp, #16]
   1c298:	strd	sl, [sp, #24]
   1c29c:	str	lr, [sp, #32]
   1c2a0:	sub	sp, sp, #84	; 0x54
   1c2a4:	strd	r2, [sp, #32]
   1c2a8:	strd	r0, [sp, #40]	; 0x28
   1c2ac:	ldr	r6, [sp, #44]	; 0x2c
   1c2b0:	ldrd	r2, [ip, #16]
   1c2b4:	ldrd	r0, [ip, #24]
   1c2b8:	mvn	lr, r6
   1c2bc:	and	lr, lr, #67108864	; 0x4000000
   1c2c0:	eor	lr, lr, r6
   1c2c4:	ldrd	r6, [ip, #40]	; 0x28
   1c2c8:	strd	r2, [sp, #48]	; 0x30
   1c2cc:	ldrd	r2, [ip, #32]
   1c2d0:	str	lr, [sp, #44]	; 0x2c
   1c2d4:	strd	r0, [sp, #56]	; 0x38
   1c2d8:	strd	r2, [sp, #64]	; 0x40
   1c2dc:	strd	r6, [sp, #72]	; 0x48
   1c2e0:	bl	117d8 <__errno_location@plt>
   1c2e4:	mov	r8, r0
   1c2e8:	ldr	r9, [r0]
   1c2ec:	ldr	r2, [r4, #4]
   1c2f0:	ldr	r6, [r4]
   1c2f4:	cmp	r2, #0
   1c2f8:	bgt	1c354 <__assert_fail@plt+0xa9b4>
   1c2fc:	add	r3, r4, #8
   1c300:	str	r2, [sp, #28]
   1c304:	rsb	r2, r2, #1
   1c308:	cmp	r6, r3
   1c30c:	beq	1c428 <__assert_fail@plt+0xaa88>
   1c310:	mov	r1, #8
   1c314:	mov	r0, r6
   1c318:	mvn	r3, #-2147483648	; 0x80000000
   1c31c:	str	r1, [sp]
   1c320:	add	r1, sp, #28
   1c324:	bl	1da00 <__assert_fail@plt+0xc060>
   1c328:	mov	r6, r0
   1c32c:	str	r0, [r4]
   1c330:	ldr	r0, [r4, #4]
   1c334:	mov	r1, #0
   1c338:	ldr	r2, [sp, #28]
   1c33c:	sub	r2, r2, r0
   1c340:	add	r0, r6, r0, lsl #3
   1c344:	lsl	r2, r2, #3
   1c348:	bl	11814 <memset@plt>
   1c34c:	ldr	r3, [sp, #28]
   1c350:	str	r3, [r4, #4]
   1c354:	ldr	sl, [r6]
   1c358:	add	r0, sp, #40	; 0x28
   1c35c:	mvn	r3, #0
   1c360:	mov	r2, r5
   1c364:	ldr	r7, [sp, #36]	; 0x24
   1c368:	ldr	r4, [r6, #4]
   1c36c:	mov	r1, sl
   1c370:	str	r0, [sp, #8]
   1c374:	ldr	lr, [sp, #32]
   1c378:	orr	r7, r7, #1
   1c37c:	ldr	ip, [sp, #72]	; 0x48
   1c380:	mov	r0, r4
   1c384:	ldr	fp, [sp, #76]	; 0x4c
   1c388:	str	lr, [sp]
   1c38c:	str	r7, [sp, #4]
   1c390:	str	ip, [sp, #12]
   1c394:	str	fp, [sp, #16]
   1c398:	bl	196a4 <__assert_fail@plt+0x7d04>
   1c39c:	cmp	sl, r0
   1c3a0:	bhi	1c404 <__assert_fail@plt+0xaa64>
   1c3a4:	add	sl, r0, #1
   1c3a8:	movw	r3, #25252	; 0x62a4
   1c3ac:	movt	r3, #4
   1c3b0:	cmp	r4, r3
   1c3b4:	str	sl, [r6]
   1c3b8:	beq	1c3c4 <__assert_fail@plt+0xaa24>
   1c3bc:	mov	r0, r4
   1c3c0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1c3c4:	mov	r0, sl
   1c3c8:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1c3cc:	ldr	r3, [sp, #32]
   1c3d0:	mov	r2, r5
   1c3d4:	add	r5, sp, #40	; 0x28
   1c3d8:	mov	r1, sl
   1c3dc:	mov	r4, r0
   1c3e0:	ldr	lr, [sp, #72]	; 0x48
   1c3e4:	ldr	ip, [sp, #76]	; 0x4c
   1c3e8:	str	r0, [r6, #4]
   1c3ec:	stm	sp, {r3, r7}
   1c3f0:	mvn	r3, #0
   1c3f4:	str	r5, [sp, #8]
   1c3f8:	str	lr, [sp, #12]
   1c3fc:	str	ip, [sp, #16]
   1c400:	bl	196a4 <__assert_fail@plt+0x7d04>
   1c404:	mov	r0, r4
   1c408:	str	r9, [r8]
   1c40c:	add	sp, sp, #84	; 0x54
   1c410:	ldrd	r4, [sp]
   1c414:	ldrd	r6, [sp, #8]
   1c418:	ldrd	r8, [sp, #16]
   1c41c:	ldrd	sl, [sp, #24]
   1c420:	add	sp, sp, #32
   1c424:	pop	{pc}		; (ldr pc, [sp], #4)
   1c428:	mov	r0, #8
   1c42c:	mvn	r3, #-2147483648	; 0x80000000
   1c430:	add	r1, sp, #28
   1c434:	str	r0, [sp]
   1c438:	mov	r0, #0
   1c43c:	bl	1da00 <__assert_fail@plt+0xc060>
   1c440:	ldrd	r2, [r4, #8]
   1c444:	mov	r6, r0
   1c448:	str	r0, [r4]
   1c44c:	strd	r2, [r0]
   1c450:	b	1c330 <__assert_fail@plt+0xa990>
   1c454:	andeq	r6, r4, r4, lsr #7
   1c458:	ldr	ip, [pc, #480]	; 1c640 <__assert_fail@plt+0xaca0>
   1c45c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c460:	mov	r5, r0
   1c464:	movw	r4, #25024	; 0x61c0
   1c468:	movt	r4, #4
   1c46c:	ldrd	r2, [ip]
   1c470:	strd	r6, [sp, #8]
   1c474:	mov	r6, r1
   1c478:	ldrd	r0, [ip, #8]
   1c47c:	strd	r8, [sp, #16]
   1c480:	strd	sl, [sp, #24]
   1c484:	str	lr, [sp, #32]
   1c488:	sub	sp, sp, #84	; 0x54
   1c48c:	ldrd	r8, [ip, #40]	; 0x28
   1c490:	strd	r2, [sp, #32]
   1c494:	strd	r0, [sp, #40]	; 0x28
   1c498:	ldrd	r2, [ip, #16]
   1c49c:	ldr	r7, [sp, #44]	; 0x2c
   1c4a0:	ldrd	r0, [ip, #24]
   1c4a4:	strd	r2, [sp, #48]	; 0x30
   1c4a8:	ldrd	r2, [ip, #32]
   1c4ac:	mvn	lr, r7
   1c4b0:	and	lr, lr, #67108864	; 0x4000000
   1c4b4:	eor	lr, lr, r7
   1c4b8:	str	lr, [sp, #44]	; 0x2c
   1c4bc:	strd	r0, [sp, #56]	; 0x38
   1c4c0:	strd	r2, [sp, #64]	; 0x40
   1c4c4:	strd	r8, [sp, #72]	; 0x48
   1c4c8:	bl	117d8 <__errno_location@plt>
   1c4cc:	mov	r9, r0
   1c4d0:	ldr	sl, [r0]
   1c4d4:	ldr	r2, [r4, #4]
   1c4d8:	ldr	r7, [r4]
   1c4dc:	cmp	r2, #0
   1c4e0:	bgt	1c53c <__assert_fail@plt+0xab9c>
   1c4e4:	add	r3, r4, #8
   1c4e8:	str	r2, [sp, #28]
   1c4ec:	rsb	r2, r2, #1
   1c4f0:	cmp	r7, r3
   1c4f4:	beq	1c614 <__assert_fail@plt+0xac74>
   1c4f8:	mov	r1, #8
   1c4fc:	mov	r0, r7
   1c500:	mvn	r3, #-2147483648	; 0x80000000
   1c504:	str	r1, [sp]
   1c508:	add	r1, sp, #28
   1c50c:	bl	1da00 <__assert_fail@plt+0xc060>
   1c510:	mov	r7, r0
   1c514:	str	r0, [r4]
   1c518:	ldr	r0, [r4, #4]
   1c51c:	mov	r1, #0
   1c520:	ldr	r2, [sp, #28]
   1c524:	sub	r2, r2, r0
   1c528:	add	r0, r7, r0, lsl #3
   1c52c:	lsl	r2, r2, #3
   1c530:	bl	11814 <memset@plt>
   1c534:	ldr	r3, [sp, #28]
   1c538:	str	r3, [r4, #4]
   1c53c:	ldr	ip, [sp, #32]
   1c540:	add	r0, sp, #40	; 0x28
   1c544:	mov	r3, r6
   1c548:	mov	r2, r5
   1c54c:	ldr	r8, [sp, #36]	; 0x24
   1c550:	ldr	fp, [r7]
   1c554:	ldr	r4, [r7, #4]
   1c558:	str	ip, [sp]
   1c55c:	orr	r8, r8, #1
   1c560:	ldr	ip, [sp, #72]	; 0x48
   1c564:	mov	r1, fp
   1c568:	str	r8, [sp, #4]
   1c56c:	ldr	lr, [sp, #76]	; 0x4c
   1c570:	str	r0, [sp, #8]
   1c574:	mov	r0, r4
   1c578:	str	ip, [sp, #12]
   1c57c:	str	lr, [sp, #16]
   1c580:	bl	196a4 <__assert_fail@plt+0x7d04>
   1c584:	cmp	fp, r0
   1c588:	bhi	1c5f0 <__assert_fail@plt+0xac50>
   1c58c:	add	fp, r0, #1
   1c590:	movw	r3, #25252	; 0x62a4
   1c594:	movt	r3, #4
   1c598:	cmp	r4, r3
   1c59c:	str	fp, [r7]
   1c5a0:	beq	1c5ac <__assert_fail@plt+0xac0c>
   1c5a4:	mov	r0, r4
   1c5a8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1c5ac:	mov	r0, fp
   1c5b0:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1c5b4:	ldr	lr, [sp, #32]
   1c5b8:	mov	r2, r5
   1c5bc:	mov	r3, r6
   1c5c0:	mov	r1, fp
   1c5c4:	mov	r4, r0
   1c5c8:	ldr	r5, [sp, #72]	; 0x48
   1c5cc:	ldr	ip, [sp, #76]	; 0x4c
   1c5d0:	str	r0, [r7, #4]
   1c5d4:	str	lr, [sp]
   1c5d8:	add	lr, sp, #40	; 0x28
   1c5dc:	str	r8, [sp, #4]
   1c5e0:	str	lr, [sp, #8]
   1c5e4:	str	r5, [sp, #12]
   1c5e8:	str	ip, [sp, #16]
   1c5ec:	bl	196a4 <__assert_fail@plt+0x7d04>
   1c5f0:	mov	r0, r4
   1c5f4:	str	sl, [r9]
   1c5f8:	add	sp, sp, #84	; 0x54
   1c5fc:	ldrd	r4, [sp]
   1c600:	ldrd	r6, [sp, #8]
   1c604:	ldrd	r8, [sp, #16]
   1c608:	ldrd	sl, [sp, #24]
   1c60c:	add	sp, sp, #32
   1c610:	pop	{pc}		; (ldr pc, [sp], #4)
   1c614:	mov	r0, #8
   1c618:	mvn	r3, #-2147483648	; 0x80000000
   1c61c:	add	r1, sp, #28
   1c620:	str	r0, [sp]
   1c624:	mov	r0, #0
   1c628:	bl	1da00 <__assert_fail@plt+0xc060>
   1c62c:	ldrd	r2, [r4, #8]
   1c630:	mov	r7, r0
   1c634:	str	r0, [r4]
   1c638:	strd	r2, [r0]
   1c63c:	b	1c518 <__assert_fail@plt+0xab78>
   1c640:	andeq	r6, r4, r4, lsr #7
   1c644:	strd	r4, [sp, #-12]!
   1c648:	mov	r4, #0
   1c64c:	mov	r5, #0
   1c650:	str	lr, [sp, #8]
   1c654:	sub	sp, sp, #100	; 0x64
   1c658:	cmp	r1, #10
   1c65c:	strd	r4, [sp]
   1c660:	strd	r4, [sp, #8]
   1c664:	strd	r4, [sp, #16]
   1c668:	strd	r4, [sp, #24]
   1c66c:	strd	r4, [sp, #32]
   1c670:	strd	r4, [sp, #40]	; 0x28
   1c674:	beq	1c6a4 <__assert_fail@plt+0xad04>
   1c678:	mov	ip, #67108864	; 0x4000000
   1c67c:	mov	r3, sp
   1c680:	str	r1, [sp]
   1c684:	mov	r1, r2
   1c688:	mvn	r2, #0
   1c68c:	str	ip, [sp, #12]
   1c690:	bl	1b090 <__assert_fail@plt+0x96f0>
   1c694:	add	sp, sp, #100	; 0x64
   1c698:	ldrd	r4, [sp]
   1c69c:	add	sp, sp, #8
   1c6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6a4:	bl	11964 <abort@plt>
   1c6a8:	ldr	ip, [pc, #156]	; 1c74c <__assert_fail@plt+0xadac>
   1c6ac:	cmp	r2, #0
   1c6b0:	cmpne	r1, #0
   1c6b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c6b8:	strd	r6, [sp, #8]
   1c6bc:	mov	r6, r2
   1c6c0:	str	r8, [sp, #16]
   1c6c4:	mov	r8, r3
   1c6c8:	strd	sl, [sp, #20]
   1c6cc:	ldrd	r4, [ip]
   1c6d0:	str	lr, [sp, #28]
   1c6d4:	sub	sp, sp, #48	; 0x30
   1c6d8:	mov	lr, #10
   1c6dc:	ldrd	r2, [ip, #8]
   1c6e0:	ldrd	sl, [ip, #16]
   1c6e4:	strd	r4, [sp]
   1c6e8:	ldrd	r4, [ip, #32]
   1c6ec:	str	lr, [sp]
   1c6f0:	strd	r2, [sp, #8]
   1c6f4:	strd	sl, [sp, #16]
   1c6f8:	ldrd	r2, [ip, #24]
   1c6fc:	ldrd	sl, [ip, #40]	; 0x28
   1c700:	strd	r2, [sp, #24]
   1c704:	strd	r4, [sp, #32]
   1c708:	strd	sl, [sp, #40]	; 0x28
   1c70c:	beq	1c748 <__assert_fail@plt+0xada8>
   1c710:	mov	r7, r1
   1c714:	mov	r3, sp
   1c718:	mov	r1, r8
   1c71c:	mvn	r2, #0
   1c720:	str	r7, [sp, #40]	; 0x28
   1c724:	str	r6, [sp, #44]	; 0x2c
   1c728:	bl	1b090 <__assert_fail@plt+0x96f0>
   1c72c:	add	sp, sp, #48	; 0x30
   1c730:	ldrd	r4, [sp]
   1c734:	ldrd	r6, [sp, #8]
   1c738:	ldr	r8, [sp, #16]
   1c73c:	ldrd	sl, [sp, #20]
   1c740:	add	sp, sp, #28
   1c744:	pop	{pc}		; (ldr pc, [sp], #4)
   1c748:	bl	11964 <abort@plt>
   1c74c:	andeq	r6, r4, r4, lsr #7
   1c750:	ldr	ip, [pc, #156]	; 1c7f4 <__assert_fail@plt+0xae54>
   1c754:	cmp	r2, #0
   1c758:	cmpne	r1, #0
   1c75c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c760:	strd	r6, [sp, #8]
   1c764:	mov	r6, r2
   1c768:	str	r8, [sp, #16]
   1c76c:	mov	r8, r3
   1c770:	strd	sl, [sp, #20]
   1c774:	ldrd	r4, [ip]
   1c778:	str	lr, [sp, #28]
   1c77c:	sub	sp, sp, #48	; 0x30
   1c780:	mov	lr, #10
   1c784:	ldrd	r2, [ip, #8]
   1c788:	ldrd	sl, [ip, #16]
   1c78c:	strd	r4, [sp]
   1c790:	ldrd	r4, [ip, #32]
   1c794:	str	lr, [sp]
   1c798:	strd	r2, [sp, #8]
   1c79c:	strd	sl, [sp, #16]
   1c7a0:	ldrd	r2, [ip, #24]
   1c7a4:	ldrd	sl, [ip, #40]	; 0x28
   1c7a8:	strd	r2, [sp, #24]
   1c7ac:	strd	r4, [sp, #32]
   1c7b0:	strd	sl, [sp, #40]	; 0x28
   1c7b4:	beq	1c7f0 <__assert_fail@plt+0xae50>
   1c7b8:	ldr	r2, [sp, #80]	; 0x50
   1c7bc:	mov	r7, r1
   1c7c0:	mov	r3, sp
   1c7c4:	mov	r1, r8
   1c7c8:	str	r7, [sp, #40]	; 0x28
   1c7cc:	str	r6, [sp, #44]	; 0x2c
   1c7d0:	bl	1b090 <__assert_fail@plt+0x96f0>
   1c7d4:	add	sp, sp, #48	; 0x30
   1c7d8:	ldrd	r4, [sp]
   1c7dc:	ldrd	r6, [sp, #8]
   1c7e0:	ldr	r8, [sp, #16]
   1c7e4:	ldrd	sl, [sp, #20]
   1c7e8:	add	sp, sp, #28
   1c7ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7f0:	bl	11964 <abort@plt>
   1c7f4:	andeq	r6, r4, r4, lsr #7
   1c7f8:	ldr	ip, [pc, #512]	; 1ca00 <__assert_fail@plt+0xb060>
   1c7fc:	cmp	r0, #0
   1c800:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c804:	ldrd	r4, [ip, #16]
   1c808:	strd	r6, [sp, #8]
   1c80c:	clz	r6, r1
   1c810:	mov	r7, r1
   1c814:	strd	r8, [sp, #16]
   1c818:	mov	r8, r0
   1c81c:	lsr	r6, r6, #5
   1c820:	strd	sl, [sp, #24]
   1c824:	mov	fp, r2
   1c828:	mov	sl, #10
   1c82c:	ldrd	r2, [ip]
   1c830:	moveq	r6, #1
   1c834:	str	lr, [sp, #32]
   1c838:	sub	sp, sp, #92	; 0x5c
   1c83c:	cmp	r6, #0
   1c840:	ldrd	r0, [ip, #8]
   1c844:	strd	r2, [sp, #40]	; 0x28
   1c848:	strd	r4, [sp, #56]	; 0x38
   1c84c:	ldrd	r2, [ip, #24]
   1c850:	strd	r0, [sp, #48]	; 0x30
   1c854:	ldrd	r0, [ip, #32]
   1c858:	str	sl, [sp, #40]	; 0x28
   1c85c:	ldrd	r4, [ip, #40]	; 0x28
   1c860:	strd	r2, [sp, #64]	; 0x40
   1c864:	strd	r0, [sp, #72]	; 0x48
   1c868:	strd	r4, [sp, #80]	; 0x50
   1c86c:	bne	1c9fc <__assert_fail@plt+0xb05c>
   1c870:	movw	r5, #25024	; 0x61c0
   1c874:	movt	r5, #4
   1c878:	str	r8, [sp, #80]	; 0x50
   1c87c:	str	r7, [sp, #84]	; 0x54
   1c880:	bl	117d8 <__errno_location@plt>
   1c884:	ldr	r3, [r0]
   1c888:	mov	r9, r0
   1c88c:	ldr	r2, [r5, #4]
   1c890:	ldr	r4, [r5]
   1c894:	str	r3, [sp, #28]
   1c898:	cmp	r2, #0
   1c89c:	movgt	r1, sl
   1c8a0:	bgt	1c908 <__assert_fail@plt+0xaf68>
   1c8a4:	add	r3, r5, #8
   1c8a8:	str	r2, [sp, #36]	; 0x24
   1c8ac:	rsb	r2, r2, #1
   1c8b0:	cmp	r4, r3
   1c8b4:	beq	1c9d0 <__assert_fail@plt+0xb030>
   1c8b8:	mov	r1, #8
   1c8bc:	mov	r0, r4
   1c8c0:	mvn	r3, #-2147483648	; 0x80000000
   1c8c4:	str	r1, [sp]
   1c8c8:	add	r1, sp, #36	; 0x24
   1c8cc:	bl	1da00 <__assert_fail@plt+0xc060>
   1c8d0:	mov	r4, r0
   1c8d4:	str	r0, [r5]
   1c8d8:	ldr	r0, [r5, #4]
   1c8dc:	mov	r1, #0
   1c8e0:	ldr	r2, [sp, #36]	; 0x24
   1c8e4:	sub	r2, r2, r0
   1c8e8:	add	r0, r4, r0, lsl #3
   1c8ec:	lsl	r2, r2, #3
   1c8f0:	bl	11814 <memset@plt>
   1c8f4:	ldr	r3, [sp, #36]	; 0x24
   1c8f8:	ldr	r1, [sp, #40]	; 0x28
   1c8fc:	ldr	r8, [sp, #80]	; 0x50
   1c900:	str	r3, [r5, #4]
   1c904:	ldr	r7, [sp, #84]	; 0x54
   1c908:	mvn	r3, #0
   1c90c:	mov	r2, fp
   1c910:	ldr	r6, [sp, #44]	; 0x2c
   1c914:	ldr	sl, [r4]
   1c918:	ldr	r5, [r4, #4]
   1c91c:	orr	r6, r6, #1
   1c920:	stm	sp, {r1, r6}
   1c924:	add	r1, sp, #48	; 0x30
   1c928:	str	r8, [sp, #12]
   1c92c:	mov	r0, r5
   1c930:	str	r1, [sp, #8]
   1c934:	mov	r1, sl
   1c938:	str	r7, [sp, #16]
   1c93c:	bl	196a4 <__assert_fail@plt+0x7d04>
   1c940:	cmp	sl, r0
   1c944:	bhi	1c9a8 <__assert_fail@plt+0xb008>
   1c948:	add	r7, r0, #1
   1c94c:	movw	r3, #25252	; 0x62a4
   1c950:	movt	r3, #4
   1c954:	cmp	r5, r3
   1c958:	str	r7, [r4]
   1c95c:	beq	1c968 <__assert_fail@plt+0xafc8>
   1c960:	mov	r0, r5
   1c964:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1c968:	mov	r0, r7
   1c96c:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1c970:	ldr	r3, [sp, #40]	; 0x28
   1c974:	mov	r2, fp
   1c978:	mov	r1, r7
   1c97c:	mov	r5, r0
   1c980:	ldr	lr, [sp, #80]	; 0x50
   1c984:	ldr	ip, [sp, #84]	; 0x54
   1c988:	str	r0, [r4, #4]
   1c98c:	add	r4, sp, #48	; 0x30
   1c990:	stm	sp, {r3, r6}
   1c994:	mvn	r3, #0
   1c998:	str	r4, [sp, #8]
   1c99c:	str	lr, [sp, #12]
   1c9a0:	str	ip, [sp, #16]
   1c9a4:	bl	196a4 <__assert_fail@plt+0x7d04>
   1c9a8:	ldr	r3, [sp, #28]
   1c9ac:	mov	r0, r5
   1c9b0:	str	r3, [r9]
   1c9b4:	add	sp, sp, #92	; 0x5c
   1c9b8:	ldrd	r4, [sp]
   1c9bc:	ldrd	r6, [sp, #8]
   1c9c0:	ldrd	r8, [sp, #16]
   1c9c4:	ldrd	sl, [sp, #24]
   1c9c8:	add	sp, sp, #32
   1c9cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9d0:	mov	r1, #8
   1c9d4:	mvn	r3, #-2147483648	; 0x80000000
   1c9d8:	mov	r0, r6
   1c9dc:	str	r1, [sp]
   1c9e0:	add	r1, sp, #36	; 0x24
   1c9e4:	bl	1da00 <__assert_fail@plt+0xc060>
   1c9e8:	ldrd	r2, [r5, #8]
   1c9ec:	mov	r4, r0
   1c9f0:	str	r0, [r5]
   1c9f4:	strd	r2, [r0]
   1c9f8:	b	1c8d8 <__assert_fail@plt+0xaf38>
   1c9fc:	bl	11964 <abort@plt>
   1ca00:	andeq	r6, r4, r4, lsr #7
   1ca04:	ldr	ip, [pc, #536]	; 1cc24 <__assert_fail@plt+0xb284>
   1ca08:	cmp	r0, #0
   1ca0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ca10:	ldrd	r4, [ip, #16]
   1ca14:	strd	r6, [sp, #8]
   1ca18:	mov	r6, r1
   1ca1c:	mov	r7, r0
   1ca20:	strd	r8, [sp, #16]
   1ca24:	mov	r9, #10
   1ca28:	strd	sl, [sp, #24]
   1ca2c:	mov	sl, r2
   1ca30:	mov	fp, r3
   1ca34:	str	lr, [sp, #32]
   1ca38:	clz	lr, r1
   1ca3c:	sub	sp, sp, #92	; 0x5c
   1ca40:	ldrd	r2, [ip]
   1ca44:	lsr	lr, lr, #5
   1ca48:	moveq	lr, #1
   1ca4c:	ldrd	r0, [ip, #8]
   1ca50:	cmp	lr, #0
   1ca54:	strd	r4, [sp, #56]	; 0x38
   1ca58:	ldrd	r4, [ip, #40]	; 0x28
   1ca5c:	str	lr, [sp, #28]
   1ca60:	strd	r2, [sp, #40]	; 0x28
   1ca64:	ldrd	r2, [ip, #24]
   1ca68:	strd	r0, [sp, #48]	; 0x30
   1ca6c:	ldrd	r0, [ip, #32]
   1ca70:	str	r9, [sp, #40]	; 0x28
   1ca74:	strd	r2, [sp, #64]	; 0x40
   1ca78:	strd	r4, [sp, #80]	; 0x50
   1ca7c:	strd	r0, [sp, #72]	; 0x48
   1ca80:	bne	1cc20 <__assert_fail@plt+0xb280>
   1ca84:	movw	r5, #25024	; 0x61c0
   1ca88:	movt	r5, #4
   1ca8c:	str	r7, [sp, #80]	; 0x50
   1ca90:	str	r6, [sp, #84]	; 0x54
   1ca94:	bl	117d8 <__errno_location@plt>
   1ca98:	ldr	r3, [r0]
   1ca9c:	mov	r8, r0
   1caa0:	ldr	r2, [r5, #4]
   1caa4:	ldr	r4, [r5]
   1caa8:	str	r3, [sp, #24]
   1caac:	cmp	r2, #0
   1cab0:	movgt	r1, r9
   1cab4:	bgt	1cb1c <__assert_fail@plt+0xb17c>
   1cab8:	add	r3, r5, #8
   1cabc:	str	r2, [sp, #36]	; 0x24
   1cac0:	rsb	r2, r2, #1
   1cac4:	cmp	r4, r3
   1cac8:	beq	1cbf4 <__assert_fail@plt+0xb254>
   1cacc:	mov	r1, #8
   1cad0:	mov	r0, r4
   1cad4:	mvn	r3, #-2147483648	; 0x80000000
   1cad8:	str	r1, [sp]
   1cadc:	add	r1, sp, #36	; 0x24
   1cae0:	bl	1da00 <__assert_fail@plt+0xc060>
   1cae4:	mov	r4, r0
   1cae8:	str	r0, [r5]
   1caec:	ldr	r0, [r5, #4]
   1caf0:	mov	r1, #0
   1caf4:	ldr	r2, [sp, #36]	; 0x24
   1caf8:	sub	r2, r2, r0
   1cafc:	add	r0, r4, r0, lsl #3
   1cb00:	lsl	r2, r2, #3
   1cb04:	bl	11814 <memset@plt>
   1cb08:	ldr	r3, [sp, #36]	; 0x24
   1cb0c:	ldr	r1, [sp, #40]	; 0x28
   1cb10:	ldr	r7, [sp, #80]	; 0x50
   1cb14:	str	r3, [r5, #4]
   1cb18:	ldr	r6, [sp, #84]	; 0x54
   1cb1c:	mov	r3, fp
   1cb20:	mov	r2, sl
   1cb24:	ldr	r0, [sp, #44]	; 0x2c
   1cb28:	ldr	r9, [r4]
   1cb2c:	ldr	r5, [r4, #4]
   1cb30:	orr	r0, r0, #1
   1cb34:	str	r1, [sp]
   1cb38:	add	r1, sp, #48	; 0x30
   1cb3c:	str	r0, [sp, #4]
   1cb40:	str	r1, [sp, #8]
   1cb44:	mov	r1, r9
   1cb48:	str	r7, [sp, #12]
   1cb4c:	str	r6, [sp, #16]
   1cb50:	str	r0, [sp, #28]
   1cb54:	mov	r0, r5
   1cb58:	bl	196a4 <__assert_fail@plt+0x7d04>
   1cb5c:	cmp	r9, r0
   1cb60:	bhi	1cbcc <__assert_fail@plt+0xb22c>
   1cb64:	add	r6, r0, #1
   1cb68:	movw	r3, #25252	; 0x62a4
   1cb6c:	movt	r3, #4
   1cb70:	cmp	r5, r3
   1cb74:	str	r6, [r4]
   1cb78:	beq	1cb84 <__assert_fail@plt+0xb1e4>
   1cb7c:	mov	r0, r5
   1cb80:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1cb84:	mov	r0, r6
   1cb88:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1cb8c:	ldr	lr, [sp, #40]	; 0x28
   1cb90:	mov	r1, r6
   1cb94:	mov	r3, fp
   1cb98:	mov	r2, sl
   1cb9c:	mov	r5, r0
   1cba0:	ldr	r6, [sp, #80]	; 0x50
   1cba4:	ldr	ip, [sp, #84]	; 0x54
   1cba8:	str	r0, [r4, #4]
   1cbac:	str	lr, [sp]
   1cbb0:	ldr	lr, [sp, #28]
   1cbb4:	str	lr, [sp, #4]
   1cbb8:	add	lr, sp, #48	; 0x30
   1cbbc:	str	r6, [sp, #12]
   1cbc0:	str	lr, [sp, #8]
   1cbc4:	str	ip, [sp, #16]
   1cbc8:	bl	196a4 <__assert_fail@plt+0x7d04>
   1cbcc:	ldr	r3, [sp, #24]
   1cbd0:	mov	r0, r5
   1cbd4:	str	r3, [r8]
   1cbd8:	add	sp, sp, #92	; 0x5c
   1cbdc:	ldrd	r4, [sp]
   1cbe0:	ldrd	r6, [sp, #8]
   1cbe4:	ldrd	r8, [sp, #16]
   1cbe8:	ldrd	sl, [sp, #24]
   1cbec:	add	sp, sp, #32
   1cbf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbf4:	mov	r1, #8
   1cbf8:	mvn	r3, #-2147483648	; 0x80000000
   1cbfc:	ldr	r0, [sp, #28]
   1cc00:	str	r1, [sp]
   1cc04:	add	r1, sp, #36	; 0x24
   1cc08:	bl	1da00 <__assert_fail@plt+0xc060>
   1cc0c:	ldrd	r2, [r5, #8]
   1cc10:	mov	r4, r0
   1cc14:	str	r0, [r5]
   1cc18:	strd	r2, [r0]
   1cc1c:	b	1caec <__assert_fail@plt+0xb14c>
   1cc20:	bl	11964 <abort@plt>
   1cc24:	andeq	r6, r4, r4, lsr #7
   1cc28:	ldr	r3, [pc]	; 1cc30 <__assert_fail@plt+0xb290>
   1cc2c:	b	1b090 <__assert_fail@plt+0x96f0>
   1cc30:	ldrdeq	r6, [r4], -r0
   1cc34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cc38:	movw	r4, #25024	; 0x61c0
   1cc3c:	movt	r4, #4
   1cc40:	strd	r6, [sp, #8]
   1cc44:	strd	r8, [sp, #16]
   1cc48:	strd	sl, [sp, #24]
   1cc4c:	mov	sl, r0
   1cc50:	mov	fp, r1
   1cc54:	str	lr, [sp, #32]
   1cc58:	sub	sp, sp, #44	; 0x2c
   1cc5c:	bl	117d8 <__errno_location@plt>
   1cc60:	ldr	r3, [r0]
   1cc64:	mov	r8, r0
   1cc68:	ldr	r2, [r4, #4]
   1cc6c:	ldr	r5, [r4]
   1cc70:	str	r3, [sp, #28]
   1cc74:	cmp	r2, #0
   1cc78:	bgt	1ccd4 <__assert_fail@plt+0xb334>
   1cc7c:	add	r3, r4, #8
   1cc80:	str	r2, [sp, #36]	; 0x24
   1cc84:	rsb	r2, r2, #1
   1cc88:	cmp	r5, r3
   1cc8c:	beq	1cdb0 <__assert_fail@plt+0xb410>
   1cc90:	mov	r1, #8
   1cc94:	mov	r0, r5
   1cc98:	mvn	r3, #-2147483648	; 0x80000000
   1cc9c:	str	r1, [sp]
   1cca0:	add	r1, sp, #36	; 0x24
   1cca4:	bl	1da00 <__assert_fail@plt+0xc060>
   1cca8:	mov	r5, r0
   1ccac:	str	r0, [r4]
   1ccb0:	ldr	r0, [r4, #4]
   1ccb4:	mov	r1, #0
   1ccb8:	ldr	r2, [sp, #36]	; 0x24
   1ccbc:	sub	r2, r2, r0
   1ccc0:	add	r0, r5, r0, lsl #3
   1ccc4:	lsl	r2, r2, #3
   1ccc8:	bl	11814 <memset@plt>
   1cccc:	ldr	r3, [sp, #36]	; 0x24
   1ccd0:	str	r3, [r4, #4]
   1ccd4:	ldr	ip, [r4, #16]
   1ccd8:	mov	r3, fp
   1ccdc:	mov	r2, sl
   1cce0:	ldr	r7, [r4, #20]
   1cce4:	ldr	r0, [pc, #240]	; 1cddc <__assert_fail@plt+0xb43c>
   1cce8:	ldr	r9, [r5]
   1ccec:	orr	r7, r7, #1
   1ccf0:	ldr	r6, [r5, #4]
   1ccf4:	str	ip, [sp]
   1ccf8:	ldr	ip, [r4, #56]	; 0x38
   1ccfc:	mov	r1, r9
   1cd00:	str	r7, [sp, #4]
   1cd04:	ldr	lr, [r4, #60]	; 0x3c
   1cd08:	str	r0, [sp, #8]
   1cd0c:	mov	r0, r6
   1cd10:	str	ip, [sp, #12]
   1cd14:	str	lr, [sp, #16]
   1cd18:	bl	196a4 <__assert_fail@plt+0x7d04>
   1cd1c:	cmp	r9, r0
   1cd20:	bhi	1cd88 <__assert_fail@plt+0xb3e8>
   1cd24:	add	r9, r0, #1
   1cd28:	movw	r3, #25252	; 0x62a4
   1cd2c:	movt	r3, #4
   1cd30:	cmp	r6, r3
   1cd34:	str	r9, [r5]
   1cd38:	beq	1cd44 <__assert_fail@plt+0xb3a4>
   1cd3c:	mov	r0, r6
   1cd40:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1cd44:	mov	r0, r9
   1cd48:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1cd4c:	ldr	ip, [r4, #16]
   1cd50:	mov	r1, r9
   1cd54:	mov	r3, fp
   1cd58:	mov	r2, sl
   1cd5c:	mov	r6, r0
   1cd60:	ldr	r9, [r4, #56]	; 0x38
   1cd64:	ldr	lr, [r4, #60]	; 0x3c
   1cd68:	str	r0, [r5, #4]
   1cd6c:	str	ip, [sp]
   1cd70:	ldr	ip, [pc, #100]	; 1cddc <__assert_fail@plt+0xb43c>
   1cd74:	str	r7, [sp, #4]
   1cd78:	str	ip, [sp, #8]
   1cd7c:	str	r9, [sp, #12]
   1cd80:	str	lr, [sp, #16]
   1cd84:	bl	196a4 <__assert_fail@plt+0x7d04>
   1cd88:	ldr	r3, [sp, #28]
   1cd8c:	mov	r0, r6
   1cd90:	str	r3, [r8]
   1cd94:	add	sp, sp, #44	; 0x2c
   1cd98:	ldrd	r4, [sp]
   1cd9c:	ldrd	r6, [sp, #8]
   1cda0:	ldrd	r8, [sp, #16]
   1cda4:	ldrd	sl, [sp, #24]
   1cda8:	add	sp, sp, #32
   1cdac:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdb0:	mov	r0, #8
   1cdb4:	mvn	r3, #-2147483648	; 0x80000000
   1cdb8:	add	r1, sp, #36	; 0x24
   1cdbc:	str	r0, [sp]
   1cdc0:	mov	r0, #0
   1cdc4:	bl	1da00 <__assert_fail@plt+0xc060>
   1cdc8:	ldrd	r2, [r4, #8]
   1cdcc:	mov	r5, r0
   1cdd0:	str	r0, [r4]
   1cdd4:	strd	r2, [r0]
   1cdd8:	b	1ccb0 <__assert_fail@plt+0xb310>
   1cddc:	ldrdeq	r6, [r4], -r8
   1cde0:	ldr	r3, [pc, #4]	; 1cdec <__assert_fail@plt+0xb44c>
   1cde4:	mvn	r2, #0
   1cde8:	b	1b090 <__assert_fail@plt+0x96f0>
   1cdec:	ldrdeq	r6, [r4], -r0
   1cdf0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cdf4:	movw	r4, #25024	; 0x61c0
   1cdf8:	movt	r4, #4
   1cdfc:	strd	r6, [sp, #8]
   1ce00:	strd	r8, [sp, #16]
   1ce04:	strd	sl, [sp, #24]
   1ce08:	mov	sl, r0
   1ce0c:	str	lr, [sp, #32]
   1ce10:	sub	sp, sp, #44	; 0x2c
   1ce14:	bl	117d8 <__errno_location@plt>
   1ce18:	ldr	r3, [r0]
   1ce1c:	mov	r8, r0
   1ce20:	ldr	r2, [r4, #4]
   1ce24:	ldr	r5, [r4]
   1ce28:	str	r3, [sp, #28]
   1ce2c:	cmp	r2, #0
   1ce30:	bgt	1ce8c <__assert_fail@plt+0xb4ec>
   1ce34:	add	r3, r4, #8
   1ce38:	str	r2, [sp, #36]	; 0x24
   1ce3c:	rsb	r2, r2, #1
   1ce40:	cmp	r5, r3
   1ce44:	beq	1cf54 <__assert_fail@plt+0xb5b4>
   1ce48:	mov	r1, #8
   1ce4c:	mov	r0, r5
   1ce50:	mvn	r3, #-2147483648	; 0x80000000
   1ce54:	str	r1, [sp]
   1ce58:	add	r1, sp, #36	; 0x24
   1ce5c:	bl	1da00 <__assert_fail@plt+0xc060>
   1ce60:	mov	r5, r0
   1ce64:	str	r0, [r4]
   1ce68:	ldr	r0, [r4, #4]
   1ce6c:	mov	r1, #0
   1ce70:	ldr	r2, [sp, #36]	; 0x24
   1ce74:	sub	r2, r2, r0
   1ce78:	add	r0, r5, r0, lsl #3
   1ce7c:	lsl	r2, r2, #3
   1ce80:	bl	11814 <memset@plt>
   1ce84:	ldr	r3, [sp, #36]	; 0x24
   1ce88:	str	r3, [r4, #4]
   1ce8c:	ldr	ip, [r4, #16]
   1ce90:	mvn	r3, #0
   1ce94:	mov	r2, sl
   1ce98:	ldr	r7, [r4, #20]
   1ce9c:	ldr	fp, [pc, #220]	; 1cf80 <__assert_fail@plt+0xb5e0>
   1cea0:	ldr	r9, [r5]
   1cea4:	orr	r7, r7, #1
   1cea8:	ldr	r6, [r5, #4]
   1ceac:	str	ip, [sp]
   1ceb0:	ldr	ip, [r4, #56]	; 0x38
   1ceb4:	mov	r1, r9
   1ceb8:	stmib	sp, {r7, fp}
   1cebc:	ldr	lr, [r4, #60]	; 0x3c
   1cec0:	mov	r0, r6
   1cec4:	str	ip, [sp, #12]
   1cec8:	str	lr, [sp, #16]
   1cecc:	bl	196a4 <__assert_fail@plt+0x7d04>
   1ced0:	cmp	r9, r0
   1ced4:	bhi	1cf2c <__assert_fail@plt+0xb58c>
   1ced8:	add	r9, r0, #1
   1cedc:	movw	r3, #25252	; 0x62a4
   1cee0:	movt	r3, #4
   1cee4:	cmp	r6, r3
   1cee8:	str	r9, [r5]
   1ceec:	beq	1cef8 <__assert_fail@plt+0xb558>
   1cef0:	mov	r0, r6
   1cef4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1cef8:	mov	r0, r9
   1cefc:	bl	1d75c <__assert_fail@plt+0xbdbc>
   1cf00:	ldr	r3, [r4, #16]
   1cf04:	mov	r2, sl
   1cf08:	mov	r1, r9
   1cf0c:	mov	r6, r0
   1cf10:	ldr	lr, [r4, #56]	; 0x38
   1cf14:	ldr	ip, [r4, #60]	; 0x3c
   1cf18:	str	r0, [r5, #4]
   1cf1c:	stm	sp, {r3, r7, fp, lr}
   1cf20:	mvn	r3, #0
   1cf24:	str	ip, [sp, #16]
   1cf28:	bl	196a4 <__assert_fail@plt+0x7d04>
   1cf2c:	ldr	r3, [sp, #28]
   1cf30:	mov	r0, r6
   1cf34:	str	r3, [r8]
   1cf38:	add	sp, sp, #44	; 0x2c
   1cf3c:	ldrd	r4, [sp]
   1cf40:	ldrd	r6, [sp, #8]
   1cf44:	ldrd	r8, [sp, #16]
   1cf48:	ldrd	sl, [sp, #24]
   1cf4c:	add	sp, sp, #32
   1cf50:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf54:	mov	r0, #8
   1cf58:	mvn	r3, #-2147483648	; 0x80000000
   1cf5c:	add	r1, sp, #36	; 0x24
   1cf60:	str	r0, [sp]
   1cf64:	mov	r0, #0
   1cf68:	bl	1da00 <__assert_fail@plt+0xc060>
   1cf6c:	ldrd	r2, [r4, #8]
   1cf70:	mov	r5, r0
   1cf74:	str	r0, [r4]
   1cf78:	strd	r2, [r0]
   1cf7c:	b	1ce68 <__assert_fail@plt+0xb4c8>
   1cf80:	ldrdeq	r6, [r4], -r8
   1cf84:	strd	r4, [sp, #-16]!
   1cf88:	mov	r4, r1
   1cf8c:	mov	r1, #0
   1cf90:	mov	r2, r4
   1cf94:	mov	r5, r0
   1cf98:	str	r6, [sp, #8]
   1cf9c:	str	lr, [sp, #12]
   1cfa0:	bl	1185c <memchr@plt>
   1cfa4:	cmp	r0, #0
   1cfa8:	ldr	r6, [sp, #8]
   1cfac:	subne	r0, r0, r5
   1cfb0:	moveq	r0, r4
   1cfb4:	ldrd	r4, [sp]
   1cfb8:	add	sp, sp, #12
   1cfbc:	addne	r0, r0, #1
   1cfc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfc4:	cmp	r0, #2
   1cfc8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cfcc:	mov	r4, r0
   1cfd0:	strd	r6, [sp, #8]
   1cfd4:	str	r8, [sp, #16]
   1cfd8:	str	lr, [sp, #20]
   1cfdc:	bls	1cff8 <__assert_fail@plt+0xb658>
   1cfe0:	mov	r0, r4
   1cfe4:	ldrd	r4, [sp]
   1cfe8:	ldrd	r6, [sp, #8]
   1cfec:	ldr	r8, [sp, #16]
   1cff0:	add	sp, sp, #20
   1cff4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cff8:	bl	33488 <__assert_fail@plt+0x21ae8>
   1cffc:	mov	r7, r0
   1d000:	bl	117d8 <__errno_location@plt>
   1d004:	mov	r5, r0
   1d008:	mov	r0, r4
   1d00c:	ldr	r6, [r5]
   1d010:	mov	r4, r7
   1d014:	bl	1197c <close@plt>
   1d018:	str	r6, [r5]
   1d01c:	b	1cfe0 <__assert_fail@plt+0xb640>
   1d020:	cmp	r1, #0
   1d024:	strd	r4, [sp, #-16]!
   1d028:	mov	r4, r0
   1d02c:	str	r6, [sp, #8]
   1d030:	str	lr, [sp, #12]
   1d034:	sub	sp, sp, #32
   1d038:	ldr	r5, [sp, #48]	; 0x30
   1d03c:	ldr	r6, [sp, #52]	; 0x34
   1d040:	beq	1d174 <__assert_fail@plt+0xb7d4>
   1d044:	mov	ip, r3
   1d048:	mov	r3, r2
   1d04c:	mov	r2, r1
   1d050:	movw	r1, #19956	; 0x4df4
   1d054:	movt	r1, #3
   1d058:	str	ip, [sp]
   1d05c:	bl	117c0 <fprintf@plt>
   1d060:	mov	r2, #5
   1d064:	movw	r1, #19976	; 0x4e08
   1d068:	movt	r1, #3
   1d06c:	mov	r0, #0
   1d070:	bl	11628 <dcgettext@plt>
   1d074:	mov	r2, r0
   1d078:	movw	r3, #2022	; 0x7e6
   1d07c:	movw	r1, #20680	; 0x50c8
   1d080:	movt	r1, #3
   1d084:	mov	r0, r4
   1d088:	bl	117c0 <fprintf@plt>
   1d08c:	mov	r1, r4
   1d090:	mov	r0, #10
   1d094:	bl	118bc <fputc@plt>
   1d098:	mov	r2, #5
   1d09c:	movw	r1, #19980	; 0x4e0c
   1d0a0:	movt	r1, #3
   1d0a4:	mov	r0, #0
   1d0a8:	bl	11628 <dcgettext@plt>
   1d0ac:	mov	r1, r0
   1d0b0:	movw	r2, #20152	; 0x4eb8
   1d0b4:	movt	r2, #3
   1d0b8:	mov	r0, r4
   1d0bc:	bl	117c0 <fprintf@plt>
   1d0c0:	mov	r1, r4
   1d0c4:	mov	r0, #10
   1d0c8:	bl	118bc <fputc@plt>
   1d0cc:	cmp	r6, #9
   1d0d0:	ldrls	pc, [pc, r6, lsl #2]
   1d0d4:	b	1d3c0 <__assert_fail@plt+0xba20>
   1d0d8:	andeq	sp, r1, r0, ror #2
   1d0dc:	andeq	sp, r1, r4, lsl #3
   1d0e0:			; <UNDEFINED> instruction: 0x0001d1bc
   1d0e4:	strdeq	sp, [r1], -r4
   1d0e8:	andeq	sp, r1, r4, lsr r2
   1d0ec:	andeq	sp, r1, r0, lsl #5
   1d0f0:	andeq	sp, r1, r4, asr #5
   1d0f4:	andeq	sp, r1, r0, lsl r3
   1d0f8:	andeq	sp, r1, r4, ror #6
   1d0fc:	andeq	sp, r1, r0, lsl #2
   1d100:	movw	r1, #20456	; 0x4fe8
   1d104:	movt	r1, #3
   1d108:	mov	r2, #5
   1d10c:	mov	r0, #0
   1d110:	bl	11628 <dcgettext@plt>
   1d114:	ldr	ip, [r5, #8]
   1d118:	mov	r1, r0
   1d11c:	mov	r0, r4
   1d120:	ldr	r3, [r5, #12]
   1d124:	ldr	r2, [r5, #32]
   1d128:	str	ip, [sp]
   1d12c:	ldr	ip, [r5, #16]
   1d130:	str	r2, [sp, #24]
   1d134:	ldr	r2, [r5, #28]
   1d138:	str	r3, [sp, #4]
   1d13c:	ldr	r3, [r5, #20]
   1d140:	str	ip, [sp, #8]
   1d144:	ldr	ip, [r5, #24]
   1d148:	str	r2, [sp, #20]
   1d14c:	ldr	r2, [r5]
   1d150:	str	r3, [sp, #12]
   1d154:	ldr	r3, [r5, #4]
   1d158:	str	ip, [sp, #16]
   1d15c:	bl	117c0 <fprintf@plt>
   1d160:	add	sp, sp, #32
   1d164:	ldrd	r4, [sp]
   1d168:	ldr	r6, [sp, #8]
   1d16c:	add	sp, sp, #12
   1d170:	pop	{pc}		; (ldr pc, [sp], #4)
   1d174:	movw	r1, #19968	; 0x4e00
   1d178:	movt	r1, #3
   1d17c:	bl	117c0 <fprintf@plt>
   1d180:	b	1d060 <__assert_fail@plt+0xb6c0>
   1d184:	mov	r2, #5
   1d188:	movw	r1, #20188	; 0x4edc
   1d18c:	movt	r1, #3
   1d190:	mov	r0, #0
   1d194:	bl	11628 <dcgettext@plt>
   1d198:	ldr	r2, [r5]
   1d19c:	mov	r1, r0
   1d1a0:	mov	r0, r4
   1d1a4:	add	sp, sp, #32
   1d1a8:	ldrd	r4, [sp]
   1d1ac:	ldr	r6, [sp, #8]
   1d1b0:	ldr	lr, [sp, #12]
   1d1b4:	add	sp, sp, #16
   1d1b8:	b	117c0 <fprintf@plt>
   1d1bc:	mov	r2, #5
   1d1c0:	movw	r1, #20204	; 0x4eec
   1d1c4:	movt	r1, #3
   1d1c8:	mov	r0, #0
   1d1cc:	bl	11628 <dcgettext@plt>
   1d1d0:	ldrd	r2, [r5]
   1d1d4:	mov	r1, r0
   1d1d8:	mov	r0, r4
   1d1dc:	add	sp, sp, #32
   1d1e0:	ldrd	r4, [sp]
   1d1e4:	ldr	r6, [sp, #8]
   1d1e8:	ldr	lr, [sp, #12]
   1d1ec:	add	sp, sp, #16
   1d1f0:	b	117c0 <fprintf@plt>
   1d1f4:	mov	r2, #5
   1d1f8:	movw	r1, #20228	; 0x4f04
   1d1fc:	movt	r1, #3
   1d200:	mov	r0, #0
   1d204:	bl	11628 <dcgettext@plt>
   1d208:	ldrd	r2, [r5]
   1d20c:	mov	r1, r0
   1d210:	mov	r0, r4
   1d214:	ldr	ip, [r5, #8]
   1d218:	str	ip, [sp, #48]	; 0x30
   1d21c:	add	sp, sp, #32
   1d220:	ldrd	r4, [sp]
   1d224:	ldr	r6, [sp, #8]
   1d228:	ldr	lr, [sp, #12]
   1d22c:	add	sp, sp, #16
   1d230:	b	117c0 <fprintf@plt>
   1d234:	mov	r2, #5
   1d238:	movw	r1, #20256	; 0x4f20
   1d23c:	movt	r1, #3
   1d240:	mov	r0, #0
   1d244:	bl	11628 <dcgettext@plt>
   1d248:	ldr	r2, [r5]
   1d24c:	mov	r1, r0
   1d250:	mov	r0, r4
   1d254:	ldr	r3, [r5, #8]
   1d258:	ldr	ip, [r5, #12]
   1d25c:	str	r3, [sp, #48]	; 0x30
   1d260:	ldr	r3, [r5, #4]
   1d264:	str	ip, [sp, #52]	; 0x34
   1d268:	add	sp, sp, #32
   1d26c:	ldrd	r4, [sp]
   1d270:	ldr	r6, [sp, #8]
   1d274:	ldr	lr, [sp, #12]
   1d278:	add	sp, sp, #16
   1d27c:	b	117c0 <fprintf@plt>
   1d280:	mov	r2, #5
   1d284:	movw	r1, #20288	; 0x4f40
   1d288:	movt	r1, #3
   1d28c:	mov	r0, #0
   1d290:	bl	11628 <dcgettext@plt>
   1d294:	ldr	r2, [r5, #8]
   1d298:	mov	r1, r0
   1d29c:	mov	r0, r4
   1d2a0:	ldr	ip, [r5, #12]
   1d2a4:	ldr	r3, [r5, #16]
   1d2a8:	str	r2, [sp]
   1d2ac:	ldr	r2, [r5]
   1d2b0:	str	r3, [sp, #8]
   1d2b4:	ldr	r3, [r5, #4]
   1d2b8:	str	ip, [sp, #4]
   1d2bc:	bl	117c0 <fprintf@plt>
   1d2c0:	b	1d160 <__assert_fail@plt+0xb7c0>
   1d2c4:	mov	r2, #5
   1d2c8:	movw	r1, #20324	; 0x4f64
   1d2cc:	movt	r1, #3
   1d2d0:	mov	r0, #0
   1d2d4:	bl	11628 <dcgettext@plt>
   1d2d8:	ldr	ip, [r5, #8]
   1d2dc:	mov	r1, r0
   1d2e0:	mov	r0, r4
   1d2e4:	ldr	r3, [r5, #12]
   1d2e8:	ldr	r2, [r5, #20]
   1d2ec:	str	ip, [sp]
   1d2f0:	ldr	ip, [r5, #16]
   1d2f4:	str	r2, [sp, #12]
   1d2f8:	ldr	r2, [r5]
   1d2fc:	str	r3, [sp, #4]
   1d300:	ldr	r3, [r5, #4]
   1d304:	str	ip, [sp, #8]
   1d308:	bl	117c0 <fprintf@plt>
   1d30c:	b	1d160 <__assert_fail@plt+0xb7c0>
   1d310:	mov	r2, #5
   1d314:	movw	r1, #20364	; 0x4f8c
   1d318:	movt	r1, #3
   1d31c:	mov	r0, #0
   1d320:	bl	11628 <dcgettext@plt>
   1d324:	ldr	r3, [r5, #8]
   1d328:	mov	r1, r0
   1d32c:	mov	r0, r4
   1d330:	ldr	r2, [r5, #12]
   1d334:	ldr	ip, [r5, #24]
   1d338:	str	r3, [sp]
   1d33c:	ldr	r3, [r5, #16]
   1d340:	str	ip, [sp, #16]
   1d344:	ldr	ip, [r5, #20]
   1d348:	str	r2, [sp, #4]
   1d34c:	ldr	r2, [r5]
   1d350:	str	r3, [sp, #8]
   1d354:	ldr	r3, [r5, #4]
   1d358:	str	ip, [sp, #12]
   1d35c:	bl	117c0 <fprintf@plt>
   1d360:	b	1d160 <__assert_fail@plt+0xb7c0>
   1d364:	mov	r2, #5
   1d368:	movw	r1, #20408	; 0x4fb8
   1d36c:	movt	r1, #3
   1d370:	mov	r0, #0
   1d374:	bl	11628 <dcgettext@plt>
   1d378:	ldr	r2, [r5, #8]
   1d37c:	mov	r1, r0
   1d380:	mov	r0, r4
   1d384:	ldr	ip, [r5, #12]
   1d388:	ldr	r3, [r5, #28]
   1d38c:	str	r2, [sp]
   1d390:	ldr	r2, [r5, #16]
   1d394:	str	r3, [sp, #20]
   1d398:	ldr	r3, [r5, #24]
   1d39c:	str	ip, [sp, #4]
   1d3a0:	ldr	ip, [r5, #20]
   1d3a4:	str	r2, [sp, #8]
   1d3a8:	ldr	r2, [r5]
   1d3ac:	str	r3, [sp, #16]
   1d3b0:	ldr	r3, [r5, #4]
   1d3b4:	str	ip, [sp, #12]
   1d3b8:	bl	117c0 <fprintf@plt>
   1d3bc:	b	1d160 <__assert_fail@plt+0xb7c0>
   1d3c0:	movw	r1, #20508	; 0x501c
   1d3c4:	movt	r1, #3
   1d3c8:	b	1d108 <__assert_fail@plt+0xb768>
   1d3cc:	strd	r4, [sp, #-12]!
   1d3d0:	str	lr, [sp, #8]
   1d3d4:	sub	sp, sp, #12
   1d3d8:	ldr	r5, [sp, #24]
   1d3dc:	ldr	ip, [r5]
   1d3e0:	cmp	ip, #0
   1d3e4:	beq	1d400 <__assert_fail@plt+0xba60>
   1d3e8:	mov	lr, r5
   1d3ec:	mov	ip, #0
   1d3f0:	ldr	r4, [lr, #4]!
   1d3f4:	add	ip, ip, #1
   1d3f8:	cmp	r4, #0
   1d3fc:	bne	1d3f0 <__assert_fail@plt+0xba50>
   1d400:	stm	sp, {r5, ip}
   1d404:	bl	1d020 <__assert_fail@plt+0xb680>
   1d408:	add	sp, sp, #12
   1d40c:	ldrd	r4, [sp]
   1d410:	add	sp, sp, #8
   1d414:	pop	{pc}		; (ldr pc, [sp], #4)
   1d418:	push	{lr}		; (str lr, [sp, #-4]!)
   1d41c:	sub	sp, sp, #52	; 0x34
   1d420:	ldr	ip, [sp, #56]	; 0x38
   1d424:	ldr	lr, [ip]
   1d428:	cmp	lr, #0
   1d42c:	str	lr, [sp, #8]
   1d430:	beq	1d4c8 <__assert_fail@plt+0xbb28>
   1d434:	ldr	lr, [ip, #4]
   1d438:	cmp	lr, #0
   1d43c:	str	lr, [sp, #12]
   1d440:	beq	1d4dc <__assert_fail@plt+0xbb3c>
   1d444:	ldr	lr, [ip, #8]
   1d448:	cmp	lr, #0
   1d44c:	str	lr, [sp, #16]
   1d450:	beq	1d4e4 <__assert_fail@plt+0xbb44>
   1d454:	ldr	lr, [ip, #12]
   1d458:	cmp	lr, #0
   1d45c:	str	lr, [sp, #20]
   1d460:	beq	1d4ec <__assert_fail@plt+0xbb4c>
   1d464:	ldr	lr, [ip, #16]
   1d468:	cmp	lr, #0
   1d46c:	str	lr, [sp, #24]
   1d470:	beq	1d4f4 <__assert_fail@plt+0xbb54>
   1d474:	ldr	lr, [ip, #20]
   1d478:	cmp	lr, #0
   1d47c:	str	lr, [sp, #28]
   1d480:	beq	1d4fc <__assert_fail@plt+0xbb5c>
   1d484:	ldr	lr, [ip, #24]
   1d488:	cmp	lr, #0
   1d48c:	str	lr, [sp, #32]
   1d490:	beq	1d504 <__assert_fail@plt+0xbb64>
   1d494:	ldr	lr, [ip, #28]
   1d498:	cmp	lr, #0
   1d49c:	str	lr, [sp, #36]	; 0x24
   1d4a0:	beq	1d50c <__assert_fail@plt+0xbb6c>
   1d4a4:	ldr	lr, [ip, #32]
   1d4a8:	cmp	lr, #0
   1d4ac:	str	lr, [sp, #40]	; 0x28
   1d4b0:	beq	1d514 <__assert_fail@plt+0xbb74>
   1d4b4:	ldr	ip, [ip, #36]	; 0x24
   1d4b8:	cmp	ip, #0
   1d4bc:	str	ip, [sp, #44]	; 0x2c
   1d4c0:	movne	lr, #10
   1d4c4:	moveq	lr, #9
   1d4c8:	add	ip, sp, #8
   1d4cc:	stm	sp, {ip, lr}
   1d4d0:	bl	1d020 <__assert_fail@plt+0xb680>
   1d4d4:	add	sp, sp, #52	; 0x34
   1d4d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4dc:	mov	lr, #1
   1d4e0:	b	1d4c8 <__assert_fail@plt+0xbb28>
   1d4e4:	mov	lr, #2
   1d4e8:	b	1d4c8 <__assert_fail@plt+0xbb28>
   1d4ec:	mov	lr, #3
   1d4f0:	b	1d4c8 <__assert_fail@plt+0xbb28>
   1d4f4:	mov	lr, #4
   1d4f8:	b	1d4c8 <__assert_fail@plt+0xbb28>
   1d4fc:	mov	lr, #5
   1d500:	b	1d4c8 <__assert_fail@plt+0xbb28>
   1d504:	mov	lr, #6
   1d508:	b	1d4c8 <__assert_fail@plt+0xbb28>
   1d50c:	mov	lr, #7
   1d510:	b	1d4c8 <__assert_fail@plt+0xbb28>
   1d514:	mov	lr, #8
   1d518:	b	1d4c8 <__assert_fail@plt+0xbb28>
   1d51c:	push	{r3}		; (str r3, [sp, #-4]!)
   1d520:	push	{lr}		; (str lr, [sp, #-4]!)
   1d524:	sub	sp, sp, #56	; 0x38
   1d528:	ldr	ip, [sp, #64]	; 0x40
   1d52c:	add	r3, sp, #64	; 0x40
   1d530:	str	r3, [sp, #12]
   1d534:	cmp	ip, #0
   1d538:	str	ip, [sp, #16]
   1d53c:	beq	1d5d4 <__assert_fail@plt+0xbc34>
   1d540:	ldr	ip, [sp, #68]	; 0x44
   1d544:	cmp	ip, #0
   1d548:	str	ip, [sp, #20]
   1d54c:	beq	1d5f8 <__assert_fail@plt+0xbc58>
   1d550:	ldr	ip, [sp, #72]	; 0x48
   1d554:	cmp	ip, #0
   1d558:	str	ip, [sp, #24]
   1d55c:	beq	1d600 <__assert_fail@plt+0xbc60>
   1d560:	ldr	ip, [sp, #76]	; 0x4c
   1d564:	cmp	ip, #0
   1d568:	str	ip, [sp, #28]
   1d56c:	beq	1d608 <__assert_fail@plt+0xbc68>
   1d570:	ldr	ip, [sp, #80]	; 0x50
   1d574:	cmp	ip, #0
   1d578:	str	ip, [sp, #32]
   1d57c:	beq	1d610 <__assert_fail@plt+0xbc70>
   1d580:	ldr	ip, [sp, #84]	; 0x54
   1d584:	cmp	ip, #0
   1d588:	str	ip, [sp, #36]	; 0x24
   1d58c:	beq	1d618 <__assert_fail@plt+0xbc78>
   1d590:	ldr	ip, [sp, #88]	; 0x58
   1d594:	cmp	ip, #0
   1d598:	str	ip, [sp, #40]	; 0x28
   1d59c:	beq	1d620 <__assert_fail@plt+0xbc80>
   1d5a0:	ldr	ip, [sp, #92]	; 0x5c
   1d5a4:	cmp	ip, #0
   1d5a8:	str	ip, [sp, #44]	; 0x2c
   1d5ac:	beq	1d628 <__assert_fail@plt+0xbc88>
   1d5b0:	ldr	ip, [sp, #96]	; 0x60
   1d5b4:	cmp	ip, #0
   1d5b8:	str	ip, [sp, #48]	; 0x30
   1d5bc:	beq	1d630 <__assert_fail@plt+0xbc90>
   1d5c0:	ldr	r3, [sp, #100]	; 0x64
   1d5c4:	cmp	r3, #0
   1d5c8:	str	r3, [sp, #52]	; 0x34
   1d5cc:	movne	ip, #10
   1d5d0:	moveq	ip, #9
   1d5d4:	ldr	r3, [sp, #60]	; 0x3c
   1d5d8:	add	lr, sp, #16
   1d5dc:	str	lr, [sp]
   1d5e0:	str	ip, [sp, #4]
   1d5e4:	bl	1d020 <__assert_fail@plt+0xb680>
   1d5e8:	add	sp, sp, #56	; 0x38
   1d5ec:	pop	{lr}		; (ldr lr, [sp], #4)
   1d5f0:	add	sp, sp, #4
   1d5f4:	bx	lr
   1d5f8:	mov	ip, #1
   1d5fc:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d600:	mov	ip, #2
   1d604:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d608:	mov	ip, #3
   1d60c:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d610:	mov	ip, #4
   1d614:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d618:	mov	ip, #5
   1d61c:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d620:	mov	ip, #6
   1d624:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d628:	mov	ip, #7
   1d62c:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d630:	mov	ip, #8
   1d634:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d638:	movw	r3, #25116	; 0x621c
   1d63c:	movt	r3, #4
   1d640:	str	r4, [sp, #-8]!
   1d644:	mov	r0, #10
   1d648:	ldr	r1, [r3]
   1d64c:	str	lr, [sp, #4]
   1d650:	bl	118bc <fputc@plt>
   1d654:	mov	r2, #5
   1d658:	movw	r1, #20568	; 0x5058
   1d65c:	movt	r1, #3
   1d660:	mov	r0, #0
   1d664:	bl	11628 <dcgettext@plt>
   1d668:	movw	r1, #19312	; 0x4b70
   1d66c:	movt	r1, #3
   1d670:	bl	11550 <printf@plt>
   1d674:	mov	r2, #5
   1d678:	movw	r1, #20588	; 0x506c
   1d67c:	movt	r1, #3
   1d680:	mov	r0, #0
   1d684:	bl	11628 <dcgettext@plt>
   1d688:	movw	r2, #19272	; 0x4b48
   1d68c:	movt	r2, #3
   1d690:	movw	r1, #18688	; 0x4900
   1d694:	movt	r1, #3
   1d698:	bl	11550 <printf@plt>
   1d69c:	movw	r1, #20608	; 0x5080
   1d6a0:	movt	r1, #3
   1d6a4:	mov	r2, #5
   1d6a8:	mov	r0, #0
   1d6ac:	bl	11628 <dcgettext@plt>
   1d6b0:	movw	r1, #20648	; 0x50a8
   1d6b4:	movt	r1, #3
   1d6b8:	ldr	r4, [sp]
   1d6bc:	ldr	lr, [sp, #4]
   1d6c0:	add	sp, sp, #8
   1d6c4:	b	11550 <printf@plt>
   1d6c8:	strd	r4, [sp, #-16]!
   1d6cc:	mov	r4, r0
   1d6d0:	mov	r5, r2
   1d6d4:	str	r6, [sp, #8]
   1d6d8:	mov	r6, r1
   1d6dc:	str	lr, [sp, #12]
   1d6e0:	bl	1f1c8 <__assert_fail@plt+0xd828>
   1d6e4:	cmp	r0, #0
   1d6e8:	beq	1d6fc <__assert_fail@plt+0xbd5c>
   1d6ec:	ldrd	r4, [sp]
   1d6f0:	ldr	r6, [sp, #8]
   1d6f4:	add	sp, sp, #12
   1d6f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6fc:	cmp	r4, #0
   1d700:	beq	1d710 <__assert_fail@plt+0xbd70>
   1d704:	cmp	r6, #0
   1d708:	cmpne	r5, #0
   1d70c:	beq	1d6ec <__assert_fail@plt+0xbd4c>
   1d710:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d714:	str	r4, [sp, #-8]!
   1d718:	str	lr, [sp, #4]
   1d71c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   1d720:	cmp	r0, #0
   1d724:	beq	1d734 <__assert_fail@plt+0xbd94>
   1d728:	ldr	r4, [sp]
   1d72c:	add	sp, sp, #4
   1d730:	pop	{pc}		; (ldr pc, [sp], #4)
   1d734:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d738:	str	r4, [sp, #-8]!
   1d73c:	str	lr, [sp, #4]
   1d740:	bl	1f0c4 <__assert_fail@plt+0xd724>
   1d744:	cmp	r0, #0
   1d748:	beq	1d758 <__assert_fail@plt+0xbdb8>
   1d74c:	ldr	r4, [sp]
   1d750:	add	sp, sp, #4
   1d754:	pop	{pc}		; (ldr pc, [sp], #4)
   1d758:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d75c:	str	r4, [sp, #-8]!
   1d760:	str	lr, [sp, #4]
   1d764:	bl	1f0c4 <__assert_fail@plt+0xd724>
   1d768:	cmp	r0, #0
   1d76c:	beq	1d77c <__assert_fail@plt+0xbddc>
   1d770:	ldr	r4, [sp]
   1d774:	add	sp, sp, #4
   1d778:	pop	{pc}		; (ldr pc, [sp], #4)
   1d77c:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d780:	strd	r4, [sp, #-16]!
   1d784:	mov	r5, r0
   1d788:	mov	r4, r1
   1d78c:	str	r6, [sp, #8]
   1d790:	str	lr, [sp, #12]
   1d794:	bl	1f170 <__assert_fail@plt+0xd7d0>
   1d798:	cmp	r0, #0
   1d79c:	beq	1d7b0 <__assert_fail@plt+0xbe10>
   1d7a0:	ldrd	r4, [sp]
   1d7a4:	ldr	r6, [sp, #8]
   1d7a8:	add	sp, sp, #12
   1d7ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7b0:	adds	r4, r4, #0
   1d7b4:	movne	r4, #1
   1d7b8:	cmp	r5, #0
   1d7bc:	moveq	r4, #1
   1d7c0:	cmp	r4, #0
   1d7c4:	beq	1d7a0 <__assert_fail@plt+0xbe00>
   1d7c8:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d7cc:	cmp	r1, #0
   1d7d0:	orreq	r1, r1, #1
   1d7d4:	str	r4, [sp, #-8]!
   1d7d8:	str	lr, [sp, #4]
   1d7dc:	bl	1f170 <__assert_fail@plt+0xd7d0>
   1d7e0:	cmp	r0, #0
   1d7e4:	beq	1d7f4 <__assert_fail@plt+0xbe54>
   1d7e8:	ldr	r4, [sp]
   1d7ec:	add	sp, sp, #4
   1d7f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7f4:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d7f8:	strd	r4, [sp, #-16]!
   1d7fc:	mov	r4, r0
   1d800:	mov	r5, r2
   1d804:	str	r6, [sp, #8]
   1d808:	mov	r6, r1
   1d80c:	str	lr, [sp, #12]
   1d810:	bl	1f1c8 <__assert_fail@plt+0xd828>
   1d814:	cmp	r0, #0
   1d818:	beq	1d82c <__assert_fail@plt+0xbe8c>
   1d81c:	ldrd	r4, [sp]
   1d820:	ldr	r6, [sp, #8]
   1d824:	add	sp, sp, #12
   1d828:	pop	{pc}		; (ldr pc, [sp], #4)
   1d82c:	cmp	r4, #0
   1d830:	beq	1d840 <__assert_fail@plt+0xbea0>
   1d834:	cmp	r6, #0
   1d838:	cmpne	r5, #0
   1d83c:	beq	1d81c <__assert_fail@plt+0xbe7c>
   1d840:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d844:	cmp	r2, #0
   1d848:	cmpne	r1, #0
   1d84c:	str	r4, [sp, #-8]!
   1d850:	moveq	r2, #1
   1d854:	str	lr, [sp, #4]
   1d858:	moveq	r1, r2
   1d85c:	bl	1f1c8 <__assert_fail@plt+0xd828>
   1d860:	cmp	r0, #0
   1d864:	beq	1d874 <__assert_fail@plt+0xbed4>
   1d868:	ldr	r4, [sp]
   1d86c:	add	sp, sp, #4
   1d870:	pop	{pc}		; (ldr pc, [sp], #4)
   1d874:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d878:	mov	r2, r1
   1d87c:	mov	r1, r0
   1d880:	str	r4, [sp, #-8]!
   1d884:	mov	r0, #0
   1d888:	str	lr, [sp, #4]
   1d88c:	bl	1f1c8 <__assert_fail@plt+0xd828>
   1d890:	cmp	r0, #0
   1d894:	beq	1d8a4 <__assert_fail@plt+0xbf04>
   1d898:	ldr	r4, [sp]
   1d89c:	add	sp, sp, #4
   1d8a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8a4:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d8a8:	cmp	r1, #0
   1d8ac:	cmpne	r0, #0
   1d8b0:	str	r4, [sp, #-8]!
   1d8b4:	moveq	r2, #1
   1d8b8:	movne	r2, r1
   1d8bc:	str	lr, [sp, #4]
   1d8c0:	movne	r1, r0
   1d8c4:	moveq	r1, r2
   1d8c8:	mov	r0, #0
   1d8cc:	bl	1f1c8 <__assert_fail@plt+0xd828>
   1d8d0:	cmp	r0, #0
   1d8d4:	beq	1d8e4 <__assert_fail@plt+0xbf44>
   1d8d8:	ldr	r4, [sp]
   1d8dc:	add	sp, sp, #4
   1d8e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8e4:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d8e8:	cmp	r0, #0
   1d8ec:	strd	r4, [sp, #-16]!
   1d8f0:	mov	r5, r1
   1d8f4:	ldr	r4, [r1]
   1d8f8:	str	r6, [sp, #8]
   1d8fc:	str	lr, [sp, #12]
   1d900:	beq	1d948 <__assert_fail@plt+0xbfa8>
   1d904:	lsr	r3, r4, #1
   1d908:	add	r3, r3, #1
   1d90c:	adds	r4, r4, r3
   1d910:	bcs	1d944 <__assert_fail@plt+0xbfa4>
   1d914:	mov	r2, #1
   1d918:	mov	r1, r4
   1d91c:	bl	1f1c8 <__assert_fail@plt+0xd828>
   1d920:	cmp	r0, #0
   1d924:	beq	1d93c <__assert_fail@plt+0xbf9c>
   1d928:	ldr	r6, [sp, #8]
   1d92c:	str	r4, [r5]
   1d930:	ldrd	r4, [sp]
   1d934:	add	sp, sp, #12
   1d938:	pop	{pc}		; (ldr pc, [sp], #4)
   1d93c:	cmp	r4, #0
   1d940:	beq	1d928 <__assert_fail@plt+0xbf88>
   1d944:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d948:	cmp	r4, #0
   1d94c:	mov	r2, #1
   1d950:	moveq	r4, #64	; 0x40
   1d954:	mov	r1, r4
   1d958:	bl	1f1c8 <__assert_fail@plt+0xd828>
   1d95c:	cmp	r0, #0
   1d960:	bne	1d928 <__assert_fail@plt+0xbf88>
   1d964:	b	1d944 <__assert_fail@plt+0xbfa4>
   1d968:	cmp	r0, #0
   1d96c:	strd	r4, [sp, #-16]!
   1d970:	mov	r5, r1
   1d974:	ldr	r4, [r1]
   1d978:	str	r6, [sp, #8]
   1d97c:	mov	r6, r2
   1d980:	str	lr, [sp, #12]
   1d984:	beq	1d9cc <__assert_fail@plt+0xc02c>
   1d988:	lsr	r3, r4, #1
   1d98c:	add	r3, r3, #1
   1d990:	adds	r4, r4, r3
   1d994:	bcs	1d9c8 <__assert_fail@plt+0xc028>
   1d998:	mov	r1, r4
   1d99c:	bl	1f1c8 <__assert_fail@plt+0xd828>
   1d9a0:	cmp	r0, #0
   1d9a4:	beq	1d9bc <__assert_fail@plt+0xc01c>
   1d9a8:	ldr	r6, [sp, #8]
   1d9ac:	str	r4, [r5]
   1d9b0:	ldrd	r4, [sp]
   1d9b4:	add	sp, sp, #12
   1d9b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9bc:	cmp	r4, #0
   1d9c0:	cmpne	r6, #0
   1d9c4:	beq	1d9a8 <__assert_fail@plt+0xc008>
   1d9c8:	bl	1dccc <__assert_fail@plt+0xc32c>
   1d9cc:	cmp	r4, #0
   1d9d0:	bne	1d9e4 <__assert_fail@plt+0xc044>
   1d9d4:	mov	r4, #64	; 0x40
   1d9d8:	udiv	r4, r4, r2
   1d9dc:	cmp	r2, #64	; 0x40
   1d9e0:	addhi	r4, r4, #1
   1d9e4:	mov	r2, r6
   1d9e8:	mov	r1, r4
   1d9ec:	mov	r0, #0
   1d9f0:	bl	1f1c8 <__assert_fail@plt+0xd828>
   1d9f4:	cmp	r0, #0
   1d9f8:	bne	1d9a8 <__assert_fail@plt+0xc008>
   1d9fc:	b	1d9c8 <__assert_fail@plt+0xc028>
   1da00:	ldr	ip, [r1]
   1da04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1da08:	strd	r6, [sp, #8]
   1da0c:	mov	r7, r1
   1da10:	mov	r6, r0
   1da14:	str	r8, [sp, #16]
   1da18:	mvn	r8, r3
   1da1c:	lsr	r8, r8, #31
   1da20:	str	lr, [sp, #20]
   1da24:	asr	r1, ip, #1
   1da28:	ldr	lr, [sp, #24]
   1da2c:	adds	r4, ip, r1
   1da30:	mvnvs	r4, #-2147483648	; 0x80000000
   1da34:	cmp	r3, r4
   1da38:	movge	r1, #0
   1da3c:	andlt	r1, r8, #1
   1da40:	cmp	r1, #0
   1da44:	movne	r4, r3
   1da48:	smull	r0, r1, r4, lr
   1da4c:	cmp	r1, r0, asr #31
   1da50:	bne	1db00 <__assert_fail@plt+0xc160>
   1da54:	cmp	r0, #63	; 0x3f
   1da58:	mov	r5, r0
   1da5c:	ble	1dacc <__assert_fail@plt+0xc12c>
   1da60:	cmp	r6, #0
   1da64:	sub	r1, r4, ip
   1da68:	streq	r6, [r7]
   1da6c:	cmp	r1, r2
   1da70:	bge	1daa0 <__assert_fail@plt+0xc100>
   1da74:	adds	r4, ip, r2
   1da78:	bvs	1dafc <__assert_fail@plt+0xc15c>
   1da7c:	cmp	r4, r3
   1da80:	movle	r3, #0
   1da84:	andgt	r3, r8, #1
   1da88:	cmp	r3, #0
   1da8c:	bne	1dafc <__assert_fail@plt+0xc15c>
   1da90:	smull	r0, r1, r4, lr
   1da94:	cmp	r1, r0, asr #31
   1da98:	mov	r5, r0
   1da9c:	bne	1dafc <__assert_fail@plt+0xc15c>
   1daa0:	mov	r1, r5
   1daa4:	mov	r0, r6
   1daa8:	bl	1f170 <__assert_fail@plt+0xd7d0>
   1daac:	cmp	r0, #0
   1dab0:	beq	1dae0 <__assert_fail@plt+0xc140>
   1dab4:	ldr	r8, [sp, #16]
   1dab8:	str	r4, [r7]
   1dabc:	ldrd	r4, [sp]
   1dac0:	ldrd	r6, [sp, #8]
   1dac4:	add	sp, sp, #20
   1dac8:	pop	{pc}		; (ldr pc, [sp], #4)
   1dacc:	mov	r0, #64	; 0x40
   1dad0:	sdiv	r4, r0, lr
   1dad4:	mls	r5, lr, r4, r0
   1dad8:	sub	r5, r0, r5
   1dadc:	b	1da60 <__assert_fail@plt+0xc0c0>
   1dae0:	adds	r5, r5, #0
   1dae4:	movne	r5, #1
   1dae8:	cmp	r6, #0
   1daec:	movne	r6, r5
   1daf0:	moveq	r6, #1
   1daf4:	cmp	r6, #0
   1daf8:	beq	1dab4 <__assert_fail@plt+0xc114>
   1dafc:	bl	1dccc <__assert_fail@plt+0xc32c>
   1db00:	mvn	r0, #-2147483648	; 0x80000000
   1db04:	b	1dad0 <__assert_fail@plt+0xc130>
   1db08:	mov	r1, #1
   1db0c:	str	r4, [sp, #-8]!
   1db10:	str	lr, [sp, #4]
   1db14:	bl	1ecd8 <__assert_fail@plt+0xd338>
   1db18:	cmp	r0, #0
   1db1c:	beq	1db2c <__assert_fail@plt+0xc18c>
   1db20:	ldr	r4, [sp]
   1db24:	add	sp, sp, #4
   1db28:	pop	{pc}		; (ldr pc, [sp], #4)
   1db2c:	bl	1dccc <__assert_fail@plt+0xc32c>
   1db30:	mov	r1, #1
   1db34:	str	r4, [sp, #-8]!
   1db38:	str	lr, [sp, #4]
   1db3c:	bl	1ecd8 <__assert_fail@plt+0xd338>
   1db40:	cmp	r0, #0
   1db44:	beq	1db54 <__assert_fail@plt+0xc1b4>
   1db48:	ldr	r4, [sp]
   1db4c:	add	sp, sp, #4
   1db50:	pop	{pc}		; (ldr pc, [sp], #4)
   1db54:	bl	1dccc <__assert_fail@plt+0xc32c>
   1db58:	str	r4, [sp, #-8]!
   1db5c:	str	lr, [sp, #4]
   1db60:	bl	1ecd8 <__assert_fail@plt+0xd338>
   1db64:	cmp	r0, #0
   1db68:	beq	1db78 <__assert_fail@plt+0xc1d8>
   1db6c:	ldr	r4, [sp]
   1db70:	add	sp, sp, #4
   1db74:	pop	{pc}		; (ldr pc, [sp], #4)
   1db78:	bl	1dccc <__assert_fail@plt+0xc32c>
   1db7c:	str	r4, [sp, #-8]!
   1db80:	str	lr, [sp, #4]
   1db84:	bl	1ecd8 <__assert_fail@plt+0xd338>
   1db88:	cmp	r0, #0
   1db8c:	beq	1db9c <__assert_fail@plt+0xc1fc>
   1db90:	ldr	r4, [sp]
   1db94:	add	sp, sp, #4
   1db98:	pop	{pc}		; (ldr pc, [sp], #4)
   1db9c:	bl	1dccc <__assert_fail@plt+0xc32c>
   1dba0:	strd	r4, [sp, #-16]!
   1dba4:	mov	r4, r1
   1dba8:	str	r6, [sp, #8]
   1dbac:	mov	r6, r0
   1dbb0:	mov	r0, r1
   1dbb4:	str	lr, [sp, #12]
   1dbb8:	bl	1f0c4 <__assert_fail@plt+0xd724>
   1dbbc:	subs	r5, r0, #0
   1dbc0:	beq	1dbe4 <__assert_fail@plt+0xc244>
   1dbc4:	mov	r2, r4
   1dbc8:	mov	r1, r6
   1dbcc:	bl	115d4 <memcpy@plt>
   1dbd0:	mov	r0, r5
   1dbd4:	ldrd	r4, [sp]
   1dbd8:	ldr	r6, [sp, #8]
   1dbdc:	add	sp, sp, #12
   1dbe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbe4:	bl	1dccc <__assert_fail@plt+0xc32c>
   1dbe8:	strd	r4, [sp, #-16]!
   1dbec:	mov	r4, r1
   1dbf0:	str	r6, [sp, #8]
   1dbf4:	mov	r6, r0
   1dbf8:	mov	r0, r1
   1dbfc:	str	lr, [sp, #12]
   1dc00:	bl	1f0c4 <__assert_fail@plt+0xd724>
   1dc04:	subs	r5, r0, #0
   1dc08:	beq	1dc2c <__assert_fail@plt+0xc28c>
   1dc0c:	mov	r2, r4
   1dc10:	mov	r1, r6
   1dc14:	bl	115d4 <memcpy@plt>
   1dc18:	mov	r0, r5
   1dc1c:	ldrd	r4, [sp]
   1dc20:	ldr	r6, [sp, #8]
   1dc24:	add	sp, sp, #12
   1dc28:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc2c:	bl	1dccc <__assert_fail@plt+0xc32c>
   1dc30:	strd	r4, [sp, #-16]!
   1dc34:	mov	r4, r1
   1dc38:	str	r6, [sp, #8]
   1dc3c:	mov	r6, r0
   1dc40:	add	r0, r1, #1
   1dc44:	str	lr, [sp, #12]
   1dc48:	bl	1f0c4 <__assert_fail@plt+0xd724>
   1dc4c:	subs	r5, r0, #0
   1dc50:	beq	1dc7c <__assert_fail@plt+0xc2dc>
   1dc54:	mov	r3, #0
   1dc58:	mov	r1, r6
   1dc5c:	mov	r2, r4
   1dc60:	strb	r3, [r5, r4]
   1dc64:	bl	115d4 <memcpy@plt>
   1dc68:	mov	r0, r5
   1dc6c:	ldrd	r4, [sp]
   1dc70:	ldr	r6, [sp, #8]
   1dc74:	add	sp, sp, #12
   1dc78:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc7c:	bl	1dccc <__assert_fail@plt+0xc32c>
   1dc80:	strd	r4, [sp, #-16]!
   1dc84:	str	r6, [sp, #8]
   1dc88:	mov	r6, r0
   1dc8c:	str	lr, [sp, #12]
   1dc90:	bl	117a8 <strlen@plt>
   1dc94:	add	r4, r0, #1
   1dc98:	mov	r0, r4
   1dc9c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   1dca0:	subs	r5, r0, #0
   1dca4:	beq	1dcc8 <__assert_fail@plt+0xc328>
   1dca8:	mov	r2, r4
   1dcac:	mov	r1, r6
   1dcb0:	bl	115d4 <memcpy@plt>
   1dcb4:	mov	r0, r5
   1dcb8:	ldrd	r4, [sp]
   1dcbc:	ldr	r6, [sp, #8]
   1dcc0:	add	sp, sp, #12
   1dcc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dcc8:	bl	1dccc <__assert_fail@plt+0xc32c>
   1dccc:	movw	r3, #25020	; 0x61bc
   1dcd0:	movt	r3, #4
   1dcd4:	str	r4, [sp, #-8]!
   1dcd8:	ldr	r4, [r3]
   1dcdc:	mov	r2, #5
   1dce0:	movw	r1, #20728	; 0x50f8
   1dce4:	movt	r1, #3
   1dce8:	mov	r0, #0
   1dcec:	str	lr, [sp, #4]
   1dcf0:	bl	11628 <dcgettext@plt>
   1dcf4:	mov	r3, r0
   1dcf8:	movw	r2, #19400	; 0x4bc8
   1dcfc:	movt	r2, #3
   1dd00:	mov	r1, #0
   1dd04:	mov	r0, r4
   1dd08:	bl	116d0 <error@plt>
   1dd0c:	bl	11964 <abort@plt>
   1dd10:	sub	r0, r0, #1
   1dd14:	movw	ip, #25020	; 0x61bc
   1dd18:	movt	ip, #4
   1dd1c:	cmp	r0, #3
   1dd20:	push	{lr}		; (str lr, [sp, #-4]!)
   1dd24:	sub	sp, sp, #20
   1dd28:	ldr	r5, [ip]
   1dd2c:	bhi	1dd7c <__assert_fail@plt+0xc3dc>
   1dd30:	movw	ip, #20748	; 0x510c
   1dd34:	movt	ip, #3
   1dd38:	cmp	r1, #0
   1dd3c:	ldr	r0, [ip, r0, lsl #2]
   1dd40:	blt	1dd80 <__assert_fail@plt+0xc3e0>
   1dd44:	ldr	r6, [r3, r1, lsl #4]
   1dd48:	movw	r4, #20764	; 0x511c
   1dd4c:	movt	r4, #3
   1dd50:	mov	r1, r0
   1dd54:	mov	r2, #5
   1dd58:	mov	r0, #0
   1dd5c:	bl	11628 <dcgettext@plt>
   1dd60:	ldr	ip, [sp, #24]
   1dd64:	mov	r2, r0
   1dd68:	mov	r3, r4
   1dd6c:	mov	r0, r5
   1dd70:	mov	r1, #0
   1dd74:	stm	sp, {r6, ip}
   1dd78:	bl	116d0 <error@plt>
   1dd7c:	bl	11964 <abort@plt>
   1dd80:	mov	r3, #0
   1dd84:	movw	r4, #20764	; 0x511c
   1dd88:	movt	r4, #3
   1dd8c:	add	r6, sp, #12
   1dd90:	strb	r2, [sp, #12]
   1dd94:	sub	r4, r4, r1
   1dd98:	strb	r3, [sp, #13]
   1dd9c:	b	1dd50 <__assert_fail@plt+0xc3b0>
   1dda0:	cmp	r2, #36	; 0x24
   1dda4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dda8:	strd	r6, [sp, #8]
   1ddac:	strd	r8, [sp, #16]
   1ddb0:	strd	sl, [sp, #24]
   1ddb4:	str	lr, [sp, #32]
   1ddb8:	sub	sp, sp, #28
   1ddbc:	bhi	1ecb8 <__assert_fail@plt+0xd318>
   1ddc0:	cmp	r1, #0
   1ddc4:	mov	r6, r2
   1ddc8:	mov	r5, r1
   1ddcc:	mov	sl, r0
   1ddd0:	addeq	r5, sp, #20
   1ddd4:	mov	r9, r3
   1ddd8:	bl	117d8 <__errno_location@plt>
   1dddc:	mov	r3, #0
   1dde0:	mov	fp, r0
   1dde4:	str	r3, [r0]
   1dde8:	ldrb	r4, [sl]
   1ddec:	bl	11778 <__ctype_b_loc@plt>
   1ddf0:	ldr	r2, [r0]
   1ddf4:	lsl	r3, r4, #1
   1ddf8:	ldrh	r3, [r2, r3]
   1ddfc:	tst	r3, #8192	; 0x2000
   1de00:	beq	1de1c <__assert_fail@plt+0xc47c>
   1de04:	mov	r3, sl
   1de08:	ldrb	r4, [r3, #1]!
   1de0c:	lsl	r1, r4, #1
   1de10:	ldrh	r1, [r2, r1]
   1de14:	tst	r1, #8192	; 0x2000
   1de18:	bne	1de08 <__assert_fail@plt+0xc468>
   1de1c:	cmp	r4, #45	; 0x2d
   1de20:	beq	1debc <__assert_fail@plt+0xc51c>
   1de24:	mov	r2, r6
   1de28:	mov	r3, #0
   1de2c:	mov	r1, r5
   1de30:	mov	r0, sl
   1de34:	bl	115ec <__strtoull_internal@plt>
   1de38:	ldr	r8, [r5]
   1de3c:	mov	r6, r0
   1de40:	mov	r7, r1
   1de44:	cmp	r8, sl
   1de48:	beq	1dea4 <__assert_fail@plt+0xc504>
   1de4c:	ldr	r4, [fp]
   1de50:	cmp	r4, #0
   1de54:	bne	1de94 <__assert_fail@plt+0xc4f4>
   1de58:	ldr	r3, [sp, #64]	; 0x40
   1de5c:	cmp	r3, #0
   1de60:	beq	1de70 <__assert_fail@plt+0xc4d0>
   1de64:	ldrb	sl, [r8]
   1de68:	cmp	sl, #0
   1de6c:	bne	1e32c <__assert_fail@plt+0xc98c>
   1de70:	strd	r6, [r9]
   1de74:	mov	r0, r4
   1de78:	add	sp, sp, #28
   1de7c:	ldrd	r4, [sp]
   1de80:	ldrd	r6, [sp, #8]
   1de84:	ldrd	r8, [sp, #16]
   1de88:	ldrd	sl, [sp, #24]
   1de8c:	add	sp, sp, #32
   1de90:	pop	{pc}		; (ldr pc, [sp], #4)
   1de94:	cmp	r4, #34	; 0x22
   1de98:	bne	1debc <__assert_fail@plt+0xc51c>
   1de9c:	mov	r4, #1
   1dea0:	b	1de58 <__assert_fail@plt+0xc4b8>
   1dea4:	ldr	r3, [sp, #64]	; 0x40
   1dea8:	cmp	r3, #0
   1deac:	beq	1debc <__assert_fail@plt+0xc51c>
   1deb0:	ldrb	sl, [sl]
   1deb4:	cmp	sl, #0
   1deb8:	bne	1dec4 <__assert_fail@plt+0xc524>
   1debc:	mov	r4, #4
   1dec0:	b	1de74 <__assert_fail@plt+0xc4d4>
   1dec4:	mov	r1, sl
   1dec8:	mov	r0, r3
   1decc:	bl	117b4 <strchr@plt>
   1ded0:	cmp	r0, #0
   1ded4:	movne	r4, #0
   1ded8:	movne	r6, #1
   1dedc:	movne	r7, #0
   1dee0:	beq	1debc <__assert_fail@plt+0xc51c>
   1dee4:	sub	fp, sl, #69	; 0x45
   1dee8:	cmp	fp, #47	; 0x2f
   1deec:	ldrls	pc, [pc, fp, lsl #2]
   1def0:	b	1e0b0 <__assert_fail@plt+0xc710>
   1def4:			; <UNDEFINED> instruction: 0x0001dfb4
   1def8:	strheq	lr, [r1], -r0
   1defc:			; <UNDEFINED> instruction: 0x0001dfb4
   1df00:	strheq	lr, [r1], -r0
   1df04:	strheq	lr, [r1], -r0
   1df08:	strheq	lr, [r1], -r0
   1df0c:			; <UNDEFINED> instruction: 0x0001dfb4
   1df10:	strheq	lr, [r1], -r0
   1df14:			; <UNDEFINED> instruction: 0x0001dfb4
   1df18:	strheq	lr, [r1], -r0
   1df1c:	strheq	lr, [r1], -r0
   1df20:			; <UNDEFINED> instruction: 0x0001dfb4
   1df24:	strheq	lr, [r1], -r0
   1df28:	strheq	lr, [r1], -r0
   1df2c:	strheq	lr, [r1], -r0
   1df30:			; <UNDEFINED> instruction: 0x0001dfb4
   1df34:	strheq	lr, [r1], -r0
   1df38:	strheq	lr, [r1], -r0
   1df3c:	strheq	lr, [r1], -r0
   1df40:	strheq	lr, [r1], -r0
   1df44:			; <UNDEFINED> instruction: 0x0001dfb4
   1df48:			; <UNDEFINED> instruction: 0x0001dfb4
   1df4c:	strheq	lr, [r1], -r0
   1df50:	strheq	lr, [r1], -r0
   1df54:	strheq	lr, [r1], -r0
   1df58:	strheq	lr, [r1], -r0
   1df5c:	strheq	lr, [r1], -r0
   1df60:	strheq	lr, [r1], -r0
   1df64:	strheq	lr, [r1], -r0
   1df68:	strheq	lr, [r1], -r0
   1df6c:	strheq	lr, [r1], -r0
   1df70:	strheq	lr, [r1], -r0
   1df74:	strheq	lr, [r1], -r0
   1df78:	strheq	lr, [r1], -r0
   1df7c:			; <UNDEFINED> instruction: 0x0001dfb4
   1df80:	strheq	lr, [r1], -r0
   1df84:	strheq	lr, [r1], -r0
   1df88:	strheq	lr, [r1], -r0
   1df8c:			; <UNDEFINED> instruction: 0x0001dfb4
   1df90:	strheq	lr, [r1], -r0
   1df94:			; <UNDEFINED> instruction: 0x0001dfb4
   1df98:	strheq	lr, [r1], -r0
   1df9c:	strheq	lr, [r1], -r0
   1dfa0:	strheq	lr, [r1], -r0
   1dfa4:	strheq	lr, [r1], -r0
   1dfa8:	strheq	lr, [r1], -r0
   1dfac:	strheq	lr, [r1], -r0
   1dfb0:			; <UNDEFINED> instruction: 0x0001dfb4
   1dfb4:	mov	r1, #48	; 0x30
   1dfb8:	ldr	r0, [sp, #64]	; 0x40
   1dfbc:	bl	117b4 <strchr@plt>
   1dfc0:	subs	lr, r0, #0
   1dfc4:	beq	1e834 <__assert_fail@plt+0xce94>
   1dfc8:	ldrb	r3, [r8, #1]
   1dfcc:	cmp	r3, #68	; 0x44
   1dfd0:	beq	1e844 <__assert_fail@plt+0xcea4>
   1dfd4:	cmp	r3, #105	; 0x69
   1dfd8:	beq	1e354 <__assert_fail@plt+0xc9b4>
   1dfdc:	cmp	r3, #66	; 0x42
   1dfe0:	beq	1e844 <__assert_fail@plt+0xcea4>
   1dfe4:	cmp	fp, #47	; 0x2f
   1dfe8:	ldrls	pc, [pc, fp, lsl #2]
   1dfec:	b	1e2e8 <__assert_fail@plt+0xc948>
   1dff0:	strdeq	lr, [r1], -r4
   1dff4:	andeq	lr, r1, r8, ror #5
   1dff8:	andeq	lr, r1, ip, asr r6
   1dffc:	andeq	lr, r1, r8, ror #5
   1e000:	andeq	lr, r1, r8, ror #5
   1e004:	andeq	lr, r1, r8, ror #5
   1e008:	strdeq	lr, [r1], -r0
   1e00c:	andeq	lr, r1, r8, ror #5
   1e010:	strdeq	lr, [r1], -r4
   1e014:	andeq	lr, r1, r8, ror #5
   1e018:	andeq	lr, r1, r8, ror #5
   1e01c:	andeq	lr, r1, r8, lsr r5
   1e020:	andeq	lr, r1, r8, ror #5
   1e024:	andeq	lr, r1, r8, ror #5
   1e028:	andeq	lr, r1, r8, ror #5
   1e02c:	andeq	lr, r1, r0, lsl #10
   1e030:	andeq	lr, r1, r8, ror #5
   1e034:	andeq	lr, r1, r8, ror #5
   1e038:	andeq	lr, r1, r8, ror #5
   1e03c:	andeq	lr, r1, r8, ror #5
   1e040:			; <UNDEFINED> instruction: 0x0001e3b8
   1e044:	andeq	lr, r1, r8, lsr #3
   1e048:	andeq	lr, r1, r8, ror #5
   1e04c:	andeq	lr, r1, r8, ror #5
   1e050:	andeq	lr, r1, r8, ror #5
   1e054:	andeq	lr, r1, r8, ror #5
   1e058:	andeq	lr, r1, r8, ror #5
   1e05c:	andeq	lr, r1, r8, ror #5
   1e060:	andeq	lr, r1, r8, ror #5
   1e064:	andeq	lr, r1, ip, lsl #7
   1e068:	andeq	lr, r1, r8, lsl r8
   1e06c:	andeq	lr, r1, r8, ror #5
   1e070:	andeq	lr, r1, r8, ror #5
   1e074:	andeq	lr, r1, r8, ror #5
   1e078:	andeq	lr, r1, ip, asr r6
   1e07c:	andeq	lr, r1, r8, ror #5
   1e080:	andeq	lr, r1, r8, ror #5
   1e084:	andeq	lr, r1, r8, ror #5
   1e088:	strdeq	lr, [r1], -r0
   1e08c:	andeq	lr, r1, r8, ror #5
   1e090:	strdeq	lr, [r1], -r4
   1e094:	andeq	lr, r1, r8, ror #5
   1e098:	andeq	lr, r1, r8, ror #5
   1e09c:	andeq	lr, r1, r8, ror #5
   1e0a0:	andeq	lr, r1, r8, ror #5
   1e0a4:	andeq	lr, r1, r8, ror #5
   1e0a8:	andeq	lr, r1, r8, ror #5
   1e0ac:	andeq	lr, r1, r0, lsl #10
   1e0b0:	mov	r3, #1
   1e0b4:	mov	ip, #1024	; 0x400
   1e0b8:	mov	lr, #0
   1e0bc:	str	r3, [sp, #4]
   1e0c0:	sub	sl, sl, #66	; 0x42
   1e0c4:	cmp	sl, #53	; 0x35
   1e0c8:	ldrls	pc, [pc, sl, lsl #2]
   1e0cc:	b	1e2e8 <__assert_fail@plt+0xc948>
   1e0d0:	strdeq	lr, [r1], -r4
   1e0d4:	andeq	lr, r1, r8, ror #5
   1e0d8:	andeq	lr, r1, r8, ror #5
   1e0dc:	andeq	lr, r1, r4, lsl #14
   1e0e0:	andeq	lr, r1, r8, ror #5
   1e0e4:	andeq	lr, r1, ip, ror #12
   1e0e8:	andeq	lr, r1, r8, ror #5
   1e0ec:	andeq	lr, r1, r8, ror #5
   1e0f0:	andeq	lr, r1, r8, ror #5
   1e0f4:	andeq	lr, r1, r0, lsl #6
   1e0f8:	andeq	lr, r1, r8, ror #5
   1e0fc:	andeq	lr, r1, r4, lsl #12
   1e100:	andeq	lr, r1, r8, ror #5
   1e104:	andeq	lr, r1, r8, ror #5
   1e108:	andeq	lr, r1, r8, asr #10
   1e10c:	andeq	lr, r1, r8, ror #5
   1e110:	andeq	lr, r1, r8, ror #5
   1e114:	andeq	lr, r1, r8, ror #5
   1e118:	andeq	lr, r1, r0, lsl r5
   1e11c:	andeq	lr, r1, r8, ror #5
   1e120:	andeq	lr, r1, r8, ror #5
   1e124:	andeq	lr, r1, r8, ror #5
   1e128:	andeq	lr, r1, r8, ror #5
   1e12c:	andeq	lr, r1, r8, asr #7
   1e130:			; <UNDEFINED> instruction: 0x0001e1b8
   1e134:	andeq	lr, r1, r8, ror #5
   1e138:	andeq	lr, r1, r8, ror #5
   1e13c:	andeq	lr, r1, r8, ror #5
   1e140:	andeq	lr, r1, r8, ror #5
   1e144:	andeq	lr, r1, r8, ror #5
   1e148:	andeq	lr, r1, r8, ror #5
   1e14c:	andeq	lr, r1, r8, ror #5
   1e150:	muleq	r1, r4, r3
   1e154:	ldrdeq	lr, [r1], -r0
   1e158:	andeq	lr, r1, r8, ror #5
   1e15c:	andeq	lr, r1, r8, ror #5
   1e160:	andeq	lr, r1, r8, ror #5
   1e164:	andeq	lr, r1, ip, ror #12
   1e168:	andeq	lr, r1, r8, ror #5
   1e16c:	andeq	lr, r1, r8, ror #5
   1e170:	andeq	lr, r1, r8, ror #5
   1e174:	andeq	lr, r1, r0, lsl #6
   1e178:	andeq	lr, r1, r8, ror #5
   1e17c:	andeq	lr, r1, r4, lsl #12
   1e180:	andeq	lr, r1, r8, ror #5
   1e184:	andeq	lr, r1, r8, ror #5
   1e188:	andeq	lr, r1, r8, ror #5
   1e18c:	andeq	lr, r1, r8, ror #5
   1e190:	andeq	lr, r1, r8, ror #5
   1e194:	andeq	lr, r1, r8, ror #5
   1e198:	andeq	lr, r1, r0, lsl r5
   1e19c:	andeq	lr, r1, r8, ror #5
   1e1a0:	andeq	lr, r1, r8, ror #5
   1e1a4:	andeq	lr, r1, r4, ror r3
   1e1a8:	mov	r3, #1
   1e1ac:	mov	ip, #1024	; 0x400
   1e1b0:	mov	lr, #0
   1e1b4:	str	r3, [sp, #4]
   1e1b8:	cmp	r7, #0
   1e1bc:	mov	r0, #0
   1e1c0:	mov	r1, #0
   1e1c4:	bne	1e950 <__assert_fail@plt+0xcfb0>
   1e1c8:	orrs	r3, r0, r1
   1e1cc:	bne	1e824 <__assert_fail@plt+0xce84>
   1e1d0:	mul	r3, ip, r7
   1e1d4:	mov	sl, r0
   1e1d8:	mov	fp, r1
   1e1dc:	umull	r0, r1, ip, r6
   1e1e0:	mla	r6, lr, r6, r3
   1e1e4:	add	r6, r6, r1
   1e1e8:	cmp	r6, #0
   1e1ec:	mov	r1, r6
   1e1f0:	bne	1eb30 <__assert_fail@plt+0xd190>
   1e1f4:	orrs	r3, sl, fp
   1e1f8:	bne	1e824 <__assert_fail@plt+0xce84>
   1e1fc:	mul	r3, ip, r1
   1e200:	umull	r6, r7, ip, r0
   1e204:	mla	r3, lr, r0, r3
   1e208:	add	r1, r3, r7
   1e20c:	cmp	r1, #0
   1e210:	mov	r7, r1
   1e214:	bne	1eb08 <__assert_fail@plt+0xd168>
   1e218:	orrs	r3, sl, fp
   1e21c:	bne	1e824 <__assert_fail@plt+0xce84>
   1e220:	mul	r3, ip, r7
   1e224:	umull	r0, r1, ip, r6
   1e228:	mla	r6, lr, r6, r3
   1e22c:	add	r6, r6, r1
   1e230:	cmp	r6, #0
   1e234:	mov	r1, r6
   1e238:	bne	1ea40 <__assert_fail@plt+0xd0a0>
   1e23c:	orrs	r3, sl, fp
   1e240:	bne	1e824 <__assert_fail@plt+0xce84>
   1e244:	mul	r3, ip, r1
   1e248:	umull	r6, r7, ip, r0
   1e24c:	mla	r3, lr, r0, r3
   1e250:	add	r1, r3, r7
   1e254:	cmp	r1, #0
   1e258:	mov	r7, r1
   1e25c:	bne	1ea18 <__assert_fail@plt+0xd078>
   1e260:	orrs	r3, sl, fp
   1e264:	bne	1e824 <__assert_fail@plt+0xce84>
   1e268:	mul	r3, ip, r7
   1e26c:	umull	r0, r1, ip, r6
   1e270:	mla	r6, lr, r6, r3
   1e274:	add	r6, r6, r1
   1e278:	cmp	r6, #0
   1e27c:	mov	r1, r6
   1e280:	bne	1e5cc <__assert_fail@plt+0xcc2c>
   1e284:	orrs	r3, sl, fp
   1e288:	bne	1e824 <__assert_fail@plt+0xce84>
   1e28c:	mul	r3, ip, r1
   1e290:	strd	sl, [sp, #8]
   1e294:	umull	sl, fp, ip, r0
   1e298:	mla	r3, lr, r0, r3
   1e29c:	add	r6, r3, fp
   1e2a0:	cmp	r6, #0
   1e2a4:	mov	fp, r6
   1e2a8:	bne	1e878 <__assert_fail@plt+0xced8>
   1e2ac:	ldrd	r2, [sp, #8]
   1e2b0:	orrs	r3, r2, r3
   1e2b4:	bne	1e824 <__assert_fail@plt+0xce84>
   1e2b8:	mul	r2, ip, fp
   1e2bc:	mov	r3, #0
   1e2c0:	umull	r6, r7, ip, sl
   1e2c4:	mla	lr, lr, sl, r2
   1e2c8:	add	r7, lr, r7
   1e2cc:	orr	r4, r4, r3
   1e2d0:	ldr	r2, [sp, #4]
   1e2d4:	add	r3, r8, r2
   1e2d8:	str	r3, [r5]
   1e2dc:	ldrb	r3, [r8, r2]
   1e2e0:	cmp	r3, #0
   1e2e4:	beq	1de70 <__assert_fail@plt+0xc4d0>
   1e2e8:	orr	r4, r4, #2
   1e2ec:	b	1de70 <__assert_fail@plt+0xc4d0>
   1e2f0:	mov	r3, #1
   1e2f4:	mov	ip, #1024	; 0x400
   1e2f8:	mov	lr, #0
   1e2fc:	str	r3, [sp, #4]
   1e300:	cmp	r7, #0
   1e304:	mov	r2, #0
   1e308:	mov	r3, #0
   1e30c:	bne	1e858 <__assert_fail@plt+0xceb8>
   1e310:	orrs	r3, r2, r3
   1e314:	bne	1e344 <__assert_fail@plt+0xc9a4>
   1e318:	mul	r3, r6, lr
   1e31c:	mla	r3, ip, r7, r3
   1e320:	umull	r6, r7, r6, ip
   1e324:	add	r7, r3, r7
   1e328:	b	1e2d0 <__assert_fail@plt+0xc930>
   1e32c:	mov	r0, r3
   1e330:	mov	r1, sl
   1e334:	bl	117b4 <strchr@plt>
   1e338:	cmp	r0, #0
   1e33c:	bne	1dee4 <__assert_fail@plt+0xc544>
   1e340:	b	1e2e8 <__assert_fail@plt+0xc948>
   1e344:	mov	r4, #1
   1e348:	mvn	r6, #0
   1e34c:	mvn	r7, #0
   1e350:	b	1e2d0 <__assert_fail@plt+0xc930>
   1e354:	ldrb	r3, [r8, #2]
   1e358:	mov	ip, #1024	; 0x400
   1e35c:	mov	lr, #0
   1e360:	cmp	r3, #66	; 0x42
   1e364:	movne	r3, #1
   1e368:	moveq	r3, #3
   1e36c:	str	r3, [sp, #4]
   1e370:	b	1e0c0 <__assert_fail@plt+0xc720>
   1e374:	lsr	r3, r7, #31
   1e378:	cmp	r3, #0
   1e37c:	bne	1e344 <__assert_fail@plt+0xc9a4>
   1e380:	adds	r6, r6, r6
   1e384:	adc	r7, r7, r7
   1e388:	b	1e2d0 <__assert_fail@plt+0xc930>
   1e38c:	mov	r3, #1
   1e390:	str	r3, [sp, #4]
   1e394:	lsr	r3, r7, #23
   1e398:	cmp	r3, #0
   1e39c:	bne	1e344 <__assert_fail@plt+0xc9a4>
   1e3a0:	lsl	r3, r7, #9
   1e3a4:	lsl	r2, r6, #9
   1e3a8:	orr	r3, r3, r6, lsr #23
   1e3ac:	mov	r6, r2
   1e3b0:	mov	r7, r3
   1e3b4:	b	1e2d0 <__assert_fail@plt+0xc930>
   1e3b8:	mov	r3, #1
   1e3bc:	mov	ip, #1024	; 0x400
   1e3c0:	mov	lr, #0
   1e3c4:	str	r3, [sp, #4]
   1e3c8:	cmp	r7, #0
   1e3cc:	mov	r0, #0
   1e3d0:	mov	r1, #0
   1e3d4:	bne	1e970 <__assert_fail@plt+0xcfd0>
   1e3d8:	orrs	r3, r0, r1
   1e3dc:	bne	1e824 <__assert_fail@plt+0xce84>
   1e3e0:	mul	r3, ip, r7
   1e3e4:	mov	sl, r0
   1e3e8:	mov	fp, r1
   1e3ec:	umull	r0, r1, ip, r6
   1e3f0:	mla	r6, lr, r6, r3
   1e3f4:	add	r6, r6, r1
   1e3f8:	cmp	r6, #0
   1e3fc:	mov	r1, r6
   1e400:	bne	1ea90 <__assert_fail@plt+0xd0f0>
   1e404:	orrs	r3, sl, fp
   1e408:	bne	1e824 <__assert_fail@plt+0xce84>
   1e40c:	mul	r3, ip, r1
   1e410:	umull	r6, r7, ip, r0
   1e414:	mla	r3, lr, r0, r3
   1e418:	add	r1, r3, r7
   1e41c:	cmp	r1, #0
   1e420:	mov	r7, r1
   1e424:	bne	1eae0 <__assert_fail@plt+0xd140>
   1e428:	orrs	r3, sl, fp
   1e42c:	bne	1e824 <__assert_fail@plt+0xce84>
   1e430:	mul	r3, ip, r7
   1e434:	umull	r0, r1, ip, r6
   1e438:	mla	r6, lr, r6, r3
   1e43c:	add	r6, r6, r1
   1e440:	cmp	r6, #0
   1e444:	mov	r1, r6
   1e448:	bne	1eab8 <__assert_fail@plt+0xd118>
   1e44c:	orrs	r3, sl, fp
   1e450:	bne	1e824 <__assert_fail@plt+0xce84>
   1e454:	mul	r3, ip, r1
   1e458:	umull	r6, r7, ip, r0
   1e45c:	mla	r3, lr, r0, r3
   1e460:	add	r1, r3, r7
   1e464:	cmp	r1, #0
   1e468:	mov	r7, r1
   1e46c:	bne	1ec48 <__assert_fail@plt+0xd2a8>
   1e470:	orrs	r3, sl, fp
   1e474:	bne	1e824 <__assert_fail@plt+0xce84>
   1e478:	mul	r3, ip, r7
   1e47c:	umull	r0, r1, ip, r6
   1e480:	mla	r6, lr, r6, r3
   1e484:	add	r6, r6, r1
   1e488:	cmp	r6, #0
   1e48c:	mov	r1, r6
   1e490:	bne	1e8e8 <__assert_fail@plt+0xcf48>
   1e494:	orrs	r3, sl, fp
   1e498:	bne	1e824 <__assert_fail@plt+0xce84>
   1e49c:	mul	r3, ip, r1
   1e4a0:	umull	r6, r7, ip, r0
   1e4a4:	mla	r3, lr, r0, r3
   1e4a8:	add	r1, r3, r7
   1e4ac:	cmp	r1, #0
   1e4b0:	mov	r7, r1
   1e4b4:	bne	1e8c0 <__assert_fail@plt+0xcf20>
   1e4b8:	orrs	r3, sl, fp
   1e4bc:	bne	1e824 <__assert_fail@plt+0xce84>
   1e4c0:	mul	r3, ip, r7
   1e4c4:	umull	r0, r1, ip, r6
   1e4c8:	mla	r3, lr, r6, r3
   1e4cc:	add	r3, r3, r1
   1e4d0:	cmp	r3, #0
   1e4d4:	mov	r1, r3
   1e4d8:	str	r3, [sp, #8]
   1e4dc:	bne	1e8a0 <__assert_fail@plt+0xcf00>
   1e4e0:	orrs	r3, sl, fp
   1e4e4:	bne	1e824 <__assert_fail@plt+0xce84>
   1e4e8:	mul	r2, ip, r1
   1e4ec:	mov	r3, #0
   1e4f0:	umull	r6, r7, ip, r0
   1e4f4:	mla	r0, lr, r0, r2
   1e4f8:	add	r7, r0, r7
   1e4fc:	b	1e2cc <__assert_fail@plt+0xc92c>
   1e500:	mov	r3, #1
   1e504:	mov	ip, #1024	; 0x400
   1e508:	mov	lr, #0
   1e50c:	str	r3, [sp, #4]
   1e510:	cmp	r7, #0
   1e514:	mov	r0, #0
   1e518:	mov	r1, #0
   1e51c:	bne	1e9d0 <__assert_fail@plt+0xd030>
   1e520:	orrs	r3, r0, r1
   1e524:	bne	1e824 <__assert_fail@plt+0xce84>
   1e528:	mul	r3, ip, r7
   1e52c:	mov	sl, r0
   1e530:	mov	fp, r1
   1e534:	b	1e47c <__assert_fail@plt+0xcadc>
   1e538:	mov	r3, #1
   1e53c:	mov	ip, #1024	; 0x400
   1e540:	mov	lr, #0
   1e544:	str	r3, [sp, #4]
   1e548:	cmp	r7, #0
   1e54c:	mov	r0, #0
   1e550:	mov	r1, #0
   1e554:	bne	1e9b0 <__assert_fail@plt+0xd010>
   1e558:	orrs	r3, r0, r1
   1e55c:	bne	1e824 <__assert_fail@plt+0xce84>
   1e560:	mul	r3, ip, r7
   1e564:	mov	sl, r0
   1e568:	mov	fp, r1
   1e56c:	umull	r0, r1, ip, r6
   1e570:	mla	r6, lr, r6, r3
   1e574:	add	r6, r6, r1
   1e578:	cmp	r6, #0
   1e57c:	mov	r1, r6
   1e580:	bne	1eb80 <__assert_fail@plt+0xd1e0>
   1e584:	orrs	r3, sl, fp
   1e588:	bne	1e824 <__assert_fail@plt+0xce84>
   1e58c:	mul	r3, r0, lr
   1e590:	umull	r6, r7, r0, ip
   1e594:	mla	r3, ip, r1, r3
   1e598:	add	r1, r3, r7
   1e59c:	cmp	r1, #0
   1e5a0:	mov	r7, r1
   1e5a4:	bne	1eb58 <__assert_fail@plt+0xd1b8>
   1e5a8:	orrs	r3, sl, fp
   1e5ac:	bne	1e824 <__assert_fail@plt+0xce84>
   1e5b0:	mul	r3, r6, lr
   1e5b4:	umull	r0, r1, r6, ip
   1e5b8:	mla	r3, ip, r7, r3
   1e5bc:	add	r6, r3, r1
   1e5c0:	cmp	r6, #0
   1e5c4:	mov	r1, r6
   1e5c8:	beq	1e284 <__assert_fail@plt+0xc8e4>
   1e5cc:	umull	r2, r3, r0, ip
   1e5d0:	str	r3, [sp, #8]
   1e5d4:	mov	r3, #0
   1e5d8:	str	r3, [sp, #12]
   1e5dc:	ldrd	r2, [sp, #8]
   1e5e0:	umlal	r2, r3, r6, ip
   1e5e4:	cmp	r3, #0
   1e5e8:	movne	sl, #1
   1e5ec:	movne	fp, #0
   1e5f0:	b	1e284 <__assert_fail@plt+0xc8e4>
   1e5f4:	mov	r3, #1
   1e5f8:	mov	ip, #1024	; 0x400
   1e5fc:	mov	lr, #0
   1e600:	str	r3, [sp, #4]
   1e604:	cmp	r7, #0
   1e608:	mov	r0, #0
   1e60c:	mov	r1, #0
   1e610:	bne	1e990 <__assert_fail@plt+0xcff0>
   1e614:	orrs	r3, r0, r1
   1e618:	bne	1e344 <__assert_fail@plt+0xc9a4>
   1e61c:	mul	r3, ip, r7
   1e620:	strd	r0, [sp, #8]
   1e624:	umull	r0, r1, ip, r6
   1e628:	mla	r3, lr, r6, r3
   1e62c:	add	sl, r3, r1
   1e630:	cmp	sl, #0
   1e634:	mov	r1, sl
   1e638:	bne	1e9f0 <__assert_fail@plt+0xd050>
   1e63c:	ldrd	r2, [sp, #8]
   1e640:	orrs	r3, r2, r3
   1e644:	bne	1e344 <__assert_fail@plt+0xc9a4>
   1e648:	mul	lr, r0, lr
   1e64c:	umull	r6, r7, r0, ip
   1e650:	mla	ip, ip, r1, lr
   1e654:	add	r7, ip, r7
   1e658:	b	1e2d0 <__assert_fail@plt+0xc930>
   1e65c:	mov	r3, #1
   1e660:	mov	ip, #1024	; 0x400
   1e664:	mov	lr, #0
   1e668:	str	r3, [sp, #4]
   1e66c:	cmp	r7, #0
   1e670:	mov	r0, #0
   1e674:	mov	r1, #0
   1e678:	bne	1e910 <__assert_fail@plt+0xcf70>
   1e67c:	orrs	r3, r0, r1
   1e680:	bne	1e824 <__assert_fail@plt+0xce84>
   1e684:	mul	r3, ip, r7
   1e688:	mov	sl, r0
   1e68c:	mov	fp, r1
   1e690:	umull	r0, r1, ip, r6
   1e694:	mla	r6, lr, r6, r3
   1e698:	add	r6, r6, r1
   1e69c:	cmp	r6, #0
   1e6a0:	mov	r1, r6
   1e6a4:	bne	1eba8 <__assert_fail@plt+0xd208>
   1e6a8:	orrs	r3, sl, fp
   1e6ac:	bne	1e824 <__assert_fail@plt+0xce84>
   1e6b0:	mul	r3, r0, lr
   1e6b4:	strd	sl, [sp, #8]
   1e6b8:	umull	sl, fp, r0, ip
   1e6bc:	mla	r3, ip, r1, r3
   1e6c0:	add	r6, r3, fp
   1e6c4:	cmp	r6, #0
   1e6c8:	mov	fp, r6
   1e6cc:	bne	1ea68 <__assert_fail@plt+0xd0c8>
   1e6d0:	ldrd	r2, [sp, #8]
   1e6d4:	orrs	r3, r2, r3
   1e6d8:	bne	1e824 <__assert_fail@plt+0xce84>
   1e6dc:	mul	lr, sl, lr
   1e6e0:	mov	r3, #0
   1e6e4:	umull	r6, r7, sl, ip
   1e6e8:	mla	ip, ip, fp, lr
   1e6ec:	add	r7, ip, r7
   1e6f0:	b	1e2cc <__assert_fail@plt+0xc92c>
   1e6f4:	mov	r3, #1
   1e6f8:	mov	ip, #1024	; 0x400
   1e6fc:	mov	lr, #0
   1e700:	str	r3, [sp, #4]
   1e704:	cmp	r7, #0
   1e708:	mov	r0, #0
   1e70c:	mov	r1, #0
   1e710:	bne	1e930 <__assert_fail@plt+0xcf90>
   1e714:	orrs	r3, r0, r1
   1e718:	bne	1e824 <__assert_fail@plt+0xce84>
   1e71c:	mul	r3, ip, r7
   1e720:	mov	sl, r0
   1e724:	mov	fp, r1
   1e728:	umull	r0, r1, ip, r6
   1e72c:	mla	r6, lr, r6, r3
   1e730:	add	r6, r6, r1
   1e734:	cmp	r6, #0
   1e738:	mov	r1, r6
   1e73c:	bne	1ebd0 <__assert_fail@plt+0xd230>
   1e740:	orrs	r3, sl, fp
   1e744:	bne	1e824 <__assert_fail@plt+0xce84>
   1e748:	mul	r3, r0, lr
   1e74c:	umull	r6, r7, r0, ip
   1e750:	mla	r3, ip, r1, r3
   1e754:	add	r1, r3, r7
   1e758:	cmp	r1, #0
   1e75c:	mov	r7, r1
   1e760:	bne	1ec20 <__assert_fail@plt+0xd280>
   1e764:	orrs	r3, sl, fp
   1e768:	bne	1e824 <__assert_fail@plt+0xce84>
   1e76c:	mul	r3, r6, lr
   1e770:	umull	r0, r1, r6, ip
   1e774:	mla	r3, ip, r7, r3
   1e778:	add	r6, r3, r1
   1e77c:	cmp	r6, #0
   1e780:	mov	r1, r6
   1e784:	bne	1ebf8 <__assert_fail@plt+0xd258>
   1e788:	orrs	r3, sl, fp
   1e78c:	bne	1e824 <__assert_fail@plt+0xce84>
   1e790:	mul	r3, r0, lr
   1e794:	umull	r6, r7, r0, ip
   1e798:	mla	r3, ip, r1, r3
   1e79c:	add	r1, r3, r7
   1e7a0:	cmp	r1, #0
   1e7a4:	mov	r7, r1
   1e7a8:	bne	1ec90 <__assert_fail@plt+0xd2f0>
   1e7ac:	orrs	r3, sl, fp
   1e7b0:	bne	1e824 <__assert_fail@plt+0xce84>
   1e7b4:	mul	r3, ip, r7
   1e7b8:	umull	r0, r1, ip, r6
   1e7bc:	mla	r3, lr, r6, r3
   1e7c0:	add	r3, r3, r1
   1e7c4:	cmp	r3, #0
   1e7c8:	mov	r1, r3
   1e7cc:	str	r3, [sp, #8]
   1e7d0:	bne	1ec70 <__assert_fail@plt+0xd2d0>
   1e7d4:	orrs	r3, sl, fp
   1e7d8:	bne	1e824 <__assert_fail@plt+0xce84>
   1e7dc:	mul	lr, r0, lr
   1e7e0:	mov	r3, #0
   1e7e4:	umull	r6, r7, r0, ip
   1e7e8:	mla	ip, ip, r1, lr
   1e7ec:	add	r7, ip, r7
   1e7f0:	b	1e2cc <__assert_fail@plt+0xc92c>
   1e7f4:	lsr	r3, r7, #22
   1e7f8:	cmp	r3, #0
   1e7fc:	bne	1e344 <__assert_fail@plt+0xc9a4>
   1e800:	lsl	r3, r7, #10
   1e804:	lsl	r2, r6, #10
   1e808:	orr	r3, r3, r6, lsr #22
   1e80c:	mov	r6, r2
   1e810:	mov	r7, r3
   1e814:	b	1e2d0 <__assert_fail@plt+0xc930>
   1e818:	mov	r3, #1
   1e81c:	str	r3, [sp, #4]
   1e820:	b	1e2d0 <__assert_fail@plt+0xc930>
   1e824:	mov	r3, #1
   1e828:	mvn	r6, #0
   1e82c:	mvn	r7, #0
   1e830:	b	1e2cc <__assert_fail@plt+0xc92c>
   1e834:	mov	r3, #1
   1e838:	mov	ip, #1024	; 0x400
   1e83c:	str	r3, [sp, #4]
   1e840:	b	1e0c0 <__assert_fail@plt+0xc720>
   1e844:	mov	r3, #2
   1e848:	mov	ip, #1000	; 0x3e8
   1e84c:	mov	lr, #0
   1e850:	str	r3, [sp, #4]
   1e854:	b	1e0c0 <__assert_fail@plt+0xc720>
   1e858:	umull	r0, r1, r6, ip
   1e85c:	mov	fp, #0
   1e860:	mov	sl, r1
   1e864:	umlal	sl, fp, r7, ip
   1e868:	cmp	fp, #0
   1e86c:	movne	r2, #1
   1e870:	movne	r3, #0
   1e874:	b	1e310 <__assert_fail@plt+0xc970>
   1e878:	umull	r2, r3, sl, ip
   1e87c:	mov	r1, #0
   1e880:	mov	r0, r3
   1e884:	umlal	r0, r1, r6, ip
   1e888:	cmp	r1, #0
   1e88c:	beq	1e2ac <__assert_fail@plt+0xc90c>
   1e890:	mov	r2, #1
   1e894:	mov	r3, #0
   1e898:	strd	r2, [sp, #8]
   1e89c:	b	1e2ac <__assert_fail@plt+0xc90c>
   1e8a0:	umull	r2, r3, r0, ip
   1e8a4:	mov	r7, #0
   1e8a8:	mov	r6, r3
   1e8ac:	umlal	r6, r7, r1, ip
   1e8b0:	cmp	r7, #0
   1e8b4:	movne	sl, #1
   1e8b8:	movne	fp, #0
   1e8bc:	b	1e4e0 <__assert_fail@plt+0xcb40>
   1e8c0:	umull	r2, r3, r6, ip
   1e8c4:	str	r3, [sp, #8]
   1e8c8:	mov	r3, #0
   1e8cc:	str	r3, [sp, #12]
   1e8d0:	ldrd	r2, [sp, #8]
   1e8d4:	umlal	r2, r3, r1, ip
   1e8d8:	cmp	r3, #0
   1e8dc:	movne	sl, #1
   1e8e0:	movne	fp, #0
   1e8e4:	b	1e4b8 <__assert_fail@plt+0xcb18>
   1e8e8:	umull	r2, r3, r0, ip
   1e8ec:	str	r3, [sp, #8]
   1e8f0:	mov	r3, #0
   1e8f4:	str	r3, [sp, #12]
   1e8f8:	ldrd	r2, [sp, #8]
   1e8fc:	umlal	r2, r3, r6, ip
   1e900:	cmp	r3, #0
   1e904:	movne	sl, #1
   1e908:	movne	fp, #0
   1e90c:	b	1e494 <__assert_fail@plt+0xcaf4>
   1e910:	umull	r2, r3, r6, ip
   1e914:	mov	fp, #0
   1e918:	mov	sl, r3
   1e91c:	umlal	sl, fp, r7, ip
   1e920:	cmp	fp, #0
   1e924:	movne	r0, #1
   1e928:	movne	r1, #0
   1e92c:	b	1e67c <__assert_fail@plt+0xccdc>
   1e930:	umull	r2, r3, r6, ip
   1e934:	mov	fp, #0
   1e938:	mov	sl, r3
   1e93c:	umlal	sl, fp, r7, ip
   1e940:	cmp	fp, #0
   1e944:	movne	r0, #1
   1e948:	movne	r1, #0
   1e94c:	b	1e714 <__assert_fail@plt+0xcd74>
   1e950:	umull	r2, r3, r6, ip
   1e954:	mov	fp, #0
   1e958:	mov	sl, r3
   1e95c:	umlal	sl, fp, r7, ip
   1e960:	cmp	fp, #0
   1e964:	movne	r0, #1
   1e968:	movne	r1, #0
   1e96c:	b	1e1c8 <__assert_fail@plt+0xc828>
   1e970:	umull	r2, r3, r6, ip
   1e974:	mov	fp, #0
   1e978:	mov	sl, r3
   1e97c:	umlal	sl, fp, r7, ip
   1e980:	cmp	fp, #0
   1e984:	movne	r0, #1
   1e988:	movne	r1, #0
   1e98c:	b	1e3d8 <__assert_fail@plt+0xca38>
   1e990:	umull	r2, r3, r6, ip
   1e994:	mov	fp, #0
   1e998:	mov	sl, r3
   1e99c:	umlal	sl, fp, r7, ip
   1e9a0:	cmp	fp, #0
   1e9a4:	movne	r0, #1
   1e9a8:	movne	r1, #0
   1e9ac:	b	1e614 <__assert_fail@plt+0xcc74>
   1e9b0:	umull	r2, r3, r6, ip
   1e9b4:	mov	fp, #0
   1e9b8:	mov	sl, r3
   1e9bc:	umlal	sl, fp, r7, ip
   1e9c0:	cmp	fp, #0
   1e9c4:	movne	r0, #1
   1e9c8:	movne	r1, #0
   1e9cc:	b	1e558 <__assert_fail@plt+0xcbb8>
   1e9d0:	umull	r2, r3, r6, ip
   1e9d4:	mov	fp, #0
   1e9d8:	mov	sl, r3
   1e9dc:	umlal	sl, fp, r7, ip
   1e9e0:	cmp	fp, #0
   1e9e4:	movne	r0, #1
   1e9e8:	movne	r1, #0
   1e9ec:	b	1e520 <__assert_fail@plt+0xcb80>
   1e9f0:	umull	r2, r3, r0, ip
   1e9f4:	mov	r7, #0
   1e9f8:	mov	r6, r3
   1e9fc:	umlal	r6, r7, sl, ip
   1ea00:	cmp	r7, #0
   1ea04:	beq	1e63c <__assert_fail@plt+0xcc9c>
   1ea08:	mov	r2, #1
   1ea0c:	mov	r3, #0
   1ea10:	strd	r2, [sp, #8]
   1ea14:	b	1e63c <__assert_fail@plt+0xcc9c>
   1ea18:	umull	r2, r3, r6, ip
   1ea1c:	str	r3, [sp, #8]
   1ea20:	mov	r3, #0
   1ea24:	str	r3, [sp, #12]
   1ea28:	ldrd	r2, [sp, #8]
   1ea2c:	umlal	r2, r3, r1, ip
   1ea30:	cmp	r3, #0
   1ea34:	movne	sl, #1
   1ea38:	movne	fp, #0
   1ea3c:	b	1e260 <__assert_fail@plt+0xc8c0>
   1ea40:	umull	r2, r3, r0, ip
   1ea44:	str	r3, [sp, #8]
   1ea48:	mov	r3, #0
   1ea4c:	str	r3, [sp, #12]
   1ea50:	ldrd	r2, [sp, #8]
   1ea54:	umlal	r2, r3, r6, ip
   1ea58:	cmp	r3, #0
   1ea5c:	movne	sl, #1
   1ea60:	movne	fp, #0
   1ea64:	b	1e23c <__assert_fail@plt+0xc89c>
   1ea68:	umull	r2, r3, sl, ip
   1ea6c:	mov	r1, #0
   1ea70:	mov	r0, r3
   1ea74:	umlal	r0, r1, r6, ip
   1ea78:	cmp	r1, #0
   1ea7c:	beq	1e6d0 <__assert_fail@plt+0xcd30>
   1ea80:	mov	r2, #1
   1ea84:	mov	r3, #0
   1ea88:	strd	r2, [sp, #8]
   1ea8c:	b	1e6d0 <__assert_fail@plt+0xcd30>
   1ea90:	umull	r2, r3, r0, ip
   1ea94:	str	r3, [sp, #8]
   1ea98:	mov	r3, #0
   1ea9c:	str	r3, [sp, #12]
   1eaa0:	ldrd	r2, [sp, #8]
   1eaa4:	umlal	r2, r3, r6, ip
   1eaa8:	cmp	r3, #0
   1eaac:	movne	sl, #1
   1eab0:	movne	fp, #0
   1eab4:	b	1e404 <__assert_fail@plt+0xca64>
   1eab8:	umull	r2, r3, r0, ip
   1eabc:	str	r3, [sp, #8]
   1eac0:	mov	r3, #0
   1eac4:	str	r3, [sp, #12]
   1eac8:	ldrd	r2, [sp, #8]
   1eacc:	umlal	r2, r3, r6, ip
   1ead0:	cmp	r3, #0
   1ead4:	movne	sl, #1
   1ead8:	movne	fp, #0
   1eadc:	b	1e44c <__assert_fail@plt+0xcaac>
   1eae0:	umull	r2, r3, r6, ip
   1eae4:	str	r3, [sp, #8]
   1eae8:	mov	r3, #0
   1eaec:	str	r3, [sp, #12]
   1eaf0:	ldrd	r2, [sp, #8]
   1eaf4:	umlal	r2, r3, r1, ip
   1eaf8:	cmp	r3, #0
   1eafc:	movne	sl, #1
   1eb00:	movne	fp, #0
   1eb04:	b	1e428 <__assert_fail@plt+0xca88>
   1eb08:	umull	r2, r3, r6, ip
   1eb0c:	str	r3, [sp, #8]
   1eb10:	mov	r3, #0
   1eb14:	str	r3, [sp, #12]
   1eb18:	ldrd	r2, [sp, #8]
   1eb1c:	umlal	r2, r3, r1, ip
   1eb20:	cmp	r3, #0
   1eb24:	movne	sl, #1
   1eb28:	movne	fp, #0
   1eb2c:	b	1e218 <__assert_fail@plt+0xc878>
   1eb30:	umull	r2, r3, r0, ip
   1eb34:	str	r3, [sp, #8]
   1eb38:	mov	r3, #0
   1eb3c:	str	r3, [sp, #12]
   1eb40:	ldrd	r2, [sp, #8]
   1eb44:	umlal	r2, r3, r6, ip
   1eb48:	cmp	r3, #0
   1eb4c:	movne	sl, #1
   1eb50:	movne	fp, #0
   1eb54:	b	1e1f4 <__assert_fail@plt+0xc854>
   1eb58:	umull	r2, r3, r6, ip
   1eb5c:	str	r3, [sp, #8]
   1eb60:	mov	r3, #0
   1eb64:	str	r3, [sp, #12]
   1eb68:	ldrd	r2, [sp, #8]
   1eb6c:	umlal	r2, r3, r1, ip
   1eb70:	cmp	r3, #0
   1eb74:	movne	sl, #1
   1eb78:	movne	fp, #0
   1eb7c:	b	1e5a8 <__assert_fail@plt+0xcc08>
   1eb80:	umull	r2, r3, r0, ip
   1eb84:	str	r3, [sp, #8]
   1eb88:	mov	r3, #0
   1eb8c:	str	r3, [sp, #12]
   1eb90:	ldrd	r2, [sp, #8]
   1eb94:	umlal	r2, r3, r6, ip
   1eb98:	cmp	r3, #0
   1eb9c:	movne	sl, #1
   1eba0:	movne	fp, #0
   1eba4:	b	1e584 <__assert_fail@plt+0xcbe4>
   1eba8:	umull	r2, r3, r0, ip
   1ebac:	str	r3, [sp, #8]
   1ebb0:	mov	r3, #0
   1ebb4:	str	r3, [sp, #12]
   1ebb8:	ldrd	r2, [sp, #8]
   1ebbc:	umlal	r2, r3, r6, ip
   1ebc0:	cmp	r3, #0
   1ebc4:	movne	sl, #1
   1ebc8:	movne	fp, #0
   1ebcc:	b	1e6a8 <__assert_fail@plt+0xcd08>
   1ebd0:	umull	r2, r3, r0, ip
   1ebd4:	str	r3, [sp, #8]
   1ebd8:	mov	r3, #0
   1ebdc:	str	r3, [sp, #12]
   1ebe0:	ldrd	r2, [sp, #8]
   1ebe4:	umlal	r2, r3, r6, ip
   1ebe8:	cmp	r3, #0
   1ebec:	movne	sl, #1
   1ebf0:	movne	fp, #0
   1ebf4:	b	1e740 <__assert_fail@plt+0xcda0>
   1ebf8:	umull	r2, r3, r0, ip
   1ebfc:	str	r3, [sp, #8]
   1ec00:	mov	r3, #0
   1ec04:	str	r3, [sp, #12]
   1ec08:	ldrd	r2, [sp, #8]
   1ec0c:	umlal	r2, r3, r6, ip
   1ec10:	cmp	r3, #0
   1ec14:	movne	sl, #1
   1ec18:	movne	fp, #0
   1ec1c:	b	1e788 <__assert_fail@plt+0xcde8>
   1ec20:	umull	r2, r3, r6, ip
   1ec24:	str	r3, [sp, #8]
   1ec28:	mov	r3, #0
   1ec2c:	str	r3, [sp, #12]
   1ec30:	ldrd	r2, [sp, #8]
   1ec34:	umlal	r2, r3, r1, ip
   1ec38:	cmp	r3, #0
   1ec3c:	movne	sl, #1
   1ec40:	movne	fp, #0
   1ec44:	b	1e764 <__assert_fail@plt+0xcdc4>
   1ec48:	umull	r2, r3, r6, ip
   1ec4c:	str	r3, [sp, #8]
   1ec50:	mov	r3, #0
   1ec54:	str	r3, [sp, #12]
   1ec58:	ldrd	r2, [sp, #8]
   1ec5c:	umlal	r2, r3, r1, ip
   1ec60:	cmp	r3, #0
   1ec64:	movne	sl, #1
   1ec68:	movne	fp, #0
   1ec6c:	b	1e470 <__assert_fail@plt+0xcad0>
   1ec70:	umull	r2, r3, r0, ip
   1ec74:	mov	r7, #0
   1ec78:	mov	r6, r3
   1ec7c:	umlal	r6, r7, r1, ip
   1ec80:	cmp	r7, #0
   1ec84:	movne	sl, #1
   1ec88:	movne	fp, #0
   1ec8c:	b	1e7d4 <__assert_fail@plt+0xce34>
   1ec90:	umull	r2, r3, r6, ip
   1ec94:	str	r3, [sp, #8]
   1ec98:	mov	r3, #0
   1ec9c:	str	r3, [sp, #12]
   1eca0:	ldrd	r2, [sp, #8]
   1eca4:	umlal	r2, r3, r1, ip
   1eca8:	cmp	r3, #0
   1ecac:	movne	sl, #1
   1ecb0:	movne	fp, #0
   1ecb4:	b	1e7ac <__assert_fail@plt+0xce0c>
   1ecb8:	movw	r3, #20868	; 0x5184
   1ecbc:	movt	r3, #3
   1ecc0:	movw	r1, #20880	; 0x5190
   1ecc4:	movt	r1, #3
   1ecc8:	movw	r0, #20892	; 0x519c
   1eccc:	movt	r0, #3
   1ecd0:	mov	r2, #84	; 0x54
   1ecd4:	bl	119a0 <__assert_fail@plt>
   1ecd8:	cmp	r1, #0
   1ecdc:	cmpne	r0, #0
   1ece0:	beq	1ed2c <__assert_fail@plt+0xd38c>
   1ece4:	strd	r4, [sp, #-16]!
   1ece8:	umull	r4, r5, r0, r1
   1ecec:	str	r6, [sp, #8]
   1ecf0:	str	lr, [sp, #12]
   1ecf4:	adds	r3, r5, #0
   1ecf8:	movne	r3, #1
   1ecfc:	cmp	r4, #0
   1ed00:	blt	1ed0c <__assert_fail@plt+0xd36c>
   1ed04:	cmp	r3, #0
   1ed08:	beq	1ed38 <__assert_fail@plt+0xd398>
   1ed0c:	bl	117d8 <__errno_location@plt>
   1ed10:	mov	r3, #12
   1ed14:	ldrd	r4, [sp]
   1ed18:	ldr	r6, [sp, #8]
   1ed1c:	add	sp, sp, #12
   1ed20:	str	r3, [r0]
   1ed24:	mov	r0, #0
   1ed28:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed2c:	mov	r1, #1
   1ed30:	mov	r0, r1
   1ed34:	b	11508 <calloc@plt>
   1ed38:	ldrd	r4, [sp]
   1ed3c:	ldr	r6, [sp, #8]
   1ed40:	ldr	lr, [sp, #12]
   1ed44:	add	sp, sp, #16
   1ed48:	b	11508 <calloc@plt>
   1ed4c:	push	{r1, r2, r3}
   1ed50:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ed54:	strd	r6, [sp, #8]
   1ed58:	str	lr, [sp, #16]
   1ed5c:	sub	sp, sp, #8
   1ed60:	ldr	r1, [sp, #28]
   1ed64:	add	r2, sp, #32
   1ed68:	str	r2, [sp, #4]
   1ed6c:	cmp	r1, #0
   1ed70:	beq	1ee4c <__assert_fail@plt+0xd4ac>
   1ed74:	movw	r3, #1030	; 0x406
   1ed78:	mov	r6, r0
   1ed7c:	cmp	r1, r3
   1ed80:	beq	1ee5c <__assert_fail@plt+0xd4bc>
   1ed84:	cmp	r1, #11
   1ed88:	beq	1ee04 <__assert_fail@plt+0xd464>
   1ed8c:	ble	1ede4 <__assert_fail@plt+0xd444>
   1ed90:	movw	r2, #1031	; 0x407
   1ed94:	cmp	r1, r2
   1ed98:	bgt	1ee20 <__assert_fail@plt+0xd480>
   1ed9c:	cmp	r1, r3
   1eda0:	bge	1edb0 <__assert_fail@plt+0xd410>
   1eda4:	movw	r3, #1025	; 0x401
   1eda8:	cmp	r1, r3
   1edac:	beq	1ee04 <__assert_fail@plt+0xd464>
   1edb0:	ldr	r3, [sp, #4]
   1edb4:	mov	r0, r6
   1edb8:	ldr	r2, [r3]
   1edbc:	bl	1188c <fcntl64@plt>
   1edc0:	mov	r4, r0
   1edc4:	mov	r0, r4
   1edc8:	add	sp, sp, #8
   1edcc:	ldrd	r4, [sp]
   1edd0:	ldrd	r6, [sp, #8]
   1edd4:	ldr	lr, [sp, #16]
   1edd8:	add	sp, sp, #20
   1eddc:	add	sp, sp, #12
   1ede0:	bx	lr
   1ede4:	cmp	r1, #4
   1ede8:	beq	1edb0 <__assert_fail@plt+0xd410>
   1edec:	bgt	1ee14 <__assert_fail@plt+0xd474>
   1edf0:	cmp	r1, #2
   1edf4:	beq	1edb0 <__assert_fail@plt+0xd410>
   1edf8:	bgt	1ee04 <__assert_fail@plt+0xd464>
   1edfc:	cmp	r1, #1
   1ee00:	bne	1edb0 <__assert_fail@plt+0xd410>
   1ee04:	mov	r0, r6
   1ee08:	bl	1188c <fcntl64@plt>
   1ee0c:	mov	r4, r0
   1ee10:	b	1edc4 <__assert_fail@plt+0xd424>
   1ee14:	cmp	r1, #9
   1ee18:	bne	1edb0 <__assert_fail@plt+0xd410>
   1ee1c:	b	1ee04 <__assert_fail@plt+0xd464>
   1ee20:	movw	r3, #1033	; 0x409
   1ee24:	cmp	r1, r3
   1ee28:	beq	1edb0 <__assert_fail@plt+0xd410>
   1ee2c:	blt	1ee04 <__assert_fail@plt+0xd464>
   1ee30:	movw	r3, #1034	; 0x40a
   1ee34:	cmp	r1, r3
   1ee38:	bne	1edb0 <__assert_fail@plt+0xd410>
   1ee3c:	mov	r0, r6
   1ee40:	bl	1188c <fcntl64@plt>
   1ee44:	mov	r4, r0
   1ee48:	b	1edc4 <__assert_fail@plt+0xd424>
   1ee4c:	ldr	r2, [sp, #32]
   1ee50:	bl	1188c <fcntl64@plt>
   1ee54:	mov	r4, r0
   1ee58:	b	1edc4 <__assert_fail@plt+0xd424>
   1ee5c:	movw	r5, #25556	; 0x63d4
   1ee60:	movt	r5, #4
   1ee64:	ldr	r7, [r2]
   1ee68:	add	r2, sp, #36	; 0x24
   1ee6c:	ldr	r3, [r5]
   1ee70:	str	r2, [sp, #4]
   1ee74:	mov	r2, r7
   1ee78:	cmp	r3, #0
   1ee7c:	blt	1ee98 <__assert_fail@plt+0xd4f8>
   1ee80:	bl	1188c <fcntl64@plt>
   1ee84:	subs	r4, r0, #0
   1ee88:	blt	1ef00 <__assert_fail@plt+0xd560>
   1ee8c:	mov	r3, #1
   1ee90:	str	r3, [r5]
   1ee94:	b	1edc4 <__assert_fail@plt+0xd424>
   1ee98:	mov	r1, #0
   1ee9c:	bl	1188c <fcntl64@plt>
   1eea0:	subs	r4, r0, #0
   1eea4:	blt	1edc4 <__assert_fail@plt+0xd424>
   1eea8:	ldr	r3, [r5]
   1eeac:	cmn	r3, #1
   1eeb0:	bne	1edc4 <__assert_fail@plt+0xd424>
   1eeb4:	mov	r1, #1
   1eeb8:	mov	r0, r4
   1eebc:	bl	1188c <fcntl64@plt>
   1eec0:	subs	r2, r0, #0
   1eec4:	blt	1eee0 <__assert_fail@plt+0xd540>
   1eec8:	orr	r2, r2, #1
   1eecc:	mov	r1, #2
   1eed0:	mov	r0, r4
   1eed4:	bl	1188c <fcntl64@plt>
   1eed8:	cmn	r0, #1
   1eedc:	bne	1edc4 <__assert_fail@plt+0xd424>
   1eee0:	bl	117d8 <__errno_location@plt>
   1eee4:	mov	r5, r0
   1eee8:	mov	r0, r4
   1eeec:	ldr	r6, [r5]
   1eef0:	mvn	r4, #0
   1eef4:	bl	1197c <close@plt>
   1eef8:	str	r6, [r5]
   1eefc:	b	1edc4 <__assert_fail@plt+0xd424>
   1ef00:	bl	117d8 <__errno_location@plt>
   1ef04:	ldr	r3, [r0]
   1ef08:	cmp	r3, #22
   1ef0c:	bne	1ee8c <__assert_fail@plt+0xd4ec>
   1ef10:	mov	r2, r7
   1ef14:	mov	r0, r6
   1ef18:	mov	r1, #0
   1ef1c:	bl	1188c <fcntl64@plt>
   1ef20:	subs	r4, r0, #0
   1ef24:	mvnge	r3, #0
   1ef28:	strge	r3, [r5]
   1ef2c:	bge	1eeb4 <__assert_fail@plt+0xd514>
   1ef30:	b	1edc4 <__assert_fail@plt+0xd424>
   1ef34:	str	r4, [sp, #-8]!
   1ef38:	subs	r4, r0, #0
   1ef3c:	str	lr, [sp, #4]
   1ef40:	sub	sp, sp, #8
   1ef44:	beq	1ef60 <__assert_fail@plt+0xd5c0>
   1ef48:	bl	11730 <__freading@plt>
   1ef4c:	cmp	r0, #0
   1ef50:	beq	1ef60 <__assert_fail@plt+0xd5c0>
   1ef54:	ldr	r3, [r4]
   1ef58:	tst	r3, #256	; 0x100
   1ef5c:	bne	1ef78 <__assert_fail@plt+0xd5d8>
   1ef60:	mov	r0, r4
   1ef64:	add	sp, sp, #8
   1ef68:	ldr	r4, [sp]
   1ef6c:	ldr	lr, [sp, #4]
   1ef70:	add	sp, sp, #8
   1ef74:	b	11568 <fflush@plt>
   1ef78:	mov	r1, #1
   1ef7c:	mov	r2, #0
   1ef80:	mov	r3, #0
   1ef84:	mov	r0, r4
   1ef88:	str	r1, [sp]
   1ef8c:	bl	1eff4 <__assert_fail@plt+0xd654>
   1ef90:	b	1ef60 <__assert_fail@plt+0xd5c0>
   1ef94:	strd	r4, [sp, #-12]!
   1ef98:	mov	r5, r0
   1ef9c:	str	lr, [sp, #8]
   1efa0:	sub	sp, sp, #12
   1efa4:	bl	117d8 <__errno_location@plt>
   1efa8:	mov	r4, r0
   1efac:	mov	r2, #0
   1efb0:	ldr	r3, [r4]
   1efb4:	mov	r0, r5
   1efb8:	str	r2, [r4]
   1efbc:	str	r3, [sp]
   1efc0:	str	r3, [sp, #4]
   1efc4:	bl	11598 <free@plt>
   1efc8:	ldr	r3, [r4]
   1efcc:	add	r2, sp, #8
   1efd0:	clz	r3, r3
   1efd4:	lsr	r3, r3, #5
   1efd8:	add	r3, r2, r3, lsl #2
   1efdc:	ldr	r3, [r3, #-8]
   1efe0:	str	r3, [r4]
   1efe4:	add	sp, sp, #12
   1efe8:	ldrd	r4, [sp]
   1efec:	add	sp, sp, #8
   1eff0:	pop	{pc}		; (ldr pc, [sp], #4)
   1eff4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1eff8:	mov	r4, r0
   1effc:	ldr	ip, [r0, #4]
   1f000:	strd	r6, [sp, #8]
   1f004:	str	lr, [sp, #20]
   1f008:	ldr	lr, [r0, #8]
   1f00c:	str	r8, [sp, #16]
   1f010:	sub	sp, sp, #8
   1f014:	ldr	r5, [sp, #32]
   1f018:	cmp	lr, ip
   1f01c:	beq	1f044 <__assert_fail@plt+0xd6a4>
   1f020:	mov	r0, r4
   1f024:	str	r5, [sp, #32]
   1f028:	add	sp, sp, #8
   1f02c:	ldrd	r4, [sp]
   1f030:	ldrd	r6, [sp, #8]
   1f034:	ldr	r8, [sp, #16]
   1f038:	ldr	lr, [sp, #20]
   1f03c:	add	sp, sp, #24
   1f040:	b	11880 <fseeko64@plt>
   1f044:	ldr	ip, [r0, #16]
   1f048:	ldr	lr, [r0, #20]
   1f04c:	cmp	lr, ip
   1f050:	bne	1f020 <__assert_fail@plt+0xd680>
   1f054:	ldr	r8, [r0, #36]	; 0x24
   1f058:	cmp	r8, #0
   1f05c:	bne	1f020 <__assert_fail@plt+0xd680>
   1f060:	mov	r6, r2
   1f064:	mov	r7, r3
   1f068:	bl	11844 <fileno@plt>
   1f06c:	mov	r2, r6
   1f070:	mov	r3, r7
   1f074:	str	r5, [sp]
   1f078:	bl	11694 <lseek64@plt>
   1f07c:	mvn	r3, #0
   1f080:	mvn	r2, #0
   1f084:	cmp	r1, r3
   1f088:	cmpeq	r0, r2
   1f08c:	beq	1f0bc <__assert_fail@plt+0xd71c>
   1f090:	ldr	r3, [r4]
   1f094:	strd	r0, [r4, #80]	; 0x50
   1f098:	bic	r3, r3, #16
   1f09c:	str	r3, [r4]
   1f0a0:	mov	r0, r8
   1f0a4:	add	sp, sp, #8
   1f0a8:	ldrd	r4, [sp]
   1f0ac:	ldrd	r6, [sp, #8]
   1f0b0:	ldr	r8, [sp, #16]
   1f0b4:	add	sp, sp, #20
   1f0b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0bc:	mvn	r8, #0
   1f0c0:	b	1f0a0 <__assert_fail@plt+0xd700>
   1f0c4:	cmp	r0, #0
   1f0c8:	beq	1f0d4 <__assert_fail@plt+0xd734>
   1f0cc:	blt	1f0dc <__assert_fail@plt+0xd73c>
   1f0d0:	b	1170c <malloc@plt>
   1f0d4:	mov	r0, #1
   1f0d8:	b	1170c <malloc@plt>
   1f0dc:	str	r4, [sp, #-8]!
   1f0e0:	str	lr, [sp, #4]
   1f0e4:	bl	117d8 <__errno_location@plt>
   1f0e8:	mov	r3, #12
   1f0ec:	ldr	r4, [sp]
   1f0f0:	add	sp, sp, #4
   1f0f4:	str	r3, [r0]
   1f0f8:	mov	r0, #0
   1f0fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f100:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f104:	mov	r5, r2
   1f108:	strd	r6, [sp, #8]
   1f10c:	subs	r6, r0, #0
   1f110:	mov	r7, r1
   1f114:	str	lr, [sp, #16]
   1f118:	sub	sp, sp, #12
   1f11c:	addeq	r6, sp, #4
   1f120:	mov	r0, r6
   1f124:	bl	116c4 <mbrtowc@plt>
   1f128:	cmp	r5, #0
   1f12c:	cmnne	r0, #3
   1f130:	mov	r4, r0
   1f134:	bhi	1f150 <__assert_fail@plt+0xd7b0>
   1f138:	mov	r0, r4
   1f13c:	add	sp, sp, #12
   1f140:	ldrd	r4, [sp]
   1f144:	ldrd	r6, [sp, #8]
   1f148:	add	sp, sp, #16
   1f14c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f150:	mov	r0, #0
   1f154:	bl	331e0 <__assert_fail@plt+0x21840>
   1f158:	cmp	r0, #0
   1f15c:	bne	1f138 <__assert_fail@plt+0xd798>
   1f160:	ldrb	r3, [r7]
   1f164:	mov	r4, #1
   1f168:	str	r3, [r6]
   1f16c:	b	1f138 <__assert_fail@plt+0xd798>
   1f170:	cmp	r0, #0
   1f174:	beq	1f19c <__assert_fail@plt+0xd7fc>
   1f178:	cmp	r1, #0
   1f17c:	str	r4, [sp, #-8]!
   1f180:	str	lr, [sp, #4]
   1f184:	beq	1f1a4 <__assert_fail@plt+0xd804>
   1f188:	blt	1f1b8 <__assert_fail@plt+0xd818>
   1f18c:	ldr	r4, [sp]
   1f190:	ldr	lr, [sp, #4]
   1f194:	add	sp, sp, #8
   1f198:	b	11634 <realloc@plt>
   1f19c:	mov	r0, r1
   1f1a0:	b	1f0c4 <__assert_fail@plt+0xd724>
   1f1a4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   1f1a8:	ldr	r4, [sp]
   1f1ac:	add	sp, sp, #4
   1f1b0:	mov	r0, #0
   1f1b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1b8:	bl	117d8 <__errno_location@plt>
   1f1bc:	mov	r3, #12
   1f1c0:	str	r3, [r0]
   1f1c4:	b	1f1a8 <__assert_fail@plt+0xd808>
   1f1c8:	umull	r2, r3, r1, r2
   1f1cc:	cmp	r3, #0
   1f1d0:	bne	1f1dc <__assert_fail@plt+0xd83c>
   1f1d4:	mov	r1, r2
   1f1d8:	b	1f170 <__assert_fail@plt+0xd7d0>
   1f1dc:	str	r4, [sp, #-8]!
   1f1e0:	str	lr, [sp, #4]
   1f1e4:	bl	117d8 <__errno_location@plt>
   1f1e8:	mov	r3, #12
   1f1ec:	ldr	r4, [sp]
   1f1f0:	add	sp, sp, #4
   1f1f4:	str	r3, [r0]
   1f1f8:	mov	r0, #0
   1f1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f200:	ldr	r3, [r1, #40]	; 0x28
   1f204:	ldr	ip, [r1, #56]	; 0x38
   1f208:	cmp	ip, r3
   1f20c:	ble	1f2d0 <__assert_fail@plt+0xd930>
   1f210:	str	r4, [sp, #-8]!
   1f214:	ldr	r4, [r1, #80]	; 0x50
   1f218:	str	lr, [sp, #4]
   1f21c:	ldr	lr, [r1, #4]
   1f220:	cmp	r4, #1
   1f224:	ldrb	ip, [lr, r3]
   1f228:	strb	ip, [r0]
   1f22c:	ble	1f24c <__assert_fail@plt+0xd8ac>
   1f230:	ldr	r4, [r1, #28]
   1f234:	cmp	r3, r4
   1f238:	beq	1f24c <__assert_fail@plt+0xd8ac>
   1f23c:	ldr	r4, [r1, #8]
   1f240:	ldr	r4, [r4, r3, lsl #2]
   1f244:	cmn	r4, #1
   1f248:	beq	1f290 <__assert_fail@plt+0xd8f0>
   1f24c:	cmp	ip, #92	; 0x5c
   1f250:	beq	1f288 <__assert_fail@plt+0xd8e8>
   1f254:	cmp	ip, #91	; 0x5b
   1f258:	beq	1f310 <__assert_fail@plt+0xd970>
   1f25c:	cmp	ip, #93	; 0x5d
   1f260:	beq	1f368 <__assert_fail@plt+0xd9c8>
   1f264:	cmp	ip, #94	; 0x5e
   1f268:	bne	1f2ac <__assert_fail@plt+0xd90c>
   1f26c:	mov	r2, #25
   1f270:	mov	r3, #1
   1f274:	ldr	r4, [sp]
   1f278:	add	sp, sp, #4
   1f27c:	strb	r2, [r0, #4]
   1f280:	mov	r0, r3
   1f284:	pop	{pc}		; (ldr pc, [sp], #4)
   1f288:	tst	r2, #1
   1f28c:	bne	1f2e4 <__assert_fail@plt+0xd944>
   1f290:	mov	r2, #1
   1f294:	mov	r3, r2
   1f298:	strb	r2, [r0, #4]
   1f29c:	ldr	r4, [sp]
   1f2a0:	add	sp, sp, #4
   1f2a4:	mov	r0, r3
   1f2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2ac:	cmp	ip, #45	; 0x2d
   1f2b0:	bne	1f290 <__assert_fail@plt+0xd8f0>
   1f2b4:	mov	r2, #22
   1f2b8:	mov	r3, #1
   1f2bc:	ldr	r4, [sp]
   1f2c0:	add	sp, sp, #4
   1f2c4:	strb	r2, [r0, #4]
   1f2c8:	mov	r0, r3
   1f2cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f2d0:	mov	r2, #2
   1f2d4:	mov	r3, #0
   1f2d8:	strb	r2, [r0, #4]
   1f2dc:	mov	r0, r3
   1f2e0:	bx	lr
   1f2e4:	ldr	r2, [r1, #48]	; 0x30
   1f2e8:	add	r3, r3, #1
   1f2ec:	cmp	r3, r2
   1f2f0:	bge	1f290 <__assert_fail@plt+0xd8f0>
   1f2f4:	str	r3, [r1, #40]	; 0x28
   1f2f8:	mov	r2, #1
   1f2fc:	ldrb	r1, [lr, r3]
   1f300:	mov	r3, r2
   1f304:	strb	r1, [r0]
   1f308:	strb	r2, [r0, #4]
   1f30c:	b	1f29c <__assert_fail@plt+0xd8fc>
   1f310:	ldr	r1, [r1, #48]	; 0x30
   1f314:	add	ip, r3, #1
   1f318:	cmp	ip, r1
   1f31c:	bge	1f350 <__assert_fail@plt+0xd9b0>
   1f320:	add	r3, lr, r3
   1f324:	ldrb	r3, [r3, #1]
   1f328:	cmp	r3, #58	; 0x3a
   1f32c:	strb	r3, [r0]
   1f330:	beq	1f394 <__assert_fail@plt+0xd9f4>
   1f334:	cmp	r3, #61	; 0x3d
   1f338:	beq	1f384 <__assert_fail@plt+0xd9e4>
   1f33c:	cmp	r3, #46	; 0x2e
   1f340:	moveq	r2, #26
   1f344:	moveq	r3, #2
   1f348:	strbeq	r2, [r0, #4]
   1f34c:	beq	1f29c <__assert_fail@plt+0xd8fc>
   1f350:	mov	r2, #1
   1f354:	mov	r1, #91	; 0x5b
   1f358:	mov	r3, r2
   1f35c:	strb	r1, [r0]
   1f360:	strb	r2, [r0, #4]
   1f364:	b	1f29c <__assert_fail@plt+0xd8fc>
   1f368:	mov	r2, #21
   1f36c:	mov	r3, #1
   1f370:	ldr	r4, [sp]
   1f374:	add	sp, sp, #4
   1f378:	strb	r2, [r0, #4]
   1f37c:	mov	r0, r3
   1f380:	pop	{pc}		; (ldr pc, [sp], #4)
   1f384:	mov	r2, #28
   1f388:	mov	r3, #2
   1f38c:	strb	r2, [r0, #4]
   1f390:	b	1f29c <__assert_fail@plt+0xd8fc>
   1f394:	tst	r2, #4
   1f398:	beq	1f350 <__assert_fail@plt+0xd9b0>
   1f39c:	mov	r2, #30
   1f3a0:	mov	r3, #2
   1f3a4:	strb	r2, [r0, #4]
   1f3a8:	b	1f29c <__assert_fail@plt+0xd8fc>
   1f3ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f3b0:	strd	r6, [sp, #8]
   1f3b4:	ldr	r7, [r0, #84]	; 0x54
   1f3b8:	strd	r8, [sp, #16]
   1f3bc:	strd	sl, [sp, #24]
   1f3c0:	mov	fp, r1
   1f3c4:	str	lr, [sp, #32]
   1f3c8:	sub	sp, sp, #52	; 0x34
   1f3cc:	ldr	r8, [r7, #24]
   1f3d0:	str	r3, [sp, #24]
   1f3d4:	add	r3, r3, r3, lsl #1
   1f3d8:	add	r8, r8, r3, lsl #2
   1f3dc:	ldr	r1, [r8, #4]
   1f3e0:	cmp	r1, #0
   1f3e4:	ble	1f598 <__assert_fail@plt+0xdbf8>
   1f3e8:	ldr	r3, [sp, #88]	; 0x58
   1f3ec:	mov	r9, r2
   1f3f0:	mov	r2, #1
   1f3f4:	mov	sl, r0
   1f3f8:	and	r0, fp, #2
   1f3fc:	mov	r4, #0
   1f400:	str	r0, [sp, #12]
   1f404:	and	r0, fp, #1
   1f408:	add	r3, r3, r3, lsl r2
   1f40c:	str	r0, [sp, #16]
   1f410:	lsl	r2, r2, r9
   1f414:	lsl	r3, r3, #3
   1f418:	str	r2, [sp, #20]
   1f41c:	str	r3, [sp, #28]
   1f420:	mvn	r3, r2
   1f424:	str	r3, [sp, #32]
   1f428:	b	1f440 <__assert_fail@plt+0xdaa0>
   1f42c:	cmp	r3, #4
   1f430:	beq	1f4bc <__assert_fail@plt+0xdb1c>
   1f434:	add	r4, r4, #1
   1f438:	cmp	r4, r1
   1f43c:	bge	1f598 <__assert_fail@plt+0xdbf8>
   1f440:	ldr	r3, [r8, #8]
   1f444:	ldr	r2, [r7]
   1f448:	ldr	r5, [r3, r4, lsl #2]
   1f44c:	add	r3, r2, r5, lsl #3
   1f450:	ldrb	r3, [r3, #4]
   1f454:	cmp	r3, #8
   1f458:	beq	1f484 <__assert_fail@plt+0xdae4>
   1f45c:	cmp	r3, #9
   1f460:	bne	1f42c <__assert_fail@plt+0xda8c>
   1f464:	ldr	r3, [sp, #12]
   1f468:	cmp	r3, #0
   1f46c:	beq	1f434 <__assert_fail@plt+0xda94>
   1f470:	ldr	r3, [r2, r5, lsl #3]
   1f474:	cmp	r3, r9
   1f478:	bne	1f434 <__assert_fail@plt+0xda94>
   1f47c:	mov	r0, #0
   1f480:	b	1f4a0 <__assert_fail@plt+0xdb00>
   1f484:	ldr	r3, [sp, #16]
   1f488:	cmp	r3, #0
   1f48c:	beq	1f434 <__assert_fail@plt+0xda94>
   1f490:	ldr	r3, [r2, r5, lsl #3]
   1f494:	cmp	r3, r9
   1f498:	bne	1f434 <__assert_fail@plt+0xda94>
   1f49c:	mvn	r0, #0
   1f4a0:	add	sp, sp, #52	; 0x34
   1f4a4:	ldrd	r4, [sp]
   1f4a8:	ldrd	r6, [sp, #8]
   1f4ac:	ldrd	r8, [sp, #16]
   1f4b0:	ldrd	sl, [sp, #24]
   1f4b4:	add	sp, sp, #32
   1f4b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4bc:	ldr	r3, [sp, #88]	; 0x58
   1f4c0:	cmn	r3, #1
   1f4c4:	beq	1f434 <__assert_fail@plt+0xda94>
   1f4c8:	add	r3, r5, r5, lsl #1
   1f4cc:	ldr	r2, [sp, #28]
   1f4d0:	cmp	r9, #31
   1f4d4:	ldr	r6, [sl, #116]	; 0x74
   1f4d8:	lsl	r3, r3, #2
   1f4dc:	str	r3, [sp, #36]	; 0x24
   1f4e0:	add	r6, r6, r2
   1f4e4:	bgt	1f5a0 <__assert_fail@plt+0xdc00>
   1f4e8:	ldr	r3, [sp, #12]
   1f4ec:	add	r6, r6, #24
   1f4f0:	str	r8, [sp, #40]	; 0x28
   1f4f4:	str	r4, [sp, #44]	; 0x2c
   1f4f8:	ldr	r4, [sp, #24]
   1f4fc:	cmp	r3, #0
   1f500:	bne	1f630 <__assert_fail@plt+0xdc90>
   1f504:	ldr	r8, [sp, #36]	; 0x24
   1f508:	ldr	r3, [r6, #-24]	; 0xffffffe8
   1f50c:	cmp	r5, r3
   1f510:	bne	1f570 <__assert_fail@plt+0xdbd0>
   1f514:	ldr	r3, [r6, #-8]
   1f518:	mov	r2, r9
   1f51c:	mov	r1, fp
   1f520:	mov	r0, sl
   1f524:	ldr	ip, [sp, #20]
   1f528:	tst	ip, r3
   1f52c:	beq	1f570 <__assert_fail@plt+0xdbd0>
   1f530:	ldr	r3, [r7, #20]
   1f534:	add	r3, r3, r8
   1f538:	ldr	r3, [r3, #8]
   1f53c:	ldr	ip, [r3]
   1f540:	cmp	r4, ip
   1f544:	mov	r3, ip
   1f548:	beq	1f624 <__assert_fail@plt+0xdc84>
   1f54c:	ldr	ip, [sp, #88]	; 0x58
   1f550:	str	ip, [sp]
   1f554:	bl	1f3ac <__assert_fail@plt+0xda0c>
   1f558:	cmn	r0, #1
   1f55c:	beq	1f49c <__assert_fail@plt+0xdafc>
   1f560:	ldr	r3, [r6, #-8]
   1f564:	ldr	r2, [sp, #32]
   1f568:	and	r3, r3, r2
   1f56c:	str	r3, [r6, #-8]
   1f570:	add	r6, r6, #24
   1f574:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   1f578:	cmp	r3, #0
   1f57c:	bne	1f508 <__assert_fail@plt+0xdb68>
   1f580:	ldr	r8, [sp, #40]	; 0x28
   1f584:	ldr	r4, [sp, #44]	; 0x2c
   1f588:	add	r4, r4, #1
   1f58c:	ldr	r1, [r8, #4]
   1f590:	cmp	r4, r1
   1f594:	blt	1f440 <__assert_fail@plt+0xdaa0>
   1f598:	asr	r0, fp, #1
   1f59c:	b	1f4a0 <__assert_fail@plt+0xdb00>
   1f5a0:	ldr	r2, [sp, #12]
   1f5a4:	add	r6, r6, #24
   1f5a8:	cmp	r2, #0
   1f5ac:	bne	1f6bc <__assert_fail@plt+0xdd1c>
   1f5b0:	str	r8, [sp, #36]	; 0x24
   1f5b4:	mov	r8, r3
   1f5b8:	str	r4, [sp, #40]	; 0x28
   1f5bc:	ldr	r4, [sp, #24]
   1f5c0:	mov	r2, r9
   1f5c4:	mov	r1, fp
   1f5c8:	ldr	r3, [r6, #-24]	; 0xffffffe8
   1f5cc:	mov	r0, sl
   1f5d0:	add	r6, r6, #24
   1f5d4:	cmp	r5, r3
   1f5d8:	bne	1f60c <__assert_fail@plt+0xdc6c>
   1f5dc:	ldr	r3, [r7, #20]
   1f5e0:	add	r3, r3, r8
   1f5e4:	ldr	r3, [r3, #8]
   1f5e8:	ldr	ip, [r3]
   1f5ec:	cmp	r4, ip
   1f5f0:	mov	r3, ip
   1f5f4:	beq	1f624 <__assert_fail@plt+0xdc84>
   1f5f8:	ldr	ip, [sp, #88]	; 0x58
   1f5fc:	str	ip, [sp]
   1f600:	bl	1f3ac <__assert_fail@plt+0xda0c>
   1f604:	cmn	r0, #1
   1f608:	beq	1f49c <__assert_fail@plt+0xdafc>
   1f60c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   1f610:	cmp	r3, #0
   1f614:	bne	1f5c0 <__assert_fail@plt+0xdc20>
   1f618:	ldr	r8, [sp, #36]	; 0x24
   1f61c:	ldr	r4, [sp, #40]	; 0x28
   1f620:	b	1f588 <__assert_fail@plt+0xdbe8>
   1f624:	ldr	r3, [sp, #16]
   1f628:	rsb	r0, r3, #0
   1f62c:	b	1f4a0 <__assert_fail@plt+0xdb00>
   1f630:	ldr	r8, [sp, #88]	; 0x58
   1f634:	b	1f658 <__assert_fail@plt+0xdcb8>
   1f638:	ldr	r3, [r6, #-8]
   1f63c:	ldr	r2, [sp, #32]
   1f640:	and	r3, r3, r2
   1f644:	str	r3, [r6, #-8]
   1f648:	add	r6, r6, #24
   1f64c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   1f650:	cmp	r3, #0
   1f654:	beq	1f580 <__assert_fail@plt+0xdbe0>
   1f658:	ldr	r3, [r6, #-24]	; 0xffffffe8
   1f65c:	cmp	r3, r5
   1f660:	bne	1f648 <__assert_fail@plt+0xdca8>
   1f664:	ldr	r3, [r6, #-8]
   1f668:	mov	r2, r9
   1f66c:	mov	r1, fp
   1f670:	mov	r0, sl
   1f674:	ldr	ip, [sp, #20]
   1f678:	tst	ip, r3
   1f67c:	beq	1f648 <__assert_fail@plt+0xdca8>
   1f680:	ldr	r3, [r7, #20]
   1f684:	ldr	ip, [sp, #36]	; 0x24
   1f688:	add	r3, r3, ip
   1f68c:	ldr	r3, [r3, #8]
   1f690:	ldr	ip, [r3]
   1f694:	cmp	r4, ip
   1f698:	mov	r3, ip
   1f69c:	beq	1f624 <__assert_fail@plt+0xdc84>
   1f6a0:	str	r8, [sp]
   1f6a4:	bl	1f3ac <__assert_fail@plt+0xda0c>
   1f6a8:	cmn	r0, #1
   1f6ac:	beq	1f49c <__assert_fail@plt+0xdafc>
   1f6b0:	cmp	r0, #0
   1f6b4:	bne	1f638 <__assert_fail@plt+0xdc98>
   1f6b8:	b	1f47c <__assert_fail@plt+0xdadc>
   1f6bc:	str	r8, [sp, #40]	; 0x28
   1f6c0:	str	r4, [sp, #44]	; 0x2c
   1f6c4:	ldr	r4, [sp, #24]
   1f6c8:	ldr	r8, [sp, #88]	; 0x58
   1f6cc:	b	1f6dc <__assert_fail@plt+0xdd3c>
   1f6d0:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   1f6d4:	cmp	r3, #0
   1f6d8:	beq	1f580 <__assert_fail@plt+0xdbe0>
   1f6dc:	ldr	r3, [r6, #-24]	; 0xffffffe8
   1f6e0:	mov	r2, r9
   1f6e4:	mov	r1, fp
   1f6e8:	mov	r0, sl
   1f6ec:	add	r6, r6, #24
   1f6f0:	cmp	r5, r3
   1f6f4:	bne	1f6d0 <__assert_fail@plt+0xdd30>
   1f6f8:	ldr	r3, [r7, #20]
   1f6fc:	ldr	ip, [sp, #36]	; 0x24
   1f700:	add	r3, r3, ip
   1f704:	ldr	r3, [r3, #8]
   1f708:	ldr	ip, [r3]
   1f70c:	cmp	r4, ip
   1f710:	mov	r3, ip
   1f714:	beq	1f624 <__assert_fail@plt+0xdc84>
   1f718:	str	r8, [sp]
   1f71c:	bl	1f3ac <__assert_fail@plt+0xda0c>
   1f720:	cmn	r0, #1
   1f724:	beq	1f49c <__assert_fail@plt+0xdafc>
   1f728:	cmp	r0, #0
   1f72c:	beq	1f47c <__assert_fail@plt+0xdadc>
   1f730:	b	1f6d0 <__assert_fail@plt+0xdd30>
   1f734:	ldr	r3, [r0, #80]	; 0x50
   1f738:	strd	r4, [sp, #-16]!
   1f73c:	mov	r4, r0
   1f740:	mov	r5, r1
   1f744:	str	r6, [sp, #8]
   1f748:	str	lr, [sp, #12]
   1f74c:	cmp	r3, #1
   1f750:	ble	1f798 <__assert_fail@plt+0xddf8>
   1f754:	cmn	r1, #-1073741823	; 0xc0000001
   1f758:	bhi	1f7d8 <__assert_fail@plt+0xde38>
   1f75c:	lsl	r6, r1, #2
   1f760:	ldr	r0, [r0, #8]
   1f764:	mov	r1, r6
   1f768:	bl	1f170 <__assert_fail@plt+0xd7d0>
   1f76c:	subs	r3, r0, #0
   1f770:	beq	1f7d8 <__assert_fail@plt+0xde38>
   1f774:	ldr	r0, [r4, #12]
   1f778:	str	r3, [r4, #8]
   1f77c:	cmp	r0, #0
   1f780:	beq	1f798 <__assert_fail@plt+0xddf8>
   1f784:	mov	r1, r6
   1f788:	bl	1f170 <__assert_fail@plt+0xd7d0>
   1f78c:	cmp	r0, #0
   1f790:	beq	1f7d8 <__assert_fail@plt+0xde38>
   1f794:	str	r0, [r4, #12]
   1f798:	ldrb	r3, [r4, #75]	; 0x4b
   1f79c:	cmp	r3, #0
   1f7a0:	bne	1f7bc <__assert_fail@plt+0xde1c>
   1f7a4:	str	r5, [r4, #36]	; 0x24
   1f7a8:	mov	r0, #0
   1f7ac:	ldrd	r4, [sp]
   1f7b0:	ldr	r6, [sp, #8]
   1f7b4:	add	sp, sp, #12
   1f7b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7bc:	mov	r1, r5
   1f7c0:	ldr	r0, [r4, #4]
   1f7c4:	bl	1f170 <__assert_fail@plt+0xd7d0>
   1f7c8:	cmp	r0, #0
   1f7cc:	beq	1f7d8 <__assert_fail@plt+0xde38>
   1f7d0:	str	r0, [r4, #4]
   1f7d4:	b	1f7a4 <__assert_fail@plt+0xde04>
   1f7d8:	ldrd	r4, [sp]
   1f7dc:	mov	r0, #12
   1f7e0:	ldr	r6, [sp, #8]
   1f7e4:	add	sp, sp, #12
   1f7e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7ec:	ldr	r3, [r1, #8]
   1f7f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f7f4:	mov	r4, #0
   1f7f8:	mov	r5, r1
   1f7fc:	strd	r6, [sp, #8]
   1f800:	mov	r7, r2
   1f804:	str	r8, [sp, #16]
   1f808:	mov	r8, r0
   1f80c:	str	lr, [sp, #20]
   1f810:	lsl	r0, r3, #2
   1f814:	str	r2, [r1]
   1f818:	str	r3, [r1, #16]
   1f81c:	str	r4, [r1, #20]
   1f820:	bl	1f0c4 <__assert_fail@plt+0xd724>
   1f824:	cmp	r0, r4
   1f828:	str	r0, [r5, #24]
   1f82c:	beq	1f908 <__assert_fail@plt+0xdf68>
   1f830:	ldr	r1, [r5, #8]
   1f834:	cmp	r1, #0
   1f838:	bgt	1f848 <__assert_fail@plt+0xdea8>
   1f83c:	b	1f894 <__assert_fail@plt+0xdef4>
   1f840:	cmp	r4, r1
   1f844:	bge	1f894 <__assert_fail@plt+0xdef4>
   1f848:	ldr	r2, [r5, #12]
   1f84c:	ldr	r3, [r8]
   1f850:	ldr	r6, [r2, r4, lsl #2]
   1f854:	add	r4, r4, #1
   1f858:	add	r3, r3, r6, lsl #3
   1f85c:	ldrb	r3, [r3, #4]
   1f860:	tst	r3, #8
   1f864:	bne	1f840 <__assert_fail@plt+0xdea0>
   1f868:	ldr	r3, [r5, #16]
   1f86c:	ldr	r1, [r5, #20]
   1f870:	ldr	r0, [r5, #24]
   1f874:	cmp	r3, r1
   1f878:	beq	1f8e0 <__assert_fail@plt+0xdf40>
   1f87c:	add	r3, r1, #1
   1f880:	str	r3, [r5, #20]
   1f884:	str	r6, [r0, r1, lsl #2]
   1f888:	ldr	r1, [r5, #8]
   1f88c:	cmp	r4, r1
   1f890:	blt	1f848 <__assert_fail@plt+0xdea8>
   1f894:	ldr	r6, [r8, #32]
   1f898:	ldr	r4, [r8, #68]	; 0x44
   1f89c:	and	r7, r7, r4
   1f8a0:	add	r7, r7, r7, lsl #1
   1f8a4:	lsl	r4, r7, #2
   1f8a8:	add	r7, r6, r4
   1f8ac:	ldr	r3, [r6, r4]
   1f8b0:	ldrd	r0, [r7, #4]
   1f8b4:	add	r2, r3, #1
   1f8b8:	cmp	r0, r3
   1f8bc:	ble	1f910 <__assert_fail@plt+0xdf70>
   1f8c0:	mov	r0, #0
   1f8c4:	str	r2, [r6, r4]
   1f8c8:	str	r5, [r1, r3, lsl #2]
   1f8cc:	ldrd	r4, [sp]
   1f8d0:	ldrd	r6, [sp, #8]
   1f8d4:	ldr	r8, [sp, #16]
   1f8d8:	add	sp, sp, #20
   1f8dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8e0:	add	r1, r1, #1
   1f8e4:	lsl	r3, r1, #1
   1f8e8:	lsl	r1, r1, #3
   1f8ec:	str	r3, [r5, #16]
   1f8f0:	bl	1f170 <__assert_fail@plt+0xd7d0>
   1f8f4:	cmp	r0, #0
   1f8f8:	beq	1f908 <__assert_fail@plt+0xdf68>
   1f8fc:	str	r0, [r5, #24]
   1f900:	ldr	r1, [r5, #20]
   1f904:	b	1f87c <__assert_fail@plt+0xdedc>
   1f908:	mov	r0, #12
   1f90c:	b	1f8cc <__assert_fail@plt+0xdf2c>
   1f910:	mov	r0, r1
   1f914:	lsl	r1, r2, #3
   1f918:	lsl	r8, r2, #1
   1f91c:	bl	1f170 <__assert_fail@plt+0xd7d0>
   1f920:	subs	r1, r0, #0
   1f924:	beq	1f908 <__assert_fail@plt+0xdf68>
   1f928:	ldr	r3, [r6, r4]
   1f92c:	str	r8, [r7, #4]
   1f930:	str	r1, [r7, #8]
   1f934:	add	r2, r3, #1
   1f938:	b	1f8c0 <__assert_fail@plt+0xdf20>
   1f93c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f940:	mov	r5, r0
   1f944:	ldr	r4, [r0, #28]
   1f948:	ldr	r3, [r0, #48]	; 0x30
   1f94c:	strd	r6, [sp, #8]
   1f950:	strd	r8, [sp, #16]
   1f954:	ldr	r8, [r0, #36]	; 0x24
   1f958:	str	lr, [sp, #24]
   1f95c:	sub	sp, sp, #84	; 0x54
   1f960:	cmp	r8, r3
   1f964:	movge	r8, r3
   1f968:	cmp	r8, r4
   1f96c:	ble	1fa00 <__assert_fail@plt+0xe060>
   1f970:	add	r9, r0, #16
   1f974:	ldr	r3, [r5, #64]	; 0x40
   1f978:	sub	r2, r8, r4
   1f97c:	ldrd	r0, [r9]
   1f980:	cmp	r3, #0
   1f984:	strd	r0, [sp, #8]
   1f988:	bne	1fa54 <__assert_fail@plt+0xe0b4>
   1f98c:	ldr	r1, [r5]
   1f990:	ldr	r3, [r5, #24]
   1f994:	add	r3, r4, r3
   1f998:	add	r1, r1, r3
   1f99c:	mov	r3, r9
   1f9a0:	add	r0, sp, #4
   1f9a4:	bl	1f100 <__assert_fail@plt+0xd760>
   1f9a8:	sub	r3, r0, #1
   1f9ac:	cmn	r3, #3
   1f9b0:	bhi	1fa20 <__assert_fail@plt+0xe080>
   1f9b4:	cmn	r0, #2
   1f9b8:	ldrne	lr, [sp, #4]
   1f9bc:	beq	1fafc <__assert_fail@plt+0xe15c>
   1f9c0:	add	r2, r4, #1
   1f9c4:	add	r1, r4, r0
   1f9c8:	lsl	r3, r4, #2
   1f9cc:	ldr	ip, [r5, #8]
   1f9d0:	cmp	r2, r1
   1f9d4:	str	lr, [ip, r4, lsl #2]
   1f9d8:	bge	1faec <__assert_fail@plt+0xe14c>
   1f9dc:	sub	r2, r0, #-1073741823	; 0xc0000001
   1f9e0:	add	r3, r3, #4
   1f9e4:	mov	r4, r1
   1f9e8:	lsl	r2, r2, #2
   1f9ec:	add	r0, ip, r3
   1f9f0:	mov	r1, #255	; 0xff
   1f9f4:	bl	11814 <memset@plt>
   1f9f8:	cmp	r4, r8
   1f9fc:	blt	1f974 <__assert_fail@plt+0xdfd4>
   1fa00:	str	r4, [r5, #28]
   1fa04:	str	r4, [r5, #32]
   1fa08:	add	sp, sp, #84	; 0x54
   1fa0c:	ldrd	r4, [sp]
   1fa10:	ldrd	r6, [sp, #8]
   1fa14:	ldrd	r8, [sp, #16]
   1fa18:	add	sp, sp, #24
   1fa1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa20:	ldr	r3, [r5]
   1fa24:	mov	r0, #1
   1fa28:	ldr	r1, [r5, #24]
   1fa2c:	ldr	r2, [r5, #64]	; 0x40
   1fa30:	add	r3, r3, r4
   1fa34:	ldrd	r6, [sp, #8]
   1fa38:	ldrb	lr, [r3, r1]
   1fa3c:	cmp	r2, #0
   1fa40:	str	lr, [sp, #4]
   1fa44:	ldrbne	lr, [r2, lr]
   1fa48:	strd	r6, [r9]
   1fa4c:	strne	lr, [sp, #4]
   1fa50:	b	1f9c0 <__assert_fail@plt+0xe020>
   1fa54:	ldr	r1, [r5, #80]	; 0x50
   1fa58:	cmp	r1, #0
   1fa5c:	cmpgt	r2, #0
   1fa60:	ble	1fae4 <__assert_fail@plt+0xe144>
   1fa64:	ldr	r1, [r5]
   1fa68:	ldr	r0, [r5, #4]
   1fa6c:	ldr	ip, [r5, #24]
   1fa70:	add	r1, r1, r4
   1fa74:	ldrb	r1, [r1, ip]
   1fa78:	ldrb	r1, [r3, r1]
   1fa7c:	strb	r1, [r0, r4]
   1fa80:	ldr	r3, [r5, #80]	; 0x50
   1fa84:	strb	r1, [sp, #16]
   1fa88:	cmp	r2, r3
   1fa8c:	movlt	r3, r2
   1fa90:	cmp	r3, #1
   1fa94:	ble	1fae4 <__assert_fail@plt+0xe144>
   1fa98:	add	r0, sp, #16
   1fa9c:	mov	r1, #1
   1faa0:	ldr	r3, [r5]
   1faa4:	ldr	ip, [r5, #24]
   1faa8:	ldr	lr, [r5, #64]	; 0x40
   1faac:	add	r3, r3, r4
   1fab0:	add	r3, r3, r1
   1fab4:	ldrb	ip, [r3, ip]
   1fab8:	ldr	r3, [r5, #4]
   1fabc:	ldrb	ip, [lr, ip]
   1fac0:	add	r3, r3, r1
   1fac4:	add	r1, r1, #1
   1fac8:	strb	ip, [r3, r4]
   1facc:	ldr	r3, [r5, #80]	; 0x50
   1fad0:	strb	ip, [r0, #1]!
   1fad4:	cmp	r2, r3
   1fad8:	movlt	r3, r2
   1fadc:	cmp	r3, r1
   1fae0:	bgt	1faa0 <__assert_fail@plt+0xe100>
   1fae4:	add	r1, sp, #16
   1fae8:	b	1f99c <__assert_fail@plt+0xdffc>
   1faec:	cmp	r8, r2
   1faf0:	mov	r4, r2
   1faf4:	bgt	1f974 <__assert_fail@plt+0xdfd4>
   1faf8:	b	1fa00 <__assert_fail@plt+0xe060>
   1fafc:	ldr	r2, [r5, #36]	; 0x24
   1fb00:	ldr	r3, [r5, #48]	; 0x30
   1fb04:	cmp	r2, r3
   1fb08:	bge	1fa20 <__assert_fail@plt+0xe080>
   1fb0c:	ldrd	r2, [sp, #8]
   1fb10:	strd	r2, [r5, #16]
   1fb14:	b	1fa00 <__assert_fail@plt+0xe060>
   1fb18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fb1c:	mov	r4, r0
   1fb20:	ldr	r5, [r0, #28]
   1fb24:	ldr	r3, [r0, #48]	; 0x30
   1fb28:	strd	r6, [sp, #8]
   1fb2c:	ldr	r6, [r0, #36]	; 0x24
   1fb30:	strd	r8, [sp, #16]
   1fb34:	strd	sl, [sp, #24]
   1fb38:	str	lr, [sp, #32]
   1fb3c:	sub	sp, sp, #108	; 0x6c
   1fb40:	ldrb	r2, [r0, #74]	; 0x4a
   1fb44:	cmp	r6, r3
   1fb48:	movge	r6, r3
   1fb4c:	cmp	r2, #0
   1fb50:	bne	1fb60 <__assert_fail@plt+0xe1c0>
   1fb54:	ldr	r3, [r0, #64]	; 0x40
   1fb58:	cmp	r3, #0
   1fb5c:	beq	1fca0 <__assert_fail@plt+0xe300>
   1fb60:	ldr	r7, [r4, #32]
   1fb64:	cmp	r5, r6
   1fb68:	bge	1fc78 <__assert_fail@plt+0xe2d8>
   1fb6c:	add	r3, r4, #16
   1fb70:	sub	fp, r6, r5
   1fb74:	str	r3, [sp, #20]
   1fb78:	add	r3, sp, #28
   1fb7c:	str	r3, [sp, #12]
   1fb80:	ldrd	r0, [r4, #16]
   1fb84:	ldr	r3, [r4, #64]	; 0x40
   1fb88:	strd	r0, [sp, #32]
   1fb8c:	cmp	r3, #0
   1fb90:	bne	1fe70 <__assert_fail@plt+0xe4d0>
   1fb94:	ldr	r8, [r4]
   1fb98:	ldr	r3, [r4, #24]
   1fb9c:	add	r3, r7, r3
   1fba0:	add	r3, r8, r3
   1fba4:	mov	r1, r3
   1fba8:	str	r3, [sp, #4]
   1fbac:	mov	r2, fp
   1fbb0:	ldr	r0, [sp, #12]
   1fbb4:	ldr	r3, [sp, #20]
   1fbb8:	bl	1f100 <__assert_fail@plt+0xd760>
   1fbbc:	sub	r3, r0, #1
   1fbc0:	mov	r8, r0
   1fbc4:	cmn	r3, #4
   1fbc8:	str	r3, [sp, #8]
   1fbcc:	bhi	1ff08 <__assert_fail@plt+0xe568>
   1fbd0:	ldr	r9, [sp, #28]
   1fbd4:	mov	fp, r5
   1fbd8:	mov	r0, r9
   1fbdc:	bl	11940 <towupper@plt>
   1fbe0:	cmp	r9, r0
   1fbe4:	mov	sl, r0
   1fbe8:	beq	1fef0 <__assert_fail@plt+0xe550>
   1fbec:	add	r9, sp, #40	; 0x28
   1fbf0:	add	r2, sp, #32
   1fbf4:	mov	r0, r9
   1fbf8:	mov	r1, sl
   1fbfc:	bl	1152c <wcrtomb@plt>
   1fc00:	cmp	r8, r0
   1fc04:	mov	r3, r0
   1fc08:	bne	1ff98 <__assert_fail@plt+0xe5f8>
   1fc0c:	ldr	r0, [r4, #4]
   1fc10:	mov	r1, r9
   1fc14:	mov	r2, r8
   1fc18:	add	r0, r0, r5
   1fc1c:	bl	115d4 <memcpy@plt>
   1fc20:	ldrb	r2, [r4, #76]	; 0x4c
   1fc24:	cmp	r2, #0
   1fc28:	bne	1ff78 <__assert_fail@plt+0xe5d8>
   1fc2c:	add	r2, r8, r7
   1fc30:	ldr	r0, [r4, #8]
   1fc34:	add	r5, r5, #1
   1fc38:	add	ip, r8, fp
   1fc3c:	cmp	r5, ip
   1fc40:	mov	r7, r2
   1fc44:	lsl	r1, fp, #2
   1fc48:	str	sl, [r0, fp, lsl #2]
   1fc4c:	bge	1fb64 <__assert_fail@plt+0xe1c4>
   1fc50:	sub	r2, r8, #-1073741823	; 0xc0000001
   1fc54:	add	r1, r1, #4
   1fc58:	lsl	r2, r2, #2
   1fc5c:	add	r0, r0, r1
   1fc60:	mov	r1, #255	; 0xff
   1fc64:	mov	r5, ip
   1fc68:	bl	11814 <memset@plt>
   1fc6c:	b	1fb64 <__assert_fail@plt+0xe1c4>
   1fc70:	ldrd	r2, [sp, #32]
   1fc74:	strd	r2, [r4, #16]
   1fc78:	mov	r0, #0
   1fc7c:	str	r5, [r4, #28]
   1fc80:	str	r7, [r4, #32]
   1fc84:	add	sp, sp, #108	; 0x6c
   1fc88:	ldrd	r4, [sp]
   1fc8c:	ldrd	r6, [sp, #8]
   1fc90:	ldrd	r8, [sp, #16]
   1fc94:	ldrd	sl, [sp, #24]
   1fc98:	add	sp, sp, #32
   1fc9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fca0:	ldrb	r3, [r0, #76]	; 0x4c
   1fca4:	cmp	r3, #0
   1fca8:	bne	1fb60 <__assert_fail@plt+0xe1c0>
   1fcac:	cmp	r5, r6
   1fcb0:	bge	1fee0 <__assert_fail@plt+0xe540>
   1fcb4:	add	sl, r0, #16
   1fcb8:	str	r6, [sp, #4]
   1fcbc:	str	sl, [sp, #20]
   1fcc0:	b	1fd40 <__assert_fail@plt+0xe3a0>
   1fcc4:	add	r3, sp, #40	; 0x28
   1fcc8:	add	r2, sp, #32
   1fccc:	mov	r0, r3
   1fcd0:	mov	r1, r9
   1fcd4:	str	r3, [sp, #8]
   1fcd8:	bl	1152c <wcrtomb@plt>
   1fcdc:	cmp	r7, r0
   1fce0:	bne	1fec8 <__assert_fail@plt+0xe528>
   1fce4:	ldr	r0, [r4, #4]
   1fce8:	mov	r2, r7
   1fcec:	ldr	r3, [sp, #8]
   1fcf0:	add	r0, r0, r5
   1fcf4:	mov	r1, r3
   1fcf8:	bl	115d4 <memcpy@plt>
   1fcfc:	ldr	r0, [r4, #8]
   1fd00:	add	r5, r5, #1
   1fd04:	add	ip, r7, r8
   1fd08:	cmp	r5, ip
   1fd0c:	lsl	r3, r8, #2
   1fd10:	str	r9, [r0, r8, lsl #2]
   1fd14:	bge	1fd34 <__assert_fail@plt+0xe394>
   1fd18:	sub	r2, r7, #-1073741823	; 0xc0000001
   1fd1c:	add	r3, r3, #4
   1fd20:	lsl	r2, r2, #2
   1fd24:	add	r0, r0, r3
   1fd28:	mov	r1, #255	; 0xff
   1fd2c:	mov	r5, ip
   1fd30:	bl	11814 <memset@plt>
   1fd34:	ldr	r3, [sp, #4]
   1fd38:	cmp	r3, r5
   1fd3c:	ble	1fee0 <__assert_fail@plt+0xe540>
   1fd40:	ldr	fp, [r4]
   1fd44:	mov	r8, r5
   1fd48:	ldr	r7, [r4, #24]
   1fd4c:	add	r2, fp, r7
   1fd50:	ldrb	r9, [r2, r5]
   1fd54:	tst	r9, #128	; 0x80
   1fd58:	bne	1fd7c <__assert_fail@plt+0xe3dc>
   1fd5c:	mov	r0, sl
   1fd60:	bl	11604 <mbsinit@plt>
   1fd64:	cmp	r0, #0
   1fd68:	beq	1fd7c <__assert_fail@plt+0xe3dc>
   1fd6c:	mov	r0, r9
   1fd70:	bl	11940 <towupper@plt>
   1fd74:	bics	r3, r0, #127	; 0x7f
   1fd78:	beq	1fe00 <__assert_fail@plt+0xe460>
   1fd7c:	ldr	r3, [sp, #4]
   1fd80:	add	r1, r7, r5
   1fd84:	add	r0, sp, #28
   1fd88:	add	r1, fp, r1
   1fd8c:	ldrd	r6, [sl]
   1fd90:	str	r0, [sp, #12]
   1fd94:	sub	r3, r3, r5
   1fd98:	mov	r2, r3
   1fd9c:	str	r3, [sp, #16]
   1fda0:	mov	r3, sl
   1fda4:	strd	r6, [sp, #32]
   1fda8:	bl	1f100 <__assert_fail@plt+0xd760>
   1fdac:	sub	r3, r0, #1
   1fdb0:	mov	r7, r0
   1fdb4:	cmn	r3, #4
   1fdb8:	bhi	1fe18 <__assert_fail@plt+0xe478>
   1fdbc:	ldr	r3, [sp, #28]
   1fdc0:	mov	r0, r3
   1fdc4:	str	r3, [sp, #8]
   1fdc8:	bl	11940 <towupper@plt>
   1fdcc:	ldr	r3, [sp, #8]
   1fdd0:	mov	r9, r0
   1fdd4:	cmp	r3, r0
   1fdd8:	bne	1fcc4 <__assert_fail@plt+0xe324>
   1fddc:	ldr	r1, [r4]
   1fde0:	mov	r2, r7
   1fde4:	ldr	r3, [r4, #24]
   1fde8:	ldr	r0, [r4, #4]
   1fdec:	add	r3, r5, r3
   1fdf0:	add	r1, r1, r3
   1fdf4:	add	r0, r0, r5
   1fdf8:	bl	115d4 <memcpy@plt>
   1fdfc:	b	1fcfc <__assert_fail@plt+0xe35c>
   1fe00:	ldr	r3, [r4, #4]
   1fe04:	strb	r0, [r3, r5]
   1fe08:	ldr	r3, [r4, #8]
   1fe0c:	str	r0, [r3, r5, lsl #2]
   1fe10:	add	r5, r5, #1
   1fe14:	b	1fd34 <__assert_fail@plt+0xe394>
   1fe18:	cmn	r3, #3
   1fe1c:	beq	1fe48 <__assert_fail@plt+0xe4a8>
   1fe20:	ldr	r3, [r4, #4]
   1fe24:	cmn	r0, #1
   1fe28:	strb	r9, [r3, r5]
   1fe2c:	add	r5, r5, #1
   1fe30:	ldr	r3, [r4, #8]
   1fe34:	str	r9, [r3, r8, lsl #2]
   1fe38:	bne	1fd34 <__assert_fail@plt+0xe394>
   1fe3c:	ldrd	r2, [sp, #32]
   1fe40:	strd	r2, [sl]
   1fe44:	b	1fd34 <__assert_fail@plt+0xe394>
   1fe48:	ldr	r2, [r4, #36]	; 0x24
   1fe4c:	ldr	r3, [r4, #48]	; 0x30
   1fe50:	cmp	r2, r3
   1fe54:	blt	1fed8 <__assert_fail@plt+0xe538>
   1fe58:	ldr	r3, [r4, #4]
   1fe5c:	strb	r9, [r3, r5]
   1fe60:	add	r5, r5, #1
   1fe64:	ldr	r3, [r4, #8]
   1fe68:	str	r9, [r3, r8, lsl #2]
   1fe6c:	b	1fd34 <__assert_fail@plt+0xe394>
   1fe70:	ldr	lr, [r4, #80]	; 0x50
   1fe74:	cmp	fp, #0
   1fe78:	cmpgt	lr, #0
   1fe7c:	ble	20160 <__assert_fail@plt+0xe7c0>
   1fe80:	ldr	r8, [r4]
   1fe84:	cmp	lr, fp
   1fe88:	add	r9, sp, #40	; 0x28
   1fe8c:	movge	lr, fp
   1fe90:	mov	r1, r9
   1fe94:	ldr	r2, [r4, #24]
   1fe98:	add	r2, r7, r2
   1fe9c:	add	r8, r8, r2
   1fea0:	mov	r2, r8
   1fea4:	ldrb	r0, [r2], #1
   1fea8:	ldrb	r0, [r3, r0]
   1feac:	sub	ip, r2, r8
   1feb0:	cmp	ip, lr
   1feb4:	strb	r0, [r1], #1
   1feb8:	blt	1fea4 <__assert_fail@plt+0xe504>
   1febc:	mov	r1, r9
   1fec0:	str	r9, [sp, #4]
   1fec4:	b	1fbac <__assert_fail@plt+0xe20c>
   1fec8:	mov	r7, r5
   1fecc:	ldr	r6, [sp, #4]
   1fed0:	ldr	fp, [sp, #16]
   1fed4:	b	1fb80 <__assert_fail@plt+0xe1e0>
   1fed8:	ldrd	r2, [sp, #32]
   1fedc:	strd	r2, [sl]
   1fee0:	mov	r0, #0
   1fee4:	str	r5, [r4, #28]
   1fee8:	str	r5, [r4, #32]
   1feec:	b	1fc84 <__assert_fail@plt+0xe2e4>
   1fef0:	ldr	r0, [r4, #4]
   1fef4:	mov	r2, r8
   1fef8:	ldr	r1, [sp, #4]
   1fefc:	add	r0, r0, r5
   1ff00:	bl	115d4 <memcpy@plt>
   1ff04:	b	1fc20 <__assert_fail@plt+0xe280>
   1ff08:	cmn	r3, #3
   1ff0c:	bne	1ff20 <__assert_fail@plt+0xe580>
   1ff10:	ldr	r1, [r4, #36]	; 0x24
   1ff14:	ldr	r2, [r4, #48]	; 0x30
   1ff18:	cmp	r1, r2
   1ff1c:	blt	1fc70 <__assert_fail@plt+0xe2d0>
   1ff20:	ldr	r2, [r4]
   1ff24:	ldr	r0, [r4, #24]
   1ff28:	ldr	r1, [r4, #64]	; 0x40
   1ff2c:	add	r2, r2, r7
   1ff30:	ldrb	r2, [r2, r0]
   1ff34:	cmp	r1, #0
   1ff38:	ldr	r0, [r4, #4]
   1ff3c:	ldrbne	r2, [r1, r2]
   1ff40:	lsl	r1, r5, #2
   1ff44:	strb	r2, [r0, r5]
   1ff48:	ldrb	r0, [r4, #76]	; 0x4c
   1ff4c:	cmp	r0, #0
   1ff50:	ldrne	r0, [r4, #12]
   1ff54:	strne	r7, [r0, r5, lsl #2]
   1ff58:	cmn	r8, #1
   1ff5c:	add	r7, r7, #1
   1ff60:	ldr	r0, [r4, #8]
   1ff64:	add	r5, r5, #1
   1ff68:	str	r2, [r0, r1]
   1ff6c:	ldrdeq	r2, [sp, #32]
   1ff70:	strdeq	r2, [r4, #16]
   1ff74:	b	1fb64 <__assert_fail@plt+0xe1c4>
   1ff78:	ldr	r1, [r4, #12]
   1ff7c:	add	r2, r8, r7
   1ff80:	add	r1, r1, r5, lsl #2
   1ff84:	str	r7, [r1], #4
   1ff88:	add	r7, r7, #1
   1ff8c:	cmp	r7, r2
   1ff90:	bne	1ff84 <__assert_fail@plt+0xe5e4>
   1ff94:	b	1fc30 <__assert_fail@plt+0xe290>
   1ff98:	cmn	r0, #1
   1ff9c:	beq	1fef0 <__assert_fail@plt+0xe550>
   1ffa0:	add	r2, r0, r5
   1ffa4:	ldr	r0, [r4, #36]	; 0x24
   1ffa8:	str	r2, [sp, #4]
   1ffac:	cmp	r2, r0
   1ffb0:	bhi	1fc70 <__assert_fail@plt+0xe2d0>
   1ffb4:	ldr	r2, [r4, #12]
   1ffb8:	cmp	r2, #0
   1ffbc:	beq	20168 <__assert_fail@plt+0xe7c8>
   1ffc0:	ldrb	r0, [r4, #76]	; 0x4c
   1ffc4:	cmp	r0, #0
   1ffc8:	bne	20068 <__assert_fail@plt+0xe6c8>
   1ffcc:	cmp	r5, #0
   1ffd0:	beq	20060 <__assert_fail@plt+0xe6c0>
   1ffd4:	ldr	r2, [r4, #12]
   1ffd8:	sub	r1, r5, #1
   1ffdc:	cmp	r1, #3
   1ffe0:	ubfx	r1, r2, #2, #1
   1ffe4:	bls	2018c <__assert_fail@plt+0xe7ec>
   1ffe8:	cmp	r1, #0
   1ffec:	sub	fp, r5, r1
   1fff0:	lsr	ip, fp, #1
   1fff4:	mov	r6, r1
   1fff8:	add	lr, r1, #1
   1fffc:	strne	r0, [r2]
   20000:	add	r0, r2, r1, lsl #2
   20004:	add	ip, r0, ip, lsl #3
   20008:	stm	r0, {r6, lr}
   2000c:	add	r0, r0, #8
   20010:	add	r6, r6, #2
   20014:	cmp	ip, r0
   20018:	add	lr, lr, #2
   2001c:	bne	20008 <__assert_fail@plt+0xe668>
   20020:	bic	r0, fp, #1
   20024:	cmp	r0, fp
   20028:	add	r1, r0, r1
   2002c:	beq	20060 <__assert_fail@plt+0xe6c0>
   20030:	add	ip, r1, #1
   20034:	str	r1, [r2, r1, lsl #2]
   20038:	cmp	ip, r5
   2003c:	bcs	20060 <__assert_fail@plt+0xe6c0>
   20040:	add	r0, r1, #2
   20044:	str	ip, [r2, ip, lsl #2]
   20048:	cmp	r0, r5
   2004c:	bcs	20060 <__assert_fail@plt+0xe6c0>
   20050:	add	r1, r1, #3
   20054:	str	r0, [r2, r0, lsl #2]
   20058:	cmp	r1, r5
   2005c:	strcc	r1, [r2, r1, lsl #2]
   20060:	mov	r2, #1
   20064:	strb	r2, [r4, #76]	; 0x4c
   20068:	ldr	r0, [r4, #4]
   2006c:	mov	r2, r3
   20070:	mov	r1, r9
   20074:	str	r3, [sp, #12]
   20078:	add	r0, r0, r5
   2007c:	bl	115d4 <memcpy@plt>
   20080:	ldr	r3, [sp, #12]
   20084:	lsl	r2, r5, #2
   20088:	ldr	r0, [r4, #8]
   2008c:	ldr	ip, [r4, #12]
   20090:	cmp	r3, #1
   20094:	add	lr, r0, r2
   20098:	str	sl, [r0, r5, lsl #2]
   2009c:	add	r2, ip, r2
   200a0:	str	r7, [ip, r5, lsl #2]
   200a4:	bls	20120 <__assert_fail@plt+0xe780>
   200a8:	cmp	r8, #1
   200ac:	movls	r2, #1
   200b0:	bls	200ec <__assert_fail@plt+0xe74c>
   200b4:	cmp	r8, r3
   200b8:	mov	r1, r2
   200bc:	movcc	sl, r8
   200c0:	movcs	sl, r3
   200c4:	mov	r2, #1
   200c8:	mvn	r6, #0
   200cc:	add	r9, r2, r7
   200d0:	add	r2, r2, #1
   200d4:	cmp	r2, sl
   200d8:	str	r9, [r1, #4]!
   200dc:	str	r6, [lr, #4]!
   200e0:	bcc	200cc <__assert_fail@plt+0xe72c>
   200e4:	cmp	r3, r2
   200e8:	bls	20120 <__assert_fail@plt+0xe780>
   200ec:	ldr	lr, [sp, #8]
   200f0:	sub	r1, r5, #-1073741823	; 0xc0000001
   200f4:	mvn	r5, #0
   200f8:	add	r1, r1, r2
   200fc:	lsl	r1, r1, #2
   20100:	add	ip, ip, r1
   20104:	add	r0, r0, r1
   20108:	add	lr, lr, r7
   2010c:	add	r2, r2, #1
   20110:	str	lr, [ip, #4]!
   20114:	cmp	r3, r2
   20118:	str	r5, [r0, #4]!
   2011c:	bhi	2010c <__assert_fail@plt+0xe76c>
   20120:	ldr	r6, [r4, #48]	; 0x30
   20124:	sub	r2, r3, r8
   20128:	ldr	r1, [r4, #52]	; 0x34
   2012c:	add	r6, r2, r6
   20130:	cmp	r1, r7
   20134:	str	r6, [r4, #48]	; 0x30
   20138:	ble	20148 <__assert_fail@plt+0xe7a8>
   2013c:	ldr	r1, [r4, #56]	; 0x38
   20140:	add	r2, r1, r2
   20144:	str	r2, [r4, #56]	; 0x38
   20148:	ldr	r2, [r4, #36]	; 0x24
   2014c:	add	r7, r8, r7
   20150:	ldr	r5, [sp, #4]
   20154:	cmp	r6, r2
   20158:	movge	r6, r2
   2015c:	b	1fb64 <__assert_fail@plt+0xe1c4>
   20160:	add	r9, sp, #40	; 0x28
   20164:	b	1febc <__assert_fail@plt+0xe51c>
   20168:	lsl	r0, r0, #2
   2016c:	str	r3, [sp, #12]
   20170:	bl	1f0c4 <__assert_fail@plt+0xd724>
   20174:	cmp	r0, #0
   20178:	str	r0, [r4, #12]
   2017c:	moveq	r0, #12
   20180:	ldr	r3, [sp, #12]
   20184:	bne	1ffc0 <__assert_fail@plt+0xe620>
   20188:	b	1fc84 <__assert_fail@plt+0xe2e4>
   2018c:	mov	r1, r0
   20190:	b	20030 <__assert_fail@plt+0xe690>
   20194:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20198:	mov	r4, r0
   2019c:	ldr	ip, [r0, #8]
   201a0:	strd	r6, [sp, #8]
   201a4:	ldr	r6, [r0, #4]
   201a8:	strd	r8, [sp, #16]
   201ac:	str	sl, [sp, #24]
   201b0:	str	lr, [sp, #28]
   201b4:	sub	sp, sp, #8
   201b8:	add	r3, sp, #8
   201bc:	cmp	ip, r6
   201c0:	stmdb	r3, {r1, r2}
   201c4:	ldrb	r5, [sp, #4]
   201c8:	bcs	20298 <__assert_fail@plt+0xe8f8>
   201cc:	ldr	r7, [r0, #12]
   201d0:	ldr	r6, [r0, #20]
   201d4:	lsl	r0, ip, #3
   201d8:	cmp	r5, #5
   201dc:	ldr	lr, [r4]
   201e0:	ldrd	r2, [sp]
   201e4:	add	r1, lr, r0
   201e8:	strd	r2, [lr, r0]
   201ec:	ldr	r3, [r1, #4]
   201f0:	bfc	r3, #8, #10
   201f4:	str	r3, [r1, #4]
   201f8:	beq	20284 <__assert_fail@plt+0xe8e4>
   201fc:	sub	r5, r5, #6
   20200:	clz	r5, r5
   20204:	lsr	r5, r5, #5
   20208:	ldrb	r3, [r1, #6]
   2020c:	mvn	r0, #0
   20210:	mov	r2, #0
   20214:	bfi	r3, r5, #4, #1
   20218:	strb	r3, [r1, #6]
   2021c:	str	r0, [r7, ip, lsl #2]
   20220:	ldr	r3, [r4, #8]
   20224:	add	r3, r3, r3, lsl #1
   20228:	lsl	r3, r3, #2
   2022c:	add	r1, r6, r3
   20230:	str	r2, [r6, r3]
   20234:	str	r2, [r1, #4]
   20238:	str	r2, [r1, #8]
   2023c:	ldr	r3, [r4, #8]
   20240:	ldr	r0, [r4, #24]
   20244:	add	r3, r3, r3, lsl #1
   20248:	lsl	r3, r3, #2
   2024c:	add	r1, r0, r3
   20250:	str	r2, [r0, r3]
   20254:	str	r2, [r1, #4]
   20258:	str	r2, [r1, #8]
   2025c:	ldr	r0, [r4, #8]
   20260:	add	r3, r0, #1
   20264:	str	r3, [r4, #8]
   20268:	add	sp, sp, #8
   2026c:	ldrd	r4, [sp]
   20270:	ldrd	r6, [sp, #8]
   20274:	ldrd	r8, [sp, #16]
   20278:	ldr	sl, [sp, #24]
   2027c:	add	sp, sp, #28
   20280:	pop	{pc}		; (ldr pc, [sp], #4)
   20284:	ldr	r5, [r4, #92]	; 0x5c
   20288:	cmp	r5, #1
   2028c:	movle	r5, #0
   20290:	movgt	r5, #1
   20294:	b	20208 <__assert_fail@plt+0xe868>
   20298:	lsl	r9, r6, #1
   2029c:	movw	r3, #21845	; 0x5555
   202a0:	movt	r3, #5461	; 0x1555
   202a4:	cmp	r9, r3
   202a8:	bhi	20364 <__assert_fail@plt+0xe9c4>
   202ac:	lsl	r1, r6, #4
   202b0:	ldr	r0, [r0]
   202b4:	bl	1f170 <__assert_fail@plt+0xd7d0>
   202b8:	cmp	r0, #0
   202bc:	beq	20364 <__assert_fail@plt+0xe9c4>
   202c0:	lsl	r8, r6, #3
   202c4:	str	r0, [r4]
   202c8:	add	r6, r9, r6
   202cc:	ldr	r0, [r4, #12]
   202d0:	mov	r1, r8
   202d4:	bl	1f170 <__assert_fail@plt+0xd7d0>
   202d8:	mov	r7, r0
   202dc:	mov	r1, r8
   202e0:	lsl	r8, r6, #3
   202e4:	ldr	r0, [r4, #16]
   202e8:	bl	1f170 <__assert_fail@plt+0xd7d0>
   202ec:	mov	sl, r0
   202f0:	mov	r1, r8
   202f4:	ldr	r0, [r4, #20]
   202f8:	bl	1f170 <__assert_fail@plt+0xd7d0>
   202fc:	mov	r6, r0
   20300:	mov	r1, r8
   20304:	ldr	r0, [r4, #24]
   20308:	bl	1f170 <__assert_fail@plt+0xd7d0>
   2030c:	cmp	sl, #0
   20310:	cmpne	r7, #0
   20314:	mov	r8, r0
   20318:	beq	20344 <__assert_fail@plt+0xe9a4>
   2031c:	cmp	r0, #0
   20320:	cmpne	r6, #0
   20324:	beq	20344 <__assert_fail@plt+0xe9a4>
   20328:	str	r9, [r4, #4]
   2032c:	str	r7, [r4, #12]
   20330:	str	sl, [r4, #16]
   20334:	str	r6, [r4, #20]
   20338:	str	r0, [r4, #24]
   2033c:	ldr	ip, [r4, #8]
   20340:	b	201d4 <__assert_fail@plt+0xe834>
   20344:	mov	r0, r7
   20348:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2034c:	mov	r0, sl
   20350:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   20354:	mov	r0, r6
   20358:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2035c:	mov	r0, r8
   20360:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   20364:	mvn	r0, #0
   20368:	b	20268 <__assert_fail@plt+0xe8c8>
   2036c:	ldr	r3, [r0, #124]	; 0x7c
   20370:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20374:	strd	r6, [sp, #8]
   20378:	str	r8, [sp, #16]
   2037c:	mov	r8, r0
   20380:	str	lr, [sp, #20]
   20384:	cmp	r3, #0
   20388:	ble	2040c <__assert_fail@plt+0xea6c>
   2038c:	mov	r7, #0
   20390:	ldr	r3, [r8, #132]	; 0x84
   20394:	ldr	r6, [r3, r7, lsl #2]
   20398:	ldr	r3, [r6, #16]
   2039c:	cmp	r3, #0
   203a0:	ble	203d0 <__assert_fail@plt+0xea30>
   203a4:	mov	r4, #0
   203a8:	ldr	r3, [r6, #20]
   203ac:	ldr	r5, [r3, r4, lsl #2]
   203b0:	add	r4, r4, #1
   203b4:	ldr	r0, [r5, #16]
   203b8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   203bc:	mov	r0, r5
   203c0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   203c4:	ldr	r3, [r6, #16]
   203c8:	cmp	r3, r4
   203cc:	bgt	203a8 <__assert_fail@plt+0xea08>
   203d0:	ldr	r0, [r6, #20]
   203d4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   203d8:	ldr	r3, [r6, #8]
   203dc:	cmp	r3, #0
   203e0:	beq	2042c <__assert_fail@plt+0xea8c>
   203e4:	ldr	r0, [r3, #8]
   203e8:	add	r7, r7, #1
   203ec:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   203f0:	ldr	r0, [r6, #8]
   203f4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   203f8:	mov	r0, r6
   203fc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   20400:	ldr	r3, [r8, #124]	; 0x7c
   20404:	cmp	r3, r7
   20408:	bgt	20390 <__assert_fail@plt+0xe9f0>
   2040c:	mov	r3, #0
   20410:	ldrd	r4, [sp]
   20414:	ldrd	r6, [sp, #8]
   20418:	str	r3, [r8, #108]	; 0x6c
   2041c:	str	r3, [r8, #124]	; 0x7c
   20420:	ldr	r8, [sp, #16]
   20424:	add	sp, sp, #20
   20428:	pop	{pc}		; (ldr pc, [sp], #4)
   2042c:	mov	r0, r6
   20430:	add	r7, r7, #1
   20434:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   20438:	ldr	r3, [r8, #124]	; 0x7c
   2043c:	cmp	r3, r7
   20440:	bgt	20390 <__assert_fail@plt+0xe9f0>
   20444:	b	2040c <__assert_fail@plt+0xea6c>
   20448:	ldr	r3, [r0]
   2044c:	strd	r4, [sp, #-16]!
   20450:	mov	r4, r0
   20454:	str	r6, [sp, #8]
   20458:	mov	r6, r1
   2045c:	str	lr, [sp, #12]
   20460:	cmp	r3, #0
   20464:	beq	20498 <__assert_fail@plt+0xeaf8>
   20468:	ldmib	r0, {r1, r5}
   2046c:	cmp	r1, #0
   20470:	bne	204dc <__assert_fail@plt+0xeb3c>
   20474:	str	r6, [r5]
   20478:	mov	r0, #1
   2047c:	ldr	r3, [r4, #4]
   20480:	add	r3, r3, r0
   20484:	str	r3, [r4, #4]
   20488:	ldrd	r4, [sp]
   2048c:	ldr	r6, [sp, #8]
   20490:	add	sp, sp, #12
   20494:	pop	{pc}		; (ldr pc, [sp], #4)
   20498:	mov	r5, #1
   2049c:	mov	r0, #4
   204a0:	str	r5, [r4]
   204a4:	str	r5, [r4, #4]
   204a8:	bl	1f0c4 <__assert_fail@plt+0xd724>
   204ac:	mov	r3, r0
   204b0:	cmp	r0, #0
   204b4:	str	r0, [r4, #8]
   204b8:	streq	r3, [r4]
   204bc:	streq	r3, [r4, #4]
   204c0:	beq	20488 <__assert_fail@plt+0xeae8>
   204c4:	mov	r0, r5
   204c8:	str	r6, [r3]
   204cc:	ldrd	r4, [sp]
   204d0:	ldr	r6, [sp, #8]
   204d4:	add	sp, sp, #12
   204d8:	pop	{pc}		; (ldr pc, [sp], #4)
   204dc:	cmp	r3, r1
   204e0:	beq	20560 <__assert_fail@plt+0xebc0>
   204e4:	ldr	r3, [r5]
   204e8:	mov	r2, r1
   204ec:	cmp	r3, r6
   204f0:	ble	20528 <__assert_fail@plt+0xeb88>
   204f4:	cmp	r1, #0
   204f8:	ble	20510 <__assert_fail@plt+0xeb70>
   204fc:	lsl	r2, r1, #2
   20500:	add	r0, r5, #4
   20504:	mov	r1, r5
   20508:	bl	1158c <memmove@plt>
   2050c:	mov	r2, #0
   20510:	str	r6, [r5, r2, lsl #2]
   20514:	mov	r0, #1
   20518:	ldr	r3, [r4, #4]
   2051c:	add	r3, r3, r0
   20520:	str	r3, [r4, #4]
   20524:	b	20488 <__assert_fail@plt+0xeae8>
   20528:	sub	r3, r1, #-1073741823	; 0xc0000001
   2052c:	ldr	r0, [r5, r3, lsl #2]
   20530:	lsl	r3, r3, #2
   20534:	cmp	r6, r0
   20538:	bge	20510 <__assert_fail@plt+0xeb70>
   2053c:	add	r3, r3, #4
   20540:	add	r3, r5, r3
   20544:	str	r0, [r3], #-4
   20548:	sub	r1, r1, #1
   2054c:	ldr	r0, [r3, #-4]
   20550:	mov	r2, r1
   20554:	cmp	r0, r6
   20558:	bgt	20544 <__assert_fail@plt+0xeba4>
   2055c:	b	20510 <__assert_fail@plt+0xeb70>
   20560:	lsl	r3, r1, #1
   20564:	mov	r0, r5
   20568:	lsl	r1, r1, #3
   2056c:	str	r3, [r4]
   20570:	bl	1f170 <__assert_fail@plt+0xd7d0>
   20574:	subs	r5, r0, #0
   20578:	beq	20588 <__assert_fail@plt+0xebe8>
   2057c:	str	r5, [r4, #8]
   20580:	ldr	r1, [r4, #4]
   20584:	b	204e4 <__assert_fail@plt+0xeb44>
   20588:	mov	r0, r5
   2058c:	b	20488 <__assert_fail@plt+0xeae8>
   20590:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20594:	subs	r4, r0, #0
   20598:	strd	r6, [sp, #8]
   2059c:	str	r8, [sp, #16]
   205a0:	str	lr, [sp, #20]
   205a4:	ldr	r7, [sp, #28]
   205a8:	beq	20654 <__assert_fail@plt+0xecb4>
   205ac:	ldr	ip, [r4]
   205b0:	cmp	ip, #0
   205b4:	beq	20654 <__assert_fail@plt+0xecb4>
   205b8:	sub	ip, ip, #1
   205bc:	ldr	lr, [r4, #8]
   205c0:	mov	r0, r3
   205c4:	add	r5, ip, ip, lsl #1
   205c8:	mov	r8, r1
   205cc:	lsl	r6, r2, #3
   205d0:	lsl	r5, r5, #3
   205d4:	mov	r2, r6
   205d8:	ldr	r3, [lr, r5]
   205dc:	add	lr, lr, r5
   205e0:	ldr	r1, [lr, #8]
   205e4:	str	ip, [r4]
   205e8:	str	r3, [r8]
   205ec:	bl	115d4 <memcpy@plt>
   205f0:	ldr	r3, [r4, #8]
   205f4:	mov	r2, r6
   205f8:	ldr	r0, [sp, #24]
   205fc:	add	r3, r3, r5
   20600:	ldr	r1, [r3, #8]
   20604:	add	r1, r1, r6
   20608:	bl	115d4 <memcpy@plt>
   2060c:	ldr	r0, [r7, #8]
   20610:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   20614:	ldr	r3, [r4, #8]
   20618:	add	r3, r3, r5
   2061c:	ldr	r0, [r3, #8]
   20620:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   20624:	ldr	r3, [r4, #8]
   20628:	add	r5, r3, r5
   2062c:	ldr	r0, [r5, #4]
   20630:	ldrd	r2, [r5, #12]
   20634:	strd	r2, [r7]
   20638:	ldr	r3, [r5, #20]
   2063c:	str	r3, [r7, #8]
   20640:	ldrd	r4, [sp]
   20644:	ldrd	r6, [sp, #8]
   20648:	ldr	r8, [sp, #16]
   2064c:	add	sp, sp, #20
   20650:	pop	{pc}		; (ldr pc, [sp], #4)
   20654:	mvn	r0, #0
   20658:	b	20640 <__assert_fail@plt+0xeca0>
   2065c:	ldr	ip, [r1, #4]
   20660:	cmp	ip, #0
   20664:	beq	207fc <__assert_fail@plt+0xee5c>
   20668:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2066c:	strd	r6, [sp, #8]
   20670:	str	lr, [sp, #28]
   20674:	ldr	lr, [r2, #4]
   20678:	strd	r8, [sp, #16]
   2067c:	str	sl, [sp, #24]
   20680:	cmp	lr, #0
   20684:	beq	20784 <__assert_fail@plt+0xede4>
   20688:	ldr	r4, [r0]
   2068c:	mov	r9, r2
   20690:	add	r2, ip, lr
   20694:	mov	r8, r1
   20698:	mov	r7, r0
   2069c:	ldmib	r0, {r3, sl}
   206a0:	add	r1, r2, r3
   206a4:	cmp	r1, r4
   206a8:	bgt	2080c <__assert_fail@plt+0xee6c>
   206ac:	ldr	r0, [r8, #8]
   206b0:	add	r1, r3, ip
   206b4:	sub	r5, ip, #1
   206b8:	sub	r6, lr, #1
   206bc:	add	r1, r1, lr
   206c0:	ldr	r2, [r9, #8]
   206c4:	sub	r3, r3, #1
   206c8:	ldr	ip, [r0, r5, lsl #2]
   206cc:	ldr	lr, [r2, r6, lsl #2]
   206d0:	cmp	ip, lr
   206d4:	beq	206f0 <__assert_fail@plt+0xed50>
   206d8:	bge	207a4 <__assert_fail@plt+0xee04>
   206dc:	subs	r6, r6, #1
   206e0:	bmi	20740 <__assert_fail@plt+0xeda0>
   206e4:	ldr	lr, [r2, r6, lsl #2]
   206e8:	cmp	ip, lr
   206ec:	bne	206d8 <__assert_fail@plt+0xed38>
   206f0:	cmp	r3, #0
   206f4:	blt	20720 <__assert_fail@plt+0xed80>
   206f8:	ldr	r4, [sl, r3, lsl #2]
   206fc:	add	lr, sl, r3, lsl #2
   20700:	cmp	r4, ip
   20704:	bgt	20718 <__assert_fail@plt+0xed78>
   20708:	b	207b4 <__assert_fail@plt+0xee14>
   2070c:	ldr	r4, [lr, #-4]!
   20710:	cmp	r4, ip
   20714:	ble	207b4 <__assert_fail@plt+0xee14>
   20718:	subs	r3, r3, #1
   2071c:	bcs	2070c <__assert_fail@plt+0xed6c>
   20720:	sub	r1, r1, #1
   20724:	str	ip, [sl, r1, lsl #2]
   20728:	subs	r5, r5, #1
   2072c:	bmi	20740 <__assert_fail@plt+0xeda0>
   20730:	subs	r6, r6, #1
   20734:	bmi	20740 <__assert_fail@plt+0xeda0>
   20738:	ldr	ip, [r0, r5, lsl #2]
   2073c:	b	206e4 <__assert_fail@plt+0xed44>
   20740:	ldr	ip, [r7, #4]
   20744:	ldr	r0, [r8, #4]
   20748:	ldr	r2, [r9, #4]
   2074c:	sub	r3, ip, #1
   20750:	add	r0, ip, r0
   20754:	add	r0, r0, r2
   20758:	sub	r2, r0, r1
   2075c:	sub	r0, r0, #1
   20760:	add	ip, ip, r2
   20764:	cmp	r3, #0
   20768:	cmpge	r2, #0
   2076c:	str	ip, [r7, #4]
   20770:	bgt	207d0 <__assert_fail@plt+0xee30>
   20774:	lsl	r2, r2, #2
   20778:	add	r1, sl, r1, lsl #2
   2077c:	mov	r0, sl
   20780:	bl	115d4 <memcpy@plt>
   20784:	mov	ip, #0
   20788:	ldrd	r4, [sp]
   2078c:	mov	r0, ip
   20790:	ldrd	r6, [sp, #8]
   20794:	ldrd	r8, [sp, #16]
   20798:	ldr	sl, [sp, #24]
   2079c:	add	sp, sp, #28
   207a0:	pop	{pc}		; (ldr pc, [sp], #4)
   207a4:	subs	r5, r5, #1
   207a8:	bmi	20740 <__assert_fail@plt+0xeda0>
   207ac:	ldr	ip, [r0, r5, lsl #2]
   207b0:	b	206d0 <__assert_fail@plt+0xed30>
   207b4:	cmp	r4, ip
   207b8:	bne	20720 <__assert_fail@plt+0xed80>
   207bc:	b	20728 <__assert_fail@plt+0xed88>
   207c0:	sub	r3, r3, #1
   207c4:	str	ip, [sl, r4, lsl #2]
   207c8:	cmn	r3, #1
   207cc:	beq	20804 <__assert_fail@plt+0xee64>
   207d0:	ldr	lr, [sl, r0, lsl #2]
   207d4:	add	r4, r3, r2
   207d8:	ldr	ip, [sl, r3, lsl #2]
   207dc:	cmp	lr, ip
   207e0:	ble	207c0 <__assert_fail@plt+0xee20>
   207e4:	subs	r2, r2, #1
   207e8:	sub	r0, r0, #1
   207ec:	str	lr, [sl, r4, lsl #2]
   207f0:	bne	207d0 <__assert_fail@plt+0xee30>
   207f4:	ldr	sl, [r7, #8]
   207f8:	b	20778 <__assert_fail@plt+0xedd8>
   207fc:	mov	r0, ip
   20800:	bx	lr
   20804:	ldr	sl, [r7, #8]
   20808:	b	20774 <__assert_fail@plt+0xedd4>
   2080c:	add	r4, r2, r4
   20810:	mov	r0, sl
   20814:	lsl	r1, r4, #2
   20818:	bl	1f170 <__assert_fail@plt+0xd7d0>
   2081c:	subs	sl, r0, #0
   20820:	beq	2083c <__assert_fail@plt+0xee9c>
   20824:	ldr	ip, [r8, #4]
   20828:	ldr	lr, [r9, #4]
   2082c:	str	r4, [r7]
   20830:	str	sl, [r7, #8]
   20834:	ldr	r3, [r7, #4]
   20838:	b	206ac <__assert_fail@plt+0xed0c>
   2083c:	mov	ip, #12
   20840:	b	20788 <__assert_fail@plt+0xede8>
   20844:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20848:	strd	r6, [sp, #8]
   2084c:	subs	r6, r1, #0
   20850:	str	r8, [sp, #16]
   20854:	str	lr, [sp, #20]
   20858:	beq	20968 <__assert_fail@plt+0xefc8>
   2085c:	ldr	r2, [r6, #4]
   20860:	cmp	r2, #0
   20864:	mov	ip, r2
   20868:	beq	20968 <__assert_fail@plt+0xefc8>
   2086c:	ldm	r0, {r1, r3}
   20870:	mov	r5, r0
   20874:	add	r4, r3, r2, lsl #1
   20878:	cmp	r1, r4
   2087c:	blt	209a4 <__assert_fail@plt+0xf004>
   20880:	cmp	r3, #0
   20884:	beq	209e4 <__assert_fail@plt+0xf044>
   20888:	sub	r2, r2, #1
   2088c:	sub	r3, r3, #1
   20890:	mvn	lr, r3
   20894:	mvn	ip, r2
   20898:	tst	lr, ip
   2089c:	bpl	208f8 <__assert_fail@plt+0xef58>
   208a0:	ldr	r7, [r5, #8]
   208a4:	ldr	r8, [r6, #8]
   208a8:	b	208d0 <__assert_fail@plt+0xef30>
   208ac:	subge	r3, r3, #1
   208b0:	mvnge	lr, r3
   208b4:	bge	208c8 <__assert_fail@plt+0xef28>
   208b8:	sub	r2, r2, #1
   208bc:	sub	r4, r4, #1
   208c0:	mvn	ip, r2
   208c4:	str	r1, [r7, r4, lsl #2]
   208c8:	tst	ip, lr
   208cc:	bpl	208f8 <__assert_fail@plt+0xef58>
   208d0:	ldr	r0, [r7, r3, lsl #2]
   208d4:	ldr	r1, [r8, r2, lsl #2]
   208d8:	cmp	r0, r1
   208dc:	bne	208ac <__assert_fail@plt+0xef0c>
   208e0:	sub	r2, r2, #1
   208e4:	sub	r3, r3, #1
   208e8:	mvn	lr, r3
   208ec:	mvn	ip, r2
   208f0:	tst	ip, lr
   208f4:	bmi	208d0 <__assert_fail@plt+0xef30>
   208f8:	cmp	r2, #0
   208fc:	blt	2091c <__assert_fail@plt+0xef7c>
   20900:	ldr	r0, [r5, #8]
   20904:	add	r2, r2, #1
   20908:	sub	r4, r4, r2
   2090c:	lsl	r2, r2, #2
   20910:	ldr	r1, [r6, #8]
   20914:	add	r0, r0, r4, lsl #2
   20918:	bl	115d4 <memcpy@plt>
   2091c:	ldr	r3, [r5, #4]
   20920:	ldr	r0, [r6, #4]
   20924:	add	r0, r3, r0, lsl #1
   20928:	subs	r2, r0, r4
   2092c:	sub	r0, r0, #1
   20930:	beq	20968 <__assert_fail@plt+0xefc8>
   20934:	ldr	r1, [r5, #8]
   20938:	add	ip, r3, r2
   2093c:	sub	r3, r3, #1
   20940:	str	ip, [r5, #4]
   20944:	ldr	lr, [r1, r0, lsl #2]
   20948:	add	r5, r3, r2
   2094c:	ldr	ip, [r1, r3, lsl #2]
   20950:	cmp	lr, ip
   20954:	ble	20980 <__assert_fail@plt+0xefe0>
   20958:	subs	r2, r2, #1
   2095c:	sub	r0, r0, #1
   20960:	str	lr, [r1, r5, lsl #2]
   20964:	bne	20944 <__assert_fail@plt+0xefa4>
   20968:	mov	r0, #0
   2096c:	ldrd	r4, [sp]
   20970:	ldrd	r6, [sp, #8]
   20974:	ldr	r8, [sp, #16]
   20978:	add	sp, sp, #20
   2097c:	pop	{pc}		; (ldr pc, [sp], #4)
   20980:	subs	r3, r3, #1
   20984:	str	ip, [r1, r5, lsl #2]
   20988:	bpl	20944 <__assert_fail@plt+0xefa4>
   2098c:	mov	r0, r1
   20990:	lsl	r2, r2, #2
   20994:	add	r1, r1, r4, lsl #2
   20998:	bl	115d4 <memcpy@plt>
   2099c:	mov	r0, #0
   209a0:	b	2096c <__assert_fail@plt+0xefcc>
   209a4:	add	r2, r2, r1
   209a8:	ldr	r0, [r0, #8]
   209ac:	lsl	r1, r2, #3
   209b0:	lsl	r4, r2, #1
   209b4:	bl	1f170 <__assert_fail@plt+0xd7d0>
   209b8:	cmp	r0, #0
   209bc:	beq	20a00 <__assert_fail@plt+0xf060>
   209c0:	ldr	r3, [r5, #4]
   209c4:	str	r4, [r5]
   209c8:	str	r0, [r5, #8]
   209cc:	cmp	r3, #0
   209d0:	ldreq	ip, [r6, #4]
   209d4:	beq	209e8 <__assert_fail@plt+0xf048>
   209d8:	ldr	r2, [r6, #4]
   209dc:	add	r4, r3, r2, lsl #1
   209e0:	b	20888 <__assert_fail@plt+0xeee8>
   209e4:	ldr	r0, [r0, #8]
   209e8:	ldr	r1, [r6, #8]
   209ec:	str	ip, [r5, #4]
   209f0:	ldr	r2, [r6, #4]
   209f4:	lsl	r2, r2, #2
   209f8:	bl	115d4 <memcpy@plt>
   209fc:	b	20968 <__assert_fail@plt+0xefc8>
   20a00:	mov	r0, #12
   20a04:	b	2096c <__assert_fail@plt+0xefcc>
   20a08:	cmp	r1, #0
   20a0c:	strd	r4, [sp, #-16]!
   20a10:	mov	r5, r0
   20a14:	str	r6, [sp, #8]
   20a18:	str	lr, [sp, #12]
   20a1c:	blt	20ad0 <__assert_fail@plt+0xf130>
   20a20:	ldr	r3, [r0, #48]	; 0x30
   20a24:	cmp	r3, r1
   20a28:	beq	20ae4 <__assert_fail@plt+0xf144>
   20a2c:	ldr	r3, [r0, #80]	; 0x50
   20a30:	cmp	r3, #1
   20a34:	ble	20a84 <__assert_fail@plt+0xf0e4>
   20a38:	ldr	r3, [r0, #8]
   20a3c:	add	r3, r3, r1, lsl #2
   20a40:	b	20a4c <__assert_fail@plt+0xf0ac>
   20a44:	cmn	r1, #1
   20a48:	beq	20ad0 <__assert_fail@plt+0xf130>
   20a4c:	ldr	r4, [r3], #-4
   20a50:	sub	r1, r1, #1
   20a54:	cmn	r4, #1
   20a58:	beq	20a44 <__assert_fail@plt+0xf0a4>
   20a5c:	ldrb	r3, [r5, #78]	; 0x4e
   20a60:	cmp	r3, #0
   20a64:	bne	20af4 <__assert_fail@plt+0xf154>
   20a68:	cmp	r4, #10
   20a6c:	movne	r0, #0
   20a70:	beq	20ab0 <__assert_fail@plt+0xf110>
   20a74:	ldrd	r4, [sp]
   20a78:	ldr	r6, [sp, #8]
   20a7c:	add	sp, sp, #12
   20a80:	pop	{pc}		; (ldr pc, [sp], #4)
   20a84:	ldr	r3, [r0, #4]
   20a88:	ldr	r0, [r0, #68]	; 0x44
   20a8c:	ldrb	r3, [r3, r1]
   20a90:	asr	r1, r3, #5
   20a94:	and	r2, r3, #31
   20a98:	ldr	r0, [r0, r1, lsl #2]
   20a9c:	lsr	r0, r0, r2
   20aa0:	ands	r0, r0, #1
   20aa4:	bne	20a74 <__assert_fail@plt+0xf0d4>
   20aa8:	cmp	r3, #10
   20aac:	bne	20a74 <__assert_fail@plt+0xf0d4>
   20ab0:	ldrb	r3, [r5, #77]	; 0x4d
   20ab4:	ldrd	r4, [sp]
   20ab8:	ldr	r6, [sp, #8]
   20abc:	add	sp, sp, #12
   20ac0:	cmp	r3, #0
   20ac4:	moveq	r0, #0
   20ac8:	movne	r0, #2
   20acc:	pop	{pc}		; (ldr pc, [sp], #4)
   20ad0:	ldr	r6, [sp, #8]
   20ad4:	ldr	r0, [r5, #60]	; 0x3c
   20ad8:	ldrd	r4, [sp]
   20adc:	add	sp, sp, #12
   20ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   20ae4:	tst	r2, #2
   20ae8:	movne	r0, #8
   20aec:	moveq	r0, #10
   20af0:	b	20a74 <__assert_fail@plt+0xf0d4>
   20af4:	mov	r0, r4
   20af8:	bl	117e4 <iswalnum@plt>
   20afc:	sub	r3, r4, #95	; 0x5f
   20b00:	cmp	r0, #0
   20b04:	clz	r3, r3
   20b08:	lsr	r3, r3, #5
   20b0c:	movne	r3, #1
   20b10:	cmp	r3, #0
   20b14:	movne	r0, #1
   20b18:	bne	20a74 <__assert_fail@plt+0xf0d4>
   20b1c:	b	20a68 <__assert_fail@plt+0xf0c8>
   20b20:	ldrb	ip, [r1, #4]
   20b24:	str	r4, [sp, #-8]!
   20b28:	ldr	r3, [r0, #4]
   20b2c:	str	lr, [sp, #4]
   20b30:	sub	ip, ip, #1
   20b34:	ldrb	r3, [r3, r2]
   20b38:	cmp	ip, #6
   20b3c:	ldrls	pc, [pc, ip, lsl #2]
   20b40:	b	20b6c <__assert_fail@plt+0xf1cc>
   20b44:	andeq	r0, r2, r0, ror #22
   20b48:	andeq	r0, r2, ip, ror #22
   20b4c:	andeq	r0, r2, r0, lsl ip
   20b50:	andeq	r0, r2, ip, ror #22
   20b54:	andeq	r0, r2, r4, lsl #23
   20b58:	andeq	r0, r2, ip, ror #22
   20b5c:	andeq	r0, r2, ip, ror fp
   20b60:	ldrb	ip, [r1]
   20b64:	cmp	ip, r3
   20b68:	beq	20ba4 <__assert_fail@plt+0xf204>
   20b6c:	mov	r0, #0
   20b70:	ldr	r4, [sp]
   20b74:	add	sp, sp, #4
   20b78:	pop	{pc}		; (ldr pc, [sp], #4)
   20b7c:	tst	r3, #128	; 0x80
   20b80:	bne	20b6c <__assert_fail@plt+0xf1cc>
   20b84:	cmp	r3, #10
   20b88:	beq	20c44 <__assert_fail@plt+0xf2a4>
   20b8c:	cmp	r3, #0
   20b90:	bne	20ba4 <__assert_fail@plt+0xf204>
   20b94:	ldr	ip, [r0, #84]	; 0x54
   20b98:	ldr	ip, [ip, #128]	; 0x80
   20b9c:	tst	ip, #128	; 0x80
   20ba0:	bne	20b6c <__assert_fail@plt+0xf1cc>
   20ba4:	ldr	r4, [r1, #4]
   20ba8:	mov	r3, #65280	; 0xff00
   20bac:	movt	r3, #3
   20bb0:	and	r3, r3, r4
   20bb4:	cmp	r3, #0
   20bb8:	beq	20c00 <__assert_fail@plt+0xf260>
   20bbc:	mov	r1, r2
   20bc0:	ldr	r2, [r0, #88]	; 0x58
   20bc4:	bl	20a08 <__assert_fail@plt+0xf068>
   20bc8:	ubfx	r1, r4, #8, #10
   20bcc:	ands	r2, r1, #4
   20bd0:	bne	20c30 <__assert_fail@plt+0xf290>
   20bd4:	tst	r1, #8
   20bd8:	beq	20be4 <__assert_fail@plt+0xf244>
   20bdc:	tst	r0, #1
   20be0:	bne	20b6c <__assert_fail@plt+0xf1cc>
   20be4:	tst	r1, #32
   20be8:	beq	20bf4 <__assert_fail@plt+0xf254>
   20bec:	ands	r3, r0, #2
   20bf0:	beq	20b6c <__assert_fail@plt+0xf1cc>
   20bf4:	tst	r1, #128	; 0x80
   20bf8:	ubfxne	r0, r0, #3, #1
   20bfc:	bne	20b70 <__assert_fail@plt+0xf1d0>
   20c00:	ldr	r4, [sp]
   20c04:	add	sp, sp, #4
   20c08:	mov	r0, #1
   20c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   20c10:	ldr	ip, [r1]
   20c14:	asr	lr, r3, #5
   20c18:	and	r3, r3, #31
   20c1c:	ldr	ip, [ip, lr, lsl #2]
   20c20:	lsr	r3, ip, r3
   20c24:	ands	r3, r3, #1
   20c28:	bne	20ba4 <__assert_fail@plt+0xf204>
   20c2c:	b	20b6c <__assert_fail@plt+0xf1cc>
   20c30:	ands	r3, r0, #1
   20c34:	beq	20b6c <__assert_fail@plt+0xf1cc>
   20c38:	tst	r1, #8
   20c3c:	beq	20be4 <__assert_fail@plt+0xf244>
   20c40:	b	20b6c <__assert_fail@plt+0xf1cc>
   20c44:	ldr	r3, [r0, #84]	; 0x54
   20c48:	ldr	r3, [r3, #128]	; 0x80
   20c4c:	ands	r3, r3, #64	; 0x40
   20c50:	bne	20ba4 <__assert_fail@plt+0xf204>
   20c54:	b	20b6c <__assert_fail@plt+0xf1cc>
   20c58:	strd	r4, [sp, #-16]!
   20c5c:	mov	r4, r1
   20c60:	mov	r1, r2
   20c64:	ldr	r2, [r0, #88]	; 0x58
   20c68:	mov	r5, r0
   20c6c:	str	r6, [sp, #8]
   20c70:	str	lr, [sp, #12]
   20c74:	bl	20a08 <__assert_fail@plt+0xf068>
   20c78:	ldr	r1, [r4, #8]
   20c7c:	cmp	r1, #0
   20c80:	ble	20cec <__assert_fail@plt+0xf34c>
   20c84:	ldr	ip, [r5, #84]	; 0x54
   20c88:	ands	r3, r0, #1
   20c8c:	and	r2, r0, #2
   20c90:	and	r0, r0, #8
   20c94:	ldr	lr, [r4, #12]
   20c98:	ldr	ip, [ip]
   20c9c:	beq	20d00 <__assert_fail@plt+0xf360>
   20ca0:	cmp	r2, #0
   20ca4:	beq	20e30 <__assert_fail@plt+0xf490>
   20ca8:	cmp	r0, #0
   20cac:	beq	20ec0 <__assert_fail@plt+0xf520>
   20cb0:	mov	r2, #0
   20cb4:	ldr	r0, [lr, r2, lsl #2]
   20cb8:	add	r2, r2, #1
   20cbc:	add	r3, ip, r0, lsl #3
   20cc0:	ldrb	r4, [r3, #4]
   20cc4:	ldr	r3, [r3, #4]
   20cc8:	cmp	r4, #2
   20ccc:	ubfx	r3, r3, #8, #10
   20cd0:	bne	20ce4 <__assert_fail@plt+0xf344>
   20cd4:	cmp	r3, #0
   20cd8:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20cdc:	tst	r3, #8
   20ce0:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20ce4:	cmp	r1, r2
   20ce8:	bne	20cb4 <__assert_fail@plt+0xf314>
   20cec:	ldrd	r4, [sp]
   20cf0:	mov	r0, #0
   20cf4:	ldr	r6, [sp, #8]
   20cf8:	add	sp, sp, #12
   20cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   20d00:	cmp	r2, #0
   20d04:	beq	20da0 <__assert_fail@plt+0xf400>
   20d08:	cmp	r0, #0
   20d0c:	sub	lr, lr, #4
   20d10:	beq	20d60 <__assert_fail@plt+0xf3c0>
   20d14:	ldr	r0, [lr, #4]!
   20d18:	add	r3, r3, #1
   20d1c:	add	r2, ip, r0, lsl #3
   20d20:	ldrb	r4, [r2, #4]
   20d24:	ldr	r2, [r2, #4]
   20d28:	cmp	r4, #2
   20d2c:	ubfx	r2, r2, #8, #10
   20d30:	bne	20d54 <__assert_fail@plt+0xf3b4>
   20d34:	cmp	r2, #0
   20d38:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20d3c:	tst	r2, #4
   20d40:	bne	20d54 <__assert_fail@plt+0xf3b4>
   20d44:	ldrd	r4, [sp]
   20d48:	ldr	r6, [sp, #8]
   20d4c:	add	sp, sp, #12
   20d50:	pop	{pc}		; (ldr pc, [sp], #4)
   20d54:	cmp	r1, r3
   20d58:	bne	20d14 <__assert_fail@plt+0xf374>
   20d5c:	b	20cec <__assert_fail@plt+0xf34c>
   20d60:	mov	r3, r0
   20d64:	ldr	r0, [lr, #4]!
   20d68:	add	r3, r3, #1
   20d6c:	add	r2, ip, r0, lsl #3
   20d70:	ldrb	r4, [r2, #4]
   20d74:	ldr	r2, [r2, #4]
   20d78:	cmp	r4, #2
   20d7c:	ubfx	r2, r2, #8, #10
   20d80:	bne	20d94 <__assert_fail@plt+0xf3f4>
   20d84:	cmp	r2, #0
   20d88:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20d8c:	tst	r2, #132	; 0x84
   20d90:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20d94:	cmp	r1, r3
   20d98:	bne	20d64 <__assert_fail@plt+0xf3c4>
   20d9c:	b	20cec <__assert_fail@plt+0xf34c>
   20da0:	cmp	r0, #0
   20da4:	beq	20dec <__assert_fail@plt+0xf44c>
   20da8:	sub	lr, lr, #4
   20dac:	mov	r3, r2
   20db0:	ldr	r0, [lr, #4]!
   20db4:	add	r3, r3, #1
   20db8:	add	r2, ip, r0, lsl #3
   20dbc:	ldrb	r4, [r2, #4]
   20dc0:	ldr	r2, [r2, #4]
   20dc4:	cmp	r4, #2
   20dc8:	ubfx	r2, r2, #8, #10
   20dcc:	bne	20de0 <__assert_fail@plt+0xf440>
   20dd0:	cmp	r2, #0
   20dd4:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20dd8:	tst	r2, #36	; 0x24
   20ddc:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20de0:	cmp	r1, r3
   20de4:	bne	20db0 <__assert_fail@plt+0xf410>
   20de8:	b	20cec <__assert_fail@plt+0xf34c>
   20dec:	sub	r2, lr, #4
   20df0:	mov	r3, r0
   20df4:	ldr	r0, [r2, #4]!
   20df8:	add	r3, r3, #1
   20dfc:	add	lr, ip, r0, lsl #3
   20e00:	ldrb	r4, [lr, #4]
   20e04:	ldr	lr, [lr, #4]
   20e08:	cmp	r4, #2
   20e0c:	ubfx	lr, lr, #8, #10
   20e10:	bne	20e24 <__assert_fail@plt+0xf484>
   20e14:	cmp	lr, #0
   20e18:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20e1c:	tst	lr, #164	; 0xa4
   20e20:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20e24:	cmp	r1, r3
   20e28:	bne	20df4 <__assert_fail@plt+0xf454>
   20e2c:	b	20cec <__assert_fail@plt+0xf34c>
   20e30:	cmp	r0, #0
   20e34:	beq	20e78 <__assert_fail@plt+0xf4d8>
   20e38:	mov	r3, r2
   20e3c:	ldr	r0, [lr, r3, lsl #2]
   20e40:	add	r2, ip, r0, lsl #3
   20e44:	ldrb	r4, [r2, #4]
   20e48:	ldr	r2, [r2, #4]
   20e4c:	cmp	r4, #2
   20e50:	ubfx	r2, r2, #8, #10
   20e54:	bne	20e68 <__assert_fail@plt+0xf4c8>
   20e58:	cmp	r2, #0
   20e5c:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20e60:	tst	r2, #8
   20e64:	beq	20f00 <__assert_fail@plt+0xf560>
   20e68:	add	r3, r3, #1
   20e6c:	cmp	r1, r3
   20e70:	bne	20e3c <__assert_fail@plt+0xf49c>
   20e74:	b	20cec <__assert_fail@plt+0xf34c>
   20e78:	mov	r3, r0
   20e7c:	ldr	r0, [lr, r3, lsl #2]
   20e80:	add	r2, ip, r0, lsl #3
   20e84:	ldrb	r4, [r2, #4]
   20e88:	ldr	r2, [r2, #4]
   20e8c:	cmp	r4, #2
   20e90:	ubfx	r2, r2, #8, #10
   20e94:	bne	20eb0 <__assert_fail@plt+0xf510>
   20e98:	cmp	r2, #0
   20e9c:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20ea0:	tst	r2, #8
   20ea4:	bne	20eb0 <__assert_fail@plt+0xf510>
   20ea8:	tst	r2, #160	; 0xa0
   20eac:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20eb0:	add	r3, r3, #1
   20eb4:	cmp	r3, r1
   20eb8:	bne	20e7c <__assert_fail@plt+0xf4dc>
   20ebc:	b	20cec <__assert_fail@plt+0xf34c>
   20ec0:	mov	r3, r0
   20ec4:	ldr	r0, [lr, r3, lsl #2]
   20ec8:	add	r2, ip, r0, lsl #3
   20ecc:	ldrb	r4, [r2, #4]
   20ed0:	ldr	r2, [r2, #4]
   20ed4:	cmp	r4, #2
   20ed8:	ubfx	r2, r2, #8, #10
   20edc:	bne	20ef0 <__assert_fail@plt+0xf550>
   20ee0:	cmp	r2, #0
   20ee4:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20ee8:	tst	r2, #8
   20eec:	beq	20f0c <__assert_fail@plt+0xf56c>
   20ef0:	add	r3, r3, #1
   20ef4:	cmp	r1, r3
   20ef8:	bne	20ec4 <__assert_fail@plt+0xf524>
   20efc:	b	20cec <__assert_fail@plt+0xf34c>
   20f00:	tst	r2, #32
   20f04:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20f08:	b	20e68 <__assert_fail@plt+0xf4c8>
   20f0c:	tst	r2, #128	; 0x80
   20f10:	beq	20d44 <__assert_fail@plt+0xf3a4>
   20f14:	b	20ef0 <__assert_fail@plt+0xf550>
   20f18:	ldr	r3, [r0, #24]
   20f1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20f20:	mov	r4, r0
   20f24:	strd	r6, [sp, #8]
   20f28:	mov	r7, r1
   20f2c:	strd	r8, [sp, #16]
   20f30:	mov	r8, r2
   20f34:	strd	sl, [sp, #24]
   20f38:	cmp	r3, r1
   20f3c:	str	lr, [sp, #32]
   20f40:	sub	sp, sp, #36	; 0x24
   20f44:	suble	r5, r1, r3
   20f48:	ble	20fac <__assert_fail@plt+0xf60c>
   20f4c:	ldr	r3, [r0, #80]	; 0x50
   20f50:	cmp	r3, #1
   20f54:	ble	20f64 <__assert_fail@plt+0xf5c4>
   20f58:	mov	r2, #0
   20f5c:	mov	r3, #0
   20f60:	strd	r2, [r0, #16]
   20f64:	ldrb	r3, [r4, #75]	; 0x4b
   20f68:	tst	r8, #1
   20f6c:	mov	r9, #0
   20f70:	movne	r1, #4
   20f74:	moveq	r1, #6
   20f78:	ldr	r0, [r4, #44]	; 0x2c
   20f7c:	str	r9, [r4, #24]
   20f80:	ldr	r2, [r4, #52]	; 0x34
   20f84:	cmp	r3, r9
   20f88:	str	r9, [r4, #28]
   20f8c:	movne	r3, r9
   20f90:	movne	r5, r7
   20f94:	str	r9, [r4, #32]
   20f98:	str	r0, [r4, #48]	; 0x30
   20f9c:	str	r2, [r4, #56]	; 0x38
   20fa0:	str	r1, [r4, #60]	; 0x3c
   20fa4:	strb	r9, [r4, #76]	; 0x4c
   20fa8:	beq	21088 <__assert_fail@plt+0xf6e8>
   20fac:	cmp	r5, #0
   20fb0:	beq	2109c <__assert_fail@plt+0xf6fc>
   20fb4:	ldrb	r2, [r4, #76]	; 0x4c
   20fb8:	ldr	r1, [r4, #32]
   20fbc:	ldr	r6, [r4, #28]
   20fc0:	cmp	r1, r5
   20fc4:	ble	21170 <__assert_fail@plt+0xf7d0>
   20fc8:	cmp	r2, #0
   20fcc:	bne	212d4 <__assert_fail@plt+0xf934>
   20fd0:	mov	r2, r8
   20fd4:	sub	r1, r5, #1
   20fd8:	mov	r0, r4
   20fdc:	bl	20a08 <__assert_fail@plt+0xf068>
   20fe0:	ldr	r3, [r4, #80]	; 0x50
   20fe4:	sub	r2, r6, r5
   20fe8:	str	r0, [r4, #60]	; 0x3c
   20fec:	cmp	r3, #1
   20ff0:	bgt	210ac <__assert_fail@plt+0xf70c>
   20ff4:	ldrb	r3, [r4, #75]	; 0x4b
   20ff8:	cmp	r3, #0
   20ffc:	bne	21314 <__assert_fail@plt+0xf974>
   21000:	ldr	ip, [r4, #32]
   21004:	str	r2, [r4, #28]
   21008:	ldr	r1, [r4, #48]	; 0x30
   2100c:	ldr	r0, [r4, #56]	; 0x38
   21010:	sub	ip, ip, r5
   21014:	ldr	r2, [r4, #80]	; 0x50
   21018:	sub	r1, r1, r5
   2101c:	str	ip, [r4, #32]
   21020:	sub	r0, r0, r5
   21024:	cmp	r3, #0
   21028:	bne	21038 <__assert_fail@plt+0xf698>
   2102c:	ldr	r3, [r4, #4]
   21030:	add	r5, r3, r5
   21034:	str	r5, [r4, #4]
   21038:	cmp	r2, #1
   2103c:	str	r7, [r4, #24]
   21040:	str	r1, [r4, #48]	; 0x30
   21044:	str	r0, [r4, #56]	; 0x38
   21048:	ble	210d8 <__assert_fail@plt+0xf738>
   2104c:	ldrb	r3, [r4, #72]	; 0x48
   21050:	mov	r0, r4
   21054:	cmp	r3, #0
   21058:	bne	210c8 <__assert_fail@plt+0xf728>
   2105c:	bl	1f93c <__assert_fail@plt+0xdf9c>
   21060:	mov	r3, #0
   21064:	mov	r0, r3
   21068:	str	r3, [r4, #40]	; 0x28
   2106c:	add	sp, sp, #36	; 0x24
   21070:	ldrd	r4, [sp]
   21074:	ldrd	r6, [sp, #8]
   21078:	ldrd	r8, [sp, #16]
   2107c:	ldrd	sl, [sp, #24]
   21080:	add	sp, sp, #32
   21084:	pop	{pc}		; (ldr pc, [sp], #4)
   21088:	ldr	r2, [r4]
   2108c:	mov	r5, r7
   21090:	cmp	r5, #0
   21094:	str	r2, [r4, #4]
   21098:	bne	20fb4 <__assert_fail@plt+0xf614>
   2109c:	ldr	r1, [r4, #48]	; 0x30
   210a0:	ldr	r0, [r4, #56]	; 0x38
   210a4:	ldr	r2, [r4, #80]	; 0x50
   210a8:	b	21038 <__assert_fail@plt+0xf698>
   210ac:	ldr	r0, [r4, #8]
   210b0:	lsl	r2, r2, #2
   210b4:	add	r1, r0, r5, lsl #2
   210b8:	bl	1158c <memmove@plt>
   210bc:	ldr	r2, [r4, #28]
   210c0:	sub	r2, r2, r5
   210c4:	b	20ff4 <__assert_fail@plt+0xf654>
   210c8:	bl	1fb18 <__assert_fail@plt+0xe178>
   210cc:	cmp	r0, #0
   210d0:	beq	21060 <__assert_fail@plt+0xf6c0>
   210d4:	b	2106c <__assert_fail@plt+0xf6cc>
   210d8:	ldrb	r3, [r4, #75]	; 0x4b
   210dc:	cmp	r3, #0
   210e0:	streq	r1, [r4, #28]
   210e4:	beq	21060 <__assert_fail@plt+0xf6c0>
   210e8:	ldrb	r3, [r4, #72]	; 0x48
   210ec:	cmp	r3, #0
   210f0:	bne	215d4 <__assert_fail@plt+0xfc34>
   210f4:	ldr	r0, [r4, #64]	; 0x40
   210f8:	cmp	r0, #0
   210fc:	beq	21060 <__assert_fail@plt+0xf6c0>
   21100:	ldr	r2, [r4, #28]
   21104:	ldr	r3, [r4, #36]	; 0x24
   21108:	cmp	r1, r3
   2110c:	movge	r1, r3
   21110:	cmp	r1, r2
   21114:	ble	217ac <__assert_fail@plt+0xfe0c>
   21118:	ldm	r4, {ip, lr}
   2111c:	add	r3, r2, #1
   21120:	cmp	r1, r3
   21124:	add	ip, ip, r2
   21128:	ldrb	ip, [ip, r7]
   2112c:	ldrb	r0, [r0, ip]
   21130:	strb	r0, [lr, r2]
   21134:	ble	21164 <__assert_fail@plt+0xf7c4>
   21138:	ldr	r2, [r4]
   2113c:	ldr	r0, [r4, #24]
   21140:	ldr	ip, [r4, #64]	; 0x40
   21144:	add	r2, r2, r3
   21148:	ldrb	r0, [r2, r0]
   2114c:	ldr	r2, [r4, #4]
   21150:	ldrb	r0, [ip, r0]
   21154:	strb	r0, [r2, r3]
   21158:	add	r3, r3, #1
   2115c:	cmp	r1, r3
   21160:	bne	21138 <__assert_fail@plt+0xf798>
   21164:	str	r1, [r4, #28]
   21168:	str	r1, [r4, #32]
   2116c:	b	21060 <__assert_fail@plt+0xf6c0>
   21170:	cmp	r2, #0
   21174:	bne	216dc <__assert_fail@plt+0xfd3c>
   21178:	ldr	r2, [r4, #80]	; 0x50
   2117c:	mov	r0, #0
   21180:	str	r0, [r4, #28]
   21184:	cmp	r2, #1
   21188:	ble	21494 <__assert_fail@plt+0xfaf4>
   2118c:	ldrb	r0, [r4, #73]	; 0x49
   21190:	cmp	r0, #0
   21194:	beq	21208 <__assert_fail@plt+0xf868>
   21198:	ldr	ip, [r4]
   2119c:	sub	r2, r5, r2
   211a0:	sub	r0, r5, #1
   211a4:	add	lr, ip, r3
   211a8:	add	r2, lr, r2
   211ac:	add	r9, lr, r0
   211b0:	cmp	ip, r2
   211b4:	str	lr, [sp]
   211b8:	movcc	ip, r2
   211bc:	cmp	ip, r9
   211c0:	bhi	21208 <__assert_fail@plt+0xf868>
   211c4:	ldrb	r2, [lr, r0]
   211c8:	and	r2, r2, #192	; 0xc0
   211cc:	cmp	r2, #128	; 0x80
   211d0:	movne	r1, lr
   211d4:	bne	2165c <__assert_fail@plt+0xfcbc>
   211d8:	mov	sl, lr
   211dc:	sub	r2, r9, #1
   211e0:	sub	ip, ip, #1
   211e4:	b	211fc <__assert_fail@plt+0xf85c>
   211e8:	ldrb	r0, [r9]
   211ec:	sub	r2, r2, #1
   211f0:	and	r0, r0, #192	; 0xc0
   211f4:	cmp	r0, #128	; 0x80
   211f8:	bne	21654 <__assert_fail@plt+0xfcb4>
   211fc:	cmp	ip, r2
   21200:	mov	r9, r2
   21204:	bne	211e8 <__assert_fail@plt+0xf848>
   21208:	add	r9, r3, r1
   2120c:	cmp	r7, r9
   21210:	ble	21514 <__assert_fail@plt+0xfb74>
   21214:	add	fp, r4, #16
   21218:	str	r7, [sp]
   2121c:	str	r6, [sp, #4]
   21220:	ldr	r1, [r4]
   21224:	mov	r3, fp
   21228:	add	r0, sp, #16
   2122c:	ldr	sl, [r4, #44]	; 0x2c
   21230:	ldrd	r6, [fp]
   21234:	add	r1, r1, r9
   21238:	sub	sl, sl, r9
   2123c:	mov	r2, sl
   21240:	strd	r6, [sp, #24]
   21244:	bl	1f100 <__assert_fail@plt+0xd760>
   21248:	sub	r3, r0, #1
   2124c:	cmn	r3, #4
   21250:	ldrls	r1, [sp, #16]
   21254:	bhi	21708 <__assert_fail@plt+0xfd68>
   21258:	add	r9, r9, r0
   2125c:	ldr	r3, [sp]
   21260:	cmp	r3, r9
   21264:	bgt	21220 <__assert_fail@plt+0xf880>
   21268:	sub	r9, r9, r3
   2126c:	cmn	r1, #1
   21270:	ldr	r6, [sp, #4]
   21274:	mov	r7, r3
   21278:	str	r9, [r4, #28]
   2127c:	beq	2151c <__assert_fail@plt+0xfb7c>
   21280:	ldrb	r3, [r4, #78]	; 0x4e
   21284:	cmp	r3, #0
   21288:	bne	2177c <__assert_fail@plt+0xfddc>
   2128c:	cmp	r1, #10
   21290:	movne	r3, #0
   21294:	bne	212a8 <__assert_fail@plt+0xf908>
   21298:	ldrb	r3, [r4, #77]	; 0x4d
   2129c:	cmp	r3, #0
   212a0:	moveq	r3, #0
   212a4:	movne	r3, #2
   212a8:	str	r3, [r4, #60]	; 0x3c
   212ac:	cmp	r9, #0
   212b0:	bne	2172c <__assert_fail@plt+0xfd8c>
   212b4:	ldrb	r3, [r4, #75]	; 0x4b
   212b8:	str	r9, [r4, #32]
   212bc:	ldr	r1, [r4, #48]	; 0x30
   212c0:	ldr	r0, [r4, #56]	; 0x38
   212c4:	ldr	r2, [r4, #80]	; 0x50
   212c8:	sub	r1, r1, r5
   212cc:	sub	r0, r0, r5
   212d0:	b	21024 <__assert_fail@plt+0xf684>
   212d4:	mov	r3, r6
   212d8:	mov	r2, #0
   212dc:	ldr	r9, [r4, #12]
   212e0:	b	212f4 <__assert_fail@plt+0xf954>
   212e4:	bge	21488 <__assert_fail@plt+0xfae8>
   212e8:	add	r2, r1, #1
   212ec:	cmp	r2, r3
   212f0:	bge	21330 <__assert_fail@plt+0xf990>
   212f4:	add	r1, r2, r3
   212f8:	add	r1, r1, r1, lsr #31
   212fc:	asr	r1, r1, #1
   21300:	ldr	r0, [r9, r1, lsl #2]
   21304:	cmp	r0, r5
   21308:	ble	212e4 <__assert_fail@plt+0xf944>
   2130c:	mov	r3, r1
   21310:	b	212ec <__assert_fail@plt+0xf94c>
   21314:	ldr	r0, [r4, #4]
   21318:	add	r1, r0, r5
   2131c:	bl	1158c <memmove@plt>
   21320:	ldr	r2, [r4, #28]
   21324:	ldrb	r3, [r4, #75]	; 0x4b
   21328:	sub	r2, r2, r5
   2132c:	b	21000 <__assert_fail@plt+0xf660>
   21330:	cmp	r0, r5
   21334:	addlt	sl, r1, #1
   21338:	bge	21488 <__assert_fail@plt+0xfae8>
   2133c:	mov	r2, r8
   21340:	mov	r0, r4
   21344:	bl	20a08 <__assert_fail@plt+0xf068>
   21348:	sub	r3, r5, sl
   2134c:	cmp	r5, r6
   21350:	str	r0, [r4, #60]	; 0x3c
   21354:	clz	r3, r3
   21358:	lsr	r3, r3, #5
   2135c:	movge	r3, #0
   21360:	cmp	r3, #0
   21364:	bne	21534 <__assert_fail@plt+0xfb94>
   21368:	ldr	r1, [r4, #44]	; 0x2c
   2136c:	mov	r3, #0
   21370:	cmp	sl, #0
   21374:	ldr	r0, [r4, #52]	; 0x34
   21378:	strb	r3, [r4, #76]	; 0x4c
   2137c:	sub	r1, r1, r7
   21380:	add	r2, r1, r5
   21384:	sub	r0, r0, r7
   21388:	add	r3, r0, r5
   2138c:	str	r2, [r4, #48]	; 0x30
   21390:	str	r3, [r4, #56]	; 0x38
   21394:	ble	213c4 <__assert_fail@plt+0xfa24>
   21398:	sub	r3, sl, #-1073741823	; 0xc0000001
   2139c:	ldr	r2, [r9, r3, lsl #2]
   213a0:	add	r3, r9, r3, lsl #2
   213a4:	cmp	r2, r5
   213a8:	beq	213bc <__assert_fail@plt+0xfa1c>
   213ac:	b	213c4 <__assert_fail@plt+0xfa24>
   213b0:	ldr	r2, [r3, #-4]!
   213b4:	cmp	r2, r5
   213b8:	bne	213c4 <__assert_fail@plt+0xfa24>
   213bc:	subs	sl, sl, #1
   213c0:	bne	213b0 <__assert_fail@plt+0xfa10>
   213c4:	cmp	sl, r6
   213c8:	bge	21420 <__assert_fail@plt+0xfa80>
   213cc:	ldr	r3, [r4, #8]
   213d0:	lsl	ip, sl, #2
   213d4:	ldr	r2, [r3, sl, lsl #2]
   213d8:	add	r3, r3, ip
   213dc:	cmn	r2, #1
   213e0:	beq	213f4 <__assert_fail@plt+0xfa54>
   213e4:	b	21428 <__assert_fail@plt+0xfa88>
   213e8:	ldr	r2, [r3, #4]!
   213ec:	cmn	r2, #1
   213f0:	bne	21428 <__assert_fail@plt+0xfa88>
   213f4:	add	sl, sl, #1
   213f8:	cmp	sl, r6
   213fc:	lsl	ip, sl, #2
   21400:	bne	213e8 <__assert_fail@plt+0xfa48>
   21404:	mov	r3, #0
   21408:	mov	r2, r3
   2140c:	str	r3, [r4, #28]
   21410:	ldrb	r3, [r4, #75]	; 0x4b
   21414:	str	r2, [r4, #32]
   21418:	ldr	r2, [r4, #80]	; 0x50
   2141c:	b	21024 <__assert_fail@plt+0xf684>
   21420:	beq	21404 <__assert_fail@plt+0xfa64>
   21424:	lsl	ip, sl, #2
   21428:	ldr	r2, [r9, ip]
   2142c:	sub	r2, r2, r5
   21430:	cmp	r2, #0
   21434:	str	r2, [r4, #28]
   21438:	beq	21410 <__assert_fail@plt+0xfa70>
   2143c:	ble	21464 <__assert_fail@plt+0xfac4>
   21440:	ldr	r1, [r4, #8]
   21444:	mov	r3, #0
   21448:	mvn	r0, #0
   2144c:	sub	r1, r1, #4
   21450:	str	r0, [r1, #4]!
   21454:	add	r3, r3, #1
   21458:	ldr	r2, [r4, #28]
   2145c:	cmp	r2, r3
   21460:	bgt	21450 <__assert_fail@plt+0xfab0>
   21464:	mov	r1, #255	; 0xff
   21468:	ldr	r0, [r4, #4]
   2146c:	bl	11814 <memset@plt>
   21470:	ldr	r2, [r4, #28]
   21474:	ldr	r1, [r4, #48]	; 0x30
   21478:	ldr	r0, [r4, #56]	; 0x38
   2147c:	sub	r1, r1, r5
   21480:	sub	r0, r0, r5
   21484:	b	21410 <__assert_fail@plt+0xfa70>
   21488:	mov	sl, r1
   2148c:	sub	r1, r1, #1
   21490:	b	2133c <__assert_fail@plt+0xf99c>
   21494:	ldr	r9, [r4]
   21498:	ldr	r1, [r4, #64]	; 0x40
   2149c:	add	r9, r9, r3
   214a0:	add	r3, r9, r5
   214a4:	ldrb	ip, [r3, #-1]
   214a8:	cmp	r1, #0
   214ac:	str	r0, [r4, #32]
   214b0:	ldr	r0, [r4, #68]	; 0x44
   214b4:	ldrbne	ip, [r1, ip]
   214b8:	asr	r1, ip, #5
   214bc:	and	r3, ip, #31
   214c0:	ldr	r1, [r0, r1, lsl #2]
   214c4:	lsr	r3, r1, r3
   214c8:	ands	r1, r3, #1
   214cc:	bne	214e4 <__assert_fail@plt+0xfb44>
   214d0:	cmp	ip, #10
   214d4:	bne	214e4 <__assert_fail@plt+0xfb44>
   214d8:	ldrb	r3, [r4, #77]	; 0x4d
   214dc:	cmp	r3, #0
   214e0:	movne	r1, #2
   214e4:	ldrb	r3, [r4, #75]	; 0x4b
   214e8:	str	r1, [r4, #60]	; 0x3c
   214ec:	ldr	r1, [r4, #48]	; 0x30
   214f0:	ldr	r0, [r4, #56]	; 0x38
   214f4:	cmp	r3, #0
   214f8:	sub	r1, r1, r5
   214fc:	sub	r0, r0, r5
   21500:	beq	2102c <__assert_fail@plt+0xf68c>
   21504:	str	r7, [r4, #24]
   21508:	str	r1, [r4, #48]	; 0x30
   2150c:	str	r0, [r4, #56]	; 0x38
   21510:	b	210dc <__assert_fail@plt+0xf73c>
   21514:	sub	r9, r9, r7
   21518:	str	r9, [r4, #28]
   2151c:	mov	r2, r8
   21520:	sub	r1, r6, #1
   21524:	mov	r0, r4
   21528:	bl	20a08 <__assert_fail@plt+0xf068>
   2152c:	str	r0, [r4, #60]	; 0x3c
   21530:	b	212ac <__assert_fail@plt+0xf90c>
   21534:	ldr	r3, [r9, sl, lsl #2]
   21538:	cmp	r3, r5
   2153c:	bne	21368 <__assert_fail@plt+0xf9c8>
   21540:	ldr	r0, [r4, #8]
   21544:	lsl	r8, r5, #2
   21548:	sub	r2, r6, r5
   2154c:	lsl	r2, r2, #2
   21550:	add	r1, r0, r8
   21554:	bl	1158c <memmove@plt>
   21558:	ldr	r0, [r4, #4]
   2155c:	ldr	r2, [r4, #28]
   21560:	add	r1, r0, r5
   21564:	sub	r2, r2, r5
   21568:	bl	1158c <memmove@plt>
   2156c:	ldr	r3, [r4, #28]
   21570:	ldr	r2, [r4, #32]
   21574:	sub	r3, r3, r5
   21578:	cmp	r3, #0
   2157c:	sub	r2, r2, r5
   21580:	str	r3, [r4, #28]
   21584:	str	r2, [r4, #32]
   21588:	ble	215b8 <__assert_fail@plt+0xfc18>
   2158c:	ldr	r1, [r4, #12]
   21590:	mov	r2, #0
   21594:	add	r0, r1, r8
   21598:	sub	r1, r1, #4
   2159c:	ldr	r3, [r0], #4
   215a0:	add	r2, r2, #1
   215a4:	sub	r3, r3, r5
   215a8:	str	r3, [r1, #4]!
   215ac:	ldr	r3, [r4, #28]
   215b0:	cmp	r3, r2
   215b4:	bgt	2159c <__assert_fail@plt+0xfbfc>
   215b8:	ldr	r1, [r4, #48]	; 0x30
   215bc:	ldr	r0, [r4, #56]	; 0x38
   215c0:	ldrb	r3, [r4, #75]	; 0x4b
   215c4:	sub	r1, r1, r5
   215c8:	ldr	r2, [r4, #80]	; 0x50
   215cc:	sub	r0, r0, r5
   215d0:	b	21024 <__assert_fail@plt+0xf684>
   215d4:	ldr	r5, [r4, #28]
   215d8:	ldr	r6, [r4, #36]	; 0x24
   215dc:	cmp	r1, r6
   215e0:	movlt	r6, r1
   215e4:	cmp	r6, r5
   215e8:	ble	217b4 <__assert_fail@plt+0xfe14>
   215ec:	bl	11754 <__ctype_toupper_loc@plt>
   215f0:	b	21610 <__assert_fail@plt+0xfc70>
   215f4:	ldr	r3, [r1, r3, lsl #2]
   215f8:	ldr	r2, [r4, #4]
   215fc:	strb	r3, [r2, r5]
   21600:	add	r5, r5, #1
   21604:	cmp	r6, r5
   21608:	beq	21648 <__assert_fail@plt+0xfca8>
   2160c:	ldr	r7, [r4, #24]
   21610:	ldr	r3, [r4]
   21614:	ldr	r2, [r4, #64]	; 0x40
   21618:	ldr	r1, [r0]
   2161c:	add	r3, r3, r5
   21620:	ldrb	r3, [r3, r7]
   21624:	cmp	r2, #0
   21628:	beq	215f4 <__assert_fail@plt+0xfc54>
   2162c:	ldrb	r2, [r2, r3]
   21630:	ldr	r3, [r4, #4]
   21634:	ldr	r2, [r1, r2, lsl #2]
   21638:	strb	r2, [r3, r5]
   2163c:	add	r5, r5, #1
   21640:	cmp	r5, r6
   21644:	bne	2160c <__assert_fail@plt+0xfc6c>
   21648:	str	r6, [r4, #28]
   2164c:	str	r6, [r4, #32]
   21650:	b	21060 <__assert_fail@plt+0xf6c0>
   21654:	mov	r1, sl
   21658:	str	sl, [sp]
   2165c:	ldr	r2, [r4, #48]	; 0x30
   21660:	ldr	r3, [r4, #64]	; 0x40
   21664:	add	r2, r1, r2
   21668:	sub	r2, r2, r9
   2166c:	cmp	r3, #0
   21670:	moveq	r1, r9
   21674:	bne	217bc <__assert_fail@plt+0xfe1c>
   21678:	mov	sl, #0
   2167c:	mov	fp, #0
   21680:	add	r3, sp, #24
   21684:	add	r0, sp, #12
   21688:	strd	sl, [sp, #24]
   2168c:	bl	1f100 <__assert_fail@plt+0xd760>
   21690:	ldr	r3, [sp]
   21694:	add	sl, r3, r5
   21698:	sub	r9, sl, r9
   2169c:	cmp	r0, r9
   216a0:	bcc	216ac <__assert_fail@plt+0xfd0c>
   216a4:	cmn	r0, #3
   216a8:	bls	216b8 <__assert_fail@plt+0xfd18>
   216ac:	ldr	r3, [r4, #24]
   216b0:	ldr	r1, [r4, #32]
   216b4:	b	21208 <__assert_fail@plt+0xf868>
   216b8:	ldr	r1, [sp, #12]
   216bc:	sub	r9, r0, r9
   216c0:	mov	r2, #0
   216c4:	mov	r3, #0
   216c8:	strd	r2, [r4, #16]
   216cc:	str	r9, [r4, #28]
   216d0:	cmn	r1, #1
   216d4:	bne	21280 <__assert_fail@plt+0xf8e0>
   216d8:	b	216ac <__assert_fail@plt+0xfd0c>
   216dc:	ldr	r0, [r4, #44]	; 0x2c
   216e0:	mov	ip, #0
   216e4:	ldr	r2, [r4, #52]	; 0x34
   216e8:	strb	ip, [r4, #76]	; 0x4c
   216ec:	sub	r0, r0, r7
   216f0:	add	r0, r0, r5
   216f4:	sub	r2, r2, r7
   216f8:	add	r2, r2, r5
   216fc:	str	r0, [r4, #48]	; 0x30
   21700:	str	r2, [r4, #56]	; 0x38
   21704:	b	21178 <__assert_fail@plt+0xf7d8>
   21708:	mov	r1, #0
   2170c:	cmp	sl, r1
   21710:	cmpne	r0, r1
   21714:	mov	r0, #1
   21718:	ldrne	r3, [r4]
   2171c:	ldrbne	r1, [r3, r9]
   21720:	ldrd	r2, [sp, #24]
   21724:	strd	r2, [fp]
   21728:	b	21258 <__assert_fail@plt+0xf8b8>
   2172c:	ble	21754 <__assert_fail@plt+0xfdb4>
   21730:	ldr	r2, [r4, #8]
   21734:	mov	r3, #0
   21738:	mvn	r1, #0
   2173c:	sub	r2, r2, #4
   21740:	str	r1, [r2, #4]!
   21744:	add	r3, r3, #1
   21748:	ldr	r9, [r4, #28]
   2174c:	cmp	r9, r3
   21750:	bgt	21740 <__assert_fail@plt+0xfda0>
   21754:	ldrb	r3, [r4, #75]	; 0x4b
   21758:	cmp	r3, #0
   2175c:	beq	212b8 <__assert_fail@plt+0xf918>
   21760:	mov	r2, r9
   21764:	mov	r1, #255	; 0xff
   21768:	ldr	r0, [r4, #4]
   2176c:	bl	11814 <memset@plt>
   21770:	ldrb	r3, [r4, #75]	; 0x4b
   21774:	ldr	r9, [r4, #28]
   21778:	b	212b8 <__assert_fail@plt+0xf918>
   2177c:	mov	r0, r1
   21780:	str	r1, [sp]
   21784:	bl	117e4 <iswalnum@plt>
   21788:	ldr	r1, [sp]
   2178c:	subs	r3, r1, #95	; 0x5f
   21790:	movne	r3, #1
   21794:	cmp	r0, #0
   21798:	movne	r3, #0
   2179c:	cmp	r3, #0
   217a0:	moveq	r3, #1
   217a4:	beq	212a8 <__assert_fail@plt+0xf908>
   217a8:	b	2128c <__assert_fail@plt+0xf8ec>
   217ac:	mov	r1, r2
   217b0:	b	21164 <__assert_fail@plt+0xf7c4>
   217b4:	mov	r6, r5
   217b8:	b	21648 <__assert_fail@plt+0xfca8>
   217bc:	cmp	r2, #6
   217c0:	movlt	r1, r2
   217c4:	movge	r1, #6
   217c8:	subs	r0, r1, #1
   217cc:	bmi	21874 <__assert_fail@plt+0xfed4>
   217d0:	ldrb	lr, [r9, r0]
   217d4:	add	ip, sp, #32
   217d8:	add	ip, ip, r0
   217dc:	sub	r0, r1, #2
   217e0:	cmn	r0, #1
   217e4:	ldrb	lr, [r3, lr]
   217e8:	strb	lr, [ip, #-16]
   217ec:	beq	21874 <__assert_fail@plt+0xfed4>
   217f0:	ldrb	lr, [r9, r0]
   217f4:	add	ip, sp, #32
   217f8:	add	ip, ip, r0
   217fc:	sub	r0, r1, #3
   21800:	cmn	r0, #1
   21804:	ldrb	lr, [r3, lr]
   21808:	strb	lr, [ip, #-16]
   2180c:	beq	21874 <__assert_fail@plt+0xfed4>
   21810:	ldrb	lr, [r9, r0]
   21814:	add	ip, sp, #32
   21818:	add	ip, ip, r0
   2181c:	sub	r0, r1, #4
   21820:	cmn	r0, #1
   21824:	ldrb	lr, [r3, lr]
   21828:	strb	lr, [ip, #-16]
   2182c:	beq	21874 <__assert_fail@plt+0xfed4>
   21830:	ldrb	ip, [r9, r0]
   21834:	add	lr, sp, #32
   21838:	sub	r1, r1, #5
   2183c:	add	r0, lr, r0
   21840:	cmn	r1, #1
   21844:	ldrb	ip, [r3, ip]
   21848:	strb	ip, [r0, #-16]
   2184c:	beq	21874 <__assert_fail@plt+0xfed4>
   21850:	ldrb	r0, [r9, r1]
   21854:	add	r1, lr, r1
   21858:	cmp	r2, #5
   2185c:	ldrb	r0, [r3, r0]
   21860:	strb	r0, [r1, #-16]
   21864:	ble	21874 <__assert_fail@plt+0xfed4>
   21868:	ldrb	r1, [r9]
   2186c:	ldrb	r3, [r3, r1]
   21870:	strb	r3, [sp, #16]
   21874:	add	r1, sp, #16
   21878:	b	21678 <__assert_fail@plt+0xfcd8>
   2187c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21880:	strd	r6, [sp, #8]
   21884:	strd	sl, [sp, #24]
   21888:	ldr	fp, [r1]
   2188c:	strd	r8, [sp, #16]
   21890:	str	lr, [sp, #32]
   21894:	sub	sp, sp, #12
   21898:	ldr	r6, [r0, #84]	; 0x54
   2189c:	cmp	fp, #0
   218a0:	ble	2195c <__assert_fail@plt+0xffbc>
   218a4:	mov	r8, r3
   218a8:	mov	r9, r2
   218ac:	mov	sl, r0
   218b0:	mov	r7, r1
   218b4:	mov	r4, #0
   218b8:	b	218c4 <__assert_fail@plt+0xff24>
   218bc:	cmp	r4, fp
   218c0:	bge	2195c <__assert_fail@plt+0xffbc>
   218c4:	ldr	r3, [r9]
   218c8:	ldr	ip, [r6]
   218cc:	ldr	r5, [r3, r4, lsl #2]
   218d0:	add	r4, r4, #1
   218d4:	add	lr, ip, r5, lsl #3
   218d8:	ldrb	lr, [lr, #4]
   218dc:	cmp	lr, #8
   218e0:	bne	218bc <__assert_fail@plt+0xff1c>
   218e4:	ldr	r3, [ip, r5, lsl #3]
   218e8:	cmp	r3, #31
   218ec:	bgt	218bc <__assert_fail@plt+0xff1c>
   218f0:	ldr	r2, [r6, #80]	; 0x50
   218f4:	lsr	r3, r2, r3
   218f8:	tst	r3, #1
   218fc:	beq	218bc <__assert_fail@plt+0xff1c>
   21900:	ldr	fp, [sl, #124]	; 0x7c
   21904:	ldr	r3, [sl, #128]	; 0x80
   21908:	ldr	r2, [sl, #132]	; 0x84
   2190c:	cmp	r3, fp
   21910:	beq	21984 <__assert_fail@plt+0xffe4>
   21914:	mov	r1, #24
   21918:	mov	r0, #1
   2191c:	str	r2, [sp, #4]
   21920:	bl	1ecd8 <__assert_fail@plt+0xd338>
   21924:	ldr	r2, [sp, #4]
   21928:	ldr	r3, [sl, #124]	; 0x7c
   2192c:	str	r0, [r2, fp, lsl #2]
   21930:	ldr	r2, [sl, #132]	; 0x84
   21934:	add	r1, r3, #1
   21938:	ldr	r3, [r2, r3, lsl #2]
   2193c:	cmp	r3, #0
   21940:	beq	2197c <__assert_fail@plt+0xffdc>
   21944:	str	r5, [r3, #4]
   21948:	str	r1, [sl, #124]	; 0x7c
   2194c:	str	r8, [r3]
   21950:	ldr	fp, [r7]
   21954:	cmp	r4, fp
   21958:	blt	218c4 <__assert_fail@plt+0xff24>
   2195c:	mov	r0, #0
   21960:	add	sp, sp, #12
   21964:	ldrd	r4, [sp]
   21968:	ldrd	r6, [sp, #8]
   2196c:	ldrd	r8, [sp, #16]
   21970:	ldrd	sl, [sp, #24]
   21974:	add	sp, sp, #32
   21978:	pop	{pc}		; (ldr pc, [sp], #4)
   2197c:	mov	r0, #12
   21980:	b	21960 <__assert_fail@plt+0xffc0>
   21984:	mov	r0, r2
   21988:	lsl	r1, fp, #3
   2198c:	bl	1f170 <__assert_fail@plt+0xd7d0>
   21990:	subs	r2, r0, #0
   21994:	lsl	r3, fp, #1
   21998:	beq	2197c <__assert_fail@plt+0xffdc>
   2199c:	str	r3, [sl, #128]	; 0x80
   219a0:	str	r2, [sl, #132]	; 0x84
   219a4:	ldr	fp, [sl, #124]	; 0x7c
   219a8:	b	21914 <__assert_fail@plt+0xff74>
   219ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   219b0:	mov	r5, r1
   219b4:	strd	r6, [sp, #8]
   219b8:	mov	r6, r0
   219bc:	strd	r8, [sp, #16]
   219c0:	mov	r8, r3
   219c4:	strd	sl, [sp, #24]
   219c8:	mov	sl, r2
   219cc:	str	lr, [sp, #32]
   219d0:	sub	sp, sp, #4
   219d4:	ldr	r9, [sp, #40]	; 0x28
   219d8:	ldr	ip, [sp, #48]	; 0x30
   219dc:	ldr	r7, [sp, #44]	; 0x2c
   219e0:	tst	ip, #4194304	; 0x400000
   219e4:	beq	21a08 <__assert_fail@plt+0x10068>
   219e8:	mov	r0, r7
   219ec:	movw	r1, #21424	; 0x53b0
   219f0:	movt	r1, #3
   219f4:	bl	11544 <strcmp@plt>
   219f8:	cmp	r0, #0
   219fc:	movweq	r7, #21416	; 0x53a8
   21a00:	movteq	r7, #3
   21a04:	bne	21b0c <__assert_fail@plt+0x1016c>
   21a08:	ldr	r4, [r8]
   21a0c:	ldr	r3, [r9]
   21a10:	ldr	fp, [sl]
   21a14:	cmp	r3, r4
   21a18:	beq	21bf0 <__assert_fail@plt+0x10250>
   21a1c:	add	r3, r4, #1
   21a20:	mov	r0, r7
   21a24:	str	r3, [r8]
   21a28:	bl	11514 <wctype@plt>
   21a2c:	movw	r1, #21440	; 0x53c0
   21a30:	movt	r1, #3
   21a34:	str	r0, [fp, r4, lsl #2]
   21a38:	mov	r0, r7
   21a3c:	bl	11544 <strcmp@plt>
   21a40:	subs	r4, r0, #0
   21a44:	beq	21ac4 <__assert_fail@plt+0x10124>
   21a48:	movw	r1, #21448	; 0x53c8
   21a4c:	movt	r1, #3
   21a50:	mov	r0, r7
   21a54:	bl	11544 <strcmp@plt>
   21a58:	subs	r4, r0, #0
   21a5c:	bne	21b30 <__assert_fail@plt+0x10190>
   21a60:	bl	11778 <__ctype_b_loc@plt>
   21a64:	ldr	r3, [r0]
   21a68:	cmp	r6, #0
   21a6c:	moveq	ip, #1
   21a70:	sub	r3, r3, #2
   21a74:	bne	21d18 <__assert_fail@plt+0x10378>
   21a78:	ldrh	r2, [r3, #2]!
   21a7c:	asr	r1, r4, #5
   21a80:	and	r0, r4, #31
   21a84:	add	r4, r4, #1
   21a88:	tst	r2, #2
   21a8c:	beq	21a9c <__assert_fail@plt+0x100fc>
   21a90:	ldr	r2, [r5, r1, lsl #2]
   21a94:	orr	r2, r2, ip, lsl r0
   21a98:	str	r2, [r5, r1, lsl #2]
   21a9c:	cmp	r4, #256	; 0x100
   21aa0:	bne	21a78 <__assert_fail@plt+0x100d8>
   21aa4:	mov	r0, #0
   21aa8:	add	sp, sp, #4
   21aac:	ldrd	r4, [sp]
   21ab0:	ldrd	r6, [sp, #8]
   21ab4:	ldrd	r8, [sp, #16]
   21ab8:	ldrd	sl, [sp, #24]
   21abc:	add	sp, sp, #32
   21ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   21ac4:	bl	11778 <__ctype_b_loc@plt>
   21ac8:	ldr	r3, [r0]
   21acc:	cmp	r6, #0
   21ad0:	moveq	lr, #1
   21ad4:	sub	r3, r3, #2
   21ad8:	bne	21cdc <__assert_fail@plt+0x1033c>
   21adc:	ldrh	r0, [r3, #2]!
   21ae0:	asr	r2, r4, #5
   21ae4:	and	ip, r4, #31
   21ae8:	add	r4, r4, #1
   21aec:	tst	r0, #8
   21af0:	beq	21b00 <__assert_fail@plt+0x10160>
   21af4:	ldr	r1, [r5, r2, lsl #2]
   21af8:	orr	r1, r1, lr, lsl ip
   21afc:	str	r1, [r5, r2, lsl #2]
   21b00:	cmp	r4, #256	; 0x100
   21b04:	bne	21adc <__assert_fail@plt+0x1013c>
   21b08:	b	21aa4 <__assert_fail@plt+0x10104>
   21b0c:	mov	r0, r7
   21b10:	movw	r1, #21432	; 0x53b8
   21b14:	movt	r1, #3
   21b18:	bl	11544 <strcmp@plt>
   21b1c:	cmp	r0, #0
   21b20:	movw	r3, #21416	; 0x53a8
   21b24:	movt	r3, #3
   21b28:	moveq	r7, r3
   21b2c:	b	21a08 <__assert_fail@plt+0x10068>
   21b30:	movw	r1, #21432	; 0x53b8
   21b34:	movt	r1, #3
   21b38:	mov	r0, r7
   21b3c:	bl	11544 <strcmp@plt>
   21b40:	subs	r4, r0, #0
   21b44:	beq	21ba8 <__assert_fail@plt+0x10208>
   21b48:	movw	r1, #21456	; 0x53d0
   21b4c:	movt	r1, #3
   21b50:	mov	r0, r7
   21b54:	bl	11544 <strcmp@plt>
   21b58:	subs	r4, r0, #0
   21b5c:	bne	21c1c <__assert_fail@plt+0x1027c>
   21b60:	bl	11778 <__ctype_b_loc@plt>
   21b64:	ldr	r3, [r0]
   21b68:	cmp	r6, #0
   21b6c:	moveq	ip, #1
   21b70:	sub	r3, r3, #2
   21b74:	bne	21ef4 <__assert_fail@plt+0x10554>
   21b78:	ldrh	r2, [r3, #2]!
   21b7c:	asr	r1, r4, #5
   21b80:	and	r0, r4, #31
   21b84:	add	r4, r4, #1
   21b88:	tst	r2, #8192	; 0x2000
   21b8c:	beq	21b9c <__assert_fail@plt+0x101fc>
   21b90:	ldr	r2, [r5, r1, lsl #2]
   21b94:	orr	r2, r2, ip, lsl r0
   21b98:	str	r2, [r5, r1, lsl #2]
   21b9c:	cmp	r4, #256	; 0x100
   21ba0:	bne	21b78 <__assert_fail@plt+0x101d8>
   21ba4:	b	21aa4 <__assert_fail@plt+0x10104>
   21ba8:	bl	11778 <__ctype_b_loc@plt>
   21bac:	ldr	r3, [r0]
   21bb0:	cmp	r6, #0
   21bb4:	moveq	ip, #1
   21bb8:	sub	r3, r3, #2
   21bbc:	bne	21d54 <__assert_fail@plt+0x103b4>
   21bc0:	ldrh	r2, [r3, #2]!
   21bc4:	asr	r1, r4, #5
   21bc8:	and	r0, r4, #31
   21bcc:	add	r4, r4, #1
   21bd0:	tst	r2, #512	; 0x200
   21bd4:	beq	21be4 <__assert_fail@plt+0x10244>
   21bd8:	ldr	r2, [r5, r1, lsl #2]
   21bdc:	orr	r2, r2, ip, lsl r0
   21be0:	str	r2, [r5, r1, lsl #2]
   21be4:	cmp	r4, #256	; 0x100
   21be8:	bne	21bc0 <__assert_fail@plt+0x10220>
   21bec:	b	21aa4 <__assert_fail@plt+0x10104>
   21bf0:	lsl	r4, r4, #1
   21bf4:	mov	r0, fp
   21bf8:	add	r4, r4, #1
   21bfc:	lsl	r1, r4, #2
   21c00:	bl	1f170 <__assert_fail@plt+0xd7d0>
   21c04:	subs	fp, r0, #0
   21c08:	beq	21e50 <__assert_fail@plt+0x104b0>
   21c0c:	str	fp, [sl]
   21c10:	str	r4, [r9]
   21c14:	ldr	r4, [r8]
   21c18:	b	21a1c <__assert_fail@plt+0x1007c>
   21c1c:	movw	r1, #21416	; 0x53a8
   21c20:	movt	r1, #3
   21c24:	mov	r0, r7
   21c28:	bl	11544 <strcmp@plt>
   21c2c:	subs	r4, r0, #0
   21c30:	beq	21c94 <__assert_fail@plt+0x102f4>
   21c34:	movw	r1, #21464	; 0x53d8
   21c38:	movt	r1, #3
   21c3c:	mov	r0, r7
   21c40:	bl	11544 <strcmp@plt>
   21c44:	subs	r4, r0, #0
   21c48:	bne	21d90 <__assert_fail@plt+0x103f0>
   21c4c:	bl	11778 <__ctype_b_loc@plt>
   21c50:	ldr	r3, [r0]
   21c54:	cmp	r6, #0
   21c58:	moveq	ip, #1
   21c5c:	sub	r3, r3, #2
   21c60:	bne	21f30 <__assert_fail@plt+0x10590>
   21c64:	ldrh	r1, [r3, #2]!
   21c68:	asr	r2, r4, #5
   21c6c:	and	r0, r4, #31
   21c70:	add	r4, r4, #1
   21c74:	tst	r1, #2048	; 0x800
   21c78:	beq	21c88 <__assert_fail@plt+0x102e8>
   21c7c:	ldr	r1, [r5, r2, lsl #2]
   21c80:	orr	r1, r1, ip, lsl r0
   21c84:	str	r1, [r5, r2, lsl #2]
   21c88:	cmp	r4, #256	; 0x100
   21c8c:	bne	21c64 <__assert_fail@plt+0x102c4>
   21c90:	b	21aa4 <__assert_fail@plt+0x10104>
   21c94:	bl	11778 <__ctype_b_loc@plt>
   21c98:	ldr	r3, [r0]
   21c9c:	cmp	r6, #0
   21ca0:	moveq	ip, #1
   21ca4:	sub	r3, r3, #2
   21ca8:	bne	21eb8 <__assert_fail@plt+0x10518>
   21cac:	ldrh	r2, [r3, #2]!
   21cb0:	asr	r1, r4, #5
   21cb4:	and	r0, r4, #31
   21cb8:	add	r4, r4, #1
   21cbc:	tst	r2, #1024	; 0x400
   21cc0:	beq	21cd0 <__assert_fail@plt+0x10330>
   21cc4:	ldr	r2, [r5, r1, lsl #2]
   21cc8:	orr	r2, r2, ip, lsl r0
   21ccc:	str	r2, [r5, r1, lsl #2]
   21cd0:	cmp	r4, #256	; 0x100
   21cd4:	bne	21cac <__assert_fail@plt+0x1030c>
   21cd8:	b	21aa4 <__assert_fail@plt+0x10104>
   21cdc:	add	ip, r6, #256	; 0x100
   21ce0:	mov	lr, #1
   21ce4:	ldrh	r2, [r3, #2]!
   21ce8:	tst	r2, #8
   21cec:	beq	21d08 <__assert_fail@plt+0x10368>
   21cf0:	ldrb	r2, [r6]
   21cf4:	asr	r0, r2, #5
   21cf8:	and	r2, r2, #31
   21cfc:	ldr	r1, [r5, r0, lsl #2]
   21d00:	orr	r2, r1, lr, lsl r2
   21d04:	str	r2, [r5, r0, lsl #2]
   21d08:	add	r6, r6, #1
   21d0c:	cmp	ip, r6
   21d10:	bne	21ce4 <__assert_fail@plt+0x10344>
   21d14:	b	21aa4 <__assert_fail@plt+0x10104>
   21d18:	add	ip, r6, #256	; 0x100
   21d1c:	mov	lr, #1
   21d20:	ldrh	r2, [r3, #2]!
   21d24:	tst	r2, #2
   21d28:	beq	21d44 <__assert_fail@plt+0x103a4>
   21d2c:	ldrb	r2, [r6]
   21d30:	asr	r0, r2, #5
   21d34:	and	r2, r2, #31
   21d38:	ldr	r1, [r5, r0, lsl #2]
   21d3c:	orr	r2, r1, lr, lsl r2
   21d40:	str	r2, [r5, r0, lsl #2]
   21d44:	add	r6, r6, #1
   21d48:	cmp	ip, r6
   21d4c:	bne	21d20 <__assert_fail@plt+0x10380>
   21d50:	b	21aa4 <__assert_fail@plt+0x10104>
   21d54:	add	ip, r6, #256	; 0x100
   21d58:	mov	lr, #1
   21d5c:	ldrh	r2, [r3, #2]!
   21d60:	tst	r2, #512	; 0x200
   21d64:	beq	21d80 <__assert_fail@plt+0x103e0>
   21d68:	ldrb	r2, [r6]
   21d6c:	asr	r0, r2, #5
   21d70:	and	r2, r2, #31
   21d74:	ldr	r1, [r5, r0, lsl #2]
   21d78:	orr	r2, r1, lr, lsl r2
   21d7c:	str	r2, [r5, r0, lsl #2]
   21d80:	add	r6, r6, #1
   21d84:	cmp	ip, r6
   21d88:	bne	21d5c <__assert_fail@plt+0x103bc>
   21d8c:	b	21aa4 <__assert_fail@plt+0x10104>
   21d90:	movw	r1, #18412	; 0x47ec
   21d94:	movt	r1, #3
   21d98:	mov	r0, r7
   21d9c:	bl	11544 <strcmp@plt>
   21da0:	subs	r4, r0, #0
   21da4:	bne	21df0 <__assert_fail@plt+0x10450>
   21da8:	bl	11778 <__ctype_b_loc@plt>
   21dac:	ldr	r3, [r0]
   21db0:	cmp	r6, #0
   21db4:	moveq	ip, #1
   21db8:	sub	r3, r3, #2
   21dbc:	bne	22140 <__assert_fail@plt+0x107a0>
   21dc0:	ldrh	r2, [r3, #2]!
   21dc4:	asr	r1, r4, #5
   21dc8:	and	r0, r4, #31
   21dcc:	add	r4, r4, #1
   21dd0:	tst	r2, #16384	; 0x4000
   21dd4:	beq	21de4 <__assert_fail@plt+0x10444>
   21dd8:	ldr	r2, [r5, r1, lsl #2]
   21ddc:	orr	r2, r2, ip, lsl r0
   21de0:	str	r2, [r5, r1, lsl #2]
   21de4:	cmp	r4, #256	; 0x100
   21de8:	bne	21dc0 <__assert_fail@plt+0x10420>
   21dec:	b	21aa4 <__assert_fail@plt+0x10104>
   21df0:	movw	r1, #21424	; 0x53b0
   21df4:	movt	r1, #3
   21df8:	mov	r0, r7
   21dfc:	bl	11544 <strcmp@plt>
   21e00:	subs	r4, r0, #0
   21e04:	bne	21e58 <__assert_fail@plt+0x104b8>
   21e08:	bl	11778 <__ctype_b_loc@plt>
   21e0c:	ldr	r3, [r0]
   21e10:	cmp	r6, #0
   21e14:	moveq	ip, #1
   21e18:	sub	r3, r3, #2
   21e1c:	bne	221b8 <__assert_fail@plt+0x10818>
   21e20:	ldrh	r2, [r3, #2]!
   21e24:	asr	r1, r4, #5
   21e28:	and	r0, r4, #31
   21e2c:	add	r4, r4, #1
   21e30:	tst	r2, #256	; 0x100
   21e34:	beq	21e44 <__assert_fail@plt+0x104a4>
   21e38:	ldr	r2, [r5, r1, lsl #2]
   21e3c:	orr	r2, r2, ip, lsl r0
   21e40:	str	r2, [r5, r1, lsl #2]
   21e44:	cmp	r4, #256	; 0x100
   21e48:	bne	21e20 <__assert_fail@plt+0x10480>
   21e4c:	b	21aa4 <__assert_fail@plt+0x10104>
   21e50:	mov	r0, #12
   21e54:	b	21aa8 <__assert_fail@plt+0x10108>
   21e58:	movw	r1, #21472	; 0x53e0
   21e5c:	movt	r1, #3
   21e60:	mov	r0, r7
   21e64:	bl	11544 <strcmp@plt>
   21e68:	subs	r4, r0, #0
   21e6c:	bne	21f6c <__assert_fail@plt+0x105cc>
   21e70:	bl	11778 <__ctype_b_loc@plt>
   21e74:	ldr	r3, [r0]
   21e78:	cmp	r6, #0
   21e7c:	moveq	ip, #1
   21e80:	sub	r3, r3, #2
   21e84:	bne	2217c <__assert_fail@plt+0x107dc>
   21e88:	ldrh	r2, [r3, #2]!
   21e8c:	asr	r1, r4, #5
   21e90:	and	r0, r4, #31
   21e94:	add	r4, r4, #1
   21e98:	tst	r2, #1
   21e9c:	beq	21eac <__assert_fail@plt+0x1050c>
   21ea0:	ldr	r2, [r5, r1, lsl #2]
   21ea4:	orr	r2, r2, ip, lsl r0
   21ea8:	str	r2, [r5, r1, lsl #2]
   21eac:	cmp	r4, #256	; 0x100
   21eb0:	bne	21e88 <__assert_fail@plt+0x104e8>
   21eb4:	b	21aa4 <__assert_fail@plt+0x10104>
   21eb8:	add	ip, r6, #256	; 0x100
   21ebc:	mov	lr, #1
   21ec0:	ldrh	r2, [r3, #2]!
   21ec4:	tst	r2, #1024	; 0x400
   21ec8:	beq	21ee4 <__assert_fail@plt+0x10544>
   21ecc:	ldrb	r2, [r6]
   21ed0:	asr	r0, r2, #5
   21ed4:	and	r2, r2, #31
   21ed8:	ldr	r1, [r5, r0, lsl #2]
   21edc:	orr	r2, r1, lr, lsl r2
   21ee0:	str	r2, [r5, r0, lsl #2]
   21ee4:	add	r6, r6, #1
   21ee8:	cmp	ip, r6
   21eec:	bne	21ec0 <__assert_fail@plt+0x10520>
   21ef0:	b	21aa4 <__assert_fail@plt+0x10104>
   21ef4:	add	ip, r6, #256	; 0x100
   21ef8:	mov	lr, #1
   21efc:	ldrh	r2, [r3, #2]!
   21f00:	tst	r2, #8192	; 0x2000
   21f04:	beq	21f20 <__assert_fail@plt+0x10580>
   21f08:	ldrb	r2, [r6]
   21f0c:	asr	r0, r2, #5
   21f10:	and	r2, r2, #31
   21f14:	ldr	r1, [r5, r0, lsl #2]
   21f18:	orr	r2, r1, lr, lsl r2
   21f1c:	str	r2, [r5, r0, lsl #2]
   21f20:	add	r6, r6, #1
   21f24:	cmp	ip, r6
   21f28:	bne	21efc <__assert_fail@plt+0x1055c>
   21f2c:	b	21aa4 <__assert_fail@plt+0x10104>
   21f30:	add	r1, r6, #256	; 0x100
   21f34:	mov	lr, #1
   21f38:	ldrh	r2, [r3, #2]!
   21f3c:	tst	r2, #2048	; 0x800
   21f40:	beq	21f5c <__assert_fail@plt+0x105bc>
   21f44:	ldrb	r2, [r6]
   21f48:	asr	ip, r2, #5
   21f4c:	and	r2, r2, #31
   21f50:	ldr	r0, [r5, ip, lsl #2]
   21f54:	orr	r2, r0, lr, lsl r2
   21f58:	str	r2, [r5, ip, lsl #2]
   21f5c:	add	r6, r6, #1
   21f60:	cmp	r1, r6
   21f64:	bne	21f38 <__assert_fail@plt+0x10598>
   21f68:	b	21aa4 <__assert_fail@plt+0x10104>
   21f6c:	movw	r1, #21480	; 0x53e8
   21f70:	movt	r1, #3
   21f74:	mov	r0, r7
   21f78:	bl	11544 <strcmp@plt>
   21f7c:	subs	r4, r0, #0
   21f80:	bne	22008 <__assert_fail@plt+0x10668>
   21f84:	bl	11778 <__ctype_b_loc@plt>
   21f88:	ldr	r3, [r0]
   21f8c:	cmp	r6, #0
   21f90:	moveq	r0, #1
   21f94:	sub	r3, r3, #2
   21f98:	bne	21fcc <__assert_fail@plt+0x1062c>
   21f9c:	ldrsh	r2, [r3, #2]!
   21fa0:	asr	r1, r4, #5
   21fa4:	and	ip, r4, #31
   21fa8:	add	r4, r4, #1
   21fac:	cmp	r2, #0
   21fb0:	bge	21fc0 <__assert_fail@plt+0x10620>
   21fb4:	ldr	r2, [r5, r1, lsl #2]
   21fb8:	orr	r2, r2, r0, lsl ip
   21fbc:	str	r2, [r5, r1, lsl #2]
   21fc0:	cmp	r4, #256	; 0x100
   21fc4:	bne	21f9c <__assert_fail@plt+0x105fc>
   21fc8:	b	21aa4 <__assert_fail@plt+0x10104>
   21fcc:	add	lr, r6, #256	; 0x100
   21fd0:	mov	ip, #1
   21fd4:	ldrsh	r2, [r3, #2]!
   21fd8:	cmp	r2, #0
   21fdc:	bge	21ff8 <__assert_fail@plt+0x10658>
   21fe0:	ldrb	r2, [r6]
   21fe4:	asr	r0, r2, #5
   21fe8:	and	r2, r2, #31
   21fec:	ldr	r1, [r5, r0, lsl #2]
   21ff0:	orr	r2, r1, ip, lsl r2
   21ff4:	str	r2, [r5, r0, lsl #2]
   21ff8:	add	r6, r6, #1
   21ffc:	cmp	lr, r6
   22000:	bne	21fd4 <__assert_fail@plt+0x10634>
   22004:	b	21aa4 <__assert_fail@plt+0x10104>
   22008:	movw	r1, #21488	; 0x53f0
   2200c:	movt	r1, #3
   22010:	mov	r0, r7
   22014:	bl	11544 <strcmp@plt>
   22018:	subs	r4, r0, #0
   2201c:	bne	220a4 <__assert_fail@plt+0x10704>
   22020:	bl	11778 <__ctype_b_loc@plt>
   22024:	ldr	r3, [r0]
   22028:	cmp	r6, #0
   2202c:	moveq	r0, #1
   22030:	sub	r3, r3, #2
   22034:	bne	22068 <__assert_fail@plt+0x106c8>
   22038:	ldrh	r2, [r3, #2]!
   2203c:	asr	r1, r4, #5
   22040:	and	ip, r4, #31
   22044:	add	r4, r4, #1
   22048:	tst	r2, #4
   2204c:	beq	2205c <__assert_fail@plt+0x106bc>
   22050:	ldr	r2, [r5, r1, lsl #2]
   22054:	orr	r2, r2, r0, lsl ip
   22058:	str	r2, [r5, r1, lsl #2]
   2205c:	cmp	r4, #256	; 0x100
   22060:	bne	22038 <__assert_fail@plt+0x10698>
   22064:	b	21aa4 <__assert_fail@plt+0x10104>
   22068:	add	lr, r6, #256	; 0x100
   2206c:	mov	ip, #1
   22070:	ldrh	r2, [r3, #2]!
   22074:	tst	r2, #4
   22078:	beq	22094 <__assert_fail@plt+0x106f4>
   2207c:	ldrb	r2, [r6]
   22080:	asr	r0, r2, #5
   22084:	and	r2, r2, #31
   22088:	ldr	r1, [r5, r0, lsl #2]
   2208c:	orr	r2, r1, ip, lsl r2
   22090:	str	r2, [r5, r0, lsl #2]
   22094:	add	r6, r6, #1
   22098:	cmp	lr, r6
   2209c:	bne	22070 <__assert_fail@plt+0x106d0>
   220a0:	b	21aa4 <__assert_fail@plt+0x10104>
   220a4:	mov	r0, r7
   220a8:	movw	r1, #21496	; 0x53f8
   220ac:	movt	r1, #3
   220b0:	bl	11544 <strcmp@plt>
   220b4:	subs	r4, r0, #0
   220b8:	movne	r0, #4
   220bc:	bne	21aa8 <__assert_fail@plt+0x10108>
   220c0:	bl	11778 <__ctype_b_loc@plt>
   220c4:	ldr	r3, [r0]
   220c8:	cmp	r6, #0
   220cc:	moveq	r0, #1
   220d0:	sub	r3, r3, #2
   220d4:	bne	22108 <__assert_fail@plt+0x10768>
   220d8:	ldrh	r2, [r3, #2]!
   220dc:	asr	r1, r4, #5
   220e0:	and	ip, r4, #31
   220e4:	add	r4, r4, #1
   220e8:	tst	r2, #4096	; 0x1000
   220ec:	beq	220fc <__assert_fail@plt+0x1075c>
   220f0:	ldr	r2, [r5, r1, lsl #2]
   220f4:	orr	r2, r2, r0, lsl ip
   220f8:	str	r2, [r5, r1, lsl #2]
   220fc:	cmp	r4, #256	; 0x100
   22100:	bne	220d8 <__assert_fail@plt+0x10738>
   22104:	b	21aa4 <__assert_fail@plt+0x10104>
   22108:	mov	ip, #1
   2210c:	ldrh	r2, [r3, #2]!
   22110:	tst	r2, #4096	; 0x1000
   22114:	beq	22130 <__assert_fail@plt+0x10790>
   22118:	ldrb	r2, [r6, r4]
   2211c:	asr	r0, r2, #5
   22120:	and	r2, r2, #31
   22124:	ldr	r1, [r5, r0, lsl #2]
   22128:	orr	r2, r1, ip, lsl r2
   2212c:	str	r2, [r5, r0, lsl #2]
   22130:	add	r4, r4, #1
   22134:	cmp	r4, #256	; 0x100
   22138:	bne	2210c <__assert_fail@plt+0x1076c>
   2213c:	b	21aa4 <__assert_fail@plt+0x10104>
   22140:	add	lr, r6, #256	; 0x100
   22144:	mov	ip, #1
   22148:	ldrh	r2, [r3, #2]!
   2214c:	tst	r2, #16384	; 0x4000
   22150:	beq	2216c <__assert_fail@plt+0x107cc>
   22154:	ldrb	r2, [r6]
   22158:	asr	r0, r2, #5
   2215c:	and	r2, r2, #31
   22160:	ldr	r1, [r5, r0, lsl #2]
   22164:	orr	r2, r1, ip, lsl r2
   22168:	str	r2, [r5, r0, lsl #2]
   2216c:	add	r6, r6, #1
   22170:	cmp	lr, r6
   22174:	bne	22148 <__assert_fail@plt+0x107a8>
   22178:	b	21aa4 <__assert_fail@plt+0x10104>
   2217c:	add	lr, r6, #256	; 0x100
   22180:	mov	ip, #1
   22184:	ldrh	r2, [r3, #2]!
   22188:	tst	r2, #1
   2218c:	beq	221a8 <__assert_fail@plt+0x10808>
   22190:	ldrb	r2, [r6]
   22194:	asr	r0, r2, #5
   22198:	and	r2, r2, #31
   2219c:	ldr	r1, [r5, r0, lsl #2]
   221a0:	orr	r2, r1, ip, lsl r2
   221a4:	str	r2, [r5, r0, lsl #2]
   221a8:	add	r6, r6, #1
   221ac:	cmp	lr, r6
   221b0:	bne	22184 <__assert_fail@plt+0x107e4>
   221b4:	b	21aa4 <__assert_fail@plt+0x10104>
   221b8:	add	lr, r6, #256	; 0x100
   221bc:	mov	ip, #1
   221c0:	ldrh	r2, [r3, #2]!
   221c4:	tst	r2, #256	; 0x100
   221c8:	beq	221e4 <__assert_fail@plt+0x10844>
   221cc:	ldrb	r2, [r6]
   221d0:	asr	r0, r2, #5
   221d4:	and	r2, r2, #31
   221d8:	ldr	r1, [r5, r0, lsl #2]
   221dc:	orr	r2, r1, ip, lsl r2
   221e0:	str	r2, [r5, r0, lsl #2]
   221e4:	add	r6, r6, #1
   221e8:	cmp	lr, r6
   221ec:	bne	221c0 <__assert_fail@plt+0x10820>
   221f0:	b	21aa4 <__assert_fail@plt+0x10104>
   221f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   221f8:	strd	r6, [sp, #8]
   221fc:	ldr	r6, [r0]
   22200:	strd	r8, [sp, #16]
   22204:	strd	sl, [sp, #24]
   22208:	str	lr, [sp, #32]
   2220c:	sub	sp, sp, #316	; 0x13c
   22210:	ldr	ip, [r6, #92]	; 0x5c
   22214:	cmp	ip, #1
   22218:	ldreq	ip, [r0, #12]
   2221c:	movne	ip, #0
   22220:	ubfxeq	ip, ip, #22, #1
   22224:	str	ip, [sp, #12]
   22228:	ldr	ip, [r1]
   2222c:	cmp	ip, #0
   22230:	ble	22314 <__assert_fail@plt+0x10974>
   22234:	mov	r4, r3
   22238:	mov	r3, #255	; 0xff
   2223c:	movt	r3, #32
   22240:	mov	r5, #0
   22244:	str	r2, [sp, #4]
   22248:	str	r1, [sp, #20]
   2224c:	str	r0, [sp, #24]
   22250:	str	r3, [sp, #32]
   22254:	mov	r3, #1
   22258:	movt	r3, #32
   2225c:	str	r3, [sp, #36]	; 0x24
   22260:	b	22294 <__assert_fail@plt+0x108f4>
   22264:	cmp	r7, #3
   22268:	beq	224b8 <__assert_fail@plt+0x10b18>
   2226c:	cmp	r7, #6
   22270:	beq	22330 <__assert_fail@plt+0x10990>
   22274:	and	r3, r7, #253	; 0xfd
   22278:	cmp	r3, #5
   2227c:	beq	22670 <__assert_fail@plt+0x10cd0>
   22280:	cmp	r7, #2
   22284:	beq	2268c <__assert_fail@plt+0x10cec>
   22288:	add	r5, r5, #1
   2228c:	cmp	r5, ip
   22290:	bge	22314 <__assert_fail@plt+0x10974>
   22294:	ldr	r3, [sp, #4]
   22298:	ldr	r1, [r6]
   2229c:	ldr	r3, [r3]
   222a0:	ldr	r8, [r3, r5, lsl #2]
   222a4:	lsl	r3, r8, #3
   222a8:	add	r2, r1, r3
   222ac:	ldrb	r7, [r2, #4]
   222b0:	cmp	r7, #1
   222b4:	bne	22264 <__assert_fail@plt+0x108c4>
   222b8:	ldr	r2, [sp, #12]
   222bc:	ldrb	r9, [r1, r8, lsl #3]
   222c0:	cmp	r2, #0
   222c4:	strb	r7, [r4, r9]
   222c8:	beq	222e4 <__assert_fail@plt+0x10944>
   222cc:	str	r3, [sp, #8]
   222d0:	bl	11748 <__ctype_tolower_loc@plt>
   222d4:	ldr	r2, [r0]
   222d8:	ldr	r3, [sp, #8]
   222dc:	ldr	r2, [r2, r9, lsl #2]
   222e0:	strb	r7, [r4, r2]
   222e4:	ldr	r2, [sp, #24]
   222e8:	ldr	r2, [r2, #12]
   222ec:	tst	r2, #4194304	; 0x400000
   222f0:	beq	22300 <__assert_fail@plt+0x10960>
   222f4:	ldr	r2, [r6, #92]	; 0x5c
   222f8:	cmp	r2, #1
   222fc:	bgt	22590 <__assert_fail@plt+0x10bf0>
   22300:	ldr	r3, [sp, #20]
   22304:	add	r5, r5, #1
   22308:	ldr	ip, [r3]
   2230c:	cmp	r5, ip
   22310:	blt	22294 <__assert_fail@plt+0x108f4>
   22314:	add	sp, sp, #316	; 0x13c
   22318:	ldrd	r4, [sp]
   2231c:	ldrd	r6, [sp, #8]
   22320:	ldrd	r8, [sp, #16]
   22324:	ldrd	sl, [sp, #24]
   22328:	add	sp, sp, #32
   2232c:	pop	{pc}		; (ldr pc, [sp], #4)
   22330:	ldr	r1, [r6, #92]	; 0x5c
   22334:	ldr	fp, [r2]
   22338:	cmp	r1, #1
   2233c:	ble	22364 <__assert_fail@plt+0x109c4>
   22340:	ldr	r2, [fp, #36]	; 0x24
   22344:	cmp	r2, #0
   22348:	bne	22444 <__assert_fail@plt+0x10aa4>
   2234c:	ldrb	r2, [fp, #16]
   22350:	tst	r2, #1
   22354:	bne	22444 <__assert_fail@plt+0x10aa4>
   22358:	ldr	r2, [fp, #32]
   2235c:	cmp	r2, #0
   22360:	bne	22444 <__assert_fail@plt+0x10aa4>
   22364:	ldr	r2, [fp, #20]
   22368:	cmp	r2, #0
   2236c:	ble	22288 <__assert_fail@plt+0x108e8>
   22370:	str	r5, [sp, #28]
   22374:	mov	r5, fp
   22378:	mov	r7, #0
   2237c:	ldr	fp, [sp, #24]
   22380:	add	r8, sp, #56	; 0x38
   22384:	add	r9, sp, #48	; 0x30
   22388:	mov	sl, #1
   2238c:	mov	r2, #0
   22390:	mov	r3, #0
   22394:	mov	r0, r8
   22398:	strd	r2, [r9]
   2239c:	lsl	r3, r7, #2
   223a0:	mov	r2, r9
   223a4:	ldr	r1, [r5]
   223a8:	str	r3, [sp, #8]
   223ac:	ldr	r1, [r1, r7, lsl #2]
   223b0:	add	r7, r7, #1
   223b4:	bl	1152c <wcrtomb@plt>
   223b8:	cmn	r0, #1
   223bc:	beq	223ec <__assert_fail@plt+0x10a4c>
   223c0:	ldr	r3, [sp, #12]
   223c4:	ldrb	r2, [sp, #56]	; 0x38
   223c8:	cmp	r3, #0
   223cc:	strb	sl, [r4, r2]
   223d0:	str	r2, [sp, #16]
   223d4:	beq	223ec <__assert_fail@plt+0x10a4c>
   223d8:	bl	11748 <__ctype_tolower_loc@plt>
   223dc:	ldr	r1, [r0]
   223e0:	ldr	r2, [sp, #16]
   223e4:	ldr	r2, [r1, r2, lsl #2]
   223e8:	strb	sl, [r4, r2]
   223ec:	ldr	r2, [fp, #12]
   223f0:	tst	r2, #4194304	; 0x400000
   223f4:	beq	22430 <__assert_fail@plt+0x10a90>
   223f8:	ldr	r2, [r6, #92]	; 0x5c
   223fc:	cmp	r2, #1
   22400:	ble	22430 <__assert_fail@plt+0x10a90>
   22404:	ldr	r2, [r5]
   22408:	ldr	r3, [sp, #8]
   2240c:	ldr	r0, [r2, r3]
   22410:	bl	115f8 <towlower@plt>
   22414:	mov	r1, r0
   22418:	mov	r2, r9
   2241c:	mov	r0, r8
   22420:	bl	1152c <wcrtomb@plt>
   22424:	cmn	r0, #1
   22428:	ldrbne	r2, [sp, #56]	; 0x38
   2242c:	strbne	sl, [r4, r2]
   22430:	ldr	r2, [r5, #20]
   22434:	cmp	r7, r2
   22438:	blt	2238c <__assert_fail@plt+0x109ec>
   2243c:	ldr	r5, [sp, #28]
   22440:	b	22300 <__assert_fail@plt+0x10960>
   22444:	mov	r3, #0
   22448:	add	r8, sp, #56	; 0x38
   2244c:	add	r9, sp, #48	; 0x30
   22450:	mov	r7, #1
   22454:	strb	r3, [sp, #48]	; 0x30
   22458:	mov	r0, #0
   2245c:	mov	r1, #0
   22460:	mov	r3, r8
   22464:	mov	r2, #1
   22468:	strd	r0, [r8]
   2246c:	mov	r1, r9
   22470:	bl	1f100 <__assert_fail@plt+0xd760>
   22474:	cmn	r0, #2
   22478:	beq	22498 <__assert_fail@plt+0x10af8>
   2247c:	ldrb	r3, [sp, #48]	; 0x30
   22480:	add	r3, r3, #1
   22484:	uxtb	r3, r3
   22488:	cmp	r3, #0
   2248c:	strb	r3, [sp, #48]	; 0x30
   22490:	bne	22458 <__assert_fail@plt+0x10ab8>
   22494:	b	22300 <__assert_fail@plt+0x10960>
   22498:	ldrb	r2, [sp, #48]	; 0x30
   2249c:	add	r3, r2, #1
   224a0:	strb	r7, [r4, r2]
   224a4:	uxtb	r3, r3
   224a8:	cmp	r3, #0
   224ac:	strb	r3, [sp, #48]	; 0x30
   224b0:	bne	22458 <__assert_fail@plt+0x10ab8>
   224b4:	b	22300 <__assert_fail@plt+0x10960>
   224b8:	mov	sl, #0
   224bc:	mov	fp, #32
   224c0:	str	r3, [sp, #8]
   224c4:	str	r6, [sp, #16]
   224c8:	mov	r6, fp
   224cc:	mov	fp, sl
   224d0:	str	r5, [sp, #28]
   224d4:	mov	r5, sl
   224d8:	mov	r9, #1
   224dc:	ldr	sl, [sp, #12]
   224e0:	mov	r0, r1
   224e4:	cmp	sl, #0
   224e8:	lsl	r7, fp, #3
   224ec:	ldr	r3, [sp, #8]
   224f0:	ldr	r0, [r0, r3]
   224f4:	ldr	r8, [r0, fp]
   224f8:	bne	2253c <__assert_fail@plt+0x10b9c>
   224fc:	mov	r0, sl
   22500:	sub	lr, r4, r5
   22504:	lsr	r3, r8, r0
   22508:	tst	r3, #1
   2250c:	strbne	r9, [lr, r0]
   22510:	add	r0, r0, #1
   22514:	cmp	r0, #32
   22518:	bne	22504 <__assert_fail@plt+0x10b64>
   2251c:	add	fp, fp, #4
   22520:	add	r6, r6, #32
   22524:	cmp	fp, #32
   22528:	sub	r5, r5, #32
   2252c:	beq	22584 <__assert_fail@plt+0x10be4>
   22530:	ldr	r3, [sp, #16]
   22534:	ldr	r0, [r3]
   22538:	b	224e4 <__assert_fail@plt+0x10b44>
   2253c:	add	r3, r5, r7
   22540:	add	r2, r7, #128	; 0x80
   22544:	lsr	r3, r8, r3
   22548:	add	r1, r4, r7
   2254c:	tst	r3, #1
   22550:	beq	22574 <__assert_fail@plt+0x10bd4>
   22554:	cmp	r2, #384	; 0x180
   22558:	strb	r9, [r4, r7]
   2255c:	bcs	22570 <__assert_fail@plt+0x10bd0>
   22560:	bl	11748 <__ctype_tolower_loc@plt>
   22564:	ldr	r3, [r0]
   22568:	ldr	r1, [r3, r7, lsl #2]
   2256c:	add	r1, r4, r1
   22570:	strb	r9, [r1]
   22574:	add	r7, r7, #1
   22578:	cmp	r7, r6
   2257c:	bne	2253c <__assert_fail@plt+0x10b9c>
   22580:	b	2251c <__assert_fail@plt+0x10b7c>
   22584:	ldr	r6, [sp, #16]
   22588:	ldr	r5, [sp, #28]
   2258c:	b	22300 <__assert_fail@plt+0x10960>
   22590:	ldr	r1, [r6]
   22594:	add	r2, r8, #1
   22598:	ldrb	r0, [r1, r8, lsl #3]
   2259c:	strb	r0, [sp, #56]	; 0x38
   225a0:	ldr	r0, [r6, #8]
   225a4:	cmp	r0, r2
   225a8:	bls	226b0 <__assert_fail@plt+0x10d10>
   225ac:	add	r3, r3, #8
   225b0:	ldr	r0, [sp, #32]
   225b4:	add	r3, r1, r3
   225b8:	ldr	r1, [r3, #4]
   225bc:	and	r1, r1, r0
   225c0:	ldr	r0, [sp, #36]	; 0x24
   225c4:	cmp	r1, r0
   225c8:	bne	226b0 <__assert_fail@plt+0x10d10>
   225cc:	mov	ip, r0
   225d0:	add	r7, sp, #57	; 0x39
   225d4:	ldr	r0, [sp, #32]
   225d8:	b	225f4 <__assert_fail@plt+0x10c54>
   225dc:	ldr	r3, [r6]
   225e0:	add	r3, r3, r2, lsl #3
   225e4:	ldr	r1, [r3, #4]
   225e8:	and	r1, r1, r0
   225ec:	cmp	r1, ip
   225f0:	bne	2260c <__assert_fail@plt+0x10c6c>
   225f4:	ldrb	r3, [r3]
   225f8:	add	r2, r2, #1
   225fc:	strb	r3, [r7], #1
   22600:	ldr	r3, [r6, #8]
   22604:	cmp	r3, r2
   22608:	bhi	225dc <__assert_fail@plt+0x10c3c>
   2260c:	add	r8, sp, #56	; 0x38
   22610:	sub	r7, r7, r8
   22614:	add	r9, sp, #48	; 0x30
   22618:	mov	sl, #0
   2261c:	mov	fp, #0
   22620:	mov	r2, r7
   22624:	mov	r3, r9
   22628:	mov	r1, r8
   2262c:	add	r0, sp, #44	; 0x2c
   22630:	strd	sl, [sp, #48]	; 0x30
   22634:	bl	1f100 <__assert_fail@plt+0xd760>
   22638:	cmp	r0, r7
   2263c:	bne	22300 <__assert_fail@plt+0x10960>
   22640:	ldr	r0, [sp, #44]	; 0x2c
   22644:	bl	115f8 <towlower@plt>
   22648:	mov	r1, r0
   2264c:	mov	r2, r9
   22650:	mov	r0, r8
   22654:	bl	1152c <wcrtomb@plt>
   22658:	cmn	r0, #1
   2265c:	beq	22300 <__assert_fail@plt+0x10960>
   22660:	ldrb	r3, [sp, #56]	; 0x38
   22664:	mov	r2, #1
   22668:	strb	r2, [r4, r3]
   2266c:	b	22300 <__assert_fail@plt+0x10960>
   22670:	mov	r0, r4
   22674:	mov	r2, #256	; 0x100
   22678:	mov	r1, #1
   2267c:	bl	11814 <memset@plt>
   22680:	cmp	r7, #2
   22684:	bne	22314 <__assert_fail@plt+0x10974>
   22688:	b	2269c <__assert_fail@plt+0x10cfc>
   2268c:	mov	r0, r4
   22690:	mov	r2, #256	; 0x100
   22694:	mov	r1, #1
   22698:	bl	11814 <memset@plt>
   2269c:	ldr	r2, [sp, #24]
   226a0:	ldrb	r3, [r2, #28]
   226a4:	orr	r3, r3, #1
   226a8:	strb	r3, [r2, #28]
   226ac:	b	22314 <__assert_fail@plt+0x10974>
   226b0:	add	r8, sp, #56	; 0x38
   226b4:	b	22614 <__assert_fail@plt+0x10c74>
   226b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   226bc:	ldr	r3, [r1, #56]	; 0x38
   226c0:	strd	r6, [sp, #8]
   226c4:	mov	r6, r0
   226c8:	ldr	r7, [r1, #40]	; 0x28
   226cc:	strd	r8, [sp, #16]
   226d0:	str	sl, [sp, #24]
   226d4:	str	lr, [sp, #28]
   226d8:	sub	sp, sp, #8
   226dc:	cmp	r3, r7
   226e0:	movle	r3, #2
   226e4:	movle	r0, #0
   226e8:	strble	r3, [r6, #4]
   226ec:	ble	229b4 <__assert_fail@plt+0x11014>
   226f0:	ldr	sl, [r1, #4]
   226f4:	mov	r8, r2
   226f8:	mov	r5, r1
   226fc:	ldrb	r3, [r6, #6]
   22700:	ldr	r2, [r1, #80]	; 0x50
   22704:	ldrb	r4, [sl, r7]
   22708:	bic	r3, r3, #96	; 0x60
   2270c:	cmp	r2, #1
   22710:	strb	r4, [r6]
   22714:	strb	r3, [r6, #6]
   22718:	ble	229d0 <__assert_fail@plt+0x11030>
   2271c:	ldr	r3, [r1, #28]
   22720:	cmp	r7, r3
   22724:	beq	22738 <__assert_fail@plt+0x10d98>
   22728:	ldr	r3, [r1, #8]
   2272c:	ldr	r3, [r3, r7, lsl #2]
   22730:	cmn	r3, #1
   22734:	beq	22c18 <__assert_fail@plt+0x11278>
   22738:	cmp	r4, #92	; 0x5c
   2273c:	beq	22a0c <__assert_fail@plt+0x1106c>
   22740:	ldr	r3, [r5, #8]
   22744:	mov	r2, #1
   22748:	strb	r2, [r6, #4]
   2274c:	ldr	r9, [r3, r7, lsl #2]
   22750:	mov	r0, r9
   22754:	sub	r9, r9, #95	; 0x5f
   22758:	bl	117e4 <iswalnum@plt>
   2275c:	ldrb	r3, [r6, #6]
   22760:	clz	r9, r9
   22764:	cmp	r0, #0
   22768:	lsr	r9, r9, #5
   2276c:	movne	r9, #1
   22770:	bfi	r3, r9, #6, #1
   22774:	strb	r3, [r6, #6]
   22778:	sub	r4, r4, #10
   2277c:	cmp	r4, #115	; 0x73
   22780:	ldrls	pc, [pc, r4, lsl #2]
   22784:	b	22c10 <__assert_fail@plt+0x11270>
   22788:	andeq	r2, r2, r0, ror sp
   2278c:	andeq	r2, r2, r0, lsl ip
   22790:	andeq	r2, r2, r0, lsl ip
   22794:	andeq	r2, r2, r0, lsl ip
   22798:	andeq	r2, r2, r0, lsl ip
   2279c:	andeq	r2, r2, r0, lsl ip
   227a0:	andeq	r2, r2, r0, lsl ip
   227a4:	andeq	r2, r2, r0, lsl ip
   227a8:	andeq	r2, r2, r0, lsl ip
   227ac:	andeq	r2, r2, r0, lsl ip
   227b0:	andeq	r2, r2, r0, lsl ip
   227b4:	andeq	r2, r2, r0, lsl ip
   227b8:	andeq	r2, r2, r0, lsl ip
   227bc:	andeq	r2, r2, r0, lsl ip
   227c0:	andeq	r2, r2, r0, lsl ip
   227c4:	andeq	r2, r2, r0, lsl ip
   227c8:	andeq	r2, r2, r0, lsl ip
   227cc:	andeq	r2, r2, r0, lsl ip
   227d0:	andeq	r2, r2, r0, lsl ip
   227d4:	andeq	r2, r2, r0, lsl ip
   227d8:	andeq	r2, r2, r0, lsl ip
   227dc:	andeq	r2, r2, r0, lsl ip
   227e0:	andeq	r2, r2, r0, lsl ip
   227e4:	andeq	r2, r2, r0, lsl ip
   227e8:	andeq	r2, r2, r0, lsl ip
   227ec:	andeq	r2, r2, r0, lsl ip
   227f0:	andeq	r2, r2, r8, asr r9
   227f4:	andeq	r2, r2, r0, lsl ip
   227f8:	andeq	r2, r2, r0, lsl ip
   227fc:	andeq	r2, r2, r0, lsl ip
   22800:	andeq	r2, r2, ip, ror #25
   22804:	andeq	r2, r2, r4, lsl #26
   22808:	ldrdeq	r2, [r2], -ip
   2280c:	andeq	r2, r2, ip, lsl sp
   22810:	andeq	r2, r2, r0, lsl ip
   22814:	andeq	r2, r2, r0, lsl ip
   22818:	andeq	r2, r2, r4, ror #24
   2281c:	andeq	r2, r2, r0, lsl ip
   22820:	andeq	r2, r2, r0, lsl ip
   22824:	andeq	r2, r2, r0, lsl ip
   22828:	andeq	r2, r2, r0, lsl ip
   2282c:	andeq	r2, r2, r0, lsl ip
   22830:	andeq	r2, r2, r0, lsl ip
   22834:	andeq	r2, r2, r0, lsl ip
   22838:	andeq	r2, r2, r0, lsl ip
   2283c:	andeq	r2, r2, r0, lsl ip
   22840:	andeq	r2, r2, r0, lsl ip
   22844:	andeq	r2, r2, r0, lsl ip
   22848:	andeq	r2, r2, r0, lsl ip
   2284c:	andeq	r2, r2, r0, lsl ip
   22850:	andeq	r2, r2, r0, lsl ip
   22854:	andeq	r2, r2, r0, lsl ip
   22858:	andeq	r2, r2, r0, lsl ip
   2285c:	andeq	r2, r2, r4, ror ip
   22860:	andeq	r2, r2, r0, lsl ip
   22864:	andeq	r2, r2, r0, lsl ip
   22868:	andeq	r2, r2, r0, lsl ip
   2286c:	andeq	r2, r2, r0, lsl ip
   22870:	andeq	r2, r2, r0, lsl ip
   22874:	andeq	r2, r2, r0, lsl ip
   22878:	andeq	r2, r2, r0, lsl ip
   2287c:	andeq	r2, r2, r0, lsl ip
   22880:	andeq	r2, r2, r0, lsl ip
   22884:	andeq	r2, r2, r0, lsl ip
   22888:	andeq	r2, r2, r0, lsl ip
   2288c:	andeq	r2, r2, r0, lsl ip
   22890:	andeq	r2, r2, r0, lsl ip
   22894:	andeq	r2, r2, r0, lsl ip
   22898:	andeq	r2, r2, r0, lsl ip
   2289c:	andeq	r2, r2, r0, lsl ip
   228a0:	andeq	r2, r2, r0, lsl ip
   228a4:	andeq	r2, r2, r0, lsl ip
   228a8:	andeq	r2, r2, r0, lsl ip
   228ac:	andeq	r2, r2, r0, lsl ip
   228b0:	andeq	r2, r2, r0, lsl ip
   228b4:	andeq	r2, r2, r0, lsl ip
   228b8:	andeq	r2, r2, r0, lsl ip
   228bc:	andeq	r2, r2, r0, lsl ip
   228c0:	andeq	r2, r2, r0, lsl ip
   228c4:	andeq	r2, r2, r0, lsl ip
   228c8:	andeq	r2, r2, r0, lsl ip
   228cc:	muleq	r2, r0, ip
   228d0:	andeq	r2, r2, r0, lsl ip
   228d4:	andeq	r2, r2, r0, lsl ip
   228d8:	andeq	r2, r2, r0, lsr #25
   228dc:	andeq	r2, r2, r0, lsl ip
   228e0:	andeq	r2, r2, r0, lsl ip
   228e4:	andeq	r2, r2, r0, lsl ip
   228e8:	andeq	r2, r2, r0, lsl ip
   228ec:	andeq	r2, r2, r0, lsl ip
   228f0:	andeq	r2, r2, r0, lsl ip
   228f4:	andeq	r2, r2, r0, lsl ip
   228f8:	andeq	r2, r2, r0, lsl ip
   228fc:	andeq	r2, r2, r0, lsl ip
   22900:	andeq	r2, r2, r0, lsl ip
   22904:	andeq	r2, r2, r0, lsl ip
   22908:	andeq	r2, r2, r0, lsl ip
   2290c:	andeq	r2, r2, r0, lsl ip
   22910:	andeq	r2, r2, r0, lsl ip
   22914:	andeq	r2, r2, r0, lsl ip
   22918:	andeq	r2, r2, r0, lsl ip
   2291c:	andeq	r2, r2, r0, lsl ip
   22920:	andeq	r2, r2, r0, lsl ip
   22924:	andeq	r2, r2, r0, lsl ip
   22928:	andeq	r2, r2, r0, lsl ip
   2292c:	andeq	r2, r2, r0, lsl ip
   22930:	andeq	r2, r2, r0, lsl ip
   22934:	andeq	r2, r2, r0, lsl ip
   22938:	andeq	r2, r2, r0, lsl ip
   2293c:	andeq	r2, r2, r0, lsl ip
   22940:	andeq	r2, r2, r0, lsl ip
   22944:	andeq	r2, r2, r0, lsl ip
   22948:	andeq	r2, r2, r0, lsl ip
   2294c:	andeq	r2, r2, r8, lsr sp
   22950:	andeq	r2, r2, r4, asr sp
   22954:	andeq	r2, r2, ip, ror sp
   22958:	tst	r8, #8
   2295c:	bne	229a0 <__assert_fail@plt+0x11000>
   22960:	ldr	r3, [r5, #48]	; 0x30
   22964:	add	r7, r7, #1
   22968:	cmp	r7, r3
   2296c:	beq	229a0 <__assert_fail@plt+0x11000>
   22970:	mov	r2, r8
   22974:	mov	r1, r5
   22978:	str	r7, [r5, #40]	; 0x28
   2297c:	mov	r0, sp
   22980:	bl	226b8 <__assert_fail@plt+0x10d18>
   22984:	ldrb	r2, [sp, #4]
   22988:	ldr	r3, [r5, #40]	; 0x28
   2298c:	sub	r2, r2, #9
   22990:	cmp	r2, #1
   22994:	sub	r3, r3, #1
   22998:	str	r3, [r5, #40]	; 0x28
   2299c:	bhi	22c10 <__assert_fail@plt+0x11270>
   229a0:	mov	r3, #12
   229a4:	mov	r2, #32
   229a8:	mov	r0, #1
   229ac:	str	r2, [r6]
   229b0:	strb	r3, [r6, #4]
   229b4:	add	sp, sp, #8
   229b8:	ldrd	r4, [sp]
   229bc:	ldrd	r6, [sp, #8]
   229c0:	ldrd	r8, [sp, #16]
   229c4:	ldr	sl, [sp, #24]
   229c8:	add	sp, sp, #28
   229cc:	pop	{pc}		; (ldr pc, [sp], #4)
   229d0:	cmp	r4, #92	; 0x5c
   229d4:	beq	22a0c <__assert_fail@plt+0x1106c>
   229d8:	mov	r3, #1
   229dc:	strb	r3, [r6, #4]
   229e0:	bl	11778 <__ctype_b_loc@plt>
   229e4:	ldr	r1, [r0]
   229e8:	lsl	r3, r4, #1
   229ec:	ldrb	r2, [r6, #6]
   229f0:	ldrh	r3, [r1, r3]
   229f4:	ubfx	r3, r3, #3, #1
   229f8:	cmp	r4, #95	; 0x5f
   229fc:	orreq	r3, r3, #1
   22a00:	bfi	r2, r3, #6, #1
   22a04:	strb	r2, [r6, #6]
   22a08:	b	22778 <__assert_fail@plt+0x10dd8>
   22a0c:	ldr	r1, [r5, #48]	; 0x30
   22a10:	add	r3, r7, #1
   22a14:	cmp	r3, r1
   22a18:	blt	22a2c <__assert_fail@plt+0x1108c>
   22a1c:	mov	r3, #36	; 0x24
   22a20:	mov	r0, #1
   22a24:	strb	r3, [r6, #4]
   22a28:	b	229b4 <__assert_fail@plt+0x11014>
   22a2c:	ldrb	r1, [r5, #75]	; 0x4b
   22a30:	cmp	r1, #0
   22a34:	bne	22f9c <__assert_fail@plt+0x115fc>
   22a38:	ldrb	r7, [sl, r3]
   22a3c:	mov	r1, #1
   22a40:	strb	r7, [r6]
   22a44:	cmp	r2, r1
   22a48:	strb	r1, [r6, #4]
   22a4c:	ble	22c38 <__assert_fail@plt+0x11298>
   22a50:	ldr	r1, [r5, #8]
   22a54:	add	r1, r1, r3, lsl #2
   22a58:	ldr	r4, [r1]
   22a5c:	mov	r0, r4
   22a60:	sub	r4, r4, #95	; 0x5f
   22a64:	bl	117e4 <iswalnum@plt>
   22a68:	ldrb	r3, [r6, #6]
   22a6c:	clz	r4, r4
   22a70:	cmp	r0, #0
   22a74:	lsr	r4, r4, #5
   22a78:	movne	r4, #1
   22a7c:	bfi	r3, r4, #6, #1
   22a80:	strb	r3, [r6, #6]
   22a84:	sub	r3, r7, #39	; 0x27
   22a88:	cmp	r3, #86	; 0x56
   22a8c:	ldrls	pc, [pc, r3, lsl #2]
   22a90:	b	22db0 <__assert_fail@plt+0x11410>
   22a94:	andeq	r2, r2, r4, ror #30
   22a98:	andeq	r2, r2, r4, lsl #31
   22a9c:	andeq	r2, r2, ip, asr #30
   22aa0:			; <UNDEFINED> instruction: 0x00022db0
   22aa4:	andeq	r2, r2, ip, lsr #30
   22aa8:			; <UNDEFINED> instruction: 0x00022db0
   22aac:			; <UNDEFINED> instruction: 0x00022db0
   22ab0:			; <UNDEFINED> instruction: 0x00022db0
   22ab4:			; <UNDEFINED> instruction: 0x00022db0
   22ab8:			; <UNDEFINED> instruction: 0x00022db0
   22abc:	andeq	r2, r2, ip, lsl #30
   22ac0:	andeq	r2, r2, ip, lsl #30
   22ac4:	andeq	r2, r2, ip, lsl #30
   22ac8:	andeq	r2, r2, ip, lsl #30
   22acc:	andeq	r2, r2, ip, lsl #30
   22ad0:	andeq	r2, r2, ip, lsl #30
   22ad4:	andeq	r2, r2, ip, lsl #30
   22ad8:	andeq	r2, r2, ip, lsl #30
   22adc:	andeq	r2, r2, ip, lsl #30
   22ae0:			; <UNDEFINED> instruction: 0x00022db0
   22ae4:			; <UNDEFINED> instruction: 0x00022db0
   22ae8:	andeq	r2, r2, ip, ror #29
   22aec:			; <UNDEFINED> instruction: 0x00022db0
   22af0:	andeq	r2, r2, ip, asr #29
   22af4:	andeq	r2, r2, ip, lsr #29
   22af8:			; <UNDEFINED> instruction: 0x00022db0
   22afc:			; <UNDEFINED> instruction: 0x00022db0
   22b00:	andeq	r2, r2, ip, lsl #29
   22b04:			; <UNDEFINED> instruction: 0x00022db0
   22b08:			; <UNDEFINED> instruction: 0x00022db0
   22b0c:			; <UNDEFINED> instruction: 0x00022db0
   22b10:			; <UNDEFINED> instruction: 0x00022db0
   22b14:			; <UNDEFINED> instruction: 0x00022db0
   22b18:			; <UNDEFINED> instruction: 0x00022db0
   22b1c:			; <UNDEFINED> instruction: 0x00022db0
   22b20:			; <UNDEFINED> instruction: 0x00022db0
   22b24:			; <UNDEFINED> instruction: 0x00022db0
   22b28:			; <UNDEFINED> instruction: 0x00022db0
   22b2c:			; <UNDEFINED> instruction: 0x00022db0
   22b30:			; <UNDEFINED> instruction: 0x00022db0
   22b34:			; <UNDEFINED> instruction: 0x00022db0
   22b38:			; <UNDEFINED> instruction: 0x00022db0
   22b3c:			; <UNDEFINED> instruction: 0x00022db0
   22b40:			; <UNDEFINED> instruction: 0x00022db0
   22b44:	andeq	r2, r2, r4, ror lr
   22b48:			; <UNDEFINED> instruction: 0x00022db0
   22b4c:			; <UNDEFINED> instruction: 0x00022db0
   22b50:			; <UNDEFINED> instruction: 0x00022db0
   22b54:	andeq	r2, r2, ip, asr lr
   22b58:			; <UNDEFINED> instruction: 0x00022db0
   22b5c:			; <UNDEFINED> instruction: 0x00022db0
   22b60:			; <UNDEFINED> instruction: 0x00022db0
   22b64:			; <UNDEFINED> instruction: 0x00022db0
   22b68:			; <UNDEFINED> instruction: 0x00022db0
   22b6c:			; <UNDEFINED> instruction: 0x00022db0
   22b70:			; <UNDEFINED> instruction: 0x00022db0
   22b74:			; <UNDEFINED> instruction: 0x00022db0
   22b78:	andeq	r2, r2, ip, lsr lr
   22b7c:			; <UNDEFINED> instruction: 0x00022db0
   22b80:	andeq	r2, r2, ip, lsl lr
   22b84:			; <UNDEFINED> instruction: 0x00022db0
   22b88:			; <UNDEFINED> instruction: 0x00022db0
   22b8c:			; <UNDEFINED> instruction: 0x00022db0
   22b90:			; <UNDEFINED> instruction: 0x00022db0
   22b94:			; <UNDEFINED> instruction: 0x00022db0
   22b98:			; <UNDEFINED> instruction: 0x00022db0
   22b9c:			; <UNDEFINED> instruction: 0x00022db0
   22ba0:			; <UNDEFINED> instruction: 0x00022db0
   22ba4:			; <UNDEFINED> instruction: 0x00022db0
   22ba8:			; <UNDEFINED> instruction: 0x00022db0
   22bac:			; <UNDEFINED> instruction: 0x00022db0
   22bb0:			; <UNDEFINED> instruction: 0x00022db0
   22bb4:			; <UNDEFINED> instruction: 0x00022db0
   22bb8:			; <UNDEFINED> instruction: 0x00022db0
   22bbc:			; <UNDEFINED> instruction: 0x00022db0
   22bc0:			; <UNDEFINED> instruction: 0x00022db0
   22bc4:	andeq	r2, r2, r4, lsl #28
   22bc8:			; <UNDEFINED> instruction: 0x00022db0
   22bcc:			; <UNDEFINED> instruction: 0x00022db0
   22bd0:			; <UNDEFINED> instruction: 0x00022db0
   22bd4:	andeq	r2, r2, ip, ror #27
   22bd8:			; <UNDEFINED> instruction: 0x00022db0
   22bdc:			; <UNDEFINED> instruction: 0x00022db0
   22be0:			; <UNDEFINED> instruction: 0x00022db0
   22be4:	ldrdeq	r2, [r2], -r0
   22be8:			; <UNDEFINED> instruction: 0x00022db8
   22bec:	muleq	r2, r8, sp
   22bf0:	add	r7, sl, r7
   22bf4:	eor	r3, r8, #2048	; 0x800
   22bf8:	ldrb	r2, [r7, #-1]
   22bfc:	ubfx	r3, r3, #11, #1
   22c00:	cmp	r2, #10
   22c04:	orrne	r3, r3, #1
   22c08:	cmp	r3, #0
   22c0c:	beq	22cc4 <__assert_fail@plt+0x11324>
   22c10:	mov	r0, #1
   22c14:	b	229b4 <__assert_fail@plt+0x11014>
   22c18:	ldr	r3, [r6, #4]
   22c1c:	mov	r0, #1
   22c20:	bic	r3, r3, #2097152	; 0x200000
   22c24:	bic	r3, r3, #255	; 0xff
   22c28:	orr	r3, r3, #2097152	; 0x200000
   22c2c:	orr	r3, r3, r0
   22c30:	str	r3, [r6, #4]
   22c34:	b	229b4 <__assert_fail@plt+0x11014>
   22c38:	bl	11778 <__ctype_b_loc@plt>
   22c3c:	ldr	r1, [r0]
   22c40:	lsl	r3, r7, #1
   22c44:	ldrb	r2, [r6, #6]
   22c48:	ldrh	r3, [r1, r3]
   22c4c:	ubfx	r3, r3, #3, #1
   22c50:	cmp	r7, #95	; 0x5f
   22c54:	orreq	r3, r3, #1
   22c58:	bfi	r2, r3, #6, #1
   22c5c:	strb	r2, [r6, #6]
   22c60:	b	22a84 <__assert_fail@plt+0x110e4>
   22c64:	mov	r3, #5
   22c68:	mov	r0, #1
   22c6c:	strb	r3, [r6, #4]
   22c70:	b	229b4 <__assert_fail@plt+0x11014>
   22c74:	movw	r3, #1026	; 0x402
   22c78:	tst	r8, r3
   22c7c:	bne	22c10 <__assert_fail@plt+0x11270>
   22c80:	mov	r3, #19
   22c84:	mov	r0, #1
   22c88:	strb	r3, [r6, #4]
   22c8c:	b	229b4 <__assert_fail@plt+0x11014>
   22c90:	mov	r3, #20
   22c94:	mov	r0, #1
   22c98:	strb	r3, [r6, #4]
   22c9c:	b	229b4 <__assert_fail@plt+0x11014>
   22ca0:	mov	r3, #8
   22ca4:	movt	r3, #128	; 0x80
   22ca8:	tst	r8, r3
   22cac:	moveq	r3, #1
   22cb0:	movne	r3, #0
   22cb4:	cmp	r7, #0
   22cb8:	moveq	r3, #0
   22cbc:	cmp	r3, #0
   22cc0:	bne	22bf0 <__assert_fail@plt+0x11250>
   22cc4:	mov	r3, #12
   22cc8:	mov	r2, #16
   22ccc:	mov	r0, #1
   22cd0:	str	r2, [r6]
   22cd4:	strb	r3, [r6, #4]
   22cd8:	b	229b4 <__assert_fail@plt+0x11014>
   22cdc:	mov	r3, #11
   22ce0:	mov	r0, #1
   22ce4:	strb	r3, [r6, #4]
   22ce8:	b	229b4 <__assert_fail@plt+0x11014>
   22cec:	tst	r8, #8192	; 0x2000
   22cf0:	beq	22c10 <__assert_fail@plt+0x11270>
   22cf4:	mov	r3, #8
   22cf8:	mov	r0, #1
   22cfc:	strb	r3, [r6, #4]
   22d00:	b	229b4 <__assert_fail@plt+0x11014>
   22d04:	tst	r8, #8192	; 0x2000
   22d08:	beq	22c10 <__assert_fail@plt+0x11270>
   22d0c:	mov	r3, #9
   22d10:	mov	r0, #1
   22d14:	strb	r3, [r6, #4]
   22d18:	b	229b4 <__assert_fail@plt+0x11014>
   22d1c:	movw	r3, #1026	; 0x402
   22d20:	tst	r8, r3
   22d24:	bne	22c10 <__assert_fail@plt+0x11270>
   22d28:	mov	r3, #18
   22d2c:	mov	r0, #1
   22d30:	strb	r3, [r6, #4]
   22d34:	b	229b4 <__assert_fail@plt+0x11014>
   22d38:	and	r2, r8, #4608	; 0x1200
   22d3c:	cmp	r2, #4608	; 0x1200
   22d40:	moveq	r3, #23
   22d44:	moveq	r0, #1
   22d48:	strbeq	r3, [r6, #4]
   22d4c:	bne	22c10 <__assert_fail@plt+0x11270>
   22d50:	b	229b4 <__assert_fail@plt+0x11014>
   22d54:	and	r2, r8, #33792	; 0x8400
   22d58:	cmp	r2, #32768	; 0x8000
   22d5c:	bne	22c10 <__assert_fail@plt+0x11270>
   22d60:	mov	r3, #10
   22d64:	mov	r0, #1
   22d68:	strb	r3, [r6, #4]
   22d6c:	b	229b4 <__assert_fail@plt+0x11014>
   22d70:	tst	r8, #2048	; 0x800
   22d74:	beq	22c10 <__assert_fail@plt+0x11270>
   22d78:	b	22d60 <__assert_fail@plt+0x113c0>
   22d7c:	and	r2, r8, #4608	; 0x1200
   22d80:	cmp	r2, #4608	; 0x1200
   22d84:	moveq	r3, #24
   22d88:	moveq	r0, #1
   22d8c:	strbeq	r3, [r6, #4]
   22d90:	bne	22c10 <__assert_fail@plt+0x11270>
   22d94:	b	229b4 <__assert_fail@plt+0x11014>
   22d98:	and	r2, r8, #4608	; 0x1200
   22d9c:	cmp	r2, #512	; 0x200
   22da0:	moveq	r3, #24
   22da4:	moveq	r0, #2
   22da8:	strbeq	r3, [r6, #4]
   22dac:	beq	229b4 <__assert_fail@plt+0x11014>
   22db0:	mov	r0, #2
   22db4:	b	229b4 <__assert_fail@plt+0x11014>
   22db8:	tst	r8, #33792	; 0x8400
   22dbc:	bne	22db0 <__assert_fail@plt+0x11410>
   22dc0:	mov	r3, #10
   22dc4:	mov	r0, #2
   22dc8:	strb	r3, [r6, #4]
   22dcc:	b	229b4 <__assert_fail@plt+0x11014>
   22dd0:	and	r2, r8, #4608	; 0x1200
   22dd4:	cmp	r2, #512	; 0x200
   22dd8:	moveq	r3, #23
   22ddc:	moveq	r0, #2
   22de0:	strbeq	r3, [r6, #4]
   22de4:	bne	22db0 <__assert_fail@plt+0x11410>
   22de8:	b	229b4 <__assert_fail@plt+0x11014>
   22dec:	tst	r8, #524288	; 0x80000
   22df0:	bne	22db0 <__assert_fail@plt+0x11410>
   22df4:	mov	r3, #32
   22df8:	mov	r0, #2
   22dfc:	strb	r3, [r6, #4]
   22e00:	b	229b4 <__assert_fail@plt+0x11014>
   22e04:	tst	r8, #524288	; 0x80000
   22e08:	bne	22db0 <__assert_fail@plt+0x11410>
   22e0c:	mov	r3, #34	; 0x22
   22e10:	mov	r0, #2
   22e14:	strb	r3, [r6, #4]
   22e18:	b	229b4 <__assert_fail@plt+0x11014>
   22e1c:	tst	r8, #524288	; 0x80000
   22e20:	bne	22db0 <__assert_fail@plt+0x11410>
   22e24:	mov	r3, #12
   22e28:	mov	r2, #256	; 0x100
   22e2c:	mov	r0, #2
   22e30:	str	r2, [r6]
   22e34:	strb	r3, [r6, #4]
   22e38:	b	229b4 <__assert_fail@plt+0x11014>
   22e3c:	tst	r8, #524288	; 0x80000
   22e40:	bne	22db0 <__assert_fail@plt+0x11410>
   22e44:	mov	r3, #12
   22e48:	mov	r2, #64	; 0x40
   22e4c:	mov	r0, #2
   22e50:	str	r2, [r6]
   22e54:	strb	r3, [r6, #4]
   22e58:	b	229b4 <__assert_fail@plt+0x11014>
   22e5c:	tst	r8, #524288	; 0x80000
   22e60:	bne	22db0 <__assert_fail@plt+0x11410>
   22e64:	mov	r3, #33	; 0x21
   22e68:	mov	r0, #2
   22e6c:	strb	r3, [r6, #4]
   22e70:	b	229b4 <__assert_fail@plt+0x11014>
   22e74:	tst	r8, #524288	; 0x80000
   22e78:	bne	22db0 <__assert_fail@plt+0x11410>
   22e7c:	mov	r3, #35	; 0x23
   22e80:	mov	r0, #2
   22e84:	strb	r3, [r6, #4]
   22e88:	b	229b4 <__assert_fail@plt+0x11014>
   22e8c:	tst	r8, #524288	; 0x80000
   22e90:	bne	22db0 <__assert_fail@plt+0x11410>
   22e94:	mov	r3, #12
   22e98:	mov	r2, #512	; 0x200
   22e9c:	mov	r0, #2
   22ea0:	str	r2, [r6]
   22ea4:	strb	r3, [r6, #4]
   22ea8:	b	229b4 <__assert_fail@plt+0x11014>
   22eac:	movw	r2, #1026	; 0x402
   22eb0:	and	r2, r2, r8
   22eb4:	cmp	r2, #2
   22eb8:	moveq	r3, #19
   22ebc:	moveq	r0, r2
   22ec0:	strbeq	r3, [r6, #4]
   22ec4:	bne	22db0 <__assert_fail@plt+0x11410>
   22ec8:	b	229b4 <__assert_fail@plt+0x11014>
   22ecc:	tst	r8, #524288	; 0x80000
   22ed0:	bne	22db0 <__assert_fail@plt+0x11410>
   22ed4:	mov	r3, #12
   22ed8:	mov	r2, #9
   22edc:	mov	r0, #2
   22ee0:	str	r2, [r6]
   22ee4:	strb	r3, [r6, #4]
   22ee8:	b	229b4 <__assert_fail@plt+0x11014>
   22eec:	tst	r8, #524288	; 0x80000
   22ef0:	bne	22db0 <__assert_fail@plt+0x11410>
   22ef4:	mov	r3, #12
   22ef8:	mov	r2, #6
   22efc:	mov	r0, #2
   22f00:	str	r2, [r6]
   22f04:	strb	r3, [r6, #4]
   22f08:	b	229b4 <__assert_fail@plt+0x11014>
   22f0c:	tst	r8, #16384	; 0x4000
   22f10:	bne	22db0 <__assert_fail@plt+0x11410>
   22f14:	sub	r7, r7, #49	; 0x31
   22f18:	mov	r3, #4
   22f1c:	mov	r0, #2
   22f20:	str	r7, [r6]
   22f24:	strb	r3, [r6, #4]
   22f28:	b	229b4 <__assert_fail@plt+0x11014>
   22f2c:	movw	r2, #1026	; 0x402
   22f30:	and	r2, r2, r8
   22f34:	cmp	r2, #2
   22f38:	moveq	r3, #18
   22f3c:	moveq	r0, r2
   22f40:	strbeq	r3, [r6, #4]
   22f44:	bne	22db0 <__assert_fail@plt+0x11410>
   22f48:	b	229b4 <__assert_fail@plt+0x11014>
   22f4c:	tst	r8, #8192	; 0x2000
   22f50:	bne	22db0 <__assert_fail@plt+0x11410>
   22f54:	mov	r3, #9
   22f58:	mov	r0, #2
   22f5c:	strb	r3, [r6, #4]
   22f60:	b	229b4 <__assert_fail@plt+0x11014>
   22f64:	tst	r8, #524288	; 0x80000
   22f68:	bne	22db0 <__assert_fail@plt+0x11410>
   22f6c:	mov	r3, #12
   22f70:	mov	r2, #128	; 0x80
   22f74:	mov	r0, #2
   22f78:	str	r2, [r6]
   22f7c:	strb	r3, [r6, #4]
   22f80:	b	229b4 <__assert_fail@plt+0x11014>
   22f84:	tst	r8, #8192	; 0x2000
   22f88:	bne	22db0 <__assert_fail@plt+0x11410>
   22f8c:	mov	r3, #8
   22f90:	mov	r0, #2
   22f94:	strb	r3, [r6, #4]
   22f98:	b	229b4 <__assert_fail@plt+0x11014>
   22f9c:	cmp	r2, #1
   22fa0:	ble	22fd4 <__assert_fail@plt+0x11634>
   22fa4:	ldr	r1, [r5, #8]
   22fa8:	ldr	r0, [r1, r3, lsl #2]
   22fac:	add	r1, r1, r3, lsl #2
   22fb0:	cmn	r0, #1
   22fb4:	beq	23010 <__assert_fail@plt+0x11670>
   22fb8:	ldr	r0, [r5, #28]
   22fbc:	add	r7, r7, #2
   22fc0:	cmp	r0, r7
   22fc4:	beq	22fd4 <__assert_fail@plt+0x11634>
   22fc8:	ldr	r0, [r1, #4]
   22fcc:	cmn	r0, #1
   22fd0:	beq	23010 <__assert_fail@plt+0x11670>
   22fd4:	ldrb	r0, [r5, #76]	; 0x4c
   22fd8:	ldr	r1, [r5]
   22fdc:	ldr	ip, [r5, #24]
   22fe0:	cmp	r0, #0
   22fe4:	beq	23004 <__assert_fail@plt+0x11664>
   22fe8:	ldr	r0, [r5, #12]
   22fec:	add	r1, r1, ip
   22ff0:	ldr	r0, [r0, r3, lsl #2]
   22ff4:	ldrb	r7, [r1, r0]
   22ff8:	tst	r7, #128	; 0x80
   22ffc:	beq	22a3c <__assert_fail@plt+0x1109c>
   23000:	b	22a38 <__assert_fail@plt+0x11098>
   23004:	add	r1, r1, r3
   23008:	ldrb	r7, [r1, ip]
   2300c:	b	22a3c <__assert_fail@plt+0x1109c>
   23010:	ldrb	r7, [sl, r3]
   23014:	mov	r3, #1
   23018:	strb	r7, [r6]
   2301c:	strb	r3, [r6, #4]
   23020:	b	22a58 <__assert_fail@plt+0x110b8>
   23024:	ldr	r3, [r1]
   23028:	strd	r4, [sp, #-12]!
   2302c:	mov	r5, r0
   23030:	str	lr, [sp, #8]
   23034:	sub	sp, sp, #12
   23038:	cmp	r3, #31
   2303c:	beq	230a8 <__assert_fail@plt+0x11708>
   23040:	ldr	ip, [r5]
   23044:	lsl	lr, r3, #5
   23048:	add	r4, r3, #1
   2304c:	add	r0, lr, #4
   23050:	add	r3, ip, lr
   23054:	str	r4, [r1]
   23058:	mov	r1, #0
   2305c:	add	lr, lr, #16
   23060:	add	r0, ip, r0
   23064:	str	r1, [r3, #4]
   23068:	add	ip, ip, lr
   2306c:	mvn	lr, #0
   23070:	str	r1, [r3, #8]
   23074:	str	r1, [r3, #12]
   23078:	ldrd	r4, [r2]
   2307c:	strd	r4, [r3, #24]
   23080:	ldrb	r2, [ip, #14]
   23084:	bic	r2, r2, #12
   23088:	strb	r2, [ip, #14]
   2308c:	str	r1, [r3, #16]
   23090:	str	r1, [r3, #20]
   23094:	str	lr, [r3, #32]
   23098:	add	sp, sp, #12
   2309c:	ldrd	r4, [sp]
   230a0:	add	sp, sp, #8
   230a4:	pop	{pc}		; (ldr pc, [sp], #4)
   230a8:	mov	r0, #996	; 0x3e4
   230ac:	stm	sp, {r1, r2}
   230b0:	bl	1f0c4 <__assert_fail@plt+0xd724>
   230b4:	subs	ip, r0, #0
   230b8:	beq	230dc <__assert_fail@plt+0x1173c>
   230bc:	ldr	r3, [r5]
   230c0:	mov	r0, #4
   230c4:	mov	r4, #1
   230c8:	mov	lr, #0
   230cc:	str	ip, [r5]
   230d0:	ldm	sp, {r1, r2}
   230d4:	str	r3, [ip]
   230d8:	b	23050 <__assert_fail@plt+0x116b0>
   230dc:	mov	r0, ip
   230e0:	b	23098 <__assert_fail@plt+0x116f8>
   230e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   230e8:	ldr	ip, [r0, #84]	; 0x54
   230ec:	strd	r6, [sp, #8]
   230f0:	strd	r8, [sp, #16]
   230f4:	ldr	r8, [r0, #108]	; 0x6c
   230f8:	strd	sl, [sp, #24]
   230fc:	str	lr, [sp, #32]
   23100:	sub	sp, sp, #36	; 0x24
   23104:	ldr	r7, [sp, #72]	; 0x48
   23108:	str	ip, [sp, #12]
   2310c:	cmp	r8, #0
   23110:	ldr	r6, [sp, #80]	; 0x50
   23114:	ble	233fc <__assert_fail@plt+0x11a5c>
   23118:	ldr	sl, [r0, #116]	; 0x74
   2311c:	mov	lr, r8
   23120:	mov	r4, #0
   23124:	add	ip, lr, r4
   23128:	asr	ip, ip, #1
   2312c:	add	r5, ip, ip, lsl #1
   23130:	add	r5, sl, r5, lsl #3
   23134:	ldr	r5, [r5, #4]
   23138:	cmp	r7, r5
   2313c:	bgt	2335c <__assert_fail@plt+0x119bc>
   23140:	cmp	ip, r4
   23144:	ble	23190 <__assert_fail@plt+0x117f0>
   23148:	add	lr, ip, r4
   2314c:	asr	lr, lr, #1
   23150:	add	r5, lr, lr, lsl #1
   23154:	add	r5, sl, r5, lsl #3
   23158:	ldr	r5, [r5, #4]
   2315c:	cmp	r7, r5
   23160:	ble	23180 <__assert_fail@plt+0x117e0>
   23164:	b	23350 <__assert_fail@plt+0x119b0>
   23168:	add	r5, ip, ip, lsl #1
   2316c:	add	r5, sl, r5, lsl #3
   23170:	ldr	r5, [r5, #4]
   23174:	cmp	r5, r7
   23178:	blt	2335c <__assert_fail@plt+0x119bc>
   2317c:	mov	lr, ip
   23180:	add	ip, r4, lr
   23184:	cmp	r4, lr
   23188:	asr	ip, ip, #1
   2318c:	blt	23168 <__assert_fail@plt+0x117c8>
   23190:	cmp	r8, r4
   23194:	mvnle	r4, #0
   23198:	ble	231b0 <__assert_fail@plt+0x11810>
   2319c:	add	ip, r4, r4, lsl #1
   231a0:	add	ip, sl, ip, lsl #3
   231a4:	ldr	ip, [ip, #4]
   231a8:	cmp	r7, ip
   231ac:	mvnne	r4, #0
   231b0:	mov	lr, r8
   231b4:	mov	r5, #0
   231b8:	add	fp, lr, r5
   231bc:	add	fp, fp, fp, lsr #31
   231c0:	asr	fp, fp, #1
   231c4:	add	ip, fp, fp, lsl #1
   231c8:	add	ip, sl, ip, lsl #3
   231cc:	ldr	ip, [ip, #4]
   231d0:	cmp	r6, ip
   231d4:	bgt	23340 <__assert_fail@plt+0x119a0>
   231d8:	cmp	fp, r5
   231dc:	ble	23238 <__assert_fail@plt+0x11898>
   231e0:	add	lr, fp, r5
   231e4:	add	lr, lr, lr, lsr #31
   231e8:	asr	lr, lr, #1
   231ec:	add	ip, lr, lr, lsl #1
   231f0:	mov	r9, lr
   231f4:	add	ip, sl, ip, lsl #3
   231f8:	ldr	ip, [ip, #4]
   231fc:	cmp	r6, ip
   23200:	ble	23228 <__assert_fail@plt+0x11888>
   23204:	b	23338 <__assert_fail@plt+0x11998>
   23208:	asr	ip, ip, #1
   2320c:	add	r9, ip, ip, lsl #1
   23210:	mov	fp, ip
   23214:	add	r9, sl, r9, lsl #3
   23218:	ldr	r9, [r9, #4]
   2321c:	cmp	r9, r6
   23220:	blt	23340 <__assert_fail@plt+0x119a0>
   23224:	mov	lr, ip
   23228:	add	ip, r5, lr
   2322c:	cmp	r5, lr
   23230:	add	ip, ip, ip, lsr #31
   23234:	blt	23208 <__assert_fail@plt+0x11868>
   23238:	cmp	r8, r5
   2323c:	ble	2342c <__assert_fail@plt+0x11a8c>
   23240:	add	ip, r5, r5, lsl #1
   23244:	add	sl, sl, ip, lsl #3
   23248:	ldr	ip, [sl, #4]
   2324c:	cmp	r6, ip
   23250:	mvnne	r5, #0
   23254:	ldr	ip, [r1]
   23258:	cmp	ip, #0
   2325c:	ble	233a4 <__assert_fail@plt+0x11a04>
   23260:	mov	sl, r2
   23264:	mov	r8, r0
   23268:	str	r1, [sp, #16]
   2326c:	mov	fp, #0
   23270:	str	r3, [sp, #20]
   23274:	str	r5, [sp, #24]
   23278:	str	r4, [sp, #28]
   2327c:	ldr	r3, [sl]
   23280:	lsl	r4, fp, #2
   23284:	ldr	r2, [sp, #12]
   23288:	ldr	r0, [r8, #116]	; 0x74
   2328c:	ldr	r3, [r3, fp, lsl #2]
   23290:	ldr	r1, [r2]
   23294:	add	r3, r3, r3, lsl #1
   23298:	add	r2, r0, r3, lsl #3
   2329c:	ldr	r0, [r0, r3, lsl #3]
   232a0:	ldr	r3, [r2, #8]
   232a4:	ldr	r9, [r1, r0, lsl #3]
   232a8:	cmp	r7, r3
   232ac:	blt	23408 <__assert_fail@plt+0x11a68>
   232b0:	ldr	r2, [r2, #12]
   232b4:	cmp	r7, r2
   232b8:	bgt	233f4 <__assert_fail@plt+0x11a54>
   232bc:	sub	r1, r7, r3
   232c0:	cmp	r7, r2
   232c4:	clz	r1, r1
   232c8:	lsr	r1, r1, #5
   232cc:	beq	233ac <__assert_fail@plt+0x11a0c>
   232d0:	cmp	r7, r3
   232d4:	movne	r5, #0
   232d8:	beq	233b0 <__assert_fail@plt+0x11a10>
   232dc:	cmp	r6, r3
   232e0:	blt	23318 <__assert_fail@plt+0x11978>
   232e4:	cmp	r6, r2
   232e8:	movgt	r0, #1
   232ec:	bgt	23310 <__assert_fail@plt+0x11970>
   232f0:	sub	r1, r6, r3
   232f4:	cmp	r6, r2
   232f8:	clz	r1, r1
   232fc:	lsr	r1, r1, #5
   23300:	beq	2336c <__assert_fail@plt+0x119cc>
   23304:	cmp	r6, r3
   23308:	movne	r0, #0
   2330c:	beq	23370 <__assert_fail@plt+0x119d0>
   23310:	cmp	r0, r5
   23314:	beq	23390 <__assert_fail@plt+0x119f0>
   23318:	mov	r0, #1
   2331c:	add	sp, sp, #36	; 0x24
   23320:	ldrd	r4, [sp]
   23324:	ldrd	r6, [sp, #8]
   23328:	ldrd	r8, [sp, #16]
   2332c:	ldrd	sl, [sp, #24]
   23330:	add	sp, sp, #32
   23334:	pop	{pc}		; (ldr pc, [sp], #4)
   23338:	mov	lr, fp
   2333c:	mov	fp, r9
   23340:	add	r5, fp, #1
   23344:	cmp	r5, lr
   23348:	blt	231b8 <__assert_fail@plt+0x11818>
   2334c:	b	23238 <__assert_fail@plt+0x11898>
   23350:	mov	r4, lr
   23354:	mov	lr, ip
   23358:	mov	ip, r4
   2335c:	add	r4, ip, #1
   23360:	cmp	r4, lr
   23364:	blt	23124 <__assert_fail@plt+0x11784>
   23368:	b	23190 <__assert_fail@plt+0x117f0>
   2336c:	orr	r1, r1, #2
   23370:	ldr	r3, [sp, #24]
   23374:	mov	r2, r9
   23378:	mov	r0, r8
   2337c:	str	r3, [sp]
   23380:	ldr	r3, [sp, #76]	; 0x4c
   23384:	bl	1f3ac <__assert_fail@plt+0xda0c>
   23388:	cmp	r0, r5
   2338c:	bne	23318 <__assert_fail@plt+0x11978>
   23390:	ldr	r3, [sp, #16]
   23394:	ldr	ip, [r3]
   23398:	add	fp, fp, #1
   2339c:	cmp	fp, ip
   233a0:	blt	2327c <__assert_fail@plt+0x118dc>
   233a4:	mov	r0, #0
   233a8:	b	2331c <__assert_fail@plt+0x1197c>
   233ac:	orr	r1, r1, #2
   233b0:	mov	r0, r8
   233b4:	ldr	r3, [sp, #20]
   233b8:	ldr	r2, [sp, #28]
   233bc:	str	r2, [sp]
   233c0:	mov	r2, r9
   233c4:	bl	1f3ac <__assert_fail@plt+0xda0c>
   233c8:	ldr	r3, [sl]
   233cc:	mov	r5, r0
   233d0:	ldr	r2, [r8, #116]	; 0x74
   233d4:	ldr	r3, [r3, r4]
   233d8:	add	r3, r3, r3, lsl #1
   233dc:	add	r2, r2, r3, lsl #3
   233e0:	ldr	r3, [r2, #8]
   233e4:	cmp	r6, r3
   233e8:	blt	23424 <__assert_fail@plt+0x11a84>
   233ec:	ldr	r2, [r2, #12]
   233f0:	b	232e4 <__assert_fail@plt+0x11944>
   233f4:	mov	r5, #1
   233f8:	b	232dc <__assert_fail@plt+0x1193c>
   233fc:	mvn	r4, #0
   23400:	mov	r5, r4
   23404:	b	23254 <__assert_fail@plt+0x118b4>
   23408:	cmp	r6, r3
   2340c:	blt	23398 <__assert_fail@plt+0x119f8>
   23410:	ldr	r2, [r2, #12]
   23414:	cmp	r6, r2
   23418:	bgt	23318 <__assert_fail@plt+0x11978>
   2341c:	mvn	r5, #0
   23420:	b	232f0 <__assert_fail@plt+0x11950>
   23424:	mvn	r0, #0
   23428:	b	23310 <__assert_fail@plt+0x11970>
   2342c:	mvn	r5, #0
   23430:	b	23254 <__assert_fail@plt+0x118b4>
   23434:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23438:	mov	r4, r0
   2343c:	strd	r6, [sp, #8]
   23440:	ldr	r0, [r1, #80]	; 0x50
   23444:	strd	r8, [sp, #16]
   23448:	str	sl, [sp, #24]
   2344c:	str	lr, [sp, #28]
   23450:	sub	sp, sp, #8
   23454:	ldrb	r7, [sp, #44]	; 0x2c
   23458:	cmp	r0, #1
   2345c:	ldr	ip, [r1, #40]	; 0x28
   23460:	beq	234c8 <__assert_fail@plt+0x11b28>
   23464:	add	r5, ip, #1
   23468:	ldr	r6, [r1, #28]
   2346c:	cmp	r5, r6
   23470:	bge	234c8 <__assert_fail@plt+0x11b28>
   23474:	ldr	r0, [r1, #8]
   23478:	ldr	lr, [r0, r5, lsl #2]
   2347c:	add	r0, r0, r5, lsl #2
   23480:	cmn	lr, #1
   23484:	bne	234c8 <__assert_fail@plt+0x11b28>
   23488:	add	r3, ip, #2
   2348c:	mov	r2, r0
   23490:	b	234a4 <__assert_fail@plt+0x11b04>
   23494:	ldr	ip, [r2, #4]!
   23498:	add	r3, r3, #1
   2349c:	cmn	ip, #1
   234a0:	bne	234b0 <__assert_fail@plt+0x11b10>
   234a4:	cmp	r6, r3
   234a8:	mov	lr, r3
   234ac:	bne	23494 <__assert_fail@plt+0x11af4>
   234b0:	ldr	r3, [r0, #-4]
   234b4:	mov	r2, #1
   234b8:	mov	r0, #0
   234bc:	strd	r2, [r4]
   234c0:	str	lr, [r1, #40]	; 0x28
   234c4:	b	23510 <__assert_fail@plt+0x11b70>
   234c8:	ldrb	lr, [r2, #4]
   234cc:	add	r3, ip, r3
   234d0:	str	r3, [r1, #40]	; 0x28
   234d4:	and	r0, lr, #251	; 0xfb
   234d8:	cmp	lr, #28
   234dc:	cmpne	r0, #26
   234e0:	beq	2352c <__assert_fail@plt+0x11b8c>
   234e4:	cmp	lr, #22
   234e8:	moveq	lr, r7
   234ec:	orrne	lr, r7, #1
   234f0:	mov	r5, r2
   234f4:	cmp	lr, #0
   234f8:	beq	236a4 <__assert_fail@plt+0x11d04>
   234fc:	ldrb	r2, [r5]
   23500:	mov	r3, #0
   23504:	mov	r0, r3
   23508:	str	r3, [r4]
   2350c:	strb	r2, [r4, #4]
   23510:	add	sp, sp, #8
   23514:	ldrd	r4, [sp]
   23518:	ldrd	r6, [sp, #8]
   2351c:	ldrd	r8, [sp, #16]
   23520:	ldr	sl, [sp, #24]
   23524:	add	sp, sp, #28
   23528:	pop	{pc}		; (ldr pc, [sp], #4)
   2352c:	ldr	r6, [r1, #56]	; 0x38
   23530:	cmp	r3, r6
   23534:	bge	235d4 <__assert_fail@plt+0x11c34>
   23538:	ldrb	r7, [r2]
   2353c:	mov	r5, #0
   23540:	b	23564 <__assert_fail@plt+0x11bc4>
   23544:	ldr	r3, [r4, #4]
   23548:	strb	r0, [r3, r5]
   2354c:	add	r5, r5, #1
   23550:	cmp	r5, #32
   23554:	beq	235d4 <__assert_fail@plt+0x11c34>
   23558:	ldrb	lr, [r2, #4]
   2355c:	ldr	r3, [r1, #40]	; 0x28
   23560:	ldr	r6, [r1, #56]	; 0x38
   23564:	cmp	lr, #30
   23568:	add	ip, r3, #1
   2356c:	beq	235dc <__assert_fail@plt+0x11c3c>
   23570:	ldr	r0, [r1, #4]
   23574:	str	ip, [r1, #40]	; 0x28
   23578:	ldrb	r0, [r0, r3]
   2357c:	cmp	r6, ip
   23580:	ble	235d4 <__assert_fail@plt+0x11c34>
   23584:	cmp	r7, r0
   23588:	bne	23544 <__assert_fail@plt+0x11ba4>
   2358c:	ldr	r3, [r1, #4]
   23590:	ldrb	r3, [r3, ip]
   23594:	cmp	r3, #93	; 0x5d
   23598:	bne	23544 <__assert_fail@plt+0x11ba4>
   2359c:	ldr	r3, [r4, #4]
   235a0:	add	ip, ip, #1
   235a4:	mov	r0, #0
   235a8:	str	ip, [r1, #40]	; 0x28
   235ac:	strb	r0, [r3, r5]
   235b0:	ldrb	r3, [r2, #4]
   235b4:	cmp	r3, #28
   235b8:	beq	236d0 <__assert_fail@plt+0x11d30>
   235bc:	cmp	r3, #30
   235c0:	beq	236c4 <__assert_fail@plt+0x11d24>
   235c4:	cmp	r3, #26
   235c8:	moveq	r3, #3
   235cc:	streq	r3, [r4]
   235d0:	b	23510 <__assert_fail@plt+0x11b70>
   235d4:	mov	r0, #7
   235d8:	b	23510 <__assert_fail@plt+0x11b70>
   235dc:	ldrb	r0, [r1, #75]	; 0x4b
   235e0:	cmp	r0, #0
   235e4:	beq	23570 <__assert_fail@plt+0x11bd0>
   235e8:	ldrb	r0, [r1, #76]	; 0x4c
   235ec:	cmp	r0, #0
   235f0:	beq	2368c <__assert_fail@plt+0x11cec>
   235f4:	ldr	r8, [r1, #28]
   235f8:	lsl	lr, r3, #2
   235fc:	cmp	r3, r8
   23600:	beq	23614 <__assert_fail@plt+0x11c74>
   23604:	ldr	r0, [r1, #8]
   23608:	ldr	r0, [r0, r3, lsl #2]
   2360c:	cmn	r0, #1
   23610:	beq	23570 <__assert_fail@plt+0x11bd0>
   23614:	ldr	r0, [r1]
   23618:	ldr	sl, [r1, #12]
   2361c:	ldr	r9, [r1, #24]
   23620:	ldr	sl, [sl, lr]
   23624:	add	r0, r0, sl
   23628:	ldrb	r0, [r0, r9]
   2362c:	tst	r0, #128	; 0x80
   23630:	bne	23570 <__assert_fail@plt+0x11bd0>
   23634:	ldr	r9, [r1, #80]	; 0x50
   23638:	cmp	r9, #1
   2363c:	beq	23684 <__assert_fail@plt+0x11ce4>
   23640:	cmp	r8, ip
   23644:	ble	23684 <__assert_fail@plt+0x11ce4>
   23648:	ldr	r9, [r1, #8]
   2364c:	add	lr, r9, lr
   23650:	ldr	lr, [lr, #4]
   23654:	cmn	lr, #1
   23658:	bne	23684 <__assert_fail@plt+0x11ce4>
   2365c:	add	r3, r3, #2
   23660:	sub	r9, r9, #4
   23664:	b	23674 <__assert_fail@plt+0x11cd4>
   23668:	ldr	lr, [r9, r3, lsl #2]
   2366c:	cmn	lr, #1
   23670:	bne	23684 <__assert_fail@plt+0x11ce4>
   23674:	cmp	r8, r3
   23678:	mov	ip, r3
   2367c:	add	r3, r3, #1
   23680:	bne	23668 <__assert_fail@plt+0x11cc8>
   23684:	str	ip, [r1, #40]	; 0x28
   23688:	b	2357c <__assert_fail@plt+0x11bdc>
   2368c:	ldr	r0, [r1]
   23690:	str	ip, [r1, #40]	; 0x28
   23694:	ldr	lr, [r1, #24]
   23698:	add	r3, r0, r3
   2369c:	ldrb	r0, [r3, lr]
   236a0:	b	2357c <__assert_fail@plt+0x11bdc>
   236a4:	mov	r0, sp
   236a8:	ldr	r2, [sp, #40]	; 0x28
   236ac:	bl	1f200 <__assert_fail@plt+0xd860>
   236b0:	ldrb	r3, [sp, #4]
   236b4:	cmp	r3, #21
   236b8:	movne	r0, #11
   236bc:	beq	234fc <__assert_fail@plt+0x11b5c>
   236c0:	b	23510 <__assert_fail@plt+0x11b70>
   236c4:	mov	r3, #4
   236c8:	str	r3, [r4]
   236cc:	b	23510 <__assert_fail@plt+0x11b70>
   236d0:	mov	r3, #2
   236d4:	str	r3, [r4]
   236d8:	b	23510 <__assert_fail@plt+0x11b70>
   236dc:	add	ip, r0, r2, lsl #3
   236e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   236e4:	strd	r6, [sp, #8]
   236e8:	str	r8, [sp, #16]
   236ec:	ldrb	r8, [ip, #4]
   236f0:	str	lr, [sp, #20]
   236f4:	ldr	r7, [sp, #24]
   236f8:	cmp	r8, #7
   236fc:	beq	23864 <__assert_fail@plt+0x11ec4>
   23700:	ldr	ip, [r3, #80]	; 0x50
   23704:	cmp	ip, #1
   23708:	beq	23768 <__assert_fail@plt+0x11dc8>
   2370c:	ldr	ip, [r3, #28]
   23710:	add	lr, r7, #1
   23714:	cmp	lr, ip
   23718:	bge	23768 <__assert_fail@plt+0x11dc8>
   2371c:	ldr	r4, [r3, #8]
   23720:	ldr	r5, [r4, lr, lsl #2]
   23724:	add	r6, r4, lr, lsl #2
   23728:	cmn	r5, #1
   2372c:	bne	23768 <__assert_fail@plt+0x11dc8>
   23730:	sub	ip, ip, r7
   23734:	mov	lr, r6
   23738:	mov	r4, #1
   2373c:	b	2374c <__assert_fail@plt+0x11dac>
   23740:	ldr	r5, [lr, #4]!
   23744:	cmn	r5, #1
   23748:	bne	23758 <__assert_fail@plt+0x11db8>
   2374c:	add	r4, r4, #1
   23750:	cmp	ip, r4
   23754:	bne	23740 <__assert_fail@plt+0x11da0>
   23758:	cmp	r8, #5
   2375c:	beq	23784 <__assert_fail@plt+0x11de4>
   23760:	cmp	r8, #6
   23764:	beq	237bc <__assert_fail@plt+0x11e1c>
   23768:	mov	r4, #0
   2376c:	mov	r0, r4
   23770:	ldrd	r4, [sp]
   23774:	ldrd	r6, [sp, #8]
   23778:	ldr	r8, [sp, #16]
   2377c:	add	sp, sp, #20
   23780:	pop	{pc}		; (ldr pc, [sp], #4)
   23784:	ldr	r2, [r1]
   23788:	tst	r2, #64	; 0x40
   2378c:	bne	237a0 <__assert_fail@plt+0x11e00>
   23790:	ldr	r1, [r3, #4]
   23794:	ldrb	r1, [r1, r7]
   23798:	cmp	r1, #10
   2379c:	beq	23768 <__assert_fail@plt+0x11dc8>
   237a0:	tst	r2, #128	; 0x80
   237a4:	beq	2376c <__assert_fail@plt+0x11dcc>
   237a8:	ldr	r3, [r3, #4]
   237ac:	ldrb	r3, [r3, r7]
   237b0:	cmp	r3, #0
   237b4:	beq	23768 <__assert_fail@plt+0x11dc8>
   237b8:	b	2376c <__assert_fail@plt+0x11dcc>
   237bc:	ldr	r7, [r0, r2, lsl #3]
   237c0:	ldr	r0, [r7, #20]
   237c4:	ldr	ip, [r7, #32]
   237c8:	cmp	ip, #0
   237cc:	bne	237dc <__assert_fail@plt+0x11e3c>
   237d0:	ldr	r3, [r7, #36]	; 0x24
   237d4:	orrs	r3, r0, r3
   237d8:	beq	23964 <__assert_fail@plt+0x11fc4>
   237dc:	cmp	r0, #0
   237e0:	ldr	r6, [r6, #-4]
   237e4:	ble	23818 <__assert_fail@plt+0x11e78>
   237e8:	ldr	r2, [r7]
   237ec:	ldr	r3, [r2]
   237f0:	cmp	r6, r3
   237f4:	beq	23854 <__assert_fail@plt+0x11eb4>
   237f8:	mov	r3, #0
   237fc:	b	2380c <__assert_fail@plt+0x11e6c>
   23800:	ldr	r1, [r2, #4]!
   23804:	cmp	r6, r1
   23808:	beq	23854 <__assert_fail@plt+0x11eb4>
   2380c:	add	r3, r3, #1
   23810:	cmp	r3, r0
   23814:	bne	23800 <__assert_fail@plt+0x11e60>
   23818:	ldr	r3, [r7, #36]	; 0x24
   2381c:	cmp	r3, #0
   23820:	ble	23928 <__assert_fail@plt+0x11f88>
   23824:	mov	r5, #0
   23828:	b	23838 <__assert_fail@plt+0x11e98>
   2382c:	ldr	r3, [r7, #36]	; 0x24
   23830:	cmp	r5, r3
   23834:	bge	23924 <__assert_fail@plt+0x11f84>
   23838:	ldr	r3, [r7, #12]
   2383c:	mov	r0, r6
   23840:	ldr	r1, [r3, r5, lsl #2]
   23844:	add	r5, r5, #1
   23848:	bl	11538 <iswctype@plt>
   2384c:	cmp	r0, #0
   23850:	beq	2382c <__assert_fail@plt+0x11e8c>
   23854:	ldrb	r3, [r7, #16]
   23858:	tst	r3, #1
   2385c:	beq	2376c <__assert_fail@plt+0x11dcc>
   23860:	b	23768 <__assert_fail@plt+0x11dc8>
   23864:	ldr	r1, [r3, #4]
   23868:	ldrb	r2, [r1, r7]
   2386c:	cmp	r2, #193	; 0xc1
   23870:	bls	23768 <__assert_fail@plt+0x11dc8>
   23874:	ldr	r3, [r3, #48]	; 0x30
   23878:	add	r0, r7, #1
   2387c:	cmp	r0, r3
   23880:	bge	23768 <__assert_fail@plt+0x11dc8>
   23884:	add	ip, r1, r7
   23888:	cmp	r2, #223	; 0xdf
   2388c:	ldrb	lr, [ip, #1]
   23890:	bls	23990 <__assert_fail@plt+0x11ff0>
   23894:	cmp	r2, #239	; 0xef
   23898:	bhi	23974 <__assert_fail@plt+0x11fd4>
   2389c:	cmp	lr, #159	; 0x9f
   238a0:	cmpls	r2, #224	; 0xe0
   238a4:	movne	r4, #3
   238a8:	beq	23768 <__assert_fail@plt+0x11dc8>
   238ac:	add	r7, r7, r4
   238b0:	cmp	r3, r7
   238b4:	blt	23768 <__assert_fail@plt+0x11dc8>
   238b8:	ldrb	r3, [r1, r0]
   238bc:	eor	r3, r3, #128	; 0x80
   238c0:	cmp	r3, #63	; 0x3f
   238c4:	bhi	23768 <__assert_fail@plt+0x11dc8>
   238c8:	ldrb	r3, [ip, #2]
   238cc:	eor	r3, r3, #128	; 0x80
   238d0:	cmp	r3, #63	; 0x3f
   238d4:	bhi	23768 <__assert_fail@plt+0x11dc8>
   238d8:	cmp	r4, #3
   238dc:	beq	2376c <__assert_fail@plt+0x11dcc>
   238e0:	ldrb	r3, [ip, #3]
   238e4:	eor	r3, r3, #128	; 0x80
   238e8:	cmp	r3, #63	; 0x3f
   238ec:	bhi	23768 <__assert_fail@plt+0x11dc8>
   238f0:	cmp	r4, #4
   238f4:	beq	2376c <__assert_fail@plt+0x11dcc>
   238f8:	ldrb	r3, [ip, #4]
   238fc:	eor	r3, r3, #128	; 0x80
   23900:	cmp	r3, #63	; 0x3f
   23904:	bhi	23768 <__assert_fail@plt+0x11dc8>
   23908:	cmp	r4, #6
   2390c:	bne	239dc <__assert_fail@plt+0x1203c>
   23910:	ldrb	r3, [ip, #5]
   23914:	eor	r3, r3, #128	; 0x80
   23918:	cmp	r3, #63	; 0x3f
   2391c:	bls	2376c <__assert_fail@plt+0x11dcc>
   23920:	b	23768 <__assert_fail@plt+0x11dc8>
   23924:	ldr	ip, [r7, #32]
   23928:	cmp	ip, #0
   2392c:	ble	23964 <__assert_fail@plt+0x11fc4>
   23930:	ldr	r2, [r7, #4]
   23934:	mov	r3, #0
   23938:	sub	r2, r2, #4
   2393c:	ldr	r1, [r2, #4]!
   23940:	cmp	r6, r1
   23944:	bcc	23958 <__assert_fail@plt+0x11fb8>
   23948:	ldr	r1, [r7, #8]
   2394c:	ldr	r1, [r1, r3, lsl #2]
   23950:	cmp	r6, r1
   23954:	bls	23854 <__assert_fail@plt+0x11eb4>
   23958:	add	r3, r3, #1
   2395c:	cmp	r3, ip
   23960:	bne	2393c <__assert_fail@plt+0x11f9c>
   23964:	ldrb	r3, [r7, #16]
   23968:	tst	r3, #1
   2396c:	bne	2376c <__assert_fail@plt+0x11dcc>
   23970:	b	23768 <__assert_fail@plt+0x11dc8>
   23974:	cmp	r2, #247	; 0xf7
   23978:	bhi	239a4 <__assert_fail@plt+0x12004>
   2397c:	cmp	lr, #143	; 0x8f
   23980:	cmpls	r2, #240	; 0xf0
   23984:	movne	r4, #4
   23988:	bne	238ac <__assert_fail@plt+0x11f0c>
   2398c:	b	23768 <__assert_fail@plt+0x11dc8>
   23990:	eor	lr, lr, #128	; 0x80
   23994:	cmp	lr, #63	; 0x3f
   23998:	movls	r4, #2
   2399c:	bls	2376c <__assert_fail@plt+0x11dcc>
   239a0:	b	23768 <__assert_fail@plt+0x11dc8>
   239a4:	cmp	r2, #251	; 0xfb
   239a8:	bhi	239c0 <__assert_fail@plt+0x12020>
   239ac:	cmp	lr, #135	; 0x87
   239b0:	cmpls	r2, #248	; 0xf8
   239b4:	movne	r4, #5
   239b8:	bne	238ac <__assert_fail@plt+0x11f0c>
   239bc:	b	23768 <__assert_fail@plt+0x11dc8>
   239c0:	cmp	r2, #253	; 0xfd
   239c4:	bhi	23768 <__assert_fail@plt+0x11dc8>
   239c8:	cmp	lr, #131	; 0x83
   239cc:	cmpls	r2, #252	; 0xfc
   239d0:	beq	23768 <__assert_fail@plt+0x11dc8>
   239d4:	mov	r4, #6
   239d8:	b	238ac <__assert_fail@plt+0x11f0c>
   239dc:	mov	r4, #5
   239e0:	b	2376c <__assert_fail@plt+0x11dcc>
   239e4:	strd	r4, [sp, #-16]!
   239e8:	mov	r5, #255	; 0xff
   239ec:	movt	r5, #4
   239f0:	mov	r4, r0
   239f4:	str	r6, [sp, #8]
   239f8:	str	lr, [sp, #12]
   239fc:	b	23a04 <__assert_fail@plt+0x12064>
   23a00:	mov	r4, r3
   23a04:	ldr	r3, [r4, #4]
   23a08:	cmp	r3, #0
   23a0c:	bne	23a00 <__assert_fail@plt+0x12060>
   23a10:	ldr	r3, [r4, #8]
   23a14:	cmp	r3, #0
   23a18:	bne	23a00 <__assert_fail@plt+0x12060>
   23a1c:	ldr	r3, [r4, #24]
   23a20:	and	r3, r3, r5
   23a24:	cmp	r3, #6
   23a28:	beq	23a70 <__assert_fail@plt+0x120d0>
   23a2c:	cmp	r3, #3
   23a30:	beq	23ab8 <__assert_fail@plt+0x12118>
   23a34:	ldr	r0, [r4]
   23a38:	cmp	r0, #0
   23a3c:	beq	23aa8 <__assert_fail@plt+0x12108>
   23a40:	ldr	r3, [r0, #8]
   23a44:	cmp	r3, #0
   23a48:	cmpne	r4, r3
   23a4c:	mov	r4, r0
   23a50:	moveq	r2, #1
   23a54:	movne	r2, #0
   23a58:	cmp	r2, #0
   23a5c:	beq	23a00 <__assert_fail@plt+0x12060>
   23a60:	ldr	r3, [r4, #24]
   23a64:	and	r3, r3, r5
   23a68:	cmp	r3, #6
   23a6c:	bne	23a2c <__assert_fail@plt+0x1208c>
   23a70:	ldr	r6, [r4, #20]
   23a74:	ldr	r0, [r6]
   23a78:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23a7c:	ldr	r0, [r6, #4]
   23a80:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23a84:	ldr	r0, [r6, #8]
   23a88:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23a8c:	ldr	r0, [r6, #12]
   23a90:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23a94:	mov	r0, r6
   23a98:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23a9c:	ldr	r0, [r4]
   23aa0:	cmp	r0, #0
   23aa4:	bne	23a40 <__assert_fail@plt+0x120a0>
   23aa8:	ldrd	r4, [sp]
   23aac:	ldr	r6, [sp, #8]
   23ab0:	add	sp, sp, #12
   23ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   23ab8:	ldr	r0, [r4, #20]
   23abc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23ac0:	b	23a34 <__assert_fail@plt+0x12094>
   23ac4:	ldr	r2, [r0]
   23ac8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23acc:	strd	r6, [sp, #8]
   23ad0:	mov	r7, r0
   23ad4:	str	r8, [sp, #16]
   23ad8:	str	lr, [sp, #20]
   23adc:	cmp	r2, #0
   23ae0:	beq	23b68 <__assert_fail@plt+0x121c8>
   23ae4:	ldr	r0, [r0, #8]
   23ae8:	cmp	r0, #0
   23aec:	beq	23b68 <__assert_fail@plt+0x121c8>
   23af0:	mov	r5, #255	; 0xff
   23af4:	movt	r5, #4
   23af8:	mov	r4, #0
   23afc:	b	23b18 <__assert_fail@plt+0x12178>
   23b00:	cmp	r3, #3
   23b04:	beq	23d40 <__assert_fail@plt+0x123a0>
   23b08:	add	r4, r4, #1
   23b0c:	cmp	r4, r0
   23b10:	bcs	23b68 <__assert_fail@plt+0x121c8>
   23b14:	ldr	r2, [r7]
   23b18:	add	r1, r2, r4, lsl #3
   23b1c:	ldr	r3, [r1, #4]
   23b20:	and	r3, r3, r5
   23b24:	cmp	r3, #6
   23b28:	bne	23b00 <__assert_fail@plt+0x12160>
   23b2c:	ldr	r6, [r2, r4, lsl #3]
   23b30:	add	r4, r4, #1
   23b34:	ldr	r0, [r6]
   23b38:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23b3c:	ldr	r0, [r6, #4]
   23b40:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23b44:	ldr	r0, [r6, #8]
   23b48:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23b4c:	ldr	r0, [r6, #12]
   23b50:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23b54:	mov	r0, r6
   23b58:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23b5c:	ldr	r0, [r7, #8]
   23b60:	cmp	r4, r0
   23b64:	bcc	23b14 <__assert_fail@plt+0x12174>
   23b68:	ldr	r0, [r7, #12]
   23b6c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23b70:	ldr	r3, [r7, #8]
   23b74:	cmp	r3, #0
   23b78:	movne	r4, #0
   23b7c:	movne	r5, r4
   23b80:	beq	23be0 <__assert_fail@plt+0x12240>
   23b84:	ldr	r3, [r7, #24]
   23b88:	cmp	r3, #0
   23b8c:	add	r2, r3, r4
   23b90:	beq	23b9c <__assert_fail@plt+0x121fc>
   23b94:	ldr	r0, [r2, #8]
   23b98:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23b9c:	ldr	r3, [r7, #28]
   23ba0:	cmp	r3, #0
   23ba4:	add	r2, r3, r4
   23ba8:	beq	23bb4 <__assert_fail@plt+0x12214>
   23bac:	ldr	r0, [r2, #8]
   23bb0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23bb4:	ldr	r0, [r7, #20]
   23bb8:	cmp	r0, #0
   23bbc:	add	r3, r0, r4
   23bc0:	beq	23ce4 <__assert_fail@plt+0x12344>
   23bc4:	ldr	r0, [r3, #8]
   23bc8:	add	r5, r5, #1
   23bcc:	add	r4, r4, #12
   23bd0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23bd4:	ldr	r3, [r7, #8]
   23bd8:	cmp	r5, r3
   23bdc:	bcc	23b84 <__assert_fail@plt+0x121e4>
   23be0:	ldr	r0, [r7, #20]
   23be4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23be8:	ldr	r0, [r7, #24]
   23bec:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23bf0:	ldr	r0, [r7, #28]
   23bf4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23bf8:	ldr	r0, [r7]
   23bfc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c00:	ldr	r0, [r7, #32]
   23c04:	cmp	r0, #0
   23c08:	movne	r8, #0
   23c0c:	beq	23d00 <__assert_fail@plt+0x12360>
   23c10:	add	r6, r8, r8, lsl #1
   23c14:	ldr	r3, [r0, r6, lsl #2]
   23c18:	add	r6, r0, r6, lsl #2
   23c1c:	cmp	r3, #0
   23c20:	movgt	r5, #0
   23c24:	ble	23c90 <__assert_fail@plt+0x122f0>
   23c28:	ldr	r3, [r6, #8]
   23c2c:	ldr	r4, [r3, r5, lsl #2]
   23c30:	ldr	r0, [r4, #24]
   23c34:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c38:	ldr	r0, [r4, #36]	; 0x24
   23c3c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c40:	ldr	r3, [r4, #40]	; 0x28
   23c44:	add	r2, r4, #4
   23c48:	cmp	r3, r2
   23c4c:	beq	23cb0 <__assert_fail@plt+0x12310>
   23c50:	ldr	r0, [r3, #8]
   23c54:	add	r5, r5, #1
   23c58:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c5c:	ldr	r0, [r4, #40]	; 0x28
   23c60:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c64:	ldr	r0, [r4, #12]
   23c68:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c6c:	ldr	r0, [r4, #48]	; 0x30
   23c70:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c74:	ldr	r0, [r4, #44]	; 0x2c
   23c78:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c7c:	mov	r0, r4
   23c80:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c84:	ldr	r3, [r6]
   23c88:	cmp	r3, r5
   23c8c:	bgt	23c28 <__assert_fail@plt+0x12288>
   23c90:	ldr	r0, [r6, #8]
   23c94:	add	r8, r8, #1
   23c98:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23c9c:	ldr	r3, [r7, #68]	; 0x44
   23ca0:	cmp	r3, r8
   23ca4:	bcc	23cfc <__assert_fail@plt+0x1235c>
   23ca8:	ldr	r0, [r7, #32]
   23cac:	b	23c10 <__assert_fail@plt+0x12270>
   23cb0:	ldr	r0, [r4, #12]
   23cb4:	add	r5, r5, #1
   23cb8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23cbc:	ldr	r0, [r4, #48]	; 0x30
   23cc0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23cc4:	ldr	r0, [r4, #44]	; 0x2c
   23cc8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23ccc:	mov	r0, r4
   23cd0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23cd4:	ldr	r3, [r6]
   23cd8:	cmp	r5, r3
   23cdc:	blt	23c28 <__assert_fail@plt+0x12288>
   23ce0:	b	23c90 <__assert_fail@plt+0x122f0>
   23ce4:	ldr	r3, [r7, #8]
   23ce8:	add	r5, r5, #1
   23cec:	add	r4, r4, #12
   23cf0:	cmp	r3, r5
   23cf4:	bhi	23b84 <__assert_fail@plt+0x121e4>
   23cf8:	b	23be4 <__assert_fail@plt+0x12244>
   23cfc:	ldr	r0, [r7, #32]
   23d00:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23d04:	ldr	r0, [r7, #60]	; 0x3c
   23d08:	movw	r3, #20932	; 0x51c4
   23d0c:	movt	r3, #3
   23d10:	cmp	r0, r3
   23d14:	beq	23d1c <__assert_fail@plt+0x1237c>
   23d18:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23d1c:	ldr	r0, [r7, #132]	; 0x84
   23d20:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23d24:	mov	r0, r7
   23d28:	ldrd	r4, [sp]
   23d2c:	ldrd	r6, [sp, #8]
   23d30:	ldr	r8, [sp, #16]
   23d34:	ldr	lr, [sp, #20]
   23d38:	add	sp, sp, #24
   23d3c:	b	1ef94 <__assert_fail@plt+0xd5f4>
   23d40:	ldr	r0, [r1]
   23d44:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23d48:	ldr	r0, [r7, #8]
   23d4c:	b	23b08 <__assert_fail@plt+0x12168>
   23d50:	ldr	r2, [r1, #24]
   23d54:	mov	r3, #255	; 0xff
   23d58:	movt	r3, #4
   23d5c:	str	r4, [sp, #-8]!
   23d60:	str	lr, [sp, #4]
   23d64:	and	r3, r3, r2
   23d68:	cmp	r3, #6
   23d6c:	beq	23d88 <__assert_fail@plt+0x123e8>
   23d70:	cmp	r3, #3
   23d74:	beq	23dc4 <__assert_fail@plt+0x12424>
   23d78:	ldr	r4, [sp]
   23d7c:	add	sp, sp, #4
   23d80:	mov	r0, #0
   23d84:	pop	{pc}		; (ldr pc, [sp], #4)
   23d88:	ldr	r4, [r1, #20]
   23d8c:	ldr	r0, [r4]
   23d90:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23d94:	ldr	r0, [r4, #4]
   23d98:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23d9c:	ldr	r0, [r4, #8]
   23da0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23da4:	ldr	r0, [r4, #12]
   23da8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23dac:	mov	r0, r4
   23db0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23db4:	ldr	r4, [sp]
   23db8:	add	sp, sp, #4
   23dbc:	mov	r0, #0
   23dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   23dc4:	ldr	r0, [r1, #20]
   23dc8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   23dcc:	ldr	r4, [sp]
   23dd0:	add	sp, sp, #4
   23dd4:	mov	r0, #0
   23dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   23ddc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23de0:	mov	r4, r2
   23de4:	strd	r6, [sp, #8]
   23de8:	lsl	r7, r1, #3
   23dec:	mov	r6, r0
   23df0:	strd	r8, [sp, #16]
   23df4:	mov	r8, r1
   23df8:	strd	sl, [sp, #24]
   23dfc:	mov	sl, #0
   23e00:	str	lr, [sp, #32]
   23e04:	sub	sp, sp, #20
   23e08:	ldr	r9, [sp, #56]	; 0x38
   23e0c:	str	r3, [sp, #8]
   23e10:	ldr	r2, [r6]
   23e14:	mov	r5, r4
   23e18:	ldr	r1, [r6, #20]
   23e1c:	add	r3, r2, r7
   23e20:	ldrb	r0, [r3, #4]
   23e24:	cmp	r0, #4
   23e28:	beq	24050 <__assert_fail@plt+0x126b0>
   23e2c:	add	fp, r8, r8, lsl #1
   23e30:	lsl	fp, fp, #2
   23e34:	add	ip, r1, fp
   23e38:	ldr	r0, [ip, #4]
   23e3c:	cmp	r0, #0
   23e40:	beq	241a0 <__assert_fail@plt+0x12800>
   23e44:	ldr	ip, [ip, #8]
   23e48:	add	r5, r4, r4, lsl #1
   23e4c:	cmp	r0, #1
   23e50:	lsl	r5, r5, #2
   23e54:	add	r0, r1, r5
   23e58:	ldr	r7, [ip]
   23e5c:	beq	23f98 <__assert_fail@plt+0x125f8>
   23e60:	ldr	ip, [r6, #8]
   23e64:	sub	r1, ip, #1
   23e68:	add	r3, r2, r1, lsl #3
   23e6c:	cmp	r1, #0
   23e70:	movle	lr, #0
   23e74:	movgt	lr, #1
   23e78:	ldrb	r4, [r3, #6]
   23e7c:	str	sl, [r0, #4]
   23e80:	ands	lr, lr, r4, lsr #2
   23e84:	beq	24100 <__assert_fail@plt+0x12760>
   23e88:	ldr	lr, [r6, #16]
   23e8c:	add	r4, r2, ip, lsl #3
   23e90:	sub	r4, r4, r3
   23e94:	sub	r4, r4, #16
   23e98:	add	lr, lr, ip, lsl #2
   23e9c:	b	23ec0 <__assert_fail@plt+0x12520>
   23ea0:	add	r3, r3, r4
   23ea4:	sub	r1, r1, #1
   23ea8:	ldrb	r8, [r3, #6]
   23eac:	cmp	r1, #0
   23eb0:	movle	ip, #0
   23eb4:	movgt	ip, #1
   23eb8:	ands	ip, ip, r8, lsr #2
   23ebc:	beq	24100 <__assert_fail@plt+0x12760>
   23ec0:	ldr	ip, [lr, #-4]!
   23ec4:	cmp	ip, r7
   23ec8:	bne	23ea0 <__assert_fail@plt+0x12500>
   23ecc:	ldr	ip, [r3, #4]
   23ed0:	ubfx	ip, ip, #8, #10
   23ed4:	cmp	r9, ip
   23ed8:	bne	23ea0 <__assert_fail@plt+0x12500>
   23edc:	bl	20448 <__assert_fail@plt+0xeaa8>
   23ee0:	cmp	r0, #0
   23ee4:	beq	23f78 <__assert_fail@plt+0x125d8>
   23ee8:	ldr	r3, [r6]
   23eec:	mov	r0, r6
   23ef0:	ldr	r2, [r6, #20]
   23ef4:	add	fp, r2, fp
   23ef8:	ldr	r2, [fp, #8]
   23efc:	ldr	r8, [r2, #4]
   23f00:	lsl	r7, r8, #3
   23f04:	add	r3, r3, r7
   23f08:	ldm	r3, {r1, r2}
   23f0c:	bl	20194 <__assert_fail@plt+0xe7f4>
   23f10:	cmn	r0, #1
   23f14:	mov	r4, r0
   23f18:	beq	23f78 <__assert_fail@plt+0x125d8>
   23f1c:	ldr	r3, [r6]
   23f20:	mov	r1, r0
   23f24:	ubfx	r2, r9, #0, #10
   23f28:	add	r0, r3, r0, lsl #3
   23f2c:	add	ip, r3, r7
   23f30:	ldr	r3, [r0, #4]
   23f34:	bfi	r3, r2, #8, #10
   23f38:	str	r3, [r0, #4]
   23f3c:	ldr	ip, [ip, #4]
   23f40:	ubfx	ip, ip, #8, #10
   23f44:	orr	r2, r2, ip
   23f48:	bfi	r3, r2, #8, #10
   23f4c:	ubfx	r2, r3, #16, #8
   23f50:	str	r3, [r0, #4]
   23f54:	orr	r3, r2, #4
   23f58:	strb	r3, [r0, #6]
   23f5c:	ldr	r3, [r6, #16]
   23f60:	ldr	r0, [r6, #20]
   23f64:	str	r8, [r3, r4, lsl #2]
   23f68:	add	r0, r0, r5
   23f6c:	bl	20448 <__assert_fail@plt+0xeaa8>
   23f70:	cmp	r0, #0
   23f74:	bne	23e10 <__assert_fail@plt+0x12470>
   23f78:	mov	r0, #12
   23f7c:	add	sp, sp, #20
   23f80:	ldrd	r4, [sp]
   23f84:	ldrd	r6, [sp, #8]
   23f88:	ldrd	r8, [sp, #16]
   23f8c:	ldrd	sl, [sp, #24]
   23f90:	add	sp, sp, #32
   23f94:	pop	{pc}		; (ldr pc, [sp], #4)
   23f98:	ldr	r1, [sp, #8]
   23f9c:	cmp	r8, r4
   23fa0:	str	sl, [r0, #4]
   23fa4:	sub	r1, r8, r1
   23fa8:	clz	r1, r1
   23fac:	lsr	r1, r1, #5
   23fb0:	moveq	r1, #0
   23fb4:	cmp	r1, #0
   23fb8:	bne	241b0 <__assert_fail@plt+0x12810>
   23fbc:	ldr	r3, [r3, #4]
   23fc0:	lsl	fp, r7, #3
   23fc4:	mov	r0, r6
   23fc8:	add	r2, r2, fp
   23fcc:	ldm	r2, {r1, r2}
   23fd0:	ubfx	r3, r3, #8, #10
   23fd4:	orr	r9, r9, r3
   23fd8:	bl	20194 <__assert_fail@plt+0xe7f4>
   23fdc:	cmn	r0, #1
   23fe0:	mov	r4, r0
   23fe4:	beq	23f78 <__assert_fail@plt+0x125d8>
   23fe8:	ldr	r3, [r6]
   23fec:	mov	r1, r0
   23ff0:	ubfx	r2, r9, #0, #10
   23ff4:	add	r0, r3, r0, lsl #3
   23ff8:	add	ip, r3, fp
   23ffc:	ldr	r3, [r0, #4]
   24000:	bfi	r3, r2, #8, #10
   24004:	str	r3, [r0, #4]
   24008:	ldr	ip, [ip, #4]
   2400c:	ubfx	ip, ip, #8, #10
   24010:	orr	r2, r2, ip
   24014:	bfi	r3, r2, #8, #10
   24018:	ubfx	r2, r3, #16, #8
   2401c:	str	r3, [r0, #4]
   24020:	orr	r3, r2, #4
   24024:	strb	r3, [r0, #6]
   24028:	ldr	r3, [r6, #16]
   2402c:	ldr	r0, [r6, #20]
   24030:	str	r7, [r3, r4, lsl #2]
   24034:	add	r0, r0, r5
   24038:	bl	20448 <__assert_fail@plt+0xeaa8>
   2403c:	cmp	r0, #0
   24040:	beq	23f78 <__assert_fail@plt+0x125d8>
   24044:	mov	r8, r7
   24048:	mov	r7, fp
   2404c:	b	23e10 <__assert_fail@plt+0x12470>
   24050:	ldr	ip, [r6, #12]
   24054:	lsl	r3, r8, #2
   24058:	mov	r0, r6
   2405c:	add	r4, r4, r4, lsl #1
   24060:	lsl	fp, r4, #2
   24064:	str	r3, [sp, #12]
   24068:	ldr	r8, [ip, r8, lsl #2]
   2406c:	add	r1, r1, fp
   24070:	str	sl, [r1, #4]
   24074:	lsl	r7, r8, #3
   24078:	add	r2, r2, r7
   2407c:	ldm	r2, {r1, r2}
   24080:	bl	20194 <__assert_fail@plt+0xe7f4>
   24084:	cmn	r0, #1
   24088:	mov	r4, r0
   2408c:	ldr	r3, [sp, #12]
   24090:	beq	23f78 <__assert_fail@plt+0x125d8>
   24094:	ldr	lr, [r6]
   24098:	ubfx	r0, r9, #0, #10
   2409c:	mov	r1, r4
   240a0:	add	ip, lr, r4, lsl #3
   240a4:	add	lr, lr, r7
   240a8:	ldr	r2, [ip, #4]
   240ac:	bfi	r2, r0, #8, #10
   240b0:	str	r2, [ip, #4]
   240b4:	ldr	lr, [lr, #4]
   240b8:	ubfx	lr, lr, #8, #10
   240bc:	orr	r0, r0, lr
   240c0:	bfi	r2, r0, #8, #10
   240c4:	ubfx	r0, r2, #16, #8
   240c8:	str	r2, [ip, #4]
   240cc:	orr	r2, r0, #4
   240d0:	strb	r2, [ip, #6]
   240d4:	ldr	r2, [r6, #12]
   240d8:	ldr	ip, [r6, #16]
   240dc:	ldr	r0, [r6, #20]
   240e0:	str	r8, [ip, r4, lsl #2]
   240e4:	ldr	r3, [r2, r3]
   240e8:	add	r0, r0, fp
   240ec:	str	r3, [r2, r5, lsl #2]
   240f0:	bl	20448 <__assert_fail@plt+0xeaa8>
   240f4:	cmp	r0, #0
   240f8:	bne	23e10 <__assert_fail@plt+0x12470>
   240fc:	b	23f78 <__assert_fail@plt+0x125d8>
   24100:	lsl	r4, r7, #3
   24104:	mov	r0, r6
   24108:	add	r2, r2, r4
   2410c:	ldm	r2, {r1, r2}
   24110:	bl	20194 <__assert_fail@plt+0xe7f4>
   24114:	cmn	r0, #1
   24118:	mov	r8, r0
   2411c:	beq	23f78 <__assert_fail@plt+0x125d8>
   24120:	ldr	r3, [r6]
   24124:	ubfx	r0, r9, #0, #10
   24128:	mov	r1, r8
   2412c:	add	r2, r3, r8, lsl #3
   24130:	add	r4, r3, r4
   24134:	ldr	r3, [r2, #4]
   24138:	bfi	r3, r0, #8, #10
   2413c:	str	r3, [r2, #4]
   24140:	ldr	ip, [r4, #4]
   24144:	ubfx	ip, ip, #8, #10
   24148:	orr	r0, r0, ip
   2414c:	bfi	r3, r0, #8, #10
   24150:	ubfx	r0, r3, #16, #8
   24154:	str	r3, [r2, #4]
   24158:	orr	r3, r0, #4
   2415c:	strb	r3, [r2, #6]
   24160:	ldr	r3, [r6, #16]
   24164:	ldr	r0, [r6, #20]
   24168:	str	r7, [r3, r8, lsl #2]
   2416c:	add	r0, r0, r5
   24170:	bl	20448 <__assert_fail@plt+0xeaa8>
   24174:	cmp	r0, #0
   24178:	beq	23f78 <__assert_fail@plt+0x125d8>
   2417c:	mov	r2, r8
   24180:	mov	r1, r7
   24184:	str	r9, [sp]
   24188:	mov	r0, r6
   2418c:	ldr	r3, [sp, #8]
   24190:	bl	23ddc <__assert_fail@plt+0x1243c>
   24194:	cmp	r0, #0
   24198:	beq	23ee8 <__assert_fail@plt+0x12548>
   2419c:	b	23f7c <__assert_fail@plt+0x125dc>
   241a0:	ldr	r3, [r6, #12]
   241a4:	ldr	r2, [r3, r8, lsl #2]
   241a8:	str	r2, [r3, r4, lsl #2]
   241ac:	b	23f7c <__assert_fail@plt+0x125dc>
   241b0:	mov	r1, r7
   241b4:	bl	20448 <__assert_fail@plt+0xeaa8>
   241b8:	cmp	r0, #0
   241bc:	movne	r0, #0
   241c0:	bne	23f7c <__assert_fail@plt+0x125dc>
   241c4:	b	23f78 <__assert_fail@plt+0x125d8>
   241c8:	ldr	r3, [r0, #36]	; 0x24
   241cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   241d0:	strd	r6, [sp, #8]
   241d4:	str	r8, [sp, #16]
   241d8:	str	lr, [sp, #20]
   241dc:	cmn	r3, #-536870910	; 0xe0000002
   241e0:	bhi	243a8 <__assert_fail@plt+0x12a08>
   241e4:	ldr	r2, [r0, #48]	; 0x30
   241e8:	lsl	r3, r3, #1
   241ec:	mov	r4, r0
   241f0:	cmp	r3, r2
   241f4:	movge	r3, r2
   241f8:	cmp	r3, r1
   241fc:	movge	r1, r3
   24200:	bl	1f734 <__assert_fail@plt+0xdd94>
   24204:	subs	r6, r0, #0
   24208:	bne	24274 <__assert_fail@plt+0x128d4>
   2420c:	ldr	r0, [r4, #100]	; 0x64
   24210:	cmp	r0, #0
   24214:	beq	24234 <__assert_fail@plt+0x12894>
   24218:	ldr	r1, [r4, #36]	; 0x24
   2421c:	add	r1, r1, #1
   24220:	lsl	r1, r1, #2
   24224:	bl	1f170 <__assert_fail@plt+0xd7d0>
   24228:	cmp	r0, #0
   2422c:	beq	243a8 <__assert_fail@plt+0x12a08>
   24230:	str	r0, [r4, #100]	; 0x64
   24234:	ldrb	r3, [r4, #72]	; 0x48
   24238:	ldr	r2, [r4, #80]	; 0x50
   2423c:	cmp	r3, #0
   24240:	beq	2428c <__assert_fail@plt+0x128ec>
   24244:	cmp	r2, #1
   24248:	ble	24324 <__assert_fail@plt+0x12984>
   2424c:	mov	r0, r4
   24250:	ldrd	r4, [sp]
   24254:	ldrd	r6, [sp, #8]
   24258:	ldr	r8, [sp, #16]
   2425c:	ldr	lr, [sp, #20]
   24260:	add	sp, sp, #24
   24264:	b	1fb18 <__assert_fail@plt+0xe178>
   24268:	mov	r1, r2
   2426c:	str	r1, [r4, #28]
   24270:	str	r1, [r4, #32]
   24274:	mov	r0, r6
   24278:	ldrd	r4, [sp]
   2427c:	ldrd	r6, [sp, #8]
   24280:	ldr	r8, [sp, #16]
   24284:	add	sp, sp, #20
   24288:	pop	{pc}		; (ldr pc, [sp], #4)
   2428c:	cmp	r2, #1
   24290:	bgt	24318 <__assert_fail@plt+0x12978>
   24294:	ldr	r0, [r4, #64]	; 0x40
   24298:	cmp	r0, #0
   2429c:	beq	24274 <__assert_fail@plt+0x128d4>
   242a0:	ldr	r2, [r4, #28]
   242a4:	ldr	r1, [r4, #36]	; 0x24
   242a8:	ldr	r3, [r4, #48]	; 0x30
   242ac:	cmp	r1, r3
   242b0:	movge	r1, r3
   242b4:	cmp	r1, r2
   242b8:	ble	24268 <__assert_fail@plt+0x128c8>
   242bc:	ldm	r4, {ip, lr}
   242c0:	add	r3, r2, #1
   242c4:	cmp	r1, r3
   242c8:	ldr	r5, [r4, #24]
   242cc:	add	ip, ip, r2
   242d0:	ldrb	ip, [ip, r5]
   242d4:	ldrb	r0, [r0, ip]
   242d8:	strb	r0, [lr, r2]
   242dc:	ble	2426c <__assert_fail@plt+0x128cc>
   242e0:	ldr	r2, [r4]
   242e4:	ldr	r0, [r4, #24]
   242e8:	ldr	ip, [r4, #64]	; 0x40
   242ec:	add	r2, r2, r3
   242f0:	ldrb	r0, [r2, r0]
   242f4:	ldr	r2, [r4, #4]
   242f8:	ldrb	r0, [ip, r0]
   242fc:	strb	r0, [r2, r3]
   24300:	add	r3, r3, #1
   24304:	cmp	r1, r3
   24308:	bne	242e0 <__assert_fail@plt+0x12940>
   2430c:	str	r1, [r4, #28]
   24310:	str	r1, [r4, #32]
   24314:	b	24274 <__assert_fail@plt+0x128d4>
   24318:	mov	r0, r4
   2431c:	bl	1f93c <__assert_fail@plt+0xdf9c>
   24320:	b	24274 <__assert_fail@plt+0x128d4>
   24324:	ldr	r5, [r4, #28]
   24328:	ldr	r7, [r4, #36]	; 0x24
   2432c:	ldr	r3, [r4, #48]	; 0x30
   24330:	cmp	r7, r3
   24334:	movge	r7, r3
   24338:	cmp	r7, r5
   2433c:	ble	243b0 <__assert_fail@plt+0x12a10>
   24340:	bl	11754 <__ctype_toupper_loc@plt>
   24344:	b	24360 <__assert_fail@plt+0x129c0>
   24348:	ldr	r3, [r1, r3, lsl #2]
   2434c:	ldr	r2, [r4, #4]
   24350:	strb	r3, [r2, r5]
   24354:	add	r5, r5, #1
   24358:	cmp	r7, r5
   2435c:	beq	2439c <__assert_fail@plt+0x129fc>
   24360:	ldr	r3, [r4]
   24364:	ldr	r1, [r4, #24]
   24368:	ldr	r2, [r4, #64]	; 0x40
   2436c:	add	r3, r3, r5
   24370:	ldrb	r3, [r3, r1]
   24374:	cmp	r2, #0
   24378:	ldr	r1, [r0]
   2437c:	beq	24348 <__assert_fail@plt+0x129a8>
   24380:	ldrb	r2, [r2, r3]
   24384:	ldr	r3, [r4, #4]
   24388:	ldr	r2, [r1, r2, lsl #2]
   2438c:	strb	r2, [r3, r5]
   24390:	add	r5, r5, #1
   24394:	cmp	r7, r5
   24398:	bne	24360 <__assert_fail@plt+0x129c0>
   2439c:	str	r7, [r4, #28]
   243a0:	str	r7, [r4, #32]
   243a4:	b	24274 <__assert_fail@plt+0x128d4>
   243a8:	mov	r6, #12
   243ac:	b	24274 <__assert_fail@plt+0x128d4>
   243b0:	mov	r7, r5
   243b4:	b	2439c <__assert_fail@plt+0x129fc>
   243b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   243bc:	mov	r5, r1
   243c0:	mov	r4, r2
   243c4:	strd	r6, [sp, #8]
   243c8:	mov	r6, r0
   243cc:	strd	r8, [sp, #16]
   243d0:	mov	r8, r3
   243d4:	mov	r9, #1
   243d8:	str	sl, [sp, #24]
   243dc:	str	lr, [sp, #28]
   243e0:	sub	sp, sp, #8
   243e4:	ldr	r7, [sp, #40]	; 0x28
   243e8:	ldr	r1, [r5, #4]
   243ec:	cmp	r1, #0
   243f0:	ble	24468 <__assert_fail@plt+0x12ac8>
   243f4:	subs	r2, r1, #1
   243f8:	ldr	ip, [r5, #8]
   243fc:	moveq	r0, r2
   24400:	beq	2445c <__assert_fail@plt+0x12abc>
   24404:	mov	r0, #0
   24408:	add	r3, r0, r2
   2440c:	lsr	r3, r3, #1
   24410:	ldr	lr, [ip, r3, lsl #2]
   24414:	cmp	lr, r4
   24418:	blt	244ec <__assert_fail@plt+0x12b4c>
   2441c:	cmp	r0, r3
   24420:	bcs	2445c <__assert_fail@plt+0x12abc>
   24424:	add	r2, r0, r3
   24428:	lsr	r2, r2, #1
   2442c:	ldr	lr, [ip, r2, lsl #2]
   24430:	cmp	r4, lr
   24434:	ble	2444c <__assert_fail@plt+0x12aac>
   24438:	b	244e0 <__assert_fail@plt+0x12b40>
   2443c:	ldr	lr, [ip, r3, lsl #2]
   24440:	cmp	r4, lr
   24444:	bgt	244ec <__assert_fail@plt+0x12b4c>
   24448:	mov	r2, r3
   2444c:	add	r3, r2, r0
   24450:	cmp	r2, r0
   24454:	lsr	r3, r3, #1
   24458:	bhi	2443c <__assert_fail@plt+0x12a9c>
   2445c:	ldr	r3, [ip, r0, lsl #2]
   24460:	cmp	r4, r3
   24464:	beq	24504 <__assert_fail@plt+0x12b64>
   24468:	ldr	r3, [r6]
   2446c:	add	r2, r3, r4, lsl #3
   24470:	ldrb	r2, [r2, #4]
   24474:	cmp	r2, r7
   24478:	bne	24488 <__assert_fail@plt+0x12ae8>
   2447c:	ldr	r3, [r3, r4, lsl #3]
   24480:	cmp	r3, r8
   24484:	beq	245fc <__assert_fail@plt+0x12c5c>
   24488:	ldr	r3, [r5]
   2448c:	cmp	r3, #0
   24490:	beq	24524 <__assert_fail@plt+0x12b84>
   24494:	cmp	r1, #0
   24498:	ldr	sl, [r5, #8]
   2449c:	bne	2457c <__assert_fail@plt+0x12bdc>
   244a0:	str	r4, [sl]
   244a4:	ldr	r3, [r5, #4]
   244a8:	add	r3, r3, #1
   244ac:	str	r3, [r5, #4]
   244b0:	ldr	r3, [r6, #20]
   244b4:	add	r4, r4, r4, lsl #1
   244b8:	lsl	r4, r4, #2
   244bc:	add	r3, r3, r4
   244c0:	ldr	r2, [r3, #4]
   244c4:	cmp	r2, #0
   244c8:	beq	24504 <__assert_fail@plt+0x12b64>
   244cc:	cmp	r2, #2
   244d0:	ldr	r3, [r3, #8]
   244d4:	beq	2454c <__assert_fail@plt+0x12bac>
   244d8:	ldr	r4, [r3]
   244dc:	b	243e8 <__assert_fail@plt+0x12a48>
   244e0:	mov	r0, r2
   244e4:	mov	r2, r3
   244e8:	mov	r3, r0
   244ec:	add	r0, r3, #1
   244f0:	cmp	r0, r2
   244f4:	bcc	24408 <__assert_fail@plt+0x12a68>
   244f8:	ldr	r3, [ip, r0, lsl #2]
   244fc:	cmp	r4, r3
   24500:	bne	24468 <__assert_fail@plt+0x12ac8>
   24504:	mov	r0, #0
   24508:	add	sp, sp, #8
   2450c:	ldrd	r4, [sp]
   24510:	ldrd	r6, [sp, #8]
   24514:	ldrd	r8, [sp, #16]
   24518:	ldr	sl, [sp, #24]
   2451c:	add	sp, sp, #28
   24520:	pop	{pc}		; (ldr pc, [sp], #4)
   24524:	mov	r0, #4
   24528:	str	r9, [r5]
   2452c:	str	r9, [r5, #4]
   24530:	bl	1f0c4 <__assert_fail@plt+0xd724>
   24534:	cmp	r0, #0
   24538:	mov	r3, r0
   2453c:	str	r0, [r5, #8]
   24540:	beq	24620 <__assert_fail@plt+0x12c80>
   24544:	str	r4, [r0]
   24548:	b	244b0 <__assert_fail@plt+0x12b10>
   2454c:	mov	r1, r5
   24550:	mov	r0, r6
   24554:	ldr	r2, [r3, #4]
   24558:	mov	r3, r8
   2455c:	str	r7, [sp]
   24560:	bl	243b8 <__assert_fail@plt+0x12a18>
   24564:	cmp	r0, #0
   24568:	bne	24508 <__assert_fail@plt+0x12b68>
   2456c:	ldr	r3, [r6, #20]
   24570:	add	r4, r3, r4
   24574:	ldr	r3, [r4, #8]
   24578:	b	244d8 <__assert_fail@plt+0x12b38>
   2457c:	cmp	r1, r3
   24580:	beq	24630 <__assert_fail@plt+0x12c90>
   24584:	ldr	r3, [sl]
   24588:	mov	r2, r1
   2458c:	cmp	r4, r3
   24590:	bge	245c4 <__assert_fail@plt+0x12c24>
   24594:	cmp	r1, #0
   24598:	ble	245b0 <__assert_fail@plt+0x12c10>
   2459c:	lsl	r2, r1, #2
   245a0:	add	r0, sl, #4
   245a4:	mov	r1, sl
   245a8:	bl	1158c <memmove@plt>
   245ac:	mov	r2, #0
   245b0:	str	r4, [sl, r2, lsl #2]
   245b4:	ldr	r3, [r5, #4]
   245b8:	add	r3, r3, #1
   245bc:	str	r3, [r5, #4]
   245c0:	b	244b0 <__assert_fail@plt+0x12b10>
   245c4:	sub	r3, r1, #-1073741823	; 0xc0000001
   245c8:	ldr	r0, [sl, r3, lsl #2]
   245cc:	lsl	r3, r3, #2
   245d0:	cmp	r4, r0
   245d4:	bge	245b0 <__assert_fail@plt+0x12c10>
   245d8:	add	r3, r3, #4
   245dc:	add	r3, sl, r3
   245e0:	str	r0, [r3], #-4
   245e4:	sub	r1, r1, #1
   245e8:	ldr	r0, [r3, #-4]
   245ec:	mov	r2, r1
   245f0:	cmp	r4, r0
   245f4:	blt	245e0 <__assert_fail@plt+0x12c40>
   245f8:	b	245b0 <__assert_fail@plt+0x12c10>
   245fc:	cmp	r7, #9
   24600:	bne	24504 <__assert_fail@plt+0x12b64>
   24604:	mov	r1, r4
   24608:	mov	r0, r5
   2460c:	bl	20448 <__assert_fail@plt+0xeaa8>
   24610:	cmp	r0, #0
   24614:	bne	24504 <__assert_fail@plt+0x12b64>
   24618:	mov	r0, #12
   2461c:	b	24508 <__assert_fail@plt+0x12b68>
   24620:	mov	r0, #12
   24624:	str	r3, [r5]
   24628:	str	r3, [r5, #4]
   2462c:	b	24508 <__assert_fail@plt+0x12b68>
   24630:	lsl	r3, r1, #1
   24634:	mov	r0, sl
   24638:	lsl	r1, r1, #3
   2463c:	str	r3, [r5]
   24640:	bl	1f170 <__assert_fail@plt+0xd7d0>
   24644:	subs	sl, r0, #0
   24648:	beq	24618 <__assert_fail@plt+0x12c78>
   2464c:	str	sl, [r5, #8]
   24650:	ldr	r1, [r5, #4]
   24654:	b	24584 <__assert_fail@plt+0x12be4>
   24658:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2465c:	mov	r5, r2
   24660:	mov	r4, r3
   24664:	strd	r6, [sp, #8]
   24668:	mov	r6, #0
   2466c:	mov	r7, r0
   24670:	strd	r8, [sp, #16]
   24674:	mov	r8, r1
   24678:	ldr	r1, [r1, #4]
   2467c:	strd	sl, [sp, #24]
   24680:	str	lr, [sp, #32]
   24684:	sub	sp, sp, #28
   24688:	lsl	r0, r1, #2
   2468c:	str	r1, [sp, #12]
   24690:	str	r6, [sp, #16]
   24694:	bl	1f0c4 <__assert_fail@plt+0xd724>
   24698:	cmp	r0, r6
   2469c:	str	r0, [sp, #20]
   246a0:	beq	247a0 <__assert_fail@plt+0x12e00>
   246a4:	ldr	r3, [r8, #4]
   246a8:	add	r9, sp, #12
   246ac:	cmp	r3, r6
   246b0:	ble	24748 <__assert_fail@plt+0x12da8>
   246b4:	ldr	r3, [r8, #8]
   246b8:	ldr	r1, [r7, #24]
   246bc:	ldr	r2, [r3, r6, lsl #2]
   246c0:	add	r3, r2, r2, lsl #1
   246c4:	add	r1, r1, r3, lsl #2
   246c8:	ldr	fp, [r1, #4]
   246cc:	cmp	fp, #0
   246d0:	ble	24768 <__assert_fail@plt+0x12dc8>
   246d4:	ldr	ip, [r1, #8]
   246d8:	mov	r3, #0
   246dc:	ldr	sl, [r7]
   246e0:	sub	ip, ip, #4
   246e4:	b	246f0 <__assert_fail@plt+0x12d50>
   246e8:	cmp	fp, r3
   246ec:	beq	24768 <__assert_fail@plt+0x12dc8>
   246f0:	ldr	r0, [ip, #4]!
   246f4:	add	r3, r3, #1
   246f8:	add	lr, sl, r0, lsl #3
   246fc:	ldrb	lr, [lr, #4]
   24700:	cmp	r4, lr
   24704:	bne	246e8 <__assert_fail@plt+0x12d48>
   24708:	ldr	lr, [sl, r0, lsl #3]
   2470c:	cmp	r5, lr
   24710:	bne	246e8 <__assert_fail@plt+0x12d48>
   24714:	cmn	r0, #1
   24718:	beq	24768 <__assert_fail@plt+0x12dc8>
   2471c:	mov	r3, r5
   24720:	mov	r1, r9
   24724:	str	r4, [sp]
   24728:	mov	r0, r7
   2472c:	bl	243b8 <__assert_fail@plt+0x12a18>
   24730:	subs	sl, r0, #0
   24734:	bne	24778 <__assert_fail@plt+0x12dd8>
   24738:	ldr	r3, [r8, #4]
   2473c:	add	r6, r6, #1
   24740:	cmp	r3, r6
   24744:	bgt	246b4 <__assert_fail@plt+0x12d14>
   24748:	ldr	r0, [r8, #8]
   2474c:	mov	sl, #0
   24750:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   24754:	ldr	r1, [r9, #8]
   24758:	ldrd	r2, [sp, #12]
   2475c:	strd	r2, [r8]
   24760:	str	r1, [r8, #8]
   24764:	b	24780 <__assert_fail@plt+0x12de0>
   24768:	mov	r0, r9
   2476c:	bl	20844 <__assert_fail@plt+0xeea4>
   24770:	subs	sl, r0, #0
   24774:	beq	24738 <__assert_fail@plt+0x12d98>
   24778:	ldr	r0, [sp, #20]
   2477c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   24780:	mov	r0, sl
   24784:	add	sp, sp, #28
   24788:	ldrd	r4, [sp]
   2478c:	ldrd	r6, [sp, #8]
   24790:	ldrd	r8, [sp, #16]
   24794:	ldrd	sl, [sp, #24]
   24798:	add	sp, sp, #32
   2479c:	pop	{pc}		; (ldr pc, [sp], #4)
   247a0:	mov	sl, #12
   247a4:	b	24780 <__assert_fail@plt+0x12de0>
   247a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   247ac:	mov	r4, #0
   247b0:	strd	r6, [sp, #8]
   247b4:	mov	r6, r0
   247b8:	add	r0, r1, r1, lsl #1
   247bc:	strd	r8, [sp, #16]
   247c0:	strd	sl, [sp, #24]
   247c4:	str	lr, [sp, #32]
   247c8:	sub	sp, sp, #44	; 0x2c
   247cc:	str	r1, [sp, #4]
   247d0:	ldr	r1, [r6, #28]
   247d4:	str	r3, [sp, #16]
   247d8:	str	r4, [sp, #28]
   247dc:	str	r4, [sp, #32]
   247e0:	str	r4, [sp, #36]	; 0x24
   247e4:	add	r9, r1, r0, lsl #2
   247e8:	ldr	sl, [r9, #4]
   247ec:	str	r9, [sp, #20]
   247f0:	cmp	sl, r4
   247f4:	ble	24cd4 <__assert_fail@plt+0x13334>
   247f8:	str	r2, [sp, #8]
   247fc:	ldr	r1, [r9, #8]
   24800:	ldr	r3, [sp, #4]
   24804:	ldr	r2, [r1, r4, lsl #2]
   24808:	cmp	r3, r2
   2480c:	beq	24a48 <__assert_fail@plt+0x130a8>
   24810:	ldr	r3, [r6]
   24814:	add	r3, r3, r2, lsl #3
   24818:	ldrb	r3, [r3, #4]
   2481c:	tst	r3, #8
   24820:	beq	24a48 <__assert_fail@plt+0x130a8>
   24824:	ldr	r3, [r6, #20]
   24828:	add	r2, r2, r2, lsl #1
   2482c:	lsl	r2, r2, #2
   24830:	add	r3, r3, r2
   24834:	ldmib	r3, {r0, r3}
   24838:	cmp	r0, #1
   2483c:	mvnle	r7, #0
   24840:	ldrgt	r7, [r3, #4]
   24844:	sub	lr, sl, #1
   24848:	cmp	lr, #0
   2484c:	mov	ip, lr
   24850:	ldr	r5, [r3]
   24854:	moveq	r8, lr
   24858:	beq	248b8 <__assert_fail@plt+0x12f18>
   2485c:	mov	r0, lr
   24860:	mov	r8, #0
   24864:	add	r3, r0, r8
   24868:	lsr	r3, r3, #1
   2486c:	ldr	fp, [r1, r3, lsl #2]
   24870:	cmp	r5, fp
   24874:	bgt	24bdc <__assert_fail@plt+0x1323c>
   24878:	cmp	r3, r8
   2487c:	bls	248b8 <__assert_fail@plt+0x12f18>
   24880:	add	r0, r3, r8
   24884:	lsr	r0, r0, #1
   24888:	ldr	fp, [r1, r0, lsl #2]
   2488c:	cmp	r5, fp
   24890:	ble	248a8 <__assert_fail@plt+0x12f08>
   24894:	b	24bd0 <__assert_fail@plt+0x13230>
   24898:	ldr	fp, [r1, r3, lsl #2]
   2489c:	cmp	r5, fp
   248a0:	bgt	24bdc <__assert_fail@plt+0x1323c>
   248a4:	mov	r0, r3
   248a8:	add	r3, r8, r0
   248ac:	cmp	r8, r0
   248b0:	lsr	r3, r3, #1
   248b4:	bcc	24898 <__assert_fail@plt+0x12ef8>
   248b8:	ldr	r3, [r1, r8, lsl #2]
   248bc:	cmp	r5, r3
   248c0:	beq	24950 <__assert_fail@plt+0x12fb0>
   248c4:	ldr	r3, [sp, #8]
   248c8:	ldr	r0, [r3, #4]
   248cc:	cmp	r0, #0
   248d0:	ble	24950 <__assert_fail@plt+0x12fb0>
   248d4:	subs	r0, r0, #1
   248d8:	ldr	fp, [r3, #8]
   248dc:	moveq	r8, r0
   248e0:	beq	24944 <__assert_fail@plt+0x12fa4>
   248e4:	mov	r8, #0
   248e8:	str	r2, [sp, #12]
   248ec:	add	r3, r0, r8
   248f0:	lsr	r3, r3, #1
   248f4:	ldr	r2, [fp, r3, lsl #2]
   248f8:	cmp	r5, r2
   248fc:	bgt	24c7c <__assert_fail@plt+0x132dc>
   24900:	cmp	r3, r8
   24904:	bls	24940 <__assert_fail@plt+0x12fa0>
   24908:	add	r0, r3, r8
   2490c:	lsr	r0, r0, #1
   24910:	ldr	r2, [fp, r0, lsl #2]
   24914:	cmp	r5, r2
   24918:	ble	24930 <__assert_fail@plt+0x12f90>
   2491c:	b	24c70 <__assert_fail@plt+0x132d0>
   24920:	ldr	r2, [fp, r3, lsl #2]
   24924:	cmp	r5, r2
   24928:	bgt	24c7c <__assert_fail@plt+0x132dc>
   2492c:	mov	r0, r3
   24930:	add	r3, r8, r0
   24934:	cmp	r8, r0
   24938:	lsr	r3, r3, #1
   2493c:	bcc	24920 <__assert_fail@plt+0x12f80>
   24940:	ldr	r2, [sp, #12]
   24944:	ldr	r3, [fp, r8, lsl #2]
   24948:	cmp	r5, r3
   2494c:	beq	24c4c <__assert_fail@plt+0x132ac>
   24950:	cmp	r7, #0
   24954:	ble	24a48 <__assert_fail@plt+0x130a8>
   24958:	cmp	lr, #0
   2495c:	movne	lr, #0
   24960:	beq	249b8 <__assert_fail@plt+0x13018>
   24964:	add	r3, ip, lr
   24968:	lsr	r3, r3, #1
   2496c:	ldr	r0, [r1, r3, lsl #2]
   24970:	cmp	r0, r7
   24974:	blt	24c98 <__assert_fail@plt+0x132f8>
   24978:	cmp	r3, lr
   2497c:	bls	249b8 <__assert_fail@plt+0x13018>
   24980:	add	ip, r3, lr
   24984:	lsr	ip, ip, #1
   24988:	ldr	r0, [r1, ip, lsl #2]
   2498c:	cmp	r7, r0
   24990:	ble	249a8 <__assert_fail@plt+0x13008>
   24994:	b	24c8c <__assert_fail@plt+0x132ec>
   24998:	ldr	r0, [r1, r3, lsl #2]
   2499c:	cmp	r0, r7
   249a0:	blt	24c98 <__assert_fail@plt+0x132f8>
   249a4:	mov	ip, r3
   249a8:	add	r3, lr, ip
   249ac:	cmp	lr, ip
   249b0:	lsr	r3, r3, #1
   249b4:	bcc	24998 <__assert_fail@plt+0x12ff8>
   249b8:	ldr	r3, [r1, lr, lsl #2]
   249bc:	cmp	r3, r7
   249c0:	beq	24a48 <__assert_fail@plt+0x130a8>
   249c4:	ldr	r3, [sp, #8]
   249c8:	ldr	r1, [r3, #4]
   249cc:	cmp	r1, #0
   249d0:	ble	24a48 <__assert_fail@plt+0x130a8>
   249d4:	subs	r1, r1, #1
   249d8:	ldr	ip, [r3, #8]
   249dc:	moveq	r0, r1
   249e0:	beq	24a3c <__assert_fail@plt+0x1309c>
   249e4:	mov	r0, #0
   249e8:	add	r3, r1, r0
   249ec:	lsr	r3, r3, #1
   249f0:	ldr	lr, [ip, r3, lsl #2]
   249f4:	cmp	lr, r7
   249f8:	blt	24cb4 <__assert_fail@plt+0x13314>
   249fc:	cmp	r3, r0
   24a00:	bls	24a3c <__assert_fail@plt+0x1309c>
   24a04:	add	r1, r3, r0
   24a08:	lsr	r1, r1, #1
   24a0c:	ldr	lr, [ip, r1, lsl #2]
   24a10:	cmp	r7, lr
   24a14:	ble	24a2c <__assert_fail@plt+0x1308c>
   24a18:	b	24ca8 <__assert_fail@plt+0x13308>
   24a1c:	ldr	lr, [ip, r3, lsl #2]
   24a20:	cmp	lr, r7
   24a24:	blt	24cb4 <__assert_fail@plt+0x13314>
   24a28:	mov	r1, r3
   24a2c:	add	r3, r0, r1
   24a30:	cmp	r0, r1
   24a34:	lsr	r3, r3, #1
   24a38:	bcc	24a1c <__assert_fail@plt+0x1307c>
   24a3c:	ldr	r3, [ip, r0, lsl #2]
   24a40:	cmp	r3, r7
   24a44:	beq	24c4c <__assert_fail@plt+0x132ac>
   24a48:	add	r4, r4, #1
   24a4c:	cmp	r4, sl
   24a50:	blt	247fc <__assert_fail@plt+0x12e5c>
   24a54:	cmp	sl, #0
   24a58:	ldr	r5, [sp, #8]
   24a5c:	ldr	r0, [sp, #36]	; 0x24
   24a60:	ble	24b8c <__assert_fail@plt+0x131ec>
   24a64:	mov	r1, #0
   24a68:	ldr	r4, [sp, #20]
   24a6c:	ldr	ip, [r4, #8]
   24a70:	sub	ip, ip, #4
   24a74:	ldr	r2, [sp, #32]
   24a78:	ldr	lr, [ip, #4]!
   24a7c:	cmp	r2, #0
   24a80:	ble	24af4 <__assert_fail@plt+0x13154>
   24a84:	subs	r2, r2, #1
   24a88:	moveq	r7, r2
   24a8c:	beq	24ae8 <__assert_fail@plt+0x13148>
   24a90:	mov	r7, #0
   24a94:	add	r3, r2, r7
   24a98:	lsr	r3, r3, #1
   24a9c:	ldr	r6, [r0, r3, lsl #2]
   24aa0:	cmp	r6, lr
   24aa4:	blt	24bc0 <__assert_fail@plt+0x13220>
   24aa8:	cmp	r3, r7
   24aac:	bls	24ae8 <__assert_fail@plt+0x13148>
   24ab0:	add	r2, r3, r7
   24ab4:	lsr	r2, r2, #1
   24ab8:	ldr	r6, [r0, r2, lsl #2]
   24abc:	cmp	lr, r6
   24ac0:	ble	24ad8 <__assert_fail@plt+0x13138>
   24ac4:	b	24bb4 <__assert_fail@plt+0x13214>
   24ac8:	ldr	r6, [r0, r3, lsl #2]
   24acc:	cmp	lr, r6
   24ad0:	bgt	24bc0 <__assert_fail@plt+0x13220>
   24ad4:	mov	r2, r3
   24ad8:	add	r3, r7, r2
   24adc:	cmp	r7, r2
   24ae0:	lsr	r3, r3, #1
   24ae4:	bcc	24ac8 <__assert_fail@plt+0x13128>
   24ae8:	ldr	r3, [r0, r7, lsl #2]
   24aec:	cmp	lr, r3
   24af0:	beq	24b80 <__assert_fail@plt+0x131e0>
   24af4:	ldr	r7, [r5, #4]
   24af8:	cmp	r7, #0
   24afc:	ble	24b80 <__assert_fail@plt+0x131e0>
   24b00:	sub	r8, r7, #1
   24b04:	ldr	r3, [r5, #8]
   24b08:	cmp	r8, #0
   24b0c:	mov	r9, r8
   24b10:	moveq	r6, r8
   24b14:	beq	24b70 <__assert_fail@plt+0x131d0>
   24b18:	mov	r6, #0
   24b1c:	add	r2, r9, r6
   24b20:	lsr	r2, r2, #1
   24b24:	ldr	fp, [r3, r2, lsl #2]
   24b28:	cmp	lr, fp
   24b2c:	bgt	24c3c <__assert_fail@plt+0x1329c>
   24b30:	cmp	r2, r6
   24b34:	bls	24b70 <__assert_fail@plt+0x131d0>
   24b38:	add	r9, r2, r6
   24b3c:	lsr	r9, r9, #1
   24b40:	ldr	fp, [r3, r9, lsl #2]
   24b44:	cmp	lr, fp
   24b48:	ble	24b60 <__assert_fail@plt+0x131c0>
   24b4c:	b	24c30 <__assert_fail@plt+0x13290>
   24b50:	ldr	fp, [r3, r2, lsl #2]
   24b54:	cmp	lr, fp
   24b58:	bgt	24c3c <__assert_fail@plt+0x1329c>
   24b5c:	mov	r9, r2
   24b60:	add	r2, r6, r9
   24b64:	cmp	r6, r9
   24b68:	lsr	r2, r2, #1
   24b6c:	bcc	24b50 <__assert_fail@plt+0x131b0>
   24b70:	ldr	r2, [r3, r6, lsl #2]
   24b74:	add	r3, r3, r6, lsl #2
   24b78:	cmp	lr, r2
   24b7c:	beq	24bec <__assert_fail@plt+0x1324c>
   24b80:	add	r1, r1, #1
   24b84:	cmp	r1, sl
   24b88:	blt	24a74 <__assert_fail@plt+0x130d4>
   24b8c:	mov	r7, #0
   24b90:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   24b94:	mov	r0, r7
   24b98:	add	sp, sp, #44	; 0x2c
   24b9c:	ldrd	r4, [sp]
   24ba0:	ldrd	r6, [sp, #8]
   24ba4:	ldrd	r8, [sp, #16]
   24ba8:	ldrd	sl, [sp, #24]
   24bac:	add	sp, sp, #32
   24bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   24bb4:	mov	r6, r2
   24bb8:	mov	r2, r3
   24bbc:	mov	r3, r6
   24bc0:	add	r7, r3, #1
   24bc4:	cmp	r7, r2
   24bc8:	bcc	24a94 <__assert_fail@plt+0x130f4>
   24bcc:	b	24ae8 <__assert_fail@plt+0x13148>
   24bd0:	mov	r8, r3
   24bd4:	mov	r3, r0
   24bd8:	mov	r0, r8
   24bdc:	add	r8, r3, #1
   24be0:	cmp	r0, r8
   24be4:	bhi	24864 <__assert_fail@plt+0x12ec4>
   24be8:	b	248b8 <__assert_fail@plt+0x12f18>
   24bec:	cmp	r6, r7
   24bf0:	mov	r2, r6
   24bf4:	movlt	r7, #0
   24bf8:	movge	r7, #1
   24bfc:	orrs	lr, r7, r6, lsr #31
   24c00:	bne	24b80 <__assert_fail@plt+0x131e0>
   24c04:	cmp	r6, r8
   24c08:	str	r8, [r5, #4]
   24c0c:	bge	24c28 <__assert_fail@plt+0x13288>
   24c10:	ldr	lr, [r3, #4]
   24c14:	add	r2, r2, #1
   24c18:	str	lr, [r3], #4
   24c1c:	ldr	lr, [r5, #4]
   24c20:	cmp	r2, lr
   24c24:	blt	24c10 <__assert_fail@plt+0x13270>
   24c28:	ldr	sl, [r4, #4]
   24c2c:	b	24b80 <__assert_fail@plt+0x131e0>
   24c30:	mov	r6, r2
   24c34:	mov	r2, r9
   24c38:	mov	r9, r6
   24c3c:	add	r6, r2, #1
   24c40:	cmp	r6, r9
   24c44:	bcc	24b1c <__assert_fail@plt+0x1317c>
   24c48:	b	24b70 <__assert_fail@plt+0x131d0>
   24c4c:	ldr	r3, [r6, #28]
   24c50:	add	r0, sp, #28
   24c54:	ldr	r1, [sp, #16]
   24c58:	add	r2, r3, r2
   24c5c:	bl	2065c <__assert_fail@plt+0xecbc>
   24c60:	cmp	r0, #0
   24c64:	bne	24cc4 <__assert_fail@plt+0x13324>
   24c68:	ldr	sl, [r9, #4]
   24c6c:	b	24a48 <__assert_fail@plt+0x130a8>
   24c70:	mov	r8, r0
   24c74:	mov	r0, r3
   24c78:	mov	r3, r8
   24c7c:	add	r8, r3, #1
   24c80:	cmp	r8, r0
   24c84:	bcc	248ec <__assert_fail@plt+0x12f4c>
   24c88:	b	24940 <__assert_fail@plt+0x12fa0>
   24c8c:	mov	r0, ip
   24c90:	mov	ip, r3
   24c94:	mov	r3, r0
   24c98:	add	lr, r3, #1
   24c9c:	cmp	lr, ip
   24ca0:	bcc	24964 <__assert_fail@plt+0x12fc4>
   24ca4:	b	249b8 <__assert_fail@plt+0x13018>
   24ca8:	mov	r0, r1
   24cac:	mov	r1, r3
   24cb0:	mov	r3, r0
   24cb4:	add	r0, r3, #1
   24cb8:	cmp	r0, r1
   24cbc:	bcc	249e8 <__assert_fail@plt+0x13048>
   24cc0:	b	24a3c <__assert_fail@plt+0x1309c>
   24cc4:	mov	r7, r0
   24cc8:	ldr	r0, [sp, #36]	; 0x24
   24ccc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   24cd0:	b	24b94 <__assert_fail@plt+0x131f4>
   24cd4:	mov	r0, r4
   24cd8:	b	24b8c <__assert_fail@plt+0x131ec>
   24cdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24ce0:	mov	r5, r2
   24ce4:	ldr	r2, [r1, #20]
   24ce8:	strd	r6, [sp, #8]
   24cec:	mov	r7, r1
   24cf0:	strd	r8, [sp, #16]
   24cf4:	add	r9, r5, r5, lsl #1
   24cf8:	strd	sl, [sp, #24]
   24cfc:	lsl	r9, r9, #2
   24d00:	str	lr, [sp, #32]
   24d04:	sub	sp, sp, #44	; 0x2c
   24d08:	add	r2, r2, r9
   24d0c:	str	r0, [sp, #16]
   24d10:	ldr	r2, [r2, #4]
   24d14:	str	r3, [sp, #20]
   24d18:	add	r3, r2, #1
   24d1c:	lsl	r0, r3, #2
   24d20:	str	r3, [sp, #8]
   24d24:	bl	1f0c4 <__assert_fail@plt+0xd724>
   24d28:	subs	r4, r0, #0
   24d2c:	beq	25048 <__assert_fail@plt+0x136a8>
   24d30:	ldr	ip, [r7]
   24d34:	lsl	r6, r5, #3
   24d38:	mov	r3, #65280	; 0xff00
   24d3c:	movt	r3, #3
   24d40:	str	r5, [r4]
   24d44:	mvn	r8, #0
   24d48:	ldr	r1, [r7, #24]
   24d4c:	add	r0, ip, r6
   24d50:	ldr	lr, [r0, #4]
   24d54:	add	r2, r1, r9
   24d58:	str	r8, [r2, #4]
   24d5c:	and	r3, r3, lr
   24d60:	cmp	r3, #0
   24d64:	beq	24d94 <__assert_fail@plt+0x133f4>
   24d68:	ldr	r3, [r7, #20]
   24d6c:	add	r3, r3, r9
   24d70:	ldr	r8, [r3, #4]
   24d74:	cmp	r8, #0
   24d78:	beq	2500c <__assert_fail@plt+0x1366c>
   24d7c:	ldr	r3, [r3, #8]
   24d80:	ldr	r3, [r3]
   24d84:	add	ip, ip, r3, lsl #3
   24d88:	ldrb	r3, [ip, #6]
   24d8c:	tst	r3, #4
   24d90:	beq	25014 <__assert_fail@plt+0x13674>
   24d94:	ldrb	r3, [r0, #4]
   24d98:	tst	r3, #8
   24d9c:	beq	24f38 <__assert_fail@plt+0x13598>
   24da0:	ldr	ip, [r7, #20]
   24da4:	add	r3, ip, r9
   24da8:	ldr	r2, [r3, #4]
   24dac:	cmp	r2, #0
   24db0:	ble	24f38 <__assert_fail@plt+0x13598>
   24db4:	mov	r2, #0
   24db8:	mov	sl, #1
   24dbc:	mov	r8, r2
   24dc0:	str	r2, [sp, #12]
   24dc4:	ldr	r3, [r3, #8]
   24dc8:	ldr	r2, [r3, r8, lsl #2]
   24dcc:	add	r6, r2, r2, lsl #1
   24dd0:	lsl	r6, r6, #2
   24dd4:	add	r0, r1, r6
   24dd8:	ldr	r3, [r0, #4]
   24ddc:	cmn	r3, #1
   24de0:	moveq	r3, #1
   24de4:	streq	r3, [sp, #12]
   24de8:	beq	24f00 <__assert_fail@plt+0x13560>
   24dec:	cmp	r3, #0
   24df0:	beq	24fa0 <__assert_fail@plt+0x13600>
   24df4:	ldrd	r2, [r0]
   24df8:	strd	r2, [sp, #28]
   24dfc:	ldr	r3, [r0, #8]
   24e00:	str	r3, [sp, #36]	; 0x24
   24e04:	ldr	r2, [sp, #32]
   24e08:	cmp	r2, #0
   24e0c:	mov	r3, r2
   24e10:	beq	24ee8 <__assert_fail@plt+0x13548>
   24e14:	ldr	r1, [sp, #8]
   24e18:	add	fp, sl, r2, lsl #1
   24e1c:	cmp	r1, fp
   24e20:	blt	24fd4 <__assert_fail@plt+0x13634>
   24e24:	cmp	sl, #0
   24e28:	beq	25050 <__assert_fail@plt+0x136b0>
   24e2c:	sub	r2, r2, #1
   24e30:	sub	r5, sl, #1
   24e34:	ldr	r1, [sp, #36]	; 0x24
   24e38:	cmp	r2, #0
   24e3c:	cmpge	r5, #0
   24e40:	mvn	r0, r2
   24e44:	blt	24e90 <__assert_fail@plt+0x134f0>
   24e48:	mov	r3, r5
   24e4c:	ldr	lr, [r4, r3, lsl #2]
   24e50:	ldr	ip, [r1, r2, lsl #2]
   24e54:	cmp	lr, ip
   24e58:	subeq	r2, r2, #1
   24e5c:	subeq	r3, r3, #1
   24e60:	mvneq	r0, r2
   24e64:	beq	24e80 <__assert_fail@plt+0x134e0>
   24e68:	subge	r3, r3, #1
   24e6c:	bge	24e80 <__assert_fail@plt+0x134e0>
   24e70:	sub	r2, r2, #1
   24e74:	sub	fp, fp, #1
   24e78:	mvn	r0, r2
   24e7c:	str	ip, [r4, fp, lsl #2]
   24e80:	mvn	ip, r3
   24e84:	lsr	ip, ip, #31
   24e88:	ands	ip, ip, r0, lsr #31
   24e8c:	bne	24e4c <__assert_fail@plt+0x134ac>
   24e90:	cmp	r2, #0
   24e94:	blt	24eac <__assert_fail@plt+0x1350c>
   24e98:	add	r2, r2, #1
   24e9c:	sub	fp, fp, r2
   24ea0:	lsl	r2, r2, #2
   24ea4:	add	r0, r4, fp, lsl #2
   24ea8:	bl	115d4 <memcpy@plt>
   24eac:	ldr	r3, [sp, #32]
   24eb0:	add	r3, sl, r3, lsl #1
   24eb4:	subs	r2, r3, fp
   24eb8:	sub	r3, r3, #1
   24ebc:	beq	24ee8 <__assert_fail@plt+0x13548>
   24ec0:	add	sl, sl, r2
   24ec4:	ldr	ip, [r4, r3, lsl #2]
   24ec8:	add	r1, r5, r2
   24ecc:	ldr	r0, [r4, r5, lsl #2]
   24ed0:	cmp	ip, r0
   24ed4:	ble	24f80 <__assert_fail@plt+0x135e0>
   24ed8:	subs	r2, r2, #1
   24edc:	sub	r3, r3, #1
   24ee0:	str	ip, [r4, r1, lsl #2]
   24ee4:	bne	24ec4 <__assert_fail@plt+0x13524>
   24ee8:	ldr	r1, [r7, #24]
   24eec:	add	r6, r1, r6
   24ef0:	ldr	r3, [r6, #4]
   24ef4:	cmp	r3, #0
   24ef8:	beq	24fb8 <__assert_fail@plt+0x13618>
   24efc:	ldr	ip, [r7, #20]
   24f00:	add	r3, ip, r9
   24f04:	add	r8, r8, #1
   24f08:	ldr	r2, [r3, #4]
   24f0c:	cmp	r2, r8
   24f10:	bgt	24dc4 <__assert_fail@plt+0x13424>
   24f14:	ldr	r0, [sp, #12]
   24f18:	add	r2, r1, r9
   24f1c:	ldr	r3, [sp, #20]
   24f20:	eor	r3, r3, #1
   24f24:	tst	r0, r3
   24f28:	beq	24f40 <__assert_fail@plt+0x135a0>
   24f2c:	mov	r3, #0
   24f30:	str	r3, [r2, #4]
   24f34:	b	24f50 <__assert_fail@plt+0x135b0>
   24f38:	mov	sl, #1
   24f3c:	add	r2, r1, r9
   24f40:	ldr	r3, [sp, #8]
   24f44:	str	r3, [r1, r9]
   24f48:	str	sl, [r2, #4]
   24f4c:	str	r4, [r2, #8]
   24f50:	ldr	r2, [sp, #8]
   24f54:	mov	r0, #0
   24f58:	ldr	r3, [sp, #16]
   24f5c:	stm	r3, {r2, sl}
   24f60:	str	r4, [r3, #8]
   24f64:	add	sp, sp, #44	; 0x2c
   24f68:	ldrd	r4, [sp]
   24f6c:	ldrd	r6, [sp, #8]
   24f70:	ldrd	r8, [sp, #16]
   24f74:	ldrd	sl, [sp, #24]
   24f78:	add	sp, sp, #32
   24f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   24f80:	subs	r5, r5, #1
   24f84:	str	r0, [r4, r1, lsl #2]
   24f88:	bpl	24ec4 <__assert_fail@plt+0x13524>
   24f8c:	lsl	r2, r2, #2
   24f90:	mov	r0, r4
   24f94:	add	r1, r4, fp, lsl #2
   24f98:	bl	115d4 <memcpy@plt>
   24f9c:	b	24ee8 <__assert_fail@plt+0x13548>
   24fa0:	mov	r1, r7
   24fa4:	add	r0, sp, #28
   24fa8:	bl	24cdc <__assert_fail@plt+0x1333c>
   24fac:	cmp	r0, #0
   24fb0:	beq	24e04 <__assert_fail@plt+0x13464>
   24fb4:	b	24f64 <__assert_fail@plt+0x135c4>
   24fb8:	mov	r3, #1
   24fbc:	ldr	r0, [sp, #36]	; 0x24
   24fc0:	str	r3, [sp, #12]
   24fc4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   24fc8:	ldr	ip, [r7, #20]
   24fcc:	ldr	r1, [r7, #24]
   24fd0:	b	24f00 <__assert_fail@plt+0x13560>
   24fd4:	add	r2, r1, r2
   24fd8:	mov	r0, r4
   24fdc:	lsl	r3, r2, #1
   24fe0:	lsl	r1, r2, #3
   24fe4:	str	r3, [sp, #8]
   24fe8:	bl	1f170 <__assert_fail@plt+0xd7d0>
   24fec:	subs	r4, r0, #0
   24ff0:	beq	25048 <__assert_fail@plt+0x136a8>
   24ff4:	cmp	sl, #0
   24ff8:	ldreq	r3, [sp, #32]
   24ffc:	beq	25050 <__assert_fail@plt+0x136b0>
   25000:	ldr	r2, [sp, #32]
   25004:	add	fp, sl, r2, lsl #1
   25008:	b	24e2c <__assert_fail@plt+0x1348c>
   2500c:	mov	sl, #1
   25010:	b	24f40 <__assert_fail@plt+0x135a0>
   25014:	ubfx	lr, lr, #8, #10
   25018:	mov	r3, r5
   2501c:	mov	r2, r5
   25020:	mov	r1, r5
   25024:	mov	r0, r7
   25028:	str	lr, [sp]
   2502c:	bl	23ddc <__assert_fail@plt+0x1243c>
   25030:	cmp	r0, #0
   25034:	bne	24f64 <__assert_fail@plt+0x135c4>
   25038:	ldr	r0, [r7]
   2503c:	ldr	r1, [r7, #24]
   25040:	add	r0, r0, r6
   25044:	b	24d94 <__assert_fail@plt+0x133f4>
   25048:	mov	r0, #12
   2504c:	b	24f64 <__assert_fail@plt+0x135c4>
   25050:	mov	r0, r4
   25054:	lsl	r2, r3, #2
   25058:	ldr	r1, [sp, #36]	; 0x24
   2505c:	mov	sl, r3
   25060:	bl	115d4 <memcpy@plt>
   25064:	b	24ee8 <__assert_fail@plt+0x13548>
   25068:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2506c:	strd	r6, [sp, #8]
   25070:	strd	r8, [sp, #16]
   25074:	ldr	r8, [r2, #4]
   25078:	strd	sl, [sp, #24]
   2507c:	str	lr, [sp, #32]
   25080:	sub	sp, sp, #4
   25084:	cmp	r8, #0
   25088:	moveq	r4, r8
   2508c:	streq	r8, [r0]
   25090:	beq	25250 <__assert_fail@plt+0x138b0>
   25094:	mov	r5, r8
   25098:	ble	250b4 <__assert_fail@plt+0x13714>
   2509c:	ldr	r3, [r2, #8]
   250a0:	add	lr, r3, r8, lsl #2
   250a4:	ldr	ip, [r3], #4
   250a8:	cmp	r3, lr
   250ac:	add	r5, r5, ip
   250b0:	bne	250a4 <__assert_fail@plt+0x13704>
   250b4:	ldr	ip, [r1, #32]
   250b8:	ldr	r3, [r1, #68]	; 0x44
   250bc:	and	r3, r3, r5
   250c0:	add	r3, r3, r3, lsl #1
   250c4:	lsl	r3, r3, #2
   250c8:	ldr	r9, [ip, r3]
   250cc:	add	r3, ip, r3
   250d0:	cmp	r9, #0
   250d4:	ble	2511c <__assert_fail@plt+0x1377c>
   250d8:	ldr	lr, [r3, #8]
   250dc:	mov	ip, #0
   250e0:	sub	lr, lr, #4
   250e4:	b	250f4 <__assert_fail@plt+0x13754>
   250e8:	add	ip, ip, #1
   250ec:	cmp	ip, r9
   250f0:	beq	2511c <__assert_fail@plt+0x1377c>
   250f4:	ldr	r4, [lr, #4]!
   250f8:	ldr	r3, [r4]
   250fc:	cmp	r3, r5
   25100:	bne	250e8 <__assert_fail@plt+0x13748>
   25104:	ldr	r3, [r4, #8]
   25108:	cmp	r8, r3
   2510c:	beq	25248 <__assert_fail@plt+0x138a8>
   25110:	add	ip, ip, #1
   25114:	cmp	ip, r9
   25118:	bne	250f4 <__assert_fail@plt+0x13754>
   2511c:	mov	r6, r1
   25120:	mov	r7, r0
   25124:	mov	r1, #1
   25128:	mov	r0, #56	; 0x38
   2512c:	mov	r9, r2
   25130:	bl	1ecd8 <__assert_fail@plt+0xd338>
   25134:	subs	r4, r0, #0
   25138:	beq	252e8 <__assert_fail@plt+0x13948>
   2513c:	ldr	r3, [r9, #4]
   25140:	add	r8, r4, #4
   25144:	cmp	r3, #0
   25148:	str	r3, [r4, #8]
   2514c:	ble	25270 <__assert_fail@plt+0x138d0>
   25150:	lsl	r0, r3, #2
   25154:	str	r3, [r4, #4]
   25158:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2515c:	cmp	r0, #0
   25160:	mov	r3, r0
   25164:	str	r0, [r4, #12]
   25168:	beq	25320 <__assert_fail@plt+0x13980>
   2516c:	ldr	sl, [r9, #4]
   25170:	ldr	r1, [r9, #8]
   25174:	lsl	fp, sl, #2
   25178:	mov	r2, fp
   2517c:	bl	115d4 <memcpy@plt>
   25180:	cmp	sl, #0
   25184:	str	r8, [r4, #40]	; 0x28
   25188:	ble	25284 <__assert_fail@plt+0x138e4>
   2518c:	ldr	r1, [r9, #8]
   25190:	mov	sl, #65280	; 0xff00
   25194:	movt	sl, #3
   25198:	ldr	r9, [r6]
   2519c:	add	lr, fp, r1
   251a0:	b	251e4 <__assert_fail@plt+0x13844>
   251a4:	ldrb	r2, [r4, #52]	; 0x34
   251a8:	cmp	r0, #2
   251ac:	ldrb	fp, [r3, #6]
   251b0:	ubfx	ip, r2, #5, #1
   251b4:	ubfx	fp, fp, #4, #1
   251b8:	orr	ip, ip, fp
   251bc:	bfi	r2, ip, #5, #1
   251c0:	strb	r2, [r4, #52]	; 0x34
   251c4:	beq	252f8 <__assert_fail@plt+0x13958>
   251c8:	cmp	r0, #4
   251cc:	bne	25308 <__assert_fail@plt+0x13968>
   251d0:	ldrb	r3, [r4, #52]	; 0x34
   251d4:	orr	r3, r3, #64	; 0x40
   251d8:	strb	r3, [r4, #52]	; 0x34
   251dc:	cmp	lr, r1
   251e0:	beq	25284 <__assert_fail@plt+0x138e4>
   251e4:	ldr	r3, [r1], #4
   251e8:	add	r3, r9, r3, lsl #3
   251ec:	ldrb	r0, [r3, #4]
   251f0:	cmp	r0, #1
   251f4:	bne	251a4 <__assert_fail@plt+0x13804>
   251f8:	ldr	r2, [r3, #4]
   251fc:	tst	sl, r2
   25200:	beq	251dc <__assert_fail@plt+0x1383c>
   25204:	ldrb	r2, [r3, #6]
   25208:	ldrb	r3, [r4, #52]	; 0x34
   2520c:	ubfx	r0, r2, #4, #1
   25210:	ubfx	r2, r3, #5, #1
   25214:	orr	r2, r2, r0
   25218:	bfi	r3, r2, #5, #1
   2521c:	strb	r3, [r4, #52]	; 0x34
   25220:	ldrb	r3, [r4, #52]	; 0x34
   25224:	orr	r3, r3, #128	; 0x80
   25228:	strb	r3, [r4, #52]	; 0x34
   2522c:	b	251dc <__assert_fail@plt+0x1383c>
   25230:	ldr	r6, [r2, #8]
   25234:	ldr	r7, [r4, #12]
   25238:	ldr	r6, [r6, r3, lsl #2]
   2523c:	ldr	r7, [r7, r3, lsl #2]
   25240:	cmp	r7, r6
   25244:	bne	250e8 <__assert_fail@plt+0x13748>
   25248:	subs	r3, r3, #1
   2524c:	bpl	25230 <__assert_fail@plt+0x13890>
   25250:	mov	r0, r4
   25254:	add	sp, sp, #4
   25258:	ldrd	r4, [sp]
   2525c:	ldrd	r6, [sp, #8]
   25260:	ldrd	r8, [sp, #16]
   25264:	ldrd	sl, [sp, #24]
   25268:	add	sp, sp, #32
   2526c:	pop	{pc}		; (ldr pc, [sp], #4)
   25270:	mov	r3, #0
   25274:	str	r3, [r4, #4]
   25278:	str	r3, [r8, #4]
   2527c:	str	r3, [r8, #8]
   25280:	str	r8, [r4, #40]	; 0x28
   25284:	mov	r2, r5
   25288:	mov	r0, r6
   2528c:	mov	r1, r4
   25290:	bl	1f7ec <__assert_fail@plt+0xde4c>
   25294:	cmp	r0, #0
   25298:	beq	25250 <__assert_fail@plt+0x138b0>
   2529c:	ldr	r0, [r4, #24]
   252a0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   252a4:	ldr	r0, [r4, #36]	; 0x24
   252a8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   252ac:	ldr	r3, [r4, #40]	; 0x28
   252b0:	cmp	r8, r3
   252b4:	beq	252c8 <__assert_fail@plt+0x13928>
   252b8:	ldr	r0, [r3, #8]
   252bc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   252c0:	ldr	r0, [r4, #40]	; 0x28
   252c4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   252c8:	ldr	r0, [r4, #12]
   252cc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   252d0:	ldr	r0, [r4, #48]	; 0x30
   252d4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   252d8:	ldr	r0, [r4, #44]	; 0x2c
   252dc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   252e0:	mov	r0, r4
   252e4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   252e8:	mov	r3, #12
   252ec:	mov	r4, #0
   252f0:	str	r3, [r7]
   252f4:	b	25250 <__assert_fail@plt+0x138b0>
   252f8:	uxtb	r3, r2
   252fc:	orr	r3, r3, #16
   25300:	strb	r3, [r4, #52]	; 0x34
   25304:	b	251dc <__assert_fail@plt+0x1383c>
   25308:	cmp	r0, #12
   2530c:	beq	25220 <__assert_fail@plt+0x13880>
   25310:	ldr	r3, [r3, #4]
   25314:	tst	sl, r3
   25318:	beq	251dc <__assert_fail@plt+0x1383c>
   2531c:	b	25220 <__assert_fail@plt+0x13880>
   25320:	mov	r0, r4
   25324:	str	r3, [r4, #4]
   25328:	str	r3, [r4, #8]
   2532c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25330:	b	252e8 <__assert_fail@plt+0x13948>
   25334:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25338:	strd	r6, [sp, #8]
   2533c:	ldr	r6, [r0, #108]	; 0x6c
   25340:	strd	r8, [sp, #16]
   25344:	strd	sl, [sp, #24]
   25348:	str	lr, [sp, #32]
   2534c:	sub	sp, sp, #44	; 0x2c
   25350:	cmp	r6, #0
   25354:	ble	254b4 <__assert_fail@plt+0x13b14>
   25358:	ldr	r4, [r0, #116]	; 0x74
   2535c:	mov	r5, r6
   25360:	mov	r9, #0
   25364:	add	ip, r5, r9
   25368:	asr	ip, ip, #1
   2536c:	add	lr, ip, ip, lsl #1
   25370:	add	lr, r4, lr, lsl #3
   25374:	ldr	lr, [lr, #4]
   25378:	cmp	r2, lr
   2537c:	bgt	257d8 <__assert_fail@plt+0x13e38>
   25380:	cmp	ip, r9
   25384:	ble	253d0 <__assert_fail@plt+0x13a30>
   25388:	add	r5, ip, r9
   2538c:	asr	r5, r5, #1
   25390:	add	lr, r5, r5, lsl #1
   25394:	add	lr, r4, lr, lsl #3
   25398:	ldr	lr, [lr, #4]
   2539c:	cmp	r2, lr
   253a0:	ble	253c0 <__assert_fail@plt+0x13a20>
   253a4:	b	257cc <__assert_fail@plt+0x13e2c>
   253a8:	add	lr, ip, ip, lsl #1
   253ac:	add	lr, r4, lr, lsl #3
   253b0:	ldr	lr, [lr, #4]
   253b4:	cmp	r2, lr
   253b8:	bgt	257d8 <__assert_fail@plt+0x13e38>
   253bc:	mov	r5, ip
   253c0:	add	ip, r9, r5
   253c4:	cmp	r9, r5
   253c8:	asr	ip, ip, #1
   253cc:	blt	253a8 <__assert_fail@plt+0x13a08>
   253d0:	cmp	r6, r9
   253d4:	ble	254b4 <__assert_fail@plt+0x13b14>
   253d8:	add	r9, r9, r9, lsl #1
   253dc:	lsl	ip, r9, #3
   253e0:	add	lr, r4, ip
   253e4:	ldr	lr, [lr, #4]
   253e8:	cmp	r2, lr
   253ec:	bne	254b4 <__assert_fail@plt+0x13b14>
   253f0:	ldr	r9, [r0, #84]	; 0x54
   253f4:	mov	r6, r2
   253f8:	mov	r7, r1
   253fc:	mov	r8, r0
   25400:	str	r3, [sp, #12]
   25404:	add	r3, ip, #24
   25408:	str	r3, [sp, #8]
   2540c:	ldr	r3, [sp, #8]
   25410:	add	r4, r4, r3
   25414:	ldr	lr, [r7, #4]
   25418:	cmp	lr, #0
   2541c:	ble	254a4 <__assert_fail@plt+0x13b04>
   25420:	sub	lr, lr, #1
   25424:	ldr	ip, [r4, #-24]	; 0xffffffe8
   25428:	cmp	lr, #0
   2542c:	mov	r1, lr
   25430:	moveq	r5, lr
   25434:	ldr	r2, [r7, #8]
   25438:	beq	25498 <__assert_fail@plt+0x13af8>
   2543c:	mov	r0, lr
   25440:	mov	r5, #0
   25444:	add	r3, r0, r5
   25448:	lsr	r3, r3, #1
   2544c:	ldr	sl, [r2, r3, lsl #2]
   25450:	cmp	ip, sl
   25454:	bgt	254e0 <__assert_fail@plt+0x13b40>
   25458:	cmp	r3, r5
   2545c:	bls	25498 <__assert_fail@plt+0x13af8>
   25460:	add	r0, r3, r5
   25464:	lsr	r0, r0, #1
   25468:	ldr	sl, [r2, r0, lsl #2]
   2546c:	cmp	ip, sl
   25470:	ble	25488 <__assert_fail@plt+0x13ae8>
   25474:	b	254d4 <__assert_fail@plt+0x13b34>
   25478:	ldr	sl, [r2, r3, lsl #2]
   2547c:	cmp	ip, sl
   25480:	bgt	254e0 <__assert_fail@plt+0x13b40>
   25484:	mov	r0, r3
   25488:	add	r3, r5, r0
   2548c:	cmp	r5, r0
   25490:	lsr	r3, r3, #1
   25494:	bcc	25478 <__assert_fail@plt+0x13ad8>
   25498:	ldr	r3, [r2, r5, lsl #2]
   2549c:	cmp	ip, r3
   254a0:	beq	254f8 <__assert_fail@plt+0x13b58>
   254a4:	add	r4, r4, #24
   254a8:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   254ac:	cmp	r3, #0
   254b0:	bne	25414 <__assert_fail@plt+0x13a74>
   254b4:	mov	r0, #0
   254b8:	add	sp, sp, #44	; 0x2c
   254bc:	ldrd	r4, [sp]
   254c0:	ldrd	r6, [sp, #8]
   254c4:	ldrd	r8, [sp, #16]
   254c8:	ldrd	sl, [sp, #24]
   254cc:	add	sp, sp, #32
   254d0:	pop	{pc}		; (ldr pc, [sp], #4)
   254d4:	mov	r5, r0
   254d8:	mov	r0, r3
   254dc:	mov	r3, r5
   254e0:	add	r5, r3, #1
   254e4:	cmp	r5, r0
   254e8:	bcc	25444 <__assert_fail@plt+0x13aa4>
   254ec:	ldr	r3, [r2, r5, lsl #2]
   254f0:	cmp	ip, r3
   254f4:	bne	254a4 <__assert_fail@plt+0x13b04>
   254f8:	ldr	r3, [r4, #-16]
   254fc:	ldr	r5, [r4, #-12]
   25500:	add	r5, r6, r5
   25504:	sub	r5, r5, r3
   25508:	cmp	r6, r5
   2550c:	beq	25670 <__assert_fail@plt+0x13cd0>
   25510:	ldr	r2, [r8, #100]	; 0x64
   25514:	ldr	r3, [r9, #12]
   25518:	ldr	fp, [r2, r5, lsl #2]
   2551c:	ldr	sl, [r3, ip, lsl #2]
   25520:	cmp	fp, #0
   25524:	beq	25784 <__assert_fail@plt+0x13de4>
   25528:	ldr	ip, [fp, #8]
   2552c:	cmp	ip, #0
   25530:	ble	257b4 <__assert_fail@plt+0x13e14>
   25534:	subs	r2, ip, #1
   25538:	ldr	r0, [fp, #12]
   2553c:	moveq	r1, r2
   25540:	beq	2559c <__assert_fail@plt+0x13bfc>
   25544:	mov	r1, #0
   25548:	add	r3, r2, r1
   2554c:	lsr	r3, r3, #1
   25550:	ldr	lr, [r0, r3, lsl #2]
   25554:	cmp	lr, sl
   25558:	blt	25660 <__assert_fail@plt+0x13cc0>
   2555c:	cmp	r3, r1
   25560:	bls	2559c <__assert_fail@plt+0x13bfc>
   25564:	add	r2, r3, r1
   25568:	lsr	r2, r2, #1
   2556c:	ldr	lr, [r0, r2, lsl #2]
   25570:	cmp	sl, lr
   25574:	ble	2558c <__assert_fail@plt+0x13bec>
   25578:	b	25654 <__assert_fail@plt+0x13cb4>
   2557c:	ldr	lr, [r0, r3, lsl #2]
   25580:	cmp	sl, lr
   25584:	bgt	25660 <__assert_fail@plt+0x13cc0>
   25588:	mov	r2, r3
   2558c:	add	r3, r1, r2
   25590:	cmp	r1, r2
   25594:	lsr	r3, r3, #1
   25598:	bcc	2557c <__assert_fail@plt+0x13bdc>
   2559c:	ldr	r3, [r0, r1, lsl #2]
   255a0:	cmp	sl, r3
   255a4:	beq	254a4 <__assert_fail@plt+0x13b04>
   255a8:	lsl	r0, ip, #2
   255ac:	str	ip, [sp, #24]
   255b0:	str	ip, [sp, #28]
   255b4:	bl	1f0c4 <__assert_fail@plt+0xd724>
   255b8:	cmp	r0, #0
   255bc:	str	r0, [sp, #32]
   255c0:	beq	25848 <__assert_fail@plt+0x13ea8>
   255c4:	ldr	r2, [fp, #8]
   255c8:	add	r3, sp, #24
   255cc:	ldr	r1, [fp, #12]
   255d0:	str	r3, [sp, #4]
   255d4:	lsl	r2, r2, #2
   255d8:	bl	115d4 <memcpy@plt>
   255dc:	ldr	r3, [sp, #4]
   255e0:	mov	r2, #0
   255e4:	mov	r0, r3
   255e8:	mov	r1, sl
   255ec:	str	r3, [sp, #4]
   255f0:	str	r2, [sp, #20]
   255f4:	bl	20448 <__assert_fail@plt+0xeaa8>
   255f8:	eor	r0, r0, #1
   255fc:	ldr	r3, [sp, #4]
   25600:	ldr	r2, [sp, #20]
   25604:	cmp	r2, #0
   25608:	orrne	r0, r0, #1
   2560c:	tst	r0, #255	; 0xff
   25610:	bne	257e8 <__assert_fail@plt+0x13e48>
   25614:	ldr	sl, [r8, #100]	; 0x64
   25618:	mov	r2, r3
   2561c:	mov	r1, r9
   25620:	add	r0, sp, #20
   25624:	bl	25068 <__assert_fail@plt+0x136c8>
   25628:	str	r0, [sl, r5, lsl #2]
   2562c:	ldr	r0, [sp, #32]
   25630:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25634:	ldr	r3, [r8, #100]	; 0x64
   25638:	ldr	r3, [r3, r5, lsl #2]
   2563c:	cmp	r3, #0
   25640:	bne	254a4 <__assert_fail@plt+0x13b04>
   25644:	ldr	r0, [sp, #20]
   25648:	cmp	r0, #0
   2564c:	beq	254a4 <__assert_fail@plt+0x13b04>
   25650:	b	254b8 <__assert_fail@plt+0x13b18>
   25654:	mov	r1, r3
   25658:	mov	r3, r2
   2565c:	mov	r2, r1
   25660:	add	r1, r3, #1
   25664:	cmp	r2, r1
   25668:	bhi	25548 <__assert_fail@plt+0x13ba8>
   2566c:	b	2559c <__assert_fail@plt+0x13bfc>
   25670:	ldr	r3, [r9, #20]
   25674:	add	ip, ip, ip, lsl #1
   25678:	cmp	lr, #0
   2567c:	movne	lr, #0
   25680:	add	ip, r3, ip, lsl #2
   25684:	ldr	r3, [ip, #8]
   25688:	ldr	r5, [r3]
   2568c:	beq	256e4 <__assert_fail@plt+0x13d44>
   25690:	add	r3, r1, lr
   25694:	lsr	r3, r3, #1
   25698:	ldr	r0, [r2, r3, lsl #2]
   2569c:	cmp	r0, r5
   256a0:	blt	25774 <__assert_fail@plt+0x13dd4>
   256a4:	cmp	r3, lr
   256a8:	bls	256e4 <__assert_fail@plt+0x13d44>
   256ac:	add	r1, r3, lr
   256b0:	lsr	r1, r1, #1
   256b4:	ldr	r0, [r2, r1, lsl #2]
   256b8:	cmp	r5, r0
   256bc:	ble	256d4 <__assert_fail@plt+0x13d34>
   256c0:	b	25768 <__assert_fail@plt+0x13dc8>
   256c4:	ldr	r0, [r2, r3, lsl #2]
   256c8:	cmp	r5, r0
   256cc:	bgt	25774 <__assert_fail@plt+0x13dd4>
   256d0:	mov	r1, r3
   256d4:	add	r3, lr, r1
   256d8:	cmp	lr, r1
   256dc:	lsr	r3, r3, #1
   256e0:	bcc	256c4 <__assert_fail@plt+0x13d24>
   256e4:	ldr	r3, [r2, lr, lsl #2]
   256e8:	cmp	r5, r3
   256ec:	beq	254a4 <__assert_fail@plt+0x13b04>
   256f0:	mov	r2, #1
   256f4:	mov	r3, #1
   256f8:	mov	r0, #4
   256fc:	strd	r2, [sp, #24]
   25700:	bl	1f0c4 <__assert_fail@plt+0xd724>
   25704:	cmp	r0, #0
   25708:	str	r0, [sp, #32]
   2570c:	beq	25804 <__assert_fail@plt+0x13e64>
   25710:	mov	r2, #0
   25714:	ldr	r3, [sp, #80]	; 0x50
   25718:	add	r4, sp, #24
   2571c:	mov	r1, r4
   25720:	str	r5, [r0]
   25724:	mov	r0, r9
   25728:	str	r2, [sp, #20]
   2572c:	ldr	r2, [sp, #12]
   25730:	bl	24658 <__assert_fail@plt+0x12cb8>
   25734:	mov	r5, r0
   25738:	mov	r1, r4
   2573c:	mov	r0, r7
   25740:	bl	20844 <__assert_fail@plt+0xeea4>
   25744:	mov	r4, r0
   25748:	ldr	r0, [sp, #32]
   2574c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25750:	ldr	r0, [sp, #20]
   25754:	orr	r3, r5, r4
   25758:	orrs	r3, r3, r0
   2575c:	bne	25830 <__assert_fail@plt+0x13e90>
   25760:	ldr	r4, [r8, #116]	; 0x74
   25764:	b	2540c <__assert_fail@plt+0x13a6c>
   25768:	mov	r0, r1
   2576c:	mov	r1, r3
   25770:	mov	r3, r0
   25774:	add	lr, r3, #1
   25778:	cmp	lr, r1
   2577c:	bcc	25690 <__assert_fail@plt+0x13cf0>
   25780:	b	256e4 <__assert_fail@plt+0x13d44>
   25784:	mov	r2, #1
   25788:	mov	r3, #1
   2578c:	mov	r0, #4
   25790:	strd	r2, [sp, #24]
   25794:	bl	1f0c4 <__assert_fail@plt+0xd724>
   25798:	cmp	r0, #0
   2579c:	str	r0, [sp, #32]
   257a0:	beq	257fc <__assert_fail@plt+0x13e5c>
   257a4:	add	r3, sp, #24
   257a8:	str	sl, [r0]
   257ac:	str	fp, [sp, #20]
   257b0:	b	25614 <__assert_fail@plt+0x13c74>
   257b4:	mov	r2, #0
   257b8:	add	r3, sp, #24
   257bc:	str	r2, [sp, #24]
   257c0:	str	r2, [r3, #4]
   257c4:	str	r2, [r3, #8]
   257c8:	b	255e4 <__assert_fail@plt+0x13c44>
   257cc:	mov	lr, ip
   257d0:	mov	ip, r5
   257d4:	mov	r5, lr
   257d8:	add	r9, ip, #1
   257dc:	cmp	r5, r9
   257e0:	bgt	25364 <__assert_fail@plt+0x139c4>
   257e4:	b	253d0 <__assert_fail@plt+0x13a30>
   257e8:	ldr	r0, [sp, #32]
   257ec:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   257f0:	ldr	r0, [sp, #20]
   257f4:	cmp	r0, #0
   257f8:	bne	254b8 <__assert_fail@plt+0x13b18>
   257fc:	mov	r0, #12
   25800:	b	254b8 <__assert_fail@plt+0x13b18>
   25804:	mov	r2, #0
   25808:	mov	r3, #0
   2580c:	mov	ip, #12
   25810:	add	r4, sp, #24
   25814:	mov	r1, r4
   25818:	mov	r0, r9
   2581c:	str	ip, [sp, #20]
   25820:	strd	r2, [sp, #24]
   25824:	ldr	r2, [sp, #12]
   25828:	ldr	r3, [sp, #80]	; 0x50
   2582c:	b	25730 <__assert_fail@plt+0x13d90>
   25830:	cmp	r0, #0
   25834:	bne	254b8 <__assert_fail@plt+0x13b18>
   25838:	cmp	r5, #0
   2583c:	movne	r0, r5
   25840:	moveq	r0, r4
   25844:	b	254b8 <__assert_fail@plt+0x13b18>
   25848:	mov	r0, #0
   2584c:	mov	r1, #0
   25850:	mov	r2, #12
   25854:	add	r3, sp, #24
   25858:	strd	r0, [sp, #24]
   2585c:	b	255e4 <__assert_fail@plt+0x13c44>
   25860:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25864:	strd	r6, [sp, #8]
   25868:	ldr	r6, [r2, #4]
   2586c:	strd	r8, [sp, #16]
   25870:	strd	sl, [sp, #24]
   25874:	str	lr, [sp, #32]
   25878:	sub	sp, sp, #20
   2587c:	cmp	r6, #0
   25880:	moveq	r4, r6
   25884:	streq	r6, [r0]
   25888:	beq	25b00 <__assert_fail@plt+0x14160>
   2588c:	add	r7, r3, r6
   25890:	ble	258ac <__assert_fail@plt+0x13f0c>
   25894:	ldr	ip, [r2, #8]
   25898:	add	r4, ip, r6, lsl #2
   2589c:	ldr	lr, [ip], #4
   258a0:	cmp	r4, ip
   258a4:	add	r7, r7, lr
   258a8:	bne	2589c <__assert_fail@plt+0x13efc>
   258ac:	ldr	lr, [r1, #32]
   258b0:	ldr	ip, [r1, #68]	; 0x44
   258b4:	and	ip, ip, r7
   258b8:	add	ip, ip, ip, lsl #1
   258bc:	lsl	ip, ip, #2
   258c0:	ldr	r8, [lr, ip]
   258c4:	add	ip, lr, ip
   258c8:	cmp	r8, #0
   258cc:	ble	25930 <__assert_fail@plt+0x13f90>
   258d0:	ldr	lr, [ip, #8]
   258d4:	mov	ip, #0
   258d8:	sub	lr, lr, #4
   258dc:	b	258ec <__assert_fail@plt+0x13f4c>
   258e0:	add	ip, ip, #1
   258e4:	cmp	ip, r8
   258e8:	beq	25930 <__assert_fail@plt+0x13f90>
   258ec:	ldr	r4, [lr, #4]!
   258f0:	ldr	r5, [r4]
   258f4:	cmp	r5, r7
   258f8:	bne	258e0 <__assert_fail@plt+0x13f40>
   258fc:	ldrb	r5, [r4, #52]	; 0x34
   25900:	and	r5, r5, #15
   25904:	cmp	r5, r3
   25908:	bne	258e0 <__assert_fail@plt+0x13f40>
   2590c:	ldr	fp, [r4, #40]	; 0x28
   25910:	cmp	fp, #0
   25914:	beq	258e0 <__assert_fail@plt+0x13f40>
   25918:	ldr	r5, [fp, #4]
   2591c:	cmp	r6, r5
   25920:	beq	25b38 <__assert_fail@plt+0x14198>
   25924:	add	ip, ip, #1
   25928:	cmp	ip, r8
   2592c:	bne	258ec <__assert_fail@plt+0x13f4c>
   25930:	mov	r9, r1
   25934:	mov	r1, #1
   25938:	str	r0, [sp, #8]
   2593c:	mov	r0, #56	; 0x38
   25940:	mov	sl, r3
   25944:	mov	r6, r2
   25948:	bl	1ecd8 <__assert_fail@plt+0xd338>
   2594c:	subs	r4, r0, #0
   25950:	beq	25c50 <__assert_fail@plt+0x142b0>
   25954:	ldr	r3, [r6, #4]
   25958:	add	fp, r4, #4
   2595c:	cmp	r3, #0
   25960:	str	r3, [r4, #8]
   25964:	ble	25b44 <__assert_fail@plt+0x141a4>
   25968:	lsl	r0, r3, #2
   2596c:	str	r3, [r4, #4]
   25970:	bl	1f0c4 <__assert_fail@plt+0xd724>
   25974:	cmp	r0, #0
   25978:	mov	r3, r0
   2597c:	str	r0, [r4, #12]
   25980:	beq	25c64 <__assert_fail@plt+0x142c4>
   25984:	ldr	r8, [r6, #4]
   25988:	ldr	r1, [r6, #8]
   2598c:	lsl	r2, r8, #2
   25990:	bl	115d4 <memcpy@plt>
   25994:	ldrb	r3, [r4, #52]	; 0x34
   25998:	cmp	r8, #0
   2599c:	str	fp, [r4, #40]	; 0x28
   259a0:	bfi	r3, sl, #0, #4
   259a4:	strb	r3, [r4, #52]	; 0x34
   259a8:	ble	25ae8 <__assert_fail@plt+0x14148>
   259ac:	and	r2, sl, #2
   259b0:	mov	r1, #0
   259b4:	and	r3, sl, #1
   259b8:	mov	lr, r8
   259bc:	mov	r5, r1
   259c0:	mov	r8, r3
   259c4:	str	r2, [sp]
   259c8:	and	r2, sl, #4
   259cc:	str	r2, [sp, #4]
   259d0:	ldr	r3, [r6, #8]
   259d4:	ldr	r2, [r9]
   259d8:	ldr	r3, [r3, r5, lsl #2]
   259dc:	add	r2, r2, r3, lsl #3
   259e0:	ldr	sl, [r2, #4]
   259e4:	ldrb	r3, [r2, #4]
   259e8:	ubfx	sl, sl, #8, #10
   259ec:	cmp	r3, #1
   259f0:	cmpeq	sl, #0
   259f4:	beq	25adc <__assert_fail@plt+0x1413c>
   259f8:	ldrb	ip, [r2, #6]
   259fc:	cmp	r3, #2
   25a00:	ldrb	r2, [r4, #52]	; 0x34
   25a04:	ubfx	ip, ip, #4, #1
   25a08:	ubfx	r0, r2, #5, #1
   25a0c:	orr	r0, r0, ip
   25a10:	bfi	r2, r0, #5, #1
   25a14:	uxtbeq	r3, r2
   25a18:	orreq	r3, r3, #16
   25a1c:	strb	r2, [r4, #52]	; 0x34
   25a20:	strbeq	r3, [r4, #52]	; 0x34
   25a24:	beq	25a3c <__assert_fail@plt+0x1409c>
   25a28:	cmp	r3, #4
   25a2c:	bne	25a3c <__assert_fail@plt+0x1409c>
   25a30:	ldrb	r3, [r4, #52]	; 0x34
   25a34:	orr	r3, r3, #64	; 0x40
   25a38:	strb	r3, [r4, #52]	; 0x34
   25a3c:	cmp	sl, #0
   25a40:	beq	25adc <__assert_fail@plt+0x1413c>
   25a44:	ldr	r3, [r4, #40]	; 0x28
   25a48:	cmp	fp, r3
   25a4c:	beq	25b7c <__assert_fail@plt+0x141dc>
   25a50:	tst	sl, #1
   25a54:	beq	25b68 <__assert_fail@plt+0x141c8>
   25a58:	cmp	r8, #0
   25a5c:	beq	25a90 <__assert_fail@plt+0x140f0>
   25a60:	tst	sl, #2
   25a64:	bne	25a90 <__assert_fail@plt+0x140f0>
   25a68:	tst	sl, #16
   25a6c:	beq	25a7c <__assert_fail@plt+0x140dc>
   25a70:	ldr	r3, [sp]
   25a74:	cmp	r3, #0
   25a78:	beq	25a90 <__assert_fail@plt+0x140f0>
   25a7c:	tst	sl, #64	; 0x40
   25a80:	beq	25ad8 <__assert_fail@plt+0x14138>
   25a84:	ldr	r3, [sp, #4]
   25a88:	cmp	r3, #0
   25a8c:	bne	25ad8 <__assert_fail@plt+0x14138>
   25a90:	subs	r3, r5, r1
   25a94:	bmi	25ad4 <__assert_fail@plt+0x14134>
   25a98:	ldr	r2, [r4, #8]
   25a9c:	cmp	r3, r2
   25aa0:	bge	25ad4 <__assert_fail@plt+0x14134>
   25aa4:	sub	r2, r2, #1
   25aa8:	cmp	r3, r2
   25aac:	str	r2, [r4, #8]
   25ab0:	bge	25ad4 <__assert_fail@plt+0x14134>
   25ab4:	ldr	r2, [r4, #12]
   25ab8:	add	r2, r2, r3, lsl #2
   25abc:	ldr	r0, [r2, #4]
   25ac0:	add	r3, r3, #1
   25ac4:	str	r0, [r2], #4
   25ac8:	ldr	r0, [r4, #8]
   25acc:	cmp	r3, r0
   25ad0:	blt	25abc <__assert_fail@plt+0x1411c>
   25ad4:	add	r1, r1, #1
   25ad8:	ldr	lr, [r6, #4]
   25adc:	add	r5, r5, #1
   25ae0:	cmp	r5, lr
   25ae4:	blt	259d0 <__assert_fail@plt+0x14030>
   25ae8:	mov	r2, r7
   25aec:	mov	r0, r9
   25af0:	mov	r1, r4
   25af4:	bl	1f7ec <__assert_fail@plt+0xde4c>
   25af8:	cmp	r0, #0
   25afc:	bne	25c04 <__assert_fail@plt+0x14264>
   25b00:	mov	r0, r4
   25b04:	add	sp, sp, #20
   25b08:	ldrd	r4, [sp]
   25b0c:	ldrd	r6, [sp, #8]
   25b10:	ldrd	r8, [sp, #16]
   25b14:	ldrd	sl, [sp, #24]
   25b18:	add	sp, sp, #32
   25b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   25b20:	ldr	r9, [r2, #8]
   25b24:	ldr	sl, [fp, #8]
   25b28:	ldr	r9, [r9, r5, lsl #2]
   25b2c:	ldr	sl, [sl, r5, lsl #2]
   25b30:	cmp	sl, r9
   25b34:	bne	258e0 <__assert_fail@plt+0x13f40>
   25b38:	subs	r5, r5, #1
   25b3c:	bpl	25b20 <__assert_fail@plt+0x14180>
   25b40:	b	25b00 <__assert_fail@plt+0x14160>
   25b44:	mov	r3, #0
   25b48:	str	r3, [r4, #4]
   25b4c:	str	r3, [fp, #4]
   25b50:	str	r3, [fp, #8]
   25b54:	ldrb	r3, [r4, #52]	; 0x34
   25b58:	str	fp, [r4, #40]	; 0x28
   25b5c:	bfi	r3, sl, #0, #4
   25b60:	strb	r3, [r4, #52]	; 0x34
   25b64:	b	25ae8 <__assert_fail@plt+0x14148>
   25b68:	tst	sl, #2
   25b6c:	beq	25a68 <__assert_fail@plt+0x140c8>
   25b70:	cmp	r8, #0
   25b74:	beq	25a68 <__assert_fail@plt+0x140c8>
   25b78:	b	25a90 <__assert_fail@plt+0x140f0>
   25b7c:	mov	r0, #12
   25b80:	bl	1f0c4 <__assert_fail@plt+0xd724>
   25b84:	subs	r3, r0, #0
   25b88:	beq	25c04 <__assert_fail@plt+0x14264>
   25b8c:	ldr	r2, [r6, #4]
   25b90:	str	r3, [r4, #40]	; 0x28
   25b94:	cmp	r2, #0
   25b98:	str	r2, [r3, #4]
   25b9c:	ble	25be4 <__assert_fail@plt+0x14244>
   25ba0:	lsl	r0, r2, #2
   25ba4:	str	r2, [r3]
   25ba8:	str	r3, [sp, #12]
   25bac:	bl	1f0c4 <__assert_fail@plt+0xd724>
   25bb0:	ldr	r3, [sp, #12]
   25bb4:	cmp	r0, #0
   25bb8:	str	r0, [r3, #8]
   25bbc:	beq	25bf8 <__assert_fail@plt+0x14258>
   25bc0:	ldr	r2, [r6, #4]
   25bc4:	ldr	r1, [r6, #8]
   25bc8:	lsl	r2, r2, #2
   25bcc:	bl	115d4 <memcpy@plt>
   25bd0:	ldrb	r3, [r4, #52]	; 0x34
   25bd4:	mov	r1, #0
   25bd8:	orr	r3, r3, #128	; 0x80
   25bdc:	strb	r3, [r4, #52]	; 0x34
   25be0:	b	25a50 <__assert_fail@plt+0x140b0>
   25be4:	mov	r2, #0
   25be8:	str	r2, [r3]
   25bec:	str	r2, [r3, #4]
   25bf0:	str	r2, [r3, #8]
   25bf4:	b	25bd0 <__assert_fail@plt+0x14230>
   25bf8:	mov	r8, r3
   25bfc:	str	r0, [r8]
   25c00:	str	r0, [r8, #4]
   25c04:	ldr	r0, [r4, #24]
   25c08:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25c0c:	ldr	r0, [r4, #36]	; 0x24
   25c10:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25c14:	ldr	r3, [r4, #40]	; 0x28
   25c18:	cmp	fp, r3
   25c1c:	beq	25c30 <__assert_fail@plt+0x14290>
   25c20:	ldr	r0, [r3, #8]
   25c24:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25c28:	ldr	r0, [r4, #40]	; 0x28
   25c2c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25c30:	ldr	r0, [r4, #12]
   25c34:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25c38:	ldr	r0, [r4, #48]	; 0x30
   25c3c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25c40:	ldr	r0, [r4, #44]	; 0x2c
   25c44:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25c48:	mov	r0, r4
   25c4c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25c50:	ldr	r2, [sp, #8]
   25c54:	mov	r3, #12
   25c58:	mov	r4, #0
   25c5c:	str	r3, [r2]
   25c60:	b	25b00 <__assert_fail@plt+0x14160>
   25c64:	mov	r0, r4
   25c68:	str	r3, [r4, #4]
   25c6c:	str	r3, [r4, #8]
   25c70:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   25c74:	b	25c50 <__assert_fail@plt+0x142b0>
   25c78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25c7c:	mov	ip, r1
   25c80:	strd	r6, [sp, #8]
   25c84:	strd	r8, [sp, #16]
   25c88:	ldr	r8, [r1, #8]
   25c8c:	strd	sl, [sp, #24]
   25c90:	str	lr, [sp, #32]
   25c94:	sub	sp, sp, #14528	; 0x38c0
   25c98:	sub	sp, sp, #60	; 0x3c
   25c9c:	add	r9, sp, #2288	; 0x8f0
   25ca0:	add	r9, r9, #8
   25ca4:	str	r1, [sp, #100]	; 0x64
   25ca8:	mov	r1, #0
   25cac:	cmp	r8, r1
   25cb0:	str	r1, [r9]
   25cb4:	str	r1, [r9, #4]
   25cb8:	str	r1, [r9, #8]
   25cbc:	str	r1, [r9, #12]
   25cc0:	str	r1, [r9, #16]
   25cc4:	str	r1, [r9, #20]
   25cc8:	str	r1, [r9, #24]
   25ccc:	str	r1, [r9, #28]
   25cd0:	str	r1, [ip, #44]	; 0x2c
   25cd4:	str	r1, [ip, #48]	; 0x30
   25cd8:	ble	26c50 <__assert_fail@plt+0x152b0>
   25cdc:	mov	r3, r1
   25ce0:	mov	r2, r1
   25ce4:	str	r1, [sp, #48]	; 0x30
   25ce8:	mov	fp, r0
   25cec:	mov	r6, r8
   25cf0:	str	r1, [sp, #104]	; 0x68
   25cf4:	str	r0, [sp, #116]	; 0x74
   25cf8:	strd	r2, [sp, #128]	; 0x80
   25cfc:	sub	r3, r9, #2080	; 0x820
   25d00:	str	r3, [sp, #124]	; 0x7c
   25d04:	ldr	r3, [sp, #100]	; 0x64
   25d08:	ldr	r1, [sp, #104]	; 0x68
   25d0c:	ldr	r3, [r3, #12]
   25d10:	lsl	r2, r1, #2
   25d14:	str	r2, [sp, #112]	; 0x70
   25d18:	ldr	r2, [sp, #116]	; 0x74
   25d1c:	ldr	r1, [r3, r1, lsl #2]
   25d20:	ldr	r2, [r2]
   25d24:	add	r3, r2, r1, lsl #3
   25d28:	ldrb	r0, [r3, #4]
   25d2c:	str	r3, [sp, #96]	; 0x60
   25d30:	cmp	r0, #1
   25d34:	ldr	r3, [r3, #4]
   25d38:	str	r0, [sp, #52]	; 0x34
   25d3c:	ubfx	r3, r3, #8, #10
   25d40:	beq	2604c <__assert_fail@plt+0x146ac>
   25d44:	cmp	r0, #3
   25d48:	beq	269fc <__assert_fail@plt+0x1505c>
   25d4c:	cmp	r0, #5
   25d50:	beq	26724 <__assert_fail@plt+0x14d84>
   25d54:	cmp	r0, #7
   25d58:	beq	26938 <__assert_fail@plt+0x14f98>
   25d5c:	ldr	r3, [sp, #104]	; 0x68
   25d60:	add	r3, r3, #1
   25d64:	cmp	r3, r6
   25d68:	str	r3, [sp, #104]	; 0x68
   25d6c:	blt	25d04 <__assert_fail@plt+0x14364>
   25d70:	ldr	r3, [sp, #48]	; 0x30
   25d74:	ldr	fp, [sp, #116]	; 0x74
   25d78:	cmp	r3, #0
   25d7c:	ble	26c4c <__assert_fail@plt+0x152ac>
   25d80:	add	r3, r3, #1
   25d84:	mov	r5, #0
   25d88:	lsl	r0, r3, #2
   25d8c:	str	r3, [r9, #-2156]	; 0xfffff794
   25d90:	str	r5, [r9, #-2152]	; 0xfffff798
   25d94:	bl	1f0c4 <__assert_fail@plt+0xd724>
   25d98:	cmp	r0, r5
   25d9c:	str	r0, [r9, #-2148]	; 0xfffff79c
   25da0:	beq	26bfc <__assert_fail@plt+0x1525c>
   25da4:	mov	r3, #0
   25da8:	mov	r2, #0
   25dac:	str	r5, [r9, #-2160]	; 0xfffff790
   25db0:	add	r1, sp, #3312	; 0xcf0
   25db4:	mov	sl, r5
   25db8:	str	r5, [sp]
   25dbc:	add	r1, r1, #8
   25dc0:	mov	r8, r5
   25dc4:	str	r5, [sp, #8]
   25dc8:	strd	r2, [sp, #152]	; 0x98
   25dcc:	mov	r4, r1
   25dd0:	strd	r2, [sp, #160]	; 0xa0
   25dd4:	strd	r2, [sp, #168]	; 0xa8
   25dd8:	strd	r2, [sp, #176]	; 0xb0
   25ddc:	add	r3, sp, #136	; 0x88
   25de0:	str	r5, [sp, #12]
   25de4:	str	r5, [sp, #16]
   25de8:	str	r3, [sp, #40]	; 0x28
   25dec:	add	r3, sp, #6336	; 0x18c0
   25df0:	add	r3, r3, #56	; 0x38
   25df4:	str	r5, [sp, #24]
   25df8:	mov	r6, r3
   25dfc:	str	r5, [sp, #32]
   25e00:	str	r5, [sp, #52]	; 0x34
   25e04:	str	r3, [sp, #56]	; 0x38
   25e08:	str	r1, [sp, #60]	; 0x3c
   25e0c:	str	r1, [sp, #108]	; 0x6c
   25e10:	ldr	ip, [r4, #4]
   25e14:	mov	r3, #0
   25e18:	str	r3, [r9, #-2152]	; 0xfffff798
   25e1c:	cmp	ip, r3
   25e20:	movgt	r7, #0
   25e24:	ble	25e70 <__assert_fail@plt+0x144d0>
   25e28:	ldr	r2, [r4, #8]
   25e2c:	add	r0, sp, #140	; 0x8c
   25e30:	ldr	r3, [fp, #12]
   25e34:	ldr	r2, [r2, r7, lsl #2]
   25e38:	add	r7, r7, #1
   25e3c:	ldr	r3, [r3, r2, lsl #2]
   25e40:	cmn	r3, #1
   25e44:	add	r2, r3, r3, lsl #1
   25e48:	beq	25e68 <__assert_fail@plt+0x144c8>
   25e4c:	ldr	r1, [fp, #24]
   25e50:	add	r1, r1, r2, lsl #2
   25e54:	bl	20844 <__assert_fail@plt+0xeea4>
   25e58:	cmp	r0, #0
   25e5c:	str	r0, [r9, #-2160]	; 0xfffff790
   25e60:	bne	26b18 <__assert_fail@plt+0x15178>
   25e64:	ldr	ip, [r4, #4]
   25e68:	cmp	r7, ip
   25e6c:	blt	25e28 <__assert_fail@plt+0x14488>
   25e70:	mov	r3, #0
   25e74:	add	r2, sp, #140	; 0x8c
   25e78:	ldr	r0, [sp, #40]	; 0x28
   25e7c:	mov	r1, fp
   25e80:	bl	25860 <__assert_fail@plt+0x13ec0>
   25e84:	add	r3, sp, #248	; 0xf8
   25e88:	cmp	r0, #0
   25e8c:	mov	r7, r0
   25e90:	str	r0, [r3, r8, lsl #2]
   25e94:	beq	26bec <__assert_fail@plt+0x1524c>
   25e98:	ldrsb	r3, [r7, #52]	; 0x34
   25e9c:	cmp	r3, #0
   25ea0:	blt	26b48 <__assert_fail@plt+0x151a8>
   25ea4:	add	r3, sp, #1264	; 0x4f0
   25ea8:	str	r7, [r9, r8, lsl #2]
   25eac:	add	r3, r3, #8
   25eb0:	str	r7, [r3, r8, lsl #2]
   25eb4:	add	r8, r8, #1
   25eb8:	ldr	r0, [sp]
   25ebc:	add	r4, r4, #12
   25ec0:	add	r6, r6, #32
   25ec4:	ldr	r3, [sp, #48]	; 0x30
   25ec8:	ldr	r2, [r6, #-32]	; 0xffffffe0
   25ecc:	ldr	r1, [r6, #-24]	; 0xffffffe8
   25ed0:	cmp	r8, r3
   25ed4:	ldr	r3, [r6, #-28]	; 0xffffffe4
   25ed8:	orr	sl, sl, r2
   25edc:	ldr	r2, [r6, #-20]	; 0xffffffec
   25ee0:	str	sl, [r9, #-2144]	; 0xfffff7a0
   25ee4:	ldr	ip, [sp, #8]
   25ee8:	orr	r0, r0, r3
   25eec:	ldr	r3, [r6, #-16]
   25ef0:	str	r0, [r9, #-2140]	; 0xfffff7a4
   25ef4:	str	r0, [sp]
   25ef8:	ldr	r0, [sp, #12]
   25efc:	orr	ip, ip, r1
   25f00:	str	ip, [r9, #-2136]	; 0xfffff7a8
   25f04:	str	ip, [sp, #8]
   25f08:	ldr	r1, [r6, #-12]
   25f0c:	orr	r0, r0, r2
   25f10:	ldr	ip, [sp, #16]
   25f14:	str	r0, [r9, #-2132]	; 0xfffff7ac
   25f18:	str	r0, [sp, #12]
   25f1c:	ldr	r0, [sp, #24]
   25f20:	orr	ip, ip, r3
   25f24:	ldrd	r2, [r6, #-8]
   25f28:	str	ip, [r9, #-2128]	; 0xfffff7b0
   25f2c:	orr	r1, r0, r1
   25f30:	ldr	r0, [sp, #32]
   25f34:	str	ip, [sp, #16]
   25f38:	orr	r5, r5, r3
   25f3c:	str	r1, [r9, #-2124]	; 0xfffff7b4
   25f40:	str	r1, [sp, #24]
   25f44:	str	r5, [r9, #-2116]	; 0xfffff7bc
   25f48:	orr	r2, r0, r2
   25f4c:	str	r2, [r9, #-2120]	; 0xfffff7b8
   25f50:	str	r2, [sp, #32]
   25f54:	bne	25e10 <__assert_fail@plt+0x14470>
   25f58:	ldr	r3, [sp, #52]	; 0x34
   25f5c:	cmp	r3, #0
   25f60:	bne	26c94 <__assert_fail@plt+0x152f4>
   25f64:	mov	r1, #256	; 0x100
   25f68:	mov	r0, #4
   25f6c:	bl	1ecd8 <__assert_fail@plt+0xd338>
   25f70:	ldr	r3, [sp, #100]	; 0x64
   25f74:	cmp	r0, #0
   25f78:	mov	r7, r0
   25f7c:	str	r0, [r3, #44]	; 0x2c
   25f80:	beq	26b18 <__assert_fail@plt+0x15178>
   25f84:	ldr	lr, [sp, #56]	; 0x38
   25f88:	add	ip, sp, #148	; 0x94
   25f8c:	add	r5, fp, #96	; 0x60
   25f90:	mov	r4, r0
   25f94:	add	r6, r0, #1024	; 0x400
   25f98:	ldr	r3, [ip, #4]!
   25f9c:	cmp	r3, #0
   25fa0:	movne	r0, r4
   25fa4:	movne	r1, #1
   25fa8:	beq	25fc4 <__assert_fail@plt+0x14624>
   25fac:	tst	r3, #1
   25fb0:	bne	26c14 <__assert_fail@plt+0x15274>
   25fb4:	lsrs	r3, r3, #1
   25fb8:	add	r0, r0, #4
   25fbc:	lsl	r1, r1, #1
   25fc0:	bne	25fac <__assert_fail@plt+0x1460c>
   25fc4:	add	r4, r4, #128	; 0x80
   25fc8:	add	r5, r5, #4
   25fcc:	cmp	r6, r4
   25fd0:	add	lr, lr, #4
   25fd4:	bne	25f98 <__assert_fail@plt+0x145f8>
   25fd8:	ubfx	r3, sl, #10, #1
   25fdc:	cmp	r3, #0
   25fe0:	beq	26014 <__assert_fail@plt+0x14674>
   25fe4:	ldr	ip, [sp, #48]	; 0x30
   25fe8:	add	r2, sp, #6336	; 0x18c0
   25fec:	add	r1, r3, #1
   25ff0:	add	r2, r2, #56	; 0x38
   25ff4:	sub	r0, r3, #1
   25ff8:	add	r2, r2, r3, lsl #5
   25ffc:	ldr	r2, [r2, #-32]	; 0xffffffe0
   26000:	tst	r2, #1024	; 0x400
   26004:	bne	26c7c <__assert_fail@plt+0x152dc>
   26008:	cmp	ip, r3
   2600c:	mov	r3, r1
   26010:	bne	25fe8 <__assert_fail@plt+0x14648>
   26014:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   26018:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2601c:	ldr	r3, [sp, #48]	; 0x30
   26020:	ldr	r5, [sp, #60]	; 0x3c
   26024:	add	r1, r3, r3, lsl #1
   26028:	ldr	r3, [sp, #108]	; 0x6c
   2602c:	add	r4, r3, r1, lsl #2
   26030:	add	r5, r5, #12
   26034:	ldr	r0, [r5, #-4]
   26038:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2603c:	cmp	r4, r5
   26040:	bne	26030 <__assert_fail@plt+0x14690>
   26044:	mov	r0, #1
   26048:	b	2686c <__assert_fail@plt+0x14ecc>
   2604c:	ldrb	r2, [r2, r1, lsl #3]
   26050:	mov	ip, r0
   26054:	asr	r1, r2, #5
   26058:	and	r2, r2, #31
   2605c:	ldr	r0, [r9, r1, lsl #2]
   26060:	orr	r2, r0, ip, lsl r2
   26064:	str	r2, [r9, r1, lsl #2]
   26068:	cmp	r3, #0
   2606c:	beq	2632c <__assert_fail@plt+0x1498c>
   26070:	tst	r3, #32
   26074:	bne	267d4 <__assert_fail@plt+0x14e34>
   26078:	tst	r3, #128	; 0x80
   2607c:	bne	26814 <__assert_fail@plt+0x14e74>
   26080:	tst	r3, #4
   26084:	beq	261ec <__assert_fail@plt+0x1484c>
   26088:	ldr	r2, [sp, #52]	; 0x34
   2608c:	cmp	r2, #1
   26090:	beq	26af8 <__assert_fail@plt+0x15158>
   26094:	ldr	r1, [sp, #116]	; 0x74
   26098:	ldrd	r4, [r9]
   2609c:	ldr	lr, [r9, #16]
   260a0:	ldr	r2, [r1, #92]	; 0x5c
   260a4:	ldr	r0, [r9, #24]
   260a8:	ldr	ip, [r9, #28]
   260ac:	cmp	r2, #1
   260b0:	ldr	r2, [r9, #8]
   260b4:	str	lr, [sp, #56]	; 0x38
   260b8:	ldr	sl, [r9, #12]
   260bc:	str	r2, [sp]
   260c0:	ldr	r2, [r9, #20]
   260c4:	str	r0, [sp, #16]
   260c8:	str	ip, [sp, #32]
   260cc:	str	r2, [sp, #12]
   260d0:	mov	r2, r1
   260d4:	ldr	r1, [r1, #96]	; 0x60
   260d8:	ldr	r7, [r2, #120]	; 0x78
   260dc:	ldr	r8, [r2, #108]	; 0x6c
   260e0:	ldr	ip, [r2, #100]	; 0x64
   260e4:	ldr	r0, [r2, #104]	; 0x68
   260e8:	str	r7, [sp, #24]
   260ec:	str	r8, [sp, #8]
   260f0:	ldr	r7, [r2, #124]	; 0x7c
   260f4:	ldr	r8, [r2, #112]	; 0x70
   260f8:	ldr	fp, [r2, #116]	; 0x74
   260fc:	str	r7, [sp, #40]	; 0x28
   26100:	ble	26984 <__assert_fail@plt+0x14fe4>
   26104:	ldr	r2, [sp, #116]	; 0x74
   26108:	ldr	lr, [r2, #60]	; 0x3c
   2610c:	ldr	r2, [lr]
   26110:	mvn	r2, r2
   26114:	orr	r2, r2, r1
   26118:	ldr	r1, [lr, #4]
   2611c:	and	r2, r2, r4
   26120:	str	r2, [r9]
   26124:	mvn	r1, r1
   26128:	orr	r1, r1, ip
   2612c:	ldr	ip, [lr, #8]
   26130:	and	r1, r1, r5
   26134:	orr	r2, r2, r1
   26138:	mvn	r4, ip
   2613c:	ldr	ip, [lr, #20]
   26140:	orr	r4, r4, r0
   26144:	ldr	r0, [lr, #12]
   26148:	mvn	ip, ip
   2614c:	orr	ip, ip, fp
   26150:	mvn	r5, r0
   26154:	ldr	r0, [sp]
   26158:	and	r4, r4, r0
   2615c:	ldr	r0, [lr, #24]
   26160:	orr	r2, r2, r4
   26164:	stmib	r9, {r1, r4}
   26168:	ldr	r1, [sp, #8]
   2616c:	ldr	r4, [sp, #56]	; 0x38
   26170:	mvn	r0, r0
   26174:	orr	r5, r5, r1
   26178:	ldr	r1, [lr, #16]
   2617c:	and	r5, r5, sl
   26180:	orr	r2, r2, r5
   26184:	ldr	lr, [lr, #28]
   26188:	str	r5, [r9, #12]
   2618c:	mvn	r1, r1
   26190:	orr	r1, r1, r8
   26194:	and	r1, r1, r4
   26198:	ldr	r4, [sp, #12]
   2619c:	mvn	lr, lr
   261a0:	orr	r2, r2, r1
   261a4:	str	r1, [r9, #16]
   261a8:	ldr	r1, [sp, #24]
   261ac:	and	ip, ip, r4
   261b0:	orr	r2, r2, ip
   261b4:	str	ip, [r9, #20]
   261b8:	orr	r0, r0, r1
   261bc:	ldr	r1, [sp, #16]
   261c0:	and	r0, r0, r1
   261c4:	ldr	r1, [sp, #40]	; 0x28
   261c8:	orr	ip, r2, r0
   261cc:	ldr	r2, [sp, #32]
   261d0:	str	r0, [r9, #24]
   261d4:	orr	lr, lr, r1
   261d8:	and	lr, lr, r2
   261dc:	orr	ip, ip, lr
   261e0:	str	lr, [r9, #28]
   261e4:	cmp	ip, #0
   261e8:	beq	25d5c <__assert_fail@plt+0x143bc>
   261ec:	tst	r3, #8
   261f0:	beq	2632c <__assert_fail@plt+0x1498c>
   261f4:	ldr	r3, [sp, #52]	; 0x34
   261f8:	cmp	r3, #1
   261fc:	beq	26ae4 <__assert_fail@plt+0x15144>
   26200:	ldr	r2, [sp, #116]	; 0x74
   26204:	ldr	r5, [r9]
   26208:	ldr	r1, [r9, #24]
   2620c:	add	r7, r2, #112	; 0x70
   26210:	ldr	r3, [r2, #92]	; 0x5c
   26214:	ldm	r7, {r7, sl, lr}
   26218:	str	r1, [sp, #12]
   2621c:	cmp	r3, #1
   26220:	ldr	ip, [r9, #28]
   26224:	ldr	r3, [r9, #8]
   26228:	ldr	r0, [r2, #100]	; 0x64
   2622c:	str	lr, [sp, #32]
   26230:	ldr	r1, [r2, #104]	; 0x68
   26234:	str	r3, [sp]
   26238:	str	ip, [sp, #16]
   2623c:	ldr	r3, [r9, #20]
   26240:	ldr	ip, [r2, #96]	; 0x60
   26244:	ldr	r4, [r9, #4]
   26248:	str	r3, [sp, #8]
   2624c:	ldr	r3, [r2, #108]	; 0x6c
   26250:	ldr	r2, [r2, #124]	; 0x7c
   26254:	ldr	r8, [r9, #12]
   26258:	ldr	fp, [r9, #16]
   2625c:	str	r2, [sp, #24]
   26260:	ble	26a78 <__assert_fail@plt+0x150d8>
   26264:	ldr	r2, [sp, #116]	; 0x74
   26268:	ldr	r2, [r2, #60]	; 0x3c
   2626c:	ldr	lr, [r2]
   26270:	and	ip, ip, lr
   26274:	ldr	lr, [r2, #4]
   26278:	bic	ip, r5, ip
   2627c:	str	ip, [r9]
   26280:	and	r0, r0, lr
   26284:	ldr	lr, [r2, #16]
   26288:	bic	r4, r4, r0
   2628c:	ldr	r0, [r2, #8]
   26290:	orr	r5, ip, r4
   26294:	str	r4, [r9, #4]
   26298:	ldr	ip, [sp]
   2629c:	and	r7, r7, lr
   262a0:	bic	r7, fp, r7
   262a4:	and	r1, r1, r0
   262a8:	ldr	r0, [r2, #20]
   262ac:	str	r7, [r9, #16]
   262b0:	bic	r1, ip, r1
   262b4:	ldr	ip, [r2, #12]
   262b8:	orr	r5, r5, r1
   262bc:	str	r1, [r9, #8]
   262c0:	and	r0, r0, sl
   262c4:	and	r3, r3, ip
   262c8:	ldr	ip, [r2, #24]
   262cc:	bic	r3, r8, r3
   262d0:	orr	r5, r5, r3
   262d4:	ldr	r2, [r2, #28]
   262d8:	str	r3, [r9, #12]
   262dc:	orr	r5, r5, r7
   262e0:	ldr	r3, [sp, #8]
   262e4:	bic	r0, r3, r0
   262e8:	ldr	r3, [sp, #32]
   262ec:	orr	r5, r5, r0
   262f0:	str	r0, [r9, #20]
   262f4:	and	r3, r3, ip
   262f8:	mov	ip, r3
   262fc:	ldr	r3, [sp, #12]
   26300:	bic	ip, r3, ip
   26304:	ldr	r3, [sp, #24]
   26308:	orr	r5, r5, ip
   2630c:	str	ip, [r9, #24]
   26310:	and	r3, r3, r2
   26314:	ldr	r2, [sp, #16]
   26318:	bic	r3, r2, r3
   2631c:	orr	r2, r5, r3
   26320:	str	r3, [r9, #28]
   26324:	cmp	r2, #0
   26328:	beq	25d5c <__assert_fail@plt+0x143bc>
   2632c:	ldr	r3, [sp, #48]	; 0x30
   26330:	cmp	r3, #0
   26334:	movle	fp, #0
   26338:	ble	266f0 <__assert_fail@plt+0x14d50>
   2633c:	add	r3, sp, #3312	; 0xcf0
   26340:	mov	fp, #0
   26344:	add	r3, r3, #8
   26348:	add	r4, sp, #6336	; 0x18c0
   2634c:	add	r4, r4, #56	; 0x38
   26350:	str	fp, [sp]
   26354:	mov	r6, r4
   26358:	str	r3, [sp, #8]
   2635c:	str	r3, [sp, #108]	; 0x6c
   26360:	b	263c0 <__assert_fail@plt+0x14a20>
   26364:	ldr	r3, [sp, #96]	; 0x60
   26368:	add	r0, sp, #14528	; 0x38c0
   2636c:	add	r0, r0, #56	; 0x38
   26370:	ldrb	r2, [r3]
   26374:	asr	r3, r2, #5
   26378:	and	r2, r2, #31
   2637c:	add	r3, r0, r3, lsl #2
   26380:	add	r3, r3, r1
   26384:	sub	r3, r3, #8192	; 0x2000
   26388:	ldr	r3, [r3]
   2638c:	lsr	r2, r3, r2
   26390:	tst	r2, #1
   26394:	bne	263d4 <__assert_fail@plt+0x14a34>
   26398:	ldr	r3, [sp]
   2639c:	add	r6, r6, #32
   263a0:	add	r2, r3, #1
   263a4:	ldr	r3, [sp, #48]	; 0x30
   263a8:	str	r2, [sp]
   263ac:	cmp	r2, r3
   263b0:	ldr	r3, [sp, #8]
   263b4:	add	r3, r3, #12
   263b8:	str	r3, [sp, #8]
   263bc:	bge	2688c <__assert_fail@plt+0x14eec>
   263c0:	ldr	r3, [sp, #52]	; 0x34
   263c4:	cmp	r3, #1
   263c8:	ldr	r3, [sp]
   263cc:	lsl	r1, r3, #5
   263d0:	beq	26364 <__assert_fail@plt+0x149c4>
   263d4:	ldr	fp, [r6]
   263d8:	ldm	r9, {r2, r4, lr}
   263dc:	ldr	sl, [r6, #4]
   263e0:	and	r3, r2, fp
   263e4:	str	fp, [sp, #56]	; 0x38
   263e8:	ldr	r8, [r6, #8]
   263ec:	str	r3, [sp, #64]	; 0x40
   263f0:	ldr	r7, [r6, #12]
   263f4:	and	r1, r4, sl
   263f8:	orr	r3, r3, r1
   263fc:	ldr	ip, [r9, #12]
   26400:	and	r0, lr, r8
   26404:	str	r1, [sp, #68]	; 0x44
   26408:	mov	r5, r0
   2640c:	ldr	r1, [r6, #16]
   26410:	orr	r3, r3, r5
   26414:	ldr	r0, [r9, #16]
   26418:	and	fp, ip, r7
   2641c:	orr	r3, r3, fp
   26420:	str	r5, [sp, #72]	; 0x48
   26424:	ldr	r5, [r9, #20]
   26428:	str	fp, [sp, #76]	; 0x4c
   2642c:	ldr	fp, [r9, #24]
   26430:	str	r5, [sp, #12]
   26434:	ldr	r5, [r6, #20]
   26438:	str	r1, [sp, #60]	; 0x3c
   2643c:	str	r5, [sp, #16]
   26440:	and	r5, r0, r1
   26444:	orr	r3, r3, r5
   26448:	ldr	r1, [sp, #12]
   2644c:	str	fp, [sp, #24]
   26450:	str	r5, [sp, #80]	; 0x50
   26454:	ldr	r5, [sp, #16]
   26458:	ldr	fp, [r6, #24]
   2645c:	and	r1, r1, r5
   26460:	ldr	r5, [r9, #28]
   26464:	orr	r3, r3, r1
   26468:	str	fp, [sp, #32]
   2646c:	ldr	fp, [sp, #24]
   26470:	str	r5, [sp, #40]	; 0x28
   26474:	str	r1, [sp, #84]	; 0x54
   26478:	ldr	r1, [r6, #28]
   2647c:	ldr	r5, [sp, #32]
   26480:	and	fp, fp, r5
   26484:	ldr	r5, [sp, #40]	; 0x28
   26488:	orr	r3, r3, fp
   2648c:	str	fp, [sp, #88]	; 0x58
   26490:	and	r5, r5, r1
   26494:	orrs	r3, r3, r5
   26498:	str	r5, [sp, #92]	; 0x5c
   2649c:	beq	26398 <__assert_fail@plt+0x149f8>
   264a0:	ldr	fp, [sp, #56]	; 0x38
   264a4:	bic	r5, sl, r4
   264a8:	bic	r4, r4, sl
   264ac:	str	r5, [sp, #120]	; 0x78
   264b0:	bic	r3, fp, r2
   264b4:	bic	r2, r2, fp
   264b8:	ldr	fp, [sp, #32]
   264bc:	mov	sl, r3
   264c0:	str	r3, [sp, #56]	; 0x38
   264c4:	orr	r3, sl, r5
   264c8:	bic	sl, r8, lr
   264cc:	bic	lr, lr, r8
   264d0:	stm	r9, {r2, r4}
   264d4:	orr	r2, r2, r4
   264d8:	orr	r2, r2, lr
   264dc:	bic	r8, r7, ip
   264e0:	ldr	r5, [sp, #16]
   264e4:	str	lr, [r9, #8]
   264e8:	bic	ip, ip, r7
   264ec:	orr	r3, r3, sl
   264f0:	ldr	lr, [sp, #60]	; 0x3c
   264f4:	orr	r2, r2, ip
   264f8:	orr	r3, r3, r8
   264fc:	str	ip, [r9, #12]
   26500:	ldr	ip, [sp, #24]
   26504:	bic	r7, lr, r0
   26508:	bic	r0, r0, lr
   2650c:	ldr	lr, [sp, #12]
   26510:	orr	r2, r2, r0
   26514:	orr	r3, r3, r7
   26518:	str	r0, [r9, #16]
   2651c:	bic	r0, ip, fp
   26520:	bic	r4, r5, lr
   26524:	bic	r5, lr, r5
   26528:	bic	lr, fp, ip
   2652c:	ldr	fp, [sp, #40]	; 0x28
   26530:	orr	r3, r3, r4
   26534:	orr	r2, r2, r5
   26538:	orr	r3, r3, lr
   2653c:	str	r5, [r9, #20]
   26540:	orr	r2, r2, r0
   26544:	bic	ip, r1, fp
   26548:	bic	r1, fp, r1
   2654c:	orrs	r3, r3, ip
   26550:	orr	r5, r2, r1
   26554:	strd	r0, [r9, #24]
   26558:	beq	266c4 <__assert_fail@plt+0x14d24>
   2655c:	ldr	r2, [sp, #48]	; 0x30
   26560:	str	sl, [r9, #-2072]	; 0xfffff7e8
   26564:	ldr	r3, [sp, #64]	; 0x40
   26568:	str	ip, [r9, #-2052]	; 0xfffff7fc
   2656c:	ldr	r1, [sp, #68]	; 0x44
   26570:	ldr	r0, [sp, #72]	; 0x48
   26574:	str	r3, [r9, #-2112]	; 0xfffff7c0
   26578:	ldr	fp, [sp, #76]	; 0x4c
   2657c:	str	r1, [r9, #-2108]	; 0xfffff7c4
   26580:	lsl	r1, r2, #1
   26584:	ldr	ip, [sp, #124]	; 0x7c
   26588:	str	r0, [r9, #-2104]	; 0xfffff7c8
   2658c:	add	r0, sp, #14528	; 0x38c0
   26590:	add	r0, r0, #56	; 0x38
   26594:	str	r1, [sp, #60]	; 0x3c
   26598:	add	r3, r0, r2, lsl #5
   2659c:	add	r2, r1, r2
   265a0:	ldr	r1, [sp, #80]	; 0x50
   265a4:	str	fp, [r9, #-2100]	; 0xfffff7cc
   265a8:	ldr	fp, [sp, #88]	; 0x58
   265ac:	sub	r3, r3, #8192	; 0x2000
   265b0:	ldr	r0, [sp, #108]	; 0x6c
   265b4:	str	r1, [r9, #-2096]	; 0xfffff7d0
   265b8:	ldr	r1, [sp, #84]	; 0x54
   265bc:	str	r8, [r9, #-2068]	; 0xfffff7ec
   265c0:	add	r0, r0, r2, lsl #2
   265c4:	str	r1, [r9, #-2092]	; 0xfffff7d4
   265c8:	ldr	r1, [sp, #92]	; 0x5c
   265cc:	str	r7, [r9, #-2064]	; 0xfffff7f0
   265d0:	str	r4, [r9, #-2060]	; 0xfffff7f4
   265d4:	str	lr, [r9, #-2056]	; 0xfffff7f8
   265d8:	str	r0, [sp, #12]
   265dc:	str	fp, [r9, #-2088]	; 0xfffff7d8
   265e0:	str	r1, [r9, #-2084]	; 0xfffff7dc
   265e4:	ldr	r1, [sp, #56]	; 0x38
   265e8:	str	r1, [r9, #-2080]	; 0xfffff7e0
   265ec:	ldr	r1, [sp, #120]	; 0x78
   265f0:	str	r1, [r9, #-2076]	; 0xfffff7e4
   265f4:	ldrd	r0, [ip]
   265f8:	ldrd	sl, [sp, #184]	; 0xb8
   265fc:	ldr	r4, [sp, #12]
   26600:	strd	r0, [r3]
   26604:	ldrd	r0, [sp, #192]	; 0xc0
   26608:	strd	sl, [sp, #24]
   2660c:	ldrd	sl, [ip, #8]
   26610:	strd	r0, [sp, #32]
   26614:	ldrd	r0, [ip, #16]
   26618:	strd	r0, [sp, #16]
   2661c:	mov	r0, sl
   26620:	mov	r1, fp
   26624:	ldrd	sl, [sp, #200]	; 0xc8
   26628:	strd	r0, [r3, #8]
   2662c:	ldrd	r0, [sp, #16]
   26630:	strd	sl, [sp, #40]	; 0x28
   26634:	ldrd	sl, [ip, #24]
   26638:	strd	r0, [r3, #16]
   2663c:	ldrd	r0, [sp, #208]	; 0xd0
   26640:	strd	r0, [sp, #16]
   26644:	mov	r0, sl
   26648:	mov	r1, fp
   2664c:	ldrd	sl, [sp, #24]
   26650:	strd	r0, [r3, #24]
   26654:	ldr	r3, [sp, #8]
   26658:	ldrd	r0, [sp, #32]
   2665c:	strd	sl, [r6]
   26660:	ldrd	sl, [sp, #40]	; 0x28
   26664:	ldr	r3, [r3, #4]
   26668:	strd	r0, [r6, #8]
   2666c:	ldrd	r0, [sp, #16]
   26670:	strd	sl, [r6, #16]
   26674:	cmp	r3, #0
   26678:	str	r3, [r4, #4]
   2667c:	strd	r0, [r6, #24]
   26680:	ble	26708 <__assert_fail@plt+0x14d68>
   26684:	ldr	r1, [sp, #108]	; 0x6c
   26688:	lsl	r0, r3, #2
   2668c:	str	r3, [r1, r2, lsl #2]
   26690:	bl	1f0c4 <__assert_fail@plt+0xd724>
   26694:	cmp	r0, #0
   26698:	str	r0, [r4, #8]
   2669c:	ldr	r1, [sp, #60]	; 0x3c
   266a0:	beq	26bbc <__assert_fail@plt+0x1521c>
   266a4:	ldr	r3, [sp, #8]
   266a8:	ldr	r2, [r3, #4]
   266ac:	ldr	r1, [r3, #8]
   266b0:	lsl	r2, r2, #2
   266b4:	bl	115d4 <memcpy@plt>
   266b8:	ldr	r3, [sp, #48]	; 0x30
   266bc:	add	r3, r3, #1
   266c0:	str	r3, [sp, #48]	; 0x30
   266c4:	ldr	r0, [sp, #8]
   266c8:	ldr	r3, [sp, #100]	; 0x64
   266cc:	ldr	r2, [sp, #112]	; 0x70
   266d0:	ldr	r3, [r3, #12]
   266d4:	ldr	r1, [r3, r2]
   266d8:	bl	20448 <__assert_fail@plt+0xeaa8>
   266dc:	cmp	r0, #0
   266e0:	beq	26834 <__assert_fail@plt+0x14e94>
   266e4:	cmp	r5, #0
   266e8:	bne	26398 <__assert_fail@plt+0x149f8>
   266ec:	ldr	fp, [sp]
   266f0:	ldr	r3, [sp, #48]	; 0x30
   266f4:	cmp	fp, r3
   266f8:	beq	2689c <__assert_fail@plt+0x14efc>
   266fc:	ldr	r3, [sp, #100]	; 0x64
   26700:	ldr	r6, [r3, #8]
   26704:	b	25d5c <__assert_fail@plt+0x143bc>
   26708:	ldr	r1, [sp, #108]	; 0x6c
   2670c:	mov	r3, #0
   26710:	str	r3, [r1, r2, lsl #2]
   26714:	ldr	r2, [sp, #12]
   26718:	str	r3, [r2, #4]
   2671c:	str	r3, [r2, #8]
   26720:	b	266b8 <__assert_fail@plt+0x14d18>
   26724:	ldr	r1, [sp, #116]	; 0x74
   26728:	ldr	r2, [r1, #92]	; 0x5c
   2672c:	cmp	r2, #1
   26730:	ble	26968 <__assert_fail@plt+0x14fc8>
   26734:	ldr	r2, [r1, #60]	; 0x3c
   26738:	ldm	r9, {r1, ip}
   2673c:	ldm	r2, {r0, lr}
   26740:	ldr	r4, [r2, #8]
   26744:	orr	r1, r1, r0
   26748:	orr	ip, ip, lr
   2674c:	ldr	r0, [r9, #8]
   26750:	stm	r9, {r1, ip}
   26754:	ldr	lr, [r2, #12]
   26758:	ldr	r1, [r9, #12]
   2675c:	orr	r0, r0, r4
   26760:	str	r0, [r9, #8]
   26764:	ldr	r4, [r2, #16]
   26768:	orr	r1, r1, lr
   2676c:	ldr	r0, [r9, #16]
   26770:	ldr	ip, [r2, #20]
   26774:	str	r1, [r9, #12]
   26778:	ldr	lr, [r9, #20]
   2677c:	orr	r0, r0, r4
   26780:	ldr	r1, [r2, #24]
   26784:	str	r0, [r9, #16]
   26788:	ldr	r0, [r9, #24]
   2678c:	orr	ip, lr, ip
   26790:	ldr	r2, [r2, #28]
   26794:	str	ip, [r9, #20]
   26798:	ldr	ip, [r9, #28]
   2679c:	orr	r1, r0, r1
   267a0:	str	r1, [r9, #24]
   267a4:	orr	r2, ip, r2
   267a8:	str	r2, [r9, #28]
   267ac:	ldr	r2, [sp, #116]	; 0x74
   267b0:	ldr	r2, [r2, #128]	; 0x80
   267b4:	tst	r2, #64	; 0x40
   267b8:	beq	26958 <__assert_fail@plt+0x14fb8>
   267bc:	tst	r2, #128	; 0x80
   267c0:	beq	26068 <__assert_fail@plt+0x146c8>
   267c4:	ldr	r2, [r9]
   267c8:	bic	r2, r2, #1
   267cc:	str	r2, [r9]
   267d0:	b	26068 <__assert_fail@plt+0x146c8>
   267d4:	ldr	r2, [r9]
   267d8:	ldr	r1, [sp, #128]	; 0x80
   267dc:	ldr	r0, [sp, #132]	; 0x84
   267e0:	tst	r2, #1024	; 0x400
   267e4:	str	r1, [r9]
   267e8:	strd	r0, [r9, #4]
   267ec:	str	r0, [r9, #12]
   267f0:	str	r1, [r9, #16]
   267f4:	str	r0, [r9, #20]
   267f8:	str	r1, [r9, #24]
   267fc:	str	r0, [r9, #28]
   26800:	beq	25d5c <__assert_fail@plt+0x143bc>
   26804:	mov	r2, #1024	; 0x400
   26808:	tst	r3, #128	; 0x80
   2680c:	str	r2, [r9]
   26810:	beq	26080 <__assert_fail@plt+0x146e0>
   26814:	ldr	r3, [sp, #128]	; 0x80
   26818:	ldr	r2, [sp, #132]	; 0x84
   2681c:	str	r3, [r9]
   26820:	strd	r2, [r9, #4]
   26824:	strd	r2, [r9, #12]
   26828:	strd	r2, [r9, #20]
   2682c:	str	r2, [r9, #28]
   26830:	b	25d5c <__assert_fail@plt+0x143bc>
   26834:	ldr	r3, [sp, #48]	; 0x30
   26838:	lsl	r3, r3, #1
   2683c:	mov	r2, r3
   26840:	mov	r3, r2
   26844:	ldr	r2, [sp, #48]	; 0x30
   26848:	ldr	r4, [sp, #108]	; 0x6c
   2684c:	add	r1, r3, r2
   26850:	add	r5, r4, r1, lsl #2
   26854:	add	r4, r4, #12
   26858:	ldr	r0, [r4, #-4]
   2685c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   26860:	cmp	r5, r4
   26864:	bne	26854 <__assert_fail@plt+0x14eb4>
   26868:	mov	r0, #0
   2686c:	add	sp, sp, #14528	; 0x38c0
   26870:	add	sp, sp, #60	; 0x3c
   26874:	ldrd	r4, [sp]
   26878:	ldrd	r6, [sp, #8]
   2687c:	ldrd	r8, [sp, #16]
   26880:	ldrd	sl, [sp, #24]
   26884:	add	sp, sp, #32
   26888:	pop	{pc}		; (ldr pc, [sp], #4)
   2688c:	ldr	r3, [sp, #48]	; 0x30
   26890:	mov	fp, r2
   26894:	cmp	fp, r3
   26898:	bne	266fc <__assert_fail@plt+0x14d5c>
   2689c:	ldr	r2, [sp, #100]	; 0x64
   268a0:	lsl	sl, r3, #1
   268a4:	add	ip, sp, #3312	; 0xcf0
   268a8:	add	ip, ip, #8
   268ac:	ldrd	r6, [r9]
   268b0:	add	r1, sl, r3
   268b4:	add	r5, ip, r1, lsl #2
   268b8:	str	ip, [sp, #108]	; 0x6c
   268bc:	ldr	lr, [sp, #112]	; 0x70
   268c0:	ldr	r0, [r2, #12]
   268c4:	add	r2, sp, #14528	; 0x38c0
   268c8:	add	r2, r2, #56	; 0x38
   268cc:	add	r3, r2, r3, lsl #5
   268d0:	mov	r2, #1
   268d4:	sub	r3, r3, #8192	; 0x2000
   268d8:	ldr	r4, [r0, lr]
   268dc:	mov	r0, #4
   268e0:	strd	r6, [r3]
   268e4:	ldrd	r6, [r9, #16]
   268e8:	str	r2, [ip, r1, lsl #2]
   268ec:	str	r2, [r5, #4]
   268f0:	strd	r6, [sp]
   268f4:	ldrd	r6, [r9, #8]
   268f8:	strd	r6, [r3, #8]
   268fc:	ldrd	r6, [sp]
   26900:	strd	r6, [r3, #16]
   26904:	ldrd	r6, [r9, #24]
   26908:	strd	r6, [r3, #24]
   2690c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   26910:	cmp	r0, #0
   26914:	str	r0, [r5, #8]
   26918:	beq	26bd0 <__assert_fail@plt+0x15230>
   2691c:	ldr	r3, [sp, #100]	; 0x64
   26920:	str	r4, [r0]
   26924:	ldr	r6, [r3, #8]
   26928:	ldr	r3, [sp, #48]	; 0x30
   2692c:	add	r3, r3, #1
   26930:	str	r3, [sp, #48]	; 0x30
   26934:	b	26814 <__assert_fail@plt+0x14e74>
   26938:	ldr	r2, [sp, #116]	; 0x74
   2693c:	mvn	r0, #0
   26940:	mvn	r1, #0
   26944:	strd	r0, [r9]
   26948:	strd	r0, [r9, #8]
   2694c:	ldr	r2, [r2, #128]	; 0x80
   26950:	tst	r2, #64	; 0x40
   26954:	bne	267bc <__assert_fail@plt+0x14e1c>
   26958:	ldr	r1, [r9]
   2695c:	bic	r1, r1, #1024	; 0x400
   26960:	str	r1, [r9]
   26964:	b	267bc <__assert_fail@plt+0x14e1c>
   26968:	mvn	r0, #0
   2696c:	mvn	r1, #0
   26970:	strd	r0, [r9]
   26974:	strd	r0, [r9, #8]
   26978:	strd	r0, [r9, #16]
   2697c:	strd	r0, [r9, #24]
   26980:	b	267ac <__assert_fail@plt+0x14e0c>
   26984:	and	r2, r4, r1
   26988:	ldr	r4, [sp]
   2698c:	and	r1, r5, ip
   26990:	orr	ip, r2, r1
   26994:	and	lr, lr, r8
   26998:	ldr	r5, [sp, #8]
   2699c:	mov	r8, lr
   269a0:	str	r2, [r9]
   269a4:	ldr	r2, [sp, #12]
   269a8:	and	r4, r4, r0
   269ac:	ldr	r0, [sp, #16]
   269b0:	orr	ip, ip, r4
   269b4:	and	r5, r5, sl
   269b8:	ldr	r7, [sp, #24]
   269bc:	orr	ip, ip, r5
   269c0:	and	r2, r2, fp
   269c4:	orr	ip, ip, lr
   269c8:	stmib	r9, {r1, r4, r5, r8}
   269cc:	mov	fp, r2
   269d0:	orr	ip, ip, r2
   269d4:	ldr	r2, [sp, #32]
   269d8:	and	r0, r0, r7
   269dc:	str	fp, [r9, #20]
   269e0:	ldr	r7, [sp, #40]	; 0x28
   269e4:	orr	ip, ip, r0
   269e8:	str	r0, [r9, #24]
   269ec:	and	r2, r2, r7
   269f0:	orr	ip, ip, r2
   269f4:	str	r2, [r9, #28]
   269f8:	b	261e4 <__assert_fail@plt+0x14844>
   269fc:	ldr	r2, [r2, r1, lsl #3]
   26a00:	ldm	r9, {r1, ip}
   26a04:	ldm	r2, {r0, lr}
   26a08:	ldr	r4, [r2, #8]
   26a0c:	orr	r1, r1, r0
   26a10:	orr	ip, ip, lr
   26a14:	ldr	r0, [r9, #8]
   26a18:	stm	r9, {r1, ip}
   26a1c:	ldr	lr, [r2, #12]
   26a20:	ldr	r1, [r9, #12]
   26a24:	orr	r0, r0, r4
   26a28:	str	r0, [r9, #8]
   26a2c:	ldr	r4, [r2, #16]
   26a30:	orr	r1, r1, lr
   26a34:	ldr	r0, [r9, #16]
   26a38:	ldr	ip, [r2, #20]
   26a3c:	str	r1, [r9, #12]
   26a40:	ldr	lr, [r9, #20]
   26a44:	orr	r0, r0, r4
   26a48:	ldr	r1, [r2, #24]
   26a4c:	str	r0, [r9, #16]
   26a50:	ldr	r0, [r9, #24]
   26a54:	orr	ip, lr, ip
   26a58:	ldr	r2, [r2, #28]
   26a5c:	str	ip, [r9, #20]
   26a60:	ldr	ip, [r9, #28]
   26a64:	orr	r1, r0, r1
   26a68:	str	r1, [r9, #24]
   26a6c:	orr	r2, ip, r2
   26a70:	str	r2, [r9, #28]
   26a74:	b	26068 <__assert_fail@plt+0x146c8>
   26a78:	ldr	r2, [sp]
   26a7c:	bic	ip, r5, ip
   26a80:	bic	r0, r4, r0
   26a84:	bic	r3, r8, r3
   26a88:	bic	r7, fp, r7
   26a8c:	str	ip, [r9]
   26a90:	str	r3, [r9, #12]
   26a94:	str	r7, [r9, #16]
   26a98:	bic	r1, r2, r1
   26a9c:	orr	r2, ip, r0
   26aa0:	orr	r2, r2, r1
   26aa4:	strd	r0, [r9, #4]
   26aa8:	orr	r2, r2, r3
   26aac:	ldrd	r0, [sp, #8]
   26ab0:	orr	r2, r2, r7
   26ab4:	ldr	r3, [sp, #16]
   26ab8:	bic	ip, r1, lr
   26abc:	ldr	r1, [sp, #24]
   26ac0:	bic	sl, r0, sl
   26ac4:	orr	r2, r2, sl
   26ac8:	orr	r2, r2, ip
   26acc:	str	sl, [r9, #20]
   26ad0:	str	ip, [r9, #24]
   26ad4:	bic	r3, r3, r1
   26ad8:	orr	r2, r2, r3
   26adc:	str	r3, [r9, #28]
   26ae0:	b	26324 <__assert_fail@plt+0x14984>
   26ae4:	ldr	r3, [sp, #96]	; 0x60
   26ae8:	ldrb	r3, [r3, #6]
   26aec:	tst	r3, #64	; 0x40
   26af0:	beq	26200 <__assert_fail@plt+0x14860>
   26af4:	b	26814 <__assert_fail@plt+0x14e74>
   26af8:	ldr	r2, [sp, #96]	; 0x60
   26afc:	ldrb	r2, [r2, #6]
   26b00:	tst	r2, #64	; 0x40
   26b04:	bne	26094 <__assert_fail@plt+0x146f4>
   26b08:	b	26814 <__assert_fail@plt+0x14e74>
   26b0c:	ldr	r3, [r9, #-2160]	; 0xfffff790
   26b10:	cmp	r3, #0
   26b14:	beq	26b78 <__assert_fail@plt+0x151d8>
   26b18:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   26b1c:	ldr	r4, [sp, #108]	; 0x6c
   26b20:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   26b24:	ldr	r3, [sp, #48]	; 0x30
   26b28:	add	r5, r3, r3, lsl #1
   26b2c:	add	r5, r4, r5, lsl #2
   26b30:	add	r4, r4, #12
   26b34:	ldr	r0, [r4, #-4]
   26b38:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   26b3c:	cmp	r4, r5
   26b40:	bne	26b30 <__assert_fail@plt+0x15190>
   26b44:	b	26868 <__assert_fail@plt+0x14ec8>
   26b48:	mov	r3, #1
   26b4c:	add	r2, sp, #140	; 0x8c
   26b50:	ldr	r0, [sp, #40]	; 0x28
   26b54:	mov	r1, fp
   26b58:	bl	25860 <__assert_fail@plt+0x13ec0>
   26b5c:	add	r3, sp, #1264	; 0x4f0
   26b60:	cmp	r0, #0
   26b64:	add	r3, r3, #8
   26b68:	str	r0, [r3, r8, lsl #2]
   26b6c:	beq	26b0c <__assert_fail@plt+0x1516c>
   26b70:	cmp	r7, r0
   26b74:	beq	26b8c <__assert_fail@plt+0x151ec>
   26b78:	ldr	r3, [fp, #92]	; 0x5c
   26b7c:	cmp	r3, #2
   26b80:	ldr	r3, [sp, #52]	; 0x34
   26b84:	movge	r3, #1
   26b88:	str	r3, [sp, #52]	; 0x34
   26b8c:	mov	r3, #2
   26b90:	add	r2, sp, #140	; 0x8c
   26b94:	ldr	r0, [sp, #40]	; 0x28
   26b98:	mov	r1, fp
   26b9c:	bl	25860 <__assert_fail@plt+0x13ec0>
   26ba0:	cmp	r0, #0
   26ba4:	str	r0, [r9, r8, lsl #2]
   26ba8:	bne	25eb4 <__assert_fail@plt+0x14514>
   26bac:	ldr	r3, [r9, #-2160]	; 0xfffff790
   26bb0:	cmp	r3, #0
   26bb4:	beq	25eb4 <__assert_fail@plt+0x14514>
   26bb8:	b	26b18 <__assert_fail@plt+0x15178>
   26bbc:	mov	r2, r1
   26bc0:	ldr	r1, [sp, #12]
   26bc4:	str	r0, [r1]
   26bc8:	str	r0, [r1, #4]
   26bcc:	b	26840 <__assert_fail@plt+0x14ea0>
   26bd0:	ldr	r3, [sp, #48]	; 0x30
   26bd4:	mov	r2, sl
   26bd8:	str	r0, [r5]
   26bdc:	str	r0, [r5, #4]
   26be0:	cmp	r3, #0
   26be4:	beq	26868 <__assert_fail@plt+0x14ec8>
   26be8:	b	26840 <__assert_fail@plt+0x14ea0>
   26bec:	ldr	r3, [r9, #-2160]	; 0xfffff790
   26bf0:	cmp	r3, #0
   26bf4:	beq	25e98 <__assert_fail@plt+0x144f8>
   26bf8:	b	26b18 <__assert_fail@plt+0x15178>
   26bfc:	add	r2, sp, #3312	; 0xcf0
   26c00:	mov	r3, #12
   26c04:	add	r2, r2, #8
   26c08:	str	r3, [r9, #-2160]	; 0xfffff790
   26c0c:	str	r2, [sp, #108]	; 0x6c
   26c10:	b	26b1c <__assert_fail@plt+0x1517c>
   26c14:	ldr	r2, [lr]
   26c18:	ands	r2, r1, r2
   26c1c:	bne	26c74 <__assert_fail@plt+0x152d4>
   26c20:	add	r2, r2, #1
   26c24:	ldr	r8, [lr, r2, lsl #5]
   26c28:	tst	r1, r8
   26c2c:	beq	26c20 <__assert_fail@plt+0x15280>
   26c30:	ldr	r8, [r5]
   26c34:	add	r2, r9, r2, lsl #2
   26c38:	tst	r1, r8
   26c3c:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   26c40:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   26c44:	str	r2, [r0]
   26c48:	b	25fb4 <__assert_fail@plt+0x14614>
   26c4c:	bne	26868 <__assert_fail@plt+0x14ec8>
   26c50:	mov	r1, #256	; 0x100
   26c54:	mov	r0, #4
   26c58:	bl	1ecd8 <__assert_fail@plt+0xd338>
   26c5c:	ldr	r2, [sp, #100]	; 0x64
   26c60:	mov	r3, r0
   26c64:	adds	r0, r0, #0
   26c68:	movne	r0, #1
   26c6c:	str	r3, [r2, #44]	; 0x2c
   26c70:	b	2686c <__assert_fail@plt+0x14ecc>
   26c74:	mov	r2, #0
   26c78:	b	26c30 <__assert_fail@plt+0x15290>
   26c7c:	ldr	r2, [sp, #52]	; 0x34
   26c80:	ldr	r3, [r9, r0, lsl #2]
   26c84:	cmp	r2, #0
   26c88:	strne	r3, [r7, #1064]	; 0x428
   26c8c:	str	r3, [r7, #40]	; 0x28
   26c90:	b	26014 <__assert_fail@plt+0x14674>
   26c94:	mov	r1, #512	; 0x200
   26c98:	mov	r0, #4
   26c9c:	bl	1ecd8 <__assert_fail@plt+0xd338>
   26ca0:	ldr	r3, [sp, #100]	; 0x64
   26ca4:	cmp	r0, #0
   26ca8:	mov	r7, r0
   26cac:	str	r0, [r3, #48]	; 0x30
   26cb0:	beq	26b18 <__assert_fail@plt+0x15178>
   26cb4:	ldr	ip, [sp, #56]	; 0x38
   26cb8:	add	r4, sp, #148	; 0x94
   26cbc:	mov	lr, r0
   26cc0:	add	r5, r0, #1024	; 0x400
   26cc4:	ldr	r3, [r4, #4]!
   26cc8:	cmp	r3, #0
   26ccc:	movne	r0, lr
   26cd0:	movne	r1, #1
   26cd4:	beq	26cf0 <__assert_fail@plt+0x15350>
   26cd8:	tst	r3, #1
   26cdc:	bne	26d04 <__assert_fail@plt+0x15364>
   26ce0:	lsrs	r3, r3, #1
   26ce4:	add	r0, r0, #4
   26ce8:	lsl	r1, r1, #1
   26cec:	bne	26cd8 <__assert_fail@plt+0x15338>
   26cf0:	add	lr, lr, #128	; 0x80
   26cf4:	add	ip, ip, #4
   26cf8:	cmp	r5, lr
   26cfc:	bne	26cc4 <__assert_fail@plt+0x15324>
   26d00:	b	25fd8 <__assert_fail@plt+0x14638>
   26d04:	ldr	r2, [ip]
   26d08:	ands	r2, r1, r2
   26d0c:	bne	26d38 <__assert_fail@plt+0x15398>
   26d10:	add	r2, r2, #1
   26d14:	ldr	r6, [ip, r2, lsl #5]
   26d18:	tst	r1, r6
   26d1c:	beq	26d10 <__assert_fail@plt+0x15370>
   26d20:	add	r2, r9, r2, lsl #2
   26d24:	ldr	r6, [r2, #-2048]	; 0xfffff800
   26d28:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   26d2c:	str	r6, [r0]
   26d30:	str	r2, [r0, #1024]	; 0x400
   26d34:	b	26ce0 <__assert_fail@plt+0x15340>
   26d38:	mov	r2, #0
   26d3c:	b	26d20 <__assert_fail@plt+0x15380>
   26d40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26d44:	mov	r4, r0
   26d48:	ldr	r0, [r0, #84]	; 0x54
   26d4c:	ldr	r5, [r1, #4]
   26d50:	strd	r6, [sp, #8]
   26d54:	mov	r7, r3
   26d58:	mov	r6, #0
   26d5c:	strd	r8, [sp, #16]
   26d60:	mov	r9, r2
   26d64:	ldr	r3, [r0]
   26d68:	strd	sl, [sp, #24]
   26d6c:	str	lr, [sp, #32]
   26d70:	sub	sp, sp, #76	; 0x4c
   26d74:	ldr	r2, [r4, #120]	; 0x78
   26d78:	str	r0, [sp, #16]
   26d7c:	str	r1, [sp, #28]
   26d80:	ldr	r1, [sp, #116]	; 0x74
   26d84:	ldr	r3, [r3, r9, lsl #3]
   26d88:	add	r2, r1, r2
   26d8c:	cmp	r2, r5
   26d90:	str	r3, [sp, #20]
   26d94:	str	r6, [sp, #40]	; 0x28
   26d98:	bge	27444 <__assert_fail@plt+0x15aa4>
   26d9c:	ldr	r3, [sp, #28]
   26da0:	ldr	r2, [r4, #88]	; 0x58
   26da4:	ldr	r6, [r3]
   26da8:	ldr	r5, [r3, #8]
   26dac:	ldr	r3, [r4, #40]	; 0x28
   26db0:	cmp	r6, #0
   26db4:	str	r3, [sp, #36]	; 0x24
   26db8:	ldr	r3, [r4, #100]	; 0x64
   26dbc:	str	r3, [sp, #32]
   26dc0:	bne	271f0 <__assert_fail@plt+0x15850>
   26dc4:	sub	r1, r7, #1
   26dc8:	mov	r0, r4
   26dcc:	str	r7, [r4, #40]	; 0x28
   26dd0:	str	r5, [r4, #100]	; 0x64
   26dd4:	bl	20a08 <__assert_fail@plt+0xf068>
   26dd8:	mov	r8, r0
   26ddc:	mov	r2, #1
   26de0:	mov	r3, #1
   26de4:	mov	r0, #4
   26de8:	strd	r2, [sp, #48]	; 0x30
   26dec:	bl	1f0c4 <__assert_fail@plt+0xd724>
   26df0:	cmp	r0, #0
   26df4:	str	r0, [sp, #56]	; 0x38
   26df8:	beq	274b4 <__assert_fail@plt+0x15b14>
   26dfc:	mov	ip, #0
   26e00:	add	r5, sp, #48	; 0x30
   26e04:	str	r9, [r0]
   26e08:	mov	r1, r5
   26e0c:	ldr	r0, [sp, #16]
   26e10:	str	ip, [sp, #40]	; 0x28
   26e14:	ldr	r2, [sp, #20]
   26e18:	ldr	r3, [sp, #120]	; 0x78
   26e1c:	bl	24658 <__assert_fail@plt+0x12cb8>
   26e20:	cmp	r0, #0
   26e24:	str	r0, [sp, #40]	; 0x28
   26e28:	bne	27320 <__assert_fail@plt+0x15980>
   26e2c:	ldr	r3, [sp, #52]	; 0x34
   26e30:	mov	r6, r7
   26e34:	cmp	r3, #0
   26e38:	beq	26e64 <__assert_fail@plt+0x154c4>
   26e3c:	mov	r2, r6
   26e40:	mov	r0, r4
   26e44:	ldr	r3, [sp, #20]
   26e48:	ldr	r1, [sp, #120]	; 0x78
   26e4c:	str	r1, [sp]
   26e50:	mov	r1, r5
   26e54:	bl	25334 <__assert_fail@plt+0x13994>
   26e58:	cmp	r0, #0
   26e5c:	str	r0, [sp, #40]	; 0x28
   26e60:	bne	27320 <__assert_fail@plt+0x15980>
   26e64:	mov	r3, r8
   26e68:	mov	r2, r5
   26e6c:	ldr	r1, [sp, #16]
   26e70:	add	r0, sp, #40	; 0x28
   26e74:	bl	25860 <__assert_fail@plt+0x13ec0>
   26e78:	subs	fp, r0, #0
   26e7c:	beq	274bc <__assert_fail@plt+0x15b1c>
   26e80:	ldr	r3, [r4, #100]	; 0x64
   26e84:	str	fp, [r3, r6, lsl #2]
   26e88:	ldr	r3, [sp, #116]	; 0x74
   26e8c:	cmp	r6, r3
   26e90:	bge	27130 <__assert_fail@plt+0x15790>
   26e94:	ldr	r3, [r4, #120]	; 0x78
   26e98:	cmp	r3, #0
   26e9c:	blt	27130 <__assert_fail@plt+0x15790>
   26ea0:	ldr	r3, [r4, #100]	; 0x64
   26ea4:	mov	r2, #0
   26ea8:	add	r9, r6, #1
   26eac:	str	r2, [sp, #8]
   26eb0:	ldr	r1, [r3, r9, lsl #2]
   26eb4:	lsl	r3, r9, #2
   26eb8:	sub	r8, r9, #1
   26ebc:	str	r3, [sp, #12]
   26ec0:	mov	r3, #0
   26ec4:	cmp	r1, r3
   26ec8:	str	r3, [sp, #52]	; 0x34
   26ecc:	beq	272f0 <__assert_fail@plt+0x15950>
   26ed0:	add	r5, sp, #48	; 0x30
   26ed4:	add	r1, r1, #4
   26ed8:	mov	r0, r5
   26edc:	bl	20844 <__assert_fail@plt+0xeea4>
   26ee0:	cmp	r0, #0
   26ee4:	str	r0, [sp, #40]	; 0x28
   26ee8:	bne	27320 <__assert_fail@plt+0x15980>
   26eec:	cmp	fp, #0
   26ef0:	beq	27078 <__assert_fail@plt+0x156d8>
   26ef4:	ldr	r3, [fp, #20]
   26ef8:	mov	r2, #0
   26efc:	str	r2, [sp, #44]	; 0x2c
   26f00:	str	r2, [sp, #60]	; 0x3c
   26f04:	str	r2, [sp, #64]	; 0x40
   26f08:	cmp	r3, r2
   26f0c:	str	r2, [sp, #68]	; 0x44
   26f10:	ldr	r7, [r4, #84]	; 0x54
   26f14:	ble	274ec <__assert_fail@plt+0x15b4c>
   26f18:	str	r9, [sp, #24]
   26f1c:	mov	r9, r2
   26f20:	ldr	r3, [fp, #24]
   26f24:	ldr	r0, [r7]
   26f28:	ldr	r5, [r3]
   26f2c:	lsl	sl, r5, #3
   26f30:	add	r1, r0, sl
   26f34:	b	26fa8 <__assert_fail@plt+0x15608>
   26f38:	mov	r2, r8
   26f3c:	mov	r0, r4
   26f40:	bl	20b20 <__assert_fail@plt+0xf180>
   26f44:	cmp	r0, #0
   26f48:	beq	26f84 <__assert_fail@plt+0x155e4>
   26f4c:	lsl	sl, r5, #2
   26f50:	ldr	r3, [sp, #48]	; 0x30
   26f54:	ldr	r2, [r7, #12]
   26f58:	cmp	r3, #0
   26f5c:	ldr	r5, [r2, sl]
   26f60:	beq	272a0 <__assert_fail@plt+0x15900>
   26f64:	ldr	r1, [sp, #52]	; 0x34
   26f68:	ldr	r6, [sp, #56]	; 0x38
   26f6c:	cmp	r1, #0
   26f70:	bne	27348 <__assert_fail@plt+0x159a8>
   26f74:	str	r5, [r6]
   26f78:	ldr	r3, [sp, #52]	; 0x34
   26f7c:	add	r3, r3, #1
   26f80:	str	r3, [sp, #52]	; 0x34
   26f84:	ldr	r3, [fp, #20]
   26f88:	add	r9, r9, #1
   26f8c:	cmp	r9, r3
   26f90:	bge	272d4 <__assert_fail@plt+0x15934>
   26f94:	ldr	r3, [fp, #24]
   26f98:	ldr	r0, [r7]
   26f9c:	ldr	r5, [r3, r9, lsl #2]
   26fa0:	lsl	sl, r5, #3
   26fa4:	add	r1, r0, sl
   26fa8:	ldrb	r3, [r1, #6]
   26fac:	tst	r3, #16
   26fb0:	beq	26f38 <__assert_fail@plt+0x15598>
   26fb4:	mov	r3, r4
   26fb8:	mov	r2, r5
   26fbc:	str	r8, [sp]
   26fc0:	add	r1, r7, #128	; 0x80
   26fc4:	bl	236dc <__assert_fail@plt+0x11d3c>
   26fc8:	cmp	r0, #1
   26fcc:	ble	2728c <__assert_fail@plt+0x158ec>
   26fd0:	ldr	r2, [r4, #100]	; 0x64
   26fd4:	add	r6, r0, r8
   26fd8:	lsl	sl, r5, #2
   26fdc:	ldr	r3, [r7, #12]
   26fe0:	ldr	r1, [r2, r6, lsl #2]
   26fe4:	ldr	r5, [r3, r5, lsl #2]
   26fe8:	mov	r3, #0
   26fec:	str	r3, [sp, #64]	; 0x40
   26ff0:	cmp	r1, r3
   26ff4:	beq	27010 <__assert_fail@plt+0x15670>
   26ff8:	add	r1, r1, #4
   26ffc:	add	r0, sp, #60	; 0x3c
   27000:	bl	20844 <__assert_fail@plt+0xeea4>
   27004:	cmp	r0, #0
   27008:	str	r0, [sp, #44]	; 0x2c
   2700c:	bne	27058 <__assert_fail@plt+0x156b8>
   27010:	mov	r1, r5
   27014:	add	r0, sp, #60	; 0x3c
   27018:	bl	20448 <__assert_fail@plt+0xeaa8>
   2701c:	cmp	r0, #0
   27020:	beq	27310 <__assert_fail@plt+0x15970>
   27024:	add	r2, sp, #60	; 0x3c
   27028:	mov	r1, r7
   2702c:	ldr	r5, [r4, #100]	; 0x64
   27030:	add	r0, sp, #44	; 0x2c
   27034:	bl	25068 <__assert_fail@plt+0x136c8>
   27038:	ldr	r3, [r4, #100]	; 0x64
   2703c:	str	r0, [r5, r6, lsl #2]
   27040:	ldr	r3, [r3, r6, lsl #2]
   27044:	cmp	r3, #0
   27048:	bne	26f50 <__assert_fail@plt+0x155b0>
   2704c:	ldr	r3, [sp, #44]	; 0x2c
   27050:	cmp	r3, #0
   27054:	beq	26f50 <__assert_fail@plt+0x155b0>
   27058:	ldr	r9, [sp, #24]
   2705c:	ldr	r0, [sp, #68]	; 0x44
   27060:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   27064:	ldr	r3, [sp, #44]	; 0x2c
   27068:	cmp	r3, #0
   2706c:	str	r3, [sp, #40]	; 0x28
   27070:	bne	27320 <__assert_fail@plt+0x15980>
   27074:	add	r5, sp, #48	; 0x30
   27078:	ldr	r3, [sp, #52]	; 0x34
   2707c:	mov	r6, r9
   27080:	cmp	r3, #0
   27084:	beq	270d0 <__assert_fail@plt+0x15730>
   27088:	mov	r1, r5
   2708c:	ldr	r0, [sp, #16]
   27090:	ldr	r2, [sp, #20]
   27094:	ldr	r3, [sp, #120]	; 0x78
   27098:	bl	24658 <__assert_fail@plt+0x12cb8>
   2709c:	cmp	r0, #0
   270a0:	str	r0, [sp, #40]	; 0x28
   270a4:	bne	27320 <__assert_fail@plt+0x15980>
   270a8:	mov	r2, r9
   270ac:	mov	r0, r4
   270b0:	ldr	r3, [sp, #20]
   270b4:	ldr	r1, [sp, #120]	; 0x78
   270b8:	str	r1, [sp]
   270bc:	mov	r1, r5
   270c0:	bl	25334 <__assert_fail@plt+0x13994>
   270c4:	cmp	r0, #0
   270c8:	str	r0, [sp, #40]	; 0x28
   270cc:	bne	27320 <__assert_fail@plt+0x15980>
   270d0:	mov	r1, r8
   270d4:	mov	r0, r4
   270d8:	ldr	r2, [r4, #88]	; 0x58
   270dc:	bl	20a08 <__assert_fail@plt+0xf068>
   270e0:	mov	r3, r0
   270e4:	mov	r2, r5
   270e8:	ldr	r1, [sp, #16]
   270ec:	add	r0, sp, #40	; 0x28
   270f0:	bl	25860 <__assert_fail@plt+0x13ec0>
   270f4:	subs	fp, r0, #0
   270f8:	beq	273c8 <__assert_fail@plt+0x15a28>
   270fc:	mov	r2, #0
   27100:	ldr	r3, [r4, #100]	; 0x64
   27104:	str	r2, [sp, #8]
   27108:	ldr	r2, [sp, #12]
   2710c:	str	fp, [r3, r2]
   27110:	ldr	r2, [sp, #116]	; 0x74
   27114:	cmp	r2, r9
   27118:	ble	27130 <__assert_fail@plt+0x15790>
   2711c:	ldr	r1, [sp, #8]
   27120:	add	r9, r9, #1
   27124:	ldr	r2, [r4, #120]	; 0x78
   27128:	cmp	r2, r1
   2712c:	bge	26eb0 <__assert_fail@plt+0x15510>
   27130:	ldr	r0, [sp, #56]	; 0x38
   27134:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   27138:	ldr	r3, [r4, #100]	; 0x64
   2713c:	ldr	r2, [sp, #116]	; 0x74
   27140:	ldr	r3, [r3, r2, lsl #2]
   27144:	cmp	r3, #0
   27148:	beq	274cc <__assert_fail@plt+0x15b2c>
   2714c:	ldr	r2, [sp, #28]
   27150:	ldr	r1, [sp, #32]
   27154:	str	r6, [r2]
   27158:	ldr	r2, [sp, #36]	; 0x24
   2715c:	str	r2, [r4, #40]	; 0x28
   27160:	ldr	r2, [r3, #8]
   27164:	str	r1, [r4, #100]	; 0x64
   27168:	cmp	r2, #0
   2716c:	ble	274f4 <__assert_fail@plt+0x15b54>
   27170:	subs	r2, r2, #1
   27174:	ldr	ip, [r3, #12]
   27178:	moveq	r1, r2
   2717c:	beq	271dc <__assert_fail@plt+0x1583c>
   27180:	ldr	lr, [sp, #112]	; 0x70
   27184:	mov	r1, #0
   27188:	add	r3, r1, r2
   2718c:	lsr	r3, r3, #1
   27190:	ldr	r0, [ip, r3, lsl #2]
   27194:	cmp	r0, lr
   27198:	blt	274a4 <__assert_fail@plt+0x15b04>
   2719c:	cmp	r3, r1
   271a0:	bls	271dc <__assert_fail@plt+0x1583c>
   271a4:	add	r2, r3, r1
   271a8:	lsr	r2, r2, #1
   271ac:	ldr	r0, [ip, r2, lsl #2]
   271b0:	cmp	lr, r0
   271b4:	ble	271cc <__assert_fail@plt+0x1582c>
   271b8:	b	27498 <__assert_fail@plt+0x15af8>
   271bc:	ldr	r0, [ip, r3, lsl #2]
   271c0:	cmp	lr, r0
   271c4:	bgt	274a4 <__assert_fail@plt+0x15b04>
   271c8:	mov	r2, r3
   271cc:	add	r3, r2, r1
   271d0:	cmp	r2, r1
   271d4:	lsr	r3, r3, #1
   271d8:	bhi	271bc <__assert_fail@plt+0x1581c>
   271dc:	ldr	r0, [ip, r1, lsl #2]
   271e0:	ldr	r3, [sp, #112]	; 0x70
   271e4:	subs	r0, r0, r3
   271e8:	movne	r0, #1
   271ec:	b	2732c <__assert_fail@plt+0x1598c>
   271f0:	sub	r1, r6, #1
   271f4:	mov	r0, r4
   271f8:	str	r6, [r4, #40]	; 0x28
   271fc:	str	r5, [r4, #100]	; 0x64
   27200:	bl	20a08 <__assert_fail@plt+0xf068>
   27204:	cmp	r6, r7
   27208:	mov	r8, r0
   2720c:	beq	26ddc <__assert_fail@plt+0x1543c>
   27210:	ldr	fp, [r5, r6, lsl #2]
   27214:	cmp	fp, #0
   27218:	beq	27434 <__assert_fail@plt+0x15a94>
   2721c:	ldrb	r3, [fp, #52]	; 0x34
   27220:	ands	r3, r3, #64	; 0x40
   27224:	streq	r3, [sp, #48]	; 0x30
   27228:	streq	r3, [sp, #52]	; 0x34
   2722c:	streq	r3, [sp, #56]	; 0x38
   27230:	beq	26e88 <__assert_fail@plt+0x154e8>
   27234:	ldr	r3, [fp, #8]
   27238:	cmp	r3, #0
   2723c:	str	r3, [sp, #52]	; 0x34
   27240:	ble	273f0 <__assert_fail@plt+0x15a50>
   27244:	lsl	r0, r3, #2
   27248:	str	r3, [sp, #48]	; 0x30
   2724c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   27250:	cmp	r0, #0
   27254:	str	r0, [sp, #56]	; 0x38
   27258:	beq	274b4 <__assert_fail@plt+0x15b14>
   2725c:	ldr	r2, [fp, #8]
   27260:	ldr	r1, [fp, #12]
   27264:	lsl	r2, r2, #2
   27268:	bl	115d4 <memcpy@plt>
   2726c:	ldrb	r3, [fp, #52]	; 0x34
   27270:	mov	r2, #0
   27274:	str	r2, [sp, #40]	; 0x28
   27278:	tst	r3, #64	; 0x40
   2727c:	beq	26e88 <__assert_fail@plt+0x154e8>
   27280:	add	r5, sp, #48	; 0x30
   27284:	ldr	r3, [sp, #52]	; 0x34
   27288:	b	26e34 <__assert_fail@plt+0x15494>
   2728c:	cmp	r0, #0
   27290:	bne	26f4c <__assert_fail@plt+0x155ac>
   27294:	ldr	r0, [r7]
   27298:	add	r1, r0, sl
   2729c:	b	26f38 <__assert_fail@plt+0x15598>
   272a0:	mov	r2, #1
   272a4:	mov	r3, #1
   272a8:	mov	r0, #4
   272ac:	strd	r2, [sp, #48]	; 0x30
   272b0:	bl	1f0c4 <__assert_fail@plt+0xd724>
   272b4:	cmp	r0, #0
   272b8:	str	r0, [sp, #56]	; 0x38
   272bc:	beq	27304 <__assert_fail@plt+0x15964>
   272c0:	str	r5, [r0]
   272c4:	add	r9, r9, #1
   272c8:	ldr	r3, [fp, #20]
   272cc:	cmp	r9, r3
   272d0:	blt	26f94 <__assert_fail@plt+0x155f4>
   272d4:	ldr	r9, [sp, #24]
   272d8:	ldr	r0, [sp, #68]	; 0x44
   272dc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   272e0:	mov	r3, #0
   272e4:	add	r5, sp, #48	; 0x30
   272e8:	str	r3, [sp, #40]	; 0x28
   272ec:	b	27078 <__assert_fail@plt+0x156d8>
   272f0:	cmp	fp, #0
   272f4:	bne	26ef4 <__assert_fail@plt+0x15554>
   272f8:	mov	r6, r9
   272fc:	add	r5, sp, #48	; 0x30
   27300:	b	270d0 <__assert_fail@plt+0x15730>
   27304:	mov	r2, #0
   27308:	mov	r3, #0
   2730c:	strd	r2, [sp, #48]	; 0x30
   27310:	ldr	r0, [sp, #68]	; 0x44
   27314:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   27318:	mov	r3, #12
   2731c:	str	r3, [sp, #40]	; 0x28
   27320:	ldr	r0, [sp, #56]	; 0x38
   27324:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   27328:	ldr	r0, [sp, #40]	; 0x28
   2732c:	add	sp, sp, #76	; 0x4c
   27330:	ldrd	r4, [sp]
   27334:	ldrd	r6, [sp, #8]
   27338:	ldrd	r8, [sp, #16]
   2733c:	ldrd	sl, [sp, #24]
   27340:	add	sp, sp, #32
   27344:	pop	{pc}		; (ldr pc, [sp], #4)
   27348:	cmp	r3, r1
   2734c:	beq	2740c <__assert_fail@plt+0x15a6c>
   27350:	ldr	r3, [r6]
   27354:	mov	r2, r1
   27358:	cmp	r5, r3
   2735c:	bge	27390 <__assert_fail@plt+0x159f0>
   27360:	cmp	r1, #0
   27364:	ble	2737c <__assert_fail@plt+0x159dc>
   27368:	lsl	r2, r1, #2
   2736c:	add	r0, r6, #4
   27370:	mov	r1, r6
   27374:	bl	1158c <memmove@plt>
   27378:	mov	r2, #0
   2737c:	str	r5, [r6, r2, lsl #2]
   27380:	ldr	r3, [sp, #52]	; 0x34
   27384:	add	r3, r3, #1
   27388:	str	r3, [sp, #52]	; 0x34
   2738c:	b	26f84 <__assert_fail@plt+0x155e4>
   27390:	sub	r3, r1, #-1073741823	; 0xc0000001
   27394:	ldr	r0, [r6, r3, lsl #2]
   27398:	lsl	r3, r3, #2
   2739c:	cmp	r0, r5
   273a0:	ble	2737c <__assert_fail@plt+0x159dc>
   273a4:	add	r3, r3, #4
   273a8:	add	r3, r6, r3
   273ac:	str	r0, [r3], #-4
   273b0:	sub	r1, r1, #1
   273b4:	ldr	r0, [r3, #-4]
   273b8:	mov	r2, r1
   273bc:	cmp	r5, r0
   273c0:	blt	273ac <__assert_fail@plt+0x15a0c>
   273c4:	b	2737c <__assert_fail@plt+0x159dc>
   273c8:	ldr	r3, [sp, #40]	; 0x28
   273cc:	cmp	r3, #0
   273d0:	bne	27320 <__assert_fail@plt+0x15980>
   273d4:	ldr	r2, [sp, #8]
   273d8:	ldr	r3, [r4, #100]	; 0x64
   273dc:	add	r2, r2, #1
   273e0:	str	r2, [sp, #8]
   273e4:	ldr	r2, [sp, #12]
   273e8:	str	fp, [r3, r2]
   273ec:	b	27110 <__assert_fail@plt+0x15770>
   273f0:	mov	r3, #0
   273f4:	add	r5, sp, #48	; 0x30
   273f8:	str	r3, [sp, #40]	; 0x28
   273fc:	str	r3, [sp, #48]	; 0x30
   27400:	str	r3, [r5, #4]
   27404:	str	r3, [r5, #8]
   27408:	b	26e64 <__assert_fail@plt+0x154c4>
   2740c:	lsl	r3, r1, #1
   27410:	mov	r0, r6
   27414:	lsl	r1, r1, #3
   27418:	str	r3, [sp, #48]	; 0x30
   2741c:	bl	1f170 <__assert_fail@plt+0xd7d0>
   27420:	subs	r6, r0, #0
   27424:	beq	27310 <__assert_fail@plt+0x15970>
   27428:	str	r6, [sp, #56]	; 0x38
   2742c:	ldr	r1, [sp, #52]	; 0x34
   27430:	b	27350 <__assert_fail@plt+0x159b0>
   27434:	str	fp, [sp, #48]	; 0x30
   27438:	str	fp, [sp, #52]	; 0x34
   2743c:	str	fp, [sp, #56]	; 0x38
   27440:	b	26e88 <__assert_fail@plt+0x154e8>
   27444:	mvn	r3, #-2147483648	; 0x80000000
   27448:	add	sl, r2, #1
   2744c:	sub	r3, r3, r5
   27450:	cmp	r3, sl
   27454:	blt	274b4 <__assert_fail@plt+0x15b14>
   27458:	add	r8, r5, sl
   2745c:	cmn	r8, #-1073741823	; 0xc0000001
   27460:	bhi	274b4 <__assert_fail@plt+0x15b14>
   27464:	ldr	fp, [sp, #28]
   27468:	lsl	r1, r8, #2
   2746c:	ldr	r0, [fp, #8]
   27470:	bl	1f170 <__assert_fail@plt+0xd7d0>
   27474:	subs	r3, r0, #0
   27478:	beq	274b4 <__assert_fail@plt+0x15b14>
   2747c:	lsl	r2, sl, #2
   27480:	mov	r1, r6
   27484:	str	r8, [fp, #4]
   27488:	add	r0, r3, r5, lsl #2
   2748c:	str	r3, [fp, #8]
   27490:	bl	11814 <memset@plt>
   27494:	b	26d9c <__assert_fail@plt+0x153fc>
   27498:	mov	r1, r2
   2749c:	mov	r2, r3
   274a0:	mov	r3, r1
   274a4:	add	r1, r3, #1
   274a8:	cmp	r1, r2
   274ac:	bcc	27188 <__assert_fail@plt+0x157e8>
   274b0:	b	271dc <__assert_fail@plt+0x1583c>
   274b4:	mov	r0, #12
   274b8:	b	2732c <__assert_fail@plt+0x1598c>
   274bc:	ldr	r3, [sp, #40]	; 0x28
   274c0:	cmp	r3, #0
   274c4:	beq	26e80 <__assert_fail@plt+0x154e0>
   274c8:	b	27320 <__assert_fail@plt+0x15980>
   274cc:	ldr	r3, [sp, #28]
   274d0:	mov	r0, #1
   274d4:	str	r6, [r3]
   274d8:	ldr	r3, [sp, #36]	; 0x24
   274dc:	str	r3, [r4, #40]	; 0x28
   274e0:	ldr	r3, [sp, #32]
   274e4:	str	r3, [r4, #100]	; 0x64
   274e8:	b	2732c <__assert_fail@plt+0x1598c>
   274ec:	mov	r0, #0
   274f0:	b	272dc <__assert_fail@plt+0x1593c>
   274f4:	mov	r0, #1
   274f8:	b	2732c <__assert_fail@plt+0x1598c>
   274fc:	mov	ip, r2
   27500:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27504:	mov	r4, r0
   27508:	strd	r6, [sp, #8]
   2750c:	mov	r6, r2
   27510:	mov	r7, r3
   27514:	strd	r8, [sp, #16]
   27518:	mov	r3, #8
   2751c:	mov	r9, r1
   27520:	strd	sl, [sp, #24]
   27524:	str	lr, [sp, #32]
   27528:	sub	sp, sp, #20
   2752c:	ldr	r2, [ip], #8
   27530:	str	r7, [sp]
   27534:	ldr	r5, [sp, #56]	; 0x38
   27538:	mov	r1, ip
   2753c:	str	r5, [sp, #4]
   27540:	str	r3, [sp, #8]
   27544:	ldr	r3, [r6, #4]
   27548:	bl	26d40 <__assert_fail@plt+0x153a0>
   2754c:	subs	r8, r0, #0
   27550:	beq	27574 <__assert_fail@plt+0x15bd4>
   27554:	mov	r0, r8
   27558:	add	sp, sp, #20
   2755c:	ldrd	r4, [sp]
   27560:	ldrd	r6, [sp, #8]
   27564:	ldrd	r8, [sp, #16]
   27568:	ldrd	sl, [sp, #24]
   2756c:	add	sp, sp, #32
   27570:	pop	{pc}		; (ldr pc, [sp], #4)
   27574:	ldr	r3, [r4, #108]	; 0x6c
   27578:	ldr	r1, [r4, #112]	; 0x70
   2757c:	ldr	sl, [r6, #4]
   27580:	ldr	fp, [r9]
   27584:	cmp	r3, r1
   27588:	ldr	r0, [r4, #116]	; 0x74
   2758c:	movlt	ip, sl
   27590:	bge	2767c <__assert_fail@plt+0x15cdc>
   27594:	add	r2, r3, r3, lsl #1
   27598:	cmp	r3, #0
   2759c:	lsl	r2, r2, #3
   275a0:	ble	275bc <__assert_fail@plt+0x15c1c>
   275a4:	sub	r1, r2, #24
   275a8:	add	r1, r0, r1
   275ac:	ldr	lr, [r1, #4]
   275b0:	cmp	r5, lr
   275b4:	moveq	lr, #1
   275b8:	strbeq	lr, [r1, #20]
   275bc:	cmp	fp, sl
   275c0:	add	r1, r0, r2
   275c4:	str	r7, [r0, r2]
   275c8:	add	r3, r3, #1
   275cc:	movne	lr, #0
   275d0:	mvneq	lr, #0
   275d4:	mov	r0, #0
   275d8:	stmib	r1, {r5, fp}
   275dc:	str	sl, [r1, #12]
   275e0:	sub	r2, sl, fp
   275e4:	add	r5, r5, ip
   275e8:	str	lr, [r1, #16]
   275ec:	str	r3, [r4, #108]	; 0x6c
   275f0:	strb	r0, [r1, #20]
   275f4:	ldr	r6, [r4, #104]	; 0x68
   275f8:	ldr	r3, [r4, #120]	; 0x78
   275fc:	cmp	r3, r2
   27600:	ldr	r3, [r4, #36]	; 0x24
   27604:	strlt	r2, [r4, #120]	; 0x78
   27608:	ldr	r2, [r9]
   2760c:	sub	r5, r5, r2
   27610:	cmp	r5, r3
   27614:	blt	27624 <__assert_fail@plt+0x15c84>
   27618:	ldr	r2, [r4, #48]	; 0x30
   2761c:	cmp	r3, r2
   27620:	blt	2763c <__assert_fail@plt+0x15c9c>
   27624:	ldr	r3, [r4, #28]
   27628:	cmp	r5, r3
   2762c:	blt	27650 <__assert_fail@plt+0x15cb0>
   27630:	ldr	r2, [r4, #48]	; 0x30
   27634:	cmp	r3, r2
   27638:	bge	27650 <__assert_fail@plt+0x15cb0>
   2763c:	add	r1, r5, #1
   27640:	mov	r0, r4
   27644:	bl	241c8 <__assert_fail@plt+0x12828>
   27648:	cmp	r0, #0
   2764c:	bne	276d0 <__assert_fail@plt+0x15d30>
   27650:	cmp	r5, r6
   27654:	ble	27554 <__assert_fail@plt+0x15bb4>
   27658:	ldr	r3, [r4, #100]	; 0x64
   2765c:	add	r0, r6, #1
   27660:	sub	r2, r5, r6
   27664:	lsl	r2, r2, #2
   27668:	mov	r1, #0
   2766c:	add	r0, r3, r0, lsl #2
   27670:	bl	11814 <memset@plt>
   27674:	str	r5, [r4, #104]	; 0x68
   27678:	b	27554 <__assert_fail@plt+0x15bb4>
   2767c:	add	r1, r1, r1, lsl #1
   27680:	lsl	r1, r1, #4
   27684:	bl	1f170 <__assert_fail@plt+0xd7d0>
   27688:	cmp	r0, #0
   2768c:	beq	276d8 <__assert_fail@plt+0x15d38>
   27690:	ldr	r3, [r4, #108]	; 0x6c
   27694:	mov	r1, r8
   27698:	str	r0, [r4, #116]	; 0x74
   2769c:	ldr	r2, [r4, #112]	; 0x70
   276a0:	add	r3, r3, r3, lsl #1
   276a4:	add	r2, r2, r2, lsl #1
   276a8:	add	r0, r0, r3, lsl #3
   276ac:	lsl	r2, r2, #3
   276b0:	bl	11814 <memset@plt>
   276b4:	ldr	ip, [r6, #4]
   276b8:	ldr	r2, [r4, #112]	; 0x70
   276bc:	ldr	r3, [r4, #108]	; 0x6c
   276c0:	ldr	r0, [r4, #116]	; 0x74
   276c4:	lsl	r2, r2, #1
   276c8:	str	r2, [r4, #112]	; 0x70
   276cc:	b	27594 <__assert_fail@plt+0x15bf4>
   276d0:	mov	r8, r0
   276d4:	b	27554 <__assert_fail@plt+0x15bb4>
   276d8:	ldr	r0, [r4, #116]	; 0x74
   276dc:	mov	r8, #12
   276e0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   276e4:	b	27554 <__assert_fail@plt+0x15bb4>
   276e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   276ec:	ldr	r4, [r2, #4]
   276f0:	ldrb	ip, [r1, #28]
   276f4:	ldr	r5, [r1]
   276f8:	adds	r3, r4, #0
   276fc:	strd	r6, [sp, #8]
   27700:	movne	r3, #1
   27704:	strd	r8, [sp, #16]
   27708:	ands	r3, r3, ip, lsr #4
   2770c:	strd	sl, [sp, #24]
   27710:	str	lr, [sp, #32]
   27714:	sub	sp, sp, #20
   27718:	bne	27990 <__assert_fail@plt+0x15ff0>
   2771c:	mov	sl, r2
   27720:	ldr	r2, [r5, #64]	; 0x40
   27724:	mov	r6, #0
   27728:	mov	r7, #0
   2772c:	mov	r1, r0
   27730:	strd	r6, [sp, #8]
   27734:	cmp	r2, #31
   27738:	beq	279c0 <__assert_fail@plt+0x16020>
   2773c:	ldr	r0, [r5, #56]	; 0x38
   27740:	lsl	r3, r2, #5
   27744:	add	r2, r2, #1
   27748:	add	r8, r3, #4
   2774c:	mov	lr, #8
   27750:	add	ip, r0, r3
   27754:	str	r2, [r5, #64]	; 0x40
   27758:	add	r3, r3, #16
   2775c:	add	r8, r0, r8
   27760:	strb	lr, [sp, #12]
   27764:	add	r0, r0, r3
   27768:	mov	lr, #0
   2776c:	ldrd	r2, [sp, #8]
   27770:	mvn	r6, #0
   27774:	str	lr, [ip, #4]
   27778:	str	lr, [ip, #8]
   2777c:	str	lr, [ip, #12]
   27780:	strd	r2, [ip, #24]
   27784:	ldrb	r3, [r0, #14]
   27788:	bic	r3, r3, #12
   2778c:	strb	r3, [r0, #14]
   27790:	str	lr, [ip, #16]
   27794:	str	lr, [ip, #20]
   27798:	str	r6, [ip, #32]
   2779c:	ldr	r0, [r5, #64]	; 0x40
   277a0:	mov	r2, #0
   277a4:	mov	r3, #0
   277a8:	strd	r2, [sp, #8]
   277ac:	cmp	r0, #31
   277b0:	beq	279f4 <__assert_fail@plt+0x16054>
   277b4:	lsl	r3, r0, #5
   277b8:	add	r2, r0, #1
   277bc:	ldr	r0, [r5, #56]	; 0x38
   277c0:	add	r9, r3, #4
   277c4:	mov	lr, #9
   277c8:	add	ip, r0, r3
   277cc:	str	r2, [r5, #64]	; 0x40
   277d0:	add	r3, r3, #16
   277d4:	add	r9, r0, r9
   277d8:	strb	lr, [sp, #12]
   277dc:	add	r0, r0, r3
   277e0:	mov	lr, #0
   277e4:	ldrd	r2, [sp, #8]
   277e8:	mvn	r6, #0
   277ec:	str	lr, [ip, #4]
   277f0:	str	lr, [ip, #8]
   277f4:	str	lr, [ip, #12]
   277f8:	strd	r2, [ip, #24]
   277fc:	ldrb	r3, [r0, #14]
   27800:	bic	r3, r3, #12
   27804:	strb	r3, [r0, #14]
   27808:	str	lr, [ip, #16]
   2780c:	str	lr, [ip, #20]
   27810:	str	r6, [ip, #32]
   27814:	cmp	r4, #0
   27818:	ldr	r0, [r5, #64]	; 0x40
   2781c:	moveq	fp, r9
   27820:	beq	278a8 <__assert_fail@plt+0x15f08>
   27824:	mov	r2, #0
   27828:	mov	r3, #0
   2782c:	cmp	r0, #31
   27830:	strd	r2, [sp, #8]
   27834:	beq	27a5c <__assert_fail@plt+0x160bc>
   27838:	ldr	r2, [r5, #56]	; 0x38
   2783c:	lsl	r3, r0, #5
   27840:	add	r0, r0, #1
   27844:	add	fp, r3, #4
   27848:	mov	lr, #16
   2784c:	str	r0, [r5, #64]	; 0x40
   27850:	add	ip, r2, r3
   27854:	add	r0, r3, lr
   27858:	add	fp, r2, fp
   2785c:	strb	lr, [sp, #12]
   27860:	add	r0, r2, r0
   27864:	mov	lr, #0
   27868:	ldrd	r2, [sp, #8]
   2786c:	mvn	r6, #0
   27870:	cmp	r9, lr
   27874:	str	lr, [ip, #4]
   27878:	str	r4, [ip, #8]
   2787c:	str	r9, [ip, #12]
   27880:	strd	r2, [ip, #24]
   27884:	ldrb	r3, [r0, #14]
   27888:	bic	r3, r3, #12
   2788c:	strb	r3, [r0, #14]
   27890:	str	lr, [ip, #16]
   27894:	str	lr, [ip, #20]
   27898:	str	r6, [ip, #32]
   2789c:	str	fp, [r4]
   278a0:	strne	fp, [r9]
   278a4:	ldr	r0, [r5, #64]	; 0x40
   278a8:	mov	r2, #0
   278ac:	mov	r3, #0
   278b0:	cmp	r0, #31
   278b4:	strd	r2, [sp, #8]
   278b8:	beq	27a28 <__assert_fail@plt+0x16088>
   278bc:	ldr	r4, [r5, #56]	; 0x38
   278c0:	lsl	r3, r0, #5
   278c4:	add	r0, r0, #1
   278c8:	add	r2, r3, #4
   278cc:	mov	ip, #16
   278d0:	str	r0, [r5, #64]	; 0x40
   278d4:	add	r0, r4, r3
   278d8:	add	r3, r3, ip
   278dc:	cmp	r8, #0
   278e0:	strb	ip, [sp, #12]
   278e4:	mov	ip, #0
   278e8:	add	r3, r4, r3
   278ec:	ldrd	r6, [sp, #8]
   278f0:	add	r4, r4, r2
   278f4:	mvn	lr, #0
   278f8:	str	ip, [r0, #4]
   278fc:	str	r8, [r0, #8]
   27900:	str	fp, [r0, #12]
   27904:	strd	r6, [r0, #24]
   27908:	ldrb	r2, [r3, #14]
   2790c:	bic	r2, r2, #12
   27910:	strb	r2, [r3, #14]
   27914:	str	ip, [r0, #16]
   27918:	str	ip, [r0, #20]
   2791c:	str	lr, [r0, #32]
   27920:	strne	r4, [r8]
   27924:	cmp	fp, #0
   27928:	beq	279b0 <__assert_fail@plt+0x16010>
   2792c:	cmp	r4, #0
   27930:	str	r4, [fp]
   27934:	beq	279b0 <__assert_fail@plt+0x16010>
   27938:	cmp	r9, #0
   2793c:	cmpne	r8, #0
   27940:	beq	279b0 <__assert_fail@plt+0x16010>
   27944:	ldr	r2, [sl, #20]
   27948:	ldrb	r3, [sl, #26]
   2794c:	str	r2, [r9, #20]
   27950:	str	r2, [r8, #20]
   27954:	ldrb	r2, [r9, #26]
   27958:	ubfx	r3, r3, #3, #1
   2795c:	bfi	r2, r3, #3, #1
   27960:	strb	r2, [r9, #26]
   27964:	ldrb	r2, [r8, #26]
   27968:	bfi	r2, r3, #3, #1
   2796c:	strb	r2, [r8, #26]
   27970:	mov	r0, r4
   27974:	add	sp, sp, #20
   27978:	ldrd	r4, [sp]
   2797c:	ldrd	r6, [sp, #8]
   27980:	ldrd	r8, [sp, #16]
   27984:	ldrd	sl, [sp, #24]
   27988:	add	sp, sp, #32
   2798c:	pop	{pc}		; (ldr pc, [sp], #4)
   27990:	ldr	r3, [r2, #20]
   27994:	cmp	r3, #31
   27998:	bgt	27970 <__assert_fail@plt+0x15fd0>
   2799c:	ldr	r1, [r5, #80]	; 0x50
   279a0:	lsr	r3, r1, r3
   279a4:	tst	r3, #1
   279a8:	bne	2771c <__assert_fail@plt+0x15d7c>
   279ac:	b	27970 <__assert_fail@plt+0x15fd0>
   279b0:	mov	r3, #12
   279b4:	mov	r4, #0
   279b8:	str	r3, [r1]
   279bc:	b	27970 <__assert_fail@plt+0x15fd0>
   279c0:	mov	r0, #996	; 0x3e4
   279c4:	str	r1, [sp, #4]
   279c8:	bl	1f0c4 <__assert_fail@plt+0xd724>
   279cc:	cmp	r0, #0
   279d0:	ldr	r1, [sp, #4]
   279d4:	beq	27a98 <__assert_fail@plt+0x160f8>
   279d8:	ldr	ip, [r5, #56]	; 0x38
   279dc:	mov	r2, #1
   279e0:	mov	r8, #4
   279e4:	mov	r3, #0
   279e8:	str	ip, [r0]
   279ec:	str	r0, [r5, #56]	; 0x38
   279f0:	b	2774c <__assert_fail@plt+0x15dac>
   279f4:	mov	r0, #996	; 0x3e4
   279f8:	str	r1, [sp, #4]
   279fc:	bl	1f0c4 <__assert_fail@plt+0xd724>
   27a00:	cmp	r0, #0
   27a04:	ldr	r1, [sp, #4]
   27a08:	beq	27a90 <__assert_fail@plt+0x160f0>
   27a0c:	ldr	ip, [r5, #56]	; 0x38
   27a10:	mov	r2, #1
   27a14:	mov	r9, #4
   27a18:	mov	r3, #0
   27a1c:	str	ip, [r0]
   27a20:	str	r0, [r5, #56]	; 0x38
   27a24:	b	277c4 <__assert_fail@plt+0x15e24>
   27a28:	mov	r0, #996	; 0x3e4
   27a2c:	str	r1, [sp, #4]
   27a30:	bl	1f0c4 <__assert_fail@plt+0xd724>
   27a34:	subs	r4, r0, #0
   27a38:	ldr	r1, [sp, #4]
   27a3c:	beq	279b0 <__assert_fail@plt+0x16010>
   27a40:	ldr	ip, [r5, #56]	; 0x38
   27a44:	mov	r0, #1
   27a48:	mov	r2, #4
   27a4c:	mov	r3, #0
   27a50:	str	ip, [r4]
   27a54:	str	r4, [r5, #56]	; 0x38
   27a58:	b	278cc <__assert_fail@plt+0x15f2c>
   27a5c:	mov	r0, #996	; 0x3e4
   27a60:	str	r1, [sp, #4]
   27a64:	bl	1f0c4 <__assert_fail@plt+0xd724>
   27a68:	subs	r2, r0, #0
   27a6c:	ldr	r1, [sp, #4]
   27a70:	beq	27aa0 <__assert_fail@plt+0x16100>
   27a74:	ldr	ip, [r5, #56]	; 0x38
   27a78:	mov	fp, #4
   27a7c:	mov	r0, #1
   27a80:	mov	r3, #0
   27a84:	str	ip, [r2]
   27a88:	str	r2, [r5, #56]	; 0x38
   27a8c:	b	27848 <__assert_fail@plt+0x15ea8>
   27a90:	mov	r9, r0
   27a94:	b	27814 <__assert_fail@plt+0x15e74>
   27a98:	mov	r8, r0
   27a9c:	b	2779c <__assert_fail@plt+0x15dfc>
   27aa0:	mov	fp, r2
   27aa4:	b	278a4 <__assert_fail@plt+0x15f04>
   27aa8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   27aac:	mov	r4, r0
   27ab0:	mov	r5, r2
   27ab4:	strd	r6, [sp, #8]
   27ab8:	subs	r6, r1, #0
   27abc:	strd	r8, [sp, #16]
   27ac0:	str	sl, [sp, #24]
   27ac4:	str	lr, [sp, #28]
   27ac8:	beq	27ae4 <__assert_fail@plt+0x16144>
   27acc:	ldr	r3, [r6, #4]
   27ad0:	cmp	r2, #0
   27ad4:	cmpne	r3, #0
   27ad8:	bgt	27b24 <__assert_fail@plt+0x16184>
   27adc:	cmp	r3, #0
   27ae0:	bgt	27b30 <__assert_fail@plt+0x16190>
   27ae4:	cmp	r5, #0
   27ae8:	beq	27af8 <__assert_fail@plt+0x16158>
   27aec:	ldr	r3, [r5, #4]
   27af0:	cmp	r3, #0
   27af4:	bgt	27b64 <__assert_fail@plt+0x161c4>
   27af8:	mov	r3, #0
   27afc:	mov	r0, r3
   27b00:	str	r3, [r4]
   27b04:	str	r3, [r4, #4]
   27b08:	str	r3, [r4, #8]
   27b0c:	ldrd	r4, [sp]
   27b10:	ldrd	r6, [sp, #8]
   27b14:	ldrd	r8, [sp, #16]
   27b18:	ldr	sl, [sp, #24]
   27b1c:	add	sp, sp, #28
   27b20:	pop	{pc}		; (ldr pc, [sp], #4)
   27b24:	ldr	r2, [r2, #4]
   27b28:	cmp	r2, #0
   27b2c:	bgt	27b98 <__assert_fail@plt+0x161f8>
   27b30:	lsl	r0, r3, #2
   27b34:	str	r3, [r4]
   27b38:	str	r3, [r4, #4]
   27b3c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   27b40:	cmp	r0, #0
   27b44:	str	r0, [r4, #8]
   27b48:	beq	27c84 <__assert_fail@plt+0x162e4>
   27b4c:	ldr	r2, [r6, #4]
   27b50:	ldr	r1, [r6, #8]
   27b54:	lsl	r2, r2, #2
   27b58:	bl	115d4 <memcpy@plt>
   27b5c:	mov	r0, #0
   27b60:	b	27b0c <__assert_fail@plt+0x1616c>
   27b64:	lsl	r0, r3, #2
   27b68:	str	r3, [r4]
   27b6c:	str	r3, [r4, #4]
   27b70:	bl	1f0c4 <__assert_fail@plt+0xd724>
   27b74:	cmp	r0, #0
   27b78:	str	r0, [r4, #8]
   27b7c:	beq	27c84 <__assert_fail@plt+0x162e4>
   27b80:	ldr	r2, [r5, #4]
   27b84:	ldr	r1, [r5, #8]
   27b88:	lsl	r2, r2, #2
   27b8c:	bl	115d4 <memcpy@plt>
   27b90:	mov	r0, #0
   27b94:	b	27b0c <__assert_fail@plt+0x1616c>
   27b98:	add	r3, r3, r2
   27b9c:	lsl	r0, r3, #2
   27ba0:	str	r3, [r4]
   27ba4:	bl	1f0c4 <__assert_fail@plt+0xd724>
   27ba8:	cmp	r0, #0
   27bac:	str	r0, [r4, #8]
   27bb0:	beq	27c98 <__assert_fail@plt+0x162f8>
   27bb4:	ldr	r7, [r6, #4]
   27bb8:	ldr	r8, [r5, #4]
   27bbc:	cmp	r7, #0
   27bc0:	ble	27ca0 <__assert_fail@plt+0x16300>
   27bc4:	ldr	r1, [r6, #8]
   27bc8:	cmp	r8, #0
   27bcc:	movle	r6, #0
   27bd0:	movle	lr, r0
   27bd4:	movle	r3, r6
   27bd8:	mov	r9, r1
   27bdc:	ble	27c6c <__assert_fail@plt+0x162cc>
   27be0:	mov	r6, #0
   27be4:	mov	lr, r0
   27be8:	ldr	sl, [r5, #8]
   27bec:	mov	ip, r6
   27bf0:	mov	r3, r6
   27bf4:	b	27c00 <__assert_fail@plt+0x16260>
   27bf8:	cmp	r8, ip
   27bfc:	ble	27c6c <__assert_fail@plt+0x162cc>
   27c00:	ldr	r2, [r1]
   27c04:	add	r6, r6, #1
   27c08:	ldr	r1, [sl, ip, lsl #2]
   27c0c:	cmp	r2, r1
   27c10:	addgt	ip, ip, #1
   27c14:	strgt	r1, [lr]
   27c18:	bgt	27c28 <__assert_fail@plt+0x16288>
   27c1c:	add	r3, r3, #1
   27c20:	addeq	ip, ip, #1
   27c24:	str	r2, [lr]
   27c28:	cmp	r7, r3
   27c2c:	add	r1, r9, r3, lsl #2
   27c30:	add	lr, lr, #4
   27c34:	bgt	27bf8 <__assert_fail@plt+0x16258>
   27c38:	cmp	r8, ip
   27c3c:	bgt	27c4c <__assert_fail@plt+0x162ac>
   27c40:	mov	r0, #0
   27c44:	str	r6, [r4, #4]
   27c48:	b	27b0c <__assert_fail@plt+0x1616c>
   27c4c:	ldr	r1, [r5, #8]
   27c50:	sub	r2, r8, ip
   27c54:	add	r0, r0, r6, lsl #2
   27c58:	add	r6, r6, r2
   27c5c:	lsl	r2, r2, #2
   27c60:	add	r1, r1, ip, lsl #2
   27c64:	bl	115d4 <memcpy@plt>
   27c68:	b	27c40 <__assert_fail@plt+0x162a0>
   27c6c:	sub	r3, r7, r3
   27c70:	mov	r0, lr
   27c74:	lsl	r2, r3, #2
   27c78:	add	r6, r6, r3
   27c7c:	bl	115d4 <memcpy@plt>
   27c80:	b	27c40 <__assert_fail@plt+0x162a0>
   27c84:	mov	r3, #0
   27c88:	mov	r0, #12
   27c8c:	str	r3, [r4]
   27c90:	str	r3, [r4, #4]
   27c94:	b	27b0c <__assert_fail@plt+0x1616c>
   27c98:	mov	r0, #12
   27c9c:	b	27b0c <__assert_fail@plt+0x1616c>
   27ca0:	mov	r6, #0
   27ca4:	mov	ip, r6
   27ca8:	b	27c38 <__assert_fail@plt+0x16298>
   27cac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27cb0:	strd	r6, [sp, #8]
   27cb4:	subs	r7, r3, #0
   27cb8:	subgt	r4, r1, #4
   27cbc:	subgt	r6, r2, #4
   27cc0:	str	r8, [sp, #16]
   27cc4:	movgt	r5, #0
   27cc8:	movgt	r8, r0
   27ccc:	str	lr, [sp, #20]
   27cd0:	sub	sp, sp, #16
   27cd4:	bgt	27d04 <__assert_fail@plt+0x16364>
   27cd8:	b	27d68 <__assert_fail@plt+0x163c8>
   27cdc:	bl	25068 <__assert_fail@plt+0x136c8>
   27ce0:	str	r0, [r4]
   27ce4:	ldr	r0, [sp, #12]
   27ce8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   27cec:	ldr	r3, [sp]
   27cf0:	cmp	r3, #0
   27cf4:	bne	27d4c <__assert_fail@plt+0x163ac>
   27cf8:	add	r5, r5, #1
   27cfc:	cmp	r7, r5
   27d00:	beq	27d68 <__assert_fail@plt+0x163c8>
   27d04:	ldr	r1, [r4, #4]!
   27d08:	ldr	ip, [r6, #4]!
   27d0c:	cmp	r1, #0
   27d10:	streq	ip, [r4]
   27d14:	beq	27cf8 <__assert_fail@plt+0x16358>
   27d18:	cmp	ip, #0
   27d1c:	add	r2, ip, #4
   27d20:	add	r1, r1, #4
   27d24:	add	r0, sp, #4
   27d28:	beq	27cf8 <__assert_fail@plt+0x16358>
   27d2c:	bl	27aa8 <__assert_fail@plt+0x16108>
   27d30:	mov	r3, r0
   27d34:	add	r2, sp, #4
   27d38:	cmp	r3, #0
   27d3c:	mov	r1, r8
   27d40:	mov	r0, sp
   27d44:	str	r3, [sp]
   27d48:	beq	27cdc <__assert_fail@plt+0x1633c>
   27d4c:	mov	r0, r3
   27d50:	add	sp, sp, #16
   27d54:	ldrd	r4, [sp]
   27d58:	ldrd	r6, [sp, #8]
   27d5c:	ldr	r8, [sp, #16]
   27d60:	add	sp, sp, #20
   27d64:	pop	{pc}		; (ldr pc, [sp], #4)
   27d68:	mov	r3, #0
   27d6c:	b	27d4c <__assert_fail@plt+0x163ac>
   27d70:	lsl	ip, r2, #2
   27d74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27d78:	mov	r4, r3
   27d7c:	strd	r6, [sp, #8]
   27d80:	strd	r8, [sp, #16]
   27d84:	mov	r8, r2
   27d88:	ldr	r9, [r3, #4]
   27d8c:	strd	sl, [sp, #24]
   27d90:	mov	sl, r0
   27d94:	mov	fp, r1
   27d98:	ldr	r2, [r0, #100]	; 0x64
   27d9c:	str	lr, [sp, #32]
   27da0:	sub	sp, sp, #100	; 0x64
   27da4:	ldr	r6, [r0, #84]	; 0x54
   27da8:	mov	r0, #0
   27dac:	str	ip, [sp, #28]
   27db0:	ldr	r3, [r2, r8, lsl #2]
   27db4:	add	r2, r2, ip
   27db8:	cmp	r3, r0
   27dbc:	str	r3, [sp, #20]
   27dc0:	str	r0, [sp, #60]	; 0x3c
   27dc4:	beq	28178 <__assert_fail@plt+0x167d8>
   27dc8:	cmp	r9, #0
   27dcc:	bne	27e08 <__assert_fail@plt+0x16468>
   27dd0:	ldr	r3, [r1]
   27dd4:	str	r9, [r3, r8, lsl #2]
   27dd8:	ldr	r3, [r2]
   27ddc:	ldrb	r9, [r3, #52]	; 0x34
   27de0:	ands	r9, r9, #64	; 0x40
   27de4:	bne	27f2c <__assert_fail@plt+0x1658c>
   27de8:	mov	r0, r9
   27dec:	add	sp, sp, #100	; 0x64
   27df0:	ldrd	r4, [sp]
   27df4:	ldrd	r6, [sp, #8]
   27df8:	ldrd	r8, [sp, #16]
   27dfc:	ldrd	sl, [sp, #24]
   27e00:	add	sp, sp, #32
   27e04:	pop	{pc}		; (ldr pc, [sp], #4)
   27e08:	mov	r2, r4
   27e0c:	mov	r1, r6
   27e10:	str	r0, [sp, #64]	; 0x40
   27e14:	add	r0, sp, #64	; 0x40
   27e18:	bl	25068 <__assert_fail@plt+0x136c8>
   27e1c:	ldr	r9, [sp, #64]	; 0x40
   27e20:	mov	r2, r0
   27e24:	cmp	r9, #0
   27e28:	bne	27de8 <__assert_fail@plt+0x16448>
   27e2c:	mov	r5, r0
   27e30:	ldr	r7, [r5, #28]!
   27e34:	cmp	r7, #0
   27e38:	bne	27eb8 <__assert_fail@plt+0x16518>
   27e3c:	ldr	r3, [r4, #4]
   27e40:	str	r2, [sp, #24]
   27e44:	lsl	r0, r3, #2
   27e48:	str	r3, [r2, #28]
   27e4c:	str	r9, [r2, #32]
   27e50:	bl	1f0c4 <__assert_fail@plt+0xd724>
   27e54:	ldr	r2, [sp, #24]
   27e58:	cmp	r0, #0
   27e5c:	str	r0, [r2, #36]	; 0x24
   27e60:	beq	27eb0 <__assert_fail@plt+0x16510>
   27e64:	ldr	r3, [r4, #4]
   27e68:	str	r7, [sp, #64]	; 0x40
   27e6c:	cmp	r3, #0
   27e70:	bgt	27e84 <__assert_fail@plt+0x164e4>
   27e74:	b	27eb8 <__assert_fail@plt+0x16518>
   27e78:	ldr	r3, [r4, #4]
   27e7c:	cmp	r7, r3
   27e80:	bge	27eb8 <__assert_fail@plt+0x16518>
   27e84:	ldr	r3, [r4, #8]
   27e88:	mov	r0, r5
   27e8c:	ldr	r1, [r6, #28]
   27e90:	ldr	r3, [r3, r7, lsl #2]
   27e94:	add	r7, r7, #1
   27e98:	add	r3, r3, r3, lsl #1
   27e9c:	add	r1, r1, r3, lsl #2
   27ea0:	bl	20844 <__assert_fail@plt+0xeea4>
   27ea4:	cmp	r0, #0
   27ea8:	str	r0, [sp, #64]	; 0x40
   27eac:	beq	27e78 <__assert_fail@plt+0x164d8>
   27eb0:	mov	r9, #12
   27eb4:	b	27de8 <__assert_fail@plt+0x16448>
   27eb8:	ldr	r3, [sp, #20]
   27ebc:	mov	r2, r5
   27ec0:	mov	r0, r4
   27ec4:	add	r3, r3, #4
   27ec8:	mov	r1, r3
   27ecc:	str	r3, [sp, #36]	; 0x24
   27ed0:	bl	2065c <__assert_fail@plt+0xecbc>
   27ed4:	cmp	r0, #0
   27ed8:	str	r0, [sp, #60]	; 0x3c
   27edc:	bne	286d8 <__assert_fail@plt+0x16d38>
   27ee0:	ldr	r9, [fp, #20]
   27ee4:	cmp	r9, #0
   27ee8:	bne	283f8 <__assert_fail@plt+0x16a58>
   27eec:	mov	r2, r4
   27ef0:	mov	r1, r6
   27ef4:	ldr	r4, [fp]
   27ef8:	add	r0, sp, #60	; 0x3c
   27efc:	bl	25068 <__assert_fail@plt+0x136c8>
   27f00:	ldr	r9, [sp, #60]	; 0x3c
   27f04:	str	r0, [r4, r8, lsl #2]
   27f08:	cmp	r9, #0
   27f0c:	bne	27de8 <__assert_fail@plt+0x16448>
   27f10:	ldr	r3, [sp, #28]
   27f14:	ldr	r2, [sl, #100]	; 0x64
   27f18:	add	r2, r2, r3
   27f1c:	ldr	r3, [r2]
   27f20:	ldrb	r9, [r3, #52]	; 0x34
   27f24:	ands	r9, r9, #64	; 0x40
   27f28:	beq	27de8 <__assert_fail@plt+0x16448>
   27f2c:	ldr	ip, [sl, #108]	; 0x6c
   27f30:	cmp	ip, #0
   27f34:	ble	281b0 <__assert_fail@plt+0x16810>
   27f38:	ldr	r0, [sl, #116]	; 0x74
   27f3c:	mov	r2, ip
   27f40:	mov	lr, #0
   27f44:	add	r3, r2, lr
   27f48:	asr	r3, r3, #1
   27f4c:	add	r1, r3, r3, lsl #1
   27f50:	add	r1, r0, r1, lsl #3
   27f54:	ldr	r1, [r1, #4]
   27f58:	cmp	r8, r1
   27f5c:	bgt	28388 <__assert_fail@plt+0x169e8>
   27f60:	cmp	r3, lr
   27f64:	ble	27fb0 <__assert_fail@plt+0x16610>
   27f68:	add	r2, r3, lr
   27f6c:	asr	r2, r2, #1
   27f70:	add	r1, r2, r2, lsl #1
   27f74:	add	r1, r0, r1, lsl #3
   27f78:	ldr	r1, [r1, #4]
   27f7c:	cmp	r8, r1
   27f80:	ble	27fa0 <__assert_fail@plt+0x16600>
   27f84:	b	2837c <__assert_fail@plt+0x169dc>
   27f88:	add	r1, r3, r3, lsl #1
   27f8c:	add	r1, r0, r1, lsl #3
   27f90:	ldr	r1, [r1, #4]
   27f94:	cmp	r8, r1
   27f98:	bgt	28388 <__assert_fail@plt+0x169e8>
   27f9c:	mov	r2, r3
   27fa0:	add	r3, lr, r2
   27fa4:	cmp	lr, r2
   27fa8:	asr	r3, r3, #1
   27fac:	blt	27f88 <__assert_fail@plt+0x165e8>
   27fb0:	cmp	ip, lr
   27fb4:	str	lr, [sp, #44]	; 0x2c
   27fb8:	ble	281b0 <__assert_fail@plt+0x16810>
   27fbc:	add	r3, lr, lr, lsl #1
   27fc0:	lsl	r3, r3, #3
   27fc4:	add	r0, r0, r3
   27fc8:	str	r3, [sp, #48]	; 0x30
   27fcc:	ldr	r3, [r0, #4]
   27fd0:	cmp	r8, r3
   27fd4:	bne	281b0 <__assert_fail@plt+0x16810>
   27fd8:	ldr	r3, [sp, #20]
   27fdc:	ldr	r7, [sl, #84]	; 0x54
   27fe0:	ldr	r0, [r3, #8]
   27fe4:	mov	r3, #0
   27fe8:	str	r3, [sp, #64]	; 0x40
   27fec:	cmp	r0, r3
   27ff0:	ble	281b0 <__assert_fail@plt+0x16810>
   27ff4:	add	r2, fp, #24
   27ff8:	mov	r9, r8
   27ffc:	mov	r8, r3
   28000:	str	r2, [sp, #36]	; 0x24
   28004:	add	r2, fp, #20
   28008:	str	r2, [sp, #40]	; 0x28
   2800c:	b	28024 <__assert_fail@plt+0x16684>
   28010:	cmp	r3, #4
   28014:	beq	2805c <__assert_fail@plt+0x166bc>
   28018:	add	r8, r8, #1
   2801c:	cmp	r8, r0
   28020:	bge	281a4 <__assert_fail@plt+0x16804>
   28024:	ldr	r3, [sp, #20]
   28028:	ldr	r2, [fp, #8]
   2802c:	ldr	r1, [r3, #12]
   28030:	ldr	r3, [r7]
   28034:	ldr	r6, [r1, r8, lsl #2]
   28038:	add	r3, r3, r6, lsl #3
   2803c:	cmp	r6, r2
   28040:	ldrb	r3, [r3, #4]
   28044:	bne	28010 <__assert_fail@plt+0x16670>
   28048:	ldr	r2, [fp, #12]
   2804c:	cmp	r9, r2
   28050:	beq	28018 <__assert_fail@plt+0x16678>
   28054:	cmp	r3, #4
   28058:	bne	28018 <__assert_fail@plt+0x16678>
   2805c:	add	r3, r6, r6, lsl #1
   28060:	ldr	r4, [sl, #116]	; 0x74
   28064:	lsl	r2, r6, #2
   28068:	str	r8, [sp, #52]	; 0x34
   2806c:	lsl	r3, r3, #2
   28070:	ldr	r5, [sp, #44]	; 0x2c
   28074:	mov	r8, r2
   28078:	str	r3, [sp, #32]
   2807c:	ldr	r3, [sp, #48]	; 0x30
   28080:	add	r4, r4, r3
   28084:	ldr	r3, [r4]
   28088:	cmp	r6, r3
   2808c:	bne	28154 <__assert_fail@plt+0x167b4>
   28090:	ldr	r3, [r4, #8]
   28094:	ldr	ip, [r4, #12]
   28098:	sub	ip, ip, r3
   2809c:	cmp	ip, #0
   280a0:	add	ip, r9, ip
   280a4:	beq	281d4 <__assert_fail@plt+0x16834>
   280a8:	ldr	r3, [r7, #12]
   280ac:	ldr	r0, [r3, r8]
   280b0:	ldr	r3, [fp, #12]
   280b4:	cmp	ip, r3
   280b8:	bgt	28154 <__assert_fail@plt+0x167b4>
   280bc:	ldr	r3, [fp]
   280c0:	ldr	r2, [r3, ip, lsl #2]
   280c4:	cmp	r2, #0
   280c8:	beq	28154 <__assert_fail@plt+0x167b4>
   280cc:	ldr	r3, [r2, #8]
   280d0:	cmp	r3, #0
   280d4:	ble	28154 <__assert_fail@plt+0x167b4>
   280d8:	subs	r3, r3, #1
   280dc:	ldr	lr, [r2, #12]
   280e0:	moveq	r1, r3
   280e4:	beq	28148 <__assert_fail@plt+0x167a8>
   280e8:	mov	r1, #0
   280ec:	str	ip, [sp, #24]
   280f0:	add	r2, r3, r1
   280f4:	lsr	r2, r2, #1
   280f8:	ldr	ip, [lr, r2, lsl #2]
   280fc:	cmp	r0, ip
   28100:	bgt	281c4 <__assert_fail@plt+0x16824>
   28104:	cmp	r2, r1
   28108:	bls	28144 <__assert_fail@plt+0x167a4>
   2810c:	add	r3, r2, r1
   28110:	lsr	r3, r3, #1
   28114:	ldr	ip, [lr, r3, lsl #2]
   28118:	cmp	r0, ip
   2811c:	ble	28134 <__assert_fail@plt+0x16794>
   28120:	b	281b8 <__assert_fail@plt+0x16818>
   28124:	ldr	ip, [lr, r2, lsl #2]
   28128:	cmp	r0, ip
   2812c:	bgt	281c4 <__assert_fail@plt+0x16824>
   28130:	mov	r3, r2
   28134:	add	r2, r1, r3
   28138:	cmp	r1, r3
   2813c:	lsr	r2, r2, #1
   28140:	bcc	28124 <__assert_fail@plt+0x16784>
   28144:	ldr	ip, [sp, #24]
   28148:	ldr	r3, [lr, r1, lsl #2]
   2814c:	cmp	r0, r3
   28150:	beq	281ec <__assert_fail@plt+0x1684c>
   28154:	ldrb	r3, [r4, #20]
   28158:	add	r5, r5, #1
   2815c:	add	r4, r4, #24
   28160:	cmp	r3, #0
   28164:	bne	28084 <__assert_fail@plt+0x166e4>
   28168:	ldr	r3, [sp, #20]
   2816c:	ldr	r8, [sp, #52]	; 0x34
   28170:	ldr	r0, [r3, #8]
   28174:	b	28018 <__assert_fail@plt+0x16678>
   28178:	ldr	r5, [r1]
   2817c:	cmp	r9, r0
   28180:	streq	r9, [r5, r8, lsl #2]
   28184:	beq	27de8 <__assert_fail@plt+0x16448>
   28188:	mov	r2, r4
   2818c:	mov	r1, r6
   28190:	add	r0, sp, #60	; 0x3c
   28194:	bl	25068 <__assert_fail@plt+0x136c8>
   28198:	str	r0, [r5, r8, lsl #2]
   2819c:	ldr	r9, [sp, #60]	; 0x3c
   281a0:	b	27de8 <__assert_fail@plt+0x16448>
   281a4:	ldr	r3, [sp, #64]	; 0x40
   281a8:	cmp	r3, #0
   281ac:	bne	287b8 <__assert_fail@plt+0x16e18>
   281b0:	mov	r9, #0
   281b4:	b	27de8 <__assert_fail@plt+0x16448>
   281b8:	mov	r1, r3
   281bc:	mov	r3, r2
   281c0:	mov	r2, r1
   281c4:	add	r1, r2, #1
   281c8:	cmp	r3, r1
   281cc:	bhi	280f0 <__assert_fail@plt+0x16750>
   281d0:	b	28144 <__assert_fail@plt+0x167a4>
   281d4:	ldr	r3, [r7, #20]
   281d8:	ldr	r2, [sp, #32]
   281dc:	add	r3, r3, r2
   281e0:	ldr	r3, [r3, #8]
   281e4:	ldr	r0, [r3]
   281e8:	b	280b0 <__assert_fail@plt+0x16710>
   281ec:	mov	r3, r6
   281f0:	str	r9, [sp]
   281f4:	stmib	sp, {r0, ip}
   281f8:	mov	r0, sl
   281fc:	ldr	r2, [sp, #36]	; 0x24
   28200:	ldr	r1, [sp, #40]	; 0x28
   28204:	bl	230e4 <__assert_fail@plt+0x11744>
   28208:	cmp	r0, #0
   2820c:	bne	28154 <__assert_fail@plt+0x167b4>
   28210:	ldr	r1, [sp, #64]	; 0x40
   28214:	cmp	r1, #0
   28218:	beq	28398 <__assert_fail@plt+0x169f8>
   2821c:	add	r4, sp, #64	; 0x40
   28220:	add	r0, sp, #80	; 0x50
   28224:	mov	r1, r5
   28228:	str	r6, [sp, #72]	; 0x48
   2822c:	str	r9, [sp, #76]	; 0x4c
   28230:	bl	20448 <__assert_fail@plt+0xeaa8>
   28234:	cmp	r0, #0
   28238:	beq	28748 <__assert_fail@plt+0x16da8>
   2823c:	ldr	r2, [sp, #28]
   28240:	mov	r1, r4
   28244:	mov	r0, sl
   28248:	ldr	r3, [sp, #64]	; 0x40
   2824c:	ldr	r4, [r3, r2]
   28250:	bl	287c0 <__assert_fail@plt+0x16e20>
   28254:	cmp	r0, #0
   28258:	bne	286e0 <__assert_fail@plt+0x16d40>
   2825c:	ldr	r1, [fp, #4]
   28260:	ldr	r2, [sp, #64]	; 0x40
   28264:	cmp	r1, #0
   28268:	beq	28284 <__assert_fail@plt+0x168e4>
   2826c:	add	r3, r9, #1
   28270:	mov	r0, r7
   28274:	bl	27cac <__assert_fail@plt+0x1630c>
   28278:	cmp	r0, #0
   2827c:	bne	286e0 <__assert_fail@plt+0x16d40>
   28280:	ldr	r2, [sp, #64]	; 0x40
   28284:	ldr	r3, [sp, #28]
   28288:	ldr	lr, [sp, #84]	; 0x54
   2828c:	str	r4, [r2, r3]
   28290:	cmp	lr, #0
   28294:	ble	28314 <__assert_fail@plt+0x16974>
   28298:	sub	r4, lr, #1
   2829c:	ldr	r1, [sp, #88]	; 0x58
   282a0:	cmp	r4, #0
   282a4:	mov	r0, r4
   282a8:	movne	r2, #0
   282ac:	beq	28790 <__assert_fail@plt+0x16df0>
   282b0:	add	r3, r0, r2
   282b4:	lsr	r3, r3, #1
   282b8:	ldr	ip, [r1, r3, lsl #2]
   282bc:	cmp	r5, ip
   282c0:	bgt	2836c <__assert_fail@plt+0x169cc>
   282c4:	cmp	r3, r2
   282c8:	bls	28304 <__assert_fail@plt+0x16964>
   282cc:	add	r0, r3, r2
   282d0:	lsr	r0, r0, #1
   282d4:	ldr	ip, [r1, r0, lsl #2]
   282d8:	cmp	r5, ip
   282dc:	ble	282f4 <__assert_fail@plt+0x16954>
   282e0:	b	28360 <__assert_fail@plt+0x169c0>
   282e4:	ldr	ip, [r1, r3, lsl #2]
   282e8:	cmp	r5, ip
   282ec:	bgt	2836c <__assert_fail@plt+0x169cc>
   282f0:	mov	r0, r3
   282f4:	add	r3, r2, r0
   282f8:	cmp	r2, r0
   282fc:	lsr	r3, r3, #1
   28300:	bcc	282e4 <__assert_fail@plt+0x16944>
   28304:	lsl	r3, r2, #2
   28308:	ldr	r3, [r1, r3]!
   2830c:	cmp	r5, r3
   28310:	beq	28324 <__assert_fail@plt+0x16984>
   28314:	ldr	r4, [sl, #116]	; 0x74
   28318:	add	r3, r5, r5, lsl #1
   2831c:	add	r4, r4, r3, lsl #3
   28320:	b	28154 <__assert_fail@plt+0x167b4>
   28324:	cmp	lr, r2
   28328:	movgt	lr, #0
   2832c:	movle	lr, #1
   28330:	orrs	r3, lr, r2, lsr #31
   28334:	bne	28314 <__assert_fail@plt+0x16974>
   28338:	cmp	r2, r4
   2833c:	str	r4, [sp, #84]	; 0x54
   28340:	bge	28314 <__assert_fail@plt+0x16974>
   28344:	ldr	r3, [r1, #4]
   28348:	add	r2, r2, #1
   2834c:	str	r3, [r1], #4
   28350:	ldr	r3, [sp, #84]	; 0x54
   28354:	cmp	r2, r3
   28358:	blt	28344 <__assert_fail@plt+0x169a4>
   2835c:	b	28314 <__assert_fail@plt+0x16974>
   28360:	mov	r2, r0
   28364:	mov	r0, r3
   28368:	mov	r3, r2
   2836c:	add	r2, r3, #1
   28370:	cmp	r2, r0
   28374:	bcc	282b0 <__assert_fail@plt+0x16910>
   28378:	b	28304 <__assert_fail@plt+0x16964>
   2837c:	mov	r1, r2
   28380:	mov	r2, r3
   28384:	mov	r3, r1
   28388:	add	lr, r3, #1
   2838c:	cmp	lr, r2
   28390:	blt	27f44 <__assert_fail@plt+0x165a4>
   28394:	b	27fb0 <__assert_fail@plt+0x16610>
   28398:	ldrd	r2, [fp]
   2839c:	add	r4, sp, #64	; 0x40
   283a0:	ldr	ip, [fp, #20]
   283a4:	ldr	r0, [fp, #24]
   283a8:	strd	r2, [sp, #64]	; 0x40
   283ac:	ldrd	r2, [fp, #8]
   283b0:	cmp	ip, #0
   283b4:	strd	r2, [r4, #8]
   283b8:	ldrd	r2, [fp, #16]
   283bc:	str	r0, [r4, #24]
   283c0:	strd	r2, [r4, #16]
   283c4:	ble	286fc <__assert_fail@plt+0x16d5c>
   283c8:	lsl	r0, ip, #2
   283cc:	str	ip, [sp, #80]	; 0x50
   283d0:	bl	1f0c4 <__assert_fail@plt+0xd724>
   283d4:	cmp	r0, #0
   283d8:	str	r0, [sp, #88]	; 0x58
   283dc:	beq	287a4 <__assert_fail@plt+0x16e04>
   283e0:	ldr	r2, [fp, #20]
   283e4:	ldr	r1, [fp, #24]
   283e8:	lsl	r2, r2, #2
   283ec:	bl	115d4 <memcpy@plt>
   283f0:	add	r0, sp, #80	; 0x50
   283f4:	b	28224 <__assert_fail@plt+0x16884>
   283f8:	ldr	r3, [sl, #116]	; 0x74
   283fc:	str	r3, [sp, #32]
   28400:	ble	284f0 <__assert_fail@plt+0x16b50>
   28404:	mov	r7, r0
   28408:	str	r9, [sp, #24]
   2840c:	mov	r9, r8
   28410:	str	sl, [sp, #48]	; 0x30
   28414:	ldr	r3, [fp, #24]
   28418:	ldr	r0, [sp, #32]
   2841c:	ldr	r3, [r3, r7, lsl #2]
   28420:	add	r3, r3, r3, lsl #1
   28424:	add	r2, r0, r3, lsl #3
   28428:	ldr	r1, [r2, #8]
   2842c:	cmp	r9, r1
   28430:	ble	284d8 <__assert_fail@plt+0x16b38>
   28434:	ldr	r1, [r2, #4]
   28438:	cmp	r9, r1
   2843c:	bgt	284d8 <__assert_fail@plt+0x16b38>
   28440:	ldr	r1, [r2, #12]
   28444:	ldr	r2, [r0, r3, lsl #3]
   28448:	ldr	r3, [r6]
   2844c:	cmp	r9, r1
   28450:	ldr	r0, [r4, #4]
   28454:	ldr	r8, [r3, r2, lsl #3]
   28458:	str	r0, [sp, #40]	; 0x28
   2845c:	beq	284fc <__assert_fail@plt+0x16b5c>
   28460:	cmp	r0, #0
   28464:	ble	284d8 <__assert_fail@plt+0x16b38>
   28468:	mov	r5, #0
   2846c:	ldr	sl, [sp, #36]	; 0x24
   28470:	b	28480 <__assert_fail@plt+0x16ae0>
   28474:	cmp	r5, r0
   28478:	bge	284d0 <__assert_fail@plt+0x16b30>
   2847c:	ldr	r3, [r6]
   28480:	ldr	r2, [r4, #8]
   28484:	ldr	r1, [r2, r5, lsl #2]
   28488:	add	r5, r5, #1
   2848c:	add	r2, r3, r1, lsl #3
   28490:	ldrb	r2, [r2, #4]
   28494:	sub	r2, r2, #8
   28498:	cmp	r2, #1
   2849c:	bhi	28474 <__assert_fail@plt+0x16ad4>
   284a0:	ldr	r3, [r3, r1, lsl #3]
   284a4:	cmp	r8, r3
   284a8:	bne	28474 <__assert_fail@plt+0x16ad4>
   284ac:	mov	r3, sl
   284b0:	mov	r2, r4
   284b4:	mov	r0, r6
   284b8:	bl	247a8 <__assert_fail@plt+0x12e08>
   284bc:	cmp	r0, #0
   284c0:	bne	286d8 <__assert_fail@plt+0x16d38>
   284c4:	ldr	r0, [r4, #4]
   284c8:	cmp	r5, r0
   284cc:	blt	2847c <__assert_fail@plt+0x16adc>
   284d0:	ldr	r3, [fp, #20]
   284d4:	str	r3, [sp, #24]
   284d8:	ldr	r3, [sp, #24]
   284dc:	add	r7, r7, #1
   284e0:	cmp	r7, r3
   284e4:	blt	28414 <__assert_fail@plt+0x16a74>
   284e8:	ldr	sl, [sp, #48]	; 0x30
   284ec:	mov	r8, r9
   284f0:	mov	r3, #0
   284f4:	str	r3, [sp, #60]	; 0x3c
   284f8:	b	27eec <__assert_fail@plt+0x1654c>
   284fc:	cmp	r0, #0
   28500:	ble	284d8 <__assert_fail@plt+0x16b38>
   28504:	ldr	sl, [r4, #8]
   28508:	mvn	r5, #0
   2850c:	mov	r1, r5
   28510:	str	r6, [sp, #44]	; 0x2c
   28514:	add	r2, sl, r0, lsl #2
   28518:	mov	r0, sl
   2851c:	mov	r6, r2
   28520:	b	28540 <__assert_fail@plt+0x16ba0>
   28524:	cmp	ip, #9
   28528:	bne	28538 <__assert_fail@plt+0x16b98>
   2852c:	ldr	ip, [lr]
   28530:	cmp	r8, ip
   28534:	moveq	r5, r2
   28538:	cmp	r6, r0
   2853c:	beq	28568 <__assert_fail@plt+0x16bc8>
   28540:	ldr	r2, [r0], #4
   28544:	add	lr, r3, r2, lsl #3
   28548:	ldrb	ip, [lr, #4]
   2854c:	cmp	ip, #8
   28550:	bne	28524 <__assert_fail@plt+0x16b84>
   28554:	ldr	ip, [r3, r2, lsl #3]
   28558:	cmp	r8, ip
   2855c:	moveq	r1, r2
   28560:	cmp	r6, r0
   28564:	bne	28540 <__assert_fail@plt+0x16ba0>
   28568:	cmp	r1, #0
   2856c:	ldr	r6, [sp, #44]	; 0x2c
   28570:	bge	28710 <__assert_fail@plt+0x16d70>
   28574:	cmp	r5, #0
   28578:	blt	284d8 <__assert_fail@plt+0x16b38>
   2857c:	mov	r3, sl
   28580:	ldr	sl, [sp, #40]	; 0x28
   28584:	mov	r8, #0
   28588:	ldr	r1, [r3, r8, lsl #2]
   2858c:	ldr	r3, [r6, #28]
   28590:	add	lr, r1, r1, lsl #1
   28594:	lsl	lr, lr, #2
   28598:	add	r3, r3, lr
   2859c:	ldr	r2, [r3, #4]
   285a0:	cmp	r2, #0
   285a4:	ble	28624 <__assert_fail@plt+0x16c84>
   285a8:	subs	r2, r2, #1
   285ac:	ldr	ip, [r3, #8]
   285b0:	moveq	r0, r2
   285b4:	beq	28618 <__assert_fail@plt+0x16c78>
   285b8:	mov	r0, #0
   285bc:	str	r1, [sp, #24]
   285c0:	add	r3, r2, r0
   285c4:	lsr	r3, r3, #1
   285c8:	ldr	r1, [ip, r3, lsl #2]
   285cc:	cmp	r5, r1
   285d0:	bgt	2875c <__assert_fail@plt+0x16dbc>
   285d4:	cmp	r3, r0
   285d8:	bls	28614 <__assert_fail@plt+0x16c74>
   285dc:	add	r2, r3, r0
   285e0:	lsr	r2, r2, #1
   285e4:	ldr	r1, [ip, r2, lsl #2]
   285e8:	cmp	r5, r1
   285ec:	ble	28604 <__assert_fail@plt+0x16c64>
   285f0:	b	28750 <__assert_fail@plt+0x16db0>
   285f4:	ldr	r1, [ip, r3, lsl #2]
   285f8:	cmp	r5, r1
   285fc:	bgt	2875c <__assert_fail@plt+0x16dbc>
   28600:	mov	r2, r3
   28604:	add	r3, r0, r2
   28608:	cmp	r0, r2
   2860c:	lsr	r3, r3, #1
   28610:	bcc	285f4 <__assert_fail@plt+0x16c54>
   28614:	ldr	r1, [sp, #24]
   28618:	ldr	r3, [ip, r0, lsl #2]
   2861c:	cmp	r5, r3
   28620:	beq	2876c <__assert_fail@plt+0x16dcc>
   28624:	ldr	r3, [r6, #24]
   28628:	add	lr, r3, lr
   2862c:	ldr	r2, [lr, #4]
   28630:	cmp	r2, #0
   28634:	ble	286ac <__assert_fail@plt+0x16d0c>
   28638:	subs	r2, r2, #1
   2863c:	ldr	ip, [lr, #8]
   28640:	moveq	r0, r2
   28644:	beq	286a0 <__assert_fail@plt+0x16d00>
   28648:	mov	r0, #0
   2864c:	add	r3, r2, r0
   28650:	lsr	r3, r3, #1
   28654:	ldr	lr, [ip, r3, lsl #2]
   28658:	cmp	lr, r5
   2865c:	blt	28780 <__assert_fail@plt+0x16de0>
   28660:	cmp	r3, r0
   28664:	bls	286a0 <__assert_fail@plt+0x16d00>
   28668:	add	r2, r3, r0
   2866c:	lsr	r2, r2, #1
   28670:	ldr	lr, [ip, r2, lsl #2]
   28674:	cmp	r5, lr
   28678:	ble	28690 <__assert_fail@plt+0x16cf0>
   2867c:	b	28774 <__assert_fail@plt+0x16dd4>
   28680:	ldr	lr, [ip, r3, lsl #2]
   28684:	cmp	r5, lr
   28688:	bgt	28780 <__assert_fail@plt+0x16de0>
   2868c:	mov	r2, r3
   28690:	add	r3, r0, r2
   28694:	cmp	r0, r2
   28698:	lsr	r3, r3, #1
   2869c:	bcc	28680 <__assert_fail@plt+0x16ce0>
   286a0:	ldr	r3, [ip, r0, lsl #2]
   286a4:	cmp	r5, r3
   286a8:	beq	2876c <__assert_fail@plt+0x16dcc>
   286ac:	mov	r2, r4
   286b0:	mov	r0, r6
   286b4:	ldr	r3, [sp, #36]	; 0x24
   286b8:	bl	247a8 <__assert_fail@plt+0x12e08>
   286bc:	cmp	r0, #0
   286c0:	bne	286d8 <__assert_fail@plt+0x16d38>
   286c4:	ldr	sl, [r4, #4]
   286c8:	cmp	sl, r8
   286cc:	ble	284d0 <__assert_fail@plt+0x16b30>
   286d0:	ldr	r3, [r4, #8]
   286d4:	b	28588 <__assert_fail@plt+0x16be8>
   286d8:	mov	r9, r0
   286dc:	b	27de8 <__assert_fail@plt+0x16448>
   286e0:	mov	r9, r0
   286e4:	ldr	r3, [sp, #64]	; 0x40
   286e8:	cmp	r3, #0
   286ec:	beq	27de8 <__assert_fail@plt+0x16448>
   286f0:	ldr	r0, [sp, #88]	; 0x58
   286f4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   286f8:	b	27de8 <__assert_fail@plt+0x16448>
   286fc:	add	r0, sp, #80	; 0x50
   28700:	str	r1, [sp, #80]	; 0x50
   28704:	str	r1, [r0, #4]
   28708:	str	r1, [r0, #8]
   2870c:	b	28224 <__assert_fail@plt+0x16884>
   28710:	mov	r2, r4
   28714:	mov	r0, r6
   28718:	ldr	r3, [sp, #36]	; 0x24
   2871c:	bl	247a8 <__assert_fail@plt+0x12e08>
   28720:	cmp	r0, #0
   28724:	bne	286d8 <__assert_fail@plt+0x16d38>
   28728:	cmp	r5, #0
   2872c:	blt	284d0 <__assert_fail@plt+0x16b30>
   28730:	ldr	r3, [r4, #4]
   28734:	cmp	r3, #0
   28738:	str	r3, [sp, #40]	; 0x28
   2873c:	ble	284d0 <__assert_fail@plt+0x16b30>
   28740:	ldr	sl, [r4, #8]
   28744:	b	2857c <__assert_fail@plt+0x16bdc>
   28748:	mov	r9, #12
   2874c:	b	286e4 <__assert_fail@plt+0x16d44>
   28750:	mov	r0, r2
   28754:	mov	r2, r3
   28758:	mov	r3, r0
   2875c:	add	r0, r3, #1
   28760:	cmp	r0, r2
   28764:	bcc	285c0 <__assert_fail@plt+0x16c20>
   28768:	b	28614 <__assert_fail@plt+0x16c74>
   2876c:	add	r8, r8, #1
   28770:	b	286c8 <__assert_fail@plt+0x16d28>
   28774:	mov	r0, r2
   28778:	mov	r2, r3
   2877c:	mov	r3, r0
   28780:	add	r0, r3, #1
   28784:	cmp	r0, r2
   28788:	bcc	2864c <__assert_fail@plt+0x16cac>
   2878c:	b	286a0 <__assert_fail@plt+0x16d00>
   28790:	ldr	r3, [r1]
   28794:	cmp	r3, r5
   28798:	bne	28314 <__assert_fail@plt+0x16974>
   2879c:	mov	r2, r4
   287a0:	b	28338 <__assert_fail@plt+0x16998>
   287a4:	mov	r2, #0
   287a8:	mov	r3, #0
   287ac:	mov	r9, #12
   287b0:	strd	r2, [sp, #80]	; 0x50
   287b4:	b	286e4 <__assert_fail@plt+0x16d44>
   287b8:	mov	r9, #0
   287bc:	b	286f0 <__assert_fail@plt+0x16d50>
   287c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   287c4:	ldr	r4, [r1, #8]
   287c8:	strd	r6, [sp, #8]
   287cc:	mov	r6, #1
   287d0:	strd	r8, [sp, #16]
   287d4:	strd	sl, [sp, #24]
   287d8:	mov	sl, r0
   287dc:	mov	r0, #4
   287e0:	str	lr, [sp, #32]
   287e4:	sub	sp, sp, #68	; 0x44
   287e8:	mov	fp, r1
   287ec:	ldr	r9, [r1, #12]
   287f0:	str	r6, [sp, #48]	; 0x30
   287f4:	str	r6, [sp, #52]	; 0x34
   287f8:	bl	1f0c4 <__assert_fail@plt+0xd724>
   287fc:	cmp	r0, #0
   28800:	str	r0, [sp, #56]	; 0x38
   28804:	beq	28ccc <__assert_fail@plt+0x1732c>
   28808:	mov	r2, r9
   2880c:	add	r3, sp, #48	; 0x30
   28810:	str	r4, [r0]
   28814:	mov	r1, fp
   28818:	mov	r0, sl
   2881c:	bl	27d70 <__assert_fail@plt+0x163d0>
   28820:	subs	r4, r0, #0
   28824:	bne	28ca8 <__assert_fail@plt+0x17308>
   28828:	cmp	r9, #0
   2882c:	movgt	r5, r6
   28830:	strgt	r4, [sp, #24]
   28834:	strgt	r6, [sp, #40]	; 0x28
   28838:	strgt	r5, [sp, #44]	; 0x2c
   2883c:	ble	28ca8 <__assert_fail@plt+0x17308>
   28840:	ldr	r0, [fp]
   28844:	lsl	r3, r9, #2
   28848:	str	r3, [sp, #20]
   2884c:	ldr	r3, [r0, r9, lsl #2]
   28850:	cmp	r3, #0
   28854:	ldreq	r3, [sp, #24]
   28858:	movne	r3, #0
   2885c:	addeq	r3, r3, #1
   28860:	mov	r2, r3
   28864:	str	r3, [sp, #24]
   28868:	ldr	r3, [sl, #120]	; 0x78
   2886c:	cmp	r3, r2
   28870:	blt	28cb0 <__assert_fail@plt+0x17310>
   28874:	mov	r2, #0
   28878:	ldr	r3, [sl, #100]	; 0x64
   2887c:	sub	r9, r9, #1
   28880:	str	r2, [sp, #52]	; 0x34
   28884:	ldr	r2, [sp, #20]
   28888:	add	r3, r3, r2
   2888c:	ldr	r5, [r3, #-4]
   28890:	cmp	r5, #0
   28894:	beq	28b4c <__assert_fail@plt+0x171ac>
   28898:	ldr	r3, [r5, #20]
   2889c:	ldr	r7, [sl, #84]	; 0x54
   288a0:	cmp	r3, #0
   288a4:	ble	28b4c <__assert_fail@plt+0x171ac>
   288a8:	ldr	r3, [r5, #24]
   288ac:	add	r2, fp, #24
   288b0:	mov	r8, #0
   288b4:	ldr	r1, [r7]
   288b8:	str	r2, [sp, #32]
   288bc:	add	r2, fp, #20
   288c0:	ldr	r4, [r3]
   288c4:	str	r2, [sp, #36]	; 0x24
   288c8:	lsl	r6, r4, #3
   288cc:	add	r1, r1, r6
   288d0:	ldrb	r3, [r1, #6]
   288d4:	str	r6, [sp, #16]
   288d8:	mov	r6, r8
   288dc:	mov	r8, r5
   288e0:	tst	r3, #16
   288e4:	bne	289cc <__assert_fail@plt+0x1702c>
   288e8:	mov	r2, r9
   288ec:	mov	r0, sl
   288f0:	bl	20b20 <__assert_fail@plt+0xf180>
   288f4:	cmp	r0, #0
   288f8:	beq	28998 <__assert_fail@plt+0x16ff8>
   288fc:	ldr	r3, [fp]
   28900:	ldr	r2, [sp, #20]
   28904:	ldr	r2, [r3, r2]
   28908:	cmp	r2, #0
   2890c:	beq	28998 <__assert_fail@plt+0x16ff8>
   28910:	ldr	r3, [r2, #8]
   28914:	cmp	r3, #0
   28918:	ble	28998 <__assert_fail@plt+0x16ff8>
   2891c:	ldr	r1, [r7, #12]
   28920:	subs	r3, r3, #1
   28924:	ldr	ip, [r2, #12]
   28928:	ldr	r0, [r1, r4, lsl #2]
   2892c:	moveq	r1, r3
   28930:	beq	2898c <__assert_fail@plt+0x16fec>
   28934:	mov	r1, #0
   28938:	add	r2, r3, r1
   2893c:	lsr	r2, r2, #1
   28940:	ldr	lr, [ip, r2, lsl #2]
   28944:	cmp	r0, lr
   28948:	bgt	28abc <__assert_fail@plt+0x1711c>
   2894c:	cmp	r2, r1
   28950:	bls	2898c <__assert_fail@plt+0x16fec>
   28954:	add	r3, r2, r1
   28958:	lsr	r3, r3, #1
   2895c:	ldr	lr, [ip, r3, lsl #2]
   28960:	cmp	r0, lr
   28964:	ble	2897c <__assert_fail@plt+0x16fdc>
   28968:	b	28ab0 <__assert_fail@plt+0x17110>
   2896c:	ldr	lr, [ip, r2, lsl #2]
   28970:	cmp	r0, lr
   28974:	bgt	28abc <__assert_fail@plt+0x1711c>
   28978:	mov	r3, r2
   2897c:	add	r2, r1, r3
   28980:	cmp	r1, r3
   28984:	lsr	r2, r2, #1
   28988:	bcc	2896c <__assert_fail@plt+0x16fcc>
   2898c:	ldr	r3, [ip, r1, lsl #2]
   28990:	cmp	r0, r3
   28994:	beq	28ad4 <__assert_fail@plt+0x17134>
   28998:	ldr	r3, [r8, #20]
   2899c:	add	r6, r6, #1
   289a0:	cmp	r6, r3
   289a4:	bge	28b4c <__assert_fail@plt+0x171ac>
   289a8:	ldr	r3, [r8, #24]
   289ac:	ldr	r1, [r7]
   289b0:	ldr	r4, [r3, r6, lsl #2]
   289b4:	lsl	r3, r4, #3
   289b8:	add	r1, r1, r3
   289bc:	str	r3, [sp, #16]
   289c0:	ldrb	r3, [r1, #6]
   289c4:	tst	r3, #16
   289c8:	beq	288e8 <__assert_fail@plt+0x16f48>
   289cc:	ldr	r1, [fp, #12]
   289d0:	mov	r3, sl
   289d4:	mov	r2, r4
   289d8:	ldr	r5, [sl, #84]	; 0x54
   289dc:	str	r1, [sp, #28]
   289e0:	mov	r1, r5
   289e4:	ldr	r0, [r1], #128	; 0x80
   289e8:	str	r9, [sp]
   289ec:	bl	236dc <__assert_fail@plt+0x11d3c>
   289f0:	cmp	r0, #0
   289f4:	ble	28b9c <__assert_fail@plt+0x171fc>
   289f8:	ldr	r1, [sp, #28]
   289fc:	add	r3, r9, r0
   28a00:	cmp	r1, r3
   28a04:	blt	28ad8 <__assert_fail@plt+0x17138>
   28a08:	ldr	r2, [fp]
   28a0c:	ldr	r3, [r2, r3, lsl #2]
   28a10:	cmp	r3, #0
   28a14:	beq	28aa0 <__assert_fail@plt+0x17100>
   28a18:	ldr	r2, [r3, #8]
   28a1c:	cmp	r2, #0
   28a20:	ble	28aa0 <__assert_fail@plt+0x17100>
   28a24:	ldr	r1, [r5, #12]
   28a28:	subs	r2, r2, #1
   28a2c:	ldr	lr, [r3, #12]
   28a30:	ldr	ip, [r1, r4, lsl #2]
   28a34:	moveq	r1, r2
   28a38:	beq	28a94 <__assert_fail@plt+0x170f4>
   28a3c:	mov	r1, #0
   28a40:	add	r3, r2, r1
   28a44:	lsr	r3, r3, #1
   28a48:	ldr	r5, [lr, r3, lsl #2]
   28a4c:	cmp	ip, r5
   28a50:	bgt	28c24 <__assert_fail@plt+0x17284>
   28a54:	cmp	r3, r1
   28a58:	bls	28a94 <__assert_fail@plt+0x170f4>
   28a5c:	add	r2, r3, r1
   28a60:	lsr	r2, r2, #1
   28a64:	ldr	r5, [lr, r2, lsl #2]
   28a68:	cmp	ip, r5
   28a6c:	ble	28a84 <__assert_fail@plt+0x170e4>
   28a70:	b	28c18 <__assert_fail@plt+0x17278>
   28a74:	ldr	r5, [lr, r3, lsl #2]
   28a78:	cmp	ip, r5
   28a7c:	bgt	28c24 <__assert_fail@plt+0x17284>
   28a80:	mov	r2, r3
   28a84:	add	r3, r1, r2
   28a88:	cmp	r1, r2
   28a8c:	lsr	r3, r3, #1
   28a90:	bcc	28a74 <__assert_fail@plt+0x170d4>
   28a94:	ldr	r3, [lr, r1, lsl #2]
   28a98:	cmp	ip, r3
   28a9c:	beq	28ad8 <__assert_fail@plt+0x17138>
   28aa0:	ldr	r1, [r7]
   28aa4:	ldr	r3, [sp, #16]
   28aa8:	add	r1, r1, r3
   28aac:	b	288e8 <__assert_fail@plt+0x16f48>
   28ab0:	mov	r1, r3
   28ab4:	mov	r3, r2
   28ab8:	mov	r2, r1
   28abc:	add	r1, r2, #1
   28ac0:	cmp	r3, r1
   28ac4:	bhi	28938 <__assert_fail@plt+0x16f98>
   28ac8:	ldr	r3, [ip, r1, lsl #2]
   28acc:	cmp	r0, r3
   28ad0:	bne	28998 <__assert_fail@plt+0x16ff8>
   28ad4:	mov	r0, #1
   28ad8:	ldr	r3, [fp, #20]
   28adc:	cmp	r3, #0
   28ae0:	beq	28b10 <__assert_fail@plt+0x17170>
   28ae4:	ldr	r3, [r7, #12]
   28ae8:	add	ip, r9, r0
   28aec:	mov	r0, sl
   28af0:	ldr	r2, [sp, #32]
   28af4:	ldr	r1, [sp, #36]	; 0x24
   28af8:	ldr	r3, [r3, r4, lsl #2]
   28afc:	str	ip, [sp]
   28b00:	stmib	sp, {r4, r9}
   28b04:	bl	230e4 <__assert_fail@plt+0x11744>
   28b08:	cmp	r0, #0
   28b0c:	bne	28998 <__assert_fail@plt+0x16ff8>
   28b10:	ldr	r1, [sp, #48]	; 0x30
   28b14:	cmp	r1, #0
   28b18:	beq	28ba4 <__assert_fail@plt+0x17204>
   28b1c:	ldr	r3, [sp, #52]	; 0x34
   28b20:	ldr	r5, [sp, #56]	; 0x38
   28b24:	cmp	r3, #0
   28b28:	bne	28bd0 <__assert_fail@plt+0x17230>
   28b2c:	str	r4, [r5]
   28b30:	add	r6, r6, #1
   28b34:	ldr	r3, [sp, #52]	; 0x34
   28b38:	add	r3, r3, #1
   28b3c:	str	r3, [sp, #52]	; 0x34
   28b40:	ldr	r3, [r8, #20]
   28b44:	cmp	r6, r3
   28b48:	blt	289a8 <__assert_fail@plt+0x17008>
   28b4c:	add	r3, sp, #48	; 0x30
   28b50:	mov	r2, r9
   28b54:	mov	r1, fp
   28b58:	mov	r0, sl
   28b5c:	bl	27d70 <__assert_fail@plt+0x163d0>
   28b60:	cmp	r0, #0
   28b64:	bne	28b70 <__assert_fail@plt+0x171d0>
   28b68:	cmp	r9, #0
   28b6c:	bne	28840 <__assert_fail@plt+0x16ea0>
   28b70:	mov	r4, r0
   28b74:	ldr	r0, [sp, #56]	; 0x38
   28b78:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   28b7c:	mov	r0, r4
   28b80:	add	sp, sp, #68	; 0x44
   28b84:	ldrd	r4, [sp]
   28b88:	ldrd	r6, [sp, #8]
   28b8c:	ldrd	r8, [sp, #16]
   28b90:	ldrd	sl, [sp, #24]
   28b94:	add	sp, sp, #32
   28b98:	pop	{pc}		; (ldr pc, [sp], #4)
   28b9c:	beq	28aa0 <__assert_fail@plt+0x17100>
   28ba0:	b	28ad8 <__assert_fail@plt+0x17138>
   28ba4:	ldr	r3, [sp, #40]	; 0x28
   28ba8:	mov	r0, #4
   28bac:	str	r3, [sp, #48]	; 0x30
   28bb0:	ldr	r3, [sp, #44]	; 0x2c
   28bb4:	str	r3, [sp, #52]	; 0x34
   28bb8:	bl	1f0c4 <__assert_fail@plt+0xd724>
   28bbc:	cmp	r0, #0
   28bc0:	str	r0, [sp, #56]	; 0x38
   28bc4:	beq	28c6c <__assert_fail@plt+0x172cc>
   28bc8:	str	r4, [r0]
   28bcc:	b	28998 <__assert_fail@plt+0x16ff8>
   28bd0:	cmp	r1, r3
   28bd4:	beq	28c80 <__assert_fail@plt+0x172e0>
   28bd8:	ldr	r1, [r5]
   28bdc:	mov	r2, r3
   28be0:	cmp	r1, r4
   28be4:	ble	28c34 <__assert_fail@plt+0x17294>
   28be8:	cmp	r3, #0
   28bec:	ble	28c04 <__assert_fail@plt+0x17264>
   28bf0:	lsl	r2, r3, #2
   28bf4:	mov	r1, r5
   28bf8:	add	r0, r5, #4
   28bfc:	bl	1158c <memmove@plt>
   28c00:	mov	r2, #0
   28c04:	str	r4, [r5, r2, lsl #2]
   28c08:	ldr	r3, [sp, #52]	; 0x34
   28c0c:	add	r3, r3, #1
   28c10:	str	r3, [sp, #52]	; 0x34
   28c14:	b	28998 <__assert_fail@plt+0x16ff8>
   28c18:	mov	r1, r2
   28c1c:	mov	r2, r3
   28c20:	mov	r3, r1
   28c24:	add	r1, r3, #1
   28c28:	cmp	r1, r2
   28c2c:	bcc	28a40 <__assert_fail@plt+0x170a0>
   28c30:	b	28a94 <__assert_fail@plt+0x170f4>
   28c34:	sub	r1, r3, #-1073741823	; 0xc0000001
   28c38:	ldr	r0, [r5, r1, lsl #2]
   28c3c:	lsl	r1, r1, #2
   28c40:	cmp	r0, r4
   28c44:	ble	28c04 <__assert_fail@plt+0x17264>
   28c48:	add	r1, r1, #4
   28c4c:	add	r1, r5, r1
   28c50:	str	r0, [r1], #-4
   28c54:	sub	r3, r3, #1
   28c58:	ldr	r0, [r1, #-4]
   28c5c:	mov	r2, r3
   28c60:	cmp	r0, r4
   28c64:	bgt	28c50 <__assert_fail@plt+0x172b0>
   28c68:	b	28c04 <__assert_fail@plt+0x17264>
   28c6c:	mov	r2, #0
   28c70:	mov	r3, #0
   28c74:	mov	r4, #12
   28c78:	strd	r2, [sp, #48]	; 0x30
   28c7c:	b	28b78 <__assert_fail@plt+0x171d8>
   28c80:	lsl	r3, r1, #1
   28c84:	mov	r0, r5
   28c88:	lsl	r1, r1, #3
   28c8c:	str	r3, [sp, #48]	; 0x30
   28c90:	bl	1f170 <__assert_fail@plt+0xd7d0>
   28c94:	subs	r5, r0, #0
   28c98:	beq	28cd4 <__assert_fail@plt+0x17334>
   28c9c:	str	r5, [sp, #56]	; 0x38
   28ca0:	ldr	r3, [sp, #52]	; 0x34
   28ca4:	b	28bd8 <__assert_fail@plt+0x17238>
   28ca8:	ldr	r0, [sp, #56]	; 0x38
   28cac:	b	28b78 <__assert_fail@plt+0x171d8>
   28cb0:	mov	r1, #0
   28cb4:	ldr	r2, [sp, #20]
   28cb8:	mov	r4, r1
   28cbc:	bl	11814 <memset@plt>
   28cc0:	ldr	r0, [sp, #56]	; 0x38
   28cc4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   28cc8:	b	28b7c <__assert_fail@plt+0x171dc>
   28ccc:	mov	r4, #12
   28cd0:	b	28b7c <__assert_fail@plt+0x171dc>
   28cd4:	mov	r4, #12
   28cd8:	ldr	r0, [sp, #56]	; 0x38
   28cdc:	b	28b78 <__assert_fail@plt+0x171d8>
   28ce0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28ce4:	ldr	r3, [r0, #84]	; 0x54
   28ce8:	strd	r6, [sp, #8]
   28cec:	ldr	r6, [r1]
   28cf0:	strd	r8, [sp, #16]
   28cf4:	strd	sl, [sp, #24]
   28cf8:	str	lr, [sp, #32]
   28cfc:	sub	sp, sp, #92	; 0x5c
   28d00:	ldr	sl, [r0, #40]	; 0x28
   28d04:	cmp	r6, #0
   28d08:	str	r3, [sp, #32]
   28d0c:	ble	2926c <__assert_fail@plt+0x178cc>
   28d10:	lsl	r3, sl, #2
   28d14:	mov	fp, r0
   28d18:	str	r2, [sp, #44]	; 0x2c
   28d1c:	str	r3, [sp, #52]	; 0x34
   28d20:	mov	r3, #0
   28d24:	str	r1, [sp, #64]	; 0x40
   28d28:	str	r3, [sp, #20]
   28d2c:	b	28d74 <__assert_fail@plt+0x173d4>
   28d30:	tst	r0, #1
   28d34:	beq	28d60 <__assert_fail@plt+0x173c0>
   28d38:	tst	r3, #8
   28d3c:	bne	28d60 <__assert_fail@plt+0x173c0>
   28d40:	tst	r3, #32
   28d44:	beq	28d50 <__assert_fail@plt+0x173b0>
   28d48:	tst	r0, #2
   28d4c:	beq	28d60 <__assert_fail@plt+0x173c0>
   28d50:	tst	r3, #128	; 0x80
   28d54:	beq	28de4 <__assert_fail@plt+0x17444>
   28d58:	tst	r0, #8
   28d5c:	bne	28de4 <__assert_fail@plt+0x17444>
   28d60:	ldr	r3, [sp, #20]
   28d64:	add	r3, r3, #1
   28d68:	cmp	r3, r6
   28d6c:	str	r3, [sp, #20]
   28d70:	bge	2926c <__assert_fail@plt+0x178cc>
   28d74:	ldr	r1, [sp, #20]
   28d78:	ldr	r3, [sp, #44]	; 0x2c
   28d7c:	ldr	r2, [r3]
   28d80:	ldr	r3, [sp, #32]
   28d84:	ldr	r8, [r2, r1, lsl #2]
   28d88:	ldr	r3, [r3]
   28d8c:	add	r3, r3, r8, lsl #3
   28d90:	ldrb	r2, [r3, #4]
   28d94:	cmp	r2, #4
   28d98:	bne	28d60 <__assert_fail@plt+0x173c0>
   28d9c:	ldr	r4, [r3, #4]
   28da0:	mov	r3, #65280	; 0xff00
   28da4:	movt	r3, #3
   28da8:	and	r3, r3, r4
   28dac:	cmp	r3, #0
   28db0:	beq	28de4 <__assert_fail@plt+0x17444>
   28db4:	mov	r1, sl
   28db8:	mov	r0, fp
   28dbc:	ldr	r2, [fp, #88]	; 0x58
   28dc0:	bl	20a08 <__assert_fail@plt+0xf068>
   28dc4:	ubfx	r3, r4, #8, #10
   28dc8:	tst	r3, #4
   28dcc:	bne	28d30 <__assert_fail@plt+0x17390>
   28dd0:	tst	r3, #8
   28dd4:	beq	28d40 <__assert_fail@plt+0x173a0>
   28dd8:	tst	r0, #1
   28ddc:	beq	28d40 <__assert_fail@plt+0x173a0>
   28de0:	b	28d60 <__assert_fail@plt+0x173c0>
   28de4:	ldr	ip, [fp, #108]	; 0x6c
   28de8:	cmp	ip, #0
   28dec:	mov	r9, ip
   28df0:	ble	29078 <__assert_fail@plt+0x176d8>
   28df4:	ldr	r1, [fp, #116]	; 0x74
   28df8:	mov	r2, ip
   28dfc:	mov	r0, #0
   28e00:	add	r3, r2, r0
   28e04:	asr	r3, r3, #1
   28e08:	add	lr, r3, r3, lsl #1
   28e0c:	add	lr, r1, lr, lsl #3
   28e10:	ldr	lr, [lr, #4]
   28e14:	cmp	sl, lr
   28e18:	bgt	29068 <__assert_fail@plt+0x176c8>
   28e1c:	cmp	r3, r0
   28e20:	ble	28e6c <__assert_fail@plt+0x174cc>
   28e24:	add	r2, r3, r0
   28e28:	asr	r2, r2, #1
   28e2c:	add	lr, r2, r2, lsl #1
   28e30:	add	lr, r1, lr, lsl #3
   28e34:	ldr	lr, [lr, #4]
   28e38:	cmp	sl, lr
   28e3c:	ble	28e5c <__assert_fail@plt+0x174bc>
   28e40:	b	2905c <__assert_fail@plt+0x176bc>
   28e44:	add	lr, r3, r3, lsl #1
   28e48:	add	lr, r1, lr, lsl #3
   28e4c:	ldr	lr, [lr, #4]
   28e50:	cmp	sl, lr
   28e54:	bgt	29068 <__assert_fail@plt+0x176c8>
   28e58:	mov	r2, r3
   28e5c:	add	r3, r0, r2
   28e60:	cmp	r0, r2
   28e64:	asr	r3, r3, #1
   28e68:	blt	28e44 <__assert_fail@plt+0x174a4>
   28e6c:	cmp	ip, r0
   28e70:	ble	29078 <__assert_fail@plt+0x176d8>
   28e74:	add	r0, r0, r0, lsl #1
   28e78:	add	r1, r1, r0, lsl #3
   28e7c:	ldr	r3, [r1, #4]
   28e80:	cmp	sl, r3
   28e84:	bne	29078 <__assert_fail@plt+0x176d8>
   28e88:	add	r1, r1, #24
   28e8c:	b	28e9c <__assert_fail@plt+0x174fc>
   28e90:	ldrb	r3, [r1, #-28]	; 0xffffffe4
   28e94:	cmp	r3, #0
   28e98:	beq	29078 <__assert_fail@plt+0x176d8>
   28e9c:	ldr	r3, [r1, #-24]	; 0xffffffe8
   28ea0:	add	r1, r1, #24
   28ea4:	cmp	r8, r3
   28ea8:	bne	28e90 <__assert_fail@plt+0x174f0>
   28eac:	lsl	r2, r8, #2
   28eb0:	mov	r3, #0
   28eb4:	cmp	r9, ip
   28eb8:	str	r2, [sp, #40]	; 0x28
   28ebc:	str	r3, [sp, #72]	; 0x48
   28ec0:	bge	291f4 <__assert_fail@plt+0x17854>
   28ec4:	add	r3, r8, r8, lsl #1
   28ec8:	ldr	r7, [sp, #32]
   28ecc:	lsl	r3, r3, #2
   28ed0:	str	r3, [sp, #48]	; 0x30
   28ed4:	b	28fbc <__assert_fail@plt+0x1761c>
   28ed8:	ldr	r2, [r7, #20]
   28edc:	ldr	r1, [sp, #48]	; 0x30
   28ee0:	add	r2, r2, r1
   28ee4:	ldr	r2, [r2, #8]
   28ee8:	ldr	r2, [r2]
   28eec:	add	r2, r2, r2, lsl #1
   28ef0:	add	r5, r5, r2, lsl #2
   28ef4:	add	r3, sl, r3
   28ef8:	mov	r0, fp
   28efc:	ldr	r2, [fp, #88]	; 0x58
   28f00:	sub	r4, r3, r4
   28f04:	sub	r1, r4, #1
   28f08:	bl	20a08 <__assert_fail@plt+0xf068>
   28f0c:	ldr	r2, [sp, #52]	; 0x34
   28f10:	mov	r3, r0
   28f14:	ldr	r6, [fp, #100]	; 0x64
   28f18:	ldr	r2, [r6, r2]
   28f1c:	ldr	r1, [r6, r4, lsl #2]
   28f20:	cmp	r2, #0
   28f24:	ldrne	r2, [r2, #8]
   28f28:	cmp	r1, #0
   28f2c:	str	r2, [sp, #28]
   28f30:	beq	29010 <__assert_fail@plt+0x17670>
   28f34:	mov	r2, r5
   28f38:	add	r0, sp, #76	; 0x4c
   28f3c:	ldr	r1, [r1, #40]	; 0x28
   28f40:	str	r3, [sp, #36]	; 0x24
   28f44:	bl	27aa8 <__assert_fail@plt+0x16108>
   28f48:	cmp	r0, #0
   28f4c:	str	r0, [sp, #72]	; 0x48
   28f50:	ldr	r3, [sp, #36]	; 0x24
   28f54:	bne	2925c <__assert_fail@plt+0x178bc>
   28f58:	add	r2, sp, #76	; 0x4c
   28f5c:	mov	r1, r7
   28f60:	ldr	r6, [fp, #100]	; 0x64
   28f64:	add	r0, sp, #72	; 0x48
   28f68:	bl	25860 <__assert_fail@plt+0x13ec0>
   28f6c:	str	r0, [r6, r4, lsl #2]
   28f70:	ldr	r0, [sp, #84]	; 0x54
   28f74:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   28f78:	ldr	r3, [fp, #100]	; 0x64
   28f7c:	ldr	r2, [r3, r4, lsl #2]
   28f80:	cmp	r2, #0
   28f84:	beq	29034 <__assert_fail@plt+0x17694>
   28f88:	ldr	r2, [sp, #24]
   28f8c:	cmp	r2, #0
   28f90:	bne	28fac <__assert_fail@plt+0x1760c>
   28f94:	ldr	r2, [sp, #52]	; 0x34
   28f98:	ldr	r3, [r3, r2]
   28f9c:	ldr	r2, [sp, #28]
   28fa0:	ldr	r3, [r3, #8]
   28fa4:	cmp	r3, r2
   28fa8:	bgt	291ac <__assert_fail@plt+0x1780c>
   28fac:	ldr	ip, [fp, #108]	; 0x6c
   28fb0:	add	r9, r9, #1
   28fb4:	cmp	r9, ip
   28fb8:	bge	291f4 <__assert_fail@plt+0x17854>
   28fbc:	ldr	r3, [fp, #116]	; 0x74
   28fc0:	add	r2, r9, r9, lsl #1
   28fc4:	ldr	r1, [r3, r2, lsl #3]
   28fc8:	add	r3, r3, r2, lsl #3
   28fcc:	cmp	r8, r1
   28fd0:	bne	28fb0 <__assert_fail@plt+0x17610>
   28fd4:	ldr	r2, [r3, #4]
   28fd8:	cmp	sl, r2
   28fdc:	bne	28fb0 <__assert_fail@plt+0x17610>
   28fe0:	ldr	r4, [r3, #8]
   28fe4:	ldr	r3, [r3, #12]
   28fe8:	ldr	r5, [r7, #24]
   28fec:	subs	r2, r3, r4
   28ff0:	str	r2, [sp, #24]
   28ff4:	beq	28ed8 <__assert_fail@plt+0x17538>
   28ff8:	ldr	r2, [r7, #12]
   28ffc:	ldr	r1, [sp, #40]	; 0x28
   29000:	ldr	r2, [r2, r1]
   29004:	add	r2, r2, r2, lsl #1
   29008:	add	r5, r5, r2, lsl #2
   2900c:	b	28ef4 <__assert_fail@plt+0x17554>
   29010:	mov	r2, r5
   29014:	mov	r1, r7
   29018:	add	r0, sp, #72	; 0x48
   2901c:	bl	25860 <__assert_fail@plt+0x13ec0>
   29020:	ldr	r3, [fp, #100]	; 0x64
   29024:	str	r0, [r6, r4, lsl #2]
   29028:	ldr	r2, [r3, r4, lsl #2]
   2902c:	cmp	r2, #0
   29030:	bne	28f88 <__assert_fail@plt+0x175e8>
   29034:	ldr	r0, [sp, #72]	; 0x48
   29038:	cmp	r0, #0
   2903c:	beq	28f88 <__assert_fail@plt+0x175e8>
   29040:	add	sp, sp, #92	; 0x5c
   29044:	ldrd	r4, [sp]
   29048:	ldrd	r6, [sp, #8]
   2904c:	ldrd	r8, [sp, #16]
   29050:	ldrd	sl, [sp, #24]
   29054:	add	sp, sp, #32
   29058:	pop	{pc}		; (ldr pc, [sp], #4)
   2905c:	mov	r0, r2
   29060:	mov	r2, r3
   29064:	mov	r3, r0
   29068:	add	r0, r3, #1
   2906c:	cmp	r0, r2
   29070:	blt	28e00 <__assert_fail@plt+0x17460>
   29074:	b	28e6c <__assert_fail@plt+0x174cc>
   29078:	ldr	r3, [fp, #84]	; 0x54
   2907c:	ldr	r1, [fp, #124]	; 0x7c
   29080:	str	r3, [sp, #60]	; 0x3c
   29084:	ldr	r3, [r3]
   29088:	cmp	r1, #0
   2908c:	ldr	r2, [r3, r8, lsl #3]
   29090:	str	r2, [sp, #56]	; 0x38
   29094:	ble	28eac <__assert_fail@plt+0x1750c>
   29098:	mov	r2, #0
   2909c:	str	r2, [sp, #36]	; 0x24
   290a0:	ldr	r2, [fp, #4]
   290a4:	str	sl, [sp, #40]	; 0x28
   290a8:	str	r8, [sp, #48]	; 0x30
   290ac:	str	r9, [sp, #68]	; 0x44
   290b0:	mov	ip, r2
   290b4:	ldr	r0, [sp, #36]	; 0x24
   290b8:	ldr	r2, [fp, #132]	; 0x84
   290bc:	ldr	r4, [r2, r0, lsl #2]
   290c0:	ldr	r2, [r4, #4]
   290c4:	ldr	r3, [r3, r2, lsl #3]
   290c8:	ldr	r2, [sp, #56]	; 0x38
   290cc:	cmp	r2, r3
   290d0:	beq	290f4 <__assert_fail@plt+0x17754>
   290d4:	ldr	r3, [sp, #36]	; 0x24
   290d8:	add	r3, r3, #1
   290dc:	cmp	r3, r1
   290e0:	str	r3, [sp, #36]	; 0x24
   290e4:	bge	29468 <__assert_fail@plt+0x17ac8>
   290e8:	ldr	r3, [sp, #60]	; 0x3c
   290ec:	ldr	r3, [r3]
   290f0:	b	290b4 <__assert_fail@plt+0x17714>
   290f4:	ldr	r7, [r4]
   290f8:	ldr	r2, [r4, #16]
   290fc:	ldr	r8, [sp, #40]	; 0x28
   29100:	cmp	r2, #0
   29104:	ble	29284 <__assert_fail@plt+0x178e4>
   29108:	mov	r5, #0
   2910c:	mov	r3, ip
   29110:	str	r8, [sp, #24]
   29114:	b	29128 <__assert_fail@plt+0x17788>
   29118:	ldr	r2, [r4, #16]
   2911c:	str	sl, [sp, #24]
   29120:	cmp	r5, r2
   29124:	bge	29274 <__assert_fail@plt+0x178d4>
   29128:	ldr	r1, [r4, #20]
   2912c:	ldr	r9, [r1, r5, lsl #2]
   29130:	ldr	r1, [sp, #24]
   29134:	ldr	r8, [r9, #4]
   29138:	sub	r6, r8, r7
   2913c:	cmp	r6, #0
   29140:	add	sl, r6, r1
   29144:	ble	29178 <__assert_fail@plt+0x177d8>
   29148:	ldr	r1, [fp, #28]
   2914c:	cmp	r1, sl
   29150:	blt	29200 <__assert_fail@plt+0x17860>
   29154:	ldr	r0, [sp, #24]
   29158:	add	r1, r3, r7
   2915c:	mov	r2, r6
   29160:	str	r3, [sp, #28]
   29164:	add	r0, r3, r0
   29168:	bl	1161c <memcmp@plt>
   2916c:	cmp	r0, #0
   29170:	ldr	r3, [sp, #28]
   29174:	bne	29414 <__assert_fail@plt+0x17a74>
   29178:	ldr	r1, [sp, #40]	; 0x28
   2917c:	mov	r2, r9
   29180:	mov	r0, fp
   29184:	add	r5, r5, #1
   29188:	mov	r7, r8
   2918c:	ldr	r3, [sp, #48]	; 0x30
   29190:	str	r1, [sp]
   29194:	mov	r1, r4
   29198:	bl	274fc <__assert_fail@plt+0x15b5c>
   2919c:	cmp	r0, #1
   291a0:	ldr	r3, [fp, #4]
   291a4:	bls	29118 <__assert_fail@plt+0x17778>
   291a8:	b	29040 <__assert_fail@plt+0x176a0>
   291ac:	add	r4, r5, #4
   291b0:	add	r5, r5, #8
   291b4:	mov	r2, r5
   291b8:	mov	r1, r4
   291bc:	mov	r3, sl
   291c0:	mov	r0, fp
   291c4:	bl	2187c <__assert_fail@plt+0xfedc>
   291c8:	cmp	r0, #0
   291cc:	str	r0, [sp, #72]	; 0x48
   291d0:	bne	29040 <__assert_fail@plt+0x176a0>
   291d4:	mov	r2, r5
   291d8:	mov	r1, r4
   291dc:	mov	r0, fp
   291e0:	bl	28ce0 <__assert_fail@plt+0x17340>
   291e4:	cmp	r0, #0
   291e8:	str	r0, [sp, #72]	; 0x48
   291ec:	beq	28fac <__assert_fail@plt+0x1760c>
   291f0:	b	29040 <__assert_fail@plt+0x176a0>
   291f4:	ldr	r3, [sp, #64]	; 0x40
   291f8:	ldr	r6, [r3]
   291fc:	b	28d60 <__assert_fail@plt+0x173c0>
   29200:	ldr	ip, [fp, #48]	; 0x30
   29204:	add	r1, sl, #1
   29208:	mov	r0, fp
   2920c:	cmp	ip, sl
   29210:	blt	294ac <__assert_fail@plt+0x17b0c>
   29214:	ldr	r3, [fp, #104]	; 0x68
   29218:	str	r3, [sp, #28]
   2921c:	bl	241c8 <__assert_fail@plt+0x12828>
   29220:	cmp	r0, #0
   29224:	mov	r1, r0
   29228:	bne	29040 <__assert_fail@plt+0x176a0>
   2922c:	ldr	r3, [sp, #28]
   29230:	sub	r2, sl, r3
   29234:	cmp	r3, sl
   29238:	add	r0, r3, #1
   2923c:	lsl	r2, r2, #2
   29240:	bge	29254 <__assert_fail@plt+0x178b4>
   29244:	ldr	r3, [fp, #100]	; 0x64
   29248:	add	r0, r3, r0, lsl #2
   2924c:	bl	11814 <memset@plt>
   29250:	str	sl, [fp, #104]	; 0x68
   29254:	ldr	r3, [fp, #4]
   29258:	b	29154 <__assert_fail@plt+0x177b4>
   2925c:	ldr	r0, [sp, #84]	; 0x54
   29260:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29264:	ldr	r0, [sp, #72]	; 0x48
   29268:	b	29040 <__assert_fail@plt+0x176a0>
   2926c:	mov	r0, #0
   29270:	b	29040 <__assert_fail@plt+0x176a0>
   29274:	mov	r9, r8
   29278:	mov	ip, r3
   2927c:	add	r7, r9, #1
   29280:	mov	r8, sl
   29284:	ldr	r3, [sp, #40]	; 0x28
   29288:	cmp	r3, r7
   2928c:	blt	293e4 <__assert_fail@plt+0x17a44>
   29290:	ldr	r6, [sp, #56]	; 0x38
   29294:	mov	sl, r3
   29298:	mov	r9, ip
   2929c:	ldr	r3, [r4]
   292a0:	sub	r3, r7, r3
   292a4:	cmp	r3, #0
   292a8:	ble	292d4 <__assert_fail@plt+0x17934>
   292ac:	ldr	r3, [fp, #28]
   292b0:	cmp	r3, r8
   292b4:	ble	2943c <__assert_fail@plt+0x17a9c>
   292b8:	add	r5, r8, #1
   292bc:	add	r3, r9, r7
   292c0:	ldrb	r2, [r9, r8]
   292c4:	ldrb	r3, [r3, #-1]
   292c8:	cmp	r2, r3
   292cc:	bne	293e0 <__assert_fail@plt+0x17a40>
   292d0:	mov	r8, r5
   292d4:	ldr	r3, [fp, #100]	; 0x64
   292d8:	ldr	r3, [r3, r7, lsl #2]
   292dc:	cmp	r3, #0
   292e0:	beq	293d4 <__assert_fail@plt+0x17a34>
   292e4:	ldr	ip, [r3, #8]
   292e8:	cmp	ip, #0
   292ec:	ble	293d4 <__assert_fail@plt+0x17a34>
   292f0:	ldr	r2, [r3, #12]
   292f4:	mov	r3, #0
   292f8:	ldr	r1, [sp, #60]	; 0x3c
   292fc:	sub	r2, r2, #4
   29300:	ldr	r0, [r1]
   29304:	b	29310 <__assert_fail@plt+0x17970>
   29308:	cmp	ip, r3
   2930c:	beq	293d4 <__assert_fail@plt+0x17a34>
   29310:	ldr	r5, [r2, #4]!
   29314:	add	r3, r3, #1
   29318:	add	r1, r0, r5, lsl #3
   2931c:	ldrb	r1, [r1, #4]
   29320:	cmp	r1, #9
   29324:	bne	29308 <__assert_fail@plt+0x17968>
   29328:	ldr	r1, [r0, r5, lsl #3]
   2932c:	cmp	r6, r1
   29330:	bne	29308 <__assert_fail@plt+0x17968>
   29334:	cmn	r5, #1
   29338:	beq	293d4 <__assert_fail@plt+0x17a34>
   2933c:	ldr	r3, [r4]
   29340:	ldr	r1, [r4, #8]
   29344:	cmp	r1, #0
   29348:	beq	293ec <__assert_fail@plt+0x17a4c>
   2934c:	mov	ip, #9
   29350:	mov	r0, fp
   29354:	ldr	r2, [r4, #4]
   29358:	stm	sp, {r5, r7, ip}
   2935c:	bl	26d40 <__assert_fail@plt+0x153a0>
   29360:	cmp	r0, #1
   29364:	beq	293d4 <__assert_fail@plt+0x17a34>
   29368:	cmp	r0, #0
   2936c:	bne	29040 <__assert_fail@plt+0x176a0>
   29370:	ldrd	r2, [r4, #12]
   29374:	cmp	r3, r2
   29378:	beq	29484 <__assert_fail@plt+0x17ae4>
   2937c:	mov	r1, #20
   29380:	mov	r0, #1
   29384:	bl	1ecd8 <__assert_fail@plt+0xd338>
   29388:	subs	ip, r0, #0
   2938c:	beq	2947c <__assert_fail@plt+0x17adc>
   29390:	ldr	lr, [r4, #16]
   29394:	mov	r2, ip
   29398:	mov	r1, r4
   2939c:	mov	r0, fp
   293a0:	ldr	r3, [sp, #48]	; 0x30
   293a4:	add	r9, lr, #1
   293a8:	str	r9, [sp, #24]
   293ac:	ldr	r9, [r4, #20]
   293b0:	str	ip, [r9, lr, lsl #2]
   293b4:	stm	ip, {r5, r7}
   293b8:	ldr	ip, [sp, #24]
   293bc:	str	ip, [r4, #16]
   293c0:	str	sl, [sp]
   293c4:	bl	274fc <__assert_fail@plt+0x15b5c>
   293c8:	cmp	r0, #1
   293cc:	ldr	r9, [fp, #4]
   293d0:	bhi	29040 <__assert_fail@plt+0x176a0>
   293d4:	add	r7, r7, #1
   293d8:	cmp	sl, r7
   293dc:	bge	2929c <__assert_fail@plt+0x178fc>
   293e0:	mov	ip, r9
   293e4:	ldr	r1, [fp, #124]	; 0x7c
   293e8:	b	290d4 <__assert_fail@plt+0x17734>
   293ec:	sub	r3, r7, r3
   293f0:	mov	r0, #12
   293f4:	add	r1, r3, #1
   293f8:	bl	1ecd8 <__assert_fail@plt+0xd338>
   293fc:	cmp	r0, #0
   29400:	mov	r1, r0
   29404:	str	r0, [r4, #8]
   29408:	beq	2947c <__assert_fail@plt+0x17adc>
   2940c:	ldr	r3, [r4]
   29410:	b	2934c <__assert_fail@plt+0x179ac>
   29414:	ldr	r2, [r4, #16]
   29418:	mov	ip, r3
   2941c:	ldr	r8, [sp, #24]
   29420:	cmp	r5, r2
   29424:	blt	293e4 <__assert_fail@plt+0x17a44>
   29428:	cmp	r5, #0
   2942c:	ble	29284 <__assert_fail@plt+0x178e4>
   29430:	mov	sl, r8
   29434:	mov	r9, r7
   29438:	b	2927c <__assert_fail@plt+0x178dc>
   2943c:	ldr	r3, [fp, #48]	; 0x30
   29440:	cmp	r3, r8
   29444:	ble	293e0 <__assert_fail@plt+0x17a40>
   29448:	add	r5, r8, #1
   2944c:	mov	r0, fp
   29450:	mov	r1, r5
   29454:	bl	241c8 <__assert_fail@plt+0x12828>
   29458:	cmp	r0, #0
   2945c:	bne	29040 <__assert_fail@plt+0x176a0>
   29460:	ldr	r9, [fp, #4]
   29464:	b	292bc <__assert_fail@plt+0x1791c>
   29468:	ldr	sl, [sp, #40]	; 0x28
   2946c:	ldr	r8, [sp, #48]	; 0x30
   29470:	ldr	r9, [sp, #68]	; 0x44
   29474:	ldr	ip, [fp, #108]	; 0x6c
   29478:	b	28eac <__assert_fail@plt+0x1750c>
   2947c:	mov	r0, #12
   29480:	b	29040 <__assert_fail@plt+0x176a0>
   29484:	lsl	r3, r3, #1
   29488:	ldr	r0, [r4, #20]
   2948c:	add	r9, r3, #1
   29490:	lsl	r1, r9, #2
   29494:	bl	1f170 <__assert_fail@plt+0xd7d0>
   29498:	cmp	r0, #0
   2949c:	beq	2947c <__assert_fail@plt+0x17adc>
   294a0:	str	r9, [r4, #12]
   294a4:	str	r0, [r4, #20]
   294a8:	b	2937c <__assert_fail@plt+0x179dc>
   294ac:	mov	ip, r3
   294b0:	ldr	r8, [sp, #24]
   294b4:	b	29420 <__assert_fail@plt+0x17a80>
   294b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   294bc:	mov	r4, r1
   294c0:	ldr	r5, [r1, #40]	; 0x28
   294c4:	ldr	r3, [r1, #104]	; 0x68
   294c8:	strd	r6, [sp, #8]
   294cc:	strd	r8, [sp, #16]
   294d0:	str	sl, [sp, #24]
   294d4:	mov	sl, r0
   294d8:	str	lr, [sp, #28]
   294dc:	sub	sp, sp, #16
   294e0:	cmp	r3, r5
   294e4:	ldr	r8, [r1, #84]	; 0x54
   294e8:	ldr	r9, [r1, #100]	; 0x64
   294ec:	bge	29528 <__assert_fail@plt+0x17b88>
   294f0:	mov	r6, r2
   294f4:	str	r2, [r9, r5, lsl #2]
   294f8:	str	r5, [r1, #104]	; 0x68
   294fc:	ldr	r3, [r8, #76]	; 0x4c
   29500:	cmp	r3, #0
   29504:	bne	295f0 <__assert_fail@plt+0x17c50>
   29508:	mov	r0, r6
   2950c:	add	sp, sp, #16
   29510:	ldrd	r4, [sp]
   29514:	ldrd	r6, [sp, #8]
   29518:	ldrd	r8, [sp, #16]
   2951c:	ldr	sl, [sp, #24]
   29520:	add	sp, sp, #28
   29524:	pop	{pc}		; (ldr pc, [sp], #4)
   29528:	ldr	r3, [r9, r5, lsl #2]
   2952c:	cmp	r3, #0
   29530:	moveq	r6, r2
   29534:	streq	r2, [r9, r5, lsl #2]
   29538:	beq	294fc <__assert_fail@plt+0x17b5c>
   2953c:	cmp	r2, #0
   29540:	ldr	r3, [r3, #40]	; 0x28
   29544:	beq	295b0 <__assert_fail@plt+0x17c10>
   29548:	ldr	r7, [r2, #40]	; 0x28
   2954c:	add	r0, sp, #4
   29550:	mov	r2, r3
   29554:	mov	r1, r7
   29558:	bl	27aa8 <__assert_fail@plt+0x16108>
   2955c:	cmp	r0, #0
   29560:	str	r0, [sl]
   29564:	bne	29654 <__assert_fail@plt+0x17cb4>
   29568:	ldr	r1, [r4, #40]	; 0x28
   2956c:	mov	r0, r4
   29570:	ldr	r2, [r4, #88]	; 0x58
   29574:	sub	r1, r1, #1
   29578:	bl	20a08 <__assert_fail@plt+0xf068>
   2957c:	ldr	r9, [r4, #100]	; 0x64
   29580:	mov	r3, r0
   29584:	add	r2, sp, #4
   29588:	mov	r1, r8
   2958c:	mov	r0, sl
   29590:	bl	25860 <__assert_fail@plt+0x13ec0>
   29594:	cmp	r7, #0
   29598:	mov	r6, r0
   2959c:	str	r0, [r9, r5, lsl #2]
   295a0:	beq	294fc <__assert_fail@plt+0x17b5c>
   295a4:	ldr	r0, [sp, #12]
   295a8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   295ac:	b	294fc <__assert_fail@plt+0x17b5c>
   295b0:	ldrd	r6, [r3]
   295b4:	sub	r1, r5, #1
   295b8:	mov	r0, r4
   295bc:	ldr	r2, [r4, #88]	; 0x58
   295c0:	strd	r6, [sp, #4]
   295c4:	ldr	r3, [r3, #8]
   295c8:	str	r3, [sp, #12]
   295cc:	bl	20a08 <__assert_fail@plt+0xf068>
   295d0:	mov	r3, r0
   295d4:	add	r2, sp, #4
   295d8:	mov	r1, r8
   295dc:	mov	r0, sl
   295e0:	bl	25860 <__assert_fail@plt+0x13ec0>
   295e4:	mov	r6, r0
   295e8:	str	r0, [r9, r5, lsl #2]
   295ec:	b	294fc <__assert_fail@plt+0x17b5c>
   295f0:	cmp	r6, #0
   295f4:	beq	29654 <__assert_fail@plt+0x17cb4>
   295f8:	add	r7, r6, #8
   295fc:	add	r8, r6, #12
   29600:	mov	r1, r7
   29604:	mov	r2, r8
   29608:	mov	r3, r5
   2960c:	mov	r0, r4
   29610:	bl	2187c <__assert_fail@plt+0xfedc>
   29614:	cmp	r0, #0
   29618:	str	r0, [sl]
   2961c:	bne	29654 <__assert_fail@plt+0x17cb4>
   29620:	ldrb	r3, [r6, #52]	; 0x34
   29624:	tst	r3, #64	; 0x40
   29628:	beq	29508 <__assert_fail@plt+0x17b68>
   2962c:	mov	r2, r8
   29630:	mov	r1, r7
   29634:	mov	r0, r4
   29638:	bl	28ce0 <__assert_fail@plt+0x17340>
   2963c:	cmp	r0, #0
   29640:	str	r0, [sl]
   29644:	bne	29654 <__assert_fail@plt+0x17cb4>
   29648:	ldr	r3, [r4, #100]	; 0x64
   2964c:	ldr	r6, [r3, r5, lsl #2]
   29650:	b	29508 <__assert_fail@plt+0x17b68>
   29654:	mov	r6, #0
   29658:	b	29508 <__assert_fail@plt+0x17b68>
   2965c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29660:	mov	r5, r0
   29664:	mov	r0, #32
   29668:	strd	r6, [sp, #8]
   2966c:	mov	r7, r3
   29670:	strd	r8, [sp, #16]
   29674:	mov	r9, #0
   29678:	strd	sl, [sp, #24]
   2967c:	mov	fp, r1
   29680:	mov	r1, #1
   29684:	str	lr, [sp, #32]
   29688:	sub	sp, sp, #44	; 0x2c
   2968c:	mov	sl, r2
   29690:	ldrb	r8, [sp, #80]	; 0x50
   29694:	str	r9, [sp, #20]
   29698:	bl	1ecd8 <__assert_fail@plt+0xd338>
   2969c:	subs	r4, r0, #0
   296a0:	beq	29a5c <__assert_fail@plt+0x180bc>
   296a4:	mov	r1, #1
   296a8:	mov	r0, #40	; 0x28
   296ac:	bl	1ecd8 <__assert_fail@plt+0xd338>
   296b0:	subs	r6, r0, #0
   296b4:	beq	29a9c <__assert_fail@plt+0x180fc>
   296b8:	ldrb	ip, [r6, #16]
   296bc:	add	lr, sp, #20
   296c0:	mov	r0, fp
   296c4:	add	r3, r6, #36	; 0x24
   296c8:	add	r2, r6, #12
   296cc:	mov	r1, r4
   296d0:	bfi	ip, r8, #0, #1
   296d4:	strb	ip, [r6, #16]
   296d8:	str	lr, [sp]
   296dc:	str	sl, [sp, #4]
   296e0:	str	r9, [sp, #8]
   296e4:	bl	219ac <__assert_fail@plt+0x1000c>
   296e8:	subs	sl, r0, #0
   296ec:	bne	29b3c <__assert_fail@plt+0x1819c>
   296f0:	ldrb	r3, [r7]
   296f4:	cmp	r3, #0
   296f8:	beq	29720 <__assert_fail@plt+0x17d80>
   296fc:	mov	ip, #1
   29700:	asr	r1, r3, #5
   29704:	and	r0, r3, #31
   29708:	ldrb	r3, [r7, #1]!
   2970c:	ldr	r2, [r4, r1, lsl #2]
   29710:	cmp	r3, #0
   29714:	orr	r2, r2, ip, lsl r0
   29718:	str	r2, [r4, r1, lsl #2]
   2971c:	bne	29700 <__assert_fail@plt+0x17d60>
   29720:	cmp	r8, #0
   29724:	beq	297b8 <__assert_fail@plt+0x17e18>
   29728:	ubfx	r1, r4, #2, #1
   2972c:	cmp	r1, #0
   29730:	moveq	r3, r1
   29734:	beq	29748 <__assert_fail@plt+0x17da8>
   29738:	ldr	r2, [r4]
   2973c:	mov	r3, #1
   29740:	mvn	r2, r2
   29744:	str	r2, [r4]
   29748:	ldr	ip, [r4, r1, lsl #2]
   2974c:	rsb	lr, r1, #8
   29750:	add	r2, r4, r1, lsl #2
   29754:	lsr	lr, lr, #1
   29758:	ldr	r0, [r2, #4]
   2975c:	cmp	lr, #4
   29760:	mvn	ip, ip
   29764:	str	ip, [r4, r1, lsl #2]
   29768:	mvn	r1, r0
   2976c:	ldr	lr, [r2, #8]
   29770:	ldr	ip, [r2, #12]
   29774:	ldr	r0, [r2, #16]
   29778:	mvn	lr, lr
   2977c:	stmib	r2, {r1, lr}
   29780:	mvn	ip, ip
   29784:	ldr	r1, [r2, #20]
   29788:	mvn	r0, r0
   2978c:	str	ip, [r2, #12]
   29790:	str	r0, [r2, #16]
   29794:	mvn	r1, r1
   29798:	str	r1, [r2, #20]
   2979c:	bne	29a08 <__assert_fail@plt+0x18068>
   297a0:	ldr	r1, [r2, #24]
   297a4:	ldr	r3, [r2, #28]
   297a8:	mvn	r1, r1
   297ac:	mvn	r3, r3
   297b0:	str	r1, [r2, #24]
   297b4:	str	r3, [r2, #28]
   297b8:	ldr	r3, [r5, #92]	; 0x5c
   297bc:	cmp	r3, #1
   297c0:	ble	29868 <__assert_fail@plt+0x17ec8>
   297c4:	ldr	r3, [r5, #60]	; 0x3c
   297c8:	add	r2, r4, #8
   297cc:	add	r0, r3, #8
   297d0:	orr	r1, r3, r4
   297d4:	cmp	r4, r0
   297d8:	cmpcc	r3, r2
   297dc:	movcs	r2, #1
   297e0:	movcc	r2, #0
   297e4:	tst	r1, #7
   297e8:	movne	r2, #0
   297ec:	cmp	r2, #0
   297f0:	beq	29ab8 <__assert_fail@plt+0x18118>
   297f4:	ldr	ip, [r3]
   297f8:	ldr	r1, [r4]
   297fc:	ldr	r2, [r3, #4]
   29800:	ldr	r0, [r4, #4]
   29804:	and	r1, r1, ip
   29808:	ldr	ip, [r4, #8]
   2980c:	ldr	lr, [r4, #12]
   29810:	and	r2, r2, r0
   29814:	stm	r4, {r1, r2}
   29818:	ldrd	r0, [r3, #8]
   2981c:	and	r0, r0, ip
   29820:	and	r1, r1, lr
   29824:	ldr	ip, [r4, #16]
   29828:	strd	r0, [r4, #8]
   2982c:	ldr	r2, [r3, #16]
   29830:	ldr	r0, [r3, #20]
   29834:	ldr	lr, [r4, #20]
   29838:	and	r2, r2, ip
   2983c:	ldr	ip, [r4, #24]
   29840:	str	r2, [r4, #16]
   29844:	ldr	r2, [r4, #28]
   29848:	and	r0, r0, lr
   2984c:	str	r0, [r4, #20]
   29850:	ldr	r1, [r3, #24]
   29854:	ldr	r3, [r3, #28]
   29858:	and	r1, r1, ip
   2985c:	and	r3, r3, r2
   29860:	str	r1, [r4, #24]
   29864:	str	r3, [r4, #28]
   29868:	ldr	r2, [r5, #64]	; 0x40
   2986c:	mov	r7, #0
   29870:	str	r7, [sp, #28]
   29874:	cmp	r2, #31
   29878:	beq	29b7c <__assert_fail@plt+0x181dc>
   2987c:	ldr	r0, [r5, #56]	; 0x38
   29880:	lsl	r3, r2, #5
   29884:	add	r2, r2, #1
   29888:	add	r9, r3, #4
   2988c:	mov	r1, #3
   29890:	add	r8, r0, r3
   29894:	str	r4, [sp, #24]
   29898:	add	r3, r3, #16
   2989c:	str	r2, [r5, #64]	; 0x40
   298a0:	mov	r7, #0
   298a4:	strb	r1, [sp, #28]
   298a8:	add	r1, r0, r3
   298ac:	mvn	ip, #0
   298b0:	ldrd	r2, [sp, #24]
   298b4:	adds	r9, r0, r9
   298b8:	str	r7, [r8, #4]
   298bc:	str	r7, [r8, #8]
   298c0:	str	r7, [r8, #12]
   298c4:	strd	r2, [r8, #24]
   298c8:	ldrb	r3, [r1, #14]
   298cc:	bic	r3, r3, #12
   298d0:	strb	r3, [r1, #14]
   298d4:	str	r7, [r8, #16]
   298d8:	str	r7, [r8, #20]
   298dc:	str	ip, [r8, #32]
   298e0:	beq	29a28 <__assert_fail@plt+0x18088>
   298e4:	ldr	r3, [r5, #92]	; 0x5c
   298e8:	cmp	r3, #1
   298ec:	ble	29a6c <__assert_fail@plt+0x180cc>
   298f0:	ldrb	r2, [r5, #88]	; 0x58
   298f4:	ldr	r3, [r5, #64]	; 0x40
   298f8:	orr	r2, r2, #2
   298fc:	cmp	r3, #31
   29900:	strb	r2, [r5, #88]	; 0x58
   29904:	beq	29ba8 <__assert_fail@plt+0x18208>
   29908:	lsl	r7, r3, #5
   2990c:	add	r3, r3, #1
   29910:	add	fp, r7, #4
   29914:	mov	r2, #6
   29918:	str	r6, [sp, #24]
   2991c:	add	sl, r0, r7
   29920:	str	r3, [r5, #64]	; 0x40
   29924:	add	r7, r7, #16
   29928:	mvn	ip, #0
   2992c:	strb	r2, [sp, #28]
   29930:	add	r1, r0, r7
   29934:	mov	r7, #0
   29938:	ldrd	r2, [sp, #24]
   2993c:	adds	fp, r0, fp
   29940:	str	r7, [sl, #4]
   29944:	str	r7, [sl, #8]
   29948:	str	r7, [sl, #12]
   2994c:	strd	r2, [sl, #24]
   29950:	ldrb	r3, [r1, #14]
   29954:	bic	r3, r3, #12
   29958:	strb	r3, [r1, #14]
   2995c:	str	r7, [sl, #16]
   29960:	str	r7, [sl, #20]
   29964:	str	ip, [sl, #32]
   29968:	beq	29a28 <__assert_fail@plt+0x18088>
   2996c:	ldr	r1, [r5, #64]	; 0x40
   29970:	mov	r2, #0
   29974:	mov	r3, #0
   29978:	strd	r2, [sp, #32]
   2997c:	cmp	r1, #31
   29980:	beq	29bd0 <__assert_fail@plt+0x18230>
   29984:	lsl	r7, r1, #5
   29988:	add	r1, r1, #1
   2998c:	add	r4, r7, #4
   29990:	mov	r3, #10
   29994:	mov	ip, #0
   29998:	str	r1, [r5, #64]	; 0x40
   2999c:	add	r1, r0, r7
   299a0:	add	r7, r7, #16
   299a4:	strb	r3, [sp, #36]	; 0x24
   299a8:	add	r4, r0, r4
   299ac:	add	r0, r0, r7
   299b0:	ldrd	r2, [sp, #32]
   299b4:	mvn	lr, #0
   299b8:	str	ip, [r1, #4]
   299bc:	str	r9, [r1, #8]
   299c0:	str	fp, [r1, #12]
   299c4:	strd	r2, [r1, #24]
   299c8:	ldrb	r3, [r0, #14]
   299cc:	bic	r3, r3, #12
   299d0:	strb	r3, [r0, #14]
   299d4:	str	ip, [r1, #16]
   299d8:	str	ip, [r1, #20]
   299dc:	str	lr, [r1, #32]
   299e0:	str	r4, [r8, #4]
   299e4:	str	r4, [sl, #4]
   299e8:	mov	r0, r4
   299ec:	add	sp, sp, #44	; 0x2c
   299f0:	ldrd	r4, [sp]
   299f4:	ldrd	r6, [sp, #8]
   299f8:	ldrd	r8, [sp, #16]
   299fc:	ldrd	sl, [sp, #24]
   29a00:	add	sp, sp, #32
   29a04:	pop	{pc}		; (ldr pc, [sp], #4)
   29a08:	add	r3, r3, #6
   29a0c:	ldr	r2, [r4, r3, lsl #2]
   29a10:	mvn	r2, r2
   29a14:	str	r2, [r4, r3, lsl #2]
   29a18:	ldr	r3, [r5, #92]	; 0x5c
   29a1c:	cmp	r3, #1
   29a20:	bgt	297c4 <__assert_fail@plt+0x17e24>
   29a24:	b	29868 <__assert_fail@plt+0x17ec8>
   29a28:	mov	r0, r4
   29a2c:	mov	r4, #0
   29a30:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a34:	ldr	r0, [r6]
   29a38:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a3c:	ldr	r0, [r6, #4]
   29a40:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a44:	ldr	r0, [r6, #8]
   29a48:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a4c:	ldr	r0, [r6, #12]
   29a50:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a54:	mov	r0, r6
   29a58:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a5c:	ldr	r2, [sp, #84]	; 0x54
   29a60:	mov	r3, #12
   29a64:	str	r3, [r2]
   29a68:	b	299e8 <__assert_fail@plt+0x18048>
   29a6c:	ldr	r0, [r6]
   29a70:	mov	r4, r9
   29a74:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a78:	ldr	r0, [r6, #4]
   29a7c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a80:	ldr	r0, [r6, #8]
   29a84:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a88:	ldr	r0, [r6, #12]
   29a8c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a90:	mov	r0, r6
   29a94:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29a98:	b	299e8 <__assert_fail@plt+0x18048>
   29a9c:	mov	r0, r4
   29aa0:	mov	r4, r6
   29aa4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29aa8:	ldr	r2, [sp, #84]	; 0x54
   29aac:	mov	r3, #12
   29ab0:	str	r3, [r2]
   29ab4:	b	299e8 <__assert_fail@plt+0x18048>
   29ab8:	ldr	r1, [r3]
   29abc:	ldr	r2, [r4]
   29ac0:	ldr	r0, [r4, #4]
   29ac4:	and	r2, r2, r1
   29ac8:	ldr	r1, [r4, #8]
   29acc:	str	r2, [r4]
   29ad0:	ldr	ip, [r3, #4]
   29ad4:	ldr	r2, [r4, #12]
   29ad8:	and	r0, r0, ip
   29adc:	ldr	ip, [r4, #16]
   29ae0:	str	r0, [r4, #4]
   29ae4:	ldr	lr, [r3, #8]
   29ae8:	ldr	r0, [r4, #20]
   29aec:	and	r1, r1, lr
   29af0:	str	r1, [r4, #8]
   29af4:	ldr	lr, [r3, #12]
   29af8:	ldr	r1, [r4, #24]
   29afc:	and	r2, r2, lr
   29b00:	str	r2, [r4, #12]
   29b04:	ldr	lr, [r3, #16]
   29b08:	ldr	r2, [r4, #28]
   29b0c:	and	ip, ip, lr
   29b10:	str	ip, [r4, #16]
   29b14:	ldr	ip, [r3, #20]
   29b18:	and	r0, r0, ip
   29b1c:	str	r0, [r4, #20]
   29b20:	ldr	r0, [r3, #24]
   29b24:	and	r1, r1, r0
   29b28:	str	r1, [r4, #24]
   29b2c:	ldr	r3, [r3, #28]
   29b30:	and	r3, r3, r2
   29b34:	str	r3, [r4, #28]
   29b38:	b	29868 <__assert_fail@plt+0x17ec8>
   29b3c:	mov	r0, r4
   29b40:	mov	r4, r9
   29b44:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29b48:	ldr	r0, [r6]
   29b4c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29b50:	ldr	r0, [r6, #4]
   29b54:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29b58:	ldr	r0, [r6, #8]
   29b5c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29b60:	ldr	r0, [r6, #12]
   29b64:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29b68:	mov	r0, r6
   29b6c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   29b70:	ldr	r3, [sp, #84]	; 0x54
   29b74:	str	sl, [r3]
   29b78:	b	299e8 <__assert_fail@plt+0x18048>
   29b7c:	mov	r0, #996	; 0x3e4
   29b80:	bl	1f0c4 <__assert_fail@plt+0xd724>
   29b84:	cmp	r0, #0
   29b88:	beq	29a28 <__assert_fail@plt+0x18088>
   29b8c:	ldr	r1, [r5, #56]	; 0x38
   29b90:	mov	r3, r7
   29b94:	mov	r2, #1
   29b98:	mov	r9, #4
   29b9c:	str	r0, [r5, #56]	; 0x38
   29ba0:	str	r1, [r0]
   29ba4:	b	2988c <__assert_fail@plt+0x17eec>
   29ba8:	mov	r0, #996	; 0x3e4
   29bac:	bl	1f0c4 <__assert_fail@plt+0xd724>
   29bb0:	cmp	r0, #0
   29bb4:	beq	29a28 <__assert_fail@plt+0x18088>
   29bb8:	ldr	r2, [r5, #56]	; 0x38
   29bbc:	mov	r3, #1
   29bc0:	mov	fp, #4
   29bc4:	str	r0, [r5, #56]	; 0x38
   29bc8:	str	r2, [r0]
   29bcc:	b	29914 <__assert_fail@plt+0x17f74>
   29bd0:	mov	r0, #996	; 0x3e4
   29bd4:	bl	1f0c4 <__assert_fail@plt+0xd724>
   29bd8:	cmp	r0, #0
   29bdc:	beq	29bf8 <__assert_fail@plt+0x18258>
   29be0:	ldr	r3, [r5, #56]	; 0x38
   29be4:	mov	r4, #4
   29be8:	mov	r1, #1
   29bec:	str	r0, [r5, #56]	; 0x38
   29bf0:	str	r3, [r0]
   29bf4:	b	29990 <__assert_fail@plt+0x17ff0>
   29bf8:	mov	r4, r0
   29bfc:	b	299e8 <__assert_fail@plt+0x18048>
   29c00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29c04:	mov	r4, r0
   29c08:	mov	r5, r3
   29c0c:	strd	r6, [sp, #8]
   29c10:	strd	r8, [sp, #16]
   29c14:	strd	sl, [sp, #24]
   29c18:	str	lr, [sp, #32]
   29c1c:	sub	sp, sp, #428	; 0x1ac
   29c20:	ldr	sl, [r0]
   29c24:	str	r0, [sp, #32]
   29c28:	add	r0, sp, #144	; 0x90
   29c2c:	str	r1, [sp, #56]	; 0x38
   29c30:	mov	r1, #0
   29c34:	str	r2, [sp, #72]	; 0x48
   29c38:	mov	r2, #136	; 0x88
   29c3c:	ldr	r6, [sp, #464]	; 0x1d0
   29c40:	bl	11814 <memset@plt>
   29c44:	ldr	r2, [r4, #16]
   29c48:	cmp	r2, #0
   29c4c:	str	r2, [sp, #48]	; 0x30
   29c50:	str	sl, [sp, #228]	; 0xe4
   29c54:	beq	29c70 <__assert_fail@plt+0x182d0>
   29c58:	ldrb	r2, [r4, #28]
   29c5c:	subs	r3, r5, r6
   29c60:	movne	r3, #1
   29c64:	ands	r3, r3, r2, lsr #3
   29c68:	streq	r3, [sp, #48]	; 0x30
   29c6c:	bne	2a014 <__assert_fail@plt+0x18674>
   29c70:	ldr	r3, [sp, #32]
   29c74:	ldr	r2, [sp, #472]	; 0x1d8
   29c78:	ldr	r3, [r3, #24]
   29c7c:	cmp	r3, r2
   29c80:	movcs	r3, #0
   29c84:	strcs	r3, [sp, #108]	; 0x6c
   29c88:	bcs	29ca8 <__assert_fail@plt+0x18308>
   29c8c:	sub	r2, r2, #1
   29c90:	sub	r1, r3, r2
   29c94:	sub	r3, r2, r3
   29c98:	str	r3, [sp, #108]	; 0x6c
   29c9c:	ldr	r3, [sp, #472]	; 0x1d8
   29ca0:	add	r3, r3, r1
   29ca4:	str	r3, [sp, #472]	; 0x1d8
   29ca8:	ldr	ip, [sp, #32]
   29cac:	ldr	r3, [ip, #8]
   29cb0:	cmp	r3, #0
   29cb4:	beq	2a94c <__assert_fail@plt+0x18fac>
   29cb8:	ldr	r3, [sl, #36]	; 0x24
   29cbc:	cmp	r3, #0
   29cc0:	beq	2a94c <__assert_fail@plt+0x18fac>
   29cc4:	ldr	r2, [sl, #40]	; 0x28
   29cc8:	cmp	r2, #0
   29ccc:	beq	2a94c <__assert_fail@plt+0x18fac>
   29cd0:	ldr	r0, [sl, #44]	; 0x2c
   29cd4:	cmp	r0, #0
   29cd8:	beq	2a94c <__assert_fail@plt+0x18fac>
   29cdc:	ldr	r1, [sl, #48]	; 0x30
   29ce0:	cmp	r1, #0
   29ce4:	beq	2a94c <__assert_fail@plt+0x18fac>
   29ce8:	ldr	r3, [r3, #8]
   29cec:	cmp	r3, #0
   29cf0:	bne	29d34 <__assert_fail@plt+0x18394>
   29cf4:	ldr	r3, [r2, #8]
   29cf8:	cmp	r3, #0
   29cfc:	bne	29d34 <__assert_fail@plt+0x18394>
   29d00:	ldr	r3, [r0, #8]
   29d04:	cmp	r3, #0
   29d08:	beq	29d18 <__assert_fail@plt+0x18378>
   29d0c:	ldrsb	r3, [ip, #28]
   29d10:	cmp	r3, #0
   29d14:	blt	29d34 <__assert_fail@plt+0x18394>
   29d18:	adds	r6, r6, #0
   29d1c:	movne	r6, #1
   29d20:	cmp	r5, #0
   29d24:	moveq	r6, #0
   29d28:	cmp	r6, #0
   29d2c:	bne	2a94c <__assert_fail@plt+0x18fac>
   29d30:	mov	r5, r6
   29d34:	ldr	r3, [sp, #472]	; 0x1d8
   29d38:	cmp	r3, #0
   29d3c:	bne	2a004 <__assert_fail@plt+0x18664>
   29d40:	ldr	r3, [sl, #76]	; 0x4c
   29d44:	adds	r3, r3, #0
   29d48:	movne	r3, #1
   29d4c:	str	r3, [sp, #20]
   29d50:	str	r3, [sp, #60]	; 0x3c
   29d54:	ldr	r8, [sp, #32]
   29d58:	add	r0, sp, #144	; 0x90
   29d5c:	ldr	r2, [sp, #56]	; 0x38
   29d60:	ldr	r3, [sl, #8]
   29d64:	ldr	ip, [r8, #12]
   29d68:	str	r2, [sp, #144]	; 0x90
   29d6c:	ldr	lr, [sl, #92]	; 0x5c
   29d70:	add	r3, r3, #1
   29d74:	ldrb	r2, [sl, #88]	; 0x58
   29d78:	and	r4, ip, #4194304	; 0x400000
   29d7c:	ubfx	ip, ip, #22, #1
   29d80:	ldr	r8, [r8, #20]
   29d84:	cmp	r3, lr
   29d88:	ldr	r7, [sp, #72]	; 0x48
   29d8c:	movlt	r3, lr
   29d90:	str	r8, [sp, #80]	; 0x50
   29d94:	strb	ip, [sp, #216]	; 0xd8
   29d98:	ubfx	ip, r2, #2, #1
   29d9c:	add	r1, r7, #1
   29da0:	ubfx	r2, r2, #3, #1
   29da4:	str	lr, [sp, #224]	; 0xe0
   29da8:	orrs	lr, r8, r4
   29dac:	str	r7, [sp, #188]	; 0xbc
   29db0:	movne	lr, #1
   29db4:	moveq	lr, #0
   29db8:	str	r7, [sp, #192]	; 0xc0
   29dbc:	cmp	r3, r1
   29dc0:	str	r7, [sp, #196]	; 0xc4
   29dc4:	movlt	r1, r3
   29dc8:	str	r7, [sp, #200]	; 0xc8
   29dcc:	str	r8, [sp, #208]	; 0xd0
   29dd0:	strb	ip, [sp, #217]	; 0xd9
   29dd4:	strb	r2, [sp, #218]	; 0xda
   29dd8:	strb	lr, [sp, #219]	; 0xdb
   29ddc:	bl	1f734 <__assert_fail@plt+0xdd94>
   29de0:	subs	r3, r0, #0
   29de4:	str	r3, [sp, #36]	; 0x24
   29de8:	bne	2a4cc <__assert_fail@plt+0x18b2c>
   29dec:	ldrb	r3, [sl, #88]	; 0x58
   29df0:	add	r1, sl, #96	; 0x60
   29df4:	ldrb	r2, [sp, #219]	; 0xdb
   29df8:	str	r1, [sp, #212]	; 0xd4
   29dfc:	ubfx	r3, r3, #4, #1
   29e00:	cmp	r2, #0
   29e04:	strb	r3, [sp, #222]	; 0xde
   29e08:	bne	29e20 <__assert_fail@plt+0x18480>
   29e0c:	ldr	r3, [sl, #92]	; 0x5c
   29e10:	ldr	r2, [sp, #56]	; 0x38
   29e14:	cmp	r3, #1
   29e18:	str	r2, [sp, #148]	; 0x94
   29e1c:	ble	2aa78 <__assert_fail@plt+0x190d8>
   29e20:	mov	r2, #0
   29e24:	ldr	r3, [sp, #32]
   29e28:	mvn	r1, #0
   29e2c:	str	r2, [sp, #172]	; 0xac
   29e30:	str	r2, [sp, #176]	; 0xb0
   29e34:	ldr	r2, [sp, #468]	; 0x1d4
   29e38:	ldrb	r3, [r3, #28]
   29e3c:	str	r2, [sp, #196]	; 0xc4
   29e40:	str	r2, [sp, #200]	; 0xc8
   29e44:	ubfx	r3, r3, #7, #1
   29e48:	strb	r3, [sp, #221]	; 0xdd
   29e4c:	ldr	r7, [sl, #76]	; 0x4c
   29e50:	str	r1, [sp, #236]	; 0xec
   29e54:	ldr	r3, [sp, #480]	; 0x1e0
   29e58:	lsl	r4, r7, #1
   29e5c:	cmp	r4, #0
   29e60:	str	r3, [sp, #232]	; 0xe8
   29e64:	ble	29ea4 <__assert_fail@plt+0x18504>
   29e68:	movw	r3, #43690	; 0xaaaa
   29e6c:	movt	r3, #2730	; 0xaaa
   29e70:	cmp	r4, r3
   29e74:	bgt	2ad80 <__assert_fail@plt+0x193e0>
   29e78:	add	r0, r4, r7, lsl #2
   29e7c:	lsl	r0, r0, #3
   29e80:	bl	1f0c4 <__assert_fail@plt+0xd724>
   29e84:	str	r0, [sp, #260]	; 0x104
   29e88:	lsl	r0, r7, #3
   29e8c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   29e90:	ldr	r3, [sp, #260]	; 0x104
   29e94:	str	r0, [sp, #276]	; 0x114
   29e98:	cmp	r0, #0
   29e9c:	cmpne	r3, #0
   29ea0:	beq	2ad80 <__assert_fail@plt+0x193e0>
   29ea4:	ldr	r2, [sp, #472]	; 0x1d8
   29ea8:	mov	r3, #1
   29eac:	str	r4, [sp, #256]	; 0x100
   29eb0:	str	r3, [sp, #264]	; 0x108
   29eb4:	str	r4, [sp, #272]	; 0x110
   29eb8:	cmp	r2, r3
   29ebc:	bls	2ad14 <__assert_fail@plt+0x19374>
   29ec0:	ldr	r0, [sp, #180]	; 0xb4
   29ec4:	cmn	r0, #-1073741822	; 0xc0000002
   29ec8:	bhi	2ad80 <__assert_fail@plt+0x193e0>
   29ecc:	add	r0, r0, #1
   29ed0:	lsl	r0, r0, #2
   29ed4:	bl	1f0c4 <__assert_fail@plt+0xd724>
   29ed8:	cmp	r0, #0
   29edc:	mov	r4, r0
   29ee0:	str	r0, [sp, #244]	; 0xf4
   29ee4:	beq	2a978 <__assert_fail@plt+0x18fd8>
   29ee8:	ldr	r3, [sp, #480]	; 0x1e0
   29eec:	str	r5, [sp, #112]	; 0x70
   29ef0:	ldr	r2, [sl, #92]	; 0x5c
   29ef4:	tst	r3, #1
   29ef8:	movne	r3, #4
   29efc:	moveq	r3, #6
   29f00:	cmp	r5, r6
   29f04:	str	r2, [sp, #84]	; 0x54
   29f08:	str	r3, [sp, #204]	; 0xcc
   29f0c:	movge	r3, r5
   29f10:	movlt	r3, r6
   29f14:	mvngt	r2, #0
   29f18:	movle	r2, #1
   29f1c:	str	r3, [sp, #64]	; 0x40
   29f20:	ldr	r3, [sp, #48]	; 0x30
   29f24:	str	r2, [sp, #96]	; 0x60
   29f28:	movlt	r2, r5
   29f2c:	movge	r2, r6
   29f30:	str	r2, [sp, #76]	; 0x4c
   29f34:	cmp	r3, #0
   29f38:	beq	2ad90 <__assert_fail@plt+0x193f0>
   29f3c:	ldr	r3, [sp, #84]	; 0x54
   29f40:	cmp	r3, #1
   29f44:	moveq	r3, #4
   29f48:	beq	29f68 <__assert_fail@plt+0x185c8>
   29f4c:	ldr	r3, [sp, #32]
   29f50:	ldr	r2, [sp, #80]	; 0x50
   29f54:	ldr	r3, [r3, #12]
   29f58:	and	r3, r3, #4194304	; 0x400000
   29f5c:	orrs	r3, r2, r3
   29f60:	moveq	r3, #4
   29f64:	movne	r3, #0
   29f68:	ldr	r2, [sp, #36]	; 0x24
   29f6c:	cmp	r5, r6
   29f70:	movle	r2, #2
   29f74:	ldr	r1, [sp, #80]	; 0x50
   29f78:	cmp	r1, #0
   29f7c:	orrne	r3, r3, #1
   29f80:	orr	r3, r3, r2
   29f84:	ldr	r1, [sp, #64]	; 0x40
   29f88:	ldr	r2, [sp, #76]	; 0x4c
   29f8c:	cmp	r5, r2
   29f90:	movge	r2, #0
   29f94:	movlt	r2, #1
   29f98:	cmp	r5, r1
   29f9c:	orrgt	r2, r2, #1
   29fa0:	cmp	r2, #0
   29fa4:	bne	2a4c4 <__assert_fail@plt+0x18b24>
   29fa8:	add	r2, sp, #424	; 0x1a8
   29fac:	cmp	r5, r6
   29fb0:	str	sl, [sp, #68]	; 0x44
   29fb4:	sub	r3, r3, #4
   29fb8:	suble	r2, r2, #312	; 0x138
   29fbc:	movgt	r2, #0
   29fc0:	str	r3, [sp, #88]	; 0x58
   29fc4:	adds	r3, r2, #0
   29fc8:	movne	r3, #1
   29fcc:	str	r2, [sp, #100]	; 0x64
   29fd0:	str	r3, [sp, #104]	; 0x68
   29fd4:	mov	r3, #65280	; 0xff00
   29fd8:	movt	r3, #3
   29fdc:	str	r3, [sp, #52]	; 0x34
   29fe0:	ldr	r3, [sp, #88]	; 0x58
   29fe4:	cmp	r3, #4
   29fe8:	ldrls	pc, [pc, r3, lsl #2]
   29fec:	b	2adb0 <__assert_fail@plt+0x19410>
   29ff0:	andeq	sl, r2, ip, lsr r5
   29ff4:	andeq	sl, r2, ip, lsr r5
   29ff8:	ldrdeq	sl, [r2], -r4
   29ffc:	andeq	sl, r2, r0, lsl r4
   2a000:	andeq	sl, r2, ip, lsr #32
   2a004:	mov	r3, #1
   2a008:	str	r3, [sp, #20]
   2a00c:	str	r3, [sp, #60]	; 0x3c
   2a010:	b	29d54 <__assert_fail@plt+0x183b4>
   2a014:	ldr	r3, [sp, #48]	; 0x30
   2a018:	tst	r2, #1
   2a01c:	movne	r3, #0
   2a020:	str	r3, [sp, #48]	; 0x30
   2a024:	b	29c70 <__assert_fail@plt+0x182d0>
   2a028:	str	r5, [sp, #112]	; 0x70
   2a02c:	mov	r1, r5
   2a030:	add	r0, sp, #144	; 0x90
   2a034:	ldr	r2, [sp, #480]	; 0x1e0
   2a038:	bl	20f18 <__assert_fail@plt+0xf578>
   2a03c:	subs	r3, r0, #0
   2a040:	str	r3, [sp, #36]	; 0x24
   2a044:	bne	2ade4 <__assert_fail@plt+0x19444>
   2a048:	ldr	r3, [sp, #84]	; 0x54
   2a04c:	cmp	r3, #1
   2a050:	beq	2a070 <__assert_fail@plt+0x186d0>
   2a054:	ldr	r3, [sp, #172]	; 0xac
   2a058:	cmp	r3, #0
   2a05c:	beq	2a070 <__assert_fail@plt+0x186d0>
   2a060:	ldr	r3, [sp, #152]	; 0x98
   2a064:	ldr	r3, [r3]
   2a068:	cmn	r3, #1
   2a06c:	beq	2a918 <__assert_fail@plt+0x18f78>
   2a070:	ldr	r4, [sp, #228]	; 0xe4
   2a074:	mov	r3, #0
   2a078:	mov	r0, #0
   2a07c:	mov	r1, #0
   2a080:	ldr	sl, [r4, #36]	; 0x24
   2a084:	str	r3, [sp, #120]	; 0x78
   2a088:	strd	r0, [sp, #248]	; 0xf8
   2a08c:	str	r3, [sp, #264]	; 0x108
   2a090:	ldr	r3, [sp, #184]	; 0xb8
   2a094:	mov	r2, r3
   2a098:	ldrsb	r3, [sl, #52]	; 0x34
   2a09c:	str	r2, [sp, #12]
   2a0a0:	cmp	r3, #0
   2a0a4:	bge	2a0e4 <__assert_fail@plt+0x18744>
   2a0a8:	sub	r1, r2, #1
   2a0ac:	add	r0, sp, #144	; 0x90
   2a0b0:	ldr	r2, [sp, #232]	; 0xe8
   2a0b4:	bl	20a08 <__assert_fail@plt+0xf068>
   2a0b8:	tst	r0, #1
   2a0bc:	bne	2ad40 <__assert_fail@plt+0x193a0>
   2a0c0:	cmp	r0, #0
   2a0c4:	beq	2a0e4 <__assert_fail@plt+0x18744>
   2a0c8:	and	r3, r0, #6
   2a0cc:	cmp	r3, #6
   2a0d0:	beq	2af24 <__assert_fail@plt+0x19584>
   2a0d4:	tst	r0, #2
   2a0d8:	bne	2ae24 <__assert_fail@plt+0x19484>
   2a0dc:	tst	r0, #4
   2a0e0:	bne	2ae4c <__assert_fail@plt+0x194ac>
   2a0e4:	ldr	r3, [sp, #244]	; 0xf4
   2a0e8:	cmp	r3, #0
   2a0ec:	beq	2aa44 <__assert_fail@plt+0x190a4>
   2a0f0:	ldr	r2, [r4, #76]	; 0x4c
   2a0f4:	ldr	r1, [sp, #12]
   2a0f8:	cmp	r2, #0
   2a0fc:	str	sl, [r3, r1, lsl #2]
   2a100:	bne	2aee0 <__assert_fail@plt+0x19540>
   2a104:	ldrb	r3, [sl, #52]	; 0x34
   2a108:	ldr	r2, [sp, #104]	; 0x68
   2a10c:	str	r2, [sp, #16]
   2a110:	ubfx	r3, r3, #4, #1
   2a114:	cmp	r3, #0
   2a118:	mvneq	fp, #0
   2a11c:	streq	r3, [sp, #28]
   2a120:	bne	2adf0 <__assert_fail@plt+0x19450>
   2a124:	ldr	r3, [sp, #100]	; 0x64
   2a128:	str	fp, [sp, #24]
   2a12c:	ldr	r4, [sp, #184]	; 0xb8
   2a130:	str	r3, [sp, #40]	; 0x28
   2a134:	b	2a194 <__assert_fail@plt+0x187f4>
   2a138:	ldrb	r3, [r5, #52]	; 0x34
   2a13c:	ldr	r2, [sp, #16]
   2a140:	ldr	r1, [sp, #12]
   2a144:	ldr	r4, [sp, #184]	; 0xb8
   2a148:	cmp	sl, r5
   2a14c:	movne	r2, #0
   2a150:	andeq	r2, r2, #1
   2a154:	cmp	r2, #0
   2a158:	movne	r1, r8
   2a15c:	tst	r3, #16
   2a160:	str	r1, [sp, #12]
   2a164:	str	r2, [sp, #16]
   2a168:	beq	2a190 <__assert_fail@plt+0x187f0>
   2a16c:	tst	r3, #128	; 0x80
   2a170:	bne	2a5f4 <__assert_fail@plt+0x18c54>
   2a174:	ldr	r3, [sp, #20]
   2a178:	cmp	r3, #0
   2a17c:	beq	2ae1c <__assert_fail@plt+0x1947c>
   2a180:	str	r4, [sp, #24]
   2a184:	str	r3, [sp, #28]
   2a188:	mov	r3, #0
   2a18c:	str	r3, [sp, #40]	; 0x28
   2a190:	mov	sl, r5
   2a194:	ldr	r3, [sp, #200]	; 0xc8
   2a198:	cmp	r3, r4
   2a19c:	ble	2a5ec <__assert_fail@plt+0x18c4c>
   2a1a0:	ldr	r3, [sp, #180]	; 0xb4
   2a1a4:	add	r8, r4, #1
   2a1a8:	cmp	r8, r3
   2a1ac:	bge	2a610 <__assert_fail@plt+0x18c70>
   2a1b0:	ldr	r3, [sp, #172]	; 0xac
   2a1b4:	cmp	r8, r3
   2a1b8:	bge	2a8ec <__assert_fail@plt+0x18f4c>
   2a1bc:	ldrb	r3, [sl, #52]	; 0x34
   2a1c0:	tst	r3, #32
   2a1c4:	bne	2a644 <__assert_fail@plt+0x18ca4>
   2a1c8:	ldr	r3, [sp, #148]	; 0x94
   2a1cc:	add	r2, r4, #1
   2a1d0:	str	r2, [sp, #184]	; 0xb8
   2a1d4:	ldrb	r4, [r3, r4]
   2a1d8:	ldr	r3, [sl, #44]	; 0x2c
   2a1dc:	cmp	r3, #0
   2a1e0:	beq	2a8bc <__assert_fail@plt+0x18f1c>
   2a1e4:	ldr	r5, [r3, r4, lsl #2]
   2a1e8:	ldr	r3, [sp, #244]	; 0xf4
   2a1ec:	cmp	r3, #0
   2a1f0:	beq	2a208 <__assert_fail@plt+0x18868>
   2a1f4:	mov	r2, r5
   2a1f8:	add	r1, sp, #144	; 0x90
   2a1fc:	add	r0, sp, #120	; 0x78
   2a200:	bl	294b8 <__assert_fail@plt+0x17b18>
   2a204:	mov	r5, r0
   2a208:	cmp	r5, #0
   2a20c:	bne	2a138 <__assert_fail@plt+0x18798>
   2a210:	ldr	r3, [sp, #120]	; 0x78
   2a214:	ldr	r4, [sp, #244]	; 0xf4
   2a218:	cmp	r3, #0
   2a21c:	bne	2a974 <__assert_fail@plt+0x18fd4>
   2a220:	cmp	r4, #0
   2a224:	beq	2a5ec <__assert_fail@plt+0x18c4c>
   2a228:	ldr	r2, [sp, #28]
   2a22c:	ldr	r3, [sp, #60]	; 0x3c
   2a230:	eor	r3, r3, #1
   2a234:	tst	r2, r3
   2a238:	bne	2a5ec <__assert_fail@plt+0x18c4c>
   2a23c:	ldr	r3, [sp, #184]	; 0xb8
   2a240:	mov	r1, #0
   2a244:	ldr	r0, [sp, #248]	; 0xf8
   2a248:	add	r4, r4, r3, lsl #2
   2a24c:	b	2a264 <__assert_fail@plt+0x188c4>
   2a250:	ldr	ip, [r4, #4]!
   2a254:	mov	r3, r2
   2a258:	mov	r1, #1
   2a25c:	cmp	ip, #0
   2a260:	bne	2a5b0 <__assert_fail@plt+0x18c10>
   2a264:	add	r2, r3, #1
   2a268:	cmp	r0, r2
   2a26c:	bge	2a250 <__assert_fail@plt+0x188b0>
   2a270:	ldr	fp, [sp, #24]
   2a274:	cmp	r1, #0
   2a278:	strne	r3, [sp, #184]	; 0xb8
   2a27c:	ldr	r2, [sp, #40]	; 0x28
   2a280:	cmp	r2, #0
   2a284:	beq	2a298 <__assert_fail@plt+0x188f8>
   2a288:	ldr	r3, [r2]
   2a28c:	ldr	r1, [sp, #12]
   2a290:	add	r3, r3, r1
   2a294:	str	r3, [r2]
   2a298:	cmn	fp, #1
   2a29c:	beq	2a90c <__assert_fail@plt+0x18f6c>
   2a2a0:	cmn	fp, #2
   2a2a4:	ldr	r4, [sp, #244]	; 0xf4
   2a2a8:	beq	2a974 <__assert_fail@plt+0x18fd4>
   2a2ac:	ldr	r3, [sp, #32]
   2a2b0:	str	fp, [sp, #236]	; 0xec
   2a2b4:	ldrb	r3, [r3, #28]
   2a2b8:	tst	r3, #16
   2a2bc:	bne	2a9e8 <__assert_fail@plt+0x19048>
   2a2c0:	ldr	r2, [sp, #472]	; 0x1d8
   2a2c4:	cmp	r2, #1
   2a2c8:	bls	2aa54 <__assert_fail@plt+0x190b4>
   2a2cc:	mov	r2, fp
   2a2d0:	add	r0, sp, #144	; 0x90
   2a2d4:	ldr	r1, [r4, fp, lsl #2]
   2a2d8:	bl	20c58 <__assert_fail@plt+0xf2b8>
   2a2dc:	ldr	r3, [sp, #68]	; 0x44
   2a2e0:	ldrb	r3, [r3, #88]	; 0x58
   2a2e4:	str	r0, [sp, #240]	; 0xf0
   2a2e8:	tst	r3, #1
   2a2ec:	bne	2a300 <__assert_fail@plt+0x18960>
   2a2f0:	ldr	r3, [sp, #68]	; 0x44
   2a2f4:	ldr	r3, [r3, #76]	; 0x4c
   2a2f8:	cmp	r3, #0
   2a2fc:	beq	2bd34 <__assert_fail@plt+0x1a394>
   2a300:	ldr	r3, [sp, #228]	; 0xe4
   2a304:	cmn	fp, #-1073741822	; 0xc0000002
   2a308:	ldr	sl, [sp, #240]	; 0xf0
   2a30c:	str	r3, [sp, #12]
   2a310:	bhi	2a974 <__assert_fail@plt+0x18fd4>
   2a314:	add	r5, fp, #1
   2a318:	lsl	r4, r5, #2
   2a31c:	mov	r0, r4
   2a320:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2a324:	subs	r9, r0, #0
   2a328:	beq	2ae2c <__assert_fail@plt+0x1948c>
   2a32c:	ldr	r3, [sp, #12]
   2a330:	ldr	r6, [r3, #76]	; 0x4c
   2a334:	cmp	r6, #0
   2a338:	beq	2aac8 <__assert_fail@plt+0x19128>
   2a33c:	mov	r0, r4
   2a340:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2a344:	cmp	r0, #0
   2a348:	mov	r6, r0
   2a34c:	str	r0, [sp, #24]
   2a350:	beq	2af58 <__assert_fail@plt+0x195b8>
   2a354:	add	r4, sp, #296	; 0x128
   2a358:	mov	r8, #0
   2a35c:	lsl	r7, r5, #2
   2a360:	mov	r1, #0
   2a364:	mov	r0, r6
   2a368:	mov	r2, r7
   2a36c:	bl	11814 <memset@plt>
   2a370:	add	r1, sp, #280	; 0x118
   2a374:	add	r0, sp, #144	; 0x90
   2a378:	str	r9, [sp, #280]	; 0x118
   2a37c:	str	r6, [sp, #284]	; 0x11c
   2a380:	str	sl, [sp, #288]	; 0x120
   2a384:	str	fp, [sp, #292]	; 0x124
   2a388:	str	r8, [r4]
   2a38c:	str	r8, [r4, #4]
   2a390:	str	r8, [r4, #8]
   2a394:	bl	287c0 <__assert_fail@plt+0x16e20>
   2a398:	mov	r3, r0
   2a39c:	ldr	r0, [sp, #304]	; 0x130
   2a3a0:	str	r3, [sp, #16]
   2a3a4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2a3a8:	ldr	r3, [sp, #16]
   2a3ac:	cmp	r3, #0
   2a3b0:	bne	2af2c <__assert_fail@plt+0x1958c>
   2a3b4:	ldr	r3, [r9]
   2a3b8:	cmp	r3, #0
   2a3bc:	bne	2af80 <__assert_fail@plt+0x195e0>
   2a3c0:	ldr	r3, [r6]
   2a3c4:	cmp	r3, #0
   2a3c8:	bne	2af80 <__assert_fail@plt+0x195e0>
   2a3cc:	ldr	r3, [sp, #244]	; 0xf4
   2a3d0:	sub	r7, r7, #4
   2a3d4:	add	r3, r3, r7
   2a3d8:	subs	fp, fp, #1
   2a3dc:	bcc	2ad60 <__assert_fail@plt+0x193c0>
   2a3e0:	ldr	r1, [r3, #-4]!
   2a3e4:	cmp	r1, #0
   2a3e8:	beq	2a3d8 <__assert_fail@plt+0x18a38>
   2a3ec:	ldrb	r2, [r1, #52]	; 0x34
   2a3f0:	tst	r2, #16
   2a3f4:	beq	2a3d8 <__assert_fail@plt+0x18a38>
   2a3f8:	mov	r2, fp
   2a3fc:	add	r0, sp, #144	; 0x90
   2a400:	bl	20c58 <__assert_fail@plt+0xf2b8>
   2a404:	add	r5, fp, #1
   2a408:	mov	sl, r0
   2a40c:	b	2a35c <__assert_fail@plt+0x189bc>
   2a410:	ldr	r3, [sp, #64]	; 0x40
   2a414:	cmp	r3, r5
   2a418:	ble	2a484 <__assert_fail@plt+0x18ae4>
   2a41c:	ldr	r3, [sp, #56]	; 0x38
   2a420:	ldr	r1, [sp, #80]	; 0x50
   2a424:	ldrb	r2, [r3, r5]
   2a428:	add	r3, r3, r5
   2a42c:	ldrb	r2, [r1, r2]
   2a430:	ldr	r1, [sp, #48]	; 0x30
   2a434:	ldrb	r2, [r1, r2]
   2a438:	cmp	r2, #0
   2a43c:	bne	2a02c <__assert_fail@plt+0x1868c>
   2a440:	ldr	r2, [sp, #56]	; 0x38
   2a444:	mov	ip, r1
   2a448:	ldr	r1, [sp, #64]	; 0x40
   2a44c:	ldr	lr, [sp, #80]	; 0x50
   2a450:	sub	r0, r2, #1
   2a454:	rsb	r2, r2, #1
   2a458:	add	r0, r0, r1
   2a45c:	b	2a474 <__assert_fail@plt+0x18ad4>
   2a460:	ldrb	r1, [r3, #1]!
   2a464:	ldrb	r1, [lr, r1]
   2a468:	ldrb	r1, [ip, r1]
   2a46c:	cmp	r1, #0
   2a470:	bne	2a028 <__assert_fail@plt+0x18688>
   2a474:	cmp	r0, r3
   2a478:	add	r5, r2, r3
   2a47c:	bne	2a460 <__assert_fail@plt+0x18ac0>
   2a480:	str	r5, [sp, #112]	; 0x70
   2a484:	ldr	r3, [sp, #64]	; 0x40
   2a488:	cmp	r3, r5
   2a48c:	bne	2a02c <__assert_fail@plt+0x1868c>
   2a490:	ldr	r2, [sp, #72]	; 0x48
   2a494:	cmp	r2, r3
   2a498:	ldrgt	r2, [sp, #56]	; 0x38
   2a49c:	movle	r3, #0
   2a4a0:	ldrbgt	r3, [r2, r3]
   2a4a4:	ldr	r2, [sp, #80]	; 0x50
   2a4a8:	cmp	r2, #0
   2a4ac:	ldrbne	r3, [r2, r3]
   2a4b0:	ldr	r2, [sp, #48]	; 0x30
   2a4b4:	ldrb	r3, [r2, r3]
   2a4b8:	cmp	r3, #0
   2a4bc:	bne	2a02c <__assert_fail@plt+0x1868c>
   2a4c0:	ldr	sl, [sp, #68]	; 0x44
   2a4c4:	mov	r3, #1
   2a4c8:	str	r3, [sp, #36]	; 0x24
   2a4cc:	ldr	r4, [sp, #244]	; 0xf4
   2a4d0:	b	2a980 <__assert_fail@plt+0x18fe0>
   2a4d4:	ldr	r3, [sp, #64]	; 0x40
   2a4d8:	cmp	r3, r5
   2a4dc:	ble	2a484 <__assert_fail@plt+0x18ae4>
   2a4e0:	ldr	r1, [sp, #48]	; 0x30
   2a4e4:	ldr	r3, [sp, #56]	; 0x38
   2a4e8:	ldrb	r2, [r3, r5]
   2a4ec:	add	r3, r3, r5
   2a4f0:	ldrb	r2, [r1, r2]
   2a4f4:	cmp	r2, #0
   2a4f8:	bne	2a02c <__assert_fail@plt+0x1868c>
   2a4fc:	ldr	r2, [sp, #56]	; 0x38
   2a500:	mov	ip, r1
   2a504:	ldr	r1, [sp, #64]	; 0x40
   2a508:	sub	r0, r2, #1
   2a50c:	rsb	r2, r2, #1
   2a510:	add	r0, r0, r1
   2a514:	b	2a528 <__assert_fail@plt+0x18b88>
   2a518:	ldrb	r1, [r3, #1]!
   2a51c:	ldrb	r1, [ip, r1]
   2a520:	cmp	r1, #0
   2a524:	bne	2a028 <__assert_fail@plt+0x18688>
   2a528:	cmp	r0, r3
   2a52c:	add	r5, r2, r3
   2a530:	bne	2a518 <__assert_fail@plt+0x18b78>
   2a534:	str	r5, [sp, #112]	; 0x70
   2a538:	b	2a484 <__assert_fail@plt+0x18ae4>
   2a53c:	ldr	r3, [sp, #76]	; 0x4c
   2a540:	cmp	r3, r5
   2a544:	bgt	2a4c0 <__assert_fail@plt+0x18b20>
   2a548:	ldr	r3, [sp, #80]	; 0x50
   2a54c:	cmp	r3, #0
   2a550:	beq	2aa80 <__assert_fail@plt+0x190e0>
   2a554:	mov	ip, r3
   2a558:	mov	r1, #0
   2a55c:	ldr	r0, [sp, #48]	; 0x30
   2a560:	mov	r3, r5
   2a564:	ldr	r6, [sp, #56]	; 0x38
   2a568:	ldr	lr, [sp, #72]	; 0x48
   2a56c:	ldr	r4, [sp, #76]	; 0x4c
   2a570:	b	2a584 <__assert_fail@plt+0x18be4>
   2a574:	sub	r3, r3, #1
   2a578:	mov	r1, #1
   2a57c:	cmp	r3, r4
   2a580:	blt	2ad98 <__assert_fail@plt+0x193f8>
   2a584:	cmp	lr, r3
   2a588:	mov	r2, #0
   2a58c:	ldrbgt	r2, [r6, r3]
   2a590:	ldrb	r2, [ip, r2]
   2a594:	ldrb	r2, [r0, r2]
   2a598:	cmp	r2, #0
   2a59c:	beq	2a574 <__assert_fail@plt+0x18bd4>
   2a5a0:	cmp	r1, #0
   2a5a4:	movne	r5, r3
   2a5a8:	strne	r3, [sp, #112]	; 0x70
   2a5ac:	b	2a02c <__assert_fail@plt+0x1868c>
   2a5b0:	mov	r2, #0
   2a5b4:	add	r1, sp, #144	; 0x90
   2a5b8:	str	r3, [sp, #184]	; 0xb8
   2a5bc:	add	r0, sp, #120	; 0x78
   2a5c0:	bl	294b8 <__assert_fail@plt+0x17b18>
   2a5c4:	ldr	r3, [sp, #120]	; 0x78
   2a5c8:	cmp	r3, #0
   2a5cc:	bne	2a5e0 <__assert_fail@plt+0x18c40>
   2a5d0:	cmp	r0, #0
   2a5d4:	bne	2ae14 <__assert_fail@plt+0x19474>
   2a5d8:	ldr	r4, [sp, #244]	; 0xf4
   2a5dc:	b	2a23c <__assert_fail@plt+0x1889c>
   2a5e0:	cmp	r0, #0
   2a5e4:	mov	r5, r0
   2a5e8:	bne	2a138 <__assert_fail@plt+0x18798>
   2a5ec:	ldr	fp, [sp, #24]
   2a5f0:	b	2a27c <__assert_fail@plt+0x188dc>
   2a5f4:	mov	r2, r4
   2a5f8:	mov	r1, r5
   2a5fc:	add	r0, sp, #144	; 0x90
   2a600:	bl	20c58 <__assert_fail@plt+0xf2b8>
   2a604:	cmp	r0, #0
   2a608:	beq	2a190 <__assert_fail@plt+0x187f0>
   2a60c:	b	2a174 <__assert_fail@plt+0x187d4>
   2a610:	ldr	r2, [sp, #192]	; 0xc0
   2a614:	cmp	r3, r2
   2a618:	bge	2a1b0 <__assert_fail@plt+0x18810>
   2a61c:	add	r1, r4, #2
   2a620:	add	r0, sp, #144	; 0x90
   2a624:	bl	241c8 <__assert_fail@plt+0x12828>
   2a628:	cmp	r0, #0
   2a62c:	str	r0, [sp, #120]	; 0x78
   2a630:	bne	2ad4c <__assert_fail@plt+0x193ac>
   2a634:	ldrb	r3, [sl, #52]	; 0x34
   2a638:	ldr	r4, [sp, #184]	; 0xb8
   2a63c:	tst	r3, #32
   2a640:	beq	2a1c8 <__assert_fail@plt+0x18828>
   2a644:	ldr	fp, [sl, #8]
   2a648:	ldr	r6, [sp, #228]	; 0xe4
   2a64c:	cmp	fp, #0
   2a650:	ble	2a9c0 <__assert_fail@plt+0x19020>
   2a654:	add	r3, r6, #128	; 0x80
   2a658:	mov	r7, #0
   2a65c:	str	r3, [sp, #44]	; 0x2c
   2a660:	str	r8, [sp, #92]	; 0x5c
   2a664:	b	2a7cc <__assert_fail@plt+0x18e2c>
   2a668:	tst	r0, #1
   2a66c:	beq	2a7c0 <__assert_fail@plt+0x18e20>
   2a670:	tst	r5, #8
   2a674:	bne	2a7c0 <__assert_fail@plt+0x18e20>
   2a678:	tst	r5, #32
   2a67c:	beq	2a688 <__assert_fail@plt+0x18ce8>
   2a680:	tst	r0, #2
   2a684:	beq	2a7c0 <__assert_fail@plt+0x18e20>
   2a688:	tst	r5, #128	; 0x80
   2a68c:	beq	2a698 <__assert_fail@plt+0x18cf8>
   2a690:	tst	r0, #8
   2a694:	beq	2a7c0 <__assert_fail@plt+0x18e20>
   2a698:	mov	r0, r8
   2a69c:	add	r3, sp, #144	; 0x90
   2a6a0:	str	r4, [sp]
   2a6a4:	mov	r2, r9
   2a6a8:	ldr	r1, [sp, #44]	; 0x2c
   2a6ac:	bl	236dc <__assert_fail@plt+0x11d3c>
   2a6b0:	cmp	r0, #0
   2a6b4:	beq	2a7b8 <__assert_fail@plt+0x18e18>
   2a6b8:	ldr	r2, [sp, #180]	; 0xb4
   2a6bc:	ldr	r3, [sp, #264]	; 0x108
   2a6c0:	ldr	r4, [sp, #184]	; 0xb8
   2a6c4:	ldr	r5, [sp, #248]	; 0xf8
   2a6c8:	cmp	r3, r0
   2a6cc:	movlt	r3, r0
   2a6d0:	add	r4, r0, r4
   2a6d4:	cmp	r4, r2
   2a6d8:	str	r3, [sp, #264]	; 0x108
   2a6dc:	blt	2a828 <__assert_fail@plt+0x18e88>
   2a6e0:	ldr	r3, [sp, #192]	; 0xc0
   2a6e4:	cmp	r2, r3
   2a6e8:	bge	2a828 <__assert_fail@plt+0x18e88>
   2a6ec:	add	r1, r4, #1
   2a6f0:	add	r0, sp, #144	; 0x90
   2a6f4:	bl	241c8 <__assert_fail@plt+0x12828>
   2a6f8:	cmp	r0, #0
   2a6fc:	bne	2a9cc <__assert_fail@plt+0x1902c>
   2a700:	cmp	r4, r5
   2a704:	ble	2a844 <__assert_fail@plt+0x18ea4>
   2a708:	ldr	r3, [sp, #244]	; 0xf4
   2a70c:	add	r0, r5, #1
   2a710:	sub	r2, r4, r5
   2a714:	lsl	r2, r2, #2
   2a718:	mov	r1, #0
   2a71c:	add	r0, r3, r0, lsl #2
   2a720:	bl	11814 <memset@plt>
   2a724:	mov	r3, #0
   2a728:	str	r3, [sp, #132]	; 0x84
   2a72c:	str	r4, [sp, #248]	; 0xf8
   2a730:	ldr	r3, [r6, #12]
   2a734:	ldr	r5, [sp, #244]	; 0xf4
   2a738:	ldr	r2, [r6, #24]
   2a73c:	ldr	r3, [r3, r9, lsl #2]
   2a740:	ldr	r1, [r5, r4, lsl #2]
   2a744:	add	r3, r3, r3, lsl #1
   2a748:	lsl	r3, r3, #2
   2a74c:	cmp	r1, #0
   2a750:	add	ip, r2, r3
   2a754:	beq	2a850 <__assert_fail@plt+0x18eb0>
   2a758:	mov	r2, ip
   2a75c:	add	r0, sp, #280	; 0x118
   2a760:	ldr	r1, [r1, #40]	; 0x28
   2a764:	bl	27aa8 <__assert_fail@plt+0x16108>
   2a768:	cmp	r0, #0
   2a76c:	str	r0, [sp, #132]	; 0x84
   2a770:	bne	2a9cc <__assert_fail@plt+0x1902c>
   2a774:	sub	r1, r4, #1
   2a778:	add	r0, sp, #144	; 0x90
   2a77c:	ldr	r2, [sp, #232]	; 0xe8
   2a780:	bl	20a08 <__assert_fail@plt+0xf068>
   2a784:	ldr	r5, [sp, #244]	; 0xf4
   2a788:	mov	r3, r0
   2a78c:	add	r2, sp, #280	; 0x118
   2a790:	mov	r1, r6
   2a794:	add	r0, sp, #132	; 0x84
   2a798:	bl	25860 <__assert_fail@plt+0x13ec0>
   2a79c:	str	r0, [r5, r4, lsl #2]
   2a7a0:	ldr	r0, [sp, #288]	; 0x120
   2a7a4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2a7a8:	ldr	r3, [sp, #244]	; 0xf4
   2a7ac:	ldr	r2, [r3, r4, lsl #2]
   2a7b0:	cmp	r2, #0
   2a7b4:	beq	2a8a8 <__assert_fail@plt+0x18f08>
   2a7b8:	ldr	fp, [sl, #8]
   2a7bc:	ldr	r4, [sp, #184]	; 0xb8
   2a7c0:	add	r7, r7, #1
   2a7c4:	cmp	r7, fp
   2a7c8:	bge	2a9bc <__assert_fail@plt+0x1901c>
   2a7cc:	ldr	r2, [sl, #12]
   2a7d0:	ldr	r8, [r6]
   2a7d4:	ldr	r9, [r2, r7, lsl #2]
   2a7d8:	add	r2, r8, r9, lsl #3
   2a7dc:	ldrb	r1, [r2, #6]
   2a7e0:	tst	r1, #16
   2a7e4:	beq	2a7c0 <__assert_fail@plt+0x18e20>
   2a7e8:	ldr	r5, [r2, #4]
   2a7ec:	ldr	r3, [sp, #52]	; 0x34
   2a7f0:	tst	r3, r5
   2a7f4:	beq	2a698 <__assert_fail@plt+0x18cf8>
   2a7f8:	ubfx	r5, r5, #8, #10
   2a7fc:	mov	r1, r4
   2a800:	add	r0, sp, #144	; 0x90
   2a804:	ldr	r2, [sp, #232]	; 0xe8
   2a808:	bl	20a08 <__assert_fail@plt+0xf068>
   2a80c:	tst	r5, #4
   2a810:	bne	2a668 <__assert_fail@plt+0x18cc8>
   2a814:	tst	r5, #8
   2a818:	beq	2a678 <__assert_fail@plt+0x18cd8>
   2a81c:	tst	r0, #1
   2a820:	beq	2a678 <__assert_fail@plt+0x18cd8>
   2a824:	b	2a7c0 <__assert_fail@plt+0x18e20>
   2a828:	ldr	r3, [sp, #172]	; 0xac
   2a82c:	cmp	r4, r3
   2a830:	blt	2a700 <__assert_fail@plt+0x18d60>
   2a834:	ldr	r2, [sp, #192]	; 0xc0
   2a838:	cmp	r3, r2
   2a83c:	bge	2a700 <__assert_fail@plt+0x18d60>
   2a840:	b	2a6ec <__assert_fail@plt+0x18d4c>
   2a844:	mov	r3, #0
   2a848:	str	r3, [sp, #132]	; 0x84
   2a84c:	b	2a730 <__assert_fail@plt+0x18d90>
   2a850:	add	r2, r2, r3
   2a854:	sub	r1, r4, #1
   2a858:	ldrd	r2, [r2]
   2a85c:	add	r0, sp, #144	; 0x90
   2a860:	mov	r8, r2
   2a864:	mov	r9, r3
   2a868:	ldr	r2, [sp, #232]	; 0xe8
   2a86c:	add	r3, sp, #280	; 0x118
   2a870:	strd	r8, [r3]
   2a874:	ldr	r3, [ip, #8]
   2a878:	str	r3, [sp, #288]	; 0x120
   2a87c:	bl	20a08 <__assert_fail@plt+0xf068>
   2a880:	mov	r3, r0
   2a884:	add	r2, sp, #280	; 0x118
   2a888:	mov	r1, r6
   2a88c:	add	r0, sp, #132	; 0x84
   2a890:	bl	25860 <__assert_fail@plt+0x13ec0>
   2a894:	ldr	r3, [sp, #244]	; 0xf4
   2a898:	str	r0, [r5, r4, lsl #2]
   2a89c:	ldr	r2, [r3, r4, lsl #2]
   2a8a0:	cmp	r2, #0
   2a8a4:	bne	2a7b8 <__assert_fail@plt+0x18e18>
   2a8a8:	ldr	r0, [sp, #132]	; 0x84
   2a8ac:	cmp	r0, #0
   2a8b0:	beq	2a7b8 <__assert_fail@plt+0x18e18>
   2a8b4:	ldr	r8, [sp, #92]	; 0x5c
   2a8b8:	b	2a9d4 <__assert_fail@plt+0x19034>
   2a8bc:	ldr	r5, [sl, #48]	; 0x30
   2a8c0:	cmp	r5, #0
   2a8c4:	beq	2aa10 <__assert_fail@plt+0x19070>
   2a8c8:	ldr	r1, [sp, #184]	; 0xb8
   2a8cc:	add	r0, sp, #144	; 0x90
   2a8d0:	ldr	r2, [sp, #232]	; 0xe8
   2a8d4:	sub	r1, r1, #1
   2a8d8:	bl	20a08 <__assert_fail@plt+0xf068>
   2a8dc:	tst	r0, #1
   2a8e0:	addne	r4, r4, #256	; 0x100
   2a8e4:	ldr	r5, [r5, r4, lsl #2]
   2a8e8:	b	2a1e8 <__assert_fail@plt+0x18848>
   2a8ec:	ldr	r2, [sp, #192]	; 0xc0
   2a8f0:	cmp	r3, r2
   2a8f4:	bge	2a1bc <__assert_fail@plt+0x1881c>
   2a8f8:	b	2a61c <__assert_fail@plt+0x18c7c>
   2a8fc:	mov	r0, r9
   2a900:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2a904:	mov	r0, r4
   2a908:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2a90c:	add	r0, sp, #144	; 0x90
   2a910:	bl	2036c <__assert_fail@plt+0xe9cc>
   2a914:	ldr	r5, [sp, #112]	; 0x70
   2a918:	ldr	r2, [sp, #76]	; 0x4c
   2a91c:	ldr	r3, [sp, #96]	; 0x60
   2a920:	add	r5, r5, r3
   2a924:	ldr	r3, [sp, #64]	; 0x40
   2a928:	str	r5, [sp, #112]	; 0x70
   2a92c:	cmp	r5, r3
   2a930:	movle	r3, #0
   2a934:	movgt	r3, #1
   2a938:	cmp	r5, r2
   2a93c:	orrlt	r3, r3, #1
   2a940:	cmp	r3, #0
   2a944:	beq	29fe0 <__assert_fail@plt+0x18640>
   2a948:	b	2a4c0 <__assert_fail@plt+0x18b20>
   2a94c:	mov	r3, #1
   2a950:	str	r3, [sp, #36]	; 0x24
   2a954:	ldr	r0, [sp, #36]	; 0x24
   2a958:	add	sp, sp, #428	; 0x1ac
   2a95c:	ldrd	r4, [sp]
   2a960:	ldrd	r6, [sp, #8]
   2a964:	ldrd	r8, [sp, #16]
   2a968:	ldrd	sl, [sp, #24]
   2a96c:	add	sp, sp, #32
   2a970:	pop	{pc}		; (ldr pc, [sp], #4)
   2a974:	ldr	sl, [sp, #68]	; 0x44
   2a978:	mov	r3, #12
   2a97c:	str	r3, [sp, #36]	; 0x24
   2a980:	mov	r0, r4
   2a984:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2a988:	ldr	r3, [sl, #76]	; 0x4c
   2a98c:	cmp	r3, #0
   2a990:	bne	2ad24 <__assert_fail@plt+0x19384>
   2a994:	ldr	r0, [sp, #152]	; 0x98
   2a998:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2a99c:	ldr	r0, [sp, #156]	; 0x9c
   2a9a0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2a9a4:	ldrb	r3, [sp, #219]	; 0xdb
   2a9a8:	cmp	r3, #0
   2a9ac:	beq	2a954 <__assert_fail@plt+0x18fb4>
   2a9b0:	ldr	r0, [sp, #148]	; 0x94
   2a9b4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2a9b8:	b	2a954 <__assert_fail@plt+0x18fb4>
   2a9bc:	ldr	r8, [sp, #92]	; 0x5c
   2a9c0:	mov	r3, #0
   2a9c4:	str	r3, [sp, #120]	; 0x78
   2a9c8:	b	2a1c8 <__assert_fail@plt+0x18828>
   2a9cc:	ldr	r8, [sp, #92]	; 0x5c
   2a9d0:	ldr	r3, [sp, #244]	; 0xf4
   2a9d4:	cmp	r3, #0
   2a9d8:	str	r0, [sp, #120]	; 0x78
   2a9dc:	beq	2aa38 <__assert_fail@plt+0x19098>
   2a9e0:	mov	r5, #0
   2a9e4:	b	2a1f4 <__assert_fail@plt+0x18854>
   2a9e8:	ldr	sl, [sp, #68]	; 0x44
   2a9ec:	ldr	r3, [sl, #76]	; 0x4c
   2a9f0:	cmp	r3, #0
   2a9f4:	beq	2ab44 <__assert_fail@plt+0x191a4>
   2a9f8:	mov	r2, fp
   2a9fc:	add	r0, sp, #144	; 0x90
   2aa00:	ldr	r1, [r4, fp, lsl #2]
   2aa04:	bl	20c58 <__assert_fail@plt+0xf2b8>
   2aa08:	str	r0, [sp, #240]	; 0xf0
   2aa0c:	b	2a300 <__assert_fail@plt+0x18960>
   2aa10:	mov	r1, sl
   2aa14:	ldr	r0, [sp, #228]	; 0xe4
   2aa18:	bl	25c78 <__assert_fail@plt+0x142d8>
   2aa1c:	cmp	r0, #0
   2aa20:	bne	2a1d8 <__assert_fail@plt+0x18838>
   2aa24:	ldr	r3, [sp, #244]	; 0xf4
   2aa28:	mov	r2, #12
   2aa2c:	str	r2, [sp, #120]	; 0x78
   2aa30:	cmp	r3, #0
   2aa34:	bne	2a9e0 <__assert_fail@plt+0x19040>
   2aa38:	mov	r4, #0
   2aa3c:	ldr	sl, [sp, #68]	; 0x44
   2aa40:	b	2a978 <__assert_fail@plt+0x18fd8>
   2aa44:	ldr	r3, [sp, #104]	; 0x68
   2aa48:	str	r3, [sp, #16]
   2aa4c:	ldrb	r3, [sl, #52]	; 0x34
   2aa50:	b	2a110 <__assert_fail@plt+0x18770>
   2aa54:	ldr	sl, [sp, #68]	; 0x44
   2aa58:	ldr	r2, [sl, #76]	; 0x4c
   2aa5c:	cmp	r2, #0
   2aa60:	bne	2a9f8 <__assert_fail@plt+0x19058>
   2aa64:	ldr	r2, [sp, #472]	; 0x1d8
   2aa68:	cmp	r2, #0
   2aa6c:	bne	2abac <__assert_fail@plt+0x1920c>
   2aa70:	str	r2, [sp, #36]	; 0x24
   2aa74:	b	2a980 <__assert_fail@plt+0x18fe0>
   2aa78:	ldr	r2, [sp, #72]	; 0x48
   2aa7c:	b	29e24 <__assert_fail@plt+0x18484>
   2aa80:	mov	r1, r3
   2aa84:	mov	r3, r5
   2aa88:	ldr	r0, [sp, #48]	; 0x30
   2aa8c:	ldr	r4, [sp, #56]	; 0x38
   2aa90:	ldr	ip, [sp, #72]	; 0x48
   2aa94:	ldr	lr, [sp, #76]	; 0x4c
   2aa98:	b	2aaac <__assert_fail@plt+0x1910c>
   2aa9c:	sub	r3, r3, #1
   2aaa0:	mov	r1, #1
   2aaa4:	cmp	lr, r3
   2aaa8:	bgt	2ad98 <__assert_fail@plt+0x193f8>
   2aaac:	cmp	ip, r3
   2aab0:	mov	r2, #0
   2aab4:	ldrbgt	r2, [r4, r3]
   2aab8:	ldrb	r2, [r0, r2]
   2aabc:	cmp	r2, #0
   2aac0:	beq	2aa9c <__assert_fail@plt+0x190fc>
   2aac4:	b	2a5a0 <__assert_fail@plt+0x18c00>
   2aac8:	add	r1, sp, #280	; 0x118
   2aacc:	add	r0, sp, #144	; 0x90
   2aad0:	str	r9, [sp, #280]	; 0x118
   2aad4:	str	r6, [sp, #284]	; 0x11c
   2aad8:	str	sl, [sp, #288]	; 0x120
   2aadc:	str	fp, [sp, #292]	; 0x124
   2aae0:	str	r6, [sp, #296]	; 0x128
   2aae4:	str	r6, [sp, #300]	; 0x12c
   2aae8:	str	r6, [sp, #304]	; 0x130
   2aaec:	bl	287c0 <__assert_fail@plt+0x16e20>
   2aaf0:	mov	r7, r0
   2aaf4:	ldr	r0, [sp, #304]	; 0x130
   2aaf8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2aafc:	cmp	r7, #0
   2ab00:	bne	2af78 <__assert_fail@plt+0x195d8>
   2ab04:	ldr	r4, [r9]
   2ab08:	cmp	r4, #0
   2ab0c:	beq	2a8fc <__assert_fail@plt+0x18f5c>
   2ab10:	mov	r8, fp
   2ab14:	mov	fp, sl
   2ab18:	ldr	sl, [sp, #68]	; 0x44
   2ab1c:	ldr	r0, [sp, #244]	; 0xf4
   2ab20:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2ab24:	mov	r0, #0
   2ab28:	str	r8, [sp, #236]	; 0xec
   2ab2c:	str	fp, [sp, #240]	; 0xf0
   2ab30:	str	r9, [sp, #244]	; 0xf4
   2ab34:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2ab38:	mov	r0, #0
   2ab3c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2ab40:	ldr	r4, [sp, #244]	; 0xf4
   2ab44:	ldr	r3, [sp, #472]	; 0x1d8
   2ab48:	cmp	r3, #0
   2ab4c:	beq	2a980 <__assert_fail@plt+0x18fe0>
   2ab50:	cmp	r3, #1
   2ab54:	bls	2aba4 <__assert_fail@plt+0x19204>
   2ab58:	sub	r2, r3, #2
   2ab5c:	ldr	r3, [sp, #476]	; 0x1dc
   2ab60:	cmp	r2, #4
   2ab64:	movls	r2, #0
   2ab68:	movhi	r2, #1
   2ab6c:	add	r3, r3, #8
   2ab70:	ubfx	r1, r3, #0, #3
   2ab74:	cmp	r1, #0
   2ab78:	movne	r2, #0
   2ab7c:	cmp	r2, #0
   2ab80:	beq	2b9f4 <__assert_fail@plt+0x1a054>
   2ab84:	ldr	r1, [sp, #472]	; 0x1d8
   2ab88:	mvn	r0, #0
   2ab8c:	ldr	r2, [sp, #476]	; 0x1dc
   2ab90:	add	r2, r2, r1, lsl #3
   2ab94:	mvn	r1, #0
   2ab98:	strd	r0, [r3], #8
   2ab9c:	cmp	r2, r3
   2aba0:	bne	2ab98 <__assert_fail@plt+0x191f8>
   2aba4:	ldr	r3, [sp, #32]
   2aba8:	ldrb	r3, [r3, #28]
   2abac:	eor	r3, r3, #16
   2abb0:	mov	r5, #0
   2abb4:	ldr	r1, [sp, #236]	; 0xec
   2abb8:	ldr	r2, [sp, #472]	; 0x1d8
   2abbc:	subs	r2, r2, #1
   2abc0:	movne	r2, #1
   2abc4:	ands	r3, r2, r3, lsr #4
   2abc8:	ldr	r2, [sp, #476]	; 0x1dc
   2abcc:	str	r5, [r2]
   2abd0:	str	r1, [r2, #4]
   2abd4:	bne	2afdc <__assert_fail@plt+0x1963c>
   2abd8:	ldrb	r2, [sp, #220]	; 0xdc
   2abdc:	ldr	ip, [sp, #112]	; 0x70
   2abe0:	ldr	r0, [sp, #156]	; 0x9c
   2abe4:	cmp	r2, #0
   2abe8:	ldrne	r5, [sp, #476]	; 0x1dc
   2abec:	movne	r2, #0
   2abf0:	ldrne	r7, [sp, #472]	; 0x1d8
   2abf4:	ldr	r1, [sp, #172]	; 0xac
   2abf8:	addne	r5, r5, #4
   2abfc:	ldr	lr, [sp, #176]	; 0xb0
   2ac00:	bne	2ae94 <__assert_fail@plt+0x194f4>
   2ac04:	ldr	lr, [sp, #472]	; 0x1d8
   2ac08:	ldr	r1, [sp, #476]	; 0x1dc
   2ac0c:	add	r0, r1, #4
   2ac10:	b	2ac1c <__assert_fail@plt+0x1927c>
   2ac14:	ldr	r3, [sp, #476]	; 0x1dc
   2ac18:	ldr	r3, [r3, r2, lsl #3]
   2ac1c:	cmn	r3, #1
   2ac20:	add	r1, ip, r3
   2ac24:	beq	2ac3c <__assert_fail@plt+0x1929c>
   2ac28:	ldr	r3, [r0, r2, lsl #3]
   2ac2c:	ldr	r5, [sp, #476]	; 0x1dc
   2ac30:	add	r3, ip, r3
   2ac34:	str	r1, [r5, r2, lsl #3]
   2ac38:	str	r3, [r0, r2, lsl #3]
   2ac3c:	add	r2, r2, #1
   2ac40:	cmp	lr, r2
   2ac44:	bne	2ac14 <__assert_fail@plt+0x19274>
   2ac48:	ldr	r3, [sp, #108]	; 0x6c
   2ac4c:	cmp	r3, #0
   2ac50:	ble	2aca0 <__assert_fail@plt+0x19300>
   2ac54:	mov	r0, r3
   2ac58:	ldr	r2, [sp, #472]	; 0x1d8
   2ac5c:	ldr	r3, [sp, #476]	; 0x1dc
   2ac60:	add	r3, r3, r2, lsl #3
   2ac64:	sub	r2, r0, #1
   2ac68:	cmp	r2, #4
   2ac6c:	ubfx	r1, r3, #0, #3
   2ac70:	movls	r2, #0
   2ac74:	movhi	r2, #1
   2ac78:	cmp	r1, #0
   2ac7c:	movne	r2, #0
   2ac80:	cmp	r2, #0
   2ac84:	beq	2ba1c <__assert_fail@plt+0x1a07c>
   2ac88:	add	r2, r3, r0, lsl #3
   2ac8c:	mvn	r1, #0
   2ac90:	mvn	r0, #0
   2ac94:	strd	r0, [r3], #8
   2ac98:	cmp	r3, r2
   2ac9c:	bne	2ac94 <__assert_fail@plt+0x192f4>
   2aca0:	ldr	ip, [sl, #132]	; 0x84
   2aca4:	cmp	ip, #0
   2aca8:	beq	2a980 <__assert_fail@plt+0x18fe0>
   2acac:	ldr	r3, [sp, #472]	; 0x1d8
   2acb0:	cmp	r3, #1
   2acb4:	bls	2a980 <__assert_fail@plt+0x18fe0>
   2acb8:	ldr	r1, [sp, #476]	; 0x1dc
   2acbc:	mov	r6, r3
   2acc0:	mov	r2, #0
   2acc4:	mov	r3, #1
   2acc8:	add	r5, r1, #4
   2accc:	ldr	r1, [ip, r2, lsl #2]
   2acd0:	mov	r0, r3
   2acd4:	cmp	r1, r2
   2acd8:	add	lr, r1, #1
   2acdc:	beq	2ad00 <__assert_fail@plt+0x19360>
   2ace0:	ldr	r1, [sp, #476]	; 0x1dc
   2ace4:	ldr	r1, [r1, lr, lsl #3]
   2ace8:	ldr	lr, [sp, #476]	; 0x1dc
   2acec:	str	r1, [lr, r3, lsl #3]
   2acf0:	ldr	r2, [ip, r2, lsl #2]
   2acf4:	add	r2, lr, r2, lsl #3
   2acf8:	ldr	r2, [r2, #12]
   2acfc:	str	r2, [r5, r3, lsl #3]
   2ad00:	add	r3, r3, #1
   2ad04:	mov	r2, r0
   2ad08:	cmp	r6, r3
   2ad0c:	bne	2accc <__assert_fail@plt+0x1932c>
   2ad10:	b	2a980 <__assert_fail@plt+0x18fe0>
   2ad14:	ldrb	r3, [sl, #88]	; 0x58
   2ad18:	tst	r3, #2
   2ad1c:	bne	29ec0 <__assert_fail@plt+0x18520>
   2ad20:	b	29ee8 <__assert_fail@plt+0x18548>
   2ad24:	add	r0, sp, #144	; 0x90
   2ad28:	bl	2036c <__assert_fail@plt+0xe9cc>
   2ad2c:	ldr	r0, [sp, #276]	; 0x114
   2ad30:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2ad34:	ldr	r0, [sp, #260]	; 0x104
   2ad38:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2ad3c:	b	2a994 <__assert_fail@plt+0x18ff4>
   2ad40:	ldr	sl, [r4, #40]	; 0x28
   2ad44:	cmp	sl, #0
   2ad48:	bne	2a0e4 <__assert_fail@plt+0x18744>
   2ad4c:	mov	r3, #12
   2ad50:	ldr	sl, [sp, #68]	; 0x44
   2ad54:	str	r3, [sp, #36]	; 0x24
   2ad58:	ldr	r4, [sp, #244]	; 0xf4
   2ad5c:	b	2a980 <__assert_fail@plt+0x18fe0>
   2ad60:	mov	r0, r9
   2ad64:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2ad68:	mov	r0, r6
   2ad6c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2ad70:	add	r0, sp, #144	; 0x90
   2ad74:	bl	2036c <__assert_fail@plt+0xe9cc>
   2ad78:	ldr	r5, [sp, #112]	; 0x70
   2ad7c:	b	2a918 <__assert_fail@plt+0x18f78>
   2ad80:	mov	r3, #12
   2ad84:	ldr	r4, [sp, #244]	; 0xf4
   2ad88:	str	r3, [sp, #36]	; 0x24
   2ad8c:	b	2a980 <__assert_fail@plt+0x18fe0>
   2ad90:	mov	r3, #8
   2ad94:	b	29f84 <__assert_fail@plt+0x185e4>
   2ad98:	mov	r2, #1
   2ad9c:	ldr	sl, [sp, #68]	; 0x44
   2ada0:	str	r2, [sp, #36]	; 0x24
   2ada4:	str	r3, [sp, #112]	; 0x70
   2ada8:	ldr	r4, [sp, #244]	; 0xf4
   2adac:	b	2a980 <__assert_fail@plt+0x18fe0>
   2adb0:	ldr	r4, [sp, #48]	; 0x30
   2adb4:	ldr	r1, [sp, #168]	; 0xa8
   2adb8:	sub	r2, r5, r1
   2adbc:	ldr	r3, [sp, #176]	; 0xb0
   2adc0:	cmp	r3, r2
   2adc4:	bhi	2bd64 <__assert_fail@plt+0x1a3c4>
   2adc8:	mov	r1, r5
   2adcc:	add	r0, sp, #144	; 0x90
   2add0:	ldr	r2, [sp, #480]	; 0x1e0
   2add4:	bl	20f18 <__assert_fail@plt+0xf578>
   2add8:	subs	r3, r0, #0
   2addc:	str	r3, [sp, #36]	; 0x24
   2ade0:	beq	2bd5c <__assert_fail@plt+0x1a3bc>
   2ade4:	ldr	sl, [sp, #68]	; 0x44
   2ade8:	ldr	r4, [sp, #244]	; 0xf4
   2adec:	b	2a980 <__assert_fail@plt+0x18fe0>
   2adf0:	ldrsb	r3, [sl, #52]	; 0x34
   2adf4:	cmp	r3, #0
   2adf8:	blt	2ae68 <__assert_fail@plt+0x194c8>
   2adfc:	ldr	fp, [sp, #12]
   2ae00:	ldr	r3, [sp, #20]
   2ae04:	cmp	r3, #0
   2ae08:	strne	r3, [sp, #28]
   2ae0c:	bne	2a124 <__assert_fail@plt+0x18784>
   2ae10:	b	2a298 <__assert_fail@plt+0x188f8>
   2ae14:	mov	r5, r0
   2ae18:	b	2a138 <__assert_fail@plt+0x18798>
   2ae1c:	mov	fp, r4
   2ae20:	b	2a298 <__assert_fail@plt+0x188f8>
   2ae24:	ldr	sl, [r4, #44]	; 0x2c
   2ae28:	b	2ad44 <__assert_fail@plt+0x193a4>
   2ae2c:	ldr	sl, [sp, #68]	; 0x44
   2ae30:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2ae34:	mov	r3, #12
   2ae38:	mov	r0, r9
   2ae3c:	str	r3, [sp, #36]	; 0x24
   2ae40:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2ae44:	ldr	r4, [sp, #244]	; 0xf4
   2ae48:	b	2a980 <__assert_fail@plt+0x18fe0>
   2ae4c:	mov	r3, r0
   2ae50:	mov	r1, r4
   2ae54:	ldr	r2, [sl, #40]	; 0x28
   2ae58:	add	r0, sp, #120	; 0x78
   2ae5c:	bl	25860 <__assert_fail@plt+0x13ec0>
   2ae60:	mov	sl, r0
   2ae64:	b	2ad44 <__assert_fail@plt+0x193a4>
   2ae68:	mov	r1, sl
   2ae6c:	add	r0, sp, #144	; 0x90
   2ae70:	ldr	r2, [sp, #12]
   2ae74:	bl	20c58 <__assert_fail@plt+0xf2b8>
   2ae78:	subs	r3, r0, #0
   2ae7c:	str	r3, [sp, #28]
   2ae80:	bne	2adfc <__assert_fail@plt+0x1945c>
   2ae84:	mvn	fp, #0
   2ae88:	b	2a124 <__assert_fail@plt+0x18784>
   2ae8c:	ldr	r3, [sp, #476]	; 0x1dc
   2ae90:	ldr	r3, [r3, r2, lsl #3]
   2ae94:	cmn	r3, #1
   2ae98:	beq	2aed0 <__assert_fail@plt+0x19530>
   2ae9c:	cmp	r1, r3
   2aea0:	ldr	r6, [r5, r2, lsl #3]
   2aea4:	moveq	r3, lr
   2aea8:	ldrne	r3, [r0, r3, lsl #2]
   2aeac:	ldr	r8, [sp, #476]	; 0x1dc
   2aeb0:	cmp	r1, r6
   2aeb4:	moveq	r6, lr
   2aeb8:	str	r3, [r8, r2, lsl #3]
   2aebc:	add	r3, ip, r3
   2aec0:	ldrne	r6, [r0, r6, lsl #2]
   2aec4:	str	r3, [r8, r2, lsl #3]
   2aec8:	add	r6, ip, r6
   2aecc:	str	r6, [r5, r2, lsl #3]
   2aed0:	add	r2, r2, #1
   2aed4:	cmp	r2, r7
   2aed8:	bne	2ae8c <__assert_fail@plt+0x194ec>
   2aedc:	b	2ac48 <__assert_fail@plt+0x192a8>
   2aee0:	add	r4, sl, #8
   2aee4:	add	r5, sl, #12
   2aee8:	mov	r1, r4
   2aeec:	mov	r2, r5
   2aef0:	mov	r3, #0
   2aef4:	add	r0, sp, #144	; 0x90
   2aef8:	bl	2187c <__assert_fail@plt+0xfedc>
   2aefc:	cmp	r0, #0
   2af00:	mov	fp, r0
   2af04:	str	r0, [sp, #120]	; 0x78
   2af08:	bne	2a298 <__assert_fail@plt+0x188f8>
   2af0c:	ldrb	r3, [sl, #52]	; 0x34
   2af10:	tst	r3, #64	; 0x40
   2af14:	bne	2afb4 <__assert_fail@plt+0x19614>
   2af18:	mov	r2, #0
   2af1c:	str	r2, [sp, #16]
   2af20:	b	2a110 <__assert_fail@plt+0x18770>
   2af24:	ldr	sl, [r4, #48]	; 0x30
   2af28:	b	2ad44 <__assert_fail@plt+0x193a4>
   2af2c:	mov	r7, r3
   2af30:	mov	r0, r9
   2af34:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2af38:	ldr	r0, [sp, #24]
   2af3c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2af40:	cmp	r7, #1
   2af44:	beq	2a90c <__assert_fail@plt+0x18f6c>
   2af48:	str	r7, [sp, #36]	; 0x24
   2af4c:	ldr	sl, [sp, #68]	; 0x44
   2af50:	ldr	r4, [sp, #244]	; 0xf4
   2af54:	b	2a980 <__assert_fail@plt+0x18fe0>
   2af58:	mov	r3, #12
   2af5c:	mov	r0, r9
   2af60:	ldr	sl, [sp, #68]	; 0x44
   2af64:	str	r3, [sp, #36]	; 0x24
   2af68:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2af6c:	mov	r0, r6
   2af70:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2af74:	b	2a4cc <__assert_fail@plt+0x18b2c>
   2af78:	str	r6, [sp, #24]
   2af7c:	b	2af30 <__assert_fail@plt+0x19590>
   2af80:	mov	r3, r5
   2af84:	mov	r2, r6
   2af88:	ldr	r0, [sp, #12]
   2af8c:	mov	r1, r9
   2af90:	bl	27cac <__assert_fail@plt+0x1630c>
   2af94:	mov	r7, r0
   2af98:	mov	r0, r6
   2af9c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2afa0:	cmp	r7, #0
   2afa4:	beq	2ab10 <__assert_fail@plt+0x19170>
   2afa8:	mov	r3, #0
   2afac:	str	r3, [sp, #24]
   2afb0:	b	2af30 <__assert_fail@plt+0x19590>
   2afb4:	mov	r2, r5
   2afb8:	mov	r1, r4
   2afbc:	add	r0, sp, #144	; 0x90
   2afc0:	bl	28ce0 <__assert_fail@plt+0x17340>
   2afc4:	cmp	r0, #0
   2afc8:	mov	fp, r0
   2afcc:	str	r0, [sp, #120]	; 0x78
   2afd0:	bne	2a298 <__assert_fail@plt+0x188f8>
   2afd4:	ldrb	r3, [sl, #52]	; 0x34
   2afd8:	b	2af18 <__assert_fail@plt+0x19578>
   2afdc:	ldr	r2, [sp, #32]
   2afe0:	ldrb	r3, [sl, #88]	; 0x58
   2afe4:	ldr	r2, [r2]
   2afe8:	tst	r3, #1
   2afec:	str	r2, [sp, #12]
   2aff0:	beq	2b8f4 <__assert_fail@plt+0x19f54>
   2aff4:	ldr	r3, [sl, #76]	; 0x4c
   2aff8:	cmp	r3, r5
   2affc:	ble	2b8f4 <__assert_fail@plt+0x19f54>
   2b000:	mov	r0, #0
   2b004:	mov	r1, #2
   2b008:	mov	r2, #0
   2b00c:	mov	r3, #16
   2b010:	add	ip, sp, #280	; 0x118
   2b014:	strd	r0, [sp, #120]	; 0x78
   2b018:	add	r1, sp, #292	; 0x124
   2b01c:	mov	r0, #48	; 0x30
   2b020:	strd	r2, [ip]
   2b024:	str	r1, [sp, #16]
   2b028:	str	r5, [sp, #128]	; 0x80
   2b02c:	str	r1, [sp, #288]	; 0x120
   2b030:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2b034:	cmp	r0, #0
   2b038:	str	r0, [sp, #128]	; 0x80
   2b03c:	beq	2ad80 <__assert_fail@plt+0x193e0>
   2b040:	ldr	r1, [sp, #12]
   2b044:	add	r2, sp, #132	; 0x84
   2b048:	ldr	r3, [sp, #280]	; 0x118
   2b04c:	str	r2, [sp, #24]
   2b050:	ldr	fp, [r1, #72]	; 0x48
   2b054:	str	r5, [sp, #132]	; 0x84
   2b058:	ldr	r1, [sp, #472]	; 0x1d8
   2b05c:	str	r5, [sp, #136]	; 0x88
   2b060:	str	r5, [sp, #140]	; 0x8c
   2b064:	cmp	r3, r1
   2b068:	movcs	r3, r1
   2b06c:	addcs	r5, sp, #120	; 0x78
   2b070:	strcs	r3, [sp, #280]	; 0x118
   2b074:	bcc	2bd40 <__assert_fail@plt+0x1a3a0>
   2b078:	ldr	r0, [sp, #288]	; 0x120
   2b07c:	ldr	r3, [sp, #472]	; 0x1d8
   2b080:	ldr	r1, [sp, #476]	; 0x1dc
   2b084:	str	r0, [sp, #28]
   2b088:	lsl	r2, r3, #3
   2b08c:	lsl	r3, r3, #4
   2b090:	mov	r4, r1
   2b094:	str	r2, [sp, #32]
   2b098:	str	r3, [sp, #44]	; 0x2c
   2b09c:	bl	115d4 <memcpy@plt>
   2b0a0:	ldr	r6, [r4], #4
   2b0a4:	str	sl, [sp, #20]
   2b0a8:	str	r4, [sp, #40]	; 0x28
   2b0ac:	str	r6, [sp, #116]	; 0x74
   2b0b0:	ldr	r3, [sp, #476]	; 0x1dc
   2b0b4:	ldr	r0, [r3, #4]
   2b0b8:	cmp	r6, r0
   2b0bc:	bgt	2bc2c <__assert_fail@plt+0x1a28c>
   2b0c0:	ldr	r3, [sp, #12]
   2b0c4:	lsl	r4, fp, #3
   2b0c8:	mov	r7, fp
   2b0cc:	ldr	r2, [r3]
   2b0d0:	add	r1, r2, r4
   2b0d4:	ldrb	r3, [r1, #4]
   2b0d8:	cmp	r3, #8
   2b0dc:	beq	2b5f0 <__assert_fail@plt+0x19c50>
   2b0e0:	cmp	r3, #9
   2b0e4:	beq	2b674 <__assert_fail@plt+0x19cd4>
   2b0e8:	cmp	r0, r6
   2b0ec:	beq	2b508 <__assert_fail@plt+0x19b68>
   2b0f0:	cmp	r5, #0
   2b0f4:	beq	2b178 <__assert_fail@plt+0x197d8>
   2b0f8:	ldr	r2, [sp, #136]	; 0x88
   2b0fc:	cmp	r2, #0
   2b100:	ble	2b178 <__assert_fail@plt+0x197d8>
   2b104:	subs	r2, r2, #1
   2b108:	ldr	r0, [sp, #140]	; 0x8c
   2b10c:	moveq	r1, r2
   2b110:	beq	2b16c <__assert_fail@plt+0x197cc>
   2b114:	mov	r1, #0
   2b118:	add	r3, r2, r1
   2b11c:	lsr	r3, r3, #1
   2b120:	ldr	ip, [r0, r3, lsl #2]
   2b124:	cmp	ip, fp
   2b128:	blt	2b4dc <__assert_fail@plt+0x19b3c>
   2b12c:	cmp	r3, r1
   2b130:	bls	2b16c <__assert_fail@plt+0x197cc>
   2b134:	add	r2, r3, r1
   2b138:	lsr	r2, r2, #1
   2b13c:	ldr	ip, [r0, r2, lsl #2]
   2b140:	cmp	fp, ip
   2b144:	ble	2b15c <__assert_fail@plt+0x197bc>
   2b148:	b	2b4d0 <__assert_fail@plt+0x19b30>
   2b14c:	ldr	ip, [r0, r3, lsl #2]
   2b150:	cmp	ip, fp
   2b154:	blt	2b4dc <__assert_fail@plt+0x19b3c>
   2b158:	mov	r2, r3
   2b15c:	add	r3, r1, r2
   2b160:	cmp	r1, r2
   2b164:	lsr	r3, r3, #1
   2b168:	bcc	2b14c <__assert_fail@plt+0x197ac>
   2b16c:	ldr	r3, [r0, r1, lsl #2]
   2b170:	cmp	r3, fp
   2b174:	beq	2b51c <__assert_fail@plt+0x19b7c>
   2b178:	ldr	r6, [sp, #228]	; 0xe4
   2b17c:	ldr	r0, [r6]
   2b180:	add	r1, r0, r4
   2b184:	ldrb	r3, [r1, #4]
   2b188:	tst	r3, #8
   2b18c:	beq	2b328 <__assert_fail@plt+0x19988>
   2b190:	ldr	ip, [r6, #20]
   2b194:	add	r4, fp, fp, lsl #1
   2b198:	ldr	r2, [sp, #136]	; 0x88
   2b19c:	ldr	r0, [sp, #116]	; 0x74
   2b1a0:	add	r4, ip, r4, lsl #2
   2b1a4:	ldr	r1, [sp, #244]	; 0xf4
   2b1a8:	cmp	r2, #0
   2b1ac:	ldr	r6, [r1, r0, lsl #2]
   2b1b0:	ble	2b228 <__assert_fail@plt+0x19888>
   2b1b4:	subs	r2, r2, #1
   2b1b8:	moveq	r1, r2
   2b1bc:	ldr	ip, [sp, #140]	; 0x8c
   2b1c0:	beq	2b21c <__assert_fail@plt+0x1987c>
   2b1c4:	mov	r1, #0
   2b1c8:	add	r3, r2, r1
   2b1cc:	lsr	r3, r3, #1
   2b1d0:	ldr	r0, [ip, r3, lsl #2]
   2b1d4:	cmp	fp, r0
   2b1d8:	bgt	2b4f8 <__assert_fail@plt+0x19b58>
   2b1dc:	cmp	r3, r1
   2b1e0:	bls	2b21c <__assert_fail@plt+0x1987c>
   2b1e4:	add	r2, r3, r1
   2b1e8:	lsr	r2, r2, #1
   2b1ec:	ldr	r0, [ip, r2, lsl #2]
   2b1f0:	cmp	fp, r0
   2b1f4:	ble	2b20c <__assert_fail@plt+0x1986c>
   2b1f8:	b	2b4ec <__assert_fail@plt+0x19b4c>
   2b1fc:	ldr	r0, [ip, r3, lsl #2]
   2b200:	cmp	fp, r0
   2b204:	bgt	2b4f8 <__assert_fail@plt+0x19b58>
   2b208:	mov	r2, r3
   2b20c:	add	r3, r1, r2
   2b210:	cmp	r1, r2
   2b214:	lsr	r3, r3, #1
   2b218:	bcc	2b1fc <__assert_fail@plt+0x1985c>
   2b21c:	ldr	r3, [ip, r1, lsl #2]
   2b220:	cmp	fp, r3
   2b224:	beq	2b23c <__assert_fail@plt+0x1989c>
   2b228:	mov	r1, fp
   2b22c:	ldr	r0, [sp, #24]
   2b230:	bl	20448 <__assert_fail@plt+0xeaa8>
   2b234:	cmp	r0, #0
   2b238:	beq	2bb40 <__assert_fail@plt+0x1a1a0>
   2b23c:	ldr	r9, [r4, #4]
   2b240:	cmp	r9, #0
   2b244:	ble	2b408 <__assert_fail@plt+0x19a68>
   2b248:	ldr	r8, [r6, #8]
   2b24c:	mvn	fp, #0
   2b250:	mov	lr, #0
   2b254:	ldr	sl, [r4, #8]
   2b258:	add	r7, r8, fp
   2b25c:	cmp	r8, #0
   2b260:	ble	2b2e0 <__assert_fail@plt+0x19940>
   2b264:	cmp	r7, #0
   2b268:	ldr	r4, [sl, lr, lsl #2]
   2b26c:	moveq	r1, r7
   2b270:	ldr	r0, [r6, #12]
   2b274:	beq	2b2d4 <__assert_fail@plt+0x19934>
   2b278:	mov	r2, r7
   2b27c:	mov	r1, #0
   2b280:	add	r3, r2, r1
   2b284:	lsr	r3, r3, #1
   2b288:	ldr	ip, [r0, r3, lsl #2]
   2b28c:	cmp	r4, ip
   2b290:	bgt	2b308 <__assert_fail@plt+0x19968>
   2b294:	cmp	r3, r1
   2b298:	bls	2b2d4 <__assert_fail@plt+0x19934>
   2b29c:	add	r2, r3, r1
   2b2a0:	lsr	r2, r2, #1
   2b2a4:	ldr	ip, [r0, r2, lsl #2]
   2b2a8:	cmp	r4, ip
   2b2ac:	ble	2b2c4 <__assert_fail@plt+0x19924>
   2b2b0:	b	2b2fc <__assert_fail@plt+0x1995c>
   2b2b4:	ldr	ip, [r0, r3, lsl #2]
   2b2b8:	cmp	r4, ip
   2b2bc:	bgt	2b308 <__assert_fail@plt+0x19968>
   2b2c0:	mov	r2, r3
   2b2c4:	add	r3, r1, r2
   2b2c8:	cmp	r1, r2
   2b2cc:	lsr	r3, r3, #1
   2b2d0:	bcc	2b2b4 <__assert_fail@plt+0x19914>
   2b2d4:	ldr	r3, [r0, r1, lsl #2]
   2b2d8:	cmp	r4, r3
   2b2dc:	beq	2b318 <__assert_fail@plt+0x19978>
   2b2e0:	add	lr, lr, #1
   2b2e4:	cmp	r9, lr
   2b2e8:	bne	2b25c <__assert_fail@plt+0x198bc>
   2b2ec:	cmp	fp, #0
   2b2f0:	blt	2bb38 <__assert_fail@plt+0x1a198>
   2b2f4:	ldr	r6, [sp, #116]	; 0x74
   2b2f8:	b	2b0b0 <__assert_fail@plt+0x19710>
   2b2fc:	mov	r1, r2
   2b300:	mov	r2, r3
   2b304:	mov	r3, r1
   2b308:	add	r1, r3, #1
   2b30c:	cmp	r2, r1
   2b310:	bhi	2b280 <__assert_fail@plt+0x198e0>
   2b314:	b	2b2d4 <__assert_fail@plt+0x19934>
   2b318:	cmn	fp, #1
   2b31c:	bne	2b6d4 <__assert_fail@plt+0x19d34>
   2b320:	mov	fp, r4
   2b324:	b	2b2e0 <__assert_fail@plt+0x19940>
   2b328:	ldrb	r2, [r1, #6]
   2b32c:	tst	r2, #16
   2b330:	bne	2b81c <__assert_fail@plt+0x19e7c>
   2b334:	cmp	r3, #4
   2b338:	beq	2b868 <__assert_fail@plt+0x19ec8>
   2b33c:	ldr	r8, [sp, #116]	; 0x74
   2b340:	mov	r2, r8
   2b344:	add	r0, sp, #144	; 0x90
   2b348:	bl	20b20 <__assert_fail@plt+0xf180>
   2b34c:	cmp	r0, #0
   2b350:	beq	2b408 <__assert_fail@plt+0x19a68>
   2b354:	ldr	r3, [r6, #12]
   2b358:	add	r8, r8, #1
   2b35c:	ldr	fp, [r3, r7, lsl #2]
   2b360:	cmp	r5, #0
   2b364:	str	r8, [sp, #116]	; 0x74
   2b368:	beq	2b4c4 <__assert_fail@plt+0x19b24>
   2b36c:	ldr	r3, [sp, #236]	; 0xec
   2b370:	cmp	r8, r3
   2b374:	bgt	2b408 <__assert_fail@plt+0x19a68>
   2b378:	ldr	r3, [sp, #244]	; 0xf4
   2b37c:	ldr	r3, [r3, r8, lsl #2]
   2b380:	cmp	r3, #0
   2b384:	beq	2b408 <__assert_fail@plt+0x19a68>
   2b388:	ldr	r2, [r3, #8]
   2b38c:	cmp	r2, #0
   2b390:	ble	2b408 <__assert_fail@plt+0x19a68>
   2b394:	subs	r2, r2, #1
   2b398:	ldr	r0, [r3, #12]
   2b39c:	moveq	r1, r2
   2b3a0:	beq	2b3fc <__assert_fail@plt+0x19a5c>
   2b3a4:	mov	r1, #0
   2b3a8:	add	r3, r2, r1
   2b3ac:	lsr	r3, r3, #1
   2b3b0:	ldr	ip, [r0, r3, lsl #2]
   2b3b4:	cmp	ip, fp
   2b3b8:	blt	2b630 <__assert_fail@plt+0x19c90>
   2b3bc:	cmp	r3, r1
   2b3c0:	bls	2b3fc <__assert_fail@plt+0x19a5c>
   2b3c4:	add	r2, r3, r1
   2b3c8:	lsr	r2, r2, #1
   2b3cc:	ldr	ip, [r0, r2, lsl #2]
   2b3d0:	cmp	fp, ip
   2b3d4:	ble	2b3ec <__assert_fail@plt+0x19a4c>
   2b3d8:	b	2b624 <__assert_fail@plt+0x19c84>
   2b3dc:	ldr	ip, [r0, r3, lsl #2]
   2b3e0:	cmp	ip, fp
   2b3e4:	blt	2b630 <__assert_fail@plt+0x19c90>
   2b3e8:	mov	r2, r3
   2b3ec:	add	r3, r1, r2
   2b3f0:	cmp	r1, r2
   2b3f4:	lsr	r3, r3, #1
   2b3f8:	bcc	2b3dc <__assert_fail@plt+0x19a3c>
   2b3fc:	ldr	r3, [r0, r1, lsl #2]
   2b400:	cmp	r3, fp
   2b404:	beq	2b4c4 <__assert_fail@plt+0x19b24>
   2b408:	ldr	ip, [sp, #24]
   2b40c:	mov	r0, r5
   2b410:	ldr	r1, [sp, #28]
   2b414:	ldr	r2, [sp, #472]	; 0x1d8
   2b418:	ldr	r3, [sp, #476]	; 0x1dc
   2b41c:	stm	sp, {r1, ip}
   2b420:	add	r1, sp, #116	; 0x74
   2b424:	bl	20590 <__assert_fail@plt+0xebf0>
   2b428:	subs	fp, r0, #0
   2b42c:	bge	2b2f4 <__assert_fail@plt+0x19954>
   2b430:	ldr	sl, [sp, #20]
   2b434:	ldr	r0, [sp, #140]	; 0x8c
   2b438:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b43c:	ldr	r3, [sp, #16]
   2b440:	ldr	r0, [sp, #288]	; 0x120
   2b444:	cmp	r0, r3
   2b448:	beq	2b450 <__assert_fail@plt+0x19ab0>
   2b44c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b450:	ldr	r1, [sp, #16]
   2b454:	mov	r2, #0
   2b458:	mov	r3, #16
   2b45c:	cmp	r5, #0
   2b460:	str	r1, [sp, #288]	; 0x120
   2b464:	add	r1, sp, #280	; 0x118
   2b468:	strd	r2, [r1]
   2b46c:	beq	2a4c4 <__assert_fail@plt+0x18b24>
   2b470:	mov	r6, #24
   2b474:	ldr	r4, [sp, #36]	; 0x24
   2b478:	b	2b498 <__assert_fail@plt+0x19af8>
   2b47c:	add	r0, r0, r7
   2b480:	ldr	r0, [r0, #20]
   2b484:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b488:	ldr	r3, [r5, #8]
   2b48c:	add	r3, r3, r7
   2b490:	ldr	r0, [r3, #8]
   2b494:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b498:	ldr	r3, [r5]
   2b49c:	mul	r7, r6, r4
   2b4a0:	ldr	r0, [r5, #8]
   2b4a4:	cmp	r4, r3
   2b4a8:	add	r4, r4, #1
   2b4ac:	blt	2b47c <__assert_fail@plt+0x19adc>
   2b4b0:	mov	r3, #1
   2b4b4:	str	r3, [sp, #36]	; 0x24
   2b4b8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b4bc:	ldr	r4, [sp, #244]	; 0xf4
   2b4c0:	b	2a980 <__assert_fail@plt+0x18fe0>
   2b4c4:	mov	r3, #0
   2b4c8:	str	r3, [sp, #136]	; 0x88
   2b4cc:	b	2b2ec <__assert_fail@plt+0x1994c>
   2b4d0:	mov	r1, r2
   2b4d4:	mov	r2, r3
   2b4d8:	mov	r3, r1
   2b4dc:	add	r1, r3, #1
   2b4e0:	cmp	r2, r1
   2b4e4:	bhi	2b118 <__assert_fail@plt+0x19778>
   2b4e8:	b	2b16c <__assert_fail@plt+0x197cc>
   2b4ec:	mov	r1, r2
   2b4f0:	mov	r2, r3
   2b4f4:	mov	r3, r1
   2b4f8:	add	r1, r3, #1
   2b4fc:	cmp	r2, r1
   2b500:	bhi	2b1c8 <__assert_fail@plt+0x19828>
   2b504:	b	2b21c <__assert_fail@plt+0x1987c>
   2b508:	ldr	r3, [sp, #240]	; 0xf0
   2b50c:	cmp	r3, fp
   2b510:	bne	2b0f0 <__assert_fail@plt+0x19750>
   2b514:	cmp	r5, #0
   2b518:	beq	2bd04 <__assert_fail@plt+0x1a364>
   2b51c:	ldr	r0, [sp, #40]	; 0x28
   2b520:	mov	r3, #0
   2b524:	ldr	r1, [sp, #472]	; 0x1d8
   2b528:	ldr	r2, [sp, #476]	; 0x1dc
   2b52c:	ldr	r2, [r2, r3, lsl #3]
   2b530:	cmp	r2, #0
   2b534:	blt	2b544 <__assert_fail@plt+0x19ba4>
   2b538:	ldr	r2, [r0, r3, lsl #3]
   2b53c:	cmn	r2, #1
   2b540:	beq	2b640 <__assert_fail@plt+0x19ca0>
   2b544:	add	r3, r3, #1
   2b548:	cmp	r1, r3
   2b54c:	bne	2b528 <__assert_fail@plt+0x19b88>
   2b550:	ldr	sl, [sp, #20]
   2b554:	ldr	r0, [sp, #140]	; 0x8c
   2b558:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b55c:	ldr	r3, [sp, #16]
   2b560:	ldr	r0, [sp, #288]	; 0x120
   2b564:	cmp	r0, r3
   2b568:	beq	2bd48 <__assert_fail@plt+0x1a3a8>
   2b56c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b570:	ldr	r1, [sp, #16]
   2b574:	mov	r2, #0
   2b578:	mov	r3, #16
   2b57c:	cmp	r5, #0
   2b580:	str	r1, [sp, #288]	; 0x120
   2b584:	add	r1, sp, #280	; 0x118
   2b588:	strd	r2, [r1]
   2b58c:	beq	2b5e0 <__assert_fail@plt+0x19c40>
   2b590:	ldr	r3, [r5]
   2b594:	cmp	r3, #0
   2b598:	movgt	r6, #0
   2b59c:	movgt	r4, r6
   2b5a0:	ble	2b5d8 <__assert_fail@plt+0x19c38>
   2b5a4:	ldr	r3, [r5, #8]
   2b5a8:	add	r6, r6, #1
   2b5ac:	add	r3, r3, r4
   2b5b0:	ldr	r0, [r3, #20]
   2b5b4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b5b8:	ldr	r3, [r5, #8]
   2b5bc:	add	r3, r3, r4
   2b5c0:	add	r4, r4, #24
   2b5c4:	ldr	r0, [r3, #8]
   2b5c8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b5cc:	ldr	r3, [r5]
   2b5d0:	cmp	r6, r3
   2b5d4:	blt	2b5a4 <__assert_fail@plt+0x19c04>
   2b5d8:	ldr	r0, [r5, #8]
   2b5dc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b5e0:	ldr	r4, [sp, #244]	; 0xf4
   2b5e4:	ldr	r3, [sp, #476]	; 0x1dc
   2b5e8:	ldr	r3, [r3]
   2b5ec:	b	2abd8 <__assert_fail@plt+0x19238>
   2b5f0:	ldr	r3, [r2, fp, lsl #3]
   2b5f4:	ldr	r2, [sp, #472]	; 0x1d8
   2b5f8:	add	r3, r3, #1
   2b5fc:	cmp	r2, r3
   2b600:	ble	2b0e8 <__assert_fail@plt+0x19748>
   2b604:	ldr	r2, [sp, #476]	; 0x1dc
   2b608:	ldr	r1, [sp, #476]	; 0x1dc
   2b60c:	add	r2, r2, r3, lsl #3
   2b610:	str	r6, [r1, r3, lsl #3]
   2b614:	mvn	r3, #0
   2b618:	str	r3, [r2, #4]
   2b61c:	ldr	r0, [r1, #4]
   2b620:	b	2b0e8 <__assert_fail@plt+0x19748>
   2b624:	mov	r1, r2
   2b628:	mov	r2, r3
   2b62c:	mov	r3, r1
   2b630:	add	r1, r3, #1
   2b634:	cmp	r2, r1
   2b638:	bhi	2b3a8 <__assert_fail@plt+0x19a08>
   2b63c:	b	2b3fc <__assert_fail@plt+0x19a5c>
   2b640:	ldr	ip, [sp, #24]
   2b644:	mov	r0, r5
   2b648:	ldr	r1, [sp, #28]
   2b64c:	ldr	r2, [sp, #472]	; 0x1d8
   2b650:	ldr	r3, [sp, #476]	; 0x1dc
   2b654:	stm	sp, {r1, ip}
   2b658:	add	r1, sp, #116	; 0x74
   2b65c:	bl	20590 <__assert_fail@plt+0xebf0>
   2b660:	subs	fp, r0, #0
   2b664:	blt	2b550 <__assert_fail@plt+0x19bb0>
   2b668:	mov	r7, fp
   2b66c:	lsl	r4, fp, #3
   2b670:	b	2b178 <__assert_fail@plt+0x197d8>
   2b674:	ldr	r3, [r1]
   2b678:	ldr	r2, [sp, #472]	; 0x1d8
   2b67c:	add	r3, r3, #1
   2b680:	cmp	r2, r3
   2b684:	ble	2b0e8 <__assert_fail@plt+0x19748>
   2b688:	ldr	r2, [sp, #476]	; 0x1dc
   2b68c:	ldr	r0, [sp, #476]	; 0x1dc
   2b690:	ldr	r2, [r2, r3, lsl #3]
   2b694:	add	r0, r0, r3, lsl #3
   2b698:	cmp	r2, r6
   2b69c:	blt	2bbcc <__assert_fail@plt+0x1a22c>
   2b6a0:	ldrb	r2, [r1, #6]
   2b6a4:	tst	r2, #8
   2b6a8:	beq	2ba48 <__assert_fail@plt+0x1a0a8>
   2b6ac:	ldr	r1, [sp, #28]
   2b6b0:	ldr	r3, [r1, r3, lsl #3]
   2b6b4:	cmn	r3, #1
   2b6b8:	beq	2ba48 <__assert_fail@plt+0x1a0a8>
   2b6bc:	ldr	r2, [sp, #32]
   2b6c0:	ldr	r0, [sp, #476]	; 0x1dc
   2b6c4:	bl	115d4 <memcpy@plt>
   2b6c8:	ldr	r3, [sp, #476]	; 0x1dc
   2b6cc:	ldr	r0, [r3, #4]
   2b6d0:	b	2b0e8 <__assert_fail@plt+0x19748>
   2b6d4:	ldr	r2, [sp, #136]	; 0x88
   2b6d8:	cmp	r2, #0
   2b6dc:	ble	2b754 <__assert_fail@plt+0x19db4>
   2b6e0:	subs	r2, r2, #1
   2b6e4:	ldr	r0, [sp, #140]	; 0x8c
   2b6e8:	moveq	r1, r2
   2b6ec:	beq	2b748 <__assert_fail@plt+0x19da8>
   2b6f0:	mov	r1, #0
   2b6f4:	add	r3, r2, r1
   2b6f8:	lsr	r3, r3, #1
   2b6fc:	ldr	ip, [r0, r3, lsl #2]
   2b700:	cmp	fp, ip
   2b704:	bgt	2b858 <__assert_fail@plt+0x19eb8>
   2b708:	cmp	r3, r1
   2b70c:	bls	2b748 <__assert_fail@plt+0x19da8>
   2b710:	add	r2, r3, r1
   2b714:	lsr	r2, r2, #1
   2b718:	ldr	ip, [r0, r2, lsl #2]
   2b71c:	cmp	fp, ip
   2b720:	ble	2b738 <__assert_fail@plt+0x19d98>
   2b724:	b	2b84c <__assert_fail@plt+0x19eac>
   2b728:	ldr	ip, [r0, r3, lsl #2]
   2b72c:	cmp	fp, ip
   2b730:	bgt	2b858 <__assert_fail@plt+0x19eb8>
   2b734:	mov	r2, r3
   2b738:	add	r3, r1, r2
   2b73c:	cmp	r1, r2
   2b740:	lsr	r3, r3, #1
   2b744:	bcc	2b728 <__assert_fail@plt+0x19d88>
   2b748:	ldr	r3, [r0, r1, lsl #2]
   2b74c:	cmp	fp, r3
   2b750:	beq	2bb20 <__assert_fail@plt+0x1a180>
   2b754:	cmp	r5, #0
   2b758:	beq	2b2ec <__assert_fail@plt+0x1994c>
   2b75c:	ldr	r6, [r5]
   2b760:	ldmib	r5, {r1, r3}
   2b764:	ldr	r7, [sp, #116]	; 0x74
   2b768:	add	r2, r6, #1
   2b76c:	cmp	r2, r1
   2b770:	str	r2, [r5]
   2b774:	beq	2bc04 <__assert_fail@plt+0x1a264>
   2b778:	add	r2, r6, r6, lsl #1
   2b77c:	ldr	r0, [sp, #44]	; 0x2c
   2b780:	lsl	r6, r2, #3
   2b784:	str	r7, [r3, r2, lsl #3]
   2b788:	add	r7, r3, r6
   2b78c:	str	r4, [r7, #4]
   2b790:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2b794:	ldr	r3, [r5, #8]
   2b798:	str	r0, [r7, #8]
   2b79c:	add	r3, r3, r6
   2b7a0:	ldr	r0, [r3, #8]
   2b7a4:	cmp	r0, #0
   2b7a8:	beq	2bcd4 <__assert_fail@plt+0x1a334>
   2b7ac:	ldr	r4, [sp, #32]
   2b7b0:	ldr	r1, [sp, #476]	; 0x1dc
   2b7b4:	mov	r2, r4
   2b7b8:	bl	115d4 <memcpy@plt>
   2b7bc:	ldr	r3, [r5, #8]
   2b7c0:	mov	r2, r4
   2b7c4:	ldr	r1, [sp, #28]
   2b7c8:	add	r3, r3, r6
   2b7cc:	ldr	r0, [r3, #8]
   2b7d0:	add	r0, r0, r4
   2b7d4:	bl	115d4 <memcpy@plt>
   2b7d8:	ldr	r2, [r5, #8]
   2b7dc:	ldr	r3, [sp, #136]	; 0x88
   2b7e0:	add	r6, r2, r6
   2b7e4:	cmp	r3, #0
   2b7e8:	str	r3, [r6, #16]
   2b7ec:	ble	2bbf0 <__assert_fail@plt+0x1a250>
   2b7f0:	lsl	r0, r3, #2
   2b7f4:	str	r3, [r6, #12]
   2b7f8:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2b7fc:	cmp	r0, #0
   2b800:	str	r0, [r6, #20]
   2b804:	beq	2bd24 <__assert_fail@plt+0x1a384>
   2b808:	ldr	r2, [sp, #136]	; 0x88
   2b80c:	ldr	r1, [sp, #140]	; 0x8c
   2b810:	lsl	r2, r2, #2
   2b814:	bl	115d4 <memcpy@plt>
   2b818:	b	2b2ec <__assert_fail@plt+0x1994c>
   2b81c:	ldr	ip, [sp, #116]	; 0x74
   2b820:	add	r3, sp, #144	; 0x90
   2b824:	mov	r2, fp
   2b828:	add	r1, r6, #128	; 0x80
   2b82c:	str	ip, [sp]
   2b830:	bl	236dc <__assert_fail@plt+0x11d3c>
   2b834:	subs	r8, r0, #0
   2b838:	bne	2bb30 <__assert_fail@plt+0x1a190>
   2b83c:	ldr	r1, [r6]
   2b840:	ldr	r8, [sp, #116]	; 0x74
   2b844:	add	r1, r1, r4
   2b848:	b	2b340 <__assert_fail@plt+0x199a0>
   2b84c:	mov	r1, r2
   2b850:	mov	r2, r3
   2b854:	mov	r3, r1
   2b858:	add	r1, r3, #1
   2b85c:	cmp	r2, r1
   2b860:	bhi	2b6f4 <__assert_fail@plt+0x19d54>
   2b864:	b	2b748 <__assert_fail@plt+0x19da8>
   2b868:	ldr	r3, [r1]
   2b86c:	ldr	r2, [sp, #472]	; 0x1d8
   2b870:	add	r3, r3, #1
   2b874:	cmp	r2, r3
   2b878:	ble	2ba58 <__assert_fail@plt+0x1a0b8>
   2b87c:	ldr	r2, [sp, #476]	; 0x1dc
   2b880:	cmp	r5, #0
   2b884:	ldr	r1, [sp, #476]	; 0x1dc
   2b888:	add	r2, r2, r3, lsl #3
   2b88c:	ldr	r0, [r1, r3, lsl #3]
   2b890:	ldr	r3, [r2, #4]
   2b894:	sub	r8, r3, r0
   2b898:	beq	2bb28 <__assert_fail@plt+0x1a188>
   2b89c:	cmn	r0, #1
   2b8a0:	beq	2b408 <__assert_fail@plt+0x19a68>
   2b8a4:	cmn	r3, #1
   2b8a8:	beq	2b408 <__assert_fail@plt+0x19a68>
   2b8ac:	cmp	r8, #0
   2b8b0:	beq	2ba60 <__assert_fail@plt+0x1a0c0>
   2b8b4:	ldr	r4, [sp, #116]	; 0x74
   2b8b8:	ldr	r1, [sp, #148]	; 0x94
   2b8bc:	ldr	r3, [sp, #172]	; 0xac
   2b8c0:	sub	r3, r3, r4
   2b8c4:	cmp	r8, r3
   2b8c8:	bgt	2b408 <__assert_fail@plt+0x19a68>
   2b8cc:	add	r0, r1, r0
   2b8d0:	mov	r2, r8
   2b8d4:	add	r1, r1, r4
   2b8d8:	bl	1161c <memcmp@plt>
   2b8dc:	cmp	r0, #0
   2b8e0:	bne	2b408 <__assert_fail@plt+0x19a68>
   2b8e4:	ldr	r3, [r6, #12]
   2b8e8:	add	r8, r8, r4
   2b8ec:	ldr	fp, [r3, fp, lsl #2]
   2b8f0:	b	2b360 <__assert_fail@plt+0x199c0>
   2b8f4:	mov	r0, #0
   2b8f8:	mov	r1, #2
   2b8fc:	mov	r3, #16
   2b900:	mov	r2, #0
   2b904:	strd	r0, [sp, #120]	; 0x78
   2b908:	add	r0, sp, #280	; 0x118
   2b90c:	mov	ip, #0
   2b910:	add	r1, sp, #292	; 0x124
   2b914:	add	lr, sp, #132	; 0x84
   2b918:	strd	r2, [r0]
   2b91c:	mov	r5, ip
   2b920:	ldr	r3, [sp, #12]
   2b924:	str	r1, [sp, #16]
   2b928:	str	lr, [sp, #24]
   2b92c:	str	ip, [sp, #128]	; 0x80
   2b930:	str	r1, [sp, #288]	; 0x120
   2b934:	ldr	fp, [r3, #72]	; 0x48
   2b938:	str	ip, [sp, #132]	; 0x84
   2b93c:	str	ip, [sp, #136]	; 0x88
   2b940:	str	ip, [sp, #140]	; 0x8c
   2b944:	mov	r3, #8
   2b948:	add	r0, sp, #280	; 0x118
   2b94c:	ldr	r2, [sp, #16]
   2b950:	ldr	r1, [sp, #472]	; 0x1d8
   2b954:	bl	33114 <__assert_fail@plt+0x21774>
   2b958:	cmp	r0, #0
   2b95c:	bne	2b078 <__assert_fail@plt+0x196d8>
   2b960:	ldr	r3, [sp, #16]
   2b964:	ldr	r0, [sp, #288]	; 0x120
   2b968:	cmp	r0, r3
   2b96c:	beq	2b974 <__assert_fail@plt+0x19fd4>
   2b970:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b974:	ldr	r1, [sp, #16]
   2b978:	mov	r2, #0
   2b97c:	mov	r3, #16
   2b980:	cmp	r5, #0
   2b984:	str	r1, [sp, #288]	; 0x120
   2b988:	add	r1, sp, #280	; 0x118
   2b98c:	strd	r2, [r1]
   2b990:	beq	2ad80 <__assert_fail@plt+0x193e0>
   2b994:	ldr	r3, [r5]
   2b998:	cmp	r3, #0
   2b99c:	movgt	r4, #0
   2b9a0:	ldrgt	r6, [sp, #36]	; 0x24
   2b9a4:	ble	2b9dc <__assert_fail@plt+0x1a03c>
   2b9a8:	add	r6, r6, #1
   2b9ac:	ldr	r3, [r5, #8]
   2b9b0:	add	r3, r3, r4
   2b9b4:	ldr	r0, [r3, #20]
   2b9b8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b9bc:	ldr	r3, [r5, #8]
   2b9c0:	add	r3, r3, r4
   2b9c4:	add	r4, r4, #24
   2b9c8:	ldr	r0, [r3, #8]
   2b9cc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b9d0:	ldr	r3, [r5]
   2b9d4:	cmp	r6, r3
   2b9d8:	blt	2b9a8 <__assert_fail@plt+0x1a008>
   2b9dc:	mov	r3, #12
   2b9e0:	ldr	r0, [r5, #8]
   2b9e4:	str	r3, [sp, #36]	; 0x24
   2b9e8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2b9ec:	ldr	r4, [sp, #244]	; 0xf4
   2b9f0:	b	2a980 <__assert_fail@plt+0x18fe0>
   2b9f4:	ldr	r2, [sp, #472]	; 0x1d8
   2b9f8:	ldr	r3, [sp, #476]	; 0x1dc
   2b9fc:	sub	r1, r3, #8
   2ba00:	add	r1, r1, r2, lsl #3
   2ba04:	mvn	r2, #0
   2ba08:	str	r2, [r3, #12]
   2ba0c:	str	r2, [r3, #8]!
   2ba10:	cmp	r1, r3
   2ba14:	bne	2ba08 <__assert_fail@plt+0x1a068>
   2ba18:	b	2aba4 <__assert_fail@plt+0x19204>
   2ba1c:	ldr	r1, [sp, #472]	; 0x1d8
   2ba20:	ldr	r2, [sp, #476]	; 0x1dc
   2ba24:	add	r1, r0, r1
   2ba28:	add	r1, r2, r1, lsl #3
   2ba2c:	mvn	r2, #0
   2ba30:	add	r3, r3, #8
   2ba34:	str	r2, [r3, #-8]
   2ba38:	str	r2, [r3, #-4]
   2ba3c:	cmp	r1, r3
   2ba40:	bne	2ba30 <__assert_fail@plt+0x1a090>
   2ba44:	b	2aca0 <__assert_fail@plt+0x19300>
   2ba48:	ldr	r3, [sp, #476]	; 0x1dc
   2ba4c:	str	r6, [r0, #4]
   2ba50:	ldr	r0, [r3, #4]
   2ba54:	b	2b0e8 <__assert_fail@plt+0x19748>
   2ba58:	cmp	r5, #0
   2ba5c:	bne	2b408 <__assert_fail@plt+0x19a68>
   2ba60:	mov	r1, fp
   2ba64:	ldr	r0, [sp, #24]
   2ba68:	bl	20448 <__assert_fail@plt+0xeaa8>
   2ba6c:	cmp	r0, #0
   2ba70:	beq	2bb40 <__assert_fail@plt+0x1a1a0>
   2ba74:	ldr	r8, [sp, #116]	; 0x74
   2ba78:	ldr	r3, [sp, #244]	; 0xf4
   2ba7c:	ldr	r0, [r3, r8, lsl #2]
   2ba80:	ldr	r2, [r0, #8]
   2ba84:	cmp	r2, #0
   2ba88:	ble	2bb14 <__assert_fail@plt+0x1a174>
   2ba8c:	ldr	r1, [r6, #20]
   2ba90:	mov	r3, #12
   2ba94:	subs	r2, r2, #1
   2ba98:	ldr	ip, [r0, #12]
   2ba9c:	mla	fp, r3, fp, r1
   2baa0:	moveq	r1, r2
   2baa4:	ldr	r3, [fp, #8]
   2baa8:	ldr	r0, [r3]
   2baac:	beq	2bb08 <__assert_fail@plt+0x1a168>
   2bab0:	mov	r1, #0
   2bab4:	add	r3, r2, r1
   2bab8:	lsr	r3, r3, #1
   2babc:	ldr	lr, [ip, r3, lsl #2]
   2bac0:	cmp	r0, lr
   2bac4:	bgt	2bcc4 <__assert_fail@plt+0x1a324>
   2bac8:	cmp	r1, r3
   2bacc:	bcs	2bb08 <__assert_fail@plt+0x1a168>
   2bad0:	add	r2, r1, r3
   2bad4:	lsr	r2, r2, #1
   2bad8:	ldr	lr, [ip, r2, lsl #2]
   2badc:	cmp	r0, lr
   2bae0:	ble	2baf8 <__assert_fail@plt+0x1a158>
   2bae4:	b	2bcb8 <__assert_fail@plt+0x1a318>
   2bae8:	ldr	lr, [ip, r3, lsl #2]
   2baec:	cmp	r0, lr
   2baf0:	bgt	2bcc4 <__assert_fail@plt+0x1a324>
   2baf4:	mov	r2, r3
   2baf8:	add	r3, r1, r2
   2bafc:	cmp	r1, r2
   2bb00:	lsr	r3, r3, #1
   2bb04:	bcc	2bae8 <__assert_fail@plt+0x1a148>
   2bb08:	ldr	fp, [ip, r1, lsl #2]
   2bb0c:	cmp	r0, fp
   2bb10:	beq	2b2ec <__assert_fail@plt+0x1994c>
   2bb14:	ldr	r1, [r6]
   2bb18:	add	r1, r1, r4
   2bb1c:	b	2b340 <__assert_fail@plt+0x199a0>
   2bb20:	mov	fp, r4
   2bb24:	b	2b2ec <__assert_fail@plt+0x1994c>
   2bb28:	cmp	r8, #0
   2bb2c:	beq	2ba60 <__assert_fail@plt+0x1a0c0>
   2bb30:	ldr	r4, [sp, #116]	; 0x74
   2bb34:	b	2b8e4 <__assert_fail@plt+0x19f44>
   2bb38:	cmn	fp, #2
   2bb3c:	bne	2b408 <__assert_fail@plt+0x19a68>
   2bb40:	ldr	sl, [sp, #20]
   2bb44:	ldr	r0, [sp, #140]	; 0x8c
   2bb48:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bb4c:	ldr	r3, [sp, #16]
   2bb50:	ldr	r0, [sp, #288]	; 0x120
   2bb54:	cmp	r0, r3
   2bb58:	beq	2bb60 <__assert_fail@plt+0x1a1c0>
   2bb5c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bb60:	ldr	r1, [sp, #16]
   2bb64:	mov	r2, #0
   2bb68:	mov	r3, #16
   2bb6c:	cmp	r5, #0
   2bb70:	str	r1, [sp, #288]	; 0x120
   2bb74:	add	r1, sp, #280	; 0x118
   2bb78:	strd	r2, [r1]
   2bb7c:	beq	2ad80 <__assert_fail@plt+0x193e0>
   2bb80:	ldr	r3, [r5]
   2bb84:	cmp	r3, #0
   2bb88:	movgt	r4, #0
   2bb8c:	ldrgt	r6, [sp, #36]	; 0x24
   2bb90:	ble	2b9dc <__assert_fail@plt+0x1a03c>
   2bb94:	add	r6, r6, #1
   2bb98:	ldr	r3, [r5, #8]
   2bb9c:	add	r3, r3, r4
   2bba0:	ldr	r0, [r3, #20]
   2bba4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bba8:	ldr	r3, [r5, #8]
   2bbac:	add	r3, r3, r4
   2bbb0:	add	r4, r4, #24
   2bbb4:	ldr	r0, [r3, #8]
   2bbb8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bbbc:	ldr	r3, [r5]
   2bbc0:	cmp	r6, r3
   2bbc4:	blt	2bb94 <__assert_fail@plt+0x1a1f4>
   2bbc8:	b	2b9dc <__assert_fail@plt+0x1a03c>
   2bbcc:	str	r6, [r0, #4]
   2bbd0:	ldr	r0, [sp, #28]
   2bbd4:	ldr	r2, [sp, #32]
   2bbd8:	ldr	r1, [sp, #476]	; 0x1dc
   2bbdc:	bl	115d4 <memcpy@plt>
   2bbe0:	ldr	r6, [sp, #116]	; 0x74
   2bbe4:	ldr	r3, [sp, #476]	; 0x1dc
   2bbe8:	ldr	r0, [r3, #4]
   2bbec:	b	2b0e8 <__assert_fail@plt+0x19748>
   2bbf0:	mov	r3, #0
   2bbf4:	str	r3, [r6, #12]
   2bbf8:	str	r3, [r6, #16]
   2bbfc:	str	r3, [r6, #20]
   2bc00:	b	2b2ec <__assert_fail@plt+0x1994c>
   2bc04:	mov	r1, #48	; 0x30
   2bc08:	mov	r0, r3
   2bc0c:	mul	r1, r1, r2
   2bc10:	bl	1f170 <__assert_fail@plt+0xd7d0>
   2bc14:	subs	r3, r0, #0
   2bc18:	beq	2bcd4 <__assert_fail@plt+0x1a334>
   2bc1c:	ldr	r2, [r5, #4]
   2bc20:	lsl	r2, r2, #1
   2bc24:	strd	r2, [r5, #4]
   2bc28:	b	2b778 <__assert_fail@plt+0x19dd8>
   2bc2c:	ldr	sl, [sp, #20]
   2bc30:	ldr	r0, [sp, #140]	; 0x8c
   2bc34:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bc38:	ldr	r3, [sp, #16]
   2bc3c:	ldr	r0, [sp, #288]	; 0x120
   2bc40:	cmp	r0, r3
   2bc44:	beq	2bc4c <__assert_fail@plt+0x1a2ac>
   2bc48:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bc4c:	ldr	r1, [sp, #16]
   2bc50:	mov	r2, #0
   2bc54:	mov	r3, #16
   2bc58:	cmp	r5, #0
   2bc5c:	str	r1, [sp, #288]	; 0x120
   2bc60:	add	r1, sp, #280	; 0x118
   2bc64:	strd	r2, [r1]
   2bc68:	beq	2b5e0 <__assert_fail@plt+0x19c40>
   2bc6c:	ldr	r3, [r5]
   2bc70:	cmp	r3, #0
   2bc74:	movgt	r6, #0
   2bc78:	movgt	r4, r6
   2bc7c:	ble	2b5d8 <__assert_fail@plt+0x19c38>
   2bc80:	ldr	r3, [r5, #8]
   2bc84:	add	r6, r6, #1
   2bc88:	add	r3, r3, r4
   2bc8c:	ldr	r0, [r3, #20]
   2bc90:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bc94:	ldr	r3, [r5, #8]
   2bc98:	add	r3, r3, r4
   2bc9c:	add	r4, r4, #24
   2bca0:	ldr	r0, [r3, #8]
   2bca4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bca8:	ldr	r3, [r5]
   2bcac:	cmp	r6, r3
   2bcb0:	blt	2bc80 <__assert_fail@plt+0x1a2e0>
   2bcb4:	b	2b5d8 <__assert_fail@plt+0x19c38>
   2bcb8:	mov	r1, r2
   2bcbc:	mov	r2, r3
   2bcc0:	mov	r3, r1
   2bcc4:	add	r1, r3, #1
   2bcc8:	cmp	r2, r1
   2bccc:	bhi	2bab4 <__assert_fail@plt+0x1a114>
   2bcd0:	b	2bb08 <__assert_fail@plt+0x1a168>
   2bcd4:	ldr	sl, [sp, #20]
   2bcd8:	ldr	r0, [sp, #140]	; 0x8c
   2bcdc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bce0:	ldr	r3, [sp, #16]
   2bce4:	ldr	r0, [sp, #288]	; 0x120
   2bce8:	cmp	r0, r3
   2bcec:	bne	2bb5c <__assert_fail@plt+0x1a1bc>
   2bcf0:	mov	r2, #0
   2bcf4:	mov	r3, #16
   2bcf8:	add	r1, sp, #280	; 0x118
   2bcfc:	strd	r2, [r1]
   2bd00:	b	2bb80 <__assert_fail@plt+0x1a1e0>
   2bd04:	ldr	sl, [sp, #20]
   2bd08:	ldr	r0, [sp, #140]	; 0x8c
   2bd0c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2bd10:	ldr	r3, [sp, #16]
   2bd14:	ldr	r0, [sp, #288]	; 0x120
   2bd18:	cmp	r0, r3
   2bd1c:	bne	2b5dc <__assert_fail@plt+0x19c3c>
   2bd20:	b	2b5e0 <__assert_fail@plt+0x19c40>
   2bd24:	str	r0, [r6, #12]
   2bd28:	str	r0, [r6, #16]
   2bd2c:	ldr	sl, [sp, #20]
   2bd30:	b	2bcd8 <__assert_fail@plt+0x1a338>
   2bd34:	ldr	sl, [sp, #68]	; 0x44
   2bd38:	ldr	r3, [sp, #472]	; 0x1d8
   2bd3c:	b	2ab50 <__assert_fail@plt+0x191b0>
   2bd40:	add	r5, sp, #120	; 0x78
   2bd44:	b	2b944 <__assert_fail@plt+0x19fa4>
   2bd48:	mov	r2, #0
   2bd4c:	mov	r3, #16
   2bd50:	add	r1, sp, #280	; 0x118
   2bd54:	strd	r2, [r1]
   2bd58:	b	2b590 <__assert_fail@plt+0x19bf0>
   2bd5c:	ldr	r1, [sp, #168]	; 0xa8
   2bd60:	sub	r2, r5, r1
   2bd64:	ldr	r0, [sp, #172]	; 0xac
   2bd68:	mov	r3, r4
   2bd6c:	cmp	r0, r2
   2bd70:	bls	2bd80 <__assert_fail@plt+0x1a3e0>
   2bd74:	ldr	r3, [sp, #148]	; 0x94
   2bd78:	ldrb	r3, [r3, r2]
   2bd7c:	add	r3, r4, r3
   2bd80:	ldrb	r3, [r3]
   2bd84:	cmp	r3, #0
   2bd88:	bne	2a02c <__assert_fail@plt+0x1868c>
   2bd8c:	ldr	r2, [sp, #76]	; 0x4c
   2bd90:	ldr	r3, [sp, #96]	; 0x60
   2bd94:	add	r5, r5, r3
   2bd98:	ldr	r3, [sp, #64]	; 0x40
   2bd9c:	str	r5, [sp, #112]	; 0x70
   2bda0:	cmp	r5, r3
   2bda4:	movle	r3, #0
   2bda8:	movgt	r3, #1
   2bdac:	cmp	r5, r2
   2bdb0:	orrlt	r3, r3, #1
   2bdb4:	cmp	r3, #0
   2bdb8:	beq	2adb8 <__assert_fail@plt+0x19418>
   2bdbc:	b	2a4c0 <__assert_fail@plt+0x18b20>
   2bdc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bdc4:	mov	r5, r1
   2bdc8:	strd	r6, [sp, #8]
   2bdcc:	strd	r8, [sp, #16]
   2bdd0:	mov	r9, r0
   2bdd4:	strd	sl, [sp, #24]
   2bdd8:	str	lr, [sp, #32]
   2bddc:	sub	sp, sp, #164	; 0xa4
   2bde0:	ldr	sl, [r1]
   2bde4:	str	r2, [sp, #20]
   2bde8:	ldrb	r2, [r2, #4]
   2bdec:	str	r3, [sp, #32]
   2bdf0:	sub	r3, r2, #1
   2bdf4:	cmp	r3, #35	; 0x23
   2bdf8:	ldrls	pc, [pc, r3, lsl #2]
   2bdfc:	b	2ca04 <__assert_fail@plt+0x1b064>
   2be00:	andeq	ip, r2, r4, lsr #11
   2be04:	andeq	ip, r2, r0, asr r3
   2be08:	andeq	ip, r2, r4, lsl #20
   2be0c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2be10:	andeq	ip, r2, r0, ror r7
   2be14:	andeq	ip, r2, r4, lsl #20
   2be18:	andeq	ip, r2, r4, lsl #20
   2be1c:			; <UNDEFINED> instruction: 0x0002c2b0
   2be20:	andeq	ip, r2, ip, lsl sl
   2be24:	andeq	ip, r2, r0, asr r3
   2be28:	muleq	r2, ip, lr
   2be2c:	andeq	ip, r2, r8, ror r3
   2be30:	andeq	ip, r2, r4, lsl #20
   2be34:	andeq	ip, r2, r4, lsl #20
   2be38:	andeq	ip, r2, r4, lsl #20
   2be3c:	andeq	ip, r2, r4, lsl #20
   2be40:	andeq	ip, r2, r4, lsl #20
   2be44:	muleq	r2, ip, lr
   2be48:	muleq	r2, ip, lr
   2be4c:			; <UNDEFINED> instruction: 0x0002c8b0
   2be50:	andeq	ip, r2, r4, lsl #20
   2be54:	andeq	ip, r2, r4, lsl #20
   2be58:	muleq	r2, r0, lr
   2be5c:			; <UNDEFINED> instruction: 0x0002beb8
   2be60:	andeq	ip, r2, r4, lsl #20
   2be64:	andeq	ip, r2, r4, lsl #20
   2be68:	andeq	ip, r2, r4, lsl #20
   2be6c:	andeq	ip, r2, r4, lsl #20
   2be70:	andeq	ip, r2, r4, lsl #20
   2be74:	andeq	ip, r2, r4, lsl #20
   2be78:	andeq	ip, r2, r4, lsl #20
   2be7c:	andeq	ip, r2, r8, asr #10
   2be80:	andeq	ip, r2, r8, asr #10
   2be84:	andeq	ip, r2, r4, ror #19
   2be88:	andeq	ip, r2, r4, ror #19
   2be8c:	andeq	ip, r2, r4, lsl #20
   2be90:	ldr	r3, [sp, #32]
   2be94:	tst	r3, #16777216	; 0x1000000
   2be98:	bne	2cc10 <__assert_fail@plt+0x1b270>
   2be9c:	ldr	r3, [sp, #32]
   2bea0:	tst	r3, #32
   2bea4:	bne	2cc10 <__assert_fail@plt+0x1b270>
   2bea8:	tst	r3, #16
   2beac:	bne	2d6c0 <__assert_fail@plt+0x1bd20>
   2beb0:	cmp	r2, #9
   2beb4:	beq	2ca1c <__assert_fail@plt+0x1b07c>
   2beb8:	ldr	r3, [sp, #20]
   2bebc:	mov	r4, #1
   2bec0:	strb	r4, [r3, #4]
   2bec4:	ldr	r2, [sl, #64]	; 0x40
   2bec8:	cmp	r2, #31
   2becc:	beq	2d600 <__assert_fail@plt+0x1bc60>
   2bed0:	ldr	r0, [sl, #56]	; 0x38
   2bed4:	lsl	r3, r2, #5
   2bed8:	add	r4, r2, r4
   2bedc:	add	r2, r3, #4
   2bee0:	add	r1, r0, r3
   2bee4:	add	r3, r3, #16
   2bee8:	str	r4, [sl, #64]	; 0x40
   2beec:	adds	r2, r0, r2
   2bef0:	add	r0, r0, r3
   2bef4:	ldr	r3, [sp, #20]
   2bef8:	mov	ip, #0
   2befc:	mvn	lr, #0
   2bf00:	str	r2, [sp, #28]
   2bf04:	str	ip, [r1, #4]
   2bf08:	str	ip, [r1, #8]
   2bf0c:	str	ip, [r1, #12]
   2bf10:	ldrd	r2, [r3]
   2bf14:	strd	r2, [r1, #24]
   2bf18:	ldrb	r3, [r0, #14]
   2bf1c:	bic	r3, r3, #12
   2bf20:	strb	r3, [r0, #14]
   2bf24:	str	ip, [r1, #16]
   2bf28:	str	ip, [r1, #20]
   2bf2c:	str	lr, [r1, #32]
   2bf30:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2bf34:	ldr	r6, [sp, #20]
   2bf38:	mov	r1, r9
   2bf3c:	mov	r5, #0
   2bf40:	ldr	r4, [sp, #32]
   2bf44:	mov	r0, r6
   2bf48:	and	r3, r4, #2097152	; 0x200000
   2bf4c:	mov	r2, r4
   2bf50:	str	r3, [sp, #52]	; 0x34
   2bf54:	bl	226b8 <__assert_fail@plt+0x10d18>
   2bf58:	ldr	r3, [r9, #40]	; 0x28
   2bf5c:	and	r2, r4, #16777216	; 0x1000000
   2bf60:	ldrb	r8, [r6, #4]
   2bf64:	str	r2, [sp, #36]	; 0x24
   2bf68:	add	r0, r3, r0
   2bf6c:	str	r0, [r9, #40]	; 0x28
   2bf70:	cmp	r8, #23
   2bf74:	cmpne	r8, #11
   2bf78:	sub	r2, r8, #18
   2bf7c:	moveq	r3, #1
   2bf80:	movne	r3, #0
   2bf84:	cmp	r2, #1
   2bf88:	orrls	r3, r3, #1
   2bf8c:	sub	r6, r8, #18
   2bf90:	clz	r6, r6
   2bf94:	cmp	r3, #0
   2bf98:	lsr	r6, r6, #5
   2bf9c:	beq	2c358 <__assert_fail@plt+0x1a9b8>
   2bfa0:	ldr	r3, [sp, #20]
   2bfa4:	cmp	r8, #23
   2bfa8:	add	r7, sp, #96	; 0x60
   2bfac:	ldr	r4, [r9, #40]	; 0x28
   2bfb0:	ldrd	r2, [r3]
   2bfb4:	strd	r2, [sp, #96]	; 0x60
   2bfb8:	beq	2cd60 <__assert_fail@plt+0x1b3c0>
   2bfbc:	cmp	r8, #19
   2bfc0:	beq	2cc94 <__assert_fail@plt+0x1b2f4>
   2bfc4:	mov	r1, r9
   2bfc8:	ldr	r0, [sp, #20]
   2bfcc:	ldr	r2, [sp, #32]
   2bfd0:	bl	226b8 <__assert_fail@plt+0x10d18>
   2bfd4:	ldr	r3, [r9, #40]	; 0x28
   2bfd8:	ldr	r2, [sp, #28]
   2bfdc:	add	r0, r3, r0
   2bfe0:	cmp	r2, #0
   2bfe4:	str	r0, [r9, #40]	; 0x28
   2bfe8:	beq	2cecc <__assert_fail@plt+0x1b52c>
   2bfec:	cmp	r8, #18
   2bff0:	beq	2d4f4 <__assert_fail@plt+0x1bb54>
   2bff4:	ldrb	r3, [r2, #24]
   2bff8:	mov	r7, r2
   2bffc:	cmp	r3, #17
   2c000:	beq	2ce14 <__assert_fail@plt+0x1b474>
   2c004:	mov	r6, #0
   2c008:	add	r8, sp, #128	; 0x80
   2c00c:	str	r6, [sp, #40]	; 0x28
   2c010:	mvn	r3, #0
   2c014:	mov	fp, #11
   2c018:	str	r3, [sp, #24]
   2c01c:	mov	r2, #0
   2c020:	mov	r3, #0
   2c024:	strd	r2, [r8]
   2c028:	ldr	r1, [sl, #64]	; 0x40
   2c02c:	cmp	r1, #31
   2c030:	beq	2cee8 <__assert_fail@plt+0x1b548>
   2c034:	ldr	r4, [sl, #56]	; 0x38
   2c038:	lsl	r3, r1, #5
   2c03c:	add	r1, r1, #1
   2c040:	add	r0, r3, #4
   2c044:	add	r2, r4, r3
   2c048:	add	r3, r3, #16
   2c04c:	str	r1, [sl, #64]	; 0x40
   2c050:	add	r3, r4, r3
   2c054:	add	r4, r4, r0
   2c058:	stmib	r2, {r5, r7}
   2c05c:	mvn	ip, #0
   2c060:	cmp	r4, #0
   2c064:	str	r5, [r2, #12]
   2c068:	strb	fp, [sp, #132]	; 0x84
   2c06c:	ldrd	r0, [r8]
   2c070:	strd	r0, [r2, #24]
   2c074:	ldrb	r0, [r3, #14]
   2c078:	bic	r0, r0, #12
   2c07c:	strb	r0, [r3, #14]
   2c080:	str	r5, [r2, #16]
   2c084:	str	r5, [r2, #20]
   2c088:	str	ip, [r2, #32]
   2c08c:	str	r4, [r7]
   2c090:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2c094:	ldr	r3, [sp, #24]
   2c098:	add	r1, r6, #2
   2c09c:	cmp	r3, r1
   2c0a0:	blt	2cb40 <__assert_fail@plt+0x1b1a0>
   2c0a4:	mov	fp, r4
   2c0a8:	mov	r2, r8
   2c0ac:	str	sl, [sp, #16]
   2c0b0:	str	r9, [sp, #44]	; 0x2c
   2c0b4:	mov	r9, r1
   2c0b8:	mov	r6, r7
   2c0bc:	mov	r8, r2
   2c0c0:	mov	r7, r2
   2c0c4:	b	2c0cc <__assert_fail@plt+0x1a72c>
   2c0c8:	mov	r6, r3
   2c0cc:	ldr	r2, [sl, #64]	; 0x40
   2c0d0:	cmp	r2, #31
   2c0d4:	beq	2cc34 <__assert_fail@plt+0x1b294>
   2c0d8:	ldr	r0, [sl, #56]	; 0x38
   2c0dc:	lsl	r3, r2, #5
   2c0e0:	add	r2, r2, #1
   2c0e4:	add	lr, r3, #4
   2c0e8:	add	ip, r0, r3
   2c0ec:	add	r3, r3, #16
   2c0f0:	str	r2, [sl, #64]	; 0x40
   2c0f4:	add	r1, r0, r3
   2c0f8:	add	r0, r0, lr
   2c0fc:	str	r5, [ip, #4]
   2c100:	mvn	lr, #0
   2c104:	cmp	r0, #0
   2c108:	str	r5, [ip, #8]
   2c10c:	str	r5, [ip, #12]
   2c110:	ldrd	r2, [r6, #20]
   2c114:	strd	r2, [ip, #24]
   2c118:	ldrb	r3, [r1, #14]
   2c11c:	bic	r3, r3, #12
   2c120:	strb	r3, [r1, #14]
   2c124:	str	r5, [ip, #16]
   2c128:	str	r5, [ip, #20]
   2c12c:	str	lr, [ip, #32]
   2c130:	str	r0, [r8]
   2c134:	beq	2cc60 <__assert_fail@plt+0x1b2c0>
   2c138:	str	fp, [ip, #4]
   2c13c:	ldr	fp, [r8]
   2c140:	ldrb	r3, [fp, #26]
   2c144:	orr	r3, r3, #4
   2c148:	strb	r3, [fp, #26]
   2c14c:	ldr	r3, [r6, #4]
   2c150:	cmp	r3, #0
   2c154:	addne	r8, fp, #4
   2c158:	bne	2c0c8 <__assert_fail@plt+0x1a728>
   2c15c:	ldr	r2, [r6, #8]
   2c160:	cmp	r2, #0
   2c164:	cmpne	r2, r3
   2c168:	mov	r3, r6
   2c16c:	bne	2cc28 <__assert_fail@plt+0x1b288>
   2c170:	ldr	r2, [r6]
   2c174:	ldr	fp, [fp]
   2c178:	subs	r6, r2, #0
   2c17c:	bne	2c15c <__assert_fail@plt+0x1a7bc>
   2c180:	mov	r2, r7
   2c184:	ldr	r7, [sp, #128]	; 0x80
   2c188:	str	sl, [sp, #16]
   2c18c:	mov	r0, #0
   2c190:	mov	r1, #0
   2c194:	strd	r0, [r2]
   2c198:	ldr	r1, [sp, #16]
   2c19c:	ldr	r0, [r1, #64]	; 0x40
   2c1a0:	cmp	r0, #31
   2c1a4:	beq	2cce8 <__assert_fail@plt+0x1b348>
   2c1a8:	lsl	r3, r0, #5
   2c1ac:	add	ip, r0, #1
   2c1b0:	ldr	r0, [r1, #56]	; 0x38
   2c1b4:	add	r8, r3, #4
   2c1b8:	add	r6, r0, r3
   2c1bc:	mov	lr, #16
   2c1c0:	str	ip, [r1, #64]	; 0x40
   2c1c4:	add	r3, r3, lr
   2c1c8:	add	r8, r0, r8
   2c1cc:	str	r5, [r6, #4]
   2c1d0:	add	r3, r0, r3
   2c1d4:	mvn	ip, #0
   2c1d8:	str	r4, [r6, #8]
   2c1dc:	cmp	r7, #0
   2c1e0:	str	r7, [r6, #12]
   2c1e4:	strb	lr, [sp, #132]	; 0x84
   2c1e8:	ldrd	sl, [r2]
   2c1ec:	strd	sl, [r6, #24]
   2c1f0:	ldrb	lr, [r3, #14]
   2c1f4:	bic	lr, lr, #12
   2c1f8:	strb	lr, [r3, #14]
   2c1fc:	str	r5, [r6, #16]
   2c200:	str	r5, [r6, #20]
   2c204:	str	ip, [r6, #32]
   2c208:	str	r8, [r4]
   2c20c:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2c210:	cmp	r8, #0
   2c214:	str	r8, [r7]
   2c218:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2c21c:	mov	sl, #0
   2c220:	mov	fp, #0
   2c224:	strd	sl, [r2]
   2c228:	ldr	r3, [r1, #64]	; 0x40
   2c22c:	cmp	r3, #31
   2c230:	lslne	ip, r3, #5
   2c234:	addne	lr, r3, #1
   2c238:	addne	r4, ip, #4
   2c23c:	beq	2cd24 <__assert_fail@plt+0x1b384>
   2c240:	add	r3, r0, ip
   2c244:	str	lr, [r1, #64]	; 0x40
   2c248:	mov	lr, #10
   2c24c:	add	ip, ip, #16
   2c250:	add	r4, r0, r4
   2c254:	stmib	r3, {r5, r8}
   2c258:	add	r0, r0, ip
   2c25c:	mvn	ip, #0
   2c260:	str	r5, [r3, #12]
   2c264:	cmp	r4, #0
   2c268:	strb	lr, [sp, #132]	; 0x84
   2c26c:	ldrd	sl, [r2]
   2c270:	strd	sl, [r3, #24]
   2c274:	ldrb	lr, [r0, #14]
   2c278:	bic	lr, lr, #12
   2c27c:	strb	lr, [r0, #14]
   2c280:	str	r5, [r3, #16]
   2c284:	str	r5, [r3, #20]
   2c288:	str	ip, [r3, #32]
   2c28c:	str	r4, [r6, #4]
   2c290:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2c294:	ldr	r3, [sp, #24]
   2c298:	add	r9, r9, #1
   2c29c:	cmp	r3, r9
   2c2a0:	blt	2cb34 <__assert_fail@plt+0x1b194>
   2c2a4:	mov	sl, r1
   2c2a8:	ldr	fp, [r7]
   2c2ac:	b	2c0b8 <__assert_fail@plt+0x1a718>
   2c2b0:	ldr	r4, [r5, #24]
   2c2b4:	mov	r1, r0
   2c2b8:	ldr	r6, [sp, #20]
   2c2bc:	ldr	r7, [sp, #32]
   2c2c0:	add	r3, r4, #1
   2c2c4:	mov	r0, r6
   2c2c8:	str	r3, [r5, #24]
   2c2cc:	orr	r2, r7, #8388608	; 0x800000
   2c2d0:	bl	226b8 <__assert_fail@plt+0x10d18>
   2c2d4:	ldr	r3, [r9, #40]	; 0x28
   2c2d8:	ldrb	r2, [r6, #4]
   2c2dc:	add	r3, r3, r0
   2c2e0:	cmp	r2, #9
   2c2e4:	str	r3, [r9, #40]	; 0x28
   2c2e8:	moveq	r5, #0
   2c2ec:	beq	2ca3c <__assert_fail@plt+0x1b09c>
   2c2f0:	ldr	r3, [sp, #200]	; 0xc8
   2c2f4:	mov	r1, r5
   2c2f8:	mov	r2, r6
   2c2fc:	add	r0, r3, #1
   2c300:	ldr	r3, [sp, #204]	; 0xcc
   2c304:	stm	sp, {r0, r3}
   2c308:	mov	r3, r7
   2c30c:	mov	r0, r9
   2c310:	bl	2e420 <__assert_fail@plt+0x1ca80>
   2c314:	ldr	r3, [sp, #204]	; 0xcc
   2c318:	mov	r5, r0
   2c31c:	ldr	r3, [r3]
   2c320:	cmp	r3, #0
   2c324:	bne	2c350 <__assert_fail@plt+0x1a9b0>
   2c328:	ldr	r3, [sp, #20]
   2c32c:	ldrb	r3, [r3, #4]
   2c330:	cmp	r3, #9
   2c334:	beq	2ca3c <__assert_fail@plt+0x1b09c>
   2c338:	cmp	r0, #0
   2c33c:	beq	2c344 <__assert_fail@plt+0x1a9a4>
   2c340:	bl	239e4 <__assert_fail@plt+0x12044>
   2c344:	ldr	r2, [sp, #204]	; 0xcc
   2c348:	mov	r3, #8
   2c34c:	str	r3, [r2]
   2c350:	mov	r3, #0
   2c354:	str	r3, [sp, #28]
   2c358:	ldr	r0, [sp, #28]
   2c35c:	add	sp, sp, #164	; 0xa4
   2c360:	ldrd	r4, [sp]
   2c364:	ldrd	r6, [sp, #8]
   2c368:	ldrd	r8, [sp, #16]
   2c36c:	ldrd	sl, [sp, #24]
   2c370:	add	sp, sp, #32
   2c374:	pop	{pc}		; (ldr pc, [sp], #4)
   2c378:	ldr	r3, [sp, #20]
   2c37c:	ldr	r5, [r3]
   2c380:	movw	r3, #783	; 0x30f
   2c384:	tst	r5, r3
   2c388:	beq	2c3e8 <__assert_fail@plt+0x1aa48>
   2c38c:	ldrb	r3, [sl, #88]	; 0x58
   2c390:	ands	r4, r3, #16
   2c394:	bne	2c3e8 <__assert_fail@plt+0x1aa48>
   2c398:	orr	r3, r3, #16
   2c39c:	ands	r2, r3, #8
   2c3a0:	mov	r1, r3
   2c3a4:	strb	r3, [sl, #88]	; 0x58
   2c3a8:	bne	2df4c <__assert_fail@plt+0x1c5ac>
   2c3ac:	mov	r3, #0
   2c3b0:	movt	r3, #1023	; 0x3ff
   2c3b4:	tst	r1, #4
   2c3b8:	mvn	r1, #2013265921	; 0x78000001
   2c3bc:	strd	r2, [sl, #96]	; 0x60
   2c3c0:	mvn	r3, #-134217727	; 0xf8000001
   2c3c4:	str	r1, [sl, #104]	; 0x68
   2c3c8:	str	r3, [sl, #108]	; 0x6c
   2c3cc:	beq	2decc <__assert_fail@plt+0x1c52c>
   2c3d0:	ldr	r3, [sp, #20]
   2c3d4:	str	r2, [sl, #112]	; 0x70
   2c3d8:	str	r2, [sl, #116]	; 0x74
   2c3dc:	str	r2, [sl, #120]	; 0x78
   2c3e0:	str	r2, [sl, #124]	; 0x7c
   2c3e4:	ldr	r5, [r3]
   2c3e8:	sub	r3, r5, #256	; 0x100
   2c3ec:	add	r0, sl, #56	; 0x38
   2c3f0:	bics	r3, r3, #256	; 0x100
   2c3f4:	add	r1, sl, #64	; 0x40
   2c3f8:	bne	2d5e8 <__assert_fail@plt+0x1bc48>
   2c3fc:	cmp	r5, #256	; 0x100
   2c400:	beq	2d788 <__assert_fail@plt+0x1bde8>
   2c404:	ldr	r4, [sp, #20]
   2c408:	mov	r3, #5
   2c40c:	mov	r2, r4
   2c410:	str	r3, [r4]
   2c414:	bl	23024 <__assert_fail@plt+0x11684>
   2c418:	mov	r5, r0
   2c41c:	mov	r3, #10
   2c420:	str	r3, [r4]
   2c424:	ldr	r2, [sl, #64]	; 0x40
   2c428:	cmp	r2, #31
   2c42c:	beq	2db24 <__assert_fail@plt+0x1c184>
   2c430:	ldr	r0, [sl, #56]	; 0x38
   2c434:	lsl	r3, r2, #5
   2c438:	add	r2, r2, #1
   2c43c:	add	r4, r3, #4
   2c440:	add	r1, r0, r3
   2c444:	add	r3, r3, #16
   2c448:	str	r2, [sl, #64]	; 0x40
   2c44c:	add	r4, r0, r4
   2c450:	add	r0, r0, r3
   2c454:	ldr	r3, [sp, #20]
   2c458:	mov	ip, #0
   2c45c:	mvn	lr, #0
   2c460:	str	ip, [r1, #4]
   2c464:	str	ip, [r1, #8]
   2c468:	str	ip, [r1, #12]
   2c46c:	ldrd	r2, [r3]
   2c470:	strd	r2, [r1, #24]
   2c474:	ldrb	r3, [r0, #14]
   2c478:	bic	r3, r3, #12
   2c47c:	strb	r3, [r0, #14]
   2c480:	str	ip, [r1, #16]
   2c484:	str	ip, [r1, #20]
   2c488:	str	lr, [r1, #32]
   2c48c:	mov	r2, #0
   2c490:	mov	r3, #0
   2c494:	strd	r2, [sp, #128]	; 0x80
   2c498:	ldr	r2, [sl, #64]	; 0x40
   2c49c:	cmp	r2, #31
   2c4a0:	beq	2daf8 <__assert_fail@plt+0x1c158>
   2c4a4:	ldr	r0, [sl, #56]	; 0x38
   2c4a8:	lsl	r3, r2, #5
   2c4ac:	add	r2, r2, #1
   2c4b0:	add	r6, r3, #4
   2c4b4:	add	ip, r0, r3
   2c4b8:	mov	lr, #0
   2c4bc:	str	r2, [sl, #64]	; 0x40
   2c4c0:	mov	r2, #10
   2c4c4:	add	r3, r3, #16
   2c4c8:	str	lr, [ip, #4]
   2c4cc:	add	r1, r0, r3
   2c4d0:	add	r6, r0, r6
   2c4d4:	str	r5, [ip, #8]
   2c4d8:	mvn	r0, #0
   2c4dc:	cmp	r5, lr
   2c4e0:	str	r4, [ip, #12]
   2c4e4:	str	r6, [sp, #28]
   2c4e8:	strb	r2, [sp, #132]	; 0x84
   2c4ec:	ldrd	r2, [sp, #128]	; 0x80
   2c4f0:	strd	r2, [ip, #24]
   2c4f4:	ldrb	r3, [r1, #14]
   2c4f8:	bic	r3, r3, #12
   2c4fc:	strb	r3, [r1, #14]
   2c500:	str	lr, [ip, #16]
   2c504:	str	lr, [ip, #20]
   2c508:	str	r0, [ip, #32]
   2c50c:	beq	2d7ac <__assert_fail@plt+0x1be0c>
   2c510:	cmp	r4, lr
   2c514:	str	r6, [r5]
   2c518:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2c51c:	cmp	r6, lr
   2c520:	str	r6, [r4]
   2c524:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2c528:	mov	r1, r9
   2c52c:	ldr	r0, [sp, #20]
   2c530:	ldr	r2, [sp, #32]
   2c534:	bl	226b8 <__assert_fail@plt+0x10d18>
   2c538:	ldr	r3, [r9, #40]	; 0x28
   2c53c:	add	r3, r3, r0
   2c540:	str	r3, [r9, #40]	; 0x28
   2c544:	b	2c358 <__assert_fail@plt+0x1a9b8>
   2c548:	sub	r1, r2, #33	; 0x21
   2c54c:	movw	r3, #21504	; 0x5400
   2c550:	movt	r3, #3
   2c554:	clz	r1, r1
   2c558:	lsr	r1, r1, #5
   2c55c:	movw	r2, #21440	; 0x53c0
   2c560:	movt	r2, #3
   2c564:	str	r1, [sp]
   2c568:	mov	r0, sl
   2c56c:	ldr	r1, [sp, #204]	; 0xcc
   2c570:	str	r1, [sp, #4]
   2c574:	ldr	r1, [r9, #64]	; 0x40
   2c578:	bl	2965c <__assert_fail@plt+0x17cbc>
   2c57c:	ldr	r3, [sp, #204]	; 0xcc
   2c580:	str	r0, [sp, #28]
   2c584:	ldr	r2, [r3]
   2c588:	clz	r3, r0
   2c58c:	lsr	r3, r3, #5
   2c590:	cmp	r2, #0
   2c594:	moveq	r3, #0
   2c598:	cmp	r3, #0
   2c59c:	beq	2bf34 <__assert_fail@plt+0x1a594>
   2c5a0:	b	2c350 <__assert_fail@plt+0x1a9b0>
   2c5a4:	ldr	r2, [sl, #64]	; 0x40
   2c5a8:	cmp	r2, #31
   2c5ac:	beq	2d9d4 <__assert_fail@plt+0x1c034>
   2c5b0:	ldr	r0, [sl, #56]	; 0x38
   2c5b4:	lsl	r3, r2, #5
   2c5b8:	add	r2, r2, #1
   2c5bc:	add	ip, r3, #4
   2c5c0:	add	r1, r0, r3
   2c5c4:	add	r3, r3, #16
   2c5c8:	str	r2, [sl, #64]	; 0x40
   2c5cc:	adds	r2, r0, ip
   2c5d0:	add	r0, r0, r3
   2c5d4:	ldr	r3, [sp, #20]
   2c5d8:	mov	r4, #0
   2c5dc:	mvn	r7, #0
   2c5e0:	str	r2, [sp, #28]
   2c5e4:	str	r4, [r1, #4]
   2c5e8:	str	r4, [r1, #8]
   2c5ec:	str	r4, [r1, #12]
   2c5f0:	ldrd	r2, [r3]
   2c5f4:	strd	r2, [r1, #24]
   2c5f8:	ldrb	r3, [r0, #14]
   2c5fc:	bic	r3, r3, #12
   2c600:	strb	r3, [r0, #14]
   2c604:	str	r4, [r1, #16]
   2c608:	str	r4, [r1, #20]
   2c60c:	str	r7, [r1, #32]
   2c610:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2c614:	ldr	r3, [sl, #92]	; 0x5c
   2c618:	cmp	r3, #1
   2c61c:	ble	2bf34 <__assert_fail@plt+0x1a594>
   2c620:	ldr	r8, [sp, #20]
   2c624:	ldr	r5, [sp, #28]
   2c628:	ldr	r6, [sp, #32]
   2c62c:	b	2c63c <__assert_fail@plt+0x1ac9c>
   2c630:	subs	r5, ip, #0
   2c634:	str	ip, [fp]
   2c638:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2c63c:	ldr	r3, [r9, #40]	; 0x28
   2c640:	ldr	r2, [r9, #56]	; 0x38
   2c644:	cmp	r2, r3
   2c648:	ble	2d780 <__assert_fail@plt+0x1bde0>
   2c64c:	ldr	r2, [r9, #28]
   2c650:	cmp	r3, r2
   2c654:	beq	2d780 <__assert_fail@plt+0x1bde0>
   2c658:	ldr	r2, [r9, #8]
   2c65c:	ldr	r3, [r2, r3, lsl #2]
   2c660:	cmn	r3, #1
   2c664:	bne	2d780 <__assert_fail@plt+0x1bde0>
   2c668:	mov	r2, r6
   2c66c:	mov	r1, r9
   2c670:	mov	r0, r8
   2c674:	bl	226b8 <__assert_fail@plt+0x10d18>
   2c678:	ldr	r3, [r9, #40]	; 0x28
   2c67c:	add	r3, r3, r0
   2c680:	str	r3, [r9, #40]	; 0x28
   2c684:	ldr	r2, [sl, #64]	; 0x40
   2c688:	cmp	r2, #31
   2c68c:	beq	2d744 <__assert_fail@plt+0x1bda4>
   2c690:	ldr	fp, [sl, #56]	; 0x38
   2c694:	lsl	r3, r2, #5
   2c698:	add	r2, r2, #1
   2c69c:	add	r0, r3, #4
   2c6a0:	add	ip, fp, r3
   2c6a4:	add	r3, r3, #16
   2c6a8:	str	r2, [sl, #64]	; 0x40
   2c6ac:	add	r1, fp, r3
   2c6b0:	add	fp, fp, r0
   2c6b4:	str	r4, [ip, #4]
   2c6b8:	str	r4, [ip, #8]
   2c6bc:	str	r4, [ip, #12]
   2c6c0:	ldrd	r2, [r8]
   2c6c4:	strd	r2, [ip, #24]
   2c6c8:	ldrb	r3, [r1, #14]
   2c6cc:	bic	r3, r3, #12
   2c6d0:	strb	r3, [r1, #14]
   2c6d4:	str	r4, [ip, #16]
   2c6d8:	str	r4, [ip, #20]
   2c6dc:	str	r7, [ip, #32]
   2c6e0:	mov	r2, #0
   2c6e4:	mov	r3, #0
   2c6e8:	strd	r2, [sp, #128]	; 0x80
   2c6ec:	add	r2, sp, #128	; 0x80
   2c6f0:	ldr	r1, [sl, #64]	; 0x40
   2c6f4:	cmp	r1, #31
   2c6f8:	beq	2d710 <__assert_fail@plt+0x1bd70>
   2c6fc:	ldr	r0, [sl, #56]	; 0x38
   2c700:	lsl	r3, r1, #5
   2c704:	add	lr, r1, #1
   2c708:	add	ip, r3, #4
   2c70c:	add	r1, r0, r3
   2c710:	str	lr, [sl, #64]	; 0x40
   2c714:	mov	lr, #16
   2c718:	add	r3, r3, lr
   2c71c:	add	ip, r0, ip
   2c720:	add	r0, r0, r3
   2c724:	stmib	r1, {r4, r5, fp}
   2c728:	cmp	fp, #0
   2c72c:	strb	lr, [sp, #132]	; 0x84
   2c730:	ldrd	r2, [r2]
   2c734:	strd	r2, [r1, #24]
   2c738:	ldrb	r3, [r0, #14]
   2c73c:	bic	r3, r3, #12
   2c740:	strb	r3, [r0, #14]
   2c744:	str	r4, [r1, #16]
   2c748:	str	r4, [r1, #20]
   2c74c:	str	r7, [r1, #32]
   2c750:	str	ip, [r5]
   2c754:	bne	2c630 <__assert_fail@plt+0x1ac90>
   2c758:	mov	r2, #0
   2c75c:	mov	r3, #12
   2c760:	str	r2, [sp, #28]
   2c764:	ldr	r2, [sp, #204]	; 0xcc
   2c768:	str	r3, [r2]
   2c76c:	b	2c358 <__assert_fail@plt+0x1a9b8>
   2c770:	ldr	r2, [sl, #64]	; 0x40
   2c774:	cmp	r2, #31
   2c778:	beq	2da14 <__assert_fail@plt+0x1c074>
   2c77c:	ldr	r0, [sl, #56]	; 0x38
   2c780:	lsl	r3, r2, #5
   2c784:	add	r2, r2, #1
   2c788:	add	lr, r3, #4
   2c78c:	add	r1, r0, r3
   2c790:	add	r3, r3, #16
   2c794:	str	r2, [sl, #64]	; 0x40
   2c798:	adds	r2, r0, lr
   2c79c:	add	r0, r0, r3
   2c7a0:	ldr	r3, [sp, #20]
   2c7a4:	mov	ip, #0
   2c7a8:	mvn	lr, #0
   2c7ac:	str	r2, [sp, #28]
   2c7b0:	str	ip, [r1, #4]
   2c7b4:	str	ip, [r1, #8]
   2c7b8:	str	ip, [r1, #12]
   2c7bc:	ldrd	r2, [r3]
   2c7c0:	strd	r2, [r1, #24]
   2c7c4:	ldrb	r3, [r0, #14]
   2c7c8:	bic	r3, r3, #12
   2c7cc:	strb	r3, [r0, #14]
   2c7d0:	str	ip, [r1, #16]
   2c7d4:	str	ip, [r1, #20]
   2c7d8:	str	lr, [r1, #32]
   2c7dc:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2c7e0:	ldr	r3, [sl, #92]	; 0x5c
   2c7e4:	cmp	r3, #1
   2c7e8:	ble	2bf34 <__assert_fail@plt+0x1a594>
   2c7ec:	ldrb	r3, [sl, #88]	; 0x58
   2c7f0:	orr	r3, r3, #2
   2c7f4:	strb	r3, [sl, #88]	; 0x58
   2c7f8:	b	2bf34 <__assert_fail@plt+0x1a594>
   2c7fc:	ldr	r3, [sp, #20]
   2c800:	mov	r4, #1
   2c804:	ldr	r2, [sl, #84]	; 0x54
   2c808:	ldr	r3, [r3]
   2c80c:	lsl	r3, r4, r3
   2c810:	ands	r2, r3, r2
   2c814:	beq	2da00 <__assert_fail@plt+0x1c060>
   2c818:	ldr	r1, [sl, #64]	; 0x40
   2c81c:	ldr	r2, [sl, #80]	; 0x50
   2c820:	cmp	r1, #31
   2c824:	orr	r3, r2, r3
   2c828:	str	r3, [sl, #80]	; 0x50
   2c82c:	beq	2dabc <__assert_fail@plt+0x1c11c>
   2c830:	ldr	r0, [sl, #56]	; 0x38
   2c834:	lsl	r3, r1, #5
   2c838:	add	r4, r1, #1
   2c83c:	add	r2, r3, #4
   2c840:	add	r1, r0, r3
   2c844:	add	r3, r3, #16
   2c848:	str	r4, [sl, #64]	; 0x40
   2c84c:	adds	r2, r0, r2
   2c850:	add	r0, r0, r3
   2c854:	ldr	r3, [sp, #20]
   2c858:	mov	ip, #0
   2c85c:	mvn	lr, #0
   2c860:	str	r2, [sp, #28]
   2c864:	str	ip, [r1, #4]
   2c868:	str	ip, [r1, #8]
   2c86c:	str	ip, [r1, #12]
   2c870:	ldrd	r2, [r3]
   2c874:	strd	r2, [r1, #24]
   2c878:	ldrb	r3, [r0, #14]
   2c87c:	bic	r3, r3, #12
   2c880:	strb	r3, [r0, #14]
   2c884:	str	ip, [r1, #16]
   2c888:	str	ip, [r1, #20]
   2c88c:	str	lr, [r1, #32]
   2c890:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2c894:	ldrb	r3, [sl, #88]	; 0x58
   2c898:	ldr	r2, [sl, #76]	; 0x4c
   2c89c:	orr	r3, r3, #2
   2c8a0:	add	r2, r2, #1
   2c8a4:	str	r2, [sl, #76]	; 0x4c
   2c8a8:	strb	r3, [sl, #88]	; 0x58
   2c8ac:	b	2bf34 <__assert_fail@plt+0x1a594>
   2c8b0:	mov	r6, #0
   2c8b4:	mov	r1, #1
   2c8b8:	mov	r0, #32
   2c8bc:	str	r6, [sp, #68]	; 0x44
   2c8c0:	bl	1ecd8 <__assert_fail@plt+0xd338>
   2c8c4:	mov	r4, r0
   2c8c8:	mov	r1, #1
   2c8cc:	mov	r0, #40	; 0x28
   2c8d0:	bl	1ecd8 <__assert_fail@plt+0xd338>
   2c8d4:	clz	r5, r0
   2c8d8:	cmp	r4, r6
   2c8dc:	str	r0, [sp, #16]
   2c8e0:	lsr	r5, r5, #5
   2c8e4:	moveq	r5, #1
   2c8e8:	cmp	r5, r6
   2c8ec:	bne	2da98 <__assert_fail@plt+0x1c0f8>
   2c8f0:	ldr	r6, [sp, #20]
   2c8f4:	mov	r1, r9
   2c8f8:	ldr	r2, [sp, #32]
   2c8fc:	mov	r0, r6
   2c900:	bl	1f200 <__assert_fail@plt+0xd860>
   2c904:	ldrb	r3, [r6, #4]
   2c908:	mov	fp, r0
   2c90c:	cmp	r3, #2
   2c910:	beq	2d9a8 <__assert_fail@plt+0x1c008>
   2c914:	cmp	r3, #25
   2c918:	strne	r5, [sp, #44]	; 0x2c
   2c91c:	beq	2d638 <__assert_fail@plt+0x1bc98>
   2c920:	cmp	r3, #21
   2c924:	beq	2d628 <__assert_fail@plt+0x1bc88>
   2c928:	ldr	r5, [sp, #20]
   2c92c:	mov	r3, #0
   2c930:	mov	r0, #1
   2c934:	mov	r6, #3
   2c938:	str	sl, [sp, #24]
   2c93c:	ldr	r2, [sp, #32]
   2c940:	str	r3, [sp, #36]	; 0x24
   2c944:	str	r3, [sp, #40]	; 0x28
   2c948:	add	r3, sp, #96	; 0x60
   2c94c:	str	r3, [sp, #28]
   2c950:	ubfx	r1, r2, #16, #1
   2c954:	mov	sl, r2
   2c958:	str	r1, [sp, #48]	; 0x30
   2c95c:	ldr	ip, [sp, #28]
   2c960:	mov	r3, fp
   2c964:	mov	r2, r5
   2c968:	mov	r1, r9
   2c96c:	str	sl, [sp]
   2c970:	str	r0, [sp, #4]
   2c974:	add	r0, sp, #72	; 0x48
   2c978:	str	r6, [sp, #72]	; 0x48
   2c97c:	str	ip, [sp, #76]	; 0x4c
   2c980:	bl	23434 <__assert_fail@plt+0x11a94>
   2c984:	cmp	r0, #0
   2c988:	bne	2d770 <__assert_fail@plt+0x1bdd0>
   2c98c:	mov	r2, sl
   2c990:	mov	r1, r9
   2c994:	mov	r0, r5
   2c998:	bl	1f200 <__assert_fail@plt+0xd860>
   2c99c:	ldr	r3, [sp, #72]	; 0x48
   2c9a0:	mov	fp, r0
   2c9a4:	sub	r2, r3, #2
   2c9a8:	bics	r2, r2, #2
   2c9ac:	beq	2c9c4 <__assert_fail@plt+0x1b024>
   2c9b0:	ldrb	r2, [r5, #4]
   2c9b4:	cmp	r2, #2
   2c9b8:	beq	2d6ac <__assert_fail@plt+0x1bd0c>
   2c9bc:	cmp	r2, #22
   2c9c0:	beq	2d7b8 <__assert_fail@plt+0x1be18>
   2c9c4:	cmp	r3, #4
   2c9c8:	ldrls	pc, [pc, r3, lsl #2]
   2c9cc:	b	2d55c <__assert_fail@plt+0x1bbbc>
   2c9d0:	andeq	sp, r2, r0, asr r5
   2c9d4:	andeq	sp, r2, r0, lsr #10
   2c9d8:	andeq	ip, r2, r0, ror #21
   2c9dc:	andeq	ip, r2, r0, ror #21
   2c9e0:	andeq	sp, r2, ip, asr r5
   2c9e4:	sub	r1, r2, #35	; 0x23
   2c9e8:	movw	r3, #17212	; 0x433c
   2c9ec:	movt	r3, #3
   2c9f0:	clz	r1, r1
   2c9f4:	movw	r2, #21456	; 0x53d0
   2c9f8:	movt	r2, #3
   2c9fc:	lsr	r1, r1, #5
   2ca00:	b	2c564 <__assert_fail@plt+0x1abc4>
   2ca04:	mov	r2, #0
   2ca08:	mov	r3, #5
   2ca0c:	str	r2, [sp, #28]
   2ca10:	ldr	r2, [sp, #204]	; 0xcc
   2ca14:	str	r3, [r2]
   2ca18:	b	2c358 <__assert_fail@plt+0x1a9b8>
   2ca1c:	ldr	r3, [sp, #32]
   2ca20:	ands	r3, r3, #131072	; 0x20000
   2ca24:	bne	2beb8 <__assert_fail@plt+0x1a518>
   2ca28:	str	r3, [sp, #28]
   2ca2c:	mov	r2, #16
   2ca30:	ldr	r3, [sp, #204]	; 0xcc
   2ca34:	str	r2, [r3]
   2ca38:	b	2c358 <__assert_fail@plt+0x1a9b8>
   2ca3c:	cmp	r4, #8
   2ca40:	bls	2d50c <__assert_fail@plt+0x1bb6c>
   2ca44:	mov	r3, #0
   2ca48:	mov	r2, #0
   2ca4c:	strd	r2, [sp, #128]	; 0x80
   2ca50:	ldr	r3, [sl, #64]	; 0x40
   2ca54:	cmp	r3, #31
   2ca58:	beq	2da40 <__assert_fail@plt+0x1c0a0>
   2ca5c:	ldr	r0, [sl, #56]	; 0x38
   2ca60:	lsl	r1, r3, #5
   2ca64:	add	r2, r3, #1
   2ca68:	add	r6, r1, #4
   2ca6c:	add	r3, r0, r1
   2ca70:	mov	ip, #0
   2ca74:	str	r2, [sl, #64]	; 0x40
   2ca78:	mov	lr, #17
   2ca7c:	add	r8, r0, r6
   2ca80:	str	ip, [r3, #4]
   2ca84:	add	r2, r1, #16
   2ca88:	mvn	fp, #0
   2ca8c:	str	r5, [r3, #8]
   2ca90:	add	r2, r0, r2
   2ca94:	cmp	r5, ip
   2ca98:	str	ip, [r3, #12]
   2ca9c:	str	r8, [sp, #28]
   2caa0:	strb	lr, [sp, #132]	; 0x84
   2caa4:	ldrd	r6, [sp, #128]	; 0x80
   2caa8:	strd	r6, [r3, #24]
   2caac:	ldrb	lr, [r2, #14]
   2cab0:	bic	lr, lr, #12
   2cab4:	strb	lr, [r2, #14]
   2cab8:	str	ip, [r3, #16]
   2cabc:	str	ip, [r3, #20]
   2cac0:	str	fp, [r3, #32]
   2cac4:	ldr	r3, [sp, #28]
   2cac8:	strne	r8, [r5]
   2cacc:	cmp	r3, #0
   2cad0:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2cad4:	add	r1, r0, r1
   2cad8:	str	r4, [r1, #24]
   2cadc:	b	2bf34 <__assert_fail@plt+0x1a594>
   2cae0:	ldr	r7, [sp, #76]	; 0x4c
   2cae4:	mov	r0, r7
   2cae8:	bl	117a8 <strlen@plt>
   2caec:	cmp	r0, #1
   2caf0:	bne	2da84 <__assert_fail@plt+0x1c0e4>
   2caf4:	ldr	r1, [sp, #204]	; 0xcc
   2caf8:	mov	r2, #0
   2cafc:	ldrb	r3, [r7]
   2cb00:	str	r2, [r1]
   2cb04:	asr	r1, r3, #5
   2cb08:	and	r3, r3, #31
   2cb0c:	ldr	r2, [r4, r1, lsl #2]
   2cb10:	orr	r3, r2, r0, lsl r3
   2cb14:	str	r3, [r4, r1, lsl #2]
   2cb18:	ldrb	r3, [r5, #4]
   2cb1c:	cmp	r3, #2
   2cb20:	beq	2d6ac <__assert_fail@plt+0x1bd0c>
   2cb24:	cmp	r3, #21
   2cb28:	beq	2db50 <__assert_fail@plt+0x1c1b0>
   2cb2c:	mov	r0, #0
   2cb30:	b	2c95c <__assert_fail@plt+0x1afbc>
   2cb34:	ldr	r9, [sp, #44]	; 0x2c
   2cb38:	mov	sl, r1
   2cb3c:	mov	r8, r2
   2cb40:	ldr	r3, [sp, #40]	; 0x28
   2cb44:	cmp	r3, #0
   2cb48:	beq	2cf14 <__assert_fail@plt+0x1b574>
   2cb4c:	mov	r3, #0
   2cb50:	mov	r2, #0
   2cb54:	strd	r2, [r8]
   2cb58:	ldr	r3, [sl, #64]	; 0x40
   2cb5c:	cmp	r3, #31
   2cb60:	beq	2d4a0 <__assert_fail@plt+0x1bb00>
   2cb64:	ldr	r0, [sl, #56]	; 0x38
   2cb68:	lsl	r2, r3, #5
   2cb6c:	add	r3, r3, #1
   2cb70:	add	ip, r2, #4
   2cb74:	ldr	r6, [sp, #40]	; 0x28
   2cb78:	add	r1, r0, r2
   2cb7c:	add	ip, r0, ip
   2cb80:	str	r3, [sl, #64]	; 0x40
   2cb84:	mov	r3, #16
   2cb88:	mvn	lr, #0
   2cb8c:	add	r2, r2, r3
   2cb90:	add	r0, r0, r2
   2cb94:	stmib	r1, {r5, r6}
   2cb98:	str	r4, [r1, #12]
   2cb9c:	strb	r3, [sp, #132]	; 0x84
   2cba0:	ldrd	r2, [r8]
   2cba4:	strd	r2, [r1, #24]
   2cba8:	ldrb	r3, [r0, #14]
   2cbac:	bic	r3, r3, #12
   2cbb0:	strb	r3, [r0, #14]
   2cbb4:	ldr	r3, [sp, #204]	; 0xcc
   2cbb8:	str	r5, [r1, #16]
   2cbbc:	str	r5, [r1, #20]
   2cbc0:	str	lr, [r1, #32]
   2cbc4:	str	ip, [r6]
   2cbc8:	ldr	r3, [r3]
   2cbcc:	str	ip, [r4]
   2cbd0:	cmp	r3, #0
   2cbd4:	bne	2d480 <__assert_fail@plt+0x1bae0>
   2cbd8:	str	ip, [sp, #28]
   2cbdc:	ldr	r3, [sp, #36]	; 0x24
   2cbe0:	cmp	r3, #0
   2cbe4:	ldr	r3, [sp, #20]
   2cbe8:	ldrb	r8, [r3, #4]
   2cbec:	beq	2bf70 <__assert_fail@plt+0x1a5d0>
   2cbf0:	cmp	r8, #11
   2cbf4:	cmpne	r8, #23
   2cbf8:	bne	2bf70 <__assert_fail@plt+0x1a5d0>
   2cbfc:	ldr	r3, [sp, #28]
   2cc00:	cmp	r3, #0
   2cc04:	beq	2cc10 <__assert_fail@plt+0x1b270>
   2cc08:	mov	r0, r3
   2cc0c:	bl	239e4 <__assert_fail@plt+0x12044>
   2cc10:	mov	r2, #0
   2cc14:	mov	r3, #13
   2cc18:	str	r2, [sp, #28]
   2cc1c:	ldr	r2, [sp, #204]	; 0xcc
   2cc20:	str	r3, [r2]
   2cc24:	b	2c358 <__assert_fail@plt+0x1a9b8>
   2cc28:	mov	r3, r2
   2cc2c:	add	r8, fp, #8
   2cc30:	b	2c0c8 <__assert_fail@plt+0x1a728>
   2cc34:	mov	r0, #996	; 0x3e4
   2cc38:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2cc3c:	cmp	r0, #0
   2cc40:	beq	2ce00 <__assert_fail@plt+0x1b460>
   2cc44:	ldr	r1, [sl, #56]	; 0x38
   2cc48:	mov	r2, #1
   2cc4c:	mov	lr, #4
   2cc50:	mov	r3, #0
   2cc54:	str	r1, [r0]
   2cc58:	str	r0, [sl, #56]	; 0x38
   2cc5c:	b	2c0e8 <__assert_fail@plt+0x1a748>
   2cc60:	mov	r2, r7
   2cc64:	mov	r7, r0
   2cc68:	str	sl, [sp, #16]
   2cc6c:	b	2c18c <__assert_fail@plt+0x1a7ec>
   2cc70:	str	r0, [r1]
   2cc74:	ldr	r2, [sp, #204]	; 0xcc
   2cc78:	mov	r3, #12
   2cc7c:	str	r3, [r2]
   2cc80:	mov	r3, #0
   2cc84:	ldr	r0, [sp, #28]
   2cc88:	str	r3, [sp, #28]
   2cc8c:	bl	239e4 <__assert_fail@plt+0x12044>
   2cc90:	b	2c358 <__assert_fail@plt+0x1a9b8>
   2cc94:	mov	r1, r9
   2cc98:	ldr	r0, [sp, #20]
   2cc9c:	ldr	r2, [sp, #32]
   2cca0:	bl	226b8 <__assert_fail@plt+0x10d18>
   2cca4:	ldr	r3, [r9, #40]	; 0x28
   2cca8:	ldr	r2, [sp, #28]
   2ccac:	add	r0, r3, r0
   2ccb0:	cmp	r2, #0
   2ccb4:	str	r0, [r9, #40]	; 0x28
   2ccb8:	beq	2cecc <__assert_fail@plt+0x1b52c>
   2ccbc:	ldrb	r3, [r2, #24]
   2ccc0:	mov	r7, r2
   2ccc4:	add	r8, sp, #128	; 0x80
   2ccc8:	cmp	r3, #17
   2cccc:	mov	r3, #0
   2ccd0:	str	r3, [sp, #40]	; 0x28
   2ccd4:	mov	r3, #1
   2ccd8:	str	r3, [sp, #24]
   2ccdc:	beq	2ce2c <__assert_fail@plt+0x1b48c>
   2cce0:	mov	fp, #10
   2cce4:	b	2c01c <__assert_fail@plt+0x1a67c>
   2cce8:	mov	r0, #996	; 0x3e4
   2ccec:	str	r2, [sp, #48]	; 0x30
   2ccf0:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2ccf4:	cmp	r0, #0
   2ccf8:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2ccfc:	ldr	r2, [sp, #16]
   2cd00:	mov	ip, #1
   2cd04:	mov	r8, #4
   2cd08:	mov	r3, #0
   2cd0c:	ldr	r1, [sp, #16]
   2cd10:	ldr	lr, [r2, #56]	; 0x38
   2cd14:	str	lr, [r0]
   2cd18:	str	r0, [r2, #56]	; 0x38
   2cd1c:	ldr	r2, [sp, #48]	; 0x30
   2cd20:	b	2c1b8 <__assert_fail@plt+0x1a818>
   2cd24:	mov	r0, #996	; 0x3e4
   2cd28:	str	r2, [sp, #48]	; 0x30
   2cd2c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2cd30:	cmp	r0, #0
   2cd34:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2cd38:	ldr	r2, [sp, #16]
   2cd3c:	mov	lr, #1
   2cd40:	mov	r4, #4
   2cd44:	mov	ip, #0
   2cd48:	ldr	r1, [sp, #16]
   2cd4c:	ldr	r3, [r2, #56]	; 0x38
   2cd50:	str	r3, [r0]
   2cd54:	str	r0, [r2, #56]	; 0x38
   2cd58:	ldr	r2, [sp, #48]	; 0x30
   2cd5c:	b	2c240 <__assert_fail@plt+0x1a8a0>
   2cd60:	ldr	fp, [sp, #20]
   2cd64:	mvn	r6, #0
   2cd68:	movw	r8, #32816	; 0x8030
   2cd6c:	mov	r1, r9
   2cd70:	mov	r0, fp
   2cd74:	ldr	r2, [sp, #32]
   2cd78:	bl	226b8 <__assert_fail@plt+0x10d18>
   2cd7c:	ldr	r2, [r9, #40]	; 0x28
   2cd80:	ldrb	r3, [fp, #4]
   2cd84:	ldrb	r1, [fp]
   2cd88:	add	r0, r2, r0
   2cd8c:	cmp	r3, #2
   2cd90:	str	r0, [r9, #40]	; 0x28
   2cd94:	beq	2d448 <__assert_fail@plt+0x1baa8>
   2cd98:	cmp	r3, #24
   2cd9c:	beq	2cf1c <__assert_fail@plt+0x1b57c>
   2cda0:	cmp	r1, #44	; 0x2c
   2cda4:	beq	2cfbc <__assert_fail@plt+0x1b61c>
   2cda8:	cmp	r3, #1
   2cdac:	beq	2cdb8 <__assert_fail@plt+0x1b418>
   2cdb0:	mvn	r6, #1
   2cdb4:	b	2cd6c <__assert_fail@plt+0x1b3cc>
   2cdb8:	sub	r2, r1, #48	; 0x30
   2cdbc:	uxtb	r0, r2
   2cdc0:	cmp	r0, #9
   2cdc4:	movhi	r3, #0
   2cdc8:	movls	r3, #1
   2cdcc:	cmn	r6, #2
   2cdd0:	moveq	r3, #0
   2cdd4:	cmp	r3, #0
   2cdd8:	beq	2cdb0 <__assert_fail@plt+0x1b410>
   2cddc:	cmn	r6, #1
   2cde0:	add	r3, r6, r6, lsl #2
   2cde4:	moveq	r6, r2
   2cde8:	beq	2cd6c <__assert_fail@plt+0x1b3cc>
   2cdec:	add	r6, r1, r3, lsl #1
   2cdf0:	cmp	r6, r8
   2cdf4:	movge	r6, r8
   2cdf8:	sub	r6, r6, #48	; 0x30
   2cdfc:	b	2cd6c <__assert_fail@plt+0x1b3cc>
   2ce00:	mov	r2, r7
   2ce04:	mov	r7, r0
   2ce08:	str	r0, [r8]
   2ce0c:	str	sl, [sp, #16]
   2ce10:	b	2c18c <__assert_fail@plt+0x1a7ec>
   2ce14:	mov	r3, #0
   2ce18:	add	r8, sp, #128	; 0x80
   2ce1c:	mov	r6, r3
   2ce20:	str	r3, [sp, #40]	; 0x28
   2ce24:	mvn	r3, #0
   2ce28:	str	r3, [sp, #24]
   2ce2c:	mov	r3, r7
   2ce30:	ldr	ip, [r7, #20]
   2ce34:	b	2ce3c <__assert_fail@plt+0x1b49c>
   2ce38:	mov	r3, r2
   2ce3c:	ldr	r2, [r3, #4]
   2ce40:	cmp	r2, #0
   2ce44:	bne	2ce38 <__assert_fail@plt+0x1b498>
   2ce48:	ldr	r2, [r3, #8]
   2ce4c:	cmp	r2, #0
   2ce50:	bne	2ce38 <__assert_fail@plt+0x1b498>
   2ce54:	b	2ce8c <__assert_fail@plt+0x1b4ec>
   2ce58:	ldr	r1, [r3]
   2ce5c:	cmp	r1, #0
   2ce60:	beq	2cebc <__assert_fail@plt+0x1b51c>
   2ce64:	ldr	r2, [r1, #8]
   2ce68:	sub	r0, r3, r2
   2ce6c:	cmp	r2, #0
   2ce70:	clz	r0, r0
   2ce74:	mov	r3, r1
   2ce78:	lsr	r0, r0, #5
   2ce7c:	moveq	r1, #1
   2ce80:	movne	r1, r0
   2ce84:	cmp	r1, #0
   2ce88:	beq	2ce38 <__assert_fail@plt+0x1b498>
   2ce8c:	ldrb	r2, [r3, #24]
   2ce90:	cmp	r2, #17
   2ce94:	bne	2ce58 <__assert_fail@plt+0x1b4b8>
   2ce98:	ldr	r2, [r3, #20]
   2ce9c:	cmp	ip, r2
   2cea0:	bne	2ce58 <__assert_fail@plt+0x1b4b8>
   2cea4:	ldrb	r2, [r3, #26]
   2cea8:	ldr	r1, [r3]
   2ceac:	orr	r2, r2, #8
   2ceb0:	cmp	r1, #0
   2ceb4:	strb	r2, [r3, #26]
   2ceb8:	bne	2ce64 <__assert_fail@plt+0x1b4c4>
   2cebc:	ldr	r3, [sp, #24]
   2cec0:	cmn	r3, #1
   2cec4:	bne	2cce0 <__assert_fail@plt+0x1b340>
   2cec8:	b	2c010 <__assert_fail@plt+0x1a670>
   2cecc:	ldr	r3, [sp, #204]	; 0xcc
   2ced0:	ldr	r3, [r3]
   2ced4:	cmp	r3, #0
   2ced8:	bne	2c350 <__assert_fail@plt+0x1a9b0>
   2cedc:	mov	r3, #0
   2cee0:	str	r3, [sp, #28]
   2cee4:	b	2cbdc <__assert_fail@plt+0x1b23c>
   2cee8:	mov	r0, #996	; 0x3e4
   2ceec:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2cef0:	subs	r4, r0, #0
   2cef4:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2cef8:	ldr	r2, [sl, #56]	; 0x38
   2cefc:	mov	r1, #1
   2cf00:	mov	r0, #4
   2cf04:	mov	r3, #0
   2cf08:	str	r2, [r4]
   2cf0c:	str	r4, [sl, #56]	; 0x38
   2cf10:	b	2c044 <__assert_fail@plt+0x1a6a4>
   2cf14:	str	r4, [sp, #28]
   2cf18:	b	2cbdc <__assert_fail@plt+0x1b23c>
   2cf1c:	cmn	r6, #1
   2cf20:	beq	2cfa0 <__assert_fail@plt+0x1b600>
   2cf24:	cmn	r6, #2
   2cf28:	strne	r6, [sp, #24]
   2cf2c:	beq	2d69c <__assert_fail@plt+0x1bcfc>
   2cf30:	ldr	r3, [sp, #24]
   2cf34:	cmp	r3, #32768	; 0x8000
   2cf38:	movlt	r4, #0
   2cf3c:	movge	r4, #1
   2cf40:	cmp	r4, #0
   2cf44:	bne	2d090 <__assert_fail@plt+0x1b6f0>
   2cf48:	mov	r1, r9
   2cf4c:	ldr	r0, [sp, #20]
   2cf50:	ldr	r2, [sp, #32]
   2cf54:	bl	226b8 <__assert_fail@plt+0x10d18>
   2cf58:	ldr	r3, [r9, #40]	; 0x28
   2cf5c:	ldr	r2, [sp, #28]
   2cf60:	add	r0, r3, r0
   2cf64:	cmp	r2, #0
   2cf68:	str	r0, [r9, #40]	; 0x28
   2cf6c:	beq	2cecc <__assert_fail@plt+0x1b52c>
   2cf70:	ldr	r3, [sp, #24]
   2cf74:	orrs	r3, r6, r3
   2cf78:	bne	2d0a0 <__assert_fail@plt+0x1b700>
   2cf7c:	mov	r0, r2
   2cf80:	bl	239e4 <__assert_fail@plt+0x12044>
   2cf84:	ldr	r3, [sp, #204]	; 0xcc
   2cf88:	ldr	r3, [r3]
   2cf8c:	cmp	r3, #0
   2cf90:	beq	2cedc <__assert_fail@plt+0x1b53c>
   2cf94:	b	2cc80 <__assert_fail@plt+0x1b2e0>
   2cf98:	cmp	r3, #2
   2cf9c:	beq	2d4e4 <__assert_fail@plt+0x1bb44>
   2cfa0:	ldr	r2, [sp, #204]	; 0xcc
   2cfa4:	mov	r3, #10
   2cfa8:	str	r3, [r2]
   2cfac:	ldr	r3, [sp, #28]
   2cfb0:	cmp	r3, #0
   2cfb4:	bne	2cc80 <__assert_fail@plt+0x1b2e0>
   2cfb8:	b	2c350 <__assert_fail@plt+0x1a9b0>
   2cfbc:	cmn	r6, #1
   2cfc0:	bne	2d438 <__assert_fail@plt+0x1ba98>
   2cfc4:	cmp	r3, #1
   2cfc8:	bne	2cfa0 <__assert_fail@plt+0x1b600>
   2cfcc:	mov	r6, #0
   2cfd0:	mvn	r3, #0
   2cfd4:	ldr	fp, [sp, #20]
   2cfd8:	movw	r8, #32816	; 0x8030
   2cfdc:	str	r3, [sp, #24]
   2cfe0:	mov	r3, r7
   2cfe4:	mov	r7, r4
   2cfe8:	mov	r4, r6
   2cfec:	mov	r6, r9
   2cff0:	mov	r9, r3
   2cff4:	mov	r1, r6
   2cff8:	mov	r0, fp
   2cffc:	ldr	r2, [sp, #32]
   2d000:	bl	226b8 <__assert_fail@plt+0x10d18>
   2d004:	ldr	r2, [r6, #40]	; 0x28
   2d008:	ldrb	r1, [fp, #4]
   2d00c:	ldrb	ip, [fp]
   2d010:	add	r0, r2, r0
   2d014:	cmp	r1, #2
   2d018:	str	r0, [r6, #40]	; 0x28
   2d01c:	beq	2d4cc <__assert_fail@plt+0x1bb2c>
   2d020:	cmp	r1, #24
   2d024:	cmpne	ip, #44	; 0x2c
   2d028:	beq	2d040 <__assert_fail@plt+0x1b6a0>
   2d02c:	cmp	r1, #1
   2d030:	beq	2d3e8 <__assert_fail@plt+0x1ba48>
   2d034:	mvn	r3, #1
   2d038:	str	r3, [sp, #24]
   2d03c:	b	2cff4 <__assert_fail@plt+0x1b654>
   2d040:	mov	r2, r9
   2d044:	mov	r9, r6
   2d048:	mov	r6, r4
   2d04c:	mov	r4, r7
   2d050:	mov	r7, r2
   2d054:	ldr	r2, [sp, #24]
   2d058:	cmn	r2, #2
   2d05c:	beq	2d69c <__assert_fail@plt+0x1bcfc>
   2d060:	cmn	r2, #1
   2d064:	cmpne	r6, r2
   2d068:	bgt	2cfa0 <__assert_fail@plt+0x1b600>
   2d06c:	cmp	r1, #24
   2d070:	bne	2cfa0 <__assert_fail@plt+0x1b600>
   2d074:	cmn	r2, #1
   2d078:	bne	2cf30 <__assert_fail@plt+0x1b590>
   2d07c:	cmp	r6, #32768	; 0x8000
   2d080:	movlt	r4, #0
   2d084:	movge	r4, #1
   2d088:	cmp	r4, #0
   2d08c:	beq	2cf48 <__assert_fail@plt+0x1b5a8>
   2d090:	ldr	r2, [sp, #204]	; 0xcc
   2d094:	mov	r3, #15
   2d098:	str	r3, [r2]
   2d09c:	b	2cfac <__assert_fail@plt+0x1b60c>
   2d0a0:	cmp	r6, #0
   2d0a4:	ble	2e134 <__assert_fail@plt+0x1c794>
   2d0a8:	cmp	r6, #1
   2d0ac:	beq	2e148 <__assert_fail@plt+0x1c7a8>
   2d0b0:	ldr	r4, [r2]
   2d0b4:	mov	r3, #2
   2d0b8:	mov	r7, r2
   2d0bc:	add	r8, sp, #128	; 0x80
   2d0c0:	mov	fp, r2
   2d0c4:	str	r6, [sp, #16]
   2d0c8:	mov	r6, r3
   2d0cc:	str	r9, [sp, #40]	; 0x28
   2d0d0:	mov	r9, r8
   2d0d4:	b	2d0dc <__assert_fail@plt+0x1b73c>
   2d0d8:	mov	r7, r3
   2d0dc:	ldr	r2, [sl, #64]	; 0x40
   2d0e0:	cmp	r2, #31
   2d0e4:	beq	2d33c <__assert_fail@plt+0x1b99c>
   2d0e8:	ldr	r0, [sl, #56]	; 0x38
   2d0ec:	lsl	r3, r2, #5
   2d0f0:	add	r2, r2, #1
   2d0f4:	add	lr, r3, #4
   2d0f8:	add	ip, r0, r3
   2d0fc:	add	r3, r3, #16
   2d100:	str	r2, [sl, #64]	; 0x40
   2d104:	add	r1, r0, r3
   2d108:	add	r0, r0, lr
   2d10c:	str	r5, [ip, #4]
   2d110:	mvn	lr, #0
   2d114:	cmp	r0, #0
   2d118:	str	r5, [ip, #8]
   2d11c:	str	r5, [ip, #12]
   2d120:	ldrd	r2, [r7, #20]
   2d124:	strd	r2, [ip, #24]
   2d128:	ldrb	r3, [r1, #14]
   2d12c:	bic	r3, r3, #12
   2d130:	strb	r3, [r1, #14]
   2d134:	str	r5, [ip, #16]
   2d138:	str	r5, [ip, #20]
   2d13c:	str	lr, [ip, #32]
   2d140:	str	r0, [r9]
   2d144:	beq	2d374 <__assert_fail@plt+0x1b9d4>
   2d148:	str	r4, [ip, #4]
   2d14c:	ldr	r4, [r9]
   2d150:	ldrb	r3, [r4, #26]
   2d154:	orr	r3, r3, #4
   2d158:	strb	r3, [r4, #26]
   2d15c:	ldr	r3, [r7, #4]
   2d160:	cmp	r3, #0
   2d164:	addne	r9, r4, #4
   2d168:	bne	2d0d8 <__assert_fail@plt+0x1b738>
   2d16c:	ldr	r2, [r7, #8]
   2d170:	cmp	r2, #0
   2d174:	cmpne	r2, r3
   2d178:	mov	r3, r7
   2d17c:	bne	2d368 <__assert_fail@plt+0x1b9c8>
   2d180:	ldr	r2, [r7]
   2d184:	ldr	r4, [r4]
   2d188:	subs	r7, r2, #0
   2d18c:	bne	2d16c <__assert_fail@plt+0x1b7cc>
   2d190:	ldr	r7, [sp, #128]	; 0x80
   2d194:	mov	r3, #0
   2d198:	mov	r2, #0
   2d19c:	strd	r2, [r8]
   2d1a0:	ldr	r3, [sl, #64]	; 0x40
   2d1a4:	cmp	r3, #31
   2d1a8:	beq	2d37c <__assert_fail@plt+0x1b9dc>
   2d1ac:	ldr	r0, [sl, #56]	; 0x38
   2d1b0:	lsl	r1, r3, #5
   2d1b4:	add	lr, r3, #1
   2d1b8:	add	r4, r1, #4
   2d1bc:	add	r3, r0, r1
   2d1c0:	mov	ip, #16
   2d1c4:	str	lr, [sl, #64]	; 0x40
   2d1c8:	add	r1, r1, ip
   2d1cc:	add	r4, r0, r4
   2d1d0:	add	r2, r0, r1
   2d1d4:	stmib	r3, {r5, fp}
   2d1d8:	mvn	lr, #0
   2d1dc:	str	r7, [r3, #12]
   2d1e0:	cmp	r7, #0
   2d1e4:	strb	ip, [sp, #132]	; 0x84
   2d1e8:	ldrd	r0, [r8]
   2d1ec:	strd	r0, [r3, #24]
   2d1f0:	ldrb	ip, [r2, #14]
   2d1f4:	bic	ip, ip, #12
   2d1f8:	strb	ip, [r2, #14]
   2d1fc:	str	r5, [r3, #16]
   2d200:	str	r5, [r3, #20]
   2d204:	str	lr, [r3, #32]
   2d208:	str	r4, [fp]
   2d20c:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2d210:	cmp	r4, #0
   2d214:	str	r4, [r7]
   2d218:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2d21c:	ldr	r3, [sp, #16]
   2d220:	add	r6, r6, #1
   2d224:	mov	fp, r4
   2d228:	cmp	r3, r6
   2d22c:	bge	2d0d0 <__assert_fail@plt+0x1b730>
   2d230:	ldr	r9, [sp, #40]	; 0x28
   2d234:	mov	r6, r3
   2d238:	ldr	r3, [sp, #24]
   2d23c:	cmp	r6, r3
   2d240:	beq	2cf14 <__assert_fail@plt+0x1b574>
   2d244:	add	r8, sp, #128	; 0x80
   2d248:	str	r9, [sp, #16]
   2d24c:	mov	r1, r8
   2d250:	ldr	fp, [r7]
   2d254:	str	r8, [sp, #40]	; 0x28
   2d258:	b	2d264 <__assert_fail@plt+0x1b8c4>
   2d25c:	mov	r7, r3
   2d260:	add	r1, fp, #4
   2d264:	ldr	r3, [sl, #64]	; 0x40
   2d268:	cmp	r3, #31
   2d26c:	beq	2d3b4 <__assert_fail@plt+0x1ba14>
   2d270:	ldr	r0, [sl, #56]	; 0x38
   2d274:	lsl	r2, r3, #5
   2d278:	add	lr, r3, #1
   2d27c:	add	ip, r2, #4
   2d280:	add	r3, r0, r2
   2d284:	str	lr, [sl, #64]	; 0x40
   2d288:	add	r2, r2, #16
   2d28c:	add	r2, r0, r2
   2d290:	add	r0, r0, ip
   2d294:	str	r5, [r3, #4]
   2d298:	mvn	ip, #0
   2d29c:	cmp	r0, #0
   2d2a0:	str	r5, [r3, #8]
   2d2a4:	str	r5, [r3, #12]
   2d2a8:	ldrd	r8, [r7, #20]
   2d2ac:	strd	r8, [r3, #24]
   2d2b0:	ldrb	lr, [r2, #14]
   2d2b4:	bic	lr, lr, #12
   2d2b8:	strb	lr, [r2, #14]
   2d2bc:	str	r5, [r3, #16]
   2d2c0:	str	r5, [r3, #20]
   2d2c4:	str	ip, [r3, #32]
   2d2c8:	str	r0, [r1]
   2d2cc:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2d2d0:	str	fp, [r3, #4]
   2d2d4:	ldr	fp, [r1]
   2d2d8:	ldrb	r3, [fp, #26]
   2d2dc:	orr	r3, r3, #4
   2d2e0:	strb	r3, [fp, #26]
   2d2e4:	ldr	r3, [r7, #4]
   2d2e8:	cmp	r3, #0
   2d2ec:	bne	2d25c <__assert_fail@plt+0x1b8bc>
   2d2f0:	ldr	r9, [sp, #16]
   2d2f4:	ldr	r8, [sp, #40]	; 0x28
   2d2f8:	ldr	r2, [r7, #8]
   2d2fc:	cmp	r2, #0
   2d300:	cmpne	r2, r3
   2d304:	mov	r3, r7
   2d308:	bne	2d48c <__assert_fail@plt+0x1baec>
   2d30c:	ldr	r2, [r7]
   2d310:	ldr	fp, [fp]
   2d314:	subs	r7, r2, #0
   2d318:	bne	2d2f8 <__assert_fail@plt+0x1b958>
   2d31c:	ldr	r7, [sp, #128]	; 0x80
   2d320:	cmp	r7, #0
   2d324:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2d328:	ldrb	r3, [r7, #24]
   2d32c:	str	r4, [sp, #40]	; 0x28
   2d330:	cmp	r3, #17
   2d334:	bne	2cebc <__assert_fail@plt+0x1b51c>
   2d338:	b	2ce2c <__assert_fail@plt+0x1b48c>
   2d33c:	mov	r0, #996	; 0x3e4
   2d340:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2d344:	cmp	r0, #0
   2d348:	beq	2d3a8 <__assert_fail@plt+0x1ba08>
   2d34c:	ldr	r1, [sl, #56]	; 0x38
   2d350:	mov	r2, #1
   2d354:	mov	lr, #4
   2d358:	mov	r3, #0
   2d35c:	str	r1, [r0]
   2d360:	str	r0, [sl, #56]	; 0x38
   2d364:	b	2d0f8 <__assert_fail@plt+0x1b758>
   2d368:	mov	r3, r2
   2d36c:	add	r9, r4, #8
   2d370:	b	2d0d8 <__assert_fail@plt+0x1b738>
   2d374:	mov	r7, r0
   2d378:	b	2d194 <__assert_fail@plt+0x1b7f4>
   2d37c:	mov	r0, #996	; 0x3e4
   2d380:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2d384:	cmp	r0, #0
   2d388:	beq	2cc74 <__assert_fail@plt+0x1b2d4>
   2d38c:	ldr	r3, [sl, #56]	; 0x38
   2d390:	mov	lr, #1
   2d394:	mov	r4, #4
   2d398:	mov	r1, #0
   2d39c:	str	r3, [r0]
   2d3a0:	str	r0, [sl, #56]	; 0x38
   2d3a4:	b	2d1bc <__assert_fail@plt+0x1b81c>
   2d3a8:	mov	r7, r0
   2d3ac:	str	r0, [r9]
   2d3b0:	b	2d194 <__assert_fail@plt+0x1b7f4>
   2d3b4:	mov	r0, #996	; 0x3e4
   2d3b8:	str	r1, [sp, #44]	; 0x2c
   2d3bc:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2d3c0:	cmp	r0, #0
   2d3c4:	ldr	r1, [sp, #44]	; 0x2c
   2d3c8:	beq	2cc70 <__assert_fail@plt+0x1b2d0>
   2d3cc:	ldr	r3, [sl, #56]	; 0x38
   2d3d0:	mov	lr, #1
   2d3d4:	mov	ip, #4
   2d3d8:	mov	r2, #0
   2d3dc:	str	r3, [r0]
   2d3e0:	str	r0, [sl, #56]	; 0x38
   2d3e4:	b	2d280 <__assert_fail@plt+0x1b8e0>
   2d3e8:	ldr	r3, [sp, #24]
   2d3ec:	sub	r1, ip, #48	; 0x30
   2d3f0:	uxtb	r0, r1
   2d3f4:	cmp	r0, #9
   2d3f8:	movhi	r2, #0
   2d3fc:	movls	r2, #1
   2d400:	cmn	r3, #2
   2d404:	moveq	r2, #0
   2d408:	cmp	r2, #0
   2d40c:	beq	2d034 <__assert_fail@plt+0x1b694>
   2d410:	cmn	r3, #1
   2d414:	add	r2, r3, r3, lsl #2
   2d418:	streq	r1, [sp, #24]
   2d41c:	beq	2cff4 <__assert_fail@plt+0x1b654>
   2d420:	add	ip, ip, r2, lsl #1
   2d424:	cmp	ip, r8
   2d428:	movge	ip, r8
   2d42c:	sub	r3, ip, #48	; 0x30
   2d430:	str	r3, [sp, #24]
   2d434:	b	2cff4 <__assert_fail@plt+0x1b654>
   2d438:	cmn	r6, #2
   2d43c:	beq	2d448 <__assert_fail@plt+0x1baa8>
   2d440:	cmp	r3, #1
   2d444:	beq	2cfd0 <__assert_fail@plt+0x1b630>
   2d448:	ldr	r2, [sp, #52]	; 0x34
   2d44c:	cmp	r2, #0
   2d450:	beq	2cf98 <__assert_fail@plt+0x1b5f8>
   2d454:	ldrd	r2, [r7]
   2d458:	mov	r1, #1
   2d45c:	str	r4, [r9, #40]	; 0x28
   2d460:	ldr	r0, [sp, #20]
   2d464:	ldr	ip, [sp, #28]
   2d468:	strd	r2, [r0]
   2d46c:	ldr	r3, [sp, #204]	; 0xcc
   2d470:	strb	r1, [r0, #4]
   2d474:	ldr	r3, [r3]
   2d478:	cmp	r3, #0
   2d47c:	beq	2cbd8 <__assert_fail@plt+0x1b238>
   2d480:	cmp	ip, #0
   2d484:	bne	2cbd8 <__assert_fail@plt+0x1b238>
   2d488:	b	2cfac <__assert_fail@plt+0x1b60c>
   2d48c:	mov	r7, r2
   2d490:	add	r1, fp, #8
   2d494:	str	r9, [sp, #16]
   2d498:	str	r8, [sp, #40]	; 0x28
   2d49c:	b	2d264 <__assert_fail@plt+0x1b8c4>
   2d4a0:	mov	r0, #996	; 0x3e4
   2d4a4:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2d4a8:	cmp	r0, #0
   2d4ac:	beq	2dae4 <__assert_fail@plt+0x1c144>
   2d4b0:	ldr	r1, [sl, #56]	; 0x38
   2d4b4:	mov	r3, #1
   2d4b8:	mov	ip, #4
   2d4bc:	mov	r2, #0
   2d4c0:	str	r1, [r0]
   2d4c4:	str	r0, [sl, #56]	; 0x38
   2d4c8:	b	2cb74 <__assert_fail@plt+0x1b1d4>
   2d4cc:	ldr	r3, [sp, #52]	; 0x34
   2d4d0:	mov	r4, r7
   2d4d4:	mov	r7, r9
   2d4d8:	mov	r9, r6
   2d4dc:	cmp	r3, #0
   2d4e0:	bne	2d454 <__assert_fail@plt+0x1bab4>
   2d4e4:	ldr	r2, [sp, #204]	; 0xcc
   2d4e8:	mov	r3, #9
   2d4ec:	str	r3, [r2]
   2d4f0:	b	2cfac <__assert_fail@plt+0x1b60c>
   2d4f4:	mvn	r3, #0
   2d4f8:	mov	r4, r2
   2d4fc:	mov	r7, r2
   2d500:	mov	r6, #1
   2d504:	str	r3, [sp, #24]
   2d508:	b	2d244 <__assert_fail@plt+0x1b8a4>
   2d50c:	ldr	r3, [sl, #84]	; 0x54
   2d510:	mov	r2, #1
   2d514:	orr	r3, r3, r2, lsl r4
   2d518:	str	r3, [sl, #84]	; 0x54
   2d51c:	b	2ca44 <__assert_fail@plt+0x1b0a4>
   2d520:	ldr	r2, [sp, #16]
   2d524:	ldr	r0, [r2]
   2d528:	ldr	r3, [r2, #20]
   2d52c:	ldr	r2, [sp, #36]	; 0x24
   2d530:	cmp	r3, r2
   2d534:	beq	2de78 <__assert_fail@plt+0x1c4d8>
   2d538:	ldr	ip, [sp, #16]
   2d53c:	add	r1, r3, #1
   2d540:	ldr	r2, [sp, #76]	; 0x4c
   2d544:	str	r1, [ip, #20]
   2d548:	str	r2, [r0, r3, lsl #2]
   2d54c:	b	2cb18 <__assert_fail@plt+0x1b178>
   2d550:	ldrb	r3, [sp, #76]	; 0x4c
   2d554:	mov	r0, #1
   2d558:	b	2cb04 <__assert_fail@plt+0x1b164>
   2d55c:	ldr	r2, [sp, #16]
   2d560:	add	r0, sp, #68	; 0x44
   2d564:	mov	r1, r4
   2d568:	ldr	ip, [sp, #76]	; 0x4c
   2d56c:	str	r0, [sp]
   2d570:	str	sl, [sp, #8]
   2d574:	add	r3, r2, #36	; 0x24
   2d578:	add	r2, r2, #12
   2d57c:	ldr	r0, [r9, #64]	; 0x40
   2d580:	str	ip, [sp, #4]
   2d584:	bl	219ac <__assert_fail@plt+0x1000c>
   2d588:	ldr	r3, [sp, #204]	; 0xcc
   2d58c:	cmp	r0, #0
   2d590:	str	r0, [r3]
   2d594:	beq	2cb18 <__assert_fail@plt+0x1b178>
   2d598:	ldr	sl, [sp, #24]
   2d59c:	mov	r0, r4
   2d5a0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2d5a4:	ldr	r4, [sp, #16]
   2d5a8:	ldr	r0, [r4]
   2d5ac:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2d5b0:	ldr	r0, [r4, #4]
   2d5b4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2d5b8:	ldr	r0, [r4, #8]
   2d5bc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2d5c0:	ldr	r0, [r4, #12]
   2d5c4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2d5c8:	mov	r0, r4
   2d5cc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2d5d0:	ldr	r3, [sp, #204]	; 0xcc
   2d5d4:	ldr	r3, [r3]
   2d5d8:	cmp	r3, #0
   2d5dc:	bne	2c350 <__assert_fail@plt+0x1a9b0>
   2d5e0:	str	r3, [sp, #28]
   2d5e4:	b	2bf34 <__assert_fail@plt+0x1a594>
   2d5e8:	ldr	r2, [sp, #20]
   2d5ec:	bl	23024 <__assert_fail@plt+0x11684>
   2d5f0:	subs	r3, r0, #0
   2d5f4:	str	r3, [sp, #28]
   2d5f8:	bne	2c528 <__assert_fail@plt+0x1ab88>
   2d5fc:	b	2c758 <__assert_fail@plt+0x1adb8>
   2d600:	mov	r0, #996	; 0x3e4
   2d604:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2d608:	cmp	r0, #0
   2d60c:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2d610:	ldr	r1, [sl, #56]	; 0x38
   2d614:	mov	r2, #4
   2d618:	mov	r3, #0
   2d61c:	str	r1, [r0]
   2d620:	str	r0, [sl, #56]	; 0x38
   2d624:	b	2bee0 <__assert_fail@plt+0x1a540>
   2d628:	ldr	r2, [sp, #20]
   2d62c:	mov	r3, #1
   2d630:	strb	r3, [r2, #4]
   2d634:	b	2c928 <__assert_fail@plt+0x1af88>
   2d638:	ldr	r2, [sp, #16]
   2d63c:	ldr	r1, [sp, #32]
   2d640:	ldrb	r3, [r2, #16]
   2d644:	tst	r1, #256	; 0x100
   2d648:	orr	r3, r3, #1
   2d64c:	strb	r3, [r2, #16]
   2d650:	beq	2d660 <__assert_fail@plt+0x1bcc0>
   2d654:	ldr	r3, [r4]
   2d658:	orr	r3, r3, #1024	; 0x400
   2d65c:	str	r3, [r4]
   2d660:	ldr	r3, [r9, #40]	; 0x28
   2d664:	mov	r1, r9
   2d668:	ldr	r5, [sp, #20]
   2d66c:	ldr	r2, [sp, #32]
   2d670:	add	fp, r3, fp
   2d674:	mov	r0, r5
   2d678:	str	fp, [r9, #40]	; 0x28
   2d67c:	bl	1f200 <__assert_fail@plt+0xd860>
   2d680:	ldrb	r3, [r5, #4]
   2d684:	mov	fp, r0
   2d688:	cmp	r3, #2
   2d68c:	beq	2d9a8 <__assert_fail@plt+0x1c008>
   2d690:	mov	r2, #1
   2d694:	str	r2, [sp, #44]	; 0x2c
   2d698:	b	2c920 <__assert_fail@plt+0x1af80>
   2d69c:	ldr	r3, [sp, #52]	; 0x34
   2d6a0:	cmp	r3, #0
   2d6a4:	bne	2d454 <__assert_fail@plt+0x1bab4>
   2d6a8:	b	2cfa0 <__assert_fail@plt+0x1b600>
   2d6ac:	mov	r3, #7
   2d6b0:	ldr	sl, [sp, #24]
   2d6b4:	ldr	r2, [sp, #204]	; 0xcc
   2d6b8:	str	r3, [r2]
   2d6bc:	b	2d59c <__assert_fail@plt+0x1bbfc>
   2d6c0:	ldr	r4, [sp, #20]
   2d6c4:	mov	r2, r3
   2d6c8:	mov	r1, r9
   2d6cc:	mov	r6, r3
   2d6d0:	mov	r0, r4
   2d6d4:	bl	226b8 <__assert_fail@plt+0x10d18>
   2d6d8:	ldr	lr, [sp, #200]	; 0xc8
   2d6dc:	mov	r3, r6
   2d6e0:	mov	r2, r4
   2d6e4:	mov	r1, r5
   2d6e8:	ldr	ip, [r9, #40]	; 0x28
   2d6ec:	str	lr, [sp]
   2d6f0:	ldr	lr, [sp, #204]	; 0xcc
   2d6f4:	add	ip, ip, r0
   2d6f8:	mov	r0, r9
   2d6fc:	str	lr, [sp, #4]
   2d700:	str	ip, [r9, #40]	; 0x28
   2d704:	bl	2bdc0 <__assert_fail@plt+0x1a420>
   2d708:	str	r0, [sp, #28]
   2d70c:	b	2c358 <__assert_fail@plt+0x1a9b8>
   2d710:	mov	r0, #996	; 0x3e4
   2d714:	str	r2, [sp, #16]
   2d718:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2d71c:	cmp	r0, #0
   2d720:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2d724:	ldr	r1, [sl, #56]	; 0x38
   2d728:	mov	lr, #1
   2d72c:	mov	ip, #4
   2d730:	mov	r3, #0
   2d734:	ldr	r2, [sp, #16]
   2d738:	str	r1, [r0]
   2d73c:	str	r0, [sl, #56]	; 0x38
   2d740:	b	2c70c <__assert_fail@plt+0x1ad6c>
   2d744:	mov	r0, #996	; 0x3e4
   2d748:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2d74c:	subs	fp, r0, #0
   2d750:	beq	2c6e0 <__assert_fail@plt+0x1ad40>
   2d754:	ldr	r1, [sl, #56]	; 0x38
   2d758:	mov	r0, #4
   2d75c:	mov	r2, #1
   2d760:	mov	r3, #0
   2d764:	str	r1, [fp]
   2d768:	str	fp, [sl, #56]	; 0x38
   2d76c:	b	2c6a0 <__assert_fail@plt+0x1ad00>
   2d770:	ldr	sl, [sp, #24]
   2d774:	ldr	r3, [sp, #204]	; 0xcc
   2d778:	str	r0, [r3]
   2d77c:	b	2d59c <__assert_fail@plt+0x1bbfc>
   2d780:	str	r5, [sp, #28]
   2d784:	b	2bf34 <__assert_fail@plt+0x1a594>
   2d788:	ldr	r4, [sp, #20]
   2d78c:	mov	r3, #6
   2d790:	mov	r2, r4
   2d794:	str	r3, [r4]
   2d798:	bl	23024 <__assert_fail@plt+0x11684>
   2d79c:	mov	r3, #9
   2d7a0:	mov	r5, r0
   2d7a4:	str	r3, [r4]
   2d7a8:	b	2c424 <__assert_fail@plt+0x1aa84>
   2d7ac:	cmp	r4, #0
   2d7b0:	strne	r6, [r4]
   2d7b4:	b	2c758 <__assert_fail@plt+0x1adb8>
   2d7b8:	ldr	r3, [r9, #40]	; 0x28
   2d7bc:	mov	r2, sl
   2d7c0:	add	r0, sp, #88	; 0x58
   2d7c4:	mov	r1, r9
   2d7c8:	add	r3, r3, fp
   2d7cc:	str	r3, [r9, #40]	; 0x28
   2d7d0:	bl	1f200 <__assert_fail@plt+0xd860>
   2d7d4:	ldrb	r2, [sp, #92]	; 0x5c
   2d7d8:	mov	r3, r0
   2d7dc:	cmp	r2, #2
   2d7e0:	beq	2d6ac <__assert_fail@plt+0x1bd0c>
   2d7e4:	cmp	r2, #21
   2d7e8:	beq	2d9b8 <__assert_fail@plt+0x1c018>
   2d7ec:	mov	r1, #1
   2d7f0:	add	ip, sp, #128	; 0x80
   2d7f4:	str	sl, [sp]
   2d7f8:	add	r2, sp, #88	; 0x58
   2d7fc:	add	r0, sp, #80	; 0x50
   2d800:	str	r1, [sp, #4]
   2d804:	mov	r1, r9
   2d808:	str	r6, [sp, #80]	; 0x50
   2d80c:	str	ip, [sp, #84]	; 0x54
   2d810:	bl	23434 <__assert_fail@plt+0x11a94>
   2d814:	cmp	r0, #0
   2d818:	bne	2d770 <__assert_fail@plt+0x1bdd0>
   2d81c:	mov	r2, sl
   2d820:	mov	r1, r9
   2d824:	mov	r0, r5
   2d828:	bl	1f200 <__assert_fail@plt+0xd860>
   2d82c:	ldr	r2, [sp, #72]	; 0x48
   2d830:	mov	fp, r0
   2d834:	sub	r3, r2, #2
   2d838:	bics	r3, r3, #2
   2d83c:	beq	2deb8 <__assert_fail@plt+0x1c518>
   2d840:	ldr	r3, [sp, #80]	; 0x50
   2d844:	sub	r1, r3, #2
   2d848:	bics	r1, r1, #2
   2d84c:	beq	2deb8 <__assert_fail@plt+0x1c518>
   2d850:	cmp	r2, #3
   2d854:	moveq	r1, #1
   2d858:	movne	r1, #0
   2d85c:	str	r1, [sp, #52]	; 0x34
   2d860:	beq	2e084 <__assert_fail@plt+0x1c6e4>
   2d864:	cmp	r3, #3
   2d868:	beq	2e05c <__assert_fail@plt+0x1c6bc>
   2d86c:	cmp	r2, #0
   2d870:	bne	2e008 <__assert_fail@plt+0x1c668>
   2d874:	ldrb	r7, [sp, #76]	; 0x4c
   2d878:	cmp	r3, #0
   2d87c:	beq	2e018 <__assert_fail@plt+0x1c678>
   2d880:	cmp	r3, #3
   2d884:	bne	2e028 <__assert_fail@plt+0x1c688>
   2d888:	ldr	r1, [sp, #84]	; 0x54
   2d88c:	ldrb	r8, [r1]
   2d890:	cmp	r2, #0
   2d894:	ldr	r1, [sp, #52]	; 0x34
   2d898:	moveq	r1, #1
   2d89c:	cmp	r1, #0
   2d8a0:	beq	2e020 <__assert_fail@plt+0x1c680>
   2d8a4:	ldr	r2, [sp, #24]
   2d8a8:	ldr	r2, [r2, #92]	; 0x5c
   2d8ac:	cmp	r2, #1
   2d8b0:	ble	2dea4 <__assert_fail@plt+0x1c504>
   2d8b4:	mov	r0, r7
   2d8b8:	bl	1182c <btowc@plt>
   2d8bc:	ldr	r3, [sp, #80]	; 0x50
   2d8c0:	mov	r7, r0
   2d8c4:	cmp	r3, #3
   2d8c8:	cmpne	r3, #0
   2d8cc:	bne	2deb0 <__assert_fail@plt+0x1c510>
   2d8d0:	ldr	r3, [sp, #24]
   2d8d4:	ldr	r3, [r3, #92]	; 0x5c
   2d8d8:	cmp	r3, #1
   2d8dc:	ble	2d8ec <__assert_fail@plt+0x1bf4c>
   2d8e0:	mov	r0, r8
   2d8e4:	bl	1182c <btowc@plt>
   2d8e8:	mov	r8, r0
   2d8ec:	cmn	r7, #1
   2d8f0:	cmnne	r8, #1
   2d8f4:	beq	2da84 <__assert_fail@plt+0x1c0e4>
   2d8f8:	ldr	r3, [sp, #48]	; 0x30
   2d8fc:	cmp	r8, r7
   2d900:	movcs	r3, #0
   2d904:	andcc	r3, r3, #1
   2d908:	cmp	r3, #0
   2d90c:	bne	2deb8 <__assert_fail@plt+0x1c518>
   2d910:	ldr	r3, [sp, #24]
   2d914:	ldr	r3, [r3, #92]	; 0x5c
   2d918:	cmp	r3, #1
   2d91c:	ble	2d954 <__assert_fail@plt+0x1bfb4>
   2d920:	ldr	r2, [sp, #16]
   2d924:	ldr	r1, [sp, #40]	; 0x28
   2d928:	ldr	r3, [r2, #32]
   2d92c:	ldr	r2, [r2, #4]
   2d930:	cmp	r3, r1
   2d934:	beq	2e0b0 <__assert_fail@plt+0x1c710>
   2d938:	ldr	r0, [sp, #16]
   2d93c:	str	r7, [r2, r3, lsl #2]
   2d940:	ldr	r2, [r0, #8]
   2d944:	ldr	r3, [r0, #32]
   2d948:	add	r1, r3, #1
   2d94c:	str	r1, [r0, #32]
   2d950:	str	r8, [r2, r3, lsl #2]
   2d954:	mov	r3, #0
   2d958:	mov	ip, #1
   2d95c:	cmp	r7, r3
   2d960:	asr	r2, r3, #5
   2d964:	and	r0, r3, #31
   2d968:	movhi	r1, #0
   2d96c:	movls	r1, #1
   2d970:	cmp	r8, r3
   2d974:	add	r3, r3, #1
   2d978:	movcc	r1, #0
   2d97c:	cmp	r1, #0
   2d980:	beq	2d990 <__assert_fail@plt+0x1bff0>
   2d984:	ldr	r1, [r4, r2, lsl #2]
   2d988:	orr	r1, r1, ip, lsl r0
   2d98c:	str	r1, [r4, r2, lsl #2]
   2d990:	cmp	r3, #256	; 0x100
   2d994:	bne	2d95c <__assert_fail@plt+0x1bfbc>
   2d998:	ldr	r2, [sp, #204]	; 0xcc
   2d99c:	mov	r3, #0
   2d9a0:	str	r3, [r2]
   2d9a4:	b	2cb18 <__assert_fail@plt+0x1b178>
   2d9a8:	ldr	r2, [sp, #204]	; 0xcc
   2d9ac:	mov	r3, #2
   2d9b0:	str	r3, [r2]
   2d9b4:	b	2d59c <__assert_fail@plt+0x1bbfc>
   2d9b8:	ldr	r2, [r9, #40]	; 0x28
   2d9bc:	mov	r1, #1
   2d9c0:	ldr	r3, [sp, #72]	; 0x48
   2d9c4:	sub	r2, r2, fp
   2d9c8:	str	r2, [r9, #40]	; 0x28
   2d9cc:	strb	r1, [r5, #4]
   2d9d0:	b	2c9c4 <__assert_fail@plt+0x1b024>
   2d9d4:	mov	r0, #996	; 0x3e4
   2d9d8:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2d9dc:	cmp	r0, #0
   2d9e0:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2d9e4:	ldr	r1, [sl, #56]	; 0x38
   2d9e8:	mov	r2, #1
   2d9ec:	mov	ip, #4
   2d9f0:	mov	r3, #0
   2d9f4:	str	r1, [r0]
   2d9f8:	str	r0, [sl, #56]	; 0x38
   2d9fc:	b	2c5c0 <__assert_fail@plt+0x1ac20>
   2da00:	str	r2, [sp, #28]
   2da04:	mov	r3, #6
   2da08:	ldr	r2, [sp, #204]	; 0xcc
   2da0c:	str	r3, [r2]
   2da10:	b	2c358 <__assert_fail@plt+0x1a9b8>
   2da14:	mov	r0, #996	; 0x3e4
   2da18:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2da1c:	cmp	r0, #0
   2da20:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2da24:	ldr	r1, [sl, #56]	; 0x38
   2da28:	mov	r2, #1
   2da2c:	mov	lr, #4
   2da30:	mov	r3, #0
   2da34:	str	r1, [r0]
   2da38:	str	r0, [sl, #56]	; 0x38
   2da3c:	b	2c78c <__assert_fail@plt+0x1adec>
   2da40:	mov	r0, #996	; 0x3e4
   2da44:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2da48:	cmp	r0, #0
   2da4c:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2da50:	ldr	r3, [sl, #56]	; 0x38
   2da54:	mov	r6, #4
   2da58:	mov	r2, #1
   2da5c:	mov	r1, #0
   2da60:	str	r3, [r0]
   2da64:	str	r0, [sl, #56]	; 0x38
   2da68:	b	2ca6c <__assert_fail@plt+0x1b0cc>
   2da6c:	ldr	r0, [sp, #84]	; 0x54
   2da70:	strd	r2, [sp, #56]	; 0x38
   2da74:	bl	117a8 <strlen@plt>
   2da78:	cmp	r0, #1
   2da7c:	ldrd	r2, [sp, #56]	; 0x38
   2da80:	bls	2e0a4 <__assert_fail@plt+0x1c704>
   2da84:	mov	r3, #3
   2da88:	ldr	sl, [sp, #24]
   2da8c:	ldr	r2, [sp, #204]	; 0xcc
   2da90:	str	r3, [r2]
   2da94:	b	2d59c <__assert_fail@plt+0x1bbfc>
   2da98:	mov	r0, r4
   2da9c:	str	r6, [sp, #28]
   2daa0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2daa4:	ldr	r0, [sp, #16]
   2daa8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2daac:	ldr	r2, [sp, #204]	; 0xcc
   2dab0:	mov	r3, #12
   2dab4:	str	r3, [r2]
   2dab8:	b	2c358 <__assert_fail@plt+0x1a9b8>
   2dabc:	mov	r0, #996	; 0x3e4
   2dac0:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2dac4:	cmp	r0, #0
   2dac8:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2dacc:	ldr	r1, [sl, #56]	; 0x38
   2dad0:	mov	r2, #4
   2dad4:	mov	r3, #0
   2dad8:	str	r1, [r0]
   2dadc:	str	r0, [sl, #56]	; 0x38
   2dae0:	b	2c840 <__assert_fail@plt+0x1aea0>
   2dae4:	ldr	r3, [sp, #204]	; 0xcc
   2dae8:	ldr	r3, [r3]
   2daec:	cmp	r3, #0
   2daf0:	beq	2cedc <__assert_fail@plt+0x1b53c>
   2daf4:	b	2cc80 <__assert_fail@plt+0x1b2e0>
   2daf8:	mov	r0, #996	; 0x3e4
   2dafc:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2db00:	cmp	r0, #0
   2db04:	beq	2c758 <__assert_fail@plt+0x1adb8>
   2db08:	ldr	r1, [sl, #56]	; 0x38
   2db0c:	mov	r6, #4
   2db10:	mov	r2, #1
   2db14:	mov	r3, #0
   2db18:	str	r1, [r0]
   2db1c:	str	r0, [sl, #56]	; 0x38
   2db20:	b	2c4b4 <__assert_fail@plt+0x1ab14>
   2db24:	mov	r0, #996	; 0x3e4
   2db28:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2db2c:	cmp	r0, #0
   2db30:	beq	2e140 <__assert_fail@plt+0x1c7a0>
   2db34:	ldr	r1, [sl, #56]	; 0x38
   2db38:	mov	r4, #4
   2db3c:	mov	r2, #1
   2db40:	mov	r3, #0
   2db44:	str	r1, [r0]
   2db48:	str	r0, [sl, #56]	; 0x38
   2db4c:	b	2c440 <__assert_fail@plt+0x1aaa0>
   2db50:	ldr	r3, [r9, #40]	; 0x28
   2db54:	ldr	sl, [sp, #24]
   2db58:	ldr	r2, [sp, #44]	; 0x2c
   2db5c:	add	fp, r3, fp
   2db60:	str	fp, [r9, #40]	; 0x28
   2db64:	cmp	r2, #0
   2db68:	beq	2dbfc <__assert_fail@plt+0x1c25c>
   2db6c:	ubfx	r2, r4, #2, #1
   2db70:	cmp	r2, #0
   2db74:	moveq	r1, r2
   2db78:	beq	2db8c <__assert_fail@plt+0x1c1ec>
   2db7c:	ldr	r3, [r4]
   2db80:	mov	r1, #1
   2db84:	mvn	r3, r3
   2db88:	str	r3, [r4]
   2db8c:	ldr	ip, [r4, r2, lsl #2]
   2db90:	rsb	lr, r2, #8
   2db94:	add	r3, r4, r2, lsl #2
   2db98:	lsr	lr, lr, #1
   2db9c:	ldr	r0, [r3, #4]
   2dba0:	cmp	lr, #4
   2dba4:	mvn	ip, ip
   2dba8:	str	ip, [r4, r2, lsl #2]
   2dbac:	mvn	r2, r0
   2dbb0:	ldr	lr, [r3, #8]
   2dbb4:	ldr	ip, [r3, #12]
   2dbb8:	ldr	r0, [r3, #16]
   2dbbc:	mvn	lr, lr
   2dbc0:	stmib	r3, {r2, lr}
   2dbc4:	mvn	ip, ip
   2dbc8:	ldr	r2, [r3, #20]
   2dbcc:	mvn	r0, r0
   2dbd0:	str	ip, [r3, #12]
   2dbd4:	str	r0, [r3, #16]
   2dbd8:	mvn	r2, r2
   2dbdc:	str	r2, [r3, #20]
   2dbe0:	bne	2dd70 <__assert_fail@plt+0x1c3d0>
   2dbe4:	ldr	r1, [r3, #24]
   2dbe8:	ldr	r2, [r3, #28]
   2dbec:	mvn	r1, r1
   2dbf0:	mvn	r2, r2
   2dbf4:	str	r1, [r3, #24]
   2dbf8:	str	r2, [r3, #28]
   2dbfc:	ldr	ip, [sl, #92]	; 0x5c
   2dc00:	cmp	ip, #1
   2dc04:	ble	2dcb4 <__assert_fail@plt+0x1c314>
   2dc08:	ldr	r3, [sl, #60]	; 0x3c
   2dc0c:	add	r1, r4, #8
   2dc10:	add	r2, r3, #8
   2dc14:	orr	r0, r3, r4
   2dc18:	cmp	r3, r1
   2dc1c:	cmpcc	r4, r2
   2dc20:	movcs	r2, #1
   2dc24:	movcc	r2, #0
   2dc28:	tst	r0, #7
   2dc2c:	movne	r2, #0
   2dc30:	cmp	r2, #0
   2dc34:	ldr	r2, [r4]
   2dc38:	beq	2e154 <__assert_fail@plt+0x1c7b4>
   2dc3c:	ldm	r3, {r0, lr}
   2dc40:	ldr	r1, [r4, #4]
   2dc44:	and	r2, r2, r0
   2dc48:	ldr	r0, [r4, #8]
   2dc4c:	and	r1, r1, lr
   2dc50:	str	r2, [r4]
   2dc54:	ldr	r2, [r4, #12]
   2dc58:	str	r1, [r4, #4]
   2dc5c:	ldr	r1, [r3, #8]
   2dc60:	ldr	lr, [r3, #12]
   2dc64:	and	r0, r0, r1
   2dc68:	ldr	r1, [r4, #16]
   2dc6c:	and	r2, r2, lr
   2dc70:	str	r0, [r4, #8]
   2dc74:	ldr	lr, [r4, #20]
   2dc78:	str	r2, [r4, #12]
   2dc7c:	ldr	r2, [r3, #16]
   2dc80:	ldr	r0, [r3, #20]
   2dc84:	and	r2, r2, r1
   2dc88:	ldr	r1, [r4, #24]
   2dc8c:	and	r0, r0, lr
   2dc90:	str	r2, [r4, #16]
   2dc94:	ldr	r2, [r4, #28]
   2dc98:	str	r0, [r4, #20]
   2dc9c:	ldr	r0, [r3, #24]
   2dca0:	ldr	r3, [r3, #28]
   2dca4:	and	r1, r1, r0
   2dca8:	and	r3, r3, r2
   2dcac:	str	r1, [r4, #24]
   2dcb0:	str	r3, [r4, #28]
   2dcb4:	ldr	r3, [sp, #16]
   2dcb8:	ldr	r3, [r3, #20]
   2dcbc:	cmp	r3, #0
   2dcc0:	bne	2dd84 <__assert_fail@plt+0x1c3e4>
   2dcc4:	ldr	r2, [sp, #16]
   2dcc8:	ldr	r3, [r2, #24]
   2dccc:	cmp	r3, #0
   2dcd0:	bne	2dd84 <__assert_fail@plt+0x1c3e4>
   2dcd4:	ldr	r3, [r2, #28]
   2dcd8:	cmp	r3, #0
   2dcdc:	bne	2dd84 <__assert_fail@plt+0x1c3e4>
   2dce0:	ldr	r3, [r2, #32]
   2dce4:	cmp	r3, #0
   2dce8:	bne	2dd84 <__assert_fail@plt+0x1c3e4>
   2dcec:	cmp	ip, #1
   2dcf0:	ble	2dd0c <__assert_fail@plt+0x1c36c>
   2dcf4:	ldr	r3, [r2, #36]	; 0x24
   2dcf8:	cmp	r3, #0
   2dcfc:	bne	2dd84 <__assert_fail@plt+0x1c3e4>
   2dd00:	ldrb	r3, [r2, #16]
   2dd04:	tst	r3, #1
   2dd08:	bne	2dd84 <__assert_fail@plt+0x1c3e4>
   2dd0c:	ldr	r5, [sp, #16]
   2dd10:	ldr	r0, [r5]
   2dd14:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2dd18:	ldr	r0, [r5, #4]
   2dd1c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2dd20:	ldr	r0, [r5, #8]
   2dd24:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2dd28:	ldr	r0, [r5, #12]
   2dd2c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2dd30:	mov	r0, r5
   2dd34:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2dd38:	mov	r3, #3
   2dd3c:	add	r1, sl, #64	; 0x40
   2dd40:	ldr	r2, [sp, #28]
   2dd44:	add	r0, sl, #56	; 0x38
   2dd48:	str	r4, [sp, #96]	; 0x60
   2dd4c:	strb	r3, [sp, #100]	; 0x64
   2dd50:	bl	23024 <__assert_fail@plt+0x11684>
   2dd54:	subs	r3, r0, #0
   2dd58:	str	r3, [sp, #28]
   2dd5c:	bne	2bf34 <__assert_fail@plt+0x1a594>
   2dd60:	ldr	r2, [sp, #204]	; 0xcc
   2dd64:	mov	r3, #12
   2dd68:	str	r3, [r2]
   2dd6c:	b	2d59c <__assert_fail@plt+0x1bbfc>
   2dd70:	add	r3, r1, #6
   2dd74:	ldr	r2, [r4, r3, lsl #2]
   2dd78:	mvn	r2, r2
   2dd7c:	str	r2, [r4, r3, lsl #2]
   2dd80:	b	2dbfc <__assert_fail@plt+0x1c25c>
   2dd84:	ldrb	r3, [sl, #88]	; 0x58
   2dd88:	mov	r2, #6
   2dd8c:	orr	r3, r3, #2
   2dd90:	strb	r3, [sl, #88]	; 0x58
   2dd94:	ldr	r3, [sp, #16]
   2dd98:	str	r3, [sp, #96]	; 0x60
   2dd9c:	strb	r2, [sp, #100]	; 0x64
   2dda0:	ldr	r3, [sl, #64]	; 0x40
   2dda4:	cmp	r3, #31
   2dda8:	beq	2e110 <__assert_fail@plt+0x1c770>
   2ddac:	ldr	r5, [sl, #56]	; 0x38
   2ddb0:	lsl	r6, r3, #5
   2ddb4:	add	r3, r3, #1
   2ddb8:	mov	r1, #0
   2ddbc:	mvn	ip, #0
   2ddc0:	add	r0, r6, #16
   2ddc4:	str	r3, [sl, #64]	; 0x40
   2ddc8:	add	r3, r6, #4
   2ddcc:	add	r6, r5, r6
   2ddd0:	add	r0, r5, r0
   2ddd4:	adds	r5, r5, r3
   2ddd8:	str	r1, [r6, #4]
   2dddc:	str	r1, [r6, #8]
   2dde0:	str	r1, [r6, #12]
   2dde4:	ldrd	r2, [sp, #96]	; 0x60
   2dde8:	strd	r2, [r6, #24]
   2ddec:	ldrb	r3, [r0, #14]
   2ddf0:	bic	r3, r3, #12
   2ddf4:	strb	r3, [r0, #14]
   2ddf8:	str	r1, [r6, #16]
   2ddfc:	str	r1, [r6, #20]
   2de00:	str	ip, [r6, #32]
   2de04:	beq	2dd60 <__assert_fail@plt+0x1c3c0>
   2de08:	ldr	r3, [r4]
   2de0c:	cmp	r3, r1
   2de10:	bne	2df54 <__assert_fail@plt+0x1c5b4>
   2de14:	ldr	r3, [r4, #4]
   2de18:	cmp	r3, r1
   2de1c:	bne	2df54 <__assert_fail@plt+0x1c5b4>
   2de20:	ldr	r3, [r4, #8]
   2de24:	cmp	r3, r1
   2de28:	bne	2df54 <__assert_fail@plt+0x1c5b4>
   2de2c:	ldr	r3, [r4, #12]
   2de30:	cmp	r3, r1
   2de34:	bne	2df54 <__assert_fail@plt+0x1c5b4>
   2de38:	ldr	r3, [r4, #16]
   2de3c:	cmp	r3, r1
   2de40:	bne	2df54 <__assert_fail@plt+0x1c5b4>
   2de44:	ldr	r3, [r4, #20]
   2de48:	cmp	r3, r1
   2de4c:	bne	2df54 <__assert_fail@plt+0x1c5b4>
   2de50:	ldr	r3, [r4, #24]
   2de54:	cmp	r3, r1
   2de58:	bne	2df54 <__assert_fail@plt+0x1c5b4>
   2de5c:	ldr	r3, [r4, #28]
   2de60:	cmp	r3, r1
   2de64:	bne	2df54 <__assert_fail@plt+0x1c5b4>
   2de68:	mov	r0, r4
   2de6c:	str	r5, [sp, #28]
   2de70:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2de74:	b	2bf34 <__assert_fail@plt+0x1a594>
   2de78:	lsl	r3, r2, #1
   2de7c:	add	r3, r3, #1
   2de80:	lsl	r1, r3, #2
   2de84:	str	r3, [sp, #36]	; 0x24
   2de88:	bl	1f170 <__assert_fail@plt+0xd7d0>
   2de8c:	cmp	r0, #0
   2de90:	beq	2e1d4 <__assert_fail@plt+0x1c834>
   2de94:	ldr	r2, [sp, #16]
   2de98:	str	r0, [r2]
   2de9c:	ldr	r3, [r2, #20]
   2dea0:	b	2d538 <__assert_fail@plt+0x1bb98>
   2dea4:	cmp	r3, #0
   2dea8:	cmpne	r3, #3
   2deac:	beq	2d8f8 <__assert_fail@plt+0x1bf58>
   2deb0:	ldr	r8, [sp, #84]	; 0x54
   2deb4:	b	2d8ec <__assert_fail@plt+0x1bf4c>
   2deb8:	mov	r3, #11
   2debc:	ldr	sl, [sp, #24]
   2dec0:	ldr	r2, [sp, #204]	; 0xcc
   2dec4:	str	r3, [r2]
   2dec8:	b	2d59c <__assert_fail@plt+0x1bbfc>
   2decc:	mov	r4, #128	; 0x80
   2ded0:	mov	r7, #4
   2ded4:	bl	11778 <__ctype_b_loc@plt>
   2ded8:	ldr	r2, [r0]
   2dedc:	add	ip, r7, #24
   2dee0:	sub	r3, r4, #-2147483647	; 0x80000001
   2dee4:	mov	lr, #1
   2dee8:	add	ip, sl, ip, lsl #2
   2deec:	add	r7, sl, #128	; 0x80
   2def0:	add	r6, r2, r3, lsl lr
   2def4:	mov	r0, r6
   2def8:	mov	r1, #0
   2defc:	ldrh	r2, [r0, #2]!
   2df00:	add	r3, r4, r1
   2df04:	ubfx	r2, r2, #3, #1
   2df08:	cmp	r3, #95	; 0x5f
   2df0c:	movne	r3, r2
   2df10:	orreq	r3, r2, #1
   2df14:	cmp	r3, #0
   2df18:	beq	2df28 <__assert_fail@plt+0x1c588>
   2df1c:	ldr	r3, [ip]
   2df20:	orr	r3, r3, lr, lsl r1
   2df24:	str	r3, [ip]
   2df28:	add	r1, r1, #1
   2df2c:	cmp	r1, #32
   2df30:	bne	2defc <__assert_fail@plt+0x1c55c>
   2df34:	add	ip, ip, #4
   2df38:	add	r4, r4, #32
   2df3c:	cmp	ip, r7
   2df40:	add	r6, r6, #64	; 0x40
   2df44:	bne	2def4 <__assert_fail@plt+0x1c554>
   2df48:	b	2c3e8 <__assert_fail@plt+0x1aa48>
   2df4c:	mov	r7, r4
   2df50:	b	2ded4 <__assert_fail@plt+0x1c534>
   2df54:	mov	r3, #3
   2df58:	add	r1, sl, #64	; 0x40
   2df5c:	ldr	r2, [sp, #28]
   2df60:	add	r0, sl, #56	; 0x38
   2df64:	str	r4, [sp, #96]	; 0x60
   2df68:	strb	r3, [sp, #100]	; 0x64
   2df6c:	bl	23024 <__assert_fail@plt+0x11684>
   2df70:	subs	r7, r0, #0
   2df74:	beq	2dd60 <__assert_fail@plt+0x1c3c0>
   2df78:	mov	r2, #0
   2df7c:	mov	r3, #0
   2df80:	strd	r2, [sp, #128]	; 0x80
   2df84:	ldr	r2, [sl, #64]	; 0x40
   2df88:	cmp	r2, #31
   2df8c:	beq	2e030 <__assert_fail@plt+0x1c690>
   2df90:	ldr	ip, [sl, #56]	; 0x38
   2df94:	lsl	r3, r2, #5
   2df98:	add	r2, r2, #1
   2df9c:	mov	fp, #0
   2dfa0:	mov	lr, #10
   2dfa4:	add	r0, r3, #4
   2dfa8:	str	r2, [sl, #64]	; 0x40
   2dfac:	add	r2, r3, #16
   2dfb0:	mvn	r8, #0
   2dfb4:	add	r3, ip, r3
   2dfb8:	add	r2, ip, r2
   2dfbc:	add	ip, ip, r0
   2dfc0:	str	fp, [r3, #4]
   2dfc4:	cmp	ip, fp
   2dfc8:	str	r7, [r3, #8]
   2dfcc:	str	r5, [r3, #12]
   2dfd0:	str	ip, [sp, #28]
   2dfd4:	strb	lr, [sp, #132]	; 0x84
   2dfd8:	ldrd	r0, [sp, #128]	; 0x80
   2dfdc:	strd	r0, [r3, #24]
   2dfe0:	ldrb	r0, [r2, #14]
   2dfe4:	bic	r0, r0, #12
   2dfe8:	strb	r0, [r2, #14]
   2dfec:	str	fp, [r3, #16]
   2dff0:	str	fp, [r3, #20]
   2dff4:	str	r8, [r3, #32]
   2dff8:	str	ip, [r7]
   2dffc:	str	ip, [r6, #4]
   2e000:	bne	2bf34 <__assert_fail@plt+0x1a594>
   2e004:	b	2dd60 <__assert_fail@plt+0x1c3c0>
   2e008:	cmp	r3, #0
   2e00c:	movne	r7, #0
   2e010:	bne	2e028 <__assert_fail@plt+0x1c688>
   2e014:	mov	r7, r3
   2e018:	ldrb	r8, [sp, #84]	; 0x54
   2e01c:	b	2d890 <__assert_fail@plt+0x1bef0>
   2e020:	ldr	r7, [sp, #76]	; 0x4c
   2e024:	b	2d8c4 <__assert_fail@plt+0x1bf24>
   2e028:	mov	r8, #0
   2e02c:	b	2d890 <__assert_fail@plt+0x1bef0>
   2e030:	mov	r0, #996	; 0x3e4
   2e034:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2e038:	cmp	r0, #0
   2e03c:	beq	2dd60 <__assert_fail@plt+0x1c3c0>
   2e040:	ldr	r1, [sl, #56]	; 0x38
   2e044:	mov	r3, #0
   2e048:	mov	r2, r3
   2e04c:	str	r1, [r0]
   2e050:	str	r0, [sl, #56]	; 0x38
   2e054:	str	r3, [sl, #64]	; 0x40
   2e058:	b	2df90 <__assert_fail@plt+0x1c5f0>
   2e05c:	ldr	r0, [sp, #84]	; 0x54
   2e060:	strd	r2, [sp, #56]	; 0x38
   2e064:	bl	117a8 <strlen@plt>
   2e068:	cmp	r0, #1
   2e06c:	bhi	2da84 <__assert_fail@plt+0x1c0e4>
   2e070:	ldrd	r2, [sp, #56]	; 0x38
   2e074:	cmp	r2, #0
   2e078:	movne	r7, #0
   2e07c:	bne	2d888 <__assert_fail@plt+0x1bee8>
   2e080:	b	2d874 <__assert_fail@plt+0x1bed4>
   2e084:	ldr	r0, [sp, #76]	; 0x4c
   2e088:	strd	r2, [sp, #56]	; 0x38
   2e08c:	bl	117a8 <strlen@plt>
   2e090:	cmp	r0, #1
   2e094:	ldrd	r2, [sp, #56]	; 0x38
   2e098:	bhi	2da84 <__assert_fail@plt+0x1c0e4>
   2e09c:	cmp	r3, #3
   2e0a0:	beq	2da6c <__assert_fail@plt+0x1c0cc>
   2e0a4:	ldr	r1, [sp, #76]	; 0x4c
   2e0a8:	ldrb	r7, [r1]
   2e0ac:	b	2d878 <__assert_fail@plt+0x1bed8>
   2e0b0:	lsl	r3, r1, #1
   2e0b4:	mov	r0, r2
   2e0b8:	add	r3, r3, #1
   2e0bc:	str	r3, [sp, #40]	; 0x28
   2e0c0:	lsl	r3, r3, #2
   2e0c4:	mov	r1, r3
   2e0c8:	str	r3, [sp, #56]	; 0x38
   2e0cc:	bl	1f170 <__assert_fail@plt+0xd7d0>
   2e0d0:	ldr	r3, [sp, #56]	; 0x38
   2e0d4:	mov	r2, r0
   2e0d8:	str	r2, [sp, #52]	; 0x34
   2e0dc:	mov	r1, r3
   2e0e0:	ldr	r3, [sp, #16]
   2e0e4:	ldr	r0, [r3, #8]
   2e0e8:	bl	1f170 <__assert_fail@plt+0xd7d0>
   2e0ec:	ldr	r2, [sp, #52]	; 0x34
   2e0f0:	cmp	r0, #0
   2e0f4:	cmpne	r2, #0
   2e0f8:	beq	2e1dc <__assert_fail@plt+0x1c83c>
   2e0fc:	ldr	r1, [sp, #16]
   2e100:	str	r2, [r1, #4]
   2e104:	str	r0, [r1, #8]
   2e108:	ldr	r3, [r1, #32]
   2e10c:	b	2d938 <__assert_fail@plt+0x1bf98>
   2e110:	mov	r0, #996	; 0x3e4
   2e114:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2e118:	cmp	r0, #0
   2e11c:	beq	2dd60 <__assert_fail@plt+0x1c3c0>
   2e120:	ldr	r2, [sl, #56]	; 0x38
   2e124:	mov	r3, #0
   2e128:	str	r2, [r0]
   2e12c:	str	r0, [sl, #56]	; 0x38
   2e130:	b	2ddac <__assert_fail@plt+0x1c40c>
   2e134:	add	r8, sp, #128	; 0x80
   2e138:	ldr	r7, [sp, #28]
   2e13c:	b	2d328 <__assert_fail@plt+0x1b988>
   2e140:	mov	r4, r0
   2e144:	b	2c48c <__assert_fail@plt+0x1aaec>
   2e148:	ldr	r7, [sp, #28]
   2e14c:	mov	r4, r7
   2e150:	b	2d238 <__assert_fail@plt+0x1b898>
   2e154:	ldr	r1, [r3]
   2e158:	ldr	lr, [r4, #4]
   2e15c:	ldr	r0, [r4, #8]
   2e160:	and	r2, r2, r1
   2e164:	ldr	r1, [r4, #12]
   2e168:	str	r2, [r4]
   2e16c:	ldr	r2, [r3, #4]
   2e170:	ldr	r5, [r4, #20]
   2e174:	and	lr, lr, r2
   2e178:	ldr	r2, [r4, #16]
   2e17c:	str	lr, [r4, #4]
   2e180:	ldr	lr, [r3, #8]
   2e184:	and	r0, r0, lr
   2e188:	ldr	lr, [r4, #24]
   2e18c:	str	r0, [r4, #8]
   2e190:	ldr	r0, [r3, #12]
   2e194:	and	r1, r1, r0
   2e198:	ldr	r0, [r4, #28]
   2e19c:	str	r1, [r4, #12]
   2e1a0:	ldr	r1, [r3, #16]
   2e1a4:	and	r2, r2, r1
   2e1a8:	str	r2, [r4, #16]
   2e1ac:	ldr	r2, [r3, #20]
   2e1b0:	and	r5, r5, r2
   2e1b4:	str	r5, [r4, #20]
   2e1b8:	ldr	r2, [r3, #24]
   2e1bc:	and	lr, lr, r2
   2e1c0:	str	lr, [r4, #24]
   2e1c4:	ldr	r3, [r3, #28]
   2e1c8:	and	r0, r0, r3
   2e1cc:	str	r0, [r4, #28]
   2e1d0:	b	2dcb4 <__assert_fail@plt+0x1c314>
   2e1d4:	ldr	sl, [sp, #24]
   2e1d8:	b	2dd60 <__assert_fail@plt+0x1c3c0>
   2e1dc:	mov	r8, r0
   2e1e0:	mov	r0, r2
   2e1e4:	ldr	sl, [sp, #24]
   2e1e8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2e1ec:	mov	r0, r8
   2e1f0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2e1f4:	ldr	r2, [sp, #204]	; 0xcc
   2e1f8:	mov	r3, #12
   2e1fc:	str	r3, [r2]
   2e200:	b	2d59c <__assert_fail@plt+0x1bbfc>
   2e204:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e208:	strd	r6, [sp, #8]
   2e20c:	mov	r7, r2
   2e210:	strd	r8, [sp, #16]
   2e214:	mov	r8, r1
   2e218:	strd	sl, [sp, #24]
   2e21c:	mov	fp, r0
   2e220:	str	lr, [sp, #32]
   2e224:	sub	sp, sp, #44	; 0x2c
   2e228:	ldr	r6, [sp, #80]	; 0x50
   2e22c:	str	r3, [sp, #12]
   2e230:	ldr	r5, [sp, #84]	; 0x54
   2e234:	ldr	r9, [r1]
   2e238:	str	r6, [sp]
   2e23c:	str	r5, [sp, #4]
   2e240:	bl	2bdc0 <__assert_fail@plt+0x1a420>
   2e244:	ldr	r2, [r5]
   2e248:	clz	r3, r0
   2e24c:	lsr	r3, r3, #5
   2e250:	cmp	r2, #0
   2e254:	moveq	r3, #0
   2e258:	cmp	r3, #0
   2e25c:	bne	2e418 <__assert_fail@plt+0x1ca78>
   2e260:	mov	r4, r0
   2e264:	strd	r8, [sp, #16]
   2e268:	str	r3, [sp, #24]
   2e26c:	ldrb	r2, [r7, #4]
   2e270:	and	r3, r2, #247	; 0xf7
   2e274:	cmp	r3, #2
   2e278:	beq	2e2f4 <__assert_fail@plt+0x1c954>
   2e27c:	clz	r3, r6
   2e280:	lsr	r3, r3, #5
   2e284:	cmp	r2, #9
   2e288:	orrne	r3, r3, #1
   2e28c:	cmp	r3, #0
   2e290:	beq	2e2f4 <__assert_fail@plt+0x1c954>
   2e294:	mov	r2, r7
   2e298:	mov	r0, fp
   2e29c:	str	r6, [sp]
   2e2a0:	str	r5, [sp, #4]
   2e2a4:	ldr	r3, [sp, #12]
   2e2a8:	ldr	r1, [sp, #16]
   2e2ac:	bl	2bdc0 <__assert_fail@plt+0x1a420>
   2e2b0:	ldr	r2, [r5]
   2e2b4:	clz	r3, r0
   2e2b8:	mov	sl, r0
   2e2bc:	lsr	r3, r3, #5
   2e2c0:	cmp	r2, #0
   2e2c4:	moveq	r3, #0
   2e2c8:	cmp	r3, #0
   2e2cc:	bne	2e3e0 <__assert_fail@plt+0x1ca40>
   2e2d0:	cmp	r4, #0
   2e2d4:	cmpne	r0, #0
   2e2d8:	bne	2e314 <__assert_fail@plt+0x1c974>
   2e2dc:	ldrb	r2, [r7, #4]
   2e2e0:	cmp	r4, #0
   2e2e4:	moveq	r4, r0
   2e2e8:	and	r3, r2, #247	; 0xf7
   2e2ec:	cmp	r3, #2
   2e2f0:	bne	2e27c <__assert_fail@plt+0x1c8dc>
   2e2f4:	mov	r0, r4
   2e2f8:	add	sp, sp, #44	; 0x2c
   2e2fc:	ldrd	r4, [sp]
   2e300:	ldrd	r6, [sp, #8]
   2e304:	ldrd	r8, [sp, #16]
   2e308:	ldrd	sl, [sp, #24]
   2e30c:	add	sp, sp, #32
   2e310:	pop	{pc}		; (ldr pc, [sp], #4)
   2e314:	ldr	r2, [sp, #20]
   2e318:	mov	r0, #0
   2e31c:	mov	r1, #0
   2e320:	strd	r0, [sp, #32]
   2e324:	ldr	ip, [r2, #64]	; 0x40
   2e328:	cmp	ip, #31
   2e32c:	beq	2e3ac <__assert_fail@plt+0x1ca0c>
   2e330:	ldr	r0, [r2, #56]	; 0x38
   2e334:	lsl	r3, ip, #5
   2e338:	add	ip, ip, #1
   2e33c:	add	r1, r3, #4
   2e340:	mov	r2, #16
   2e344:	ldr	lr, [sp, #24]
   2e348:	strb	r2, [sp, #36]	; 0x24
   2e34c:	add	r2, r0, r3
   2e350:	add	r3, r3, #16
   2e354:	add	r3, r0, r3
   2e358:	add	r0, r0, r1
   2e35c:	ldr	r1, [sp, #20]
   2e360:	cmp	r0, #0
   2e364:	ldrd	r8, [sp, #32]
   2e368:	str	ip, [r1, #64]	; 0x40
   2e36c:	mvn	r1, #0
   2e370:	str	lr, [r2, #4]
   2e374:	str	r4, [r2, #8]
   2e378:	str	sl, [r2, #12]
   2e37c:	strd	r8, [r2, #24]
   2e380:	ldrb	ip, [r3, #14]
   2e384:	bic	ip, ip, #12
   2e388:	strb	ip, [r3, #14]
   2e38c:	str	lr, [r2, #16]
   2e390:	str	lr, [r2, #20]
   2e394:	str	r1, [r2, #32]
   2e398:	str	r0, [r4]
   2e39c:	str	r0, [sl]
   2e3a0:	beq	2e3f8 <__assert_fail@plt+0x1ca58>
   2e3a4:	mov	r4, r0
   2e3a8:	b	2e26c <__assert_fail@plt+0x1c8cc>
   2e3ac:	mov	r0, #996	; 0x3e4
   2e3b0:	str	r3, [sp, #28]
   2e3b4:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2e3b8:	cmp	r0, #0
   2e3bc:	beq	2e3f8 <__assert_fail@plt+0x1ca58>
   2e3c0:	ldr	lr, [sp, #20]
   2e3c4:	mov	ip, #1
   2e3c8:	mov	r1, #4
   2e3cc:	ldr	r3, [sp, #28]
   2e3d0:	ldr	r2, [lr, #56]	; 0x38
   2e3d4:	str	r2, [r0]
   2e3d8:	str	r0, [lr, #56]	; 0x38
   2e3dc:	b	2e340 <__assert_fail@plt+0x1c9a0>
   2e3e0:	cmp	r4, #0
   2e3e4:	beq	2e418 <__assert_fail@plt+0x1ca78>
   2e3e8:	mov	r0, r4
   2e3ec:	mov	r4, #0
   2e3f0:	bl	239e4 <__assert_fail@plt+0x12044>
   2e3f4:	b	2e2f4 <__assert_fail@plt+0x1c954>
   2e3f8:	mov	r0, sl
   2e3fc:	bl	239e4 <__assert_fail@plt+0x12044>
   2e400:	mov	r0, r4
   2e404:	mov	r4, #0
   2e408:	bl	239e4 <__assert_fail@plt+0x12044>
   2e40c:	mov	r3, #12
   2e410:	str	r3, [r5]
   2e414:	b	2e2f4 <__assert_fail@plt+0x1c954>
   2e418:	mov	r4, #0
   2e41c:	b	2e2f4 <__assert_fail@plt+0x1c954>
   2e420:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e424:	mov	r5, r2
   2e428:	mov	r4, r0
   2e42c:	strd	r6, [sp, #8]
   2e430:	ldr	r6, [r1]
   2e434:	strd	r8, [sp, #16]
   2e438:	mov	r8, r3
   2e43c:	strd	sl, [sp, #24]
   2e440:	mov	sl, r1
   2e444:	str	lr, [sp, #32]
   2e448:	sub	sp, sp, #76	; 0x4c
   2e44c:	ldr	r9, [sp, #116]	; 0x74
   2e450:	ldr	ip, [r6, #84]	; 0x54
   2e454:	str	r9, [sp, #4]
   2e458:	str	ip, [sp, #16]
   2e45c:	ldr	ip, [sp, #112]	; 0x70
   2e460:	str	ip, [sp]
   2e464:	bl	2e204 <__assert_fail@plt+0x1c864>
   2e468:	ldr	r2, [r9]
   2e46c:	clz	r3, r0
   2e470:	lsr	r3, r3, #5
   2e474:	cmp	r2, #0
   2e478:	moveq	r3, #0
   2e47c:	cmp	r3, #0
   2e480:	bne	2efc8 <__assert_fail@plt+0x1d628>
   2e484:	movw	r3, #1026	; 0x402
   2e488:	mov	r2, #65280	; 0xff00
   2e48c:	movt	r2, #65503	; 0xffdf
   2e490:	and	r3, r8, r3
   2e494:	str	r8, [sp, #12]
   2e498:	mov	r7, r0
   2e49c:	str	sl, [sp, #20]
   2e4a0:	str	r3, [sp, #32]
   2e4a4:	and	r3, r8, #4608	; 0x1200
   2e4a8:	str	r3, [sp, #36]	; 0x24
   2e4ac:	and	r3, r8, #33792	; 0x8400
   2e4b0:	str	r2, [sp, #40]	; 0x28
   2e4b4:	str	r3, [sp, #44]	; 0x2c
   2e4b8:	and	r3, r8, #8192	; 0x2000
   2e4bc:	str	r9, [sp, #116]	; 0x74
   2e4c0:	str	r3, [sp, #28]
   2e4c4:	and	r3, r8, #8
   2e4c8:	str	r3, [sp, #52]	; 0x34
   2e4cc:	and	r3, r8, #2048	; 0x800
   2e4d0:	str	r3, [sp, #56]	; 0x38
   2e4d4:	and	r3, r8, #524288	; 0x80000
   2e4d8:	str	r3, [sp, #48]	; 0x30
   2e4dc:	and	r3, r8, #16384	; 0x4000
   2e4e0:	str	r3, [sp, #60]	; 0x3c
   2e4e4:	ldrb	r3, [r5, #4]
   2e4e8:	cmp	r3, #10
   2e4ec:	bne	2e8a0 <__assert_fail@plt+0x1cf00>
   2e4f0:	ldr	r0, [r4, #40]	; 0x28
   2e4f4:	ldr	r3, [r4, #56]	; 0x38
   2e4f8:	cmp	r3, r0
   2e4fc:	ble	2e874 <__assert_fail@plt+0x1ced4>
   2e500:	ldr	r1, [r4, #4]
   2e504:	add	fp, r0, #1
   2e508:	ldrb	ip, [r5, #6]
   2e50c:	ldr	r2, [r4, #80]	; 0x50
   2e510:	ldrb	sl, [r1, r0]
   2e514:	bic	ip, ip, #96	; 0x60
   2e518:	cmp	r2, #1
   2e51c:	strb	sl, [r5]
   2e520:	strb	ip, [r5, #6]
   2e524:	ble	2e8c0 <__assert_fail@plt+0x1cf20>
   2e528:	ldr	ip, [r4, #28]
   2e52c:	cmp	r0, ip
   2e530:	beq	2e544 <__assert_fail@plt+0x1cba4>
   2e534:	ldr	ip, [r4, #8]
   2e538:	ldr	ip, [ip, r0, lsl #2]
   2e53c:	cmn	ip, #1
   2e540:	beq	2eb84 <__assert_fail@plt+0x1d1e4>
   2e544:	cmp	sl, #92	; 0x5c
   2e548:	beq	2e8fc <__assert_fail@plt+0x1cf5c>
   2e54c:	ldr	r2, [r4, #8]
   2e550:	mov	r1, #1
   2e554:	strb	r1, [r5, #4]
   2e558:	ldr	r2, [r2, r0, lsl #2]
   2e55c:	mov	r0, r2
   2e560:	str	r2, [sp, #24]
   2e564:	bl	117e4 <iswalnum@plt>
   2e568:	ldr	r2, [sp, #24]
   2e56c:	adds	r0, r0, #0
   2e570:	movne	r0, #1
   2e574:	ldrb	r1, [r5, #6]
   2e578:	cmp	r2, #95	; 0x5f
   2e57c:	orreq	r0, r0, #1
   2e580:	bfi	r1, r0, #6, #1
   2e584:	strb	r1, [r5, #6]
   2e588:	sub	r3, sl, #10
   2e58c:	cmp	r3, #115	; 0x73
   2e590:	ldrls	pc, [pc, r3, lsl #2]
   2e594:	b	2e774 <__assert_fail@plt+0x1cdd4>
   2e598:	andeq	lr, r2, ip, ror #23
   2e59c:	andeq	lr, r2, r4, ror r7
   2e5a0:	andeq	lr, r2, r4, ror r7
   2e5a4:	andeq	lr, r2, r4, ror r7
   2e5a8:	andeq	lr, r2, r4, ror r7
   2e5ac:	andeq	lr, r2, r4, ror r7
   2e5b0:	andeq	lr, r2, r4, ror r7
   2e5b4:	andeq	lr, r2, r4, ror r7
   2e5b8:	andeq	lr, r2, r4, ror r7
   2e5bc:	andeq	lr, r2, r4, ror r7
   2e5c0:	andeq	lr, r2, r4, ror r7
   2e5c4:	andeq	lr, r2, r4, ror r7
   2e5c8:	andeq	lr, r2, r4, ror r7
   2e5cc:	andeq	lr, r2, r4, ror r7
   2e5d0:	andeq	lr, r2, r4, ror r7
   2e5d4:	andeq	lr, r2, r4, ror r7
   2e5d8:	andeq	lr, r2, r4, ror r7
   2e5dc:	andeq	lr, r2, r4, ror r7
   2e5e0:	andeq	lr, r2, r4, ror r7
   2e5e4:	andeq	lr, r2, r4, ror r7
   2e5e8:	andeq	lr, r2, r4, ror r7
   2e5ec:	andeq	lr, r2, r4, ror r7
   2e5f0:	andeq	lr, r2, r4, ror r7
   2e5f4:	andeq	lr, r2, r4, ror r7
   2e5f8:	andeq	lr, r2, r4, ror r7
   2e5fc:	andeq	lr, r2, r4, ror r7
   2e600:	andeq	lr, r2, ip, lsl #24
   2e604:	andeq	lr, r2, r4, ror r7
   2e608:	andeq	lr, r2, r4, ror r7
   2e60c:	andeq	lr, r2, r4, ror r7
   2e610:	andeq	lr, r2, ip, lsr ip
   2e614:	andeq	lr, r2, r8, asr ip
   2e618:	andeq	lr, r2, r8, ror ip
   2e61c:	andeq	lr, r2, r8, lsl #25
   2e620:	andeq	lr, r2, r4, ror r7
   2e624:	andeq	lr, r2, r4, ror r7
   2e628:	andeq	lr, r2, r4, lsr #25
   2e62c:	andeq	lr, r2, r4, ror r7
   2e630:	andeq	lr, r2, r4, ror r7
   2e634:	andeq	lr, r2, r4, ror r7
   2e638:	andeq	lr, r2, r4, ror r7
   2e63c:	andeq	lr, r2, r4, ror r7
   2e640:	andeq	lr, r2, r4, ror r7
   2e644:	andeq	lr, r2, r4, ror r7
   2e648:	andeq	lr, r2, r4, ror r7
   2e64c:	andeq	lr, r2, r4, ror r7
   2e650:	andeq	lr, r2, r4, ror r7
   2e654:	andeq	lr, r2, r4, ror r7
   2e658:	andeq	lr, r2, r4, ror r7
   2e65c:	andeq	lr, r2, r4, ror r7
   2e660:	andeq	lr, r2, r4, ror r7
   2e664:	andeq	lr, r2, r4, ror r7
   2e668:	andeq	lr, r2, r4, ror r7
   2e66c:			; <UNDEFINED> instruction: 0x0002ecb4
   2e670:	andeq	lr, r2, r4, ror r7
   2e674:	andeq	lr, r2, r4, ror r7
   2e678:	andeq	lr, r2, r4, ror r7
   2e67c:	andeq	lr, r2, r4, ror r7
   2e680:	andeq	lr, r2, r4, ror r7
   2e684:	andeq	lr, r2, r4, ror r7
   2e688:	andeq	lr, r2, r4, ror r7
   2e68c:	andeq	lr, r2, r4, ror r7
   2e690:	andeq	lr, r2, r4, ror r7
   2e694:	andeq	lr, r2, r4, ror r7
   2e698:	andeq	lr, r2, r4, ror r7
   2e69c:	andeq	lr, r2, r4, ror r7
   2e6a0:	andeq	lr, r2, r4, ror r7
   2e6a4:	andeq	lr, r2, r4, ror r7
   2e6a8:	andeq	lr, r2, r4, ror r7
   2e6ac:	andeq	lr, r2, r4, ror r7
   2e6b0:	andeq	lr, r2, r4, ror r7
   2e6b4:	andeq	lr, r2, r4, ror r7
   2e6b8:	andeq	lr, r2, r4, ror r7
   2e6bc:	andeq	lr, r2, r4, ror r7
   2e6c0:	andeq	lr, r2, r4, ror r7
   2e6c4:	andeq	lr, r2, r4, ror r7
   2e6c8:	andeq	lr, r2, r4, ror r7
   2e6cc:	andeq	lr, r2, r4, ror r7
   2e6d0:	andeq	lr, r2, r4, ror r7
   2e6d4:	andeq	lr, r2, r4, ror r7
   2e6d8:	andeq	lr, r2, r4, ror r7
   2e6dc:	ldrdeq	lr, [r2], -r0
   2e6e0:	andeq	lr, r2, r4, ror r7
   2e6e4:	andeq	lr, r2, r4, ror r7
   2e6e8:	andeq	lr, r2, r0, ror #25
   2e6ec:	andeq	lr, r2, r4, ror r7
   2e6f0:	andeq	lr, r2, r4, ror r7
   2e6f4:	andeq	lr, r2, r4, ror r7
   2e6f8:	andeq	lr, r2, r4, ror r7
   2e6fc:	andeq	lr, r2, r4, ror r7
   2e700:	andeq	lr, r2, r4, ror r7
   2e704:	andeq	lr, r2, r4, ror r7
   2e708:	andeq	lr, r2, r4, ror r7
   2e70c:	andeq	lr, r2, r4, ror r7
   2e710:	andeq	lr, r2, r4, ror r7
   2e714:	andeq	lr, r2, r4, ror r7
   2e718:	andeq	lr, r2, r4, ror r7
   2e71c:	andeq	lr, r2, r4, ror r7
   2e720:	andeq	lr, r2, r4, ror r7
   2e724:	andeq	lr, r2, r4, ror r7
   2e728:	andeq	lr, r2, r4, ror r7
   2e72c:	andeq	lr, r2, r4, ror r7
   2e730:	andeq	lr, r2, r4, ror r7
   2e734:	andeq	lr, r2, r4, ror r7
   2e738:	andeq	lr, r2, r4, ror r7
   2e73c:	andeq	lr, r2, r4, ror r7
   2e740:	andeq	lr, r2, r4, ror r7
   2e744:	andeq	lr, r2, r4, ror r7
   2e748:	andeq	lr, r2, r4, ror r7
   2e74c:	andeq	lr, r2, r4, ror r7
   2e750:	andeq	lr, r2, r4, ror r7
   2e754:	andeq	lr, r2, r4, ror r7
   2e758:	andeq	lr, r2, r4, ror r7
   2e75c:	strdeq	lr, [r2], -r8
   2e760:	andeq	lr, r2, r8, ror #14
   2e764:	ldrdeq	lr, [r2], -r0
   2e768:	ldr	r3, [sp, #44]	; 0x2c
   2e76c:	cmp	r3, #32768	; 0x8000
   2e770:	beq	2ebf8 <__assert_fail@plt+0x1d258>
   2e774:	str	fp, [r4, #40]	; 0x28
   2e778:	ldr	fp, [r6, #84]	; 0x54
   2e77c:	mov	r2, r5
   2e780:	mov	r0, r4
   2e784:	ldr	ip, [sp, #16]
   2e788:	ldr	r3, [sp, #12]
   2e78c:	ldr	r1, [sp, #20]
   2e790:	str	ip, [r6, #84]	; 0x54
   2e794:	ldr	ip, [sp, #112]	; 0x70
   2e798:	str	ip, [sp]
   2e79c:	ldr	ip, [sp, #116]	; 0x74
   2e7a0:	str	ip, [sp, #4]
   2e7a4:	bl	2e204 <__assert_fail@plt+0x1c864>
   2e7a8:	ldr	r3, [sp, #116]	; 0x74
   2e7ac:	mov	sl, r0
   2e7b0:	ldr	r2, [r3]
   2e7b4:	clz	r3, r0
   2e7b8:	lsr	r3, r3, #5
   2e7bc:	cmp	r2, #0
   2e7c0:	moveq	r3, #0
   2e7c4:	cmp	r3, #0
   2e7c8:	bne	2efb0 <__assert_fail@plt+0x1d610>
   2e7cc:	ldr	r3, [r6, #84]	; 0x54
   2e7d0:	orr	fp, r3, fp
   2e7d4:	str	fp, [r6, #84]	; 0x54
   2e7d8:	mov	r2, #0
   2e7dc:	mov	r3, #0
   2e7e0:	strd	r2, [sp, #64]	; 0x40
   2e7e4:	ldr	fp, [r6, #64]	; 0x40
   2e7e8:	cmp	fp, #31
   2e7ec:	beq	2e918 <__assert_fail@plt+0x1cf78>
   2e7f0:	ldr	r0, [r6, #56]	; 0x38
   2e7f4:	lsl	r3, fp, #5
   2e7f8:	add	fp, fp, #1
   2e7fc:	add	ip, r3, #4
   2e800:	add	r2, r0, r3
   2e804:	mov	lr, #0
   2e808:	str	fp, [r6, #64]	; 0x40
   2e80c:	mov	fp, #10
   2e810:	add	r3, r3, #16
   2e814:	str	lr, [r2, #4]
   2e818:	add	r3, r0, r3
   2e81c:	cmp	r7, lr
   2e820:	str	r7, [r2, #8]
   2e824:	add	r0, r0, ip
   2e828:	mvn	ip, #0
   2e82c:	str	sl, [r2, #12]
   2e830:	strb	fp, [sp, #68]	; 0x44
   2e834:	ldrd	r8, [sp, #64]	; 0x40
   2e838:	strd	r8, [r2, #24]
   2e83c:	ldrb	fp, [r3, #14]
   2e840:	bic	fp, fp, #12
   2e844:	strb	fp, [r3, #14]
   2e848:	str	lr, [r2, #16]
   2e84c:	str	lr, [r2, #20]
   2e850:	str	ip, [r2, #32]
   2e854:	strne	r0, [r7]
   2e858:	cmp	sl, #0
   2e85c:	beq	2e888 <__assert_fail@plt+0x1cee8>
   2e860:	cmp	r0, #0
   2e864:	str	r0, [sl]
   2e868:	beq	2e890 <__assert_fail@plt+0x1cef0>
   2e86c:	mov	r7, r0
   2e870:	b	2e4e4 <__assert_fail@plt+0x1cb44>
   2e874:	mov	r3, #2
   2e878:	mov	sl, #0
   2e87c:	strb	r3, [r5, #4]
   2e880:	str	r0, [r4, #40]	; 0x28
   2e884:	b	2e7d8 <__assert_fail@plt+0x1ce38>
   2e888:	cmp	r0, #0
   2e88c:	bne	2e86c <__assert_fail@plt+0x1cecc>
   2e890:	ldr	r9, [sp, #116]	; 0x74
   2e894:	mov	r3, #12
   2e898:	mov	r7, #0
   2e89c:	str	r3, [r9]
   2e8a0:	mov	r0, r7
   2e8a4:	add	sp, sp, #76	; 0x4c
   2e8a8:	ldrd	r4, [sp]
   2e8ac:	ldrd	r6, [sp, #8]
   2e8b0:	ldrd	r8, [sp, #16]
   2e8b4:	ldrd	sl, [sp, #24]
   2e8b8:	add	sp, sp, #32
   2e8bc:	pop	{pc}		; (ldr pc, [sp], #4)
   2e8c0:	cmp	sl, #92	; 0x5c
   2e8c4:	beq	2e8fc <__assert_fail@plt+0x1cf5c>
   2e8c8:	mov	r2, #1
   2e8cc:	strb	r2, [r5, #4]
   2e8d0:	bl	11778 <__ctype_b_loc@plt>
   2e8d4:	ldr	r0, [r0]
   2e8d8:	lsl	r2, sl, #1
   2e8dc:	ldrb	r1, [r5, #6]
   2e8e0:	ldrh	r2, [r0, r2]
   2e8e4:	ubfx	r2, r2, #3, #1
   2e8e8:	cmp	sl, #95	; 0x5f
   2e8ec:	orreq	r2, r2, #1
   2e8f0:	bfi	r1, r2, #6, #1
   2e8f4:	strb	r1, [r5, #6]
   2e8f8:	b	2e588 <__assert_fail@plt+0x1cbe8>
   2e8fc:	ldr	r3, [r4, #48]	; 0x30
   2e900:	cmp	r3, fp
   2e904:	bgt	2e944 <__assert_fail@plt+0x1cfa4>
   2e908:	mov	r3, #36	; 0x24
   2e90c:	strb	r3, [r5, #4]
   2e910:	str	fp, [r4, #40]	; 0x28
   2e914:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2e918:	mov	r0, #996	; 0x3e4
   2e91c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2e920:	cmp	r0, #0
   2e924:	beq	2e890 <__assert_fail@plt+0x1cef0>
   2e928:	ldr	r2, [r6, #56]	; 0x38
   2e92c:	mov	fp, #1
   2e930:	mov	ip, #4
   2e934:	mov	r3, #0
   2e938:	str	r2, [r0]
   2e93c:	str	r0, [r6, #56]	; 0x38
   2e940:	b	2e800 <__assert_fail@plt+0x1ce60>
   2e944:	ldrb	r3, [r4, #75]	; 0x4b
   2e948:	add	r0, r0, #2
   2e94c:	mov	r8, r0
   2e950:	cmp	r3, #0
   2e954:	bne	2ef4c <__assert_fail@plt+0x1d5ac>
   2e958:	ldrb	sl, [r1, fp]
   2e95c:	mov	r1, #1
   2e960:	strb	sl, [r5]
   2e964:	cmp	r2, r1
   2e968:	strb	r1, [r5, #4]
   2e96c:	ble	2eba4 <__assert_fail@plt+0x1d204>
   2e970:	ldr	r0, [r4, #8]
   2e974:	add	r0, r0, fp, lsl #2
   2e978:	ldr	fp, [r0]
   2e97c:	mov	r0, fp
   2e980:	sub	fp, fp, #95	; 0x5f
   2e984:	bl	117e4 <iswalnum@plt>
   2e988:	ldrb	r2, [r5, #6]
   2e98c:	clz	fp, fp
   2e990:	cmp	r0, #0
   2e994:	lsr	fp, fp, #5
   2e998:	movne	fp, #1
   2e99c:	bfi	r2, fp, #6, #1
   2e9a0:	strb	r2, [r5, #6]
   2e9a4:	sub	r2, sl, #39	; 0x27
   2e9a8:	cmp	r2, #86	; 0x56
   2e9ac:	ldrls	pc, [pc, r2, lsl #2]
   2e9b0:	b	2eb48 <__assert_fail@plt+0x1d1a8>
   2e9b4:	andeq	lr, r2, ip, lsl #30
   2e9b8:	andeq	lr, r2, r0, lsr pc
   2e9bc:	andeq	lr, r2, r4, lsl sp
   2e9c0:	andeq	lr, r2, r8, asr #22
   2e9c4:	andeq	lr, r2, r4, lsr sp
   2e9c8:	andeq	lr, r2, r8, asr #22
   2e9cc:	andeq	lr, r2, r8, asr #22
   2e9d0:	andeq	lr, r2, r8, asr #22
   2e9d4:	andeq	lr, r2, r8, asr #22
   2e9d8:	andeq	lr, r2, r8, asr #22
   2e9dc:	andeq	lr, r2, r0, asr sp
   2e9e0:	andeq	lr, r2, r0, asr sp
   2e9e4:	andeq	lr, r2, r0, asr sp
   2e9e8:	andeq	lr, r2, r0, asr sp
   2e9ec:	andeq	lr, r2, r0, asr sp
   2e9f0:	andeq	lr, r2, r0, asr sp
   2e9f4:	andeq	lr, r2, r0, asr sp
   2e9f8:	andeq	lr, r2, r0, asr sp
   2e9fc:	andeq	lr, r2, r0, asr sp
   2ea00:	andeq	lr, r2, r8, asr #22
   2ea04:	andeq	lr, r2, r8, asr #22
   2ea08:	andeq	lr, r2, r4, ror sp
   2ea0c:	andeq	lr, r2, r8, asr #22
   2ea10:	muleq	r2, r8, sp
   2ea14:			; <UNDEFINED> instruction: 0x0002edbc
   2ea18:	andeq	lr, r2, r8, asr #22
   2ea1c:	andeq	lr, r2, r8, asr #22
   2ea20:	ldrdeq	lr, [r2], -r8
   2ea24:	andeq	lr, r2, r8, asr #22
   2ea28:	andeq	lr, r2, r8, asr #22
   2ea2c:	andeq	lr, r2, r8, asr #22
   2ea30:	andeq	lr, r2, r8, asr #22
   2ea34:	andeq	lr, r2, r8, asr #22
   2ea38:	andeq	lr, r2, r8, asr #22
   2ea3c:	andeq	lr, r2, r8, asr #22
   2ea40:	andeq	lr, r2, r8, asr #22
   2ea44:	andeq	lr, r2, r8, asr #22
   2ea48:	andeq	lr, r2, r8, asr #22
   2ea4c:	andeq	lr, r2, r8, asr #22
   2ea50:	andeq	lr, r2, r8, asr #22
   2ea54:	andeq	lr, r2, r8, asr #22
   2ea58:	andeq	lr, r2, r8, asr #22
   2ea5c:	andeq	lr, r2, r8, asr #22
   2ea60:	andeq	lr, r2, r8, asr #22
   2ea64:	strdeq	lr, [r2], -ip
   2ea68:	andeq	lr, r2, r8, asr #22
   2ea6c:	andeq	lr, r2, r8, asr #22
   2ea70:	andeq	lr, r2, r8, asr #22
   2ea74:	andeq	lr, r2, r8, lsl lr
   2ea78:	andeq	lr, r2, r8, asr #22
   2ea7c:	andeq	lr, r2, r8, asr #22
   2ea80:	andeq	lr, r2, r8, asr #22
   2ea84:	andeq	lr, r2, r8, asr #22
   2ea88:	andeq	lr, r2, r8, asr #22
   2ea8c:	andeq	lr, r2, r8, asr #22
   2ea90:	andeq	lr, r2, r8, asr #22
   2ea94:	andeq	lr, r2, r8, asr #22
   2ea98:	andeq	lr, r2, r4, lsr lr
   2ea9c:	andeq	lr, r2, r8, asr #22
   2eaa0:	andeq	lr, r2, r8, asr lr
   2eaa4:	andeq	lr, r2, r8, asr #22
   2eaa8:	andeq	lr, r2, r8, asr #22
   2eaac:	andeq	lr, r2, r8, asr #22
   2eab0:	andeq	lr, r2, r8, asr #22
   2eab4:	andeq	lr, r2, r8, asr #22
   2eab8:	andeq	lr, r2, r8, asr #22
   2eabc:	andeq	lr, r2, r8, asr #22
   2eac0:	andeq	lr, r2, r8, asr #22
   2eac4:	andeq	lr, r2, r8, asr #22
   2eac8:	andeq	lr, r2, r8, asr #22
   2eacc:	andeq	lr, r2, r8, asr #22
   2ead0:	andeq	lr, r2, r8, asr #22
   2ead4:	andeq	lr, r2, r8, asr #22
   2ead8:	andeq	lr, r2, r8, asr #22
   2eadc:	andeq	lr, r2, r8, asr #22
   2eae0:	andeq	lr, r2, r8, asr #22
   2eae4:	andeq	lr, r2, ip, ror lr
   2eae8:	andeq	lr, r2, r8, asr #22
   2eaec:	andeq	lr, r2, r8, asr #22
   2eaf0:	andeq	lr, r2, r8, asr #22
   2eaf4:	muleq	r2, r8, lr
   2eaf8:	andeq	lr, r2, r8, asr #22
   2eafc:	andeq	lr, r2, r8, asr #22
   2eb00:	andeq	lr, r2, r8, asr #22
   2eb04:			; <UNDEFINED> instruction: 0x0002eeb4
   2eb08:	ldrdeq	lr, [r2], -r0
   2eb0c:	strdeq	lr, [r2], -r0
   2eb10:	ldr	r3, [sp, #12]
   2eb14:	mov	r1, r4
   2eb18:	add	r0, sp, #64	; 0x40
   2eb1c:	str	fp, [r4, #40]	; 0x28
   2eb20:	orr	r2, r3, #8388608	; 0x800000
   2eb24:	bl	226b8 <__assert_fail@plt+0x10d18>
   2eb28:	ldrb	r3, [sp, #68]	; 0x44
   2eb2c:	ldr	fp, [r4, #40]	; 0x28
   2eb30:	sub	r3, r3, #9
   2eb34:	cmp	r3, #1
   2eb38:	sub	r3, fp, #1
   2eb3c:	mov	r8, fp
   2eb40:	str	r3, [r4, #40]	; 0x28
   2eb44:	bls	2ec24 <__assert_fail@plt+0x1d284>
   2eb48:	ldrb	r3, [r5, #4]
   2eb4c:	str	r8, [r4, #40]	; 0x28
   2eb50:	and	r2, r3, #247	; 0xf7
   2eb54:	cmp	r2, #2
   2eb58:	moveq	sl, #0
   2eb5c:	beq	2e7d8 <__assert_fail@plt+0x1ce38>
   2eb60:	ldr	r2, [sp, #112]	; 0x70
   2eb64:	clz	r1, r2
   2eb68:	lsr	r1, r1, #5
   2eb6c:	cmp	r3, #9
   2eb70:	orrne	r1, r1, #1
   2eb74:	cmp	r1, #0
   2eb78:	moveq	sl, r1
   2eb7c:	beq	2e7d8 <__assert_fail@plt+0x1ce38>
   2eb80:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2eb84:	ldr	r3, [r5, #4]
   2eb88:	ldr	r2, [sp, #40]	; 0x28
   2eb8c:	and	r3, r3, r2
   2eb90:	orr	r3, r3, #2097152	; 0x200000
   2eb94:	orr	r3, r3, #1
   2eb98:	str	r3, [r5, #4]
   2eb9c:	str	fp, [r4, #40]	; 0x28
   2eba0:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2eba4:	bl	11778 <__ctype_b_loc@plt>
   2eba8:	ldr	r0, [r0]
   2ebac:	lsl	r2, sl, #1
   2ebb0:	ldrb	r1, [r5, #6]
   2ebb4:	ldrh	r2, [r0, r2]
   2ebb8:	ubfx	r2, r2, #3, #1
   2ebbc:	cmp	sl, #95	; 0x5f
   2ebc0:	orreq	r2, r2, #1
   2ebc4:	bfi	r1, r2, #6, #1
   2ebc8:	strb	r1, [r5, #6]
   2ebcc:	b	2e9a4 <__assert_fail@plt+0x1d004>
   2ebd0:	ldr	r3, [sp, #36]	; 0x24
   2ebd4:	cmp	r3, #4608	; 0x1200
   2ebd8:	moveq	r3, #24
   2ebdc:	strbeq	r3, [r5, #4]
   2ebe0:	streq	fp, [r4, #40]	; 0x28
   2ebe4:	bne	2e774 <__assert_fail@plt+0x1cdd4>
   2ebe8:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ebec:	ldr	r3, [sp, #56]	; 0x38
   2ebf0:	cmp	r3, #0
   2ebf4:	beq	2e774 <__assert_fail@plt+0x1cdd4>
   2ebf8:	mov	r3, #10
   2ebfc:	mov	sl, #0
   2ec00:	strb	r3, [r5, #4]
   2ec04:	str	fp, [r4, #40]	; 0x28
   2ec08:	b	2e7d8 <__assert_fail@plt+0x1ce38>
   2ec0c:	ldr	r3, [sp, #52]	; 0x34
   2ec10:	cmp	r3, #0
   2ec14:	bne	2ec24 <__assert_fail@plt+0x1d284>
   2ec18:	ldr	r3, [r4, #48]	; 0x30
   2ec1c:	cmp	r3, fp
   2ec20:	bne	2eb10 <__assert_fail@plt+0x1d170>
   2ec24:	mov	r3, #12
   2ec28:	mov	r2, #32
   2ec2c:	str	r2, [r5]
   2ec30:	strb	r3, [r5, #4]
   2ec34:	str	fp, [r4, #40]	; 0x28
   2ec38:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ec3c:	ldr	r3, [sp, #28]
   2ec40:	cmp	r3, #0
   2ec44:	beq	2e774 <__assert_fail@plt+0x1cdd4>
   2ec48:	mov	r3, #8
   2ec4c:	strb	r3, [r5, #4]
   2ec50:	str	fp, [r4, #40]	; 0x28
   2ec54:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ec58:	ldr	r3, [sp, #28]
   2ec5c:	cmp	r3, #0
   2ec60:	beq	2e774 <__assert_fail@plt+0x1cdd4>
   2ec64:	mov	r3, #9
   2ec68:	strb	r3, [r5, #4]
   2ec6c:	mov	r3, #9
   2ec70:	str	fp, [r4, #40]	; 0x28
   2ec74:	b	2eb60 <__assert_fail@plt+0x1d1c0>
   2ec78:	mov	r3, #11
   2ec7c:	strb	r3, [r5, #4]
   2ec80:	str	fp, [r4, #40]	; 0x28
   2ec84:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ec88:	ldr	r3, [sp, #32]
   2ec8c:	cmp	r3, #0
   2ec90:	bne	2e774 <__assert_fail@plt+0x1cdd4>
   2ec94:	mov	r3, #18
   2ec98:	strb	r3, [r5, #4]
   2ec9c:	str	fp, [r4, #40]	; 0x28
   2eca0:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2eca4:	mov	r3, #5
   2eca8:	strb	r3, [r5, #4]
   2ecac:	str	fp, [r4, #40]	; 0x28
   2ecb0:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ecb4:	ldr	r3, [sp, #32]
   2ecb8:	cmp	r3, #0
   2ecbc:	bne	2e774 <__assert_fail@plt+0x1cdd4>
   2ecc0:	mov	r3, #19
   2ecc4:	strb	r3, [r5, #4]
   2ecc8:	str	fp, [r4, #40]	; 0x28
   2eccc:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ecd0:	mov	r3, #20
   2ecd4:	strb	r3, [r5, #4]
   2ecd8:	str	fp, [r4, #40]	; 0x28
   2ecdc:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ece0:	mov	r3, #12
   2ece4:	mov	r2, #16
   2ece8:	str	r2, [r5]
   2ecec:	strb	r3, [r5, #4]
   2ecf0:	str	fp, [r4, #40]	; 0x28
   2ecf4:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ecf8:	ldr	r3, [sp, #36]	; 0x24
   2ecfc:	cmp	r3, #4608	; 0x1200
   2ed00:	bne	2e774 <__assert_fail@plt+0x1cdd4>
   2ed04:	mov	r3, #23
   2ed08:	strb	r3, [r5, #4]
   2ed0c:	str	fp, [r4, #40]	; 0x28
   2ed10:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ed14:	ldr	r3, [sp, #28]
   2ed18:	cmp	r3, #0
   2ed1c:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ed20:	mov	r3, #9
   2ed24:	strb	r3, [r5, #4]
   2ed28:	mov	r3, #9
   2ed2c:	str	r8, [r4, #40]	; 0x28
   2ed30:	b	2eb60 <__assert_fail@plt+0x1d1c0>
   2ed34:	ldr	r3, [sp, #32]
   2ed38:	cmp	r3, #2
   2ed3c:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ed40:	mov	r3, #18
   2ed44:	strb	r3, [r5, #4]
   2ed48:	str	r8, [r4, #40]	; 0x28
   2ed4c:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ed50:	ldr	r3, [sp, #60]	; 0x3c
   2ed54:	cmp	r3, #0
   2ed58:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ed5c:	sub	r3, sl, #49	; 0x31
   2ed60:	mov	r2, #4
   2ed64:	str	r3, [r5]
   2ed68:	strb	r2, [r5, #4]
   2ed6c:	str	r8, [r4, #40]	; 0x28
   2ed70:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ed74:	ldr	r3, [sp, #48]	; 0x30
   2ed78:	cmp	r3, #0
   2ed7c:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ed80:	mov	r3, #12
   2ed84:	mov	r2, #6
   2ed88:	str	r2, [r5]
   2ed8c:	strb	r3, [r5, #4]
   2ed90:	str	r8, [r4, #40]	; 0x28
   2ed94:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ed98:	ldr	r3, [sp, #48]	; 0x30
   2ed9c:	cmp	r3, #0
   2eda0:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2eda4:	mov	r3, #12
   2eda8:	mov	r2, #9
   2edac:	str	r2, [r5]
   2edb0:	strb	r3, [r5, #4]
   2edb4:	str	r8, [r4, #40]	; 0x28
   2edb8:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2edbc:	ldr	r3, [sp, #32]
   2edc0:	cmp	r3, #2
   2edc4:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2edc8:	mov	r3, #19
   2edcc:	strb	r3, [r5, #4]
   2edd0:	str	r8, [r4, #40]	; 0x28
   2edd4:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2edd8:	ldr	r3, [sp, #48]	; 0x30
   2eddc:	cmp	r3, #0
   2ede0:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ede4:	mov	r3, #12
   2ede8:	mov	r2, #512	; 0x200
   2edec:	str	r2, [r5]
   2edf0:	strb	r3, [r5, #4]
   2edf4:	str	r8, [r4, #40]	; 0x28
   2edf8:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2edfc:	ldr	r3, [sp, #48]	; 0x30
   2ee00:	cmp	r3, #0
   2ee04:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ee08:	mov	r3, #35	; 0x23
   2ee0c:	strb	r3, [r5, #4]
   2ee10:	str	r8, [r4, #40]	; 0x28
   2ee14:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ee18:	ldr	r3, [sp, #48]	; 0x30
   2ee1c:	cmp	r3, #0
   2ee20:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ee24:	mov	r3, #33	; 0x21
   2ee28:	strb	r3, [r5, #4]
   2ee2c:	str	r8, [r4, #40]	; 0x28
   2ee30:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ee34:	ldr	r3, [sp, #48]	; 0x30
   2ee38:	cmp	r3, #0
   2ee3c:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ee40:	mov	r3, #12
   2ee44:	mov	r2, #64	; 0x40
   2ee48:	str	r2, [r5]
   2ee4c:	strb	r3, [r5, #4]
   2ee50:	str	r8, [r4, #40]	; 0x28
   2ee54:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ee58:	ldr	r3, [sp, #48]	; 0x30
   2ee5c:	cmp	r3, #0
   2ee60:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ee64:	mov	r3, #12
   2ee68:	mov	r2, #256	; 0x100
   2ee6c:	str	r2, [r5]
   2ee70:	strb	r3, [r5, #4]
   2ee74:	str	r8, [r4, #40]	; 0x28
   2ee78:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ee7c:	ldr	r3, [sp, #48]	; 0x30
   2ee80:	cmp	r3, #0
   2ee84:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ee88:	mov	r3, #34	; 0x22
   2ee8c:	strb	r3, [r5, #4]
   2ee90:	str	r8, [r4, #40]	; 0x28
   2ee94:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ee98:	ldr	r3, [sp, #48]	; 0x30
   2ee9c:	cmp	r3, #0
   2eea0:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2eea4:	mov	r3, #32
   2eea8:	strb	r3, [r5, #4]
   2eeac:	str	r8, [r4, #40]	; 0x28
   2eeb0:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2eeb4:	ldr	r3, [sp, #36]	; 0x24
   2eeb8:	cmp	r3, #512	; 0x200
   2eebc:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2eec0:	mov	r3, #23
   2eec4:	strb	r3, [r5, #4]
   2eec8:	str	r8, [r4, #40]	; 0x28
   2eecc:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2eed0:	ldr	r3, [sp, #44]	; 0x2c
   2eed4:	cmp	r3, #0
   2eed8:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2eedc:	mov	sl, r3
   2eee0:	mov	r3, #10
   2eee4:	strb	r3, [r5, #4]
   2eee8:	str	r8, [r4, #40]	; 0x28
   2eeec:	b	2e7d8 <__assert_fail@plt+0x1ce38>
   2eef0:	ldr	r3, [sp, #36]	; 0x24
   2eef4:	cmp	r3, #512	; 0x200
   2eef8:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2eefc:	mov	r3, #24
   2ef00:	strb	r3, [r5, #4]
   2ef04:	str	r8, [r4, #40]	; 0x28
   2ef08:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ef0c:	ldr	r3, [sp, #48]	; 0x30
   2ef10:	cmp	r3, #0
   2ef14:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ef18:	mov	r3, #12
   2ef1c:	mov	r2, #128	; 0x80
   2ef20:	str	r2, [r5]
   2ef24:	strb	r3, [r5, #4]
   2ef28:	str	r8, [r4, #40]	; 0x28
   2ef2c:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ef30:	ldr	r3, [sp, #28]
   2ef34:	cmp	r3, #0
   2ef38:	bne	2eb48 <__assert_fail@plt+0x1d1a8>
   2ef3c:	mov	r3, #8
   2ef40:	strb	r3, [r5, #4]
   2ef44:	str	r8, [r4, #40]	; 0x28
   2ef48:	b	2e778 <__assert_fail@plt+0x1cdd8>
   2ef4c:	cmp	r2, #1
   2ef50:	ble	2ef80 <__assert_fail@plt+0x1d5e0>
   2ef54:	ldr	r0, [r4, #8]
   2ef58:	ldr	r3, [r0, fp, lsl #2]
   2ef5c:	add	r0, r0, fp, lsl #2
   2ef60:	cmn	r3, #1
   2ef64:	beq	2efdc <__assert_fail@plt+0x1d63c>
   2ef68:	ldr	r3, [r4, #28]
   2ef6c:	cmp	r3, r8
   2ef70:	beq	2ef80 <__assert_fail@plt+0x1d5e0>
   2ef74:	ldr	r3, [r0, #4]
   2ef78:	cmn	r3, #1
   2ef7c:	beq	2efdc <__assert_fail@plt+0x1d63c>
   2ef80:	ldrb	ip, [r4, #76]	; 0x4c
   2ef84:	ldr	r0, [r4]
   2ef88:	ldr	r3, [r4, #24]
   2ef8c:	cmp	ip, #0
   2ef90:	beq	2efd0 <__assert_fail@plt+0x1d630>
   2ef94:	ldr	ip, [r4, #12]
   2ef98:	add	r3, r0, r3
   2ef9c:	ldr	r0, [ip, fp, lsl #2]
   2efa0:	ldrb	sl, [r3, r0]
   2efa4:	tst	sl, #128	; 0x80
   2efa8:	beq	2e95c <__assert_fail@plt+0x1cfbc>
   2efac:	b	2e958 <__assert_fail@plt+0x1cfb8>
   2efb0:	cmp	r7, #0
   2efb4:	beq	2efc8 <__assert_fail@plt+0x1d628>
   2efb8:	mov	r0, r7
   2efbc:	mov	r7, #0
   2efc0:	bl	239e4 <__assert_fail@plt+0x12044>
   2efc4:	b	2e8a0 <__assert_fail@plt+0x1cf00>
   2efc8:	mov	r7, #0
   2efcc:	b	2e8a0 <__assert_fail@plt+0x1cf00>
   2efd0:	add	r0, r0, fp
   2efd4:	ldrb	sl, [r0, r3]
   2efd8:	b	2e95c <__assert_fail@plt+0x1cfbc>
   2efdc:	ldrb	sl, [r1, fp]
   2efe0:	mov	r2, #1
   2efe4:	strb	sl, [r5]
   2efe8:	strb	r2, [r5, #4]
   2efec:	b	2e978 <__assert_fail@plt+0x1cfd8>
   2eff0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2eff4:	mov	r5, r2
   2eff8:	strd	r6, [sp, #8]
   2effc:	mov	r6, r0
   2f000:	mov	r7, r3
   2f004:	ldrb	r3, [r0, #28]
   2f008:	mov	r0, #0
   2f00c:	strd	r8, [sp, #16]
   2f010:	mov	r8, r1
   2f014:	strd	sl, [sp, #24]
   2f018:	ldr	r2, [r6, #4]
   2f01c:	str	lr, [sp, #32]
   2f020:	sub	sp, sp, #148	; 0x94
   2f024:	bic	r3, r3, #111	; 0x6f
   2f028:	str	r0, [r6, #8]
   2f02c:	str	r7, [r6, #12]
   2f030:	str	r0, [r6, #24]
   2f034:	cmp	r2, #159	; 0x9f
   2f038:	strb	r3, [r6, #28]
   2f03c:	str	r0, [sp, #36]	; 0x24
   2f040:	ldr	r4, [r6]
   2f044:	bls	30344 <__assert_fail@plt+0x1e9a4>
   2f048:	mov	r3, #160	; 0xa0
   2f04c:	mov	r1, #0
   2f050:	mov	r2, r3
   2f054:	mov	r0, r4
   2f058:	str	r3, [r6, #8]
   2f05c:	bl	11814 <memset@plt>
   2f060:	movw	r3, #43689	; 0xaaa9
   2f064:	movt	r3, #2730	; 0xaaa
   2f068:	mov	r2, #31
   2f06c:	cmp	r5, r3
   2f070:	str	r2, [r4, #64]	; 0x40
   2f074:	bhi	2f84c <__assert_fail@plt+0x1deac>
   2f078:	add	r9, r5, #1
   2f07c:	lsl	r0, r9, #3
   2f080:	str	r9, [r4, #4]
   2f084:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2f088:	cmp	r5, #0
   2f08c:	str	r0, [r4]
   2f090:	beq	30368 <__assert_fail@plt+0x1e9c8>
   2f094:	mov	r1, #1
   2f098:	lsl	r1, r1, #1
   2f09c:	cmp	r5, r1
   2f0a0:	bcs	2f098 <__assert_fail@plt+0x1d6f8>
   2f0a4:	sub	sl, r1, #1
   2f0a8:	mov	r0, #12
   2f0ac:	bl	1ecd8 <__assert_fail@plt+0xd338>
   2f0b0:	str	r0, [r4, #32]
   2f0b4:	str	sl, [r4, #68]	; 0x44
   2f0b8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   2f0bc:	str	r0, [r4, #92]	; 0x5c
   2f0c0:	mov	r0, #14
   2f0c4:	bl	118b0 <nl_langinfo@plt>
   2f0c8:	ldrb	r3, [r0]
   2f0cc:	and	r3, r3, #223	; 0xdf
   2f0d0:	cmp	r3, #85	; 0x55
   2f0d4:	bne	2f12c <__assert_fail@plt+0x1d78c>
   2f0d8:	ldrb	r3, [r0, #1]
   2f0dc:	and	r3, r3, #223	; 0xdf
   2f0e0:	cmp	r3, #84	; 0x54
   2f0e4:	bne	2f12c <__assert_fail@plt+0x1d78c>
   2f0e8:	ldrb	r3, [r0, #2]
   2f0ec:	and	r3, r3, #223	; 0xdf
   2f0f0:	cmp	r3, #70	; 0x46
   2f0f4:	bne	2f12c <__assert_fail@plt+0x1d78c>
   2f0f8:	ldrb	r3, [r0, #3]
   2f0fc:	movw	r1, #21508	; 0x5404
   2f100:	movt	r1, #3
   2f104:	cmp	r3, #45	; 0x2d
   2f108:	moveq	r3, #4
   2f10c:	movne	r3, #3
   2f110:	add	r0, r0, r3
   2f114:	bl	11544 <strcmp@plt>
   2f118:	cmp	r0, #0
   2f11c:	bne	2f12c <__assert_fail@plt+0x1d78c>
   2f120:	ldrb	r3, [r4, #88]	; 0x58
   2f124:	orr	r3, r3, #4
   2f128:	strb	r3, [r4, #88]	; 0x58
   2f12c:	ldrb	r3, [r4, #88]	; 0x58
   2f130:	ldr	r2, [r4, #92]	; 0x5c
   2f134:	bfc	r3, #3, #1
   2f138:	cmp	r2, #1
   2f13c:	strb	r3, [r4, #88]	; 0x58
   2f140:	ble	2f15c <__assert_fail@plt+0x1d7bc>
   2f144:	uxtb	sl, r3
   2f148:	ands	sl, sl, #4
   2f14c:	beq	2f8a8 <__assert_fail@plt+0x1df08>
   2f150:	movw	r3, #20932	; 0x51c4
   2f154:	movt	r3, #3
   2f158:	str	r3, [r4, #60]	; 0x3c
   2f15c:	ldr	r3, [r4]
   2f160:	cmp	r3, #0
   2f164:	beq	2f84c <__assert_fail@plt+0x1deac>
   2f168:	ldr	r3, [r4, #32]
   2f16c:	cmp	r3, #0
   2f170:	beq	2f84c <__assert_fail@plt+0x1deac>
   2f174:	mov	r1, #0
   2f178:	movw	r2, #0
   2f17c:	movt	r2, #0
   2f180:	mov	r3, #1
   2f184:	cmp	r2, r1
   2f188:	str	r1, [sp, #36]	; 0x24
   2f18c:	mov	r1, #1
   2f190:	moveq	r3, r2
   2f194:	movw	r2, #0
   2f198:	movt	r2, #0
   2f19c:	cmp	r2, #0
   2f1a0:	moveq	r1, r2
   2f1a4:	orr	r3, r3, r1
   2f1a8:	ands	r3, r3, #255	; 0xff
   2f1ac:	str	r3, [sp, #16]
   2f1b0:	beq	2f1d4 <__assert_fail@plt+0x1d834>
   2f1b4:	mov	r1, #0
   2f1b8:	add	r0, r4, #136	; 0x88
   2f1bc:	bl	115e0 <pthread_mutex_init@plt>
   2f1c0:	cmp	r0, #0
   2f1c4:	bne	2f84c <__assert_fail@plt+0x1deac>
   2f1c8:	ldr	r3, [sp, #36]	; 0x24
   2f1cc:	cmp	r3, #0
   2f1d0:	bne	2f854 <__assert_fail@plt+0x1deb4>
   2f1d4:	and	r3, r7, #4194304	; 0x400000
   2f1d8:	mov	r2, #76	; 0x4c
   2f1dc:	ldr	sl, [r6, #20]
   2f1e0:	mov	r1, #0
   2f1e4:	add	r0, sp, #64	; 0x40
   2f1e8:	mov	fp, r3
   2f1ec:	str	r3, [sp, #12]
   2f1f0:	bl	11814 <memset@plt>
   2f1f4:	ldrb	r3, [r4, #88]	; 0x58
   2f1f8:	adds	ip, fp, #0
   2f1fc:	orr	fp, sl, fp
   2f200:	movne	ip, #1
   2f204:	str	r8, [sp, #60]	; 0x3c
   2f208:	ldr	r1, [r4, #92]	; 0x5c
   2f20c:	adds	r2, fp, #0
   2f210:	movne	r2, #1
   2f214:	cmp	r5, #0
   2f218:	str	r5, [sp, #104]	; 0x68
   2f21c:	str	r5, [sp, #108]	; 0x6c
   2f220:	ubfx	r0, r3, #2, #1
   2f224:	str	r5, [sp, #112]	; 0x70
   2f228:	ubfx	r3, r3, #3, #1
   2f22c:	str	r5, [sp, #116]	; 0x74
   2f230:	str	sl, [sp, #124]	; 0x7c
   2f234:	strb	ip, [sp, #132]	; 0x84
   2f238:	strb	r0, [sp, #133]	; 0x85
   2f23c:	strb	r3, [sp, #134]	; 0x86
   2f240:	strb	r2, [sp, #135]	; 0x87
   2f244:	str	r1, [sp, #140]	; 0x8c
   2f248:	bne	2f888 <__assert_fail@plt+0x1dee8>
   2f24c:	cmp	r2, #0
   2f250:	ldr	r3, [sp, #12]
   2f254:	ldrne	r8, [sp, #64]	; 0x40
   2f258:	cmp	r3, #0
   2f25c:	str	r8, [sp, #64]	; 0x40
   2f260:	beq	2f32c <__assert_fail@plt+0x1d98c>
   2f264:	cmp	r1, #1
   2f268:	ble	302b8 <__assert_fail@plt+0x1e918>
   2f26c:	add	r0, sp, #60	; 0x3c
   2f270:	bl	1fb18 <__assert_fail@plt+0xe178>
   2f274:	cmp	r0, #0
   2f278:	bne	2f2b4 <__assert_fail@plt+0x1d914>
   2f27c:	ldr	r3, [sp, #92]	; 0x5c
   2f280:	cmp	r5, r3
   2f284:	ble	303e4 <__assert_fail@plt+0x1ea44>
   2f288:	ldr	r3, [sp, #88]	; 0x58
   2f28c:	ldr	r2, [r4, #92]	; 0x5c
   2f290:	ldr	r1, [sp, #96]	; 0x60
   2f294:	add	r3, r3, r2
   2f298:	cmp	r1, r3
   2f29c:	bgt	303e4 <__assert_fail@plt+0x1ea44>
   2f2a0:	lsl	r1, r1, #1
   2f2a4:	add	r0, sp, #60	; 0x3c
   2f2a8:	bl	1f734 <__assert_fail@plt+0xdd94>
   2f2ac:	cmp	r0, #0
   2f2b0:	beq	2f26c <__assert_fail@plt+0x1d8cc>
   2f2b4:	ldr	r5, [r6]
   2f2b8:	str	r0, [sp, #36]	; 0x24
   2f2bc:	ldr	r0, [r5, #56]	; 0x38
   2f2c0:	cmp	r0, #0
   2f2c4:	beq	2f2d8 <__assert_fail@plt+0x1d938>
   2f2c8:	ldr	r7, [r0]
   2f2cc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2f2d0:	subs	r0, r7, #0
   2f2d4:	bne	2f2c8 <__assert_fail@plt+0x1d928>
   2f2d8:	mov	r3, #31
   2f2dc:	mov	r7, #0
   2f2e0:	ldr	r0, [r5, #16]
   2f2e4:	str	r7, [r5, #52]	; 0x34
   2f2e8:	str	r7, [r5, #56]	; 0x38
   2f2ec:	str	r3, [r5, #64]	; 0x40
   2f2f0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2f2f4:	str	r7, [r5, #16]
   2f2f8:	ldr	r0, [sp, #68]	; 0x44
   2f2fc:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2f300:	ldr	r0, [sp, #72]	; 0x48
   2f304:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2f308:	ldrb	r3, [sp, #135]	; 0x87
   2f30c:	cmp	r3, r7
   2f310:	bne	30380 <__assert_fail@plt+0x1e9e0>
   2f314:	ldr	r3, [sp, #16]
   2f318:	cmp	r3, #0
   2f31c:	beq	2f854 <__assert_fail@plt+0x1deb4>
   2f320:	add	r0, r4, #136	; 0x88
   2f324:	bl	1155c <pthread_mutex_destroy@plt>
   2f328:	b	2f854 <__assert_fail@plt+0x1deb4>
   2f32c:	cmp	r1, #1
   2f330:	bgt	301bc <__assert_fail@plt+0x1e81c>
   2f334:	cmp	fp, #0
   2f338:	ldr	r1, [sp, #96]	; 0x60
   2f33c:	beq	2f958 <__assert_fail@plt+0x1dfb8>
   2f340:	ldr	r3, [sp, #88]	; 0x58
   2f344:	ldr	r2, [sp, #108]	; 0x6c
   2f348:	cmp	r1, r2
   2f34c:	movge	r1, r2
   2f350:	cmp	r1, r3
   2f354:	ble	30528 <__assert_fail@plt+0x1eb88>
   2f358:	ldr	r0, [sp, #60]	; 0x3c
   2f35c:	add	r2, r3, #1
   2f360:	cmp	r1, r2
   2f364:	ldr	lr, [sp, #84]	; 0x54
   2f368:	ldr	ip, [sp, #124]	; 0x7c
   2f36c:	add	r0, r0, r3
   2f370:	ldrb	r0, [r0, lr]
   2f374:	ldrb	r0, [ip, r0]
   2f378:	strb	r0, [r8, r3]
   2f37c:	ble	2f3ac <__assert_fail@plt+0x1da0c>
   2f380:	ldr	r3, [sp, #60]	; 0x3c
   2f384:	ldr	r0, [sp, #84]	; 0x54
   2f388:	ldr	ip, [sp, #124]	; 0x7c
   2f38c:	add	r3, r3, r2
   2f390:	ldrb	r0, [r3, r0]
   2f394:	ldr	r3, [sp, #64]	; 0x40
   2f398:	ldrb	r0, [ip, r0]
   2f39c:	strb	r0, [r3, r2]
   2f3a0:	add	r2, r2, #1
   2f3a4:	cmp	r1, r2
   2f3a8:	bne	2f380 <__assert_fail@plt+0x1d9e0>
   2f3ac:	mov	r3, #0
   2f3b0:	str	r3, [sp, #36]	; 0x24
   2f3b4:	str	r1, [sp, #88]	; 0x58
   2f3b8:	str	r1, [sp, #92]	; 0x5c
   2f3bc:	ldr	r5, [r6]
   2f3c0:	mov	r8, #0
   2f3c4:	orr	r2, r7, #8388608	; 0x800000
   2f3c8:	add	r1, sp, #60	; 0x3c
   2f3cc:	add	r0, sp, #40	; 0x28
   2f3d0:	str	r8, [r6, #24]
   2f3d4:	str	r7, [r5, #128]	; 0x80
   2f3d8:	bl	226b8 <__assert_fail@plt+0x10d18>
   2f3dc:	ldr	ip, [sp, #100]	; 0x64
   2f3e0:	add	r1, sp, #36	; 0x24
   2f3e4:	mov	r3, r7
   2f3e8:	add	r2, sp, #40	; 0x28
   2f3ec:	str	r8, [sp]
   2f3f0:	str	r1, [sp, #4]
   2f3f4:	mov	r1, r6
   2f3f8:	add	ip, ip, r0
   2f3fc:	add	r0, sp, #60	; 0x3c
   2f400:	str	ip, [sp, #100]	; 0x64
   2f404:	bl	2e420 <__assert_fail@plt+0x1ca80>
   2f408:	ldr	sl, [sp, #36]	; 0x24
   2f40c:	clz	r3, r0
   2f410:	mov	r9, r0
   2f414:	lsr	r3, r3, #5
   2f418:	cmp	sl, r8
   2f41c:	movne	sl, r3
   2f420:	moveq	sl, r8
   2f424:	cmp	sl, r8
   2f428:	bne	30540 <__assert_fail@plt+0x1eba0>
   2f42c:	mov	r2, #0
   2f430:	mov	r3, #0
   2f434:	strd	r2, [sp, #48]	; 0x30
   2f438:	ldr	r2, [r5, #64]	; 0x40
   2f43c:	cmp	r2, #31
   2f440:	beq	303b0 <__assert_fail@plt+0x1ea10>
   2f444:	ldr	r7, [r5, #56]	; 0x38
   2f448:	lsl	r3, r2, #5
   2f44c:	add	r2, r2, #1
   2f450:	add	r0, r3, #4
   2f454:	add	ip, r7, r3
   2f458:	mov	lr, #0
   2f45c:	str	r2, [r5, #64]	; 0x40
   2f460:	mov	r2, #2
   2f464:	add	r3, r3, #16
   2f468:	str	lr, [ip, #4]
   2f46c:	add	r1, r7, r3
   2f470:	adds	r7, r7, r0
   2f474:	str	lr, [ip, #8]
   2f478:	mvn	r0, #0
   2f47c:	moveq	r8, #1
   2f480:	str	lr, [ip, #12]
   2f484:	movne	r8, lr
   2f488:	cmp	r9, lr
   2f48c:	strb	r2, [sp, #52]	; 0x34
   2f490:	ldrd	r2, [sp, #48]	; 0x30
   2f494:	strd	r2, [ip, #24]
   2f498:	ldrb	r3, [r1, #14]
   2f49c:	bic	r3, r3, #12
   2f4a0:	strb	r3, [r1, #14]
   2f4a4:	str	lr, [ip, #16]
   2f4a8:	str	lr, [ip, #20]
   2f4ac:	str	r0, [ip, #32]
   2f4b0:	beq	2f544 <__assert_fail@plt+0x1dba4>
   2f4b4:	mov	r3, #0
   2f4b8:	mov	r2, #0
   2f4bc:	strd	r2, [sp, #48]	; 0x30
   2f4c0:	ldr	r3, [r5, #64]	; 0x40
   2f4c4:	cmp	r3, #31
   2f4c8:	beq	304dc <__assert_fail@plt+0x1eb3c>
   2f4cc:	ldr	r0, [r5, #56]	; 0x38
   2f4d0:	lsl	r1, r3, #5
   2f4d4:	add	r3, r3, #1
   2f4d8:	add	r2, r1, #4
   2f4dc:	add	ip, r0, r1
   2f4e0:	mov	lr, #0
   2f4e4:	str	r3, [r5, #64]	; 0x40
   2f4e8:	mov	r3, #16
   2f4ec:	mvn	r5, #0
   2f4f0:	add	r1, r1, r3
   2f4f4:	str	lr, [ip, #4]
   2f4f8:	str	r9, [ip, #8]
   2f4fc:	add	r1, r0, r1
   2f500:	add	r0, r0, r2
   2f504:	str	r7, [ip, #12]
   2f508:	cmp	r0, lr
   2f50c:	orreq	r8, r8, #1
   2f510:	cmp	r7, lr
   2f514:	strb	r3, [sp, #52]	; 0x34
   2f518:	ldrd	r2, [sp, #48]	; 0x30
   2f51c:	strd	r2, [ip, #24]
   2f520:	ldrb	r3, [r1, #14]
   2f524:	bic	r3, r3, #12
   2f528:	strb	r3, [r1, #14]
   2f52c:	str	lr, [ip, #16]
   2f530:	str	lr, [ip, #20]
   2f534:	str	r5, [ip, #32]
   2f538:	str	r0, [r9]
   2f53c:	strne	r0, [r7]
   2f540:	mov	r7, r0
   2f544:	cmp	r8, #0
   2f548:	ldr	r5, [r6]
   2f54c:	bne	3039c <__assert_fail@plt+0x1e9fc>
   2f550:	ldr	r0, [r5, #4]
   2f554:	str	r7, [r4, #52]	; 0x34
   2f558:	lsl	r0, r0, #2
   2f55c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2f560:	ldr	r3, [r5, #4]
   2f564:	str	r0, [r5, #12]
   2f568:	lsl	r0, r3, #2
   2f56c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2f570:	ldr	r3, [r5, #4]
   2f574:	str	r0, [r5, #16]
   2f578:	add	r3, r3, r3, lsl #1
   2f57c:	lsl	r0, r3, #2
   2f580:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2f584:	ldr	r3, [r5, #4]
   2f588:	str	r0, [r5, #20]
   2f58c:	add	r3, r3, r3, lsl #1
   2f590:	lsl	r0, r3, #2
   2f594:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2f598:	ldr	r3, [r5, #12]
   2f59c:	str	r0, [r5, #24]
   2f5a0:	cmp	r3, #0
   2f5a4:	beq	2f9b4 <__assert_fail@plt+0x1e014>
   2f5a8:	ldr	r3, [r5, #16]
   2f5ac:	cmp	r3, #0
   2f5b0:	beq	2f9b4 <__assert_fail@plt+0x1e014>
   2f5b4:	ldr	r3, [r5, #20]
   2f5b8:	cmp	r3, #0
   2f5bc:	beq	2f9b4 <__assert_fail@plt+0x1e014>
   2f5c0:	cmp	r0, #0
   2f5c4:	beq	2f9b4 <__assert_fail@plt+0x1e014>
   2f5c8:	ldr	r0, [r6, #24]
   2f5cc:	lsl	r0, r0, #2
   2f5d0:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2f5d4:	cmp	r0, #0
   2f5d8:	str	r0, [r5, #132]	; 0x84
   2f5dc:	beq	3023c <__assert_fail@plt+0x1e89c>
   2f5e0:	ldr	ip, [r6, #24]
   2f5e4:	cmp	ip, #0
   2f5e8:	beq	2f698 <__assert_fail@plt+0x1dcf8>
   2f5ec:	sub	r3, ip, #1
   2f5f0:	ubfx	r2, r0, #2, #1
   2f5f4:	cmp	r3, #4
   2f5f8:	bls	30510 <__assert_fail@plt+0x1eb70>
   2f5fc:	cmp	r2, #0
   2f600:	beq	30374 <__assert_fail@plt+0x1e9d4>
   2f604:	mov	r7, r2
   2f608:	mov	r9, #1
   2f60c:	str	r8, [r0]
   2f610:	sub	r8, ip, r2
   2f614:	add	r2, r0, r2, lsl #2
   2f618:	mov	lr, r9
   2f61c:	lsr	r3, r8, #1
   2f620:	add	r1, r9, #1
   2f624:	add	r3, r2, r3, lsl #3
   2f628:	add	r2, r2, #8
   2f62c:	str	lr, [r2, #-8]
   2f630:	add	lr, lr, #2
   2f634:	str	r1, [r2, #-4]
   2f638:	cmp	r3, r2
   2f63c:	add	r1, r1, #2
   2f640:	bne	2f628 <__assert_fail@plt+0x1dc88>
   2f644:	bic	r3, r8, #1
   2f648:	cmp	r3, r8
   2f64c:	add	r7, r3, r7
   2f650:	add	r3, r3, r9
   2f654:	beq	2f698 <__assert_fail@plt+0x1dcf8>
   2f658:	add	r2, r3, #1
   2f65c:	str	r3, [r0, r7, lsl #2]
   2f660:	cmp	ip, r2
   2f664:	bls	2f698 <__assert_fail@plt+0x1dcf8>
   2f668:	add	r1, r3, #2
   2f66c:	str	r2, [r0, r2, lsl #2]
   2f670:	cmp	ip, r1
   2f674:	bls	2f698 <__assert_fail@plt+0x1dcf8>
   2f678:	add	r2, r3, #3
   2f67c:	str	r1, [r0, r1, lsl #2]
   2f680:	cmp	ip, r2
   2f684:	bls	2f698 <__assert_fail@plt+0x1dcf8>
   2f688:	add	r3, r3, #4
   2f68c:	str	r2, [r0, r2, lsl #2]
   2f690:	cmp	ip, r3
   2f694:	strhi	r3, [r0, r3, lsl #2]
   2f698:	ldr	r2, [r5, #52]	; 0x34
   2f69c:	mov	r8, #1
   2f6a0:	ldrb	r1, [r2, #24]
   2f6a4:	mov	lr, r2
   2f6a8:	ldr	r3, [r2, #4]
   2f6ac:	b	2f6d0 <__assert_fail@plt+0x1dd30>
   2f6b0:	cmp	r1, #17
   2f6b4:	beq	2f968 <__assert_fail@plt+0x1dfc8>
   2f6b8:	cmp	r3, #0
   2f6bc:	beq	2f6f8 <__assert_fail@plt+0x1dd58>
   2f6c0:	ldrb	r1, [r3, #24]
   2f6c4:	ldr	r7, [r3, #4]
   2f6c8:	mov	lr, r3
   2f6cc:	mov	r3, r7
   2f6d0:	cmp	r1, #4
   2f6d4:	bne	2f6b0 <__assert_fail@plt+0x1dd10>
   2f6d8:	ldr	r7, [lr, #20]
   2f6dc:	cmp	r3, #0
   2f6e0:	ldr	r1, [r5, #80]	; 0x50
   2f6e4:	ldr	r7, [r0, r7, lsl #2]
   2f6e8:	orr	r1, r1, r8, lsl r7
   2f6ec:	str	r7, [lr, #20]
   2f6f0:	str	r1, [r5, #80]	; 0x50
   2f6f4:	bne	2f6c0 <__assert_fail@plt+0x1dd20>
   2f6f8:	mov	r1, #0
   2f6fc:	b	2f704 <__assert_fail@plt+0x1dd64>
   2f700:	mov	lr, r3
   2f704:	ldr	r3, [lr, #8]
   2f708:	cmp	r3, r1
   2f70c:	cmpne	r3, #0
   2f710:	bne	2f6c0 <__assert_fail@plt+0x1dd20>
   2f714:	ldr	r3, [lr]
   2f718:	mov	r1, lr
   2f71c:	cmp	r3, #0
   2f720:	bne	2f700 <__assert_fail@plt+0x1dd60>
   2f724:	cmp	ip, #0
   2f728:	beq	2f758 <__assert_fail@plt+0x1ddb8>
   2f72c:	ldr	r3, [r0]
   2f730:	cmp	r3, #0
   2f734:	bne	2f768 <__assert_fail@plt+0x1ddc8>
   2f738:	mov	r1, r0
   2f73c:	b	2f74c <__assert_fail@plt+0x1ddac>
   2f740:	ldr	lr, [r1, #4]!
   2f744:	cmp	lr, r3
   2f748:	bne	2f768 <__assert_fail@plt+0x1ddc8>
   2f74c:	add	r3, r3, #1
   2f750:	cmp	r3, ip
   2f754:	bne	2f740 <__assert_fail@plt+0x1dda0>
   2f758:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2f75c:	ldr	r2, [r5, #52]	; 0x34
   2f760:	mov	r3, #0
   2f764:	str	r3, [r5, #132]	; 0x84
   2f768:	mov	r7, #0
   2f76c:	mov	r8, r2
   2f770:	ldr	r3, [r8, #4]
   2f774:	cmp	r3, #0
   2f778:	beq	2f78c <__assert_fail@plt+0x1ddec>
   2f77c:	mov	r8, r3
   2f780:	ldr	r3, [r8, #4]
   2f784:	cmp	r3, #0
   2f788:	bne	2f77c <__assert_fail@plt+0x1dddc>
   2f78c:	ldr	r2, [r8, #8]
   2f790:	cmp	r2, #0
   2f794:	bne	2f76c <__assert_fail@plt+0x1ddcc>
   2f798:	mov	r3, r2
   2f79c:	b	2f7e4 <__assert_fail@plt+0x1de44>
   2f7a0:	cmp	r3, #0
   2f7a4:	beq	2f7c0 <__assert_fail@plt+0x1de20>
   2f7a8:	ldrb	r2, [r3, #24]
   2f7ac:	cmp	r2, #17
   2f7b0:	beq	2f82c <__assert_fail@plt+0x1de8c>
   2f7b4:	ldr	r3, [sp, #48]	; 0x30
   2f7b8:	cmp	r3, #0
   2f7bc:	bne	3017c <__assert_fail@plt+0x1e7dc>
   2f7c0:	ldr	r2, [r8]
   2f7c4:	cmp	r2, #0
   2f7c8:	beq	2f9c4 <__assert_fail@plt+0x1e024>
   2f7cc:	ldr	r3, [r2, #8]
   2f7d0:	cmp	r3, #0
   2f7d4:	cmpne	r8, r3
   2f7d8:	bne	303dc <__assert_fail@plt+0x1ea3c>
   2f7dc:	mov	r8, r2
   2f7e0:	ldr	r2, [r2, #4]
   2f7e4:	cmp	r2, #0
   2f7e8:	str	r7, [sp, #48]	; 0x30
   2f7ec:	beq	2f7a0 <__assert_fail@plt+0x1de00>
   2f7f0:	ldrb	r1, [r2, #24]
   2f7f4:	cmp	r1, #17
   2f7f8:	bne	2f7a0 <__assert_fail@plt+0x1de00>
   2f7fc:	mov	r1, r6
   2f800:	add	r0, sp, #48	; 0x30
   2f804:	bl	276e8 <__assert_fail@plt+0x15d48>
   2f808:	ldr	r3, [r8, #8]
   2f80c:	cmp	r0, #0
   2f810:	str	r0, [r8, #4]
   2f814:	strne	r8, [r0]
   2f818:	cmp	r3, #0
   2f81c:	beq	2f7b4 <__assert_fail@plt+0x1de14>
   2f820:	ldrb	r2, [r3, #24]
   2f824:	cmp	r2, #17
   2f828:	bne	2f7b4 <__assert_fail@plt+0x1de14>
   2f82c:	mov	r2, r3
   2f830:	mov	r1, r6
   2f834:	add	r0, sp, #48	; 0x30
   2f838:	bl	276e8 <__assert_fail@plt+0x15d48>
   2f83c:	cmp	r0, #0
   2f840:	str	r0, [r8, #8]
   2f844:	strne	r8, [r0]
   2f848:	b	2f7b4 <__assert_fail@plt+0x1de14>
   2f84c:	mov	r3, #12
   2f850:	str	r3, [sp, #36]	; 0x24
   2f854:	mov	r0, r4
   2f858:	bl	23ac4 <__assert_fail@plt+0x12124>
   2f85c:	ldr	r0, [sp, #36]	; 0x24
   2f860:	mov	r3, #0
   2f864:	str	r3, [r6]
   2f868:	str	r3, [r6, #4]
   2f86c:	add	sp, sp, #148	; 0x94
   2f870:	ldrd	r4, [sp]
   2f874:	ldrd	r6, [sp, #8]
   2f878:	ldrd	r8, [sp, #16]
   2f87c:	ldrd	sl, [sp, #24]
   2f880:	add	sp, sp, #32
   2f884:	pop	{pc}		; (ldr pc, [sp], #4)
   2f888:	mov	r1, r9
   2f88c:	add	r0, sp, #60	; 0x3c
   2f890:	bl	1f734 <__assert_fail@plt+0xdd94>
   2f894:	cmp	r0, #0
   2f898:	bne	2f2b4 <__assert_fail@plt+0x1d914>
   2f89c:	ldrb	r2, [sp, #135]	; 0x87
   2f8a0:	ldr	r1, [r4, #92]	; 0x5c
   2f8a4:	b	2f24c <__assert_fail@plt+0x1d8ac>
   2f8a8:	mov	r1, #1
   2f8ac:	mov	r0, #32
   2f8b0:	bl	1ecd8 <__assert_fail@plt+0xd338>
   2f8b4:	cmp	r0, #0
   2f8b8:	str	r0, [r4, #60]	; 0x3c
   2f8bc:	beq	2f84c <__assert_fail@plt+0x1deac>
   2f8c0:	str	r5, [sp, #12]
   2f8c4:	mov	r5, r4
   2f8c8:	lsl	fp, sl, #3
   2f8cc:	mov	r4, #0
   2f8d0:	b	2f8f8 <__assert_fail@plt+0x1df58>
   2f8d4:	cmp	r3, #0
   2f8d8:	bne	2f8e8 <__assert_fail@plt+0x1df48>
   2f8dc:	ldrb	r3, [r5, #88]	; 0x58
   2f8e0:	orr	r3, r3, #8
   2f8e4:	strb	r3, [r5, #88]	; 0x58
   2f8e8:	add	r4, r4, #1
   2f8ec:	add	fp, fp, #1
   2f8f0:	cmp	r4, #32
   2f8f4:	beq	2f940 <__assert_fail@plt+0x1dfa0>
   2f8f8:	mov	r0, fp
   2f8fc:	bl	1182c <btowc@plt>
   2f900:	cmn	r0, #1
   2f904:	bic	r3, fp, #127	; 0x7f
   2f908:	beq	2f8d4 <__assert_fail@plt+0x1df34>
   2f90c:	ldr	r1, [r5, #60]	; 0x3c
   2f910:	cmp	r3, #0
   2f914:	mov	r2, #1
   2f918:	ldr	r3, [r1, sl]
   2f91c:	orr	r3, r3, r2, lsl r4
   2f920:	str	r3, [r1, sl]
   2f924:	bne	2f8e8 <__assert_fail@plt+0x1df48>
   2f928:	cmp	r0, fp
   2f92c:	bne	2f8dc <__assert_fail@plt+0x1df3c>
   2f930:	add	r4, r4, #1
   2f934:	add	fp, fp, #1
   2f938:	cmp	r4, #32
   2f93c:	bne	2f8f8 <__assert_fail@plt+0x1df58>
   2f940:	add	sl, sl, #4
   2f944:	cmp	sl, #32
   2f948:	bne	2f8c8 <__assert_fail@plt+0x1df28>
   2f94c:	mov	r4, r5
   2f950:	ldr	r5, [sp, #12]
   2f954:	b	2f15c <__assert_fail@plt+0x1d7bc>
   2f958:	str	r3, [sp, #36]	; 0x24
   2f95c:	str	r1, [sp, #88]	; 0x58
   2f960:	str	r1, [sp, #92]	; 0x5c
   2f964:	b	2f3bc <__assert_fail@plt+0x1da1c>
   2f968:	cmp	r3, #0
   2f96c:	beq	2f6f8 <__assert_fail@plt+0x1dd58>
   2f970:	ldrb	r1, [r3, #24]
   2f974:	ldr	r7, [r3, #4]
   2f978:	cmp	r1, #17
   2f97c:	bne	2f6c8 <__assert_fail@plt+0x1dd28>
   2f980:	ldr	r1, [r3, #20]
   2f984:	cmp	r7, #0
   2f988:	str	r7, [lr, #4]
   2f98c:	ldr	r3, [lr, #20]
   2f990:	strne	lr, [r7]
   2f994:	cmp	r1, #31
   2f998:	ldrle	r9, [r5, #80]	; 0x50
   2f99c:	ldr	r3, [r0, r3, lsl #2]
   2f9a0:	str	r3, [r0, r1, lsl #2]
   2f9a4:	bicle	r1, r9, r8, lsl r1
   2f9a8:	mov	r3, r7
   2f9ac:	strle	r1, [r5, #80]	; 0x50
   2f9b0:	b	2f6b8 <__assert_fail@plt+0x1dd18>
   2f9b4:	mov	r3, #12
   2f9b8:	ldr	r5, [r6]
   2f9bc:	str	r3, [sp, #36]	; 0x24
   2f9c0:	b	2f2bc <__assert_fail@plt+0x1d91c>
   2f9c4:	ldr	r3, [r5, #52]	; 0x34
   2f9c8:	mov	r7, r3
   2f9cc:	ldr	r3, [r3, #4]
   2f9d0:	cmp	r3, #0
   2f9d4:	bne	2f9c8 <__assert_fail@plt+0x1e028>
   2f9d8:	ldr	r3, [r7, #8]
   2f9dc:	cmp	r3, #0
   2f9e0:	bne	2f9c8 <__assert_fail@plt+0x1e028>
   2f9e4:	b	2fa2c <__assert_fail@plt+0x1e08c>
   2f9e8:	ldr	r3, [r7, #4]
   2f9ec:	ldr	r2, [r3, #12]
   2f9f0:	ldr	r3, [r3, #28]
   2f9f4:	str	r2, [r7, #12]
   2f9f8:	str	r3, [r7, #28]
   2f9fc:	ldr	r1, [r7]
   2fa00:	cmp	r1, #0
   2fa04:	beq	2fa88 <__assert_fail@plt+0x1e0e8>
   2fa08:	ldr	r3, [r1, #8]
   2fa0c:	sub	r2, r7, r3
   2fa10:	cmp	r3, #0
   2fa14:	clz	r2, r2
   2fa18:	mov	r7, r1
   2fa1c:	lsr	r2, r2, #5
   2fa20:	moveq	r2, #1
   2fa24:	cmp	r2, #0
   2fa28:	beq	2f9c8 <__assert_fail@plt+0x1e028>
   2fa2c:	ldrb	r3, [r7, #24]
   2fa30:	cmp	r3, #16
   2fa34:	beq	2f9e8 <__assert_fail@plt+0x1e048>
   2fa38:	add	r3, r7, #20
   2fa3c:	mov	r0, r5
   2fa40:	ldm	r3, {r1, r2}
   2fa44:	str	r7, [r7, #12]
   2fa48:	bl	20194 <__assert_fail@plt+0xe7f4>
   2fa4c:	cmn	r0, #1
   2fa50:	str	r0, [r7, #28]
   2fa54:	beq	301a8 <__assert_fail@plt+0x1e808>
   2fa58:	ldrb	r3, [r7, #24]
   2fa5c:	cmp	r3, #12
   2fa60:	bne	2f9fc <__assert_fail@plt+0x1e05c>
   2fa64:	ldr	r3, [r5]
   2fa68:	ldr	r2, [r7, #20]
   2fa6c:	add	r0, r3, r0, lsl #3
   2fa70:	ldr	r3, [r0, #4]
   2fa74:	bfi	r3, r2, #8, #10
   2fa78:	str	r3, [r0, #4]
   2fa7c:	ldr	r1, [r7]
   2fa80:	cmp	r1, #0
   2fa84:	bne	2fa08 <__assert_fail@plt+0x1e068>
   2fa88:	ldr	fp, [r5, #52]	; 0x34
   2fa8c:	mov	r3, fp
   2fa90:	b	2fabc <__assert_fail@plt+0x1e11c>
   2fa94:	cmp	r2, #0
   2fa98:	ldr	r1, [r3, #8]
   2fa9c:	beq	2faf4 <__assert_fail@plt+0x1e154>
   2faa0:	ldr	r0, [r3, #16]
   2faa4:	cmp	r1, #0
   2faa8:	str	r0, [r2, #16]
   2faac:	beq	2fab8 <__assert_fail@plt+0x1e118>
   2fab0:	ldr	r3, [r3, #16]
   2fab4:	str	r3, [r1, #16]
   2fab8:	mov	r3, r2
   2fabc:	ldrb	r1, [r3, #24]
   2fac0:	ldr	r2, [r3, #4]
   2fac4:	cmp	r1, #11
   2fac8:	beq	2faec <__assert_fail@plt+0x1e14c>
   2facc:	cmp	r1, #16
   2fad0:	bne	2fa94 <__assert_fail@plt+0x1e0f4>
   2fad4:	ldr	r1, [r3, #8]
   2fad8:	ldr	r0, [r1, #12]
   2fadc:	str	r0, [r2, #16]
   2fae0:	ldr	r3, [r3, #16]
   2fae4:	str	r3, [r1, #16]
   2fae8:	b	2fab8 <__assert_fail@plt+0x1e118>
   2faec:	str	r3, [r2, #16]
   2faf0:	b	2fab8 <__assert_fail@plt+0x1e118>
   2faf4:	cmp	r1, #0
   2faf8:	beq	2fb0c <__assert_fail@plt+0x1e16c>
   2fafc:	ldr	r3, [r3, #16]
   2fb00:	mov	r2, r1
   2fb04:	str	r3, [r1, #16]
   2fb08:	b	2fab8 <__assert_fail@plt+0x1e118>
   2fb0c:	ldr	r1, [r3]
   2fb10:	cmp	r1, #0
   2fb14:	bne	2fb20 <__assert_fail@plt+0x1e180>
   2fb18:	b	2fb40 <__assert_fail@plt+0x1e1a0>
   2fb1c:	mov	r1, r2
   2fb20:	ldr	r2, [r1, #8]
   2fb24:	cmp	r2, #0
   2fb28:	cmpne	r2, r3
   2fb2c:	bne	2fab8 <__assert_fail@plt+0x1e118>
   2fb30:	ldr	r2, [r1]
   2fb34:	mov	r3, r1
   2fb38:	cmp	r2, #0
   2fb3c:	bne	2fb1c <__assert_fail@plt+0x1e17c>
   2fb40:	mov	r7, #1
   2fb44:	mov	r9, #2
   2fb48:	str	r4, [sp, #20]
   2fb4c:	ldrb	r2, [fp, #24]
   2fb50:	ldr	r3, [fp, #28]
   2fb54:	sub	r2, r2, #2
   2fb58:	cmp	r2, #14
   2fb5c:	ldrls	pc, [pc, r2, lsl #2]
   2fb60:	b	2fd14 <__assert_fail@plt+0x1e374>
   2fb64:	andeq	pc, r2, r8, lsl ip	; <UNPREDICTABLE>
   2fb68:	andeq	pc, r2, r4, lsl sp	; <UNPREDICTABLE>
   2fb6c:	andeq	pc, r2, r8, ror #25
   2fb70:	andeq	pc, r2, r4, lsl sp	; <UNPREDICTABLE>
   2fb74:	andeq	pc, r2, r4, lsl sp	; <UNPREDICTABLE>
   2fb78:	andeq	pc, r2, r4, lsl sp	; <UNPREDICTABLE>
   2fb7c:			; <UNDEFINED> instruction: 0x0002fcb0
   2fb80:			; <UNDEFINED> instruction: 0x0002fcb0
   2fb84:	andeq	pc, r2, r0, lsr #23
   2fb88:	andeq	pc, r2, r0, lsr #23
   2fb8c:			; <UNDEFINED> instruction: 0x0002fcb0
   2fb90:	andeq	pc, r2, r4, lsl sp	; <UNPREDICTABLE>
   2fb94:	andeq	pc, r2, r4, lsl sp	; <UNPREDICTABLE>
   2fb98:	andeq	pc, r2, r4, lsl sp	; <UNPREDICTABLE>
   2fb9c:	andeq	pc, r2, r8, lsl ip	; <UNPREDICTABLE>
   2fba0:	ldrb	r2, [r5, #88]	; 0x58
   2fba4:	add	r3, r3, r3, lsl #1
   2fba8:	mov	r0, #8
   2fbac:	orr	r2, r2, #1
   2fbb0:	strb	r2, [r5, #88]	; 0x58
   2fbb4:	ldr	r2, [fp, #4]
   2fbb8:	cmp	r2, #0
   2fbbc:	ldrne	r2, [r2, #12]
   2fbc0:	ldreq	r2, [fp, #16]
   2fbc4:	ldr	sl, [r2, #28]
   2fbc8:	ldr	r2, [fp, #8]
   2fbcc:	cmp	r2, #0
   2fbd0:	ldrne	r2, [r2, #12]
   2fbd4:	ldreq	r2, [fp, #16]
   2fbd8:	ldr	r4, [r2, #28]
   2fbdc:	ldr	r2, [r5, #20]
   2fbe0:	add	r8, r2, r3, lsl #2
   2fbe4:	str	r9, [r2, r3, lsl #2]
   2fbe8:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2fbec:	cmp	r0, #0
   2fbf0:	str	r0, [r8, #8]
   2fbf4:	beq	301a4 <__assert_fail@plt+0x1e804>
   2fbf8:	cmp	sl, r4
   2fbfc:	streq	r7, [r8, #4]
   2fc00:	streq	sl, [r0]
   2fc04:	beq	2fc18 <__assert_fail@plt+0x1e278>
   2fc08:	str	r9, [r8, #4]
   2fc0c:	strlt	sl, [r0]
   2fc10:	strlt	r4, [r0, #4]
   2fc14:	stmge	r0, {r4, sl}
   2fc18:	ldr	r3, [fp, #4]
   2fc1c:	cmp	r3, #0
   2fc20:	beq	2fc30 <__assert_fail@plt+0x1e290>
   2fc24:	mov	fp, r3
   2fc28:	b	2fb4c <__assert_fail@plt+0x1e1ac>
   2fc2c:	mov	fp, r8
   2fc30:	ldr	r2, [fp, #8]
   2fc34:	sub	r3, r2, r3
   2fc38:	cmp	r2, #0
   2fc3c:	clz	r3, r3
   2fc40:	moveq	sl, #1
   2fc44:	lsr	r3, r3, #5
   2fc48:	movne	sl, r3
   2fc4c:	cmp	sl, #0
   2fc50:	beq	302b0 <__assert_fail@plt+0x1e910>
   2fc54:	ldr	r8, [fp]
   2fc58:	mov	r3, fp
   2fc5c:	cmp	r8, #0
   2fc60:	bne	2fc2c <__assert_fail@plt+0x1e28c>
   2fc64:	ldr	r4, [sp, #20]
   2fc68:	mov	fp, r8
   2fc6c:	mov	r7, r8
   2fc70:	ldr	r2, [r5, #24]
   2fc74:	add	r9, r7, r7, lsl #1
   2fc78:	lsl	r9, r9, #2
   2fc7c:	add	r3, r2, r9
   2fc80:	ldr	r3, [r3, #4]
   2fc84:	cmp	r3, #0
   2fc88:	beq	2fd60 <__assert_fail@plt+0x1e3c0>
   2fc8c:	ldr	r3, [r5, #8]
   2fc90:	add	r7, r7, #1
   2fc94:	cmp	r3, r7
   2fc98:	bne	2fc74 <__assert_fail@plt+0x1e2d4>
   2fc9c:	cmp	fp, #0
   2fca0:	beq	2fd9c <__assert_fail@plt+0x1e3fc>
   2fca4:	mov	fp, #0
   2fca8:	mov	r7, fp
   2fcac:	b	2fc74 <__assert_fail@plt+0x1e2d4>
   2fcb0:	ldr	r1, [fp, #16]
   2fcb4:	add	r3, r3, r3, lsl #1
   2fcb8:	mov	r0, #4
   2fcbc:	ldr	r2, [r5, #20]
   2fcc0:	ldr	r8, [r1, #28]
   2fcc4:	add	sl, r2, r3, lsl #2
   2fcc8:	str	r7, [r2, r3, lsl #2]
   2fccc:	str	r7, [sl, #4]
   2fcd0:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2fcd4:	cmp	r0, #0
   2fcd8:	str	r0, [sl, #8]
   2fcdc:	beq	304c8 <__assert_fail@plt+0x1eb28>
   2fce0:	str	r8, [r0]
   2fce4:	b	2fc18 <__assert_fail@plt+0x1e278>
   2fce8:	ldr	r1, [fp, #16]
   2fcec:	ldr	r2, [r5, #12]
   2fcf0:	ldr	r8, [r1, #28]
   2fcf4:	str	r8, [r2, r3, lsl #2]
   2fcf8:	ldrb	r0, [fp, #24]
   2fcfc:	cmp	r0, #4
   2fd00:	bne	2fc18 <__assert_fail@plt+0x1e278>
   2fd04:	ldr	r2, [r5, #20]
   2fd08:	add	r3, r3, r3, lsl #1
   2fd0c:	add	sl, r2, r3, lsl #2
   2fd10:	b	2fcc8 <__assert_fail@plt+0x1e328>
   2fd14:	ldr	r1, [fp, #16]
   2fd18:	ldr	r2, [r5, #12]
   2fd1c:	ldr	r1, [r1, #28]
   2fd20:	str	r1, [r2, r3, lsl #2]
   2fd24:	b	2fc18 <__assert_fail@plt+0x1e278>
   2fd28:	ldr	r0, [sp, #56]	; 0x38
   2fd2c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   2fd30:	ldr	r3, [r5, #8]
   2fd34:	cmp	r3, r7
   2fd38:	moveq	fp, r9
   2fd3c:	moveq	r7, fp
   2fd40:	movne	fp, sl
   2fd44:	ldr	r2, [r5, #24]
   2fd48:	add	r9, r7, r7, lsl #1
   2fd4c:	lsl	r9, r9, #2
   2fd50:	add	r1, r2, r9
   2fd54:	ldr	r1, [r1, #4]
   2fd58:	cmp	r1, #0
   2fd5c:	bne	2fc90 <__assert_fail@plt+0x1e2f0>
   2fd60:	mov	r3, #1
   2fd64:	mov	r2, r7
   2fd68:	mov	r1, r5
   2fd6c:	add	r0, sp, #48	; 0x30
   2fd70:	bl	24cdc <__assert_fail@plt+0x1333c>
   2fd74:	cmp	r0, #0
   2fd78:	bne	30178 <__assert_fail@plt+0x1e7d8>
   2fd7c:	ldr	r2, [r5, #24]
   2fd80:	add	r7, r7, #1
   2fd84:	add	r9, r2, r9
   2fd88:	ldr	r9, [r9, #4]
   2fd8c:	cmp	r9, #0
   2fd90:	beq	2fd28 <__assert_fail@plt+0x1e388>
   2fd94:	ldr	r3, [r5, #8]
   2fd98:	b	2fc94 <__assert_fail@plt+0x1e2f4>
   2fd9c:	ldrb	r3, [r6, #28]
   2fda0:	tst	r3, #16
   2fda4:	bne	2fdc0 <__assert_fail@plt+0x1e420>
   2fda8:	ldr	r3, [r6, #24]
   2fdac:	cmp	r3, #0
   2fdb0:	beq	2fdc0 <__assert_fail@plt+0x1e420>
   2fdb4:	ldrb	r3, [r5, #88]	; 0x58
   2fdb8:	tst	r3, #1
   2fdbc:	bne	2fdcc <__assert_fail@plt+0x1e42c>
   2fdc0:	ldr	r3, [r5, #76]	; 0x4c
   2fdc4:	cmp	r3, #0
   2fdc8:	beq	2fef0 <__assert_fail@plt+0x1e550>
   2fdcc:	add	r7, r7, r7, lsl #1
   2fdd0:	lsl	r0, r7, #2
   2fdd4:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2fdd8:	cmp	r0, #0
   2fddc:	str	r0, [r5, #28]
   2fde0:	beq	2f9b4 <__assert_fail@plt+0x1e014>
   2fde4:	ldr	r3, [r5, #8]
   2fde8:	cmp	r3, #0
   2fdec:	movne	r3, #0
   2fdf0:	movne	r2, r3
   2fdf4:	bne	2fe00 <__assert_fail@plt+0x1e460>
   2fdf8:	b	2fef0 <__assert_fail@plt+0x1e550>
   2fdfc:	ldr	r0, [r5, #28]
   2fe00:	add	ip, r3, r3, lsl #1
   2fe04:	add	r3, r3, #1
   2fe08:	add	r1, r0, ip, lsl #2
   2fe0c:	str	r2, [r0, ip, lsl #2]
   2fe10:	str	r2, [r1, #4]
   2fe14:	str	r2, [r1, #8]
   2fe18:	ldr	r1, [r5, #8]
   2fe1c:	cmp	r1, r3
   2fe20:	bhi	2fdfc <__assert_fail@plt+0x1e45c>
   2fe24:	cmp	r1, #0
   2fe28:	beq	2fef0 <__assert_fail@plt+0x1e550>
   2fe2c:	ldr	ip, [r5, #24]
   2fe30:	mov	r3, #0
   2fe34:	mov	sl, r3
   2fe38:	str	r4, [sp, #20]
   2fe3c:	mov	r4, r3
   2fe40:	str	r8, [sp, #24]
   2fe44:	str	fp, [sp, #28]
   2fe48:	add	fp, ip, r4
   2fe4c:	ldmib	fp, {r3, r9}
   2fe50:	cmp	r3, #0
   2fe54:	ble	2fed8 <__assert_fail@plt+0x1e538>
   2fe58:	sub	r9, r9, #4
   2fe5c:	mov	r8, #0
   2fe60:	b	2fe80 <__assert_fail@plt+0x1e4e0>
   2fe64:	add	r3, r1, #1
   2fe68:	add	r8, r8, #1
   2fe6c:	str	r3, [r7, #4]
   2fe70:	str	sl, [r0, r1, lsl #2]
   2fe74:	ldr	r3, [fp, #4]
   2fe78:	cmp	r8, r3
   2fe7c:	bge	2fed4 <__assert_fail@plt+0x1e534>
   2fe80:	ldr	r3, [r9, #4]!
   2fe84:	ldr	r2, [r5, #28]
   2fe88:	add	r3, r3, r3, lsl #1
   2fe8c:	add	r7, r2, r3, lsl #2
   2fe90:	ldr	lr, [r2, r3, lsl #2]
   2fe94:	ldr	r1, [r7, #4]
   2fe98:	ldr	r0, [r7, #8]
   2fe9c:	cmp	lr, r1
   2fea0:	bne	2fe64 <__assert_fail@plt+0x1e4c4>
   2fea4:	add	r1, r1, #1
   2fea8:	lsl	ip, r1, #1
   2feac:	lsl	r1, r1, #3
   2feb0:	str	ip, [r2, r3, lsl #2]
   2feb4:	bl	1f170 <__assert_fail@plt+0xd7d0>
   2feb8:	cmp	r0, #0
   2febc:	beq	301a4 <__assert_fail@plt+0x1e804>
   2fec0:	ldr	ip, [r5, #24]
   2fec4:	str	r0, [r7, #8]
   2fec8:	ldr	r1, [r7, #4]
   2fecc:	add	fp, ip, r4
   2fed0:	b	2fe64 <__assert_fail@plt+0x1e4c4>
   2fed4:	ldr	r1, [r5, #8]
   2fed8:	add	sl, sl, #1
   2fedc:	add	r4, r4, #12
   2fee0:	cmp	sl, r1
   2fee4:	bcc	2fe48 <__assert_fail@plt+0x1e4a8>
   2fee8:	add	r4, sp, #20
   2feec:	ldm	r4, {r4, r8, fp}
   2fef0:	mov	r1, #0
   2fef4:	str	r1, [sp, #36]	; 0x24
   2fef8:	ldr	r3, [sp, #12]
   2fefc:	ldrb	r2, [r4, #88]	; 0x58
   2ff00:	clz	r3, r3
   2ff04:	lsr	r3, r3, #5
   2ff08:	ands	r3, r3, r2, lsr #2
   2ff0c:	bne	301d0 <__assert_fail@plt+0x1e830>
   2ff10:	ldr	r7, [r4, #24]
   2ff14:	ldr	r3, [r4, #52]	; 0x34
   2ff18:	ldr	r3, [r3, #12]
   2ff1c:	ldr	r3, [r3, #28]
   2ff20:	add	r2, r3, r3, lsl #1
   2ff24:	str	r3, [r4, #72]	; 0x48
   2ff28:	add	r7, r7, r2, lsl #2
   2ff2c:	ldr	r3, [r7, #4]
   2ff30:	cmp	r3, #0
   2ff34:	str	r3, [sp, #52]	; 0x34
   2ff38:	ble	30188 <__assert_fail@plt+0x1e7e8>
   2ff3c:	lsl	r0, r3, #2
   2ff40:	str	r3, [sp, #48]	; 0x30
   2ff44:	bl	1f0c4 <__assert_fail@plt+0xd724>
   2ff48:	cmp	r0, #0
   2ff4c:	mov	r8, r0
   2ff50:	str	r0, [sp, #56]	; 0x38
   2ff54:	beq	30508 <__assert_fail@plt+0x1eb68>
   2ff58:	ldr	r2, [r7, #4]
   2ff5c:	add	r5, sp, #48	; 0x30
   2ff60:	ldr	r1, [r7, #8]
   2ff64:	lsl	r2, r2, #2
   2ff68:	bl	115d4 <memcpy@plt>
   2ff6c:	mov	r3, #0
   2ff70:	str	r3, [sp, #40]	; 0x28
   2ff74:	ldr	r3, [r4, #76]	; 0x4c
   2ff78:	cmp	r3, #0
   2ff7c:	ble	300a8 <__assert_fail@plt+0x1e708>
   2ff80:	ldr	r7, [sp, #52]	; 0x34
   2ff84:	cmp	r7, #0
   2ff88:	ble	300a8 <__assert_fail@plt+0x1e708>
   2ff8c:	mov	ip, #0
   2ff90:	b	2ffa4 <__assert_fail@plt+0x1e604>
   2ff94:	add	ip, ip, #1
   2ff98:	cmp	r7, ip
   2ff9c:	ble	300a8 <__assert_fail@plt+0x1e708>
   2ffa0:	ldr	r8, [sp, #56]	; 0x38
   2ffa4:	ldr	r3, [r8, ip, lsl #2]
   2ffa8:	ldr	r0, [r4]
   2ffac:	add	r9, r0, r3, lsl #3
   2ffb0:	ldrb	r2, [r9, #4]
   2ffb4:	cmp	r2, #4
   2ffb8:	bne	2ff94 <__assert_fail@plt+0x1e5f4>
   2ffbc:	sub	lr, r8, #4
   2ffc0:	mov	r1, #0
   2ffc4:	b	2ffd4 <__assert_fail@plt+0x1e634>
   2ffc8:	add	r1, r1, #1
   2ffcc:	cmp	r7, r1
   2ffd0:	beq	2ff94 <__assert_fail@plt+0x1e5f4>
   2ffd4:	ldr	r2, [lr, #4]!
   2ffd8:	add	sl, r0, r2, lsl #3
   2ffdc:	ldrb	sl, [sl, #4]
   2ffe0:	cmp	sl, #9
   2ffe4:	bne	2ffc8 <__assert_fail@plt+0x1e628>
   2ffe8:	ldr	sl, [r0, r2, lsl #3]
   2ffec:	ldr	r2, [r9]
   2fff0:	cmp	sl, r2
   2fff4:	bne	2ffc8 <__assert_fail@plt+0x1e628>
   2fff8:	ldr	r1, [r4, #20]
   2fffc:	add	r3, r3, r3, lsl #1
   30000:	subs	r2, r7, #1
   30004:	add	r3, r1, r3, lsl #2
   30008:	moveq	r1, r2
   3000c:	ldr	r3, [r3, #8]
   30010:	ldr	lr, [r3]
   30014:	beq	30070 <__assert_fail@plt+0x1e6d0>
   30018:	mov	r1, #0
   3001c:	add	r3, r2, r1
   30020:	lsr	r3, r3, #1
   30024:	ldr	r0, [r8, r3, lsl #2]
   30028:	cmp	lr, r0
   3002c:	bgt	30168 <__assert_fail@plt+0x1e7c8>
   30030:	cmp	r3, r1
   30034:	bls	30070 <__assert_fail@plt+0x1e6d0>
   30038:	add	r2, r3, r1
   3003c:	lsr	r2, r2, #1
   30040:	ldr	r0, [r8, r2, lsl #2]
   30044:	cmp	lr, r0
   30048:	ble	30068 <__assert_fail@plt+0x1e6c8>
   3004c:	b	3015c <__assert_fail@plt+0x1e7bc>
   30050:	add	r3, r1, r2
   30054:	lsr	r3, r3, #1
   30058:	ldr	r0, [r8, r3, lsl #2]
   3005c:	cmp	lr, r0
   30060:	bgt	30168 <__assert_fail@plt+0x1e7c8>
   30064:	mov	r2, r3
   30068:	cmp	r1, r2
   3006c:	bcc	30050 <__assert_fail@plt+0x1e6b0>
   30070:	ldr	r3, [r8, r1, lsl #2]
   30074:	cmp	lr, r3
   30078:	beq	2ff94 <__assert_fail@plt+0x1e5f4>
   3007c:	ldr	r1, [r4, #24]
   30080:	add	lr, lr, lr, lsl #1
   30084:	mov	r0, r5
   30088:	add	r1, r1, lr, lsl #2
   3008c:	bl	20844 <__assert_fail@plt+0xeea4>
   30090:	cmp	r0, #0
   30094:	bne	300ec <__assert_fail@plt+0x1e74c>
   30098:	ldr	r7, [sp, #52]	; 0x34
   3009c:	mov	ip, #1
   300a0:	cmp	r7, ip
   300a4:	bgt	2ffa0 <__assert_fail@plt+0x1e600>
   300a8:	mov	r3, #0
   300ac:	mov	r2, r5
   300b0:	mov	r1, r4
   300b4:	add	r0, sp, #40	; 0x28
   300b8:	bl	25860 <__assert_fail@plt+0x13ec0>
   300bc:	cmp	r0, #0
   300c0:	str	r0, [r4, #36]	; 0x24
   300c4:	beq	302a8 <__assert_fail@plt+0x1e908>
   300c8:	ldrsb	r3, [r0, #52]	; 0x34
   300cc:	cmp	r3, #0
   300d0:	strge	r0, [r4, #40]	; 0x28
   300d4:	strge	r0, [r4, #44]	; 0x2c
   300d8:	strge	r0, [r4, #48]	; 0x30
   300dc:	blt	30244 <__assert_fail@plt+0x1e8a4>
   300e0:	ldr	r0, [sp, #56]	; 0x38
   300e4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   300e8:	mov	r0, #0
   300ec:	ldr	r5, [r6]
   300f0:	str	r0, [sp, #36]	; 0x24
   300f4:	ldr	r0, [r5, #56]	; 0x38
   300f8:	cmp	r0, #0
   300fc:	beq	30110 <__assert_fail@plt+0x1e770>
   30100:	ldr	r7, [r0]
   30104:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30108:	subs	r0, r7, #0
   3010c:	bne	30100 <__assert_fail@plt+0x1e760>
   30110:	mov	r3, #31
   30114:	mov	r7, #0
   30118:	ldr	r0, [r5, #16]
   3011c:	str	r7, [r5, #52]	; 0x34
   30120:	str	r7, [r5, #56]	; 0x38
   30124:	str	r3, [r5, #64]	; 0x40
   30128:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   3012c:	str	r7, [r5, #16]
   30130:	ldr	r0, [sp, #68]	; 0x44
   30134:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30138:	ldr	r0, [sp, #72]	; 0x48
   3013c:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30140:	ldrb	r3, [sp, #135]	; 0x87
   30144:	cmp	r3, r7
   30148:	bne	301b0 <__assert_fail@plt+0x1e810>
   3014c:	ldr	r0, [sp, #36]	; 0x24
   30150:	cmp	r0, #0
   30154:	beq	2f86c <__assert_fail@plt+0x1decc>
   30158:	b	2f314 <__assert_fail@plt+0x1d974>
   3015c:	mov	r1, r2
   30160:	mov	r2, r3
   30164:	mov	r3, r1
   30168:	add	r1, r3, #1
   3016c:	cmp	r1, r2
   30170:	bcc	3001c <__assert_fail@plt+0x1e67c>
   30174:	b	30070 <__assert_fail@plt+0x1e6d0>
   30178:	mov	r3, r0
   3017c:	str	r3, [sp, #36]	; 0x24
   30180:	ldr	r5, [r6]
   30184:	b	2f2bc <__assert_fail@plt+0x1d91c>
   30188:	mov	r3, #0
   3018c:	add	r5, sp, #48	; 0x30
   30190:	str	r3, [sp, #40]	; 0x28
   30194:	str	r3, [sp, #48]	; 0x30
   30198:	str	r3, [r5, #4]
   3019c:	str	r3, [r5, #8]
   301a0:	b	2ff74 <__assert_fail@plt+0x1e5d4>
   301a4:	ldr	r4, [sp, #20]
   301a8:	mov	r3, #12
   301ac:	b	3017c <__assert_fail@plt+0x1e7dc>
   301b0:	ldr	r0, [sp, #64]	; 0x40
   301b4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   301b8:	b	3014c <__assert_fail@plt+0x1e7ac>
   301bc:	add	r0, sp, #60	; 0x3c
   301c0:	bl	1f93c <__assert_fail@plt+0xdf9c>
   301c4:	ldr	r3, [sp, #12]
   301c8:	str	r3, [sp, #36]	; 0x24
   301cc:	b	2f3bc <__assert_fail@plt+0x1da1c>
   301d0:	ldr	r2, [r6, #20]
   301d4:	cmp	r2, #0
   301d8:	bne	2ff10 <__assert_fail@plt+0x1e570>
   301dc:	ldr	r5, [r4, #8]
   301e0:	cmp	r5, #0
   301e4:	beq	3054c <__assert_fail@plt+0x1ebac>
   301e8:	ldr	lr, [r4]
   301ec:	mov	r0, r2
   301f0:	mov	ip, r2
   301f4:	mov	r1, lr
   301f8:	ldrb	r2, [r1, #4]
   301fc:	sub	r2, r2, #1
   30200:	cmp	r2, #11
   30204:	ldrls	pc, [pc, r2, lsl #2]
   30208:	b	3057c <__assert_fail@plt+0x1ebdc>
   3020c:	andeq	r0, r3, ip, asr r4
   30210:	strdeq	r0, [r3], -r4
   30214:	andeq	r0, r3, ip, ror #8
   30218:	strdeq	r0, [r3], -r4
   3021c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30220:	andeq	pc, r2, r0, lsl pc	; <UNPREDICTABLE>
   30224:	andeq	r0, r3, ip, ror r5
   30228:	strdeq	r0, [r3], -r4
   3022c:	strdeq	r0, [r3], -r4
   30230:	strdeq	r0, [r3], -r4
   30234:	strdeq	r0, [r3], -r4
   30238:	andeq	r0, r3, r4, lsr #9
   3023c:	ldr	r2, [r5, #52]	; 0x34
   30240:	b	2f768 <__assert_fail@plt+0x1ddc8>
   30244:	mov	r3, #1
   30248:	mov	r2, r5
   3024c:	mov	r1, r4
   30250:	add	r0, sp, #40	; 0x28
   30254:	bl	25860 <__assert_fail@plt+0x13ec0>
   30258:	mov	r3, #2
   3025c:	mov	r2, r5
   30260:	str	r0, [r4, #40]	; 0x28
   30264:	mov	r1, r4
   30268:	add	r0, sp, #40	; 0x28
   3026c:	bl	25860 <__assert_fail@plt+0x13ec0>
   30270:	mov	r3, #6
   30274:	mov	r2, r5
   30278:	str	r0, [r4, #44]	; 0x2c
   3027c:	mov	r1, r4
   30280:	add	r0, sp, #40	; 0x28
   30284:	bl	25860 <__assert_fail@plt+0x13ec0>
   30288:	ldr	r3, [r4, #40]	; 0x28
   3028c:	str	r0, [r4, #48]	; 0x30
   30290:	cmp	r3, #0
   30294:	beq	302a8 <__assert_fail@plt+0x1e908>
   30298:	ldr	r3, [r4, #44]	; 0x2c
   3029c:	cmp	r0, #0
   302a0:	cmpne	r3, #0
   302a4:	bne	300e0 <__assert_fail@plt+0x1e740>
   302a8:	ldr	r0, [sp, #40]	; 0x28
   302ac:	b	300ec <__assert_fail@plt+0x1e74c>
   302b0:	mov	r3, r2
   302b4:	b	2fc24 <__assert_fail@plt+0x1e284>
   302b8:	ldr	r5, [sp, #88]	; 0x58
   302bc:	ldr	r9, [sp, #96]	; 0x60
   302c0:	ldr	r3, [sp, #108]	; 0x6c
   302c4:	cmp	r9, r3
   302c8:	movge	r9, r3
   302cc:	cmp	r9, r5
   302d0:	ble	30530 <__assert_fail@plt+0x1eb90>
   302d4:	bl	11754 <__ctype_toupper_loc@plt>
   302d8:	b	302f8 <__assert_fail@plt+0x1e958>
   302dc:	ldr	r2, [r0]
   302e0:	ldr	r3, [r2, r3, lsl #2]
   302e4:	strb	r3, [r8, r5]
   302e8:	add	r5, r5, #1
   302ec:	cmp	r9, r5
   302f0:	beq	30330 <__assert_fail@plt+0x1e990>
   302f4:	ldr	r8, [sp, #64]	; 0x40
   302f8:	ldr	r3, [sp, #60]	; 0x3c
   302fc:	ldr	r1, [sp, #84]	; 0x54
   30300:	ldr	r2, [sp, #124]	; 0x7c
   30304:	add	r3, r3, r5
   30308:	ldrb	r3, [r3, r1]
   3030c:	cmp	r2, #0
   30310:	beq	302dc <__assert_fail@plt+0x1e93c>
   30314:	ldrb	r2, [r2, r3]
   30318:	ldr	r3, [r0]
   3031c:	ldr	r3, [r3, r2, lsl #2]
   30320:	strb	r3, [r8, r5]
   30324:	add	r5, r5, #1
   30328:	cmp	r9, r5
   3032c:	bne	302f4 <__assert_fail@plt+0x1e954>
   30330:	mov	r3, #0
   30334:	str	r3, [sp, #36]	; 0x24
   30338:	str	r9, [sp, #88]	; 0x58
   3033c:	str	r9, [sp, #92]	; 0x5c
   30340:	b	2f3bc <__assert_fail@plt+0x1da1c>
   30344:	mov	r0, r4
   30348:	mov	r1, #160	; 0xa0
   3034c:	bl	1f170 <__assert_fail@plt+0xd7d0>
   30350:	subs	r4, r0, #0
   30354:	beq	30538 <__assert_fail@plt+0x1eb98>
   30358:	mov	r3, #160	; 0xa0
   3035c:	str	r4, [r6]
   30360:	str	r3, [r6, #4]
   30364:	b	2f048 <__assert_fail@plt+0x1d6a8>
   30368:	mov	sl, r5
   3036c:	mov	r1, #1
   30370:	b	2f0a8 <__assert_fail@plt+0x1d708>
   30374:	mov	r7, r8
   30378:	mov	r9, r8
   3037c:	b	2f610 <__assert_fail@plt+0x1dc70>
   30380:	ldr	r0, [sp, #64]	; 0x40
   30384:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30388:	b	2f314 <__assert_fail@plt+0x1d974>
   3038c:	cmp	r9, #0
   30390:	movne	r8, #1
   30394:	bne	2f4b4 <__assert_fail@plt+0x1db14>
   30398:	ldr	r5, [r6]
   3039c:	mov	r2, #12
   303a0:	mov	r3, #0
   303a4:	str	r2, [sp, #36]	; 0x24
   303a8:	str	r3, [r4, #52]	; 0x34
   303ac:	b	2f2bc <__assert_fail@plt+0x1d91c>
   303b0:	mov	r0, #996	; 0x3e4
   303b4:	bl	1f0c4 <__assert_fail@plt+0xd724>
   303b8:	subs	r7, r0, #0
   303bc:	beq	3038c <__assert_fail@plt+0x1e9ec>
   303c0:	ldr	r1, [r5, #56]	; 0x38
   303c4:	mov	r3, sl
   303c8:	mov	r2, #1
   303cc:	mov	r0, #4
   303d0:	str	r1, [r7]
   303d4:	str	r7, [r5, #56]	; 0x38
   303d8:	b	2f454 <__assert_fail@plt+0x1dab4>
   303dc:	mov	r2, r3
   303e0:	b	2f76c <__assert_fail@plt+0x1ddcc>
   303e4:	mov	r3, #0
   303e8:	str	r3, [sp, #36]	; 0x24
   303ec:	b	2f3bc <__assert_fail@plt+0x1da1c>
   303f0:	mov	r0, r3
   303f4:	add	ip, ip, #1
   303f8:	add	r1, r1, #8
   303fc:	cmp	ip, r5
   30400:	bne	301f8 <__assert_fail@plt+0x1e858>
   30404:	orr	fp, fp, r0
   30408:	ands	fp, fp, #255	; 0xff
   3040c:	moveq	r0, fp
   30410:	beq	30550 <__assert_fail@plt+0x1ebb0>
   30414:	add	ip, lr, ip, lsl #3
   30418:	mov	r2, #7
   3041c:	b	30434 <__assert_fail@plt+0x1ea94>
   30420:	cmp	r3, #5
   30424:	strbeq	r2, [lr, #4]
   30428:	add	lr, lr, #8
   3042c:	cmp	ip, lr
   30430:	beq	30550 <__assert_fail@plt+0x1ebb0>
   30434:	ldrb	r3, [lr, #4]
   30438:	cmp	r3, #1
   3043c:	bne	30420 <__assert_fail@plt+0x1ea80>
   30440:	ldrsb	r3, [lr]
   30444:	cmp	r3, #0
   30448:	bge	30428 <__assert_fail@plt+0x1ea88>
   3044c:	ldrb	r3, [lr, #6]
   30450:	bfc	r3, #5, #1
   30454:	strb	r3, [lr, #6]
   30458:	b	30428 <__assert_fail@plt+0x1ea88>
   3045c:	ldrsb	r2, [r1]
   30460:	cmp	r2, #0
   30464:	movlt	fp, r3
   30468:	b	303f4 <__assert_fail@plt+0x1ea54>
   3046c:	ldr	r2, [r1]
   30470:	ldr	r7, [r2, #16]
   30474:	cmp	r7, #0
   30478:	bne	2ff10 <__assert_fail@plt+0x1e570>
   3047c:	ldr	r7, [r2, #20]
   30480:	cmp	r7, #0
   30484:	bne	2ff10 <__assert_fail@plt+0x1e570>
   30488:	ldr	r7, [r2, #24]
   3048c:	cmp	r7, #0
   30490:	bne	2ff10 <__assert_fail@plt+0x1e570>
   30494:	ldr	r2, [r2, #28]
   30498:	cmp	r2, #0
   3049c:	beq	303f4 <__assert_fail@plt+0x1ea54>
   304a0:	b	2ff10 <__assert_fail@plt+0x1e570>
   304a4:	ldr	r2, [r1]
   304a8:	cmp	r2, #32
   304ac:	beq	303f4 <__assert_fail@plt+0x1ea54>
   304b0:	bls	3051c <__assert_fail@plt+0x1eb7c>
   304b4:	cmp	r2, #64	; 0x40
   304b8:	beq	303f4 <__assert_fail@plt+0x1ea54>
   304bc:	cmp	r2, #128	; 0x80
   304c0:	beq	303f4 <__assert_fail@plt+0x1ea54>
   304c4:	b	2ff10 <__assert_fail@plt+0x1e570>
   304c8:	mov	r3, #12
   304cc:	ldr	r4, [sp, #20]
   304d0:	str	r0, [sl]
   304d4:	str	r0, [sl, #4]
   304d8:	b	3017c <__assert_fail@plt+0x1e7dc>
   304dc:	mov	r0, #996	; 0x3e4
   304e0:	bl	1f0c4 <__assert_fail@plt+0xd724>
   304e4:	cmp	r0, #0
   304e8:	beq	30398 <__assert_fail@plt+0x1e9f8>
   304ec:	ldr	ip, [r5, #56]	; 0x38
   304f0:	mov	r2, #4
   304f4:	mov	r3, #1
   304f8:	mov	r1, #0
   304fc:	str	ip, [r0]
   30500:	str	r0, [r5, #56]	; 0x38
   30504:	b	2f4dc <__assert_fail@plt+0x1db3c>
   30508:	mov	r0, #12
   3050c:	b	300ec <__assert_fail@plt+0x1e74c>
   30510:	mov	r3, r8
   30514:	mov	r7, r8
   30518:	b	2f658 <__assert_fail@plt+0x1dcb8>
   3051c:	cmp	r2, #16
   30520:	beq	303f4 <__assert_fail@plt+0x1ea54>
   30524:	b	2ff10 <__assert_fail@plt+0x1e570>
   30528:	mov	r1, r3
   3052c:	b	2f3ac <__assert_fail@plt+0x1da0c>
   30530:	mov	r9, r5
   30534:	b	30330 <__assert_fail@plt+0x1e990>
   30538:	mov	r0, #12
   3053c:	b	2f86c <__assert_fail@plt+0x1decc>
   30540:	ldr	r5, [r6]
   30544:	str	r8, [r4, #52]	; 0x34
   30548:	b	2f2bc <__assert_fail@plt+0x1d91c>
   3054c:	mov	r0, r5
   30550:	ldrb	r3, [r4, #88]	; 0x58
   30554:	mov	r1, #1
   30558:	ldr	r2, [r4, #76]	; 0x4c
   3055c:	str	r1, [r4, #92]	; 0x5c
   30560:	and	r3, r3, #251	; 0xfb
   30564:	cmp	r2, #0
   30568:	movle	r2, r0
   3056c:	orrgt	r2, r0, #1
   30570:	bfi	r3, r2, #1, #1
   30574:	strb	r3, [r4, #88]	; 0x58
   30578:	b	2ff10 <__assert_fail@plt+0x1e570>
   3057c:	bl	11964 <abort@plt>
   30580:	movw	r3, #25560	; 0x63d8
   30584:	movt	r3, #4
   30588:	str	r4, [sp, #-8]!
   3058c:	ldr	r3, [r3]
   30590:	str	lr, [sp, #4]
   30594:	mov	lr, r2
   30598:	mov	r2, r1
   3059c:	ldrb	ip, [lr, #28]
   305a0:	mov	r1, r0
   305a4:	mov	r0, lr
   305a8:	ubfx	r4, r3, #25, #1
   305ac:	bfi	ip, r4, #4, #1
   305b0:	mvn	ip, ip, lsl #25
   305b4:	mvn	ip, ip, lsr #25
   305b8:	strb	ip, [lr, #28]
   305bc:	bl	2eff0 <__assert_fail@plt+0x1d650>
   305c0:	subs	r3, r0, #0
   305c4:	beq	305f8 <__assert_fail@plt+0x1ec58>
   305c8:	movw	r1, #20932	; 0x51c4
   305cc:	movt	r1, #3
   305d0:	ldr	r4, [sp]
   305d4:	add	r3, r1, r3, lsl #2
   305d8:	add	r1, r1, #32
   305dc:	mov	r2, #5
   305e0:	mov	r0, #0
   305e4:	ldr	lr, [sp, #4]
   305e8:	add	sp, sp, #8
   305ec:	ldr	r3, [r3, #416]	; 0x1a0
   305f0:	add	r1, r1, r3
   305f4:	b	11628 <dcgettext@plt>
   305f8:	ldr	r4, [sp]
   305fc:	add	sp, sp, #4
   30600:	pop	{pc}		; (ldr pc, [sp], #4)
   30604:	movw	r3, #25560	; 0x63d8
   30608:	movt	r3, #4
   3060c:	ldr	r2, [r3]
   30610:	str	r0, [r3]
   30614:	mov	r0, r2
   30618:	bx	lr
   3061c:	strd	r4, [sp, #-16]!
   30620:	mov	r2, #256	; 0x100
   30624:	mov	r4, r0
   30628:	ldr	r5, [r0]
   3062c:	mov	r1, #0
   30630:	str	r6, [sp, #8]
   30634:	ldr	r6, [r0, #16]
   30638:	str	lr, [sp, #12]
   3063c:	mov	r0, r6
   30640:	bl	11814 <memset@plt>
   30644:	ldr	r1, [r5, #36]	; 0x24
   30648:	mov	r3, r6
   3064c:	mov	r0, r4
   30650:	add	r2, r1, #12
   30654:	add	r1, r1, #8
   30658:	bl	221f4 <__assert_fail@plt+0x10854>
   3065c:	ldr	r3, [r5, #36]	; 0x24
   30660:	ldr	r0, [r5, #40]	; 0x28
   30664:	cmp	r3, r0
   30668:	beq	30684 <__assert_fail@plt+0x1ece4>
   3066c:	add	r2, r0, #12
   30670:	add	r1, r0, #8
   30674:	mov	r3, r6
   30678:	mov	r0, r4
   3067c:	bl	221f4 <__assert_fail@plt+0x10854>
   30680:	ldr	r0, [r5, #36]	; 0x24
   30684:	ldr	r1, [r5, #44]	; 0x2c
   30688:	cmp	r1, r0
   3068c:	beq	306a8 <__assert_fail@plt+0x1ed08>
   30690:	add	r2, r1, #12
   30694:	mov	r0, r4
   30698:	mov	r3, r6
   3069c:	add	r1, r1, #8
   306a0:	bl	221f4 <__assert_fail@plt+0x10854>
   306a4:	ldr	r0, [r5, #36]	; 0x24
   306a8:	ldr	r1, [r5, #48]	; 0x30
   306ac:	cmp	r1, r0
   306b0:	beq	306c8 <__assert_fail@plt+0x1ed28>
   306b4:	add	r2, r1, #12
   306b8:	mov	r3, r6
   306bc:	add	r1, r1, #8
   306c0:	mov	r0, r4
   306c4:	bl	221f4 <__assert_fail@plt+0x10854>
   306c8:	ldrb	r3, [r4, #28]
   306cc:	mov	r0, #0
   306d0:	ldr	r6, [sp, #8]
   306d4:	orr	r3, r3, #8
   306d8:	strb	r3, [r4, #28]
   306dc:	ldrd	r4, [sp]
   306e0:	add	sp, sp, #12
   306e4:	pop	{pc}		; (ldr pc, [sp], #4)
   306e8:	cmp	r3, r2
   306ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   306f0:	strd	r6, [sp, #8]
   306f4:	strd	r8, [sp, #16]
   306f8:	strd	sl, [sp, #24]
   306fc:	str	lr, [sp, #32]
   30700:	sub	sp, sp, #52	; 0x34
   30704:	movle	lr, #0
   30708:	movgt	lr, #1
   3070c:	ldr	ip, [sp, #88]	; 0x58
   30710:	orrs	lr, lr, r3, lsr #31
   30714:	ldrb	lr, [sp, #100]	; 0x64
   30718:	ldr	r8, [sp, #96]	; 0x60
   3071c:	add	r7, r3, ip
   30720:	str	lr, [sp, #36]	; 0x24
   30724:	ldr	lr, [r0]
   30728:	str	lr, [sp, #28]
   3072c:	bne	30a2c <__assert_fail@plt+0x1f08c>
   30730:	cmp	r7, r2
   30734:	mov	fp, r3
   30738:	str	r2, [sp, #32]
   3073c:	mov	r4, r0
   30740:	mov	r3, r2
   30744:	str	r1, [sp, #40]	; 0x28
   30748:	bgt	309d8 <__assert_fail@plt+0x1f038>
   3074c:	cmp	ip, #0
   30750:	cmpge	fp, r7
   30754:	bgt	309d8 <__assert_fail@plt+0x1f038>
   30758:	cmp	r7, #0
   3075c:	blt	309e0 <__assert_fail@plt+0x1f040>
   30760:	cmp	fp, r7
   30764:	movgt	r2, #0
   30768:	movle	r2, #1
   3076c:	ands	r3, r2, ip, lsr #31
   30770:	bne	309e0 <__assert_fail@plt+0x1f040>
   30774:	movw	r2, #0
   30778:	movt	r2, #0
   3077c:	cmp	r2, #0
   30780:	mov	r5, #1
   30784:	moveq	r5, r2
   30788:	movw	r2, #0
   3078c:	movt	r2, #0
   30790:	mov	r0, #1
   30794:	cmp	r2, #0
   30798:	moveq	r0, r2
   3079c:	orr	r5, r5, r0
   307a0:	ands	r5, r5, #255	; 0xff
   307a4:	beq	307b8 <__assert_fail@plt+0x1ee18>
   307a8:	ldr	r3, [sp, #28]
   307ac:	mov	r5, #1
   307b0:	add	r0, r3, #136	; 0x88
   307b4:	bl	115a4 <pthread_mutex_lock@plt>
   307b8:	ldrb	r0, [r4, #28]
   307bc:	cmp	fp, r7
   307c0:	ubfx	r3, r0, #5, #2
   307c4:	str	r3, [sp, #44]	; 0x2c
   307c8:	bge	307e0 <__assert_fail@plt+0x1ee40>
   307cc:	ldr	r2, [r4, #16]
   307d0:	cmp	r2, #0
   307d4:	beq	307e0 <__assert_fail@plt+0x1ee40>
   307d8:	tst	r0, #8
   307dc:	beq	30980 <__assert_fail@plt+0x1efe0>
   307e0:	ubfx	r2, r0, #4, #1
   307e4:	cmp	r8, #0
   307e8:	orreq	r2, r2, #1
   307ec:	ands	r2, r2, #255	; 0xff
   307f0:	bne	3096c <__assert_fail@plt+0x1efcc>
   307f4:	and	r0, r0, #6
   307f8:	ldr	ip, [r4, #24]
   307fc:	cmp	r0, #4
   30800:	beq	30a3c <__assert_fail@plt+0x1f09c>
   30804:	add	sl, ip, #1
   30808:	mov	r6, sl
   3080c:	lsl	r0, sl, #3
   30810:	bl	1f0c4 <__assert_fail@plt+0xd724>
   30814:	subs	r9, r0, #0
   30818:	beq	30a34 <__assert_fail@plt+0x1f094>
   3081c:	mov	r3, fp
   30820:	mov	r0, r4
   30824:	str	sl, [sp, #8]
   30828:	ldr	ip, [sp, #92]	; 0x5c
   3082c:	ldr	r2, [sp, #32]
   30830:	ldr	r1, [sp, #40]	; 0x28
   30834:	stm	sp, {r7, ip}
   30838:	ldr	ip, [sp, #44]	; 0x2c
   3083c:	str	r9, [sp, #12]
   30840:	str	ip, [sp, #16]
   30844:	bl	29c00 <__assert_fail@plt+0x18260>
   30848:	cmp	r0, #0
   3084c:	beq	3089c <__assert_fail@plt+0x1eefc>
   30850:	cmp	r0, #1
   30854:	mvneq	r4, #0
   30858:	beq	30860 <__assert_fail@plt+0x1eec0>
   3085c:	mvn	r4, #1
   30860:	mov	r0, r9
   30864:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30868:	cmp	r5, #0
   3086c:	beq	3087c <__assert_fail@plt+0x1eedc>
   30870:	ldr	r3, [sp, #28]
   30874:	add	r0, r3, #136	; 0x88
   30878:	bl	114f0 <pthread_mutex_unlock@plt>
   3087c:	mov	r0, r4
   30880:	add	sp, sp, #52	; 0x34
   30884:	ldrd	r4, [sp]
   30888:	ldrd	r6, [sp, #8]
   3088c:	ldrd	r8, [sp, #16]
   30890:	ldrd	sl, [sp, #24]
   30894:	add	sp, sp, #32
   30898:	pop	{pc}		; (ldr pc, [sp], #4)
   3089c:	cmp	r8, #0
   308a0:	beq	30950 <__assert_fail@plt+0x1efb0>
   308a4:	ldrb	r7, [r4, #28]
   308a8:	add	sl, r6, #1
   308ac:	ubfx	r7, r7, #1, #2
   308b0:	cmp	r7, #0
   308b4:	beq	30990 <__assert_fail@plt+0x1eff0>
   308b8:	cmp	r7, #1
   308bc:	beq	30a68 <__assert_fail@plt+0x1f0c8>
   308c0:	ldr	fp, [r8]
   308c4:	mov	r7, #2
   308c8:	cmp	r6, #0
   308cc:	ble	30ad0 <__assert_fail@plt+0x1f130>
   308d0:	ldrd	r0, [r8, #4]
   308d4:	add	lr, r9, r6, lsl #3
   308d8:	mov	r3, r9
   308dc:	mov	r2, r6
   308e0:	sub	r0, r0, #4
   308e4:	sub	r1, r1, #4
   308e8:	ldr	ip, [r3]
   308ec:	add	r3, r3, #8
   308f0:	str	ip, [r0, #4]!
   308f4:	ldr	ip, [r3, #-4]
   308f8:	cmp	r3, lr
   308fc:	str	ip, [r1, #4]!
   30900:	bne	308e8 <__assert_fail@plt+0x1ef48>
   30904:	ldr	fp, [r8]
   30908:	cmp	r2, fp
   3090c:	bcs	30938 <__assert_fail@plt+0x1ef98>
   30910:	ldr	ip, [r8, #4]
   30914:	mvn	r3, #0
   30918:	ldr	r0, [r8, #8]
   3091c:	str	r3, [r0, r2, lsl #2]
   30920:	add	r6, r6, #1
   30924:	str	r3, [ip, r2, lsl #2]
   30928:	mov	r2, r6
   3092c:	ldr	r1, [r8]
   30930:	cmp	r1, r6
   30934:	bhi	3091c <__assert_fail@plt+0x1ef7c>
   30938:	ldrb	r3, [r4, #28]
   3093c:	bfi	r3, r7, #1, #2
   30940:	and	r2, r3, #6
   30944:	cmp	r2, #0
   30948:	strb	r3, [r4, #28]
   3094c:	beq	3085c <__assert_fail@plt+0x1eebc>
   30950:	ldr	r3, [sp, #36]	; 0x24
   30954:	ldr	r4, [r9]
   30958:	cmp	r3, #0
   3095c:	beq	30860 <__assert_fail@plt+0x1eec0>
   30960:	ldr	r3, [r9, #4]
   30964:	sub	r4, r3, r4
   30968:	b	30860 <__assert_fail@plt+0x1eec0>
   3096c:	mov	sl, #1
   30970:	mov	r0, #8
   30974:	mov	r6, sl
   30978:	mov	r8, #0
   3097c:	b	30810 <__assert_fail@plt+0x1ee70>
   30980:	mov	r0, r4
   30984:	bl	3061c <__assert_fail@plt+0x1ec7c>
   30988:	ldrb	r0, [r4, #28]
   3098c:	b	307e0 <__assert_fail@plt+0x1ee40>
   30990:	lsl	r7, sl, #2
   30994:	mov	fp, sl
   30998:	mov	r0, r7
   3099c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   309a0:	cmp	r0, #0
   309a4:	str	r0, [r8, #4]
   309a8:	beq	30adc <__assert_fail@plt+0x1f13c>
   309ac:	mov	r0, r7
   309b0:	bl	1f0c4 <__assert_fail@plt+0xd724>
   309b4:	cmp	r0, #0
   309b8:	mov	r7, r0
   309bc:	str	r0, [r8, #8]
   309c0:	movne	r7, #1
   309c4:	strne	sl, [r8]
   309c8:	bne	308c8 <__assert_fail@plt+0x1ef28>
   309cc:	ldr	r0, [r8, #4]
   309d0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   309d4:	b	30938 <__assert_fail@plt+0x1ef98>
   309d8:	mov	r7, r3
   309dc:	b	30774 <__assert_fail@plt+0x1edd4>
   309e0:	movw	r2, #0
   309e4:	movt	r2, #0
   309e8:	cmp	r2, #0
   309ec:	mov	r5, #1
   309f0:	moveq	r5, r2
   309f4:	movw	r2, #0
   309f8:	movt	r2, #0
   309fc:	mov	r1, #1
   30a00:	cmp	r2, #0
   30a04:	moveq	r1, r2
   30a08:	orr	r5, r5, r1
   30a0c:	ands	r5, r5, #255	; 0xff
   30a10:	movne	r7, #0
   30a14:	bne	307a8 <__assert_fail@plt+0x1ee08>
   30a18:	ldrb	r0, [r4, #28]
   30a1c:	mov	r7, r5
   30a20:	ubfx	r3, r0, #5, #2
   30a24:	str	r3, [sp, #44]	; 0x2c
   30a28:	b	307e0 <__assert_fail@plt+0x1ee40>
   30a2c:	mvn	r4, #0
   30a30:	b	3087c <__assert_fail@plt+0x1eedc>
   30a34:	mvn	r4, #1
   30a38:	b	30868 <__assert_fail@plt+0x1eec8>
   30a3c:	ldr	sl, [r8]
   30a40:	cmp	sl, ip
   30a44:	bhi	30804 <__assert_fail@plt+0x1ee64>
   30a48:	cmp	sl, #0
   30a4c:	mov	r6, sl
   30a50:	bgt	3080c <__assert_fail@plt+0x1ee6c>
   30a54:	mov	sl, #1
   30a58:	mov	r8, r2
   30a5c:	mov	r6, sl
   30a60:	mov	r0, #8
   30a64:	b	30810 <__assert_fail@plt+0x1ee70>
   30a68:	ldr	fp, [r8]
   30a6c:	cmp	fp, sl
   30a70:	bcs	308c8 <__assert_fail@plt+0x1ef28>
   30a74:	lsl	fp, sl, #2
   30a78:	ldr	r0, [r8, #4]
   30a7c:	mov	r1, fp
   30a80:	bl	1f170 <__assert_fail@plt+0xd7d0>
   30a84:	subs	r2, r0, #0
   30a88:	str	r2, [sp, #32]
   30a8c:	beq	30adc <__assert_fail@plt+0x1f13c>
   30a90:	mov	r1, fp
   30a94:	ldr	r0, [r8, #8]
   30a98:	bl	1f170 <__assert_fail@plt+0xd7d0>
   30a9c:	ldr	r2, [sp, #32]
   30aa0:	subs	r1, r0, #0
   30aa4:	movne	fp, sl
   30aa8:	strne	sl, [r8]
   30aac:	strne	r1, [r8, #8]
   30ab0:	strne	r2, [r8, #4]
   30ab4:	bne	308c8 <__assert_fail@plt+0x1ef28>
   30ab8:	mov	r0, r2
   30abc:	str	r1, [sp, #32]
   30ac0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30ac4:	ldr	r1, [sp, #32]
   30ac8:	mov	r7, r1
   30acc:	b	30938 <__assert_fail@plt+0x1ef98>
   30ad0:	mov	r6, #0
   30ad4:	mov	r2, r6
   30ad8:	b	30908 <__assert_fail@plt+0x1ef68>
   30adc:	mov	r7, #0
   30ae0:	b	30938 <__assert_fail@plt+0x1ef98>
   30ae4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   30ae8:	mov	r4, r0
   30aec:	mov	r0, #0
   30af0:	tst	r2, #1
   30af4:	movw	r5, #45820	; 0xb2fc
   30af8:	movt	r5, #3
   30afc:	movw	r3, #710	; 0x2c6
   30b00:	movt	r3, #257	; 0x101
   30b04:	strd	r6, [sp, #8]
   30b08:	mov	r6, r2
   30b0c:	str	r8, [sp, #16]
   30b10:	mov	r7, r1
   30b14:	movne	r8, r5
   30b18:	str	lr, [sp, #20]
   30b1c:	moveq	r8, r3
   30b20:	str	r0, [r4]
   30b24:	str	r0, [r4, #4]
   30b28:	str	r0, [r4, #8]
   30b2c:	mov	r0, #256	; 0x100
   30b30:	bl	1f0c4 <__assert_fail@plt+0xd724>
   30b34:	cmp	r0, #0
   30b38:	str	r0, [r4, #16]
   30b3c:	beq	30be8 <__assert_fail@plt+0x1f248>
   30b40:	lsl	r5, r6, #21
   30b44:	ands	r2, r6, #4
   30b48:	and	r5, r5, #4194304	; 0x400000
   30b4c:	orr	r5, r5, r8
   30b50:	bne	30bc0 <__assert_fail@plt+0x1f220>
   30b54:	ldrb	r3, [r4, #28]
   30b58:	ubfx	r6, r6, #3, #1
   30b5c:	mov	r1, #0
   30b60:	mov	r0, r7
   30b64:	str	r1, [r4, #20]
   30b68:	bfi	r3, r2, #7, #1
   30b6c:	bfi	r3, r6, #4, #1
   30b70:	strb	r3, [r4, #28]
   30b74:	bl	117a8 <strlen@plt>
   30b78:	mov	r2, r0
   30b7c:	mov	r3, r5
   30b80:	mov	r1, r7
   30b84:	mov	r0, r4
   30b88:	bl	2eff0 <__assert_fail@plt+0x1d650>
   30b8c:	cmp	r0, #16
   30b90:	mov	r5, r0
   30b94:	beq	30bd0 <__assert_fail@plt+0x1f230>
   30b98:	cmp	r0, #0
   30b9c:	bne	30bd4 <__assert_fail@plt+0x1f234>
   30ba0:	mov	r0, r4
   30ba4:	bl	3061c <__assert_fail@plt+0x1ec7c>
   30ba8:	mov	r0, r5
   30bac:	ldrd	r4, [sp]
   30bb0:	ldrd	r6, [sp, #8]
   30bb4:	ldr	r8, [sp, #16]
   30bb8:	add	sp, sp, #20
   30bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   30bc0:	bic	r5, r5, #64	; 0x40
   30bc4:	mov	r2, #1
   30bc8:	orr	r5, r5, #256	; 0x100
   30bcc:	b	30b54 <__assert_fail@plt+0x1f1b4>
   30bd0:	mov	r5, #8
   30bd4:	ldr	r0, [r4, #16]
   30bd8:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30bdc:	mov	r3, #0
   30be0:	str	r3, [r4, #16]
   30be4:	b	30ba8 <__assert_fail@plt+0x1f208>
   30be8:	mov	r5, #12
   30bec:	b	30ba8 <__assert_fail@plt+0x1f208>
   30bf0:	cmp	r0, #16
   30bf4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   30bf8:	strd	r6, [sp, #8]
   30bfc:	str	r8, [sp, #16]
   30c00:	str	lr, [sp, #20]
   30c04:	bhi	30c80 <__assert_fail@plt+0x1f2e0>
   30c08:	movw	r1, #20932	; 0x51c4
   30c0c:	movt	r1, #3
   30c10:	add	ip, r1, r0, lsl #2
   30c14:	mov	r4, r3
   30c18:	add	r1, r1, #32
   30c1c:	mov	r6, r2
   30c20:	mov	r0, #0
   30c24:	ldr	r3, [ip, #416]	; 0x1a0
   30c28:	mov	r2, #5
   30c2c:	add	r1, r1, r3
   30c30:	bl	11628 <dcgettext@plt>
   30c34:	mov	r7, r0
   30c38:	bl	117a8 <strlen@plt>
   30c3c:	cmp	r4, #0
   30c40:	add	r5, r0, #1
   30c44:	beq	30c68 <__assert_fail@plt+0x1f2c8>
   30c48:	cmp	r5, r4
   30c4c:	mov	r1, r7
   30c50:	subhi	r2, r4, #1
   30c54:	movhi	r3, #0
   30c58:	movls	r2, r5
   30c5c:	mov	r0, r6
   30c60:	strbhi	r3, [r6, r2]
   30c64:	bl	115d4 <memcpy@plt>
   30c68:	mov	r0, r5
   30c6c:	ldrd	r4, [sp]
   30c70:	ldrd	r6, [sp, #8]
   30c74:	ldr	r8, [sp, #16]
   30c78:	add	sp, sp, #20
   30c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   30c80:	bl	11964 <abort@plt>
   30c84:	strd	r4, [sp, #-16]!
   30c88:	mov	r4, r0
   30c8c:	ldr	r5, [r0]
   30c90:	str	r6, [sp, #8]
   30c94:	str	lr, [sp, #12]
   30c98:	cmp	r5, #0
   30c9c:	beq	30ce4 <__assert_fail@plt+0x1f344>
   30ca0:	movw	r2, #0
   30ca4:	movt	r2, #0
   30ca8:	cmp	r2, #0
   30cac:	mov	r3, #1
   30cb0:	moveq	r3, r2
   30cb4:	movw	r2, #0
   30cb8:	movt	r2, #0
   30cbc:	mov	r1, #1
   30cc0:	cmp	r2, #0
   30cc4:	moveq	r1, r2
   30cc8:	orr	r3, r3, r1
   30ccc:	tst	r3, #1
   30cd0:	beq	30cdc <__assert_fail@plt+0x1f33c>
   30cd4:	add	r0, r5, #136	; 0x88
   30cd8:	bl	1155c <pthread_mutex_destroy@plt>
   30cdc:	mov	r0, r5
   30ce0:	bl	23ac4 <__assert_fail@plt+0x12124>
   30ce4:	mov	r5, #0
   30ce8:	ldr	r0, [r4, #16]
   30cec:	str	r5, [r4]
   30cf0:	str	r5, [r4, #4]
   30cf4:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30cf8:	str	r5, [r4, #16]
   30cfc:	ldr	r0, [r4, #20]
   30d00:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30d04:	ldr	r6, [sp, #8]
   30d08:	str	r5, [r4, #20]
   30d0c:	ldrd	r4, [sp]
   30d10:	add	sp, sp, #12
   30d14:	pop	{pc}		; (ldr pc, [sp], #4)
   30d18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30d1c:	strd	r6, [sp, #8]
   30d20:	strd	r8, [sp, #16]
   30d24:	strd	sl, [sp, #24]
   30d28:	str	lr, [sp, #32]
   30d2c:	sub	sp, sp, #36	; 0x24
   30d30:	ldr	r6, [sp, #72]	; 0x48
   30d34:	bics	ip, r6, #7
   30d38:	movne	r0, #2
   30d3c:	bne	30df4 <__assert_fail@plt+0x1f454>
   30d40:	ands	sl, r6, #4
   30d44:	mov	r7, r3
   30d48:	str	r2, [sp, #28]
   30d4c:	mov	r8, r1
   30d50:	mov	r5, r0
   30d54:	bne	30e10 <__assert_fail@plt+0x1f470>
   30d58:	mov	r0, r1
   30d5c:	bl	117a8 <strlen@plt>
   30d60:	mov	r9, r0
   30d64:	movw	r2, #0
   30d68:	movt	r2, #0
   30d6c:	ldr	fp, [r5]
   30d70:	cmp	r2, #0
   30d74:	mov	r4, #1
   30d78:	moveq	r4, r2
   30d7c:	movw	r2, #0
   30d80:	movt	r2, #0
   30d84:	mov	r1, #1
   30d88:	cmp	r2, #0
   30d8c:	moveq	r1, r2
   30d90:	orr	r4, r4, r1
   30d94:	ands	r4, r4, #255	; 0xff
   30d98:	beq	30da4 <__assert_fail@plt+0x1f404>
   30d9c:	add	r0, fp, #136	; 0x88
   30da0:	bl	115a4 <pthread_mutex_lock@plt>
   30da4:	ldrb	r2, [r5, #28]
   30da8:	tst	r2, #16
   30dac:	beq	30e1c <__assert_fail@plt+0x1f47c>
   30db0:	mov	ip, #0
   30db4:	mov	r0, r5
   30db8:	str	r9, [sp]
   30dbc:	mov	r3, sl
   30dc0:	mov	r1, r8
   30dc4:	mov	r2, r9
   30dc8:	stmib	sp, {r9, ip}
   30dcc:	str	ip, [sp, #12]
   30dd0:	str	r6, [sp, #16]
   30dd4:	bl	29c00 <__assert_fail@plt+0x18260>
   30dd8:	mov	r5, r0
   30ddc:	cmp	r4, #0
   30de0:	beq	30dec <__assert_fail@plt+0x1f44c>
   30de4:	add	r0, fp, #136	; 0x88
   30de8:	bl	114f0 <pthread_mutex_unlock@plt>
   30dec:	adds	r0, r5, #0
   30df0:	movne	r0, #1
   30df4:	add	sp, sp, #36	; 0x24
   30df8:	ldrd	r4, [sp]
   30dfc:	ldrd	r6, [sp, #8]
   30e00:	ldrd	r8, [sp, #16]
   30e04:	ldrd	sl, [sp, #24]
   30e08:	add	sp, sp, #32
   30e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   30e10:	ldr	sl, [r3]
   30e14:	ldr	r9, [r3, #4]
   30e18:	b	30d64 <__assert_fail@plt+0x1f3c4>
   30e1c:	ldr	ip, [sp, #28]
   30e20:	mov	r0, r5
   30e24:	mov	r3, sl
   30e28:	mov	r1, r8
   30e2c:	mov	r2, r9
   30e30:	str	r9, [sp]
   30e34:	stmib	sp, {r9, ip}
   30e38:	str	r7, [sp, #12]
   30e3c:	str	r6, [sp, #16]
   30e40:	bl	29c00 <__assert_fail@plt+0x18260>
   30e44:	mov	r5, r0
   30e48:	b	30ddc <__assert_fail@plt+0x1f43c>
   30e4c:	cmp	r2, r3
   30e50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30e54:	movge	ip, #0
   30e58:	movlt	ip, #1
   30e5c:	strd	r6, [sp, #8]
   30e60:	orrs	ip, ip, r3, lsr #31
   30e64:	strd	r8, [sp, #16]
   30e68:	strd	sl, [sp, #24]
   30e6c:	str	lr, [sp, #32]
   30e70:	sub	sp, sp, #44	; 0x2c
   30e74:	ldr	fp, [r0]
   30e78:	ldr	r8, [sp, #80]	; 0x50
   30e7c:	bne	310b8 <__assert_fail@plt+0x1f718>
   30e80:	movw	lr, #0
   30e84:	movt	lr, #0
   30e88:	str	r1, [sp, #36]	; 0x24
   30e8c:	cmp	lr, #0
   30e90:	mov	ip, #1
   30e94:	moveq	ip, lr
   30e98:	movw	lr, #0
   30e9c:	movt	lr, #0
   30ea0:	mov	r6, #1
   30ea4:	cmp	lr, #0
   30ea8:	mov	r4, r3
   30eac:	moveq	r6, lr
   30eb0:	mov	r5, r0
   30eb4:	orr	r3, ip, r6
   30eb8:	mov	r7, r2
   30ebc:	ands	r3, r3, #255	; 0xff
   30ec0:	str	r3, [sp, #28]
   30ec4:	beq	30ed0 <__assert_fail@plt+0x1f530>
   30ec8:	add	r0, fp, #136	; 0x88
   30ecc:	bl	115a4 <pthread_mutex_lock@plt>
   30ed0:	ldrb	r2, [r5, #28]
   30ed4:	ubfx	r3, r2, #4, #1
   30ed8:	ubfx	r1, r2, #5, #2
   30edc:	cmp	r8, #0
   30ee0:	orreq	r3, r3, #1
   30ee4:	ands	r3, r3, #255	; 0xff
   30ee8:	str	r1, [sp, #32]
   30eec:	bne	31050 <__assert_fail@plt+0x1f6b0>
   30ef0:	and	r2, r2, #6
   30ef4:	ldr	r1, [r5, #24]
   30ef8:	cmp	r2, #4
   30efc:	beq	310c8 <__assert_fail@plt+0x1f728>
   30f00:	add	sl, r1, #1
   30f04:	mov	r6, sl
   30f08:	lsl	r0, sl, #3
   30f0c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   30f10:	subs	r9, r0, #0
   30f14:	beq	310c0 <__assert_fail@plt+0x1f720>
   30f18:	ldr	ip, [sp, #32]
   30f1c:	mov	r2, r7
   30f20:	mov	r3, r4
   30f24:	mov	r0, r5
   30f28:	stm	sp, {r4, r7, sl}
   30f2c:	str	r9, [sp, #12]
   30f30:	str	ip, [sp, #16]
   30f34:	ldr	r1, [sp, #36]	; 0x24
   30f38:	bl	29c00 <__assert_fail@plt+0x18260>
   30f3c:	cmp	r0, #0
   30f40:	beq	30f90 <__assert_fail@plt+0x1f5f0>
   30f44:	cmp	r0, #1
   30f48:	mvneq	r4, #0
   30f4c:	beq	30f54 <__assert_fail@plt+0x1f5b4>
   30f50:	mvn	r4, #1
   30f54:	mov	r0, r9
   30f58:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   30f5c:	ldr	r3, [sp, #28]
   30f60:	cmp	r3, #0
   30f64:	beq	30f70 <__assert_fail@plt+0x1f5d0>
   30f68:	add	r0, fp, #136	; 0x88
   30f6c:	bl	114f0 <pthread_mutex_unlock@plt>
   30f70:	mov	r0, r4
   30f74:	add	sp, sp, #44	; 0x2c
   30f78:	ldrd	r4, [sp]
   30f7c:	ldrd	r6, [sp, #8]
   30f80:	ldrd	r8, [sp, #16]
   30f84:	ldrd	sl, [sp, #24]
   30f88:	add	sp, sp, #32
   30f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   30f90:	cmp	r8, #0
   30f94:	beq	31044 <__assert_fail@plt+0x1f6a4>
   30f98:	ldrb	r7, [r5, #28]
   30f9c:	add	sl, r6, #1
   30fa0:	ubfx	r7, r7, #1, #2
   30fa4:	cmp	r7, #0
   30fa8:	beq	31064 <__assert_fail@plt+0x1f6c4>
   30fac:	cmp	r7, #1
   30fb0:	beq	310f4 <__assert_fail@plt+0x1f754>
   30fb4:	ldr	r3, [r8]
   30fb8:	mov	r7, #2
   30fbc:	cmp	r6, #0
   30fc0:	ble	31164 <__assert_fail@plt+0x1f7c4>
   30fc4:	ldrd	r0, [r8, #4]
   30fc8:	add	lr, r9, r6, lsl #3
   30fcc:	mov	r3, r9
   30fd0:	mov	r2, r6
   30fd4:	sub	r0, r0, #4
   30fd8:	sub	r1, r1, #4
   30fdc:	ldr	ip, [r3]
   30fe0:	add	r3, r3, #8
   30fe4:	str	ip, [r0, #4]!
   30fe8:	ldr	ip, [r3, #-4]
   30fec:	cmp	r3, lr
   30ff0:	str	ip, [r1, #4]!
   30ff4:	bne	30fdc <__assert_fail@plt+0x1f63c>
   30ff8:	ldr	r3, [r8]
   30ffc:	cmp	r2, r3
   31000:	bcs	3102c <__assert_fail@plt+0x1f68c>
   31004:	ldr	ip, [r8, #4]
   31008:	mvn	r3, #0
   3100c:	ldr	r0, [r8, #8]
   31010:	str	r3, [r0, r2, lsl #2]
   31014:	add	r6, r6, #1
   31018:	str	r3, [ip, r2, lsl #2]
   3101c:	mov	r2, r6
   31020:	ldr	r1, [r8]
   31024:	cmp	r1, r6
   31028:	bhi	31010 <__assert_fail@plt+0x1f670>
   3102c:	ldrb	r3, [r5, #28]
   31030:	bfi	r3, r7, #1, #2
   31034:	and	r2, r3, #6
   31038:	cmp	r2, #0
   3103c:	strb	r3, [r5, #28]
   31040:	beq	30f50 <__assert_fail@plt+0x1f5b0>
   31044:	ldr	r3, [r9, #4]
   31048:	sub	r4, r3, r4
   3104c:	b	30f54 <__assert_fail@plt+0x1f5b4>
   31050:	mov	sl, #1
   31054:	mov	r0, #8
   31058:	mov	r6, sl
   3105c:	mov	r8, #0
   31060:	b	30f0c <__assert_fail@plt+0x1f56c>
   31064:	lsl	r7, sl, #2
   31068:	str	sl, [sp, #32]
   3106c:	mov	r0, r7
   31070:	bl	1f0c4 <__assert_fail@plt+0xd724>
   31074:	cmp	r0, #0
   31078:	str	r0, [r8, #4]
   3107c:	ldr	r3, [sp, #32]
   31080:	beq	31170 <__assert_fail@plt+0x1f7d0>
   31084:	mov	r0, r7
   31088:	str	r3, [sp, #32]
   3108c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   31090:	ldr	r3, [sp, #32]
   31094:	cmp	r0, #0
   31098:	mov	r7, r0
   3109c:	movne	r7, #1
   310a0:	str	r0, [r8, #8]
   310a4:	strne	r3, [r8]
   310a8:	bne	30fbc <__assert_fail@plt+0x1f61c>
   310ac:	ldr	r0, [r8, #4]
   310b0:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   310b4:	b	3102c <__assert_fail@plt+0x1f68c>
   310b8:	mvn	r4, #0
   310bc:	b	30f70 <__assert_fail@plt+0x1f5d0>
   310c0:	mvn	r4, #1
   310c4:	b	30f5c <__assert_fail@plt+0x1f5bc>
   310c8:	ldr	sl, [r8]
   310cc:	cmp	sl, r1
   310d0:	bhi	30f00 <__assert_fail@plt+0x1f560>
   310d4:	cmp	sl, #0
   310d8:	mov	r6, sl
   310dc:	bgt	30f08 <__assert_fail@plt+0x1f568>
   310e0:	mov	sl, #1
   310e4:	mov	r8, r3
   310e8:	mov	r6, sl
   310ec:	mov	r0, #8
   310f0:	b	30f0c <__assert_fail@plt+0x1f56c>
   310f4:	ldr	r3, [r8]
   310f8:	cmp	r3, sl
   310fc:	bcs	30fbc <__assert_fail@plt+0x1f61c>
   31100:	lsl	r3, sl, #2
   31104:	ldr	r0, [r8, #4]
   31108:	mov	r1, r3
   3110c:	str	r3, [sp, #36]	; 0x24
   31110:	bl	1f170 <__assert_fail@plt+0xd7d0>
   31114:	subs	r2, r0, #0
   31118:	str	r2, [sp, #32]
   3111c:	beq	31170 <__assert_fail@plt+0x1f7d0>
   31120:	ldr	r3, [sp, #36]	; 0x24
   31124:	ldr	r0, [r8, #8]
   31128:	mov	r1, r3
   3112c:	bl	1f170 <__assert_fail@plt+0xd7d0>
   31130:	ldr	r2, [sp, #32]
   31134:	subs	r1, r0, #0
   31138:	movne	r3, sl
   3113c:	strne	sl, [r8]
   31140:	strne	r1, [r8, #8]
   31144:	strne	r2, [r8, #4]
   31148:	bne	30fbc <__assert_fail@plt+0x1f61c>
   3114c:	mov	r0, r2
   31150:	str	r1, [sp, #32]
   31154:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   31158:	ldr	r1, [sp, #32]
   3115c:	mov	r7, r1
   31160:	b	3102c <__assert_fail@plt+0x1f68c>
   31164:	mov	r6, #0
   31168:	mov	r2, r6
   3116c:	b	30ffc <__assert_fail@plt+0x1f65c>
   31170:	mov	r7, #0
   31174:	b	3102c <__assert_fail@plt+0x1f68c>
   31178:	str	r4, [sp, #-8]!
   3117c:	mov	r4, #0
   31180:	str	lr, [sp, #4]
   31184:	sub	sp, sp, #16
   31188:	ldr	lr, [sp, #24]
   3118c:	ldr	ip, [sp, #28]
   31190:	str	lr, [sp]
   31194:	str	r4, [sp, #12]
   31198:	stmib	sp, {r2, ip}
   3119c:	bl	306e8 <__assert_fail@plt+0x1ed48>
   311a0:	add	sp, sp, #16
   311a4:	ldr	r4, [sp]
   311a8:	add	sp, sp, #4
   311ac:	pop	{pc}		; (ldr pc, [sp], #4)
   311b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   311b4:	strd	r6, [sp, #8]
   311b8:	mov	r7, r3
   311bc:	strd	r8, [sp, #16]
   311c0:	str	sl, [sp, #24]
   311c4:	str	lr, [sp, #28]
   311c8:	sub	sp, sp, #24
   311cc:	ldr	r5, [sp, #56]	; 0x38
   311d0:	ldr	r6, [sp, #68]	; 0x44
   311d4:	orr	r3, r5, r2
   311d8:	orrs	r3, r3, r6
   311dc:	bmi	31298 <__assert_fail@plt+0x1f8f8>
   311e0:	adds	r9, r2, r5
   311e4:	mov	r4, r2
   311e8:	bvs	31298 <__assert_fail@plt+0x1f8f8>
   311ec:	cmp	r5, #0
   311f0:	mov	sl, r0
   311f4:	beq	312a0 <__assert_fail@plt+0x1f900>
   311f8:	cmp	r2, #0
   311fc:	str	r1, [sp, #20]
   31200:	moveq	r8, r2
   31204:	bne	31264 <__assert_fail@plt+0x1f8c4>
   31208:	ldr	r0, [sp, #64]	; 0x40
   3120c:	mov	r3, #1
   31210:	mov	ip, #0
   31214:	mov	r2, r9
   31218:	mov	r1, r7
   3121c:	str	ip, [sp]
   31220:	str	r6, [sp, #4]
   31224:	str	r0, [sp, #8]
   31228:	mov	r0, sl
   3122c:	str	r3, [sp, #12]
   31230:	ldr	r3, [sp, #60]	; 0x3c
   31234:	bl	306e8 <__assert_fail@plt+0x1ed48>
   31238:	mov	r4, r0
   3123c:	mov	r0, r8
   31240:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   31244:	mov	r0, r4
   31248:	add	sp, sp, #24
   3124c:	ldrd	r4, [sp]
   31250:	ldrd	r6, [sp, #8]
   31254:	ldrd	r8, [sp, #16]
   31258:	ldr	sl, [sp, #24]
   3125c:	add	sp, sp, #28
   31260:	pop	{pc}		; (ldr pc, [sp], #4)
   31264:	mov	r0, r9
   31268:	bl	1f0c4 <__assert_fail@plt+0xd724>
   3126c:	subs	r8, r0, #0
   31270:	beq	31298 <__assert_fail@plt+0x1f8f8>
   31274:	mov	r2, r4
   31278:	ldr	r1, [sp, #20]
   3127c:	bl	115d4 <memcpy@plt>
   31280:	mov	r1, r7
   31284:	mov	r2, r5
   31288:	add	r0, r8, r4
   3128c:	mov	r7, r8
   31290:	bl	115d4 <memcpy@plt>
   31294:	b	31208 <__assert_fail@plt+0x1f868>
   31298:	mvn	r4, #1
   3129c:	b	31244 <__assert_fail@plt+0x1f8a4>
   312a0:	mov	r7, r1
   312a4:	mov	r8, r5
   312a8:	b	31208 <__assert_fail@plt+0x1f868>
   312ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   312b0:	strd	r6, [sp, #8]
   312b4:	mov	r7, r3
   312b8:	strd	r8, [sp, #16]
   312bc:	str	sl, [sp, #24]
   312c0:	str	lr, [sp, #28]
   312c4:	sub	sp, sp, #24
   312c8:	ldr	r5, [sp, #56]	; 0x38
   312cc:	ldr	r6, [sp, #72]	; 0x48
   312d0:	orr	r3, r5, r2
   312d4:	orrs	r3, r3, r6
   312d8:	bmi	31390 <__assert_fail@plt+0x1f9f0>
   312dc:	adds	r9, r2, r5
   312e0:	mov	r4, r2
   312e4:	bvs	31390 <__assert_fail@plt+0x1f9f0>
   312e8:	cmp	r5, #0
   312ec:	mov	sl, r0
   312f0:	beq	31398 <__assert_fail@plt+0x1f9f8>
   312f4:	cmp	r2, #0
   312f8:	str	r1, [sp, #20]
   312fc:	moveq	r8, r2
   31300:	bne	3135c <__assert_fail@plt+0x1f9bc>
   31304:	ldr	r3, [sp, #64]	; 0x40
   31308:	mov	ip, #0
   3130c:	mov	r2, r9
   31310:	mov	r1, r7
   31314:	mov	r0, sl
   31318:	stm	sp, {r3, r6}
   3131c:	ldr	r3, [sp, #68]	; 0x44
   31320:	str	ip, [sp, #12]
   31324:	str	r3, [sp, #8]
   31328:	ldr	r3, [sp, #60]	; 0x3c
   3132c:	bl	306e8 <__assert_fail@plt+0x1ed48>
   31330:	mov	r4, r0
   31334:	mov	r0, r8
   31338:	bl	1ef94 <__assert_fail@plt+0xd5f4>
   3133c:	mov	r0, r4
   31340:	add	sp, sp, #24
   31344:	ldrd	r4, [sp]
   31348:	ldrd	r6, [sp, #8]
   3134c:	ldrd	r8, [sp, #16]
   31350:	ldr	sl, [sp, #24]
   31354:	add	sp, sp, #28
   31358:	pop	{pc}		; (ldr pc, [sp], #4)
   3135c:	mov	r0, r9
   31360:	bl	1f0c4 <__assert_fail@plt+0xd724>
   31364:	subs	r8, r0, #0
   31368:	beq	31390 <__assert_fail@plt+0x1f9f0>
   3136c:	mov	r2, r4
   31370:	ldr	r1, [sp, #20]
   31374:	bl	115d4 <memcpy@plt>
   31378:	mov	r1, r7
   3137c:	mov	r2, r5
   31380:	add	r0, r8, r4
   31384:	mov	r7, r8
   31388:	bl	115d4 <memcpy@plt>
   3138c:	b	31304 <__assert_fail@plt+0x1f964>
   31390:	mvn	r4, #1
   31394:	b	3133c <__assert_fail@plt+0x1f99c>
   31398:	mov	r7, r1
   3139c:	mov	r8, r5
   313a0:	b	31304 <__assert_fail@plt+0x1f964>
   313a4:	cmp	r2, #0
   313a8:	beq	313d0 <__assert_fail@plt+0x1fa30>
   313ac:	ldrb	ip, [r0, #28]
   313b0:	push	{lr}		; (str lr, [sp, #-4]!)
   313b4:	mov	lr, #1
   313b8:	bfi	ip, lr, #1, #2
   313bc:	strb	ip, [r0, #28]
   313c0:	strd	r2, [r1]
   313c4:	ldr	r3, [sp, #4]
   313c8:	str	r3, [r1, #8]
   313cc:	pop	{pc}		; (ldr pc, [sp], #4)
   313d0:	ldrb	r3, [r0, #28]
   313d4:	bfi	r3, r2, #1, #2
   313d8:	strb	r3, [r0, #28]
   313dc:	str	r2, [r1]
   313e0:	str	r2, [r1, #4]
   313e4:	str	r2, [r1, #8]
   313e8:	bx	lr
   313ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   313f0:	cmp	r1, #1
   313f4:	strd	r6, [sp, #8]
   313f8:	strd	r8, [sp, #16]
   313fc:	strd	sl, [sp, #24]
   31400:	str	lr, [sp, #32]
   31404:	sub	sp, sp, #20
   31408:	str	r2, [sp, #8]
   3140c:	bls	31640 <__assert_fail@plt+0x1fca0>
   31410:	mov	sl, r1
   31414:	mov	r4, r0
   31418:	bl	11778 <__ctype_b_loc@plt>
   3141c:	ldr	r8, [r0]
   31420:	mov	r3, #1
   31424:	mvn	r9, #0
   31428:	mov	r5, r3
   3142c:	mov	fp, #0
   31430:	mov	r7, r3
   31434:	stm	sp, {r5, sl}
   31438:	mov	sl, r4
   3143c:	mov	r4, r9
   31440:	mov	r9, r8
   31444:	b	31468 <__assert_fail@plt+0x1fac8>
   31448:	sub	r3, r5, r4
   3144c:	mov	fp, r5
   31450:	mov	r7, #1
   31454:	str	r3, [sp]
   31458:	ldr	r3, [sp, #4]
   3145c:	add	r5, fp, r7
   31460:	cmp	r5, r3
   31464:	bcs	314e4 <__assert_fail@plt+0x1fb44>
   31468:	ldrb	r6, [sl, r5]
   3146c:	sxth	r8, r6
   31470:	lsl	r3, r8, #1
   31474:	ldrh	r3, [r9, r3]
   31478:	tst	r3, #256	; 0x100
   3147c:	beq	3148c <__assert_fail@plt+0x1faec>
   31480:	bl	11748 <__ctype_tolower_loc@plt>
   31484:	ldr	r3, [r0]
   31488:	ldrb	r6, [r3, r8, lsl #2]
   3148c:	add	r3, sl, r4
   31490:	ldrb	r3, [r3, r7]
   31494:	sxth	r8, r3
   31498:	lsl	r0, r8, #1
   3149c:	ldrh	r0, [r9, r0]
   314a0:	tst	r0, #256	; 0x100
   314a4:	beq	314b4 <__assert_fail@plt+0x1fb14>
   314a8:	bl	11748 <__ctype_tolower_loc@plt>
   314ac:	ldr	r3, [r0]
   314b0:	ldrb	r3, [r3, r8, lsl #2]
   314b4:	cmp	r6, r3
   314b8:	bcc	31448 <__assert_fail@plt+0x1faa8>
   314bc:	beq	31610 <__assert_fail@plt+0x1fc70>
   314c0:	mov	r3, #1
   314c4:	mov	r4, fp
   314c8:	mov	r7, r3
   314cc:	add	fp, fp, r3
   314d0:	str	r3, [sp]
   314d4:	add	r5, fp, r7
   314d8:	ldr	r3, [sp, #4]
   314dc:	cmp	r5, r3
   314e0:	bcc	31468 <__assert_fail@plt+0x1fac8>
   314e4:	mov	r9, r4
   314e8:	mov	r4, sl
   314ec:	ldr	r2, [sp]
   314f0:	mov	sl, r3
   314f4:	mvn	fp, #0
   314f8:	ldr	r3, [sp, #8]
   314fc:	mov	r8, #0
   31500:	str	r2, [r3]
   31504:	mov	r3, #1
   31508:	mov	r5, r3
   3150c:	mov	r7, r3
   31510:	str	r3, [sp]
   31514:	bl	11778 <__ctype_b_loc@plt>
   31518:	ldr	r1, [r0]
   3151c:	str	sl, [sp, #4]
   31520:	mov	sl, r4
   31524:	str	r9, [sp, #12]
   31528:	mov	r9, fp
   3152c:	mov	fp, r1
   31530:	b	31554 <__assert_fail@plt+0x1fbb4>
   31534:	sub	r3, r5, r9
   31538:	mov	r8, r5
   3153c:	mov	r7, #1
   31540:	str	r3, [sp]
   31544:	ldr	r3, [sp, #4]
   31548:	add	r5, r8, r7
   3154c:	cmp	r3, r5
   31550:	bls	315d0 <__assert_fail@plt+0x1fc30>
   31554:	ldrb	r6, [sl, r5]
   31558:	sxth	r4, r6
   3155c:	lsl	r0, r4, #1
   31560:	ldrh	r0, [fp, r0]
   31564:	tst	r0, #256	; 0x100
   31568:	beq	31578 <__assert_fail@plt+0x1fbd8>
   3156c:	bl	11748 <__ctype_tolower_loc@plt>
   31570:	ldr	r0, [r0]
   31574:	ldrb	r6, [r0, r4, lsl #2]
   31578:	add	r0, sl, r9
   3157c:	ldrb	r0, [r0, r7]
   31580:	sxth	r4, r0
   31584:	lsl	ip, r4, #1
   31588:	ldrh	ip, [fp, ip]
   3158c:	tst	ip, #256	; 0x100
   31590:	beq	315a0 <__assert_fail@plt+0x1fc00>
   31594:	bl	11748 <__ctype_tolower_loc@plt>
   31598:	ldr	r0, [r0]
   3159c:	ldrb	r0, [r0, r4, lsl #2]
   315a0:	cmp	r6, r0
   315a4:	bhi	31534 <__assert_fail@plt+0x1fb94>
   315a8:	beq	31628 <__assert_fail@plt+0x1fc88>
   315ac:	mov	r3, #1
   315b0:	mov	r9, r8
   315b4:	mov	r7, r3
   315b8:	add	r8, r8, r3
   315bc:	str	r3, [sp]
   315c0:	add	r5, r8, r7
   315c4:	ldr	r3, [sp, #4]
   315c8:	cmp	r3, r5
   315cc:	bhi	31554 <__assert_fail@plt+0x1fbb4>
   315d0:	add	r2, r9, #1
   315d4:	ldr	r9, [sp, #12]
   315d8:	add	r0, r9, #1
   315dc:	cmp	r2, r0
   315e0:	bcc	315f4 <__assert_fail@plt+0x1fc54>
   315e4:	mov	r0, r2
   315e8:	ldr	r2, [sp]
   315ec:	ldr	r3, [sp, #8]
   315f0:	str	r2, [r3]
   315f4:	add	sp, sp, #20
   315f8:	ldrd	r4, [sp]
   315fc:	ldrd	r6, [sp, #8]
   31600:	ldrd	r8, [sp, #16]
   31604:	ldrd	sl, [sp, #24]
   31608:	add	sp, sp, #32
   3160c:	pop	{pc}		; (ldr pc, [sp], #4)
   31610:	ldr	r3, [sp]
   31614:	cmp	r3, r7
   31618:	addne	r7, r7, #1
   3161c:	addeq	fp, fp, r3
   31620:	moveq	r7, #1
   31624:	b	31458 <__assert_fail@plt+0x1fab8>
   31628:	ldr	r3, [sp]
   3162c:	cmp	r3, r7
   31630:	addne	r7, r7, #1
   31634:	addeq	r8, r8, r3
   31638:	moveq	r7, #1
   3163c:	b	31544 <__assert_fail@plt+0x1fba4>
   31640:	mov	r3, #1
   31644:	mov	r2, #0
   31648:	str	r3, [sp]
   3164c:	b	315e4 <__assert_fail@plt+0x1fc44>
   31650:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31654:	cmp	r3, #2
   31658:	mov	r4, r3
   3165c:	strd	r6, [sp, #8]
   31660:	mov	r6, r0
   31664:	mov	r7, r1
   31668:	strd	r8, [sp, #16]
   3166c:	strd	sl, [sp, #24]
   31670:	str	lr, [sp, #32]
   31674:	sub	sp, sp, #1088	; 0x440
   31678:	sub	sp, sp, #4
   3167c:	str	r2, [sp, #4]
   31680:	bls	31cbc <__assert_fail@plt+0x2031c>
   31684:	add	r5, sp, #64	; 0x40
   31688:	mov	r0, r2
   3168c:	mov	r1, r3
   31690:	sub	r2, r5, #4
   31694:	bl	313ec <__assert_fail@plt+0x1fa4c>
   31698:	ldr	r3, [sp, #60]	; 0x3c
   3169c:	str	r0, [sp, #16]
   316a0:	str	r3, [sp, #24]
   316a4:	mov	r3, r5
   316a8:	add	r2, sp, #1088	; 0x440
   316ac:	add	r3, r3, #8
   316b0:	str	r4, [r3, #-8]
   316b4:	str	r4, [r3, #-4]
   316b8:	cmp	r3, r2
   316bc:	bne	316a8 <__assert_fail@plt+0x1fd08>
   316c0:	ldr	r9, [sp, #4]
   316c4:	cmp	r4, #0
   316c8:	ldr	r3, [sp, #24]
   316cc:	add	r8, r9, r3
   316d0:	beq	3191c <__assert_fail@plt+0x1ff7c>
   316d4:	bl	11778 <__ctype_b_loc@plt>
   316d8:	ldr	r5, [r0]
   316dc:	mov	r3, r9
   316e0:	sub	r2, r4, #1
   316e4:	add	fp, r3, r2
   316e8:	mov	r3, r7
   316ec:	sub	r9, r9, #1
   316f0:	mov	r7, r6
   316f4:	str	r2, [sp, #32]
   316f8:	mov	r6, fp
   316fc:	mov	fp, r3
   31700:	ldrb	r1, [r9, #1]!
   31704:	add	r2, sp, #1088	; 0x440
   31708:	sxth	sl, r1
   3170c:	add	r1, r2, r1, lsl #2
   31710:	ldr	r2, [sp, #4]
   31714:	lsl	r0, sl, #1
   31718:	mvn	r3, r9
   3171c:	add	r3, r3, r4
   31720:	ldrh	r0, [r5, r0]
   31724:	add	r3, r2, r3
   31728:	tst	r0, #256	; 0x100
   3172c:	beq	3190c <__assert_fail@plt+0x1ff6c>
   31730:	bl	11748 <__ctype_tolower_loc@plt>
   31734:	ldr	r1, [r0]
   31738:	mvn	r3, r9
   3173c:	cmp	r6, r9
   31740:	add	r3, r3, r4
   31744:	ldr	r2, [sp, #4]
   31748:	ldr	r1, [r1, sl, lsl #2]
   3174c:	add	r3, r2, r3
   31750:	add	r2, sp, #1088	; 0x440
   31754:	add	r1, r2, r1, lsl #2
   31758:	str	r3, [r1, #-1024]	; 0xfffffc00
   3175c:	bne	31700 <__assert_fail@plt+0x1fd60>
   31760:	mov	r1, r8
   31764:	ldr	r0, [sp, #4]
   31768:	mov	r6, r7
   3176c:	mov	r7, fp
   31770:	ldr	r2, [sp, #16]
   31774:	bl	117f0 <strncasecmp@plt>
   31778:	subs	r9, r0, #0
   3177c:	beq	31a10 <__assert_fail@plt+0x20070>
   31780:	ldr	r2, [sp, #16]
   31784:	str	r6, [sp, #8]
   31788:	str	r4, [sp, #12]
   3178c:	ldr	fp, [sp, #32]
   31790:	sub	r1, r2, #1
   31794:	sub	r3, r4, r2
   31798:	cmp	r3, r2
   3179c:	str	r1, [sp, #20]
   317a0:	mov	r1, #0
   317a4:	movcc	r3, r2
   317a8:	add	r3, r3, #1
   317ac:	str	r1, [sp]
   317b0:	ldr	r1, [sp, #4]
   317b4:	str	r3, [sp, #28]
   317b8:	str	r3, [sp, #60]	; 0x3c
   317bc:	add	r1, r1, r2
   317c0:	rsb	r2, r2, #1
   317c4:	str	r2, [sp, #24]
   317c8:	mov	r2, r7
   317cc:	str	r1, [sp, #36]	; 0x24
   317d0:	b	317e4 <__assert_fail@plt+0x1fe44>
   317d4:	ldr	r2, [sp]
   317d8:	add	r3, r2, r3
   317dc:	str	r3, [sp]
   317e0:	mov	r2, r9
   317e4:	ldr	r1, [sp]
   317e8:	ldr	r3, [sp, #12]
   317ec:	add	r9, r3, r1
   317f0:	ldr	r3, [sp, #8]
   317f4:	mov	r1, #0
   317f8:	add	r0, r3, r2
   317fc:	sub	r2, r9, r2
   31800:	bl	1185c <memchr@plt>
   31804:	adds	r3, r9, #0
   31808:	movne	r3, #1
   3180c:	cmp	r0, #0
   31810:	moveq	r0, r3
   31814:	movne	r0, #0
   31818:	cmp	r0, #0
   3181c:	beq	3193c <__assert_fail@plt+0x1ff9c>
   31820:	bl	11778 <__ctype_b_loc@plt>
   31824:	ldr	r3, [sp, #8]
   31828:	ldr	r7, [r0]
   3182c:	add	r3, r3, r9
   31830:	ldrb	r3, [r3, #-1]
   31834:	sxth	r5, r3
   31838:	lsl	r2, r5, #1
   3183c:	ldrh	r2, [r7, r2]
   31840:	tst	r2, #256	; 0x100
   31844:	beq	31854 <__assert_fail@plt+0x1feb4>
   31848:	bl	11748 <__ctype_tolower_loc@plt>
   3184c:	ldr	r3, [r0]
   31850:	ldr	r3, [r3, r5, lsl #2]
   31854:	add	r2, sp, #1088	; 0x440
   31858:	add	r3, r2, r3, lsl #2
   3185c:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   31860:	cmp	r3, #0
   31864:	bne	317d4 <__assert_fail@plt+0x1fe34>
   31868:	ldr	r8, [sp, #16]
   3186c:	cmp	r8, fp
   31870:	bcs	31960 <__assert_fail@plt+0x1ffc0>
   31874:	ldr	r3, [sp]
   31878:	ldr	r2, [sp, #4]
   3187c:	ldr	r1, [sp, #20]
   31880:	add	r3, r8, r3
   31884:	add	r6, r2, r1
   31888:	ldr	r2, [sp, #8]
   3188c:	add	r4, r2, r3
   31890:	b	318a0 <__assert_fail@plt+0x1ff00>
   31894:	add	r8, r8, #1
   31898:	cmp	r8, fp
   3189c:	bcs	31960 <__assert_fail@plt+0x1ffc0>
   318a0:	ldrb	r3, [r6, #1]!
   318a4:	sxth	sl, r3
   318a8:	mov	r5, r3
   318ac:	lsl	r3, sl, #1
   318b0:	ldrh	r3, [r7, r3]
   318b4:	tst	r3, #256	; 0x100
   318b8:	beq	318c8 <__assert_fail@plt+0x1ff28>
   318bc:	bl	11748 <__ctype_tolower_loc@plt>
   318c0:	ldr	r3, [r0]
   318c4:	ldr	r5, [r3, sl, lsl #2]
   318c8:	ldrb	r3, [r4], #1
   318cc:	sxth	sl, r3
   318d0:	lsl	r2, sl, #1
   318d4:	ldrh	r2, [r7, r2]
   318d8:	tst	r2, #256	; 0x100
   318dc:	beq	318ec <__assert_fail@plt+0x1ff4c>
   318e0:	bl	11748 <__ctype_tolower_loc@plt>
   318e4:	ldr	r3, [r0]
   318e8:	ldr	r3, [r3, sl, lsl #2]
   318ec:	cmp	r5, r3
   318f0:	beq	31894 <__assert_fail@plt+0x1fef4>
   318f4:	ldr	r2, [sp]
   318f8:	ldr	r3, [sp, #24]
   318fc:	add	sl, r3, r2
   31900:	add	r3, r8, sl
   31904:	str	r3, [sp]
   31908:	b	317e0 <__assert_fail@plt+0x1fe40>
   3190c:	cmp	r6, r9
   31910:	str	r3, [r1, #-1024]	; 0xfffffc00
   31914:	bne	31700 <__assert_fail@plt+0x1fd60>
   31918:	b	31760 <__assert_fail@plt+0x1fdc0>
   3191c:	mov	r0, r9
   31920:	mov	r1, r8
   31924:	ldr	r2, [sp, #16]
   31928:	bl	117f0 <strncasecmp@plt>
   3192c:	cmp	r0, #0
   31930:	mvnne	r3, #0
   31934:	strne	r3, [sp, #32]
   31938:	bne	31780 <__assert_fail@plt+0x1fde0>
   3193c:	mov	r0, #0
   31940:	add	sp, sp, #1088	; 0x440
   31944:	add	sp, sp, #4
   31948:	ldrd	r4, [sp]
   3194c:	ldrd	r6, [sp, #8]
   31950:	ldrd	r8, [sp, #16]
   31954:	ldrd	sl, [sp, #24]
   31958:	add	sp, sp, #32
   3195c:	pop	{pc}		; (ldr pc, [sp], #4)
   31960:	ldr	r3, [sp, #20]
   31964:	cmn	r3, #1
   31968:	beq	31cac <__assert_fail@plt+0x2030c>
   3196c:	ldm	sp, {r2, r8}
   31970:	str	r9, [sp, #32]
   31974:	ldr	r3, [sp, #16]
   31978:	ldr	r5, [sp, #36]	; 0x24
   3197c:	add	r1, r3, r2
   31980:	ldr	r3, [sp, #8]
   31984:	add	r4, r3, r1
   31988:	b	31998 <__assert_fail@plt+0x1fff8>
   3198c:	cmn	r5, #1
   31990:	mov	r5, r6
   31994:	beq	31cac <__assert_fail@plt+0x2030c>
   31998:	ldrb	r3, [r5, #-1]
   3199c:	sub	r6, r5, #1
   319a0:	sxth	r9, r3
   319a4:	mov	sl, r3
   319a8:	lsl	r3, r9, #1
   319ac:	ldrh	r3, [r7, r3]
   319b0:	tst	r3, #256	; 0x100
   319b4:	beq	319c4 <__assert_fail@plt+0x20024>
   319b8:	bl	11748 <__ctype_tolower_loc@plt>
   319bc:	ldr	r3, [r0]
   319c0:	ldr	sl, [r3, r9, lsl #2]
   319c4:	ldrb	r3, [r4, #-1]!
   319c8:	sxth	r9, r3
   319cc:	lsl	r1, r9, #1
   319d0:	ldrh	r1, [r7, r1]
   319d4:	tst	r1, #256	; 0x100
   319d8:	beq	319e8 <__assert_fail@plt+0x20048>
   319dc:	bl	11748 <__ctype_tolower_loc@plt>
   319e0:	ldr	r3, [r0]
   319e4:	ldr	r3, [r3, r9, lsl #2]
   319e8:	sub	r5, r5, #2
   319ec:	cmp	sl, r3
   319f0:	sub	r5, r5, r8
   319f4:	beq	3198c <__assert_fail@plt+0x1ffec>
   319f8:	ldr	r3, [sp]
   319fc:	ldr	r2, [sp, #28]
   31a00:	ldr	r9, [sp, #32]
   31a04:	add	r3, r3, r2
   31a08:	str	r3, [sp]
   31a0c:	b	317e0 <__assert_fail@plt+0x1fe40>
   31a10:	ldr	r2, [sp, #4]
   31a14:	sub	r3, r4, #2
   31a18:	str	r9, [sp]
   31a1c:	str	r6, [sp, #8]
   31a20:	str	r9, [sp, #12]
   31a24:	str	r4, [sp, #20]
   31a28:	add	r3, r2, r3
   31a2c:	rsb	r9, r2, #1
   31a30:	mov	r2, fp
   31a34:	str	r3, [sp, #36]	; 0x24
   31a38:	ldr	r3, [sp, #16]
   31a3c:	sub	r1, r3, #1
   31a40:	rsb	r3, r3, #1
   31a44:	str	r3, [sp, #40]	; 0x28
   31a48:	str	r1, [sp, #52]	; 0x34
   31a4c:	ldr	r1, [sp, #24]
   31a50:	sub	r1, r4, r1
   31a54:	str	r1, [sp, #44]	; 0x2c
   31a58:	b	31a88 <__assert_fail@plt+0x200e8>
   31a5c:	ldr	r1, [sp, #12]
   31a60:	ldr	r2, [sp, #24]
   31a64:	cmp	r1, #0
   31a68:	cmpne	r3, r2
   31a6c:	ldr	r2, [sp]
   31a70:	ldrcc	r3, [sp, #44]	; 0x2c
   31a74:	add	r3, r2, r3
   31a78:	str	r3, [sp]
   31a7c:	mov	r3, #0
   31a80:	str	r3, [sp, #12]
   31a84:	mov	r2, r6
   31a88:	ldr	r1, [sp]
   31a8c:	ldr	r3, [sp, #20]
   31a90:	add	r6, r3, r1
   31a94:	ldr	r3, [sp, #8]
   31a98:	mov	r1, #0
   31a9c:	add	r0, r3, r2
   31aa0:	sub	r2, r6, r2
   31aa4:	bl	1185c <memchr@plt>
   31aa8:	adds	r3, r6, #0
   31aac:	movne	r3, #1
   31ab0:	cmp	r0, #0
   31ab4:	moveq	r0, r3
   31ab8:	movne	r0, #0
   31abc:	cmp	r0, #0
   31ac0:	beq	3193c <__assert_fail@plt+0x1ff9c>
   31ac4:	ldr	r3, [sp, #8]
   31ac8:	add	r3, r3, r6
   31acc:	ldrb	r3, [r3, #-1]
   31ad0:	sxth	r4, r3
   31ad4:	lsl	r2, r4, #1
   31ad8:	ldrh	r2, [r5, r2]
   31adc:	tst	r2, #256	; 0x100
   31ae0:	beq	31af0 <__assert_fail@plt+0x20150>
   31ae4:	bl	11748 <__ctype_tolower_loc@plt>
   31ae8:	ldr	r3, [r0]
   31aec:	ldr	r3, [r3, r4, lsl #2]
   31af0:	add	r2, sp, #1088	; 0x440
   31af4:	add	r3, r2, r3, lsl #2
   31af8:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   31afc:	cmp	r3, #0
   31b00:	bne	31a5c <__assert_fail@plt+0x200bc>
   31b04:	ldrd	r2, [sp, #12]
   31b08:	cmp	r3, r2
   31b0c:	movcc	r3, r2
   31b10:	ldr	r2, [sp, #32]
   31b14:	cmp	r3, r2
   31b18:	bcs	31bcc <__assert_fail@plt+0x2022c>
   31b1c:	ldr	r2, [sp]
   31b20:	sub	fp, r3, #1
   31b24:	str	r6, [sp, #28]
   31b28:	ldr	r8, [sp, #36]	; 0x24
   31b2c:	add	r3, r3, r2
   31b30:	ldr	r2, [sp, #4]
   31b34:	add	fp, r2, fp
   31b38:	ldr	r2, [sp, #8]
   31b3c:	add	sl, r2, r3
   31b40:	b	31b4c <__assert_fail@plt+0x201ac>
   31b44:	cmp	r8, fp
   31b48:	beq	31bc8 <__assert_fail@plt+0x20228>
   31b4c:	add	r7, r9, fp
   31b50:	ldrb	r3, [fp, #1]!
   31b54:	sxth	r6, r3
   31b58:	mov	r4, r3
   31b5c:	lsl	r3, r6, #1
   31b60:	ldrh	r3, [r5, r3]
   31b64:	tst	r3, #256	; 0x100
   31b68:	beq	31b78 <__assert_fail@plt+0x201d8>
   31b6c:	bl	11748 <__ctype_tolower_loc@plt>
   31b70:	ldr	r3, [r0]
   31b74:	ldr	r4, [r3, r6, lsl #2]
   31b78:	ldrb	r3, [sl], #1
   31b7c:	sxth	r6, r3
   31b80:	lsl	r1, r6, #1
   31b84:	ldrh	r1, [r5, r1]
   31b88:	tst	r1, #256	; 0x100
   31b8c:	beq	31b9c <__assert_fail@plt+0x201fc>
   31b90:	bl	11748 <__ctype_tolower_loc@plt>
   31b94:	ldr	r3, [r0]
   31b98:	ldr	r3, [r3, r6, lsl #2]
   31b9c:	cmp	r4, r3
   31ba0:	beq	31b44 <__assert_fail@plt+0x201a4>
   31ba4:	ldr	r2, [sp]
   31ba8:	ldr	r6, [sp, #28]
   31bac:	ldr	r3, [sp, #40]	; 0x28
   31bb0:	add	r3, r3, r2
   31bb4:	mov	r2, #0
   31bb8:	add	r3, r3, r7
   31bbc:	str	r3, [sp]
   31bc0:	str	r2, [sp, #12]
   31bc4:	b	31a84 <__assert_fail@plt+0x200e4>
   31bc8:	ldr	r6, [sp, #28]
   31bcc:	ldr	r0, [sp, #12]
   31bd0:	ldr	r3, [sp, #16]
   31bd4:	ldr	r7, [sp, #52]	; 0x34
   31bd8:	cmp	r3, r0
   31bdc:	bls	31cec <__assert_fail@plt+0x2034c>
   31be0:	ldr	r2, [sp]
   31be4:	str	r6, [sp, #28]
   31be8:	ldr	r1, [sp, #4]
   31bec:	str	r9, [sp, #48]	; 0x30
   31bf0:	add	r2, r3, r2
   31bf4:	add	r1, r1, r3
   31bf8:	ldr	r3, [sp, #8]
   31bfc:	mov	r9, r1
   31c00:	add	fp, r3, r2
   31c04:	mov	r6, fp
   31c08:	mov	fp, r0
   31c0c:	b	31c1c <__assert_fail@plt+0x2027c>
   31c10:	cmp	fp, r7
   31c14:	mov	r7, r3
   31c18:	beq	31cd8 <__assert_fail@plt+0x20338>
   31c1c:	ldrb	r4, [r9, #-1]!
   31c20:	add	sl, r7, #1
   31c24:	sxth	r8, r4
   31c28:	lsl	r3, r8, #1
   31c2c:	ldrh	r3, [r5, r3]
   31c30:	tst	r3, #256	; 0x100
   31c34:	beq	31c44 <__assert_fail@plt+0x202a4>
   31c38:	bl	11748 <__ctype_tolower_loc@plt>
   31c3c:	ldr	r3, [r0]
   31c40:	ldr	r4, [r3, r8, lsl #2]
   31c44:	ldrb	r3, [r6, #-1]!
   31c48:	sxth	r8, r3
   31c4c:	lsl	r0, r8, #1
   31c50:	ldrh	r0, [r5, r0]
   31c54:	tst	r0, #256	; 0x100
   31c58:	beq	31c68 <__assert_fail@plt+0x202c8>
   31c5c:	bl	11748 <__ctype_tolower_loc@plt>
   31c60:	ldr	r3, [r0]
   31c64:	ldr	r3, [r3, r8, lsl #2]
   31c68:	cmp	r4, r3
   31c6c:	sub	r3, r7, #1
   31c70:	beq	31c10 <__assert_fail@plt+0x20270>
   31c74:	ldr	r6, [sp, #28]
   31c78:	mov	r2, sl
   31c7c:	ldr	r9, [sp, #48]	; 0x30
   31c80:	ldr	r3, [sp, #12]
   31c84:	add	r8, r3, #1
   31c88:	cmp	r8, r2
   31c8c:	bhi	31cac <__assert_fail@plt+0x2030c>
   31c90:	ldr	r3, [sp]
   31c94:	ldr	r2, [sp, #24]
   31c98:	add	r3, r3, r2
   31c9c:	str	r3, [sp]
   31ca0:	ldr	r3, [sp, #44]	; 0x2c
   31ca4:	str	r3, [sp, #12]
   31ca8:	b	31a84 <__assert_fail@plt+0x200e4>
   31cac:	ldr	r3, [sp]
   31cb0:	ldr	r6, [sp, #8]
   31cb4:	add	r0, r6, r3
   31cb8:	b	31940 <__assert_fail@plt+0x1ffa0>
   31cbc:	mov	r3, #1
   31cc0:	sub	r2, r4, #1
   31cc4:	add	r5, sp, #64	; 0x40
   31cc8:	str	r2, [sp, #16]
   31ccc:	str	r3, [sp, #24]
   31cd0:	str	r3, [sp, #60]	; 0x3c
   31cd4:	b	316a4 <__assert_fail@plt+0x1fd04>
   31cd8:	ldr	r3, [sp, #12]
   31cdc:	ldr	r6, [sp, #28]
   31ce0:	ldr	r9, [sp, #48]	; 0x30
   31ce4:	mov	r2, r3
   31ce8:	b	31c80 <__assert_fail@plt+0x202e0>
   31cec:	mov	r2, r3
   31cf0:	b	31c80 <__assert_fail@plt+0x202e0>
   31cf4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31cf8:	strd	r6, [sp, #8]
   31cfc:	strd	r8, [sp, #16]
   31d00:	strd	sl, [sp, #24]
   31d04:	str	lr, [sp, #32]
   31d08:	sub	sp, sp, #68	; 0x44
   31d0c:	ldrb	r6, [r0]
   31d10:	ldrb	r5, [r1]
   31d14:	cmp	r6, #0
   31d18:	beq	32290 <__assert_fail@plt+0x208f0>
   31d1c:	cmp	r5, #0
   31d20:	beq	31df8 <__assert_fail@plt+0x20458>
   31d24:	mov	r4, r1
   31d28:	mov	fp, r0
   31d2c:	add	r8, r1, #1
   31d30:	mov	r9, #1
   31d34:	stm	sp, {r4, fp}
   31d38:	bl	11778 <__ctype_b_loc@plt>
   31d3c:	str	r0, [sp, #12]
   31d40:	ldr	sl, [r0]
   31d44:	b	31d50 <__assert_fail@plt+0x203b0>
   31d48:	cmp	r5, #0
   31d4c:	beq	31dbc <__assert_fail@plt+0x2041c>
   31d50:	sxth	r7, r6
   31d54:	mov	r4, r6
   31d58:	lsl	r3, r7, #1
   31d5c:	ldrh	r3, [sl, r3]
   31d60:	tst	r3, #256	; 0x100
   31d64:	beq	31d74 <__assert_fail@plt+0x203d4>
   31d68:	bl	11748 <__ctype_tolower_loc@plt>
   31d6c:	ldr	r3, [r0]
   31d70:	ldr	r4, [r3, r7, lsl #2]
   31d74:	sxth	r6, r5
   31d78:	lsl	r3, r6, #1
   31d7c:	ldrh	r3, [sl, r3]
   31d80:	tst	r3, #256	; 0x100
   31d84:	beq	31d94 <__assert_fail@plt+0x203f4>
   31d88:	bl	11748 <__ctype_tolower_loc@plt>
   31d8c:	ldr	r3, [r0]
   31d90:	ldr	r5, [r3, r6, lsl #2]
   31d94:	cmp	r4, r5
   31d98:	movne	r9, #0
   31d9c:	andeq	r9, r9, #1
   31da0:	mov	r4, r8
   31da4:	ldrb	r6, [fp, #1]!
   31da8:	ldrb	r5, [r8], #1
   31dac:	cmp	r6, #0
   31db0:	bne	31d48 <__assert_fail@plt+0x203a8>
   31db4:	cmp	r5, #0
   31db8:	bne	31e14 <__assert_fail@plt+0x20474>
   31dbc:	cmp	r9, #0
   31dc0:	bne	32094 <__assert_fail@plt+0x206f4>
   31dc4:	ldr	r3, [sp]
   31dc8:	sub	r4, r4, r3
   31dcc:	ldr	r3, [sp, #4]
   31dd0:	cmp	r4, #31
   31dd4:	sub	r5, r4, #1
   31dd8:	add	r3, r3, #1
   31ddc:	str	r3, [sp, #4]
   31de0:	bls	31e1c <__assert_fail@plt+0x2047c>
   31de4:	mov	r0, r3
   31de8:	mov	r1, r5
   31dec:	ldr	r2, [sp]
   31df0:	mov	r3, r4
   31df4:	bl	31650 <__assert_fail@plt+0x1fcb0>
   31df8:	add	sp, sp, #68	; 0x44
   31dfc:	ldrd	r4, [sp]
   31e00:	ldrd	r6, [sp, #8]
   31e04:	ldrd	r8, [sp, #16]
   31e08:	ldrd	sl, [sp, #24]
   31e0c:	add	sp, sp, #32
   31e10:	pop	{pc}		; (ldr pc, [sp], #4)
   31e14:	mov	r0, #0
   31e18:	b	31df8 <__assert_fail@plt+0x20458>
   31e1c:	cmp	r4, #2
   31e20:	bls	32274 <__assert_fail@plt+0x208d4>
   31e24:	add	r2, sp, #60	; 0x3c
   31e28:	mov	r1, r4
   31e2c:	ldr	r0, [sp]
   31e30:	bl	313ec <__assert_fail@plt+0x1fa4c>
   31e34:	ldr	r3, [sp, #60]	; 0x3c
   31e38:	mov	r2, r0
   31e3c:	str	r0, [sp, #16]
   31e40:	mov	r1, r3
   31e44:	str	r3, [sp, #36]	; 0x24
   31e48:	ldr	r3, [sp]
   31e4c:	add	r1, r3, r1
   31e50:	mov	r0, r3
   31e54:	bl	117f0 <strncasecmp@plt>
   31e58:	subs	sl, r0, #0
   31e5c:	bne	320ac <__assert_fail@plt+0x2070c>
   31e60:	ldr	r3, [sp]
   31e64:	str	sl, [sp, #8]
   31e68:	ldr	r2, [sp, #16]
   31e6c:	str	r4, [sp, #20]
   31e70:	str	sl, [sp, #24]
   31e74:	sub	r8, r3, #1
   31e78:	rsb	r7, r3, #1
   31e7c:	add	r6, r8, r4
   31e80:	sub	r1, r2, #1
   31e84:	rsb	r3, r2, #1
   31e88:	mov	r2, r5
   31e8c:	str	r3, [sp, #32]
   31e90:	str	r1, [sp, #48]	; 0x30
   31e94:	ldr	r1, [sp, #36]	; 0x24
   31e98:	sub	r1, r4, r1
   31e9c:	str	r1, [sp, #52]	; 0x34
   31ea0:	ldr	r1, [sp, #8]
   31ea4:	ldr	r3, [sp, #20]
   31ea8:	add	r4, r3, r1
   31eac:	ldr	r3, [sp, #4]
   31eb0:	mov	r1, #0
   31eb4:	str	r4, [sp, #28]
   31eb8:	add	r0, r3, r2
   31ebc:	sub	r2, r4, r2
   31ec0:	bl	1185c <memchr@plt>
   31ec4:	clz	r0, r0
   31ec8:	cmp	r4, #0
   31ecc:	lsr	r0, r0, #5
   31ed0:	moveq	r0, #0
   31ed4:	cmp	r0, #0
   31ed8:	beq	31e14 <__assert_fail@plt+0x20474>
   31edc:	ldr	r3, [sp, #16]
   31ee0:	ldr	r2, [sp, #24]
   31ee4:	cmp	r3, r2
   31ee8:	movcc	r3, r2
   31eec:	ldr	r2, [sp, #20]
   31ef0:	cmp	r2, r3
   31ef4:	bls	31fb4 <__assert_fail@plt+0x20614>
   31ef8:	ldr	r2, [sp, #8]
   31efc:	sub	r5, r3, #1
   31f00:	sub	fp, r2, #1
   31f04:	ldr	r2, [sp, #12]
   31f08:	add	fp, fp, r3
   31f0c:	ldr	r3, [sp]
   31f10:	ldr	sl, [r2]
   31f14:	add	r5, r3, r5
   31f18:	ldr	r3, [sp, #4]
   31f1c:	add	fp, r3, fp
   31f20:	b	31f2c <__assert_fail@plt+0x2058c>
   31f24:	cmp	r6, r5
   31f28:	beq	31fb4 <__assert_fail@plt+0x20614>
   31f2c:	add	r9, r7, r5
   31f30:	ldrb	r3, [r5, #1]!
   31f34:	sxth	r8, r3
   31f38:	mov	r4, r3
   31f3c:	lsl	r3, r8, #1
   31f40:	ldrh	r3, [sl, r3]
   31f44:	tst	r3, #256	; 0x100
   31f48:	beq	31f58 <__assert_fail@plt+0x205b8>
   31f4c:	bl	11748 <__ctype_tolower_loc@plt>
   31f50:	ldr	r3, [r0]
   31f54:	ldr	r4, [r3, r8, lsl #2]
   31f58:	ldrb	r3, [fp, #1]!
   31f5c:	sxth	r8, r3
   31f60:	lsl	r2, r8, #1
   31f64:	ldrh	r2, [sl, r2]
   31f68:	tst	r2, #256	; 0x100
   31f6c:	beq	31f7c <__assert_fail@plt+0x205dc>
   31f70:	bl	11748 <__ctype_tolower_loc@plt>
   31f74:	ldr	r3, [r0]
   31f78:	ldr	r3, [r3, r8, lsl #2]
   31f7c:	cmp	r4, r3
   31f80:	beq	31f24 <__assert_fail@plt+0x20584>
   31f84:	ldr	r3, [sp, #20]
   31f88:	cmp	r3, r9
   31f8c:	bls	31fb4 <__assert_fail@plt+0x20614>
   31f90:	ldr	r2, [sp, #8]
   31f94:	ldr	r3, [sp, #32]
   31f98:	add	r3, r3, r2
   31f9c:	mov	r2, #0
   31fa0:	add	r3, r3, r9
   31fa4:	str	r3, [sp, #8]
   31fa8:	str	r2, [sp, #24]
   31fac:	ldr	r2, [sp, #28]
   31fb0:	b	31ea0 <__assert_fail@plt+0x20500>
   31fb4:	ldr	r3, [sp, #16]
   31fb8:	ldr	r2, [sp, #24]
   31fbc:	ldr	r5, [sp, #48]	; 0x30
   31fc0:	cmp	r3, r2
   31fc4:	bls	320a4 <__assert_fail@plt+0x20704>
   31fc8:	ldr	r1, [sp, #8]
   31fcc:	strd	r6, [sp, #40]	; 0x28
   31fd0:	add	r9, r3, r1
   31fd4:	ldr	r1, [sp]
   31fd8:	add	sl, r1, r3
   31fdc:	ldr	r3, [sp, #12]
   31fe0:	mov	r7, sl
   31fe4:	mov	sl, r2
   31fe8:	ldr	fp, [r3]
   31fec:	ldr	r3, [sp, #4]
   31ff0:	add	r9, r3, r9
   31ff4:	mov	r6, r9
   31ff8:	b	32008 <__assert_fail@plt+0x20668>
   31ffc:	cmp	sl, r5
   32000:	mov	r5, r3
   32004:	beq	3209c <__assert_fail@plt+0x206fc>
   32008:	ldrb	r4, [r7, #-1]!
   3200c:	add	r9, r5, #1
   32010:	sxth	r8, r4
   32014:	lsl	r3, r8, #1
   32018:	ldrh	r3, [fp, r3]
   3201c:	tst	r3, #256	; 0x100
   32020:	beq	32030 <__assert_fail@plt+0x20690>
   32024:	bl	11748 <__ctype_tolower_loc@plt>
   32028:	ldr	r3, [r0]
   3202c:	ldr	r4, [r3, r8, lsl #2]
   32030:	ldrb	r3, [r6, #-1]!
   32034:	sxth	r8, r3
   32038:	lsl	r0, r8, #1
   3203c:	ldrh	r0, [fp, r0]
   32040:	tst	r0, #256	; 0x100
   32044:	beq	32054 <__assert_fail@plt+0x206b4>
   32048:	bl	11748 <__ctype_tolower_loc@plt>
   3204c:	ldr	r3, [r0]
   32050:	ldr	r3, [r3, r8, lsl #2]
   32054:	cmp	r4, r3
   32058:	sub	r3, r5, #1
   3205c:	beq	31ffc <__assert_fail@plt+0x2065c>
   32060:	ldrd	r6, [sp, #40]	; 0x28
   32064:	mov	r2, r9
   32068:	ldr	r3, [sp, #24]
   3206c:	add	r8, r3, #1
   32070:	cmp	r8, r2
   32074:	bhi	3229c <__assert_fail@plt+0x208fc>
   32078:	ldr	r3, [sp, #8]
   3207c:	ldr	r2, [sp, #36]	; 0x24
   32080:	add	r3, r3, r2
   32084:	str	r3, [sp, #8]
   32088:	ldr	r3, [sp, #52]	; 0x34
   3208c:	str	r3, [sp, #24]
   32090:	b	31fac <__assert_fail@plt+0x2060c>
   32094:	ldr	r0, [sp, #4]
   32098:	b	31df8 <__assert_fail@plt+0x20458>
   3209c:	ldr	r3, [sp, #24]
   320a0:	ldrd	r6, [sp, #40]	; 0x28
   320a4:	mov	r2, r3
   320a8:	b	32068 <__assert_fail@plt+0x206c8>
   320ac:	ldr	r2, [sp, #16]
   320b0:	mov	r7, #0
   320b4:	sub	r1, r2, #1
   320b8:	sub	r3, r4, r2
   320bc:	cmp	r3, r2
   320c0:	str	r1, [sp, #20]
   320c4:	rsb	r1, r2, #1
   320c8:	movcc	r3, r2
   320cc:	add	r3, r3, #1
   320d0:	str	r1, [sp, #24]
   320d4:	ldr	r1, [sp]
   320d8:	str	r3, [sp, #32]
   320dc:	str	r3, [sp, #60]	; 0x3c
   320e0:	add	r2, r1, r2
   320e4:	str	r2, [sp, #36]	; 0x24
   320e8:	mov	r2, r5
   320ec:	ldr	r9, [sp, #4]
   320f0:	add	r5, r4, r7
   320f4:	mov	r1, #0
   320f8:	str	r5, [sp, #8]
   320fc:	add	r0, r9, r2
   32100:	sub	r2, r5, r2
   32104:	bl	1185c <memchr@plt>
   32108:	clz	r0, r0
   3210c:	cmp	r5, #0
   32110:	lsr	r0, r0, #5
   32114:	moveq	r0, #0
   32118:	cmp	r0, #0
   3211c:	beq	31e14 <__assert_fail@plt+0x20474>
   32120:	ldr	r6, [sp, #16]
   32124:	cmp	r4, r6
   32128:	bls	321c8 <__assert_fail@plt+0x20828>
   3212c:	ldr	r2, [sp]
   32130:	ldr	r3, [sp, #20]
   32134:	add	r8, r7, r3
   32138:	add	sl, r2, r3
   3213c:	ldr	r3, [sp, #12]
   32140:	add	r8, r9, r8
   32144:	ldr	fp, [r3]
   32148:	b	32158 <__assert_fail@plt+0x207b8>
   3214c:	add	r6, r6, #1
   32150:	cmp	r4, r6
   32154:	bls	321c8 <__assert_fail@plt+0x20828>
   32158:	ldrb	r3, [sl, #1]!
   3215c:	sxth	r9, r3
   32160:	mov	r5, r3
   32164:	lsl	r3, r9, #1
   32168:	ldrh	r3, [fp, r3]
   3216c:	tst	r3, #256	; 0x100
   32170:	beq	32180 <__assert_fail@plt+0x207e0>
   32174:	bl	11748 <__ctype_tolower_loc@plt>
   32178:	ldr	r3, [r0]
   3217c:	ldr	r5, [r3, r9, lsl #2]
   32180:	ldrb	r3, [r8, #1]!
   32184:	sxth	r9, r3
   32188:	lsl	r2, r9, #1
   3218c:	ldrh	r2, [fp, r2]
   32190:	tst	r2, #256	; 0x100
   32194:	beq	321a4 <__assert_fail@plt+0x20804>
   32198:	bl	11748 <__ctype_tolower_loc@plt>
   3219c:	ldr	r3, [r0]
   321a0:	ldr	r3, [r3, r9, lsl #2]
   321a4:	cmp	r5, r3
   321a8:	beq	3214c <__assert_fail@plt+0x207ac>
   321ac:	cmp	r4, r6
   321b0:	bls	321c8 <__assert_fail@plt+0x20828>
   321b4:	ldr	r3, [sp, #24]
   321b8:	add	r7, r3, r7
   321bc:	add	r7, r7, r6
   321c0:	ldr	r2, [sp, #8]
   321c4:	b	320ec <__assert_fail@plt+0x2074c>
   321c8:	ldr	r3, [sp, #20]
   321cc:	cmn	r3, #1
   321d0:	beq	322a8 <__assert_fail@plt+0x20908>
   321d4:	str	r4, [sp, #28]
   321d8:	ldrd	r2, [sp, #12]
   321dc:	ldr	r8, [sp]
   321e0:	ldr	r5, [sp, #36]	; 0x24
   321e4:	add	r3, r3, r7
   321e8:	ldr	fp, [r2]
   321ec:	ldr	r2, [sp, #4]
   321f0:	add	sl, r2, r3
   321f4:	b	32204 <__assert_fail@plt+0x20864>
   321f8:	cmn	r5, #1
   321fc:	mov	r5, r6
   32200:	beq	322a8 <__assert_fail@plt+0x20908>
   32204:	ldrb	r3, [r5, #-1]
   32208:	sub	r6, r5, #1
   3220c:	sxth	r4, r3
   32210:	mov	r9, r3
   32214:	lsl	r3, r4, #1
   32218:	ldrh	r3, [fp, r3]
   3221c:	tst	r3, #256	; 0x100
   32220:	beq	32230 <__assert_fail@plt+0x20890>
   32224:	bl	11748 <__ctype_tolower_loc@plt>
   32228:	ldr	r3, [r0]
   3222c:	ldr	r9, [r3, r4, lsl #2]
   32230:	ldrb	r3, [sl, #-1]!
   32234:	sxth	r4, r3
   32238:	lsl	r1, r4, #1
   3223c:	ldrh	r1, [fp, r1]
   32240:	tst	r1, #256	; 0x100
   32244:	beq	32254 <__assert_fail@plt+0x208b4>
   32248:	bl	11748 <__ctype_tolower_loc@plt>
   3224c:	ldr	r3, [r0]
   32250:	ldr	r3, [r3, r4, lsl #2]
   32254:	sub	r5, r5, #2
   32258:	cmp	r9, r3
   3225c:	sub	r5, r5, r8
   32260:	beq	321f8 <__assert_fail@plt+0x20858>
   32264:	ldr	r4, [sp, #28]
   32268:	ldr	r3, [sp, #32]
   3226c:	add	r7, r7, r3
   32270:	b	321c0 <__assert_fail@plt+0x20820>
   32274:	mov	r3, #1
   32278:	mov	r2, r5
   3227c:	str	r5, [sp, #16]
   32280:	mov	r1, r3
   32284:	str	r3, [sp, #36]	; 0x24
   32288:	str	r3, [sp, #60]	; 0x3c
   3228c:	b	31e48 <__assert_fail@plt+0x204a8>
   32290:	cmp	r5, #0
   32294:	movne	r0, #0
   32298:	b	31df8 <__assert_fail@plt+0x20458>
   3229c:	ldrd	r2, [sp, #4]
   322a0:	add	r0, r3, r2
   322a4:	b	31df8 <__assert_fail@plt+0x20458>
   322a8:	ldr	r3, [sp, #4]
   322ac:	add	r0, r3, r7
   322b0:	b	31df8 <__assert_fail@plt+0x20458>
   322b4:	cmp	r1, #1
   322b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   322bc:	strd	r6, [sp, #8]
   322c0:	str	r8, [sp, #16]
   322c4:	str	lr, [sp, #20]
   322c8:	bls	323ec <__assert_fail@plt+0x20a4c>
   322cc:	mov	r8, #1
   322d0:	mov	r4, #0
   322d4:	mov	lr, r8
   322d8:	mov	r3, r8
   322dc:	mvn	r5, #0
   322e0:	b	322fc <__assert_fail@plt+0x2095c>
   322e4:	sub	r8, r3, r5
   322e8:	mov	r4, r3
   322ec:	mov	lr, #1
   322f0:	add	r3, r4, lr
   322f4:	cmp	r1, r3
   322f8:	bls	32330 <__assert_fail@plt+0x20990>
   322fc:	add	ip, r0, r5
   32300:	ldrb	r6, [r0, r3]
   32304:	ldrb	ip, [ip, lr]
   32308:	cmp	r6, ip
   3230c:	bcc	322e4 <__assert_fail@plt+0x20944>
   32310:	beq	323c4 <__assert_fail@plt+0x20a24>
   32314:	mov	r8, #1
   32318:	mov	r5, r4
   3231c:	mov	lr, r8
   32320:	add	r4, r4, r8
   32324:	add	r3, r4, lr
   32328:	cmp	r1, r3
   3232c:	bhi	322fc <__assert_fail@plt+0x2095c>
   32330:	mov	r7, #1
   32334:	mov	r4, #0
   32338:	str	r8, [r2]
   3233c:	mov	lr, r7
   32340:	mov	r3, r7
   32344:	mvn	r6, #0
   32348:	b	32364 <__assert_fail@plt+0x209c4>
   3234c:	sub	r7, r3, r6
   32350:	mov	r4, r3
   32354:	mov	lr, #1
   32358:	add	r3, r4, lr
   3235c:	cmp	r1, r3
   32360:	bls	32398 <__assert_fail@plt+0x209f8>
   32364:	add	ip, r0, r6
   32368:	ldrb	r8, [r0, r3]
   3236c:	ldrb	ip, [ip, lr]
   32370:	cmp	r8, ip
   32374:	bhi	3234c <__assert_fail@plt+0x209ac>
   32378:	beq	323d8 <__assert_fail@plt+0x20a38>
   3237c:	mov	r7, #1
   32380:	mov	r6, r4
   32384:	mov	lr, r7
   32388:	add	r4, r4, r7
   3238c:	add	r3, r4, lr
   32390:	cmp	r1, r3
   32394:	bhi	32364 <__assert_fail@plt+0x209c4>
   32398:	add	r6, r6, #1
   3239c:	add	r0, r5, #1
   323a0:	cmp	r6, r0
   323a4:	bcc	323b0 <__assert_fail@plt+0x20a10>
   323a8:	mov	r0, r6
   323ac:	str	r7, [r2]
   323b0:	ldrd	r4, [sp]
   323b4:	ldrd	r6, [sp, #8]
   323b8:	ldr	r8, [sp, #16]
   323bc:	add	sp, sp, #20
   323c0:	pop	{pc}		; (ldr pc, [sp], #4)
   323c4:	cmp	lr, r8
   323c8:	addeq	r4, r4, lr
   323cc:	addne	lr, lr, #1
   323d0:	moveq	lr, #1
   323d4:	b	322f0 <__assert_fail@plt+0x20950>
   323d8:	cmp	lr, r7
   323dc:	addeq	r4, r4, lr
   323e0:	addne	lr, lr, #1
   323e4:	moveq	lr, #1
   323e8:	b	32358 <__assert_fail@plt+0x209b8>
   323ec:	mov	r7, #1
   323f0:	mov	r6, #0
   323f4:	b	323a8 <__assert_fail@plt+0x20a08>
   323f8:	cmp	r3, #2
   323fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32400:	mov	r4, r3
   32404:	strd	r6, [sp, #8]
   32408:	mov	r5, r0
   3240c:	strd	r8, [sp, #16]
   32410:	strd	sl, [sp, #24]
   32414:	mov	fp, r1
   32418:	mov	sl, r2
   3241c:	str	lr, [sp, #32]
   32420:	sub	sp, sp, #1056	; 0x420
   32424:	sub	sp, sp, #12
   32428:	bls	32818 <__assert_fail@plt+0x20e78>
   3242c:	add	r6, sp, #40	; 0x28
   32430:	mov	r1, r3
   32434:	sub	r2, r6, #4
   32438:	mov	r0, sl
   3243c:	bl	322b4 <__assert_fail@plt+0x20914>
   32440:	ldr	r3, [sp, #36]	; 0x24
   32444:	str	r3, [sp, #4]
   32448:	str	r0, [sp, #8]
   3244c:	mov	r3, r6
   32450:	add	r2, sp, #1056	; 0x420
   32454:	add	r3, r3, #8
   32458:	str	r4, [r3, #-8]
   3245c:	add	r2, r2, #8
   32460:	str	r4, [r3, #-4]
   32464:	cmp	r3, r2
   32468:	bne	32450 <__assert_fail@plt+0x20ab0>
   3246c:	ldr	r3, [sp, #4]
   32470:	cmp	r4, #0
   32474:	add	r1, sl, r3
   32478:	beq	3262c <__assert_fail@plt+0x20c8c>
   3247c:	sub	r3, r4, #1
   32480:	sub	r2, sl, #1
   32484:	add	ip, sl, r3
   32488:	str	r3, [sp]
   3248c:	ldrb	r0, [r2, #1]!
   32490:	add	lr, sp, #1056	; 0x420
   32494:	add	lr, lr, #8
   32498:	mvn	r3, r2
   3249c:	add	r0, lr, r0, lsl #2
   324a0:	cmp	ip, r2
   324a4:	add	r3, r3, r4
   324a8:	add	r3, sl, r3
   324ac:	str	r3, [r0, #-1024]	; 0xfffffc00
   324b0:	bne	3248c <__assert_fail@plt+0x20aec>
   324b4:	mov	r0, sl
   324b8:	ldr	r2, [sp, #8]
   324bc:	bl	1161c <memcmp@plt>
   324c0:	cmp	r0, #0
   324c4:	beq	32678 <__assert_fail@plt+0x20cd8>
   324c8:	ldr	r2, [sp, #8]
   324cc:	sub	r8, sl, #1
   324d0:	mov	r7, #0
   324d4:	rsb	r9, sl, #1
   324d8:	sub	r3, r4, r2
   324dc:	sub	r1, r2, #1
   324e0:	cmp	r3, r2
   324e4:	movcc	r3, r2
   324e8:	str	r1, [sp, #16]
   324ec:	add	r1, sl, r1
   324f0:	add	r3, r3, #1
   324f4:	str	r1, [sp, #12]
   324f8:	str	r3, [sp, #20]
   324fc:	ldr	r3, [sp]
   32500:	add	r8, r8, r3
   32504:	mov	r3, r2
   32508:	add	r2, sl, r2
   3250c:	str	r2, [sp, #4]
   32510:	rsb	r2, r3, #1
   32514:	str	r2, [sp, #8]
   32518:	mov	r2, fp
   3251c:	mov	fp, r3
   32520:	b	32528 <__assert_fail@plt+0x20b88>
   32524:	mov	r2, r6
   32528:	add	r6, r7, r4
   3252c:	add	r0, r5, r2
   32530:	mov	r1, #0
   32534:	sub	r2, r6, r2
   32538:	bl	1185c <memchr@plt>
   3253c:	adds	r2, r6, #0
   32540:	movne	r2, #1
   32544:	cmp	r0, #0
   32548:	moveq	r0, r2
   3254c:	movne	r0, #0
   32550:	cmp	r0, #0
   32554:	beq	32648 <__assert_fail@plt+0x20ca8>
   32558:	add	r2, r5, r6
   3255c:	add	r3, sp, #1056	; 0x420
   32560:	ldrb	r2, [r2, #-1]
   32564:	add	r3, r3, #8
   32568:	add	r2, r3, r2, lsl #2
   3256c:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   32570:	cmp	r2, #0
   32574:	addne	r7, r7, r2
   32578:	bne	32524 <__assert_fail@plt+0x20b84>
   3257c:	ldr	r3, [sp]
   32580:	cmp	fp, r3
   32584:	bcs	325cc <__assert_fail@plt+0x20c2c>
   32588:	ldr	r3, [sp, #4]
   3258c:	add	r2, r7, fp
   32590:	add	r1, r5, r2
   32594:	ldrb	r2, [r5, r2]
   32598:	ldrb	r0, [r3]
   3259c:	cmp	r2, r0
   325a0:	movne	lr, fp
   325a4:	bne	3261c <__assert_fail@plt+0x20c7c>
   325a8:	mov	r2, r3
   325ac:	b	325c0 <__assert_fail@plt+0x20c20>
   325b0:	ldrb	r0, [r2, #1]!
   325b4:	ldrb	r3, [r1, #1]!
   325b8:	cmp	r0, r3
   325bc:	bne	3261c <__assert_fail@plt+0x20c7c>
   325c0:	cmp	r8, r2
   325c4:	add	lr, r9, r2
   325c8:	bne	325b0 <__assert_fail@plt+0x20c10>
   325cc:	ldr	r3, [sp, #16]
   325d0:	cmn	r3, #1
   325d4:	beq	32614 <__assert_fail@plt+0x20c74>
   325d8:	add	r2, r7, r3
   325dc:	ldr	r3, [sp, #12]
   325e0:	add	r1, r5, r2
   325e4:	ldrb	r2, [r5, r2]
   325e8:	ldrb	r0, [r3]
   325ec:	cmp	r2, r0
   325f0:	moveq	r2, r3
   325f4:	beq	3260c <__assert_fail@plt+0x20c6c>
   325f8:	b	3266c <__assert_fail@plt+0x20ccc>
   325fc:	ldrb	r0, [r2, #-1]!
   32600:	ldrb	r3, [r1, #-1]!
   32604:	cmp	r0, r3
   32608:	bne	3266c <__assert_fail@plt+0x20ccc>
   3260c:	cmp	sl, r2
   32610:	bne	325fc <__assert_fail@plt+0x20c5c>
   32614:	add	r0, r5, r7
   32618:	b	3264c <__assert_fail@plt+0x20cac>
   3261c:	ldr	r3, [sp, #8]
   32620:	add	r7, r3, r7
   32624:	add	r7, lr, r7
   32628:	b	32524 <__assert_fail@plt+0x20b84>
   3262c:	mov	r0, sl
   32630:	ldr	r2, [sp, #8]
   32634:	bl	1161c <memcmp@plt>
   32638:	cmp	r0, #0
   3263c:	mvnne	r3, #0
   32640:	strne	r3, [sp]
   32644:	bne	324c8 <__assert_fail@plt+0x20b28>
   32648:	mov	r0, #0
   3264c:	add	sp, sp, #1056	; 0x420
   32650:	add	sp, sp, #12
   32654:	ldrd	r4, [sp]
   32658:	ldrd	r6, [sp, #8]
   3265c:	ldrd	r8, [sp, #16]
   32660:	ldrd	sl, [sp, #24]
   32664:	add	sp, sp, #32
   32668:	pop	{pc}		; (ldr pc, [sp], #4)
   3266c:	ldr	r3, [sp, #20]
   32670:	add	r7, r7, r3
   32674:	b	32524 <__assert_fail@plt+0x20b84>
   32678:	ldr	r2, [sp, #8]
   3267c:	sub	r8, r4, #2
   32680:	rsb	r9, sl, #1
   32684:	add	r8, sl, r8
   32688:	mov	r7, r0
   3268c:	str	sl, [sp, #12]
   32690:	sub	r3, r2, #1
   32694:	str	r3, [sp, #28]
   32698:	add	r3, sl, r3
   3269c:	mov	sl, r0
   326a0:	str	r3, [sp, #24]
   326a4:	ldr	r3, [sp, #4]
   326a8:	sub	r3, r4, r3
   326ac:	str	r3, [sp, #20]
   326b0:	rsb	r3, r2, #1
   326b4:	mov	r2, fp
   326b8:	str	r3, [sp, #16]
   326bc:	b	326dc <__assert_fail@plt+0x20d3c>
   326c0:	ldr	r2, [sp, #4]
   326c4:	cmp	sl, #0
   326c8:	cmpne	r3, r2
   326cc:	mov	sl, #0
   326d0:	ldrcc	r3, [sp, #20]
   326d4:	add	r7, r7, r3
   326d8:	mov	r2, r6
   326dc:	add	r6, r7, r4
   326e0:	add	r0, r5, r2
   326e4:	mov	r1, #0
   326e8:	sub	r2, r6, r2
   326ec:	bl	1185c <memchr@plt>
   326f0:	adds	r3, r6, #0
   326f4:	movne	r3, #1
   326f8:	cmp	r0, #0
   326fc:	moveq	r0, r3
   32700:	movne	r0, #0
   32704:	cmp	r0, #0
   32708:	beq	32648 <__assert_fail@plt+0x20ca8>
   3270c:	add	r3, r5, r6
   32710:	add	r2, sp, #1056	; 0x420
   32714:	ldrb	r3, [r3, #-1]
   32718:	add	r2, r2, #8
   3271c:	add	r3, r2, r3, lsl #2
   32720:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   32724:	cmp	r3, #0
   32728:	bne	326c0 <__assert_fail@plt+0x20d20>
   3272c:	ldr	r3, [sp, #8]
   32730:	cmp	sl, r3
   32734:	movcc	r0, r3
   32738:	ldr	r3, [sp]
   3273c:	movcs	r0, sl
   32740:	cmp	r0, r3
   32744:	bcs	32788 <__assert_fail@plt+0x20de8>
   32748:	ldr	r3, [sp, #12]
   3274c:	add	r1, r7, r0
   32750:	add	r2, r5, r1
   32754:	ldrb	r1, [r5, r1]
   32758:	ldrb	ip, [r3, r0]
   3275c:	add	r3, r3, r0
   32760:	cmp	ip, r1
   32764:	beq	3277c <__assert_fail@plt+0x20ddc>
   32768:	b	32804 <__assert_fail@plt+0x20e64>
   3276c:	ldrb	ip, [r3, #1]!
   32770:	ldrb	r1, [r2, #1]!
   32774:	cmp	ip, r1
   32778:	bne	32804 <__assert_fail@plt+0x20e64>
   3277c:	cmp	r8, r3
   32780:	add	r0, r9, r3
   32784:	bne	3276c <__assert_fail@plt+0x20dcc>
   32788:	ldr	r3, [sp, #8]
   3278c:	cmp	sl, r3
   32790:	bcs	32834 <__assert_fail@plt+0x20e94>
   32794:	ldr	r3, [sp, #28]
   32798:	add	r2, r7, r3
   3279c:	ldr	r3, [sp, #24]
   327a0:	ldrb	r1, [r3]
   327a4:	add	r3, r5, r2
   327a8:	ldrb	r2, [r5, r2]
   327ac:	cmp	r1, r2
   327b0:	ldrne	lr, [sp, #8]
   327b4:	bne	327e8 <__assert_fail@plt+0x20e48>
   327b8:	add	ip, r7, sl
   327bc:	add	fp, r5, r7
   327c0:	add	ip, ip, r5
   327c4:	ldr	r2, [sp, #24]
   327c8:	b	327dc <__assert_fail@plt+0x20e3c>
   327cc:	ldrb	r0, [r2, #-1]!
   327d0:	ldrb	r1, [r3, #-1]!
   327d4:	cmp	r0, r1
   327d8:	bne	327e8 <__assert_fail@plt+0x20e48>
   327dc:	cmp	ip, r3
   327e0:	sub	lr, r3, fp
   327e4:	bne	327cc <__assert_fail@plt+0x20e2c>
   327e8:	add	sl, sl, #1
   327ec:	cmp	sl, lr
   327f0:	bhi	32614 <__assert_fail@plt+0x20c74>
   327f4:	ldr	r3, [sp, #4]
   327f8:	ldr	sl, [sp, #20]
   327fc:	add	r7, r7, r3
   32800:	b	326d8 <__assert_fail@plt+0x20d38>
   32804:	ldr	r3, [sp, #16]
   32808:	mov	sl, #0
   3280c:	add	r7, r3, r7
   32810:	add	r7, r0, r7
   32814:	b	326d8 <__assert_fail@plt+0x20d38>
   32818:	mov	r3, #1
   3281c:	sub	r2, r4, #1
   32820:	add	r6, sp, #40	; 0x28
   32824:	str	r3, [sp, #4]
   32828:	str	r2, [sp, #8]
   3282c:	str	r3, [sp, #36]	; 0x24
   32830:	b	3244c <__assert_fail@plt+0x20aac>
   32834:	mov	lr, r3
   32838:	b	327e8 <__assert_fail@plt+0x20e48>
   3283c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32840:	strd	r6, [sp, #8]
   32844:	strd	r8, [sp, #16]
   32848:	strd	sl, [sp, #24]
   3284c:	str	lr, [sp, #32]
   32850:	sub	sp, sp, #44	; 0x2c
   32854:	ldrb	r4, [r0]
   32858:	ldrb	r3, [r1]
   3285c:	cmp	r4, #0
   32860:	beq	32c14 <__assert_fail@plt+0x21274>
   32864:	cmp	r3, #0
   32868:	beq	32934 <__assert_fail@plt+0x20f94>
   3286c:	mov	r8, r0
   32870:	add	r2, r1, #1
   32874:	mov	ip, r3
   32878:	mov	lr, #1
   3287c:	b	32888 <__assert_fail@plt+0x20ee8>
   32880:	cmp	ip, #0
   32884:	beq	328b0 <__assert_fail@plt+0x20f10>
   32888:	cmp	ip, r4
   3288c:	movne	lr, #0
   32890:	andeq	lr, lr, #1
   32894:	ldrb	r4, [r8, #1]!
   32898:	mov	r5, r2
   3289c:	ldrb	ip, [r2], #1
   328a0:	cmp	r4, #0
   328a4:	bne	32880 <__assert_fail@plt+0x20ee0>
   328a8:	cmp	ip, #0
   328ac:	bne	32914 <__assert_fail@plt+0x20f74>
   328b0:	cmp	lr, #0
   328b4:	bne	32934 <__assert_fail@plt+0x20f94>
   328b8:	mov	r7, r1
   328bc:	mov	r6, r0
   328c0:	mov	r1, r3
   328c4:	add	r0, r0, #1
   328c8:	bl	117b4 <strchr@plt>
   328cc:	subs	r4, r0, #0
   328d0:	sub	r7, r5, r7
   328d4:	beq	32914 <__assert_fail@plt+0x20f74>
   328d8:	cmp	r7, #1
   328dc:	beq	32914 <__assert_fail@plt+0x20f74>
   328e0:	add	r6, r6, r7
   328e4:	sub	r5, r5, r7
   328e8:	cmp	r6, r4
   328ec:	subcs	r6, r6, r4
   328f0:	movcc	r6, #1
   328f4:	cmp	r7, #31
   328f8:	bls	3293c <__assert_fail@plt+0x20f9c>
   328fc:	mov	r0, r4
   32900:	mov	r3, r7
   32904:	mov	r2, r5
   32908:	mov	r1, r6
   3290c:	bl	323f8 <__assert_fail@plt+0x20a58>
   32910:	mov	r4, r0
   32914:	mov	r0, r4
   32918:	add	sp, sp, #44	; 0x2c
   3291c:	ldrd	r4, [sp]
   32920:	ldrd	r6, [sp, #8]
   32924:	ldrd	r8, [sp, #16]
   32928:	ldrd	sl, [sp, #24]
   3292c:	add	sp, sp, #32
   32930:	pop	{pc}		; (ldr pc, [sp], #4)
   32934:	mov	r4, r0
   32938:	b	32914 <__assert_fail@plt+0x20f74>
   3293c:	cmp	r7, #2
   32940:	bls	32c24 <__assert_fail@plt+0x21284>
   32944:	add	r2, sp, #36	; 0x24
   32948:	mov	r1, r7
   3294c:	mov	r0, r5
   32950:	bl	322b4 <__assert_fail@plt+0x20914>
   32954:	ldr	r3, [sp, #36]	; 0x24
   32958:	mov	r8, r0
   3295c:	str	r3, [sp, #16]
   32960:	mov	r2, r8
   32964:	add	r1, r5, r3
   32968:	mov	r0, r5
   3296c:	bl	1161c <memcmp@plt>
   32970:	cmp	r0, #0
   32974:	bne	32ad8 <__assert_fail@plt+0x21138>
   32978:	sub	r2, r8, #1
   3297c:	mov	r3, r8
   32980:	str	r7, [sp, #4]
   32984:	sub	r8, r7, #1
   32988:	rsb	r9, r5, #1
   3298c:	str	r5, [sp, #8]
   32990:	str	r2, [sp, #20]
   32994:	add	r2, r5, r2
   32998:	add	r8, r8, r5
   3299c:	mov	sl, r0
   329a0:	mov	r5, r0
   329a4:	str	r2, [sp, #28]
   329a8:	ldr	r2, [sp, #16]
   329ac:	sub	r2, r7, r2
   329b0:	mov	r7, r3
   329b4:	str	r2, [sp, #24]
   329b8:	rsb	r2, r3, #1
   329bc:	str	r2, [sp, #12]
   329c0:	mov	r2, r6
   329c4:	ldr	r3, [sp, #4]
   329c8:	add	r0, r4, r2
   329cc:	mov	r1, #0
   329d0:	add	fp, r3, sl
   329d4:	sub	r2, fp, r2
   329d8:	bl	1185c <memchr@plt>
   329dc:	clz	r0, r0
   329e0:	cmp	fp, #0
   329e4:	lsr	r0, r0, #5
   329e8:	moveq	r0, #0
   329ec:	cmp	r0, #0
   329f0:	beq	32934 <__assert_fail@plt+0x20f94>
   329f4:	ldr	r3, [sp, #4]
   329f8:	cmp	r7, r5
   329fc:	movcs	r0, r7
   32a00:	movcc	r0, r5
   32a04:	cmp	r3, r0
   32a08:	bls	32a4c <__assert_fail@plt+0x210ac>
   32a0c:	ldr	r3, [sp, #8]
   32a10:	add	r1, r0, sl
   32a14:	add	r2, r4, r1
   32a18:	ldrb	r1, [r4, r1]
   32a1c:	ldrb	ip, [r3, r0]
   32a20:	add	r3, r3, r0
   32a24:	cmp	r1, ip
   32a28:	beq	32a40 <__assert_fail@plt+0x210a0>
   32a2c:	b	32ac4 <__assert_fail@plt+0x21124>
   32a30:	ldrb	ip, [r3, #1]!
   32a34:	ldrb	r1, [r2, #1]!
   32a38:	cmp	ip, r1
   32a3c:	bne	32ac4 <__assert_fail@plt+0x21124>
   32a40:	cmp	r8, r3
   32a44:	add	r0, r9, r3
   32a48:	bne	32a30 <__assert_fail@plt+0x21090>
   32a4c:	cmp	r7, r5
   32a50:	bls	32c3c <__assert_fail@plt+0x2129c>
   32a54:	ldr	r3, [sp, #20]
   32a58:	ldr	r0, [sp, #28]
   32a5c:	add	r2, sl, r3
   32a60:	add	r3, r4, r2
   32a64:	ldrb	r2, [r4, r2]
   32a68:	ldrb	r1, [r0]
   32a6c:	cmp	r1, r2
   32a70:	bne	32c3c <__assert_fail@plt+0x2129c>
   32a74:	add	ip, r5, sl
   32a78:	mov	r2, r0
   32a7c:	add	ip, ip, r4
   32a80:	add	r6, r4, sl
   32a84:	b	32a98 <__assert_fail@plt+0x210f8>
   32a88:	ldrb	r0, [r2, #-1]!
   32a8c:	ldrb	r1, [r3, #-1]!
   32a90:	cmp	r0, r1
   32a94:	bne	32aa4 <__assert_fail@plt+0x21104>
   32a98:	cmp	ip, r3
   32a9c:	sub	lr, r3, r6
   32aa0:	bne	32a88 <__assert_fail@plt+0x210e8>
   32aa4:	add	r5, r5, #1
   32aa8:	cmp	r5, lr
   32aac:	bhi	32bec <__assert_fail@plt+0x2124c>
   32ab0:	ldr	r3, [sp, #16]
   32ab4:	ldr	r5, [sp, #24]
   32ab8:	add	sl, sl, r3
   32abc:	mov	r2, fp
   32ac0:	b	329c4 <__assert_fail@plt+0x21024>
   32ac4:	ldr	r3, [sp, #12]
   32ac8:	mov	r5, #0
   32acc:	add	sl, r3, sl
   32ad0:	add	sl, r0, sl
   32ad4:	b	32abc <__assert_fail@plt+0x2111c>
   32ad8:	sub	r3, r7, r8
   32adc:	mov	r2, r8
   32ae0:	cmp	r3, r8
   32ae4:	sub	r1, r8, #1
   32ae8:	movcc	r3, r2
   32aec:	sub	r8, r7, #1
   32af0:	add	r3, r3, #1
   32af4:	add	r8, r8, r5
   32af8:	str	r1, [sp, #12]
   32afc:	mov	sl, #0
   32b00:	add	r1, r5, r1
   32b04:	str	r3, [sp, #16]
   32b08:	mov	r3, r2
   32b0c:	add	r2, r5, r2
   32b10:	rsb	r9, r5, #1
   32b14:	str	r2, [sp, #4]
   32b18:	rsb	r2, r3, #1
   32b1c:	str	r2, [sp, #8]
   32b20:	mov	r2, r6
   32b24:	mov	r6, r3
   32b28:	str	r1, [sp, #20]
   32b2c:	add	fp, r7, sl
   32b30:	add	r0, r4, r2
   32b34:	mov	r1, #0
   32b38:	sub	r2, fp, r2
   32b3c:	bl	1185c <memchr@plt>
   32b40:	clz	r0, r0
   32b44:	cmp	fp, #0
   32b48:	lsr	r0, r0, #5
   32b4c:	moveq	r0, #0
   32b50:	cmp	r0, #0
   32b54:	beq	32934 <__assert_fail@plt+0x20f94>
   32b58:	cmp	r7, r6
   32b5c:	bls	32ba4 <__assert_fail@plt+0x21204>
   32b60:	ldr	r3, [sp, #4]
   32b64:	add	r2, r6, sl
   32b68:	add	r1, r4, r2
   32b6c:	ldrb	r2, [r4, r2]
   32b70:	ldrb	r0, [r3]
   32b74:	cmp	r2, r0
   32b78:	movne	lr, r6
   32b7c:	bne	32bf4 <__assert_fail@plt+0x21254>
   32b80:	mov	r2, r3
   32b84:	b	32b98 <__assert_fail@plt+0x211f8>
   32b88:	ldrb	r0, [r2, #1]!
   32b8c:	ldrb	r3, [r1, #1]!
   32b90:	cmp	r0, r3
   32b94:	bne	32bf4 <__assert_fail@plt+0x21254>
   32b98:	cmp	r8, r2
   32b9c:	add	lr, r9, r2
   32ba0:	bne	32b88 <__assert_fail@plt+0x211e8>
   32ba4:	ldr	r3, [sp, #12]
   32ba8:	cmn	r3, #1
   32bac:	beq	32bec <__assert_fail@plt+0x2124c>
   32bb0:	add	r2, sl, r3
   32bb4:	ldr	r3, [sp, #20]
   32bb8:	add	r1, r4, r2
   32bbc:	ldrb	r2, [r4, r2]
   32bc0:	ldrb	r0, [r3]
   32bc4:	cmp	r2, r0
   32bc8:	bne	32c08 <__assert_fail@plt+0x21268>
   32bcc:	mov	r2, r3
   32bd0:	b	32be4 <__assert_fail@plt+0x21244>
   32bd4:	ldrb	r0, [r2, #-1]!
   32bd8:	ldrb	r3, [r1, #-1]!
   32bdc:	cmp	r0, r3
   32be0:	bne	32c08 <__assert_fail@plt+0x21268>
   32be4:	cmp	r5, r2
   32be8:	bne	32bd4 <__assert_fail@plt+0x21234>
   32bec:	add	r4, r4, sl
   32bf0:	b	32914 <__assert_fail@plt+0x20f74>
   32bf4:	ldr	r3, [sp, #8]
   32bf8:	add	sl, r3, sl
   32bfc:	add	sl, lr, sl
   32c00:	mov	r2, fp
   32c04:	b	32b2c <__assert_fail@plt+0x2118c>
   32c08:	ldr	r3, [sp, #16]
   32c0c:	add	sl, sl, r3
   32c10:	b	32c00 <__assert_fail@plt+0x21260>
   32c14:	cmp	r3, #0
   32c18:	moveq	r4, r0
   32c1c:	movne	r4, #0
   32c20:	b	32914 <__assert_fail@plt+0x20f74>
   32c24:	mov	r3, #1
   32c28:	sub	r2, r7, #1
   32c2c:	mov	r8, r2
   32c30:	str	r3, [sp, #16]
   32c34:	str	r3, [sp, #36]	; 0x24
   32c38:	b	32960 <__assert_fail@plt+0x20fc0>
   32c3c:	mov	lr, r7
   32c40:	b	32aa4 <__assert_fail@plt+0x21104>
   32c44:	movw	r3, #25020	; 0x61bc
   32c48:	movt	r3, #4
   32c4c:	str	r4, [sp, #-8]!
   32c50:	ldr	r0, [r3]
   32c54:	str	lr, [sp, #4]
   32c58:	bl	11784 <exit@plt>
   32c5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32c60:	mov	r4, r1
   32c64:	strd	r6, [sp, #8]
   32c68:	mov	r6, r2
   32c6c:	strd	r8, [sp, #16]
   32c70:	mov	r8, r3
   32c74:	strd	sl, [sp, #24]
   32c78:	mov	sl, r0
   32c7c:	str	lr, [sp, #32]
   32c80:	sub	sp, sp, #12
   32c84:	str	r2, [sp]
   32c88:	bl	117a8 <strlen@plt>
   32c8c:	ldr	fp, [r4]
   32c90:	cmp	fp, #0
   32c94:	beq	32da4 <__assert_fail@plt+0x21404>
   32c98:	cmp	r6, #0
   32c9c:	mov	r7, r0
   32ca0:	beq	32d50 <__assert_fail@plt+0x213b0>
   32ca4:	mov	r5, #0
   32ca8:	mvn	r9, #0
   32cac:	str	r5, [sp, #4]
   32cb0:	mov	r2, r7
   32cb4:	mov	r1, sl
   32cb8:	mov	r0, fp
   32cbc:	bl	11958 <strncmp@plt>
   32cc0:	cmp	r0, #0
   32cc4:	mov	r0, fp
   32cc8:	bne	32d08 <__assert_fail@plt+0x21368>
   32ccc:	bl	117a8 <strlen@plt>
   32cd0:	ldr	r3, [sp]
   32cd4:	cmp	r0, r7
   32cd8:	mov	r2, r8
   32cdc:	mov	r1, r6
   32ce0:	mla	r0, r8, r9, r3
   32ce4:	beq	32d48 <__assert_fail@plt+0x213a8>
   32ce8:	cmn	r9, #1
   32cec:	moveq	r9, r5
   32cf0:	beq	32d08 <__assert_fail@plt+0x21368>
   32cf4:	bl	1161c <memcmp@plt>
   32cf8:	ldr	r3, [sp, #4]
   32cfc:	cmp	r0, #0
   32d00:	movne	r3, #1
   32d04:	str	r3, [sp, #4]
   32d08:	ldr	fp, [r4, #4]!
   32d0c:	add	r5, r5, #1
   32d10:	add	r6, r6, r8
   32d14:	cmp	fp, #0
   32d18:	bne	32cb0 <__assert_fail@plt+0x21310>
   32d1c:	ldr	r3, [sp, #4]
   32d20:	cmp	r3, #0
   32d24:	mvnne	r9, #1
   32d28:	mov	r0, r9
   32d2c:	add	sp, sp, #12
   32d30:	ldrd	r4, [sp]
   32d34:	ldrd	r6, [sp, #8]
   32d38:	ldrd	r8, [sp, #16]
   32d3c:	ldrd	sl, [sp, #24]
   32d40:	add	sp, sp, #32
   32d44:	pop	{pc}		; (ldr pc, [sp], #4)
   32d48:	mov	r9, r5
   32d4c:	b	32d28 <__assert_fail@plt+0x21388>
   32d50:	mov	r5, r6
   32d54:	mvn	r9, #0
   32d58:	mov	r2, r7
   32d5c:	mov	r1, sl
   32d60:	mov	r0, fp
   32d64:	bl	11958 <strncmp@plt>
   32d68:	cmp	r0, #0
   32d6c:	mov	r0, fp
   32d70:	bne	32d8c <__assert_fail@plt+0x213ec>
   32d74:	bl	117a8 <strlen@plt>
   32d78:	cmp	r0, r7
   32d7c:	beq	32d48 <__assert_fail@plt+0x213a8>
   32d80:	cmn	r9, #1
   32d84:	moveq	r9, r5
   32d88:	movne	r6, #1
   32d8c:	ldr	fp, [r4, #4]!
   32d90:	add	r5, r5, #1
   32d94:	cmp	fp, #0
   32d98:	bne	32d58 <__assert_fail@plt+0x213b8>
   32d9c:	str	r6, [sp, #4]
   32da0:	b	32d1c <__assert_fail@plt+0x2137c>
   32da4:	mvn	r9, #0
   32da8:	b	32d28 <__assert_fail@plt+0x21388>
   32dac:	cmn	r2, #1
   32db0:	strd	r4, [sp, #-16]!
   32db4:	mov	r5, r1
   32db8:	movweq	r1, #21512	; 0x5408
   32dbc:	movwne	r1, #21540	; 0x5424
   32dc0:	str	r6, [sp, #8]
   32dc4:	movteq	r1, #3
   32dc8:	movtne	r1, #3
   32dcc:	str	lr, [sp, #12]
   32dd0:	mov	r6, r0
   32dd4:	sub	sp, sp, #8
   32dd8:	mov	r2, #5
   32ddc:	mov	r0, #0
   32de0:	bl	11628 <dcgettext@plt>
   32de4:	mov	r4, r0
   32de8:	mov	r2, r5
   32dec:	mov	r1, #8
   32df0:	mov	r0, #0
   32df4:	bl	1b9e8 <__assert_fail@plt+0xa048>
   32df8:	mov	r5, r0
   32dfc:	mov	r1, r6
   32e00:	mov	r0, #1
   32e04:	bl	1cde0 <__assert_fail@plt+0xb440>
   32e08:	mov	r1, #0
   32e0c:	mov	r3, r5
   32e10:	str	r0, [sp]
   32e14:	mov	r2, r4
   32e18:	mov	r0, r1
   32e1c:	bl	116d0 <error@plt>
   32e20:	add	sp, sp, #8
   32e24:	ldrd	r4, [sp]
   32e28:	ldr	r6, [sp, #8]
   32e2c:	add	sp, sp, #12
   32e30:	pop	{pc}		; (ldr pc, [sp], #4)
   32e34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32e38:	mov	r4, r1
   32e3c:	movw	r1, #21572	; 0x5444
   32e40:	movt	r1, #3
   32e44:	strd	r6, [sp, #8]
   32e48:	mov	r6, r0
   32e4c:	mov	r7, r2
   32e50:	mov	r0, #0
   32e54:	strd	r8, [sp, #16]
   32e58:	mov	r2, #5
   32e5c:	strd	sl, [sp, #24]
   32e60:	movw	sl, #25112	; 0x6218
   32e64:	movt	sl, #4
   32e68:	str	lr, [sp, #32]
   32e6c:	sub	sp, sp, #12
   32e70:	bl	11628 <dcgettext@plt>
   32e74:	ldr	r1, [sl]
   32e78:	bl	1194c <fputs@plt>
   32e7c:	ldr	fp, [r6]
   32e80:	cmp	fp, #0
   32e84:	beq	32f1c <__assert_fail@plt+0x2157c>
   32e88:	movw	r3, #21596	; 0x545c
   32e8c:	movt	r3, #3
   32e90:	mov	r9, #0
   32e94:	str	r3, [sp]
   32e98:	movw	r3, #21604	; 0x5464
   32e9c:	movt	r3, #3
   32ea0:	mov	r5, r9
   32ea4:	str	r3, [sp, #4]
   32ea8:	b	32edc <__assert_fail@plt+0x2153c>
   32eac:	mov	r0, fp
   32eb0:	mov	r9, r4
   32eb4:	bl	1cdf0 <__assert_fail@plt+0xb450>
   32eb8:	mov	r2, r0
   32ebc:	mov	r0, r8
   32ec0:	ldr	r1, [sp]
   32ec4:	bl	117c0 <fprintf@plt>
   32ec8:	ldr	fp, [r6, #4]!
   32ecc:	add	r5, r5, #1
   32ed0:	add	r4, r4, r7
   32ed4:	cmp	fp, #0
   32ed8:	beq	32f1c <__assert_fail@plt+0x2157c>
   32edc:	cmp	r5, #0
   32ee0:	mov	r1, r4
   32ee4:	ldr	r8, [sl]
   32ee8:	mov	r2, r7
   32eec:	mov	r0, r9
   32ef0:	beq	32eac <__assert_fail@plt+0x2150c>
   32ef4:	bl	1161c <memcmp@plt>
   32ef8:	cmp	r0, #0
   32efc:	bne	32eac <__assert_fail@plt+0x2150c>
   32f00:	mov	r0, fp
   32f04:	bl	1cdf0 <__assert_fail@plt+0xb450>
   32f08:	mov	r2, r0
   32f0c:	mov	r0, r8
   32f10:	ldr	r1, [sp, #4]
   32f14:	bl	117c0 <fprintf@plt>
   32f18:	b	32ec8 <__assert_fail@plt+0x21528>
   32f1c:	ldr	r1, [sl]
   32f20:	mov	r0, #10
   32f24:	add	sp, sp, #12
   32f28:	ldrd	r4, [sp]
   32f2c:	ldrd	r6, [sp, #8]
   32f30:	ldrd	r8, [sp, #16]
   32f34:	ldrd	sl, [sp, #24]
   32f38:	ldr	lr, [sp, #32]
   32f3c:	add	sp, sp, #36	; 0x24
   32f40:	b	118f8 <putc@plt>
   32f44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32f48:	mov	r4, r2
   32f4c:	mov	r5, r3
   32f50:	strd	r6, [sp, #8]
   32f54:	mov	r6, r1
   32f58:	mov	r2, r3
   32f5c:	str	r8, [sp, #16]
   32f60:	mov	r7, r0
   32f64:	mov	r1, r4
   32f68:	str	lr, [sp, #20]
   32f6c:	sub	sp, sp, #8
   32f70:	mov	r0, r6
   32f74:	ldr	r3, [sp, #32]
   32f78:	bl	32c5c <__assert_fail@plt+0x212bc>
   32f7c:	cmp	r0, #0
   32f80:	blt	32f9c <__assert_fail@plt+0x215fc>
   32f84:	add	sp, sp, #8
   32f88:	ldrd	r4, [sp]
   32f8c:	ldrd	r6, [sp, #8]
   32f90:	ldr	r8, [sp, #16]
   32f94:	add	sp, sp, #20
   32f98:	pop	{pc}		; (ldr pc, [sp], #4)
   32f9c:	cmn	r0, #1
   32fa0:	mov	r2, #5
   32fa4:	movweq	r1, #21512	; 0x5408
   32fa8:	movwne	r1, #21540	; 0x5424
   32fac:	movteq	r1, #3
   32fb0:	movtne	r1, #3
   32fb4:	mov	r0, #0
   32fb8:	bl	11628 <dcgettext@plt>
   32fbc:	mov	r8, r0
   32fc0:	mov	r2, r6
   32fc4:	mov	r1, #8
   32fc8:	mov	r0, #0
   32fcc:	bl	1b9e8 <__assert_fail@plt+0xa048>
   32fd0:	mov	r6, r0
   32fd4:	mov	r1, r7
   32fd8:	mov	r0, #1
   32fdc:	bl	1cde0 <__assert_fail@plt+0xb440>
   32fe0:	mov	r1, #0
   32fe4:	mov	r3, r6
   32fe8:	str	r0, [sp]
   32fec:	mov	r2, r8
   32ff0:	mov	r0, r1
   32ff4:	bl	116d0 <error@plt>
   32ff8:	mov	r0, r4
   32ffc:	mov	r1, r5
   33000:	ldr	r2, [sp, #32]
   33004:	bl	32e34 <__assert_fail@plt+0x21494>
   33008:	ldr	r3, [sp, #36]	; 0x24
   3300c:	blx	r3
   33010:	mvn	r0, #0
   33014:	b	32f84 <__assert_fail@plt+0x215e4>
   33018:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3301c:	strd	r6, [sp, #8]
   33020:	ldr	r7, [r1]
   33024:	str	r8, [sp, #16]
   33028:	str	lr, [sp, #20]
   3302c:	cmp	r7, #0
   33030:	beq	33070 <__assert_fail@plt+0x216d0>
   33034:	mov	r6, r3
   33038:	mov	r8, r0
   3303c:	mov	r4, r2
   33040:	mov	r5, r1
   33044:	b	33054 <__assert_fail@plt+0x216b4>
   33048:	ldr	r7, [r5, #4]!
   3304c:	cmp	r7, #0
   33050:	beq	33070 <__assert_fail@plt+0x216d0>
   33054:	mov	r1, r4
   33058:	mov	r2, r6
   3305c:	mov	r0, r8
   33060:	add	r4, r4, r6
   33064:	bl	1161c <memcmp@plt>
   33068:	cmp	r0, #0
   3306c:	bne	33048 <__assert_fail@plt+0x216a8>
   33070:	mov	r0, r7
   33074:	ldrd	r4, [sp]
   33078:	ldrd	r6, [sp, #8]
   3307c:	ldr	r8, [sp, #16]
   33080:	add	sp, sp, #20
   33084:	pop	{pc}		; (ldr pc, [sp], #4)
   33088:	strd	r4, [sp, #-16]!
   3308c:	mov	r4, r0
   33090:	str	r6, [sp, #8]
   33094:	str	lr, [sp, #12]
   33098:	bl	116b8 <__fpending@plt>
   3309c:	mov	r6, r0
   330a0:	mov	r0, r4
   330a4:	bl	115b0 <ferror@plt>
   330a8:	mov	r5, r0
   330ac:	mov	r0, r4
   330b0:	bl	11868 <fclose@plt>
   330b4:	cmp	r5, #0
   330b8:	mov	r4, r0
   330bc:	bne	330f4 <__assert_fail@plt+0x21754>
   330c0:	cmp	r0, #0
   330c4:	beq	330e0 <__assert_fail@plt+0x21740>
   330c8:	cmp	r6, #0
   330cc:	bne	3310c <__assert_fail@plt+0x2176c>
   330d0:	bl	117d8 <__errno_location@plt>
   330d4:	ldr	r4, [r0]
   330d8:	subs	r4, r4, #9
   330dc:	mvnne	r4, #0
   330e0:	mov	r0, r4
   330e4:	ldrd	r4, [sp]
   330e8:	ldr	r6, [sp, #8]
   330ec:	add	sp, sp, #12
   330f0:	pop	{pc}		; (ldr pc, [sp], #4)
   330f4:	cmp	r0, #0
   330f8:	bne	3310c <__assert_fail@plt+0x2176c>
   330fc:	bl	117d8 <__errno_location@plt>
   33100:	str	r4, [r0]
   33104:	mvn	r4, #0
   33108:	b	330e0 <__assert_fail@plt+0x21740>
   3310c:	mvn	r4, #0
   33110:	b	330e0 <__assert_fail@plt+0x21740>
   33114:	ldr	ip, [r0, #4]
   33118:	cmp	ip, r1
   3311c:	bcs	33188 <__assert_fail@plt+0x217e8>
   33120:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33124:	mov	r5, r1
   33128:	mov	r4, r0
   3312c:	strd	r6, [sp, #8]
   33130:	umull	r6, r7, r1, r3
   33134:	str	r8, [sp, #16]
   33138:	mov	r8, r3
   3313c:	str	lr, [sp, #20]
   33140:	cmp	r7, #0
   33144:	bne	331cc <__assert_fail@plt+0x2182c>
   33148:	ldr	r0, [r0, #8]
   3314c:	cmp	r0, r2
   33150:	beq	33198 <__assert_fail@plt+0x217f8>
   33154:	mov	r1, r6
   33158:	bl	1f170 <__assert_fail@plt+0xd7d0>
   3315c:	subs	r6, r0, #0
   33160:	beq	331c4 <__assert_fail@plt+0x21824>
   33164:	mov	r3, #1
   33168:	str	r5, [r4]
   3316c:	stmib	r4, {r5, r6}
   33170:	ldrd	r4, [sp]
   33174:	mov	r0, r3
   33178:	ldrd	r6, [sp, #8]
   3317c:	ldr	r8, [sp, #16]
   33180:	add	sp, sp, #20
   33184:	pop	{pc}		; (ldr pc, [sp], #4)
   33188:	mov	r3, #1
   3318c:	str	r1, [r0]
   33190:	mov	r0, r3
   33194:	bx	lr
   33198:	mov	r0, r6
   3319c:	bl	1f0c4 <__assert_fail@plt+0xd724>
   331a0:	subs	r6, r0, #0
   331a4:	beq	331c4 <__assert_fail@plt+0x21824>
   331a8:	ldr	r1, [r4, #8]
   331ac:	cmp	r1, #0
   331b0:	beq	33164 <__assert_fail@plt+0x217c4>
   331b4:	ldr	r2, [r4]
   331b8:	mul	r2, r2, r8
   331bc:	bl	115d4 <memcpy@plt>
   331c0:	b	33164 <__assert_fail@plt+0x217c4>
   331c4:	mov	r3, #0
   331c8:	b	33170 <__assert_fail@plt+0x217d0>
   331cc:	bl	117d8 <__errno_location@plt>
   331d0:	mov	r2, #12
   331d4:	mov	r3, #0
   331d8:	str	r2, [r0]
   331dc:	b	33170 <__assert_fail@plt+0x217d0>
   331e0:	push	{lr}		; (str lr, [sp, #-4]!)
   331e4:	sub	sp, sp, #268	; 0x10c
   331e8:	movw	r2, #257	; 0x101
   331ec:	add	r1, sp, #4
   331f0:	bl	333c4 <__assert_fail@plt+0x21a24>
   331f4:	cmp	r0, #0
   331f8:	movne	r0, #0
   331fc:	bne	33230 <__assert_fail@plt+0x21890>
   33200:	movw	r1, #21612	; 0x546c
   33204:	movt	r1, #3
   33208:	add	r0, sp, #4
   3320c:	bl	11544 <strcmp@plt>
   33210:	cmp	r0, #0
   33214:	beq	33230 <__assert_fail@plt+0x21890>
   33218:	add	r0, sp, #4
   3321c:	movw	r1, #21616	; 0x5470
   33220:	movt	r1, #3
   33224:	bl	11544 <strcmp@plt>
   33228:	adds	r0, r0, #0
   3322c:	movne	r0, #1
   33230:	add	sp, sp, #268	; 0x10c
   33234:	pop	{pc}		; (ldr pc, [sp], #4)
   33238:	mov	r0, #14
   3323c:	str	r4, [sp, #-8]!
   33240:	str	lr, [sp, #4]
   33244:	bl	118b0 <nl_langinfo@plt>
   33248:	cmp	r0, #0
   3324c:	beq	33270 <__assert_fail@plt+0x218d0>
   33250:	ldrb	r2, [r0]
   33254:	movw	r3, #21624	; 0x5478
   33258:	movt	r3, #3
   3325c:	ldr	r4, [sp]
   33260:	add	sp, sp, #4
   33264:	cmp	r2, #0
   33268:	moveq	r0, r3
   3326c:	pop	{pc}		; (ldr pc, [sp], #4)
   33270:	ldr	r4, [sp]
   33274:	add	sp, sp, #4
   33278:	movw	r0, #21624	; 0x5478
   3327c:	movt	r0, #3
   33280:	pop	{pc}		; (ldr pc, [sp], #4)
   33284:	adds	r3, r0, #16
   33288:	bmi	332d4 <__assert_fail@plt+0x21934>
   3328c:	cmp	r3, r0
   33290:	bcc	332d4 <__assert_fail@plt+0x21934>
   33294:	mov	r0, r3
   33298:	str	r4, [sp, #-8]!
   3329c:	str	lr, [sp, #4]
   332a0:	bl	1170c <malloc@plt>
   332a4:	cmp	r0, #0
   332a8:	moveq	r0, #0
   332ac:	beq	332c8 <__assert_fail@plt+0x21928>
   332b0:	add	r3, r0, #8
   332b4:	rsb	r2, r0, #8
   332b8:	bic	r3, r3, #15
   332bc:	add	r3, r3, r2
   332c0:	add	r0, r0, r3
   332c4:	strb	r3, [r0, #-1]
   332c8:	ldr	r4, [sp]
   332cc:	add	sp, sp, #4
   332d0:	pop	{pc}		; (ldr pc, [sp], #4)
   332d4:	mov	r0, #0
   332d8:	bx	lr
   332dc:	tst	r0, #7
   332e0:	bne	332f8 <__assert_fail@plt+0x21958>
   332e4:	tst	r0, #8
   332e8:	bxeq	lr
   332ec:	ldrb	r3, [r0, #-1]
   332f0:	sub	r0, r0, r3
   332f4:	b	1ef94 <__assert_fail@plt+0xd5f4>
   332f8:	str	r4, [sp, #-8]!
   332fc:	str	lr, [sp, #4]
   33300:	bl	11964 <abort@plt>
   33304:	str	r4, [sp, #-8]!
   33308:	mov	r4, r0
   3330c:	str	lr, [sp, #4]
   33310:	bl	11574 <wcwidth@plt>
   33314:	cmp	r0, #0
   33318:	bge	3332c <__assert_fail@plt+0x2198c>
   3331c:	mov	r0, r4
   33320:	bl	1164c <iswcntrl@plt>
   33324:	clz	r0, r0
   33328:	lsr	r0, r0, #5
   3332c:	ldr	r4, [sp]
   33330:	add	sp, sp, #4
   33334:	pop	{pc}		; (ldr pc, [sp], #4)
   33338:	mov	r3, r1
   3333c:	strd	r4, [sp, #-16]!
   33340:	mov	r4, r1
   33344:	ldr	r2, [r1, #4]
   33348:	mov	r5, r0
   3334c:	ldr	r1, [r3], #16
   33350:	str	r6, [sp, #8]
   33354:	str	lr, [sp, #12]
   33358:	cmp	r1, r3
   3335c:	strne	r1, [r0]
   33360:	beq	3338c <__assert_fail@plt+0x219ec>
   33364:	ldrb	r3, [r4, #8]
   33368:	str	r2, [r5, #4]
   3336c:	ldr	r6, [sp, #8]
   33370:	cmp	r3, #0
   33374:	strb	r3, [r5, #8]
   33378:	ldrne	r3, [r4, #12]
   3337c:	strne	r3, [r5, #12]
   33380:	ldrd	r4, [sp]
   33384:	add	sp, sp, #12
   33388:	pop	{pc}		; (ldr pc, [sp], #4)
   3338c:	add	r3, r0, #16
   33390:	mov	r0, r3
   33394:	bl	115d4 <memcpy@plt>
   33398:	ldr	r2, [r4, #4]
   3339c:	str	r0, [r5]
   333a0:	b	33364 <__assert_fail@plt+0x219c4>
   333a4:	lsr	r2, r0, #5
   333a8:	movw	r3, #21632	; 0x5480
   333ac:	movt	r3, #3
   333b0:	and	r0, r0, #31
   333b4:	ldr	r3, [r3, r2, lsl #2]
   333b8:	lsr	r0, r3, r0
   333bc:	and	r0, r0, #1
   333c0:	bx	lr
   333c4:	strd	r4, [sp, #-16]!
   333c8:	mov	r5, r1
   333cc:	mov	r1, #0
   333d0:	mov	r4, r2
   333d4:	str	r6, [sp, #8]
   333d8:	str	lr, [sp, #12]
   333dc:	bl	11898 <setlocale@plt>
   333e0:	subs	r6, r0, #0
   333e4:	beq	33464 <__assert_fail@plt+0x21ac4>
   333e8:	bl	117a8 <strlen@plt>
   333ec:	cmp	r4, r0
   333f0:	bhi	33410 <__assert_fail@plt+0x21a70>
   333f4:	cmp	r4, #0
   333f8:	moveq	r0, #34	; 0x22
   333fc:	bne	33434 <__assert_fail@plt+0x21a94>
   33400:	ldrd	r4, [sp]
   33404:	ldr	r6, [sp, #8]
   33408:	add	sp, sp, #12
   3340c:	pop	{pc}		; (ldr pc, [sp], #4)
   33410:	add	r2, r0, #1
   33414:	mov	r1, r6
   33418:	mov	r0, r5
   3341c:	bl	115d4 <memcpy@plt>
   33420:	ldrd	r4, [sp]
   33424:	mov	r0, #0
   33428:	ldr	r6, [sp, #8]
   3342c:	add	sp, sp, #12
   33430:	pop	{pc}		; (ldr pc, [sp], #4)
   33434:	sub	r4, r4, #1
   33438:	mov	r1, r6
   3343c:	mov	r2, r4
   33440:	mov	r0, r5
   33444:	bl	115d4 <memcpy@plt>
   33448:	mov	r3, #0
   3344c:	mov	r0, #34	; 0x22
   33450:	strb	r3, [r5, r4]
   33454:	ldrd	r4, [sp]
   33458:	ldr	r6, [sp, #8]
   3345c:	add	sp, sp, #12
   33460:	pop	{pc}		; (ldr pc, [sp], #4)
   33464:	cmp	r4, #0
   33468:	mov	r0, #22
   3346c:	strbne	r6, [r5]
   33470:	ldrd	r4, [sp]
   33474:	ldr	r6, [sp, #8]
   33478:	add	sp, sp, #12
   3347c:	pop	{pc}		; (ldr pc, [sp], #4)
   33480:	mov	r1, #0
   33484:	b	11898 <setlocale@plt>
   33488:	mov	r2, #3
   3348c:	mov	r1, #0
   33490:	b	1ed4c <__assert_fail@plt+0xd3ac>
   33494:	eor	r1, r1, #-2147483648	; 0x80000000
   33498:	b	334a0 <__assert_fail@plt+0x21b00>
   3349c:	eor	r3, r3, #-2147483648	; 0x80000000
   334a0:	push	{r4, r5, lr}
   334a4:	lsl	r4, r1, #1
   334a8:	lsl	r5, r3, #1
   334ac:	teq	r4, r5
   334b0:	teqeq	r0, r2
   334b4:	orrsne	ip, r4, r0
   334b8:	orrsne	ip, r5, r2
   334bc:	mvnsne	ip, r4, asr #21
   334c0:	mvnsne	ip, r5, asr #21
   334c4:	beq	336b0 <__assert_fail@plt+0x21d10>
   334c8:	lsr	r4, r4, #21
   334cc:	rsbs	r5, r4, r5, lsr #21
   334d0:	rsblt	r5, r5, #0
   334d4:	ble	334f4 <__assert_fail@plt+0x21b54>
   334d8:	add	r4, r4, r5
   334dc:	eor	r2, r0, r2
   334e0:	eor	r3, r1, r3
   334e4:	eor	r0, r2, r0
   334e8:	eor	r1, r3, r1
   334ec:	eor	r2, r0, r2
   334f0:	eor	r3, r1, r3
   334f4:	cmp	r5, #54	; 0x36
   334f8:	pophi	{r4, r5, pc}
   334fc:	tst	r1, #-2147483648	; 0x80000000
   33500:	lsl	r1, r1, #12
   33504:	mov	ip, #1048576	; 0x100000
   33508:	orr	r1, ip, r1, lsr #12
   3350c:	beq	33518 <__assert_fail@plt+0x21b78>
   33510:	rsbs	r0, r0, #0
   33514:	rsc	r1, r1, #0
   33518:	tst	r3, #-2147483648	; 0x80000000
   3351c:	lsl	r3, r3, #12
   33520:	orr	r3, ip, r3, lsr #12
   33524:	beq	33530 <__assert_fail@plt+0x21b90>
   33528:	rsbs	r2, r2, #0
   3352c:	rsc	r3, r3, #0
   33530:	teq	r4, r5
   33534:	beq	33698 <__assert_fail@plt+0x21cf8>
   33538:	sub	r4, r4, #1
   3353c:	rsbs	lr, r5, #32
   33540:	blt	3355c <__assert_fail@plt+0x21bbc>
   33544:	lsl	ip, r2, lr
   33548:	adds	r0, r0, r2, lsr r5
   3354c:	adc	r1, r1, #0
   33550:	adds	r0, r0, r3, lsl lr
   33554:	adcs	r1, r1, r3, asr r5
   33558:	b	33578 <__assert_fail@plt+0x21bd8>
   3355c:	sub	r5, r5, #32
   33560:	add	lr, lr, #32
   33564:	cmp	r2, #1
   33568:	lsl	ip, r3, lr
   3356c:	orrcs	ip, ip, #2
   33570:	adds	r0, r0, r3, asr r5
   33574:	adcs	r1, r1, r3, asr #31
   33578:	and	r5, r1, #-2147483648	; 0x80000000
   3357c:	bpl	3358c <__assert_fail@plt+0x21bec>
   33580:	rsbs	ip, ip, #0
   33584:	rscs	r0, r0, #0
   33588:	rsc	r1, r1, #0
   3358c:	cmp	r1, #1048576	; 0x100000
   33590:	bcc	335d0 <__assert_fail@plt+0x21c30>
   33594:	cmp	r1, #2097152	; 0x200000
   33598:	bcc	335b8 <__assert_fail@plt+0x21c18>
   3359c:	lsrs	r1, r1, #1
   335a0:	rrxs	r0, r0
   335a4:	rrx	ip, ip
   335a8:	add	r4, r4, #1
   335ac:	lsl	r2, r4, #21
   335b0:	cmn	r2, #4194304	; 0x400000
   335b4:	bcs	33710 <__assert_fail@plt+0x21d70>
   335b8:	cmp	ip, #-2147483648	; 0x80000000
   335bc:	lsrseq	ip, r0, #1
   335c0:	adcs	r0, r0, #0
   335c4:	adc	r1, r1, r4, lsl #20
   335c8:	orr	r1, r1, r5
   335cc:	pop	{r4, r5, pc}
   335d0:	lsls	ip, ip, #1
   335d4:	adcs	r0, r0, r0
   335d8:	adc	r1, r1, r1
   335dc:	tst	r1, #1048576	; 0x100000
   335e0:	sub	r4, r4, #1
   335e4:	bne	335b8 <__assert_fail@plt+0x21c18>
   335e8:	teq	r1, #0
   335ec:	moveq	r1, r0
   335f0:	moveq	r0, #0
   335f4:	clz	r3, r1
   335f8:	addeq	r3, r3, #32
   335fc:	sub	r3, r3, #11
   33600:	subs	r2, r3, #32
   33604:	bge	33628 <__assert_fail@plt+0x21c88>
   33608:	adds	r2, r2, #12
   3360c:	ble	33624 <__assert_fail@plt+0x21c84>
   33610:	add	ip, r2, #20
   33614:	rsb	r2, r2, #12
   33618:	lsl	r0, r1, ip
   3361c:	lsr	r1, r1, r2
   33620:	b	33638 <__assert_fail@plt+0x21c98>
   33624:	add	r2, r2, #20
   33628:	rsble	ip, r2, #32
   3362c:	lsl	r1, r1, r2
   33630:	orrle	r1, r1, r0, lsr ip
   33634:	lslle	r0, r0, r2
   33638:	subs	r4, r4, r3
   3363c:	addge	r1, r1, r4, lsl #20
   33640:	orrge	r1, r1, r5
   33644:	popge	{r4, r5, pc}
   33648:	mvn	r4, r4
   3364c:	subs	r4, r4, #31
   33650:	bge	3368c <__assert_fail@plt+0x21cec>
   33654:	adds	r4, r4, #12
   33658:	bgt	33674 <__assert_fail@plt+0x21cd4>
   3365c:	add	r4, r4, #20
   33660:	rsb	r2, r4, #32
   33664:	lsr	r0, r0, r4
   33668:	orr	r0, r0, r1, lsl r2
   3366c:	orr	r1, r5, r1, lsr r4
   33670:	pop	{r4, r5, pc}
   33674:	rsb	r4, r4, #12
   33678:	rsb	r2, r4, #32
   3367c:	lsr	r0, r0, r2
   33680:	orr	r0, r0, r1, lsl r4
   33684:	mov	r1, r5
   33688:	pop	{r4, r5, pc}
   3368c:	lsr	r0, r1, r4
   33690:	mov	r1, r5
   33694:	pop	{r4, r5, pc}
   33698:	teq	r4, #0
   3369c:	eor	r3, r3, #1048576	; 0x100000
   336a0:	eoreq	r1, r1, #1048576	; 0x100000
   336a4:	addeq	r4, r4, #1
   336a8:	subne	r5, r5, #1
   336ac:	b	33538 <__assert_fail@plt+0x21b98>
   336b0:	mvns	ip, r4, asr #21
   336b4:	mvnsne	ip, r5, asr #21
   336b8:	beq	33720 <__assert_fail@plt+0x21d80>
   336bc:	teq	r4, r5
   336c0:	teqeq	r0, r2
   336c4:	beq	336d8 <__assert_fail@plt+0x21d38>
   336c8:	orrs	ip, r4, r0
   336cc:	moveq	r1, r3
   336d0:	moveq	r0, r2
   336d4:	pop	{r4, r5, pc}
   336d8:	teq	r1, r3
   336dc:	movne	r1, #0
   336e0:	movne	r0, #0
   336e4:	popne	{r4, r5, pc}
   336e8:	lsrs	ip, r4, #21
   336ec:	bne	33700 <__assert_fail@plt+0x21d60>
   336f0:	lsls	r0, r0, #1
   336f4:	adcs	r1, r1, r1
   336f8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   336fc:	pop	{r4, r5, pc}
   33700:	adds	r4, r4, #4194304	; 0x400000
   33704:	addcc	r1, r1, #1048576	; 0x100000
   33708:	popcc	{r4, r5, pc}
   3370c:	and	r5, r1, #-2147483648	; 0x80000000
   33710:	orr	r1, r5, #2130706432	; 0x7f000000
   33714:	orr	r1, r1, #15728640	; 0xf00000
   33718:	mov	r0, #0
   3371c:	pop	{r4, r5, pc}
   33720:	mvns	ip, r4, asr #21
   33724:	movne	r1, r3
   33728:	movne	r0, r2
   3372c:	mvnseq	ip, r5, asr #21
   33730:	movne	r3, r1
   33734:	movne	r2, r0
   33738:	orrs	r4, r0, r1, lsl #12
   3373c:	orrseq	r5, r2, r3, lsl #12
   33740:	teqeq	r1, r3
   33744:	orrne	r1, r1, #524288	; 0x80000
   33748:	pop	{r4, r5, pc}
   3374c:	teq	r0, #0
   33750:	moveq	r1, #0
   33754:	bxeq	lr
   33758:	push	{r4, r5, lr}
   3375c:	mov	r4, #1024	; 0x400
   33760:	add	r4, r4, #50	; 0x32
   33764:	mov	r5, #0
   33768:	mov	r1, #0
   3376c:	b	335e8 <__assert_fail@plt+0x21c48>
   33770:	teq	r0, #0
   33774:	moveq	r1, #0
   33778:	bxeq	lr
   3377c:	push	{r4, r5, lr}
   33780:	mov	r4, #1024	; 0x400
   33784:	add	r4, r4, #50	; 0x32
   33788:	ands	r5, r0, #-2147483648	; 0x80000000
   3378c:	rsbmi	r0, r0, #0
   33790:	mov	r1, #0
   33794:	b	335e8 <__assert_fail@plt+0x21c48>
   33798:	lsls	r2, r0, #1
   3379c:	asr	r1, r2, #3
   337a0:	rrx	r1, r1
   337a4:	lsl	r0, r2, #28
   337a8:	andsne	r3, r2, #-16777216	; 0xff000000
   337ac:	teqne	r3, #-16777216	; 0xff000000
   337b0:	eorne	r1, r1, #939524096	; 0x38000000
   337b4:	bxne	lr
   337b8:	bics	r2, r2, #-16777216	; 0xff000000
   337bc:	bxeq	lr
   337c0:	teq	r3, #-16777216	; 0xff000000
   337c4:	orreq	r1, r1, #524288	; 0x80000
   337c8:	bxeq	lr
   337cc:	push	{r4, r5, lr}
   337d0:	mov	r4, #896	; 0x380
   337d4:	and	r5, r1, #-2147483648	; 0x80000000
   337d8:	bic	r1, r1, #-2147483648	; 0x80000000
   337dc:	b	335e8 <__assert_fail@plt+0x21c48>
   337e0:	orrs	r2, r0, r1
   337e4:	bxeq	lr
   337e8:	push	{r4, r5, lr}
   337ec:	mov	r5, #0
   337f0:	b	33810 <__assert_fail@plt+0x21e70>
   337f4:	orrs	r2, r0, r1
   337f8:	bxeq	lr
   337fc:	push	{r4, r5, lr}
   33800:	ands	r5, r1, #-2147483648	; 0x80000000
   33804:	bpl	33810 <__assert_fail@plt+0x21e70>
   33808:	rsbs	r0, r0, #0
   3380c:	rsc	r1, r1, #0
   33810:	mov	r4, #1024	; 0x400
   33814:	add	r4, r4, #50	; 0x32
   33818:	lsrs	ip, r1, #22
   3381c:	beq	3358c <__assert_fail@plt+0x21bec>
   33820:	mov	r2, #3
   33824:	lsrs	ip, ip, #3
   33828:	addne	r2, r2, #3
   3382c:	lsrs	ip, ip, #3
   33830:	addne	r2, r2, #3
   33834:	add	r2, r2, ip, lsr #3
   33838:	rsb	r3, r2, #32
   3383c:	lsl	ip, r0, r3
   33840:	lsr	r0, r0, r2
   33844:	orr	r0, r0, r1, lsl r3
   33848:	lsr	r1, r1, r2
   3384c:	add	r4, r4, r2
   33850:	b	3358c <__assert_fail@plt+0x21bec>
   33854:	cmp	r3, #0
   33858:	cmpeq	r2, #0
   3385c:	bne	33874 <__assert_fail@plt+0x21ed4>
   33860:	cmp	r1, #0
   33864:	cmpeq	r0, #0
   33868:	mvnne	r1, #0
   3386c:	mvnne	r0, #0
   33870:	b	33890 <__assert_fail@plt+0x21ef0>
   33874:	sub	sp, sp, #8
   33878:	push	{sp, lr}
   3387c:	bl	338e0 <__assert_fail@plt+0x21f40>
   33880:	ldr	lr, [sp, #4]
   33884:	add	sp, sp, #8
   33888:	pop	{r2, r3}
   3388c:	bx	lr
   33890:	push	{r1, lr}
   33894:	mov	r0, #8
   33898:	bl	11520 <raise@plt>
   3389c:	pop	{r1, pc}
   338a0:	vmov	d6, r0, r1
   338a4:	vldr	d7, [pc, #36]	; 338d0 <__assert_fail@plt+0x21f30>
   338a8:	vldr	d5, [pc, #40]	; 338d8 <__assert_fail@plt+0x21f38>
   338ac:	vmul.f64	d7, d6, d7
   338b0:	vcvt.u32.f64	s14, d7
   338b4:	vcvt.f64.u32	d4, s14
   338b8:	vmov	r1, s14
   338bc:	vmls.f64	d6, d4, d5
   338c0:	vcvt.u32.f64	s15, d6
   338c4:	vmov	r0, s15
   338c8:	bx	lr
   338cc:	nop			; (mov r0, r0)
   338d0:	andeq	r0, r0, r0
   338d4:	ldclcc	0, cr0, [r0]
   338d8:	andeq	r0, r0, r0
   338dc:	mvnsmi	r0, r0
   338e0:	cmp	r1, r3
   338e4:	cmpeq	r0, r2
   338e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   338ec:	mov	r4, r0
   338f0:	movcc	r0, #0
   338f4:	mov	r5, r1
   338f8:	ldr	lr, [sp, #36]	; 0x24
   338fc:	movcc	r1, r0
   33900:	bcc	339fc <__assert_fail@plt+0x2205c>
   33904:	cmp	r3, #0
   33908:	clzeq	ip, r2
   3390c:	clzne	ip, r3
   33910:	addeq	ip, ip, #32
   33914:	cmp	r5, #0
   33918:	clzeq	r1, r4
   3391c:	addeq	r1, r1, #32
   33920:	clzne	r1, r5
   33924:	sub	ip, ip, r1
   33928:	sub	sl, ip, #32
   3392c:	lsl	r9, r3, ip
   33930:	rsb	fp, ip, #32
   33934:	orr	r9, r9, r2, lsl sl
   33938:	orr	r9, r9, r2, lsr fp
   3393c:	lsl	r8, r2, ip
   33940:	cmp	r5, r9
   33944:	cmpeq	r4, r8
   33948:	movcc	r0, #0
   3394c:	movcc	r1, r0
   33950:	bcc	3396c <__assert_fail@plt+0x21fcc>
   33954:	mov	r0, #1
   33958:	subs	r4, r4, r8
   3395c:	lsl	r1, r0, sl
   33960:	orr	r1, r1, r0, lsr fp
   33964:	lsl	r0, r0, ip
   33968:	sbc	r5, r5, r9
   3396c:	cmp	ip, #0
   33970:	beq	339fc <__assert_fail@plt+0x2205c>
   33974:	lsr	r6, r8, #1
   33978:	orr	r6, r6, r9, lsl #31
   3397c:	lsr	r7, r9, #1
   33980:	mov	r2, ip
   33984:	b	339a8 <__assert_fail@plt+0x22008>
   33988:	subs	r3, r4, r6
   3398c:	sbc	r8, r5, r7
   33990:	adds	r3, r3, r3
   33994:	adc	r8, r8, r8
   33998:	adds	r4, r3, #1
   3399c:	adc	r5, r8, #0
   339a0:	subs	r2, r2, #1
   339a4:	beq	339c4 <__assert_fail@plt+0x22024>
   339a8:	cmp	r5, r7
   339ac:	cmpeq	r4, r6
   339b0:	bcs	33988 <__assert_fail@plt+0x21fe8>
   339b4:	adds	r4, r4, r4
   339b8:	adc	r5, r5, r5
   339bc:	subs	r2, r2, #1
   339c0:	bne	339a8 <__assert_fail@plt+0x22008>
   339c4:	lsr	r3, r4, ip
   339c8:	orr	r3, r3, r5, lsl fp
   339cc:	lsr	r2, r5, ip
   339d0:	orr	r3, r3, r5, lsr sl
   339d4:	adds	r0, r0, r4
   339d8:	mov	r4, r3
   339dc:	lsl	r3, r2, ip
   339e0:	orr	r3, r3, r4, lsl sl
   339e4:	lsl	ip, r4, ip
   339e8:	orr	r3, r3, r4, lsr fp
   339ec:	adc	r1, r1, r5
   339f0:	subs	r0, r0, ip
   339f4:	mov	r5, r2
   339f8:	sbc	r1, r1, r3
   339fc:	cmp	lr, #0
   33a00:	strdne	r4, [lr]
   33a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33a08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33a0c:	mov	r7, r0
   33a10:	ldr	r6, [pc, #72]	; 33a60 <__assert_fail@plt+0x220c0>
   33a14:	ldr	r5, [pc, #72]	; 33a64 <__assert_fail@plt+0x220c4>
   33a18:	add	r6, pc, r6
   33a1c:	add	r5, pc, r5
   33a20:	sub	r6, r6, r5
   33a24:	mov	r8, r1
   33a28:	mov	r9, r2
   33a2c:	bl	114d0 <pthread_mutex_unlock@plt-0x20>
   33a30:	asrs	r6, r6, #2
   33a34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   33a38:	mov	r4, #0
   33a3c:	add	r4, r4, #1
   33a40:	ldr	r3, [r5], #4
   33a44:	mov	r2, r9
   33a48:	mov	r1, r8
   33a4c:	mov	r0, r7
   33a50:	blx	r3
   33a54:	cmp	r6, r4
   33a58:	bne	33a3c <__assert_fail@plt+0x2209c>
   33a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33a60:	strdeq	r2, [r1], -r4
   33a64:	andeq	r2, r1, ip, ror #9
   33a68:	bx	lr
   33a6c:	ldr	r3, [pc, #12]	; 33a80 <__assert_fail@plt+0x220e0>
   33a70:	mov	r1, #0
   33a74:	add	r3, pc, r3
   33a78:	ldr	r2, [r3]
   33a7c:	b	117fc <__cxa_atexit@plt>
   33a80:	andeq	r2, r1, ip, lsr #14

Disassembly of section .fini:

00033a84 <.fini>:
   33a84:	push	{r3, lr}
   33a88:	pop	{r3, pc}
