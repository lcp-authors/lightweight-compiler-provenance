
../repos/prog2/2.2:     file format elf32-littlearm


Disassembly of section .init:

000106a8 <.init>:
   106a8:	push	{r3, lr}
   106ac:	bl	10958 <_start@@Base+0x3c>
   106b0:	pop	{r3, pc}

Disassembly of section .plt:

000106b4 <printf@plt-0x14>:
   106b4:	push	{lr}		; (str lr, [sp, #-4]!)
   106b8:	ldr	lr, [pc, #4]	; 106c4 <printf@plt-0x4>
   106bc:	add	lr, pc, lr
   106c0:	ldr	pc, [lr, #8]!
   106c4:	andeq	r0, r1, ip, lsr r9

000106c8 <printf@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2364]!	; 0x93c

000106d4 <free@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2356]!	; 0x934

000106e0 <fgets@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2348]!	; 0x92c

000106ec <memcpy@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2340]!	; 0x924

000106f8 <realloc@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2332]!	; 0x91c

00010704 <puts@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2324]!	; 0x914

00010710 <malloc@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2316]!	; 0x90c

0001071c <__libc_start_main@plt>:
   1071c:	add	ip, pc, #0, 12
   10720:	add	ip, ip, #16, 20	; 0x10000
   10724:	ldr	pc, [ip, #2308]!	; 0x904

00010728 <__gmon_start__@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #16, 20	; 0x10000
   10730:	ldr	pc, [ip, #2300]!	; 0x8fc

00010734 <strlen@plt>:
   10734:	add	ip, pc, #0, 12
   10738:	add	ip, ip, #16, 20	; 0x10000
   1073c:	ldr	pc, [ip, #2292]!	; 0x8f4

00010740 <__isoc99_scanf@plt>:
   10740:	add	ip, pc, #0, 12
   10744:	add	ip, ip, #16, 20	; 0x10000
   10748:	ldr	pc, [ip, #2284]!	; 0x8ec

0001074c <abort@plt>:
   1074c:	add	ip, pc, #0, 12
   10750:	add	ip, ip, #16, 20	; 0x10000
   10754:	ldr	pc, [ip, #2276]!	; 0x8e4

00010758 <getc@plt>:
   10758:	add	ip, pc, #0, 12
   1075c:	add	ip, ip, #16, 20	; 0x10000
   10760:	ldr	pc, [ip, #2268]!	; 0x8dc

Disassembly of section .text:

00010764 <main@@Base>:
   10764:	mov	r0, #12
   10768:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1076c:	ldr	r4, [pc, #396]	; 10900 <main@@Base+0x19c>
   10770:	strd	r6, [sp, #8]
   10774:	strd	r8, [sp, #16]
   10778:	strd	sl, [sp, #24]
   1077c:	str	lr, [sp, #32]
   10780:	sub	sp, sp, #100	; 0x64
   10784:	add	r7, sp, r0
   10788:	ldr	r9, [pc, #372]	; 10904 <main@@Base+0x1a0>
   1078c:	add	r4, pc, r4
   10790:	bl	10710 <malloc@plt>
   10794:	ldr	r1, [pc, #364]	; 10908 <main@@Base+0x1a4>
   10798:	mov	r2, #0
   1079c:	mov	r8, r0
   107a0:	mov	sl, r2
   107a4:	mov	r3, r4
   107a8:	ldr	fp, [pc, #348]	; 1090c <main@@Base+0x1a8>
   107ac:	str	r2, [r0]
   107b0:	add	r9, pc, r9
   107b4:	str	r2, [r0, #4]
   107b8:	str	r2, [r0, #8]
   107bc:	ldr	r6, [r4, r1]
   107c0:	add	fp, pc, fp
   107c4:	mov	r5, sl
   107c8:	mov	r4, #0
   107cc:	add	r4, r4, #1
   107d0:	mov	r0, r9
   107d4:	mov	r1, r4
   107d8:	bl	106c8 <printf@plt>
   107dc:	subs	r0, r5, #0
   107e0:	moveq	r0, fp
   107e4:	bl	10704 <puts@plt>
   107e8:	cmp	r4, #3
   107ec:	beq	107f8 <main@@Base+0x94>
   107f0:	ldr	r5, [r8, r4, lsl #2]
   107f4:	b	107cc <main@@Base+0x68>
   107f8:	ldr	r5, [pc, #272]	; 10910 <main@@Base+0x1ac>
   107fc:	ldr	r4, [pc, #272]	; 10914 <main@@Base+0x1b0>
   10800:	add	r5, pc, r5
   10804:	add	r4, pc, r4
   10808:	mov	r1, #3
   1080c:	mov	r0, r5
   10810:	bl	106c8 <printf@plt>
   10814:	mov	r1, r7
   10818:	mov	r0, r4
   1081c:	bl	10740 <__isoc99_scanf@plt>
   10820:	ldr	r0, [r6]
   10824:	bl	10758 <getc@plt>
   10828:	ldr	r3, [sp, #12]
   1082c:	cmp	r3, #3
   10830:	bhi	10808 <main@@Base+0xa4>
   10834:	cmp	r3, #0
   10838:	beq	108b8 <main@@Base+0x154>
   1083c:	ldr	r0, [pc, #212]	; 10918 <main@@Base+0x1b4>
   10840:	add	r4, sp, #16
   10844:	add	r0, pc, r0
   10848:	bl	106c8 <printf@plt>
   1084c:	mov	r1, #80	; 0x50
   10850:	mov	r0, r4
   10854:	ldr	r2, [r6]
   10858:	bl	106e0 <fgets@plt>
   1085c:	mov	r0, r4
   10860:	bl	10734 <strlen@plt>
   10864:	ldr	r5, [sp, #12]
   10868:	add	r3, sp, #96	; 0x60
   1086c:	mov	r2, #0
   10870:	add	r3, r3, r0
   10874:	mov	r0, r4
   10878:	strb	r2, [r3, #-81]	; 0xffffffaf
   1087c:	bl	10734 <strlen@plt>
   10880:	add	sl, r0, #1
   10884:	sub	r5, r5, #-1073741823	; 0xc0000001
   10888:	mov	r1, sl
   1088c:	ldr	r0, [r8, r5, lsl #2]
   10890:	bl	106f8 <realloc@plt>
   10894:	ldr	r3, [sp, #12]
   10898:	mov	r2, sl
   1089c:	mov	r1, r4
   108a0:	str	r0, [r8, r5, lsl #2]
   108a4:	sub	r3, r3, #-1073741823	; 0xc0000001
   108a8:	ldr	r0, [r8, r3, lsl #2]
   108ac:	bl	106ec <memcpy@plt>
   108b0:	ldr	sl, [r8]
   108b4:	b	107c4 <main@@Base+0x60>
   108b8:	mov	r0, sl
   108bc:	str	r3, [sp, #4]
   108c0:	bl	106d4 <free@plt>
   108c4:	ldr	r0, [r8, #4]
   108c8:	bl	106d4 <free@plt>
   108cc:	ldr	r0, [r8, #8]
   108d0:	bl	106d4 <free@plt>
   108d4:	mov	r0, r8
   108d8:	bl	106d4 <free@plt>
   108dc:	ldr	r3, [sp, #4]
   108e0:	mov	r0, r3
   108e4:	add	sp, sp, #100	; 0x64
   108e8:	ldrd	r4, [sp]
   108ec:	ldrd	r6, [sp, #8]
   108f0:	ldrd	r8, [sp, #16]
   108f4:	ldrd	sl, [sp, #24]
   108f8:	add	sp, sp, #32
   108fc:	pop	{pc}		; (ldr pc, [sp], #4)
   10900:	andeq	r0, r1, ip, ror #16
   10904:	andeq	r0, r0, r4, asr #5
   10908:	andeq	r0, r0, r4, asr #32
   1090c:			; <UNDEFINED> instruction: 0x000002bc
   10910:	andeq	r0, r0, r4, lsl #5
   10914:	andeq	r0, r0, r4, lsr #5
   10918:	andeq	r0, r0, r8, ror #4

0001091c <_start@@Base>:
   1091c:	mov	fp, #0
   10920:	mov	lr, #0
   10924:	pop	{r1}		; (ldr r1, [sp], #4)
   10928:	mov	r2, sp
   1092c:	push	{r2}		; (str r2, [sp, #-4]!)
   10930:	push	{r0}		; (str r0, [sp, #-4]!)
   10934:	ldr	ip, [pc, #16]	; 1094c <_start@@Base+0x30>
   10938:	push	{ip}		; (str ip, [sp, #-4]!)
   1093c:	ldr	r0, [pc, #12]	; 10950 <_start@@Base+0x34>
   10940:	ldr	r3, [pc, #12]	; 10954 <_start@@Base+0x38>
   10944:	bl	1071c <__libc_start_main@plt>
   10948:	bl	1074c <abort@plt>
   1094c:	andeq	r0, r1, ip, ror #20
   10950:	andeq	r0, r1, r4, ror #14
   10954:	andeq	r0, r1, ip, lsl #20
   10958:	ldr	r3, [pc, #20]	; 10974 <_start@@Base+0x58>
   1095c:	ldr	r2, [pc, #20]	; 10978 <_start@@Base+0x5c>
   10960:	add	r3, pc, r3
   10964:	ldr	r2, [r3, r2]
   10968:	cmp	r2, #0
   1096c:	bxeq	lr
   10970:	b	10728 <__gmon_start__@plt>
   10974:	muleq	r1, r8, r6
   10978:	andeq	r0, r0, r0, asr #32
   1097c:	ldr	r0, [pc, #24]	; 1099c <_start@@Base+0x80>
   10980:	ldr	r3, [pc, #24]	; 109a0 <_start@@Base+0x84>
   10984:	cmp	r3, r0
   10988:	bxeq	lr
   1098c:	ldr	r3, [pc, #16]	; 109a4 <_start@@Base+0x88>
   10990:	cmp	r3, #0
   10994:	bxeq	lr
   10998:	bx	r3
   1099c:	andeq	r1, r2, r0, asr r0
   109a0:	andeq	r1, r2, r0, asr r0
   109a4:	andeq	r0, r0, r0
   109a8:	ldr	r0, [pc, #36]	; 109d4 <_start@@Base+0xb8>
   109ac:	ldr	r1, [pc, #36]	; 109d8 <_start@@Base+0xbc>
   109b0:	sub	r1, r1, r0
   109b4:	asr	r1, r1, #2
   109b8:	add	r1, r1, r1, lsr #31
   109bc:	asrs	r1, r1, #1
   109c0:	bxeq	lr
   109c4:	ldr	r3, [pc, #16]	; 109dc <_start@@Base+0xc0>
   109c8:	cmp	r3, #0
   109cc:	bxeq	lr
   109d0:	bx	r3
   109d4:	andeq	r1, r2, r0, asr r0
   109d8:	andeq	r1, r2, r0, asr r0
   109dc:	andeq	r0, r0, r0
   109e0:	push	{r4, lr}
   109e4:	ldr	r4, [pc, #24]	; 10a04 <_start@@Base+0xe8>
   109e8:	ldrb	r3, [r4]
   109ec:	cmp	r3, #0
   109f0:	popne	{r4, pc}
   109f4:	bl	1097c <_start@@Base+0x60>
   109f8:	mov	r3, #1
   109fc:	strb	r3, [r4]
   10a00:	pop	{r4, pc}
   10a04:	andeq	r1, r2, r0, asr r0
   10a08:	b	109a8 <_start@@Base+0x8c>

00010a0c <__libc_csu_init@@Base>:
   10a0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a10:	mov	r7, r0
   10a14:	ldr	r6, [pc, #72]	; 10a64 <__libc_csu_init@@Base+0x58>
   10a18:	ldr	r5, [pc, #72]	; 10a68 <__libc_csu_init@@Base+0x5c>
   10a1c:	add	r6, pc, r6
   10a20:	add	r5, pc, r5
   10a24:	sub	r6, r6, r5
   10a28:	mov	r8, r1
   10a2c:	mov	r9, r2
   10a30:	bl	106a8 <printf@plt-0x20>
   10a34:	asrs	r6, r6, #2
   10a38:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a3c:	mov	r4, #0
   10a40:	add	r4, r4, #1
   10a44:	ldr	r3, [r5], #4
   10a48:	mov	r2, r9
   10a4c:	mov	r1, r8
   10a50:	mov	r0, r7
   10a54:	blx	r3
   10a58:	cmp	r6, r4
   10a5c:	bne	10a40 <__libc_csu_init@@Base+0x34>
   10a60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a64:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10a68:	andeq	r0, r1, r8, ror #9

00010a6c <__libc_csu_fini@@Base>:
   10a6c:	bx	lr

Disassembly of section .fini:

00010a70 <.fini>:
   10a70:	push	{r3, lr}
   10a74:	pop	{r3, pc}
