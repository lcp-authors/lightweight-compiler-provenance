
../repos/charybdis/authd/.libs/authd:     file format elf32-littlearm


Disassembly of section .init:

00011484 <.init>:
   11484:	push	{r3, lr}
   11488:	bl	118d0 <sprintf@plt+0x48>
   1148c:	pop	{r3, pc}

Disassembly of section .plt:

00011490 <sigemptyset@plt-0x14>:
   11490:	push	{lr}		; (str lr, [sp, #-4]!)
   11494:	ldr	lr, [pc, #4]	; 114a0 <sigemptyset@plt-0x4>
   11498:	add	lr, pc, lr
   1149c:	ldr	pc, [lr, #8]!
   114a0:	andeq	r8, r1, r0, ror #22

000114a4 <sigemptyset@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #24, 20	; 0x18000
   114ac:	ldr	pc, [ip, #2912]!	; 0xb60

000114b0 <strerror@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #24, 20	; 0x18000
   114b8:	ldr	pc, [ip, #2904]!	; 0xb58

000114bc <rb_helper_loop@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #24, 20	; 0x18000
   114c4:	ldr	pc, [ip, #2896]!	; 0xb50

000114c8 <abort@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #24, 20	; 0x18000
   114d0:	ldr	pc, [ip, #2888]!	; 0xb48

000114d4 <rb_event_addish@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #24, 20	; 0x18000
   114dc:	ldr	pc, [ip, #2880]!	; 0xb40

000114e0 <getsockname@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #24, 20	; 0x18000
   114e8:	ldr	pc, [ip, #2872]!	; 0xb38

000114ec <rb_ignore_errno@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #24, 20	; 0x18000
   114f4:	ldr	pc, [ip, #2864]!	; 0xb30

000114f8 <rb_connect_tcp_ssl@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #24, 20	; 0x18000
   11500:	ldr	pc, [ip, #2856]!	; 0xb28

00011504 <rb_connect_tcp@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #24, 20	; 0x18000
   1150c:	ldr	pc, [ip, #2848]!	; 0xb20

00011510 <__libc_start_main@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #24, 20	; 0x18000
   11518:	ldr	pc, [ip, #2840]!	; 0xb18

0001151c <rb_event_delete@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #24, 20	; 0x18000
   11524:	ldr	pc, [ip, #2832]!	; 0xb10

00011528 <rb_setselect@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #24, 20	; 0x18000
   11530:	ldr	pc, [ip, #2824]!	; 0xb08

00011534 <rb_get_fd@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #24, 20	; 0x18000
   1153c:	ldr	pc, [ip, #2816]!	; 0xb00

00011540 <__gmon_start__@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #24, 20	; 0x18000
   11548:	ldr	pc, [ip, #2808]!	; 0xaf8

0001154c <vsnprintf@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #24, 20	; 0x18000
   11554:	ldr	pc, [ip, #2800]!	; 0xaf0

00011558 <rb_socket@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #24, 20	; 0x18000
   11560:	ldr	pc, [ip, #2792]!	; 0xae8

00011564 <fclose@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #24, 20	; 0x18000
   1156c:	ldr	pc, [ip, #2784]!	; 0xae0

00011570 <rb_strtok_r@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #24, 20	; 0x18000
   11578:	ldr	pc, [ip, #2776]!	; 0xad8

0001157c <strchr@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #24, 20	; 0x18000
   11584:	ldr	pc, [ip, #2768]!	; 0xad0

00011588 <rb_dictionary_foreach_cur@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #24, 20	; 0x18000
   11590:	ldr	pc, [ip, #2760]!	; 0xac8

00011594 <strcasecmp@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #24, 20	; 0x18000
   1159c:	ldr	pc, [ip, #2752]!	; 0xac0

000115a0 <calloc@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #24, 20	; 0x18000
   115a8:	ldr	pc, [ip, #2744]!	; 0xab8

000115ac <rb_helper_child@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #24, 20	; 0x18000
   115b4:	ldr	pc, [ip, #2736]!	; 0xab0

000115b8 <sendto@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #24, 20	; 0x18000
   115c0:	ldr	pc, [ip, #2728]!	; 0xaa8

000115c4 <fopen@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #24, 20	; 0x18000
   115cc:	ldr	pc, [ip, #2720]!	; 0xaa0

000115d0 <memset@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #24, 20	; 0x18000
   115d8:	ldr	pc, [ip, #2712]!	; 0xa98

000115dc <freeaddrinfo@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #24, 20	; 0x18000
   115e4:	ldr	pc, [ip, #2704]!	; 0xa90

000115e8 <strrchr@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #24, 20	; 0x18000
   115f0:	ldr	pc, [ip, #2696]!	; 0xa88

000115f4 <rb_write@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #24, 20	; 0x18000
   115fc:	ldr	pc, [ip, #2688]!	; 0xa80

00011600 <__assert_fail@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #24, 20	; 0x18000
   11608:	ldr	pc, [ip, #2680]!	; 0xa78

0001160c <fgets_unlocked@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #24, 20	; 0x18000
   11614:	ldr	pc, [ip, #2672]!	; 0xa70

00011618 <rb_strlcpy@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #24, 20	; 0x18000
   11620:	ldr	pc, [ip, #2664]!	; 0xa68

00011624 <strtoull@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #24, 20	; 0x18000
   1162c:	ldr	pc, [ip, #2656]!	; 0xa60

00011630 <rb_dictionary_foreach_next@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #24, 20	; 0x18000
   11638:	ldr	pc, [ip, #2648]!	; 0xa58

0001163c <free@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #24, 20	; 0x18000
   11644:	ldr	pc, [ip, #2640]!	; 0xa50

00011648 <rb_string_to_array@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #24, 20	; 0x18000
   11650:	ldr	pc, [ip, #2632]!	; 0xa48

00011654 <rb_read@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #24, 20	; 0x18000
   1165c:	ldr	pc, [ip, #2624]!	; 0xa40

00011660 <rb_strcasecmp@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #24, 20	; 0x18000
   11668:	ldr	pc, [ip, #2616]!	; 0xa38

0001166c <getaddrinfo@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #24, 20	; 0x18000
   11674:	ldr	pc, [ip, #2608]!	; 0xa30

00011678 <rb_dictionary_foreach_start@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #24, 20	; 0x18000
   11680:	ldr	pc, [ip, #2600]!	; 0xa28

00011684 <rb_inet_pton_sock@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #24, 20	; 0x18000
   1168c:	ldr	pc, [ip, #2592]!	; 0xa20

00011690 <strlen@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #24, 20	; 0x18000
   11698:	ldr	pc, [ip, #2584]!	; 0xa18

0001169c <rb_current_time@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #24, 20	; 0x18000
   116a4:	ldr	pc, [ip, #2576]!	; 0xa10

000116a8 <rb_dictionary_delete@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #24, 20	; 0x18000
   116b0:	ldr	pc, [ip, #2568]!	; 0xa08

000116b4 <memcpy@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #24, 20	; 0x18000
   116bc:	ldr	pc, [ip, #2560]!	; 0xa00

000116c0 <rb_free_rb_dlink_node@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #24, 20	; 0x18000
   116c8:	ldr	pc, [ip, #2552]!	; 0x9f8

000116cc <bcmp@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #24, 20	; 0x18000
   116d4:	ldr	pc, [ip, #2544]!	; 0x9f0

000116d8 <rb_close@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #24, 20	; 0x18000
   116e0:	ldr	pc, [ip, #2536]!	; 0x9e8

000116e4 <strtol@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #24, 20	; 0x18000
   116ec:	ldr	pc, [ip, #2528]!	; 0x9e0

000116f0 <sigaddset@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #24, 20	; 0x18000
   116f8:	ldr	pc, [ip, #2520]!	; 0x9d8

000116fc <strcpy@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #24, 20	; 0x18000
   11704:	ldr	pc, [ip, #2512]!	; 0x9d0

00011708 <rb_dictionary_destroy@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #24, 20	; 0x18000
   11710:	ldr	pc, [ip, #2504]!	; 0x9c8

00011714 <bind@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #24, 20	; 0x18000
   1171c:	ldr	pc, [ip, #2496]!	; 0x9c0

00011720 <strstr@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #24, 20	; 0x18000
   11728:	ldr	pc, [ip, #2488]!	; 0x9b8

0001172c <fwrite@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #24, 20	; 0x18000
   11734:	ldr	pc, [ip, #2480]!	; 0x9b0

00011738 <rb_init_prng@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #24, 20	; 0x18000
   11740:	ldr	pc, [ip, #2472]!	; 0x9a8

00011744 <rb_dictionary_retrieve@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #24, 20	; 0x18000
   1174c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011750 <rb_outofmemory@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #24, 20	; 0x18000
   11758:	ldr	pc, [ip, #2456]!	; 0x998

0001175c <__ctype_b_loc@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #24, 20	; 0x18000
   11764:	ldr	pc, [ip, #2448]!	; 0x990

00011768 <rb_dictionary_add@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #24, 20	; 0x18000
   11770:	ldr	pc, [ip, #2440]!	; 0x988

00011774 <rb_set_time@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #24, 20	; 0x18000
   1177c:	ldr	pc, [ip, #2432]!	; 0x980

00011780 <malloc@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #24, 20	; 0x18000
   11788:	ldr	pc, [ip, #2424]!	; 0x978

0001178c <sigaction@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #24, 20	; 0x18000
   11794:	ldr	pc, [ip, #2416]!	; 0x970

00011798 <rb_helper_read@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #24, 20	; 0x18000
   117a0:	ldr	pc, [ip, #2408]!	; 0x968

000117a4 <rb_inet_ntop_sock@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #24, 20	; 0x18000
   117ac:	ldr	pc, [ip, #2400]!	; 0x960

000117b0 <rb_dictionary_find@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #24, 20	; 0x18000
   117b8:	ldr	pc, [ip, #2392]!	; 0x958

000117bc <rb_dictionary_create@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #24, 20	; 0x18000
   117c4:	ldr	pc, [ip, #2384]!	; 0x950

000117c8 <memmove@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #24, 20	; 0x18000
   117d0:	ldr	pc, [ip, #2376]!	; 0x948

000117d4 <rb_accept_tcp@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #24, 20	; 0x18000
   117dc:	ldr	pc, [ip, #2368]!	; 0x940

000117e0 <rb_helper_write@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #24, 20	; 0x18000
   117e8:	ldr	pc, [ip, #2360]!	; 0x938

000117ec <rb_event_add@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #24, 20	; 0x18000
   117f4:	ldr	pc, [ip, #2352]!	; 0x930

000117f8 <rb_get_random@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #24, 20	; 0x18000
   11800:	ldr	pc, [ip, #2344]!	; 0x928

00011804 <rb_make_rb_dlink_node@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #24, 20	; 0x18000
   1180c:	ldr	pc, [ip, #2336]!	; 0x920

00011810 <snprintf@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #24, 20	; 0x18000
   11818:	ldr	pc, [ip, #2328]!	; 0x918

0001181c <rb_listen@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #24, 20	; 0x18000
   11824:	ldr	pc, [ip, #2320]!	; 0x910

00011828 <strncmp@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #24, 20	; 0x18000
   11830:	ldr	pc, [ip, #2312]!	; 0x908

00011834 <recvfrom@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #24, 20	; 0x18000
   1183c:	ldr	pc, [ip, #2304]!	; 0x900

00011840 <setsockopt@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #24, 20	; 0x18000
   11848:	ldr	pc, [ip, #2296]!	; 0x8f8

0001184c <strpbrk@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #24, 20	; 0x18000
   11854:	ldr	pc, [ip, #2288]!	; 0x8f0

00011858 <memchr@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #24, 20	; 0x18000
   11860:	ldr	pc, [ip, #2280]!	; 0x8e8

00011864 <strcmp@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #24, 20	; 0x18000
   1186c:	ldr	pc, [ip, #2272]!	; 0x8e0

00011870 <exit@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #24, 20	; 0x18000
   11878:	ldr	pc, [ip, #2264]!	; 0x8d8

0001187c <__errno_location@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #24, 20	; 0x18000
   11884:	ldr	pc, [ip, #2256]!	; 0x8d0

00011888 <sprintf@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #24, 20	; 0x18000
   11890:	ldr	pc, [ip, #2248]!	; 0x8c8

Disassembly of section .text:

00011894 <.text>:
   11894:	mov	fp, #0
   11898:	mov	lr, #0
   1189c:	pop	{r1}		; (ldr r1, [sp], #4)
   118a0:	mov	r2, sp
   118a4:	push	{r2}		; (str r2, [sp, #-4]!)
   118a8:	push	{r0}		; (str r0, [sp, #-4]!)
   118ac:	ldr	ip, [pc, #16]	; 118c4 <sprintf@plt+0x3c>
   118b0:	push	{ip}		; (str ip, [sp, #-4]!)
   118b4:	ldr	r0, [pc, #12]	; 118c8 <sprintf@plt+0x40>
   118b8:	ldr	r3, [pc, #12]	; 118cc <sprintf@plt+0x44>
   118bc:	bl	11510 <__libc_start_main@plt>
   118c0:	bl	114c8 <abort@plt>
   118c4:	andeq	r8, r1, r0, lsl lr
   118c8:	andeq	r1, r1, r0, lsr fp
   118cc:			; <UNDEFINED> instruction: 0x00018db0
   118d0:	ldr	r3, [pc, #20]	; 118ec <sprintf@plt+0x64>
   118d4:	ldr	r2, [pc, #20]	; 118f0 <sprintf@plt+0x68>
   118d8:	add	r3, pc, r3
   118dc:	ldr	r2, [r3, r2]
   118e0:	cmp	r2, #0
   118e4:	bxeq	lr
   118e8:	b	11540 <__gmon_start__@plt>
   118ec:	andeq	r8, r1, r0, lsr #14
   118f0:	andeq	r0, r0, r0, ror #2
   118f4:	ldr	r0, [pc, #24]	; 11914 <sprintf@plt+0x8c>
   118f8:	ldr	r3, [pc, #24]	; 11918 <sprintf@plt+0x90>
   118fc:	cmp	r3, r0
   11900:	bxeq	lr
   11904:	ldr	r3, [pc, #16]	; 1191c <sprintf@plt+0x94>
   11908:	cmp	r3, #0
   1190c:	bxeq	lr
   11910:	bx	r3
   11914:	andeq	sl, r2, ip, lsl #31
   11918:	andeq	sl, r2, ip, lsl #31
   1191c:	andeq	r0, r0, r0
   11920:	ldr	r0, [pc, #36]	; 1194c <sprintf@plt+0xc4>
   11924:	ldr	r1, [pc, #36]	; 11950 <sprintf@plt+0xc8>
   11928:	sub	r1, r1, r0
   1192c:	asr	r1, r1, #2
   11930:	add	r1, r1, r1, lsr #31
   11934:	asrs	r1, r1, #1
   11938:	bxeq	lr
   1193c:	ldr	r3, [pc, #16]	; 11954 <sprintf@plt+0xcc>
   11940:	cmp	r3, #0
   11944:	bxeq	lr
   11948:	bx	r3
   1194c:	andeq	sl, r2, ip, lsl #31
   11950:	andeq	sl, r2, ip, lsl #31
   11954:	andeq	r0, r0, r0
   11958:	push	{r4, lr}
   1195c:	ldr	r4, [pc, #24]	; 1197c <sprintf@plt+0xf4>
   11960:	ldrb	r3, [r4]
   11964:	cmp	r3, #0
   11968:	popne	{r4, pc}
   1196c:	bl	118f4 <sprintf@plt+0x6c>
   11970:	mov	r3, #1
   11974:	strb	r3, [r4]
   11978:	pop	{r4, pc}
   1197c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   11980:	b	11920 <sprintf@plt+0x98>
   11984:	push	{r4, r5, fp, lr}
   11988:	add	fp, sp, #8
   1198c:	mov	r4, r0
   11990:	cmp	r0, #1
   11994:	bgt	119b0 <sprintf@plt+0x128>
   11998:	ldr	r1, [pc, #140]	; 11a2c <sprintf@plt+0x1a4>
   1199c:	mov	r0, #67	; 0x43
   119a0:	mov	r2, r4
   119a4:	add	r1, pc, r1
   119a8:	pop	{r4, r5, fp, lr}
   119ac:	b	124f8 <sprintf@plt+0xc70>
   119b0:	mov	r5, r1
   119b4:	ldr	r1, [r1, #4]
   119b8:	ldr	r0, [pc, #104]	; 11a28 <sprintf@plt+0x1a0>
   119bc:	ldr	r0, [pc, r0]
   119c0:	ldr	r0, [r0]
   119c4:	bl	11744 <rb_dictionary_retrieve@plt>
   119c8:	cmp	r0, #0
   119cc:	beq	119f8 <sprintf@plt+0x170>
   119d0:	ldr	r2, [r0, #4]
   119d4:	sub	r1, r4, #2
   119d8:	cmp	r1, r2
   119dc:	bge	11a10 <sprintf@plt+0x188>
   119e0:	ldr	r1, [pc, #76]	; 11a34 <sprintf@plt+0x1ac>
   119e4:	mov	r0, #67	; 0x43
   119e8:	mov	r3, r4
   119ec:	add	r1, pc, r1
   119f0:	pop	{r4, r5, fp, lr}
   119f4:	b	124f8 <sprintf@plt+0xc70>
   119f8:	ldr	r2, [r5, #4]
   119fc:	ldr	r1, [pc, #44]	; 11a30 <sprintf@plt+0x1a8>
   11a00:	mov	r0, #67	; 0x43
   11a04:	add	r1, pc, r1
   11a08:	pop	{r4, r5, fp, lr}
   11a0c:	b	124f8 <sprintf@plt+0xc70>
   11a10:	ldr	r3, [r5, #4]
   11a14:	ldr	ip, [r0, #8]
   11a18:	add	r2, r5, #8
   11a1c:	mov	r0, r3
   11a20:	pop	{r4, r5, fp, lr}
   11a24:	bx	ip
   11a28:	andeq	r8, r1, r0, asr #15
   11a2c:	andeq	r7, r0, r7, lsr r5
   11a30:	andeq	r7, r0, r5, lsr #10
   11a34:	andeq	r7, r0, sl, ror #10
   11a38:	push	{r4, r5, fp, lr}
   11a3c:	add	fp, sp, #8
   11a40:	cmp	r0, #2
   11a44:	bgt	11a7c <sprintf@plt+0x1f4>
   11a48:	ldr	r5, [pc, #84]	; 11aa4 <sprintf@plt+0x21c>
   11a4c:	mov	r4, #0
   11a50:	ldr	r5, [pc, r5]
   11a54:	b	11a64 <sprintf@plt+0x1dc>
   11a58:	add	r4, r4, #1
   11a5c:	cmp	r4, #256	; 0x100
   11a60:	beq	11aa0 <sprintf@plt+0x218>
   11a64:	ldr	r1, [r5, r4, lsl #2]
   11a68:	cmp	r1, #0
   11a6c:	beq	11a58 <sprintf@plt+0x1d0>
   11a70:	mov	r0, #0
   11a74:	blx	r1
   11a78:	b	11a58 <sprintf@plt+0x1d0>
   11a7c:	ldr	r0, [r1, #4]
   11a80:	ldrb	r0, [r0]
   11a84:	ldr	r1, [pc, #28]	; 11aa8 <sprintf@plt+0x220>
   11a88:	ldr	r1, [pc, r1]
   11a8c:	ldr	r1, [r1, r0, lsl #2]
   11a90:	cmp	r1, #0
   11a94:	popeq	{r4, r5, fp, pc}
   11a98:	pop	{r4, r5, fp, lr}
   11a9c:	bx	r1
   11aa0:	pop	{r4, r5, fp, pc}
   11aa4:	andeq	r8, r1, r8, lsr r7
   11aa8:	andeq	r8, r1, r0, lsl #14
   11aac:	push	{r4, sl, fp, lr}
   11ab0:	add	fp, sp, #8
   11ab4:	cmp	r0, #2
   11ab8:	bgt	11acc <sprintf@plt+0x244>
   11abc:	ldr	r1, [pc, #96]	; 11b24 <sprintf@plt+0x29c>
   11ac0:	mov	r2, r0
   11ac4:	add	r1, pc, r1
   11ac8:	b	11af4 <sprintf@plt+0x26c>
   11acc:	ldr	r0, [r1, #4]
   11ad0:	mov	r4, r1
   11ad4:	mov	r1, #0
   11ad8:	mov	r2, #16
   11adc:	bl	11624 <strtoull@plt>
   11ae0:	cmp	r1, #0
   11ae4:	beq	11b00 <sprintf@plt+0x278>
   11ae8:	ldr	r2, [r4, #4]
   11aec:	ldr	r1, [pc, #52]	; 11b28 <sprintf@plt+0x2a0>
   11af0:	add	r1, pc, r1
   11af4:	mov	r0, #67	; 0x43
   11af8:	pop	{r4, sl, fp, lr}
   11afc:	b	124f8 <sprintf@plt+0xc70>
   11b00:	ldr	r1, [r4, #8]
   11b04:	ldrb	r1, [r1]
   11b08:	ldr	r2, [pc, #28]	; 11b2c <sprintf@plt+0x2a4>
   11b0c:	ldr	r2, [pc, r2]
   11b10:	ldr	r2, [r2, r1, lsl #2]
   11b14:	cmp	r2, #0
   11b18:	popeq	{r4, sl, fp, pc}
   11b1c:	pop	{r4, sl, fp, lr}
   11b20:	bx	r2
   11b24:	muleq	r0, sl, r3
   11b28:			; <UNDEFINED> instruction: 0x000073b9
   11b2c:	andeq	r8, r1, r8, lsl #13
   11b30:	push	{fp, lr}
   11b34:	mov	fp, sp
   11b38:	sub	sp, sp, #16
   11b3c:	bl	11c18 <sprintf@plt+0x390>
   11b40:	mov	r0, #256	; 0x100
   11b44:	mov	r1, #0
   11b48:	mov	r2, #0
   11b4c:	mov	r3, #0
   11b50:	str	r1, [sp]
   11b54:	str	r0, [sp, #4]
   11b58:	str	r0, [sp, #8]
   11b5c:	str	r0, [sp, #12]
   11b60:	ldr	r0, [pc, #144]	; 11bf8 <sprintf@plt+0x370>
   11b64:	ldr	r1, [pc, #144]	; 11bfc <sprintf@plt+0x374>
   11b68:	add	r0, pc, r0
   11b6c:	add	r1, pc, r1
   11b70:	bl	115ac <rb_helper_child@plt>
   11b74:	ldr	r4, [pc, #132]	; 11c00 <sprintf@plt+0x378>
   11b78:	cmp	r0, #0
   11b7c:	ldr	r4, [pc, r4]
   11b80:	str	r0, [r4]
   11b84:	bne	11bb0 <sprintf@plt+0x328>
   11b88:	ldr	r0, [pc, #116]	; 11c04 <sprintf@plt+0x37c>
   11b8c:	mov	r1, #46	; 0x2e
   11b90:	mov	r2, #1
   11b94:	ldr	r0, [pc, r0]
   11b98:	ldr	r3, [r0]
   11b9c:	ldr	r0, [pc, #100]	; 11c08 <sprintf@plt+0x380>
   11ba0:	add	r0, pc, r0
   11ba4:	bl	1172c <fwrite@plt>
   11ba8:	mov	r0, #1
   11bac:	bl	11870 <exit@plt>
   11bb0:	bl	11774 <rb_set_time@plt>
   11bb4:	bl	11c18 <sprintf@plt+0x390>
   11bb8:	ldr	r1, [pc, #76]	; 11c0c <sprintf@plt+0x384>
   11bbc:	ldr	r1, [pc, r1]
   11bc0:	ldr	r0, [pc, #72]	; 11c10 <sprintf@plt+0x388>
   11bc4:	add	r0, pc, r0
   11bc8:	bl	117bc <rb_dictionary_create@plt>
   11bcc:	ldr	r1, [pc, #64]	; 11c14 <sprintf@plt+0x38c>
   11bd0:	ldr	r1, [pc, r1]
   11bd4:	str	r0, [r1]
   11bd8:	bl	136a4 <sprintf@plt+0x1e1c>
   11bdc:	bl	12674 <sprintf@plt+0xdec>
   11be0:	mov	r0, #0
   11be4:	mov	r1, #1
   11be8:	bl	11738 <rb_init_prng@plt>
   11bec:	ldr	r0, [r4]
   11bf0:	mov	r1, #0
   11bf4:	bl	114bc <rb_helper_loop@plt>
   11bf8:	andeq	r0, r0, ip, asr r1
   11bfc:	andeq	r0, r0, r4, lsl #4
   11c00:	andeq	r8, r1, r4, lsl r6
   11c04:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11c08:	andeq	r7, r0, r8, ror r2
   11c0c:			; <UNDEFINED> instruction: 0x000185bc
   11c10:	andeq	r7, r0, r3, lsl #5
   11c14:	andeq	r8, r1, ip, lsr #11
   11c18:	push	{r4, r5, fp, lr}
   11c1c:	add	fp, sp, #8
   11c20:	sub	sp, sp, #144	; 0x90
   11c24:	mov	r0, #1
   11c28:	add	r4, sp, #4
   11c2c:	str	r0, [sp, #4]
   11c30:	mov	r0, #0
   11c34:	add	r5, r4, #4
   11c38:	str	r0, [sp, #136]	; 0x88
   11c3c:	mov	r0, r5
   11c40:	bl	114a4 <sigemptyset@plt>
   11c44:	mov	r0, r5
   11c48:	mov	r1, #13
   11c4c:	bl	116f0 <sigaddset@plt>
   11c50:	mov	r0, r5
   11c54:	mov	r1, #14
   11c58:	bl	116f0 <sigaddset@plt>
   11c5c:	mov	r0, r5
   11c60:	mov	r1, #5
   11c64:	bl	116f0 <sigaddset@plt>
   11c68:	mov	r0, r5
   11c6c:	mov	r1, #28
   11c70:	bl	116f0 <sigaddset@plt>
   11c74:	mov	r0, #28
   11c78:	mov	r1, r4
   11c7c:	mov	r2, #0
   11c80:	bl	1178c <sigaction@plt>
   11c84:	mov	r0, #13
   11c88:	mov	r1, r4
   11c8c:	mov	r2, #0
   11c90:	bl	1178c <sigaction@plt>
   11c94:	mov	r0, #5
   11c98:	mov	r1, r4
   11c9c:	mov	r2, #0
   11ca0:	bl	1178c <sigaction@plt>
   11ca4:	ldr	r0, [pc, #28]	; 11cc8 <sprintf@plt+0x440>
   11ca8:	mov	r1, r4
   11cac:	mov	r2, #0
   11cb0:	add	r0, pc, r0
   11cb4:	str	r0, [sp, #4]
   11cb8:	mov	r0, #14
   11cbc:	bl	1178c <sigaction@plt>
   11cc0:	sub	sp, fp, #8
   11cc4:	pop	{r4, r5, fp, pc}
   11cc8:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11ccc:	push	{r4, r5, r6, r7, fp, lr}
   11cd0:	add	fp, sp, #16
   11cd4:	ldr	r1, [pc, #136]	; 11d64 <sprintf@plt+0x4dc>
   11cd8:	mov	r2, #16384	; 0x4000
   11cdc:	mov	r4, r0
   11ce0:	add	r1, pc, r1
   11ce4:	bl	11798 <rb_helper_read@plt>
   11ce8:	cmp	r0, #1
   11cec:	blt	11d60 <sprintf@plt+0x4d8>
   11cf0:	ldr	r5, [pc, #112]	; 11d68 <sprintf@plt+0x4e0>
   11cf4:	ldr	r6, [pc, #112]	; 11d6c <sprintf@plt+0x4e4>
   11cf8:	ldr	r7, [pc, #112]	; 11d70 <sprintf@plt+0x4e8>
   11cfc:	ldr	r7, [pc, r7]
   11d00:	add	r5, pc, r5
   11d04:	add	r6, pc, r6
   11d08:	b	11d24 <sprintf@plt+0x49c>
   11d0c:	mov	r0, r4
   11d10:	mov	r1, r5
   11d14:	mov	r2, #16384	; 0x4000
   11d18:	bl	11798 <rb_helper_read@plt>
   11d1c:	cmp	r0, #0
   11d20:	ble	11d60 <sprintf@plt+0x4d8>
   11d24:	mov	r0, r5
   11d28:	mov	r1, r6
   11d2c:	mov	r2, #10
   11d30:	bl	11648 <rb_string_to_array@plt>
   11d34:	cmp	r0, #1
   11d38:	blt	11d0c <sprintf@plt+0x484>
   11d3c:	ldr	r1, [pc, #48]	; 11d74 <sprintf@plt+0x4ec>
   11d40:	ldr	r1, [pc, r1]
   11d44:	ldrb	r1, [r1]
   11d48:	ldr	r2, [r7, r1, lsl #2]
   11d4c:	cmp	r2, #0
   11d50:	beq	11d0c <sprintf@plt+0x484>
   11d54:	mov	r1, r6
   11d58:	blx	r2
   11d5c:	b	11d0c <sprintf@plt+0x484>
   11d60:	pop	{r4, r5, r6, r7, fp, pc}
   11d64:	ldrdeq	r9, [r1], -ip
   11d68:			; <UNDEFINED> instruction: 0x000192bc
   11d6c:	andeq	r9, r1, ip, lsl #5
   11d70:	andeq	r8, r1, r0, ror #8
   11d74:	andeq	r9, r1, r0, asr r2
   11d78:	push	{fp, lr}
   11d7c:	mov	fp, sp
   11d80:	mov	r0, #1
   11d84:	bl	11870 <exit@plt>
   11d88:	bx	lr
   11d8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11d90:	add	fp, sp, #24
   11d94:	mov	r6, r1
   11d98:	mov	r8, r0
   11d9c:	mov	r0, #1
   11da0:	mov	r1, #160	; 0xa0
   11da4:	mov	r9, r3
   11da8:	mov	r7, r2
   11dac:	mov	r5, #1
   11db0:	bl	115a0 <calloc@plt>
   11db4:	cmp	r0, #0
   11db8:	beq	11e44 <sprintf@plt+0x5bc>
   11dbc:	mov	r4, r0
   11dc0:	cmp	r6, #2
   11dc4:	beq	11ddc <sprintf@plt+0x554>
   11dc8:	cmp	r6, #10
   11dcc:	bne	11e30 <sprintf@plt+0x5a8>
   11dd0:	mov	r5, #28
   11dd4:	mov	r0, #54	; 0x36
   11dd8:	b	11de0 <sprintf@plt+0x558>
   11ddc:	mov	r0, #52	; 0x34
   11de0:	str	r0, [r4, #8]
   11de4:	ldr	r0, [pc, #92]	; 11e48 <sprintf@plt+0x5c0>
   11de8:	ldr	r0, [pc, r0]
   11dec:	ldrd	r2, [r0]
   11df0:	adds	r6, r2, #1
   11df4:	adc	r1, r3, #0
   11df8:	str	r6, [r0]
   11dfc:	str	r1, [r0, #4]
   11e00:	add	r0, r4, #144	; 0x90
   11e04:	mov	r1, r4
   11e08:	stm	r0, {r2, r3, r7, r9}
   11e0c:	mov	r2, r5
   11e10:	ldr	r0, [pc, #52]	; 11e4c <sprintf@plt+0x5c4>
   11e14:	add	r0, pc, r0
   11e18:	str	r0, [r4, #4]
   11e1c:	mov	r0, r8
   11e20:	str	r4, [r4]
   11e24:	bl	13894 <sprintf@plt+0x200c>
   11e28:	mov	r0, r4
   11e2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11e30:	mov	r0, r4
   11e34:	bl	1163c <free@plt>
   11e38:	mov	r4, #0
   11e3c:	mov	r0, r4
   11e40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11e44:	bl	11750 <rb_outofmemory@plt>
   11e48:			; <UNDEFINED> instruction: 0x000183b0
   11e4c:	andeq	r0, r0, r4, lsr r0
   11e50:	push	{r4, r5, fp, lr}
   11e54:	add	fp, sp, #8
   11e58:	sub	sp, sp, #56	; 0x38
   11e5c:	vmov.i32	q8, #0	; 0x00000000
   11e60:	mov	r4, r0
   11e64:	mov	r0, sp
   11e68:	add	r2, r0, #33	; 0x21
   11e6c:	cmp	r4, #0
   11e70:	vst1.8	{d16-d17}, [r2]
   11e74:	add	r2, r0, #17
   11e78:	orr	r0, r0, #1
   11e7c:	vst1.8	{d16-d17}, [r0]
   11e80:	mov	r0, #0
   11e84:	vst1.8	{d16-d17}, [r2]
   11e88:	str	r0, [sp, #49]	; 0x31
   11e8c:	mov	r0, #42	; 0x2a
   11e90:	strb	r0, [sp]
   11e94:	beq	11f5c <sprintf@plt+0x6d4>
   11e98:	cmp	r1, #0
   11e9c:	beq	11f24 <sprintf@plt+0x69c>
   11ea0:	ldr	r2, [r4, #8]
   11ea4:	cmp	r2, #54	; 0x36
   11ea8:	beq	11ed8 <sprintf@plt+0x650>
   11eac:	cmp	r2, #52	; 0x34
   11eb0:	bne	11f74 <sprintf@plt+0x6ec>
   11eb4:	ldrh	r0, [r1, #4]!
   11eb8:	cmp	r0, #2
   11ebc:	bne	11f24 <sprintf@plt+0x69c>
   11ec0:	mov	r2, sp
   11ec4:	mov	r0, r1
   11ec8:	mov	r1, r2
   11ecc:	mov	r2, #53	; 0x35
   11ed0:	bl	117a4 <rb_inet_ntop_sock@plt>
   11ed4:	b	11f24 <sprintf@plt+0x69c>
   11ed8:	ldrh	r0, [r1, #4]!
   11edc:	cmp	r0, #10
   11ee0:	bne	11f24 <sprintf@plt+0x69c>
   11ee4:	mov	r5, sp
   11ee8:	mov	r0, r1
   11eec:	mov	r2, #53	; 0x35
   11ef0:	mov	r1, r5
   11ef4:	bl	117a4 <rb_inet_ntop_sock@plt>
   11ef8:	ldrb	r0, [sp]
   11efc:	cmp	r0, #58	; 0x3a
   11f00:	bne	11f24 <sprintf@plt+0x69c>
   11f04:	mov	r0, r5
   11f08:	bl	11690 <strlen@plt>
   11f0c:	mov	r2, r0
   11f10:	orr	r0, r5, #1
   11f14:	mov	r1, r5
   11f18:	bl	117c8 <memmove@plt>
   11f1c:	mov	r0, #48	; 0x30
   11f20:	strb	r0, [sp]
   11f24:	ldr	r5, [r4, #152]	; 0x98
   11f28:	cmp	r5, #0
   11f2c:	beq	11f4c <sprintf@plt+0x6c4>
   11f30:	ldrb	r0, [sp]
   11f34:	ldr	r2, [r4, #8]
   11f38:	ldr	r3, [r4, #156]	; 0x9c
   11f3c:	subs	r1, r0, #42	; 0x2a
   11f40:	mov	r0, sp
   11f44:	movwne	r1, #1
   11f48:	blx	r5
   11f4c:	mov	r0, r4
   11f50:	bl	1163c <free@plt>
   11f54:	sub	sp, fp, #8
   11f58:	pop	{r4, r5, fp, pc}
   11f5c:	ldr	r1, [pc, #40]	; 11f8c <sprintf@plt+0x704>
   11f60:	mov	r0, #67	; 0x43
   11f64:	add	r1, pc, r1
   11f68:	bl	124f8 <sprintf@plt+0xc70>
   11f6c:	mov	r0, #2
   11f70:	bl	11870 <exit@plt>
   11f74:	ldr	r1, [pc, #20]	; 11f90 <sprintf@plt+0x708>
   11f78:	mov	r0, #67	; 0x43
   11f7c:	add	r1, pc, r1
   11f80:	bl	124f8 <sprintf@plt+0xc70>
   11f84:	mov	r0, #2
   11f88:	bl	11870 <exit@plt>
   11f8c:	andeq	r7, r0, r1, asr #1
   11f90:	ldrdeq	r7, [r0], -r5
   11f94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11f98:	add	fp, sp, #24
   11f9c:	mov	r6, r1
   11fa0:	mov	r5, r0
   11fa4:	mov	r0, #1
   11fa8:	mov	r1, #160	; 0xa0
   11fac:	mov	r8, r2
   11fb0:	bl	115a0 <calloc@plt>
   11fb4:	cmp	r0, #0
   11fb8:	beq	12054 <sprintf@plt+0x7cc>
   11fbc:	add	r7, r0, #12
   11fc0:	mov	r4, r0
   11fc4:	mov	r0, r5
   11fc8:	mov	r1, r7
   11fcc:	bl	11684 <rb_inet_pton_sock@plt>
   11fd0:	cmp	r0, #0
   11fd4:	beq	11ff4 <sprintf@plt+0x76c>
   11fd8:	ldrh	r0, [r7]
   11fdc:	cmp	r0, #2
   11fe0:	beq	12008 <sprintf@plt+0x780>
   11fe4:	cmp	r0, #10
   11fe8:	bne	11ff4 <sprintf@plt+0x76c>
   11fec:	mov	r0, #83	; 0x53
   11ff0:	b	1200c <sprintf@plt+0x784>
   11ff4:	mov	r0, r4
   11ff8:	bl	1163c <free@plt>
   11ffc:	mov	r4, #0
   12000:	mov	r0, r4
   12004:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12008:	mov	r0, #82	; 0x52
   1200c:	str	r0, [r4, #8]
   12010:	ldr	r0, [pc, #64]	; 12058 <sprintf@plt+0x7d0>
   12014:	ldr	r0, [pc, r0]
   12018:	ldrd	r2, [r0]
   1201c:	adds	r1, r2, #1
   12020:	adc	r5, r3, #0
   12024:	stm	r0, {r1, r5}
   12028:	add	r0, r4, #144	; 0x90
   1202c:	mov	r1, r4
   12030:	stm	r0, {r2, r3, r6, r8}
   12034:	ldr	r0, [pc, #32]	; 1205c <sprintf@plt+0x7d4>
   12038:	add	r0, pc, r0
   1203c:	str	r0, [r4, #4]
   12040:	mov	r0, r7
   12044:	str	r4, [r4]
   12048:	bl	13984 <sprintf@plt+0x20fc>
   1204c:	mov	r0, r4
   12050:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12054:	bl	11750 <rb_outofmemory@plt>
   12058:	andeq	r8, r1, r4, lsl #3
   1205c:	andeq	r0, r0, r0, lsr #32
   12060:	push	{r4, r5, r6, sl, fp, lr}
   12064:	add	fp, sp, #16
   12068:	cmp	r0, #0
   1206c:	beq	120fc <sprintf@plt+0x874>
   12070:	mov	r6, r1
   12074:	mov	r4, r0
   12078:	mov	r5, #0
   1207c:	cmp	r1, #0
   12080:	beq	120c8 <sprintf@plt+0x840>
   12084:	ldr	r2, [r4, #8]
   12088:	cmp	r2, #83	; 0x53
   1208c:	beq	120ac <sprintf@plt+0x824>
   12090:	cmp	r2, #82	; 0x52
   12094:	bne	12114 <sprintf@plt+0x88c>
   12098:	ldr	r0, [r6, #8]
   1209c:	ldr	r1, [r4, #16]
   120a0:	cmp	r1, r0
   120a4:	ldreq	r5, [r6]
   120a8:	b	120c8 <sprintf@plt+0x840>
   120ac:	add	r0, r4, #20
   120b0:	add	r1, r6, #12
   120b4:	mov	r2, #16
   120b8:	bl	116cc <bcmp@plt>
   120bc:	cmp	r0, #0
   120c0:	bne	120c8 <sprintf@plt+0x840>
   120c4:	ldr	r5, [r6]
   120c8:	ldr	r6, [r4, #152]	; 0x98
   120cc:	cmp	r6, #0
   120d0:	beq	120f0 <sprintf@plt+0x868>
   120d4:	ldr	r2, [r4, #8]
   120d8:	ldr	r3, [r4, #156]	; 0x9c
   120dc:	cmp	r5, #0
   120e0:	mov	r1, r5
   120e4:	mov	r0, r5
   120e8:	movwne	r1, #1
   120ec:	blx	r6
   120f0:	mov	r0, r4
   120f4:	pop	{r4, r5, r6, sl, fp, lr}
   120f8:	b	1163c <free@plt>
   120fc:	ldr	r1, [pc, #40]	; 1212c <sprintf@plt+0x8a4>
   12100:	mov	r0, #67	; 0x43
   12104:	add	r1, pc, r1
   12108:	bl	124f8 <sprintf@plt+0xc70>
   1210c:	mov	r0, #2
   12110:	bl	11870 <exit@plt>
   12114:	ldr	r1, [pc, #20]	; 12130 <sprintf@plt+0x8a8>
   12118:	mov	r0, #67	; 0x43
   1211c:	add	r1, pc, r1
   12120:	bl	124f8 <sprintf@plt+0xc70>
   12124:	mov	r0, #2
   12128:	bl	11870 <exit@plt>
   1212c:	andeq	r6, r0, r0, lsl #31
   12130:	muleq	r0, sl, pc	; <UNPREDICTABLE>
   12134:	mov	r1, #0
   12138:	str	r1, [r0, #152]	; 0x98
   1213c:	str	r1, [r0, #156]	; 0x9c
   12140:	bx	lr
   12144:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   12148:	add	fp, sp, #24
   1214c:	ldr	r6, [r1, #4]
   12150:	mov	r5, r1
   12154:	mov	r0, r6
   12158:	bl	11690 <strlen@plt>
   1215c:	add	r0, r0, #1
   12160:	bl	11780 <malloc@plt>
   12164:	cmp	r0, #0
   12168:	beq	1225c <sprintf@plt+0x9d4>
   1216c:	mov	r1, r6
   12170:	mov	r4, r0
   12174:	bl	116fc <strcpy@plt>
   12178:	ldr	r0, [r5, #8]
   1217c:	ldr	r5, [r5, #12]
   12180:	ldrb	r2, [r0]
   12184:	sub	r0, r2, #82	; 0x52
   12188:	cmp	r0, #2
   1218c:	bcc	12228 <sprintf@plt+0x9a0>
   12190:	mov	r6, #0
   12194:	cmp	r2, #52	; 0x34
   12198:	beq	121a8 <sprintf@plt+0x920>
   1219c:	cmp	r2, #54	; 0x36
   121a0:	bne	12260 <sprintf@plt+0x9d8>
   121a4:	mov	r6, #8
   121a8:	mov	r0, #1
   121ac:	mov	r1, #160	; 0xa0
   121b0:	bl	115a0 <calloc@plt>
   121b4:	cmp	r0, #0
   121b8:	beq	1225c <sprintf@plt+0x9d4>
   121bc:	cmp	r6, #0
   121c0:	mov	r1, r0
   121c4:	mov	r0, #54	; 0x36
   121c8:	movweq	r0, #52	; 0x34
   121cc:	str	r0, [r1, #8]
   121d0:	ldr	r0, [pc, #160]	; 12278 <sprintf@plt+0x9f0>
   121d4:	ldr	r0, [pc, r0]
   121d8:	ldrd	r2, [r0]
   121dc:	adds	r8, r2, #1
   121e0:	adc	r9, r3, #0
   121e4:	cmp	r6, #0
   121e8:	strd	r8, [r0]
   121ec:	ldr	r0, [pc, #136]	; 1227c <sprintf@plt+0x9f4>
   121f0:	str	r2, [r1, #144]	; 0x90
   121f4:	str	r3, [r1, #148]	; 0x94
   121f8:	mov	r2, #28
   121fc:	movweq	r2, #1
   12200:	add	r0, pc, r0
   12204:	str	r0, [r1, #152]	; 0x98
   12208:	str	r4, [r1, #156]	; 0x9c
   1220c:	ldr	r0, [pc, #108]	; 12280 <sprintf@plt+0x9f8>
   12210:	add	r0, pc, r0
   12214:	str	r0, [r1, #4]
   12218:	str	r1, [r1]
   1221c:	mov	r0, r5
   12220:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   12224:	b	13894 <sprintf@plt+0x200c>
   12228:	ldr	r1, [pc, #84]	; 12284 <sprintf@plt+0x9fc>
   1222c:	mov	r0, r5
   12230:	mov	r2, r4
   12234:	add	r1, pc, r1
   12238:	bl	11f94 <sprintf@plt+0x70c>
   1223c:	cmp	r0, #0
   12240:	popne	{r4, r5, r6, r8, r9, sl, fp, pc}
   12244:	ldr	r1, [pc, #60]	; 12288 <sprintf@plt+0xa00>
   12248:	mov	r0, #67	; 0x43
   1224c:	add	r1, pc, r1
   12250:	bl	124f8 <sprintf@plt+0xc70>
   12254:	mov	r0, #2
   12258:	bl	11870 <exit@plt>
   1225c:	bl	11750 <rb_outofmemory@plt>
   12260:	ldr	r1, [pc, #36]	; 1228c <sprintf@plt+0xa04>
   12264:	mov	r0, #67	; 0x43
   12268:	add	r1, pc, r1
   1226c:	bl	124f8 <sprintf@plt+0xc70>
   12270:	mov	r0, #2
   12274:	bl	11870 <exit@plt>
   12278:	andeq	r7, r1, r4, asr #31
   1227c:	andeq	r0, r0, r8, lsl #1
   12280:			; <UNDEFINED> instruction: 0xfffffc38
   12284:	andeq	r0, r0, r4, asr r0
   12288:	andeq	r6, r0, r3, lsr #29
   1228c:	andeq	r6, r0, sp, lsr sp
   12290:	push	{r4, sl, fp, lr}
   12294:	add	fp, sp, #8
   12298:	sub	sp, sp, #8
   1229c:	cmp	r2, #0
   122a0:	movne	r4, r3
   122a4:	cmpne	r3, #0
   122a8:	bne	122c4 <sprintf@plt+0xa3c>
   122ac:	ldr	r1, [pc, #108]	; 12320 <sprintf@plt+0xa98>
   122b0:	mov	r0, #67	; 0x43
   122b4:	add	r1, pc, r1
   122b8:	bl	124f8 <sprintf@plt+0xc70>
   122bc:	mov	r0, #2
   122c0:	bl	11870 <exit@plt>
   122c4:	mov	r3, r2
   122c8:	ldr	r2, [pc, #68]	; 12314 <sprintf@plt+0xa8c>
   122cc:	cmp	r0, #0
   122d0:	cmpne	r1, #0
   122d4:	ldr	r2, [pc, r2]
   122d8:	ldr	r2, [r2]
   122dc:	bne	122ec <sprintf@plt+0xa64>
   122e0:	ldr	r1, [pc, #48]	; 12318 <sprintf@plt+0xa90>
   122e4:	add	r1, pc, r1
   122e8:	b	122f8 <sprintf@plt+0xa70>
   122ec:	str	r0, [sp]
   122f0:	ldr	r1, [pc, #36]	; 1231c <sprintf@plt+0xa94>
   122f4:	add	r1, pc, r1
   122f8:	mov	r0, r2
   122fc:	mov	r2, r4
   12300:	bl	117e0 <rb_helper_write@plt>
   12304:	mov	r0, r4
   12308:	sub	sp, fp, #8
   1230c:	pop	{r4, sl, fp, lr}
   12310:	b	1163c <free@plt>
   12314:			; <UNDEFINED> instruction: 0x00017ebc
   12318:	andeq	r6, r0, r6, lsr lr
   1231c:	andeq	r6, r0, r2, lsr lr
   12320:	andeq	r6, r0, fp, lsr lr
   12324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12328:	add	fp, sp, #28
   1232c:	sub	sp, sp, #612	; 0x264
   12330:	mov	r5, r0
   12334:	ldr	r0, [pc, #288]	; 1245c <sprintf@plt+0xbd4>
   12338:	mov	r4, r1
   1233c:	ldr	r0, [pc, r0]
   12340:	ldr	r0, [r0]
   12344:	cmp	r0, #0
   12348:	beq	12438 <sprintf@plt+0xbb0>
   1234c:	cmp	r0, #1
   12350:	blt	123f0 <sprintf@plt+0xb68>
   12354:	str	r5, [sp, #4]
   12358:	str	r4, [sp, #8]
   1235c:	mov	r9, #0
   12360:	add	r7, sp, #15
   12364:	add	r8, sp, #68	; 0x44
   12368:	mov	sl, #0
   1236c:	ldr	r6, [pc, #236]	; 12460 <sprintf@plt+0xbd8>
   12370:	ldr	r6, [pc, r6]
   12374:	ldr	r4, [pc, #232]	; 12464 <sprintf@plt+0xbdc>
   12378:	add	r4, pc, r4
   1237c:	mov	r0, r6
   12380:	mov	r1, r7
   12384:	mov	r2, #53	; 0x35
   12388:	bl	117a4 <rb_inet_ntop_sock@plt>
   1238c:	ldrb	r0, [sp, #15]
   12390:	cmp	r0, #0
   12394:	beq	12410 <sprintf@plt+0xb88>
   12398:	mov	r0, r7
   1239c:	bl	11690 <strlen@plt>
   123a0:	mov	r5, r0
   123a4:	add	r0, r8, r9
   123a8:	rsb	r1, r9, #540	; 0x21c
   123ac:	mov	r2, r4
   123b0:	mov	r3, r7
   123b4:	bl	11810 <snprintf@plt>
   123b8:	ldr	r1, [pc, #184]	; 12478 <sprintf@plt+0xbf0>
   123bc:	add	r0, r9, r5
   123c0:	add	sl, sl, #1
   123c4:	add	r6, r6, #128	; 0x80
   123c8:	add	r9, r0, #1
   123cc:	ldr	r1, [pc, r1]
   123d0:	ldr	r1, [r1]
   123d4:	cmp	sl, r1
   123d8:	blt	1237c <sprintf@plt+0xaf4>
   123dc:	ldr	r4, [sp, #8]
   123e0:	ldr	r5, [sp, #4]
   123e4:	cmp	r9, #0
   123e8:	movne	r1, #0
   123ec:	strbne	r1, [r8, r0]
   123f0:	ldr	r2, [pc, #132]	; 1247c <sprintf@plt+0xbf4>
   123f4:	add	r3, sp, #68	; 0x44
   123f8:	mov	r0, r5
   123fc:	mov	r1, r4
   12400:	add	r2, pc, r2
   12404:	bl	1256c <sprintf@plt+0xce4>
   12408:	sub	sp, fp, #28
   1240c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12410:	ldr	r1, [pc, #80]	; 12468 <sprintf@plt+0xbe0>
   12414:	mov	r0, #67	; 0x43
   12418:	add	r1, pc, r1
   1241c:	bl	124f8 <sprintf@plt+0xc70>
   12420:	ldr	r2, [pc, #68]	; 1246c <sprintf@plt+0xbe4>
   12424:	ldmib	sp, {r0, r1}
   12428:	add	r2, pc, r2
   1242c:	bl	125dc <sprintf@plt+0xd54>
   12430:	mov	r0, #2
   12434:	bl	11870 <exit@plt>
   12438:	ldr	r1, [pc, #48]	; 12470 <sprintf@plt+0xbe8>
   1243c:	mov	r0, #67	; 0x43
   12440:	add	r1, pc, r1
   12444:	bl	124f8 <sprintf@plt+0xc70>
   12448:	ldr	r2, [pc, #36]	; 12474 <sprintf@plt+0xbec>
   1244c:	mov	r0, r5
   12450:	mov	r1, r4
   12454:	add	r2, pc, r2
   12458:	b	1242c <sprintf@plt+0xba4>
   1245c:	andeq	r7, r1, ip, lsr #28
   12460:	andeq	r7, r1, r4, lsl #28
   12464:	andeq	r6, r0, r9, lsr #25
   12468:	andeq	r6, r0, r2, ror #23
   1246c:	andeq	r6, r0, r7, ror #23
   12470:	muleq	r0, r6, fp
   12474:	muleq	r0, r8, fp
   12478:	muleq	r1, ip, sp
   1247c:	andeq	r7, r0, r1, lsl #20
   12480:	b	13788 <sprintf@plt+0x1f00>
   12484:	sub	sp, sp, #8
   12488:	push	{r4, r5, r6, r7, fp, lr}
   1248c:	add	fp, sp, #16
   12490:	sub	sp, sp, #520	; 0x208
   12494:	mov	ip, r1
   12498:	add	r5, sp, #8
   1249c:	mov	r4, r0
   124a0:	str	r2, [fp, #8]
   124a4:	str	r3, [fp, #12]
   124a8:	add	r3, fp, #8
   124ac:	mov	r1, #512	; 0x200
   124b0:	mov	r0, r5
   124b4:	mov	r2, ip
   124b8:	str	r3, [sp, #4]
   124bc:	bl	1154c <vsnprintf@plt>
   124c0:	ldr	r0, [pc, #40]	; 124f0 <sprintf@plt+0xc68>
   124c4:	mov	r2, r4
   124c8:	mov	r3, r5
   124cc:	ldr	r0, [pc, r0]
   124d0:	ldr	r0, [r0]
   124d4:	ldr	r1, [pc, #24]	; 124f4 <sprintf@plt+0xc6c>
   124d8:	add	r1, pc, r1
   124dc:	bl	117e0 <rb_helper_write@plt>
   124e0:	sub	sp, fp, #16
   124e4:	pop	{r4, r5, r6, r7, fp, lr}
   124e8:	add	sp, sp, #8
   124ec:	bx	lr
   124f0:	andeq	r7, r1, r4, asr #25
   124f4:	andeq	r6, r0, fp, asr ip
   124f8:	sub	sp, sp, #8
   124fc:	push	{r4, r5, r6, r7, fp, lr}
   12500:	add	fp, sp, #16
   12504:	sub	sp, sp, #520	; 0x208
   12508:	mov	ip, r1
   1250c:	add	r5, sp, #8
   12510:	mov	r4, r0
   12514:	str	r2, [fp, #8]
   12518:	str	r3, [fp, #12]
   1251c:	add	r3, fp, #8
   12520:	mov	r1, #512	; 0x200
   12524:	mov	r0, r5
   12528:	mov	r2, ip
   1252c:	str	r3, [sp, #4]
   12530:	bl	1154c <vsnprintf@plt>
   12534:	ldr	r0, [pc, #40]	; 12564 <sprintf@plt+0xcdc>
   12538:	mov	r2, r4
   1253c:	mov	r3, r5
   12540:	ldr	r0, [pc, r0]
   12544:	ldr	r0, [r0]
   12548:	ldr	r1, [pc, #24]	; 12568 <sprintf@plt+0xce0>
   1254c:	add	r1, pc, r1
   12550:	bl	117e0 <rb_helper_write@plt>
   12554:	sub	sp, fp, #16
   12558:	pop	{r4, r5, r6, r7, fp, lr}
   1255c:	add	sp, sp, #8
   12560:	bx	lr
   12564:	andeq	r7, r1, r0, asr ip
   12568:	strdeq	r6, [r0], -r0
   1256c:	sub	sp, sp, #4
   12570:	push	{r4, r5, r6, sl, fp, lr}
   12574:	add	fp, sp, #16
   12578:	sub	sp, sp, #524	; 0x20c
   1257c:	add	r6, sp, #12
   12580:	mov	r4, r1
   12584:	mov	r5, r0
   12588:	str	r3, [fp, #8]
   1258c:	add	r3, fp, #8
   12590:	mov	r1, #512	; 0x200
   12594:	mov	r0, r6
   12598:	str	r3, [sp, #8]
   1259c:	bl	1154c <vsnprintf@plt>
   125a0:	ldr	r0, [pc, #44]	; 125d4 <sprintf@plt+0xd4c>
   125a4:	mov	r2, r5
   125a8:	mov	r3, r4
   125ac:	ldr	r0, [pc, r0]
   125b0:	str	r6, [sp]
   125b4:	ldr	r0, [r0]
   125b8:	ldr	r1, [pc, #24]	; 125d8 <sprintf@plt+0xd50>
   125bc:	add	r1, pc, r1
   125c0:	bl	117e0 <rb_helper_write@plt>
   125c4:	sub	sp, fp, #16
   125c8:	pop	{r4, r5, r6, sl, fp, lr}
   125cc:	add	sp, sp, #4
   125d0:	bx	lr
   125d4:	andeq	r7, r1, r4, ror #23
   125d8:	andeq	r6, r0, r9, lsl #23
   125dc:	sub	sp, sp, #4
   125e0:	push	{r4, r5, r6, sl, fp, lr}
   125e4:	add	fp, sp, #16
   125e8:	sub	sp, sp, #524	; 0x20c
   125ec:	add	r6, sp, #12
   125f0:	mov	r4, r1
   125f4:	mov	r5, r0
   125f8:	str	r3, [fp, #8]
   125fc:	add	r3, fp, #8
   12600:	mov	r1, #512	; 0x200
   12604:	mov	r0, r6
   12608:	str	r3, [sp, #8]
   1260c:	bl	1154c <vsnprintf@plt>
   12610:	ldr	r0, [pc, #44]	; 12644 <sprintf@plt+0xdbc>
   12614:	mov	r2, r5
   12618:	mov	r3, r4
   1261c:	ldr	r0, [pc, r0]
   12620:	str	r6, [sp]
   12624:	ldr	r0, [r0]
   12628:	ldr	r1, [pc, #24]	; 12648 <sprintf@plt+0xdc0>
   1262c:	add	r1, pc, r1
   12630:	bl	117e0 <rb_helper_write@plt>
   12634:	sub	sp, fp, #16
   12638:	pop	{r4, r5, r6, sl, fp, lr}
   1263c:	add	sp, sp, #4
   12640:	bx	lr
   12644:	andeq	r7, r1, r4, ror fp
   12648:	andeq	r6, r0, r4, lsr #22
   1264c:	mov	r2, r0
   12650:	ldr	r0, [pc, #20]	; 1266c <sprintf@plt+0xde4>
   12654:	mov	r3, r1
   12658:	ldr	r0, [pc, r0]
   1265c:	ldr	r0, [r0]
   12660:	ldr	r1, [pc, #8]	; 12670 <sprintf@plt+0xde8>
   12664:	add	r1, pc, r1
   12668:	b	117e0 <rb_helper_write@plt>
   1266c:	andeq	r7, r1, r8, lsr fp
   12670:	strdeq	r6, [r0], -r7
   12674:	push	{fp, lr}
   12678:	mov	fp, sp
   1267c:	ldr	r0, [pc, #116]	; 126f8 <sprintf@plt+0xe70>
   12680:	ldr	r1, [pc, #116]	; 126fc <sprintf@plt+0xe74>
   12684:	add	r0, pc, r0
   12688:	add	r1, pc, r1
   1268c:	bl	117bc <rb_dictionary_create@plt>
   12690:	ldr	r1, [pc, #104]	; 12700 <sprintf@plt+0xe78>
   12694:	mov	r2, #0
   12698:	mov	r3, #1
   1269c:	ldr	r1, [pc, r1]
   126a0:	str	r0, [r1]
   126a4:	ldr	r0, [pc, #88]	; 12704 <sprintf@plt+0xe7c>
   126a8:	ldr	r1, [pc, #88]	; 12708 <sprintf@plt+0xe80>
   126ac:	add	r0, pc, r0
   126b0:	add	r1, pc, r1
   126b4:	bl	114d4 <rb_event_addish@plt>
   126b8:	ldr	r1, [pc, #76]	; 1270c <sprintf@plt+0xe84>
   126bc:	add	r1, pc, r1
   126c0:	str	r0, [r1]
   126c4:	ldr	r0, [pc, #68]	; 12710 <sprintf@plt+0xe88>
   126c8:	ldr	r0, [pc, r0]
   126cc:	bl	12858 <sprintf@plt+0xfd0>
   126d0:	ldr	r0, [pc, #60]	; 12714 <sprintf@plt+0xe8c>
   126d4:	ldr	r0, [pc, r0]
   126d8:	bl	12858 <sprintf@plt+0xfd0>
   126dc:	ldr	r0, [pc, #52]	; 12718 <sprintf@plt+0xe90>
   126e0:	ldr	r0, [pc, r0]
   126e4:	bl	12858 <sprintf@plt+0xfd0>
   126e8:	ldr	r0, [pc, #44]	; 1271c <sprintf@plt+0xe94>
   126ec:	ldr	r0, [pc, r0]
   126f0:	pop	{fp, lr}
   126f4:	b	12858 <sprintf@plt+0xfd0>
   126f8:	ldrdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   126fc:	muleq	r0, r0, r0
   12700:			; <UNDEFINED> instruction: 0x00017ab8
   12704:	andeq	r6, r0, ip, asr #21
   12708:	andeq	r0, r0, r0, ror r0
   1270c:	andeq	ip, r1, ip, lsl #18
   12710:			; <UNDEFINED> instruction: 0x00017abc
   12714:	andeq	r7, r1, ip, lsr #21
   12718:	andeq	r7, r1, r4, lsl #21
   1271c:	andeq	r7, r1, r4, ror sl
   12720:	sub	r0, r1, r0
   12724:	bx	lr
   12728:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1272c:	add	fp, sp, #24
   12730:	sub	sp, sp, #8
   12734:	bl	1169c <rb_current_time@plt>
   12738:	ldr	r7, [pc, #272]	; 12850 <sprintf@plt+0xfc8>
   1273c:	mov	r4, r0
   12740:	mov	r5, sp
   12744:	mov	r1, r5
   12748:	ldr	r7, [pc, r7]
   1274c:	ldr	r0, [r7]
   12750:	bl	11678 <rb_dictionary_foreach_start@plt>
   12754:	ldr	r0, [r7]
   12758:	mov	r1, r5
   1275c:	bl	11588 <rb_dictionary_foreach_cur@plt>
   12760:	cmp	r0, #0
   12764:	beq	12848 <sprintf@plt+0xfc0>
   12768:	ldr	r8, [pc, #228]	; 12854 <sprintf@plt+0xfcc>
   1276c:	mov	r6, r0
   12770:	mov	r9, sp
   12774:	ldr	r8, [pc, r8]
   12778:	b	127a0 <sprintf@plt+0xf18>
   1277c:	ldr	r0, [r7]
   12780:	mov	r1, r9
   12784:	bl	11630 <rb_dictionary_foreach_next@plt>
   12788:	ldr	r0, [r7]
   1278c:	mov	r1, r9
   12790:	bl	11588 <rb_dictionary_foreach_cur@plt>
   12794:	mov	r6, r0
   12798:	cmp	r0, #0
   1279c:	beq	12848 <sprintf@plt+0xfc0>
   127a0:	ldr	r0, [r6, #460]	; 0x1cc
   127a4:	add	r0, r0, #1
   127a8:	str	r0, [r6, #460]	; 0x1cc
   127ac:	ldr	r5, [r8]
   127b0:	cmp	r5, #0
   127b4:	bne	127c8 <sprintf@plt+0xf40>
   127b8:	b	12814 <sprintf@plt+0xf8c>
   127bc:	ldr	r5, [r5, #8]
   127c0:	cmp	r5, #0
   127c4:	beq	12810 <sprintf@plt+0xf88>
   127c8:	ldr	r0, [r5]
   127cc:	ldr	r1, [r6, #464]	; 0x1d0
   127d0:	ldr	r2, [r0, #12]
   127d4:	add	r1, r1, r2, lsl #4
   127d8:	ldr	r2, [r1, #12]
   127dc:	cmp	r2, #1
   127e0:	bne	127bc <sprintf@plt+0xf34>
   127e4:	ldr	r1, [r1, #4]
   127e8:	cmp	r1, r4
   127ec:	bge	127bc <sprintf@plt+0xf34>
   127f0:	cmp	r1, #1
   127f4:	blt	127bc <sprintf@plt+0xf34>
   127f8:	ldr	r1, [r0, #40]	; 0x28
   127fc:	cmp	r1, #0
   12800:	beq	127bc <sprintf@plt+0xf34>
   12804:	mov	r0, r6
   12808:	blx	r1
   1280c:	b	127bc <sprintf@plt+0xf34>
   12810:	ldr	r0, [r6, #460]	; 0x1cc
   12814:	subs	r0, r0, #1
   12818:	str	r0, [r6, #460]	; 0x1cc
   1281c:	bne	1277c <sprintf@plt+0xef4>
   12820:	ldr	r1, [r6]
   12824:	ldr	r0, [r7]
   12828:	bl	116a8 <rb_dictionary_delete@plt>
   1282c:	ldr	r0, [r6, #464]	; 0x1d0
   12830:	cmp	r0, #0
   12834:	beq	1283c <sprintf@plt+0xfb4>
   12838:	bl	1163c <free@plt>
   1283c:	mov	r0, r6
   12840:	bl	1163c <free@plt>
   12844:	b	1277c <sprintf@plt+0xef4>
   12848:	sub	sp, fp, #24
   1284c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12850:	andeq	r7, r1, ip, lsl #20
   12854:	andeq	r7, r1, r8, lsr #20
   12858:	push	{r4, r5, r6, sl, fp, lr}
   1285c:	add	fp, sp, #16
   12860:	ldr	r6, [pc, #400]	; 129f8 <sprintf@plt+0x1170>
   12864:	mov	r4, r0
   12868:	add	r6, pc, r6
   1286c:	ldr	r2, [r6, #8]
   12870:	cmp	r2, #0
   12874:	beq	128ac <sprintf@plt+0x1024>
   12878:	ldr	r0, [pc, #380]	; 129fc <sprintf@plt+0x1174>
   1287c:	ldr	r0, [pc, r0]
   12880:	ldr	r3, [r0]
   12884:	cmp	r0, #0
   12888:	str	r3, [r4, #12]
   1288c:	beq	129d8 <sprintf@plt+0x1150>
   12890:	ldr	r3, [r0, #8]
   12894:	ldr	r5, [r0, #4]
   12898:	cmp	r3, #0
   1289c:	beq	128d4 <sprintf@plt+0x104c>
   128a0:	str	r5, [r3, #4]
   128a4:	ldr	r5, [r0, #4]
   128a8:	b	128d8 <sprintf@plt+0x1050>
   128ac:	ldr	r0, [pc, #332]	; 12a00 <sprintf@plt+0x1178>
   128b0:	ldr	r0, [pc, r0]
   128b4:	cmp	r0, #32
   128b8:	cmnne	r0, #1
   128bc:	bne	129c0 <sprintf@plt+0x1138>
   128c0:	ldr	r1, [pc, #344]	; 12a20 <sprintf@plt+0x1198>
   128c4:	mov	r0, #87	; 0x57
   128c8:	add	r1, pc, r1
   128cc:	pop	{r4, r5, r6, sl, fp, lr}
   128d0:	b	124f8 <sprintf@plt+0xc70>
   128d4:	str	r5, [r6, #4]
   128d8:	cmp	r5, #0
   128dc:	mov	r1, r6
   128e0:	addne	r1, r5, #8
   128e4:	cmp	r5, #0
   128e8:	str	r3, [r1]
   128ec:	mov	r1, #0
   128f0:	str	r1, [r0, #4]
   128f4:	str	r1, [r0, #8]
   128f8:	sub	r1, r2, #1
   128fc:	moveq	r0, r3
   12900:	str	r1, [r6, #8]
   12904:	bl	116c0 <rb_free_rb_dlink_node@plt>
   12908:	ldr	r5, [r4, #56]	; 0x38
   1290c:	cmp	r5, #0
   12910:	beq	12940 <sprintf@plt+0x10b8>
   12914:	ldr	r1, [r5]
   12918:	cmp	r1, #0
   1291c:	beq	12940 <sprintf@plt+0x10b8>
   12920:	ldr	r6, [pc, #224]	; 12a08 <sprintf@plt+0x1180>
   12924:	ldr	r6, [pc, r6]
   12928:	ldr	r0, [r6]
   1292c:	mov	r2, r5
   12930:	bl	11768 <rb_dictionary_add@plt>
   12934:	ldr	r1, [r5, #12]!
   12938:	cmp	r1, #0
   1293c:	bne	12928 <sprintf@plt+0x10a0>
   12940:	ldrb	r0, [r4, #48]	; 0x30
   12944:	cmp	r0, #0
   12948:	beq	1295c <sprintf@plt+0x10d4>
   1294c:	ldr	r1, [r4, #52]	; 0x34
   12950:	ldr	r2, [pc, #180]	; 12a0c <sprintf@plt+0x1184>
   12954:	ldr	r2, [pc, r2]
   12958:	str	r1, [r2, r0, lsl #2]
   1295c:	ldr	r0, [r4, #24]
   12960:	cmp	r0, #0
   12964:	beq	1296c <sprintf@plt+0x10e4>
   12968:	blx	r0
   1296c:	mov	r0, #0
   12970:	str	r0, [r4, #4]
   12974:	str	r4, [r4]
   12978:	ldr	r0, [pc, #144]	; 12a10 <sprintf@plt+0x1188>
   1297c:	ldr	r0, [pc, r0]
   12980:	ldr	r1, [r0]
   12984:	cmp	r1, #0
   12988:	str	r1, [r4, #8]
   1298c:	beq	1299c <sprintf@plt+0x1114>
   12990:	add	r1, r1, #4
   12994:	str	r4, [r1]
   12998:	b	129ac <sprintf@plt+0x1124>
   1299c:	mov	r1, r0
   129a0:	ldr	r2, [r1, #4]!
   129a4:	cmp	r2, #0
   129a8:	streq	r4, [r1]
   129ac:	str	r4, [r0]
   129b0:	ldr	r1, [r0, #8]
   129b4:	add	r1, r1, #1
   129b8:	str	r1, [r0, #8]
   129bc:	pop	{r4, r5, r6, sl, fp, pc}
   129c0:	ldr	r2, [pc, #60]	; 12a04 <sprintf@plt+0x117c>
   129c4:	add	r1, r0, #1
   129c8:	add	r2, pc, r2
   129cc:	str	r1, [r2]
   129d0:	str	r0, [r4, #12]
   129d4:	b	12908 <sprintf@plt+0x1080>
   129d8:	ldr	r0, [pc, #52]	; 12a14 <sprintf@plt+0x118c>
   129dc:	ldr	r1, [pc, #52]	; 12a18 <sprintf@plt+0x1190>
   129e0:	ldr	r3, [pc, #52]	; 12a1c <sprintf@plt+0x1194>
   129e4:	mov	r2, #235	; 0xeb
   129e8:	add	r0, pc, r0
   129ec:	add	r1, pc, r1
   129f0:	add	r3, pc, r3
   129f4:	bl	11600 <__assert_fail@plt>
   129f8:	andeq	ip, r1, r4, ror #14
   129fc:	andeq	ip, r1, r0, asr r7
   12a00:	andeq	ip, r1, r8, lsr #14
   12a04:	andeq	ip, r1, r0, lsl r6
   12a08:	andeq	r7, r1, r8, asr r8
   12a0c:	andeq	r7, r1, r0, asr #16
   12a10:	andeq	r7, r1, r0, lsr #16
   12a14:	andeq	r6, r0, r8, lsl r9
   12a18:	andeq	r6, r0, lr, lsl r9
   12a1c:	andeq	r6, r0, r6, lsr r9
   12a20:	andeq	r6, r0, r2, lsl r9
   12a24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a28:	add	fp, sp, #24
   12a2c:	sub	sp, sp, #8
   12a30:	ldr	r9, [pc, #356]	; 12b9c <sprintf@plt+0x1314>
   12a34:	mov	r5, sp
   12a38:	mov	r1, r5
   12a3c:	ldr	r9, [pc, r9]
   12a40:	ldr	r0, [r9]
   12a44:	bl	11678 <rb_dictionary_foreach_start@plt>
   12a48:	ldr	r0, [r9]
   12a4c:	mov	r1, r5
   12a50:	bl	11588 <rb_dictionary_foreach_cur@plt>
   12a54:	cmp	r0, #0
   12a58:	beq	12af4 <sprintf@plt+0x126c>
   12a5c:	ldr	r8, [pc, #316]	; 12ba0 <sprintf@plt+0x1318>
   12a60:	ldr	r5, [pc, #316]	; 12ba4 <sprintf@plt+0x131c>
   12a64:	mov	r7, r0
   12a68:	mov	r6, sp
   12a6c:	add	r8, pc, r8
   12a70:	add	r5, pc, r5
   12a74:	b	12a9c <sprintf@plt+0x1214>
   12a78:	ldr	r0, [r9]
   12a7c:	mov	r1, r6
   12a80:	bl	11630 <rb_dictionary_foreach_next@plt>
   12a84:	ldr	r0, [r9]
   12a88:	mov	r1, r6
   12a8c:	bl	11588 <rb_dictionary_foreach_cur@plt>
   12a90:	mov	r7, r0
   12a94:	cmp	r0, #0
   12a98:	beq	12af4 <sprintf@plt+0x126c>
   12a9c:	ldr	r0, [r7, #460]	; 0x1cc
   12aa0:	mvn	r1, #0
   12aa4:	mov	r2, r8
   12aa8:	mov	r3, r5
   12aac:	add	r0, r0, #1
   12ab0:	str	r0, [r7, #460]	; 0x1cc
   12ab4:	mov	r0, r7
   12ab8:	bl	12bb0 <sprintf@plt+0x1328>
   12abc:	ldr	r0, [r7, #460]	; 0x1cc
   12ac0:	subs	r0, r0, #1
   12ac4:	str	r0, [r7, #460]	; 0x1cc
   12ac8:	bne	12a78 <sprintf@plt+0x11f0>
   12acc:	ldr	r1, [r7]
   12ad0:	ldr	r0, [r9]
   12ad4:	bl	116a8 <rb_dictionary_delete@plt>
   12ad8:	ldr	r0, [r7, #464]	; 0x1d0
   12adc:	cmp	r0, #0
   12ae0:	beq	12ae8 <sprintf@plt+0x1260>
   12ae4:	bl	1163c <free@plt>
   12ae8:	mov	r0, r7
   12aec:	bl	1163c <free@plt>
   12af0:	b	12a78 <sprintf@plt+0x11f0>
   12af4:	ldr	r5, [pc, #172]	; 12ba8 <sprintf@plt+0x1320>
   12af8:	ldr	r5, [pc, r5]
   12afc:	ldr	r7, [r5]
   12b00:	cmp	r7, #0
   12b04:	beq	12b78 <sprintf@plt+0x12f0>
   12b08:	mov	r6, #0
   12b0c:	b	12b44 <sprintf@plt+0x12bc>
   12b10:	str	r1, [r5, #4]
   12b14:	cmp	r1, #0
   12b18:	mov	r2, r5
   12b1c:	addne	r2, r1, #8
   12b20:	cmp	r4, #0
   12b24:	str	r0, [r2]
   12b28:	str	r6, [r7, #4]
   12b2c:	str	r6, [r7, #8]
   12b30:	mov	r7, r4
   12b34:	ldr	r0, [r5, #8]
   12b38:	sub	r0, r0, #1
   12b3c:	str	r0, [r5, #8]
   12b40:	beq	12b78 <sprintf@plt+0x12f0>
   12b44:	ldr	r0, [r7]
   12b48:	ldr	r4, [r7, #8]
   12b4c:	ldr	r0, [r0, #28]
   12b50:	cmp	r0, #0
   12b54:	beq	12b5c <sprintf@plt+0x12d4>
   12b58:	blx	r0
   12b5c:	ldr	r0, [r7, #8]
   12b60:	ldr	r1, [r7, #4]
   12b64:	cmp	r0, #0
   12b68:	beq	12b10 <sprintf@plt+0x1288>
   12b6c:	str	r1, [r0, #4]
   12b70:	ldr	r1, [r7, #4]
   12b74:	b	12b14 <sprintf@plt+0x128c>
   12b78:	ldr	r0, [r9]
   12b7c:	mov	r1, #0
   12b80:	mov	r2, #0
   12b84:	bl	11708 <rb_dictionary_destroy@plt>
   12b88:	ldr	r0, [pc, #28]	; 12bac <sprintf@plt+0x1324>
   12b8c:	ldr	r0, [pc, r0]
   12b90:	bl	1151c <rb_event_delete@plt>
   12b94:	sub	sp, fp, #24
   12b98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12b9c:	andeq	r7, r1, r8, lsl r7
   12ba0:	andeq	r6, r0, r3, lsr #14
   12ba4:	andeq	r6, r0, r7, lsr #14
   12ba8:	andeq	r7, r1, r4, lsr #13
   12bac:	andeq	ip, r1, ip, lsr r4
   12bb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12bb4:	add	fp, sp, #24
   12bb8:	sub	sp, sp, #536	; 0x218
   12bbc:	mov	r6, r3
   12bc0:	add	r8, sp, #24
   12bc4:	mov	r7, r2
   12bc8:	mov	r5, r1
   12bcc:	mov	r4, r0
   12bd0:	add	r3, fp, #8
   12bd4:	mov	r1, #512	; 0x200
   12bd8:	mov	r0, r8
   12bdc:	mov	r2, r6
   12be0:	str	r3, [sp, #20]
   12be4:	bl	1154c <vsnprintf@plt>
   12be8:	ldr	r2, [r4]
   12bec:	ldr	r0, [pc, #288]	; 12d14 <sprintf@plt+0x148c>
   12bf0:	cmn	r5, #1
   12bf4:	ldr	r0, [pc, r0]
   12bf8:	ldr	r0, [r0]
   12bfc:	beq	12c5c <sprintf@plt+0x13d4>
   12c00:	ldr	r1, [r4, #464]	; 0x1d0
   12c04:	cmp	r7, #0
   12c08:	add	r6, r4, #440	; 0x1b8
   12c0c:	ldr	r1, [r1, r5, lsl #4]
   12c10:	ldrb	r3, [r1, #20]
   12c14:	ldr	r1, [pc, #252]	; 12d18 <sprintf@plt+0x1490>
   12c18:	add	r1, pc, r1
   12c1c:	movne	r1, r7
   12c20:	add	r7, r4, #376	; 0x178
   12c24:	stm	sp, {r6, r7}
   12c28:	str	r8, [sp, #12]
   12c2c:	str	r1, [sp, #8]
   12c30:	ldr	r1, [pc, #228]	; 12d1c <sprintf@plt+0x1494>
   12c34:	add	r1, pc, r1
   12c38:	bl	117e0 <rb_helper_write@plt>
   12c3c:	ldr	r0, [r4, #464]	; 0x1d0
   12c40:	mov	r1, #2
   12c44:	add	r0, r0, r5, lsl #4
   12c48:	str	r1, [r0, #12]
   12c4c:	ldr	r0, [r4, #456]	; 0x1c8
   12c50:	sub	r0, r0, #1
   12c54:	str	r0, [r4, #456]	; 0x1c8
   12c58:	b	12c94 <sprintf@plt+0x140c>
   12c5c:	ldr	r1, [pc, #188]	; 12d20 <sprintf@plt+0x1498>
   12c60:	cmp	r7, #0
   12c64:	add	r3, r4, #376	; 0x178
   12c68:	str	r8, [sp, #12]
   12c6c:	str	r3, [sp, #4]
   12c70:	mov	r3, #42	; 0x2a
   12c74:	add	r1, pc, r1
   12c78:	movne	r1, r7
   12c7c:	add	r7, r4, #440	; 0x1b8
   12c80:	str	r7, [sp]
   12c84:	str	r1, [sp, #8]
   12c88:	ldr	r1, [pc, #148]	; 12d24 <sprintf@plt+0x149c>
   12c8c:	add	r1, pc, r1
   12c90:	bl	117e0 <rb_helper_write@plt>
   12c94:	ldrb	r0, [r4, #452]	; 0x1c4
   12c98:	cmp	r0, #0
   12c9c:	bne	12d0c <sprintf@plt+0x1484>
   12ca0:	mov	r0, #1
   12ca4:	strb	r0, [r4, #452]	; 0x1c4
   12ca8:	ldr	r0, [r4, #456]	; 0x1c8
   12cac:	cmp	r0, #0
   12cb0:	beq	12d0c <sprintf@plt+0x1484>
   12cb4:	ldr	r0, [pc, #108]	; 12d28 <sprintf@plt+0x14a0>
   12cb8:	ldr	r0, [pc, r0]
   12cbc:	ldr	r5, [r0]
   12cc0:	cmp	r5, #0
   12cc4:	bne	12cd8 <sprintf@plt+0x1450>
   12cc8:	b	12d0c <sprintf@plt+0x1484>
   12ccc:	ldr	r5, [r5, #8]
   12cd0:	cmp	r5, #0
   12cd4:	beq	12d0c <sprintf@plt+0x1484>
   12cd8:	ldr	r0, [r5]
   12cdc:	ldr	r1, [r0, #36]	; 0x24
   12ce0:	cmp	r1, #0
   12ce4:	beq	12ccc <sprintf@plt+0x1444>
   12ce8:	ldr	r0, [r0, #12]
   12cec:	ldr	r2, [r4, #464]	; 0x1d0
   12cf0:	add	r0, r2, r0, lsl #4
   12cf4:	ldr	r0, [r0, #12]
   12cf8:	cmp	r0, #1
   12cfc:	bne	12ccc <sprintf@plt+0x1444>
   12d00:	mov	r0, r4
   12d04:	blx	r1
   12d08:	b	12ccc <sprintf@plt+0x1444>
   12d0c:	sub	sp, fp, #24
   12d10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d14:	muleq	r1, ip, r5
   12d18:	andeq	r6, r0, ip, lsl #10
   12d1c:	ldrdeq	r6, [r0], -r4
   12d20:			; <UNDEFINED> instruction: 0x000064b0
   12d24:	andeq	r6, r0, ip, ror r5
   12d28:	andeq	r7, r1, r4, ror #9
   12d2c:	push	{r4, r5, r6, sl, fp, lr}
   12d30:	add	fp, sp, #16
   12d34:	mov	r4, r0
   12d38:	ldr	r0, [r0, #56]	; 0x38
   12d3c:	cmp	r0, #0
   12d40:	beq	12d70 <sprintf@plt+0x14e8>
   12d44:	ldr	r1, [r0]
   12d48:	cmp	r1, #0
   12d4c:	beq	12d70 <sprintf@plt+0x14e8>
   12d50:	ldr	r6, [pc, #332]	; 12ea4 <sprintf@plt+0x161c>
   12d54:	add	r5, r0, #12
   12d58:	ldr	r6, [pc, r6]
   12d5c:	ldr	r0, [r6]
   12d60:	bl	116a8 <rb_dictionary_delete@plt>
   12d64:	ldr	r1, [r5], #12
   12d68:	cmp	r1, #0
   12d6c:	bne	12d5c <sprintf@plt+0x14d4>
   12d70:	ldrb	r0, [r4, #48]	; 0x30
   12d74:	cmp	r0, #0
   12d78:	beq	12d8c <sprintf@plt+0x1504>
   12d7c:	ldr	r1, [pc, #292]	; 12ea8 <sprintf@plt+0x1620>
   12d80:	mov	r2, #0
   12d84:	ldr	r1, [pc, r1]
   12d88:	str	r2, [r1, r0, lsl #2]
   12d8c:	ldr	r0, [r4, #28]
   12d90:	cmp	r0, #0
   12d94:	beq	12d9c <sprintf@plt+0x1514>
   12d98:	blx	r0
   12d9c:	ldr	r0, [r4, #8]
   12da0:	ldr	r1, [r4, #4]
   12da4:	cmp	r0, #0
   12da8:	beq	12db8 <sprintf@plt+0x1530>
   12dac:	str	r1, [r0, #4]
   12db0:	ldr	r1, [r4, #4]
   12db4:	b	12dc4 <sprintf@plt+0x153c>
   12db8:	ldr	r2, [pc, #236]	; 12eac <sprintf@plt+0x1624>
   12dbc:	ldr	r2, [pc, r2]
   12dc0:	str	r1, [r2, #4]
   12dc4:	ldr	r2, [pc, #228]	; 12eb0 <sprintf@plt+0x1628>
   12dc8:	cmp	r1, #0
   12dcc:	ldr	r2, [pc, r2]
   12dd0:	mov	r3, r2
   12dd4:	addne	r3, r1, #8
   12dd8:	str	r0, [r3]
   12ddc:	mov	r0, #0
   12de0:	str	r0, [r4, #4]
   12de4:	str	r0, [r4, #8]
   12de8:	ldr	r0, [r2, #8]
   12dec:	sub	r0, r0, #1
   12df0:	str	r0, [r2, #8]
   12df4:	ldr	r4, [r4, #12]
   12df8:	bl	11804 <rb_make_rb_dlink_node@plt>
   12dfc:	cmp	r4, #0
   12e00:	beq	12e64 <sprintf@plt+0x15dc>
   12e04:	cmp	r0, #0
   12e08:	beq	12e84 <sprintf@plt+0x15fc>
   12e0c:	mov	r1, #0
   12e10:	str	r1, [r0, #4]
   12e14:	str	r4, [r0]
   12e18:	ldr	r2, [pc, #148]	; 12eb4 <sprintf@plt+0x162c>
   12e1c:	ldr	r2, [pc, r2]
   12e20:	str	r2, [r0, #8]
   12e24:	cmp	r2, #0
   12e28:	ldr	r1, [pc, #136]	; 12eb8 <sprintf@plt+0x1630>
   12e2c:	add	r1, pc, r1
   12e30:	beq	12e40 <sprintf@plt+0x15b8>
   12e34:	add	r2, r2, #4
   12e38:	str	r0, [r2]
   12e3c:	b	12e50 <sprintf@plt+0x15c8>
   12e40:	mov	r2, r1
   12e44:	ldr	r3, [r2, #4]!
   12e48:	cmp	r3, #0
   12e4c:	streq	r0, [r2]
   12e50:	str	r0, [r1]
   12e54:	ldr	r0, [r1, #8]
   12e58:	add	r0, r0, #1
   12e5c:	str	r0, [r1, #8]
   12e60:	pop	{r4, r5, r6, sl, fp, pc}
   12e64:	ldr	r0, [pc, #80]	; 12ebc <sprintf@plt+0x1634>
   12e68:	ldr	r1, [pc, #80]	; 12ec0 <sprintf@plt+0x1638>
   12e6c:	ldr	r3, [pc, #80]	; 12ec4 <sprintf@plt+0x163c>
   12e70:	mov	r2, #143	; 0x8f
   12e74:	add	r0, pc, r0
   12e78:	add	r1, pc, r1
   12e7c:	add	r3, pc, r3
   12e80:	bl	11600 <__assert_fail@plt>
   12e84:	ldr	r0, [pc, #60]	; 12ec8 <sprintf@plt+0x1640>
   12e88:	ldr	r1, [pc, #60]	; 12ecc <sprintf@plt+0x1644>
   12e8c:	ldr	r3, [pc, #60]	; 12ed0 <sprintf@plt+0x1648>
   12e90:	mov	r2, #144	; 0x90
   12e94:	add	r0, pc, r0
   12e98:	add	r1, pc, r1
   12e9c:	add	r3, pc, r3
   12ea0:	bl	11600 <__assert_fail@plt>
   12ea4:	andeq	r7, r1, r4, lsr #8
   12ea8:	andeq	r7, r1, r0, lsl r4
   12eac:	andeq	r7, r1, r0, ror #7
   12eb0:	ldrdeq	r7, [r1], -r0
   12eb4:			; <UNDEFINED> instruction: 0x0001c1b0
   12eb8:	andeq	ip, r1, r0, lsr #3
   12ebc:	andeq	r6, r0, r8, ror #9
   12ec0:	muleq	r0, r2, r4
   12ec4:	andeq	r6, r0, sp, ror #9
   12ec8:	andeq	r6, r0, ip, ror #8
   12ecc:	andeq	r6, r0, r2, ror r4
   12ed0:	andeq	r6, r0, sp, asr #9
   12ed4:	push	{r4, sl, fp, lr}
   12ed8:	add	fp, sp, #8
   12edc:	mov	r4, r0
   12ee0:	ldr	r1, [r0]
   12ee4:	ldr	r0, [pc, #36]	; 12f10 <sprintf@plt+0x1688>
   12ee8:	ldr	r0, [pc, r0]
   12eec:	ldr	r0, [r0]
   12ef0:	bl	116a8 <rb_dictionary_delete@plt>
   12ef4:	ldr	r0, [r4, #464]	; 0x1d0
   12ef8:	cmp	r0, #0
   12efc:	beq	12f04 <sprintf@plt+0x167c>
   12f00:	bl	1163c <free@plt>
   12f04:	mov	r0, r4
   12f08:	pop	{r4, sl, fp, lr}
   12f0c:	b	1163c <free@plt>
   12f10:	andeq	r7, r1, ip, ror #4
   12f14:	push	{r4, r5, fp, lr}
   12f18:	add	fp, sp, #8
   12f1c:	mov	r4, r0
   12f20:	ldrb	r0, [r0, #452]	; 0x1c4
   12f24:	cmp	r0, #0
   12f28:	bne	12f98 <sprintf@plt+0x1710>
   12f2c:	mov	r0, #1
   12f30:	strb	r0, [r4, #452]	; 0x1c4
   12f34:	ldr	r0, [r4, #456]	; 0x1c8
   12f38:	cmp	r0, #0
   12f3c:	popeq	{r4, r5, fp, pc}
   12f40:	ldr	r0, [pc, #84]	; 12f9c <sprintf@plt+0x1714>
   12f44:	ldr	r0, [pc, r0]
   12f48:	ldr	r5, [r0]
   12f4c:	cmp	r5, #0
   12f50:	bne	12f64 <sprintf@plt+0x16dc>
   12f54:	b	12f98 <sprintf@plt+0x1710>
   12f58:	ldr	r5, [r5, #8]
   12f5c:	cmp	r5, #0
   12f60:	beq	12f98 <sprintf@plt+0x1710>
   12f64:	ldr	r0, [r5]
   12f68:	ldr	r1, [r0, #36]	; 0x24
   12f6c:	cmp	r1, #0
   12f70:	beq	12f58 <sprintf@plt+0x16d0>
   12f74:	ldr	r0, [r0, #12]
   12f78:	ldr	r2, [r4, #464]	; 0x1d0
   12f7c:	add	r0, r2, r0, lsl #4
   12f80:	ldr	r0, [r0, #12]
   12f84:	cmp	r0, #1
   12f88:	bne	12f58 <sprintf@plt+0x16d0>
   12f8c:	mov	r0, r4
   12f90:	blx	r1
   12f94:	b	12f58 <sprintf@plt+0x16d0>
   12f98:	pop	{r4, r5, fp, pc}
   12f9c:	andeq	r7, r1, r8, asr r2
   12fa0:	push	{r4, r5, r6, sl, fp, lr}
   12fa4:	add	fp, sp, #16
   12fa8:	sub	sp, sp, #8
   12fac:	mov	r4, r0
   12fb0:	ldr	r0, [r0, #464]	; 0x1d0
   12fb4:	mov	r5, r1
   12fb8:	add	r0, r0, r1, lsl #4
   12fbc:	mov	r1, #2
   12fc0:	str	r1, [r0, #12]
   12fc4:	ldr	r0, [r4, #456]	; 0x1c8
   12fc8:	subs	r0, r0, #1
   12fcc:	str	r0, [r4, #456]	; 0x1c8
   12fd0:	bne	12fe0 <sprintf@plt+0x1758>
   12fd4:	ldrb	r0, [r4, #451]	; 0x1c3
   12fd8:	cmp	r0, #0
   12fdc:	beq	1303c <sprintf@plt+0x17b4>
   12fe0:	ldr	r0, [pc, #264]	; 130f0 <sprintf@plt+0x1868>
   12fe4:	ldr	r0, [pc, r0]
   12fe8:	ldr	r6, [r0]
   12fec:	cmp	r6, #0
   12ff0:	bne	13004 <sprintf@plt+0x177c>
   12ff4:	b	130dc <sprintf@plt+0x1854>
   12ff8:	ldr	r6, [r6, #8]
   12ffc:	cmp	r6, #0
   13000:	beq	130dc <sprintf@plt+0x1854>
   13004:	ldr	r0, [r6]
   13008:	ldr	r2, [r0, #44]	; 0x2c
   1300c:	cmp	r2, #0
   13010:	beq	12ff8 <sprintf@plt+0x1770>
   13014:	ldr	r0, [r0, #12]
   13018:	ldr	r1, [r4, #464]	; 0x1d0
   1301c:	add	r0, r1, r0, lsl #4
   13020:	ldr	r0, [r0, #12]
   13024:	cmp	r0, #1
   13028:	bne	12ff8 <sprintf@plt+0x1770>
   1302c:	mov	r0, r4
   13030:	mov	r1, r5
   13034:	blx	r2
   13038:	b	12ff8 <sprintf@plt+0x1770>
   1303c:	ldr	r2, [r4]
   13040:	ldr	r0, [pc, #156]	; 130e4 <sprintf@plt+0x185c>
   13044:	add	r1, r4, #376	; 0x178
   13048:	add	r3, r4, #440	; 0x1b8
   1304c:	ldr	r0, [pc, r0]
   13050:	str	r1, [sp]
   13054:	ldr	r0, [r0]
   13058:	ldr	r1, [pc, #136]	; 130e8 <sprintf@plt+0x1860>
   1305c:	add	r1, pc, r1
   13060:	bl	117e0 <rb_helper_write@plt>
   13064:	ldrb	r0, [r4, #452]	; 0x1c4
   13068:	cmp	r0, #0
   1306c:	bne	130dc <sprintf@plt+0x1854>
   13070:	mov	r0, #1
   13074:	strb	r0, [r4, #452]	; 0x1c4
   13078:	ldr	r0, [r4, #456]	; 0x1c8
   1307c:	cmp	r0, #0
   13080:	beq	130dc <sprintf@plt+0x1854>
   13084:	ldr	r0, [pc, #96]	; 130ec <sprintf@plt+0x1864>
   13088:	ldr	r0, [pc, r0]
   1308c:	ldr	r5, [r0]
   13090:	cmp	r5, #0
   13094:	bne	130a8 <sprintf@plt+0x1820>
   13098:	b	130dc <sprintf@plt+0x1854>
   1309c:	ldr	r5, [r5, #8]
   130a0:	cmp	r5, #0
   130a4:	beq	130dc <sprintf@plt+0x1854>
   130a8:	ldr	r0, [r5]
   130ac:	ldr	r1, [r0, #36]	; 0x24
   130b0:	cmp	r1, #0
   130b4:	beq	1309c <sprintf@plt+0x1814>
   130b8:	ldr	r0, [r0, #12]
   130bc:	ldr	r2, [r4, #464]	; 0x1d0
   130c0:	add	r0, r2, r0, lsl #4
   130c4:	ldr	r0, [r0, #12]
   130c8:	cmp	r0, #1
   130cc:	bne	1309c <sprintf@plt+0x1814>
   130d0:	mov	r0, r4
   130d4:	blx	r1
   130d8:	b	1309c <sprintf@plt+0x1814>
   130dc:	sub	sp, fp, #16
   130e0:	pop	{r4, r5, r6, sl, fp, pc}
   130e4:	andeq	r7, r1, r4, asr #2
   130e8:	andeq	r6, r0, r1, asr #3
   130ec:	andeq	r7, r1, r4, lsl r1
   130f0:			; <UNDEFINED> instruction: 0x000171b8
   130f4:	push	{r4, r5, fp, lr}
   130f8:	add	fp, sp, #8
   130fc:	sub	sp, sp, #8
   13100:	mov	r4, r0
   13104:	ldr	r2, [r0]
   13108:	ldr	r0, [pc, #156]	; 131ac <sprintf@plt+0x1924>
   1310c:	add	r1, r4, #376	; 0x178
   13110:	add	r3, r4, #440	; 0x1b8
   13114:	ldr	r0, [pc, r0]
   13118:	str	r1, [sp]
   1311c:	ldr	r0, [r0]
   13120:	ldr	r1, [pc, #136]	; 131b0 <sprintf@plt+0x1928>
   13124:	add	r1, pc, r1
   13128:	bl	117e0 <rb_helper_write@plt>
   1312c:	ldrb	r0, [r4, #452]	; 0x1c4
   13130:	cmp	r0, #0
   13134:	bne	131a4 <sprintf@plt+0x191c>
   13138:	mov	r0, #1
   1313c:	strb	r0, [r4, #452]	; 0x1c4
   13140:	ldr	r0, [r4, #456]	; 0x1c8
   13144:	cmp	r0, #0
   13148:	beq	131a4 <sprintf@plt+0x191c>
   1314c:	ldr	r0, [pc, #96]	; 131b4 <sprintf@plt+0x192c>
   13150:	ldr	r0, [pc, r0]
   13154:	ldr	r5, [r0]
   13158:	cmp	r5, #0
   1315c:	bne	13170 <sprintf@plt+0x18e8>
   13160:	b	131a4 <sprintf@plt+0x191c>
   13164:	ldr	r5, [r5, #8]
   13168:	cmp	r5, #0
   1316c:	beq	131a4 <sprintf@plt+0x191c>
   13170:	ldr	r0, [r5]
   13174:	ldr	r1, [r0, #36]	; 0x24
   13178:	cmp	r1, #0
   1317c:	beq	13164 <sprintf@plt+0x18dc>
   13180:	ldr	r0, [r0, #12]
   13184:	ldr	r2, [r4, #464]	; 0x1d0
   13188:	add	r0, r2, r0, lsl #4
   1318c:	ldr	r0, [r0, #12]
   13190:	cmp	r0, #1
   13194:	bne	13164 <sprintf@plt+0x18dc>
   13198:	mov	r0, r4
   1319c:	blx	r1
   131a0:	b	13164 <sprintf@plt+0x18dc>
   131a4:	sub	sp, fp, #8
   131a8:	pop	{r4, r5, fp, pc}
   131ac:	andeq	r7, r1, ip, ror r0
   131b0:	strdeq	r6, [r0], -r9
   131b4:	andeq	r7, r1, ip, asr #32
   131b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131bc:	add	fp, sp, #28
   131c0:	sub	sp, sp, #28
   131c4:	mov	r2, r0
   131c8:	cmp	r0, #5
   131cc:	ble	134ec <sprintf@plt+0x1c64>
   131d0:	ldr	sl, [r1, #4]
   131d4:	ldr	r9, [r1, #8]
   131d8:	ldr	r7, [r1, #12]
   131dc:	ldr	r5, [r1, #16]
   131e0:	ldr	r4, [r1, #20]
   131e4:	cmp	r2, #6
   131e8:	bne	131f8 <sprintf@plt+0x1970>
   131ec:	ldr	r6, [pc, #812]	; 13520 <sprintf@plt+0x1c98>
   131f0:	add	r6, pc, r6
   131f4:	b	131fc <sprintf@plt+0x1974>
   131f8:	ldr	r6, [r1, #24]
   131fc:	mov	r0, sl
   13200:	mov	r1, #0
   13204:	mov	r2, #16
   13208:	bl	11624 <strtoull@plt>
   1320c:	mov	r8, r0
   13210:	subs	r0, r0, #1
   13214:	mvn	r2, #1
   13218:	sbc	r1, r1, #0
   1321c:	subs	r0, r2, r0
   13220:	rscs	r0, r1, #0
   13224:	bcc	134b8 <sprintf@plt+0x1c30>
   13228:	mov	r0, #1
   1322c:	mov	r1, #468	; 0x1d4
   13230:	str	r6, [sp, #8]
   13234:	str	r9, [sp, #12]
   13238:	str	r5, [sp, #16]
   1323c:	str	r7, [sp, #20]
   13240:	str	r4, [sp, #24]
   13244:	mov	r5, #1
   13248:	bl	115a0 <calloc@plt>
   1324c:	cmp	r0, #0
   13250:	beq	134fc <sprintf@plt+0x1c74>
   13254:	str	r8, [r0]
   13258:	str	r5, [r0, #460]	; 0x1cc
   1325c:	mov	r4, r0
   13260:	mov	r1, r8
   13264:	ldr	r9, [pc, #696]	; 13524 <sprintf@plt+0x1c9c>
   13268:	ldr	r9, [pc, r9]
   1326c:	ldr	r0, [r9]
   13270:	bl	117b0 <rb_dictionary_find@plt>
   13274:	cmp	r0, #0
   13278:	bne	13500 <sprintf@plt+0x1c78>
   1327c:	ldr	r1, [r4]
   13280:	ldr	r0, [r9]
   13284:	mov	r2, r4
   13288:	bl	11768 <rb_dictionary_add@plt>
   1328c:	ldr	r0, [sp, #8]
   13290:	mov	r1, #0
   13294:	mov	r2, #16
   13298:	bl	11624 <strtoull@plt>
   1329c:	ldr	r5, [sp, #12]
   132a0:	str	r0, [r4, #4]
   132a4:	add	r0, r4, #8
   132a8:	mov	r2, #54	; 0x36
   132ac:	mov	r1, r5
   132b0:	bl	11618 <rb_strlcpy@plt>
   132b4:	ldr	r0, [sp, #20]
   132b8:	mov	r1, #0
   132bc:	mov	r2, #10
   132c0:	bl	116e4 <strtol@plt>
   132c4:	strh	r0, [r4, #62]	; 0x3e
   132c8:	add	r1, r4, #64	; 0x40
   132cc:	mov	r0, r5
   132d0:	bl	11684 <rb_inet_pton_sock@plt>
   132d4:	ldrh	r0, [r4, #62]	; 0x3e
   132d8:	ldr	r5, [sp, #16]
   132dc:	mov	r2, #54	; 0x36
   132e0:	rev16	r0, r0
   132e4:	mov	r1, r5
   132e8:	strh	r0, [r4, #66]	; 0x42
   132ec:	add	r0, r4, #192	; 0xc0
   132f0:	bl	11618 <rb_strlcpy@plt>
   132f4:	ldr	r0, [sp, #24]
   132f8:	mov	r1, #0
   132fc:	mov	r2, #10
   13300:	bl	116e4 <strtol@plt>
   13304:	strh	r0, [r4, #246]	; 0xf6
   13308:	add	r1, r4, #248	; 0xf8
   1330c:	mov	r0, r5
   13310:	bl	11684 <rb_inet_pton_sock@plt>
   13314:	ldrh	r0, [r4, #246]	; 0xf6
   13318:	add	r9, r4, #376	; 0x178
   1331c:	mov	r2, #64	; 0x40
   13320:	rev16	r0, r0
   13324:	strh	r0, [r4, #250]	; 0xfa
   13328:	mov	r0, r9
   1332c:	ldr	r7, [pc, #500]	; 13528 <sprintf@plt+0x1ca0>
   13330:	add	r7, pc, r7
   13334:	mov	r1, r7
   13338:	bl	11618 <rb_strlcpy@plt>
   1333c:	add	r6, r4, #440	; 0x1b8
   13340:	mov	r1, r7
   13344:	mov	r2, #11
   13348:	mov	r0, r6
   1334c:	bl	11618 <rb_strlcpy@plt>
   13350:	ldr	r0, [pc, #468]	; 1352c <sprintf@plt+0x1ca4>
   13354:	mov	r5, #1
   13358:	ldr	r0, [pc, r0]
   1335c:	lsl	r1, r0, #4
   13360:	mov	r0, #1
   13364:	bl	115a0 <calloc@plt>
   13368:	cmp	r0, #0
   1336c:	beq	134fc <sprintf@plt+0x1c74>
   13370:	strb	r5, [r4, #451]	; 0x1c3
   13374:	str	r0, [r4, #464]	; 0x1d0
   13378:	ldr	r8, [pc, #432]	; 13530 <sprintf@plt+0x1ca8>
   1337c:	ldr	r8, [pc, r8]
   13380:	ldr	r7, [r8]
   13384:	ldr	sl, [pc, #424]	; 13534 <sprintf@plt+0x1cac>
   13388:	ldr	sl, [pc, sl]
   1338c:	cmp	r7, #0
   13390:	beq	13400 <sprintf@plt+0x1b78>
   13394:	ldr	r1, [r7]
   13398:	mov	r5, #1
   1339c:	ldr	r2, [r1, #12]
   133a0:	str	r1, [r0, r2, lsl #4]!
   133a4:	ldr	r2, [r4, #456]	; 0x1c8
   133a8:	add	r2, r2, #1
   133ac:	str	r2, [r4, #456]	; 0x1c8
   133b0:	str	r5, [r0, #12]
   133b4:	mov	r0, r4
   133b8:	ldr	r1, [r1, #32]
   133bc:	blx	r1
   133c0:	cmp	r0, #0
   133c4:	beq	134a8 <sprintf@plt+0x1c20>
   133c8:	ldrb	r0, [r4, #452]	; 0x1c4
   133cc:	cmp	r0, #0
   133d0:	bne	13400 <sprintf@plt+0x1b78>
   133d4:	ldr	r7, [r7, #8]
   133d8:	cmp	r7, #0
   133dc:	beq	13400 <sprintf@plt+0x1b78>
   133e0:	ldr	r1, [r7]
   133e4:	ldr	r0, [r4, #464]	; 0x1d0
   133e8:	ldr	r2, [r1, #12]
   133ec:	str	r1, [r0, r2, lsl #4]!
   133f0:	ldr	r2, [r4, #456]	; 0x1c8
   133f4:	add	r2, r2, #1
   133f8:	str	r2, [r4, #456]	; 0x1c8
   133fc:	b	133b0 <sprintf@plt+0x1b28>
   13400:	mov	r0, #0
   13404:	strb	r0, [r4, #451]	; 0x1c3
   13408:	ldr	r0, [r4, #456]	; 0x1c8
   1340c:	cmp	r0, #0
   13410:	bne	134a8 <sprintf@plt+0x1c20>
   13414:	ldr	r2, [r4]
   13418:	ldr	r0, [pc, #284]	; 1353c <sprintf@plt+0x1cb4>
   1341c:	mov	r3, r6
   13420:	ldr	r0, [pc, r0]
   13424:	ldr	r0, [r0]
   13428:	str	r9, [sp]
   1342c:	ldr	r1, [pc, #268]	; 13540 <sprintf@plt+0x1cb8>
   13430:	add	r1, pc, r1
   13434:	bl	117e0 <rb_helper_write@plt>
   13438:	ldrb	r0, [r4, #452]	; 0x1c4
   1343c:	cmp	r0, #0
   13440:	bne	134a8 <sprintf@plt+0x1c20>
   13444:	mov	r0, #1
   13448:	strb	r0, [r4, #452]	; 0x1c4
   1344c:	ldr	r0, [r4, #456]	; 0x1c8
   13450:	cmp	r0, #0
   13454:	beq	134a8 <sprintf@plt+0x1c20>
   13458:	ldr	r5, [r8]
   1345c:	cmp	r5, #0
   13460:	bne	13474 <sprintf@plt+0x1bec>
   13464:	b	134a8 <sprintf@plt+0x1c20>
   13468:	ldr	r5, [r5, #8]
   1346c:	cmp	r5, #0
   13470:	beq	134a8 <sprintf@plt+0x1c20>
   13474:	ldr	r0, [r5]
   13478:	ldr	r1, [r0, #36]	; 0x24
   1347c:	cmp	r1, #0
   13480:	beq	13468 <sprintf@plt+0x1be0>
   13484:	ldr	r0, [r0, #12]
   13488:	ldr	r2, [r4, #464]	; 0x1d0
   1348c:	add	r0, r2, r0, lsl #4
   13490:	ldr	r0, [r0, #12]
   13494:	cmp	r0, #1
   13498:	bne	13468 <sprintf@plt+0x1be0>
   1349c:	mov	r0, r4
   134a0:	blx	r1
   134a4:	b	13468 <sprintf@plt+0x1be0>
   134a8:	ldr	r0, [r4, #460]	; 0x1cc
   134ac:	subs	r0, r0, #1
   134b0:	str	r0, [r4, #460]	; 0x1cc
   134b4:	beq	134c0 <sprintf@plt+0x1c38>
   134b8:	sub	sp, fp, #28
   134bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134c0:	ldr	r1, [r4]
   134c4:	ldr	r0, [sl]
   134c8:	bl	116a8 <rb_dictionary_delete@plt>
   134cc:	ldr	r0, [r4, #464]	; 0x1d0
   134d0:	cmp	r0, #0
   134d4:	beq	134dc <sprintf@plt+0x1c54>
   134d8:	bl	1163c <free@plt>
   134dc:	mov	r0, r4
   134e0:	sub	sp, fp, #28
   134e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134e8:	b	1163c <free@plt>
   134ec:	ldr	r1, [pc, #40]	; 1351c <sprintf@plt+0x1c94>
   134f0:	mov	r0, #67	; 0x43
   134f4:	add	r1, pc, r1
   134f8:	b	13510 <sprintf@plt+0x1c88>
   134fc:	bl	11750 <rb_outofmemory@plt>
   13500:	ldr	r1, [pc, #48]	; 13538 <sprintf@plt+0x1cb0>
   13504:	mov	r0, #67	; 0x43
   13508:	mov	r2, sl
   1350c:	add	r1, pc, r1
   13510:	bl	124f8 <sprintf@plt+0xc70>
   13514:	mov	r0, #3
   13518:	bl	11870 <exit@plt>
   1351c:	andeq	r5, r0, r4, lsr sp
   13520:	strdeq	r6, [r0], -r0
   13524:	andeq	r6, r1, ip, ror #29
   13528:	strdeq	r5, [r0], -r4
   1352c:	andeq	fp, r1, r0, lsl #25
   13530:	andeq	r6, r1, r0, lsr #28
   13534:	andeq	r6, r1, ip, asr #27
   13538:	muleq	r0, r8, lr
   1353c:	andeq	r6, r1, r0, ror sp
   13540:	andeq	r5, r0, sp, ror #27
   13544:	push	{r4, r5, r6, sl, fp, lr}
   13548:	add	fp, sp, #16
   1354c:	cmp	r0, #1
   13550:	ble	13668 <sprintf@plt+0x1de0>
   13554:	ldr	r0, [r1, #4]
   13558:	mov	r4, r1
   1355c:	mov	r1, #0
   13560:	mov	r2, #16
   13564:	bl	11624 <strtoull@plt>
   13568:	mov	r2, r0
   1356c:	subs	r0, r0, #1
   13570:	mvn	r3, #0
   13574:	sbc	r1, r1, #0
   13578:	subs	r0, r0, r3
   1357c:	sbcs	r0, r1, #0
   13580:	bcs	13678 <sprintf@plt+0x1df0>
   13584:	ldr	r5, [pc, #272]	; 1369c <sprintf@plt+0x1e14>
   13588:	mov	r1, r2
   1358c:	ldr	r5, [pc, r5]
   13590:	ldr	r0, [r5]
   13594:	bl	11744 <rb_dictionary_retrieve@plt>
   13598:	cmp	r0, #0
   1359c:	beq	135f0 <sprintf@plt+0x1d68>
   135a0:	mov	r4, r0
   135a4:	ldr	r0, [r0, #460]	; 0x1cc
   135a8:	add	r0, r0, #1
   135ac:	str	r0, [r4, #460]	; 0x1cc
   135b0:	ldrb	r1, [r4, #452]	; 0x1c4
   135b4:	cmp	r1, #0
   135b8:	beq	135f4 <sprintf@plt+0x1d6c>
   135bc:	subs	r0, r0, #1
   135c0:	str	r0, [r4, #460]	; 0x1cc
   135c4:	popne	{r4, r5, r6, sl, fp, pc}
   135c8:	ldr	r1, [r4]
   135cc:	ldr	r0, [r5]
   135d0:	bl	116a8 <rb_dictionary_delete@plt>
   135d4:	ldr	r0, [r4, #464]	; 0x1d0
   135d8:	cmp	r0, #0
   135dc:	beq	135e4 <sprintf@plt+0x1d5c>
   135e0:	bl	1163c <free@plt>
   135e4:	mov	r0, r4
   135e8:	pop	{r4, r5, r6, sl, fp, lr}
   135ec:	b	1163c <free@plt>
   135f0:	pop	{r4, r5, r6, sl, fp, pc}
   135f4:	mov	r1, #1
   135f8:	strb	r1, [r4, #452]	; 0x1c4
   135fc:	ldr	r1, [r4, #456]	; 0x1c8
   13600:	cmp	r1, #0
   13604:	beq	135bc <sprintf@plt+0x1d34>
   13608:	ldr	r1, [pc, #144]	; 136a0 <sprintf@plt+0x1e18>
   1360c:	ldr	r1, [pc, r1]
   13610:	ldr	r6, [r1]
   13614:	cmp	r6, #0
   13618:	bne	1362c <sprintf@plt+0x1da4>
   1361c:	b	135bc <sprintf@plt+0x1d34>
   13620:	ldr	r6, [r6, #8]
   13624:	cmp	r6, #0
   13628:	beq	13660 <sprintf@plt+0x1dd8>
   1362c:	ldr	r0, [r6]
   13630:	ldr	r1, [r0, #36]	; 0x24
   13634:	cmp	r1, #0
   13638:	beq	13620 <sprintf@plt+0x1d98>
   1363c:	ldr	r0, [r0, #12]
   13640:	ldr	r2, [r4, #464]	; 0x1d0
   13644:	add	r0, r2, r0, lsl #4
   13648:	ldr	r0, [r0, #12]
   1364c:	cmp	r0, #1
   13650:	bne	13620 <sprintf@plt+0x1d98>
   13654:	mov	r0, r4
   13658:	blx	r1
   1365c:	b	13620 <sprintf@plt+0x1d98>
   13660:	ldr	r0, [r4, #460]	; 0x1cc
   13664:	b	135bc <sprintf@plt+0x1d34>
   13668:	ldr	r1, [pc, #36]	; 13694 <sprintf@plt+0x1e0c>
   1366c:	mov	r2, r0
   13670:	add	r1, pc, r1
   13674:	b	13684 <sprintf@plt+0x1dfc>
   13678:	ldr	r2, [r4, #4]
   1367c:	ldr	r1, [pc, #20]	; 13698 <sprintf@plt+0x1e10>
   13680:	add	r1, pc, r1
   13684:	mov	r0, #67	; 0x43
   13688:	bl	124f8 <sprintf@plt+0xc70>
   1368c:	mov	r0, #3
   13690:	bl	11870 <exit@plt>
   13694:	andeq	r5, r0, r2, lsl #24
   13698:	andeq	r5, r0, ip, lsr ip
   1369c:	andeq	r6, r1, r8, asr #23
   136a0:	muleq	r1, r0, fp
   136a4:	push	{fp, lr}
   136a8:	mov	fp, sp
   136ac:	bl	14800 <sprintf@plt+0x2f78>
   136b0:	ldr	r0, [pc, #168]	; 13760 <sprintf@plt+0x1ed8>
   136b4:	ldr	r0, [pc, r0]
   136b8:	ldr	r0, [r0]
   136bc:	cmp	r0, #1
   136c0:	blt	136d8 <sprintf@plt+0x1e50>
   136c4:	lsl	r2, r0, #2
   136c8:	ldr	r0, [pc, #148]	; 13764 <sprintf@plt+0x1edc>
   136cc:	mov	r1, #0
   136d0:	add	r0, pc, r0
   136d4:	bl	115d0 <memset@plt>
   136d8:	ldr	r0, [pc, #136]	; 13768 <sprintf@plt+0x1ee0>
   136dc:	ldr	r0, [pc, r0]
   136e0:	cmp	r0, #0
   136e4:	beq	136ec <sprintf@plt+0x1e64>
   136e8:	pop	{fp, pc}
   136ec:	ldr	r0, [pc, #120]	; 1376c <sprintf@plt+0x1ee4>
   136f0:	mov	r1, #2
   136f4:	mov	r2, #0
   136f8:	ldr	r0, [pc, r0]
   136fc:	ldrh	r0, [r0]
   13700:	ldr	r3, [pc, #104]	; 13770 <sprintf@plt+0x1ee8>
   13704:	add	r3, pc, r3
   13708:	bl	11558 <rb_socket@plt>
   1370c:	ldr	r1, [pc, #96]	; 13774 <sprintf@plt+0x1eec>
   13710:	cmp	r0, #0
   13714:	add	r1, pc, r1
   13718:	str	r0, [r1]
   1371c:	popeq	{fp, pc}
   13720:	ldr	r2, [pc, #80]	; 13778 <sprintf@plt+0x1ef0>
   13724:	mov	r1, #1
   13728:	mov	r3, #0
   1372c:	add	r2, pc, r2
   13730:	bl	11528 <rb_setselect@plt>
   13734:	ldr	r0, [pc, #64]	; 1377c <sprintf@plt+0x1ef4>
   13738:	ldr	r1, [pc, #64]	; 13780 <sprintf@plt+0x1ef8>
   1373c:	mov	r2, #0
   13740:	mov	r3, #1
   13744:	add	r0, pc, r0
   13748:	add	r1, pc, r1
   1374c:	bl	117ec <rb_event_add@plt>
   13750:	ldr	r1, [pc, #44]	; 13784 <sprintf@plt+0x1efc>
   13754:	add	r1, pc, r1
   13758:	str	r0, [r1]
   1375c:	pop	{fp, pc}
   13760:			; <UNDEFINED> instruction: 0x00016ab4
   13764:	andeq	fp, r1, r8, lsl r9
   13768:	andeq	fp, r1, r4, lsl #18
   1376c:	andeq	r6, r1, ip, ror sl
   13770:	andeq	r5, r0, fp, lsr #27
   13774:	andeq	fp, r1, ip, asr #17
   13778:			; <UNDEFINED> instruction: 0x000004b8
   1377c:	andeq	r5, r0, pc, ror sp
   13780:	ldrdeq	r0, [r0], -r8
   13784:	muleq	r1, r0, r8
   13788:	push	{r4, sl, fp, lr}
   1378c:	add	fp, sp, #8
   13790:	ldr	r0, [pc, #204]	; 13864 <sprintf@plt+0x1fdc>
   13794:	ldr	r0, [pc, r0]
   13798:	bl	116d8 <rb_close@plt>
   1379c:	ldr	r4, [pc, #196]	; 13868 <sprintf@plt+0x1fe0>
   137a0:	mov	r0, #0
   137a4:	add	r4, pc, r4
   137a8:	str	r0, [r4]
   137ac:	ldr	r0, [pc, #184]	; 1386c <sprintf@plt+0x1fe4>
   137b0:	ldr	r0, [pc, r0]
   137b4:	bl	1151c <rb_event_delete@plt>
   137b8:	bl	14800 <sprintf@plt+0x2f78>
   137bc:	ldr	r0, [pc, #172]	; 13870 <sprintf@plt+0x1fe8>
   137c0:	ldr	r0, [pc, r0]
   137c4:	ldr	r0, [r0]
   137c8:	cmp	r0, #1
   137cc:	blt	137e4 <sprintf@plt+0x1f5c>
   137d0:	lsl	r2, r0, #2
   137d4:	ldr	r0, [pc, #152]	; 13874 <sprintf@plt+0x1fec>
   137d8:	mov	r1, #0
   137dc:	add	r0, pc, r0
   137e0:	bl	115d0 <memset@plt>
   137e4:	ldr	r0, [pc, #140]	; 13878 <sprintf@plt+0x1ff0>
   137e8:	ldr	r0, [pc, r0]
   137ec:	cmp	r0, #0
   137f0:	beq	137f8 <sprintf@plt+0x1f70>
   137f4:	pop	{r4, sl, fp, pc}
   137f8:	ldr	r0, [pc, #124]	; 1387c <sprintf@plt+0x1ff4>
   137fc:	mov	r1, #2
   13800:	mov	r2, #0
   13804:	ldr	r0, [pc, r0]
   13808:	ldrh	r0, [r0]
   1380c:	ldr	r3, [pc, #108]	; 13880 <sprintf@plt+0x1ff8>
   13810:	add	r3, pc, r3
   13814:	bl	11558 <rb_socket@plt>
   13818:	cmp	r0, #0
   1381c:	str	r0, [r4]
   13820:	popeq	{r4, sl, fp, pc}
   13824:	ldr	r2, [pc, #88]	; 13884 <sprintf@plt+0x1ffc>
   13828:	mov	r1, #1
   1382c:	mov	r3, #0
   13830:	add	r2, pc, r2
   13834:	bl	11528 <rb_setselect@plt>
   13838:	ldr	r0, [pc, #72]	; 13888 <sprintf@plt+0x2000>
   1383c:	ldr	r1, [pc, #72]	; 1388c <sprintf@plt+0x2004>
   13840:	mov	r2, #0
   13844:	mov	r3, #1
   13848:	add	r0, pc, r0
   1384c:	add	r1, pc, r1
   13850:	bl	117ec <rb_event_add@plt>
   13854:	ldr	r1, [pc, #52]	; 13890 <sprintf@plt+0x2008>
   13858:	add	r1, pc, r1
   1385c:	str	r0, [r1]
   13860:	pop	{r4, sl, fp, pc}
   13864:	andeq	fp, r1, ip, asr #16
   13868:	andeq	fp, r1, ip, lsr r8
   1386c:	andeq	fp, r1, r4, lsr r8
   13870:	andeq	r6, r1, r8, lsr #19
   13874:	andeq	fp, r1, ip, lsl #16
   13878:	strdeq	fp, [r1], -r8
   1387c:	andeq	r6, r1, r0, ror r9
   13880:	muleq	r0, pc, ip	; <UNPREDICTABLE>
   13884:			; <UNDEFINED> instruction: 0x000003b4
   13888:	andeq	r5, r0, fp, ror ip
   1388c:	ldrdeq	r0, [r0], -r4
   13890:	andeq	fp, r1, ip, lsl #15
   13894:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13898:	add	fp, sp, #24
   1389c:	sub	sp, sp, #256	; 0x100
   138a0:	cmp	r0, #0
   138a4:	beq	1394c <sprintf@plt+0x20c4>
   138a8:	mov	r6, sp
   138ac:	mov	r4, r2
   138b0:	mov	r5, r1
   138b4:	mov	r1, r0
   138b8:	mov	r2, #256	; 0x100
   138bc:	mov	r0, r6
   138c0:	bl	11618 <rb_strlcpy@plt>
   138c4:	mov	r0, r6
   138c8:	mov	r1, #46	; 0x2e
   138cc:	bl	1157c <strchr@plt>
   138d0:	cmp	r0, #0
   138d4:	bne	13930 <sprintf@plt+0x20a8>
   138d8:	ldr	r0, [pc, #140]	; 1396c <sprintf@plt+0x20e4>
   138dc:	ldr	r0, [pc, r0]
   138e0:	ldrb	r0, [r0]
   138e4:	cmp	r0, #0
   138e8:	beq	13930 <sprintf@plt+0x20a8>
   138ec:	mov	r6, sp
   138f0:	mov	r0, r6
   138f4:	bl	11690 <strlen@plt>
   138f8:	mov	r7, r0
   138fc:	ldr	r0, [pc, #108]	; 13970 <sprintf@plt+0x20e8>
   13900:	ldr	r0, [pc, r0]
   13904:	bl	11690 <strlen@plt>
   13908:	add	r0, r7, r0
   1390c:	add	r0, r0, #2
   13910:	cmp	r0, #254	; 0xfe
   13914:	bhi	13930 <sprintf@plt+0x20a8>
   13918:	add	r0, r6, r7
   1391c:	mov	r1, #46	; 0x2e
   13920:	strb	r1, [r0], #1
   13924:	ldr	r1, [pc, #72]	; 13974 <sprintf@plt+0x20ec>
   13928:	ldr	r1, [pc, r1]
   1392c:	bl	116fc <strcpy@plt>
   13930:	mov	r1, sp
   13934:	mov	r0, r5
   13938:	mov	r2, #0
   1393c:	mov	r3, r4
   13940:	bl	14464 <sprintf@plt+0x2bdc>
   13944:	sub	sp, fp, #24
   13948:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1394c:	ldr	r0, [pc, #36]	; 13978 <sprintf@plt+0x20f0>
   13950:	ldr	r1, [pc, #36]	; 1397c <sprintf@plt+0x20f4>
   13954:	ldr	r3, [pc, #36]	; 13980 <sprintf@plt+0x20f8>
   13958:	mov	r2, #412	; 0x19c
   1395c:	add	r0, pc, r0
   13960:	add	r1, pc, r1
   13964:	add	r3, pc, r3
   13968:	bl	11600 <__assert_fail@plt>
   1396c:	muleq	r1, r0, r8
   13970:	andeq	r6, r1, ip, ror #16
   13974:	andeq	r6, r1, r4, asr #16
   13978:	andeq	r5, r0, ip, ror sl
   1397c:	andeq	r5, r0, r2, lsl #21
   13980:	andeq	r5, r0, r4, lsl #21
   13984:	push	{r4, r5, fp, lr}
   13988:	add	fp, sp, #8
   1398c:	mov	r5, r0
   13990:	mov	r0, r1
   13994:	bl	144d0 <sprintf@plt+0x2c48>
   13998:	mov	r4, r0
   1399c:	add	r0, r0, #292	; 0x124
   139a0:	mov	r1, r5
   139a4:	mov	r2, #128	; 0x80
   139a8:	bl	116b4 <memcpy@plt>
   139ac:	mov	r0, #1
   139b0:	mov	r1, #256	; 0x100
   139b4:	bl	115a0 <calloc@plt>
   139b8:	cmp	r0, #0
   139bc:	beq	139ec <sprintf@plt+0x2164>
   139c0:	str	r0, [r4, #420]	; 0x1a4
   139c4:	add	r0, r4, #21
   139c8:	mov	r1, #256	; 0x100
   139cc:	mov	r2, r5
   139d0:	mov	r3, #0
   139d4:	bl	139f0 <sprintf@plt+0x2168>
   139d8:	mov	r0, #12
   139dc:	strb	r0, [r4, #20]
   139e0:	mov	r0, r4
   139e4:	pop	{r4, r5, fp, lr}
   139e8:	b	145cc <sprintf@plt+0x2d44>
   139ec:	bl	11750 <rb_outofmemory@plt>
   139f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139f4:	add	fp, sp, #28
   139f8:	sub	sp, sp, #172	; 0xac
   139fc:	ldrh	r7, [r2]
   13a00:	cmp	r7, #10
   13a04:	beq	13a40 <sprintf@plt+0x21b8>
   13a08:	cmp	r7, #2
   13a0c:	bne	13bd4 <sprintf@plt+0x234c>
   13a10:	ldr	r7, [pc, #452]	; 13bdc <sprintf@plt+0x2354>
   13a14:	ldrb	r4, [r2, #6]
   13a18:	cmp	r3, #0
   13a1c:	ldrb	r6, [r2, #4]
   13a20:	ldrb	r5, [r2, #5]
   13a24:	add	r7, pc, r7
   13a28:	movne	r7, r3
   13a2c:	ldrb	r3, [r2, #7]
   13a30:	stm	sp, {r4, r5, r6, r7}
   13a34:	ldr	r2, [pc, #420]	; 13be0 <sprintf@plt+0x2358>
   13a38:	add	r2, pc, r2
   13a3c:	b	13bd0 <sprintf@plt+0x2348>
   13a40:	ldr	r5, [pc, #412]	; 13be4 <sprintf@plt+0x235c>
   13a44:	cmp	r3, #0
   13a48:	ldrb	r8, [r2, #8]
   13a4c:	ldrb	r6, [r2, #15]
   13a50:	ldrb	ip, [r2, #13]
   13a54:	ldrb	lr, [r2, #12]
   13a58:	ldrb	r9, [r2, #9]
   13a5c:	ldrb	sl, [r2, #10]
   13a60:	str	r0, [fp, #-52]	; 0xffffffcc
   13a64:	str	r1, [fp, #-44]	; 0xffffffd4
   13a68:	add	r5, pc, r5
   13a6c:	movne	r5, r3
   13a70:	ldrb	r3, [r2, #23]
   13a74:	lsr	r4, r8, #4
   13a78:	lsr	r0, sl, #4
   13a7c:	lsr	r1, r9, #4
   13a80:	and	r8, r8, #15
   13a84:	and	r9, r9, #15
   13a88:	and	sl, sl, #15
   13a8c:	str	r3, [fp, #-32]	; 0xffffffe0
   13a90:	ldrb	r3, [r2, #22]
   13a94:	str	r3, [fp, #-36]	; 0xffffffdc
   13a98:	ldrb	r3, [r2, #21]
   13a9c:	str	r3, [fp, #-40]	; 0xffffffd8
   13aa0:	ldrb	r3, [r2, #20]
   13aa4:	str	r3, [fp, #-48]	; 0xffffffd0
   13aa8:	ldrb	r3, [r2, #19]
   13aac:	str	r3, [fp, #-56]	; 0xffffffc8
   13ab0:	ldrb	r3, [r2, #18]
   13ab4:	str	r3, [fp, #-60]	; 0xffffffc4
   13ab8:	ldrb	r3, [r2, #17]
   13abc:	str	r3, [fp, #-64]	; 0xffffffc0
   13ac0:	ldrb	r3, [r2, #16]
   13ac4:	str	r3, [fp, #-68]	; 0xffffffbc
   13ac8:	ldrb	r3, [r2, #14]
   13acc:	ldrb	r2, [r2, #11]
   13ad0:	str	r0, [sp, #104]	; 0x68
   13ad4:	str	r4, [sp, #120]	; 0x78
   13ad8:	str	r5, [sp, #124]	; 0x7c
   13adc:	mov	r0, r6
   13ae0:	lsr	r6, r6, #4
   13ae4:	and	r5, ip, #15
   13ae8:	str	r1, [sp, #112]	; 0x70
   13aec:	str	r8, [sp, #116]	; 0x74
   13af0:	str	sl, [sp, #100]	; 0x64
   13af4:	str	r9, [sp, #108]	; 0x6c
   13af8:	lsr	r1, lr, #4
   13afc:	str	r6, [sp, #64]	; 0x40
   13b00:	lsr	r7, r2, #4
   13b04:	lsr	r4, r3, #4
   13b08:	and	r3, r3, #15
   13b0c:	and	r8, r2, #15
   13b10:	and	r2, lr, #15
   13b14:	add	lr, sp, #32
   13b18:	str	r7, [sp, #96]	; 0x60
   13b1c:	lsr	r7, ip, #4
   13b20:	add	ip, sp, #68	; 0x44
   13b24:	stm	ip, {r3, r4, r5, r7}
   13b28:	and	ip, r0, #15
   13b2c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b30:	str	r2, [sp, #84]	; 0x54
   13b34:	str	r1, [sp, #88]	; 0x58
   13b38:	str	r8, [sp, #92]	; 0x5c
   13b3c:	lsr	r1, r0, #4
   13b40:	and	r2, r0, #15
   13b44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b48:	lsr	r3, r0, #4
   13b4c:	and	r7, r0, #15
   13b50:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13b54:	lsr	r6, r0, #4
   13b58:	and	r5, r0, #15
   13b5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13b60:	lsr	r4, r0, #4
   13b64:	stm	lr, {r4, r5, r6, r7}
   13b68:	str	ip, [sp, #60]	; 0x3c
   13b6c:	and	ip, r0, #15
   13b70:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b74:	str	r2, [sp, #52]	; 0x34
   13b78:	str	r1, [sp, #56]	; 0x38
   13b7c:	str	r3, [sp, #48]	; 0x30
   13b80:	lsr	r1, r0, #4
   13b84:	and	r2, r0, #15
   13b88:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13b8c:	lsr	r3, r0, #4
   13b90:	and	r7, r0, #15
   13b94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13b98:	lsr	r6, r0, #4
   13b9c:	and	r5, r0, #15
   13ba0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13ba4:	lsr	r4, r0, #4
   13ba8:	stm	sp, {r4, r5, r6, r7}
   13bac:	str	r3, [sp, #16]
   13bb0:	str	r2, [sp, #20]
   13bb4:	str	r1, [sp, #24]
   13bb8:	str	ip, [sp, #28]
   13bbc:	and	r3, r0, #15
   13bc0:	ldr	r2, [pc, #32]	; 13be8 <sprintf@plt+0x2360>
   13bc4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13bc8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13bcc:	add	r2, pc, r2
   13bd0:	bl	11810 <snprintf@plt>
   13bd4:	sub	sp, fp, #28
   13bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bdc:	andeq	r5, r0, r2, lsl sl
   13be0:	andeq	r5, r0, pc, ror #19
   13be4:	andeq	r5, r0, lr, lsr sl
   13be8:	andeq	r5, r0, r7, ror r8
   13bec:	push	{r4, sl, fp, lr}
   13bf0:	add	fp, sp, #8
   13bf4:	mov	r4, r0
   13bf8:	mov	r0, r4
   13bfc:	bl	13ca8 <sprintf@plt+0x2420>
   13c00:	cmp	r0, #0
   13c04:	bne	13bf8 <sprintf@plt+0x2370>
   13c08:	ldr	r2, [pc, #20]	; 13c24 <sprintf@plt+0x239c>
   13c0c:	mov	r0, r4
   13c10:	mov	r1, #1
   13c14:	mov	r3, #0
   13c18:	add	r2, pc, r2
   13c1c:	pop	{r4, sl, fp, lr}
   13c20:	b	11528 <rb_setselect@plt>
   13c24:			; <UNDEFINED> instruction: 0xffffffcc
   13c28:	push	{r4, r5, r6, sl, fp, lr}
   13c2c:	add	fp, sp, #16
   13c30:	bl	1169c <rb_current_time@plt>
   13c34:	ldr	r5, [pc, #100]	; 13ca0 <sprintf@plt+0x2418>
   13c38:	ldr	r5, [pc, r5]
   13c3c:	cmp	r5, #0
   13c40:	beq	13c9c <sprintf@plt+0x2414>
   13c44:	ldr	r6, [pc, #88]	; 13ca4 <sprintf@plt+0x241c>
   13c48:	mov	r4, r0
   13c4c:	add	r6, pc, r6
   13c50:	b	13c5c <sprintf@plt+0x23d4>
   13c54:	cmp	r5, #0
   13c58:	beq	13c9c <sprintf@plt+0x2414>
   13c5c:	ldr	r0, [r5]
   13c60:	ldr	r5, [r5, #8]
   13c64:	ldr	r2, [r0, #280]	; 0x118
   13c68:	ldr	r1, [r0, #284]	; 0x11c
   13c6c:	add	r2, r1, r2
   13c70:	cmp	r2, r4
   13c74:	bgt	13c54 <sprintf@plt+0x23cc>
   13c78:	ldr	r2, [r0, #288]	; 0x120
   13c7c:	lsl	r1, r1, #1
   13c80:	ldr	r3, [r6, r2, lsl #2]
   13c84:	add	r3, r3, #1
   13c88:	str	r3, [r6, r2, lsl #2]
   13c8c:	str	r4, [r0, #280]	; 0x118
   13c90:	str	r1, [r0, #284]	; 0x11c
   13c94:	bl	14370 <sprintf@plt+0x2ae8>
   13c98:	b	13c54 <sprintf@plt+0x23cc>
   13c9c:	pop	{r4, r5, r6, sl, fp, pc}
   13ca0:	ldrdeq	fp, [r1], -r8
   13ca4:	muleq	r1, ip, r3
   13ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cac:	add	fp, sp, #28
   13cb0:	sub	sp, sp, #524	; 0x20c
   13cb4:	sub	sp, sp, #1024	; 0x400
   13cb8:	mov	r1, #128	; 0x80
   13cbc:	str	r1, [sp, #148]	; 0x94
   13cc0:	bl	11534 <rb_get_fd@plt>
   13cc4:	add	r1, sp, #148	; 0x94
   13cc8:	add	r4, sp, #20
   13ccc:	movw	r2, #1036	; 0x40c
   13cd0:	mov	r3, #0
   13cd4:	mov	sl, #0
   13cd8:	str	r1, [sp, #4]
   13cdc:	add	r1, sp, #152	; 0x98
   13ce0:	str	r4, [sp]
   13ce4:	bl	11834 <recvfrom@plt>
   13ce8:	mov	r6, r0
   13cec:	add	r0, r0, #1
   13cf0:	cmp	r0, #2
   13cf4:	bcc	1430c <sprintf@plt+0x2a84>
   13cf8:	mov	sl, #1
   13cfc:	cmp	r6, #13
   13d00:	blt	1430c <sprintf@plt+0x2a84>
   13d04:	ldr	r0, [sp, #160]	; 0xa0
   13d08:	ldr	r3, [sp, #156]	; 0x9c
   13d0c:	lsr	r2, r0, #16
   13d10:	rev	r1, r0
   13d14:	rev	r2, r2
   13d18:	orr	r1, r2, r1, lsr #16
   13d1c:	str	r1, [sp, #160]	; 0xa0
   13d20:	lsr	r1, r3, #16
   13d24:	orr	r0, r1, r0, lsl #16
   13d28:	rev	r1, r3
   13d2c:	rev	r0, r0
   13d30:	pkhtb	r0, r0, r1, asr #16
   13d34:	str	r0, [sp, #156]	; 0x9c
   13d38:	ldr	r0, [pc, #1528]	; 14338 <sprintf@plt+0x2ab0>
   13d3c:	ldr	r0, [pc, r0]
   13d40:	cmp	r0, #0
   13d44:	beq	1430c <sprintf@plt+0x2a84>
   13d48:	ldrh	r1, [sp, #152]	; 0x98
   13d4c:	ldr	r5, [r0]
   13d50:	ldr	r2, [r5, #12]
   13d54:	cmp	r2, r1
   13d58:	beq	13d6c <sprintf@plt+0x24e4>
   13d5c:	ldr	r0, [r0, #8]
   13d60:	cmp	r0, #0
   13d64:	bne	13d4c <sprintf@plt+0x24c4>
   13d68:	b	1430c <sprintf@plt+0x2a84>
   13d6c:	cmp	r5, #0
   13d70:	beq	1430c <sprintf@plt+0x2a84>
   13d74:	str	r3, [sp, #16]
   13d78:	ldr	r0, [pc, #1468]	; 1433c <sprintf@plt+0x2ab4>
   13d7c:	ldr	r0, [pc, r0]
   13d80:	ldr	r8, [r0]
   13d84:	cmp	r8, #1
   13d88:	blt	13e58 <sprintf@plt+0x25d0>
   13d8c:	add	r0, r4, #8
   13d90:	str	r0, [sp, #12]
   13d94:	ldr	r0, [pc, #1444]	; 14340 <sprintf@plt+0x2ab8>
   13d98:	ldr	r0, [pc, r0]
   13d9c:	ldrh	r7, [sp, #22]
   13da0:	ldrh	r9, [sp, #20]
   13da4:	add	sl, r0, #4
   13da8:	ldr	r0, [sp, #24]
   13dac:	str	r0, [sp, #8]
   13db0:	b	13dcc <sprintf@plt+0x2544>
   13db4:	cmp	r0, #10
   13db8:	cmpeq	r9, #10
   13dbc:	beq	13e08 <sprintf@plt+0x2580>
   13dc0:	subs	r8, r8, #1
   13dc4:	add	sl, sl, #128	; 0x80
   13dc8:	beq	13e58 <sprintf@plt+0x25d0>
   13dcc:	ldrh	r0, [sl, #-4]
   13dd0:	cmp	r0, #2
   13dd4:	bne	13db4 <sprintf@plt+0x252c>
   13dd8:	cmp	r9, #2
   13ddc:	bne	13dc0 <sprintf@plt+0x2538>
   13de0:	ldrh	r0, [sl, #-2]
   13de4:	cmp	r0, r7
   13de8:	bne	13dc0 <sprintf@plt+0x2538>
   13dec:	ldr	r0, [sl]
   13df0:	mov	r2, #1
   13df4:	cmp	r0, #0
   13df8:	ldrne	r1, [sp, #8]
   13dfc:	cmpne	r0, r1
   13e00:	beq	13e5c <sprintf@plt+0x25d4>
   13e04:	b	13dc0 <sprintf@plt+0x2538>
   13e08:	ldrh	r0, [sl, #-2]
   13e0c:	cmp	r0, r7
   13e10:	bne	13dc0 <sprintf@plt+0x2538>
   13e14:	ldr	r1, [sp, #12]
   13e18:	add	r4, sl, #4
   13e1c:	mov	r2, #16
   13e20:	mov	r0, r4
   13e24:	bl	116cc <bcmp@plt>
   13e28:	mov	r2, #1
   13e2c:	cmp	r0, #0
   13e30:	beq	13e5c <sprintf@plt+0x25d4>
   13e34:	ldr	r1, [pc, #1288]	; 14344 <sprintf@plt+0x2abc>
   13e38:	mov	r0, r4
   13e3c:	mov	r2, #16
   13e40:	ldr	r1, [pc, r1]
   13e44:	bl	116cc <bcmp@plt>
   13e48:	mov	r2, #1
   13e4c:	cmp	r0, #0
   13e50:	bne	13dc0 <sprintf@plt+0x2538>
   13e54:	b	13e5c <sprintf@plt+0x25d4>
   13e58:	mov	r2, #0
   13e5c:	ldr	r0, [r5, #288]	; 0x120
   13e60:	cmp	r2, r0
   13e64:	beq	13e7c <sprintf@plt+0x25f4>
   13e68:	ldr	r0, [pc, #1240]	; 14348 <sprintf@plt+0x2ac0>
   13e6c:	add	r0, pc, r0
   13e70:	ldr	r1, [r0, r2, lsl #2]
   13e74:	add	r1, r1, #3
   13e78:	str	r1, [r0, r2, lsl #2]
   13e7c:	ldr	r0, [sp, #16]
   13e80:	mov	sl, #1
   13e84:	str	r2, [sp, #12]
   13e88:	uxth	r0, r0
   13e8c:	cmp	r0, #256	; 0x100
   13e90:	add	r0, sp, #152	; 0x98
   13e94:	bne	1430c <sprintf@plt+0x2a84>
   13e98:	add	r4, r0, r6
   13e9c:	mov	r1, #256	; 0x100
   13ea0:	add	r6, r0, #12
   13ea4:	sub	lr, fp, #256	; 0x100
   13ea8:	str	r1, [sp]
   13eac:	sub	r3, lr, #131	; 0x83
   13eb0:	mov	r1, r4
   13eb4:	mov	r2, r6
   13eb8:	bl	14b24 <sprintf@plt+0x329c>
   13ebc:	cmp	r0, #0
   13ec0:	ble	1430c <sprintf@plt+0x2a84>
   13ec4:	sub	lr, fp, #256	; 0x100
   13ec8:	add	r1, r5, #21
   13ecc:	sub	r0, lr, #131	; 0x83
   13ed0:	bl	11660 <rb_strcasecmp@plt>
   13ed4:	cmp	r0, #0
   13ed8:	bne	1430c <sprintf@plt+0x2a84>
   13edc:	ldr	r1, [sp, #152]	; 0x98
   13ee0:	tst	r1, #251658240	; 0xf000000
   13ee4:	bne	13f44 <sprintf@plt+0x26bc>
   13ee8:	ldr	r2, [sp, #156]	; 0x9c
   13eec:	mov	r0, r2
   13ef0:	bfc	r0, #0, #16
   13ef4:	cmp	r0, #0
   13ef8:	beq	13f44 <sprintf@plt+0x26bc>
   13efc:	movw	r8, #65535	; 0xffff
   13f00:	tst	r2, r8
   13f04:	beq	13f80 <sprintf@plt+0x26f8>
   13f08:	mov	r0, r6
   13f0c:	mov	r1, r4
   13f10:	bl	150f4 <sprintf@plt+0x386c>
   13f14:	cmp	r0, #0
   13f18:	bmi	142ec <sprintf@plt+0x2a64>
   13f1c:	add	r3, sp, #152	; 0x98
   13f20:	add	r0, r0, r6
   13f24:	ldm	r3, {r1, r2, r3}
   13f28:	sub	r7, r2, #1
   13f2c:	add	r6, r0, #4
   13f30:	pkhbt	r2, r7, r2
   13f34:	tst	r7, r8
   13f38:	str	r2, [sp, #156]	; 0x9c
   13f3c:	bne	13f08 <sprintf@plt+0x2680>
   13f40:	b	13f84 <sprintf@plt+0x26fc>
   13f44:	ubfx	r0, r1, #24, #4
   13f48:	ldr	r3, [sp, #12]
   13f4c:	sub	r1, r0, #4
   13f50:	cmp	r1, #2
   13f54:	bcc	13f68 <sprintf@plt+0x26e0>
   13f58:	cmp	r0, #3
   13f5c:	beq	14118 <sprintf@plt+0x2890>
   13f60:	cmp	r0, #2
   13f64:	bne	14134 <sprintf@plt+0x28ac>
   13f68:	ldr	r0, [pc, #988]	; 1434c <sprintf@plt+0x2ac4>
   13f6c:	add	r0, pc, r0
   13f70:	ldr	r1, [r0, r3, lsl #2]
   13f74:	add	r1, r1, #1
   13f78:	str	r1, [r0, r3, lsl #2]
   13f7c:	b	14304 <sprintf@plt+0x2a7c>
   13f80:	ldr	r3, [sp, #160]	; 0xa0
   13f84:	cmp	r6, r4
   13f88:	bcs	1405c <sprintf@plt+0x27d4>
   13f8c:	lsr	r0, r2, #16
   13f90:	orr	r0, r0, r3, lsl #16
   13f94:	uxth	r7, r0
   13f98:	cmp	r7, #0
   13f9c:	beq	1405c <sprintf@plt+0x27d4>
   13fa0:	movw	r8, #355	; 0x163
   13fa4:	sub	r0, r0, #1
   13fa8:	sub	lr, fp, #256	; 0x100
   13fac:	str	r1, [sp, #152]	; 0x98
   13fb0:	str	r3, [sp, #160]	; 0xa0
   13fb4:	mov	r1, r4
   13fb8:	str	r8, [sp]
   13fbc:	pkhbt	r0, r2, r0, lsl #16
   13fc0:	mov	r2, r6
   13fc4:	sub	r3, lr, #131	; 0x83
   13fc8:	str	r0, [sp, #156]	; 0x9c
   13fcc:	add	r0, sp, #152	; 0x98
   13fd0:	bl	14b24 <sprintf@plt+0x329c>
   13fd4:	cmp	r0, #1
   13fd8:	blt	142ec <sprintf@plt+0x2a64>
   13fdc:	add	r9, r6, r0
   13fe0:	mov	r1, #0
   13fe4:	add	r6, r9, #10
   13fe8:	strb	r1, [fp, #-132]	; 0xffffff7c
   13fec:	cmp	r6, r4
   13ff0:	bcs	1405c <sprintf@plt+0x27d4>
   13ff4:	mov	r0, r9
   13ff8:	bl	1519c <sprintf@plt+0x3914>
   13ffc:	mov	r7, r0
   14000:	add	r0, r9, #2
   14004:	bl	1519c <sprintf@plt+0x3914>
   14008:	add	r0, r9, #4
   1400c:	bl	151ac <sprintf@plt+0x3924>
   14010:	str	r0, [r5, #16]
   14014:	add	r0, r9, #8
   14018:	bl	1519c <sprintf@plt+0x3914>
   1401c:	cmp	r7, #28
   14020:	beq	142ac <sprintf@plt+0x2a24>
   14024:	cmp	r7, #12
   14028:	beq	14260 <sprintf@plt+0x29d8>
   1402c:	cmp	r7, #1
   14030:	beq	142dc <sprintf@plt+0x2a54>
   14034:	add	r6, r6, r0
   14038:	cmp	r6, r4
   1403c:	bcs	1405c <sprintf@plt+0x27d4>
   14040:	add	r3, sp, #152	; 0x98
   14044:	ldm	r3, {r1, r2, r3}
   14048:	lsr	r0, r2, #16
   1404c:	orr	r0, r0, r3, lsl #16
   14050:	uxth	r7, r0
   14054:	cmp	r7, #0
   14058:	bne	13fa4 <sprintf@plt+0x271c>
   1405c:	ldrb	r0, [r5, #20]
   14060:	cmp	r0, #12
   14064:	bne	140b0 <sprintf@plt+0x2828>
   14068:	ldr	r1, [r5, #420]	; 0x1a4
   1406c:	cmp	r1, #0
   14070:	beq	142ec <sprintf@plt+0x2a64>
   14074:	mov	r0, #292	; 0x124
   14078:	mov	r3, #1
   1407c:	mov	r2, #0
   14080:	ldrh	r0, [r5, r0]
   14084:	cmp	r0, #10
   14088:	ldr	r0, [r5, #424]	; 0x1a8
   1408c:	movweq	r3, #28
   14090:	bl	14464 <sprintf@plt+0x2bdc>
   14094:	ldr	r0, [r5, #8]
   14098:	ldr	r1, [r5, #4]
   1409c:	cmp	r0, #0
   140a0:	beq	141e8 <sprintf@plt+0x2960>
   140a4:	str	r1, [r0, #4]
   140a8:	ldr	r1, [r5, #4]
   140ac:	b	141f4 <sprintf@plt+0x296c>
   140b0:	mov	r0, #1
   140b4:	mov	r1, #132	; 0x84
   140b8:	bl	115a0 <calloc@plt>
   140bc:	cmp	r0, #0
   140c0:	beq	14334 <sprintf@plt+0x2aac>
   140c4:	ldr	r1, [r5, #420]	; 0x1a4
   140c8:	mov	r6, r0
   140cc:	mov	r2, #128	; 0x80
   140d0:	str	r1, [r0], #4
   140d4:	add	r1, r5, #292	; 0x124
   140d8:	bl	116b4 <memcpy@plt>
   140dc:	ldr	r1, [r5, #424]	; 0x1a8
   140e0:	ldm	r1, {r0, r2}
   140e4:	mov	r1, r6
   140e8:	blx	r2
   140ec:	mov	r0, r6
   140f0:	bl	1163c <free@plt>
   140f4:	ldr	r1, [r5, #8]
   140f8:	ldr	r2, [r5, #4]
   140fc:	ldr	r0, [pc, #608]	; 14364 <sprintf@plt+0x2adc>
   14100:	cmp	r1, #0
   14104:	add	r0, pc, r0
   14108:	beq	141b8 <sprintf@plt+0x2930>
   1410c:	str	r2, [r1, #4]
   14110:	ldr	r2, [r5, #4]
   14114:	b	141bc <sprintf@plt+0x2934>
   14118:	ldr	r0, [pc, #560]	; 14350 <sprintf@plt+0x2ac8>
   1411c:	add	r0, pc, r0
   14120:	ldr	r1, [r0, r3, lsl #2]
   14124:	asr	r2, r1, #31
   14128:	add	r1, r1, r2, lsr #30
   1412c:	asr	r1, r1, #2
   14130:	str	r1, [r0, r3, lsl #2]
   14134:	ldr	r1, [r5, #424]	; 0x1a8
   14138:	ldm	r1, {r0, r2}
   1413c:	mov	r1, #0
   14140:	blx	r2
   14144:	ldr	r0, [r5, #8]
   14148:	ldr	r1, [r5, #4]
   1414c:	cmp	r0, #0
   14150:	beq	14160 <sprintf@plt+0x28d8>
   14154:	str	r1, [r0, #4]
   14158:	ldr	r1, [r5, #4]
   1415c:	b	1416c <sprintf@plt+0x28e4>
   14160:	ldr	r2, [pc, #492]	; 14354 <sprintf@plt+0x2acc>
   14164:	add	r2, pc, r2
   14168:	str	r1, [r2, #4]
   1416c:	ldr	r2, [pc, #484]	; 14358 <sprintf@plt+0x2ad0>
   14170:	cmp	r1, #0
   14174:	add	r2, pc, r2
   14178:	mov	r3, r2
   1417c:	addne	r3, r1, #8
   14180:	str	r0, [r3]
   14184:	mov	r0, #0
   14188:	str	r0, [r5, #4]
   1418c:	str	r0, [r5, #8]
   14190:	ldr	r0, [r2, #8]
   14194:	sub	r0, r0, #1
   14198:	str	r0, [r2, #8]
   1419c:	ldr	r0, [r5, #420]	; 0x1a4
   141a0:	cmp	r0, #0
   141a4:	beq	141ac <sprintf@plt+0x2924>
   141a8:	bl	1163c <free@plt>
   141ac:	mov	r0, r5
   141b0:	bl	1163c <free@plt>
   141b4:	b	1430c <sprintf@plt+0x2a84>
   141b8:	str	r2, [r0, #4]
   141bc:	cmp	r2, #0
   141c0:	mov	r3, r0
   141c4:	addne	r3, r2, #8
   141c8:	str	r1, [r3]
   141cc:	mov	r1, #0
   141d0:	str	r1, [r5, #4]
   141d4:	str	r1, [r5, #8]
   141d8:	ldr	r1, [r0, #8]
   141dc:	sub	r1, r1, #1
   141e0:	str	r1, [r0, #8]
   141e4:	b	14224 <sprintf@plt+0x299c>
   141e8:	ldr	r2, [pc, #364]	; 1435c <sprintf@plt+0x2ad4>
   141ec:	add	r2, pc, r2
   141f0:	str	r1, [r2, #4]
   141f4:	ldr	r2, [pc, #356]	; 14360 <sprintf@plt+0x2ad8>
   141f8:	cmp	r1, #0
   141fc:	add	r2, pc, r2
   14200:	mov	r3, r2
   14204:	addne	r3, r1, #8
   14208:	str	r0, [r3]
   1420c:	mov	r0, #0
   14210:	str	r0, [r5, #4]
   14214:	str	r0, [r5, #8]
   14218:	ldr	r0, [r2, #8]
   1421c:	sub	r0, r0, #1
   14220:	str	r0, [r2, #8]
   14224:	ldr	r0, [r5, #420]	; 0x1a4
   14228:	cmp	r0, #0
   1422c:	beq	14234 <sprintf@plt+0x29ac>
   14230:	bl	1163c <free@plt>
   14234:	mov	r0, r5
   14238:	bl	1163c <free@plt>
   1423c:	ldr	r0, [pc, #292]	; 14368 <sprintf@plt+0x2ae0>
   14240:	ldr	r3, [sp, #12]
   14244:	add	r0, pc, r0
   14248:	ldr	r1, [r0, r3, lsl #2]
   1424c:	asr	r2, r1, #31
   14250:	add	r1, r1, r2, lsr #30
   14254:	asr	r1, r1, #2
   14258:	str	r1, [r0, r3, lsl #2]
   1425c:	b	1430c <sprintf@plt+0x2a84>
   14260:	ldrb	r0, [r5, #20]
   14264:	cmp	r0, #12
   14268:	bne	142ec <sprintf@plt+0x2a64>
   1426c:	movw	r0, #355	; 0x163
   14270:	sub	lr, fp, #256	; 0x100
   14274:	mov	r1, r4
   14278:	mov	r2, r6
   1427c:	str	r0, [sp]
   14280:	add	r0, sp, #152	; 0x98
   14284:	sub	r3, lr, #131	; 0x83
   14288:	bl	14b24 <sprintf@plt+0x329c>
   1428c:	cmp	r0, #1
   14290:	blt	142ec <sprintf@plt+0x2a64>
   14294:	ldr	r0, [r5, #420]	; 0x1a4
   14298:	sub	lr, fp, #256	; 0x100
   1429c:	mov	r2, #256	; 0x100
   142a0:	sub	r1, lr, #131	; 0x83
   142a4:	bl	11618 <rb_strlcpy@plt>
   142a8:	b	1405c <sprintf@plt+0x27d4>
   142ac:	cmp	r0, #16
   142b0:	ldrbeq	r0, [r5, #20]
   142b4:	cmpeq	r0, #28
   142b8:	bne	142ec <sprintf@plt+0x2a64>
   142bc:	mov	r0, #292	; 0x124
   142c0:	mov	r1, #10
   142c4:	mov	r2, r5
   142c8:	strh	r1, [r2, r0]!
   142cc:	vld1.8	{d16-d17}, [r6]
   142d0:	add	r0, r2, #8
   142d4:	vst1.8	{d16-d17}, [r0]
   142d8:	b	1405c <sprintf@plt+0x27d4>
   142dc:	cmp	r0, #4
   142e0:	ldrbeq	r0, [r5, #20]
   142e4:	cmpeq	r0, #1
   142e8:	beq	14318 <sprintf@plt+0x2a90>
   142ec:	ldr	r0, [pc, #120]	; 1436c <sprintf@plt+0x2ae4>
   142f0:	ldr	r2, [sp, #12]
   142f4:	add	r0, pc, r0
   142f8:	ldr	r1, [r0, r2, lsl #2]
   142fc:	add	r1, r1, #1
   14300:	str	r1, [r0, r2, lsl #2]
   14304:	mov	r0, r5
   14308:	bl	14370 <sprintf@plt+0x2ae8>
   1430c:	mov	r0, sl
   14310:	sub	sp, fp, #28
   14314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14318:	mov	r0, #292	; 0x124
   1431c:	mov	r1, #2
   14320:	mov	r2, r5
   14324:	strh	r1, [r2, r0]!
   14328:	ldr	r0, [r6]
   1432c:	str	r0, [r2, #4]
   14330:	b	1405c <sprintf@plt+0x27d4>
   14334:	bl	11750 <rb_outofmemory@plt>
   14338:	ldrdeq	fp, [r1], -r4
   1433c:	andeq	r6, r1, ip, ror #7
   14340:	ldrdeq	r6, [r1], -ip
   14344:	andeq	r6, r1, r0, lsr r3
   14348:	andeq	fp, r1, ip, ror r1
   1434c:	andeq	fp, r1, ip, ror r0
   14350:	andeq	sl, r1, ip, asr #29
   14354:	andeq	sl, r1, ip, lsr #29
   14358:	muleq	r1, ip, lr
   1435c:	andeq	sl, r1, r4, lsr #28
   14360:	andeq	sl, r1, r4, lsl lr
   14364:	andeq	sl, r1, ip, lsl #30
   14368:	andeq	sl, r1, r4, lsr #27
   1436c:	strdeq	sl, [r1], -r4
   14370:	push	{r4, sl, fp, lr}
   14374:	add	fp, sp, #8
   14378:	mov	r4, r0
   1437c:	ldrb	r0, [r0, #277]	; 0x115
   14380:	sub	r0, r0, #1
   14384:	tst	r0, #255	; 0xff
   14388:	strb	r0, [r4, #277]	; 0x115
   1438c:	beq	143b4 <sprintf@plt+0x2b2c>
   14390:	ldrb	r3, [r4, #20]
   14394:	cmp	r3, #1
   14398:	cmpne	r3, #28
   1439c:	bne	143e8 <sprintf@plt+0x2b60>
   143a0:	ldr	r1, [r4, #420]	; 0x1a4
   143a4:	mov	r0, #0
   143a8:	mov	r2, r4
   143ac:	pop	{r4, sl, fp, lr}
   143b0:	b	14464 <sprintf@plt+0x2bdc>
   143b4:	ldr	r1, [r4, #424]	; 0x1a8
   143b8:	ldm	r1, {r0, r2}
   143bc:	mov	r1, #0
   143c0:	blx	r2
   143c4:	ldr	r1, [r4, #8]
   143c8:	ldr	r2, [r4, #4]
   143cc:	ldr	r0, [pc, #140]	; 14460 <sprintf@plt+0x2bd8>
   143d0:	cmp	r1, #0
   143d4:	add	r0, pc, r0
   143d8:	beq	14418 <sprintf@plt+0x2b90>
   143dc:	str	r2, [r1, #4]
   143e0:	ldr	r2, [r4, #4]
   143e4:	b	1441c <sprintf@plt+0x2b94>
   143e8:	cmp	r3, #12
   143ec:	popne	{r4, sl, fp, pc}
   143f0:	add	r0, r4, #21
   143f4:	add	r2, r4, #292	; 0x124
   143f8:	mov	r1, #256	; 0x100
   143fc:	mov	r3, #0
   14400:	bl	139f0 <sprintf@plt+0x2168>
   14404:	mov	r0, #12
   14408:	strb	r0, [r4, #20]
   1440c:	mov	r0, r4
   14410:	pop	{r4, sl, fp, lr}
   14414:	b	145cc <sprintf@plt+0x2d44>
   14418:	str	r2, [r0, #4]
   1441c:	cmp	r2, #0
   14420:	mov	r3, r0
   14424:	addne	r3, r2, #8
   14428:	str	r1, [r3]
   1442c:	mov	r1, #0
   14430:	str	r1, [r4, #4]
   14434:	str	r1, [r4, #8]
   14438:	ldr	r1, [r0, #8]
   1443c:	sub	r1, r1, #1
   14440:	str	r1, [r0, #8]
   14444:	ldr	r0, [r4, #420]	; 0x1a4
   14448:	cmp	r0, #0
   1444c:	beq	14454 <sprintf@plt+0x2bcc>
   14450:	bl	1163c <free@plt>
   14454:	mov	r0, r4
   14458:	pop	{r4, sl, fp, lr}
   1445c:	b	1163c <free@plt>
   14460:	andeq	sl, r1, ip, lsr ip
   14464:	push	{r4, r5, r6, sl, fp, lr}
   14468:	add	fp, sp, #16
   1446c:	mov	r4, r3
   14470:	mov	r5, r2
   14474:	mov	r6, r1
   14478:	cmp	r2, #0
   1447c:	bne	144ac <sprintf@plt+0x2c24>
   14480:	bl	144d0 <sprintf@plt+0x2c48>
   14484:	mov	r5, r0
   14488:	mov	r0, r6
   1448c:	bl	11690 <strlen@plt>
   14490:	add	r0, r0, #1
   14494:	bl	11780 <malloc@plt>
   14498:	cmp	r0, #0
   1449c:	beq	144cc <sprintf@plt+0x2c44>
   144a0:	mov	r1, r6
   144a4:	bl	116fc <strcpy@plt>
   144a8:	str	r0, [r5, #420]	; 0x1a4
   144ac:	add	r0, r5, #21
   144b0:	mov	r1, r6
   144b4:	mov	r2, #256	; 0x100
   144b8:	bl	11618 <rb_strlcpy@plt>
   144bc:	strb	r4, [r5, #20]
   144c0:	mov	r0, r5
   144c4:	pop	{r4, r5, r6, sl, fp, lr}
   144c8:	b	145cc <sprintf@plt+0x2d44>
   144cc:	bl	11750 <rb_outofmemory@plt>
   144d0:	push	{r4, r5, r6, sl, fp, lr}
   144d4:	add	fp, sp, #16
   144d8:	sub	sp, sp, #8
   144dc:	mov	r5, r0
   144e0:	mov	r0, #1
   144e4:	mov	r1, #428	; 0x1ac
   144e8:	bl	115a0 <calloc@plt>
   144ec:	cmp	r0, #0
   144f0:	beq	145c0 <sprintf@plt+0x2d38>
   144f4:	mov	r4, r0
   144f8:	bl	1169c <rb_current_time@plt>
   144fc:	str	r5, [r4, #424]	; 0x1a8
   14500:	str	r0, [r4, #280]	; 0x118
   14504:	mov	r1, #4
   14508:	add	r6, sp, #6
   1450c:	mov	r0, #3
   14510:	str	r1, [r4, #284]	; 0x11c
   14514:	strb	r0, [r4, #277]	; 0x115
   14518:	mov	r0, r6
   1451c:	mov	r1, #2
   14520:	bl	117f8 <rb_get_random@plt>
   14524:	ldr	r0, [pc, #152]	; 145c4 <sprintf@plt+0x2d3c>
   14528:	ldr	r0, [pc, r0]
   1452c:	ldrh	r1, [sp, #6]
   14530:	cmp	r0, #0
   14534:	mov	r2, r0
   14538:	beq	14564 <sprintf@plt+0x2cdc>
   1453c:	ldr	r3, [r2]
   14540:	ldr	r5, [r3, #12]
   14544:	cmp	r5, r1
   14548:	beq	1455c <sprintf@plt+0x2cd4>
   1454c:	ldr	r2, [r2, #8]
   14550:	cmp	r2, #0
   14554:	bne	1453c <sprintf@plt+0x2cb4>
   14558:	b	14564 <sprintf@plt+0x2cdc>
   1455c:	cmp	r3, #0
   14560:	bne	14518 <sprintf@plt+0x2c90>
   14564:	mov	r2, #0
   14568:	str	r4, [r4]
   1456c:	cmp	r0, #0
   14570:	str	r2, [r4, #4]
   14574:	str	r0, [r4, #8]
   14578:	str	r1, [r4, #12]
   1457c:	ldr	r1, [pc, #68]	; 145c8 <sprintf@plt+0x2d40>
   14580:	add	r1, pc, r1
   14584:	beq	14594 <sprintf@plt+0x2d0c>
   14588:	add	r0, r0, #4
   1458c:	str	r4, [r0]
   14590:	b	145a4 <sprintf@plt+0x2d1c>
   14594:	mov	r0, r1
   14598:	ldr	r2, [r0, #4]!
   1459c:	cmp	r2, #0
   145a0:	streq	r4, [r0]
   145a4:	str	r4, [r1]
   145a8:	ldr	r0, [r1, #8]
   145ac:	add	r0, r0, #1
   145b0:	str	r0, [r1, #8]
   145b4:	mov	r0, r4
   145b8:	sub	sp, fp, #16
   145bc:	pop	{r4, r5, r6, sl, fp, pc}
   145c0:	bl	11750 <rb_outofmemory@plt>
   145c4:	andeq	sl, r1, r8, ror #21
   145c8:	muleq	r1, r0, sl
   145cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145d0:	add	fp, sp, #28
   145d4:	sub	sp, sp, #12
   145d8:	sub	sp, sp, #1024	; 0x400
   145dc:	add	r5, sp, #8
   145e0:	mov	r9, r0
   145e4:	mov	r1, #0
   145e8:	mov	r2, #1024	; 0x400
   145ec:	mov	r4, #1024	; 0x400
   145f0:	mov	r0, r5
   145f4:	bl	115d0 <memset@plt>
   145f8:	ldrb	r2, [r9, #20]
   145fc:	add	r0, r9, #21
   14600:	mov	r1, #1
   14604:	mov	r3, r5
   14608:	str	r4, [sp]
   1460c:	bl	151d0 <sprintf@plt+0x3948>
   14610:	cmp	r0, #1
   14614:	blt	147c8 <sprintf@plt+0x2f40>
   14618:	mov	r5, r0
   1461c:	ldrh	r0, [r9, #12]
   14620:	ldrh	r1, [sp, #10]
   14624:	orr	r0, r0, r1, lsl #16
   14628:	str	r0, [sp, #8]
   1462c:	ldrb	r0, [r9, #278]	; 0x116
   14630:	add	r1, r0, #1
   14634:	strb	r1, [r9, #278]	; 0x116
   14638:	ldr	r0, [pc, #400]	; 147d0 <sprintf@plt+0x2f48>
   1463c:	ldr	r0, [pc, r0]
   14640:	ldr	r2, [pc, #396]	; 147d4 <sprintf@plt+0x2f4c>
   14644:	add	r0, r0, #1
   14648:	add	r2, pc, r2
   1464c:	str	r0, [r2]
   14650:	ldr	r0, [pc, #384]	; 147d8 <sprintf@plt+0x2f50>
   14654:	ldr	r0, [pc, r0]
   14658:	ldr	r0, [r0]
   1465c:	cmp	r0, #1
   14660:	blt	147c8 <sprintf@plt+0x2f40>
   14664:	ldr	r4, [pc, #368]	; 147dc <sprintf@plt+0x2f54>
   14668:	mvn	r2, #0
   1466c:	mov	r8, #0
   14670:	add	r6, sp, #8
   14674:	uxtab	r7, r2, r1
   14678:	add	r4, pc, r4
   1467c:	b	1469c <sprintf@plt+0x2e14>
   14680:	sdiv	r3, r1, r2
   14684:	mls	r1, r3, r2, r1
   14688:	cmp	r1, #0
   1468c:	beq	146dc <sprintf@plt+0x2e54>
   14690:	add	r8, r8, #1
   14694:	cmp	r8, r0
   14698:	bge	14734 <sprintf@plt+0x2eac>
   1469c:	add	r1, r7, r8
   146a0:	sdiv	r2, r1, r0
   146a4:	mls	sl, r2, r0, r1
   146a8:	ldr	r1, [r4, sl, lsl #2]
   146ac:	cmp	r1, #0
   146b0:	beq	146dc <sprintf@plt+0x2e54>
   146b4:	sub	r3, r1, #1
   146b8:	ldr	r1, [pc, #288]	; 147e0 <sprintf@plt+0x2f58>
   146bc:	mov	r2, #243	; 0xf3
   146c0:	cmp	r3, #3
   146c4:	ldr	r1, [pc, r1]
   146c8:	bhi	14680 <sprintf@plt+0x2df8>
   146cc:	ldr	r2, [pc, #272]	; 147e4 <sprintf@plt+0x2f5c>
   146d0:	add	r2, pc, r2
   146d4:	ldr	r2, [r2, r3, lsl #2]
   146d8:	b	14680 <sprintf@plt+0x2df8>
   146dc:	ldr	r0, [pc, #260]	; 147e8 <sprintf@plt+0x2f60>
   146e0:	ldr	r0, [pc, r0]
   146e4:	bl	11534 <rb_get_fd@plt>
   146e8:	ldr	r2, [pc, #252]	; 147ec <sprintf@plt+0x2f64>
   146ec:	lsl	r1, sl, #7
   146f0:	mov	r3, #0
   146f4:	ldr	r2, [pc, r2]
   146f8:	ldrh	r1, [r2, r1]!	; <UNPREDICTABLE>
   146fc:	str	r2, [sp]
   14700:	mov	r2, r5
   14704:	cmp	r1, #2
   14708:	mov	r1, #28
   1470c:	movweq	r1, #16
   14710:	str	r1, [sp, #4]
   14714:	mov	r1, r6
   14718:	bl	115b8 <sendto@plt>
   1471c:	cmp	r0, r5
   14720:	beq	147c0 <sprintf@plt+0x2f38>
   14724:	ldr	r0, [pc, #196]	; 147f0 <sprintf@plt+0x2f68>
   14728:	ldr	r0, [pc, r0]
   1472c:	ldr	r0, [r0]
   14730:	b	14690 <sprintf@plt+0x2e08>
   14734:	cmp	r0, #1
   14738:	blt	147c8 <sprintf@plt+0x2f40>
   1473c:	mov	r6, #0
   14740:	add	r8, sp, #8
   14744:	b	14760 <sprintf@plt+0x2ed8>
   14748:	ldr	r0, [pc, #172]	; 147fc <sprintf@plt+0x2f74>
   1474c:	ldr	r0, [pc, r0]
   14750:	ldr	r0, [r0]
   14754:	add	r6, r6, #1
   14758:	cmp	r6, r0
   1475c:	bge	147c8 <sprintf@plt+0x2f40>
   14760:	add	r1, r7, r6
   14764:	sdiv	r2, r1, r0
   14768:	mls	sl, r2, r0, r1
   1476c:	ldr	r1, [r4, sl, lsl #2]
   14770:	cmp	r1, #0
   14774:	beq	14754 <sprintf@plt+0x2ecc>
   14778:	ldr	r0, [pc, #116]	; 147f4 <sprintf@plt+0x2f6c>
   1477c:	ldr	r0, [pc, r0]
   14780:	bl	11534 <rb_get_fd@plt>
   14784:	ldr	r2, [pc, #108]	; 147f8 <sprintf@plt+0x2f70>
   14788:	lsl	r1, sl, #7
   1478c:	mov	r3, #0
   14790:	ldr	r2, [pc, r2]
   14794:	ldrh	r1, [r2, r1]!	; <UNPREDICTABLE>
   14798:	str	r2, [sp]
   1479c:	mov	r2, r5
   147a0:	cmp	r1, #2
   147a4:	mov	r1, #28
   147a8:	movweq	r1, #16
   147ac:	str	r1, [sp, #4]
   147b0:	mov	r1, r8
   147b4:	bl	115b8 <sendto@plt>
   147b8:	cmp	r0, r5
   147bc:	bne	14748 <sprintf@plt+0x2ec0>
   147c0:	cmn	sl, #1
   147c4:	strne	sl, [r9, #288]	; 0x120
   147c8:	sub	sp, fp, #28
   147cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147d0:	andeq	sl, r1, r0, ror #19
   147d4:	ldrdeq	sl, [r1], -r4
   147d8:	andeq	r5, r1, r4, lsl fp
   147dc:	andeq	sl, r1, r0, ror r9
   147e0:	andeq	sl, r1, r8, asr r9
   147e4:	andeq	r4, r0, r4, lsl #28
   147e8:	andeq	sl, r1, r0, lsl #18
   147ec:	andeq	r5, r1, r0, lsl #21
   147f0:	andeq	r5, r1, r0, asr #20
   147f4:	andeq	sl, r1, r4, ror #16
   147f8:	andeq	r5, r1, r4, ror #19
   147fc:	andeq	r5, r1, ip, lsl sl
   14800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14804:	add	fp, sp, #28
   14808:	sub	sp, sp, #4
   1480c:	vpush	{d8-d9}
   14810:	sub	sp, sp, #168	; 0xa8
   14814:	ldr	r6, [pc, #708]	; 14ae0 <sprintf@plt+0x3258>
   14818:	mov	r0, #0
   1481c:	ldr	r6, [pc, r6]
   14820:	str	r0, [r6]
   14824:	ldr	r0, [pc, #696]	; 14ae4 <sprintf@plt+0x325c>
   14828:	ldr	r1, [pc, #696]	; 14ae8 <sprintf@plt+0x3260>
   1482c:	add	r0, pc, r0
   14830:	add	r1, pc, r1
   14834:	bl	115c4 <fopen@plt>
   14838:	cmp	r0, #0
   1483c:	beq	14a40 <sprintf@plt+0x31b8>
   14840:	mov	r4, r0
   14844:	add	r5, sp, #4
   14848:	mov	r1, #128	; 0x80
   1484c:	mov	r0, r5
   14850:	mov	r2, r4
   14854:	bl	1160c <fgets_unlocked@plt>
   14858:	cmp	r0, #0
   1485c:	beq	14a30 <sprintf@plt+0x31a8>
   14860:	sub	r0, fp, #80	; 0x50
   14864:	sub	sl, r5, #1
   14868:	add	r0, r0, #4
   1486c:	str	r0, [sp]
   14870:	bl	1175c <__ctype_b_loc@plt>
   14874:	ldr	r6, [pc, #624]	; 14aec <sprintf@plt+0x3264>
   14878:	vmov.i32	q4, #0	; 0x00000000
   1487c:	mov	r7, r0
   14880:	add	r6, pc, r6
   14884:	b	148b4 <sprintf@plt+0x302c>
   14888:	ldr	r0, [pc, #632]	; 14b08 <sprintf@plt+0x3280>
   1488c:	mov	r1, r9
   14890:	mov	r2, #256	; 0x100
   14894:	ldr	r0, [pc, r0]
   14898:	bl	11618 <rb_strlcpy@plt>
   1489c:	mov	r0, r5
   148a0:	mov	r1, #128	; 0x80
   148a4:	mov	r2, r4
   148a8:	bl	1160c <fgets_unlocked@plt>
   148ac:	cmp	r0, #0
   148b0:	beq	14a30 <sprintf@plt+0x31a8>
   148b4:	mov	r0, r5
   148b8:	mov	r1, r6
   148bc:	bl	1184c <strpbrk@plt>
   148c0:	cmp	r0, #0
   148c4:	mov	r8, sl
   148c8:	movne	r1, #0
   148cc:	strbne	r1, [r0]
   148d0:	ldr	r0, [r7]
   148d4:	ldrb	r1, [r8, #1]!
   148d8:	add	r2, r0, r1, lsl #1
   148dc:	ldrb	r2, [r2, #1]
   148e0:	tst	r2, #32
   148e4:	bne	148d4 <sprintf@plt+0x304c>
   148e8:	cmp	r1, #0
   148ec:	cmpne	r1, #35	; 0x23
   148f0:	beq	1489c <sprintf@plt+0x3014>
   148f4:	cmp	r1, #59	; 0x3b
   148f8:	mov	r9, r8
   148fc:	beq	1489c <sprintf@plt+0x3014>
   14900:	ldrb	r1, [r9, #1]!
   14904:	cmp	r1, #0
   14908:	beq	1491c <sprintf@plt+0x3094>
   1490c:	add	r2, r0, r1, lsl #1
   14910:	ldrh	r2, [r2]
   14914:	ands	r2, r2, #8192	; 0x2000
   14918:	beq	14900 <sprintf@plt+0x3078>
   1491c:	cmp	r1, #0
   14920:	beq	1489c <sprintf@plt+0x3014>
   14924:	mov	r0, #0
   14928:	strb	r0, [r9]
   1492c:	ldr	r0, [r7]
   14930:	ldrb	r1, [r9, #1]!
   14934:	add	r1, r0, r1, lsl #1
   14938:	ldrb	r1, [r1, #1]
   1493c:	tst	r1, #32
   14940:	bne	14930 <sprintf@plt+0x30a8>
   14944:	ldr	r1, [pc, #436]	; 14b00 <sprintf@plt+0x3278>
   14948:	mov	r0, r9
   1494c:	add	r1, pc, r1
   14950:	bl	1184c <strpbrk@plt>
   14954:	cmp	r0, #0
   14958:	movne	r1, #0
   1495c:	strbne	r1, [r0]
   14960:	mov	r0, r8
   14964:	ldr	r1, [pc, #408]	; 14b04 <sprintf@plt+0x327c>
   14968:	add	r1, pc, r1
   1496c:	bl	11660 <rb_strcasecmp@plt>
   14970:	cmp	r0, #0
   14974:	beq	14888 <sprintf@plt+0x3000>
   14978:	ldr	r1, [pc, #396]	; 14b0c <sprintf@plt+0x3284>
   1497c:	mov	r0, r8
   14980:	add	r1, pc, r1
   14984:	bl	11660 <rb_strcasecmp@plt>
   14988:	cmp	r0, #0
   1498c:	bne	1489c <sprintf@plt+0x3014>
   14990:	ldr	r0, [pc, #376]	; 14b10 <sprintf@plt+0x3288>
   14994:	ldr	r0, [pc, r0]
   14998:	ldr	r0, [r0]
   1499c:	cmp	r0, #9
   149a0:	bgt	1489c <sprintf@plt+0x3014>
   149a4:	ldr	r0, [sp]
   149a8:	mov	r1, #12
   149ac:	sub	r2, fp, #80	; 0x50
   149b0:	sub	r3, fp, #84	; 0x54
   149b4:	vst1.32	{d8-d9}, [r0], r1
   149b8:	vst1.32	{d8-d9}, [r0]
   149bc:	mov	r0, #5
   149c0:	str	r0, [fp, #-80]	; 0xffffffb0
   149c4:	mov	r0, #2
   149c8:	str	r0, [fp, #-72]	; 0xffffffb8
   149cc:	mov	r0, r9
   149d0:	ldr	r1, [pc, #316]	; 14b14 <sprintf@plt+0x328c>
   149d4:	add	r1, pc, r1
   149d8:	bl	1166c <getaddrinfo@plt>
   149dc:	cmp	r0, #0
   149e0:	bne	1489c <sprintf@plt+0x3014>
   149e4:	ldr	r8, [fp, #-84]	; 0xffffffac
   149e8:	cmp	r8, #0
   149ec:	beq	1489c <sprintf@plt+0x3014>
   149f0:	ldr	r0, [pc, #288]	; 14b18 <sprintf@plt+0x3290>
   149f4:	ldr	r0, [pc, r0]
   149f8:	ldr	r9, [r0]
   149fc:	ldr	r0, [pc, #280]	; 14b1c <sprintf@plt+0x3294>
   14a00:	ldr	r0, [pc, r0]
   14a04:	ldr	r2, [r8, #16]
   14a08:	ldr	r1, [r8, #20]
   14a0c:	add	r0, r0, r9, lsl #7
   14a10:	bl	116b4 <memcpy@plt>
   14a14:	ldr	r1, [pc, #260]	; 14b20 <sprintf@plt+0x3298>
   14a18:	add	r0, r9, #1
   14a1c:	ldr	r1, [pc, r1]
   14a20:	str	r0, [r1]
   14a24:	mov	r0, r8
   14a28:	bl	115dc <freeaddrinfo@plt>
   14a2c:	b	1489c <sprintf@plt+0x3014>
   14a30:	mov	r0, r4
   14a34:	bl	11564 <fclose@plt>
   14a38:	ldr	r6, [pc, #176]	; 14af0 <sprintf@plt+0x3268>
   14a3c:	ldr	r6, [pc, r6]
   14a40:	ldr	r0, [r6]
   14a44:	cmp	r0, #0
   14a48:	bne	14acc <sprintf@plt+0x3244>
   14a4c:	vmov.i32	q8, #0	; 0x00000000
   14a50:	add	r2, sp, #4
   14a54:	sub	r3, fp, #80	; 0x50
   14a58:	add	r0, r2, #4
   14a5c:	vst1.32	{d16-d17}, [r0]
   14a60:	add	r0, r2, #16
   14a64:	vst1.32	{d16-d17}, [r0]
   14a68:	mov	r0, #5
   14a6c:	str	r0, [sp, #4]
   14a70:	mov	r0, #2
   14a74:	str	r0, [sp, #12]
   14a78:	ldr	r0, [pc, #116]	; 14af4 <sprintf@plt+0x326c>
   14a7c:	ldr	r1, [pc, #116]	; 14af8 <sprintf@plt+0x3270>
   14a80:	add	r0, pc, r0
   14a84:	add	r1, pc, r1
   14a88:	bl	1166c <getaddrinfo@plt>
   14a8c:	cmp	r0, #0
   14a90:	bne	14acc <sprintf@plt+0x3244>
   14a94:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14a98:	cmp	r4, #0
   14a9c:	beq	14acc <sprintf@plt+0x3244>
   14aa0:	ldr	r5, [r6]
   14aa4:	ldr	r0, [pc, #80]	; 14afc <sprintf@plt+0x3274>
   14aa8:	ldr	r0, [pc, r0]
   14aac:	ldr	r2, [r4, #16]
   14ab0:	ldr	r1, [r4, #20]
   14ab4:	add	r0, r0, r5, lsl #7
   14ab8:	bl	116b4 <memcpy@plt>
   14abc:	add	r0, r5, #1
   14ac0:	str	r0, [r6]
   14ac4:	mov	r0, r4
   14ac8:	bl	115dc <freeaddrinfo@plt>
   14acc:	mov	r0, #0
   14ad0:	sub	sp, fp, #48	; 0x30
   14ad4:	vpop	{d8-d9}
   14ad8:	add	sp, sp, #4
   14adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ae0:	andeq	r5, r1, ip, asr #18
   14ae4:	andeq	r4, r0, r2, asr #25
   14ae8:	andeq	r5, r0, r4, ror #4
   14aec:	andeq	r5, r0, lr, lsl #9
   14af0:	andeq	r5, r1, ip, lsr #14
   14af4:	andeq	r4, r0, r4, ror #20
   14af8:	andeq	r4, r0, lr, ror sl
   14afc:	andeq	r5, r1, ip, asr #13
   14b00:			; <UNDEFINED> instruction: 0x00004bb3
   14b04:	muleq	r0, sl, fp
   14b08:	ldrdeq	r5, [r1], -r8
   14b0c:	andeq	r4, r0, r9, lsl #23
   14b10:	ldrdeq	r5, [r1], -r4
   14b14:	andeq	r4, r0, lr, lsr #22
   14b18:	andeq	r5, r1, r4, ror r7
   14b1c:	andeq	r5, r1, r4, ror r7
   14b20:	andeq	r5, r1, ip, asr #14
   14b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b28:	add	fp, sp, #28
   14b2c:	sub	sp, sp, #284	; 0x11c
   14b30:	cmp	r2, r0
   14b34:	bcc	150b8 <sprintf@plt+0x3830>
   14b38:	mov	ip, r1
   14b3c:	cmp	r2, r1
   14b40:	bcs	150b8 <sprintf@plt+0x3830>
   14b44:	ldrb	r6, [r2]
   14b48:	ldr	r1, [fp, #8]
   14b4c:	mov	r8, r3
   14b50:	cmp	r6, #0
   14b54:	beq	15050 <sprintf@plt+0x37c8>
   14b58:	str	r0, [sp, #20]
   14b5c:	sub	r0, ip, r0
   14b60:	add	r7, sp, #25
   14b64:	str	r8, [sp, #8]
   14b68:	str	r2, [sp, #4]
   14b6c:	add	r1, r2, #1
   14b70:	mvn	r4, #0
   14b74:	mov	r8, #0
   14b78:	mov	sl, #0
   14b7c:	str	r0, [sp, #16]
   14b80:	rsb	r0, r2, #1
   14b84:	mov	r2, r7
   14b88:	str	r0, [sp, #12]
   14b8c:	ands	r3, r6, #192	; 0xc0
   14b90:	beq	14bc8 <sprintf@plt+0x3340>
   14b94:	cmp	r3, #192	; 0xc0
   14b98:	beq	14c10 <sprintf@plt+0x3388>
   14b9c:	cmp	r3, #64	; 0x40
   14ba0:	uxtbeq	r3, r6
   14ba4:	cmpeq	r3, #65	; 0x41
   14ba8:	bne	150b8 <sprintf@plt+0x3830>
   14bac:	ldrb	r3, [r1]
   14bb0:	mov	r0, #1
   14bb4:	add	r5, r3, #7
   14bb8:	cmp	r3, #0
   14bbc:	add	r5, r0, r5, lsr #3
   14bc0:	movweq	r5, #33	; 0x21
   14bc4:	b	14bcc <sprintf@plt+0x3344>
   14bc8:	uxtb	r5, r6
   14bcc:	add	r3, sl, #1
   14bd0:	add	sl, r5, r3
   14bd4:	cmp	sl, #254	; 0xfe
   14bd8:	bgt	150b8 <sprintf@plt+0x3830>
   14bdc:	add	r9, r1, r5
   14be0:	cmp	r9, ip
   14be4:	bcs	150b8 <sprintf@plt+0x3830>
   14be8:	strb	r6, [r2]
   14bec:	add	r0, r7, r3
   14bf0:	mov	r2, r5
   14bf4:	mov	r6, ip
   14bf8:	bl	116b4 <memcpy@plt>
   14bfc:	add	r0, r8, r5
   14c00:	mov	ip, r6
   14c04:	mov	r1, r9
   14c08:	add	r8, r0, #1
   14c0c:	b	14c50 <sprintf@plt+0x33c8>
   14c10:	cmp	r1, ip
   14c14:	ldrbcc	r2, [r1]
   14c18:	andcc	r0, r6, #63	; 0x3f
   14c1c:	orrcc	r0, r2, r0, lsl #8
   14c20:	ldrcc	r2, [sp, #20]
   14c24:	addcc	r0, r2, r0
   14c28:	cmpcc	r0, ip
   14c2c:	bcs	150b8 <sprintf@plt+0x3830>
   14c30:	ldr	r2, [sp, #12]
   14c34:	cmp	r4, #0
   14c38:	add	r8, r8, #2
   14c3c:	addmi	r4, r2, r1
   14c40:	ldr	r1, [sp, #16]
   14c44:	cmp	r8, r1
   14c48:	mov	r1, r0
   14c4c:	bge	150b8 <sprintf@plt+0x3830>
   14c50:	ldrb	r6, [r1], #1
   14c54:	add	r2, r7, sl
   14c58:	cmp	r6, #0
   14c5c:	bne	14b8c <sprintf@plt+0x3304>
   14c60:	ldr	r8, [sp, #8]
   14c64:	mov	r0, #0
   14c68:	cmn	r4, #1
   14c6c:	strb	r0, [r2]
   14c70:	bgt	14c84 <sprintf@plt+0x33fc>
   14c74:	ldr	r0, [sp, #4]
   14c78:	sub	r4, r1, r0
   14c7c:	cmn	r4, #1
   14c80:	beq	150c4 <sprintf@plt+0x383c>
   14c84:	ldr	r1, [fp, #8]
   14c88:	ldrb	r6, [sp, #25]
   14c8c:	str	r4, [sp, #16]
   14c90:	add	sl, r8, r1
   14c94:	cmp	r6, #0
   14c98:	beq	150ac <sprintf@plt+0x3824>
   14c9c:	ldr	r1, [pc, #1080]	; 150dc <sprintf@plt+0x3854>
   14ca0:	add	r9, sp, #25
   14ca4:	mov	ip, #92	; 0x5c
   14ca8:	mov	r4, r8
   14cac:	add	r1, pc, r1
   14cb0:	uxtb	r3, r6
   14cb4:	cmp	r3, #192	; 0xc0
   14cb8:	bcs	150b8 <sprintf@plt+0x3830>
   14cbc:	cmp	r4, r8
   14cc0:	mov	r2, r6
   14cc4:	mov	lr, r8
   14cc8:	beq	14ce4 <sprintf@plt+0x345c>
   14ccc:	cmp	r4, sl
   14cd0:	bcs	150b8 <sprintf@plt+0x3830>
   14cd4:	mov	r0, #46	; 0x2e
   14cd8:	strb	r0, [r4], #1
   14cdc:	ldrb	r2, [r9]
   14ce0:	mov	lr, r4
   14ce4:	and	r0, r2, #192	; 0xc0
   14ce8:	add	r4, r9, #1
   14cec:	cmp	r0, #64	; 0x40
   14cf0:	beq	14d04 <sprintf@plt+0x347c>
   14cf4:	cmp	r0, #192	; 0xc0
   14cf8:	beq	150b8 <sprintf@plt+0x3830>
   14cfc:	uxtb	r5, r2
   14d00:	b	14d28 <sprintf@plt+0x34a0>
   14d04:	uxtb	r0, r2
   14d08:	cmp	r0, #65	; 0x41
   14d0c:	bne	150b8 <sprintf@plt+0x3830>
   14d10:	ldrb	r0, [r4]
   14d14:	mov	r7, #1
   14d18:	add	r2, r0, #7
   14d1c:	cmp	r0, #0
   14d20:	add	r5, r7, r2, lsr #3
   14d24:	movweq	r5, #33	; 0x21
   14d28:	add	r0, lr, r5
   14d2c:	cmp	r0, sl
   14d30:	bcs	150b8 <sprintf@plt+0x3830>
   14d34:	and	r0, r6, #192	; 0xc0
   14d38:	cmp	r0, #64	; 0x40
   14d3c:	bne	14dd4 <sprintf@plt+0x354c>
   14d40:	cmp	r3, #65	; 0x41
   14d44:	bne	150d0 <sprintf@plt+0x3848>
   14d48:	ldrb	r6, [r4]
   14d4c:	mov	r0, #7
   14d50:	cmp	r6, #0
   14d54:	movweq	r6, #256	; 0x100
   14d58:	cmp	r6, #9
   14d5c:	add	r2, r6, #3
   14d60:	movwhi	r0, #8
   14d64:	cmp	r6, #99	; 0x63
   14d68:	movwhi	r0, #9
   14d6c:	add	r0, r0, r2, lsr #2
   14d70:	add	r0, lr, r0
   14d74:	cmp	r0, sl
   14d78:	bcs	150b8 <sprintf@plt+0x3830>
   14d7c:	movw	r0, #23388	; 0x5b5c
   14d80:	mov	r7, lr
   14d84:	add	r9, r9, #2
   14d88:	cmp	r6, #8
   14d8c:	movt	r0, #120	; 0x78
   14d90:	str	r0, [r7], #3
   14d94:	bcc	14fa4 <sprintf@plt+0x371c>
   14d98:	mov	r5, lr
   14d9c:	mov	r4, r6
   14da0:	ldrb	r2, [r9], #1
   14da4:	mov	r0, r7
   14da8:	bl	11888 <sprintf@plt>
   14dac:	ldr	r1, [pc, #812]	; 150e0 <sprintf@plt+0x3858>
   14db0:	sub	r4, r4, #8
   14db4:	add	r7, r7, r0
   14db8:	cmp	r4, #7
   14dbc:	add	r1, pc, r1
   14dc0:	bgt	14da0 <sprintf@plt+0x3518>
   14dc4:	sub	r0, r9, #1
   14dc8:	mov	lr, r5
   14dcc:	str	r0, [sp, #20]
   14dd0:	b	14fac <sprintf@plt+0x3724>
   14dd4:	mov	r9, r4
   14dd8:	cmp	r5, #1
   14ddc:	mov	r4, lr
   14de0:	blt	15030 <sprintf@plt+0x37a8>
   14de4:	ldrb	r2, [r9], #1
   14de8:	sub	r3, r2, #34	; 0x22
   14dec:	cmp	r3, #58	; 0x3a
   14df0:	bhi	14f14 <sprintf@plt+0x368c>
   14df4:	add	r7, pc, #4
   14df8:	ldr	r3, [r7, r3, lsl #2]
   14dfc:	add	pc, r7, r3
   14e00:	andeq	r0, r0, ip, ror #1
   14e04:	andeq	r0, r0, r4, lsl r1
   14e08:	andeq	r0, r0, ip, ror #1
   14e0c:	andeq	r0, r0, r4, lsl r1
   14e10:	andeq	r0, r0, r4, lsl r1
   14e14:	andeq	r0, r0, r4, lsl r1
   14e18:	andeq	r0, r0, ip, ror #1
   14e1c:	andeq	r0, r0, ip, ror #1
   14e20:	andeq	r0, r0, r4, lsl r1
   14e24:	andeq	r0, r0, r4, lsl r1
   14e28:	andeq	r0, r0, r4, lsl r1
   14e2c:	andeq	r0, r0, r4, lsl r1
   14e30:	andeq	r0, r0, ip, ror #1
   14e34:	andeq	r0, r0, r4, lsl r1
   14e38:	andeq	r0, r0, r4, lsl r1
   14e3c:	andeq	r0, r0, r4, lsl r1
   14e40:	andeq	r0, r0, r4, lsl r1
   14e44:	andeq	r0, r0, r4, lsl r1
   14e48:	andeq	r0, r0, r4, lsl r1
   14e4c:	andeq	r0, r0, r4, lsl r1
   14e50:	andeq	r0, r0, r4, lsl r1
   14e54:	andeq	r0, r0, r4, lsl r1
   14e58:	andeq	r0, r0, r4, lsl r1
   14e5c:	andeq	r0, r0, r4, lsl r1
   14e60:	andeq	r0, r0, r4, lsl r1
   14e64:	andeq	r0, r0, ip, ror #1
   14e68:	andeq	r0, r0, r4, lsl r1
   14e6c:	andeq	r0, r0, r4, lsl r1
   14e70:	andeq	r0, r0, r4, lsl r1
   14e74:	andeq	r0, r0, r4, lsl r1
   14e78:	andeq	r0, r0, ip, ror #1
   14e7c:	andeq	r0, r0, r4, lsl r1
   14e80:	andeq	r0, r0, r4, lsl r1
   14e84:	andeq	r0, r0, r4, lsl r1
   14e88:	andeq	r0, r0, r4, lsl r1
   14e8c:	andeq	r0, r0, r4, lsl r1
   14e90:	andeq	r0, r0, r4, lsl r1
   14e94:	andeq	r0, r0, r4, lsl r1
   14e98:	andeq	r0, r0, r4, lsl r1
   14e9c:	andeq	r0, r0, r4, lsl r1
   14ea0:	andeq	r0, r0, r4, lsl r1
   14ea4:	andeq	r0, r0, r4, lsl r1
   14ea8:	andeq	r0, r0, r4, lsl r1
   14eac:	andeq	r0, r0, r4, lsl r1
   14eb0:	andeq	r0, r0, r4, lsl r1
   14eb4:	andeq	r0, r0, r4, lsl r1
   14eb8:	andeq	r0, r0, r4, lsl r1
   14ebc:	andeq	r0, r0, r4, lsl r1
   14ec0:	andeq	r0, r0, r4, lsl r1
   14ec4:	andeq	r0, r0, r4, lsl r1
   14ec8:	andeq	r0, r0, r4, lsl r1
   14ecc:	andeq	r0, r0, r4, lsl r1
   14ed0:	andeq	r0, r0, r4, lsl r1
   14ed4:	andeq	r0, r0, r4, lsl r1
   14ed8:	andeq	r0, r0, r4, lsl r1
   14edc:	andeq	r0, r0, r4, lsl r1
   14ee0:	andeq	r0, r0, r4, lsl r1
   14ee4:	andeq	r0, r0, r4, lsl r1
   14ee8:	andeq	r0, r0, ip, ror #1
   14eec:	add	r3, r4, #1
   14ef0:	cmp	r3, sl
   14ef4:	bcs	150b8 <sprintf@plt+0x3830>
   14ef8:	strb	r2, [r4, #1]
   14efc:	strb	ip, [r4]
   14f00:	add	r4, r4, #2
   14f04:	sub	r5, r5, #1
   14f08:	cmp	r5, #0
   14f0c:	bgt	14de4 <sprintf@plt+0x355c>
   14f10:	b	15030 <sprintf@plt+0x37a8>
   14f14:	sub	r3, r2, #33	; 0x21
   14f18:	cmp	r3, #94	; 0x5e
   14f1c:	bcc	14f94 <sprintf@plt+0x370c>
   14f20:	add	r3, r4, #3
   14f24:	cmp	r3, sl
   14f28:	bcs	150b8 <sprintf@plt+0x3830>
   14f2c:	movw	r0, #34079	; 0x851f
   14f30:	strb	ip, [r4]
   14f34:	movt	r0, #20971	; 0x51eb
   14f38:	umull	r3, r7, r2, r0
   14f3c:	ldr	r0, [pc, #428]	; 150f0 <sprintf@plt+0x3868>
   14f40:	add	r0, pc, r0
   14f44:	ldrb	r3, [r0, r7, lsr #5]
   14f48:	strb	r3, [r4, #1]
   14f4c:	movw	r3, #52429	; 0xcccd
   14f50:	movt	r3, #52428	; 0xcccc
   14f54:	mov	lr, r3
   14f58:	umull	r3, r6, r2, r3
   14f5c:	lsr	r3, r6, #3
   14f60:	mov	r6, #100	; 0x64
   14f64:	add	r3, r3, r3, lsl #2
   14f68:	sub	r3, r2, r3, lsl #1
   14f6c:	ldrb	r3, [r0, r3]
   14f70:	strb	r3, [r4, #3]
   14f74:	lsr	r3, r7, #5
   14f78:	mls	r2, r3, r6, r2
   14f7c:	uxtb	r2, r2
   14f80:	umull	r2, r3, r2, lr
   14f84:	ldrb	r2, [r0, r3, lsr #3]
   14f88:	strb	r2, [r4, #2]
   14f8c:	add	r4, r4, #4
   14f90:	b	14f04 <sprintf@plt+0x367c>
   14f94:	cmp	r4, sl
   14f98:	bcs	150b8 <sprintf@plt+0x3830>
   14f9c:	strb	r2, [r4], #1
   14fa0:	b	14f04 <sprintf@plt+0x367c>
   14fa4:	str	r4, [sp, #20]
   14fa8:	mov	r4, r6
   14fac:	mov	r5, lr
   14fb0:	cmp	r4, #5
   14fb4:	blt	14fc8 <sprintf@plt+0x3740>
   14fb8:	ldrb	r0, [r9]
   14fbc:	mov	r2, #255	; 0xff
   14fc0:	mov	r3, #8
   14fc4:	b	14fe8 <sprintf@plt+0x3760>
   14fc8:	cmp	r4, #1
   14fcc:	blt	15004 <sprintf@plt+0x377c>
   14fd0:	ldrb	r0, [r9]
   14fd4:	ldr	r1, [pc, #264]	; 150e4 <sprintf@plt+0x385c>
   14fd8:	mov	r2, #15
   14fdc:	mov	r3, #4
   14fe0:	lsr	r0, r0, #4
   14fe4:	add	r1, pc, r1
   14fe8:	sub	r3, r3, r4
   14fec:	and	r2, r0, r2, lsl r3
   14ff0:	mov	r0, r7
   14ff4:	bl	11888 <sprintf@plt>
   14ff8:	add	r7, r7, r0
   14ffc:	ldr	r0, [sp, #20]
   15000:	add	r9, r0, #2
   15004:	ldr	r1, [pc, #220]	; 150e8 <sprintf@plt+0x3860>
   15008:	mov	r0, r7
   1500c:	mov	r2, r6
   15010:	add	r1, pc, r1
   15014:	bl	11888 <sprintf@plt>
   15018:	add	r4, r7, r0
   1501c:	mov	ip, #92	; 0x5c
   15020:	subs	r1, r4, r5
   15024:	ldr	r1, [pc, #192]	; 150ec <sprintf@plt+0x3864>
   15028:	add	r1, pc, r1
   1502c:	bmi	150b8 <sprintf@plt+0x3830>
   15030:	ldrb	r6, [r9]
   15034:	cmp	r6, #0
   15038:	bne	14cb0 <sprintf@plt+0x3428>
   1503c:	ldr	r0, [sp, #16]
   15040:	ldr	r1, [fp, #8]
   15044:	cmp	r4, r8
   15048:	bne	15074 <sprintf@plt+0x37ec>
   1504c:	b	15060 <sprintf@plt+0x37d8>
   15050:	mov	r0, #0
   15054:	add	sl, r8, r1
   15058:	strb	r0, [sp, #25]
   1505c:	mov	r0, #1
   15060:	cmp	r1, #0
   15064:	ble	150b8 <sprintf@plt+0x3830>
   15068:	mov	r1, #46	; 0x2e
   1506c:	mov	r4, r8
   15070:	strb	r1, [r4], #1
   15074:	cmp	r4, sl
   15078:	bcs	150b8 <sprintf@plt+0x3830>
   1507c:	mov	r1, #0
   15080:	strb	r1, [r4], -r8
   15084:	cmn	r4, #2
   15088:	beq	150c4 <sprintf@plt+0x383c>
   1508c:	cmp	r0, #1
   15090:	blt	150a4 <sprintf@plt+0x381c>
   15094:	ldrb	r1, [r8]
   15098:	cmp	r1, #46	; 0x2e
   1509c:	moveq	r1, #0
   150a0:	strbeq	r1, [r8]
   150a4:	sub	sp, fp, #28
   150a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150ac:	ldr	r0, [sp, #16]
   150b0:	cmp	r1, #0
   150b4:	bgt	15068 <sprintf@plt+0x37e0>
   150b8:	bl	1187c <__errno_location@plt>
   150bc:	mov	r1, #90	; 0x5a
   150c0:	str	r1, [r0]
   150c4:	mvn	r0, #0
   150c8:	sub	sp, fp, #28
   150cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150d0:	bl	1187c <__errno_location@plt>
   150d4:	mov	r1, #22
   150d8:	b	150c0 <sprintf@plt+0x3838>
   150dc:	andeq	r4, r0, r8, ror #16
   150e0:	andeq	r4, r0, r8, asr r7
   150e4:	andeq	r4, r0, r5, lsr r5
   150e8:	andeq	r4, r0, sp, lsl #10
   150ec:	andeq	r4, r0, ip, ror #9
   150f0:	andeq	r4, r0, r2, ror #11
   150f4:	push	{r4, sl, fp, lr}
   150f8:	add	fp, sp, #8
   150fc:	cmp	r0, r1
   15100:	mov	lr, r0
   15104:	bcs	15164 <sprintf@plt+0x38dc>
   15108:	mov	ip, #1
   1510c:	mov	lr, r0
   15110:	b	15120 <sprintf@plt+0x3898>
   15114:	add	lr, r2, r3
   15118:	cmp	lr, r1
   1511c:	bcs	15164 <sprintf@plt+0x38dc>
   15120:	mov	r2, lr
   15124:	ldrb	r3, [r2], #1
   15128:	cmp	r3, #0
   1512c:	beq	15160 <sprintf@plt+0x38d8>
   15130:	ands	r4, r3, #192	; 0xc0
   15134:	beq	15114 <sprintf@plt+0x388c>
   15138:	cmp	r4, #64	; 0x40
   1513c:	bne	15180 <sprintf@plt+0x38f8>
   15140:	cmp	r3, #65	; 0x41
   15144:	bne	1516c <sprintf@plt+0x38e4>
   15148:	ldrb	r4, [r2]
   1514c:	add	r3, r4, #7
   15150:	cmp	r4, #0
   15154:	add	r3, ip, r3, lsr #3
   15158:	movweq	r3, #33	; 0x21
   1515c:	b	15114 <sprintf@plt+0x388c>
   15160:	mov	lr, r2
   15164:	cmp	lr, r1
   15168:	bls	15194 <sprintf@plt+0x390c>
   1516c:	bl	1187c <__errno_location@plt>
   15170:	mov	r1, #90	; 0x5a
   15174:	str	r1, [r0]
   15178:	mvn	r0, #0
   1517c:	pop	{r4, sl, fp, pc}
   15180:	cmp	r4, #192	; 0xc0
   15184:	bne	1516c <sprintf@plt+0x38e4>
   15188:	add	lr, lr, #2
   1518c:	cmp	lr, r1
   15190:	bhi	1516c <sprintf@plt+0x38e4>
   15194:	sub	r0, lr, r0
   15198:	pop	{r4, sl, fp, pc}
   1519c:	ldrb	r1, [r0]
   151a0:	ldrb	r0, [r0, #1]
   151a4:	orr	r0, r0, r1, lsl #8
   151a8:	bx	lr
   151ac:	ldr	r0, [r0]
   151b0:	rev	r0, r0
   151b4:	bx	lr
   151b8:	rev16	r0, r0
   151bc:	strh	r0, [r1]
   151c0:	bx	lr
   151c4:	rev	r0, r0
   151c8:	str	r0, [r1]
   151cc:	bx	lr
   151d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151d4:	add	fp, sp, #28
   151d8:	sub	sp, sp, #396	; 0x18c
   151dc:	mov	r7, r0
   151e0:	mvn	r0, #0
   151e4:	cmp	r3, #0
   151e8:	beq	15aa0 <sprintf@plt+0x4218>
   151ec:	ldr	r6, [fp, #8]
   151f0:	cmp	r6, #12
   151f4:	blt	15aa0 <sprintf@plt+0x4218>
   151f8:	mov	r4, #0
   151fc:	mov	r5, #65536	; 0x10000
   15200:	subs	r6, r6, #16
   15204:	str	r5, [r3]
   15208:	str	r4, [r3, #4]
   1520c:	str	r4, [r3, #8]
   15210:	str	r4, [sp, #52]	; 0x34
   15214:	str	r3, [sp, #48]	; 0x30
   15218:	bmi	15aa0 <sprintf@plt+0x4218>
   1521c:	add	r4, sp, #129	; 0x81
   15220:	str	r1, [sp, #24]
   15224:	str	r6, [sp, #32]
   15228:	str	r2, [sp, #40]	; 0x28
   1522c:	str	r3, [sp, #36]	; 0x24
   15230:	add	r0, r4, #1
   15234:	add	r1, r4, #255	; 0xff
   15238:	str	r0, [fp, #-40]	; 0xffffffd8
   1523c:	str	r1, [sp, #44]	; 0x2c
   15240:	ldrb	r1, [r7]
   15244:	cmp	r1, #0
   15248:	beq	155ec <sprintf@plt+0x3d64>
   1524c:	ldr	r6, [pc, #2132]	; 15aa8 <sprintf@plt+0x4220>
   15250:	sub	r0, fp, #40	; 0x28
   15254:	add	r3, r0, #4
   15258:	str	r3, [sp, #20]
   1525c:	add	r6, pc, r6
   15260:	mov	r0, #0
   15264:	str	r4, [sp, #28]
   15268:	uxtb	r9, r1
   1526c:	add	r8, r7, #1
   15270:	cmp	r0, #0
   15274:	beq	15310 <sprintf@plt+0x3a88>
   15278:	cmp	r9, #91	; 0x5b
   1527c:	beq	15358 <sprintf@plt+0x3ad0>
   15280:	mov	r0, r6
   15284:	mov	r1, r9
   15288:	mov	r2, #11
   1528c:	bl	11858 <memchr@plt>
   15290:	cmp	r0, #0
   15294:	beq	15324 <sprintf@plt+0x3a9c>
   15298:	ldrb	r1, [r7, #1]
   1529c:	mov	r5, #90	; 0x5a
   152a0:	cmp	r1, #0
   152a4:	beq	15990 <sprintf@plt+0x4108>
   152a8:	mov	sl, r0
   152ac:	mov	r0, r6
   152b0:	mov	r2, #11
   152b4:	bl	11858 <memchr@plt>
   152b8:	cmp	r0, #0
   152bc:	ldrbne	r1, [r7, #2]
   152c0:	cmpne	r1, #0
   152c4:	beq	15990 <sprintf@plt+0x4108>
   152c8:	mov	r4, r0
   152cc:	mov	r0, r6
   152d0:	mov	r2, #11
   152d4:	bl	11858 <memchr@plt>
   152d8:	cmp	r0, #0
   152dc:	beq	15990 <sprintf@plt+0x4108>
   152e0:	sub	r1, sl, r6
   152e4:	mov	r2, #100	; 0x64
   152e8:	sub	r0, r0, r6
   152ec:	mul	r1, r1, r2
   152f0:	sub	r2, r4, r6
   152f4:	add	r2, r2, r2, lsl #2
   152f8:	add	r1, r1, r2, lsl #1
   152fc:	add	r9, r1, r0
   15300:	cmp	r9, #255	; 0xff
   15304:	bgt	15990 <sprintf@plt+0x4108>
   15308:	add	r8, r7, #3
   1530c:	b	15324 <sprintf@plt+0x3a9c>
   15310:	mov	r0, #1
   15314:	cmp	r9, #92	; 0x5c
   15318:	beq	15344 <sprintf@plt+0x3abc>
   1531c:	cmp	r9, #46	; 0x2e
   15320:	beq	153fc <sprintf@plt+0x3b74>
   15324:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15328:	ldr	r1, [sp, #44]	; 0x2c
   1532c:	cmp	r0, r1
   15330:	bcs	1598c <sprintf@plt+0x4104>
   15334:	add	r1, r0, #1
   15338:	str	r1, [fp, #-40]	; 0xffffffd8
   1533c:	strb	r9, [r0]
   15340:	mov	r0, #0
   15344:	ldrb	r1, [r8]
   15348:	mov	r7, r8
   1534c:	cmp	r1, #0
   15350:	bne	15268 <sprintf@plt+0x39e0>
   15354:	b	15980 <sprintf@plt+0x40f8>
   15358:	mov	r0, r8
   1535c:	mov	r1, #93	; 0x5d
   15360:	bl	1157c <strchr@plt>
   15364:	cmp	r0, #0
   15368:	beq	159b0 <sprintf@plt+0x4128>
   1536c:	mov	r4, r0
   15370:	mov	r0, #0
   15374:	add	r9, r4, #2
   15378:	str	r0, [fp, #-36]	; 0xffffffdc
   1537c:	sub	r0, r9, r8
   15380:	cmp	r0, #2
   15384:	blt	159b0 <sprintf@plt+0x4128>
   15388:	ldrb	r0, [r7, #1]
   1538c:	cmp	r0, #120	; 0x78
   15390:	bne	159b0 <sprintf@plt+0x4128>
   15394:	add	r8, r7, #2
   15398:	bl	1175c <__ctype_b_loc@plt>
   1539c:	ldrb	r1, [r8]
   153a0:	ldr	r2, [r0]
   153a4:	add	r2, r2, r1, lsl #1
   153a8:	ldrb	r2, [r2, #1]
   153ac:	tst	r2, #16
   153b0:	beq	159b0 <sprintf@plt+0x4128>
   153b4:	ldr	r2, [sp, #44]	; 0x2c
   153b8:	ldr	r3, [sp, #20]
   153bc:	mov	ip, #0
   153c0:	cmp	r2, r3
   153c4:	bls	154f8 <sprintf@plt+0x3c70>
   153c8:	cmp	r7, r4
   153cc:	mov	sl, #0
   153d0:	mov	r4, r3
   153d4:	mov	r2, #0
   153d8:	bcs	15504 <sprintf@plt+0x3c7c>
   153dc:	ldr	r4, [sp, #20]
   153e0:	add	r8, r7, #3
   153e4:	mov	sl, #0
   153e8:	mov	r5, #0
   153ec:	mov	ip, #0
   153f0:	mov	r7, #0
   153f4:	mov	r3, #0
   153f8:	b	15454 <sprintf@plt+0x3bcc>
   153fc:	ldr	r2, [sp, #28]
   15400:	ldr	r1, [fp, #-40]	; 0xffffffd8
   15404:	mov	r5, #90	; 0x5a
   15408:	mvn	r0, r2
   1540c:	add	r0, r1, r0
   15410:	tst	r0, #192	; 0xc0
   15414:	bne	15990 <sprintf@plt+0x4108>
   15418:	ldr	r1, [sp, #44]	; 0x2c
   1541c:	cmp	r1, r2
   15420:	bls	15990 <sprintf@plt+0x4108>
   15424:	strb	r0, [r2]
   15428:	ldrb	r1, [r8]
   1542c:	cmp	r1, #0
   15430:	beq	159f4 <sprintf@plt+0x416c>
   15434:	cmp	r0, #0
   15438:	cmpne	r1, #46	; 0x2e
   1543c:	beq	15990 <sprintf@plt+0x4108>
   15440:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15444:	add	r0, r4, #1
   15448:	str	r0, [fp, #-40]	; 0xffffffd8
   1544c:	b	15584 <sprintf@plt+0x3cfc>
   15450:	ldrb	r1, [r8], #1
   15454:	uxtb	r1, r1
   15458:	cmp	r1, #47	; 0x2f
   1545c:	beq	1549c <sprintf@plt+0x3c14>
   15460:	cmp	r1, #93	; 0x5d
   15464:	beq	15598 <sprintf@plt+0x3d10>
   15468:	ldr	r2, [r0]
   1546c:	cmp	r3, #0
   15470:	add	r2, r2, r1, lsl #1
   15474:	ldrh	r2, [r2]
   15478:	beq	154a4 <sprintf@plt+0x3c1c>
   1547c:	tst	r2, #2048	; 0x800
   15480:	beq	159b0 <sprintf@plt+0x4128>
   15484:	cmp	r7, #0
   15488:	bne	154e0 <sprintf@plt+0x3c58>
   1548c:	cmp	r1, #48	; 0x30
   15490:	beq	159b0 <sprintf@plt+0x4128>
   15494:	sub	r7, r8, #1
   15498:	b	154e0 <sprintf@plt+0x3c58>
   1549c:	mov	r3, #1
   154a0:	b	154e0 <sprintf@plt+0x3c58>
   154a4:	tst	r2, #4096	; 0x1000
   154a8:	beq	159b0 <sprintf@plt+0x4128>
   154ac:	add	sl, sl, #4
   154b0:	cmp	sl, #256	; 0x100
   154b4:	bgt	159b0 <sprintf@plt+0x4128>
   154b8:	ldr	r2, [pc, #1516]	; 15aac <sprintf@plt+0x4224>
   154bc:	add	r5, r5, #4
   154c0:	mov	r3, #0
   154c4:	cmp	r5, #8
   154c8:	moveq	r3, #0
   154cc:	moveq	r5, #0
   154d0:	add	r2, pc, r2
   154d4:	ldrb	r1, [r2, r1]
   154d8:	add	ip, r1, ip, lsl #4
   154dc:	strbeq	ip, [r4], #1
   154e0:	cmp	r8, r9
   154e4:	mov	r2, #0
   154e8:	ldrcc	r1, [sp, #44]	; 0x2c
   154ec:	cmpcc	r4, r1
   154f0:	bcs	15504 <sprintf@plt+0x3c7c>
   154f4:	b	15450 <sprintf@plt+0x3bc8>
   154f8:	mov	sl, #0
   154fc:	mov	r4, r3
   15500:	mov	r2, #0
   15504:	mov	r5, #90	; 0x5a
   15508:	cmp	r8, r9
   1550c:	bcs	15990 <sprintf@plt+0x4108>
   15510:	ldr	r0, [sp, #44]	; 0x2c
   15514:	ldr	r1, [sp, #28]
   15518:	cmp	r4, r0
   1551c:	bcs	15990 <sprintf@plt+0x4108>
   15520:	cmp	r2, #1
   15524:	blt	15554 <sprintf@plt+0x3ccc>
   15528:	add	r0, r2, #3
   1552c:	bic	r0, r0, #3
   15530:	cmp	r0, sl
   15534:	bne	159b0 <sprintf@plt+0x4128>
   15538:	sub	r0, r2, sl
   1553c:	mov	r7, #255	; 0xff
   15540:	mov	r5, #22
   15544:	add	r0, r0, #8
   15548:	tst	ip, r7, lsr r0
   1554c:	beq	15558 <sprintf@plt+0x3cd0>
   15550:	b	15990 <sprintf@plt+0x4108>
   15554:	mov	r2, sl
   15558:	mov	r0, #65	; 0x41
   1555c:	strb	r0, [r1]
   15560:	subs	r0, r2, #256	; 0x100
   15564:	ldr	r1, [fp, #-40]	; 0xffffffd8
   15568:	movne	r0, r2
   1556c:	strb	r0, [r1]
   15570:	add	r0, r4, #1
   15574:	str	r0, [fp, #-40]	; 0xffffffd8
   15578:	ldrb	r1, [r8], #1
   1557c:	cmp	r1, #46	; 0x2e
   15580:	bne	159e0 <sprintf@plt+0x4158>
   15584:	ldrb	r1, [r8]
   15588:	mov	r7, r8
   1558c:	cmp	r1, #0
   15590:	bne	15260 <sprintf@plt+0x39d8>
   15594:	b	155f0 <sprintf@plt+0x3d68>
   15598:	cmp	r3, #0
   1559c:	beq	155d8 <sprintf@plt+0x3d50>
   155a0:	cmp	r7, #0
   155a4:	str	ip, [sp, #16]
   155a8:	beq	159b0 <sprintf@plt+0x4128>
   155ac:	mov	r0, r7
   155b0:	sub	r1, fp, #36	; 0x24
   155b4:	mov	r2, #10
   155b8:	bl	116e4 <strtol@plt>
   155bc:	mov	r2, r0
   155c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   155c4:	ldrb	r0, [r0]
   155c8:	cmp	r0, #93	; 0x5d
   155cc:	bne	159b0 <sprintf@plt+0x4128>
   155d0:	ldr	ip, [sp, #16]
   155d4:	b	155dc <sprintf@plt+0x3d54>
   155d8:	mov	r2, #0
   155dc:	cmp	r5, #0
   155e0:	lslne	r0, ip, #4
   155e4:	strbne	r0, [r4], #1
   155e8:	b	15504 <sprintf@plt+0x3c7c>
   155ec:	add	r4, sp, #129	; 0x81
   155f0:	mvn	r1, r4
   155f4:	mov	r5, #90	; 0x5a
   155f8:	add	r0, r0, r1
   155fc:	tst	r0, #192	; 0xc0
   15600:	bne	15990 <sprintf@plt+0x4108>
   15604:	ldr	r1, [sp, #44]	; 0x2c
   15608:	mov	r2, r4
   1560c:	mov	r5, #90	; 0x5a
   15610:	cmp	r4, r1
   15614:	bcs	15990 <sprintf@plt+0x4108>
   15618:	cmp	r0, #0
   1561c:	strb	r0, [r2]
   15620:	beq	15644 <sprintf@plt+0x3dbc>
   15624:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15628:	ldr	r1, [sp, #44]	; 0x2c
   1562c:	cmp	r0, r1
   15630:	bcs	15990 <sprintf@plt+0x4108>
   15634:	add	r1, r0, #1
   15638:	str	r1, [fp, #-40]	; 0xffffffd8
   1563c:	mov	r1, #0
   15640:	strb	r1, [r0]
   15644:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15648:	add	r1, sp, #129	; 0x81
   1564c:	sub	r0, r0, r1
   15650:	cmp	r0, #256	; 0x100
   15654:	bge	15990 <sprintf@plt+0x4108>
   15658:	ldr	r0, [sp, #36]	; 0x24
   1565c:	ldr	r9, [sp, #48]	; 0x30
   15660:	ldr	r8, [sp, #40]	; 0x28
   15664:	ldr	r3, [sp, #32]
   15668:	add	r1, sp, #48	; 0x30
   1566c:	mov	r7, #0
   15670:	add	r4, r0, #12
   15674:	mov	r0, #0
   15678:	cmp	r9, #0
   1567c:	beq	15690 <sprintf@plt+0x3e08>
   15680:	mov	r7, r1
   15684:	ldr	r2, [r7, #4]!
   15688:	cmp	r2, #0
   1568c:	bne	15684 <sprintf@plt+0x3dfc>
   15690:	add	r1, r1, #4
   15694:	mov	r2, #1
   15698:	str	r1, [sp, #20]
   1569c:	add	r1, r4, r3
   156a0:	str	r1, [sp, #32]
   156a4:	add	r1, sp, #129	; 0x81
   156a8:	ldrb	r3, [r1]
   156ac:	cmp	r3, #192	; 0xc0
   156b0:	bcs	159d0 <sprintf@plt+0x4148>
   156b4:	and	r6, r3, #192	; 0xc0
   156b8:	cmp	r6, #64	; 0x40
   156bc:	beq	156d0 <sprintf@plt+0x3e48>
   156c0:	cmp	r6, #192	; 0xc0
   156c4:	mov	r6, r3
   156c8:	bne	156ec <sprintf@plt+0x3e64>
   156cc:	b	159a4 <sprintf@plt+0x411c>
   156d0:	cmp	r3, #65	; 0x41
   156d4:	bne	159a4 <sprintf@plt+0x411c>
   156d8:	ldrb	r5, [r1, #1]
   156dc:	add	r6, r5, #7
   156e0:	cmp	r5, #0
   156e4:	add	r6, r2, r6, lsr #3
   156e8:	movweq	r6, #33	; 0x21
   156ec:	add	r6, r6, #1
   156f0:	add	r0, r6, r0
   156f4:	cmp	r0, #256	; 0x100
   156f8:	bge	159d0 <sprintf@plt+0x4148>
   156fc:	add	r1, r1, r6
   15700:	cmp	r3, #0
   15704:	bne	156a8 <sprintf@plt+0x3e20>
   15708:	add	r0, sp, #48	; 0x30
   1570c:	mov	r6, r4
   15710:	add	sl, sp, #129	; 0x81
   15714:	str	r4, [sp]
   15718:	str	r7, [sp, #12]
   1571c:	add	r0, r0, #76	; 0x4c
   15720:	str	r0, [sp, #8]
   15724:	mov	r0, #1
   15728:	ldrb	r3, [sl]
   1572c:	cmp	r9, #0
   15730:	str	r0, [sp, #44]	; 0x2c
   15734:	cmpne	r3, #0
   15738:	bne	15784 <sprintf@plt+0x3efc>
   1573c:	cmp	r3, #191	; 0xbf
   15740:	bhi	159c4 <sprintf@plt+0x413c>
   15744:	ldrb	r0, [sl]
   15748:	mvn	r5, #0
   1574c:	and	r1, r0, #192	; 0xc0
   15750:	cmp	r1, #192	; 0xc0
   15754:	beq	158c8 <sprintf@plt+0x4040>
   15758:	cmp	r1, #64	; 0x40
   1575c:	bne	158c4 <sprintf@plt+0x403c>
   15760:	cmp	r0, #65	; 0x41
   15764:	bne	158c8 <sprintf@plt+0x4040>
   15768:	ldrb	r0, [sl, #1]
   1576c:	mov	r2, #1
   15770:	add	r1, r0, #7
   15774:	cmp	r0, #0
   15778:	add	r5, r2, r1, lsr #3
   1577c:	movweq	r5, #33	; 0x21
   15780:	b	158c8 <sprintf@plt+0x4040>
   15784:	ldr	r0, [sp, #20]
   15788:	mov	r4, #2
   1578c:	str	r3, [sp, #28]
   15790:	cmp	r0, r7
   15794:	bcs	15914 <sprintf@plt+0x408c>
   15798:	str	r6, [sp, #4]
   1579c:	ldr	r1, [r0]
   157a0:	str	r0, [sp, #16]
   157a4:	ldrb	r8, [r1]
   157a8:	sub	r0, r8, #1
   157ac:	uxtb	r0, r0
   157b0:	cmp	r0, #62	; 0x3e
   157b4:	bls	157e4 <sprintf@plt+0x3f5c>
   157b8:	ldr	r0, [sp, #16]
   157bc:	add	r0, r0, #4
   157c0:	cmp	r0, r7
   157c4:	bcc	1579c <sprintf@plt+0x3f14>
   157c8:	b	1590c <sprintf@plt+0x4084>
   157cc:	uxtab	r1, r1, r8
   157d0:	ldrb	r8, [r1, #1]!
   157d4:	sub	r0, r8, #1
   157d8:	uxtb	r0, r0
   157dc:	cmp	r0, #63	; 0x3f
   157e0:	bcs	157b8 <sprintf@plt+0x3f30>
   157e4:	sub	ip, r1, r9
   157e8:	cmp	ip, #16384	; 0x4000
   157ec:	bge	157b8 <sprintf@plt+0x3f30>
   157f0:	mov	r2, r8
   157f4:	mov	lr, sl
   157f8:	mov	r6, r1
   157fc:	tst	r2, #255	; 0xff
   15800:	beq	157cc <sprintf@plt+0x3f44>
   15804:	and	r0, r2, #192	; 0xc0
   15808:	add	r6, r6, #1
   1580c:	cmp	r0, #192	; 0xc0
   15810:	bne	15834 <sprintf@plt+0x3fac>
   15814:	ldrb	r0, [r6]
   15818:	and	r2, r2, #63	; 0x3f
   1581c:	mov	r6, r9
   15820:	orr	r0, r0, r2, lsl #8
   15824:	ldrb	r2, [r6, r0]!
   15828:	cmp	r2, #0
   1582c:	bne	15804 <sprintf@plt+0x3f7c>
   15830:	b	157cc <sprintf@plt+0x3f44>
   15834:	cmp	r0, #0
   15838:	bne	15908 <sprintf@plt+0x4080>
   1583c:	ldrb	r0, [lr]
   15840:	uxtb	r2, r2
   15844:	cmp	r2, r0
   15848:	bne	157cc <sprintf@plt+0x3f44>
   1584c:	ldrb	r5, [lr, #1]
   15850:	add	r0, lr, #2
   15854:	mvn	r3, #64	; 0x40
   15858:	uxtb	r4, r5
   1585c:	uxtab	r3, r3, r5
   15860:	cmp	r3, #26
   15864:	mov	r3, #32
   15868:	uxtabcc	r4, r3, r5
   1586c:	ldrb	r3, [r6]
   15870:	sub	r5, r3, #65	; 0x41
   15874:	cmp	r5, #26
   15878:	addcc	r3, r3, #32
   1587c:	cmp	r4, r3
   15880:	mov	r4, #2
   15884:	bne	157cc <sprintf@plt+0x3f44>
   15888:	ldrb	r5, [r0], #1
   1588c:	subs	r2, r2, #1
   15890:	add	r6, r6, #1
   15894:	bne	15854 <sprintf@plt+0x3fcc>
   15898:	ldrb	r2, [r6]
   1589c:	sub	lr, r0, #1
   158a0:	cmp	r5, #0
   158a4:	bne	157fc <sprintf@plt+0x3f74>
   158a8:	cmp	r2, #0
   158ac:	bne	157cc <sprintf@plt+0x3f44>
   158b0:	ldr	r8, [sp, #40]	; 0x28
   158b4:	ldr	r6, [sp, #4]
   158b8:	cmp	ip, #0
   158bc:	bmi	1591c <sprintf@plt+0x4094>
   158c0:	b	15a34 <sprintf@plt+0x41ac>
   158c4:	mov	r5, r0
   158c8:	ldr	r1, [sp, #32]
   158cc:	add	r0, r6, r5
   158d0:	add	r0, r0, #1
   158d4:	cmp	r0, r1
   158d8:	bcs	159c4 <sprintf@plt+0x413c>
   158dc:	add	r4, r5, #1
   158e0:	mov	r0, r6
   158e4:	mov	r1, sl
   158e8:	mov	r2, r4
   158ec:	bl	116b4 <memcpy@plt>
   158f0:	ldr	r0, [sp, #44]	; 0x2c
   158f4:	add	r6, r6, r4
   158f8:	add	sl, sl, r4
   158fc:	cmp	r5, #0
   15900:	bne	15728 <sprintf@plt+0x3ea0>
   15904:	b	159b8 <sprintf@plt+0x4130>
   15908:	mov	r4, #90	; 0x5a
   1590c:	ldr	r8, [sp, #40]	; 0x28
   15910:	ldr	r6, [sp, #4]
   15914:	bl	1187c <__errno_location@plt>
   15918:	str	r4, [r0]
   1591c:	ldr	r0, [sp, #8]
   15920:	ldr	r1, [sp, #12]
   15924:	cmp	r1, r0
   15928:	bcs	15970 <sprintf@plt+0x40e8>
   1592c:	ldr	r3, [sp, #28]
   15930:	sub	r0, r6, r9
   15934:	cmp	r0, #16384	; 0x4000
   15938:	bge	1573c <sprintf@plt+0x3eb4>
   1593c:	ldr	r0, [sp, #44]	; 0x2c
   15940:	cmp	r0, #0
   15944:	beq	1573c <sprintf@plt+0x3eb4>
   15948:	ldr	r0, [sp, #12]
   1594c:	mov	r2, #0
   15950:	mov	r1, #0
   15954:	str	r1, [sp, #44]	; 0x2c
   15958:	str	r6, [r0]
   1595c:	str	r2, [r0, #4]!
   15960:	str	r0, [sp, #12]
   15964:	cmp	r3, #191	; 0xbf
   15968:	bls	15744 <sprintf@plt+0x3ebc>
   1596c:	b	159c4 <sprintf@plt+0x413c>
   15970:	ldr	r3, [sp, #28]
   15974:	cmp	r3, #191	; 0xbf
   15978:	bls	15744 <sprintf@plt+0x3ebc>
   1597c:	b	159c4 <sprintf@plt+0x413c>
   15980:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15984:	ldr	r4, [sp, #28]
   15988:	b	155f0 <sprintf@plt+0x3d68>
   1598c:	mov	r5, #90	; 0x5a
   15990:	bl	1187c <__errno_location@plt>
   15994:	str	r5, [r0]
   15998:	mvn	r0, #0
   1599c:	sub	sp, fp, #28
   159a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159a4:	bl	1187c <__errno_location@plt>
   159a8:	mov	r1, #22
   159ac:	b	159d8 <sprintf@plt+0x4150>
   159b0:	mov	r5, #22
   159b4:	b	15990 <sprintf@plt+0x4108>
   159b8:	ldr	r0, [sp, #32]
   159bc:	cmp	r6, r0
   159c0:	bls	15a58 <sprintf@plt+0x41d0>
   159c4:	cmp	r9, #0
   159c8:	movne	r0, #0
   159cc:	strne	r0, [r7]
   159d0:	bl	1187c <__errno_location@plt>
   159d4:	mov	r1, #90	; 0x5a
   159d8:	str	r1, [r0]
   159dc:	b	15998 <sprintf@plt+0x4110>
   159e0:	mov	r5, #22
   159e4:	cmp	r1, #0
   159e8:	bne	15990 <sprintf@plt+0x4108>
   159ec:	mov	r0, #0
   159f0:	b	15604 <sprintf@plt+0x3d7c>
   159f4:	cmp	r0, #0
   159f8:	beq	15a1c <sprintf@plt+0x4194>
   159fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15a00:	ldr	r1, [sp, #44]	; 0x2c
   15a04:	cmp	r0, r1
   15a08:	bcs	15990 <sprintf@plt+0x4108>
   15a0c:	add	r1, r0, #1
   15a10:	str	r1, [fp, #-40]	; 0xffffffd8
   15a14:	mov	r1, #0
   15a18:	strb	r1, [r0]
   15a1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15a20:	add	r1, sp, #129	; 0x81
   15a24:	sub	r0, r0, r1
   15a28:	cmp	r0, #255	; 0xff
   15a2c:	ble	15658 <sprintf@plt+0x3dd0>
   15a30:	b	15990 <sprintf@plt+0x4108>
   15a34:	ldr	r1, [sp, #32]
   15a38:	add	r0, r6, #1
   15a3c:	cmp	r0, r1
   15a40:	bcs	159c4 <sprintf@plt+0x413c>
   15a44:	mov	r0, #192	; 0xc0
   15a48:	strb	ip, [r6, #1]
   15a4c:	orr	r0, r0, ip, lsr #8
   15a50:	strb	r0, [r6]
   15a54:	add	r6, r6, #2
   15a58:	ldr	r0, [sp]
   15a5c:	subs	r0, r6, r0
   15a60:	mvn	r0, #0
   15a64:	bmi	15aa0 <sprintf@plt+0x4218>
   15a68:	ldr	r0, [sp, #24]
   15a6c:	ldr	r2, [sp, #36]	; 0x24
   15a70:	mov	r1, #256	; 0x100
   15a74:	strb	r0, [r6, #3]
   15a78:	lsr	r0, r0, #8
   15a7c:	strb	r8, [r6, #1]
   15a80:	strb	r0, [r6, #2]
   15a84:	lsr	r0, r8, #8
   15a88:	strb	r0, [r6]
   15a8c:	ldr	r0, [r2, #4]
   15a90:	bfi	r0, r1, #0, #16
   15a94:	str	r0, [r2, #4]
   15a98:	sub	r0, r6, r2
   15a9c:	add	r0, r0, #4
   15aa0:	sub	sp, fp, #28
   15aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aa8:	andeq	r4, r0, r6, asr #5
   15aac:	andeq	r4, r0, sp, asr r0
   15ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ab4:	add	fp, sp, #28
   15ab8:	sub	sp, sp, #20
   15abc:	ldr	r4, [r2, #8]
   15ac0:	mov	r5, r2
   15ac4:	mov	r0, r4
   15ac8:	bl	11690 <strlen@plt>
   15acc:	add	r0, r0, #1
   15ad0:	bl	11780 <malloc@plt>
   15ad4:	cmp	r0, #0
   15ad8:	beq	15e04 <sprintf@plt+0x457c>
   15adc:	mov	r1, r4
   15ae0:	str	r5, [sp, #4]
   15ae4:	bl	116fc <strcpy@plt>
   15ae8:	ldrb	r1, [r0]
   15aec:	mov	r5, #0
   15af0:	str	r0, [sp]
   15af4:	cmp	r1, #42	; 0x2a
   15af8:	bne	15b0c <sprintf@plt+0x4284>
   15afc:	mov	r0, #0
   15b00:	mov	r6, #0
   15b04:	str	r0, [sp, #8]
   15b08:	b	15c3c <sprintf@plt+0x43b4>
   15b0c:	ldr	r1, [pc, #800]	; 15e34 <sprintf@plt+0x45ac>
   15b10:	add	r2, sp, #16
   15b14:	add	r1, pc, r1
   15b18:	bl	11570 <rb_strtok_r@plt>
   15b1c:	mov	r8, r0
   15b20:	cmp	r0, #0
   15b24:	mov	r0, #0
   15b28:	mov	r6, #0
   15b2c:	str	r0, [sp, #8]
   15b30:	beq	15c3c <sprintf@plt+0x43b4>
   15b34:	mov	r0, #0
   15b38:	mov	r6, #0
   15b3c:	mov	sl, #0
   15b40:	str	r0, [sp, #8]
   15b44:	b	15b84 <sprintf@plt+0x42fc>
   15b48:	ldr	r0, [sp, #8]
   15b4c:	cmp	r0, #0
   15b50:	moveq	r0, r5
   15b54:	str	r0, [sp, #8]
   15b58:	ldr	r6, [sp, #12]
   15b5c:	ldr	r1, [pc, #736]	; 15e44 <sprintf@plt+0x45bc>
   15b60:	mov	r0, #0
   15b64:	add	r2, sp, #16
   15b68:	add	r1, pc, r1
   15b6c:	bl	11570 <rb_strtok_r@plt>
   15b70:	mov	r8, r0
   15b74:	add	r6, r6, #1
   15b78:	cmp	r0, #0
   15b7c:	mov	sl, r5
   15b80:	beq	15c3c <sprintf@plt+0x43b4>
   15b84:	mov	r0, #1
   15b88:	mov	r1, #72	; 0x48
   15b8c:	str	r6, [sp, #12]
   15b90:	bl	115a0 <calloc@plt>
   15b94:	cmp	r0, #0
   15b98:	beq	15e04 <sprintf@plt+0x457c>
   15b9c:	mov	r5, r0
   15ba0:	mov	r9, #2
   15ba4:	mov	r7, #0
   15ba8:	mov	r4, r8
   15bac:	b	15bb4 <sprintf@plt+0x432c>
   15bb0:	add	r4, r4, #1
   15bb4:	ldrb	r6, [r4]
   15bb8:	cmp	r6, #46	; 0x2e
   15bbc:	beq	15be4 <sprintf@plt+0x435c>
   15bc0:	cmp	r6, #0
   15bc4:	beq	15bf8 <sprintf@plt+0x4370>
   15bc8:	bl	1175c <__ctype_b_loc@plt>
   15bcc:	ldr	r0, [r0]
   15bd0:	add	r0, r0, r6, lsl #1
   15bd4:	ldrb	r0, [r0, #1]
   15bd8:	tst	r0, #8
   15bdc:	bne	15bb0 <sprintf@plt+0x4328>
   15be0:	b	15ddc <sprintf@plt+0x4554>
   15be4:	cmp	r7, #3
   15be8:	bge	15df8 <sprintf@plt+0x4570>
   15bec:	add	r7, r7, #1
   15bf0:	mov	r9, #1
   15bf4:	b	15bb0 <sprintf@plt+0x4328>
   15bf8:	sub	r0, r7, #1
   15bfc:	cmp	r0, #2
   15c00:	bcc	15e08 <sprintf@plt+0x4580>
   15c04:	add	r0, r5, #4
   15c08:	mov	r1, r8
   15c0c:	mov	r2, #53	; 0x35
   15c10:	str	r9, [r5]
   15c14:	bl	11618 <rb_strlcpy@plt>
   15c18:	mov	r0, #0
   15c1c:	str	r5, [r5, #60]	; 0x3c
   15c20:	cmp	sl, #0
   15c24:	str	r0, [r5, #64]	; 0x40
   15c28:	str	sl, [r5, #68]	; 0x44
   15c2c:	add	r5, r5, #60	; 0x3c
   15c30:	beq	15b48 <sprintf@plt+0x42c0>
   15c34:	str	r5, [sl, #4]
   15c38:	b	15b58 <sprintf@plt+0x42d0>
   15c3c:	ldr	r0, [sp]
   15c40:	bl	1163c <free@plt>
   15c44:	ldr	r4, [sp, #4]
   15c48:	mov	r1, #0
   15c4c:	mov	r2, #10
   15c50:	ldr	r0, [r4, #4]
   15c54:	bl	116e4 <strtol@plt>
   15c58:	ands	sl, r0, #3
   15c5c:	beq	15c74 <sprintf@plt+0x43ec>
   15c60:	ldr	r9, [r4]
   15c64:	cmp	r9, #0
   15c68:	ldrne	r8, [r4, #12]
   15c6c:	cmpne	r8, #0
   15c70:	bne	15c8c <sprintf@plt+0x4404>
   15c74:	ldr	r1, [pc, #472]	; 15e54 <sprintf@plt+0x45cc>
   15c78:	add	r1, pc, r1
   15c7c:	mov	r0, #67	; 0x43
   15c80:	bl	124f8 <sprintf@plt+0xc70>
   15c84:	mov	r0, #3
   15c88:	bl	11870 <exit@plt>
   15c8c:	ldr	r7, [pc, #436]	; 15e48 <sprintf@plt+0x45c0>
   15c90:	ldr	r7, [pc, r7]
   15c94:	cmp	r7, #0
   15c98:	beq	15cc0 <sprintf@plt+0x4438>
   15c9c:	ldr	r4, [r7]
   15ca0:	mov	r1, r9
   15ca4:	mov	r0, r4
   15ca8:	bl	11594 <strcasecmp@plt>
   15cac:	cmp	r0, #0
   15cb0:	beq	15d18 <sprintf@plt+0x4490>
   15cb4:	ldr	r7, [r7, #8]
   15cb8:	cmp	r7, #0
   15cbc:	bne	15c9c <sprintf@plt+0x4414>
   15cc0:	mov	r0, #1
   15cc4:	mov	r1, #800	; 0x320
   15cc8:	bl	115a0 <calloc@plt>
   15ccc:	cmp	r0, #0
   15cd0:	beq	15e04 <sprintf@plt+0x457c>
   15cd4:	mov	r4, r0
   15cd8:	bl	11804 <rb_make_rb_dlink_node@plt>
   15cdc:	cmp	r0, #0
   15ce0:	beq	15e14 <sprintf@plt+0x458c>
   15ce4:	mov	r1, #0
   15ce8:	str	r1, [r0, #4]
   15cec:	str	r4, [r0]
   15cf0:	ldr	r2, [pc, #340]	; 15e4c <sprintf@plt+0x45c4>
   15cf4:	ldr	r2, [pc, r2]
   15cf8:	str	r2, [r0, #8]
   15cfc:	cmp	r2, #0
   15d00:	ldr	r1, [pc, #328]	; 15e50 <sprintf@plt+0x45c8>
   15d04:	add	r1, pc, r1
   15d08:	beq	15d2c <sprintf@plt+0x44a4>
   15d0c:	add	r2, r2, #4
   15d10:	str	r0, [r2]
   15d14:	b	15d3c <sprintf@plt+0x44b4>
   15d18:	cmp	r4, #0
   15d1c:	beq	15cc0 <sprintf@plt+0x4438>
   15d20:	mov	r0, #0
   15d24:	strb	r0, [r4, #784]	; 0x310
   15d28:	b	15d4c <sprintf@plt+0x44c4>
   15d2c:	mov	r2, r1
   15d30:	ldr	r3, [r2, #4]!
   15d34:	cmp	r3, #0
   15d38:	streq	r0, [r2]
   15d3c:	str	r0, [r1]
   15d40:	ldr	r0, [r1, #8]
   15d44:	add	r0, r0, #1
   15d48:	str	r0, [r1, #8]
   15d4c:	mov	r0, r4
   15d50:	mov	r1, r9
   15d54:	mov	r2, #256	; 0x100
   15d58:	bl	11618 <rb_strlcpy@plt>
   15d5c:	add	r0, r4, #256	; 0x100
   15d60:	mov	r1, r8
   15d64:	mov	r2, #512	; 0x200
   15d68:	bl	11618 <rb_strlcpy@plt>
   15d6c:	cmp	r5, #0
   15d70:	strb	sl, [r4, #768]	; 0x300
   15d74:	beq	15da4 <sprintf@plt+0x451c>
   15d78:	ldr	r0, [r4, #772]	; 0x304
   15d7c:	cmp	r0, #0
   15d80:	beq	15dbc <sprintf@plt+0x4534>
   15d84:	ldr	r1, [sp, #8]
   15d88:	str	r0, [r1, #8]
   15d8c:	str	r1, [r0, #4]
   15d90:	str	r5, [r4, #772]	; 0x304
   15d94:	ldr	r0, [r4, #780]	; 0x30c
   15d98:	add	r0, r0, r6
   15d9c:	str	r0, [r4, #780]	; 0x30c
   15da0:	b	15dcc <sprintf@plt+0x4544>
   15da4:	mov	r0, #0
   15da8:	cmp	r4, #0
   15dac:	str	r0, [r4, #796]	; 0x31c
   15db0:	beq	15c74 <sprintf@plt+0x43ec>
   15db4:	sub	sp, fp, #28
   15db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dbc:	ldr	r0, [sp, #8]
   15dc0:	str	r5, [r4, #772]	; 0x304
   15dc4:	str	r0, [r4, #776]	; 0x308
   15dc8:	str	r6, [r4, #780]	; 0x30c
   15dcc:	mov	r0, #0
   15dd0:	str	r0, [r4, #796]	; 0x31c
   15dd4:	sub	sp, fp, #28
   15dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ddc:	ldr	r1, [pc, #92]	; 15e40 <sprintf@plt+0x45b8>
   15de0:	mov	r0, #67	; 0x43
   15de4:	mov	r2, r6
   15de8:	add	r1, pc, r1
   15dec:	bl	124f8 <sprintf@plt+0xc70>
   15df0:	mov	r0, #3
   15df4:	bl	11870 <exit@plt>
   15df8:	ldr	r1, [pc, #60]	; 15e3c <sprintf@plt+0x45b4>
   15dfc:	add	r1, pc, r1
   15e00:	b	15c7c <sprintf@plt+0x43f4>
   15e04:	bl	11750 <rb_outofmemory@plt>
   15e08:	ldr	r1, [pc, #40]	; 15e38 <sprintf@plt+0x45b0>
   15e0c:	add	r1, pc, r1
   15e10:	b	15c7c <sprintf@plt+0x43f4>
   15e14:	ldr	r0, [pc, #60]	; 15e58 <sprintf@plt+0x45d0>
   15e18:	ldr	r1, [pc, #60]	; 15e5c <sprintf@plt+0x45d4>
   15e1c:	ldr	r3, [pc, #60]	; 15e60 <sprintf@plt+0x45d8>
   15e20:	mov	r2, #144	; 0x90
   15e24:	add	r0, pc, r0
   15e28:	add	r1, pc, r1
   15e2c:	add	r3, pc, r3
   15e30:	bl	11600 <__assert_fail@plt>
   15e34:	andeq	r3, r0, sp, lsr fp
   15e38:	ldrdeq	r3, [r0], -r1
   15e3c:	andeq	r3, r0, r7, asr r8
   15e40:	andeq	r3, r0, r5, lsr #17
   15e44:	andeq	r3, r0, r9, ror #21
   15e48:	muleq	r1, r4, r3
   15e4c:	andeq	r9, r1, r0, lsr r3
   15e50:	andeq	r9, r1, r0, lsr #6
   15e54:	andeq	r3, r0, r3, lsr #21
   15e58:	ldrdeq	r3, [r0], -ip
   15e5c:	andeq	r3, r0, r2, ror #9
   15e60:	andeq	r3, r0, sp, lsr r5
   15e64:	push	{r4, r5, r6, r7, fp, lr}
   15e68:	add	fp, sp, #16
   15e6c:	ldr	r5, [r2]
   15e70:	ldr	r6, [pc, #232]	; 15f60 <sprintf@plt+0x46d8>
   15e74:	ldr	r6, [pc, r6]
   15e78:	cmp	r6, #0
   15e7c:	beq	15eec <sprintf@plt+0x4664>
   15e80:	mov	r7, r6
   15e84:	ldr	r4, [r7]
   15e88:	mov	r1, r5
   15e8c:	mov	r0, r4
   15e90:	bl	11594 <strcasecmp@plt>
   15e94:	cmp	r0, #0
   15e98:	beq	15eac <sprintf@plt+0x4624>
   15e9c:	ldr	r7, [r7, #8]
   15ea0:	cmp	r7, #0
   15ea4:	bne	15e84 <sprintf@plt+0x45fc>
   15ea8:	b	15eec <sprintf@plt+0x4664>
   15eac:	cmp	r4, #0
   15eb0:	beq	15eec <sprintf@plt+0x4664>
   15eb4:	ldr	r0, [r4, #788]	; 0x314
   15eb8:	cmp	r0, #0
   15ebc:	ble	15ee0 <sprintf@plt+0x4658>
   15ec0:	mov	r0, #1
   15ec4:	strb	r0, [r4, #784]	; 0x310
   15ec8:	pop	{r4, r5, r6, r7, fp, pc}
   15ecc:	ldr	r1, [r6]
   15ed0:	mov	r0, r6
   15ed4:	ldr	r6, [r6, #8]
   15ed8:	cmp	r1, r4
   15edc:	beq	15f04 <sprintf@plt+0x467c>
   15ee0:	cmp	r6, #0
   15ee4:	bne	15ecc <sprintf@plt+0x4644>
   15ee8:	b	15f54 <sprintf@plt+0x46cc>
   15eec:	ldr	r1, [pc, #116]	; 15f68 <sprintf@plt+0x46e0>
   15ef0:	mov	r0, #87	; 0x57
   15ef4:	mov	r2, r5
   15ef8:	add	r1, pc, r1
   15efc:	pop	{r4, r5, r6, r7, fp, lr}
   15f00:	b	124f8 <sprintf@plt+0xc70>
   15f04:	ldr	r2, [r0, #4]
   15f08:	ldr	r1, [pc, #84]	; 15f64 <sprintf@plt+0x46dc>
   15f0c:	cmp	r6, #0
   15f10:	add	r1, pc, r1
   15f14:	beq	15f24 <sprintf@plt+0x469c>
   15f18:	str	r2, [r6, #4]
   15f1c:	ldr	r2, [r0, #4]
   15f20:	b	15f28 <sprintf@plt+0x46a0>
   15f24:	str	r2, [r1, #4]
   15f28:	cmp	r2, #0
   15f2c:	mov	r3, r1
   15f30:	addne	r3, r2, #8
   15f34:	mov	r2, #0
   15f38:	str	r6, [r3]
   15f3c:	str	r2, [r0, #4]
   15f40:	str	r2, [r0, #8]
   15f44:	ldr	r2, [r1, #8]
   15f48:	sub	r2, r2, #1
   15f4c:	str	r2, [r1, #8]
   15f50:	bl	116c0 <rb_free_rb_dlink_node@plt>
   15f54:	mov	r0, r4
   15f58:	pop	{r4, r5, r6, r7, fp, lr}
   15f5c:	b	1163c <free@plt>
   15f60:			; <UNDEFINED> instruction: 0x000191b0
   15f64:	andeq	r9, r1, r4, lsl r1
   15f68:	andeq	r3, r0, r0, asr r8
   15f6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f70:	add	fp, sp, #24
   15f74:	ldr	r5, [pc, #184]	; 16034 <sprintf@plt+0x47ac>
   15f78:	ldr	r5, [pc, r5]
   15f7c:	cmp	r5, #0
   15f80:	beq	16030 <sprintf@plt+0x47a8>
   15f84:	ldr	r7, [pc, #172]	; 16038 <sprintf@plt+0x47b0>
   15f88:	mov	r6, #1
   15f8c:	mov	r8, #0
   15f90:	add	r7, pc, r7
   15f94:	b	15fa4 <sprintf@plt+0x471c>
   15f98:	strb	r6, [r4, #784]	; 0x310
   15f9c:	cmp	r5, #0
   15fa0:	beq	16030 <sprintf@plt+0x47a8>
   15fa4:	ldr	r4, [r5]
   15fa8:	ldr	r5, [r5, #8]
   15fac:	ldr	r0, [r4, #788]	; 0x314
   15fb0:	cmp	r0, #1
   15fb4:	bge	15f98 <sprintf@plt+0x4710>
   15fb8:	ldr	r1, [pc, #124]	; 1603c <sprintf@plt+0x47b4>
   15fbc:	ldr	r1, [pc, r1]
   15fc0:	cmp	r1, #0
   15fc4:	beq	16020 <sprintf@plt+0x4798>
   15fc8:	ldr	r2, [r1]
   15fcc:	mov	r0, r1
   15fd0:	ldr	r1, [r1, #8]
   15fd4:	cmp	r2, r4
   15fd8:	bne	15fc0 <sprintf@plt+0x4738>
   15fdc:	ldr	r2, [r0, #4]
   15fe0:	cmp	r1, #0
   15fe4:	beq	15ff4 <sprintf@plt+0x476c>
   15fe8:	str	r2, [r1, #4]
   15fec:	ldr	r2, [r0, #4]
   15ff0:	b	15ff8 <sprintf@plt+0x4770>
   15ff4:	str	r2, [r7, #4]
   15ff8:	cmp	r2, #0
   15ffc:	mov	r3, r7
   16000:	addne	r3, r2, #8
   16004:	str	r1, [r3]
   16008:	str	r8, [r0, #4]
   1600c:	str	r8, [r0, #8]
   16010:	ldr	r1, [r7, #8]
   16014:	sub	r1, r1, #1
   16018:	str	r1, [r7, #8]
   1601c:	bl	116c0 <rb_free_rb_dlink_node@plt>
   16020:	mov	r0, r4
   16024:	bl	1163c <free@plt>
   16028:	cmp	r5, #0
   1602c:	bne	15fa4 <sprintf@plt+0x471c>
   16030:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16034:	andeq	r9, r1, ip, lsr #1
   16038:	muleq	r1, r4, r0
   1603c:	andeq	r9, r1, r8, rrx
   16040:	push	{fp, lr}
   16044:	mov	fp, sp
   16048:	ldr	r0, [r2]
   1604c:	mov	r1, #0
   16050:	mov	r2, #10
   16054:	bl	116e4 <strtol@plt>
   16058:	cmn	r0, #1
   1605c:	mov	r2, r0
   16060:	ldrgt	r0, [pc, #32]	; 16088 <sprintf@plt+0x4800>
   16064:	addgt	r0, pc, r0
   16068:	strgt	r2, [r0]
   1606c:	popgt	{fp, pc}
   16070:	ldr	r1, [pc, #20]	; 1608c <sprintf@plt+0x4804>
   16074:	mov	r0, #67	; 0x43
   16078:	add	r1, pc, r1
   1607c:	bl	124f8 <sprintf@plt+0xc70>
   16080:	mov	r0, #3
   16084:	bl	11870 <exit@plt>
   16088:			; <UNDEFINED> instruction: 0x00014dbc
   1608c:	strdeq	r3, [r0], -ip
   16090:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16094:	add	fp, sp, #24
   16098:	sub	sp, sp, #8
   1609c:	ldr	r6, [pc, #284]	; 161c0 <sprintf@plt+0x4938>
   160a0:	mov	r4, sp
   160a4:	mov	r1, r4
   160a8:	ldr	r6, [pc, r6]
   160ac:	ldr	r0, [r6]
   160b0:	bl	11678 <rb_dictionary_foreach_start@plt>
   160b4:	ldr	r0, [r6]
   160b8:	mov	r1, r4
   160bc:	bl	11588 <rb_dictionary_foreach_cur@plt>
   160c0:	cmp	r0, #0
   160c4:	beq	160fc <sprintf@plt+0x4874>
   160c8:	ldr	r4, [pc, #244]	; 161c4 <sprintf@plt+0x493c>
   160cc:	mov	r5, sp
   160d0:	add	r4, pc, r4
   160d4:	mov	r1, r4
   160d8:	bl	169e0 <sprintf@plt+0x5158>
   160dc:	ldr	r0, [r6]
   160e0:	mov	r1, r5
   160e4:	bl	11630 <rb_dictionary_foreach_next@plt>
   160e8:	ldr	r0, [r6]
   160ec:	mov	r1, r5
   160f0:	bl	11588 <rb_dictionary_foreach_cur@plt>
   160f4:	cmp	r0, #0
   160f8:	bne	160d4 <sprintf@plt+0x484c>
   160fc:	ldr	r5, [pc, #196]	; 161c8 <sprintf@plt+0x4940>
   16100:	ldr	r5, [pc, r5]
   16104:	cmp	r5, #0
   16108:	beq	161b8 <sprintf@plt+0x4930>
   1610c:	ldr	r7, [pc, #184]	; 161cc <sprintf@plt+0x4944>
   16110:	mov	r6, #1
   16114:	mov	r8, #0
   16118:	add	r7, pc, r7
   1611c:	b	1612c <sprintf@plt+0x48a4>
   16120:	strb	r6, [r4, #784]	; 0x310
   16124:	cmp	r5, #0
   16128:	beq	161b8 <sprintf@plt+0x4930>
   1612c:	ldr	r4, [r5]
   16130:	ldr	r5, [r5, #8]
   16134:	ldr	r0, [r4, #788]	; 0x314
   16138:	cmp	r0, #1
   1613c:	bge	16120 <sprintf@plt+0x4898>
   16140:	ldr	r1, [pc, #136]	; 161d0 <sprintf@plt+0x4948>
   16144:	ldr	r1, [pc, r1]
   16148:	cmp	r1, #0
   1614c:	beq	161a8 <sprintf@plt+0x4920>
   16150:	ldr	r2, [r1]
   16154:	mov	r0, r1
   16158:	ldr	r1, [r1, #8]
   1615c:	cmp	r2, r4
   16160:	bne	16148 <sprintf@plt+0x48c0>
   16164:	ldr	r2, [r0, #4]
   16168:	cmp	r1, #0
   1616c:	beq	1617c <sprintf@plt+0x48f4>
   16170:	str	r2, [r1, #4]
   16174:	ldr	r2, [r0, #4]
   16178:	b	16180 <sprintf@plt+0x48f8>
   1617c:	str	r2, [r7, #4]
   16180:	cmp	r2, #0
   16184:	mov	r3, r7
   16188:	addne	r3, r2, #8
   1618c:	str	r1, [r3]
   16190:	str	r8, [r0, #4]
   16194:	str	r8, [r0, #8]
   16198:	ldr	r1, [r7, #8]
   1619c:	sub	r1, r1, #1
   161a0:	str	r1, [r7, #8]
   161a4:	bl	116c0 <rb_free_rb_dlink_node@plt>
   161a8:	mov	r0, r4
   161ac:	bl	1163c <free@plt>
   161b0:	cmp	r5, #0
   161b4:	bne	1612c <sprintf@plt+0x48a4>
   161b8:	sub	sp, fp, #24
   161bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161c0:	andeq	r4, r1, ip, lsr #1
   161c4:	andeq	r3, r0, r0, lsr #15
   161c8:	andeq	r8, r1, r4, lsr #30
   161cc:	andeq	r8, r1, ip, lsl #30
   161d0:	andeq	r8, r1, r0, ror #29
   161d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   161d8:	add	fp, sp, #24
   161dc:	mov	r9, r0
   161e0:	ldr	r0, [pc, #312]	; 16320 <sprintf@plt+0x4a98>
   161e4:	add	r0, pc, r0
   161e8:	ldr	r0, [r0, #8]
   161ec:	cmp	r0, #0
   161f0:	beq	16274 <sprintf@plt+0x49ec>
   161f4:	ldr	r0, [r9, #460]	; 0x1cc
   161f8:	mov	r1, #16
   161fc:	add	r0, r0, #1
   16200:	str	r0, [r9, #460]	; 0x1cc
   16204:	ldr	r0, [pc, #284]	; 16328 <sprintf@plt+0x4aa0>
   16208:	ldr	r0, [pc, r0]
   1620c:	ldr	r5, [r0, #12]
   16210:	mov	r0, #1
   16214:	bl	115a0 <calloc@plt>
   16218:	cmp	r0, #0
   1621c:	beq	1631c <sprintf@plt+0x4a94>
   16220:	ldr	r8, [r9, #464]	; 0x1d0
   16224:	add	r1, r8, r5, lsl #4
   16228:	str	r0, [r1, #8]
   1622c:	ldr	r0, [pc, #248]	; 1632c <sprintf@plt+0x4aa4>
   16230:	ldr	r0, [pc, r0]
   16234:	ldr	r6, [r0]
   16238:	cmp	r6, #0
   1623c:	beq	162f4 <sprintf@plt+0x4a6c>
   16240:	ldr	r5, [pc, #232]	; 16330 <sprintf@plt+0x4aa8>
   16244:	mov	r7, r6
   16248:	add	r5, pc, r5
   1624c:	ldr	r4, [r7]
   16250:	mov	r1, r5
   16254:	ldr	r0, [r4, #16]
   16258:	bl	11594 <strcasecmp@plt>
   1625c:	cmp	r0, #0
   16260:	beq	16290 <sprintf@plt+0x4a08>
   16264:	ldr	r7, [r7, #8]
   16268:	cmp	r7, #0
   1626c:	bne	1624c <sprintf@plt+0x49c4>
   16270:	b	162ac <sprintf@plt+0x4a24>
   16274:	ldr	r0, [pc, #168]	; 16324 <sprintf@plt+0x4a9c>
   16278:	ldr	r0, [pc, r0]
   1627c:	ldr	r1, [r0, #12]
   16280:	mov	r0, r9
   16284:	bl	12fa0 <sprintf@plt+0x1718>
   16288:	mov	r0, #1
   1628c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16290:	cmp	r4, #0
   16294:	beq	162ac <sprintf@plt+0x4a24>
   16298:	ldr	r0, [r4, #12]
   1629c:	add	r0, r8, r0, lsl #4
   162a0:	ldr	r0, [r0, #12]
   162a4:	cmp	r0, #2
   162a8:	bne	16314 <sprintf@plt+0x4a8c>
   162ac:	ldr	r5, [r6]
   162b0:	ldr	r0, [r5, #16]
   162b4:	ldr	r1, [pc, #120]	; 16334 <sprintf@plt+0x4aac>
   162b8:	add	r1, pc, r1
   162bc:	bl	11594 <strcasecmp@plt>
   162c0:	cmp	r0, #0
   162c4:	beq	162d8 <sprintf@plt+0x4a50>
   162c8:	ldr	r6, [r6, #8]
   162cc:	cmp	r6, #0
   162d0:	bne	162ac <sprintf@plt+0x4a24>
   162d4:	b	162f4 <sprintf@plt+0x4a6c>
   162d8:	cmp	r5, #0
   162dc:	beq	162f4 <sprintf@plt+0x4a6c>
   162e0:	ldr	r0, [r5, #12]
   162e4:	add	r0, r8, r0, lsl #4
   162e8:	ldr	r0, [r0, #12]
   162ec:	cmp	r0, #2
   162f0:	bne	16314 <sprintf@plt+0x4a8c>
   162f4:	mov	r0, r9
   162f8:	bl	1647c <sprintf@plt+0x4bf4>
   162fc:	cmp	r0, #0
   16300:	bne	16314 <sprintf@plt+0x4a8c>
   16304:	ldr	r1, [pc, #44]	; 16338 <sprintf@plt+0x4ab0>
   16308:	mov	r0, r9
   1630c:	add	r1, pc, r1
   16310:	bl	169e0 <sprintf@plt+0x5158>
   16314:	mov	r0, #1
   16318:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1631c:	bl	11750 <rb_outofmemory@plt>
   16320:	andeq	r8, r1, r0, asr #28
   16324:	andeq	r3, r1, ip, lsl #30
   16328:	andeq	r3, r1, ip, ror pc
   1632c:	andeq	r3, r1, ip, ror #30
   16330:	andeq	r3, r0, r1, asr r5
   16334:	andeq	r3, r0, r1, asr #13
   16338:	andeq	r3, r0, r9, asr #10
   1633c:	ldr	r1, [pc, #4]	; 16348 <sprintf@plt+0x4ac0>
   16340:	add	r1, pc, r1
   16344:	b	169e0 <sprintf@plt+0x5158>
   16348:	andeq	r3, r0, r0, lsr r5
   1634c:	ldr	r1, [pc, #4]	; 16358 <sprintf@plt+0x4ad0>
   16350:	add	r1, pc, r1
   16354:	b	169e0 <sprintf@plt+0x5158>
   16358:	andeq	r3, r0, sl, lsr r5
   1635c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16360:	add	fp, sp, #24
   16364:	mov	r8, r0
   16368:	ldr	r9, [r0, #464]	; 0x1d0
   1636c:	ldr	r0, [pc, #244]	; 16468 <sprintf@plt+0x4be0>
   16370:	ldr	r0, [pc, r0]
   16374:	ldr	r0, [r0, #12]
   16378:	add	r0, r9, r0, lsl #4
   1637c:	ldr	r0, [r0, #8]
   16380:	cmp	r0, #0
   16384:	beq	16450 <sprintf@plt+0x4bc8>
   16388:	ldrb	r0, [r0]
   1638c:	cmp	r0, #0
   16390:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   16394:	ldr	r0, [pc, #208]	; 1646c <sprintf@plt+0x4be4>
   16398:	ldr	r0, [pc, r0]
   1639c:	ldr	r4, [r0]
   163a0:	cmp	r4, #0
   163a4:	beq	16440 <sprintf@plt+0x4bb8>
   163a8:	ldr	r5, [pc, #192]	; 16470 <sprintf@plt+0x4be8>
   163ac:	mov	r7, r4
   163b0:	add	r5, pc, r5
   163b4:	ldr	r6, [r7]
   163b8:	mov	r1, r5
   163bc:	ldr	r0, [r6, #16]
   163c0:	bl	11594 <strcasecmp@plt>
   163c4:	cmp	r0, #0
   163c8:	beq	163dc <sprintf@plt+0x4b54>
   163cc:	ldr	r7, [r7, #8]
   163d0:	cmp	r7, #0
   163d4:	bne	163b4 <sprintf@plt+0x4b2c>
   163d8:	b	163f8 <sprintf@plt+0x4b70>
   163dc:	cmp	r6, #0
   163e0:	beq	163f8 <sprintf@plt+0x4b70>
   163e4:	ldr	r0, [r6, #12]
   163e8:	add	r0, r9, r0, lsl #4
   163ec:	ldr	r0, [r0, #12]
   163f0:	cmp	r0, #2
   163f4:	bne	16450 <sprintf@plt+0x4bc8>
   163f8:	ldr	r5, [r4]
   163fc:	ldr	r0, [r5, #16]
   16400:	ldr	r1, [pc, #108]	; 16474 <sprintf@plt+0x4bec>
   16404:	add	r1, pc, r1
   16408:	bl	11594 <strcasecmp@plt>
   1640c:	cmp	r0, #0
   16410:	beq	16424 <sprintf@plt+0x4b9c>
   16414:	ldr	r4, [r4, #8]
   16418:	cmp	r4, #0
   1641c:	bne	163f8 <sprintf@plt+0x4b70>
   16420:	b	16440 <sprintf@plt+0x4bb8>
   16424:	cmp	r5, #0
   16428:	beq	16440 <sprintf@plt+0x4bb8>
   1642c:	ldr	r0, [r5, #12]
   16430:	add	r0, r9, r0, lsl #4
   16434:	ldr	r0, [r0, #12]
   16438:	cmp	r0, #2
   1643c:	bne	16450 <sprintf@plt+0x4bc8>
   16440:	mov	r0, r8
   16444:	bl	1647c <sprintf@plt+0x4bf4>
   16448:	cmp	r0, #0
   1644c:	beq	16454 <sprintf@plt+0x4bcc>
   16450:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16454:	ldr	r1, [pc, #28]	; 16478 <sprintf@plt+0x4bf0>
   16458:	mov	r0, r8
   1645c:	add	r1, pc, r1
   16460:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   16464:	b	169e0 <sprintf@plt+0x5158>
   16468:	andeq	r3, r1, r4, lsl lr
   1646c:	andeq	r3, r1, r4, lsl #28
   16470:	andeq	r3, r0, r9, ror #7
   16474:	andeq	r3, r0, r5, ror r5
   16478:	strdeq	r3, [r0], -r9
   1647c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16480:	add	fp, sp, #28
   16484:	sub	sp, sp, #268	; 0x10c
   16488:	mov	r4, r0
   1648c:	ldr	r0, [r0, #464]	; 0x1d0
   16490:	ldr	r1, [pc, #472]	; 16670 <sprintf@plt+0x4de8>
   16494:	mov	r2, #1
   16498:	mov	r9, #1
   1649c:	ldr	r1, [pc, r1]
   164a0:	ldr	r1, [r1, #12]
   164a4:	add	r0, r0, r1, lsl #4
   164a8:	ldrh	r1, [r4, #248]	; 0xf8
   164ac:	ldr	r3, [r0, #8]
   164b0:	mov	r0, #0
   164b4:	cmp	r1, #2
   164b8:	beq	164c8 <sprintf@plt+0x4c40>
   164bc:	cmp	r1, #10
   164c0:	bne	16664 <sprintf@plt+0x4ddc>
   164c4:	mov	r9, #2
   164c8:	strb	r2, [r3]
   164cc:	str	r3, [sp]
   164d0:	ldr	r0, [r4]
   164d4:	ldr	r1, [pc, #408]	; 16674 <sprintf@plt+0x4dec>
   164d8:	add	r1, pc, r1
   164dc:	bl	12484 <sprintf@plt+0xbfc>
   164e0:	ldr	r8, [pc, #400]	; 16678 <sprintf@plt+0x4df0>
   164e4:	ldr	r8, [pc, r8]
   164e8:	cmp	r8, #0
   164ec:	beq	16624 <sprintf@plt+0x4d9c>
   164f0:	add	r0, r4, #248	; 0xf8
   164f4:	str	r0, [sp, #4]
   164f8:	b	16510 <sprintf@plt+0x4c88>
   164fc:	mov	r0, r7
   16500:	bl	1163c <free@plt>
   16504:	ldr	r8, [r8, #8]
   16508:	cmp	r8, #0
   1650c:	beq	16624 <sprintf@plt+0x4d9c>
   16510:	ldr	r5, [r8]
   16514:	ldrb	r0, [r5, #784]	; 0x310
   16518:	cmp	r0, #0
   1651c:	bne	16504 <sprintf@plt+0x4c7c>
   16520:	ldrb	r0, [r5, #768]	; 0x300
   16524:	tst	r9, r0
   16528:	beq	16504 <sprintf@plt+0x4c7c>
   1652c:	mov	r0, #1
   16530:	mov	r1, #24
   16534:	bl	115a0 <calloc@plt>
   16538:	cmp	r0, #0
   1653c:	beq	1666c <sprintf@plt+0x4de4>
   16540:	mov	r7, r0
   16544:	ldr	r0, [r4, #464]	; 0x1d0
   16548:	ldr	r1, [pc, #300]	; 1667c <sprintf@plt+0x4df4>
   1654c:	ldr	r1, [pc, r1]
   16550:	ldr	r1, [r1, #12]
   16554:	add	r0, r0, r1, lsl #4
   16558:	ldr	sl, [r0, #8]
   1655c:	str	r5, [r7]
   16560:	str	r4, [r7, #4]
   16564:	ldrh	r0, [r4, #248]	; 0xf8
   16568:	cmp	r0, #10
   1656c:	beq	16588 <sprintf@plt+0x4d00>
   16570:	cmp	r0, #2
   16574:	bne	16594 <sprintf@plt+0x4d0c>
   16578:	ldrb	r0, [r5, #768]	; 0x300
   1657c:	tst	r0, #1
   16580:	beq	164fc <sprintf@plt+0x4c74>
   16584:	b	16594 <sprintf@plt+0x4d0c>
   16588:	ldrb	r0, [r5, #768]	; 0x300
   1658c:	tst	r0, #2
   16590:	beq	164fc <sprintf@plt+0x4c74>
   16594:	ldr	r2, [sp, #4]
   16598:	add	r6, sp, #8
   1659c:	mov	r1, #256	; 0x100
   165a0:	mov	r3, r5
   165a4:	mov	r0, r6
   165a8:	bl	139f0 <sprintf@plt+0x2168>
   165ac:	ldr	r2, [pc, #204]	; 16680 <sprintf@plt+0x4df8>
   165b0:	mov	r0, r6
   165b4:	mov	r1, #2
   165b8:	mov	r3, r7
   165bc:	add	r2, pc, r2
   165c0:	bl	11d8c <sprintf@plt+0x504>
   165c4:	mov	r1, #0
   165c8:	str	r1, [r7, #16]
   165cc:	str	r0, [r7, #8]
   165d0:	str	r7, [r7, #12]
   165d4:	add	r0, r7, #12
   165d8:	ldr	r1, [sl, #4]
   165dc:	cmp	r1, #0
   165e0:	str	r1, [r7, #20]
   165e4:	beq	165f4 <sprintf@plt+0x4d6c>
   165e8:	add	r1, r1, #4
   165ec:	str	r0, [r1]
   165f0:	b	16604 <sprintf@plt+0x4d7c>
   165f4:	mov	r1, sl
   165f8:	ldr	r2, [r1, #8]!
   165fc:	cmp	r2, #0
   16600:	streq	r0, [r1]
   16604:	str	r0, [sl, #4]
   16608:	ldr	r0, [sl, #12]
   1660c:	add	r0, r0, #1
   16610:	str	r0, [sl, #12]
   16614:	ldr	r0, [r5, #788]	; 0x314
   16618:	add	r0, r0, #1
   1661c:	str	r0, [r5, #788]	; 0x314
   16620:	b	16504 <sprintf@plt+0x4c7c>
   16624:	ldr	r0, [sp]
   16628:	ldr	r0, [r0, #12]
   1662c:	cmp	r0, #0
   16630:	mov	r0, #0
   16634:	beq	16664 <sprintf@plt+0x4ddc>
   16638:	ldr	r0, [pc, #68]	; 16684 <sprintf@plt+0x4dfc>
   1663c:	ldr	r0, [pc, r0]
   16640:	ldr	r5, [r0, #12]
   16644:	ldr	r6, [pc, #60]	; 16688 <sprintf@plt+0x4e00>
   16648:	ldr	r6, [pc, r6]
   1664c:	bl	1169c <rb_current_time@plt>
   16650:	ldr	r1, [r4, #464]	; 0x1d0
   16654:	add	r0, r0, r6
   16658:	add	r1, r1, r5, lsl #4
   1665c:	str	r0, [r1, #4]
   16660:	mov	r0, #1
   16664:	sub	sp, fp, #28
   16668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1666c:	bl	11750 <rb_outofmemory@plt>
   16670:	andeq	r3, r1, r8, ror #25
   16674:	andeq	r3, r0, r6, asr #5
   16678:	andeq	r8, r1, r0, asr #22
   1667c:	andeq	r3, r1, r8, lsr ip
   16680:	andeq	r0, r0, r8, asr #1
   16684:	andeq	r3, r1, r8, asr #22
   16688:	ldrdeq	r4, [r1], -r8
   1668c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16690:	add	fp, sp, #28
   16694:	sub	sp, sp, #4
   16698:	mov	r4, r0
   1669c:	ldr	r0, [pc, #520]	; 168ac <sprintf@plt+0x5024>
   166a0:	ldr	r0, [pc, r0]
   166a4:	ldr	r8, [r3, #4]
   166a8:	ldr	r7, [r0, #12]
   166ac:	ldr	r0, [r8, #464]	; 0x1d0
   166b0:	add	r0, r0, r7, lsl #4
   166b4:	ldr	r5, [r0, #8]
   166b8:	cmp	r5, #0
   166bc:	beq	16808 <sprintf@plt+0x4f80>
   166c0:	ldr	r9, [r3]
   166c4:	cmp	r4, #0
   166c8:	mov	r6, r3
   166cc:	cmpne	r1, #0
   166d0:	bne	16700 <sprintf@plt+0x4e78>
   166d4:	mov	r0, r9
   166d8:	bl	168c4 <sprintf@plt+0x503c>
   166dc:	ldr	r0, [r6, #8]
   166e0:	bl	12134 <sprintf@plt+0x8ac>
   166e4:	ldr	r0, [r6, #20]
   166e8:	ldr	r1, [r6, #16]
   166ec:	cmp	r0, #0
   166f0:	beq	1677c <sprintf@plt+0x4ef4>
   166f4:	str	r1, [r0, #4]
   166f8:	ldr	r1, [r6, #16]
   166fc:	b	16780 <sprintf@plt+0x4ef8>
   16700:	ldr	r0, [r9, #780]	; 0x30c
   16704:	cmp	r0, #0
   16708:	beq	16810 <sprintf@plt+0x4f88>
   1670c:	mov	r0, r4
   16710:	mov	r1, #46	; 0x2e
   16714:	bl	115e8 <strrchr@plt>
   16718:	cmp	r0, #0
   1671c:	beq	16848 <sprintf@plt+0x4fc0>
   16720:	ldrb	r1, [r0, #1]!
   16724:	cmp	r1, #0
   16728:	beq	16848 <sprintf@plt+0x4fc0>
   1672c:	ldr	sl, [r9, #772]	; 0x304
   16730:	str	r0, [sp]
   16734:	cmp	sl, #0
   16738:	beq	166d4 <sprintf@plt+0x4e4c>
   1673c:	ldr	r1, [sl]
   16740:	mov	r0, r4
   16744:	ldr	r3, [r1]
   16748:	cmp	r3, #1
   1674c:	beq	1675c <sprintf@plt+0x4ed4>
   16750:	ldr	r0, [sp]
   16754:	cmp	r3, #2
   16758:	bne	16890 <sprintf@plt+0x5008>
   1675c:	add	r1, r1, #4
   16760:	bl	11864 <strcmp@plt>
   16764:	cmp	r0, #0
   16768:	beq	16810 <sprintf@plt+0x4f88>
   1676c:	ldr	sl, [sl, #8]
   16770:	cmp	sl, #0
   16774:	bne	1673c <sprintf@plt+0x4eb4>
   16778:	b	166d4 <sprintf@plt+0x4e4c>
   1677c:	str	r1, [r5, #8]
   16780:	ldr	r7, [pc, #304]	; 168b8 <sprintf@plt+0x5030>
   16784:	cmp	r1, #0
   16788:	add	r2, r1, #8
   1678c:	mov	r4, #0
   16790:	addeq	r2, r5, #4
   16794:	ldr	r7, [pc, r7]
   16798:	str	r0, [r2]
   1679c:	str	r4, [r6, #16]
   167a0:	str	r4, [r6, #20]
   167a4:	ldr	r0, [r5, #12]
   167a8:	sub	r0, r0, #1
   167ac:	str	r0, [r5, #12]
   167b0:	mov	r0, r6
   167b4:	bl	1163c <free@plt>
   167b8:	ldr	r0, [r5, #12]
   167bc:	cmp	r0, #0
   167c0:	bne	16808 <sprintf@plt+0x4f80>
   167c4:	ldr	r0, [r8]
   167c8:	ldr	r1, [pc, #236]	; 168bc <sprintf@plt+0x5034>
   167cc:	add	r1, pc, r1
   167d0:	bl	12484 <sprintf@plt+0xbfc>
   167d4:	mov	r0, r5
   167d8:	bl	1163c <free@plt>
   167dc:	ldr	r1, [r7, #12]
   167e0:	ldr	r0, [r8, #464]	; 0x1d0
   167e4:	add	r0, r0, r1, lsl #4
   167e8:	str	r4, [r0, #4]
   167ec:	str	r4, [r0, #8]
   167f0:	mov	r0, r8
   167f4:	bl	12fa0 <sprintf@plt+0x1718>
   167f8:	ldr	r0, [r8, #460]	; 0x1cc
   167fc:	subs	r0, r0, #1
   16800:	str	r0, [r8, #460]	; 0x1cc
   16804:	beq	16880 <sprintf@plt+0x4ff8>
   16808:	sub	sp, fp, #28
   1680c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16810:	ldr	r0, [r9, #792]	; 0x318
   16814:	add	r3, r9, #256	; 0x100
   16818:	mov	r1, r7
   1681c:	mov	r2, r9
   16820:	add	r0, r0, #1
   16824:	str	r0, [r9, #792]	; 0x318
   16828:	mov	r0, r8
   1682c:	bl	12bb0 <sprintf@plt+0x1328>
   16830:	ldr	r1, [pc, #120]	; 168b0 <sprintf@plt+0x5028>
   16834:	mov	r0, r8
   16838:	add	r1, pc, r1
   1683c:	sub	sp, fp, #28
   16840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16844:	b	169e0 <sprintf@plt+0x5158>
   16848:	ldr	r0, [r9, #796]	; 0x31c
   1684c:	add	r7, r0, #3600	; 0xe10
   16850:	bl	1169c <rb_current_time@plt>
   16854:	cmp	r7, r0
   16858:	bge	166d4 <sprintf@plt+0x4e4c>
   1685c:	ldr	r1, [pc, #80]	; 168b4 <sprintf@plt+0x502c>
   16860:	mov	r0, #87	; 0x57
   16864:	mov	r2, r9
   16868:	mov	r3, r4
   1686c:	add	r1, pc, r1
   16870:	bl	124f8 <sprintf@plt+0xc70>
   16874:	bl	1169c <rb_current_time@plt>
   16878:	str	r0, [r9, #796]	; 0x31c
   1687c:	b	166d4 <sprintf@plt+0x4e4c>
   16880:	mov	r0, r8
   16884:	sub	sp, fp, #28
   16888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1688c:	b	12ed4 <sprintf@plt+0x164c>
   16890:	ldr	r1, [pc, #40]	; 168c0 <sprintf@plt+0x5038>
   16894:	mov	r0, #67	; 0x43
   16898:	mov	r2, r9
   1689c:	add	r1, pc, r1
   168a0:	bl	124f8 <sprintf@plt+0xc70>
   168a4:	mov	r0, #3
   168a8:	bl	11870 <exit@plt>
   168ac:	andeq	r3, r1, r4, ror #21
   168b0:	andeq	r3, r0, r8, lsr r0
   168b4:	andeq	r2, r0, sl, lsr #31
   168b8:	strdeq	r3, [r1], -r0
   168bc:	strdeq	r2, [r0], -r6
   168c0:	andeq	r2, r0, fp, asr #30
   168c4:	push	{r4, r5, r6, r7, fp, lr}
   168c8:	add	fp, sp, #16
   168cc:	mov	r4, r0
   168d0:	ldr	r0, [r0, #788]	; 0x314
   168d4:	subs	r0, r0, #1
   168d8:	str	r0, [r4, #788]	; 0x314
   168dc:	bgt	16954 <sprintf@plt+0x50cc>
   168e0:	ldrb	r0, [r4, #784]	; 0x310
   168e4:	cmp	r0, #0
   168e8:	beq	16954 <sprintf@plt+0x50cc>
   168ec:	mov	r5, r4
   168f0:	ldr	r0, [r5, #772]!	; 0x304
   168f4:	cmp	r0, #0
   168f8:	beq	16958 <sprintf@plt+0x50d0>
   168fc:	mov	r6, #0
   16900:	b	1693c <sprintf@plt+0x50b4>
   16904:	str	r1, [r4, #776]	; 0x308
   16908:	cmp	r1, #0
   1690c:	mov	r2, r5
   16910:	addne	r2, r1, #8
   16914:	str	r7, [r2]
   16918:	str	r6, [r0, #4]
   1691c:	str	r6, [r0, #8]
   16920:	ldr	r1, [r4, #780]	; 0x30c
   16924:	sub	r1, r1, #1
   16928:	str	r1, [r4, #780]	; 0x30c
   1692c:	bl	1163c <free@plt>
   16930:	cmp	r7, #0
   16934:	mov	r0, r7
   16938:	beq	16958 <sprintf@plt+0x50d0>
   1693c:	ldmib	r0, {r1, r7}
   16940:	cmp	r7, #0
   16944:	beq	16904 <sprintf@plt+0x507c>
   16948:	str	r1, [r7, #4]
   1694c:	ldr	r1, [r0, #4]
   16950:	b	16908 <sprintf@plt+0x5080>
   16954:	pop	{r4, r5, r6, r7, fp, pc}
   16958:	ldr	r1, [pc, #120]	; 169d8 <sprintf@plt+0x5150>
   1695c:	ldr	r1, [pc, r1]
   16960:	cmp	r1, #0
   16964:	beq	169cc <sprintf@plt+0x5144>
   16968:	ldr	r2, [r1]
   1696c:	mov	r0, r1
   16970:	ldr	r1, [r1, #8]
   16974:	cmp	r2, r4
   16978:	bne	16960 <sprintf@plt+0x50d8>
   1697c:	ldr	r3, [r0, #4]
   16980:	ldr	r7, [pc, #84]	; 169dc <sprintf@plt+0x5154>
   16984:	cmp	r1, #0
   16988:	add	r7, pc, r7
   1698c:	beq	1699c <sprintf@plt+0x5114>
   16990:	str	r3, [r1, #4]
   16994:	ldr	r3, [r0, #4]
   16998:	b	169a0 <sprintf@plt+0x5118>
   1699c:	str	r3, [r7, #4]
   169a0:	cmp	r3, #0
   169a4:	mov	r2, r7
   169a8:	addne	r2, r3, #8
   169ac:	str	r1, [r2]
   169b0:	mov	r1, #0
   169b4:	str	r1, [r0, #4]
   169b8:	str	r1, [r0, #8]
   169bc:	ldr	r1, [r7, #8]
   169c0:	sub	r1, r1, #1
   169c4:	str	r1, [r7, #8]
   169c8:	bl	116c0 <rb_free_rb_dlink_node@plt>
   169cc:	mov	r0, r4
   169d0:	pop	{r4, r5, r6, r7, fp, lr}
   169d4:	b	1163c <free@plt>
   169d8:	andeq	r8, r1, r8, asr #13
   169dc:	muleq	r1, ip, r6
   169e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169e4:	add	fp, sp, #28
   169e8:	sub	sp, sp, #4
   169ec:	mov	r9, r0
   169f0:	ldr	r0, [r0, #464]	; 0x1d0
   169f4:	ldr	r8, [pc, #256]	; 16afc <sprintf@plt+0x5274>
   169f8:	ldr	r8, [pc, r8]
   169fc:	ldr	r2, [r8, #12]
   16a00:	add	r0, r0, r2, lsl #4
   16a04:	ldr	r5, [r0, #8]
   16a08:	cmp	r5, #0
   16a0c:	beq	16ae4 <sprintf@plt+0x525c>
   16a10:	ldr	r0, [r5, #12]
   16a14:	cmp	r0, #0
   16a18:	beq	16aac <sprintf@plt+0x5224>
   16a1c:	ldr	r0, [r9]
   16a20:	add	sl, r5, #4
   16a24:	bl	12484 <sprintf@plt+0xbfc>
   16a28:	ldr	r4, [sl]
   16a2c:	cmp	r4, #0
   16a30:	beq	16aac <sprintf@plt+0x5224>
   16a34:	mov	r7, #0
   16a38:	ldr	r6, [r4]
   16a3c:	ldr	r4, [r4, #8]
   16a40:	ldr	r0, [r6, #8]
   16a44:	bl	12134 <sprintf@plt+0x8ac>
   16a48:	ldr	r0, [r6]
   16a4c:	bl	168c4 <sprintf@plt+0x503c>
   16a50:	ldr	r0, [r6, #20]
   16a54:	ldr	r1, [r6, #16]
   16a58:	cmp	r0, #0
   16a5c:	beq	16a6c <sprintf@plt+0x51e4>
   16a60:	str	r1, [r0, #4]
   16a64:	ldr	r1, [r6, #16]
   16a68:	b	16a70 <sprintf@plt+0x51e8>
   16a6c:	str	r1, [r5, #8]
   16a70:	cmp	r1, #0
   16a74:	mov	r2, sl
   16a78:	addne	r2, r1, #8
   16a7c:	cmp	r6, #0
   16a80:	str	r0, [r2]
   16a84:	str	r7, [r6, #16]
   16a88:	str	r7, [r6, #20]
   16a8c:	ldr	r0, [r5, #12]
   16a90:	sub	r0, r0, #1
   16a94:	str	r0, [r5, #12]
   16a98:	beq	16aa4 <sprintf@plt+0x521c>
   16a9c:	mov	r0, r6
   16aa0:	bl	1163c <free@plt>
   16aa4:	cmp	r4, #0
   16aa8:	bne	16a38 <sprintf@plt+0x51b0>
   16aac:	mov	r0, r5
   16ab0:	bl	1163c <free@plt>
   16ab4:	ldr	r0, [r9, #464]	; 0x1d0
   16ab8:	ldr	r1, [r8, #12]
   16abc:	mov	r2, #0
   16ac0:	add	r0, r0, r1, lsl #4
   16ac4:	str	r2, [r0, #4]
   16ac8:	str	r2, [r0, #8]
   16acc:	mov	r0, r9
   16ad0:	bl	12fa0 <sprintf@plt+0x1718>
   16ad4:	ldr	r0, [r9, #460]	; 0x1cc
   16ad8:	subs	r0, r0, #1
   16adc:	str	r0, [r9, #460]	; 0x1cc
   16ae0:	beq	16aec <sprintf@plt+0x5264>
   16ae4:	sub	sp, fp, #28
   16ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aec:	mov	r0, r9
   16af0:	sub	sp, fp, #28
   16af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16af8:	b	12ed4 <sprintf@plt+0x164c>
   16afc:	andeq	r3, r1, ip, lsl #15
   16b00:	push	{fp, lr}
   16b04:	mov	fp, sp
   16b08:	ldr	r0, [r2]
   16b0c:	mov	r1, #0
   16b10:	mov	r2, #10
   16b14:	bl	116e4 <strtol@plt>
   16b18:	cmn	r0, #1
   16b1c:	mov	r2, r0
   16b20:	ldrgt	r0, [pc, #32]	; 16b48 <sprintf@plt+0x52c0>
   16b24:	addgt	r0, pc, r0
   16b28:	strgt	r2, [r0]
   16b2c:	popgt	{fp, pc}
   16b30:	ldr	r1, [pc, #20]	; 16b4c <sprintf@plt+0x52c4>
   16b34:	mov	r0, #67	; 0x43
   16b38:	add	r1, pc, r1
   16b3c:	bl	124f8 <sprintf@plt+0xc70>
   16b40:	mov	r0, #3
   16b44:	bl	11870 <exit@plt>
   16b48:	andeq	r4, r1, r0, ror #6
   16b4c:	andeq	r2, r0, sl, lsl #27
   16b50:	ldr	r0, [r2]
   16b54:	ldrb	r0, [r0]
   16b58:	ldr	r1, [pc, #20]	; 16b74 <sprintf@plt+0x52ec>
   16b5c:	sub	r0, r0, #49	; 0x31
   16b60:	add	r1, pc, r1
   16b64:	clz	r0, r0
   16b68:	lsr	r0, r0, #5
   16b6c:	strb	r0, [r1]
   16b70:	bx	lr
   16b74:	andeq	r4, r1, r8, lsr #6
   16b78:	push	{r4, r5, r6, sl, fp, lr}
   16b7c:	add	fp, sp, #16
   16b80:	sub	sp, sp, #8
   16b84:	ldr	r5, [pc, #116]	; 16c00 <sprintf@plt+0x5378>
   16b88:	mov	r4, sp
   16b8c:	mov	r1, r4
   16b90:	ldr	r5, [pc, r5]
   16b94:	ldr	r0, [r5]
   16b98:	bl	11678 <rb_dictionary_foreach_start@plt>
   16b9c:	ldr	r0, [r5]
   16ba0:	mov	r1, r4
   16ba4:	bl	11588 <rb_dictionary_foreach_cur@plt>
   16ba8:	cmp	r0, #0
   16bac:	beq	16bf8 <sprintf@plt+0x5370>
   16bb0:	ldr	r6, [pc, #76]	; 16c04 <sprintf@plt+0x537c>
   16bb4:	mov	r4, sp
   16bb8:	ldr	r6, [pc, r6]
   16bbc:	ldr	r1, [r0, #464]	; 0x1d0
   16bc0:	ldr	r2, [r6, #12]
   16bc4:	add	r1, r1, r2, lsl #4
   16bc8:	ldr	r1, [r1, #8]
   16bcc:	cmp	r1, #0
   16bd0:	movne	r1, #2
   16bd4:	blne	16de8 <sprintf@plt+0x5560>
   16bd8:	ldr	r0, [r5]
   16bdc:	mov	r1, r4
   16be0:	bl	11630 <rb_dictionary_foreach_next@plt>
   16be4:	ldr	r0, [r5]
   16be8:	mov	r1, r4
   16bec:	bl	11588 <rb_dictionary_foreach_cur@plt>
   16bf0:	cmp	r0, #0
   16bf4:	bne	16bbc <sprintf@plt+0x5334>
   16bf8:	sub	sp, fp, #16
   16bfc:	pop	{r4, r5, r6, sl, fp, pc}
   16c00:	andeq	r3, r1, r4, asr #11
   16c04:	andeq	r3, r1, r8, lsr #11
   16c08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16c0c:	add	fp, sp, #24
   16c10:	sub	sp, sp, #264	; 0x108
   16c14:	mov	r4, r0
   16c18:	mov	r0, #1
   16c1c:	mov	r1, #4
   16c20:	bl	115a0 <calloc@plt>
   16c24:	cmp	r0, #0
   16c28:	beq	16d90 <sprintf@plt+0x5508>
   16c2c:	mov	r5, r0
   16c30:	ldr	r0, [pc, #348]	; 16d94 <sprintf@plt+0x550c>
   16c34:	add	r0, pc, r0
   16c38:	ldrb	r0, [r0]
   16c3c:	cmp	r0, #0
   16c40:	beq	16d28 <sprintf@plt+0x54a0>
   16c44:	ldr	r1, [r4, #460]	; 0x1cc
   16c48:	ldr	r0, [r4]
   16c4c:	add	r1, r1, #1
   16c50:	str	r1, [r4, #460]	; 0x1cc
   16c54:	ldrh	r8, [r4, #248]	; 0xf8
   16c58:	ldr	r1, [pc, #320]	; 16da0 <sprintf@plt+0x5518>
   16c5c:	add	r1, pc, r1
   16c60:	bl	12484 <sprintf@plt+0xbfc>
   16c64:	ldr	r0, [pc, #312]	; 16da4 <sprintf@plt+0x551c>
   16c68:	ldr	r0, [pc, r0]
   16c6c:	ldr	r7, [r0, #12]
   16c70:	ldr	r0, [r4, #464]	; 0x1d0
   16c74:	add	r0, r0, r7, lsl #4
   16c78:	str	r5, [r0, #8]
   16c7c:	ldr	r6, [pc, #292]	; 16da8 <sprintf@plt+0x5520>
   16c80:	ldr	r6, [pc, r6]
   16c84:	bl	1169c <rb_current_time@plt>
   16c88:	ldr	r1, [r4, #464]	; 0x1d0
   16c8c:	add	r0, r0, r6
   16c90:	add	r1, r1, r7, lsl #4
   16c94:	str	r0, [r1, #4]
   16c98:	mov	r0, r8
   16c9c:	mov	r1, #1
   16ca0:	ldr	r2, [r4, #4]
   16ca4:	ldr	r3, [pc, #256]	; 16dac <sprintf@plt+0x5524>
   16ca8:	add	r3, pc, r3
   16cac:	bl	11558 <rb_socket@plt>
   16cb0:	cmp	r0, #0
   16cb4:	str	r0, [r5]
   16cb8:	beq	16d58 <sprintf@plt+0x54d0>
   16cbc:	add	r8, sp, #136	; 0x88
   16cc0:	mov	r6, r0
   16cc4:	add	r1, r4, #64	; 0x40
   16cc8:	mov	r2, #128	; 0x80
   16ccc:	add	r5, r4, #248	; 0xf8
   16cd0:	mov	r0, r8
   16cd4:	bl	116b4 <memcpy@plt>
   16cd8:	add	r7, sp, #8
   16cdc:	mov	r1, r5
   16ce0:	mov	r2, #128	; 0x80
   16ce4:	mov	r0, r7
   16ce8:	bl	116b4 <memcpy@plt>
   16cec:	mov	r0, #0
   16cf0:	mov	r1, r7
   16cf4:	mov	r2, r8
   16cf8:	strh	r0, [sp, #138]	; 0x8a
   16cfc:	mov	r0, #28928	; 0x7100
   16d00:	strh	r0, [sp, #10]
   16d04:	ldr	r0, [pc, #168]	; 16db4 <sprintf@plt+0x552c>
   16d08:	ldr	r0, [pc, r0]
   16d0c:	str	r4, [sp]
   16d10:	str	r0, [sp, #4]
   16d14:	mov	r0, r6
   16d18:	ldr	r3, [pc, #152]	; 16db8 <sprintf@plt+0x5530>
   16d1c:	add	r3, pc, r3
   16d20:	bl	11504 <rb_connect_tcp@plt>
   16d24:	b	16d84 <sprintf@plt+0x54fc>
   16d28:	mov	r0, r5
   16d2c:	bl	1163c <free@plt>
   16d30:	ldr	r0, [r4]
   16d34:	ldr	r1, [pc, #92]	; 16d98 <sprintf@plt+0x5510>
   16d38:	add	r1, pc, r1
   16d3c:	bl	12484 <sprintf@plt+0xbfc>
   16d40:	ldr	r0, [pc, #84]	; 16d9c <sprintf@plt+0x5514>
   16d44:	ldr	r0, [pc, r0]
   16d48:	ldr	r1, [r0, #12]
   16d4c:	mov	r0, r4
   16d50:	bl	12fa0 <sprintf@plt+0x1718>
   16d54:	b	16d84 <sprintf@plt+0x54fc>
   16d58:	bl	1187c <__errno_location@plt>
   16d5c:	ldr	r0, [r0]
   16d60:	bl	114b0 <strerror@plt>
   16d64:	ldr	r1, [pc, #68]	; 16db0 <sprintf@plt+0x5528>
   16d68:	mov	r2, r0
   16d6c:	mov	r0, #68	; 0x44
   16d70:	add	r1, pc, r1
   16d74:	bl	124f8 <sprintf@plt+0xc70>
   16d78:	mov	r0, r4
   16d7c:	mov	r1, #2
   16d80:	bl	16de8 <sprintf@plt+0x5560>
   16d84:	mov	r0, #1
   16d88:	sub	sp, fp, #24
   16d8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16d90:	bl	11750 <rb_outofmemory@plt>
   16d94:	andeq	r4, r1, r4, asr r2
   16d98:	andeq	r2, r0, r0, lsr #24
   16d9c:	andeq	r3, r1, ip, lsl r4
   16da0:	andeq	r2, r0, fp, lsl #25
   16da4:	strdeq	r3, [r1], -r8
   16da8:	andeq	r4, r1, r4, lsl #4
   16dac:	ldrdeq	r2, [r0], -r1
   16db0:	andeq	r2, r0, pc, lsl #24
   16db4:	andeq	r4, r1, ip, ror r1
   16db8:	andeq	r0, r0, r0, lsl #3
   16dbc:	ldr	r1, [r0, #464]	; 0x1d0
   16dc0:	ldr	r2, [pc, #28]	; 16de4 <sprintf@plt+0x555c>
   16dc4:	ldr	r2, [pc, r2]
   16dc8:	ldr	r2, [r2, #12]
   16dcc:	add	r1, r1, r2, lsl #4
   16dd0:	ldr	r1, [r1, #8]
   16dd4:	cmp	r1, #0
   16dd8:	bxeq	lr
   16ddc:	mov	r1, #2
   16de0:	b	16de8 <sprintf@plt+0x5560>
   16de4:	muleq	r1, ip, r3
   16de8:	push	{r4, r5, r6, r7, fp, lr}
   16dec:	add	fp, sp, #16
   16df0:	mov	r4, r0
   16df4:	ldr	r0, [r0, #464]	; 0x1d0
   16df8:	ldr	r7, [pc, #152]	; 16e98 <sprintf@plt+0x5610>
   16dfc:	mov	r5, r1
   16e00:	mov	r2, #11
   16e04:	ldr	r7, [pc, r7]
   16e08:	ldr	r1, [r7, #12]
   16e0c:	add	r0, r0, r1, lsl #4
   16e10:	ldr	r6, [r0, #8]
   16e14:	ldr	r1, [pc, #128]	; 16e9c <sprintf@plt+0x5614>
   16e18:	add	r0, r4, #440	; 0x1b8
   16e1c:	add	r1, pc, r1
   16e20:	bl	11618 <rb_strlcpy@plt>
   16e24:	ldr	r0, [r6]
   16e28:	cmp	r0, #0
   16e2c:	beq	16e34 <sprintf@plt+0x55ac>
   16e30:	bl	116d8 <rb_close@plt>
   16e34:	cmp	r6, #0
   16e38:	beq	16e44 <sprintf@plt+0x55bc>
   16e3c:	mov	r0, r6
   16e40:	bl	1163c <free@plt>
   16e44:	ldr	r0, [r4, #464]	; 0x1d0
   16e48:	ldr	r1, [r7, #12]
   16e4c:	add	r0, r0, r1, lsl #4
   16e50:	mov	r1, #0
   16e54:	str	r1, [r0, #4]
   16e58:	str	r1, [r0, #8]
   16e5c:	ldr	r0, [pc, #60]	; 16ea0 <sprintf@plt+0x5618>
   16e60:	add	r0, pc, r0
   16e64:	ldr	r1, [r0, r5, lsl #2]
   16e68:	ldr	r0, [r4]
   16e6c:	bl	12484 <sprintf@plt+0xbfc>
   16e70:	ldr	r1, [r7, #12]
   16e74:	mov	r0, r4
   16e78:	bl	12fa0 <sprintf@plt+0x1718>
   16e7c:	ldr	r0, [r4, #460]	; 0x1cc
   16e80:	subs	r0, r0, #1
   16e84:	str	r0, [r4, #460]	; 0x1cc
   16e88:	popne	{r4, r5, r6, r7, fp, pc}
   16e8c:	mov	r0, r4
   16e90:	pop	{r4, r5, r6, r7, fp, lr}
   16e94:	b	12ed4 <sprintf@plt+0x164c>
   16e98:	andeq	r3, r1, ip, asr r3
   16e9c:	andeq	r2, r0, r8, lsl #6
   16ea0:	andeq	r3, r1, r0, ror r0
   16ea4:	push	{r4, r5, r6, r7, fp, lr}
   16ea8:	add	fp, sp, #16
   16eac:	sub	sp, sp, #40	; 0x28
   16eb0:	mov	r4, r2
   16eb4:	cmp	r1, #0
   16eb8:	bne	16f30 <sprintf@plt+0x56a8>
   16ebc:	ldr	r0, [r4, #464]	; 0x1d0
   16ec0:	ldr	r1, [pc, #124]	; 16f44 <sprintf@plt+0x56bc>
   16ec4:	add	r5, sp, #8
   16ec8:	ldr	r1, [pc, r1]
   16ecc:	ldrh	r3, [r4, #246]	; 0xf6
   16ed0:	ldr	r1, [r1, #12]
   16ed4:	add	r0, r0, r1, lsl #4
   16ed8:	mov	r1, #32
   16edc:	ldr	r7, [r0, #8]
   16ee0:	ldrh	r0, [r4, #62]	; 0x3e
   16ee4:	str	r0, [sp]
   16ee8:	mov	r0, r5
   16eec:	ldr	r2, [pc, #84]	; 16f48 <sprintf@plt+0x56c0>
   16ef0:	add	r2, pc, r2
   16ef4:	bl	11810 <snprintf@plt>
   16ef8:	mov	r0, r5
   16efc:	bl	11690 <strlen@plt>
   16f00:	mov	r6, r0
   16f04:	ldr	r0, [r7]
   16f08:	mov	r1, r5
   16f0c:	mov	r2, r6
   16f10:	bl	115f4 <rb_write@plt>
   16f14:	cmp	r0, r6
   16f18:	bne	16f30 <sprintf@plt+0x56a8>
   16f1c:	ldr	r0, [r7]
   16f20:	mov	r1, r4
   16f24:	bl	16f4c <sprintf@plt+0x56c4>
   16f28:	sub	sp, fp, #16
   16f2c:	pop	{r4, r5, r6, r7, fp, pc}
   16f30:	mov	r0, r4
   16f34:	mov	r1, #2
   16f38:	bl	16de8 <sprintf@plt+0x5560>
   16f3c:	sub	sp, fp, #16
   16f40:	pop	{r4, r5, r6, r7, fp, pc}
   16f44:	muleq	r1, r8, r2
   16f48:			; <UNDEFINED> instruction: 0x00002ab1
   16f4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16f50:	add	fp, sp, #24
   16f54:	sub	sp, sp, #136	; 0x88
   16f58:	mov	r4, sp
   16f5c:	mov	r8, r1
   16f60:	mov	r5, r0
   16f64:	mov	r1, #0
   16f68:	mov	r2, #129	; 0x81
   16f6c:	mov	r0, r4
   16f70:	bl	115d0 <memset@plt>
   16f74:	mov	r0, r5
   16f78:	mov	r1, r4
   16f7c:	mov	r2, #128	; 0x80
   16f80:	bl	11654 <rb_read@plt>
   16f84:	cmn	r0, #1
   16f88:	ble	17084 <sprintf@plt+0x57fc>
   16f8c:	cmp	r0, #0
   16f90:	beq	170b8 <sprintf@plt+0x5830>
   16f94:	mov	r0, sp
   16f98:	mov	r1, #58	; 0x3a
   16f9c:	bl	1157c <strchr@plt>
   16fa0:	mov	r5, #3
   16fa4:	cmp	r0, #0
   16fa8:	beq	170bc <sprintf@plt+0x5834>
   16fac:	mov	r6, r0
   16fb0:	mov	r4, #0
   16fb4:	mov	r1, #58	; 0x3a
   16fb8:	strb	r4, [r6], #1
   16fbc:	mov	r0, r6
   16fc0:	bl	1157c <strchr@plt>
   16fc4:	cmp	r0, #0
   16fc8:	beq	170bc <sprintf@plt+0x5834>
   16fcc:	mov	r7, r0
   16fd0:	mov	r0, sp
   16fd4:	mov	r1, #44	; 0x2c
   16fd8:	strb	r4, [r7], #1
   16fdc:	bl	1157c <strchr@plt>
   16fe0:	cmp	r0, #0
   16fe4:	beq	170bc <sprintf@plt+0x5834>
   16fe8:	mov	r4, r0
   16fec:	mov	r0, #0
   16ff0:	mov	r1, #0
   16ff4:	mov	r2, #10
   16ff8:	strb	r0, [r4]
   16ffc:	mov	r0, sp
   17000:	bl	116e4 <strtol@plt>
   17004:	cmp	r0, #0
   17008:	beq	170bc <sprintf@plt+0x5834>
   1700c:	add	r0, r4, #1
   17010:	mov	r1, #0
   17014:	mov	r2, #10
   17018:	bl	116e4 <strtol@plt>
   1701c:	cmp	r0, #0
   17020:	beq	170bc <sprintf@plt+0x5834>
   17024:	ldr	r1, [pc, #408]	; 171c4 <sprintf@plt+0x593c>
   17028:	mov	r0, r6
   1702c:	add	r1, pc, r1
   17030:	bl	11720 <strstr@plt>
   17034:	cmp	r0, #0
   17038:	beq	170bc <sprintf@plt+0x5834>
   1703c:	mov	r0, r7
   17040:	mov	r1, #58	; 0x3a
   17044:	bl	1157c <strchr@plt>
   17048:	cmp	r0, #0
   1704c:	beq	170bc <sprintf@plt+0x5834>
   17050:	mov	r1, #0
   17054:	strb	r1, [r0]
   17058:	mov	r1, r0
   1705c:	ldrb	r7, [r0, #1]!
   17060:	orr	r2, r7, #32
   17064:	cmp	r2, #126	; 0x7e
   17068:	beq	17058 <sprintf@plt+0x57d0>
   1706c:	add	r0, r8, #440	; 0x1b8
   17070:	cmp	r7, #0
   17074:	beq	1712c <sprintf@plt+0x58a4>
   17078:	mov	r2, #10
   1707c:	mov	r3, #2
   17080:	b	170f0 <sprintf@plt+0x5868>
   17084:	bl	1187c <__errno_location@plt>
   17088:	ldr	r0, [r0]
   1708c:	bl	114ec <rb_ignore_errno@plt>
   17090:	cmp	r0, #0
   17094:	beq	170b8 <sprintf@plt+0x5830>
   17098:	ldr	r2, [pc, #288]	; 171c0 <sprintf@plt+0x5938>
   1709c:	mov	r0, r5
   170a0:	mov	r1, #1
   170a4:	mov	r3, r8
   170a8:	add	r2, pc, r2
   170ac:	bl	11528 <rb_setselect@plt>
   170b0:	sub	sp, fp, #24
   170b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   170b8:	mov	r5, #2
   170bc:	mov	r0, r8
   170c0:	mov	r1, r5
   170c4:	bl	16de8 <sprintf@plt+0x5560>
   170c8:	sub	sp, fp, #24
   170cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   170d0:	cmp	r6, #58	; 0x3a
   170d4:	cmpne	r6, #91	; 0x5b
   170d8:	bne	17118 <sprintf@plt+0x5890>
   170dc:	ldrb	r7, [r1, r3]
   170e0:	cmp	r7, #0
   170e4:	addne	r3, r3, #1
   170e8:	cmpne	r2, #0
   170ec:	beq	1712c <sprintf@plt+0x58a4>
   170f0:	uxtb	r6, r7
   170f4:	cmp	r6, #57	; 0x39
   170f8:	bgt	170d0 <sprintf@plt+0x5848>
   170fc:	cmp	r6, #32
   17100:	beq	170dc <sprintf@plt+0x5854>
   17104:	cmp	r6, #10
   17108:	beq	1712c <sprintf@plt+0x58a4>
   1710c:	cmp	r6, #13
   17110:	bne	17120 <sprintf@plt+0x5898>
   17114:	b	1712c <sprintf@plt+0x58a4>
   17118:	cmp	r6, #64	; 0x40
   1711c:	beq	1712c <sprintf@plt+0x58a4>
   17120:	strb	r7, [r0], #1
   17124:	sub	r2, r2, #1
   17128:	b	170dc <sprintf@plt+0x5854>
   1712c:	mov	r1, #0
   17130:	strb	r1, [r0]
   17134:	ldr	r0, [r8, #464]	; 0x1d0
   17138:	ldr	r5, [pc, #136]	; 171c8 <sprintf@plt+0x5940>
   1713c:	ldr	r5, [pc, r5]
   17140:	ldr	r1, [r5, #12]
   17144:	add	r0, r0, r1, lsl #4
   17148:	ldr	r4, [r0, #8]
   1714c:	ldr	r0, [r4]
   17150:	cmp	r0, #0
   17154:	beq	1715c <sprintf@plt+0x58d4>
   17158:	bl	116d8 <rb_close@plt>
   1715c:	cmp	r4, #0
   17160:	beq	1716c <sprintf@plt+0x58e4>
   17164:	mov	r0, r4
   17168:	bl	1163c <free@plt>
   1716c:	ldr	r0, [r8, #464]	; 0x1d0
   17170:	ldr	r1, [r5, #12]
   17174:	add	r0, r0, r1, lsl #4
   17178:	mov	r1, #0
   1717c:	str	r1, [r0, #4]
   17180:	str	r1, [r0, #8]
   17184:	ldr	r0, [r8]
   17188:	ldr	r1, [pc, #60]	; 171cc <sprintf@plt+0x5944>
   1718c:	add	r1, pc, r1
   17190:	bl	12484 <sprintf@plt+0xbfc>
   17194:	ldr	r1, [r5, #12]
   17198:	mov	r0, r8
   1719c:	bl	12fa0 <sprintf@plt+0x1718>
   171a0:	ldr	r0, [r8, #460]	; 0x1cc
   171a4:	subs	r0, r0, #1
   171a8:	str	r0, [r8, #460]	; 0x1cc
   171ac:	bne	171b8 <sprintf@plt+0x5930>
   171b0:	mov	r0, r8
   171b4:	bl	12ed4 <sprintf@plt+0x164c>
   171b8:	sub	sp, fp, #24
   171bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   171c0:			; <UNDEFINED> instruction: 0xfffffe9c
   171c4:	andeq	r2, r0, pc, ror r9
   171c8:	andeq	r3, r1, r4, lsr #32
   171cc:	andeq	r2, r0, lr, ror #14
   171d0:	push	{fp, lr}
   171d4:	mov	fp, sp
   171d8:	ldr	r0, [r2]
   171dc:	mov	r1, #0
   171e0:	mov	r2, #10
   171e4:	bl	116e4 <strtol@plt>
   171e8:	cmn	r0, #1
   171ec:	mov	r2, r0
   171f0:	ldrgt	r0, [pc, #32]	; 17218 <sprintf@plt+0x5990>
   171f4:	addgt	r0, pc, r0
   171f8:	strgt	r2, [r0]
   171fc:	popgt	{fp, pc}
   17200:	ldr	r1, [pc, #20]	; 1721c <sprintf@plt+0x5994>
   17204:	mov	r0, #67	; 0x43
   17208:	add	r1, pc, r1
   1720c:	bl	124f8 <sprintf@plt+0xc70>
   17210:	mov	r0, #3
   17214:	bl	11870 <exit@plt>
   17218:	andeq	r3, r1, ip, ror #25
   1721c:			; <UNDEFINED> instruction: 0x000027b7
   17220:	push	{r4, r5, r6, sl, fp, lr}
   17224:	add	fp, sp, #16
   17228:	sub	sp, sp, #8
   1722c:	ldr	r5, [pc, #116]	; 172a8 <sprintf@plt+0x5a20>
   17230:	mov	r4, sp
   17234:	mov	r1, r4
   17238:	ldr	r5, [pc, r5]
   1723c:	ldr	r0, [r5]
   17240:	bl	11678 <rb_dictionary_foreach_start@plt>
   17244:	ldr	r0, [r5]
   17248:	mov	r1, r4
   1724c:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17250:	cmp	r0, #0
   17254:	beq	172a0 <sprintf@plt+0x5a18>
   17258:	ldr	r6, [pc, #76]	; 172ac <sprintf@plt+0x5a24>
   1725c:	mov	r4, sp
   17260:	ldr	r6, [pc, r6]
   17264:	ldr	r1, [r0, #464]	; 0x1d0
   17268:	ldr	r2, [r6, #12]
   1726c:	add	r1, r1, r2, lsl #4
   17270:	ldr	r1, [r1, #8]
   17274:	cmp	r1, #0
   17278:	movne	r1, #1
   1727c:	blne	17384 <sprintf@plt+0x5afc>
   17280:	ldr	r0, [r5]
   17284:	mov	r1, r4
   17288:	bl	11630 <rb_dictionary_foreach_next@plt>
   1728c:	ldr	r0, [r5]
   17290:	mov	r1, r4
   17294:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17298:	cmp	r0, #0
   1729c:	bne	17264 <sprintf@plt+0x59dc>
   172a0:	sub	sp, fp, #16
   172a4:	pop	{r4, r5, r6, sl, fp, pc}
   172a8:	andeq	r2, r1, ip, lsl pc
   172ac:	andeq	r2, r1, r4, lsl #30
   172b0:	push	{r4, r5, r6, r7, fp, lr}
   172b4:	add	fp, sp, #16
   172b8:	mov	r4, r0
   172bc:	mov	r0, #1
   172c0:	mov	r1, #4
   172c4:	bl	115a0 <calloc@plt>
   172c8:	cmp	r0, #0
   172cc:	beq	17344 <sprintf@plt+0x5abc>
   172d0:	mov	r5, r0
   172d4:	ldr	r0, [r4, #460]	; 0x1cc
   172d8:	ldr	r1, [r4, #464]	; 0x1d0
   172dc:	add	r0, r0, #1
   172e0:	str	r0, [r4, #460]	; 0x1cc
   172e4:	ldr	r0, [pc, #92]	; 17348 <sprintf@plt+0x5ac0>
   172e8:	ldr	r0, [pc, r0]
   172ec:	ldr	r6, [r0, #12]
   172f0:	add	r0, r1, r6, lsl #4
   172f4:	str	r5, [r0, #8]
   172f8:	ldr	r7, [pc, #76]	; 1734c <sprintf@plt+0x5ac4>
   172fc:	ldr	r7, [pc, r7]
   17300:	bl	1169c <rb_current_time@plt>
   17304:	ldr	r1, [r4, #464]	; 0x1d0
   17308:	add	r0, r0, r7
   1730c:	mov	r2, r4
   17310:	add	r1, r1, r6, lsl #4
   17314:	str	r0, [r1, #4]
   17318:	add	r0, r4, #192	; 0xc0
   1731c:	ldr	r1, [pc, #44]	; 17350 <sprintf@plt+0x5ac8>
   17320:	add	r1, pc, r1
   17324:	bl	11f94 <sprintf@plt+0x70c>
   17328:	str	r0, [r5]
   1732c:	ldr	r0, [r4]
   17330:	ldr	r1, [pc, #28]	; 17354 <sprintf@plt+0x5acc>
   17334:	add	r1, pc, r1
   17338:	bl	12484 <sprintf@plt+0xbfc>
   1733c:	mov	r0, #1
   17340:	pop	{r4, r5, r6, r7, fp, pc}
   17344:	bl	11750 <rb_outofmemory@plt>
   17348:	andeq	r2, r1, ip, ror lr
   1734c:	andeq	r3, r1, r4, ror #23
   17350:	andeq	r0, r0, ip, lsl #2
   17354:	andeq	r2, r0, sp, lsr #13
   17358:	ldr	r1, [r0, #464]	; 0x1d0
   1735c:	ldr	r2, [pc, #28]	; 17380 <sprintf@plt+0x5af8>
   17360:	ldr	r2, [pc, r2]
   17364:	ldr	r2, [r2, #12]
   17368:	add	r1, r1, r2, lsl #4
   1736c:	ldr	r1, [r1, #8]
   17370:	cmp	r1, #0
   17374:	bxeq	lr
   17378:	mov	r1, #1
   1737c:	b	17384 <sprintf@plt+0x5afc>
   17380:	andeq	r2, r1, r4, lsl #28
   17384:	push	{r4, r5, r6, r7, fp, lr}
   17388:	add	fp, sp, #16
   1738c:	mov	r4, r0
   17390:	ldr	r0, [r0, #464]	; 0x1d0
   17394:	ldr	r7, [pc, #140]	; 17428 <sprintf@plt+0x5ba0>
   17398:	mov	r6, r1
   1739c:	mov	r2, #64	; 0x40
   173a0:	ldr	r7, [pc, r7]
   173a4:	ldr	r1, [r7, #12]
   173a8:	add	r0, r0, r1, lsl #4
   173ac:	ldr	r5, [r0, #8]
   173b0:	ldr	r1, [pc, #116]	; 1742c <sprintf@plt+0x5ba4>
   173b4:	add	r0, r4, #376	; 0x178
   173b8:	add	r1, pc, r1
   173bc:	bl	11618 <rb_strlcpy@plt>
   173c0:	ldr	r0, [pc, #104]	; 17430 <sprintf@plt+0x5ba8>
   173c4:	add	r0, pc, r0
   173c8:	ldr	r1, [r0, r6, lsl #2]
   173cc:	ldr	r0, [r4]
   173d0:	bl	12484 <sprintf@plt+0xbfc>
   173d4:	ldr	r0, [r5]
   173d8:	bl	12134 <sprintf@plt+0x8ac>
   173dc:	cmp	r5, #0
   173e0:	beq	173ec <sprintf@plt+0x5b64>
   173e4:	mov	r0, r5
   173e8:	bl	1163c <free@plt>
   173ec:	ldr	r0, [r4, #464]	; 0x1d0
   173f0:	ldr	r1, [r7, #12]
   173f4:	mov	r2, #0
   173f8:	add	r0, r0, r1, lsl #4
   173fc:	str	r2, [r0, #4]
   17400:	str	r2, [r0, #8]
   17404:	mov	r0, r4
   17408:	bl	12fa0 <sprintf@plt+0x1718>
   1740c:	ldr	r0, [r4, #460]	; 0x1cc
   17410:	subs	r0, r0, #1
   17414:	str	r0, [r4, #460]	; 0x1cc
   17418:	popne	{r4, r5, r6, r7, fp, pc}
   1741c:	mov	r0, r4
   17420:	pop	{r4, r5, r6, r7, fp, lr}
   17424:	b	12ed4 <sprintf@plt+0x164c>
   17428:	andeq	r2, r1, r4, asr #27
   1742c:	andeq	r1, r0, ip, ror #26
   17430:	andeq	r2, r1, r0, lsr #22
   17434:	push	{r4, r5, r6, r7, fp, lr}
   17438:	add	fp, sp, #16
   1743c:	cmp	r0, #0
   17440:	mov	r4, r3
   17444:	cmpne	r1, #0
   17448:	bne	1745c <sprintf@plt+0x5bd4>
   1744c:	mov	r0, r4
   17450:	mov	r1, #1
   17454:	pop	{r4, r5, r6, r7, fp, lr}
   17458:	b	17384 <sprintf@plt+0x5afc>
   1745c:	mov	r5, r0
   17460:	bl	11690 <strlen@plt>
   17464:	cmp	r0, #64	; 0x40
   17468:	bcc	1747c <sprintf@plt+0x5bf4>
   1746c:	mov	r0, r4
   17470:	mov	r1, #2
   17474:	pop	{r4, r5, r6, r7, fp, lr}
   17478:	b	17384 <sprintf@plt+0x5afc>
   1747c:	add	r6, r4, #376	; 0x178
   17480:	mov	r1, r5
   17484:	mov	r2, #64	; 0x40
   17488:	mov	r0, r6
   1748c:	bl	11618 <rb_strlcpy@plt>
   17490:	ldr	r7, [pc, #120]	; 17510 <sprintf@plt+0x5c88>
   17494:	ldr	r7, [pc, r7]
   17498:	ldr	r2, [r4, #464]	; 0x1d0
   1749c:	ldr	r0, [r4]
   174a0:	ldr	r1, [r7, #12]
   174a4:	add	r1, r2, r1, lsl #4
   174a8:	mov	r2, r6
   174ac:	ldr	r5, [r1, #8]
   174b0:	ldr	r1, [pc, #92]	; 17514 <sprintf@plt+0x5c8c>
   174b4:	add	r1, pc, r1
   174b8:	bl	12484 <sprintf@plt+0xbfc>
   174bc:	ldr	r0, [r5]
   174c0:	bl	12134 <sprintf@plt+0x8ac>
   174c4:	cmp	r5, #0
   174c8:	beq	174d4 <sprintf@plt+0x5c4c>
   174cc:	mov	r0, r5
   174d0:	bl	1163c <free@plt>
   174d4:	ldr	r0, [r4, #464]	; 0x1d0
   174d8:	ldr	r1, [r7, #12]
   174dc:	mov	r2, #0
   174e0:	add	r0, r0, r1, lsl #4
   174e4:	str	r2, [r0, #4]
   174e8:	str	r2, [r0, #8]
   174ec:	mov	r0, r4
   174f0:	bl	12fa0 <sprintf@plt+0x1718>
   174f4:	ldr	r0, [r4, #460]	; 0x1cc
   174f8:	subs	r0, r0, #1
   174fc:	str	r0, [r4, #460]	; 0x1cc
   17500:	popne	{r4, r5, r6, r7, fp, pc}
   17504:	mov	r0, r4
   17508:	pop	{r4, r5, r6, r7, fp, lr}
   1750c:	b	12ed4 <sprintf@plt+0x164c>
   17510:	ldrdeq	r2, [r1], -r0
   17514:	andeq	r2, r0, r1, lsr #11
   17518:	push	{fp, lr}
   1751c:	mov	fp, sp
   17520:	ldr	r0, [r2]
   17524:	mov	r1, #0
   17528:	mov	r2, #10
   1752c:	bl	116e4 <strtol@plt>
   17530:	mov	r2, r0
   17534:	cmn	r0, #1
   17538:	ble	1754c <sprintf@plt+0x5cc4>
   1753c:	ldr	r0, [pc, #28]	; 17560 <sprintf@plt+0x5cd8>
   17540:	add	r0, pc, r0
   17544:	str	r2, [r0]
   17548:	pop	{fp, pc}
   1754c:	ldr	r1, [pc, #16]	; 17564 <sprintf@plt+0x5cdc>
   17550:	mov	r0, #67	; 0x43
   17554:	add	r1, pc, r1
   17558:	pop	{fp, lr}
   1755c:	b	124f8 <sprintf@plt+0xc70>
   17560:	andeq	r3, r1, r0, asr #20
   17564:	andeq	r2, r0, fp, lsl #11
   17568:	push	{r4, r5, r6, sl, fp, lr}
   1756c:	add	fp, sp, #16
   17570:	sub	sp, sp, #8
   17574:	ldr	r0, [r2]
   17578:	ldrb	r0, [r0]
   1757c:	ldr	r4, [pc, #272]	; 17694 <sprintf@plt+0x5e0c>
   17580:	subs	r0, r0, #49	; 0x31
   17584:	add	r4, pc, r4
   17588:	clz	r0, r0
   1758c:	lsr	r5, r0, #5
   17590:	bne	175f0 <sprintf@plt+0x5d68>
   17594:	ldrb	r0, [r4]
   17598:	cmp	r0, #0
   1759c:	beq	175c4 <sprintf@plt+0x5d3c>
   175a0:	ldrh	r1, [r4, #54]	; 0x36
   175a4:	cmp	r1, #0
   175a8:	beq	175c4 <sprintf@plt+0x5d3c>
   175ac:	ldr	r0, [r4, #184]	; 0xb8
   175b0:	cmp	r0, #0
   175b4:	bne	175c4 <sprintf@plt+0x5d3c>
   175b8:	ldr	r0, [pc, #220]	; 1769c <sprintf@plt+0x5e14>
   175bc:	add	r0, pc, r0
   175c0:	bl	181d0 <sprintf@plt+0x6948>
   175c4:	ldrb	r0, [r4, #188]	; 0xbc
   175c8:	cmp	r0, #0
   175cc:	beq	17680 <sprintf@plt+0x5df8>
   175d0:	ldrh	r1, [r4, #242]	; 0xf2
   175d4:	cmp	r1, #0
   175d8:	beq	17680 <sprintf@plt+0x5df8>
   175dc:	ldr	r0, [r4, #372]	; 0x174
   175e0:	cmp	r0, #0
   175e4:	addeq	r0, r4, #188	; 0xbc
   175e8:	bleq	181d0 <sprintf@plt+0x6948>
   175ec:	b	17680 <sprintf@plt+0x5df8>
   175f0:	ldr	r1, [r4, #184]	; 0xb8
   175f4:	ldr	r0, [r4, #372]	; 0x174
   175f8:	orrs	r2, r1, r0
   175fc:	beq	17680 <sprintf@plt+0x5df8>
   17600:	cmp	r1, #0
   17604:	beq	17614 <sprintf@plt+0x5d8c>
   17608:	mov	r0, r1
   1760c:	bl	116d8 <rb_close@plt>
   17610:	ldr	r0, [r4, #372]	; 0x174
   17614:	cmp	r0, #0
   17618:	beq	17620 <sprintf@plt+0x5d98>
   1761c:	bl	116d8 <rb_close@plt>
   17620:	mov	r0, #0
   17624:	str	r0, [r4, #184]	; 0xb8
   17628:	str	r0, [r4, #372]	; 0x174
   1762c:	mov	r4, sp
   17630:	ldr	r6, [pc, #96]	; 17698 <sprintf@plt+0x5e10>
   17634:	mov	r1, r4
   17638:	ldr	r6, [pc, r6]
   1763c:	ldr	r0, [r6]
   17640:	bl	11678 <rb_dictionary_foreach_start@plt>
   17644:	ldr	r0, [r6]
   17648:	mov	r1, r4
   1764c:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17650:	cmp	r0, #0
   17654:	beq	17680 <sprintf@plt+0x5df8>
   17658:	mov	r4, sp
   1765c:	bl	1800c <sprintf@plt+0x6784>
   17660:	ldr	r0, [r6]
   17664:	mov	r1, r4
   17668:	bl	11630 <rb_dictionary_foreach_next@plt>
   1766c:	ldr	r0, [r6]
   17670:	mov	r1, r4
   17674:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17678:	cmp	r0, #0
   1767c:	bne	1765c <sprintf@plt+0x5dd4>
   17680:	ldr	r0, [pc, #24]	; 176a0 <sprintf@plt+0x5e18>
   17684:	add	r0, pc, r0
   17688:	strb	r5, [r0]
   1768c:	sub	sp, fp, #16
   17690:	pop	{r4, r5, r6, sl, fp, pc}
   17694:	andeq	r7, r1, ip, lsr #21
   17698:	andeq	r2, r1, ip, lsl fp
   1769c:	andeq	r7, r1, r4, ror sl
   176a0:	andeq	r7, r1, r4, lsr #22
   176a4:	push	{r4, r5, fp, lr}
   176a8:	add	fp, sp, #8
   176ac:	ldm	r2, {r4, r5}
   176b0:	mov	r0, r5
   176b4:	mov	r1, #0
   176b8:	mov	r2, #10
   176bc:	bl	116e4 <strtol@plt>
   176c0:	sub	r1, r0, #1
   176c4:	movw	r2, #65535	; 0xffff
   176c8:	cmp	r1, r2
   176cc:	bcs	176e0 <sprintf@plt+0x5e58>
   176d0:	uxth	r1, r0
   176d4:	mov	r0, r4
   176d8:	pop	{r4, r5, fp, lr}
   176dc:	b	181d0 <sprintf@plt+0x6948>
   176e0:	ldr	r1, [pc, #24]	; 17700 <sprintf@plt+0x5e78>
   176e4:	mov	r0, #67	; 0x43
   176e8:	mov	r2, r4
   176ec:	mov	r3, r5
   176f0:	add	r1, pc, r1
   176f4:	bl	124f8 <sprintf@plt+0xc70>
   176f8:	mov	r0, #3
   176fc:	bl	11870 <exit@plt>
   17700:	andeq	r2, r0, r9, lsl #10
   17704:	push	{r4, sl, fp, lr}
   17708:	add	fp, sp, #8
   1770c:	ldr	r4, [pc, #56]	; 1774c <sprintf@plt+0x5ec4>
   17710:	add	r4, pc, r4
   17714:	ldr	r0, [r4, #184]	; 0xb8
   17718:	cmp	r0, #0
   1771c:	beq	17724 <sprintf@plt+0x5e9c>
   17720:	bl	116d8 <rb_close@plt>
   17724:	ldr	r0, [r4, #372]	; 0x174
   17728:	cmp	r0, #0
   1772c:	beq	17734 <sprintf@plt+0x5eac>
   17730:	bl	116d8 <rb_close@plt>
   17734:	ldr	r0, [pc, #20]	; 17750 <sprintf@plt+0x5ec8>
   17738:	mov	r1, #0
   1773c:	mov	r2, #376	; 0x178
   17740:	add	r0, pc, r0
   17744:	pop	{r4, sl, fp, lr}
   17748:	b	115d0 <memset@plt>
   1774c:	andeq	r7, r1, r0, lsr #18
   17750:	strdeq	r7, [r1], -r0
   17754:	push	{r4, r5, r6, r7, fp, lr}
   17758:	add	fp, sp, #16
   1775c:	ldr	r0, [r2, #4]
   17760:	mov	r4, r2
   17764:	mov	r1, #0
   17768:	mov	r2, #10
   1776c:	bl	116e4 <strtol@plt>
   17770:	mov	r6, r0
   17774:	mov	r0, #1
   17778:	mov	r1, #40	; 0x28
   1777c:	bl	115a0 <calloc@plt>
   17780:	cmp	r0, #0
   17784:	beq	17980 <sprintf@plt+0x60f8>
   17788:	mov	r5, r0
   1778c:	sub	r0, r6, #1
   17790:	movw	r1, #65535	; 0xffff
   17794:	cmp	r0, r1
   17798:	bcs	17984 <sprintf@plt+0x60fc>
   1779c:	strh	r6, [r5, #20]
   177a0:	ldr	r7, [r4]
   177a4:	ldr	r1, [pc, #528]	; 179bc <sprintf@plt+0x6134>
   177a8:	add	r1, pc, r1
   177ac:	mov	r0, r7
   177b0:	bl	11594 <strcasecmp@plt>
   177b4:	cmp	r0, #0
   177b8:	beq	17838 <sprintf@plt+0x5fb0>
   177bc:	ldr	r1, [pc, #508]	; 179c0 <sprintf@plt+0x6138>
   177c0:	mov	r0, r7
   177c4:	add	r1, pc, r1
   177c8:	bl	11594 <strcasecmp@plt>
   177cc:	cmp	r0, #0
   177d0:	beq	17864 <sprintf@plt+0x5fdc>
   177d4:	ldr	r1, [pc, #488]	; 179c4 <sprintf@plt+0x613c>
   177d8:	mov	r0, r7
   177dc:	add	r1, pc, r1
   177e0:	bl	11594 <strcasecmp@plt>
   177e4:	cmp	r0, #0
   177e8:	beq	17890 <sprintf@plt+0x6008>
   177ec:	ldr	r1, [pc, #468]	; 179c8 <sprintf@plt+0x6140>
   177f0:	mov	r0, r7
   177f4:	add	r1, pc, r1
   177f8:	bl	11594 <strcasecmp@plt>
   177fc:	cmp	r0, #0
   17800:	bne	17998 <sprintf@plt+0x6110>
   17804:	mov	r0, #4
   17808:	uxth	r3, r6
   1780c:	mov	r1, #16
   17810:	str	r0, [r5, #16]
   17814:	mov	r0, r5
   17818:	ldr	r2, [pc, #428]	; 179cc <sprintf@plt+0x6144>
   1781c:	add	r2, pc, r2
   17820:	bl	11810 <snprintf@plt>
   17824:	ldr	r0, [pc, #420]	; 179d0 <sprintf@plt+0x6148>
   17828:	add	r0, pc, r0
   1782c:	str	r0, [r5, #24]
   17830:	mov	r0, #1
   17834:	b	178c0 <sprintf@plt+0x6038>
   17838:	mov	r0, #1
   1783c:	uxth	r3, r6
   17840:	mov	r1, #16
   17844:	str	r0, [r5, #16]
   17848:	mov	r0, r5
   1784c:	ldr	r2, [pc, #392]	; 179dc <sprintf@plt+0x6154>
   17850:	add	r2, pc, r2
   17854:	bl	11810 <snprintf@plt>
   17858:	ldr	r0, [pc, #384]	; 179e0 <sprintf@plt+0x6158>
   1785c:	add	r0, pc, r0
   17860:	b	178b8 <sprintf@plt+0x6030>
   17864:	mov	r0, #2
   17868:	uxth	r3, r6
   1786c:	mov	r1, #16
   17870:	str	r0, [r5, #16]
   17874:	mov	r0, r5
   17878:	ldr	r2, [pc, #356]	; 179e4 <sprintf@plt+0x615c>
   1787c:	add	r2, pc, r2
   17880:	bl	11810 <snprintf@plt>
   17884:	ldr	r0, [pc, #348]	; 179e8 <sprintf@plt+0x6160>
   17888:	add	r0, pc, r0
   1788c:	b	178b8 <sprintf@plt+0x6030>
   17890:	mov	r0, #3
   17894:	uxth	r3, r6
   17898:	mov	r1, #16
   1789c:	str	r0, [r5, #16]
   178a0:	mov	r0, r5
   178a4:	ldr	r2, [pc, #320]	; 179ec <sprintf@plt+0x6164>
   178a8:	add	r2, pc, r2
   178ac:	bl	11810 <snprintf@plt>
   178b0:	ldr	r0, [pc, #312]	; 179f0 <sprintf@plt+0x6168>
   178b4:	add	r0, pc, r0
   178b8:	str	r0, [r5, #24]
   178bc:	mov	r0, #0
   178c0:	strb	r0, [r5, #22]
   178c4:	ldr	r0, [pc, #264]	; 179d4 <sprintf@plt+0x614c>
   178c8:	ldr	r0, [pc, r0]
   178cc:	cmp	r0, #0
   178d0:	beq	1792c <sprintf@plt+0x60a4>
   178d4:	ldrh	r3, [r5, #20]
   178d8:	ldr	r1, [r5, #16]
   178dc:	mov	r2, r0
   178e0:	b	178f0 <sprintf@plt+0x6068>
   178e4:	ldr	r2, [r2, #8]
   178e8:	cmp	r2, #0
   178ec:	beq	1792c <sprintf@plt+0x60a4>
   178f0:	ldr	r7, [r2]
   178f4:	ldr	r6, [r7, #16]
   178f8:	cmp	r6, r1
   178fc:	bne	178e4 <sprintf@plt+0x605c>
   17900:	ldrh	r7, [r7, #20]
   17904:	cmp	r7, r3
   17908:	bne	178e4 <sprintf@plt+0x605c>
   1790c:	ldr	r2, [r4]
   17910:	ldr	r1, [pc, #224]	; 179f8 <sprintf@plt+0x6170>
   17914:	mov	r0, #67	; 0x43
   17918:	add	r1, pc, r1
   1791c:	bl	124f8 <sprintf@plt+0xc70>
   17920:	mov	r0, r5
   17924:	pop	{r4, r5, r6, r7, fp, lr}
   17928:	b	1163c <free@plt>
   1792c:	mov	r1, #0
   17930:	str	r5, [r5, #28]
   17934:	add	r2, r5, #28
   17938:	cmp	r0, #0
   1793c:	str	r1, [r5, #32]
   17940:	str	r0, [r5, #36]	; 0x24
   17944:	ldr	r1, [pc, #140]	; 179d8 <sprintf@plt+0x6150>
   17948:	add	r1, pc, r1
   1794c:	beq	1795c <sprintf@plt+0x60d4>
   17950:	add	r0, r0, #4
   17954:	str	r2, [r0]
   17958:	b	1796c <sprintf@plt+0x60e4>
   1795c:	mov	r0, r1
   17960:	ldr	r3, [r0, #4]!
   17964:	cmp	r3, #0
   17968:	streq	r2, [r0]
   1796c:	str	r2, [r1]
   17970:	ldr	r0, [r1, #8]
   17974:	add	r0, r0, #1
   17978:	str	r0, [r1, #8]
   1797c:	pop	{r4, r5, r6, r7, fp, pc}
   17980:	bl	11750 <rb_outofmemory@plt>
   17984:	ldm	r4, {r2, r3}
   17988:	ldr	r1, [pc, #40]	; 179b8 <sprintf@plt+0x6130>
   1798c:	mov	r0, #67	; 0x43
   17990:	add	r1, pc, r1
   17994:	b	179ac <sprintf@plt+0x6124>
   17998:	ldr	r1, [pc, #84]	; 179f4 <sprintf@plt+0x616c>
   1799c:	uxth	r3, r6
   179a0:	mov	r0, #67	; 0x43
   179a4:	mov	r2, r7
   179a8:	add	r1, pc, r1
   179ac:	bl	124f8 <sprintf@plt+0xc70>
   179b0:	mov	r0, #3
   179b4:	bl	11870 <exit@plt>
   179b8:	andeq	r2, r0, r8, lsl #5
   179bc:	andeq	r2, r0, r6, lsr #10
   179c0:	andeq	r2, r0, r1, lsl r5
   179c4:	andeq	r2, r0, r0, lsl #10
   179c8:	strdeq	r2, [r0], -r4
   179cc:	andeq	r2, r0, r7, asr #8
   179d0:	muleq	r0, ip, r0
   179d4:	andeq	r7, r1, r4, ror #17
   179d8:	andeq	r7, r1, r4, ror #16
   179dc:	andeq	r2, r0, sp, ror #7
   179e0:	andeq	r0, r0, r8, lsr #30
   179e4:	andeq	r2, r0, ip, asr #7
   179e8:	andeq	r0, r0, r0, ror pc
   179ec:	andeq	r2, r0, fp, lsr #7
   179f0:	andeq	r1, r0, r0, lsl r0
   179f4:	andeq	r2, r0, ip, asr #5
   179f8:	andeq	r2, r0, sl, lsl #7
   179fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a00:	add	fp, sp, #28
   17a04:	sub	sp, sp, #12
   17a08:	ldr	r4, [r2]
   17a0c:	ldr	r1, [pc, #748]	; 17d00 <sprintf@plt+0x6478>
   17a10:	mov	r5, r2
   17a14:	add	r1, pc, r1
   17a18:	mov	r0, r4
   17a1c:	bl	11594 <strcasecmp@plt>
   17a20:	cmp	r0, #0
   17a24:	beq	17a78 <sprintf@plt+0x61f0>
   17a28:	ldr	r1, [pc, #724]	; 17d04 <sprintf@plt+0x647c>
   17a2c:	mov	r0, r4
   17a30:	add	r1, pc, r1
   17a34:	bl	11594 <strcasecmp@plt>
   17a38:	cmp	r0, #0
   17a3c:	beq	17a80 <sprintf@plt+0x61f8>
   17a40:	ldr	r1, [pc, #704]	; 17d08 <sprintf@plt+0x6480>
   17a44:	mov	r0, r4
   17a48:	add	r1, pc, r1
   17a4c:	bl	11594 <strcasecmp@plt>
   17a50:	cmp	r0, #0
   17a54:	beq	17a88 <sprintf@plt+0x6200>
   17a58:	ldr	r1, [pc, #684]	; 17d0c <sprintf@plt+0x6484>
   17a5c:	mov	r0, r4
   17a60:	add	r1, pc, r1
   17a64:	bl	11594 <strcasecmp@plt>
   17a68:	clz	r0, r0
   17a6c:	lsr	r0, r0, #5
   17a70:	lsl	r6, r0, #2
   17a74:	b	17a8c <sprintf@plt+0x6204>
   17a78:	mov	r6, #1
   17a7c:	b	17a8c <sprintf@plt+0x6204>
   17a80:	mov	r6, #2
   17a84:	b	17a8c <sprintf@plt+0x6204>
   17a88:	mov	r6, #3
   17a8c:	ldr	r0, [r5, #4]
   17a90:	mov	r1, #0
   17a94:	mov	r2, #10
   17a98:	bl	116e4 <strtol@plt>
   17a9c:	mov	r3, r0
   17aa0:	sub	r0, r0, #1
   17aa4:	movw	r1, #65535	; 0xffff
   17aa8:	cmp	r0, r1
   17aac:	bcs	17ce0 <sprintf@plt+0x6458>
   17ab0:	cmp	r6, #0
   17ab4:	beq	17cf0 <sprintf@plt+0x6468>
   17ab8:	ldr	r0, [pc, #600]	; 17d18 <sprintf@plt+0x6490>
   17abc:	ldr	r0, [pc, r0]
   17ac0:	cmp	r0, #0
   17ac4:	beq	17cc4 <sprintf@plt+0x643c>
   17ac8:	uxth	r1, r3
   17acc:	b	17adc <sprintf@plt+0x6254>
   17ad0:	ldr	r0, [r0, #8]
   17ad4:	cmp	r0, #0
   17ad8:	beq	17cc4 <sprintf@plt+0x643c>
   17adc:	ldr	r4, [r0]
   17ae0:	ldr	r2, [r4, #16]
   17ae4:	cmp	r2, r6
   17ae8:	bne	17ad0 <sprintf@plt+0x6248>
   17aec:	ldrh	r2, [r4, #20]
   17af0:	cmp	r2, r1
   17af4:	bne	17ad0 <sprintf@plt+0x6248>
   17af8:	ldr	sl, [pc, #544]	; 17d20 <sprintf@plt+0x6498>
   17afc:	add	r5, sp, #4
   17b00:	mov	r1, r5
   17b04:	ldr	sl, [pc, sl]
   17b08:	ldr	r0, [sl]
   17b0c:	bl	11678 <rb_dictionary_foreach_start@plt>
   17b10:	ldr	r0, [sl]
   17b14:	mov	r1, r5
   17b18:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17b1c:	cmp	r0, #0
   17b20:	beq	17c44 <sprintf@plt+0x63bc>
   17b24:	ldr	r8, [pc, #504]	; 17d24 <sprintf@plt+0x649c>
   17b28:	mov	r6, r0
   17b2c:	add	r9, sp, #4
   17b30:	ldr	r8, [pc, r8]
   17b34:	b	17b6c <sprintf@plt+0x62e4>
   17b38:	ldr	r0, [r6, #460]	; 0x1cc
   17b3c:	subs	r0, r0, #1
   17b40:	str	r0, [r6, #460]	; 0x1cc
   17b44:	beq	17bf0 <sprintf@plt+0x6368>
   17b48:	ldr	r0, [sl]
   17b4c:	mov	r1, r9
   17b50:	bl	11630 <rb_dictionary_foreach_next@plt>
   17b54:	ldr	r0, [sl]
   17b58:	mov	r1, r9
   17b5c:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17b60:	mov	r6, r0
   17b64:	cmp	r0, #0
   17b68:	beq	17c44 <sprintf@plt+0x63bc>
   17b6c:	ldr	r0, [r6, #464]	; 0x1d0
   17b70:	ldr	r1, [r8, #12]
   17b74:	add	r0, r0, r1, lsl #4
   17b78:	ldr	r7, [r0, #8]
   17b7c:	cmp	r7, #0
   17b80:	beq	17b48 <sprintf@plt+0x62c0>
   17b84:	ldr	r0, [r6, #460]	; 0x1cc
   17b88:	add	r0, r0, #1
   17b8c:	str	r0, [r6, #460]	; 0x1cc
   17b90:	ldr	r1, [r7]
   17b94:	cmp	r1, #0
   17b98:	beq	17b38 <sprintf@plt+0x62b0>
   17b9c:	ldrh	r2, [r4, #20]
   17ba0:	b	17bb0 <sprintf@plt+0x6328>
   17ba4:	ldr	r1, [r1, #8]
   17ba8:	cmp	r1, #0
   17bac:	beq	17b38 <sprintf@plt+0x62b0>
   17bb0:	ldr	r0, [r1]
   17bb4:	ldr	r3, [r0, #8]
   17bb8:	ldrh	r5, [r3, #20]
   17bbc:	cmp	r5, r2
   17bc0:	bne	17ba4 <sprintf@plt+0x631c>
   17bc4:	ldr	r5, [r4, #16]
   17bc8:	ldr	r3, [r3, #16]
   17bcc:	cmp	r3, r5
   17bd0:	bne	17ba4 <sprintf@plt+0x631c>
   17bd4:	ldr	r1, [r0, #24]
   17bd8:	ldr	r2, [r0, #20]
   17bdc:	cmp	r1, #0
   17be0:	beq	17bfc <sprintf@plt+0x6374>
   17be4:	str	r2, [r1, #4]
   17be8:	ldr	r2, [r0, #20]
   17bec:	b	17c00 <sprintf@plt+0x6378>
   17bf0:	mov	r0, r6
   17bf4:	bl	12ed4 <sprintf@plt+0x164c>
   17bf8:	b	17b48 <sprintf@plt+0x62c0>
   17bfc:	str	r2, [r7, #4]
   17c00:	cmp	r2, #0
   17c04:	mov	r3, r7
   17c08:	addne	r3, r2, #8
   17c0c:	str	r1, [r3]
   17c10:	mov	r1, #0
   17c14:	str	r1, [r0, #20]
   17c18:	str	r1, [r0, #24]
   17c1c:	ldr	r1, [r7, #8]
   17c20:	sub	r1, r1, #1
   17c24:	str	r1, [r7, #8]
   17c28:	bl	1163c <free@plt>
   17c2c:	ldr	r0, [r7, #8]
   17c30:	cmp	r0, #0
   17c34:	bne	17b38 <sprintf@plt+0x62b0>
   17c38:	mov	r0, r6
   17c3c:	bl	1800c <sprintf@plt+0x6784>
   17c40:	b	17b38 <sprintf@plt+0x62b0>
   17c44:	ldr	r0, [r4, #36]	; 0x24
   17c48:	ldr	r1, [r4, #32]
   17c4c:	ldr	r5, [pc, #212]	; 17d28 <sprintf@plt+0x64a0>
   17c50:	cmp	r0, #0
   17c54:	add	r5, pc, r5
   17c58:	beq	17c68 <sprintf@plt+0x63e0>
   17c5c:	str	r1, [r0, #4]
   17c60:	ldr	r1, [r4, #32]
   17c64:	b	17c6c <sprintf@plt+0x63e4>
   17c68:	str	r1, [r5, #4]
   17c6c:	cmp	r1, #0
   17c70:	mov	r2, r5
   17c74:	mov	r6, #0
   17c78:	addne	r2, r1, #8
   17c7c:	str	r0, [r2]
   17c80:	str	r6, [r4, #32]
   17c84:	str	r6, [r4, #36]	; 0x24
   17c88:	ldr	r0, [r5, #8]
   17c8c:	sub	r0, r0, #1
   17c90:	str	r0, [r5, #8]
   17c94:	mov	r0, r4
   17c98:	bl	1163c <free@plt>
   17c9c:	ldr	r0, [r5, #8]
   17ca0:	cmp	r0, #0
   17ca4:	beq	17cb0 <sprintf@plt+0x6428>
   17ca8:	sub	sp, fp, #28
   17cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cb0:	ldr	r0, [pc, #116]	; 17d2c <sprintf@plt+0x64a4>
   17cb4:	add	r0, pc, r0
   17cb8:	strb	r6, [r0]
   17cbc:	sub	sp, fp, #28
   17cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cc4:	ldr	r2, [r5]
   17cc8:	ldr	r1, [pc, #76]	; 17d1c <sprintf@plt+0x6494>
   17ccc:	add	r1, pc, r1
   17cd0:	mov	r0, #67	; 0x43
   17cd4:	bl	124f8 <sprintf@plt+0xc70>
   17cd8:	mov	r0, #3
   17cdc:	bl	11870 <exit@plt>
   17ce0:	ldm	r5, {r2, r3}
   17ce4:	ldr	r1, [pc, #36]	; 17d10 <sprintf@plt+0x6488>
   17ce8:	add	r1, pc, r1
   17cec:	b	17cd0 <sprintf@plt+0x6448>
   17cf0:	ldr	r2, [r5]
   17cf4:	ldr	r1, [pc, #24]	; 17d14 <sprintf@plt+0x648c>
   17cf8:	add	r1, pc, r1
   17cfc:	b	17cd0 <sprintf@plt+0x6448>
   17d00:			; <UNDEFINED> instruction: 0x000022ba
   17d04:	andeq	r2, r0, r5, lsr #5
   17d08:	muleq	r0, r4, r2
   17d0c:	andeq	r2, r0, r8, lsl #5
   17d10:	andeq	r2, r0, r6, lsr r0
   17d14:	andeq	r2, r0, r5, asr r0
   17d18:	strdeq	r7, [r1], -r0
   17d1c:	strheq	r2, [r0], -r8
   17d20:	andeq	r2, r1, r0, asr r6
   17d24:	andeq	r2, r1, r0, asr r6
   17d28:	andeq	r7, r1, r8, asr r5
   17d2c:	strdeq	r7, [r1], -r4
   17d30:	push	{r4, r5, r6, r7, fp, lr}
   17d34:	add	fp, sp, #16
   17d38:	sub	sp, sp, #8
   17d3c:	ldr	r5, [pc, #232]	; 17e2c <sprintf@plt+0x65a4>
   17d40:	ldr	r5, [pc, r5]
   17d44:	cmp	r5, #0
   17d48:	beq	17dc0 <sprintf@plt+0x6538>
   17d4c:	ldr	r4, [pc, #220]	; 17e30 <sprintf@plt+0x65a8>
   17d50:	mov	r6, #0
   17d54:	add	r4, pc, r4
   17d58:	b	17d90 <sprintf@plt+0x6508>
   17d5c:	str	r1, [r4, #4]
   17d60:	cmp	r1, #0
   17d64:	mov	r2, r4
   17d68:	addne	r2, r1, #8
   17d6c:	cmp	r7, #0
   17d70:	str	r0, [r2]
   17d74:	str	r6, [r5, #4]
   17d78:	str	r6, [r5, #8]
   17d7c:	mov	r5, r7
   17d80:	ldr	r0, [r4, #8]
   17d84:	sub	r0, r0, #1
   17d88:	str	r0, [r4, #8]
   17d8c:	beq	17dc0 <sprintf@plt+0x6538>
   17d90:	ldr	r0, [r5]
   17d94:	ldr	r7, [r5, #8]
   17d98:	cmp	r0, #0
   17d9c:	beq	17da4 <sprintf@plt+0x651c>
   17da0:	bl	1163c <free@plt>
   17da4:	ldr	r0, [r5, #8]
   17da8:	ldr	r1, [r5, #4]
   17dac:	cmp	r0, #0
   17db0:	beq	17d5c <sprintf@plt+0x64d4>
   17db4:	str	r1, [r0, #4]
   17db8:	ldr	r1, [r5, #4]
   17dbc:	b	17d60 <sprintf@plt+0x64d8>
   17dc0:	ldr	r5, [pc, #108]	; 17e34 <sprintf@plt+0x65ac>
   17dc4:	mov	r4, sp
   17dc8:	mov	r1, r4
   17dcc:	ldr	r5, [pc, r5]
   17dd0:	ldr	r0, [r5]
   17dd4:	bl	11678 <rb_dictionary_foreach_start@plt>
   17dd8:	ldr	r0, [r5]
   17ddc:	mov	r1, r4
   17de0:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17de4:	cmp	r0, #0
   17de8:	beq	17e14 <sprintf@plt+0x658c>
   17dec:	mov	r4, sp
   17df0:	bl	1800c <sprintf@plt+0x6784>
   17df4:	ldr	r0, [r5]
   17df8:	mov	r1, r4
   17dfc:	bl	11630 <rb_dictionary_foreach_next@plt>
   17e00:	ldr	r0, [r5]
   17e04:	mov	r1, r4
   17e08:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17e0c:	cmp	r0, #0
   17e10:	bne	17df0 <sprintf@plt+0x6568>
   17e14:	ldr	r0, [pc, #28]	; 17e38 <sprintf@plt+0x65b0>
   17e18:	mov	r1, #0
   17e1c:	add	r0, pc, r0
   17e20:	strb	r1, [r0]
   17e24:	sub	sp, fp, #16
   17e28:	pop	{r4, r5, r6, r7, fp, pc}
   17e2c:	andeq	r7, r1, ip, ror #8
   17e30:	andeq	r7, r1, r8, asr r4
   17e34:	andeq	r2, r1, r8, lsl #7
   17e38:	andeq	r7, r1, ip, lsl #7
   17e3c:	push	{r4, r5, fp, lr}
   17e40:	add	fp, sp, #8
   17e44:	sub	sp, sp, #8
   17e48:	ldr	r5, [pc, #84]	; 17ea4 <sprintf@plt+0x661c>
   17e4c:	mov	r4, sp
   17e50:	mov	r1, r4
   17e54:	ldr	r5, [pc, r5]
   17e58:	ldr	r0, [r5]
   17e5c:	bl	11678 <rb_dictionary_foreach_start@plt>
   17e60:	ldr	r0, [r5]
   17e64:	mov	r1, r4
   17e68:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17e6c:	cmp	r0, #0
   17e70:	beq	17e9c <sprintf@plt+0x6614>
   17e74:	mov	r4, sp
   17e78:	bl	1800c <sprintf@plt+0x6784>
   17e7c:	ldr	r0, [r5]
   17e80:	mov	r1, r4
   17e84:	bl	11630 <rb_dictionary_foreach_next@plt>
   17e88:	ldr	r0, [r5]
   17e8c:	mov	r1, r4
   17e90:	bl	11588 <rb_dictionary_foreach_cur@plt>
   17e94:	cmp	r0, #0
   17e98:	bne	17e78 <sprintf@plt+0x65f0>
   17e9c:	sub	sp, fp, #8
   17ea0:	pop	{r4, r5, fp, pc}
   17ea4:	andeq	r2, r1, r0, lsl #6
   17ea8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17eac:	add	fp, sp, #24
   17eb0:	mov	r9, r0
   17eb4:	ldr	r0, [pc, #308]	; 17ff0 <sprintf@plt+0x6768>
   17eb8:	add	r0, pc, r0
   17ebc:	ldrb	r0, [r0]
   17ec0:	cmp	r0, #0
   17ec4:	beq	17f5c <sprintf@plt+0x66d4>
   17ec8:	ldr	r0, [pc, #292]	; 17ff4 <sprintf@plt+0x676c>
   17ecc:	add	r0, pc, r0
   17ed0:	ldr	r0, [r0, #8]
   17ed4:	cmp	r0, #0
   17ed8:	beq	17f5c <sprintf@plt+0x66d4>
   17edc:	ldr	r0, [r9, #460]	; 0x1cc
   17ee0:	mov	r1, #16
   17ee4:	add	r0, r0, #1
   17ee8:	str	r0, [r9, #460]	; 0x1cc
   17eec:	ldr	r0, [pc, #264]	; 17ffc <sprintf@plt+0x6774>
   17ef0:	ldr	r0, [pc, r0]
   17ef4:	ldr	r5, [r0, #12]
   17ef8:	mov	r0, #1
   17efc:	bl	115a0 <calloc@plt>
   17f00:	cmp	r0, #0
   17f04:	beq	17fec <sprintf@plt+0x6764>
   17f08:	ldr	r8, [r9, #464]	; 0x1d0
   17f0c:	add	r1, r8, r5, lsl #4
   17f10:	str	r0, [r1, #8]
   17f14:	ldr	r0, [pc, #228]	; 18000 <sprintf@plt+0x6778>
   17f18:	ldr	r0, [pc, r0]
   17f1c:	ldr	r6, [r0]
   17f20:	cmp	r6, #0
   17f24:	beq	17fdc <sprintf@plt+0x6754>
   17f28:	ldr	r5, [pc, #212]	; 18004 <sprintf@plt+0x677c>
   17f2c:	mov	r7, r6
   17f30:	add	r5, pc, r5
   17f34:	ldr	r4, [r7]
   17f38:	mov	r1, r5
   17f3c:	ldr	r0, [r4, #16]
   17f40:	bl	11594 <strcasecmp@plt>
   17f44:	cmp	r0, #0
   17f48:	beq	17f78 <sprintf@plt+0x66f0>
   17f4c:	ldr	r7, [r7, #8]
   17f50:	cmp	r7, #0
   17f54:	bne	17f34 <sprintf@plt+0x66ac>
   17f58:	b	17f94 <sprintf@plt+0x670c>
   17f5c:	ldr	r0, [pc, #148]	; 17ff8 <sprintf@plt+0x6770>
   17f60:	ldr	r0, [pc, r0]
   17f64:	ldr	r1, [r0, #12]
   17f68:	mov	r0, r9
   17f6c:	bl	12fa0 <sprintf@plt+0x1718>
   17f70:	mov	r0, #1
   17f74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17f78:	cmp	r4, #0
   17f7c:	beq	17f94 <sprintf@plt+0x670c>
   17f80:	ldr	r0, [r4, #12]
   17f84:	add	r0, r8, r0, lsl #4
   17f88:	ldr	r0, [r0, #12]
   17f8c:	cmp	r0, #2
   17f90:	bne	17fe4 <sprintf@plt+0x675c>
   17f94:	ldr	r5, [r6]
   17f98:	ldr	r0, [r5, #16]
   17f9c:	ldr	r1, [pc, #100]	; 18008 <sprintf@plt+0x6780>
   17fa0:	add	r1, pc, r1
   17fa4:	bl	11594 <strcasecmp@plt>
   17fa8:	cmp	r0, #0
   17fac:	beq	17fc0 <sprintf@plt+0x6738>
   17fb0:	ldr	r6, [r6, #8]
   17fb4:	cmp	r6, #0
   17fb8:	bne	17f94 <sprintf@plt+0x670c>
   17fbc:	b	17fdc <sprintf@plt+0x6754>
   17fc0:	cmp	r5, #0
   17fc4:	beq	17fdc <sprintf@plt+0x6754>
   17fc8:	ldr	r0, [r5, #12]
   17fcc:	add	r0, r8, r0, lsl #4
   17fd0:	ldr	r0, [r0, #12]
   17fd4:	cmp	r0, #2
   17fd8:	bne	17fe4 <sprintf@plt+0x675c>
   17fdc:	mov	r0, r9
   17fe0:	bl	1896c <sprintf@plt+0x70e4>
   17fe4:	mov	r0, #1
   17fe8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17fec:	bl	11750 <rb_outofmemory@plt>
   17ff0:	strdeq	r7, [r1], -r0
   17ff4:	andeq	r7, r1, r0, ror #5
   17ff8:	andeq	r2, r1, r0, lsr #4
   17ffc:	muleq	r1, r0, r2
   18000:	andeq	r2, r1, r4, lsl #5
   18004:	andeq	r1, r0, r9, ror #16
   18008:	ldrdeq	r1, [r0], -r9
   1800c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18010:	add	fp, sp, #24
   18014:	mov	r4, r0
   18018:	ldr	r0, [r0, #464]	; 0x1d0
   1801c:	ldr	r8, [pc, #160]	; 180c4 <sprintf@plt+0x683c>
   18020:	ldr	r8, [pc, r8]
   18024:	ldr	r1, [r8, #12]
   18028:	add	r0, r0, r1, lsl #4
   1802c:	ldr	r5, [r0, #8]
   18030:	cmp	r5, #0
   18034:	beq	180c0 <sprintf@plt+0x6838>
   18038:	ldr	r0, [r4]
   1803c:	ldr	r1, [pc, #132]	; 180c8 <sprintf@plt+0x6840>
   18040:	add	r1, pc, r1
   18044:	bl	12484 <sprintf@plt+0xbfc>
   18048:	ldr	r7, [r5]
   1804c:	cmp	r7, #0
   18050:	beq	1807c <sprintf@plt+0x67f4>
   18054:	ldr	r6, [r7]
   18058:	ldr	r7, [r7, #8]
   1805c:	ldr	r0, [r6, #4]
   18060:	bl	116d8 <rb_close@plt>
   18064:	cmp	r6, #0
   18068:	beq	1804c <sprintf@plt+0x67c4>
   1806c:	mov	r0, r6
   18070:	bl	1163c <free@plt>
   18074:	cmp	r7, #0
   18078:	bne	18054 <sprintf@plt+0x67cc>
   1807c:	mov	r0, r5
   18080:	bl	1163c <free@plt>
   18084:	ldr	r0, [r4, #464]	; 0x1d0
   18088:	ldr	r1, [r8, #12]
   1808c:	mov	r2, #0
   18090:	add	r0, r0, r1, lsl #4
   18094:	str	r2, [r0, #4]
   18098:	str	r2, [r0, #8]
   1809c:	mov	r0, r4
   180a0:	bl	12fa0 <sprintf@plt+0x1718>
   180a4:	ldr	r0, [r4, #460]	; 0x1cc
   180a8:	subs	r0, r0, #1
   180ac:	str	r0, [r4, #460]	; 0x1cc
   180b0:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   180b4:	mov	r0, r4
   180b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   180bc:	b	12ed4 <sprintf@plt+0x164c>
   180c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   180c4:	andeq	r2, r1, r0, ror #2
   180c8:	andeq	r1, r0, r4, asr #27
   180cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   180d0:	add	fp, sp, #24
   180d4:	mov	r8, r0
   180d8:	ldr	r9, [r0, #464]	; 0x1d0
   180dc:	ldr	r0, [pc, #220]	; 181c0 <sprintf@plt+0x6938>
   180e0:	ldr	r0, [pc, r0]
   180e4:	ldr	r0, [r0, #12]
   180e8:	add	r0, r9, r0, lsl #4
   180ec:	ldr	r0, [r0, #8]
   180f0:	cmp	r0, #0
   180f4:	beq	181bc <sprintf@plt+0x6934>
   180f8:	ldrb	r0, [r0, #12]
   180fc:	cmp	r0, #0
   18100:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   18104:	ldr	r0, [pc, #184]	; 181c4 <sprintf@plt+0x693c>
   18108:	ldr	r0, [pc, r0]
   1810c:	ldr	r4, [r0]
   18110:	cmp	r4, #0
   18114:	beq	181b0 <sprintf@plt+0x6928>
   18118:	ldr	r5, [pc, #168]	; 181c8 <sprintf@plt+0x6940>
   1811c:	mov	r7, r4
   18120:	add	r5, pc, r5
   18124:	ldr	r6, [r7]
   18128:	mov	r1, r5
   1812c:	ldr	r0, [r6, #16]
   18130:	bl	11594 <strcasecmp@plt>
   18134:	cmp	r0, #0
   18138:	beq	1814c <sprintf@plt+0x68c4>
   1813c:	ldr	r7, [r7, #8]
   18140:	cmp	r7, #0
   18144:	bne	18124 <sprintf@plt+0x689c>
   18148:	b	18168 <sprintf@plt+0x68e0>
   1814c:	cmp	r6, #0
   18150:	beq	18168 <sprintf@plt+0x68e0>
   18154:	ldr	r0, [r6, #12]
   18158:	add	r0, r9, r0, lsl #4
   1815c:	ldr	r0, [r0, #12]
   18160:	cmp	r0, #2
   18164:	bne	181bc <sprintf@plt+0x6934>
   18168:	ldr	r5, [r4]
   1816c:	ldr	r0, [r5, #16]
   18170:	ldr	r1, [pc, #84]	; 181cc <sprintf@plt+0x6944>
   18174:	add	r1, pc, r1
   18178:	bl	11594 <strcasecmp@plt>
   1817c:	cmp	r0, #0
   18180:	beq	18194 <sprintf@plt+0x690c>
   18184:	ldr	r4, [r4, #8]
   18188:	cmp	r4, #0
   1818c:	bne	18168 <sprintf@plt+0x68e0>
   18190:	b	181b0 <sprintf@plt+0x6928>
   18194:	cmp	r5, #0
   18198:	beq	181b0 <sprintf@plt+0x6928>
   1819c:	ldr	r0, [r5, #12]
   181a0:	add	r0, r9, r0, lsl #4
   181a4:	ldr	r0, [r0, #12]
   181a8:	cmp	r0, #2
   181ac:	bne	181bc <sprintf@plt+0x6934>
   181b0:	mov	r0, r8
   181b4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   181b8:	b	1896c <sprintf@plt+0x70e4>
   181bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   181c0:	andeq	r2, r1, r0, lsr #1
   181c4:	muleq	r1, r4, r0
   181c8:	andeq	r1, r0, r9, ror r6
   181cc:	andeq	r1, r0, r5, lsl #16
   181d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   181d4:	add	fp, sp, #24
   181d8:	sub	sp, sp, #144	; 0x90
   181dc:	mov	r5, r0
   181e0:	mov	r0, #1
   181e4:	mov	r8, r1
   181e8:	add	r1, sp, #16
   181ec:	str	r0, [sp, #4]
   181f0:	mov	r0, r5
   181f4:	bl	11684 <rb_inet_pton_sock@plt>
   181f8:	cmp	r0, #0
   181fc:	beq	18450 <sprintf@plt+0x6bc8>
   18200:	rev16	r1, r8
   18204:	strh	r1, [sp, #18]
   18208:	ldrh	r0, [sp, #16]
   1820c:	cmp	r0, #10
   18210:	bne	18280 <sprintf@plt+0x69f8>
   18214:	ldr	r2, [pc, #664]	; 184b4 <sprintf@plt+0x6c2c>
   18218:	ldr	r7, [sp, #24]
   1821c:	add	r2, pc, r2
   18220:	ldr	r3, [r2, #252]	; 0xfc
   18224:	add	r6, r2, #188	; 0xbc
   18228:	cmp	r7, r3
   1822c:	bne	182c4 <sprintf@plt+0x6a3c>
   18230:	ldr	r3, [r2, #256]	; 0x100
   18234:	ldr	r7, [sp, #28]
   18238:	cmp	r7, r3
   1823c:	bne	182c4 <sprintf@plt+0x6a3c>
   18240:	ldr	r3, [r2, #260]	; 0x104
   18244:	ldr	r7, [sp, #32]
   18248:	cmp	r7, r3
   1824c:	bne	182c4 <sprintf@plt+0x6a3c>
   18250:	ldr	r3, [r2, #264]	; 0x108
   18254:	ldr	r7, [sp, #36]	; 0x24
   18258:	cmp	r7, r3
   1825c:	bne	182c4 <sprintf@plt+0x6a3c>
   18260:	ldrh	r3, [r2, #246]	; 0xf6
   18264:	uxth	r1, r1
   18268:	cmp	r1, r3
   1826c:	bne	182c4 <sprintf@plt+0x6a3c>
   18270:	ldr	r1, [r2, #372]	; 0x174
   18274:	cmp	r1, #0
   18278:	bne	182bc <sprintf@plt+0x6a34>
   1827c:	b	182c4 <sprintf@plt+0x6a3c>
   18280:	ldr	r6, [pc, #560]	; 184b8 <sprintf@plt+0x6c30>
   18284:	ldr	r3, [sp, #20]
   18288:	add	r6, pc, r6
   1828c:	ldr	r2, [r6, #60]	; 0x3c
   18290:	cmp	r3, r2
   18294:	bne	182c4 <sprintf@plt+0x6a3c>
   18298:	ldr	r6, [pc, #540]	; 184bc <sprintf@plt+0x6c34>
   1829c:	uxth	r1, r1
   182a0:	add	r6, pc, r6
   182a4:	ldrh	r2, [r6, #58]	; 0x3a
   182a8:	cmp	r1, r2
   182ac:	bne	182c4 <sprintf@plt+0x6a3c>
   182b0:	ldr	r1, [r6, #184]	; 0xb8
   182b4:	cmp	r1, #0
   182b8:	beq	182c4 <sprintf@plt+0x6a3c>
   182bc:	sub	sp, fp, #24
   182c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   182c4:	ldr	r3, [pc, #500]	; 184c0 <sprintf@plt+0x6c38>
   182c8:	mov	r1, #1
   182cc:	mov	r2, #0
   182d0:	add	r3, pc, r3
   182d4:	bl	11558 <rb_socket@plt>
   182d8:	cmp	r0, #0
   182dc:	beq	18470 <sprintf@plt+0x6be8>
   182e0:	mov	r7, r0
   182e4:	bl	11534 <rb_get_fd@plt>
   182e8:	mov	r1, #4
   182ec:	add	r3, sp, #4
   182f0:	mov	r2, #2
   182f4:	str	r1, [sp]
   182f8:	mov	r1, #1
   182fc:	bl	11840 <setsockopt@plt>
   18300:	cmp	r0, #0
   18304:	bne	1848c <sprintf@plt+0x6c04>
   18308:	mov	r0, r7
   1830c:	bl	11534 <rb_get_fd@plt>
   18310:	ldrh	r1, [sp, #16]
   18314:	mov	r2, #28
   18318:	cmp	r1, #2
   1831c:	add	r1, sp, #16
   18320:	movweq	r2, #16
   18324:	bl	11714 <bind@plt>
   18328:	cmp	r0, #0
   1832c:	beq	1834c <sprintf@plt+0x6ac4>
   18330:	bl	1187c <__errno_location@plt>
   18334:	ldr	r0, [r0]
   18338:	bl	114b0 <strerror@plt>
   1833c:	ldr	r1, [pc, #392]	; 184cc <sprintf@plt+0x6c44>
   18340:	mov	r2, r0
   18344:	add	r1, pc, r1
   18348:	b	1837c <sprintf@plt+0x6af4>
   1834c:	mov	r0, r7
   18350:	mov	r1, #128	; 0x80
   18354:	mov	r2, #0
   18358:	bl	1181c <rb_listen@plt>
   1835c:	cmp	r0, #0
   18360:	beq	18394 <sprintf@plt+0x6b0c>
   18364:	bl	1187c <__errno_location@plt>
   18368:	ldr	r0, [r0]
   1836c:	bl	114b0 <strerror@plt>
   18370:	ldr	r1, [pc, #344]	; 184d0 <sprintf@plt+0x6c48>
   18374:	mov	r2, r0
   18378:	add	r1, pc, r1
   1837c:	mov	r0, #87	; 0x57
   18380:	bl	124f8 <sprintf@plt+0xc70>
   18384:	mov	r0, r7
   18388:	bl	116d8 <rb_close@plt>
   1838c:	sub	sp, fp, #24
   18390:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18394:	ldr	r0, [r6, #184]	; 0xb8
   18398:	cmp	r0, #0
   1839c:	beq	183a4 <sprintf@plt+0x6b1c>
   183a0:	bl	116d8 <rb_close@plt>
   183a4:	str	r7, [r6, #184]	; 0xb8
   183a8:	add	r7, sp, #8
   183ac:	ldr	r4, [pc, #288]	; 184d4 <sprintf@plt+0x6c4c>
   183b0:	mov	r1, r7
   183b4:	ldr	r4, [pc, r4]
   183b8:	ldr	r0, [r4]
   183bc:	bl	11678 <rb_dictionary_foreach_start@plt>
   183c0:	ldr	r0, [r4]
   183c4:	mov	r1, r7
   183c8:	bl	11588 <rb_dictionary_foreach_cur@plt>
   183cc:	cmp	r0, #0
   183d0:	beq	183fc <sprintf@plt+0x6b74>
   183d4:	add	r7, sp, #8
   183d8:	bl	1800c <sprintf@plt+0x6784>
   183dc:	ldr	r0, [r4]
   183e0:	mov	r1, r7
   183e4:	bl	11630 <rb_dictionary_foreach_next@plt>
   183e8:	ldr	r0, [r4]
   183ec:	mov	r1, r7
   183f0:	bl	11588 <rb_dictionary_foreach_cur@plt>
   183f4:	cmp	r0, #0
   183f8:	bne	183d8 <sprintf@plt+0x6b50>
   183fc:	mov	r0, r6
   18400:	mov	r1, r5
   18404:	mov	r2, #53	; 0x35
   18408:	bl	11618 <rb_strlcpy@plt>
   1840c:	add	r0, r6, #56	; 0x38
   18410:	add	r1, sp, #16
   18414:	mov	r2, #128	; 0x80
   18418:	strh	r8, [r6, #54]	; 0x36
   1841c:	bl	116b4 <memcpy@plt>
   18420:	ldr	r0, [pc, #176]	; 184d8 <sprintf@plt+0x6c50>
   18424:	mov	r1, #1
   18428:	mov	r3, r6
   1842c:	add	r0, pc, r0
   18430:	strb	r1, [r0]
   18434:	ldr	r0, [r6, #184]	; 0xb8
   18438:	mov	r1, #0
   1843c:	ldr	r2, [pc, #152]	; 184dc <sprintf@plt+0x6c54>
   18440:	add	r2, pc, r2
   18444:	bl	117d4 <rb_accept_tcp@plt>
   18448:	sub	sp, fp, #24
   1844c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18450:	ldr	r1, [pc, #136]	; 184e0 <sprintf@plt+0x6c58>
   18454:	mov	r0, #67	; 0x43
   18458:	mov	r2, r5
   1845c:	mov	r3, r8
   18460:	add	r1, pc, r1
   18464:	bl	124f8 <sprintf@plt+0xc70>
   18468:	mov	r0, #3
   1846c:	bl	11870 <exit@plt>
   18470:	bl	1187c <__errno_location@plt>
   18474:	ldr	r0, [r0]
   18478:	bl	114b0 <strerror@plt>
   1847c:	ldr	r1, [pc, #64]	; 184c4 <sprintf@plt+0x6c3c>
   18480:	mov	r2, r0
   18484:	add	r1, pc, r1
   18488:	b	184a4 <sprintf@plt+0x6c1c>
   1848c:	bl	1187c <__errno_location@plt>
   18490:	ldr	r0, [r0]
   18494:	bl	114b0 <strerror@plt>
   18498:	ldr	r1, [pc, #40]	; 184c8 <sprintf@plt+0x6c40>
   1849c:	mov	r2, r0
   184a0:	add	r1, pc, r1
   184a4:	mov	r0, #67	; 0x43
   184a8:	bl	124f8 <sprintf@plt+0xc70>
   184ac:	mov	r0, #3
   184b0:	bl	11870 <exit@plt>
   184b4:	andeq	r6, r1, r4, lsl lr
   184b8:	andeq	r6, r1, r8, lsr #27
   184bc:	muleq	r1, r0, sp
   184c0:	andeq	r1, r0, r0, asr r8
   184c4:			; <UNDEFINED> instruction: 0x000016b0
   184c8:			; <UNDEFINED> instruction: 0x000016b2
   184cc:	andeq	r1, r0, r4, lsr r8
   184d0:	andeq	r1, r0, pc, lsl r8
   184d4:	andeq	r1, r1, r0, lsr #27
   184d8:	andeq	r6, r1, ip, ror sp
   184dc:	muleq	r0, ip, r0
   184e0:	andeq	r1, r0, r0, lsr #13
   184e4:	push	{r4, r5, r6, sl, fp, lr}
   184e8:	add	fp, sp, #16
   184ec:	sub	sp, sp, #144	; 0x90
   184f0:	mov	r4, r0
   184f4:	mov	r0, #128	; 0x80
   184f8:	cmp	r1, #0
   184fc:	str	r0, [sp, #12]
   18500:	bne	185f8 <sprintf@plt+0x6d70>
   18504:	ldr	r0, [fp, #8]
   18508:	cmp	r0, #0
   1850c:	beq	185f8 <sprintf@plt+0x6d70>
   18510:	mov	r0, r4
   18514:	bl	11534 <rb_get_fd@plt>
   18518:	add	r1, sp, #16
   1851c:	add	r2, sp, #12
   18520:	bl	114e0 <getsockname@plt>
   18524:	cmp	r0, #0
   18528:	bne	185f8 <sprintf@plt+0x6d70>
   1852c:	ldr	r6, [pc, #264]	; 1863c <sprintf@plt+0x6db4>
   18530:	add	r5, sp, #4
   18534:	mov	r1, r5
   18538:	ldr	r6, [pc, r6]
   1853c:	ldr	r0, [r6]
   18540:	bl	11678 <rb_dictionary_foreach_start@plt>
   18544:	ldr	r0, [r6]
   18548:	mov	r1, r5
   1854c:	bl	11588 <rb_dictionary_foreach_cur@plt>
   18550:	cmp	r0, #0
   18554:	beq	185f8 <sprintf@plt+0x6d70>
   18558:	mov	r3, r0
   1855c:	add	r5, sp, #4
   18560:	b	18590 <sprintf@plt+0x6d08>
   18564:	cmp	r1, r0
   18568:	beq	18608 <sprintf@plt+0x6d80>
   1856c:	ldr	r0, [r6]
   18570:	mov	r1, r5
   18574:	bl	11630 <rb_dictionary_foreach_next@plt>
   18578:	ldr	r0, [r6]
   1857c:	mov	r1, r5
   18580:	bl	11588 <rb_dictionary_foreach_cur@plt>
   18584:	mov	r3, r0
   18588:	cmp	r0, #0
   1858c:	beq	185f8 <sprintf@plt+0x6d70>
   18590:	ldrh	r0, [r3, #248]	; 0xf8
   18594:	ldrh	r1, [sp, #16]
   18598:	cmp	r0, r1
   1859c:	bne	1856c <sprintf@plt+0x6ce4>
   185a0:	cmp	r0, #10
   185a4:	beq	185bc <sprintf@plt+0x6d34>
   185a8:	cmp	r0, #2
   185ac:	bne	18624 <sprintf@plt+0x6d9c>
   185b0:	ldr	r0, [r3, #252]	; 0xfc
   185b4:	ldr	r1, [sp, #20]
   185b8:	b	18564 <sprintf@plt+0x6cdc>
   185bc:	ldr	r0, [r3, #256]	; 0x100
   185c0:	ldr	r1, [sp, #24]
   185c4:	cmp	r1, r0
   185c8:	bne	1856c <sprintf@plt+0x6ce4>
   185cc:	ldr	r0, [r3, #260]	; 0x104
   185d0:	ldr	r1, [sp, #28]
   185d4:	cmp	r1, r0
   185d8:	bne	1856c <sprintf@plt+0x6ce4>
   185dc:	ldr	r0, [r3, #264]	; 0x108
   185e0:	ldr	r1, [sp, #32]
   185e4:	cmp	r1, r0
   185e8:	bne	1856c <sprintf@plt+0x6ce4>
   185ec:	ldr	r0, [r3, #268]	; 0x10c
   185f0:	ldr	r1, [sp, #36]	; 0x24
   185f4:	b	18564 <sprintf@plt+0x6cdc>
   185f8:	mov	r0, r4
   185fc:	bl	116d8 <rb_close@plt>
   18600:	sub	sp, fp, #16
   18604:	pop	{r4, r5, r6, sl, fp, pc}
   18608:	ldr	r2, [pc, #48]	; 18640 <sprintf@plt+0x6db8>
   1860c:	mov	r0, r4
   18610:	mov	r1, #1
   18614:	add	r2, pc, r2
   18618:	bl	11528 <rb_setselect@plt>
   1861c:	sub	sp, fp, #16
   18620:	pop	{r4, r5, r6, sl, fp, pc}
   18624:	ldr	r1, [pc, #24]	; 18644 <sprintf@plt+0x6dbc>
   18628:	mov	r0, #67	; 0x43
   1862c:	add	r1, pc, r1
   18630:	bl	124f8 <sprintf@plt+0xc70>
   18634:	mov	r0, #3
   18638:	bl	11870 <exit@plt>
   1863c:	andeq	r1, r1, ip, lsl ip
   18640:	andeq	r0, r0, ip, lsr #32
   18644:	andeq	r1, r0, ip, lsl #11
   18648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1864c:	add	fp, sp, #28
   18650:	sub	sp, sp, #132	; 0x84
   18654:	mov	r4, r0
   18658:	ldr	r0, [r1, #464]	; 0x1d0
   1865c:	ldr	r9, [pc, #280]	; 1877c <sprintf@plt+0x6ef4>
   18660:	mov	sl, r1
   18664:	mov	r2, #128	; 0x80
   18668:	ldr	r9, [pc, r9]
   1866c:	ldr	r1, [r9, #12]
   18670:	add	r0, r0, r1, lsl #4
   18674:	add	r1, sp, #4
   18678:	ldr	r8, [r0, #8]
   1867c:	mov	r0, r4
   18680:	bl	11654 <rb_read@plt>
   18684:	cmn	r0, #1
   18688:	ble	186dc <sprintf@plt+0x6e54>
   1868c:	cmp	r0, #0
   18690:	beq	1876c <sprintf@plt+0x6ee4>
   18694:	ldr	r5, [pc, #232]	; 18784 <sprintf@plt+0x6efc>
   18698:	ldr	r5, [pc, r5]
   1869c:	cmp	r5, #0
   186a0:	beq	1876c <sprintf@plt+0x6ee4>
   186a4:	add	r7, sp, #4
   186a8:	ldr	r6, [r5]
   186ac:	mov	r0, r6
   186b0:	bl	11690 <strlen@plt>
   186b4:	mov	r2, r0
   186b8:	mov	r0, r6
   186bc:	mov	r1, r7
   186c0:	bl	11828 <strncmp@plt>
   186c4:	cmp	r0, #0
   186c8:	beq	18710 <sprintf@plt+0x6e88>
   186cc:	ldr	r5, [r5, #8]
   186d0:	cmp	r5, #0
   186d4:	bne	186a8 <sprintf@plt+0x6e20>
   186d8:	b	1876c <sprintf@plt+0x6ee4>
   186dc:	bl	1187c <__errno_location@plt>
   186e0:	ldr	r0, [r0]
   186e4:	bl	114ec <rb_ignore_errno@plt>
   186e8:	cmp	r0, #0
   186ec:	beq	1876c <sprintf@plt+0x6ee4>
   186f0:	ldr	r2, [pc, #136]	; 18780 <sprintf@plt+0x6ef8>
   186f4:	mov	r0, r4
   186f8:	mov	r1, #1
   186fc:	mov	r3, sl
   18700:	add	r2, pc, r2
   18704:	bl	11528 <rb_setselect@plt>
   18708:	sub	sp, fp, #28
   1870c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18710:	ldr	r5, [r8]
   18714:	cmp	r5, #0
   18718:	beq	1874c <sprintf@plt+0x6ec4>
   1871c:	ldr	r7, [r5]
   18720:	ldr	r5, [r5, #8]
   18724:	ldr	r0, [r7, #4]
   18728:	bl	116d8 <rb_close@plt>
   1872c:	cmp	r7, #0
   18730:	beq	1873c <sprintf@plt+0x6eb4>
   18734:	mov	r0, r7
   18738:	bl	1163c <free@plt>
   1873c:	cmp	r5, #0
   18740:	bne	1871c <sprintf@plt+0x6e94>
   18744:	cmp	r8, #0
   18748:	beq	18754 <sprintf@plt+0x6ecc>
   1874c:	mov	r0, r8
   18750:	bl	1163c <free@plt>
   18754:	ldr	r1, [r9, #12]
   18758:	ldr	r3, [pc, #40]	; 18788 <sprintf@plt+0x6f00>
   1875c:	add	r2, sp, #4
   18760:	mov	r0, sl
   18764:	add	r3, pc, r3
   18768:	bl	12bb0 <sprintf@plt+0x1328>
   1876c:	mov	r0, r4
   18770:	bl	116d8 <rb_close@plt>
   18774:	sub	sp, fp, #28
   18778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1877c:	andeq	r1, r1, r8, lsl fp
   18780:			; <UNDEFINED> instruction: 0xffffff40
   18784:	andeq	r6, r1, r4, lsl fp
   18788:	andeq	r1, r0, r1, lsl #9
   1878c:	push	{r4, r5, fp, lr}
   18790:	add	fp, sp, #8
   18794:	sub	sp, sp, #16
   18798:	mov	r4, r0
   1879c:	mov	r0, #260	; 0x104
   187a0:	mov	r2, #9
   187a4:	strh	r0, [sp, #6]
   187a8:	ldr	r0, [r4, #12]
   187ac:	ldrh	r1, [r0, #58]	; 0x3a
   187b0:	strh	r1, [sp, #8]
   187b4:	mov	r1, #0
   187b8:	ldr	r0, [r0, #60]	; 0x3c
   187bc:	strb	r1, [sp, #14]
   187c0:	add	r1, sp, #6
   187c4:	str	r0, [sp, #10]
   187c8:	ldr	r0, [r4, #4]
   187cc:	bl	115f4 <rb_write@plt>
   187d0:	cmp	r0, #0
   187d4:	bmi	187f8 <sprintf@plt+0x6f70>
   187d8:	ldr	r5, [r4, #4]
   187dc:	ldr	r4, [r4, #8]
   187e0:	mov	r0, r4
   187e4:	bl	11690 <strlen@plt>
   187e8:	add	r2, r0, #1
   187ec:	mov	r0, r5
   187f0:	mov	r1, r4
   187f4:	bl	115f4 <rb_write@plt>
   187f8:	sub	sp, fp, #8
   187fc:	pop	{r4, r5, fp, pc}
   18800:	push	{r4, r5, fp, lr}
   18804:	add	fp, sp, #8
   18808:	sub	sp, sp, #32
   1880c:	mov	r1, #1
   18810:	mov	r4, r0
   18814:	ldr	r0, [r0]
   18818:	strh	r1, [sp, #4]
   1881c:	movw	r1, #261	; 0x105
   18820:	movt	r1, #1280	; 0x500
   18824:	str	r1, [sp]
   18828:	ldrh	r0, [r0, #248]	; 0xf8
   1882c:	cmp	r0, #10
   18830:	beq	1885c <sprintf@plt+0x6fd4>
   18834:	cmp	r0, #2
   18838:	bne	188c4 <sprintf@plt+0x703c>
   1883c:	mov	r0, #1
   18840:	mvn	r2, #12
   18844:	mov	r3, #11
   18848:	strb	r0, [sp, #6]
   1884c:	ldr	r0, [r4, #12]
   18850:	ldr	r1, [r0, #60]	; 0x3c
   18854:	str	r1, [sp, #7]
   18858:	b	18884 <sprintf@plt+0x6ffc>
   1885c:	mov	r0, #4
   18860:	mvn	r2, #24
   18864:	mov	r3, #23
   18868:	strb	r0, [sp, #6]
   1886c:	ldr	r0, [r4, #12]
   18870:	add	r1, r0, #64	; 0x40
   18874:	vld1.8	{d16-d17}, [r1]
   18878:	mov	r1, sp
   1887c:	orr	r1, r1, #7
   18880:	vst1.8	{d16-d17}, [r1]
   18884:	ldrh	r0, [r0, #58]	; 0x3a
   18888:	mov	r1, sp
   1888c:	add	r3, r1, r3
   18890:	strh	r0, [r3]
   18894:	ldr	r0, [r4, #4]
   18898:	bl	115f4 <rb_write@plt>
   1889c:	cmp	r0, #1
   188a0:	blt	188c4 <sprintf@plt+0x703c>
   188a4:	ldr	r5, [r4, #4]
   188a8:	ldr	r4, [r4, #8]
   188ac:	mov	r0, r4
   188b0:	bl	11690 <strlen@plt>
   188b4:	add	r2, r0, #1
   188b8:	mov	r0, r5
   188bc:	mov	r1, r4
   188c0:	bl	115f4 <rb_write@plt>
   188c4:	sub	sp, fp, #8
   188c8:	pop	{r4, r5, fp, pc}
   188cc:	push	{r4, r5, r6, sl, fp, lr}
   188d0:	add	fp, sp, #16
   188d4:	sub	sp, sp, #136	; 0x88
   188d8:	ldr	r3, [r0, #12]
   188dc:	mov	r4, r0
   188e0:	add	r5, sp, #8
   188e4:	mov	r1, #128	; 0x80
   188e8:	ldrh	r0, [r3, #54]	; 0x36
   188ec:	str	r0, [sp]
   188f0:	mov	r0, r5
   188f4:	ldr	r2, [pc, #104]	; 18964 <sprintf@plt+0x70dc>
   188f8:	add	r2, pc, r2
   188fc:	bl	11810 <snprintf@plt>
   18900:	ldr	r6, [r4, #4]
   18904:	mov	r0, r5
   18908:	bl	11690 <strlen@plt>
   1890c:	mov	r2, r0
   18910:	mov	r0, r6
   18914:	mov	r1, r5
   18918:	bl	115f4 <rb_write@plt>
   1891c:	cmp	r0, #1
   18920:	blt	1895c <sprintf@plt+0x70d4>
   18924:	ldmib	r4, {r5, r6}
   18928:	mov	r0, r6
   1892c:	bl	11690 <strlen@plt>
   18930:	add	r2, r0, #1
   18934:	mov	r0, r5
   18938:	mov	r1, r6
   1893c:	bl	115f4 <rb_write@plt>
   18940:	cmp	r0, #1
   18944:	blt	1895c <sprintf@plt+0x70d4>
   18948:	ldr	r0, [r4, #4]
   1894c:	ldr	r1, [pc, #20]	; 18968 <sprintf@plt+0x70e0>
   18950:	mov	r2, #2
   18954:	add	r1, pc, r1
   18958:	bl	115f4 <rb_write@plt>
   1895c:	sub	sp, fp, #16
   18960:	pop	{r4, r5, r6, sl, fp, pc}
   18964:	strdeq	r1, [r0], -sp
   18968:			; <UNDEFINED> instruction: 0x000013ba
   1896c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18970:	add	fp, sp, #28
   18974:	sub	sp, sp, #284	; 0x11c
   18978:	mov	sl, r0
   1897c:	ldr	r0, [r0, #464]	; 0x1d0
   18980:	ldr	r1, [pc, #684]	; 18c34 <sprintf@plt+0x73ac>
   18984:	ldr	r1, [pc, r1]
   18988:	ldr	r4, [r1, #12]
   1898c:	add	r0, r0, r4, lsl #4
   18990:	ldr	r5, [r0, #8]
   18994:	ldr	r6, [pc, #668]	; 18c38 <sprintf@plt+0x73b0>
   18998:	ldr	r6, [pc, r6]
   1899c:	bl	1169c <rb_current_time@plt>
   189a0:	add	r1, r0, r6
   189a4:	ldr	r0, [sl, #464]	; 0x1d0
   189a8:	add	r2, r0, r4, lsl #4
   189ac:	str	r1, [r2, #4]
   189b0:	mov	r1, #1
   189b4:	strb	r1, [r5, #12]
   189b8:	ldr	r7, [pc, #636]	; 18c3c <sprintf@plt+0x73b4>
   189bc:	ldr	r7, [pc, r7]
   189c0:	cmp	r7, #0
   189c4:	beq	18bfc <sprintf@plt+0x7374>
   189c8:	ldr	r1, [pc, #624]	; 18c40 <sprintf@plt+0x73b8>
   189cc:	ldr	r1, [pc, r1]
   189d0:	ldr	r9, [r7]
   189d4:	ldr	r1, [r1, #12]
   189d8:	add	r0, r0, r1, lsl #4
   189dc:	mov	r1, #28
   189e0:	ldr	r4, [r0, #8]
   189e4:	mov	r0, #1
   189e8:	bl	115a0 <calloc@plt>
   189ec:	cmp	r0, #0
   189f0:	beq	18bf8 <sprintf@plt+0x7370>
   189f4:	mov	r8, r0
   189f8:	add	r0, sl, #248	; 0xf8
   189fc:	str	r0, [sp, #16]
   18a00:	ldr	r0, [pc, #572]	; 18c44 <sprintf@plt+0x73bc>
   18a04:	add	r0, pc, r0
   18a08:	add	r0, r0, #188	; 0xbc
   18a0c:	str	r0, [sp, #12]
   18a10:	mov	r0, #1
   18a14:	str	r0, [sp, #20]
   18a18:	ldr	r0, [sp, #16]
   18a1c:	ldrh	r6, [r0]
   18a20:	ldr	r5, [pc, #544]	; 18c48 <sprintf@plt+0x73c0>
   18a24:	cmp	r6, #10
   18a28:	add	r5, pc, r5
   18a2c:	bne	18a40 <sprintf@plt+0x71b8>
   18a30:	ldr	r0, [r9, #16]
   18a34:	ldr	r5, [sp, #12]
   18a38:	cmp	r0, #1
   18a3c:	beq	18b00 <sprintf@plt+0x7278>
   18a40:	ldr	r0, [r5, #184]	; 0xb8
   18a44:	cmp	r0, #0
   18a48:	beq	18b00 <sprintf@plt+0x7278>
   18a4c:	ldr	r1, [sp, #16]
   18a50:	add	r0, sp, #152	; 0x98
   18a54:	mov	r2, #128	; 0x80
   18a58:	bl	116b4 <memcpy@plt>
   18a5c:	add	r1, r5, #56	; 0x38
   18a60:	add	r0, sp, #24
   18a64:	mov	r2, #128	; 0x80
   18a68:	bl	116b4 <memcpy@plt>
   18a6c:	mov	r0, r6
   18a70:	mov	r1, #1
   18a74:	mov	r2, #0
   18a78:	mov	r3, r9
   18a7c:	str	r9, [r8, #8]
   18a80:	str	r5, [r8, #12]
   18a84:	mov	r5, sl
   18a88:	str	sl, [r8]
   18a8c:	bl	11558 <rb_socket@plt>
   18a90:	cmp	r0, #0
   18a94:	str	r0, [r8, #4]
   18a98:	beq	18b0c <sprintf@plt+0x7284>
   18a9c:	mov	sl, r0
   18aa0:	bl	11534 <rb_get_fd@plt>
   18aa4:	mov	r1, #4
   18aa8:	mov	r2, #1
   18aac:	add	r3, sp, #20
   18ab0:	str	r1, [sp]
   18ab4:	mov	r1, #6
   18ab8:	bl	11840 <setsockopt@plt>
   18abc:	mov	r1, #0
   18ac0:	cmp	r4, #0
   18ac4:	strh	r1, [sp, #26]
   18ac8:	ldrh	r0, [r9, #20]
   18acc:	rev16	r0, r0
   18ad0:	strh	r0, [sp, #154]	; 0x9a
   18ad4:	beq	18c14 <sprintf@plt+0x738c>
   18ad8:	str	r1, [r8, #20]
   18adc:	str	r8, [r8, #16]
   18ae0:	add	r0, r8, #16
   18ae4:	ldr	r1, [r4]
   18ae8:	cmp	r1, #0
   18aec:	str	r1, [r8, #24]
   18af0:	beq	18b3c <sprintf@plt+0x72b4>
   18af4:	add	r1, r1, #4
   18af8:	str	r0, [r1]
   18afc:	b	18b4c <sprintf@plt+0x72c4>
   18b00:	mov	r0, r8
   18b04:	bl	1163c <free@plt>
   18b08:	b	18bb8 <sprintf@plt+0x7330>
   18b0c:	bl	1187c <__errno_location@plt>
   18b10:	ldr	r0, [r0]
   18b14:	bl	114b0 <strerror@plt>
   18b18:	ldr	r1, [pc, #300]	; 18c4c <sprintf@plt+0x73c4>
   18b1c:	mov	r3, r0
   18b20:	mov	r0, #87	; 0x57
   18b24:	mov	r2, r9
   18b28:	add	r1, pc, r1
   18b2c:	bl	124f8 <sprintf@plt+0xc70>
   18b30:	mov	r0, r8
   18b34:	bl	1163c <free@plt>
   18b38:	b	18bb4 <sprintf@plt+0x732c>
   18b3c:	mov	r1, r4
   18b40:	ldr	r2, [r1, #4]!
   18b44:	cmp	r2, #0
   18b48:	streq	r0, [r1]
   18b4c:	str	r0, [r4]
   18b50:	ldr	r0, [r4, #8]
   18b54:	add	r0, r0, #1
   18b58:	str	r0, [r4, #8]
   18b5c:	ldrb	r1, [r9, #22]
   18b60:	ldr	r0, [pc, #232]	; 18c50 <sprintf@plt+0x73c8>
   18b64:	ldr	r0, [pc, r0]
   18b68:	cmp	r1, #0
   18b6c:	beq	18b94 <sprintf@plt+0x730c>
   18b70:	str	r0, [sp, #4]
   18b74:	str	r8, [sp]
   18b78:	mov	r0, sl
   18b7c:	add	r1, sp, #152	; 0x98
   18b80:	add	r2, sp, #24
   18b84:	ldr	r3, [pc, #204]	; 18c58 <sprintf@plt+0x73d0>
   18b88:	add	r3, pc, r3
   18b8c:	bl	114f8 <rb_connect_tcp_ssl@plt>
   18b90:	b	18bb4 <sprintf@plt+0x732c>
   18b94:	str	r0, [sp, #4]
   18b98:	str	r8, [sp]
   18b9c:	mov	r0, sl
   18ba0:	add	r1, sp, #152	; 0x98
   18ba4:	add	r2, sp, #24
   18ba8:	ldr	r3, [pc, #164]	; 18c54 <sprintf@plt+0x73cc>
   18bac:	add	r3, pc, r3
   18bb0:	bl	11504 <rb_connect_tcp@plt>
   18bb4:	mov	sl, r5
   18bb8:	ldr	r7, [r7, #8]
   18bbc:	cmp	r7, #0
   18bc0:	beq	18bfc <sprintf@plt+0x7374>
   18bc4:	ldr	r0, [sl, #464]	; 0x1d0
   18bc8:	ldr	r1, [pc, #140]	; 18c5c <sprintf@plt+0x73d4>
   18bcc:	ldr	r1, [pc, r1]
   18bd0:	ldr	r9, [r7]
   18bd4:	ldr	r1, [r1, #12]
   18bd8:	add	r0, r0, r1, lsl #4
   18bdc:	mov	r1, #28
   18be0:	ldr	r4, [r0, #8]
   18be4:	mov	r0, #1
   18be8:	bl	115a0 <calloc@plt>
   18bec:	mov	r8, r0
   18bf0:	cmp	r0, #0
   18bf4:	bne	18a10 <sprintf@plt+0x7188>
   18bf8:	bl	11750 <rb_outofmemory@plt>
   18bfc:	ldr	r0, [sl]
   18c00:	ldr	r1, [pc, #88]	; 18c60 <sprintf@plt+0x73d8>
   18c04:	add	r1, pc, r1
   18c08:	bl	12484 <sprintf@plt+0xbfc>
   18c0c:	sub	sp, fp, #28
   18c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c14:	ldr	r0, [pc, #72]	; 18c64 <sprintf@plt+0x73dc>
   18c18:	ldr	r1, [pc, #72]	; 18c68 <sprintf@plt+0x73e0>
   18c1c:	ldr	r3, [pc, #72]	; 18c6c <sprintf@plt+0x73e4>
   18c20:	mov	r2, #145	; 0x91
   18c24:	add	r0, pc, r0
   18c28:	add	r1, pc, r1
   18c2c:	add	r3, pc, r3
   18c30:	bl	11600 <__assert_fail@plt>
   18c34:	strdeq	r1, [r1], -ip
   18c38:	andeq	r2, r1, r8, ror #11
   18c3c:	strdeq	r6, [r1], -r0
   18c40:			; <UNDEFINED> instruction: 0x000117b4
   18c44:	andeq	r6, r1, ip, lsr #12
   18c48:	andeq	r6, r1, r8, lsl #12
   18c4c:	andeq	r1, r0, ip, lsr #5
   18c50:	andeq	r2, r1, ip, lsl r4
   18c54:	strheq	r0, [r0], -ip
   18c58:	andeq	r0, r0, r0, ror #1
   18c5c:			; <UNDEFINED> instruction: 0x000115b4
   18c60:	andeq	r1, r0, pc, lsr #3
   18c64:	andeq	r1, r0, sp, ror #1
   18c68:	andeq	r0, r0, r2, ror #13
   18c6c:	andeq	r0, r0, sp, lsr r7
   18c70:	push	{r4, r5, fp, lr}
   18c74:	add	fp, sp, #8
   18c78:	ldr	r0, [pc, #276]	; 18d94 <sprintf@plt+0x750c>
   18c7c:	mov	r4, r2
   18c80:	cmp	r1, #0
   18c84:	ldr	r0, [pc, r0]
   18c88:	ldr	r2, [r2]
   18c8c:	ldr	r0, [r0, #12]
   18c90:	ldr	r3, [r2, #464]	; 0x1d0
   18c94:	add	r0, r3, r0, lsl #4
   18c98:	ldr	r5, [r0, #8]
   18c9c:	bne	18d10 <sprintf@plt+0x7488>
   18ca0:	ldr	r0, [pc, #240]	; 18d98 <sprintf@plt+0x7510>
   18ca4:	add	r0, pc, r0
   18ca8:	ldrb	r0, [r0]
   18cac:	cmp	r0, #0
   18cb0:	beq	18d10 <sprintf@plt+0x7488>
   18cb4:	ldrh	r1, [r2, #248]	; 0xf8
   18cb8:	ldr	r0, [r4, #8]
   18cbc:	cmp	r1, #10
   18cc0:	beq	18ce4 <sprintf@plt+0x745c>
   18cc4:	cmp	r1, #2
   18cc8:	bne	18d10 <sprintf@plt+0x7488>
   18ccc:	ldr	r1, [pc, #200]	; 18d9c <sprintf@plt+0x7514>
   18cd0:	add	r1, pc, r1
   18cd4:	ldr	r1, [r1, #184]	; 0xb8
   18cd8:	cmp	r1, #0
   18cdc:	bne	18d04 <sprintf@plt+0x747c>
   18ce0:	b	18d10 <sprintf@plt+0x7488>
   18ce4:	ldrb	r1, [r0, #23]
   18ce8:	cmp	r1, #0
   18cec:	beq	18d10 <sprintf@plt+0x7488>
   18cf0:	ldr	r1, [pc, #168]	; 18da0 <sprintf@plt+0x7518>
   18cf4:	add	r1, pc, r1
   18cf8:	ldr	r1, [r1, #372]	; 0x174
   18cfc:	cmp	r1, #0
   18d00:	beq	18d10 <sprintf@plt+0x7488>
   18d04:	ldr	r1, [r0, #24]
   18d08:	mov	r0, r4
   18d0c:	blx	r1
   18d10:	ldr	r0, [r4, #4]
   18d14:	bl	116d8 <rb_close@plt>
   18d18:	cmp	r5, #0
   18d1c:	beq	18d74 <sprintf@plt+0x74ec>
   18d20:	ldr	r0, [r4, #24]
   18d24:	ldr	r1, [r4, #20]
   18d28:	cmp	r0, #0
   18d2c:	beq	18d3c <sprintf@plt+0x74b4>
   18d30:	str	r1, [r0, #4]
   18d34:	ldr	r1, [r4, #20]
   18d38:	b	18d40 <sprintf@plt+0x74b8>
   18d3c:	str	r1, [r5, #4]
   18d40:	cmp	r1, #0
   18d44:	mov	r2, r5
   18d48:	addne	r2, r1, #8
   18d4c:	str	r0, [r2]
   18d50:	mov	r0, #0
   18d54:	str	r0, [r4, #20]
   18d58:	str	r0, [r4, #24]
   18d5c:	ldr	r0, [r5, #8]
   18d60:	sub	r0, r0, #1
   18d64:	str	r0, [r5, #8]
   18d68:	mov	r0, r4
   18d6c:	pop	{r4, r5, fp, lr}
   18d70:	b	1163c <free@plt>
   18d74:	ldr	r0, [pc, #40]	; 18da4 <sprintf@plt+0x751c>
   18d78:	ldr	r1, [pc, #40]	; 18da8 <sprintf@plt+0x7520>
   18d7c:	ldr	r3, [pc, #40]	; 18dac <sprintf@plt+0x7524>
   18d80:	mov	r2, #236	; 0xec
   18d84:	add	r0, pc, r0
   18d88:	add	r1, pc, r1
   18d8c:	add	r3, pc, r3
   18d90:	bl	11600 <__assert_fail@plt>
   18d94:	strdeq	r1, [r1], -ip
   18d98:	andeq	r6, r1, r4, lsl #10
   18d9c:	andeq	r6, r1, r0, ror #6
   18da0:	andeq	r6, r1, ip, lsr r3
   18da4:	andeq	r0, r0, sp, lsl #31
   18da8:	andeq	r0, r0, r2, lsl #11
   18dac:	muleq	r0, sl, r5
   18db0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18db4:	mov	r7, r0
   18db8:	ldr	r6, [pc, #72]	; 18e08 <sprintf@plt+0x7580>
   18dbc:	ldr	r5, [pc, #72]	; 18e0c <sprintf@plt+0x7584>
   18dc0:	add	r6, pc, r6
   18dc4:	add	r5, pc, r5
   18dc8:	sub	r6, r6, r5
   18dcc:	mov	r8, r1
   18dd0:	mov	r9, r2
   18dd4:	bl	11484 <sigemptyset@plt-0x20>
   18dd8:	asrs	r6, r6, #2
   18ddc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18de0:	mov	r4, #0
   18de4:	add	r4, r4, #1
   18de8:	ldr	r3, [r5], #4
   18dec:	mov	r2, r9
   18df0:	mov	r1, r8
   18df4:	mov	r0, r7
   18df8:	blx	r3
   18dfc:	cmp	r6, r4
   18e00:	bne	18de4 <sprintf@plt+0x755c>
   18e04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e08:	andeq	r1, r1, ip, lsl #2
   18e0c:	andeq	r1, r1, r4, lsl #2
   18e10:	bx	lr

Disassembly of section .fini:

00018e14 <.fini>:
   18e14:	push	{r3, lr}
   18e18:	pop	{r3, pc}
