
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

000106a8 <.init>:
   106a8:	push	{r3, lr}
   106ac:	bl	10770 <_start@@Base+0x3c>
   106b0:	pop	{r3, pc}

Disassembly of section .plt:

000106b4 <printf@plt-0x14>:
   106b4:	push	{lr}		; (str lr, [sp, #-4]!)
   106b8:	ldr	lr, [pc, #4]	; 106c4 <printf@plt-0x4>
   106bc:	add	lr, pc, lr
   106c0:	ldr	pc, [lr, #8]!
   106c4:	andeq	r0, r1, ip, lsr r9

000106c8 <printf@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2364]!	; 0x93c

000106d4 <fopen@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2356]!	; 0x934

000106e0 <puts@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2348]!	; 0x92c

000106ec <__libc_start_main@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2340]!	; 0x924

000106f8 <__ctype_tolower_loc@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2332]!	; 0x91c

00010704 <__gmon_start__@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2324]!	; 0x914

00010710 <fclose@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2316]!	; 0x90c

0001071c <abort@plt>:
   1071c:	add	ip, pc, #0, 12
   10720:	add	ip, ip, #16, 20	; 0x10000
   10724:	ldr	pc, [ip, #2308]!	; 0x904

00010728 <getc@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #16, 20	; 0x10000
   10730:	ldr	pc, [ip, #2300]!	; 0x8fc

Disassembly of section .text:

00010734 <_start@@Base>:
   10734:	mov	fp, #0
   10738:	mov	lr, #0
   1073c:	pop	{r1}		; (ldr r1, [sp], #4)
   10740:	mov	r2, sp
   10744:	push	{r2}		; (str r2, [sp, #-4]!)
   10748:	push	{r0}		; (str r0, [sp, #-4]!)
   1074c:	ldr	ip, [pc, #16]	; 10764 <_start@@Base+0x30>
   10750:	push	{ip}		; (str ip, [sp, #-4]!)
   10754:	ldr	r0, [pc, #12]	; 10768 <_start@@Base+0x34>
   10758:	ldr	r3, [pc, #12]	; 1076c <_start@@Base+0x38>
   1075c:	bl	106ec <__libc_start_main@plt>
   10760:	bl	1071c <abort@plt>
   10764:	andeq	r0, r1, r8, asr #23
   10768:	andeq	r0, r1, r4, ror #16
   1076c:	andeq	r0, r1, r8, ror #22
   10770:	ldr	r3, [pc, #20]	; 1078c <_start@@Base+0x58>
   10774:	ldr	r2, [pc, #20]	; 10790 <_start@@Base+0x5c>
   10778:	add	r3, pc, r3
   1077c:	ldr	r2, [r3, r2]
   10780:	cmp	r2, #0
   10784:	bxeq	lr
   10788:	b	10704 <__gmon_start__@plt>
   1078c:	andeq	r0, r1, r0, lsl #17
   10790:	andeq	r0, r0, r0, lsr r0
   10794:	ldr	r0, [pc, #24]	; 107b4 <_start@@Base+0x80>
   10798:	ldr	r3, [pc, #24]	; 107b8 <_start@@Base+0x84>
   1079c:	cmp	r3, r0
   107a0:	bxeq	lr
   107a4:	ldr	r3, [pc, #16]	; 107bc <_start@@Base+0x88>
   107a8:	cmp	r3, #0
   107ac:	bxeq	lr
   107b0:	bx	r3
   107b4:	andeq	r1, r2, ip, lsr r0
   107b8:	andeq	r1, r2, ip, lsr r0
   107bc:	andeq	r0, r0, r0
   107c0:	ldr	r0, [pc, #36]	; 107ec <_start@@Base+0xb8>
   107c4:	ldr	r1, [pc, #36]	; 107f0 <_start@@Base+0xbc>
   107c8:	sub	r1, r1, r0
   107cc:	asr	r1, r1, #2
   107d0:	add	r1, r1, r1, lsr #31
   107d4:	asrs	r1, r1, #1
   107d8:	bxeq	lr
   107dc:	ldr	r3, [pc, #16]	; 107f4 <_start@@Base+0xc0>
   107e0:	cmp	r3, #0
   107e4:	bxeq	lr
   107e8:	bx	r3
   107ec:	andeq	r1, r2, ip, lsr r0
   107f0:	andeq	r1, r2, ip, lsr r0
   107f4:	andeq	r0, r0, r0
   107f8:	push	{r4, lr}
   107fc:	ldr	r4, [pc, #24]	; 1081c <_start@@Base+0xe8>
   10800:	ldrb	r3, [r4]
   10804:	cmp	r3, #0
   10808:	popne	{r4, pc}
   1080c:	bl	10794 <_start@@Base+0x60>
   10810:	mov	r3, #1
   10814:	strb	r3, [r4]
   10818:	pop	{r4, pc}
   1081c:	andeq	r1, r2, ip, lsr r0
   10820:	b	107c0 <_start@@Base+0x8c>

00010824 <in_array@@Base>:
   10824:	mov	ip, r0
   10828:	mov	r0, #0
   1082c:	cmp	r2, #0
   10830:	bmi	10860 <in_array@@Base+0x3c>
   10834:	add	r2, r2, #1
   10838:	ldr	r3, [r1]
   1083c:	cmp	r3, ip
   10840:	beq	1085c <in_array@@Base+0x38>
   10844:	subs	r2, r2, #1
   10848:	add	r1, r1, #4
   1084c:	bxeq	lr
   10850:	ldr	r3, [r1]
   10854:	cmp	r3, ip
   10858:	bne	10844 <in_array@@Base+0x20>
   1085c:	mov	r0, #1
   10860:	bx	lr

00010864 <main@@Base>:
   10864:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10868:	add	fp, sp, #24
   1086c:	vpush	{d8-d9}
   10870:	sub	sp, sp, #104	; 0x68
   10874:	movw	r0, #3032	; 0xbd8
   10878:	movw	r1, #3055	; 0xbef
   1087c:	movt	r0, #1
   10880:	movt	r1, #1
   10884:	bl	106d4 <fopen@plt>
   10888:	vmov.i32	q8, #0	; 0x00000000
   1088c:	mov	r6, sp
   10890:	mov	r8, r0
   10894:	mov	r7, #0
   10898:	add	r0, r6, #80	; 0x50
   1089c:	mov	r1, r6
   108a0:	str	r7, [sp, #96]	; 0x60
   108a4:	vst1.64	{d16-d17}, [r0]
   108a8:	add	r0, r6, #64	; 0x40
   108ac:	vst1.64	{d16-d17}, [r0]
   108b0:	add	r0, r6, #48	; 0x30
   108b4:	vst1.64	{d16-d17}, [r0]
   108b8:	add	r0, r6, #32
   108bc:	vst1.64	{d16-d17}, [r0]
   108c0:	add	r0, r6, #16
   108c4:	vst1.64	{d16-d17}, [r0]
   108c8:	mov	r0, #100	; 0x64
   108cc:	vst1.64	{d16-d17}, [r1], r0
   108d0:	mov	r0, r8
   108d4:	str	r7, [r1]
   108d8:	bl	10728 <getc@plt>
   108dc:	cmn	r0, #1
   108e0:	mov	r5, #0
   108e4:	beq	10ae8 <main@@Base+0x284>
   108e8:	mov	r5, #0
   108ec:	sub	r1, r0, #192	; 0xc0
   108f0:	cmp	r1, #58	; 0x3a
   108f4:	bls	10918 <main@@Base+0xb4>
   108f8:	b	10ad0 <main@@Base+0x26c>
   108fc:	mov	r0, r8
   10900:	bl	10728 <getc@plt>
   10904:	cmn	r0, #1
   10908:	beq	10ae8 <main@@Base+0x284>
   1090c:	sub	r1, r0, #192	; 0xc0
   10910:	cmp	r1, #58	; 0x3a
   10914:	bhi	10ad0 <main@@Base+0x26c>
   10918:	add	r2, pc, #4
   1091c:	mov	r4, #97	; 0x61
   10920:	ldr	pc, [r2, r1, lsl #2]
   10924:	andeq	r0, r1, r0, lsl sl
   10928:	andeq	r0, r1, r0, lsl sl
   1092c:	andeq	r0, r1, r0, lsl sl
   10930:	andeq	r0, r1, r0, lsl sl
   10934:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10938:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1093c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10940:	andeq	r0, r1, r8, lsl #21
   10944:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10948:	andeq	r0, r1, r0, ror sl
   1094c:	andeq	r0, r1, r0, ror sl
   10950:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10954:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10958:	andeq	r0, r1, r0, lsr #21
   1095c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10960:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10964:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10968:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1096c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10970:	andeq	r0, r1, ip, lsr sl
   10974:	andeq	r0, r1, ip, lsr sl
   10978:	andeq	r0, r1, ip, lsr sl
   1097c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10980:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10984:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10988:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1098c:			; <UNDEFINED> instruction: 0x00010ab8
   10990:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10994:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10998:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1099c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109a0:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109a4:	andeq	r0, r1, r0, lsl sl
   109a8:	andeq	r0, r1, r0, lsl sl
   109ac:	andeq	r0, r1, r0, lsl sl
   109b0:	andeq	r0, r1, r0, lsl sl
   109b4:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109b8:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109bc:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109c0:	andeq	r0, r1, r8, lsl #21
   109c4:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109c8:	andeq	r0, r1, r0, ror sl
   109cc:	andeq	r0, r1, r0, ror sl
   109d0:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109d4:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109d8:	andeq	r0, r1, r0, lsr #21
   109dc:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109e0:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109e4:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109e8:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109ec:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109f0:	andeq	r0, r1, ip, lsr sl
   109f4:	andeq	r0, r1, ip, lsr sl
   109f8:	andeq	r0, r1, ip, lsr sl
   109fc:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10a00:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10a04:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10a08:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10a0c:			; <UNDEFINED> instruction: 0x00010ab8
   10a10:	add	r0, r4, #128	; 0x80
   10a14:	lsr	r0, r0, #7
   10a18:	cmp	r0, #2
   10a1c:	bhi	10a50 <main@@Base+0x1ec>
   10a20:	bl	106f8 <__ctype_tolower_loc@plt>
   10a24:	ldr	r0, [r0]
   10a28:	ldr	r4, [r0, r4, lsl #2]
   10a2c:	sub	r0, r4, #97	; 0x61
   10a30:	cmp	r0, #25
   10a34:	bhi	108fc <main@@Base+0x98>
   10a38:	b	10a5c <main@@Base+0x1f8>
   10a3c:	mov	r4, #111	; 0x6f
   10a40:	add	r0, r4, #128	; 0x80
   10a44:	lsr	r0, r0, #7
   10a48:	cmp	r0, #2
   10a4c:	bls	10a20 <main@@Base+0x1bc>
   10a50:	sub	r0, r4, #97	; 0x61
   10a54:	cmp	r0, #25
   10a58:	bhi	108fc <main@@Base+0x98>
   10a5c:	ldr	r1, [r6, r0, lsl #2]
   10a60:	add	r5, r5, #1
   10a64:	add	r1, r1, #1
   10a68:	str	r1, [r6, r0, lsl #2]
   10a6c:	b	108fc <main@@Base+0x98>
   10a70:	mov	r4, #101	; 0x65
   10a74:	add	r0, r4, #128	; 0x80
   10a78:	lsr	r0, r0, #7
   10a7c:	cmp	r0, #2
   10a80:	bhi	10a50 <main@@Base+0x1ec>
   10a84:	b	10a20 <main@@Base+0x1bc>
   10a88:	mov	r4, #99	; 0x63
   10a8c:	add	r0, r4, #128	; 0x80
   10a90:	lsr	r0, r0, #7
   10a94:	cmp	r0, #2
   10a98:	bhi	10a50 <main@@Base+0x1ec>
   10a9c:	b	10a20 <main@@Base+0x1bc>
   10aa0:	mov	r4, #105	; 0x69
   10aa4:	add	r0, r4, #128	; 0x80
   10aa8:	lsr	r0, r0, #7
   10aac:	cmp	r0, #2
   10ab0:	bhi	10a50 <main@@Base+0x1ec>
   10ab4:	b	10a20 <main@@Base+0x1bc>
   10ab8:	mov	r4, #117	; 0x75
   10abc:	add	r0, r4, #128	; 0x80
   10ac0:	lsr	r0, r0, #7
   10ac4:	cmp	r0, #2
   10ac8:	bhi	10a50 <main@@Base+0x1ec>
   10acc:	b	10a20 <main@@Base+0x1bc>
   10ad0:	mov	r4, r0
   10ad4:	add	r0, r4, #128	; 0x80
   10ad8:	lsr	r0, r0, #7
   10adc:	cmp	r0, #2
   10ae0:	bhi	10a50 <main@@Base+0x1ec>
   10ae4:	b	10a20 <main@@Base+0x1bc>
   10ae8:	mov	r0, r8
   10aec:	bl	10710 <fclose@plt>
   10af0:	movw	r0, #3109	; 0xc25
   10af4:	movt	r0, #1
   10af8:	bl	106e0 <puts@plt>
   10afc:	movw	r0, #3057	; 0xbf1
   10b00:	mov	r1, r5
   10b04:	movt	r0, #1
   10b08:	bl	106c8 <printf@plt>
   10b0c:	vmov	s0, r5
   10b10:	vldr	s18, [pc, #76]	; 10b64 <main@@Base+0x300>
   10b14:	movw	r4, #3089	; 0xc11
   10b18:	movt	r4, #1
   10b1c:	vcvt.f32.s32	s16, s0
   10b20:	add	r0, r6, r7, lsl #2
   10b24:	add	r1, r7, #97	; 0x61
   10b28:	vldr	s0, [r0]
   10b2c:	mov	r0, r4
   10b30:	vcvt.f32.s32	s0, s0
   10b34:	vdiv.f32	s0, s0, s16
   10b38:	vmul.f32	s0, s0, s18
   10b3c:	vcvt.f64.f32	d16, s0
   10b40:	vmov	r2, r3, d16
   10b44:	bl	106c8 <printf@plt>
   10b48:	add	r7, r7, #1
   10b4c:	cmp	r7, #26
   10b50:	bne	10b20 <main@@Base+0x2bc>
   10b54:	mov	r0, #0
   10b58:	sub	sp, fp, #40	; 0x28
   10b5c:	vpop	{d8-d9}
   10b60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10b64:	sbcmi	r0, r8, #0

00010b68 <__libc_csu_init@@Base>:
   10b68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b6c:	mov	r7, r0
   10b70:	ldr	r6, [pc, #72]	; 10bc0 <__libc_csu_init@@Base+0x58>
   10b74:	ldr	r5, [pc, #72]	; 10bc4 <__libc_csu_init@@Base+0x5c>
   10b78:	add	r6, pc, r6
   10b7c:	add	r5, pc, r5
   10b80:	sub	r6, r6, r5
   10b84:	mov	r8, r1
   10b88:	mov	r9, r2
   10b8c:	bl	106a8 <printf@plt-0x20>
   10b90:	asrs	r6, r6, #2
   10b94:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b98:	mov	r4, #0
   10b9c:	add	r4, r4, #1
   10ba0:	ldr	r3, [r5], #4
   10ba4:	mov	r2, r9
   10ba8:	mov	r1, r8
   10bac:	mov	r0, r7
   10bb0:	blx	r3
   10bb4:	cmp	r6, r4
   10bb8:	bne	10b9c <__libc_csu_init@@Base+0x34>
   10bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bc0:	andeq	r0, r1, ip, lsl #7
   10bc4:	andeq	r0, r1, r4, lsl #7

00010bc8 <__libc_csu_fini@@Base>:
   10bc8:	bx	lr

Disassembly of section .fini:

00010bcc <.fini>:
   10bcc:	push	{r3, lr}
   10bd0:	pop	{r3, pc}
