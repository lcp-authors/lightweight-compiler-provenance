
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010ef8 <.init>:
   10ef8:	push	{r3, lr}
   10efc:	bl	1120c <__assert_fail@plt+0x48>
   10f00:	pop	{r3, pc}

Disassembly of section .plt:

00010f04 <fdopen@plt-0x14>:
   10f04:	push	{lr}		; (str lr, [sp, #-4]!)
   10f08:	ldr	lr, [pc, #4]	; 10f14 <fdopen@plt-0x4>
   10f0c:	add	lr, pc, lr
   10f10:	ldr	pc, [lr, #8]!
   10f14:	andeq	r8, r1, ip, ror #1

00010f18 <fdopen@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #236]!	; 0xec

00010f24 <calloc@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #228]!	; 0xe4

00010f30 <fputs_unlocked@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #220]!	; 0xdc

00010f3c <raise@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #24, 20	; 0x18000
   10f44:	ldr	pc, [ip, #212]!	; 0xd4

00010f48 <strcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #24, 20	; 0x18000
   10f50:	ldr	pc, [ip, #204]!	; 0xcc

00010f54 <posix_fadvise64@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #24, 20	; 0x18000
   10f5c:	ldr	pc, [ip, #196]!	; 0xc4

00010f60 <fflush@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #24, 20	; 0x18000
   10f68:	ldr	pc, [ip, #188]!	; 0xbc

00010f6c <memmove@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #24, 20	; 0x18000
   10f74:	ldr	pc, [ip, #180]!	; 0xb4

00010f78 <free@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #24, 20	; 0x18000
   10f80:	ldr	pc, [ip, #172]!	; 0xac

00010f84 <_exit@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #24, 20	; 0x18000
   10f8c:	ldr	pc, [ip, #164]!	; 0xa4

00010f90 <memcpy@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #24, 20	; 0x18000
   10f98:	ldr	pc, [ip, #156]!	; 0x9c

00010f9c <__strtoull_internal@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #24, 20	; 0x18000
   10fa4:	ldr	pc, [ip, #148]!	; 0x94

00010fa8 <mbsinit@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #24, 20	; 0x18000
   10fb0:	ldr	pc, [ip, #140]!	; 0x8c

00010fb4 <memcmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #24, 20	; 0x18000
   10fbc:	ldr	pc, [ip, #132]!	; 0x84

00010fc0 <dcgettext@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #24, 20	; 0x18000
   10fc8:	ldr	pc, [ip, #124]!	; 0x7c

00010fcc <realloc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #24, 20	; 0x18000
   10fd4:	ldr	pc, [ip, #116]!	; 0x74

00010fd8 <textdomain@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #24, 20	; 0x18000
   10fe0:	ldr	pc, [ip, #108]!	; 0x6c

00010fe4 <iswprint@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #24, 20	; 0x18000
   10fec:	ldr	pc, [ip, #100]!	; 0x64

00010ff0 <fwrite@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #24, 20	; 0x18000
   10ff8:	ldr	pc, [ip, #92]!	; 0x5c

00010ffc <lseek64@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #24, 20	; 0x18000
   11004:	ldr	pc, [ip, #84]!	; 0x54

00011008 <__ctype_get_mb_cur_max@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #24, 20	; 0x18000
   11010:	ldr	pc, [ip, #76]!	; 0x4c

00011014 <__fpending@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #24, 20	; 0x18000
   1101c:	ldr	pc, [ip, #68]!	; 0x44

00011020 <mbrtowc@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #24, 20	; 0x18000
   11028:	ldr	pc, [ip, #60]!	; 0x3c

0001102c <error@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #24, 20	; 0x18000
   11034:	ldr	pc, [ip, #52]!	; 0x34

00011038 <getenv@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #24, 20	; 0x18000
   11040:	ldr	pc, [ip, #44]!	; 0x2c

00011044 <malloc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #24, 20	; 0x18000
   1104c:	ldr	pc, [ip, #36]!	; 0x24

00011050 <__libc_start_main@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #24, 20	; 0x18000
   11058:	ldr	pc, [ip, #28]!

0001105c <__freading@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #20]!

00011068 <__gmon_start__@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #12]!

00011074 <getopt_long@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #4]!

00011080 <__ctype_b_loc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #4092]!	; 0xffc

0001108c <exit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #4084]!	; 0xff4

00011098 <strlen@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #4076]!	; 0xfec

000110a4 <strchr@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b0 <__errno_location@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110bc <__sprintf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110c8 <__cxa_atexit@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #94208	; 0x17000
   110d0:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d4 <setvbuf@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #94208	; 0x17000
   110dc:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e0 <memset@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #94208	; 0x17000
   110e8:	ldr	pc, [ip, #4028]!	; 0xfbc

000110ec <__printf_chk@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #94208	; 0x17000
   110f4:	ldr	pc, [ip, #4020]!	; 0xfb4

000110f8 <fileno@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #94208	; 0x17000
   11100:	ldr	pc, [ip, #4012]!	; 0xfac

00011104 <__fprintf_chk@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #94208	; 0x17000
   1110c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011110 <fclose@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #94208	; 0x17000
   11118:	ldr	pc, [ip, #3996]!	; 0xf9c

0001111c <fseeko64@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #94208	; 0x17000
   11124:	ldr	pc, [ip, #3988]!	; 0xf94

00011128 <fcntl64@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #94208	; 0x17000
   11130:	ldr	pc, [ip, #3980]!	; 0xf8c

00011134 <__overflow@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #94208	; 0x17000
   1113c:	ldr	pc, [ip, #3972]!	; 0xf84

00011140 <setlocale@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #94208	; 0x17000
   11148:	ldr	pc, [ip, #3964]!	; 0xf7c

0001114c <strrchr@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #94208	; 0x17000
   11154:	ldr	pc, [ip, #3956]!	; 0xf74

00011158 <nl_langinfo@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #94208	; 0x17000
   11160:	ldr	pc, [ip, #3948]!	; 0xf6c

00011164 <localeconv@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #94208	; 0x17000
   1116c:	ldr	pc, [ip, #3940]!	; 0xf64

00011170 <clearerr_unlocked@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #94208	; 0x17000
   11178:	ldr	pc, [ip, #3932]!	; 0xf5c

0001117c <fopen64@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #94208	; 0x17000
   11184:	ldr	pc, [ip, #3924]!	; 0xf54

00011188 <bindtextdomain@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #94208	; 0x17000
   11190:	ldr	pc, [ip, #3916]!	; 0xf4c

00011194 <fread_unlocked@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #94208	; 0x17000
   1119c:	ldr	pc, [ip, #3908]!	; 0xf44

000111a0 <strncmp@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #94208	; 0x17000
   111a8:	ldr	pc, [ip, #3900]!	; 0xf3c

000111ac <abort@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #94208	; 0x17000
   111b4:	ldr	pc, [ip, #3892]!	; 0xf34

000111b8 <close@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #94208	; 0x17000
   111c0:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c4 <__assert_fail@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #94208	; 0x17000
   111cc:	ldr	pc, [ip, #3876]!	; 0xf24

Disassembly of section .text:

000111d0 <.text>:
   111d0:	mov	fp, #0
   111d4:	mov	lr, #0
   111d8:	pop	{r1}		; (ldr r1, [sp], #4)
   111dc:	mov	r2, sp
   111e0:	push	{r2}		; (str r2, [sp, #-4]!)
   111e4:	push	{r0}		; (str r0, [sp, #-4]!)
   111e8:	ldr	ip, [pc, #16]	; 11200 <__assert_fail@plt+0x3c>
   111ec:	push	{ip}		; (str ip, [sp, #-4]!)
   111f0:	ldr	r0, [pc, #12]	; 11204 <__assert_fail@plt+0x40>
   111f4:	ldr	r3, [pc, #12]	; 11208 <__assert_fail@plt+0x44>
   111f8:	bl	11050 <__libc_start_main@plt>
   111fc:	bl	111ac <abort@plt>
   11200:	andeq	r7, r1, r0, asr #11
   11204:	andeq	r1, r1, ip, lsl #20
   11208:	andeq	r7, r1, r0, ror #10
   1120c:	ldr	r3, [pc, #20]	; 11228 <__assert_fail@plt+0x64>
   11210:	ldr	r2, [pc, #20]	; 1122c <__assert_fail@plt+0x68>
   11214:	add	r3, pc, r3
   11218:	ldr	r2, [r3, r2]
   1121c:	cmp	r2, #0
   11220:	bxeq	lr
   11224:	b	11068 <__gmon_start__@plt>
   11228:	andeq	r7, r1, r4, ror #27
   1122c:	strdeq	r0, [r0], -r4
   11230:	ldr	r0, [pc, #24]	; 11250 <__assert_fail@plt+0x8c>
   11234:	ldr	r3, [pc, #24]	; 11254 <__assert_fail@plt+0x90>
   11238:	cmp	r3, r0
   1123c:	bxeq	lr
   11240:	ldr	r3, [pc, #16]	; 11258 <__assert_fail@plt+0x94>
   11244:	cmp	r3, #0
   11248:	bxeq	lr
   1124c:	bx	r3
   11250:	andeq	r9, r2, ip, asr #2
   11254:	andeq	r9, r2, ip, asr #2
   11258:	andeq	r0, r0, r0
   1125c:	ldr	r0, [pc, #36]	; 11288 <__assert_fail@plt+0xc4>
   11260:	ldr	r1, [pc, #36]	; 1128c <__assert_fail@plt+0xc8>
   11264:	sub	r1, r1, r0
   11268:	asr	r1, r1, #2
   1126c:	add	r1, r1, r1, lsr #31
   11270:	asrs	r1, r1, #1
   11274:	bxeq	lr
   11278:	ldr	r3, [pc, #16]	; 11290 <__assert_fail@plt+0xcc>
   1127c:	cmp	r3, #0
   11280:	bxeq	lr
   11284:	bx	r3
   11288:	andeq	r9, r2, ip, asr #2
   1128c:	andeq	r9, r2, ip, asr #2
   11290:	andeq	r0, r0, r0
   11294:	push	{r4, lr}
   11298:	ldr	r4, [pc, #24]	; 112b8 <__assert_fail@plt+0xf4>
   1129c:	ldrb	r3, [r4]
   112a0:	cmp	r3, #0
   112a4:	popne	{r4, pc}
   112a8:	bl	11230 <__assert_fail@plt+0x6c>
   112ac:	mov	r3, #1
   112b0:	strb	r3, [r4]
   112b4:	pop	{r4, pc}
   112b8:	andeq	r9, r2, r0, ror r1
   112bc:	b	1125c <__assert_fail@plt+0x98>
   112c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112c4:	add	fp, sp, #28
   112c8:	sub	sp, sp, #4
   112cc:	mov	r7, r0
   112d0:	mov	r0, #32768	; 0x8000
   112d4:	mov	r5, r2
   112d8:	mov	r9, r1
   112dc:	bl	1661c <__assert_fail@plt+0x5458>
   112e0:	cmp	r0, #0
   112e4:	beq	1138c <__assert_fail@plt+0x1c8>
   112e8:	str	r5, [sp]
   112ec:	mov	r4, r0
   112f0:	mov	r5, #0
   112f4:	mov	sl, #0
   112f8:	mov	r6, #0
   112fc:	mov	r1, #0
   11300:	mov	r8, r1
   11304:	add	r0, r4, r1
   11308:	rsb	r2, r1, #32768	; 0x8000
   1130c:	mov	r1, #1
   11310:	mov	r3, r7
   11314:	bl	11194 <fread_unlocked@plt>
   11318:	add	r1, r0, r8
   1131c:	cmp	r1, #32768	; 0x8000
   11320:	beq	1133c <__assert_fail@plt+0x178>
   11324:	ldr	r2, [r7]
   11328:	cmp	r0, #0
   1132c:	beq	1139c <__assert_fail@plt+0x1d8>
   11330:	tst	r2, #16
   11334:	beq	11300 <__assert_fail@plt+0x13c>
   11338:	b	113a8 <__assert_fail@plt+0x1e4>
   1133c:	mov	r0, #0
   11340:	ldrb	r1, [r4, r0]
   11344:	lsr	r2, r5, #1
   11348:	add	r0, r0, #1
   1134c:	add	r2, r2, r5, lsl #15
   11350:	cmp	r0, #32768	; 0x8000
   11354:	add	r1, r2, r1
   11358:	uxth	r5, r1
   1135c:	bcc	11340 <__assert_fail@plt+0x17c>
   11360:	movw	r2, #32768	; 0x8000
   11364:	adds	r0, sl, #32768	; 0x8000
   11368:	mvn	r3, r6
   1136c:	movt	r2, #65535	; 0xffff
   11370:	adc	r1, r6, #0
   11374:	eor	r2, sl, r2
   11378:	mov	sl, r0
   1137c:	mov	r6, r1
   11380:	orrs	r2, r2, r3
   11384:	bne	112fc <__assert_fail@plt+0x138>
   11388:	b	113e8 <__assert_fail@plt+0x224>
   1138c:	mvn	r7, #0
   11390:	mov	r0, r7
   11394:	sub	sp, fp, #28
   11398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1139c:	mvn	r7, #0
   113a0:	tst	r2, #32
   113a4:	bne	11408 <__assert_fail@plt+0x244>
   113a8:	cmp	r1, #0
   113ac:	beq	113d4 <__assert_fail@plt+0x210>
   113b0:	add	r0, r0, r8
   113b4:	mov	r2, r4
   113b8:	ldrb	r7, [r2], #1
   113bc:	lsr	r3, r5, #1
   113c0:	subs	r0, r0, #1
   113c4:	add	r3, r3, r5, lsl #15
   113c8:	add	r3, r3, r7
   113cc:	uxth	r5, r3
   113d0:	bne	113b8 <__assert_fail@plt+0x1f4>
   113d4:	adds	r0, sl, r1
   113d8:	mov	r7, #0
   113dc:	adcs	r1, r6, #0
   113e0:	adcs	r2, r7, #0
   113e4:	beq	113fc <__assert_fail@plt+0x238>
   113e8:	bl	110b0 <__errno_location@plt>
   113ec:	mov	r1, #75	; 0x4b
   113f0:	mvn	r7, #0
   113f4:	str	r1, [r0]
   113f8:	b	11408 <__assert_fail@plt+0x244>
   113fc:	ldr	r2, [sp]
   11400:	str	r5, [r9]
   11404:	strd	r0, [r2]
   11408:	mov	r0, r4
   1140c:	bl	120cc <__assert_fail@plt+0xf08>
   11410:	mov	r0, r7
   11414:	sub	sp, fp, #28
   11418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1141c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11420:	add	fp, sp, #28
   11424:	sub	sp, sp, #20
   11428:	mov	r7, r0
   1142c:	mov	r0, #32768	; 0x8000
   11430:	mov	r4, r2
   11434:	mov	r5, r1
   11438:	bl	1661c <__assert_fail@plt+0x5458>
   1143c:	cmp	r0, #0
   11440:	beq	11510 <__assert_fail@plt+0x34c>
   11444:	mov	sl, r0
   11448:	str	r5, [sp, #4]
   1144c:	mov	r0, #0
   11450:	add	r9, sp, #12
   11454:	mov	r6, #0
   11458:	mov	r5, #0
   1145c:	mov	r1, #0
   11460:	str	r0, [sp, #8]
   11464:	mov	r8, r1
   11468:	add	r0, sl, r1
   1146c:	rsb	r2, r1, #32768	; 0x8000
   11470:	mov	r1, #1
   11474:	mov	r3, r7
   11478:	bl	11194 <fread_unlocked@plt>
   1147c:	add	r1, r0, r8
   11480:	cmp	r1, #32768	; 0x8000
   11484:	beq	114a0 <__assert_fail@plt+0x2dc>
   11488:	ldr	r2, [r7]
   1148c:	cmp	r0, #0
   11490:	beq	11520 <__assert_fail@plt+0x35c>
   11494:	tst	r2, #16
   11498:	beq	11464 <__assert_fail@plt+0x2a0>
   1149c:	b	1152c <__assert_fail@plt+0x368>
   114a0:	mov	r0, #0
   114a4:	vdup.32	q8, r0
   114a8:	vmov.32	d16[0], r5
   114ac:	ldr	r1, [sl, r0]
   114b0:	add	r0, r0, #4
   114b4:	cmp	r0, #32768	; 0x8000
   114b8:	str	r1, [sp, #12]
   114bc:	vld1.32	{d18[0]}, [r9 :32]
   114c0:	vmovl.u8	q9, d18
   114c4:	vmovl.u16	q9, d18
   114c8:	vadd.i32	q8, q8, q9
   114cc:	bne	114ac <__assert_fail@plt+0x2e8>
   114d0:	ldr	r2, [sp, #8]
   114d4:	vext.8	q9, q8, q8, #8
   114d8:	movw	r3, #32768	; 0x8000
   114dc:	vadd.i32	q8, q8, q9
   114e0:	movt	r3, #65535	; 0xffff
   114e4:	vdup.32	q9, d16[1]
   114e8:	vadd.i32	q8, q8, q9
   114ec:	adds	r0, r2, #32768	; 0x8000
   114f0:	eor	r2, r2, r3
   114f4:	mvn	r3, r6
   114f8:	vmov.32	r5, d16[0]
   114fc:	adc	r1, r6, #0
   11500:	orrs	r2, r2, r3
   11504:	mov	r6, r1
   11508:	bne	1145c <__assert_fail@plt+0x298>
   1150c:	b	115d4 <__assert_fail@plt+0x410>
   11510:	mvn	r7, #0
   11514:	mov	r0, r7
   11518:	sub	sp, fp, #28
   1151c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11520:	mvn	r7, #0
   11524:	tst	r2, #32
   11528:	bne	11604 <__assert_fail@plt+0x440>
   1152c:	cmp	r1, #0
   11530:	beq	115bc <__assert_fail@plt+0x3f8>
   11534:	mov	r7, #0
   11538:	cmp	r1, #3
   1153c:	bls	115a0 <__assert_fail@plt+0x3dc>
   11540:	mov	r2, #0
   11544:	bic	r7, r1, #3
   11548:	mov	ip, r4
   1154c:	add	r3, sp, #16
   11550:	mov	r4, sl
   11554:	vdup.32	q8, r2
   11558:	mov	r2, r7
   1155c:	vmov.32	d16[0], r5
   11560:	ldr	r5, [r4], #4
   11564:	subs	r2, r2, #4
   11568:	str	r5, [sp, #16]
   1156c:	vld1.32	{d18[0]}, [r3 :32]
   11570:	vmovl.u8	q9, d18
   11574:	vmovl.u16	q9, d18
   11578:	vadd.i32	q8, q8, q9
   1157c:	bne	11560 <__assert_fail@plt+0x39c>
   11580:	vext.8	q9, q8, q8, #8
   11584:	cmp	r1, r7
   11588:	mov	r4, ip
   1158c:	vadd.i32	q8, q8, q9
   11590:	vdup.32	q9, d16[1]
   11594:	vadd.i32	q8, q8, q9
   11598:	vmov.32	r5, d16[0]
   1159c:	beq	115bc <__assert_fail@plt+0x3f8>
   115a0:	sub	r0, r0, r7
   115a4:	add	r2, sl, r7
   115a8:	add	r0, r0, r8
   115ac:	ldrb	r3, [r2], #1
   115b0:	subs	r0, r0, #1
   115b4:	add	r5, r5, r3
   115b8:	bne	115ac <__assert_fail@plt+0x3e8>
   115bc:	ldr	r0, [sp, #8]
   115c0:	mov	r7, #0
   115c4:	adds	r0, r0, r1
   115c8:	adcs	r1, r6, #0
   115cc:	adcs	r2, r7, #0
   115d0:	beq	115e8 <__assert_fail@plt+0x424>
   115d4:	bl	110b0 <__errno_location@plt>
   115d8:	mov	r1, #75	; 0x4b
   115dc:	mvn	r7, #0
   115e0:	str	r1, [r0]
   115e4:	b	11604 <__assert_fail@plt+0x440>
   115e8:	lsr	r2, r5, #16
   115ec:	uxtah	r2, r2, r5
   115f0:	lsr	r3, r2, #16
   115f4:	uxtah	r2, r3, r2
   115f8:	ldr	r3, [sp, #4]
   115fc:	str	r2, [r3]
   11600:	strd	r0, [r4]
   11604:	mov	r0, sl
   11608:	bl	120cc <__assert_fail@plt+0xf08>
   1160c:	mov	r0, r7
   11610:	sub	sp, fp, #28
   11614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11618:	push	{r4, r5, r6, r7, fp, lr}
   1161c:	add	fp, sp, #16
   11620:	sub	sp, sp, #672	; 0x2a0
   11624:	mov	r4, r0
   11628:	ldr	r5, [r2]
   1162c:	mov	r2, #1
   11630:	mov	r0, #0
   11634:	mov	r1, #1024	; 0x400
   11638:	mov	r3, #0
   1163c:	str	r2, [sp]
   11640:	stmib	sp, {r0, r1}
   11644:	str	r0, [sp, #12]
   11648:	ldr	r0, [fp, #16]
   1164c:	ldr	r1, [fp, #20]
   11650:	add	r2, sp, #20
   11654:	bl	12198 <__assert_fail@plt+0xfd4>
   11658:	movw	r1, #30188	; 0x75ec
   1165c:	mov	r3, r0
   11660:	mov	r0, #1
   11664:	mov	r2, r5
   11668:	movt	r1, #1
   1166c:	bl	110ec <__printf_chk@plt>
   11670:	ldr	r0, [fp, #12]
   11674:	cmp	r0, #0
   11678:	beq	11690 <__assert_fail@plt+0x4cc>
   1167c:	movw	r1, #32596	; 0x7f54
   11680:	mov	r0, #1
   11684:	mov	r2, r4
   11688:	movt	r1, #1
   1168c:	bl	110ec <__printf_chk@plt>
   11690:	movw	r0, #37228	; 0x916c
   11694:	ldr	r1, [fp, #8]
   11698:	movt	r0, #2
   1169c:	ldr	r0, [r0]
   116a0:	ldr	r2, [r0, #20]
   116a4:	ldr	r3, [r0, #24]
   116a8:	cmp	r2, r3
   116ac:	addcc	r3, r2, #1
   116b0:	strcc	r3, [r0, #20]
   116b4:	strbcc	r1, [r2]
   116b8:	subcc	sp, fp, #16
   116bc:	popcc	{r4, r5, r6, r7, fp, pc}
   116c0:	bl	11134 <__overflow@plt>
   116c4:	sub	sp, fp, #16
   116c8:	pop	{r4, r5, r6, r7, fp, pc}
   116cc:	push	{r4, r5, r6, r7, fp, lr}
   116d0:	add	fp, sp, #16
   116d4:	sub	sp, sp, #672	; 0x2a0
   116d8:	mov	r4, r0
   116dc:	ldr	r5, [r2]
   116e0:	mov	r2, #1
   116e4:	mov	r0, #0
   116e8:	mov	r1, #512	; 0x200
   116ec:	mov	r3, #0
   116f0:	str	r2, [sp]
   116f4:	stmib	sp, {r0, r1}
   116f8:	str	r0, [sp, #12]
   116fc:	ldr	r0, [fp, #16]
   11700:	ldr	r1, [fp, #20]
   11704:	add	r2, sp, #20
   11708:	bl	12198 <__assert_fail@plt+0xfd4>
   1170c:	movw	r1, #30197	; 0x75f5
   11710:	mov	r3, r0
   11714:	mov	r0, #1
   11718:	mov	r2, r5
   1171c:	movt	r1, #1
   11720:	bl	110ec <__printf_chk@plt>
   11724:	ldr	r0, [fp, #12]
   11728:	cmp	r0, #0
   1172c:	beq	11744 <__assert_fail@plt+0x580>
   11730:	movw	r1, #32596	; 0x7f54
   11734:	mov	r0, #1
   11738:	mov	r2, r4
   1173c:	movt	r1, #1
   11740:	bl	110ec <__printf_chk@plt>
   11744:	movw	r0, #37228	; 0x916c
   11748:	ldr	r1, [fp, #8]
   1174c:	movt	r0, #2
   11750:	ldr	r0, [r0]
   11754:	ldr	r2, [r0, #20]
   11758:	ldr	r3, [r0, #24]
   1175c:	cmp	r2, r3
   11760:	addcc	r3, r2, #1
   11764:	strcc	r3, [r0, #20]
   11768:	strbcc	r1, [r2]
   1176c:	subcc	sp, fp, #16
   11770:	popcc	{r4, r5, r6, r7, fp, pc}
   11774:	bl	11134 <__overflow@plt>
   11778:	sub	sp, fp, #16
   1177c:	pop	{r4, r5, r6, r7, fp, pc}
   11780:	push	{fp, lr}
   11784:	mov	fp, sp
   11788:	sub	sp, sp, #56	; 0x38
   1178c:	mov	r4, r0
   11790:	cmp	r0, #0
   11794:	bne	119c8 <__assert_fail@plt+0x804>
   11798:	movw	r1, #30242	; 0x7622
   1179c:	mov	r0, #0
   117a0:	mov	r2, #5
   117a4:	movt	r1, #1
   117a8:	bl	10fc0 <dcgettext@plt>
   117ac:	mov	r1, r0
   117b0:	movw	r0, #37248	; 0x9180
   117b4:	movt	r0, #2
   117b8:	ldr	r2, [r0]
   117bc:	mov	r0, #1
   117c0:	bl	110ec <__printf_chk@plt>
   117c4:	movw	r1, #30275	; 0x7643
   117c8:	mov	r0, #0
   117cc:	mov	r2, #5
   117d0:	movt	r1, #1
   117d4:	bl	10fc0 <dcgettext@plt>
   117d8:	movw	r2, #30314	; 0x766a
   117dc:	mov	r1, r0
   117e0:	mov	r0, #1
   117e4:	mov	r3, #16
   117e8:	movt	r2, #1
   117ec:	bl	110ec <__printf_chk@plt>
   117f0:	movw	r1, #30645	; 0x77b5
   117f4:	mov	r0, #0
   117f8:	mov	r2, #5
   117fc:	movt	r1, #1
   11800:	bl	10fc0 <dcgettext@plt>
   11804:	movw	r7, #37228	; 0x916c
   11808:	movt	r7, #2
   1180c:	ldr	r1, [r7]
   11810:	bl	10f30 <fputs_unlocked@plt>
   11814:	movw	r1, #30318	; 0x766e
   11818:	mov	r0, #0
   1181c:	mov	r2, #5
   11820:	movt	r1, #1
   11824:	bl	10fc0 <dcgettext@plt>
   11828:	ldr	r1, [r7]
   1182c:	bl	10f30 <fputs_unlocked@plt>
   11830:	movw	r1, #30456	; 0x76f8
   11834:	mov	r0, #0
   11838:	mov	r2, #5
   1183c:	movt	r1, #1
   11840:	bl	10fc0 <dcgettext@plt>
   11844:	ldr	r1, [r7]
   11848:	bl	10f30 <fputs_unlocked@plt>
   1184c:	movw	r1, #30501	; 0x7725
   11850:	mov	r0, #0
   11854:	mov	r2, #5
   11858:	movt	r1, #1
   1185c:	bl	10fc0 <dcgettext@plt>
   11860:	ldr	r1, [r7]
   11864:	bl	10f30 <fputs_unlocked@plt>
   11868:	movw	r0, #31104	; 0x7980
   1186c:	mov	r2, #48	; 0x30
   11870:	mov	r6, sp
   11874:	movw	r5, #30792	; 0x7848
   11878:	movt	r0, #1
   1187c:	movt	r5, #1
   11880:	add	r1, r0, #32
   11884:	add	r3, r0, #16
   11888:	vld1.64	{d18-d19}, [r0], r2
   1188c:	vld1.64	{d16-d17}, [r1]
   11890:	vld1.64	{d20-d21}, [r3]
   11894:	add	r1, r6, #32
   11898:	vldr	d22, [r0]
   1189c:	add	r0, r6, #16
   118a0:	vst1.64	{d16-d17}, [r1]
   118a4:	movw	r1, #30701	; 0x77ed
   118a8:	vst1.64	{d20-d21}, [r0]
   118ac:	mov	r0, r6
   118b0:	vst1.64	{d18-d19}, [r0], r2
   118b4:	movt	r1, #1
   118b8:	vstr	d22, [r0]
   118bc:	mov	r0, r5
   118c0:	bl	10f48 <strcmp@plt>
   118c4:	cmp	r0, #0
   118c8:	ldrne	r1, [r6, #8]!
   118cc:	cmpne	r1, #0
   118d0:	bne	118bc <__assert_fail@plt+0x6f8>
   118d4:	ldr	r6, [r6, #4]
   118d8:	movw	r1, #30796	; 0x784c
   118dc:	mov	r0, #0
   118e0:	mov	r2, #5
   118e4:	movt	r1, #1
   118e8:	bl	10fc0 <dcgettext@plt>
   118ec:	movw	r2, #30582	; 0x7776
   118f0:	movw	r3, #30819	; 0x7863
   118f4:	mov	r1, r0
   118f8:	mov	r0, #1
   118fc:	movt	r2, #1
   11900:	movt	r3, #1
   11904:	bl	110ec <__printf_chk@plt>
   11908:	cmp	r6, #0
   1190c:	mov	r0, #5
   11910:	mov	r1, #0
   11914:	moveq	r6, r5
   11918:	bl	11140 <setlocale@plt>
   1191c:	cmp	r0, #0
   11920:	beq	11958 <__assert_fail@plt+0x794>
   11924:	movw	r1, #30859	; 0x788b
   11928:	mov	r2, #3
   1192c:	movt	r1, #1
   11930:	bl	111a0 <strncmp@plt>
   11934:	cmp	r0, #0
   11938:	beq	11958 <__assert_fail@plt+0x794>
   1193c:	movw	r1, #30863	; 0x788f
   11940:	mov	r0, #0
   11944:	mov	r2, #5
   11948:	movt	r1, #1
   1194c:	bl	10fc0 <dcgettext@plt>
   11950:	ldr	r1, [r7]
   11954:	bl	10f30 <fputs_unlocked@plt>
   11958:	movw	r1, #30934	; 0x78d6
   1195c:	mov	r0, #0
   11960:	mov	r2, #5
   11964:	movt	r1, #1
   11968:	bl	10fc0 <dcgettext@plt>
   1196c:	movw	r2, #30819	; 0x7863
   11970:	mov	r1, r0
   11974:	mov	r0, #1
   11978:	mov	r3, r5
   1197c:	movt	r2, #1
   11980:	bl	110ec <__printf_chk@plt>
   11984:	movw	r1, #30961	; 0x78f1
   11988:	mov	r0, #0
   1198c:	mov	r2, #5
   11990:	movt	r1, #1
   11994:	bl	10fc0 <dcgettext@plt>
   11998:	movw	r3, #31011	; 0x7923
   1199c:	mov	r1, r0
   119a0:	movw	r0, #30729	; 0x7809
   119a4:	cmp	r6, r5
   119a8:	mov	r2, r6
   119ac:	movt	r0, #1
   119b0:	movt	r3, #1
   119b4:	moveq	r3, r0
   119b8:	mov	r0, #1
   119bc:	bl	110ec <__printf_chk@plt>
   119c0:	mov	r0, r4
   119c4:	bl	1108c <exit@plt>
   119c8:	movw	r0, #37216	; 0x9160
   119cc:	movw	r1, #30203	; 0x75fb
   119d0:	mov	r2, #5
   119d4:	movt	r0, #2
   119d8:	movt	r1, #1
   119dc:	ldr	r5, [r0]
   119e0:	mov	r0, #0
   119e4:	bl	10fc0 <dcgettext@plt>
   119e8:	mov	r2, r0
   119ec:	movw	r0, #37248	; 0x9180
   119f0:	mov	r1, #1
   119f4:	movt	r0, #2
   119f8:	ldr	r3, [r0]
   119fc:	mov	r0, r5
   11a00:	bl	11104 <__fprintf_chk@plt>
   11a04:	mov	r0, r4
   11a08:	bl	1108c <exit@plt>
   11a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a10:	add	fp, sp, #28
   11a14:	sub	sp, sp, #52	; 0x34
   11a18:	str	r0, [sp, #20]
   11a1c:	ldr	r0, [r1]
   11a20:	mov	r7, r1
   11a24:	bl	12d10 <__assert_fail@plt+0x1b4c>
   11a28:	movw	r1, #31011	; 0x7923
   11a2c:	mov	r0, #6
   11a30:	movt	r1, #1
   11a34:	bl	11140 <setlocale@plt>
   11a38:	movw	r4, #30586	; 0x777a
   11a3c:	movw	r1, #30555	; 0x775b
   11a40:	movt	r4, #1
   11a44:	movt	r1, #1
   11a48:	mov	r0, r4
   11a4c:	bl	11188 <bindtextdomain@plt>
   11a50:	mov	r0, r4
   11a54:	bl	10fd8 <textdomain@plt>
   11a58:	movw	r0, #7656	; 0x1de8
   11a5c:	movt	r0, #1
   11a60:	bl	175c4 <__assert_fail@plt+0x6400>
   11a64:	movw	r8, #37228	; 0x916c
   11a68:	mov	r1, #0
   11a6c:	mov	r2, #1
   11a70:	mov	r3, #0
   11a74:	mov	r5, #0
   11a78:	movt	r8, #2
   11a7c:	ldr	r0, [r8]
   11a80:	bl	110d4 <setvbuf@plt>
   11a84:	sub	r0, fp, #34	; 0x22
   11a88:	movw	r6, #30579	; 0x7773
   11a8c:	movw	r4, #31032	; 0x7938
   11a90:	add	r0, r0, #3
   11a94:	movt	r6, #1
   11a98:	movt	r4, #1
   11a9c:	and	r1, r0, #3
   11aa0:	sub	r0, r0, r1
   11aa4:	str	r0, [sp, #28]
   11aa8:	b	11ab8 <__assert_fail@plt+0x8f4>
   11aac:	movw	r0, #37236	; 0x9174
   11ab0:	movt	r0, #2
   11ab4:	strb	r1, [r0]
   11ab8:	ldr	r0, [sp, #20]
   11abc:	mov	r1, r7
   11ac0:	mov	r2, r6
   11ac4:	mov	r3, r4
   11ac8:	str	r5, [sp]
   11acc:	bl	11074 <getopt_long@plt>
   11ad0:	cmp	r0, #113	; 0x71
   11ad4:	ble	11af4 <__assert_fail@plt+0x930>
   11ad8:	cmp	r0, #114	; 0x72
   11adc:	mov	r1, #0
   11ae0:	beq	11aac <__assert_fail@plt+0x8e8>
   11ae4:	cmp	r0, #115	; 0x73
   11ae8:	bne	11d94 <__assert_fail@plt+0xbd0>
   11aec:	mov	r1, #1
   11af0:	b	11aac <__assert_fail@plt+0x8e8>
   11af4:	cmn	r0, #1
   11af8:	bne	11d30 <__assert_fail@plt+0xb6c>
   11afc:	movw	r0, #37208	; 0x9158
   11b00:	ldr	r1, [sp, #20]
   11b04:	movw	r4, #37236	; 0x9174
   11b08:	movt	r0, #2
   11b0c:	movt	r4, #2
   11b10:	ldr	r0, [r0]
   11b14:	add	r6, r7, r1, lsl #2
   11b18:	cmp	r0, r1
   11b1c:	add	r5, r7, r0, lsl #2
   11b20:	mov	r0, #1
   11b24:	movweq	r1, #31390	; 0x7a9e
   11b28:	str	r0, [sp, #24]
   11b2c:	movteq	r1, #1
   11b30:	streq	r1, [r6], #4
   11b34:	cmp	r5, r6
   11b38:	bcs	11cf8 <__assert_fail@plt+0xb34>
   11b3c:	mov	r0, #1
   11b40:	str	r0, [sp, #24]
   11b44:	ldr	r7, [r5]
   11b48:	movw	r1, #31390	; 0x7a9e
   11b4c:	movt	r1, #1
   11b50:	mov	r0, r7
   11b54:	bl	10f48 <strcmp@plt>
   11b58:	mov	r9, r0
   11b5c:	cmp	r0, #0
   11b60:	beq	11bb8 <__assert_fail@plt+0x9f4>
   11b64:	movw	r1, #31193	; 0x79d9
   11b68:	mov	r0, r7
   11b6c:	movt	r1, #1
   11b70:	bl	12018 <__assert_fail@plt+0xe54>
   11b74:	mov	sl, r0
   11b78:	cmp	r0, #0
   11b7c:	bne	11bcc <__assert_fail@plt+0xa08>
   11b80:	bl	110b0 <__errno_location@plt>
   11b84:	ldr	r4, [r0]
   11b88:	mov	r0, #0
   11b8c:	mov	r1, #3
   11b90:	mov	r2, r7
   11b94:	str	r0, [sp, #24]
   11b98:	mov	r0, #0
   11b9c:	bl	149e0 <__assert_fail@plt+0x381c>
   11ba0:	mov	r1, r4
   11ba4:	movw	r4, #37236	; 0x9174
   11ba8:	mov	r3, r0
   11bac:	mov	r0, #0
   11bb0:	movt	r4, #2
   11bb4:	b	11c5c <__assert_fail@plt+0xa98>
   11bb8:	mov	r0, #1
   11bbc:	strb	r0, [r4, #1]
   11bc0:	movw	r0, #37224	; 0x9168
   11bc4:	movt	r0, #2
   11bc8:	ldr	sl, [r0]
   11bcc:	mov	r0, sl
   11bd0:	mov	r1, #2
   11bd4:	bl	11ed8 <__assert_fail@plt+0xd14>
   11bd8:	ldrb	r0, [r4]
   11bdc:	movw	r1, #31160	; 0x79b8
   11be0:	add	r2, sp, #32
   11be4:	movt	r1, #1
   11be8:	ldr	r3, [r1, r0, lsl #2]
   11bec:	ldr	r1, [sp, #28]
   11bf0:	mov	r0, sl
   11bf4:	blx	r3
   11bf8:	cmp	r0, #0
   11bfc:	beq	11c78 <__assert_fail@plt+0xab4>
   11c00:	bl	110b0 <__errno_location@plt>
   11c04:	ldr	r8, [r0]
   11c08:	mov	r0, sl
   11c0c:	cmp	r9, #0
   11c10:	beq	11c88 <__assert_fail@plt+0xac4>
   11c14:	bl	11f14 <__assert_fail@plt+0xd50>
   11c18:	cmp	r8, #0
   11c1c:	bne	11c30 <__assert_fail@plt+0xa6c>
   11c20:	cmp	r0, #0
   11c24:	beq	11c30 <__assert_fail@plt+0xa6c>
   11c28:	bl	110b0 <__errno_location@plt>
   11c2c:	ldr	r8, [r0]
   11c30:	cmp	r8, #0
   11c34:	beq	11c94 <__assert_fail@plt+0xad0>
   11c38:	mov	r0, #0
   11c3c:	mov	r1, #3
   11c40:	mov	r2, r7
   11c44:	str	r0, [sp, #24]
   11c48:	mov	r0, #0
   11c4c:	bl	149e0 <__assert_fail@plt+0x381c>
   11c50:	mov	r3, r0
   11c54:	mov	r0, #0
   11c58:	mov	r1, r8
   11c5c:	movw	r2, #32597	; 0x7f55
   11c60:	movt	r2, #1
   11c64:	bl	1102c <error@plt>
   11c68:	add	r5, r5, #4
   11c6c:	cmp	r5, r6
   11c70:	bcc	11b44 <__assert_fail@plt+0x980>
   11c74:	b	11cf8 <__assert_fail@plt+0xb34>
   11c78:	mov	r8, #0
   11c7c:	mov	r0, sl
   11c80:	cmp	r9, #0
   11c84:	bne	11c14 <__assert_fail@plt+0xa50>
   11c88:	bl	11170 <clearerr_unlocked@plt>
   11c8c:	cmp	r8, #0
   11c90:	bne	11c38 <__assert_fail@plt+0xa74>
   11c94:	movw	r1, #37208	; 0x9158
   11c98:	ldrb	r0, [r4]
   11c9c:	ldr	r4, [sp, #20]
   11ca0:	ldr	r2, [sp, #32]
   11ca4:	ldr	r3, [sp, #36]	; 0x24
   11ca8:	movt	r1, #2
   11cac:	ldr	r1, [r1]
   11cb0:	subs	r1, r1, r4
   11cb4:	mov	r4, #10
   11cb8:	movwne	r1, #1
   11cbc:	str	r4, [sp]
   11cc0:	stmib	sp, {r1, r2, r3}
   11cc4:	movw	r1, #31096	; 0x7978
   11cc8:	mov	r3, #0
   11ccc:	movt	r1, #1
   11cd0:	ldr	r2, [sp, #28]
   11cd4:	ldr	r4, [r1, r0, lsl #2]
   11cd8:	mov	r0, r7
   11cdc:	mov	r1, #0
   11ce0:	blx	r4
   11ce4:	movw	r4, #37236	; 0x9174
   11ce8:	movt	r4, #2
   11cec:	add	r5, r5, #4
   11cf0:	cmp	r5, r6
   11cf4:	bcc	11b44 <__assert_fail@plt+0x980>
   11cf8:	ldrb	r0, [r4, #1]
   11cfc:	cmp	r0, #0
   11d00:	beq	11d1c <__assert_fail@plt+0xb58>
   11d04:	movw	r0, #37224	; 0x9168
   11d08:	movt	r0, #2
   11d0c:	ldr	r0, [r0]
   11d10:	bl	11f14 <__assert_fail@plt+0xd50>
   11d14:	cmn	r0, #1
   11d18:	beq	11d9c <__assert_fail@plt+0xbd8>
   11d1c:	ldr	r1, [sp, #24]
   11d20:	mov	r0, #1
   11d24:	bic	r0, r0, r1
   11d28:	sub	sp, fp, #28
   11d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d30:	cmn	r0, #3
   11d34:	bne	11d84 <__assert_fail@plt+0xbc0>
   11d38:	movw	r0, #37120	; 0x9100
   11d3c:	movw	r2, #30614	; 0x7796
   11d40:	mov	r1, #0
   11d44:	movw	r7, #30596	; 0x7784
   11d48:	movt	r0, #2
   11d4c:	movt	r2, #1
   11d50:	str	r1, [sp, #8]
   11d54:	movw	r1, #30792	; 0x7848
   11d58:	movt	r7, #1
   11d5c:	ldr	r3, [r0]
   11d60:	ldr	r0, [r8]
   11d64:	str	r2, [sp, #4]
   11d68:	movw	r2, #30582	; 0x7776
   11d6c:	movt	r1, #1
   11d70:	str	r7, [sp]
   11d74:	movt	r2, #1
   11d78:	bl	1513c <__assert_fail@plt+0x3f78>
   11d7c:	mov	r0, #0
   11d80:	bl	1108c <exit@plt>
   11d84:	cmn	r0, #2
   11d88:	bne	11d94 <__assert_fail@plt+0xbd0>
   11d8c:	mov	r0, #0
   11d90:	bl	11780 <__assert_fail@plt+0x5bc>
   11d94:	mov	r0, #1
   11d98:	bl	11780 <__assert_fail@plt+0x5bc>
   11d9c:	bl	110b0 <__errno_location@plt>
   11da0:	ldr	r4, [r0]
   11da4:	movw	r1, #30630	; 0x77a6
   11da8:	mov	r0, #0
   11dac:	mov	r2, #5
   11db0:	movt	r1, #1
   11db4:	bl	10fc0 <dcgettext@plt>
   11db8:	mov	r2, r0
   11dbc:	mov	r0, #1
   11dc0:	mov	r1, r4
   11dc4:	bl	1102c <error@plt>
   11dc8:	movw	r1, #37240	; 0x9178
   11dcc:	movt	r1, #2
   11dd0:	str	r0, [r1, #4]
   11dd4:	bx	lr
   11dd8:	movw	r1, #37240	; 0x9178
   11ddc:	movt	r1, #2
   11de0:	strb	r0, [r1]
   11de4:	bx	lr
   11de8:	push	{r4, r5, r6, sl, fp, lr}
   11dec:	add	fp, sp, #16
   11df0:	sub	sp, sp, #8
   11df4:	movw	r0, #37228	; 0x916c
   11df8:	movt	r0, #2
   11dfc:	ldr	r0, [r0]
   11e00:	bl	16bac <__assert_fail@plt+0x59e8>
   11e04:	cmp	r0, #0
   11e08:	beq	11e30 <__assert_fail@plt+0xc6c>
   11e0c:	movw	r5, #37240	; 0x9178
   11e10:	movt	r5, #2
   11e14:	ldrb	r0, [r5]
   11e18:	cmp	r0, #0
   11e1c:	beq	11e5c <__assert_fail@plt+0xc98>
   11e20:	bl	110b0 <__errno_location@plt>
   11e24:	ldr	r0, [r0]
   11e28:	cmp	r0, #32
   11e2c:	bne	11e5c <__assert_fail@plt+0xc98>
   11e30:	movw	r0, #37216	; 0x9160
   11e34:	movt	r0, #2
   11e38:	ldr	r0, [r0]
   11e3c:	bl	16bac <__assert_fail@plt+0x59e8>
   11e40:	cmp	r0, #0
   11e44:	subeq	sp, fp, #16
   11e48:	popeq	{r4, r5, r6, sl, fp, pc}
   11e4c:	movw	r0, #37124	; 0x9104
   11e50:	movt	r0, #2
   11e54:	ldr	r0, [r0]
   11e58:	bl	10f84 <_exit@plt>
   11e5c:	movw	r1, #31183	; 0x79cf
   11e60:	mov	r0, #0
   11e64:	mov	r2, #5
   11e68:	movt	r1, #1
   11e6c:	bl	10fc0 <dcgettext@plt>
   11e70:	ldr	r6, [r5, #4]
   11e74:	mov	r4, r0
   11e78:	bl	110b0 <__errno_location@plt>
   11e7c:	ldr	r5, [r0]
   11e80:	cmp	r6, #0
   11e84:	bne	11ea0 <__assert_fail@plt+0xcdc>
   11e88:	movw	r2, #32597	; 0x7f55
   11e8c:	mov	r0, #0
   11e90:	mov	r1, r5
   11e94:	mov	r3, r4
   11e98:	movt	r2, #1
   11e9c:	b	11ec0 <__assert_fail@plt+0xcfc>
   11ea0:	mov	r0, r6
   11ea4:	bl	14904 <__assert_fail@plt+0x3740>
   11ea8:	movw	r2, #31195	; 0x79db
   11eac:	mov	r3, r0
   11eb0:	str	r4, [sp]
   11eb4:	mov	r0, #0
   11eb8:	mov	r1, r5
   11ebc:	movt	r2, #1
   11ec0:	bl	1102c <error@plt>
   11ec4:	movw	r0, #37124	; 0x9104
   11ec8:	movt	r0, #2
   11ecc:	ldr	r0, [r0]
   11ed0:	bl	10f84 <_exit@plt>
   11ed4:	b	10f54 <posix_fadvise64@plt>
   11ed8:	cmp	r0, #0
   11edc:	bxeq	lr
   11ee0:	push	{r4, sl, fp, lr}
   11ee4:	add	fp, sp, #8
   11ee8:	sub	sp, sp, #16
   11eec:	mov	r4, r1
   11ef0:	bl	110f8 <fileno@plt>
   11ef4:	mov	r1, #0
   11ef8:	mov	r2, #0
   11efc:	mov	r3, #0
   11f00:	str	r1, [sp]
   11f04:	stmib	sp, {r1, r4}
   11f08:	bl	10f54 <posix_fadvise64@plt>
   11f0c:	sub	sp, fp, #8
   11f10:	pop	{r4, sl, fp, pc}
   11f14:	push	{r4, r5, r6, sl, fp, lr}
   11f18:	add	fp, sp, #16
   11f1c:	sub	sp, sp, #8
   11f20:	mov	r4, r0
   11f24:	bl	110f8 <fileno@plt>
   11f28:	cmn	r0, #1
   11f2c:	ble	11fa0 <__assert_fail@plt+0xddc>
   11f30:	mov	r0, r4
   11f34:	bl	1105c <__freading@plt>
   11f38:	cmp	r0, #0
   11f3c:	beq	11f68 <__assert_fail@plt+0xda4>
   11f40:	mov	r0, r4
   11f44:	bl	110f8 <fileno@plt>
   11f48:	mov	r1, #1
   11f4c:	mov	r2, #0
   11f50:	mov	r3, #0
   11f54:	str	r1, [sp]
   11f58:	bl	10ffc <lseek64@plt>
   11f5c:	and	r0, r0, r1
   11f60:	cmn	r0, #1
   11f64:	beq	11fa0 <__assert_fail@plt+0xddc>
   11f68:	mov	r0, r4
   11f6c:	bl	11fb0 <__assert_fail@plt+0xdec>
   11f70:	cmp	r0, #0
   11f74:	beq	11fa0 <__assert_fail@plt+0xddc>
   11f78:	bl	110b0 <__errno_location@plt>
   11f7c:	ldr	r6, [r0]
   11f80:	mov	r5, r0
   11f84:	mov	r0, r4
   11f88:	bl	11110 <fclose@plt>
   11f8c:	cmp	r6, #0
   11f90:	strne	r6, [r5]
   11f94:	mvnne	r0, #0
   11f98:	sub	sp, fp, #16
   11f9c:	pop	{r4, r5, r6, sl, fp, pc}
   11fa0:	mov	r0, r4
   11fa4:	sub	sp, fp, #16
   11fa8:	pop	{r4, r5, r6, sl, fp, lr}
   11fac:	b	11110 <fclose@plt>
   11fb0:	push	{r4, sl, fp, lr}
   11fb4:	add	fp, sp, #8
   11fb8:	sub	sp, sp, #8
   11fbc:	mov	r4, r0
   11fc0:	cmp	r0, #0
   11fc4:	beq	11fe0 <__assert_fail@plt+0xe1c>
   11fc8:	mov	r0, r4
   11fcc:	bl	1105c <__freading@plt>
   11fd0:	cmp	r0, #0
   11fd4:	ldrbne	r0, [r4, #1]
   11fd8:	tstne	r0, #1
   11fdc:	bne	11ff0 <__assert_fail@plt+0xe2c>
   11fe0:	mov	r0, r4
   11fe4:	sub	sp, fp, #8
   11fe8:	pop	{r4, sl, fp, lr}
   11fec:	b	10f60 <fflush@plt>
   11ff0:	mov	r0, #1
   11ff4:	mov	r2, #0
   11ff8:	mov	r3, #0
   11ffc:	str	r0, [sp]
   12000:	mov	r0, r4
   12004:	bl	120f4 <__assert_fail@plt+0xf30>
   12008:	mov	r0, r4
   1200c:	sub	sp, fp, #8
   12010:	pop	{r4, sl, fp, lr}
   12014:	b	10f60 <fflush@plt>
   12018:	push	{r4, r5, r6, r7, fp, lr}
   1201c:	add	fp, sp, #16
   12020:	mov	r5, r1
   12024:	bl	1117c <fopen64@plt>
   12028:	mov	r4, #0
   1202c:	cmp	r0, #0
   12030:	beq	12080 <__assert_fail@plt+0xebc>
   12034:	mov	r6, r0
   12038:	bl	110f8 <fileno@plt>
   1203c:	cmp	r0, #2
   12040:	movhi	r0, r6
   12044:	pophi	{r4, r5, r6, r7, fp, pc}
   12048:	bl	14ca4 <__assert_fail@plt+0x3ae0>
   1204c:	cmn	r0, #1
   12050:	ble	120ac <__assert_fail@plt+0xee8>
   12054:	mov	r7, r0
   12058:	mov	r0, r6
   1205c:	bl	11f14 <__assert_fail@plt+0xd50>
   12060:	cmp	r0, #0
   12064:	bne	12088 <__assert_fail@plt+0xec4>
   12068:	mov	r0, r7
   1206c:	mov	r1, r5
   12070:	bl	10f18 <fdopen@plt>
   12074:	mov	r4, r0
   12078:	cmp	r0, #0
   1207c:	beq	12088 <__assert_fail@plt+0xec4>
   12080:	mov	r0, r4
   12084:	pop	{r4, r5, r6, r7, fp, pc}
   12088:	bl	110b0 <__errno_location@plt>
   1208c:	ldr	r5, [r0]
   12090:	mov	r4, r0
   12094:	mov	r0, r7
   12098:	bl	111b8 <close@plt>
   1209c:	str	r5, [r4]
   120a0:	mov	r4, #0
   120a4:	mov	r0, r4
   120a8:	pop	{r4, r5, r6, r7, fp, pc}
   120ac:	bl	110b0 <__errno_location@plt>
   120b0:	ldr	r7, [r0]
   120b4:	mov	r5, r0
   120b8:	mov	r0, r6
   120bc:	bl	11f14 <__assert_fail@plt+0xd50>
   120c0:	mov	r0, r4
   120c4:	str	r7, [r5]
   120c8:	pop	{r4, r5, r6, r7, fp, pc}
   120cc:	push	{r4, r5, r6, sl, fp, lr}
   120d0:	add	fp, sp, #16
   120d4:	mov	r4, r0
   120d8:	bl	110b0 <__errno_location@plt>
   120dc:	ldr	r6, [r0]
   120e0:	mov	r5, r0
   120e4:	mov	r0, r4
   120e8:	bl	10f78 <free@plt>
   120ec:	str	r6, [r5]
   120f0:	pop	{r4, r5, r6, sl, fp, pc}
   120f4:	push	{r4, r5, r6, r7, fp, lr}
   120f8:	add	fp, sp, #16
   120fc:	sub	sp, sp, #8
   12100:	mov	r4, r0
   12104:	ldr	r0, [r0, #4]
   12108:	mov	r5, r3
   1210c:	mov	r6, r2
   12110:	ldr	r1, [r4, #8]
   12114:	cmp	r1, r0
   12118:	bne	12134 <__assert_fail@plt+0xf70>
   1211c:	ldrd	r0, [r4, #16]
   12120:	cmp	r1, r0
   12124:	bne	12134 <__assert_fail@plt+0xf70>
   12128:	ldr	r0, [r4, #36]	; 0x24
   1212c:	cmp	r0, #0
   12130:	beq	1214c <__assert_fail@plt+0xf88>
   12134:	mov	r0, r4
   12138:	mov	r2, r6
   1213c:	mov	r3, r5
   12140:	sub	sp, fp, #16
   12144:	pop	{r4, r5, r6, r7, fp, lr}
   12148:	b	1111c <fseeko64@plt>
   1214c:	ldr	r7, [fp, #8]
   12150:	mov	r0, r4
   12154:	bl	110f8 <fileno@plt>
   12158:	mov	r2, r6
   1215c:	mov	r3, r5
   12160:	str	r7, [sp]
   12164:	bl	10ffc <lseek64@plt>
   12168:	and	r2, r0, r1
   1216c:	cmn	r2, #1
   12170:	mvneq	r0, #0
   12174:	subeq	sp, fp, #16
   12178:	popeq	{r4, r5, r6, r7, fp, pc}
   1217c:	strd	r0, [r4, #80]	; 0x50
   12180:	ldr	r0, [r4]
   12184:	bic	r0, r0, #16
   12188:	str	r0, [r4]
   1218c:	mov	r0, #0
   12190:	sub	sp, fp, #16
   12194:	pop	{r4, r5, r6, r7, fp, pc}
   12198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1219c:	add	fp, sp, #28
   121a0:	sub	sp, sp, #4
   121a4:	vpush	{d8-d9}
   121a8:	sub	sp, sp, #104	; 0x68
   121ac:	mov	r7, r3
   121b0:	mov	r6, r2
   121b4:	mov	r9, r1
   121b8:	str	r0, [sp, #44]	; 0x2c
   121bc:	bl	11164 <localeconv@plt>
   121c0:	ldr	r5, [r0]
   121c4:	mov	r4, r0
   121c8:	mov	r0, r5
   121cc:	bl	11098 <strlen@plt>
   121d0:	movw	r2, #31202	; 0x79e2
   121d4:	sub	r1, r0, #1
   121d8:	cmp	r1, #16
   121dc:	movt	r2, #1
   121e0:	movcc	r2, r5
   121e4:	ldr	r5, [r4, #4]
   121e8:	ldr	r4, [r4, #8]
   121ec:	movcs	r0, #1
   121f0:	str	r0, [sp, #16]
   121f4:	str	r2, [sp, #12]
   121f8:	mov	r0, r5
   121fc:	bl	11098 <strlen@plt>
   12200:	movw	r3, #31011	; 0x7923
   12204:	cmp	r0, #17
   12208:	movw	r0, #647	; 0x287
   1220c:	ldr	r2, [fp, #16]
   12210:	ldr	sl, [fp, #8]
   12214:	ldr	r8, [fp, #12]
   12218:	str	r6, [sp, #28]
   1221c:	str	r7, [sp, #36]	; 0x24
   12220:	str	r4, [sp, #20]
   12224:	movt	r3, #1
   12228:	add	r1, r6, r0
   1222c:	movcc	r3, r5
   12230:	ands	r0, r7, #32
   12234:	ldr	r5, [fp, #20]
   12238:	str	r1, [sp, #32]
   1223c:	str	r0, [sp, #24]
   12240:	mov	r0, #1000	; 0x3e8
   12244:	str	r3, [sp, #52]	; 0x34
   12248:	movwne	r0, #1024	; 0x400
   1224c:	str	r0, [sp, #40]	; 0x28
   12250:	and	r0, r7, #3
   12254:	str	r0, [sp, #48]	; 0x30
   12258:	subs	r0, sl, r2
   1225c:	sbcs	r0, r8, r5
   12260:	bcs	12354 <__assert_fail@plt+0x1190>
   12264:	orrs	r0, sl, r8
   12268:	mov	r4, r9
   1226c:	beq	1243c <__assert_fail@plt+0x1278>
   12270:	ldr	r5, [fp, #20]
   12274:	mov	r0, r2
   12278:	mov	r2, sl
   1227c:	mov	r3, r8
   12280:	mov	r1, r5
   12284:	bl	173ac <__assert_fail@plt+0x61e8>
   12288:	ldr	r2, [fp, #16]
   1228c:	mov	r6, r0
   12290:	mov	r3, r1
   12294:	umull	r0, r1, r0, sl
   12298:	mla	r1, r6, r8, r1
   1229c:	mla	r1, r3, sl, r1
   122a0:	subs	r0, r2, r0
   122a4:	sbc	r1, r5, r1
   122a8:	orrs	r0, r0, r1
   122ac:	bne	1243c <__assert_fail@plt+0x1278>
   122b0:	ldr	r5, [sp, #44]	; 0x2c
   122b4:	mov	r1, r4
   122b8:	mov	r2, r6
   122bc:	mov	r8, r3
   122c0:	mov	r0, r5
   122c4:	bl	173ac <__assert_fail@plt+0x61e8>
   122c8:	mov	r7, r0
   122cc:	mov	r9, r1
   122d0:	umull	r0, r1, r0, r6
   122d4:	mov	r2, #10
   122d8:	mov	r3, r8
   122dc:	mla	r1, r7, r8, r1
   122e0:	subs	r0, r5, r0
   122e4:	mla	r1, r9, r6, r1
   122e8:	umull	sl, r0, r0, r2
   122ec:	mov	r2, r6
   122f0:	sbc	r1, r4, r1
   122f4:	add	r1, r1, r1, lsl #2
   122f8:	add	r5, r0, r1, lsl #1
   122fc:	mov	r0, sl
   12300:	mov	r1, r5
   12304:	bl	173ac <__assert_fail@plt+0x61e8>
   12308:	mov	r4, r0
   1230c:	umull	r0, r2, r0, r6
   12310:	mla	r2, r4, r8, r2
   12314:	subs	r0, sl, r0
   12318:	mla	r1, r1, r6, r2
   1231c:	mov	r2, #2
   12320:	sbc	r1, r5, r1
   12324:	subs	r3, r6, r0, lsl #1
   12328:	lsl	r1, r1, #1
   1232c:	orr	r1, r1, r0, lsr #31
   12330:	sbcs	r3, r8, r1
   12334:	orr	r5, r1, r0, lsl #1
   12338:	movwcc	r2, #3
   1233c:	cmp	r5, #0
   12340:	movwne	r5, #1
   12344:	rsbs	r0, r6, r0, lsl #1
   12348:	sbcs	r0, r1, r8
   1234c:	movcs	r5, r2
   12350:	b	123cc <__assert_fail@plt+0x1208>
   12354:	mov	r0, sl
   12358:	mov	r1, r8
   1235c:	mov	r3, r5
   12360:	bl	173ac <__assert_fail@plt+0x61e8>
   12364:	ldr	r2, [fp, #16]
   12368:	mov	r6, r0
   1236c:	mov	r3, r1
   12370:	mov	r4, r9
   12374:	umull	r0, r1, r0, r2
   12378:	mla	r1, r6, r5, r1
   1237c:	subs	r0, sl, r0
   12380:	mla	r1, r3, r2, r1
   12384:	sbc	r1, r8, r1
   12388:	orrs	r0, r0, r1
   1238c:	bne	1243c <__assert_fail@plt+0x1278>
   12390:	ldr	r5, [sp, #44]	; 0x2c
   12394:	mov	r2, r6
   12398:	umull	r7, r0, r6, r5
   1239c:	mla	r0, r6, r4, r0
   123a0:	mla	r9, r3, r5, r0
   123a4:	mov	r0, r7
   123a8:	mov	r1, r9
   123ac:	bl	173ac <__assert_fail@plt+0x61e8>
   123b0:	ldr	r2, [fp, #16]
   123b4:	eor	r1, r1, r4
   123b8:	eor	r0, r0, r5
   123bc:	orrs	r0, r0, r1
   123c0:	bne	1243c <__assert_fail@plt+0x1278>
   123c4:	mov	r5, #0
   123c8:	mov	r4, #0
   123cc:	ldr	r0, [sp, #36]	; 0x24
   123d0:	ldr	r2, [sp, #40]	; 0x28
   123d4:	mvn	r6, #0
   123d8:	ands	r8, r0, #16
   123dc:	beq	123f0 <__assert_fail@plt+0x122c>
   123e0:	subs	r0, r7, r2
   123e4:	mov	r6, #0
   123e8:	sbcs	r0, r9, #0
   123ec:	bcs	12738 <__assert_fail@plt+0x1574>
   123f0:	ldr	r0, [sp, #32]
   123f4:	mov	sl, r7
   123f8:	str	r0, [sp, #44]	; 0x2c
   123fc:	ldr	r0, [sp, #48]	; 0x30
   12400:	cmp	r0, #0
   12404:	beq	12884 <__assert_fail@plt+0x16c0>
   12408:	cmp	r0, #1
   1240c:	bne	1272c <__assert_fail@plt+0x1568>
   12410:	rsbs	r1, r5, #0
   12414:	mov	r0, #0
   12418:	and	r3, sl, #1
   1241c:	ldr	r5, [sp, #44]	; 0x2c
   12420:	sbc	r0, r0, #0
   12424:	eor	r1, r3, r1
   12428:	orrs	r0, r1, r0
   1242c:	addne	r4, r4, #1
   12430:	cmp	r4, #5
   12434:	bgt	12894 <__assert_fail@plt+0x16d0>
   12438:	b	128e8 <__assert_fail@plt+0x1724>
   1243c:	ldr	r9, [fp, #20]
   12440:	mov	r0, r2
   12444:	mov	r1, r9
   12448:	bl	17338 <__assert_fail@plt+0x6174>
   1244c:	vmov	d8, r0, r1
   12450:	ldr	r0, [sp, #44]	; 0x2c
   12454:	mov	r1, r4
   12458:	bl	17338 <__assert_fail@plt+0x6174>
   1245c:	mov	r6, r0
   12460:	mov	r7, r1
   12464:	mov	r0, sl
   12468:	mov	r1, r8
   1246c:	bl	17338 <__assert_fail@plt+0x6174>
   12470:	vmov	d17, r6, r7
   12474:	ldr	r7, [sp, #36]	; 0x24
   12478:	vmov	d16, r0, r1
   1247c:	vdiv.f64	d16, d16, d8
   12480:	vmul.f64	d8, d16, d17
   12484:	tst	r7, #16
   12488:	bne	124fc <__assert_fail@plt+0x1338>
   1248c:	ldr	r0, [sp, #48]	; 0x30
   12490:	ldr	sl, [sp, #28]
   12494:	cmp	r0, #1
   12498:	beq	12684 <__assert_fail@plt+0x14c0>
   1249c:	vldr	d16, [pc, #964]	; 12868 <__assert_fail@plt+0x16a4>
   124a0:	ldr	r8, [sp, #32]
   124a4:	vcmpe.f64	d8, d16
   124a8:	vmrs	APSR_nzcv, fpscr
   124ac:	bpl	12688 <__assert_fail@plt+0x14c4>
   124b0:	mov	r6, r0
   124b4:	vmov	r0, r1, d8
   124b8:	bl	173f8 <__assert_fail@plt+0x6234>
   124bc:	mov	r4, r0
   124c0:	mov	r5, r1
   124c4:	bl	17338 <__assert_fail@plt+0x6174>
   124c8:	vmov	d16, r0, r1
   124cc:	clz	r0, r6
   124d0:	mov	r2, #0
   124d4:	vcmp.f64	d8, d16
   124d8:	lsr	r0, r0, #5
   124dc:	vmrs	APSR_nzcv, fpscr
   124e0:	movwne	r2, #1
   124e4:	and	r0, r0, r2
   124e8:	adds	r0, r0, r4
   124ec:	adc	r1, r5, #0
   124f0:	bl	17338 <__assert_fail@plt+0x6174>
   124f4:	vmov	d8, r0, r1
   124f8:	b	12688 <__assert_fail@plt+0x14c4>
   124fc:	ldr	r0, [sp, #40]	; 0x28
   12500:	vmov.f64	d16, #112	; 0x3f800000  1.0
   12504:	mov	r6, #0
   12508:	vmov	s0, r0
   1250c:	vcvt.f64.u32	d17, s0
   12510:	ldr	sl, [sp, #28]
   12514:	add	r6, r6, #1
   12518:	vmul.f64	d16, d16, d17
   1251c:	cmp	r6, #7
   12520:	vmulls.f64	d18, d16, d17
   12524:	vcmpels.f64	d18, d8
   12528:	vmrsls	APSR_nzcv, fpscr
   1252c:	bls	12514 <__assert_fail@plt+0x1350>
   12530:	ldr	r0, [sp, #48]	; 0x30
   12534:	ldr	r8, [sp, #32]
   12538:	ldr	r5, [sp, #16]
   1253c:	vdiv.f64	d8, d8, d16
   12540:	vmov.f64	d16, d8
   12544:	cmp	r0, #1
   12548:	beq	125ac <__assert_fail@plt+0x13e8>
   1254c:	vldr	d16, [pc, #788]	; 12868 <__assert_fail@plt+0x16a4>
   12550:	vcmpe.f64	d8, d16
   12554:	vmov.f64	d16, d8
   12558:	vmrs	APSR_nzcv, fpscr
   1255c:	bpl	125ac <__assert_fail@plt+0x13e8>
   12560:	vmov	r0, r1, d8
   12564:	bl	173f8 <__assert_fail@plt+0x6234>
   12568:	mov	r4, r0
   1256c:	mov	r5, r1
   12570:	bl	17338 <__assert_fail@plt+0x6174>
   12574:	vmov	d16, r0, r1
   12578:	ldr	r0, [sp, #48]	; 0x30
   1257c:	mov	r2, #0
   12580:	vcmp.f64	d8, d16
   12584:	vmrs	APSR_nzcv, fpscr
   12588:	movwne	r2, #1
   1258c:	clz	r0, r0
   12590:	lsr	r0, r0, #5
   12594:	and	r0, r0, r2
   12598:	adds	r0, r0, r4
   1259c:	adc	r1, r5, #0
   125a0:	ldr	r5, [sp, #16]
   125a4:	bl	17338 <__assert_fail@plt+0x6174>
   125a8:	vmov	d16, r0, r1
   125ac:	movw	r3, #31210	; 0x79ea
   125b0:	mov	r0, sl
   125b4:	mov	r1, #1
   125b8:	mvn	r2, #0
   125bc:	vstr	d16, [sp]
   125c0:	movt	r3, #1
   125c4:	bl	110bc <__sprintf_chk@plt>
   125c8:	ldr	r1, [sp, #24]
   125cc:	mov	r0, #3
   125d0:	cmp	r1, #0
   125d4:	movwne	r0, #2
   125d8:	add	r4, r0, r5
   125dc:	mov	r0, sl
   125e0:	bl	11098 <strlen@plt>
   125e4:	cmp	r4, r0
   125e8:	bcc	1260c <__assert_fail@plt+0x1448>
   125ec:	mov	r2, r0
   125f0:	add	r5, r5, #1
   125f4:	tst	r7, #8
   125f8:	beq	126b8 <__assert_fail@plt+0x14f4>
   125fc:	add	r0, sl, r2
   12600:	ldrb	r0, [r0, #-1]
   12604:	cmp	r0, #48	; 0x30
   12608:	bne	126b8 <__assert_fail@plt+0x14f4>
   1260c:	ldr	r0, [sp, #48]	; 0x30
   12610:	vmov.f64	d9, #36	; 0x41200000  10.0
   12614:	vmul.f64	d8, d8, d9
   12618:	cmp	r0, #1
   1261c:	beq	12678 <__assert_fail@plt+0x14b4>
   12620:	vldr	d16, [pc, #576]	; 12868 <__assert_fail@plt+0x16a4>
   12624:	vcmpe.f64	d8, d16
   12628:	vmrs	APSR_nzcv, fpscr
   1262c:	bpl	12678 <__assert_fail@plt+0x14b4>
   12630:	vmov	r0, r1, d8
   12634:	bl	173f8 <__assert_fail@plt+0x6234>
   12638:	mov	r4, r0
   1263c:	mov	r5, r1
   12640:	bl	17338 <__assert_fail@plt+0x6174>
   12644:	vmov	d16, r0, r1
   12648:	ldr	r0, [sp, #48]	; 0x30
   1264c:	mov	r2, #0
   12650:	vcmp.f64	d8, d16
   12654:	vmrs	APSR_nzcv, fpscr
   12658:	movwne	r2, #1
   1265c:	clz	r0, r0
   12660:	lsr	r0, r0, #5
   12664:	and	r0, r0, r2
   12668:	adds	r0, r0, r4
   1266c:	adc	r1, r5, #0
   12670:	bl	17338 <__assert_fail@plt+0x6174>
   12674:	vmov	d8, r0, r1
   12678:	vdiv.f64	d16, d8, d9
   1267c:	vstr	d16, [sp]
   12680:	b	12690 <__assert_fail@plt+0x14cc>
   12684:	ldr	r8, [sp, #32]
   12688:	mvn	r6, #0
   1268c:	vstr	d8, [sp]
   12690:	movw	r3, #31204	; 0x79e4
   12694:	mov	r0, sl
   12698:	mov	r1, #1
   1269c:	mvn	r2, #0
   126a0:	movt	r3, #1
   126a4:	bl	110bc <__sprintf_chk@plt>
   126a8:	mov	r0, sl
   126ac:	bl	11098 <strlen@plt>
   126b0:	mov	r2, r0
   126b4:	mov	r5, #0
   126b8:	sub	r4, r8, r2
   126bc:	mov	r1, sl
   126c0:	mov	r0, r4
   126c4:	bl	10f6c <memmove@plt>
   126c8:	sub	r5, r8, r5
   126cc:	tst	r7, #4
   126d0:	bne	1293c <__assert_fail@plt+0x1778>
   126d4:	ldr	r3, [sp, #40]	; 0x28
   126d8:	ldr	r5, [fp, #16]
   126dc:	tst	r7, #128	; 0x80
   126e0:	beq	12a58 <__assert_fail@plt+0x1894>
   126e4:	cmn	r6, #1
   126e8:	bgt	127f8 <__assert_fail@plt+0x1634>
   126ec:	subs	r0, r5, #2
   126f0:	mov	r6, #0
   126f4:	sbcs	r0, r9, #0
   126f8:	bcc	127f8 <__assert_fail@plt+0x1634>
   126fc:	mov	r0, #0
   12700:	mov	r1, #1
   12704:	mov	r6, #0
   12708:	cmp	r6, #7
   1270c:	beq	127f4 <__assert_fail@plt+0x1630>
   12710:	umull	r1, r2, r1, r3
   12714:	add	r6, r6, #1
   12718:	mla	r0, r0, r3, r2
   1271c:	subs	r2, r1, r5
   12720:	sbcs	r2, r0, r9
   12724:	bcc	12708 <__assert_fail@plt+0x1544>
   12728:	b	127f8 <__assert_fail@plt+0x1634>
   1272c:	ldr	r8, [sp, #32]
   12730:	ldr	r5, [sp, #44]	; 0x2c
   12734:	b	128ec <__assert_fail@plt+0x1728>
   12738:	mov	r6, #0
   1273c:	mov	r0, r7
   12740:	mov	r1, r9
   12744:	mov	r3, #0
   12748:	bl	173ac <__assert_fail@plt+0x61e8>
   1274c:	ldr	r2, [sp, #40]	; 0x28
   12750:	mov	sl, r0
   12754:	mov	r9, r1
   12758:	mls	r0, r0, r2, r7
   1275c:	add	r0, r0, r0, lsl #2
   12760:	add	r0, r4, r0, lsl #1
   12764:	udiv	r4, r0, r2
   12768:	mls	r0, r4, r2, r0
   1276c:	lsl	r0, r0, #1
   12770:	add	r0, r0, r5, lsr #1
   12774:	cmp	r0, r2
   12778:	bcs	1279c <__assert_fail@plt+0x15d8>
   1277c:	add	r1, r0, r5
   12780:	cmn	r0, r5
   12784:	movwne	r1, #1
   12788:	mov	r5, r1
   1278c:	add	r6, r6, #1
   12790:	cmp	r6, #7
   12794:	bls	127b8 <__assert_fail@plt+0x15f4>
   12798:	b	127c8 <__assert_fail@plt+0x1604>
   1279c:	add	r0, r0, r5
   127a0:	mov	r5, #2
   127a4:	cmp	r2, r0
   127a8:	movwcc	r5, #3
   127ac:	add	r6, r6, #1
   127b0:	cmp	r6, #7
   127b4:	bhi	127c8 <__assert_fail@plt+0x1604>
   127b8:	subs	r0, sl, r2
   127bc:	mov	r7, sl
   127c0:	sbcs	r0, r9, #0
   127c4:	bcs	1273c <__assert_fail@plt+0x1578>
   127c8:	rsbs	r0, sl, #9
   127cc:	rscs	r0, r9, #0
   127d0:	bcc	12870 <__assert_fail@plt+0x16ac>
   127d4:	ldr	r0, [sp, #48]	; 0x30
   127d8:	cmp	r0, #1
   127dc:	bne	12a74 <__assert_fail@plt+0x18b0>
   127e0:	and	r0, r4, #1
   127e4:	add	r0, r5, r0
   127e8:	cmp	r0, #2
   127ec:	bhi	12a84 <__assert_fail@plt+0x18c0>
   127f0:	b	12ab8 <__assert_fail@plt+0x18f4>
   127f4:	mov	r6, #8
   127f8:	and	r0, r7, #256	; 0x100
   127fc:	tst	r7, #64	; 0x40
   12800:	orrsne	r1, r6, r0
   12804:	movne	r1, #32
   12808:	addne	r8, sl, #648	; 0x288
   1280c:	strbne	r1, [sl, #647]	; 0x287
   12810:	cmp	r6, #0
   12814:	beq	1283c <__assert_fail@plt+0x1678>
   12818:	ldr	r1, [sp, #24]
   1281c:	cmp	r1, #0
   12820:	moveq	r1, #107	; 0x6b
   12824:	cmpeq	r6, #1
   12828:	beq	12838 <__assert_fail@plt+0x1674>
   1282c:	movw	r1, #31292	; 0x7a3c
   12830:	movt	r1, #1
   12834:	ldrb	r1, [r1, r6]
   12838:	strb	r1, [r8], #1
   1283c:	cmp	r0, #0
   12840:	beq	12a58 <__assert_fail@plt+0x1894>
   12844:	ldr	r0, [sp, #24]
   12848:	cmp	r0, #0
   1284c:	cmpne	r6, #0
   12850:	movne	r0, #105	; 0x69
   12854:	strbne	r0, [r8], #1
   12858:	mov	r0, #66	; 0x42
   1285c:	strb	r0, [r8], #1
   12860:	b	12a58 <__assert_fail@plt+0x1894>
   12864:	nop	{0}
   12868:	andeq	r0, r0, r0
   1286c:	mvnsmi	r0, #0
   12870:	ldr	r0, [sp, #32]
   12874:	str	r0, [sp, #44]	; 0x2c
   12878:	ldr	r0, [sp, #48]	; 0x30
   1287c:	cmp	r0, #0
   12880:	bne	12408 <__assert_fail@plt+0x1244>
   12884:	add	r0, r4, r5
   12888:	ldr	r5, [sp, #44]	; 0x2c
   1288c:	cmp	r0, #1
   12890:	blt	128e8 <__assert_fail@plt+0x1724>
   12894:	adds	sl, sl, #1
   12898:	adc	r9, r9, #0
   1289c:	cmp	r6, #7
   128a0:	bgt	128e8 <__assert_fail@plt+0x1724>
   128a4:	cmp	r8, #0
   128a8:	beq	128e8 <__assert_fail@plt+0x1724>
   128ac:	eor	r0, sl, r2
   128b0:	orrs	r0, r0, r9
   128b4:	ldreq	r0, [sp, #36]	; 0x24
   128b8:	addeq	r6, r6, #1
   128bc:	moveq	r9, #0
   128c0:	moveq	sl, #1
   128c4:	tsteq	r0, #8
   128c8:	bne	128e8 <__assert_fail@plt+0x1724>
   128cc:	ldr	r2, [sp, #16]
   128d0:	mov	r0, #48	; 0x30
   128d4:	ldr	r1, [sp, #12]
   128d8:	strb	r0, [r5, #-1]!
   128dc:	sub	r5, r5, r2
   128e0:	mov	r0, r5
   128e4:	bl	10f90 <memcpy@plt>
   128e8:	ldr	r8, [sp, #32]
   128ec:	mov	r4, r5
   128f0:	mov	r0, sl
   128f4:	mov	r1, r9
   128f8:	mov	r2, #10
   128fc:	mov	r3, #0
   12900:	bl	173ac <__assert_fail@plt+0x61e8>
   12904:	add	r2, r0, r0, lsl #2
   12908:	sub	r2, sl, r2, lsl #1
   1290c:	orr	r2, r2, #48	; 0x30
   12910:	strb	r2, [r4, #-1]!
   12914:	rsbs	r2, sl, #9
   12918:	mov	sl, r0
   1291c:	rscs	r2, r9, #0
   12920:	mov	r9, r1
   12924:	bcc	128f0 <__assert_fail@plt+0x172c>
   12928:	ldr	r7, [sp, #36]	; 0x24
   1292c:	ldr	r9, [fp, #20]
   12930:	ldr	sl, [sp, #28]
   12934:	tst	r7, #4
   12938:	beq	126d4 <__assert_fail@plt+0x1510>
   1293c:	ldr	r0, [sp, #52]	; 0x34
   12940:	mov	r7, r5
   12944:	str	r6, [sp, #16]
   12948:	sub	r5, r5, r4
   1294c:	bl	11098 <strlen@plt>
   12950:	add	r8, sp, #56	; 0x38
   12954:	str	r0, [sp, #48]	; 0x30
   12958:	mov	r1, r4
   1295c:	mov	r2, r5
   12960:	mov	r0, r8
   12964:	bl	10f90 <memcpy@plt>
   12968:	ldr	r0, [sp, #20]
   1296c:	ldrb	r6, [r0]
   12970:	cmp	r6, #255	; 0xff
   12974:	mov	r9, r6
   12978:	moveq	r9, r5
   1297c:	cmp	r6, #0
   12980:	mvneq	r9, #0
   12984:	cmp	r9, r5
   12988:	movhi	r9, r5
   1298c:	sub	r4, r7, r9
   12990:	sub	r7, r5, r9
   12994:	mov	r2, r9
   12998:	add	r1, r8, r7
   1299c:	mov	r0, r4
   129a0:	bl	10f90 <memcpy@plt>
   129a4:	cmp	r7, #0
   129a8:	beq	12a34 <__assert_fail@plt+0x1870>
   129ac:	clz	r0, r6
   129b0:	ldr	r8, [sp, #20]
   129b4:	lsr	sl, r0, #5
   129b8:	ldr	r0, [sp, #48]	; 0x30
   129bc:	rsb	r0, r0, #0
   129c0:	str	r0, [sp, #44]	; 0x2c
   129c4:	ldr	r0, [sp, #44]	; 0x2c
   129c8:	ldr	r1, [sp, #52]	; 0x34
   129cc:	ldr	r2, [sp, #48]	; 0x30
   129d0:	add	r4, r4, r0
   129d4:	mov	r0, r4
   129d8:	bl	10f90 <memcpy@plt>
   129dc:	tst	sl, #1
   129e0:	add	r0, sp, #56	; 0x38
   129e4:	addeq	r8, r8, #1
   129e8:	ldrb	r6, [r8]
   129ec:	cmp	r6, #255	; 0xff
   129f0:	mov	r5, r6
   129f4:	moveq	r5, r7
   129f8:	cmp	r6, #0
   129fc:	moveq	r5, r9
   12a00:	cmp	r7, r5
   12a04:	movcc	r5, r7
   12a08:	sub	r7, r7, r5
   12a0c:	sub	r4, r4, r5
   12a10:	mov	r2, r5
   12a14:	add	r1, r0, r7
   12a18:	mov	r0, r4
   12a1c:	bl	10f90 <memcpy@plt>
   12a20:	clz	r0, r6
   12a24:	cmp	r7, #0
   12a28:	mov	r9, r5
   12a2c:	lsr	sl, r0, #5
   12a30:	bne	129c4 <__assert_fail@plt+0x1800>
   12a34:	ldr	r8, [sp, #32]
   12a38:	ldr	sl, [sp, #28]
   12a3c:	ldr	r7, [sp, #36]	; 0x24
   12a40:	ldr	r3, [sp, #40]	; 0x28
   12a44:	ldr	r9, [fp, #20]
   12a48:	ldr	r5, [fp, #16]
   12a4c:	ldr	r6, [sp, #16]
   12a50:	tst	r7, #128	; 0x80
   12a54:	bne	126e4 <__assert_fail@plt+0x1520>
   12a58:	mov	r0, #0
   12a5c:	strb	r0, [r8]
   12a60:	mov	r0, r4
   12a64:	sub	sp, fp, #48	; 0x30
   12a68:	vpop	{d8-d9}
   12a6c:	add	sp, sp, #4
   12a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a74:	cmp	r0, #0
   12a78:	bne	12ab8 <__assert_fail@plt+0x18f4>
   12a7c:	cmp	r5, #0
   12a80:	beq	12ab8 <__assert_fail@plt+0x18f4>
   12a84:	adds	r0, sl, #1
   12a88:	add	r4, r4, #1
   12a8c:	mov	r5, #0
   12a90:	adc	r1, r9, #0
   12a94:	cmp	r4, #10
   12a98:	bne	12ab8 <__assert_fail@plt+0x18f4>
   12a9c:	rsbs	r3, r0, #9
   12aa0:	mov	r4, #0
   12aa4:	mov	sl, r0
   12aa8:	mov	r9, r1
   12aac:	mov	r5, #0
   12ab0:	rscs	r3, r1, #0
   12ab4:	bcc	12b24 <__assert_fail@plt+0x1960>
   12ab8:	ldr	r0, [sp, #36]	; 0x24
   12abc:	tst	r0, #8
   12ac0:	beq	12ae8 <__assert_fail@plt+0x1924>
   12ac4:	cmp	r4, #0
   12ac8:	bne	12ae8 <__assert_fail@plt+0x1924>
   12acc:	ldr	r0, [sp, #32]
   12ad0:	str	r0, [sp, #44]	; 0x2c
   12ad4:	mov	r4, #0
   12ad8:	ldr	r0, [sp, #48]	; 0x30
   12adc:	cmp	r0, #0
   12ae0:	bne	12408 <__assert_fail@plt+0x1244>
   12ae4:	b	12884 <__assert_fail@plt+0x16c0>
   12ae8:	ldr	r1, [sp, #28]
   12aec:	ldr	r2, [sp, #16]
   12af0:	add	r0, r4, #48	; 0x30
   12af4:	strb	r0, [r1, #646]!	; 0x286
   12af8:	sub	r0, r1, r2
   12afc:	ldr	r1, [sp, #12]
   12b00:	str	r0, [sp, #44]	; 0x2c
   12b04:	bl	10f90 <memcpy@plt>
   12b08:	ldr	r2, [sp, #40]	; 0x28
   12b0c:	mov	r5, #0
   12b10:	mov	r4, #0
   12b14:	ldr	r0, [sp, #48]	; 0x30
   12b18:	cmp	r0, #0
   12b1c:	bne	12408 <__assert_fail@plt+0x1244>
   12b20:	b	12884 <__assert_fail@plt+0x16c0>
   12b24:	ldr	r0, [sp, #32]
   12b28:	mov	r5, #0
   12b2c:	mov	sl, #10
   12b30:	mov	r9, #0
   12b34:	str	r0, [sp, #44]	; 0x2c
   12b38:	ldr	r0, [sp, #48]	; 0x30
   12b3c:	cmp	r0, #0
   12b40:	bne	12408 <__assert_fail@plt+0x1244>
   12b44:	b	12884 <__assert_fail@plt+0x16c0>
   12b48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b4c:	add	fp, sp, #24
   12b50:	sub	sp, sp, #8
   12b54:	mov	r4, r2
   12b58:	mov	r8, r1
   12b5c:	cmp	r0, #0
   12b60:	bne	12b8c <__assert_fail@plt+0x19c8>
   12b64:	movw	r0, #31216	; 0x79f0
   12b68:	movt	r0, #1
   12b6c:	bl	11038 <getenv@plt>
   12b70:	cmp	r0, #0
   12b74:	bne	12b8c <__assert_fail@plt+0x19c8>
   12b78:	movw	r0, #31227	; 0x79fb
   12b7c:	movt	r0, #1
   12b80:	bl	11038 <getenv@plt>
   12b84:	cmp	r0, #0
   12b88:	beq	12cb8 <__assert_fail@plt+0x1af4>
   12b8c:	mov	r6, r0
   12b90:	movw	r7, #31316	; 0x7a54
   12b94:	movw	r1, #31304	; 0x7a48
   12b98:	mov	r3, #4
   12b9c:	ldrb	r5, [r6], #1
   12ba0:	movt	r7, #1
   12ba4:	movt	r1, #1
   12ba8:	mov	r2, r7
   12bac:	cmp	r5, #39	; 0x27
   12bb0:	movne	r6, r0
   12bb4:	mov	r0, r6
   12bb8:	bl	166a8 <__assert_fail@plt+0x54e4>
   12bbc:	sub	r1, r5, #39	; 0x27
   12bc0:	cmp	r0, #0
   12bc4:	clz	r1, r1
   12bc8:	lsr	r1, r1, #5
   12bcc:	lsl	r5, r1, #2
   12bd0:	blt	12c08 <__assert_fail@plt+0x1a44>
   12bd4:	ldr	r0, [r7, r0, lsl #2]
   12bd8:	mov	r2, #1
   12bdc:	mov	r1, #0
   12be0:	str	r2, [r4]
   12be4:	str	r1, [r4, #4]
   12be8:	orr	r1, r0, r5
   12bec:	mov	r0, #0
   12bf0:	str	r1, [r8]
   12bf4:	ldrd	r2, [r4]
   12bf8:	orrs	r1, r2, r3
   12bfc:	beq	12c44 <__assert_fail@plt+0x1a80>
   12c00:	sub	sp, fp, #24
   12c04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c08:	movw	r0, #31237	; 0x7a05
   12c0c:	add	r1, sp, #4
   12c10:	mov	r2, #0
   12c14:	mov	r3, r4
   12c18:	mov	r7, #0
   12c1c:	movt	r0, #1
   12c20:	str	r0, [sp]
   12c24:	mov	r0, r6
   12c28:	bl	15914 <__assert_fail@plt+0x4750>
   12c2c:	cmp	r0, #0
   12c30:	beq	12c74 <__assert_fail@plt+0x1ab0>
   12c34:	str	r7, [r8]
   12c38:	ldrd	r2, [r4]
   12c3c:	orrs	r1, r2, r3
   12c40:	bne	12c00 <__assert_fail@plt+0x1a3c>
   12c44:	movw	r0, #31273	; 0x7a29
   12c48:	movt	r0, #1
   12c4c:	bl	11038 <getenv@plt>
   12c50:	cmp	r0, #0
   12c54:	mov	r2, #512	; 0x200
   12c58:	mov	r0, #4
   12c5c:	mov	r1, #0
   12c60:	movweq	r2, #1024	; 0x400
   12c64:	str	r2, [r4]
   12c68:	str	r1, [r4, #4]
   12c6c:	sub	sp, fp, #24
   12c70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c74:	ldrb	r0, [r6]
   12c78:	sub	r0, r0, #48	; 0x30
   12c7c:	uxtb	r0, r0
   12c80:	cmp	r0, #10
   12c84:	bcc	12cb0 <__assert_fail@plt+0x1aec>
   12c88:	ldr	r0, [sp, #4]
   12c8c:	cmp	r0, r6
   12c90:	beq	12ce0 <__assert_fail@plt+0x1b1c>
   12c94:	ldrb	r2, [r6, #1]
   12c98:	add	r1, r6, #1
   12c9c:	mov	r6, r1
   12ca0:	sub	r2, r2, #48	; 0x30
   12ca4:	uxtb	r2, r2
   12ca8:	cmp	r2, #10
   12cac:	bcs	12c8c <__assert_fail@plt+0x1ac8>
   12cb0:	mov	r1, r5
   12cb4:	b	12bec <__assert_fail@plt+0x1a28>
   12cb8:	movw	r0, #31273	; 0x7a29
   12cbc:	movt	r0, #1
   12cc0:	bl	11038 <getenv@plt>
   12cc4:	mov	r2, #512	; 0x200
   12cc8:	cmp	r0, #0
   12ccc:	mov	r1, #0
   12cd0:	movweq	r2, #1024	; 0x400
   12cd4:	str	r2, [r4]
   12cd8:	str	r1, [r4, #4]
   12cdc:	b	12bec <__assert_fail@plt+0x1a28>
   12ce0:	ldrb	r2, [r0, #-1]
   12ce4:	orr	r1, r5, #384	; 0x180
   12ce8:	cmp	r2, #66	; 0x42
   12cec:	mov	r2, r1
   12cf0:	orrne	r2, r5, #128	; 0x80
   12cf4:	bne	12d08 <__assert_fail@plt+0x1b44>
   12cf8:	ldrb	r0, [r0, #-2]
   12cfc:	cmp	r0, #105	; 0x69
   12d00:	orreq	r1, r2, #32
   12d04:	b	12bec <__assert_fail@plt+0x1a28>
   12d08:	orr	r1, r2, #32
   12d0c:	b	12bec <__assert_fail@plt+0x1a28>
   12d10:	push	{r4, r5, fp, lr}
   12d14:	add	fp, sp, #8
   12d18:	cmp	r0, #0
   12d1c:	beq	12db0 <__assert_fail@plt+0x1bec>
   12d20:	mov	r1, #47	; 0x2f
   12d24:	mov	r4, r0
   12d28:	bl	1114c <strrchr@plt>
   12d2c:	cmp	r0, #0
   12d30:	mov	r5, r4
   12d34:	addne	r5, r0, #1
   12d38:	sub	r0, r5, r4
   12d3c:	cmp	r0, #7
   12d40:	blt	12d94 <__assert_fail@plt+0x1bd0>
   12d44:	movw	r1, #31380	; 0x7a94
   12d48:	sub	r0, r5, #7
   12d4c:	mov	r2, #7
   12d50:	movt	r1, #1
   12d54:	bl	111a0 <strncmp@plt>
   12d58:	cmp	r0, #0
   12d5c:	bne	12d94 <__assert_fail@plt+0x1bd0>
   12d60:	movw	r1, #31388	; 0x7a9c
   12d64:	mov	r0, r5
   12d68:	mov	r2, #3
   12d6c:	movt	r1, #1
   12d70:	bl	111a0 <strncmp@plt>
   12d74:	cmp	r0, #0
   12d78:	beq	12d84 <__assert_fail@plt+0x1bc0>
   12d7c:	mov	r4, r5
   12d80:	b	12d94 <__assert_fail@plt+0x1bd0>
   12d84:	movw	r0, #37200	; 0x9150
   12d88:	add	r4, r5, #3
   12d8c:	movt	r0, #2
   12d90:	str	r4, [r0]
   12d94:	movw	r0, #37204	; 0x9154
   12d98:	movt	r0, #2
   12d9c:	str	r4, [r0]
   12da0:	movw	r0, #37248	; 0x9180
   12da4:	movt	r0, #2
   12da8:	str	r4, [r0]
   12dac:	pop	{r4, r5, fp, pc}
   12db0:	movw	r0, #37216	; 0x9160
   12db4:	mov	r1, #55	; 0x37
   12db8:	mov	r2, #1
   12dbc:	movt	r0, #2
   12dc0:	ldr	r3, [r0]
   12dc4:	movw	r0, #31324	; 0x7a5c
   12dc8:	movt	r0, #1
   12dcc:	bl	10ff0 <fwrite@plt>
   12dd0:	bl	111ac <abort@plt>
   12dd4:	push	{r4, r5, r6, sl, fp, lr}
   12dd8:	add	fp, sp, #16
   12ddc:	mov	r4, r0
   12de0:	movw	r0, #37256	; 0x9188
   12de4:	movt	r0, #2
   12de8:	cmp	r4, #0
   12dec:	moveq	r4, r0
   12df0:	bl	110b0 <__errno_location@plt>
   12df4:	ldr	r6, [r0]
   12df8:	mov	r5, r0
   12dfc:	mov	r0, r4
   12e00:	mov	r1, #48	; 0x30
   12e04:	bl	157d0 <__assert_fail@plt+0x460c>
   12e08:	str	r6, [r5]
   12e0c:	pop	{r4, r5, r6, sl, fp, pc}
   12e10:	movw	r1, #37256	; 0x9188
   12e14:	cmp	r0, #0
   12e18:	movt	r1, #2
   12e1c:	movne	r1, r0
   12e20:	ldr	r0, [r1]
   12e24:	bx	lr
   12e28:	movw	r2, #37256	; 0x9188
   12e2c:	cmp	r0, #0
   12e30:	movt	r2, #2
   12e34:	movne	r2, r0
   12e38:	str	r1, [r2]
   12e3c:	bx	lr
   12e40:	movw	r3, #37256	; 0x9188
   12e44:	cmp	r0, #0
   12e48:	movt	r3, #2
   12e4c:	movne	r3, r0
   12e50:	ubfx	r0, r1, #5, #3
   12e54:	and	r1, r1, #31
   12e58:	add	r0, r3, r0, lsl #2
   12e5c:	ldr	r3, [r0, #8]
   12e60:	eor	r2, r2, r3, lsr r1
   12e64:	and	r2, r2, #1
   12e68:	eor	r2, r3, r2, lsl r1
   12e6c:	str	r2, [r0, #8]
   12e70:	mov	r0, #1
   12e74:	and	r0, r0, r3, lsr r1
   12e78:	bx	lr
   12e7c:	movw	r2, #37256	; 0x9188
   12e80:	cmp	r0, #0
   12e84:	movt	r2, #2
   12e88:	movne	r2, r0
   12e8c:	ldr	r0, [r2, #4]
   12e90:	str	r1, [r2, #4]
   12e94:	bx	lr
   12e98:	movw	r3, #37256	; 0x9188
   12e9c:	cmp	r0, #0
   12ea0:	movt	r3, #2
   12ea4:	movne	r3, r0
   12ea8:	cmp	r1, #0
   12eac:	mov	r0, #10
   12eb0:	cmpne	r2, #0
   12eb4:	str	r0, [r3]
   12eb8:	bne	12ec8 <__assert_fail@plt+0x1d04>
   12ebc:	push	{fp, lr}
   12ec0:	mov	fp, sp
   12ec4:	bl	111ac <abort@plt>
   12ec8:	str	r1, [r3, #40]	; 0x28
   12ecc:	str	r2, [r3, #44]	; 0x2c
   12ed0:	bx	lr
   12ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ed8:	add	fp, sp, #28
   12edc:	sub	sp, sp, #20
   12ee0:	mov	r7, r0
   12ee4:	ldr	r0, [fp, #8]
   12ee8:	movw	r5, #37256	; 0x9188
   12eec:	mov	r8, r3
   12ef0:	mov	r9, r2
   12ef4:	mov	sl, r1
   12ef8:	movt	r5, #2
   12efc:	cmp	r0, #0
   12f00:	movne	r5, r0
   12f04:	bl	110b0 <__errno_location@plt>
   12f08:	mov	r4, r0
   12f0c:	ldm	r5, {r0, r1}
   12f10:	ldr	r2, [r5, #40]	; 0x28
   12f14:	ldr	r3, [r5, #44]	; 0x2c
   12f18:	add	r5, r5, #8
   12f1c:	ldr	r6, [r4]
   12f20:	stm	sp, {r0, r1, r5}
   12f24:	str	r2, [sp, #12]
   12f28:	str	r3, [sp, #16]
   12f2c:	mov	r0, r7
   12f30:	mov	r1, sl
   12f34:	mov	r2, r9
   12f38:	mov	r3, r8
   12f3c:	bl	12f4c <__assert_fail@plt+0x1d88>
   12f40:	str	r6, [r4]
   12f44:	sub	sp, fp, #28
   12f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f50:	add	fp, sp, #28
   12f54:	sub	sp, sp, #156	; 0x9c
   12f58:	str	r0, [sp, #76]	; 0x4c
   12f5c:	ldr	r0, [fp, #12]
   12f60:	mov	r6, r1
   12f64:	str	r3, [sp, #84]	; 0x54
   12f68:	str	r2, [fp, #-84]	; 0xffffffac
   12f6c:	and	r1, r0, #4
   12f70:	str	r1, [sp, #24]
   12f74:	and	r1, r0, #1
   12f78:	str	r1, [sp, #28]
   12f7c:	ubfx	r8, r0, #1, #1
   12f80:	bl	11008 <__ctype_get_mb_cur_max@plt>
   12f84:	str	r0, [sp, #32]
   12f88:	ldr	r0, [fp, #24]
   12f8c:	ldr	r7, [fp, #8]
   12f90:	mov	r1, #0
   12f94:	mov	r2, #0
   12f98:	mov	r4, #1
   12f9c:	str	r1, [sp, #52]	; 0x34
   12fa0:	str	r0, [sp, #72]	; 0x48
   12fa4:	ldr	r0, [fp, #20]
   12fa8:	str	r0, [sp, #68]	; 0x44
   12fac:	mov	r0, #0
   12fb0:	str	r0, [sp, #48]	; 0x30
   12fb4:	mov	r0, #0
   12fb8:	str	r0, [sp, #92]	; 0x5c
   12fbc:	mov	r0, #0
   12fc0:	str	r0, [fp, #-76]	; 0xffffffb4
   12fc4:	mov	r0, #0
   12fc8:	cmp	r7, #10
   12fcc:	bhi	142b4 <__assert_fail@plt+0x30f0>
   12fd0:	add	r1, pc, #28
   12fd4:	mov	sl, r6
   12fd8:	ldr	r6, [sp, #76]	; 0x4c
   12fdc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fe0:	ldr	lr, [sp, #84]	; 0x54
   12fe4:	mov	r9, #0
   12fe8:	mov	r3, #1
   12fec:	mov	r5, #0
   12ff0:	ldr	pc, [r1, r7, lsl #2]
   12ff4:	andeq	r3, r1, r4, asr #1
   12ff8:	andeq	r3, r1, r0, lsl #2
   12ffc:	ldrdeq	r3, [r1], -r4
   13000:	strheq	r3, [r1], -ip
   13004:	strdeq	r3, [r1], -r4
   13008:	andeq	r3, r1, r8, lsr #2
   1300c:	andeq	r3, r1, r4, ror #1
   13010:	andeq	r3, r1, r4, lsr r3
   13014:	andeq	r3, r1, r0, lsr #32
   13018:	andeq	r3, r1, r0, lsr #32
   1301c:	andeq	r3, r1, r8, asr #5
   13020:	mov	r9, r4
   13024:	movw	r4, #31470	; 0x7aee
   13028:	mov	r5, r8
   1302c:	mov	r8, r2
   13030:	mov	r0, #0
   13034:	mov	r2, #5
   13038:	movt	r4, #1
   1303c:	mov	r1, r4
   13040:	bl	10fc0 <dcgettext@plt>
   13044:	cmp	r0, r4
   13048:	str	r0, [sp, #68]	; 0x44
   1304c:	bne	131dc <__assert_fail@plt+0x2018>
   13050:	bl	16e10 <__assert_fail@plt+0x5c4c>
   13054:	ldrb	r1, [r0]
   13058:	and	r1, r1, #223	; 0xdf
   1305c:	cmp	r1, #71	; 0x47
   13060:	beq	131a8 <__assert_fail@plt+0x1fe4>
   13064:	cmp	r1, #85	; 0x55
   13068:	bne	131c0 <__assert_fail@plt+0x1ffc>
   1306c:	ldrb	r1, [r0, #1]
   13070:	and	r1, r1, #223	; 0xdf
   13074:	cmp	r1, #84	; 0x54
   13078:	bne	131c0 <__assert_fail@plt+0x1ffc>
   1307c:	ldrb	r1, [r0, #2]
   13080:	and	r1, r1, #223	; 0xdf
   13084:	cmp	r1, #70	; 0x46
   13088:	bne	131c0 <__assert_fail@plt+0x1ffc>
   1308c:	ldrb	r1, [r0, #3]
   13090:	cmp	r1, #45	; 0x2d
   13094:	ldrbeq	r1, [r0, #4]
   13098:	cmpeq	r1, #56	; 0x38
   1309c:	bne	131c0 <__assert_fail@plt+0x1ffc>
   130a0:	ldrb	r0, [r0, #5]
   130a4:	cmp	r0, #0
   130a8:	movw	r0, #31474	; 0x7af2
   130ac:	movt	r0, #1
   130b0:	str	r0, [sp, #68]	; 0x44
   130b4:	bne	131c0 <__assert_fail@plt+0x1ffc>
   130b8:	b	131dc <__assert_fail@plt+0x2018>
   130bc:	mov	r0, #1
   130c0:	b	13100 <__assert_fail@plt+0x1f3c>
   130c4:	mov	r7, #0
   130c8:	mov	r9, #0
   130cc:	mov	r3, r0
   130d0:	b	131a0 <__assert_fail@plt+0x1fdc>
   130d4:	tst	r8, #1
   130d8:	bne	13100 <__assert_fail@plt+0x1f3c>
   130dc:	mov	r3, r0
   130e0:	b	13158 <__assert_fail@plt+0x1f94>
   130e4:	mov	r0, #1
   130e8:	mov	r9, #0
   130ec:	mov	r7, #5
   130f0:	b	1313c <__assert_fail@plt+0x1f78>
   130f4:	mov	r3, #1
   130f8:	tst	r8, #1
   130fc:	beq	13158 <__assert_fail@plt+0x1f94>
   13100:	mov	r1, #1
   13104:	mov	r9, #0
   13108:	mov	r7, #2
   1310c:	mov	r3, r0
   13110:	mov	r5, #1
   13114:	str	r1, [fp, #-76]	; 0xffffffb4
   13118:	movw	r1, #31472	; 0x7af0
   1311c:	movt	r1, #1
   13120:	str	r1, [sp, #92]	; 0x5c
   13124:	b	13334 <__assert_fail@plt+0x2170>
   13128:	mov	r7, #5
   1312c:	tst	r8, #1
   13130:	beq	13178 <__assert_fail@plt+0x1fb4>
   13134:	mov	r0, #1
   13138:	mov	r9, #0
   1313c:	str	r0, [fp, #-76]	; 0xffffffb4
   13140:	movw	r0, #31468	; 0x7aec
   13144:	mov	r3, #1
   13148:	mov	r5, #1
   1314c:	movt	r0, #1
   13150:	str	r0, [sp, #92]	; 0x5c
   13154:	b	13334 <__assert_fail@plt+0x2170>
   13158:	cmp	sl, #0
   1315c:	mov	r9, #1
   13160:	mov	r7, #2
   13164:	movne	r0, #39	; 0x27
   13168:	strbne	r0, [r6]
   1316c:	movw	r0, #31472	; 0x7af0
   13170:	movt	r0, #1
   13174:	b	13194 <__assert_fail@plt+0x1fd0>
   13178:	cmp	sl, #0
   1317c:	mov	r9, #1
   13180:	mov	r3, #1
   13184:	movne	r0, #34	; 0x22
   13188:	strbne	r0, [r6]
   1318c:	movw	r0, #31468	; 0x7aec
   13190:	movt	r0, #1
   13194:	str	r0, [sp, #92]	; 0x5c
   13198:	mov	r0, #1
   1319c:	str	r0, [fp, #-76]	; 0xffffffb4
   131a0:	mov	r5, #0
   131a4:	b	13334 <__assert_fail@plt+0x2170>
   131a8:	ldrb	r1, [r0, #1]
   131ac:	and	r1, r1, #223	; 0xdf
   131b0:	cmp	r1, #66	; 0x42
   131b4:	ldrbeq	r1, [r0, #2]
   131b8:	cmpeq	r1, #49	; 0x31
   131bc:	beq	140dc <__assert_fail@plt+0x2f18>
   131c0:	movw	r0, #31472	; 0x7af0
   131c4:	movw	r1, #31468	; 0x7aec
   131c8:	cmp	r7, #9
   131cc:	movt	r0, #1
   131d0:	movt	r1, #1
   131d4:	moveq	r0, r1
   131d8:	str	r0, [sp, #68]	; 0x44
   131dc:	movw	r4, #31472	; 0x7af0
   131e0:	mov	r0, #0
   131e4:	mov	r2, #5
   131e8:	movt	r4, #1
   131ec:	mov	r1, r4
   131f0:	bl	10fc0 <dcgettext@plt>
   131f4:	cmp	r0, r4
   131f8:	str	r0, [sp, #72]	; 0x48
   131fc:	beq	1320c <__assert_fail@plt+0x2048>
   13200:	mov	r4, r9
   13204:	mov	r2, r8
   13208:	b	132c4 <__assert_fail@plt+0x2100>
   1320c:	bl	16e10 <__assert_fail@plt+0x5c4c>
   13210:	ldrb	r1, [r0]
   13214:	mov	r4, r9
   13218:	and	r1, r1, #223	; 0xdf
   1321c:	cmp	r1, #71	; 0x47
   13220:	beq	1327c <__assert_fail@plt+0x20b8>
   13224:	cmp	r1, #85	; 0x55
   13228:	mov	r2, r8
   1322c:	bne	132a4 <__assert_fail@plt+0x20e0>
   13230:	ldrb	r1, [r0, #1]
   13234:	and	r1, r1, #223	; 0xdf
   13238:	cmp	r1, #84	; 0x54
   1323c:	bne	132a4 <__assert_fail@plt+0x20e0>
   13240:	ldrb	r1, [r0, #2]
   13244:	and	r1, r1, #223	; 0xdf
   13248:	cmp	r1, #70	; 0x46
   1324c:	ldrbeq	r1, [r0, #3]
   13250:	cmpeq	r1, #45	; 0x2d
   13254:	bne	132a4 <__assert_fail@plt+0x20e0>
   13258:	ldrb	r1, [r0, #4]
   1325c:	cmp	r1, #56	; 0x38
   13260:	ldrbeq	r0, [r0, #5]
   13264:	cmpeq	r0, #0
   13268:	bne	132a4 <__assert_fail@plt+0x20e0>
   1326c:	movw	r0, #31478	; 0x7af6
   13270:	movt	r0, #1
   13274:	str	r0, [sp, #72]	; 0x48
   13278:	b	132c4 <__assert_fail@plt+0x2100>
   1327c:	ldrb	r1, [r0, #1]
   13280:	mov	r2, r8
   13284:	and	r1, r1, #223	; 0xdf
   13288:	cmp	r1, #66	; 0x42
   1328c:	bne	132a4 <__assert_fail@plt+0x20e0>
   13290:	ldrb	r1, [r0, #2]
   13294:	cmp	r1, #49	; 0x31
   13298:	ldrbeq	r1, [r0, #3]
   1329c:	cmpeq	r1, #56	; 0x38
   132a0:	beq	14120 <__assert_fail@plt+0x2f5c>
   132a4:	movw	r0, #31472	; 0x7af0
   132a8:	cmp	r7, #9
   132ac:	movt	r0, #1
   132b0:	mov	r1, r0
   132b4:	movw	r0, #31468	; 0x7aec
   132b8:	movt	r0, #1
   132bc:	moveq	r1, r0
   132c0:	str	r1, [sp, #72]	; 0x48
   132c4:	mov	r8, r5
   132c8:	mov	r9, #0
   132cc:	tst	r8, #1
   132d0:	mov	r5, r8
   132d4:	str	r2, [fp, #-48]	; 0xffffffd0
   132d8:	bne	13310 <__assert_fail@plt+0x214c>
   132dc:	ldr	r0, [sp, #68]	; 0x44
   132e0:	ldrb	r0, [r0]
   132e4:	cmp	r0, #0
   132e8:	beq	13310 <__assert_fail@plt+0x214c>
   132ec:	ldr	r1, [sp, #68]	; 0x44
   132f0:	mov	r9, #0
   132f4:	add	r1, r1, #1
   132f8:	cmp	r9, sl
   132fc:	strbcc	r0, [r6, r9]
   13300:	ldrb	r0, [r1, r9]
   13304:	add	r9, r9, #1
   13308:	cmp	r0, #0
   1330c:	bne	132f8 <__assert_fail@plt+0x2134>
   13310:	ldr	r8, [sp, #72]	; 0x48
   13314:	mov	r0, r8
   13318:	bl	11098 <strlen@plt>
   1331c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13320:	ldr	lr, [sp, #84]	; 0x54
   13324:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13328:	str	r0, [fp, #-76]	; 0xffffffb4
   1332c:	str	r8, [sp, #92]	; 0x5c
   13330:	mov	r3, #1
   13334:	ldr	r0, [fp, #16]
   13338:	str	r7, [fp, #-64]	; 0xffffffc0
   1333c:	str	r5, [fp, #-72]	; 0xffffffb8
   13340:	str	r3, [sp, #80]	; 0x50
   13344:	cmp	r0, #0
   13348:	movwne	r0, #1
   1334c:	and	r0, r0, r5
   13350:	str	r0, [fp, #-88]	; 0xffffffa8
   13354:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13358:	cmp	r0, #0
   1335c:	movwne	r0, #1
   13360:	subs	r7, r7, #2
   13364:	and	r1, r0, r5
   13368:	str	r7, [fp, #-80]	; 0xffffffb0
   1336c:	and	r1, r3, r1
   13370:	str	r1, [sp, #40]	; 0x28
   13374:	clz	r1, r7
   13378:	lsr	r1, r1, #5
   1337c:	and	r1, r1, r5
   13380:	eor	r5, r5, #1
   13384:	str	r1, [sp, #36]	; 0x24
   13388:	mov	r1, r7
   1338c:	str	r5, [sp, #88]	; 0x58
   13390:	mov	r7, #0
   13394:	movwne	r1, #1
   13398:	orr	r5, r1, r5
   1339c:	and	r1, r1, r3
   133a0:	and	r0, r0, r1
   133a4:	str	r5, [sp, #60]	; 0x3c
   133a8:	str	r1, [fp, #-68]	; 0xffffffbc
   133ac:	str	r0, [fp, #-60]	; 0xffffffc4
   133b0:	eor	r0, r3, #1
   133b4:	str	r0, [sp, #44]	; 0x2c
   133b8:	cmn	lr, #1
   133bc:	beq	133cc <__assert_fail@plt+0x2208>
   133c0:	cmp	r7, lr
   133c4:	bne	133d8 <__assert_fail@plt+0x2214>
   133c8:	b	14050 <__assert_fail@plt+0x2e8c>
   133cc:	ldrb	r0, [ip, r7]
   133d0:	cmp	r0, #0
   133d4:	beq	14058 <__assert_fail@plt+0x2e94>
   133d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   133dc:	mov	r8, #0
   133e0:	str	r4, [fp, #-52]	; 0xffffffcc
   133e4:	str	r2, [fp, #-48]	; 0xffffffd0
   133e8:	cmp	r0, #0
   133ec:	beq	13420 <__assert_fail@plt+0x225c>
   133f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133f4:	add	r4, r7, r0
   133f8:	cmp	r0, #2
   133fc:	bcc	13418 <__assert_fail@plt+0x2254>
   13400:	cmn	lr, #1
   13404:	bne	13418 <__assert_fail@plt+0x2254>
   13408:	mov	r0, ip
   1340c:	bl	11098 <strlen@plt>
   13410:	ldr	ip, [fp, #-84]	; 0xffffffac
   13414:	mov	lr, r0
   13418:	cmp	r4, lr
   1341c:	bls	13438 <__assert_fail@plt+0x2274>
   13420:	mov	r0, #0
   13424:	str	r0, [fp, #-56]	; 0xffffffc8
   13428:	ldrb	r5, [ip, r7]
   1342c:	cmp	r5, #126	; 0x7e
   13430:	bls	13488 <__assert_fail@plt+0x22c4>
   13434:	b	13890 <__assert_fail@plt+0x26cc>
   13438:	ldr	r1, [sp, #92]	; 0x5c
   1343c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13440:	add	r0, ip, r7
   13444:	mov	r4, lr
   13448:	bl	10fb4 <memcmp@plt>
   1344c:	ldr	r2, [sp, #88]	; 0x58
   13450:	cmp	r0, #0
   13454:	mov	r1, r0
   13458:	movwne	r1, #1
   1345c:	orr	r1, r1, r2
   13460:	tst	r1, #1
   13464:	beq	14164 <__assert_fail@plt+0x2fa0>
   13468:	ldr	ip, [fp, #-84]	; 0xffffffac
   1346c:	clz	r0, r0
   13470:	mov	lr, r4
   13474:	lsr	r0, r0, #5
   13478:	str	r0, [fp, #-56]	; 0xffffffc8
   1347c:	ldrb	r5, [ip, r7]
   13480:	cmp	r5, #126	; 0x7e
   13484:	bhi	13890 <__assert_fail@plt+0x26cc>
   13488:	add	r3, pc, #16
   1348c:	mov	r4, #1
   13490:	mov	r2, #110	; 0x6e
   13494:	mov	r0, #97	; 0x61
   13498:	mov	r1, #0
   1349c:	ldr	pc, [r3, r5, lsl #2]
   134a0:	andeq	r3, r1, r0, ror r7
   134a4:	muleq	r1, r0, r8
   134a8:	muleq	r1, r0, r8
   134ac:	muleq	r1, r0, r8
   134b0:	muleq	r1, r0, r8
   134b4:	muleq	r1, r0, r8
   134b8:	muleq	r1, r0, r8
   134bc:	andeq	r3, r1, ip, ror #18
   134c0:	andeq	r3, r1, r0, asr r7
   134c4:	andeq	r3, r1, r8, lsr r7
   134c8:	andeq	r3, r1, ip, asr r7
   134cc:	andeq	r3, r1, ip, ror #15
   134d0:	andeq	r3, r1, r0, lsr r7
   134d4:	andeq	r3, r1, r8, asr r7
   134d8:	muleq	r1, r0, r8
   134dc:	muleq	r1, r0, r8
   134e0:	muleq	r1, r0, r8
   134e4:	muleq	r1, r0, r8
   134e8:	muleq	r1, r0, r8
   134ec:	muleq	r1, r0, r8
   134f0:	muleq	r1, r0, r8
   134f4:	muleq	r1, r0, r8
   134f8:	muleq	r1, r0, r8
   134fc:	muleq	r1, r0, r8
   13500:	muleq	r1, r0, r8
   13504:	muleq	r1, r0, r8
   13508:	muleq	r1, r0, r8
   1350c:	muleq	r1, r0, r8
   13510:	muleq	r1, r0, r8
   13514:	muleq	r1, r0, r8
   13518:	muleq	r1, r0, r8
   1351c:	muleq	r1, r0, r8
   13520:	andeq	r3, r1, r8, ror #17
   13524:	andeq	r3, r1, ip, ror #17
   13528:	andeq	r3, r1, ip, ror #17
   1352c:			; <UNDEFINED> instruction: 0x000136bc
   13530:	andeq	r3, r1, ip, ror #17
   13534:	muleq	r1, ip, r6
   13538:	andeq	r3, r1, ip, ror #17
   1353c:	strdeq	r3, [r1], -r4
   13540:	andeq	r3, r1, ip, ror #17
   13544:	andeq	r3, r1, ip, ror #17
   13548:	andeq	r3, r1, ip, ror #17
   1354c:	muleq	r1, ip, r6
   13550:	muleq	r1, ip, r6
   13554:	muleq	r1, ip, r6
   13558:	muleq	r1, ip, r6
   1355c:	muleq	r1, ip, r6
   13560:	muleq	r1, ip, r6
   13564:	muleq	r1, ip, r6
   13568:	muleq	r1, ip, r6
   1356c:	muleq	r1, ip, r6
   13570:	muleq	r1, ip, r6
   13574:	muleq	r1, ip, r6
   13578:	muleq	r1, ip, r6
   1357c:	muleq	r1, ip, r6
   13580:	muleq	r1, ip, r6
   13584:	muleq	r1, ip, r6
   13588:	muleq	r1, ip, r6
   1358c:	andeq	r3, r1, ip, ror #17
   13590:	andeq	r3, r1, ip, ror #17
   13594:	andeq	r3, r1, ip, ror #17
   13598:	andeq	r3, r1, ip, ror #17
   1359c:			; <UNDEFINED> instruction: 0x000137b0
   135a0:	muleq	r1, r0, r8
   135a4:	muleq	r1, ip, r6
   135a8:	muleq	r1, ip, r6
   135ac:	muleq	r1, ip, r6
   135b0:	muleq	r1, ip, r6
   135b4:	muleq	r1, ip, r6
   135b8:	muleq	r1, ip, r6
   135bc:	muleq	r1, ip, r6
   135c0:	muleq	r1, ip, r6
   135c4:	muleq	r1, ip, r6
   135c8:	muleq	r1, ip, r6
   135cc:	muleq	r1, ip, r6
   135d0:	muleq	r1, ip, r6
   135d4:	muleq	r1, ip, r6
   135d8:	muleq	r1, ip, r6
   135dc:	muleq	r1, ip, r6
   135e0:	muleq	r1, ip, r6
   135e4:	muleq	r1, ip, r6
   135e8:	muleq	r1, ip, r6
   135ec:	muleq	r1, ip, r6
   135f0:	muleq	r1, ip, r6
   135f4:	muleq	r1, ip, r6
   135f8:	muleq	r1, ip, r6
   135fc:	muleq	r1, ip, r6
   13600:	muleq	r1, ip, r6
   13604:	muleq	r1, ip, r6
   13608:	muleq	r1, ip, r6
   1360c:	andeq	r3, r1, ip, ror #17
   13610:	strdeq	r3, [r1], -ip
   13614:	muleq	r1, ip, r6
   13618:	andeq	r3, r1, ip, ror #17
   1361c:	muleq	r1, ip, r6
   13620:	andeq	r3, r1, ip, ror #17
   13624:	muleq	r1, ip, r6
   13628:	muleq	r1, ip, r6
   1362c:	muleq	r1, ip, r6
   13630:	muleq	r1, ip, r6
   13634:	muleq	r1, ip, r6
   13638:	muleq	r1, ip, r6
   1363c:	muleq	r1, ip, r6
   13640:	muleq	r1, ip, r6
   13644:	muleq	r1, ip, r6
   13648:	muleq	r1, ip, r6
   1364c:	muleq	r1, ip, r6
   13650:	muleq	r1, ip, r6
   13654:	muleq	r1, ip, r6
   13658:	muleq	r1, ip, r6
   1365c:	muleq	r1, ip, r6
   13660:	muleq	r1, ip, r6
   13664:	muleq	r1, ip, r6
   13668:	muleq	r1, ip, r6
   1366c:	muleq	r1, ip, r6
   13670:	muleq	r1, ip, r6
   13674:	muleq	r1, ip, r6
   13678:	muleq	r1, ip, r6
   1367c:	muleq	r1, ip, r6
   13680:	muleq	r1, ip, r6
   13684:	muleq	r1, ip, r6
   13688:	muleq	r1, ip, r6
   1368c:	ldrdeq	r3, [r1], -ip
   13690:	andeq	r3, r1, ip, ror #17
   13694:	ldrdeq	r3, [r1], -ip
   13698:			; <UNDEFINED> instruction: 0x000136bc
   1369c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136a0:	cmp	r0, #0
   136a4:	beq	13980 <__assert_fail@plt+0x27bc>
   136a8:	ldr	r0, [fp, #16]
   136ac:	cmp	r0, #0
   136b0:	mov	r0, r5
   136b4:	bne	13990 <__assert_fail@plt+0x27cc>
   136b8:	b	139b0 <__assert_fail@plt+0x27ec>
   136bc:	mov	r4, #0
   136c0:	cmp	r7, #0
   136c4:	beq	138e8 <__assert_fail@plt+0x2724>
   136c8:	mov	r8, #0
   136cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136d0:	cmp	r0, #0
   136d4:	bne	136a8 <__assert_fail@plt+0x24e4>
   136d8:	b	13980 <__assert_fail@plt+0x27bc>
   136dc:	mov	r4, #0
   136e0:	cmn	lr, #1
   136e4:	beq	138c0 <__assert_fail@plt+0x26fc>
   136e8:	cmp	r7, #0
   136ec:	bne	136c8 <__assert_fail@plt+0x2504>
   136f0:	cmp	lr, #1
   136f4:	beq	138e8 <__assert_fail@plt+0x2724>
   136f8:	b	136c8 <__assert_fail@plt+0x2504>
   136fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13700:	cmp	r0, #2
   13704:	bne	13918 <__assert_fail@plt+0x2754>
   13708:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1370c:	tst	r0, #1
   13710:	bne	14178 <__assert_fail@plt+0x2fb4>
   13714:	mov	r8, #0
   13718:	mov	r0, #92	; 0x5c
   1371c:	mov	r4, #0
   13720:	cmp	r8, #0
   13724:	beq	13938 <__assert_fail@plt+0x2774>
   13728:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1372c:	b	13a2c <__assert_fail@plt+0x2868>
   13730:	mov	r0, #102	; 0x66
   13734:	b	1396c <__assert_fail@plt+0x27a8>
   13738:	mov	r2, #116	; 0x74
   1373c:	ldr	r0, [sp, #60]	; 0x3c
   13740:	tst	r0, #1
   13744:	mov	r0, r2
   13748:	bne	1396c <__assert_fail@plt+0x27a8>
   1374c:	b	14178 <__assert_fail@plt+0x2fb4>
   13750:	mov	r0, #98	; 0x62
   13754:	b	1396c <__assert_fail@plt+0x27a8>
   13758:	mov	r2, #114	; 0x72
   1375c:	ldr	r0, [sp, #60]	; 0x3c
   13760:	tst	r0, #1
   13764:	mov	r0, r2
   13768:	bne	1396c <__assert_fail@plt+0x27a8>
   1376c:	b	14178 <__assert_fail@plt+0x2fb4>
   13770:	ldr	r0, [sp, #80]	; 0x50
   13774:	tst	r0, #1
   13778:	beq	13a54 <__assert_fail@plt+0x2890>
   1377c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13780:	tst	r0, #1
   13784:	bne	142a0 <__assert_fail@plt+0x30dc>
   13788:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1378c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13790:	cmp	r0, #2
   13794:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13798:	movwne	r0, #1
   1379c:	orr	r0, r0, r2
   137a0:	tst	r0, #1
   137a4:	beq	13d4c <__assert_fail@plt+0x2b88>
   137a8:	mov	r0, r9
   137ac:	b	13d80 <__assert_fail@plt+0x2bbc>
   137b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   137b4:	mov	r8, #0
   137b8:	mov	r5, #63	; 0x3f
   137bc:	cmp	r0, #5
   137c0:	beq	13c08 <__assert_fail@plt+0x2a44>
   137c4:	cmp	r0, #2
   137c8:	bne	13cb8 <__assert_fail@plt+0x2af4>
   137cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137d0:	tst	r0, #1
   137d4:	bne	14178 <__assert_fail@plt+0x2fb4>
   137d8:	mov	r4, #0
   137dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   137e0:	cmp	r0, #0
   137e4:	bne	136a8 <__assert_fail@plt+0x24e4>
   137e8:	b	13980 <__assert_fail@plt+0x27bc>
   137ec:	mov	r0, #118	; 0x76
   137f0:	b	1396c <__assert_fail@plt+0x27a8>
   137f4:	mov	r0, #1
   137f8:	mov	r5, #39	; 0x27
   137fc:	str	r0, [sp, #52]	; 0x34
   13800:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13804:	cmp	r0, #2
   13808:	bne	1387c <__assert_fail@plt+0x26b8>
   1380c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13810:	tst	r0, #1
   13814:	bne	14178 <__assert_fail@plt+0x2fb4>
   13818:	ldr	r2, [sp, #48]	; 0x30
   1381c:	clz	r1, sl
   13820:	mov	r8, #0
   13824:	lsr	r1, r1, #5
   13828:	cmp	r2, #0
   1382c:	mov	r0, r2
   13830:	movwne	r0, #1
   13834:	orrs	r0, r0, r1
   13838:	moveq	r2, sl
   1383c:	moveq	sl, r0
   13840:	cmp	r9, sl
   13844:	str	r2, [sp, #48]	; 0x30
   13848:	movcc	r0, #39	; 0x27
   1384c:	strbcc	r0, [r6, r9]
   13850:	add	r0, r9, #1
   13854:	cmp	r0, sl
   13858:	movcc	r1, #92	; 0x5c
   1385c:	strbcc	r1, [r6, r0]
   13860:	add	r0, r9, #2
   13864:	add	r9, r9, #3
   13868:	cmp	r0, sl
   1386c:	movcc	r1, #39	; 0x27
   13870:	strbcc	r1, [r6, r0]
   13874:	mov	r0, #0
   13878:	str	r0, [fp, #-48]	; 0xffffffd0
   1387c:	mov	r4, #1
   13880:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13884:	cmp	r0, #0
   13888:	bne	136a8 <__assert_fail@plt+0x24e4>
   1388c:	b	13980 <__assert_fail@plt+0x27bc>
   13890:	ldr	r0, [sp, #32]
   13894:	cmp	r0, #1
   13898:	bne	13a84 <__assert_fail@plt+0x28c0>
   1389c:	str	lr, [sp, #84]	; 0x54
   138a0:	bl	11080 <__ctype_b_loc@plt>
   138a4:	ldr	r0, [r0]
   138a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   138ac:	mov	r1, #1
   138b0:	add	r0, r0, r5, lsl #1
   138b4:	ldrb	r0, [r0, #1]
   138b8:	ubfx	r4, r0, #6, #1
   138bc:	b	13e7c <__assert_fail@plt+0x2cb8>
   138c0:	cmp	r7, #0
   138c4:	ldrbeq	r0, [ip, #1]
   138c8:	cmpeq	r0, #0
   138cc:	beq	138e8 <__assert_fail@plt+0x2724>
   138d0:	mvn	lr, #0
   138d4:	mov	r8, #0
   138d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   138dc:	cmp	r0, #0
   138e0:	bne	136a8 <__assert_fail@plt+0x24e4>
   138e4:	b	13980 <__assert_fail@plt+0x27bc>
   138e8:	mov	r1, #1
   138ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   138f0:	cmp	r0, #2
   138f4:	bne	13904 <__assert_fail@plt+0x2740>
   138f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   138fc:	tst	r0, #1
   13900:	bne	14178 <__assert_fail@plt+0x2fb4>
   13904:	mov	r4, r1
   13908:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1390c:	cmp	r0, #0
   13910:	bne	136a8 <__assert_fail@plt+0x24e4>
   13914:	b	13980 <__assert_fail@plt+0x27bc>
   13918:	ldr	r1, [sp, #40]	; 0x28
   1391c:	mov	r8, #0
   13920:	mov	r0, #92	; 0x5c
   13924:	cmp	r1, #0
   13928:	beq	1396c <__assert_fail@plt+0x27a8>
   1392c:	mov	r4, #0
   13930:	cmp	r8, #0
   13934:	bne	13728 <__assert_fail@plt+0x2564>
   13938:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1393c:	tst	r2, #1
   13940:	beq	13a2c <__assert_fail@plt+0x2868>
   13944:	cmp	r9, sl
   13948:	movcc	r1, #39	; 0x27
   1394c:	strbcc	r1, [r6, r9]
   13950:	add	r1, r9, #1
   13954:	add	r9, r9, #2
   13958:	cmp	r1, sl
   1395c:	movcc	r2, #39	; 0x27
   13960:	strbcc	r2, [r6, r1]
   13964:	mov	r2, #0
   13968:	b	13a2c <__assert_fail@plt+0x2868>
   1396c:	ldr	r1, [sp, #80]	; 0x50
   13970:	mov	r4, #0
   13974:	mov	r8, #0
   13978:	tst	r1, #1
   1397c:	bne	139bc <__assert_fail@plt+0x27f8>
   13980:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13984:	cmp	r0, #0
   13988:	mov	r0, r5
   1398c:	beq	139b0 <__assert_fail@plt+0x27ec>
   13990:	ldr	r1, [fp, #16]
   13994:	ubfx	r0, r5, #5, #3
   13998:	mov	r2, #1
   1399c:	ldr	r0, [r1, r0, lsl #2]
   139a0:	and	r1, r5, #31
   139a4:	tst	r0, r2, lsl r1
   139a8:	mov	r0, r5
   139ac:	bne	139bc <__assert_fail@plt+0x27f8>
   139b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   139b4:	cmp	r1, #0
   139b8:	beq	13e14 <__assert_fail@plt+0x2c50>
   139bc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   139c0:	tst	r1, #1
   139c4:	bne	14158 <__assert_fail@plt+0x2f94>
   139c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   139cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   139d0:	cmp	r1, #2
   139d4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   139d8:	movwne	r1, #1
   139dc:	orr	r1, r1, r2
   139e0:	tst	r1, #1
   139e4:	bne	13a1c <__assert_fail@plt+0x2858>
   139e8:	cmp	r9, sl
   139ec:	movcc	r1, #39	; 0x27
   139f0:	strbcc	r1, [r6, r9]
   139f4:	add	r1, r9, #1
   139f8:	cmp	r1, sl
   139fc:	movcc	r2, #36	; 0x24
   13a00:	strbcc	r2, [r6, r1]
   13a04:	add	r1, r9, #2
   13a08:	add	r9, r9, #3
   13a0c:	cmp	r1, sl
   13a10:	movcc	r2, #39	; 0x27
   13a14:	strbcc	r2, [r6, r1]
   13a18:	mov	r2, #1
   13a1c:	cmp	r9, sl
   13a20:	movcc	r1, #92	; 0x5c
   13a24:	strbcc	r1, [r6, r9]
   13a28:	add	r9, r9, #1
   13a2c:	cmp	r9, sl
   13a30:	add	r7, r7, #1
   13a34:	strbcc	r0, [r6, r9]
   13a38:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13a3c:	add	r9, r9, #1
   13a40:	and	r0, r0, r4
   13a44:	mov	r4, r0
   13a48:	cmn	lr, #1
   13a4c:	bne	133c0 <__assert_fail@plt+0x21fc>
   13a50:	b	133cc <__assert_fail@plt+0x2208>
   13a54:	ldr	r0, [sp, #28]
   13a58:	mov	r4, #0
   13a5c:	mov	r8, #0
   13a60:	mov	r5, #0
   13a64:	cmp	r0, #0
   13a68:	beq	13980 <__assert_fail@plt+0x27bc>
   13a6c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   13a70:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13a74:	add	r7, r7, #1
   13a78:	cmn	lr, #1
   13a7c:	bne	133c0 <__assert_fail@plt+0x21fc>
   13a80:	b	133cc <__assert_fail@plt+0x2208>
   13a84:	mov	r0, #0
   13a88:	cmn	lr, #1
   13a8c:	str	r0, [fp, #-36]	; 0xffffffdc
   13a90:	str	r0, [fp, #-40]	; 0xffffffd8
   13a94:	bne	13aa8 <__assert_fail@plt+0x28e4>
   13a98:	mov	r0, ip
   13a9c:	bl	11098 <strlen@plt>
   13aa0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13aa4:	mov	lr, r0
   13aa8:	ldr	r0, [sp, #36]	; 0x24
   13aac:	str	sl, [sp, #56]	; 0x38
   13ab0:	str	lr, [sp, #84]	; 0x54
   13ab4:	cmp	r0, #0
   13ab8:	beq	13cd0 <__assert_fail@plt+0x2b0c>
   13abc:	add	r0, ip, r7
   13ac0:	mov	r4, #1
   13ac4:	mov	r6, #0
   13ac8:	sub	sl, fp, #40	; 0x28
   13acc:	str	r0, [sp, #20]
   13ad0:	str	r6, [sp, #64]	; 0x40
   13ad4:	add	r6, r6, r7
   13ad8:	sub	r0, fp, #44	; 0x2c
   13adc:	mov	r3, sl
   13ae0:	add	r1, ip, r6
   13ae4:	sub	r2, lr, r6
   13ae8:	bl	16e48 <__assert_fail@plt+0x5c84>
   13aec:	cmn	r0, #2
   13af0:	beq	13e2c <__assert_fail@plt+0x2c68>
   13af4:	ldr	sl, [sp, #56]	; 0x38
   13af8:	cmn	r0, #1
   13afc:	beq	13e20 <__assert_fail@plt+0x2c5c>
   13b00:	cmp	r0, #0
   13b04:	beq	13e24 <__assert_fail@plt+0x2c60>
   13b08:	cmp	r0, #2
   13b0c:	bcc	13bcc <__assert_fail@plt+0x2a08>
   13b10:	ldr	r1, [sp, #64]	; 0x40
   13b14:	ldr	r2, [sp, #20]
   13b18:	add	r1, r2, r1
   13b1c:	mov	r2, #1
   13b20:	ldrb	r3, [r1, r2]
   13b24:	sub	r3, r3, #91	; 0x5b
   13b28:	cmp	r3, #33	; 0x21
   13b2c:	bhi	13bc0 <__assert_fail@plt+0x29fc>
   13b30:	add	r6, pc, #0
   13b34:	ldr	pc, [r6, r3, lsl #2]
   13b38:	andeq	r4, r1, r4, lsl #3
   13b3c:	andeq	r4, r1, r4, lsl #3
   13b40:	andeq	r3, r1, r0, asr #23
   13b44:	andeq	r4, r1, r4, lsl #3
   13b48:	andeq	r3, r1, r0, asr #23
   13b4c:	andeq	r4, r1, r4, lsl #3
   13b50:	andeq	r3, r1, r0, asr #23
   13b54:	andeq	r3, r1, r0, asr #23
   13b58:	andeq	r3, r1, r0, asr #23
   13b5c:	andeq	r3, r1, r0, asr #23
   13b60:	andeq	r3, r1, r0, asr #23
   13b64:	andeq	r3, r1, r0, asr #23
   13b68:	andeq	r3, r1, r0, asr #23
   13b6c:	andeq	r3, r1, r0, asr #23
   13b70:	andeq	r3, r1, r0, asr #23
   13b74:	andeq	r3, r1, r0, asr #23
   13b78:	andeq	r3, r1, r0, asr #23
   13b7c:	andeq	r3, r1, r0, asr #23
   13b80:	andeq	r3, r1, r0, asr #23
   13b84:	andeq	r3, r1, r0, asr #23
   13b88:	andeq	r3, r1, r0, asr #23
   13b8c:	andeq	r3, r1, r0, asr #23
   13b90:	andeq	r3, r1, r0, asr #23
   13b94:	andeq	r3, r1, r0, asr #23
   13b98:	andeq	r3, r1, r0, asr #23
   13b9c:	andeq	r3, r1, r0, asr #23
   13ba0:	andeq	r3, r1, r0, asr #23
   13ba4:	andeq	r3, r1, r0, asr #23
   13ba8:	andeq	r3, r1, r0, asr #23
   13bac:	andeq	r3, r1, r0, asr #23
   13bb0:	andeq	r3, r1, r0, asr #23
   13bb4:	andeq	r3, r1, r0, asr #23
   13bb8:	andeq	r3, r1, r0, asr #23
   13bbc:	andeq	r4, r1, r4, lsl #3
   13bc0:	add	r2, r2, #1
   13bc4:	cmp	r2, r0
   13bc8:	bcc	13b20 <__assert_fail@plt+0x295c>
   13bcc:	ldr	r6, [sp, #64]	; 0x40
   13bd0:	add	r6, r0, r6
   13bd4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13bd8:	bl	10fe4 <iswprint@plt>
   13bdc:	cmp	r0, #0
   13be0:	sub	sl, fp, #40	; 0x28
   13be4:	movwne	r0, #1
   13be8:	and	r4, r4, r0
   13bec:	mov	r0, sl
   13bf0:	bl	10fa8 <mbsinit@plt>
   13bf4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13bf8:	ldr	lr, [sp, #84]	; 0x54
   13bfc:	cmp	r0, #0
   13c00:	beq	13ad0 <__assert_fail@plt+0x290c>
   13c04:	b	13e70 <__assert_fail@plt+0x2cac>
   13c08:	ldr	r0, [sp, #24]
   13c0c:	cmp	r0, #0
   13c10:	beq	13cb8 <__assert_fail@plt+0x2af4>
   13c14:	add	r0, r7, #2
   13c18:	cmp	r0, lr
   13c1c:	bcs	13cb8 <__assert_fail@plt+0x2af4>
   13c20:	add	r1, ip, r7
   13c24:	ldrb	r1, [r1, #1]
   13c28:	cmp	r1, #63	; 0x3f
   13c2c:	bne	13cb8 <__assert_fail@plt+0x2af4>
   13c30:	ldrb	r5, [ip, r0]
   13c34:	sub	r1, r5, #33	; 0x21
   13c38:	cmp	r1, #29
   13c3c:	bhi	13cb8 <__assert_fail@plt+0x2af4>
   13c40:	movw	r3, #20929	; 0x51c1
   13c44:	mov	r2, #1
   13c48:	movt	r3, #14336	; 0x3800
   13c4c:	tst	r3, r2, lsl r1
   13c50:	beq	13cb8 <__assert_fail@plt+0x2af4>
   13c54:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13c58:	tst	r1, #1
   13c5c:	bne	142a8 <__assert_fail@plt+0x30e4>
   13c60:	cmp	r9, sl
   13c64:	mov	r7, r0
   13c68:	mov	r4, #0
   13c6c:	movcc	r1, #63	; 0x3f
   13c70:	strbcc	r1, [r6, r9]
   13c74:	add	r1, r9, #1
   13c78:	cmp	r1, sl
   13c7c:	movcc	r2, #34	; 0x22
   13c80:	strbcc	r2, [r6, r1]
   13c84:	add	r1, r9, #2
   13c88:	cmp	r1, sl
   13c8c:	movcc	r2, #34	; 0x22
   13c90:	strbcc	r2, [r6, r1]
   13c94:	add	r1, r9, #3
   13c98:	add	r9, r9, #4
   13c9c:	cmp	r1, sl
   13ca0:	movcc	r2, #63	; 0x3f
   13ca4:	strbcc	r2, [r6, r1]
   13ca8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13cac:	cmp	r0, #0
   13cb0:	bne	136a8 <__assert_fail@plt+0x24e4>
   13cb4:	b	13980 <__assert_fail@plt+0x27bc>
   13cb8:	mov	r5, #63	; 0x3f
   13cbc:	mov	r4, #0
   13cc0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13cc4:	cmp	r0, #0
   13cc8:	bne	136a8 <__assert_fail@plt+0x24e4>
   13ccc:	b	13980 <__assert_fail@plt+0x27bc>
   13cd0:	mov	r4, #1
   13cd4:	mov	r6, #0
   13cd8:	sub	sl, fp, #40	; 0x28
   13cdc:	str	r6, [sp, #64]	; 0x40
   13ce0:	add	r6, r6, r7
   13ce4:	sub	r0, fp, #44	; 0x2c
   13ce8:	mov	r3, sl
   13cec:	add	r1, ip, r6
   13cf0:	sub	r2, lr, r6
   13cf4:	bl	16e48 <__assert_fail@plt+0x5c84>
   13cf8:	cmn	r0, #2
   13cfc:	beq	13e2c <__assert_fail@plt+0x2c68>
   13d00:	cmn	r0, #1
   13d04:	beq	13e20 <__assert_fail@plt+0x2c5c>
   13d08:	ldr	r6, [sp, #64]	; 0x40
   13d0c:	cmp	r0, #0
   13d10:	beq	13e6c <__assert_fail@plt+0x2ca8>
   13d14:	add	r6, r0, r6
   13d18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13d1c:	bl	10fe4 <iswprint@plt>
   13d20:	cmp	r0, #0
   13d24:	sub	sl, fp, #40	; 0x28
   13d28:	movwne	r0, #1
   13d2c:	and	r4, r4, r0
   13d30:	mov	r0, sl
   13d34:	bl	10fa8 <mbsinit@plt>
   13d38:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d3c:	ldr	lr, [sp, #84]	; 0x54
   13d40:	cmp	r0, #0
   13d44:	beq	13cdc <__assert_fail@plt+0x2b18>
   13d48:	b	13e70 <__assert_fail@plt+0x2cac>
   13d4c:	cmp	r9, sl
   13d50:	mov	r2, #1
   13d54:	movcc	r0, #39	; 0x27
   13d58:	strbcc	r0, [r6, r9]
   13d5c:	add	r0, r9, #1
   13d60:	cmp	r0, sl
   13d64:	movcc	r1, #36	; 0x24
   13d68:	strbcc	r1, [r6, r0]
   13d6c:	add	r0, r9, #2
   13d70:	cmp	r0, sl
   13d74:	movcc	r1, #39	; 0x27
   13d78:	strbcc	r1, [r6, r0]
   13d7c:	add	r0, r9, #3
   13d80:	cmp	r0, sl
   13d84:	add	r9, r0, #1
   13d88:	str	r2, [fp, #-48]	; 0xffffffd0
   13d8c:	movcc	r1, #92	; 0x5c
   13d90:	strbcc	r1, [r6, r0]
   13d94:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13d98:	cmp	r1, #2
   13d9c:	beq	13dfc <__assert_fail@plt+0x2c38>
   13da0:	add	r1, r7, #1
   13da4:	mov	r4, #0
   13da8:	mov	r8, #1
   13dac:	mov	r5, #48	; 0x30
   13db0:	cmp	r1, lr
   13db4:	bcs	1369c <__assert_fail@plt+0x24d8>
   13db8:	ldrb	r1, [ip, r1]
   13dbc:	sub	r1, r1, #48	; 0x30
   13dc0:	uxtb	r1, r1
   13dc4:	cmp	r1, #9
   13dc8:	bhi	1369c <__assert_fail@plt+0x24d8>
   13dcc:	cmp	r9, sl
   13dd0:	movcc	r1, #48	; 0x30
   13dd4:	strbcc	r1, [r6, r9]
   13dd8:	add	r1, r0, #2
   13ddc:	add	r9, r0, #3
   13de0:	cmp	r1, sl
   13de4:	movcc	r2, #48	; 0x30
   13de8:	strbcc	r2, [r6, r1]
   13dec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13df0:	cmp	r0, #0
   13df4:	bne	136a8 <__assert_fail@plt+0x24e4>
   13df8:	b	13980 <__assert_fail@plt+0x27bc>
   13dfc:	mov	r0, #48	; 0x30
   13e00:	mov	r8, #1
   13e04:	mov	r4, #0
   13e08:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13e0c:	cmp	r1, #0
   13e10:	bne	139bc <__assert_fail@plt+0x27f8>
   13e14:	cmp	r8, #0
   13e18:	beq	13938 <__assert_fail@plt+0x2774>
   13e1c:	b	13728 <__assert_fail@plt+0x2564>
   13e20:	mov	r4, #0
   13e24:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e28:	b	13e64 <__assert_fail@plt+0x2ca0>
   13e2c:	ldr	r1, [sp, #84]	; 0x54
   13e30:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e34:	mov	r4, #0
   13e38:	cmp	r6, r1
   13e3c:	bcs	13e64 <__assert_fail@plt+0x2ca0>
   13e40:	ldrb	r0, [ip, r6]
   13e44:	cmp	r0, #0
   13e48:	beq	13e64 <__assert_fail@plt+0x2ca0>
   13e4c:	ldr	r0, [sp, #64]	; 0x40
   13e50:	add	r0, r0, #1
   13e54:	add	r6, r0, r7
   13e58:	str	r0, [sp, #64]	; 0x40
   13e5c:	cmp	r6, r1
   13e60:	bcc	13e40 <__assert_fail@plt+0x2c7c>
   13e64:	ldr	r6, [sp, #64]	; 0x40
   13e68:	b	13e70 <__assert_fail@plt+0x2cac>
   13e6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e70:	mov	r1, r6
   13e74:	ldr	r6, [sp, #76]	; 0x4c
   13e78:	ldr	sl, [sp, #56]	; 0x38
   13e7c:	ldr	r0, [sp, #44]	; 0x2c
   13e80:	cmp	r1, #1
   13e84:	orr	r2, r4, r0
   13e88:	mov	r0, r1
   13e8c:	bhi	13eac <__assert_fail@plt+0x2ce8>
   13e90:	tst	r2, #1
   13e94:	beq	13eac <__assert_fail@plt+0x2ce8>
   13e98:	ldr	lr, [sp, #84]	; 0x54
   13e9c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ea0:	cmp	r0, #0
   13ea4:	bne	136a8 <__assert_fail@plt+0x24e4>
   13ea8:	b	13980 <__assert_fail@plt+0x27bc>
   13eac:	str	r2, [sp, #64]	; 0x40
   13eb0:	add	r0, r0, r7
   13eb4:	add	r1, r7, #1
   13eb8:	ldr	lr, [sp, #84]	; 0x54
   13ebc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13ec0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13ec4:	mov	r3, #0
   13ec8:	str	r0, [sp, #56]	; 0x38
   13ecc:	ldr	r0, [sp, #64]	; 0x40
   13ed0:	tst	r0, #1
   13ed4:	bne	13fbc <__assert_fail@plt+0x2df8>
   13ed8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13edc:	tst	r0, #1
   13ee0:	bne	1415c <__assert_fail@plt+0x2f98>
   13ee4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13ee8:	cmp	r7, #2
   13eec:	movwne	r3, #1
   13ef0:	orr	r3, r3, r2
   13ef4:	tst	r3, #1
   13ef8:	bne	13f30 <__assert_fail@plt+0x2d6c>
   13efc:	cmp	r9, sl
   13f00:	add	r3, r9, #1
   13f04:	movcc	r2, #39	; 0x27
   13f08:	strbcc	r2, [r6, r9]
   13f0c:	cmp	r3, sl
   13f10:	movcc	r2, #36	; 0x24
   13f14:	strbcc	r2, [r6, r3]
   13f18:	add	r3, r9, #2
   13f1c:	add	r9, r9, #3
   13f20:	cmp	r3, sl
   13f24:	movcc	r2, #39	; 0x27
   13f28:	strbcc	r2, [r6, r3]
   13f2c:	mov	r2, #1
   13f30:	cmp	r9, sl
   13f34:	mov	r0, r2
   13f38:	movcc	r3, #92	; 0x5c
   13f3c:	strbcc	r3, [r6, r9]
   13f40:	add	r3, r9, #1
   13f44:	cmp	r3, sl
   13f48:	andcc	r7, r5, #192	; 0xc0
   13f4c:	movcc	r2, #48	; 0x30
   13f50:	orrcc	r7, r2, r7, lsr #6
   13f54:	strbcc	r7, [r6, r3]
   13f58:	add	r3, r9, #2
   13f5c:	add	r9, r9, #3
   13f60:	cmp	r3, sl
   13f64:	lsrcc	r7, r5, #3
   13f68:	movcc	r2, #6
   13f6c:	bficc	r7, r2, #3, #29
   13f70:	mov	r2, #6
   13f74:	strbcc	r7, [r6, r3]
   13f78:	bfi	r5, r2, #3, #29
   13f7c:	mov	r3, #1
   13f80:	mov	r2, r0
   13f84:	ldr	r0, [sp, #56]	; 0x38
   13f88:	and	r8, r3, #1
   13f8c:	cmp	r0, r1
   13f90:	bhi	13ff0 <__assert_fail@plt+0x2e2c>
   13f94:	b	14030 <__assert_fail@plt+0x2e6c>
   13f98:	cmp	r9, sl
   13f9c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13fa0:	strbcc	r5, [r6, r9]
   13fa4:	add	r9, r9, #1
   13fa8:	ldrb	r5, [ip, r1]
   13fac:	add	r1, r1, #1
   13fb0:	ldr	r0, [sp, #64]	; 0x40
   13fb4:	tst	r0, #1
   13fb8:	beq	13ed8 <__assert_fail@plt+0x2d14>
   13fbc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13fc0:	tst	r7, #1
   13fc4:	beq	13fd8 <__assert_fail@plt+0x2e14>
   13fc8:	cmp	r9, sl
   13fcc:	movcc	r7, #92	; 0x5c
   13fd0:	strbcc	r7, [r6, r9]
   13fd4:	add	r9, r9, #1
   13fd8:	mov	r7, #0
   13fdc:	str	r7, [fp, #-56]	; 0xffffffc8
   13fe0:	ldr	r0, [sp, #56]	; 0x38
   13fe4:	and	r8, r3, #1
   13fe8:	cmp	r0, r1
   13fec:	bls	14030 <__assert_fail@plt+0x2e6c>
   13ff0:	cmp	r8, #0
   13ff4:	mvn	r7, r2
   13ff8:	movwne	r8, #1
   13ffc:	orr	r7, r7, r8
   14000:	tst	r7, #1
   14004:	bne	13f98 <__assert_fail@plt+0x2dd4>
   14008:	cmp	r9, sl
   1400c:	movcc	r7, #39	; 0x27
   14010:	strbcc	r7, [r6, r9]
   14014:	add	r7, r9, #1
   14018:	add	r9, r9, #2
   1401c:	cmp	r7, sl
   14020:	movcc	r2, #39	; 0x27
   14024:	strbcc	r2, [r6, r7]
   14028:	mov	r2, #0
   1402c:	b	13f98 <__assert_fail@plt+0x2dd4>
   14030:	cmp	r8, #0
   14034:	sub	r7, r1, #1
   14038:	mov	r0, r5
   1403c:	str	r2, [fp, #-48]	; 0xffffffd0
   14040:	movwne	r8, #1
   14044:	cmp	r8, #0
   14048:	beq	13938 <__assert_fail@plt+0x2774>
   1404c:	b	13728 <__assert_fail@plt+0x2564>
   14050:	mov	lr, r7
   14054:	b	1405c <__assert_fail@plt+0x2e98>
   14058:	mvn	lr, #0
   1405c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14060:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14064:	eor	r0, r7, #2
   14068:	orr	r0, r0, r9
   1406c:	clz	r0, r0
   14070:	lsr	r0, r0, #5
   14074:	tst	r1, r0
   14078:	bne	14178 <__assert_fail@plt+0x2fb4>
   1407c:	mov	r0, r1
   14080:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14084:	cmp	r7, #2
   14088:	movwne	r1, #1
   1408c:	orr	r0, r0, r1
   14090:	tst	r0, #1
   14094:	ldreq	r0, [sp, #52]	; 0x34
   14098:	streq	lr, [sp, #84]	; 0x54
   1409c:	eoreq	r0, r0, #1
   140a0:	tsteq	r0, #1
   140a4:	bne	1423c <__assert_fail@plt+0x3078>
   140a8:	tst	r4, #1
   140ac:	bne	141f8 <__assert_fail@plt+0x3034>
   140b0:	ldr	r6, [sp, #48]	; 0x30
   140b4:	mov	r8, #0
   140b8:	cmp	r6, #0
   140bc:	beq	14234 <__assert_fail@plt+0x3070>
   140c0:	ldr	r0, [sp, #80]	; 0x50
   140c4:	mov	r1, #0
   140c8:	cmp	sl, #0
   140cc:	mov	r4, #0
   140d0:	str	r1, [fp, #-72]	; 0xffffffb8
   140d4:	beq	12fc8 <__assert_fail@plt+0x1e04>
   140d8:	b	1423c <__assert_fail@plt+0x3078>
   140dc:	ldrb	r1, [r0, #3]
   140e0:	cmp	r1, #56	; 0x38
   140e4:	ldrbeq	r1, [r0, #4]
   140e8:	cmpeq	r1, #48	; 0x30
   140ec:	bne	131c0 <__assert_fail@plt+0x1ffc>
   140f0:	ldrb	r1, [r0, #5]
   140f4:	cmp	r1, #51	; 0x33
   140f8:	ldrbeq	r1, [r0, #6]
   140fc:	cmpeq	r1, #48	; 0x30
   14100:	bne	131c0 <__assert_fail@plt+0x1ffc>
   14104:	ldrb	r0, [r0, #7]
   14108:	cmp	r0, #0
   1410c:	movw	r0, #31482	; 0x7afa
   14110:	movt	r0, #1
   14114:	str	r0, [sp, #68]	; 0x44
   14118:	bne	131c0 <__assert_fail@plt+0x1ffc>
   1411c:	b	131dc <__assert_fail@plt+0x2018>
   14120:	ldrb	r1, [r0, #4]
   14124:	cmp	r1, #48	; 0x30
   14128:	ldrbeq	r1, [r0, #5]
   1412c:	cmpeq	r1, #51	; 0x33
   14130:	bne	132a4 <__assert_fail@plt+0x20e0>
   14134:	ldrb	r1, [r0, #6]
   14138:	cmp	r1, #48	; 0x30
   1413c:	ldrbeq	r0, [r0, #7]
   14140:	cmpeq	r0, #0
   14144:	bne	132a4 <__assert_fail@plt+0x20e0>
   14148:	movw	r0, #31486	; 0x7afe
   1414c:	movt	r0, #1
   14150:	str	r0, [sp, #72]	; 0x48
   14154:	b	132c4 <__assert_fail@plt+0x2100>
   14158:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1415c:	ldr	r2, [sp, #80]	; 0x50
   14160:	b	14198 <__assert_fail@plt+0x2fd4>
   14164:	ldr	ip, [fp, #-84]	; 0xffffffac
   14168:	mov	r2, #1
   1416c:	mov	lr, r4
   14170:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14174:	b	14198 <__assert_fail@plt+0x2fd4>
   14178:	ldr	r2, [sp, #80]	; 0x50
   1417c:	mov	r7, #2
   14180:	b	14198 <__assert_fail@plt+0x2fd4>
   14184:	ldr	r6, [sp, #76]	; 0x4c
   14188:	ldr	ip, [fp, #-84]	; 0xffffffac
   1418c:	ldr	lr, [sp, #84]	; 0x54
   14190:	ldr	r2, [sp, #80]	; 0x50
   14194:	mov	r7, #2
   14198:	mov	r0, #0
   1419c:	ldr	r1, [fp, #12]
   141a0:	tst	r2, #1
   141a4:	mov	r2, r7
   141a8:	mov	r3, lr
   141ac:	str	r0, [sp, #8]
   141b0:	ldr	r0, [sp, #68]	; 0x44
   141b4:	movwne	r2, #4
   141b8:	cmp	r7, #2
   141bc:	movne	r2, r7
   141c0:	str	r2, [sp]
   141c4:	mov	r2, ip
   141c8:	bic	r1, r1, #2
   141cc:	str	r0, [sp, #12]
   141d0:	ldr	r0, [sp, #72]	; 0x48
   141d4:	str	r1, [sp, #4]
   141d8:	mov	r1, sl
   141dc:	str	r0, [sp, #16]
   141e0:	mov	r0, r6
   141e4:	bl	12f4c <__assert_fail@plt+0x1d88>
   141e8:	mov	r9, r0
   141ec:	mov	r0, r9
   141f0:	sub	sp, fp, #28
   141f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141f8:	mov	r0, #5
   141fc:	ldr	r1, [sp, #48]	; 0x30
   14200:	ldr	r2, [fp, #-84]	; 0xffffffac
   14204:	ldr	r3, [sp, #84]	; 0x54
   14208:	str	r0, [sp]
   1420c:	ldr	r0, [fp, #12]
   14210:	str	r0, [sp, #4]
   14214:	ldr	r0, [fp, #16]
   14218:	str	r0, [sp, #8]
   1421c:	ldr	r0, [sp, #68]	; 0x44
   14220:	str	r0, [sp, #12]
   14224:	ldr	r0, [sp, #72]	; 0x48
   14228:	str	r0, [sp, #16]
   1422c:	ldr	r0, [sp, #76]	; 0x4c
   14230:	b	141e4 <__assert_fail@plt+0x3020>
   14234:	mov	r0, #0
   14238:	str	r0, [fp, #-72]	; 0xffffffb8
   1423c:	ldr	r1, [sp, #92]	; 0x5c
   14240:	cmp	r1, #0
   14244:	beq	14284 <__assert_fail@plt+0x30c0>
   14248:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1424c:	ldr	r2, [sp, #76]	; 0x4c
   14250:	tst	r0, #1
   14254:	bne	14288 <__assert_fail@plt+0x30c4>
   14258:	ldrb	r0, [r1]
   1425c:	cmp	r0, #0
   14260:	beq	14288 <__assert_fail@plt+0x30c4>
   14264:	add	r1, r1, #1
   14268:	cmp	r9, sl
   1426c:	strbcc	r0, [r2, r9]
   14270:	add	r9, r9, #1
   14274:	ldrb	r0, [r1], #1
   14278:	cmp	r0, #0
   1427c:	bne	14268 <__assert_fail@plt+0x30a4>
   14280:	b	14288 <__assert_fail@plt+0x30c4>
   14284:	ldr	r2, [sp, #76]	; 0x4c
   14288:	cmp	r9, sl
   1428c:	movcc	r0, #0
   14290:	strbcc	r0, [r2, r9]
   14294:	mov	r0, r9
   14298:	sub	sp, fp, #28
   1429c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a0:	mov	r2, #1
   142a4:	b	14170 <__assert_fail@plt+0x2fac>
   142a8:	ldr	r2, [sp, #80]	; 0x50
   142ac:	mov	r7, #5
   142b0:	b	14198 <__assert_fail@plt+0x2fd4>
   142b4:	bl	111ac <abort@plt>
   142b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142bc:	add	fp, sp, #28
   142c0:	sub	sp, sp, #28
   142c4:	movw	r5, #37256	; 0x9188
   142c8:	cmp	r2, #0
   142cc:	mov	r4, r1
   142d0:	mov	r7, r0
   142d4:	str	r0, [sp, #20]
   142d8:	movt	r5, #2
   142dc:	movne	r5, r2
   142e0:	bl	110b0 <__errno_location@plt>
   142e4:	mov	sl, r0
   142e8:	ldm	r5, {r0, r1}
   142ec:	ldr	r2, [r5, #40]	; 0x28
   142f0:	ldr	r3, [r5, #44]	; 0x2c
   142f4:	add	r9, r5, #8
   142f8:	ldr	r6, [sl]
   142fc:	orr	r8, r1, #1
   14300:	mov	r1, #0
   14304:	str	r6, [sp, #24]
   14308:	stm	sp, {r0, r8, r9}
   1430c:	str	r2, [sp, #12]
   14310:	str	r3, [sp, #16]
   14314:	mov	r0, #0
   14318:	mov	r2, r7
   1431c:	mov	r3, r4
   14320:	mov	r6, r4
   14324:	bl	12f4c <__assert_fail@plt+0x1d88>
   14328:	add	r7, r0, #1
   1432c:	mov	r0, r7
   14330:	bl	153a0 <__assert_fail@plt+0x41dc>
   14334:	mov	r4, r0
   14338:	ldr	r0, [r5]
   1433c:	ldr	r2, [r5, #44]	; 0x2c
   14340:	ldr	r1, [r5, #40]	; 0x28
   14344:	mov	r3, r6
   14348:	stm	sp, {r0, r8, r9}
   1434c:	str	r2, [sp, #16]
   14350:	str	r1, [sp, #12]
   14354:	mov	r0, r4
   14358:	mov	r1, r7
   1435c:	ldr	r2, [sp, #20]
   14360:	bl	12f4c <__assert_fail@plt+0x1d88>
   14364:	ldr	r0, [sp, #24]
   14368:	str	r0, [sl]
   1436c:	mov	r0, r4
   14370:	sub	sp, fp, #28
   14374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1437c:	add	fp, sp, #28
   14380:	sub	sp, sp, #36	; 0x24
   14384:	movw	r8, #37256	; 0x9188
   14388:	cmp	r3, #0
   1438c:	mov	r4, r2
   14390:	str	r2, [sp, #24]
   14394:	mov	r5, r1
   14398:	mov	r6, r0
   1439c:	str	r0, [sp, #20]
   143a0:	movt	r8, #2
   143a4:	movne	r8, r3
   143a8:	bl	110b0 <__errno_location@plt>
   143ac:	str	r0, [sp, #28]
   143b0:	cmp	r4, #0
   143b4:	add	sl, r8, #8
   143b8:	ldm	r8, {r3, r9}
   143bc:	ldr	r7, [r0]
   143c0:	ldr	r1, [r8, #40]	; 0x28
   143c4:	ldr	r2, [r8, #44]	; 0x2c
   143c8:	mov	r0, #0
   143cc:	orreq	r9, r9, #1
   143d0:	str	r7, [sp, #32]
   143d4:	mov	r7, r5
   143d8:	stm	sp, {r3, r9, sl}
   143dc:	str	r1, [sp, #12]
   143e0:	str	r2, [sp, #16]
   143e4:	mov	r1, #0
   143e8:	mov	r2, r6
   143ec:	mov	r3, r5
   143f0:	bl	12f4c <__assert_fail@plt+0x1d88>
   143f4:	add	r4, r0, #1
   143f8:	mov	r5, r0
   143fc:	mov	r0, r4
   14400:	bl	153a0 <__assert_fail@plt+0x41dc>
   14404:	mov	r6, r0
   14408:	ldr	r0, [r8]
   1440c:	ldr	r2, [r8, #44]	; 0x2c
   14410:	ldr	r1, [r8, #40]	; 0x28
   14414:	mov	r3, r7
   14418:	stm	sp, {r0, r9, sl}
   1441c:	str	r2, [sp, #16]
   14420:	str	r1, [sp, #12]
   14424:	mov	r0, r6
   14428:	mov	r1, r4
   1442c:	ldr	r2, [sp, #20]
   14430:	bl	12f4c <__assert_fail@plt+0x1d88>
   14434:	ldr	r0, [sp, #24]
   14438:	ldr	r1, [sp, #32]
   1443c:	ldr	r2, [sp, #28]
   14440:	cmp	r0, #0
   14444:	str	r1, [r2]
   14448:	strne	r5, [r0]
   1444c:	mov	r0, r6
   14450:	sub	sp, fp, #28
   14454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14458:	push	{r4, r5, r6, r7, fp, lr}
   1445c:	add	fp, sp, #16
   14460:	movw	r4, #37176	; 0x9138
   14464:	movt	r4, #2
   14468:	ldrd	r6, [r4]
   1446c:	cmp	r7, #2
   14470:	blt	1449c <__assert_fail@plt+0x32d8>
   14474:	add	r5, r6, #12
   14478:	mov	r7, #0
   1447c:	ldr	r0, [r5, r7, lsl #3]
   14480:	bl	120cc <__assert_fail@plt+0xf08>
   14484:	ldr	r1, [r4, #4]
   14488:	add	r2, r7, #2
   1448c:	add	r0, r7, #1
   14490:	mov	r7, r0
   14494:	cmp	r2, r1
   14498:	blt	1447c <__assert_fail@plt+0x32b8>
   1449c:	ldr	r0, [r6, #4]
   144a0:	movw	r5, #37304	; 0x91b8
   144a4:	movt	r5, #2
   144a8:	cmp	r0, r5
   144ac:	beq	144c0 <__assert_fail@plt+0x32fc>
   144b0:	bl	120cc <__assert_fail@plt+0xf08>
   144b4:	mov	r0, #256	; 0x100
   144b8:	str	r0, [r4, #8]
   144bc:	str	r5, [r4, #12]
   144c0:	add	r5, r4, #8
   144c4:	cmp	r6, r5
   144c8:	beq	144d8 <__assert_fail@plt+0x3314>
   144cc:	mov	r0, r6
   144d0:	bl	120cc <__assert_fail@plt+0xf08>
   144d4:	str	r5, [r4]
   144d8:	mov	r0, #1
   144dc:	str	r0, [r4, #4]
   144e0:	pop	{r4, r5, r6, r7, fp, pc}
   144e4:	movw	r3, #37256	; 0x9188
   144e8:	mvn	r2, #0
   144ec:	movt	r3, #2
   144f0:	b	144f4 <__assert_fail@plt+0x3330>
   144f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144f8:	add	fp, sp, #28
   144fc:	sub	sp, sp, #44	; 0x2c
   14500:	mov	r7, r3
   14504:	str	r2, [sp, #36]	; 0x24
   14508:	str	r1, [sp, #32]
   1450c:	mov	r5, r0
   14510:	bl	110b0 <__errno_location@plt>
   14514:	cmp	r5, #0
   14518:	blt	1467c <__assert_fail@plt+0x34b8>
   1451c:	cmn	r5, #-2147483647	; 0x80000001
   14520:	beq	1467c <__assert_fail@plt+0x34b8>
   14524:	movw	r8, #37176	; 0x9138
   14528:	mov	r4, r0
   1452c:	movt	r8, #2
   14530:	ldr	r6, [r8]
   14534:	ldr	r1, [r8, #4]
   14538:	ldr	r0, [r0]
   1453c:	str	r4, [sp, #28]
   14540:	cmp	r1, r5
   14544:	str	r0, [sp, #24]
   14548:	ble	14554 <__assert_fail@plt+0x3390>
   1454c:	mov	sl, r6
   14550:	b	145b8 <__assert_fail@plt+0x33f4>
   14554:	mov	r0, #8
   14558:	add	r9, r8, #8
   1455c:	add	r2, r5, #1
   14560:	str	r1, [fp, #-32]	; 0xffffffe0
   14564:	mvn	r3, #-2147483648	; 0x80000000
   14568:	str	r0, [sp]
   1456c:	subs	r0, r6, r9
   14570:	sub	r2, r2, r1
   14574:	sub	r1, fp, #32
   14578:	movne	r0, r6
   1457c:	bl	155a0 <__assert_fail@plt+0x43dc>
   14580:	str	r0, [r8]
   14584:	cmp	r6, r9
   14588:	mov	sl, r0
   1458c:	ldrdeq	r0, [r8, #8]
   14590:	stmeq	sl, {r0, r1}
   14594:	ldr	r1, [r8, #4]
   14598:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1459c:	add	r0, sl, r1, lsl #3
   145a0:	sub	r1, r2, r1
   145a4:	lsl	r2, r1, #3
   145a8:	mov	r1, #0
   145ac:	bl	110e0 <memset@plt>
   145b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   145b4:	str	r0, [r8, #4]
   145b8:	mov	r9, sl
   145bc:	ldr	r6, [r9, r5, lsl #3]!
   145c0:	ldr	r4, [r9, #4]!
   145c4:	ldm	r7, {r0, r1}
   145c8:	ldr	r2, [r7, #40]	; 0x28
   145cc:	ldr	r3, [r7, #44]	; 0x2c
   145d0:	orr	r8, r1, #1
   145d4:	add	r1, r7, #8
   145d8:	stm	sp, {r0, r8}
   145dc:	add	r0, sp, #8
   145e0:	str	r1, [sp, #20]
   145e4:	stm	r0, {r1, r2, r3}
   145e8:	mov	r0, r4
   145ec:	mov	r1, r6
   145f0:	ldr	r2, [sp, #32]
   145f4:	ldr	r3, [sp, #36]	; 0x24
   145f8:	bl	12f4c <__assert_fail@plt+0x1d88>
   145fc:	cmp	r6, r0
   14600:	bhi	14664 <__assert_fail@plt+0x34a0>
   14604:	add	r6, r0, #1
   14608:	movw	r0, #37304	; 0x91b8
   1460c:	movt	r0, #2
   14610:	str	r6, [sl, r5, lsl #3]
   14614:	cmp	r4, r0
   14618:	beq	14624 <__assert_fail@plt+0x3460>
   1461c:	mov	r0, r4
   14620:	bl	120cc <__assert_fail@plt+0xf08>
   14624:	mov	r0, r6
   14628:	bl	153a0 <__assert_fail@plt+0x41dc>
   1462c:	str	r0, [r9]
   14630:	mov	r4, r0
   14634:	add	r3, sp, #8
   14638:	ldr	r0, [r7]
   1463c:	ldr	r1, [r7, #40]	; 0x28
   14640:	ldr	r2, [r7, #44]	; 0x2c
   14644:	stm	sp, {r0, r8}
   14648:	ldr	r0, [sp, #20]
   1464c:	stm	r3, {r0, r1, r2}
   14650:	mov	r0, r4
   14654:	mov	r1, r6
   14658:	ldr	r2, [sp, #32]
   1465c:	ldr	r3, [sp, #36]	; 0x24
   14660:	bl	12f4c <__assert_fail@plt+0x1d88>
   14664:	ldr	r1, [sp, #24]
   14668:	ldr	r0, [sp, #28]
   1466c:	str	r1, [r0]
   14670:	mov	r0, r4
   14674:	sub	sp, fp, #28
   14678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1467c:	bl	111ac <abort@plt>
   14680:	movw	r3, #37256	; 0x9188
   14684:	movt	r3, #2
   14688:	b	144f4 <__assert_fail@plt+0x3330>
   1468c:	movw	r3, #37256	; 0x9188
   14690:	mov	r1, r0
   14694:	mov	r0, #0
   14698:	mvn	r2, #0
   1469c:	movt	r3, #2
   146a0:	b	144f4 <__assert_fail@plt+0x3330>
   146a4:	movw	r3, #37256	; 0x9188
   146a8:	mov	r2, r1
   146ac:	mov	r1, r0
   146b0:	mov	r0, #0
   146b4:	movt	r3, #2
   146b8:	b	144f4 <__assert_fail@plt+0x3330>
   146bc:	push	{fp, lr}
   146c0:	mov	fp, sp
   146c4:	sub	sp, sp, #48	; 0x30
   146c8:	vmov.i32	q8, #0	; 0x00000000
   146cc:	mov	ip, #32
   146d0:	mov	r3, sp
   146d4:	mov	lr, r2
   146d8:	cmp	r1, #10
   146dc:	add	r2, r3, #16
   146e0:	vst1.64	{d16-d17}, [r3], ip
   146e4:	vst1.64	{d16-d17}, [r3]
   146e8:	vst1.64	{d16-d17}, [r2]
   146ec:	beq	1470c <__assert_fail@plt+0x3548>
   146f0:	str	r1, [sp]
   146f4:	mov	r3, sp
   146f8:	mov	r1, lr
   146fc:	mvn	r2, #0
   14700:	bl	144f4 <__assert_fail@plt+0x3330>
   14704:	mov	sp, fp
   14708:	pop	{fp, pc}
   1470c:	bl	111ac <abort@plt>
   14710:	push	{r4, sl, fp, lr}
   14714:	add	fp, sp, #8
   14718:	sub	sp, sp, #48	; 0x30
   1471c:	mov	ip, r3
   14720:	mov	r3, sp
   14724:	vmov.i32	q8, #0	; 0x00000000
   14728:	mov	lr, #32
   1472c:	cmp	r1, #10
   14730:	add	r4, r3, #16
   14734:	vst1.64	{d16-d17}, [r3], lr
   14738:	vst1.64	{d16-d17}, [r3]
   1473c:	vst1.64	{d16-d17}, [r4]
   14740:	beq	14760 <__assert_fail@plt+0x359c>
   14744:	str	r1, [sp]
   14748:	mov	r1, r2
   1474c:	mov	r3, sp
   14750:	mov	r2, ip
   14754:	bl	144f4 <__assert_fail@plt+0x3330>
   14758:	sub	sp, fp, #8
   1475c:	pop	{r4, sl, fp, pc}
   14760:	bl	111ac <abort@plt>
   14764:	push	{fp, lr}
   14768:	mov	fp, sp
   1476c:	sub	sp, sp, #48	; 0x30
   14770:	mov	r3, sp
   14774:	vmov.i32	q8, #0	; 0x00000000
   14778:	mov	ip, #32
   1477c:	cmp	r0, #10
   14780:	add	r2, r3, #16
   14784:	vst1.64	{d16-d17}, [r3], ip
   14788:	vst1.64	{d16-d17}, [r3]
   1478c:	vst1.64	{d16-d17}, [r2]
   14790:	beq	147b0 <__assert_fail@plt+0x35ec>
   14794:	str	r0, [sp]
   14798:	mov	r3, sp
   1479c:	mov	r0, #0
   147a0:	mvn	r2, #0
   147a4:	bl	144f4 <__assert_fail@plt+0x3330>
   147a8:	mov	sp, fp
   147ac:	pop	{fp, pc}
   147b0:	bl	111ac <abort@plt>
   147b4:	push	{fp, lr}
   147b8:	mov	fp, sp
   147bc:	sub	sp, sp, #48	; 0x30
   147c0:	mov	r3, sp
   147c4:	vmov.i32	q8, #0	; 0x00000000
   147c8:	mov	ip, #32
   147cc:	cmp	r0, #10
   147d0:	add	lr, r3, #16
   147d4:	vst1.64	{d16-d17}, [r3], ip
   147d8:	vst1.64	{d16-d17}, [r3]
   147dc:	vst1.64	{d16-d17}, [lr]
   147e0:	beq	147fc <__assert_fail@plt+0x3638>
   147e4:	str	r0, [sp]
   147e8:	mov	r3, sp
   147ec:	mov	r0, #0
   147f0:	bl	144f4 <__assert_fail@plt+0x3330>
   147f4:	mov	sp, fp
   147f8:	pop	{fp, pc}
   147fc:	bl	111ac <abort@plt>
   14800:	push	{r4, sl, fp, lr}
   14804:	add	fp, sp, #8
   14808:	sub	sp, sp, #48	; 0x30
   1480c:	mov	lr, r0
   14810:	movw	r0, #37256	; 0x9188
   14814:	mov	r3, #32
   14818:	mov	ip, r1
   1481c:	mov	r4, #1
   14820:	movt	r0, #2
   14824:	add	r1, r0, #16
   14828:	vld1.64	{d16-d17}, [r0], r3
   1482c:	mov	r3, sp
   14830:	vld1.64	{d18-d19}, [r1]
   14834:	add	r1, r3, #16
   14838:	vld1.64	{d20-d21}, [r0]
   1483c:	add	r0, r3, #32
   14840:	vst1.64	{d18-d19}, [r1]
   14844:	mov	r1, r3
   14848:	vst1.64	{d20-d21}, [r0]
   1484c:	mov	r0, #28
   14850:	and	r0, r0, r2, lsr #3
   14854:	and	r2, r2, #31
   14858:	vst1.64	{d16-d17}, [r1], r0
   1485c:	ldr	r0, [r1, #8]
   14860:	bic	r4, r4, r0, lsr r2
   14864:	eor	r0, r0, r4, lsl r2
   14868:	mov	r2, ip
   1486c:	str	r0, [r1, #8]
   14870:	mov	r0, #0
   14874:	mov	r1, lr
   14878:	bl	144f4 <__assert_fail@plt+0x3330>
   1487c:	sub	sp, fp, #8
   14880:	pop	{r4, sl, fp, pc}
   14884:	push	{fp, lr}
   14888:	mov	fp, sp
   1488c:	sub	sp, sp, #48	; 0x30
   14890:	mov	ip, r0
   14894:	movw	r0, #37256	; 0x9188
   14898:	mov	r3, #32
   1489c:	movt	r0, #2
   148a0:	add	r2, r0, #16
   148a4:	vld1.64	{d16-d17}, [r0], r3
   148a8:	mov	r3, sp
   148ac:	vld1.64	{d18-d19}, [r2]
   148b0:	add	r2, r3, #16
   148b4:	vld1.64	{d20-d21}, [r0]
   148b8:	add	r0, r3, #32
   148bc:	vst1.64	{d18-d19}, [r2]
   148c0:	mov	r2, r3
   148c4:	vst1.64	{d20-d21}, [r0]
   148c8:	mov	r0, #28
   148cc:	and	r0, r0, r1, lsr #3
   148d0:	and	r1, r1, #31
   148d4:	vst1.64	{d16-d17}, [r2], r0
   148d8:	mov	r0, #1
   148dc:	ldr	lr, [r2, #8]
   148e0:	bic	r0, r0, lr, lsr r1
   148e4:	eor	r0, lr, r0, lsl r1
   148e8:	mov	r1, ip
   148ec:	str	r0, [r2, #8]
   148f0:	mov	r0, #0
   148f4:	mvn	r2, #0
   148f8:	bl	144f4 <__assert_fail@plt+0x3330>
   148fc:	mov	sp, fp
   14900:	pop	{fp, pc}
   14904:	push	{fp, lr}
   14908:	mov	fp, sp
   1490c:	sub	sp, sp, #48	; 0x30
   14910:	movw	r2, #37256	; 0x9188
   14914:	mov	r3, #32
   14918:	mov	r1, r0
   1491c:	movt	r2, #2
   14920:	add	r0, r2, #16
   14924:	vld1.64	{d16-d17}, [r2], r3
   14928:	mov	r3, sp
   1492c:	vld1.64	{d18-d19}, [r0]
   14930:	add	r0, r3, #16
   14934:	vld1.64	{d20-d21}, [r2]
   14938:	mov	r2, r3
   1493c:	vst1.64	{d18-d19}, [r0]
   14940:	add	r0, r3, #32
   14944:	vst1.64	{d20-d21}, [r0]
   14948:	mov	r0, #12
   1494c:	vst1.64	{d16-d17}, [r2], r0
   14950:	ldr	r0, [r2]
   14954:	orr	r0, r0, #67108864	; 0x4000000
   14958:	str	r0, [r2]
   1495c:	mov	r0, #0
   14960:	mvn	r2, #0
   14964:	bl	144f4 <__assert_fail@plt+0x3330>
   14968:	mov	sp, fp
   1496c:	pop	{fp, pc}
   14970:	push	{fp, lr}
   14974:	mov	fp, sp
   14978:	sub	sp, sp, #48	; 0x30
   1497c:	mov	ip, r1
   14980:	mov	r1, r0
   14984:	movw	r0, #37256	; 0x9188
   14988:	mov	r3, #32
   1498c:	movt	r0, #2
   14990:	add	r2, r0, #16
   14994:	vld1.64	{d16-d17}, [r0], r3
   14998:	mov	r3, sp
   1499c:	vld1.64	{d18-d19}, [r2]
   149a0:	add	r2, r3, #16
   149a4:	vld1.64	{d20-d21}, [r0]
   149a8:	add	r0, r3, #32
   149ac:	vst1.64	{d18-d19}, [r2]
   149b0:	mov	r2, r3
   149b4:	vst1.64	{d20-d21}, [r0]
   149b8:	mov	r0, #12
   149bc:	vst1.64	{d16-d17}, [r2], r0
   149c0:	ldr	r0, [r2]
   149c4:	orr	r0, r0, #67108864	; 0x4000000
   149c8:	str	r0, [r2]
   149cc:	mov	r0, #0
   149d0:	mov	r2, ip
   149d4:	bl	144f4 <__assert_fail@plt+0x3330>
   149d8:	mov	sp, fp
   149dc:	pop	{fp, pc}
   149e0:	push	{r4, sl, fp, lr}
   149e4:	add	fp, sp, #8
   149e8:	sub	sp, sp, #96	; 0x60
   149ec:	mov	ip, r2
   149f0:	mov	r2, sp
   149f4:	vmov.i32	q8, #0	; 0x00000000
   149f8:	mov	r4, #28
   149fc:	cmp	r1, #10
   14a00:	mov	r3, r2
   14a04:	add	lr, r2, #16
   14a08:	vst1.64	{d16-d17}, [r3], r4
   14a0c:	vst1.64	{d16-d17}, [lr]
   14a10:	vst1.32	{d16-d17}, [r3]
   14a14:	beq	14a64 <__assert_fail@plt+0x38a0>
   14a18:	vld1.64	{d16-d17}, [r2], r4
   14a1c:	vld1.64	{d18-d19}, [lr]
   14a20:	add	r3, sp, #48	; 0x30
   14a24:	add	r4, r3, #4
   14a28:	vld1.32	{d20-d21}, [r2]
   14a2c:	add	r2, r3, #20
   14a30:	vst1.32	{d16-d17}, [r4]
   14a34:	vst1.32	{d18-d19}, [r2]
   14a38:	add	r2, r3, #32
   14a3c:	vst1.32	{d20-d21}, [r2]
   14a40:	str	r1, [sp, #48]	; 0x30
   14a44:	mvn	r2, #0
   14a48:	ldr	r1, [sp, #60]	; 0x3c
   14a4c:	orr	r1, r1, #67108864	; 0x4000000
   14a50:	str	r1, [sp, #60]	; 0x3c
   14a54:	mov	r1, ip
   14a58:	bl	144f4 <__assert_fail@plt+0x3330>
   14a5c:	sub	sp, fp, #8
   14a60:	pop	{r4, sl, fp, pc}
   14a64:	bl	111ac <abort@plt>
   14a68:	push	{r4, r5, fp, lr}
   14a6c:	add	fp, sp, #8
   14a70:	sub	sp, sp, #48	; 0x30
   14a74:	mov	ip, r3
   14a78:	movw	r3, #37256	; 0x9188
   14a7c:	mov	lr, #32
   14a80:	cmp	r1, #0
   14a84:	mov	r5, sp
   14a88:	movt	r3, #2
   14a8c:	cmpne	r2, #0
   14a90:	add	r4, r3, #16
   14a94:	vld1.64	{d16-d17}, [r3], lr
   14a98:	vld1.64	{d18-d19}, [r4]
   14a9c:	add	r4, r5, #16
   14aa0:	vld1.64	{d20-d21}, [r3]
   14aa4:	vst1.64	{d16-d17}, [r5], lr
   14aa8:	mov	r3, #10
   14aac:	vst1.64	{d18-d19}, [r4]
   14ab0:	vst1.64	{d20-d21}, [r5]
   14ab4:	str	r3, [sp]
   14ab8:	bne	14ac0 <__assert_fail@plt+0x38fc>
   14abc:	bl	111ac <abort@plt>
   14ac0:	str	r2, [sp, #44]	; 0x2c
   14ac4:	str	r1, [sp, #40]	; 0x28
   14ac8:	mov	r3, sp
   14acc:	mov	r1, ip
   14ad0:	mvn	r2, #0
   14ad4:	bl	144f4 <__assert_fail@plt+0x3330>
   14ad8:	sub	sp, fp, #8
   14adc:	pop	{r4, r5, fp, pc}
   14ae0:	push	{r4, r5, fp, lr}
   14ae4:	add	fp, sp, #8
   14ae8:	sub	sp, sp, #48	; 0x30
   14aec:	mov	lr, r3
   14af0:	movw	r3, #37256	; 0x9188
   14af4:	mov	ip, #32
   14af8:	cmp	r1, #0
   14afc:	mov	r5, sp
   14b00:	movt	r3, #2
   14b04:	cmpne	r2, #0
   14b08:	add	r4, r3, #16
   14b0c:	vld1.64	{d16-d17}, [r3], ip
   14b10:	vld1.64	{d18-d19}, [r4]
   14b14:	add	r4, r5, #16
   14b18:	vld1.64	{d20-d21}, [r3]
   14b1c:	vst1.64	{d16-d17}, [r5], ip
   14b20:	mov	r3, #10
   14b24:	vst1.64	{d18-d19}, [r4]
   14b28:	vst1.64	{d20-d21}, [r5]
   14b2c:	str	r3, [sp]
   14b30:	bne	14b38 <__assert_fail@plt+0x3974>
   14b34:	bl	111ac <abort@plt>
   14b38:	ldr	ip, [fp, #8]
   14b3c:	str	r2, [sp, #44]	; 0x2c
   14b40:	str	r1, [sp, #40]	; 0x28
   14b44:	mov	r3, sp
   14b48:	mov	r1, lr
   14b4c:	mov	r2, ip
   14b50:	bl	144f4 <__assert_fail@plt+0x3330>
   14b54:	sub	sp, fp, #8
   14b58:	pop	{r4, r5, fp, pc}
   14b5c:	push	{r4, sl, fp, lr}
   14b60:	add	fp, sp, #8
   14b64:	sub	sp, sp, #48	; 0x30
   14b68:	mov	ip, r2
   14b6c:	movw	r2, #37256	; 0x9188
   14b70:	mov	lr, #32
   14b74:	cmp	r0, #0
   14b78:	mov	r4, sp
   14b7c:	movt	r2, #2
   14b80:	cmpne	r1, #0
   14b84:	add	r3, r2, #16
   14b88:	vld1.64	{d16-d17}, [r2], lr
   14b8c:	vld1.64	{d18-d19}, [r3]
   14b90:	add	r3, r4, #16
   14b94:	vld1.64	{d20-d21}, [r2]
   14b98:	vst1.64	{d16-d17}, [r4], lr
   14b9c:	mov	r2, #10
   14ba0:	vst1.64	{d18-d19}, [r3]
   14ba4:	vst1.64	{d20-d21}, [r4]
   14ba8:	str	r2, [sp]
   14bac:	bne	14bb4 <__assert_fail@plt+0x39f0>
   14bb0:	bl	111ac <abort@plt>
   14bb4:	str	r1, [sp, #44]	; 0x2c
   14bb8:	str	r0, [sp, #40]	; 0x28
   14bbc:	mov	r3, sp
   14bc0:	mov	r0, #0
   14bc4:	mov	r1, ip
   14bc8:	mvn	r2, #0
   14bcc:	bl	144f4 <__assert_fail@plt+0x3330>
   14bd0:	sub	sp, fp, #8
   14bd4:	pop	{r4, sl, fp, pc}
   14bd8:	push	{r4, r5, fp, lr}
   14bdc:	add	fp, sp, #8
   14be0:	sub	sp, sp, #48	; 0x30
   14be4:	mov	lr, r2
   14be8:	movw	r2, #37256	; 0x9188
   14bec:	mov	ip, r3
   14bf0:	mov	r3, #32
   14bf4:	cmp	r0, #0
   14bf8:	mov	r5, sp
   14bfc:	movt	r2, #2
   14c00:	cmpne	r1, #0
   14c04:	add	r4, r2, #16
   14c08:	vld1.64	{d16-d17}, [r2], r3
   14c0c:	vld1.64	{d18-d19}, [r4]
   14c10:	add	r4, r5, #16
   14c14:	vld1.64	{d20-d21}, [r2]
   14c18:	vst1.64	{d16-d17}, [r5], r3
   14c1c:	mov	r2, #10
   14c20:	vst1.64	{d18-d19}, [r4]
   14c24:	vst1.64	{d20-d21}, [r5]
   14c28:	str	r2, [sp]
   14c2c:	bne	14c34 <__assert_fail@plt+0x3a70>
   14c30:	bl	111ac <abort@plt>
   14c34:	str	r1, [sp, #44]	; 0x2c
   14c38:	str	r0, [sp, #40]	; 0x28
   14c3c:	mov	r3, sp
   14c40:	mov	r0, #0
   14c44:	mov	r1, lr
   14c48:	mov	r2, ip
   14c4c:	bl	144f4 <__assert_fail@plt+0x3330>
   14c50:	sub	sp, fp, #8
   14c54:	pop	{r4, r5, fp, pc}
   14c58:	movw	r3, #37128	; 0x9108
   14c5c:	movt	r3, #2
   14c60:	b	144f4 <__assert_fail@plt+0x3330>
   14c64:	movw	r3, #37128	; 0x9108
   14c68:	mov	r2, r1
   14c6c:	mov	r1, r0
   14c70:	mov	r0, #0
   14c74:	movt	r3, #2
   14c78:	b	144f4 <__assert_fail@plt+0x3330>
   14c7c:	movw	r3, #37128	; 0x9108
   14c80:	mvn	r2, #0
   14c84:	movt	r3, #2
   14c88:	b	144f4 <__assert_fail@plt+0x3330>
   14c8c:	movw	r3, #37128	; 0x9108
   14c90:	mov	r1, r0
   14c94:	mov	r0, #0
   14c98:	mvn	r2, #0
   14c9c:	movt	r3, #2
   14ca0:	b	144f4 <__assert_fail@plt+0x3330>
   14ca4:	mov	r1, #0
   14ca8:	mov	r2, #3
   14cac:	b	16c30 <__assert_fail@plt+0x5a6c>
   14cb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14cb4:	add	fp, sp, #24
   14cb8:	sub	sp, sp, #32
   14cbc:	ldr	r6, [fp, #12]
   14cc0:	ldr	r7, [fp, #8]
   14cc4:	mov	r4, r2
   14cc8:	mov	r8, r0
   14ccc:	cmp	r1, #0
   14cd0:	beq	14cf8 <__assert_fail@plt+0x3b34>
   14cd4:	movw	r2, #31576	; 0x7b58
   14cd8:	mov	r5, r1
   14cdc:	str	r3, [sp, #4]
   14ce0:	str	r4, [sp]
   14ce4:	mov	r0, r8
   14ce8:	mov	r1, #1
   14cec:	movt	r2, #1
   14cf0:	mov	r3, r5
   14cf4:	b	14d10 <__assert_fail@plt+0x3b4c>
   14cf8:	movw	r2, #31588	; 0x7b64
   14cfc:	str	r3, [sp]
   14d00:	mov	r0, r8
   14d04:	mov	r1, #1
   14d08:	mov	r3, r4
   14d0c:	movt	r2, #1
   14d10:	bl	11104 <__fprintf_chk@plt>
   14d14:	movw	r1, #31595	; 0x7b6b
   14d18:	mov	r0, #0
   14d1c:	mov	r2, #5
   14d20:	movt	r1, #1
   14d24:	bl	10fc0 <dcgettext@plt>
   14d28:	movw	r2, #32313	; 0x7e39
   14d2c:	mov	r3, r0
   14d30:	movw	r0, #2022	; 0x7e6
   14d34:	mov	r1, #1
   14d38:	str	r0, [sp]
   14d3c:	movt	r2, #1
   14d40:	mov	r0, r8
   14d44:	bl	11104 <__fprintf_chk@plt>
   14d48:	movw	r4, #31010	; 0x7922
   14d4c:	mov	r1, r8
   14d50:	movt	r4, #1
   14d54:	mov	r0, r4
   14d58:	bl	10f30 <fputs_unlocked@plt>
   14d5c:	movw	r1, #31599	; 0x7b6f
   14d60:	mov	r0, #0
   14d64:	mov	r2, #5
   14d68:	movt	r1, #1
   14d6c:	bl	10fc0 <dcgettext@plt>
   14d70:	movw	r3, #31770	; 0x7c1a
   14d74:	mov	r2, r0
   14d78:	mov	r0, r8
   14d7c:	mov	r1, #1
   14d80:	movt	r3, #1
   14d84:	bl	11104 <__fprintf_chk@plt>
   14d88:	mov	r0, r4
   14d8c:	mov	r1, r8
   14d90:	bl	10f30 <fputs_unlocked@plt>
   14d94:	cmp	r6, #9
   14d98:	bhi	14dd4 <__assert_fail@plt+0x3c10>
   14d9c:	add	r0, pc, #0
   14da0:	ldr	pc, [r0, r6, lsl #2]
   14da4:	andeq	r4, r1, ip, asr #27
   14da8:	andeq	r4, r1, r0, ror #27
   14dac:	andeq	r4, r1, r0, lsl lr
   14db0:	andeq	r4, r1, r8, lsr lr
   14db4:	andeq	r4, r1, r0, ror #28
   14db8:	andeq	r4, r1, r8, lsl #29
   14dbc:			; <UNDEFINED> instruction: 0x00014eb0
   14dc0:	andeq	r4, r1, r8, ror #29
   14dc4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14dc8:	andeq	r4, r1, r8, lsr pc
   14dcc:	sub	sp, fp, #24
   14dd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14dd4:	movw	r1, #32123	; 0x7d7b
   14dd8:	movt	r1, #1
   14ddc:	b	14f40 <__assert_fail@plt+0x3d7c>
   14de0:	movw	r1, #31804	; 0x7c3c
   14de4:	mov	r0, #0
   14de8:	mov	r2, #5
   14dec:	movt	r1, #1
   14df0:	bl	10fc0 <dcgettext@plt>
   14df4:	ldr	r3, [r7]
   14df8:	mov	r2, r0
   14dfc:	mov	r0, r8
   14e00:	mov	r1, #1
   14e04:	sub	sp, fp, #24
   14e08:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e0c:	b	11104 <__fprintf_chk@plt>
   14e10:	movw	r1, #31820	; 0x7c4c
   14e14:	mov	r0, #0
   14e18:	mov	r2, #5
   14e1c:	movt	r1, #1
   14e20:	bl	10fc0 <dcgettext@plt>
   14e24:	mov	r2, r0
   14e28:	ldr	r3, [r7]
   14e2c:	ldr	r0, [r7, #4]
   14e30:	str	r0, [sp]
   14e34:	b	14f24 <__assert_fail@plt+0x3d60>
   14e38:	movw	r1, #31843	; 0x7c63
   14e3c:	mov	r0, #0
   14e40:	mov	r2, #5
   14e44:	movt	r1, #1
   14e48:	bl	10fc0 <dcgettext@plt>
   14e4c:	ldr	r3, [r7]
   14e50:	mov	r2, r0
   14e54:	ldmib	r7, {r0, r1}
   14e58:	stm	sp, {r0, r1}
   14e5c:	b	14f24 <__assert_fail@plt+0x3d60>
   14e60:	movw	r1, #31871	; 0x7c7f
   14e64:	mov	r0, #0
   14e68:	mov	r2, #5
   14e6c:	movt	r1, #1
   14e70:	bl	10fc0 <dcgettext@plt>
   14e74:	ldr	r3, [r7]
   14e78:	mov	r2, r0
   14e7c:	ldmib	r7, {r0, r1, r7}
   14e80:	stm	sp, {r0, r1, r7}
   14e84:	b	14f24 <__assert_fail@plt+0x3d60>
   14e88:	movw	r1, #31903	; 0x7c9f
   14e8c:	mov	r0, #0
   14e90:	mov	r2, #5
   14e94:	movt	r1, #1
   14e98:	bl	10fc0 <dcgettext@plt>
   14e9c:	ldr	r3, [r7]
   14ea0:	mov	r2, r0
   14ea4:	ldmib	r7, {r0, r1, r6, r7}
   14ea8:	stm	sp, {r0, r1, r6, r7}
   14eac:	b	14f24 <__assert_fail@plt+0x3d60>
   14eb0:	movw	r1, #31939	; 0x7cc3
   14eb4:	mov	r0, #0
   14eb8:	mov	r2, #5
   14ebc:	movt	r1, #1
   14ec0:	bl	10fc0 <dcgettext@plt>
   14ec4:	ldr	r3, [r7]
   14ec8:	mov	r2, r0
   14ecc:	ldmib	r7, {r0, r1, r6}
   14ed0:	ldr	r5, [r7, #16]
   14ed4:	ldr	r7, [r7, #20]
   14ed8:	stm	sp, {r0, r1, r6}
   14edc:	str	r5, [sp, #12]
   14ee0:	str	r7, [sp, #16]
   14ee4:	b	14f24 <__assert_fail@plt+0x3d60>
   14ee8:	movw	r1, #31979	; 0x7ceb
   14eec:	mov	r0, #0
   14ef0:	mov	r2, #5
   14ef4:	movt	r1, #1
   14ef8:	bl	10fc0 <dcgettext@plt>
   14efc:	ldr	r3, [r7]
   14f00:	mov	r2, r0
   14f04:	ldmib	r7, {r0, r1, r6}
   14f08:	ldr	r5, [r7, #16]
   14f0c:	ldr	r4, [r7, #20]
   14f10:	ldr	r7, [r7, #24]
   14f14:	stm	sp, {r0, r1, r6}
   14f18:	str	r5, [sp, #12]
   14f1c:	str	r4, [sp, #16]
   14f20:	str	r7, [sp, #20]
   14f24:	mov	r0, r8
   14f28:	mov	r1, #1
   14f2c:	bl	11104 <__fprintf_chk@plt>
   14f30:	sub	sp, fp, #24
   14f34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f38:	movw	r1, #32071	; 0x7d47
   14f3c:	movt	r1, #1
   14f40:	mov	r0, #0
   14f44:	mov	r2, #5
   14f48:	bl	10fc0 <dcgettext@plt>
   14f4c:	mov	ip, r0
   14f50:	ldr	r3, [r7]
   14f54:	ldr	r0, [r7, #4]
   14f58:	ldr	r1, [r7, #8]
   14f5c:	ldr	r6, [r7, #12]
   14f60:	ldr	r5, [r7, #16]
   14f64:	ldr	r4, [r7, #20]
   14f68:	ldr	r2, [r7, #24]
   14f6c:	ldr	lr, [r7, #28]
   14f70:	ldr	r7, [r7, #32]
   14f74:	stm	sp, {r0, r1, r6}
   14f78:	str	r5, [sp, #12]
   14f7c:	str	r4, [sp, #16]
   14f80:	str	r2, [sp, #20]
   14f84:	str	lr, [sp, #24]
   14f88:	str	r7, [sp, #28]
   14f8c:	b	14fd4 <__assert_fail@plt+0x3e10>
   14f90:	movw	r1, #32023	; 0x7d17
   14f94:	mov	r0, #0
   14f98:	mov	r2, #5
   14f9c:	movt	r1, #1
   14fa0:	bl	10fc0 <dcgettext@plt>
   14fa4:	mov	ip, r0
   14fa8:	ldr	r3, [r7]
   14fac:	ldmib	r7, {r0, r1, r6}
   14fb0:	ldr	r5, [r7, #16]
   14fb4:	ldr	r4, [r7, #20]
   14fb8:	ldr	r2, [r7, #24]
   14fbc:	ldr	r7, [r7, #28]
   14fc0:	stm	sp, {r0, r1, r6}
   14fc4:	str	r5, [sp, #12]
   14fc8:	str	r4, [sp, #16]
   14fcc:	str	r2, [sp, #20]
   14fd0:	str	r7, [sp, #24]
   14fd4:	mov	r0, r8
   14fd8:	mov	r1, #1
   14fdc:	mov	r2, ip
   14fe0:	bl	11104 <__fprintf_chk@plt>
   14fe4:	sub	sp, fp, #24
   14fe8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fec:	push	{r4, sl, fp, lr}
   14ff0:	add	fp, sp, #8
   14ff4:	sub	sp, sp, #8
   14ff8:	ldr	ip, [fp, #8]
   14ffc:	mov	lr, #0
   15000:	ldr	r4, [ip, lr, lsl #2]
   15004:	add	lr, lr, #1
   15008:	cmp	r4, #0
   1500c:	bne	15000 <__assert_fail@plt+0x3e3c>
   15010:	sub	r4, lr, #1
   15014:	str	ip, [sp]
   15018:	str	r4, [sp, #4]
   1501c:	bl	14cb0 <__assert_fail@plt+0x3aec>
   15020:	sub	sp, fp, #8
   15024:	pop	{r4, sl, fp, pc}
   15028:	push	{fp, lr}
   1502c:	mov	fp, sp
   15030:	sub	sp, sp, #48	; 0x30
   15034:	ldr	ip, [fp, #8]
   15038:	ldr	lr, [ip]
   1503c:	cmp	lr, #0
   15040:	str	lr, [sp, #8]
   15044:	beq	150e0 <__assert_fail@plt+0x3f1c>
   15048:	ldr	lr, [ip, #4]
   1504c:	cmp	lr, #0
   15050:	str	lr, [sp, #12]
   15054:	beq	150e8 <__assert_fail@plt+0x3f24>
   15058:	ldr	lr, [ip, #8]
   1505c:	cmp	lr, #0
   15060:	str	lr, [sp, #16]
   15064:	beq	150f0 <__assert_fail@plt+0x3f2c>
   15068:	ldr	lr, [ip, #12]
   1506c:	cmp	lr, #0
   15070:	str	lr, [sp, #20]
   15074:	beq	150f8 <__assert_fail@plt+0x3f34>
   15078:	ldr	lr, [ip, #16]
   1507c:	cmp	lr, #0
   15080:	str	lr, [sp, #24]
   15084:	beq	15100 <__assert_fail@plt+0x3f3c>
   15088:	ldr	lr, [ip, #20]
   1508c:	cmp	lr, #0
   15090:	str	lr, [sp, #28]
   15094:	beq	15108 <__assert_fail@plt+0x3f44>
   15098:	ldr	lr, [ip, #24]
   1509c:	cmp	lr, #0
   150a0:	str	lr, [sp, #32]
   150a4:	beq	15110 <__assert_fail@plt+0x3f4c>
   150a8:	ldr	lr, [ip, #28]
   150ac:	cmp	lr, #0
   150b0:	str	lr, [sp, #36]	; 0x24
   150b4:	beq	15118 <__assert_fail@plt+0x3f54>
   150b8:	ldr	lr, [ip, #32]
   150bc:	cmp	lr, #0
   150c0:	str	lr, [sp, #40]	; 0x28
   150c4:	beq	15120 <__assert_fail@plt+0x3f5c>
   150c8:	ldr	lr, [ip, #36]	; 0x24
   150cc:	mov	ip, #10
   150d0:	cmp	lr, #0
   150d4:	str	lr, [sp, #44]	; 0x2c
   150d8:	movweq	ip, #9
   150dc:	b	15124 <__assert_fail@plt+0x3f60>
   150e0:	mov	ip, #0
   150e4:	b	15124 <__assert_fail@plt+0x3f60>
   150e8:	mov	ip, #1
   150ec:	b	15124 <__assert_fail@plt+0x3f60>
   150f0:	mov	ip, #2
   150f4:	b	15124 <__assert_fail@plt+0x3f60>
   150f8:	mov	ip, #3
   150fc:	b	15124 <__assert_fail@plt+0x3f60>
   15100:	mov	ip, #4
   15104:	b	15124 <__assert_fail@plt+0x3f60>
   15108:	mov	ip, #5
   1510c:	b	15124 <__assert_fail@plt+0x3f60>
   15110:	mov	ip, #6
   15114:	b	15124 <__assert_fail@plt+0x3f60>
   15118:	mov	ip, #7
   1511c:	b	15124 <__assert_fail@plt+0x3f60>
   15120:	mov	ip, #8
   15124:	add	lr, sp, #8
   15128:	str	ip, [sp, #4]
   1512c:	str	lr, [sp]
   15130:	bl	14cb0 <__assert_fail@plt+0x3aec>
   15134:	mov	sp, fp
   15138:	pop	{fp, pc}
   1513c:	push	{fp, lr}
   15140:	mov	fp, sp
   15144:	sub	sp, sp, #56	; 0x38
   15148:	add	ip, fp, #8
   1514c:	str	ip, [sp, #12]
   15150:	ldr	lr, [fp, #8]
   15154:	cmp	lr, #0
   15158:	str	lr, [sp, #16]
   1515c:	beq	151f8 <__assert_fail@plt+0x4034>
   15160:	ldr	lr, [ip, #4]
   15164:	cmp	lr, #0
   15168:	str	lr, [sp, #20]
   1516c:	beq	15200 <__assert_fail@plt+0x403c>
   15170:	ldr	lr, [ip, #8]
   15174:	cmp	lr, #0
   15178:	str	lr, [sp, #24]
   1517c:	beq	15208 <__assert_fail@plt+0x4044>
   15180:	ldr	lr, [ip, #12]
   15184:	cmp	lr, #0
   15188:	str	lr, [sp, #28]
   1518c:	beq	15210 <__assert_fail@plt+0x404c>
   15190:	ldr	lr, [ip, #16]
   15194:	cmp	lr, #0
   15198:	str	lr, [sp, #32]
   1519c:	beq	15218 <__assert_fail@plt+0x4054>
   151a0:	ldr	lr, [ip, #20]
   151a4:	cmp	lr, #0
   151a8:	str	lr, [sp, #36]	; 0x24
   151ac:	beq	15220 <__assert_fail@plt+0x405c>
   151b0:	ldr	lr, [ip, #24]
   151b4:	cmp	lr, #0
   151b8:	str	lr, [sp, #40]	; 0x28
   151bc:	beq	15228 <__assert_fail@plt+0x4064>
   151c0:	ldr	lr, [ip, #28]
   151c4:	cmp	lr, #0
   151c8:	str	lr, [sp, #44]	; 0x2c
   151cc:	beq	15230 <__assert_fail@plt+0x406c>
   151d0:	ldr	lr, [ip, #32]
   151d4:	cmp	lr, #0
   151d8:	str	lr, [sp, #48]	; 0x30
   151dc:	beq	15238 <__assert_fail@plt+0x4074>
   151e0:	ldr	lr, [ip, #36]	; 0x24
   151e4:	mov	ip, #10
   151e8:	cmp	lr, #0
   151ec:	str	lr, [sp, #52]	; 0x34
   151f0:	movweq	ip, #9
   151f4:	b	1523c <__assert_fail@plt+0x4078>
   151f8:	mov	ip, #0
   151fc:	b	1523c <__assert_fail@plt+0x4078>
   15200:	mov	ip, #1
   15204:	b	1523c <__assert_fail@plt+0x4078>
   15208:	mov	ip, #2
   1520c:	b	1523c <__assert_fail@plt+0x4078>
   15210:	mov	ip, #3
   15214:	b	1523c <__assert_fail@plt+0x4078>
   15218:	mov	ip, #4
   1521c:	b	1523c <__assert_fail@plt+0x4078>
   15220:	mov	ip, #5
   15224:	b	1523c <__assert_fail@plt+0x4078>
   15228:	mov	ip, #6
   1522c:	b	1523c <__assert_fail@plt+0x4078>
   15230:	mov	ip, #7
   15234:	b	1523c <__assert_fail@plt+0x4078>
   15238:	mov	ip, #8
   1523c:	add	lr, sp, #16
   15240:	str	ip, [sp, #4]
   15244:	str	lr, [sp]
   15248:	bl	14cb0 <__assert_fail@plt+0x3aec>
   1524c:	mov	sp, fp
   15250:	pop	{fp, pc}
   15254:	push	{fp, lr}
   15258:	mov	fp, sp
   1525c:	movw	r0, #37228	; 0x916c
   15260:	movt	r0, #2
   15264:	ldr	r1, [r0]
   15268:	movw	r0, #31010	; 0x7922
   1526c:	movt	r0, #1
   15270:	bl	10f30 <fputs_unlocked@plt>
   15274:	movw	r1, #32183	; 0x7db7
   15278:	mov	r0, #0
   1527c:	mov	r2, #5
   15280:	movt	r1, #1
   15284:	bl	10fc0 <dcgettext@plt>
   15288:	movw	r2, #32203	; 0x7dcb
   1528c:	mov	r1, r0
   15290:	mov	r0, #1
   15294:	movt	r2, #1
   15298:	bl	110ec <__printf_chk@plt>
   1529c:	movw	r1, #32225	; 0x7de1
   152a0:	mov	r0, #0
   152a4:	mov	r2, #5
   152a8:	movt	r1, #1
   152ac:	bl	10fc0 <dcgettext@plt>
   152b0:	movw	r2, #30582	; 0x7776
   152b4:	movw	r3, #30819	; 0x7863
   152b8:	mov	r1, r0
   152bc:	mov	r0, #1
   152c0:	movt	r2, #1
   152c4:	movt	r3, #1
   152c8:	bl	110ec <__printf_chk@plt>
   152cc:	movw	r1, #32245	; 0x7df5
   152d0:	mov	r0, #0
   152d4:	mov	r2, #5
   152d8:	movt	r1, #1
   152dc:	bl	10fc0 <dcgettext@plt>
   152e0:	movw	r2, #32284	; 0x7e1c
   152e4:	mov	r1, r0
   152e8:	mov	r0, #1
   152ec:	movt	r2, #1
   152f0:	pop	{fp, lr}
   152f4:	b	110ec <__printf_chk@plt>
   152f8:	push	{r4, r5, r6, sl, fp, lr}
   152fc:	add	fp, sp, #16
   15300:	mov	r4, r2
   15304:	mov	r5, r1
   15308:	mov	r6, r0
   1530c:	bl	16ea8 <__assert_fail@plt+0x5ce4>
   15310:	cmp	r0, #0
   15314:	popne	{r4, r5, r6, sl, fp, pc}
   15318:	cmp	r6, #0
   1531c:	beq	15330 <__assert_fail@plt+0x416c>
   15320:	cmp	r5, #0
   15324:	cmpne	r4, #0
   15328:	bne	15330 <__assert_fail@plt+0x416c>
   1532c:	pop	{r4, r5, r6, sl, fp, pc}
   15330:	bl	158d0 <__assert_fail@plt+0x470c>
   15334:	push	{r4, r5, r6, sl, fp, lr}
   15338:	add	fp, sp, #16
   1533c:	mov	r4, r2
   15340:	mov	r5, r1
   15344:	mov	r6, r0
   15348:	bl	16ea8 <__assert_fail@plt+0x5ce4>
   1534c:	cmp	r0, #0
   15350:	popne	{r4, r5, r6, sl, fp, pc}
   15354:	cmp	r6, #0
   15358:	beq	1536c <__assert_fail@plt+0x41a8>
   1535c:	cmp	r5, #0
   15360:	cmpne	r4, #0
   15364:	bne	1536c <__assert_fail@plt+0x41a8>
   15368:	pop	{r4, r5, r6, sl, fp, pc}
   1536c:	bl	158d0 <__assert_fail@plt+0x470c>
   15370:	push	{fp, lr}
   15374:	mov	fp, sp
   15378:	bl	1661c <__assert_fail@plt+0x5458>
   1537c:	cmp	r0, #0
   15380:	popne	{fp, pc}
   15384:	bl	158d0 <__assert_fail@plt+0x470c>
   15388:	push	{fp, lr}
   1538c:	mov	fp, sp
   15390:	bl	1661c <__assert_fail@plt+0x5458>
   15394:	cmp	r0, #0
   15398:	popne	{fp, pc}
   1539c:	bl	158d0 <__assert_fail@plt+0x470c>
   153a0:	push	{fp, lr}
   153a4:	mov	fp, sp
   153a8:	bl	1661c <__assert_fail@plt+0x5458>
   153ac:	cmp	r0, #0
   153b0:	popne	{fp, pc}
   153b4:	bl	158d0 <__assert_fail@plt+0x470c>
   153b8:	push	{r4, r5, fp, lr}
   153bc:	add	fp, sp, #8
   153c0:	mov	r4, r1
   153c4:	mov	r5, r0
   153c8:	bl	1664c <__assert_fail@plt+0x5488>
   153cc:	cmp	r0, #0
   153d0:	popne	{r4, r5, fp, pc}
   153d4:	cmp	r5, #0
   153d8:	beq	153e8 <__assert_fail@plt+0x4224>
   153dc:	cmp	r4, #0
   153e0:	bne	153e8 <__assert_fail@plt+0x4224>
   153e4:	pop	{r4, r5, fp, pc}
   153e8:	bl	158d0 <__assert_fail@plt+0x470c>
   153ec:	push	{fp, lr}
   153f0:	mov	fp, sp
   153f4:	cmp	r1, #0
   153f8:	orreq	r1, r1, #1
   153fc:	bl	1664c <__assert_fail@plt+0x5488>
   15400:	cmp	r0, #0
   15404:	popne	{fp, pc}
   15408:	bl	158d0 <__assert_fail@plt+0x470c>
   1540c:	push	{fp, lr}
   15410:	mov	fp, sp
   15414:	clz	r3, r2
   15418:	lsr	ip, r3, #5
   1541c:	clz	r3, r1
   15420:	lsr	r3, r3, #5
   15424:	orrs	r3, r3, ip
   15428:	movwne	r1, #1
   1542c:	movwne	r2, #1
   15430:	bl	16ea8 <__assert_fail@plt+0x5ce4>
   15434:	cmp	r0, #0
   15438:	popne	{fp, pc}
   1543c:	bl	158d0 <__assert_fail@plt+0x470c>
   15440:	push	{fp, lr}
   15444:	mov	fp, sp
   15448:	mov	r2, r1
   1544c:	mov	r1, r0
   15450:	mov	r0, #0
   15454:	bl	16ea8 <__assert_fail@plt+0x5ce4>
   15458:	cmp	r0, #0
   1545c:	popne	{fp, pc}
   15460:	bl	158d0 <__assert_fail@plt+0x470c>
   15464:	push	{fp, lr}
   15468:	mov	fp, sp
   1546c:	mov	r2, r1
   15470:	mov	r1, r0
   15474:	clz	r0, r2
   15478:	clz	r3, r1
   1547c:	lsr	r0, r0, #5
   15480:	lsr	r3, r3, #5
   15484:	orrs	r0, r3, r0
   15488:	movwne	r1, #1
   1548c:	movwne	r2, #1
   15490:	mov	r0, #0
   15494:	bl	16ea8 <__assert_fail@plt+0x5ce4>
   15498:	cmp	r0, #0
   1549c:	popne	{fp, pc}
   154a0:	bl	158d0 <__assert_fail@plt+0x470c>
   154a4:	push	{r4, r5, r6, sl, fp, lr}
   154a8:	add	fp, sp, #16
   154ac:	ldr	r5, [r1]
   154b0:	mov	r4, r1
   154b4:	mov	r6, r0
   154b8:	cmp	r0, #0
   154bc:	beq	154d4 <__assert_fail@plt+0x4310>
   154c0:	mov	r0, #1
   154c4:	add	r0, r0, r5, lsr #1
   154c8:	adds	r5, r5, r0
   154cc:	bcc	154dc <__assert_fail@plt+0x4318>
   154d0:	b	15518 <__assert_fail@plt+0x4354>
   154d4:	cmp	r5, #0
   154d8:	movweq	r5, #64	; 0x40
   154dc:	mov	r0, r6
   154e0:	mov	r1, r5
   154e4:	mov	r2, #1
   154e8:	bl	16ea8 <__assert_fail@plt+0x5ce4>
   154ec:	cmp	r5, #0
   154f0:	mov	r1, r5
   154f4:	movwne	r1, #1
   154f8:	cmp	r0, #0
   154fc:	bne	15510 <__assert_fail@plt+0x434c>
   15500:	clz	r2, r6
   15504:	lsr	r2, r2, #5
   15508:	orrs	r1, r2, r1
   1550c:	bne	15518 <__assert_fail@plt+0x4354>
   15510:	str	r5, [r4]
   15514:	pop	{r4, r5, r6, sl, fp, pc}
   15518:	bl	158d0 <__assert_fail@plt+0x470c>
   1551c:	push	{r4, r5, r6, r7, fp, lr}
   15520:	add	fp, sp, #16
   15524:	ldr	r5, [r1]
   15528:	mov	r6, r2
   1552c:	mov	r4, r1
   15530:	mov	r7, r0
   15534:	cmp	r0, #0
   15538:	beq	15550 <__assert_fail@plt+0x438c>
   1553c:	mov	r0, #1
   15540:	add	r0, r0, r5, lsr #1
   15544:	adds	r5, r5, r0
   15548:	bcc	15568 <__assert_fail@plt+0x43a4>
   1554c:	b	1559c <__assert_fail@plt+0x43d8>
   15550:	cmp	r5, #0
   15554:	bne	15568 <__assert_fail@plt+0x43a4>
   15558:	mov	r0, #64	; 0x40
   1555c:	cmp	r6, #64	; 0x40
   15560:	udiv	r5, r0, r6
   15564:	addhi	r5, r5, #1
   15568:	mov	r0, r7
   1556c:	mov	r1, r5
   15570:	mov	r2, r6
   15574:	bl	16ea8 <__assert_fail@plt+0x5ce4>
   15578:	cmp	r0, #0
   1557c:	bne	15594 <__assert_fail@plt+0x43d0>
   15580:	cmp	r7, #0
   15584:	beq	1559c <__assert_fail@plt+0x43d8>
   15588:	cmp	r6, #0
   1558c:	cmpne	r5, #0
   15590:	bne	1559c <__assert_fail@plt+0x43d8>
   15594:	str	r5, [r4]
   15598:	pop	{r4, r5, r6, r7, fp, pc}
   1559c:	bl	158d0 <__assert_fail@plt+0x470c>
   155a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155a4:	add	fp, sp, #24
   155a8:	mov	r8, r1
   155ac:	ldr	r1, [r1]
   155b0:	mov	r5, r0
   155b4:	add	r0, r1, r1, asr #1
   155b8:	cmp	r0, r1
   155bc:	mvnvs	r0, #-2147483648	; 0x80000000
   155c0:	cmp	r0, r3
   155c4:	mov	r7, r0
   155c8:	movgt	r7, r3
   155cc:	cmn	r3, #1
   155d0:	movle	r7, r0
   155d4:	ldr	r0, [fp, #8]
   155d8:	cmn	r0, #1
   155dc:	ble	15604 <__assert_fail@plt+0x4440>
   155e0:	cmp	r0, #0
   155e4:	beq	15658 <__assert_fail@plt+0x4494>
   155e8:	cmn	r7, #1
   155ec:	ble	1562c <__assert_fail@plt+0x4468>
   155f0:	mvn	r4, #-2147483648	; 0x80000000
   155f4:	udiv	r6, r4, r0
   155f8:	cmp	r6, r7
   155fc:	bge	15658 <__assert_fail@plt+0x4494>
   15600:	b	15668 <__assert_fail@plt+0x44a4>
   15604:	cmn	r7, #1
   15608:	ble	15648 <__assert_fail@plt+0x4484>
   1560c:	cmn	r0, #1
   15610:	beq	15658 <__assert_fail@plt+0x4494>
   15614:	mov	r6, #-2147483648	; 0x80000000
   15618:	mvn	r4, #-2147483648	; 0x80000000
   1561c:	sdiv	r6, r6, r0
   15620:	cmp	r6, r7
   15624:	bge	15658 <__assert_fail@plt+0x4494>
   15628:	b	15668 <__assert_fail@plt+0x44a4>
   1562c:	beq	15658 <__assert_fail@plt+0x4494>
   15630:	mov	r6, #-2147483648	; 0x80000000
   15634:	mvn	r4, #-2147483648	; 0x80000000
   15638:	sdiv	r6, r6, r7
   1563c:	cmp	r6, r0
   15640:	bge	15658 <__assert_fail@plt+0x4494>
   15644:	b	15668 <__assert_fail@plt+0x44a4>
   15648:	mvn	r4, #-2147483648	; 0x80000000
   1564c:	sdiv	r6, r4, r0
   15650:	cmp	r7, r6
   15654:	blt	15668 <__assert_fail@plt+0x44a4>
   15658:	mul	r6, r7, r0
   1565c:	mov	r4, #64	; 0x40
   15660:	cmp	r6, #63	; 0x3f
   15664:	bgt	15670 <__assert_fail@plt+0x44ac>
   15668:	sdiv	r7, r4, r0
   1566c:	mul	r6, r7, r0
   15670:	cmp	r5, #0
   15674:	moveq	r4, #0
   15678:	streq	r4, [r8]
   1567c:	sub	r4, r7, r1
   15680:	cmp	r4, r2
   15684:	bge	15730 <__assert_fail@plt+0x456c>
   15688:	add	r7, r1, r2
   1568c:	mov	r6, #0
   15690:	mov	r2, #0
   15694:	cmp	r7, r3
   15698:	movwgt	r6, #1
   1569c:	cmn	r3, #1
   156a0:	movwgt	r2, #1
   156a4:	cmp	r7, r1
   156a8:	bvs	15764 <__assert_fail@plt+0x45a0>
   156ac:	ands	r1, r2, r6
   156b0:	bne	15764 <__assert_fail@plt+0x45a0>
   156b4:	cmn	r0, #1
   156b8:	ble	156e0 <__assert_fail@plt+0x451c>
   156bc:	cmp	r0, #0
   156c0:	beq	1572c <__assert_fail@plt+0x4568>
   156c4:	cmn	r7, #1
   156c8:	ble	15704 <__assert_fail@plt+0x4540>
   156cc:	mvn	r1, #-2147483648	; 0x80000000
   156d0:	udiv	r1, r1, r0
   156d4:	cmp	r1, r7
   156d8:	bge	1572c <__assert_fail@plt+0x4568>
   156dc:	b	15764 <__assert_fail@plt+0x45a0>
   156e0:	cmn	r7, #1
   156e4:	ble	1571c <__assert_fail@plt+0x4558>
   156e8:	cmn	r0, #1
   156ec:	beq	1572c <__assert_fail@plt+0x4568>
   156f0:	mov	r1, #-2147483648	; 0x80000000
   156f4:	sdiv	r1, r1, r0
   156f8:	cmp	r1, r7
   156fc:	bge	1572c <__assert_fail@plt+0x4568>
   15700:	b	15764 <__assert_fail@plt+0x45a0>
   15704:	beq	1572c <__assert_fail@plt+0x4568>
   15708:	mov	r1, #-2147483648	; 0x80000000
   1570c:	sdiv	r1, r1, r7
   15710:	cmp	r1, r0
   15714:	bge	1572c <__assert_fail@plt+0x4568>
   15718:	b	15764 <__assert_fail@plt+0x45a0>
   1571c:	mvn	r1, #-2147483648	; 0x80000000
   15720:	sdiv	r1, r1, r0
   15724:	cmp	r7, r1
   15728:	blt	15764 <__assert_fail@plt+0x45a0>
   1572c:	mul	r6, r7, r0
   15730:	mov	r0, r5
   15734:	mov	r1, r6
   15738:	bl	1664c <__assert_fail@plt+0x5488>
   1573c:	cmp	r6, #0
   15740:	movwne	r6, #1
   15744:	cmp	r0, #0
   15748:	bne	1575c <__assert_fail@plt+0x4598>
   1574c:	clz	r1, r5
   15750:	lsr	r1, r1, #5
   15754:	orrs	r1, r1, r6
   15758:	bne	15764 <__assert_fail@plt+0x45a0>
   1575c:	str	r7, [r8]
   15760:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15764:	bl	158d0 <__assert_fail@plt+0x470c>
   15768:	push	{fp, lr}
   1576c:	mov	fp, sp
   15770:	mov	r1, #1
   15774:	bl	165c8 <__assert_fail@plt+0x5404>
   15778:	cmp	r0, #0
   1577c:	popne	{fp, pc}
   15780:	bl	158d0 <__assert_fail@plt+0x470c>
   15784:	push	{fp, lr}
   15788:	mov	fp, sp
   1578c:	bl	165c8 <__assert_fail@plt+0x5404>
   15790:	cmp	r0, #0
   15794:	popne	{fp, pc}
   15798:	bl	158d0 <__assert_fail@plt+0x470c>
   1579c:	push	{fp, lr}
   157a0:	mov	fp, sp
   157a4:	mov	r1, #1
   157a8:	bl	165c8 <__assert_fail@plt+0x5404>
   157ac:	cmp	r0, #0
   157b0:	popne	{fp, pc}
   157b4:	bl	158d0 <__assert_fail@plt+0x470c>
   157b8:	push	{fp, lr}
   157bc:	mov	fp, sp
   157c0:	bl	165c8 <__assert_fail@plt+0x5404>
   157c4:	cmp	r0, #0
   157c8:	popne	{fp, pc}
   157cc:	bl	158d0 <__assert_fail@plt+0x470c>
   157d0:	push	{r4, r5, r6, sl, fp, lr}
   157d4:	add	fp, sp, #16
   157d8:	mov	r5, r0
   157dc:	mov	r0, r1
   157e0:	mov	r4, r1
   157e4:	bl	1661c <__assert_fail@plt+0x5458>
   157e8:	cmp	r0, #0
   157ec:	beq	15808 <__assert_fail@plt+0x4644>
   157f0:	mov	r1, r5
   157f4:	mov	r2, r4
   157f8:	mov	r6, r0
   157fc:	bl	10f90 <memcpy@plt>
   15800:	mov	r0, r6
   15804:	pop	{r4, r5, r6, sl, fp, pc}
   15808:	bl	158d0 <__assert_fail@plt+0x470c>
   1580c:	push	{r4, r5, r6, sl, fp, lr}
   15810:	add	fp, sp, #16
   15814:	mov	r5, r0
   15818:	mov	r0, r1
   1581c:	mov	r4, r1
   15820:	bl	1661c <__assert_fail@plt+0x5458>
   15824:	cmp	r0, #0
   15828:	beq	15844 <__assert_fail@plt+0x4680>
   1582c:	mov	r1, r5
   15830:	mov	r2, r4
   15834:	mov	r6, r0
   15838:	bl	10f90 <memcpy@plt>
   1583c:	mov	r0, r6
   15840:	pop	{r4, r5, r6, sl, fp, pc}
   15844:	bl	158d0 <__assert_fail@plt+0x470c>
   15848:	push	{r4, r5, r6, sl, fp, lr}
   1584c:	add	fp, sp, #16
   15850:	mov	r5, r0
   15854:	add	r0, r1, #1
   15858:	mov	r4, r1
   1585c:	bl	1661c <__assert_fail@plt+0x5458>
   15860:	cmp	r0, #0
   15864:	beq	1588c <__assert_fail@plt+0x46c8>
   15868:	mov	r6, r0
   1586c:	mov	r0, #0
   15870:	mov	r1, r5
   15874:	mov	r2, r4
   15878:	strb	r0, [r6, r4]
   1587c:	mov	r0, r6
   15880:	bl	10f90 <memcpy@plt>
   15884:	mov	r0, r6
   15888:	pop	{r4, r5, r6, sl, fp, pc}
   1588c:	bl	158d0 <__assert_fail@plt+0x470c>
   15890:	push	{r4, r5, r6, sl, fp, lr}
   15894:	add	fp, sp, #16
   15898:	mov	r4, r0
   1589c:	bl	11098 <strlen@plt>
   158a0:	add	r5, r0, #1
   158a4:	mov	r0, r5
   158a8:	bl	1661c <__assert_fail@plt+0x5458>
   158ac:	cmp	r0, #0
   158b0:	beq	158cc <__assert_fail@plt+0x4708>
   158b4:	mov	r1, r4
   158b8:	mov	r2, r5
   158bc:	mov	r6, r0
   158c0:	bl	10f90 <memcpy@plt>
   158c4:	mov	r0, r6
   158c8:	pop	{r4, r5, r6, sl, fp, pc}
   158cc:	bl	158d0 <__assert_fail@plt+0x470c>
   158d0:	push	{fp, lr}
   158d4:	mov	fp, sp
   158d8:	movw	r0, #37124	; 0x9104
   158dc:	movw	r1, #32360	; 0x7e68
   158e0:	mov	r2, #5
   158e4:	movt	r0, #2
   158e8:	movt	r1, #1
   158ec:	ldr	r4, [r0]
   158f0:	mov	r0, #0
   158f4:	bl	10fc0 <dcgettext@plt>
   158f8:	movw	r2, #32597	; 0x7f55
   158fc:	mov	r3, r0
   15900:	mov	r0, r4
   15904:	mov	r1, #0
   15908:	movt	r2, #1
   1590c:	bl	1102c <error@plt>
   15910:	bl	111ac <abort@plt>
   15914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15918:	add	fp, sp, #28
   1591c:	sub	sp, sp, #44	; 0x2c
   15920:	cmp	r2, #37	; 0x25
   15924:	bcs	165a8 <__assert_fail@plt+0x53e4>
   15928:	ldr	sl, [fp, #8]
   1592c:	mov	r6, r2
   15930:	mov	r7, r1
   15934:	mov	r4, r0
   15938:	str	r3, [sp, #36]	; 0x24
   1593c:	bl	110b0 <__errno_location@plt>
   15940:	mov	r5, r0
   15944:	mov	r0, #0
   15948:	str	r0, [r5]
   1594c:	bl	11080 <__ctype_b_loc@plt>
   15950:	ldr	r1, [r0]
   15954:	mov	r2, r4
   15958:	ldrb	r0, [r2], #1
   1595c:	add	r3, r1, r0, lsl #1
   15960:	ldrb	r3, [r3, #1]
   15964:	tst	r3, #32
   15968:	bne	15958 <__assert_fail@plt+0x4794>
   1596c:	sub	r9, fp, #32
   15970:	cmp	r7, #0
   15974:	mov	r8, #4
   15978:	movne	r9, r7
   1597c:	cmp	r0, #45	; 0x2d
   15980:	beq	15d40 <__assert_fail@plt+0x4b7c>
   15984:	mov	r0, r4
   15988:	mov	r1, r9
   1598c:	mov	r2, r6
   15990:	mov	r3, #0
   15994:	bl	10f9c <__strtoull_internal@plt>
   15998:	mov	r7, r1
   1599c:	ldr	r1, [r9]
   159a0:	cmp	r1, r4
   159a4:	beq	159dc <__assert_fail@plt+0x4818>
   159a8:	mov	r6, r0
   159ac:	ldr	r0, [r5]
   159b0:	cmp	r0, #0
   159b4:	beq	15cf8 <__assert_fail@plt+0x4b34>
   159b8:	cmp	r0, #34	; 0x22
   159bc:	bne	15d40 <__assert_fail@plt+0x4b7c>
   159c0:	mov	r8, #1
   159c4:	cmp	sl, #0
   159c8:	beq	16594 <__assert_fail@plt+0x53d0>
   159cc:	ldrb	r4, [r1]
   159d0:	cmp	r4, #0
   159d4:	bne	15a20 <__assert_fail@plt+0x485c>
   159d8:	b	16594 <__assert_fail@plt+0x53d0>
   159dc:	cmp	sl, #0
   159e0:	beq	15d40 <__assert_fail@plt+0x4b7c>
   159e4:	mov	r5, r1
   159e8:	ldrb	r1, [r4]
   159ec:	cmp	r1, #0
   159f0:	beq	15d40 <__assert_fail@plt+0x4b7c>
   159f4:	mov	r0, sl
   159f8:	bl	110a4 <strchr@plt>
   159fc:	cmp	r0, #0
   15a00:	beq	15d40 <__assert_fail@plt+0x4b7c>
   15a04:	mov	r1, r5
   15a08:	mov	r8, #0
   15a0c:	mov	r6, #1
   15a10:	mov	r7, #0
   15a14:	ldrb	r4, [r1]
   15a18:	cmp	r4, #0
   15a1c:	beq	16594 <__assert_fail@plt+0x53d0>
   15a20:	str	r1, [sp, #32]
   15a24:	mov	r0, sl
   15a28:	mov	r1, r4
   15a2c:	bl	110a4 <strchr@plt>
   15a30:	cmp	r0, #0
   15a34:	beq	15d34 <__assert_fail@plt+0x4b70>
   15a38:	sub	r0, r4, #69	; 0x45
   15a3c:	mov	r1, #1
   15a40:	mov	r3, #0
   15a44:	mov	r5, #1024	; 0x400
   15a48:	cmp	r0, #47	; 0x2f
   15a4c:	str	r1, [sp, #28]
   15a50:	bhi	15b54 <__assert_fail@plt+0x4990>
   15a54:	add	r1, pc, #0
   15a58:	ldr	pc, [r1, r0, lsl #2]
   15a5c:	andeq	r5, r1, ip, lsl fp
   15a60:	andeq	r5, r1, r4, asr fp
   15a64:	andeq	r5, r1, ip, lsl fp
   15a68:	andeq	r5, r1, r4, asr fp
   15a6c:	andeq	r5, r1, r4, asr fp
   15a70:	andeq	r5, r1, r4, asr fp
   15a74:	andeq	r5, r1, ip, lsl fp
   15a78:	andeq	r5, r1, r4, asr fp
   15a7c:	andeq	r5, r1, ip, lsl fp
   15a80:	andeq	r5, r1, r4, asr fp
   15a84:	andeq	r5, r1, r4, asr fp
   15a88:	andeq	r5, r1, ip, lsl fp
   15a8c:	andeq	r5, r1, r4, asr fp
   15a90:	andeq	r5, r1, r4, asr fp
   15a94:	andeq	r5, r1, r4, asr fp
   15a98:	andeq	r5, r1, ip, lsl fp
   15a9c:	andeq	r5, r1, r4, asr fp
   15aa0:	andeq	r5, r1, r4, asr fp
   15aa4:	andeq	r5, r1, r4, asr fp
   15aa8:	andeq	r5, r1, r4, asr fp
   15aac:	andeq	r5, r1, ip, lsl fp
   15ab0:	andeq	r5, r1, ip, lsl fp
   15ab4:	andeq	r5, r1, r4, asr fp
   15ab8:	andeq	r5, r1, r4, asr fp
   15abc:	andeq	r5, r1, r4, asr fp
   15ac0:	andeq	r5, r1, r4, asr fp
   15ac4:	andeq	r5, r1, r4, asr fp
   15ac8:	andeq	r5, r1, r4, asr fp
   15acc:	andeq	r5, r1, r4, asr fp
   15ad0:	andeq	r5, r1, r4, asr fp
   15ad4:	andeq	r5, r1, r4, asr fp
   15ad8:	andeq	r5, r1, r4, asr fp
   15adc:	andeq	r5, r1, r4, asr fp
   15ae0:	andeq	r5, r1, r4, asr fp
   15ae4:	andeq	r5, r1, ip, lsl fp
   15ae8:	andeq	r5, r1, r4, asr fp
   15aec:	andeq	r5, r1, r4, asr fp
   15af0:	andeq	r5, r1, r4, asr fp
   15af4:	andeq	r5, r1, ip, lsl fp
   15af8:	andeq	r5, r1, r4, asr fp
   15afc:	andeq	r5, r1, ip, lsl fp
   15b00:	andeq	r5, r1, r4, asr fp
   15b04:	andeq	r5, r1, r4, asr fp
   15b08:	andeq	r5, r1, r4, asr fp
   15b0c:	andeq	r5, r1, r4, asr fp
   15b10:	andeq	r5, r1, r4, asr fp
   15b14:	andeq	r5, r1, r4, asr fp
   15b18:	andeq	r5, r1, ip, lsl fp
   15b1c:	mov	r0, sl
   15b20:	mov	r1, #48	; 0x30
   15b24:	bl	110a4 <strchr@plt>
   15b28:	cmp	r0, #0
   15b2c:	beq	15b50 <__assert_fail@plt+0x498c>
   15b30:	ldr	r1, [sp, #32]
   15b34:	ldrb	r0, [r1, #1]
   15b38:	cmp	r0, #66	; 0x42
   15b3c:	cmpne	r0, #68	; 0x44
   15b40:	bne	15d08 <__assert_fail@plt+0x4b44>
   15b44:	mov	r5, #1000	; 0x3e8
   15b48:	mov	r0, #2
   15b4c:	str	r0, [sp, #28]
   15b50:	mov	r3, #0
   15b54:	sub	r0, r4, #66	; 0x42
   15b58:	cmp	r0, #53	; 0x35
   15b5c:	bhi	15d34 <__assert_fail@plt+0x4b70>
   15b60:	add	r1, pc, #0
   15b64:	ldr	pc, [r1, r0, lsl #2]
   15b68:	andeq	r6, r1, r4, lsr #1
   15b6c:	andeq	r5, r1, r4, lsr sp
   15b70:	andeq	r5, r1, r4, lsr sp
   15b74:	andeq	r6, r1, ip, asr #1
   15b78:	andeq	r5, r1, r4, lsr sp
   15b7c:	andeq	r5, r1, r0, asr #24
   15b80:	andeq	r5, r1, r4, lsr sp
   15b84:	andeq	r5, r1, r4, lsr sp
   15b88:	andeq	r5, r1, r4, lsr sp
   15b8c:	andeq	r5, r1, ip, asr #26
   15b90:	andeq	r5, r1, r4, lsr sp
   15b94:	muleq	r1, r4, sp
   15b98:	andeq	r5, r1, r4, lsr sp
   15b9c:	andeq	r5, r1, r4, lsr sp
   15ba0:	andeq	r6, r1, r0, lsr #4
   15ba4:	andeq	r5, r1, r4, lsr sp
   15ba8:	andeq	r5, r1, r4, lsr sp
   15bac:	andeq	r5, r1, r4, lsr sp
   15bb0:	andeq	r5, r1, r0, lsr #28
   15bb4:	andeq	r5, r1, r4, lsr sp
   15bb8:	andeq	r5, r1, r4, lsr sp
   15bbc:	andeq	r5, r1, r4, lsr sp
   15bc0:	andeq	r5, r1, r4, lsr sp
   15bc4:	andeq	r6, r1, r8, asr #6
   15bc8:	andeq	r5, r1, r8, lsl #30
   15bcc:	andeq	r5, r1, r4, lsr sp
   15bd0:	andeq	r5, r1, r4, lsr sp
   15bd4:	andeq	r5, r1, r4, lsr sp
   15bd8:	andeq	r5, r1, r4, lsr sp
   15bdc:	andeq	r5, r1, r4, lsr sp
   15be0:	andeq	r5, r1, r4, lsr sp
   15be4:	andeq	r5, r1, r4, lsr sp
   15be8:	andeq	r6, r1, ip, lsl r5
   15bec:	andeq	r6, r1, r4, ror r5
   15bf0:	andeq	r5, r1, r4, lsr sp
   15bf4:	andeq	r5, r1, r4, lsr sp
   15bf8:	andeq	r5, r1, r4, lsr sp
   15bfc:	andeq	r5, r1, r0, asr #24
   15c00:	andeq	r5, r1, r4, lsr sp
   15c04:	andeq	r5, r1, r4, lsr sp
   15c08:	andeq	r5, r1, r4, lsr sp
   15c0c:	andeq	r5, r1, ip, asr #26
   15c10:	andeq	r5, r1, r4, lsr sp
   15c14:	muleq	r1, r4, sp
   15c18:	andeq	r5, r1, r4, lsr sp
   15c1c:	andeq	r5, r1, r4, lsr sp
   15c20:	andeq	r5, r1, r4, lsr sp
   15c24:	andeq	r5, r1, r4, lsr sp
   15c28:	andeq	r5, r1, r4, lsr sp
   15c2c:	andeq	r5, r1, r4, lsr sp
   15c30:	andeq	r5, r1, r0, lsr #28
   15c34:	andeq	r5, r1, r4, lsr sp
   15c38:	andeq	r5, r1, r4, lsr sp
   15c3c:	andeq	r6, r1, r0, asr r5
   15c40:	mvn	r0, #0
   15c44:	mvn	r1, #0
   15c48:	mov	r2, r5
   15c4c:	mov	sl, r3
   15c50:	bl	173ac <__assert_fail@plt+0x61e8>
   15c54:	subs	r3, r0, r6
   15c58:	mov	lr, #0
   15c5c:	umull	r4, r2, r6, r5
   15c60:	str	r1, [sp, #20]
   15c64:	sbcs	r3, r1, r7
   15c68:	mla	ip, r6, sl, r2
   15c6c:	mov	r2, r1
   15c70:	movwcc	lr, #1
   15c74:	mla	r7, r7, r5, ip
   15c78:	mov	r2, #0
   15c7c:	cmp	lr, #0
   15c80:	mvnne	r4, #0
   15c84:	mvnne	r7, #0
   15c88:	subs	r6, r0, r4
   15c8c:	sbcs	r6, r1, r7
   15c90:	movwcc	r2, #1
   15c94:	umull	r3, r6, r4, r5
   15c98:	cmp	r2, #0
   15c9c:	str	r6, [sp, #16]
   15ca0:	mvnne	r3, #0
   15ca4:	cmp	r2, #0
   15ca8:	umull	r6, ip, r3, r5
   15cac:	mla	r1, r3, sl, ip
   15cb0:	ldr	ip, [sp, #16]
   15cb4:	str	r1, [sp, #12]
   15cb8:	mla	r4, r4, sl, ip
   15cbc:	mla	r4, r7, r5, r4
   15cc0:	ldr	r7, [sp, #12]
   15cc4:	mvnne	r4, #0
   15cc8:	subs	r0, r0, r3
   15ccc:	ldr	r0, [sp, #20]
   15cd0:	mla	r7, r4, r5, r7
   15cd4:	sbcs	r0, r0, r4
   15cd8:	mov	r0, #0
   15cdc:	movwcc	r0, #1
   15ce0:	cmp	r0, #0
   15ce4:	mov	r1, r0
   15ce8:	orr	r0, lr, r2
   15cec:	mvnne	r7, #0
   15cf0:	mvnne	r6, #0
   15cf4:	b	16340 <__assert_fail@plt+0x517c>
   15cf8:	mov	r8, r0
   15cfc:	cmp	sl, #0
   15d00:	bne	159cc <__assert_fail@plt+0x4808>
   15d04:	b	16594 <__assert_fail@plt+0x53d0>
   15d08:	cmp	r0, #105	; 0x69
   15d0c:	mov	r3, #0
   15d10:	bne	15b54 <__assert_fail@plt+0x4990>
   15d14:	ldrb	r0, [r1, #2]
   15d18:	mov	r1, #1
   15d1c:	cmp	r0, #66	; 0x42
   15d20:	movweq	r1, #3
   15d24:	str	r1, [sp, #28]
   15d28:	sub	r0, r4, #66	; 0x42
   15d2c:	cmp	r0, #53	; 0x35
   15d30:	bls	15b60 <__assert_fail@plt+0x499c>
   15d34:	ldr	r0, [sp, #36]	; 0x24
   15d38:	orr	r8, r8, #2
   15d3c:	strd	r6, [r0]
   15d40:	mov	r0, r8
   15d44:	sub	sp, fp, #28
   15d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d4c:	mvn	r0, #0
   15d50:	mvn	r1, #0
   15d54:	mov	r2, r5
   15d58:	mov	r4, r3
   15d5c:	bl	173ac <__assert_fail@plt+0x61e8>
   15d60:	subs	r0, r0, r6
   15d64:	mov	r2, #0
   15d68:	sbcs	r0, r1, r7
   15d6c:	movwcc	r2, #1
   15d70:	umull	r0, r1, r6, r5
   15d74:	mla	r1, r6, r4, r1
   15d78:	cmp	r2, #0
   15d7c:	mov	r3, r2
   15d80:	mla	r7, r7, r5, r1
   15d84:	mvnne	r0, #0
   15d88:	mvnne	r7, #0
   15d8c:	mov	r6, r0
   15d90:	b	16574 <__assert_fail@plt+0x53b0>
   15d94:	mvn	r0, #0
   15d98:	mvn	r1, #0
   15d9c:	mov	r2, r5
   15da0:	str	r3, [sp, #24]
   15da4:	bl	173ac <__assert_fail@plt+0x61e8>
   15da8:	subs	r3, r0, r6
   15dac:	mov	ip, r0
   15db0:	umull	r4, r0, r6, r5
   15db4:	mov	sl, #0
   15db8:	sbcs	r3, r1, r7
   15dbc:	str	r0, [sp, #20]
   15dc0:	ldr	r0, [sp, #24]
   15dc4:	mov	r3, #0
   15dc8:	movwcc	r3, #1
   15dcc:	cmp	r3, #0
   15dd0:	mvnne	r4, #0
   15dd4:	cmp	r3, #0
   15dd8:	umull	lr, r2, r4, r5
   15ddc:	mla	r2, r4, r0, r2
   15de0:	str	r2, [sp, #16]
   15de4:	ldr	r2, [sp, #20]
   15de8:	mla	r6, r6, r0, r2
   15dec:	ldr	r0, [sp, #16]
   15df0:	mla	r6, r7, r5, r6
   15df4:	mvnne	r6, #0
   15df8:	mla	r7, r6, r5, r0
   15dfc:	subs	r0, ip, r4
   15e00:	sbcs	r0, r1, r6
   15e04:	movwcc	sl, #1
   15e08:	cmp	sl, #0
   15e0c:	orr	r3, r3, sl
   15e10:	mvnne	lr, #0
   15e14:	mvnne	r7, #0
   15e18:	mov	r6, lr
   15e1c:	b	16574 <__assert_fail@plt+0x53b0>
   15e20:	mvn	r0, #0
   15e24:	mvn	r1, #0
   15e28:	mov	r2, r5
   15e2c:	mov	sl, r3
   15e30:	bl	173ac <__assert_fail@plt+0x61e8>
   15e34:	subs	r3, r0, r6
   15e38:	mov	ip, r1
   15e3c:	umull	r2, lr, r6, r5
   15e40:	str	r0, [sp, #20]
   15e44:	sbcs	r3, r1, r7
   15e48:	mov	r1, #0
   15e4c:	mla	r6, r6, sl, lr
   15e50:	mov	lr, #0
   15e54:	str	ip, [sp, #16]
   15e58:	movwcc	r1, #1
   15e5c:	mla	r7, r7, r5, r6
   15e60:	cmp	r1, #0
   15e64:	mvnne	r2, #0
   15e68:	cmp	r1, #0
   15e6c:	umull	r3, r4, r2, r5
   15e70:	mvnne	r7, #0
   15e74:	mla	r4, r2, sl, r4
   15e78:	subs	r2, r0, r2
   15e7c:	sbcs	r2, ip, r7
   15e80:	mla	r4, r7, r5, r4
   15e84:	movwcc	lr, #1
   15e88:	mov	r2, #0
   15e8c:	cmp	lr, #0
   15e90:	mvnne	r3, #0
   15e94:	mvnne	r4, #0
   15e98:	subs	r7, r0, r3
   15e9c:	mov	r0, r5
   15ea0:	sbcs	r7, ip, r4
   15ea4:	movwcc	r2, #1
   15ea8:	umull	r5, r7, r3, r5
   15eac:	cmp	r2, #0
   15eb0:	mla	r3, r3, sl, r7
   15eb4:	mvnne	r5, #0
   15eb8:	mla	r3, r4, r0, r3
   15ebc:	cmp	r2, #0
   15ec0:	umull	r6, ip, r5, r0
   15ec4:	mvnne	r3, #0
   15ec8:	mla	ip, r5, sl, ip
   15ecc:	mla	r7, r3, r0, ip
   15ed0:	ldr	r0, [sp, #20]
   15ed4:	subs	r0, r0, r5
   15ed8:	ldr	r0, [sp, #16]
   15edc:	sbcs	r0, r0, r3
   15ee0:	mov	r0, #0
   15ee4:	movwcc	r0, #1
   15ee8:	cmp	r0, #0
   15eec:	mov	r3, r0
   15ef0:	orr	r0, r1, lr
   15ef4:	orr	r0, r0, r2
   15ef8:	mvnne	r7, #0
   15efc:	mvnne	r6, #0
   15f00:	orr	r3, r0, r3
   15f04:	b	16574 <__assert_fail@plt+0x53b0>
   15f08:	mvn	r0, #0
   15f0c:	mvn	r1, #0
   15f10:	mov	r2, r5
   15f14:	mov	r4, r3
   15f18:	str	r3, [sp, #24]
   15f1c:	bl	173ac <__assert_fail@plt+0x61e8>
   15f20:	umull	r3, r2, r6, r5
   15f24:	mla	r2, r6, r4, r2
   15f28:	subs	r6, r0, r6
   15f2c:	sbcs	r6, r1, r7
   15f30:	mla	r2, r7, r5, r2
   15f34:	mov	r7, #0
   15f38:	mov	r6, #0
   15f3c:	movwcc	r6, #1
   15f40:	cmp	r6, #0
   15f44:	str	r6, [sp, #20]
   15f48:	mvnne	r3, #0
   15f4c:	mvnne	r2, #0
   15f50:	subs	r4, r0, r3
   15f54:	umull	r6, ip, r3, r5
   15f58:	sbcs	r4, r1, r2
   15f5c:	ldr	r4, [sp, #24]
   15f60:	movwcc	r7, #1
   15f64:	cmp	r7, #0
   15f68:	mov	lr, r7
   15f6c:	str	r7, [sp, #16]
   15f70:	mvnne	r6, #0
   15f74:	cmp	lr, #0
   15f78:	mov	lr, #0
   15f7c:	umull	sl, r7, r6, r5
   15f80:	mla	r3, r3, r4, ip
   15f84:	mla	r7, r6, r4, r7
   15f88:	mov	r4, r0
   15f8c:	mla	r2, r2, r5, r3
   15f90:	mvnne	r2, #0
   15f94:	subs	r3, r0, r6
   15f98:	mov	r0, #0
   15f9c:	mla	r7, r2, r5, r7
   15fa0:	sbcs	r2, r1, r2
   15fa4:	mov	r3, r4
   15fa8:	movwcc	r0, #1
   15fac:	str	r3, [sp, #4]
   15fb0:	cmp	r0, #0
   15fb4:	str	r0, [sp, #12]
   15fb8:	mov	r0, r1
   15fbc:	mvnne	sl, #0
   15fc0:	mvnne	r7, #0
   15fc4:	str	r0, [sp, #8]
   15fc8:	subs	r2, r4, sl
   15fcc:	ldr	r4, [sp, #24]
   15fd0:	sbcs	r2, r1, r7
   15fd4:	movwcc	lr, #1
   15fd8:	umull	r6, r2, sl, r5
   15fdc:	cmp	lr, #0
   15fe0:	mvnne	r6, #0
   15fe4:	mla	r2, sl, r4, r2
   15fe8:	cmp	lr, #0
   15fec:	umull	r1, ip, r6, r5
   15ff0:	mla	r2, r7, r5, r2
   15ff4:	mla	ip, r6, r4, ip
   15ff8:	mvnne	r2, #0
   15ffc:	subs	r6, r3, r6
   16000:	mla	r7, r2, r5, ip
   16004:	sbcs	r2, r0, r2
   16008:	mov	ip, #0
   1600c:	movwcc	ip, #1
   16010:	mov	r2, #0
   16014:	cmp	ip, #0
   16018:	mvnne	r1, #0
   1601c:	mvnne	r7, #0
   16020:	subs	r6, r3, r1
   16024:	ldr	r3, [sp, #24]
   16028:	sbcs	r6, r0, r7
   1602c:	umull	r0, sl, r1, r5
   16030:	movwcc	r2, #1
   16034:	cmp	r2, #0
   16038:	mvnne	r0, #0
   1603c:	mla	r1, r1, r3, sl
   16040:	cmp	r2, #0
   16044:	umull	r6, r4, r0, r5
   16048:	mla	r1, r7, r5, r1
   1604c:	mla	r4, r0, r3, r4
   16050:	ldr	r3, [sp, #4]
   16054:	mvnne	r1, #0
   16058:	mla	r7, r1, r5, r4
   1605c:	ldr	r5, [sp, #16]
   16060:	subs	r0, r3, r0
   16064:	ldr	r0, [sp, #8]
   16068:	sbcs	r0, r0, r1
   1606c:	mov	r0, #0
   16070:	movwcc	r0, #1
   16074:	cmp	r0, #0
   16078:	mov	r1, r0
   1607c:	ldr	r0, [sp, #20]
   16080:	mvnne	r7, #0
   16084:	mvnne	r6, #0
   16088:	orr	r0, r0, r5
   1608c:	ldr	r5, [sp, #12]
   16090:	orr	r0, r0, r5
   16094:	orr	r0, r0, lr
   16098:	orr	r0, r0, ip
   1609c:	orr	r0, r0, r2
   160a0:	b	16510 <__assert_fail@plt+0x534c>
   160a4:	mov	r1, #0
   160a8:	lsl	r2, r7, #10
   160ac:	lsl	r0, r6, #10
   160b0:	lsr	r3, r7, #22
   160b4:	cmp	r1, r7, lsr #22
   160b8:	orr	r2, r2, r6, lsr #22
   160bc:	mvnne	r0, #0
   160c0:	movwne	r3, #1
   160c4:	cmp	r1, r7, lsr #22
   160c8:	b	16540 <__assert_fail@plt+0x537c>
   160cc:	mvn	r0, #0
   160d0:	mvn	r1, #0
   160d4:	mov	r2, r5
   160d8:	mov	sl, r3
   160dc:	bl	173ac <__assert_fail@plt+0x61e8>
   160e0:	subs	r2, r0, r6
   160e4:	mov	ip, r0
   160e8:	mov	r0, #0
   160ec:	sbcs	r2, r1, r7
   160f0:	movwcc	r0, #1
   160f4:	umull	r4, r2, r6, r5
   160f8:	cmp	r0, #0
   160fc:	mla	r2, r6, sl, r2
   16100:	str	r0, [sp, #20]
   16104:	mvnne	r4, #0
   16108:	cmp	r0, #0
   1610c:	mla	r2, r7, r5, r2
   16110:	mov	r0, #0
   16114:	umull	lr, r3, r4, r5
   16118:	mvnne	r2, #0
   1611c:	mla	r3, r4, sl, r3
   16120:	mla	r6, r2, r5, r3
   16124:	subs	r3, ip, r4
   16128:	sbcs	r2, r1, r2
   1612c:	mov	r3, r1
   16130:	movwcc	r0, #1
   16134:	str	r3, [sp, #8]
   16138:	cmp	r0, #0
   1613c:	str	r0, [sp, #16]
   16140:	mov	r0, ip
   16144:	mvnne	lr, #0
   16148:	mvnne	r6, #0
   1614c:	str	r0, [sp, #12]
   16150:	subs	r2, ip, lr
   16154:	umull	r7, r4, lr, r5
   16158:	sbcs	r2, r1, r6
   1615c:	mla	r4, lr, sl, r4
   16160:	mov	r2, #0
   16164:	mla	r6, r6, r5, r4
   16168:	mov	r4, #0
   1616c:	movwcc	r2, #1
   16170:	cmp	r2, #0
   16174:	mvnne	r7, #0
   16178:	cmp	r2, #0
   1617c:	umull	r1, ip, r7, r5
   16180:	mvnne	r6, #0
   16184:	mla	ip, r7, sl, ip
   16188:	subs	r7, r0, r7
   1618c:	mla	lr, r6, r5, ip
   16190:	sbcs	r7, r3, r6
   16194:	mov	ip, #0
   16198:	movwcc	ip, #1
   1619c:	cmp	ip, #0
   161a0:	mvnne	r1, #0
   161a4:	mvnne	lr, #0
   161a8:	subs	r7, r0, r1
   161ac:	sbcs	r7, r3, lr
   161b0:	movwcc	r4, #1
   161b4:	umull	r0, r7, r1, r5
   161b8:	cmp	r4, #0
   161bc:	mla	r1, r1, sl, r7
   161c0:	mvnne	r0, #0
   161c4:	mla	r1, lr, r5, r1
   161c8:	cmp	r4, #0
   161cc:	umull	r6, r3, r0, r5
   161d0:	mvnne	r1, #0
   161d4:	mla	r3, r0, sl, r3
   161d8:	mla	r7, r1, r5, r3
   161dc:	ldr	r3, [sp, #12]
   161e0:	subs	r0, r3, r0
   161e4:	ldr	r3, [sp, #16]
   161e8:	ldr	r0, [sp, #8]
   161ec:	sbcs	r0, r0, r1
   161f0:	mov	r0, #0
   161f4:	movwcc	r0, #1
   161f8:	cmp	r0, #0
   161fc:	mov	r1, r0
   16200:	ldr	r0, [sp, #20]
   16204:	mvnne	r7, #0
   16208:	mvnne	r6, #0
   1620c:	orr	r0, r0, r3
   16210:	orr	r0, r0, r2
   16214:	orr	r0, r0, ip
   16218:	orr	r0, r0, r4
   1621c:	b	16340 <__assert_fail@plt+0x517c>
   16220:	mvn	r0, #0
   16224:	mvn	r1, #0
   16228:	mov	r2, r5
   1622c:	mov	sl, r3
   16230:	bl	173ac <__assert_fail@plt+0x61e8>
   16234:	umull	r3, r2, r6, r5
   16238:	mov	lr, r1
   1623c:	mov	r1, r0
   16240:	mla	r2, r6, sl, r2
   16244:	subs	r6, r0, r6
   16248:	mov	r0, #0
   1624c:	sbcs	r6, lr, r7
   16250:	mla	r2, r7, r5, r2
   16254:	movwcc	r0, #1
   16258:	cmp	r0, #0
   1625c:	str	r0, [sp, #20]
   16260:	mov	r0, r1
   16264:	mvnne	r3, #0
   16268:	mvnne	r2, #0
   1626c:	str	r0, [sp, #16]
   16270:	subs	r4, r1, r3
   16274:	umull	r7, ip, r3, r5
   16278:	sbcs	r4, lr, r2
   1627c:	mla	r3, r3, sl, ip
   16280:	mov	ip, #0
   16284:	mov	r4, #0
   16288:	mla	r2, r2, r5, r3
   1628c:	movwcc	r4, #1
   16290:	cmp	r4, #0
   16294:	mvnne	r7, #0
   16298:	cmp	r4, #0
   1629c:	umull	r1, r6, r7, r5
   162a0:	mvnne	r2, #0
   162a4:	mla	r6, r7, sl, r6
   162a8:	mla	r3, r2, r5, r6
   162ac:	subs	r6, r0, r7
   162b0:	sbcs	r2, lr, r2
   162b4:	movwcc	ip, #1
   162b8:	mov	r2, #0
   162bc:	cmp	ip, #0
   162c0:	mvnne	r1, #0
   162c4:	mvnne	r3, #0
   162c8:	subs	r6, r0, r1
   162cc:	sbcs	r6, lr, r3
   162d0:	movwcc	r2, #1
   162d4:	umull	r0, r6, r1, r5
   162d8:	cmp	r2, #0
   162dc:	str	r6, [sp, #12]
   162e0:	mvnne	r0, #0
   162e4:	cmp	r2, #0
   162e8:	umull	r6, r7, r0, r5
   162ec:	mla	r7, r0, sl, r7
   162f0:	str	r7, [sp, #8]
   162f4:	ldr	r7, [sp, #12]
   162f8:	mla	r1, r1, sl, r7
   162fc:	mla	r1, r3, r5, r1
   16300:	ldr	r3, [sp, #8]
   16304:	mvnne	r1, #0
   16308:	mla	r7, r1, r5, r3
   1630c:	ldr	r3, [sp, #16]
   16310:	subs	r0, r3, r0
   16314:	sbcs	r0, lr, r1
   16318:	mov	r0, #0
   1631c:	movwcc	r0, #1
   16320:	cmp	r0, #0
   16324:	mov	r1, r0
   16328:	ldr	r0, [sp, #20]
   1632c:	mvnne	r7, #0
   16330:	mvnne	r6, #0
   16334:	orr	r0, r0, r4
   16338:	orr	r0, r0, ip
   1633c:	orr	r0, r0, r2
   16340:	orr	r3, r0, r1
   16344:	b	16574 <__assert_fail@plt+0x53b0>
   16348:	mvn	r0, #0
   1634c:	mvn	r1, #0
   16350:	mov	r2, r5
   16354:	mov	sl, r3
   16358:	bl	173ac <__assert_fail@plt+0x61e8>
   1635c:	mov	ip, r1
   16360:	subs	r1, r0, r6
   16364:	umull	r3, lr, r6, r5
   16368:	mov	r2, r5
   1636c:	sbcs	r1, ip, r7
   16370:	mla	r6, r6, sl, lr
   16374:	str	ip, [sp, #4]
   16378:	mov	r1, #0
   1637c:	mla	r7, r7, r2, r6
   16380:	movwcc	r1, #1
   16384:	cmp	r1, #0
   16388:	str	r1, [sp, #20]
   1638c:	mvnne	r3, #0
   16390:	cmp	r1, #0
   16394:	mov	r1, r0
   16398:	umull	r4, r5, r3, r5
   1639c:	mvnne	r7, #0
   163a0:	mov	lr, r1
   163a4:	mla	r5, r3, sl, r5
   163a8:	subs	r3, r0, r3
   163ac:	sbcs	r0, ip, r7
   163b0:	mla	r5, r7, r2, r5
   163b4:	mov	r0, #0
   163b8:	movwcc	r0, #1
   163bc:	cmp	r0, #0
   163c0:	str	r0, [sp, #16]
   163c4:	mvnne	r4, #0
   163c8:	mvnne	r5, #0
   163cc:	subs	r0, r1, r4
   163d0:	mov	r1, #0
   163d4:	sbcs	r0, ip, r5
   163d8:	movwcc	r1, #1
   163dc:	umull	r3, r0, r4, r2
   163e0:	cmp	r1, #0
   163e4:	mla	r0, r4, sl, r0
   163e8:	mov	r4, lr
   163ec:	str	r1, [sp, #12]
   163f0:	mvnne	r3, #0
   163f4:	mla	r0, r5, r2, r0
   163f8:	cmp	r1, #0
   163fc:	str	r4, [sp]
   16400:	umull	r7, r6, r3, r2
   16404:	mvnne	r0, #0
   16408:	mla	r6, r3, sl, r6
   1640c:	subs	r3, lr, r3
   16410:	mla	r5, r0, r2, r6
   16414:	sbcs	r0, ip, r0
   16418:	mov	r3, #0
   1641c:	mov	r0, #0
   16420:	movwcc	r0, #1
   16424:	cmp	r0, #0
   16428:	str	r0, [sp, #8]
   1642c:	mvnne	r7, #0
   16430:	mvnne	r5, #0
   16434:	subs	r0, lr, r7
   16438:	sbcs	r0, ip, r5
   1643c:	movwcc	r3, #1
   16440:	umull	r6, r0, r7, r2
   16444:	cmp	r3, #0
   16448:	mla	r7, r7, sl, r0
   1644c:	mov	r0, ip
   16450:	mvnne	r6, #0
   16454:	mla	r7, r5, r2, r7
   16458:	cmp	r3, #0
   1645c:	mov	r5, #0
   16460:	umull	r1, lr, r6, r2
   16464:	mvnne	r7, #0
   16468:	mla	lr, r6, sl, lr
   1646c:	subs	r6, r4, r6
   16470:	mla	lr, r7, r2, lr
   16474:	sbcs	r7, ip, r7
   16478:	mov	ip, #0
   1647c:	movwcc	ip, #1
   16480:	cmp	ip, #0
   16484:	mvnne	r1, #0
   16488:	mvnne	lr, #0
   1648c:	subs	r7, r4, r1
   16490:	sbcs	r7, r0, lr
   16494:	movwcc	r5, #1
   16498:	umull	r0, r7, r1, r2
   1649c:	cmp	r5, #0
   164a0:	mla	r1, r1, sl, r7
   164a4:	mvnne	r0, #0
   164a8:	mla	r1, lr, r2, r1
   164ac:	cmp	r5, #0
   164b0:	umull	r6, r4, r0, r2
   164b4:	mvnne	r1, #0
   164b8:	mla	r4, r0, sl, r4
   164bc:	mla	r7, r1, r2, r4
   164c0:	ldr	r2, [sp]
   164c4:	subs	r0, r2, r0
   164c8:	ldr	r2, [sp, #16]
   164cc:	ldr	r0, [sp, #4]
   164d0:	sbcs	r0, r0, r1
   164d4:	mov	r0, #0
   164d8:	movwcc	r0, #1
   164dc:	cmp	r0, #0
   164e0:	mov	r1, r0
   164e4:	ldr	r0, [sp, #20]
   164e8:	mvnne	r7, #0
   164ec:	mvnne	r6, #0
   164f0:	orr	r0, r0, r2
   164f4:	ldr	r2, [sp, #12]
   164f8:	orr	r0, r0, r2
   164fc:	ldr	r2, [sp, #8]
   16500:	orr	r0, r0, r2
   16504:	orr	r0, r0, r3
   16508:	orr	r0, r0, ip
   1650c:	orr	r0, r0, r5
   16510:	orr	r0, r0, r1
   16514:	and	r3, r0, #1
   16518:	b	16574 <__assert_fail@plt+0x53b0>
   1651c:	mov	r1, #0
   16520:	lsl	r2, r7, #9
   16524:	lsl	r0, r6, #9
   16528:	lsr	r3, r7, #23
   1652c:	cmp	r1, r7, lsr #23
   16530:	orr	r2, r2, r6, lsr #23
   16534:	mvnne	r0, #0
   16538:	movwne	r3, #1
   1653c:	cmp	r1, r7, lsr #23
   16540:	mvnne	r2, #0
   16544:	mov	r6, r0
   16548:	mov	r7, r2
   1654c:	b	16574 <__assert_fail@plt+0x53b0>
   16550:	lsl	r1, r7, #1
   16554:	lsl	r0, r6, #1
   16558:	cmp	r7, #0
   1655c:	lsr	r3, r7, #31
   16560:	orr	r1, r1, r6, lsr #31
   16564:	mvnlt	r0, #0
   16568:	mvnlt	r1, #0
   1656c:	mov	r6, r0
   16570:	mov	r7, r1
   16574:	ldr	r1, [sp, #32]
   16578:	ldr	r2, [sp, #28]
   1657c:	orr	r8, r3, r8
   16580:	add	r0, r1, r2
   16584:	str	r0, [r9]
   16588:	ldrb	r0, [r1, r2]
   1658c:	cmp	r0, #0
   16590:	orrne	r8, r8, #2
   16594:	ldr	r0, [sp, #36]	; 0x24
   16598:	strd	r6, [r0]
   1659c:	mov	r0, r8
   165a0:	sub	sp, fp, #28
   165a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165a8:	movw	r0, #32377	; 0x7e79
   165ac:	movw	r1, #32415	; 0x7e9f
   165b0:	movw	r3, #32431	; 0x7eaf
   165b4:	mov	r2, #85	; 0x55
   165b8:	movt	r0, #1
   165bc:	movt	r1, #1
   165c0:	movt	r3, #1
   165c4:	bl	111c4 <__assert_fail@plt>
   165c8:	clz	r2, r1
   165cc:	clz	r3, r0
   165d0:	lsr	r2, r2, #5
   165d4:	lsr	r3, r3, #5
   165d8:	orrs	r2, r3, r2
   165dc:	movwne	r1, #1
   165e0:	movwne	r0, #1
   165e4:	cmp	r1, #0
   165e8:	beq	16618 <__assert_fail@plt+0x5454>
   165ec:	mvn	r2, #-2147483648	; 0x80000000
   165f0:	udiv	r2, r2, r1
   165f4:	cmp	r2, r0
   165f8:	bcs	16618 <__assert_fail@plt+0x5454>
   165fc:	push	{fp, lr}
   16600:	mov	fp, sp
   16604:	bl	110b0 <__errno_location@plt>
   16608:	mov	r1, #12
   1660c:	str	r1, [r0]
   16610:	mov	r0, #0
   16614:	pop	{fp, pc}
   16618:	b	10f24 <calloc@plt>
   1661c:	cmp	r0, #0
   16620:	movweq	r0, #1
   16624:	cmn	r0, #1
   16628:	ble	16630 <__assert_fail@plt+0x546c>
   1662c:	b	11044 <malloc@plt>
   16630:	push	{fp, lr}
   16634:	mov	fp, sp
   16638:	bl	110b0 <__errno_location@plt>
   1663c:	mov	r1, #12
   16640:	str	r1, [r0]
   16644:	mov	r0, #0
   16648:	pop	{fp, pc}
   1664c:	push	{fp, lr}
   16650:	mov	fp, sp
   16654:	cmp	r0, #0
   16658:	beq	16674 <__assert_fail@plt+0x54b0>
   1665c:	cmp	r1, #0
   16660:	beq	16680 <__assert_fail@plt+0x54bc>
   16664:	cmn	r1, #1
   16668:	ble	1668c <__assert_fail@plt+0x54c8>
   1666c:	pop	{fp, lr}
   16670:	b	10fcc <realloc@plt>
   16674:	mov	r0, r1
   16678:	pop	{fp, lr}
   1667c:	b	1661c <__assert_fail@plt+0x5458>
   16680:	bl	120cc <__assert_fail@plt+0xf08>
   16684:	mov	r0, #0
   16688:	pop	{fp, pc}
   1668c:	bl	110b0 <__errno_location@plt>
   16690:	mov	r1, #12
   16694:	str	r1, [r0]
   16698:	mov	r0, #0
   1669c:	pop	{fp, pc}
   166a0:	mov	r0, #1
   166a4:	b	11780 <__assert_fail@plt+0x5bc>
   166a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166ac:	add	fp, sp, #28
   166b0:	sub	sp, sp, #12
   166b4:	mov	r4, r3
   166b8:	mov	r9, r2
   166bc:	mov	r7, r1
   166c0:	mov	r8, r0
   166c4:	bl	11098 <strlen@plt>
   166c8:	ldr	r6, [r7]
   166cc:	cmp	r6, #0
   166d0:	beq	1677c <__assert_fail@plt+0x55b8>
   166d4:	mov	r5, r0
   166d8:	cmp	r9, #0
   166dc:	beq	1678c <__assert_fail@plt+0x55c8>
   166e0:	add	r0, r7, #4
   166e4:	mvn	sl, #0
   166e8:	mov	r7, #0
   166ec:	str	r9, [sp]
   166f0:	str	r0, [sp, #8]
   166f4:	mov	r0, #0
   166f8:	str	r0, [sp, #4]
   166fc:	mov	r0, r9
   16700:	mov	r0, r6
   16704:	mov	r1, r8
   16708:	mov	r2, r5
   1670c:	bl	111a0 <strncmp@plt>
   16710:	cmp	r0, #0
   16714:	bne	16760 <__assert_fail@plt+0x559c>
   16718:	mov	r0, r6
   1671c:	bl	11098 <strlen@plt>
   16720:	cmp	r0, r5
   16724:	beq	16780 <__assert_fail@plt+0x55bc>
   16728:	cmn	sl, #1
   1672c:	beq	1675c <__assert_fail@plt+0x5598>
   16730:	ldr	r0, [sp]
   16734:	mov	r1, r9
   16738:	mov	r2, r4
   1673c:	mla	r0, sl, r4, r0
   16740:	bl	10fb4 <memcmp@plt>
   16744:	ldr	r1, [sp, #4]
   16748:	cmp	r0, #0
   1674c:	movwne	r0, #1
   16750:	orr	r1, r1, r0
   16754:	str	r1, [sp, #4]
   16758:	b	16760 <__assert_fail@plt+0x559c>
   1675c:	mov	sl, r7
   16760:	ldr	r0, [sp, #8]
   16764:	add	r9, r9, r4
   16768:	ldr	r6, [r0, r7, lsl #2]
   1676c:	add	r7, r7, #1
   16770:	cmp	r6, #0
   16774:	bne	16700 <__assert_fail@plt+0x553c>
   16778:	b	167f4 <__assert_fail@plt+0x5630>
   1677c:	mvn	r7, #0
   16780:	mov	r0, r7
   16784:	sub	sp, fp, #28
   16788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1678c:	add	r4, r7, #4
   16790:	mov	r0, #0
   16794:	mvn	sl, #0
   16798:	mov	r7, #0
   1679c:	str	r0, [sp, #4]
   167a0:	mov	r0, r6
   167a4:	mov	r1, r8
   167a8:	mov	r2, r5
   167ac:	bl	111a0 <strncmp@plt>
   167b0:	cmp	r0, #0
   167b4:	bne	167e4 <__assert_fail@plt+0x5620>
   167b8:	mov	r0, r6
   167bc:	bl	11098 <strlen@plt>
   167c0:	cmp	r0, r5
   167c4:	beq	16780 <__assert_fail@plt+0x55bc>
   167c8:	ldr	r1, [sp, #4]
   167cc:	cmn	sl, #1
   167d0:	add	r0, sl, #1
   167d4:	movwne	r0, #1
   167d8:	moveq	sl, r7
   167dc:	orr	r1, r1, r0
   167e0:	str	r1, [sp, #4]
   167e4:	ldr	r6, [r4, r7, lsl #2]
   167e8:	add	r7, r7, #1
   167ec:	cmp	r6, #0
   167f0:	bne	167a0 <__assert_fail@plt+0x55dc>
   167f4:	ldr	r0, [sp, #4]
   167f8:	tst	r0, #1
   167fc:	mvnne	sl, #1
   16800:	mov	r0, sl
   16804:	sub	sp, fp, #28
   16808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1680c:	push	{r4, r5, r6, r7, fp, lr}
   16810:	add	fp, sp, #16
   16814:	mov	r5, r0
   16818:	ldr	r0, [r1]
   1681c:	mvn	r4, #0
   16820:	cmp	r0, #0
   16824:	beq	16854 <__assert_fail@plt+0x5690>
   16828:	add	r7, r1, #4
   1682c:	mov	r6, #0
   16830:	mov	r1, r5
   16834:	bl	10f48 <strcmp@plt>
   16838:	cmp	r0, #0
   1683c:	moveq	r0, r6
   16840:	popeq	{r4, r5, r6, r7, fp, pc}
   16844:	ldr	r0, [r7, r6, lsl #2]
   16848:	add	r6, r6, #1
   1684c:	cmp	r0, #0
   16850:	bne	16830 <__assert_fail@plt+0x566c>
   16854:	mov	r0, r4
   16858:	pop	{r4, r5, r6, r7, fp, pc}
   1685c:	push	{r4, r5, r6, sl, fp, lr}
   16860:	add	fp, sp, #16
   16864:	sub	sp, sp, #8
   16868:	mov	r4, r1
   1686c:	movw	r1, #32537	; 0x7f19
   16870:	mov	r5, r0
   16874:	movw	r0, #32510	; 0x7efe
   16878:	cmn	r2, #1
   1687c:	mov	r2, #5
   16880:	movt	r0, #1
   16884:	movt	r1, #1
   16888:	moveq	r1, r0
   1688c:	mov	r0, #0
   16890:	bl	10fc0 <dcgettext@plt>
   16894:	mov	r6, r0
   16898:	mov	r0, #0
   1689c:	mov	r1, #8
   168a0:	mov	r2, r4
   168a4:	bl	146bc <__assert_fail@plt+0x34f8>
   168a8:	mov	r4, r0
   168ac:	mov	r0, #1
   168b0:	mov	r1, r5
   168b4:	bl	14c7c <__assert_fail@plt+0x3ab8>
   168b8:	str	r0, [sp]
   168bc:	mov	r0, #0
   168c0:	mov	r1, #0
   168c4:	mov	r2, r6
   168c8:	mov	r3, r4
   168cc:	bl	1102c <error@plt>
   168d0:	sub	sp, fp, #16
   168d4:	pop	{r4, r5, r6, sl, fp, pc}
   168d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168dc:	add	fp, sp, #28
   168e0:	sub	sp, sp, #4
   168e4:	mov	r5, r1
   168e8:	movw	r1, #32566	; 0x7f36
   168ec:	mov	sl, r2
   168f0:	mov	r7, r0
   168f4:	mov	r0, #0
   168f8:	mov	r2, #5
   168fc:	mov	r8, #0
   16900:	movt	r1, #1
   16904:	bl	10fc0 <dcgettext@plt>
   16908:	movw	r4, #37216	; 0x9160
   1690c:	movt	r4, #2
   16910:	ldr	r1, [r4]
   16914:	bl	10f30 <fputs_unlocked@plt>
   16918:	ldr	r6, [r7]
   1691c:	cmp	r6, #0
   16920:	beq	169c0 <__assert_fail@plt+0x57fc>
   16924:	add	r9, r7, #4
   16928:	mov	r7, #0
   1692c:	str	sl, [sp]
   16930:	cmp	r8, #0
   16934:	beq	16950 <__assert_fail@plt+0x578c>
   16938:	mov	r0, r7
   1693c:	mov	r1, r5
   16940:	mov	r2, sl
   16944:	bl	10fb4 <memcmp@plt>
   16948:	cmp	r0, #0
   1694c:	beq	1697c <__assert_fail@plt+0x57b8>
   16950:	ldr	r7, [r4]
   16954:	mov	r0, r6
   16958:	bl	14c8c <__assert_fail@plt+0x3ac8>
   1695c:	movw	r2, #32587	; 0x7f4b
   16960:	mov	r3, r0
   16964:	mov	r0, r7
   16968:	mov	r1, #1
   1696c:	movt	r2, #1
   16970:	bl	11104 <__fprintf_chk@plt>
   16974:	mov	r7, r5
   16978:	b	169ac <__assert_fail@plt+0x57e8>
   1697c:	mov	sl, r9
   16980:	ldr	r9, [r4]
   16984:	mov	r0, r6
   16988:	bl	14c8c <__assert_fail@plt+0x3ac8>
   1698c:	mov	r3, r0
   16990:	mov	r0, r9
   16994:	mov	r9, sl
   16998:	ldr	sl, [sp]
   1699c:	movw	r2, #32595	; 0x7f53
   169a0:	mov	r1, #1
   169a4:	movt	r2, #1
   169a8:	bl	11104 <__fprintf_chk@plt>
   169ac:	ldr	r6, [r9, -r8, lsl #2]
   169b0:	add	r5, r5, sl
   169b4:	sub	r8, r8, #1
   169b8:	cmp	r6, #0
   169bc:	bne	16930 <__assert_fail@plt+0x576c>
   169c0:	ldr	r0, [r4]
   169c4:	ldr	r1, [r0, #20]
   169c8:	ldr	r2, [r0, #24]
   169cc:	cmp	r1, r2
   169d0:	addcc	r2, r1, #1
   169d4:	strcc	r2, [r0, #20]
   169d8:	movcc	r0, #10
   169dc:	strbcc	r0, [r1]
   169e0:	subcc	sp, fp, #28
   169e4:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169e8:	mov	r1, #10
   169ec:	sub	sp, fp, #28
   169f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169f4:	b	11134 <__overflow@plt>
   169f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169fc:	add	fp, sp, #28
   16a00:	sub	sp, sp, #12
   16a04:	mov	sl, r0
   16a08:	ldr	r0, [fp, #16]
   16a0c:	ldr	r9, [fp, #8]
   16a10:	mov	r5, r3
   16a14:	mov	r8, r2
   16a18:	mov	r6, r1
   16a1c:	cmp	r0, #0
   16a20:	beq	16a50 <__assert_fail@plt+0x588c>
   16a24:	mov	r0, r6
   16a28:	mov	r1, r8
   16a2c:	mov	r2, r5
   16a30:	mov	r3, r9
   16a34:	bl	166a8 <__assert_fail@plt+0x54e4>
   16a38:	mov	r4, r0
   16a3c:	cmn	r4, #1
   16a40:	ble	16aa0 <__assert_fail@plt+0x58dc>
   16a44:	mov	r0, r4
   16a48:	sub	sp, fp, #28
   16a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a50:	ldr	r0, [r8]
   16a54:	movw	r7, #32510	; 0x7efe
   16a58:	str	r5, [sp, #8]
   16a5c:	movt	r7, #1
   16a60:	cmp	r0, #0
   16a64:	beq	16ab8 <__assert_fail@plt+0x58f4>
   16a68:	add	r5, r8, #4
   16a6c:	mov	r4, #0
   16a70:	mov	r1, r6
   16a74:	bl	10f48 <strcmp@plt>
   16a78:	cmp	r0, #0
   16a7c:	beq	16a94 <__assert_fail@plt+0x58d0>
   16a80:	ldr	r0, [r5, r4, lsl #2]
   16a84:	add	r4, r4, #1
   16a88:	cmp	r0, #0
   16a8c:	bne	16a70 <__assert_fail@plt+0x58ac>
   16a90:	b	16ab8 <__assert_fail@plt+0x58f4>
   16a94:	ldr	r5, [sp, #8]
   16a98:	cmn	r4, #1
   16a9c:	bgt	16a44 <__assert_fail@plt+0x5880>
   16aa0:	movw	r0, #32510	; 0x7efe
   16aa4:	movw	r7, #32537	; 0x7f19
   16aa8:	str	r5, [sp, #8]
   16aac:	movt	r0, #1
   16ab0:	movt	r7, #1
   16ab4:	moveq	r7, r0
   16ab8:	ldr	r5, [fp, #12]
   16abc:	mov	r0, #0
   16ac0:	mov	r1, r7
   16ac4:	mov	r2, #5
   16ac8:	bl	10fc0 <dcgettext@plt>
   16acc:	mov	r4, r0
   16ad0:	mov	r0, #0
   16ad4:	mov	r1, #8
   16ad8:	mov	r2, r6
   16adc:	bl	146bc <__assert_fail@plt+0x34f8>
   16ae0:	mov	r6, r0
   16ae4:	mov	r0, #1
   16ae8:	mov	r1, sl
   16aec:	bl	14c7c <__assert_fail@plt+0x3ab8>
   16af0:	str	r0, [sp]
   16af4:	mov	r0, #0
   16af8:	mov	r1, #0
   16afc:	mov	r2, r4
   16b00:	mov	r3, r6
   16b04:	bl	1102c <error@plt>
   16b08:	ldr	r1, [sp, #8]
   16b0c:	mov	r0, r8
   16b10:	mov	r2, r9
   16b14:	bl	168d8 <__assert_fail@plt+0x5714>
   16b18:	blx	r5
   16b1c:	mvn	r4, #0
   16b20:	mov	r0, r4
   16b24:	sub	sp, fp, #28
   16b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b2c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16b30:	add	fp, sp, #24
   16b34:	ldr	r6, [r1]
   16b38:	cmp	r6, #0
   16b3c:	beq	16ba0 <__assert_fail@plt+0x59dc>
   16b40:	mov	r8, r1
   16b44:	mov	r7, r2
   16b48:	mov	r1, r2
   16b4c:	mov	r2, r3
   16b50:	mov	r4, r3
   16b54:	mov	r9, r0
   16b58:	bl	10fb4 <memcmp@plt>
   16b5c:	cmp	r0, #0
   16b60:	beq	16b98 <__assert_fail@plt+0x59d4>
   16b64:	add	r7, r7, r4
   16b68:	add	r5, r8, #4
   16b6c:	ldr	r6, [r5]
   16b70:	cmp	r6, #0
   16b74:	beq	16ba0 <__assert_fail@plt+0x59dc>
   16b78:	mov	r0, r9
   16b7c:	mov	r1, r7
   16b80:	mov	r2, r4
   16b84:	bl	10fb4 <memcmp@plt>
   16b88:	add	r7, r7, r4
   16b8c:	add	r5, r5, #4
   16b90:	cmp	r0, #0
   16b94:	bne	16b6c <__assert_fail@plt+0x59a8>
   16b98:	mov	r0, r6
   16b9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ba0:	mov	r6, #0
   16ba4:	mov	r0, r6
   16ba8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16bac:	push	{r4, r5, r6, sl, fp, lr}
   16bb0:	add	fp, sp, #16
   16bb4:	mov	r4, r0
   16bb8:	bl	11014 <__fpending@plt>
   16bbc:	ldr	r6, [r4]
   16bc0:	mov	r5, r0
   16bc4:	mov	r0, r4
   16bc8:	bl	11f14 <__assert_fail@plt+0xd50>
   16bcc:	tst	r6, #32
   16bd0:	bne	16c08 <__assert_fail@plt+0x5a44>
   16bd4:	cmp	r0, #0
   16bd8:	mov	r4, r0
   16bdc:	mvnne	r4, #0
   16be0:	cmp	r5, #0
   16be4:	bne	16c14 <__assert_fail@plt+0x5a50>
   16be8:	cmp	r0, #0
   16bec:	beq	16c14 <__assert_fail@plt+0x5a50>
   16bf0:	bl	110b0 <__errno_location@plt>
   16bf4:	ldr	r0, [r0]
   16bf8:	subs	r4, r0, #9
   16bfc:	mvnne	r4, #0
   16c00:	mov	r0, r4
   16c04:	pop	{r4, r5, r6, sl, fp, pc}
   16c08:	mvn	r4, #0
   16c0c:	cmp	r0, #0
   16c10:	beq	16c1c <__assert_fail@plt+0x5a58>
   16c14:	mov	r0, r4
   16c18:	pop	{r4, r5, r6, sl, fp, pc}
   16c1c:	bl	110b0 <__errno_location@plt>
   16c20:	mov	r1, #0
   16c24:	str	r1, [r0]
   16c28:	mov	r0, r4
   16c2c:	pop	{r4, r5, r6, sl, fp, pc}
   16c30:	sub	sp, sp, #8
   16c34:	push	{r4, r5, r6, r7, fp, lr}
   16c38:	add	fp, sp, #16
   16c3c:	sub	sp, sp, #8
   16c40:	mov	r5, r0
   16c44:	add	r0, fp, #8
   16c48:	cmp	r1, #11
   16c4c:	str	r3, [fp, #12]
   16c50:	str	r2, [fp, #8]
   16c54:	str	r0, [sp, #4]
   16c58:	bhi	16c94 <__assert_fail@plt+0x5ad0>
   16c5c:	mov	r0, #1
   16c60:	movw	r2, #1300	; 0x514
   16c64:	tst	r2, r0, lsl r1
   16c68:	bne	16d54 <__assert_fail@plt+0x5b90>
   16c6c:	movw	r2, #2570	; 0xa0a
   16c70:	tst	r2, r0, lsl r1
   16c74:	bne	16cbc <__assert_fail@plt+0x5af8>
   16c78:	cmp	r1, #0
   16c7c:	bne	16c94 <__assert_fail@plt+0x5ad0>
   16c80:	ldr	r0, [sp, #4]
   16c84:	add	r1, r0, #4
   16c88:	str	r1, [sp, #4]
   16c8c:	mov	r1, #0
   16c90:	b	16d60 <__assert_fail@plt+0x5b9c>
   16c94:	sub	r0, r1, #1024	; 0x400
   16c98:	cmp	r0, #10
   16c9c:	bhi	16d54 <__assert_fail@plt+0x5b90>
   16ca0:	mov	r2, #1
   16ca4:	movw	r3, #645	; 0x285
   16ca8:	tst	r3, r2, lsl r0
   16cac:	bne	16d54 <__assert_fail@plt+0x5b90>
   16cb0:	movw	r3, #1282	; 0x502
   16cb4:	tst	r3, r2, lsl r0
   16cb8:	beq	16cc8 <__assert_fail@plt+0x5b04>
   16cbc:	mov	r0, r5
   16cc0:	bl	11128 <fcntl64@plt>
   16cc4:	b	16d6c <__assert_fail@plt+0x5ba8>
   16cc8:	cmp	r0, #6
   16ccc:	bne	16d54 <__assert_fail@plt+0x5b90>
   16cd0:	ldr	r0, [sp, #4]
   16cd4:	movw	r7, #37560	; 0x92b8
   16cd8:	movt	r7, #2
   16cdc:	add	r1, r0, #4
   16ce0:	str	r1, [sp, #4]
   16ce4:	ldr	r6, [r0]
   16ce8:	ldr	r0, [r7]
   16cec:	cmp	r0, #0
   16cf0:	blt	16d90 <__assert_fail@plt+0x5bcc>
   16cf4:	mov	r0, r5
   16cf8:	movw	r1, #1030	; 0x406
   16cfc:	mov	r2, r6
   16d00:	bl	11128 <fcntl64@plt>
   16d04:	mov	r4, r0
   16d08:	cmn	r0, #1
   16d0c:	bgt	16d84 <__assert_fail@plt+0x5bc0>
   16d10:	bl	110b0 <__errno_location@plt>
   16d14:	ldr	r0, [r0]
   16d18:	cmp	r0, #22
   16d1c:	bne	16d84 <__assert_fail@plt+0x5bc0>
   16d20:	mov	r0, r5
   16d24:	mov	r1, #0
   16d28:	mov	r2, r6
   16d2c:	bl	11128 <fcntl64@plt>
   16d30:	mov	r4, r0
   16d34:	cmp	r0, #0
   16d38:	blt	16d70 <__assert_fail@plt+0x5bac>
   16d3c:	mvn	r0, #0
   16d40:	str	r0, [r7]
   16d44:	mov	r0, #1
   16d48:	cmp	r0, #0
   16d4c:	bne	16dbc <__assert_fail@plt+0x5bf8>
   16d50:	b	16d70 <__assert_fail@plt+0x5bac>
   16d54:	ldr	r0, [sp, #4]
   16d58:	add	r2, r0, #4
   16d5c:	str	r2, [sp, #4]
   16d60:	ldr	r2, [r0]
   16d64:	mov	r0, r5
   16d68:	bl	11128 <fcntl64@plt>
   16d6c:	mov	r4, r0
   16d70:	mov	r0, r4
   16d74:	sub	sp, fp, #16
   16d78:	pop	{r4, r5, r6, r7, fp, lr}
   16d7c:	add	sp, sp, #8
   16d80:	bx	lr
   16d84:	mov	r0, #1
   16d88:	str	r0, [r7]
   16d8c:	b	16d70 <__assert_fail@plt+0x5bac>
   16d90:	mov	r0, r5
   16d94:	mov	r1, #0
   16d98:	mov	r2, r6
   16d9c:	bl	11128 <fcntl64@plt>
   16da0:	mov	r4, r0
   16da4:	ldr	r0, [r7]
   16da8:	add	r0, r0, #1
   16dac:	clz	r0, r0
   16db0:	lsr	r0, r0, #5
   16db4:	cmp	r0, #0
   16db8:	beq	16d70 <__assert_fail@plt+0x5bac>
   16dbc:	cmp	r4, #0
   16dc0:	blt	16d70 <__assert_fail@plt+0x5bac>
   16dc4:	mov	r0, r4
   16dc8:	mov	r1, #1
   16dcc:	bl	11128 <fcntl64@plt>
   16dd0:	cmp	r0, #0
   16dd4:	blt	16df0 <__assert_fail@plt+0x5c2c>
   16dd8:	orr	r2, r0, #1
   16ddc:	mov	r0, r4
   16de0:	mov	r1, #2
   16de4:	bl	11128 <fcntl64@plt>
   16de8:	cmn	r0, #1
   16dec:	bne	16d70 <__assert_fail@plt+0x5bac>
   16df0:	bl	110b0 <__errno_location@plt>
   16df4:	ldr	r6, [r0]
   16df8:	mov	r5, r0
   16dfc:	mov	r0, r4
   16e00:	bl	111b8 <close@plt>
   16e04:	str	r6, [r5]
   16e08:	mvn	r4, #0
   16e0c:	b	16d70 <__assert_fail@plt+0x5bac>
   16e10:	push	{fp, lr}
   16e14:	mov	fp, sp
   16e18:	mov	r0, #14
   16e1c:	bl	11158 <nl_langinfo@plt>
   16e20:	movw	r1, #31011	; 0x7923
   16e24:	cmp	r0, #0
   16e28:	movt	r1, #1
   16e2c:	movne	r1, r0
   16e30:	movw	r0, #32600	; 0x7f58
   16e34:	ldrb	r2, [r1]
   16e38:	movt	r0, #1
   16e3c:	cmp	r2, #0
   16e40:	movne	r0, r1
   16e44:	pop	{fp, pc}
   16e48:	push	{r4, r5, r6, r7, fp, lr}
   16e4c:	add	fp, sp, #16
   16e50:	sub	sp, sp, #8
   16e54:	add	r5, sp, #4
   16e58:	cmp	r0, #0
   16e5c:	mov	r7, r2
   16e60:	mov	r4, r1
   16e64:	movne	r5, r0
   16e68:	mov	r0, r5
   16e6c:	bl	11020 <mbrtowc@plt>
   16e70:	mov	r6, r0
   16e74:	cmp	r7, #0
   16e78:	beq	16e9c <__assert_fail@plt+0x5cd8>
   16e7c:	cmn	r6, #2
   16e80:	bcc	16e9c <__assert_fail@plt+0x5cd8>
   16e84:	mov	r0, #0
   16e88:	bl	16ee4 <__assert_fail@plt+0x5d20>
   16e8c:	cmp	r0, #0
   16e90:	ldrbeq	r0, [r4]
   16e94:	moveq	r6, #1
   16e98:	streq	r0, [r5]
   16e9c:	mov	r0, r6
   16ea0:	sub	sp, fp, #16
   16ea4:	pop	{r4, r5, r6, r7, fp, pc}
   16ea8:	cmp	r2, #0
   16eac:	beq	16edc <__assert_fail@plt+0x5d18>
   16eb0:	mvn	r3, #0
   16eb4:	udiv	r3, r3, r2
   16eb8:	cmp	r3, r1
   16ebc:	bcs	16edc <__assert_fail@plt+0x5d18>
   16ec0:	push	{fp, lr}
   16ec4:	mov	fp, sp
   16ec8:	bl	110b0 <__errno_location@plt>
   16ecc:	mov	r1, #12
   16ed0:	str	r1, [r0]
   16ed4:	mov	r0, #0
   16ed8:	pop	{fp, pc}
   16edc:	mul	r1, r2, r1
   16ee0:	b	1664c <__assert_fail@plt+0x5488>
   16ee4:	push	{r4, sl, fp, lr}
   16ee8:	add	fp, sp, #8
   16eec:	sub	sp, sp, #264	; 0x108
   16ef0:	add	r1, sp, #7
   16ef4:	movw	r2, #257	; 0x101
   16ef8:	bl	16f48 <__assert_fail@plt+0x5d84>
   16efc:	mov	r4, #0
   16f00:	cmp	r0, #0
   16f04:	bne	16f3c <__assert_fail@plt+0x5d78>
   16f08:	movw	r1, #32606	; 0x7f5e
   16f0c:	add	r0, sp, #7
   16f10:	movt	r1, #1
   16f14:	bl	10f48 <strcmp@plt>
   16f18:	cmp	r0, #0
   16f1c:	beq	16f3c <__assert_fail@plt+0x5d78>
   16f20:	movw	r1, #32608	; 0x7f60
   16f24:	add	r0, sp, #7
   16f28:	movt	r1, #1
   16f2c:	bl	10f48 <strcmp@plt>
   16f30:	mov	r4, r0
   16f34:	cmp	r0, #0
   16f38:	movwne	r4, #1
   16f3c:	mov	r0, r4
   16f40:	sub	sp, fp, #8
   16f44:	pop	{r4, sl, fp, pc}
   16f48:	push	{r4, r5, r6, r7, fp, lr}
   16f4c:	add	fp, sp, #16
   16f50:	mov	r4, r1
   16f54:	mov	r1, #0
   16f58:	mov	r6, r2
   16f5c:	bl	11140 <setlocale@plt>
   16f60:	cmp	r0, #0
   16f64:	beq	16f94 <__assert_fail@plt+0x5dd0>
   16f68:	mov	r7, r0
   16f6c:	bl	11098 <strlen@plt>
   16f70:	cmp	r0, r6
   16f74:	bcs	16fb4 <__assert_fail@plt+0x5df0>
   16f78:	add	r2, r0, #1
   16f7c:	mov	r0, r4
   16f80:	mov	r1, r7
   16f84:	bl	10f90 <memcpy@plt>
   16f88:	mov	r5, #0
   16f8c:	mov	r0, r5
   16f90:	pop	{r4, r5, r6, r7, fp, pc}
   16f94:	cmp	r6, #0
   16f98:	mov	r5, #22
   16f9c:	movne	r0, #0
   16fa0:	strbne	r0, [r4]
   16fa4:	movne	r0, r5
   16fa8:	popne	{r4, r5, r6, r7, fp, pc}
   16fac:	mov	r0, r5
   16fb0:	pop	{r4, r5, r6, r7, fp, pc}
   16fb4:	mov	r5, #34	; 0x22
   16fb8:	cmp	r6, #0
   16fbc:	beq	16fdc <__assert_fail@plt+0x5e18>
   16fc0:	sub	r6, r6, #1
   16fc4:	mov	r0, r4
   16fc8:	mov	r1, r7
   16fcc:	mov	r2, r6
   16fd0:	bl	10f90 <memcpy@plt>
   16fd4:	mov	r0, #0
   16fd8:	strb	r0, [r4, r6]
   16fdc:	mov	r0, r5
   16fe0:	pop	{r4, r5, r6, r7, fp, pc}
   16fe4:	mov	r1, #0
   16fe8:	b	11140 <setlocale@plt>
   16fec:	eor	r1, r1, #-2147483648	; 0x80000000
   16ff0:	b	16ff8 <__assert_fail@plt+0x5e34>
   16ff4:	eor	r3, r3, #-2147483648	; 0x80000000
   16ff8:	push	{r4, r5, lr}
   16ffc:	lsl	r4, r1, #1
   17000:	lsl	r5, r3, #1
   17004:	teq	r4, r5
   17008:	teqeq	r0, r2
   1700c:	orrsne	ip, r4, r0
   17010:	orrsne	ip, r5, r2
   17014:	mvnsne	ip, r4, asr #21
   17018:	mvnsne	ip, r5, asr #21
   1701c:	beq	17208 <__assert_fail@plt+0x6044>
   17020:	lsr	r4, r4, #21
   17024:	rsbs	r5, r4, r5, lsr #21
   17028:	rsblt	r5, r5, #0
   1702c:	ble	1704c <__assert_fail@plt+0x5e88>
   17030:	add	r4, r4, r5
   17034:	eor	r2, r0, r2
   17038:	eor	r3, r1, r3
   1703c:	eor	r0, r2, r0
   17040:	eor	r1, r3, r1
   17044:	eor	r2, r0, r2
   17048:	eor	r3, r1, r3
   1704c:	cmp	r5, #54	; 0x36
   17050:	pophi	{r4, r5, pc}
   17054:	tst	r1, #-2147483648	; 0x80000000
   17058:	lsl	r1, r1, #12
   1705c:	mov	ip, #1048576	; 0x100000
   17060:	orr	r1, ip, r1, lsr #12
   17064:	beq	17070 <__assert_fail@plt+0x5eac>
   17068:	rsbs	r0, r0, #0
   1706c:	rsc	r1, r1, #0
   17070:	tst	r3, #-2147483648	; 0x80000000
   17074:	lsl	r3, r3, #12
   17078:	orr	r3, ip, r3, lsr #12
   1707c:	beq	17088 <__assert_fail@plt+0x5ec4>
   17080:	rsbs	r2, r2, #0
   17084:	rsc	r3, r3, #0
   17088:	teq	r4, r5
   1708c:	beq	171f0 <__assert_fail@plt+0x602c>
   17090:	sub	r4, r4, #1
   17094:	rsbs	lr, r5, #32
   17098:	blt	170b4 <__assert_fail@plt+0x5ef0>
   1709c:	lsl	ip, r2, lr
   170a0:	adds	r0, r0, r2, lsr r5
   170a4:	adc	r1, r1, #0
   170a8:	adds	r0, r0, r3, lsl lr
   170ac:	adcs	r1, r1, r3, asr r5
   170b0:	b	170d0 <__assert_fail@plt+0x5f0c>
   170b4:	sub	r5, r5, #32
   170b8:	add	lr, lr, #32
   170bc:	cmp	r2, #1
   170c0:	lsl	ip, r3, lr
   170c4:	orrcs	ip, ip, #2
   170c8:	adds	r0, r0, r3, asr r5
   170cc:	adcs	r1, r1, r3, asr #31
   170d0:	and	r5, r1, #-2147483648	; 0x80000000
   170d4:	bpl	170e4 <__assert_fail@plt+0x5f20>
   170d8:	rsbs	ip, ip, #0
   170dc:	rscs	r0, r0, #0
   170e0:	rsc	r1, r1, #0
   170e4:	cmp	r1, #1048576	; 0x100000
   170e8:	bcc	17128 <__assert_fail@plt+0x5f64>
   170ec:	cmp	r1, #2097152	; 0x200000
   170f0:	bcc	17110 <__assert_fail@plt+0x5f4c>
   170f4:	lsrs	r1, r1, #1
   170f8:	rrxs	r0, r0
   170fc:	rrx	ip, ip
   17100:	add	r4, r4, #1
   17104:	lsl	r2, r4, #21
   17108:	cmn	r2, #4194304	; 0x400000
   1710c:	bcs	17268 <__assert_fail@plt+0x60a4>
   17110:	cmp	ip, #-2147483648	; 0x80000000
   17114:	lsrseq	ip, r0, #1
   17118:	adcs	r0, r0, #0
   1711c:	adc	r1, r1, r4, lsl #20
   17120:	orr	r1, r1, r5
   17124:	pop	{r4, r5, pc}
   17128:	lsls	ip, ip, #1
   1712c:	adcs	r0, r0, r0
   17130:	adc	r1, r1, r1
   17134:	tst	r1, #1048576	; 0x100000
   17138:	sub	r4, r4, #1
   1713c:	bne	17110 <__assert_fail@plt+0x5f4c>
   17140:	teq	r1, #0
   17144:	moveq	r1, r0
   17148:	moveq	r0, #0
   1714c:	clz	r3, r1
   17150:	addeq	r3, r3, #32
   17154:	sub	r3, r3, #11
   17158:	subs	r2, r3, #32
   1715c:	bge	17180 <__assert_fail@plt+0x5fbc>
   17160:	adds	r2, r2, #12
   17164:	ble	1717c <__assert_fail@plt+0x5fb8>
   17168:	add	ip, r2, #20
   1716c:	rsb	r2, r2, #12
   17170:	lsl	r0, r1, ip
   17174:	lsr	r1, r1, r2
   17178:	b	17190 <__assert_fail@plt+0x5fcc>
   1717c:	add	r2, r2, #20
   17180:	rsble	ip, r2, #32
   17184:	lsl	r1, r1, r2
   17188:	orrle	r1, r1, r0, lsr ip
   1718c:	lslle	r0, r0, r2
   17190:	subs	r4, r4, r3
   17194:	addge	r1, r1, r4, lsl #20
   17198:	orrge	r1, r1, r5
   1719c:	popge	{r4, r5, pc}
   171a0:	mvn	r4, r4
   171a4:	subs	r4, r4, #31
   171a8:	bge	171e4 <__assert_fail@plt+0x6020>
   171ac:	adds	r4, r4, #12
   171b0:	bgt	171cc <__assert_fail@plt+0x6008>
   171b4:	add	r4, r4, #20
   171b8:	rsb	r2, r4, #32
   171bc:	lsr	r0, r0, r4
   171c0:	orr	r0, r0, r1, lsl r2
   171c4:	orr	r1, r5, r1, lsr r4
   171c8:	pop	{r4, r5, pc}
   171cc:	rsb	r4, r4, #12
   171d0:	rsb	r2, r4, #32
   171d4:	lsr	r0, r0, r2
   171d8:	orr	r0, r0, r1, lsl r4
   171dc:	mov	r1, r5
   171e0:	pop	{r4, r5, pc}
   171e4:	lsr	r0, r1, r4
   171e8:	mov	r1, r5
   171ec:	pop	{r4, r5, pc}
   171f0:	teq	r4, #0
   171f4:	eor	r3, r3, #1048576	; 0x100000
   171f8:	eoreq	r1, r1, #1048576	; 0x100000
   171fc:	addeq	r4, r4, #1
   17200:	subne	r5, r5, #1
   17204:	b	17090 <__assert_fail@plt+0x5ecc>
   17208:	mvns	ip, r4, asr #21
   1720c:	mvnsne	ip, r5, asr #21
   17210:	beq	17278 <__assert_fail@plt+0x60b4>
   17214:	teq	r4, r5
   17218:	teqeq	r0, r2
   1721c:	beq	17230 <__assert_fail@plt+0x606c>
   17220:	orrs	ip, r4, r0
   17224:	moveq	r1, r3
   17228:	moveq	r0, r2
   1722c:	pop	{r4, r5, pc}
   17230:	teq	r1, r3
   17234:	movne	r1, #0
   17238:	movne	r0, #0
   1723c:	popne	{r4, r5, pc}
   17240:	lsrs	ip, r4, #21
   17244:	bne	17258 <__assert_fail@plt+0x6094>
   17248:	lsls	r0, r0, #1
   1724c:	adcs	r1, r1, r1
   17250:	orrcs	r1, r1, #-2147483648	; 0x80000000
   17254:	pop	{r4, r5, pc}
   17258:	adds	r4, r4, #4194304	; 0x400000
   1725c:	addcc	r1, r1, #1048576	; 0x100000
   17260:	popcc	{r4, r5, pc}
   17264:	and	r5, r1, #-2147483648	; 0x80000000
   17268:	orr	r1, r5, #2130706432	; 0x7f000000
   1726c:	orr	r1, r1, #15728640	; 0xf00000
   17270:	mov	r0, #0
   17274:	pop	{r4, r5, pc}
   17278:	mvns	ip, r4, asr #21
   1727c:	movne	r1, r3
   17280:	movne	r0, r2
   17284:	mvnseq	ip, r5, asr #21
   17288:	movne	r3, r1
   1728c:	movne	r2, r0
   17290:	orrs	r4, r0, r1, lsl #12
   17294:	orrseq	r5, r2, r3, lsl #12
   17298:	teqeq	r1, r3
   1729c:	orrne	r1, r1, #524288	; 0x80000
   172a0:	pop	{r4, r5, pc}
   172a4:	teq	r0, #0
   172a8:	moveq	r1, #0
   172ac:	bxeq	lr
   172b0:	push	{r4, r5, lr}
   172b4:	mov	r4, #1024	; 0x400
   172b8:	add	r4, r4, #50	; 0x32
   172bc:	mov	r5, #0
   172c0:	mov	r1, #0
   172c4:	b	17140 <__assert_fail@plt+0x5f7c>
   172c8:	teq	r0, #0
   172cc:	moveq	r1, #0
   172d0:	bxeq	lr
   172d4:	push	{r4, r5, lr}
   172d8:	mov	r4, #1024	; 0x400
   172dc:	add	r4, r4, #50	; 0x32
   172e0:	ands	r5, r0, #-2147483648	; 0x80000000
   172e4:	rsbmi	r0, r0, #0
   172e8:	mov	r1, #0
   172ec:	b	17140 <__assert_fail@plt+0x5f7c>
   172f0:	lsls	r2, r0, #1
   172f4:	asr	r1, r2, #3
   172f8:	rrx	r1, r1
   172fc:	lsl	r0, r2, #28
   17300:	andsne	r3, r2, #-16777216	; 0xff000000
   17304:	teqne	r3, #-16777216	; 0xff000000
   17308:	eorne	r1, r1, #939524096	; 0x38000000
   1730c:	bxne	lr
   17310:	bics	r2, r2, #-16777216	; 0xff000000
   17314:	bxeq	lr
   17318:	teq	r3, #-16777216	; 0xff000000
   1731c:	orreq	r1, r1, #524288	; 0x80000
   17320:	bxeq	lr
   17324:	push	{r4, r5, lr}
   17328:	mov	r4, #896	; 0x380
   1732c:	and	r5, r1, #-2147483648	; 0x80000000
   17330:	bic	r1, r1, #-2147483648	; 0x80000000
   17334:	b	17140 <__assert_fail@plt+0x5f7c>
   17338:	orrs	r2, r0, r1
   1733c:	bxeq	lr
   17340:	push	{r4, r5, lr}
   17344:	mov	r5, #0
   17348:	b	17368 <__assert_fail@plt+0x61a4>
   1734c:	orrs	r2, r0, r1
   17350:	bxeq	lr
   17354:	push	{r4, r5, lr}
   17358:	ands	r5, r1, #-2147483648	; 0x80000000
   1735c:	bpl	17368 <__assert_fail@plt+0x61a4>
   17360:	rsbs	r0, r0, #0
   17364:	rsc	r1, r1, #0
   17368:	mov	r4, #1024	; 0x400
   1736c:	add	r4, r4, #50	; 0x32
   17370:	lsrs	ip, r1, #22
   17374:	beq	170e4 <__assert_fail@plt+0x5f20>
   17378:	mov	r2, #3
   1737c:	lsrs	ip, ip, #3
   17380:	addne	r2, r2, #3
   17384:	lsrs	ip, ip, #3
   17388:	addne	r2, r2, #3
   1738c:	add	r2, r2, ip, lsr #3
   17390:	rsb	r3, r2, #32
   17394:	lsl	ip, r0, r3
   17398:	lsr	r0, r0, r2
   1739c:	orr	r0, r0, r1, lsl r3
   173a0:	lsr	r1, r1, r2
   173a4:	add	r4, r4, r2
   173a8:	b	170e4 <__assert_fail@plt+0x5f20>
   173ac:	cmp	r3, #0
   173b0:	cmpeq	r2, #0
   173b4:	bne	173cc <__assert_fail@plt+0x6208>
   173b8:	cmp	r1, #0
   173bc:	cmpeq	r0, #0
   173c0:	mvnne	r1, #0
   173c4:	mvnne	r0, #0
   173c8:	b	173e8 <__assert_fail@plt+0x6224>
   173cc:	sub	sp, sp, #8
   173d0:	push	{sp, lr}
   173d4:	bl	17438 <__assert_fail@plt+0x6274>
   173d8:	ldr	lr, [sp, #4]
   173dc:	add	sp, sp, #8
   173e0:	pop	{r2, r3}
   173e4:	bx	lr
   173e8:	push	{r1, lr}
   173ec:	mov	r0, #8
   173f0:	bl	10f3c <raise@plt>
   173f4:	pop	{r1, pc}
   173f8:	vmov	d6, r0, r1
   173fc:	vldr	d7, [pc, #36]	; 17428 <__assert_fail@plt+0x6264>
   17400:	vldr	d5, [pc, #40]	; 17430 <__assert_fail@plt+0x626c>
   17404:	vmul.f64	d7, d6, d7
   17408:	vcvt.u32.f64	s14, d7
   1740c:	vcvt.f64.u32	d4, s14
   17410:	vmov	r1, s14
   17414:	vmls.f64	d6, d4, d5
   17418:	vcvt.u32.f64	s15, d6
   1741c:	vmov	r0, s15
   17420:	bx	lr
   17424:	nop			; (mov r0, r0)
   17428:	andeq	r0, r0, r0
   1742c:	ldclcc	0, cr0, [r0]
   17430:	andeq	r0, r0, r0
   17434:	mvnsmi	r0, r0
   17438:	cmp	r1, r3
   1743c:	cmpeq	r0, r2
   17440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17444:	mov	r4, r0
   17448:	movcc	r0, #0
   1744c:	mov	r5, r1
   17450:	ldr	lr, [sp, #36]	; 0x24
   17454:	movcc	r1, r0
   17458:	bcc	17554 <__assert_fail@plt+0x6390>
   1745c:	cmp	r3, #0
   17460:	clzeq	ip, r2
   17464:	clzne	ip, r3
   17468:	addeq	ip, ip, #32
   1746c:	cmp	r5, #0
   17470:	clzeq	r1, r4
   17474:	addeq	r1, r1, #32
   17478:	clzne	r1, r5
   1747c:	sub	ip, ip, r1
   17480:	sub	sl, ip, #32
   17484:	lsl	r9, r3, ip
   17488:	rsb	fp, ip, #32
   1748c:	orr	r9, r9, r2, lsl sl
   17490:	orr	r9, r9, r2, lsr fp
   17494:	lsl	r8, r2, ip
   17498:	cmp	r5, r9
   1749c:	cmpeq	r4, r8
   174a0:	movcc	r0, #0
   174a4:	movcc	r1, r0
   174a8:	bcc	174c4 <__assert_fail@plt+0x6300>
   174ac:	mov	r0, #1
   174b0:	subs	r4, r4, r8
   174b4:	lsl	r1, r0, sl
   174b8:	orr	r1, r1, r0, lsr fp
   174bc:	lsl	r0, r0, ip
   174c0:	sbc	r5, r5, r9
   174c4:	cmp	ip, #0
   174c8:	beq	17554 <__assert_fail@plt+0x6390>
   174cc:	lsr	r6, r8, #1
   174d0:	orr	r6, r6, r9, lsl #31
   174d4:	lsr	r7, r9, #1
   174d8:	mov	r2, ip
   174dc:	b	17500 <__assert_fail@plt+0x633c>
   174e0:	subs	r3, r4, r6
   174e4:	sbc	r8, r5, r7
   174e8:	adds	r3, r3, r3
   174ec:	adc	r8, r8, r8
   174f0:	adds	r4, r3, #1
   174f4:	adc	r5, r8, #0
   174f8:	subs	r2, r2, #1
   174fc:	beq	1751c <__assert_fail@plt+0x6358>
   17500:	cmp	r5, r7
   17504:	cmpeq	r4, r6
   17508:	bcs	174e0 <__assert_fail@plt+0x631c>
   1750c:	adds	r4, r4, r4
   17510:	adc	r5, r5, r5
   17514:	subs	r2, r2, #1
   17518:	bne	17500 <__assert_fail@plt+0x633c>
   1751c:	lsr	r3, r4, ip
   17520:	orr	r3, r3, r5, lsl fp
   17524:	lsr	r2, r5, ip
   17528:	orr	r3, r3, r5, lsr sl
   1752c:	adds	r0, r0, r4
   17530:	mov	r4, r3
   17534:	lsl	r3, r2, ip
   17538:	orr	r3, r3, r4, lsl sl
   1753c:	lsl	ip, r4, ip
   17540:	orr	r3, r3, r4, lsr fp
   17544:	adc	r1, r1, r5
   17548:	subs	r0, r0, ip
   1754c:	mov	r5, r2
   17550:	sbc	r1, r1, r3
   17554:	cmp	lr, #0
   17558:	strdne	r4, [lr]
   1755c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17560:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17564:	mov	r7, r0
   17568:	ldr	r6, [pc, #72]	; 175b8 <__assert_fail@plt+0x63f4>
   1756c:	ldr	r5, [pc, #72]	; 175bc <__assert_fail@plt+0x63f8>
   17570:	add	r6, pc, r6
   17574:	add	r5, pc, r5
   17578:	sub	r6, r6, r5
   1757c:	mov	r8, r1
   17580:	mov	r9, r2
   17584:	bl	10ef8 <fdopen@plt-0x20>
   17588:	asrs	r6, r6, #2
   1758c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17590:	mov	r4, #0
   17594:	add	r4, r4, #1
   17598:	ldr	r3, [r5], #4
   1759c:	mov	r2, r9
   175a0:	mov	r1, r8
   175a4:	mov	r0, r7
   175a8:	blx	r3
   175ac:	cmp	r6, r4
   175b0:	bne	17594 <__assert_fail@plt+0x63d0>
   175b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   175b8:	muleq	r1, r4, r9
   175bc:	andeq	r1, r1, ip, lsl #19
   175c0:	bx	lr
   175c4:	ldr	r3, [pc, #12]	; 175d8 <__assert_fail@plt+0x6414>
   175c8:	mov	r1, #0
   175cc:	add	r3, pc, r3
   175d0:	ldr	r2, [r3]
   175d4:	b	110c8 <__cxa_atexit@plt>
   175d8:	andeq	r1, r1, r8, lsr #22

Disassembly of section .fini:

000175dc <.fini>:
   175dc:	push	{r3, lr}
   175e0:	pop	{r3, pc}
