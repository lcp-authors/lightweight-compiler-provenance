
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010fc8 <.init>:
   10fc8:	push	{r3, lr}
   10fcc:	bl	1181c <__assert_fail@plt+0x4ec>
   10fd0:	pop	{r3, pc}

Disassembly of section .plt:

00010fd4 <fstatfs64@plt-0x14>:
   10fd4:	push	{lr}		; (str lr, [sp, #-4]!)
   10fd8:	ldr	lr, [pc, #4]	; 10fe4 <fstatfs64@plt-0x4>
   10fdc:	add	lr, pc, lr
   10fe0:	ldr	pc, [lr, #8]!
   10fe4:	andeq	fp, r1, ip, lsl r0

00010fe8 <fstatfs64@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #28]!

00010ff4 <calloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #20]!

00011000 <endgrent@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #12]!

0001100c <fputs_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #4]!

00011018 <raise@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #106496	; 0x1a000
   11020:	ldr	pc, [ip, #4092]!	; 0xffc

00011024 <strcmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #106496	; 0x1a000
   1102c:	ldr	pc, [ip, #4084]!	; 0xff4

00011030 <getpwuid@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #106496	; 0x1a000
   11038:	ldr	pc, [ip, #4076]!	; 0xfec

0001103c <fflush@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #106496	; 0x1a000
   11044:	ldr	pc, [ip, #4068]!	; 0xfe4

00011048 <memmove@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #106496	; 0x1a000
   11050:	ldr	pc, [ip, #4060]!	; 0xfdc

00011054 <free@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #106496	; 0x1a000
   1105c:	ldr	pc, [ip, #4052]!	; 0xfd4

00011060 <__openat64_2@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #106496	; 0x1a000
   11068:	ldr	pc, [ip, #4044]!	; 0xfcc

0001106c <_exit@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #106496	; 0x1a000
   11074:	ldr	pc, [ip, #4036]!	; 0xfc4

00011078 <memcpy@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #106496	; 0x1a000
   11080:	ldr	pc, [ip, #4028]!	; 0xfbc

00011084 <__strtoull_internal@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #106496	; 0x1a000
   1108c:	ldr	pc, [ip, #4020]!	; 0xfb4

00011090 <mbsinit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #106496	; 0x1a000
   11098:	ldr	pc, [ip, #4012]!	; 0xfac

0001109c <memcmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #106496	; 0x1a000
   110a4:	ldr	pc, [ip, #4004]!	; 0xfa4

000110a8 <stpcpy@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #3996]!	; 0xf9c

000110b4 <fputc_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #3988]!	; 0xf94

000110c0 <dcgettext@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #3980]!	; 0xf8c

000110cc <realloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #3972]!	; 0xf84

000110d8 <textdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #3964]!	; 0xf7c

000110e4 <__fxstatat64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #3956]!	; 0xf74

000110f0 <iswprint@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #3948]!	; 0xf6c

000110fc <__fxstat64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #3940]!	; 0xf64

00011108 <fwrite@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #3932]!	; 0xf5c

00011114 <lseek64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3924]!	; 0xf54

00011120 <__ctype_get_mb_cur_max@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3916]!	; 0xf4c

0001112c <strcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3908]!	; 0xf44

00011138 <__fpending@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3900]!	; 0xf3c

00011144 <mbrtowc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3892]!	; 0xf34

00011150 <error@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3884]!	; 0xf2c

0001115c <open64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3876]!	; 0xf24

00011168 <malloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3868]!	; 0xf1c

00011174 <__libc_start_main@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3860]!	; 0xf14

00011180 <__freading@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3852]!	; 0xf0c

0001118c <__gmon_start__@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3844]!	; 0xf04

00011198 <getopt_long@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3836]!	; 0xefc

000111a4 <__ctype_b_loc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3828]!	; 0xef4

000111b0 <exit@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3820]!	; 0xeec

000111bc <strlen@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3812]!	; 0xee4

000111c8 <strchr@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3804]!	; 0xedc

000111d4 <openat64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3796]!	; 0xed4

000111e0 <fchown@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3788]!	; 0xecc

000111ec <__errno_location@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3780]!	; 0xec4

000111f8 <__cxa_atexit@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3772]!	; 0xebc

00011204 <memset@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3764]!	; 0xeb4

00011210 <__printf_chk@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3756]!	; 0xeac

0001121c <fileno@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3748]!	; 0xea4

00011228 <__fprintf_chk@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3740]!	; 0xe9c

00011234 <fclose@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3732]!	; 0xe94

00011240 <fseeko64@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3724]!	; 0xe8c

0001124c <fcntl64@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3716]!	; 0xe84

00011258 <setlocale@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3708]!	; 0xe7c

00011264 <strrchr@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3700]!	; 0xe74

00011270 <nl_langinfo@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3692]!	; 0xe6c

0001127c <readdir64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3684]!	; 0xe64

00011288 <fdopendir@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3676]!	; 0xe5c

00011294 <dirfd@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3668]!	; 0xe54

000112a0 <fchdir@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3660]!	; 0xe4c

000112ac <qsort@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3652]!	; 0xe44

000112b8 <fchownat@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3644]!	; 0xe3c

000112c4 <bindtextdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3636]!	; 0xe34

000112d0 <__xstat64@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3628]!	; 0xe2c

000112dc <strncmp@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3620]!	; 0xe24

000112e8 <abort@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3612]!	; 0xe1c

000112f4 <close@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3604]!	; 0xe14

00011300 <__lxstat64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3596]!	; 0xe0c

0001130c <closedir@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3588]!	; 0xe04

00011318 <getgrgid@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3580]!	; 0xdfc

00011324 <getgrnam@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011330 <__assert_fail@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3564]!	; 0xdec

Disassembly of section .text:

00011340 <.text>:
   11340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11344:	mov	r6, r0
   11348:	sub	sp, sp, #156	; 0x9c
   1134c:	ldr	r0, [r1]
   11350:	mov	r5, r1
   11354:	bl	15e8c <__assert_fail@plt+0x4b5c>
   11358:	ldr	r1, [pc, #1060]	; 11784 <__assert_fail@plt+0x454>
   1135c:	mov	r0, #6
   11360:	bl	11258 <setlocale@plt>
   11364:	ldr	r1, [pc, #1052]	; 11788 <__assert_fail@plt+0x458>
   11368:	ldr	r0, [pc, #1052]	; 1178c <__assert_fail@plt+0x45c>
   1136c:	bl	112c4 <bindtextdomain@plt>
   11370:	ldr	r0, [pc, #1044]	; 1178c <__assert_fail@plt+0x45c>
   11374:	bl	110d8 <textdomain@plt>
   11378:	ldr	r8, [pc, #1040]	; 11790 <__assert_fail@plt+0x460>
   1137c:	ldr	r0, [pc, #1040]	; 11794 <__assert_fail@plt+0x464>
   11380:	ldr	r7, [pc, #1040]	; 11798 <__assert_fail@plt+0x468>
   11384:	bl	19d38 <__assert_fail@plt+0x8a08>
   11388:	mvn	fp, #0
   1138c:	add	r0, sp, #24
   11390:	mov	sl, #16
   11394:	mov	r9, #1
   11398:	bl	11d38 <__assert_fail@plt+0xa08>
   1139c:	mov	r3, #0
   113a0:	str	r3, [sp, #20]
   113a4:	mov	r4, #0
   113a8:	str	r4, [sp]
   113ac:	mov	r3, r8
   113b0:	mov	r2, r7
   113b4:	mov	r1, r5
   113b8:	mov	r0, r6
   113bc:	bl	11198 <getopt_long@plt>
   113c0:	cmn	r0, #1
   113c4:	beq	114fc <__assert_fail@plt+0x1cc>
   113c8:	cmp	r0, #99	; 0x63
   113cc:	beq	114f4 <__assert_fail@plt+0x1c4>
   113d0:	ble	11400 <__assert_fail@plt+0xd0>
   113d4:	cmp	r0, #256	; 0x100
   113d8:	beq	114ec <__assert_fail@plt+0x1bc>
   113dc:	bgt	1142c <__assert_fail@plt+0xfc>
   113e0:	cmp	r0, #104	; 0x68
   113e4:	beq	114e4 <__assert_fail@plt+0x1b4>
   113e8:	cmp	r0, #118	; 0x76
   113ec:	beq	11474 <__assert_fail@plt+0x144>
   113f0:	cmp	r0, #102	; 0x66
   113f4:	bne	11424 <__assert_fail@plt+0xf4>
   113f8:	strb	r9, [sp, #37]	; 0x25
   113fc:	b	113a4 <__assert_fail@plt+0x74>
   11400:	cmp	r0, #72	; 0x48
   11404:	beq	114dc <__assert_fail@plt+0x1ac>
   11408:	ble	1145c <__assert_fail@plt+0x12c>
   1140c:	cmp	r0, #80	; 0x50
   11410:	beq	114d4 <__assert_fail@plt+0x1a4>
   11414:	cmp	r0, #82	; 0x52
   11418:	beq	114bc <__assert_fail@plt+0x18c>
   1141c:	cmp	r0, #76	; 0x4c
   11420:	beq	114c4 <__assert_fail@plt+0x194>
   11424:	mov	r0, #1
   11428:	bl	11908 <__assert_fail@plt+0x5d8>
   1142c:	ldr	r3, [pc, #872]	; 1179c <__assert_fail@plt+0x46c>
   11430:	cmp	r0, r3
   11434:	beq	114cc <__assert_fail@plt+0x19c>
   11438:	blt	114b4 <__assert_fail@plt+0x184>
   1143c:	add	r3, r3, #1
   11440:	cmp	r0, r3
   11444:	bne	11424 <__assert_fail@plt+0xf4>
   11448:	ldr	r3, [pc, #848]	; 117a0 <__assert_fail@plt+0x470>
   1144c:	ldr	r2, [pc, #848]	; 117a4 <__assert_fail@plt+0x474>
   11450:	ldr	r3, [r3]
   11454:	str	r3, [r2]
   11458:	b	113a4 <__assert_fail@plt+0x74>
   1145c:	cmn	r0, #3
   11460:	beq	1147c <__assert_fail@plt+0x14c>
   11464:	cmn	r0, #2
   11468:	bne	11424 <__assert_fail@plt+0xf4>
   1146c:	mov	r0, r4
   11470:	bl	11908 <__assert_fail@plt+0x5d8>
   11474:	str	r4, [sp, #24]
   11478:	b	113a4 <__assert_fail@plt+0x74>
   1147c:	ldr	r3, [pc, #804]	; 117a8 <__assert_fail@plt+0x478>
   11480:	ldr	r0, [pc, #804]	; 117ac <__assert_fail@plt+0x47c>
   11484:	ldr	r1, [pc, #804]	; 117b0 <__assert_fail@plt+0x480>
   11488:	ldr	r2, [pc, #804]	; 117b4 <__assert_fail@plt+0x484>
   1148c:	str	r4, [sp, #8]
   11490:	ldr	r0, [r0]
   11494:	ldr	r3, [r3]
   11498:	str	r1, [sp, #4]
   1149c:	str	r2, [sp]
   114a0:	ldr	r1, [pc, #784]	; 117b8 <__assert_fail@plt+0x488>
   114a4:	ldr	r2, [pc, #784]	; 117bc <__assert_fail@plt+0x48c>
   114a8:	bl	18214 <__assert_fail@plt+0x6ee4>
   114ac:	mov	r0, r4
   114b0:	bl	111b0 <exit@plt>
   114b4:	str	r4, [sp, #20]
   114b8:	b	113a4 <__assert_fail@plt+0x74>
   114bc:	strb	r9, [sp, #28]
   114c0:	b	113a4 <__assert_fail@plt+0x74>
   114c4:	mov	sl, #2
   114c8:	b	113a4 <__assert_fail@plt+0x74>
   114cc:	str	r9, [sp, #20]
   114d0:	b	113a4 <__assert_fail@plt+0x74>
   114d4:	mov	sl, #16
   114d8:	b	113a4 <__assert_fail@plt+0x74>
   114dc:	mov	sl, #17
   114e0:	b	113a4 <__assert_fail@plt+0x74>
   114e4:	mov	fp, r4
   114e8:	b	113a4 <__assert_fail@plt+0x74>
   114ec:	mov	fp, r9
   114f0:	b	113a4 <__assert_fail@plt+0x74>
   114f4:	str	r9, [sp, #24]
   114f8:	b	113a4 <__assert_fail@plt+0x74>
   114fc:	ldrb	r3, [sp, #28]
   11500:	cmp	r3, r4
   11504:	beq	1156c <__assert_fail@plt+0x23c>
   11508:	cmp	sl, #16
   1150c:	beq	115a8 <__assert_fail@plt+0x278>
   11510:	ldr	r3, [pc, #652]	; 117a4 <__assert_fail@plt+0x474>
   11514:	ldr	r4, [pc, #676]	; 117c0 <__assert_fail@plt+0x490>
   11518:	adds	fp, fp, #0
   1151c:	ldr	r7, [r3]
   11520:	ldr	r3, [r4]
   11524:	movne	fp, #1
   11528:	cmp	r7, #0
   1152c:	strb	fp, [sp, #36]	; 0x24
   11530:	sub	r2, r6, r3
   11534:	beq	1167c <__assert_fail@plt+0x34c>
   11538:	cmp	r2, #0
   1153c:	bgt	115d4 <__assert_fail@plt+0x2a4>
   11540:	cmp	r6, r3
   11544:	mov	r2, #5
   11548:	bgt	11574 <__assert_fail@plt+0x244>
   1154c:	ldr	r1, [pc, #624]	; 117c4 <__assert_fail@plt+0x494>
   11550:	mov	r0, #0
   11554:	bl	110c0 <dcgettext@plt>
   11558:	mov	r1, #0
   1155c:	mov	r2, r0
   11560:	mov	r0, r1
   11564:	bl	11150 <error@plt>
   11568:	b	11424 <__assert_fail@plt+0xf4>
   1156c:	mov	sl, #16
   11570:	b	11510 <__assert_fail@plt+0x1e0>
   11574:	ldr	r1, [pc, #588]	; 117c8 <__assert_fail@plt+0x498>
   11578:	mov	r0, #0
   1157c:	bl	110c0 <dcgettext@plt>
   11580:	sub	r6, r6, #-1073741823	; 0xc0000001
   11584:	mov	r4, r0
   11588:	ldr	r0, [r5, r6, lsl #2]
   1158c:	bl	17d4c <__assert_fail@plt+0x6a1c>
   11590:	mov	r1, #0
   11594:	mov	r2, r4
   11598:	mov	r3, r0
   1159c:	mov	r0, r1
   115a0:	bl	11150 <error@plt>
   115a4:	b	11424 <__assert_fail@plt+0xf4>
   115a8:	cmp	fp, #1
   115ac:	movne	fp, r4
   115b0:	bne	11510 <__assert_fail@plt+0x1e0>
   115b4:	mov	r2, #5
   115b8:	ldr	r1, [pc, #524]	; 117cc <__assert_fail@plt+0x49c>
   115bc:	mov	r0, r4
   115c0:	bl	110c0 <dcgettext@plt>
   115c4:	mov	r1, r4
   115c8:	mov	r2, r0
   115cc:	mov	r0, fp
   115d0:	bl	11150 <error@plt>
   115d4:	add	r2, sp, #48	; 0x30
   115d8:	mov	r1, r7
   115dc:	mov	r0, #3
   115e0:	bl	112d0 <__xstat64@plt>
   115e4:	cmp	r0, #0
   115e8:	beq	11628 <__assert_fail@plt+0x2f8>
   115ec:	bl	111ec <__errno_location@plt>
   115f0:	ldr	r1, [pc, #472]	; 117d0 <__assert_fail@plt+0x4a0>
   115f4:	mov	r2, #5
   115f8:	ldr	r4, [r0]
   115fc:	mov	r0, #0
   11600:	bl	110c0 <dcgettext@plt>
   11604:	mov	r1, r7
   11608:	mov	r5, r0
   1160c:	mov	r0, #4
   11610:	bl	17b0c <__assert_fail@plt+0x67dc>
   11614:	mov	r2, r5
   11618:	mov	r1, r4
   1161c:	mov	r3, r0
   11620:	mov	r0, #1
   11624:	bl	11150 <error@plt>
   11628:	ldr	r6, [sp, #76]	; 0x4c
   1162c:	mov	r0, r6
   11630:	bl	11d80 <__assert_fail@plt+0xa50>
   11634:	str	r0, [sp, #44]	; 0x2c
   11638:	ldrb	r3, [sp, #28]
   1163c:	ldr	r2, [sp, #20]
   11640:	tst	r2, r3
   11644:	bne	116cc <__assert_fail@plt+0x39c>
   11648:	ldr	r0, [r4]
   1164c:	mvn	r2, #0
   11650:	add	r3, sp, #24
   11654:	str	r3, [sp, #8]
   11658:	add	r0, r5, r0, lsl #2
   1165c:	mov	r3, r6
   11660:	orr	r1, sl, #1024	; 0x400
   11664:	str	r2, [sp, #4]
   11668:	str	r2, [sp]
   1166c:	bl	11e00 <__assert_fail@plt+0xad0>
   11670:	eor	r0, r0, #1
   11674:	uxtb	r0, r0
   11678:	bl	111b0 <exit@plt>
   1167c:	cmp	r2, #1
   11680:	ble	11540 <__assert_fail@plt+0x210>
   11684:	ldr	r6, [r5, r3, lsl #2]
   11688:	add	r3, r3, #1
   1168c:	str	r3, [r4]
   11690:	ldrb	r3, [r6]
   11694:	cmp	r3, #0
   11698:	bne	11708 <__assert_fail@plt+0x3d8>
   1169c:	str	r7, [sp, #44]	; 0x2c
   116a0:	ldrb	r3, [r6]
   116a4:	cmp	r3, #0
   116a8:	mvneq	r6, #0
   116ac:	beq	11638 <__assert_fail@plt+0x308>
   116b0:	mov	r0, r6
   116b4:	bl	11324 <getgrnam@plt>
   116b8:	subs	r1, r0, #0
   116bc:	beq	11718 <__assert_fail@plt+0x3e8>
   116c0:	ldr	r6, [r1, #8]
   116c4:	bl	11000 <endgrent@plt>
   116c8:	b	11638 <__assert_fail@plt+0x308>
   116cc:	ldr	r0, [pc, #256]	; 117d4 <__assert_fail@plt+0x4a4>
   116d0:	bl	17d64 <__assert_fail@plt+0x6a34>
   116d4:	cmp	r0, #0
   116d8:	mov	r7, r0
   116dc:	str	r0, [sp, #32]
   116e0:	bne	11648 <__assert_fail@plt+0x318>
   116e4:	bl	111ec <__errno_location@plt>
   116e8:	ldr	r1, [pc, #224]	; 117d0 <__assert_fail@plt+0x4a0>
   116ec:	mov	r2, #5
   116f0:	ldr	r4, [r0]
   116f4:	mov	r0, r7
   116f8:	bl	110c0 <dcgettext@plt>
   116fc:	ldr	r1, [pc, #212]	; 117d8 <__assert_fail@plt+0x4a8>
   11700:	mov	r5, r0
   11704:	b	1160c <__assert_fail@plt+0x2dc>
   11708:	mov	r0, r6
   1170c:	bl	1883c <__assert_fail@plt+0x750c>
   11710:	mov	r7, r0
   11714:	b	1169c <__assert_fail@plt+0x36c>
   11718:	ldr	r3, [pc, #100]	; 11784 <__assert_fail@plt+0x454>
   1171c:	mov	r2, #10
   11720:	str	r3, [sp]
   11724:	mov	r0, r6
   11728:	add	r3, sp, #48	; 0x30
   1172c:	bl	189b0 <__assert_fail@plt+0x7680>
   11730:	cmp	r0, #0
   11734:	bne	11754 <__assert_fail@plt+0x424>
   11738:	ldrd	r2, [sp, #48]	; 0x30
   1173c:	mov	r1, #0
   11740:	mvn	r0, #0
   11744:	cmp	r3, r1
   11748:	cmpeq	r2, r0
   1174c:	movls	r6, r2
   11750:	bls	116c4 <__assert_fail@plt+0x394>
   11754:	mov	r2, #5
   11758:	ldr	r1, [pc, #124]	; 117dc <__assert_fail@plt+0x4ac>
   1175c:	mov	r0, #0
   11760:	bl	110c0 <dcgettext@plt>
   11764:	mov	r4, r0
   11768:	mov	r0, r6
   1176c:	bl	17d4c <__assert_fail@plt+0x6a1c>
   11770:	mov	r2, r4
   11774:	mov	r1, #0
   11778:	mov	r3, r0
   1177c:	mov	r0, #1
   11780:	bl	11150 <error@plt>
   11784:	andeq	sl, r1, r8, lsl #9
   11788:	andeq	sl, r1, r8, ror #12
   1178c:	andeq	sl, r1, r0, asr #11
   11790:	muleq	r1, r4, sp
   11794:	andeq	r2, r1, r0, asr #21
   11798:	andeq	sl, r1, r0, lsr #13
   1179c:	andeq	r0, r0, r2, lsl #2
   117a0:	muleq	r2, r8, r1
   117a4:	andeq	ip, r2, r0, lsr #3
   117a8:	andeq	ip, r2, r4, lsr r1
   117ac:	muleq	r2, r4, r1
   117b0:	andeq	sl, r1, r0, lsl #13
   117b4:	muleq	r1, r0, r6
   117b8:	andeq	r9, r1, r4, ror #28
   117bc:			; <UNDEFINED> instruction: 0x0001a5bc
   117c0:	andeq	ip, r2, r8, lsl #3
   117c4:	ldrdeq	sl, [r1], -r8
   117c8:	andeq	sl, r1, r8, ror #13
   117cc:	andeq	sl, r1, ip, lsr #13
   117d0:	andeq	sl, r1, r4, lsl #14
   117d4:	andeq	ip, r2, r8, lsr #3
   117d8:	andeq	sl, r1, r8, lsr r7
   117dc:	andeq	sl, r1, r4, lsr #14
   117e0:	mov	fp, #0
   117e4:	mov	lr, #0
   117e8:	pop	{r1}		; (ldr r1, [sp], #4)
   117ec:	mov	r2, sp
   117f0:	push	{r2}		; (str r2, [sp, #-4]!)
   117f4:	push	{r0}		; (str r0, [sp, #-4]!)
   117f8:	ldr	ip, [pc, #16]	; 11810 <__assert_fail@plt+0x4e0>
   117fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11800:	ldr	r0, [pc, #12]	; 11814 <__assert_fail@plt+0x4e4>
   11804:	ldr	r3, [pc, #12]	; 11818 <__assert_fail@plt+0x4e8>
   11808:	bl	11174 <__libc_start_main@plt>
   1180c:	bl	112e8 <abort@plt>
   11810:	andeq	r9, r1, r4, lsr sp
   11814:	andeq	r1, r1, r0, asr #6
   11818:	ldrdeq	r9, [r1], -r4
   1181c:	ldr	r3, [pc, #20]	; 11838 <__assert_fail@plt+0x508>
   11820:	ldr	r2, [pc, #20]	; 1183c <__assert_fail@plt+0x50c>
   11824:	add	r3, pc, r3
   11828:	ldr	r2, [r3, r2]
   1182c:	cmp	r2, #0
   11830:	bxeq	lr
   11834:	b	1118c <__gmon_start__@plt>
   11838:	ldrdeq	sl, [r1], -r4
   1183c:	andeq	r0, r0, r8, lsr #2
   11840:	ldr	r3, [pc, #28]	; 11864 <__assert_fail@plt+0x534>
   11844:	ldr	r0, [pc, #28]	; 11868 <__assert_fail@plt+0x538>
   11848:	sub	r3, r3, r0
   1184c:	cmp	r3, #6
   11850:	bxls	lr
   11854:	ldr	r3, [pc, #16]	; 1186c <__assert_fail@plt+0x53c>
   11858:	cmp	r3, #0
   1185c:	bxeq	lr
   11860:	bx	r3
   11864:	andeq	ip, r2, pc, ror r1
   11868:	andeq	ip, r2, ip, ror r1
   1186c:	andeq	r0, r0, r0
   11870:	ldr	r1, [pc, #36]	; 1189c <__assert_fail@plt+0x56c>
   11874:	ldr	r0, [pc, #36]	; 118a0 <__assert_fail@plt+0x570>
   11878:	sub	r1, r1, r0
   1187c:	asr	r1, r1, #2
   11880:	add	r1, r1, r1, lsr #31
   11884:	asrs	r1, r1, #1
   11888:	bxeq	lr
   1188c:	ldr	r3, [pc, #16]	; 118a4 <__assert_fail@plt+0x574>
   11890:	cmp	r3, #0
   11894:	bxeq	lr
   11898:	bx	r3
   1189c:	andeq	ip, r2, ip, ror r1
   118a0:	andeq	ip, r2, ip, ror r1
   118a4:	andeq	r0, r0, r0
   118a8:	push	{r4, lr}
   118ac:	ldr	r4, [pc, #24]	; 118cc <__assert_fail@plt+0x59c>
   118b0:	ldrb	r3, [r4]
   118b4:	cmp	r3, #0
   118b8:	popne	{r4, pc}
   118bc:	bl	11840 <__assert_fail@plt+0x510>
   118c0:	mov	r3, #1
   118c4:	strb	r3, [r4]
   118c8:	pop	{r4, pc}
   118cc:	muleq	r2, ip, r1
   118d0:	ldr	r0, [pc, #40]	; 11900 <__assert_fail@plt+0x5d0>
   118d4:	ldr	r3, [r0]
   118d8:	cmp	r3, #0
   118dc:	bne	118e4 <__assert_fail@plt+0x5b4>
   118e0:	b	11870 <__assert_fail@plt+0x540>
   118e4:	ldr	r3, [pc, #24]	; 11904 <__assert_fail@plt+0x5d4>
   118e8:	cmp	r3, #0
   118ec:	beq	118e0 <__assert_fail@plt+0x5b0>
   118f0:	push	{r4, lr}
   118f4:	blx	r3
   118f8:	pop	{r4, lr}
   118fc:	b	11870 <__assert_fail@plt+0x540>
   11900:	andeq	fp, r2, r4, lsl pc
   11904:	andeq	r0, r0, r0
   11908:	subs	r5, r0, #0
   1190c:	push	{r7, lr}
   11910:	sub	sp, sp, #56	; 0x38
   11914:	beq	11950 <__assert_fail@plt+0x620>
   11918:	ldr	r3, [pc, #820]	; 11c54 <__assert_fail@plt+0x924>
   1191c:	mov	r2, #5
   11920:	ldr	r1, [pc, #816]	; 11c58 <__assert_fail@plt+0x928>
   11924:	mov	r0, #0
   11928:	ldr	r4, [r3]
   1192c:	bl	110c0 <dcgettext@plt>
   11930:	ldr	r3, [pc, #804]	; 11c5c <__assert_fail@plt+0x92c>
   11934:	mov	r1, #1
   11938:	ldr	r3, [r3]
   1193c:	mov	r2, r0
   11940:	mov	r0, r4
   11944:	bl	11228 <__fprintf_chk@plt>
   11948:	mov	r0, r5
   1194c:	bl	111b0 <exit@plt>
   11950:	mov	r2, #5
   11954:	ldr	r1, [pc, #772]	; 11c60 <__assert_fail@plt+0x930>
   11958:	bl	110c0 <dcgettext@plt>
   1195c:	ldr	r4, [pc, #760]	; 11c5c <__assert_fail@plt+0x92c>
   11960:	ldr	r7, [pc, #764]	; 11c64 <__assert_fail@plt+0x934>
   11964:	ldr	r3, [r4]
   11968:	mov	r2, r3
   1196c:	mov	r1, r0
   11970:	mov	r0, #1
   11974:	bl	11210 <__printf_chk@plt>
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #740]	; 11c68 <__assert_fail@plt+0x938>
   11980:	mov	r0, r5
   11984:	bl	110c0 <dcgettext@plt>
   11988:	ldr	r1, [r7]
   1198c:	bl	1100c <fputs_unlocked@plt>
   11990:	mov	r2, #5
   11994:	ldr	r1, [pc, #720]	; 11c6c <__assert_fail@plt+0x93c>
   11998:	mov	r0, r5
   1199c:	bl	110c0 <dcgettext@plt>
   119a0:	ldr	r1, [r7]
   119a4:	bl	1100c <fputs_unlocked@plt>
   119a8:	mov	r2, #5
   119ac:	ldr	r1, [pc, #700]	; 11c70 <__assert_fail@plt+0x940>
   119b0:	mov	r0, r5
   119b4:	bl	110c0 <dcgettext@plt>
   119b8:	ldr	r1, [r7]
   119bc:	bl	1100c <fputs_unlocked@plt>
   119c0:	mov	r2, #5
   119c4:	ldr	r1, [pc, #680]	; 11c74 <__assert_fail@plt+0x944>
   119c8:	mov	r0, r5
   119cc:	bl	110c0 <dcgettext@plt>
   119d0:	ldr	r1, [r7]
   119d4:	bl	1100c <fputs_unlocked@plt>
   119d8:	mov	r2, #5
   119dc:	ldr	r1, [pc, #660]	; 11c78 <__assert_fail@plt+0x948>
   119e0:	mov	r0, r5
   119e4:	bl	110c0 <dcgettext@plt>
   119e8:	ldr	r1, [r7]
   119ec:	bl	1100c <fputs_unlocked@plt>
   119f0:	mov	r2, #5
   119f4:	ldr	r1, [pc, #640]	; 11c7c <__assert_fail@plt+0x94c>
   119f8:	mov	r0, r5
   119fc:	bl	110c0 <dcgettext@plt>
   11a00:	ldr	r1, [r7]
   11a04:	bl	1100c <fputs_unlocked@plt>
   11a08:	mov	r2, #5
   11a0c:	ldr	r1, [pc, #620]	; 11c80 <__assert_fail@plt+0x950>
   11a10:	mov	r0, r5
   11a14:	bl	110c0 <dcgettext@plt>
   11a18:	ldr	r1, [r7]
   11a1c:	bl	1100c <fputs_unlocked@plt>
   11a20:	mov	r2, #5
   11a24:	ldr	r1, [pc, #600]	; 11c84 <__assert_fail@plt+0x954>
   11a28:	mov	r0, r5
   11a2c:	bl	110c0 <dcgettext@plt>
   11a30:	ldr	r1, [r7]
   11a34:	bl	1100c <fputs_unlocked@plt>
   11a38:	mov	r2, #5
   11a3c:	ldr	r1, [pc, #580]	; 11c88 <__assert_fail@plt+0x958>
   11a40:	mov	r0, r5
   11a44:	bl	110c0 <dcgettext@plt>
   11a48:	ldr	r1, [r7]
   11a4c:	bl	1100c <fputs_unlocked@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #560]	; 11c8c <__assert_fail@plt+0x95c>
   11a58:	mov	r0, r5
   11a5c:	bl	110c0 <dcgettext@plt>
   11a60:	ldr	r1, [r7]
   11a64:	bl	1100c <fputs_unlocked@plt>
   11a68:	mov	r2, #5
   11a6c:	ldr	r1, [pc, #540]	; 11c90 <__assert_fail@plt+0x960>
   11a70:	mov	r0, r5
   11a74:	bl	110c0 <dcgettext@plt>
   11a78:	ldr	r3, [r4]
   11a7c:	ldr	r4, [pc, #528]	; 11c94 <__assert_fail@plt+0x964>
   11a80:	mov	r2, r3
   11a84:	mov	r1, r0
   11a88:	mov	r0, #1
   11a8c:	bl	11210 <__printf_chk@plt>
   11a90:	ldm	r4!, {r0, r1, r2, r3}
   11a94:	mov	lr, sp
   11a98:	stmia	lr!, {r0, r1, r2, r3}
   11a9c:	ldm	r4!, {r0, r1, r2, r3}
   11aa0:	ldr	ip, [sp]
   11aa4:	stmia	lr!, {r0, r1, r2, r3}
   11aa8:	cmp	ip, #0
   11aac:	ldm	r4!, {r0, r1, r2, r3}
   11ab0:	stmia	lr!, {r0, r1, r2, r3}
   11ab4:	ldm	r4, {r0, r1}
   11ab8:	moveq	r4, sp
   11abc:	stm	lr, {r0, r1}
   11ac0:	beq	11af0 <__assert_fail@plt+0x7c0>
   11ac4:	ldr	r6, [pc, #460]	; 11c98 <__assert_fail@plt+0x968>
   11ac8:	mov	r4, sp
   11acc:	b	11adc <__assert_fail@plt+0x7ac>
   11ad0:	ldr	ip, [r4, #8]!
   11ad4:	cmp	ip, #0
   11ad8:	beq	11af0 <__assert_fail@plt+0x7c0>
   11adc:	mov	r1, ip
   11ae0:	mov	r0, r6
   11ae4:	bl	11024 <strcmp@plt>
   11ae8:	cmp	r0, #0
   11aec:	bne	11ad0 <__assert_fail@plt+0x7a0>
   11af0:	ldr	r4, [r4, #4]
   11af4:	mov	r2, #5
   11af8:	cmp	r4, #0
   11afc:	ldr	r1, [pc, #408]	; 11c9c <__assert_fail@plt+0x96c>
   11b00:	beq	11ba8 <__assert_fail@plt+0x878>
   11b04:	mov	r0, #0
   11b08:	bl	110c0 <dcgettext@plt>
   11b0c:	ldr	r3, [pc, #396]	; 11ca0 <__assert_fail@plt+0x970>
   11b10:	ldr	r2, [pc, #396]	; 11ca4 <__assert_fail@plt+0x974>
   11b14:	mov	r1, r0
   11b18:	mov	r0, #1
   11b1c:	bl	11210 <__printf_chk@plt>
   11b20:	mov	r1, #0
   11b24:	mov	r0, #5
   11b28:	bl	11258 <setlocale@plt>
   11b2c:	cmp	r0, #0
   11b30:	ldreq	r6, [pc, #352]	; 11c98 <__assert_fail@plt+0x968>
   11b34:	beq	11b50 <__assert_fail@plt+0x820>
   11b38:	mov	r2, #3
   11b3c:	ldr	r1, [pc, #356]	; 11ca8 <__assert_fail@plt+0x978>
   11b40:	bl	112dc <strncmp@plt>
   11b44:	ldr	r6, [pc, #332]	; 11c98 <__assert_fail@plt+0x968>
   11b48:	cmp	r0, #0
   11b4c:	bne	11c38 <__assert_fail@plt+0x908>
   11b50:	mov	r2, #5
   11b54:	ldr	r1, [pc, #336]	; 11cac <__assert_fail@plt+0x97c>
   11b58:	mov	r0, #0
   11b5c:	bl	110c0 <dcgettext@plt>
   11b60:	ldr	r3, [pc, #304]	; 11c98 <__assert_fail@plt+0x968>
   11b64:	ldr	r2, [pc, #308]	; 11ca0 <__assert_fail@plt+0x970>
   11b68:	mov	r1, r0
   11b6c:	mov	r0, #1
   11b70:	bl	11210 <__printf_chk@plt>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #304]	; 11cb0 <__assert_fail@plt+0x980>
   11b7c:	mov	r0, #0
   11b80:	bl	110c0 <dcgettext@plt>
   11b84:	ldr	r2, [pc, #296]	; 11cb4 <__assert_fail@plt+0x984>
   11b88:	cmp	r4, r6
   11b8c:	ldr	r3, [pc, #292]	; 11cb8 <__assert_fail@plt+0x988>
   11b90:	movne	r3, r2
   11b94:	mov	r1, r0
   11b98:	mov	r2, r4
   11b9c:	mov	r0, #1
   11ba0:	bl	11210 <__printf_chk@plt>
   11ba4:	b	11948 <__assert_fail@plt+0x618>
   11ba8:	mov	r0, r4
   11bac:	bl	110c0 <dcgettext@plt>
   11bb0:	ldr	r3, [pc, #232]	; 11ca0 <__assert_fail@plt+0x970>
   11bb4:	ldr	r2, [pc, #232]	; 11ca4 <__assert_fail@plt+0x974>
   11bb8:	mov	r1, r0
   11bbc:	mov	r0, #1
   11bc0:	bl	11210 <__printf_chk@plt>
   11bc4:	mov	r1, r4
   11bc8:	mov	r0, #5
   11bcc:	bl	11258 <setlocale@plt>
   11bd0:	cmp	r0, #0
   11bd4:	beq	11bec <__assert_fail@plt+0x8bc>
   11bd8:	mov	r2, #3
   11bdc:	ldr	r1, [pc, #196]	; 11ca8 <__assert_fail@plt+0x978>
   11be0:	bl	112dc <strncmp@plt>
   11be4:	cmp	r0, #0
   11be8:	bne	11c30 <__assert_fail@plt+0x900>
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #180]	; 11cac <__assert_fail@plt+0x97c>
   11bf4:	mov	r0, #0
   11bf8:	bl	110c0 <dcgettext@plt>
   11bfc:	ldr	r3, [pc, #148]	; 11c98 <__assert_fail@plt+0x968>
   11c00:	ldr	r2, [pc, #152]	; 11ca0 <__assert_fail@plt+0x970>
   11c04:	mov	r4, r3
   11c08:	mov	r1, r0
   11c0c:	mov	r0, #1
   11c10:	bl	11210 <__printf_chk@plt>
   11c14:	ldr	r1, [pc, #148]	; 11cb0 <__assert_fail@plt+0x980>
   11c18:	mov	r2, #5
   11c1c:	mov	r0, #0
   11c20:	bl	110c0 <dcgettext@plt>
   11c24:	ldr	r3, [pc, #140]	; 11cb8 <__assert_fail@plt+0x988>
   11c28:	mov	r1, r0
   11c2c:	b	11b98 <__assert_fail@plt+0x868>
   11c30:	ldr	r6, [pc, #96]	; 11c98 <__assert_fail@plt+0x968>
   11c34:	mov	r4, r6
   11c38:	mov	r2, #5
   11c3c:	ldr	r1, [pc, #120]	; 11cbc <__assert_fail@plt+0x98c>
   11c40:	mov	r0, #0
   11c44:	bl	110c0 <dcgettext@plt>
   11c48:	ldr	r1, [r7]
   11c4c:	bl	1100c <fputs_unlocked@plt>
   11c50:	b	11b50 <__assert_fail@plt+0x820>
   11c54:	muleq	r2, r0, r1
   11c58:	andeq	r9, r1, ip, ror #28
   11c5c:	andeq	ip, r2, r0, asr #3
   11c60:	muleq	r1, r4, lr
   11c64:	muleq	r2, r4, r1
   11c68:	andeq	r9, r1, ip, ror #29
   11c6c:	andeq	r9, r1, r8, asr pc
   11c70:	andeq	sl, r1, r4, lsr #32
   11c74:	andeq	sl, r1, ip, lsl #2
   11c78:	andeq	sl, r1, r4, lsl #3
   11c7c:	andeq	sl, r1, r4, lsl #4
   11c80:	andeq	sl, r1, r0, ror r2
   11c84:			; <UNDEFINED> instruction: 0x0001a2b8
   11c88:	andeq	sl, r1, ip, lsl #9
   11c8c:			; <UNDEFINED> instruction: 0x0001a4bc
   11c90:	strdeq	sl, [r1], -r4
   11c94:	andeq	r9, r1, ip, asr sp
   11c98:	andeq	r9, r1, r4, ror #28
   11c9c:	andeq	sl, r1, ip, ror r5
   11ca0:	muleq	r1, r4, r5
   11ca4:			; <UNDEFINED> instruction: 0x0001a5bc
   11ca8:	andeq	sl, r1, ip, asr #11
   11cac:	andeq	sl, r1, r8, lsl r6
   11cb0:	andeq	sl, r1, r4, lsr r6
   11cb4:	andeq	sl, r1, r8, lsl #9
   11cb8:	andeq	sl, r1, r4, asr #14
   11cbc:	ldrdeq	sl, [r1], -r0
   11cc0:	subs	r3, r0, #0
   11cc4:	push	{r4, r5, r6, lr}
   11cc8:	beq	11d1c <__assert_fail@plt+0x9ec>
   11ccc:	cmp	r1, #0
   11cd0:	beq	11d28 <__assert_fail@plt+0x9f8>
   11cd4:	mov	r4, r1
   11cd8:	mov	r5, r3
   11cdc:	bl	111bc <strlen@plt>
   11ce0:	mov	r6, r0
   11ce4:	mov	r0, r4
   11ce8:	bl	111bc <strlen@plt>
   11cec:	add	r0, r6, r0
   11cf0:	add	r0, r0, #2
   11cf4:	bl	18310 <__assert_fail@plt+0x6fe0>
   11cf8:	mov	r1, r5
   11cfc:	mov	r6, r0
   11d00:	bl	110a8 <stpcpy@plt>
   11d04:	mov	r3, #58	; 0x3a
   11d08:	mov	r1, r4
   11d0c:	strb	r3, [r0], #1
   11d10:	bl	1112c <strcpy@plt>
   11d14:	mov	r0, r6
   11d18:	pop	{r4, r5, r6, pc}
   11d1c:	cmp	r1, #0
   11d20:	beq	11d30 <__assert_fail@plt+0xa00>
   11d24:	mov	r0, r1
   11d28:	pop	{r4, r5, r6, lr}
   11d2c:	b	1883c <__assert_fail@plt+0x750c>
   11d30:	mov	r6, r1
   11d34:	b	11d14 <__assert_fail@plt+0x9e4>
   11d38:	mov	r3, #0
   11d3c:	mov	r1, #2
   11d40:	mov	r2, #1
   11d44:	str	r1, [r0]
   11d48:	strb	r2, [r0, #12]
   11d4c:	str	r3, [r0, #8]
   11d50:	strb	r3, [r0, #4]
   11d54:	strb	r3, [r0, #13]
   11d58:	str	r3, [r0, #16]
   11d5c:	str	r3, [r0, #20]
   11d60:	bx	lr
   11d64:	push	{r4, lr}
   11d68:	mov	r4, r0
   11d6c:	ldr	r0, [r0, #16]
   11d70:	bl	12ba4 <__assert_fail@plt+0x1874>
   11d74:	ldr	r0, [r4, #20]
   11d78:	pop	{r4, lr}
   11d7c:	b	12ba4 <__assert_fail@plt+0x1874>
   11d80:	push	{r4, lr}
   11d84:	sub	sp, sp, #24
   11d88:	mov	r4, r0
   11d8c:	bl	11318 <getgrgid@plt>
   11d90:	subs	r1, r0, #0
   11d94:	beq	11da8 <__assert_fail@plt+0xa78>
   11d98:	ldr	r0, [r1]
   11d9c:	bl	1883c <__assert_fail@plt+0x750c>
   11da0:	add	sp, sp, #24
   11da4:	pop	{r4, pc}
   11da8:	mov	r2, sp
   11dac:	mov	r0, r4
   11db0:	bl	15d98 <__assert_fail@plt+0x4a68>
   11db4:	bl	1883c <__assert_fail@plt+0x750c>
   11db8:	add	sp, sp, #24
   11dbc:	pop	{r4, pc}
   11dc0:	push	{r4, lr}
   11dc4:	sub	sp, sp, #24
   11dc8:	mov	r4, r0
   11dcc:	bl	11030 <getpwuid@plt>
   11dd0:	subs	r1, r0, #0
   11dd4:	beq	11de8 <__assert_fail@plt+0xab8>
   11dd8:	ldr	r0, [r1]
   11ddc:	bl	1883c <__assert_fail@plt+0x750c>
   11de0:	add	sp, sp, #24
   11de4:	pop	{r4, pc}
   11de8:	mov	r2, sp
   11dec:	mov	r0, r4
   11df0:	bl	15d98 <__assert_fail@plt+0x4a68>
   11df4:	bl	1883c <__assert_fail@plt+0x750c>
   11df8:	add	sp, sp, #24
   11dfc:	pop	{r4, pc}
   11e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e04:	sub	sp, sp, #252	; 0xfc
   11e08:	ldr	ip, [sp, #292]	; 0x124
   11e0c:	ldr	lr, [sp, #288]	; 0x120
   11e10:	str	r2, [sp, #20]
   11e14:	cmn	lr, #1
   11e18:	cmneq	ip, #1
   11e1c:	movne	ip, #1
   11e20:	moveq	ip, #0
   11e24:	str	r3, [sp, #36]	; 0x24
   11e28:	ldr	r5, [sp, #296]	; 0x128
   11e2c:	movne	ip, #0
   11e30:	bne	11e40 <__assert_fail@plt+0xb10>
   11e34:	ldrb	r3, [r5, #12]
   11e38:	cmp	r3, #0
   11e3c:	beq	12218 <__assert_fail@plt+0xee8>
   11e40:	orr	r1, ip, r1
   11e44:	mov	r2, #0
   11e48:	bl	18898 <__assert_fail@plt+0x7568>
   11e4c:	mov	r3, #1
   11e50:	str	r3, [sp, #12]
   11e54:	mov	r6, r5
   11e58:	mov	r8, r0
   11e5c:	bl	111ec <__errno_location@plt>
   11e60:	str	r0, [sp, #32]
   11e64:	mov	r0, r8
   11e68:	bl	144d0 <__assert_fail@plt+0x31a0>
   11e6c:	subs	sl, r0, #0
   11e70:	beq	11f1c <__assert_fail@plt+0xbec>
   11e74:	ldrh	r4, [sl, #56]	; 0x38
   11e78:	ldr	r3, [sl, #28]
   11e7c:	sub	fp, r4, #1
   11e80:	str	r3, [sp, #16]
   11e84:	cmp	fp, #9
   11e88:	ldrls	pc, [pc, fp, lsl #2]
   11e8c:	b	12030 <__assert_fail@plt+0xd00>
   11e90:	andeq	r2, r1, ip, asr #2
   11e94:	andeq	r2, r1, ip, lsl r0
   11e98:	andeq	r2, r1, r0, lsr r0
   11e9c:	ldrdeq	r1, [r1], -r4
   11ea0:	andeq	r2, r1, r0, lsr r0
   11ea4:	andeq	r1, r1, r4, asr #31
   11ea8:	andeq	r1, r1, ip, lsl #31
   11eac:	andeq	r2, r1, r0, lsr r0
   11eb0:	andeq	r2, r1, r0, lsr r0
   11eb4:			; <UNDEFINED> instruction: 0x00011eb8
   11eb8:	ldr	r3, [sl, #48]	; 0x30
   11ebc:	cmp	r3, #0
   11ec0:	bne	11ed0 <__assert_fail@plt+0xba0>
   11ec4:	ldr	r3, [sl, #16]
   11ec8:	cmp	r3, #0
   11ecc:	beq	125e8 <__assert_fail@plt+0x12b8>
   11ed0:	ldrb	r4, [r6, #13]
   11ed4:	cmp	r4, #0
   11ed8:	beq	125dc <__assert_fail@plt+0x12ac>
   11edc:	ldr	r3, [r6]
   11ee0:	cmp	r3, #2
   11ee4:	bne	12a00 <__assert_fail@plt+0x16d0>
   11ee8:	mov	r3, #0
   11eec:	str	r3, [sp, #12]
   11ef0:	ldrb	r3, [r6, #4]
   11ef4:	cmp	r3, #0
   11ef8:	bne	11e64 <__assert_fail@plt+0xb34>
   11efc:	mov	r1, sl
   11f00:	mov	r2, #4
   11f04:	mov	r0, r8
   11f08:	bl	14b88 <__assert_fail@plt+0x3858>
   11f0c:	mov	r0, r8
   11f10:	bl	144d0 <__assert_fail@plt+0x31a0>
   11f14:	subs	sl, r0, #0
   11f18:	bne	11e74 <__assert_fail@plt+0xb44>
   11f1c:	ldr	r3, [sp, #32]
   11f20:	ldr	r4, [r3]
   11f24:	cmp	r4, #0
   11f28:	beq	11f40 <__assert_fail@plt+0xc10>
   11f2c:	ldrb	r3, [r6, #13]
   11f30:	cmp	r3, #0
   11f34:	str	r3, [sp, #12]
   11f38:	strne	sl, [sp, #12]
   11f3c:	beq	12600 <__assert_fail@plt+0x12d0>
   11f40:	mov	r0, r8
   11f44:	bl	14370 <__assert_fail@plt+0x3040>
   11f48:	cmp	r0, #0
   11f4c:	beq	11f80 <__assert_fail@plt+0xc50>
   11f50:	ldr	r3, [sp, #32]
   11f54:	mov	r2, #5
   11f58:	ldr	r1, [pc, #2780]	; 12a3c <__assert_fail@plt+0x170c>
   11f5c:	mov	r0, #0
   11f60:	ldr	r4, [r3]
   11f64:	bl	110c0 <dcgettext@plt>
   11f68:	mov	r1, r4
   11f6c:	mov	r2, r0
   11f70:	mov	r0, #0
   11f74:	bl	11150 <error@plt>
   11f78:	mov	r3, #0
   11f7c:	str	r3, [sp, #12]
   11f80:	ldr	r0, [sp, #12]
   11f84:	add	sp, sp, #252	; 0xfc
   11f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f8c:	ldrb	r4, [r6, #13]
   11f90:	cmp	r4, #0
   11f94:	bne	11edc <__assert_fail@plt+0xbac>
   11f98:	ldr	r2, [sp, #16]
   11f9c:	mov	r1, #3
   11fa0:	mov	r0, r4
   11fa4:	ldr	r5, [sl, #32]
   11fa8:	bl	17bc8 <__assert_fail@plt+0x6898>
   11fac:	mov	r1, r5
   11fb0:	ldr	r2, [pc, #2696]	; 12a40 <__assert_fail@plt+0x1710>
   11fb4:	mov	r3, r0
   11fb8:	mov	r0, r4
   11fbc:	bl	11150 <error@plt>
   11fc0:	b	11edc <__assert_fail@plt+0xbac>
   11fc4:	ldrb	r3, [r6, #4]
   11fc8:	cmp	r3, #0
   11fcc:	bne	12030 <__assert_fail@plt+0xd00>
   11fd0:	b	11e64 <__assert_fail@plt+0xb34>
   11fd4:	ldrb	r4, [r6, #13]
   11fd8:	cmp	r4, #0
   11fdc:	bne	11edc <__assert_fail@plt+0xbac>
   11fe0:	ldr	r1, [pc, #2652]	; 12a44 <__assert_fail@plt+0x1714>
   11fe4:	mov	r2, #5
   11fe8:	mov	r0, r4
   11fec:	ldr	r5, [sl, #32]
   11ff0:	bl	110c0 <dcgettext@plt>
   11ff4:	ldr	r1, [sp, #16]
   11ff8:	mov	r7, r0
   11ffc:	mov	r0, #4
   12000:	bl	17b0c <__assert_fail@plt+0x67dc>
   12004:	mov	r2, r7
   12008:	mov	r1, r5
   1200c:	mov	r3, r0
   12010:	mov	r0, r4
   12014:	bl	11150 <error@plt>
   12018:	b	11edc <__assert_fail@plt+0xbac>
   1201c:	mov	r1, sl
   12020:	mov	r0, r8
   12024:	bl	188e0 <__assert_fail@plt+0x75b0>
   12028:	cmp	r0, #0
   1202c:	bne	12648 <__assert_fail@plt+0x1318>
   12030:	ldr	r3, [sp, #292]	; 0x124
   12034:	ldr	r2, [sp, #288]	; 0x120
   12038:	ldr	r9, [sl, #24]
   1203c:	cmn	r3, #1
   12040:	cmneq	r2, #1
   12044:	moveq	r7, #1
   12048:	movne	r7, #0
   1204c:	bne	1205c <__assert_fail@plt+0xd2c>
   12050:	ldr	r3, [r6]
   12054:	cmp	r3, #2
   12058:	beq	125bc <__assert_fail@plt+0x128c>
   1205c:	ldrb	r3, [r6, #12]
   12060:	add	r5, sl, #64	; 0x40
   12064:	cmp	r3, #0
   12068:	beq	1207c <__assert_fail@plt+0xd4c>
   1206c:	ldr	r3, [sl, #80]	; 0x50
   12070:	and	r3, r3, #61440	; 0xf000
   12074:	cmp	r3, #40960	; 0xa000
   12078:	beq	12694 <__assert_fail@plt+0x1364>
   1207c:	ldr	r3, [sp, #288]	; 0x120
   12080:	cmn	r3, #1
   12084:	beq	1222c <__assert_fail@plt+0xefc>
   12088:	ldr	r3, [r5, #24]
   1208c:	ldr	r2, [sp, #288]	; 0x120
   12090:	cmp	r2, r3
   12094:	beq	1222c <__assert_fail@plt+0xefc>
   12098:	bic	r4, r4, #2
   1209c:	uxth	fp, fp
   120a0:	cmp	r4, #4
   120a4:	cmpne	fp, #1
   120a8:	movls	r4, #1
   120ac:	movhi	r4, #0
   120b0:	bls	12a24 <__assert_fail@plt+0x16f4>
   120b4:	mov	r7, #1
   120b8:	ldr	r3, [sp, #12]
   120bc:	mov	r4, #1
   120c0:	and	r3, r3, r7
   120c4:	uxtb	r3, r3
   120c8:	str	r3, [sp, #12]
   120cc:	ldr	r3, [r6]
   120d0:	cmp	r3, #2
   120d4:	beq	11ef0 <__assert_fail@plt+0xbc0>
   120d8:	cmp	r3, #0
   120dc:	bne	11ef0 <__assert_fail@plt+0xbc0>
   120e0:	cmp	r7, #0
   120e4:	beq	123e0 <__assert_fail@plt+0x10b0>
   120e8:	cmp	r4, #0
   120ec:	bne	12628 <__assert_fail@plt+0x12f8>
   120f0:	ldr	r0, [r5, #24]
   120f4:	bl	11dc0 <__assert_fail@plt+0xa90>
   120f8:	mov	r7, r0
   120fc:	ldr	r0, [r5, #28]
   12100:	bl	11d80 <__assert_fail@plt+0xa50>
   12104:	mov	r2, #5
   12108:	ldr	r1, [pc, #2360]	; 12a48 <__assert_fail@plt+0x1718>
   1210c:	mov	r5, r0
   12110:	mov	r0, r4
   12114:	bl	110c0 <dcgettext@plt>
   12118:	ldr	r1, [sp, #16]
   1211c:	mov	r4, r0
   12120:	mov	r0, #4
   12124:	bl	17b0c <__assert_fail@plt+0x67dc>
   12128:	mov	r1, r4
   1212c:	mov	r2, r0
   12130:	mov	r0, #1
   12134:	bl	11210 <__printf_chk@plt>
   12138:	mov	r0, r7
   1213c:	bl	12ba4 <__assert_fail@plt+0x1874>
   12140:	mov	r0, r5
   12144:	bl	12ba4 <__assert_fail@plt+0x1874>
   12148:	b	11ef0 <__assert_fail@plt+0xbc0>
   1214c:	ldrb	r3, [r6, #4]
   12150:	cmp	r3, #0
   12154:	beq	12030 <__assert_fail@plt+0xd00>
   12158:	ldr	ip, [r6, #8]
   1215c:	cmp	ip, #0
   12160:	beq	11e64 <__assert_fail@plt+0xb34>
   12164:	ldrd	r0, [sl, #160]	; 0xa0
   12168:	ldrd	r2, [ip]
   1216c:	cmp	r1, r3
   12170:	cmpeq	r0, r2
   12174:	bne	11e64 <__assert_fail@plt+0xb34>
   12178:	ldrd	r2, [sl, #64]	; 0x40
   1217c:	ldrd	r0, [ip, #8]
   12180:	cmp	r3, r1
   12184:	cmpeq	r2, r0
   12188:	bne	11e64 <__assert_fail@plt+0xb34>
   1218c:	ldr	r7, [sp, #16]
   12190:	ldr	r1, [pc, #2228]	; 12a4c <__assert_fail@plt+0x171c>
   12194:	mov	r0, r7
   12198:	bl	11024 <strcmp@plt>
   1219c:	mov	r2, #5
   121a0:	subs	r4, r0, #0
   121a4:	bne	128ec <__assert_fail@plt+0x15bc>
   121a8:	ldr	r1, [pc, #2208]	; 12a50 <__assert_fail@plt+0x1720>
   121ac:	bl	110c0 <dcgettext@plt>
   121b0:	mov	r1, r7
   121b4:	mov	r5, r0
   121b8:	mov	r0, #4
   121bc:	bl	17b0c <__assert_fail@plt+0x67dc>
   121c0:	mov	r2, r5
   121c4:	mov	r1, r4
   121c8:	mov	r3, r0
   121cc:	mov	r0, r4
   121d0:	bl	11150 <error@plt>
   121d4:	mov	r2, #5
   121d8:	ldr	r1, [pc, #2164]	; 12a54 <__assert_fail@plt+0x1724>
   121dc:	mov	r0, #0
   121e0:	bl	110c0 <dcgettext@plt>
   121e4:	mov	r1, #0
   121e8:	mov	r2, r0
   121ec:	mov	r0, r1
   121f0:	bl	11150 <error@plt>
   121f4:	mov	r1, sl
   121f8:	mov	r2, #4
   121fc:	mov	r0, r8
   12200:	bl	14b88 <__assert_fail@plt+0x3858>
   12204:	mov	r0, r8
   12208:	bl	144d0 <__assert_fail@plt+0x31a0>
   1220c:	mov	r3, #0
   12210:	str	r3, [sp, #12]
   12214:	b	11e64 <__assert_fail@plt+0xb34>
   12218:	ldr	r3, [r5]
   1221c:	cmp	r3, #2
   12220:	moveq	ip, #8
   12224:	movne	ip, #0
   12228:	b	11e40 <__assert_fail@plt+0xb10>
   1222c:	ldr	r3, [sp, #292]	; 0x124
   12230:	cmn	r3, #1
   12234:	beq	126c8 <__assert_fail@plt+0x1398>
   12238:	ldr	ip, [r5, #28]
   1223c:	uxth	fp, fp
   12240:	bic	r4, r4, #2
   12244:	cmp	r4, #4
   12248:	cmpne	fp, #1
   1224c:	sub	ip, ip, r3
   12250:	clz	ip, ip
   12254:	lsr	ip, ip, #5
   12258:	bls	12318 <__assert_fail@plt+0xfe8>
   1225c:	cmp	ip, #0
   12260:	beq	120b4 <__assert_fail@plt+0xd84>
   12264:	ldrb	r3, [r6, #12]
   12268:	subs	r4, r3, #0
   1226c:	bne	124a4 <__assert_fail@plt+0x1174>
   12270:	mov	r3, #256	; 0x100
   12274:	str	r3, [sp]
   12278:	ldr	r0, [r8, #32]
   1227c:	mov	r1, r9
   12280:	ldr	r3, [sp, #36]	; 0x24
   12284:	ldr	r2, [sp, #20]
   12288:	bl	112b8 <fchownat@plt>
   1228c:	cmp	r0, #0
   12290:	moveq	r0, #1
   12294:	movne	r0, #0
   12298:	beq	122ac <__assert_fail@plt+0xf7c>
   1229c:	ldr	r3, [sp, #32]
   122a0:	ldr	r3, [r3]
   122a4:	cmp	r3, #95	; 0x5f
   122a8:	beq	1268c <__assert_fail@plt+0x135c>
   122ac:	cmp	r0, #0
   122b0:	bne	124dc <__assert_fail@plt+0x11ac>
   122b4:	ldrb	r4, [r6, #13]
   122b8:	cmp	r4, #0
   122bc:	bne	12540 <__assert_fail@plt+0x1210>
   122c0:	ldr	r3, [sp, #20]
   122c4:	mov	r2, #5
   122c8:	cmn	r3, #1
   122cc:	ldr	r3, [sp, #32]
   122d0:	ldrne	r1, [pc, #1920]	; 12a58 <__assert_fail@plt+0x1728>
   122d4:	ldreq	r1, [pc, #1920]	; 12a5c <__assert_fail@plt+0x172c>
   122d8:	mov	r0, r4
   122dc:	ldr	r7, [r3]
   122e0:	bl	110c0 <dcgettext@plt>
   122e4:	ldr	r1, [sp, #16]
   122e8:	mov	r9, r0
   122ec:	mov	r0, #4
   122f0:	bl	17b0c <__assert_fail@plt+0x67dc>
   122f4:	mov	r1, r7
   122f8:	mov	r2, r9
   122fc:	mov	r7, r4
   12300:	mov	r3, r0
   12304:	mov	r0, #0
   12308:	bl	11150 <error@plt>
   1230c:	str	r4, [sp, #12]
   12310:	mov	r4, #1
   12314:	b	120cc <__assert_fail@plt+0xd9c>
   12318:	ldr	lr, [r6, #8]
   1231c:	cmp	lr, #0
   12320:	beq	1225c <__assert_fail@plt+0xf2c>
   12324:	ldrd	r0, [r5, #96]	; 0x60
   12328:	ldrd	r2, [lr]
   1232c:	cmp	r1, r3
   12330:	cmpeq	r0, r2
   12334:	bne	1225c <__assert_fail@plt+0xf2c>
   12338:	ldrd	r0, [r5]
   1233c:	ldrd	r2, [lr, #8]
   12340:	cmp	r1, r3
   12344:	cmpeq	r0, r2
   12348:	bne	1225c <__assert_fail@plt+0xf2c>
   1234c:	ldr	r7, [sp, #16]
   12350:	ldr	r1, [pc, #1780]	; 12a4c <__assert_fail@plt+0x171c>
   12354:	mov	r0, r7
   12358:	bl	11024 <strcmp@plt>
   1235c:	mov	r2, #5
   12360:	subs	r4, r0, #0
   12364:	beq	1284c <__assert_fail@plt+0x151c>
   12368:	ldr	r1, [pc, #1776]	; 12a60 <__assert_fail@plt+0x1730>
   1236c:	mov	r0, #0
   12370:	bl	110c0 <dcgettext@plt>
   12374:	ldr	r2, [sp, #16]
   12378:	mov	r1, #4
   1237c:	mov	r4, r0
   12380:	mov	r0, #0
   12384:	bl	17aa0 <__assert_fail@plt+0x6770>
   12388:	ldr	r2, [pc, #1724]	; 12a4c <__assert_fail@plt+0x171c>
   1238c:	mov	r1, #4
   12390:	mov	r5, r0
   12394:	mov	r0, #1
   12398:	bl	17aa0 <__assert_fail@plt+0x6770>
   1239c:	mov	r1, #0
   123a0:	mov	r3, r5
   123a4:	mov	r2, r4
   123a8:	str	r0, [sp]
   123ac:	mov	r0, r1
   123b0:	bl	11150 <error@plt>
   123b4:	mov	r2, #5
   123b8:	ldr	r1, [pc, #1684]	; 12a54 <__assert_fail@plt+0x1724>
   123bc:	mov	r0, #0
   123c0:	bl	110c0 <dcgettext@plt>
   123c4:	mov	r1, #0
   123c8:	mov	r2, r0
   123cc:	mov	r0, r1
   123d0:	bl	11150 <error@plt>
   123d4:	mov	r3, #0
   123d8:	str	r3, [sp, #12]
   123dc:	b	11e64 <__assert_fail@plt+0xb34>
   123e0:	ldr	r0, [r5, #24]
   123e4:	bl	11dc0 <__assert_fail@plt+0xa90>
   123e8:	mov	r7, r0
   123ec:	ldr	r0, [r5, #28]
   123f0:	bl	11d80 <__assert_fail@plt+0xa50>
   123f4:	mov	r2, #3
   123f8:	mov	r5, r0
   123fc:	ldr	fp, [r6, #16]
   12400:	ldr	r4, [r6, #20]
   12404:	mov	r1, r4
   12408:	mov	r0, fp
   1240c:	str	r2, [sp, #24]
   12410:	bl	11cc0 <__assert_fail@plt+0x990>
   12414:	cmp	r4, #0
   12418:	movne	r1, r5
   1241c:	moveq	r1, #0
   12420:	cmp	fp, #0
   12424:	str	r0, [sp, #28]
   12428:	movne	r0, r7
   1242c:	moveq	r0, #0
   12430:	bl	11cc0 <__assert_fail@plt+0x990>
   12434:	ldr	r2, [sp, #24]
   12438:	cmp	r2, #3
   1243c:	mov	r9, r0
   12440:	beq	12550 <__assert_fail@plt+0x1220>
   12444:	cmp	r2, #4
   12448:	bne	12520 <__assert_fail@plt+0x11f0>
   1244c:	cmp	fp, #0
   12450:	beq	126f4 <__assert_fail@plt+0x13c4>
   12454:	mov	r2, #5
   12458:	ldr	r1, [pc, #1540]	; 12a64 <__assert_fail@plt+0x1734>
   1245c:	mov	r0, #0
   12460:	bl	110c0 <dcgettext@plt>
   12464:	mov	r4, r0
   12468:	ldr	r1, [sp, #16]
   1246c:	mov	r0, #4
   12470:	bl	17b0c <__assert_fail@plt+0x67dc>
   12474:	ldr	fp, [sp, #28]
   12478:	mov	r1, r4
   1247c:	mov	r3, r9
   12480:	str	fp, [sp]
   12484:	mov	r2, r0
   12488:	mov	r0, #1
   1248c:	bl	11210 <__printf_chk@plt>
   12490:	mov	r0, r9
   12494:	bl	12ba4 <__assert_fail@plt+0x1874>
   12498:	mov	r0, fp
   1249c:	bl	12ba4 <__assert_fail@plt+0x1874>
   124a0:	b	12138 <__assert_fail@plt+0xe08>
   124a4:	cmp	r7, #0
   124a8:	ldr	fp, [r8, #32]
   124ac:	beq	12578 <__assert_fail@plt+0x1248>
   124b0:	mov	r3, #0
   124b4:	str	r3, [sp]
   124b8:	mov	r1, r9
   124bc:	mov	r0, fp
   124c0:	ldr	r3, [sp, #36]	; 0x24
   124c4:	ldr	r2, [sp, #20]
   124c8:	bl	112b8 <fchownat@plt>
   124cc:	clz	r0, r0
   124d0:	lsr	r0, r0, #5
   124d4:	cmp	r0, #0
   124d8:	beq	122b4 <__assert_fail@plt+0xf84>
   124dc:	ldr	r3, [r6]
   124e0:	cmp	r3, #2
   124e4:	beq	11ef0 <__assert_fail@plt+0xbc0>
   124e8:	ldr	r2, [sp, #20]
   124ec:	cmn	r2, #1
   124f0:	beq	1259c <__assert_fail@plt+0x126c>
   124f4:	ldr	r0, [r5, #24]
   124f8:	ldr	r2, [sp, #20]
   124fc:	cmp	r2, r0
   12500:	beq	1259c <__assert_fail@plt+0x126c>
   12504:	bl	11dc0 <__assert_fail@plt+0xa90>
   12508:	mov	r7, r0
   1250c:	ldr	r0, [r5, #28]
   12510:	bl	11d80 <__assert_fail@plt+0xa50>
   12514:	mov	r2, #2
   12518:	mov	r5, r0
   1251c:	b	123fc <__assert_fail@plt+0x10cc>
   12520:	cmp	fp, #0
   12524:	beq	1271c <__assert_fail@plt+0x13ec>
   12528:	mov	r2, #5
   1252c:	ldr	r1, [pc, #1332]	; 12a68 <__assert_fail@plt+0x1738>
   12530:	mov	r0, #0
   12534:	bl	110c0 <dcgettext@plt>
   12538:	mov	r4, r0
   1253c:	b	12468 <__assert_fail@plt+0x1138>
   12540:	mov	r3, #0
   12544:	str	r3, [sp, #12]
   12548:	mov	r7, r3
   1254c:	b	120cc <__assert_fail@plt+0xd9c>
   12550:	cmp	r0, #0
   12554:	beq	1281c <__assert_fail@plt+0x14ec>
   12558:	cmp	fp, #0
   1255c:	beq	12744 <__assert_fail@plt+0x1414>
   12560:	mov	r2, #5
   12564:	ldr	r1, [pc, #1280]	; 12a6c <__assert_fail@plt+0x173c>
   12568:	mov	r0, #0
   1256c:	bl	110c0 <dcgettext@plt>
   12570:	mov	r4, r0
   12574:	b	12468 <__assert_fail@plt+0x1138>
   12578:	ldr	r3, [r5, #16]
   1257c:	and	r3, r3, #61440	; 0xf000
   12580:	cmp	r3, #32768	; 0x8000
   12584:	beq	1276c <__assert_fail@plt+0x143c>
   12588:	cmp	r3, #16384	; 0x4000
   1258c:	bne	124b0 <__assert_fail@plt+0x1180>
   12590:	mov	r3, #18688	; 0x4900
   12594:	str	r3, [sp, #24]
   12598:	b	12774 <__assert_fail@plt+0x1444>
   1259c:	ldr	r1, [sp, #36]	; 0x24
   125a0:	cmn	r1, #1
   125a4:	beq	12620 <__assert_fail@plt+0x12f0>
   125a8:	ldr	r2, [r5, #28]
   125ac:	cmp	r1, r2
   125b0:	beq	12620 <__assert_fail@plt+0x12f0>
   125b4:	ldr	r0, [r5, #24]
   125b8:	b	12504 <__assert_fail@plt+0x11d4>
   125bc:	ldr	r3, [r6, #8]
   125c0:	cmp	r3, #0
   125c4:	bne	1205c <__assert_fail@plt+0xd2c>
   125c8:	ldrb	r3, [r6, #12]
   125cc:	add	r5, sl, #64	; 0x40
   125d0:	cmp	r3, #0
   125d4:	bne	1206c <__assert_fail@plt+0xd3c>
   125d8:	b	12268 <__assert_fail@plt+0xf38>
   125dc:	mov	r2, #5
   125e0:	ldr	r1, [pc, #1160]	; 12a70 <__assert_fail@plt+0x1740>
   125e4:	b	11fe8 <__assert_fail@plt+0xcb8>
   125e8:	mov	r2, #1
   125ec:	str	r2, [sl, #16]
   125f0:	mov	r1, sl
   125f4:	mov	r0, r8
   125f8:	bl	14b88 <__assert_fail@plt+0x3858>
   125fc:	b	11e64 <__assert_fail@plt+0xb34>
   12600:	mov	r2, #5
   12604:	ldr	r1, [pc, #1128]	; 12a74 <__assert_fail@plt+0x1744>
   12608:	bl	110c0 <dcgettext@plt>
   1260c:	mov	r1, r4
   12610:	mov	r2, r0
   12614:	ldr	r0, [sp, #12]
   12618:	bl	11150 <error@plt>
   1261c:	b	11f40 <__assert_fail@plt+0xc10>
   12620:	cmp	r3, #0
   12624:	bne	11ef0 <__assert_fail@plt+0xbc0>
   12628:	ldr	r0, [r5, #24]
   1262c:	bl	11dc0 <__assert_fail@plt+0xa90>
   12630:	mov	r7, r0
   12634:	ldr	r0, [r5, #28]
   12638:	bl	11d80 <__assert_fail@plt+0xa50>
   1263c:	mov	r2, #4
   12640:	mov	r5, r0
   12644:	b	123fc <__assert_fail@plt+0x10cc>
   12648:	mov	r2, #5
   1264c:	ldr	r1, [pc, #1060]	; 12a78 <__assert_fail@plt+0x1748>
   12650:	mov	r0, #0
   12654:	bl	110c0 <dcgettext@plt>
   12658:	ldr	r2, [sp, #16]
   1265c:	mov	r1, #3
   12660:	mov	r4, r0
   12664:	mov	r0, #0
   12668:	bl	17bc8 <__assert_fail@plt+0x6898>
   1266c:	mov	r1, #0
   12670:	mov	r2, r4
   12674:	mov	r3, r0
   12678:	mov	r0, r1
   1267c:	bl	11150 <error@plt>
   12680:	mov	r3, #0
   12684:	str	r3, [sp, #12]
   12688:	b	11e64 <__assert_fail@plt+0xb34>
   1268c:	mov	r7, #1
   12690:	b	120cc <__assert_fail@plt+0xd9c>
   12694:	mov	r2, #0
   12698:	str	r2, [sp]
   1269c:	ldr	r1, [r8, #32]
   126a0:	add	r3, sp, #40	; 0x28
   126a4:	mov	r2, r9
   126a8:	mov	r0, #3
   126ac:	bl	110e4 <__fxstatat64@plt>
   126b0:	cmp	r0, #0
   126b4:	bne	127dc <__assert_fail@plt+0x14ac>
   126b8:	ldrh	r4, [sl, #56]	; 0x38
   126bc:	add	r5, sp, #40	; 0x28
   126c0:	sub	fp, r4, #1
   126c4:	b	1207c <__assert_fail@plt+0xd4c>
   126c8:	uxth	ip, fp
   126cc:	bic	r4, r4, #2
   126d0:	cmp	r4, #4
   126d4:	cmpne	ip, #1
   126d8:	movls	ip, #1
   126dc:	movhi	ip, #0
   126e0:	bhi	12264 <__assert_fail@plt+0xf34>
   126e4:	ldr	lr, [r6, #8]
   126e8:	cmp	lr, #0
   126ec:	bne	12324 <__assert_fail@plt+0xff4>
   126f0:	b	12264 <__assert_fail@plt+0xf34>
   126f4:	cmp	r4, #0
   126f8:	moveq	r0, r4
   126fc:	movne	r0, fp
   12700:	movne	r2, #5
   12704:	ldrne	r1, [pc, #880]	; 12a7c <__assert_fail@plt+0x174c>
   12708:	moveq	r2, #5
   1270c:	ldreq	r1, [pc, #876]	; 12a80 <__assert_fail@plt+0x1750>
   12710:	bl	110c0 <dcgettext@plt>
   12714:	mov	r4, r0
   12718:	b	12468 <__assert_fail@plt+0x1138>
   1271c:	cmp	r4, #0
   12720:	moveq	r0, r4
   12724:	movne	r0, fp
   12728:	movne	r2, #5
   1272c:	ldrne	r1, [pc, #848]	; 12a84 <__assert_fail@plt+0x1754>
   12730:	moveq	r2, #5
   12734:	ldreq	r1, [pc, #844]	; 12a88 <__assert_fail@plt+0x1758>
   12738:	bl	110c0 <dcgettext@plt>
   1273c:	mov	r4, r0
   12740:	b	12468 <__assert_fail@plt+0x1138>
   12744:	cmp	r4, #0
   12748:	moveq	r0, r4
   1274c:	movne	r0, fp
   12750:	movne	r2, #5
   12754:	ldrne	r1, [pc, #816]	; 12a8c <__assert_fail@plt+0x175c>
   12758:	moveq	r2, #5
   1275c:	ldreq	r1, [pc, #812]	; 12a90 <__assert_fail@plt+0x1760>
   12760:	bl	110c0 <dcgettext@plt>
   12764:	mov	r4, r0
   12768:	b	12468 <__assert_fail@plt+0x1138>
   1276c:	mov	r3, #2304	; 0x900
   12770:	str	r3, [sp, #24]
   12774:	ldr	r2, [sp, #24]
   12778:	mov	r1, r9
   1277c:	mov	r0, fp
   12780:	bl	11060 <__openat64_2@plt>
   12784:	subs	ip, r0, #0
   12788:	blt	127f4 <__assert_fail@plt+0x14c4>
   1278c:	mov	r1, ip
   12790:	add	r2, sp, #144	; 0x90
   12794:	mov	r0, #3
   12798:	str	ip, [sp, #24]
   1279c:	bl	110fc <__fxstat64@plt>
   127a0:	ldr	ip, [sp, #24]
   127a4:	cmp	r0, #0
   127a8:	bne	1287c <__assert_fail@plt+0x154c>
   127ac:	ldrd	r0, [r5, #96]	; 0x60
   127b0:	ldrd	r2, [sp, #240]	; 0xf0
   127b4:	cmp	r1, r3
   127b8:	cmpeq	r0, r2
   127bc:	beq	1293c <__assert_fail@plt+0x160c>
   127c0:	ldr	fp, [sp, #32]
   127c4:	mov	r0, ip
   127c8:	ldr	r9, [fp]
   127cc:	bl	112f4 <close@plt>
   127d0:	str	r7, [sp, #12]
   127d4:	str	r9, [fp]
   127d8:	b	120cc <__assert_fail@plt+0xd9c>
   127dc:	ldrb	r4, [r6, #13]
   127e0:	cmp	r4, #0
   127e4:	beq	12894 <__assert_fail@plt+0x1564>
   127e8:	add	r5, sp, #40	; 0x28
   127ec:	mov	r7, #0
   127f0:	b	120b8 <__assert_fail@plt+0xd88>
   127f4:	ldr	r3, [sp, #32]
   127f8:	ldr	r2, [r3]
   127fc:	cmp	r2, #13
   12800:	bne	122b4 <__assert_fail@plt+0xf84>
   12804:	ldr	r2, [r5, #16]
   12808:	and	r2, r2, #61440	; 0xf000
   1280c:	cmp	r2, #32768	; 0x8000
   12810:	beq	12980 <__assert_fail@plt+0x1650>
   12814:	ldr	fp, [r8, #32]
   12818:	b	124b0 <__assert_fail@plt+0x1180>
   1281c:	cmp	fp, #0
   12820:	mov	r2, #5
   12824:	beq	128d4 <__assert_fail@plt+0x15a4>
   12828:	ldr	r1, [pc, #612]	; 12a94 <__assert_fail@plt+0x1764>
   1282c:	bl	110c0 <dcgettext@plt>
   12830:	mov	r4, r0
   12834:	mov	r0, #0
   12838:	bl	12ba4 <__assert_fail@plt+0x1874>
   1283c:	mov	r3, r9
   12840:	ldr	r9, [sp, #28]
   12844:	str	r3, [sp, #28]
   12848:	b	12468 <__assert_fail@plt+0x1138>
   1284c:	ldr	r1, [pc, #508]	; 12a50 <__assert_fail@plt+0x1720>
   12850:	bl	110c0 <dcgettext@plt>
   12854:	mov	r1, r7
   12858:	mov	r5, r0
   1285c:	mov	r0, #4
   12860:	bl	17b0c <__assert_fail@plt+0x67dc>
   12864:	mov	r2, r5
   12868:	mov	r1, r4
   1286c:	mov	r3, r0
   12870:	mov	r0, r4
   12874:	bl	11150 <error@plt>
   12878:	b	123b4 <__assert_fail@plt+0x1084>
   1287c:	ldr	r7, [sp, #32]
   12880:	mov	r0, ip
   12884:	ldr	r4, [r7]
   12888:	bl	112f4 <close@plt>
   1288c:	str	r4, [r7]
   12890:	b	122b4 <__assert_fail@plt+0xf84>
   12894:	ldr	r3, [sp, #32]
   12898:	mov	r2, #5
   1289c:	ldr	r1, [pc, #500]	; 12a98 <__assert_fail@plt+0x1768>
   128a0:	mov	r0, r4
   128a4:	ldr	r5, [r3]
   128a8:	bl	110c0 <dcgettext@plt>
   128ac:	ldr	r1, [sp, #16]
   128b0:	mov	r7, r0
   128b4:	mov	r0, #4
   128b8:	bl	17b0c <__assert_fail@plt+0x67dc>
   128bc:	mov	r2, r7
   128c0:	mov	r1, r5
   128c4:	mov	r3, r0
   128c8:	mov	r0, r4
   128cc:	bl	11150 <error@plt>
   128d0:	b	127e8 <__assert_fail@plt+0x14b8>
   128d4:	cmp	r4, #0
   128d8:	ldrne	r1, [pc, #444]	; 12a9c <__assert_fail@plt+0x176c>
   128dc:	ldreq	r1, [pc, #428]	; 12a90 <__assert_fail@plt+0x1760>
   128e0:	bl	110c0 <dcgettext@plt>
   128e4:	mov	r4, r0
   128e8:	b	12834 <__assert_fail@plt+0x1504>
   128ec:	ldr	r1, [pc, #364]	; 12a60 <__assert_fail@plt+0x1730>
   128f0:	mov	r0, #0
   128f4:	bl	110c0 <dcgettext@plt>
   128f8:	ldr	r2, [sp, #16]
   128fc:	mov	r1, #4
   12900:	mov	r4, r0
   12904:	mov	r0, #0
   12908:	bl	17aa0 <__assert_fail@plt+0x6770>
   1290c:	ldr	r2, [pc, #312]	; 12a4c <__assert_fail@plt+0x171c>
   12910:	mov	r1, #4
   12914:	mov	r5, r0
   12918:	mov	r0, #1
   1291c:	bl	17aa0 <__assert_fail@plt+0x6770>
   12920:	mov	r1, #0
   12924:	mov	r3, r5
   12928:	mov	r2, r4
   1292c:	str	r0, [sp]
   12930:	mov	r0, r1
   12934:	bl	11150 <error@plt>
   12938:	b	121d4 <__assert_fail@plt+0xea4>
   1293c:	ldrd	r0, [r5]
   12940:	ldrd	r2, [sp, #144]	; 0x90
   12944:	cmp	r1, r3
   12948:	cmpeq	r0, r2
   1294c:	bne	127c0 <__assert_fail@plt+0x1490>
   12950:	ldr	r3, [sp, #288]	; 0x120
   12954:	cmn	r3, #1
   12958:	beq	129bc <__assert_fail@plt+0x168c>
   1295c:	ldr	r2, [sp, #168]	; 0xa8
   12960:	cmp	r3, r2
   12964:	beq	129b0 <__assert_fail@plt+0x1680>
   12968:	ldr	r7, [sp, #32]
   1296c:	mov	r0, ip
   12970:	ldr	r4, [r7]
   12974:	bl	112f4 <close@plt>
   12978:	str	r4, [r7]
   1297c:	b	124dc <__assert_fail@plt+0x11ac>
   12980:	ldr	r3, [sp, #24]
   12984:	mov	r0, fp
   12988:	orr	r2, r3, #1
   1298c:	mov	r1, r9
   12990:	bl	11060 <__openat64_2@plt>
   12994:	subs	ip, r0, #0
   12998:	bge	1278c <__assert_fail@plt+0x145c>
   1299c:	ldr	r3, [sp, #32]
   129a0:	ldr	r3, [r3]
   129a4:	cmp	r3, #13
   129a8:	bne	122b4 <__assert_fail@plt+0xf84>
   129ac:	b	12814 <__assert_fail@plt+0x14e4>
   129b0:	ldr	r3, [sp, #292]	; 0x124
   129b4:	cmn	r3, #1
   129b8:	beq	129cc <__assert_fail@plt+0x169c>
   129bc:	ldr	r2, [sp, #172]	; 0xac
   129c0:	ldr	r3, [sp, #292]	; 0x124
   129c4:	cmp	r3, r2
   129c8:	bne	12968 <__assert_fail@plt+0x1638>
   129cc:	mov	r0, ip
   129d0:	ldr	r2, [sp, #36]	; 0x24
   129d4:	ldr	r1, [sp, #20]
   129d8:	str	ip, [sp, #24]
   129dc:	bl	111e0 <fchown@plt>
   129e0:	ldr	ip, [sp, #24]
   129e4:	cmp	r0, #0
   129e8:	bne	1287c <__assert_fail@plt+0x154c>
   129ec:	mov	r0, ip
   129f0:	bl	112f4 <close@plt>
   129f4:	cmp	r0, #0
   129f8:	bne	122b4 <__assert_fail@plt+0xf84>
   129fc:	b	124dc <__assert_fail@plt+0x11ac>
   12a00:	cmp	r3, #0
   12a04:	bne	11ee8 <__assert_fail@plt+0xbb8>
   12a08:	mov	r5, r3
   12a0c:	str	r3, [sp, #12]
   12a10:	mov	r7, r3
   12a14:	ldr	fp, [r6, #16]
   12a18:	ldr	r4, [r6, #20]
   12a1c:	mov	r2, #3
   12a20:	b	12404 <__assert_fail@plt+0x10d4>
   12a24:	ldr	lr, [r6, #8]
   12a28:	cmp	lr, #0
   12a2c:	moveq	r7, r4
   12a30:	beq	120b8 <__assert_fail@plt+0xd88>
   12a34:	mov	ip, #0
   12a38:	b	12324 <__assert_fail@plt+0xff4>
   12a3c:	andeq	sl, r1, r0, ror #23
   12a40:	andeq	sl, r1, r4, lsl ip
   12a44:	strdeq	sl, [r1], -r4
   12a48:	andeq	sl, r1, r8, lsl sl
   12a4c:	andeq	sl, r1, r8, lsr r7
   12a50:	andeq	sl, r1, r0, asr #16
   12a54:	andeq	sl, r1, ip, lsr #17
   12a58:	andeq	sl, r1, r4, ror #19
   12a5c:	andeq	sl, r1, r0, lsl #20
   12a60:	andeq	sl, r1, r0, ror r8
   12a64:	andeq	sl, r1, r8, lsl #23
   12a68:	andeq	sl, r1, r0, asr sl
   12a6c:			; <UNDEFINED> instruction: 0x0001aabc
   12a70:	andeq	sl, r1, r0, ror #17
   12a74:	andeq	sl, r1, r0, lsr r8
   12a78:	andeq	sl, r1, r0, lsl r9
   12a7c:	andeq	sl, r1, r8, lsr #23
   12a80:	andeq	sl, r1, r4, asr #23
   12a84:	andeq	sl, r1, r8, ror sl
   12a88:	muleq	r1, ip, sl
   12a8c:	andeq	sl, r1, ip, ror #21
   12a90:	andeq	sl, r1, r8, lsl fp
   12a94:	andeq	sl, r1, ip, lsr fp
   12a98:	andeq	sl, r1, ip, asr #19
   12a9c:	andeq	sl, r1, r4, ror #22
   12aa0:	ldr	r3, [pc, #4]	; 12aac <__assert_fail@plt+0x177c>
   12aa4:	str	r0, [r3]
   12aa8:	bx	lr
   12aac:			; <UNDEFINED> instruction: 0x0002c1b8
   12ab0:	ldr	r3, [pc, #4]	; 12abc <__assert_fail@plt+0x178c>
   12ab4:	strb	r0, [r3, #4]
   12ab8:	bx	lr
   12abc:			; <UNDEFINED> instruction: 0x0002c1b8
   12ac0:	ldr	r3, [pc, #192]	; 12b88 <__assert_fail@plt+0x1858>
   12ac4:	push	{r4, r5, r6, lr}
   12ac8:	sub	sp, sp, #8
   12acc:	ldr	r0, [r3]
   12ad0:	bl	19028 <__assert_fail@plt+0x7cf8>
   12ad4:	cmp	r0, #0
   12ad8:	beq	12afc <__assert_fail@plt+0x17cc>
   12adc:	ldr	r4, [pc, #168]	; 12b8c <__assert_fail@plt+0x185c>
   12ae0:	ldrb	r3, [r4, #4]
   12ae4:	cmp	r3, #0
   12ae8:	beq	12b18 <__assert_fail@plt+0x17e8>
   12aec:	bl	111ec <__errno_location@plt>
   12af0:	ldr	r3, [r0]
   12af4:	cmp	r3, #32
   12af8:	bne	12b18 <__assert_fail@plt+0x17e8>
   12afc:	ldr	r3, [pc, #140]	; 12b90 <__assert_fail@plt+0x1860>
   12b00:	ldr	r0, [r3]
   12b04:	bl	19028 <__assert_fail@plt+0x7cf8>
   12b08:	cmp	r0, #0
   12b0c:	bne	12b60 <__assert_fail@plt+0x1830>
   12b10:	add	sp, sp, #8
   12b14:	pop	{r4, r5, r6, pc}
   12b18:	mov	r2, #5
   12b1c:	ldr	r1, [pc, #112]	; 12b94 <__assert_fail@plt+0x1864>
   12b20:	mov	r0, #0
   12b24:	bl	110c0 <dcgettext@plt>
   12b28:	ldr	r4, [r4]
   12b2c:	cmp	r4, #0
   12b30:	mov	r5, r0
   12b34:	beq	12b6c <__assert_fail@plt+0x183c>
   12b38:	bl	111ec <__errno_location@plt>
   12b3c:	ldr	r6, [r0]
   12b40:	mov	r0, r4
   12b44:	bl	17bb4 <__assert_fail@plt+0x6884>
   12b48:	mov	r1, r6
   12b4c:	str	r5, [sp]
   12b50:	ldr	r2, [pc, #64]	; 12b98 <__assert_fail@plt+0x1868>
   12b54:	mov	r3, r0
   12b58:	mov	r0, #0
   12b5c:	bl	11150 <error@plt>
   12b60:	ldr	r3, [pc, #52]	; 12b9c <__assert_fail@plt+0x186c>
   12b64:	ldr	r0, [r3]
   12b68:	bl	1106c <_exit@plt>
   12b6c:	bl	111ec <__errno_location@plt>
   12b70:	mov	r3, r5
   12b74:	ldr	r2, [pc, #36]	; 12ba0 <__assert_fail@plt+0x1870>
   12b78:	ldr	r1, [r0]
   12b7c:	mov	r0, r4
   12b80:	bl	11150 <error@plt>
   12b84:	b	12b60 <__assert_fail@plt+0x1830>
   12b88:	muleq	r2, r4, r1
   12b8c:			; <UNDEFINED> instruction: 0x0002c1b8
   12b90:	muleq	r2, r0, r1
   12b94:	andeq	sl, r1, r4, lsl #24
   12b98:	andeq	sl, r1, r0, lsl ip
   12b9c:	andeq	ip, r2, r8, lsr r1
   12ba0:	andeq	sl, r1, r4, lsl ip
   12ba4:	push	{r4, r5, lr}
   12ba8:	sub	sp, sp, #12
   12bac:	mov	r5, r0
   12bb0:	bl	111ec <__errno_location@plt>
   12bb4:	mov	r2, #0
   12bb8:	mov	r4, r0
   12bbc:	ldr	r3, [r0]
   12bc0:	str	r2, [r4]
   12bc4:	mov	r0, r5
   12bc8:	str	r3, [sp]
   12bcc:	str	r3, [sp, #4]
   12bd0:	bl	11054 <free@plt>
   12bd4:	ldr	r3, [r4]
   12bd8:	add	r2, sp, #8
   12bdc:	cmp	r3, #0
   12be0:	moveq	r3, #4
   12be4:	movne	r3, #0
   12be8:	add	r3, r2, r3
   12bec:	ldr	r3, [r3, #-8]
   12bf0:	str	r3, [r4]
   12bf4:	add	sp, sp, #12
   12bf8:	pop	{r4, r5, pc}
   12bfc:	ldrd	r2, [r1, #8]
   12c00:	push	{r4, r5}
   12c04:	ldrd	r4, [r0, #8]
   12c08:	cmp	r5, r3
   12c0c:	cmpeq	r4, r2
   12c10:	movne	r0, #0
   12c14:	beq	12c20 <__assert_fail@plt+0x18f0>
   12c18:	pop	{r4, r5}
   12c1c:	bx	lr
   12c20:	ldrd	r4, [r0]
   12c24:	ldrd	r2, [r1]
   12c28:	cmp	r5, r3
   12c2c:	cmpeq	r4, r2
   12c30:	moveq	r0, #1
   12c34:	movne	r0, #0
   12c38:	pop	{r4, r5}
   12c3c:	bx	lr
   12c40:	push	{r4, lr}
   12c44:	mov	r2, r1
   12c48:	mov	r3, #0
   12c4c:	ldrd	r0, [r0, #8]
   12c50:	bl	19b60 <__assert_fail@plt+0x8830>
   12c54:	mov	r0, r2
   12c58:	pop	{r4, pc}
   12c5c:	push	{r4, lr}
   12c60:	mov	r2, r1
   12c64:	mov	r3, #0
   12c68:	ldrd	r0, [r0]
   12c6c:	bl	19b60 <__assert_fail@plt+0x8830>
   12c70:	mov	r0, r2
   12c74:	pop	{r4, pc}
   12c78:	push	{r4, r5}
   12c7c:	ldrd	r2, [r1]
   12c80:	ldrd	r4, [r0]
   12c84:	cmp	r5, r3
   12c88:	cmpeq	r4, r2
   12c8c:	moveq	r0, #1
   12c90:	movne	r0, #0
   12c94:	pop	{r4, r5}
   12c98:	bx	lr
   12c9c:	ldr	r2, [r0]
   12ca0:	ldr	r3, [r1]
   12ca4:	ldrd	r0, [r2, #160]	; 0xa0
   12ca8:	ldrd	r2, [r3, #160]	; 0xa0
   12cac:	cmp	r1, r3
   12cb0:	cmpeq	r0, r2
   12cb4:	movhi	r0, #1
   12cb8:	movls	r0, #0
   12cbc:	movcc	r3, #1
   12cc0:	movcs	r3, #0
   12cc4:	sub	r0, r0, r3
   12cc8:	bx	lr
   12ccc:	ldr	r3, [r0, #40]	; 0x28
   12cd0:	push	{r4, r5, r6, r7, r8, lr}
   12cd4:	cmp	r3, r2
   12cd8:	mov	r6, r0
   12cdc:	mov	r5, r2
   12ce0:	mov	r4, r1
   12ce4:	ldr	r7, [r0, #44]	; 0x2c
   12ce8:	bcc	12d60 <__assert_fail@plt+0x1a30>
   12cec:	ldr	r0, [r0, #8]
   12cf0:	cmp	r4, #0
   12cf4:	movne	r2, r0
   12cf8:	beq	12d0c <__assert_fail@plt+0x19dc>
   12cfc:	str	r4, [r2], #4
   12d00:	ldr	r4, [r4, #8]
   12d04:	cmp	r4, #0
   12d08:	bne	12cfc <__assert_fail@plt+0x19cc>
   12d0c:	mov	r3, r7
   12d10:	mov	r2, #4
   12d14:	mov	r1, r5
   12d18:	bl	112ac <qsort@plt>
   12d1c:	ldr	lr, [r6, #8]
   12d20:	subs	r3, r5, #1
   12d24:	ldr	r0, [lr]
   12d28:	beq	12da4 <__assert_fail@plt+0x1a74>
   12d2c:	mov	r2, lr
   12d30:	mov	ip, r0
   12d34:	b	12d3c <__assert_fail@plt+0x1a0c>
   12d38:	ldr	ip, [r2, #4]!
   12d3c:	ldr	r1, [r2, #4]
   12d40:	subs	r3, r3, #1
   12d44:	str	r1, [ip, #8]
   12d48:	bne	12d38 <__assert_fail@plt+0x1a08>
   12d4c:	add	r5, lr, r5, lsl #2
   12d50:	ldr	r2, [r5, #-4]
   12d54:	mov	r3, #0
   12d58:	str	r3, [r2, #8]
   12d5c:	pop	{r4, r5, r6, r7, r8, pc}
   12d60:	add	r1, r2, #40	; 0x28
   12d64:	cmn	r1, #-1073741823	; 0xc0000001
   12d68:	str	r1, [r0, #40]	; 0x28
   12d6c:	bhi	12d88 <__assert_fail@plt+0x1a58>
   12d70:	lsl	r1, r1, #2
   12d74:	ldr	r0, [r0, #8]
   12d78:	bl	18fcc <__assert_fail@plt+0x7c9c>
   12d7c:	cmp	r0, #0
   12d80:	strne	r0, [r6, #8]
   12d84:	bne	12cf0 <__assert_fail@plt+0x19c0>
   12d88:	ldr	r0, [r6, #8]
   12d8c:	bl	12ba4 <__assert_fail@plt+0x1874>
   12d90:	mov	r3, #0
   12d94:	mov	r0, r4
   12d98:	str	r3, [r6, #8]
   12d9c:	str	r3, [r6, #40]	; 0x28
   12da0:	pop	{r4, r5, r6, r7, r8, pc}
   12da4:	mov	r2, r0
   12da8:	b	12d54 <__assert_fail@plt+0x1a24>
   12dac:	add	r3, r2, #176	; 0xb0
   12db0:	push	{r4, r5, r6, r7, r8, lr}
   12db4:	mov	r6, r0
   12db8:	bic	r0, r3, #7
   12dbc:	mov	r5, r2
   12dc0:	mov	r7, r1
   12dc4:	bl	18fa0 <__assert_fail@plt+0x7c70>
   12dc8:	subs	r4, r0, #0
   12dcc:	beq	12e18 <__assert_fail@plt+0x1ae8>
   12dd0:	mov	r1, r7
   12dd4:	mov	r2, r5
   12dd8:	add	r0, r4, #168	; 0xa8
   12ddc:	bl	11078 <memcpy@plt>
   12de0:	add	r0, r4, r5
   12de4:	ldr	r1, [r6, #24]
   12de8:	mov	r3, #0
   12dec:	mov	r2, #3
   12df0:	strb	r3, [r0, #168]	; 0xa8
   12df4:	str	r3, [r4, #32]
   12df8:	str	r3, [r4, #12]
   12dfc:	strh	r3, [r4, #58]	; 0x3a
   12e00:	str	r3, [r4, #16]
   12e04:	str	r3, [r4, #20]
   12e08:	str	r5, [r4, #52]	; 0x34
   12e0c:	str	r6, [r4, #44]	; 0x2c
   12e10:	str	r1, [r4, #28]
   12e14:	strh	r2, [r4, #60]	; 0x3c
   12e18:	mov	r0, r4
   12e1c:	pop	{r4, r5, r6, r7, r8, pc}
   12e20:	push	{r4, r5, r6, lr}
   12e24:	subs	r4, r0, #0
   12e28:	popeq	{r4, r5, r6, pc}
   12e2c:	ldr	r3, [r4, #12]
   12e30:	ldr	r5, [r4, #8]
   12e34:	subs	r0, r3, #0
   12e38:	beq	12e40 <__assert_fail@plt+0x1b10>
   12e3c:	bl	1130c <closedir@plt>
   12e40:	mov	r0, r4
   12e44:	bl	12ba4 <__assert_fail@plt+0x1874>
   12e48:	subs	r4, r5, #0
   12e4c:	bne	12e2c <__assert_fail@plt+0x1afc>
   12e50:	pop	{r4, r5, r6, pc}
   12e54:	push	{r4, lr}
   12e58:	mov	r4, r0
   12e5c:	b	12e6c <__assert_fail@plt+0x1b3c>
   12e60:	bl	15d50 <__assert_fail@plt+0x4a20>
   12e64:	cmp	r0, #0
   12e68:	bge	12e84 <__assert_fail@plt+0x1b54>
   12e6c:	mov	r0, r4
   12e70:	bl	15d04 <__assert_fail@plt+0x49d4>
   12e74:	cmp	r0, #0
   12e78:	mov	r0, r4
   12e7c:	beq	12e60 <__assert_fail@plt+0x1b30>
   12e80:	pop	{r4, pc}
   12e84:	bl	112f4 <close@plt>
   12e88:	b	12e6c <__assert_fail@plt+0x1b3c>
   12e8c:	push	{r4, r5, r6, r7, lr}
   12e90:	sub	sp, sp, #100	; 0x64
   12e94:	ldr	r4, [r0, #44]	; 0x2c
   12e98:	ldr	r3, [r4, #48]	; 0x30
   12e9c:	tst	r3, #512	; 0x200
   12ea0:	beq	12f14 <__assert_fail@plt+0x1be4>
   12ea4:	ldr	r6, [r4, #52]	; 0x34
   12ea8:	mov	r7, r1
   12eac:	cmp	r6, #0
   12eb0:	mov	r5, r0
   12eb4:	beq	12ee0 <__assert_fail@plt+0x1bb0>
   12eb8:	ldrd	r2, [r5, #64]	; 0x40
   12ebc:	add	r1, sp, #96	; 0x60
   12ec0:	mov	r0, r6
   12ec4:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12ec8:	bl	15300 <__assert_fail@plt+0x3fd0>
   12ecc:	cmp	r0, #0
   12ed0:	beq	12f0c <__assert_fail@plt+0x1bdc>
   12ed4:	ldr	r0, [r0, #8]
   12ed8:	add	sp, sp, #100	; 0x64
   12edc:	pop	{r4, r5, r6, r7, pc}
   12ee0:	ldr	r3, [pc, #168]	; 12f90 <__assert_fail@plt+0x1c60>
   12ee4:	mov	r1, r6
   12ee8:	str	r3, [sp]
   12eec:	ldr	r2, [pc, #160]	; 12f94 <__assert_fail@plt+0x1c64>
   12ef0:	ldr	r3, [pc, #160]	; 12f98 <__assert_fail@plt+0x1c68>
   12ef4:	mov	r0, #13
   12ef8:	bl	155a0 <__assert_fail@plt+0x4270>
   12efc:	cmp	r0, #0
   12f00:	mov	r6, r0
   12f04:	str	r0, [r4, #52]	; 0x34
   12f08:	bne	12eb8 <__assert_fail@plt+0x1b88>
   12f0c:	cmp	r7, #0
   12f10:	bge	12f20 <__assert_fail@plt+0x1bf0>
   12f14:	mov	r0, #0
   12f18:	add	sp, sp, #100	; 0x64
   12f1c:	pop	{r4, r5, r6, r7, pc}
   12f20:	mov	r0, r7
   12f24:	add	r1, sp, #8
   12f28:	bl	10fe8 <fstatfs64@plt>
   12f2c:	cmp	r0, #0
   12f30:	bne	12f14 <__assert_fail@plt+0x1be4>
   12f34:	cmp	r6, #0
   12f38:	beq	12f84 <__assert_fail@plt+0x1c54>
   12f3c:	mov	r0, #16
   12f40:	bl	18fa0 <__assert_fail@plt+0x7c70>
   12f44:	subs	r4, r0, #0
   12f48:	beq	12f84 <__assert_fail@plt+0x1c54>
   12f4c:	ldrd	r2, [r5, #64]	; 0x40
   12f50:	ldr	r1, [sp, #8]
   12f54:	mov	r0, r6
   12f58:	str	r1, [r4, #8]
   12f5c:	strd	r2, [r4]
   12f60:	mov	r1, r4
   12f64:	bl	15b94 <__assert_fail@plt+0x4864>
   12f68:	cmp	r0, #0
   12f6c:	beq	12f7c <__assert_fail@plt+0x1c4c>
   12f70:	cmp	r4, r0
   12f74:	beq	12f84 <__assert_fail@plt+0x1c54>
   12f78:	bl	112e8 <abort@plt>
   12f7c:	mov	r0, r4
   12f80:	bl	12ba4 <__assert_fail@plt+0x1874>
   12f84:	ldr	r0, [sp, #8]
   12f88:	add	sp, sp, #100	; 0x64
   12f8c:	pop	{r4, r5, r6, r7, pc}
   12f90:	andeq	r2, r1, r4, lsr #23
   12f94:	andeq	r2, r1, ip, asr ip
   12f98:	andeq	r2, r1, r8, ror ip
   12f9c:	push	{r4, r5, r6, lr}
   12fa0:	mov	r5, r1
   12fa4:	ldr	r1, [r0, #32]
   12fa8:	cmn	r1, #100	; 0x64
   12fac:	sub	r3, r1, r5
   12fb0:	clz	r3, r3
   12fb4:	lsr	r3, r3, #5
   12fb8:	moveq	r3, #0
   12fbc:	cmp	r3, #0
   12fc0:	bne	13018 <__assert_fail@plt+0x1ce8>
   12fc4:	cmp	r2, #0
   12fc8:	mov	r4, r0
   12fcc:	bne	13000 <__assert_fail@plt+0x1cd0>
   12fd0:	ldr	r3, [r0, #48]	; 0x30
   12fd4:	lsr	r3, r3, #2
   12fd8:	eor	r3, r3, #1
   12fdc:	cmp	r1, #0
   12fe0:	movlt	r3, #0
   12fe4:	andge	r3, r3, #1
   12fe8:	cmp	r3, #0
   12fec:	beq	12ff8 <__assert_fail@plt+0x1cc8>
   12ff0:	mov	r0, r1
   12ff4:	bl	112f4 <close@plt>
   12ff8:	str	r5, [r4, #32]
   12ffc:	pop	{r4, r5, r6, pc}
   13000:	add	r0, r0, #60	; 0x3c
   13004:	bl	15d0c <__assert_fail@plt+0x49dc>
   13008:	cmp	r0, #0
   1300c:	bge	12ff4 <__assert_fail@plt+0x1cc4>
   13010:	str	r5, [r4, #32]
   13014:	pop	{r4, r5, r6, pc}
   13018:	bl	112e8 <abort@plt>
   1301c:	ldr	r3, [r0, #48]	; 0x30
   13020:	push	{r4, r5, r6, lr}
   13024:	ands	r5, r3, #4
   13028:	mov	r4, r0
   1302c:	movne	r5, #0
   13030:	bne	1304c <__assert_fail@plt+0x1d1c>
   13034:	tst	r3, #512	; 0x200
   13038:	bne	1305c <__assert_fail@plt+0x1d2c>
   1303c:	ldr	r0, [r0, #28]
   13040:	bl	112a0 <fchdir@plt>
   13044:	adds	r5, r0, #0
   13048:	movne	r5, #1
   1304c:	add	r0, r4, #60	; 0x3c
   13050:	bl	12e54 <__assert_fail@plt+0x1b24>
   13054:	mov	r0, r5
   13058:	pop	{r4, r5, r6, pc}
   1305c:	mov	r2, #1
   13060:	mvn	r1, #99	; 0x63
   13064:	bl	12f9c <__assert_fail@plt+0x1c6c>
   13068:	b	1304c <__assert_fail@plt+0x1d1c>
   1306c:	push	{r4, r5, r6, lr}
   13070:	mov	r4, r2
   13074:	ldr	r2, [r2, #48]	; 0x30
   13078:	sub	sp, sp, #8
   1307c:	cmp	r2, #0
   13080:	add	r5, r4, #64	; 0x40
   13084:	bne	130dc <__assert_fail@plt+0x1dac>
   13088:	tst	r1, #1
   1308c:	beq	130dc <__assert_fail@plt+0x1dac>
   13090:	mov	r2, r5
   13094:	ldr	r1, [r4, #24]
   13098:	mov	r0, #3
   1309c:	bl	112d0 <__xstat64@plt>
   130a0:	cmp	r0, #0
   130a4:	beq	13118 <__assert_fail@plt+0x1de8>
   130a8:	bl	111ec <__errno_location@plt>
   130ac:	ldr	r3, [r0]
   130b0:	mov	r6, r0
   130b4:	cmp	r3, #2
   130b8:	beq	13190 <__assert_fail@plt+0x1e60>
   130bc:	str	r3, [r4, #32]
   130c0:	mov	r0, r5
   130c4:	mov	r2, #104	; 0x68
   130c8:	mov	r1, #0
   130cc:	bl	11204 <memset@plt>
   130d0:	mov	r0, #10
   130d4:	add	sp, sp, #8
   130d8:	pop	{r4, r5, r6, pc}
   130dc:	lsl	r1, r1, #30
   130e0:	orrs	r3, r3, r1, lsr #31
   130e4:	bne	13090 <__assert_fail@plt+0x1d60>
   130e8:	mov	r3, #256	; 0x100
   130ec:	ldr	r2, [r4, #24]
   130f0:	mov	r1, r0
   130f4:	str	r3, [sp]
   130f8:	mov	r0, #3
   130fc:	mov	r3, r5
   13100:	bl	110e4 <__fxstatat64@plt>
   13104:	cmp	r0, #0
   13108:	beq	13118 <__assert_fail@plt+0x1de8>
   1310c:	bl	111ec <__errno_location@plt>
   13110:	ldr	r3, [r0]
   13114:	b	130bc <__assert_fail@plt+0x1d8c>
   13118:	ldr	r0, [r4, #80]	; 0x50
   1311c:	and	r0, r0, #61440	; 0xf000
   13120:	cmp	r0, #16384	; 0x4000
   13124:	beq	13148 <__assert_fail@plt+0x1e18>
   13128:	cmp	r0, #40960	; 0xa000
   1312c:	moveq	r0, #12
   13130:	beq	130d4 <__assert_fail@plt+0x1da4>
   13134:	cmp	r0, #32768	; 0x8000
   13138:	movne	r0, #3
   1313c:	moveq	r0, #8
   13140:	add	sp, sp, #8
   13144:	pop	{r4, r5, r6, pc}
   13148:	ldrb	r3, [r4, #168]	; 0xa8
   1314c:	cmp	r3, #46	; 0x2e
   13150:	beq	1315c <__assert_fail@plt+0x1e2c>
   13154:	mov	r0, #1
   13158:	b	130d4 <__assert_fail@plt+0x1da4>
   1315c:	ldrb	r3, [r4, #169]	; 0xa9
   13160:	cmp	r3, #0
   13164:	beq	1317c <__assert_fail@plt+0x1e4c>
   13168:	ldr	r3, [r4, #168]	; 0xa8
   1316c:	bic	r3, r3, #-16777216	; 0xff000000
   13170:	bic	r3, r3, #255	; 0xff
   13174:	cmp	r3, #11776	; 0x2e00
   13178:	bne	13154 <__assert_fail@plt+0x1e24>
   1317c:	ldr	r0, [r4, #48]	; 0x30
   13180:	cmp	r0, #0
   13184:	movne	r0, #5
   13188:	moveq	r0, #1
   1318c:	b	130d4 <__assert_fail@plt+0x1da4>
   13190:	mov	r2, r5
   13194:	ldr	r1, [r4, #24]
   13198:	mov	r0, #3
   1319c:	bl	11300 <__lxstat64@plt>
   131a0:	cmp	r0, #0
   131a4:	streq	r0, [r6]
   131a8:	moveq	r0, #13
   131ac:	beq	130d4 <__assert_fail@plt+0x1da4>
   131b0:	ldr	r3, [r6]
   131b4:	b	130bc <__assert_fail@plt+0x1d8c>
   131b8:	push	{r4, r5, r6, lr}
   131bc:	mov	r5, r0
   131c0:	ldr	r0, [r1]
   131c4:	add	r3, r0, #256	; 0x100
   131c8:	add	r2, r3, r2
   131cc:	cmp	r0, r2
   131d0:	bhi	131fc <__assert_fail@plt+0x1ecc>
   131d4:	str	r2, [r1]
   131d8:	ldr	r0, [r5]
   131dc:	mov	r1, r2
   131e0:	bl	18fcc <__assert_fail@plt+0x7c9c>
   131e4:	subs	r4, r0, #0
   131e8:	movne	r3, #1
   131ec:	strne	r4, [r5]
   131f0:	beq	13224 <__assert_fail@plt+0x1ef4>
   131f4:	mov	r0, r3
   131f8:	pop	{r4, r5, r6, pc}
   131fc:	ldr	r0, [r5]
   13200:	mov	r4, #0
   13204:	bl	12ba4 <__assert_fail@plt+0x1874>
   13208:	str	r4, [r5]
   1320c:	bl	111ec <__errno_location@plt>
   13210:	mov	r2, #36	; 0x24
   13214:	mov	r3, r4
   13218:	str	r2, [r0]
   1321c:	mov	r0, r3
   13220:	pop	{r4, r5, r6, pc}
   13224:	ldr	r0, [r5]
   13228:	bl	12ba4 <__assert_fail@plt+0x1874>
   1322c:	str	r4, [r5]
   13230:	mov	r3, r4
   13234:	b	131f4 <__assert_fail@plt+0x1ec4>
   13238:	ldr	r3, [pc, #104]	; 132a8 <__assert_fail@plt+0x1f78>
   1323c:	push	{r4, lr}
   13240:	and	r3, r3, r0
   13244:	cmp	r3, #0
   13248:	sub	sp, sp, #8
   1324c:	mov	r4, r1
   13250:	beq	13284 <__assert_fail@plt+0x1f54>
   13254:	ldr	r2, [pc, #80]	; 132ac <__assert_fail@plt+0x1f7c>
   13258:	ldr	r3, [pc, #80]	; 132b0 <__assert_fail@plt+0x1f80>
   1325c:	str	r2, [sp]
   13260:	mov	r1, #0
   13264:	ldr	r2, [pc, #72]	; 132b4 <__assert_fail@plt+0x1f84>
   13268:	mov	r0, #31
   1326c:	bl	155a0 <__assert_fail@plt+0x4270>
   13270:	str	r0, [r4]
   13274:	adds	r0, r0, #0
   13278:	movne	r0, #1
   1327c:	add	sp, sp, #8
   13280:	pop	{r4, pc}
   13284:	mov	r0, #32
   13288:	bl	18fa0 <__assert_fail@plt+0x7c70>
   1328c:	cmp	r0, #0
   13290:	str	r0, [r4]
   13294:	beq	1327c <__assert_fail@plt+0x1f4c>
   13298:	bl	190a4 <__assert_fail@plt+0x7d74>
   1329c:	mov	r0, #1
   132a0:	add	sp, sp, #8
   132a4:	pop	{r4, pc}
   132a8:	andeq	r0, r0, r2, lsl #2
   132ac:	andeq	r2, r1, r4, lsr #23
   132b0:	strdeq	r2, [r1], -ip
   132b4:	andeq	r2, r1, r0, asr #24
   132b8:	ldr	ip, [pc, #44]	; 132ec <__assert_fail@plt+0x1fbc>
   132bc:	tst	r1, #16
   132c0:	ldr	r3, [pc, #40]	; 132f0 <__assert_fail@plt+0x1fc0>
   132c4:	moveq	r3, ip
   132c8:	tst	r1, #512	; 0x200
   132cc:	mov	ip, r2
   132d0:	bne	132e0 <__assert_fail@plt+0x1fb0>
   132d4:	mov	r1, r3
   132d8:	mov	r0, r2
   132dc:	b	19408 <__assert_fail@plt+0x80d8>
   132e0:	mov	r2, r3
   132e4:	mov	r1, ip
   132e8:	b	15e00 <__assert_fail@plt+0x4ad0>
   132ec:	andeq	r4, r8, r0, lsl #18
   132f0:	andeq	ip, r8, r0, lsl #18
   132f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132f8:	subs	sl, r3, #0
   132fc:	sub	sp, sp, #104	; 0x68
   13300:	mov	r5, r0
   13304:	mov	r6, r1
   13308:	mov	r4, r2
   1330c:	ldr	r9, [r0, #48]	; 0x30
   13310:	beq	13364 <__assert_fail@plt+0x2034>
   13314:	ldr	r1, [pc, #432]	; 134cc <__assert_fail@plt+0x219c>
   13318:	mov	r0, sl
   1331c:	bl	11024 <strcmp@plt>
   13320:	cmp	r0, #0
   13324:	bne	13364 <__assert_fail@plt+0x2034>
   13328:	tst	r9, #4
   1332c:	bne	1336c <__assert_fail@plt+0x203c>
   13330:	cmp	r4, #0
   13334:	bge	134b8 <__assert_fail@plt+0x2188>
   13338:	tst	r9, #512	; 0x200
   1333c:	bne	13458 <__assert_fail@plt+0x2128>
   13340:	mov	r8, #1
   13344:	mov	r1, r9
   13348:	mov	r2, sl
   1334c:	ldr	r0, [r5, #32]
   13350:	bl	132b8 <__assert_fail@plt+0x1f88>
   13354:	subs	r7, r0, #0
   13358:	blt	134b0 <__assert_fail@plt+0x2180>
   1335c:	ldr	r9, [r5, #48]	; 0x30
   13360:	b	133a0 <__assert_fail@plt+0x2070>
   13364:	ands	r8, r9, #4
   13368:	beq	13394 <__assert_fail@plt+0x2064>
   1336c:	mvn	r3, r4
   13370:	lsr	r3, r3, #31
   13374:	ands	r9, r3, r9, lsr #9
   13378:	beq	13388 <__assert_fail@plt+0x2058>
   1337c:	mov	r0, r4
   13380:	bl	112f4 <close@plt>
   13384:	mov	r9, #0
   13388:	mov	r0, r9
   1338c:	add	sp, sp, #104	; 0x68
   13390:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13394:	cmp	r4, #0
   13398:	movge	r7, r4
   1339c:	blt	13344 <__assert_fail@plt+0x2014>
   133a0:	tst	r9, #2
   133a4:	bne	133c4 <__assert_fail@plt+0x2094>
   133a8:	cmp	sl, #0
   133ac:	beq	1341c <__assert_fail@plt+0x20ec>
   133b0:	mov	r0, sl
   133b4:	ldr	r1, [pc, #272]	; 134cc <__assert_fail@plt+0x219c>
   133b8:	bl	11024 <strcmp@plt>
   133bc:	cmp	r0, #0
   133c0:	bne	1341c <__assert_fail@plt+0x20ec>
   133c4:	mov	r2, sp
   133c8:	mov	r1, r7
   133cc:	mov	r0, #3
   133d0:	bl	110fc <__fxstat64@plt>
   133d4:	cmp	r0, #0
   133d8:	beq	13434 <__assert_fail@plt+0x2104>
   133dc:	mvn	r9, #0
   133e0:	cmp	r4, #0
   133e4:	bge	13388 <__assert_fail@plt+0x2058>
   133e8:	bl	111ec <__errno_location@plt>
   133ec:	mov	r4, r0
   133f0:	mov	r0, r7
   133f4:	ldr	r5, [r4]
   133f8:	bl	112f4 <close@plt>
   133fc:	str	r5, [r4]
   13400:	b	13388 <__assert_fail@plt+0x2058>
   13404:	ldrd	r0, [r6, #160]	; 0xa0
   13408:	ldrd	r2, [sp, #96]	; 0x60
   1340c:	cmp	r1, r3
   13410:	cmpeq	r0, r2
   13414:	bne	13448 <__assert_fail@plt+0x2118>
   13418:	ldr	r9, [r5, #48]	; 0x30
   1341c:	tst	r9, #512	; 0x200
   13420:	bne	13494 <__assert_fail@plt+0x2164>
   13424:	mov	r0, r7
   13428:	bl	112a0 <fchdir@plt>
   1342c:	mov	r9, r0
   13430:	b	133e0 <__assert_fail@plt+0x20b0>
   13434:	ldrd	r0, [r6, #64]	; 0x40
   13438:	ldrd	r2, [sp]
   1343c:	cmp	r1, r3
   13440:	cmpeq	r0, r2
   13444:	beq	13404 <__assert_fail@plt+0x20d4>
   13448:	bl	111ec <__errno_location@plt>
   1344c:	mov	r3, #2
   13450:	str	r3, [r0]
   13454:	b	133dc <__assert_fail@plt+0x20ac>
   13458:	add	r7, r5, #60	; 0x3c
   1345c:	mov	r0, r7
   13460:	bl	15d04 <__assert_fail@plt+0x49d4>
   13464:	subs	r8, r0, #0
   13468:	bne	13344 <__assert_fail@plt+0x2014>
   1346c:	mov	r0, r7
   13470:	bl	15d50 <__assert_fail@plt+0x4a20>
   13474:	ldr	r9, [r5, #48]	; 0x30
   13478:	subs	r7, r0, #0
   1347c:	blt	13340 <__assert_fail@plt+0x2010>
   13480:	tst	r9, #2
   13484:	mov	r4, r7
   13488:	mov	r8, #1
   1348c:	beq	1341c <__assert_fail@plt+0x20ec>
   13490:	b	133c4 <__assert_fail@plt+0x2094>
   13494:	eor	r2, r8, #1
   13498:	mov	r1, r7
   1349c:	uxtb	r2, r2
   134a0:	mov	r0, r5
   134a4:	bl	12f9c <__assert_fail@plt+0x1c6c>
   134a8:	mov	r9, #0
   134ac:	b	13388 <__assert_fail@plt+0x2058>
   134b0:	mvn	r9, #0
   134b4:	b	13388 <__assert_fail@plt+0x2058>
   134b8:	tst	r9, #2
   134bc:	mov	r7, r4
   134c0:	mov	r8, #1
   134c4:	beq	133b0 <__assert_fail@plt+0x2080>
   134c8:	b	133c4 <__assert_fail@plt+0x2094>
   134cc:	andeq	sl, r1, r8, asr #24
   134d0:	ldr	r3, [pc, #164]	; 1357c <__assert_fail@plt+0x224c>
   134d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134d8:	and	r3, r3, r0
   134dc:	cmp	r3, #0
   134e0:	mov	sl, r1
   134e4:	mov	r8, r2
   134e8:	beq	13550 <__assert_fail@plt+0x2220>
   134ec:	mov	r0, #24
   134f0:	bl	18fa0 <__assert_fail@plt+0x7c70>
   134f4:	subs	r9, r0, #0
   134f8:	beq	13574 <__assert_fail@plt+0x2244>
   134fc:	ldrd	r4, [r8, #160]	; 0xa0
   13500:	ldrd	r6, [r8, #64]	; 0x40
   13504:	str	r8, [r9, #16]
   13508:	strd	r4, [r9, #8]
   1350c:	ldr	r0, [sl]
   13510:	strd	r6, [r9]
   13514:	mov	r1, r9
   13518:	bl	15b94 <__assert_fail@plt+0x4864>
   1351c:	cmp	r9, r0
   13520:	mov	r4, r0
   13524:	beq	13548 <__assert_fail@plt+0x2218>
   13528:	mov	r0, r9
   1352c:	bl	12ba4 <__assert_fail@plt+0x1874>
   13530:	cmp	r4, #0
   13534:	beq	13574 <__assert_fail@plt+0x2244>
   13538:	ldr	r2, [r4, #16]
   1353c:	mov	r3, #2
   13540:	str	r2, [r8]
   13544:	strh	r3, [r8, #56]	; 0x38
   13548:	mov	r0, #1
   1354c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13550:	ldr	r0, [r1]
   13554:	add	r1, r2, #64	; 0x40
   13558:	bl	190c8 <__assert_fail@plt+0x7d98>
   1355c:	cmp	r0, #0
   13560:	beq	13548 <__assert_fail@plt+0x2218>
   13564:	mov	r3, #2
   13568:	str	r8, [r8]
   1356c:	strh	r3, [r8, #56]	; 0x38
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13574:	mov	r0, #0
   13578:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1357c:	andeq	r0, r0, r2, lsl #2
   13580:	ldr	r3, [pc, #172]	; 13634 <__assert_fail@plt+0x2304>
   13584:	push	{r4, r5, lr}
   13588:	and	r3, r3, r0
   1358c:	cmp	r3, #0
   13590:	sub	sp, sp, #28
   13594:	bne	135dc <__assert_fail@plt+0x22ac>
   13598:	ldr	r3, [r2, #4]
   1359c:	cmp	r3, #0
   135a0:	beq	135d4 <__assert_fail@plt+0x22a4>
   135a4:	ldr	r0, [r3, #48]	; 0x30
   135a8:	cmp	r0, #0
   135ac:	blt	135d4 <__assert_fail@plt+0x22a4>
   135b0:	ldr	ip, [r1]
   135b4:	ldrd	r0, [ip, #16]
   135b8:	orrs	r1, r0, r1
   135bc:	beq	13630 <__assert_fail@plt+0x2300>
   135c0:	ldrd	r4, [ip]
   135c4:	ldrd	r0, [r2, #160]	; 0xa0
   135c8:	cmp	r5, r1
   135cc:	cmpeq	r4, r0
   135d0:	beq	1360c <__assert_fail@plt+0x22dc>
   135d4:	add	sp, sp, #28
   135d8:	pop	{r4, r5, pc}
   135dc:	ldrd	r4, [r2, #64]	; 0x40
   135e0:	ldrd	r2, [r2, #160]	; 0xa0
   135e4:	ldr	r0, [r1]
   135e8:	mov	r1, sp
   135ec:	strd	r4, [sp]
   135f0:	strd	r2, [sp, #8]
   135f4:	bl	15bcc <__assert_fail@plt+0x489c>
   135f8:	cmp	r0, #0
   135fc:	beq	13630 <__assert_fail@plt+0x2300>
   13600:	bl	12ba4 <__assert_fail@plt+0x1874>
   13604:	add	sp, sp, #28
   13608:	pop	{r4, r5, pc}
   1360c:	ldrd	r0, [ip, #8]
   13610:	ldrd	r4, [r2, #64]	; 0x40
   13614:	cmp	r1, r5
   13618:	cmpeq	r0, r4
   1361c:	ldrdeq	r0, [r3, #64]	; 0x40
   13620:	ldrdeq	r2, [r3, #160]	; 0xa0
   13624:	strdeq	r0, [ip, #8]
   13628:	strdeq	r2, [ip]
   1362c:	b	135d4 <__assert_fail@plt+0x22a4>
   13630:	bl	112e8 <abort@plt>
   13634:	andeq	r0, r0, r2, lsl #2
   13638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1363c:	sub	sp, sp, #68	; 0x44
   13640:	ldr	sl, [r0]
   13644:	mov	r5, r0
   13648:	str	r1, [sp, #40]	; 0x28
   1364c:	ldr	r3, [sl, #12]
   13650:	cmp	r3, #0
   13654:	str	r3, [sp, #44]	; 0x2c
   13658:	beq	13a1c <__assert_fail@plt+0x26ec>
   1365c:	mov	r0, r3
   13660:	bl	11294 <dirfd@plt>
   13664:	cmp	r0, #0
   13668:	str	r0, [sp, #60]	; 0x3c
   1366c:	blt	13df8 <__assert_fail@plt+0x2ac8>
   13670:	ldr	r3, [r5, #44]	; 0x2c
   13674:	cmp	r3, #0
   13678:	beq	13f94 <__assert_fail@plt+0x2c64>
   1367c:	mvn	r3, #0
   13680:	str	r3, [sp, #20]
   13684:	ldr	r0, [r5, #48]	; 0x30
   13688:	mov	r3, #1
   1368c:	str	r3, [sp, #52]	; 0x34
   13690:	ldr	r3, [sl, #40]	; 0x28
   13694:	ldr	r2, [sl, #28]
   13698:	mov	r1, r3
   1369c:	sub	r3, r3, #1
   136a0:	str	sl, [sp, #12]
   136a4:	ldrb	r2, [r2, r3]
   136a8:	cmp	r2, #47	; 0x2f
   136ac:	moveq	r1, r3
   136b0:	ands	r0, r0, #4
   136b4:	mov	r2, r1
   136b8:	ldrne	r3, [r5, #24]
   136bc:	movne	r0, r2
   136c0:	str	r1, [sp, #32]
   136c4:	addne	r2, r3, r2
   136c8:	movne	r1, #47	; 0x2f
   136cc:	strbne	r1, [r3, r0]
   136d0:	addne	r3, r2, #1
   136d4:	ldr	r2, [sp, #32]
   136d8:	strne	r3, [sp, #28]
   136dc:	add	r2, r2, #1
   136e0:	ldr	r3, [sl, #48]	; 0x30
   136e4:	ldr	fp, [r5, #36]	; 0x24
   136e8:	mov	r1, r2
   136ec:	str	r2, [sp, #8]
   136f0:	sub	r1, fp, r1
   136f4:	mov	r2, #0
   136f8:	add	r3, r3, #1
   136fc:	streq	r0, [sp, #28]
   13700:	str	r2, [sp, #48]	; 0x30
   13704:	str	r1, [sp, #16]
   13708:	str	r3, [sp, #24]
   1370c:	str	r2, [sp, #36]	; 0x24
   13710:	mov	r7, r2
   13714:	str	r2, [sp, #4]
   13718:	mov	r8, r2
   1371c:	mov	sl, r2
   13720:	b	137a0 <__assert_fail@plt+0x2470>
   13724:	tst	r3, #251	; 0xfb
   13728:	beq	13874 <__assert_fail@plt+0x2544>
   1372c:	lsr	r2, r2, #4
   13730:	cmp	r3, #10
   13734:	orrne	r2, r2, #1
   13738:	tst	r2, #1
   1373c:	beq	13b44 <__assert_fail@plt+0x2814>
   13740:	sub	r3, r3, #1
   13744:	mov	r2, #11
   13748:	cmp	r3, #11
   1374c:	strh	r2, [r4, #56]	; 0x38
   13750:	bhi	13f84 <__assert_fail@plt+0x2c54>
   13754:	ldr	r2, [pc, #2128]	; 13fac <__assert_fail@plt+0x2c7c>
   13758:	ldr	r1, [r2, r3, lsl #2]
   1375c:	mov	r2, #1
   13760:	mov	r3, #0
   13764:	str	r1, [r4, #80]	; 0x50
   13768:	strd	r2, [r4, #112]	; 0x70
   1376c:	ldr	r3, [sp, #4]
   13770:	str	r8, [r4, #8]
   13774:	cmp	r3, #0
   13778:	ldr	r3, [pc, #2096]	; 13fb0 <__assert_fail@plt+0x2c80>
   1377c:	strne	r4, [sl, #8]
   13780:	streq	r4, [sp, #4]
   13784:	cmp	r7, r3
   13788:	beq	1398c <__assert_fail@plt+0x265c>
   1378c:	ldr	r3, [sp, #20]
   13790:	add	r7, r7, #1
   13794:	cmp	r7, r3
   13798:	bcs	13dc0 <__assert_fail@plt+0x2a90>
   1379c:	mov	sl, r4
   137a0:	ldr	r3, [sp, #12]
   137a4:	ldr	r4, [r3, #12]
   137a8:	cmp	r4, #0
   137ac:	beq	13c14 <__assert_fail@plt+0x28e4>
   137b0:	bl	111ec <__errno_location@plt>
   137b4:	mov	r9, r0
   137b8:	mov	r0, r4
   137bc:	str	r8, [r9]
   137c0:	bl	1127c <readdir64@plt>
   137c4:	subs	fp, r0, #0
   137c8:	beq	13cec <__assert_fail@plt+0x29bc>
   137cc:	ldr	r2, [r5, #48]	; 0x30
   137d0:	tst	r2, #32
   137d4:	bne	137e4 <__assert_fail@plt+0x24b4>
   137d8:	ldrb	r2, [fp, #19]
   137dc:	cmp	r2, #46	; 0x2e
   137e0:	beq	139f4 <__assert_fail@plt+0x26c4>
   137e4:	add	r4, fp, #19
   137e8:	mov	r0, r4
   137ec:	bl	111bc <strlen@plt>
   137f0:	mov	r1, r4
   137f4:	mov	r2, r0
   137f8:	mov	r6, r0
   137fc:	mov	r0, r5
   13800:	bl	12dac <__assert_fail@plt+0x1a7c>
   13804:	subs	r4, r0, #0
   13808:	beq	13bc4 <__assert_fail@plt+0x2894>
   1380c:	ldr	r3, [sp, #16]
   13810:	cmp	r3, r6
   13814:	bls	138ac <__assert_fail@plt+0x257c>
   13818:	ldr	r3, [sp, #8]
   1381c:	adds	r6, r3, r6
   13820:	bcs	13918 <__assert_fail@plt+0x25e8>
   13824:	ldrd	r0, [fp]
   13828:	ldr	r2, [r5, #48]	; 0x30
   1382c:	ldr	ip, [r5]
   13830:	tst	r2, #4
   13834:	ldr	r3, [sp, #24]
   13838:	strd	r0, [r4, #160]	; 0xa0
   1383c:	addeq	r1, r4, #168	; 0xa8
   13840:	str	r3, [r4, #48]	; 0x30
   13844:	str	ip, [r4, #4]
   13848:	str	r6, [r4, #40]	; 0x28
   1384c:	streq	r1, [r4, #24]
   13850:	bne	13968 <__assert_fail@plt+0x2638>
   13854:	ldr	r1, [r5, #44]	; 0x2c
   13858:	cmp	r1, #0
   1385c:	beq	13868 <__assert_fail@plt+0x2538>
   13860:	tst	r2, #1024	; 0x400
   13864:	beq	139d8 <__assert_fail@plt+0x26a8>
   13868:	tst	r2, #8
   1386c:	ldrb	r3, [fp, #18]
   13870:	bne	13724 <__assert_fail@plt+0x23f4>
   13874:	sub	r3, r3, #1
   13878:	cmp	r3, #11
   1387c:	mov	r2, #11
   13880:	strh	r2, [r4, #56]	; 0x38
   13884:	strhi	r8, [r4, #80]	; 0x50
   13888:	movhi	r2, #2
   1388c:	movhi	r3, #0
   13890:	bhi	13768 <__assert_fail@plt+0x2438>
   13894:	ldr	r2, [pc, #1808]	; 13fac <__assert_fail@plt+0x2c7c>
   13898:	ldr	r1, [r2, r3, lsl #2]
   1389c:	mov	r2, #2
   138a0:	mov	r3, #0
   138a4:	str	r1, [r4, #80]	; 0x50
   138a8:	b	13768 <__assert_fail@plt+0x2438>
   138ac:	ldr	r3, [sp, #32]
   138b0:	add	r1, r5, #36	; 0x24
   138b4:	add	r2, r3, #2
   138b8:	ldr	r3, [r5, #24]
   138bc:	add	r2, r2, r6
   138c0:	add	r0, r5, #24
   138c4:	str	r3, [sp, #16]
   138c8:	bl	131b8 <__assert_fail@plt+0x1e88>
   138cc:	cmp	r0, #0
   138d0:	beq	13bc4 <__assert_fail@plt+0x2894>
   138d4:	ldr	r2, [r5, #24]
   138d8:	ldr	r3, [sp, #16]
   138dc:	cmp	r3, r2
   138e0:	beq	13a14 <__assert_fail@plt+0x26e4>
   138e4:	ldr	r1, [r5, #48]	; 0x30
   138e8:	tst	r1, #4
   138ec:	ldrne	r3, [sp, #8]
   138f0:	addne	r3, r2, r3
   138f4:	strne	r3, [sp, #28]
   138f8:	ldr	r3, [r5, #36]	; 0x24
   138fc:	ldr	r2, [sp, #8]
   13900:	str	r0, [sp, #36]	; 0x24
   13904:	sub	r3, r3, r2
   13908:	str	r3, [sp, #16]
   1390c:	ldr	r3, [sp, #8]
   13910:	adds	r6, r3, r6
   13914:	bcc	13824 <__assert_fail@plt+0x24f4>
   13918:	ldr	sl, [sp, #12]
   1391c:	mov	r0, r4
   13920:	bl	12ba4 <__assert_fail@plt+0x1874>
   13924:	ldr	r0, [sp, #4]
   13928:	bl	12e20 <__assert_fail@plt+0x1af0>
   1392c:	ldr	r0, [sl, #12]
   13930:	bl	1130c <closedir@plt>
   13934:	ldr	r3, [r5, #48]	; 0x30
   13938:	mov	r2, #0
   1393c:	orr	r3, r3, #8192	; 0x2000
   13940:	mov	r0, #7
   13944:	mov	r1, #36	; 0x24
   13948:	str	r2, [sp, #4]
   1394c:	strh	r0, [sl, #56]	; 0x38
   13950:	str	r2, [sl, #12]
   13954:	ldr	r0, [sp, #4]
   13958:	str	r3, [r5, #48]	; 0x30
   1395c:	str	r1, [r9]
   13960:	add	sp, sp, #68	; 0x44
   13964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13968:	ldr	r1, [r4, #28]
   1396c:	ldr	r2, [r4, #52]	; 0x34
   13970:	str	r1, [r4, #24]
   13974:	add	r2, r2, #1
   13978:	add	r1, r4, #168	; 0xa8
   1397c:	ldr	r0, [sp, #28]
   13980:	bl	11048 <memmove@plt>
   13984:	ldr	r2, [r5, #48]	; 0x30
   13988:	b	13854 <__assert_fail@plt+0x2524>
   1398c:	ldr	r3, [r5, #44]	; 0x2c
   13990:	cmp	r3, #0
   13994:	bne	1378c <__assert_fail@plt+0x245c>
   13998:	ldr	r1, [sp, #60]	; 0x3c
   1399c:	ldr	r0, [sp, #12]
   139a0:	bl	12e8c <__assert_fail@plt+0x1b5c>
   139a4:	ldr	r3, [pc, #1544]	; 13fb4 <__assert_fail@plt+0x2c84>
   139a8:	cmp	r0, r3
   139ac:	beq	139d0 <__assert_fail@plt+0x26a0>
   139b0:	ldr	r3, [pc, #1536]	; 13fb8 <__assert_fail@plt+0x2c88>
   139b4:	cmp	r0, r3
   139b8:	beq	139d0 <__assert_fail@plt+0x26a0>
   139bc:	ldr	r3, [pc, #1528]	; 13fbc <__assert_fail@plt+0x2c8c>
   139c0:	cmp	r0, r3
   139c4:	movne	r3, #1
   139c8:	strne	r3, [sp, #48]	; 0x30
   139cc:	bne	1378c <__assert_fail@plt+0x245c>
   139d0:	str	r8, [sp, #48]	; 0x30
   139d4:	b	1378c <__assert_fail@plt+0x245c>
   139d8:	mov	r1, r2
   139dc:	mov	r3, r8
   139e0:	mov	r2, r4
   139e4:	ldr	r0, [r5, #32]
   139e8:	bl	1306c <__assert_fail@plt+0x1d3c>
   139ec:	strh	r0, [r4, #56]	; 0x38
   139f0:	b	1376c <__assert_fail@plt+0x243c>
   139f4:	ldrb	r2, [fp, #20]
   139f8:	cmp	r2, #0
   139fc:	beq	13a0c <__assert_fail@plt+0x26dc>
   13a00:	ldrh	r2, [fp, #20]
   13a04:	cmp	r2, #46	; 0x2e
   13a08:	bne	137e4 <__assert_fail@plt+0x24b4>
   13a0c:	mov	r4, sl
   13a10:	b	1379c <__assert_fail@plt+0x246c>
   13a14:	ldr	r0, [sp, #36]	; 0x24
   13a18:	b	138f8 <__assert_fail@plt+0x25c8>
   13a1c:	ldr	r3, [r0, #48]	; 0x30
   13a20:	ldr	r1, [sl, #24]
   13a24:	and	r2, r3, #516	; 0x204
   13a28:	cmp	r2, #512	; 0x200
   13a2c:	mvnne	r0, #99	; 0x63
   13a30:	ldreq	r0, [r0, #32]
   13a34:	ands	r2, r3, #16
   13a38:	bne	13b54 <__assert_fail@plt+0x2824>
   13a3c:	add	r3, sp, #60	; 0x3c
   13a40:	bl	15e38 <__assert_fail@plt+0x4b08>
   13a44:	cmp	r0, #0
   13a48:	mov	r4, r0
   13a4c:	str	r0, [sl, #12]
   13a50:	beq	13eac <__assert_fail@plt+0x2b7c>
   13a54:	ldrh	r3, [sl, #56]	; 0x38
   13a58:	cmp	r3, #11
   13a5c:	beq	13ed4 <__assert_fail@plt+0x2ba4>
   13a60:	ldr	r0, [r5, #48]	; 0x30
   13a64:	tst	r0, #256	; 0x100
   13a68:	bne	13b74 <__assert_fail@plt+0x2844>
   13a6c:	ldr	r2, [r5, #44]	; 0x2c
   13a70:	ldr	r3, [pc, #1352]	; 13fc0 <__assert_fail@plt+0x2c90>
   13a74:	cmp	r2, #0
   13a78:	mvnne	r3, #0
   13a7c:	str	r3, [sp, #20]
   13a80:	ldr	r3, [sp, #40]	; 0x28
   13a84:	cmp	r3, #2
   13a88:	beq	13e68 <__assert_fail@plt+0x2b38>
   13a8c:	ldr	r3, [r5, #48]	; 0x30
   13a90:	and	r3, r3, #56	; 0x38
   13a94:	cmp	r3, #24
   13a98:	beq	13ef0 <__assert_fail@plt+0x2bc0>
   13a9c:	ldr	r3, [sp, #40]	; 0x28
   13aa0:	mov	r4, #1
   13aa4:	sub	r6, r3, #3
   13aa8:	clz	r6, r6
   13aac:	lsr	r6, r6, #5
   13ab0:	ldr	r3, [r5, #48]	; 0x30
   13ab4:	tst	r3, #512	; 0x200
   13ab8:	bne	13e90 <__assert_fail@plt+0x2b60>
   13abc:	ldr	r2, [sp, #60]	; 0x3c
   13ac0:	cmp	r2, #0
   13ac4:	blt	13ae0 <__assert_fail@plt+0x27b0>
   13ac8:	mov	r3, #0
   13acc:	mov	r1, sl
   13ad0:	mov	r0, r5
   13ad4:	bl	132f4 <__assert_fail@plt+0x1fc4>
   13ad8:	cmp	r0, #0
   13adc:	beq	13684 <__assert_fail@plt+0x2354>
   13ae0:	tst	r4, r6
   13ae4:	beq	13af4 <__assert_fail@plt+0x27c4>
   13ae8:	bl	111ec <__errno_location@plt>
   13aec:	ldr	r3, [r0]
   13af0:	str	r3, [sl, #32]
   13af4:	ldrh	r3, [sl, #58]	; 0x3a
   13af8:	ldr	r0, [sl, #12]
   13afc:	orr	r3, r3, #1
   13b00:	strh	r3, [sl, #58]	; 0x3a
   13b04:	bl	1130c <closedir@plt>
   13b08:	ldr	r0, [r5, #48]	; 0x30
   13b0c:	mov	r3, #0
   13b10:	tst	r0, #512	; 0x200
   13b14:	str	r3, [sl, #12]
   13b18:	beq	13b34 <__assert_fail@plt+0x2804>
   13b1c:	ldr	r3, [sp, #60]	; 0x3c
   13b20:	cmp	r3, #0
   13b24:	blt	13b34 <__assert_fail@plt+0x2804>
   13b28:	mov	r0, r3
   13b2c:	bl	112f4 <close@plt>
   13b30:	ldr	r0, [r5, #48]	; 0x30
   13b34:	mov	r3, #0
   13b38:	str	r3, [sl, #12]
   13b3c:	str	r3, [sp, #52]	; 0x34
   13b40:	b	13690 <__assert_fail@plt+0x2360>
   13b44:	mov	r3, #11
   13b48:	strh	r3, [r4, #56]	; 0x38
   13b4c:	mov	r3, #9
   13b50:	b	13894 <__assert_fail@plt+0x2564>
   13b54:	tst	r3, #1
   13b58:	moveq	r2, #32768	; 0x8000
   13b5c:	beq	13a3c <__assert_fail@plt+0x270c>
   13b60:	ldr	r2, [sl, #48]	; 0x30
   13b64:	cmp	r2, #0
   13b68:	movne	r2, #32768	; 0x8000
   13b6c:	moveq	r2, #0
   13b70:	b	13a3c <__assert_fail@plt+0x270c>
   13b74:	add	r4, r5, #56	; 0x38
   13b78:	mov	r1, r4
   13b7c:	mov	r2, sl
   13b80:	bl	13580 <__assert_fail@plt+0x2250>
   13b84:	mov	r3, #0
   13b88:	mov	r2, sl
   13b8c:	ldr	r1, [r5, #48]	; 0x30
   13b90:	ldr	r0, [r5, #32]
   13b94:	bl	1306c <__assert_fail@plt+0x1d3c>
   13b98:	mov	r1, r4
   13b9c:	mov	r2, sl
   13ba0:	ldr	r0, [r5, #48]	; 0x30
   13ba4:	bl	134d0 <__assert_fail@plt+0x21a0>
   13ba8:	subs	r4, r0, #0
   13bac:	bne	13a6c <__assert_fail@plt+0x273c>
   13bb0:	bl	111ec <__errno_location@plt>
   13bb4:	mov	r3, #12
   13bb8:	str	r4, [sp, #4]
   13bbc:	str	r3, [r0]
   13bc0:	b	13c08 <__assert_fail@plt+0x28d8>
   13bc4:	ldr	sl, [sp, #12]
   13bc8:	mov	r0, r4
   13bcc:	ldr	r4, [r9]
   13bd0:	bl	12ba4 <__assert_fail@plt+0x1874>
   13bd4:	ldr	r0, [sp, #4]
   13bd8:	bl	12e20 <__assert_fail@plt+0x1af0>
   13bdc:	ldr	r0, [sl, #12]
   13be0:	bl	1130c <closedir@plt>
   13be4:	ldr	r3, [r5, #48]	; 0x30
   13be8:	mov	r2, #0
   13bec:	orr	r3, r3, #8192	; 0x2000
   13bf0:	mov	r1, #7
   13bf4:	str	r2, [sl, #12]
   13bf8:	strh	r1, [sl, #56]	; 0x38
   13bfc:	str	r2, [sp, #4]
   13c00:	str	r3, [r5, #48]	; 0x30
   13c04:	str	r4, [r9]
   13c08:	ldr	r0, [sp, #4]
   13c0c:	add	sp, sp, #68	; 0x44
   13c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c14:	mov	sl, r3
   13c18:	ldr	r3, [sp, #36]	; 0x24
   13c1c:	cmp	r3, #0
   13c20:	bne	13d3c <__assert_fail@plt+0x2a0c>
   13c24:	ldr	r3, [r5, #48]	; 0x30
   13c28:	tst	r3, #4
   13c2c:	beq	13c58 <__assert_fail@plt+0x2928>
   13c30:	ldr	r3, [r5, #36]	; 0x24
   13c34:	ldr	r2, [sp, #8]
   13c38:	cmp	r7, #0
   13c3c:	cmpne	r3, r2
   13c40:	ldreq	r3, [sp, #28]
   13c44:	subeq	r3, r3, #1
   13c48:	streq	r3, [sp, #28]
   13c4c:	ldr	r2, [sp, #28]
   13c50:	mov	r3, #0
   13c54:	strb	r3, [r2]
   13c58:	ldr	r3, [sp, #52]	; 0x34
   13c5c:	ldr	r2, [sp, #44]	; 0x2c
   13c60:	cmp	r2, #0
   13c64:	movne	r3, #0
   13c68:	andeq	r3, r3, #1
   13c6c:	cmp	r3, #0
   13c70:	beq	13ca8 <__assert_fail@plt+0x2978>
   13c74:	ldr	r3, [sp, #40]	; 0x28
   13c78:	cmp	r7, #0
   13c7c:	cmpne	r3, #1
   13c80:	bne	13cb0 <__assert_fail@plt+0x2980>
   13c84:	ldr	r3, [sl, #48]	; 0x30
   13c88:	cmp	r3, #0
   13c8c:	bne	13e28 <__assert_fail@plt+0x2af8>
   13c90:	mov	r0, r5
   13c94:	bl	1301c <__assert_fail@plt+0x1cec>
   13c98:	adds	r0, r0, #0
   13c9c:	movne	r0, #1
   13ca0:	cmp	r0, #0
   13ca4:	bne	13f48 <__assert_fail@plt+0x2c18>
   13ca8:	cmp	r7, #0
   13cac:	beq	13e48 <__assert_fail@plt+0x2b18>
   13cb0:	ldr	r3, [sp, #48]	; 0x30
   13cb4:	cmp	r3, #0
   13cb8:	bne	13dc8 <__assert_fail@plt+0x2a98>
   13cbc:	ldr	r3, [r5, #44]	; 0x2c
   13cc0:	cmp	r3, #0
   13cc4:	cmpne	r7, #1
   13cc8:	bls	13c08 <__assert_fail@plt+0x28d8>
   13ccc:	mov	r2, r7
   13cd0:	ldr	r1, [sp, #4]
   13cd4:	mov	r0, r5
   13cd8:	bl	12ccc <__assert_fail@plt+0x199c>
   13cdc:	str	r0, [sp, #4]
   13ce0:	ldr	r0, [sp, #4]
   13ce4:	add	sp, sp, #68	; 0x44
   13ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cec:	ldr	r3, [r9]
   13cf0:	ldr	sl, [sp, #12]
   13cf4:	cmp	r3, #0
   13cf8:	beq	13d18 <__assert_fail@plt+0x29e8>
   13cfc:	ldr	r2, [sp, #44]	; 0x2c
   13d00:	str	r3, [sl, #32]
   13d04:	cmp	r7, #0
   13d08:	cmpeq	r2, #0
   13d0c:	moveq	r2, #4
   13d10:	movne	r2, #7
   13d14:	strh	r2, [sl, #56]	; 0x38
   13d18:	ldr	r0, [sl, #12]
   13d1c:	cmp	r0, #0
   13d20:	beq	13c18 <__assert_fail@plt+0x28e8>
   13d24:	bl	1130c <closedir@plt>
   13d28:	mov	r3, #0
   13d2c:	str	r3, [sl, #12]
   13d30:	ldr	r3, [sp, #36]	; 0x24
   13d34:	cmp	r3, #0
   13d38:	beq	13c24 <__assert_fail@plt+0x28f4>
   13d3c:	ldr	r1, [r5, #4]
   13d40:	ldr	r0, [r5, #24]
   13d44:	cmp	r1, #0
   13d48:	beq	13d78 <__assert_fail@plt+0x2a48>
   13d4c:	ldr	r3, [r1, #24]
   13d50:	add	r2, r1, #168	; 0xa8
   13d54:	cmp	r3, r2
   13d58:	ldrne	r2, [r1, #28]
   13d5c:	str	r0, [r1, #28]
   13d60:	subne	r3, r3, r2
   13d64:	addne	r3, r0, r3
   13d68:	strne	r3, [r1, #24]
   13d6c:	ldr	r1, [r1, #8]
   13d70:	cmp	r1, #0
   13d74:	bne	13d4c <__assert_fail@plt+0x2a1c>
   13d78:	ldr	r3, [sp, #4]
   13d7c:	b	13dac <__assert_fail@plt+0x2a7c>
   13d80:	ldr	r2, [r3, #24]
   13d84:	cmp	r2, r1
   13d88:	ldrne	r1, [r3, #28]
   13d8c:	str	r0, [r3, #28]
   13d90:	subne	r2, r2, r1
   13d94:	addne	r2, r0, r2
   13d98:	strne	r2, [r3, #24]
   13d9c:	ldr	r2, [r3, #8]
   13da0:	cmp	r2, #0
   13da4:	ldreq	r2, [r3, #4]
   13da8:	mov	r3, r2
   13dac:	ldr	r2, [r3, #48]	; 0x30
   13db0:	add	r1, r3, #168	; 0xa8
   13db4:	cmp	r2, #0
   13db8:	bge	13d80 <__assert_fail@plt+0x2a50>
   13dbc:	b	13c24 <__assert_fail@plt+0x28f4>
   13dc0:	ldr	sl, [sp, #12]
   13dc4:	b	13c18 <__assert_fail@plt+0x28e8>
   13dc8:	ldr	r3, [pc, #500]	; 13fc4 <__assert_fail@plt+0x2c94>
   13dcc:	mov	r2, r7
   13dd0:	str	r3, [r5, #44]	; 0x2c
   13dd4:	ldr	r1, [sp, #4]
   13dd8:	mov	r0, r5
   13ddc:	bl	12ccc <__assert_fail@plt+0x199c>
   13de0:	mov	r3, #0
   13de4:	str	r3, [r5, #44]	; 0x2c
   13de8:	str	r0, [sp, #4]
   13dec:	ldr	r0, [sp, #4]
   13df0:	add	sp, sp, #68	; 0x44
   13df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df8:	ldr	r0, [sl, #12]
   13dfc:	bl	1130c <closedir@plt>
   13e00:	ldr	r3, [sp, #40]	; 0x28
   13e04:	mov	r4, #0
   13e08:	cmp	r3, #3
   13e0c:	str	r4, [sl, #12]
   13e10:	beq	13eb8 <__assert_fail@plt+0x2b88>
   13e14:	mov	r3, #0
   13e18:	str	r3, [sp, #4]
   13e1c:	ldr	r0, [sp, #4]
   13e20:	add	sp, sp, #68	; 0x44
   13e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e28:	ldr	r3, [pc, #408]	; 13fc8 <__assert_fail@plt+0x2c98>
   13e2c:	mvn	r2, #0
   13e30:	ldr	r1, [sl, #4]
   13e34:	mov	r0, r5
   13e38:	bl	132f4 <__assert_fail@plt+0x1fc4>
   13e3c:	adds	r0, r0, #0
   13e40:	movne	r0, #1
   13e44:	b	13ca0 <__assert_fail@plt+0x2970>
   13e48:	ldr	r3, [sp, #40]	; 0x28
   13e4c:	cmp	r3, #3
   13e50:	beq	13e78 <__assert_fail@plt+0x2b48>
   13e54:	ldr	r0, [sp, #4]
   13e58:	bl	12e20 <__assert_fail@plt+0x1af0>
   13e5c:	mov	r3, #0
   13e60:	str	r3, [sp, #4]
   13e64:	b	13c08 <__assert_fail@plt+0x28d8>
   13e68:	mov	r3, #0
   13e6c:	str	r3, [sp, #52]	; 0x34
   13e70:	ldr	r0, [r5, #48]	; 0x30
   13e74:	b	13690 <__assert_fail@plt+0x2360>
   13e78:	ldrh	r3, [sl, #56]	; 0x38
   13e7c:	cmp	r3, #4
   13e80:	cmpne	r3, #7
   13e84:	movne	r3, #6
   13e88:	strhne	r3, [sl, #56]	; 0x38
   13e8c:	b	13e54 <__assert_fail@plt+0x2b24>
   13e90:	mov	r2, #3
   13e94:	ldr	r1, [pc, #304]	; 13fcc <__assert_fail@plt+0x2c9c>
   13e98:	ldr	r0, [sp, #60]	; 0x3c
   13e9c:	bl	19234 <__assert_fail@plt+0x7f04>
   13ea0:	mov	r2, r0
   13ea4:	str	r0, [sp, #60]	; 0x3c
   13ea8:	b	13ac0 <__assert_fail@plt+0x2790>
   13eac:	ldr	r3, [sp, #40]	; 0x28
   13eb0:	cmp	r3, #3
   13eb4:	bne	13e14 <__assert_fail@plt+0x2ae4>
   13eb8:	mov	r3, #4
   13ebc:	strh	r3, [sl, #56]	; 0x38
   13ec0:	bl	111ec <__errno_location@plt>
   13ec4:	str	r4, [sp, #4]
   13ec8:	ldr	r3, [r0]
   13ecc:	str	r3, [sl, #32]
   13ed0:	b	13c08 <__assert_fail@plt+0x28d8>
   13ed4:	mov	r3, #0
   13ed8:	mov	r2, sl
   13edc:	ldr	r1, [r5, #48]	; 0x30
   13ee0:	ldr	r0, [r5, #32]
   13ee4:	bl	1306c <__assert_fail@plt+0x1d3c>
   13ee8:	strh	r0, [sl, #56]	; 0x38
   13eec:	b	13a6c <__assert_fail@plt+0x273c>
   13ef0:	ldr	r3, [sl, #84]	; 0x54
   13ef4:	cmp	r3, #2
   13ef8:	bne	13a9c <__assert_fail@plt+0x276c>
   13efc:	ldr	r1, [sp, #60]	; 0x3c
   13f00:	mov	r0, sl
   13f04:	bl	12e8c <__assert_fail@plt+0x1b5c>
   13f08:	ldr	r3, [pc, #164]	; 13fb4 <__assert_fail@plt+0x2c84>
   13f0c:	cmp	r0, r3
   13f10:	beq	13a9c <__assert_fail@plt+0x276c>
   13f14:	bgt	13f68 <__assert_fail@plt+0x2c38>
   13f18:	ldr	r3, [pc, #156]	; 13fbc <__assert_fail@plt+0x2c8c>
   13f1c:	cmp	r0, r3
   13f20:	beq	13a9c <__assert_fail@plt+0x276c>
   13f24:	cmp	r0, #0
   13f28:	beq	13a9c <__assert_fail@plt+0x276c>
   13f2c:	ldr	r3, [sp, #40]	; 0x28
   13f30:	cmp	r3, #3
   13f34:	moveq	r6, #1
   13f38:	movne	r6, #0
   13f3c:	bne	13e68 <__assert_fail@plt+0x2b38>
   13f40:	mov	r4, #0
   13f44:	b	13ab0 <__assert_fail@plt+0x2780>
   13f48:	ldr	r3, [r5, #48]	; 0x30
   13f4c:	mov	r2, #7
   13f50:	orr	r3, r3, #8192	; 0x2000
   13f54:	strh	r2, [sl, #56]	; 0x38
   13f58:	ldr	r0, [sp, #4]
   13f5c:	str	r3, [r5, #48]	; 0x30
   13f60:	bl	12e20 <__assert_fail@plt+0x1af0>
   13f64:	b	13e14 <__assert_fail@plt+0x2ae4>
   13f68:	ldr	r3, [pc, #96]	; 13fd0 <__assert_fail@plt+0x2ca0>
   13f6c:	cmp	r0, r3
   13f70:	beq	13a9c <__assert_fail@plt+0x276c>
   13f74:	ldr	r3, [pc, #88]	; 13fd4 <__assert_fail@plt+0x2ca4>
   13f78:	cmp	r0, r3
   13f7c:	bne	13f2c <__assert_fail@plt+0x2bfc>
   13f80:	b	13a9c <__assert_fail@plt+0x276c>
   13f84:	str	r8, [r4, #80]	; 0x50
   13f88:	mov	r2, #1
   13f8c:	mov	r3, #0
   13f90:	b	13768 <__assert_fail@plt+0x2438>
   13f94:	ldr	r3, [pc, #36]	; 13fc0 <__assert_fail@plt+0x2c90>
   13f98:	ldr	r0, [r5, #48]	; 0x30
   13f9c:	str	r3, [sp, #20]
   13fa0:	mov	r3, #1
   13fa4:	str	r3, [sp, #52]	; 0x34
   13fa8:	b	13690 <__assert_fail@plt+0x2360>
   13fac:	andeq	sl, r1, r8, lsl ip
   13fb0:	andeq	r2, r0, r0, lsl r7
   13fb4:	andeq	r6, r0, r9, ror #18
   13fb8:			; <UNDEFINED> instruction: 0x01021994
   13fbc:			; <UNDEFINED> instruction: 0xff534d42
   13fc0:	andeq	r8, r1, r0, lsr #13
   13fc4:	muleq	r1, ip, ip
   13fc8:	andeq	sl, r1, r8, asr #24
   13fcc:	andeq	r0, r0, r6, lsl #8
   13fd0:	andeq	r9, r0, r0, lsr #31
   13fd4:	movtpl	r4, #24911	; 0x614f
   13fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fdc:	bic	r5, r1, #4080	; 0xff0
   13fe0:	bic	r5, r5, #15
   13fe4:	cmp	r5, #0
   13fe8:	sub	sp, sp, #20
   13fec:	bne	14324 <__assert_fail@plt+0x2ff4>
   13ff0:	and	r3, r1, #516	; 0x204
   13ff4:	cmp	r3, #516	; 0x204
   13ff8:	mov	r6, r1
   13ffc:	beq	142c4 <__assert_fail@plt+0x2f94>
   14000:	ands	r5, r1, #18
   14004:	beq	142c4 <__assert_fail@plt+0x2f94>
   14008:	mov	r7, r0
   1400c:	mov	r1, #96	; 0x60
   14010:	mov	r0, #1
   14014:	mov	r9, r2
   14018:	bl	18f58 <__assert_fail@plt+0x7c28>
   1401c:	subs	r5, r0, #0
   14020:	beq	1426c <__assert_fail@plt+0x2f3c>
   14024:	tst	r6, #2
   14028:	bicne	r3, r6, #512	; 0x200
   1402c:	orrne	r3, r3, #4
   14030:	strne	r3, [r5, #48]	; 0x30
   14034:	ldr	r3, [r7]
   14038:	streq	r6, [r5, #48]	; 0x30
   1403c:	mvn	r2, #99	; 0x63
   14040:	cmp	r3, #0
   14044:	str	r9, [r5, #44]	; 0x2c
   14048:	str	r2, [r5, #32]
   1404c:	beq	14358 <__assert_fail@plt+0x3028>
   14050:	mov	r8, r7
   14054:	mov	r4, #0
   14058:	mov	r0, r3
   1405c:	bl	111bc <strlen@plt>
   14060:	ldr	r3, [r8, #4]!
   14064:	cmp	r4, r0
   14068:	movcc	r4, r0
   1406c:	cmp	r3, #0
   14070:	bne	14058 <__assert_fail@plt+0x2d28>
   14074:	add	r2, r4, #1
   14078:	cmp	r2, #4096	; 0x1000
   1407c:	movcc	r2, #4096	; 0x1000
   14080:	add	r1, r5, #36	; 0x24
   14084:	add	r0, r5, #24
   14088:	bl	131b8 <__assert_fail@plt+0x1e88>
   1408c:	subs	r3, r0, #0
   14090:	str	r3, [sp, #4]
   14094:	beq	142ac <__assert_fail@plt+0x2f7c>
   14098:	ldr	r4, [r7]
   1409c:	cmp	r4, #0
   140a0:	beq	142dc <__assert_fail@plt+0x2fac>
   140a4:	mov	r2, #0
   140a8:	ldr	r1, [pc, #696]	; 14368 <__assert_fail@plt+0x3038>
   140ac:	mov	r0, r5
   140b0:	bl	12dac <__assert_fail@plt+0x1a7c>
   140b4:	subs	fp, r0, #0
   140b8:	beq	142a4 <__assert_fail@plt+0x2f74>
   140bc:	mvn	r3, #0
   140c0:	cmp	r9, #0
   140c4:	str	r3, [fp, #48]	; 0x30
   140c8:	ldr	r4, [r7]
   140cc:	beq	140e0 <__assert_fail@plt+0x2db0>
   140d0:	ldr	r3, [r5, #48]	; 0x30
   140d4:	lsr	r3, r3, #10
   140d8:	and	r3, r3, #1
   140dc:	str	r3, [sp, #4]
   140e0:	cmp	r4, #0
   140e4:	beq	14360 <__assert_fail@plt+0x3030>
   140e8:	lsr	r6, r6, #11
   140ec:	mov	r3, #0
   140f0:	eor	r6, r6, #1
   140f4:	mov	sl, r3
   140f8:	str	r3, [sp, #12]
   140fc:	and	r3, r6, #1
   14100:	str	r3, [sp, #8]
   14104:	mov	r8, sl
   14108:	mov	r6, sl
   1410c:	b	14144 <__assert_fail@plt+0x2e14>
   14110:	mov	r3, #11
   14114:	strh	r3, [r4, #56]	; 0x38
   14118:	mov	r2, #2
   1411c:	mov	r3, #0
   14120:	cmp	r9, #0
   14124:	strd	r2, [r4, #112]	; 0x70
   14128:	beq	141d8 <__assert_fail@plt+0x2ea8>
   1412c:	str	r6, [r4, #8]
   14130:	mov	r6, r4
   14134:	ldr	r4, [r7, #4]!
   14138:	add	r8, r8, #1
   1413c:	cmp	r4, #0
   14140:	beq	14204 <__assert_fail@plt+0x2ed4>
   14144:	mov	r0, r4
   14148:	bl	111bc <strlen@plt>
   1414c:	ldr	r3, [sp, #8]
   14150:	cmp	r0, #2
   14154:	movls	r3, #0
   14158:	andhi	r3, r3, #1
   1415c:	cmp	r3, #0
   14160:	mov	r2, r0
   14164:	beq	1417c <__assert_fail@plt+0x2e4c>
   14168:	sub	r1, r0, #1
   1416c:	add	r3, r4, r1
   14170:	ldrb	r1, [r4, r1]
   14174:	cmp	r1, #47	; 0x2f
   14178:	beq	14278 <__assert_fail@plt+0x2f48>
   1417c:	mov	r1, r4
   14180:	mov	r0, r5
   14184:	bl	12dac <__assert_fail@plt+0x1a7c>
   14188:	subs	r4, r0, #0
   1418c:	beq	14294 <__assert_fail@plt+0x2f64>
   14190:	ldr	r3, [sp, #4]
   14194:	str	sl, [r4, #48]	; 0x30
   14198:	cmp	r6, #0
   1419c:	moveq	r3, #0
   141a0:	andne	r3, r3, #1
   141a4:	cmp	r3, #0
   141a8:	add	r3, r4, #168	; 0xa8
   141ac:	str	fp, [r4, #4]
   141b0:	str	r3, [r4, #24]
   141b4:	bne	14110 <__assert_fail@plt+0x2de0>
   141b8:	mov	r3, sl
   141bc:	mov	r2, r4
   141c0:	ldr	r1, [r5, #48]	; 0x30
   141c4:	ldr	r0, [r5, #32]
   141c8:	bl	1306c <__assert_fail@plt+0x1d3c>
   141cc:	cmp	r9, #0
   141d0:	strh	r0, [r4, #56]	; 0x38
   141d4:	bne	1412c <__assert_fail@plt+0x2dfc>
   141d8:	cmp	r6, #0
   141dc:	str	r9, [r4, #8]
   141e0:	ldrne	r3, [sp, #12]
   141e4:	streq	r4, [sp, #12]
   141e8:	strne	r4, [sp, #12]
   141ec:	strne	r4, [r3, #8]
   141f0:	moveq	r6, r4
   141f4:	ldr	r4, [r7, #4]!
   141f8:	add	r8, r8, #1
   141fc:	cmp	r4, #0
   14200:	bne	14144 <__assert_fail@plt+0x2e14>
   14204:	cmp	r9, #0
   14208:	cmpne	r8, #1
   1420c:	bhi	14340 <__assert_fail@plt+0x3010>
   14210:	mov	r2, #0
   14214:	ldr	r1, [pc, #332]	; 14368 <__assert_fail@plt+0x3038>
   14218:	mov	r0, r5
   1421c:	bl	12dac <__assert_fail@plt+0x1a7c>
   14220:	cmp	r0, #0
   14224:	str	r0, [r5]
   14228:	beq	14294 <__assert_fail@plt+0x2f64>
   1422c:	mov	r2, #1
   14230:	mov	r3, #9
   14234:	str	r6, [r0, #8]
   14238:	str	r2, [r0, #48]	; 0x30
   1423c:	strh	r3, [r0, #56]	; 0x38
   14240:	add	r1, r5, #56	; 0x38
   14244:	ldr	r0, [r5, #48]	; 0x30
   14248:	bl	13238 <__assert_fail@plt+0x1f08>
   1424c:	cmp	r0, #0
   14250:	beq	14294 <__assert_fail@plt+0x2f64>
   14254:	ldr	r1, [r5, #48]	; 0x30
   14258:	tst	r1, #516	; 0x204
   1425c:	beq	142f4 <__assert_fail@plt+0x2fc4>
   14260:	mvn	r1, #0
   14264:	add	r0, r5, #60	; 0x3c
   14268:	bl	15cd8 <__assert_fail@plt+0x49a8>
   1426c:	mov	r0, r5
   14270:	add	sp, sp, #20
   14274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14278:	ldrb	r1, [r3, #-1]!
   1427c:	cmp	r1, #47	; 0x2f
   14280:	bne	1417c <__assert_fail@plt+0x2e4c>
   14284:	sub	r2, r2, #1
   14288:	cmp	r2, #1
   1428c:	bne	14278 <__assert_fail@plt+0x2f48>
   14290:	b	1417c <__assert_fail@plt+0x2e4c>
   14294:	mov	r0, r6
   14298:	bl	12e20 <__assert_fail@plt+0x1af0>
   1429c:	mov	r0, fp
   142a0:	bl	12ba4 <__assert_fail@plt+0x1874>
   142a4:	ldr	r0, [r5, #24]
   142a8:	bl	12ba4 <__assert_fail@plt+0x1874>
   142ac:	mov	r0, r5
   142b0:	bl	12ba4 <__assert_fail@plt+0x1874>
   142b4:	mov	r5, #0
   142b8:	mov	r0, r5
   142bc:	add	sp, sp, #20
   142c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142c4:	bl	111ec <__errno_location@plt>
   142c8:	mov	r3, #22
   142cc:	str	r3, [r0]
   142d0:	mov	r0, r5
   142d4:	add	sp, sp, #20
   142d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142dc:	cmp	r9, #0
   142e0:	movne	fp, r4
   142e4:	bne	140d0 <__assert_fail@plt+0x2da0>
   142e8:	mov	fp, r9
   142ec:	mov	r6, r9
   142f0:	b	14210 <__assert_fail@plt+0x2ee0>
   142f4:	ldr	r2, [pc, #112]	; 1436c <__assert_fail@plt+0x303c>
   142f8:	ldr	r0, [r5, #32]
   142fc:	bl	132b8 <__assert_fail@plt+0x1f88>
   14300:	mvn	r1, #0
   14304:	cmp	r0, #0
   14308:	str	r0, [r5, #28]
   1430c:	ldrlt	r3, [r5, #48]	; 0x30
   14310:	add	r0, r5, #60	; 0x3c
   14314:	orrlt	r3, r3, #4
   14318:	strlt	r3, [r5, #48]	; 0x30
   1431c:	bl	15cd8 <__assert_fail@plt+0x49a8>
   14320:	b	1426c <__assert_fail@plt+0x2f3c>
   14324:	bl	111ec <__errno_location@plt>
   14328:	mov	r5, #0
   1432c:	mov	r3, #22
   14330:	str	r3, [r0]
   14334:	mov	r0, r5
   14338:	add	sp, sp, #20
   1433c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14340:	mov	r1, r6
   14344:	mov	r2, r8
   14348:	mov	r0, r5
   1434c:	bl	12ccc <__assert_fail@plt+0x199c>
   14350:	mov	r6, r0
   14354:	b	14210 <__assert_fail@plt+0x2ee0>
   14358:	mov	r2, #4096	; 0x1000
   1435c:	b	14080 <__assert_fail@plt+0x2d50>
   14360:	mov	r6, r4
   14364:	b	14210 <__assert_fail@plt+0x2ee0>
   14368:	andeq	sl, r1, r8, lsl #9
   1436c:	andeq	sl, r1, ip, asr #24
   14370:	ldr	r3, [r0]
   14374:	push	{r4, r5, r6, lr}
   14378:	cmp	r3, #0
   1437c:	mov	r5, r0
   14380:	beq	143bc <__assert_fail@plt+0x308c>
   14384:	ldr	r2, [r3, #48]	; 0x30
   14388:	cmp	r2, #0
   1438c:	blt	144ac <__assert_fail@plt+0x317c>
   14390:	ldr	r4, [r3, #8]
   14394:	mov	r0, r3
   14398:	cmp	r4, #0
   1439c:	ldreq	r4, [r3, #4]
   143a0:	bl	12ba4 <__assert_fail@plt+0x1874>
   143a4:	mov	r3, r4
   143a8:	ldr	r2, [r4, #48]	; 0x30
   143ac:	cmp	r2, #0
   143b0:	bge	14390 <__assert_fail@plt+0x3060>
   143b4:	mov	r0, r4
   143b8:	bl	12ba4 <__assert_fail@plt+0x1874>
   143bc:	ldr	r0, [r5, #4]
   143c0:	cmp	r0, #0
   143c4:	beq	143cc <__assert_fail@plt+0x309c>
   143c8:	bl	12e20 <__assert_fail@plt+0x1af0>
   143cc:	ldr	r0, [r5, #8]
   143d0:	bl	12ba4 <__assert_fail@plt+0x1874>
   143d4:	ldr	r0, [r5, #24]
   143d8:	bl	12ba4 <__assert_fail@plt+0x1874>
   143dc:	ldr	r3, [r5, #48]	; 0x30
   143e0:	tst	r3, #512	; 0x200
   143e4:	beq	14458 <__assert_fail@plt+0x3128>
   143e8:	ldr	r0, [r5, #32]
   143ec:	cmp	r0, #0
   143f0:	blt	14400 <__assert_fail@plt+0x30d0>
   143f4:	bl	112f4 <close@plt>
   143f8:	cmp	r0, #0
   143fc:	bne	14498 <__assert_fail@plt+0x3168>
   14400:	mov	r4, #0
   14404:	add	r0, r5, #60	; 0x3c
   14408:	bl	12e54 <__assert_fail@plt+0x1b24>
   1440c:	ldr	r0, [r5, #52]	; 0x34
   14410:	cmp	r0, #0
   14414:	beq	1441c <__assert_fail@plt+0x30ec>
   14418:	bl	1579c <__assert_fail@plt+0x446c>
   1441c:	ldr	r2, [r5, #48]	; 0x30
   14420:	ldr	r3, [pc, #164]	; 144cc <__assert_fail@plt+0x319c>
   14424:	ldr	r0, [r5, #56]	; 0x38
   14428:	and	r3, r3, r2
   1442c:	cmp	r3, #0
   14430:	beq	144a4 <__assert_fail@plt+0x3174>
   14434:	cmp	r0, #0
   14438:	beq	14440 <__assert_fail@plt+0x3110>
   1443c:	bl	1579c <__assert_fail@plt+0x446c>
   14440:	mov	r0, r5
   14444:	bl	12ba4 <__assert_fail@plt+0x1874>
   14448:	cmp	r4, #0
   1444c:	bne	144bc <__assert_fail@plt+0x318c>
   14450:	mov	r0, r4
   14454:	pop	{r4, r5, r6, pc}
   14458:	tst	r3, #4
   1445c:	bne	14400 <__assert_fail@plt+0x30d0>
   14460:	ldr	r0, [r5, #28]
   14464:	bl	112a0 <fchdir@plt>
   14468:	cmp	r0, #0
   1446c:	beq	144b4 <__assert_fail@plt+0x3184>
   14470:	bl	111ec <__errno_location@plt>
   14474:	ldr	r4, [r0]
   14478:	ldr	r0, [r5, #28]
   1447c:	bl	112f4 <close@plt>
   14480:	clz	r3, r4
   14484:	lsr	r3, r3, #5
   14488:	cmp	r0, #0
   1448c:	moveq	r3, #0
   14490:	cmp	r3, #0
   14494:	beq	14404 <__assert_fail@plt+0x30d4>
   14498:	bl	111ec <__errno_location@plt>
   1449c:	ldr	r4, [r0]
   144a0:	b	14404 <__assert_fail@plt+0x30d4>
   144a4:	bl	12ba4 <__assert_fail@plt+0x1874>
   144a8:	b	14440 <__assert_fail@plt+0x3110>
   144ac:	mov	r4, r3
   144b0:	b	143b4 <__assert_fail@plt+0x3084>
   144b4:	ldr	r0, [r5, #28]
   144b8:	b	143f4 <__assert_fail@plt+0x30c4>
   144bc:	bl	111ec <__errno_location@plt>
   144c0:	str	r4, [r0]
   144c4:	mvn	r4, #0
   144c8:	b	14450 <__assert_fail@plt+0x3120>
   144cc:	andeq	r0, r0, r2, lsl #2
   144d0:	push	{r4, r5, r6, r7, r8, lr}
   144d4:	ldr	r5, [r0]
   144d8:	cmp	r5, #0
   144dc:	beq	14610 <__assert_fail@plt+0x32e0>
   144e0:	ldr	r1, [r0, #48]	; 0x30
   144e4:	ands	r3, r1, #8192	; 0x2000
   144e8:	bne	14610 <__assert_fail@plt+0x32e0>
   144ec:	ldrh	r2, [r5, #60]	; 0x3c
   144f0:	mov	r8, r0
   144f4:	mov	r0, #3
   144f8:	cmp	r2, #1
   144fc:	strh	r0, [r5, #60]	; 0x3c
   14500:	beq	1487c <__assert_fail@plt+0x354c>
   14504:	cmp	r2, #2
   14508:	ldrh	r3, [r5, #56]	; 0x38
   1450c:	beq	1461c <__assert_fail@plt+0x32ec>
   14510:	cmp	r3, #1
   14514:	bne	1454c <__assert_fail@plt+0x321c>
   14518:	cmp	r2, #4
   1451c:	bne	14630 <__assert_fail@plt+0x3300>
   14520:	b	1464c <__assert_fail@plt+0x331c>
   14524:	mov	r0, r5
   14528:	str	r4, [r8]
   1452c:	bl	12ba4 <__assert_fail@plt+0x1874>
   14530:	ldr	r5, [r4, #48]	; 0x30
   14534:	cmp	r5, #0
   14538:	beq	14694 <__assert_fail@plt+0x3364>
   1453c:	ldrh	r3, [r4, #60]	; 0x3c
   14540:	mov	r5, r4
   14544:	cmp	r3, #4
   14548:	bne	14790 <__assert_fail@plt+0x3460>
   1454c:	ldr	r4, [r5, #8]
   14550:	cmp	r4, #0
   14554:	bne	14524 <__assert_fail@plt+0x31f4>
   14558:	ldr	r4, [r5, #4]
   1455c:	ldr	r3, [r4, #12]
   14560:	cmp	r3, #0
   14564:	bne	14a0c <__assert_fail@plt+0x36dc>
   14568:	str	r4, [r8]
   1456c:	mov	r0, r5
   14570:	bl	12ba4 <__assert_fail@plt+0x1874>
   14574:	ldr	r3, [r4, #48]	; 0x30
   14578:	cmn	r3, #1
   1457c:	beq	14948 <__assert_fail@plt+0x3618>
   14580:	ldrh	r3, [r4, #56]	; 0x38
   14584:	cmp	r3, #11
   14588:	beq	14804 <__assert_fail@plt+0x34d4>
   1458c:	ldr	r3, [r4, #40]	; 0x28
   14590:	ldr	r2, [r8, #24]
   14594:	mov	r1, #0
   14598:	strb	r1, [r2, r3]
   1459c:	ldr	r3, [r4, #48]	; 0x30
   145a0:	cmp	r3, r1
   145a4:	beq	148d4 <__assert_fail@plt+0x35a4>
   145a8:	ldrh	r3, [r4, #58]	; 0x3a
   145ac:	tst	r3, #2
   145b0:	beq	14894 <__assert_fail@plt+0x3564>
   145b4:	ldr	r3, [r8, #48]	; 0x30
   145b8:	tst	r3, #4
   145bc:	beq	148f8 <__assert_fail@plt+0x35c8>
   145c0:	ldr	r0, [r4, #36]	; 0x24
   145c4:	bl	112f4 <close@plt>
   145c8:	ldr	r3, [r8, #48]	; 0x30
   145cc:	ldrh	r2, [r4, #56]	; 0x38
   145d0:	cmp	r2, #2
   145d4:	beq	14608 <__assert_fail@plt+0x32d8>
   145d8:	ldr	r2, [r4, #32]
   145dc:	cmp	r2, #0
   145e0:	movne	r2, #7
   145e4:	strhne	r2, [r4, #56]	; 0x38
   145e8:	bne	14608 <__assert_fail@plt+0x32d8>
   145ec:	mov	r2, #6
   145f0:	mov	r0, r3
   145f4:	strh	r2, [r4, #56]	; 0x38
   145f8:	add	r1, r8, #56	; 0x38
   145fc:	mov	r2, r4
   14600:	bl	13580 <__assert_fail@plt+0x2250>
   14604:	ldr	r3, [r8, #48]	; 0x30
   14608:	tst	r3, #8192	; 0x2000
   1460c:	beq	1468c <__assert_fail@plt+0x335c>
   14610:	mov	r4, #0
   14614:	mov	r0, r4
   14618:	pop	{r4, r5, r6, r7, r8, pc}
   1461c:	sub	r2, r3, #12
   14620:	cmp	r2, #1
   14624:	bls	14914 <__assert_fail@plt+0x35e4>
   14628:	cmp	r3, #1
   1462c:	bne	1454c <__assert_fail@plt+0x321c>
   14630:	tst	r1, #64	; 0x40
   14634:	beq	14808 <__assert_fail@plt+0x34d8>
   14638:	ldrd	r6, [r5, #64]	; 0x40
   1463c:	ldrd	r2, [r8, #16]
   14640:	cmp	r7, r3
   14644:	cmpeq	r6, r2
   14648:	beq	14808 <__assert_fail@plt+0x34d8>
   1464c:	ldrh	r3, [r5, #58]	; 0x3a
   14650:	tst	r3, #2
   14654:	bne	14a00 <__assert_fail@plt+0x36d0>
   14658:	ldr	r0, [r8, #4]
   1465c:	cmp	r0, #0
   14660:	beq	14670 <__assert_fail@plt+0x3340>
   14664:	bl	12e20 <__assert_fail@plt+0x1af0>
   14668:	mov	r3, #0
   1466c:	str	r3, [r8, #4]
   14670:	mov	r3, #6
   14674:	strh	r3, [r5, #56]	; 0x38
   14678:	mov	r2, r5
   1467c:	add	r1, r8, #56	; 0x38
   14680:	ldr	r0, [r8, #48]	; 0x30
   14684:	mov	r4, r5
   14688:	bl	13580 <__assert_fail@plt+0x2250>
   1468c:	mov	r0, r4
   14690:	pop	{r4, r5, r6, r7, r8, pc}
   14694:	mov	r0, r8
   14698:	bl	1301c <__assert_fail@plt+0x1cec>
   1469c:	cmp	r0, #0
   146a0:	bne	149ec <__assert_fail@plt+0x36bc>
   146a4:	ldr	r2, [r8, #48]	; 0x30
   146a8:	ldr	r3, [pc, #1228]	; 14b7c <__assert_fail@plt+0x384c>
   146ac:	ldr	r0, [r8, #56]	; 0x38
   146b0:	and	r3, r3, r2
   146b4:	cmp	r3, #0
   146b8:	beq	14968 <__assert_fail@plt+0x3638>
   146bc:	cmp	r0, #0
   146c0:	beq	146c8 <__assert_fail@plt+0x3398>
   146c4:	bl	1579c <__assert_fail@plt+0x446c>
   146c8:	ldr	r2, [r4, #52]	; 0x34
   146cc:	add	r6, r4, #168	; 0xa8
   146d0:	str	r2, [r4, #40]	; 0x28
   146d4:	mov	r1, r6
   146d8:	add	r2, r2, #1
   146dc:	ldr	r0, [r8, #24]
   146e0:	bl	11048 <memmove@plt>
   146e4:	mov	r0, r6
   146e8:	mov	r1, #47	; 0x2f
   146ec:	bl	11264 <strrchr@plt>
   146f0:	cmp	r0, #0
   146f4:	beq	14724 <__assert_fail@plt+0x33f4>
   146f8:	cmp	r6, r0
   146fc:	beq	149dc <__assert_fail@plt+0x36ac>
   14700:	add	r5, r0, #1
   14704:	mov	r0, r5
   14708:	bl	111bc <strlen@plt>
   1470c:	mov	r1, r5
   14710:	mov	r7, r0
   14714:	add	r2, r7, #1
   14718:	mov	r0, r6
   1471c:	bl	11048 <memmove@plt>
   14720:	str	r7, [r4, #52]	; 0x34
   14724:	ldr	r3, [r8, #24]
   14728:	add	r1, r8, #56	; 0x38
   1472c:	str	r3, [r4, #28]
   14730:	str	r3, [r4, #24]
   14734:	ldr	r0, [r8, #48]	; 0x30
   14738:	bl	13238 <__assert_fail@plt+0x1f08>
   1473c:	ldrh	r3, [r4, #56]	; 0x38
   14740:	cmp	r3, #11
   14744:	str	r4, [r8]
   14748:	beq	147e8 <__assert_fail@plt+0x34b8>
   1474c:	cmp	r3, #1
   14750:	bne	1468c <__assert_fail@plt+0x335c>
   14754:	ldr	r3, [r4, #48]	; 0x30
   14758:	cmp	r3, #0
   1475c:	ldrdeq	r2, [r4, #64]	; 0x40
   14760:	strdeq	r2, [r8, #16]
   14764:	mov	r2, r4
   14768:	add	r1, r8, #56	; 0x38
   1476c:	ldr	r0, [r8, #48]	; 0x30
   14770:	bl	134d0 <__assert_fail@plt+0x21a0>
   14774:	subs	r5, r0, #0
   14778:	bne	1468c <__assert_fail@plt+0x335c>
   1477c:	bl	111ec <__errno_location@plt>
   14780:	mov	r3, #12
   14784:	mov	r4, r5
   14788:	str	r3, [r0]
   1478c:	b	1468c <__assert_fail@plt+0x335c>
   14790:	cmp	r3, #2
   14794:	beq	14a40 <__assert_fail@plt+0x3710>
   14798:	ldr	r3, [r4, #4]
   1479c:	mov	ip, #47	; 0x2f
   147a0:	ldr	r2, [r8, #24]
   147a4:	ldr	r0, [r3, #40]	; 0x28
   147a8:	ldr	lr, [r3, #28]
   147ac:	sub	r3, r0, #1
   147b0:	add	r1, r4, #168	; 0xa8
   147b4:	ldrb	lr, [lr, r3]
   147b8:	cmp	lr, ip
   147bc:	movne	r3, r0
   147c0:	add	r0, r2, r3
   147c4:	strb	ip, [r2, r3]
   147c8:	ldr	r2, [r4, #52]	; 0x34
   147cc:	add	r0, r0, #1
   147d0:	add	r2, r2, #1
   147d4:	bl	11048 <memmove@plt>
   147d8:	ldrh	r3, [r4, #56]	; 0x38
   147dc:	str	r4, [r8]
   147e0:	cmp	r3, #11
   147e4:	bne	1474c <__assert_fail@plt+0x341c>
   147e8:	ldrd	r2, [r4, #112]	; 0x70
   147ec:	cmp	r3, #0
   147f0:	cmpeq	r2, #2
   147f4:	beq	14a6c <__assert_fail@plt+0x373c>
   147f8:	cmp	r3, #0
   147fc:	cmpeq	r2, #1
   14800:	beq	1468c <__assert_fail@plt+0x335c>
   14804:	bl	112e8 <abort@plt>
   14808:	ldr	r0, [r8, #4]
   1480c:	cmp	r0, #0
   14810:	beq	14984 <__assert_fail@plt+0x3654>
   14814:	tst	r1, #4096	; 0x1000
   14818:	bne	14970 <__assert_fail@plt+0x3640>
   1481c:	ldr	r3, [r5, #24]
   14820:	mvn	r2, #0
   14824:	mov	r1, r5
   14828:	mov	r0, r8
   1482c:	bl	132f4 <__assert_fail@plt+0x1fc4>
   14830:	cmp	r0, #0
   14834:	beq	148e8 <__assert_fail@plt+0x35b8>
   14838:	bl	111ec <__errno_location@plt>
   1483c:	ldrh	r3, [r5, #58]	; 0x3a
   14840:	ldr	r4, [r8, #4]
   14844:	orr	r3, r3, #1
   14848:	cmp	r4, #0
   1484c:	ldr	r2, [r0]
   14850:	strh	r3, [r5, #58]	; 0x3a
   14854:	str	r2, [r5, #32]
   14858:	beq	148ec <__assert_fail@plt+0x35bc>
   1485c:	mov	r3, r4
   14860:	ldr	r2, [r3, #4]
   14864:	ldr	r2, [r2, #24]
   14868:	str	r2, [r3, #24]
   1486c:	ldr	r3, [r3, #8]
   14870:	cmp	r3, #0
   14874:	bne	14860 <__assert_fail@plt+0x3530>
   14878:	b	148ec <__assert_fail@plt+0x35bc>
   1487c:	ldr	r0, [r8, #32]
   14880:	mov	r2, r5
   14884:	bl	1306c <__assert_fail@plt+0x1d3c>
   14888:	mov	r4, r5
   1488c:	strh	r0, [r5, #56]	; 0x38
   14890:	b	1468c <__assert_fail@plt+0x335c>
   14894:	tst	r3, #1
   14898:	bne	145c8 <__assert_fail@plt+0x3298>
   1489c:	ldr	r3, [pc, #732]	; 14b80 <__assert_fail@plt+0x3850>
   148a0:	mvn	r2, #0
   148a4:	ldr	r1, [r4, #4]
   148a8:	mov	r0, r8
   148ac:	bl	132f4 <__assert_fail@plt+0x1fc4>
   148b0:	cmp	r0, #0
   148b4:	beq	145c8 <__assert_fail@plt+0x3298>
   148b8:	bl	111ec <__errno_location@plt>
   148bc:	ldr	r3, [r8, #48]	; 0x30
   148c0:	orr	r3, r3, #8192	; 0x2000
   148c4:	ldr	r2, [r0]
   148c8:	str	r2, [r4, #32]
   148cc:	str	r3, [r8, #48]	; 0x30
   148d0:	b	145cc <__assert_fail@plt+0x329c>
   148d4:	mov	r0, r8
   148d8:	bl	1301c <__assert_fail@plt+0x1cec>
   148dc:	cmp	r0, #0
   148e0:	bne	148b8 <__assert_fail@plt+0x3588>
   148e4:	b	145c8 <__assert_fail@plt+0x3298>
   148e8:	ldr	r4, [r8, #4]
   148ec:	mov	r3, #0
   148f0:	str	r3, [r8, #4]
   148f4:	b	14798 <__assert_fail@plt+0x3468>
   148f8:	tst	r3, #512	; 0x200
   148fc:	beq	14a8c <__assert_fail@plt+0x375c>
   14900:	mov	r2, #1
   14904:	ldr	r1, [r4, #36]	; 0x24
   14908:	mov	r0, r8
   1490c:	bl	12f9c <__assert_fail@plt+0x1c6c>
   14910:	b	145c0 <__assert_fail@plt+0x3290>
   14914:	mov	r3, #1
   14918:	mov	r2, r5
   1491c:	ldr	r0, [r8, #32]
   14920:	bl	1306c <__assert_fail@plt+0x1d3c>
   14924:	cmp	r0, #1
   14928:	mov	r3, r0
   1492c:	strh	r0, [r5, #56]	; 0x38
   14930:	beq	14acc <__assert_fail@plt+0x379c>
   14934:	cmp	r0, #11
   14938:	mov	r4, r5
   1493c:	str	r5, [r8]
   14940:	bne	1468c <__assert_fail@plt+0x335c>
   14944:	b	147e8 <__assert_fail@plt+0x34b8>
   14948:	mov	r0, r4
   1494c:	bl	12ba4 <__assert_fail@plt+0x1874>
   14950:	bl	111ec <__errno_location@plt>
   14954:	mov	r3, #0
   14958:	mov	r4, r3
   1495c:	str	r3, [r0]
   14960:	str	r3, [r8]
   14964:	b	1468c <__assert_fail@plt+0x335c>
   14968:	bl	12ba4 <__assert_fail@plt+0x1874>
   1496c:	b	146c8 <__assert_fail@plt+0x3398>
   14970:	bic	r1, r1, #4096	; 0x1000
   14974:	str	r1, [r8, #48]	; 0x30
   14978:	bl	12e20 <__assert_fail@plt+0x1af0>
   1497c:	mov	r3, #0
   14980:	str	r3, [r8, #4]
   14984:	mov	r1, #3
   14988:	mov	r0, r8
   1498c:	bl	13638 <__assert_fail@plt+0x2308>
   14990:	cmp	r0, #0
   14994:	mov	r4, r0
   14998:	str	r0, [r8, #4]
   1499c:	bne	148ec <__assert_fail@plt+0x35bc>
   149a0:	ldr	r0, [r8, #48]	; 0x30
   149a4:	tst	r0, #8192	; 0x2000
   149a8:	bne	14610 <__assert_fail@plt+0x32e0>
   149ac:	ldr	r3, [r5, #32]
   149b0:	cmp	r3, #0
   149b4:	beq	149c8 <__assert_fail@plt+0x3698>
   149b8:	ldrh	r3, [r5, #56]	; 0x38
   149bc:	cmp	r3, #4
   149c0:	movne	r3, #7
   149c4:	strhne	r3, [r5, #56]	; 0x38
   149c8:	add	r1, r8, #56	; 0x38
   149cc:	mov	r2, r5
   149d0:	bl	13580 <__assert_fail@plt+0x2250>
   149d4:	mov	r4, r5
   149d8:	b	1468c <__assert_fail@plt+0x335c>
   149dc:	ldrb	r3, [r4, #169]	; 0xa9
   149e0:	cmp	r3, #0
   149e4:	bne	14700 <__assert_fail@plt+0x33d0>
   149e8:	b	14724 <__assert_fail@plt+0x33f4>
   149ec:	ldr	r3, [r8, #48]	; 0x30
   149f0:	mov	r4, r5
   149f4:	orr	r3, r3, #8192	; 0x2000
   149f8:	str	r3, [r8, #48]	; 0x30
   149fc:	b	1468c <__assert_fail@plt+0x335c>
   14a00:	ldr	r0, [r5, #36]	; 0x24
   14a04:	bl	112f4 <close@plt>
   14a08:	b	14658 <__assert_fail@plt+0x3328>
   14a0c:	ldr	r3, [r4, #40]	; 0x28
   14a10:	ldr	r2, [r8, #24]
   14a14:	mov	r0, #0
   14a18:	str	r4, [r8]
   14a1c:	mov	r1, #3
   14a20:	strb	r0, [r2, r3]
   14a24:	mov	r0, r8
   14a28:	bl	13638 <__assert_fail@plt+0x2308>
   14a2c:	subs	r4, r0, #0
   14a30:	beq	14ab8 <__assert_fail@plt+0x3788>
   14a34:	mov	r0, r5
   14a38:	bl	12ba4 <__assert_fail@plt+0x1874>
   14a3c:	b	14798 <__assert_fail@plt+0x3468>
   14a40:	mov	r3, #1
   14a44:	mov	r2, r4
   14a48:	ldr	r1, [r8, #48]	; 0x30
   14a4c:	ldr	r0, [r8, #32]
   14a50:	bl	1306c <__assert_fail@plt+0x1d3c>
   14a54:	cmp	r0, #1
   14a58:	strh	r0, [r4, #56]	; 0x38
   14a5c:	beq	14ae4 <__assert_fail@plt+0x37b4>
   14a60:	mov	r3, #3
   14a64:	strh	r3, [r4, #60]	; 0x3c
   14a68:	b	14798 <__assert_fail@plt+0x3468>
   14a6c:	mov	r3, #0
   14a70:	mov	r2, r4
   14a74:	ldr	r1, [r8, #48]	; 0x30
   14a78:	ldr	r0, [r8, #32]
   14a7c:	bl	1306c <__assert_fail@plt+0x1d3c>
   14a80:	mov	r3, r0
   14a84:	strh	r0, [r4, #56]	; 0x38
   14a88:	b	1474c <__assert_fail@plt+0x341c>
   14a8c:	ldr	r0, [r4, #36]	; 0x24
   14a90:	bl	112a0 <fchdir@plt>
   14a94:	cmp	r0, #0
   14a98:	beq	145c0 <__assert_fail@plt+0x3290>
   14a9c:	bl	111ec <__errno_location@plt>
   14aa0:	ldr	r3, [r8, #48]	; 0x30
   14aa4:	orr	r3, r3, #8192	; 0x2000
   14aa8:	ldr	r2, [r0]
   14aac:	str	r2, [r4, #32]
   14ab0:	str	r3, [r8, #48]	; 0x30
   14ab4:	b	145c0 <__assert_fail@plt+0x3290>
   14ab8:	ldr	r3, [r8, #48]	; 0x30
   14abc:	tst	r3, #8192	; 0x2000
   14ac0:	bne	14610 <__assert_fail@plt+0x32e0>
   14ac4:	ldr	r4, [r5, #4]
   14ac8:	b	14568 <__assert_fail@plt+0x3238>
   14acc:	ldr	r1, [r8, #48]	; 0x30
   14ad0:	tst	r1, #4
   14ad4:	beq	14b18 <__assert_fail@plt+0x37e8>
   14ad8:	str	r5, [r8]
   14adc:	mov	r4, r5
   14ae0:	b	1474c <__assert_fail@plt+0x341c>
   14ae4:	ldr	r1, [r8, #48]	; 0x30
   14ae8:	tst	r1, #4
   14aec:	bne	14a60 <__assert_fail@plt+0x3730>
   14af0:	ldr	r2, [pc, #140]	; 14b84 <__assert_fail@plt+0x3854>
   14af4:	ldr	r0, [r8, #32]
   14af8:	bl	132b8 <__assert_fail@plt+0x1f88>
   14afc:	cmp	r0, #0
   14b00:	str	r0, [r4, #36]	; 0x24
   14b04:	blt	14b48 <__assert_fail@plt+0x3818>
   14b08:	ldrh	r3, [r4, #58]	; 0x3a
   14b0c:	orr	r3, r3, #2
   14b10:	strh	r3, [r4, #58]	; 0x3a
   14b14:	b	14a60 <__assert_fail@plt+0x3730>
   14b18:	ldr	r2, [pc, #100]	; 14b84 <__assert_fail@plt+0x3854>
   14b1c:	ldr	r0, [r8, #32]
   14b20:	bl	132b8 <__assert_fail@plt+0x1f88>
   14b24:	cmp	r0, #0
   14b28:	str	r0, [r5, #36]	; 0x24
   14b2c:	blt	14b60 <__assert_fail@plt+0x3830>
   14b30:	ldrh	r2, [r5, #58]	; 0x3a
   14b34:	ldrh	r3, [r5, #56]	; 0x38
   14b38:	mov	r4, r5
   14b3c:	orr	r2, r2, #2
   14b40:	strh	r2, [r5, #58]	; 0x3a
   14b44:	b	14740 <__assert_fail@plt+0x3410>
   14b48:	bl	111ec <__errno_location@plt>
   14b4c:	mov	r2, #7
   14b50:	ldr	r3, [r0]
   14b54:	strh	r2, [r4, #56]	; 0x38
   14b58:	str	r3, [r4, #32]
   14b5c:	b	14a60 <__assert_fail@plt+0x3730>
   14b60:	bl	111ec <__errno_location@plt>
   14b64:	mov	r2, #7
   14b68:	mov	r3, r2
   14b6c:	ldr	r1, [r0]
   14b70:	strh	r2, [r5, #56]	; 0x38
   14b74:	str	r1, [r5, #32]
   14b78:	b	14ad8 <__assert_fail@plt+0x37a8>
   14b7c:	andeq	r0, r0, r2, lsl #2
   14b80:	andeq	sl, r1, r8, asr #24
   14b84:	andeq	sl, r1, ip, asr #24
   14b88:	cmp	r2, #4
   14b8c:	bhi	14ba0 <__assert_fail@plt+0x3870>
   14b90:	mov	r3, #0
   14b94:	strh	r2, [r1, #60]	; 0x3c
   14b98:	mov	r0, r3
   14b9c:	bx	lr
   14ba0:	push	{r4, lr}
   14ba4:	bl	111ec <__errno_location@plt>
   14ba8:	mov	r2, #22
   14bac:	mov	r3, #1
   14bb0:	str	r2, [r0]
   14bb4:	mov	r0, r3
   14bb8:	pop	{r4, pc}
   14bbc:	push	{r4, r5, r6, r7, r8, lr}
   14bc0:	bics	r8, r1, #4096	; 0x1000
   14bc4:	bne	14cc4 <__assert_fail@plt+0x3994>
   14bc8:	mov	r5, r0
   14bcc:	mov	r4, r1
   14bd0:	bl	111ec <__errno_location@plt>
   14bd4:	ldr	r6, [r5]
   14bd8:	str	r8, [r0]
   14bdc:	ldr	r3, [r5, #48]	; 0x30
   14be0:	mov	r7, r0
   14be4:	ands	r3, r3, #8192	; 0x2000
   14be8:	bne	14cdc <__assert_fail@plt+0x39ac>
   14bec:	ldrh	r2, [r6, #56]	; 0x38
   14bf0:	cmp	r2, #9
   14bf4:	ldreq	r3, [r6, #8]
   14bf8:	beq	14c68 <__assert_fail@plt+0x3938>
   14bfc:	cmp	r2, #1
   14c00:	bne	14c68 <__assert_fail@plt+0x3938>
   14c04:	ldr	r0, [r5, #4]
   14c08:	cmp	r0, #0
   14c0c:	beq	14c14 <__assert_fail@plt+0x38e4>
   14c10:	bl	12e20 <__assert_fail@plt+0x1af0>
   14c14:	cmp	r4, #4096	; 0x1000
   14c18:	moveq	r8, #2
   14c1c:	ldreq	r3, [r5, #48]	; 0x30
   14c20:	movne	r8, #1
   14c24:	orreq	r3, r3, #4096	; 0x1000
   14c28:	streq	r3, [r5, #48]	; 0x30
   14c2c:	ldr	r3, [r6, #48]	; 0x30
   14c30:	cmp	r3, #0
   14c34:	bne	14c54 <__assert_fail@plt+0x3924>
   14c38:	ldr	r3, [r6, #24]
   14c3c:	ldrb	r3, [r3]
   14c40:	cmp	r3, #47	; 0x2f
   14c44:	beq	14c54 <__assert_fail@plt+0x3924>
   14c48:	ldr	r1, [r5, #48]	; 0x30
   14c4c:	ands	r4, r1, #4
   14c50:	beq	14c70 <__assert_fail@plt+0x3940>
   14c54:	mov	r1, r8
   14c58:	mov	r0, r5
   14c5c:	bl	13638 <__assert_fail@plt+0x2308>
   14c60:	mov	r3, r0
   14c64:	str	r0, [r5, #4]
   14c68:	mov	r0, r3
   14c6c:	pop	{r4, r5, r6, r7, r8, pc}
   14c70:	ldr	r2, [pc, #160]	; 14d18 <__assert_fail@plt+0x39e8>
   14c74:	ldr	r0, [r5, #32]
   14c78:	bl	132b8 <__assert_fail@plt+0x1f88>
   14c7c:	subs	r6, r0, #0
   14c80:	strlt	r4, [r5, #4]
   14c84:	movlt	r3, r4
   14c88:	blt	14c68 <__assert_fail@plt+0x3938>
   14c8c:	mov	r1, r8
   14c90:	mov	r0, r5
   14c94:	bl	13638 <__assert_fail@plt+0x2308>
   14c98:	ldr	r3, [r5, #48]	; 0x30
   14c9c:	ands	r4, r3, #512	; 0x200
   14ca0:	str	r0, [r5, #4]
   14ca4:	beq	14ce4 <__assert_fail@plt+0x39b4>
   14ca8:	mov	r1, r6
   14cac:	mov	r2, #1
   14cb0:	mov	r0, r5
   14cb4:	bl	12f9c <__assert_fail@plt+0x1c6c>
   14cb8:	ldr	r3, [r5, #4]
   14cbc:	mov	r0, r3
   14cc0:	pop	{r4, r5, r6, r7, r8, pc}
   14cc4:	bl	111ec <__errno_location@plt>
   14cc8:	mov	r2, #22
   14ccc:	mov	r3, #0
   14cd0:	str	r2, [r0]
   14cd4:	mov	r0, r3
   14cd8:	pop	{r4, r5, r6, r7, r8, pc}
   14cdc:	mov	r3, r8
   14ce0:	b	14c68 <__assert_fail@plt+0x3938>
   14ce4:	mov	r0, r6
   14ce8:	bl	112a0 <fchdir@plt>
   14cec:	cmp	r0, #0
   14cf0:	bne	14d00 <__assert_fail@plt+0x39d0>
   14cf4:	mov	r0, r6
   14cf8:	bl	112f4 <close@plt>
   14cfc:	b	14cb8 <__assert_fail@plt+0x3988>
   14d00:	ldr	r5, [r7]
   14d04:	mov	r0, r6
   14d08:	bl	112f4 <close@plt>
   14d0c:	str	r5, [r7]
   14d10:	mov	r3, r4
   14d14:	b	14c68 <__assert_fail@plt+0x3938>
   14d18:	andeq	sl, r1, ip, asr #24
   14d1c:	andeq	r0, r0, r0
   14d20:	cmp	r0, #10
   14d24:	movcc	r0, #10
   14d28:	push	{r4, r5, r6, r7, r8, lr}
   14d2c:	orr	r7, r0, #1
   14d30:	cmn	r7, #1
   14d34:	ldrne	r8, [pc, #132]	; 14dc0 <__assert_fail@plt+0x3a90>
   14d38:	beq	14db0 <__assert_fail@plt+0x3a80>
   14d3c:	cmp	r7, #9
   14d40:	bls	14db8 <__assert_fail@plt+0x3a88>
   14d44:	umull	r2, r3, r8, r7
   14d48:	lsr	r3, r3, #1
   14d4c:	add	r3, r3, r3, lsl #1
   14d50:	cmp	r7, r3
   14d54:	beq	14da4 <__assert_fail@plt+0x3a74>
   14d58:	mov	r6, #16
   14d5c:	mov	r5, #9
   14d60:	mov	r4, #3
   14d64:	b	14d78 <__assert_fail@plt+0x3a48>
   14d68:	bl	19900 <__assert_fail@plt+0x85d0>
   14d6c:	add	r6, r6, #8
   14d70:	cmp	r1, #0
   14d74:	beq	14da4 <__assert_fail@plt+0x3a74>
   14d78:	add	r5, r5, r6
   14d7c:	add	r4, r4, #2
   14d80:	cmp	r5, r7
   14d84:	mov	r0, r7
   14d88:	mov	r1, r4
   14d8c:	bcc	14d68 <__assert_fail@plt+0x3a38>
   14d90:	mov	r1, r4
   14d94:	mov	r0, r7
   14d98:	bl	19900 <__assert_fail@plt+0x85d0>
   14d9c:	cmp	r1, #0
   14da0:	bne	14db0 <__assert_fail@plt+0x3a80>
   14da4:	add	r7, r7, #2
   14da8:	cmn	r7, #1
   14dac:	bne	14d3c <__assert_fail@plt+0x3a0c>
   14db0:	mov	r0, r7
   14db4:	pop	{r4, r5, r6, r7, r8, pc}
   14db8:	mov	r4, #3
   14dbc:	b	14d90 <__assert_fail@plt+0x3a60>
   14dc0:	bge	feabf874 <optarg@@GLIBC_2.4+0xfea936dc>
   14dc4:	push	{r4, lr}
   14dc8:	ror	r0, r0, #3
   14dcc:	bl	19900 <__assert_fail@plt+0x85d0>
   14dd0:	mov	r0, r1
   14dd4:	pop	{r4, pc}
   14dd8:	sub	r0, r1, r0
   14ddc:	clz	r0, r0
   14de0:	lsr	r0, r0, #5
   14de4:	bx	lr
   14de8:	push	{r4, lr}
   14dec:	mov	r4, r0
   14df0:	mov	r0, r1
   14df4:	ldr	r3, [r4, #24]
   14df8:	ldr	r1, [r4, #8]
   14dfc:	blx	r3
   14e00:	ldr	r3, [r4, #8]
   14e04:	cmp	r0, r3
   14e08:	bcs	14e18 <__assert_fail@plt+0x3ae8>
   14e0c:	ldr	r3, [r4]
   14e10:	add	r0, r3, r0, lsl #3
   14e14:	pop	{r4, pc}
   14e18:	bl	112e8 <abort@plt>
   14e1c:	push	{r4, r5, r6, r7, r8, lr}
   14e20:	mov	r7, r2
   14e24:	mov	r8, r3
   14e28:	mov	r6, r0
   14e2c:	mov	r5, r1
   14e30:	bl	14de8 <__assert_fail@plt+0x3ab8>
   14e34:	str	r0, [r7]
   14e38:	ldr	r3, [r0]
   14e3c:	cmp	r3, #0
   14e40:	beq	14ed8 <__assert_fail@plt+0x3ba8>
   14e44:	cmp	r5, r3
   14e48:	mov	r4, r0
   14e4c:	beq	14e6c <__assert_fail@plt+0x3b3c>
   14e50:	mov	r1, r3
   14e54:	mov	r0, r5
   14e58:	ldr	r3, [r6, #28]
   14e5c:	blx	r3
   14e60:	cmp	r0, #0
   14e64:	beq	14ecc <__assert_fail@plt+0x3b9c>
   14e68:	ldr	r3, [r4]
   14e6c:	cmp	r8, #0
   14e70:	beq	14e9c <__assert_fail@plt+0x3b6c>
   14e74:	ldr	r2, [r4, #4]
   14e78:	cmp	r2, #0
   14e7c:	movne	ip, #0
   14e80:	ldmne	r2, {r0, r1}
   14e84:	streq	r2, [r4]
   14e88:	stmne	r4, {r0, r1}
   14e8c:	strne	ip, [r2]
   14e90:	ldrne	r1, [r6, #36]	; 0x24
   14e94:	strne	r1, [r2, #4]
   14e98:	strne	r2, [r6, #36]	; 0x24
   14e9c:	mov	r0, r3
   14ea0:	pop	{r4, r5, r6, r7, r8, pc}
   14ea4:	ldr	r3, [r2]
   14ea8:	cmp	r5, r3
   14eac:	beq	14eec <__assert_fail@plt+0x3bbc>
   14eb0:	mov	r1, r3
   14eb4:	mov	r0, r5
   14eb8:	ldr	r3, [r6, #28]
   14ebc:	blx	r3
   14ec0:	cmp	r0, #0
   14ec4:	bne	14ee4 <__assert_fail@plt+0x3bb4>
   14ec8:	ldr	r4, [r4, #4]
   14ecc:	ldr	r2, [r4, #4]
   14ed0:	cmp	r2, #0
   14ed4:	bne	14ea4 <__assert_fail@plt+0x3b74>
   14ed8:	mov	r3, #0
   14edc:	mov	r0, r3
   14ee0:	pop	{r4, r5, r6, r7, r8, pc}
   14ee4:	ldr	r2, [r4, #4]
   14ee8:	ldr	r3, [r2]
   14eec:	cmp	r8, #0
   14ef0:	beq	14e9c <__assert_fail@plt+0x3b6c>
   14ef4:	ldr	r0, [r2, #4]
   14ef8:	mov	r1, #0
   14efc:	str	r0, [r4, #4]
   14f00:	str	r1, [r2]
   14f04:	ldr	r1, [r6, #36]	; 0x24
   14f08:	mov	r0, r3
   14f0c:	str	r1, [r2, #4]
   14f10:	str	r2, [r6, #36]	; 0x24
   14f14:	pop	{r4, r5, r6, r7, r8, pc}
   14f18:	ldr	r2, [pc, #164]	; 14fc4 <__assert_fail@plt+0x3c94>
   14f1c:	ldr	r3, [r0]
   14f20:	cmp	r3, r2
   14f24:	beq	14fac <__assert_fail@plt+0x3c7c>
   14f28:	vldr	s15, [r3, #8]
   14f2c:	vldr	s14, [pc, #128]	; 14fb4 <__assert_fail@plt+0x3c84>
   14f30:	vcmpe.f32	s15, s14
   14f34:	vmrs	APSR_nzcv, fpscr
   14f38:	ble	14fa0 <__assert_fail@plt+0x3c70>
   14f3c:	vldr	s13, [pc, #116]	; 14fb8 <__assert_fail@plt+0x3c88>
   14f40:	vcmpe.f32	s15, s13
   14f44:	vmrs	APSR_nzcv, fpscr
   14f48:	bpl	14fa0 <__assert_fail@plt+0x3c70>
   14f4c:	vldr	s13, [pc, #104]	; 14fbc <__assert_fail@plt+0x3c8c>
   14f50:	vldr	s12, [r3, #12]
   14f54:	vcmpe.f32	s12, s13
   14f58:	vmrs	APSR_nzcv, fpscr
   14f5c:	ble	14fa0 <__assert_fail@plt+0x3c70>
   14f60:	vldr	s13, [r3]
   14f64:	vcmpe.f32	s13, #0.0
   14f68:	vmrs	APSR_nzcv, fpscr
   14f6c:	blt	14fa0 <__assert_fail@plt+0x3c70>
   14f70:	vadd.f32	s14, s13, s14
   14f74:	vldr	s13, [r3, #4]
   14f78:	vcmpe.f32	s14, s13
   14f7c:	vmrs	APSR_nzcv, fpscr
   14f80:	bpl	14fa0 <__assert_fail@plt+0x3c70>
   14f84:	vldr	s12, [pc, #52]	; 14fc0 <__assert_fail@plt+0x3c90>
   14f88:	vcmpe.f32	s13, s12
   14f8c:	vmrs	APSR_nzcv, fpscr
   14f90:	bhi	14fa0 <__assert_fail@plt+0x3c70>
   14f94:	vcmpe.f32	s15, s14
   14f98:	vmrs	APSR_nzcv, fpscr
   14f9c:	bgt	14fac <__assert_fail@plt+0x3c7c>
   14fa0:	str	r2, [r0]
   14fa4:	mov	r0, #0
   14fa8:	bx	lr
   14fac:	mov	r0, #1
   14fb0:	bx	lr
   14fb4:	stclcc	12, cr12, [ip, #820]	; 0x334
   14fb8:	svccc	0x00666666
   14fbc:	svccc	0x008ccccd
   14fc0:	svccc	0x00800000
   14fc4:	andeq	sl, r1, r0, asr ip
   14fc8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fcc:	ldm	r1, {r6, ip}
   14fd0:	cmp	r6, ip
   14fd4:	bcs	15090 <__assert_fail@plt+0x3d60>
   14fd8:	mov	sl, r2
   14fdc:	mov	r5, r0
   14fe0:	mov	r8, r1
   14fe4:	add	r6, r6, #8
   14fe8:	mov	r9, #0
   14fec:	ldr	fp, [r6, #-8]
   14ff0:	mov	r7, r6
   14ff4:	cmp	fp, #0
   14ff8:	beq	15084 <__assert_fail@plt+0x3d54>
   14ffc:	ldr	r4, [r6, #-4]
   15000:	cmp	r4, #0
   15004:	bne	15024 <__assert_fail@plt+0x3cf4>
   15008:	b	15074 <__assert_fail@plt+0x3d44>
   1500c:	ldr	r3, [r0, #4]
   15010:	cmp	r2, #0
   15014:	str	r3, [r4, #4]
   15018:	str	r4, [r0, #4]
   1501c:	mov	r4, r2
   15020:	beq	15070 <__assert_fail@plt+0x3d40>
   15024:	ldr	fp, [r4]
   15028:	mov	r0, r5
   1502c:	mov	r1, fp
   15030:	bl	14de8 <__assert_fail@plt+0x3ab8>
   15034:	ldr	r2, [r4, #4]
   15038:	ldr	r1, [r0]
   1503c:	cmp	r1, #0
   15040:	bne	1500c <__assert_fail@plt+0x3cdc>
   15044:	ldr	ip, [r5, #12]
   15048:	str	fp, [r0]
   1504c:	add	r3, ip, #1
   15050:	str	r3, [r5, #12]
   15054:	str	r1, [r4]
   15058:	ldr	r3, [r5, #36]	; 0x24
   1505c:	cmp	r2, #0
   15060:	str	r3, [r4, #4]
   15064:	str	r4, [r5, #36]	; 0x24
   15068:	mov	r4, r2
   1506c:	bne	15024 <__assert_fail@plt+0x3cf4>
   15070:	ldr	fp, [r6, #-8]
   15074:	cmp	sl, #0
   15078:	str	r9, [r6, #-4]
   1507c:	beq	15098 <__assert_fail@plt+0x3d68>
   15080:	ldr	ip, [r8, #4]
   15084:	cmp	ip, r7
   15088:	add	r6, r6, #8
   1508c:	bhi	14fec <__assert_fail@plt+0x3cbc>
   15090:	mov	r0, #1
   15094:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15098:	mov	r1, fp
   1509c:	mov	r0, r5
   150a0:	bl	14de8 <__assert_fail@plt+0x3ab8>
   150a4:	ldr	r2, [r0]
   150a8:	mov	r4, r0
   150ac:	cmp	r2, #0
   150b0:	beq	150fc <__assert_fail@plt+0x3dcc>
   150b4:	ldr	r0, [r5, #36]	; 0x24
   150b8:	cmp	r0, #0
   150bc:	beq	15110 <__assert_fail@plt+0x3de0>
   150c0:	ldr	r2, [r0, #4]
   150c4:	str	r2, [r5, #36]	; 0x24
   150c8:	ldr	r2, [r4, #4]
   150cc:	str	fp, [r0]
   150d0:	str	r2, [r0, #4]
   150d4:	str	r0, [r4, #4]
   150d8:	str	r9, [r6, #-8]
   150dc:	ldr	r3, [r8, #12]
   150e0:	ldr	ip, [r8, #4]
   150e4:	sub	r3, r3, #1
   150e8:	cmp	ip, r7
   150ec:	str	r3, [r8, #12]
   150f0:	add	r6, r6, #8
   150f4:	bhi	14fec <__assert_fail@plt+0x3cbc>
   150f8:	b	15090 <__assert_fail@plt+0x3d60>
   150fc:	ldr	r2, [r5, #12]
   15100:	str	fp, [r0]
   15104:	add	r3, r2, #1
   15108:	str	r3, [r5, #12]
   1510c:	b	150d8 <__assert_fail@plt+0x3da8>
   15110:	mov	r0, #8
   15114:	bl	18fa0 <__assert_fail@plt+0x7c70>
   15118:	cmp	r0, #0
   1511c:	bne	150c8 <__assert_fail@plt+0x3d98>
   15120:	mov	r0, sl
   15124:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15128:	ldr	r0, [r0, #8]
   1512c:	bx	lr
   15130:	ldr	r0, [r0, #12]
   15134:	bx	lr
   15138:	ldr	r0, [r0, #16]
   1513c:	bx	lr
   15140:	ldm	r0, {r1, ip}
   15144:	mov	r0, #0
   15148:	cmp	r1, ip
   1514c:	bcs	15194 <__assert_fail@plt+0x3e64>
   15150:	ldr	r3, [r1]
   15154:	cmp	r3, #0
   15158:	beq	15184 <__assert_fail@plt+0x3e54>
   1515c:	ldr	r3, [r1, #4]
   15160:	mov	r2, #1
   15164:	cmp	r3, #0
   15168:	beq	1517c <__assert_fail@plt+0x3e4c>
   1516c:	ldr	r3, [r3, #4]
   15170:	add	r2, r2, #1
   15174:	cmp	r3, #0
   15178:	bne	1516c <__assert_fail@plt+0x3e3c>
   1517c:	cmp	r0, r2
   15180:	movcc	r0, r2
   15184:	add	r1, r1, #8
   15188:	cmp	r1, ip
   1518c:	bcc	15150 <__assert_fail@plt+0x3e20>
   15190:	bx	lr
   15194:	bx	lr
   15198:	push	{lr}		; (str lr, [sp, #-4]!)
   1519c:	mov	r2, #0
   151a0:	ldm	r0, {r1, lr}
   151a4:	mov	ip, r2
   151a8:	cmp	r1, lr
   151ac:	bcs	151ec <__assert_fail@plt+0x3ebc>
   151b0:	ldr	r3, [r1]
   151b4:	cmp	r3, #0
   151b8:	beq	151e0 <__assert_fail@plt+0x3eb0>
   151bc:	ldr	r3, [r1, #4]
   151c0:	add	ip, ip, #1
   151c4:	cmp	r3, #0
   151c8:	add	r2, r2, #1
   151cc:	beq	151e0 <__assert_fail@plt+0x3eb0>
   151d0:	ldr	r3, [r3, #4]
   151d4:	add	r2, r2, #1
   151d8:	cmp	r3, #0
   151dc:	bne	151d0 <__assert_fail@plt+0x3ea0>
   151e0:	add	r1, r1, #8
   151e4:	cmp	r1, lr
   151e8:	bcc	151b0 <__assert_fail@plt+0x3e80>
   151ec:	ldr	r3, [r0, #12]
   151f0:	cmp	r3, ip
   151f4:	ldreq	r0, [r0, #16]
   151f8:	subeq	r0, r0, r2
   151fc:	clzeq	r0, r0
   15200:	lsreq	r0, r0, #5
   15204:	movne	r0, #0
   15208:	pop	{pc}		; (ldr pc, [sp], #4)
   1520c:	push	{r4, r5, r6, r7, lr}
   15210:	mov	r5, r1
   15214:	ldm	r0, {ip, lr}
   15218:	sub	sp, sp, #12
   1521c:	ldr	r3, [r0, #16]
   15220:	cmp	ip, lr
   15224:	mov	r4, #0
   15228:	ldr	r6, [r0, #8]
   1522c:	ldr	r7, [r0, #12]
   15230:	bcs	15274 <__assert_fail@plt+0x3f44>
   15234:	ldr	r2, [ip]
   15238:	cmp	r2, #0
   1523c:	beq	15268 <__assert_fail@plt+0x3f38>
   15240:	ldr	r2, [ip, #4]
   15244:	mov	r1, #1
   15248:	cmp	r2, #0
   1524c:	beq	15260 <__assert_fail@plt+0x3f30>
   15250:	ldr	r2, [r2, #4]
   15254:	add	r1, r1, #1
   15258:	cmp	r2, #0
   1525c:	bne	15250 <__assert_fail@plt+0x3f20>
   15260:	cmp	r4, r1
   15264:	movcc	r4, r1
   15268:	add	ip, ip, #8
   1526c:	cmp	ip, lr
   15270:	bcc	15234 <__assert_fail@plt+0x3f04>
   15274:	ldr	r2, [pc, #116]	; 152f0 <__assert_fail@plt+0x3fc0>
   15278:	mov	r1, #1
   1527c:	mov	r0, r5
   15280:	bl	11228 <__fprintf_chk@plt>
   15284:	mov	r3, r6
   15288:	ldr	r2, [pc, #100]	; 152f4 <__assert_fail@plt+0x3fc4>
   1528c:	mov	r1, #1
   15290:	mov	r0, r5
   15294:	bl	11228 <__fprintf_chk@plt>
   15298:	vmov	s15, r7
   1529c:	vldr	d5, [pc, #68]	; 152e8 <__assert_fail@plt+0x3fb8>
   152a0:	mov	r3, r7
   152a4:	ldr	r2, [pc, #76]	; 152f8 <__assert_fail@plt+0x3fc8>
   152a8:	vcvt.f64.u32	d6, s15
   152ac:	vmov	s15, r6
   152b0:	mov	r1, #1
   152b4:	mov	r0, r5
   152b8:	vcvt.f64.u32	d7, s15
   152bc:	vmul.f64	d6, d6, d5
   152c0:	vdiv.f64	d5, d6, d7
   152c4:	vstr	d5, [sp]
   152c8:	bl	11228 <__fprintf_chk@plt>
   152cc:	mov	r3, r4
   152d0:	mov	r0, r5
   152d4:	ldr	r2, [pc, #32]	; 152fc <__assert_fail@plt+0x3fcc>
   152d8:	mov	r1, #1
   152dc:	add	sp, sp, #12
   152e0:	pop	{r4, r5, r6, r7, lr}
   152e4:	b	11228 <__fprintf_chk@plt>
   152e8:	andeq	r0, r0, r0
   152ec:	subsmi	r0, r9, r0
   152f0:	andeq	sl, r1, r4, ror #24
   152f4:	andeq	sl, r1, ip, ror ip
   152f8:	muleq	r1, r4, ip
   152fc:			; <UNDEFINED> instruction: 0x0001acb8
   15300:	push	{r4, r5, r6, lr}
   15304:	mov	r6, r0
   15308:	mov	r5, r1
   1530c:	bl	14de8 <__assert_fail@plt+0x3ab8>
   15310:	ldr	r3, [r0]
   15314:	cmp	r3, #0
   15318:	movne	r4, r0
   1531c:	bne	15328 <__assert_fail@plt+0x3ff8>
   15320:	b	15354 <__assert_fail@plt+0x4024>
   15324:	ldr	r3, [r4]
   15328:	cmp	r5, r3
   1532c:	mov	r1, r3
   15330:	mov	r0, r5
   15334:	beq	1535c <__assert_fail@plt+0x402c>
   15338:	ldr	r3, [r6, #28]
   1533c:	blx	r3
   15340:	cmp	r0, #0
   15344:	bne	15364 <__assert_fail@plt+0x4034>
   15348:	ldr	r4, [r4, #4]
   1534c:	cmp	r4, #0
   15350:	bne	15324 <__assert_fail@plt+0x3ff4>
   15354:	mov	r0, #0
   15358:	pop	{r4, r5, r6, pc}
   1535c:	mov	r0, r5
   15360:	pop	{r4, r5, r6, pc}
   15364:	ldr	r0, [r4]
   15368:	pop	{r4, r5, r6, pc}
   1536c:	ldr	r3, [r0, #16]
   15370:	cmp	r3, #0
   15374:	beq	153a8 <__assert_fail@plt+0x4078>
   15378:	ldr	r3, [r0]
   1537c:	ldr	r2, [r0, #4]
   15380:	cmp	r3, r2
   15384:	bcc	15398 <__assert_fail@plt+0x4068>
   15388:	b	153b0 <__assert_fail@plt+0x4080>
   1538c:	add	r3, r3, #8
   15390:	cmp	r3, r2
   15394:	bcs	153b0 <__assert_fail@plt+0x4080>
   15398:	ldr	r0, [r3]
   1539c:	cmp	r0, #0
   153a0:	beq	1538c <__assert_fail@plt+0x405c>
   153a4:	bx	lr
   153a8:	mov	r0, r3
   153ac:	bx	lr
   153b0:	push	{r4, lr}
   153b4:	bl	112e8 <abort@plt>
   153b8:	push	{r4, r5, r6, lr}
   153bc:	mov	r5, r0
   153c0:	mov	r4, r1
   153c4:	bl	14de8 <__assert_fail@plt+0x3ab8>
   153c8:	mov	r2, r0
   153cc:	mov	r3, r0
   153d0:	b	153dc <__assert_fail@plt+0x40ac>
   153d4:	cmp	r3, #0
   153d8:	beq	153f0 <__assert_fail@plt+0x40c0>
   153dc:	ldm	r3, {r1, r3}
   153e0:	cmp	r4, r1
   153e4:	bne	153d4 <__assert_fail@plt+0x40a4>
   153e8:	cmp	r3, #0
   153ec:	bne	15418 <__assert_fail@plt+0x40e8>
   153f0:	ldr	r3, [r5, #4]
   153f4:	b	15404 <__assert_fail@plt+0x40d4>
   153f8:	ldr	r0, [r2]
   153fc:	cmp	r0, #0
   15400:	popne	{r4, r5, r6, pc}
   15404:	add	r2, r2, #8
   15408:	cmp	r2, r3
   1540c:	bcc	153f8 <__assert_fail@plt+0x40c8>
   15410:	mov	r0, #0
   15414:	pop	{r4, r5, r6, pc}
   15418:	ldr	r0, [r3]
   1541c:	pop	{r4, r5, r6, pc}
   15420:	push	{r4, r5, r6, lr}
   15424:	ldm	r0, {r5, lr}
   15428:	cmp	r5, lr
   1542c:	bcs	154b0 <__assert_fail@plt+0x4180>
   15430:	add	r5, r5, #8
   15434:	mov	ip, #0
   15438:	ldr	r3, [r5, #-8]
   1543c:	mov	r6, r5
   15440:	cmp	r3, #0
   15444:	beq	15490 <__assert_fail@plt+0x4160>
   15448:	cmp	r2, ip
   1544c:	bls	1549c <__assert_fail@plt+0x416c>
   15450:	str	r3, [r1, ip, lsl #2]
   15454:	ldr	r3, [r5, #-4]
   15458:	add	r4, ip, #1
   1545c:	cmp	r3, #0
   15460:	add	lr, r1, ip, lsl #2
   15464:	beq	154a4 <__assert_fail@plt+0x4174>
   15468:	mov	ip, r4
   1546c:	cmp	r2, ip
   15470:	beq	1549c <__assert_fail@plt+0x416c>
   15474:	ldr	r4, [r3]
   15478:	add	ip, ip, #1
   1547c:	str	r4, [lr, #4]!
   15480:	ldr	r3, [r3, #4]
   15484:	cmp	r3, #0
   15488:	bne	1546c <__assert_fail@plt+0x413c>
   1548c:	ldr	lr, [r0, #4]
   15490:	cmp	lr, r6
   15494:	add	r5, r5, #8
   15498:	bhi	15438 <__assert_fail@plt+0x4108>
   1549c:	mov	r0, ip
   154a0:	pop	{r4, r5, r6, pc}
   154a4:	ldr	lr, [r0, #4]
   154a8:	mov	ip, r4
   154ac:	b	15490 <__assert_fail@plt+0x4160>
   154b0:	mov	ip, #0
   154b4:	b	1549c <__assert_fail@plt+0x416c>
   154b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154bc:	ldr	r3, [r0, #4]
   154c0:	ldr	r8, [r0]
   154c4:	cmp	r8, r3
   154c8:	bcs	1552c <__assert_fail@plt+0x41fc>
   154cc:	mov	r7, r2
   154d0:	mov	r6, r1
   154d4:	mov	r9, r0
   154d8:	mov	r5, #0
   154dc:	ldr	r0, [r8]
   154e0:	cmp	r0, #0
   154e4:	beq	15518 <__assert_fail@plt+0x41e8>
   154e8:	mov	r4, r8
   154ec:	b	154f4 <__assert_fail@plt+0x41c4>
   154f0:	ldr	r0, [r4]
   154f4:	mov	r1, r7
   154f8:	blx	r6
   154fc:	cmp	r0, #0
   15500:	beq	15524 <__assert_fail@plt+0x41f4>
   15504:	ldr	r4, [r4, #4]
   15508:	add	r5, r5, #1
   1550c:	cmp	r4, #0
   15510:	bne	154f0 <__assert_fail@plt+0x41c0>
   15514:	ldr	r3, [r9, #4]
   15518:	add	r8, r8, #8
   1551c:	cmp	r3, r8
   15520:	bhi	154dc <__assert_fail@plt+0x41ac>
   15524:	mov	r0, r5
   15528:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1552c:	mov	r5, #0
   15530:	b	15524 <__assert_fail@plt+0x41f4>
   15534:	push	{r4, r5, r6, lr}
   15538:	mov	r4, r0
   1553c:	ldrb	r0, [r0]
   15540:	cmp	r0, #0
   15544:	beq	15574 <__assert_fail@plt+0x4244>
   15548:	mov	r5, r1
   1554c:	mov	r1, #0
   15550:	rsb	r1, r1, r1, lsl #5
   15554:	add	r0, r1, r0
   15558:	mov	r1, r5
   1555c:	bl	19900 <__assert_fail@plt+0x85d0>
   15560:	ldrb	r0, [r4, #1]!
   15564:	cmp	r0, #0
   15568:	bne	15550 <__assert_fail@plt+0x4220>
   1556c:	mov	r0, r1
   15570:	pop	{r4, r5, r6, pc}
   15574:	mov	r1, r0
   15578:	b	1556c <__assert_fail@plt+0x423c>
   1557c:	push	{lr}		; (str lr, [sp, #-4]!)
   15580:	mov	ip, r0
   15584:	ldr	lr, [pc, #16]	; 1559c <__assert_fail@plt+0x426c>
   15588:	ldm	lr!, {r0, r1, r2, r3}
   1558c:	ldr	lr, [lr]
   15590:	stmia	ip!, {r0, r1, r2, r3}
   15594:	str	lr, [ip]
   15598:	pop	{pc}		; (ldr pc, [sp], #4)
   1559c:	andeq	sl, r1, r0, asr ip
   155a0:	push	{r4, r5, r6, r7, lr}
   155a4:	sub	sp, sp, #12
   155a8:	cmp	r2, #0
   155ac:	str	r0, [sp, #4]
   155b0:	ldr	r6, [pc, #304]	; 156e8 <__assert_fail@plt+0x43b8>
   155b4:	mov	r0, #40	; 0x28
   155b8:	movne	r6, r2
   155bc:	cmp	r3, #0
   155c0:	ldr	r7, [pc, #292]	; 156ec <__assert_fail@plt+0x43bc>
   155c4:	mov	r5, r1
   155c8:	movne	r7, r3
   155cc:	bl	18fa0 <__assert_fail@plt+0x7c70>
   155d0:	subs	r4, r0, #0
   155d4:	beq	1566c <__assert_fail@plt+0x433c>
   155d8:	cmp	r5, #0
   155dc:	beq	156c0 <__assert_fail@plt+0x4390>
   155e0:	mov	r0, r4
   155e4:	str	r5, [r0, #20]!
   155e8:	bl	14f18 <__assert_fail@plt+0x3be8>
   155ec:	cmp	r0, #0
   155f0:	beq	156a8 <__assert_fail@plt+0x4378>
   155f4:	ldrb	r3, [r5, #16]
   155f8:	cmp	r3, #0
   155fc:	beq	15678 <__assert_fail@plt+0x4348>
   15600:	ldr	r0, [sp, #4]
   15604:	bl	14d20 <__assert_fail@plt+0x39f0>
   15608:	lsrs	r2, r0, #30
   1560c:	movne	r5, #1
   15610:	moveq	r5, #0
   15614:	tst	r0, #536870912	; 0x20000000
   15618:	bne	156a0 <__assert_fail@plt+0x4370>
   1561c:	cmp	r5, #0
   15620:	bne	156a0 <__assert_fail@plt+0x4370>
   15624:	cmp	r0, #0
   15628:	str	r0, [r4, #8]
   1562c:	beq	156a8 <__assert_fail@plt+0x4378>
   15630:	mov	r1, #8
   15634:	bl	18f58 <__assert_fail@plt+0x7c28>
   15638:	cmp	r0, #0
   1563c:	str	r0, [r4]
   15640:	beq	156a8 <__assert_fail@plt+0x4378>
   15644:	ldr	r3, [r4, #8]
   15648:	str	r5, [r4, #12]
   1564c:	str	r5, [r4, #16]
   15650:	add	r0, r0, r3, lsl #3
   15654:	ldr	r3, [sp, #32]
   15658:	str	r6, [r4, #24]
   1565c:	str	r7, [r4, #28]
   15660:	str	r3, [r4, #32]
   15664:	str	r5, [r4, #36]	; 0x24
   15668:	str	r0, [r4, #4]
   1566c:	mov	r0, r4
   15670:	add	sp, sp, #12
   15674:	pop	{r4, r5, r6, r7, pc}
   15678:	vldr	s12, [r5, #8]
   1567c:	vldr	s15, [sp, #4]
   15680:	vldr	s14, [pc, #88]	; 156e0 <__assert_fail@plt+0x43b0>
   15684:	vcvt.f32.u32	s13, s15
   15688:	vdiv.f32	s15, s13, s12
   1568c:	vcmpe.f32	s15, s14
   15690:	vmrs	APSR_nzcv, fpscr
   15694:	vcvtlt.u32.f32	s15, s15
   15698:	vstrlt	s15, [sp, #4]
   1569c:	blt	15600 <__assert_fail@plt+0x42d0>
   156a0:	mov	r3, #0
   156a4:	str	r3, [r4, #8]
   156a8:	mov	r0, r4
   156ac:	bl	12ba4 <__assert_fail@plt+0x1874>
   156b0:	mov	r4, #0
   156b4:	mov	r0, r4
   156b8:	add	sp, sp, #12
   156bc:	pop	{r4, r5, r6, r7, pc}
   156c0:	ldr	r3, [pc, #40]	; 156f0 <__assert_fail@plt+0x43c0>
   156c4:	mov	r0, r4
   156c8:	str	r3, [r0, #20]!
   156cc:	bl	14f18 <__assert_fail@plt+0x3be8>
   156d0:	cmp	r0, #0
   156d4:	vldrne	s12, [pc, #8]	; 156e4 <__assert_fail@plt+0x43b4>
   156d8:	bne	1567c <__assert_fail@plt+0x434c>
   156dc:	b	156a8 <__assert_fail@plt+0x4378>
   156e0:	svcmi	0x00800000
   156e4:	svccc	0x004ccccd
   156e8:	andeq	r4, r1, r4, asr #27
   156ec:	ldrdeq	r4, [r1], -r8
   156f0:	andeq	sl, r1, r0, asr ip
   156f4:	push	{r4, r5, r6, r7, r8, lr}
   156f8:	mov	r5, r0
   156fc:	ldr	r7, [r0]
   15700:	ldr	r3, [r0, #4]
   15704:	cmp	r7, r3
   15708:	addcc	r7, r7, #8
   1570c:	movcc	r6, #0
   15710:	bcs	1578c <__assert_fail@plt+0x445c>
   15714:	ldr	r2, [r7, #-8]
   15718:	mov	r8, r7
   1571c:	cmp	r2, #0
   15720:	beq	15780 <__assert_fail@plt+0x4450>
   15724:	ldr	r4, [r7, #-4]
   15728:	ldr	r2, [r5, #32]
   1572c:	cmp	r4, #0
   15730:	beq	15764 <__assert_fail@plt+0x4434>
   15734:	cmp	r2, #0
   15738:	beq	15748 <__assert_fail@plt+0x4418>
   1573c:	ldr	r0, [r4]
   15740:	blx	r2
   15744:	ldr	r2, [r5, #32]
   15748:	ldr	r3, [r4, #4]
   1574c:	ldr	r1, [r5, #36]	; 0x24
   15750:	str	r6, [r4]
   15754:	str	r1, [r4, #4]
   15758:	str	r4, [r5, #36]	; 0x24
   1575c:	subs	r4, r3, #0
   15760:	bne	15734 <__assert_fail@plt+0x4404>
   15764:	cmp	r2, #0
   15768:	beq	15774 <__assert_fail@plt+0x4444>
   1576c:	ldr	r0, [r7, #-8]
   15770:	blx	r2
   15774:	str	r6, [r7, #-8]
   15778:	str	r6, [r7, #-4]
   1577c:	ldr	r3, [r5, #4]
   15780:	cmp	r3, r8
   15784:	add	r7, r7, #8
   15788:	bhi	15714 <__assert_fail@plt+0x43e4>
   1578c:	mov	r3, #0
   15790:	str	r3, [r5, #12]
   15794:	str	r3, [r5, #16]
   15798:	pop	{r4, r5, r6, r7, r8, pc}
   1579c:	ldr	r3, [r0, #32]
   157a0:	push	{r4, r5, r6, lr}
   157a4:	cmp	r3, #0
   157a8:	mov	r5, r0
   157ac:	beq	1580c <__assert_fail@plt+0x44dc>
   157b0:	ldr	r3, [r0, #16]
   157b4:	cmp	r3, #0
   157b8:	beq	1580c <__assert_fail@plt+0x44dc>
   157bc:	ldr	r6, [r0]
   157c0:	ldr	r3, [r0, #4]
   157c4:	cmp	r6, r3
   157c8:	bcs	15848 <__assert_fail@plt+0x4518>
   157cc:	ldr	r0, [r6]
   157d0:	cmp	r0, #0
   157d4:	movne	r4, r6
   157d8:	bne	157e4 <__assert_fail@plt+0x44b4>
   157dc:	b	157fc <__assert_fail@plt+0x44cc>
   157e0:	ldr	r0, [r4]
   157e4:	ldr	r3, [r5, #32]
   157e8:	blx	r3
   157ec:	ldr	r4, [r4, #4]
   157f0:	cmp	r4, #0
   157f4:	bne	157e0 <__assert_fail@plt+0x44b0>
   157f8:	ldr	r3, [r5, #4]
   157fc:	add	r6, r6, #8
   15800:	cmp	r3, r6
   15804:	bhi	157cc <__assert_fail@plt+0x449c>
   15808:	b	15810 <__assert_fail@plt+0x44e0>
   1580c:	ldr	r3, [r5, #4]
   15810:	ldr	r6, [r5]
   15814:	cmp	r3, r6
   15818:	bls	15848 <__assert_fail@plt+0x4518>
   1581c:	ldr	r0, [r6, #4]
   15820:	cmp	r0, #0
   15824:	beq	1583c <__assert_fail@plt+0x450c>
   15828:	ldr	r4, [r0, #4]
   1582c:	bl	12ba4 <__assert_fail@plt+0x1874>
   15830:	subs	r0, r4, #0
   15834:	bne	15828 <__assert_fail@plt+0x44f8>
   15838:	ldr	r3, [r5, #4]
   1583c:	add	r6, r6, #8
   15840:	cmp	r3, r6
   15844:	bhi	1581c <__assert_fail@plt+0x44ec>
   15848:	ldr	r0, [r5, #36]	; 0x24
   1584c:	cmp	r0, #0
   15850:	beq	15864 <__assert_fail@plt+0x4534>
   15854:	ldr	r4, [r0, #4]
   15858:	bl	12ba4 <__assert_fail@plt+0x1874>
   1585c:	subs	r0, r4, #0
   15860:	bne	15854 <__assert_fail@plt+0x4524>
   15864:	ldr	r0, [r5]
   15868:	bl	12ba4 <__assert_fail@plt+0x1874>
   1586c:	mov	r0, r5
   15870:	pop	{r4, r5, r6, lr}
   15874:	b	12ba4 <__assert_fail@plt+0x1874>
   15878:	ldr	r3, [r0, #20]
   1587c:	push	{r4, r5, r6, r7, lr}
   15880:	sub	sp, sp, #52	; 0x34
   15884:	ldrb	r2, [r3, #16]
   15888:	mov	r5, r0
   1588c:	str	r1, [sp, #4]
   15890:	cmp	r2, #0
   15894:	bne	158c0 <__assert_fail@plt+0x4590>
   15898:	vmov	s15, r1
   1589c:	vldr	s13, [r3, #8]
   158a0:	vldr	s14, [pc, #352]	; 15a08 <__assert_fail@plt+0x46d8>
   158a4:	vcvt.f32.u32	s12, s15
   158a8:	vdiv.f32	s15, s12, s13
   158ac:	vcmpe.f32	s15, s14
   158b0:	vmrs	APSR_nzcv, fpscr
   158b4:	bge	159c4 <__assert_fail@plt+0x4694>
   158b8:	vcvt.u32.f32	s15, s15
   158bc:	vstr	s15, [sp, #4]
   158c0:	ldr	r0, [sp, #4]
   158c4:	bl	14d20 <__assert_fail@plt+0x39f0>
   158c8:	lsrs	r3, r0, #30
   158cc:	movne	r2, #1
   158d0:	moveq	r2, #0
   158d4:	tst	r0, #536870912	; 0x20000000
   158d8:	movne	r2, #1
   158dc:	cmp	r0, #0
   158e0:	movne	r4, r2
   158e4:	orreq	r4, r2, #1
   158e8:	cmp	r4, #0
   158ec:	mov	r6, r0
   158f0:	bne	159c4 <__assert_fail@plt+0x4694>
   158f4:	ldr	r3, [r5, #8]
   158f8:	cmp	r3, r0
   158fc:	beq	159b4 <__assert_fail@plt+0x4684>
   15900:	mov	r1, #8
   15904:	bl	18f58 <__assert_fail@plt+0x7c28>
   15908:	cmp	r0, #0
   1590c:	str	r0, [sp, #8]
   15910:	beq	159c4 <__assert_fail@plt+0x4694>
   15914:	ldr	r1, [r5, #24]
   15918:	ldr	r7, [r5, #20]
   1591c:	ldr	lr, [r5, #28]
   15920:	ldr	ip, [r5, #32]
   15924:	add	r0, r0, r6, lsl #3
   15928:	ldr	r3, [r5, #36]	; 0x24
   1592c:	str	r0, [sp, #12]
   15930:	mov	r2, r4
   15934:	str	r1, [sp, #32]
   15938:	add	r0, sp, #8
   1593c:	mov	r1, r5
   15940:	str	r4, [sp, #20]
   15944:	str	r4, [sp, #24]
   15948:	str	r6, [sp, #16]
   1594c:	str	r7, [sp, #28]
   15950:	str	lr, [sp, #36]	; 0x24
   15954:	str	ip, [sp, #40]	; 0x28
   15958:	str	r3, [sp, #44]	; 0x2c
   1595c:	bl	14fc8 <__assert_fail@plt+0x3c98>
   15960:	subs	r4, r0, #0
   15964:	bne	159d4 <__assert_fail@plt+0x46a4>
   15968:	ldr	r3, [sp, #44]	; 0x2c
   1596c:	mov	r2, #1
   15970:	str	r3, [r5, #36]	; 0x24
   15974:	add	r1, sp, #8
   15978:	mov	r0, r5
   1597c:	bl	14fc8 <__assert_fail@plt+0x3c98>
   15980:	cmp	r0, #0
   15984:	beq	15a04 <__assert_fail@plt+0x46d4>
   15988:	add	r1, sp, #8
   1598c:	mov	r0, r5
   15990:	mov	r2, r4
   15994:	bl	14fc8 <__assert_fail@plt+0x3c98>
   15998:	cmp	r0, #0
   1599c:	beq	15a04 <__assert_fail@plt+0x46d4>
   159a0:	ldr	r0, [sp, #8]
   159a4:	bl	12ba4 <__assert_fail@plt+0x1874>
   159a8:	mov	r0, r4
   159ac:	add	sp, sp, #52	; 0x34
   159b0:	pop	{r4, r5, r6, r7, pc}
   159b4:	mov	r4, #1
   159b8:	mov	r0, r4
   159bc:	add	sp, sp, #52	; 0x34
   159c0:	pop	{r4, r5, r6, r7, pc}
   159c4:	mov	r4, #0
   159c8:	mov	r0, r4
   159cc:	add	sp, sp, #52	; 0x34
   159d0:	pop	{r4, r5, r6, r7, pc}
   159d4:	ldr	r0, [r5]
   159d8:	bl	12ba4 <__assert_fail@plt+0x1874>
   159dc:	add	r0, sp, #12
   159e0:	ldr	ip, [sp, #8]
   159e4:	ldm	r0, {r0, r1, r2}
   159e8:	ldr	r3, [sp, #44]	; 0x2c
   159ec:	str	ip, [r5]
   159f0:	stmib	r5, {r0, r1, r2}
   159f4:	mov	r0, r4
   159f8:	str	r3, [r5, #36]	; 0x24
   159fc:	add	sp, sp, #52	; 0x34
   15a00:	pop	{r4, r5, r6, r7, pc}
   15a04:	bl	112e8 <abort@plt>
   15a08:	svcmi	0x00800000
   15a0c:	push	{r4, r5, r6, lr}
   15a10:	subs	r6, r1, #0
   15a14:	sub	sp, sp, #8
   15a18:	beq	15b4c <__assert_fail@plt+0x481c>
   15a1c:	mov	r4, r2
   15a20:	mov	r3, #0
   15a24:	add	r2, sp, #4
   15a28:	mov	r5, r0
   15a2c:	bl	14e1c <__assert_fail@plt+0x3aec>
   15a30:	cmp	r0, #0
   15a34:	beq	15a50 <__assert_fail@plt+0x4720>
   15a38:	cmp	r4, #0
   15a3c:	moveq	r0, r4
   15a40:	strne	r0, [r4]
   15a44:	movne	r0, #0
   15a48:	add	sp, sp, #8
   15a4c:	pop	{r4, r5, r6, pc}
   15a50:	vldr	s15, [r5, #8]
   15a54:	ldr	r3, [r5, #20]
   15a58:	vldr	s14, [r5, #12]
   15a5c:	vcvt.f32.u32	s15, s15
   15a60:	vldr	s13, [r3, #8]
   15a64:	vcvt.f32.u32	s14, s14
   15a68:	vmul.f32	s15, s15, s13
   15a6c:	vcmpe.f32	s14, s15
   15a70:	vmrs	APSR_nzcv, fpscr
   15a74:	bgt	15ac4 <__assert_fail@plt+0x4794>
   15a78:	ldr	r2, [sp, #4]
   15a7c:	ldr	r3, [r2]
   15a80:	cmp	r3, #0
   15a84:	beq	15b50 <__assert_fail@plt+0x4820>
   15a88:	ldr	r3, [r5, #36]	; 0x24
   15a8c:	cmp	r3, #0
   15a90:	beq	15b74 <__assert_fail@plt+0x4844>
   15a94:	ldr	r1, [r3, #4]
   15a98:	str	r1, [r5, #36]	; 0x24
   15a9c:	ldr	r1, [r5, #16]
   15aa0:	ldr	r0, [r2, #4]
   15aa4:	add	r1, r1, #1
   15aa8:	str	r0, [r3, #4]
   15aac:	str	r6, [r3]
   15ab0:	mov	r0, #1
   15ab4:	str	r3, [r2, #4]
   15ab8:	str	r1, [r5, #16]
   15abc:	add	sp, sp, #8
   15ac0:	pop	{r4, r5, r6, pc}
   15ac4:	add	r0, r5, #20
   15ac8:	bl	14f18 <__assert_fail@plt+0x3be8>
   15acc:	vldr	s15, [r5, #8]
   15ad0:	ldr	r3, [r5, #20]
   15ad4:	vldr	s14, [r5, #12]
   15ad8:	vcvt.f32.u32	s15, s15
   15adc:	vldr	s13, [r3, #8]
   15ae0:	vcvt.f32.u32	s14, s14
   15ae4:	vmul.f32	s12, s13, s15
   15ae8:	vcmpe.f32	s14, s12
   15aec:	vmrs	APSR_nzcv, fpscr
   15af0:	ble	15a78 <__assert_fail@plt+0x4748>
   15af4:	vldr	s14, [r3, #12]
   15af8:	ldrb	r2, [r3, #16]
   15afc:	vmul.f32	s15, s15, s14
   15b00:	cmp	r2, #0
   15b04:	vldr	s14, [pc, #132]	; 15b90 <__assert_fail@plt+0x4860>
   15b08:	vmuleq.f32	s15, s15, s13
   15b0c:	vcmpe.f32	s15, s14
   15b10:	vmrs	APSR_nzcv, fpscr
   15b14:	bge	15b88 <__assert_fail@plt+0x4858>
   15b18:	vcvt.u32.f32	s15, s15
   15b1c:	mov	r0, r5
   15b20:	vmov	r1, s15
   15b24:	bl	15878 <__assert_fail@plt+0x4548>
   15b28:	cmp	r0, #0
   15b2c:	beq	15b88 <__assert_fail@plt+0x4858>
   15b30:	add	r2, sp, #4
   15b34:	mov	r3, #0
   15b38:	mov	r1, r6
   15b3c:	mov	r0, r5
   15b40:	bl	14e1c <__assert_fail@plt+0x3aec>
   15b44:	cmp	r0, #0
   15b48:	beq	15a78 <__assert_fail@plt+0x4748>
   15b4c:	bl	112e8 <abort@plt>
   15b50:	ldr	r1, [r5, #16]
   15b54:	ldr	r3, [r5, #12]
   15b58:	add	r1, r1, #1
   15b5c:	add	r3, r3, #1
   15b60:	str	r6, [r2]
   15b64:	mov	r0, #1
   15b68:	str	r1, [r5, #16]
   15b6c:	str	r3, [r5, #12]
   15b70:	b	15a48 <__assert_fail@plt+0x4718>
   15b74:	mov	r0, #8
   15b78:	bl	18fa0 <__assert_fail@plt+0x7c70>
   15b7c:	subs	r3, r0, #0
   15b80:	ldrne	r2, [sp, #4]
   15b84:	bne	15a9c <__assert_fail@plt+0x476c>
   15b88:	mvn	r0, #0
   15b8c:	b	15a48 <__assert_fail@plt+0x4718>
   15b90:	svcmi	0x00800000
   15b94:	push	{r4, lr}
   15b98:	sub	sp, sp, #8
   15b9c:	add	r2, sp, #4
   15ba0:	mov	r4, r1
   15ba4:	bl	15a0c <__assert_fail@plt+0x46dc>
   15ba8:	cmn	r0, #1
   15bac:	beq	15bc4 <__assert_fail@plt+0x4894>
   15bb0:	cmp	r0, #0
   15bb4:	movne	r0, r4
   15bb8:	ldreq	r0, [sp, #4]
   15bbc:	add	sp, sp, #8
   15bc0:	pop	{r4, pc}
   15bc4:	mov	r0, #0
   15bc8:	b	15bbc <__assert_fail@plt+0x488c>
   15bcc:	push	{r4, r5, r6, lr}
   15bd0:	sub	sp, sp, #8
   15bd4:	mov	r3, #1
   15bd8:	add	r2, sp, #4
   15bdc:	mov	r4, r0
   15be0:	bl	14e1c <__assert_fail@plt+0x3aec>
   15be4:	subs	r5, r0, #0
   15be8:	beq	15c08 <__assert_fail@plt+0x48d8>
   15bec:	ldr	r2, [sp, #4]
   15bf0:	ldr	r3, [r4, #16]
   15bf4:	ldr	r2, [r2]
   15bf8:	sub	r3, r3, #1
   15bfc:	cmp	r2, #0
   15c00:	str	r3, [r4, #16]
   15c04:	beq	15c14 <__assert_fail@plt+0x48e4>
   15c08:	mov	r0, r5
   15c0c:	add	sp, sp, #8
   15c10:	pop	{r4, r5, r6, pc}
   15c14:	vldr	s15, [r4, #8]
   15c18:	ldr	r3, [r4, #12]
   15c1c:	ldr	r2, [r4, #20]
   15c20:	sub	r3, r3, #1
   15c24:	vcvt.f32.u32	s14, s15
   15c28:	vldr	s13, [r2]
   15c2c:	vmov	s15, r3
   15c30:	str	r3, [r4, #12]
   15c34:	vcvt.f32.u32	s15, s15
   15c38:	vmul.f32	s14, s14, s13
   15c3c:	vcmpe.f32	s15, s14
   15c40:	vmrs	APSR_nzcv, fpscr
   15c44:	bpl	15c08 <__assert_fail@plt+0x48d8>
   15c48:	add	r0, r4, #20
   15c4c:	bl	14f18 <__assert_fail@plt+0x3be8>
   15c50:	vldr	s15, [r4, #8]
   15c54:	ldr	r3, [r4, #20]
   15c58:	vldr	s13, [r4, #12]
   15c5c:	vcvt.f32.u32	s15, s15
   15c60:	vldr	s14, [r3]
   15c64:	vcvt.f32.u32	s13, s13
   15c68:	vmul.f32	s14, s15, s14
   15c6c:	vcmpe.f32	s13, s14
   15c70:	vmrs	APSR_nzcv, fpscr
   15c74:	bpl	15c08 <__assert_fail@plt+0x48d8>
   15c78:	ldrb	r2, [r3, #16]
   15c7c:	mov	r0, r4
   15c80:	cmp	r2, #0
   15c84:	vldreq	s13, [r3, #4]
   15c88:	vldrne	s14, [r3, #4]
   15c8c:	vldreq	s14, [r3, #8]
   15c90:	vmuleq.f32	s15, s15, s13
   15c94:	vmul.f32	s15, s15, s14
   15c98:	vcvt.u32.f32	s15, s15
   15c9c:	vmov	r1, s15
   15ca0:	bl	15878 <__assert_fail@plt+0x4548>
   15ca4:	cmp	r0, #0
   15ca8:	bne	15c08 <__assert_fail@plt+0x48d8>
   15cac:	ldr	r0, [r4, #36]	; 0x24
   15cb0:	cmp	r0, #0
   15cb4:	beq	15cc8 <__assert_fail@plt+0x4998>
   15cb8:	ldr	r6, [r0, #4]
   15cbc:	bl	12ba4 <__assert_fail@plt+0x1874>
   15cc0:	subs	r0, r6, #0
   15cc4:	bne	15cb8 <__assert_fail@plt+0x4988>
   15cc8:	mov	r3, #0
   15ccc:	str	r3, [r4, #36]	; 0x24
   15cd0:	b	15c08 <__assert_fail@plt+0x48d8>
   15cd4:	b	15bcc <__assert_fail@plt+0x489c>
   15cd8:	mov	r3, #0
   15cdc:	mov	r2, #1
   15ce0:	str	r1, [r0]
   15ce4:	str	r1, [r0, #4]
   15ce8:	str	r1, [r0, #8]
   15cec:	str	r1, [r0, #12]
   15cf0:	str	r1, [r0, #16]
   15cf4:	strb	r2, [r0, #28]
   15cf8:	str	r3, [r0, #20]
   15cfc:	str	r3, [r0, #24]
   15d00:	bx	lr
   15d04:	ldrb	r0, [r0, #28]
   15d08:	bx	lr
   15d0c:	ldrb	ip, [r0, #28]
   15d10:	ldr	r3, [r0, #20]
   15d14:	mov	r2, r0
   15d18:	eor	ip, ip, #1
   15d1c:	add	r3, ip, r3
   15d20:	and	r3, r3, #3
   15d24:	ldr	r0, [r0, r3, lsl #2]
   15d28:	str	r1, [r2, r3, lsl #2]
   15d2c:	ldr	r1, [r2, #24]
   15d30:	str	r3, [r2, #20]
   15d34:	cmp	r3, r1
   15d38:	addeq	r3, ip, r3
   15d3c:	andeq	r3, r3, #3
   15d40:	streq	r3, [r2, #24]
   15d44:	mov	r3, #0
   15d48:	strb	r3, [r2, #28]
   15d4c:	bx	lr
   15d50:	ldrb	r3, [r0, #28]
   15d54:	cmp	r3, #0
   15d58:	bne	15d90 <__assert_fail@plt+0x4a60>
   15d5c:	ldr	r3, [r0, #20]
   15d60:	ldr	r1, [r0, #16]
   15d64:	ldr	r2, [r0, r3, lsl #2]
   15d68:	str	r1, [r0, r3, lsl #2]
   15d6c:	ldr	r1, [r0, #24]
   15d70:	cmp	r3, r1
   15d74:	addne	r3, r3, #3
   15d78:	moveq	r3, #1
   15d7c:	andne	r3, r3, #3
   15d80:	strbeq	r3, [r0, #28]
   15d84:	strne	r3, [r0, #20]
   15d88:	mov	r0, r2
   15d8c:	bx	lr
   15d90:	push	{r4, lr}
   15d94:	bl	112e8 <abort@plt>
   15d98:	push	{r4, r5, r6, r8, r9, lr}
   15d9c:	mov	r4, r0
   15da0:	mov	r5, r1
   15da4:	add	r6, r2, #20
   15da8:	mov	r8, #10
   15dac:	mov	r9, #0
   15db0:	mov	r3, #0
   15db4:	strb	r3, [r2, #20]
   15db8:	mov	r0, r4
   15dbc:	mov	r1, r5
   15dc0:	mov	r2, r8
   15dc4:	mov	r3, r9
   15dc8:	bl	19b60 <__assert_fail@plt+0x8830>
   15dcc:	mov	r0, r4
   15dd0:	mov	r1, r5
   15dd4:	mov	r3, r9
   15dd8:	add	r2, r2, #48	; 0x30
   15ddc:	strb	r2, [r6, #-1]!
   15de0:	mov	r2, r8
   15de4:	bl	19b60 <__assert_fail@plt+0x8830>
   15de8:	mov	r4, r0
   15dec:	mov	r5, r1
   15df0:	orrs	r3, r4, r5
   15df4:	bne	15db8 <__assert_fail@plt+0x4a88>
   15df8:	mov	r0, r6
   15dfc:	pop	{r4, r5, r6, r8, r9, pc}
   15e00:	push	{r2, r3}
   15e04:	push	{lr}		; (str lr, [sp, #-4]!)
   15e08:	sub	sp, sp, #12
   15e0c:	ldr	r2, [sp, #16]
   15e10:	ands	r3, r2, #64	; 0x40
   15e14:	addne	r3, sp, #20
   15e18:	strne	r3, [sp, #4]
   15e1c:	ldrne	r3, [sp, #20]
   15e20:	bl	111d4 <openat64@plt>
   15e24:	bl	17db4 <__assert_fail@plt+0x6a84>
   15e28:	add	sp, sp, #12
   15e2c:	pop	{lr}		; (ldr lr, [sp], #4)
   15e30:	add	sp, sp, #8
   15e34:	bx	lr
   15e38:	orr	r2, r2, #540672	; 0x84000
   15e3c:	push	{r4, r5, r6, lr}
   15e40:	orr	r2, r2, #2304	; 0x900
   15e44:	mov	r6, r3
   15e48:	bl	15e00 <__assert_fail@plt+0x4ad0>
   15e4c:	subs	r5, r0, #0
   15e50:	blt	15e84 <__assert_fail@plt+0x4b54>
   15e54:	bl	11288 <fdopendir@plt>
   15e58:	subs	r4, r0, #0
   15e5c:	beq	15e6c <__assert_fail@plt+0x4b3c>
   15e60:	str	r5, [r6]
   15e64:	mov	r0, r4
   15e68:	pop	{r4, r5, r6, pc}
   15e6c:	bl	111ec <__errno_location@plt>
   15e70:	mov	r6, r0
   15e74:	mov	r0, r5
   15e78:	ldr	r5, [r6]
   15e7c:	bl	112f4 <close@plt>
   15e80:	b	15e60 <__assert_fail@plt+0x4b30>
   15e84:	mov	r4, #0
   15e88:	b	15e64 <__assert_fail@plt+0x4b34>
   15e8c:	push	{r4, r5, r6, lr}
   15e90:	subs	r4, r0, #0
   15e94:	beq	15f08 <__assert_fail@plt+0x4bd8>
   15e98:	mov	r1, #47	; 0x2f
   15e9c:	bl	11264 <strrchr@plt>
   15ea0:	subs	r5, r0, #0
   15ea4:	beq	15ef4 <__assert_fail@plt+0x4bc4>
   15ea8:	add	r6, r5, #1
   15eac:	sub	r3, r6, r4
   15eb0:	cmp	r3, #6
   15eb4:	ble	15ef4 <__assert_fail@plt+0x4bc4>
   15eb8:	mov	r2, #7
   15ebc:	ldr	r1, [pc, #96]	; 15f24 <__assert_fail@plt+0x4bf4>
   15ec0:	sub	r0, r5, #6
   15ec4:	bl	112dc <strncmp@plt>
   15ec8:	cmp	r0, #0
   15ecc:	bne	15ef4 <__assert_fail@plt+0x4bc4>
   15ed0:	mov	r2, #3
   15ed4:	ldr	r1, [pc, #76]	; 15f28 <__assert_fail@plt+0x4bf8>
   15ed8:	mov	r0, r6
   15edc:	bl	112dc <strncmp@plt>
   15ee0:	cmp	r0, #0
   15ee4:	movne	r4, r6
   15ee8:	ldreq	r3, [pc, #60]	; 15f2c <__assert_fail@plt+0x4bfc>
   15eec:	addeq	r4, r5, #4
   15ef0:	streq	r4, [r3]
   15ef4:	ldr	r2, [pc, #52]	; 15f30 <__assert_fail@plt+0x4c00>
   15ef8:	ldr	r3, [pc, #52]	; 15f34 <__assert_fail@plt+0x4c04>
   15efc:	str	r4, [r2]
   15f00:	str	r4, [r3]
   15f04:	pop	{r4, r5, r6, pc}
   15f08:	ldr	r3, [pc, #40]	; 15f38 <__assert_fail@plt+0x4c08>
   15f0c:	mov	r2, #55	; 0x37
   15f10:	mov	r1, #1
   15f14:	ldr	r3, [r3]
   15f18:	ldr	r0, [pc, #28]	; 15f3c <__assert_fail@plt+0x4c0c>
   15f1c:	bl	11108 <fwrite@plt>
   15f20:	bl	112e8 <abort@plt>
   15f24:	andeq	sl, r1, r8, lsl #26
   15f28:	andeq	sl, r1, r0, lsl sp
   15f2c:	andeq	ip, r2, r0, lsl #3
   15f30:	andeq	ip, r2, r0, asr #3
   15f34:	andeq	ip, r2, r4, lsl #3
   15f38:	muleq	r2, r0, r1
   15f3c:	ldrdeq	sl, [r1], -r0
   15f40:	push	{r4, r5, r6, lr}
   15f44:	mov	r2, #48	; 0x30
   15f48:	mov	r4, r1
   15f4c:	mov	r1, #0
   15f50:	mov	r5, r0
   15f54:	bl	11204 <memset@plt>
   15f58:	cmp	r4, #10
   15f5c:	beq	15f6c <__assert_fail@plt+0x4c3c>
   15f60:	str	r4, [r5]
   15f64:	mov	r0, r5
   15f68:	pop	{r4, r5, r6, pc}
   15f6c:	bl	112e8 <abort@plt>
   15f70:	push	{r4, r5, r6, lr}
   15f74:	mov	r4, r0
   15f78:	mov	r5, r1
   15f7c:	bl	19540 <__assert_fail@plt+0x8210>
   15f80:	ldrb	r3, [r0]
   15f84:	bic	r3, r3, #32
   15f88:	cmp	r3, #85	; 0x55
   15f8c:	bne	15fec <__assert_fail@plt+0x4cbc>
   15f90:	ldrb	r3, [r0, #1]
   15f94:	bic	r3, r3, #32
   15f98:	cmp	r3, #84	; 0x54
   15f9c:	bne	16028 <__assert_fail@plt+0x4cf8>
   15fa0:	ldrb	r3, [r0, #2]
   15fa4:	bic	r3, r3, #32
   15fa8:	cmp	r3, #70	; 0x46
   15fac:	bne	16028 <__assert_fail@plt+0x4cf8>
   15fb0:	ldrb	r3, [r0, #3]
   15fb4:	cmp	r3, #45	; 0x2d
   15fb8:	bne	16028 <__assert_fail@plt+0x4cf8>
   15fbc:	ldrb	r3, [r0, #4]
   15fc0:	cmp	r3, #56	; 0x38
   15fc4:	bne	16028 <__assert_fail@plt+0x4cf8>
   15fc8:	ldrb	r3, [r0, #5]
   15fcc:	cmp	r3, #0
   15fd0:	bne	16028 <__assert_fail@plt+0x4cf8>
   15fd4:	ldrb	r2, [r4]
   15fd8:	ldr	r3, [pc, #152]	; 16078 <__assert_fail@plt+0x4d48>
   15fdc:	ldr	r0, [pc, #152]	; 1607c <__assert_fail@plt+0x4d4c>
   15fe0:	cmp	r2, #96	; 0x60
   15fe4:	movne	r0, r3
   15fe8:	pop	{r4, r5, r6, pc}
   15fec:	cmp	r3, #71	; 0x47
   15ff0:	bne	16028 <__assert_fail@plt+0x4cf8>
   15ff4:	ldrb	r3, [r0, #1]
   15ff8:	bic	r3, r3, #32
   15ffc:	cmp	r3, #66	; 0x42
   16000:	bne	16028 <__assert_fail@plt+0x4cf8>
   16004:	ldrb	r3, [r0, #2]
   16008:	cmp	r3, #49	; 0x31
   1600c:	bne	16028 <__assert_fail@plt+0x4cf8>
   16010:	ldrb	r3, [r0, #3]
   16014:	cmp	r3, #56	; 0x38
   16018:	bne	16028 <__assert_fail@plt+0x4cf8>
   1601c:	ldrb	r3, [r0, #4]
   16020:	cmp	r3, #48	; 0x30
   16024:	beq	1603c <__assert_fail@plt+0x4d0c>
   16028:	ldr	r3, [pc, #80]	; 16080 <__assert_fail@plt+0x4d50>
   1602c:	cmp	r5, #9
   16030:	ldr	r0, [pc, #76]	; 16084 <__assert_fail@plt+0x4d54>
   16034:	movne	r0, r3
   16038:	pop	{r4, r5, r6, pc}
   1603c:	ldrb	r3, [r0, #5]
   16040:	cmp	r3, #51	; 0x33
   16044:	bne	16028 <__assert_fail@plt+0x4cf8>
   16048:	ldrb	r3, [r0, #6]
   1604c:	cmp	r3, #48	; 0x30
   16050:	bne	16028 <__assert_fail@plt+0x4cf8>
   16054:	ldrb	r3, [r0, #7]
   16058:	cmp	r3, #0
   1605c:	bne	16028 <__assert_fail@plt+0x4cf8>
   16060:	ldrb	r2, [r4]
   16064:	ldr	r3, [pc, #28]	; 16088 <__assert_fail@plt+0x4d58>
   16068:	ldr	r0, [pc, #28]	; 1608c <__assert_fail@plt+0x4d5c>
   1606c:	cmp	r2, #96	; 0x60
   16070:	movne	r0, r3
   16074:	pop	{r4, r5, r6, pc}
   16078:	andeq	sl, r1, ip, ror #26
   1607c:	andeq	sl, r1, r8, ror #26
   16080:	andeq	sl, r1, ip, ror sp
   16084:	andeq	sl, r1, r8, ror sp
   16088:	andeq	sl, r1, r4, ror sp
   1608c:	andeq	sl, r1, r0, ror sp
   16090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16094:	sub	sp, sp, #116	; 0x74
   16098:	mov	sl, r0
   1609c:	str	r3, [sp, #24]
   160a0:	mov	r3, #1
   160a4:	mov	r8, r1
   160a8:	str	r2, [sp, #56]	; 0x38
   160ac:	str	r3, [sp, #36]	; 0x24
   160b0:	bl	11120 <__ctype_get_mb_cur_max@plt>
   160b4:	ldr	r3, [sp, #156]	; 0x9c
   160b8:	mov	fp, r8
   160bc:	mov	r2, #0
   160c0:	lsr	r3, r3, #1
   160c4:	and	r3, r3, #1
   160c8:	str	r2, [sp, #68]	; 0x44
   160cc:	str	r3, [sp, #28]
   160d0:	str	r2, [sp, #40]	; 0x28
   160d4:	str	r2, [sp, #44]	; 0x2c
   160d8:	str	r2, [sp, #52]	; 0x34
   160dc:	str	r2, [sp, #64]	; 0x40
   160e0:	str	r2, [sp, #72]	; 0x48
   160e4:	str	sl, [sp, #32]
   160e8:	str	r0, [sp, #76]	; 0x4c
   160ec:	ldr	r3, [sp, #152]	; 0x98
   160f0:	cmp	r3, #10
   160f4:	ldrls	pc, [pc, r3, lsl #2]
   160f8:	b	172b8 <__assert_fail@plt+0x5f88>
   160fc:	andeq	r6, r1, r8, lsr #2
   16100:	andeq	r6, r1, r0, lsl r4
   16104:	andeq	r6, r1, r4, lsr r4
   16108:	andeq	r6, r1, r8, asr r4
   1610c:	andeq	r6, r1, r4, lsl #11
   16110:	andeq	r6, r1, r8, asr r5
   16114:	andeq	r6, r1, r0, lsr r5
   16118:	andeq	r6, r1, ip, ror #8
   1611c:	andeq	r6, r1, r4, lsl #9
   16120:	andeq	r6, r1, r4, lsl #9
   16124:	andeq	r6, r1, r4, lsl #9
   16128:	mov	r3, #0
   1612c:	mov	r7, r3
   16130:	str	r3, [sp, #28]
   16134:	ldr	r3, [sp, #44]	; 0x2c
   16138:	mov	sl, #0
   1613c:	eor	r3, r3, #1
   16140:	str	r3, [sp, #60]	; 0x3c
   16144:	ldr	r3, [sp, #24]
   16148:	cmn	r3, #1
   1614c:	beq	166b0 <__assert_fail@plt+0x5380>
   16150:	ldr	r3, [sp, #24]
   16154:	subs	r5, r3, sl
   16158:	movne	r5, #1
   1615c:	cmp	r5, #0
   16160:	beq	166c8 <__assert_fail@plt+0x5398>
   16164:	ldr	r3, [sp, #152]	; 0x98
   16168:	ldr	r8, [sp, #44]	; 0x2c
   1616c:	cmp	r3, #2
   16170:	moveq	r8, #0
   16174:	andne	r8, r8, #1
   16178:	ldr	r3, [sp, #52]	; 0x34
   1617c:	adds	r9, r3, #0
   16180:	movne	r9, #1
   16184:	ands	r6, r9, r8
   16188:	beq	16b30 <__assert_fail@plt+0x5800>
   1618c:	ldr	r2, [sp, #52]	; 0x34
   16190:	ldr	r1, [sp, #24]
   16194:	cmp	r2, #1
   16198:	mov	r3, r2
   1619c:	movls	r3, #0
   161a0:	movhi	r3, #1
   161a4:	cmn	r1, #1
   161a8:	movne	r3, #0
   161ac:	cmp	r3, #0
   161b0:	add	r4, sl, r2
   161b4:	beq	161c4 <__assert_fail@plt+0x4e94>
   161b8:	ldr	r0, [sp, #56]	; 0x38
   161bc:	bl	111bc <strlen@plt>
   161c0:	str	r0, [sp, #24]
   161c4:	ldr	r3, [sp, #24]
   161c8:	cmp	r3, r4
   161cc:	ldr	r3, [sp, #56]	; 0x38
   161d0:	add	r3, r3, sl
   161d4:	str	r3, [sp, #48]	; 0x30
   161d8:	bcc	16b3c <__assert_fail@plt+0x580c>
   161dc:	mov	r0, r3
   161e0:	ldr	r2, [sp, #52]	; 0x34
   161e4:	ldr	r1, [sp, #64]	; 0x40
   161e8:	bl	1109c <memcmp@plt>
   161ec:	cmp	r0, #0
   161f0:	bne	16b3c <__assert_fail@plt+0x580c>
   161f4:	ldr	r3, [sp, #28]
   161f8:	cmp	r3, #0
   161fc:	bne	173b8 <__assert_fail@plt+0x6088>
   16200:	ldr	r3, [sp, #48]	; 0x30
   16204:	ldrb	r4, [r3]
   16208:	cmp	r4, #126	; 0x7e
   1620c:	ldrls	pc, [pc, r4, lsl #2]
   16210:	b	16ad0 <__assert_fail@plt+0x57a0>
   16214:	strdeq	r6, [r1], -r4
   16218:	ldrdeq	r6, [r1], -r0
   1621c:	ldrdeq	r6, [r1], -r0
   16220:	ldrdeq	r6, [r1], -r0
   16224:	ldrdeq	r6, [r1], -r0
   16228:	ldrdeq	r6, [r1], -r0
   1622c:	ldrdeq	r6, [r1], -r0
   16230:	ldrdeq	r6, [r1], -r8
   16234:			; <UNDEFINED> instruction: 0x000168bc
   16238:			; <UNDEFINED> instruction: 0x00016ab8
   1623c:	andeq	r6, r1, ip, lsl r8
   16240:	andeq	r6, r1, r0, lsl #16
   16244:	muleq	r1, r4, sl
   16248:	andeq	r6, r1, r0, ror sl
   1624c:	ldrdeq	r6, [r1], -r0
   16250:	ldrdeq	r6, [r1], -r0
   16254:	ldrdeq	r6, [r1], -r0
   16258:	ldrdeq	r6, [r1], -r0
   1625c:	ldrdeq	r6, [r1], -r0
   16260:	ldrdeq	r6, [r1], -r0
   16264:	ldrdeq	r6, [r1], -r0
   16268:	ldrdeq	r6, [r1], -r0
   1626c:	ldrdeq	r6, [r1], -r0
   16270:	ldrdeq	r6, [r1], -r0
   16274:	ldrdeq	r6, [r1], -r0
   16278:	ldrdeq	r6, [r1], -r0
   1627c:	ldrdeq	r6, [r1], -r0
   16280:	ldrdeq	r6, [r1], -r0
   16284:	ldrdeq	r6, [r1], -r0
   16288:	ldrdeq	r6, [r1], -r0
   1628c:	ldrdeq	r6, [r1], -r0
   16290:	ldrdeq	r6, [r1], -r0
   16294:			; <UNDEFINED> instruction: 0x00016ab0
   16298:	andeq	r6, r1, r4, ror #19
   1629c:	andeq	r6, r1, r4, ror #19
   162a0:	strdeq	r6, [r1], -r4
   162a4:	andeq	r6, r1, r4, ror #19
   162a8:	andeq	r6, r1, ip, ror sl
   162ac:	andeq	r6, r1, r4, ror #19
   162b0:	andeq	r6, r1, r0, asr sl
   162b4:	andeq	r6, r1, r4, ror #19
   162b8:	andeq	r6, r1, r4, ror #19
   162bc:	andeq	r6, r1, r4, ror #19
   162c0:	andeq	r6, r1, ip, ror sl
   162c4:	andeq	r6, r1, ip, ror sl
   162c8:	andeq	r6, r1, ip, ror sl
   162cc:	andeq	r6, r1, ip, ror sl
   162d0:	andeq	r6, r1, ip, ror sl
   162d4:	andeq	r6, r1, ip, ror sl
   162d8:	andeq	r6, r1, ip, ror sl
   162dc:	andeq	r6, r1, ip, ror sl
   162e0:	andeq	r6, r1, ip, ror sl
   162e4:	andeq	r6, r1, ip, ror sl
   162e8:	andeq	r6, r1, ip, ror sl
   162ec:	andeq	r6, r1, ip, ror sl
   162f0:	andeq	r6, r1, ip, ror sl
   162f4:	andeq	r6, r1, ip, ror sl
   162f8:	andeq	r6, r1, ip, ror sl
   162fc:	andeq	r6, r1, ip, ror sl
   16300:	andeq	r6, r1, r4, ror #19
   16304:	andeq	r6, r1, r4, ror #19
   16308:	andeq	r6, r1, r4, ror #19
   1630c:	andeq	r6, r1, r4, ror #19
   16310:	andeq	r6, r1, r0, lsr #20
   16314:	ldrdeq	r6, [r1], -r0
   16318:	andeq	r6, r1, ip, ror sl
   1631c:	andeq	r6, r1, ip, ror sl
   16320:	andeq	r6, r1, ip, ror sl
   16324:	andeq	r6, r1, ip, ror sl
   16328:	andeq	r6, r1, ip, ror sl
   1632c:	andeq	r6, r1, ip, ror sl
   16330:	andeq	r6, r1, ip, ror sl
   16334:	andeq	r6, r1, ip, ror sl
   16338:	andeq	r6, r1, ip, ror sl
   1633c:	andeq	r6, r1, ip, ror sl
   16340:	andeq	r6, r1, ip, ror sl
   16344:	andeq	r6, r1, ip, ror sl
   16348:	andeq	r6, r1, ip, ror sl
   1634c:	andeq	r6, r1, ip, ror sl
   16350:	andeq	r6, r1, ip, ror sl
   16354:	andeq	r6, r1, ip, ror sl
   16358:	andeq	r6, r1, ip, ror sl
   1635c:	andeq	r6, r1, ip, ror sl
   16360:	andeq	r6, r1, ip, ror sl
   16364:	andeq	r6, r1, ip, ror sl
   16368:	andeq	r6, r1, ip, ror sl
   1636c:	andeq	r6, r1, ip, ror sl
   16370:	andeq	r6, r1, ip, ror sl
   16374:	andeq	r6, r1, ip, ror sl
   16378:	andeq	r6, r1, ip, ror sl
   1637c:	andeq	r6, r1, ip, ror sl
   16380:	andeq	r6, r1, r4, ror #19
   16384:	andeq	r6, r1, r0, asr #14
   16388:	andeq	r6, r1, ip, ror sl
   1638c:	andeq	r6, r1, r4, ror #19
   16390:	andeq	r6, r1, ip, ror sl
   16394:	andeq	r6, r1, r4, ror #19
   16398:	andeq	r6, r1, ip, ror sl
   1639c:	andeq	r6, r1, ip, ror sl
   163a0:	andeq	r6, r1, ip, ror sl
   163a4:	andeq	r6, r1, ip, ror sl
   163a8:	andeq	r6, r1, ip, ror sl
   163ac:	andeq	r6, r1, ip, ror sl
   163b0:	andeq	r6, r1, ip, ror sl
   163b4:	andeq	r6, r1, ip, ror sl
   163b8:	andeq	r6, r1, ip, ror sl
   163bc:	andeq	r6, r1, ip, ror sl
   163c0:	andeq	r6, r1, ip, ror sl
   163c4:	andeq	r6, r1, ip, ror sl
   163c8:	andeq	r6, r1, ip, ror sl
   163cc:	andeq	r6, r1, ip, ror sl
   163d0:	andeq	r6, r1, ip, ror sl
   163d4:	andeq	r6, r1, ip, ror sl
   163d8:	andeq	r6, r1, ip, ror sl
   163dc:	andeq	r6, r1, ip, ror sl
   163e0:	andeq	r6, r1, ip, ror sl
   163e4:	andeq	r6, r1, ip, ror sl
   163e8:	andeq	r6, r1, ip, ror sl
   163ec:	andeq	r6, r1, ip, ror sl
   163f0:	andeq	r6, r1, ip, ror sl
   163f4:	andeq	r6, r1, ip, ror sl
   163f8:	andeq	r6, r1, ip, ror sl
   163fc:	andeq	r6, r1, ip, ror sl
   16400:	ldrdeq	r6, [r1], -r4
   16404:	andeq	r6, r1, r4, ror #19
   16408:	ldrdeq	r6, [r1], -r4
   1640c:	strdeq	r6, [r1], -r4
   16410:	mov	r3, #1
   16414:	str	r3, [sp, #28]
   16418:	str	r3, [sp, #52]	; 0x34
   1641c:	ldr	r3, [pc, #4000]	; 173c4 <__assert_fail@plt+0x6094>
   16420:	mov	r7, #0
   16424:	str	r3, [sp, #64]	; 0x40
   16428:	mov	r3, #2
   1642c:	str	r3, [sp, #152]	; 0x98
   16430:	b	16134 <__assert_fail@plt+0x4e04>
   16434:	ldr	r3, [sp, #28]
   16438:	cmp	r3, #0
   1643c:	beq	16598 <__assert_fail@plt+0x5268>
   16440:	mov	r3, #1
   16444:	str	r3, [sp, #52]	; 0x34
   16448:	ldr	r3, [pc, #3956]	; 173c4 <__assert_fail@plt+0x6094>
   1644c:	mov	r7, #0
   16450:	str	r3, [sp, #64]	; 0x40
   16454:	b	16134 <__assert_fail@plt+0x4e04>
   16458:	mov	r3, #1
   1645c:	str	r3, [sp, #44]	; 0x2c
   16460:	str	r3, [sp, #52]	; 0x34
   16464:	str	r3, [sp, #28]
   16468:	b	1641c <__assert_fail@plt+0x50ec>
   1646c:	mov	r3, #0
   16470:	str	r3, [sp, #28]
   16474:	mov	r3, #1
   16478:	str	r3, [sp, #44]	; 0x2c
   1647c:	mov	r7, #0
   16480:	b	16134 <__assert_fail@plt+0x4e04>
   16484:	ldr	r3, [sp, #152]	; 0x98
   16488:	cmp	r3, #10
   1648c:	beq	164d0 <__assert_fail@plt+0x51a0>
   16490:	mov	r2, #5
   16494:	ldr	r1, [pc, #3884]	; 173c8 <__assert_fail@plt+0x6098>
   16498:	mov	r0, #0
   1649c:	bl	110c0 <dcgettext@plt>
   164a0:	ldr	r2, [pc, #3872]	; 173c8 <__assert_fail@plt+0x6098>
   164a4:	cmp	r0, r2
   164a8:	str	r0, [sp, #164]	; 0xa4
   164ac:	beq	174b4 <__assert_fail@plt+0x6184>
   164b0:	mov	r2, #5
   164b4:	ldr	r1, [pc, #3848]	; 173c4 <__assert_fail@plt+0x6094>
   164b8:	mov	r0, #0
   164bc:	bl	110c0 <dcgettext@plt>
   164c0:	ldr	r2, [pc, #3836]	; 173c4 <__assert_fail@plt+0x6094>
   164c4:	cmp	r0, r2
   164c8:	str	r0, [sp, #168]	; 0xa8
   164cc:	beq	174a4 <__assert_fail@plt+0x6174>
   164d0:	ldr	r7, [sp, #28]
   164d4:	cmp	r7, #0
   164d8:	movne	r7, #0
   164dc:	bne	16510 <__assert_fail@plt+0x51e0>
   164e0:	ldr	r3, [sp, #164]	; 0xa4
   164e4:	ldrb	r3, [r3]
   164e8:	cmp	r3, #0
   164ec:	beq	174c4 <__assert_fail@plt+0x6194>
   164f0:	ldr	r2, [sp, #164]	; 0xa4
   164f4:	ldr	r1, [sp, #32]
   164f8:	cmp	fp, r7
   164fc:	strbhi	r3, [r1, r7]
   16500:	ldrb	r3, [r2, #1]!
   16504:	add	r7, r7, #1
   16508:	cmp	r3, #0
   1650c:	bne	164f8 <__assert_fail@plt+0x51c8>
   16510:	ldr	r0, [sp, #168]	; 0xa8
   16514:	bl	111bc <strlen@plt>
   16518:	ldr	r3, [sp, #168]	; 0xa8
   1651c:	str	r3, [sp, #64]	; 0x40
   16520:	mov	r3, #1
   16524:	str	r3, [sp, #44]	; 0x2c
   16528:	str	r0, [sp, #52]	; 0x34
   1652c:	b	16134 <__assert_fail@plt+0x4e04>
   16530:	mov	r3, #1
   16534:	str	r3, [sp, #44]	; 0x2c
   16538:	str	r3, [sp, #52]	; 0x34
   1653c:	str	r3, [sp, #28]
   16540:	ldr	r3, [pc, #3716]	; 173cc <__assert_fail@plt+0x609c>
   16544:	mov	r7, #0
   16548:	str	r3, [sp, #64]	; 0x40
   1654c:	mov	r3, #5
   16550:	str	r3, [sp, #152]	; 0x98
   16554:	b	16134 <__assert_fail@plt+0x4e04>
   16558:	ldr	r3, [sp, #28]
   1655c:	cmp	r3, #0
   16560:	beq	17260 <__assert_fail@plt+0x5f30>
   16564:	ldr	r3, [sp, #28]
   16568:	mov	r7, #0
   1656c:	str	r3, [sp, #44]	; 0x2c
   16570:	mov	r3, #1
   16574:	str	r3, [sp, #52]	; 0x34
   16578:	ldr	r3, [pc, #3660]	; 173cc <__assert_fail@plt+0x609c>
   1657c:	str	r3, [sp, #64]	; 0x40
   16580:	b	16134 <__assert_fail@plt+0x4e04>
   16584:	ldr	r3, [sp, #28]
   16588:	cmp	r3, #0
   1658c:	mov	r3, #1
   16590:	streq	r3, [sp, #44]	; 0x2c
   16594:	bne	16418 <__assert_fail@plt+0x50e8>
   16598:	cmp	fp, #0
   1659c:	beq	17290 <__assert_fail@plt+0x5f60>
   165a0:	ldr	r3, [sp, #32]
   165a4:	mov	r2, #39	; 0x27
   165a8:	mov	r7, #1
   165ac:	strb	r2, [r3]
   165b0:	mov	r3, #0
   165b4:	str	r3, [sp, #28]
   165b8:	mov	r3, #1
   165bc:	str	r3, [sp, #52]	; 0x34
   165c0:	ldr	r3, [pc, #3580]	; 173c4 <__assert_fail@plt+0x6094>
   165c4:	str	r3, [sp, #64]	; 0x40
   165c8:	mov	r3, #2
   165cc:	str	r3, [sp, #152]	; 0x98
   165d0:	b	16134 <__assert_fail@plt+0x4e04>
   165d4:	ldr	r3, [sp, #24]
   165d8:	cmn	r3, #1
   165dc:	beq	171f4 <__assert_fail@plt+0x5ec4>
   165e0:	ldr	r3, [sp, #24]
   165e4:	subs	r3, r3, #1
   165e8:	movne	r3, #1
   165ec:	cmp	r3, #0
   165f0:	bne	165fc <__assert_fail@plt+0x52cc>
   165f4:	cmp	sl, #0
   165f8:	beq	169e8 <__assert_fail@plt+0x56b8>
   165fc:	ldr	r3, [sp, #152]	; 0x98
   16600:	mov	r5, #0
   16604:	sub	r2, r3, #2
   16608:	mov	r8, r5
   1660c:	clz	r2, r2
   16610:	lsr	r2, r2, #5
   16614:	ldr	r3, [sp, #60]	; 0x3c
   16618:	ldr	r1, [sp, #28]
   1661c:	orr	r3, r2, r3
   16620:	eor	r3, r3, #1
   16624:	orr	r3, r1, r3
   16628:	tst	r3, #255	; 0xff
   1662c:	bne	16d58 <__assert_fail@plt+0x5a28>
   16630:	cmp	r6, #0
   16634:	bne	16784 <__assert_fail@plt+0x5454>
   16638:	ldr	r3, [sp, #40]	; 0x28
   1663c:	eor	r8, r8, #1
   16640:	and	r8, r8, r3
   16644:	add	sl, sl, #1
   16648:	uxtb	r6, r8
   1664c:	cmp	r6, #0
   16650:	beq	16684 <__assert_fail@plt+0x5354>
   16654:	cmp	fp, r7
   16658:	movhi	r2, #39	; 0x27
   1665c:	ldrhi	r3, [sp, #32]
   16660:	strbhi	r2, [r3, r7]
   16664:	add	r3, r7, #1
   16668:	cmp	fp, r3
   1666c:	movhi	r1, #39	; 0x27
   16670:	ldrhi	r2, [sp, #32]
   16674:	add	r7, r7, #2
   16678:	strbhi	r1, [r2, r3]
   1667c:	mov	r3, #0
   16680:	str	r3, [sp, #40]	; 0x28
   16684:	cmp	r7, fp
   16688:	ldrcc	r3, [sp, #32]
   1668c:	strbcc	r4, [r3, r7]
   16690:	ldr	r3, [sp, #36]	; 0x24
   16694:	cmp	r5, #0
   16698:	moveq	r3, #0
   1669c:	str	r3, [sp, #36]	; 0x24
   166a0:	ldr	r3, [sp, #24]
   166a4:	add	r7, r7, #1
   166a8:	cmn	r3, #1
   166ac:	bne	16150 <__assert_fail@plt+0x4e20>
   166b0:	ldr	r3, [sp, #56]	; 0x38
   166b4:	ldrb	r5, [r3, sl]
   166b8:	adds	r5, r5, #0
   166bc:	movne	r5, #1
   166c0:	cmp	r5, #0
   166c4:	bne	16164 <__assert_fail@plt+0x4e34>
   166c8:	ldr	r3, [sp, #152]	; 0x98
   166cc:	ldr	r1, [sp, #28]
   166d0:	sub	r3, r3, #2
   166d4:	clz	r3, r3
   166d8:	lsr	r3, r3, #5
   166dc:	and	r9, r1, r3
   166e0:	cmp	r7, #0
   166e4:	movne	r2, #0
   166e8:	andeq	r2, r9, #1
   166ec:	cmp	r2, #0
   166f0:	bne	170cc <__assert_fail@plt+0x5d9c>
   166f4:	eor	r2, r1, #1
   166f8:	ands	r3, r3, r2
   166fc:	beq	17588 <__assert_fail@plt+0x6258>
   16700:	ldr	r2, [sp, #68]	; 0x44
   16704:	cmp	r2, #0
   16708:	beq	17574 <__assert_fail@plt+0x6244>
   1670c:	ldr	r3, [sp, #36]	; 0x24
   16710:	cmp	r3, #0
   16714:	bne	1752c <__assert_fail@plt+0x61fc>
   16718:	ldr	r2, [sp, #72]	; 0x48
   1671c:	clz	r3, fp
   16720:	cmp	r2, #0
   16724:	lsr	r3, r3, #5
   16728:	moveq	r3, #0
   1672c:	cmp	r3, #0
   16730:	beq	174cc <__assert_fail@plt+0x619c>
   16734:	str	r3, [sp, #68]	; 0x44
   16738:	ldr	fp, [sp, #72]	; 0x48
   1673c:	b	160ec <__assert_fail@plt+0x4dbc>
   16740:	ldr	r3, [sp, #152]	; 0x98
   16744:	cmp	r3, #2
   16748:	beq	16d9c <__assert_fail@plt+0x5a6c>
   1674c:	ldr	r3, [sp, #44]	; 0x2c
   16750:	ldr	r2, [sp, #28]
   16754:	and	r2, r3, r2
   16758:	ands	r2, r9, r2
   1675c:	bne	16da8 <__assert_fail@plt+0x5a78>
   16760:	mov	r4, #92	; 0x5c
   16764:	mov	r3, r4
   16768:	ldr	r1, [sp, #44]	; 0x2c
   1676c:	cmp	r1, #0
   16770:	moveq	r5, #0
   16774:	moveq	r8, r1
   16778:	beq	16614 <__assert_fail@plt+0x52e4>
   1677c:	mov	r4, r3
   16780:	mov	r5, #0
   16784:	ldr	r3, [sp, #28]
   16788:	cmp	r3, #0
   1678c:	bne	16d90 <__assert_fail@plt+0x5a60>
   16790:	ldr	r3, [sp, #40]	; 0x28
   16794:	eor	r9, r3, #1
   16798:	and	r9, r9, r2
   1679c:	ands	r9, r9, #255	; 0xff
   167a0:	beq	167e4 <__assert_fail@plt+0x54b4>
   167a4:	cmp	fp, r7
   167a8:	movhi	r2, #39	; 0x27
   167ac:	ldrhi	r3, [sp, #32]
   167b0:	str	r9, [sp, #40]	; 0x28
   167b4:	strbhi	r2, [r3, r7]
   167b8:	add	r3, r7, #1
   167bc:	cmp	fp, r3
   167c0:	movhi	r1, #36	; 0x24
   167c4:	ldrhi	r2, [sp, #32]
   167c8:	strbhi	r1, [r2, r3]
   167cc:	add	r3, r7, #2
   167d0:	cmp	fp, r3
   167d4:	add	r7, r7, #3
   167d8:	ldrhi	r2, [sp, #32]
   167dc:	movhi	r1, #39	; 0x27
   167e0:	strbhi	r1, [r2, r3]
   167e4:	cmp	fp, r7
   167e8:	movhi	r2, #92	; 0x5c
   167ec:	ldrhi	r3, [sp, #32]
   167f0:	add	sl, sl, #1
   167f4:	strbhi	r2, [r3, r7]
   167f8:	add	r7, r7, #1
   167fc:	b	16684 <__assert_fail@plt+0x5354>
   16800:	ldr	r3, [sp, #152]	; 0x98
   16804:	mov	r4, #11
   16808:	sub	r2, r3, #2
   1680c:	mov	r3, #118	; 0x76
   16810:	clz	r2, r2
   16814:	lsr	r2, r2, #5
   16818:	b	16768 <__assert_fail@plt+0x5438>
   1681c:	mov	r4, #10
   16820:	mov	r3, #110	; 0x6e
   16824:	ldr	r2, [sp, #152]	; 0x98
   16828:	ldr	r1, [sp, #28]
   1682c:	sub	r2, r2, #2
   16830:	clz	r2, r2
   16834:	lsr	r2, r2, #5
   16838:	ands	r1, r1, r2
   1683c:	beq	16768 <__assert_fail@plt+0x5438>
   16840:	ldr	sl, [sp, #32]
   16844:	mov	r8, fp
   16848:	mov	r2, r1
   1684c:	mov	r3, #2
   16850:	str	r3, [sp, #152]	; 0x98
   16854:	ldr	r9, [sp, #44]	; 0x2c
   16858:	ldr	r3, [sp, #152]	; 0x98
   1685c:	and	r9, r9, r2
   16860:	tst	r9, #255	; 0xff
   16864:	movne	r3, #4
   16868:	str	r3, [sp, #152]	; 0x98
   1686c:	ldr	r3, [sp, #156]	; 0x9c
   16870:	mov	ip, #0
   16874:	bic	r3, r3, #2
   16878:	str	r3, [sp, #4]
   1687c:	ldr	r3, [sp, #168]	; 0xa8
   16880:	ldr	r2, [sp, #56]	; 0x38
   16884:	str	r3, [sp, #16]
   16888:	ldr	r3, [sp, #164]	; 0xa4
   1688c:	mov	r1, r8
   16890:	str	r3, [sp, #12]
   16894:	ldr	r3, [sp, #152]	; 0x98
   16898:	mov	r0, sl
   1689c:	str	r3, [sp]
   168a0:	str	ip, [sp, #8]
   168a4:	ldr	r3, [sp, #24]
   168a8:	bl	16090 <__assert_fail@plt+0x4d60>
   168ac:	mov	fp, r0
   168b0:	mov	r0, fp
   168b4:	add	sp, sp, #116	; 0x74
   168b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168bc:	ldr	r3, [sp, #152]	; 0x98
   168c0:	mov	r4, #8
   168c4:	sub	r2, r3, #2
   168c8:	mov	r3, #98	; 0x62
   168cc:	clz	r2, r2
   168d0:	lsr	r2, r2, #5
   168d4:	b	16768 <__assert_fail@plt+0x5438>
   168d8:	ldr	r3, [sp, #152]	; 0x98
   168dc:	mov	r4, #7
   168e0:	sub	r2, r3, #2
   168e4:	mov	r3, #97	; 0x61
   168e8:	clz	r2, r2
   168ec:	lsr	r2, r2, #5
   168f0:	b	16768 <__assert_fail@plt+0x5438>
   168f4:	ldr	r3, [sp, #44]	; 0x2c
   168f8:	cmp	r3, #0
   168fc:	beq	170e0 <__assert_fail@plt+0x5db0>
   16900:	ldr	r3, [sp, #28]
   16904:	cmp	r3, #0
   16908:	bne	173b8 <__assert_fail@plt+0x6088>
   1690c:	ldr	r3, [sp, #152]	; 0x98
   16910:	sub	r2, r3, #2
   16914:	ldr	r3, [sp, #40]	; 0x28
   16918:	clz	r2, r2
   1691c:	eor	r3, r3, #1
   16920:	lsr	r2, r2, #5
   16924:	ands	r3, r2, r3
   16928:	moveq	r1, r7
   1692c:	beq	16970 <__assert_fail@plt+0x5640>
   16930:	cmp	fp, r7
   16934:	movhi	r0, #39	; 0x27
   16938:	ldrhi	r1, [sp, #32]
   1693c:	str	r3, [sp, #40]	; 0x28
   16940:	strbhi	r0, [r1, r7]
   16944:	add	r1, r7, #1
   16948:	cmp	fp, r1
   1694c:	movhi	ip, #36	; 0x24
   16950:	ldrhi	r0, [sp, #32]
   16954:	strbhi	ip, [r0, r1]
   16958:	add	r1, r7, #2
   1695c:	cmp	fp, r1
   16960:	movhi	ip, #39	; 0x27
   16964:	ldrhi	r0, [sp, #32]
   16968:	strbhi	ip, [r0, r1]
   1696c:	add	r1, r7, #3
   16970:	cmp	fp, r1
   16974:	movhi	r0, #92	; 0x5c
   16978:	ldrhi	r3, [sp, #32]
   1697c:	add	r7, r1, #1
   16980:	strbhi	r0, [r3, r1]
   16984:	cmp	r8, #0
   16988:	beq	172cc <__assert_fail@plt+0x5f9c>
   1698c:	ldr	r0, [sp, #24]
   16990:	add	r3, sl, #1
   16994:	cmp	r3, r0
   16998:	bcs	17208 <__assert_fail@plt+0x5ed8>
   1699c:	ldr	r0, [sp, #56]	; 0x38
   169a0:	ldrb	r3, [r0, r3]
   169a4:	sub	r3, r3, #48	; 0x30
   169a8:	cmp	r3, #9
   169ac:	bhi	17208 <__assert_fail@plt+0x5ed8>
   169b0:	cmp	fp, r7
   169b4:	movhi	r3, #48	; 0x30
   169b8:	ldrhi	r0, [sp, #32]
   169bc:	ldr	r5, [sp, #28]
   169c0:	mov	r4, #48	; 0x30
   169c4:	strbhi	r3, [r0, r7]
   169c8:	add	r3, r1, #2
   169cc:	cmp	fp, r3
   169d0:	movhi	r0, #48	; 0x30
   169d4:	ldrhi	ip, [sp, #32]
   169d8:	add	r7, r1, #3
   169dc:	strbhi	r0, [ip, r3]
   169e0:	b	16614 <__assert_fail@plt+0x52e4>
   169e4:	mov	r5, #0
   169e8:	ldr	r3, [sp, #152]	; 0x98
   169ec:	sub	r2, r3, #2
   169f0:	ldr	r3, [sp, #28]
   169f4:	clz	r2, r2
   169f8:	lsr	r2, r2, #5
   169fc:	ands	r8, r3, r2
   16a00:	beq	16614 <__assert_fail@plt+0x52e4>
   16a04:	mov	r3, r8
   16a08:	mov	r2, r3
   16a0c:	mov	r3, #2
   16a10:	ldr	sl, [sp, #32]
   16a14:	mov	r8, fp
   16a18:	str	r3, [sp, #152]	; 0x98
   16a1c:	b	16854 <__assert_fail@plt+0x5524>
   16a20:	ldr	r3, [sp, #152]	; 0x98
   16a24:	cmp	r3, #2
   16a28:	beq	1714c <__assert_fail@plt+0x5e1c>
   16a2c:	cmp	r3, #5
   16a30:	beq	1710c <__assert_fail@plt+0x5ddc>
   16a34:	mov	r5, #0
   16a38:	sub	r2, r3, #2
   16a3c:	mov	r8, r5
   16a40:	clz	r2, r2
   16a44:	mov	r4, #63	; 0x3f
   16a48:	lsr	r2, r2, #5
   16a4c:	b	16614 <__assert_fail@plt+0x52e4>
   16a50:	ldr	r3, [sp, #152]	; 0x98
   16a54:	cmp	r3, #2
   16a58:	beq	1716c <__assert_fail@plt+0x5e3c>
   16a5c:	mov	r2, #0
   16a60:	str	r5, [sp, #68]	; 0x44
   16a64:	mov	r8, r2
   16a68:	mov	r4, #39	; 0x27
   16a6c:	b	16614 <__assert_fail@plt+0x52e4>
   16a70:	mov	r4, #13
   16a74:	mov	r3, #114	; 0x72
   16a78:	b	16824 <__assert_fail@plt+0x54f4>
   16a7c:	ldr	r3, [sp, #152]	; 0x98
   16a80:	mov	r8, #0
   16a84:	sub	r2, r3, #2
   16a88:	clz	r2, r2
   16a8c:	lsr	r2, r2, #5
   16a90:	b	16614 <__assert_fail@plt+0x52e4>
   16a94:	ldr	r3, [sp, #152]	; 0x98
   16a98:	mov	r4, #12
   16a9c:	sub	r2, r3, #2
   16aa0:	mov	r3, #102	; 0x66
   16aa4:	clz	r2, r2
   16aa8:	lsr	r2, r2, #5
   16aac:	b	16768 <__assert_fail@plt+0x5438>
   16ab0:	mov	r5, r6
   16ab4:	b	169e8 <__assert_fail@plt+0x56b8>
   16ab8:	ldr	r3, [sp, #152]	; 0x98
   16abc:	sub	r2, r3, #2
   16ac0:	mov	r3, #116	; 0x74
   16ac4:	clz	r2, r2
   16ac8:	lsr	r2, r2, #5
   16acc:	b	16768 <__assert_fail@plt+0x5438>
   16ad0:	ldr	r8, [sp, #76]	; 0x4c
   16ad4:	cmp	r8, #1
   16ad8:	bne	16f88 <__assert_fail@plt+0x5c58>
   16adc:	bl	111a4 <__ctype_b_loc@plt>
   16ae0:	sxth	r3, r4
   16ae4:	mov	ip, r8
   16ae8:	lsl	r3, r3, #1
   16aec:	ldr	r2, [r0]
   16af0:	ldrh	r3, [r2, r3]
   16af4:	and	r3, r3, #16384	; 0x4000
   16af8:	cmp	r3, #0
   16afc:	movne	r5, #1
   16b00:	moveq	r5, #0
   16b04:	moveq	r3, #1
   16b08:	movne	r3, #0
   16b0c:	ldr	r2, [sp, #44]	; 0x2c
   16b10:	and	r3, r3, r2
   16b14:	ands	r8, r3, #255	; 0xff
   16b18:	bne	16e1c <__assert_fail@plt+0x5aec>
   16b1c:	ldr	r3, [sp, #152]	; 0x98
   16b20:	sub	r2, r3, #2
   16b24:	clz	r2, r2
   16b28:	lsr	r2, r2, #5
   16b2c:	b	16614 <__assert_fail@plt+0x52e4>
   16b30:	ldr	r3, [sp, #56]	; 0x38
   16b34:	add	r3, r3, sl
   16b38:	str	r3, [sp, #48]	; 0x30
   16b3c:	ldr	r3, [sp, #48]	; 0x30
   16b40:	mov	r6, #0
   16b44:	ldrb	r4, [r3]
   16b48:	cmp	r4, #126	; 0x7e
   16b4c:	ldrls	pc, [pc, r4, lsl #2]
   16b50:	b	16ad0 <__assert_fail@plt+0x57a0>
   16b54:	strdeq	r6, [r1], -r4
   16b58:	ldrdeq	r6, [r1], -r0
   16b5c:	ldrdeq	r6, [r1], -r0
   16b60:	ldrdeq	r6, [r1], -r0
   16b64:	ldrdeq	r6, [r1], -r0
   16b68:	ldrdeq	r6, [r1], -r0
   16b6c:	ldrdeq	r6, [r1], -r0
   16b70:	ldrdeq	r6, [r1], -r8
   16b74:			; <UNDEFINED> instruction: 0x000168bc
   16b78:	andeq	r6, r1, r0, asr sp
   16b7c:	andeq	r6, r1, ip, lsl r8
   16b80:	andeq	r6, r1, r0, lsl #16
   16b84:	muleq	r1, r4, sl
   16b88:	andeq	r6, r1, r0, ror sl
   16b8c:	ldrdeq	r6, [r1], -r0
   16b90:	ldrdeq	r6, [r1], -r0
   16b94:	ldrdeq	r6, [r1], -r0
   16b98:	ldrdeq	r6, [r1], -r0
   16b9c:	ldrdeq	r6, [r1], -r0
   16ba0:	ldrdeq	r6, [r1], -r0
   16ba4:	ldrdeq	r6, [r1], -r0
   16ba8:	ldrdeq	r6, [r1], -r0
   16bac:	ldrdeq	r6, [r1], -r0
   16bb0:	ldrdeq	r6, [r1], -r0
   16bb4:	ldrdeq	r6, [r1], -r0
   16bb8:	ldrdeq	r6, [r1], -r0
   16bbc:	ldrdeq	r6, [r1], -r0
   16bc0:	ldrdeq	r6, [r1], -r0
   16bc4:	ldrdeq	r6, [r1], -r0
   16bc8:	ldrdeq	r6, [r1], -r0
   16bcc:	ldrdeq	r6, [r1], -r0
   16bd0:	ldrdeq	r6, [r1], -r0
   16bd4:	andeq	r6, r1, r8, ror #19
   16bd8:	andeq	r6, r1, r4, ror #19
   16bdc:	andeq	r6, r1, r4, ror #19
   16be0:	strdeq	r6, [r1], -r4
   16be4:	andeq	r6, r1, r4, ror #19
   16be8:	andeq	r6, r1, ip, ror sl
   16bec:	andeq	r6, r1, r4, ror #19
   16bf0:	andeq	r6, r1, r0, asr sl
   16bf4:	andeq	r6, r1, r4, ror #19
   16bf8:	andeq	r6, r1, r4, ror #19
   16bfc:	andeq	r6, r1, r4, ror #19
   16c00:	andeq	r6, r1, ip, ror sl
   16c04:	andeq	r6, r1, ip, ror sl
   16c08:	andeq	r6, r1, ip, ror sl
   16c0c:	andeq	r6, r1, ip, ror sl
   16c10:	andeq	r6, r1, ip, ror sl
   16c14:	andeq	r6, r1, ip, ror sl
   16c18:	andeq	r6, r1, ip, ror sl
   16c1c:	andeq	r6, r1, ip, ror sl
   16c20:	andeq	r6, r1, ip, ror sl
   16c24:	andeq	r6, r1, ip, ror sl
   16c28:	andeq	r6, r1, ip, ror sl
   16c2c:	andeq	r6, r1, ip, ror sl
   16c30:	andeq	r6, r1, ip, ror sl
   16c34:	andeq	r6, r1, ip, ror sl
   16c38:	andeq	r6, r1, ip, ror sl
   16c3c:	andeq	r6, r1, ip, ror sl
   16c40:	andeq	r6, r1, r4, ror #19
   16c44:	andeq	r6, r1, r4, ror #19
   16c48:	andeq	r6, r1, r4, ror #19
   16c4c:	andeq	r6, r1, r4, ror #19
   16c50:	andeq	r6, r1, r0, lsr #20
   16c54:	ldrdeq	r6, [r1], -r0
   16c58:	andeq	r6, r1, ip, ror sl
   16c5c:	andeq	r6, r1, ip, ror sl
   16c60:	andeq	r6, r1, ip, ror sl
   16c64:	andeq	r6, r1, ip, ror sl
   16c68:	andeq	r6, r1, ip, ror sl
   16c6c:	andeq	r6, r1, ip, ror sl
   16c70:	andeq	r6, r1, ip, ror sl
   16c74:	andeq	r6, r1, ip, ror sl
   16c78:	andeq	r6, r1, ip, ror sl
   16c7c:	andeq	r6, r1, ip, ror sl
   16c80:	andeq	r6, r1, ip, ror sl
   16c84:	andeq	r6, r1, ip, ror sl
   16c88:	andeq	r6, r1, ip, ror sl
   16c8c:	andeq	r6, r1, ip, ror sl
   16c90:	andeq	r6, r1, ip, ror sl
   16c94:	andeq	r6, r1, ip, ror sl
   16c98:	andeq	r6, r1, ip, ror sl
   16c9c:	andeq	r6, r1, ip, ror sl
   16ca0:	andeq	r6, r1, ip, ror sl
   16ca4:	andeq	r6, r1, ip, ror sl
   16ca8:	andeq	r6, r1, ip, ror sl
   16cac:	andeq	r6, r1, ip, ror sl
   16cb0:	andeq	r6, r1, ip, ror sl
   16cb4:	andeq	r6, r1, ip, ror sl
   16cb8:	andeq	r6, r1, ip, ror sl
   16cbc:	andeq	r6, r1, ip, ror sl
   16cc0:	andeq	r6, r1, r4, ror #19
   16cc4:	andeq	r6, r1, r0, asr #14
   16cc8:	andeq	r6, r1, ip, ror sl
   16ccc:	andeq	r6, r1, r4, ror #19
   16cd0:	andeq	r6, r1, ip, ror sl
   16cd4:	andeq	r6, r1, r4, ror #19
   16cd8:	andeq	r6, r1, ip, ror sl
   16cdc:	andeq	r6, r1, ip, ror sl
   16ce0:	andeq	r6, r1, ip, ror sl
   16ce4:	andeq	r6, r1, ip, ror sl
   16ce8:	andeq	r6, r1, ip, ror sl
   16cec:	andeq	r6, r1, ip, ror sl
   16cf0:	andeq	r6, r1, ip, ror sl
   16cf4:	andeq	r6, r1, ip, ror sl
   16cf8:	andeq	r6, r1, ip, ror sl
   16cfc:	andeq	r6, r1, ip, ror sl
   16d00:	andeq	r6, r1, ip, ror sl
   16d04:	andeq	r6, r1, ip, ror sl
   16d08:	andeq	r6, r1, ip, ror sl
   16d0c:	andeq	r6, r1, ip, ror sl
   16d10:	andeq	r6, r1, ip, ror sl
   16d14:	andeq	r6, r1, ip, ror sl
   16d18:	andeq	r6, r1, ip, ror sl
   16d1c:	andeq	r6, r1, ip, ror sl
   16d20:	andeq	r6, r1, ip, ror sl
   16d24:	andeq	r6, r1, ip, ror sl
   16d28:	andeq	r6, r1, ip, ror sl
   16d2c:	andeq	r6, r1, ip, ror sl
   16d30:	andeq	r6, r1, ip, ror sl
   16d34:	andeq	r6, r1, ip, ror sl
   16d38:	andeq	r6, r1, ip, ror sl
   16d3c:	andeq	r6, r1, ip, ror sl
   16d40:	ldrdeq	r6, [r1], -r4
   16d44:	andeq	r6, r1, r4, ror #19
   16d48:	ldrdeq	r6, [r1], -r4
   16d4c:	strdeq	r6, [r1], -r4
   16d50:	mov	r3, #116	; 0x74
   16d54:	b	16824 <__assert_fail@plt+0x54f4>
   16d58:	ldr	r3, [sp, #160]	; 0xa0
   16d5c:	cmp	r3, #0
   16d60:	beq	16630 <__assert_fail@plt+0x5300>
   16d64:	lsr	r3, r4, #5
   16d68:	ldr	r0, [sp, #160]	; 0xa0
   16d6c:	uxtb	r3, r3
   16d70:	and	r1, r4, #31
   16d74:	ldr	r0, [r0, r3, lsl #2]
   16d78:	lsr	r3, r0, r1
   16d7c:	tst	r3, #1
   16d80:	beq	16630 <__assert_fail@plt+0x5300>
   16d84:	ldr	r3, [sp, #28]
   16d88:	cmp	r3, #0
   16d8c:	beq	16790 <__assert_fail@plt+0x5460>
   16d90:	ldr	sl, [sp, #32]
   16d94:	mov	r8, fp
   16d98:	b	16854 <__assert_fail@plt+0x5524>
   16d9c:	ldr	r3, [sp, #28]
   16da0:	cmp	r3, #0
   16da4:	bne	172f8 <__assert_fail@plt+0x5fc8>
   16da8:	add	sl, sl, #1
   16dac:	ldr	r6, [sp, #40]	; 0x28
   16db0:	mov	r5, #0
   16db4:	mov	r4, #92	; 0x5c
   16db8:	b	1664c <__assert_fail@plt+0x531c>
   16dbc:	cmp	r9, r8
   16dc0:	bne	17030 <__assert_fail@plt+0x5d00>
   16dc4:	ldr	r0, [sp, #100]	; 0x64
   16dc8:	bl	110f0 <iswprint@plt>
   16dcc:	add	r5, r5, r4
   16dd0:	cmp	r0, #0
   16dd4:	add	r0, sp, #104	; 0x68
   16dd8:	moveq	r6, #0
   16ddc:	bl	11090 <mbsinit@plt>
   16de0:	cmp	r0, #0
   16de4:	beq	16fc4 <__assert_fail@plt+0x5c94>
   16de8:	mov	r2, r6
   16dec:	mov	ip, r5
   16df0:	eor	r5, r2, #1
   16df4:	ldr	r4, [sp, #80]	; 0x50
   16df8:	ldr	r6, [sp, #84]	; 0x54
   16dfc:	ldr	r7, [sp, #88]	; 0x58
   16e00:	uxtb	r5, r5
   16e04:	cmp	ip, #1
   16e08:	bls	17308 <__assert_fail@plt+0x5fd8>
   16e0c:	ldr	r3, [sp, #44]	; 0x2c
   16e10:	and	r8, r3, r5
   16e14:	mov	r5, r2
   16e18:	uxtb	r8, r8
   16e1c:	add	r2, sl, ip
   16e20:	ldr	r0, [sp, #48]	; 0x30
   16e24:	mov	r1, #0
   16e28:	str	r5, [sp, #48]	; 0x30
   16e2c:	ldr	r9, [sp, #28]
   16e30:	ldr	ip, [sp, #40]	; 0x28
   16e34:	ldr	r3, [sp, #32]
   16e38:	ldr	r5, [sp, #152]	; 0x98
   16e3c:	b	16ef8 <__assert_fail@plt+0x5bc8>
   16e40:	cmp	r9, #0
   16e44:	bne	1721c <__assert_fail@plt+0x5eec>
   16e48:	eor	r1, ip, #1
   16e4c:	cmp	r5, #2
   16e50:	movne	r1, #0
   16e54:	andeq	r1, r1, #1
   16e58:	cmp	r1, #0
   16e5c:	beq	16e94 <__assert_fail@plt+0x5b64>
   16e60:	cmp	fp, r7
   16e64:	movhi	ip, #39	; 0x27
   16e68:	strbhi	ip, [r3, r7]
   16e6c:	add	ip, r7, #1
   16e70:	cmp	fp, ip
   16e74:	movhi	lr, #36	; 0x24
   16e78:	strbhi	lr, [r3, ip]
   16e7c:	add	ip, r7, #2
   16e80:	cmp	fp, ip
   16e84:	movhi	lr, #39	; 0x27
   16e88:	strbhi	lr, [r3, ip]
   16e8c:	add	r7, r7, #3
   16e90:	mov	ip, r1
   16e94:	cmp	fp, r7
   16e98:	movhi	r1, #92	; 0x5c
   16e9c:	strbhi	r1, [r3, r7]
   16ea0:	add	r1, r7, #1
   16ea4:	cmp	fp, r1
   16ea8:	lsrhi	lr, r4, #6
   16eac:	addhi	lr, lr, #48	; 0x30
   16eb0:	strbhi	lr, [r3, r1]
   16eb4:	add	lr, r7, #2
   16eb8:	cmp	fp, lr
   16ebc:	lsrhi	r1, r4, #3
   16ec0:	andhi	r1, r1, #7
   16ec4:	addhi	r1, r1, #48	; 0x30
   16ec8:	add	sl, sl, #1
   16ecc:	strbhi	r1, [r3, lr]
   16ed0:	and	r4, r4, #7
   16ed4:	cmp	r2, sl
   16ed8:	add	r4, r4, #48	; 0x30
   16edc:	add	r7, r7, #3
   16ee0:	bls	17240 <__assert_fail@plt+0x5f10>
   16ee4:	mov	r1, r8
   16ee8:	cmp	fp, r7
   16eec:	strbhi	r4, [r3, r7]
   16ef0:	ldrb	r4, [r0, #1]!
   16ef4:	add	r7, r7, #1
   16ef8:	cmp	r8, #0
   16efc:	bne	16e40 <__assert_fail@plt+0x5b10>
   16f00:	cmp	r6, #0
   16f04:	bne	16f54 <__assert_fail@plt+0x5c24>
   16f08:	eor	r6, r1, #1
   16f0c:	and	r6, r6, ip
   16f10:	add	sl, sl, #1
   16f14:	cmp	r2, sl
   16f18:	uxtb	r6, r6
   16f1c:	bls	16f7c <__assert_fail@plt+0x5c4c>
   16f20:	cmp	r6, #0
   16f24:	beq	16ee8 <__assert_fail@plt+0x5bb8>
   16f28:	cmp	fp, r7
   16f2c:	movhi	ip, #39	; 0x27
   16f30:	strbhi	ip, [r3, r7]
   16f34:	add	ip, r7, #1
   16f38:	cmp	fp, ip
   16f3c:	movhi	lr, #39	; 0x27
   16f40:	strbhi	lr, [r3, ip]
   16f44:	add	r7, r7, #2
   16f48:	mov	r6, r8
   16f4c:	mov	ip, r8
   16f50:	b	16ee8 <__assert_fail@plt+0x5bb8>
   16f54:	cmp	fp, r7
   16f58:	eor	r6, r1, #1
   16f5c:	movhi	lr, #92	; 0x5c
   16f60:	and	r6, r6, ip
   16f64:	add	sl, sl, #1
   16f68:	strbhi	lr, [r3, r7]
   16f6c:	cmp	r2, sl
   16f70:	add	r7, r7, #1
   16f74:	uxtb	r6, r6
   16f78:	bhi	16f20 <__assert_fail@plt+0x5bf0>
   16f7c:	str	ip, [sp, #40]	; 0x28
   16f80:	ldr	r5, [sp, #48]	; 0x30
   16f84:	b	1664c <__assert_fail@plt+0x531c>
   16f88:	ldr	r3, [sp, #24]
   16f8c:	cmn	r3, #1
   16f90:	mov	r3, #0
   16f94:	str	r3, [sp, #104]	; 0x68
   16f98:	str	r3, [sp, #108]	; 0x6c
   16f9c:	beq	172bc <__assert_fail@plt+0x5f8c>
   16fa0:	mov	r2, r5
   16fa4:	mov	r3, #0
   16fa8:	str	r7, [sp, #88]	; 0x58
   16fac:	ldr	r7, [sp, #152]	; 0x98
   16fb0:	str	r5, [sp, #92]	; 0x5c
   16fb4:	str	r6, [sp, #84]	; 0x54
   16fb8:	mov	r5, r3
   16fbc:	mov	r6, r2
   16fc0:	str	r4, [sp, #80]	; 0x50
   16fc4:	ldr	r3, [sp, #56]	; 0x38
   16fc8:	add	r9, sl, r5
   16fcc:	add	r8, r3, r9
   16fd0:	ldr	r3, [sp, #24]
   16fd4:	mov	r1, r8
   16fd8:	sub	r2, r3, r9
   16fdc:	add	r0, sp, #100	; 0x64
   16fe0:	add	r3, sp, #104	; 0x68
   16fe4:	bl	19574 <__assert_fail@plt+0x8244>
   16fe8:	subs	r4, r0, #0
   16fec:	beq	17394 <__assert_fail@plt+0x6064>
   16ff0:	cmn	r4, #1
   16ff4:	beq	17374 <__assert_fail@plt+0x6044>
   16ff8:	cmn	r4, #2
   16ffc:	beq	17314 <__assert_fail@plt+0x5fe4>
   17000:	ldr	r2, [sp, #28]
   17004:	cmp	r7, #2
   17008:	movne	r2, #0
   1700c:	andeq	r2, r2, #1
   17010:	cmp	r2, #0
   17014:	beq	16dc4 <__assert_fail@plt+0x5a94>
   17018:	cmp	r4, #1
   1701c:	beq	16dc4 <__assert_fail@plt+0x5a94>
   17020:	sub	r3, r4, #1
   17024:	add	r9, r3, r9
   17028:	ldr	r3, [sp, #56]	; 0x38
   1702c:	add	r9, r3, r9
   17030:	ldrb	r3, [r8, #1]!
   17034:	sub	r3, r3, #91	; 0x5b
   17038:	cmp	r3, #33	; 0x21
   1703c:	ldrls	pc, [pc, r3, lsl #2]
   17040:	b	16dbc <__assert_fail@plt+0x5a8c>
   17044:	andeq	r7, r1, ip, asr #1
   17048:	andeq	r7, r1, ip, asr #1
   1704c:			; <UNDEFINED> instruction: 0x00016dbc
   17050:	andeq	r7, r1, ip, asr #1
   17054:			; <UNDEFINED> instruction: 0x00016dbc
   17058:	andeq	r7, r1, ip, asr #1
   1705c:			; <UNDEFINED> instruction: 0x00016dbc
   17060:			; <UNDEFINED> instruction: 0x00016dbc
   17064:			; <UNDEFINED> instruction: 0x00016dbc
   17068:			; <UNDEFINED> instruction: 0x00016dbc
   1706c:			; <UNDEFINED> instruction: 0x00016dbc
   17070:			; <UNDEFINED> instruction: 0x00016dbc
   17074:			; <UNDEFINED> instruction: 0x00016dbc
   17078:			; <UNDEFINED> instruction: 0x00016dbc
   1707c:			; <UNDEFINED> instruction: 0x00016dbc
   17080:			; <UNDEFINED> instruction: 0x00016dbc
   17084:			; <UNDEFINED> instruction: 0x00016dbc
   17088:			; <UNDEFINED> instruction: 0x00016dbc
   1708c:			; <UNDEFINED> instruction: 0x00016dbc
   17090:			; <UNDEFINED> instruction: 0x00016dbc
   17094:			; <UNDEFINED> instruction: 0x00016dbc
   17098:			; <UNDEFINED> instruction: 0x00016dbc
   1709c:			; <UNDEFINED> instruction: 0x00016dbc
   170a0:			; <UNDEFINED> instruction: 0x00016dbc
   170a4:			; <UNDEFINED> instruction: 0x00016dbc
   170a8:			; <UNDEFINED> instruction: 0x00016dbc
   170ac:			; <UNDEFINED> instruction: 0x00016dbc
   170b0:			; <UNDEFINED> instruction: 0x00016dbc
   170b4:			; <UNDEFINED> instruction: 0x00016dbc
   170b8:			; <UNDEFINED> instruction: 0x00016dbc
   170bc:			; <UNDEFINED> instruction: 0x00016dbc
   170c0:			; <UNDEFINED> instruction: 0x00016dbc
   170c4:			; <UNDEFINED> instruction: 0x00016dbc
   170c8:	andeq	r7, r1, ip, asr #1
   170cc:	mov	r3, #2
   170d0:	ldr	sl, [sp, #32]
   170d4:	mov	r8, fp
   170d8:	str	r3, [sp, #152]	; 0x98
   170dc:	b	16854 <__assert_fail@plt+0x5524>
   170e0:	ldr	r3, [sp, #156]	; 0x9c
   170e4:	tst	r3, #1
   170e8:	bne	17214 <__assert_fail@plt+0x5ee4>
   170ec:	ldr	r3, [sp, #152]	; 0x98
   170f0:	ldr	r4, [sp, #44]	; 0x2c
   170f4:	sub	r2, r3, #2
   170f8:	mov	r5, #0
   170fc:	clz	r2, r2
   17100:	mov	r8, r4
   17104:	lsr	r2, r2, #5
   17108:	b	16614 <__assert_fail@plt+0x52e4>
   1710c:	ldr	r3, [sp, #156]	; 0x9c
   17110:	ands	r9, r3, #4
   17114:	beq	1724c <__assert_fail@plt+0x5f1c>
   17118:	ldr	r2, [sp, #24]
   1711c:	add	r3, sl, #2
   17120:	cmp	r3, r2
   17124:	bcs	17138 <__assert_fail@plt+0x5e08>
   17128:	ldr	r2, [sp, #48]	; 0x30
   1712c:	ldrb	r4, [r2, #1]
   17130:	cmp	r4, #63	; 0x3f
   17134:	beq	173d4 <__assert_fail@plt+0x60a4>
   17138:	mov	r2, #0
   1713c:	mov	r8, r2
   17140:	mov	r5, r2
   17144:	mov	r4, #63	; 0x3f
   17148:	b	16614 <__assert_fail@plt+0x52e4>
   1714c:	ldr	r3, [sp, #28]
   17150:	cmp	r3, #0
   17154:	bne	17478 <__assert_fail@plt+0x6148>
   17158:	mov	r2, r5
   1715c:	mov	r8, r3
   17160:	mov	r5, #0
   17164:	mov	r4, #63	; 0x3f
   17168:	b	16614 <__assert_fail@plt+0x52e4>
   1716c:	ldr	r3, [sp, #28]
   17170:	cmp	r3, #0
   17174:	bne	17478 <__assert_fail@plt+0x6148>
   17178:	ldr	r2, [sp, #72]	; 0x48
   1717c:	adds	r3, fp, #0
   17180:	movne	r3, #1
   17184:	cmp	r2, #0
   17188:	movne	r3, #0
   1718c:	cmp	r3, #0
   17190:	strne	fp, [sp, #72]	; 0x48
   17194:	movne	fp, #0
   17198:	bne	171d4 <__assert_fail@plt+0x5ea4>
   1719c:	cmp	fp, r7
   171a0:	movhi	r2, #39	; 0x27
   171a4:	ldrhi	r3, [sp, #32]
   171a8:	strbhi	r2, [r3, r7]
   171ac:	add	r3, r7, #1
   171b0:	cmp	fp, r3
   171b4:	movhi	r1, #92	; 0x5c
   171b8:	ldrhi	r2, [sp, #32]
   171bc:	strbhi	r1, [r2, r3]
   171c0:	add	r3, r7, #2
   171c4:	cmp	fp, r3
   171c8:	movhi	r1, #39	; 0x27
   171cc:	ldrhi	r2, [sp, #32]
   171d0:	strbhi	r1, [r2, r3]
   171d4:	ldr	r3, [sp, #28]
   171d8:	add	r7, r7, #3
   171dc:	mov	r2, r5
   171e0:	mov	r8, r3
   171e4:	str	r5, [sp, #68]	; 0x44
   171e8:	str	r3, [sp, #40]	; 0x28
   171ec:	mov	r4, #39	; 0x27
   171f0:	b	16614 <__assert_fail@plt+0x52e4>
   171f4:	ldr	r3, [sp, #56]	; 0x38
   171f8:	ldrb	r3, [r3, #1]
   171fc:	adds	r3, r3, #0
   17200:	movne	r3, #1
   17204:	b	165ec <__assert_fail@plt+0x52bc>
   17208:	ldr	r5, [sp, #28]
   1720c:	mov	r4, #48	; 0x30
   17210:	b	16614 <__assert_fail@plt+0x52e4>
   17214:	add	sl, sl, #1
   17218:	b	16144 <__assert_fail@plt+0x4e14>
   1721c:	mov	sl, r3
   17220:	ldr	r3, [sp, #28]
   17224:	mov	r8, fp
   17228:	str	r3, [sp, #44]	; 0x2c
   1722c:	ldr	r3, [sp, #152]	; 0x98
   17230:	sub	r2, r3, #2
   17234:	clz	r2, r2
   17238:	lsr	r2, r2, #5
   1723c:	b	16854 <__assert_fail@plt+0x5524>
   17240:	str	ip, [sp, #40]	; 0x28
   17244:	ldr	r5, [sp, #48]	; 0x30
   17248:	b	16684 <__assert_fail@plt+0x5354>
   1724c:	mov	r2, r9
   17250:	mov	r8, r9
   17254:	mov	r5, #0
   17258:	mov	r4, #63	; 0x3f
   1725c:	b	16614 <__assert_fail@plt+0x52e4>
   17260:	cmp	fp, #0
   17264:	beq	172dc <__assert_fail@plt+0x5fac>
   17268:	ldr	r1, [sp, #32]
   1726c:	mov	r3, #34	; 0x22
   17270:	mov	r2, #1
   17274:	strb	r3, [r1]
   17278:	ldr	r3, [pc, #332]	; 173cc <__assert_fail@plt+0x609c>
   1727c:	str	r2, [sp, #52]	; 0x34
   17280:	mov	r7, r2
   17284:	str	r2, [sp, #44]	; 0x2c
   17288:	str	r3, [sp, #64]	; 0x40
   1728c:	b	16134 <__assert_fail@plt+0x4e04>
   17290:	ldr	r3, [pc, #300]	; 173c4 <__assert_fail@plt+0x6094>
   17294:	str	r3, [sp, #64]	; 0x40
   17298:	mov	r3, #0
   1729c:	str	r3, [sp, #28]
   172a0:	mov	r3, #1
   172a4:	str	r3, [sp, #52]	; 0x34
   172a8:	mov	r7, r3
   172ac:	mov	r3, #2
   172b0:	str	r3, [sp, #152]	; 0x98
   172b4:	b	16134 <__assert_fail@plt+0x4e04>
   172b8:	bl	112e8 <abort@plt>
   172bc:	ldr	r0, [sp, #56]	; 0x38
   172c0:	bl	111bc <strlen@plt>
   172c4:	str	r0, [sp, #24]
   172c8:	b	16fa0 <__assert_fail@plt+0x5c70>
   172cc:	mov	r5, r8
   172d0:	mov	r4, #48	; 0x30
   172d4:	ldr	r8, [sp, #44]	; 0x2c
   172d8:	b	16614 <__assert_fail@plt+0x52e4>
   172dc:	mov	r3, #1
   172e0:	str	r3, [sp, #52]	; 0x34
   172e4:	mov	r7, r3
   172e8:	str	r3, [sp, #44]	; 0x2c
   172ec:	ldr	r3, [pc, #216]	; 173cc <__assert_fail@plt+0x609c>
   172f0:	str	r3, [sp, #64]	; 0x40
   172f4:	b	16134 <__assert_fail@plt+0x4e04>
   172f8:	ldr	sl, [sp, #32]
   172fc:	mov	r8, fp
   17300:	mov	r2, r3
   17304:	b	16854 <__assert_fail@plt+0x5524>
   17308:	mov	r3, r5
   1730c:	mov	r5, r2
   17310:	b	16b0c <__assert_fail@plt+0x57dc>
   17314:	ldr	r1, [sp, #24]
   17318:	mov	r2, r5
   1731c:	cmp	r1, r9
   17320:	mov	ip, r5
   17324:	ldr	r4, [sp, #80]	; 0x50
   17328:	ldr	r5, [sp, #92]	; 0x5c
   1732c:	ldr	r6, [sp, #84]	; 0x54
   17330:	ldr	r7, [sp, #88]	; 0x58
   17334:	bls	17368 <__assert_fail@plt+0x6038>
   17338:	ldrb	r3, [r8]
   1733c:	cmp	r3, #0
   17340:	bne	17354 <__assert_fail@plt+0x6024>
   17344:	b	1736c <__assert_fail@plt+0x603c>
   17348:	ldrb	r3, [r8, #1]!
   1734c:	cmp	r3, #0
   17350:	beq	1746c <__assert_fail@plt+0x613c>
   17354:	add	r2, r2, #1
   17358:	add	r3, sl, r2
   1735c:	cmp	r1, r3
   17360:	bhi	17348 <__assert_fail@plt+0x6018>
   17364:	mov	ip, r2
   17368:	mov	r3, #0
   1736c:	mov	r2, r3
   17370:	b	16e04 <__assert_fail@plt+0x5ad4>
   17374:	mov	r3, #0
   17378:	mov	ip, r5
   1737c:	ldr	r4, [sp, #80]	; 0x50
   17380:	ldr	r5, [sp, #92]	; 0x5c
   17384:	ldr	r6, [sp, #84]	; 0x54
   17388:	ldr	r7, [sp, #88]	; 0x58
   1738c:	mov	r2, r3
   17390:	b	16e04 <__assert_fail@plt+0x5ad4>
   17394:	mov	r3, r6
   17398:	mov	ip, r5
   1739c:	eor	r5, r3, #1
   173a0:	mov	r2, r6
   173a4:	ldr	r4, [sp, #80]	; 0x50
   173a8:	ldr	r6, [sp, #84]	; 0x54
   173ac:	ldr	r7, [sp, #88]	; 0x58
   173b0:	uxtb	r5, r5
   173b4:	b	16e04 <__assert_fail@plt+0x5ad4>
   173b8:	ldr	sl, [sp, #32]
   173bc:	mov	r8, fp
   173c0:	b	17228 <__assert_fail@plt+0x5ef8>
   173c4:	andeq	sl, r1, ip, ror sp
   173c8:	andeq	sl, r1, r0, lsl #27
   173cc:	andeq	sl, r1, r8, ror sp
   173d0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   173d4:	ldr	r2, [sp, #56]	; 0x38
   173d8:	ldrb	r1, [r2, r3]
   173dc:	sub	r2, r1, #33	; 0x21
   173e0:	uxtb	r2, r2
   173e4:	cmp	r2, #29
   173e8:	bhi	17488 <__assert_fail@plt+0x6158>
   173ec:	ldr	r0, [pc, #-36]	; 173d0 <__assert_fail@plt+0x60a0>
   173f0:	mov	ip, #1
   173f4:	ands	r2, r0, ip, lsl r2
   173f8:	beq	17498 <__assert_fail@plt+0x6168>
   173fc:	ldr	r2, [sp, #28]
   17400:	cmp	r2, #0
   17404:	bne	17598 <__assert_fail@plt+0x6268>
   17408:	cmp	fp, r7
   1740c:	ldr	r8, [sp, #28]
   17410:	ldrhi	r2, [sp, #32]
   17414:	mov	sl, r3
   17418:	mov	r5, r8
   1741c:	strbhi	r4, [r2, r7]
   17420:	add	r2, r7, #1
   17424:	cmp	fp, r2
   17428:	movhi	r0, #34	; 0x22
   1742c:	ldrhi	ip, [sp, #32]
   17430:	mov	r4, r1
   17434:	strbhi	r0, [ip, r2]
   17438:	add	r2, r7, #2
   1743c:	cmp	fp, r2
   17440:	movhi	r0, #34	; 0x22
   17444:	ldrhi	ip, [sp, #32]
   17448:	strbhi	r0, [ip, r2]
   1744c:	add	r2, r7, #3
   17450:	cmp	fp, r2
   17454:	movhi	r0, #63	; 0x3f
   17458:	ldrhi	ip, [sp, #32]
   1745c:	add	r7, r7, #4
   17460:	strbhi	r0, [ip, r2]
   17464:	mov	r2, r8
   17468:	b	16614 <__assert_fail@plt+0x52e4>
   1746c:	mov	ip, r2
   17470:	mov	r2, r3
   17474:	b	16e04 <__assert_fail@plt+0x5ad4>
   17478:	ldr	sl, [sp, #32]
   1747c:	mov	r8, fp
   17480:	ldr	r2, [sp, #28]
   17484:	b	16854 <__assert_fail@plt+0x5524>
   17488:	mov	r2, #0
   1748c:	mov	r8, r2
   17490:	mov	r5, r2
   17494:	b	16614 <__assert_fail@plt+0x52e4>
   17498:	mov	r8, r2
   1749c:	mov	r5, #0
   174a0:	b	16614 <__assert_fail@plt+0x52e4>
   174a4:	ldr	r1, [sp, #152]	; 0x98
   174a8:	bl	15f70 <__assert_fail@plt+0x4c40>
   174ac:	str	r0, [sp, #168]	; 0xa8
   174b0:	b	164d0 <__assert_fail@plt+0x51a0>
   174b4:	ldr	r1, [sp, #152]	; 0x98
   174b8:	bl	15f70 <__assert_fail@plt+0x4c40>
   174bc:	str	r0, [sp, #164]	; 0xa4
   174c0:	b	164b0 <__assert_fail@plt+0x5180>
   174c4:	ldr	r7, [sp, #28]
   174c8:	b	16510 <__assert_fail@plt+0x51e0>
   174cc:	ldr	sl, [sp, #32]
   174d0:	ldr	r2, [sp, #68]	; 0x44
   174d4:	mov	r8, fp
   174d8:	mov	fp, r7
   174dc:	ldr	r3, [sp, #64]	; 0x40
   174e0:	cmp	r3, #0
   174e4:	moveq	r2, #0
   174e8:	andne	r2, r2, #1
   174ec:	cmp	r2, #0
   174f0:	beq	1751c <__assert_fail@plt+0x61ec>
   174f4:	mov	r2, r3
   174f8:	ldrb	r3, [r3]
   174fc:	cmp	r3, #0
   17500:	beq	1751c <__assert_fail@plt+0x61ec>
   17504:	cmp	r8, fp
   17508:	strbhi	r3, [sl, fp]
   1750c:	ldrb	r3, [r2, #1]!
   17510:	add	fp, fp, #1
   17514:	cmp	r3, #0
   17518:	bne	17504 <__assert_fail@plt+0x61d4>
   1751c:	cmp	r8, fp
   17520:	movhi	r3, #0
   17524:	strbhi	r3, [sl, fp]
   17528:	b	168b0 <__assert_fail@plt+0x5580>
   1752c:	ldr	r3, [sp, #168]	; 0xa8
   17530:	ldr	sl, [sp, #32]
   17534:	str	r3, [sp, #16]
   17538:	ldr	r3, [sp, #164]	; 0xa4
   1753c:	mov	ip, #5
   17540:	str	r3, [sp, #12]
   17544:	ldr	r3, [sp, #160]	; 0xa0
   17548:	ldr	r2, [sp, #56]	; 0x38
   1754c:	str	r3, [sp, #8]
   17550:	ldr	r3, [sp, #156]	; 0x9c
   17554:	ldr	r1, [sp, #72]	; 0x48
   17558:	str	r3, [sp, #4]
   1755c:	mov	r0, sl
   17560:	ldr	r3, [sp, #24]
   17564:	str	ip, [sp]
   17568:	bl	16090 <__assert_fail@plt+0x4d60>
   1756c:	mov	fp, r0
   17570:	b	168b0 <__assert_fail@plt+0x5580>
   17574:	mov	r8, fp
   17578:	ldr	sl, [sp, #32]
   1757c:	mov	fp, r7
   17580:	mov	r2, r3
   17584:	b	174dc <__assert_fail@plt+0x61ac>
   17588:	mov	r8, fp
   1758c:	ldr	sl, [sp, #32]
   17590:	mov	fp, r7
   17594:	b	174dc <__assert_fail@plt+0x61ac>
   17598:	ldr	sl, [sp, #32]
   1759c:	mov	r8, fp
   175a0:	b	1686c <__assert_fail@plt+0x553c>
   175a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175a8:	sub	sp, sp, #52	; 0x34
   175ac:	mov	r4, r0
   175b0:	mov	r5, r3
   175b4:	mov	sl, r1
   175b8:	mov	fp, r2
   175bc:	bl	111ec <__errno_location@plt>
   175c0:	ldr	r7, [pc, #412]	; 17764 <__assert_fail@plt+0x6434>
   175c4:	cmn	r4, #-2147483647	; 0x80000001
   175c8:	ldr	r6, [r7]
   175cc:	mov	r8, r0
   175d0:	movne	r0, #0
   175d4:	moveq	r0, #1
   175d8:	ldr	r3, [r8]
   175dc:	orrs	r0, r0, r4, lsr #31
   175e0:	str	r3, [sp, #24]
   175e4:	bne	17760 <__assert_fail@plt+0x6430>
   175e8:	ldr	r2, [r7, #4]
   175ec:	cmp	r4, r2
   175f0:	blt	17650 <__assert_fail@plt+0x6320>
   175f4:	add	r9, r7, #8
   175f8:	cmp	r6, r9
   175fc:	str	r2, [sp, #44]	; 0x2c
   17600:	beq	17730 <__assert_fail@plt+0x6400>
   17604:	mov	r3, #8
   17608:	sub	r2, r4, r2
   1760c:	mov	r0, r6
   17610:	str	r3, [sp]
   17614:	add	r2, r2, #1
   17618:	mvn	r3, #-2147483648	; 0x80000000
   1761c:	add	r1, sp, #44	; 0x2c
   17620:	bl	1849c <__assert_fail@plt+0x716c>
   17624:	mov	r6, r0
   17628:	str	r0, [r7]
   1762c:	ldr	r0, [r7, #4]
   17630:	ldr	r2, [sp, #44]	; 0x2c
   17634:	mov	r1, #0
   17638:	sub	r2, r2, r0
   1763c:	add	r0, r6, r0, lsl #3
   17640:	lsl	r2, r2, #3
   17644:	bl	11204 <memset@plt>
   17648:	ldr	r3, [sp, #44]	; 0x2c
   1764c:	str	r3, [r7, #4]
   17650:	add	r3, r6, r4, lsl #3
   17654:	ldr	r1, [r5, #4]
   17658:	ldr	r7, [r3, #4]
   1765c:	ldr	r9, [r6, r4, lsl #3]
   17660:	ldr	r2, [r5, #40]	; 0x28
   17664:	ldr	ip, [r5, #44]	; 0x2c
   17668:	add	r0, r5, #8
   1766c:	str	r3, [sp, #28]
   17670:	ldr	r3, [r5]
   17674:	orr	r1, r1, #1
   17678:	mov	lr, r0
   1767c:	str	r1, [sp, #32]
   17680:	str	r0, [sp, #36]	; 0x24
   17684:	str	r1, [sp, #4]
   17688:	str	r2, [sp, #12]
   1768c:	str	r3, [sp]
   17690:	mov	r0, r7
   17694:	mov	r1, r9
   17698:	str	ip, [sp, #16]
   1769c:	str	lr, [sp, #8]
   176a0:	mov	r3, fp
   176a4:	mov	r2, sl
   176a8:	bl	16090 <__assert_fail@plt+0x4d60>
   176ac:	cmp	r9, r0
   176b0:	bhi	1771c <__assert_fail@plt+0x63ec>
   176b4:	ldr	r3, [pc, #172]	; 17768 <__assert_fail@plt+0x6438>
   176b8:	add	r9, r0, #1
   176bc:	cmp	r7, r3
   176c0:	str	r9, [r6, r4, lsl #3]
   176c4:	beq	176d0 <__assert_fail@plt+0x63a0>
   176c8:	mov	r0, r7
   176cc:	bl	12ba4 <__assert_fail@plt+0x1874>
   176d0:	mov	r0, r9
   176d4:	bl	18338 <__assert_fail@plt+0x7008>
   176d8:	ldr	lr, [sp, #28]
   176dc:	ldr	ip, [r5, #44]	; 0x2c
   176e0:	ldr	r4, [r5, #40]	; 0x28
   176e4:	mov	r3, fp
   176e8:	mov	r2, sl
   176ec:	mov	r1, r9
   176f0:	str	r0, [lr, #4]
   176f4:	ldr	lr, [r5]
   176f8:	ldr	r5, [sp, #36]	; 0x24
   176fc:	str	ip, [sp, #16]
   17700:	str	r5, [sp, #8]
   17704:	ldr	r5, [sp, #32]
   17708:	str	r4, [sp, #12]
   1770c:	str	r5, [sp, #4]
   17710:	str	lr, [sp]
   17714:	mov	r7, r0
   17718:	bl	16090 <__assert_fail@plt+0x4d60>
   1771c:	ldr	r3, [sp, #24]
   17720:	mov	r0, r7
   17724:	str	r3, [r8]
   17728:	add	sp, sp, #52	; 0x34
   1772c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17730:	mov	r3, #8
   17734:	sub	r2, r4, r2
   17738:	str	r3, [sp]
   1773c:	add	r1, sp, #44	; 0x2c
   17740:	add	r2, r2, #1
   17744:	mvn	r3, #-2147483648	; 0x80000000
   17748:	bl	1849c <__assert_fail@plt+0x716c>
   1774c:	mov	r6, r0
   17750:	ldm	r9, {r0, r1}
   17754:	str	r6, [r7]
   17758:	stm	r6, {r0, r1}
   1775c:	b	1762c <__assert_fail@plt+0x62fc>
   17760:	bl	112e8 <abort@plt>
   17764:	andeq	ip, r2, ip, lsr r1
   17768:	andeq	ip, r2, r4, asr #3
   1776c:	push	{r4, r5, r6, lr}
   17770:	mov	r5, r0
   17774:	bl	111ec <__errno_location@plt>
   17778:	cmp	r5, #0
   1777c:	mov	r1, #48	; 0x30
   17780:	mov	r4, r0
   17784:	ldr	r0, [pc, #16]	; 1779c <__assert_fail@plt+0x646c>
   17788:	ldr	r6, [r4]
   1778c:	movne	r0, r5
   17790:	bl	18798 <__assert_fail@plt+0x7468>
   17794:	str	r6, [r4]
   17798:	pop	{r4, r5, r6, pc}
   1779c:	andeq	ip, r2, r4, asr #5
   177a0:	ldr	r3, [pc, #12]	; 177b4 <__assert_fail@plt+0x6484>
   177a4:	cmp	r0, #0
   177a8:	moveq	r0, r3
   177ac:	ldr	r0, [r0]
   177b0:	bx	lr
   177b4:	andeq	ip, r2, r4, asr #5
   177b8:	ldr	r3, [pc, #12]	; 177cc <__assert_fail@plt+0x649c>
   177bc:	cmp	r0, #0
   177c0:	moveq	r0, r3
   177c4:	str	r1, [r0]
   177c8:	bx	lr
   177cc:	andeq	ip, r2, r4, asr #5
   177d0:	ldr	r3, [pc, #52]	; 1780c <__assert_fail@plt+0x64dc>
   177d4:	cmp	r0, #0
   177d8:	moveq	r0, r3
   177dc:	add	r3, r0, #8
   177e0:	push	{lr}		; (str lr, [sp, #-4]!)
   177e4:	lsr	lr, r1, #5
   177e8:	and	r1, r1, #31
   177ec:	ldr	ip, [r3, lr, lsl #2]
   177f0:	lsr	r0, ip, r1
   177f4:	eor	r2, r2, r0
   177f8:	and	r2, r2, #1
   177fc:	and	r0, r0, #1
   17800:	eor	r1, ip, r2, lsl r1
   17804:	str	r1, [r3, lr, lsl #2]
   17808:	pop	{pc}		; (ldr pc, [sp], #4)
   1780c:	andeq	ip, r2, r4, asr #5
   17810:	ldr	r3, [pc, #16]	; 17828 <__assert_fail@plt+0x64f8>
   17814:	cmp	r0, #0
   17818:	movne	r3, r0
   1781c:	ldr	r0, [r3, #4]
   17820:	str	r1, [r3, #4]
   17824:	bx	lr
   17828:	andeq	ip, r2, r4, asr #5
   1782c:	ldr	r3, [pc, #44]	; 17860 <__assert_fail@plt+0x6530>
   17830:	cmp	r0, #0
   17834:	moveq	r0, r3
   17838:	mov	ip, #10
   1783c:	cmp	r2, #0
   17840:	cmpne	r1, #0
   17844:	str	ip, [r0]
   17848:	beq	17858 <__assert_fail@plt+0x6528>
   1784c:	str	r1, [r0, #40]	; 0x28
   17850:	str	r2, [r0, #44]	; 0x2c
   17854:	bx	lr
   17858:	push	{r4, lr}
   1785c:	bl	112e8 <abort@plt>
   17860:	andeq	ip, r2, r4, asr #5
   17864:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17868:	sub	sp, sp, #24
   1786c:	ldr	ip, [pc, #108]	; 178e0 <__assert_fail@plt+0x65b0>
   17870:	ldr	r4, [sp, #56]	; 0x38
   17874:	mov	r9, r2
   17878:	cmp	r4, #0
   1787c:	moveq	r4, ip
   17880:	mov	sl, r3
   17884:	mov	r7, r0
   17888:	mov	r8, r1
   1788c:	bl	111ec <__errno_location@plt>
   17890:	ldr	r3, [r4, #44]	; 0x2c
   17894:	mov	r1, r8
   17898:	ldr	r6, [r0]
   1789c:	str	r3, [sp, #16]
   178a0:	ldr	r2, [r4, #40]	; 0x28
   178a4:	add	r3, r4, #8
   178a8:	str	r3, [sp, #8]
   178ac:	str	r2, [sp, #12]
   178b0:	ldr	r2, [r4, #4]
   178b4:	mov	r5, r0
   178b8:	str	r2, [sp, #4]
   178bc:	ldr	ip, [r4]
   178c0:	mov	r3, sl
   178c4:	mov	r2, r9
   178c8:	mov	r0, r7
   178cc:	str	ip, [sp]
   178d0:	bl	16090 <__assert_fail@plt+0x4d60>
   178d4:	str	r6, [r5]
   178d8:	add	sp, sp, #24
   178dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   178e0:	andeq	ip, r2, r4, asr #5
   178e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178e8:	cmp	r3, #0
   178ec:	sub	sp, sp, #44	; 0x2c
   178f0:	ldr	r4, [pc, #192]	; 179b8 <__assert_fail@plt+0x6688>
   178f4:	mov	r6, r2
   178f8:	movne	r4, r3
   178fc:	mov	r9, r1
   17900:	mov	r8, r0
   17904:	bl	111ec <__errno_location@plt>
   17908:	ldr	r3, [r4, #44]	; 0x2c
   1790c:	ldr	r5, [r4, #4]
   17910:	add	sl, r4, #8
   17914:	cmp	r6, #0
   17918:	orreq	r5, r5, #1
   1791c:	mov	r1, #0
   17920:	ldr	r2, [r0]
   17924:	str	r3, [sp, #16]
   17928:	ldr	r3, [r4, #40]	; 0x28
   1792c:	stmib	sp, {r5, sl}
   17930:	str	r3, [sp, #12]
   17934:	ldr	r3, [r4]
   17938:	mov	r7, r0
   1793c:	str	r2, [sp, #28]
   17940:	str	r3, [sp]
   17944:	mov	r2, r8
   17948:	mov	r3, r9
   1794c:	mov	r0, r1
   17950:	bl	16090 <__assert_fail@plt+0x4d60>
   17954:	add	r1, r0, #1
   17958:	mov	fp, r0
   1795c:	mov	r0, r1
   17960:	str	r1, [sp, #36]	; 0x24
   17964:	bl	18338 <__assert_fail@plt+0x7008>
   17968:	ldr	r3, [r4, #44]	; 0x2c
   1796c:	mov	r2, r8
   17970:	str	r3, [sp, #16]
   17974:	ldr	r3, [r4, #40]	; 0x28
   17978:	str	r5, [sp, #4]
   1797c:	str	r3, [sp, #12]
   17980:	str	sl, [sp, #8]
   17984:	ldr	ip, [r4]
   17988:	ldr	r1, [sp, #36]	; 0x24
   1798c:	mov	r3, r9
   17990:	str	ip, [sp]
   17994:	str	r0, [sp, #32]
   17998:	bl	16090 <__assert_fail@plt+0x4d60>
   1799c:	ldr	r2, [sp, #28]
   179a0:	cmp	r6, #0
   179a4:	str	r2, [r7]
   179a8:	ldr	r0, [sp, #32]
   179ac:	strne	fp, [r6]
   179b0:	add	sp, sp, #44	; 0x2c
   179b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179b8:	andeq	ip, r2, r4, asr #5
   179bc:	mov	r3, r2
   179c0:	mov	r2, #0
   179c4:	b	178e4 <__assert_fail@plt+0x65b4>
   179c8:	push	{r4, r5, r6, r7, r8, lr}
   179cc:	ldr	r6, [pc, #116]	; 17a48 <__assert_fail@plt+0x6718>
   179d0:	ldr	r3, [r6, #4]
   179d4:	ldr	r7, [r6]
   179d8:	cmp	r3, #1
   179dc:	movgt	r5, r7
   179e0:	movgt	r4, #1
   179e4:	ble	17a04 <__assert_fail@plt+0x66d4>
   179e8:	ldr	r0, [r5, #12]
   179ec:	bl	12ba4 <__assert_fail@plt+0x1874>
   179f0:	ldr	r3, [r6, #4]
   179f4:	add	r4, r4, #1
   179f8:	cmp	r3, r4
   179fc:	add	r5, r5, #8
   17a00:	bgt	179e8 <__assert_fail@plt+0x66b8>
   17a04:	ldr	r0, [r7, #4]
   17a08:	ldr	r4, [pc, #60]	; 17a4c <__assert_fail@plt+0x671c>
   17a0c:	cmp	r0, r4
   17a10:	beq	17a24 <__assert_fail@plt+0x66f4>
   17a14:	bl	12ba4 <__assert_fail@plt+0x1874>
   17a18:	mov	r3, #256	; 0x100
   17a1c:	str	r4, [r6, #12]
   17a20:	str	r3, [r6, #8]
   17a24:	ldr	r4, [pc, #36]	; 17a50 <__assert_fail@plt+0x6720>
   17a28:	cmp	r7, r4
   17a2c:	beq	17a3c <__assert_fail@plt+0x670c>
   17a30:	mov	r0, r7
   17a34:	bl	12ba4 <__assert_fail@plt+0x1874>
   17a38:	str	r4, [r6]
   17a3c:	mov	r3, #1
   17a40:	str	r3, [r6, #4]
   17a44:	pop	{r4, r5, r6, r7, r8, pc}
   17a48:	andeq	ip, r2, ip, lsr r1
   17a4c:	andeq	ip, r2, r4, asr #3
   17a50:	andeq	ip, r2, r4, asr #2
   17a54:	ldr	r3, [pc, #4]	; 17a60 <__assert_fail@plt+0x6730>
   17a58:	mvn	r2, #0
   17a5c:	b	175a4 <__assert_fail@plt+0x6274>
   17a60:	andeq	ip, r2, r4, asr #5
   17a64:	ldr	r3, [pc]	; 17a6c <__assert_fail@plt+0x673c>
   17a68:	b	175a4 <__assert_fail@plt+0x6274>
   17a6c:	andeq	ip, r2, r4, asr #5
   17a70:	mov	r1, r0
   17a74:	ldr	r3, [pc, #8]	; 17a84 <__assert_fail@plt+0x6754>
   17a78:	mvn	r2, #0
   17a7c:	mov	r0, #0
   17a80:	b	175a4 <__assert_fail@plt+0x6274>
   17a84:	andeq	ip, r2, r4, asr #5
   17a88:	mov	r2, r1
   17a8c:	ldr	r3, [pc, #8]	; 17a9c <__assert_fail@plt+0x676c>
   17a90:	mov	r1, r0
   17a94:	mov	r0, #0
   17a98:	b	175a4 <__assert_fail@plt+0x6274>
   17a9c:	andeq	ip, r2, r4, asr #5
   17aa0:	push	{r4, r5, lr}
   17aa4:	sub	sp, sp, #52	; 0x34
   17aa8:	mov	r5, r2
   17aac:	mov	r4, r0
   17ab0:	mov	r0, sp
   17ab4:	bl	15f40 <__assert_fail@plt+0x4c10>
   17ab8:	mov	r3, sp
   17abc:	mov	r1, r5
   17ac0:	mov	r0, r4
   17ac4:	mvn	r2, #0
   17ac8:	bl	175a4 <__assert_fail@plt+0x6274>
   17acc:	add	sp, sp, #52	; 0x34
   17ad0:	pop	{r4, r5, pc}
   17ad4:	push	{r4, r5, r6, lr}
   17ad8:	sub	sp, sp, #48	; 0x30
   17adc:	mov	r5, r2
   17ae0:	mov	r6, r3
   17ae4:	mov	r4, r0
   17ae8:	mov	r0, sp
   17aec:	bl	15f40 <__assert_fail@plt+0x4c10>
   17af0:	mov	r3, sp
   17af4:	mov	r2, r6
   17af8:	mov	r1, r5
   17afc:	mov	r0, r4
   17b00:	bl	175a4 <__assert_fail@plt+0x6274>
   17b04:	add	sp, sp, #48	; 0x30
   17b08:	pop	{r4, r5, r6, pc}
   17b0c:	mov	r2, r1
   17b10:	mov	r1, r0
   17b14:	mov	r0, #0
   17b18:	b	17aa0 <__assert_fail@plt+0x6770>
   17b1c:	mov	r3, r2
   17b20:	mov	r2, r1
   17b24:	mov	r1, r0
   17b28:	mov	r0, #0
   17b2c:	b	17ad4 <__assert_fail@plt+0x67a4>
   17b30:	push	{r4, r5, r6, r7, r8, lr}
   17b34:	mov	r7, r0
   17b38:	ldr	lr, [pc, #100]	; 17ba4 <__assert_fail@plt+0x6874>
   17b3c:	mov	r8, r1
   17b40:	mov	r4, r2
   17b44:	ldm	lr!, {r0, r1, r2, r3}
   17b48:	sub	sp, sp, #48	; 0x30
   17b4c:	mov	ip, sp
   17b50:	lsr	r5, r4, #5
   17b54:	stmia	ip!, {r0, r1, r2, r3}
   17b58:	add	r6, sp, #8
   17b5c:	ldm	lr!, {r0, r1, r2, r3}
   17b60:	and	r4, r4, #31
   17b64:	stmia	ip!, {r0, r1, r2, r3}
   17b68:	ldm	lr, {r0, r1, r2, r3}
   17b6c:	stm	ip, {r0, r1, r2, r3}
   17b70:	mov	r2, r8
   17b74:	ldr	lr, [r6, r5, lsl #2]
   17b78:	mov	r1, r7
   17b7c:	mov	r3, sp
   17b80:	lsr	ip, lr, r4
   17b84:	eor	ip, ip, #1
   17b88:	and	ip, ip, #1
   17b8c:	mov	r0, #0
   17b90:	eor	r4, lr, ip, lsl r4
   17b94:	str	r4, [r6, r5, lsl #2]
   17b98:	bl	175a4 <__assert_fail@plt+0x6274>
   17b9c:	add	sp, sp, #48	; 0x30
   17ba0:	pop	{r4, r5, r6, r7, r8, pc}
   17ba4:	andeq	ip, r2, r4, asr #5
   17ba8:	mov	r2, r1
   17bac:	mvn	r1, #0
   17bb0:	b	17b30 <__assert_fail@plt+0x6800>
   17bb4:	mov	r2, #58	; 0x3a
   17bb8:	mvn	r1, #0
   17bbc:	b	17b30 <__assert_fail@plt+0x6800>
   17bc0:	mov	r2, #58	; 0x3a
   17bc4:	b	17b30 <__assert_fail@plt+0x6800>
   17bc8:	push	{r4, r5, r6, r7, lr}
   17bcc:	sub	sp, sp, #100	; 0x64
   17bd0:	mov	r6, r0
   17bd4:	mov	r0, sp
   17bd8:	mov	r7, r2
   17bdc:	bl	15f40 <__assert_fail@plt+0x4c10>
   17be0:	mov	ip, sp
   17be4:	add	lr, sp, #48	; 0x30
   17be8:	ldm	ip!, {r0, r1, r2, r3}
   17bec:	stmia	lr!, {r0, r1, r2, r3}
   17bf0:	ldm	ip!, {r0, r1, r2, r3}
   17bf4:	ldr	r5, [sp, #60]	; 0x3c
   17bf8:	stmia	lr!, {r0, r1, r2, r3}
   17bfc:	mvn	r4, r5
   17c00:	ldm	ip, {r0, r1, r2, r3}
   17c04:	and	ip, r4, #67108864	; 0x4000000
   17c08:	eor	ip, ip, r5
   17c0c:	str	ip, [sp, #60]	; 0x3c
   17c10:	stm	lr, {r0, r1, r2, r3}
   17c14:	mov	r1, r7
   17c18:	mov	r0, r6
   17c1c:	add	r3, sp, #48	; 0x30
   17c20:	mvn	r2, #0
   17c24:	bl	175a4 <__assert_fail@plt+0x6274>
   17c28:	add	sp, sp, #100	; 0x64
   17c2c:	pop	{r4, r5, r6, r7, pc}
   17c30:	push	{r4, r5, r6, r7, r8, lr}
   17c34:	mov	r5, r1
   17c38:	ldr	lr, [pc, #100]	; 17ca4 <__assert_fail@plt+0x6974>
   17c3c:	mov	r4, r2
   17c40:	mov	r7, r0
   17c44:	mov	r8, r3
   17c48:	ldm	lr!, {r0, r1, r2, r3}
   17c4c:	sub	sp, sp, #48	; 0x30
   17c50:	mov	ip, sp
   17c54:	mov	r6, #10
   17c58:	stmia	ip!, {r0, r1, r2, r3}
   17c5c:	cmp	r4, #0
   17c60:	cmpne	r5, #0
   17c64:	ldm	lr!, {r0, r1, r2, r3}
   17c68:	str	r6, [sp]
   17c6c:	stmia	ip!, {r0, r1, r2, r3}
   17c70:	ldm	lr, {r0, r1, r2, r3}
   17c74:	stm	ip, {r0, r1, r2, r3}
   17c78:	beq	17ca0 <__assert_fail@plt+0x6970>
   17c7c:	mov	r3, sp
   17c80:	mov	r1, r8
   17c84:	mov	r0, r7
   17c88:	ldr	r2, [sp, #72]	; 0x48
   17c8c:	str	r5, [sp, #40]	; 0x28
   17c90:	str	r4, [sp, #44]	; 0x2c
   17c94:	bl	175a4 <__assert_fail@plt+0x6274>
   17c98:	add	sp, sp, #48	; 0x30
   17c9c:	pop	{r4, r5, r6, r7, r8, pc}
   17ca0:	bl	112e8 <abort@plt>
   17ca4:	andeq	ip, r2, r4, asr #5
   17ca8:	push	{lr}		; (str lr, [sp, #-4]!)
   17cac:	sub	sp, sp, #12
   17cb0:	mvn	ip, #0
   17cb4:	str	ip, [sp]
   17cb8:	bl	17c30 <__assert_fail@plt+0x6900>
   17cbc:	add	sp, sp, #12
   17cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cc4:	push	{lr}		; (str lr, [sp, #-4]!)
   17cc8:	sub	sp, sp, #12
   17ccc:	mvn	ip, #0
   17cd0:	mov	r3, r2
   17cd4:	str	ip, [sp]
   17cd8:	mov	r2, r1
   17cdc:	mov	r1, r0
   17ce0:	mov	r0, #0
   17ce4:	bl	17c30 <__assert_fail@plt+0x6900>
   17ce8:	add	sp, sp, #12
   17cec:	pop	{pc}		; (ldr pc, [sp], #4)
   17cf0:	push	{lr}		; (str lr, [sp, #-4]!)
   17cf4:	sub	sp, sp, #12
   17cf8:	str	r3, [sp]
   17cfc:	mov	r3, r2
   17d00:	mov	r2, r1
   17d04:	mov	r1, r0
   17d08:	mov	r0, #0
   17d0c:	bl	17c30 <__assert_fail@plt+0x6900>
   17d10:	add	sp, sp, #12
   17d14:	pop	{pc}		; (ldr pc, [sp], #4)
   17d18:	ldr	r3, [pc]	; 17d20 <__assert_fail@plt+0x69f0>
   17d1c:	b	175a4 <__assert_fail@plt+0x6274>
   17d20:	andeq	ip, r2, ip, asr #2
   17d24:	mov	r2, r1
   17d28:	ldr	r3, [pc, #8]	; 17d38 <__assert_fail@plt+0x6a08>
   17d2c:	mov	r1, r0
   17d30:	mov	r0, #0
   17d34:	b	175a4 <__assert_fail@plt+0x6274>
   17d38:	andeq	ip, r2, ip, asr #2
   17d3c:	ldr	r3, [pc, #4]	; 17d48 <__assert_fail@plt+0x6a18>
   17d40:	mvn	r2, #0
   17d44:	b	175a4 <__assert_fail@plt+0x6274>
   17d48:	andeq	ip, r2, ip, asr #2
   17d4c:	mov	r1, r0
   17d50:	ldr	r3, [pc, #8]	; 17d60 <__assert_fail@plt+0x6a30>
   17d54:	mvn	r2, #0
   17d58:	mov	r0, #0
   17d5c:	b	175a4 <__assert_fail@plt+0x6274>
   17d60:	andeq	ip, r2, ip, asr #2
   17d64:	push	{r4, r6, r7, lr}
   17d68:	sub	sp, sp, #104	; 0x68
   17d6c:	mov	r4, r0
   17d70:	mov	r2, sp
   17d74:	ldr	r1, [pc, #52]	; 17db0 <__assert_fail@plt+0x6a80>
   17d78:	mov	r0, #3
   17d7c:	bl	11300 <__lxstat64@plt>
   17d80:	cmp	r0, #0
   17d84:	bne	17da4 <__assert_fail@plt+0x6a74>
   17d88:	ldrd	r6, [sp, #96]	; 0x60
   17d8c:	ldrd	r2, [sp]
   17d90:	mov	r0, r4
   17d94:	strd	r6, [r4]
   17d98:	strd	r2, [r4, #8]
   17d9c:	add	sp, sp, #104	; 0x68
   17da0:	pop	{r4, r6, r7, pc}
   17da4:	mov	r0, #0
   17da8:	add	sp, sp, #104	; 0x68
   17dac:	pop	{r4, r6, r7, pc}
   17db0:	andeq	sl, r1, r8, lsr r7
   17db4:	cmp	r0, #2
   17db8:	push	{r4, r5, r6, r7, r8, lr}
   17dbc:	mov	r4, r0
   17dc0:	bhi	17de8 <__assert_fail@plt+0x6ab8>
   17dc4:	bl	19614 <__assert_fail@plt+0x82e4>
   17dc8:	mov	r7, r0
   17dcc:	bl	111ec <__errno_location@plt>
   17dd0:	mov	r5, r0
   17dd4:	mov	r0, r4
   17dd8:	ldr	r6, [r5]
   17ddc:	mov	r4, r7
   17de0:	bl	112f4 <close@plt>
   17de4:	str	r6, [r5]
   17de8:	mov	r0, r4
   17dec:	pop	{r4, r5, r6, r7, r8, pc}
   17df0:	push	{r4, r5, r6, lr}
   17df4:	sub	sp, sp, #32
   17df8:	cmp	r1, #0
   17dfc:	mov	r4, r0
   17e00:	ldr	r5, [sp, #48]	; 0x30
   17e04:	ldr	r6, [sp, #52]	; 0x34
   17e08:	beq	18120 <__assert_fail@plt+0x6df0>
   17e0c:	stm	sp, {r2, r3}
   17e10:	mov	r3, r1
   17e14:	ldr	r2, [pc, #808]	; 18144 <__assert_fail@plt+0x6e14>
   17e18:	mov	r1, #1
   17e1c:	bl	11228 <__fprintf_chk@plt>
   17e20:	mov	r2, #5
   17e24:	ldr	r1, [pc, #796]	; 18148 <__assert_fail@plt+0x6e18>
   17e28:	mov	r0, #0
   17e2c:	bl	110c0 <dcgettext@plt>
   17e30:	ldr	r3, [pc, #788]	; 1814c <__assert_fail@plt+0x6e1c>
   17e34:	ldr	r2, [pc, #788]	; 18150 <__assert_fail@plt+0x6e20>
   17e38:	str	r3, [sp]
   17e3c:	mov	r1, #1
   17e40:	mov	r3, r0
   17e44:	mov	r0, r4
   17e48:	bl	11228 <__fprintf_chk@plt>
   17e4c:	mov	r1, r4
   17e50:	mov	r0, #10
   17e54:	bl	110b4 <fputc_unlocked@plt>
   17e58:	mov	r2, #5
   17e5c:	ldr	r1, [pc, #752]	; 18154 <__assert_fail@plt+0x6e24>
   17e60:	mov	r0, #0
   17e64:	bl	110c0 <dcgettext@plt>
   17e68:	mov	r1, #1
   17e6c:	ldr	r3, [pc, #740]	; 18158 <__assert_fail@plt+0x6e28>
   17e70:	mov	r2, r0
   17e74:	mov	r0, r4
   17e78:	bl	11228 <__fprintf_chk@plt>
   17e7c:	mov	r1, r4
   17e80:	mov	r0, #10
   17e84:	bl	110b4 <fputc_unlocked@plt>
   17e88:	cmp	r6, #9
   17e8c:	ldrls	pc, [pc, r6, lsl #2]
   17e90:	b	18138 <__assert_fail@plt+0x6e08>
   17e94:	andeq	r7, r1, r8, lsl pc
   17e98:	andeq	r7, r1, r0, lsr #30
   17e9c:	andeq	r7, r1, ip, asr #30
   17ea0:	andeq	r7, r1, r0, lsl #31
   17ea4:			; <UNDEFINED> instruction: 0x00017fbc
   17ea8:	strdeq	r7, [r1], -r8
   17eac:	andeq	r8, r1, r4, lsr r0
   17eb0:	andeq	r8, r1, r8, ror r0
   17eb4:	andeq	r8, r1, r8, asr #1
   17eb8:			; <UNDEFINED> instruction: 0x00017ebc
   17ebc:	ldr	r1, [pc, #664]	; 1815c <__assert_fail@plt+0x6e2c>
   17ec0:	mov	r2, #5
   17ec4:	mov	r0, #0
   17ec8:	bl	110c0 <dcgettext@plt>
   17ecc:	ldr	ip, [r5, #32]
   17ed0:	ldr	r1, [r5, #28]
   17ed4:	ldr	r2, [r5, #24]
   17ed8:	ldr	r3, [r5]
   17edc:	ldr	r6, [r5, #20]
   17ee0:	str	ip, [sp, #28]
   17ee4:	ldr	lr, [r5, #16]
   17ee8:	str	r1, [sp, #24]
   17eec:	ldr	ip, [r5, #12]
   17ef0:	str	r2, [sp, #20]
   17ef4:	ldr	r1, [r5, #8]
   17ef8:	ldr	r2, [r5, #4]
   17efc:	str	r6, [sp, #16]
   17f00:	stmib	sp, {r1, ip, lr}
   17f04:	mov	r1, #1
   17f08:	str	r2, [sp]
   17f0c:	mov	r2, r0
   17f10:	mov	r0, r4
   17f14:	bl	11228 <__fprintf_chk@plt>
   17f18:	add	sp, sp, #32
   17f1c:	pop	{r4, r5, r6, pc}
   17f20:	mov	r2, #5
   17f24:	ldr	r1, [pc, #564]	; 18160 <__assert_fail@plt+0x6e30>
   17f28:	mov	r0, #0
   17f2c:	bl	110c0 <dcgettext@plt>
   17f30:	ldr	r3, [r5]
   17f34:	mov	r1, #1
   17f38:	mov	r2, r0
   17f3c:	mov	r0, r4
   17f40:	add	sp, sp, #32
   17f44:	pop	{r4, r5, r6, lr}
   17f48:	b	11228 <__fprintf_chk@plt>
   17f4c:	mov	r2, #5
   17f50:	ldr	r1, [pc, #524]	; 18164 <__assert_fail@plt+0x6e34>
   17f54:	mov	r0, #0
   17f58:	bl	110c0 <dcgettext@plt>
   17f5c:	ldr	r2, [r5, #4]
   17f60:	ldr	r3, [r5]
   17f64:	mov	r1, #1
   17f68:	str	r2, [sp, #48]	; 0x30
   17f6c:	mov	r2, r0
   17f70:	mov	r0, r4
   17f74:	add	sp, sp, #32
   17f78:	pop	{r4, r5, r6, lr}
   17f7c:	b	11228 <__fprintf_chk@plt>
   17f80:	mov	r2, #5
   17f84:	ldr	r1, [pc, #476]	; 18168 <__assert_fail@plt+0x6e38>
   17f88:	mov	r0, #0
   17f8c:	bl	110c0 <dcgettext@plt>
   17f90:	ldr	r1, [r5, #8]
   17f94:	ldr	r2, [r5, #4]
   17f98:	ldr	r3, [r5]
   17f9c:	str	r1, [sp, #52]	; 0x34
   17fa0:	str	r2, [sp, #48]	; 0x30
   17fa4:	mov	r1, #1
   17fa8:	mov	r2, r0
   17fac:	mov	r0, r4
   17fb0:	add	sp, sp, #32
   17fb4:	pop	{r4, r5, r6, lr}
   17fb8:	b	11228 <__fprintf_chk@plt>
   17fbc:	mov	r2, #5
   17fc0:	ldr	r1, [pc, #420]	; 1816c <__assert_fail@plt+0x6e3c>
   17fc4:	mov	r0, #0
   17fc8:	bl	110c0 <dcgettext@plt>
   17fcc:	ldr	r1, [r5, #8]
   17fd0:	ldr	ip, [r5, #12]
   17fd4:	ldr	r2, [r5, #4]
   17fd8:	ldr	r3, [r5]
   17fdc:	stmib	sp, {r1, ip}
   17fe0:	str	r2, [sp]
   17fe4:	mov	r1, #1
   17fe8:	mov	r2, r0
   17fec:	mov	r0, r4
   17ff0:	bl	11228 <__fprintf_chk@plt>
   17ff4:	b	17f18 <__assert_fail@plt+0x6be8>
   17ff8:	mov	r2, #5
   17ffc:	ldr	r1, [pc, #364]	; 18170 <__assert_fail@plt+0x6e40>
   18000:	mov	r0, #0
   18004:	bl	110c0 <dcgettext@plt>
   18008:	add	r1, r5, #8
   1800c:	ldr	r2, [r5, #4]
   18010:	ldm	r1, {r1, ip, lr}
   18014:	ldr	r3, [r5]
   18018:	str	r2, [sp]
   1801c:	stmib	sp, {r1, ip, lr}
   18020:	mov	r1, #1
   18024:	mov	r2, r0
   18028:	mov	r0, r4
   1802c:	bl	11228 <__fprintf_chk@plt>
   18030:	b	17f18 <__assert_fail@plt+0x6be8>
   18034:	mov	r2, #5
   18038:	ldr	r1, [pc, #308]	; 18174 <__assert_fail@plt+0x6e44>
   1803c:	mov	r0, #0
   18040:	bl	110c0 <dcgettext@plt>
   18044:	add	r1, r5, #8
   18048:	ldr	r2, [r5, #4]
   1804c:	ldm	r1, {r1, ip, lr}
   18050:	ldr	r6, [r5, #20]
   18054:	ldr	r3, [r5]
   18058:	stmib	sp, {r1, ip, lr}
   1805c:	mov	r1, #1
   18060:	str	r2, [sp]
   18064:	str	r6, [sp, #16]
   18068:	mov	r2, r0
   1806c:	mov	r0, r4
   18070:	bl	11228 <__fprintf_chk@plt>
   18074:	b	17f18 <__assert_fail@plt+0x6be8>
   18078:	mov	r2, #5
   1807c:	ldr	r1, [pc, #244]	; 18178 <__assert_fail@plt+0x6e48>
   18080:	mov	r0, #0
   18084:	bl	110c0 <dcgettext@plt>
   18088:	ldr	r2, [r5, #24]
   1808c:	ldr	r3, [r5]
   18090:	ldr	r6, [r5, #20]
   18094:	ldr	lr, [r5, #16]
   18098:	ldr	ip, [r5, #12]
   1809c:	str	r2, [sp, #20]
   180a0:	ldr	r1, [r5, #8]
   180a4:	ldr	r2, [r5, #4]
   180a8:	str	r6, [sp, #16]
   180ac:	stmib	sp, {r1, ip, lr}
   180b0:	mov	r1, #1
   180b4:	str	r2, [sp]
   180b8:	mov	r2, r0
   180bc:	mov	r0, r4
   180c0:	bl	11228 <__fprintf_chk@plt>
   180c4:	b	17f18 <__assert_fail@plt+0x6be8>
   180c8:	mov	r2, #5
   180cc:	ldr	r1, [pc, #168]	; 1817c <__assert_fail@plt+0x6e4c>
   180d0:	mov	r0, #0
   180d4:	bl	110c0 <dcgettext@plt>
   180d8:	ldr	r1, [r5, #28]
   180dc:	ldr	r2, [r5, #24]
   180e0:	ldr	r3, [r5]
   180e4:	ldr	r6, [r5, #20]
   180e8:	ldr	lr, [r5, #16]
   180ec:	str	r1, [sp, #24]
   180f0:	ldr	ip, [r5, #12]
   180f4:	str	r2, [sp, #20]
   180f8:	ldr	r1, [r5, #8]
   180fc:	ldr	r2, [r5, #4]
   18100:	str	r6, [sp, #16]
   18104:	stmib	sp, {r1, ip, lr}
   18108:	mov	r1, #1
   1810c:	str	r2, [sp]
   18110:	mov	r2, r0
   18114:	mov	r0, r4
   18118:	bl	11228 <__fprintf_chk@plt>
   1811c:	b	17f18 <__assert_fail@plt+0x6be8>
   18120:	str	r3, [sp]
   18124:	mov	r1, #1
   18128:	mov	r3, r2
   1812c:	ldr	r2, [pc, #76]	; 18180 <__assert_fail@plt+0x6e50>
   18130:	bl	11228 <__fprintf_chk@plt>
   18134:	b	17e20 <__assert_fail@plt+0x6af0>
   18138:	mov	r2, #5
   1813c:	ldr	r1, [pc, #64]	; 18184 <__assert_fail@plt+0x6e54>
   18140:	b	17ec4 <__assert_fail@plt+0x6b94>
   18144:	andeq	sl, r1, r8, ror #27
   18148:	strdeq	sl, [r1], -ip
   1814c:	andeq	r0, r0, r6, ror #15
   18150:	ldrdeq	fp, [r1], -r4
   18154:	andeq	sl, r1, r0, lsl #28
   18158:	andeq	sl, r1, ip, lsr #29
   1815c:	ldrdeq	sl, [r1], -ip
   18160:	ldrdeq	sl, [r1], -r0
   18164:	andeq	sl, r1, r0, ror #29
   18168:	strdeq	sl, [r1], -r8
   1816c:	andeq	sl, r1, r4, lsl pc
   18170:	andeq	sl, r1, r4, lsr pc
   18174:	andeq	sl, r1, r8, asr pc
   18178:	andeq	sl, r1, r0, lsl #31
   1817c:	andeq	sl, r1, ip, lsr #31
   18180:	strdeq	sl, [r1], -r4
   18184:	andeq	fp, r1, r0, lsl r0
   18188:	push	{r4, r5, lr}
   1818c:	sub	sp, sp, #12
   18190:	ldr	r5, [sp, #24]
   18194:	ldr	ip, [r5]
   18198:	cmp	ip, #0
   1819c:	beq	181b8 <__assert_fail@plt+0x6e88>
   181a0:	mov	lr, r5
   181a4:	mov	ip, #0
   181a8:	ldr	r4, [lr, #4]!
   181ac:	add	ip, ip, #1
   181b0:	cmp	r4, #0
   181b4:	bne	181a8 <__assert_fail@plt+0x6e78>
   181b8:	stm	sp, {r5, ip}
   181bc:	bl	17df0 <__assert_fail@plt+0x6ac0>
   181c0:	add	sp, sp, #12
   181c4:	pop	{r4, r5, pc}
   181c8:	push	{r4, r5, lr}
   181cc:	sub	sp, sp, #52	; 0x34
   181d0:	add	r5, sp, #4
   181d4:	ldr	r4, [sp, #64]	; 0x40
   181d8:	mov	ip, #0
   181dc:	sub	r4, r4, #4
   181e0:	ldr	lr, [r4, #4]!
   181e4:	cmp	lr, #0
   181e8:	str	lr, [r5, #4]!
   181ec:	beq	181fc <__assert_fail@plt+0x6ecc>
   181f0:	add	ip, ip, #1
   181f4:	cmp	ip, #10
   181f8:	bne	181e0 <__assert_fail@plt+0x6eb0>
   181fc:	add	lr, sp, #8
   18200:	str	ip, [sp, #4]
   18204:	str	lr, [sp]
   18208:	bl	17df0 <__assert_fail@plt+0x6ac0>
   1820c:	add	sp, sp, #52	; 0x34
   18210:	pop	{r4, r5, pc}
   18214:	push	{r3}		; (str r3, [sp, #-4]!)
   18218:	push	{r4, lr}
   1821c:	sub	sp, sp, #60	; 0x3c
   18220:	add	lr, sp, #56	; 0x38
   18224:	add	r3, sp, #72	; 0x48
   18228:	str	r3, [lr, #-44]!	; 0xffffffd4
   1822c:	add	r4, sp, #68	; 0x44
   18230:	mov	r3, #0
   18234:	ldr	ip, [r4, #4]!
   18238:	cmp	ip, #0
   1823c:	str	ip, [lr, #4]!
   18240:	beq	18250 <__assert_fail@plt+0x6f20>
   18244:	add	r3, r3, #1
   18248:	cmp	r3, #10
   1824c:	bne	18234 <__assert_fail@plt+0x6f04>
   18250:	add	ip, sp, #16
   18254:	str	r3, [sp, #4]
   18258:	str	ip, [sp]
   1825c:	ldr	r3, [sp, #68]	; 0x44
   18260:	bl	17df0 <__assert_fail@plt+0x6ac0>
   18264:	add	sp, sp, #60	; 0x3c
   18268:	pop	{r4, lr}
   1826c:	add	sp, sp, #4
   18270:	bx	lr
   18274:	ldr	r3, [pc, #116]	; 182f0 <__assert_fail@plt+0x6fc0>
   18278:	push	{r4, lr}
   1827c:	mov	r0, #10
   18280:	ldr	r1, [r3]
   18284:	bl	110b4 <fputc_unlocked@plt>
   18288:	mov	r2, #5
   1828c:	ldr	r1, [pc, #96]	; 182f4 <__assert_fail@plt+0x6fc4>
   18290:	mov	r0, #0
   18294:	bl	110c0 <dcgettext@plt>
   18298:	ldr	r2, [pc, #88]	; 182f8 <__assert_fail@plt+0x6fc8>
   1829c:	mov	r1, r0
   182a0:	mov	r0, #1
   182a4:	bl	11210 <__printf_chk@plt>
   182a8:	mov	r2, #5
   182ac:	ldr	r1, [pc, #72]	; 182fc <__assert_fail@plt+0x6fcc>
   182b0:	mov	r0, #0
   182b4:	bl	110c0 <dcgettext@plt>
   182b8:	ldr	r3, [pc, #64]	; 18300 <__assert_fail@plt+0x6fd0>
   182bc:	ldr	r2, [pc, #64]	; 18304 <__assert_fail@plt+0x6fd4>
   182c0:	mov	r1, r0
   182c4:	mov	r0, #1
   182c8:	bl	11210 <__printf_chk@plt>
   182cc:	mov	r2, #5
   182d0:	ldr	r1, [pc, #48]	; 18308 <__assert_fail@plt+0x6fd8>
   182d4:	mov	r0, #0
   182d8:	bl	110c0 <dcgettext@plt>
   182dc:	ldr	r2, [pc, #40]	; 1830c <__assert_fail@plt+0x6fdc>
   182e0:	pop	{r4, lr}
   182e4:	mov	r1, r0
   182e8:	mov	r0, #1
   182ec:	b	11210 <__printf_chk@plt>
   182f0:	muleq	r2, r4, r1
   182f4:	andeq	fp, r1, ip, asr #32
   182f8:	andeq	fp, r1, r0, rrx
   182fc:	andeq	fp, r1, r8, ror r0
   18300:	muleq	r1, r4, r5
   18304:			; <UNDEFINED> instruction: 0x0001a5bc
   18308:	andeq	fp, r1, ip, lsl #1
   1830c:	strheq	fp, [r1], -r4
   18310:	push	{r4, lr}
   18314:	bl	18fa0 <__assert_fail@plt+0x7c70>
   18318:	cmp	r0, #0
   1831c:	popne	{r4, pc}
   18320:	bl	18858 <__assert_fail@plt+0x7528>
   18324:	push	{r4, lr}
   18328:	bl	18fa0 <__assert_fail@plt+0x7c70>
   1832c:	cmp	r0, #0
   18330:	popne	{r4, pc}
   18334:	bl	18858 <__assert_fail@plt+0x7528>
   18338:	push	{r4, lr}
   1833c:	bl	18fa0 <__assert_fail@plt+0x7c70>
   18340:	cmp	r0, #0
   18344:	popne	{r4, pc}
   18348:	bl	18858 <__assert_fail@plt+0x7528>
   1834c:	push	{r4, r5, r6, lr}
   18350:	mov	r5, r0
   18354:	mov	r4, r1
   18358:	bl	18fcc <__assert_fail@plt+0x7c9c>
   1835c:	cmp	r0, #0
   18360:	popne	{r4, r5, r6, pc}
   18364:	adds	r4, r4, #0
   18368:	movne	r4, #1
   1836c:	cmp	r5, #0
   18370:	orreq	r4, r4, #1
   18374:	cmp	r4, #0
   18378:	popeq	{r4, r5, r6, pc}
   1837c:	bl	18858 <__assert_fail@plt+0x7528>
   18380:	push	{r4, lr}
   18384:	cmp	r1, #0
   18388:	orreq	r1, r1, #1
   1838c:	bl	18fcc <__assert_fail@plt+0x7c9c>
   18390:	cmp	r0, #0
   18394:	popne	{r4, pc}
   18398:	bl	18858 <__assert_fail@plt+0x7528>
   1839c:	push	{r4, r5, r6, lr}
   183a0:	mov	r6, r0
   183a4:	mov	r5, r1
   183a8:	mov	r4, r2
   183ac:	bl	195c8 <__assert_fail@plt+0x8298>
   183b0:	cmp	r0, #0
   183b4:	popne	{r4, r5, r6, pc}
   183b8:	cmp	r6, #0
   183bc:	beq	183cc <__assert_fail@plt+0x709c>
   183c0:	cmp	r5, #0
   183c4:	cmpne	r4, #0
   183c8:	popeq	{r4, r5, r6, pc}
   183cc:	bl	18858 <__assert_fail@plt+0x7528>
   183d0:	b	1839c <__assert_fail@plt+0x706c>
   183d4:	cmp	r2, #0
   183d8:	cmpne	r1, #0
   183dc:	moveq	r2, #1
   183e0:	moveq	r1, r2
   183e4:	push	{r4, lr}
   183e8:	bl	195c8 <__assert_fail@plt+0x8298>
   183ec:	cmp	r0, #0
   183f0:	popne	{r4, pc}
   183f4:	bl	18858 <__assert_fail@plt+0x7528>
   183f8:	mov	r2, r1
   183fc:	mov	r1, r0
   18400:	mov	r0, #0
   18404:	b	1839c <__assert_fail@plt+0x706c>
   18408:	mov	r2, r1
   1840c:	mov	r1, r0
   18410:	mov	r0, #0
   18414:	b	183d4 <__assert_fail@plt+0x70a4>
   18418:	push	{r4, r5, r6, lr}
   1841c:	subs	r6, r0, #0
   18420:	sub	sp, sp, #8
   18424:	mov	r5, r1
   18428:	ldr	r4, [r1]
   1842c:	beq	18468 <__assert_fail@plt+0x7138>
   18430:	lsr	r1, r4, #1
   18434:	add	r3, r1, #1
   18438:	mvn	r3, r3
   1843c:	cmp	r4, r3
   18440:	bhi	18464 <__assert_fail@plt+0x7134>
   18444:	add	r4, r4, #1
   18448:	add	r4, r4, r1
   1844c:	mov	r0, r6
   18450:	mov	r1, r4
   18454:	bl	1839c <__assert_fail@plt+0x706c>
   18458:	str	r4, [r5]
   1845c:	add	sp, sp, #8
   18460:	pop	{r4, r5, r6, pc}
   18464:	bl	18858 <__assert_fail@plt+0x7528>
   18468:	cmp	r4, #0
   1846c:	bne	1844c <__assert_fail@plt+0x711c>
   18470:	mov	r1, r2
   18474:	mov	r0, #64	; 0x40
   18478:	str	r2, [sp, #4]
   1847c:	bl	19714 <__assert_fail@plt+0x83e4>
   18480:	ldr	r2, [sp, #4]
   18484:	cmp	r0, #0
   18488:	movne	r4, r0
   1848c:	addeq	r4, r0, #1
   18490:	b	1844c <__assert_fail@plt+0x711c>
   18494:	mov	r2, #1
   18498:	b	18418 <__assert_fail@plt+0x70e8>
   1849c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184a0:	sub	sp, sp, #12
   184a4:	ldr	r6, [r1]
   184a8:	mov	sl, r1
   184ac:	mov	r9, r0
   184b0:	asrs	r4, r6, #1
   184b4:	mov	r5, r2
   184b8:	mov	fp, r3
   184bc:	ldr	r7, [sp, #48]	; 0x30
   184c0:	bmi	1862c <__assert_fail@plt+0x72fc>
   184c4:	mvn	r3, #-2147483648	; 0x80000000
   184c8:	sub	r3, r3, r4
   184cc:	cmp	r6, r3
   184d0:	movle	r3, #0
   184d4:	movgt	r3, #1
   184d8:	mvn	r8, fp
   184dc:	cmp	r3, #0
   184e0:	addeq	r4, r4, r6
   184e4:	mvnne	r4, #-2147483648	; 0x80000000
   184e8:	lsr	r8, r8, #31
   184ec:	cmp	fp, r4
   184f0:	movge	r3, #0
   184f4:	andlt	r3, r8, #1
   184f8:	cmp	r3, #0
   184fc:	beq	185e4 <__assert_fail@plt+0x72b4>
   18500:	cmp	r7, #0
   18504:	blt	186b4 <__assert_fail@plt+0x7384>
   18508:	bne	186ac <__assert_fail@plt+0x737c>
   1850c:	mov	r2, #64	; 0x40
   18510:	mov	r1, r7
   18514:	mov	r0, r2
   18518:	str	r2, [sp, #4]
   1851c:	bl	19920 <__assert_fail@plt+0x85f0>
   18520:	ldr	r2, [sp, #4]
   18524:	mov	r1, r7
   18528:	mov	r4, r0
   1852c:	mov	r0, r2
   18530:	bl	19b40 <__assert_fail@plt+0x8810>
   18534:	ldr	r2, [sp, #4]
   18538:	sub	r1, r2, r1
   1853c:	cmp	r9, #0
   18540:	sub	r3, r4, r6
   18544:	streq	r9, [sl]
   18548:	cmp	r3, r5
   1854c:	bge	185d0 <__assert_fail@plt+0x72a0>
   18550:	cmp	r5, #0
   18554:	blt	18640 <__assert_fail@plt+0x7310>
   18558:	cmp	r6, #0
   1855c:	blt	1857c <__assert_fail@plt+0x724c>
   18560:	mvn	r3, #-2147483648	; 0x80000000
   18564:	sub	r3, r3, r5
   18568:	cmp	r6, r3
   1856c:	movle	r3, #0
   18570:	movgt	r3, #1
   18574:	cmp	r3, #0
   18578:	bne	1873c <__assert_fail@plt+0x740c>
   1857c:	add	r5, r6, r5
   18580:	cmp	fp, r5
   18584:	movge	r8, #0
   18588:	andlt	r8, r8, #1
   1858c:	cmp	r8, #0
   18590:	mov	r4, r5
   18594:	bne	1873c <__assert_fail@plt+0x740c>
   18598:	cmp	r7, #0
   1859c:	blt	18654 <__assert_fail@plt+0x7324>
   185a0:	beq	185cc <__assert_fail@plt+0x729c>
   185a4:	cmp	r5, #0
   185a8:	blt	186fc <__assert_fail@plt+0x73cc>
   185ac:	mov	r1, r7
   185b0:	mvn	r0, #-2147483648	; 0x80000000
   185b4:	bl	19920 <__assert_fail@plt+0x85f0>
   185b8:	cmp	r5, r0
   185bc:	movle	r0, #0
   185c0:	movgt	r0, #1
   185c4:	cmp	r0, #0
   185c8:	bne	1873c <__assert_fail@plt+0x740c>
   185cc:	mul	r1, r5, r7
   185d0:	mov	r0, r9
   185d4:	bl	1834c <__assert_fail@plt+0x701c>
   185d8:	str	r4, [sl]
   185dc:	add	sp, sp, #12
   185e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185e4:	cmp	r7, #0
   185e8:	blt	18680 <__assert_fail@plt+0x7350>
   185ec:	beq	1850c <__assert_fail@plt+0x71dc>
   185f0:	cmp	r4, #0
   185f4:	blt	186bc <__assert_fail@plt+0x738c>
   185f8:	mov	r1, r7
   185fc:	mvn	r0, #-2147483648	; 0x80000000
   18600:	bl	19920 <__assert_fail@plt+0x85f0>
   18604:	cmp	r0, r4
   18608:	movge	r0, #0
   1860c:	movlt	r0, #1
   18610:	cmp	r0, #0
   18614:	mvnne	r2, #-2147483648	; 0x80000000
   18618:	bne	18510 <__assert_fail@plt+0x71e0>
   1861c:	mul	r1, r7, r4
   18620:	cmp	r1, #63	; 0x3f
   18624:	bgt	1853c <__assert_fail@plt+0x720c>
   18628:	b	1850c <__assert_fail@plt+0x71dc>
   1862c:	rsb	r3, r4, #-2147483648	; 0x80000000
   18630:	cmp	r6, r3
   18634:	movge	r3, #0
   18638:	movlt	r3, #1
   1863c:	b	184d8 <__assert_fail@plt+0x71a8>
   18640:	rsb	r3, r5, #-2147483648	; 0x80000000
   18644:	cmp	r6, r3
   18648:	movge	r3, #0
   1864c:	movlt	r3, #1
   18650:	b	18574 <__assert_fail@plt+0x7244>
   18654:	cmp	r5, #0
   18658:	blt	186e0 <__assert_fail@plt+0x73b0>
   1865c:	cmn	r7, #1
   18660:	beq	185cc <__assert_fail@plt+0x729c>
   18664:	mov	r1, r7
   18668:	mov	r0, #-2147483648	; 0x80000000
   1866c:	bl	19920 <__assert_fail@plt+0x85f0>
   18670:	cmp	r5, r0
   18674:	movle	r0, #0
   18678:	movgt	r0, #1
   1867c:	b	185c4 <__assert_fail@plt+0x7294>
   18680:	cmp	r4, #0
   18684:	blt	18720 <__assert_fail@plt+0x73f0>
   18688:	cmn	r7, #1
   1868c:	beq	1861c <__assert_fail@plt+0x72ec>
   18690:	mov	r1, r7
   18694:	mov	r0, #-2147483648	; 0x80000000
   18698:	bl	19920 <__assert_fail@plt+0x85f0>
   1869c:	cmp	r0, r4
   186a0:	movge	r0, #0
   186a4:	movlt	r0, #1
   186a8:	b	18610 <__assert_fail@plt+0x72e0>
   186ac:	mov	r4, fp
   186b0:	b	185f8 <__assert_fail@plt+0x72c8>
   186b4:	mov	r4, fp
   186b8:	b	18688 <__assert_fail@plt+0x7358>
   186bc:	cmn	r4, #1
   186c0:	beq	1861c <__assert_fail@plt+0x72ec>
   186c4:	mov	r1, r4
   186c8:	mov	r0, #-2147483648	; 0x80000000
   186cc:	bl	19920 <__assert_fail@plt+0x85f0>
   186d0:	cmp	r7, r0
   186d4:	movle	r0, #0
   186d8:	movgt	r0, #1
   186dc:	b	18610 <__assert_fail@plt+0x72e0>
   186e0:	mov	r1, r7
   186e4:	mvn	r0, #-2147483648	; 0x80000000
   186e8:	bl	19920 <__assert_fail@plt+0x85f0>
   186ec:	cmp	r5, r0
   186f0:	movge	r0, #0
   186f4:	movlt	r0, #1
   186f8:	b	185c4 <__assert_fail@plt+0x7294>
   186fc:	cmn	r5, #1
   18700:	beq	185cc <__assert_fail@plt+0x729c>
   18704:	mov	r1, r5
   18708:	mov	r0, #-2147483648	; 0x80000000
   1870c:	bl	19920 <__assert_fail@plt+0x85f0>
   18710:	cmp	r7, r0
   18714:	movle	r0, #0
   18718:	movgt	r0, #1
   1871c:	b	185c4 <__assert_fail@plt+0x7294>
   18720:	mov	r1, r7
   18724:	mvn	r0, #-2147483648	; 0x80000000
   18728:	bl	19920 <__assert_fail@plt+0x85f0>
   1872c:	cmp	r0, r4
   18730:	movle	r0, #0
   18734:	movgt	r0, #1
   18738:	b	18610 <__assert_fail@plt+0x72e0>
   1873c:	bl	18858 <__assert_fail@plt+0x7528>
   18740:	push	{r4, lr}
   18744:	mov	r1, #1
   18748:	bl	18f58 <__assert_fail@plt+0x7c28>
   1874c:	cmp	r0, #0
   18750:	popne	{r4, pc}
   18754:	bl	18858 <__assert_fail@plt+0x7528>
   18758:	push	{r4, lr}
   1875c:	mov	r1, #1
   18760:	bl	18f58 <__assert_fail@plt+0x7c28>
   18764:	cmp	r0, #0
   18768:	popne	{r4, pc}
   1876c:	bl	18858 <__assert_fail@plt+0x7528>
   18770:	push	{r4, lr}
   18774:	bl	18f58 <__assert_fail@plt+0x7c28>
   18778:	cmp	r0, #0
   1877c:	popne	{r4, pc}
   18780:	bl	18858 <__assert_fail@plt+0x7528>
   18784:	push	{r4, lr}
   18788:	bl	18f58 <__assert_fail@plt+0x7c28>
   1878c:	cmp	r0, #0
   18790:	popne	{r4, pc}
   18794:	bl	18858 <__assert_fail@plt+0x7528>
   18798:	push	{r4, r5, r6, lr}
   1879c:	mov	r6, r0
   187a0:	mov	r0, r1
   187a4:	mov	r4, r1
   187a8:	bl	18fa0 <__assert_fail@plt+0x7c70>
   187ac:	subs	r5, r0, #0
   187b0:	beq	187c8 <__assert_fail@plt+0x7498>
   187b4:	mov	r2, r4
   187b8:	mov	r1, r6
   187bc:	bl	11078 <memcpy@plt>
   187c0:	mov	r0, r5
   187c4:	pop	{r4, r5, r6, pc}
   187c8:	bl	18858 <__assert_fail@plt+0x7528>
   187cc:	push	{r4, r5, r6, lr}
   187d0:	mov	r6, r0
   187d4:	mov	r0, r1
   187d8:	mov	r4, r1
   187dc:	bl	18fa0 <__assert_fail@plt+0x7c70>
   187e0:	subs	r5, r0, #0
   187e4:	beq	187fc <__assert_fail@plt+0x74cc>
   187e8:	mov	r2, r4
   187ec:	mov	r1, r6
   187f0:	bl	11078 <memcpy@plt>
   187f4:	mov	r0, r5
   187f8:	pop	{r4, r5, r6, pc}
   187fc:	bl	18858 <__assert_fail@plt+0x7528>
   18800:	push	{r4, r5, r6, lr}
   18804:	mov	r6, r0
   18808:	add	r0, r1, #1
   1880c:	mov	r4, r1
   18810:	bl	18fa0 <__assert_fail@plt+0x7c70>
   18814:	subs	r5, r0, #0
   18818:	beq	18838 <__assert_fail@plt+0x7508>
   1881c:	mov	r3, #0
   18820:	mov	r1, r6
   18824:	strb	r3, [r5, r4]
   18828:	mov	r2, r4
   1882c:	bl	11078 <memcpy@plt>
   18830:	mov	r0, r5
   18834:	pop	{r4, r5, r6, pc}
   18838:	bl	18858 <__assert_fail@plt+0x7528>
   1883c:	push	{r4, lr}
   18840:	mov	r4, r0
   18844:	bl	111bc <strlen@plt>
   18848:	add	r1, r0, #1
   1884c:	mov	r0, r4
   18850:	pop	{r4, lr}
   18854:	b	18798 <__assert_fail@plt+0x7468>
   18858:	ldr	r3, [pc, #44]	; 1888c <__assert_fail@plt+0x755c>
   1885c:	push	{r4, lr}
   18860:	mov	r2, #5
   18864:	ldr	r1, [pc, #36]	; 18890 <__assert_fail@plt+0x7560>
   18868:	mov	r0, #0
   1886c:	ldr	r4, [r3]
   18870:	bl	110c0 <dcgettext@plt>
   18874:	ldr	r2, [pc, #24]	; 18894 <__assert_fail@plt+0x7564>
   18878:	mov	r1, #0
   1887c:	mov	r3, r0
   18880:	mov	r0, r4
   18884:	bl	11150 <error@plt>
   18888:	bl	112e8 <abort@plt>
   1888c:	andeq	ip, r2, r8, lsr r1
   18890:	andeq	fp, r1, r4, lsl #2
   18894:	andeq	sl, r1, r4, lsl ip
   18898:	push	{r4, lr}
   1889c:	orr	r1, r1, #512	; 0x200
   188a0:	bl	13fd8 <__assert_fail@plt+0x2ca8>
   188a4:	cmp	r0, #0
   188a8:	popne	{r4, pc}
   188ac:	bl	111ec <__errno_location@plt>
   188b0:	ldr	r3, [r0]
   188b4:	cmp	r3, #22
   188b8:	beq	188c0 <__assert_fail@plt+0x7590>
   188bc:	bl	18858 <__assert_fail@plt+0x7528>
   188c0:	ldr	r3, [pc, #12]	; 188d4 <__assert_fail@plt+0x75a4>
   188c4:	mov	r2, #41	; 0x29
   188c8:	ldr	r1, [pc, #8]	; 188d8 <__assert_fail@plt+0x75a8>
   188cc:	ldr	r0, [pc, #8]	; 188dc <__assert_fail@plt+0x75ac>
   188d0:	bl	11330 <__assert_fail@plt>
   188d4:	andeq	fp, r1, r8, lsl r1
   188d8:	andeq	fp, r1, r4, lsr #2
   188dc:	andeq	fp, r1, r0, lsr r1
   188e0:	ldr	r3, [r0, #48]	; 0x30
   188e4:	and	r3, r3, #17
   188e8:	cmp	r3, #16
   188ec:	beq	18910 <__assert_fail@plt+0x75e0>
   188f0:	cmp	r3, #17
   188f4:	beq	18900 <__assert_fail@plt+0x75d0>
   188f8:	mov	r0, #0
   188fc:	bx	lr
   18900:	ldr	r0, [r1, #48]	; 0x30
   18904:	adds	r0, r0, #0
   18908:	movne	r0, #1
   1890c:	bx	lr
   18910:	mov	r0, #1
   18914:	bx	lr
   18918:	push	{r4, r5, r6, r7, r8, lr}
   1891c:	subs	r5, r1, #0
   18920:	mov	r4, r0
   18924:	blt	18998 <__assert_fail@plt+0x7668>
   18928:	moveq	r6, #0
   1892c:	moveq	r7, #0
   18930:	bne	18958 <__assert_fail@plt+0x7628>
   18934:	ldr	r2, [r4]
   18938:	ldr	r1, [r4, #4]
   1893c:	mov	r0, #0
   18940:	mul	ip, r2, r7
   18944:	umull	r2, r3, r2, r5
   18948:	mla	r5, r5, r1, ip
   1894c:	add	r3, r5, r3
   18950:	strd	r2, [r4]
   18954:	pop	{r4, r5, r6, r7, r8, pc}
   18958:	asr	r7, r5, #31
   1895c:	mov	r2, r5
   18960:	mov	r3, r7
   18964:	mvn	r0, #0
   18968:	mvn	r1, #0
   1896c:	bl	19b60 <__assert_fail@plt+0x8830>
   18970:	ldrd	r2, [r4]
   18974:	mov	r6, r5
   18978:	cmp	r1, r3
   1897c:	cmpeq	r0, r2
   18980:	bcs	18934 <__assert_fail@plt+0x7604>
   18984:	mvn	r2, #0
   18988:	mvn	r3, #0
   1898c:	mov	r0, #1
   18990:	strd	r2, [r4]
   18994:	pop	{r4, r5, r6, r7, r8, pc}
   18998:	ldrd	r2, [r0]
   1899c:	orrs	r3, r2, r3
   189a0:	moveq	r6, r5
   189a4:	asreq	r7, r6, #31
   189a8:	bne	18984 <__assert_fail@plt+0x7654>
   189ac:	b	18934 <__assert_fail@plt+0x7604>
   189b0:	cmp	r2, #36	; 0x24
   189b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189b8:	sub	sp, sp, #20
   189bc:	bhi	18f30 <__assert_fail@plt+0x7c00>
   189c0:	cmp	r1, #0
   189c4:	mov	r8, r2
   189c8:	mov	r7, r0
   189cc:	mov	r5, r1
   189d0:	mov	r6, r3
   189d4:	addeq	r5, sp, #4
   189d8:	bl	111ec <__errno_location@plt>
   189dc:	mov	r3, #0
   189e0:	str	r3, [r0]
   189e4:	mov	r9, r0
   189e8:	bl	111a4 <__ctype_b_loc@plt>
   189ec:	ldrb	r3, [r7]
   189f0:	mov	r2, r7
   189f4:	ldr	r0, [r0]
   189f8:	b	18a00 <__assert_fail@plt+0x76d0>
   189fc:	ldrb	r3, [r2, #1]!
   18a00:	lsl	r1, r3, #1
   18a04:	ldrh	r4, [r0, r1]
   18a08:	ands	r4, r4, #8192	; 0x2000
   18a0c:	bne	189fc <__assert_fail@plt+0x76cc>
   18a10:	cmp	r3, #45	; 0x2d
   18a14:	bne	18a28 <__assert_fail@plt+0x76f8>
   18a18:	mov	r4, #4
   18a1c:	mov	r0, r4
   18a20:	add	sp, sp, #20
   18a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a28:	mov	r2, r8
   18a2c:	mov	r3, r4
   18a30:	mov	r1, r5
   18a34:	mov	r0, r7
   18a38:	bl	11084 <__strtoull_internal@plt>
   18a3c:	ldr	r8, [r5]
   18a40:	cmp	r7, r8
   18a44:	mov	r2, r0
   18a48:	str	r0, [sp, #8]
   18a4c:	str	r1, [sp, #12]
   18a50:	beq	18a9c <__assert_fail@plt+0x776c>
   18a54:	ldr	r4, [r9]
   18a58:	cmp	r4, #0
   18a5c:	bne	18a8c <__assert_fail@plt+0x775c>
   18a60:	ldr	r3, [sp, #56]	; 0x38
   18a64:	cmp	r3, #0
   18a68:	beq	18a78 <__assert_fail@plt+0x7748>
   18a6c:	ldrb	r9, [r8]
   18a70:	cmp	r9, #0
   18a74:	bne	18ad4 <__assert_fail@plt+0x77a4>
   18a78:	mov	r0, r4
   18a7c:	str	r2, [r6]
   18a80:	str	r1, [r6, #4]
   18a84:	add	sp, sp, #20
   18a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a8c:	cmp	r4, #34	; 0x22
   18a90:	bne	18a18 <__assert_fail@plt+0x76e8>
   18a94:	mov	r4, #1
   18a98:	b	18a60 <__assert_fail@plt+0x7730>
   18a9c:	ldr	r3, [sp, #56]	; 0x38
   18aa0:	cmp	r3, #0
   18aa4:	beq	18a18 <__assert_fail@plt+0x76e8>
   18aa8:	ldrb	r1, [r8]
   18aac:	cmp	r1, #0
   18ab0:	beq	18a18 <__assert_fail@plt+0x76e8>
   18ab4:	mov	r0, r3
   18ab8:	bl	111c8 <strchr@plt>
   18abc:	cmp	r0, #0
   18ac0:	beq	18a18 <__assert_fail@plt+0x76e8>
   18ac4:	ldrb	r9, [r8]
   18ac8:	mov	r2, #1
   18acc:	mov	r3, #0
   18ad0:	strd	r2, [sp, #8]
   18ad4:	mov	r1, r9
   18ad8:	ldr	r0, [sp, #56]	; 0x38
   18adc:	bl	111c8 <strchr@plt>
   18ae0:	cmp	r0, #0
   18ae4:	beq	18eec <__assert_fail@plt+0x7bbc>
   18ae8:	sub	r3, r9, #69	; 0x45
   18aec:	cmp	r3, #47	; 0x2f
   18af0:	ldrls	pc, [pc, r3, lsl #2]
   18af4:	b	18bb8 <__assert_fail@plt+0x7888>
   18af8:	andeq	r8, r1, r8, lsr #25
   18afc:			; <UNDEFINED> instruction: 0x00018bb8
   18b00:	andeq	r8, r1, r8, lsr #25
   18b04:			; <UNDEFINED> instruction: 0x00018bb8
   18b08:			; <UNDEFINED> instruction: 0x00018bb8
   18b0c:			; <UNDEFINED> instruction: 0x00018bb8
   18b10:	andeq	r8, r1, r8, lsr #25
   18b14:			; <UNDEFINED> instruction: 0x00018bb8
   18b18:	andeq	r8, r1, r8, lsr #25
   18b1c:			; <UNDEFINED> instruction: 0x00018bb8
   18b20:			; <UNDEFINED> instruction: 0x00018bb8
   18b24:	andeq	r8, r1, r8, lsr #25
   18b28:			; <UNDEFINED> instruction: 0x00018bb8
   18b2c:			; <UNDEFINED> instruction: 0x00018bb8
   18b30:			; <UNDEFINED> instruction: 0x00018bb8
   18b34:	andeq	r8, r1, r8, lsr #25
   18b38:			; <UNDEFINED> instruction: 0x00018bb8
   18b3c:			; <UNDEFINED> instruction: 0x00018bb8
   18b40:			; <UNDEFINED> instruction: 0x00018bb8
   18b44:			; <UNDEFINED> instruction: 0x00018bb8
   18b48:	andeq	r8, r1, r8, lsr #25
   18b4c:	andeq	r8, r1, r8, lsr #25
   18b50:			; <UNDEFINED> instruction: 0x00018bb8
   18b54:			; <UNDEFINED> instruction: 0x00018bb8
   18b58:			; <UNDEFINED> instruction: 0x00018bb8
   18b5c:			; <UNDEFINED> instruction: 0x00018bb8
   18b60:			; <UNDEFINED> instruction: 0x00018bb8
   18b64:			; <UNDEFINED> instruction: 0x00018bb8
   18b68:			; <UNDEFINED> instruction: 0x00018bb8
   18b6c:			; <UNDEFINED> instruction: 0x00018bb8
   18b70:			; <UNDEFINED> instruction: 0x00018bb8
   18b74:			; <UNDEFINED> instruction: 0x00018bb8
   18b78:			; <UNDEFINED> instruction: 0x00018bb8
   18b7c:			; <UNDEFINED> instruction: 0x00018bb8
   18b80:	andeq	r8, r1, r8, lsr #25
   18b84:			; <UNDEFINED> instruction: 0x00018bb8
   18b88:			; <UNDEFINED> instruction: 0x00018bb8
   18b8c:			; <UNDEFINED> instruction: 0x00018bb8
   18b90:	andeq	r8, r1, r8, lsr #25
   18b94:			; <UNDEFINED> instruction: 0x00018bb8
   18b98:	andeq	r8, r1, r8, lsr #25
   18b9c:			; <UNDEFINED> instruction: 0x00018bb8
   18ba0:			; <UNDEFINED> instruction: 0x00018bb8
   18ba4:			; <UNDEFINED> instruction: 0x00018bb8
   18ba8:			; <UNDEFINED> instruction: 0x00018bb8
   18bac:			; <UNDEFINED> instruction: 0x00018bb8
   18bb0:			; <UNDEFINED> instruction: 0x00018bb8
   18bb4:	andeq	r8, r1, r8, lsr #25
   18bb8:	mov	r7, #1
   18bbc:	mov	sl, #1024	; 0x400
   18bc0:	sub	r9, r9, #66	; 0x42
   18bc4:	cmp	r9, #53	; 0x35
   18bc8:	ldrls	pc, [pc, r9, lsl #2]
   18bcc:	b	18eec <__assert_fail@plt+0x7bbc>
   18bd0:	andeq	r8, r1, r8, lsr lr
   18bd4:	andeq	r8, r1, ip, ror #29
   18bd8:	andeq	r8, r1, ip, ror #29
   18bdc:	andeq	r8, r1, r0, lsl lr
   18be0:	andeq	r8, r1, ip, ror #29
   18be4:	andeq	r8, r1, r8, ror #27
   18be8:	andeq	r8, r1, ip, ror #29
   18bec:	andeq	r8, r1, ip, ror #29
   18bf0:	andeq	r8, r1, ip, ror #29
   18bf4:	andeq	r8, r1, r8, asr #27
   18bf8:	andeq	r8, r1, ip, ror #29
   18bfc:	muleq	r1, r4, lr
   18c00:	andeq	r8, r1, ip, ror #29
   18c04:	andeq	r8, r1, ip, ror #29
   18c08:	andeq	r8, r1, ip, ror #28
   18c0c:	andeq	r8, r1, ip, ror #29
   18c10:	andeq	r8, r1, ip, ror #29
   18c14:	andeq	r8, r1, ip, ror #29
   18c18:	andeq	r8, r1, r4, asr #29
   18c1c:	andeq	r8, r1, ip, ror #29
   18c20:	andeq	r8, r1, ip, ror #29
   18c24:	andeq	r8, r1, ip, ror #29
   18c28:	andeq	r8, r1, ip, ror #29
   18c2c:	andeq	r8, r1, r0, lsr #27
   18c30:	andeq	r8, r1, ip, ror #26
   18c34:	andeq	r8, r1, ip, ror #29
   18c38:	andeq	r8, r1, ip, ror #29
   18c3c:	andeq	r8, r1, ip, ror #29
   18c40:	andeq	r8, r1, ip, ror #29
   18c44:	andeq	r8, r1, ip, ror #29
   18c48:	andeq	r8, r1, ip, ror #29
   18c4c:	andeq	r8, r1, ip, ror #29
   18c50:	andeq	r8, r1, r8, lsr sp
   18c54:	andeq	r8, r1, r8, lsr #26
   18c58:	andeq	r8, r1, ip, ror #29
   18c5c:	andeq	r8, r1, ip, ror #29
   18c60:	andeq	r8, r1, ip, ror #29
   18c64:	andeq	r8, r1, r8, ror #27
   18c68:	andeq	r8, r1, ip, ror #29
   18c6c:	andeq	r8, r1, ip, ror #29
   18c70:	andeq	r8, r1, ip, ror #29
   18c74:	andeq	r8, r1, r8, asr #27
   18c78:	andeq	r8, r1, ip, ror #29
   18c7c:	muleq	r1, r4, lr
   18c80:	andeq	r8, r1, ip, ror #29
   18c84:	andeq	r8, r1, ip, ror #29
   18c88:	andeq	r8, r1, ip, ror #29
   18c8c:	andeq	r8, r1, ip, ror #29
   18c90:	andeq	r8, r1, ip, ror #29
   18c94:	andeq	r8, r1, ip, ror #29
   18c98:	andeq	r8, r1, r4, asr #29
   18c9c:	andeq	r8, r1, ip, ror #29
   18ca0:	andeq	r8, r1, ip, ror #29
   18ca4:	andeq	r8, r1, r4, ror #25
   18ca8:	mov	r1, #48	; 0x30
   18cac:	ldr	r0, [sp, #56]	; 0x38
   18cb0:	bl	111c8 <strchr@plt>
   18cb4:	cmp	r0, #0
   18cb8:	beq	18bb8 <__assert_fail@plt+0x7888>
   18cbc:	ldrb	r3, [r8, #1]
   18cc0:	cmp	r3, #68	; 0x44
   18cc4:	beq	18cd8 <__assert_fail@plt+0x79a8>
   18cc8:	cmp	r3, #105	; 0x69
   18ccc:	beq	18efc <__assert_fail@plt+0x7bcc>
   18cd0:	cmp	r3, #66	; 0x42
   18cd4:	bne	18bb8 <__assert_fail@plt+0x7888>
   18cd8:	mov	r7, #2
   18cdc:	mov	sl, #1000	; 0x3e8
   18ce0:	b	18bc0 <__assert_fail@plt+0x7890>
   18ce4:	ldrd	r2, [sp, #8]
   18ce8:	cmp	r2, #0
   18cec:	sbcs	r1, r3, #0
   18cf0:	blt	18f14 <__assert_fail@plt+0x7be4>
   18cf4:	adds	r2, r2, r2
   18cf8:	adc	r3, r3, r3
   18cfc:	mov	r1, r3
   18d00:	mov	r9, #0
   18d04:	str	r2, [sp, #8]
   18d08:	str	r3, [sp, #12]
   18d0c:	add	r3, r8, r7
   18d10:	str	r3, [r5]
   18d14:	ldrb	r3, [r8, r7]
   18d18:	orr	r4, r4, r9
   18d1c:	cmp	r3, #0
   18d20:	orrne	r4, r4, #2
   18d24:	b	18a78 <__assert_fail@plt+0x7748>
   18d28:	ldr	r2, [sp, #8]
   18d2c:	ldr	r1, [sp, #12]
   18d30:	mov	r9, #0
   18d34:	b	18d0c <__assert_fail@plt+0x79dc>
   18d38:	ldrd	r2, [sp, #8]
   18d3c:	ldr	r1, [pc, #512]	; 18f44 <__assert_fail@plt+0x7c14>
   18d40:	mvn	r0, #0
   18d44:	cmp	r3, r1
   18d48:	cmpeq	r2, r0
   18d4c:	bhi	18f14 <__assert_fail@plt+0x7be4>
   18d50:	lsl	r1, r3, #9
   18d54:	orr	r1, r1, r2, lsr #23
   18d58:	lsl	r2, r2, #9
   18d5c:	str	r1, [sp, #12]
   18d60:	str	r2, [sp, #8]
   18d64:	mov	r9, #0
   18d68:	b	18d0c <__assert_fail@plt+0x79dc>
   18d6c:	mov	fp, #7
   18d70:	mov	r9, #0
   18d74:	add	r8, sp, #8
   18d78:	mov	r1, sl
   18d7c:	mov	r0, r8
   18d80:	bl	18918 <__assert_fail@plt+0x75e8>
   18d84:	subs	fp, fp, #1
   18d88:	orr	r9, r9, r0
   18d8c:	bne	18d78 <__assert_fail@plt+0x7a48>
   18d90:	ldr	r8, [r5]
   18d94:	ldr	r2, [sp, #8]
   18d98:	ldr	r1, [sp, #12]
   18d9c:	b	18d0c <__assert_fail@plt+0x79dc>
   18da0:	mov	fp, #8
   18da4:	mov	r9, #0
   18da8:	add	r8, sp, fp
   18dac:	mov	r1, sl
   18db0:	mov	r0, r8
   18db4:	bl	18918 <__assert_fail@plt+0x75e8>
   18db8:	subs	fp, fp, #1
   18dbc:	orr	r9, r9, r0
   18dc0:	bne	18dac <__assert_fail@plt+0x7a7c>
   18dc4:	b	18d90 <__assert_fail@plt+0x7a60>
   18dc8:	mov	r1, sl
   18dcc:	add	r0, sp, #8
   18dd0:	bl	18918 <__assert_fail@plt+0x75e8>
   18dd4:	ldr	r8, [r5]
   18dd8:	ldr	r2, [sp, #8]
   18ddc:	ldr	r1, [sp, #12]
   18de0:	mov	r9, r0
   18de4:	b	18d0c <__assert_fail@plt+0x79dc>
   18de8:	mov	fp, #3
   18dec:	mov	r9, #0
   18df0:	add	r8, sp, #8
   18df4:	mov	r1, sl
   18df8:	mov	r0, r8
   18dfc:	bl	18918 <__assert_fail@plt+0x75e8>
   18e00:	subs	fp, fp, #1
   18e04:	orr	r9, r9, r0
   18e08:	bne	18df4 <__assert_fail@plt+0x7ac4>
   18e0c:	b	18d90 <__assert_fail@plt+0x7a60>
   18e10:	mov	fp, #6
   18e14:	mov	r9, #0
   18e18:	add	r8, sp, #8
   18e1c:	mov	r1, sl
   18e20:	mov	r0, r8
   18e24:	bl	18918 <__assert_fail@plt+0x75e8>
   18e28:	subs	fp, fp, #1
   18e2c:	orr	r9, r9, r0
   18e30:	bne	18e1c <__assert_fail@plt+0x7aec>
   18e34:	b	18d90 <__assert_fail@plt+0x7a60>
   18e38:	ldrd	r0, [sp, #8]
   18e3c:	ldr	r3, [pc, #260]	; 18f48 <__assert_fail@plt+0x7c18>
   18e40:	mvn	r2, #0
   18e44:	cmp	r1, r3
   18e48:	cmpeq	r0, r2
   18e4c:	bhi	18f14 <__assert_fail@plt+0x7be4>
   18e50:	lsl	r1, r1, #10
   18e54:	orr	r1, r1, r0, lsr #22
   18e58:	lsl	r2, r0, #10
   18e5c:	str	r1, [sp, #12]
   18e60:	str	r2, [sp, #8]
   18e64:	mov	r9, #0
   18e68:	b	18d0c <__assert_fail@plt+0x79dc>
   18e6c:	mov	fp, #5
   18e70:	mov	r9, #0
   18e74:	add	r8, sp, #8
   18e78:	mov	r1, sl
   18e7c:	mov	r0, r8
   18e80:	bl	18918 <__assert_fail@plt+0x75e8>
   18e84:	subs	fp, fp, #1
   18e88:	orr	r9, r9, r0
   18e8c:	bne	18e78 <__assert_fail@plt+0x7b48>
   18e90:	b	18d90 <__assert_fail@plt+0x7a60>
   18e94:	mov	r1, sl
   18e98:	add	r0, sp, #8
   18e9c:	bl	18918 <__assert_fail@plt+0x75e8>
   18ea0:	mov	r1, sl
   18ea4:	mov	r9, r0
   18ea8:	add	r0, sp, #8
   18eac:	bl	18918 <__assert_fail@plt+0x75e8>
   18eb0:	ldr	r8, [r5]
   18eb4:	ldr	r2, [sp, #8]
   18eb8:	ldr	r1, [sp, #12]
   18ebc:	orr	r9, r9, r0
   18ec0:	b	18d0c <__assert_fail@plt+0x79dc>
   18ec4:	mov	fp, #4
   18ec8:	mov	r9, #0
   18ecc:	add	r8, sp, #8
   18ed0:	mov	r1, sl
   18ed4:	mov	r0, r8
   18ed8:	bl	18918 <__assert_fail@plt+0x75e8>
   18edc:	subs	fp, fp, #1
   18ee0:	orr	r9, r9, r0
   18ee4:	bne	18ed0 <__assert_fail@plt+0x7ba0>
   18ee8:	b	18d90 <__assert_fail@plt+0x7a60>
   18eec:	ldrd	r2, [sp, #8]
   18ef0:	orr	r4, r4, #2
   18ef4:	strd	r2, [r6]
   18ef8:	b	18a1c <__assert_fail@plt+0x76ec>
   18efc:	ldrb	r7, [r8, #2]
   18f00:	mov	sl, #1024	; 0x400
   18f04:	cmp	r7, #66	; 0x42
   18f08:	movne	r7, #1
   18f0c:	moveq	r7, #3
   18f10:	b	18bc0 <__assert_fail@plt+0x7890>
   18f14:	mvn	r1, #0
   18f18:	mvn	r0, #0
   18f1c:	mvn	r2, #0
   18f20:	strd	r0, [sp, #8]
   18f24:	mov	r9, #1
   18f28:	mov	r1, r2
   18f2c:	b	18d0c <__assert_fail@plt+0x79dc>
   18f30:	ldr	r3, [pc, #20]	; 18f4c <__assert_fail@plt+0x7c1c>
   18f34:	mov	r2, #85	; 0x55
   18f38:	ldr	r1, [pc, #16]	; 18f50 <__assert_fail@plt+0x7c20>
   18f3c:	ldr	r0, [pc, #16]	; 18f54 <__assert_fail@plt+0x7c24>
   18f40:	bl	11330 <__assert_fail@plt>
   18f44:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   18f48:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   18f4c:	andeq	fp, r1, r0, asr #2
   18f50:	andeq	fp, r1, ip, asr #2
   18f54:	andeq	fp, r1, ip, asr r1
   18f58:	cmp	r1, #0
   18f5c:	cmpne	r0, #0
   18f60:	moveq	r1, #1
   18f64:	moveq	r0, r1
   18f68:	umull	r2, r3, r0, r1
   18f6c:	adds	r3, r3, #0
   18f70:	movne	r3, #1
   18f74:	cmp	r2, #0
   18f78:	blt	18f88 <__assert_fail@plt+0x7c58>
   18f7c:	cmp	r3, #0
   18f80:	bne	18f88 <__assert_fail@plt+0x7c58>
   18f84:	b	10ff4 <calloc@plt>
   18f88:	push	{r4, lr}
   18f8c:	bl	111ec <__errno_location@plt>
   18f90:	mov	r3, #12
   18f94:	str	r3, [r0]
   18f98:	mov	r0, #0
   18f9c:	pop	{r4, pc}
   18fa0:	cmp	r0, #0
   18fa4:	moveq	r0, #1
   18fa8:	cmp	r0, #0
   18fac:	blt	18fb4 <__assert_fail@plt+0x7c84>
   18fb0:	b	11168 <malloc@plt>
   18fb4:	push	{r4, lr}
   18fb8:	bl	111ec <__errno_location@plt>
   18fbc:	mov	r3, #12
   18fc0:	str	r3, [r0]
   18fc4:	mov	r0, #0
   18fc8:	pop	{r4, pc}
   18fcc:	cmp	r0, #0
   18fd0:	beq	18ff4 <__assert_fail@plt+0x7cc4>
   18fd4:	cmp	r1, #0
   18fd8:	push	{lr}		; (str lr, [sp, #-4]!)
   18fdc:	sub	sp, sp, #12
   18fe0:	beq	18ffc <__assert_fail@plt+0x7ccc>
   18fe4:	blt	19014 <__assert_fail@plt+0x7ce4>
   18fe8:	add	sp, sp, #12
   18fec:	pop	{lr}		; (ldr lr, [sp], #4)
   18ff0:	b	110cc <realloc@plt>
   18ff4:	mov	r0, r1
   18ff8:	b	18fa0 <__assert_fail@plt+0x7c70>
   18ffc:	str	r1, [sp, #4]
   19000:	bl	12ba4 <__assert_fail@plt+0x1874>
   19004:	ldr	r3, [sp, #4]
   19008:	mov	r0, r3
   1900c:	add	sp, sp, #12
   19010:	pop	{pc}		; (ldr pc, [sp], #4)
   19014:	bl	111ec <__errno_location@plt>
   19018:	mov	r2, #12
   1901c:	mov	r3, #0
   19020:	str	r2, [r0]
   19024:	b	19008 <__assert_fail@plt+0x7cd8>
   19028:	push	{r4, r5, r6, lr}
   1902c:	mov	r4, r0
   19030:	bl	11138 <__fpending@plt>
   19034:	ldr	r5, [r4]
   19038:	and	r5, r5, #32
   1903c:	mov	r6, r0
   19040:	mov	r0, r4
   19044:	bl	19194 <__assert_fail@plt+0x7e64>
   19048:	cmp	r5, #0
   1904c:	mov	r4, r0
   19050:	bne	19070 <__assert_fail@plt+0x7d40>
   19054:	cmp	r0, #0
   19058:	beq	19068 <__assert_fail@plt+0x7d38>
   1905c:	cmp	r6, #0
   19060:	beq	1908c <__assert_fail@plt+0x7d5c>
   19064:	mvn	r4, #0
   19068:	mov	r0, r4
   1906c:	pop	{r4, r5, r6, pc}
   19070:	cmp	r0, #0
   19074:	bne	19064 <__assert_fail@plt+0x7d34>
   19078:	bl	111ec <__errno_location@plt>
   1907c:	str	r4, [r0]
   19080:	mvn	r4, #0
   19084:	mov	r0, r4
   19088:	pop	{r4, r5, r6, pc}
   1908c:	bl	111ec <__errno_location@plt>
   19090:	ldr	r4, [r0]
   19094:	subs	r4, r4, #9
   19098:	mvnne	r4, #0
   1909c:	mov	r0, r4
   190a0:	pop	{r4, r5, r6, pc}
   190a4:	push	{r4, r5}
   190a8:	mov	r4, #0
   190ac:	mov	r5, #0
   190b0:	ldr	r3, [pc, #12]	; 190c4 <__assert_fail@plt+0x7d94>
   190b4:	strd	r4, [r0, #16]
   190b8:	str	r3, [r0, #24]
   190bc:	pop	{r4, r5}
   190c0:	bx	lr
   190c4:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   190c8:	ldr	r3, [pc, #180]	; 19184 <__assert_fail@plt+0x7e54>
   190cc:	ldr	r2, [r0, #24]
   190d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   190d4:	cmp	r2, r3
   190d8:	bne	19170 <__assert_fail@plt+0x7e40>
   190dc:	ldrd	r6, [r0, #16]
   190e0:	orrs	r3, r6, r7
   190e4:	bne	19110 <__assert_fail@plt+0x7de0>
   190e8:	mov	r2, #1
   190ec:	mov	r3, #0
   190f0:	ldrd	r8, [r1, #96]	; 0x60
   190f4:	strd	r2, [r0, #16]
   190f8:	ldrd	r2, [r1]
   190fc:	mov	r1, #0
   19100:	strd	r8, [r0]
   19104:	strd	r2, [r0, #8]
   19108:	mov	r0, r1
   1910c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19110:	ldrd	r8, [r1, #96]	; 0x60
   19114:	ldrd	r2, [r0]
   19118:	cmp	r9, r3
   1911c:	cmpeq	r8, r2
   19120:	beq	19158 <__assert_fail@plt+0x7e28>
   19124:	adds	r2, r6, #1
   19128:	adc	r3, r7, #0
   1912c:	and	r6, r6, r2
   19130:	and	r7, r7, r3
   19134:	orrs	ip, r6, r7
   19138:	strd	r2, [r0, #16]
   1913c:	movne	r1, #0
   19140:	bne	19108 <__assert_fail@plt+0x7dd8>
   19144:	orrs	r3, r2, r3
   19148:	bne	190f8 <__assert_fail@plt+0x7dc8>
   1914c:	mov	r1, #1
   19150:	mov	r0, r1
   19154:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19158:	ldrd	r4, [r1]
   1915c:	ldrd	r2, [r0, #8]
   19160:	cmp	r5, r3
   19164:	cmpeq	r4, r2
   19168:	bne	19124 <__assert_fail@plt+0x7df4>
   1916c:	b	1914c <__assert_fail@plt+0x7e1c>
   19170:	ldr	r3, [pc, #16]	; 19188 <__assert_fail@plt+0x7e58>
   19174:	mov	r2, #60	; 0x3c
   19178:	ldr	r1, [pc, #12]	; 1918c <__assert_fail@plt+0x7e5c>
   1917c:	ldr	r0, [pc, #12]	; 19190 <__assert_fail@plt+0x7e60>
   19180:	bl	11330 <__assert_fail@plt>
   19184:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19188:	andeq	fp, r1, r4, lsl #3
   1918c:	muleq	r1, r0, r1
   19190:	andeq	fp, r1, r4, lsr #3
   19194:	push	{r4, r5, lr}
   19198:	sub	sp, sp, #12
   1919c:	mov	r4, r0
   191a0:	bl	1121c <fileno@plt>
   191a4:	cmp	r0, #0
   191a8:	mov	r0, r4
   191ac:	blt	19228 <__assert_fail@plt+0x7ef8>
   191b0:	bl	11180 <__freading@plt>
   191b4:	cmp	r0, #0
   191b8:	bne	191f4 <__assert_fail@plt+0x7ec4>
   191bc:	mov	r0, r4
   191c0:	bl	19440 <__assert_fail@plt+0x8110>
   191c4:	cmp	r0, #0
   191c8:	beq	19224 <__assert_fail@plt+0x7ef4>
   191cc:	bl	111ec <__errno_location@plt>
   191d0:	mov	r5, r0
   191d4:	mov	r0, r4
   191d8:	ldr	r4, [r5]
   191dc:	bl	11234 <fclose@plt>
   191e0:	cmp	r4, #0
   191e4:	mvnne	r0, #0
   191e8:	strne	r4, [r5]
   191ec:	add	sp, sp, #12
   191f0:	pop	{r4, r5, pc}
   191f4:	mov	r0, r4
   191f8:	bl	1121c <fileno@plt>
   191fc:	mov	r3, #1
   19200:	str	r3, [sp]
   19204:	mov	r2, #0
   19208:	mov	r3, #0
   1920c:	bl	11114 <lseek64@plt>
   19210:	mvn	r3, #0
   19214:	mvn	r2, #0
   19218:	cmp	r1, r3
   1921c:	cmpeq	r0, r2
   19220:	bne	191bc <__assert_fail@plt+0x7e8c>
   19224:	mov	r0, r4
   19228:	add	sp, sp, #12
   1922c:	pop	{r4, r5, lr}
   19230:	b	11234 <fclose@plt>
   19234:	push	{r1, r2, r3}
   19238:	push	{r4, r5, r6, r7, lr}
   1923c:	sub	sp, sp, #8
   19240:	add	r3, sp, #32
   19244:	ldr	r1, [sp, #28]
   19248:	str	r3, [sp, #4]
   1924c:	cmp	r1, #0
   19250:	beq	192e8 <__assert_fail@plt+0x7fb8>
   19254:	ldr	r2, [pc, #412]	; 193f8 <__assert_fail@plt+0x80c8>
   19258:	mov	r5, r0
   1925c:	cmp	r1, r2
   19260:	bne	192ac <__assert_fail@plt+0x7f7c>
   19264:	ldr	r6, [pc, #400]	; 193fc <__assert_fail@plt+0x80cc>
   19268:	ldr	r7, [r3]
   1926c:	add	r2, sp, #36	; 0x24
   19270:	ldr	r3, [r6]
   19274:	str	r2, [sp, #4]
   19278:	cmp	r3, #0
   1927c:	mov	r2, r7
   19280:	blt	193ac <__assert_fail@plt+0x807c>
   19284:	bl	1124c <fcntl64@plt>
   19288:	subs	r4, r0, #0
   1928c:	blt	19330 <__assert_fail@plt+0x8000>
   19290:	mov	r3, #1
   19294:	str	r3, [r6]
   19298:	mov	r0, r4
   1929c:	add	sp, sp, #8
   192a0:	pop	{r4, r5, r6, r7, lr}
   192a4:	add	sp, sp, #12
   192a8:	bx	lr
   192ac:	cmp	r1, #11
   192b0:	beq	192d8 <__assert_fail@plt+0x7fa8>
   192b4:	bgt	192f8 <__assert_fail@plt+0x7fc8>
   192b8:	cmp	r1, #3
   192bc:	beq	192d8 <__assert_fail@plt+0x7fa8>
   192c0:	ble	193ec <__assert_fail@plt+0x80bc>
   192c4:	cmp	r1, #8
   192c8:	beq	19318 <__assert_fail@plt+0x7fe8>
   192cc:	ble	19318 <__assert_fail@plt+0x7fe8>
   192d0:	cmp	r1, #9
   192d4:	bne	19318 <__assert_fail@plt+0x7fe8>
   192d8:	mov	r0, r5
   192dc:	bl	1124c <fcntl64@plt>
   192e0:	mov	r4, r0
   192e4:	b	19298 <__assert_fail@plt+0x7f68>
   192e8:	ldr	r2, [sp, #32]
   192ec:	bl	1124c <fcntl64@plt>
   192f0:	mov	r4, r0
   192f4:	b	19298 <__assert_fail@plt+0x7f68>
   192f8:	ldr	r3, [pc, #256]	; 19400 <__assert_fail@plt+0x80d0>
   192fc:	cmp	r1, r3
   19300:	bgt	193cc <__assert_fail@plt+0x809c>
   19304:	cmp	r1, r2
   19308:	bge	19318 <__assert_fail@plt+0x7fe8>
   1930c:	sub	r3, r3, #6
   19310:	cmp	r1, r3
   19314:	beq	192d8 <__assert_fail@plt+0x7fa8>
   19318:	ldr	r3, [sp, #4]
   1931c:	mov	r0, r5
   19320:	ldr	r2, [r3]
   19324:	bl	1124c <fcntl64@plt>
   19328:	mov	r4, r0
   1932c:	b	19298 <__assert_fail@plt+0x7f68>
   19330:	bl	111ec <__errno_location@plt>
   19334:	ldr	r3, [r0]
   19338:	cmp	r3, #22
   1933c:	bne	19290 <__assert_fail@plt+0x7f60>
   19340:	mov	r2, r7
   19344:	mov	r0, r5
   19348:	mov	r1, #0
   1934c:	bl	1124c <fcntl64@plt>
   19350:	subs	r4, r0, #0
   19354:	blt	19298 <__assert_fail@plt+0x7f68>
   19358:	mvn	r3, #0
   1935c:	str	r3, [r6]
   19360:	mov	r1, #1
   19364:	mov	r0, r4
   19368:	bl	1124c <fcntl64@plt>
   1936c:	subs	r2, r0, #0
   19370:	blt	1938c <__assert_fail@plt+0x805c>
   19374:	orr	r2, r2, #1
   19378:	mov	r1, #2
   1937c:	mov	r0, r4
   19380:	bl	1124c <fcntl64@plt>
   19384:	cmn	r0, #1
   19388:	bne	19298 <__assert_fail@plt+0x7f68>
   1938c:	bl	111ec <__errno_location@plt>
   19390:	mov	r5, r0
   19394:	mov	r0, r4
   19398:	ldr	r6, [r5]
   1939c:	mvn	r4, #0
   193a0:	bl	112f4 <close@plt>
   193a4:	str	r6, [r5]
   193a8:	b	19298 <__assert_fail@plt+0x7f68>
   193ac:	mov	r1, #0
   193b0:	bl	1124c <fcntl64@plt>
   193b4:	subs	r4, r0, #0
   193b8:	blt	19298 <__assert_fail@plt+0x7f68>
   193bc:	ldr	r3, [r6]
   193c0:	cmn	r3, #1
   193c4:	beq	19360 <__assert_fail@plt+0x8030>
   193c8:	b	19298 <__assert_fail@plt+0x7f68>
   193cc:	ldr	r3, [pc, #48]	; 19404 <__assert_fail@plt+0x80d4>
   193d0:	cmp	r1, r3
   193d4:	beq	19318 <__assert_fail@plt+0x7fe8>
   193d8:	blt	192d8 <__assert_fail@plt+0x7fa8>
   193dc:	add	r3, r3, #1
   193e0:	cmp	r1, r3
   193e4:	bne	19318 <__assert_fail@plt+0x7fe8>
   193e8:	b	192d8 <__assert_fail@plt+0x7fa8>
   193ec:	cmp	r1, #1
   193f0:	bne	19318 <__assert_fail@plt+0x7fe8>
   193f4:	b	192d8 <__assert_fail@plt+0x7fa8>
   193f8:	andeq	r0, r0, r6, lsl #8
   193fc:	strdeq	ip, [r2], -r4
   19400:	andeq	r0, r0, r7, lsl #8
   19404:	andeq	r0, r0, r9, lsl #8
   19408:	push	{r1, r2, r3}
   1940c:	push	{lr}		; (str lr, [sp, #-4]!)
   19410:	sub	sp, sp, #8
   19414:	ldr	r1, [sp, #12]
   19418:	ands	r2, r1, #64	; 0x40
   1941c:	addne	r3, sp, #16
   19420:	ldrne	r2, [sp, #16]
   19424:	strne	r3, [sp, #4]
   19428:	bl	1115c <open64@plt>
   1942c:	bl	17db4 <__assert_fail@plt+0x6a84>
   19430:	add	sp, sp, #8
   19434:	pop	{lr}		; (ldr lr, [sp], #4)
   19438:	add	sp, sp, #12
   1943c:	bx	lr
   19440:	push	{r4, lr}
   19444:	subs	r4, r0, #0
   19448:	sub	sp, sp, #8
   1944c:	beq	19468 <__assert_fail@plt+0x8138>
   19450:	bl	11180 <__freading@plt>
   19454:	cmp	r0, #0
   19458:	beq	19468 <__assert_fail@plt+0x8138>
   1945c:	ldr	r3, [r4]
   19460:	tst	r3, #256	; 0x100
   19464:	bne	19478 <__assert_fail@plt+0x8148>
   19468:	mov	r0, r4
   1946c:	add	sp, sp, #8
   19470:	pop	{r4, lr}
   19474:	b	1103c <fflush@plt>
   19478:	mov	r3, #1
   1947c:	str	r3, [sp]
   19480:	mov	r2, #0
   19484:	mov	r3, #0
   19488:	mov	r0, r4
   1948c:	bl	194a0 <__assert_fail@plt+0x8170>
   19490:	mov	r0, r4
   19494:	add	sp, sp, #8
   19498:	pop	{r4, lr}
   1949c:	b	1103c <fflush@plt>
   194a0:	push	{r4, r5, r6, r7, r8, lr}
   194a4:	sub	sp, sp, #8
   194a8:	ldmib	r0, {ip, lr}
   194ac:	mov	r4, r0
   194b0:	ldr	r5, [sp, #32]
   194b4:	cmp	lr, ip
   194b8:	beq	194d0 <__assert_fail@plt+0x81a0>
   194bc:	str	r5, [sp, #32]
   194c0:	mov	r0, r4
   194c4:	add	sp, sp, #8
   194c8:	pop	{r4, r5, r6, r7, r8, lr}
   194cc:	b	11240 <fseeko64@plt>
   194d0:	ldr	lr, [r0, #20]
   194d4:	ldr	ip, [r0, #16]
   194d8:	cmp	lr, ip
   194dc:	bne	194bc <__assert_fail@plt+0x818c>
   194e0:	ldr	r8, [r0, #36]	; 0x24
   194e4:	cmp	r8, #0
   194e8:	bne	194bc <__assert_fail@plt+0x818c>
   194ec:	mov	r6, r2
   194f0:	mov	r7, r3
   194f4:	bl	1121c <fileno@plt>
   194f8:	mov	r2, r6
   194fc:	mov	r3, r7
   19500:	str	r5, [sp]
   19504:	bl	11114 <lseek64@plt>
   19508:	mvn	r3, #0
   1950c:	mvn	r2, #0
   19510:	cmp	r1, r3
   19514:	cmpeq	r0, r2
   19518:	beq	19538 <__assert_fail@plt+0x8208>
   1951c:	ldr	r3, [r4]
   19520:	strd	r0, [r4, #80]	; 0x50
   19524:	mov	r0, r8
   19528:	bic	r3, r3, #16
   1952c:	str	r3, [r4]
   19530:	add	sp, sp, #8
   19534:	pop	{r4, r5, r6, r7, r8, pc}
   19538:	mvn	r0, #0
   1953c:	b	19530 <__assert_fail@plt+0x8200>
   19540:	push	{r4, lr}
   19544:	mov	r0, #14
   19548:	bl	11270 <nl_langinfo@plt>
   1954c:	cmp	r0, #0
   19550:	beq	19568 <__assert_fail@plt+0x8238>
   19554:	ldrb	r2, [r0]
   19558:	ldr	r3, [pc, #16]	; 19570 <__assert_fail@plt+0x8240>
   1955c:	cmp	r2, #0
   19560:	moveq	r0, r3
   19564:	pop	{r4, pc}
   19568:	ldr	r0, [pc]	; 19570 <__assert_fail@plt+0x8240>
   1956c:	pop	{r4, pc}
   19570:			; <UNDEFINED> instruction: 0x0001b1bc
   19574:	push	{r4, r5, r6, r7, lr}
   19578:	subs	r6, r0, #0
   1957c:	sub	sp, sp, #12
   19580:	addeq	r6, sp, #4
   19584:	mov	r0, r6
   19588:	mov	r5, r2
   1958c:	mov	r7, r1
   19590:	bl	11144 <mbrtowc@plt>
   19594:	cmp	r5, #0
   19598:	cmnne	r0, #3
   1959c:	mov	r4, r0
   195a0:	bls	195bc <__assert_fail@plt+0x828c>
   195a4:	mov	r0, #0
   195a8:	bl	19620 <__assert_fail@plt+0x82f0>
   195ac:	cmp	r0, #0
   195b0:	moveq	r4, #1
   195b4:	ldrbeq	r3, [r7]
   195b8:	streq	r3, [r6]
   195bc:	mov	r0, r4
   195c0:	add	sp, sp, #12
   195c4:	pop	{r4, r5, r6, r7, pc}
   195c8:	push	{r4, r5, r6, lr}
   195cc:	subs	r4, r2, #0
   195d0:	mov	r6, r0
   195d4:	mov	r5, r1
   195d8:	beq	19604 <__assert_fail@plt+0x82d4>
   195dc:	mov	r1, r4
   195e0:	mvn	r0, #0
   195e4:	bl	19714 <__assert_fail@plt+0x83e4>
   195e8:	cmp	r0, r5
   195ec:	bcs	19604 <__assert_fail@plt+0x82d4>
   195f0:	bl	111ec <__errno_location@plt>
   195f4:	mov	r3, #12
   195f8:	str	r3, [r0]
   195fc:	mov	r0, #0
   19600:	pop	{r4, r5, r6, pc}
   19604:	mul	r1, r5, r4
   19608:	mov	r0, r6
   1960c:	pop	{r4, r5, r6, lr}
   19610:	b	18fcc <__assert_fail@plt+0x7c9c>
   19614:	mov	r2, #3
   19618:	mov	r1, #0
   1961c:	b	19234 <__assert_fail@plt+0x7f04>
   19620:	push	{lr}		; (str lr, [sp, #-4]!)
   19624:	sub	sp, sp, #268	; 0x10c
   19628:	add	r1, sp, #4
   1962c:	ldr	r2, [pc, #60]	; 19670 <__assert_fail@plt+0x8340>
   19630:	bl	1967c <__assert_fail@plt+0x834c>
   19634:	cmp	r0, #0
   19638:	movne	r0, #0
   1963c:	bne	19668 <__assert_fail@plt+0x8338>
   19640:	ldr	r1, [pc, #44]	; 19674 <__assert_fail@plt+0x8344>
   19644:	add	r0, sp, #4
   19648:	bl	11024 <strcmp@plt>
   1964c:	cmp	r0, #0
   19650:	beq	19668 <__assert_fail@plt+0x8338>
   19654:	add	r0, sp, #4
   19658:	ldr	r1, [pc, #24]	; 19678 <__assert_fail@plt+0x8348>
   1965c:	bl	11024 <strcmp@plt>
   19660:	adds	r0, r0, #0
   19664:	movne	r0, #1
   19668:	add	sp, sp, #268	; 0x10c
   1966c:	pop	{pc}		; (ldr pc, [sp], #4)
   19670:	andeq	r0, r0, r1, lsl #2
   19674:	andeq	fp, r1, r4, asr #3
   19678:	andeq	fp, r1, r8, asr #3
   1967c:	push	{r4, r5, r6, lr}
   19680:	mov	r5, r1
   19684:	mov	r1, #0
   19688:	mov	r4, r2
   1968c:	bl	11258 <setlocale@plt>
   19690:	subs	r6, r0, #0
   19694:	beq	196f0 <__assert_fail@plt+0x83c0>
   19698:	bl	111bc <strlen@plt>
   1969c:	cmp	r4, r0
   196a0:	bhi	196d8 <__assert_fail@plt+0x83a8>
   196a4:	cmp	r4, #0
   196a8:	bne	196b4 <__assert_fail@plt+0x8384>
   196ac:	mov	r0, #34	; 0x22
   196b0:	pop	{r4, r5, r6, pc}
   196b4:	sub	r4, r4, #1
   196b8:	mov	r1, r6
   196bc:	mov	r2, r4
   196c0:	mov	r0, r5
   196c4:	bl	11078 <memcpy@plt>
   196c8:	mov	r3, #0
   196cc:	strb	r3, [r5, r4]
   196d0:	mov	r0, #34	; 0x22
   196d4:	pop	{r4, r5, r6, pc}
   196d8:	add	r2, r0, #1
   196dc:	mov	r1, r6
   196e0:	mov	r0, r5
   196e4:	bl	11078 <memcpy@plt>
   196e8:	mov	r0, #0
   196ec:	pop	{r4, r5, r6, pc}
   196f0:	cmp	r4, #0
   196f4:	beq	19704 <__assert_fail@plt+0x83d4>
   196f8:	strb	r6, [r5]
   196fc:	mov	r0, #22
   19700:	pop	{r4, r5, r6, pc}
   19704:	mov	r0, #22
   19708:	pop	{r4, r5, r6, pc}
   1970c:	mov	r1, #0
   19710:	b	11258 <setlocale@plt>
   19714:	subs	r2, r1, #1
   19718:	bxeq	lr
   1971c:	bcc	198f4 <__assert_fail@plt+0x85c4>
   19720:	cmp	r0, r1
   19724:	bls	198d8 <__assert_fail@plt+0x85a8>
   19728:	tst	r1, r2
   1972c:	beq	198e4 <__assert_fail@plt+0x85b4>
   19730:	clz	r3, r0
   19734:	clz	r2, r1
   19738:	sub	r3, r2, r3
   1973c:	rsbs	r3, r3, #31
   19740:	addne	r3, r3, r3, lsl #1
   19744:	mov	r2, #0
   19748:	addne	pc, pc, r3, lsl #2
   1974c:	nop			; (mov r0, r0)
   19750:	cmp	r0, r1, lsl #31
   19754:	adc	r2, r2, r2
   19758:	subcs	r0, r0, r1, lsl #31
   1975c:	cmp	r0, r1, lsl #30
   19760:	adc	r2, r2, r2
   19764:	subcs	r0, r0, r1, lsl #30
   19768:	cmp	r0, r1, lsl #29
   1976c:	adc	r2, r2, r2
   19770:	subcs	r0, r0, r1, lsl #29
   19774:	cmp	r0, r1, lsl #28
   19778:	adc	r2, r2, r2
   1977c:	subcs	r0, r0, r1, lsl #28
   19780:	cmp	r0, r1, lsl #27
   19784:	adc	r2, r2, r2
   19788:	subcs	r0, r0, r1, lsl #27
   1978c:	cmp	r0, r1, lsl #26
   19790:	adc	r2, r2, r2
   19794:	subcs	r0, r0, r1, lsl #26
   19798:	cmp	r0, r1, lsl #25
   1979c:	adc	r2, r2, r2
   197a0:	subcs	r0, r0, r1, lsl #25
   197a4:	cmp	r0, r1, lsl #24
   197a8:	adc	r2, r2, r2
   197ac:	subcs	r0, r0, r1, lsl #24
   197b0:	cmp	r0, r1, lsl #23
   197b4:	adc	r2, r2, r2
   197b8:	subcs	r0, r0, r1, lsl #23
   197bc:	cmp	r0, r1, lsl #22
   197c0:	adc	r2, r2, r2
   197c4:	subcs	r0, r0, r1, lsl #22
   197c8:	cmp	r0, r1, lsl #21
   197cc:	adc	r2, r2, r2
   197d0:	subcs	r0, r0, r1, lsl #21
   197d4:	cmp	r0, r1, lsl #20
   197d8:	adc	r2, r2, r2
   197dc:	subcs	r0, r0, r1, lsl #20
   197e0:	cmp	r0, r1, lsl #19
   197e4:	adc	r2, r2, r2
   197e8:	subcs	r0, r0, r1, lsl #19
   197ec:	cmp	r0, r1, lsl #18
   197f0:	adc	r2, r2, r2
   197f4:	subcs	r0, r0, r1, lsl #18
   197f8:	cmp	r0, r1, lsl #17
   197fc:	adc	r2, r2, r2
   19800:	subcs	r0, r0, r1, lsl #17
   19804:	cmp	r0, r1, lsl #16
   19808:	adc	r2, r2, r2
   1980c:	subcs	r0, r0, r1, lsl #16
   19810:	cmp	r0, r1, lsl #15
   19814:	adc	r2, r2, r2
   19818:	subcs	r0, r0, r1, lsl #15
   1981c:	cmp	r0, r1, lsl #14
   19820:	adc	r2, r2, r2
   19824:	subcs	r0, r0, r1, lsl #14
   19828:	cmp	r0, r1, lsl #13
   1982c:	adc	r2, r2, r2
   19830:	subcs	r0, r0, r1, lsl #13
   19834:	cmp	r0, r1, lsl #12
   19838:	adc	r2, r2, r2
   1983c:	subcs	r0, r0, r1, lsl #12
   19840:	cmp	r0, r1, lsl #11
   19844:	adc	r2, r2, r2
   19848:	subcs	r0, r0, r1, lsl #11
   1984c:	cmp	r0, r1, lsl #10
   19850:	adc	r2, r2, r2
   19854:	subcs	r0, r0, r1, lsl #10
   19858:	cmp	r0, r1, lsl #9
   1985c:	adc	r2, r2, r2
   19860:	subcs	r0, r0, r1, lsl #9
   19864:	cmp	r0, r1, lsl #8
   19868:	adc	r2, r2, r2
   1986c:	subcs	r0, r0, r1, lsl #8
   19870:	cmp	r0, r1, lsl #7
   19874:	adc	r2, r2, r2
   19878:	subcs	r0, r0, r1, lsl #7
   1987c:	cmp	r0, r1, lsl #6
   19880:	adc	r2, r2, r2
   19884:	subcs	r0, r0, r1, lsl #6
   19888:	cmp	r0, r1, lsl #5
   1988c:	adc	r2, r2, r2
   19890:	subcs	r0, r0, r1, lsl #5
   19894:	cmp	r0, r1, lsl #4
   19898:	adc	r2, r2, r2
   1989c:	subcs	r0, r0, r1, lsl #4
   198a0:	cmp	r0, r1, lsl #3
   198a4:	adc	r2, r2, r2
   198a8:	subcs	r0, r0, r1, lsl #3
   198ac:	cmp	r0, r1, lsl #2
   198b0:	adc	r2, r2, r2
   198b4:	subcs	r0, r0, r1, lsl #2
   198b8:	cmp	r0, r1, lsl #1
   198bc:	adc	r2, r2, r2
   198c0:	subcs	r0, r0, r1, lsl #1
   198c4:	cmp	r0, r1
   198c8:	adc	r2, r2, r2
   198cc:	subcs	r0, r0, r1
   198d0:	mov	r0, r2
   198d4:	bx	lr
   198d8:	moveq	r0, #1
   198dc:	movne	r0, #0
   198e0:	bx	lr
   198e4:	clz	r2, r1
   198e8:	rsb	r2, r2, #31
   198ec:	lsr	r0, r0, r2
   198f0:	bx	lr
   198f4:	cmp	r0, #0
   198f8:	mvnne	r0, #0
   198fc:	b	19b9c <__assert_fail@plt+0x886c>
   19900:	cmp	r1, #0
   19904:	beq	198f4 <__assert_fail@plt+0x85c4>
   19908:	push	{r0, r1, lr}
   1990c:	bl	19714 <__assert_fail@plt+0x83e4>
   19910:	pop	{r1, r2, lr}
   19914:	mul	r3, r2, r0
   19918:	sub	r1, r1, r3
   1991c:	bx	lr
   19920:	cmp	r1, #0
   19924:	beq	19b30 <__assert_fail@plt+0x8800>
   19928:	eor	ip, r0, r1
   1992c:	rsbmi	r1, r1, #0
   19930:	subs	r2, r1, #1
   19934:	beq	19afc <__assert_fail@plt+0x87cc>
   19938:	movs	r3, r0
   1993c:	rsbmi	r3, r0, #0
   19940:	cmp	r3, r1
   19944:	bls	19b08 <__assert_fail@plt+0x87d8>
   19948:	tst	r1, r2
   1994c:	beq	19b18 <__assert_fail@plt+0x87e8>
   19950:	clz	r2, r3
   19954:	clz	r0, r1
   19958:	sub	r2, r0, r2
   1995c:	rsbs	r2, r2, #31
   19960:	addne	r2, r2, r2, lsl #1
   19964:	mov	r0, #0
   19968:	addne	pc, pc, r2, lsl #2
   1996c:	nop			; (mov r0, r0)
   19970:	cmp	r3, r1, lsl #31
   19974:	adc	r0, r0, r0
   19978:	subcs	r3, r3, r1, lsl #31
   1997c:	cmp	r3, r1, lsl #30
   19980:	adc	r0, r0, r0
   19984:	subcs	r3, r3, r1, lsl #30
   19988:	cmp	r3, r1, lsl #29
   1998c:	adc	r0, r0, r0
   19990:	subcs	r3, r3, r1, lsl #29
   19994:	cmp	r3, r1, lsl #28
   19998:	adc	r0, r0, r0
   1999c:	subcs	r3, r3, r1, lsl #28
   199a0:	cmp	r3, r1, lsl #27
   199a4:	adc	r0, r0, r0
   199a8:	subcs	r3, r3, r1, lsl #27
   199ac:	cmp	r3, r1, lsl #26
   199b0:	adc	r0, r0, r0
   199b4:	subcs	r3, r3, r1, lsl #26
   199b8:	cmp	r3, r1, lsl #25
   199bc:	adc	r0, r0, r0
   199c0:	subcs	r3, r3, r1, lsl #25
   199c4:	cmp	r3, r1, lsl #24
   199c8:	adc	r0, r0, r0
   199cc:	subcs	r3, r3, r1, lsl #24
   199d0:	cmp	r3, r1, lsl #23
   199d4:	adc	r0, r0, r0
   199d8:	subcs	r3, r3, r1, lsl #23
   199dc:	cmp	r3, r1, lsl #22
   199e0:	adc	r0, r0, r0
   199e4:	subcs	r3, r3, r1, lsl #22
   199e8:	cmp	r3, r1, lsl #21
   199ec:	adc	r0, r0, r0
   199f0:	subcs	r3, r3, r1, lsl #21
   199f4:	cmp	r3, r1, lsl #20
   199f8:	adc	r0, r0, r0
   199fc:	subcs	r3, r3, r1, lsl #20
   19a00:	cmp	r3, r1, lsl #19
   19a04:	adc	r0, r0, r0
   19a08:	subcs	r3, r3, r1, lsl #19
   19a0c:	cmp	r3, r1, lsl #18
   19a10:	adc	r0, r0, r0
   19a14:	subcs	r3, r3, r1, lsl #18
   19a18:	cmp	r3, r1, lsl #17
   19a1c:	adc	r0, r0, r0
   19a20:	subcs	r3, r3, r1, lsl #17
   19a24:	cmp	r3, r1, lsl #16
   19a28:	adc	r0, r0, r0
   19a2c:	subcs	r3, r3, r1, lsl #16
   19a30:	cmp	r3, r1, lsl #15
   19a34:	adc	r0, r0, r0
   19a38:	subcs	r3, r3, r1, lsl #15
   19a3c:	cmp	r3, r1, lsl #14
   19a40:	adc	r0, r0, r0
   19a44:	subcs	r3, r3, r1, lsl #14
   19a48:	cmp	r3, r1, lsl #13
   19a4c:	adc	r0, r0, r0
   19a50:	subcs	r3, r3, r1, lsl #13
   19a54:	cmp	r3, r1, lsl #12
   19a58:	adc	r0, r0, r0
   19a5c:	subcs	r3, r3, r1, lsl #12
   19a60:	cmp	r3, r1, lsl #11
   19a64:	adc	r0, r0, r0
   19a68:	subcs	r3, r3, r1, lsl #11
   19a6c:	cmp	r3, r1, lsl #10
   19a70:	adc	r0, r0, r0
   19a74:	subcs	r3, r3, r1, lsl #10
   19a78:	cmp	r3, r1, lsl #9
   19a7c:	adc	r0, r0, r0
   19a80:	subcs	r3, r3, r1, lsl #9
   19a84:	cmp	r3, r1, lsl #8
   19a88:	adc	r0, r0, r0
   19a8c:	subcs	r3, r3, r1, lsl #8
   19a90:	cmp	r3, r1, lsl #7
   19a94:	adc	r0, r0, r0
   19a98:	subcs	r3, r3, r1, lsl #7
   19a9c:	cmp	r3, r1, lsl #6
   19aa0:	adc	r0, r0, r0
   19aa4:	subcs	r3, r3, r1, lsl #6
   19aa8:	cmp	r3, r1, lsl #5
   19aac:	adc	r0, r0, r0
   19ab0:	subcs	r3, r3, r1, lsl #5
   19ab4:	cmp	r3, r1, lsl #4
   19ab8:	adc	r0, r0, r0
   19abc:	subcs	r3, r3, r1, lsl #4
   19ac0:	cmp	r3, r1, lsl #3
   19ac4:	adc	r0, r0, r0
   19ac8:	subcs	r3, r3, r1, lsl #3
   19acc:	cmp	r3, r1, lsl #2
   19ad0:	adc	r0, r0, r0
   19ad4:	subcs	r3, r3, r1, lsl #2
   19ad8:	cmp	r3, r1, lsl #1
   19adc:	adc	r0, r0, r0
   19ae0:	subcs	r3, r3, r1, lsl #1
   19ae4:	cmp	r3, r1
   19ae8:	adc	r0, r0, r0
   19aec:	subcs	r3, r3, r1
   19af0:	cmp	ip, #0
   19af4:	rsbmi	r0, r0, #0
   19af8:	bx	lr
   19afc:	teq	ip, r0
   19b00:	rsbmi	r0, r0, #0
   19b04:	bx	lr
   19b08:	movcc	r0, #0
   19b0c:	asreq	r0, ip, #31
   19b10:	orreq	r0, r0, #1
   19b14:	bx	lr
   19b18:	clz	r2, r1
   19b1c:	rsb	r2, r2, #31
   19b20:	cmp	ip, #0
   19b24:	lsr	r0, r3, r2
   19b28:	rsbmi	r0, r0, #0
   19b2c:	bx	lr
   19b30:	cmp	r0, #0
   19b34:	mvngt	r0, #-2147483648	; 0x80000000
   19b38:	movlt	r0, #-2147483648	; 0x80000000
   19b3c:	b	19b9c <__assert_fail@plt+0x886c>
   19b40:	cmp	r1, #0
   19b44:	beq	19b30 <__assert_fail@plt+0x8800>
   19b48:	push	{r0, r1, lr}
   19b4c:	bl	19928 <__assert_fail@plt+0x85f8>
   19b50:	pop	{r1, r2, lr}
   19b54:	mul	r3, r2, r0
   19b58:	sub	r1, r1, r3
   19b5c:	bx	lr
   19b60:	cmp	r3, #0
   19b64:	cmpeq	r2, #0
   19b68:	bne	19b80 <__assert_fail@plt+0x8850>
   19b6c:	cmp	r1, #0
   19b70:	cmpeq	r0, #0
   19b74:	mvnne	r1, #0
   19b78:	mvnne	r0, #0
   19b7c:	b	19b9c <__assert_fail@plt+0x886c>
   19b80:	sub	sp, sp, #8
   19b84:	push	{sp, lr}
   19b88:	bl	19bac <__assert_fail@plt+0x887c>
   19b8c:	ldr	lr, [sp, #4]
   19b90:	add	sp, sp, #8
   19b94:	pop	{r2, r3}
   19b98:	bx	lr
   19b9c:	push	{r1, lr}
   19ba0:	mov	r0, #8
   19ba4:	bl	11018 <raise@plt>
   19ba8:	pop	{r1, pc}
   19bac:	cmp	r1, r3
   19bb0:	push	{r4, r5, r6, r7, r8, r9, lr}
   19bb4:	cmpeq	r0, r2
   19bb8:	mov	r4, r0
   19bbc:	mov	r5, r1
   19bc0:	ldr	r9, [sp, #28]
   19bc4:	movcc	r0, #0
   19bc8:	movcc	r1, #0
   19bcc:	bcc	19cc4 <__assert_fail@plt+0x8994>
   19bd0:	cmp	r3, #0
   19bd4:	clzeq	ip, r2
   19bd8:	clzne	ip, r3
   19bdc:	addeq	ip, ip, #32
   19be0:	cmp	r5, #0
   19be4:	clzeq	r1, r4
   19be8:	addeq	r1, r1, #32
   19bec:	clzne	r1, r5
   19bf0:	sub	ip, ip, r1
   19bf4:	sub	lr, ip, #32
   19bf8:	lsl	r7, r3, ip
   19bfc:	rsb	r8, ip, #32
   19c00:	orr	r7, r7, r2, lsl lr
   19c04:	orr	r7, r7, r2, lsr r8
   19c08:	lsl	r6, r2, ip
   19c0c:	cmp	r5, r7
   19c10:	cmpeq	r4, r6
   19c14:	movcc	r0, #0
   19c18:	movcc	r1, #0
   19c1c:	bcc	19c38 <__assert_fail@plt+0x8908>
   19c20:	mov	r3, #1
   19c24:	subs	r4, r4, r6
   19c28:	lsl	r1, r3, lr
   19c2c:	lsl	r0, r3, ip
   19c30:	orr	r1, r1, r3, lsr r8
   19c34:	sbc	r5, r5, r7
   19c38:	cmp	ip, #0
   19c3c:	beq	19cc4 <__assert_fail@plt+0x8994>
   19c40:	lsrs	r3, r7, #1
   19c44:	rrx	r2, r6
   19c48:	mov	r6, ip
   19c4c:	b	19c70 <__assert_fail@plt+0x8940>
   19c50:	subs	r4, r4, r2
   19c54:	sbc	r5, r5, r3
   19c58:	adds	r4, r4, r4
   19c5c:	adc	r5, r5, r5
   19c60:	adds	r4, r4, #1
   19c64:	adc	r5, r5, #0
   19c68:	subs	r6, r6, #1
   19c6c:	beq	19c8c <__assert_fail@plt+0x895c>
   19c70:	cmp	r5, r3
   19c74:	cmpeq	r4, r2
   19c78:	bcs	19c50 <__assert_fail@plt+0x8920>
   19c7c:	adds	r4, r4, r4
   19c80:	adc	r5, r5, r5
   19c84:	subs	r6, r6, #1
   19c88:	bne	19c70 <__assert_fail@plt+0x8940>
   19c8c:	lsr	r6, r4, ip
   19c90:	lsr	r7, r5, ip
   19c94:	orr	r6, r6, r5, lsl r8
   19c98:	adds	r2, r0, r4
   19c9c:	orr	r6, r6, r5, lsr lr
   19ca0:	adc	r3, r1, r5
   19ca4:	lsl	r1, r7, ip
   19ca8:	orr	r1, r1, r6, lsl lr
   19cac:	lsl	r0, r6, ip
   19cb0:	orr	r1, r1, r6, lsr r8
   19cb4:	subs	r0, r2, r0
   19cb8:	mov	r4, r6
   19cbc:	mov	r5, r7
   19cc0:	sbc	r1, r3, r1
   19cc4:	cmp	r9, #0
   19cc8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19ccc:	strd	r4, [r9]
   19cd0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19cd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19cd8:	mov	r7, r0
   19cdc:	ldr	r6, [pc, #72]	; 19d2c <__assert_fail@plt+0x89fc>
   19ce0:	ldr	r5, [pc, #72]	; 19d30 <__assert_fail@plt+0x8a00>
   19ce4:	add	r6, pc, r6
   19ce8:	add	r5, pc, r5
   19cec:	sub	r6, r6, r5
   19cf0:	mov	r8, r1
   19cf4:	mov	r9, r2
   19cf8:	bl	10fc8 <fstatfs64@plt-0x20>
   19cfc:	asrs	r6, r6, #2
   19d00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19d04:	mov	r4, #0
   19d08:	add	r4, r4, #1
   19d0c:	ldr	r3, [r5], #4
   19d10:	mov	r2, r9
   19d14:	mov	r1, r8
   19d18:	mov	r0, r7
   19d1c:	blx	r3
   19d20:	cmp	r6, r4
   19d24:	bne	19d08 <__assert_fail@plt+0x89d8>
   19d28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19d2c:	andeq	r2, r1, r4, lsr #4
   19d30:	andeq	r2, r1, ip, lsl r2
   19d34:	bx	lr
   19d38:	ldr	r3, [pc, #12]	; 19d4c <__assert_fail@plt+0x8a1c>
   19d3c:	mov	r1, #0
   19d40:	add	r3, pc, r3
   19d44:	ldr	r2, [r3]
   19d48:	b	111f8 <__cxa_atexit@plt>
   19d4c:	andeq	r2, r1, r8, ror #7

Disassembly of section .fini:

00019d50 <.fini>:
   19d50:	push	{r3, lr}
   19d54:	pop	{r3, pc}
