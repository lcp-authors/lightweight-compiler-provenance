
../repos/tbeu-matio-3dd266d/src/.libs/libmatio.so.9.1.0:     file format elf32-littlearm


Disassembly of section .init:

00001448 <_init>:
    1448:	push	{r3, lr}
    144c:	bl	1748 <call_weak_fn>
    1450:	pop	{r3, pc}

Disassembly of section .plt:

00001454 <.plt>:
    1454:	push	{lr}		; (str lr, [sp, #-4]!)
    1458:	ldr	lr, [pc, #4]	; 1464 <.plt+0x10>
    145c:	add	lr, pc, lr
    1460:	ldr	pc, [lr, #8]!
    1464:	.word	0x00050b9c

00001468 <calloc@plt>:
    1468:	add	ip, pc, #0, 12
    146c:	add	ip, ip, #80, 20	; 0x50000
    1470:	ldr	pc, [ip, #2972]!	; 0xb9c

00001474 <raise@plt>:
    1474:	add	ip, pc, #0, 12
    1478:	add	ip, ip, #80, 20	; 0x50000
    147c:	ldr	pc, [ip, #2964]!	; 0xb94

00001480 <Mat_VarReadNext@plt>:
    1480:	add	ip, pc, #0, 12
    1484:	add	ip, ip, #80, 20	; 0x50000
    1488:	ldr	pc, [ip, #2956]!	; 0xb8c

0000148c <strcmp@plt>:
    148c:	add	ip, pc, #0, 12
    1490:	add	ip, ip, #80, 20	; 0x50000
    1494:	ldr	pc, [ip, #2948]!	; 0xb84

00001498 <__cxa_finalize@plt>:
    1498:	add	ip, pc, #0, 12
    149c:	add	ip, ip, #80, 20	; 0x50000
    14a0:	ldr	pc, [ip, #2940]!	; 0xb7c

000014a4 <Mat_Open@plt>:
    14a4:	add	ip, pc, #0, 12
    14a8:	add	ip, ip, #80, 20	; 0x50000
    14ac:	ldr	pc, [ip, #2932]!	; 0xb74

000014b0 <printf@plt>:
    14b0:	add	ip, pc, #0, 12
    14b4:	add	ip, ip, #80, 20	; 0x50000
    14b8:	ldr	pc, [ip, #2924]!	; 0xb6c

000014bc <fopen@plt>:
    14bc:	add	ip, pc, #0, 12
    14c0:	add	ip, ip, #80, 20	; 0x50000
    14c4:	ldr	pc, [ip, #2916]!	; 0xb64

000014c8 <inflate@plt>:
    14c8:	add	ip, pc, #0, 12
    14cc:	add	ip, ip, #80, 20	; 0x50000
    14d0:	ldr	pc, [ip, #2908]!	; 0xb5c

000014d4 <fflush@plt>:
    14d4:	add	ip, pc, #0, 12
    14d8:	add	ip, ip, #80, 20	; 0x50000
    14dc:	ldr	pc, [ip, #2900]!	; 0xb54

000014e0 <free@plt>:
    14e0:	add	ip, pc, #0, 12
    14e4:	add	ip, ip, #80, 20	; 0x50000
    14e8:	ldr	pc, [ip, #2892]!	; 0xb4c

000014ec <Mat_Warning@plt>:
    14ec:	add	ip, pc, #0, 12
    14f0:	add	ip, ip, #80, 20	; 0x50000
    14f4:	ldr	pc, [ip, #2884]!	; 0xb44

000014f8 <memcpy@plt>:
    14f8:	add	ip, pc, #0, 12
    14fc:	add	ip, ip, #80, 20	; 0x50000
    1500:	ldr	pc, [ip, #2876]!	; 0xb3c

00001504 <Mat_VarWrite@plt>:
    1504:	add	ip, pc, #0, 12
    1508:	add	ip, ip, #80, 20	; 0x50000
    150c:	ldr	pc, [ip, #2868]!	; 0xb34

00001510 <time@plt>:
    1510:	add	ip, pc, #0, 12
    1514:	add	ip, ip, #80, 20	; 0x50000
    1518:	ldr	pc, [ip, #2860]!	; 0xb2c

0000151c <ftell@plt>:
    151c:	add	ip, pc, #0, 12
    1520:	add	ip, ip, #80, 20	; 0x50000
    1524:	ldr	pc, [ip, #2852]!	; 0xb24

00001528 <ctime@plt>:
    1528:	add	ip, pc, #0, 12
    152c:	add	ip, ip, #80, 20	; 0x50000
    1530:	ldr	pc, [ip, #2844]!	; 0xb1c

00001534 <strdup@plt>:
    1534:	add	ip, pc, #0, 12
    1538:	add	ip, ip, #80, 20	; 0x50000
    153c:	ldr	pc, [ip, #2836]!	; 0xb14

00001540 <realloc@plt>:
    1540:	add	ip, pc, #0, 12
    1544:	add	ip, ip, #80, 20	; 0x50000
    1548:	ldr	pc, [ip, #2828]!	; 0xb0c

0000154c <Mat_VarReadInfo@plt>:
    154c:	add	ip, pc, #0, 12
    1550:	add	ip, ip, #80, 20	; 0x50000
    1554:	ldr	pc, [ip, #2820]!	; 0xb04

00001558 <zError@plt>:
    1558:	add	ip, pc, #0, 12
    155c:	add	ip, ip, #80, 20	; 0x50000
    1560:	ldr	pc, [ip, #2812]!	; 0xafc

00001564 <deflate@plt>:
    1564:	add	ip, pc, #0, 12
    1568:	add	ip, ip, #80, 20	; 0x50000
    156c:	ldr	pc, [ip, #2804]!	; 0xaf4

00001570 <Mat_VarCalloc@plt>:
    1570:	add	ip, pc, #0, 12
    1574:	add	ip, ip, #80, 20	; 0x50000
    1578:	ldr	pc, [ip, #2796]!	; 0xaec

0000157c <fwrite@plt>:
    157c:	add	ip, pc, #0, 12
    1580:	add	ip, ip, #80, 20	; 0x50000
    1584:	ldr	pc, [ip, #2788]!	; 0xae4

00001588 <fread@plt>:
    1588:	add	ip, pc, #0, 12
    158c:	add	ip, ip, #80, 20	; 0x50000
    1590:	ldr	pc, [ip, #2780]!	; 0xadc

00001594 <floor@plt>:
    1594:	add	ip, pc, #0, 12
    1598:	add	ip, ip, #80, 20	; 0x50000
    159c:	ldr	pc, [ip, #2772]!	; 0xad4

000015a0 <puts@plt>:
    15a0:	add	ip, pc, #0, 12
    15a4:	add	ip, ip, #80, 20	; 0x50000
    15a8:	ldr	pc, [ip, #2764]!	; 0xacc

000015ac <malloc@plt>:
    15ac:	add	ip, pc, #0, 12
    15b0:	add	ip, ip, #80, 20	; 0x50000
    15b4:	ldr	pc, [ip, #2756]!	; 0xac4

000015b8 <deflateInit_@plt>:
    15b8:	add	ip, pc, #0, 12
    15bc:	add	ip, ip, #80, 20	; 0x50000
    15c0:	ldr	pc, [ip, #2748]!	; 0xabc

000015c4 <mktemp@plt>:
    15c4:	add	ip, pc, #0, 12
    15c8:	add	ip, ip, #80, 20	; 0x50000
    15cc:	ldr	pc, [ip, #2740]!	; 0xab4

000015d0 <__gmon_start__@plt>:
    15d0:	add	ip, pc, #0, 12
    15d4:	add	ip, ip, #80, 20	; 0x50000
    15d8:	ldr	pc, [ip, #2732]!	; 0xaac

000015dc <exit@plt>:
    15dc:	add	ip, pc, #0, 12
    15e0:	add	ip, ip, #80, 20	; 0x50000
    15e4:	ldr	pc, [ip, #2724]!	; 0xaa4

000015e8 <feof@plt>:
    15e8:	add	ip, pc, #0, 12
    15ec:	add	ip, ip, #80, 20	; 0x50000
    15f0:	ldr	pc, [ip, #2716]!	; 0xa9c

000015f4 <Mat_VarFree@plt>:
    15f4:	add	ip, pc, #0, 12
    15f8:	add	ip, ip, #80, 20	; 0x50000
    15fc:	ldr	pc, [ip, #2708]!	; 0xa94

00001600 <Mat_SizeOf@plt>:
    1600:	add	ip, pc, #0, 12
    1604:	add	ip, ip, #80, 20	; 0x50000
    1608:	ldr	pc, [ip, #2700]!	; 0xa8c

0000160c <Mat_GetDir@plt>:
    160c:	add	ip, pc, #0, 12
    1610:	add	ip, ip, #80, 20	; 0x50000
    1614:	ldr	pc, [ip, #2692]!	; 0xa84

00001618 <inflateEnd@plt>:
    1618:	add	ip, pc, #0, 12
    161c:	add	ip, ip, #80, 20	; 0x50000
    1620:	ldr	pc, [ip, #2684]!	; 0xa7c

00001624 <inflateCopy@plt>:
    1624:	add	ip, pc, #0, 12
    1628:	add	ip, ip, #80, 20	; 0x50000
    162c:	ldr	pc, [ip, #2676]!	; 0xa74

00001630 <strlen@plt>:
    1630:	add	ip, pc, #0, 12
    1634:	add	ip, ip, #80, 20	; 0x50000
    1638:	ldr	pc, [ip, #2668]!	; 0xa6c

0000163c <fprintf@plt>:
    163c:	add	ip, pc, #0, 12
    1640:	add	ip, ip, #80, 20	; 0x50000
    1644:	ldr	pc, [ip, #2660]!	; 0xa64

00001648 <Mat_VarPrint@plt>:
    1648:	add	ip, pc, #0, 12
    164c:	add	ip, ip, #80, 20	; 0x50000
    1650:	ldr	pc, [ip, #2652]!	; 0xa5c

00001654 <snprintf@plt>:
    1654:	add	ip, pc, #0, 12
    1658:	add	ip, ip, #80, 20	; 0x50000
    165c:	ldr	pc, [ip, #2644]!	; 0xa54

00001660 <Mat_Rewind@plt>:
    1660:	add	ip, pc, #0, 12
    1664:	add	ip, ip, #80, 20	; 0x50000
    1668:	ldr	pc, [ip, #2636]!	; 0xa4c

0000166c <memset@plt>:
    166c:	add	ip, pc, #0, 12
    1670:	add	ip, ip, #80, 20	; 0x50000
    1674:	ldr	pc, [ip, #2628]!	; 0xa44

00001678 <putchar@plt>:
    1678:	add	ip, pc, #0, 12
    167c:	add	ip, ip, #80, 20	; 0x50000
    1680:	ldr	pc, [ip, #2620]!	; 0xa3c

00001684 <Mat_Close@plt>:
    1684:	add	ip, pc, #0, 12
    1688:	add	ip, ip, #80, 20	; 0x50000
    168c:	ldr	pc, [ip, #2612]!	; 0xa34

00001690 <Mat_Critical@plt>:
    1690:	add	ip, pc, #0, 12
    1694:	add	ip, ip, #80, 20	; 0x50000
    1698:	ldr	pc, [ip, #2604]!	; 0xa2c

0000169c <deflateEnd@plt>:
    169c:	add	ip, pc, #0, 12
    16a0:	add	ip, ip, #80, 20	; 0x50000
    16a4:	ldr	pc, [ip, #2596]!	; 0xa24

000016a8 <fclose@plt>:
    16a8:	add	ip, pc, #0, 12
    16ac:	add	ip, ip, #80, 20	; 0x50000
    16b0:	ldr	pc, [ip, #2588]!	; 0xa1c

000016b4 <inflateInit_@plt>:
    16b4:	add	ip, pc, #0, 12
    16b8:	add	ip, ip, #80, 20	; 0x50000
    16bc:	ldr	pc, [ip, #2580]!	; 0xa14

000016c0 <Mat_CreateVer@plt>:
    16c0:	add	ip, pc, #0, 12
    16c4:	add	ip, ip, #80, 20	; 0x50000
    16c8:	ldr	pc, [ip, #2572]!	; 0xa0c

000016cc <remove@plt>:
    16cc:	add	ip, pc, #0, 12
    16d0:	add	ip, ip, #80, 20	; 0x50000
    16d4:	ldr	pc, [ip, #2564]!	; 0xa04

000016d8 <vsnprintf@plt>:
    16d8:	add	ip, pc, #0, 12
    16dc:	add	ip, ip, #80, 20	; 0x50000
    16e0:	ldr	pc, [ip, #2556]!	; 0x9fc

000016e4 <Mat_VarGetStructFieldByName@plt>:
    16e4:	add	ip, pc, #0, 12
    16e8:	add	ip, ip, #80, 20	; 0x50000
    16ec:	ldr	pc, [ip, #2548]!	; 0x9f4

000016f0 <Mat_SizeOfClass@plt>:
    16f0:	add	ip, pc, #0, 12
    16f4:	add	ip, ip, #80, 20	; 0x50000
    16f8:	ldr	pc, [ip, #2540]!	; 0x9ec

000016fc <Mat_VarGetStructFieldByIndex@plt>:
    16fc:	add	ip, pc, #0, 12
    1700:	add	ip, ip, #80, 20	; 0x50000
    1704:	ldr	pc, [ip, #2532]!	; 0x9e4

00001708 <Mat_VarGetSize@plt>:
    1708:	add	ip, pc, #0, 12
    170c:	add	ip, ip, #80, 20	; 0x50000
    1710:	ldr	pc, [ip, #2524]!	; 0x9dc

00001714 <fseek@plt>:
    1714:	add	ip, pc, #0, 12
    1718:	add	ip, ip, #80, 20	; 0x50000
    171c:	ldr	pc, [ip, #2516]!	; 0x9d4

00001720 <abort@plt>:
    1720:	add	ip, pc, #0, 12
    1724:	add	ip, ip, #80, 20	; 0x50000
    1728:	ldr	pc, [ip, #2508]!	; 0x9cc

0000172c <Mat_VarDuplicate@plt>:
    172c:	add	ip, pc, #0, 12
    1730:	add	ip, ip, #80, 20	; 0x50000
    1734:	ldr	pc, [ip, #2500]!	; 0x9c4

00001738 <Mat_VarReadNextInfo@plt>:
    1738:	add	ip, pc, #0, 12
    173c:	add	ip, ip, #80, 20	; 0x50000
    1740:	ldr	pc, [ip, #2492]!	; 0x9bc

Disassembly of section .text:

00001748 <call_weak_fn>:
    1748:	ldr	r3, [pc, #20]	; 1764 <call_weak_fn+0x1c>
    174c:	ldr	r2, [pc, #20]	; 1768 <call_weak_fn+0x20>
    1750:	add	r3, pc, r3
    1754:	ldr	r2, [r3, r2]
    1758:	cmp	r2, #0
    175c:	bxeq	lr
    1760:	b	15d0 <__gmon_start__@plt>
    1764:	.word	0x000508a8
    1768:	.word	0x0000010c

0000176c <deregister_tm_clones>:
    176c:	ldr	r3, [pc, #52]	; 17a8 <deregister_tm_clones+0x3c>
    1770:	ldr	r0, [pc, #52]	; 17ac <deregister_tm_clones+0x40>
    1774:	add	r3, pc, r3
    1778:	add	r0, pc, r0
    177c:	add	r3, r3, #3
    1780:	sub	r3, r3, r0
    1784:	cmp	r3, #6
    1788:	ldr	r3, [pc, #32]	; 17b0 <deregister_tm_clones+0x44>
    178c:	add	r3, pc, r3
    1790:	bxls	lr
    1794:	ldr	r2, [pc, #24]	; 17b4 <deregister_tm_clones+0x48>
    1798:	ldr	r3, [r3, r2]
    179c:	cmp	r3, #0
    17a0:	bxeq	lr
    17a4:	bx	r3
    17a8:	.word	0x00050a50
    17ac:	.word	0x00050a4c
    17b0:	.word	0x0005086c
    17b4:	.word	0x00000104

000017b8 <register_tm_clones>:
    17b8:	ldr	r1, [pc, #56]	; 17f8 <register_tm_clones+0x40>
    17bc:	ldr	r0, [pc, #56]	; 17fc <register_tm_clones+0x44>
    17c0:	add	r1, pc, r1
    17c4:	add	r0, pc, r0
    17c8:	sub	r1, r1, r0
    17cc:	ldr	r3, [pc, #44]	; 1800 <register_tm_clones+0x48>
    17d0:	asr	r1, r1, #2
    17d4:	add	r3, pc, r3
    17d8:	add	r1, r1, r1, lsr #31
    17dc:	asrs	r1, r1, #1
    17e0:	bxeq	lr
    17e4:	ldr	r2, [pc, #24]	; 1804 <register_tm_clones+0x4c>
    17e8:	ldr	r3, [r3, r2]
    17ec:	cmp	r3, #0
    17f0:	bxeq	lr
    17f4:	bx	r3
    17f8:	.word	0x00050a04
    17fc:	.word	0x00050a00
    1800:	.word	0x00050824
    1804:	.word	0x00000118

00001808 <__do_global_dtors_aux>:
    1808:	ldr	r3, [pc, #76]	; 185c <__do_global_dtors_aux+0x54>
    180c:	ldr	r2, [pc, #76]	; 1860 <__do_global_dtors_aux+0x58>
    1810:	add	r3, pc, r3
    1814:	add	r2, pc, r2
    1818:	ldrb	r3, [r3]
    181c:	cmp	r3, #0
    1820:	bxne	lr
    1824:	ldr	r3, [pc, #56]	; 1864 <__do_global_dtors_aux+0x5c>
    1828:	push	{r4, lr}
    182c:	ldr	r3, [r2, r3]
    1830:	cmp	r3, #0
    1834:	beq	1844 <__do_global_dtors_aux+0x3c>
    1838:	ldr	r3, [pc, #40]	; 1868 <__do_global_dtors_aux+0x60>
    183c:	ldr	r0, [pc, r3]
    1840:	bl	1498 <__cxa_finalize@plt>
    1844:	bl	176c <deregister_tm_clones>
    1848:	ldr	r3, [pc, #28]	; 186c <__do_global_dtors_aux+0x64>
    184c:	mov	r2, #1
    1850:	add	r3, pc, r3
    1854:	strb	r2, [r3]
    1858:	pop	{r4, pc}
    185c:	.word	0x000509b4
    1860:	.word	0x000507e4
    1864:	.word	0x00000100
    1868:	.word	0x000508d8
    186c:	.word	0x00050974

00001870 <frame_dummy>:
    1870:	ldr	r0, [pc, #56]	; 18b0 <frame_dummy+0x40>
    1874:	ldr	r3, [pc, #56]	; 18b4 <frame_dummy+0x44>
    1878:	add	r0, pc, r0
    187c:	ldr	r2, [r0]
    1880:	add	r3, pc, r3
    1884:	cmp	r2, #0
    1888:	bne	1890 <frame_dummy+0x20>
    188c:	b	17b8 <register_tm_clones>
    1890:	ldr	r2, [pc, #32]	; 18b8 <frame_dummy+0x48>
    1894:	ldr	r3, [r3, r2]
    1898:	cmp	r3, #0
    189c:	beq	188c <frame_dummy+0x1c>
    18a0:	push	{r4, lr}
    18a4:	blx	r3
    18a8:	pop	{r4, lr}
    18ac:	b	17b8 <register_tm_clones>
    18b0:	.word	0x00050684
    18b4:	.word	0x00050778
    18b8:	.word	0x00000114

000018bc <Mat_int64Swap>:
    18bc:	push	{lr}		; (str lr, [sp, #-4]!)
    18c0:	ldm	r0, {ip, lr}
    18c4:	asr	r3, lr, #24
    18c8:	eor	r2, r3, ip
    18cc:	bic	lr, lr, #-16777216	; 0xff000000
    18d0:	sxtb	r2, r2
    18d4:	eor	r3, r3, r2
    18d8:	bic	ip, ip, #255	; 0xff
    18dc:	orr	lr, lr, r3, lsl #24
    18e0:	eor	r3, r3, r2
    18e4:	lsl	r2, lr, #8
    18e8:	uxtb	r3, r3
    18ec:	orr	r3, r3, ip
    18f0:	asr	r2, r2, #24
    18f4:	sxth	ip, r3
    18f8:	bic	lr, lr, #16711680	; 0xff0000
    18fc:	eor	ip, r2, ip, asr #8
    1900:	eor	r2, r2, ip
    1904:	eor	ip, ip, r2
    1908:	uxtb	r1, r2
    190c:	uxtb	ip, ip
    1910:	orr	lr, lr, r1, lsl #16
    1914:	bic	r3, r3, #65280	; 0xff00
    1918:	orr	ip, r3, ip, lsl #8
    191c:	sxth	r3, lr
    1920:	lsl	r2, ip, #8
    1924:	asr	r3, r3, #8
    1928:	eor	r2, r3, r2, asr #24
    192c:	eor	r3, r3, r2
    1930:	eor	r2, r2, r3
    1934:	uxtb	r1, r3
    1938:	bic	lr, lr, #65280	; 0xff00
    193c:	uxtb	r3, r2
    1940:	orr	lr, lr, r1, lsl #8
    1944:	bic	r2, ip, #16711680	; 0xff0000
    1948:	orr	r2, r2, r3, lsl #16
    194c:	sxtb	r3, lr
    1950:	eor	ip, r3, r2, asr #24
    1954:	eor	r3, r3, ip
    1958:	eor	ip, ip, r3
    195c:	uxtb	r1, r3
    1960:	bic	lr, lr, #255	; 0xff
    1964:	bic	r3, r2, #-16777216	; 0xff000000
    1968:	orr	r3, r3, ip, lsl #24
    196c:	orr	r1, r1, lr
    1970:	str	r3, [r0]
    1974:	str	r1, [r0, #4]
    1978:	mov	r0, r3
    197c:	pop	{pc}		; (ldr pc, [sp], #4)

00001980 <Mat_uint64Swap>:
    1980:	ldm	r0, {r1, ip}
    1984:	push	{lr}		; (str lr, [sp, #-4]!)
    1988:	bic	r3, r1, #255	; 0xff
    198c:	bic	lr, ip, #-16777216	; 0xff000000
    1990:	orr	r3, r3, ip, lsr #24
    1994:	orr	r1, lr, r1, lsl #24
    1998:	lsr	lr, lr, #16
    199c:	eor	ip, lr, r3, lsr #8
    19a0:	bic	r1, r1, #16711680	; 0xff0000
    19a4:	uxtb	ip, ip
    19a8:	eor	lr, lr, ip
    19ac:	bic	r3, r3, #65280	; 0xff00
    19b0:	uxtb	r2, lr
    19b4:	eor	ip, ip, r2
    19b8:	orr	r1, r1, r2, lsl #16
    19bc:	orr	ip, r3, ip, lsl #8
    19c0:	lsr	r3, r1, #8
    19c4:	bic	r1, r1, #65280	; 0xff00
    19c8:	uxtb	r3, r3
    19cc:	eor	r2, r3, ip, lsr #16
    19d0:	uxtb	r2, r2
    19d4:	eor	r3, r3, r2
    19d8:	orr	r1, r1, r3, lsl #8
    19dc:	eor	r3, r3, r2
    19e0:	bic	r2, ip, #16711680	; 0xff0000
    19e4:	orr	r2, r2, r3, lsl #16
    19e8:	uxtb	r3, r1
    19ec:	eor	ip, r3, r2, lsr #24
    19f0:	eor	r3, r3, ip
    19f4:	eor	ip, ip, r3
    19f8:	bic	r1, r1, #255	; 0xff
    19fc:	orr	r1, r3, r1
    1a00:	bic	r3, r2, #-16777216	; 0xff000000
    1a04:	orr	r3, r3, ip, lsl #24
    1a08:	str	r3, [r0]
    1a0c:	str	r1, [r0, #4]
    1a10:	mov	r0, r3
    1a14:	pop	{pc}		; (ldr pc, [sp], #4)

00001a18 <Mat_int32Swap>:
    1a18:	ldr	r3, [r0]
    1a1c:	asr	r1, r3, #24
    1a20:	eor	r2, r1, r3
    1a24:	bic	r3, r3, #-16777216	; 0xff000000
    1a28:	sxtb	r2, r2
    1a2c:	eor	r1, r1, r2
    1a30:	eor	r2, r2, r1
    1a34:	orr	r3, r3, r1, lsl #24
    1a38:	uxtb	r2, r2
    1a3c:	bic	r3, r3, #255	; 0xff
    1a40:	orr	r3, r2, r3
    1a44:	lsl	r1, r3, #8
    1a48:	sxth	r2, r3
    1a4c:	asr	r1, r1, #24
    1a50:	eor	r2, r1, r2, asr #8
    1a54:	eor	r1, r1, r2
    1a58:	eor	r2, r2, r1
    1a5c:	uxtb	ip, r1
    1a60:	bic	r3, r3, #16711680	; 0xff0000
    1a64:	orr	r3, r3, ip, lsl #16
    1a68:	uxtb	r2, r2
    1a6c:	bic	r3, r3, #65280	; 0xff00
    1a70:	orr	r3, r3, r2, lsl #8
    1a74:	str	r3, [r0]
    1a78:	mov	r0, r3
    1a7c:	bx	lr

00001a80 <Mat_uint32Swap>:
    1a80:	ldr	r3, [r0]
    1a84:	lsr	r1, r3, #24
    1a88:	eor	r2, r1, r3
    1a8c:	bic	r3, r3, #-16777216	; 0xff000000
    1a90:	uxtb	r2, r2
    1a94:	eor	r1, r1, r2
    1a98:	eor	r2, r2, r1
    1a9c:	orr	r3, r3, r1, lsl #24
    1aa0:	bic	r3, r3, #255	; 0xff
    1aa4:	orr	r3, r2, r3
    1aa8:	lsr	r2, r3, #16
    1aac:	uxtb	r2, r2
    1ab0:	eor	r1, r2, r3, lsr #8
    1ab4:	bic	r3, r3, #16711680	; 0xff0000
    1ab8:	uxtb	r1, r1
    1abc:	eor	r2, r2, r1
    1ac0:	orr	r3, r3, r2, lsl #16
    1ac4:	eor	r2, r2, r1
    1ac8:	bic	r3, r3, #65280	; 0xff00
    1acc:	orr	r3, r3, r2, lsl #8
    1ad0:	str	r3, [r0]
    1ad4:	mov	r0, r3
    1ad8:	bx	lr

00001adc <Mat_int16Swap>:
    1adc:	ldrsb	r3, [r0, #1]
    1ae0:	ldrh	r2, [r0]
    1ae4:	eor	r2, r2, r3
    1ae8:	sxtb	r2, r2
    1aec:	eor	r3, r3, r2
    1af0:	uxtb	r1, r3
    1af4:	eor	r3, r3, r2
    1af8:	uxtb	r3, r3
    1afc:	orr	r3, r3, r1, lsl #8
    1b00:	sxth	r3, r3
    1b04:	strh	r3, [r0]
    1b08:	mov	r0, r3
    1b0c:	bx	lr

00001b10 <Mat_uint16Swap>:
    1b10:	ldrh	r2, [r0]
    1b14:	lsr	r3, r2, #8
    1b18:	uxtb	r2, r2
    1b1c:	orr	r3, r3, r2, lsl #8
    1b20:	strh	r3, [r0]
    1b24:	mov	r0, r3
    1b28:	bx	lr

00001b2c <Mat_floatSwap>:
    1b2c:	ldr	r3, [r0]
    1b30:	lsr	r1, r3, #24
    1b34:	eor	r2, r1, r3
    1b38:	bic	r3, r3, #-16777216	; 0xff000000
    1b3c:	uxtb	r2, r2
    1b40:	eor	r1, r1, r2
    1b44:	eor	r2, r2, r1
    1b48:	orr	r3, r3, r1, lsl #24
    1b4c:	bic	r3, r3, #255	; 0xff
    1b50:	orr	r3, r2, r3
    1b54:	lsr	r2, r3, #16
    1b58:	uxtb	r2, r2
    1b5c:	eor	r1, r2, r3, lsr #8
    1b60:	bic	r3, r3, #16711680	; 0xff0000
    1b64:	uxtb	r1, r1
    1b68:	eor	r2, r2, r1
    1b6c:	orr	r3, r3, r2, lsl #16
    1b70:	eor	r2, r2, r1
    1b74:	bic	r3, r3, #65280	; 0xff00
    1b78:	orr	r3, r3, r2, lsl #8
    1b7c:	str	r3, [r0]
    1b80:	vmov	s0, r3
    1b84:	bx	lr

00001b88 <Mat_doubleSwap>:
    1b88:	ldrd	r2, [r0]
    1b8c:	push	{lr}		; (str lr, [sp, #-4]!)
    1b90:	lsr	ip, r3, #24
    1b94:	eor	r1, ip, r2
    1b98:	bic	lr, r3, #-16777216	; 0xff000000
    1b9c:	uxtb	r1, r1
    1ba0:	eor	ip, ip, r1
    1ba4:	eor	r1, r1, ip
    1ba8:	orr	r3, lr, ip, lsl #24
    1bac:	bic	ip, r2, #255	; 0xff
    1bb0:	orr	r2, r1, ip
    1bb4:	lsr	r1, r3, #16
    1bb8:	bic	lr, r3, #16711680	; 0xff0000
    1bbc:	uxtb	r1, r1
    1bc0:	eor	ip, r1, r2, lsr #8
    1bc4:	uxtb	ip, ip
    1bc8:	eor	r1, r1, ip
    1bcc:	orr	r3, lr, r1, lsl #16
    1bd0:	eor	r1, r1, ip
    1bd4:	bic	ip, r2, #65280	; 0xff00
    1bd8:	orr	r2, ip, r1, lsl #8
    1bdc:	lsr	r1, r3, #8
    1be0:	bic	lr, r3, #65280	; 0xff00
    1be4:	uxtb	r1, r1
    1be8:	eor	ip, r1, r2, lsr #16
    1bec:	uxtb	ip, ip
    1bf0:	eor	r1, r1, ip
    1bf4:	orr	r3, lr, r1, lsl #8
    1bf8:	eor	r1, r1, ip
    1bfc:	bic	ip, r2, #16711680	; 0xff0000
    1c00:	orr	r2, ip, r1, lsl #16
    1c04:	uxtb	r1, r3
    1c08:	eor	ip, r1, r2, lsr #24
    1c0c:	eor	r1, r1, ip
    1c10:	bic	lr, r3, #255	; 0xff
    1c14:	orr	r3, r1, lr
    1c18:	eor	r1, r1, ip
    1c1c:	bic	ip, r2, #-16777216	; 0xff000000
    1c20:	orr	r2, ip, r1, lsl #24
    1c24:	vmov	d0, r2, r3
    1c28:	vstr	d0, [r0]
    1c2c:	pop	{pc}		; (ldr pc, [sp], #4)

00001c30 <mat_logfunc>:
    1c30:	ldr	r2, [pc, #344]	; 1d90 <mat_logfunc+0x160>
    1c34:	ldr	ip, [pc, #344]	; 1d94 <mat_logfunc+0x164>
    1c38:	add	r2, pc, r2
    1c3c:	mov	r3, r1
    1c40:	ldr	r2, [r2]
    1c44:	add	ip, pc, ip
    1c48:	cmp	r2, #0
    1c4c:	push	{r4, lr}
    1c50:	and	r1, r0, #2
    1c54:	beq	1d08 <mat_logfunc+0xd8>
    1c58:	cmp	r1, #0
    1c5c:	beq	1c84 <mat_logfunc+0x54>
    1c60:	ldr	r1, [pc, #304]	; 1d98 <mat_logfunc+0x168>
    1c64:	ldr	r4, [ip, r1]
    1c68:	ldr	r1, [pc, #300]	; 1d9c <mat_logfunc+0x16c>
    1c6c:	add	r1, pc, r1
    1c70:	ldr	r0, [r4]
    1c74:	bl	163c <fprintf@plt>
    1c78:	ldr	r0, [r4]
    1c7c:	pop	{r4, lr}
    1c80:	b	14d4 <fflush@plt>
    1c84:	tst	r0, #1
    1c88:	beq	1cb0 <mat_logfunc+0x80>
    1c8c:	ldr	r1, [pc, #260]	; 1d98 <mat_logfunc+0x168>
    1c90:	ldr	r4, [ip, r1]
    1c94:	ldr	r1, [pc, #260]	; 1da0 <mat_logfunc+0x170>
    1c98:	ldr	r0, [r4]
    1c9c:	add	r1, pc, r1
    1ca0:	bl	163c <fprintf@plt>
    1ca4:	ldr	r0, [r4]
    1ca8:	bl	14d4 <fflush@plt>
    1cac:	bl	1720 <abort@plt>
    1cb0:	tst	r0, #4
    1cb4:	ldrne	r1, [pc, #220]	; 1d98 <mat_logfunc+0x168>
    1cb8:	ldrne	r4, [ip, r1]
    1cbc:	ldrne	r1, [pc, #224]	; 1da4 <mat_logfunc+0x174>
    1cc0:	addne	r1, pc, r1
    1cc4:	bne	1c70 <mat_logfunc+0x40>
    1cc8:	tst	r0, #16
    1ccc:	ldrne	r1, [pc, #196]	; 1d98 <mat_logfunc+0x168>
    1cd0:	ldrne	r4, [ip, r1]
    1cd4:	ldrne	r1, [pc, #204]	; 1da8 <mat_logfunc+0x178>
    1cd8:	addne	r1, pc, r1
    1cdc:	bne	1c70 <mat_logfunc+0x40>
    1ce0:	tst	r0, #8
    1ce4:	popeq	{r4, pc}
    1ce8:	ldr	r2, [pc, #188]	; 1dac <mat_logfunc+0x17c>
    1cec:	ldr	r1, [pc, #188]	; 1db0 <mat_logfunc+0x180>
    1cf0:	ldr	r4, [ip, r2]
    1cf4:	add	r1, pc, r1
    1cf8:	mov	r2, r3
    1cfc:	ldr	r0, [r4]
    1d00:	bl	163c <fprintf@plt>
    1d04:	b	1c78 <mat_logfunc+0x48>
    1d08:	cmp	r1, #0
    1d0c:	beq	1d28 <mat_logfunc+0xf8>
    1d10:	ldr	r2, [pc, #128]	; 1d98 <mat_logfunc+0x168>
    1d14:	ldr	r1, [pc, #152]	; 1db4 <mat_logfunc+0x184>
    1d18:	ldr	r4, [ip, r2]
    1d1c:	add	r1, pc, r1
    1d20:	mov	r2, r3
    1d24:	b	1cfc <mat_logfunc+0xcc>
    1d28:	tst	r0, #1
    1d2c:	beq	1d50 <mat_logfunc+0x120>
    1d30:	ldr	r2, [pc, #96]	; 1d98 <mat_logfunc+0x168>
    1d34:	ldr	r1, [pc, #124]	; 1db8 <mat_logfunc+0x188>
    1d38:	ldr	r4, [ip, r2]
    1d3c:	add	r1, pc, r1
    1d40:	mov	r2, r3
    1d44:	ldr	r0, [r4]
    1d48:	bl	163c <fprintf@plt>
    1d4c:	b	1ca4 <mat_logfunc+0x74>
    1d50:	tst	r0, #4
    1d54:	beq	1d70 <mat_logfunc+0x140>
    1d58:	ldr	r2, [pc, #56]	; 1d98 <mat_logfunc+0x168>
    1d5c:	ldr	r1, [pc, #88]	; 1dbc <mat_logfunc+0x18c>
    1d60:	ldr	r4, [ip, r2]
    1d64:	add	r1, pc, r1
    1d68:	mov	r2, r3
    1d6c:	b	1cfc <mat_logfunc+0xcc>
    1d70:	tst	r0, #16
    1d74:	beq	1ce0 <mat_logfunc+0xb0>
    1d78:	ldr	r2, [pc, #24]	; 1d98 <mat_logfunc+0x168>
    1d7c:	ldr	r1, [pc, #60]	; 1dc0 <mat_logfunc+0x190>
    1d80:	ldr	r4, [ip, r2]
    1d84:	add	r1, pc, r1
    1d88:	mov	r2, r3
    1d8c:	b	1cfc <mat_logfunc+0xcc>
    1d90:	.word	0x00050590
    1d94:	.word	0x000503b4
    1d98:	.word	0x00000108
    1d9c:	.word	0x0003e7de
    1da0:	.word	0x0003e7ae
    1da4:	.word	0x0003e796
    1da8:	.word	0x0003e78a
    1dac:	.word	0x00000110
    1db0:	.word	0x0003e794
    1db4:	.word	0x0003e752
    1db8:	.word	0x0003e732
    1dbc:	.word	0x0003e714
    1dc0:	.word	0x0003e6fe

00001dc4 <strdup_vprintf>:
    1dc4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dc8:	mov	r3, r1
    1dcc:	str	r1, [sp, #4]
    1dd0:	mov	r4, r1
    1dd4:	mov	r1, #0
    1dd8:	mov	r2, r0
    1ddc:	mov	r5, r0
    1de0:	mov	r0, r1
    1de4:	bl	16d8 <vsnprintf@plt>
    1de8:	add	r7, r0, #1
    1dec:	add	r0, r0, #2
    1df0:	bl	15ac <malloc@plt>
    1df4:	subs	r6, r0, #0
    1df8:	beq	1e0c <strdup_vprintf+0x48>
    1dfc:	mov	r3, r4
    1e00:	mov	r2, r5
    1e04:	mov	r1, r7
    1e08:	bl	16d8 <vsnprintf@plt>
    1e0c:	mov	r0, r6
    1e10:	add	sp, sp, #12
    1e14:	pop	{r4, r5, r6, r7, pc}

00001e18 <mat_log>:
    1e18:	push	{r4, r5, r6, lr}
    1e1c:	ldr	r6, [pc, #60]	; 1e60 <mat_log+0x48>
    1e20:	add	r6, pc, r6
    1e24:	ldr	r3, [r6, #4]
    1e28:	cmp	r3, #0
    1e2c:	popeq	{r4, r5, r6, pc}
    1e30:	mov	r4, r0
    1e34:	mov	r0, r1
    1e38:	mov	r1, r2
    1e3c:	bl	1dc4 <strdup_vprintf>
    1e40:	ldr	r3, [r6, #4]
    1e44:	mov	r5, r0
    1e48:	mov	r1, r0
    1e4c:	mov	r0, r4
    1e50:	blx	r3
    1e54:	mov	r0, r5
    1e58:	pop	{r4, r5, r6, lr}
    1e5c:	b	14e0 <free@plt>
    1e60:	.word	0x000503a8

00001e64 <strdup_printf>:
    1e64:	push	{r0, r1, r2, r3}
    1e68:	push	{r0, r1, r2, lr}
    1e6c:	add	r1, sp, #20
    1e70:	ldr	r0, [sp, #16]
    1e74:	str	r1, [sp, #4]
    1e78:	bl	1dc4 <strdup_vprintf>
    1e7c:	add	sp, sp, #12
    1e80:	pop	{lr}		; (ldr lr, [sp], #4)
    1e84:	add	sp, sp, #16
    1e88:	bx	lr

00001e8c <Mat_SetVerbose>:
    1e8c:	ldr	r3, [pc, #16]	; 1ea4 <Mat_SetVerbose+0x18>
    1e90:	add	r3, pc, r3
    1e94:	str	r0, [r3, #8]
    1e98:	str	r1, [r3, #12]
    1e9c:	mov	r0, #0
    1ea0:	bx	lr
    1ea4:	.word	0x00050338

00001ea8 <Mat_SetDebug>:
    1ea8:	ldr	r3, [pc, #12]	; 1ebc <Mat_SetDebug+0x14>
    1eac:	add	r3, pc, r3
    1eb0:	str	r0, [r3, #16]
    1eb4:	mov	r0, #0
    1eb8:	bx	lr
    1ebc:	.word	0x0005031c

00001ec0 <Mat_Message>:
    1ec0:	push	{r0, r1, r2, r3}
    1ec4:	ldr	r3, [pc, #68]	; 1f10 <Mat_Message+0x50>
    1ec8:	push	{r0, r1, r2, lr}
    1ecc:	add	r3, pc, r3
    1ed0:	ldr	r2, [r3, #12]
    1ed4:	cmp	r2, #0
    1ed8:	bne	1efc <Mat_Message+0x3c>
    1edc:	ldr	r3, [r3, #4]
    1ee0:	cmp	r3, #0
    1ee4:	beq	1efc <Mat_Message+0x3c>
    1ee8:	add	r2, sp, #20
    1eec:	ldr	r1, [sp, #16]
    1ef0:	mov	r0, #8
    1ef4:	str	r2, [sp, #4]
    1ef8:	bl	1e18 <mat_log>
    1efc:	mov	r0, #0
    1f00:	add	sp, sp, #12
    1f04:	pop	{lr}		; (ldr lr, [sp], #4)
    1f08:	add	sp, sp, #16
    1f0c:	bx	lr
    1f10:	.word	0x000502fc

00001f14 <Mat_DebugMessage>:
    1f14:	push	{r1, r2, r3}
    1f18:	ldr	r3, [pc, #68]	; 1f64 <Mat_DebugMessage+0x50>
    1f1c:	push	{r0, r1, lr}
    1f20:	add	r3, pc, r3
    1f24:	ldr	r2, [r3, #12]
    1f28:	cmp	r2, #0
    1f2c:	bne	1f50 <Mat_DebugMessage+0x3c>
    1f30:	ldr	r3, [r3, #16]
    1f34:	cmp	r3, r0
    1f38:	blt	1f50 <Mat_DebugMessage+0x3c>
    1f3c:	add	r2, sp, #16
    1f40:	ldr	r1, [sp, #12]
    1f44:	mov	r0, #16
    1f48:	str	r2, [sp, #4]
    1f4c:	bl	1e18 <mat_log>
    1f50:	mov	r0, #0
    1f54:	add	sp, sp, #8
    1f58:	pop	{lr}		; (ldr lr, [sp], #4)
    1f5c:	add	sp, sp, #12
    1f60:	bx	lr
    1f64:	.word	0x000502a8

00001f68 <Mat_VerbMessage>:
    1f68:	push	{r1, r2, r3}
    1f6c:	ldr	r3, [pc, #68]	; 1fb8 <Mat_VerbMessage+0x50>
    1f70:	push	{r0, r1, lr}
    1f74:	add	r3, pc, r3
    1f78:	ldr	r2, [r3, #12]
    1f7c:	cmp	r2, #0
    1f80:	bne	1fa4 <Mat_VerbMessage+0x3c>
    1f84:	ldr	r3, [r3, #8]
    1f88:	cmp	r3, r0
    1f8c:	blt	1fa4 <Mat_VerbMessage+0x3c>
    1f90:	add	r2, sp, #16
    1f94:	ldr	r1, [sp, #12]
    1f98:	mov	r0, #8
    1f9c:	str	r2, [sp, #4]
    1fa0:	bl	1e18 <mat_log>
    1fa4:	mov	r0, #0
    1fa8:	add	sp, sp, #8
    1fac:	pop	{lr}		; (ldr lr, [sp], #4)
    1fb0:	add	sp, sp, #12
    1fb4:	bx	lr
    1fb8:	.word	0x00050254

00001fbc <Mat_Critical>:
    1fbc:	push	{r0, r1, r2, r3}
    1fc0:	push	{r0, r1, r2, lr}
    1fc4:	mov	r0, #2
    1fc8:	add	r2, sp, #20
    1fcc:	ldr	r1, [sp, #16]
    1fd0:	str	r2, [sp, #4]
    1fd4:	bl	1e18 <mat_log>
    1fd8:	add	sp, sp, #12
    1fdc:	pop	{lr}		; (ldr lr, [sp], #4)
    1fe0:	add	sp, sp, #16
    1fe4:	bx	lr

00001fe8 <Mat_Error>:
    1fe8:	push	{r0, r1, r2, r3}
    1fec:	push	{r0, r1, r2, lr}
    1ff0:	mov	r0, #1
    1ff4:	add	r2, sp, #20
    1ff8:	ldr	r1, [sp, #16]
    1ffc:	str	r2, [sp, #4]
    2000:	bl	1e18 <mat_log>
    2004:	bl	1720 <abort@plt>

00002008 <Mat_Help>:
    2008:	push	{r4, lr}
    200c:	sub	r4, r0, #4
    2010:	ldr	r0, [r4, #4]!
    2014:	cmp	r0, #0
    2018:	bne	2020 <Mat_Help+0x18>
    201c:	bl	15dc <exit@plt>
    2020:	bl	15a0 <puts@plt>
    2024:	b	2010 <Mat_Help+0x8>

00002028 <Mat_LogClose>:
    2028:	ldr	r3, [pc, #16]	; 2040 <Mat_LogClose+0x18>
    202c:	mov	r2, #0
    2030:	add	r3, pc, r3
    2034:	mov	r0, #1
    2038:	str	r2, [r3, #4]
    203c:	bx	lr
    2040:	.word	0x00050198

00002044 <Mat_LogInit>:
    2044:	ldr	r3, [pc, #28]	; 2068 <Mat_LogInit+0x24>
    2048:	ldr	r2, [pc, #28]	; 206c <Mat_LogInit+0x28>
    204c:	add	r3, pc, r3
    2050:	mov	r0, #0
    2054:	add	r2, pc, r2
    2058:	str	r2, [r3, #4]
    205c:	str	r0, [r3, #8]
    2060:	str	r0, [r3, #12]
    2064:	bx	lr
    2068:	.word	0x0005017c
    206c:	.word	0xfffffbd4

00002070 <Mat_LogInitFunc>:
    2070:	ldr	r3, [pc, #20]	; 208c <Mat_LogInitFunc+0x1c>
    2074:	add	r3, pc, r3
    2078:	stm	r3, {r0, r1}
    207c:	mov	r0, #0
    2080:	str	r0, [r3, #8]
    2084:	str	r0, [r3, #12]
    2088:	bx	lr
    208c:	.word	0x00050154

00002090 <Mat_Warning>:
    2090:	push	{r0, r1, r2, r3}
    2094:	push	{r0, r1, r2, lr}
    2098:	mov	r0, #4
    209c:	add	r2, sp, #20
    20a0:	ldr	r1, [sp, #16]
    20a4:	str	r2, [sp, #4]
    20a8:	bl	1e18 <mat_log>
    20ac:	add	sp, sp, #12
    20b0:	pop	{lr}		; (ldr lr, [sp], #4)
    20b4:	add	sp, sp, #16
    20b8:	bx	lr

000020bc <Mat_SizeOf>:
    20bc:	sub	r0, r0, #1
    20c0:	cmp	r0, #17
    20c4:	bhi	20d8 <Mat_SizeOf+0x1c>
    20c8:	ldr	r3, [pc, #16]	; 20e0 <Mat_SizeOf+0x24>
    20cc:	add	r3, pc, r3
    20d0:	ldrb	r0, [r3, r0]
    20d4:	bx	lr
    20d8:	mov	r0, #0
    20dc:	bx	lr
    20e0:	.word	0x0003e36c

000020e4 <InflateSkip>:
    20e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20e8:	subs	r8, r2, #0
    20ec:	sub	sp, sp, #1024	; 0x400
    20f0:	sub	sp, sp, #4
    20f4:	movle	r6, #0
    20f8:	ble	218c <InflateSkip+0xa8>
    20fc:	ldr	r3, [r1, #4]
    2100:	cmp	r8, #512	; 0x200
    2104:	movlt	r5, r8
    2108:	movge	r5, #512	; 0x200
    210c:	cmp	r3, #0
    2110:	mov	r4, r1
    2114:	mov	r9, r0
    2118:	movne	r6, #0
    211c:	bne	2144 <InflateSkip+0x60>
    2120:	mov	r0, sp
    2124:	str	sp, [r4]
    2128:	ldr	r3, [r9]
    212c:	mov	r2, r5
    2130:	mov	r1, #1
    2134:	bl	1588 <fread@plt>
    2138:	ldr	r6, [r4, #4]
    213c:	add	r6, r0, r6
    2140:	str	r6, [r4, #4]
    2144:	add	sl, sp, #512	; 0x200
    2148:	str	r5, [r4, #16]
    214c:	str	sl, [r4, #12]
    2150:	mov	r1, #3
    2154:	mov	r0, r4
    2158:	bl	14c8 <inflate@plt>
    215c:	cmp	r0, #1
    2160:	mov	r7, r0
    2164:	beq	218c <InflateSkip+0xa8>
    2168:	cmp	r0, #0
    216c:	beq	219c <InflateSkip+0xb8>
    2170:	cmp	r0, #2
    2174:	mvneq	r0, #2
    2178:	bl	1558 <zError@plt>
    217c:	mov	r1, r0
    2180:	ldr	r0, [pc, #268]	; 2294 <InflateSkip+0x1b0>
    2184:	add	r0, pc, r0
    2188:	bl	1690 <Mat_Critical@plt>
    218c:	mov	r0, r6
    2190:	add	sp, sp, #1024	; 0x400
    2194:	add	sp, sp, #4
    2198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    219c:	ldr	r3, [r4, #16]
    21a0:	cmp	r3, #0
    21a4:	bne	21c4 <InflateSkip+0xe0>
    21a8:	sub	r3, r8, r5
    21ac:	cmp	r3, #512	; 0x200
    21b0:	movge	r3, #512	; 0x200
    21b4:	mov	r7, r5
    21b8:	mov	r5, r3
    21bc:	str	r3, [r4, #16]
    21c0:	str	sl, [r4, #12]
    21c4:	mov	fp, sp
    21c8:	cmp	r7, r8
    21cc:	bge	223c <InflateSkip+0x158>
    21d0:	ldr	r3, [r4, #4]
    21d4:	cmp	r3, #0
    21d8:	bne	2204 <InflateSkip+0x120>
    21dc:	ldr	r3, [r9]
    21e0:	str	fp, [r4]
    21e4:	mov	r2, r5
    21e8:	mov	r1, #1
    21ec:	mov	r0, fp
    21f0:	bl	1588 <fread@plt>
    21f4:	ldr	r3, [r4, #4]
    21f8:	add	r0, r0, r3
    21fc:	add	r6, r6, r0
    2200:	str	r0, [r4, #4]
    2204:	mov	r1, #3
    2208:	mov	r0, r4
    220c:	bl	14c8 <inflate@plt>
    2210:	cmp	r0, #1
    2214:	beq	223c <InflateSkip+0x158>
    2218:	cmp	r0, #0
    221c:	beq	226c <InflateSkip+0x188>
    2220:	cmp	r0, #2
    2224:	mvneq	r0, #2
    2228:	bl	1558 <zError@plt>
    222c:	mov	r1, r0
    2230:	ldr	r0, [pc, #96]	; 2298 <InflateSkip+0x1b4>
    2234:	add	r0, pc, r0
    2238:	bl	1690 <Mat_Critical@plt>
    223c:	ldr	r1, [r4, #4]
    2240:	cmp	r1, #0
    2244:	beq	218c <InflateSkip+0xa8>
    2248:	mov	r2, #1
    224c:	rsb	r1, r1, #0
    2250:	ldr	r0, [r9]
    2254:	bl	1714 <fseek@plt>
    2258:	ldr	r3, [r4, #4]
    225c:	sub	r6, r6, r3
    2260:	mov	r3, #0
    2264:	str	r3, [r4, #4]
    2268:	b	218c <InflateSkip+0xa8>
    226c:	ldr	r3, [r4, #16]
    2270:	cmp	r3, #0
    2274:	bne	21c8 <InflateSkip+0xe4>
    2278:	add	r7, r7, r5
    227c:	sub	r5, r8, r7
    2280:	cmp	r5, #512	; 0x200
    2284:	movge	r5, #512	; 0x200
    2288:	str	r5, [r4, #16]
    228c:	str	sl, [r4, #12]
    2290:	b	21c8 <InflateSkip+0xe4>
    2294:	.word	0x0003e308
    2298:	.word	0x0003e258

0000229c <InflateSkip2>:
    229c:	ldr	r3, [r1, #52]	; 0x34
    22a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22a4:	mov	fp, r2
    22a8:	ldr	r3, [r3, #12]
    22ac:	sub	sp, sp, #68	; 0x44
    22b0:	mov	r7, r0
    22b4:	ldr	r2, [r3, #4]
    22b8:	mov	r4, r1
    22bc:	cmp	r2, #0
    22c0:	movne	r5, #0
    22c4:	bne	22e8 <InflateSkip2+0x4c>
    22c8:	mov	r2, #1
    22cc:	str	r2, [r3, #4]
    22d0:	str	sp, [r3]
    22d4:	mov	r0, sp
    22d8:	ldr	r3, [r7]
    22dc:	mov	r1, r2
    22e0:	bl	1588 <fread@plt>
    22e4:	mov	r5, r0
    22e8:	ldr	r3, [r4, #52]	; 0x34
    22ec:	mov	r9, #1
    22f0:	add	r8, sp, #32
    22f4:	ldr	r0, [r3, #12]
    22f8:	mov	r1, #0
    22fc:	str	r9, [r0, #16]
    2300:	str	r8, [r0, #12]
    2304:	bl	14c8 <inflate@plt>
    2308:	subs	r6, r0, #0
    230c:	beq	2344 <InflateSkip2+0xa8>
    2310:	cmp	r6, #2
    2314:	movne	r0, r6
    2318:	mvneq	r0, #2
    231c:	ldr	r4, [r4, #36]	; 0x24
    2320:	bl	1558 <zError@plt>
    2324:	mov	r1, r4
    2328:	mov	r2, r0
    232c:	ldr	r0, [pc, #256]	; 2434 <InflateSkip2+0x198>
    2330:	add	r0, pc, r0
    2334:	bl	1690 <Mat_Critical@plt>
    2338:	mov	r0, r5
    233c:	add	sp, sp, #68	; 0x44
    2340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2344:	ldr	r3, [r4, #52]	; 0x34
    2348:	mov	sl, sp
    234c:	ldr	r3, [r3, #12]
    2350:	ldr	r2, [r3, #16]
    2354:	cmp	r2, #0
    2358:	streq	r9, [r3, #16]
    235c:	mov	r9, #1
    2360:	streq	r8, [r3, #12]
    2364:	ldr	r3, [r4, #52]	; 0x34
    2368:	cmp	r6, fp
    236c:	ldr	r3, [r3, #12]
    2370:	blt	23ac <InflateSkip2+0x110>
    2374:	ldr	r1, [r3, #4]
    2378:	cmp	r1, #0
    237c:	beq	2338 <InflateSkip2+0x9c>
    2380:	mov	r2, #1
    2384:	rsb	r1, r1, #0
    2388:	ldr	r0, [r7]
    238c:	bl	1714 <fseek@plt>
    2390:	ldr	r3, [r4, #52]	; 0x34
    2394:	ldr	r3, [r3, #12]
    2398:	ldr	r2, [r3, #4]
    239c:	sub	r5, r5, r2
    23a0:	mov	r2, #0
    23a4:	str	r2, [r3, #4]
    23a8:	b	2338 <InflateSkip2+0x9c>
    23ac:	ldr	r2, [r3, #4]
    23b0:	cmp	r2, #0
    23b4:	bne	23dc <InflateSkip2+0x140>
    23b8:	mov	r2, #1
    23bc:	str	r9, [r3, #4]
    23c0:	str	sl, [r3]
    23c4:	mov	r1, r2
    23c8:	ldr	r3, [r7]
    23cc:	mov	r0, sl
    23d0:	bl	1588 <fread@plt>
    23d4:	add	r6, r6, #1
    23d8:	add	r5, r5, r0
    23dc:	ldr	r3, [r4, #52]	; 0x34
    23e0:	mov	r1, #0
    23e4:	ldr	r0, [r3, #12]
    23e8:	bl	14c8 <inflate@plt>
    23ec:	cmp	r0, #0
    23f0:	beq	2418 <InflateSkip2+0x17c>
    23f4:	cmp	r0, #2
    23f8:	mvneq	r0, #2
    23fc:	ldr	r4, [r4, #36]	; 0x24
    2400:	bl	1558 <zError@plt>
    2404:	mov	r1, r4
    2408:	mov	r2, r0
    240c:	ldr	r0, [pc, #36]	; 2438 <InflateSkip2+0x19c>
    2410:	add	r0, pc, r0
    2414:	b	2334 <InflateSkip2+0x98>
    2418:	ldr	r3, [r4, #52]	; 0x34
    241c:	ldr	r3, [r3, #12]
    2420:	ldr	r2, [r3, #16]
    2424:	cmp	r2, #0
    2428:	streq	r9, [r3, #16]
    242c:	streq	r8, [r3, #12]
    2430:	b	2364 <InflateSkip2+0xc8>
    2434:	.word	0x0003e17d
    2438:	.word	0x0003e09d

0000243c <InflateSkipData>:
    243c:	cmp	r1, #0
    2440:	cmpne	r3, #0
    2444:	movle	ip, #1
    2448:	movgt	ip, #0
    244c:	cmp	r0, #0
    2450:	orreq	ip, ip, #1
    2454:	cmp	ip, #0
    2458:	bne	24d4 <InflateSkipData+0x98>
    245c:	sub	r2, r2, #1
    2460:	cmp	r2, #12
    2464:	addls	pc, pc, r2, lsl #2
    2468:	b	24d4 <InflateSkipData+0x98>
    246c:	b	24c4 <InflateSkipData+0x88>
    2470:	b	24c4 <InflateSkipData+0x88>
    2474:	b	24bc <InflateSkipData+0x80>
    2478:	b	24bc <InflateSkipData+0x80>
    247c:	b	24a0 <InflateSkipData+0x64>
    2480:	b	24a0 <InflateSkipData+0x64>
    2484:	b	24a0 <InflateSkipData+0x64>
    2488:	b	24d4 <InflateSkipData+0x98>
    248c:	b	24cc <InflateSkipData+0x90>
    2490:	b	24d4 <InflateSkipData+0x98>
    2494:	b	24d4 <InflateSkipData+0x98>
    2498:	b	24cc <InflateSkipData+0x90>
    249c:	b	24cc <InflateSkipData+0x90>
    24a0:	mov	r2, #4
    24a4:	push	{r4, lr}
    24a8:	mul	r2, r3, r2
    24ac:	mov	r4, r3
    24b0:	bl	20e4 <InflateSkip>
    24b4:	mov	r0, r4
    24b8:	pop	{r4, pc}
    24bc:	mov	r2, #2
    24c0:	b	24a4 <InflateSkipData+0x68>
    24c4:	mov	r2, #1
    24c8:	b	24a4 <InflateSkipData+0x68>
    24cc:	mov	r2, #8
    24d0:	b	24a4 <InflateSkipData+0x68>
    24d4:	mov	r0, #0
    24d8:	bx	lr

000024dc <InflateVarTag>:
    24dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    24e0:	subs	r4, r2, #0
    24e4:	sub	sp, sp, #32
    24e8:	beq	2574 <InflateVarTag+0x98>
    24ec:	ldr	r3, [r1, #52]	; 0x34
    24f0:	mov	r7, r4
    24f4:	mov	r5, r1
    24f8:	ldr	r3, [r3, #12]
    24fc:	mov	r6, r0
    2500:	ldr	r2, [r3, #4]
    2504:	cmp	r2, #0
    2508:	movne	r4, #0
    250c:	bne	2530 <InflateVarTag+0x54>
    2510:	mov	r2, #1
    2514:	str	r2, [r3, #4]
    2518:	str	sp, [r3]
    251c:	mov	r0, sp
    2520:	ldr	r3, [r6]
    2524:	mov	r1, r2
    2528:	bl	1588 <fread@plt>
    252c:	mov	r4, r0
    2530:	ldr	r3, [r5, #52]	; 0x34
    2534:	mov	r1, #0
    2538:	ldr	r0, [r3, #12]
    253c:	mov	r3, #8
    2540:	str	r7, [r0, #12]
    2544:	str	r3, [r0, #16]
    2548:	bl	14c8 <inflate@plt>
    254c:	subs	r7, r0, #0
    2550:	beq	2580 <InflateVarTag+0xa4>
    2554:	cmp	r7, #2
    2558:	movne	r0, r7
    255c:	mvneq	r0, #2
    2560:	bl	1558 <zError@plt>
    2564:	mov	r1, r0
    2568:	ldr	r0, [pc, #200]	; 2638 <InflateVarTag+0x15c>
    256c:	add	r0, pc, r0
    2570:	bl	1690 <Mat_Critical@plt>
    2574:	mov	r0, r4
    2578:	add	sp, sp, #32
    257c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    2580:	mov	r8, #1
    2584:	mov	sl, r8
    2588:	mov	r9, sp
    258c:	ldr	r3, [r5, #52]	; 0x34
    2590:	ldr	r3, [r3, #12]
    2594:	ldr	r2, [r3, #16]
    2598:	ldr	r1, [r3, #4]
    259c:	cmp	r2, #0
    25a0:	bne	25d8 <InflateVarTag+0xfc>
    25a4:	cmp	r1, #0
    25a8:	beq	2574 <InflateVarTag+0x98>
    25ac:	mov	r2, #1
    25b0:	rsb	r1, r1, #0
    25b4:	ldr	r0, [r6]
    25b8:	bl	1714 <fseek@plt>
    25bc:	ldr	r3, [r5, #52]	; 0x34
    25c0:	ldr	r3, [r3, #12]
    25c4:	ldr	r2, [r3, #4]
    25c8:	sub	r4, r4, r2
    25cc:	mov	r2, #0
    25d0:	str	r2, [r3, #4]
    25d4:	b	2574 <InflateVarTag+0x98>
    25d8:	cmp	r1, #0
    25dc:	cmpeq	r8, #1
    25e0:	bne	25a4 <InflateVarTag+0xc8>
    25e4:	mov	r2, #1
    25e8:	mov	r1, r2
    25ec:	stm	r3, {r9, sl}
    25f0:	mov	r0, r9
    25f4:	ldr	r3, [r6]
    25f8:	bl	1588 <fread@plt>
    25fc:	ldr	r3, [r5, #52]	; 0x34
    2600:	mov	r1, r7
    2604:	mov	r8, r0
    2608:	add	r4, r4, r0
    260c:	ldr	r0, [r3, #12]
    2610:	bl	14c8 <inflate@plt>
    2614:	cmp	r0, #0
    2618:	beq	258c <InflateVarTag+0xb0>
    261c:	cmp	r0, #2
    2620:	mvneq	r0, #2
    2624:	bl	1558 <zError@plt>
    2628:	mov	r1, r0
    262c:	ldr	r0, [pc, #8]	; 263c <InflateVarTag+0x160>
    2630:	add	r0, pc, r0
    2634:	b	2570 <InflateVarTag+0x94>
    2638:	.word	0x0003df68
    263c:	.word	0x0003dea4

00002640 <InflateArrayFlags>:
    2640:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    2644:	subs	r4, r2, #0
    2648:	sub	sp, sp, #32
    264c:	beq	26d8 <InflateArrayFlags+0x98>
    2650:	ldr	r3, [r1, #52]	; 0x34
    2654:	mov	r7, r4
    2658:	mov	r5, r1
    265c:	ldr	r3, [r3, #12]
    2660:	mov	r6, r0
    2664:	ldr	r2, [r3, #4]
    2668:	cmp	r2, #0
    266c:	movne	r4, #0
    2670:	bne	2694 <InflateArrayFlags+0x54>
    2674:	mov	r2, #1
    2678:	str	r2, [r3, #4]
    267c:	str	sp, [r3]
    2680:	mov	r0, sp
    2684:	ldr	r3, [r6]
    2688:	mov	r1, r2
    268c:	bl	1588 <fread@plt>
    2690:	mov	r4, r0
    2694:	ldr	r3, [r5, #52]	; 0x34
    2698:	mov	r1, #0
    269c:	ldr	r0, [r3, #12]
    26a0:	mov	r3, #16
    26a4:	str	r7, [r0, #12]
    26a8:	str	r3, [r0, #16]
    26ac:	bl	14c8 <inflate@plt>
    26b0:	subs	r7, r0, #0
    26b4:	beq	26e4 <InflateArrayFlags+0xa4>
    26b8:	cmp	r7, #2
    26bc:	movne	r0, r7
    26c0:	mvneq	r0, #2
    26c4:	bl	1558 <zError@plt>
    26c8:	mov	r1, r0
    26cc:	ldr	r0, [pc, #200]	; 279c <InflateArrayFlags+0x15c>
    26d0:	add	r0, pc, r0
    26d4:	bl	1690 <Mat_Critical@plt>
    26d8:	mov	r0, r4
    26dc:	add	sp, sp, #32
    26e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    26e4:	mov	r8, #1
    26e8:	mov	sl, r8
    26ec:	mov	r9, sp
    26f0:	ldr	r3, [r5, #52]	; 0x34
    26f4:	ldr	r3, [r3, #12]
    26f8:	ldr	r2, [r3, #16]
    26fc:	ldr	r1, [r3, #4]
    2700:	cmp	r2, #0
    2704:	bne	273c <InflateArrayFlags+0xfc>
    2708:	cmp	r1, #0
    270c:	beq	26d8 <InflateArrayFlags+0x98>
    2710:	mov	r2, #1
    2714:	rsb	r1, r1, #0
    2718:	ldr	r0, [r6]
    271c:	bl	1714 <fseek@plt>
    2720:	ldr	r3, [r5, #52]	; 0x34
    2724:	ldr	r3, [r3, #12]
    2728:	ldr	r2, [r3, #4]
    272c:	sub	r4, r4, r2
    2730:	mov	r2, #0
    2734:	str	r2, [r3, #4]
    2738:	b	26d8 <InflateArrayFlags+0x98>
    273c:	cmp	r1, #0
    2740:	cmpeq	r8, #1
    2744:	bne	2708 <InflateArrayFlags+0xc8>
    2748:	mov	r2, #1
    274c:	mov	r1, r2
    2750:	stm	r3, {r9, sl}
    2754:	mov	r0, r9
    2758:	ldr	r3, [r6]
    275c:	bl	1588 <fread@plt>
    2760:	ldr	r3, [r5, #52]	; 0x34
    2764:	mov	r1, r7
    2768:	mov	r8, r0
    276c:	add	r4, r4, r0
    2770:	ldr	r0, [r3, #12]
    2774:	bl	14c8 <inflate@plt>
    2778:	cmp	r0, #0
    277c:	beq	26f0 <InflateArrayFlags+0xb0>
    2780:	cmp	r0, #2
    2784:	mvneq	r0, #2
    2788:	bl	1558 <zError@plt>
    278c:	mov	r1, r0
    2790:	ldr	r0, [pc, #8]	; 27a0 <InflateArrayFlags+0x160>
    2794:	add	r0, pc, r0
    2798:	b	26d4 <InflateArrayFlags+0x94>
    279c:	.word	0x0003de27
    27a0:	.word	0x0003dd63

000027a4 <InflateRankDims>:
    27a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27a8:	subs	r4, r2, #0
    27ac:	sub	sp, sp, #52	; 0x34
    27b0:	beq	2918 <InflateRankDims+0x174>
    27b4:	str	r3, [sp]
    27b8:	ldr	r3, [r1, #52]	; 0x34
    27bc:	mov	r6, r4
    27c0:	mov	r5, r1
    27c4:	ldr	r3, [r3, #12]
    27c8:	mov	r7, r0
    27cc:	ldr	r2, [r3, #4]
    27d0:	cmp	r2, #0
    27d4:	movne	r4, #0
    27d8:	bne	27fc <InflateRankDims+0x58>
    27dc:	mov	r2, #1
    27e0:	add	r0, sp, #16
    27e4:	str	r2, [r3, #4]
    27e8:	str	r0, [r3]
    27ec:	mov	r1, r2
    27f0:	ldr	r3, [r7]
    27f4:	bl	1588 <fread@plt>
    27f8:	mov	r4, r0
    27fc:	ldr	r3, [r5, #52]	; 0x34
    2800:	mov	r1, #0
    2804:	ldr	r0, [r3, #12]
    2808:	mov	r3, #8
    280c:	str	r3, [r0, #16]
    2810:	str	r6, [r0, #12]
    2814:	bl	14c8 <inflate@plt>
    2818:	subs	r8, r0, #0
    281c:	beq	289c <InflateRankDims+0xf8>
    2820:	cmp	r8, #2
    2824:	movne	r0, r8
    2828:	mvneq	r0, #2
    282c:	bl	1558 <zError@plt>
    2830:	mov	r1, r0
    2834:	ldr	r0, [pc, #632]	; 2ab4 <InflateRankDims+0x310>
    2838:	add	r0, pc, r0
    283c:	bl	1690 <Mat_Critical@plt>
    2840:	b	2918 <InflateRankDims+0x174>
    2844:	stm	r2, {r9, sl}
    2848:	mov	r2, #1
    284c:	ldr	r3, [r7]
    2850:	mov	r1, r2
    2854:	mov	r0, r9
    2858:	bl	1588 <fread@plt>
    285c:	ldr	r2, [r5, #52]	; 0x34
    2860:	mov	r1, fp
    2864:	str	r0, [sp, #4]
    2868:	add	r4, r4, r0
    286c:	ldr	r0, [r2, #12]
    2870:	bl	14c8 <inflate@plt>
    2874:	ldr	r3, [sp, #4]
    2878:	cmp	r0, #0
    287c:	beq	28ac <InflateRankDims+0x108>
    2880:	cmp	r0, #2
    2884:	mvneq	r0, #2
    2888:	bl	1558 <zError@plt>
    288c:	mov	r1, r0
    2890:	ldr	r0, [pc, #544]	; 2ab8 <InflateRankDims+0x314>
    2894:	add	r0, pc, r0
    2898:	b	283c <InflateRankDims+0x98>
    289c:	mov	r3, #1
    28a0:	mov	sl, r3
    28a4:	add	r9, sp, #16
    28a8:	mov	fp, r8
    28ac:	ldr	r2, [r5, #52]	; 0x34
    28b0:	ldr	r2, [r2, #12]
    28b4:	ldr	r1, [r2, #16]
    28b8:	cmp	r1, #0
    28bc:	beq	28d0 <InflateRankDims+0x12c>
    28c0:	ldr	r1, [r2, #4]
    28c4:	cmp	r1, #0
    28c8:	cmpeq	r3, #1
    28cc:	beq	2844 <InflateRankDims+0xa0>
    28d0:	ldr	r3, [r6]
    28d4:	str	r3, [sp, #8]
    28d8:	ldr	r3, [r6, #4]
    28dc:	str	r3, [sp, #12]
    28e0:	ldr	r3, [r7, #20]
    28e4:	cmp	r3, #0
    28e8:	beq	2900 <InflateRankDims+0x15c>
    28ec:	add	r9, sp, #8
    28f0:	mov	r0, r9
    28f4:	bl	1a18 <Mat_int32Swap>
    28f8:	add	r0, r9, #4
    28fc:	bl	1a18 <Mat_int32Swap>
    2900:	ldrh	r3, [sp, #8]
    2904:	cmp	r3, #5
    2908:	beq	2924 <InflateRankDims+0x180>
    290c:	ldr	r0, [pc, #424]	; 2abc <InflateRankDims+0x318>
    2910:	add	r0, pc, r0
    2914:	bl	1690 <Mat_Critical@plt>
    2918:	mov	r0, r4
    291c:	add	sp, sp, #52	; 0x34
    2920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2924:	ldr	r0, [sp, #12]
    2928:	ands	r3, r0, #7
    292c:	beq	2940 <InflateRankDims+0x19c>
    2930:	rsbs	r2, r0, #0
    2934:	and	r2, r2, #7
    2938:	rsbpl	r3, r2, #0
    293c:	rsb	r8, r3, #8
    2940:	ldr	r3, [r5, #52]	; 0x34
    2944:	add	r8, r8, r0
    2948:	ldr	r3, [r3, #12]
    294c:	ldr	r2, [r3, #4]
    2950:	cmp	r2, #0
    2954:	bne	2978 <InflateRankDims+0x1d4>
    2958:	mov	r2, #1
    295c:	add	r0, sp, #16
    2960:	str	r2, [r3, #4]
    2964:	str	r0, [r3]
    2968:	mov	r1, r2
    296c:	ldr	r3, [r7]
    2970:	bl	1588 <fread@plt>
    2974:	add	r4, r4, r0
    2978:	ldr	r3, [r5, #52]	; 0x34
    297c:	ldr	r2, [sp]
    2980:	ldr	r9, [r3, #12]
    2984:	add	r3, r8, #2
    2988:	cmp	r2, r3, lsl #2
    298c:	addcs	r6, r6, #8
    2990:	str	r8, [r9, #16]
    2994:	strcs	r6, [r9, #12]
    2998:	bcs	29c8 <InflateRankDims+0x224>
    299c:	mov	r1, #4
    29a0:	mov	r0, r8
    29a4:	bl	1468 <calloc@plt>
    29a8:	ldr	r3, [sp, #88]	; 0x58
    29ac:	cmp	r0, #0
    29b0:	str	r0, [r3]
    29b4:	strne	r0, [r9, #12]
    29b8:	streq	r0, [r6, #4]
    29bc:	ldreq	r0, [pc, #252]	; 2ac0 <InflateRankDims+0x31c>
    29c0:	addeq	r0, pc, r0
    29c4:	beq	2914 <InflateRankDims+0x170>
    29c8:	mov	r1, #0
    29cc:	mov	r0, r9
    29d0:	bl	14c8 <inflate@plt>
    29d4:	subs	r6, r0, #0
    29d8:	beq	2a50 <InflateRankDims+0x2ac>
    29dc:	cmp	r6, #2
    29e0:	movne	r0, r6
    29e4:	mvneq	r0, #2
    29e8:	bl	1558 <zError@plt>
    29ec:	mov	r1, r0
    29f0:	ldr	r0, [pc, #204]	; 2ac4 <InflateRankDims+0x320>
    29f4:	add	r0, pc, r0
    29f8:	b	283c <InflateRankDims+0x98>
    29fc:	mov	r2, #1
    2a00:	mov	r1, r2
    2a04:	stm	r3, {r9, sl}
    2a08:	mov	r0, r9
    2a0c:	ldr	r3, [r7]
    2a10:	bl	1588 <fread@plt>
    2a14:	ldr	r3, [r5, #52]	; 0x34
    2a18:	mov	r1, r6
    2a1c:	mov	r8, r0
    2a20:	add	r4, r4, r0
    2a24:	ldr	r0, [r3, #12]
    2a28:	bl	14c8 <inflate@plt>
    2a2c:	cmp	r0, #0
    2a30:	beq	2a5c <InflateRankDims+0x2b8>
    2a34:	cmp	r0, #2
    2a38:	mvneq	r0, #2
    2a3c:	bl	1558 <zError@plt>
    2a40:	mov	r1, r0
    2a44:	ldr	r0, [pc, #124]	; 2ac8 <InflateRankDims+0x324>
    2a48:	add	r0, pc, r0
    2a4c:	b	283c <InflateRankDims+0x98>
    2a50:	mov	r8, #1
    2a54:	mov	sl, r8
    2a58:	add	r9, sp, #16
    2a5c:	ldr	r3, [r5, #52]	; 0x34
    2a60:	ldr	r3, [r3, #12]
    2a64:	ldr	r2, [r3, #16]
    2a68:	ldr	r1, [r3, #4]
    2a6c:	cmp	r2, #0
    2a70:	beq	2a80 <InflateRankDims+0x2dc>
    2a74:	cmp	r1, #0
    2a78:	cmpeq	r8, #1
    2a7c:	beq	29fc <InflateRankDims+0x258>
    2a80:	cmp	r1, #0
    2a84:	beq	2918 <InflateRankDims+0x174>
    2a88:	mov	r2, #1
    2a8c:	rsb	r1, r1, #0
    2a90:	ldr	r0, [r7]
    2a94:	bl	1714 <fseek@plt>
    2a98:	ldr	r3, [r5, #52]	; 0x34
    2a9c:	ldr	r3, [r3, #12]
    2aa0:	ldr	r2, [r3, #4]
    2aa4:	sub	r4, r4, r2
    2aa8:	mov	r2, #0
    2aac:	str	r2, [r3, #4]
    2ab0:	b	2918 <InflateRankDims+0x174>
    2ab4:	.word	0x0003dce6
    2ab8:	.word	0x0003dc8a
    2abc:	.word	0x0003dc33
    2ac0:	.word	0x0003dbc1
    2ac4:	.word	0x0003db2a
    2ac8:	.word	0x0003dad6

00002acc <InflateVarNameTag>:
    2acc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    2ad0:	subs	r4, r2, #0
    2ad4:	sub	sp, sp, #32
    2ad8:	beq	2b64 <InflateVarNameTag+0x98>
    2adc:	ldr	r3, [r1, #52]	; 0x34
    2ae0:	mov	r7, r4
    2ae4:	mov	r5, r1
    2ae8:	ldr	r3, [r3, #12]
    2aec:	mov	r6, r0
    2af0:	ldr	r2, [r3, #4]
    2af4:	cmp	r2, #0
    2af8:	movne	r4, #0
    2afc:	bne	2b20 <InflateVarNameTag+0x54>
    2b00:	mov	r2, #1
    2b04:	str	r2, [r3, #4]
    2b08:	str	sp, [r3]
    2b0c:	mov	r0, sp
    2b10:	ldr	r3, [r6]
    2b14:	mov	r1, r2
    2b18:	bl	1588 <fread@plt>
    2b1c:	mov	r4, r0
    2b20:	ldr	r3, [r5, #52]	; 0x34
    2b24:	mov	r1, #0
    2b28:	ldr	r0, [r3, #12]
    2b2c:	mov	r3, #8
    2b30:	str	r7, [r0, #12]
    2b34:	str	r3, [r0, #16]
    2b38:	bl	14c8 <inflate@plt>
    2b3c:	subs	r7, r0, #0
    2b40:	beq	2b70 <InflateVarNameTag+0xa4>
    2b44:	cmp	r7, #2
    2b48:	movne	r0, r7
    2b4c:	mvneq	r0, #2
    2b50:	bl	1558 <zError@plt>
    2b54:	mov	r1, r0
    2b58:	ldr	r0, [pc, #200]	; 2c28 <InflateVarNameTag+0x15c>
    2b5c:	add	r0, pc, r0
    2b60:	bl	1690 <Mat_Critical@plt>
    2b64:	mov	r0, r4
    2b68:	add	sp, sp, #32
    2b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    2b70:	mov	r8, #1
    2b74:	mov	sl, r8
    2b78:	mov	r9, sp
    2b7c:	ldr	r3, [r5, #52]	; 0x34
    2b80:	ldr	r3, [r3, #12]
    2b84:	ldr	r2, [r3, #16]
    2b88:	ldr	r1, [r3, #4]
    2b8c:	cmp	r2, #0
    2b90:	bne	2bc8 <InflateVarNameTag+0xfc>
    2b94:	cmp	r1, #0
    2b98:	beq	2b64 <InflateVarNameTag+0x98>
    2b9c:	mov	r2, #1
    2ba0:	rsb	r1, r1, #0
    2ba4:	ldr	r0, [r6]
    2ba8:	bl	1714 <fseek@plt>
    2bac:	ldr	r3, [r5, #52]	; 0x34
    2bb0:	ldr	r3, [r3, #12]
    2bb4:	ldr	r2, [r3, #4]
    2bb8:	sub	r4, r4, r2
    2bbc:	mov	r2, #0
    2bc0:	str	r2, [r3, #4]
    2bc4:	b	2b64 <InflateVarNameTag+0x98>
    2bc8:	cmp	r1, #0
    2bcc:	cmpeq	r8, #1
    2bd0:	bne	2b94 <InflateVarNameTag+0xc8>
    2bd4:	mov	r2, #1
    2bd8:	mov	r1, r2
    2bdc:	stm	r3, {r9, sl}
    2be0:	mov	r0, r9
    2be4:	ldr	r3, [r6]
    2be8:	bl	1588 <fread@plt>
    2bec:	ldr	r3, [r5, #52]	; 0x34
    2bf0:	mov	r1, r7
    2bf4:	mov	r8, r0
    2bf8:	add	r4, r4, r0
    2bfc:	ldr	r0, [r3, #12]
    2c00:	bl	14c8 <inflate@plt>
    2c04:	cmp	r0, #0
    2c08:	beq	2b7c <InflateVarNameTag+0xb0>
    2c0c:	cmp	r0, #2
    2c10:	mvneq	r0, #2
    2c14:	bl	1558 <zError@plt>
    2c18:	mov	r1, r0
    2c1c:	ldr	r0, [pc, #8]	; 2c2c <InflateVarNameTag+0x160>
    2c20:	add	r0, pc, r0
    2c24:	b	2b60 <InflateVarNameTag+0x94>
    2c28:	.word	0x0003da46
    2c2c:	.word	0x0003d982

00002c30 <InflateVarName>:
    2c30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    2c34:	subs	r4, r2, #0
    2c38:	sub	sp, sp, #32
    2c3c:	beq	2cc8 <InflateVarName+0x98>
    2c40:	mov	r8, r3
    2c44:	ldr	r3, [r1, #52]	; 0x34
    2c48:	mov	r7, r4
    2c4c:	mov	r5, r1
    2c50:	ldr	r3, [r3, #12]
    2c54:	mov	r6, r0
    2c58:	ldr	r2, [r3, #4]
    2c5c:	cmp	r2, #0
    2c60:	movne	r4, #0
    2c64:	bne	2c88 <InflateVarName+0x58>
    2c68:	mov	r2, #1
    2c6c:	str	r2, [r3, #4]
    2c70:	str	sp, [r3]
    2c74:	mov	r0, sp
    2c78:	ldr	r3, [r6]
    2c7c:	mov	r1, r2
    2c80:	bl	1588 <fread@plt>
    2c84:	mov	r4, r0
    2c88:	ldr	r3, [r5, #52]	; 0x34
    2c8c:	mov	r1, #0
    2c90:	ldr	r0, [r3, #12]
    2c94:	str	r7, [r0, #12]
    2c98:	str	r8, [r0, #16]
    2c9c:	bl	14c8 <inflate@plt>
    2ca0:	subs	r7, r0, #0
    2ca4:	beq	2cd4 <InflateVarName+0xa4>
    2ca8:	cmp	r7, #2
    2cac:	movne	r0, r7
    2cb0:	mvneq	r0, #2
    2cb4:	bl	1558 <zError@plt>
    2cb8:	mov	r1, r0
    2cbc:	ldr	r0, [pc, #200]	; 2d8c <InflateVarName+0x15c>
    2cc0:	add	r0, pc, r0
    2cc4:	bl	1690 <Mat_Critical@plt>
    2cc8:	mov	r0, r4
    2ccc:	add	sp, sp, #32
    2cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    2cd4:	mov	r8, #1
    2cd8:	mov	sl, r8
    2cdc:	mov	r9, sp
    2ce0:	ldr	r3, [r5, #52]	; 0x34
    2ce4:	ldr	r3, [r3, #12]
    2ce8:	ldr	r2, [r3, #16]
    2cec:	ldr	r1, [r3, #4]
    2cf0:	cmp	r2, #0
    2cf4:	bne	2d2c <InflateVarName+0xfc>
    2cf8:	cmp	r1, #0
    2cfc:	beq	2cc8 <InflateVarName+0x98>
    2d00:	mov	r2, #1
    2d04:	rsb	r1, r1, #0
    2d08:	ldr	r0, [r6]
    2d0c:	bl	1714 <fseek@plt>
    2d10:	ldr	r3, [r5, #52]	; 0x34
    2d14:	ldr	r3, [r3, #12]
    2d18:	ldr	r2, [r3, #4]
    2d1c:	sub	r4, r4, r2
    2d20:	mov	r2, #0
    2d24:	str	r2, [r3, #4]
    2d28:	b	2cc8 <InflateVarName+0x98>
    2d2c:	cmp	r1, #0
    2d30:	cmpeq	r8, #1
    2d34:	bne	2cf8 <InflateVarName+0xc8>
    2d38:	mov	r2, #1
    2d3c:	mov	r1, r2
    2d40:	stm	r3, {r9, sl}
    2d44:	mov	r0, r9
    2d48:	ldr	r3, [r6]
    2d4c:	bl	1588 <fread@plt>
    2d50:	ldr	r3, [r5, #52]	; 0x34
    2d54:	mov	r1, r7
    2d58:	mov	r8, r0
    2d5c:	add	r4, r4, r0
    2d60:	ldr	r0, [r3, #12]
    2d64:	bl	14c8 <inflate@plt>
    2d68:	cmp	r0, #0
    2d6c:	beq	2ce0 <InflateVarName+0xb0>
    2d70:	cmp	r0, #2
    2d74:	mvneq	r0, #2
    2d78:	bl	1558 <zError@plt>
    2d7c:	mov	r1, r0
    2d80:	ldr	r0, [pc, #8]	; 2d90 <InflateVarName+0x160>
    2d84:	add	r0, pc, r0
    2d88:	b	2cc4 <InflateVarName+0x94>
    2d8c:	.word	0x0003d909
    2d90:	.word	0x0003d845

00002d94 <InflateDataTag>:
    2d94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    2d98:	subs	r5, r2, #0
    2d9c:	sub	sp, sp, #32
    2da0:	beq	2e38 <InflateDataTag+0xa4>
    2da4:	ldr	r3, [r1, #52]	; 0x34
    2da8:	mov	r6, r5
    2dac:	mov	r4, r1
    2db0:	ldr	r3, [r3, #12]
    2db4:	mov	r7, r0
    2db8:	ldr	r2, [r3, #4]
    2dbc:	cmp	r2, #0
    2dc0:	movne	r5, #0
    2dc4:	bne	2de8 <InflateDataTag+0x54>
    2dc8:	mov	r2, #1
    2dcc:	str	r2, [r3, #4]
    2dd0:	str	sp, [r3]
    2dd4:	mov	r0, sp
    2dd8:	ldr	r3, [r7]
    2ddc:	mov	r1, r2
    2de0:	bl	1588 <fread@plt>
    2de4:	mov	r5, r0
    2de8:	ldr	r3, [r4, #52]	; 0x34
    2dec:	mov	r1, #0
    2df0:	ldr	r0, [r3, #12]
    2df4:	mov	r3, #8
    2df8:	str	r3, [r0, #16]
    2dfc:	str	r6, [r0, #12]
    2e00:	bl	14c8 <inflate@plt>
    2e04:	cmp	r0, #1
    2e08:	beq	2e38 <InflateDataTag+0xa4>
    2e0c:	cmp	r0, #0
    2e10:	beq	2ea8 <InflateDataTag+0x114>
    2e14:	cmp	r0, #2
    2e18:	mvneq	r0, #2
    2e1c:	ldr	r4, [r4, #36]	; 0x24
    2e20:	bl	1558 <zError@plt>
    2e24:	mov	r1, r4
    2e28:	mov	r2, r0
    2e2c:	ldr	r0, [pc, #232]	; 2f1c <InflateDataTag+0x188>
    2e30:	add	r0, pc, r0
    2e34:	bl	1690 <Mat_Critical@plt>
    2e38:	mov	r0, r5
    2e3c:	add	sp, sp, #32
    2e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    2e44:	mov	r2, #1
    2e48:	mov	r1, r2
    2e4c:	stm	r3, {r9, sl}
    2e50:	mov	r0, r9
    2e54:	ldr	r3, [r7]
    2e58:	bl	1588 <fread@plt>
    2e5c:	ldr	r3, [r4, #52]	; 0x34
    2e60:	mov	r1, r6
    2e64:	mov	r8, r0
    2e68:	add	r5, r5, r0
    2e6c:	ldr	r0, [r3, #12]
    2e70:	bl	14c8 <inflate@plt>
    2e74:	cmp	r0, #1
    2e78:	beq	2edc <InflateDataTag+0x148>
    2e7c:	cmp	r0, #0
    2e80:	beq	2eb8 <InflateDataTag+0x124>
    2e84:	cmp	r0, #2
    2e88:	mvneq	r0, #2
    2e8c:	ldr	r4, [r4, #36]	; 0x24
    2e90:	bl	1558 <zError@plt>
    2e94:	mov	r1, r4
    2e98:	mov	r2, r0
    2e9c:	ldr	r0, [pc, #124]	; 2f20 <InflateDataTag+0x18c>
    2ea0:	add	r0, pc, r0
    2ea4:	b	2e34 <InflateDataTag+0xa0>
    2ea8:	mov	r8, #1
    2eac:	mov	sl, r8
    2eb0:	mov	r9, sp
    2eb4:	mov	r6, r0
    2eb8:	ldr	r3, [r4, #52]	; 0x34
    2ebc:	ldr	r3, [r3, #12]
    2ec0:	ldr	r2, [r3, #16]
    2ec4:	cmp	r2, #0
    2ec8:	beq	2edc <InflateDataTag+0x148>
    2ecc:	ldr	r2, [r3, #4]
    2ed0:	cmp	r2, #0
    2ed4:	cmpeq	r8, #1
    2ed8:	beq	2e44 <InflateDataTag+0xb0>
    2edc:	ldr	r3, [r4, #52]	; 0x34
    2ee0:	ldr	r3, [r3, #12]
    2ee4:	ldr	r1, [r3, #4]
    2ee8:	cmp	r1, #0
    2eec:	beq	2e38 <InflateDataTag+0xa4>
    2ef0:	mov	r2, #1
    2ef4:	rsb	r1, r1, #0
    2ef8:	ldr	r0, [r7]
    2efc:	bl	1714 <fseek@plt>
    2f00:	ldr	r3, [r4, #52]	; 0x34
    2f04:	ldr	r3, [r3, #12]
    2f08:	ldr	r2, [r3, #4]
    2f0c:	sub	r5, r5, r2
    2f10:	mov	r2, #0
    2f14:	str	r2, [r3, #4]
    2f18:	b	2e38 <InflateDataTag+0xa4>
    2f1c:	.word	0x0003d7bd
    2f20:	.word	0x0003d74d

00002f24 <InflateDataType>:
    2f24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    2f28:	subs	r5, r2, #0
    2f2c:	sub	sp, sp, #32
    2f30:	beq	2fb0 <InflateDataType+0x8c>
    2f34:	ldr	r3, [r1, #4]
    2f38:	mov	r7, r5
    2f3c:	cmp	r3, #0
    2f40:	mov	r4, r1
    2f44:	mov	r6, r0
    2f48:	movne	r5, #0
    2f4c:	bne	2f70 <InflateDataType+0x4c>
    2f50:	mov	r2, #1
    2f54:	str	r2, [r1, #4]
    2f58:	mov	r0, sp
    2f5c:	str	sp, [r4]
    2f60:	ldr	r3, [r6]
    2f64:	mov	r1, r2
    2f68:	bl	1588 <fread@plt>
    2f6c:	mov	r5, r0
    2f70:	mov	r3, #4
    2f74:	str	r3, [r4, #16]
    2f78:	str	r7, [r4, #12]
    2f7c:	mov	r1, #0
    2f80:	mov	r0, r4
    2f84:	bl	14c8 <inflate@plt>
    2f88:	subs	sl, r0, #0
    2f8c:	beq	2fbc <InflateDataType+0x98>
    2f90:	cmp	sl, #2
    2f94:	movne	r0, sl
    2f98:	mvneq	r0, #2
    2f9c:	bl	1558 <zError@plt>
    2fa0:	mov	r1, r0
    2fa4:	ldr	r0, [pc, #180]	; 3060 <InflateDataType+0x13c>
    2fa8:	add	r0, pc, r0
    2fac:	bl	1690 <Mat_Critical@plt>
    2fb0:	mov	r0, r5
    2fb4:	add	sp, sp, #32
    2fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    2fbc:	mov	r7, #1
    2fc0:	mov	r9, r7
    2fc4:	mov	r8, sp
    2fc8:	ldr	r3, [r4, #16]
    2fcc:	ldr	r1, [r4, #4]
    2fd0:	cmp	r3, #0
    2fd4:	bne	3004 <InflateDataType+0xe0>
    2fd8:	cmp	r1, #0
    2fdc:	beq	2fb0 <InflateDataType+0x8c>
    2fe0:	mov	r2, #1
    2fe4:	rsb	r1, r1, #0
    2fe8:	ldr	r0, [r6]
    2fec:	bl	1714 <fseek@plt>
    2ff0:	ldr	r3, [r4, #4]
    2ff4:	sub	r5, r5, r3
    2ff8:	mov	r3, #0
    2ffc:	str	r3, [r4, #4]
    3000:	b	2fb0 <InflateDataType+0x8c>
    3004:	cmp	r1, #0
    3008:	cmpeq	r7, #1
    300c:	bne	2fd8 <InflateDataType+0xb4>
    3010:	mov	r2, #1
    3014:	mov	r1, r2
    3018:	ldr	r3, [r6]
    301c:	stm	r4, {r8, r9}
    3020:	mov	r0, r8
    3024:	bl	1588 <fread@plt>
    3028:	mov	r1, sl
    302c:	mov	r7, r0
    3030:	add	r5, r5, r0
    3034:	mov	r0, r4
    3038:	bl	14c8 <inflate@plt>
    303c:	cmp	r0, #0
    3040:	beq	2fc8 <InflateDataType+0xa4>
    3044:	cmp	r0, #2
    3048:	mvneq	r0, #2
    304c:	bl	1558 <zError@plt>
    3050:	mov	r1, r0
    3054:	ldr	r0, [pc, #8]	; 3064 <InflateDataType+0x140>
    3058:	add	r0, pc, r0
    305c:	b	2fac <InflateDataType+0x88>
    3060:	.word	0x0003d66e
    3064:	.word	0x0003d5be

00003068 <InflateData>:
    3068:	cmp	r2, #0
    306c:	cmpne	r3, #0
    3070:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    3074:	moveq	r5, #1
    3078:	sub	sp, sp, #1024	; 0x400
    307c:	movne	r5, #0
    3080:	moveq	r5, #0
    3084:	beq	310c <InflateData+0xa4>
    3088:	mov	r6, r3
    308c:	ldr	r3, [r1, #4]
    3090:	mov	r9, r2
    3094:	cmp	r3, #0
    3098:	mov	r4, r1
    309c:	mov	r7, r0
    30a0:	bne	30cc <InflateData+0x64>
    30a4:	cmp	r6, #1024	; 0x400
    30a8:	ldr	r3, [r0]
    30ac:	movhi	r2, #1024	; 0x400
    30b0:	movls	r2, r6
    30b4:	mov	r1, #1
    30b8:	mov	r0, sp
    30bc:	bl	1588 <fread@plt>
    30c0:	str	sp, [r4]
    30c4:	str	r0, [r4, #4]
    30c8:	ldr	r5, [r4, #4]
    30cc:	str	r6, [r4, #16]
    30d0:	str	r9, [r4, #12]
    30d4:	mov	r1, #3
    30d8:	mov	r0, r4
    30dc:	bl	14c8 <inflate@plt>
    30e0:	cmp	r0, #1
    30e4:	beq	310c <InflateData+0xa4>
    30e8:	cmp	r0, #0
    30ec:	beq	3118 <InflateData+0xb0>
    30f0:	cmp	r0, #2
    30f4:	mvneq	r0, #2
    30f8:	bl	1558 <zError@plt>
    30fc:	mov	r1, r0
    3100:	ldr	r0, [pc, #236]	; 31f4 <InflateData+0x18c>
    3104:	add	r0, pc, r0
    3108:	bl	1690 <Mat_Critical@plt>
    310c:	mov	r0, r5
    3110:	add	sp, sp, #1024	; 0x400
    3114:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3118:	mov	r8, sp
    311c:	mov	r9, #1
    3120:	mov	sl, #1024	; 0x400
    3124:	ldr	r3, [r4, #16]
    3128:	cmp	r3, #0
    312c:	beq	31c4 <InflateData+0x15c>
    3130:	ldr	r3, [r4, #4]
    3134:	cmp	r3, #0
    3138:	bne	31c4 <InflateData+0x15c>
    313c:	add	r3, r5, #1024	; 0x400
    3140:	cmp	r6, r3
    3144:	movhi	r2, sl
    3148:	ldrhi	r3, [r7]
    314c:	bhi	316c <InflateData+0x104>
    3150:	add	r3, r5, #1
    3154:	cmp	r6, r3
    3158:	movcc	r2, r9
    315c:	ldr	r3, [r7]
    3160:	movcc	r1, #1
    3164:	bcc	3170 <InflateData+0x108>
    3168:	sub	r2, r6, r5
    316c:	mov	r1, r9
    3170:	mov	r0, r8
    3174:	bl	1588 <fread@plt>
    3178:	str	r8, [r4]
    317c:	mov	r1, #3
    3180:	str	r0, [r4, #4]
    3184:	ldr	r3, [r4, #4]
    3188:	mov	r0, r4
    318c:	add	r5, r5, r3
    3190:	bl	14c8 <inflate@plt>
    3194:	cmp	r0, #1
    3198:	beq	31c4 <InflateData+0x15c>
    319c:	cmp	r0, #0
    31a0:	cmnne	r0, #5
    31a4:	beq	3124 <InflateData+0xbc>
    31a8:	cmp	r0, #2
    31ac:	mvneq	r0, #2
    31b0:	bl	1558 <zError@plt>
    31b4:	mov	r1, r0
    31b8:	ldr	r0, [pc, #56]	; 31f8 <InflateData+0x190>
    31bc:	add	r0, pc, r0
    31c0:	bl	1690 <Mat_Critical@plt>
    31c4:	ldr	r1, [r4, #4]
    31c8:	cmp	r1, #0
    31cc:	beq	310c <InflateData+0xa4>
    31d0:	mov	r2, #1
    31d4:	rsb	r1, r1, #0
    31d8:	ldr	r0, [r7]
    31dc:	bl	1714 <fseek@plt>
    31e0:	ldr	r3, [r4, #4]
    31e4:	sub	r5, r5, r3
    31e8:	mov	r3, #0
    31ec:	str	r3, [r4, #4]
    31f0:	b	310c <InflateData+0xa4>
    31f4:	.word	0x0003d537
    31f8:	.word	0x0003d47f

000031fc <InflateFieldNameLength>:
    31fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    3200:	subs	r4, r2, #0
    3204:	sub	sp, sp, #32
    3208:	beq	3294 <InflateFieldNameLength+0x98>
    320c:	ldr	r3, [r1, #52]	; 0x34
    3210:	mov	r7, r4
    3214:	mov	r5, r1
    3218:	ldr	r3, [r3, #12]
    321c:	mov	r6, r0
    3220:	ldr	r2, [r3, #4]
    3224:	cmp	r2, #0
    3228:	movne	r4, #0
    322c:	bne	3250 <InflateFieldNameLength+0x54>
    3230:	mov	r2, #1
    3234:	str	r2, [r3, #4]
    3238:	str	sp, [r3]
    323c:	mov	r0, sp
    3240:	ldr	r3, [r6]
    3244:	mov	r1, r2
    3248:	bl	1588 <fread@plt>
    324c:	mov	r4, r0
    3250:	ldr	r3, [r5, #52]	; 0x34
    3254:	mov	r1, #0
    3258:	ldr	r0, [r3, #12]
    325c:	mov	r3, #8
    3260:	str	r7, [r0, #12]
    3264:	str	r3, [r0, #16]
    3268:	bl	14c8 <inflate@plt>
    326c:	subs	r7, r0, #0
    3270:	beq	32a0 <InflateFieldNameLength+0xa4>
    3274:	cmp	r7, #2
    3278:	movne	r0, r7
    327c:	mvneq	r0, #2
    3280:	bl	1558 <zError@plt>
    3284:	mov	r1, r0
    3288:	ldr	r0, [pc, #200]	; 3358 <InflateFieldNameLength+0x15c>
    328c:	add	r0, pc, r0
    3290:	bl	1690 <Mat_Critical@plt>
    3294:	mov	r0, r4
    3298:	add	sp, sp, #32
    329c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    32a0:	mov	r8, #1
    32a4:	mov	sl, r8
    32a8:	mov	r9, sp
    32ac:	ldr	r3, [r5, #52]	; 0x34
    32b0:	ldr	r3, [r3, #12]
    32b4:	ldr	r2, [r3, #16]
    32b8:	ldr	r1, [r3, #4]
    32bc:	cmp	r2, #0
    32c0:	bne	32f8 <InflateFieldNameLength+0xfc>
    32c4:	cmp	r1, #0
    32c8:	beq	3294 <InflateFieldNameLength+0x98>
    32cc:	mov	r2, #1
    32d0:	rsb	r1, r1, #0
    32d4:	ldr	r0, [r6]
    32d8:	bl	1714 <fseek@plt>
    32dc:	ldr	r3, [r5, #52]	; 0x34
    32e0:	ldr	r3, [r3, #12]
    32e4:	ldr	r2, [r3, #4]
    32e8:	sub	r4, r4, r2
    32ec:	mov	r2, #0
    32f0:	str	r2, [r3, #4]
    32f4:	b	3294 <InflateFieldNameLength+0x98>
    32f8:	cmp	r1, #0
    32fc:	cmpeq	r8, #1
    3300:	bne	32c4 <InflateFieldNameLength+0xc8>
    3304:	mov	r2, #1
    3308:	mov	r1, r2
    330c:	stm	r3, {r9, sl}
    3310:	mov	r0, r9
    3314:	ldr	r3, [r6]
    3318:	bl	1588 <fread@plt>
    331c:	ldr	r3, [r5, #52]	; 0x34
    3320:	mov	r1, r7
    3324:	mov	r8, r0
    3328:	add	r4, r4, r0
    332c:	ldr	r0, [r3, #12]
    3330:	bl	14c8 <inflate@plt>
    3334:	cmp	r0, #0
    3338:	beq	32ac <InflateFieldNameLength+0xb0>
    333c:	cmp	r0, #2
    3340:	mvneq	r0, #2
    3344:	bl	1558 <zError@plt>
    3348:	mov	r1, r0
    334c:	ldr	r0, [pc, #8]	; 335c <InflateFieldNameLength+0x160>
    3350:	add	r0, pc, r0
    3354:	b	3290 <InflateFieldNameLength+0x94>
    3358:	.word	0x0003d3d0
    335c:	.word	0x0003d30c

00003360 <InflateFieldNamesTag>:
    3360:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    3364:	subs	r4, r2, #0
    3368:	sub	sp, sp, #32
    336c:	beq	33f8 <InflateFieldNamesTag+0x98>
    3370:	ldr	r3, [r1, #52]	; 0x34
    3374:	mov	r7, r4
    3378:	mov	r5, r1
    337c:	ldr	r3, [r3, #12]
    3380:	mov	r6, r0
    3384:	ldr	r2, [r3, #4]
    3388:	cmp	r2, #0
    338c:	movne	r4, #0
    3390:	bne	33b4 <InflateFieldNamesTag+0x54>
    3394:	mov	r2, #1
    3398:	str	r2, [r3, #4]
    339c:	str	sp, [r3]
    33a0:	mov	r0, sp
    33a4:	ldr	r3, [r6]
    33a8:	mov	r1, r2
    33ac:	bl	1588 <fread@plt>
    33b0:	mov	r4, r0
    33b4:	ldr	r3, [r5, #52]	; 0x34
    33b8:	mov	r1, #0
    33bc:	ldr	r0, [r3, #12]
    33c0:	mov	r3, #8
    33c4:	str	r7, [r0, #12]
    33c8:	str	r3, [r0, #16]
    33cc:	bl	14c8 <inflate@plt>
    33d0:	subs	r7, r0, #0
    33d4:	beq	3404 <InflateFieldNamesTag+0xa4>
    33d8:	cmp	r7, #2
    33dc:	movne	r0, r7
    33e0:	mvneq	r0, #2
    33e4:	bl	1558 <zError@plt>
    33e8:	mov	r1, r0
    33ec:	ldr	r0, [pc, #200]	; 34bc <InflateFieldNamesTag+0x15c>
    33f0:	add	r0, pc, r0
    33f4:	bl	1690 <Mat_Critical@plt>
    33f8:	mov	r0, r4
    33fc:	add	sp, sp, #32
    3400:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3404:	mov	r8, #1
    3408:	mov	sl, r8
    340c:	mov	r9, sp
    3410:	ldr	r3, [r5, #52]	; 0x34
    3414:	ldr	r3, [r3, #12]
    3418:	ldr	r2, [r3, #16]
    341c:	ldr	r1, [r3, #4]
    3420:	cmp	r2, #0
    3424:	bne	345c <InflateFieldNamesTag+0xfc>
    3428:	cmp	r1, #0
    342c:	beq	33f8 <InflateFieldNamesTag+0x98>
    3430:	mov	r2, #1
    3434:	rsb	r1, r1, #0
    3438:	ldr	r0, [r6]
    343c:	bl	1714 <fseek@plt>
    3440:	ldr	r3, [r5, #52]	; 0x34
    3444:	ldr	r3, [r3, #12]
    3448:	ldr	r2, [r3, #4]
    344c:	sub	r4, r4, r2
    3450:	mov	r2, #0
    3454:	str	r2, [r3, #4]
    3458:	b	33f8 <InflateFieldNamesTag+0x98>
    345c:	cmp	r1, #0
    3460:	cmpeq	r8, #1
    3464:	bne	3428 <InflateFieldNamesTag+0xc8>
    3468:	mov	r2, #1
    346c:	mov	r1, r2
    3470:	stm	r3, {r9, sl}
    3474:	mov	r0, r9
    3478:	ldr	r3, [r6]
    347c:	bl	1588 <fread@plt>
    3480:	ldr	r3, [r5, #52]	; 0x34
    3484:	mov	r1, r7
    3488:	mov	r8, r0
    348c:	add	r4, r4, r0
    3490:	ldr	r0, [r3, #12]
    3494:	bl	14c8 <inflate@plt>
    3498:	cmp	r0, #0
    349c:	beq	3410 <InflateFieldNamesTag+0xb0>
    34a0:	cmp	r0, #2
    34a4:	mvneq	r0, #2
    34a8:	bl	1558 <zError@plt>
    34ac:	mov	r1, r0
    34b0:	ldr	r0, [pc, #8]	; 34c0 <InflateFieldNamesTag+0x160>
    34b4:	add	r0, pc, r0
    34b8:	b	33f4 <InflateFieldNamesTag+0x94>
    34bc:	.word	0x0003d298
    34c0:	.word	0x0003d1d4

000034c4 <InflateFieldNames>:
    34c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    34c8:	subs	r4, r2, #0
    34cc:	sub	sp, sp, #32
    34d0:	beq	3568 <InflateFieldNames+0xa4>
    34d4:	mov	r7, r3
    34d8:	ldr	r3, [r1, #52]	; 0x34
    34dc:	mov	r8, r4
    34e0:	mov	r5, r1
    34e4:	ldr	r3, [r3, #12]
    34e8:	mov	r6, r0
    34ec:	ldr	r2, [r3, #4]
    34f0:	cmp	r2, #0
    34f4:	movne	r4, #0
    34f8:	bne	351c <InflateFieldNames+0x58>
    34fc:	mov	r2, #1
    3500:	str	r2, [r3, #4]
    3504:	str	sp, [r3]
    3508:	mov	r0, sp
    350c:	ldr	r3, [r6]
    3510:	mov	r1, r2
    3514:	bl	1588 <fread@plt>
    3518:	mov	r4, r0
    351c:	ldr	r3, [r5, #52]	; 0x34
    3520:	ldr	r2, [sp, #64]	; 0x40
    3524:	mov	r1, #0
    3528:	ldr	r0, [r3, #12]
    352c:	ldr	r3, [sp, #68]	; 0x44
    3530:	mla	r7, r2, r7, r3
    3534:	str	r8, [r0, #12]
    3538:	str	r7, [r0, #16]
    353c:	bl	14c8 <inflate@plt>
    3540:	subs	r9, r0, #0
    3544:	beq	3574 <InflateFieldNames+0xb0>
    3548:	cmp	r9, #2
    354c:	movne	r0, r9
    3550:	mvneq	r0, #2
    3554:	bl	1558 <zError@plt>
    3558:	mov	r1, r0
    355c:	ldr	r0, [pc, #200]	; 362c <InflateFieldNames+0x168>
    3560:	add	r0, pc, r0
    3564:	bl	1690 <Mat_Critical@plt>
    3568:	mov	r0, r4
    356c:	add	sp, sp, #32
    3570:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    3574:	mov	sl, #1
    3578:	mov	r8, sl
    357c:	mov	r7, sp
    3580:	ldr	r3, [r5, #52]	; 0x34
    3584:	ldr	r3, [r3, #12]
    3588:	ldr	r2, [r3, #16]
    358c:	ldr	r1, [r3, #4]
    3590:	cmp	r2, #0
    3594:	bne	35cc <InflateFieldNames+0x108>
    3598:	cmp	r1, #0
    359c:	beq	3568 <InflateFieldNames+0xa4>
    35a0:	mov	r2, #1
    35a4:	rsb	r1, r1, #0
    35a8:	ldr	r0, [r6]
    35ac:	bl	1714 <fseek@plt>
    35b0:	ldr	r3, [r5, #52]	; 0x34
    35b4:	ldr	r3, [r3, #12]
    35b8:	ldr	r2, [r3, #4]
    35bc:	sub	r4, r4, r2
    35c0:	mov	r2, #0
    35c4:	str	r2, [r3, #4]
    35c8:	b	3568 <InflateFieldNames+0xa4>
    35cc:	cmp	r1, #0
    35d0:	cmpeq	sl, #1
    35d4:	bne	3598 <InflateFieldNames+0xd4>
    35d8:	mov	r2, #1
    35dc:	mov	r1, r2
    35e0:	stm	r3, {r7, r8}
    35e4:	mov	r0, r7
    35e8:	ldr	r3, [r6]
    35ec:	bl	1588 <fread@plt>
    35f0:	ldr	r3, [r5, #52]	; 0x34
    35f4:	mov	r1, r9
    35f8:	mov	sl, r0
    35fc:	add	r4, r4, r0
    3600:	ldr	r0, [r3, #12]
    3604:	bl	14c8 <inflate@plt>
    3608:	cmp	r0, #0
    360c:	beq	3580 <InflateFieldNames+0xbc>
    3610:	cmp	r0, #2
    3614:	mvneq	r0, #2
    3618:	bl	1558 <zError@plt>
    361c:	mov	r1, r0
    3620:	ldr	r0, [pc, #8]	; 3630 <InflateFieldNames+0x16c>
    3624:	add	r0, pc, r0
    3628:	b	3564 <InflateFieldNames+0xa0>
    362c:	.word	0x0003d152
    3630:	.word	0x0003d08e

00003634 <ReadDoubleData.part.0>:
    3634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3638:	sub	sp, sp, #2064	; 0x810
    363c:	sub	sp, sp, #4
    3640:	mov	r6, r0
    3644:	mov	r0, r2
    3648:	mov	r5, r2
    364c:	mov	fp, r1
    3650:	mov	r4, r3
    3654:	bl	1600 <Mat_SizeOf@plt>
    3658:	sub	r5, r5, #1
    365c:	mov	sl, r0
    3660:	cmp	r5, #12
    3664:	addls	pc, pc, r5, lsl #2
    3668:	b	4820 <ReadDoubleData.part.0+0x11ec>
    366c:	b	4618 <ReadDoubleData.part.0+0xfe4>
    3670:	b	471c <ReadDoubleData.part.0+0x10e8>
    3674:	b	41b0 <ReadDoubleData.part.0+0xb7c>
    3678:	b	43e4 <ReadDoubleData.part.0+0xdb0>
    367c:	b	3d58 <ReadDoubleData.part.0+0x724>
    3680:	b	3f84 <ReadDoubleData.part.0+0x950>
    3684:	b	36f0 <ReadDoubleData.part.0+0xbc>
    3688:	b	4820 <ReadDoubleData.part.0+0x11ec>
    368c:	b	36a0 <ReadDoubleData.part.0+0x6c>
    3690:	b	4820 <ReadDoubleData.part.0+0x11ec>
    3694:	b	4820 <ReadDoubleData.part.0+0x11ec>
    3698:	b	3908 <ReadDoubleData.part.0+0x2d4>
    369c:	b	3b30 <ReadDoubleData.part.0+0x4fc>
    36a0:	ldr	r3, [r6]
    36a4:	mov	r1, r0
    36a8:	mov	r2, r4
    36ac:	mov	r0, fp
    36b0:	bl	1588 <fread@plt>
    36b4:	ldr	r3, [r6, #20]
    36b8:	cmp	r3, #0
    36bc:	movne	r6, #0
    36c0:	mov	r5, r0
    36c4:	bne	36e4 <ReadDoubleData.part.0+0xb0>
    36c8:	mul	r0, sl, r5
    36cc:	add	sp, sp, #2064	; 0x810
    36d0:	add	sp, sp, #4
    36d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36d8:	add	r0, fp, r6, lsl #3
    36dc:	bl	1b88 <Mat_doubleSwap>
    36e0:	add	r6, r6, #1
    36e4:	cmp	r4, r6
    36e8:	bgt	36d8 <ReadDoubleData.part.0+0xa4>
    36ec:	b	36c8 <ReadDoubleData.part.0+0x94>
    36f0:	ldr	r7, [r6, #20]
    36f4:	cmp	r7, #0
    36f8:	beq	380c <ReadDoubleData.part.0+0x1d8>
    36fc:	cmp	r4, #256	; 0x100
    3700:	ble	3778 <ReadDoubleData.part.0+0x144>
    3704:	mov	r7, #0
    3708:	mov	r5, r7
    370c:	sub	r9, r4, #256	; 0x100
    3710:	add	r8, sp, #16
    3714:	cmp	r7, r9
    3718:	blt	37b8 <ReadDoubleData.part.0+0x184>
    371c:	sub	r7, r4, #1
    3720:	lsr	r7, r7, #8
    3724:	lsl	r3, r7, #8
    3728:	cmp	r4, r3
    372c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3730:	sub	r4, r4, r3
    3734:	add	r8, sp, #16
    3738:	ldr	r3, [r6]
    373c:	mov	r2, r4
    3740:	mov	r1, sl
    3744:	mov	r0, r8
    3748:	bl	1588 <fread@plt>
    374c:	add	r7, fp, r7, lsl #11
    3750:	mov	r6, #0
    3754:	add	r5, r5, r0
    3758:	cmp	r4, r6
    375c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3760:	add	r0, r8, r6, lsl #2
    3764:	bl	1b2c <Mat_floatSwap>
    3768:	add	r6, r6, #1
    376c:	vcvt.f64.f32	d0, s0
    3770:	vstmia	r7!, {d0}
    3774:	b	3758 <ReadDoubleData.part.0+0x124>
    3778:	add	r8, sp, #16
    377c:	ldr	r3, [r6]
    3780:	mov	r1, r0
    3784:	mov	r2, r4
    3788:	mov	r0, r8
    378c:	bl	1588 <fread@plt>
    3790:	mov	r6, #0
    3794:	mov	r5, r0
    3798:	cmp	r4, r6
    379c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    37a0:	add	r0, r8, r6, lsl #2
    37a4:	bl	1b2c <Mat_floatSwap>
    37a8:	add	r6, r6, #1
    37ac:	vcvt.f64.f32	d0, s0
    37b0:	vstmia	fp!, {d0}
    37b4:	b	3798 <ReadDoubleData.part.0+0x164>
    37b8:	ldr	r3, [r6]
    37bc:	mov	r2, #256	; 0x100
    37c0:	mov	r1, sl
    37c4:	mov	r0, r8
    37c8:	bl	1588 <fread@plt>
    37cc:	add	r3, fp, r7, lsl #3
    37d0:	mov	r2, #0
    37d4:	add	r5, r5, r0
    37d8:	add	r0, r8, r2
    37dc:	str	r3, [sp, #8]
    37e0:	str	r2, [sp, #4]
    37e4:	bl	1b2c <Mat_floatSwap>
    37e8:	ldr	r2, [sp, #4]
    37ec:	ldr	r3, [sp, #8]
    37f0:	add	r2, r2, #4
    37f4:	cmp	r2, #1024	; 0x400
    37f8:	vcvt.f64.f32	d0, s0
    37fc:	vstmia	r3!, {d0}
    3800:	bne	37d8 <ReadDoubleData.part.0+0x1a4>
    3804:	add	r7, r7, #256	; 0x100
    3808:	b	3714 <ReadDoubleData.part.0+0xe0>
    380c:	cmp	r4, #256	; 0x100
    3810:	ble	3890 <ReadDoubleData.part.0+0x25c>
    3814:	sub	r3, r4, #256	; 0x100
    3818:	mov	r8, fp
    381c:	mov	r9, r7
    3820:	mov	r5, r7
    3824:	str	r3, [sp, #8]
    3828:	add	r3, sp, #16
    382c:	str	r3, [sp, #4]
    3830:	ldr	r3, [sp, #8]
    3834:	cmp	r9, r3
    3838:	blt	38cc <ReadDoubleData.part.0+0x298>
    383c:	sub	r8, r4, #1
    3840:	lsr	r8, r8, #8
    3844:	lsl	r3, r8, #8
    3848:	cmp	r4, r3
    384c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3850:	sub	r4, r4, r3
    3854:	ldr	r3, [r6]
    3858:	add	r6, sp, #16
    385c:	mov	r2, r4
    3860:	mov	r1, sl
    3864:	mov	r0, r6
    3868:	bl	1588 <fread@plt>
    386c:	add	r8, fp, r8, lsl #11
    3870:	add	r5, r5, r0
    3874:	cmp	r4, r7
    3878:	ble	36c8 <ReadDoubleData.part.0+0x94>
    387c:	vldmia	r6!, {s14}
    3880:	add	r7, r7, #1
    3884:	vcvt.f64.f32	d7, s14
    3888:	vstmia	r8!, {d7}
    388c:	b	3874 <ReadDoubleData.part.0+0x240>
    3890:	ldr	r3, [r6]
    3894:	add	r6, sp, #16
    3898:	mov	r1, r0
    389c:	mov	r2, r4
    38a0:	mov	r0, r6
    38a4:	bl	1588 <fread@plt>
    38a8:	mov	r3, fp
    38ac:	mov	r5, r0
    38b0:	cmp	r4, r7
    38b4:	ble	36c8 <ReadDoubleData.part.0+0x94>
    38b8:	vldmia	r6!, {s14}
    38bc:	add	r7, r7, #1
    38c0:	vcvt.f64.f32	d7, s14
    38c4:	vstmia	r3!, {d7}
    38c8:	b	38b0 <ReadDoubleData.part.0+0x27c>
    38cc:	ldr	r3, [r6]
    38d0:	mov	r2, #256	; 0x100
    38d4:	mov	r1, sl
    38d8:	ldr	r0, [sp, #4]
    38dc:	bl	1588 <fread@plt>
    38e0:	ldr	r3, [sp, #4]
    38e4:	add	r2, r8, #2048	; 0x800
    38e8:	add	r5, r5, r0
    38ec:	vldmia	r3!, {s14}
    38f0:	vcvt.f64.f32	d7, s14
    38f4:	vstmia	r8!, {d7}
    38f8:	cmp	r8, r2
    38fc:	bne	38ec <ReadDoubleData.part.0+0x2b8>
    3900:	add	r9, r9, #256	; 0x100
    3904:	b	3830 <ReadDoubleData.part.0+0x1fc>
    3908:	ldr	r7, [r6, #20]
    390c:	cmp	r7, #0
    3910:	beq	3a24 <ReadDoubleData.part.0+0x3f0>
    3914:	cmp	r4, #256	; 0x100
    3918:	ble	3990 <ReadDoubleData.part.0+0x35c>
    391c:	mov	r7, #0
    3920:	mov	r5, r7
    3924:	sub	r9, r4, #256	; 0x100
    3928:	add	r8, sp, #16
    392c:	cmp	r7, r9
    3930:	blt	39d0 <ReadDoubleData.part.0+0x39c>
    3934:	sub	r7, r4, #1
    3938:	lsr	r7, r7, #8
    393c:	lsl	r3, r7, #8
    3940:	cmp	r4, r3
    3944:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3948:	sub	r4, r4, r3
    394c:	add	r8, sp, #16
    3950:	ldr	r3, [r6]
    3954:	mov	r2, r4
    3958:	mov	r1, sl
    395c:	mov	r0, r8
    3960:	bl	1588 <fread@plt>
    3964:	add	r7, fp, r7, lsl #11
    3968:	mov	r6, #0
    396c:	add	r5, r5, r0
    3970:	cmp	r4, r6
    3974:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3978:	add	r0, r8, r6, lsl #3
    397c:	bl	18bc <Mat_int64Swap>
    3980:	bl	40090 <__aeabi_l2d>
    3984:	add	r6, r6, #1
    3988:	strd	r0, [r7], #8
    398c:	b	3970 <ReadDoubleData.part.0+0x33c>
    3990:	add	r8, sp, #16
    3994:	ldr	r3, [r6]
    3998:	mov	r1, r0
    399c:	mov	r2, r4
    39a0:	mov	r0, r8
    39a4:	bl	1588 <fread@plt>
    39a8:	mov	r6, #0
    39ac:	mov	r5, r0
    39b0:	cmp	r4, r6
    39b4:	ble	36c8 <ReadDoubleData.part.0+0x94>
    39b8:	add	r0, r8, r6, lsl #3
    39bc:	bl	18bc <Mat_int64Swap>
    39c0:	bl	40090 <__aeabi_l2d>
    39c4:	add	r6, r6, #1
    39c8:	strd	r0, [fp], #8
    39cc:	b	39b0 <ReadDoubleData.part.0+0x37c>
    39d0:	ldr	r3, [r6]
    39d4:	mov	r2, #256	; 0x100
    39d8:	mov	r1, sl
    39dc:	mov	r0, r8
    39e0:	bl	1588 <fread@plt>
    39e4:	add	r3, fp, r7, lsl #3
    39e8:	mov	r2, #0
    39ec:	add	r5, r5, r0
    39f0:	add	r0, r8, r2
    39f4:	str	r3, [sp, #8]
    39f8:	str	r2, [sp, #4]
    39fc:	bl	18bc <Mat_int64Swap>
    3a00:	bl	40090 <__aeabi_l2d>
    3a04:	ldr	r2, [sp, #4]
    3a08:	ldr	r3, [sp, #8]
    3a0c:	add	r2, r2, #8
    3a10:	cmp	r2, #2048	; 0x800
    3a14:	strd	r0, [r3], #8
    3a18:	bne	39f0 <ReadDoubleData.part.0+0x3bc>
    3a1c:	add	r7, r7, #256	; 0x100
    3a20:	b	392c <ReadDoubleData.part.0+0x2f8>
    3a24:	cmp	r4, #256	; 0x100
    3a28:	ble	3aa4 <ReadDoubleData.part.0+0x470>
    3a2c:	mov	r8, r7
    3a30:	mov	r5, r7
    3a34:	add	r9, sp, #16
    3a38:	sub	r3, r4, #256	; 0x100
    3a3c:	str	r3, [sp, #4]
    3a40:	ldr	r3, [sp, #4]
    3a44:	cmp	r8, r3
    3a48:	blt	3ae0 <ReadDoubleData.part.0+0x4ac>
    3a4c:	sub	r8, r4, #1
    3a50:	lsr	r8, r8, #8
    3a54:	lsl	r3, r8, #8
    3a58:	cmp	r4, r3
    3a5c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3a60:	sub	r4, r4, r3
    3a64:	add	r9, sp, #16
    3a68:	ldr	r3, [r6]
    3a6c:	mov	r2, r4
    3a70:	mov	r1, sl
    3a74:	mov	r0, r9
    3a78:	bl	1588 <fread@plt>
    3a7c:	add	r8, fp, r8, lsl #11
    3a80:	add	r5, r5, r0
    3a84:	cmp	r4, r7
    3a88:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3a8c:	lsl	r3, r7, #3
    3a90:	add	r7, r7, #1
    3a94:	ldrd	r0, [r9, r3]
    3a98:	bl	40090 <__aeabi_l2d>
    3a9c:	strd	r0, [r8], #8
    3aa0:	b	3a84 <ReadDoubleData.part.0+0x450>
    3aa4:	add	r8, sp, #16
    3aa8:	mov	r1, r0
    3aac:	ldr	r3, [r6]
    3ab0:	mov	r2, r4
    3ab4:	mov	r0, r8
    3ab8:	bl	1588 <fread@plt>
    3abc:	mov	r5, r0
    3ac0:	cmp	r4, r7
    3ac4:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3ac8:	lsl	r3, r7, #3
    3acc:	add	r7, r7, #1
    3ad0:	ldrd	r0, [r8, r3]
    3ad4:	bl	40090 <__aeabi_l2d>
    3ad8:	strd	r0, [fp], #8
    3adc:	b	3ac0 <ReadDoubleData.part.0+0x48c>
    3ae0:	ldr	r3, [r6]
    3ae4:	mov	r2, #256	; 0x100
    3ae8:	mov	r1, sl
    3aec:	mov	r0, r9
    3af0:	bl	1588 <fread@plt>
    3af4:	add	r2, fp, r8, lsl #3
    3af8:	mov	r3, #0
    3afc:	add	r5, r5, r0
    3b00:	ldrd	r0, [r9, r3]
    3b04:	str	r2, [sp, #12]
    3b08:	str	r3, [sp, #8]
    3b0c:	bl	40090 <__aeabi_l2d>
    3b10:	ldr	r3, [sp, #8]
    3b14:	ldr	r2, [sp, #12]
    3b18:	add	r3, r3, #8
    3b1c:	cmp	r3, #2048	; 0x800
    3b20:	strd	r0, [r2], #8
    3b24:	bne	3b00 <ReadDoubleData.part.0+0x4cc>
    3b28:	add	r8, r8, #256	; 0x100
    3b2c:	b	3a40 <ReadDoubleData.part.0+0x40c>
    3b30:	ldr	r7, [r6, #20]
    3b34:	cmp	r7, #0
    3b38:	beq	3c4c <ReadDoubleData.part.0+0x618>
    3b3c:	cmp	r4, #256	; 0x100
    3b40:	ble	3bb8 <ReadDoubleData.part.0+0x584>
    3b44:	mov	r7, #0
    3b48:	mov	r5, r7
    3b4c:	sub	r9, r4, #256	; 0x100
    3b50:	add	r8, sp, #16
    3b54:	cmp	r7, r9
    3b58:	blt	3bf8 <ReadDoubleData.part.0+0x5c4>
    3b5c:	sub	r7, r4, #1
    3b60:	lsr	r7, r7, #8
    3b64:	lsl	r3, r7, #8
    3b68:	cmp	r4, r3
    3b6c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3b70:	sub	r4, r4, r3
    3b74:	add	r8, sp, #16
    3b78:	ldr	r3, [r6]
    3b7c:	mov	r2, r4
    3b80:	mov	r1, sl
    3b84:	mov	r0, r8
    3b88:	bl	1588 <fread@plt>
    3b8c:	add	r7, fp, r7, lsl #11
    3b90:	mov	r6, #0
    3b94:	add	r5, r5, r0
    3b98:	cmp	r4, r6
    3b9c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3ba0:	add	r0, r8, r6, lsl #3
    3ba4:	bl	1980 <Mat_uint64Swap>
    3ba8:	bl	4007c <__aeabi_ul2d>
    3bac:	add	r6, r6, #1
    3bb0:	strd	r0, [r7], #8
    3bb4:	b	3b98 <ReadDoubleData.part.0+0x564>
    3bb8:	add	r8, sp, #16
    3bbc:	ldr	r3, [r6]
    3bc0:	mov	r1, r0
    3bc4:	mov	r2, r4
    3bc8:	mov	r0, r8
    3bcc:	bl	1588 <fread@plt>
    3bd0:	mov	r6, #0
    3bd4:	mov	r5, r0
    3bd8:	cmp	r4, r6
    3bdc:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3be0:	add	r0, r8, r6, lsl #3
    3be4:	bl	1980 <Mat_uint64Swap>
    3be8:	bl	4007c <__aeabi_ul2d>
    3bec:	add	r6, r6, #1
    3bf0:	strd	r0, [fp], #8
    3bf4:	b	3bd8 <ReadDoubleData.part.0+0x5a4>
    3bf8:	ldr	r3, [r6]
    3bfc:	mov	r2, #256	; 0x100
    3c00:	mov	r1, sl
    3c04:	mov	r0, r8
    3c08:	bl	1588 <fread@plt>
    3c0c:	add	r3, fp, r7, lsl #3
    3c10:	mov	r2, #0
    3c14:	add	r5, r5, r0
    3c18:	add	r0, r8, r2
    3c1c:	str	r3, [sp, #8]
    3c20:	str	r2, [sp, #4]
    3c24:	bl	1980 <Mat_uint64Swap>
    3c28:	bl	4007c <__aeabi_ul2d>
    3c2c:	ldr	r2, [sp, #4]
    3c30:	ldr	r3, [sp, #8]
    3c34:	add	r2, r2, #8
    3c38:	cmp	r2, #2048	; 0x800
    3c3c:	strd	r0, [r3], #8
    3c40:	bne	3c18 <ReadDoubleData.part.0+0x5e4>
    3c44:	add	r7, r7, #256	; 0x100
    3c48:	b	3b54 <ReadDoubleData.part.0+0x520>
    3c4c:	cmp	r4, #256	; 0x100
    3c50:	ble	3ccc <ReadDoubleData.part.0+0x698>
    3c54:	mov	r8, r7
    3c58:	mov	r5, r7
    3c5c:	add	r9, sp, #16
    3c60:	sub	r3, r4, #256	; 0x100
    3c64:	str	r3, [sp, #4]
    3c68:	ldr	r3, [sp, #4]
    3c6c:	cmp	r8, r3
    3c70:	blt	3d08 <ReadDoubleData.part.0+0x6d4>
    3c74:	sub	r8, r4, #1
    3c78:	lsr	r8, r8, #8
    3c7c:	lsl	r3, r8, #8
    3c80:	cmp	r4, r3
    3c84:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3c88:	sub	r4, r4, r3
    3c8c:	add	r9, sp, #16
    3c90:	ldr	r3, [r6]
    3c94:	mov	r2, r4
    3c98:	mov	r1, sl
    3c9c:	mov	r0, r9
    3ca0:	bl	1588 <fread@plt>
    3ca4:	add	r8, fp, r8, lsl #11
    3ca8:	add	r5, r5, r0
    3cac:	cmp	r4, r7
    3cb0:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3cb4:	lsl	r3, r7, #3
    3cb8:	add	r7, r7, #1
    3cbc:	ldrd	r0, [r9, r3]
    3cc0:	bl	4007c <__aeabi_ul2d>
    3cc4:	strd	r0, [r8], #8
    3cc8:	b	3cac <ReadDoubleData.part.0+0x678>
    3ccc:	add	r8, sp, #16
    3cd0:	mov	r1, r0
    3cd4:	ldr	r3, [r6]
    3cd8:	mov	r2, r4
    3cdc:	mov	r0, r8
    3ce0:	bl	1588 <fread@plt>
    3ce4:	mov	r5, r0
    3ce8:	cmp	r4, r7
    3cec:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3cf0:	lsl	r3, r7, #3
    3cf4:	add	r7, r7, #1
    3cf8:	ldrd	r0, [r8, r3]
    3cfc:	bl	4007c <__aeabi_ul2d>
    3d00:	strd	r0, [fp], #8
    3d04:	b	3ce8 <ReadDoubleData.part.0+0x6b4>
    3d08:	ldr	r3, [r6]
    3d0c:	mov	r2, #256	; 0x100
    3d10:	mov	r1, sl
    3d14:	mov	r0, r9
    3d18:	bl	1588 <fread@plt>
    3d1c:	add	r2, fp, r8, lsl #3
    3d20:	mov	r3, #0
    3d24:	add	r5, r5, r0
    3d28:	ldrd	r0, [r9, r3]
    3d2c:	str	r2, [sp, #12]
    3d30:	str	r3, [sp, #8]
    3d34:	bl	4007c <__aeabi_ul2d>
    3d38:	ldr	r3, [sp, #8]
    3d3c:	ldr	r2, [sp, #12]
    3d40:	add	r3, r3, #8
    3d44:	cmp	r3, #2048	; 0x800
    3d48:	strd	r0, [r2], #8
    3d4c:	bne	3d28 <ReadDoubleData.part.0+0x6f4>
    3d50:	add	r8, r8, #256	; 0x100
    3d54:	b	3c68 <ReadDoubleData.part.0+0x634>
    3d58:	ldr	r7, [r6, #20]
    3d5c:	cmp	r7, #0
    3d60:	beq	3e80 <ReadDoubleData.part.0+0x84c>
    3d64:	cmp	r4, #256	; 0x100
    3d68:	ble	3de4 <ReadDoubleData.part.0+0x7b0>
    3d6c:	mov	r7, #0
    3d70:	mov	r5, r7
    3d74:	sub	r9, r4, #256	; 0x100
    3d78:	add	r8, sp, #16
    3d7c:	cmp	r7, r9
    3d80:	blt	3e28 <ReadDoubleData.part.0+0x7f4>
    3d84:	sub	r7, r4, #1
    3d88:	lsr	r7, r7, #8
    3d8c:	lsl	r3, r7, #8
    3d90:	cmp	r4, r3
    3d94:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3d98:	sub	r4, r4, r3
    3d9c:	add	r8, sp, #16
    3da0:	ldr	r3, [r6]
    3da4:	mov	r2, r4
    3da8:	mov	r1, sl
    3dac:	mov	r0, r8
    3db0:	bl	1588 <fread@plt>
    3db4:	add	r7, fp, r7, lsl #11
    3db8:	mov	r6, #0
    3dbc:	add	r5, r5, r0
    3dc0:	cmp	r4, r6
    3dc4:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3dc8:	add	r0, r8, r6, lsl #2
    3dcc:	bl	1a18 <Mat_int32Swap>
    3dd0:	add	r6, r6, #1
    3dd4:	vmov	s15, r0
    3dd8:	vcvt.f64.s32	d7, s15
    3ddc:	vstmia	r7!, {d7}
    3de0:	b	3dc0 <ReadDoubleData.part.0+0x78c>
    3de4:	add	r8, sp, #16
    3de8:	ldr	r3, [r6]
    3dec:	mov	r1, r0
    3df0:	mov	r2, r4
    3df4:	mov	r0, r8
    3df8:	bl	1588 <fread@plt>
    3dfc:	mov	r6, #0
    3e00:	mov	r5, r0
    3e04:	cmp	r4, r6
    3e08:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3e0c:	add	r0, r8, r6, lsl #2
    3e10:	bl	1a18 <Mat_int32Swap>
    3e14:	add	r6, r6, #1
    3e18:	vmov	s15, r0
    3e1c:	vcvt.f64.s32	d7, s15
    3e20:	vstmia	fp!, {d7}
    3e24:	b	3e04 <ReadDoubleData.part.0+0x7d0>
    3e28:	ldr	r3, [r6]
    3e2c:	mov	r2, #256	; 0x100
    3e30:	mov	r1, sl
    3e34:	mov	r0, r8
    3e38:	bl	1588 <fread@plt>
    3e3c:	add	r3, fp, r7, lsl #3
    3e40:	mov	r2, #0
    3e44:	add	r5, r5, r0
    3e48:	add	r0, r8, r2
    3e4c:	str	r3, [sp, #8]
    3e50:	str	r2, [sp, #4]
    3e54:	bl	1a18 <Mat_int32Swap>
    3e58:	ldr	r2, [sp, #4]
    3e5c:	ldr	r3, [sp, #8]
    3e60:	add	r2, r2, #4
    3e64:	cmp	r2, #1024	; 0x400
    3e68:	vmov	s15, r0
    3e6c:	vcvt.f64.s32	d7, s15
    3e70:	vstmia	r3!, {d7}
    3e74:	bne	3e48 <ReadDoubleData.part.0+0x814>
    3e78:	add	r7, r7, #256	; 0x100
    3e7c:	b	3d7c <ReadDoubleData.part.0+0x748>
    3e80:	cmp	r4, #256	; 0x100
    3e84:	ble	3f00 <ReadDoubleData.part.0+0x8cc>
    3e88:	mov	r8, r7
    3e8c:	mov	r5, r7
    3e90:	add	r9, sp, #16
    3e94:	sub	r3, r4, #256	; 0x100
    3e98:	str	r3, [sp, #4]
    3e9c:	ldr	r3, [sp, #4]
    3ea0:	cmp	r8, r3
    3ea4:	blt	3f40 <ReadDoubleData.part.0+0x90c>
    3ea8:	sub	r8, r4, #1
    3eac:	lsr	r8, r8, #8
    3eb0:	lsl	r3, r8, #8
    3eb4:	cmp	r4, r3
    3eb8:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3ebc:	sub	r4, r4, r3
    3ec0:	add	r9, sp, #16
    3ec4:	ldr	r3, [r6]
    3ec8:	mov	r2, r4
    3ecc:	mov	r1, sl
    3ed0:	mov	r0, r9
    3ed4:	bl	1588 <fread@plt>
    3ed8:	add	r8, fp, r8, lsl #11
    3edc:	add	r5, r5, r0
    3ee0:	cmp	r4, r7
    3ee4:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3ee8:	ldr	r3, [r9, r7, lsl #2]
    3eec:	add	r7, r7, #1
    3ef0:	vmov	s15, r3
    3ef4:	vcvt.f64.s32	d7, s15
    3ef8:	vstmia	r8!, {d7}
    3efc:	b	3ee0 <ReadDoubleData.part.0+0x8ac>
    3f00:	add	r8, sp, #16
    3f04:	ldr	r3, [r6]
    3f08:	mov	r1, r0
    3f0c:	mov	r2, r4
    3f10:	mov	r0, r8
    3f14:	bl	1588 <fread@plt>
    3f18:	mov	r3, fp
    3f1c:	mov	r5, r0
    3f20:	cmp	r4, r7
    3f24:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3f28:	ldr	r2, [r8, r7, lsl #2]
    3f2c:	add	r7, r7, #1
    3f30:	vmov	s15, r2
    3f34:	vcvt.f64.s32	d7, s15
    3f38:	vstmia	r3!, {d7}
    3f3c:	b	3f20 <ReadDoubleData.part.0+0x8ec>
    3f40:	ldr	r3, [r6]
    3f44:	mov	r2, #256	; 0x100
    3f48:	mov	r1, sl
    3f4c:	mov	r0, r9
    3f50:	bl	1588 <fread@plt>
    3f54:	add	r2, fp, r8, lsl #3
    3f58:	mov	r3, r7
    3f5c:	add	r5, r5, r0
    3f60:	ldr	r1, [r9, r3, lsl #2]
    3f64:	add	r3, r3, #1
    3f68:	cmp	r3, #256	; 0x100
    3f6c:	vmov	s15, r1
    3f70:	vcvt.f64.s32	d7, s15
    3f74:	vstmia	r2!, {d7}
    3f78:	bne	3f60 <ReadDoubleData.part.0+0x92c>
    3f7c:	add	r8, r8, #256	; 0x100
    3f80:	b	3e9c <ReadDoubleData.part.0+0x868>
    3f84:	ldr	r7, [r6, #20]
    3f88:	cmp	r7, #0
    3f8c:	beq	40ac <ReadDoubleData.part.0+0xa78>
    3f90:	cmp	r4, #256	; 0x100
    3f94:	ble	4010 <ReadDoubleData.part.0+0x9dc>
    3f98:	mov	r7, #0
    3f9c:	mov	r5, r7
    3fa0:	sub	r9, r4, #256	; 0x100
    3fa4:	add	r8, sp, #16
    3fa8:	cmp	r7, r9
    3fac:	blt	4054 <ReadDoubleData.part.0+0xa20>
    3fb0:	sub	r7, r4, #1
    3fb4:	lsr	r7, r7, #8
    3fb8:	lsl	r3, r7, #8
    3fbc:	cmp	r4, r3
    3fc0:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3fc4:	sub	r4, r4, r3
    3fc8:	add	r8, sp, #16
    3fcc:	ldr	r3, [r6]
    3fd0:	mov	r2, r4
    3fd4:	mov	r1, sl
    3fd8:	mov	r0, r8
    3fdc:	bl	1588 <fread@plt>
    3fe0:	add	r7, fp, r7, lsl #11
    3fe4:	mov	r6, #0
    3fe8:	add	r5, r5, r0
    3fec:	cmp	r4, r6
    3ff0:	ble	36c8 <ReadDoubleData.part.0+0x94>
    3ff4:	add	r0, r8, r6, lsl #2
    3ff8:	bl	1a80 <Mat_uint32Swap>
    3ffc:	add	r6, r6, #1
    4000:	vmov	s15, r0
    4004:	vcvt.f64.u32	d7, s15
    4008:	vstmia	r7!, {d7}
    400c:	b	3fec <ReadDoubleData.part.0+0x9b8>
    4010:	add	r8, sp, #16
    4014:	ldr	r3, [r6]
    4018:	mov	r1, r0
    401c:	mov	r2, r4
    4020:	mov	r0, r8
    4024:	bl	1588 <fread@plt>
    4028:	mov	r6, #0
    402c:	mov	r5, r0
    4030:	cmp	r4, r6
    4034:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4038:	add	r0, r8, r6, lsl #2
    403c:	bl	1a80 <Mat_uint32Swap>
    4040:	add	r6, r6, #1
    4044:	vmov	s15, r0
    4048:	vcvt.f64.u32	d7, s15
    404c:	vstmia	fp!, {d7}
    4050:	b	4030 <ReadDoubleData.part.0+0x9fc>
    4054:	ldr	r3, [r6]
    4058:	mov	r2, #256	; 0x100
    405c:	mov	r1, sl
    4060:	mov	r0, r8
    4064:	bl	1588 <fread@plt>
    4068:	add	r3, fp, r7, lsl #3
    406c:	mov	r2, #0
    4070:	add	r5, r5, r0
    4074:	add	r0, r8, r2
    4078:	str	r3, [sp, #8]
    407c:	str	r2, [sp, #4]
    4080:	bl	1a80 <Mat_uint32Swap>
    4084:	ldr	r2, [sp, #4]
    4088:	ldr	r3, [sp, #8]
    408c:	add	r2, r2, #4
    4090:	cmp	r2, #1024	; 0x400
    4094:	vmov	s15, r0
    4098:	vcvt.f64.u32	d7, s15
    409c:	vstmia	r3!, {d7}
    40a0:	bne	4074 <ReadDoubleData.part.0+0xa40>
    40a4:	add	r7, r7, #256	; 0x100
    40a8:	b	3fa8 <ReadDoubleData.part.0+0x974>
    40ac:	cmp	r4, #256	; 0x100
    40b0:	ble	412c <ReadDoubleData.part.0+0xaf8>
    40b4:	mov	r8, r7
    40b8:	mov	r5, r7
    40bc:	add	r9, sp, #16
    40c0:	sub	r3, r4, #256	; 0x100
    40c4:	str	r3, [sp, #4]
    40c8:	ldr	r3, [sp, #4]
    40cc:	cmp	r8, r3
    40d0:	blt	416c <ReadDoubleData.part.0+0xb38>
    40d4:	sub	r8, r4, #1
    40d8:	lsr	r8, r8, #8
    40dc:	lsl	r3, r8, #8
    40e0:	cmp	r4, r3
    40e4:	ble	36c8 <ReadDoubleData.part.0+0x94>
    40e8:	sub	r4, r4, r3
    40ec:	add	r9, sp, #16
    40f0:	ldr	r3, [r6]
    40f4:	mov	r2, r4
    40f8:	mov	r1, sl
    40fc:	mov	r0, r9
    4100:	bl	1588 <fread@plt>
    4104:	add	r8, fp, r8, lsl #11
    4108:	add	r5, r5, r0
    410c:	cmp	r4, r7
    4110:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4114:	ldr	r3, [r9, r7, lsl #2]
    4118:	add	r7, r7, #1
    411c:	vmov	s15, r3
    4120:	vcvt.f64.u32	d7, s15
    4124:	vstmia	r8!, {d7}
    4128:	b	410c <ReadDoubleData.part.0+0xad8>
    412c:	add	r8, sp, #16
    4130:	ldr	r3, [r6]
    4134:	mov	r1, r0
    4138:	mov	r2, r4
    413c:	mov	r0, r8
    4140:	bl	1588 <fread@plt>
    4144:	mov	r3, fp
    4148:	mov	r5, r0
    414c:	cmp	r4, r7
    4150:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4154:	ldr	r2, [r8, r7, lsl #2]
    4158:	add	r7, r7, #1
    415c:	vmov	s15, r2
    4160:	vcvt.f64.u32	d7, s15
    4164:	vstmia	r3!, {d7}
    4168:	b	414c <ReadDoubleData.part.0+0xb18>
    416c:	ldr	r3, [r6]
    4170:	mov	r2, #256	; 0x100
    4174:	mov	r1, sl
    4178:	mov	r0, r9
    417c:	bl	1588 <fread@plt>
    4180:	add	r2, fp, r8, lsl #3
    4184:	mov	r3, r7
    4188:	add	r5, r5, r0
    418c:	ldr	r1, [r9, r3, lsl #2]
    4190:	add	r3, r3, #1
    4194:	cmp	r3, #256	; 0x100
    4198:	vmov	s15, r1
    419c:	vcvt.f64.u32	d7, s15
    41a0:	vstmia	r2!, {d7}
    41a4:	bne	418c <ReadDoubleData.part.0+0xb58>
    41a8:	add	r8, r8, #256	; 0x100
    41ac:	b	40c8 <ReadDoubleData.part.0+0xa94>
    41b0:	ldr	r7, [r6, #20]
    41b4:	cmp	r7, #0
    41b8:	beq	42d8 <ReadDoubleData.part.0+0xca4>
    41bc:	cmp	r4, #256	; 0x100
    41c0:	ble	423c <ReadDoubleData.part.0+0xc08>
    41c4:	mov	r7, #0
    41c8:	mov	r5, r7
    41cc:	sub	r9, r4, #256	; 0x100
    41d0:	add	r8, sp, #16
    41d4:	cmp	r7, r9
    41d8:	blt	4280 <ReadDoubleData.part.0+0xc4c>
    41dc:	sub	r7, r4, #1
    41e0:	lsr	r7, r7, #8
    41e4:	lsl	r3, r7, #8
    41e8:	cmp	r4, r3
    41ec:	ble	36c8 <ReadDoubleData.part.0+0x94>
    41f0:	sub	r4, r4, r3
    41f4:	add	r8, sp, #16
    41f8:	ldr	r3, [r6]
    41fc:	mov	r2, r4
    4200:	mov	r1, sl
    4204:	mov	r0, r8
    4208:	bl	1588 <fread@plt>
    420c:	add	r7, fp, r7, lsl #11
    4210:	mov	r6, #0
    4214:	add	r5, r5, r0
    4218:	cmp	r4, r6
    421c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4220:	add	r0, r8, r6, lsl #1
    4224:	bl	1adc <Mat_int16Swap>
    4228:	add	r6, r6, #1
    422c:	vmov	s15, r0
    4230:	vcvt.f64.s32	d7, s15
    4234:	vstmia	r7!, {d7}
    4238:	b	4218 <ReadDoubleData.part.0+0xbe4>
    423c:	add	r8, sp, #16
    4240:	ldr	r3, [r6]
    4244:	mov	r1, r0
    4248:	mov	r2, r4
    424c:	mov	r0, r8
    4250:	bl	1588 <fread@plt>
    4254:	mov	r6, #0
    4258:	mov	r5, r0
    425c:	cmp	r4, r6
    4260:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4264:	add	r0, r8, r6, lsl #1
    4268:	bl	1adc <Mat_int16Swap>
    426c:	add	r6, r6, #1
    4270:	vmov	s15, r0
    4274:	vcvt.f64.s32	d7, s15
    4278:	vstmia	fp!, {d7}
    427c:	b	425c <ReadDoubleData.part.0+0xc28>
    4280:	ldr	r3, [r6]
    4284:	mov	r2, #256	; 0x100
    4288:	mov	r1, sl
    428c:	mov	r0, r8
    4290:	bl	1588 <fread@plt>
    4294:	add	r3, fp, r7, lsl #3
    4298:	mov	r2, #0
    429c:	add	r5, r5, r0
    42a0:	add	r0, r8, r2
    42a4:	str	r3, [sp, #8]
    42a8:	str	r2, [sp, #4]
    42ac:	bl	1adc <Mat_int16Swap>
    42b0:	ldr	r2, [sp, #4]
    42b4:	ldr	r3, [sp, #8]
    42b8:	add	r2, r2, #2
    42bc:	cmp	r2, #512	; 0x200
    42c0:	vmov	s15, r0
    42c4:	vcvt.f64.s32	d7, s15
    42c8:	vstmia	r3!, {d7}
    42cc:	bne	42a0 <ReadDoubleData.part.0+0xc6c>
    42d0:	add	r7, r7, #256	; 0x100
    42d4:	b	41d4 <ReadDoubleData.part.0+0xba0>
    42d8:	cmp	r4, #256	; 0x100
    42dc:	ble	435c <ReadDoubleData.part.0+0xd28>
    42e0:	mov	r8, r7
    42e4:	mov	r5, r7
    42e8:	add	r9, sp, #16
    42ec:	sub	r3, r4, #256	; 0x100
    42f0:	str	r3, [sp, #4]
    42f4:	ldr	r3, [sp, #4]
    42f8:	cmp	r8, r3
    42fc:	blt	43a0 <ReadDoubleData.part.0+0xd6c>
    4300:	sub	r8, r4, #1
    4304:	lsr	r8, r8, #8
    4308:	lsl	r3, r8, #8
    430c:	cmp	r4, r3
    4310:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4314:	sub	r4, r4, r3
    4318:	add	r9, sp, #16
    431c:	ldr	r3, [r6]
    4320:	mov	r2, r4
    4324:	mov	r1, sl
    4328:	mov	r0, r9
    432c:	bl	1588 <fread@plt>
    4330:	add	r8, fp, r8, lsl #11
    4334:	add	r5, r5, r0
    4338:	cmp	r4, r7
    433c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4340:	lsl	r3, r7, #1
    4344:	add	r7, r7, #1
    4348:	ldrsh	r3, [r9, r3]
    434c:	vmov	s14, r3
    4350:	vcvt.f64.s32	d7, s14
    4354:	vstmia	r8!, {d7}
    4358:	b	4338 <ReadDoubleData.part.0+0xd04>
    435c:	add	r8, sp, #16
    4360:	ldr	r3, [r6]
    4364:	mov	r1, r0
    4368:	mov	r2, r4
    436c:	mov	r0, r8
    4370:	bl	1588 <fread@plt>
    4374:	mov	r3, fp
    4378:	mov	r5, r0
    437c:	cmp	r4, r7
    4380:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4384:	lsl	r2, r7, #1
    4388:	add	r7, r7, #1
    438c:	ldrsh	r2, [r8, r2]
    4390:	vmov	s14, r2
    4394:	vcvt.f64.s32	d7, s14
    4398:	vstmia	r3!, {d7}
    439c:	b	437c <ReadDoubleData.part.0+0xd48>
    43a0:	ldr	r3, [r6]
    43a4:	mov	r2, #256	; 0x100
    43a8:	mov	r1, sl
    43ac:	mov	r0, r9
    43b0:	bl	1588 <fread@plt>
    43b4:	add	r2, fp, r8, lsl #3
    43b8:	mov	r3, #0
    43bc:	add	r5, r5, r0
    43c0:	ldrsh	r1, [r9, r3]
    43c4:	add	r3, r3, #2
    43c8:	cmp	r3, #512	; 0x200
    43cc:	vmov	s14, r1
    43d0:	vcvt.f64.s32	d7, s14
    43d4:	vstmia	r2!, {d7}
    43d8:	bne	43c0 <ReadDoubleData.part.0+0xd8c>
    43dc:	add	r8, r8, #256	; 0x100
    43e0:	b	42f4 <ReadDoubleData.part.0+0xcc0>
    43e4:	ldr	r7, [r6, #20]
    43e8:	cmp	r7, #0
    43ec:	beq	450c <ReadDoubleData.part.0+0xed8>
    43f0:	cmp	r4, #256	; 0x100
    43f4:	ble	4470 <ReadDoubleData.part.0+0xe3c>
    43f8:	mov	r7, #0
    43fc:	mov	r5, r7
    4400:	sub	r9, r4, #256	; 0x100
    4404:	add	r8, sp, #16
    4408:	cmp	r7, r9
    440c:	blt	44b4 <ReadDoubleData.part.0+0xe80>
    4410:	sub	r7, r4, #1
    4414:	lsr	r7, r7, #8
    4418:	lsl	r3, r7, #8
    441c:	cmp	r4, r3
    4420:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4424:	sub	r4, r4, r3
    4428:	add	r8, sp, #16
    442c:	ldr	r3, [r6]
    4430:	mov	r2, r4
    4434:	mov	r1, sl
    4438:	mov	r0, r8
    443c:	bl	1588 <fread@plt>
    4440:	add	r7, fp, r7, lsl #11
    4444:	mov	r6, #0
    4448:	add	r5, r5, r0
    444c:	cmp	r4, r6
    4450:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4454:	add	r0, r8, r6, lsl #1
    4458:	bl	1b10 <Mat_uint16Swap>
    445c:	add	r6, r6, #1
    4460:	vmov	s15, r0
    4464:	vcvt.f64.u32	d7, s15
    4468:	vstmia	r7!, {d7}
    446c:	b	444c <ReadDoubleData.part.0+0xe18>
    4470:	add	r8, sp, #16
    4474:	ldr	r3, [r6]
    4478:	mov	r1, r0
    447c:	mov	r2, r4
    4480:	mov	r0, r8
    4484:	bl	1588 <fread@plt>
    4488:	mov	r6, #0
    448c:	mov	r5, r0
    4490:	cmp	r4, r6
    4494:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4498:	add	r0, r8, r6, lsl #1
    449c:	bl	1b10 <Mat_uint16Swap>
    44a0:	add	r6, r6, #1
    44a4:	vmov	s15, r0
    44a8:	vcvt.f64.u32	d7, s15
    44ac:	vstmia	fp!, {d7}
    44b0:	b	4490 <ReadDoubleData.part.0+0xe5c>
    44b4:	ldr	r3, [r6]
    44b8:	mov	r2, #256	; 0x100
    44bc:	mov	r1, sl
    44c0:	mov	r0, r8
    44c4:	bl	1588 <fread@plt>
    44c8:	add	r3, fp, r7, lsl #3
    44cc:	mov	r2, #0
    44d0:	add	r5, r5, r0
    44d4:	add	r0, r8, r2
    44d8:	str	r3, [sp, #8]
    44dc:	str	r2, [sp, #4]
    44e0:	bl	1b10 <Mat_uint16Swap>
    44e4:	ldr	r2, [sp, #4]
    44e8:	ldr	r3, [sp, #8]
    44ec:	add	r2, r2, #2
    44f0:	cmp	r2, #512	; 0x200
    44f4:	vmov	s15, r0
    44f8:	vcvt.f64.u32	d7, s15
    44fc:	vstmia	r3!, {d7}
    4500:	bne	44d4 <ReadDoubleData.part.0+0xea0>
    4504:	add	r7, r7, #256	; 0x100
    4508:	b	4408 <ReadDoubleData.part.0+0xdd4>
    450c:	cmp	r4, #256	; 0x100
    4510:	ble	4590 <ReadDoubleData.part.0+0xf5c>
    4514:	mov	r8, r7
    4518:	mov	r5, r7
    451c:	add	r9, sp, #16
    4520:	sub	r3, r4, #256	; 0x100
    4524:	str	r3, [sp, #4]
    4528:	ldr	r3, [sp, #4]
    452c:	cmp	r8, r3
    4530:	blt	45d4 <ReadDoubleData.part.0+0xfa0>
    4534:	sub	r8, r4, #1
    4538:	lsr	r8, r8, #8
    453c:	lsl	r3, r8, #8
    4540:	cmp	r4, r3
    4544:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4548:	sub	r4, r4, r3
    454c:	add	r9, sp, #16
    4550:	ldr	r3, [r6]
    4554:	mov	r2, r4
    4558:	mov	r1, sl
    455c:	mov	r0, r9
    4560:	bl	1588 <fread@plt>
    4564:	add	r8, fp, r8, lsl #11
    4568:	add	r5, r5, r0
    456c:	cmp	r4, r7
    4570:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4574:	lsl	r3, r7, #1
    4578:	add	r7, r7, #1
    457c:	ldrh	r3, [r9, r3]
    4580:	vmov	s14, r3
    4584:	vcvt.f64.u32	d7, s14
    4588:	vstmia	r8!, {d7}
    458c:	b	456c <ReadDoubleData.part.0+0xf38>
    4590:	add	r8, sp, #16
    4594:	ldr	r3, [r6]
    4598:	mov	r1, r0
    459c:	mov	r2, r4
    45a0:	mov	r0, r8
    45a4:	bl	1588 <fread@plt>
    45a8:	mov	r3, fp
    45ac:	mov	r5, r0
    45b0:	cmp	r4, r7
    45b4:	ble	36c8 <ReadDoubleData.part.0+0x94>
    45b8:	lsl	r2, r7, #1
    45bc:	add	r7, r7, #1
    45c0:	ldrh	r2, [r8, r2]
    45c4:	vmov	s14, r2
    45c8:	vcvt.f64.u32	d7, s14
    45cc:	vstmia	r3!, {d7}
    45d0:	b	45b0 <ReadDoubleData.part.0+0xf7c>
    45d4:	ldr	r3, [r6]
    45d8:	mov	r2, #256	; 0x100
    45dc:	mov	r1, sl
    45e0:	mov	r0, r9
    45e4:	bl	1588 <fread@plt>
    45e8:	add	r2, fp, r8, lsl #3
    45ec:	mov	r3, #0
    45f0:	add	r5, r5, r0
    45f4:	ldrh	r1, [r9, r3]
    45f8:	add	r3, r3, #2
    45fc:	cmp	r3, #512	; 0x200
    4600:	vmov	s14, r1
    4604:	vcvt.f64.u32	d7, s14
    4608:	vstmia	r2!, {d7}
    460c:	bne	45f4 <ReadDoubleData.part.0+0xfc0>
    4610:	add	r8, r8, #256	; 0x100
    4614:	b	4528 <ReadDoubleData.part.0+0xef4>
    4618:	cmp	r4, #256	; 0x100
    461c:	ble	4694 <ReadDoubleData.part.0+0x1060>
    4620:	mov	r7, #0
    4624:	mov	r5, r7
    4628:	sub	r9, r4, #256	; 0x100
    462c:	add	r8, sp, #16
    4630:	cmp	r7, r9
    4634:	blt	46d8 <ReadDoubleData.part.0+0x10a4>
    4638:	sub	r7, r4, #1
    463c:	lsr	r7, r7, #8
    4640:	lsl	r3, r7, #8
    4644:	cmp	r4, r3
    4648:	ble	36c8 <ReadDoubleData.part.0+0x94>
    464c:	sub	r4, r4, r3
    4650:	add	r8, sp, #16
    4654:	ldr	r3, [r6]
    4658:	mov	r2, r4
    465c:	mov	r1, sl
    4660:	mov	r0, r8
    4664:	bl	1588 <fread@plt>
    4668:	add	r7, fp, r7, lsl #11
    466c:	mov	r3, #0
    4670:	add	r5, r5, r0
    4674:	cmp	r4, r3
    4678:	ble	36c8 <ReadDoubleData.part.0+0x94>
    467c:	ldrsb	r2, [r8, r3]
    4680:	add	r3, r3, #1
    4684:	vmov	s14, r2
    4688:	vcvt.f64.s32	d7, s14
    468c:	vstmia	r7!, {d7}
    4690:	b	4674 <ReadDoubleData.part.0+0x1040>
    4694:	add	r7, sp, #16
    4698:	ldr	r3, [r6]
    469c:	mov	r2, r4
    46a0:	mov	r1, r0
    46a4:	mov	r0, r7
    46a8:	bl	1588 <fread@plt>
    46ac:	mov	r2, fp
    46b0:	mov	r3, #0
    46b4:	mov	r5, r0
    46b8:	cmp	r4, r3
    46bc:	ble	36c8 <ReadDoubleData.part.0+0x94>
    46c0:	ldrsb	r1, [r7, r3]
    46c4:	add	r3, r3, #1
    46c8:	vmov	s14, r1
    46cc:	vcvt.f64.s32	d7, s14
    46d0:	vstmia	r2!, {d7}
    46d4:	b	46b8 <ReadDoubleData.part.0+0x1084>
    46d8:	ldr	r3, [r6]
    46dc:	mov	r2, #256	; 0x100
    46e0:	mov	r1, sl
    46e4:	mov	r0, r8
    46e8:	bl	1588 <fread@plt>
    46ec:	add	r2, fp, r7, lsl #3
    46f0:	mov	r3, #0
    46f4:	add	r5, r5, r0
    46f8:	ldrsb	r1, [r8, r3]
    46fc:	add	r3, r3, #1
    4700:	cmp	r3, #256	; 0x100
    4704:	vmov	s14, r1
    4708:	vcvt.f64.s32	d7, s14
    470c:	vstmia	r2!, {d7}
    4710:	bne	46f8 <ReadDoubleData.part.0+0x10c4>
    4714:	add	r7, r7, #256	; 0x100
    4718:	b	4630 <ReadDoubleData.part.0+0xffc>
    471c:	cmp	r4, #256	; 0x100
    4720:	ble	4798 <ReadDoubleData.part.0+0x1164>
    4724:	mov	r7, #0
    4728:	mov	r5, r7
    472c:	sub	r9, r4, #256	; 0x100
    4730:	add	r8, sp, #16
    4734:	cmp	r7, r9
    4738:	blt	47dc <ReadDoubleData.part.0+0x11a8>
    473c:	sub	r3, r4, #1
    4740:	lsr	r8, r3, #8
    4744:	lsl	r3, r8, #8
    4748:	cmp	r4, r3
    474c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4750:	sub	r4, r4, r3
    4754:	add	r7, sp, #16
    4758:	ldr	r3, [r6]
    475c:	mov	r2, r4
    4760:	mov	r1, sl
    4764:	mov	r0, r7
    4768:	bl	1588 <fread@plt>
    476c:	add	r3, fp, r8, lsl #11
    4770:	mov	r2, #0
    4774:	add	r5, r5, r0
    4778:	cmp	r4, r2
    477c:	ble	36c8 <ReadDoubleData.part.0+0x94>
    4780:	ldrb	r1, [r7, r2]
    4784:	add	r2, r2, #1
    4788:	vmov	s14, r1
    478c:	vcvt.f64.u32	d7, s14
    4790:	vstmia	r3!, {d7}
    4794:	b	4778 <ReadDoubleData.part.0+0x1144>
    4798:	add	r7, sp, #16
    479c:	ldr	r3, [r6]
    47a0:	mov	r2, r4
    47a4:	mov	r1, r0
    47a8:	mov	r0, r7
    47ac:	bl	1588 <fread@plt>
    47b0:	mov	r2, fp
    47b4:	mov	r3, #0
    47b8:	mov	r5, r0
    47bc:	cmp	r4, r3
    47c0:	ble	36c8 <ReadDoubleData.part.0+0x94>
    47c4:	ldrb	r1, [r7, r3]
    47c8:	add	r3, r3, #1
    47cc:	vmov	s14, r1
    47d0:	vcvt.f64.u32	d7, s14
    47d4:	vstmia	r2!, {d7}
    47d8:	b	47bc <ReadDoubleData.part.0+0x1188>
    47dc:	ldr	r3, [r6]
    47e0:	mov	r2, #256	; 0x100
    47e4:	mov	r1, sl
    47e8:	mov	r0, r8
    47ec:	bl	1588 <fread@plt>
    47f0:	add	r2, fp, r7, lsl #3
    47f4:	mov	r3, #0
    47f8:	add	r5, r5, r0
    47fc:	ldrb	r1, [r8, r3]
    4800:	add	r3, r3, #1
    4804:	cmp	r3, #256	; 0x100
    4808:	vmov	s14, r1
    480c:	vcvt.f64.u32	d7, s14
    4810:	vstmia	r2!, {d7}
    4814:	bne	47fc <ReadDoubleData.part.0+0x11c8>
    4818:	add	r7, r7, #256	; 0x100
    481c:	b	4734 <ReadDoubleData.part.0+0x1100>
    4820:	mov	r0, #0
    4824:	b	36cc <ReadDoubleData.part.0+0x98>

00004828 <ReadSingleData.part.1>:
    4828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    482c:	sub	sp, sp, #2064	; 0x810
    4830:	sub	sp, sp, #4
    4834:	mov	r6, r0
    4838:	mov	r0, r2
    483c:	mov	r5, r2
    4840:	mov	r4, r3
    4844:	str	r1, [sp]
    4848:	bl	1600 <Mat_SizeOf@plt>
    484c:	sub	r3, r5, #1
    4850:	mov	sl, r0
    4854:	cmp	r3, #8
    4858:	addls	pc, pc, r3, lsl #2
    485c:	b	57d4 <ReadSingleData.part.1+0xfac>
    4860:	b	55b4 <ReadSingleData.part.1+0xd8c>
    4864:	b	56c4 <ReadSingleData.part.1+0xe9c>
    4868:	b	512c <ReadSingleData.part.1+0x904>
    486c:	b	5370 <ReadSingleData.part.1+0xb48>
    4870:	b	4cb4 <ReadSingleData.part.1+0x48c>
    4874:	b	4ef0 <ReadSingleData.part.1+0x6c8>
    4878:	b	4ab0 <ReadSingleData.part.1+0x288>
    487c:	b	57d4 <ReadSingleData.part.1+0xfac>
    4880:	b	4884 <ReadSingleData.part.1+0x5c>
    4884:	ldr	r7, [r6, #20]
    4888:	cmp	r7, #0
    488c:	beq	49b4 <ReadSingleData.part.1+0x18c>
    4890:	cmp	r4, #256	; 0x100
    4894:	ble	4910 <ReadSingleData.part.1+0xe8>
    4898:	mov	r7, #0
    489c:	mov	r5, r7
    48a0:	sub	r9, r4, #256	; 0x100
    48a4:	add	r8, sp, #16
    48a8:	cmp	r7, r9
    48ac:	blt	4964 <ReadSingleData.part.1+0x13c>
    48b0:	sub	r7, r4, #1
    48b4:	lsr	r7, r7, #8
    48b8:	lsl	r3, r7, #8
    48bc:	cmp	r4, r3
    48c0:	ble	493c <ReadSingleData.part.1+0x114>
    48c4:	sub	r4, r4, r3
    48c8:	add	r8, sp, #16
    48cc:	ldr	r3, [r6]
    48d0:	mov	r2, r4
    48d4:	mov	r1, sl
    48d8:	mov	r0, r8
    48dc:	bl	1588 <fread@plt>
    48e0:	ldr	r3, [sp]
    48e4:	mov	r6, #0
    48e8:	add	r7, r3, r7, lsl #10
    48ec:	add	r5, r5, r0
    48f0:	cmp	r4, r6
    48f4:	ble	493c <ReadSingleData.part.1+0x114>
    48f8:	add	r0, r8, r6, lsl #3
    48fc:	bl	1b88 <Mat_doubleSwap>
    4900:	add	r6, r6, #1
    4904:	vcvt.f32.f64	s0, d0
    4908:	vstmia	r7!, {s0}
    490c:	b	48f0 <ReadSingleData.part.1+0xc8>
    4910:	add	r8, sp, #16
    4914:	ldr	r3, [r6]
    4918:	mov	r1, r0
    491c:	mov	r2, r4
    4920:	mov	r0, r8
    4924:	bl	1588 <fread@plt>
    4928:	ldr	r7, [sp]
    492c:	mov	r6, #0
    4930:	mov	r5, r0
    4934:	cmp	r4, r6
    4938:	bgt	494c <ReadSingleData.part.1+0x124>
    493c:	mul	r0, sl, r5
    4940:	add	sp, sp, #2064	; 0x810
    4944:	add	sp, sp, #4
    4948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    494c:	add	r0, r8, r6, lsl #3
    4950:	bl	1b88 <Mat_doubleSwap>
    4954:	add	r6, r6, #1
    4958:	vcvt.f32.f64	s0, d0
    495c:	vstmia	r7!, {s0}
    4960:	b	4934 <ReadSingleData.part.1+0x10c>
    4964:	ldr	r3, [r6]
    4968:	mov	r2, #256	; 0x100
    496c:	mov	r1, sl
    4970:	mov	r0, r8
    4974:	bl	1588 <fread@plt>
    4978:	ldr	r3, [sp]
    497c:	mov	fp, #0
    4980:	add	r3, r3, r7, lsl #2
    4984:	add	r5, r5, r0
    4988:	add	r0, r8, fp
    498c:	str	r3, [sp, #4]
    4990:	bl	1b88 <Mat_doubleSwap>
    4994:	ldr	r3, [sp, #4]
    4998:	add	fp, fp, #8
    499c:	cmp	fp, #2048	; 0x800
    49a0:	vcvt.f32.f64	s0, d0
    49a4:	vstmia	r3!, {s0}
    49a8:	bne	4988 <ReadSingleData.part.1+0x160>
    49ac:	add	r7, r7, #256	; 0x100
    49b0:	b	48a8 <ReadSingleData.part.1+0x80>
    49b4:	cmp	r4, #256	; 0x100
    49b8:	ble	4a38 <ReadSingleData.part.1+0x210>
    49bc:	ldr	r8, [sp]
    49c0:	mov	r9, r7
    49c4:	mov	r5, r7
    49c8:	add	fp, sp, #16
    49cc:	sub	r3, r4, #256	; 0x100
    49d0:	str	r3, [sp, #4]
    49d4:	ldr	r3, [sp, #4]
    49d8:	cmp	r9, r3
    49dc:	blt	4a74 <ReadSingleData.part.1+0x24c>
    49e0:	sub	r8, r4, #1
    49e4:	lsr	r8, r8, #8
    49e8:	lsl	r3, r8, #8
    49ec:	cmp	r4, r3
    49f0:	ble	493c <ReadSingleData.part.1+0x114>
    49f4:	sub	r4, r4, r3
    49f8:	ldr	r3, [r6]
    49fc:	add	r6, sp, #16
    4a00:	mov	r2, r4
    4a04:	mov	r1, sl
    4a08:	mov	r0, r6
    4a0c:	bl	1588 <fread@plt>
    4a10:	ldr	r3, [sp]
    4a14:	add	r8, r3, r8, lsl #10
    4a18:	add	r5, r5, r0
    4a1c:	cmp	r4, r7
    4a20:	ble	493c <ReadSingleData.part.1+0x114>
    4a24:	vldmia	r6!, {d7}
    4a28:	add	r7, r7, #1
    4a2c:	vcvt.f32.f64	s14, d7
    4a30:	vstmia	r8!, {s14}
    4a34:	b	4a1c <ReadSingleData.part.1+0x1f4>
    4a38:	ldr	r3, [r6]
    4a3c:	add	r6, sp, #16
    4a40:	mov	r1, r0
    4a44:	mov	r2, r4
    4a48:	mov	r0, r6
    4a4c:	bl	1588 <fread@plt>
    4a50:	ldr	r3, [sp]
    4a54:	mov	r5, r0
    4a58:	cmp	r4, r7
    4a5c:	ble	493c <ReadSingleData.part.1+0x114>
    4a60:	vldmia	r6!, {d7}
    4a64:	add	r7, r7, #1
    4a68:	vcvt.f32.f64	s14, d7
    4a6c:	vstmia	r3!, {s14}
    4a70:	b	4a58 <ReadSingleData.part.1+0x230>
    4a74:	ldr	r3, [r6]
    4a78:	mov	r2, #256	; 0x100
    4a7c:	mov	r1, sl
    4a80:	mov	r0, fp
    4a84:	bl	1588 <fread@plt>
    4a88:	mov	r3, fp
    4a8c:	add	r2, r8, #1024	; 0x400
    4a90:	add	r5, r5, r0
    4a94:	vldmia	r3!, {d7}
    4a98:	vcvt.f32.f64	s14, d7
    4a9c:	vstmia	r8!, {s14}
    4aa0:	cmp	r8, r2
    4aa4:	bne	4a94 <ReadSingleData.part.1+0x26c>
    4aa8:	add	r9, r9, #256	; 0x100
    4aac:	b	49d4 <ReadSingleData.part.1+0x1ac>
    4ab0:	ldr	r7, [r6, #20]
    4ab4:	cmp	r7, #0
    4ab8:	beq	4bc4 <ReadSingleData.part.1+0x39c>
    4abc:	cmp	r4, #256	; 0x100
    4ac0:	ble	4b38 <ReadSingleData.part.1+0x310>
    4ac4:	mov	r7, #0
    4ac8:	mov	r5, r7
    4acc:	sub	r9, r4, #256	; 0x100
    4ad0:	add	r8, sp, #16
    4ad4:	cmp	r7, r9
    4ad8:	blt	4b78 <ReadSingleData.part.1+0x350>
    4adc:	sub	r7, r4, #1
    4ae0:	lsr	r7, r7, #8
    4ae4:	lsl	r3, r7, #8
    4ae8:	cmp	r4, r3
    4aec:	ble	493c <ReadSingleData.part.1+0x114>
    4af0:	sub	r4, r4, r3
    4af4:	add	r8, sp, #16
    4af8:	ldr	r3, [r6]
    4afc:	mov	r2, r4
    4b00:	mov	r1, sl
    4b04:	mov	r0, r8
    4b08:	bl	1588 <fread@plt>
    4b0c:	ldr	r3, [sp]
    4b10:	mov	r6, #0
    4b14:	add	r7, r3, r7, lsl #10
    4b18:	add	r5, r5, r0
    4b1c:	cmp	r4, r6
    4b20:	ble	493c <ReadSingleData.part.1+0x114>
    4b24:	add	r0, r8, r6, lsl #2
    4b28:	bl	1b2c <Mat_floatSwap>
    4b2c:	add	r6, r6, #1
    4b30:	vstmia	r7!, {s0}
    4b34:	b	4b1c <ReadSingleData.part.1+0x2f4>
    4b38:	add	r8, sp, #16
    4b3c:	ldr	r3, [r6]
    4b40:	mov	r1, r0
    4b44:	mov	r2, r4
    4b48:	mov	r0, r8
    4b4c:	bl	1588 <fread@plt>
    4b50:	ldr	r7, [sp]
    4b54:	mov	r6, #0
    4b58:	mov	r5, r0
    4b5c:	cmp	r4, r6
    4b60:	ble	493c <ReadSingleData.part.1+0x114>
    4b64:	add	r0, r8, r6, lsl #2
    4b68:	bl	1b2c <Mat_floatSwap>
    4b6c:	add	r6, r6, #1
    4b70:	vstmia	r7!, {s0}
    4b74:	b	4b5c <ReadSingleData.part.1+0x334>
    4b78:	ldr	r3, [r6]
    4b7c:	mov	r2, #256	; 0x100
    4b80:	mov	r1, sl
    4b84:	mov	r0, r8
    4b88:	bl	1588 <fread@plt>
    4b8c:	ldr	r3, [sp]
    4b90:	mov	fp, #0
    4b94:	add	r3, r3, r7, lsl #2
    4b98:	add	r5, r5, r0
    4b9c:	add	r0, r8, fp
    4ba0:	str	r3, [sp, #4]
    4ba4:	bl	1b2c <Mat_floatSwap>
    4ba8:	ldr	r3, [sp, #4]
    4bac:	add	fp, fp, #4
    4bb0:	cmp	fp, #1024	; 0x400
    4bb4:	vstmia	r3!, {s0}
    4bb8:	bne	4b9c <ReadSingleData.part.1+0x374>
    4bbc:	add	r7, r7, #256	; 0x100
    4bc0:	b	4ad4 <ReadSingleData.part.1+0x2ac>
    4bc4:	cmp	r4, #256	; 0x100
    4bc8:	ble	4c44 <ReadSingleData.part.1+0x41c>
    4bcc:	ldr	r8, [sp]
    4bd0:	mov	r9, r7
    4bd4:	mov	r5, r7
    4bd8:	add	fp, sp, #16
    4bdc:	sub	r3, r4, #256	; 0x100
    4be0:	str	r3, [sp, #4]
    4be4:	ldr	r3, [sp, #4]
    4be8:	cmp	r9, r3
    4bec:	blt	4c7c <ReadSingleData.part.1+0x454>
    4bf0:	sub	r8, r4, #1
    4bf4:	lsr	r8, r8, #8
    4bf8:	lsl	r3, r8, #8
    4bfc:	cmp	r4, r3
    4c00:	ble	493c <ReadSingleData.part.1+0x114>
    4c04:	sub	r4, r4, r3
    4c08:	ldr	r3, [r6]
    4c0c:	add	r6, sp, #16
    4c10:	mov	r2, r4
    4c14:	mov	r1, sl
    4c18:	mov	r0, r6
    4c1c:	bl	1588 <fread@plt>
    4c20:	ldr	r3, [sp]
    4c24:	add	r8, r3, r8, lsl #10
    4c28:	add	r5, r5, r0
    4c2c:	cmp	r4, r7
    4c30:	ble	493c <ReadSingleData.part.1+0x114>
    4c34:	ldr	r3, [r6], #4
    4c38:	add	r7, r7, #1
    4c3c:	str	r3, [r8], #4
    4c40:	b	4c2c <ReadSingleData.part.1+0x404>
    4c44:	ldr	r3, [r6]
    4c48:	add	r6, sp, #16
    4c4c:	mov	r1, r0
    4c50:	mov	r2, r4
    4c54:	mov	r0, r6
    4c58:	bl	1588 <fread@plt>
    4c5c:	ldr	r3, [sp]
    4c60:	mov	r5, r0
    4c64:	cmp	r4, r7
    4c68:	ble	493c <ReadSingleData.part.1+0x114>
    4c6c:	ldr	r2, [r6], #4
    4c70:	add	r7, r7, #1
    4c74:	str	r2, [r3], #4
    4c78:	b	4c64 <ReadSingleData.part.1+0x43c>
    4c7c:	ldr	r3, [r6]
    4c80:	mov	r2, #256	; 0x100
    4c84:	mov	r1, sl
    4c88:	mov	r0, fp
    4c8c:	bl	1588 <fread@plt>
    4c90:	mov	r3, fp
    4c94:	add	r2, r8, #1024	; 0x400
    4c98:	add	r5, r5, r0
    4c9c:	ldr	r1, [r3], #4
    4ca0:	str	r1, [r8], #4
    4ca4:	cmp	r8, r2
    4ca8:	bne	4c9c <ReadSingleData.part.1+0x474>
    4cac:	add	r9, r9, #256	; 0x100
    4cb0:	b	4be4 <ReadSingleData.part.1+0x3bc>
    4cb4:	ldr	r7, [r6, #20]
    4cb8:	cmp	r7, #0
    4cbc:	beq	4de0 <ReadSingleData.part.1+0x5b8>
    4cc0:	cmp	r4, #256	; 0x100
    4cc4:	ble	4d44 <ReadSingleData.part.1+0x51c>
    4cc8:	mov	r7, #0
    4ccc:	mov	r5, r7
    4cd0:	sub	r9, r4, #256	; 0x100
    4cd4:	add	r8, sp, #16
    4cd8:	cmp	r7, r9
    4cdc:	blt	4d8c <ReadSingleData.part.1+0x564>
    4ce0:	sub	r7, r4, #1
    4ce4:	lsr	r7, r7, #8
    4ce8:	lsl	r3, r7, #8
    4cec:	cmp	r4, r3
    4cf0:	ble	493c <ReadSingleData.part.1+0x114>
    4cf4:	sub	r4, r4, r3
    4cf8:	add	r8, sp, #16
    4cfc:	ldr	r3, [r6]
    4d00:	mov	r2, r4
    4d04:	mov	r1, sl
    4d08:	mov	r0, r8
    4d0c:	bl	1588 <fread@plt>
    4d10:	ldr	r3, [sp]
    4d14:	mov	r6, #0
    4d18:	add	r7, r3, r7, lsl #10
    4d1c:	add	r5, r5, r0
    4d20:	cmp	r4, r6
    4d24:	ble	493c <ReadSingleData.part.1+0x114>
    4d28:	add	r0, r8, r6, lsl #2
    4d2c:	bl	1a18 <Mat_int32Swap>
    4d30:	add	r6, r6, #1
    4d34:	vmov	s15, r0
    4d38:	vcvt.f32.s32	s15, s15
    4d3c:	vstmia	r7!, {s15}
    4d40:	b	4d20 <ReadSingleData.part.1+0x4f8>
    4d44:	add	r8, sp, #16
    4d48:	ldr	r3, [r6]
    4d4c:	mov	r1, r0
    4d50:	mov	r2, r4
    4d54:	mov	r0, r8
    4d58:	bl	1588 <fread@plt>
    4d5c:	ldr	r7, [sp]
    4d60:	mov	r6, #0
    4d64:	mov	r5, r0
    4d68:	cmp	r4, r6
    4d6c:	ble	493c <ReadSingleData.part.1+0x114>
    4d70:	add	r0, r8, r6, lsl #2
    4d74:	bl	1a18 <Mat_int32Swap>
    4d78:	add	r6, r6, #1
    4d7c:	vmov	s15, r0
    4d80:	vcvt.f32.s32	s15, s15
    4d84:	vstmia	r7!, {s15}
    4d88:	b	4d68 <ReadSingleData.part.1+0x540>
    4d8c:	ldr	r3, [r6]
    4d90:	mov	r2, #256	; 0x100
    4d94:	mov	r1, sl
    4d98:	mov	r0, r8
    4d9c:	bl	1588 <fread@plt>
    4da0:	ldr	r3, [sp]
    4da4:	mov	fp, #0
    4da8:	add	r3, r3, r7, lsl #2
    4dac:	add	r5, r5, r0
    4db0:	add	r0, r8, fp
    4db4:	str	r3, [sp, #4]
    4db8:	bl	1a18 <Mat_int32Swap>
    4dbc:	ldr	r3, [sp, #4]
    4dc0:	add	fp, fp, #4
    4dc4:	cmp	fp, #1024	; 0x400
    4dc8:	vmov	s15, r0
    4dcc:	vcvt.f32.s32	s15, s15
    4dd0:	vstmia	r3!, {s15}
    4dd4:	bne	4db0 <ReadSingleData.part.1+0x588>
    4dd8:	add	r7, r7, #256	; 0x100
    4ddc:	b	4cd8 <ReadSingleData.part.1+0x4b0>
    4de0:	cmp	r4, #256	; 0x100
    4de4:	ble	4e68 <ReadSingleData.part.1+0x640>
    4de8:	mov	r8, r7
    4dec:	mov	r5, r7
    4df0:	add	r9, sp, #16
    4df4:	mov	fp, #256	; 0x100
    4df8:	sub	r3, r4, #256	; 0x100
    4dfc:	str	r3, [sp, #4]
    4e00:	ldr	r3, [sp, #4]
    4e04:	cmp	r8, r3
    4e08:	blt	4ea8 <ReadSingleData.part.1+0x680>
    4e0c:	sub	r8, r4, #1
    4e10:	lsr	r8, r8, #8
    4e14:	lsl	r3, r8, #8
    4e18:	cmp	r4, r3
    4e1c:	ble	493c <ReadSingleData.part.1+0x114>
    4e20:	sub	r4, r4, r3
    4e24:	add	r9, sp, #16
    4e28:	ldr	r3, [r6]
    4e2c:	mov	r2, r4
    4e30:	mov	r1, sl
    4e34:	mov	r0, r9
    4e38:	bl	1588 <fread@plt>
    4e3c:	ldr	r3, [sp]
    4e40:	add	r8, r3, r8, lsl #10
    4e44:	add	r5, r5, r0
    4e48:	cmp	r4, r7
    4e4c:	ble	493c <ReadSingleData.part.1+0x114>
    4e50:	ldr	r3, [r9, r7, lsl #2]
    4e54:	add	r7, r7, #1
    4e58:	vmov	s15, r3
    4e5c:	vcvt.f32.s32	s15, s15
    4e60:	vstmia	r8!, {s15}
    4e64:	b	4e48 <ReadSingleData.part.1+0x620>
    4e68:	add	r8, sp, #16
    4e6c:	ldr	r3, [r6]
    4e70:	mov	r1, r0
    4e74:	mov	r2, r4
    4e78:	mov	r0, r8
    4e7c:	bl	1588 <fread@plt>
    4e80:	ldr	r3, [sp]
    4e84:	mov	r5, r0
    4e88:	cmp	r4, r7
    4e8c:	ble	493c <ReadSingleData.part.1+0x114>
    4e90:	ldr	r2, [r8, r7, lsl #2]
    4e94:	add	r7, r7, #1
    4e98:	vmov	s15, r2
    4e9c:	vcvt.f32.s32	s15, s15
    4ea0:	vstmia	r3!, {s15}
    4ea4:	b	4e88 <ReadSingleData.part.1+0x660>
    4ea8:	ldr	r3, [r6]
    4eac:	mov	r2, fp
    4eb0:	mov	r1, sl
    4eb4:	mov	r0, r9
    4eb8:	bl	1588 <fread@plt>
    4ebc:	ldr	r3, [sp]
    4ec0:	add	r2, r3, r8, lsl #2
    4ec4:	mov	r3, r7
    4ec8:	add	r5, r5, r0
    4ecc:	ldr	r1, [r9, r3, lsl #2]
    4ed0:	add	r3, r3, #1
    4ed4:	cmp	r3, #256	; 0x100
    4ed8:	vmov	s15, r1
    4edc:	vcvt.f32.s32	s15, s15
    4ee0:	vstmia	r2!, {s15}
    4ee4:	bne	4ecc <ReadSingleData.part.1+0x6a4>
    4ee8:	add	r8, r8, #256	; 0x100
    4eec:	b	4e00 <ReadSingleData.part.1+0x5d8>
    4ef0:	ldr	r7, [r6, #20]
    4ef4:	cmp	r7, #0
    4ef8:	beq	501c <ReadSingleData.part.1+0x7f4>
    4efc:	cmp	r4, #256	; 0x100
    4f00:	ble	4f80 <ReadSingleData.part.1+0x758>
    4f04:	mov	r7, #0
    4f08:	mov	r5, r7
    4f0c:	sub	r9, r4, #256	; 0x100
    4f10:	add	r8, sp, #16
    4f14:	cmp	r7, r9
    4f18:	blt	4fc8 <ReadSingleData.part.1+0x7a0>
    4f1c:	sub	r7, r4, #1
    4f20:	lsr	r7, r7, #8
    4f24:	lsl	r3, r7, #8
    4f28:	cmp	r4, r3
    4f2c:	ble	493c <ReadSingleData.part.1+0x114>
    4f30:	sub	r4, r4, r3
    4f34:	add	r8, sp, #16
    4f38:	ldr	r3, [r6]
    4f3c:	mov	r2, r4
    4f40:	mov	r1, sl
    4f44:	mov	r0, r8
    4f48:	bl	1588 <fread@plt>
    4f4c:	ldr	r3, [sp]
    4f50:	mov	r6, #0
    4f54:	add	r7, r3, r7, lsl #10
    4f58:	add	r5, r5, r0
    4f5c:	cmp	r4, r6
    4f60:	ble	493c <ReadSingleData.part.1+0x114>
    4f64:	add	r0, r8, r6, lsl #2
    4f68:	bl	1a80 <Mat_uint32Swap>
    4f6c:	add	r6, r6, #1
    4f70:	vmov	s15, r0
    4f74:	vcvt.f32.u32	s15, s15
    4f78:	vstmia	r7!, {s15}
    4f7c:	b	4f5c <ReadSingleData.part.1+0x734>
    4f80:	add	r8, sp, #16
    4f84:	ldr	r3, [r6]
    4f88:	mov	r1, r0
    4f8c:	mov	r2, r4
    4f90:	mov	r0, r8
    4f94:	bl	1588 <fread@plt>
    4f98:	ldr	r7, [sp]
    4f9c:	mov	r6, #0
    4fa0:	mov	r5, r0
    4fa4:	cmp	r4, r6
    4fa8:	ble	493c <ReadSingleData.part.1+0x114>
    4fac:	add	r0, r8, r6, lsl #2
    4fb0:	bl	1a80 <Mat_uint32Swap>
    4fb4:	add	r6, r6, #1
    4fb8:	vmov	s15, r0
    4fbc:	vcvt.f32.u32	s15, s15
    4fc0:	vstmia	r7!, {s15}
    4fc4:	b	4fa4 <ReadSingleData.part.1+0x77c>
    4fc8:	ldr	r3, [r6]
    4fcc:	mov	r2, #256	; 0x100
    4fd0:	mov	r1, sl
    4fd4:	mov	r0, r8
    4fd8:	bl	1588 <fread@plt>
    4fdc:	ldr	r3, [sp]
    4fe0:	mov	fp, #0
    4fe4:	add	r3, r3, r7, lsl #2
    4fe8:	add	r5, r5, r0
    4fec:	add	r0, r8, fp
    4ff0:	str	r3, [sp, #4]
    4ff4:	bl	1a80 <Mat_uint32Swap>
    4ff8:	ldr	r3, [sp, #4]
    4ffc:	add	fp, fp, #4
    5000:	cmp	fp, #1024	; 0x400
    5004:	vmov	s15, r0
    5008:	vcvt.f32.u32	s15, s15
    500c:	vstmia	r3!, {s15}
    5010:	bne	4fec <ReadSingleData.part.1+0x7c4>
    5014:	add	r7, r7, #256	; 0x100
    5018:	b	4f14 <ReadSingleData.part.1+0x6ec>
    501c:	cmp	r4, #256	; 0x100
    5020:	ble	50a4 <ReadSingleData.part.1+0x87c>
    5024:	mov	r8, r7
    5028:	mov	r5, r7
    502c:	add	r9, sp, #16
    5030:	mov	fp, #256	; 0x100
    5034:	sub	r3, r4, #256	; 0x100
    5038:	str	r3, [sp, #4]
    503c:	ldr	r3, [sp, #4]
    5040:	cmp	r8, r3
    5044:	blt	50e4 <ReadSingleData.part.1+0x8bc>
    5048:	sub	r8, r4, #1
    504c:	lsr	r8, r8, #8
    5050:	lsl	r3, r8, #8
    5054:	cmp	r4, r3
    5058:	ble	493c <ReadSingleData.part.1+0x114>
    505c:	sub	r4, r4, r3
    5060:	add	r9, sp, #16
    5064:	ldr	r3, [r6]
    5068:	mov	r2, r4
    506c:	mov	r1, sl
    5070:	mov	r0, r9
    5074:	bl	1588 <fread@plt>
    5078:	ldr	r3, [sp]
    507c:	add	r8, r3, r8, lsl #10
    5080:	add	r5, r5, r0
    5084:	cmp	r4, r7
    5088:	ble	493c <ReadSingleData.part.1+0x114>
    508c:	ldr	r3, [r9, r7, lsl #2]
    5090:	add	r7, r7, #1
    5094:	vmov	s15, r3
    5098:	vcvt.f32.u32	s15, s15
    509c:	vstmia	r8!, {s15}
    50a0:	b	5084 <ReadSingleData.part.1+0x85c>
    50a4:	add	r8, sp, #16
    50a8:	ldr	r3, [r6]
    50ac:	mov	r1, r0
    50b0:	mov	r2, r4
    50b4:	mov	r0, r8
    50b8:	bl	1588 <fread@plt>
    50bc:	ldr	r3, [sp]
    50c0:	mov	r5, r0
    50c4:	cmp	r4, r7
    50c8:	ble	493c <ReadSingleData.part.1+0x114>
    50cc:	ldr	r2, [r8, r7, lsl #2]
    50d0:	add	r7, r7, #1
    50d4:	vmov	s15, r2
    50d8:	vcvt.f32.u32	s15, s15
    50dc:	vstmia	r3!, {s15}
    50e0:	b	50c4 <ReadSingleData.part.1+0x89c>
    50e4:	ldr	r3, [r6]
    50e8:	mov	r2, fp
    50ec:	mov	r1, sl
    50f0:	mov	r0, r9
    50f4:	bl	1588 <fread@plt>
    50f8:	ldr	r3, [sp]
    50fc:	add	r2, r3, r8, lsl #2
    5100:	mov	r3, r7
    5104:	add	r5, r5, r0
    5108:	ldr	r1, [r9, r3, lsl #2]
    510c:	add	r3, r3, #1
    5110:	cmp	r3, #256	; 0x100
    5114:	vmov	s15, r1
    5118:	vcvt.f32.u32	s15, s15
    511c:	vstmia	r2!, {s15}
    5120:	bne	5108 <ReadSingleData.part.1+0x8e0>
    5124:	add	r8, r8, #256	; 0x100
    5128:	b	503c <ReadSingleData.part.1+0x814>
    512c:	ldr	r7, [r6, #20]
    5130:	cmp	r7, #0
    5134:	beq	5258 <ReadSingleData.part.1+0xa30>
    5138:	cmp	r4, #256	; 0x100
    513c:	ble	51bc <ReadSingleData.part.1+0x994>
    5140:	mov	r7, #0
    5144:	mov	r5, r7
    5148:	sub	r9, r4, #256	; 0x100
    514c:	add	r8, sp, #16
    5150:	cmp	r7, r9
    5154:	blt	5204 <ReadSingleData.part.1+0x9dc>
    5158:	sub	r7, r4, #1
    515c:	lsr	r7, r7, #8
    5160:	lsl	r3, r7, #8
    5164:	cmp	r4, r3
    5168:	ble	493c <ReadSingleData.part.1+0x114>
    516c:	sub	r4, r4, r3
    5170:	add	r8, sp, #16
    5174:	ldr	r3, [r6]
    5178:	mov	r2, r4
    517c:	mov	r1, sl
    5180:	mov	r0, r8
    5184:	bl	1588 <fread@plt>
    5188:	ldr	r3, [sp]
    518c:	mov	r6, #0
    5190:	add	r7, r3, r7, lsl #10
    5194:	add	r5, r5, r0
    5198:	cmp	r4, r6
    519c:	ble	493c <ReadSingleData.part.1+0x114>
    51a0:	add	r0, r8, r6, lsl #1
    51a4:	bl	1adc <Mat_int16Swap>
    51a8:	add	r6, r6, #1
    51ac:	vmov	s15, r0
    51b0:	vcvt.f32.s32	s15, s15
    51b4:	vstmia	r7!, {s15}
    51b8:	b	5198 <ReadSingleData.part.1+0x970>
    51bc:	add	r8, sp, #16
    51c0:	ldr	r3, [r6]
    51c4:	mov	r1, r0
    51c8:	mov	r2, r4
    51cc:	mov	r0, r8
    51d0:	bl	1588 <fread@plt>
    51d4:	ldr	r7, [sp]
    51d8:	mov	r6, #0
    51dc:	mov	r5, r0
    51e0:	cmp	r4, r6
    51e4:	ble	493c <ReadSingleData.part.1+0x114>
    51e8:	add	r0, r8, r6, lsl #1
    51ec:	bl	1adc <Mat_int16Swap>
    51f0:	add	r6, r6, #1
    51f4:	vmov	s15, r0
    51f8:	vcvt.f32.s32	s15, s15
    51fc:	vstmia	r7!, {s15}
    5200:	b	51e0 <ReadSingleData.part.1+0x9b8>
    5204:	ldr	r3, [r6]
    5208:	mov	r2, #256	; 0x100
    520c:	mov	r1, sl
    5210:	mov	r0, r8
    5214:	bl	1588 <fread@plt>
    5218:	ldr	r3, [sp]
    521c:	mov	fp, #0
    5220:	add	r3, r3, r7, lsl #2
    5224:	add	r5, r5, r0
    5228:	add	r0, r8, fp
    522c:	str	r3, [sp, #4]
    5230:	bl	1adc <Mat_int16Swap>
    5234:	ldr	r3, [sp, #4]
    5238:	add	fp, fp, #2
    523c:	cmp	fp, #512	; 0x200
    5240:	vmov	s15, r0
    5244:	vcvt.f32.s32	s15, s15
    5248:	vstmia	r3!, {s15}
    524c:	bne	5228 <ReadSingleData.part.1+0xa00>
    5250:	add	r7, r7, #256	; 0x100
    5254:	b	5150 <ReadSingleData.part.1+0x928>
    5258:	cmp	r4, #256	; 0x100
    525c:	ble	52e4 <ReadSingleData.part.1+0xabc>
    5260:	mov	r8, r7
    5264:	mov	r5, r7
    5268:	add	r9, sp, #16
    526c:	mov	fp, #256	; 0x100
    5270:	sub	r3, r4, #256	; 0x100
    5274:	str	r3, [sp, #4]
    5278:	ldr	r3, [sp, #4]
    527c:	cmp	r8, r3
    5280:	blt	5328 <ReadSingleData.part.1+0xb00>
    5284:	sub	r8, r4, #1
    5288:	lsr	r8, r8, #8
    528c:	lsl	r3, r8, #8
    5290:	cmp	r4, r3
    5294:	ble	493c <ReadSingleData.part.1+0x114>
    5298:	sub	r4, r4, r3
    529c:	add	r9, sp, #16
    52a0:	ldr	r3, [r6]
    52a4:	mov	r2, r4
    52a8:	mov	r1, sl
    52ac:	mov	r0, r9
    52b0:	bl	1588 <fread@plt>
    52b4:	ldr	r3, [sp]
    52b8:	add	r8, r3, r8, lsl #10
    52bc:	add	r5, r5, r0
    52c0:	cmp	r4, r7
    52c4:	ble	493c <ReadSingleData.part.1+0x114>
    52c8:	lsl	r3, r7, #1
    52cc:	add	r7, r7, #1
    52d0:	ldrsh	r3, [r9, r3]
    52d4:	vmov	s15, r3
    52d8:	vcvt.f32.s32	s15, s15
    52dc:	vstmia	r8!, {s15}
    52e0:	b	52c0 <ReadSingleData.part.1+0xa98>
    52e4:	add	r8, sp, #16
    52e8:	ldr	r3, [r6]
    52ec:	mov	r1, r0
    52f0:	mov	r2, r4
    52f4:	mov	r0, r8
    52f8:	bl	1588 <fread@plt>
    52fc:	ldr	r3, [sp]
    5300:	mov	r5, r0
    5304:	cmp	r4, r7
    5308:	ble	493c <ReadSingleData.part.1+0x114>
    530c:	lsl	r2, r7, #1
    5310:	add	r7, r7, #1
    5314:	ldrsh	r2, [r8, r2]
    5318:	vmov	s15, r2
    531c:	vcvt.f32.s32	s15, s15
    5320:	vstmia	r3!, {s15}
    5324:	b	5304 <ReadSingleData.part.1+0xadc>
    5328:	ldr	r3, [r6]
    532c:	mov	r2, fp
    5330:	mov	r1, sl
    5334:	mov	r0, r9
    5338:	bl	1588 <fread@plt>
    533c:	ldr	r3, [sp]
    5340:	add	r2, r3, r8, lsl #2
    5344:	mov	r3, #0
    5348:	add	r5, r5, r0
    534c:	ldrsh	r1, [r9, r3]
    5350:	add	r3, r3, #2
    5354:	cmp	r3, #512	; 0x200
    5358:	vmov	s15, r1
    535c:	vcvt.f32.s32	s15, s15
    5360:	vstmia	r2!, {s15}
    5364:	bne	534c <ReadSingleData.part.1+0xb24>
    5368:	add	r8, r8, #256	; 0x100
    536c:	b	5278 <ReadSingleData.part.1+0xa50>
    5370:	ldr	r7, [r6, #20]
    5374:	cmp	r7, #0
    5378:	beq	549c <ReadSingleData.part.1+0xc74>
    537c:	cmp	r4, #256	; 0x100
    5380:	ble	5400 <ReadSingleData.part.1+0xbd8>
    5384:	mov	r7, #0
    5388:	mov	r5, r7
    538c:	sub	r9, r4, #256	; 0x100
    5390:	add	r8, sp, #16
    5394:	cmp	r7, r9
    5398:	blt	5448 <ReadSingleData.part.1+0xc20>
    539c:	sub	r7, r4, #1
    53a0:	lsr	r7, r7, #8
    53a4:	lsl	r3, r7, #8
    53a8:	cmp	r4, r3
    53ac:	ble	493c <ReadSingleData.part.1+0x114>
    53b0:	sub	r4, r4, r3
    53b4:	add	r8, sp, #16
    53b8:	ldr	r3, [r6]
    53bc:	mov	r2, r4
    53c0:	mov	r1, sl
    53c4:	mov	r0, r8
    53c8:	bl	1588 <fread@plt>
    53cc:	ldr	r3, [sp]
    53d0:	mov	r6, #0
    53d4:	add	r7, r3, r7, lsl #10
    53d8:	add	r5, r5, r0
    53dc:	cmp	r4, r6
    53e0:	ble	493c <ReadSingleData.part.1+0x114>
    53e4:	add	r0, r8, r6, lsl #1
    53e8:	bl	1b10 <Mat_uint16Swap>
    53ec:	add	r6, r6, #1
    53f0:	vmov	s15, r0
    53f4:	vcvt.f32.u32	s15, s15
    53f8:	vstmia	r7!, {s15}
    53fc:	b	53dc <ReadSingleData.part.1+0xbb4>
    5400:	add	r8, sp, #16
    5404:	ldr	r3, [r6]
    5408:	mov	r1, r0
    540c:	mov	r2, r4
    5410:	mov	r0, r8
    5414:	bl	1588 <fread@plt>
    5418:	ldr	r7, [sp]
    541c:	mov	r6, #0
    5420:	mov	r5, r0
    5424:	cmp	r4, r6
    5428:	ble	493c <ReadSingleData.part.1+0x114>
    542c:	add	r0, r8, r6, lsl #1
    5430:	bl	1b10 <Mat_uint16Swap>
    5434:	add	r6, r6, #1
    5438:	vmov	s15, r0
    543c:	vcvt.f32.u32	s15, s15
    5440:	vstmia	r7!, {s15}
    5444:	b	5424 <ReadSingleData.part.1+0xbfc>
    5448:	ldr	r3, [r6]
    544c:	mov	r2, #256	; 0x100
    5450:	mov	r1, sl
    5454:	mov	r0, r8
    5458:	bl	1588 <fread@plt>
    545c:	ldr	r3, [sp]
    5460:	mov	fp, #0
    5464:	add	r3, r3, r7, lsl #2
    5468:	add	r5, r5, r0
    546c:	add	r0, r8, fp
    5470:	str	r3, [sp, #4]
    5474:	bl	1b10 <Mat_uint16Swap>
    5478:	ldr	r3, [sp, #4]
    547c:	add	fp, fp, #2
    5480:	cmp	fp, #512	; 0x200
    5484:	vmov	s15, r0
    5488:	vcvt.f32.u32	s15, s15
    548c:	vstmia	r3!, {s15}
    5490:	bne	546c <ReadSingleData.part.1+0xc44>
    5494:	add	r7, r7, #256	; 0x100
    5498:	b	5394 <ReadSingleData.part.1+0xb6c>
    549c:	cmp	r4, #256	; 0x100
    54a0:	ble	5528 <ReadSingleData.part.1+0xd00>
    54a4:	mov	r8, r7
    54a8:	mov	r5, r7
    54ac:	add	r9, sp, #16
    54b0:	mov	fp, #256	; 0x100
    54b4:	sub	r3, r4, #256	; 0x100
    54b8:	str	r3, [sp, #4]
    54bc:	ldr	r3, [sp, #4]
    54c0:	cmp	r8, r3
    54c4:	blt	556c <ReadSingleData.part.1+0xd44>
    54c8:	sub	r8, r4, #1
    54cc:	lsr	r8, r8, #8
    54d0:	lsl	r3, r8, #8
    54d4:	cmp	r4, r3
    54d8:	ble	493c <ReadSingleData.part.1+0x114>
    54dc:	sub	r4, r4, r3
    54e0:	add	r9, sp, #16
    54e4:	ldr	r3, [r6]
    54e8:	mov	r2, r4
    54ec:	mov	r1, sl
    54f0:	mov	r0, r9
    54f4:	bl	1588 <fread@plt>
    54f8:	ldr	r3, [sp]
    54fc:	add	r8, r3, r8, lsl #10
    5500:	add	r5, r5, r0
    5504:	cmp	r4, r7
    5508:	ble	493c <ReadSingleData.part.1+0x114>
    550c:	lsl	r3, r7, #1
    5510:	add	r7, r7, #1
    5514:	ldrh	r3, [r9, r3]
    5518:	vmov	s15, r3
    551c:	vcvt.f32.u32	s15, s15
    5520:	vstmia	r8!, {s15}
    5524:	b	5504 <ReadSingleData.part.1+0xcdc>
    5528:	add	r8, sp, #16
    552c:	ldr	r3, [r6]
    5530:	mov	r1, r0
    5534:	mov	r2, r4
    5538:	mov	r0, r8
    553c:	bl	1588 <fread@plt>
    5540:	ldr	r3, [sp]
    5544:	mov	r5, r0
    5548:	cmp	r4, r7
    554c:	ble	493c <ReadSingleData.part.1+0x114>
    5550:	lsl	r2, r7, #1
    5554:	add	r7, r7, #1
    5558:	ldrh	r2, [r8, r2]
    555c:	vmov	s15, r2
    5560:	vcvt.f32.u32	s15, s15
    5564:	vstmia	r3!, {s15}
    5568:	b	5548 <ReadSingleData.part.1+0xd20>
    556c:	ldr	r3, [r6]
    5570:	mov	r2, fp
    5574:	mov	r1, sl
    5578:	mov	r0, r9
    557c:	bl	1588 <fread@plt>
    5580:	ldr	r3, [sp]
    5584:	add	r2, r3, r8, lsl #2
    5588:	mov	r3, #0
    558c:	add	r5, r5, r0
    5590:	ldrh	r1, [r9, r3]
    5594:	add	r3, r3, #2
    5598:	cmp	r3, #512	; 0x200
    559c:	vmov	s15, r1
    55a0:	vcvt.f32.u32	s15, s15
    55a4:	vstmia	r2!, {s15}
    55a8:	bne	5590 <ReadSingleData.part.1+0xd68>
    55ac:	add	r8, r8, #256	; 0x100
    55b0:	b	54bc <ReadSingleData.part.1+0xc94>
    55b4:	cmp	r4, #256	; 0x100
    55b8:	ble	5638 <ReadSingleData.part.1+0xe10>
    55bc:	mov	r7, #0
    55c0:	mov	r5, r7
    55c4:	sub	r9, r4, #256	; 0x100
    55c8:	add	r8, sp, #16
    55cc:	mov	fp, #256	; 0x100
    55d0:	cmp	r7, r9
    55d4:	blt	567c <ReadSingleData.part.1+0xe54>
    55d8:	sub	r7, r4, #1
    55dc:	lsr	r7, r7, #8
    55e0:	lsl	r3, r7, #8
    55e4:	cmp	r4, r3
    55e8:	ble	493c <ReadSingleData.part.1+0x114>
    55ec:	sub	r4, r4, r3
    55f0:	add	r8, sp, #16
    55f4:	ldr	r3, [r6]
    55f8:	mov	r2, r4
    55fc:	mov	r1, sl
    5600:	mov	r0, r8
    5604:	bl	1588 <fread@plt>
    5608:	ldr	r3, [sp]
    560c:	add	r7, r3, r7, lsl #10
    5610:	mov	r3, #0
    5614:	add	r5, r5, r0
    5618:	cmp	r4, r3
    561c:	ble	493c <ReadSingleData.part.1+0x114>
    5620:	ldrsb	r2, [r8, r3]
    5624:	add	r3, r3, #1
    5628:	vmov	s15, r2
    562c:	vcvt.f32.s32	s15, s15
    5630:	vstmia	r7!, {s15}
    5634:	b	5618 <ReadSingleData.part.1+0xdf0>
    5638:	add	r7, sp, #16
    563c:	ldr	r3, [r6]
    5640:	mov	r2, r4
    5644:	mov	r1, r0
    5648:	mov	r0, r7
    564c:	bl	1588 <fread@plt>
    5650:	ldr	r2, [sp]
    5654:	mov	r3, #0
    5658:	mov	r5, r0
    565c:	cmp	r4, r3
    5660:	ble	493c <ReadSingleData.part.1+0x114>
    5664:	ldrsb	r1, [r7, r3]
    5668:	add	r3, r3, #1
    566c:	vmov	s15, r1
    5670:	vcvt.f32.s32	s15, s15
    5674:	vstmia	r2!, {s15}
    5678:	b	565c <ReadSingleData.part.1+0xe34>
    567c:	ldr	r3, [r6]
    5680:	mov	r2, fp
    5684:	mov	r1, sl
    5688:	mov	r0, r8
    568c:	bl	1588 <fread@plt>
    5690:	ldr	r3, [sp]
    5694:	add	r2, r3, r7, lsl #2
    5698:	mov	r3, #0
    569c:	add	r5, r5, r0
    56a0:	ldrsb	r1, [r8, r3]
    56a4:	add	r3, r3, #1
    56a8:	cmp	r3, #256	; 0x100
    56ac:	vmov	s15, r1
    56b0:	vcvt.f32.s32	s15, s15
    56b4:	vstmia	r2!, {s15}
    56b8:	bne	56a0 <ReadSingleData.part.1+0xe78>
    56bc:	add	r7, r7, #256	; 0x100
    56c0:	b	55d0 <ReadSingleData.part.1+0xda8>
    56c4:	cmp	r4, #256	; 0x100
    56c8:	ble	5748 <ReadSingleData.part.1+0xf20>
    56cc:	mov	r7, #0
    56d0:	mov	r5, r7
    56d4:	sub	r9, r4, #256	; 0x100
    56d8:	add	r8, sp, #16
    56dc:	mov	fp, #256	; 0x100
    56e0:	cmp	r7, r9
    56e4:	blt	578c <ReadSingleData.part.1+0xf64>
    56e8:	sub	r7, r4, #1
    56ec:	lsr	r7, r7, #8
    56f0:	lsl	r3, r7, #8
    56f4:	cmp	r4, r3
    56f8:	ble	493c <ReadSingleData.part.1+0x114>
    56fc:	sub	r4, r4, r3
    5700:	add	r8, sp, #16
    5704:	ldr	r3, [r6]
    5708:	mov	r2, r4
    570c:	mov	r1, sl
    5710:	mov	r0, r8
    5714:	bl	1588 <fread@plt>
    5718:	ldr	r3, [sp]
    571c:	add	r7, r3, r7, lsl #10
    5720:	mov	r3, #0
    5724:	add	r5, r5, r0
    5728:	cmp	r4, r3
    572c:	ble	493c <ReadSingleData.part.1+0x114>
    5730:	ldrb	r2, [r8, r3]
    5734:	add	r3, r3, #1
    5738:	vmov	s15, r2
    573c:	vcvt.f32.u32	s15, s15
    5740:	vstmia	r7!, {s15}
    5744:	b	5728 <ReadSingleData.part.1+0xf00>
    5748:	add	r7, sp, #16
    574c:	ldr	r3, [r6]
    5750:	mov	r2, r4
    5754:	mov	r1, r0
    5758:	mov	r0, r7
    575c:	bl	1588 <fread@plt>
    5760:	ldr	r2, [sp]
    5764:	mov	r3, #0
    5768:	mov	r5, r0
    576c:	cmp	r4, r3
    5770:	ble	493c <ReadSingleData.part.1+0x114>
    5774:	ldrb	r1, [r7, r3]
    5778:	add	r3, r3, #1
    577c:	vmov	s15, r1
    5780:	vcvt.f32.u32	s15, s15
    5784:	vstmia	r2!, {s15}
    5788:	b	576c <ReadSingleData.part.1+0xf44>
    578c:	ldr	r3, [r6]
    5790:	mov	r2, fp
    5794:	mov	r1, sl
    5798:	mov	r0, r8
    579c:	bl	1588 <fread@plt>
    57a0:	ldr	r3, [sp]
    57a4:	add	r2, r3, r7, lsl #2
    57a8:	mov	r3, #0
    57ac:	add	r5, r5, r0
    57b0:	ldrb	r1, [r8, r3]
    57b4:	add	r3, r3, #1
    57b8:	cmp	r3, #256	; 0x100
    57bc:	vmov	s15, r1
    57c0:	vcvt.f32.u32	s15, s15
    57c4:	vstmia	r2!, {s15}
    57c8:	bne	57b0 <ReadSingleData.part.1+0xf88>
    57cc:	add	r7, r7, #256	; 0x100
    57d0:	b	56e0 <ReadSingleData.part.1+0xeb8>
    57d4:	cmp	r5, #12
    57d8:	bne	5a18 <ReadSingleData.part.1+0x11f0>
    57dc:	ldr	r7, [r6, #20]
    57e0:	cmp	r7, #0
    57e4:	beq	58fc <ReadSingleData.part.1+0x10d4>
    57e8:	cmp	r4, #256	; 0x100
    57ec:	ble	5868 <ReadSingleData.part.1+0x1040>
    57f0:	mov	r7, #0
    57f4:	mov	r5, r7
    57f8:	sub	r9, r4, #256	; 0x100
    57fc:	add	r8, sp, #16
    5800:	cmp	r7, r9
    5804:	blt	58ac <ReadSingleData.part.1+0x1084>
    5808:	sub	r7, r4, #1
    580c:	lsr	r7, r7, #8
    5810:	lsl	r3, r7, #8
    5814:	cmp	r4, r3
    5818:	ble	493c <ReadSingleData.part.1+0x114>
    581c:	sub	r4, r4, r3
    5820:	add	r8, sp, #16
    5824:	ldr	r3, [r6]
    5828:	mov	r2, r4
    582c:	mov	r1, sl
    5830:	mov	r0, r8
    5834:	bl	1588 <fread@plt>
    5838:	ldr	r3, [sp]
    583c:	mov	r6, #0
    5840:	add	r7, r3, r7, lsl #10
    5844:	add	r5, r5, r0
    5848:	cmp	r4, r6
    584c:	ble	493c <ReadSingleData.part.1+0x114>
    5850:	add	r0, r8, r6, lsl #3
    5854:	bl	18bc <Mat_int64Swap>
    5858:	bl	402c4 <__aeabi_l2f>
    585c:	add	r6, r6, #1
    5860:	str	r0, [r7], #4
    5864:	b	5848 <ReadSingleData.part.1+0x1020>
    5868:	add	r8, sp, #16
    586c:	ldr	r3, [r6]
    5870:	mov	r1, r0
    5874:	mov	r2, r4
    5878:	mov	r0, r8
    587c:	bl	1588 <fread@plt>
    5880:	ldr	r7, [sp]
    5884:	mov	r6, #0
    5888:	mov	r5, r0
    588c:	cmp	r4, r6
    5890:	ble	493c <ReadSingleData.part.1+0x114>
    5894:	add	r0, r8, r6, lsl #3
    5898:	bl	18bc <Mat_int64Swap>
    589c:	bl	402c4 <__aeabi_l2f>
    58a0:	add	r6, r6, #1
    58a4:	str	r0, [r7], #4
    58a8:	b	588c <ReadSingleData.part.1+0x1064>
    58ac:	ldr	r3, [r6]
    58b0:	mov	r2, #256	; 0x100
    58b4:	mov	r1, sl
    58b8:	mov	r0, r8
    58bc:	bl	1588 <fread@plt>
    58c0:	ldr	r3, [sp]
    58c4:	mov	fp, #0
    58c8:	add	r3, r3, r7, lsl #2
    58cc:	add	r5, r5, r0
    58d0:	add	r0, r8, fp
    58d4:	str	r3, [sp, #4]
    58d8:	bl	18bc <Mat_int64Swap>
    58dc:	bl	402c4 <__aeabi_l2f>
    58e0:	ldr	r3, [sp, #4]
    58e4:	add	fp, fp, #8
    58e8:	cmp	fp, #2048	; 0x800
    58ec:	str	r0, [r3], #4
    58f0:	bne	58d0 <ReadSingleData.part.1+0x10a8>
    58f4:	add	r7, r7, #256	; 0x100
    58f8:	b	5800 <ReadSingleData.part.1+0xfd8>
    58fc:	cmp	r4, #256	; 0x100
    5900:	ble	5984 <ReadSingleData.part.1+0x115c>
    5904:	mov	r8, r7
    5908:	mov	r5, r7
    590c:	add	r9, sp, #16
    5910:	mov	fp, #256	; 0x100
    5914:	sub	r3, r4, #256	; 0x100
    5918:	str	r3, [sp, #4]
    591c:	ldr	r3, [sp, #4]
    5920:	cmp	r8, r3
    5924:	blt	59c4 <ReadSingleData.part.1+0x119c>
    5928:	sub	r8, r4, #1
    592c:	lsr	r8, r8, #8
    5930:	lsl	r3, r8, #8
    5934:	cmp	r4, r3
    5938:	ble	493c <ReadSingleData.part.1+0x114>
    593c:	sub	r4, r4, r3
    5940:	add	r9, sp, #16
    5944:	ldr	r3, [r6]
    5948:	mov	r2, r4
    594c:	mov	r1, sl
    5950:	mov	r0, r9
    5954:	bl	1588 <fread@plt>
    5958:	ldr	r3, [sp]
    595c:	add	r8, r3, r8, lsl #10
    5960:	add	r5, r5, r0
    5964:	cmp	r4, r7
    5968:	ble	493c <ReadSingleData.part.1+0x114>
    596c:	lsl	r3, r7, #3
    5970:	add	r7, r7, #1
    5974:	ldrd	r0, [r9, r3]
    5978:	bl	402c4 <__aeabi_l2f>
    597c:	str	r0, [r8], #4
    5980:	b	5964 <ReadSingleData.part.1+0x113c>
    5984:	add	r8, sp, #16
    5988:	ldr	r3, [r6]
    598c:	mov	r1, r0
    5990:	mov	r2, r4
    5994:	mov	r0, r8
    5998:	bl	1588 <fread@plt>
    599c:	ldr	r6, [sp]
    59a0:	mov	r5, r0
    59a4:	cmp	r4, r7
    59a8:	ble	493c <ReadSingleData.part.1+0x114>
    59ac:	lsl	r3, r7, #3
    59b0:	add	r7, r7, #1
    59b4:	ldrd	r0, [r8, r3]
    59b8:	bl	402c4 <__aeabi_l2f>
    59bc:	str	r0, [r6], #4
    59c0:	b	59a4 <ReadSingleData.part.1+0x117c>
    59c4:	ldr	r3, [r6]
    59c8:	mov	r2, fp
    59cc:	mov	r1, sl
    59d0:	mov	r0, r9
    59d4:	bl	1588 <fread@plt>
    59d8:	ldr	r3, [sp]
    59dc:	add	r2, r3, r8, lsl #2
    59e0:	mov	r3, #0
    59e4:	add	r5, r5, r0
    59e8:	ldrd	r0, [r9, r3]
    59ec:	str	r2, [sp, #12]
    59f0:	str	r3, [sp, #8]
    59f4:	bl	402c4 <__aeabi_l2f>
    59f8:	ldr	r3, [sp, #8]
    59fc:	ldr	r2, [sp, #12]
    5a00:	add	r3, r3, #8
    5a04:	cmp	r3, #2048	; 0x800
    5a08:	str	r0, [r2], #4
    5a0c:	bne	59e8 <ReadSingleData.part.1+0x11c0>
    5a10:	add	r8, r8, #256	; 0x100
    5a14:	b	591c <ReadSingleData.part.1+0x10f4>
    5a18:	cmp	r5, #13
    5a1c:	movne	r5, #0
    5a20:	bne	493c <ReadSingleData.part.1+0x114>
    5a24:	ldr	r7, [r6, #20]
    5a28:	cmp	r7, #0
    5a2c:	beq	5b44 <ReadSingleData.part.1+0x131c>
    5a30:	cmp	r4, #256	; 0x100
    5a34:	ble	5ab0 <ReadSingleData.part.1+0x1288>
    5a38:	mov	r7, #0
    5a3c:	mov	r5, r7
    5a40:	sub	r9, r4, #256	; 0x100
    5a44:	add	r8, sp, #16
    5a48:	cmp	r7, r9
    5a4c:	blt	5af4 <ReadSingleData.part.1+0x12cc>
    5a50:	sub	r7, r4, #1
    5a54:	lsr	r7, r7, #8
    5a58:	lsl	r3, r7, #8
    5a5c:	cmp	r4, r3
    5a60:	ble	493c <ReadSingleData.part.1+0x114>
    5a64:	sub	r4, r4, r3
    5a68:	add	r8, sp, #16
    5a6c:	ldr	r3, [r6]
    5a70:	mov	r2, r4
    5a74:	mov	r1, sl
    5a78:	mov	r0, r8
    5a7c:	bl	1588 <fread@plt>
    5a80:	ldr	r3, [sp]
    5a84:	mov	r6, #0
    5a88:	add	r7, r3, r7, lsl #10
    5a8c:	add	r5, r5, r0
    5a90:	cmp	r4, r6
    5a94:	ble	493c <ReadSingleData.part.1+0x114>
    5a98:	add	r0, r8, r6, lsl #3
    5a9c:	bl	1980 <Mat_uint64Swap>
    5aa0:	bl	402b4 <__aeabi_ul2f>
    5aa4:	add	r6, r6, #1
    5aa8:	str	r0, [r7], #4
    5aac:	b	5a90 <ReadSingleData.part.1+0x1268>
    5ab0:	add	r8, sp, #16
    5ab4:	ldr	r3, [r6]
    5ab8:	mov	r1, r0
    5abc:	mov	r2, r4
    5ac0:	mov	r0, r8
    5ac4:	bl	1588 <fread@plt>
    5ac8:	ldr	r7, [sp]
    5acc:	mov	r6, #0
    5ad0:	mov	r5, r0
    5ad4:	cmp	r4, r6
    5ad8:	ble	493c <ReadSingleData.part.1+0x114>
    5adc:	add	r0, r8, r6, lsl #3
    5ae0:	bl	1980 <Mat_uint64Swap>
    5ae4:	bl	402b4 <__aeabi_ul2f>
    5ae8:	add	r6, r6, #1
    5aec:	str	r0, [r7], #4
    5af0:	b	5ad4 <ReadSingleData.part.1+0x12ac>
    5af4:	ldr	r3, [r6]
    5af8:	mov	r2, #256	; 0x100
    5afc:	mov	r1, sl
    5b00:	mov	r0, r8
    5b04:	bl	1588 <fread@plt>
    5b08:	ldr	r3, [sp]
    5b0c:	mov	fp, #0
    5b10:	add	r3, r3, r7, lsl #2
    5b14:	add	r5, r5, r0
    5b18:	add	r0, r8, fp
    5b1c:	str	r3, [sp, #4]
    5b20:	bl	1980 <Mat_uint64Swap>
    5b24:	bl	402b4 <__aeabi_ul2f>
    5b28:	ldr	r3, [sp, #4]
    5b2c:	add	fp, fp, #8
    5b30:	cmp	fp, #2048	; 0x800
    5b34:	str	r0, [r3], #4
    5b38:	bne	5b18 <ReadSingleData.part.1+0x12f0>
    5b3c:	add	r7, r7, #256	; 0x100
    5b40:	b	5a48 <ReadSingleData.part.1+0x1220>
    5b44:	cmp	r4, #256	; 0x100
    5b48:	ble	5bcc <ReadSingleData.part.1+0x13a4>
    5b4c:	mov	r8, r7
    5b50:	mov	r5, r7
    5b54:	add	r9, sp, #16
    5b58:	mov	fp, #256	; 0x100
    5b5c:	sub	r3, r4, #256	; 0x100
    5b60:	str	r3, [sp, #4]
    5b64:	ldr	r3, [sp, #4]
    5b68:	cmp	r8, r3
    5b6c:	blt	5c0c <ReadSingleData.part.1+0x13e4>
    5b70:	sub	r8, r4, #1
    5b74:	lsr	r8, r8, #8
    5b78:	lsl	r3, r8, #8
    5b7c:	cmp	r4, r3
    5b80:	ble	493c <ReadSingleData.part.1+0x114>
    5b84:	sub	r4, r4, r3
    5b88:	add	r9, sp, #16
    5b8c:	ldr	r3, [r6]
    5b90:	mov	r2, r4
    5b94:	mov	r1, sl
    5b98:	mov	r0, r9
    5b9c:	bl	1588 <fread@plt>
    5ba0:	ldr	r3, [sp]
    5ba4:	add	r8, r3, r8, lsl #10
    5ba8:	add	r5, r5, r0
    5bac:	cmp	r4, r7
    5bb0:	ble	493c <ReadSingleData.part.1+0x114>
    5bb4:	lsl	r3, r7, #3
    5bb8:	add	r7, r7, #1
    5bbc:	ldrd	r0, [r9, r3]
    5bc0:	bl	402b4 <__aeabi_ul2f>
    5bc4:	str	r0, [r8], #4
    5bc8:	b	5bac <ReadSingleData.part.1+0x1384>
    5bcc:	add	r8, sp, #16
    5bd0:	ldr	r3, [r6]
    5bd4:	mov	r1, r0
    5bd8:	mov	r2, r4
    5bdc:	mov	r0, r8
    5be0:	bl	1588 <fread@plt>
    5be4:	ldr	r6, [sp]
    5be8:	mov	r5, r0
    5bec:	cmp	r4, r7
    5bf0:	ble	493c <ReadSingleData.part.1+0x114>
    5bf4:	lsl	r3, r7, #3
    5bf8:	add	r7, r7, #1
    5bfc:	ldrd	r0, [r8, r3]
    5c00:	bl	402b4 <__aeabi_ul2f>
    5c04:	str	r0, [r6], #4
    5c08:	b	5bec <ReadSingleData.part.1+0x13c4>
    5c0c:	ldr	r3, [r6]
    5c10:	mov	r2, fp
    5c14:	mov	r1, sl
    5c18:	mov	r0, r9
    5c1c:	bl	1588 <fread@plt>
    5c20:	ldr	r3, [sp]
    5c24:	add	r2, r3, r8, lsl #2
    5c28:	mov	r3, #0
    5c2c:	add	r5, r5, r0
    5c30:	ldrd	r0, [r9, r3]
    5c34:	str	r2, [sp, #12]
    5c38:	str	r3, [sp, #8]
    5c3c:	bl	402b4 <__aeabi_ul2f>
    5c40:	ldr	r3, [sp, #8]
    5c44:	ldr	r2, [sp, #12]
    5c48:	add	r3, r3, #8
    5c4c:	cmp	r3, #2048	; 0x800
    5c50:	str	r0, [r2], #4
    5c54:	bne	5c30 <ReadSingleData.part.1+0x1408>
    5c58:	add	r8, r8, #256	; 0x100
    5c5c:	b	5b64 <ReadSingleData.part.1+0x133c>

00005c60 <ReadInt64Data.part.3>:
    5c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c64:	sub	sp, sp, #2064	; 0x810
    5c68:	sub	sp, sp, #12
    5c6c:	mov	r6, r0
    5c70:	mov	r0, r2
    5c74:	mov	r5, r2
    5c78:	mov	r4, r3
    5c7c:	mov	fp, r1
    5c80:	bl	1600 <Mat_SizeOf@plt>
    5c84:	sub	r3, r5, #1
    5c88:	mov	r7, r0
    5c8c:	cmp	r3, #8
    5c90:	addls	pc, pc, r3, lsl #2
    5c94:	b	6bbc <ReadInt64Data.part.3+0xf5c>
    5c98:	b	69cc <ReadInt64Data.part.3+0xd6c>
    5c9c:	b	6ac4 <ReadInt64Data.part.3+0xe64>
    5ca0:	b	6574 <ReadInt64Data.part.3+0x914>
    5ca4:	b	67a0 <ReadInt64Data.part.3+0xb40>
    5ca8:	b	6144 <ReadInt64Data.part.3+0x4e4>
    5cac:	b	635c <ReadInt64Data.part.3+0x6fc>
    5cb0:	b	5f08 <ReadInt64Data.part.3+0x2a8>
    5cb4:	b	6bbc <ReadInt64Data.part.3+0xf5c>
    5cb8:	b	5cbc <ReadInt64Data.part.3+0x5c>
    5cbc:	ldr	sl, [r6, #20]
    5cc0:	cmp	sl, #0
    5cc4:	beq	5df8 <ReadInt64Data.part.3+0x198>
    5cc8:	cmp	r4, #256	; 0x100
    5ccc:	ble	5d48 <ReadInt64Data.part.3+0xe8>
    5cd0:	mov	r8, #0
    5cd4:	mov	r5, r8
    5cd8:	sub	sl, r4, #256	; 0x100
    5cdc:	add	r9, sp, #24
    5ce0:	cmp	r8, sl
    5ce4:	blt	5da0 <ReadInt64Data.part.3+0x140>
    5ce8:	sub	r8, r4, #1
    5cec:	lsr	r8, r8, #8
    5cf0:	lsl	r3, r8, #8
    5cf4:	cmp	r4, r3
    5cf8:	ble	5d74 <ReadInt64Data.part.3+0x114>
    5cfc:	sub	r4, r4, r3
    5d00:	add	r9, sp, #24
    5d04:	ldr	r3, [r6]
    5d08:	mov	r2, r4
    5d0c:	mov	r1, r7
    5d10:	mov	r0, r9
    5d14:	bl	1588 <fread@plt>
    5d18:	add	r8, fp, r8, lsl #11
    5d1c:	mov	r6, #0
    5d20:	add	r5, r5, r0
    5d24:	cmp	r4, r6
    5d28:	ble	5d74 <ReadInt64Data.part.3+0x114>
    5d2c:	add	r0, r9, r6, lsl #3
    5d30:	bl	1b88 <Mat_doubleSwap>
    5d34:	add	r6, r6, #1
    5d38:	vmov	r0, r1, d0
    5d3c:	bl	4037c <__aeabi_d2lz>
    5d40:	strd	r0, [r8], #8
    5d44:	b	5d24 <ReadInt64Data.part.3+0xc4>
    5d48:	add	r9, sp, #24
    5d4c:	ldr	r3, [r6]
    5d50:	mov	r1, r0
    5d54:	mov	r2, r4
    5d58:	mov	r0, r9
    5d5c:	bl	1588 <fread@plt>
    5d60:	sub	fp, fp, #8
    5d64:	mov	r6, #0
    5d68:	mov	r5, r0
    5d6c:	cmp	r4, r6
    5d70:	bgt	5d84 <ReadInt64Data.part.3+0x124>
    5d74:	mul	r0, r7, r5
    5d78:	add	sp, sp, #2064	; 0x810
    5d7c:	add	sp, sp, #12
    5d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d84:	add	r0, r9, r6, lsl #3
    5d88:	bl	1b88 <Mat_doubleSwap>
    5d8c:	add	r6, r6, #1
    5d90:	vmov	r0, r1, d0
    5d94:	bl	4037c <__aeabi_d2lz>
    5d98:	strd	r0, [fp, #8]!
    5d9c:	b	5d6c <ReadInt64Data.part.3+0x10c>
    5da0:	ldr	r3, [r6]
    5da4:	mov	r2, #256	; 0x100
    5da8:	mov	r1, r7
    5dac:	mov	r0, r9
    5db0:	bl	1588 <fread@plt>
    5db4:	add	r2, fp, r8, lsl #3
    5db8:	mov	r3, #0
    5dbc:	add	r5, r5, r0
    5dc0:	add	r0, r9, r3
    5dc4:	str	r2, [sp, #8]
    5dc8:	str	r3, [sp, #4]
    5dcc:	bl	1b88 <Mat_doubleSwap>
    5dd0:	vmov	r0, r1, d0
    5dd4:	bl	4037c <__aeabi_d2lz>
    5dd8:	ldr	r3, [sp, #4]
    5ddc:	ldr	r2, [sp, #8]
    5de0:	strd	r0, [r2, r3]
    5de4:	add	r3, r3, #8
    5de8:	cmp	r3, #2048	; 0x800
    5dec:	bne	5dc0 <ReadInt64Data.part.3+0x160>
    5df0:	add	r8, r8, #256	; 0x100
    5df4:	b	5ce0 <ReadInt64Data.part.3+0x80>
    5df8:	cmp	r4, #256	; 0x100
    5dfc:	ble	5e7c <ReadInt64Data.part.3+0x21c>
    5e00:	sub	r3, r4, #256	; 0x100
    5e04:	mov	r8, fp
    5e08:	mov	r9, sl
    5e0c:	mov	r5, sl
    5e10:	str	r3, [sp, #8]
    5e14:	add	r3, sp, #24
    5e18:	str	r3, [sp, #4]
    5e1c:	ldr	r3, [sp, #8]
    5e20:	cmp	r9, r3
    5e24:	blt	5eb8 <ReadInt64Data.part.3+0x258>
    5e28:	sub	r8, r4, #1
    5e2c:	lsr	r8, r8, #8
    5e30:	lsl	r3, r8, #8
    5e34:	cmp	r4, r3
    5e38:	ble	5d74 <ReadInt64Data.part.3+0x114>
    5e3c:	sub	r4, r4, r3
    5e40:	ldr	r3, [r6]
    5e44:	add	r6, sp, #24
    5e48:	mov	r2, r4
    5e4c:	mov	r1, r7
    5e50:	mov	r0, r6
    5e54:	bl	1588 <fread@plt>
    5e58:	add	r8, fp, r8, lsl #11
    5e5c:	add	r5, r5, r0
    5e60:	cmp	r4, sl
    5e64:	ble	5d74 <ReadInt64Data.part.3+0x114>
    5e68:	ldrd	r0, [r6], #8
    5e6c:	bl	4037c <__aeabi_d2lz>
    5e70:	add	sl, sl, #1
    5e74:	strd	r0, [r8], #8
    5e78:	b	5e60 <ReadInt64Data.part.3+0x200>
    5e7c:	ldr	r3, [r6]
    5e80:	add	r6, sp, #24
    5e84:	mov	r1, r0
    5e88:	mov	r2, r4
    5e8c:	mov	r0, r6
    5e90:	bl	1588 <fread@plt>
    5e94:	sub	fp, fp, #8
    5e98:	mov	r5, r0
    5e9c:	cmp	r4, sl
    5ea0:	ble	5d74 <ReadInt64Data.part.3+0x114>
    5ea4:	ldrd	r0, [r6], #8
    5ea8:	bl	4037c <__aeabi_d2lz>
    5eac:	add	sl, sl, #1
    5eb0:	strd	r0, [fp, #8]!
    5eb4:	b	5e9c <ReadInt64Data.part.3+0x23c>
    5eb8:	ldr	r3, [r6]
    5ebc:	mov	r2, #256	; 0x100
    5ec0:	mov	r1, r7
    5ec4:	ldr	r0, [sp, #4]
    5ec8:	bl	1588 <fread@plt>
    5ecc:	ldr	r3, [sp, #4]
    5ed0:	add	r2, r8, #2048	; 0x800
    5ed4:	add	r5, r5, r0
    5ed8:	ldrd	r0, [r3], #8
    5edc:	str	r2, [sp, #16]
    5ee0:	str	r3, [sp, #12]
    5ee4:	str	r3, [sp, #20]
    5ee8:	bl	4037c <__aeabi_d2lz>
    5eec:	ldr	r2, [sp, #16]
    5ef0:	ldr	r3, [sp, #12]
    5ef4:	strd	r0, [r8], #8
    5ef8:	cmp	r8, r2
    5efc:	bne	5ed8 <ReadInt64Data.part.3+0x278>
    5f00:	add	r9, r9, #256	; 0x100
    5f04:	b	5e1c <ReadInt64Data.part.3+0x1bc>
    5f08:	ldr	sl, [r6, #20]
    5f0c:	cmp	sl, #0
    5f10:	beq	6034 <ReadInt64Data.part.3+0x3d4>
    5f14:	cmp	r4, #256	; 0x100
    5f18:	ble	5f94 <ReadInt64Data.part.3+0x334>
    5f1c:	mov	r8, #0
    5f20:	mov	r5, r8
    5f24:	sub	sl, r4, #256	; 0x100
    5f28:	add	r9, sp, #24
    5f2c:	cmp	r8, sl
    5f30:	blt	5fdc <ReadInt64Data.part.3+0x37c>
    5f34:	sub	r8, r4, #1
    5f38:	lsr	r8, r8, #8
    5f3c:	lsl	r3, r8, #8
    5f40:	cmp	r4, r3
    5f44:	ble	5d74 <ReadInt64Data.part.3+0x114>
    5f48:	sub	r4, r4, r3
    5f4c:	add	r9, sp, #24
    5f50:	ldr	r3, [r6]
    5f54:	mov	r2, r4
    5f58:	mov	r1, r7
    5f5c:	mov	r0, r9
    5f60:	bl	1588 <fread@plt>
    5f64:	add	r8, fp, r8, lsl #11
    5f68:	mov	r6, #0
    5f6c:	add	r5, r5, r0
    5f70:	cmp	r4, r6
    5f74:	ble	5d74 <ReadInt64Data.part.3+0x114>
    5f78:	add	r0, r9, r6, lsl #2
    5f7c:	bl	1b2c <Mat_floatSwap>
    5f80:	add	r6, r6, #1
    5f84:	vmov	r0, s0
    5f88:	bl	40350 <__aeabi_f2lz>
    5f8c:	strd	r0, [r8], #8
    5f90:	b	5f70 <ReadInt64Data.part.3+0x310>
    5f94:	add	r9, sp, #24
    5f98:	ldr	r3, [r6]
    5f9c:	mov	r1, r0
    5fa0:	mov	r2, r4
    5fa4:	mov	r0, r9
    5fa8:	bl	1588 <fread@plt>
    5fac:	sub	fp, fp, #8
    5fb0:	mov	r6, #0
    5fb4:	mov	r5, r0
    5fb8:	cmp	r4, r6
    5fbc:	ble	5d74 <ReadInt64Data.part.3+0x114>
    5fc0:	add	r0, r9, r6, lsl #2
    5fc4:	bl	1b2c <Mat_floatSwap>
    5fc8:	add	r6, r6, #1
    5fcc:	vmov	r0, s0
    5fd0:	bl	40350 <__aeabi_f2lz>
    5fd4:	strd	r0, [fp, #8]!
    5fd8:	b	5fb8 <ReadInt64Data.part.3+0x358>
    5fdc:	ldr	r3, [r6]
    5fe0:	mov	r2, #256	; 0x100
    5fe4:	mov	r1, r7
    5fe8:	mov	r0, r9
    5fec:	bl	1588 <fread@plt>
    5ff0:	add	r2, fp, r8, lsl #3
    5ff4:	mov	r3, #0
    5ff8:	add	r5, r5, r0
    5ffc:	add	r0, r9, r3
    6000:	str	r2, [sp, #8]
    6004:	str	r3, [sp, #4]
    6008:	bl	1b2c <Mat_floatSwap>
    600c:	vmov	r0, s0
    6010:	bl	40350 <__aeabi_f2lz>
    6014:	ldr	r3, [sp, #4]
    6018:	ldr	r2, [sp, #8]
    601c:	add	r3, r3, #4
    6020:	cmp	r3, #1024	; 0x400
    6024:	strd	r0, [r2], #8
    6028:	bne	5ffc <ReadInt64Data.part.3+0x39c>
    602c:	add	r8, r8, #256	; 0x100
    6030:	b	5f2c <ReadInt64Data.part.3+0x2cc>
    6034:	cmp	r4, #256	; 0x100
    6038:	ble	60b8 <ReadInt64Data.part.3+0x458>
    603c:	sub	r3, r4, #256	; 0x100
    6040:	mov	r8, fp
    6044:	mov	r9, sl
    6048:	mov	r5, sl
    604c:	str	r3, [sp, #8]
    6050:	add	r3, sp, #24
    6054:	str	r3, [sp, #4]
    6058:	ldr	r3, [sp, #8]
    605c:	cmp	r9, r3
    6060:	blt	60f4 <ReadInt64Data.part.3+0x494>
    6064:	sub	r8, r4, #1
    6068:	lsr	r8, r8, #8
    606c:	lsl	r3, r8, #8
    6070:	cmp	r4, r3
    6074:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6078:	sub	r4, r4, r3
    607c:	ldr	r3, [r6]
    6080:	add	r6, sp, #24
    6084:	mov	r2, r4
    6088:	mov	r1, r7
    608c:	mov	r0, r6
    6090:	bl	1588 <fread@plt>
    6094:	add	r8, fp, r8, lsl #11
    6098:	add	r5, r5, r0
    609c:	cmp	r4, sl
    60a0:	ble	5d74 <ReadInt64Data.part.3+0x114>
    60a4:	ldr	r0, [r6], #4
    60a8:	bl	40350 <__aeabi_f2lz>
    60ac:	add	sl, sl, #1
    60b0:	strd	r0, [r8], #8
    60b4:	b	609c <ReadInt64Data.part.3+0x43c>
    60b8:	ldr	r3, [r6]
    60bc:	add	r6, sp, #24
    60c0:	mov	r1, r0
    60c4:	mov	r2, r4
    60c8:	mov	r0, r6
    60cc:	bl	1588 <fread@plt>
    60d0:	sub	fp, fp, #8
    60d4:	mov	r5, r0
    60d8:	cmp	r4, sl
    60dc:	ble	5d74 <ReadInt64Data.part.3+0x114>
    60e0:	ldr	r0, [r6], #4
    60e4:	bl	40350 <__aeabi_f2lz>
    60e8:	add	sl, sl, #1
    60ec:	strd	r0, [fp, #8]!
    60f0:	b	60d8 <ReadInt64Data.part.3+0x478>
    60f4:	ldr	r3, [r6]
    60f8:	mov	r2, #256	; 0x100
    60fc:	mov	r1, r7
    6100:	ldr	r0, [sp, #4]
    6104:	bl	1588 <fread@plt>
    6108:	ldr	r3, [sp, #4]
    610c:	add	r2, r8, #2048	; 0x800
    6110:	add	r5, r5, r0
    6114:	ldr	r0, [r3], #4
    6118:	str	r2, [sp, #16]
    611c:	str	r3, [sp, #12]
    6120:	str	r3, [sp, #20]
    6124:	bl	40350 <__aeabi_f2lz>
    6128:	ldr	r2, [sp, #16]
    612c:	ldr	r3, [sp, #12]
    6130:	strd	r0, [r8], #8
    6134:	cmp	r8, r2
    6138:	bne	6114 <ReadInt64Data.part.3+0x4b4>
    613c:	add	r9, r9, #256	; 0x100
    6140:	b	6058 <ReadInt64Data.part.3+0x3f8>
    6144:	ldr	r8, [r6, #20]
    6148:	cmp	r8, #0
    614c:	beq	6264 <ReadInt64Data.part.3+0x604>
    6150:	cmp	r4, #256	; 0x100
    6154:	ble	61cc <ReadInt64Data.part.3+0x56c>
    6158:	mov	r8, #0
    615c:	mov	r5, r8
    6160:	sub	sl, r4, #256	; 0x100
    6164:	add	r9, sp, #24
    6168:	cmp	r8, sl
    616c:	blt	6210 <ReadInt64Data.part.3+0x5b0>
    6170:	sub	r8, r4, #1
    6174:	lsr	r8, r8, #8
    6178:	lsl	r3, r8, #8
    617c:	cmp	r4, r3
    6180:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6184:	sub	r4, r4, r3
    6188:	add	r9, sp, #24
    618c:	ldr	r3, [r6]
    6190:	mov	r2, r4
    6194:	mov	r1, r7
    6198:	mov	r0, r9
    619c:	bl	1588 <fread@plt>
    61a0:	add	r8, fp, r8, lsl #11
    61a4:	mov	r6, #0
    61a8:	add	r5, r5, r0
    61ac:	cmp	r4, r6
    61b0:	ble	5d74 <ReadInt64Data.part.3+0x114>
    61b4:	add	r0, r9, r6, lsl #2
    61b8:	bl	1a18 <Mat_int32Swap>
    61bc:	add	r6, r6, #1
    61c0:	asr	r1, r0, #31
    61c4:	strd	r0, [r8], #8
    61c8:	b	61ac <ReadInt64Data.part.3+0x54c>
    61cc:	add	r9, sp, #24
    61d0:	ldr	r3, [r6]
    61d4:	mov	r1, r0
    61d8:	mov	r2, r4
    61dc:	mov	r0, r9
    61e0:	bl	1588 <fread@plt>
    61e4:	sub	fp, fp, #8
    61e8:	mov	r6, #0
    61ec:	mov	r5, r0
    61f0:	cmp	r4, r6
    61f4:	ble	5d74 <ReadInt64Data.part.3+0x114>
    61f8:	add	r0, r9, r6, lsl #2
    61fc:	bl	1a18 <Mat_int32Swap>
    6200:	add	r6, r6, #1
    6204:	asr	r1, r0, #31
    6208:	strd	r0, [fp, #8]!
    620c:	b	61f0 <ReadInt64Data.part.3+0x590>
    6210:	ldr	r3, [r6]
    6214:	mov	r2, #256	; 0x100
    6218:	mov	r1, r7
    621c:	mov	r0, r9
    6220:	bl	1588 <fread@plt>
    6224:	add	r2, fp, r8, lsl #3
    6228:	mov	r3, #0
    622c:	add	r5, r5, r0
    6230:	add	r0, r9, r3
    6234:	str	r2, [sp, #8]
    6238:	str	r3, [sp, #4]
    623c:	bl	1a18 <Mat_int32Swap>
    6240:	ldr	r3, [sp, #4]
    6244:	ldr	r2, [sp, #8]
    6248:	add	r3, r3, #4
    624c:	cmp	r3, #1024	; 0x400
    6250:	asr	r1, r0, #31
    6254:	strd	r0, [r2], #8
    6258:	bne	6230 <ReadInt64Data.part.3+0x5d0>
    625c:	add	r8, r8, #256	; 0x100
    6260:	b	6168 <ReadInt64Data.part.3+0x508>
    6264:	cmp	r4, #256	; 0x100
    6268:	ble	62e0 <ReadInt64Data.part.3+0x680>
    626c:	mov	r9, r8
    6270:	mov	r5, r8
    6274:	add	sl, sp, #24
    6278:	sub	r3, r4, #256	; 0x100
    627c:	str	r3, [sp, #4]
    6280:	ldr	r3, [sp, #4]
    6284:	cmp	r9, r3
    6288:	blt	631c <ReadInt64Data.part.3+0x6bc>
    628c:	sub	r9, r4, #1
    6290:	lsr	r9, r9, #8
    6294:	lsl	r3, r9, #8
    6298:	cmp	r4, r3
    629c:	ble	5d74 <ReadInt64Data.part.3+0x114>
    62a0:	sub	r4, r4, r3
    62a4:	add	sl, sp, #24
    62a8:	ldr	r3, [r6]
    62ac:	mov	r2, r4
    62b0:	mov	r1, r7
    62b4:	mov	r0, sl
    62b8:	bl	1588 <fread@plt>
    62bc:	add	r9, fp, r9, lsl #11
    62c0:	add	r5, r5, r0
    62c4:	cmp	r4, r8
    62c8:	ble	5d74 <ReadInt64Data.part.3+0x114>
    62cc:	ldr	r2, [sl, r8, lsl #2]
    62d0:	add	r8, r8, #1
    62d4:	asr	r3, r2, #31
    62d8:	strd	r2, [r9], #8
    62dc:	b	62c4 <ReadInt64Data.part.3+0x664>
    62e0:	add	r9, sp, #24
    62e4:	mov	r1, r0
    62e8:	ldr	r3, [r6]
    62ec:	mov	r2, r4
    62f0:	mov	r0, r9
    62f4:	bl	1588 <fread@plt>
    62f8:	sub	r1, fp, #8
    62fc:	mov	r5, r0
    6300:	cmp	r4, r8
    6304:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6308:	ldr	r2, [r9, r8, lsl #2]
    630c:	add	r8, r8, #1
    6310:	asr	r3, r2, #31
    6314:	strd	r2, [r1, #8]!
    6318:	b	6300 <ReadInt64Data.part.3+0x6a0>
    631c:	ldr	r3, [r6]
    6320:	mov	r2, #256	; 0x100
    6324:	mov	r1, r7
    6328:	mov	r0, sl
    632c:	bl	1588 <fread@plt>
    6330:	add	r2, fp, r9, lsl #3
    6334:	mov	r3, r8
    6338:	add	r5, r5, r0
    633c:	ldr	r0, [sl, r3, lsl #2]
    6340:	add	r3, r3, #1
    6344:	cmp	r3, #256	; 0x100
    6348:	asr	r1, r0, #31
    634c:	strd	r0, [r2], #8
    6350:	bne	633c <ReadInt64Data.part.3+0x6dc>
    6354:	add	r9, r9, #256	; 0x100
    6358:	b	6280 <ReadInt64Data.part.3+0x620>
    635c:	ldr	r8, [r6, #20]
    6360:	cmp	r8, #0
    6364:	beq	647c <ReadInt64Data.part.3+0x81c>
    6368:	cmp	r4, #256	; 0x100
    636c:	ble	63e4 <ReadInt64Data.part.3+0x784>
    6370:	mov	r8, #0
    6374:	mov	r5, r8
    6378:	sub	sl, r4, #256	; 0x100
    637c:	add	r9, sp, #24
    6380:	cmp	r8, sl
    6384:	blt	6428 <ReadInt64Data.part.3+0x7c8>
    6388:	sub	r8, r4, #1
    638c:	lsr	r8, r8, #8
    6390:	lsl	r3, r8, #8
    6394:	cmp	r4, r3
    6398:	ble	5d74 <ReadInt64Data.part.3+0x114>
    639c:	sub	r4, r4, r3
    63a0:	add	r9, sp, #24
    63a4:	ldr	r3, [r6]
    63a8:	mov	r2, r4
    63ac:	mov	r1, r7
    63b0:	mov	r0, r9
    63b4:	bl	1588 <fread@plt>
    63b8:	add	r8, fp, r8, lsl #11
    63bc:	mov	r6, #0
    63c0:	add	r5, r5, r0
    63c4:	cmp	r4, r6
    63c8:	ble	5d74 <ReadInt64Data.part.3+0x114>
    63cc:	add	r0, r9, r6, lsl #2
    63d0:	bl	1a80 <Mat_uint32Swap>
    63d4:	mov	r1, #0
    63d8:	add	r6, r6, #1
    63dc:	strd	r0, [r8], #8
    63e0:	b	63c4 <ReadInt64Data.part.3+0x764>
    63e4:	add	r9, sp, #24
    63e8:	ldr	r3, [r6]
    63ec:	mov	r1, r0
    63f0:	mov	r2, r4
    63f4:	mov	r0, r9
    63f8:	bl	1588 <fread@plt>
    63fc:	sub	fp, fp, #8
    6400:	mov	r6, #0
    6404:	mov	r5, r0
    6408:	cmp	r4, r6
    640c:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6410:	add	r0, r9, r6, lsl #2
    6414:	bl	1a80 <Mat_uint32Swap>
    6418:	mov	r1, #0
    641c:	add	r6, r6, #1
    6420:	strd	r0, [fp, #8]!
    6424:	b	6408 <ReadInt64Data.part.3+0x7a8>
    6428:	ldr	r3, [r6]
    642c:	mov	r2, #256	; 0x100
    6430:	mov	r1, r7
    6434:	mov	r0, r9
    6438:	bl	1588 <fread@plt>
    643c:	add	r2, fp, r8, lsl #3
    6440:	mov	r3, #0
    6444:	add	r5, r5, r0
    6448:	add	r0, r9, r3
    644c:	str	r2, [sp, #8]
    6450:	str	r3, [sp, #4]
    6454:	bl	1a80 <Mat_uint32Swap>
    6458:	ldr	r3, [sp, #4]
    645c:	ldr	r2, [sp, #8]
    6460:	mov	r1, #0
    6464:	add	r3, r3, #4
    6468:	cmp	r3, #1024	; 0x400
    646c:	strd	r0, [r2], #8
    6470:	bne	6448 <ReadInt64Data.part.3+0x7e8>
    6474:	add	r8, r8, #256	; 0x100
    6478:	b	6380 <ReadInt64Data.part.3+0x720>
    647c:	cmp	r4, #256	; 0x100
    6480:	ble	64f8 <ReadInt64Data.part.3+0x898>
    6484:	mov	r9, r8
    6488:	mov	r5, r8
    648c:	add	sl, sp, #24
    6490:	sub	r3, r4, #256	; 0x100
    6494:	str	r3, [sp, #4]
    6498:	ldr	r3, [sp, #4]
    649c:	cmp	r9, r3
    64a0:	blt	6534 <ReadInt64Data.part.3+0x8d4>
    64a4:	sub	r9, r4, #1
    64a8:	lsr	r9, r9, #8
    64ac:	lsl	r3, r9, #8
    64b0:	cmp	r4, r3
    64b4:	ble	5d74 <ReadInt64Data.part.3+0x114>
    64b8:	sub	r4, r4, r3
    64bc:	add	sl, sp, #24
    64c0:	ldr	r3, [r6]
    64c4:	mov	r2, r4
    64c8:	mov	r1, r7
    64cc:	mov	r0, sl
    64d0:	bl	1588 <fread@plt>
    64d4:	add	r9, fp, r9, lsl #11
    64d8:	add	r5, r5, r0
    64dc:	cmp	r4, r8
    64e0:	ble	5d74 <ReadInt64Data.part.3+0x114>
    64e4:	ldr	r2, [sl, r8, lsl #2]
    64e8:	mov	r3, #0
    64ec:	add	r8, r8, #1
    64f0:	strd	r2, [r9], #8
    64f4:	b	64dc <ReadInt64Data.part.3+0x87c>
    64f8:	add	r9, sp, #24
    64fc:	mov	r1, r0
    6500:	ldr	r3, [r6]
    6504:	mov	r2, r4
    6508:	mov	r0, r9
    650c:	bl	1588 <fread@plt>
    6510:	sub	r1, fp, #8
    6514:	mov	r5, r0
    6518:	cmp	r4, r8
    651c:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6520:	ldr	r2, [r9, r8, lsl #2]
    6524:	mov	r3, #0
    6528:	add	r8, r8, #1
    652c:	strd	r2, [r1, #8]!
    6530:	b	6518 <ReadInt64Data.part.3+0x8b8>
    6534:	ldr	r3, [r6]
    6538:	mov	r2, #256	; 0x100
    653c:	mov	r1, r7
    6540:	mov	r0, sl
    6544:	bl	1588 <fread@plt>
    6548:	add	r2, fp, r9, lsl #3
    654c:	mov	r3, r8
    6550:	add	r5, r5, r0
    6554:	ldr	r0, [sl, r3, lsl #2]
    6558:	mov	r1, #0
    655c:	add	r3, r3, #1
    6560:	cmp	r3, #256	; 0x100
    6564:	strd	r0, [r2], #8
    6568:	bne	6554 <ReadInt64Data.part.3+0x8f4>
    656c:	add	r9, r9, #256	; 0x100
    6570:	b	6498 <ReadInt64Data.part.3+0x838>
    6574:	ldr	r8, [r6, #20]
    6578:	cmp	r8, #0
    657c:	beq	66a0 <ReadInt64Data.part.3+0xa40>
    6580:	cmp	r4, #256	; 0x100
    6584:	ble	6600 <ReadInt64Data.part.3+0x9a0>
    6588:	mov	r8, #0
    658c:	mov	r5, r8
    6590:	sub	sl, r4, #256	; 0x100
    6594:	add	r9, sp, #24
    6598:	cmp	r8, sl
    659c:	blt	6648 <ReadInt64Data.part.3+0x9e8>
    65a0:	sub	r8, r4, #1
    65a4:	lsr	r8, r8, #8
    65a8:	lsl	r3, r8, #8
    65ac:	cmp	r4, r3
    65b0:	ble	5d74 <ReadInt64Data.part.3+0x114>
    65b4:	sub	r4, r4, r3
    65b8:	add	r9, sp, #24
    65bc:	ldr	r3, [r6]
    65c0:	mov	r2, r4
    65c4:	mov	r1, r7
    65c8:	mov	r0, r9
    65cc:	bl	1588 <fread@plt>
    65d0:	add	r8, fp, r8, lsl #11
    65d4:	mov	r6, #0
    65d8:	add	r5, r5, r0
    65dc:	cmp	r4, r6
    65e0:	ble	5d74 <ReadInt64Data.part.3+0x114>
    65e4:	add	r0, r9, r6, lsl #1
    65e8:	bl	1adc <Mat_int16Swap>
    65ec:	add	r6, r6, #1
    65f0:	sxth	r0, r0
    65f4:	asr	r1, r0, #31
    65f8:	strd	r0, [r8], #8
    65fc:	b	65dc <ReadInt64Data.part.3+0x97c>
    6600:	add	r9, sp, #24
    6604:	ldr	r3, [r6]
    6608:	mov	r1, r0
    660c:	mov	r2, r4
    6610:	mov	r0, r9
    6614:	bl	1588 <fread@plt>
    6618:	sub	fp, fp, #8
    661c:	mov	r6, #0
    6620:	mov	r5, r0
    6624:	cmp	r4, r6
    6628:	ble	5d74 <ReadInt64Data.part.3+0x114>
    662c:	add	r0, r9, r6, lsl #1
    6630:	bl	1adc <Mat_int16Swap>
    6634:	add	r6, r6, #1
    6638:	sxth	r0, r0
    663c:	asr	r1, r0, #31
    6640:	strd	r0, [fp, #8]!
    6644:	b	6624 <ReadInt64Data.part.3+0x9c4>
    6648:	ldr	r3, [r6]
    664c:	mov	r2, #256	; 0x100
    6650:	mov	r1, r7
    6654:	mov	r0, r9
    6658:	bl	1588 <fread@plt>
    665c:	add	r2, fp, r8, lsl #3
    6660:	mov	r3, #0
    6664:	add	r5, r5, r0
    6668:	add	r0, r9, r3
    666c:	str	r2, [sp, #8]
    6670:	str	r3, [sp, #4]
    6674:	bl	1adc <Mat_int16Swap>
    6678:	ldr	r3, [sp, #4]
    667c:	ldr	r2, [sp, #8]
    6680:	add	r3, r3, #2
    6684:	cmp	r3, #512	; 0x200
    6688:	sxth	r0, r0
    668c:	asr	r1, r0, #31
    6690:	strd	r0, [r2], #8
    6694:	bne	6668 <ReadInt64Data.part.3+0xa08>
    6698:	add	r8, r8, #256	; 0x100
    669c:	b	6598 <ReadInt64Data.part.3+0x938>
    66a0:	cmp	r4, #256	; 0x100
    66a4:	ble	6720 <ReadInt64Data.part.3+0xac0>
    66a8:	mov	r9, r8
    66ac:	mov	r5, r8
    66b0:	add	sl, sp, #24
    66b4:	sub	r3, r4, #256	; 0x100
    66b8:	str	r3, [sp, #4]
    66bc:	ldr	r3, [sp, #4]
    66c0:	cmp	r9, r3
    66c4:	blt	6760 <ReadInt64Data.part.3+0xb00>
    66c8:	sub	r9, r4, #1
    66cc:	lsr	r9, r9, #8
    66d0:	lsl	r3, r9, #8
    66d4:	cmp	r4, r3
    66d8:	ble	5d74 <ReadInt64Data.part.3+0x114>
    66dc:	sub	r4, r4, r3
    66e0:	add	sl, sp, #24
    66e4:	ldr	r3, [r6]
    66e8:	mov	r2, r4
    66ec:	mov	r1, r7
    66f0:	mov	r0, sl
    66f4:	bl	1588 <fread@plt>
    66f8:	add	r9, fp, r9, lsl #11
    66fc:	add	r5, r5, r0
    6700:	cmp	r4, r8
    6704:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6708:	lsl	r3, r8, #1
    670c:	add	r8, r8, #1
    6710:	ldrsh	r2, [sl, r3]
    6714:	asr	r3, r2, #31
    6718:	strd	r2, [r9], #8
    671c:	b	6700 <ReadInt64Data.part.3+0xaa0>
    6720:	add	r9, sp, #24
    6724:	ldr	r3, [r6]
    6728:	mov	r1, r0
    672c:	mov	r2, r4
    6730:	mov	r0, r9
    6734:	bl	1588 <fread@plt>
    6738:	sub	r3, fp, #8
    673c:	mov	r5, r0
    6740:	cmp	r4, r8
    6744:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6748:	lsl	r2, r8, #1
    674c:	add	r8, r8, #1
    6750:	ldrsh	r0, [r9, r2]
    6754:	asr	r1, r0, #31
    6758:	strd	r0, [r3, #8]!
    675c:	b	6740 <ReadInt64Data.part.3+0xae0>
    6760:	ldr	r3, [r6]
    6764:	mov	r2, #256	; 0x100
    6768:	mov	r1, r7
    676c:	mov	r0, sl
    6770:	bl	1588 <fread@plt>
    6774:	add	r2, fp, r9, lsl #3
    6778:	mov	r3, #0
    677c:	add	r5, r5, r0
    6780:	ldrsh	r0, [sl, r3]
    6784:	add	r3, r3, #2
    6788:	cmp	r3, #512	; 0x200
    678c:	asr	r1, r0, #31
    6790:	strd	r0, [r2], #8
    6794:	bne	6780 <ReadInt64Data.part.3+0xb20>
    6798:	add	r9, r9, #256	; 0x100
    679c:	b	66bc <ReadInt64Data.part.3+0xa5c>
    67a0:	ldr	r8, [r6, #20]
    67a4:	cmp	r8, #0
    67a8:	beq	68cc <ReadInt64Data.part.3+0xc6c>
    67ac:	cmp	r4, #256	; 0x100
    67b0:	ble	682c <ReadInt64Data.part.3+0xbcc>
    67b4:	mov	r8, #0
    67b8:	mov	r5, r8
    67bc:	sub	sl, r4, #256	; 0x100
    67c0:	add	r9, sp, #24
    67c4:	cmp	r8, sl
    67c8:	blt	6874 <ReadInt64Data.part.3+0xc14>
    67cc:	sub	r8, r4, #1
    67d0:	lsr	r8, r8, #8
    67d4:	lsl	r3, r8, #8
    67d8:	cmp	r4, r3
    67dc:	ble	5d74 <ReadInt64Data.part.3+0x114>
    67e0:	sub	r4, r4, r3
    67e4:	add	r9, sp, #24
    67e8:	ldr	r3, [r6]
    67ec:	mov	r2, r4
    67f0:	mov	r1, r7
    67f4:	mov	r0, r9
    67f8:	bl	1588 <fread@plt>
    67fc:	add	r8, fp, r8, lsl #11
    6800:	mov	r6, #0
    6804:	add	r5, r5, r0
    6808:	cmp	r4, r6
    680c:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6810:	add	r0, r9, r6, lsl #1
    6814:	bl	1b10 <Mat_uint16Swap>
    6818:	mov	r1, #0
    681c:	add	r6, r6, #1
    6820:	uxth	r0, r0
    6824:	strd	r0, [r8], #8
    6828:	b	6808 <ReadInt64Data.part.3+0xba8>
    682c:	add	r9, sp, #24
    6830:	ldr	r3, [r6]
    6834:	mov	r1, r0
    6838:	mov	r2, r4
    683c:	mov	r0, r9
    6840:	bl	1588 <fread@plt>
    6844:	sub	fp, fp, #8
    6848:	mov	r6, #0
    684c:	mov	r5, r0
    6850:	cmp	r4, r6
    6854:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6858:	add	r0, r9, r6, lsl #1
    685c:	bl	1b10 <Mat_uint16Swap>
    6860:	mov	r1, #0
    6864:	add	r6, r6, #1
    6868:	uxth	r0, r0
    686c:	strd	r0, [fp, #8]!
    6870:	b	6850 <ReadInt64Data.part.3+0xbf0>
    6874:	ldr	r3, [r6]
    6878:	mov	r2, #256	; 0x100
    687c:	mov	r1, r7
    6880:	mov	r0, r9
    6884:	bl	1588 <fread@plt>
    6888:	add	r2, fp, r8, lsl #3
    688c:	mov	r3, #0
    6890:	add	r5, r5, r0
    6894:	add	r0, r9, r3
    6898:	str	r2, [sp, #8]
    689c:	str	r3, [sp, #4]
    68a0:	bl	1b10 <Mat_uint16Swap>
    68a4:	ldr	r3, [sp, #4]
    68a8:	ldr	r2, [sp, #8]
    68ac:	mov	r1, #0
    68b0:	add	r3, r3, #2
    68b4:	cmp	r3, #512	; 0x200
    68b8:	uxth	r0, r0
    68bc:	strd	r0, [r2], #8
    68c0:	bne	6894 <ReadInt64Data.part.3+0xc34>
    68c4:	add	r8, r8, #256	; 0x100
    68c8:	b	67c4 <ReadInt64Data.part.3+0xb64>
    68cc:	cmp	r4, #256	; 0x100
    68d0:	ble	694c <ReadInt64Data.part.3+0xcec>
    68d4:	mov	r9, r8
    68d8:	mov	r5, r8
    68dc:	add	sl, sp, #24
    68e0:	sub	r3, r4, #256	; 0x100
    68e4:	str	r3, [sp, #4]
    68e8:	ldr	r3, [sp, #4]
    68ec:	cmp	r9, r3
    68f0:	blt	698c <ReadInt64Data.part.3+0xd2c>
    68f4:	sub	r9, r4, #1
    68f8:	lsr	r9, r9, #8
    68fc:	lsl	r3, r9, #8
    6900:	cmp	r4, r3
    6904:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6908:	sub	r4, r4, r3
    690c:	add	sl, sp, #24
    6910:	ldr	r3, [r6]
    6914:	mov	r2, r4
    6918:	mov	r1, r7
    691c:	mov	r0, sl
    6920:	bl	1588 <fread@plt>
    6924:	add	r9, fp, r9, lsl #11
    6928:	add	r5, r5, r0
    692c:	cmp	r4, r8
    6930:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6934:	lsl	r3, r8, #1
    6938:	add	r8, r8, #1
    693c:	ldrh	r2, [sl, r3]
    6940:	mov	r3, #0
    6944:	strd	r2, [r9], #8
    6948:	b	692c <ReadInt64Data.part.3+0xccc>
    694c:	add	r9, sp, #24
    6950:	ldr	r3, [r6]
    6954:	mov	r1, r0
    6958:	mov	r2, r4
    695c:	mov	r0, r9
    6960:	bl	1588 <fread@plt>
    6964:	sub	r3, fp, #8
    6968:	mov	r5, r0
    696c:	cmp	r4, r8
    6970:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6974:	lsl	r2, r8, #1
    6978:	mov	r1, #0
    697c:	ldrh	r0, [r9, r2]
    6980:	add	r8, r8, #1
    6984:	strd	r0, [r3, #8]!
    6988:	b	696c <ReadInt64Data.part.3+0xd0c>
    698c:	ldr	r3, [r6]
    6990:	mov	r2, #256	; 0x100
    6994:	mov	r1, r7
    6998:	mov	r0, sl
    699c:	bl	1588 <fread@plt>
    69a0:	add	r2, fp, r9, lsl #3
    69a4:	mov	r3, #0
    69a8:	add	r5, r5, r0
    69ac:	ldrh	r0, [sl, r3]
    69b0:	mov	r1, #0
    69b4:	add	r3, r3, #2
    69b8:	cmp	r3, #512	; 0x200
    69bc:	strd	r0, [r2], #8
    69c0:	bne	69ac <ReadInt64Data.part.3+0xd4c>
    69c4:	add	r9, r9, #256	; 0x100
    69c8:	b	68e8 <ReadInt64Data.part.3+0xc88>
    69cc:	cmp	r4, #256	; 0x100
    69d0:	ble	6a44 <ReadInt64Data.part.3+0xde4>
    69d4:	mov	r8, #0
    69d8:	mov	r5, r8
    69dc:	sub	sl, r4, #256	; 0x100
    69e0:	add	r9, sp, #24
    69e4:	cmp	r8, sl
    69e8:	blt	6a84 <ReadInt64Data.part.3+0xe24>
    69ec:	sub	r8, r4, #1
    69f0:	lsr	r8, r8, #8
    69f4:	lsl	r3, r8, #8
    69f8:	cmp	r4, r3
    69fc:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6a00:	sub	r4, r4, r3
    6a04:	add	r9, sp, #24
    6a08:	mov	r1, r7
    6a0c:	ldr	r3, [r6]
    6a10:	mov	r2, r4
    6a14:	mov	r0, r9
    6a18:	bl	1588 <fread@plt>
    6a1c:	add	r8, fp, r8, lsl #11
    6a20:	mov	r1, #0
    6a24:	add	r5, r5, r0
    6a28:	cmp	r4, r1
    6a2c:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6a30:	ldrsb	r2, [r9, r1]
    6a34:	add	r1, r1, #1
    6a38:	asr	r3, r2, #31
    6a3c:	strd	r2, [r8], #8
    6a40:	b	6a28 <ReadInt64Data.part.3+0xdc8>
    6a44:	add	r8, sp, #24
    6a48:	ldr	r3, [r6]
    6a4c:	mov	r2, r4
    6a50:	mov	r1, r0
    6a54:	mov	r0, r8
    6a58:	bl	1588 <fread@plt>
    6a5c:	sub	r2, fp, #8
    6a60:	mov	r3, #0
    6a64:	mov	r5, r0
    6a68:	cmp	r4, r3
    6a6c:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6a70:	ldrsb	r0, [r8, r3]
    6a74:	add	r3, r3, #1
    6a78:	asr	r1, r0, #31
    6a7c:	strd	r0, [r2, #8]!
    6a80:	b	6a68 <ReadInt64Data.part.3+0xe08>
    6a84:	ldr	r3, [r6]
    6a88:	mov	r2, #256	; 0x100
    6a8c:	mov	r1, r7
    6a90:	mov	r0, r9
    6a94:	bl	1588 <fread@plt>
    6a98:	add	r2, fp, r8, lsl #3
    6a9c:	mov	r3, #0
    6aa0:	add	r5, r5, r0
    6aa4:	ldrsb	r0, [r9, r3]
    6aa8:	add	r3, r3, #1
    6aac:	cmp	r3, #256	; 0x100
    6ab0:	asr	r1, r0, #31
    6ab4:	strd	r0, [r2], #8
    6ab8:	bne	6aa4 <ReadInt64Data.part.3+0xe44>
    6abc:	add	r8, r8, #256	; 0x100
    6ac0:	b	69e4 <ReadInt64Data.part.3+0xd84>
    6ac4:	cmp	r4, #256	; 0x100
    6ac8:	ble	6b3c <ReadInt64Data.part.3+0xedc>
    6acc:	mov	r8, #0
    6ad0:	mov	r5, r8
    6ad4:	sub	sl, r4, #256	; 0x100
    6ad8:	add	r9, sp, #24
    6adc:	cmp	r8, sl
    6ae0:	blt	6b7c <ReadInt64Data.part.3+0xf1c>
    6ae4:	sub	r8, r4, #1
    6ae8:	lsr	r8, r8, #8
    6aec:	lsl	r3, r8, #8
    6af0:	cmp	r4, r3
    6af4:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6af8:	sub	r4, r4, r3
    6afc:	add	r9, sp, #24
    6b00:	mov	r1, r7
    6b04:	ldr	r3, [r6]
    6b08:	mov	r2, r4
    6b0c:	mov	r0, r9
    6b10:	bl	1588 <fread@plt>
    6b14:	add	r8, fp, r8, lsl #11
    6b18:	mov	r1, #0
    6b1c:	add	r5, r5, r0
    6b20:	cmp	r4, r1
    6b24:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6b28:	ldrb	r2, [r9, r1]
    6b2c:	mov	r3, #0
    6b30:	add	r1, r1, #1
    6b34:	strd	r2, [r8], #8
    6b38:	b	6b20 <ReadInt64Data.part.3+0xec0>
    6b3c:	add	r8, sp, #24
    6b40:	ldr	r3, [r6]
    6b44:	mov	r2, r4
    6b48:	mov	r1, r0
    6b4c:	mov	r0, r8
    6b50:	bl	1588 <fread@plt>
    6b54:	sub	r2, fp, #8
    6b58:	mov	r3, #0
    6b5c:	mov	r5, r0
    6b60:	cmp	r4, r3
    6b64:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6b68:	ldrb	r0, [r8, r3]
    6b6c:	mov	r1, #0
    6b70:	add	r3, r3, #1
    6b74:	strd	r0, [r2, #8]!
    6b78:	b	6b60 <ReadInt64Data.part.3+0xf00>
    6b7c:	ldr	r3, [r6]
    6b80:	mov	r2, #256	; 0x100
    6b84:	mov	r1, r7
    6b88:	mov	r0, r9
    6b8c:	bl	1588 <fread@plt>
    6b90:	add	r2, fp, r8, lsl #3
    6b94:	mov	r3, #0
    6b98:	add	r5, r5, r0
    6b9c:	ldrb	r0, [r9, r3]
    6ba0:	mov	r1, #0
    6ba4:	add	r3, r3, #1
    6ba8:	cmp	r3, #256	; 0x100
    6bac:	strd	r0, [r2], #8
    6bb0:	bne	6b9c <ReadInt64Data.part.3+0xf3c>
    6bb4:	add	r8, r8, #256	; 0x100
    6bb8:	b	6adc <ReadInt64Data.part.3+0xe7c>
    6bbc:	cmp	r5, #12
    6bc0:	bne	6dcc <ReadInt64Data.part.3+0x116c>
    6bc4:	ldr	r8, [r6, #20]
    6bc8:	cmp	r8, #0
    6bcc:	beq	6cd8 <ReadInt64Data.part.3+0x1078>
    6bd0:	cmp	r4, #256	; 0x100
    6bd4:	ble	6c48 <ReadInt64Data.part.3+0xfe8>
    6bd8:	mov	r8, #0
    6bdc:	mov	r5, r8
    6be0:	sub	sl, r4, #256	; 0x100
    6be4:	add	r9, sp, #24
    6be8:	cmp	r8, sl
    6bec:	blt	6c88 <ReadInt64Data.part.3+0x1028>
    6bf0:	sub	r8, r4, #1
    6bf4:	lsr	r8, r8, #8
    6bf8:	lsl	r3, r8, #8
    6bfc:	cmp	r4, r3
    6c00:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6c04:	sub	r4, r4, r3
    6c08:	add	r9, sp, #24
    6c0c:	ldr	r3, [r6]
    6c10:	mov	r2, r4
    6c14:	mov	r1, r7
    6c18:	mov	r0, r9
    6c1c:	bl	1588 <fread@plt>
    6c20:	add	r8, fp, r8, lsl #11
    6c24:	mov	r6, #0
    6c28:	add	r5, r5, r0
    6c2c:	cmp	r4, r6
    6c30:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6c34:	add	r0, r9, r6, lsl #3
    6c38:	bl	18bc <Mat_int64Swap>
    6c3c:	add	r6, r6, #1
    6c40:	strd	r0, [r8], #8
    6c44:	b	6c2c <ReadInt64Data.part.3+0xfcc>
    6c48:	add	r9, sp, #24
    6c4c:	ldr	r3, [r6]
    6c50:	mov	r1, r0
    6c54:	mov	r2, r4
    6c58:	mov	r0, r9
    6c5c:	bl	1588 <fread@plt>
    6c60:	sub	fp, fp, #8
    6c64:	mov	r6, #0
    6c68:	mov	r5, r0
    6c6c:	cmp	r4, r6
    6c70:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6c74:	add	r0, r9, r6, lsl #3
    6c78:	bl	18bc <Mat_int64Swap>
    6c7c:	add	r6, r6, #1
    6c80:	strd	r0, [fp, #8]!
    6c84:	b	6c6c <ReadInt64Data.part.3+0x100c>
    6c88:	ldr	r3, [r6]
    6c8c:	mov	r2, #256	; 0x100
    6c90:	mov	r1, r7
    6c94:	mov	r0, r9
    6c98:	bl	1588 <fread@plt>
    6c9c:	add	r2, fp, r8, lsl #3
    6ca0:	mov	r3, #0
    6ca4:	add	r5, r5, r0
    6ca8:	add	r0, r9, r3
    6cac:	str	r2, [sp, #8]
    6cb0:	str	r3, [sp, #4]
    6cb4:	bl	18bc <Mat_int64Swap>
    6cb8:	ldr	r3, [sp, #4]
    6cbc:	ldr	r2, [sp, #8]
    6cc0:	strd	r0, [r2, r3]
    6cc4:	add	r3, r3, #8
    6cc8:	cmp	r3, #2048	; 0x800
    6ccc:	bne	6ca8 <ReadInt64Data.part.3+0x1048>
    6cd0:	add	r8, r8, #256	; 0x100
    6cd4:	b	6be8 <ReadInt64Data.part.3+0xf88>
    6cd8:	cmp	r4, #256	; 0x100
    6cdc:	ble	6d54 <ReadInt64Data.part.3+0x10f4>
    6ce0:	mov	r9, r8
    6ce4:	mov	r5, r8
    6ce8:	add	sl, sp, #24
    6cec:	sub	r3, r4, #256	; 0x100
    6cf0:	str	r3, [sp, #4]
    6cf4:	ldr	r3, [sp, #4]
    6cf8:	cmp	r9, r3
    6cfc:	blt	6d90 <ReadInt64Data.part.3+0x1130>
    6d00:	sub	r9, r4, #1
    6d04:	lsr	r9, r9, #8
    6d08:	lsl	r3, r9, #8
    6d0c:	cmp	r4, r3
    6d10:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6d14:	sub	r4, r4, r3
    6d18:	add	sl, sp, #24
    6d1c:	ldr	r3, [r6]
    6d20:	mov	r2, r4
    6d24:	mov	r1, r7
    6d28:	mov	r0, sl
    6d2c:	bl	1588 <fread@plt>
    6d30:	add	r9, fp, r9, lsl #11
    6d34:	add	r5, r5, r0
    6d38:	cmp	r4, r8
    6d3c:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6d40:	lsl	r3, r8, #3
    6d44:	add	r8, r8, #1
    6d48:	ldrd	r2, [r3, sl]
    6d4c:	strd	r2, [r9], #8
    6d50:	b	6d38 <ReadInt64Data.part.3+0x10d8>
    6d54:	add	r9, sp, #24
    6d58:	ldr	r3, [r6]
    6d5c:	mov	r1, r0
    6d60:	mov	r2, r4
    6d64:	mov	r0, r9
    6d68:	bl	1588 <fread@plt>
    6d6c:	sub	r3, fp, #8
    6d70:	mov	r5, r0
    6d74:	cmp	r4, r8
    6d78:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6d7c:	lsl	r2, r8, #3
    6d80:	add	r8, r8, #1
    6d84:	ldrd	r0, [r9, r2]
    6d88:	strd	r0, [r3, #8]!
    6d8c:	b	6d74 <ReadInt64Data.part.3+0x1114>
    6d90:	mov	r1, r7
    6d94:	ldr	r3, [r6]
    6d98:	mov	r2, #256	; 0x100
    6d9c:	mov	r0, sl
    6da0:	bl	1588 <fread@plt>
    6da4:	mov	r1, #0
    6da8:	add	r5, r5, r0
    6dac:	add	r0, fp, r9, lsl #3
    6db0:	ldrd	r2, [sl, r1]
    6db4:	strd	r2, [r0, r1]
    6db8:	add	r1, r1, #8
    6dbc:	cmp	r1, #2048	; 0x800
    6dc0:	bne	6db0 <ReadInt64Data.part.3+0x1150>
    6dc4:	add	r9, r9, #256	; 0x100
    6dc8:	b	6cf4 <ReadInt64Data.part.3+0x1094>
    6dcc:	cmp	r5, #13
    6dd0:	movne	r5, #0
    6dd4:	bne	5d74 <ReadInt64Data.part.3+0x114>
    6dd8:	ldr	r8, [r6, #20]
    6ddc:	cmp	r8, #0
    6de0:	beq	6eec <ReadInt64Data.part.3+0x128c>
    6de4:	cmp	r4, #256	; 0x100
    6de8:	ble	6e5c <ReadInt64Data.part.3+0x11fc>
    6dec:	mov	r8, #0
    6df0:	mov	r5, r8
    6df4:	sub	sl, r4, #256	; 0x100
    6df8:	add	r9, sp, #24
    6dfc:	cmp	r8, sl
    6e00:	blt	6e9c <ReadInt64Data.part.3+0x123c>
    6e04:	sub	r8, r4, #1
    6e08:	lsr	r8, r8, #8
    6e0c:	lsl	r3, r8, #8
    6e10:	cmp	r4, r3
    6e14:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6e18:	sub	r4, r4, r3
    6e1c:	add	r9, sp, #24
    6e20:	ldr	r3, [r6]
    6e24:	mov	r2, r4
    6e28:	mov	r1, r7
    6e2c:	mov	r0, r9
    6e30:	bl	1588 <fread@plt>
    6e34:	add	r8, fp, r8, lsl #11
    6e38:	mov	r6, #0
    6e3c:	add	r5, r5, r0
    6e40:	cmp	r4, r6
    6e44:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6e48:	add	r0, r9, r6, lsl #3
    6e4c:	bl	1980 <Mat_uint64Swap>
    6e50:	add	r6, r6, #1
    6e54:	strd	r0, [r8], #8
    6e58:	b	6e40 <ReadInt64Data.part.3+0x11e0>
    6e5c:	add	r9, sp, #24
    6e60:	ldr	r3, [r6]
    6e64:	mov	r1, r0
    6e68:	mov	r2, r4
    6e6c:	mov	r0, r9
    6e70:	bl	1588 <fread@plt>
    6e74:	sub	fp, fp, #8
    6e78:	mov	r6, #0
    6e7c:	mov	r5, r0
    6e80:	cmp	r4, r6
    6e84:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6e88:	add	r0, r9, r6, lsl #3
    6e8c:	bl	1980 <Mat_uint64Swap>
    6e90:	add	r6, r6, #1
    6e94:	strd	r0, [fp, #8]!
    6e98:	b	6e80 <ReadInt64Data.part.3+0x1220>
    6e9c:	ldr	r3, [r6]
    6ea0:	mov	r2, #256	; 0x100
    6ea4:	mov	r1, r7
    6ea8:	mov	r0, r9
    6eac:	bl	1588 <fread@plt>
    6eb0:	add	r2, fp, r8, lsl #3
    6eb4:	mov	r3, #0
    6eb8:	add	r5, r5, r0
    6ebc:	add	r0, r9, r3
    6ec0:	str	r2, [sp, #8]
    6ec4:	str	r3, [sp, #4]
    6ec8:	bl	1980 <Mat_uint64Swap>
    6ecc:	ldr	r3, [sp, #4]
    6ed0:	ldr	r2, [sp, #8]
    6ed4:	strd	r0, [r2, r3]
    6ed8:	add	r3, r3, #8
    6edc:	cmp	r3, #2048	; 0x800
    6ee0:	bne	6ebc <ReadInt64Data.part.3+0x125c>
    6ee4:	add	r8, r8, #256	; 0x100
    6ee8:	b	6dfc <ReadInt64Data.part.3+0x119c>
    6eec:	cmp	r4, #256	; 0x100
    6ef0:	ble	6f68 <ReadInt64Data.part.3+0x1308>
    6ef4:	mov	r9, r8
    6ef8:	mov	r5, r8
    6efc:	add	sl, sp, #24
    6f00:	sub	r3, r4, #256	; 0x100
    6f04:	str	r3, [sp, #4]
    6f08:	ldr	r3, [sp, #4]
    6f0c:	cmp	r9, r3
    6f10:	blt	6fa4 <ReadInt64Data.part.3+0x1344>
    6f14:	sub	r9, r4, #1
    6f18:	lsr	r9, r9, #8
    6f1c:	lsl	r3, r9, #8
    6f20:	cmp	r4, r3
    6f24:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6f28:	sub	r4, r4, r3
    6f2c:	add	sl, sp, #24
    6f30:	ldr	r3, [r6]
    6f34:	mov	r2, r4
    6f38:	mov	r1, r7
    6f3c:	mov	r0, sl
    6f40:	bl	1588 <fread@plt>
    6f44:	add	r9, fp, r9, lsl #11
    6f48:	add	r5, r5, r0
    6f4c:	cmp	r4, r8
    6f50:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6f54:	lsl	r3, r8, #3
    6f58:	add	r8, r8, #1
    6f5c:	ldrd	r2, [r3, sl]
    6f60:	strd	r2, [r9], #8
    6f64:	b	6f4c <ReadInt64Data.part.3+0x12ec>
    6f68:	add	r9, sp, #24
    6f6c:	ldr	r3, [r6]
    6f70:	mov	r1, r0
    6f74:	mov	r2, r4
    6f78:	mov	r0, r9
    6f7c:	bl	1588 <fread@plt>
    6f80:	sub	r3, fp, #8
    6f84:	mov	r5, r0
    6f88:	cmp	r4, r8
    6f8c:	ble	5d74 <ReadInt64Data.part.3+0x114>
    6f90:	lsl	r2, r8, #3
    6f94:	add	r8, r8, #1
    6f98:	ldrd	r0, [r9, r2]
    6f9c:	strd	r0, [r3, #8]!
    6fa0:	b	6f88 <ReadInt64Data.part.3+0x1328>
    6fa4:	mov	r1, r7
    6fa8:	ldr	r3, [r6]
    6fac:	mov	r2, #256	; 0x100
    6fb0:	mov	r0, sl
    6fb4:	bl	1588 <fread@plt>
    6fb8:	mov	r1, #0
    6fbc:	add	r5, r5, r0
    6fc0:	add	r0, fp, r9, lsl #3
    6fc4:	ldrd	r2, [sl, r1]
    6fc8:	strd	r2, [r0, r1]
    6fcc:	add	r1, r1, #8
    6fd0:	cmp	r1, #2048	; 0x800
    6fd4:	bne	6fc4 <ReadInt64Data.part.3+0x1364>
    6fd8:	add	r9, r9, #256	; 0x100
    6fdc:	b	6f08 <ReadInt64Data.part.3+0x12a8>

00006fe0 <ReadUInt64Data.part.5>:
    6fe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fe4:	sub	sp, sp, #2064	; 0x810
    6fe8:	sub	sp, sp, #12
    6fec:	mov	r6, r0
    6ff0:	mov	r0, r2
    6ff4:	mov	r5, r2
    6ff8:	mov	r4, r3
    6ffc:	mov	fp, r1
    7000:	bl	1600 <Mat_SizeOf@plt>
    7004:	sub	r3, r5, #1
    7008:	mov	r7, r0
    700c:	cmp	r3, #8
    7010:	addls	pc, pc, r3, lsl #2
    7014:	b	7f3c <ReadUInt64Data.part.5+0xf5c>
    7018:	b	7d4c <ReadUInt64Data.part.5+0xd6c>
    701c:	b	7e44 <ReadUInt64Data.part.5+0xe64>
    7020:	b	78f4 <ReadUInt64Data.part.5+0x914>
    7024:	b	7b20 <ReadUInt64Data.part.5+0xb40>
    7028:	b	74c4 <ReadUInt64Data.part.5+0x4e4>
    702c:	b	76dc <ReadUInt64Data.part.5+0x6fc>
    7030:	b	7288 <ReadUInt64Data.part.5+0x2a8>
    7034:	b	7f3c <ReadUInt64Data.part.5+0xf5c>
    7038:	b	703c <ReadUInt64Data.part.5+0x5c>
    703c:	ldr	sl, [r6, #20]
    7040:	cmp	sl, #0
    7044:	beq	7178 <ReadUInt64Data.part.5+0x198>
    7048:	cmp	r4, #256	; 0x100
    704c:	ble	70c8 <ReadUInt64Data.part.5+0xe8>
    7050:	mov	r8, #0
    7054:	mov	r5, r8
    7058:	sub	sl, r4, #256	; 0x100
    705c:	add	r9, sp, #24
    7060:	cmp	r8, sl
    7064:	blt	7120 <ReadUInt64Data.part.5+0x140>
    7068:	sub	r8, r4, #1
    706c:	lsr	r8, r8, #8
    7070:	lsl	r3, r8, #8
    7074:	cmp	r4, r3
    7078:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    707c:	sub	r4, r4, r3
    7080:	add	r9, sp, #24
    7084:	ldr	r3, [r6]
    7088:	mov	r2, r4
    708c:	mov	r1, r7
    7090:	mov	r0, r9
    7094:	bl	1588 <fread@plt>
    7098:	add	r8, fp, r8, lsl #11
    709c:	mov	r6, #0
    70a0:	add	r5, r5, r0
    70a4:	cmp	r4, r6
    70a8:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    70ac:	add	r0, r9, r6, lsl #3
    70b0:	bl	1b88 <Mat_doubleSwap>
    70b4:	add	r6, r6, #1
    70b8:	vmov	r0, r1, d0
    70bc:	bl	403f0 <__aeabi_d2ulz>
    70c0:	strd	r0, [r8], #8
    70c4:	b	70a4 <ReadUInt64Data.part.5+0xc4>
    70c8:	add	r9, sp, #24
    70cc:	ldr	r3, [r6]
    70d0:	mov	r1, r0
    70d4:	mov	r2, r4
    70d8:	mov	r0, r9
    70dc:	bl	1588 <fread@plt>
    70e0:	sub	fp, fp, #8
    70e4:	mov	r6, #0
    70e8:	mov	r5, r0
    70ec:	cmp	r4, r6
    70f0:	bgt	7104 <ReadUInt64Data.part.5+0x124>
    70f4:	mul	r0, r7, r5
    70f8:	add	sp, sp, #2064	; 0x810
    70fc:	add	sp, sp, #12
    7100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7104:	add	r0, r9, r6, lsl #3
    7108:	bl	1b88 <Mat_doubleSwap>
    710c:	add	r6, r6, #1
    7110:	vmov	r0, r1, d0
    7114:	bl	403f0 <__aeabi_d2ulz>
    7118:	strd	r0, [fp, #8]!
    711c:	b	70ec <ReadUInt64Data.part.5+0x10c>
    7120:	ldr	r3, [r6]
    7124:	mov	r2, #256	; 0x100
    7128:	mov	r1, r7
    712c:	mov	r0, r9
    7130:	bl	1588 <fread@plt>
    7134:	add	r2, fp, r8, lsl #3
    7138:	mov	r3, #0
    713c:	add	r5, r5, r0
    7140:	add	r0, r9, r3
    7144:	str	r2, [sp, #8]
    7148:	str	r3, [sp, #4]
    714c:	bl	1b88 <Mat_doubleSwap>
    7150:	vmov	r0, r1, d0
    7154:	bl	403f0 <__aeabi_d2ulz>
    7158:	ldr	r3, [sp, #4]
    715c:	ldr	r2, [sp, #8]
    7160:	strd	r0, [r2, r3]
    7164:	add	r3, r3, #8
    7168:	cmp	r3, #2048	; 0x800
    716c:	bne	7140 <ReadUInt64Data.part.5+0x160>
    7170:	add	r8, r8, #256	; 0x100
    7174:	b	7060 <ReadUInt64Data.part.5+0x80>
    7178:	cmp	r4, #256	; 0x100
    717c:	ble	71fc <ReadUInt64Data.part.5+0x21c>
    7180:	sub	r3, r4, #256	; 0x100
    7184:	mov	r8, fp
    7188:	mov	r9, sl
    718c:	mov	r5, sl
    7190:	str	r3, [sp, #8]
    7194:	add	r3, sp, #24
    7198:	str	r3, [sp, #4]
    719c:	ldr	r3, [sp, #8]
    71a0:	cmp	r9, r3
    71a4:	blt	7238 <ReadUInt64Data.part.5+0x258>
    71a8:	sub	r8, r4, #1
    71ac:	lsr	r8, r8, #8
    71b0:	lsl	r3, r8, #8
    71b4:	cmp	r4, r3
    71b8:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    71bc:	sub	r4, r4, r3
    71c0:	ldr	r3, [r6]
    71c4:	add	r6, sp, #24
    71c8:	mov	r2, r4
    71cc:	mov	r1, r7
    71d0:	mov	r0, r6
    71d4:	bl	1588 <fread@plt>
    71d8:	add	r8, fp, r8, lsl #11
    71dc:	add	r5, r5, r0
    71e0:	cmp	r4, sl
    71e4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    71e8:	ldrd	r0, [r6], #8
    71ec:	bl	403f0 <__aeabi_d2ulz>
    71f0:	add	sl, sl, #1
    71f4:	strd	r0, [r8], #8
    71f8:	b	71e0 <ReadUInt64Data.part.5+0x200>
    71fc:	ldr	r3, [r6]
    7200:	add	r6, sp, #24
    7204:	mov	r1, r0
    7208:	mov	r2, r4
    720c:	mov	r0, r6
    7210:	bl	1588 <fread@plt>
    7214:	sub	fp, fp, #8
    7218:	mov	r5, r0
    721c:	cmp	r4, sl
    7220:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7224:	ldrd	r0, [r6], #8
    7228:	bl	403f0 <__aeabi_d2ulz>
    722c:	add	sl, sl, #1
    7230:	strd	r0, [fp, #8]!
    7234:	b	721c <ReadUInt64Data.part.5+0x23c>
    7238:	ldr	r3, [r6]
    723c:	mov	r2, #256	; 0x100
    7240:	mov	r1, r7
    7244:	ldr	r0, [sp, #4]
    7248:	bl	1588 <fread@plt>
    724c:	ldr	r3, [sp, #4]
    7250:	add	r2, r8, #2048	; 0x800
    7254:	add	r5, r5, r0
    7258:	ldrd	r0, [r3], #8
    725c:	str	r2, [sp, #16]
    7260:	str	r3, [sp, #12]
    7264:	str	r3, [sp, #20]
    7268:	bl	403f0 <__aeabi_d2ulz>
    726c:	ldr	r2, [sp, #16]
    7270:	ldr	r3, [sp, #12]
    7274:	strd	r0, [r8], #8
    7278:	cmp	r8, r2
    727c:	bne	7258 <ReadUInt64Data.part.5+0x278>
    7280:	add	r9, r9, #256	; 0x100
    7284:	b	719c <ReadUInt64Data.part.5+0x1bc>
    7288:	ldr	sl, [r6, #20]
    728c:	cmp	sl, #0
    7290:	beq	73b4 <ReadUInt64Data.part.5+0x3d4>
    7294:	cmp	r4, #256	; 0x100
    7298:	ble	7314 <ReadUInt64Data.part.5+0x334>
    729c:	mov	r8, #0
    72a0:	mov	r5, r8
    72a4:	sub	sl, r4, #256	; 0x100
    72a8:	add	r9, sp, #24
    72ac:	cmp	r8, sl
    72b0:	blt	735c <ReadUInt64Data.part.5+0x37c>
    72b4:	sub	r8, r4, #1
    72b8:	lsr	r8, r8, #8
    72bc:	lsl	r3, r8, #8
    72c0:	cmp	r4, r3
    72c4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    72c8:	sub	r4, r4, r3
    72cc:	add	r9, sp, #24
    72d0:	ldr	r3, [r6]
    72d4:	mov	r2, r4
    72d8:	mov	r1, r7
    72dc:	mov	r0, r9
    72e0:	bl	1588 <fread@plt>
    72e4:	add	r8, fp, r8, lsl #11
    72e8:	mov	r6, #0
    72ec:	add	r5, r5, r0
    72f0:	cmp	r4, r6
    72f4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    72f8:	add	r0, r9, r6, lsl #2
    72fc:	bl	1b2c <Mat_floatSwap>
    7300:	add	r6, r6, #1
    7304:	vmov	r0, s0
    7308:	bl	403a8 <__aeabi_f2ulz>
    730c:	strd	r0, [r8], #8
    7310:	b	72f0 <ReadUInt64Data.part.5+0x310>
    7314:	add	r9, sp, #24
    7318:	ldr	r3, [r6]
    731c:	mov	r1, r0
    7320:	mov	r2, r4
    7324:	mov	r0, r9
    7328:	bl	1588 <fread@plt>
    732c:	sub	fp, fp, #8
    7330:	mov	r6, #0
    7334:	mov	r5, r0
    7338:	cmp	r4, r6
    733c:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7340:	add	r0, r9, r6, lsl #2
    7344:	bl	1b2c <Mat_floatSwap>
    7348:	add	r6, r6, #1
    734c:	vmov	r0, s0
    7350:	bl	403a8 <__aeabi_f2ulz>
    7354:	strd	r0, [fp, #8]!
    7358:	b	7338 <ReadUInt64Data.part.5+0x358>
    735c:	ldr	r3, [r6]
    7360:	mov	r2, #256	; 0x100
    7364:	mov	r1, r7
    7368:	mov	r0, r9
    736c:	bl	1588 <fread@plt>
    7370:	add	r2, fp, r8, lsl #3
    7374:	mov	r3, #0
    7378:	add	r5, r5, r0
    737c:	add	r0, r9, r3
    7380:	str	r2, [sp, #8]
    7384:	str	r3, [sp, #4]
    7388:	bl	1b2c <Mat_floatSwap>
    738c:	vmov	r0, s0
    7390:	bl	403a8 <__aeabi_f2ulz>
    7394:	ldr	r3, [sp, #4]
    7398:	ldr	r2, [sp, #8]
    739c:	add	r3, r3, #4
    73a0:	cmp	r3, #1024	; 0x400
    73a4:	strd	r0, [r2], #8
    73a8:	bne	737c <ReadUInt64Data.part.5+0x39c>
    73ac:	add	r8, r8, #256	; 0x100
    73b0:	b	72ac <ReadUInt64Data.part.5+0x2cc>
    73b4:	cmp	r4, #256	; 0x100
    73b8:	ble	7438 <ReadUInt64Data.part.5+0x458>
    73bc:	sub	r3, r4, #256	; 0x100
    73c0:	mov	r8, fp
    73c4:	mov	r9, sl
    73c8:	mov	r5, sl
    73cc:	str	r3, [sp, #8]
    73d0:	add	r3, sp, #24
    73d4:	str	r3, [sp, #4]
    73d8:	ldr	r3, [sp, #8]
    73dc:	cmp	r9, r3
    73e0:	blt	7474 <ReadUInt64Data.part.5+0x494>
    73e4:	sub	r8, r4, #1
    73e8:	lsr	r8, r8, #8
    73ec:	lsl	r3, r8, #8
    73f0:	cmp	r4, r3
    73f4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    73f8:	sub	r4, r4, r3
    73fc:	ldr	r3, [r6]
    7400:	add	r6, sp, #24
    7404:	mov	r2, r4
    7408:	mov	r1, r7
    740c:	mov	r0, r6
    7410:	bl	1588 <fread@plt>
    7414:	add	r8, fp, r8, lsl #11
    7418:	add	r5, r5, r0
    741c:	cmp	r4, sl
    7420:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7424:	ldr	r0, [r6], #4
    7428:	bl	403a8 <__aeabi_f2ulz>
    742c:	add	sl, sl, #1
    7430:	strd	r0, [r8], #8
    7434:	b	741c <ReadUInt64Data.part.5+0x43c>
    7438:	ldr	r3, [r6]
    743c:	add	r6, sp, #24
    7440:	mov	r1, r0
    7444:	mov	r2, r4
    7448:	mov	r0, r6
    744c:	bl	1588 <fread@plt>
    7450:	sub	fp, fp, #8
    7454:	mov	r5, r0
    7458:	cmp	r4, sl
    745c:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7460:	ldr	r0, [r6], #4
    7464:	bl	403a8 <__aeabi_f2ulz>
    7468:	add	sl, sl, #1
    746c:	strd	r0, [fp, #8]!
    7470:	b	7458 <ReadUInt64Data.part.5+0x478>
    7474:	ldr	r3, [r6]
    7478:	mov	r2, #256	; 0x100
    747c:	mov	r1, r7
    7480:	ldr	r0, [sp, #4]
    7484:	bl	1588 <fread@plt>
    7488:	ldr	r3, [sp, #4]
    748c:	add	r2, r8, #2048	; 0x800
    7490:	add	r5, r5, r0
    7494:	ldr	r0, [r3], #4
    7498:	str	r2, [sp, #16]
    749c:	str	r3, [sp, #12]
    74a0:	str	r3, [sp, #20]
    74a4:	bl	403a8 <__aeabi_f2ulz>
    74a8:	ldr	r2, [sp, #16]
    74ac:	ldr	r3, [sp, #12]
    74b0:	strd	r0, [r8], #8
    74b4:	cmp	r8, r2
    74b8:	bne	7494 <ReadUInt64Data.part.5+0x4b4>
    74bc:	add	r9, r9, #256	; 0x100
    74c0:	b	73d8 <ReadUInt64Data.part.5+0x3f8>
    74c4:	ldr	r8, [r6, #20]
    74c8:	cmp	r8, #0
    74cc:	beq	75e4 <ReadUInt64Data.part.5+0x604>
    74d0:	cmp	r4, #256	; 0x100
    74d4:	ble	754c <ReadUInt64Data.part.5+0x56c>
    74d8:	mov	r8, #0
    74dc:	mov	r5, r8
    74e0:	sub	sl, r4, #256	; 0x100
    74e4:	add	r9, sp, #24
    74e8:	cmp	r8, sl
    74ec:	blt	7590 <ReadUInt64Data.part.5+0x5b0>
    74f0:	sub	r8, r4, #1
    74f4:	lsr	r8, r8, #8
    74f8:	lsl	r3, r8, #8
    74fc:	cmp	r4, r3
    7500:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7504:	sub	r4, r4, r3
    7508:	add	r9, sp, #24
    750c:	ldr	r3, [r6]
    7510:	mov	r2, r4
    7514:	mov	r1, r7
    7518:	mov	r0, r9
    751c:	bl	1588 <fread@plt>
    7520:	add	r8, fp, r8, lsl #11
    7524:	mov	r6, #0
    7528:	add	r5, r5, r0
    752c:	cmp	r4, r6
    7530:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7534:	add	r0, r9, r6, lsl #2
    7538:	bl	1a18 <Mat_int32Swap>
    753c:	add	r6, r6, #1
    7540:	asr	r1, r0, #31
    7544:	strd	r0, [r8], #8
    7548:	b	752c <ReadUInt64Data.part.5+0x54c>
    754c:	add	r9, sp, #24
    7550:	ldr	r3, [r6]
    7554:	mov	r1, r0
    7558:	mov	r2, r4
    755c:	mov	r0, r9
    7560:	bl	1588 <fread@plt>
    7564:	sub	fp, fp, #8
    7568:	mov	r6, #0
    756c:	mov	r5, r0
    7570:	cmp	r4, r6
    7574:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7578:	add	r0, r9, r6, lsl #2
    757c:	bl	1a18 <Mat_int32Swap>
    7580:	add	r6, r6, #1
    7584:	asr	r1, r0, #31
    7588:	strd	r0, [fp, #8]!
    758c:	b	7570 <ReadUInt64Data.part.5+0x590>
    7590:	ldr	r3, [r6]
    7594:	mov	r2, #256	; 0x100
    7598:	mov	r1, r7
    759c:	mov	r0, r9
    75a0:	bl	1588 <fread@plt>
    75a4:	add	r2, fp, r8, lsl #3
    75a8:	mov	r3, #0
    75ac:	add	r5, r5, r0
    75b0:	add	r0, r9, r3
    75b4:	str	r2, [sp, #8]
    75b8:	str	r3, [sp, #4]
    75bc:	bl	1a18 <Mat_int32Swap>
    75c0:	ldr	r3, [sp, #4]
    75c4:	ldr	r2, [sp, #8]
    75c8:	add	r3, r3, #4
    75cc:	cmp	r3, #1024	; 0x400
    75d0:	asr	r1, r0, #31
    75d4:	strd	r0, [r2], #8
    75d8:	bne	75b0 <ReadUInt64Data.part.5+0x5d0>
    75dc:	add	r8, r8, #256	; 0x100
    75e0:	b	74e8 <ReadUInt64Data.part.5+0x508>
    75e4:	cmp	r4, #256	; 0x100
    75e8:	ble	7660 <ReadUInt64Data.part.5+0x680>
    75ec:	mov	r9, r8
    75f0:	mov	r5, r8
    75f4:	add	sl, sp, #24
    75f8:	sub	r3, r4, #256	; 0x100
    75fc:	str	r3, [sp, #4]
    7600:	ldr	r3, [sp, #4]
    7604:	cmp	r9, r3
    7608:	blt	769c <ReadUInt64Data.part.5+0x6bc>
    760c:	sub	r9, r4, #1
    7610:	lsr	r9, r9, #8
    7614:	lsl	r3, r9, #8
    7618:	cmp	r4, r3
    761c:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7620:	sub	r4, r4, r3
    7624:	add	sl, sp, #24
    7628:	ldr	r3, [r6]
    762c:	mov	r2, r4
    7630:	mov	r1, r7
    7634:	mov	r0, sl
    7638:	bl	1588 <fread@plt>
    763c:	add	r9, fp, r9, lsl #11
    7640:	add	r5, r5, r0
    7644:	cmp	r4, r8
    7648:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    764c:	ldr	r2, [sl, r8, lsl #2]
    7650:	add	r8, r8, #1
    7654:	asr	r3, r2, #31
    7658:	strd	r2, [r9], #8
    765c:	b	7644 <ReadUInt64Data.part.5+0x664>
    7660:	add	r9, sp, #24
    7664:	mov	r1, r0
    7668:	ldr	r3, [r6]
    766c:	mov	r2, r4
    7670:	mov	r0, r9
    7674:	bl	1588 <fread@plt>
    7678:	sub	r1, fp, #8
    767c:	mov	r5, r0
    7680:	cmp	r4, r8
    7684:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7688:	ldr	r2, [r9, r8, lsl #2]
    768c:	add	r8, r8, #1
    7690:	asr	r3, r2, #31
    7694:	strd	r2, [r1, #8]!
    7698:	b	7680 <ReadUInt64Data.part.5+0x6a0>
    769c:	ldr	r3, [r6]
    76a0:	mov	r2, #256	; 0x100
    76a4:	mov	r1, r7
    76a8:	mov	r0, sl
    76ac:	bl	1588 <fread@plt>
    76b0:	add	r2, fp, r9, lsl #3
    76b4:	mov	r3, r8
    76b8:	add	r5, r5, r0
    76bc:	ldr	r0, [sl, r3, lsl #2]
    76c0:	add	r3, r3, #1
    76c4:	cmp	r3, #256	; 0x100
    76c8:	asr	r1, r0, #31
    76cc:	strd	r0, [r2], #8
    76d0:	bne	76bc <ReadUInt64Data.part.5+0x6dc>
    76d4:	add	r9, r9, #256	; 0x100
    76d8:	b	7600 <ReadUInt64Data.part.5+0x620>
    76dc:	ldr	r8, [r6, #20]
    76e0:	cmp	r8, #0
    76e4:	beq	77fc <ReadUInt64Data.part.5+0x81c>
    76e8:	cmp	r4, #256	; 0x100
    76ec:	ble	7764 <ReadUInt64Data.part.5+0x784>
    76f0:	mov	r8, #0
    76f4:	mov	r5, r8
    76f8:	sub	sl, r4, #256	; 0x100
    76fc:	add	r9, sp, #24
    7700:	cmp	r8, sl
    7704:	blt	77a8 <ReadUInt64Data.part.5+0x7c8>
    7708:	sub	r8, r4, #1
    770c:	lsr	r8, r8, #8
    7710:	lsl	r3, r8, #8
    7714:	cmp	r4, r3
    7718:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    771c:	sub	r4, r4, r3
    7720:	add	r9, sp, #24
    7724:	ldr	r3, [r6]
    7728:	mov	r2, r4
    772c:	mov	r1, r7
    7730:	mov	r0, r9
    7734:	bl	1588 <fread@plt>
    7738:	add	r8, fp, r8, lsl #11
    773c:	mov	r6, #0
    7740:	add	r5, r5, r0
    7744:	cmp	r4, r6
    7748:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    774c:	add	r0, r9, r6, lsl #2
    7750:	bl	1a80 <Mat_uint32Swap>
    7754:	mov	r1, #0
    7758:	add	r6, r6, #1
    775c:	strd	r0, [r8], #8
    7760:	b	7744 <ReadUInt64Data.part.5+0x764>
    7764:	add	r9, sp, #24
    7768:	ldr	r3, [r6]
    776c:	mov	r1, r0
    7770:	mov	r2, r4
    7774:	mov	r0, r9
    7778:	bl	1588 <fread@plt>
    777c:	sub	fp, fp, #8
    7780:	mov	r6, #0
    7784:	mov	r5, r0
    7788:	cmp	r4, r6
    778c:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7790:	add	r0, r9, r6, lsl #2
    7794:	bl	1a80 <Mat_uint32Swap>
    7798:	mov	r1, #0
    779c:	add	r6, r6, #1
    77a0:	strd	r0, [fp, #8]!
    77a4:	b	7788 <ReadUInt64Data.part.5+0x7a8>
    77a8:	ldr	r3, [r6]
    77ac:	mov	r2, #256	; 0x100
    77b0:	mov	r1, r7
    77b4:	mov	r0, r9
    77b8:	bl	1588 <fread@plt>
    77bc:	add	r2, fp, r8, lsl #3
    77c0:	mov	r3, #0
    77c4:	add	r5, r5, r0
    77c8:	add	r0, r9, r3
    77cc:	str	r2, [sp, #8]
    77d0:	str	r3, [sp, #4]
    77d4:	bl	1a80 <Mat_uint32Swap>
    77d8:	ldr	r3, [sp, #4]
    77dc:	ldr	r2, [sp, #8]
    77e0:	mov	r1, #0
    77e4:	add	r3, r3, #4
    77e8:	cmp	r3, #1024	; 0x400
    77ec:	strd	r0, [r2], #8
    77f0:	bne	77c8 <ReadUInt64Data.part.5+0x7e8>
    77f4:	add	r8, r8, #256	; 0x100
    77f8:	b	7700 <ReadUInt64Data.part.5+0x720>
    77fc:	cmp	r4, #256	; 0x100
    7800:	ble	7878 <ReadUInt64Data.part.5+0x898>
    7804:	mov	r9, r8
    7808:	mov	r5, r8
    780c:	add	sl, sp, #24
    7810:	sub	r3, r4, #256	; 0x100
    7814:	str	r3, [sp, #4]
    7818:	ldr	r3, [sp, #4]
    781c:	cmp	r9, r3
    7820:	blt	78b4 <ReadUInt64Data.part.5+0x8d4>
    7824:	sub	r9, r4, #1
    7828:	lsr	r9, r9, #8
    782c:	lsl	r3, r9, #8
    7830:	cmp	r4, r3
    7834:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7838:	sub	r4, r4, r3
    783c:	add	sl, sp, #24
    7840:	ldr	r3, [r6]
    7844:	mov	r2, r4
    7848:	mov	r1, r7
    784c:	mov	r0, sl
    7850:	bl	1588 <fread@plt>
    7854:	add	r9, fp, r9, lsl #11
    7858:	add	r5, r5, r0
    785c:	cmp	r4, r8
    7860:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7864:	ldr	r2, [sl, r8, lsl #2]
    7868:	mov	r3, #0
    786c:	add	r8, r8, #1
    7870:	strd	r2, [r9], #8
    7874:	b	785c <ReadUInt64Data.part.5+0x87c>
    7878:	add	r9, sp, #24
    787c:	mov	r1, r0
    7880:	ldr	r3, [r6]
    7884:	mov	r2, r4
    7888:	mov	r0, r9
    788c:	bl	1588 <fread@plt>
    7890:	sub	r1, fp, #8
    7894:	mov	r5, r0
    7898:	cmp	r4, r8
    789c:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    78a0:	ldr	r2, [r9, r8, lsl #2]
    78a4:	mov	r3, #0
    78a8:	add	r8, r8, #1
    78ac:	strd	r2, [r1, #8]!
    78b0:	b	7898 <ReadUInt64Data.part.5+0x8b8>
    78b4:	ldr	r3, [r6]
    78b8:	mov	r2, #256	; 0x100
    78bc:	mov	r1, r7
    78c0:	mov	r0, sl
    78c4:	bl	1588 <fread@plt>
    78c8:	add	r2, fp, r9, lsl #3
    78cc:	mov	r3, r8
    78d0:	add	r5, r5, r0
    78d4:	ldr	r0, [sl, r3, lsl #2]
    78d8:	mov	r1, #0
    78dc:	add	r3, r3, #1
    78e0:	cmp	r3, #256	; 0x100
    78e4:	strd	r0, [r2], #8
    78e8:	bne	78d4 <ReadUInt64Data.part.5+0x8f4>
    78ec:	add	r9, r9, #256	; 0x100
    78f0:	b	7818 <ReadUInt64Data.part.5+0x838>
    78f4:	ldr	r8, [r6, #20]
    78f8:	cmp	r8, #0
    78fc:	beq	7a20 <ReadUInt64Data.part.5+0xa40>
    7900:	cmp	r4, #256	; 0x100
    7904:	ble	7980 <ReadUInt64Data.part.5+0x9a0>
    7908:	mov	r8, #0
    790c:	mov	r5, r8
    7910:	sub	sl, r4, #256	; 0x100
    7914:	add	r9, sp, #24
    7918:	cmp	r8, sl
    791c:	blt	79c8 <ReadUInt64Data.part.5+0x9e8>
    7920:	sub	r8, r4, #1
    7924:	lsr	r8, r8, #8
    7928:	lsl	r3, r8, #8
    792c:	cmp	r4, r3
    7930:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7934:	sub	r4, r4, r3
    7938:	add	r9, sp, #24
    793c:	ldr	r3, [r6]
    7940:	mov	r2, r4
    7944:	mov	r1, r7
    7948:	mov	r0, r9
    794c:	bl	1588 <fread@plt>
    7950:	add	r8, fp, r8, lsl #11
    7954:	mov	r6, #0
    7958:	add	r5, r5, r0
    795c:	cmp	r4, r6
    7960:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7964:	add	r0, r9, r6, lsl #1
    7968:	bl	1adc <Mat_int16Swap>
    796c:	add	r6, r6, #1
    7970:	sxth	r0, r0
    7974:	asr	r1, r0, #31
    7978:	strd	r0, [r8], #8
    797c:	b	795c <ReadUInt64Data.part.5+0x97c>
    7980:	add	r9, sp, #24
    7984:	ldr	r3, [r6]
    7988:	mov	r1, r0
    798c:	mov	r2, r4
    7990:	mov	r0, r9
    7994:	bl	1588 <fread@plt>
    7998:	sub	fp, fp, #8
    799c:	mov	r6, #0
    79a0:	mov	r5, r0
    79a4:	cmp	r4, r6
    79a8:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    79ac:	add	r0, r9, r6, lsl #1
    79b0:	bl	1adc <Mat_int16Swap>
    79b4:	add	r6, r6, #1
    79b8:	sxth	r0, r0
    79bc:	asr	r1, r0, #31
    79c0:	strd	r0, [fp, #8]!
    79c4:	b	79a4 <ReadUInt64Data.part.5+0x9c4>
    79c8:	ldr	r3, [r6]
    79cc:	mov	r2, #256	; 0x100
    79d0:	mov	r1, r7
    79d4:	mov	r0, r9
    79d8:	bl	1588 <fread@plt>
    79dc:	add	r2, fp, r8, lsl #3
    79e0:	mov	r3, #0
    79e4:	add	r5, r5, r0
    79e8:	add	r0, r9, r3
    79ec:	str	r2, [sp, #8]
    79f0:	str	r3, [sp, #4]
    79f4:	bl	1adc <Mat_int16Swap>
    79f8:	ldr	r3, [sp, #4]
    79fc:	ldr	r2, [sp, #8]
    7a00:	add	r3, r3, #2
    7a04:	cmp	r3, #512	; 0x200
    7a08:	sxth	r0, r0
    7a0c:	asr	r1, r0, #31
    7a10:	strd	r0, [r2], #8
    7a14:	bne	79e8 <ReadUInt64Data.part.5+0xa08>
    7a18:	add	r8, r8, #256	; 0x100
    7a1c:	b	7918 <ReadUInt64Data.part.5+0x938>
    7a20:	cmp	r4, #256	; 0x100
    7a24:	ble	7aa0 <ReadUInt64Data.part.5+0xac0>
    7a28:	mov	r9, r8
    7a2c:	mov	r5, r8
    7a30:	add	sl, sp, #24
    7a34:	sub	r3, r4, #256	; 0x100
    7a38:	str	r3, [sp, #4]
    7a3c:	ldr	r3, [sp, #4]
    7a40:	cmp	r9, r3
    7a44:	blt	7ae0 <ReadUInt64Data.part.5+0xb00>
    7a48:	sub	r9, r4, #1
    7a4c:	lsr	r9, r9, #8
    7a50:	lsl	r3, r9, #8
    7a54:	cmp	r4, r3
    7a58:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7a5c:	sub	r4, r4, r3
    7a60:	add	sl, sp, #24
    7a64:	ldr	r3, [r6]
    7a68:	mov	r2, r4
    7a6c:	mov	r1, r7
    7a70:	mov	r0, sl
    7a74:	bl	1588 <fread@plt>
    7a78:	add	r9, fp, r9, lsl #11
    7a7c:	add	r5, r5, r0
    7a80:	cmp	r4, r8
    7a84:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7a88:	lsl	r3, r8, #1
    7a8c:	add	r8, r8, #1
    7a90:	ldrsh	r2, [sl, r3]
    7a94:	asr	r3, r2, #31
    7a98:	strd	r2, [r9], #8
    7a9c:	b	7a80 <ReadUInt64Data.part.5+0xaa0>
    7aa0:	add	r9, sp, #24
    7aa4:	ldr	r3, [r6]
    7aa8:	mov	r1, r0
    7aac:	mov	r2, r4
    7ab0:	mov	r0, r9
    7ab4:	bl	1588 <fread@plt>
    7ab8:	sub	r3, fp, #8
    7abc:	mov	r5, r0
    7ac0:	cmp	r4, r8
    7ac4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7ac8:	lsl	r2, r8, #1
    7acc:	add	r8, r8, #1
    7ad0:	ldrsh	r0, [r9, r2]
    7ad4:	asr	r1, r0, #31
    7ad8:	strd	r0, [r3, #8]!
    7adc:	b	7ac0 <ReadUInt64Data.part.5+0xae0>
    7ae0:	ldr	r3, [r6]
    7ae4:	mov	r2, #256	; 0x100
    7ae8:	mov	r1, r7
    7aec:	mov	r0, sl
    7af0:	bl	1588 <fread@plt>
    7af4:	add	r2, fp, r9, lsl #3
    7af8:	mov	r3, #0
    7afc:	add	r5, r5, r0
    7b00:	ldrsh	r0, [sl, r3]
    7b04:	add	r3, r3, #2
    7b08:	cmp	r3, #512	; 0x200
    7b0c:	asr	r1, r0, #31
    7b10:	strd	r0, [r2], #8
    7b14:	bne	7b00 <ReadUInt64Data.part.5+0xb20>
    7b18:	add	r9, r9, #256	; 0x100
    7b1c:	b	7a3c <ReadUInt64Data.part.5+0xa5c>
    7b20:	ldr	r8, [r6, #20]
    7b24:	cmp	r8, #0
    7b28:	beq	7c4c <ReadUInt64Data.part.5+0xc6c>
    7b2c:	cmp	r4, #256	; 0x100
    7b30:	ble	7bac <ReadUInt64Data.part.5+0xbcc>
    7b34:	mov	r8, #0
    7b38:	mov	r5, r8
    7b3c:	sub	sl, r4, #256	; 0x100
    7b40:	add	r9, sp, #24
    7b44:	cmp	r8, sl
    7b48:	blt	7bf4 <ReadUInt64Data.part.5+0xc14>
    7b4c:	sub	r8, r4, #1
    7b50:	lsr	r8, r8, #8
    7b54:	lsl	r3, r8, #8
    7b58:	cmp	r4, r3
    7b5c:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7b60:	sub	r4, r4, r3
    7b64:	add	r9, sp, #24
    7b68:	ldr	r3, [r6]
    7b6c:	mov	r2, r4
    7b70:	mov	r1, r7
    7b74:	mov	r0, r9
    7b78:	bl	1588 <fread@plt>
    7b7c:	add	r8, fp, r8, lsl #11
    7b80:	mov	r6, #0
    7b84:	add	r5, r5, r0
    7b88:	cmp	r4, r6
    7b8c:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7b90:	add	r0, r9, r6, lsl #1
    7b94:	bl	1b10 <Mat_uint16Swap>
    7b98:	mov	r1, #0
    7b9c:	add	r6, r6, #1
    7ba0:	uxth	r0, r0
    7ba4:	strd	r0, [r8], #8
    7ba8:	b	7b88 <ReadUInt64Data.part.5+0xba8>
    7bac:	add	r9, sp, #24
    7bb0:	ldr	r3, [r6]
    7bb4:	mov	r1, r0
    7bb8:	mov	r2, r4
    7bbc:	mov	r0, r9
    7bc0:	bl	1588 <fread@plt>
    7bc4:	sub	fp, fp, #8
    7bc8:	mov	r6, #0
    7bcc:	mov	r5, r0
    7bd0:	cmp	r4, r6
    7bd4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7bd8:	add	r0, r9, r6, lsl #1
    7bdc:	bl	1b10 <Mat_uint16Swap>
    7be0:	mov	r1, #0
    7be4:	add	r6, r6, #1
    7be8:	uxth	r0, r0
    7bec:	strd	r0, [fp, #8]!
    7bf0:	b	7bd0 <ReadUInt64Data.part.5+0xbf0>
    7bf4:	ldr	r3, [r6]
    7bf8:	mov	r2, #256	; 0x100
    7bfc:	mov	r1, r7
    7c00:	mov	r0, r9
    7c04:	bl	1588 <fread@plt>
    7c08:	add	r2, fp, r8, lsl #3
    7c0c:	mov	r3, #0
    7c10:	add	r5, r5, r0
    7c14:	add	r0, r9, r3
    7c18:	str	r2, [sp, #8]
    7c1c:	str	r3, [sp, #4]
    7c20:	bl	1b10 <Mat_uint16Swap>
    7c24:	ldr	r3, [sp, #4]
    7c28:	ldr	r2, [sp, #8]
    7c2c:	mov	r1, #0
    7c30:	add	r3, r3, #2
    7c34:	cmp	r3, #512	; 0x200
    7c38:	uxth	r0, r0
    7c3c:	strd	r0, [r2], #8
    7c40:	bne	7c14 <ReadUInt64Data.part.5+0xc34>
    7c44:	add	r8, r8, #256	; 0x100
    7c48:	b	7b44 <ReadUInt64Data.part.5+0xb64>
    7c4c:	cmp	r4, #256	; 0x100
    7c50:	ble	7ccc <ReadUInt64Data.part.5+0xcec>
    7c54:	mov	r9, r8
    7c58:	mov	r5, r8
    7c5c:	add	sl, sp, #24
    7c60:	sub	r3, r4, #256	; 0x100
    7c64:	str	r3, [sp, #4]
    7c68:	ldr	r3, [sp, #4]
    7c6c:	cmp	r9, r3
    7c70:	blt	7d0c <ReadUInt64Data.part.5+0xd2c>
    7c74:	sub	r9, r4, #1
    7c78:	lsr	r9, r9, #8
    7c7c:	lsl	r3, r9, #8
    7c80:	cmp	r4, r3
    7c84:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7c88:	sub	r4, r4, r3
    7c8c:	add	sl, sp, #24
    7c90:	ldr	r3, [r6]
    7c94:	mov	r2, r4
    7c98:	mov	r1, r7
    7c9c:	mov	r0, sl
    7ca0:	bl	1588 <fread@plt>
    7ca4:	add	r9, fp, r9, lsl #11
    7ca8:	add	r5, r5, r0
    7cac:	cmp	r4, r8
    7cb0:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7cb4:	lsl	r3, r8, #1
    7cb8:	add	r8, r8, #1
    7cbc:	ldrh	r2, [sl, r3]
    7cc0:	mov	r3, #0
    7cc4:	strd	r2, [r9], #8
    7cc8:	b	7cac <ReadUInt64Data.part.5+0xccc>
    7ccc:	add	r9, sp, #24
    7cd0:	ldr	r3, [r6]
    7cd4:	mov	r1, r0
    7cd8:	mov	r2, r4
    7cdc:	mov	r0, r9
    7ce0:	bl	1588 <fread@plt>
    7ce4:	sub	r3, fp, #8
    7ce8:	mov	r5, r0
    7cec:	cmp	r4, r8
    7cf0:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7cf4:	lsl	r2, r8, #1
    7cf8:	mov	r1, #0
    7cfc:	ldrh	r0, [r9, r2]
    7d00:	add	r8, r8, #1
    7d04:	strd	r0, [r3, #8]!
    7d08:	b	7cec <ReadUInt64Data.part.5+0xd0c>
    7d0c:	ldr	r3, [r6]
    7d10:	mov	r2, #256	; 0x100
    7d14:	mov	r1, r7
    7d18:	mov	r0, sl
    7d1c:	bl	1588 <fread@plt>
    7d20:	add	r2, fp, r9, lsl #3
    7d24:	mov	r3, #0
    7d28:	add	r5, r5, r0
    7d2c:	ldrh	r0, [sl, r3]
    7d30:	mov	r1, #0
    7d34:	add	r3, r3, #2
    7d38:	cmp	r3, #512	; 0x200
    7d3c:	strd	r0, [r2], #8
    7d40:	bne	7d2c <ReadUInt64Data.part.5+0xd4c>
    7d44:	add	r9, r9, #256	; 0x100
    7d48:	b	7c68 <ReadUInt64Data.part.5+0xc88>
    7d4c:	cmp	r4, #256	; 0x100
    7d50:	ble	7dc4 <ReadUInt64Data.part.5+0xde4>
    7d54:	mov	r8, #0
    7d58:	mov	r5, r8
    7d5c:	sub	sl, r4, #256	; 0x100
    7d60:	add	r9, sp, #24
    7d64:	cmp	r8, sl
    7d68:	blt	7e04 <ReadUInt64Data.part.5+0xe24>
    7d6c:	sub	r8, r4, #1
    7d70:	lsr	r8, r8, #8
    7d74:	lsl	r3, r8, #8
    7d78:	cmp	r4, r3
    7d7c:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7d80:	sub	r4, r4, r3
    7d84:	add	r9, sp, #24
    7d88:	mov	r1, r7
    7d8c:	ldr	r3, [r6]
    7d90:	mov	r2, r4
    7d94:	mov	r0, r9
    7d98:	bl	1588 <fread@plt>
    7d9c:	add	r8, fp, r8, lsl #11
    7da0:	mov	r1, #0
    7da4:	add	r5, r5, r0
    7da8:	cmp	r4, r1
    7dac:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7db0:	ldrsb	r2, [r9, r1]
    7db4:	add	r1, r1, #1
    7db8:	asr	r3, r2, #31
    7dbc:	strd	r2, [r8], #8
    7dc0:	b	7da8 <ReadUInt64Data.part.5+0xdc8>
    7dc4:	add	r8, sp, #24
    7dc8:	ldr	r3, [r6]
    7dcc:	mov	r2, r4
    7dd0:	mov	r1, r0
    7dd4:	mov	r0, r8
    7dd8:	bl	1588 <fread@plt>
    7ddc:	sub	r2, fp, #8
    7de0:	mov	r3, #0
    7de4:	mov	r5, r0
    7de8:	cmp	r4, r3
    7dec:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7df0:	ldrsb	r0, [r8, r3]
    7df4:	add	r3, r3, #1
    7df8:	asr	r1, r0, #31
    7dfc:	strd	r0, [r2, #8]!
    7e00:	b	7de8 <ReadUInt64Data.part.5+0xe08>
    7e04:	ldr	r3, [r6]
    7e08:	mov	r2, #256	; 0x100
    7e0c:	mov	r1, r7
    7e10:	mov	r0, r9
    7e14:	bl	1588 <fread@plt>
    7e18:	add	r2, fp, r8, lsl #3
    7e1c:	mov	r3, #0
    7e20:	add	r5, r5, r0
    7e24:	ldrsb	r0, [r9, r3]
    7e28:	add	r3, r3, #1
    7e2c:	cmp	r3, #256	; 0x100
    7e30:	asr	r1, r0, #31
    7e34:	strd	r0, [r2], #8
    7e38:	bne	7e24 <ReadUInt64Data.part.5+0xe44>
    7e3c:	add	r8, r8, #256	; 0x100
    7e40:	b	7d64 <ReadUInt64Data.part.5+0xd84>
    7e44:	cmp	r4, #256	; 0x100
    7e48:	ble	7ebc <ReadUInt64Data.part.5+0xedc>
    7e4c:	mov	r8, #0
    7e50:	mov	r5, r8
    7e54:	sub	sl, r4, #256	; 0x100
    7e58:	add	r9, sp, #24
    7e5c:	cmp	r8, sl
    7e60:	blt	7efc <ReadUInt64Data.part.5+0xf1c>
    7e64:	sub	r8, r4, #1
    7e68:	lsr	r8, r8, #8
    7e6c:	lsl	r3, r8, #8
    7e70:	cmp	r4, r3
    7e74:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7e78:	sub	r4, r4, r3
    7e7c:	add	r9, sp, #24
    7e80:	mov	r1, r7
    7e84:	ldr	r3, [r6]
    7e88:	mov	r2, r4
    7e8c:	mov	r0, r9
    7e90:	bl	1588 <fread@plt>
    7e94:	add	r8, fp, r8, lsl #11
    7e98:	mov	r1, #0
    7e9c:	add	r5, r5, r0
    7ea0:	cmp	r4, r1
    7ea4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7ea8:	ldrb	r2, [r9, r1]
    7eac:	mov	r3, #0
    7eb0:	add	r1, r1, #1
    7eb4:	strd	r2, [r8], #8
    7eb8:	b	7ea0 <ReadUInt64Data.part.5+0xec0>
    7ebc:	add	r8, sp, #24
    7ec0:	ldr	r3, [r6]
    7ec4:	mov	r2, r4
    7ec8:	mov	r1, r0
    7ecc:	mov	r0, r8
    7ed0:	bl	1588 <fread@plt>
    7ed4:	sub	r2, fp, #8
    7ed8:	mov	r3, #0
    7edc:	mov	r5, r0
    7ee0:	cmp	r4, r3
    7ee4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7ee8:	ldrb	r0, [r8, r3]
    7eec:	mov	r1, #0
    7ef0:	add	r3, r3, #1
    7ef4:	strd	r0, [r2, #8]!
    7ef8:	b	7ee0 <ReadUInt64Data.part.5+0xf00>
    7efc:	ldr	r3, [r6]
    7f00:	mov	r2, #256	; 0x100
    7f04:	mov	r1, r7
    7f08:	mov	r0, r9
    7f0c:	bl	1588 <fread@plt>
    7f10:	add	r2, fp, r8, lsl #3
    7f14:	mov	r3, #0
    7f18:	add	r5, r5, r0
    7f1c:	ldrb	r0, [r9, r3]
    7f20:	mov	r1, #0
    7f24:	add	r3, r3, #1
    7f28:	cmp	r3, #256	; 0x100
    7f2c:	strd	r0, [r2], #8
    7f30:	bne	7f1c <ReadUInt64Data.part.5+0xf3c>
    7f34:	add	r8, r8, #256	; 0x100
    7f38:	b	7e5c <ReadUInt64Data.part.5+0xe7c>
    7f3c:	cmp	r5, #12
    7f40:	bne	814c <ReadUInt64Data.part.5+0x116c>
    7f44:	ldr	r8, [r6, #20]
    7f48:	cmp	r8, #0
    7f4c:	beq	8058 <ReadUInt64Data.part.5+0x1078>
    7f50:	cmp	r4, #256	; 0x100
    7f54:	ble	7fc8 <ReadUInt64Data.part.5+0xfe8>
    7f58:	mov	r8, #0
    7f5c:	mov	r5, r8
    7f60:	sub	sl, r4, #256	; 0x100
    7f64:	add	r9, sp, #24
    7f68:	cmp	r8, sl
    7f6c:	blt	8008 <ReadUInt64Data.part.5+0x1028>
    7f70:	sub	r8, r4, #1
    7f74:	lsr	r8, r8, #8
    7f78:	lsl	r3, r8, #8
    7f7c:	cmp	r4, r3
    7f80:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7f84:	sub	r4, r4, r3
    7f88:	add	r9, sp, #24
    7f8c:	ldr	r3, [r6]
    7f90:	mov	r2, r4
    7f94:	mov	r1, r7
    7f98:	mov	r0, r9
    7f9c:	bl	1588 <fread@plt>
    7fa0:	add	r8, fp, r8, lsl #11
    7fa4:	mov	r6, #0
    7fa8:	add	r5, r5, r0
    7fac:	cmp	r4, r6
    7fb0:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7fb4:	add	r0, r9, r6, lsl #3
    7fb8:	bl	18bc <Mat_int64Swap>
    7fbc:	add	r6, r6, #1
    7fc0:	strd	r0, [r8], #8
    7fc4:	b	7fac <ReadUInt64Data.part.5+0xfcc>
    7fc8:	add	r9, sp, #24
    7fcc:	ldr	r3, [r6]
    7fd0:	mov	r1, r0
    7fd4:	mov	r2, r4
    7fd8:	mov	r0, r9
    7fdc:	bl	1588 <fread@plt>
    7fe0:	sub	fp, fp, #8
    7fe4:	mov	r6, #0
    7fe8:	mov	r5, r0
    7fec:	cmp	r4, r6
    7ff0:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    7ff4:	add	r0, r9, r6, lsl #3
    7ff8:	bl	18bc <Mat_int64Swap>
    7ffc:	add	r6, r6, #1
    8000:	strd	r0, [fp, #8]!
    8004:	b	7fec <ReadUInt64Data.part.5+0x100c>
    8008:	ldr	r3, [r6]
    800c:	mov	r2, #256	; 0x100
    8010:	mov	r1, r7
    8014:	mov	r0, r9
    8018:	bl	1588 <fread@plt>
    801c:	add	r2, fp, r8, lsl #3
    8020:	mov	r3, #0
    8024:	add	r5, r5, r0
    8028:	add	r0, r9, r3
    802c:	str	r2, [sp, #8]
    8030:	str	r3, [sp, #4]
    8034:	bl	18bc <Mat_int64Swap>
    8038:	ldr	r3, [sp, #4]
    803c:	ldr	r2, [sp, #8]
    8040:	strd	r0, [r2, r3]
    8044:	add	r3, r3, #8
    8048:	cmp	r3, #2048	; 0x800
    804c:	bne	8028 <ReadUInt64Data.part.5+0x1048>
    8050:	add	r8, r8, #256	; 0x100
    8054:	b	7f68 <ReadUInt64Data.part.5+0xf88>
    8058:	cmp	r4, #256	; 0x100
    805c:	ble	80d4 <ReadUInt64Data.part.5+0x10f4>
    8060:	mov	r9, r8
    8064:	mov	r5, r8
    8068:	add	sl, sp, #24
    806c:	sub	r3, r4, #256	; 0x100
    8070:	str	r3, [sp, #4]
    8074:	ldr	r3, [sp, #4]
    8078:	cmp	r9, r3
    807c:	blt	8110 <ReadUInt64Data.part.5+0x1130>
    8080:	sub	r9, r4, #1
    8084:	lsr	r9, r9, #8
    8088:	lsl	r3, r9, #8
    808c:	cmp	r4, r3
    8090:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    8094:	sub	r4, r4, r3
    8098:	add	sl, sp, #24
    809c:	ldr	r3, [r6]
    80a0:	mov	r2, r4
    80a4:	mov	r1, r7
    80a8:	mov	r0, sl
    80ac:	bl	1588 <fread@plt>
    80b0:	add	r9, fp, r9, lsl #11
    80b4:	add	r5, r5, r0
    80b8:	cmp	r4, r8
    80bc:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    80c0:	lsl	r3, r8, #3
    80c4:	add	r8, r8, #1
    80c8:	ldrd	r2, [r3, sl]
    80cc:	strd	r2, [r9], #8
    80d0:	b	80b8 <ReadUInt64Data.part.5+0x10d8>
    80d4:	add	r9, sp, #24
    80d8:	ldr	r3, [r6]
    80dc:	mov	r1, r0
    80e0:	mov	r2, r4
    80e4:	mov	r0, r9
    80e8:	bl	1588 <fread@plt>
    80ec:	sub	r3, fp, #8
    80f0:	mov	r5, r0
    80f4:	cmp	r4, r8
    80f8:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    80fc:	lsl	r2, r8, #3
    8100:	add	r8, r8, #1
    8104:	ldrd	r0, [r9, r2]
    8108:	strd	r0, [r3, #8]!
    810c:	b	80f4 <ReadUInt64Data.part.5+0x1114>
    8110:	mov	r1, r7
    8114:	ldr	r3, [r6]
    8118:	mov	r2, #256	; 0x100
    811c:	mov	r0, sl
    8120:	bl	1588 <fread@plt>
    8124:	mov	r1, #0
    8128:	add	r5, r5, r0
    812c:	add	r0, fp, r9, lsl #3
    8130:	ldrd	r2, [sl, r1]
    8134:	strd	r2, [r0, r1]
    8138:	add	r1, r1, #8
    813c:	cmp	r1, #2048	; 0x800
    8140:	bne	8130 <ReadUInt64Data.part.5+0x1150>
    8144:	add	r9, r9, #256	; 0x100
    8148:	b	8074 <ReadUInt64Data.part.5+0x1094>
    814c:	cmp	r5, #13
    8150:	movne	r5, #0
    8154:	bne	70f4 <ReadUInt64Data.part.5+0x114>
    8158:	ldr	r8, [r6, #20]
    815c:	cmp	r8, #0
    8160:	beq	826c <ReadUInt64Data.part.5+0x128c>
    8164:	cmp	r4, #256	; 0x100
    8168:	ble	81dc <ReadUInt64Data.part.5+0x11fc>
    816c:	mov	r8, #0
    8170:	mov	r5, r8
    8174:	sub	sl, r4, #256	; 0x100
    8178:	add	r9, sp, #24
    817c:	cmp	r8, sl
    8180:	blt	821c <ReadUInt64Data.part.5+0x123c>
    8184:	sub	r8, r4, #1
    8188:	lsr	r8, r8, #8
    818c:	lsl	r3, r8, #8
    8190:	cmp	r4, r3
    8194:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    8198:	sub	r4, r4, r3
    819c:	add	r9, sp, #24
    81a0:	ldr	r3, [r6]
    81a4:	mov	r2, r4
    81a8:	mov	r1, r7
    81ac:	mov	r0, r9
    81b0:	bl	1588 <fread@plt>
    81b4:	add	r8, fp, r8, lsl #11
    81b8:	mov	r6, #0
    81bc:	add	r5, r5, r0
    81c0:	cmp	r4, r6
    81c4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    81c8:	add	r0, r9, r6, lsl #3
    81cc:	bl	1980 <Mat_uint64Swap>
    81d0:	add	r6, r6, #1
    81d4:	strd	r0, [r8], #8
    81d8:	b	81c0 <ReadUInt64Data.part.5+0x11e0>
    81dc:	add	r9, sp, #24
    81e0:	ldr	r3, [r6]
    81e4:	mov	r1, r0
    81e8:	mov	r2, r4
    81ec:	mov	r0, r9
    81f0:	bl	1588 <fread@plt>
    81f4:	sub	fp, fp, #8
    81f8:	mov	r6, #0
    81fc:	mov	r5, r0
    8200:	cmp	r4, r6
    8204:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    8208:	add	r0, r9, r6, lsl #3
    820c:	bl	1980 <Mat_uint64Swap>
    8210:	add	r6, r6, #1
    8214:	strd	r0, [fp, #8]!
    8218:	b	8200 <ReadUInt64Data.part.5+0x1220>
    821c:	ldr	r3, [r6]
    8220:	mov	r2, #256	; 0x100
    8224:	mov	r1, r7
    8228:	mov	r0, r9
    822c:	bl	1588 <fread@plt>
    8230:	add	r2, fp, r8, lsl #3
    8234:	mov	r3, #0
    8238:	add	r5, r5, r0
    823c:	add	r0, r9, r3
    8240:	str	r2, [sp, #8]
    8244:	str	r3, [sp, #4]
    8248:	bl	1980 <Mat_uint64Swap>
    824c:	ldr	r3, [sp, #4]
    8250:	ldr	r2, [sp, #8]
    8254:	strd	r0, [r2, r3]
    8258:	add	r3, r3, #8
    825c:	cmp	r3, #2048	; 0x800
    8260:	bne	823c <ReadUInt64Data.part.5+0x125c>
    8264:	add	r8, r8, #256	; 0x100
    8268:	b	817c <ReadUInt64Data.part.5+0x119c>
    826c:	cmp	r4, #256	; 0x100
    8270:	ble	82e8 <ReadUInt64Data.part.5+0x1308>
    8274:	mov	r9, r8
    8278:	mov	r5, r8
    827c:	add	sl, sp, #24
    8280:	sub	r3, r4, #256	; 0x100
    8284:	str	r3, [sp, #4]
    8288:	ldr	r3, [sp, #4]
    828c:	cmp	r9, r3
    8290:	blt	8324 <ReadUInt64Data.part.5+0x1344>
    8294:	sub	r9, r4, #1
    8298:	lsr	r9, r9, #8
    829c:	lsl	r3, r9, #8
    82a0:	cmp	r4, r3
    82a4:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    82a8:	sub	r4, r4, r3
    82ac:	add	sl, sp, #24
    82b0:	ldr	r3, [r6]
    82b4:	mov	r2, r4
    82b8:	mov	r1, r7
    82bc:	mov	r0, sl
    82c0:	bl	1588 <fread@plt>
    82c4:	add	r9, fp, r9, lsl #11
    82c8:	add	r5, r5, r0
    82cc:	cmp	r4, r8
    82d0:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    82d4:	lsl	r3, r8, #3
    82d8:	add	r8, r8, #1
    82dc:	ldrd	r2, [r3, sl]
    82e0:	strd	r2, [r9], #8
    82e4:	b	82cc <ReadUInt64Data.part.5+0x12ec>
    82e8:	add	r9, sp, #24
    82ec:	ldr	r3, [r6]
    82f0:	mov	r1, r0
    82f4:	mov	r2, r4
    82f8:	mov	r0, r9
    82fc:	bl	1588 <fread@plt>
    8300:	sub	r3, fp, #8
    8304:	mov	r5, r0
    8308:	cmp	r4, r8
    830c:	ble	70f4 <ReadUInt64Data.part.5+0x114>
    8310:	lsl	r2, r8, #3
    8314:	add	r8, r8, #1
    8318:	ldrd	r0, [r9, r2]
    831c:	strd	r0, [r3, #8]!
    8320:	b	8308 <ReadUInt64Data.part.5+0x1328>
    8324:	mov	r1, r7
    8328:	ldr	r3, [r6]
    832c:	mov	r2, #256	; 0x100
    8330:	mov	r0, sl
    8334:	bl	1588 <fread@plt>
    8338:	mov	r1, #0
    833c:	add	r5, r5, r0
    8340:	add	r0, fp, r9, lsl #3
    8344:	ldrd	r2, [sl, r1]
    8348:	strd	r2, [r0, r1]
    834c:	add	r1, r1, #8
    8350:	cmp	r1, #2048	; 0x800
    8354:	bne	8344 <ReadUInt64Data.part.5+0x1364>
    8358:	add	r9, r9, #256	; 0x100
    835c:	b	8288 <ReadUInt64Data.part.5+0x12a8>

00008360 <ReadInt32Data.part.7>:
    8360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8364:	sub	sp, sp, #2048	; 0x800
    8368:	sub	sp, sp, #12
    836c:	mov	r6, r0
    8370:	mov	r0, r2
    8374:	mov	r5, r2
    8378:	mov	r4, r3
    837c:	mov	fp, r1
    8380:	bl	1600 <Mat_SizeOf@plt>
    8384:	sub	r3, r5, #1
    8388:	mov	r7, r0
    838c:	cmp	r3, #8
    8390:	addls	pc, pc, r3, lsl #2
    8394:	b	91e0 <ReadInt32Data.part.7+0xe80>
    8398:	b	9010 <ReadInt32Data.part.7+0xcb0>
    839c:	b	90f8 <ReadInt32Data.part.7+0xd98>
    83a0:	b	8c10 <ReadInt32Data.part.7+0x8b0>
    83a4:	b	8e10 <ReadInt32Data.part.7+0xab0>
    83a8:	b	8820 <ReadInt32Data.part.7+0x4c0>
    83ac:	b	8a18 <ReadInt32Data.part.7+0x6b8>
    83b0:	b	85f4 <ReadInt32Data.part.7+0x294>
    83b4:	b	91e0 <ReadInt32Data.part.7+0xe80>
    83b8:	b	83bc <ReadInt32Data.part.7+0x5c>
    83bc:	ldr	r8, [r6, #20]
    83c0:	cmp	r8, #0
    83c4:	beq	84f0 <ReadInt32Data.part.7+0x190>
    83c8:	cmp	r4, #256	; 0x100
    83cc:	ble	8448 <ReadInt32Data.part.7+0xe8>
    83d0:	mov	r8, #0
    83d4:	mov	r5, r8
    83d8:	sub	sl, r4, #256	; 0x100
    83dc:	add	r9, sp, #8
    83e0:	cmp	r8, sl
    83e4:	blt	849c <ReadInt32Data.part.7+0x13c>
    83e8:	sub	r8, r4, #1
    83ec:	lsr	r8, r8, #8
    83f0:	lsl	r3, r8, #8
    83f4:	cmp	r4, r3
    83f8:	ble	8470 <ReadInt32Data.part.7+0x110>
    83fc:	sub	r4, r4, r3
    8400:	add	r9, sp, #8
    8404:	ldr	r3, [r6]
    8408:	mov	r2, r4
    840c:	mov	r1, r7
    8410:	mov	r0, r9
    8414:	bl	1588 <fread@plt>
    8418:	add	r8, fp, r8, lsl #10
    841c:	mov	r6, #0
    8420:	add	r5, r5, r0
    8424:	cmp	r4, r6
    8428:	ble	8470 <ReadInt32Data.part.7+0x110>
    842c:	add	r0, r9, r6, lsl #3
    8430:	bl	1b88 <Mat_doubleSwap>
    8434:	vcvt.s32.f64	s0, d0
    8438:	vmov	r3, s0
    843c:	str	r3, [r8, r6, lsl #2]
    8440:	add	r6, r6, #1
    8444:	b	8424 <ReadInt32Data.part.7+0xc4>
    8448:	add	r8, sp, #8
    844c:	ldr	r3, [r6]
    8450:	mov	r1, r0
    8454:	mov	r2, r4
    8458:	mov	r0, r8
    845c:	bl	1588 <fread@plt>
    8460:	mov	r6, #0
    8464:	mov	r5, r0
    8468:	cmp	r4, r6
    846c:	bgt	8480 <ReadInt32Data.part.7+0x120>
    8470:	mul	r0, r7, r5
    8474:	add	sp, sp, #2048	; 0x800
    8478:	add	sp, sp, #12
    847c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8480:	add	r0, r8, r6, lsl #3
    8484:	bl	1b88 <Mat_doubleSwap>
    8488:	vcvt.s32.f64	s0, d0
    848c:	vmov	r3, s0
    8490:	str	r3, [fp, r6, lsl #2]
    8494:	add	r6, r6, #1
    8498:	b	8468 <ReadInt32Data.part.7+0x108>
    849c:	ldr	r3, [r6]
    84a0:	mov	r2, #256	; 0x100
    84a4:	mov	r1, r7
    84a8:	mov	r0, r9
    84ac:	bl	1588 <fread@plt>
    84b0:	add	r2, fp, r8, lsl #2
    84b4:	mov	r3, #0
    84b8:	add	r5, r5, r0
    84bc:	add	r0, r9, r3
    84c0:	str	r2, [sp, #4]
    84c4:	str	r3, [sp]
    84c8:	bl	1b88 <Mat_doubleSwap>
    84cc:	ldr	r3, [sp]
    84d0:	ldr	r2, [sp, #4]
    84d4:	add	r3, r3, #8
    84d8:	cmp	r3, #2048	; 0x800
    84dc:	vcvt.s32.f64	s0, d0
    84e0:	vstmia	r2!, {s0}
    84e4:	bne	84bc <ReadInt32Data.part.7+0x15c>
    84e8:	add	r8, r8, #256	; 0x100
    84ec:	b	83e0 <ReadInt32Data.part.7+0x80>
    84f0:	cmp	r4, #256	; 0x100
    84f4:	ble	8570 <ReadInt32Data.part.7+0x210>
    84f8:	mov	r9, r8
    84fc:	mov	r5, r8
    8500:	add	sl, sp, #8
    8504:	sub	r3, r4, #256	; 0x100
    8508:	str	r3, [sp]
    850c:	ldr	r3, [sp]
    8510:	cmp	r9, r3
    8514:	blt	85ac <ReadInt32Data.part.7+0x24c>
    8518:	sub	r9, r4, #1
    851c:	lsr	r9, r9, #8
    8520:	lsl	r3, r9, #8
    8524:	cmp	r4, r3
    8528:	ble	8470 <ReadInt32Data.part.7+0x110>
    852c:	sub	r4, r4, r3
    8530:	ldr	r3, [r6]
    8534:	add	r6, sp, #8
    8538:	mov	r2, r4
    853c:	mov	r1, r7
    8540:	mov	r0, r6
    8544:	bl	1588 <fread@plt>
    8548:	add	r9, fp, r9, lsl #10
    854c:	add	r5, r5, r0
    8550:	cmp	r4, r8
    8554:	ble	8470 <ReadInt32Data.part.7+0x110>
    8558:	vldmia	r6!, {d7}
    855c:	vcvt.s32.f64	s14, d7
    8560:	vmov	r3, s14
    8564:	str	r3, [r9, r8, lsl #2]
    8568:	add	r8, r8, #1
    856c:	b	8550 <ReadInt32Data.part.7+0x1f0>
    8570:	ldr	r3, [r6]
    8574:	add	r6, sp, #8
    8578:	mov	r1, r0
    857c:	mov	r2, r4
    8580:	mov	r0, r6
    8584:	bl	1588 <fread@plt>
    8588:	mov	r5, r0
    858c:	cmp	r4, r8
    8590:	ble	8470 <ReadInt32Data.part.7+0x110>
    8594:	vldmia	r6!, {d7}
    8598:	vcvt.s32.f64	s14, d7
    859c:	vmov	r3, s14
    85a0:	str	r3, [fp, r8, lsl #2]
    85a4:	add	r8, r8, #1
    85a8:	b	858c <ReadInt32Data.part.7+0x22c>
    85ac:	ldr	r3, [r6]
    85b0:	mov	r2, #256	; 0x100
    85b4:	mov	r1, r7
    85b8:	mov	r0, sl
    85bc:	bl	1588 <fread@plt>
    85c0:	mov	r2, sl
    85c4:	add	r1, fp, r9, lsl #2
    85c8:	mov	r3, r8
    85cc:	add	r5, r5, r0
    85d0:	vldmia	r2!, {d7}
    85d4:	vcvt.s32.f64	s14, d7
    85d8:	vmov	r0, s14
    85dc:	str	r0, [r1, r3, lsl #2]
    85e0:	add	r3, r3, #1
    85e4:	cmp	r3, #256	; 0x100
    85e8:	bne	85d0 <ReadInt32Data.part.7+0x270>
    85ec:	add	r9, r9, #256	; 0x100
    85f0:	b	850c <ReadInt32Data.part.7+0x1ac>
    85f4:	ldr	r8, [r6, #20]
    85f8:	cmp	r8, #0
    85fc:	beq	871c <ReadInt32Data.part.7+0x3bc>
    8600:	cmp	r4, #256	; 0x100
    8604:	ble	8680 <ReadInt32Data.part.7+0x320>
    8608:	mov	r8, #0
    860c:	mov	r5, r8
    8610:	sub	sl, r4, #256	; 0x100
    8614:	add	r9, sp, #8
    8618:	cmp	r8, sl
    861c:	blt	86c4 <ReadInt32Data.part.7+0x364>
    8620:	sub	r8, r4, #1
    8624:	lsr	r8, r8, #8
    8628:	lsl	r3, r8, #8
    862c:	cmp	r4, r3
    8630:	ble	8470 <ReadInt32Data.part.7+0x110>
    8634:	sub	r4, r4, r3
    8638:	add	r9, sp, #8
    863c:	ldr	r3, [r6]
    8640:	mov	r2, r4
    8644:	mov	r1, r7
    8648:	mov	r0, r9
    864c:	bl	1588 <fread@plt>
    8650:	add	r8, fp, r8, lsl #10
    8654:	mov	r6, #0
    8658:	add	r5, r5, r0
    865c:	cmp	r4, r6
    8660:	ble	8470 <ReadInt32Data.part.7+0x110>
    8664:	add	r0, r9, r6, lsl #2
    8668:	bl	1b2c <Mat_floatSwap>
    866c:	vcvt.s32.f32	s0, s0
    8670:	vmov	r3, s0
    8674:	str	r3, [r8, r6, lsl #2]
    8678:	add	r6, r6, #1
    867c:	b	865c <ReadInt32Data.part.7+0x2fc>
    8680:	add	r8, sp, #8
    8684:	ldr	r3, [r6]
    8688:	mov	r1, r0
    868c:	mov	r2, r4
    8690:	mov	r0, r8
    8694:	bl	1588 <fread@plt>
    8698:	mov	r6, #0
    869c:	mov	r5, r0
    86a0:	cmp	r4, r6
    86a4:	ble	8470 <ReadInt32Data.part.7+0x110>
    86a8:	add	r0, r8, r6, lsl #2
    86ac:	bl	1b2c <Mat_floatSwap>
    86b0:	vcvt.s32.f32	s0, s0
    86b4:	vmov	r3, s0
    86b8:	str	r3, [fp, r6, lsl #2]
    86bc:	add	r6, r6, #1
    86c0:	b	86a0 <ReadInt32Data.part.7+0x340>
    86c4:	ldr	r3, [r6]
    86c8:	mov	r2, #256	; 0x100
    86cc:	mov	r1, r7
    86d0:	mov	r0, r9
    86d4:	bl	1588 <fread@plt>
    86d8:	add	r2, fp, r8, lsl #2
    86dc:	mov	r3, #0
    86e0:	add	r5, r5, r0
    86e4:	add	r0, r9, r3
    86e8:	str	r2, [sp, #4]
    86ec:	str	r3, [sp]
    86f0:	bl	1b2c <Mat_floatSwap>
    86f4:	ldr	r3, [sp]
    86f8:	ldr	r2, [sp, #4]
    86fc:	vcvt.s32.f32	s0, s0
    8700:	vmov	r1, s0
    8704:	str	r1, [r2, r3]
    8708:	add	r3, r3, #4
    870c:	cmp	r3, #1024	; 0x400
    8710:	bne	86e4 <ReadInt32Data.part.7+0x384>
    8714:	add	r8, r8, #256	; 0x100
    8718:	b	8618 <ReadInt32Data.part.7+0x2b8>
    871c:	cmp	r4, #256	; 0x100
    8720:	ble	879c <ReadInt32Data.part.7+0x43c>
    8724:	mov	r9, r8
    8728:	mov	r5, r8
    872c:	add	sl, sp, #8
    8730:	sub	r3, r4, #256	; 0x100
    8734:	str	r3, [sp]
    8738:	ldr	r3, [sp]
    873c:	cmp	r9, r3
    8740:	blt	87d8 <ReadInt32Data.part.7+0x478>
    8744:	sub	r9, r4, #1
    8748:	lsr	r9, r9, #8
    874c:	lsl	r3, r9, #8
    8750:	cmp	r4, r3
    8754:	ble	8470 <ReadInt32Data.part.7+0x110>
    8758:	sub	r4, r4, r3
    875c:	ldr	r3, [r6]
    8760:	add	r6, sp, #8
    8764:	mov	r2, r4
    8768:	mov	r1, r7
    876c:	mov	r0, r6
    8770:	bl	1588 <fread@plt>
    8774:	add	r9, fp, r9, lsl #10
    8778:	add	r5, r5, r0
    877c:	cmp	r4, r8
    8780:	ble	8470 <ReadInt32Data.part.7+0x110>
    8784:	vldmia	r6!, {s15}
    8788:	vcvt.s32.f32	s15, s15
    878c:	vmov	r3, s15
    8790:	str	r3, [r9, r8, lsl #2]
    8794:	add	r8, r8, #1
    8798:	b	877c <ReadInt32Data.part.7+0x41c>
    879c:	ldr	r3, [r6]
    87a0:	add	r6, sp, #8
    87a4:	mov	r1, r0
    87a8:	mov	r2, r4
    87ac:	mov	r0, r6
    87b0:	bl	1588 <fread@plt>
    87b4:	mov	r5, r0
    87b8:	cmp	r4, r8
    87bc:	ble	8470 <ReadInt32Data.part.7+0x110>
    87c0:	vldmia	r6!, {s15}
    87c4:	vcvt.s32.f32	s15, s15
    87c8:	vmov	r3, s15
    87cc:	str	r3, [fp, r8, lsl #2]
    87d0:	add	r8, r8, #1
    87d4:	b	87b8 <ReadInt32Data.part.7+0x458>
    87d8:	ldr	r3, [r6]
    87dc:	mov	r2, #256	; 0x100
    87e0:	mov	r1, r7
    87e4:	mov	r0, sl
    87e8:	bl	1588 <fread@plt>
    87ec:	mov	r2, sl
    87f0:	add	r1, fp, r9, lsl #2
    87f4:	mov	r3, r8
    87f8:	add	r5, r5, r0
    87fc:	vldmia	r2!, {s15}
    8800:	vcvt.s32.f32	s15, s15
    8804:	vmov	r0, s15
    8808:	str	r0, [r1, r3, lsl #2]
    880c:	add	r3, r3, #1
    8810:	cmp	r3, #256	; 0x100
    8814:	bne	87fc <ReadInt32Data.part.7+0x49c>
    8818:	add	r9, r9, #256	; 0x100
    881c:	b	8738 <ReadInt32Data.part.7+0x3d8>
    8820:	ldr	r8, [r6, #20]
    8824:	cmp	r8, #0
    8828:	beq	8930 <ReadInt32Data.part.7+0x5d0>
    882c:	cmp	r4, #256	; 0x100
    8830:	ble	88a4 <ReadInt32Data.part.7+0x544>
    8834:	mov	r8, #0
    8838:	mov	r5, r8
    883c:	sub	sl, r4, #256	; 0x100
    8840:	add	r9, sp, #8
    8844:	cmp	r8, sl
    8848:	blt	88e0 <ReadInt32Data.part.7+0x580>
    884c:	sub	r8, r4, #1
    8850:	lsr	r8, r8, #8
    8854:	lsl	r3, r8, #8
    8858:	cmp	r4, r3
    885c:	ble	8470 <ReadInt32Data.part.7+0x110>
    8860:	sub	r4, r4, r3
    8864:	add	r9, sp, #8
    8868:	ldr	r3, [r6]
    886c:	mov	r2, r4
    8870:	mov	r1, r7
    8874:	mov	r0, r9
    8878:	bl	1588 <fread@plt>
    887c:	add	r8, fp, r8, lsl #10
    8880:	mov	r6, #0
    8884:	add	r5, r5, r0
    8888:	cmp	r4, r6
    888c:	ble	8470 <ReadInt32Data.part.7+0x110>
    8890:	add	r0, r9, r6, lsl #2
    8894:	bl	1a18 <Mat_int32Swap>
    8898:	str	r0, [r8, r6, lsl #2]
    889c:	add	r6, r6, #1
    88a0:	b	8888 <ReadInt32Data.part.7+0x528>
    88a4:	add	r8, sp, #8
    88a8:	ldr	r3, [r6]
    88ac:	mov	r1, r0
    88b0:	mov	r2, r4
    88b4:	mov	r0, r8
    88b8:	bl	1588 <fread@plt>
    88bc:	mov	r6, #0
    88c0:	mov	r5, r0
    88c4:	cmp	r4, r6
    88c8:	ble	8470 <ReadInt32Data.part.7+0x110>
    88cc:	add	r0, r8, r6, lsl #2
    88d0:	bl	1a18 <Mat_int32Swap>
    88d4:	str	r0, [fp, r6, lsl #2]
    88d8:	add	r6, r6, #1
    88dc:	b	88c4 <ReadInt32Data.part.7+0x564>
    88e0:	ldr	r3, [r6]
    88e4:	mov	r2, #256	; 0x100
    88e8:	mov	r1, r7
    88ec:	mov	r0, r9
    88f0:	bl	1588 <fread@plt>
    88f4:	add	r2, fp, r8, lsl #2
    88f8:	mov	r3, #0
    88fc:	add	r5, r5, r0
    8900:	add	r0, r9, r3
    8904:	str	r2, [sp, #4]
    8908:	str	r3, [sp]
    890c:	bl	1a18 <Mat_int32Swap>
    8910:	ldr	r3, [sp]
    8914:	ldr	r2, [sp, #4]
    8918:	str	r0, [r2, r3]
    891c:	add	r3, r3, #4
    8920:	cmp	r3, #1024	; 0x400
    8924:	bne	8900 <ReadInt32Data.part.7+0x5a0>
    8928:	add	r8, r8, #256	; 0x100
    892c:	b	8844 <ReadInt32Data.part.7+0x4e4>
    8930:	cmp	r4, #256	; 0x100
    8934:	ble	89a8 <ReadInt32Data.part.7+0x648>
    8938:	mov	r9, r8
    893c:	mov	r5, r8
    8940:	add	sl, sp, #8
    8944:	sub	r3, r4, #256	; 0x100
    8948:	str	r3, [sp]
    894c:	ldr	r3, [sp]
    8950:	cmp	r9, r3
    8954:	blt	89dc <ReadInt32Data.part.7+0x67c>
    8958:	sub	r9, r4, #1
    895c:	lsr	r9, r9, #8
    8960:	lsl	r3, r9, #8
    8964:	cmp	r4, r3
    8968:	ble	8470 <ReadInt32Data.part.7+0x110>
    896c:	sub	r4, r4, r3
    8970:	add	sl, sp, #8
    8974:	ldr	r3, [r6]
    8978:	mov	r2, r4
    897c:	mov	r1, r7
    8980:	mov	r0, sl
    8984:	bl	1588 <fread@plt>
    8988:	add	r9, fp, r9, lsl #10
    898c:	add	r5, r5, r0
    8990:	cmp	r4, r8
    8994:	ble	8470 <ReadInt32Data.part.7+0x110>
    8998:	ldr	r3, [sl, r8, lsl #2]
    899c:	str	r3, [r9, r8, lsl #2]
    89a0:	add	r8, r8, #1
    89a4:	b	8990 <ReadInt32Data.part.7+0x630>
    89a8:	add	r9, sp, #8
    89ac:	mov	r1, r0
    89b0:	ldr	r3, [r6]
    89b4:	mov	r2, r4
    89b8:	mov	r0, r9
    89bc:	bl	1588 <fread@plt>
    89c0:	mov	r5, r0
    89c4:	cmp	r4, r8
    89c8:	ble	8470 <ReadInt32Data.part.7+0x110>
    89cc:	ldr	r3, [r9, r8, lsl #2]
    89d0:	str	r3, [fp, r8, lsl #2]
    89d4:	add	r8, r8, #1
    89d8:	b	89c4 <ReadInt32Data.part.7+0x664>
    89dc:	ldr	r3, [r6]
    89e0:	mov	r2, #256	; 0x100
    89e4:	mov	r1, r7
    89e8:	mov	r0, sl
    89ec:	bl	1588 <fread@plt>
    89f0:	add	r2, fp, r9, lsl #2
    89f4:	mov	r3, r8
    89f8:	add	r5, r5, r0
    89fc:	ldr	r1, [sl, r3, lsl #2]
    8a00:	str	r1, [r2, r3, lsl #2]
    8a04:	add	r3, r3, #1
    8a08:	cmp	r3, #256	; 0x100
    8a0c:	bne	89fc <ReadInt32Data.part.7+0x69c>
    8a10:	add	r9, r9, #256	; 0x100
    8a14:	b	894c <ReadInt32Data.part.7+0x5ec>
    8a18:	ldr	r8, [r6, #20]
    8a1c:	cmp	r8, #0
    8a20:	beq	8b28 <ReadInt32Data.part.7+0x7c8>
    8a24:	cmp	r4, #256	; 0x100
    8a28:	ble	8a9c <ReadInt32Data.part.7+0x73c>
    8a2c:	mov	r8, #0
    8a30:	mov	r5, r8
    8a34:	sub	sl, r4, #256	; 0x100
    8a38:	add	r9, sp, #8
    8a3c:	cmp	r8, sl
    8a40:	blt	8ad8 <ReadInt32Data.part.7+0x778>
    8a44:	sub	r8, r4, #1
    8a48:	lsr	r8, r8, #8
    8a4c:	lsl	r3, r8, #8
    8a50:	cmp	r4, r3
    8a54:	ble	8470 <ReadInt32Data.part.7+0x110>
    8a58:	sub	r4, r4, r3
    8a5c:	add	r9, sp, #8
    8a60:	ldr	r3, [r6]
    8a64:	mov	r2, r4
    8a68:	mov	r1, r7
    8a6c:	mov	r0, r9
    8a70:	bl	1588 <fread@plt>
    8a74:	add	r8, fp, r8, lsl #10
    8a78:	mov	r6, #0
    8a7c:	add	r5, r5, r0
    8a80:	cmp	r4, r6
    8a84:	ble	8470 <ReadInt32Data.part.7+0x110>
    8a88:	add	r0, r9, r6, lsl #2
    8a8c:	bl	1a80 <Mat_uint32Swap>
    8a90:	str	r0, [r8, r6, lsl #2]
    8a94:	add	r6, r6, #1
    8a98:	b	8a80 <ReadInt32Data.part.7+0x720>
    8a9c:	add	r8, sp, #8
    8aa0:	ldr	r3, [r6]
    8aa4:	mov	r1, r0
    8aa8:	mov	r2, r4
    8aac:	mov	r0, r8
    8ab0:	bl	1588 <fread@plt>
    8ab4:	mov	r6, #0
    8ab8:	mov	r5, r0
    8abc:	cmp	r4, r6
    8ac0:	ble	8470 <ReadInt32Data.part.7+0x110>
    8ac4:	add	r0, r8, r6, lsl #2
    8ac8:	bl	1a80 <Mat_uint32Swap>
    8acc:	str	r0, [fp, r6, lsl #2]
    8ad0:	add	r6, r6, #1
    8ad4:	b	8abc <ReadInt32Data.part.7+0x75c>
    8ad8:	ldr	r3, [r6]
    8adc:	mov	r2, #256	; 0x100
    8ae0:	mov	r1, r7
    8ae4:	mov	r0, r9
    8ae8:	bl	1588 <fread@plt>
    8aec:	add	r2, fp, r8, lsl #2
    8af0:	mov	r3, #0
    8af4:	add	r5, r5, r0
    8af8:	add	r0, r9, r3
    8afc:	str	r2, [sp, #4]
    8b00:	str	r3, [sp]
    8b04:	bl	1a80 <Mat_uint32Swap>
    8b08:	ldr	r3, [sp]
    8b0c:	ldr	r2, [sp, #4]
    8b10:	str	r0, [r2, r3]
    8b14:	add	r3, r3, #4
    8b18:	cmp	r3, #1024	; 0x400
    8b1c:	bne	8af8 <ReadInt32Data.part.7+0x798>
    8b20:	add	r8, r8, #256	; 0x100
    8b24:	b	8a3c <ReadInt32Data.part.7+0x6dc>
    8b28:	cmp	r4, #256	; 0x100
    8b2c:	ble	8ba0 <ReadInt32Data.part.7+0x840>
    8b30:	mov	r9, r8
    8b34:	mov	r5, r8
    8b38:	add	sl, sp, #8
    8b3c:	sub	r3, r4, #256	; 0x100
    8b40:	str	r3, [sp]
    8b44:	ldr	r3, [sp]
    8b48:	cmp	r9, r3
    8b4c:	blt	8bd4 <ReadInt32Data.part.7+0x874>
    8b50:	sub	r9, r4, #1
    8b54:	lsr	r9, r9, #8
    8b58:	lsl	r3, r9, #8
    8b5c:	cmp	r4, r3
    8b60:	ble	8470 <ReadInt32Data.part.7+0x110>
    8b64:	sub	r4, r4, r3
    8b68:	add	sl, sp, #8
    8b6c:	ldr	r3, [r6]
    8b70:	mov	r2, r4
    8b74:	mov	r1, r7
    8b78:	mov	r0, sl
    8b7c:	bl	1588 <fread@plt>
    8b80:	add	r9, fp, r9, lsl #10
    8b84:	add	r5, r5, r0
    8b88:	cmp	r4, r8
    8b8c:	ble	8470 <ReadInt32Data.part.7+0x110>
    8b90:	ldr	r3, [sl, r8, lsl #2]
    8b94:	str	r3, [r9, r8, lsl #2]
    8b98:	add	r8, r8, #1
    8b9c:	b	8b88 <ReadInt32Data.part.7+0x828>
    8ba0:	add	r9, sp, #8
    8ba4:	mov	r1, r0
    8ba8:	ldr	r3, [r6]
    8bac:	mov	r2, r4
    8bb0:	mov	r0, r9
    8bb4:	bl	1588 <fread@plt>
    8bb8:	mov	r5, r0
    8bbc:	cmp	r4, r8
    8bc0:	ble	8470 <ReadInt32Data.part.7+0x110>
    8bc4:	ldr	r3, [r9, r8, lsl #2]
    8bc8:	str	r3, [fp, r8, lsl #2]
    8bcc:	add	r8, r8, #1
    8bd0:	b	8bbc <ReadInt32Data.part.7+0x85c>
    8bd4:	ldr	r3, [r6]
    8bd8:	mov	r2, #256	; 0x100
    8bdc:	mov	r1, r7
    8be0:	mov	r0, sl
    8be4:	bl	1588 <fread@plt>
    8be8:	add	r2, fp, r9, lsl #2
    8bec:	mov	r3, r8
    8bf0:	add	r5, r5, r0
    8bf4:	ldr	r1, [sl, r3, lsl #2]
    8bf8:	str	r1, [r2, r3, lsl #2]
    8bfc:	add	r3, r3, #1
    8c00:	cmp	r3, #256	; 0x100
    8c04:	bne	8bf4 <ReadInt32Data.part.7+0x894>
    8c08:	add	r9, r9, #256	; 0x100
    8c0c:	b	8b44 <ReadInt32Data.part.7+0x7e4>
    8c10:	ldr	r8, [r6, #20]
    8c14:	cmp	r8, #0
    8c18:	beq	8d20 <ReadInt32Data.part.7+0x9c0>
    8c1c:	cmp	r4, #256	; 0x100
    8c20:	ble	8c94 <ReadInt32Data.part.7+0x934>
    8c24:	mov	r8, #0
    8c28:	mov	r5, r8
    8c2c:	sub	sl, r4, #256	; 0x100
    8c30:	add	r9, sp, #8
    8c34:	cmp	r8, sl
    8c38:	blt	8cd0 <ReadInt32Data.part.7+0x970>
    8c3c:	sub	r8, r4, #1
    8c40:	lsr	r8, r8, #8
    8c44:	lsl	r3, r8, #8
    8c48:	cmp	r4, r3
    8c4c:	ble	8470 <ReadInt32Data.part.7+0x110>
    8c50:	sub	r4, r4, r3
    8c54:	add	r9, sp, #8
    8c58:	ldr	r3, [r6]
    8c5c:	mov	r2, r4
    8c60:	mov	r1, r7
    8c64:	mov	r0, r9
    8c68:	bl	1588 <fread@plt>
    8c6c:	add	r8, fp, r8, lsl #10
    8c70:	mov	r6, #0
    8c74:	add	r5, r5, r0
    8c78:	cmp	r4, r6
    8c7c:	ble	8470 <ReadInt32Data.part.7+0x110>
    8c80:	add	r0, r9, r6, lsl #1
    8c84:	bl	1adc <Mat_int16Swap>
    8c88:	str	r0, [r8, r6, lsl #2]
    8c8c:	add	r6, r6, #1
    8c90:	b	8c78 <ReadInt32Data.part.7+0x918>
    8c94:	add	r8, sp, #8
    8c98:	ldr	r3, [r6]
    8c9c:	mov	r1, r0
    8ca0:	mov	r2, r4
    8ca4:	mov	r0, r8
    8ca8:	bl	1588 <fread@plt>
    8cac:	mov	r6, #0
    8cb0:	mov	r5, r0
    8cb4:	cmp	r4, r6
    8cb8:	ble	8470 <ReadInt32Data.part.7+0x110>
    8cbc:	add	r0, r8, r6, lsl #1
    8cc0:	bl	1adc <Mat_int16Swap>
    8cc4:	str	r0, [fp, r6, lsl #2]
    8cc8:	add	r6, r6, #1
    8ccc:	b	8cb4 <ReadInt32Data.part.7+0x954>
    8cd0:	ldr	r3, [r6]
    8cd4:	mov	r2, #256	; 0x100
    8cd8:	mov	r1, r7
    8cdc:	mov	r0, r9
    8ce0:	bl	1588 <fread@plt>
    8ce4:	add	r2, fp, r8, lsl #2
    8ce8:	mov	r3, #0
    8cec:	add	r5, r5, r0
    8cf0:	add	r0, r9, r3
    8cf4:	str	r2, [sp, #4]
    8cf8:	str	r3, [sp]
    8cfc:	bl	1adc <Mat_int16Swap>
    8d00:	ldr	r3, [sp]
    8d04:	ldr	r2, [sp, #4]
    8d08:	str	r0, [r2, r3, lsl #1]
    8d0c:	add	r3, r3, #2
    8d10:	cmp	r3, #512	; 0x200
    8d14:	bne	8cf0 <ReadInt32Data.part.7+0x990>
    8d18:	add	r8, r8, #256	; 0x100
    8d1c:	b	8c34 <ReadInt32Data.part.7+0x8d4>
    8d20:	cmp	r4, #256	; 0x100
    8d24:	ble	8d9c <ReadInt32Data.part.7+0xa3c>
    8d28:	mov	r9, r8
    8d2c:	mov	r5, r8
    8d30:	add	sl, sp, #8
    8d34:	sub	r3, r4, #256	; 0x100
    8d38:	str	r3, [sp]
    8d3c:	ldr	r3, [sp]
    8d40:	cmp	r9, r3
    8d44:	blt	8dd4 <ReadInt32Data.part.7+0xa74>
    8d48:	sub	r9, r4, #1
    8d4c:	lsr	r9, r9, #8
    8d50:	lsl	r3, r9, #8
    8d54:	cmp	r4, r3
    8d58:	ble	8470 <ReadInt32Data.part.7+0x110>
    8d5c:	sub	r4, r4, r3
    8d60:	add	sl, sp, #8
    8d64:	ldr	r3, [r6]
    8d68:	mov	r2, r4
    8d6c:	mov	r1, r7
    8d70:	mov	r0, sl
    8d74:	bl	1588 <fread@plt>
    8d78:	add	r9, fp, r9, lsl #10
    8d7c:	add	r5, r5, r0
    8d80:	cmp	r4, r8
    8d84:	ble	8470 <ReadInt32Data.part.7+0x110>
    8d88:	lsl	r3, r8, #1
    8d8c:	ldrsh	r3, [sl, r3]
    8d90:	str	r3, [r9, r8, lsl #2]
    8d94:	add	r8, r8, #1
    8d98:	b	8d80 <ReadInt32Data.part.7+0xa20>
    8d9c:	add	r9, sp, #8
    8da0:	mov	r1, r0
    8da4:	ldr	r3, [r6]
    8da8:	mov	r2, r4
    8dac:	mov	r0, r9
    8db0:	bl	1588 <fread@plt>
    8db4:	mov	r5, r0
    8db8:	cmp	r4, r8
    8dbc:	ble	8470 <ReadInt32Data.part.7+0x110>
    8dc0:	lsl	r3, r8, #1
    8dc4:	ldrsh	r3, [r9, r3]
    8dc8:	str	r3, [fp, r8, lsl #2]
    8dcc:	add	r8, r8, #1
    8dd0:	b	8db8 <ReadInt32Data.part.7+0xa58>
    8dd4:	ldr	r3, [r6]
    8dd8:	mov	r2, #256	; 0x100
    8ddc:	mov	r1, r7
    8de0:	mov	r0, sl
    8de4:	bl	1588 <fread@plt>
    8de8:	add	r2, fp, r9, lsl #2
    8dec:	mov	r3, #0
    8df0:	add	r5, r5, r0
    8df4:	ldrsh	r1, [sl, r3]
    8df8:	str	r1, [r2, r3, lsl #1]
    8dfc:	add	r3, r3, #2
    8e00:	cmp	r3, #512	; 0x200
    8e04:	bne	8df4 <ReadInt32Data.part.7+0xa94>
    8e08:	add	r9, r9, #256	; 0x100
    8e0c:	b	8d3c <ReadInt32Data.part.7+0x9dc>
    8e10:	ldr	r8, [r6, #20]
    8e14:	cmp	r8, #0
    8e18:	beq	8f20 <ReadInt32Data.part.7+0xbc0>
    8e1c:	cmp	r4, #256	; 0x100
    8e20:	ble	8e94 <ReadInt32Data.part.7+0xb34>
    8e24:	mov	r8, #0
    8e28:	mov	r5, r8
    8e2c:	sub	sl, r4, #256	; 0x100
    8e30:	add	r9, sp, #8
    8e34:	cmp	r8, sl
    8e38:	blt	8ed0 <ReadInt32Data.part.7+0xb70>
    8e3c:	sub	r8, r4, #1
    8e40:	lsr	r8, r8, #8
    8e44:	lsl	r3, r8, #8
    8e48:	cmp	r4, r3
    8e4c:	ble	8470 <ReadInt32Data.part.7+0x110>
    8e50:	sub	r4, r4, r3
    8e54:	add	r9, sp, #8
    8e58:	ldr	r3, [r6]
    8e5c:	mov	r2, r4
    8e60:	mov	r1, r7
    8e64:	mov	r0, r9
    8e68:	bl	1588 <fread@plt>
    8e6c:	add	r8, fp, r8, lsl #10
    8e70:	mov	r6, #0
    8e74:	add	r5, r5, r0
    8e78:	cmp	r4, r6
    8e7c:	ble	8470 <ReadInt32Data.part.7+0x110>
    8e80:	add	r0, r9, r6, lsl #1
    8e84:	bl	1b10 <Mat_uint16Swap>
    8e88:	str	r0, [r8, r6, lsl #2]
    8e8c:	add	r6, r6, #1
    8e90:	b	8e78 <ReadInt32Data.part.7+0xb18>
    8e94:	add	r8, sp, #8
    8e98:	ldr	r3, [r6]
    8e9c:	mov	r1, r0
    8ea0:	mov	r2, r4
    8ea4:	mov	r0, r8
    8ea8:	bl	1588 <fread@plt>
    8eac:	mov	r6, #0
    8eb0:	mov	r5, r0
    8eb4:	cmp	r4, r6
    8eb8:	ble	8470 <ReadInt32Data.part.7+0x110>
    8ebc:	add	r0, r8, r6, lsl #1
    8ec0:	bl	1b10 <Mat_uint16Swap>
    8ec4:	str	r0, [fp, r6, lsl #2]
    8ec8:	add	r6, r6, #1
    8ecc:	b	8eb4 <ReadInt32Data.part.7+0xb54>
    8ed0:	ldr	r3, [r6]
    8ed4:	mov	r2, #256	; 0x100
    8ed8:	mov	r1, r7
    8edc:	mov	r0, r9
    8ee0:	bl	1588 <fread@plt>
    8ee4:	add	r2, fp, r8, lsl #2
    8ee8:	mov	r3, #0
    8eec:	add	r5, r5, r0
    8ef0:	add	r0, r9, r3
    8ef4:	str	r2, [sp, #4]
    8ef8:	str	r3, [sp]
    8efc:	bl	1b10 <Mat_uint16Swap>
    8f00:	ldr	r3, [sp]
    8f04:	ldr	r2, [sp, #4]
    8f08:	str	r0, [r2, r3, lsl #1]
    8f0c:	add	r3, r3, #2
    8f10:	cmp	r3, #512	; 0x200
    8f14:	bne	8ef0 <ReadInt32Data.part.7+0xb90>
    8f18:	add	r8, r8, #256	; 0x100
    8f1c:	b	8e34 <ReadInt32Data.part.7+0xad4>
    8f20:	cmp	r4, #256	; 0x100
    8f24:	ble	8f9c <ReadInt32Data.part.7+0xc3c>
    8f28:	mov	r9, r8
    8f2c:	mov	r5, r8
    8f30:	add	sl, sp, #8
    8f34:	sub	r3, r4, #256	; 0x100
    8f38:	str	r3, [sp]
    8f3c:	ldr	r3, [sp]
    8f40:	cmp	r9, r3
    8f44:	blt	8fd4 <ReadInt32Data.part.7+0xc74>
    8f48:	sub	r9, r4, #1
    8f4c:	lsr	r9, r9, #8
    8f50:	lsl	r3, r9, #8
    8f54:	cmp	r4, r3
    8f58:	ble	8470 <ReadInt32Data.part.7+0x110>
    8f5c:	sub	r4, r4, r3
    8f60:	add	sl, sp, #8
    8f64:	ldr	r3, [r6]
    8f68:	mov	r2, r4
    8f6c:	mov	r1, r7
    8f70:	mov	r0, sl
    8f74:	bl	1588 <fread@plt>
    8f78:	add	r9, fp, r9, lsl #10
    8f7c:	add	r5, r5, r0
    8f80:	cmp	r4, r8
    8f84:	ble	8470 <ReadInt32Data.part.7+0x110>
    8f88:	lsl	r3, r8, #1
    8f8c:	ldrh	r3, [sl, r3]
    8f90:	str	r3, [r9, r8, lsl #2]
    8f94:	add	r8, r8, #1
    8f98:	b	8f80 <ReadInt32Data.part.7+0xc20>
    8f9c:	add	r9, sp, #8
    8fa0:	mov	r1, r0
    8fa4:	ldr	r3, [r6]
    8fa8:	mov	r2, r4
    8fac:	mov	r0, r9
    8fb0:	bl	1588 <fread@plt>
    8fb4:	mov	r5, r0
    8fb8:	cmp	r4, r8
    8fbc:	ble	8470 <ReadInt32Data.part.7+0x110>
    8fc0:	lsl	r3, r8, #1
    8fc4:	ldrh	r3, [r9, r3]
    8fc8:	str	r3, [fp, r8, lsl #2]
    8fcc:	add	r8, r8, #1
    8fd0:	b	8fb8 <ReadInt32Data.part.7+0xc58>
    8fd4:	ldr	r3, [r6]
    8fd8:	mov	r2, #256	; 0x100
    8fdc:	mov	r1, r7
    8fe0:	mov	r0, sl
    8fe4:	bl	1588 <fread@plt>
    8fe8:	add	r2, fp, r9, lsl #2
    8fec:	mov	r3, #0
    8ff0:	add	r5, r5, r0
    8ff4:	ldrh	r1, [sl, r3]
    8ff8:	str	r1, [r2, r3, lsl #1]
    8ffc:	add	r3, r3, #2
    9000:	cmp	r3, #512	; 0x200
    9004:	bne	8ff4 <ReadInt32Data.part.7+0xc94>
    9008:	add	r9, r9, #256	; 0x100
    900c:	b	8f3c <ReadInt32Data.part.7+0xbdc>
    9010:	cmp	r4, #256	; 0x100
    9014:	ble	9084 <ReadInt32Data.part.7+0xd24>
    9018:	mov	r8, #0
    901c:	mov	r5, r8
    9020:	sub	sl, r4, #256	; 0x100
    9024:	add	r9, sp, #8
    9028:	cmp	r8, sl
    902c:	blt	90bc <ReadInt32Data.part.7+0xd5c>
    9030:	sub	r8, r4, #1
    9034:	lsr	r8, r8, #8
    9038:	lsl	r3, r8, #8
    903c:	cmp	r4, r3
    9040:	ble	8470 <ReadInt32Data.part.7+0x110>
    9044:	sub	r4, r4, r3
    9048:	add	r9, sp, #8
    904c:	ldr	r3, [r6]
    9050:	mov	r2, r4
    9054:	mov	r1, r7
    9058:	mov	r0, r9
    905c:	bl	1588 <fread@plt>
    9060:	add	r8, fp, r8, lsl #10
    9064:	mov	r3, #0
    9068:	add	r5, r5, r0
    906c:	cmp	r4, r3
    9070:	ble	8470 <ReadInt32Data.part.7+0x110>
    9074:	ldrsb	r2, [r9, r3]
    9078:	str	r2, [r8, r3, lsl #2]
    907c:	add	r3, r3, #1
    9080:	b	906c <ReadInt32Data.part.7+0xd0c>
    9084:	add	r8, sp, #8
    9088:	ldr	r3, [r6]
    908c:	mov	r1, r0
    9090:	mov	r2, r4
    9094:	mov	r0, r8
    9098:	bl	1588 <fread@plt>
    909c:	mov	r3, #0
    90a0:	mov	r5, r0
    90a4:	cmp	r4, r3
    90a8:	ble	8470 <ReadInt32Data.part.7+0x110>
    90ac:	ldrsb	r2, [r8, r3]
    90b0:	str	r2, [fp, r3, lsl #2]
    90b4:	add	r3, r3, #1
    90b8:	b	90a4 <ReadInt32Data.part.7+0xd44>
    90bc:	ldr	r3, [r6]
    90c0:	mov	r2, #256	; 0x100
    90c4:	mov	r1, r7
    90c8:	mov	r0, r9
    90cc:	bl	1588 <fread@plt>
    90d0:	add	r2, fp, r8, lsl #2
    90d4:	mov	r3, #0
    90d8:	add	r5, r5, r0
    90dc:	ldrsb	r1, [r9, r3]
    90e0:	str	r1, [r2, r3, lsl #2]
    90e4:	add	r3, r3, #1
    90e8:	cmp	r3, #256	; 0x100
    90ec:	bne	90dc <ReadInt32Data.part.7+0xd7c>
    90f0:	add	r8, r8, #256	; 0x100
    90f4:	b	9028 <ReadInt32Data.part.7+0xcc8>
    90f8:	cmp	r4, #256	; 0x100
    90fc:	ble	916c <ReadInt32Data.part.7+0xe0c>
    9100:	mov	r8, #0
    9104:	mov	r5, r8
    9108:	sub	sl, r4, #256	; 0x100
    910c:	add	r9, sp, #8
    9110:	cmp	r8, sl
    9114:	blt	91a4 <ReadInt32Data.part.7+0xe44>
    9118:	sub	r8, r4, #1
    911c:	lsr	r8, r8, #8
    9120:	lsl	r3, r8, #8
    9124:	cmp	r4, r3
    9128:	ble	8470 <ReadInt32Data.part.7+0x110>
    912c:	sub	r4, r4, r3
    9130:	add	r9, sp, #8
    9134:	ldr	r3, [r6]
    9138:	mov	r2, r4
    913c:	mov	r1, r7
    9140:	mov	r0, r9
    9144:	bl	1588 <fread@plt>
    9148:	add	r8, fp, r8, lsl #10
    914c:	mov	r3, #0
    9150:	add	r5, r5, r0
    9154:	cmp	r4, r3
    9158:	ble	8470 <ReadInt32Data.part.7+0x110>
    915c:	ldrb	r2, [r9, r3]
    9160:	str	r2, [r8, r3, lsl #2]
    9164:	add	r3, r3, #1
    9168:	b	9154 <ReadInt32Data.part.7+0xdf4>
    916c:	add	r8, sp, #8
    9170:	ldr	r3, [r6]
    9174:	mov	r1, r0
    9178:	mov	r2, r4
    917c:	mov	r0, r8
    9180:	bl	1588 <fread@plt>
    9184:	mov	r3, #0
    9188:	mov	r5, r0
    918c:	cmp	r4, r3
    9190:	ble	8470 <ReadInt32Data.part.7+0x110>
    9194:	ldrb	r2, [r8, r3]
    9198:	str	r2, [fp, r3, lsl #2]
    919c:	add	r3, r3, #1
    91a0:	b	918c <ReadInt32Data.part.7+0xe2c>
    91a4:	ldr	r3, [r6]
    91a8:	mov	r2, #256	; 0x100
    91ac:	mov	r1, r7
    91b0:	mov	r0, r9
    91b4:	bl	1588 <fread@plt>
    91b8:	add	r2, fp, r8, lsl #2
    91bc:	mov	r3, #0
    91c0:	add	r5, r5, r0
    91c4:	ldrb	r1, [r9, r3]
    91c8:	str	r1, [r2, r3, lsl #2]
    91cc:	add	r3, r3, #1
    91d0:	cmp	r3, #256	; 0x100
    91d4:	bne	91c4 <ReadInt32Data.part.7+0xe64>
    91d8:	add	r8, r8, #256	; 0x100
    91dc:	b	9110 <ReadInt32Data.part.7+0xdb0>
    91e0:	cmp	r5, #12
    91e4:	bne	93e0 <ReadInt32Data.part.7+0x1080>
    91e8:	ldr	r8, [r6, #20]
    91ec:	cmp	r8, #0
    91f0:	beq	92f8 <ReadInt32Data.part.7+0xf98>
    91f4:	cmp	r4, #256	; 0x100
    91f8:	ble	926c <ReadInt32Data.part.7+0xf0c>
    91fc:	mov	r8, #0
    9200:	mov	r5, r8
    9204:	sub	sl, r4, #256	; 0x100
    9208:	add	r9, sp, #8
    920c:	cmp	r8, sl
    9210:	blt	92a8 <ReadInt32Data.part.7+0xf48>
    9214:	sub	r8, r4, #1
    9218:	lsr	r8, r8, #8
    921c:	lsl	r3, r8, #8
    9220:	cmp	r4, r3
    9224:	ble	8470 <ReadInt32Data.part.7+0x110>
    9228:	sub	r4, r4, r3
    922c:	add	r9, sp, #8
    9230:	ldr	r3, [r6]
    9234:	mov	r2, r4
    9238:	mov	r1, r7
    923c:	mov	r0, r9
    9240:	bl	1588 <fread@plt>
    9244:	add	r8, fp, r8, lsl #10
    9248:	mov	r6, #0
    924c:	add	r5, r5, r0
    9250:	cmp	r4, r6
    9254:	ble	8470 <ReadInt32Data.part.7+0x110>
    9258:	add	r0, r9, r6, lsl #3
    925c:	bl	18bc <Mat_int64Swap>
    9260:	str	r0, [r8, r6, lsl #2]
    9264:	add	r6, r6, #1
    9268:	b	9250 <ReadInt32Data.part.7+0xef0>
    926c:	add	r8, sp, #8
    9270:	ldr	r3, [r6]
    9274:	mov	r1, r0
    9278:	mov	r2, r4
    927c:	mov	r0, r8
    9280:	bl	1588 <fread@plt>
    9284:	mov	r6, #0
    9288:	mov	r5, r0
    928c:	cmp	r4, r6
    9290:	ble	8470 <ReadInt32Data.part.7+0x110>
    9294:	add	r0, r8, r6, lsl #3
    9298:	bl	18bc <Mat_int64Swap>
    929c:	str	r0, [fp, r6, lsl #2]
    92a0:	add	r6, r6, #1
    92a4:	b	928c <ReadInt32Data.part.7+0xf2c>
    92a8:	ldr	r3, [r6]
    92ac:	mov	r2, #256	; 0x100
    92b0:	mov	r1, r7
    92b4:	mov	r0, r9
    92b8:	bl	1588 <fread@plt>
    92bc:	add	r2, fp, r8, lsl #2
    92c0:	mov	r3, #0
    92c4:	add	r5, r5, r0
    92c8:	add	r0, r9, r3
    92cc:	str	r2, [sp, #4]
    92d0:	str	r3, [sp]
    92d4:	bl	18bc <Mat_int64Swap>
    92d8:	ldr	r3, [sp]
    92dc:	ldr	r2, [sp, #4]
    92e0:	add	r3, r3, #8
    92e4:	cmp	r3, #2048	; 0x800
    92e8:	str	r0, [r2], #4
    92ec:	bne	92c8 <ReadInt32Data.part.7+0xf68>
    92f0:	add	r8, r8, #256	; 0x100
    92f4:	b	920c <ReadInt32Data.part.7+0xeac>
    92f8:	cmp	r4, #256	; 0x100
    92fc:	ble	9370 <ReadInt32Data.part.7+0x1010>
    9300:	mov	r9, r8
    9304:	mov	r5, r8
    9308:	add	sl, sp, #8
    930c:	sub	r3, r4, #256	; 0x100
    9310:	str	r3, [sp]
    9314:	ldr	r3, [sp]
    9318:	cmp	r9, r3
    931c:	blt	93a4 <ReadInt32Data.part.7+0x1044>
    9320:	sub	r9, r4, #1
    9324:	lsr	r9, r9, #8
    9328:	lsl	r3, r9, #8
    932c:	cmp	r4, r3
    9330:	ble	8470 <ReadInt32Data.part.7+0x110>
    9334:	sub	r4, r4, r3
    9338:	add	sl, sp, #8
    933c:	ldr	r3, [r6]
    9340:	mov	r2, r4
    9344:	mov	r1, r7
    9348:	mov	r0, sl
    934c:	bl	1588 <fread@plt>
    9350:	add	r9, fp, r9, lsl #10
    9354:	add	r5, r5, r0
    9358:	cmp	r4, r8
    935c:	ble	8470 <ReadInt32Data.part.7+0x110>
    9360:	ldr	r3, [sl, r8, lsl #3]
    9364:	str	r3, [r9, r8, lsl #2]
    9368:	add	r8, r8, #1
    936c:	b	9358 <ReadInt32Data.part.7+0xff8>
    9370:	add	r9, sp, #8
    9374:	mov	r1, r0
    9378:	ldr	r3, [r6]
    937c:	mov	r2, r4
    9380:	mov	r0, r9
    9384:	bl	1588 <fread@plt>
    9388:	mov	r5, r0
    938c:	cmp	r4, r8
    9390:	ble	8470 <ReadInt32Data.part.7+0x110>
    9394:	ldr	r3, [r9, r8, lsl #3]
    9398:	str	r3, [fp, r8, lsl #2]
    939c:	add	r8, r8, #1
    93a0:	b	938c <ReadInt32Data.part.7+0x102c>
    93a4:	ldr	r3, [r6]
    93a8:	mov	r2, #256	; 0x100
    93ac:	mov	r1, r7
    93b0:	mov	r0, sl
    93b4:	bl	1588 <fread@plt>
    93b8:	add	r2, fp, r9, lsl #2
    93bc:	mov	r3, r8
    93c0:	add	r5, r5, r0
    93c4:	ldr	r1, [sl, r3, lsl #3]
    93c8:	str	r1, [r2, r3, lsl #2]
    93cc:	add	r3, r3, #1
    93d0:	cmp	r3, #256	; 0x100
    93d4:	bne	93c4 <ReadInt32Data.part.7+0x1064>
    93d8:	add	r9, r9, #256	; 0x100
    93dc:	b	9314 <ReadInt32Data.part.7+0xfb4>
    93e0:	cmp	r5, #13
    93e4:	movne	r5, #0
    93e8:	bne	8470 <ReadInt32Data.part.7+0x110>
    93ec:	ldr	r8, [r6, #20]
    93f0:	cmp	r8, #0
    93f4:	beq	94fc <ReadInt32Data.part.7+0x119c>
    93f8:	cmp	r4, #256	; 0x100
    93fc:	ble	9470 <ReadInt32Data.part.7+0x1110>
    9400:	mov	r8, #0
    9404:	mov	r5, r8
    9408:	sub	sl, r4, #256	; 0x100
    940c:	add	r9, sp, #8
    9410:	cmp	r8, sl
    9414:	blt	94ac <ReadInt32Data.part.7+0x114c>
    9418:	sub	r8, r4, #1
    941c:	lsr	r8, r8, #8
    9420:	lsl	r3, r8, #8
    9424:	cmp	r4, r3
    9428:	ble	8470 <ReadInt32Data.part.7+0x110>
    942c:	sub	r4, r4, r3
    9430:	add	r9, sp, #8
    9434:	ldr	r3, [r6]
    9438:	mov	r2, r4
    943c:	mov	r1, r7
    9440:	mov	r0, r9
    9444:	bl	1588 <fread@plt>
    9448:	add	r8, fp, r8, lsl #10
    944c:	mov	r6, #0
    9450:	add	r5, r5, r0
    9454:	cmp	r4, r6
    9458:	ble	8470 <ReadInt32Data.part.7+0x110>
    945c:	add	r0, r9, r6, lsl #3
    9460:	bl	1980 <Mat_uint64Swap>
    9464:	str	r0, [r8, r6, lsl #2]
    9468:	add	r6, r6, #1
    946c:	b	9454 <ReadInt32Data.part.7+0x10f4>
    9470:	add	r8, sp, #8
    9474:	ldr	r3, [r6]
    9478:	mov	r1, r0
    947c:	mov	r2, r4
    9480:	mov	r0, r8
    9484:	bl	1588 <fread@plt>
    9488:	mov	r6, #0
    948c:	mov	r5, r0
    9490:	cmp	r4, r6
    9494:	ble	8470 <ReadInt32Data.part.7+0x110>
    9498:	add	r0, r8, r6, lsl #3
    949c:	bl	1980 <Mat_uint64Swap>
    94a0:	str	r0, [fp, r6, lsl #2]
    94a4:	add	r6, r6, #1
    94a8:	b	9490 <ReadInt32Data.part.7+0x1130>
    94ac:	ldr	r3, [r6]
    94b0:	mov	r2, #256	; 0x100
    94b4:	mov	r1, r7
    94b8:	mov	r0, r9
    94bc:	bl	1588 <fread@plt>
    94c0:	add	r2, fp, r8, lsl #2
    94c4:	mov	r3, #0
    94c8:	add	r5, r5, r0
    94cc:	add	r0, r9, r3
    94d0:	str	r2, [sp, #4]
    94d4:	str	r3, [sp]
    94d8:	bl	1980 <Mat_uint64Swap>
    94dc:	ldr	r3, [sp]
    94e0:	ldr	r2, [sp, #4]
    94e4:	add	r3, r3, #8
    94e8:	cmp	r3, #2048	; 0x800
    94ec:	str	r0, [r2], #4
    94f0:	bne	94cc <ReadInt32Data.part.7+0x116c>
    94f4:	add	r8, r8, #256	; 0x100
    94f8:	b	9410 <ReadInt32Data.part.7+0x10b0>
    94fc:	cmp	r4, #256	; 0x100
    9500:	ble	9574 <ReadInt32Data.part.7+0x1214>
    9504:	mov	r9, r8
    9508:	mov	r5, r8
    950c:	add	sl, sp, #8
    9510:	sub	r3, r4, #256	; 0x100
    9514:	str	r3, [sp]
    9518:	ldr	r3, [sp]
    951c:	cmp	r9, r3
    9520:	blt	95a8 <ReadInt32Data.part.7+0x1248>
    9524:	sub	r9, r4, #1
    9528:	lsr	r9, r9, #8
    952c:	lsl	r3, r9, #8
    9530:	cmp	r4, r3
    9534:	ble	8470 <ReadInt32Data.part.7+0x110>
    9538:	sub	r4, r4, r3
    953c:	add	sl, sp, #8
    9540:	ldr	r3, [r6]
    9544:	mov	r2, r4
    9548:	mov	r1, r7
    954c:	mov	r0, sl
    9550:	bl	1588 <fread@plt>
    9554:	add	r9, fp, r9, lsl #10
    9558:	add	r5, r5, r0
    955c:	cmp	r4, r8
    9560:	ble	8470 <ReadInt32Data.part.7+0x110>
    9564:	ldr	r3, [sl, r8, lsl #3]
    9568:	str	r3, [r9, r8, lsl #2]
    956c:	add	r8, r8, #1
    9570:	b	955c <ReadInt32Data.part.7+0x11fc>
    9574:	add	r9, sp, #8
    9578:	mov	r1, r0
    957c:	ldr	r3, [r6]
    9580:	mov	r2, r4
    9584:	mov	r0, r9
    9588:	bl	1588 <fread@plt>
    958c:	mov	r5, r0
    9590:	cmp	r4, r8
    9594:	ble	8470 <ReadInt32Data.part.7+0x110>
    9598:	ldr	r3, [r9, r8, lsl #3]
    959c:	str	r3, [fp, r8, lsl #2]
    95a0:	add	r8, r8, #1
    95a4:	b	9590 <ReadInt32Data.part.7+0x1230>
    95a8:	ldr	r3, [r6]
    95ac:	mov	r2, #256	; 0x100
    95b0:	mov	r1, r7
    95b4:	mov	r0, sl
    95b8:	bl	1588 <fread@plt>
    95bc:	add	r2, fp, r9, lsl #2
    95c0:	mov	r3, r8
    95c4:	add	r5, r5, r0
    95c8:	ldr	r1, [sl, r3, lsl #3]
    95cc:	str	r1, [r2, r3, lsl #2]
    95d0:	add	r3, r3, #1
    95d4:	cmp	r3, #256	; 0x100
    95d8:	bne	95c8 <ReadInt32Data.part.7+0x1268>
    95dc:	add	r9, r9, #256	; 0x100
    95e0:	b	9518 <ReadInt32Data.part.7+0x11b8>

000095e4 <ReadUInt32Data.part.9>:
    95e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95e8:	sub	sp, sp, #2048	; 0x800
    95ec:	sub	sp, sp, #12
    95f0:	mov	r6, r0
    95f4:	mov	r0, r2
    95f8:	mov	r5, r2
    95fc:	mov	r4, r3
    9600:	mov	fp, r1
    9604:	bl	1600 <Mat_SizeOf@plt>
    9608:	sub	r3, r5, #1
    960c:	mov	r7, r0
    9610:	cmp	r3, #8
    9614:	addls	pc, pc, r3, lsl #2
    9618:	b	a464 <ReadUInt32Data.part.9+0xe80>
    961c:	b	a294 <ReadUInt32Data.part.9+0xcb0>
    9620:	b	a37c <ReadUInt32Data.part.9+0xd98>
    9624:	b	9e94 <ReadUInt32Data.part.9+0x8b0>
    9628:	b	a094 <ReadUInt32Data.part.9+0xab0>
    962c:	b	9aa4 <ReadUInt32Data.part.9+0x4c0>
    9630:	b	9c9c <ReadUInt32Data.part.9+0x6b8>
    9634:	b	9878 <ReadUInt32Data.part.9+0x294>
    9638:	b	a464 <ReadUInt32Data.part.9+0xe80>
    963c:	b	9640 <ReadUInt32Data.part.9+0x5c>
    9640:	ldr	r8, [r6, #20]
    9644:	cmp	r8, #0
    9648:	beq	9774 <ReadUInt32Data.part.9+0x190>
    964c:	cmp	r4, #256	; 0x100
    9650:	ble	96cc <ReadUInt32Data.part.9+0xe8>
    9654:	mov	r8, #0
    9658:	mov	r5, r8
    965c:	sub	sl, r4, #256	; 0x100
    9660:	add	r9, sp, #8
    9664:	cmp	r8, sl
    9668:	blt	9720 <ReadUInt32Data.part.9+0x13c>
    966c:	sub	r8, r4, #1
    9670:	lsr	r8, r8, #8
    9674:	lsl	r3, r8, #8
    9678:	cmp	r4, r3
    967c:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9680:	sub	r4, r4, r3
    9684:	add	r9, sp, #8
    9688:	ldr	r3, [r6]
    968c:	mov	r2, r4
    9690:	mov	r1, r7
    9694:	mov	r0, r9
    9698:	bl	1588 <fread@plt>
    969c:	add	r8, fp, r8, lsl #10
    96a0:	mov	r6, #0
    96a4:	add	r5, r5, r0
    96a8:	cmp	r4, r6
    96ac:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    96b0:	add	r0, r9, r6, lsl #3
    96b4:	bl	1b88 <Mat_doubleSwap>
    96b8:	vcvt.u32.f64	s0, d0
    96bc:	vmov	r3, s0
    96c0:	str	r3, [r8, r6, lsl #2]
    96c4:	add	r6, r6, #1
    96c8:	b	96a8 <ReadUInt32Data.part.9+0xc4>
    96cc:	add	r8, sp, #8
    96d0:	ldr	r3, [r6]
    96d4:	mov	r1, r0
    96d8:	mov	r2, r4
    96dc:	mov	r0, r8
    96e0:	bl	1588 <fread@plt>
    96e4:	mov	r6, #0
    96e8:	mov	r5, r0
    96ec:	cmp	r4, r6
    96f0:	bgt	9704 <ReadUInt32Data.part.9+0x120>
    96f4:	mul	r0, r7, r5
    96f8:	add	sp, sp, #2048	; 0x800
    96fc:	add	sp, sp, #12
    9700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9704:	add	r0, r8, r6, lsl #3
    9708:	bl	1b88 <Mat_doubleSwap>
    970c:	vcvt.u32.f64	s0, d0
    9710:	vmov	r3, s0
    9714:	str	r3, [fp, r6, lsl #2]
    9718:	add	r6, r6, #1
    971c:	b	96ec <ReadUInt32Data.part.9+0x108>
    9720:	ldr	r3, [r6]
    9724:	mov	r2, #256	; 0x100
    9728:	mov	r1, r7
    972c:	mov	r0, r9
    9730:	bl	1588 <fread@plt>
    9734:	add	r2, fp, r8, lsl #2
    9738:	mov	r3, #0
    973c:	add	r5, r5, r0
    9740:	add	r0, r9, r3
    9744:	str	r2, [sp, #4]
    9748:	str	r3, [sp]
    974c:	bl	1b88 <Mat_doubleSwap>
    9750:	ldr	r3, [sp]
    9754:	ldr	r2, [sp, #4]
    9758:	add	r3, r3, #8
    975c:	cmp	r3, #2048	; 0x800
    9760:	vcvt.u32.f64	s0, d0
    9764:	vstmia	r2!, {s0}
    9768:	bne	9740 <ReadUInt32Data.part.9+0x15c>
    976c:	add	r8, r8, #256	; 0x100
    9770:	b	9664 <ReadUInt32Data.part.9+0x80>
    9774:	cmp	r4, #256	; 0x100
    9778:	ble	97f4 <ReadUInt32Data.part.9+0x210>
    977c:	mov	r9, r8
    9780:	mov	r5, r8
    9784:	add	sl, sp, #8
    9788:	sub	r3, r4, #256	; 0x100
    978c:	str	r3, [sp]
    9790:	ldr	r3, [sp]
    9794:	cmp	r9, r3
    9798:	blt	9830 <ReadUInt32Data.part.9+0x24c>
    979c:	sub	r9, r4, #1
    97a0:	lsr	r9, r9, #8
    97a4:	lsl	r3, r9, #8
    97a8:	cmp	r4, r3
    97ac:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    97b0:	sub	r4, r4, r3
    97b4:	ldr	r3, [r6]
    97b8:	add	r6, sp, #8
    97bc:	mov	r2, r4
    97c0:	mov	r1, r7
    97c4:	mov	r0, r6
    97c8:	bl	1588 <fread@plt>
    97cc:	add	r9, fp, r9, lsl #10
    97d0:	add	r5, r5, r0
    97d4:	cmp	r4, r8
    97d8:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    97dc:	vldmia	r6!, {d7}
    97e0:	vcvt.u32.f64	s14, d7
    97e4:	vmov	r3, s14
    97e8:	str	r3, [r9, r8, lsl #2]
    97ec:	add	r8, r8, #1
    97f0:	b	97d4 <ReadUInt32Data.part.9+0x1f0>
    97f4:	ldr	r3, [r6]
    97f8:	add	r6, sp, #8
    97fc:	mov	r1, r0
    9800:	mov	r2, r4
    9804:	mov	r0, r6
    9808:	bl	1588 <fread@plt>
    980c:	mov	r5, r0
    9810:	cmp	r4, r8
    9814:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9818:	vldmia	r6!, {d7}
    981c:	vcvt.u32.f64	s14, d7
    9820:	vmov	r3, s14
    9824:	str	r3, [fp, r8, lsl #2]
    9828:	add	r8, r8, #1
    982c:	b	9810 <ReadUInt32Data.part.9+0x22c>
    9830:	ldr	r3, [r6]
    9834:	mov	r2, #256	; 0x100
    9838:	mov	r1, r7
    983c:	mov	r0, sl
    9840:	bl	1588 <fread@plt>
    9844:	mov	r2, sl
    9848:	add	r1, fp, r9, lsl #2
    984c:	mov	r3, r8
    9850:	add	r5, r5, r0
    9854:	vldmia	r2!, {d7}
    9858:	vcvt.u32.f64	s14, d7
    985c:	vmov	r0, s14
    9860:	str	r0, [r1, r3, lsl #2]
    9864:	add	r3, r3, #1
    9868:	cmp	r3, #256	; 0x100
    986c:	bne	9854 <ReadUInt32Data.part.9+0x270>
    9870:	add	r9, r9, #256	; 0x100
    9874:	b	9790 <ReadUInt32Data.part.9+0x1ac>
    9878:	ldr	r8, [r6, #20]
    987c:	cmp	r8, #0
    9880:	beq	99a0 <ReadUInt32Data.part.9+0x3bc>
    9884:	cmp	r4, #256	; 0x100
    9888:	ble	9904 <ReadUInt32Data.part.9+0x320>
    988c:	mov	r8, #0
    9890:	mov	r5, r8
    9894:	sub	sl, r4, #256	; 0x100
    9898:	add	r9, sp, #8
    989c:	cmp	r8, sl
    98a0:	blt	9948 <ReadUInt32Data.part.9+0x364>
    98a4:	sub	r8, r4, #1
    98a8:	lsr	r8, r8, #8
    98ac:	lsl	r3, r8, #8
    98b0:	cmp	r4, r3
    98b4:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    98b8:	sub	r4, r4, r3
    98bc:	add	r9, sp, #8
    98c0:	ldr	r3, [r6]
    98c4:	mov	r2, r4
    98c8:	mov	r1, r7
    98cc:	mov	r0, r9
    98d0:	bl	1588 <fread@plt>
    98d4:	add	r8, fp, r8, lsl #10
    98d8:	mov	r6, #0
    98dc:	add	r5, r5, r0
    98e0:	cmp	r4, r6
    98e4:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    98e8:	add	r0, r9, r6, lsl #2
    98ec:	bl	1b2c <Mat_floatSwap>
    98f0:	vcvt.u32.f32	s0, s0
    98f4:	vmov	r3, s0
    98f8:	str	r3, [r8, r6, lsl #2]
    98fc:	add	r6, r6, #1
    9900:	b	98e0 <ReadUInt32Data.part.9+0x2fc>
    9904:	add	r8, sp, #8
    9908:	ldr	r3, [r6]
    990c:	mov	r1, r0
    9910:	mov	r2, r4
    9914:	mov	r0, r8
    9918:	bl	1588 <fread@plt>
    991c:	mov	r6, #0
    9920:	mov	r5, r0
    9924:	cmp	r4, r6
    9928:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    992c:	add	r0, r8, r6, lsl #2
    9930:	bl	1b2c <Mat_floatSwap>
    9934:	vcvt.u32.f32	s0, s0
    9938:	vmov	r3, s0
    993c:	str	r3, [fp, r6, lsl #2]
    9940:	add	r6, r6, #1
    9944:	b	9924 <ReadUInt32Data.part.9+0x340>
    9948:	ldr	r3, [r6]
    994c:	mov	r2, #256	; 0x100
    9950:	mov	r1, r7
    9954:	mov	r0, r9
    9958:	bl	1588 <fread@plt>
    995c:	add	r2, fp, r8, lsl #2
    9960:	mov	r3, #0
    9964:	add	r5, r5, r0
    9968:	add	r0, r9, r3
    996c:	str	r2, [sp, #4]
    9970:	str	r3, [sp]
    9974:	bl	1b2c <Mat_floatSwap>
    9978:	ldr	r3, [sp]
    997c:	ldr	r2, [sp, #4]
    9980:	vcvt.u32.f32	s0, s0
    9984:	vmov	r1, s0
    9988:	str	r1, [r2, r3]
    998c:	add	r3, r3, #4
    9990:	cmp	r3, #1024	; 0x400
    9994:	bne	9968 <ReadUInt32Data.part.9+0x384>
    9998:	add	r8, r8, #256	; 0x100
    999c:	b	989c <ReadUInt32Data.part.9+0x2b8>
    99a0:	cmp	r4, #256	; 0x100
    99a4:	ble	9a20 <ReadUInt32Data.part.9+0x43c>
    99a8:	mov	r9, r8
    99ac:	mov	r5, r8
    99b0:	add	sl, sp, #8
    99b4:	sub	r3, r4, #256	; 0x100
    99b8:	str	r3, [sp]
    99bc:	ldr	r3, [sp]
    99c0:	cmp	r9, r3
    99c4:	blt	9a5c <ReadUInt32Data.part.9+0x478>
    99c8:	sub	r9, r4, #1
    99cc:	lsr	r9, r9, #8
    99d0:	lsl	r3, r9, #8
    99d4:	cmp	r4, r3
    99d8:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    99dc:	sub	r4, r4, r3
    99e0:	ldr	r3, [r6]
    99e4:	add	r6, sp, #8
    99e8:	mov	r2, r4
    99ec:	mov	r1, r7
    99f0:	mov	r0, r6
    99f4:	bl	1588 <fread@plt>
    99f8:	add	r9, fp, r9, lsl #10
    99fc:	add	r5, r5, r0
    9a00:	cmp	r4, r8
    9a04:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9a08:	vldmia	r6!, {s15}
    9a0c:	vcvt.u32.f32	s15, s15
    9a10:	vmov	r3, s15
    9a14:	str	r3, [r9, r8, lsl #2]
    9a18:	add	r8, r8, #1
    9a1c:	b	9a00 <ReadUInt32Data.part.9+0x41c>
    9a20:	ldr	r3, [r6]
    9a24:	add	r6, sp, #8
    9a28:	mov	r1, r0
    9a2c:	mov	r2, r4
    9a30:	mov	r0, r6
    9a34:	bl	1588 <fread@plt>
    9a38:	mov	r5, r0
    9a3c:	cmp	r4, r8
    9a40:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9a44:	vldmia	r6!, {s15}
    9a48:	vcvt.u32.f32	s15, s15
    9a4c:	vmov	r3, s15
    9a50:	str	r3, [fp, r8, lsl #2]
    9a54:	add	r8, r8, #1
    9a58:	b	9a3c <ReadUInt32Data.part.9+0x458>
    9a5c:	ldr	r3, [r6]
    9a60:	mov	r2, #256	; 0x100
    9a64:	mov	r1, r7
    9a68:	mov	r0, sl
    9a6c:	bl	1588 <fread@plt>
    9a70:	mov	r2, sl
    9a74:	add	r1, fp, r9, lsl #2
    9a78:	mov	r3, r8
    9a7c:	add	r5, r5, r0
    9a80:	vldmia	r2!, {s15}
    9a84:	vcvt.u32.f32	s15, s15
    9a88:	vmov	r0, s15
    9a8c:	str	r0, [r1, r3, lsl #2]
    9a90:	add	r3, r3, #1
    9a94:	cmp	r3, #256	; 0x100
    9a98:	bne	9a80 <ReadUInt32Data.part.9+0x49c>
    9a9c:	add	r9, r9, #256	; 0x100
    9aa0:	b	99bc <ReadUInt32Data.part.9+0x3d8>
    9aa4:	ldr	r8, [r6, #20]
    9aa8:	cmp	r8, #0
    9aac:	beq	9bb4 <ReadUInt32Data.part.9+0x5d0>
    9ab0:	cmp	r4, #256	; 0x100
    9ab4:	ble	9b28 <ReadUInt32Data.part.9+0x544>
    9ab8:	mov	r8, #0
    9abc:	mov	r5, r8
    9ac0:	sub	sl, r4, #256	; 0x100
    9ac4:	add	r9, sp, #8
    9ac8:	cmp	r8, sl
    9acc:	blt	9b64 <ReadUInt32Data.part.9+0x580>
    9ad0:	sub	r8, r4, #1
    9ad4:	lsr	r8, r8, #8
    9ad8:	lsl	r3, r8, #8
    9adc:	cmp	r4, r3
    9ae0:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9ae4:	sub	r4, r4, r3
    9ae8:	add	r9, sp, #8
    9aec:	ldr	r3, [r6]
    9af0:	mov	r2, r4
    9af4:	mov	r1, r7
    9af8:	mov	r0, r9
    9afc:	bl	1588 <fread@plt>
    9b00:	add	r8, fp, r8, lsl #10
    9b04:	mov	r6, #0
    9b08:	add	r5, r5, r0
    9b0c:	cmp	r4, r6
    9b10:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9b14:	add	r0, r9, r6, lsl #2
    9b18:	bl	1a18 <Mat_int32Swap>
    9b1c:	str	r0, [r8, r6, lsl #2]
    9b20:	add	r6, r6, #1
    9b24:	b	9b0c <ReadUInt32Data.part.9+0x528>
    9b28:	add	r8, sp, #8
    9b2c:	ldr	r3, [r6]
    9b30:	mov	r1, r0
    9b34:	mov	r2, r4
    9b38:	mov	r0, r8
    9b3c:	bl	1588 <fread@plt>
    9b40:	mov	r6, #0
    9b44:	mov	r5, r0
    9b48:	cmp	r4, r6
    9b4c:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9b50:	add	r0, r8, r6, lsl #2
    9b54:	bl	1a18 <Mat_int32Swap>
    9b58:	str	r0, [fp, r6, lsl #2]
    9b5c:	add	r6, r6, #1
    9b60:	b	9b48 <ReadUInt32Data.part.9+0x564>
    9b64:	ldr	r3, [r6]
    9b68:	mov	r2, #256	; 0x100
    9b6c:	mov	r1, r7
    9b70:	mov	r0, r9
    9b74:	bl	1588 <fread@plt>
    9b78:	add	r2, fp, r8, lsl #2
    9b7c:	mov	r3, #0
    9b80:	add	r5, r5, r0
    9b84:	add	r0, r9, r3
    9b88:	str	r2, [sp, #4]
    9b8c:	str	r3, [sp]
    9b90:	bl	1a18 <Mat_int32Swap>
    9b94:	ldr	r3, [sp]
    9b98:	ldr	r2, [sp, #4]
    9b9c:	str	r0, [r2, r3]
    9ba0:	add	r3, r3, #4
    9ba4:	cmp	r3, #1024	; 0x400
    9ba8:	bne	9b84 <ReadUInt32Data.part.9+0x5a0>
    9bac:	add	r8, r8, #256	; 0x100
    9bb0:	b	9ac8 <ReadUInt32Data.part.9+0x4e4>
    9bb4:	cmp	r4, #256	; 0x100
    9bb8:	ble	9c2c <ReadUInt32Data.part.9+0x648>
    9bbc:	mov	r9, r8
    9bc0:	mov	r5, r8
    9bc4:	add	sl, sp, #8
    9bc8:	sub	r3, r4, #256	; 0x100
    9bcc:	str	r3, [sp]
    9bd0:	ldr	r3, [sp]
    9bd4:	cmp	r9, r3
    9bd8:	blt	9c60 <ReadUInt32Data.part.9+0x67c>
    9bdc:	sub	r9, r4, #1
    9be0:	lsr	r9, r9, #8
    9be4:	lsl	r3, r9, #8
    9be8:	cmp	r4, r3
    9bec:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9bf0:	sub	r4, r4, r3
    9bf4:	add	sl, sp, #8
    9bf8:	ldr	r3, [r6]
    9bfc:	mov	r2, r4
    9c00:	mov	r1, r7
    9c04:	mov	r0, sl
    9c08:	bl	1588 <fread@plt>
    9c0c:	add	r9, fp, r9, lsl #10
    9c10:	add	r5, r5, r0
    9c14:	cmp	r4, r8
    9c18:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9c1c:	ldr	r3, [sl, r8, lsl #2]
    9c20:	str	r3, [r9, r8, lsl #2]
    9c24:	add	r8, r8, #1
    9c28:	b	9c14 <ReadUInt32Data.part.9+0x630>
    9c2c:	add	r9, sp, #8
    9c30:	mov	r1, r0
    9c34:	ldr	r3, [r6]
    9c38:	mov	r2, r4
    9c3c:	mov	r0, r9
    9c40:	bl	1588 <fread@plt>
    9c44:	mov	r5, r0
    9c48:	cmp	r4, r8
    9c4c:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9c50:	ldr	r3, [r9, r8, lsl #2]
    9c54:	str	r3, [fp, r8, lsl #2]
    9c58:	add	r8, r8, #1
    9c5c:	b	9c48 <ReadUInt32Data.part.9+0x664>
    9c60:	ldr	r3, [r6]
    9c64:	mov	r2, #256	; 0x100
    9c68:	mov	r1, r7
    9c6c:	mov	r0, sl
    9c70:	bl	1588 <fread@plt>
    9c74:	add	r2, fp, r9, lsl #2
    9c78:	mov	r3, r8
    9c7c:	add	r5, r5, r0
    9c80:	ldr	r1, [sl, r3, lsl #2]
    9c84:	str	r1, [r2, r3, lsl #2]
    9c88:	add	r3, r3, #1
    9c8c:	cmp	r3, #256	; 0x100
    9c90:	bne	9c80 <ReadUInt32Data.part.9+0x69c>
    9c94:	add	r9, r9, #256	; 0x100
    9c98:	b	9bd0 <ReadUInt32Data.part.9+0x5ec>
    9c9c:	ldr	r8, [r6, #20]
    9ca0:	cmp	r8, #0
    9ca4:	beq	9dac <ReadUInt32Data.part.9+0x7c8>
    9ca8:	cmp	r4, #256	; 0x100
    9cac:	ble	9d20 <ReadUInt32Data.part.9+0x73c>
    9cb0:	mov	r8, #0
    9cb4:	mov	r5, r8
    9cb8:	sub	sl, r4, #256	; 0x100
    9cbc:	add	r9, sp, #8
    9cc0:	cmp	r8, sl
    9cc4:	blt	9d5c <ReadUInt32Data.part.9+0x778>
    9cc8:	sub	r8, r4, #1
    9ccc:	lsr	r8, r8, #8
    9cd0:	lsl	r3, r8, #8
    9cd4:	cmp	r4, r3
    9cd8:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9cdc:	sub	r4, r4, r3
    9ce0:	add	r9, sp, #8
    9ce4:	ldr	r3, [r6]
    9ce8:	mov	r2, r4
    9cec:	mov	r1, r7
    9cf0:	mov	r0, r9
    9cf4:	bl	1588 <fread@plt>
    9cf8:	add	r8, fp, r8, lsl #10
    9cfc:	mov	r6, #0
    9d00:	add	r5, r5, r0
    9d04:	cmp	r4, r6
    9d08:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9d0c:	add	r0, r9, r6, lsl #2
    9d10:	bl	1a80 <Mat_uint32Swap>
    9d14:	str	r0, [r8, r6, lsl #2]
    9d18:	add	r6, r6, #1
    9d1c:	b	9d04 <ReadUInt32Data.part.9+0x720>
    9d20:	add	r8, sp, #8
    9d24:	ldr	r3, [r6]
    9d28:	mov	r1, r0
    9d2c:	mov	r2, r4
    9d30:	mov	r0, r8
    9d34:	bl	1588 <fread@plt>
    9d38:	mov	r6, #0
    9d3c:	mov	r5, r0
    9d40:	cmp	r4, r6
    9d44:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9d48:	add	r0, r8, r6, lsl #2
    9d4c:	bl	1a80 <Mat_uint32Swap>
    9d50:	str	r0, [fp, r6, lsl #2]
    9d54:	add	r6, r6, #1
    9d58:	b	9d40 <ReadUInt32Data.part.9+0x75c>
    9d5c:	ldr	r3, [r6]
    9d60:	mov	r2, #256	; 0x100
    9d64:	mov	r1, r7
    9d68:	mov	r0, r9
    9d6c:	bl	1588 <fread@plt>
    9d70:	add	r2, fp, r8, lsl #2
    9d74:	mov	r3, #0
    9d78:	add	r5, r5, r0
    9d7c:	add	r0, r9, r3
    9d80:	str	r2, [sp, #4]
    9d84:	str	r3, [sp]
    9d88:	bl	1a80 <Mat_uint32Swap>
    9d8c:	ldr	r3, [sp]
    9d90:	ldr	r2, [sp, #4]
    9d94:	str	r0, [r2, r3]
    9d98:	add	r3, r3, #4
    9d9c:	cmp	r3, #1024	; 0x400
    9da0:	bne	9d7c <ReadUInt32Data.part.9+0x798>
    9da4:	add	r8, r8, #256	; 0x100
    9da8:	b	9cc0 <ReadUInt32Data.part.9+0x6dc>
    9dac:	cmp	r4, #256	; 0x100
    9db0:	ble	9e24 <ReadUInt32Data.part.9+0x840>
    9db4:	mov	r9, r8
    9db8:	mov	r5, r8
    9dbc:	add	sl, sp, #8
    9dc0:	sub	r3, r4, #256	; 0x100
    9dc4:	str	r3, [sp]
    9dc8:	ldr	r3, [sp]
    9dcc:	cmp	r9, r3
    9dd0:	blt	9e58 <ReadUInt32Data.part.9+0x874>
    9dd4:	sub	r9, r4, #1
    9dd8:	lsr	r9, r9, #8
    9ddc:	lsl	r3, r9, #8
    9de0:	cmp	r4, r3
    9de4:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9de8:	sub	r4, r4, r3
    9dec:	add	sl, sp, #8
    9df0:	ldr	r3, [r6]
    9df4:	mov	r2, r4
    9df8:	mov	r1, r7
    9dfc:	mov	r0, sl
    9e00:	bl	1588 <fread@plt>
    9e04:	add	r9, fp, r9, lsl #10
    9e08:	add	r5, r5, r0
    9e0c:	cmp	r4, r8
    9e10:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9e14:	ldr	r3, [sl, r8, lsl #2]
    9e18:	str	r3, [r9, r8, lsl #2]
    9e1c:	add	r8, r8, #1
    9e20:	b	9e0c <ReadUInt32Data.part.9+0x828>
    9e24:	add	r9, sp, #8
    9e28:	mov	r1, r0
    9e2c:	ldr	r3, [r6]
    9e30:	mov	r2, r4
    9e34:	mov	r0, r9
    9e38:	bl	1588 <fread@plt>
    9e3c:	mov	r5, r0
    9e40:	cmp	r4, r8
    9e44:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9e48:	ldr	r3, [r9, r8, lsl #2]
    9e4c:	str	r3, [fp, r8, lsl #2]
    9e50:	add	r8, r8, #1
    9e54:	b	9e40 <ReadUInt32Data.part.9+0x85c>
    9e58:	ldr	r3, [r6]
    9e5c:	mov	r2, #256	; 0x100
    9e60:	mov	r1, r7
    9e64:	mov	r0, sl
    9e68:	bl	1588 <fread@plt>
    9e6c:	add	r2, fp, r9, lsl #2
    9e70:	mov	r3, r8
    9e74:	add	r5, r5, r0
    9e78:	ldr	r1, [sl, r3, lsl #2]
    9e7c:	str	r1, [r2, r3, lsl #2]
    9e80:	add	r3, r3, #1
    9e84:	cmp	r3, #256	; 0x100
    9e88:	bne	9e78 <ReadUInt32Data.part.9+0x894>
    9e8c:	add	r9, r9, #256	; 0x100
    9e90:	b	9dc8 <ReadUInt32Data.part.9+0x7e4>
    9e94:	ldr	r8, [r6, #20]
    9e98:	cmp	r8, #0
    9e9c:	beq	9fa4 <ReadUInt32Data.part.9+0x9c0>
    9ea0:	cmp	r4, #256	; 0x100
    9ea4:	ble	9f18 <ReadUInt32Data.part.9+0x934>
    9ea8:	mov	r8, #0
    9eac:	mov	r5, r8
    9eb0:	sub	sl, r4, #256	; 0x100
    9eb4:	add	r9, sp, #8
    9eb8:	cmp	r8, sl
    9ebc:	blt	9f54 <ReadUInt32Data.part.9+0x970>
    9ec0:	sub	r8, r4, #1
    9ec4:	lsr	r8, r8, #8
    9ec8:	lsl	r3, r8, #8
    9ecc:	cmp	r4, r3
    9ed0:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9ed4:	sub	r4, r4, r3
    9ed8:	add	r9, sp, #8
    9edc:	ldr	r3, [r6]
    9ee0:	mov	r2, r4
    9ee4:	mov	r1, r7
    9ee8:	mov	r0, r9
    9eec:	bl	1588 <fread@plt>
    9ef0:	add	r8, fp, r8, lsl #10
    9ef4:	mov	r6, #0
    9ef8:	add	r5, r5, r0
    9efc:	cmp	r4, r6
    9f00:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9f04:	add	r0, r9, r6, lsl #1
    9f08:	bl	1adc <Mat_int16Swap>
    9f0c:	str	r0, [r8, r6, lsl #2]
    9f10:	add	r6, r6, #1
    9f14:	b	9efc <ReadUInt32Data.part.9+0x918>
    9f18:	add	r8, sp, #8
    9f1c:	ldr	r3, [r6]
    9f20:	mov	r1, r0
    9f24:	mov	r2, r4
    9f28:	mov	r0, r8
    9f2c:	bl	1588 <fread@plt>
    9f30:	mov	r6, #0
    9f34:	mov	r5, r0
    9f38:	cmp	r4, r6
    9f3c:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9f40:	add	r0, r8, r6, lsl #1
    9f44:	bl	1adc <Mat_int16Swap>
    9f48:	str	r0, [fp, r6, lsl #2]
    9f4c:	add	r6, r6, #1
    9f50:	b	9f38 <ReadUInt32Data.part.9+0x954>
    9f54:	ldr	r3, [r6]
    9f58:	mov	r2, #256	; 0x100
    9f5c:	mov	r1, r7
    9f60:	mov	r0, r9
    9f64:	bl	1588 <fread@plt>
    9f68:	add	r2, fp, r8, lsl #2
    9f6c:	mov	r3, #0
    9f70:	add	r5, r5, r0
    9f74:	add	r0, r9, r3
    9f78:	str	r2, [sp, #4]
    9f7c:	str	r3, [sp]
    9f80:	bl	1adc <Mat_int16Swap>
    9f84:	ldr	r3, [sp]
    9f88:	ldr	r2, [sp, #4]
    9f8c:	str	r0, [r2, r3, lsl #1]
    9f90:	add	r3, r3, #2
    9f94:	cmp	r3, #512	; 0x200
    9f98:	bne	9f74 <ReadUInt32Data.part.9+0x990>
    9f9c:	add	r8, r8, #256	; 0x100
    9fa0:	b	9eb8 <ReadUInt32Data.part.9+0x8d4>
    9fa4:	cmp	r4, #256	; 0x100
    9fa8:	ble	a020 <ReadUInt32Data.part.9+0xa3c>
    9fac:	mov	r9, r8
    9fb0:	mov	r5, r8
    9fb4:	add	sl, sp, #8
    9fb8:	sub	r3, r4, #256	; 0x100
    9fbc:	str	r3, [sp]
    9fc0:	ldr	r3, [sp]
    9fc4:	cmp	r9, r3
    9fc8:	blt	a058 <ReadUInt32Data.part.9+0xa74>
    9fcc:	sub	r9, r4, #1
    9fd0:	lsr	r9, r9, #8
    9fd4:	lsl	r3, r9, #8
    9fd8:	cmp	r4, r3
    9fdc:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    9fe0:	sub	r4, r4, r3
    9fe4:	add	sl, sp, #8
    9fe8:	ldr	r3, [r6]
    9fec:	mov	r2, r4
    9ff0:	mov	r1, r7
    9ff4:	mov	r0, sl
    9ff8:	bl	1588 <fread@plt>
    9ffc:	add	r9, fp, r9, lsl #10
    a000:	add	r5, r5, r0
    a004:	cmp	r4, r8
    a008:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a00c:	lsl	r3, r8, #1
    a010:	ldrsh	r3, [sl, r3]
    a014:	str	r3, [r9, r8, lsl #2]
    a018:	add	r8, r8, #1
    a01c:	b	a004 <ReadUInt32Data.part.9+0xa20>
    a020:	add	r9, sp, #8
    a024:	mov	r1, r0
    a028:	ldr	r3, [r6]
    a02c:	mov	r2, r4
    a030:	mov	r0, r9
    a034:	bl	1588 <fread@plt>
    a038:	mov	r5, r0
    a03c:	cmp	r4, r8
    a040:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a044:	lsl	r3, r8, #1
    a048:	ldrsh	r3, [r9, r3]
    a04c:	str	r3, [fp, r8, lsl #2]
    a050:	add	r8, r8, #1
    a054:	b	a03c <ReadUInt32Data.part.9+0xa58>
    a058:	ldr	r3, [r6]
    a05c:	mov	r2, #256	; 0x100
    a060:	mov	r1, r7
    a064:	mov	r0, sl
    a068:	bl	1588 <fread@plt>
    a06c:	add	r2, fp, r9, lsl #2
    a070:	mov	r3, #0
    a074:	add	r5, r5, r0
    a078:	ldrsh	r1, [sl, r3]
    a07c:	str	r1, [r2, r3, lsl #1]
    a080:	add	r3, r3, #2
    a084:	cmp	r3, #512	; 0x200
    a088:	bne	a078 <ReadUInt32Data.part.9+0xa94>
    a08c:	add	r9, r9, #256	; 0x100
    a090:	b	9fc0 <ReadUInt32Data.part.9+0x9dc>
    a094:	ldr	r8, [r6, #20]
    a098:	cmp	r8, #0
    a09c:	beq	a1a4 <ReadUInt32Data.part.9+0xbc0>
    a0a0:	cmp	r4, #256	; 0x100
    a0a4:	ble	a118 <ReadUInt32Data.part.9+0xb34>
    a0a8:	mov	r8, #0
    a0ac:	mov	r5, r8
    a0b0:	sub	sl, r4, #256	; 0x100
    a0b4:	add	r9, sp, #8
    a0b8:	cmp	r8, sl
    a0bc:	blt	a154 <ReadUInt32Data.part.9+0xb70>
    a0c0:	sub	r8, r4, #1
    a0c4:	lsr	r8, r8, #8
    a0c8:	lsl	r3, r8, #8
    a0cc:	cmp	r4, r3
    a0d0:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a0d4:	sub	r4, r4, r3
    a0d8:	add	r9, sp, #8
    a0dc:	ldr	r3, [r6]
    a0e0:	mov	r2, r4
    a0e4:	mov	r1, r7
    a0e8:	mov	r0, r9
    a0ec:	bl	1588 <fread@plt>
    a0f0:	add	r8, fp, r8, lsl #10
    a0f4:	mov	r6, #0
    a0f8:	add	r5, r5, r0
    a0fc:	cmp	r4, r6
    a100:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a104:	add	r0, r9, r6, lsl #1
    a108:	bl	1b10 <Mat_uint16Swap>
    a10c:	str	r0, [r8, r6, lsl #2]
    a110:	add	r6, r6, #1
    a114:	b	a0fc <ReadUInt32Data.part.9+0xb18>
    a118:	add	r8, sp, #8
    a11c:	ldr	r3, [r6]
    a120:	mov	r1, r0
    a124:	mov	r2, r4
    a128:	mov	r0, r8
    a12c:	bl	1588 <fread@plt>
    a130:	mov	r6, #0
    a134:	mov	r5, r0
    a138:	cmp	r4, r6
    a13c:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a140:	add	r0, r8, r6, lsl #1
    a144:	bl	1b10 <Mat_uint16Swap>
    a148:	str	r0, [fp, r6, lsl #2]
    a14c:	add	r6, r6, #1
    a150:	b	a138 <ReadUInt32Data.part.9+0xb54>
    a154:	ldr	r3, [r6]
    a158:	mov	r2, #256	; 0x100
    a15c:	mov	r1, r7
    a160:	mov	r0, r9
    a164:	bl	1588 <fread@plt>
    a168:	add	r2, fp, r8, lsl #2
    a16c:	mov	r3, #0
    a170:	add	r5, r5, r0
    a174:	add	r0, r9, r3
    a178:	str	r2, [sp, #4]
    a17c:	str	r3, [sp]
    a180:	bl	1b10 <Mat_uint16Swap>
    a184:	ldr	r3, [sp]
    a188:	ldr	r2, [sp, #4]
    a18c:	str	r0, [r2, r3, lsl #1]
    a190:	add	r3, r3, #2
    a194:	cmp	r3, #512	; 0x200
    a198:	bne	a174 <ReadUInt32Data.part.9+0xb90>
    a19c:	add	r8, r8, #256	; 0x100
    a1a0:	b	a0b8 <ReadUInt32Data.part.9+0xad4>
    a1a4:	cmp	r4, #256	; 0x100
    a1a8:	ble	a220 <ReadUInt32Data.part.9+0xc3c>
    a1ac:	mov	r9, r8
    a1b0:	mov	r5, r8
    a1b4:	add	sl, sp, #8
    a1b8:	sub	r3, r4, #256	; 0x100
    a1bc:	str	r3, [sp]
    a1c0:	ldr	r3, [sp]
    a1c4:	cmp	r9, r3
    a1c8:	blt	a258 <ReadUInt32Data.part.9+0xc74>
    a1cc:	sub	r9, r4, #1
    a1d0:	lsr	r9, r9, #8
    a1d4:	lsl	r3, r9, #8
    a1d8:	cmp	r4, r3
    a1dc:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a1e0:	sub	r4, r4, r3
    a1e4:	add	sl, sp, #8
    a1e8:	ldr	r3, [r6]
    a1ec:	mov	r2, r4
    a1f0:	mov	r1, r7
    a1f4:	mov	r0, sl
    a1f8:	bl	1588 <fread@plt>
    a1fc:	add	r9, fp, r9, lsl #10
    a200:	add	r5, r5, r0
    a204:	cmp	r4, r8
    a208:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a20c:	lsl	r3, r8, #1
    a210:	ldrh	r3, [sl, r3]
    a214:	str	r3, [r9, r8, lsl #2]
    a218:	add	r8, r8, #1
    a21c:	b	a204 <ReadUInt32Data.part.9+0xc20>
    a220:	add	r9, sp, #8
    a224:	mov	r1, r0
    a228:	ldr	r3, [r6]
    a22c:	mov	r2, r4
    a230:	mov	r0, r9
    a234:	bl	1588 <fread@plt>
    a238:	mov	r5, r0
    a23c:	cmp	r4, r8
    a240:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a244:	lsl	r3, r8, #1
    a248:	ldrh	r3, [r9, r3]
    a24c:	str	r3, [fp, r8, lsl #2]
    a250:	add	r8, r8, #1
    a254:	b	a23c <ReadUInt32Data.part.9+0xc58>
    a258:	ldr	r3, [r6]
    a25c:	mov	r2, #256	; 0x100
    a260:	mov	r1, r7
    a264:	mov	r0, sl
    a268:	bl	1588 <fread@plt>
    a26c:	add	r2, fp, r9, lsl #2
    a270:	mov	r3, #0
    a274:	add	r5, r5, r0
    a278:	ldrh	r1, [sl, r3]
    a27c:	str	r1, [r2, r3, lsl #1]
    a280:	add	r3, r3, #2
    a284:	cmp	r3, #512	; 0x200
    a288:	bne	a278 <ReadUInt32Data.part.9+0xc94>
    a28c:	add	r9, r9, #256	; 0x100
    a290:	b	a1c0 <ReadUInt32Data.part.9+0xbdc>
    a294:	cmp	r4, #256	; 0x100
    a298:	ble	a308 <ReadUInt32Data.part.9+0xd24>
    a29c:	mov	r8, #0
    a2a0:	mov	r5, r8
    a2a4:	sub	sl, r4, #256	; 0x100
    a2a8:	add	r9, sp, #8
    a2ac:	cmp	r8, sl
    a2b0:	blt	a340 <ReadUInt32Data.part.9+0xd5c>
    a2b4:	sub	r8, r4, #1
    a2b8:	lsr	r8, r8, #8
    a2bc:	lsl	r3, r8, #8
    a2c0:	cmp	r4, r3
    a2c4:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a2c8:	sub	r4, r4, r3
    a2cc:	add	r9, sp, #8
    a2d0:	ldr	r3, [r6]
    a2d4:	mov	r2, r4
    a2d8:	mov	r1, r7
    a2dc:	mov	r0, r9
    a2e0:	bl	1588 <fread@plt>
    a2e4:	add	r8, fp, r8, lsl #10
    a2e8:	mov	r3, #0
    a2ec:	add	r5, r5, r0
    a2f0:	cmp	r4, r3
    a2f4:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a2f8:	ldrsb	r2, [r9, r3]
    a2fc:	str	r2, [r8, r3, lsl #2]
    a300:	add	r3, r3, #1
    a304:	b	a2f0 <ReadUInt32Data.part.9+0xd0c>
    a308:	add	r8, sp, #8
    a30c:	ldr	r3, [r6]
    a310:	mov	r1, r0
    a314:	mov	r2, r4
    a318:	mov	r0, r8
    a31c:	bl	1588 <fread@plt>
    a320:	mov	r3, #0
    a324:	mov	r5, r0
    a328:	cmp	r4, r3
    a32c:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a330:	ldrsb	r2, [r8, r3]
    a334:	str	r2, [fp, r3, lsl #2]
    a338:	add	r3, r3, #1
    a33c:	b	a328 <ReadUInt32Data.part.9+0xd44>
    a340:	ldr	r3, [r6]
    a344:	mov	r2, #256	; 0x100
    a348:	mov	r1, r7
    a34c:	mov	r0, r9
    a350:	bl	1588 <fread@plt>
    a354:	add	r2, fp, r8, lsl #2
    a358:	mov	r3, #0
    a35c:	add	r5, r5, r0
    a360:	ldrsb	r1, [r9, r3]
    a364:	str	r1, [r2, r3, lsl #2]
    a368:	add	r3, r3, #1
    a36c:	cmp	r3, #256	; 0x100
    a370:	bne	a360 <ReadUInt32Data.part.9+0xd7c>
    a374:	add	r8, r8, #256	; 0x100
    a378:	b	a2ac <ReadUInt32Data.part.9+0xcc8>
    a37c:	cmp	r4, #256	; 0x100
    a380:	ble	a3f0 <ReadUInt32Data.part.9+0xe0c>
    a384:	mov	r8, #0
    a388:	mov	r5, r8
    a38c:	sub	sl, r4, #256	; 0x100
    a390:	add	r9, sp, #8
    a394:	cmp	r8, sl
    a398:	blt	a428 <ReadUInt32Data.part.9+0xe44>
    a39c:	sub	r8, r4, #1
    a3a0:	lsr	r8, r8, #8
    a3a4:	lsl	r3, r8, #8
    a3a8:	cmp	r4, r3
    a3ac:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a3b0:	sub	r4, r4, r3
    a3b4:	add	r9, sp, #8
    a3b8:	ldr	r3, [r6]
    a3bc:	mov	r2, r4
    a3c0:	mov	r1, r7
    a3c4:	mov	r0, r9
    a3c8:	bl	1588 <fread@plt>
    a3cc:	add	r8, fp, r8, lsl #10
    a3d0:	mov	r3, #0
    a3d4:	add	r5, r5, r0
    a3d8:	cmp	r4, r3
    a3dc:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a3e0:	ldrb	r2, [r9, r3]
    a3e4:	str	r2, [r8, r3, lsl #2]
    a3e8:	add	r3, r3, #1
    a3ec:	b	a3d8 <ReadUInt32Data.part.9+0xdf4>
    a3f0:	add	r8, sp, #8
    a3f4:	ldr	r3, [r6]
    a3f8:	mov	r1, r0
    a3fc:	mov	r2, r4
    a400:	mov	r0, r8
    a404:	bl	1588 <fread@plt>
    a408:	mov	r3, #0
    a40c:	mov	r5, r0
    a410:	cmp	r4, r3
    a414:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a418:	ldrb	r2, [r8, r3]
    a41c:	str	r2, [fp, r3, lsl #2]
    a420:	add	r3, r3, #1
    a424:	b	a410 <ReadUInt32Data.part.9+0xe2c>
    a428:	ldr	r3, [r6]
    a42c:	mov	r2, #256	; 0x100
    a430:	mov	r1, r7
    a434:	mov	r0, r9
    a438:	bl	1588 <fread@plt>
    a43c:	add	r2, fp, r8, lsl #2
    a440:	mov	r3, #0
    a444:	add	r5, r5, r0
    a448:	ldrb	r1, [r9, r3]
    a44c:	str	r1, [r2, r3, lsl #2]
    a450:	add	r3, r3, #1
    a454:	cmp	r3, #256	; 0x100
    a458:	bne	a448 <ReadUInt32Data.part.9+0xe64>
    a45c:	add	r8, r8, #256	; 0x100
    a460:	b	a394 <ReadUInt32Data.part.9+0xdb0>
    a464:	cmp	r5, #12
    a468:	bne	a664 <ReadUInt32Data.part.9+0x1080>
    a46c:	ldr	r8, [r6, #20]
    a470:	cmp	r8, #0
    a474:	beq	a57c <ReadUInt32Data.part.9+0xf98>
    a478:	cmp	r4, #256	; 0x100
    a47c:	ble	a4f0 <ReadUInt32Data.part.9+0xf0c>
    a480:	mov	r8, #0
    a484:	mov	r5, r8
    a488:	sub	sl, r4, #256	; 0x100
    a48c:	add	r9, sp, #8
    a490:	cmp	r8, sl
    a494:	blt	a52c <ReadUInt32Data.part.9+0xf48>
    a498:	sub	r8, r4, #1
    a49c:	lsr	r8, r8, #8
    a4a0:	lsl	r3, r8, #8
    a4a4:	cmp	r4, r3
    a4a8:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a4ac:	sub	r4, r4, r3
    a4b0:	add	r9, sp, #8
    a4b4:	ldr	r3, [r6]
    a4b8:	mov	r2, r4
    a4bc:	mov	r1, r7
    a4c0:	mov	r0, r9
    a4c4:	bl	1588 <fread@plt>
    a4c8:	add	r8, fp, r8, lsl #10
    a4cc:	mov	r6, #0
    a4d0:	add	r5, r5, r0
    a4d4:	cmp	r4, r6
    a4d8:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a4dc:	add	r0, r9, r6, lsl #3
    a4e0:	bl	18bc <Mat_int64Swap>
    a4e4:	str	r0, [r8, r6, lsl #2]
    a4e8:	add	r6, r6, #1
    a4ec:	b	a4d4 <ReadUInt32Data.part.9+0xef0>
    a4f0:	add	r8, sp, #8
    a4f4:	ldr	r3, [r6]
    a4f8:	mov	r1, r0
    a4fc:	mov	r2, r4
    a500:	mov	r0, r8
    a504:	bl	1588 <fread@plt>
    a508:	mov	r6, #0
    a50c:	mov	r5, r0
    a510:	cmp	r4, r6
    a514:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a518:	add	r0, r8, r6, lsl #3
    a51c:	bl	18bc <Mat_int64Swap>
    a520:	str	r0, [fp, r6, lsl #2]
    a524:	add	r6, r6, #1
    a528:	b	a510 <ReadUInt32Data.part.9+0xf2c>
    a52c:	ldr	r3, [r6]
    a530:	mov	r2, #256	; 0x100
    a534:	mov	r1, r7
    a538:	mov	r0, r9
    a53c:	bl	1588 <fread@plt>
    a540:	add	r2, fp, r8, lsl #2
    a544:	mov	r3, #0
    a548:	add	r5, r5, r0
    a54c:	add	r0, r9, r3
    a550:	str	r2, [sp, #4]
    a554:	str	r3, [sp]
    a558:	bl	18bc <Mat_int64Swap>
    a55c:	ldr	r3, [sp]
    a560:	ldr	r2, [sp, #4]
    a564:	add	r3, r3, #8
    a568:	cmp	r3, #2048	; 0x800
    a56c:	str	r0, [r2], #4
    a570:	bne	a54c <ReadUInt32Data.part.9+0xf68>
    a574:	add	r8, r8, #256	; 0x100
    a578:	b	a490 <ReadUInt32Data.part.9+0xeac>
    a57c:	cmp	r4, #256	; 0x100
    a580:	ble	a5f4 <ReadUInt32Data.part.9+0x1010>
    a584:	mov	r9, r8
    a588:	mov	r5, r8
    a58c:	add	sl, sp, #8
    a590:	sub	r3, r4, #256	; 0x100
    a594:	str	r3, [sp]
    a598:	ldr	r3, [sp]
    a59c:	cmp	r9, r3
    a5a0:	blt	a628 <ReadUInt32Data.part.9+0x1044>
    a5a4:	sub	r9, r4, #1
    a5a8:	lsr	r9, r9, #8
    a5ac:	lsl	r3, r9, #8
    a5b0:	cmp	r4, r3
    a5b4:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a5b8:	sub	r4, r4, r3
    a5bc:	add	sl, sp, #8
    a5c0:	ldr	r3, [r6]
    a5c4:	mov	r2, r4
    a5c8:	mov	r1, r7
    a5cc:	mov	r0, sl
    a5d0:	bl	1588 <fread@plt>
    a5d4:	add	r9, fp, r9, lsl #10
    a5d8:	add	r5, r5, r0
    a5dc:	cmp	r4, r8
    a5e0:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a5e4:	ldr	r3, [sl, r8, lsl #3]
    a5e8:	str	r3, [r9, r8, lsl #2]
    a5ec:	add	r8, r8, #1
    a5f0:	b	a5dc <ReadUInt32Data.part.9+0xff8>
    a5f4:	add	r9, sp, #8
    a5f8:	mov	r1, r0
    a5fc:	ldr	r3, [r6]
    a600:	mov	r2, r4
    a604:	mov	r0, r9
    a608:	bl	1588 <fread@plt>
    a60c:	mov	r5, r0
    a610:	cmp	r4, r8
    a614:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a618:	ldr	r3, [r9, r8, lsl #3]
    a61c:	str	r3, [fp, r8, lsl #2]
    a620:	add	r8, r8, #1
    a624:	b	a610 <ReadUInt32Data.part.9+0x102c>
    a628:	ldr	r3, [r6]
    a62c:	mov	r2, #256	; 0x100
    a630:	mov	r1, r7
    a634:	mov	r0, sl
    a638:	bl	1588 <fread@plt>
    a63c:	add	r2, fp, r9, lsl #2
    a640:	mov	r3, r8
    a644:	add	r5, r5, r0
    a648:	ldr	r1, [sl, r3, lsl #3]
    a64c:	str	r1, [r2, r3, lsl #2]
    a650:	add	r3, r3, #1
    a654:	cmp	r3, #256	; 0x100
    a658:	bne	a648 <ReadUInt32Data.part.9+0x1064>
    a65c:	add	r9, r9, #256	; 0x100
    a660:	b	a598 <ReadUInt32Data.part.9+0xfb4>
    a664:	cmp	r5, #13
    a668:	movne	r5, #0
    a66c:	bne	96f4 <ReadUInt32Data.part.9+0x110>
    a670:	ldr	r8, [r6, #20]
    a674:	cmp	r8, #0
    a678:	beq	a780 <ReadUInt32Data.part.9+0x119c>
    a67c:	cmp	r4, #256	; 0x100
    a680:	ble	a6f4 <ReadUInt32Data.part.9+0x1110>
    a684:	mov	r8, #0
    a688:	mov	r5, r8
    a68c:	sub	sl, r4, #256	; 0x100
    a690:	add	r9, sp, #8
    a694:	cmp	r8, sl
    a698:	blt	a730 <ReadUInt32Data.part.9+0x114c>
    a69c:	sub	r8, r4, #1
    a6a0:	lsr	r8, r8, #8
    a6a4:	lsl	r3, r8, #8
    a6a8:	cmp	r4, r3
    a6ac:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a6b0:	sub	r4, r4, r3
    a6b4:	add	r9, sp, #8
    a6b8:	ldr	r3, [r6]
    a6bc:	mov	r2, r4
    a6c0:	mov	r1, r7
    a6c4:	mov	r0, r9
    a6c8:	bl	1588 <fread@plt>
    a6cc:	add	r8, fp, r8, lsl #10
    a6d0:	mov	r6, #0
    a6d4:	add	r5, r5, r0
    a6d8:	cmp	r4, r6
    a6dc:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a6e0:	add	r0, r9, r6, lsl #3
    a6e4:	bl	1980 <Mat_uint64Swap>
    a6e8:	str	r0, [r8, r6, lsl #2]
    a6ec:	add	r6, r6, #1
    a6f0:	b	a6d8 <ReadUInt32Data.part.9+0x10f4>
    a6f4:	add	r8, sp, #8
    a6f8:	ldr	r3, [r6]
    a6fc:	mov	r1, r0
    a700:	mov	r2, r4
    a704:	mov	r0, r8
    a708:	bl	1588 <fread@plt>
    a70c:	mov	r6, #0
    a710:	mov	r5, r0
    a714:	cmp	r4, r6
    a718:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a71c:	add	r0, r8, r6, lsl #3
    a720:	bl	1980 <Mat_uint64Swap>
    a724:	str	r0, [fp, r6, lsl #2]
    a728:	add	r6, r6, #1
    a72c:	b	a714 <ReadUInt32Data.part.9+0x1130>
    a730:	ldr	r3, [r6]
    a734:	mov	r2, #256	; 0x100
    a738:	mov	r1, r7
    a73c:	mov	r0, r9
    a740:	bl	1588 <fread@plt>
    a744:	add	r2, fp, r8, lsl #2
    a748:	mov	r3, #0
    a74c:	add	r5, r5, r0
    a750:	add	r0, r9, r3
    a754:	str	r2, [sp, #4]
    a758:	str	r3, [sp]
    a75c:	bl	1980 <Mat_uint64Swap>
    a760:	ldr	r3, [sp]
    a764:	ldr	r2, [sp, #4]
    a768:	add	r3, r3, #8
    a76c:	cmp	r3, #2048	; 0x800
    a770:	str	r0, [r2], #4
    a774:	bne	a750 <ReadUInt32Data.part.9+0x116c>
    a778:	add	r8, r8, #256	; 0x100
    a77c:	b	a694 <ReadUInt32Data.part.9+0x10b0>
    a780:	cmp	r4, #256	; 0x100
    a784:	ble	a7f8 <ReadUInt32Data.part.9+0x1214>
    a788:	mov	r9, r8
    a78c:	mov	r5, r8
    a790:	add	sl, sp, #8
    a794:	sub	r3, r4, #256	; 0x100
    a798:	str	r3, [sp]
    a79c:	ldr	r3, [sp]
    a7a0:	cmp	r9, r3
    a7a4:	blt	a82c <ReadUInt32Data.part.9+0x1248>
    a7a8:	sub	r9, r4, #1
    a7ac:	lsr	r9, r9, #8
    a7b0:	lsl	r3, r9, #8
    a7b4:	cmp	r4, r3
    a7b8:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a7bc:	sub	r4, r4, r3
    a7c0:	add	sl, sp, #8
    a7c4:	ldr	r3, [r6]
    a7c8:	mov	r2, r4
    a7cc:	mov	r1, r7
    a7d0:	mov	r0, sl
    a7d4:	bl	1588 <fread@plt>
    a7d8:	add	r9, fp, r9, lsl #10
    a7dc:	add	r5, r5, r0
    a7e0:	cmp	r4, r8
    a7e4:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a7e8:	ldr	r3, [sl, r8, lsl #3]
    a7ec:	str	r3, [r9, r8, lsl #2]
    a7f0:	add	r8, r8, #1
    a7f4:	b	a7e0 <ReadUInt32Data.part.9+0x11fc>
    a7f8:	add	r9, sp, #8
    a7fc:	mov	r1, r0
    a800:	ldr	r3, [r6]
    a804:	mov	r2, r4
    a808:	mov	r0, r9
    a80c:	bl	1588 <fread@plt>
    a810:	mov	r5, r0
    a814:	cmp	r4, r8
    a818:	ble	96f4 <ReadUInt32Data.part.9+0x110>
    a81c:	ldr	r3, [r9, r8, lsl #3]
    a820:	str	r3, [fp, r8, lsl #2]
    a824:	add	r8, r8, #1
    a828:	b	a814 <ReadUInt32Data.part.9+0x1230>
    a82c:	ldr	r3, [r6]
    a830:	mov	r2, #256	; 0x100
    a834:	mov	r1, r7
    a838:	mov	r0, sl
    a83c:	bl	1588 <fread@plt>
    a840:	add	r2, fp, r9, lsl #2
    a844:	mov	r3, r8
    a848:	add	r5, r5, r0
    a84c:	ldr	r1, [sl, r3, lsl #3]
    a850:	str	r1, [r2, r3, lsl #2]
    a854:	add	r3, r3, #1
    a858:	cmp	r3, #256	; 0x100
    a85c:	bne	a84c <ReadUInt32Data.part.9+0x1268>
    a860:	add	r9, r9, #256	; 0x100
    a864:	b	a79c <ReadUInt32Data.part.9+0x11b8>

0000a868 <ReadInt16Data.part.11>:
    a868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a86c:	sub	sp, sp, #2048	; 0x800
    a870:	sub	sp, sp, #12
    a874:	mov	r6, r0
    a878:	mov	r0, r2
    a87c:	mov	r5, r2
    a880:	mov	r4, r3
    a884:	mov	fp, r1
    a888:	bl	1600 <Mat_SizeOf@plt>
    a88c:	sub	r3, r5, #1
    a890:	mov	r7, r0
    a894:	cmp	r3, #8
    a898:	addls	pc, pc, r3, lsl #2
    a89c:	b	b724 <ReadInt16Data.part.11+0xebc>
    a8a0:	b	b54c <ReadInt16Data.part.11+0xce4>
    a8a4:	b	b638 <ReadInt16Data.part.11+0xdd0>
    a8a8:	b	b13c <ReadInt16Data.part.11+0x8d4>
    a8ac:	b	b344 <ReadInt16Data.part.11+0xadc>
    a8b0:	b	ad3c <ReadInt16Data.part.11+0x4d4>
    a8b4:	b	af3c <ReadInt16Data.part.11+0x6d4>
    a8b8:	b	ab08 <ReadInt16Data.part.11+0x2a0>
    a8bc:	b	b724 <ReadInt16Data.part.11+0xebc>
    a8c0:	b	a8c4 <ReadInt16Data.part.11+0x5c>
    a8c4:	ldr	r8, [r6, #20]
    a8c8:	cmp	r8, #0
    a8cc:	beq	aa00 <ReadInt16Data.part.11+0x198>
    a8d0:	cmp	r4, #256	; 0x100
    a8d4:	ble	a950 <ReadInt16Data.part.11+0xe8>
    a8d8:	mov	r8, #0
    a8dc:	mov	r5, r8
    a8e0:	sub	sl, r4, #256	; 0x100
    a8e4:	add	r9, sp, #8
    a8e8:	cmp	r8, sl
    a8ec:	blt	a9a8 <ReadInt16Data.part.11+0x140>
    a8f0:	sub	r8, r4, #1
    a8f4:	lsr	r8, r8, #8
    a8f8:	lsl	r3, r8, #8
    a8fc:	cmp	r4, r3
    a900:	ble	a97c <ReadInt16Data.part.11+0x114>
    a904:	sub	r4, r4, r3
    a908:	add	r9, sp, #8
    a90c:	ldr	r3, [r6]
    a910:	mov	r2, r4
    a914:	mov	r1, r7
    a918:	mov	r0, r9
    a91c:	bl	1588 <fread@plt>
    a920:	add	r8, fp, r8, lsl #9
    a924:	mov	r6, #0
    a928:	add	r5, r5, r0
    a92c:	cmp	r4, r6
    a930:	ble	a97c <ReadInt16Data.part.11+0x114>
    a934:	add	r0, r9, r6, lsl #3
    a938:	bl	1b88 <Mat_doubleSwap>
    a93c:	add	r6, r6, #1
    a940:	vcvt.s32.f64	s15, d0
    a944:	vmov	r3, s15
    a948:	strh	r3, [r8], #2
    a94c:	b	a92c <ReadInt16Data.part.11+0xc4>
    a950:	add	r9, sp, #8
    a954:	ldr	r3, [r6]
    a958:	mov	r1, r0
    a95c:	mov	r2, r4
    a960:	mov	r0, r9
    a964:	bl	1588 <fread@plt>
    a968:	sub	fp, fp, #2
    a96c:	mov	r6, #0
    a970:	mov	r5, r0
    a974:	cmp	r4, r6
    a978:	bgt	a98c <ReadInt16Data.part.11+0x124>
    a97c:	mul	r0, r7, r5
    a980:	add	sp, sp, #2048	; 0x800
    a984:	add	sp, sp, #12
    a988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a98c:	add	r0, r9, r6, lsl #3
    a990:	bl	1b88 <Mat_doubleSwap>
    a994:	add	r6, r6, #1
    a998:	vcvt.s32.f64	s15, d0
    a99c:	vmov	r3, s15
    a9a0:	strh	r3, [fp, #2]!
    a9a4:	b	a974 <ReadInt16Data.part.11+0x10c>
    a9a8:	ldr	r3, [r6]
    a9ac:	mov	r2, #256	; 0x100
    a9b0:	mov	r1, r7
    a9b4:	mov	r0, r9
    a9b8:	bl	1588 <fread@plt>
    a9bc:	add	r2, fp, r8, lsl #1
    a9c0:	mov	r3, #0
    a9c4:	add	r5, r5, r0
    a9c8:	add	r0, r9, r3
    a9cc:	str	r2, [sp, #4]
    a9d0:	str	r3, [sp]
    a9d4:	bl	1b88 <Mat_doubleSwap>
    a9d8:	ldr	r3, [sp]
    a9dc:	ldr	r2, [sp, #4]
    a9e0:	add	r3, r3, #8
    a9e4:	cmp	r3, #2048	; 0x800
    a9e8:	vcvt.s32.f64	s15, d0
    a9ec:	vmov	r1, s15
    a9f0:	strh	r1, [r2], #2
    a9f4:	bne	a9c8 <ReadInt16Data.part.11+0x160>
    a9f8:	add	r8, r8, #256	; 0x100
    a9fc:	b	a8e8 <ReadInt16Data.part.11+0x80>
    aa00:	cmp	r4, #256	; 0x100
    aa04:	ble	aa88 <ReadInt16Data.part.11+0x220>
    aa08:	sub	r3, r4, #256	; 0x100
    aa0c:	mov	r9, fp
    aa10:	mov	sl, r8
    aa14:	mov	r5, r8
    aa18:	str	r3, [sp, #4]
    aa1c:	add	r3, sp, #8
    aa20:	str	r3, [sp]
    aa24:	ldr	r3, [sp, #4]
    aa28:	cmp	sl, r3
    aa2c:	blt	aac8 <ReadInt16Data.part.11+0x260>
    aa30:	sub	r9, r4, #1
    aa34:	lsr	r9, r9, #8
    aa38:	lsl	r3, r9, #8
    aa3c:	cmp	r4, r3
    aa40:	ble	a97c <ReadInt16Data.part.11+0x114>
    aa44:	sub	r4, r4, r3
    aa48:	ldr	r3, [r6]
    aa4c:	add	r6, sp, #8
    aa50:	mov	r2, r4
    aa54:	mov	r1, r7
    aa58:	mov	r0, r6
    aa5c:	bl	1588 <fread@plt>
    aa60:	add	r9, fp, r9, lsl #9
    aa64:	add	r5, r5, r0
    aa68:	cmp	r4, r8
    aa6c:	ble	a97c <ReadInt16Data.part.11+0x114>
    aa70:	vldmia	r6!, {d7}
    aa74:	add	r8, r8, #1
    aa78:	vcvt.s32.f64	s15, d7
    aa7c:	vmov	r3, s15
    aa80:	strh	r3, [r9], #2
    aa84:	b	aa68 <ReadInt16Data.part.11+0x200>
    aa88:	ldr	r3, [r6]
    aa8c:	add	r6, sp, #8
    aa90:	mov	r2, r4
    aa94:	mov	r1, r0
    aa98:	mov	r0, r6
    aa9c:	bl	1588 <fread@plt>
    aaa0:	sub	r2, fp, #2
    aaa4:	mov	r5, r0
    aaa8:	cmp	r4, r8
    aaac:	ble	a97c <ReadInt16Data.part.11+0x114>
    aab0:	vldmia	r6!, {d7}
    aab4:	add	r8, r8, #1
    aab8:	vcvt.s32.f64	s15, d7
    aabc:	vmov	r3, s15
    aac0:	strh	r3, [r2, #2]!
    aac4:	b	aaa8 <ReadInt16Data.part.11+0x240>
    aac8:	mov	r2, #256	; 0x100
    aacc:	mov	r1, r7
    aad0:	ldr	r3, [r6]
    aad4:	ldr	r0, [sp]
    aad8:	bl	1588 <fread@plt>
    aadc:	ldr	r2, [sp]
    aae0:	add	r1, r9, #512	; 0x200
    aae4:	add	r5, r5, r0
    aae8:	vldmia	r2!, {d7}
    aaec:	vcvt.s32.f64	s15, d7
    aaf0:	vmov	r3, s15
    aaf4:	strh	r3, [r9], #2
    aaf8:	cmp	r9, r1
    aafc:	bne	aae8 <ReadInt16Data.part.11+0x280>
    ab00:	add	sl, sl, #256	; 0x100
    ab04:	b	aa24 <ReadInt16Data.part.11+0x1bc>
    ab08:	ldr	r8, [r6, #20]
    ab0c:	cmp	r8, #0
    ab10:	beq	ac34 <ReadInt16Data.part.11+0x3cc>
    ab14:	cmp	r4, #256	; 0x100
    ab18:	ble	ab94 <ReadInt16Data.part.11+0x32c>
    ab1c:	mov	r8, #0
    ab20:	mov	r5, r8
    ab24:	sub	sl, r4, #256	; 0x100
    ab28:	add	r9, sp, #8
    ab2c:	cmp	r8, sl
    ab30:	blt	abdc <ReadInt16Data.part.11+0x374>
    ab34:	sub	r8, r4, #1
    ab38:	lsr	r8, r8, #8
    ab3c:	lsl	r3, r8, #8
    ab40:	cmp	r4, r3
    ab44:	ble	a97c <ReadInt16Data.part.11+0x114>
    ab48:	sub	r4, r4, r3
    ab4c:	add	r9, sp, #8
    ab50:	ldr	r3, [r6]
    ab54:	mov	r2, r4
    ab58:	mov	r1, r7
    ab5c:	mov	r0, r9
    ab60:	bl	1588 <fread@plt>
    ab64:	add	r8, fp, r8, lsl #9
    ab68:	mov	r6, #0
    ab6c:	add	r5, r5, r0
    ab70:	cmp	r4, r6
    ab74:	ble	a97c <ReadInt16Data.part.11+0x114>
    ab78:	add	r0, r9, r6, lsl #2
    ab7c:	bl	1b2c <Mat_floatSwap>
    ab80:	add	r6, r6, #1
    ab84:	vcvt.s32.f32	s15, s0
    ab88:	vmov	r3, s15
    ab8c:	strh	r3, [r8], #2
    ab90:	b	ab70 <ReadInt16Data.part.11+0x308>
    ab94:	add	r9, sp, #8
    ab98:	ldr	r3, [r6]
    ab9c:	mov	r1, r0
    aba0:	mov	r2, r4
    aba4:	mov	r0, r9
    aba8:	bl	1588 <fread@plt>
    abac:	sub	fp, fp, #2
    abb0:	mov	r6, #0
    abb4:	mov	r5, r0
    abb8:	cmp	r4, r6
    abbc:	ble	a97c <ReadInt16Data.part.11+0x114>
    abc0:	add	r0, r9, r6, lsl #2
    abc4:	bl	1b2c <Mat_floatSwap>
    abc8:	add	r6, r6, #1
    abcc:	vcvt.s32.f32	s15, s0
    abd0:	vmov	r3, s15
    abd4:	strh	r3, [fp, #2]!
    abd8:	b	abb8 <ReadInt16Data.part.11+0x350>
    abdc:	ldr	r3, [r6]
    abe0:	mov	r2, #256	; 0x100
    abe4:	mov	r1, r7
    abe8:	mov	r0, r9
    abec:	bl	1588 <fread@plt>
    abf0:	add	r2, fp, r8, lsl #1
    abf4:	mov	r3, #0
    abf8:	add	r5, r5, r0
    abfc:	add	r0, r9, r3
    ac00:	str	r2, [sp, #4]
    ac04:	str	r3, [sp]
    ac08:	bl	1b2c <Mat_floatSwap>
    ac0c:	ldr	r3, [sp]
    ac10:	ldr	r2, [sp, #4]
    ac14:	add	r3, r3, #4
    ac18:	cmp	r3, #1024	; 0x400
    ac1c:	vcvt.s32.f32	s15, s0
    ac20:	vmov	r1, s15
    ac24:	strh	r1, [r2], #2
    ac28:	bne	abfc <ReadInt16Data.part.11+0x394>
    ac2c:	add	r8, r8, #256	; 0x100
    ac30:	b	ab2c <ReadInt16Data.part.11+0x2c4>
    ac34:	cmp	r4, #256	; 0x100
    ac38:	ble	acbc <ReadInt16Data.part.11+0x454>
    ac3c:	sub	r3, r4, #256	; 0x100
    ac40:	mov	r9, fp
    ac44:	mov	sl, r8
    ac48:	mov	r5, r8
    ac4c:	str	r3, [sp, #4]
    ac50:	add	r3, sp, #8
    ac54:	str	r3, [sp]
    ac58:	ldr	r3, [sp, #4]
    ac5c:	cmp	sl, r3
    ac60:	blt	acfc <ReadInt16Data.part.11+0x494>
    ac64:	sub	r9, r4, #1
    ac68:	lsr	r9, r9, #8
    ac6c:	lsl	r3, r9, #8
    ac70:	cmp	r4, r3
    ac74:	ble	a97c <ReadInt16Data.part.11+0x114>
    ac78:	sub	r4, r4, r3
    ac7c:	ldr	r3, [r6]
    ac80:	add	r6, sp, #8
    ac84:	mov	r2, r4
    ac88:	mov	r1, r7
    ac8c:	mov	r0, r6
    ac90:	bl	1588 <fread@plt>
    ac94:	add	r9, fp, r9, lsl #9
    ac98:	add	r5, r5, r0
    ac9c:	cmp	r4, r8
    aca0:	ble	a97c <ReadInt16Data.part.11+0x114>
    aca4:	vldmia	r6!, {s15}
    aca8:	add	r8, r8, #1
    acac:	vcvt.s32.f32	s15, s15
    acb0:	vmov	r3, s15
    acb4:	strh	r3, [r9], #2
    acb8:	b	ac9c <ReadInt16Data.part.11+0x434>
    acbc:	ldr	r3, [r6]
    acc0:	add	r6, sp, #8
    acc4:	mov	r2, r4
    acc8:	mov	r1, r0
    accc:	mov	r0, r6
    acd0:	bl	1588 <fread@plt>
    acd4:	sub	r2, fp, #2
    acd8:	mov	r5, r0
    acdc:	cmp	r4, r8
    ace0:	ble	a97c <ReadInt16Data.part.11+0x114>
    ace4:	vldmia	r6!, {s15}
    ace8:	add	r8, r8, #1
    acec:	vcvt.s32.f32	s15, s15
    acf0:	vmov	r3, s15
    acf4:	strh	r3, [r2, #2]!
    acf8:	b	acdc <ReadInt16Data.part.11+0x474>
    acfc:	mov	r2, #256	; 0x100
    ad00:	mov	r1, r7
    ad04:	ldr	r3, [r6]
    ad08:	ldr	r0, [sp]
    ad0c:	bl	1588 <fread@plt>
    ad10:	ldr	r2, [sp]
    ad14:	add	r1, r9, #512	; 0x200
    ad18:	add	r5, r5, r0
    ad1c:	vldmia	r2!, {s15}
    ad20:	vcvt.s32.f32	s15, s15
    ad24:	vmov	r3, s15
    ad28:	strh	r3, [r9], #2
    ad2c:	cmp	r9, r1
    ad30:	bne	ad1c <ReadInt16Data.part.11+0x4b4>
    ad34:	add	sl, sl, #256	; 0x100
    ad38:	b	ac58 <ReadInt16Data.part.11+0x3f0>
    ad3c:	ldr	r8, [r6, #20]
    ad40:	cmp	r8, #0
    ad44:	beq	ae50 <ReadInt16Data.part.11+0x5e8>
    ad48:	cmp	r4, #256	; 0x100
    ad4c:	ble	adc0 <ReadInt16Data.part.11+0x558>
    ad50:	mov	r8, #0
    ad54:	mov	r5, r8
    ad58:	sub	sl, r4, #256	; 0x100
    ad5c:	add	r9, sp, #8
    ad60:	cmp	r8, sl
    ad64:	blt	ae00 <ReadInt16Data.part.11+0x598>
    ad68:	sub	r8, r4, #1
    ad6c:	lsr	r8, r8, #8
    ad70:	lsl	r3, r8, #8
    ad74:	cmp	r4, r3
    ad78:	ble	a97c <ReadInt16Data.part.11+0x114>
    ad7c:	sub	r4, r4, r3
    ad80:	add	r9, sp, #8
    ad84:	ldr	r3, [r6]
    ad88:	mov	r2, r4
    ad8c:	mov	r1, r7
    ad90:	mov	r0, r9
    ad94:	bl	1588 <fread@plt>
    ad98:	add	r8, fp, r8, lsl #9
    ad9c:	mov	r6, #0
    ada0:	add	r5, r5, r0
    ada4:	cmp	r4, r6
    ada8:	ble	a97c <ReadInt16Data.part.11+0x114>
    adac:	add	r0, r9, r6, lsl #2
    adb0:	bl	1a18 <Mat_int32Swap>
    adb4:	add	r6, r6, #1
    adb8:	strh	r0, [r8], #2
    adbc:	b	ada4 <ReadInt16Data.part.11+0x53c>
    adc0:	add	r9, sp, #8
    adc4:	ldr	r3, [r6]
    adc8:	mov	r1, r0
    adcc:	mov	r2, r4
    add0:	mov	r0, r9
    add4:	bl	1588 <fread@plt>
    add8:	sub	fp, fp, #2
    addc:	mov	r6, #0
    ade0:	mov	r5, r0
    ade4:	cmp	r4, r6
    ade8:	ble	a97c <ReadInt16Data.part.11+0x114>
    adec:	add	r0, r9, r6, lsl #2
    adf0:	bl	1a18 <Mat_int32Swap>
    adf4:	add	r6, r6, #1
    adf8:	strh	r0, [fp, #2]!
    adfc:	b	ade4 <ReadInt16Data.part.11+0x57c>
    ae00:	ldr	r3, [r6]
    ae04:	mov	r2, #256	; 0x100
    ae08:	mov	r1, r7
    ae0c:	mov	r0, r9
    ae10:	bl	1588 <fread@plt>
    ae14:	add	r2, fp, r8, lsl #1
    ae18:	mov	r3, #0
    ae1c:	add	r5, r5, r0
    ae20:	add	r0, r9, r3
    ae24:	str	r2, [sp, #4]
    ae28:	str	r3, [sp]
    ae2c:	bl	1a18 <Mat_int32Swap>
    ae30:	ldr	r3, [sp]
    ae34:	ldr	r2, [sp, #4]
    ae38:	add	r3, r3, #4
    ae3c:	cmp	r3, #1024	; 0x400
    ae40:	strh	r0, [r2], #2
    ae44:	bne	ae20 <ReadInt16Data.part.11+0x5b8>
    ae48:	add	r8, r8, #256	; 0x100
    ae4c:	b	ad60 <ReadInt16Data.part.11+0x4f8>
    ae50:	cmp	r4, #256	; 0x100
    ae54:	ble	aec8 <ReadInt16Data.part.11+0x660>
    ae58:	mov	r9, r8
    ae5c:	mov	r5, r8
    ae60:	add	sl, sp, #8
    ae64:	sub	r3, r4, #256	; 0x100
    ae68:	str	r3, [sp]
    ae6c:	ldr	r3, [sp]
    ae70:	cmp	r9, r3
    ae74:	blt	af00 <ReadInt16Data.part.11+0x698>
    ae78:	sub	r9, r4, #1
    ae7c:	lsr	r9, r9, #8
    ae80:	lsl	r3, r9, #8
    ae84:	cmp	r4, r3
    ae88:	ble	a97c <ReadInt16Data.part.11+0x114>
    ae8c:	sub	r4, r4, r3
    ae90:	add	sl, sp, #8
    ae94:	ldr	r3, [r6]
    ae98:	mov	r2, r4
    ae9c:	mov	r1, r7
    aea0:	mov	r0, sl
    aea4:	bl	1588 <fread@plt>
    aea8:	add	r9, fp, r9, lsl #9
    aeac:	add	r5, r5, r0
    aeb0:	cmp	r4, r8
    aeb4:	ble	a97c <ReadInt16Data.part.11+0x114>
    aeb8:	ldr	r3, [sl, r8, lsl #2]
    aebc:	add	r8, r8, #1
    aec0:	strh	r3, [r9], #2
    aec4:	b	aeb0 <ReadInt16Data.part.11+0x648>
    aec8:	add	r9, sp, #8
    aecc:	ldr	r3, [r6]
    aed0:	mov	r1, r0
    aed4:	mov	r2, r4
    aed8:	mov	r0, r9
    aedc:	bl	1588 <fread@plt>
    aee0:	sub	r3, fp, #2
    aee4:	mov	r5, r0
    aee8:	cmp	r4, r8
    aeec:	ble	a97c <ReadInt16Data.part.11+0x114>
    aef0:	ldr	r2, [r9, r8, lsl #2]
    aef4:	add	r8, r8, #1
    aef8:	strh	r2, [r3, #2]!
    aefc:	b	aee8 <ReadInt16Data.part.11+0x680>
    af00:	ldr	r3, [r6]
    af04:	mov	r2, #256	; 0x100
    af08:	mov	r1, r7
    af0c:	mov	r0, sl
    af10:	bl	1588 <fread@plt>
    af14:	add	r2, fp, r9, lsl #1
    af18:	mov	r3, r8
    af1c:	add	r5, r5, r0
    af20:	ldr	r1, [sl, r3, lsl #2]
    af24:	add	r3, r3, #1
    af28:	cmp	r3, #256	; 0x100
    af2c:	strh	r1, [r2], #2
    af30:	bne	af20 <ReadInt16Data.part.11+0x6b8>
    af34:	add	r9, r9, #256	; 0x100
    af38:	b	ae6c <ReadInt16Data.part.11+0x604>
    af3c:	ldr	r8, [r6, #20]
    af40:	cmp	r8, #0
    af44:	beq	b050 <ReadInt16Data.part.11+0x7e8>
    af48:	cmp	r4, #256	; 0x100
    af4c:	ble	afc0 <ReadInt16Data.part.11+0x758>
    af50:	mov	r8, #0
    af54:	mov	r5, r8
    af58:	sub	sl, r4, #256	; 0x100
    af5c:	add	r9, sp, #8
    af60:	cmp	r8, sl
    af64:	blt	b000 <ReadInt16Data.part.11+0x798>
    af68:	sub	r8, r4, #1
    af6c:	lsr	r8, r8, #8
    af70:	lsl	r3, r8, #8
    af74:	cmp	r4, r3
    af78:	ble	a97c <ReadInt16Data.part.11+0x114>
    af7c:	sub	r4, r4, r3
    af80:	add	r9, sp, #8
    af84:	ldr	r3, [r6]
    af88:	mov	r2, r4
    af8c:	mov	r1, r7
    af90:	mov	r0, r9
    af94:	bl	1588 <fread@plt>
    af98:	add	r8, fp, r8, lsl #9
    af9c:	mov	r6, #0
    afa0:	add	r5, r5, r0
    afa4:	cmp	r4, r6
    afa8:	ble	a97c <ReadInt16Data.part.11+0x114>
    afac:	add	r0, r9, r6, lsl #2
    afb0:	bl	1a80 <Mat_uint32Swap>
    afb4:	add	r6, r6, #1
    afb8:	strh	r0, [r8], #2
    afbc:	b	afa4 <ReadInt16Data.part.11+0x73c>
    afc0:	add	r9, sp, #8
    afc4:	ldr	r3, [r6]
    afc8:	mov	r1, r0
    afcc:	mov	r2, r4
    afd0:	mov	r0, r9
    afd4:	bl	1588 <fread@plt>
    afd8:	sub	fp, fp, #2
    afdc:	mov	r6, #0
    afe0:	mov	r5, r0
    afe4:	cmp	r4, r6
    afe8:	ble	a97c <ReadInt16Data.part.11+0x114>
    afec:	add	r0, r9, r6, lsl #2
    aff0:	bl	1a80 <Mat_uint32Swap>
    aff4:	add	r6, r6, #1
    aff8:	strh	r0, [fp, #2]!
    affc:	b	afe4 <ReadInt16Data.part.11+0x77c>
    b000:	ldr	r3, [r6]
    b004:	mov	r2, #256	; 0x100
    b008:	mov	r1, r7
    b00c:	mov	r0, r9
    b010:	bl	1588 <fread@plt>
    b014:	add	r2, fp, r8, lsl #1
    b018:	mov	r3, #0
    b01c:	add	r5, r5, r0
    b020:	add	r0, r9, r3
    b024:	str	r2, [sp, #4]
    b028:	str	r3, [sp]
    b02c:	bl	1a80 <Mat_uint32Swap>
    b030:	ldr	r3, [sp]
    b034:	ldr	r2, [sp, #4]
    b038:	add	r3, r3, #4
    b03c:	cmp	r3, #1024	; 0x400
    b040:	strh	r0, [r2], #2
    b044:	bne	b020 <ReadInt16Data.part.11+0x7b8>
    b048:	add	r8, r8, #256	; 0x100
    b04c:	b	af60 <ReadInt16Data.part.11+0x6f8>
    b050:	cmp	r4, #256	; 0x100
    b054:	ble	b0c8 <ReadInt16Data.part.11+0x860>
    b058:	mov	r9, r8
    b05c:	mov	r5, r8
    b060:	add	sl, sp, #8
    b064:	sub	r3, r4, #256	; 0x100
    b068:	str	r3, [sp]
    b06c:	ldr	r3, [sp]
    b070:	cmp	r9, r3
    b074:	blt	b100 <ReadInt16Data.part.11+0x898>
    b078:	sub	r9, r4, #1
    b07c:	lsr	r9, r9, #8
    b080:	lsl	r3, r9, #8
    b084:	cmp	r4, r3
    b088:	ble	a97c <ReadInt16Data.part.11+0x114>
    b08c:	sub	r4, r4, r3
    b090:	add	sl, sp, #8
    b094:	ldr	r3, [r6]
    b098:	mov	r2, r4
    b09c:	mov	r1, r7
    b0a0:	mov	r0, sl
    b0a4:	bl	1588 <fread@plt>
    b0a8:	add	r9, fp, r9, lsl #9
    b0ac:	add	r5, r5, r0
    b0b0:	cmp	r4, r8
    b0b4:	ble	a97c <ReadInt16Data.part.11+0x114>
    b0b8:	ldr	r3, [sl, r8, lsl #2]
    b0bc:	add	r8, r8, #1
    b0c0:	strh	r3, [r9], #2
    b0c4:	b	b0b0 <ReadInt16Data.part.11+0x848>
    b0c8:	add	r9, sp, #8
    b0cc:	ldr	r3, [r6]
    b0d0:	mov	r1, r0
    b0d4:	mov	r2, r4
    b0d8:	mov	r0, r9
    b0dc:	bl	1588 <fread@plt>
    b0e0:	sub	r3, fp, #2
    b0e4:	mov	r5, r0
    b0e8:	cmp	r4, r8
    b0ec:	ble	a97c <ReadInt16Data.part.11+0x114>
    b0f0:	ldr	r2, [r9, r8, lsl #2]
    b0f4:	add	r8, r8, #1
    b0f8:	strh	r2, [r3, #2]!
    b0fc:	b	b0e8 <ReadInt16Data.part.11+0x880>
    b100:	ldr	r3, [r6]
    b104:	mov	r2, #256	; 0x100
    b108:	mov	r1, r7
    b10c:	mov	r0, sl
    b110:	bl	1588 <fread@plt>
    b114:	add	r2, fp, r9, lsl #1
    b118:	mov	r3, r8
    b11c:	add	r5, r5, r0
    b120:	ldr	r1, [sl, r3, lsl #2]
    b124:	add	r3, r3, #1
    b128:	cmp	r3, #256	; 0x100
    b12c:	strh	r1, [r2], #2
    b130:	bne	b120 <ReadInt16Data.part.11+0x8b8>
    b134:	add	r9, r9, #256	; 0x100
    b138:	b	b06c <ReadInt16Data.part.11+0x804>
    b13c:	ldr	r8, [r6, #20]
    b140:	cmp	r8, #0
    b144:	beq	b250 <ReadInt16Data.part.11+0x9e8>
    b148:	cmp	r4, #256	; 0x100
    b14c:	ble	b1c0 <ReadInt16Data.part.11+0x958>
    b150:	mov	r8, #0
    b154:	mov	r5, r8
    b158:	sub	sl, r4, #256	; 0x100
    b15c:	add	r9, sp, #8
    b160:	cmp	r8, sl
    b164:	blt	b200 <ReadInt16Data.part.11+0x998>
    b168:	sub	r8, r4, #1
    b16c:	lsr	r8, r8, #8
    b170:	lsl	r3, r8, #8
    b174:	cmp	r4, r3
    b178:	ble	a97c <ReadInt16Data.part.11+0x114>
    b17c:	sub	r4, r4, r3
    b180:	add	r9, sp, #8
    b184:	ldr	r3, [r6]
    b188:	mov	r2, r4
    b18c:	mov	r1, r7
    b190:	mov	r0, r9
    b194:	bl	1588 <fread@plt>
    b198:	add	r8, fp, r8, lsl #9
    b19c:	mov	r6, #0
    b1a0:	add	r5, r5, r0
    b1a4:	cmp	r4, r6
    b1a8:	ble	a97c <ReadInt16Data.part.11+0x114>
    b1ac:	add	r0, r9, r6, lsl #1
    b1b0:	bl	1adc <Mat_int16Swap>
    b1b4:	add	r6, r6, #1
    b1b8:	strh	r0, [r8], #2
    b1bc:	b	b1a4 <ReadInt16Data.part.11+0x93c>
    b1c0:	add	r9, sp, #8
    b1c4:	ldr	r3, [r6]
    b1c8:	mov	r1, r0
    b1cc:	mov	r2, r4
    b1d0:	mov	r0, r9
    b1d4:	bl	1588 <fread@plt>
    b1d8:	sub	fp, fp, #2
    b1dc:	mov	r6, #0
    b1e0:	mov	r5, r0
    b1e4:	cmp	r4, r6
    b1e8:	ble	a97c <ReadInt16Data.part.11+0x114>
    b1ec:	add	r0, r9, r6, lsl #1
    b1f0:	bl	1adc <Mat_int16Swap>
    b1f4:	add	r6, r6, #1
    b1f8:	strh	r0, [fp, #2]!
    b1fc:	b	b1e4 <ReadInt16Data.part.11+0x97c>
    b200:	ldr	r3, [r6]
    b204:	mov	r2, #256	; 0x100
    b208:	mov	r1, r7
    b20c:	mov	r0, r9
    b210:	bl	1588 <fread@plt>
    b214:	add	r2, fp, r8, lsl #1
    b218:	mov	r3, #0
    b21c:	add	r5, r5, r0
    b220:	add	r0, r9, r3
    b224:	str	r2, [sp, #4]
    b228:	str	r3, [sp]
    b22c:	bl	1adc <Mat_int16Swap>
    b230:	ldr	r3, [sp]
    b234:	ldr	r2, [sp, #4]
    b238:	strh	r0, [r2, r3]
    b23c:	add	r3, r3, #2
    b240:	cmp	r3, #512	; 0x200
    b244:	bne	b220 <ReadInt16Data.part.11+0x9b8>
    b248:	add	r8, r8, #256	; 0x100
    b24c:	b	b160 <ReadInt16Data.part.11+0x8f8>
    b250:	cmp	r4, #256	; 0x100
    b254:	ble	b2cc <ReadInt16Data.part.11+0xa64>
    b258:	mov	r9, r8
    b25c:	mov	r5, r8
    b260:	add	sl, sp, #8
    b264:	sub	r3, r4, #256	; 0x100
    b268:	str	r3, [sp]
    b26c:	ldr	r3, [sp]
    b270:	cmp	r9, r3
    b274:	blt	b308 <ReadInt16Data.part.11+0xaa0>
    b278:	sub	r9, r4, #1
    b27c:	lsr	r9, r9, #8
    b280:	lsl	r3, r9, #8
    b284:	cmp	r4, r3
    b288:	ble	a97c <ReadInt16Data.part.11+0x114>
    b28c:	sub	r4, r4, r3
    b290:	add	sl, sp, #8
    b294:	ldr	r3, [r6]
    b298:	mov	r2, r4
    b29c:	mov	r1, r7
    b2a0:	mov	r0, sl
    b2a4:	bl	1588 <fread@plt>
    b2a8:	add	r9, fp, r9, lsl #9
    b2ac:	add	r5, r5, r0
    b2b0:	cmp	r4, r8
    b2b4:	ble	a97c <ReadInt16Data.part.11+0x114>
    b2b8:	lsl	r3, r8, #1
    b2bc:	add	r8, r8, #1
    b2c0:	ldrh	r3, [sl, r3]
    b2c4:	strh	r3, [r9], #2
    b2c8:	b	b2b0 <ReadInt16Data.part.11+0xa48>
    b2cc:	add	r9, sp, #8
    b2d0:	ldr	r3, [r6]
    b2d4:	mov	r1, r0
    b2d8:	mov	r2, r4
    b2dc:	mov	r0, r9
    b2e0:	bl	1588 <fread@plt>
    b2e4:	sub	r3, fp, #2
    b2e8:	mov	r5, r0
    b2ec:	cmp	r4, r8
    b2f0:	ble	a97c <ReadInt16Data.part.11+0x114>
    b2f4:	lsl	r2, r8, #1
    b2f8:	add	r8, r8, #1
    b2fc:	ldrh	r2, [r9, r2]
    b300:	strh	r2, [r3, #2]!
    b304:	b	b2ec <ReadInt16Data.part.11+0xa84>
    b308:	ldr	r3, [r6]
    b30c:	mov	r2, #256	; 0x100
    b310:	mov	r1, r7
    b314:	mov	r0, sl
    b318:	bl	1588 <fread@plt>
    b31c:	add	r2, fp, r9, lsl #1
    b320:	mov	r3, #0
    b324:	add	r5, r5, r0
    b328:	ldrh	r1, [sl, r3]
    b32c:	strh	r1, [r2, r3]
    b330:	add	r3, r3, #2
    b334:	cmp	r3, #512	; 0x200
    b338:	bne	b328 <ReadInt16Data.part.11+0xac0>
    b33c:	add	r9, r9, #256	; 0x100
    b340:	b	b26c <ReadInt16Data.part.11+0xa04>
    b344:	ldr	r8, [r6, #20]
    b348:	cmp	r8, #0
    b34c:	beq	b458 <ReadInt16Data.part.11+0xbf0>
    b350:	cmp	r4, #256	; 0x100
    b354:	ble	b3c8 <ReadInt16Data.part.11+0xb60>
    b358:	mov	r8, #0
    b35c:	mov	r5, r8
    b360:	sub	sl, r4, #256	; 0x100
    b364:	add	r9, sp, #8
    b368:	cmp	r8, sl
    b36c:	blt	b408 <ReadInt16Data.part.11+0xba0>
    b370:	sub	r8, r4, #1
    b374:	lsr	r8, r8, #8
    b378:	lsl	r3, r8, #8
    b37c:	cmp	r4, r3
    b380:	ble	a97c <ReadInt16Data.part.11+0x114>
    b384:	sub	r4, r4, r3
    b388:	add	r9, sp, #8
    b38c:	ldr	r3, [r6]
    b390:	mov	r2, r4
    b394:	mov	r1, r7
    b398:	mov	r0, r9
    b39c:	bl	1588 <fread@plt>
    b3a0:	add	r8, fp, r8, lsl #9
    b3a4:	mov	r6, #0
    b3a8:	add	r5, r5, r0
    b3ac:	cmp	r4, r6
    b3b0:	ble	a97c <ReadInt16Data.part.11+0x114>
    b3b4:	add	r0, r9, r6, lsl #1
    b3b8:	bl	1b10 <Mat_uint16Swap>
    b3bc:	add	r6, r6, #1
    b3c0:	strh	r0, [r8], #2
    b3c4:	b	b3ac <ReadInt16Data.part.11+0xb44>
    b3c8:	add	r9, sp, #8
    b3cc:	ldr	r3, [r6]
    b3d0:	mov	r1, r0
    b3d4:	mov	r2, r4
    b3d8:	mov	r0, r9
    b3dc:	bl	1588 <fread@plt>
    b3e0:	sub	fp, fp, #2
    b3e4:	mov	r6, #0
    b3e8:	mov	r5, r0
    b3ec:	cmp	r4, r6
    b3f0:	ble	a97c <ReadInt16Data.part.11+0x114>
    b3f4:	add	r0, r9, r6, lsl #1
    b3f8:	bl	1b10 <Mat_uint16Swap>
    b3fc:	add	r6, r6, #1
    b400:	strh	r0, [fp, #2]!
    b404:	b	b3ec <ReadInt16Data.part.11+0xb84>
    b408:	ldr	r3, [r6]
    b40c:	mov	r2, #256	; 0x100
    b410:	mov	r1, r7
    b414:	mov	r0, r9
    b418:	bl	1588 <fread@plt>
    b41c:	add	r2, fp, r8, lsl #1
    b420:	mov	r3, #0
    b424:	add	r5, r5, r0
    b428:	add	r0, r9, r3
    b42c:	str	r2, [sp, #4]
    b430:	str	r3, [sp]
    b434:	bl	1b10 <Mat_uint16Swap>
    b438:	ldr	r3, [sp]
    b43c:	ldr	r2, [sp, #4]
    b440:	strh	r0, [r2, r3]
    b444:	add	r3, r3, #2
    b448:	cmp	r3, #512	; 0x200
    b44c:	bne	b428 <ReadInt16Data.part.11+0xbc0>
    b450:	add	r8, r8, #256	; 0x100
    b454:	b	b368 <ReadInt16Data.part.11+0xb00>
    b458:	cmp	r4, #256	; 0x100
    b45c:	ble	b4d4 <ReadInt16Data.part.11+0xc6c>
    b460:	mov	r9, r8
    b464:	mov	r5, r8
    b468:	add	sl, sp, #8
    b46c:	sub	r3, r4, #256	; 0x100
    b470:	str	r3, [sp]
    b474:	ldr	r3, [sp]
    b478:	cmp	r9, r3
    b47c:	blt	b510 <ReadInt16Data.part.11+0xca8>
    b480:	sub	r9, r4, #1
    b484:	lsr	r9, r9, #8
    b488:	lsl	r3, r9, #8
    b48c:	cmp	r4, r3
    b490:	ble	a97c <ReadInt16Data.part.11+0x114>
    b494:	sub	r4, r4, r3
    b498:	add	sl, sp, #8
    b49c:	ldr	r3, [r6]
    b4a0:	mov	r2, r4
    b4a4:	mov	r1, r7
    b4a8:	mov	r0, sl
    b4ac:	bl	1588 <fread@plt>
    b4b0:	add	r9, fp, r9, lsl #9
    b4b4:	add	r5, r5, r0
    b4b8:	cmp	r4, r8
    b4bc:	ble	a97c <ReadInt16Data.part.11+0x114>
    b4c0:	lsl	r3, r8, #1
    b4c4:	add	r8, r8, #1
    b4c8:	ldrh	r3, [sl, r3]
    b4cc:	strh	r3, [r9], #2
    b4d0:	b	b4b8 <ReadInt16Data.part.11+0xc50>
    b4d4:	add	r9, sp, #8
    b4d8:	ldr	r3, [r6]
    b4dc:	mov	r1, r0
    b4e0:	mov	r2, r4
    b4e4:	mov	r0, r9
    b4e8:	bl	1588 <fread@plt>
    b4ec:	sub	r3, fp, #2
    b4f0:	mov	r5, r0
    b4f4:	cmp	r4, r8
    b4f8:	ble	a97c <ReadInt16Data.part.11+0x114>
    b4fc:	lsl	r2, r8, #1
    b500:	add	r8, r8, #1
    b504:	ldrh	r2, [r9, r2]
    b508:	strh	r2, [r3, #2]!
    b50c:	b	b4f4 <ReadInt16Data.part.11+0xc8c>
    b510:	ldr	r3, [r6]
    b514:	mov	r2, #256	; 0x100
    b518:	mov	r1, r7
    b51c:	mov	r0, sl
    b520:	bl	1588 <fread@plt>
    b524:	add	r2, fp, r9, lsl #1
    b528:	mov	r3, #0
    b52c:	add	r5, r5, r0
    b530:	ldrh	r1, [sl, r3]
    b534:	strh	r1, [r2, r3]
    b538:	add	r3, r3, #2
    b53c:	cmp	r3, #512	; 0x200
    b540:	bne	b530 <ReadInt16Data.part.11+0xcc8>
    b544:	add	r9, r9, #256	; 0x100
    b548:	b	b474 <ReadInt16Data.part.11+0xc0c>
    b54c:	cmp	r4, #256	; 0x100
    b550:	ble	b5c0 <ReadInt16Data.part.11+0xd58>
    b554:	mov	r8, #0
    b558:	mov	r5, r8
    b55c:	sub	sl, r4, #256	; 0x100
    b560:	add	r9, sp, #8
    b564:	cmp	r8, sl
    b568:	blt	b5fc <ReadInt16Data.part.11+0xd94>
    b56c:	sub	r8, r4, #1
    b570:	lsr	r8, r8, #8
    b574:	lsl	r3, r8, #8
    b578:	cmp	r4, r3
    b57c:	ble	a97c <ReadInt16Data.part.11+0x114>
    b580:	sub	r4, r4, r3
    b584:	add	r9, sp, #8
    b588:	ldr	r3, [r6]
    b58c:	mov	r2, r4
    b590:	mov	r1, r7
    b594:	mov	r0, r9
    b598:	bl	1588 <fread@plt>
    b59c:	add	r8, fp, r8, lsl #9
    b5a0:	mov	r3, #0
    b5a4:	add	r5, r5, r0
    b5a8:	cmp	r4, r3
    b5ac:	ble	a97c <ReadInt16Data.part.11+0x114>
    b5b0:	ldrsb	r2, [r9, r3]
    b5b4:	add	r3, r3, #1
    b5b8:	strh	r2, [r8], #2
    b5bc:	b	b5a8 <ReadInt16Data.part.11+0xd40>
    b5c0:	add	r8, sp, #8
    b5c4:	ldr	r3, [r6]
    b5c8:	mov	r2, r4
    b5cc:	mov	r1, r0
    b5d0:	mov	r0, r8
    b5d4:	bl	1588 <fread@plt>
    b5d8:	sub	r2, fp, #2
    b5dc:	mov	r3, #0
    b5e0:	mov	r5, r0
    b5e4:	cmp	r4, r3
    b5e8:	ble	a97c <ReadInt16Data.part.11+0x114>
    b5ec:	ldrsb	r1, [r8, r3]
    b5f0:	add	r3, r3, #1
    b5f4:	strh	r1, [r2, #2]!
    b5f8:	b	b5e4 <ReadInt16Data.part.11+0xd7c>
    b5fc:	ldr	r3, [r6]
    b600:	mov	r2, #256	; 0x100
    b604:	mov	r1, r7
    b608:	mov	r0, r9
    b60c:	bl	1588 <fread@plt>
    b610:	add	r2, fp, r8, lsl #1
    b614:	mov	r3, #0
    b618:	add	r5, r5, r0
    b61c:	ldrsb	r1, [r9, r3]
    b620:	add	r3, r3, #1
    b624:	cmp	r3, #256	; 0x100
    b628:	strh	r1, [r2], #2
    b62c:	bne	b61c <ReadInt16Data.part.11+0xdb4>
    b630:	add	r8, r8, #256	; 0x100
    b634:	b	b564 <ReadInt16Data.part.11+0xcfc>
    b638:	cmp	r4, #256	; 0x100
    b63c:	ble	b6ac <ReadInt16Data.part.11+0xe44>
    b640:	mov	r8, #0
    b644:	mov	r5, r8
    b648:	sub	sl, r4, #256	; 0x100
    b64c:	add	r9, sp, #8
    b650:	cmp	r8, sl
    b654:	blt	b6e8 <ReadInt16Data.part.11+0xe80>
    b658:	sub	r8, r4, #1
    b65c:	lsr	r8, r8, #8
    b660:	lsl	r3, r8, #8
    b664:	cmp	r4, r3
    b668:	ble	a97c <ReadInt16Data.part.11+0x114>
    b66c:	sub	r4, r4, r3
    b670:	add	r9, sp, #8
    b674:	ldr	r3, [r6]
    b678:	mov	r2, r4
    b67c:	mov	r1, r7
    b680:	mov	r0, r9
    b684:	bl	1588 <fread@plt>
    b688:	add	r8, fp, r8, lsl #9
    b68c:	mov	r3, #0
    b690:	add	r5, r5, r0
    b694:	cmp	r4, r3
    b698:	ble	a97c <ReadInt16Data.part.11+0x114>
    b69c:	ldrb	r2, [r9, r3]
    b6a0:	add	r3, r3, #1
    b6a4:	strh	r2, [r8], #2
    b6a8:	b	b694 <ReadInt16Data.part.11+0xe2c>
    b6ac:	add	r8, sp, #8
    b6b0:	ldr	r3, [r6]
    b6b4:	mov	r2, r4
    b6b8:	mov	r1, r0
    b6bc:	mov	r0, r8
    b6c0:	bl	1588 <fread@plt>
    b6c4:	sub	r2, fp, #2
    b6c8:	mov	r3, #0
    b6cc:	mov	r5, r0
    b6d0:	cmp	r4, r3
    b6d4:	ble	a97c <ReadInt16Data.part.11+0x114>
    b6d8:	ldrb	r1, [r8, r3]
    b6dc:	add	r3, r3, #1
    b6e0:	strh	r1, [r2, #2]!
    b6e4:	b	b6d0 <ReadInt16Data.part.11+0xe68>
    b6e8:	ldr	r3, [r6]
    b6ec:	mov	r2, #256	; 0x100
    b6f0:	mov	r1, r7
    b6f4:	mov	r0, r9
    b6f8:	bl	1588 <fread@plt>
    b6fc:	add	r2, fp, r8, lsl #1
    b700:	mov	r3, #0
    b704:	add	r5, r5, r0
    b708:	ldrb	r1, [r9, r3]
    b70c:	add	r3, r3, #1
    b710:	cmp	r3, #256	; 0x100
    b714:	strh	r1, [r2], #2
    b718:	bne	b708 <ReadInt16Data.part.11+0xea0>
    b71c:	add	r8, r8, #256	; 0x100
    b720:	b	b650 <ReadInt16Data.part.11+0xde8>
    b724:	cmp	r5, #12
    b728:	bne	b92c <ReadInt16Data.part.11+0x10c4>
    b72c:	ldr	r8, [r6, #20]
    b730:	cmp	r8, #0
    b734:	beq	b840 <ReadInt16Data.part.11+0xfd8>
    b738:	cmp	r4, #256	; 0x100
    b73c:	ble	b7b0 <ReadInt16Data.part.11+0xf48>
    b740:	mov	r8, #0
    b744:	mov	r5, r8
    b748:	sub	sl, r4, #256	; 0x100
    b74c:	add	r9, sp, #8
    b750:	cmp	r8, sl
    b754:	blt	b7f0 <ReadInt16Data.part.11+0xf88>
    b758:	sub	r8, r4, #1
    b75c:	lsr	r8, r8, #8
    b760:	lsl	r3, r8, #8
    b764:	cmp	r4, r3
    b768:	ble	a97c <ReadInt16Data.part.11+0x114>
    b76c:	sub	r4, r4, r3
    b770:	add	r9, sp, #8
    b774:	ldr	r3, [r6]
    b778:	mov	r2, r4
    b77c:	mov	r1, r7
    b780:	mov	r0, r9
    b784:	bl	1588 <fread@plt>
    b788:	add	r8, fp, r8, lsl #9
    b78c:	mov	r6, #0
    b790:	add	r5, r5, r0
    b794:	cmp	r4, r6
    b798:	ble	a97c <ReadInt16Data.part.11+0x114>
    b79c:	add	r0, r9, r6, lsl #3
    b7a0:	bl	18bc <Mat_int64Swap>
    b7a4:	add	r6, r6, #1
    b7a8:	strh	r0, [r8], #2
    b7ac:	b	b794 <ReadInt16Data.part.11+0xf2c>
    b7b0:	add	r9, sp, #8
    b7b4:	ldr	r3, [r6]
    b7b8:	mov	r1, r0
    b7bc:	mov	r2, r4
    b7c0:	mov	r0, r9
    b7c4:	bl	1588 <fread@plt>
    b7c8:	sub	fp, fp, #2
    b7cc:	mov	r6, #0
    b7d0:	mov	r5, r0
    b7d4:	cmp	r4, r6
    b7d8:	ble	a97c <ReadInt16Data.part.11+0x114>
    b7dc:	add	r0, r9, r6, lsl #3
    b7e0:	bl	18bc <Mat_int64Swap>
    b7e4:	add	r6, r6, #1
    b7e8:	strh	r0, [fp, #2]!
    b7ec:	b	b7d4 <ReadInt16Data.part.11+0xf6c>
    b7f0:	ldr	r3, [r6]
    b7f4:	mov	r2, #256	; 0x100
    b7f8:	mov	r1, r7
    b7fc:	mov	r0, r9
    b800:	bl	1588 <fread@plt>
    b804:	add	r2, fp, r8, lsl #1
    b808:	mov	r3, #0
    b80c:	add	r5, r5, r0
    b810:	add	r0, r9, r3
    b814:	str	r2, [sp, #4]
    b818:	str	r3, [sp]
    b81c:	bl	18bc <Mat_int64Swap>
    b820:	ldr	r3, [sp]
    b824:	ldr	r2, [sp, #4]
    b828:	add	r3, r3, #8
    b82c:	cmp	r3, #2048	; 0x800
    b830:	strh	r0, [r2], #2
    b834:	bne	b810 <ReadInt16Data.part.11+0xfa8>
    b838:	add	r8, r8, #256	; 0x100
    b83c:	b	b750 <ReadInt16Data.part.11+0xee8>
    b840:	cmp	r4, #256	; 0x100
    b844:	ble	b8b8 <ReadInt16Data.part.11+0x1050>
    b848:	mov	r9, r8
    b84c:	mov	r5, r8
    b850:	add	sl, sp, #8
    b854:	sub	r3, r4, #256	; 0x100
    b858:	str	r3, [sp]
    b85c:	ldr	r3, [sp]
    b860:	cmp	r9, r3
    b864:	blt	b8f0 <ReadInt16Data.part.11+0x1088>
    b868:	sub	r9, r4, #1
    b86c:	lsr	r9, r9, #8
    b870:	lsl	r3, r9, #8
    b874:	cmp	r4, r3
    b878:	ble	a97c <ReadInt16Data.part.11+0x114>
    b87c:	sub	r4, r4, r3
    b880:	add	sl, sp, #8
    b884:	ldr	r3, [r6]
    b888:	mov	r2, r4
    b88c:	mov	r1, r7
    b890:	mov	r0, sl
    b894:	bl	1588 <fread@plt>
    b898:	add	r9, fp, r9, lsl #9
    b89c:	add	r5, r5, r0
    b8a0:	cmp	r4, r8
    b8a4:	ble	a97c <ReadInt16Data.part.11+0x114>
    b8a8:	ldr	r3, [sl, r8, lsl #3]
    b8ac:	add	r8, r8, #1
    b8b0:	strh	r3, [r9], #2
    b8b4:	b	b8a0 <ReadInt16Data.part.11+0x1038>
    b8b8:	add	r9, sp, #8
    b8bc:	ldr	r3, [r6]
    b8c0:	mov	r1, r0
    b8c4:	mov	r2, r4
    b8c8:	mov	r0, r9
    b8cc:	bl	1588 <fread@plt>
    b8d0:	sub	r3, fp, #2
    b8d4:	mov	r5, r0
    b8d8:	cmp	r4, r8
    b8dc:	ble	a97c <ReadInt16Data.part.11+0x114>
    b8e0:	ldr	r2, [r9, r8, lsl #3]
    b8e4:	add	r8, r8, #1
    b8e8:	strh	r2, [r3, #2]!
    b8ec:	b	b8d8 <ReadInt16Data.part.11+0x1070>
    b8f0:	ldr	r3, [r6]
    b8f4:	mov	r2, #256	; 0x100
    b8f8:	mov	r1, r7
    b8fc:	mov	r0, sl
    b900:	bl	1588 <fread@plt>
    b904:	add	r2, fp, r9, lsl #1
    b908:	mov	r3, #0
    b90c:	add	r5, r5, r0
    b910:	ldr	r1, [sl, r3]
    b914:	add	r3, r3, #8
    b918:	cmp	r3, #2048	; 0x800
    b91c:	strh	r1, [r2], #2
    b920:	bne	b910 <ReadInt16Data.part.11+0x10a8>
    b924:	add	r9, r9, #256	; 0x100
    b928:	b	b85c <ReadInt16Data.part.11+0xff4>
    b92c:	cmp	r5, #13
    b930:	movne	r5, #0
    b934:	bne	a97c <ReadInt16Data.part.11+0x114>
    b938:	ldr	r8, [r6, #20]
    b93c:	cmp	r8, #0
    b940:	beq	ba4c <ReadInt16Data.part.11+0x11e4>
    b944:	cmp	r4, #256	; 0x100
    b948:	ble	b9bc <ReadInt16Data.part.11+0x1154>
    b94c:	mov	r8, #0
    b950:	mov	r5, r8
    b954:	sub	sl, r4, #256	; 0x100
    b958:	add	r9, sp, #8
    b95c:	cmp	r8, sl
    b960:	blt	b9fc <ReadInt16Data.part.11+0x1194>
    b964:	sub	r8, r4, #1
    b968:	lsr	r8, r8, #8
    b96c:	lsl	r3, r8, #8
    b970:	cmp	r4, r3
    b974:	ble	a97c <ReadInt16Data.part.11+0x114>
    b978:	sub	r4, r4, r3
    b97c:	add	r9, sp, #8
    b980:	ldr	r3, [r6]
    b984:	mov	r2, r4
    b988:	mov	r1, r7
    b98c:	mov	r0, r9
    b990:	bl	1588 <fread@plt>
    b994:	add	r8, fp, r8, lsl #9
    b998:	mov	r6, #0
    b99c:	add	r5, r5, r0
    b9a0:	cmp	r4, r6
    b9a4:	ble	a97c <ReadInt16Data.part.11+0x114>
    b9a8:	add	r0, r9, r6, lsl #3
    b9ac:	bl	1980 <Mat_uint64Swap>
    b9b0:	add	r6, r6, #1
    b9b4:	strh	r0, [r8], #2
    b9b8:	b	b9a0 <ReadInt16Data.part.11+0x1138>
    b9bc:	add	r9, sp, #8
    b9c0:	ldr	r3, [r6]
    b9c4:	mov	r1, r0
    b9c8:	mov	r2, r4
    b9cc:	mov	r0, r9
    b9d0:	bl	1588 <fread@plt>
    b9d4:	sub	fp, fp, #2
    b9d8:	mov	r6, #0
    b9dc:	mov	r5, r0
    b9e0:	cmp	r4, r6
    b9e4:	ble	a97c <ReadInt16Data.part.11+0x114>
    b9e8:	add	r0, r9, r6, lsl #3
    b9ec:	bl	1980 <Mat_uint64Swap>
    b9f0:	add	r6, r6, #1
    b9f4:	strh	r0, [fp, #2]!
    b9f8:	b	b9e0 <ReadInt16Data.part.11+0x1178>
    b9fc:	ldr	r3, [r6]
    ba00:	mov	r2, #256	; 0x100
    ba04:	mov	r1, r7
    ba08:	mov	r0, r9
    ba0c:	bl	1588 <fread@plt>
    ba10:	add	r2, fp, r8, lsl #1
    ba14:	mov	r3, #0
    ba18:	add	r5, r5, r0
    ba1c:	add	r0, r9, r3
    ba20:	str	r2, [sp, #4]
    ba24:	str	r3, [sp]
    ba28:	bl	1980 <Mat_uint64Swap>
    ba2c:	ldr	r3, [sp]
    ba30:	ldr	r2, [sp, #4]
    ba34:	add	r3, r3, #8
    ba38:	cmp	r3, #2048	; 0x800
    ba3c:	strh	r0, [r2], #2
    ba40:	bne	ba1c <ReadInt16Data.part.11+0x11b4>
    ba44:	add	r8, r8, #256	; 0x100
    ba48:	b	b95c <ReadInt16Data.part.11+0x10f4>
    ba4c:	cmp	r4, #256	; 0x100
    ba50:	ble	bac4 <ReadInt16Data.part.11+0x125c>
    ba54:	mov	r9, r8
    ba58:	mov	r5, r8
    ba5c:	add	sl, sp, #8
    ba60:	sub	r3, r4, #256	; 0x100
    ba64:	str	r3, [sp]
    ba68:	ldr	r3, [sp]
    ba6c:	cmp	r9, r3
    ba70:	blt	bafc <ReadInt16Data.part.11+0x1294>
    ba74:	sub	r9, r4, #1
    ba78:	lsr	r9, r9, #8
    ba7c:	lsl	r3, r9, #8
    ba80:	cmp	r4, r3
    ba84:	ble	a97c <ReadInt16Data.part.11+0x114>
    ba88:	sub	r4, r4, r3
    ba8c:	add	sl, sp, #8
    ba90:	ldr	r3, [r6]
    ba94:	mov	r2, r4
    ba98:	mov	r1, r7
    ba9c:	mov	r0, sl
    baa0:	bl	1588 <fread@plt>
    baa4:	add	r9, fp, r9, lsl #9
    baa8:	add	r5, r5, r0
    baac:	cmp	r4, r8
    bab0:	ble	a97c <ReadInt16Data.part.11+0x114>
    bab4:	ldr	r3, [sl, r8, lsl #3]
    bab8:	add	r8, r8, #1
    babc:	strh	r3, [r9], #2
    bac0:	b	baac <ReadInt16Data.part.11+0x1244>
    bac4:	add	r9, sp, #8
    bac8:	ldr	r3, [r6]
    bacc:	mov	r1, r0
    bad0:	mov	r2, r4
    bad4:	mov	r0, r9
    bad8:	bl	1588 <fread@plt>
    badc:	sub	r3, fp, #2
    bae0:	mov	r5, r0
    bae4:	cmp	r4, r8
    bae8:	ble	a97c <ReadInt16Data.part.11+0x114>
    baec:	ldr	r2, [r9, r8, lsl #3]
    baf0:	add	r8, r8, #1
    baf4:	strh	r2, [r3, #2]!
    baf8:	b	bae4 <ReadInt16Data.part.11+0x127c>
    bafc:	ldr	r3, [r6]
    bb00:	mov	r2, #256	; 0x100
    bb04:	mov	r1, r7
    bb08:	mov	r0, sl
    bb0c:	bl	1588 <fread@plt>
    bb10:	add	r2, fp, r9, lsl #1
    bb14:	mov	r3, #0
    bb18:	add	r5, r5, r0
    bb1c:	ldr	r1, [sl, r3]
    bb20:	add	r3, r3, #8
    bb24:	cmp	r3, #2048	; 0x800
    bb28:	strh	r1, [r2], #2
    bb2c:	bne	bb1c <ReadInt16Data.part.11+0x12b4>
    bb30:	add	r9, r9, #256	; 0x100
    bb34:	b	ba68 <ReadInt16Data.part.11+0x1200>

0000bb38 <ReadUInt16Data.part.13>:
    bb38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb3c:	sub	sp, sp, #2048	; 0x800
    bb40:	sub	sp, sp, #12
    bb44:	mov	r6, r0
    bb48:	mov	r0, r2
    bb4c:	mov	r5, r2
    bb50:	mov	r4, r3
    bb54:	mov	fp, r1
    bb58:	bl	1600 <Mat_SizeOf@plt>
    bb5c:	sub	r3, r5, #1
    bb60:	mov	r7, r0
    bb64:	cmp	r3, #8
    bb68:	addls	pc, pc, r3, lsl #2
    bb6c:	b	c9f4 <ReadUInt16Data.part.13+0xebc>
    bb70:	b	c81c <ReadUInt16Data.part.13+0xce4>
    bb74:	b	c908 <ReadUInt16Data.part.13+0xdd0>
    bb78:	b	c40c <ReadUInt16Data.part.13+0x8d4>
    bb7c:	b	c614 <ReadUInt16Data.part.13+0xadc>
    bb80:	b	c00c <ReadUInt16Data.part.13+0x4d4>
    bb84:	b	c20c <ReadUInt16Data.part.13+0x6d4>
    bb88:	b	bdd8 <ReadUInt16Data.part.13+0x2a0>
    bb8c:	b	c9f4 <ReadUInt16Data.part.13+0xebc>
    bb90:	b	bb94 <ReadUInt16Data.part.13+0x5c>
    bb94:	ldr	r8, [r6, #20]
    bb98:	cmp	r8, #0
    bb9c:	beq	bcd0 <ReadUInt16Data.part.13+0x198>
    bba0:	cmp	r4, #256	; 0x100
    bba4:	ble	bc20 <ReadUInt16Data.part.13+0xe8>
    bba8:	mov	r8, #0
    bbac:	mov	r5, r8
    bbb0:	sub	sl, r4, #256	; 0x100
    bbb4:	add	r9, sp, #8
    bbb8:	cmp	r8, sl
    bbbc:	blt	bc78 <ReadUInt16Data.part.13+0x140>
    bbc0:	sub	r8, r4, #1
    bbc4:	lsr	r8, r8, #8
    bbc8:	lsl	r3, r8, #8
    bbcc:	cmp	r4, r3
    bbd0:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    bbd4:	sub	r4, r4, r3
    bbd8:	add	r9, sp, #8
    bbdc:	ldr	r3, [r6]
    bbe0:	mov	r2, r4
    bbe4:	mov	r1, r7
    bbe8:	mov	r0, r9
    bbec:	bl	1588 <fread@plt>
    bbf0:	add	r8, fp, r8, lsl #9
    bbf4:	mov	r6, #0
    bbf8:	add	r5, r5, r0
    bbfc:	cmp	r4, r6
    bc00:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    bc04:	add	r0, r9, r6, lsl #3
    bc08:	bl	1b88 <Mat_doubleSwap>
    bc0c:	add	r6, r6, #1
    bc10:	vcvt.u32.f64	s15, d0
    bc14:	vmov	r3, s15
    bc18:	strh	r3, [r8], #2
    bc1c:	b	bbfc <ReadUInt16Data.part.13+0xc4>
    bc20:	add	r9, sp, #8
    bc24:	ldr	r3, [r6]
    bc28:	mov	r1, r0
    bc2c:	mov	r2, r4
    bc30:	mov	r0, r9
    bc34:	bl	1588 <fread@plt>
    bc38:	sub	fp, fp, #2
    bc3c:	mov	r6, #0
    bc40:	mov	r5, r0
    bc44:	cmp	r4, r6
    bc48:	bgt	bc5c <ReadUInt16Data.part.13+0x124>
    bc4c:	mul	r0, r7, r5
    bc50:	add	sp, sp, #2048	; 0x800
    bc54:	add	sp, sp, #12
    bc58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc5c:	add	r0, r9, r6, lsl #3
    bc60:	bl	1b88 <Mat_doubleSwap>
    bc64:	add	r6, r6, #1
    bc68:	vcvt.u32.f64	s15, d0
    bc6c:	vmov	r3, s15
    bc70:	strh	r3, [fp, #2]!
    bc74:	b	bc44 <ReadUInt16Data.part.13+0x10c>
    bc78:	ldr	r3, [r6]
    bc7c:	mov	r2, #256	; 0x100
    bc80:	mov	r1, r7
    bc84:	mov	r0, r9
    bc88:	bl	1588 <fread@plt>
    bc8c:	add	r2, fp, r8, lsl #1
    bc90:	mov	r3, #0
    bc94:	add	r5, r5, r0
    bc98:	add	r0, r9, r3
    bc9c:	str	r2, [sp, #4]
    bca0:	str	r3, [sp]
    bca4:	bl	1b88 <Mat_doubleSwap>
    bca8:	ldr	r3, [sp]
    bcac:	ldr	r2, [sp, #4]
    bcb0:	add	r3, r3, #8
    bcb4:	cmp	r3, #2048	; 0x800
    bcb8:	vcvt.u32.f64	s15, d0
    bcbc:	vmov	r1, s15
    bcc0:	strh	r1, [r2], #2
    bcc4:	bne	bc98 <ReadUInt16Data.part.13+0x160>
    bcc8:	add	r8, r8, #256	; 0x100
    bccc:	b	bbb8 <ReadUInt16Data.part.13+0x80>
    bcd0:	cmp	r4, #256	; 0x100
    bcd4:	ble	bd58 <ReadUInt16Data.part.13+0x220>
    bcd8:	sub	r3, r4, #256	; 0x100
    bcdc:	mov	r9, fp
    bce0:	mov	sl, r8
    bce4:	mov	r5, r8
    bce8:	str	r3, [sp, #4]
    bcec:	add	r3, sp, #8
    bcf0:	str	r3, [sp]
    bcf4:	ldr	r3, [sp, #4]
    bcf8:	cmp	sl, r3
    bcfc:	blt	bd98 <ReadUInt16Data.part.13+0x260>
    bd00:	sub	r9, r4, #1
    bd04:	lsr	r9, r9, #8
    bd08:	lsl	r3, r9, #8
    bd0c:	cmp	r4, r3
    bd10:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    bd14:	sub	r4, r4, r3
    bd18:	ldr	r3, [r6]
    bd1c:	add	r6, sp, #8
    bd20:	mov	r2, r4
    bd24:	mov	r1, r7
    bd28:	mov	r0, r6
    bd2c:	bl	1588 <fread@plt>
    bd30:	add	r9, fp, r9, lsl #9
    bd34:	add	r5, r5, r0
    bd38:	cmp	r4, r8
    bd3c:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    bd40:	vldmia	r6!, {d7}
    bd44:	add	r8, r8, #1
    bd48:	vcvt.u32.f64	s15, d7
    bd4c:	vmov	r3, s15
    bd50:	strh	r3, [r9], #2
    bd54:	b	bd38 <ReadUInt16Data.part.13+0x200>
    bd58:	ldr	r3, [r6]
    bd5c:	add	r6, sp, #8
    bd60:	mov	r2, r4
    bd64:	mov	r1, r0
    bd68:	mov	r0, r6
    bd6c:	bl	1588 <fread@plt>
    bd70:	sub	r2, fp, #2
    bd74:	mov	r5, r0
    bd78:	cmp	r4, r8
    bd7c:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    bd80:	vldmia	r6!, {d7}
    bd84:	add	r8, r8, #1
    bd88:	vcvt.u32.f64	s15, d7
    bd8c:	vmov	r3, s15
    bd90:	strh	r3, [r2, #2]!
    bd94:	b	bd78 <ReadUInt16Data.part.13+0x240>
    bd98:	mov	r2, #256	; 0x100
    bd9c:	mov	r1, r7
    bda0:	ldr	r3, [r6]
    bda4:	ldr	r0, [sp]
    bda8:	bl	1588 <fread@plt>
    bdac:	ldr	r2, [sp]
    bdb0:	add	r1, r9, #512	; 0x200
    bdb4:	add	r5, r5, r0
    bdb8:	vldmia	r2!, {d7}
    bdbc:	vcvt.u32.f64	s15, d7
    bdc0:	vmov	r3, s15
    bdc4:	strh	r3, [r9], #2
    bdc8:	cmp	r9, r1
    bdcc:	bne	bdb8 <ReadUInt16Data.part.13+0x280>
    bdd0:	add	sl, sl, #256	; 0x100
    bdd4:	b	bcf4 <ReadUInt16Data.part.13+0x1bc>
    bdd8:	ldr	r8, [r6, #20]
    bddc:	cmp	r8, #0
    bde0:	beq	bf04 <ReadUInt16Data.part.13+0x3cc>
    bde4:	cmp	r4, #256	; 0x100
    bde8:	ble	be64 <ReadUInt16Data.part.13+0x32c>
    bdec:	mov	r8, #0
    bdf0:	mov	r5, r8
    bdf4:	sub	sl, r4, #256	; 0x100
    bdf8:	add	r9, sp, #8
    bdfc:	cmp	r8, sl
    be00:	blt	beac <ReadUInt16Data.part.13+0x374>
    be04:	sub	r8, r4, #1
    be08:	lsr	r8, r8, #8
    be0c:	lsl	r3, r8, #8
    be10:	cmp	r4, r3
    be14:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    be18:	sub	r4, r4, r3
    be1c:	add	r9, sp, #8
    be20:	ldr	r3, [r6]
    be24:	mov	r2, r4
    be28:	mov	r1, r7
    be2c:	mov	r0, r9
    be30:	bl	1588 <fread@plt>
    be34:	add	r8, fp, r8, lsl #9
    be38:	mov	r6, #0
    be3c:	add	r5, r5, r0
    be40:	cmp	r4, r6
    be44:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    be48:	add	r0, r9, r6, lsl #2
    be4c:	bl	1b2c <Mat_floatSwap>
    be50:	add	r6, r6, #1
    be54:	vcvt.u32.f32	s15, s0
    be58:	vmov	r3, s15
    be5c:	strh	r3, [r8], #2
    be60:	b	be40 <ReadUInt16Data.part.13+0x308>
    be64:	add	r9, sp, #8
    be68:	ldr	r3, [r6]
    be6c:	mov	r1, r0
    be70:	mov	r2, r4
    be74:	mov	r0, r9
    be78:	bl	1588 <fread@plt>
    be7c:	sub	fp, fp, #2
    be80:	mov	r6, #0
    be84:	mov	r5, r0
    be88:	cmp	r4, r6
    be8c:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    be90:	add	r0, r9, r6, lsl #2
    be94:	bl	1b2c <Mat_floatSwap>
    be98:	add	r6, r6, #1
    be9c:	vcvt.u32.f32	s15, s0
    bea0:	vmov	r3, s15
    bea4:	strh	r3, [fp, #2]!
    bea8:	b	be88 <ReadUInt16Data.part.13+0x350>
    beac:	ldr	r3, [r6]
    beb0:	mov	r2, #256	; 0x100
    beb4:	mov	r1, r7
    beb8:	mov	r0, r9
    bebc:	bl	1588 <fread@plt>
    bec0:	add	r2, fp, r8, lsl #1
    bec4:	mov	r3, #0
    bec8:	add	r5, r5, r0
    becc:	add	r0, r9, r3
    bed0:	str	r2, [sp, #4]
    bed4:	str	r3, [sp]
    bed8:	bl	1b2c <Mat_floatSwap>
    bedc:	ldr	r3, [sp]
    bee0:	ldr	r2, [sp, #4]
    bee4:	add	r3, r3, #4
    bee8:	cmp	r3, #1024	; 0x400
    beec:	vcvt.u32.f32	s15, s0
    bef0:	vmov	r1, s15
    bef4:	strh	r1, [r2], #2
    bef8:	bne	becc <ReadUInt16Data.part.13+0x394>
    befc:	add	r8, r8, #256	; 0x100
    bf00:	b	bdfc <ReadUInt16Data.part.13+0x2c4>
    bf04:	cmp	r4, #256	; 0x100
    bf08:	ble	bf8c <ReadUInt16Data.part.13+0x454>
    bf0c:	sub	r3, r4, #256	; 0x100
    bf10:	mov	r9, fp
    bf14:	mov	sl, r8
    bf18:	mov	r5, r8
    bf1c:	str	r3, [sp, #4]
    bf20:	add	r3, sp, #8
    bf24:	str	r3, [sp]
    bf28:	ldr	r3, [sp, #4]
    bf2c:	cmp	sl, r3
    bf30:	blt	bfcc <ReadUInt16Data.part.13+0x494>
    bf34:	sub	r9, r4, #1
    bf38:	lsr	r9, r9, #8
    bf3c:	lsl	r3, r9, #8
    bf40:	cmp	r4, r3
    bf44:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    bf48:	sub	r4, r4, r3
    bf4c:	ldr	r3, [r6]
    bf50:	add	r6, sp, #8
    bf54:	mov	r2, r4
    bf58:	mov	r1, r7
    bf5c:	mov	r0, r6
    bf60:	bl	1588 <fread@plt>
    bf64:	add	r9, fp, r9, lsl #9
    bf68:	add	r5, r5, r0
    bf6c:	cmp	r4, r8
    bf70:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    bf74:	vldmia	r6!, {s15}
    bf78:	add	r8, r8, #1
    bf7c:	vcvt.u32.f32	s15, s15
    bf80:	vmov	r3, s15
    bf84:	strh	r3, [r9], #2
    bf88:	b	bf6c <ReadUInt16Data.part.13+0x434>
    bf8c:	ldr	r3, [r6]
    bf90:	add	r6, sp, #8
    bf94:	mov	r2, r4
    bf98:	mov	r1, r0
    bf9c:	mov	r0, r6
    bfa0:	bl	1588 <fread@plt>
    bfa4:	sub	r2, fp, #2
    bfa8:	mov	r5, r0
    bfac:	cmp	r4, r8
    bfb0:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    bfb4:	vldmia	r6!, {s15}
    bfb8:	add	r8, r8, #1
    bfbc:	vcvt.u32.f32	s15, s15
    bfc0:	vmov	r3, s15
    bfc4:	strh	r3, [r2, #2]!
    bfc8:	b	bfac <ReadUInt16Data.part.13+0x474>
    bfcc:	mov	r2, #256	; 0x100
    bfd0:	mov	r1, r7
    bfd4:	ldr	r3, [r6]
    bfd8:	ldr	r0, [sp]
    bfdc:	bl	1588 <fread@plt>
    bfe0:	ldr	r2, [sp]
    bfe4:	add	r1, r9, #512	; 0x200
    bfe8:	add	r5, r5, r0
    bfec:	vldmia	r2!, {s15}
    bff0:	vcvt.u32.f32	s15, s15
    bff4:	vmov	r3, s15
    bff8:	strh	r3, [r9], #2
    bffc:	cmp	r9, r1
    c000:	bne	bfec <ReadUInt16Data.part.13+0x4b4>
    c004:	add	sl, sl, #256	; 0x100
    c008:	b	bf28 <ReadUInt16Data.part.13+0x3f0>
    c00c:	ldr	r8, [r6, #20]
    c010:	cmp	r8, #0
    c014:	beq	c120 <ReadUInt16Data.part.13+0x5e8>
    c018:	cmp	r4, #256	; 0x100
    c01c:	ble	c090 <ReadUInt16Data.part.13+0x558>
    c020:	mov	r8, #0
    c024:	mov	r5, r8
    c028:	sub	sl, r4, #256	; 0x100
    c02c:	add	r9, sp, #8
    c030:	cmp	r8, sl
    c034:	blt	c0d0 <ReadUInt16Data.part.13+0x598>
    c038:	sub	r8, r4, #1
    c03c:	lsr	r8, r8, #8
    c040:	lsl	r3, r8, #8
    c044:	cmp	r4, r3
    c048:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c04c:	sub	r4, r4, r3
    c050:	add	r9, sp, #8
    c054:	ldr	r3, [r6]
    c058:	mov	r2, r4
    c05c:	mov	r1, r7
    c060:	mov	r0, r9
    c064:	bl	1588 <fread@plt>
    c068:	add	r8, fp, r8, lsl #9
    c06c:	mov	r6, #0
    c070:	add	r5, r5, r0
    c074:	cmp	r4, r6
    c078:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c07c:	add	r0, r9, r6, lsl #2
    c080:	bl	1a18 <Mat_int32Swap>
    c084:	add	r6, r6, #1
    c088:	strh	r0, [r8], #2
    c08c:	b	c074 <ReadUInt16Data.part.13+0x53c>
    c090:	add	r9, sp, #8
    c094:	ldr	r3, [r6]
    c098:	mov	r1, r0
    c09c:	mov	r2, r4
    c0a0:	mov	r0, r9
    c0a4:	bl	1588 <fread@plt>
    c0a8:	sub	fp, fp, #2
    c0ac:	mov	r6, #0
    c0b0:	mov	r5, r0
    c0b4:	cmp	r4, r6
    c0b8:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c0bc:	add	r0, r9, r6, lsl #2
    c0c0:	bl	1a18 <Mat_int32Swap>
    c0c4:	add	r6, r6, #1
    c0c8:	strh	r0, [fp, #2]!
    c0cc:	b	c0b4 <ReadUInt16Data.part.13+0x57c>
    c0d0:	ldr	r3, [r6]
    c0d4:	mov	r2, #256	; 0x100
    c0d8:	mov	r1, r7
    c0dc:	mov	r0, r9
    c0e0:	bl	1588 <fread@plt>
    c0e4:	add	r2, fp, r8, lsl #1
    c0e8:	mov	r3, #0
    c0ec:	add	r5, r5, r0
    c0f0:	add	r0, r9, r3
    c0f4:	str	r2, [sp, #4]
    c0f8:	str	r3, [sp]
    c0fc:	bl	1a18 <Mat_int32Swap>
    c100:	ldr	r3, [sp]
    c104:	ldr	r2, [sp, #4]
    c108:	add	r3, r3, #4
    c10c:	cmp	r3, #1024	; 0x400
    c110:	strh	r0, [r2], #2
    c114:	bne	c0f0 <ReadUInt16Data.part.13+0x5b8>
    c118:	add	r8, r8, #256	; 0x100
    c11c:	b	c030 <ReadUInt16Data.part.13+0x4f8>
    c120:	cmp	r4, #256	; 0x100
    c124:	ble	c198 <ReadUInt16Data.part.13+0x660>
    c128:	mov	r9, r8
    c12c:	mov	r5, r8
    c130:	add	sl, sp, #8
    c134:	sub	r3, r4, #256	; 0x100
    c138:	str	r3, [sp]
    c13c:	ldr	r3, [sp]
    c140:	cmp	r9, r3
    c144:	blt	c1d0 <ReadUInt16Data.part.13+0x698>
    c148:	sub	r9, r4, #1
    c14c:	lsr	r9, r9, #8
    c150:	lsl	r3, r9, #8
    c154:	cmp	r4, r3
    c158:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c15c:	sub	r4, r4, r3
    c160:	add	sl, sp, #8
    c164:	ldr	r3, [r6]
    c168:	mov	r2, r4
    c16c:	mov	r1, r7
    c170:	mov	r0, sl
    c174:	bl	1588 <fread@plt>
    c178:	add	r9, fp, r9, lsl #9
    c17c:	add	r5, r5, r0
    c180:	cmp	r4, r8
    c184:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c188:	ldr	r3, [sl, r8, lsl #2]
    c18c:	add	r8, r8, #1
    c190:	strh	r3, [r9], #2
    c194:	b	c180 <ReadUInt16Data.part.13+0x648>
    c198:	add	r9, sp, #8
    c19c:	ldr	r3, [r6]
    c1a0:	mov	r1, r0
    c1a4:	mov	r2, r4
    c1a8:	mov	r0, r9
    c1ac:	bl	1588 <fread@plt>
    c1b0:	sub	r3, fp, #2
    c1b4:	mov	r5, r0
    c1b8:	cmp	r4, r8
    c1bc:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c1c0:	ldr	r2, [r9, r8, lsl #2]
    c1c4:	add	r8, r8, #1
    c1c8:	strh	r2, [r3, #2]!
    c1cc:	b	c1b8 <ReadUInt16Data.part.13+0x680>
    c1d0:	ldr	r3, [r6]
    c1d4:	mov	r2, #256	; 0x100
    c1d8:	mov	r1, r7
    c1dc:	mov	r0, sl
    c1e0:	bl	1588 <fread@plt>
    c1e4:	add	r2, fp, r9, lsl #1
    c1e8:	mov	r3, r8
    c1ec:	add	r5, r5, r0
    c1f0:	ldr	r1, [sl, r3, lsl #2]
    c1f4:	add	r3, r3, #1
    c1f8:	cmp	r3, #256	; 0x100
    c1fc:	strh	r1, [r2], #2
    c200:	bne	c1f0 <ReadUInt16Data.part.13+0x6b8>
    c204:	add	r9, r9, #256	; 0x100
    c208:	b	c13c <ReadUInt16Data.part.13+0x604>
    c20c:	ldr	r8, [r6, #20]
    c210:	cmp	r8, #0
    c214:	beq	c320 <ReadUInt16Data.part.13+0x7e8>
    c218:	cmp	r4, #256	; 0x100
    c21c:	ble	c290 <ReadUInt16Data.part.13+0x758>
    c220:	mov	r8, #0
    c224:	mov	r5, r8
    c228:	sub	sl, r4, #256	; 0x100
    c22c:	add	r9, sp, #8
    c230:	cmp	r8, sl
    c234:	blt	c2d0 <ReadUInt16Data.part.13+0x798>
    c238:	sub	r8, r4, #1
    c23c:	lsr	r8, r8, #8
    c240:	lsl	r3, r8, #8
    c244:	cmp	r4, r3
    c248:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c24c:	sub	r4, r4, r3
    c250:	add	r9, sp, #8
    c254:	ldr	r3, [r6]
    c258:	mov	r2, r4
    c25c:	mov	r1, r7
    c260:	mov	r0, r9
    c264:	bl	1588 <fread@plt>
    c268:	add	r8, fp, r8, lsl #9
    c26c:	mov	r6, #0
    c270:	add	r5, r5, r0
    c274:	cmp	r4, r6
    c278:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c27c:	add	r0, r9, r6, lsl #2
    c280:	bl	1a80 <Mat_uint32Swap>
    c284:	add	r6, r6, #1
    c288:	strh	r0, [r8], #2
    c28c:	b	c274 <ReadUInt16Data.part.13+0x73c>
    c290:	add	r9, sp, #8
    c294:	ldr	r3, [r6]
    c298:	mov	r1, r0
    c29c:	mov	r2, r4
    c2a0:	mov	r0, r9
    c2a4:	bl	1588 <fread@plt>
    c2a8:	sub	fp, fp, #2
    c2ac:	mov	r6, #0
    c2b0:	mov	r5, r0
    c2b4:	cmp	r4, r6
    c2b8:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c2bc:	add	r0, r9, r6, lsl #2
    c2c0:	bl	1a80 <Mat_uint32Swap>
    c2c4:	add	r6, r6, #1
    c2c8:	strh	r0, [fp, #2]!
    c2cc:	b	c2b4 <ReadUInt16Data.part.13+0x77c>
    c2d0:	ldr	r3, [r6]
    c2d4:	mov	r2, #256	; 0x100
    c2d8:	mov	r1, r7
    c2dc:	mov	r0, r9
    c2e0:	bl	1588 <fread@plt>
    c2e4:	add	r2, fp, r8, lsl #1
    c2e8:	mov	r3, #0
    c2ec:	add	r5, r5, r0
    c2f0:	add	r0, r9, r3
    c2f4:	str	r2, [sp, #4]
    c2f8:	str	r3, [sp]
    c2fc:	bl	1a80 <Mat_uint32Swap>
    c300:	ldr	r3, [sp]
    c304:	ldr	r2, [sp, #4]
    c308:	add	r3, r3, #4
    c30c:	cmp	r3, #1024	; 0x400
    c310:	strh	r0, [r2], #2
    c314:	bne	c2f0 <ReadUInt16Data.part.13+0x7b8>
    c318:	add	r8, r8, #256	; 0x100
    c31c:	b	c230 <ReadUInt16Data.part.13+0x6f8>
    c320:	cmp	r4, #256	; 0x100
    c324:	ble	c398 <ReadUInt16Data.part.13+0x860>
    c328:	mov	r9, r8
    c32c:	mov	r5, r8
    c330:	add	sl, sp, #8
    c334:	sub	r3, r4, #256	; 0x100
    c338:	str	r3, [sp]
    c33c:	ldr	r3, [sp]
    c340:	cmp	r9, r3
    c344:	blt	c3d0 <ReadUInt16Data.part.13+0x898>
    c348:	sub	r9, r4, #1
    c34c:	lsr	r9, r9, #8
    c350:	lsl	r3, r9, #8
    c354:	cmp	r4, r3
    c358:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c35c:	sub	r4, r4, r3
    c360:	add	sl, sp, #8
    c364:	ldr	r3, [r6]
    c368:	mov	r2, r4
    c36c:	mov	r1, r7
    c370:	mov	r0, sl
    c374:	bl	1588 <fread@plt>
    c378:	add	r9, fp, r9, lsl #9
    c37c:	add	r5, r5, r0
    c380:	cmp	r4, r8
    c384:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c388:	ldr	r3, [sl, r8, lsl #2]
    c38c:	add	r8, r8, #1
    c390:	strh	r3, [r9], #2
    c394:	b	c380 <ReadUInt16Data.part.13+0x848>
    c398:	add	r9, sp, #8
    c39c:	ldr	r3, [r6]
    c3a0:	mov	r1, r0
    c3a4:	mov	r2, r4
    c3a8:	mov	r0, r9
    c3ac:	bl	1588 <fread@plt>
    c3b0:	sub	r3, fp, #2
    c3b4:	mov	r5, r0
    c3b8:	cmp	r4, r8
    c3bc:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c3c0:	ldr	r2, [r9, r8, lsl #2]
    c3c4:	add	r8, r8, #1
    c3c8:	strh	r2, [r3, #2]!
    c3cc:	b	c3b8 <ReadUInt16Data.part.13+0x880>
    c3d0:	ldr	r3, [r6]
    c3d4:	mov	r2, #256	; 0x100
    c3d8:	mov	r1, r7
    c3dc:	mov	r0, sl
    c3e0:	bl	1588 <fread@plt>
    c3e4:	add	r2, fp, r9, lsl #1
    c3e8:	mov	r3, r8
    c3ec:	add	r5, r5, r0
    c3f0:	ldr	r1, [sl, r3, lsl #2]
    c3f4:	add	r3, r3, #1
    c3f8:	cmp	r3, #256	; 0x100
    c3fc:	strh	r1, [r2], #2
    c400:	bne	c3f0 <ReadUInt16Data.part.13+0x8b8>
    c404:	add	r9, r9, #256	; 0x100
    c408:	b	c33c <ReadUInt16Data.part.13+0x804>
    c40c:	ldr	r8, [r6, #20]
    c410:	cmp	r8, #0
    c414:	beq	c520 <ReadUInt16Data.part.13+0x9e8>
    c418:	cmp	r4, #256	; 0x100
    c41c:	ble	c490 <ReadUInt16Data.part.13+0x958>
    c420:	mov	r8, #0
    c424:	mov	r5, r8
    c428:	sub	sl, r4, #256	; 0x100
    c42c:	add	r9, sp, #8
    c430:	cmp	r8, sl
    c434:	blt	c4d0 <ReadUInt16Data.part.13+0x998>
    c438:	sub	r8, r4, #1
    c43c:	lsr	r8, r8, #8
    c440:	lsl	r3, r8, #8
    c444:	cmp	r4, r3
    c448:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c44c:	sub	r4, r4, r3
    c450:	add	r9, sp, #8
    c454:	ldr	r3, [r6]
    c458:	mov	r2, r4
    c45c:	mov	r1, r7
    c460:	mov	r0, r9
    c464:	bl	1588 <fread@plt>
    c468:	add	r8, fp, r8, lsl #9
    c46c:	mov	r6, #0
    c470:	add	r5, r5, r0
    c474:	cmp	r4, r6
    c478:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c47c:	add	r0, r9, r6, lsl #1
    c480:	bl	1adc <Mat_int16Swap>
    c484:	add	r6, r6, #1
    c488:	strh	r0, [r8], #2
    c48c:	b	c474 <ReadUInt16Data.part.13+0x93c>
    c490:	add	r9, sp, #8
    c494:	ldr	r3, [r6]
    c498:	mov	r1, r0
    c49c:	mov	r2, r4
    c4a0:	mov	r0, r9
    c4a4:	bl	1588 <fread@plt>
    c4a8:	sub	fp, fp, #2
    c4ac:	mov	r6, #0
    c4b0:	mov	r5, r0
    c4b4:	cmp	r4, r6
    c4b8:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c4bc:	add	r0, r9, r6, lsl #1
    c4c0:	bl	1adc <Mat_int16Swap>
    c4c4:	add	r6, r6, #1
    c4c8:	strh	r0, [fp, #2]!
    c4cc:	b	c4b4 <ReadUInt16Data.part.13+0x97c>
    c4d0:	ldr	r3, [r6]
    c4d4:	mov	r2, #256	; 0x100
    c4d8:	mov	r1, r7
    c4dc:	mov	r0, r9
    c4e0:	bl	1588 <fread@plt>
    c4e4:	add	r2, fp, r8, lsl #1
    c4e8:	mov	r3, #0
    c4ec:	add	r5, r5, r0
    c4f0:	add	r0, r9, r3
    c4f4:	str	r2, [sp, #4]
    c4f8:	str	r3, [sp]
    c4fc:	bl	1adc <Mat_int16Swap>
    c500:	ldr	r3, [sp]
    c504:	ldr	r2, [sp, #4]
    c508:	strh	r0, [r2, r3]
    c50c:	add	r3, r3, #2
    c510:	cmp	r3, #512	; 0x200
    c514:	bne	c4f0 <ReadUInt16Data.part.13+0x9b8>
    c518:	add	r8, r8, #256	; 0x100
    c51c:	b	c430 <ReadUInt16Data.part.13+0x8f8>
    c520:	cmp	r4, #256	; 0x100
    c524:	ble	c59c <ReadUInt16Data.part.13+0xa64>
    c528:	mov	r9, r8
    c52c:	mov	r5, r8
    c530:	add	sl, sp, #8
    c534:	sub	r3, r4, #256	; 0x100
    c538:	str	r3, [sp]
    c53c:	ldr	r3, [sp]
    c540:	cmp	r9, r3
    c544:	blt	c5d8 <ReadUInt16Data.part.13+0xaa0>
    c548:	sub	r9, r4, #1
    c54c:	lsr	r9, r9, #8
    c550:	lsl	r3, r9, #8
    c554:	cmp	r4, r3
    c558:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c55c:	sub	r4, r4, r3
    c560:	add	sl, sp, #8
    c564:	ldr	r3, [r6]
    c568:	mov	r2, r4
    c56c:	mov	r1, r7
    c570:	mov	r0, sl
    c574:	bl	1588 <fread@plt>
    c578:	add	r9, fp, r9, lsl #9
    c57c:	add	r5, r5, r0
    c580:	cmp	r4, r8
    c584:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c588:	lsl	r3, r8, #1
    c58c:	add	r8, r8, #1
    c590:	ldrh	r3, [sl, r3]
    c594:	strh	r3, [r9], #2
    c598:	b	c580 <ReadUInt16Data.part.13+0xa48>
    c59c:	add	r9, sp, #8
    c5a0:	ldr	r3, [r6]
    c5a4:	mov	r1, r0
    c5a8:	mov	r2, r4
    c5ac:	mov	r0, r9
    c5b0:	bl	1588 <fread@plt>
    c5b4:	sub	r3, fp, #2
    c5b8:	mov	r5, r0
    c5bc:	cmp	r4, r8
    c5c0:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c5c4:	lsl	r2, r8, #1
    c5c8:	add	r8, r8, #1
    c5cc:	ldrh	r2, [r9, r2]
    c5d0:	strh	r2, [r3, #2]!
    c5d4:	b	c5bc <ReadUInt16Data.part.13+0xa84>
    c5d8:	ldr	r3, [r6]
    c5dc:	mov	r2, #256	; 0x100
    c5e0:	mov	r1, r7
    c5e4:	mov	r0, sl
    c5e8:	bl	1588 <fread@plt>
    c5ec:	add	r2, fp, r9, lsl #1
    c5f0:	mov	r3, #0
    c5f4:	add	r5, r5, r0
    c5f8:	ldrh	r1, [sl, r3]
    c5fc:	strh	r1, [r2, r3]
    c600:	add	r3, r3, #2
    c604:	cmp	r3, #512	; 0x200
    c608:	bne	c5f8 <ReadUInt16Data.part.13+0xac0>
    c60c:	add	r9, r9, #256	; 0x100
    c610:	b	c53c <ReadUInt16Data.part.13+0xa04>
    c614:	ldr	r8, [r6, #20]
    c618:	cmp	r8, #0
    c61c:	beq	c728 <ReadUInt16Data.part.13+0xbf0>
    c620:	cmp	r4, #256	; 0x100
    c624:	ble	c698 <ReadUInt16Data.part.13+0xb60>
    c628:	mov	r8, #0
    c62c:	mov	r5, r8
    c630:	sub	sl, r4, #256	; 0x100
    c634:	add	r9, sp, #8
    c638:	cmp	r8, sl
    c63c:	blt	c6d8 <ReadUInt16Data.part.13+0xba0>
    c640:	sub	r8, r4, #1
    c644:	lsr	r8, r8, #8
    c648:	lsl	r3, r8, #8
    c64c:	cmp	r4, r3
    c650:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c654:	sub	r4, r4, r3
    c658:	add	r9, sp, #8
    c65c:	ldr	r3, [r6]
    c660:	mov	r2, r4
    c664:	mov	r1, r7
    c668:	mov	r0, r9
    c66c:	bl	1588 <fread@plt>
    c670:	add	r8, fp, r8, lsl #9
    c674:	mov	r6, #0
    c678:	add	r5, r5, r0
    c67c:	cmp	r4, r6
    c680:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c684:	add	r0, r9, r6, lsl #1
    c688:	bl	1b10 <Mat_uint16Swap>
    c68c:	add	r6, r6, #1
    c690:	strh	r0, [r8], #2
    c694:	b	c67c <ReadUInt16Data.part.13+0xb44>
    c698:	add	r9, sp, #8
    c69c:	ldr	r3, [r6]
    c6a0:	mov	r1, r0
    c6a4:	mov	r2, r4
    c6a8:	mov	r0, r9
    c6ac:	bl	1588 <fread@plt>
    c6b0:	sub	fp, fp, #2
    c6b4:	mov	r6, #0
    c6b8:	mov	r5, r0
    c6bc:	cmp	r4, r6
    c6c0:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c6c4:	add	r0, r9, r6, lsl #1
    c6c8:	bl	1b10 <Mat_uint16Swap>
    c6cc:	add	r6, r6, #1
    c6d0:	strh	r0, [fp, #2]!
    c6d4:	b	c6bc <ReadUInt16Data.part.13+0xb84>
    c6d8:	ldr	r3, [r6]
    c6dc:	mov	r2, #256	; 0x100
    c6e0:	mov	r1, r7
    c6e4:	mov	r0, r9
    c6e8:	bl	1588 <fread@plt>
    c6ec:	add	r2, fp, r8, lsl #1
    c6f0:	mov	r3, #0
    c6f4:	add	r5, r5, r0
    c6f8:	add	r0, r9, r3
    c6fc:	str	r2, [sp, #4]
    c700:	str	r3, [sp]
    c704:	bl	1b10 <Mat_uint16Swap>
    c708:	ldr	r3, [sp]
    c70c:	ldr	r2, [sp, #4]
    c710:	strh	r0, [r2, r3]
    c714:	add	r3, r3, #2
    c718:	cmp	r3, #512	; 0x200
    c71c:	bne	c6f8 <ReadUInt16Data.part.13+0xbc0>
    c720:	add	r8, r8, #256	; 0x100
    c724:	b	c638 <ReadUInt16Data.part.13+0xb00>
    c728:	cmp	r4, #256	; 0x100
    c72c:	ble	c7a4 <ReadUInt16Data.part.13+0xc6c>
    c730:	mov	r9, r8
    c734:	mov	r5, r8
    c738:	add	sl, sp, #8
    c73c:	sub	r3, r4, #256	; 0x100
    c740:	str	r3, [sp]
    c744:	ldr	r3, [sp]
    c748:	cmp	r9, r3
    c74c:	blt	c7e0 <ReadUInt16Data.part.13+0xca8>
    c750:	sub	r9, r4, #1
    c754:	lsr	r9, r9, #8
    c758:	lsl	r3, r9, #8
    c75c:	cmp	r4, r3
    c760:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c764:	sub	r4, r4, r3
    c768:	add	sl, sp, #8
    c76c:	ldr	r3, [r6]
    c770:	mov	r2, r4
    c774:	mov	r1, r7
    c778:	mov	r0, sl
    c77c:	bl	1588 <fread@plt>
    c780:	add	r9, fp, r9, lsl #9
    c784:	add	r5, r5, r0
    c788:	cmp	r4, r8
    c78c:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c790:	lsl	r3, r8, #1
    c794:	add	r8, r8, #1
    c798:	ldrh	r3, [sl, r3]
    c79c:	strh	r3, [r9], #2
    c7a0:	b	c788 <ReadUInt16Data.part.13+0xc50>
    c7a4:	add	r9, sp, #8
    c7a8:	ldr	r3, [r6]
    c7ac:	mov	r1, r0
    c7b0:	mov	r2, r4
    c7b4:	mov	r0, r9
    c7b8:	bl	1588 <fread@plt>
    c7bc:	sub	r3, fp, #2
    c7c0:	mov	r5, r0
    c7c4:	cmp	r4, r8
    c7c8:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c7cc:	lsl	r2, r8, #1
    c7d0:	add	r8, r8, #1
    c7d4:	ldrh	r2, [r9, r2]
    c7d8:	strh	r2, [r3, #2]!
    c7dc:	b	c7c4 <ReadUInt16Data.part.13+0xc8c>
    c7e0:	ldr	r3, [r6]
    c7e4:	mov	r2, #256	; 0x100
    c7e8:	mov	r1, r7
    c7ec:	mov	r0, sl
    c7f0:	bl	1588 <fread@plt>
    c7f4:	add	r2, fp, r9, lsl #1
    c7f8:	mov	r3, #0
    c7fc:	add	r5, r5, r0
    c800:	ldrh	r1, [sl, r3]
    c804:	strh	r1, [r2, r3]
    c808:	add	r3, r3, #2
    c80c:	cmp	r3, #512	; 0x200
    c810:	bne	c800 <ReadUInt16Data.part.13+0xcc8>
    c814:	add	r9, r9, #256	; 0x100
    c818:	b	c744 <ReadUInt16Data.part.13+0xc0c>
    c81c:	cmp	r4, #256	; 0x100
    c820:	ble	c890 <ReadUInt16Data.part.13+0xd58>
    c824:	mov	r8, #0
    c828:	mov	r5, r8
    c82c:	sub	sl, r4, #256	; 0x100
    c830:	add	r9, sp, #8
    c834:	cmp	r8, sl
    c838:	blt	c8cc <ReadUInt16Data.part.13+0xd94>
    c83c:	sub	r8, r4, #1
    c840:	lsr	r8, r8, #8
    c844:	lsl	r3, r8, #8
    c848:	cmp	r4, r3
    c84c:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c850:	sub	r4, r4, r3
    c854:	add	r9, sp, #8
    c858:	ldr	r3, [r6]
    c85c:	mov	r2, r4
    c860:	mov	r1, r7
    c864:	mov	r0, r9
    c868:	bl	1588 <fread@plt>
    c86c:	add	r8, fp, r8, lsl #9
    c870:	mov	r3, #0
    c874:	add	r5, r5, r0
    c878:	cmp	r4, r3
    c87c:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c880:	ldrsb	r2, [r9, r3]
    c884:	add	r3, r3, #1
    c888:	strh	r2, [r8], #2
    c88c:	b	c878 <ReadUInt16Data.part.13+0xd40>
    c890:	add	r8, sp, #8
    c894:	ldr	r3, [r6]
    c898:	mov	r2, r4
    c89c:	mov	r1, r0
    c8a0:	mov	r0, r8
    c8a4:	bl	1588 <fread@plt>
    c8a8:	sub	r2, fp, #2
    c8ac:	mov	r3, #0
    c8b0:	mov	r5, r0
    c8b4:	cmp	r4, r3
    c8b8:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c8bc:	ldrsb	r1, [r8, r3]
    c8c0:	add	r3, r3, #1
    c8c4:	strh	r1, [r2, #2]!
    c8c8:	b	c8b4 <ReadUInt16Data.part.13+0xd7c>
    c8cc:	ldr	r3, [r6]
    c8d0:	mov	r2, #256	; 0x100
    c8d4:	mov	r1, r7
    c8d8:	mov	r0, r9
    c8dc:	bl	1588 <fread@plt>
    c8e0:	add	r2, fp, r8, lsl #1
    c8e4:	mov	r3, #0
    c8e8:	add	r5, r5, r0
    c8ec:	ldrsb	r1, [r9, r3]
    c8f0:	add	r3, r3, #1
    c8f4:	cmp	r3, #256	; 0x100
    c8f8:	strh	r1, [r2], #2
    c8fc:	bne	c8ec <ReadUInt16Data.part.13+0xdb4>
    c900:	add	r8, r8, #256	; 0x100
    c904:	b	c834 <ReadUInt16Data.part.13+0xcfc>
    c908:	cmp	r4, #256	; 0x100
    c90c:	ble	c97c <ReadUInt16Data.part.13+0xe44>
    c910:	mov	r8, #0
    c914:	mov	r5, r8
    c918:	sub	sl, r4, #256	; 0x100
    c91c:	add	r9, sp, #8
    c920:	cmp	r8, sl
    c924:	blt	c9b8 <ReadUInt16Data.part.13+0xe80>
    c928:	sub	r8, r4, #1
    c92c:	lsr	r8, r8, #8
    c930:	lsl	r3, r8, #8
    c934:	cmp	r4, r3
    c938:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c93c:	sub	r4, r4, r3
    c940:	add	r9, sp, #8
    c944:	ldr	r3, [r6]
    c948:	mov	r2, r4
    c94c:	mov	r1, r7
    c950:	mov	r0, r9
    c954:	bl	1588 <fread@plt>
    c958:	add	r8, fp, r8, lsl #9
    c95c:	mov	r3, #0
    c960:	add	r5, r5, r0
    c964:	cmp	r4, r3
    c968:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c96c:	ldrb	r2, [r9, r3]
    c970:	add	r3, r3, #1
    c974:	strh	r2, [r8], #2
    c978:	b	c964 <ReadUInt16Data.part.13+0xe2c>
    c97c:	add	r8, sp, #8
    c980:	ldr	r3, [r6]
    c984:	mov	r2, r4
    c988:	mov	r1, r0
    c98c:	mov	r0, r8
    c990:	bl	1588 <fread@plt>
    c994:	sub	r2, fp, #2
    c998:	mov	r3, #0
    c99c:	mov	r5, r0
    c9a0:	cmp	r4, r3
    c9a4:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    c9a8:	ldrb	r1, [r8, r3]
    c9ac:	add	r3, r3, #1
    c9b0:	strh	r1, [r2, #2]!
    c9b4:	b	c9a0 <ReadUInt16Data.part.13+0xe68>
    c9b8:	ldr	r3, [r6]
    c9bc:	mov	r2, #256	; 0x100
    c9c0:	mov	r1, r7
    c9c4:	mov	r0, r9
    c9c8:	bl	1588 <fread@plt>
    c9cc:	add	r2, fp, r8, lsl #1
    c9d0:	mov	r3, #0
    c9d4:	add	r5, r5, r0
    c9d8:	ldrb	r1, [r9, r3]
    c9dc:	add	r3, r3, #1
    c9e0:	cmp	r3, #256	; 0x100
    c9e4:	strh	r1, [r2], #2
    c9e8:	bne	c9d8 <ReadUInt16Data.part.13+0xea0>
    c9ec:	add	r8, r8, #256	; 0x100
    c9f0:	b	c920 <ReadUInt16Data.part.13+0xde8>
    c9f4:	cmp	r5, #12
    c9f8:	bne	cbfc <ReadUInt16Data.part.13+0x10c4>
    c9fc:	ldr	r8, [r6, #20]
    ca00:	cmp	r8, #0
    ca04:	beq	cb10 <ReadUInt16Data.part.13+0xfd8>
    ca08:	cmp	r4, #256	; 0x100
    ca0c:	ble	ca80 <ReadUInt16Data.part.13+0xf48>
    ca10:	mov	r8, #0
    ca14:	mov	r5, r8
    ca18:	sub	sl, r4, #256	; 0x100
    ca1c:	add	r9, sp, #8
    ca20:	cmp	r8, sl
    ca24:	blt	cac0 <ReadUInt16Data.part.13+0xf88>
    ca28:	sub	r8, r4, #1
    ca2c:	lsr	r8, r8, #8
    ca30:	lsl	r3, r8, #8
    ca34:	cmp	r4, r3
    ca38:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    ca3c:	sub	r4, r4, r3
    ca40:	add	r9, sp, #8
    ca44:	ldr	r3, [r6]
    ca48:	mov	r2, r4
    ca4c:	mov	r1, r7
    ca50:	mov	r0, r9
    ca54:	bl	1588 <fread@plt>
    ca58:	add	r8, fp, r8, lsl #9
    ca5c:	mov	r6, #0
    ca60:	add	r5, r5, r0
    ca64:	cmp	r4, r6
    ca68:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    ca6c:	add	r0, r9, r6, lsl #3
    ca70:	bl	18bc <Mat_int64Swap>
    ca74:	add	r6, r6, #1
    ca78:	strh	r0, [r8], #2
    ca7c:	b	ca64 <ReadUInt16Data.part.13+0xf2c>
    ca80:	add	r9, sp, #8
    ca84:	ldr	r3, [r6]
    ca88:	mov	r1, r0
    ca8c:	mov	r2, r4
    ca90:	mov	r0, r9
    ca94:	bl	1588 <fread@plt>
    ca98:	sub	fp, fp, #2
    ca9c:	mov	r6, #0
    caa0:	mov	r5, r0
    caa4:	cmp	r4, r6
    caa8:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    caac:	add	r0, r9, r6, lsl #3
    cab0:	bl	18bc <Mat_int64Swap>
    cab4:	add	r6, r6, #1
    cab8:	strh	r0, [fp, #2]!
    cabc:	b	caa4 <ReadUInt16Data.part.13+0xf6c>
    cac0:	ldr	r3, [r6]
    cac4:	mov	r2, #256	; 0x100
    cac8:	mov	r1, r7
    cacc:	mov	r0, r9
    cad0:	bl	1588 <fread@plt>
    cad4:	add	r2, fp, r8, lsl #1
    cad8:	mov	r3, #0
    cadc:	add	r5, r5, r0
    cae0:	add	r0, r9, r3
    cae4:	str	r2, [sp, #4]
    cae8:	str	r3, [sp]
    caec:	bl	18bc <Mat_int64Swap>
    caf0:	ldr	r3, [sp]
    caf4:	ldr	r2, [sp, #4]
    caf8:	add	r3, r3, #8
    cafc:	cmp	r3, #2048	; 0x800
    cb00:	strh	r0, [r2], #2
    cb04:	bne	cae0 <ReadUInt16Data.part.13+0xfa8>
    cb08:	add	r8, r8, #256	; 0x100
    cb0c:	b	ca20 <ReadUInt16Data.part.13+0xee8>
    cb10:	cmp	r4, #256	; 0x100
    cb14:	ble	cb88 <ReadUInt16Data.part.13+0x1050>
    cb18:	mov	r9, r8
    cb1c:	mov	r5, r8
    cb20:	add	sl, sp, #8
    cb24:	sub	r3, r4, #256	; 0x100
    cb28:	str	r3, [sp]
    cb2c:	ldr	r3, [sp]
    cb30:	cmp	r9, r3
    cb34:	blt	cbc0 <ReadUInt16Data.part.13+0x1088>
    cb38:	sub	r9, r4, #1
    cb3c:	lsr	r9, r9, #8
    cb40:	lsl	r3, r9, #8
    cb44:	cmp	r4, r3
    cb48:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    cb4c:	sub	r4, r4, r3
    cb50:	add	sl, sp, #8
    cb54:	ldr	r3, [r6]
    cb58:	mov	r2, r4
    cb5c:	mov	r1, r7
    cb60:	mov	r0, sl
    cb64:	bl	1588 <fread@plt>
    cb68:	add	r9, fp, r9, lsl #9
    cb6c:	add	r5, r5, r0
    cb70:	cmp	r4, r8
    cb74:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    cb78:	ldr	r3, [sl, r8, lsl #3]
    cb7c:	add	r8, r8, #1
    cb80:	strh	r3, [r9], #2
    cb84:	b	cb70 <ReadUInt16Data.part.13+0x1038>
    cb88:	add	r9, sp, #8
    cb8c:	ldr	r3, [r6]
    cb90:	mov	r1, r0
    cb94:	mov	r2, r4
    cb98:	mov	r0, r9
    cb9c:	bl	1588 <fread@plt>
    cba0:	sub	r3, fp, #2
    cba4:	mov	r5, r0
    cba8:	cmp	r4, r8
    cbac:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    cbb0:	ldr	r2, [r9, r8, lsl #3]
    cbb4:	add	r8, r8, #1
    cbb8:	strh	r2, [r3, #2]!
    cbbc:	b	cba8 <ReadUInt16Data.part.13+0x1070>
    cbc0:	ldr	r3, [r6]
    cbc4:	mov	r2, #256	; 0x100
    cbc8:	mov	r1, r7
    cbcc:	mov	r0, sl
    cbd0:	bl	1588 <fread@plt>
    cbd4:	add	r2, fp, r9, lsl #1
    cbd8:	mov	r3, #0
    cbdc:	add	r5, r5, r0
    cbe0:	ldr	r1, [sl, r3]
    cbe4:	add	r3, r3, #8
    cbe8:	cmp	r3, #2048	; 0x800
    cbec:	strh	r1, [r2], #2
    cbf0:	bne	cbe0 <ReadUInt16Data.part.13+0x10a8>
    cbf4:	add	r9, r9, #256	; 0x100
    cbf8:	b	cb2c <ReadUInt16Data.part.13+0xff4>
    cbfc:	cmp	r5, #13
    cc00:	movne	r5, #0
    cc04:	bne	bc4c <ReadUInt16Data.part.13+0x114>
    cc08:	ldr	r8, [r6, #20]
    cc0c:	cmp	r8, #0
    cc10:	beq	cd1c <ReadUInt16Data.part.13+0x11e4>
    cc14:	cmp	r4, #256	; 0x100
    cc18:	ble	cc8c <ReadUInt16Data.part.13+0x1154>
    cc1c:	mov	r8, #0
    cc20:	mov	r5, r8
    cc24:	sub	sl, r4, #256	; 0x100
    cc28:	add	r9, sp, #8
    cc2c:	cmp	r8, sl
    cc30:	blt	cccc <ReadUInt16Data.part.13+0x1194>
    cc34:	sub	r8, r4, #1
    cc38:	lsr	r8, r8, #8
    cc3c:	lsl	r3, r8, #8
    cc40:	cmp	r4, r3
    cc44:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    cc48:	sub	r4, r4, r3
    cc4c:	add	r9, sp, #8
    cc50:	ldr	r3, [r6]
    cc54:	mov	r2, r4
    cc58:	mov	r1, r7
    cc5c:	mov	r0, r9
    cc60:	bl	1588 <fread@plt>
    cc64:	add	r8, fp, r8, lsl #9
    cc68:	mov	r6, #0
    cc6c:	add	r5, r5, r0
    cc70:	cmp	r4, r6
    cc74:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    cc78:	add	r0, r9, r6, lsl #3
    cc7c:	bl	1980 <Mat_uint64Swap>
    cc80:	add	r6, r6, #1
    cc84:	strh	r0, [r8], #2
    cc88:	b	cc70 <ReadUInt16Data.part.13+0x1138>
    cc8c:	add	r9, sp, #8
    cc90:	ldr	r3, [r6]
    cc94:	mov	r1, r0
    cc98:	mov	r2, r4
    cc9c:	mov	r0, r9
    cca0:	bl	1588 <fread@plt>
    cca4:	sub	fp, fp, #2
    cca8:	mov	r6, #0
    ccac:	mov	r5, r0
    ccb0:	cmp	r4, r6
    ccb4:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    ccb8:	add	r0, r9, r6, lsl #3
    ccbc:	bl	1980 <Mat_uint64Swap>
    ccc0:	add	r6, r6, #1
    ccc4:	strh	r0, [fp, #2]!
    ccc8:	b	ccb0 <ReadUInt16Data.part.13+0x1178>
    cccc:	ldr	r3, [r6]
    ccd0:	mov	r2, #256	; 0x100
    ccd4:	mov	r1, r7
    ccd8:	mov	r0, r9
    ccdc:	bl	1588 <fread@plt>
    cce0:	add	r2, fp, r8, lsl #1
    cce4:	mov	r3, #0
    cce8:	add	r5, r5, r0
    ccec:	add	r0, r9, r3
    ccf0:	str	r2, [sp, #4]
    ccf4:	str	r3, [sp]
    ccf8:	bl	1980 <Mat_uint64Swap>
    ccfc:	ldr	r3, [sp]
    cd00:	ldr	r2, [sp, #4]
    cd04:	add	r3, r3, #8
    cd08:	cmp	r3, #2048	; 0x800
    cd0c:	strh	r0, [r2], #2
    cd10:	bne	ccec <ReadUInt16Data.part.13+0x11b4>
    cd14:	add	r8, r8, #256	; 0x100
    cd18:	b	cc2c <ReadUInt16Data.part.13+0x10f4>
    cd1c:	cmp	r4, #256	; 0x100
    cd20:	ble	cd94 <ReadUInt16Data.part.13+0x125c>
    cd24:	mov	r9, r8
    cd28:	mov	r5, r8
    cd2c:	add	sl, sp, #8
    cd30:	sub	r3, r4, #256	; 0x100
    cd34:	str	r3, [sp]
    cd38:	ldr	r3, [sp]
    cd3c:	cmp	r9, r3
    cd40:	blt	cdcc <ReadUInt16Data.part.13+0x1294>
    cd44:	sub	r9, r4, #1
    cd48:	lsr	r9, r9, #8
    cd4c:	lsl	r3, r9, #8
    cd50:	cmp	r4, r3
    cd54:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    cd58:	sub	r4, r4, r3
    cd5c:	add	sl, sp, #8
    cd60:	ldr	r3, [r6]
    cd64:	mov	r2, r4
    cd68:	mov	r1, r7
    cd6c:	mov	r0, sl
    cd70:	bl	1588 <fread@plt>
    cd74:	add	r9, fp, r9, lsl #9
    cd78:	add	r5, r5, r0
    cd7c:	cmp	r4, r8
    cd80:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    cd84:	ldr	r3, [sl, r8, lsl #3]
    cd88:	add	r8, r8, #1
    cd8c:	strh	r3, [r9], #2
    cd90:	b	cd7c <ReadUInt16Data.part.13+0x1244>
    cd94:	add	r9, sp, #8
    cd98:	ldr	r3, [r6]
    cd9c:	mov	r1, r0
    cda0:	mov	r2, r4
    cda4:	mov	r0, r9
    cda8:	bl	1588 <fread@plt>
    cdac:	sub	r3, fp, #2
    cdb0:	mov	r5, r0
    cdb4:	cmp	r4, r8
    cdb8:	ble	bc4c <ReadUInt16Data.part.13+0x114>
    cdbc:	ldr	r2, [r9, r8, lsl #3]
    cdc0:	add	r8, r8, #1
    cdc4:	strh	r2, [r3, #2]!
    cdc8:	b	cdb4 <ReadUInt16Data.part.13+0x127c>
    cdcc:	ldr	r3, [r6]
    cdd0:	mov	r2, #256	; 0x100
    cdd4:	mov	r1, r7
    cdd8:	mov	r0, sl
    cddc:	bl	1588 <fread@plt>
    cde0:	add	r2, fp, r9, lsl #1
    cde4:	mov	r3, #0
    cde8:	add	r5, r5, r0
    cdec:	ldr	r1, [sl, r3]
    cdf0:	add	r3, r3, #8
    cdf4:	cmp	r3, #2048	; 0x800
    cdf8:	strh	r1, [r2], #2
    cdfc:	bne	cdec <ReadUInt16Data.part.13+0x12b4>
    ce00:	add	r9, r9, #256	; 0x100
    ce04:	b	cd38 <ReadUInt16Data.part.13+0x1200>

0000ce08 <ReadInt8Data.part.15>:
    ce08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce0c:	sub	sp, sp, #2048	; 0x800
    ce10:	sub	sp, sp, #12
    ce14:	mov	r6, r0
    ce18:	mov	r0, r2
    ce1c:	mov	r5, r2
    ce20:	mov	r4, r3
    ce24:	mov	r7, r1
    ce28:	bl	1600 <Mat_SizeOf@plt>
    ce2c:	sub	r3, r5, #1
    ce30:	mov	fp, r0
    ce34:	cmp	r3, #8
    ce38:	addls	pc, pc, r3, lsl #2
    ce3c:	b	dc6c <ReadInt8Data.part.15+0xe64>
    ce40:	b	daa4 <ReadInt8Data.part.15+0xc9c>
    ce44:	b	db88 <ReadInt8Data.part.15+0xd80>
    ce48:	b	d6ac <ReadInt8Data.part.15+0x8a4>
    ce4c:	b	d8a8 <ReadInt8Data.part.15+0xaa0>
    ce50:	b	d2cc <ReadInt8Data.part.15+0x4c4>
    ce54:	b	d4bc <ReadInt8Data.part.15+0x6b4>
    ce58:	b	d0a0 <ReadInt8Data.part.15+0x298>
    ce5c:	b	dc6c <ReadInt8Data.part.15+0xe64>
    ce60:	b	ce64 <ReadInt8Data.part.15+0x5c>
    ce64:	ldr	r9, [r6, #20]
    ce68:	cmp	r9, #0
    ce6c:	beq	cf98 <ReadInt8Data.part.15+0x190>
    ce70:	cmp	r4, #256	; 0x100
    ce74:	ble	ceec <ReadInt8Data.part.15+0xe4>
    ce78:	mov	r8, #0
    ce7c:	mov	r5, r8
    ce80:	sub	sl, r4, #256	; 0x100
    ce84:	add	r9, sp, #8
    ce88:	cmp	r8, sl
    ce8c:	blt	cf40 <ReadInt8Data.part.15+0x138>
    ce90:	sub	r8, r4, #1
    ce94:	bic	r8, r8, #255	; 0xff
    ce98:	cmp	r4, r8
    ce9c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    cea0:	sub	r4, r4, r8
    cea4:	add	r9, sp, #8
    cea8:	ldr	r3, [r6]
    ceac:	mov	r2, r4
    ceb0:	mov	r1, fp
    ceb4:	mov	r0, r9
    ceb8:	bl	1588 <fread@plt>
    cebc:	mov	r6, #0
    cec0:	add	r7, r7, r8
    cec4:	add	r5, r5, r0
    cec8:	cmp	r4, r6
    cecc:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    ced0:	add	r0, r9, r6, lsl #3
    ced4:	bl	1b88 <Mat_doubleSwap>
    ced8:	vcvt.s32.f64	s15, d0
    cedc:	vmov	r3, s15
    cee0:	strb	r3, [r7, r6]
    cee4:	add	r6, r6, #1
    cee8:	b	cec8 <ReadInt8Data.part.15+0xc0>
    ceec:	add	r8, sp, #8
    cef0:	ldr	r3, [r6]
    cef4:	mov	r1, r0
    cef8:	mov	r2, r4
    cefc:	mov	r0, r8
    cf00:	bl	1588 <fread@plt>
    cf04:	mov	r6, #0
    cf08:	mov	r5, r0
    cf0c:	cmp	r4, r6
    cf10:	bgt	cf24 <ReadInt8Data.part.15+0x11c>
    cf14:	mul	r0, fp, r5
    cf18:	add	sp, sp, #2048	; 0x800
    cf1c:	add	sp, sp, #12
    cf20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf24:	add	r0, r8, r6, lsl #3
    cf28:	bl	1b88 <Mat_doubleSwap>
    cf2c:	vcvt.s32.f64	s15, d0
    cf30:	vmov	r3, s15
    cf34:	strb	r3, [r7, r6]
    cf38:	add	r6, r6, #1
    cf3c:	b	cf0c <ReadInt8Data.part.15+0x104>
    cf40:	ldr	r3, [r6]
    cf44:	mov	r2, #256	; 0x100
    cf48:	mov	r1, fp
    cf4c:	mov	r0, r9
    cf50:	bl	1588 <fread@plt>
    cf54:	add	r2, r7, r8
    cf58:	mov	r3, #0
    cf5c:	add	r5, r5, r0
    cf60:	add	r0, r9, r3
    cf64:	str	r2, [sp, #4]
    cf68:	str	r3, [sp]
    cf6c:	bl	1b88 <Mat_doubleSwap>
    cf70:	ldr	r3, [sp]
    cf74:	ldr	r2, [sp, #4]
    cf78:	add	r3, r3, #8
    cf7c:	cmp	r3, #2048	; 0x800
    cf80:	vcvt.s32.f64	s15, d0
    cf84:	vmov	r1, s15
    cf88:	strb	r1, [r2], #1
    cf8c:	bne	cf60 <ReadInt8Data.part.15+0x158>
    cf90:	add	r8, r8, #256	; 0x100
    cf94:	b	ce88 <ReadInt8Data.part.15+0x80>
    cf98:	cmp	r4, #256	; 0x100
    cf9c:	ble	d018 <ReadInt8Data.part.15+0x210>
    cfa0:	mov	r8, r9
    cfa4:	mov	r5, r9
    cfa8:	add	sl, sp, #8
    cfac:	sub	r3, r4, #256	; 0x100
    cfb0:	str	r3, [sp]
    cfb4:	ldr	r3, [sp]
    cfb8:	cmp	r8, r3
    cfbc:	blt	d058 <ReadInt8Data.part.15+0x250>
    cfc0:	sub	r8, r4, #1
    cfc4:	bic	r8, r8, #255	; 0xff
    cfc8:	cmp	r4, r8
    cfcc:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    cfd0:	ldr	r3, [r6]
    cfd4:	sub	r4, r4, r8
    cfd8:	add	r6, sp, #8
    cfdc:	mov	r2, r4
    cfe0:	mov	r1, fp
    cfe4:	mov	r0, r6
    cfe8:	bl	1588 <fread@plt>
    cfec:	add	r7, r7, r8
    cff0:	mov	r2, r7
    cff4:	add	r5, r5, r0
    cff8:	sub	r3, r7, r2
    cffc:	cmp	r4, r3
    d000:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d004:	vldmia	r6!, {d7}
    d008:	vcvt.s32.f64	s15, d7
    d00c:	vmov	r3, s15
    d010:	strb	r3, [r7], #1
    d014:	b	cff8 <ReadInt8Data.part.15+0x1f0>
    d018:	ldr	r3, [r6]
    d01c:	add	r6, sp, #8
    d020:	mov	r1, r0
    d024:	mov	r2, r4
    d028:	mov	r0, r6
    d02c:	bl	1588 <fread@plt>
    d030:	mov	r3, r7
    d034:	mov	r5, r0
    d038:	sub	r2, r3, r7
    d03c:	cmp	r4, r2
    d040:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d044:	vldmia	r6!, {d7}
    d048:	vcvt.s32.f64	s15, d7
    d04c:	vmov	r2, s15
    d050:	strb	r2, [r3], #1
    d054:	b	d038 <ReadInt8Data.part.15+0x230>
    d058:	ldr	r3, [r6]
    d05c:	mov	r1, fp
    d060:	mov	r2, #256	; 0x100
    d064:	mov	r0, sl
    d068:	bl	1588 <fread@plt>
    d06c:	mov	r1, sl
    d070:	mov	r3, r9
    d074:	add	r5, r5, r0
    d078:	add	r0, r7, r8
    d07c:	vldmia	r1!, {d7}
    d080:	vcvt.s32.f64	s15, d7
    d084:	vmov	r2, s15
    d088:	strb	r2, [r0, r3]
    d08c:	add	r3, r3, #1
    d090:	cmp	r3, #256	; 0x100
    d094:	bne	d07c <ReadInt8Data.part.15+0x274>
    d098:	add	r8, r8, #256	; 0x100
    d09c:	b	cfb4 <ReadInt8Data.part.15+0x1ac>
    d0a0:	ldr	r9, [r6, #20]
    d0a4:	cmp	r9, #0
    d0a8:	beq	d1c4 <ReadInt8Data.part.15+0x3bc>
    d0ac:	cmp	r4, #256	; 0x100
    d0b0:	ble	d128 <ReadInt8Data.part.15+0x320>
    d0b4:	mov	r8, #0
    d0b8:	mov	r5, r8
    d0bc:	sub	sl, r4, #256	; 0x100
    d0c0:	add	r9, sp, #8
    d0c4:	cmp	r8, sl
    d0c8:	blt	d16c <ReadInt8Data.part.15+0x364>
    d0cc:	sub	r8, r4, #1
    d0d0:	bic	r8, r8, #255	; 0xff
    d0d4:	cmp	r4, r8
    d0d8:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d0dc:	sub	r4, r4, r8
    d0e0:	add	r9, sp, #8
    d0e4:	ldr	r3, [r6]
    d0e8:	mov	r2, r4
    d0ec:	mov	r1, fp
    d0f0:	mov	r0, r9
    d0f4:	bl	1588 <fread@plt>
    d0f8:	mov	r6, #0
    d0fc:	add	r7, r7, r8
    d100:	add	r5, r5, r0
    d104:	cmp	r4, r6
    d108:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d10c:	add	r0, r9, r6, lsl #2
    d110:	bl	1b2c <Mat_floatSwap>
    d114:	vcvt.s32.f32	s15, s0
    d118:	vmov	r3, s15
    d11c:	strb	r3, [r7, r6]
    d120:	add	r6, r6, #1
    d124:	b	d104 <ReadInt8Data.part.15+0x2fc>
    d128:	add	r8, sp, #8
    d12c:	ldr	r3, [r6]
    d130:	mov	r1, r0
    d134:	mov	r2, r4
    d138:	mov	r0, r8
    d13c:	bl	1588 <fread@plt>
    d140:	mov	r6, #0
    d144:	mov	r5, r0
    d148:	cmp	r4, r6
    d14c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d150:	add	r0, r8, r6, lsl #2
    d154:	bl	1b2c <Mat_floatSwap>
    d158:	vcvt.s32.f32	s15, s0
    d15c:	vmov	r3, s15
    d160:	strb	r3, [r7, r6]
    d164:	add	r6, r6, #1
    d168:	b	d148 <ReadInt8Data.part.15+0x340>
    d16c:	ldr	r3, [r6]
    d170:	mov	r2, #256	; 0x100
    d174:	mov	r1, fp
    d178:	mov	r0, r9
    d17c:	bl	1588 <fread@plt>
    d180:	add	r2, r7, r8
    d184:	mov	r3, #0
    d188:	add	r5, r5, r0
    d18c:	add	r0, r9, r3
    d190:	str	r2, [sp, #4]
    d194:	str	r3, [sp]
    d198:	bl	1b2c <Mat_floatSwap>
    d19c:	ldr	r3, [sp]
    d1a0:	ldr	r2, [sp, #4]
    d1a4:	add	r3, r3, #4
    d1a8:	cmp	r3, #1024	; 0x400
    d1ac:	vcvt.s32.f32	s15, s0
    d1b0:	vmov	r1, s15
    d1b4:	strb	r1, [r2], #1
    d1b8:	bne	d18c <ReadInt8Data.part.15+0x384>
    d1bc:	add	r8, r8, #256	; 0x100
    d1c0:	b	d0c4 <ReadInt8Data.part.15+0x2bc>
    d1c4:	cmp	r4, #256	; 0x100
    d1c8:	ble	d244 <ReadInt8Data.part.15+0x43c>
    d1cc:	mov	r8, r9
    d1d0:	mov	r5, r9
    d1d4:	add	sl, sp, #8
    d1d8:	sub	r3, r4, #256	; 0x100
    d1dc:	str	r3, [sp]
    d1e0:	ldr	r3, [sp]
    d1e4:	cmp	r8, r3
    d1e8:	blt	d284 <ReadInt8Data.part.15+0x47c>
    d1ec:	sub	r8, r4, #1
    d1f0:	bic	r8, r8, #255	; 0xff
    d1f4:	cmp	r4, r8
    d1f8:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d1fc:	ldr	r3, [r6]
    d200:	sub	r4, r4, r8
    d204:	add	r6, sp, #8
    d208:	mov	r2, r4
    d20c:	mov	r1, fp
    d210:	mov	r0, r6
    d214:	bl	1588 <fread@plt>
    d218:	add	r7, r7, r8
    d21c:	mov	r2, r7
    d220:	add	r5, r5, r0
    d224:	sub	r3, r7, r2
    d228:	cmp	r4, r3
    d22c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d230:	vldmia	r6!, {s15}
    d234:	vcvt.s32.f32	s15, s15
    d238:	vmov	r3, s15
    d23c:	strb	r3, [r7], #1
    d240:	b	d224 <ReadInt8Data.part.15+0x41c>
    d244:	ldr	r3, [r6]
    d248:	add	r6, sp, #8
    d24c:	mov	r1, r0
    d250:	mov	r2, r4
    d254:	mov	r0, r6
    d258:	bl	1588 <fread@plt>
    d25c:	mov	r3, r7
    d260:	mov	r5, r0
    d264:	sub	r2, r3, r7
    d268:	cmp	r4, r2
    d26c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d270:	vldmia	r6!, {s15}
    d274:	vcvt.s32.f32	s15, s15
    d278:	vmov	r2, s15
    d27c:	strb	r2, [r3], #1
    d280:	b	d264 <ReadInt8Data.part.15+0x45c>
    d284:	ldr	r3, [r6]
    d288:	mov	r1, fp
    d28c:	mov	r2, #256	; 0x100
    d290:	mov	r0, sl
    d294:	bl	1588 <fread@plt>
    d298:	mov	r1, sl
    d29c:	mov	r3, r9
    d2a0:	add	r5, r5, r0
    d2a4:	add	r0, r7, r8
    d2a8:	vldmia	r1!, {s15}
    d2ac:	vcvt.s32.f32	s15, s15
    d2b0:	vmov	r2, s15
    d2b4:	strb	r2, [r0, r3]
    d2b8:	add	r3, r3, #1
    d2bc:	cmp	r3, #256	; 0x100
    d2c0:	bne	d2a8 <ReadInt8Data.part.15+0x4a0>
    d2c4:	add	r8, r8, #256	; 0x100
    d2c8:	b	d1e0 <ReadInt8Data.part.15+0x3d8>
    d2cc:	ldr	r8, [r6, #20]
    d2d0:	cmp	r8, #0
    d2d4:	beq	d3d8 <ReadInt8Data.part.15+0x5d0>
    d2d8:	cmp	r4, #256	; 0x100
    d2dc:	ble	d34c <ReadInt8Data.part.15+0x544>
    d2e0:	mov	r8, #0
    d2e4:	mov	r5, r8
    d2e8:	sub	sl, r4, #256	; 0x100
    d2ec:	add	r9, sp, #8
    d2f0:	cmp	r8, sl
    d2f4:	blt	d388 <ReadInt8Data.part.15+0x580>
    d2f8:	sub	r8, r4, #1
    d2fc:	bic	r8, r8, #255	; 0xff
    d300:	cmp	r4, r8
    d304:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d308:	sub	r4, r4, r8
    d30c:	add	r9, sp, #8
    d310:	ldr	r3, [r6]
    d314:	mov	r2, r4
    d318:	mov	r1, fp
    d31c:	mov	r0, r9
    d320:	bl	1588 <fread@plt>
    d324:	mov	r6, #0
    d328:	add	r7, r7, r8
    d32c:	add	r5, r5, r0
    d330:	cmp	r4, r6
    d334:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d338:	add	r0, r9, r6, lsl #2
    d33c:	bl	1a18 <Mat_int32Swap>
    d340:	strb	r0, [r7, r6]
    d344:	add	r6, r6, #1
    d348:	b	d330 <ReadInt8Data.part.15+0x528>
    d34c:	add	r8, sp, #8
    d350:	ldr	r3, [r6]
    d354:	mov	r1, r0
    d358:	mov	r2, r4
    d35c:	mov	r0, r8
    d360:	bl	1588 <fread@plt>
    d364:	mov	r6, #0
    d368:	mov	r5, r0
    d36c:	cmp	r4, r6
    d370:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d374:	add	r0, r8, r6, lsl #2
    d378:	bl	1a18 <Mat_int32Swap>
    d37c:	strb	r0, [r7, r6]
    d380:	add	r6, r6, #1
    d384:	b	d36c <ReadInt8Data.part.15+0x564>
    d388:	ldr	r3, [r6]
    d38c:	mov	r2, #256	; 0x100
    d390:	mov	r1, fp
    d394:	mov	r0, r9
    d398:	bl	1588 <fread@plt>
    d39c:	add	r2, r7, r8
    d3a0:	mov	r3, #0
    d3a4:	add	r5, r5, r0
    d3a8:	add	r0, r9, r3
    d3ac:	str	r2, [sp, #4]
    d3b0:	str	r3, [sp]
    d3b4:	bl	1a18 <Mat_int32Swap>
    d3b8:	ldr	r3, [sp]
    d3bc:	ldr	r2, [sp, #4]
    d3c0:	add	r3, r3, #4
    d3c4:	cmp	r3, #1024	; 0x400
    d3c8:	strb	r0, [r2], #1
    d3cc:	bne	d3a8 <ReadInt8Data.part.15+0x5a0>
    d3d0:	add	r8, r8, #256	; 0x100
    d3d4:	b	d2f0 <ReadInt8Data.part.15+0x4e8>
    d3d8:	cmp	r4, #256	; 0x100
    d3dc:	ble	d44c <ReadInt8Data.part.15+0x644>
    d3e0:	mov	r9, r8
    d3e4:	mov	r5, r8
    d3e8:	add	sl, sp, #8
    d3ec:	sub	r3, r4, #256	; 0x100
    d3f0:	str	r3, [sp]
    d3f4:	ldr	r3, [sp]
    d3f8:	cmp	r9, r3
    d3fc:	blt	d480 <ReadInt8Data.part.15+0x678>
    d400:	sub	r9, r4, #1
    d404:	bic	r9, r9, #255	; 0xff
    d408:	cmp	r4, r9
    d40c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d410:	sub	r4, r4, r9
    d414:	add	sl, sp, #8
    d418:	ldr	r3, [r6]
    d41c:	mov	r2, r4
    d420:	mov	r1, fp
    d424:	mov	r0, sl
    d428:	bl	1588 <fread@plt>
    d42c:	add	r7, r7, r9
    d430:	add	r5, r5, r0
    d434:	cmp	r4, r8
    d438:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d43c:	ldr	r3, [sl, r8, lsl #2]
    d440:	strb	r3, [r7, r8]
    d444:	add	r8, r8, #1
    d448:	b	d434 <ReadInt8Data.part.15+0x62c>
    d44c:	add	r9, sp, #8
    d450:	mov	r1, r0
    d454:	ldr	r3, [r6]
    d458:	mov	r2, r4
    d45c:	mov	r0, r9
    d460:	bl	1588 <fread@plt>
    d464:	mov	r5, r0
    d468:	cmp	r4, r8
    d46c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d470:	ldr	r3, [r9, r8, lsl #2]
    d474:	strb	r3, [r7, r8]
    d478:	add	r8, r8, #1
    d47c:	b	d468 <ReadInt8Data.part.15+0x660>
    d480:	ldr	r3, [r6]
    d484:	mov	r2, #256	; 0x100
    d488:	mov	r1, fp
    d48c:	mov	r0, sl
    d490:	bl	1588 <fread@plt>
    d494:	mov	r3, r8
    d498:	add	r2, r7, r9
    d49c:	add	r5, r5, r0
    d4a0:	ldr	r1, [sl, r3, lsl #2]
    d4a4:	strb	r1, [r2, r3]
    d4a8:	add	r3, r3, #1
    d4ac:	cmp	r3, #256	; 0x100
    d4b0:	bne	d4a0 <ReadInt8Data.part.15+0x698>
    d4b4:	add	r9, r9, #256	; 0x100
    d4b8:	b	d3f4 <ReadInt8Data.part.15+0x5ec>
    d4bc:	ldr	r8, [r6, #20]
    d4c0:	cmp	r8, #0
    d4c4:	beq	d5c8 <ReadInt8Data.part.15+0x7c0>
    d4c8:	cmp	r4, #256	; 0x100
    d4cc:	ble	d53c <ReadInt8Data.part.15+0x734>
    d4d0:	mov	r8, #0
    d4d4:	mov	r5, r8
    d4d8:	sub	sl, r4, #256	; 0x100
    d4dc:	add	r9, sp, #8
    d4e0:	cmp	r8, sl
    d4e4:	blt	d578 <ReadInt8Data.part.15+0x770>
    d4e8:	sub	r8, r4, #1
    d4ec:	bic	r8, r8, #255	; 0xff
    d4f0:	cmp	r4, r8
    d4f4:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d4f8:	sub	r4, r4, r8
    d4fc:	add	r9, sp, #8
    d500:	ldr	r3, [r6]
    d504:	mov	r2, r4
    d508:	mov	r1, fp
    d50c:	mov	r0, r9
    d510:	bl	1588 <fread@plt>
    d514:	mov	r6, #0
    d518:	add	r7, r7, r8
    d51c:	add	r5, r5, r0
    d520:	cmp	r4, r6
    d524:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d528:	add	r0, r9, r6, lsl #2
    d52c:	bl	1a80 <Mat_uint32Swap>
    d530:	strb	r0, [r7, r6]
    d534:	add	r6, r6, #1
    d538:	b	d520 <ReadInt8Data.part.15+0x718>
    d53c:	add	r8, sp, #8
    d540:	ldr	r3, [r6]
    d544:	mov	r1, r0
    d548:	mov	r2, r4
    d54c:	mov	r0, r8
    d550:	bl	1588 <fread@plt>
    d554:	mov	r6, #0
    d558:	mov	r5, r0
    d55c:	cmp	r4, r6
    d560:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d564:	add	r0, r8, r6, lsl #2
    d568:	bl	1a80 <Mat_uint32Swap>
    d56c:	strb	r0, [r7, r6]
    d570:	add	r6, r6, #1
    d574:	b	d55c <ReadInt8Data.part.15+0x754>
    d578:	ldr	r3, [r6]
    d57c:	mov	r2, #256	; 0x100
    d580:	mov	r1, fp
    d584:	mov	r0, r9
    d588:	bl	1588 <fread@plt>
    d58c:	add	r2, r7, r8
    d590:	mov	r3, #0
    d594:	add	r5, r5, r0
    d598:	add	r0, r9, r3
    d59c:	str	r2, [sp, #4]
    d5a0:	str	r3, [sp]
    d5a4:	bl	1a80 <Mat_uint32Swap>
    d5a8:	ldr	r3, [sp]
    d5ac:	ldr	r2, [sp, #4]
    d5b0:	add	r3, r3, #4
    d5b4:	cmp	r3, #1024	; 0x400
    d5b8:	strb	r0, [r2], #1
    d5bc:	bne	d598 <ReadInt8Data.part.15+0x790>
    d5c0:	add	r8, r8, #256	; 0x100
    d5c4:	b	d4e0 <ReadInt8Data.part.15+0x6d8>
    d5c8:	cmp	r4, #256	; 0x100
    d5cc:	ble	d63c <ReadInt8Data.part.15+0x834>
    d5d0:	mov	r9, r8
    d5d4:	mov	r5, r8
    d5d8:	add	sl, sp, #8
    d5dc:	sub	r3, r4, #256	; 0x100
    d5e0:	str	r3, [sp]
    d5e4:	ldr	r3, [sp]
    d5e8:	cmp	r9, r3
    d5ec:	blt	d670 <ReadInt8Data.part.15+0x868>
    d5f0:	sub	r9, r4, #1
    d5f4:	bic	r9, r9, #255	; 0xff
    d5f8:	cmp	r4, r9
    d5fc:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d600:	sub	r4, r4, r9
    d604:	add	sl, sp, #8
    d608:	ldr	r3, [r6]
    d60c:	mov	r2, r4
    d610:	mov	r1, fp
    d614:	mov	r0, sl
    d618:	bl	1588 <fread@plt>
    d61c:	add	r7, r7, r9
    d620:	add	r5, r5, r0
    d624:	cmp	r4, r8
    d628:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d62c:	ldr	r3, [sl, r8, lsl #2]
    d630:	strb	r3, [r7, r8]
    d634:	add	r8, r8, #1
    d638:	b	d624 <ReadInt8Data.part.15+0x81c>
    d63c:	add	r9, sp, #8
    d640:	mov	r1, r0
    d644:	ldr	r3, [r6]
    d648:	mov	r2, r4
    d64c:	mov	r0, r9
    d650:	bl	1588 <fread@plt>
    d654:	mov	r5, r0
    d658:	cmp	r4, r8
    d65c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d660:	ldr	r3, [r9, r8, lsl #2]
    d664:	strb	r3, [r7, r8]
    d668:	add	r8, r8, #1
    d66c:	b	d658 <ReadInt8Data.part.15+0x850>
    d670:	ldr	r3, [r6]
    d674:	mov	r2, #256	; 0x100
    d678:	mov	r1, fp
    d67c:	mov	r0, sl
    d680:	bl	1588 <fread@plt>
    d684:	mov	r3, r8
    d688:	add	r2, r7, r9
    d68c:	add	r5, r5, r0
    d690:	ldr	r1, [sl, r3, lsl #2]
    d694:	strb	r1, [r2, r3]
    d698:	add	r3, r3, #1
    d69c:	cmp	r3, #256	; 0x100
    d6a0:	bne	d690 <ReadInt8Data.part.15+0x888>
    d6a4:	add	r9, r9, #256	; 0x100
    d6a8:	b	d5e4 <ReadInt8Data.part.15+0x7dc>
    d6ac:	ldr	r8, [r6, #20]
    d6b0:	cmp	r8, #0
    d6b4:	beq	d7b8 <ReadInt8Data.part.15+0x9b0>
    d6b8:	cmp	r4, #256	; 0x100
    d6bc:	ble	d72c <ReadInt8Data.part.15+0x924>
    d6c0:	mov	r8, #0
    d6c4:	mov	r5, r8
    d6c8:	sub	sl, r4, #256	; 0x100
    d6cc:	add	r9, sp, #8
    d6d0:	cmp	r8, sl
    d6d4:	blt	d768 <ReadInt8Data.part.15+0x960>
    d6d8:	sub	r8, r4, #1
    d6dc:	bic	r8, r8, #255	; 0xff
    d6e0:	cmp	r4, r8
    d6e4:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d6e8:	sub	r4, r4, r8
    d6ec:	add	r9, sp, #8
    d6f0:	ldr	r3, [r6]
    d6f4:	mov	r2, r4
    d6f8:	mov	r1, fp
    d6fc:	mov	r0, r9
    d700:	bl	1588 <fread@plt>
    d704:	mov	r6, #0
    d708:	add	r7, r7, r8
    d70c:	add	r5, r5, r0
    d710:	cmp	r4, r6
    d714:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d718:	add	r0, r9, r6, lsl #1
    d71c:	bl	1adc <Mat_int16Swap>
    d720:	strb	r0, [r7, r6]
    d724:	add	r6, r6, #1
    d728:	b	d710 <ReadInt8Data.part.15+0x908>
    d72c:	add	r8, sp, #8
    d730:	ldr	r3, [r6]
    d734:	mov	r1, r0
    d738:	mov	r2, r4
    d73c:	mov	r0, r8
    d740:	bl	1588 <fread@plt>
    d744:	mov	r6, #0
    d748:	mov	r5, r0
    d74c:	cmp	r4, r6
    d750:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d754:	add	r0, r8, r6, lsl #1
    d758:	bl	1adc <Mat_int16Swap>
    d75c:	strb	r0, [r7, r6]
    d760:	add	r6, r6, #1
    d764:	b	d74c <ReadInt8Data.part.15+0x944>
    d768:	ldr	r3, [r6]
    d76c:	mov	r2, #256	; 0x100
    d770:	mov	r1, fp
    d774:	mov	r0, r9
    d778:	bl	1588 <fread@plt>
    d77c:	add	r2, r7, r8
    d780:	mov	r3, #0
    d784:	add	r5, r5, r0
    d788:	add	r0, r9, r3
    d78c:	str	r2, [sp, #4]
    d790:	str	r3, [sp]
    d794:	bl	1adc <Mat_int16Swap>
    d798:	ldr	r3, [sp]
    d79c:	ldr	r2, [sp, #4]
    d7a0:	add	r3, r3, #2
    d7a4:	cmp	r3, #512	; 0x200
    d7a8:	strb	r0, [r2], #1
    d7ac:	bne	d788 <ReadInt8Data.part.15+0x980>
    d7b0:	add	r8, r8, #256	; 0x100
    d7b4:	b	d6d0 <ReadInt8Data.part.15+0x8c8>
    d7b8:	cmp	r4, #256	; 0x100
    d7bc:	ble	d830 <ReadInt8Data.part.15+0xa28>
    d7c0:	mov	r9, r8
    d7c4:	mov	r5, r8
    d7c8:	add	sl, sp, #8
    d7cc:	sub	r3, r4, #256	; 0x100
    d7d0:	str	r3, [sp]
    d7d4:	ldr	r3, [sp]
    d7d8:	cmp	r9, r3
    d7dc:	blt	d868 <ReadInt8Data.part.15+0xa60>
    d7e0:	sub	r8, r4, #1
    d7e4:	bic	r8, r8, #255	; 0xff
    d7e8:	cmp	r4, r8
    d7ec:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d7f0:	ldr	r3, [r6]
    d7f4:	sub	r4, r4, r8
    d7f8:	add	r6, sp, #8
    d7fc:	mov	r2, r4
    d800:	mov	r1, fp
    d804:	mov	r0, r6
    d808:	bl	1588 <fread@plt>
    d80c:	add	r7, r7, r8
    d810:	mov	r2, r7
    d814:	add	r5, r5, r0
    d818:	sub	r3, r7, r2
    d81c:	cmp	r4, r3
    d820:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d824:	ldrsh	r3, [r6], #2
    d828:	strb	r3, [r7], #1
    d82c:	b	d818 <ReadInt8Data.part.15+0xa10>
    d830:	add	r9, sp, #8
    d834:	mov	r1, r0
    d838:	ldr	r3, [r6]
    d83c:	mov	r2, r4
    d840:	mov	r0, r9
    d844:	bl	1588 <fread@plt>
    d848:	mov	r5, r0
    d84c:	cmp	r4, r8
    d850:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d854:	lsl	r3, r8, #1
    d858:	ldrh	r3, [r9, r3]
    d85c:	strb	r3, [r7, r8]
    d860:	add	r8, r8, #1
    d864:	b	d84c <ReadInt8Data.part.15+0xa44>
    d868:	ldr	r3, [r6]
    d86c:	mov	r2, #256	; 0x100
    d870:	mov	r1, fp
    d874:	mov	r0, sl
    d878:	bl	1588 <fread@plt>
    d87c:	mov	r3, r8
    d880:	add	r2, r7, r9
    d884:	add	r5, r5, r0
    d888:	lsl	r1, r3, #1
    d88c:	ldrh	r1, [sl, r1]
    d890:	strb	r1, [r2, r3]
    d894:	add	r3, r3, #1
    d898:	cmp	r3, #256	; 0x100
    d89c:	bne	d888 <ReadInt8Data.part.15+0xa80>
    d8a0:	add	r9, r9, #256	; 0x100
    d8a4:	b	d7d4 <ReadInt8Data.part.15+0x9cc>
    d8a8:	ldr	r8, [r6, #20]
    d8ac:	cmp	r8, #0
    d8b0:	beq	d9b4 <ReadInt8Data.part.15+0xbac>
    d8b4:	cmp	r4, #256	; 0x100
    d8b8:	ble	d928 <ReadInt8Data.part.15+0xb20>
    d8bc:	mov	r8, #0
    d8c0:	mov	r5, r8
    d8c4:	sub	sl, r4, #256	; 0x100
    d8c8:	add	r9, sp, #8
    d8cc:	cmp	r8, sl
    d8d0:	blt	d964 <ReadInt8Data.part.15+0xb5c>
    d8d4:	sub	r8, r4, #1
    d8d8:	bic	r8, r8, #255	; 0xff
    d8dc:	cmp	r4, r8
    d8e0:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d8e4:	sub	r4, r4, r8
    d8e8:	add	r9, sp, #8
    d8ec:	ldr	r3, [r6]
    d8f0:	mov	r2, r4
    d8f4:	mov	r1, fp
    d8f8:	mov	r0, r9
    d8fc:	bl	1588 <fread@plt>
    d900:	mov	r6, #0
    d904:	add	r7, r7, r8
    d908:	add	r5, r5, r0
    d90c:	cmp	r4, r6
    d910:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d914:	add	r0, r9, r6, lsl #1
    d918:	bl	1b10 <Mat_uint16Swap>
    d91c:	strb	r0, [r7, r6]
    d920:	add	r6, r6, #1
    d924:	b	d90c <ReadInt8Data.part.15+0xb04>
    d928:	add	r8, sp, #8
    d92c:	ldr	r3, [r6]
    d930:	mov	r1, r0
    d934:	mov	r2, r4
    d938:	mov	r0, r8
    d93c:	bl	1588 <fread@plt>
    d940:	mov	r6, #0
    d944:	mov	r5, r0
    d948:	cmp	r4, r6
    d94c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d950:	add	r0, r8, r6, lsl #1
    d954:	bl	1b10 <Mat_uint16Swap>
    d958:	strb	r0, [r7, r6]
    d95c:	add	r6, r6, #1
    d960:	b	d948 <ReadInt8Data.part.15+0xb40>
    d964:	ldr	r3, [r6]
    d968:	mov	r2, #256	; 0x100
    d96c:	mov	r1, fp
    d970:	mov	r0, r9
    d974:	bl	1588 <fread@plt>
    d978:	add	r2, r7, r8
    d97c:	mov	r3, #0
    d980:	add	r5, r5, r0
    d984:	add	r0, r9, r3
    d988:	str	r2, [sp, #4]
    d98c:	str	r3, [sp]
    d990:	bl	1b10 <Mat_uint16Swap>
    d994:	ldr	r3, [sp]
    d998:	ldr	r2, [sp, #4]
    d99c:	add	r3, r3, #2
    d9a0:	cmp	r3, #512	; 0x200
    d9a4:	strb	r0, [r2], #1
    d9a8:	bne	d984 <ReadInt8Data.part.15+0xb7c>
    d9ac:	add	r8, r8, #256	; 0x100
    d9b0:	b	d8cc <ReadInt8Data.part.15+0xac4>
    d9b4:	cmp	r4, #256	; 0x100
    d9b8:	ble	da2c <ReadInt8Data.part.15+0xc24>
    d9bc:	mov	r9, r8
    d9c0:	mov	r5, r8
    d9c4:	add	sl, sp, #8
    d9c8:	sub	r3, r4, #256	; 0x100
    d9cc:	str	r3, [sp]
    d9d0:	ldr	r3, [sp]
    d9d4:	cmp	r9, r3
    d9d8:	blt	da64 <ReadInt8Data.part.15+0xc5c>
    d9dc:	sub	r8, r4, #1
    d9e0:	bic	r8, r8, #255	; 0xff
    d9e4:	cmp	r4, r8
    d9e8:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    d9ec:	ldr	r3, [r6]
    d9f0:	sub	r4, r4, r8
    d9f4:	add	r6, sp, #8
    d9f8:	mov	r2, r4
    d9fc:	mov	r1, fp
    da00:	mov	r0, r6
    da04:	bl	1588 <fread@plt>
    da08:	add	r7, r7, r8
    da0c:	mov	r2, r7
    da10:	add	r5, r5, r0
    da14:	sub	r3, r7, r2
    da18:	cmp	r4, r3
    da1c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    da20:	ldrh	r3, [r6], #2
    da24:	strb	r3, [r7], #1
    da28:	b	da14 <ReadInt8Data.part.15+0xc0c>
    da2c:	add	r9, sp, #8
    da30:	mov	r1, r0
    da34:	ldr	r3, [r6]
    da38:	mov	r2, r4
    da3c:	mov	r0, r9
    da40:	bl	1588 <fread@plt>
    da44:	mov	r5, r0
    da48:	cmp	r4, r8
    da4c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    da50:	lsl	r3, r8, #1
    da54:	ldrh	r3, [r9, r3]
    da58:	strb	r3, [r7, r8]
    da5c:	add	r8, r8, #1
    da60:	b	da48 <ReadInt8Data.part.15+0xc40>
    da64:	ldr	r3, [r6]
    da68:	mov	r2, #256	; 0x100
    da6c:	mov	r1, fp
    da70:	mov	r0, sl
    da74:	bl	1588 <fread@plt>
    da78:	mov	r3, r8
    da7c:	add	r2, r7, r9
    da80:	add	r5, r5, r0
    da84:	lsl	r1, r3, #1
    da88:	ldrh	r1, [sl, r1]
    da8c:	strb	r1, [r2, r3]
    da90:	add	r3, r3, #1
    da94:	cmp	r3, #256	; 0x100
    da98:	bne	da84 <ReadInt8Data.part.15+0xc7c>
    da9c:	add	r9, r9, #256	; 0x100
    daa0:	b	d9d0 <ReadInt8Data.part.15+0xbc8>
    daa4:	cmp	r4, #256	; 0x100
    daa8:	ble	db14 <ReadInt8Data.part.15+0xd0c>
    daac:	mov	r8, #0
    dab0:	mov	r5, r8
    dab4:	sub	sl, r4, #256	; 0x100
    dab8:	add	r9, sp, #8
    dabc:	cmp	r8, sl
    dac0:	blt	db4c <ReadInt8Data.part.15+0xd44>
    dac4:	sub	r8, r4, #1
    dac8:	bic	r8, r8, #255	; 0xff
    dacc:	cmp	r4, r8
    dad0:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dad4:	sub	r4, r4, r8
    dad8:	add	r9, sp, #8
    dadc:	ldr	r3, [r6]
    dae0:	mov	r2, r4
    dae4:	mov	r1, fp
    dae8:	mov	r0, r9
    daec:	bl	1588 <fread@plt>
    daf0:	add	r7, r7, r8
    daf4:	mov	r3, #0
    daf8:	add	r5, r5, r0
    dafc:	cmp	r4, r3
    db00:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    db04:	ldrb	r2, [r9, r3]
    db08:	strb	r2, [r7, r3]
    db0c:	add	r3, r3, #1
    db10:	b	dafc <ReadInt8Data.part.15+0xcf4>
    db14:	add	r8, sp, #8
    db18:	ldr	r3, [r6]
    db1c:	mov	r1, r0
    db20:	mov	r2, r4
    db24:	mov	r0, r8
    db28:	bl	1588 <fread@plt>
    db2c:	mov	r3, #0
    db30:	mov	r5, r0
    db34:	cmp	r4, r3
    db38:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    db3c:	ldrb	r2, [r8, r3]
    db40:	strb	r2, [r7, r3]
    db44:	add	r3, r3, #1
    db48:	b	db34 <ReadInt8Data.part.15+0xd2c>
    db4c:	ldr	r3, [r6]
    db50:	mov	r2, #256	; 0x100
    db54:	mov	r1, fp
    db58:	mov	r0, r9
    db5c:	bl	1588 <fread@plt>
    db60:	mov	r3, #0
    db64:	add	r2, r7, r8
    db68:	add	r5, r5, r0
    db6c:	ldrb	r1, [r9, r3]
    db70:	strb	r1, [r2, r3]
    db74:	add	r3, r3, #1
    db78:	cmp	r3, #256	; 0x100
    db7c:	bne	db6c <ReadInt8Data.part.15+0xd64>
    db80:	add	r8, r8, #256	; 0x100
    db84:	b	dabc <ReadInt8Data.part.15+0xcb4>
    db88:	cmp	r4, #256	; 0x100
    db8c:	ble	dbf8 <ReadInt8Data.part.15+0xdf0>
    db90:	mov	r8, #0
    db94:	mov	r5, r8
    db98:	sub	sl, r4, #256	; 0x100
    db9c:	add	r9, sp, #8
    dba0:	cmp	r8, sl
    dba4:	blt	dc30 <ReadInt8Data.part.15+0xe28>
    dba8:	sub	r8, r4, #1
    dbac:	bic	r8, r8, #255	; 0xff
    dbb0:	cmp	r4, r8
    dbb4:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dbb8:	sub	r4, r4, r8
    dbbc:	add	r9, sp, #8
    dbc0:	ldr	r3, [r6]
    dbc4:	mov	r2, r4
    dbc8:	mov	r1, fp
    dbcc:	mov	r0, r9
    dbd0:	bl	1588 <fread@plt>
    dbd4:	add	r7, r7, r8
    dbd8:	mov	r3, #0
    dbdc:	add	r5, r5, r0
    dbe0:	cmp	r4, r3
    dbe4:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dbe8:	ldrb	r2, [r9, r3]
    dbec:	strb	r2, [r7, r3]
    dbf0:	add	r3, r3, #1
    dbf4:	b	dbe0 <ReadInt8Data.part.15+0xdd8>
    dbf8:	add	r8, sp, #8
    dbfc:	ldr	r3, [r6]
    dc00:	mov	r1, r0
    dc04:	mov	r2, r4
    dc08:	mov	r0, r8
    dc0c:	bl	1588 <fread@plt>
    dc10:	mov	r3, #0
    dc14:	mov	r5, r0
    dc18:	cmp	r4, r3
    dc1c:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dc20:	ldrb	r2, [r8, r3]
    dc24:	strb	r2, [r7, r3]
    dc28:	add	r3, r3, #1
    dc2c:	b	dc18 <ReadInt8Data.part.15+0xe10>
    dc30:	ldr	r3, [r6]
    dc34:	mov	r2, #256	; 0x100
    dc38:	mov	r1, fp
    dc3c:	mov	r0, r9
    dc40:	bl	1588 <fread@plt>
    dc44:	mov	r3, #0
    dc48:	add	r2, r7, r8
    dc4c:	add	r5, r5, r0
    dc50:	ldrb	r1, [r9, r3]
    dc54:	strb	r1, [r2, r3]
    dc58:	add	r3, r3, #1
    dc5c:	cmp	r3, #256	; 0x100
    dc60:	bne	dc50 <ReadInt8Data.part.15+0xe48>
    dc64:	add	r8, r8, #256	; 0x100
    dc68:	b	dba0 <ReadInt8Data.part.15+0xd98>
    dc6c:	cmp	r5, #12
    dc70:	bne	de68 <ReadInt8Data.part.15+0x1060>
    dc74:	ldr	r8, [r6, #20]
    dc78:	cmp	r8, #0
    dc7c:	beq	dd80 <ReadInt8Data.part.15+0xf78>
    dc80:	cmp	r4, #256	; 0x100
    dc84:	ble	dcf4 <ReadInt8Data.part.15+0xeec>
    dc88:	mov	r8, #0
    dc8c:	mov	r5, r8
    dc90:	sub	sl, r4, #256	; 0x100
    dc94:	add	r9, sp, #8
    dc98:	cmp	r8, sl
    dc9c:	blt	dd30 <ReadInt8Data.part.15+0xf28>
    dca0:	sub	r8, r4, #1
    dca4:	bic	r8, r8, #255	; 0xff
    dca8:	cmp	r4, r8
    dcac:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dcb0:	sub	r4, r4, r8
    dcb4:	add	r9, sp, #8
    dcb8:	ldr	r3, [r6]
    dcbc:	mov	r2, r4
    dcc0:	mov	r1, fp
    dcc4:	mov	r0, r9
    dcc8:	bl	1588 <fread@plt>
    dccc:	mov	r6, #0
    dcd0:	add	r7, r7, r8
    dcd4:	add	r5, r5, r0
    dcd8:	cmp	r4, r6
    dcdc:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dce0:	add	r0, r9, r6, lsl #3
    dce4:	bl	18bc <Mat_int64Swap>
    dce8:	strb	r0, [r7, r6]
    dcec:	add	r6, r6, #1
    dcf0:	b	dcd8 <ReadInt8Data.part.15+0xed0>
    dcf4:	add	r8, sp, #8
    dcf8:	ldr	r3, [r6]
    dcfc:	mov	r1, r0
    dd00:	mov	r2, r4
    dd04:	mov	r0, r8
    dd08:	bl	1588 <fread@plt>
    dd0c:	mov	r6, #0
    dd10:	mov	r5, r0
    dd14:	cmp	r4, r6
    dd18:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dd1c:	add	r0, r8, r6, lsl #3
    dd20:	bl	18bc <Mat_int64Swap>
    dd24:	strb	r0, [r7, r6]
    dd28:	add	r6, r6, #1
    dd2c:	b	dd14 <ReadInt8Data.part.15+0xf0c>
    dd30:	ldr	r3, [r6]
    dd34:	mov	r2, #256	; 0x100
    dd38:	mov	r1, fp
    dd3c:	mov	r0, r9
    dd40:	bl	1588 <fread@plt>
    dd44:	add	r2, r7, r8
    dd48:	mov	r3, #0
    dd4c:	add	r5, r5, r0
    dd50:	add	r0, r9, r3
    dd54:	str	r2, [sp, #4]
    dd58:	str	r3, [sp]
    dd5c:	bl	18bc <Mat_int64Swap>
    dd60:	ldr	r3, [sp]
    dd64:	ldr	r2, [sp, #4]
    dd68:	add	r3, r3, #8
    dd6c:	cmp	r3, #2048	; 0x800
    dd70:	strb	r0, [r2], #1
    dd74:	bne	dd50 <ReadInt8Data.part.15+0xf48>
    dd78:	add	r8, r8, #256	; 0x100
    dd7c:	b	dc98 <ReadInt8Data.part.15+0xe90>
    dd80:	cmp	r4, #256	; 0x100
    dd84:	ble	ddf8 <ReadInt8Data.part.15+0xff0>
    dd88:	mov	r9, r8
    dd8c:	mov	r5, r8
    dd90:	add	sl, sp, #8
    dd94:	sub	r3, r4, #256	; 0x100
    dd98:	str	r3, [sp]
    dd9c:	ldr	r3, [sp]
    dda0:	cmp	r9, r3
    dda4:	blt	de2c <ReadInt8Data.part.15+0x1024>
    dda8:	sub	r8, r4, #1
    ddac:	bic	r8, r8, #255	; 0xff
    ddb0:	cmp	r4, r8
    ddb4:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    ddb8:	ldr	r3, [r6]
    ddbc:	sub	r4, r4, r8
    ddc0:	add	r6, sp, #8
    ddc4:	mov	r2, r4
    ddc8:	mov	r1, fp
    ddcc:	mov	r0, r6
    ddd0:	bl	1588 <fread@plt>
    ddd4:	add	r7, r7, r8
    ddd8:	mov	r2, r7
    dddc:	add	r5, r5, r0
    dde0:	sub	r3, r7, r2
    dde4:	cmp	r4, r3
    dde8:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    ddec:	ldr	r3, [r6], #8
    ddf0:	strb	r3, [r7], #1
    ddf4:	b	dde0 <ReadInt8Data.part.15+0xfd8>
    ddf8:	add	r9, sp, #8
    ddfc:	mov	r1, r0
    de00:	ldr	r3, [r6]
    de04:	mov	r2, r4
    de08:	mov	r0, r9
    de0c:	bl	1588 <fread@plt>
    de10:	mov	r5, r0
    de14:	cmp	r4, r8
    de18:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    de1c:	ldr	r3, [r9, r8, lsl #3]
    de20:	strb	r3, [r7, r8]
    de24:	add	r8, r8, #1
    de28:	b	de14 <ReadInt8Data.part.15+0x100c>
    de2c:	ldr	r3, [r6]
    de30:	mov	r2, #256	; 0x100
    de34:	mov	r1, fp
    de38:	mov	r0, sl
    de3c:	bl	1588 <fread@plt>
    de40:	mov	r3, r8
    de44:	add	r2, r7, r9
    de48:	add	r5, r5, r0
    de4c:	ldr	r1, [sl, r3, lsl #3]
    de50:	strb	r1, [r2, r3]
    de54:	add	r3, r3, #1
    de58:	cmp	r3, #256	; 0x100
    de5c:	bne	de4c <ReadInt8Data.part.15+0x1044>
    de60:	add	r9, r9, #256	; 0x100
    de64:	b	dd9c <ReadInt8Data.part.15+0xf94>
    de68:	cmp	r5, #13
    de6c:	movne	r5, #0
    de70:	bne	cf14 <ReadInt8Data.part.15+0x10c>
    de74:	ldr	r8, [r6, #20]
    de78:	cmp	r8, #0
    de7c:	beq	df80 <ReadInt8Data.part.15+0x1178>
    de80:	cmp	r4, #256	; 0x100
    de84:	ble	def4 <ReadInt8Data.part.15+0x10ec>
    de88:	mov	r8, #0
    de8c:	mov	r5, r8
    de90:	sub	sl, r4, #256	; 0x100
    de94:	add	r9, sp, #8
    de98:	cmp	r8, sl
    de9c:	blt	df30 <ReadInt8Data.part.15+0x1128>
    dea0:	sub	r8, r4, #1
    dea4:	bic	r8, r8, #255	; 0xff
    dea8:	cmp	r4, r8
    deac:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    deb0:	sub	r4, r4, r8
    deb4:	add	r9, sp, #8
    deb8:	ldr	r3, [r6]
    debc:	mov	r2, r4
    dec0:	mov	r1, fp
    dec4:	mov	r0, r9
    dec8:	bl	1588 <fread@plt>
    decc:	mov	r6, #0
    ded0:	add	r7, r7, r8
    ded4:	add	r5, r5, r0
    ded8:	cmp	r4, r6
    dedc:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dee0:	add	r0, r9, r6, lsl #3
    dee4:	bl	1980 <Mat_uint64Swap>
    dee8:	strb	r0, [r7, r6]
    deec:	add	r6, r6, #1
    def0:	b	ded8 <ReadInt8Data.part.15+0x10d0>
    def4:	add	r8, sp, #8
    def8:	ldr	r3, [r6]
    defc:	mov	r1, r0
    df00:	mov	r2, r4
    df04:	mov	r0, r8
    df08:	bl	1588 <fread@plt>
    df0c:	mov	r6, #0
    df10:	mov	r5, r0
    df14:	cmp	r4, r6
    df18:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    df1c:	add	r0, r8, r6, lsl #3
    df20:	bl	1980 <Mat_uint64Swap>
    df24:	strb	r0, [r7, r6]
    df28:	add	r6, r6, #1
    df2c:	b	df14 <ReadInt8Data.part.15+0x110c>
    df30:	ldr	r3, [r6]
    df34:	mov	r2, #256	; 0x100
    df38:	mov	r1, fp
    df3c:	mov	r0, r9
    df40:	bl	1588 <fread@plt>
    df44:	add	r2, r7, r8
    df48:	mov	r3, #0
    df4c:	add	r5, r5, r0
    df50:	add	r0, r9, r3
    df54:	str	r2, [sp, #4]
    df58:	str	r3, [sp]
    df5c:	bl	1980 <Mat_uint64Swap>
    df60:	ldr	r3, [sp]
    df64:	ldr	r2, [sp, #4]
    df68:	add	r3, r3, #8
    df6c:	cmp	r3, #2048	; 0x800
    df70:	strb	r0, [r2], #1
    df74:	bne	df50 <ReadInt8Data.part.15+0x1148>
    df78:	add	r8, r8, #256	; 0x100
    df7c:	b	de98 <ReadInt8Data.part.15+0x1090>
    df80:	cmp	r4, #256	; 0x100
    df84:	ble	dff8 <ReadInt8Data.part.15+0x11f0>
    df88:	mov	r9, r8
    df8c:	mov	r5, r8
    df90:	add	sl, sp, #8
    df94:	sub	r3, r4, #256	; 0x100
    df98:	str	r3, [sp]
    df9c:	ldr	r3, [sp]
    dfa0:	cmp	r9, r3
    dfa4:	blt	e02c <ReadInt8Data.part.15+0x1224>
    dfa8:	sub	r8, r4, #1
    dfac:	bic	r8, r8, #255	; 0xff
    dfb0:	cmp	r4, r8
    dfb4:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dfb8:	ldr	r3, [r6]
    dfbc:	sub	r4, r4, r8
    dfc0:	add	r6, sp, #8
    dfc4:	mov	r2, r4
    dfc8:	mov	r1, fp
    dfcc:	mov	r0, r6
    dfd0:	bl	1588 <fread@plt>
    dfd4:	add	r7, r7, r8
    dfd8:	mov	r2, r7
    dfdc:	add	r5, r5, r0
    dfe0:	sub	r3, r7, r2
    dfe4:	cmp	r4, r3
    dfe8:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    dfec:	ldr	r3, [r6], #8
    dff0:	strb	r3, [r7], #1
    dff4:	b	dfe0 <ReadInt8Data.part.15+0x11d8>
    dff8:	add	r9, sp, #8
    dffc:	mov	r1, r0
    e000:	ldr	r3, [r6]
    e004:	mov	r2, r4
    e008:	mov	r0, r9
    e00c:	bl	1588 <fread@plt>
    e010:	mov	r5, r0
    e014:	cmp	r4, r8
    e018:	ble	cf14 <ReadInt8Data.part.15+0x10c>
    e01c:	ldr	r3, [r9, r8, lsl #3]
    e020:	strb	r3, [r7, r8]
    e024:	add	r8, r8, #1
    e028:	b	e014 <ReadInt8Data.part.15+0x120c>
    e02c:	ldr	r3, [r6]
    e030:	mov	r2, #256	; 0x100
    e034:	mov	r1, fp
    e038:	mov	r0, sl
    e03c:	bl	1588 <fread@plt>
    e040:	mov	r3, r8
    e044:	add	r2, r7, r9
    e048:	add	r5, r5, r0
    e04c:	ldr	r1, [sl, r3, lsl #3]
    e050:	strb	r1, [r2, r3]
    e054:	add	r3, r3, #1
    e058:	cmp	r3, #256	; 0x100
    e05c:	bne	e04c <ReadInt8Data.part.15+0x1244>
    e060:	add	r9, r9, #256	; 0x100
    e064:	b	df9c <ReadInt8Data.part.15+0x1194>

0000e068 <ReadUInt8Data.part.17>:
    e068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e06c:	sub	sp, sp, #2048	; 0x800
    e070:	sub	sp, sp, #12
    e074:	mov	r6, r0
    e078:	mov	r0, r2
    e07c:	mov	r5, r2
    e080:	mov	r4, r3
    e084:	mov	r7, r1
    e088:	bl	1600 <Mat_SizeOf@plt>
    e08c:	sub	r3, r5, #1
    e090:	mov	fp, r0
    e094:	cmp	r3, #8
    e098:	addls	pc, pc, r3, lsl #2
    e09c:	b	eecc <ReadUInt8Data.part.17+0xe64>
    e0a0:	b	ed04 <ReadUInt8Data.part.17+0xc9c>
    e0a4:	b	ede8 <ReadUInt8Data.part.17+0xd80>
    e0a8:	b	e90c <ReadUInt8Data.part.17+0x8a4>
    e0ac:	b	eb08 <ReadUInt8Data.part.17+0xaa0>
    e0b0:	b	e52c <ReadUInt8Data.part.17+0x4c4>
    e0b4:	b	e71c <ReadUInt8Data.part.17+0x6b4>
    e0b8:	b	e300 <ReadUInt8Data.part.17+0x298>
    e0bc:	b	eecc <ReadUInt8Data.part.17+0xe64>
    e0c0:	b	e0c4 <ReadUInt8Data.part.17+0x5c>
    e0c4:	ldr	r9, [r6, #20]
    e0c8:	cmp	r9, #0
    e0cc:	beq	e1f8 <ReadUInt8Data.part.17+0x190>
    e0d0:	cmp	r4, #256	; 0x100
    e0d4:	ble	e14c <ReadUInt8Data.part.17+0xe4>
    e0d8:	mov	r8, #0
    e0dc:	mov	r5, r8
    e0e0:	sub	sl, r4, #256	; 0x100
    e0e4:	add	r9, sp, #8
    e0e8:	cmp	r8, sl
    e0ec:	blt	e1a0 <ReadUInt8Data.part.17+0x138>
    e0f0:	sub	r8, r4, #1
    e0f4:	bic	r8, r8, #255	; 0xff
    e0f8:	cmp	r4, r8
    e0fc:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e100:	sub	r4, r4, r8
    e104:	add	r9, sp, #8
    e108:	ldr	r3, [r6]
    e10c:	mov	r2, r4
    e110:	mov	r1, fp
    e114:	mov	r0, r9
    e118:	bl	1588 <fread@plt>
    e11c:	mov	r6, #0
    e120:	add	r7, r7, r8
    e124:	add	r5, r5, r0
    e128:	cmp	r4, r6
    e12c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e130:	add	r0, r9, r6, lsl #3
    e134:	bl	1b88 <Mat_doubleSwap>
    e138:	vcvt.u32.f64	s15, d0
    e13c:	vmov	r3, s15
    e140:	strb	r3, [r7, r6]
    e144:	add	r6, r6, #1
    e148:	b	e128 <ReadUInt8Data.part.17+0xc0>
    e14c:	add	r8, sp, #8
    e150:	ldr	r3, [r6]
    e154:	mov	r1, r0
    e158:	mov	r2, r4
    e15c:	mov	r0, r8
    e160:	bl	1588 <fread@plt>
    e164:	mov	r6, #0
    e168:	mov	r5, r0
    e16c:	cmp	r4, r6
    e170:	bgt	e184 <ReadUInt8Data.part.17+0x11c>
    e174:	mul	r0, fp, r5
    e178:	add	sp, sp, #2048	; 0x800
    e17c:	add	sp, sp, #12
    e180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e184:	add	r0, r8, r6, lsl #3
    e188:	bl	1b88 <Mat_doubleSwap>
    e18c:	vcvt.u32.f64	s15, d0
    e190:	vmov	r3, s15
    e194:	strb	r3, [r7, r6]
    e198:	add	r6, r6, #1
    e19c:	b	e16c <ReadUInt8Data.part.17+0x104>
    e1a0:	ldr	r3, [r6]
    e1a4:	mov	r2, #256	; 0x100
    e1a8:	mov	r1, fp
    e1ac:	mov	r0, r9
    e1b0:	bl	1588 <fread@plt>
    e1b4:	add	r2, r7, r8
    e1b8:	mov	r3, #0
    e1bc:	add	r5, r5, r0
    e1c0:	add	r0, r9, r3
    e1c4:	str	r2, [sp, #4]
    e1c8:	str	r3, [sp]
    e1cc:	bl	1b88 <Mat_doubleSwap>
    e1d0:	ldr	r3, [sp]
    e1d4:	ldr	r2, [sp, #4]
    e1d8:	add	r3, r3, #8
    e1dc:	cmp	r3, #2048	; 0x800
    e1e0:	vcvt.u32.f64	s15, d0
    e1e4:	vmov	r1, s15
    e1e8:	strb	r1, [r2], #1
    e1ec:	bne	e1c0 <ReadUInt8Data.part.17+0x158>
    e1f0:	add	r8, r8, #256	; 0x100
    e1f4:	b	e0e8 <ReadUInt8Data.part.17+0x80>
    e1f8:	cmp	r4, #256	; 0x100
    e1fc:	ble	e278 <ReadUInt8Data.part.17+0x210>
    e200:	mov	r8, r9
    e204:	mov	r5, r9
    e208:	add	sl, sp, #8
    e20c:	sub	r3, r4, #256	; 0x100
    e210:	str	r3, [sp]
    e214:	ldr	r3, [sp]
    e218:	cmp	r8, r3
    e21c:	blt	e2b8 <ReadUInt8Data.part.17+0x250>
    e220:	sub	r8, r4, #1
    e224:	bic	r8, r8, #255	; 0xff
    e228:	cmp	r4, r8
    e22c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e230:	ldr	r3, [r6]
    e234:	sub	r4, r4, r8
    e238:	add	r6, sp, #8
    e23c:	mov	r2, r4
    e240:	mov	r1, fp
    e244:	mov	r0, r6
    e248:	bl	1588 <fread@plt>
    e24c:	add	r7, r7, r8
    e250:	mov	r2, r7
    e254:	add	r5, r5, r0
    e258:	sub	r3, r7, r2
    e25c:	cmp	r4, r3
    e260:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e264:	vldmia	r6!, {d7}
    e268:	vcvt.u32.f64	s15, d7
    e26c:	vmov	r3, s15
    e270:	strb	r3, [r7], #1
    e274:	b	e258 <ReadUInt8Data.part.17+0x1f0>
    e278:	ldr	r3, [r6]
    e27c:	add	r6, sp, #8
    e280:	mov	r1, r0
    e284:	mov	r2, r4
    e288:	mov	r0, r6
    e28c:	bl	1588 <fread@plt>
    e290:	mov	r3, r7
    e294:	mov	r5, r0
    e298:	sub	r2, r3, r7
    e29c:	cmp	r4, r2
    e2a0:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e2a4:	vldmia	r6!, {d7}
    e2a8:	vcvt.u32.f64	s15, d7
    e2ac:	vmov	r2, s15
    e2b0:	strb	r2, [r3], #1
    e2b4:	b	e298 <ReadUInt8Data.part.17+0x230>
    e2b8:	ldr	r3, [r6]
    e2bc:	mov	r1, fp
    e2c0:	mov	r2, #256	; 0x100
    e2c4:	mov	r0, sl
    e2c8:	bl	1588 <fread@plt>
    e2cc:	mov	r1, sl
    e2d0:	mov	r3, r9
    e2d4:	add	r5, r5, r0
    e2d8:	add	r0, r7, r8
    e2dc:	vldmia	r1!, {d7}
    e2e0:	vcvt.u32.f64	s15, d7
    e2e4:	vmov	r2, s15
    e2e8:	strb	r2, [r0, r3]
    e2ec:	add	r3, r3, #1
    e2f0:	cmp	r3, #256	; 0x100
    e2f4:	bne	e2dc <ReadUInt8Data.part.17+0x274>
    e2f8:	add	r8, r8, #256	; 0x100
    e2fc:	b	e214 <ReadUInt8Data.part.17+0x1ac>
    e300:	ldr	r9, [r6, #20]
    e304:	cmp	r9, #0
    e308:	beq	e424 <ReadUInt8Data.part.17+0x3bc>
    e30c:	cmp	r4, #256	; 0x100
    e310:	ble	e388 <ReadUInt8Data.part.17+0x320>
    e314:	mov	r8, #0
    e318:	mov	r5, r8
    e31c:	sub	sl, r4, #256	; 0x100
    e320:	add	r9, sp, #8
    e324:	cmp	r8, sl
    e328:	blt	e3cc <ReadUInt8Data.part.17+0x364>
    e32c:	sub	r8, r4, #1
    e330:	bic	r8, r8, #255	; 0xff
    e334:	cmp	r4, r8
    e338:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e33c:	sub	r4, r4, r8
    e340:	add	r9, sp, #8
    e344:	ldr	r3, [r6]
    e348:	mov	r2, r4
    e34c:	mov	r1, fp
    e350:	mov	r0, r9
    e354:	bl	1588 <fread@plt>
    e358:	mov	r6, #0
    e35c:	add	r7, r7, r8
    e360:	add	r5, r5, r0
    e364:	cmp	r4, r6
    e368:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e36c:	add	r0, r9, r6, lsl #2
    e370:	bl	1b2c <Mat_floatSwap>
    e374:	vcvt.u32.f32	s15, s0
    e378:	vmov	r3, s15
    e37c:	strb	r3, [r7, r6]
    e380:	add	r6, r6, #1
    e384:	b	e364 <ReadUInt8Data.part.17+0x2fc>
    e388:	add	r8, sp, #8
    e38c:	ldr	r3, [r6]
    e390:	mov	r1, r0
    e394:	mov	r2, r4
    e398:	mov	r0, r8
    e39c:	bl	1588 <fread@plt>
    e3a0:	mov	r6, #0
    e3a4:	mov	r5, r0
    e3a8:	cmp	r4, r6
    e3ac:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e3b0:	add	r0, r8, r6, lsl #2
    e3b4:	bl	1b2c <Mat_floatSwap>
    e3b8:	vcvt.u32.f32	s15, s0
    e3bc:	vmov	r3, s15
    e3c0:	strb	r3, [r7, r6]
    e3c4:	add	r6, r6, #1
    e3c8:	b	e3a8 <ReadUInt8Data.part.17+0x340>
    e3cc:	ldr	r3, [r6]
    e3d0:	mov	r2, #256	; 0x100
    e3d4:	mov	r1, fp
    e3d8:	mov	r0, r9
    e3dc:	bl	1588 <fread@plt>
    e3e0:	add	r2, r7, r8
    e3e4:	mov	r3, #0
    e3e8:	add	r5, r5, r0
    e3ec:	add	r0, r9, r3
    e3f0:	str	r2, [sp, #4]
    e3f4:	str	r3, [sp]
    e3f8:	bl	1b2c <Mat_floatSwap>
    e3fc:	ldr	r3, [sp]
    e400:	ldr	r2, [sp, #4]
    e404:	add	r3, r3, #4
    e408:	cmp	r3, #1024	; 0x400
    e40c:	vcvt.u32.f32	s15, s0
    e410:	vmov	r1, s15
    e414:	strb	r1, [r2], #1
    e418:	bne	e3ec <ReadUInt8Data.part.17+0x384>
    e41c:	add	r8, r8, #256	; 0x100
    e420:	b	e324 <ReadUInt8Data.part.17+0x2bc>
    e424:	cmp	r4, #256	; 0x100
    e428:	ble	e4a4 <ReadUInt8Data.part.17+0x43c>
    e42c:	mov	r8, r9
    e430:	mov	r5, r9
    e434:	add	sl, sp, #8
    e438:	sub	r3, r4, #256	; 0x100
    e43c:	str	r3, [sp]
    e440:	ldr	r3, [sp]
    e444:	cmp	r8, r3
    e448:	blt	e4e4 <ReadUInt8Data.part.17+0x47c>
    e44c:	sub	r8, r4, #1
    e450:	bic	r8, r8, #255	; 0xff
    e454:	cmp	r4, r8
    e458:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e45c:	ldr	r3, [r6]
    e460:	sub	r4, r4, r8
    e464:	add	r6, sp, #8
    e468:	mov	r2, r4
    e46c:	mov	r1, fp
    e470:	mov	r0, r6
    e474:	bl	1588 <fread@plt>
    e478:	add	r7, r7, r8
    e47c:	mov	r2, r7
    e480:	add	r5, r5, r0
    e484:	sub	r3, r7, r2
    e488:	cmp	r4, r3
    e48c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e490:	vldmia	r6!, {s15}
    e494:	vcvt.u32.f32	s15, s15
    e498:	vmov	r3, s15
    e49c:	strb	r3, [r7], #1
    e4a0:	b	e484 <ReadUInt8Data.part.17+0x41c>
    e4a4:	ldr	r3, [r6]
    e4a8:	add	r6, sp, #8
    e4ac:	mov	r1, r0
    e4b0:	mov	r2, r4
    e4b4:	mov	r0, r6
    e4b8:	bl	1588 <fread@plt>
    e4bc:	mov	r3, r7
    e4c0:	mov	r5, r0
    e4c4:	sub	r2, r3, r7
    e4c8:	cmp	r4, r2
    e4cc:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e4d0:	vldmia	r6!, {s15}
    e4d4:	vcvt.u32.f32	s15, s15
    e4d8:	vmov	r2, s15
    e4dc:	strb	r2, [r3], #1
    e4e0:	b	e4c4 <ReadUInt8Data.part.17+0x45c>
    e4e4:	ldr	r3, [r6]
    e4e8:	mov	r1, fp
    e4ec:	mov	r2, #256	; 0x100
    e4f0:	mov	r0, sl
    e4f4:	bl	1588 <fread@plt>
    e4f8:	mov	r1, sl
    e4fc:	mov	r3, r9
    e500:	add	r5, r5, r0
    e504:	add	r0, r7, r8
    e508:	vldmia	r1!, {s15}
    e50c:	vcvt.u32.f32	s15, s15
    e510:	vmov	r2, s15
    e514:	strb	r2, [r0, r3]
    e518:	add	r3, r3, #1
    e51c:	cmp	r3, #256	; 0x100
    e520:	bne	e508 <ReadUInt8Data.part.17+0x4a0>
    e524:	add	r8, r8, #256	; 0x100
    e528:	b	e440 <ReadUInt8Data.part.17+0x3d8>
    e52c:	ldr	r8, [r6, #20]
    e530:	cmp	r8, #0
    e534:	beq	e638 <ReadUInt8Data.part.17+0x5d0>
    e538:	cmp	r4, #256	; 0x100
    e53c:	ble	e5ac <ReadUInt8Data.part.17+0x544>
    e540:	mov	r8, #0
    e544:	mov	r5, r8
    e548:	sub	sl, r4, #256	; 0x100
    e54c:	add	r9, sp, #8
    e550:	cmp	r8, sl
    e554:	blt	e5e8 <ReadUInt8Data.part.17+0x580>
    e558:	sub	r8, r4, #1
    e55c:	bic	r8, r8, #255	; 0xff
    e560:	cmp	r4, r8
    e564:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e568:	sub	r4, r4, r8
    e56c:	add	r9, sp, #8
    e570:	ldr	r3, [r6]
    e574:	mov	r2, r4
    e578:	mov	r1, fp
    e57c:	mov	r0, r9
    e580:	bl	1588 <fread@plt>
    e584:	mov	r6, #0
    e588:	add	r7, r7, r8
    e58c:	add	r5, r5, r0
    e590:	cmp	r4, r6
    e594:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e598:	add	r0, r9, r6, lsl #2
    e59c:	bl	1a18 <Mat_int32Swap>
    e5a0:	strb	r0, [r7, r6]
    e5a4:	add	r6, r6, #1
    e5a8:	b	e590 <ReadUInt8Data.part.17+0x528>
    e5ac:	add	r8, sp, #8
    e5b0:	ldr	r3, [r6]
    e5b4:	mov	r1, r0
    e5b8:	mov	r2, r4
    e5bc:	mov	r0, r8
    e5c0:	bl	1588 <fread@plt>
    e5c4:	mov	r6, #0
    e5c8:	mov	r5, r0
    e5cc:	cmp	r4, r6
    e5d0:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e5d4:	add	r0, r8, r6, lsl #2
    e5d8:	bl	1a18 <Mat_int32Swap>
    e5dc:	strb	r0, [r7, r6]
    e5e0:	add	r6, r6, #1
    e5e4:	b	e5cc <ReadUInt8Data.part.17+0x564>
    e5e8:	ldr	r3, [r6]
    e5ec:	mov	r2, #256	; 0x100
    e5f0:	mov	r1, fp
    e5f4:	mov	r0, r9
    e5f8:	bl	1588 <fread@plt>
    e5fc:	add	r2, r7, r8
    e600:	mov	r3, #0
    e604:	add	r5, r5, r0
    e608:	add	r0, r9, r3
    e60c:	str	r2, [sp, #4]
    e610:	str	r3, [sp]
    e614:	bl	1a18 <Mat_int32Swap>
    e618:	ldr	r3, [sp]
    e61c:	ldr	r2, [sp, #4]
    e620:	add	r3, r3, #4
    e624:	cmp	r3, #1024	; 0x400
    e628:	strb	r0, [r2], #1
    e62c:	bne	e608 <ReadUInt8Data.part.17+0x5a0>
    e630:	add	r8, r8, #256	; 0x100
    e634:	b	e550 <ReadUInt8Data.part.17+0x4e8>
    e638:	cmp	r4, #256	; 0x100
    e63c:	ble	e6ac <ReadUInt8Data.part.17+0x644>
    e640:	mov	r9, r8
    e644:	mov	r5, r8
    e648:	add	sl, sp, #8
    e64c:	sub	r3, r4, #256	; 0x100
    e650:	str	r3, [sp]
    e654:	ldr	r3, [sp]
    e658:	cmp	r9, r3
    e65c:	blt	e6e0 <ReadUInt8Data.part.17+0x678>
    e660:	sub	r9, r4, #1
    e664:	bic	r9, r9, #255	; 0xff
    e668:	cmp	r4, r9
    e66c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e670:	sub	r4, r4, r9
    e674:	add	sl, sp, #8
    e678:	ldr	r3, [r6]
    e67c:	mov	r2, r4
    e680:	mov	r1, fp
    e684:	mov	r0, sl
    e688:	bl	1588 <fread@plt>
    e68c:	add	r7, r7, r9
    e690:	add	r5, r5, r0
    e694:	cmp	r4, r8
    e698:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e69c:	ldr	r3, [sl, r8, lsl #2]
    e6a0:	strb	r3, [r7, r8]
    e6a4:	add	r8, r8, #1
    e6a8:	b	e694 <ReadUInt8Data.part.17+0x62c>
    e6ac:	add	r9, sp, #8
    e6b0:	mov	r1, r0
    e6b4:	ldr	r3, [r6]
    e6b8:	mov	r2, r4
    e6bc:	mov	r0, r9
    e6c0:	bl	1588 <fread@plt>
    e6c4:	mov	r5, r0
    e6c8:	cmp	r4, r8
    e6cc:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e6d0:	ldr	r3, [r9, r8, lsl #2]
    e6d4:	strb	r3, [r7, r8]
    e6d8:	add	r8, r8, #1
    e6dc:	b	e6c8 <ReadUInt8Data.part.17+0x660>
    e6e0:	ldr	r3, [r6]
    e6e4:	mov	r2, #256	; 0x100
    e6e8:	mov	r1, fp
    e6ec:	mov	r0, sl
    e6f0:	bl	1588 <fread@plt>
    e6f4:	mov	r3, r8
    e6f8:	add	r2, r7, r9
    e6fc:	add	r5, r5, r0
    e700:	ldr	r1, [sl, r3, lsl #2]
    e704:	strb	r1, [r2, r3]
    e708:	add	r3, r3, #1
    e70c:	cmp	r3, #256	; 0x100
    e710:	bne	e700 <ReadUInt8Data.part.17+0x698>
    e714:	add	r9, r9, #256	; 0x100
    e718:	b	e654 <ReadUInt8Data.part.17+0x5ec>
    e71c:	ldr	r8, [r6, #20]
    e720:	cmp	r8, #0
    e724:	beq	e828 <ReadUInt8Data.part.17+0x7c0>
    e728:	cmp	r4, #256	; 0x100
    e72c:	ble	e79c <ReadUInt8Data.part.17+0x734>
    e730:	mov	r8, #0
    e734:	mov	r5, r8
    e738:	sub	sl, r4, #256	; 0x100
    e73c:	add	r9, sp, #8
    e740:	cmp	r8, sl
    e744:	blt	e7d8 <ReadUInt8Data.part.17+0x770>
    e748:	sub	r8, r4, #1
    e74c:	bic	r8, r8, #255	; 0xff
    e750:	cmp	r4, r8
    e754:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e758:	sub	r4, r4, r8
    e75c:	add	r9, sp, #8
    e760:	ldr	r3, [r6]
    e764:	mov	r2, r4
    e768:	mov	r1, fp
    e76c:	mov	r0, r9
    e770:	bl	1588 <fread@plt>
    e774:	mov	r6, #0
    e778:	add	r7, r7, r8
    e77c:	add	r5, r5, r0
    e780:	cmp	r4, r6
    e784:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e788:	add	r0, r9, r6, lsl #2
    e78c:	bl	1a80 <Mat_uint32Swap>
    e790:	strb	r0, [r7, r6]
    e794:	add	r6, r6, #1
    e798:	b	e780 <ReadUInt8Data.part.17+0x718>
    e79c:	add	r8, sp, #8
    e7a0:	ldr	r3, [r6]
    e7a4:	mov	r1, r0
    e7a8:	mov	r2, r4
    e7ac:	mov	r0, r8
    e7b0:	bl	1588 <fread@plt>
    e7b4:	mov	r6, #0
    e7b8:	mov	r5, r0
    e7bc:	cmp	r4, r6
    e7c0:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e7c4:	add	r0, r8, r6, lsl #2
    e7c8:	bl	1a80 <Mat_uint32Swap>
    e7cc:	strb	r0, [r7, r6]
    e7d0:	add	r6, r6, #1
    e7d4:	b	e7bc <ReadUInt8Data.part.17+0x754>
    e7d8:	ldr	r3, [r6]
    e7dc:	mov	r2, #256	; 0x100
    e7e0:	mov	r1, fp
    e7e4:	mov	r0, r9
    e7e8:	bl	1588 <fread@plt>
    e7ec:	add	r2, r7, r8
    e7f0:	mov	r3, #0
    e7f4:	add	r5, r5, r0
    e7f8:	add	r0, r9, r3
    e7fc:	str	r2, [sp, #4]
    e800:	str	r3, [sp]
    e804:	bl	1a80 <Mat_uint32Swap>
    e808:	ldr	r3, [sp]
    e80c:	ldr	r2, [sp, #4]
    e810:	add	r3, r3, #4
    e814:	cmp	r3, #1024	; 0x400
    e818:	strb	r0, [r2], #1
    e81c:	bne	e7f8 <ReadUInt8Data.part.17+0x790>
    e820:	add	r8, r8, #256	; 0x100
    e824:	b	e740 <ReadUInt8Data.part.17+0x6d8>
    e828:	cmp	r4, #256	; 0x100
    e82c:	ble	e89c <ReadUInt8Data.part.17+0x834>
    e830:	mov	r9, r8
    e834:	mov	r5, r8
    e838:	add	sl, sp, #8
    e83c:	sub	r3, r4, #256	; 0x100
    e840:	str	r3, [sp]
    e844:	ldr	r3, [sp]
    e848:	cmp	r9, r3
    e84c:	blt	e8d0 <ReadUInt8Data.part.17+0x868>
    e850:	sub	r9, r4, #1
    e854:	bic	r9, r9, #255	; 0xff
    e858:	cmp	r4, r9
    e85c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e860:	sub	r4, r4, r9
    e864:	add	sl, sp, #8
    e868:	ldr	r3, [r6]
    e86c:	mov	r2, r4
    e870:	mov	r1, fp
    e874:	mov	r0, sl
    e878:	bl	1588 <fread@plt>
    e87c:	add	r7, r7, r9
    e880:	add	r5, r5, r0
    e884:	cmp	r4, r8
    e888:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e88c:	ldr	r3, [sl, r8, lsl #2]
    e890:	strb	r3, [r7, r8]
    e894:	add	r8, r8, #1
    e898:	b	e884 <ReadUInt8Data.part.17+0x81c>
    e89c:	add	r9, sp, #8
    e8a0:	mov	r1, r0
    e8a4:	ldr	r3, [r6]
    e8a8:	mov	r2, r4
    e8ac:	mov	r0, r9
    e8b0:	bl	1588 <fread@plt>
    e8b4:	mov	r5, r0
    e8b8:	cmp	r4, r8
    e8bc:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e8c0:	ldr	r3, [r9, r8, lsl #2]
    e8c4:	strb	r3, [r7, r8]
    e8c8:	add	r8, r8, #1
    e8cc:	b	e8b8 <ReadUInt8Data.part.17+0x850>
    e8d0:	ldr	r3, [r6]
    e8d4:	mov	r2, #256	; 0x100
    e8d8:	mov	r1, fp
    e8dc:	mov	r0, sl
    e8e0:	bl	1588 <fread@plt>
    e8e4:	mov	r3, r8
    e8e8:	add	r2, r7, r9
    e8ec:	add	r5, r5, r0
    e8f0:	ldr	r1, [sl, r3, lsl #2]
    e8f4:	strb	r1, [r2, r3]
    e8f8:	add	r3, r3, #1
    e8fc:	cmp	r3, #256	; 0x100
    e900:	bne	e8f0 <ReadUInt8Data.part.17+0x888>
    e904:	add	r9, r9, #256	; 0x100
    e908:	b	e844 <ReadUInt8Data.part.17+0x7dc>
    e90c:	ldr	r8, [r6, #20]
    e910:	cmp	r8, #0
    e914:	beq	ea18 <ReadUInt8Data.part.17+0x9b0>
    e918:	cmp	r4, #256	; 0x100
    e91c:	ble	e98c <ReadUInt8Data.part.17+0x924>
    e920:	mov	r8, #0
    e924:	mov	r5, r8
    e928:	sub	sl, r4, #256	; 0x100
    e92c:	add	r9, sp, #8
    e930:	cmp	r8, sl
    e934:	blt	e9c8 <ReadUInt8Data.part.17+0x960>
    e938:	sub	r8, r4, #1
    e93c:	bic	r8, r8, #255	; 0xff
    e940:	cmp	r4, r8
    e944:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e948:	sub	r4, r4, r8
    e94c:	add	r9, sp, #8
    e950:	ldr	r3, [r6]
    e954:	mov	r2, r4
    e958:	mov	r1, fp
    e95c:	mov	r0, r9
    e960:	bl	1588 <fread@plt>
    e964:	mov	r6, #0
    e968:	add	r7, r7, r8
    e96c:	add	r5, r5, r0
    e970:	cmp	r4, r6
    e974:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e978:	add	r0, r9, r6, lsl #1
    e97c:	bl	1adc <Mat_int16Swap>
    e980:	strb	r0, [r7, r6]
    e984:	add	r6, r6, #1
    e988:	b	e970 <ReadUInt8Data.part.17+0x908>
    e98c:	add	r8, sp, #8
    e990:	ldr	r3, [r6]
    e994:	mov	r1, r0
    e998:	mov	r2, r4
    e99c:	mov	r0, r8
    e9a0:	bl	1588 <fread@plt>
    e9a4:	mov	r6, #0
    e9a8:	mov	r5, r0
    e9ac:	cmp	r4, r6
    e9b0:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    e9b4:	add	r0, r8, r6, lsl #1
    e9b8:	bl	1adc <Mat_int16Swap>
    e9bc:	strb	r0, [r7, r6]
    e9c0:	add	r6, r6, #1
    e9c4:	b	e9ac <ReadUInt8Data.part.17+0x944>
    e9c8:	ldr	r3, [r6]
    e9cc:	mov	r2, #256	; 0x100
    e9d0:	mov	r1, fp
    e9d4:	mov	r0, r9
    e9d8:	bl	1588 <fread@plt>
    e9dc:	add	r2, r7, r8
    e9e0:	mov	r3, #0
    e9e4:	add	r5, r5, r0
    e9e8:	add	r0, r9, r3
    e9ec:	str	r2, [sp, #4]
    e9f0:	str	r3, [sp]
    e9f4:	bl	1adc <Mat_int16Swap>
    e9f8:	ldr	r3, [sp]
    e9fc:	ldr	r2, [sp, #4]
    ea00:	add	r3, r3, #2
    ea04:	cmp	r3, #512	; 0x200
    ea08:	strb	r0, [r2], #1
    ea0c:	bne	e9e8 <ReadUInt8Data.part.17+0x980>
    ea10:	add	r8, r8, #256	; 0x100
    ea14:	b	e930 <ReadUInt8Data.part.17+0x8c8>
    ea18:	cmp	r4, #256	; 0x100
    ea1c:	ble	ea90 <ReadUInt8Data.part.17+0xa28>
    ea20:	mov	r9, r8
    ea24:	mov	r5, r8
    ea28:	add	sl, sp, #8
    ea2c:	sub	r3, r4, #256	; 0x100
    ea30:	str	r3, [sp]
    ea34:	ldr	r3, [sp]
    ea38:	cmp	r9, r3
    ea3c:	blt	eac8 <ReadUInt8Data.part.17+0xa60>
    ea40:	sub	r8, r4, #1
    ea44:	bic	r8, r8, #255	; 0xff
    ea48:	cmp	r4, r8
    ea4c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ea50:	ldr	r3, [r6]
    ea54:	sub	r4, r4, r8
    ea58:	add	r6, sp, #8
    ea5c:	mov	r2, r4
    ea60:	mov	r1, fp
    ea64:	mov	r0, r6
    ea68:	bl	1588 <fread@plt>
    ea6c:	add	r7, r7, r8
    ea70:	mov	r2, r7
    ea74:	add	r5, r5, r0
    ea78:	sub	r3, r7, r2
    ea7c:	cmp	r4, r3
    ea80:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ea84:	ldrsh	r3, [r6], #2
    ea88:	strb	r3, [r7], #1
    ea8c:	b	ea78 <ReadUInt8Data.part.17+0xa10>
    ea90:	add	r9, sp, #8
    ea94:	mov	r1, r0
    ea98:	ldr	r3, [r6]
    ea9c:	mov	r2, r4
    eaa0:	mov	r0, r9
    eaa4:	bl	1588 <fread@plt>
    eaa8:	mov	r5, r0
    eaac:	cmp	r4, r8
    eab0:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    eab4:	lsl	r3, r8, #1
    eab8:	ldrh	r3, [r9, r3]
    eabc:	strb	r3, [r7, r8]
    eac0:	add	r8, r8, #1
    eac4:	b	eaac <ReadUInt8Data.part.17+0xa44>
    eac8:	ldr	r3, [r6]
    eacc:	mov	r2, #256	; 0x100
    ead0:	mov	r1, fp
    ead4:	mov	r0, sl
    ead8:	bl	1588 <fread@plt>
    eadc:	mov	r3, r8
    eae0:	add	r2, r7, r9
    eae4:	add	r5, r5, r0
    eae8:	lsl	r1, r3, #1
    eaec:	ldrh	r1, [sl, r1]
    eaf0:	strb	r1, [r2, r3]
    eaf4:	add	r3, r3, #1
    eaf8:	cmp	r3, #256	; 0x100
    eafc:	bne	eae8 <ReadUInt8Data.part.17+0xa80>
    eb00:	add	r9, r9, #256	; 0x100
    eb04:	b	ea34 <ReadUInt8Data.part.17+0x9cc>
    eb08:	ldr	r8, [r6, #20]
    eb0c:	cmp	r8, #0
    eb10:	beq	ec14 <ReadUInt8Data.part.17+0xbac>
    eb14:	cmp	r4, #256	; 0x100
    eb18:	ble	eb88 <ReadUInt8Data.part.17+0xb20>
    eb1c:	mov	r8, #0
    eb20:	mov	r5, r8
    eb24:	sub	sl, r4, #256	; 0x100
    eb28:	add	r9, sp, #8
    eb2c:	cmp	r8, sl
    eb30:	blt	ebc4 <ReadUInt8Data.part.17+0xb5c>
    eb34:	sub	r8, r4, #1
    eb38:	bic	r8, r8, #255	; 0xff
    eb3c:	cmp	r4, r8
    eb40:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    eb44:	sub	r4, r4, r8
    eb48:	add	r9, sp, #8
    eb4c:	ldr	r3, [r6]
    eb50:	mov	r2, r4
    eb54:	mov	r1, fp
    eb58:	mov	r0, r9
    eb5c:	bl	1588 <fread@plt>
    eb60:	mov	r6, #0
    eb64:	add	r7, r7, r8
    eb68:	add	r5, r5, r0
    eb6c:	cmp	r4, r6
    eb70:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    eb74:	add	r0, r9, r6, lsl #1
    eb78:	bl	1b10 <Mat_uint16Swap>
    eb7c:	strb	r0, [r7, r6]
    eb80:	add	r6, r6, #1
    eb84:	b	eb6c <ReadUInt8Data.part.17+0xb04>
    eb88:	add	r8, sp, #8
    eb8c:	ldr	r3, [r6]
    eb90:	mov	r1, r0
    eb94:	mov	r2, r4
    eb98:	mov	r0, r8
    eb9c:	bl	1588 <fread@plt>
    eba0:	mov	r6, #0
    eba4:	mov	r5, r0
    eba8:	cmp	r4, r6
    ebac:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ebb0:	add	r0, r8, r6, lsl #1
    ebb4:	bl	1b10 <Mat_uint16Swap>
    ebb8:	strb	r0, [r7, r6]
    ebbc:	add	r6, r6, #1
    ebc0:	b	eba8 <ReadUInt8Data.part.17+0xb40>
    ebc4:	ldr	r3, [r6]
    ebc8:	mov	r2, #256	; 0x100
    ebcc:	mov	r1, fp
    ebd0:	mov	r0, r9
    ebd4:	bl	1588 <fread@plt>
    ebd8:	add	r2, r7, r8
    ebdc:	mov	r3, #0
    ebe0:	add	r5, r5, r0
    ebe4:	add	r0, r9, r3
    ebe8:	str	r2, [sp, #4]
    ebec:	str	r3, [sp]
    ebf0:	bl	1b10 <Mat_uint16Swap>
    ebf4:	ldr	r3, [sp]
    ebf8:	ldr	r2, [sp, #4]
    ebfc:	add	r3, r3, #2
    ec00:	cmp	r3, #512	; 0x200
    ec04:	strb	r0, [r2], #1
    ec08:	bne	ebe4 <ReadUInt8Data.part.17+0xb7c>
    ec0c:	add	r8, r8, #256	; 0x100
    ec10:	b	eb2c <ReadUInt8Data.part.17+0xac4>
    ec14:	cmp	r4, #256	; 0x100
    ec18:	ble	ec8c <ReadUInt8Data.part.17+0xc24>
    ec1c:	mov	r9, r8
    ec20:	mov	r5, r8
    ec24:	add	sl, sp, #8
    ec28:	sub	r3, r4, #256	; 0x100
    ec2c:	str	r3, [sp]
    ec30:	ldr	r3, [sp]
    ec34:	cmp	r9, r3
    ec38:	blt	ecc4 <ReadUInt8Data.part.17+0xc5c>
    ec3c:	sub	r8, r4, #1
    ec40:	bic	r8, r8, #255	; 0xff
    ec44:	cmp	r4, r8
    ec48:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ec4c:	ldr	r3, [r6]
    ec50:	sub	r4, r4, r8
    ec54:	add	r6, sp, #8
    ec58:	mov	r2, r4
    ec5c:	mov	r1, fp
    ec60:	mov	r0, r6
    ec64:	bl	1588 <fread@plt>
    ec68:	add	r7, r7, r8
    ec6c:	mov	r2, r7
    ec70:	add	r5, r5, r0
    ec74:	sub	r3, r7, r2
    ec78:	cmp	r4, r3
    ec7c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ec80:	ldrh	r3, [r6], #2
    ec84:	strb	r3, [r7], #1
    ec88:	b	ec74 <ReadUInt8Data.part.17+0xc0c>
    ec8c:	add	r9, sp, #8
    ec90:	mov	r1, r0
    ec94:	ldr	r3, [r6]
    ec98:	mov	r2, r4
    ec9c:	mov	r0, r9
    eca0:	bl	1588 <fread@plt>
    eca4:	mov	r5, r0
    eca8:	cmp	r4, r8
    ecac:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ecb0:	lsl	r3, r8, #1
    ecb4:	ldrh	r3, [r9, r3]
    ecb8:	strb	r3, [r7, r8]
    ecbc:	add	r8, r8, #1
    ecc0:	b	eca8 <ReadUInt8Data.part.17+0xc40>
    ecc4:	ldr	r3, [r6]
    ecc8:	mov	r2, #256	; 0x100
    eccc:	mov	r1, fp
    ecd0:	mov	r0, sl
    ecd4:	bl	1588 <fread@plt>
    ecd8:	mov	r3, r8
    ecdc:	add	r2, r7, r9
    ece0:	add	r5, r5, r0
    ece4:	lsl	r1, r3, #1
    ece8:	ldrh	r1, [sl, r1]
    ecec:	strb	r1, [r2, r3]
    ecf0:	add	r3, r3, #1
    ecf4:	cmp	r3, #256	; 0x100
    ecf8:	bne	ece4 <ReadUInt8Data.part.17+0xc7c>
    ecfc:	add	r9, r9, #256	; 0x100
    ed00:	b	ec30 <ReadUInt8Data.part.17+0xbc8>
    ed04:	cmp	r4, #256	; 0x100
    ed08:	ble	ed74 <ReadUInt8Data.part.17+0xd0c>
    ed0c:	mov	r8, #0
    ed10:	mov	r5, r8
    ed14:	sub	sl, r4, #256	; 0x100
    ed18:	add	r9, sp, #8
    ed1c:	cmp	r8, sl
    ed20:	blt	edac <ReadUInt8Data.part.17+0xd44>
    ed24:	sub	r8, r4, #1
    ed28:	bic	r8, r8, #255	; 0xff
    ed2c:	cmp	r4, r8
    ed30:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ed34:	sub	r4, r4, r8
    ed38:	add	r9, sp, #8
    ed3c:	ldr	r3, [r6]
    ed40:	mov	r2, r4
    ed44:	mov	r1, fp
    ed48:	mov	r0, r9
    ed4c:	bl	1588 <fread@plt>
    ed50:	add	r7, r7, r8
    ed54:	mov	r3, #0
    ed58:	add	r5, r5, r0
    ed5c:	cmp	r4, r3
    ed60:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ed64:	ldrb	r2, [r9, r3]
    ed68:	strb	r2, [r7, r3]
    ed6c:	add	r3, r3, #1
    ed70:	b	ed5c <ReadUInt8Data.part.17+0xcf4>
    ed74:	add	r8, sp, #8
    ed78:	ldr	r3, [r6]
    ed7c:	mov	r1, r0
    ed80:	mov	r2, r4
    ed84:	mov	r0, r8
    ed88:	bl	1588 <fread@plt>
    ed8c:	mov	r3, #0
    ed90:	mov	r5, r0
    ed94:	cmp	r4, r3
    ed98:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ed9c:	ldrb	r2, [r8, r3]
    eda0:	strb	r2, [r7, r3]
    eda4:	add	r3, r3, #1
    eda8:	b	ed94 <ReadUInt8Data.part.17+0xd2c>
    edac:	ldr	r3, [r6]
    edb0:	mov	r2, #256	; 0x100
    edb4:	mov	r1, fp
    edb8:	mov	r0, r9
    edbc:	bl	1588 <fread@plt>
    edc0:	mov	r3, #0
    edc4:	add	r2, r7, r8
    edc8:	add	r5, r5, r0
    edcc:	ldrb	r1, [r9, r3]
    edd0:	strb	r1, [r2, r3]
    edd4:	add	r3, r3, #1
    edd8:	cmp	r3, #256	; 0x100
    eddc:	bne	edcc <ReadUInt8Data.part.17+0xd64>
    ede0:	add	r8, r8, #256	; 0x100
    ede4:	b	ed1c <ReadUInt8Data.part.17+0xcb4>
    ede8:	cmp	r4, #256	; 0x100
    edec:	ble	ee58 <ReadUInt8Data.part.17+0xdf0>
    edf0:	mov	r8, #0
    edf4:	mov	r5, r8
    edf8:	sub	sl, r4, #256	; 0x100
    edfc:	add	r9, sp, #8
    ee00:	cmp	r8, sl
    ee04:	blt	ee90 <ReadUInt8Data.part.17+0xe28>
    ee08:	sub	r8, r4, #1
    ee0c:	bic	r8, r8, #255	; 0xff
    ee10:	cmp	r4, r8
    ee14:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ee18:	sub	r4, r4, r8
    ee1c:	add	r9, sp, #8
    ee20:	ldr	r3, [r6]
    ee24:	mov	r2, r4
    ee28:	mov	r1, fp
    ee2c:	mov	r0, r9
    ee30:	bl	1588 <fread@plt>
    ee34:	add	r7, r7, r8
    ee38:	mov	r3, #0
    ee3c:	add	r5, r5, r0
    ee40:	cmp	r4, r3
    ee44:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ee48:	ldrb	r2, [r9, r3]
    ee4c:	strb	r2, [r7, r3]
    ee50:	add	r3, r3, #1
    ee54:	b	ee40 <ReadUInt8Data.part.17+0xdd8>
    ee58:	add	r8, sp, #8
    ee5c:	ldr	r3, [r6]
    ee60:	mov	r1, r0
    ee64:	mov	r2, r4
    ee68:	mov	r0, r8
    ee6c:	bl	1588 <fread@plt>
    ee70:	mov	r3, #0
    ee74:	mov	r5, r0
    ee78:	cmp	r4, r3
    ee7c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ee80:	ldrb	r2, [r8, r3]
    ee84:	strb	r2, [r7, r3]
    ee88:	add	r3, r3, #1
    ee8c:	b	ee78 <ReadUInt8Data.part.17+0xe10>
    ee90:	ldr	r3, [r6]
    ee94:	mov	r2, #256	; 0x100
    ee98:	mov	r1, fp
    ee9c:	mov	r0, r9
    eea0:	bl	1588 <fread@plt>
    eea4:	mov	r3, #0
    eea8:	add	r2, r7, r8
    eeac:	add	r5, r5, r0
    eeb0:	ldrb	r1, [r9, r3]
    eeb4:	strb	r1, [r2, r3]
    eeb8:	add	r3, r3, #1
    eebc:	cmp	r3, #256	; 0x100
    eec0:	bne	eeb0 <ReadUInt8Data.part.17+0xe48>
    eec4:	add	r8, r8, #256	; 0x100
    eec8:	b	ee00 <ReadUInt8Data.part.17+0xd98>
    eecc:	cmp	r5, #12
    eed0:	bne	f0c8 <ReadUInt8Data.part.17+0x1060>
    eed4:	ldr	r8, [r6, #20]
    eed8:	cmp	r8, #0
    eedc:	beq	efe0 <ReadUInt8Data.part.17+0xf78>
    eee0:	cmp	r4, #256	; 0x100
    eee4:	ble	ef54 <ReadUInt8Data.part.17+0xeec>
    eee8:	mov	r8, #0
    eeec:	mov	r5, r8
    eef0:	sub	sl, r4, #256	; 0x100
    eef4:	add	r9, sp, #8
    eef8:	cmp	r8, sl
    eefc:	blt	ef90 <ReadUInt8Data.part.17+0xf28>
    ef00:	sub	r8, r4, #1
    ef04:	bic	r8, r8, #255	; 0xff
    ef08:	cmp	r4, r8
    ef0c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ef10:	sub	r4, r4, r8
    ef14:	add	r9, sp, #8
    ef18:	ldr	r3, [r6]
    ef1c:	mov	r2, r4
    ef20:	mov	r1, fp
    ef24:	mov	r0, r9
    ef28:	bl	1588 <fread@plt>
    ef2c:	mov	r6, #0
    ef30:	add	r7, r7, r8
    ef34:	add	r5, r5, r0
    ef38:	cmp	r4, r6
    ef3c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ef40:	add	r0, r9, r6, lsl #3
    ef44:	bl	18bc <Mat_int64Swap>
    ef48:	strb	r0, [r7, r6]
    ef4c:	add	r6, r6, #1
    ef50:	b	ef38 <ReadUInt8Data.part.17+0xed0>
    ef54:	add	r8, sp, #8
    ef58:	ldr	r3, [r6]
    ef5c:	mov	r1, r0
    ef60:	mov	r2, r4
    ef64:	mov	r0, r8
    ef68:	bl	1588 <fread@plt>
    ef6c:	mov	r6, #0
    ef70:	mov	r5, r0
    ef74:	cmp	r4, r6
    ef78:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    ef7c:	add	r0, r8, r6, lsl #3
    ef80:	bl	18bc <Mat_int64Swap>
    ef84:	strb	r0, [r7, r6]
    ef88:	add	r6, r6, #1
    ef8c:	b	ef74 <ReadUInt8Data.part.17+0xf0c>
    ef90:	ldr	r3, [r6]
    ef94:	mov	r2, #256	; 0x100
    ef98:	mov	r1, fp
    ef9c:	mov	r0, r9
    efa0:	bl	1588 <fread@plt>
    efa4:	add	r2, r7, r8
    efa8:	mov	r3, #0
    efac:	add	r5, r5, r0
    efb0:	add	r0, r9, r3
    efb4:	str	r2, [sp, #4]
    efb8:	str	r3, [sp]
    efbc:	bl	18bc <Mat_int64Swap>
    efc0:	ldr	r3, [sp]
    efc4:	ldr	r2, [sp, #4]
    efc8:	add	r3, r3, #8
    efcc:	cmp	r3, #2048	; 0x800
    efd0:	strb	r0, [r2], #1
    efd4:	bne	efb0 <ReadUInt8Data.part.17+0xf48>
    efd8:	add	r8, r8, #256	; 0x100
    efdc:	b	eef8 <ReadUInt8Data.part.17+0xe90>
    efe0:	cmp	r4, #256	; 0x100
    efe4:	ble	f058 <ReadUInt8Data.part.17+0xff0>
    efe8:	mov	r9, r8
    efec:	mov	r5, r8
    eff0:	add	sl, sp, #8
    eff4:	sub	r3, r4, #256	; 0x100
    eff8:	str	r3, [sp]
    effc:	ldr	r3, [sp]
    f000:	cmp	r9, r3
    f004:	blt	f08c <ReadUInt8Data.part.17+0x1024>
    f008:	sub	r8, r4, #1
    f00c:	bic	r8, r8, #255	; 0xff
    f010:	cmp	r4, r8
    f014:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    f018:	ldr	r3, [r6]
    f01c:	sub	r4, r4, r8
    f020:	add	r6, sp, #8
    f024:	mov	r2, r4
    f028:	mov	r1, fp
    f02c:	mov	r0, r6
    f030:	bl	1588 <fread@plt>
    f034:	add	r7, r7, r8
    f038:	mov	r2, r7
    f03c:	add	r5, r5, r0
    f040:	sub	r3, r7, r2
    f044:	cmp	r4, r3
    f048:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    f04c:	ldr	r3, [r6], #8
    f050:	strb	r3, [r7], #1
    f054:	b	f040 <ReadUInt8Data.part.17+0xfd8>
    f058:	add	r9, sp, #8
    f05c:	mov	r1, r0
    f060:	ldr	r3, [r6]
    f064:	mov	r2, r4
    f068:	mov	r0, r9
    f06c:	bl	1588 <fread@plt>
    f070:	mov	r5, r0
    f074:	cmp	r4, r8
    f078:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    f07c:	ldr	r3, [r9, r8, lsl #3]
    f080:	strb	r3, [r7, r8]
    f084:	add	r8, r8, #1
    f088:	b	f074 <ReadUInt8Data.part.17+0x100c>
    f08c:	ldr	r3, [r6]
    f090:	mov	r2, #256	; 0x100
    f094:	mov	r1, fp
    f098:	mov	r0, sl
    f09c:	bl	1588 <fread@plt>
    f0a0:	mov	r3, r8
    f0a4:	add	r2, r7, r9
    f0a8:	add	r5, r5, r0
    f0ac:	ldr	r1, [sl, r3, lsl #3]
    f0b0:	strb	r1, [r2, r3]
    f0b4:	add	r3, r3, #1
    f0b8:	cmp	r3, #256	; 0x100
    f0bc:	bne	f0ac <ReadUInt8Data.part.17+0x1044>
    f0c0:	add	r9, r9, #256	; 0x100
    f0c4:	b	effc <ReadUInt8Data.part.17+0xf94>
    f0c8:	cmp	r5, #13
    f0cc:	movne	r5, #0
    f0d0:	bne	e174 <ReadUInt8Data.part.17+0x10c>
    f0d4:	ldr	r8, [r6, #20]
    f0d8:	cmp	r8, #0
    f0dc:	beq	f1e0 <ReadUInt8Data.part.17+0x1178>
    f0e0:	cmp	r4, #256	; 0x100
    f0e4:	ble	f154 <ReadUInt8Data.part.17+0x10ec>
    f0e8:	mov	r8, #0
    f0ec:	mov	r5, r8
    f0f0:	sub	sl, r4, #256	; 0x100
    f0f4:	add	r9, sp, #8
    f0f8:	cmp	r8, sl
    f0fc:	blt	f190 <ReadUInt8Data.part.17+0x1128>
    f100:	sub	r8, r4, #1
    f104:	bic	r8, r8, #255	; 0xff
    f108:	cmp	r4, r8
    f10c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    f110:	sub	r4, r4, r8
    f114:	add	r9, sp, #8
    f118:	ldr	r3, [r6]
    f11c:	mov	r2, r4
    f120:	mov	r1, fp
    f124:	mov	r0, r9
    f128:	bl	1588 <fread@plt>
    f12c:	mov	r6, #0
    f130:	add	r7, r7, r8
    f134:	add	r5, r5, r0
    f138:	cmp	r4, r6
    f13c:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    f140:	add	r0, r9, r6, lsl #3
    f144:	bl	1980 <Mat_uint64Swap>
    f148:	strb	r0, [r7, r6]
    f14c:	add	r6, r6, #1
    f150:	b	f138 <ReadUInt8Data.part.17+0x10d0>
    f154:	add	r8, sp, #8
    f158:	ldr	r3, [r6]
    f15c:	mov	r1, r0
    f160:	mov	r2, r4
    f164:	mov	r0, r8
    f168:	bl	1588 <fread@plt>
    f16c:	mov	r6, #0
    f170:	mov	r5, r0
    f174:	cmp	r4, r6
    f178:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    f17c:	add	r0, r8, r6, lsl #3
    f180:	bl	1980 <Mat_uint64Swap>
    f184:	strb	r0, [r7, r6]
    f188:	add	r6, r6, #1
    f18c:	b	f174 <ReadUInt8Data.part.17+0x110c>
    f190:	ldr	r3, [r6]
    f194:	mov	r2, #256	; 0x100
    f198:	mov	r1, fp
    f19c:	mov	r0, r9
    f1a0:	bl	1588 <fread@plt>
    f1a4:	add	r2, r7, r8
    f1a8:	mov	r3, #0
    f1ac:	add	r5, r5, r0
    f1b0:	add	r0, r9, r3
    f1b4:	str	r2, [sp, #4]
    f1b8:	str	r3, [sp]
    f1bc:	bl	1980 <Mat_uint64Swap>
    f1c0:	ldr	r3, [sp]
    f1c4:	ldr	r2, [sp, #4]
    f1c8:	add	r3, r3, #8
    f1cc:	cmp	r3, #2048	; 0x800
    f1d0:	strb	r0, [r2], #1
    f1d4:	bne	f1b0 <ReadUInt8Data.part.17+0x1148>
    f1d8:	add	r8, r8, #256	; 0x100
    f1dc:	b	f0f8 <ReadUInt8Data.part.17+0x1090>
    f1e0:	cmp	r4, #256	; 0x100
    f1e4:	ble	f258 <ReadUInt8Data.part.17+0x11f0>
    f1e8:	mov	r9, r8
    f1ec:	mov	r5, r8
    f1f0:	add	sl, sp, #8
    f1f4:	sub	r3, r4, #256	; 0x100
    f1f8:	str	r3, [sp]
    f1fc:	ldr	r3, [sp]
    f200:	cmp	r9, r3
    f204:	blt	f28c <ReadUInt8Data.part.17+0x1224>
    f208:	sub	r8, r4, #1
    f20c:	bic	r8, r8, #255	; 0xff
    f210:	cmp	r4, r8
    f214:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    f218:	ldr	r3, [r6]
    f21c:	sub	r4, r4, r8
    f220:	add	r6, sp, #8
    f224:	mov	r2, r4
    f228:	mov	r1, fp
    f22c:	mov	r0, r6
    f230:	bl	1588 <fread@plt>
    f234:	add	r7, r7, r8
    f238:	mov	r2, r7
    f23c:	add	r5, r5, r0
    f240:	sub	r3, r7, r2
    f244:	cmp	r4, r3
    f248:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    f24c:	ldr	r3, [r6], #8
    f250:	strb	r3, [r7], #1
    f254:	b	f240 <ReadUInt8Data.part.17+0x11d8>
    f258:	add	r9, sp, #8
    f25c:	mov	r1, r0
    f260:	ldr	r3, [r6]
    f264:	mov	r2, r4
    f268:	mov	r0, r9
    f26c:	bl	1588 <fread@plt>
    f270:	mov	r5, r0
    f274:	cmp	r4, r8
    f278:	ble	e174 <ReadUInt8Data.part.17+0x10c>
    f27c:	ldr	r3, [r9, r8, lsl #3]
    f280:	strb	r3, [r7, r8]
    f284:	add	r8, r8, #1
    f288:	b	f274 <ReadUInt8Data.part.17+0x120c>
    f28c:	ldr	r3, [r6]
    f290:	mov	r2, #256	; 0x100
    f294:	mov	r1, fp
    f298:	mov	r0, sl
    f29c:	bl	1588 <fread@plt>
    f2a0:	mov	r3, r8
    f2a4:	add	r2, r7, r9
    f2a8:	add	r5, r5, r0
    f2ac:	ldr	r1, [sl, r3, lsl #3]
    f2b0:	strb	r1, [r2, r3]
    f2b4:	add	r3, r3, #1
    f2b8:	cmp	r3, #256	; 0x100
    f2bc:	bne	f2ac <ReadUInt8Data.part.17+0x1244>
    f2c0:	add	r9, r9, #256	; 0x100
    f2c4:	b	f1fc <ReadUInt8Data.part.17+0x1194>

0000f2c8 <ReadDoubleData>:
    f2c8:	cmp	r1, #0
    f2cc:	cmpne	r0, #0
    f2d0:	beq	f2e4 <ReadDoubleData+0x1c>
    f2d4:	ldr	ip, [r0]
    f2d8:	cmp	ip, #0
    f2dc:	beq	f2e4 <ReadDoubleData+0x1c>
    f2e0:	b	3634 <ReadDoubleData.part.0>
    f2e4:	mov	r0, #0
    f2e8:	bx	lr

0000f2ec <ReadCompressedDoubleData>:
    f2ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2f0:	sub	sp, sp, #1040	; 0x410
    f2f4:	sub	sp, sp, #12
    f2f8:	mov	r5, r0
    f2fc:	mov	r0, r3
    f300:	mov	r7, r3
    f304:	str	r1, [sp, #4]
    f308:	mov	r6, r2
    f30c:	ldr	r4, [sp, #1088]	; 0x440
    f310:	bl	1600 <Mat_SizeOf@plt>
    f314:	sub	r7, r7, #1
    f318:	mov	sl, r0
    f31c:	cmp	r7, #12
    f320:	addls	pc, pc, r7, lsl #2
    f324:	b	102e8 <ReadCompressedDoubleData+0xffc>
    f328:	b	10200 <ReadCompressedDoubleData+0xf14>
    f32c:	b	10118 <ReadCompressedDoubleData+0xe2c>
    f330:	b	fd38 <ReadCompressedDoubleData+0xa4c>
    f334:	b	ff28 <ReadCompressedDoubleData+0xc3c>
    f338:	b	f968 <ReadCompressedDoubleData+0x67c>
    f33c:	b	fb50 <ReadCompressedDoubleData+0x864>
    f340:	b	f3b0 <ReadCompressedDoubleData+0xc4>
    f344:	b	102e8 <ReadCompressedDoubleData+0xffc>
    f348:	b	f35c <ReadCompressedDoubleData+0x70>
    f34c:	b	102e8 <ReadCompressedDoubleData+0xffc>
    f350:	b	102e8 <ReadCompressedDoubleData+0xffc>
    f354:	b	f598 <ReadCompressedDoubleData+0x2ac>
    f358:	b	f780 <ReadCompressedDoubleData+0x494>
    f35c:	ldr	r3, [r5, #20]
    f360:	mov	r2, r6
    f364:	cmp	r3, #0
    f368:	ldr	r1, [sp, #4]
    f36c:	mov	r0, r5
    f370:	mul	r3, sl, r4
    f374:	beq	f3a8 <ReadCompressedDoubleData+0xbc>
    f378:	bl	3068 <InflateData>
    f37c:	mov	r5, #0
    f380:	cmp	r5, r4
    f384:	blt	f398 <ReadCompressedDoubleData+0xac>
    f388:	mul	r0, sl, r4
    f38c:	add	sp, sp, #1040	; 0x410
    f390:	add	sp, sp, #12
    f394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f398:	add	r0, r6, r5, lsl #3
    f39c:	bl	1b88 <Mat_doubleSwap>
    f3a0:	add	r5, r5, #1
    f3a4:	b	f380 <ReadCompressedDoubleData+0x94>
    f3a8:	bl	3068 <InflateData>
    f3ac:	b	f388 <ReadCompressedDoubleData+0x9c>
    f3b0:	ldr	fp, [r5, #20]
    f3b4:	add	r9, sp, #24
    f3b8:	cmp	fp, #0
    f3bc:	beq	f4ac <ReadCompressedDoubleData+0x1c0>
    f3c0:	cmp	r4, #256	; 0x100
    f3c4:	bgt	f400 <ReadCompressedDoubleData+0x114>
    f3c8:	mul	r3, r0, r4
    f3cc:	mov	r2, r9
    f3d0:	mov	r0, r5
    f3d4:	ldr	r1, [sp, #4]
    f3d8:	bl	3068 <InflateData>
    f3dc:	mov	r5, #0
    f3e0:	cmp	r5, r4
    f3e4:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f3e8:	add	r0, r9, r5, lsl #2
    f3ec:	bl	1b2c <Mat_floatSwap>
    f3f0:	add	r5, r5, #1
    f3f4:	vcvt.f64.f32	d0, s0
    f3f8:	vstmia	r6!, {d0}
    f3fc:	b	f3e0 <ReadCompressedDoubleData+0xf4>
    f400:	sub	r8, r4, #256	; 0x100
    f404:	mov	r7, #0
    f408:	lsl	r3, r0, #8
    f40c:	str	r3, [sp, #8]
    f410:	ldr	r3, [sp, #8]
    f414:	mov	r2, r9
    f418:	ldr	r1, [sp, #4]
    f41c:	mov	r0, r5
    f420:	bl	3068 <InflateData>
    f424:	mov	fp, #0
    f428:	add	r3, r6, r7, lsl #3
    f42c:	add	r0, r9, fp
    f430:	str	r3, [sp, #12]
    f434:	bl	1b2c <Mat_floatSwap>
    f438:	ldr	r3, [sp, #12]
    f43c:	add	fp, fp, #4
    f440:	cmp	fp, #1024	; 0x400
    f444:	vcvt.f64.f32	d0, s0
    f448:	vstmia	r3!, {d0}
    f44c:	bne	f42c <ReadCompressedDoubleData+0x140>
    f450:	add	r7, r7, #256	; 0x100
    f454:	cmp	r8, r7
    f458:	bgt	f410 <ReadCompressedDoubleData+0x124>
    f45c:	sub	r4, r4, #256	; 0x100
    f460:	sub	r4, r4, #1
    f464:	mov	r0, r5
    f468:	lsr	r7, r4, #8
    f46c:	mov	r2, r9
    f470:	sub	r4, r8, r7, lsl #8
    f474:	ldr	r1, [sp, #4]
    f478:	mul	r3, sl, r4
    f47c:	bl	3068 <InflateData>
    f480:	add	r7, r7, #1
    f484:	mov	r5, #0
    f488:	add	r7, r6, r7, lsl #11
    f48c:	cmp	r5, r4
    f490:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f494:	add	r0, r9, r5, lsl #2
    f498:	bl	1b2c <Mat_floatSwap>
    f49c:	add	r5, r5, #1
    f4a0:	vcvt.f64.f32	d0, s0
    f4a4:	vstmia	r7!, {d0}
    f4a8:	b	f48c <ReadCompressedDoubleData+0x1a0>
    f4ac:	cmp	r4, #256	; 0x100
    f4b0:	bgt	f4ec <ReadCompressedDoubleData+0x200>
    f4b4:	mul	r3, r0, r4
    f4b8:	mov	r2, r9
    f4bc:	ldr	r1, [sp, #4]
    f4c0:	mov	r0, r5
    f4c4:	bl	3068 <InflateData>
    f4c8:	mov	r2, r9
    f4cc:	mov	r3, r6
    f4d0:	cmp	fp, r4
    f4d4:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f4d8:	vldmia	r2!, {s14}
    f4dc:	add	fp, fp, #1
    f4e0:	vcvt.f64.f32	d7, s14
    f4e4:	vstmia	r3!, {d7}
    f4e8:	b	f4d0 <ReadCompressedDoubleData+0x1e4>
    f4ec:	sub	r3, r4, #256	; 0x100
    f4f0:	mov	r7, r6
    f4f4:	mov	r8, fp
    f4f8:	str	r3, [sp, #12]
    f4fc:	lsl	r3, r0, #8
    f500:	str	r3, [sp, #20]
    f504:	str	r9, [sp, #8]
    f508:	ldr	r3, [sp, #20]
    f50c:	ldmib	sp, {r1, r2}
    f510:	mov	r0, r5
    f514:	bl	3068 <InflateData>
    f518:	ldr	r3, [sp, #8]
    f51c:	add	r2, r7, #2048	; 0x800
    f520:	str	r3, [sp, #16]
    f524:	vldmia	r3!, {s14}
    f528:	vcvt.f64.f32	d7, s14
    f52c:	vstmia	r7!, {d7}
    f530:	cmp	r7, r2
    f534:	bne	f524 <ReadCompressedDoubleData+0x238>
    f538:	ldr	r3, [sp, #12]
    f53c:	add	r8, r8, #256	; 0x100
    f540:	cmp	r3, r8
    f544:	bgt	f508 <ReadCompressedDoubleData+0x21c>
    f548:	sub	r4, r4, #256	; 0x100
    f54c:	sub	r4, r4, #1
    f550:	mov	r2, r9
    f554:	lsr	r7, r4, #8
    f558:	ldr	r1, [sp, #4]
    f55c:	sub	r4, r3, r7, lsl #8
    f560:	mov	r0, r5
    f564:	mul	r3, sl, r4
    f568:	bl	3068 <InflateData>
    f56c:	add	r7, r7, #1
    f570:	add	r7, r6, r7, lsl #11
    f574:	cmp	fp, r4
    f578:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f57c:	ldr	r3, [sp, #16]
    f580:	add	fp, fp, #1
    f584:	vldmia	r3!, {s14}
    f588:	vcvt.f64.f32	d7, s14
    f58c:	str	r3, [sp, #16]
    f590:	vstmia	r7!, {d7}
    f594:	b	f574 <ReadCompressedDoubleData+0x288>
    f598:	ldr	r8, [r5, #20]
    f59c:	add	r7, sp, #24
    f5a0:	cmp	r8, #0
    f5a4:	beq	f690 <ReadCompressedDoubleData+0x3a4>
    f5a8:	cmp	r4, #128	; 0x80
    f5ac:	bgt	f5e8 <ReadCompressedDoubleData+0x2fc>
    f5b0:	mul	r3, r0, r4
    f5b4:	mov	r2, r7
    f5b8:	mov	r0, r5
    f5bc:	ldr	r1, [sp, #4]
    f5c0:	bl	3068 <InflateData>
    f5c4:	mov	r5, #0
    f5c8:	cmp	r5, r4
    f5cc:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f5d0:	add	r0, r7, r5, lsl #3
    f5d4:	bl	18bc <Mat_int64Swap>
    f5d8:	bl	40090 <__aeabi_l2d>
    f5dc:	add	r5, r5, #1
    f5e0:	strd	r0, [r6], #8
    f5e4:	b	f5c8 <ReadCompressedDoubleData+0x2dc>
    f5e8:	sub	r9, r4, #128	; 0x80
    f5ec:	mov	r8, #0
    f5f0:	lsl	r3, r0, #7
    f5f4:	str	r3, [sp, #8]
    f5f8:	ldr	r3, [sp, #8]
    f5fc:	mov	r2, r7
    f600:	ldr	r1, [sp, #4]
    f604:	mov	r0, r5
    f608:	bl	3068 <InflateData>
    f60c:	mov	fp, #0
    f610:	add	r3, r6, r8, lsl #3
    f614:	add	r0, r7, fp
    f618:	str	r3, [sp, #12]
    f61c:	bl	18bc <Mat_int64Swap>
    f620:	bl	40090 <__aeabi_l2d>
    f624:	ldr	r3, [sp, #12]
    f628:	add	fp, fp, #8
    f62c:	cmp	fp, #1024	; 0x400
    f630:	strd	r0, [r3], #8
    f634:	bne	f614 <ReadCompressedDoubleData+0x328>
    f638:	add	r8, r8, #128	; 0x80
    f63c:	cmp	r9, r8
    f640:	bgt	f5f8 <ReadCompressedDoubleData+0x30c>
    f644:	sub	r4, r4, #129	; 0x81
    f648:	mov	r0, r5
    f64c:	lsr	r8, r4, #7
    f650:	mov	r2, r7
    f654:	sub	r4, r9, r8, lsl #7
    f658:	ldr	r1, [sp, #4]
    f65c:	mul	r3, sl, r4
    f660:	bl	3068 <InflateData>
    f664:	add	r8, r8, #1
    f668:	mov	r5, #0
    f66c:	add	r8, r6, r8, lsl #10
    f670:	cmp	r5, r4
    f674:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f678:	add	r0, r7, r5, lsl #3
    f67c:	bl	18bc <Mat_int64Swap>
    f680:	bl	40090 <__aeabi_l2d>
    f684:	add	r5, r5, #1
    f688:	strd	r0, [r8], #8
    f68c:	b	f670 <ReadCompressedDoubleData+0x384>
    f690:	cmp	r4, #128	; 0x80
    f694:	bgt	f6cc <ReadCompressedDoubleData+0x3e0>
    f698:	mul	r3, r0, r4
    f69c:	mov	r2, r7
    f6a0:	ldr	r1, [sp, #4]
    f6a4:	mov	r0, r5
    f6a8:	bl	3068 <InflateData>
    f6ac:	cmp	r8, r4
    f6b0:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f6b4:	lsl	r3, r8, #3
    f6b8:	add	r8, r8, #1
    f6bc:	ldrd	r0, [r7, r3]
    f6c0:	bl	40090 <__aeabi_l2d>
    f6c4:	strd	r0, [r6], #8
    f6c8:	b	f6ac <ReadCompressedDoubleData+0x3c0>
    f6cc:	sub	r3, r4, #128	; 0x80
    f6d0:	mov	r9, r8
    f6d4:	mov	fp, r7
    f6d8:	str	r3, [sp, #8]
    f6dc:	lsl	r3, r0, #7
    f6e0:	str	r3, [sp, #12]
    f6e4:	ldr	r3, [sp, #12]
    f6e8:	mov	r2, r7
    f6ec:	ldr	r1, [sp, #4]
    f6f0:	mov	r0, r5
    f6f4:	bl	3068 <InflateData>
    f6f8:	add	r2, r6, r9, lsl #3
    f6fc:	mov	r3, #0
    f700:	ldrd	r0, [r3, fp]
    f704:	str	r2, [sp, #20]
    f708:	str	r3, [sp, #16]
    f70c:	bl	40090 <__aeabi_l2d>
    f710:	ldr	r3, [sp, #16]
    f714:	ldr	r2, [sp, #20]
    f718:	add	r3, r3, #8
    f71c:	cmp	r3, #1024	; 0x400
    f720:	strd	r0, [r2], #8
    f724:	bne	f700 <ReadCompressedDoubleData+0x414>
    f728:	ldr	r3, [sp, #8]
    f72c:	add	r9, r9, #128	; 0x80
    f730:	cmp	r3, r9
    f734:	bgt	f6e4 <ReadCompressedDoubleData+0x3f8>
    f738:	sub	r4, r4, #129	; 0x81
    f73c:	mov	r2, fp
    f740:	lsr	r9, r4, #7
    f744:	ldr	r1, [sp, #4]
    f748:	sub	r4, r3, r9, lsl #7
    f74c:	mov	r0, r5
    f750:	mul	r3, sl, r4
    f754:	bl	3068 <InflateData>
    f758:	add	r9, r9, #1
    f75c:	add	r9, r6, r9, lsl #10
    f760:	cmp	r8, r4
    f764:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f768:	lsl	r3, r8, #3
    f76c:	add	r8, r8, #1
    f770:	ldrd	r0, [r7, r3]
    f774:	bl	40090 <__aeabi_l2d>
    f778:	strd	r0, [r9], #8
    f77c:	b	f760 <ReadCompressedDoubleData+0x474>
    f780:	ldr	r8, [r5, #20]
    f784:	add	r7, sp, #24
    f788:	cmp	r8, #0
    f78c:	beq	f878 <ReadCompressedDoubleData+0x58c>
    f790:	cmp	r4, #128	; 0x80
    f794:	bgt	f7d0 <ReadCompressedDoubleData+0x4e4>
    f798:	mul	r3, r0, r4
    f79c:	mov	r2, r7
    f7a0:	mov	r0, r5
    f7a4:	ldr	r1, [sp, #4]
    f7a8:	bl	3068 <InflateData>
    f7ac:	mov	r5, #0
    f7b0:	cmp	r5, r4
    f7b4:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f7b8:	add	r0, r7, r5, lsl #3
    f7bc:	bl	1980 <Mat_uint64Swap>
    f7c0:	bl	4007c <__aeabi_ul2d>
    f7c4:	add	r5, r5, #1
    f7c8:	strd	r0, [r6], #8
    f7cc:	b	f7b0 <ReadCompressedDoubleData+0x4c4>
    f7d0:	sub	r9, r4, #128	; 0x80
    f7d4:	mov	r8, #0
    f7d8:	lsl	r3, r0, #7
    f7dc:	str	r3, [sp, #8]
    f7e0:	ldr	r3, [sp, #8]
    f7e4:	mov	r2, r7
    f7e8:	ldr	r1, [sp, #4]
    f7ec:	mov	r0, r5
    f7f0:	bl	3068 <InflateData>
    f7f4:	mov	fp, #0
    f7f8:	add	r3, r6, r8, lsl #3
    f7fc:	add	r0, r7, fp
    f800:	str	r3, [sp, #12]
    f804:	bl	1980 <Mat_uint64Swap>
    f808:	bl	4007c <__aeabi_ul2d>
    f80c:	ldr	r3, [sp, #12]
    f810:	add	fp, fp, #8
    f814:	cmp	fp, #1024	; 0x400
    f818:	strd	r0, [r3], #8
    f81c:	bne	f7fc <ReadCompressedDoubleData+0x510>
    f820:	add	r8, r8, #128	; 0x80
    f824:	cmp	r9, r8
    f828:	bgt	f7e0 <ReadCompressedDoubleData+0x4f4>
    f82c:	sub	r4, r4, #129	; 0x81
    f830:	mov	r0, r5
    f834:	lsr	r8, r4, #7
    f838:	mov	r2, r7
    f83c:	sub	r4, r9, r8, lsl #7
    f840:	ldr	r1, [sp, #4]
    f844:	mul	r3, sl, r4
    f848:	bl	3068 <InflateData>
    f84c:	add	r8, r8, #1
    f850:	mov	r5, #0
    f854:	add	r8, r6, r8, lsl #10
    f858:	cmp	r5, r4
    f85c:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f860:	add	r0, r7, r5, lsl #3
    f864:	bl	1980 <Mat_uint64Swap>
    f868:	bl	4007c <__aeabi_ul2d>
    f86c:	add	r5, r5, #1
    f870:	strd	r0, [r8], #8
    f874:	b	f858 <ReadCompressedDoubleData+0x56c>
    f878:	cmp	r4, #128	; 0x80
    f87c:	bgt	f8b4 <ReadCompressedDoubleData+0x5c8>
    f880:	mul	r3, r0, r4
    f884:	mov	r2, r7
    f888:	ldr	r1, [sp, #4]
    f88c:	mov	r0, r5
    f890:	bl	3068 <InflateData>
    f894:	cmp	r8, r4
    f898:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f89c:	lsl	r3, r8, #3
    f8a0:	add	r8, r8, #1
    f8a4:	ldrd	r0, [r7, r3]
    f8a8:	bl	4007c <__aeabi_ul2d>
    f8ac:	strd	r0, [r6], #8
    f8b0:	b	f894 <ReadCompressedDoubleData+0x5a8>
    f8b4:	sub	r3, r4, #128	; 0x80
    f8b8:	mov	r9, r8
    f8bc:	mov	fp, r7
    f8c0:	str	r3, [sp, #8]
    f8c4:	lsl	r3, r0, #7
    f8c8:	str	r3, [sp, #12]
    f8cc:	ldr	r3, [sp, #12]
    f8d0:	mov	r2, r7
    f8d4:	ldr	r1, [sp, #4]
    f8d8:	mov	r0, r5
    f8dc:	bl	3068 <InflateData>
    f8e0:	add	r2, r6, r9, lsl #3
    f8e4:	mov	r3, #0
    f8e8:	ldrd	r0, [r3, fp]
    f8ec:	str	r2, [sp, #20]
    f8f0:	str	r3, [sp, #16]
    f8f4:	bl	4007c <__aeabi_ul2d>
    f8f8:	ldr	r3, [sp, #16]
    f8fc:	ldr	r2, [sp, #20]
    f900:	add	r3, r3, #8
    f904:	cmp	r3, #1024	; 0x400
    f908:	strd	r0, [r2], #8
    f90c:	bne	f8e8 <ReadCompressedDoubleData+0x5fc>
    f910:	ldr	r3, [sp, #8]
    f914:	add	r9, r9, #128	; 0x80
    f918:	cmp	r3, r9
    f91c:	bgt	f8cc <ReadCompressedDoubleData+0x5e0>
    f920:	sub	r4, r4, #129	; 0x81
    f924:	mov	r2, fp
    f928:	lsr	r9, r4, #7
    f92c:	ldr	r1, [sp, #4]
    f930:	sub	r4, r3, r9, lsl #7
    f934:	mov	r0, r5
    f938:	mul	r3, sl, r4
    f93c:	bl	3068 <InflateData>
    f940:	add	r9, r9, #1
    f944:	add	r9, r6, r9, lsl #10
    f948:	cmp	r8, r4
    f94c:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f950:	lsl	r3, r8, #3
    f954:	add	r8, r8, #1
    f958:	ldrd	r0, [r7, r3]
    f95c:	bl	4007c <__aeabi_ul2d>
    f960:	strd	r0, [r9], #8
    f964:	b	f948 <ReadCompressedDoubleData+0x65c>
    f968:	ldr	r8, [r5, #20]
    f96c:	add	r7, sp, #24
    f970:	cmp	r8, #0
    f974:	beq	fa70 <ReadCompressedDoubleData+0x784>
    f978:	cmp	r4, #256	; 0x100
    f97c:	bgt	f9bc <ReadCompressedDoubleData+0x6d0>
    f980:	mul	r3, r0, r4
    f984:	mov	r2, r7
    f988:	mov	r0, r5
    f98c:	ldr	r1, [sp, #4]
    f990:	bl	3068 <InflateData>
    f994:	mov	r5, #0
    f998:	cmp	r5, r4
    f99c:	bge	f388 <ReadCompressedDoubleData+0x9c>
    f9a0:	add	r0, r7, r5, lsl #2
    f9a4:	bl	1a18 <Mat_int32Swap>
    f9a8:	add	r5, r5, #1
    f9ac:	vmov	s15, r0
    f9b0:	vcvt.f64.s32	d7, s15
    f9b4:	vstmia	r6!, {d7}
    f9b8:	b	f998 <ReadCompressedDoubleData+0x6ac>
    f9bc:	sub	r9, r4, #256	; 0x100
    f9c0:	mov	r8, #0
    f9c4:	lsl	r3, r0, #8
    f9c8:	str	r3, [sp, #8]
    f9cc:	ldr	r3, [sp, #8]
    f9d0:	mov	r2, r7
    f9d4:	ldr	r1, [sp, #4]
    f9d8:	mov	r0, r5
    f9dc:	bl	3068 <InflateData>
    f9e0:	mov	fp, #0
    f9e4:	add	r3, r6, r8, lsl #3
    f9e8:	add	r0, r7, fp
    f9ec:	str	r3, [sp, #12]
    f9f0:	bl	1a18 <Mat_int32Swap>
    f9f4:	ldr	r3, [sp, #12]
    f9f8:	add	fp, fp, #4
    f9fc:	cmp	fp, #1024	; 0x400
    fa00:	vmov	s15, r0
    fa04:	vcvt.f64.s32	d7, s15
    fa08:	vstmia	r3!, {d7}
    fa0c:	bne	f9e8 <ReadCompressedDoubleData+0x6fc>
    fa10:	add	r8, r8, #256	; 0x100
    fa14:	cmp	r9, r8
    fa18:	bgt	f9cc <ReadCompressedDoubleData+0x6e0>
    fa1c:	sub	r4, r4, #256	; 0x100
    fa20:	sub	r4, r4, #1
    fa24:	mov	r0, r5
    fa28:	lsr	r8, r4, #8
    fa2c:	mov	r2, r7
    fa30:	sub	r4, r9, r8, lsl #8
    fa34:	ldr	r1, [sp, #4]
    fa38:	mul	r3, sl, r4
    fa3c:	bl	3068 <InflateData>
    fa40:	add	r8, r8, #1
    fa44:	mov	r5, #0
    fa48:	add	r8, r6, r8, lsl #11
    fa4c:	cmp	r5, r4
    fa50:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fa54:	add	r0, r7, r5, lsl #2
    fa58:	bl	1a18 <Mat_int32Swap>
    fa5c:	add	r5, r5, #1
    fa60:	vmov	s15, r0
    fa64:	vcvt.f64.s32	d7, s15
    fa68:	vstmia	r8!, {d7}
    fa6c:	b	fa4c <ReadCompressedDoubleData+0x760>
    fa70:	cmp	r4, #256	; 0x100
    fa74:	bgt	fab0 <ReadCompressedDoubleData+0x7c4>
    fa78:	mul	r3, r0, r4
    fa7c:	mov	r2, r7
    fa80:	ldr	r1, [sp, #4]
    fa84:	mov	r0, r5
    fa88:	bl	3068 <InflateData>
    fa8c:	mov	r3, r6
    fa90:	cmp	r8, r4
    fa94:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fa98:	ldr	r2, [r7, r8, lsl #2]
    fa9c:	add	r8, r8, #1
    faa0:	vmov	s15, r2
    faa4:	vcvt.f64.s32	d7, s15
    faa8:	vstmia	r3!, {d7}
    faac:	b	fa90 <ReadCompressedDoubleData+0x7a4>
    fab0:	sub	fp, r4, #256	; 0x100
    fab4:	mov	r9, r8
    fab8:	lsl	r3, r0, #8
    fabc:	str	r3, [sp, #8]
    fac0:	ldr	r3, [sp, #8]
    fac4:	mov	r2, r7
    fac8:	ldr	r1, [sp, #4]
    facc:	mov	r0, r5
    fad0:	bl	3068 <InflateData>
    fad4:	add	r2, r6, r9, lsl #3
    fad8:	mov	r3, r8
    fadc:	ldr	r1, [r7, r3, lsl #2]
    fae0:	add	r3, r3, #1
    fae4:	cmp	r3, #256	; 0x100
    fae8:	vmov	s15, r1
    faec:	vcvt.f64.s32	d7, s15
    faf0:	vstmia	r2!, {d7}
    faf4:	bne	fadc <ReadCompressedDoubleData+0x7f0>
    faf8:	add	r9, r9, #256	; 0x100
    fafc:	cmp	fp, r9
    fb00:	bgt	fac0 <ReadCompressedDoubleData+0x7d4>
    fb04:	sub	r4, r4, #256	; 0x100
    fb08:	sub	r4, r4, #1
    fb0c:	mov	r2, r7
    fb10:	lsr	r9, r4, #8
    fb14:	ldr	r1, [sp, #4]
    fb18:	sub	r4, fp, r9, lsl #8
    fb1c:	mov	r0, r5
    fb20:	mul	r3, sl, r4
    fb24:	bl	3068 <InflateData>
    fb28:	add	r9, r9, #1
    fb2c:	add	r9, r6, r9, lsl #11
    fb30:	cmp	r8, r4
    fb34:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fb38:	ldr	r3, [r7, r8, lsl #2]
    fb3c:	add	r8, r8, #1
    fb40:	vmov	s15, r3
    fb44:	vcvt.f64.s32	d7, s15
    fb48:	vstmia	r9!, {d7}
    fb4c:	b	fb30 <ReadCompressedDoubleData+0x844>
    fb50:	ldr	r8, [r5, #20]
    fb54:	add	r7, sp, #24
    fb58:	cmp	r8, #0
    fb5c:	beq	fc58 <ReadCompressedDoubleData+0x96c>
    fb60:	cmp	r4, #256	; 0x100
    fb64:	bgt	fba4 <ReadCompressedDoubleData+0x8b8>
    fb68:	mul	r3, r0, r4
    fb6c:	mov	r2, r7
    fb70:	mov	r0, r5
    fb74:	ldr	r1, [sp, #4]
    fb78:	bl	3068 <InflateData>
    fb7c:	mov	r5, #0
    fb80:	cmp	r5, r4
    fb84:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fb88:	add	r0, r7, r5, lsl #2
    fb8c:	bl	1a80 <Mat_uint32Swap>
    fb90:	add	r5, r5, #1
    fb94:	vmov	s15, r0
    fb98:	vcvt.f64.u32	d7, s15
    fb9c:	vstmia	r6!, {d7}
    fba0:	b	fb80 <ReadCompressedDoubleData+0x894>
    fba4:	sub	r9, r4, #256	; 0x100
    fba8:	mov	r8, #0
    fbac:	lsl	r3, r0, #8
    fbb0:	str	r3, [sp, #8]
    fbb4:	ldr	r3, [sp, #8]
    fbb8:	mov	r2, r7
    fbbc:	ldr	r1, [sp, #4]
    fbc0:	mov	r0, r5
    fbc4:	bl	3068 <InflateData>
    fbc8:	mov	fp, #0
    fbcc:	add	r3, r6, r8, lsl #3
    fbd0:	add	r0, r7, fp
    fbd4:	str	r3, [sp, #12]
    fbd8:	bl	1a80 <Mat_uint32Swap>
    fbdc:	ldr	r3, [sp, #12]
    fbe0:	add	fp, fp, #4
    fbe4:	cmp	fp, #1024	; 0x400
    fbe8:	vmov	s15, r0
    fbec:	vcvt.f64.u32	d7, s15
    fbf0:	vstmia	r3!, {d7}
    fbf4:	bne	fbd0 <ReadCompressedDoubleData+0x8e4>
    fbf8:	add	r8, r8, #256	; 0x100
    fbfc:	cmp	r9, r8
    fc00:	bgt	fbb4 <ReadCompressedDoubleData+0x8c8>
    fc04:	sub	r4, r4, #256	; 0x100
    fc08:	sub	r4, r4, #1
    fc0c:	mov	r0, r5
    fc10:	lsr	r8, r4, #8
    fc14:	mov	r2, r7
    fc18:	sub	r4, r9, r8, lsl #8
    fc1c:	ldr	r1, [sp, #4]
    fc20:	mul	r3, sl, r4
    fc24:	bl	3068 <InflateData>
    fc28:	add	r8, r8, #1
    fc2c:	mov	r5, #0
    fc30:	add	r8, r6, r8, lsl #11
    fc34:	cmp	r5, r4
    fc38:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fc3c:	add	r0, r7, r5, lsl #2
    fc40:	bl	1a80 <Mat_uint32Swap>
    fc44:	add	r5, r5, #1
    fc48:	vmov	s15, r0
    fc4c:	vcvt.f64.u32	d7, s15
    fc50:	vstmia	r8!, {d7}
    fc54:	b	fc34 <ReadCompressedDoubleData+0x948>
    fc58:	cmp	r4, #256	; 0x100
    fc5c:	bgt	fc98 <ReadCompressedDoubleData+0x9ac>
    fc60:	mul	r3, r0, r4
    fc64:	mov	r2, r7
    fc68:	ldr	r1, [sp, #4]
    fc6c:	mov	r0, r5
    fc70:	bl	3068 <InflateData>
    fc74:	mov	r3, r6
    fc78:	cmp	r8, r4
    fc7c:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fc80:	ldr	r2, [r7, r8, lsl #2]
    fc84:	add	r8, r8, #1
    fc88:	vmov	s15, r2
    fc8c:	vcvt.f64.u32	d7, s15
    fc90:	vstmia	r3!, {d7}
    fc94:	b	fc78 <ReadCompressedDoubleData+0x98c>
    fc98:	sub	fp, r4, #256	; 0x100
    fc9c:	mov	r9, r8
    fca0:	lsl	r3, r0, #8
    fca4:	str	r3, [sp, #8]
    fca8:	ldr	r3, [sp, #8]
    fcac:	mov	r2, r7
    fcb0:	ldr	r1, [sp, #4]
    fcb4:	mov	r0, r5
    fcb8:	bl	3068 <InflateData>
    fcbc:	add	r2, r6, r9, lsl #3
    fcc0:	mov	r3, r8
    fcc4:	ldr	r1, [r7, r3, lsl #2]
    fcc8:	add	r3, r3, #1
    fccc:	cmp	r3, #256	; 0x100
    fcd0:	vmov	s15, r1
    fcd4:	vcvt.f64.u32	d7, s15
    fcd8:	vstmia	r2!, {d7}
    fcdc:	bne	fcc4 <ReadCompressedDoubleData+0x9d8>
    fce0:	add	r9, r9, #256	; 0x100
    fce4:	cmp	fp, r9
    fce8:	bgt	fca8 <ReadCompressedDoubleData+0x9bc>
    fcec:	sub	r4, r4, #256	; 0x100
    fcf0:	sub	r4, r4, #1
    fcf4:	mov	r2, r7
    fcf8:	lsr	r9, r4, #8
    fcfc:	ldr	r1, [sp, #4]
    fd00:	sub	r4, fp, r9, lsl #8
    fd04:	mov	r0, r5
    fd08:	mul	r3, sl, r4
    fd0c:	bl	3068 <InflateData>
    fd10:	add	r9, r9, #1
    fd14:	add	r9, r6, r9, lsl #11
    fd18:	cmp	r8, r4
    fd1c:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fd20:	ldr	r3, [r7, r8, lsl #2]
    fd24:	add	r8, r8, #1
    fd28:	vmov	s15, r3
    fd2c:	vcvt.f64.u32	d7, s15
    fd30:	vstmia	r9!, {d7}
    fd34:	b	fd18 <ReadCompressedDoubleData+0xa2c>
    fd38:	ldr	r8, [r5, #20]
    fd3c:	add	r7, sp, #24
    fd40:	cmp	r8, #0
    fd44:	beq	fe40 <ReadCompressedDoubleData+0xb54>
    fd48:	cmp	r4, #512	; 0x200
    fd4c:	bgt	fd8c <ReadCompressedDoubleData+0xaa0>
    fd50:	mul	r3, r0, r4
    fd54:	mov	r2, r7
    fd58:	mov	r0, r5
    fd5c:	ldr	r1, [sp, #4]
    fd60:	bl	3068 <InflateData>
    fd64:	mov	r5, #0
    fd68:	cmp	r5, r4
    fd6c:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fd70:	add	r0, r7, r5, lsl #1
    fd74:	bl	1adc <Mat_int16Swap>
    fd78:	add	r5, r5, #1
    fd7c:	vmov	s15, r0
    fd80:	vcvt.f64.s32	d7, s15
    fd84:	vstmia	r6!, {d7}
    fd88:	b	fd68 <ReadCompressedDoubleData+0xa7c>
    fd8c:	sub	r9, r4, #512	; 0x200
    fd90:	mov	r8, #0
    fd94:	lsl	r3, r0, #9
    fd98:	str	r3, [sp, #8]
    fd9c:	ldr	r3, [sp, #8]
    fda0:	mov	r2, r7
    fda4:	ldr	r1, [sp, #4]
    fda8:	mov	r0, r5
    fdac:	bl	3068 <InflateData>
    fdb0:	mov	fp, #0
    fdb4:	add	r3, r6, r8, lsl #3
    fdb8:	add	r0, r7, fp
    fdbc:	str	r3, [sp, #12]
    fdc0:	bl	1adc <Mat_int16Swap>
    fdc4:	ldr	r3, [sp, #12]
    fdc8:	add	fp, fp, #2
    fdcc:	cmp	fp, #1024	; 0x400
    fdd0:	vmov	s15, r0
    fdd4:	vcvt.f64.s32	d7, s15
    fdd8:	vstmia	r3!, {d7}
    fddc:	bne	fdb8 <ReadCompressedDoubleData+0xacc>
    fde0:	add	r8, r8, #512	; 0x200
    fde4:	cmp	r9, r8
    fde8:	bgt	fd9c <ReadCompressedDoubleData+0xab0>
    fdec:	sub	r4, r4, #512	; 0x200
    fdf0:	sub	r4, r4, #1
    fdf4:	mov	r0, r5
    fdf8:	lsr	r8, r4, #9
    fdfc:	mov	r2, r7
    fe00:	sub	r4, r9, r8, lsl #9
    fe04:	ldr	r1, [sp, #4]
    fe08:	mul	r3, sl, r4
    fe0c:	bl	3068 <InflateData>
    fe10:	add	r8, r8, #1
    fe14:	mov	r5, #0
    fe18:	add	r8, r6, r8, lsl #12
    fe1c:	cmp	r5, r4
    fe20:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fe24:	add	r0, r7, r5, lsl #1
    fe28:	bl	1adc <Mat_int16Swap>
    fe2c:	add	r5, r5, #1
    fe30:	vmov	s15, r0
    fe34:	vcvt.f64.s32	d7, s15
    fe38:	vstmia	r8!, {d7}
    fe3c:	b	fe1c <ReadCompressedDoubleData+0xb30>
    fe40:	cmp	r4, #512	; 0x200
    fe44:	bgt	fe84 <ReadCompressedDoubleData+0xb98>
    fe48:	mul	r3, r0, r4
    fe4c:	mov	r2, r7
    fe50:	ldr	r1, [sp, #4]
    fe54:	mov	r0, r5
    fe58:	bl	3068 <InflateData>
    fe5c:	mov	r3, r6
    fe60:	cmp	r8, r4
    fe64:	bge	f388 <ReadCompressedDoubleData+0x9c>
    fe68:	lsl	r2, r8, #1
    fe6c:	add	r8, r8, #1
    fe70:	ldrsh	r2, [r7, r2]
    fe74:	vmov	s14, r2
    fe78:	vcvt.f64.s32	d7, s14
    fe7c:	vstmia	r3!, {d7}
    fe80:	b	fe60 <ReadCompressedDoubleData+0xb74>
    fe84:	sub	fp, r4, #512	; 0x200
    fe88:	mov	r9, r8
    fe8c:	lsl	r3, r0, #9
    fe90:	str	r3, [sp, #8]
    fe94:	ldr	r3, [sp, #8]
    fe98:	mov	r2, r7
    fe9c:	ldr	r1, [sp, #4]
    fea0:	mov	r0, r5
    fea4:	bl	3068 <InflateData>
    fea8:	add	r2, r6, r9, lsl #3
    feac:	mov	r3, #0
    feb0:	ldrsh	r1, [r7, r3]
    feb4:	add	r3, r3, #2
    feb8:	cmp	r3, #1024	; 0x400
    febc:	vmov	s14, r1
    fec0:	vcvt.f64.s32	d7, s14
    fec4:	vstmia	r2!, {d7}
    fec8:	bne	feb0 <ReadCompressedDoubleData+0xbc4>
    fecc:	add	r9, r9, #512	; 0x200
    fed0:	cmp	fp, r9
    fed4:	bgt	fe94 <ReadCompressedDoubleData+0xba8>
    fed8:	sub	r4, r4, #512	; 0x200
    fedc:	sub	r4, r4, #1
    fee0:	mov	r2, r7
    fee4:	lsr	r9, r4, #9
    fee8:	ldr	r1, [sp, #4]
    feec:	sub	r4, fp, r9, lsl #9
    fef0:	mov	r0, r5
    fef4:	mul	r3, sl, r4
    fef8:	bl	3068 <InflateData>
    fefc:	add	r9, r9, #1
    ff00:	add	r9, r6, r9, lsl #12
    ff04:	cmp	r8, r4
    ff08:	bge	f388 <ReadCompressedDoubleData+0x9c>
    ff0c:	lsl	r3, r8, #1
    ff10:	add	r8, r8, #1
    ff14:	ldrsh	r3, [r7, r3]
    ff18:	vmov	s14, r3
    ff1c:	vcvt.f64.s32	d7, s14
    ff20:	vstmia	r9!, {d7}
    ff24:	b	ff04 <ReadCompressedDoubleData+0xc18>
    ff28:	ldr	r8, [r5, #20]
    ff2c:	add	r7, sp, #24
    ff30:	cmp	r8, #0
    ff34:	beq	10030 <ReadCompressedDoubleData+0xd44>
    ff38:	cmp	r4, #512	; 0x200
    ff3c:	bgt	ff7c <ReadCompressedDoubleData+0xc90>
    ff40:	mul	r3, r0, r4
    ff44:	mov	r2, r7
    ff48:	mov	r0, r5
    ff4c:	ldr	r1, [sp, #4]
    ff50:	bl	3068 <InflateData>
    ff54:	mov	r5, #0
    ff58:	cmp	r5, r4
    ff5c:	bge	f388 <ReadCompressedDoubleData+0x9c>
    ff60:	add	r0, r7, r5, lsl #1
    ff64:	bl	1b10 <Mat_uint16Swap>
    ff68:	add	r5, r5, #1
    ff6c:	vmov	s15, r0
    ff70:	vcvt.f64.u32	d7, s15
    ff74:	vstmia	r6!, {d7}
    ff78:	b	ff58 <ReadCompressedDoubleData+0xc6c>
    ff7c:	sub	r9, r4, #512	; 0x200
    ff80:	mov	r8, #0
    ff84:	lsl	r3, r0, #9
    ff88:	str	r3, [sp, #8]
    ff8c:	ldr	r3, [sp, #8]
    ff90:	mov	r2, r7
    ff94:	ldr	r1, [sp, #4]
    ff98:	mov	r0, r5
    ff9c:	bl	3068 <InflateData>
    ffa0:	mov	fp, #0
    ffa4:	add	r3, r6, r8, lsl #3
    ffa8:	add	r0, r7, fp
    ffac:	str	r3, [sp, #12]
    ffb0:	bl	1b10 <Mat_uint16Swap>
    ffb4:	ldr	r3, [sp, #12]
    ffb8:	add	fp, fp, #2
    ffbc:	cmp	fp, #1024	; 0x400
    ffc0:	vmov	s15, r0
    ffc4:	vcvt.f64.u32	d7, s15
    ffc8:	vstmia	r3!, {d7}
    ffcc:	bne	ffa8 <ReadCompressedDoubleData+0xcbc>
    ffd0:	add	r8, r8, #512	; 0x200
    ffd4:	cmp	r9, r8
    ffd8:	bgt	ff8c <ReadCompressedDoubleData+0xca0>
    ffdc:	sub	r4, r4, #512	; 0x200
    ffe0:	sub	r4, r4, #1
    ffe4:	mov	r0, r5
    ffe8:	lsr	r8, r4, #9
    ffec:	mov	r2, r7
    fff0:	sub	r4, r9, r8, lsl #9
    fff4:	ldr	r1, [sp, #4]
    fff8:	mul	r3, sl, r4
    fffc:	bl	3068 <InflateData>
   10000:	add	r8, r8, #1
   10004:	mov	r5, #0
   10008:	add	r8, r6, r8, lsl #12
   1000c:	cmp	r5, r4
   10010:	bge	f388 <ReadCompressedDoubleData+0x9c>
   10014:	add	r0, r7, r5, lsl #1
   10018:	bl	1b10 <Mat_uint16Swap>
   1001c:	add	r5, r5, #1
   10020:	vmov	s15, r0
   10024:	vcvt.f64.u32	d7, s15
   10028:	vstmia	r8!, {d7}
   1002c:	b	1000c <ReadCompressedDoubleData+0xd20>
   10030:	cmp	r4, #512	; 0x200
   10034:	bgt	10074 <ReadCompressedDoubleData+0xd88>
   10038:	mul	r3, r0, r4
   1003c:	mov	r2, r7
   10040:	ldr	r1, [sp, #4]
   10044:	mov	r0, r5
   10048:	bl	3068 <InflateData>
   1004c:	mov	r3, r6
   10050:	cmp	r8, r4
   10054:	bge	f388 <ReadCompressedDoubleData+0x9c>
   10058:	lsl	r2, r8, #1
   1005c:	add	r8, r8, #1
   10060:	ldrh	r2, [r7, r2]
   10064:	vmov	s14, r2
   10068:	vcvt.f64.u32	d7, s14
   1006c:	vstmia	r3!, {d7}
   10070:	b	10050 <ReadCompressedDoubleData+0xd64>
   10074:	sub	fp, r4, #512	; 0x200
   10078:	mov	r9, r8
   1007c:	lsl	r3, r0, #9
   10080:	str	r3, [sp, #8]
   10084:	ldr	r3, [sp, #8]
   10088:	mov	r2, r7
   1008c:	ldr	r1, [sp, #4]
   10090:	mov	r0, r5
   10094:	bl	3068 <InflateData>
   10098:	add	r2, r6, r9, lsl #3
   1009c:	mov	r3, #0
   100a0:	ldrh	r1, [r7, r3]
   100a4:	add	r3, r3, #2
   100a8:	cmp	r3, #1024	; 0x400
   100ac:	vmov	s14, r1
   100b0:	vcvt.f64.u32	d7, s14
   100b4:	vstmia	r2!, {d7}
   100b8:	bne	100a0 <ReadCompressedDoubleData+0xdb4>
   100bc:	add	r9, r9, #512	; 0x200
   100c0:	cmp	fp, r9
   100c4:	bgt	10084 <ReadCompressedDoubleData+0xd98>
   100c8:	sub	r4, r4, #512	; 0x200
   100cc:	sub	r4, r4, #1
   100d0:	mov	r2, r7
   100d4:	lsr	r9, r4, #9
   100d8:	ldr	r1, [sp, #4]
   100dc:	sub	r4, fp, r9, lsl #9
   100e0:	mov	r0, r5
   100e4:	mul	r3, sl, r4
   100e8:	bl	3068 <InflateData>
   100ec:	add	r9, r9, #1
   100f0:	add	r9, r6, r9, lsl #12
   100f4:	cmp	r8, r4
   100f8:	bge	f388 <ReadCompressedDoubleData+0x9c>
   100fc:	lsl	r3, r8, #1
   10100:	add	r8, r8, #1
   10104:	ldrh	r3, [r7, r3]
   10108:	vmov	s14, r3
   1010c:	vcvt.f64.u32	d7, s14
   10110:	vstmia	r9!, {d7}
   10114:	b	100f4 <ReadCompressedDoubleData+0xe08>
   10118:	cmp	r4, #1024	; 0x400
   1011c:	add	r7, sp, #24
   10120:	subgt	r9, r4, #1024	; 0x400
   10124:	lslgt	fp, r0, #10
   10128:	movgt	r8, #0
   1012c:	bgt	1016c <ReadCompressedDoubleData+0xe80>
   10130:	mul	r3, r0, r4
   10134:	mov	r2, r7
   10138:	ldr	r1, [sp, #4]
   1013c:	mov	r0, r5
   10140:	bl	3068 <InflateData>
   10144:	mov	r2, r6
   10148:	mov	r3, #0
   1014c:	cmp	r3, r4
   10150:	bge	f388 <ReadCompressedDoubleData+0x9c>
   10154:	ldrb	r1, [r7, r3]
   10158:	add	r3, r3, #1
   1015c:	vmov	s14, r1
   10160:	vcvt.f64.u32	d7, s14
   10164:	vstmia	r2!, {d7}
   10168:	b	1014c <ReadCompressedDoubleData+0xe60>
   1016c:	mov	r3, fp
   10170:	mov	r2, r7
   10174:	ldr	r1, [sp, #4]
   10178:	mov	r0, r5
   1017c:	bl	3068 <InflateData>
   10180:	add	r2, r6, r8, lsl #3
   10184:	mov	r3, #0
   10188:	ldrb	r1, [r7, r3]
   1018c:	add	r3, r3, #1
   10190:	cmp	r3, #1024	; 0x400
   10194:	vmov	s14, r1
   10198:	vcvt.f64.u32	d7, s14
   1019c:	vstmia	r2!, {d7}
   101a0:	bne	10188 <ReadCompressedDoubleData+0xe9c>
   101a4:	add	r8, r8, #1024	; 0x400
   101a8:	cmp	r9, r8
   101ac:	bgt	1016c <ReadCompressedDoubleData+0xe80>
   101b0:	sub	r4, r4, #1024	; 0x400
   101b4:	sub	r4, r4, #1
   101b8:	mov	r2, r7
   101bc:	lsr	r8, r4, #10
   101c0:	ldr	r1, [sp, #4]
   101c4:	sub	r4, r9, r8, lsl #10
   101c8:	add	r8, r8, #1
   101cc:	mul	r3, sl, r4
   101d0:	mov	r0, r5
   101d4:	bl	3068 <InflateData>
   101d8:	add	r8, r6, r8, lsl #13
   101dc:	mov	r3, #0
   101e0:	cmp	r3, r4
   101e4:	bge	f388 <ReadCompressedDoubleData+0x9c>
   101e8:	ldrb	r2, [r7, r3]
   101ec:	add	r3, r3, #1
   101f0:	vmov	s14, r2
   101f4:	vcvt.f64.u32	d7, s14
   101f8:	vstmia	r8!, {d7}
   101fc:	b	101e0 <ReadCompressedDoubleData+0xef4>
   10200:	cmp	r4, #1024	; 0x400
   10204:	add	r7, sp, #24
   10208:	subgt	r9, r4, #1024	; 0x400
   1020c:	lslgt	fp, r0, #10
   10210:	movgt	r8, #0
   10214:	bgt	10254 <ReadCompressedDoubleData+0xf68>
   10218:	mul	r3, r0, r4
   1021c:	mov	r2, r7
   10220:	ldr	r1, [sp, #4]
   10224:	mov	r0, r5
   10228:	bl	3068 <InflateData>
   1022c:	mov	r2, r6
   10230:	mov	r3, #0
   10234:	cmp	r3, r4
   10238:	bge	f388 <ReadCompressedDoubleData+0x9c>
   1023c:	ldrsb	r1, [r7, r3]
   10240:	add	r3, r3, #1
   10244:	vmov	s14, r1
   10248:	vcvt.f64.s32	d7, s14
   1024c:	vstmia	r2!, {d7}
   10250:	b	10234 <ReadCompressedDoubleData+0xf48>
   10254:	mov	r3, fp
   10258:	mov	r2, r7
   1025c:	ldr	r1, [sp, #4]
   10260:	mov	r0, r5
   10264:	bl	3068 <InflateData>
   10268:	add	r2, r6, r8, lsl #3
   1026c:	mov	r3, #0
   10270:	ldrsb	r1, [r7, r3]
   10274:	add	r3, r3, #1
   10278:	cmp	r3, #1024	; 0x400
   1027c:	vmov	s14, r1
   10280:	vcvt.f64.s32	d7, s14
   10284:	vstmia	r2!, {d7}
   10288:	bne	10270 <ReadCompressedDoubleData+0xf84>
   1028c:	add	r8, r8, #1024	; 0x400
   10290:	cmp	r9, r8
   10294:	bgt	10254 <ReadCompressedDoubleData+0xf68>
   10298:	sub	r4, r4, #1024	; 0x400
   1029c:	sub	r4, r4, #1
   102a0:	mov	r2, r7
   102a4:	lsr	r8, r4, #10
   102a8:	ldr	r1, [sp, #4]
   102ac:	sub	r4, r9, r8, lsl #10
   102b0:	mov	r0, r5
   102b4:	mul	r3, sl, r4
   102b8:	bl	3068 <InflateData>
   102bc:	add	r3, r8, #1
   102c0:	mov	r2, #0
   102c4:	add	r3, r6, r3, lsl #13
   102c8:	cmp	r2, r4
   102cc:	bge	f388 <ReadCompressedDoubleData+0x9c>
   102d0:	ldrsb	r1, [r7, r2]
   102d4:	add	r2, r2, #1
   102d8:	vmov	s14, r1
   102dc:	vcvt.f64.s32	d7, s14
   102e0:	vstmia	r3!, {d7}
   102e4:	b	102c8 <ReadCompressedDoubleData+0xfdc>
   102e8:	mov	r0, #0
   102ec:	b	f38c <ReadCompressedDoubleData+0xa0>

000102f0 <ReadSingleData>:
   102f0:	cmp	r1, #0
   102f4:	cmpne	r0, #0
   102f8:	beq	1030c <ReadSingleData+0x1c>
   102fc:	ldr	ip, [r0]
   10300:	cmp	ip, #0
   10304:	beq	1030c <ReadSingleData+0x1c>
   10308:	b	4828 <ReadSingleData.part.1>
   1030c:	mov	r0, #0
   10310:	bx	lr

00010314 <ReadCompressedSingleData>:
   10314:	cmp	r1, #0
   10318:	cmpne	r2, #0
   1031c:	moveq	ip, #1
   10320:	movne	ip, #0
   10324:	cmp	r0, #0
   10328:	orreq	ip, ip, #1
   1032c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10330:	cmp	ip, #0
   10334:	ldr	r8, [sp, #40]	; 0x28
   10338:	movne	r0, #0
   1033c:	bne	10484 <ReadCompressedSingleData+0x170>
   10340:	mov	r5, r0
   10344:	mov	r0, r3
   10348:	mov	r9, r3
   1034c:	mov	r7, r1
   10350:	mov	r4, r2
   10354:	bl	1600 <Mat_SizeOf@plt>
   10358:	sub	r3, r9, #1
   1035c:	mov	r6, r0
   10360:	cmp	r3, #8
   10364:	addls	pc, pc, r3, lsl #2
   10368:	b	10708 <ReadCompressedSingleData+0x3f4>
   1036c:	b	103cc <ReadCompressedSingleData+0xb8>
   10370:	b	10390 <ReadCompressedSingleData+0x7c>
   10374:	b	10600 <ReadCompressedSingleData+0x2ec>
   10378:	b	10684 <ReadCompressedSingleData+0x370>
   1037c:	b	10500 <ReadCompressedSingleData+0x1ec>
   10380:	b	10580 <ReadCompressedSingleData+0x26c>
   10384:	b	1048c <ReadCompressedSingleData+0x178>
   10388:	b	10708 <ReadCompressedSingleData+0x3f4>
   1038c:	b	10408 <ReadCompressedSingleData+0xf4>
   10390:	mov	r9, #0
   10394:	mov	sl, sp
   10398:	cmp	r8, r9
   1039c:	ble	10480 <ReadCompressedSingleData+0x16c>
   103a0:	mov	r3, r6
   103a4:	mov	r2, sl
   103a8:	mov	r1, r7
   103ac:	mov	r0, r5
   103b0:	bl	3068 <InflateData>
   103b4:	ldrb	r3, [sp]
   103b8:	add	r9, r9, #1
   103bc:	vmov	s15, r3
   103c0:	vcvt.f32.u32	s15, s15
   103c4:	vstmia	r4!, {s15}
   103c8:	b	10398 <ReadCompressedSingleData+0x84>
   103cc:	mov	r9, #0
   103d0:	mov	sl, sp
   103d4:	cmp	r8, r9
   103d8:	ble	10480 <ReadCompressedSingleData+0x16c>
   103dc:	mov	r3, r6
   103e0:	mov	r2, sl
   103e4:	mov	r1, r7
   103e8:	mov	r0, r5
   103ec:	bl	3068 <InflateData>
   103f0:	ldrsb	r3, [sp]
   103f4:	add	r9, r9, #1
   103f8:	vmov	s15, r3
   103fc:	vcvt.f32.s32	s15, s15
   10400:	vstmia	r4!, {s15}
   10404:	b	103d4 <ReadCompressedSingleData+0xc0>
   10408:	ldr	r9, [r5, #20]
   1040c:	cmp	r9, #0
   10410:	moveq	sl, sp
   10414:	movne	r9, #0
   10418:	movne	sl, sp
   1041c:	bne	10478 <ReadCompressedSingleData+0x164>
   10420:	cmp	r8, r9
   10424:	ble	10480 <ReadCompressedSingleData+0x16c>
   10428:	mov	r3, r6
   1042c:	mov	r2, sl
   10430:	mov	r1, r7
   10434:	mov	r0, r5
   10438:	bl	3068 <InflateData>
   1043c:	vldr	d7, [sp]
   10440:	add	r9, r9, #1
   10444:	vcvt.f32.f64	s14, d7
   10448:	vstmia	r4!, {s14}
   1044c:	b	10420 <ReadCompressedSingleData+0x10c>
   10450:	mov	r3, r6
   10454:	mov	r2, sl
   10458:	mov	r1, r7
   1045c:	mov	r0, r5
   10460:	bl	3068 <InflateData>
   10464:	mov	r0, sl
   10468:	bl	1b88 <Mat_doubleSwap>
   1046c:	add	r9, r9, #1
   10470:	vcvt.f32.f64	s0, d0
   10474:	vstmia	r4!, {s0}
   10478:	cmp	r8, r9
   1047c:	bgt	10450 <ReadCompressedSingleData+0x13c>
   10480:	mul	r0, r6, r8
   10484:	add	sp, sp, #8
   10488:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1048c:	ldr	r9, [r5, #20]
   10490:	cmp	r9, #0
   10494:	moveq	sl, sp
   10498:	movne	r9, #0
   1049c:	movne	sl, sp
   104a0:	bne	104f4 <ReadCompressedSingleData+0x1e0>
   104a4:	cmp	r8, r9
   104a8:	ble	10480 <ReadCompressedSingleData+0x16c>
   104ac:	mov	r3, r6
   104b0:	mov	r2, sl
   104b4:	mov	r1, r7
   104b8:	mov	r0, r5
   104bc:	bl	3068 <InflateData>
   104c0:	ldr	r3, [sp]
   104c4:	add	r9, r9, #1
   104c8:	str	r3, [r4], #4
   104cc:	b	104a4 <ReadCompressedSingleData+0x190>
   104d0:	mov	r3, r6
   104d4:	mov	r2, sl
   104d8:	mov	r1, r7
   104dc:	mov	r0, r5
   104e0:	bl	3068 <InflateData>
   104e4:	mov	r0, sl
   104e8:	bl	1b2c <Mat_floatSwap>
   104ec:	add	r9, r9, #1
   104f0:	vstmia	r4!, {s0}
   104f4:	cmp	r8, r9
   104f8:	bgt	104d0 <ReadCompressedSingleData+0x1bc>
   104fc:	b	10480 <ReadCompressedSingleData+0x16c>
   10500:	ldr	r9, [r5, #20]
   10504:	cmp	r9, #0
   10508:	moveq	sl, sp
   1050c:	movne	r9, #0
   10510:	movne	sl, sp
   10514:	bne	10574 <ReadCompressedSingleData+0x260>
   10518:	cmp	r8, r9
   1051c:	ble	10480 <ReadCompressedSingleData+0x16c>
   10520:	mov	r3, r6
   10524:	mov	r2, sl
   10528:	mov	r1, r7
   1052c:	mov	r0, r5
   10530:	bl	3068 <InflateData>
   10534:	vldr	s15, [sp]
   10538:	add	r9, r9, #1
   1053c:	vcvt.f32.s32	s15, s15
   10540:	vstmia	r4!, {s15}
   10544:	b	10518 <ReadCompressedSingleData+0x204>
   10548:	mov	r3, r6
   1054c:	mov	r2, sl
   10550:	mov	r1, r7
   10554:	mov	r0, r5
   10558:	bl	3068 <InflateData>
   1055c:	mov	r0, sl
   10560:	bl	1a18 <Mat_int32Swap>
   10564:	add	r9, r9, #1
   10568:	vmov	s15, r0
   1056c:	vcvt.f32.s32	s15, s15
   10570:	vstmia	r4!, {s15}
   10574:	cmp	r8, r9
   10578:	bgt	10548 <ReadCompressedSingleData+0x234>
   1057c:	b	10480 <ReadCompressedSingleData+0x16c>
   10580:	ldr	r9, [r5, #20]
   10584:	cmp	r9, #0
   10588:	moveq	sl, sp
   1058c:	movne	r9, #0
   10590:	movne	sl, sp
   10594:	bne	105f4 <ReadCompressedSingleData+0x2e0>
   10598:	cmp	r8, r9
   1059c:	ble	10480 <ReadCompressedSingleData+0x16c>
   105a0:	mov	r3, r6
   105a4:	mov	r2, sl
   105a8:	mov	r1, r7
   105ac:	mov	r0, r5
   105b0:	bl	3068 <InflateData>
   105b4:	vldr	s15, [sp]
   105b8:	add	r9, r9, #1
   105bc:	vcvt.f32.u32	s15, s15
   105c0:	vstmia	r4!, {s15}
   105c4:	b	10598 <ReadCompressedSingleData+0x284>
   105c8:	mov	r3, r6
   105cc:	mov	r2, sl
   105d0:	mov	r1, r7
   105d4:	mov	r0, r5
   105d8:	bl	3068 <InflateData>
   105dc:	mov	r0, sl
   105e0:	bl	1a80 <Mat_uint32Swap>
   105e4:	add	r9, r9, #1
   105e8:	vmov	s15, r0
   105ec:	vcvt.f32.u32	s15, s15
   105f0:	vstmia	r4!, {s15}
   105f4:	cmp	r8, r9
   105f8:	bgt	105c8 <ReadCompressedSingleData+0x2b4>
   105fc:	b	10480 <ReadCompressedSingleData+0x16c>
   10600:	ldr	r9, [r5, #20]
   10604:	cmp	r9, #0
   10608:	moveq	sl, sp
   1060c:	movne	r9, #0
   10610:	movne	sl, sp
   10614:	bne	10678 <ReadCompressedSingleData+0x364>
   10618:	cmp	r8, r9
   1061c:	ble	10480 <ReadCompressedSingleData+0x16c>
   10620:	mov	r3, r6
   10624:	mov	r2, sl
   10628:	mov	r1, r7
   1062c:	mov	r0, r5
   10630:	bl	3068 <InflateData>
   10634:	ldrsh	r3, [sp]
   10638:	add	r9, r9, #1
   1063c:	vmov	s15, r3
   10640:	vcvt.f32.s32	s15, s15
   10644:	vstmia	r4!, {s15}
   10648:	b	10618 <ReadCompressedSingleData+0x304>
   1064c:	mov	r3, r6
   10650:	mov	r2, sl
   10654:	mov	r1, r7
   10658:	mov	r0, r5
   1065c:	bl	3068 <InflateData>
   10660:	mov	r0, sl
   10664:	bl	1adc <Mat_int16Swap>
   10668:	add	r9, r9, #1
   1066c:	vmov	s15, r0
   10670:	vcvt.f32.s32	s15, s15
   10674:	vstmia	r4!, {s15}
   10678:	cmp	r8, r9
   1067c:	bgt	1064c <ReadCompressedSingleData+0x338>
   10680:	b	10480 <ReadCompressedSingleData+0x16c>
   10684:	ldr	r9, [r5, #20]
   10688:	cmp	r9, #0
   1068c:	moveq	sl, sp
   10690:	movne	r9, #0
   10694:	movne	sl, sp
   10698:	bne	106fc <ReadCompressedSingleData+0x3e8>
   1069c:	cmp	r8, r9
   106a0:	ble	10480 <ReadCompressedSingleData+0x16c>
   106a4:	mov	r3, r6
   106a8:	mov	r2, sl
   106ac:	mov	r1, r7
   106b0:	mov	r0, r5
   106b4:	bl	3068 <InflateData>
   106b8:	ldrh	r3, [sp]
   106bc:	add	r9, r9, #1
   106c0:	vmov	s15, r3
   106c4:	vcvt.f32.u32	s15, s15
   106c8:	vstmia	r4!, {s15}
   106cc:	b	1069c <ReadCompressedSingleData+0x388>
   106d0:	mov	r3, r6
   106d4:	mov	r2, sl
   106d8:	mov	r1, r7
   106dc:	mov	r0, r5
   106e0:	bl	3068 <InflateData>
   106e4:	mov	r0, sl
   106e8:	bl	1b10 <Mat_uint16Swap>
   106ec:	add	r9, r9, #1
   106f0:	vmov	s15, r0
   106f4:	vcvt.f32.u32	s15, s15
   106f8:	vstmia	r4!, {s15}
   106fc:	cmp	r8, r9
   10700:	bgt	106d0 <ReadCompressedSingleData+0x3bc>
   10704:	b	10480 <ReadCompressedSingleData+0x16c>
   10708:	cmp	r9, #12
   1070c:	bne	1078c <ReadCompressedSingleData+0x478>
   10710:	ldr	r9, [r5, #20]
   10714:	cmp	r9, #0
   10718:	moveq	sl, sp
   1071c:	movne	r9, #0
   10720:	movne	sl, sp
   10724:	bne	10780 <ReadCompressedSingleData+0x46c>
   10728:	cmp	r8, r9
   1072c:	ble	10480 <ReadCompressedSingleData+0x16c>
   10730:	mov	r3, r6
   10734:	mov	r2, sl
   10738:	mov	r1, r7
   1073c:	mov	r0, r5
   10740:	bl	3068 <InflateData>
   10744:	ldrd	r0, [sp]
   10748:	bl	402c4 <__aeabi_l2f>
   1074c:	add	r9, r9, #1
   10750:	str	r0, [r4], #4
   10754:	b	10728 <ReadCompressedSingleData+0x414>
   10758:	mov	r3, r6
   1075c:	mov	r2, sl
   10760:	mov	r1, r7
   10764:	mov	r0, r5
   10768:	bl	3068 <InflateData>
   1076c:	mov	r0, sl
   10770:	bl	18bc <Mat_int64Swap>
   10774:	bl	402c4 <__aeabi_l2f>
   10778:	add	r9, r9, #1
   1077c:	str	r0, [r4], #4
   10780:	cmp	r8, r9
   10784:	bgt	10758 <ReadCompressedSingleData+0x444>
   10788:	b	10480 <ReadCompressedSingleData+0x16c>
   1078c:	cmp	r9, #13
   10790:	bne	10480 <ReadCompressedSingleData+0x16c>
   10794:	ldr	r9, [r5, #20]
   10798:	cmp	r9, #0
   1079c:	moveq	sl, sp
   107a0:	movne	r9, #0
   107a4:	movne	sl, sp
   107a8:	bne	10804 <ReadCompressedSingleData+0x4f0>
   107ac:	cmp	r8, r9
   107b0:	ble	10480 <ReadCompressedSingleData+0x16c>
   107b4:	mov	r3, r6
   107b8:	mov	r2, sl
   107bc:	mov	r1, r7
   107c0:	mov	r0, r5
   107c4:	bl	3068 <InflateData>
   107c8:	ldrd	r0, [sp]
   107cc:	bl	402b4 <__aeabi_ul2f>
   107d0:	add	r9, r9, #1
   107d4:	str	r0, [r4], #4
   107d8:	b	107ac <ReadCompressedSingleData+0x498>
   107dc:	mov	r3, r6
   107e0:	mov	r2, sl
   107e4:	mov	r1, r7
   107e8:	mov	r0, r5
   107ec:	bl	3068 <InflateData>
   107f0:	mov	r0, sl
   107f4:	bl	1980 <Mat_uint64Swap>
   107f8:	bl	402b4 <__aeabi_ul2f>
   107fc:	add	r9, r9, #1
   10800:	str	r0, [r4], #4
   10804:	cmp	r8, r9
   10808:	bgt	107dc <ReadCompressedSingleData+0x4c8>
   1080c:	b	10480 <ReadCompressedSingleData+0x16c>

00010810 <ReadInt64Data>:
   10810:	cmp	r1, #0
   10814:	cmpne	r0, #0
   10818:	beq	1082c <ReadInt64Data+0x1c>
   1081c:	ldr	ip, [r0]
   10820:	cmp	ip, #0
   10824:	beq	1082c <ReadInt64Data+0x1c>
   10828:	b	5c60 <ReadInt64Data.part.3>
   1082c:	mov	r0, #0
   10830:	bx	lr

00010834 <ReadCompressedInt64Data>:
   10834:	cmp	r1, #0
   10838:	cmpne	r2, #0
   1083c:	moveq	ip, #1
   10840:	movne	ip, #0
   10844:	cmp	r0, #0
   10848:	orreq	ip, ip, #1
   1084c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10850:	cmp	ip, #0
   10854:	ldr	r8, [sp, #40]	; 0x28
   10858:	movne	r0, #0
   1085c:	bne	109ac <ReadCompressedInt64Data+0x178>
   10860:	mov	r5, r0
   10864:	mov	r0, r3
   10868:	mov	r9, r3
   1086c:	mov	r7, r1
   10870:	mov	r4, r2
   10874:	bl	1600 <Mat_SizeOf@plt>
   10878:	sub	r3, r9, #1
   1087c:	mov	r6, r0
   10880:	cmp	r3, #8
   10884:	addls	pc, pc, r3, lsl #2
   10888:	b	10c40 <ReadCompressedInt64Data+0x40c>
   1088c:	b	108ec <ReadCompressedInt64Data+0xb8>
   10890:	b	108b0 <ReadCompressedInt64Data+0x7c>
   10894:	b	10b38 <ReadCompressedInt64Data+0x304>
   10898:	b	10bbc <ReadCompressedInt64Data+0x388>
   1089c:	b	10a38 <ReadCompressedInt64Data+0x204>
   108a0:	b	10ab8 <ReadCompressedInt64Data+0x284>
   108a4:	b	109b4 <ReadCompressedInt64Data+0x180>
   108a8:	b	10c40 <ReadCompressedInt64Data+0x40c>
   108ac:	b	10928 <ReadCompressedInt64Data+0xf4>
   108b0:	sub	r4, r4, #8
   108b4:	mov	r9, #0
   108b8:	mov	sl, sp
   108bc:	cmp	r8, r9
   108c0:	ble	109a8 <ReadCompressedInt64Data+0x174>
   108c4:	mov	r3, r6
   108c8:	mov	r2, sl
   108cc:	mov	r1, r7
   108d0:	mov	r0, r5
   108d4:	bl	3068 <InflateData>
   108d8:	ldrb	r2, [sp]
   108dc:	mov	r3, #0
   108e0:	add	r9, r9, #1
   108e4:	strd	r2, [r4, #8]!
   108e8:	b	108bc <ReadCompressedInt64Data+0x88>
   108ec:	sub	r4, r4, #8
   108f0:	mov	r9, #0
   108f4:	mov	sl, sp
   108f8:	cmp	r8, r9
   108fc:	ble	109a8 <ReadCompressedInt64Data+0x174>
   10900:	mov	r3, r6
   10904:	mov	r2, sl
   10908:	mov	r1, r7
   1090c:	mov	r0, r5
   10910:	bl	3068 <InflateData>
   10914:	ldrsb	r2, [sp]
   10918:	add	r9, r9, #1
   1091c:	asr	r3, r2, #31
   10920:	strd	r2, [r4, #8]!
   10924:	b	108f8 <ReadCompressedInt64Data+0xc4>
   10928:	ldr	r9, [r5, #20]
   1092c:	sub	r4, r4, #8
   10930:	cmp	r9, #0
   10934:	moveq	sl, sp
   10938:	movne	r9, #0
   1093c:	movne	sl, sp
   10940:	bne	109a0 <ReadCompressedInt64Data+0x16c>
   10944:	cmp	r8, r9
   10948:	ble	109a8 <ReadCompressedInt64Data+0x174>
   1094c:	mov	r3, r6
   10950:	mov	r2, sl
   10954:	mov	r1, r7
   10958:	mov	r0, r5
   1095c:	bl	3068 <InflateData>
   10960:	ldrd	r0, [sp]
   10964:	bl	4037c <__aeabi_d2lz>
   10968:	add	r9, r9, #1
   1096c:	strd	r0, [r4, #8]!
   10970:	b	10944 <ReadCompressedInt64Data+0x110>
   10974:	mov	r3, r6
   10978:	mov	r2, sl
   1097c:	mov	r1, r7
   10980:	mov	r0, r5
   10984:	bl	3068 <InflateData>
   10988:	mov	r0, sl
   1098c:	bl	1b88 <Mat_doubleSwap>
   10990:	add	r9, r9, #1
   10994:	vmov	r0, r1, d0
   10998:	bl	4037c <__aeabi_d2lz>
   1099c:	strd	r0, [r4, #8]!
   109a0:	cmp	r8, r9
   109a4:	bgt	10974 <ReadCompressedInt64Data+0x140>
   109a8:	mul	r0, r6, r8
   109ac:	add	sp, sp, #8
   109b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109b4:	ldr	r9, [r5, #20]
   109b8:	sub	r4, r4, #8
   109bc:	cmp	r9, #0
   109c0:	moveq	sl, sp
   109c4:	movne	r9, #0
   109c8:	movne	sl, sp
   109cc:	bne	10a2c <ReadCompressedInt64Data+0x1f8>
   109d0:	cmp	r8, r9
   109d4:	ble	109a8 <ReadCompressedInt64Data+0x174>
   109d8:	mov	r3, r6
   109dc:	mov	r2, sl
   109e0:	mov	r1, r7
   109e4:	mov	r0, r5
   109e8:	bl	3068 <InflateData>
   109ec:	ldr	r0, [sp]
   109f0:	bl	40350 <__aeabi_f2lz>
   109f4:	add	r9, r9, #1
   109f8:	strd	r0, [r4, #8]!
   109fc:	b	109d0 <ReadCompressedInt64Data+0x19c>
   10a00:	mov	r3, r6
   10a04:	mov	r2, sl
   10a08:	mov	r1, r7
   10a0c:	mov	r0, r5
   10a10:	bl	3068 <InflateData>
   10a14:	mov	r0, sl
   10a18:	bl	1b2c <Mat_floatSwap>
   10a1c:	add	r9, r9, #1
   10a20:	vmov	r0, s0
   10a24:	bl	40350 <__aeabi_f2lz>
   10a28:	strd	r0, [r4, #8]!
   10a2c:	cmp	r8, r9
   10a30:	bgt	10a00 <ReadCompressedInt64Data+0x1cc>
   10a34:	b	109a8 <ReadCompressedInt64Data+0x174>
   10a38:	ldr	r9, [r5, #20]
   10a3c:	sub	r4, r4, #8
   10a40:	cmp	r9, #0
   10a44:	moveq	sl, sp
   10a48:	movne	r9, #0
   10a4c:	movne	sl, sp
   10a50:	bne	10aac <ReadCompressedInt64Data+0x278>
   10a54:	cmp	r8, r9
   10a58:	ble	109a8 <ReadCompressedInt64Data+0x174>
   10a5c:	mov	r3, r6
   10a60:	mov	r2, sl
   10a64:	mov	r1, r7
   10a68:	mov	r0, r5
   10a6c:	bl	3068 <InflateData>
   10a70:	ldr	r2, [sp]
   10a74:	add	r9, r9, #1
   10a78:	asr	r3, r2, #31
   10a7c:	strd	r2, [r4, #8]!
   10a80:	b	10a54 <ReadCompressedInt64Data+0x220>
   10a84:	mov	r1, r7
   10a88:	mov	r3, r6
   10a8c:	mov	r2, sl
   10a90:	mov	r0, r5
   10a94:	bl	3068 <InflateData>
   10a98:	mov	r0, sl
   10a9c:	bl	1a18 <Mat_int32Swap>
   10aa0:	add	r9, r9, #1
   10aa4:	asr	r1, r0, #31
   10aa8:	strd	r0, [r4, #8]!
   10aac:	cmp	r8, r9
   10ab0:	bgt	10a84 <ReadCompressedInt64Data+0x250>
   10ab4:	b	109a8 <ReadCompressedInt64Data+0x174>
   10ab8:	ldr	r9, [r5, #20]
   10abc:	sub	r4, r4, #8
   10ac0:	cmp	r9, #0
   10ac4:	moveq	sl, sp
   10ac8:	movne	r9, #0
   10acc:	movne	sl, sp
   10ad0:	bne	10b2c <ReadCompressedInt64Data+0x2f8>
   10ad4:	cmp	r8, r9
   10ad8:	ble	109a8 <ReadCompressedInt64Data+0x174>
   10adc:	mov	r3, r6
   10ae0:	mov	r2, sl
   10ae4:	mov	r1, r7
   10ae8:	mov	r0, r5
   10aec:	bl	3068 <InflateData>
   10af0:	ldr	r2, [sp]
   10af4:	mov	r3, #0
   10af8:	add	r9, r9, #1
   10afc:	strd	r2, [r4, #8]!
   10b00:	b	10ad4 <ReadCompressedInt64Data+0x2a0>
   10b04:	mov	r1, r7
   10b08:	mov	r3, r6
   10b0c:	mov	r2, sl
   10b10:	mov	r0, r5
   10b14:	bl	3068 <InflateData>
   10b18:	mov	r0, sl
   10b1c:	bl	1a80 <Mat_uint32Swap>
   10b20:	add	r9, r9, #1
   10b24:	mov	r1, #0
   10b28:	strd	r0, [r4, #8]!
   10b2c:	cmp	r8, r9
   10b30:	bgt	10b04 <ReadCompressedInt64Data+0x2d0>
   10b34:	b	109a8 <ReadCompressedInt64Data+0x174>
   10b38:	ldr	r9, [r5, #20]
   10b3c:	sub	r4, r4, #8
   10b40:	cmp	r9, #0
   10b44:	moveq	sl, sp
   10b48:	movne	r9, #0
   10b4c:	movne	sl, sp
   10b50:	bne	10bb0 <ReadCompressedInt64Data+0x37c>
   10b54:	cmp	r8, r9
   10b58:	ble	109a8 <ReadCompressedInt64Data+0x174>
   10b5c:	mov	r3, r6
   10b60:	mov	r2, sl
   10b64:	mov	r1, r7
   10b68:	mov	r0, r5
   10b6c:	bl	3068 <InflateData>
   10b70:	ldrsh	r2, [sp]
   10b74:	add	r9, r9, #1
   10b78:	asr	r3, r2, #31
   10b7c:	strd	r2, [r4, #8]!
   10b80:	b	10b54 <ReadCompressedInt64Data+0x320>
   10b84:	mov	r1, r7
   10b88:	mov	r3, r6
   10b8c:	mov	r2, sl
   10b90:	mov	r0, r5
   10b94:	bl	3068 <InflateData>
   10b98:	mov	r0, sl
   10b9c:	bl	1adc <Mat_int16Swap>
   10ba0:	add	r9, r9, #1
   10ba4:	sxth	r0, r0
   10ba8:	asr	r1, r0, #31
   10bac:	strd	r0, [r4, #8]!
   10bb0:	cmp	r8, r9
   10bb4:	bgt	10b84 <ReadCompressedInt64Data+0x350>
   10bb8:	b	109a8 <ReadCompressedInt64Data+0x174>
   10bbc:	ldr	r9, [r5, #20]
   10bc0:	sub	r4, r4, #8
   10bc4:	cmp	r9, #0
   10bc8:	moveq	sl, sp
   10bcc:	movne	r9, #0
   10bd0:	movne	sl, sp
   10bd4:	bne	10c34 <ReadCompressedInt64Data+0x400>
   10bd8:	cmp	r8, r9
   10bdc:	ble	109a8 <ReadCompressedInt64Data+0x174>
   10be0:	mov	r3, r6
   10be4:	mov	r2, sl
   10be8:	mov	r1, r7
   10bec:	mov	r0, r5
   10bf0:	bl	3068 <InflateData>
   10bf4:	ldrh	r2, [sp]
   10bf8:	mov	r3, #0
   10bfc:	add	r9, r9, #1
   10c00:	strd	r2, [r4, #8]!
   10c04:	b	10bd8 <ReadCompressedInt64Data+0x3a4>
   10c08:	mov	r1, r7
   10c0c:	mov	r3, r6
   10c10:	mov	r2, sl
   10c14:	mov	r0, r5
   10c18:	bl	3068 <InflateData>
   10c1c:	mov	r0, sl
   10c20:	bl	1b10 <Mat_uint16Swap>
   10c24:	add	r9, r9, #1
   10c28:	mov	r1, #0
   10c2c:	uxth	r0, r0
   10c30:	strd	r0, [r4, #8]!
   10c34:	cmp	r8, r9
   10c38:	bgt	10c08 <ReadCompressedInt64Data+0x3d4>
   10c3c:	b	109a8 <ReadCompressedInt64Data+0x174>
   10c40:	cmp	r9, #12
   10c44:	bne	10cc0 <ReadCompressedInt64Data+0x48c>
   10c48:	ldr	r9, [r5, #20]
   10c4c:	sub	r4, r4, #8
   10c50:	cmp	r9, #0
   10c54:	moveq	sl, sp
   10c58:	movne	r9, #0
   10c5c:	movne	sl, sp
   10c60:	bne	10cb4 <ReadCompressedInt64Data+0x480>
   10c64:	cmp	r8, r9
   10c68:	ble	109a8 <ReadCompressedInt64Data+0x174>
   10c6c:	mov	r3, r6
   10c70:	mov	r2, sl
   10c74:	mov	r1, r7
   10c78:	mov	r0, r5
   10c7c:	bl	3068 <InflateData>
   10c80:	ldrd	r2, [sp]
   10c84:	add	r9, r9, #1
   10c88:	strd	r2, [r4, #8]!
   10c8c:	b	10c64 <ReadCompressedInt64Data+0x430>
   10c90:	mov	r3, r6
   10c94:	mov	r2, sl
   10c98:	mov	r1, r7
   10c9c:	mov	r0, r5
   10ca0:	bl	3068 <InflateData>
   10ca4:	mov	r0, sl
   10ca8:	bl	18bc <Mat_int64Swap>
   10cac:	add	r9, r9, #1
   10cb0:	strd	r0, [r4, #8]!
   10cb4:	cmp	r8, r9
   10cb8:	bgt	10c90 <ReadCompressedInt64Data+0x45c>
   10cbc:	b	109a8 <ReadCompressedInt64Data+0x174>
   10cc0:	cmp	r9, #13
   10cc4:	bne	109a8 <ReadCompressedInt64Data+0x174>
   10cc8:	ldr	r9, [r5, #20]
   10ccc:	sub	r4, r4, #8
   10cd0:	cmp	r9, #0
   10cd4:	moveq	sl, sp
   10cd8:	movne	r9, #0
   10cdc:	movne	sl, sp
   10ce0:	bne	10d34 <ReadCompressedInt64Data+0x500>
   10ce4:	cmp	r8, r9
   10ce8:	ble	109a8 <ReadCompressedInt64Data+0x174>
   10cec:	mov	r3, r6
   10cf0:	mov	r2, sl
   10cf4:	mov	r1, r7
   10cf8:	mov	r0, r5
   10cfc:	bl	3068 <InflateData>
   10d00:	ldrd	r2, [sp]
   10d04:	add	r9, r9, #1
   10d08:	strd	r2, [r4, #8]!
   10d0c:	b	10ce4 <ReadCompressedInt64Data+0x4b0>
   10d10:	mov	r3, r6
   10d14:	mov	r2, sl
   10d18:	mov	r1, r7
   10d1c:	mov	r0, r5
   10d20:	bl	3068 <InflateData>
   10d24:	mov	r0, sl
   10d28:	bl	1980 <Mat_uint64Swap>
   10d2c:	add	r9, r9, #1
   10d30:	strd	r0, [r4, #8]!
   10d34:	cmp	r8, r9
   10d38:	bgt	10d10 <ReadCompressedInt64Data+0x4dc>
   10d3c:	b	109a8 <ReadCompressedInt64Data+0x174>

00010d40 <ReadUInt64Data>:
   10d40:	cmp	r1, #0
   10d44:	cmpne	r0, #0
   10d48:	beq	10d5c <ReadUInt64Data+0x1c>
   10d4c:	ldr	ip, [r0]
   10d50:	cmp	ip, #0
   10d54:	beq	10d5c <ReadUInt64Data+0x1c>
   10d58:	b	6fe0 <ReadUInt64Data.part.5>
   10d5c:	mov	r0, #0
   10d60:	bx	lr

00010d64 <ReadCompressedUInt64Data>:
   10d64:	cmp	r1, #0
   10d68:	cmpne	r2, #0
   10d6c:	moveq	ip, #1
   10d70:	movne	ip, #0
   10d74:	cmp	r0, #0
   10d78:	orreq	ip, ip, #1
   10d7c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10d80:	cmp	ip, #0
   10d84:	ldr	r8, [sp, #40]	; 0x28
   10d88:	movne	r0, #0
   10d8c:	bne	10edc <ReadCompressedUInt64Data+0x178>
   10d90:	mov	r5, r0
   10d94:	mov	r0, r3
   10d98:	mov	r9, r3
   10d9c:	mov	r7, r1
   10da0:	mov	r4, r2
   10da4:	bl	1600 <Mat_SizeOf@plt>
   10da8:	sub	r3, r9, #1
   10dac:	mov	r6, r0
   10db0:	cmp	r3, #8
   10db4:	addls	pc, pc, r3, lsl #2
   10db8:	b	11170 <ReadCompressedUInt64Data+0x40c>
   10dbc:	b	10e1c <ReadCompressedUInt64Data+0xb8>
   10dc0:	b	10de0 <ReadCompressedUInt64Data+0x7c>
   10dc4:	b	11068 <ReadCompressedUInt64Data+0x304>
   10dc8:	b	110ec <ReadCompressedUInt64Data+0x388>
   10dcc:	b	10f68 <ReadCompressedUInt64Data+0x204>
   10dd0:	b	10fe8 <ReadCompressedUInt64Data+0x284>
   10dd4:	b	10ee4 <ReadCompressedUInt64Data+0x180>
   10dd8:	b	11170 <ReadCompressedUInt64Data+0x40c>
   10ddc:	b	10e58 <ReadCompressedUInt64Data+0xf4>
   10de0:	sub	r4, r4, #8
   10de4:	mov	r9, #0
   10de8:	mov	sl, sp
   10dec:	cmp	r8, r9
   10df0:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   10df4:	mov	r3, r6
   10df8:	mov	r2, sl
   10dfc:	mov	r1, r7
   10e00:	mov	r0, r5
   10e04:	bl	3068 <InflateData>
   10e08:	ldrb	r2, [sp]
   10e0c:	mov	r3, #0
   10e10:	add	r9, r9, #1
   10e14:	strd	r2, [r4, #8]!
   10e18:	b	10dec <ReadCompressedUInt64Data+0x88>
   10e1c:	sub	r4, r4, #8
   10e20:	mov	r9, #0
   10e24:	mov	sl, sp
   10e28:	cmp	r8, r9
   10e2c:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   10e30:	mov	r3, r6
   10e34:	mov	r2, sl
   10e38:	mov	r1, r7
   10e3c:	mov	r0, r5
   10e40:	bl	3068 <InflateData>
   10e44:	ldrsb	r2, [sp]
   10e48:	add	r9, r9, #1
   10e4c:	asr	r3, r2, #31
   10e50:	strd	r2, [r4, #8]!
   10e54:	b	10e28 <ReadCompressedUInt64Data+0xc4>
   10e58:	ldr	r9, [r5, #20]
   10e5c:	sub	r4, r4, #8
   10e60:	cmp	r9, #0
   10e64:	moveq	sl, sp
   10e68:	movne	r9, #0
   10e6c:	movne	sl, sp
   10e70:	bne	10ed0 <ReadCompressedUInt64Data+0x16c>
   10e74:	cmp	r8, r9
   10e78:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   10e7c:	mov	r3, r6
   10e80:	mov	r2, sl
   10e84:	mov	r1, r7
   10e88:	mov	r0, r5
   10e8c:	bl	3068 <InflateData>
   10e90:	ldrd	r0, [sp]
   10e94:	bl	403f0 <__aeabi_d2ulz>
   10e98:	add	r9, r9, #1
   10e9c:	strd	r0, [r4, #8]!
   10ea0:	b	10e74 <ReadCompressedUInt64Data+0x110>
   10ea4:	mov	r3, r6
   10ea8:	mov	r2, sl
   10eac:	mov	r1, r7
   10eb0:	mov	r0, r5
   10eb4:	bl	3068 <InflateData>
   10eb8:	mov	r0, sl
   10ebc:	bl	1b88 <Mat_doubleSwap>
   10ec0:	add	r9, r9, #1
   10ec4:	vmov	r0, r1, d0
   10ec8:	bl	403f0 <__aeabi_d2ulz>
   10ecc:	strd	r0, [r4, #8]!
   10ed0:	cmp	r8, r9
   10ed4:	bgt	10ea4 <ReadCompressedUInt64Data+0x140>
   10ed8:	mul	r0, r6, r8
   10edc:	add	sp, sp, #8
   10ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ee4:	ldr	r9, [r5, #20]
   10ee8:	sub	r4, r4, #8
   10eec:	cmp	r9, #0
   10ef0:	moveq	sl, sp
   10ef4:	movne	r9, #0
   10ef8:	movne	sl, sp
   10efc:	bne	10f5c <ReadCompressedUInt64Data+0x1f8>
   10f00:	cmp	r8, r9
   10f04:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   10f08:	mov	r3, r6
   10f0c:	mov	r2, sl
   10f10:	mov	r1, r7
   10f14:	mov	r0, r5
   10f18:	bl	3068 <InflateData>
   10f1c:	ldr	r0, [sp]
   10f20:	bl	403a8 <__aeabi_f2ulz>
   10f24:	add	r9, r9, #1
   10f28:	strd	r0, [r4, #8]!
   10f2c:	b	10f00 <ReadCompressedUInt64Data+0x19c>
   10f30:	mov	r3, r6
   10f34:	mov	r2, sl
   10f38:	mov	r1, r7
   10f3c:	mov	r0, r5
   10f40:	bl	3068 <InflateData>
   10f44:	mov	r0, sl
   10f48:	bl	1b2c <Mat_floatSwap>
   10f4c:	add	r9, r9, #1
   10f50:	vmov	r0, s0
   10f54:	bl	403a8 <__aeabi_f2ulz>
   10f58:	strd	r0, [r4, #8]!
   10f5c:	cmp	r8, r9
   10f60:	bgt	10f30 <ReadCompressedUInt64Data+0x1cc>
   10f64:	b	10ed8 <ReadCompressedUInt64Data+0x174>
   10f68:	ldr	r9, [r5, #20]
   10f6c:	sub	r4, r4, #8
   10f70:	cmp	r9, #0
   10f74:	moveq	sl, sp
   10f78:	movne	r9, #0
   10f7c:	movne	sl, sp
   10f80:	bne	10fdc <ReadCompressedUInt64Data+0x278>
   10f84:	cmp	r8, r9
   10f88:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   10f8c:	mov	r3, r6
   10f90:	mov	r2, sl
   10f94:	mov	r1, r7
   10f98:	mov	r0, r5
   10f9c:	bl	3068 <InflateData>
   10fa0:	ldr	r2, [sp]
   10fa4:	add	r9, r9, #1
   10fa8:	asr	r3, r2, #31
   10fac:	strd	r2, [r4, #8]!
   10fb0:	b	10f84 <ReadCompressedUInt64Data+0x220>
   10fb4:	mov	r1, r7
   10fb8:	mov	r3, r6
   10fbc:	mov	r2, sl
   10fc0:	mov	r0, r5
   10fc4:	bl	3068 <InflateData>
   10fc8:	mov	r0, sl
   10fcc:	bl	1a18 <Mat_int32Swap>
   10fd0:	add	r9, r9, #1
   10fd4:	asr	r1, r0, #31
   10fd8:	strd	r0, [r4, #8]!
   10fdc:	cmp	r8, r9
   10fe0:	bgt	10fb4 <ReadCompressedUInt64Data+0x250>
   10fe4:	b	10ed8 <ReadCompressedUInt64Data+0x174>
   10fe8:	ldr	r9, [r5, #20]
   10fec:	sub	r4, r4, #8
   10ff0:	cmp	r9, #0
   10ff4:	moveq	sl, sp
   10ff8:	movne	r9, #0
   10ffc:	movne	sl, sp
   11000:	bne	1105c <ReadCompressedUInt64Data+0x2f8>
   11004:	cmp	r8, r9
   11008:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   1100c:	mov	r3, r6
   11010:	mov	r2, sl
   11014:	mov	r1, r7
   11018:	mov	r0, r5
   1101c:	bl	3068 <InflateData>
   11020:	ldr	r2, [sp]
   11024:	mov	r3, #0
   11028:	add	r9, r9, #1
   1102c:	strd	r2, [r4, #8]!
   11030:	b	11004 <ReadCompressedUInt64Data+0x2a0>
   11034:	mov	r1, r7
   11038:	mov	r3, r6
   1103c:	mov	r2, sl
   11040:	mov	r0, r5
   11044:	bl	3068 <InflateData>
   11048:	mov	r0, sl
   1104c:	bl	1a80 <Mat_uint32Swap>
   11050:	add	r9, r9, #1
   11054:	mov	r1, #0
   11058:	strd	r0, [r4, #8]!
   1105c:	cmp	r8, r9
   11060:	bgt	11034 <ReadCompressedUInt64Data+0x2d0>
   11064:	b	10ed8 <ReadCompressedUInt64Data+0x174>
   11068:	ldr	r9, [r5, #20]
   1106c:	sub	r4, r4, #8
   11070:	cmp	r9, #0
   11074:	moveq	sl, sp
   11078:	movne	r9, #0
   1107c:	movne	sl, sp
   11080:	bne	110e0 <ReadCompressedUInt64Data+0x37c>
   11084:	cmp	r8, r9
   11088:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   1108c:	mov	r3, r6
   11090:	mov	r2, sl
   11094:	mov	r1, r7
   11098:	mov	r0, r5
   1109c:	bl	3068 <InflateData>
   110a0:	ldrsh	r2, [sp]
   110a4:	add	r9, r9, #1
   110a8:	asr	r3, r2, #31
   110ac:	strd	r2, [r4, #8]!
   110b0:	b	11084 <ReadCompressedUInt64Data+0x320>
   110b4:	mov	r1, r7
   110b8:	mov	r3, r6
   110bc:	mov	r2, sl
   110c0:	mov	r0, r5
   110c4:	bl	3068 <InflateData>
   110c8:	mov	r0, sl
   110cc:	bl	1adc <Mat_int16Swap>
   110d0:	add	r9, r9, #1
   110d4:	sxth	r0, r0
   110d8:	asr	r1, r0, #31
   110dc:	strd	r0, [r4, #8]!
   110e0:	cmp	r8, r9
   110e4:	bgt	110b4 <ReadCompressedUInt64Data+0x350>
   110e8:	b	10ed8 <ReadCompressedUInt64Data+0x174>
   110ec:	ldr	r9, [r5, #20]
   110f0:	sub	r4, r4, #8
   110f4:	cmp	r9, #0
   110f8:	moveq	sl, sp
   110fc:	movne	r9, #0
   11100:	movne	sl, sp
   11104:	bne	11164 <ReadCompressedUInt64Data+0x400>
   11108:	cmp	r8, r9
   1110c:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   11110:	mov	r3, r6
   11114:	mov	r2, sl
   11118:	mov	r1, r7
   1111c:	mov	r0, r5
   11120:	bl	3068 <InflateData>
   11124:	ldrh	r2, [sp]
   11128:	mov	r3, #0
   1112c:	add	r9, r9, #1
   11130:	strd	r2, [r4, #8]!
   11134:	b	11108 <ReadCompressedUInt64Data+0x3a4>
   11138:	mov	r1, r7
   1113c:	mov	r3, r6
   11140:	mov	r2, sl
   11144:	mov	r0, r5
   11148:	bl	3068 <InflateData>
   1114c:	mov	r0, sl
   11150:	bl	1b10 <Mat_uint16Swap>
   11154:	add	r9, r9, #1
   11158:	mov	r1, #0
   1115c:	uxth	r0, r0
   11160:	strd	r0, [r4, #8]!
   11164:	cmp	r8, r9
   11168:	bgt	11138 <ReadCompressedUInt64Data+0x3d4>
   1116c:	b	10ed8 <ReadCompressedUInt64Data+0x174>
   11170:	cmp	r9, #12
   11174:	bne	111f0 <ReadCompressedUInt64Data+0x48c>
   11178:	ldr	r9, [r5, #20]
   1117c:	sub	r4, r4, #8
   11180:	cmp	r9, #0
   11184:	moveq	sl, sp
   11188:	movne	r9, #0
   1118c:	movne	sl, sp
   11190:	bne	111e4 <ReadCompressedUInt64Data+0x480>
   11194:	cmp	r8, r9
   11198:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   1119c:	mov	r3, r6
   111a0:	mov	r2, sl
   111a4:	mov	r1, r7
   111a8:	mov	r0, r5
   111ac:	bl	3068 <InflateData>
   111b0:	ldrd	r2, [sp]
   111b4:	add	r9, r9, #1
   111b8:	strd	r2, [r4, #8]!
   111bc:	b	11194 <ReadCompressedUInt64Data+0x430>
   111c0:	mov	r3, r6
   111c4:	mov	r2, sl
   111c8:	mov	r1, r7
   111cc:	mov	r0, r5
   111d0:	bl	3068 <InflateData>
   111d4:	mov	r0, sl
   111d8:	bl	18bc <Mat_int64Swap>
   111dc:	add	r9, r9, #1
   111e0:	strd	r0, [r4, #8]!
   111e4:	cmp	r8, r9
   111e8:	bgt	111c0 <ReadCompressedUInt64Data+0x45c>
   111ec:	b	10ed8 <ReadCompressedUInt64Data+0x174>
   111f0:	cmp	r9, #13
   111f4:	bne	10ed8 <ReadCompressedUInt64Data+0x174>
   111f8:	ldr	r9, [r5, #20]
   111fc:	sub	r4, r4, #8
   11200:	cmp	r9, #0
   11204:	moveq	sl, sp
   11208:	movne	r9, #0
   1120c:	movne	sl, sp
   11210:	bne	11264 <ReadCompressedUInt64Data+0x500>
   11214:	cmp	r8, r9
   11218:	ble	10ed8 <ReadCompressedUInt64Data+0x174>
   1121c:	mov	r3, r6
   11220:	mov	r2, sl
   11224:	mov	r1, r7
   11228:	mov	r0, r5
   1122c:	bl	3068 <InflateData>
   11230:	ldrd	r2, [sp]
   11234:	add	r9, r9, #1
   11238:	strd	r2, [r4, #8]!
   1123c:	b	11214 <ReadCompressedUInt64Data+0x4b0>
   11240:	mov	r3, r6
   11244:	mov	r2, sl
   11248:	mov	r1, r7
   1124c:	mov	r0, r5
   11250:	bl	3068 <InflateData>
   11254:	mov	r0, sl
   11258:	bl	1980 <Mat_uint64Swap>
   1125c:	add	r9, r9, #1
   11260:	strd	r0, [r4, #8]!
   11264:	cmp	r8, r9
   11268:	bgt	11240 <ReadCompressedUInt64Data+0x4dc>
   1126c:	b	10ed8 <ReadCompressedUInt64Data+0x174>

00011270 <ReadInt32Data>:
   11270:	cmp	r1, #0
   11274:	cmpne	r0, #0
   11278:	beq	1128c <ReadInt32Data+0x1c>
   1127c:	ldr	ip, [r0]
   11280:	cmp	ip, #0
   11284:	beq	1128c <ReadInt32Data+0x1c>
   11288:	b	8360 <ReadInt32Data.part.7>
   1128c:	mov	r0, #0
   11290:	bx	lr

00011294 <ReadCompressedInt32Data>:
   11294:	cmp	r1, #0
   11298:	cmpne	r2, #0
   1129c:	moveq	ip, #1
   112a0:	movne	ip, #0
   112a4:	cmp	r0, #0
   112a8:	orreq	ip, ip, #1
   112ac:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   112b0:	cmp	ip, #0
   112b4:	ldr	r8, [sp, #40]	; 0x28
   112b8:	movne	r0, #0
   112bc:	bne	113fc <ReadCompressedInt32Data+0x168>
   112c0:	mov	r4, r0
   112c4:	mov	r0, r3
   112c8:	mov	r9, r3
   112cc:	mov	r7, r1
   112d0:	mov	r6, r2
   112d4:	bl	1600 <Mat_SizeOf@plt>
   112d8:	sub	r3, r9, #1
   112dc:	mov	r5, r0
   112e0:	cmp	r3, #8
   112e4:	addls	pc, pc, r3, lsl #2
   112e8:	b	11658 <ReadCompressedInt32Data+0x3c4>
   112ec:	b	11344 <ReadCompressedInt32Data+0xb0>
   112f0:	b	11310 <ReadCompressedInt32Data+0x7c>
   112f4:	b	11570 <ReadCompressedInt32Data+0x2dc>
   112f8:	b	115e4 <ReadCompressedInt32Data+0x350>
   112fc:	b	11488 <ReadCompressedInt32Data+0x1f4>
   11300:	b	114fc <ReadCompressedInt32Data+0x268>
   11304:	b	11404 <ReadCompressedInt32Data+0x170>
   11308:	b	11658 <ReadCompressedInt32Data+0x3c4>
   1130c:	b	11378 <ReadCompressedInt32Data+0xe4>
   11310:	mov	r9, #0
   11314:	mov	sl, sp
   11318:	cmp	r8, r9
   1131c:	ble	113f8 <ReadCompressedInt32Data+0x164>
   11320:	mov	r3, r5
   11324:	mov	r2, sl
   11328:	mov	r1, r7
   1132c:	mov	r0, r4
   11330:	bl	3068 <InflateData>
   11334:	ldrb	r3, [sp]
   11338:	str	r3, [r6, r9, lsl #2]
   1133c:	add	r9, r9, #1
   11340:	b	11318 <ReadCompressedInt32Data+0x84>
   11344:	mov	r9, #0
   11348:	mov	sl, sp
   1134c:	cmp	r8, r9
   11350:	ble	113f8 <ReadCompressedInt32Data+0x164>
   11354:	mov	r3, r5
   11358:	mov	r2, sl
   1135c:	mov	r1, r7
   11360:	mov	r0, r4
   11364:	bl	3068 <InflateData>
   11368:	ldrsb	r3, [sp]
   1136c:	str	r3, [r6, r9, lsl #2]
   11370:	add	r9, r9, #1
   11374:	b	1134c <ReadCompressedInt32Data+0xb8>
   11378:	ldr	r9, [r4, #20]
   1137c:	cmp	r9, #0
   11380:	moveq	sl, sp
   11384:	movne	r9, #0
   11388:	movne	sl, sp
   1138c:	bne	113f0 <ReadCompressedInt32Data+0x15c>
   11390:	cmp	r8, r9
   11394:	ble	113f8 <ReadCompressedInt32Data+0x164>
   11398:	mov	r3, r5
   1139c:	mov	r2, sl
   113a0:	mov	r1, r7
   113a4:	mov	r0, r4
   113a8:	bl	3068 <InflateData>
   113ac:	vldr	d7, [sp]
   113b0:	vcvt.s32.f64	s14, d7
   113b4:	vmov	r3, s14
   113b8:	str	r3, [r6, r9, lsl #2]
   113bc:	add	r9, r9, #1
   113c0:	b	11390 <ReadCompressedInt32Data+0xfc>
   113c4:	mov	r3, r5
   113c8:	mov	r2, sl
   113cc:	mov	r1, r7
   113d0:	mov	r0, r4
   113d4:	bl	3068 <InflateData>
   113d8:	mov	r0, sl
   113dc:	bl	1b88 <Mat_doubleSwap>
   113e0:	vcvt.s32.f64	s0, d0
   113e4:	vmov	r3, s0
   113e8:	str	r3, [r6, r9, lsl #2]
   113ec:	add	r9, r9, #1
   113f0:	cmp	r8, r9
   113f4:	bgt	113c4 <ReadCompressedInt32Data+0x130>
   113f8:	mul	r0, r5, r8
   113fc:	add	sp, sp, #8
   11400:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11404:	ldr	r9, [r4, #20]
   11408:	cmp	r9, #0
   1140c:	moveq	sl, sp
   11410:	movne	r9, #0
   11414:	movne	sl, sp
   11418:	bne	1147c <ReadCompressedInt32Data+0x1e8>
   1141c:	cmp	r8, r9
   11420:	ble	113f8 <ReadCompressedInt32Data+0x164>
   11424:	mov	r3, r5
   11428:	mov	r2, sl
   1142c:	mov	r1, r7
   11430:	mov	r0, r4
   11434:	bl	3068 <InflateData>
   11438:	vldr	s15, [sp]
   1143c:	vcvt.s32.f32	s15, s15
   11440:	vmov	r3, s15
   11444:	str	r3, [r6, r9, lsl #2]
   11448:	add	r9, r9, #1
   1144c:	b	1141c <ReadCompressedInt32Data+0x188>
   11450:	mov	r3, r5
   11454:	mov	r2, sl
   11458:	mov	r1, r7
   1145c:	mov	r0, r4
   11460:	bl	3068 <InflateData>
   11464:	mov	r0, sl
   11468:	bl	1b2c <Mat_floatSwap>
   1146c:	vcvt.s32.f32	s0, s0
   11470:	vmov	r3, s0
   11474:	str	r3, [r6, r9, lsl #2]
   11478:	add	r9, r9, #1
   1147c:	cmp	r8, r9
   11480:	bgt	11450 <ReadCompressedInt32Data+0x1bc>
   11484:	b	113f8 <ReadCompressedInt32Data+0x164>
   11488:	ldr	r9, [r4, #20]
   1148c:	cmp	r9, #0
   11490:	moveq	sl, sp
   11494:	movne	r9, #0
   11498:	movne	sl, sp
   1149c:	bne	114f0 <ReadCompressedInt32Data+0x25c>
   114a0:	cmp	r8, r9
   114a4:	ble	113f8 <ReadCompressedInt32Data+0x164>
   114a8:	mov	r3, r5
   114ac:	mov	r2, sl
   114b0:	mov	r1, r7
   114b4:	mov	r0, r4
   114b8:	bl	3068 <InflateData>
   114bc:	ldr	r3, [sp]
   114c0:	str	r3, [r6, r9, lsl #2]
   114c4:	add	r9, r9, #1
   114c8:	b	114a0 <ReadCompressedInt32Data+0x20c>
   114cc:	mov	r3, r5
   114d0:	mov	r2, sl
   114d4:	mov	r1, r7
   114d8:	mov	r0, r4
   114dc:	bl	3068 <InflateData>
   114e0:	mov	r0, sl
   114e4:	bl	1a18 <Mat_int32Swap>
   114e8:	str	r0, [r6, r9, lsl #2]
   114ec:	add	r9, r9, #1
   114f0:	cmp	r8, r9
   114f4:	bgt	114cc <ReadCompressedInt32Data+0x238>
   114f8:	b	113f8 <ReadCompressedInt32Data+0x164>
   114fc:	ldr	r9, [r4, #20]
   11500:	cmp	r9, #0
   11504:	moveq	sl, sp
   11508:	movne	r9, #0
   1150c:	movne	sl, sp
   11510:	bne	11564 <ReadCompressedInt32Data+0x2d0>
   11514:	cmp	r8, r9
   11518:	ble	113f8 <ReadCompressedInt32Data+0x164>
   1151c:	mov	r3, r5
   11520:	mov	r2, sl
   11524:	mov	r1, r7
   11528:	mov	r0, r4
   1152c:	bl	3068 <InflateData>
   11530:	ldr	r3, [sp]
   11534:	str	r3, [r6, r9, lsl #2]
   11538:	add	r9, r9, #1
   1153c:	b	11514 <ReadCompressedInt32Data+0x280>
   11540:	mov	r3, r5
   11544:	mov	r2, sl
   11548:	mov	r1, r7
   1154c:	mov	r0, r4
   11550:	bl	3068 <InflateData>
   11554:	mov	r0, sl
   11558:	bl	1a80 <Mat_uint32Swap>
   1155c:	str	r0, [r6, r9, lsl #2]
   11560:	add	r9, r9, #1
   11564:	cmp	r8, r9
   11568:	bgt	11540 <ReadCompressedInt32Data+0x2ac>
   1156c:	b	113f8 <ReadCompressedInt32Data+0x164>
   11570:	ldr	r9, [r4, #20]
   11574:	cmp	r9, #0
   11578:	moveq	sl, sp
   1157c:	movne	r9, #0
   11580:	movne	sl, sp
   11584:	bne	115d8 <ReadCompressedInt32Data+0x344>
   11588:	cmp	r8, r9
   1158c:	ble	113f8 <ReadCompressedInt32Data+0x164>
   11590:	mov	r3, r5
   11594:	mov	r2, sl
   11598:	mov	r1, r7
   1159c:	mov	r0, r4
   115a0:	bl	3068 <InflateData>
   115a4:	ldrsh	r3, [sp]
   115a8:	str	r3, [r6, r9, lsl #2]
   115ac:	add	r9, r9, #1
   115b0:	b	11588 <ReadCompressedInt32Data+0x2f4>
   115b4:	mov	r3, r5
   115b8:	mov	r2, sl
   115bc:	mov	r1, r7
   115c0:	mov	r0, r4
   115c4:	bl	3068 <InflateData>
   115c8:	mov	r0, sl
   115cc:	bl	1adc <Mat_int16Swap>
   115d0:	str	r0, [r6, r9, lsl #2]
   115d4:	add	r9, r9, #1
   115d8:	cmp	r8, r9
   115dc:	bgt	115b4 <ReadCompressedInt32Data+0x320>
   115e0:	b	113f8 <ReadCompressedInt32Data+0x164>
   115e4:	ldr	r9, [r4, #20]
   115e8:	cmp	r9, #0
   115ec:	moveq	sl, sp
   115f0:	movne	r9, #0
   115f4:	movne	sl, sp
   115f8:	bne	1164c <ReadCompressedInt32Data+0x3b8>
   115fc:	cmp	r8, r9
   11600:	ble	113f8 <ReadCompressedInt32Data+0x164>
   11604:	mov	r3, r5
   11608:	mov	r2, sl
   1160c:	mov	r1, r7
   11610:	mov	r0, r4
   11614:	bl	3068 <InflateData>
   11618:	ldrh	r3, [sp]
   1161c:	str	r3, [r6, r9, lsl #2]
   11620:	add	r9, r9, #1
   11624:	b	115fc <ReadCompressedInt32Data+0x368>
   11628:	mov	r3, r5
   1162c:	mov	r2, sl
   11630:	mov	r1, r7
   11634:	mov	r0, r4
   11638:	bl	3068 <InflateData>
   1163c:	mov	r0, sl
   11640:	bl	1b10 <Mat_uint16Swap>
   11644:	str	r0, [r6, r9, lsl #2]
   11648:	add	r9, r9, #1
   1164c:	cmp	r8, r9
   11650:	bgt	11628 <ReadCompressedInt32Data+0x394>
   11654:	b	113f8 <ReadCompressedInt32Data+0x164>
   11658:	cmp	r9, #12
   1165c:	bne	116d4 <ReadCompressedInt32Data+0x440>
   11660:	ldr	r9, [r4, #20]
   11664:	cmp	r9, #0
   11668:	moveq	sl, sp
   1166c:	movne	r9, #0
   11670:	movne	sl, sp
   11674:	bne	116c8 <ReadCompressedInt32Data+0x434>
   11678:	cmp	r8, r9
   1167c:	ble	113f8 <ReadCompressedInt32Data+0x164>
   11680:	mov	r3, r5
   11684:	mov	r2, sl
   11688:	mov	r1, r7
   1168c:	mov	r0, r4
   11690:	bl	3068 <InflateData>
   11694:	ldr	r3, [sp]
   11698:	str	r3, [r6, r9, lsl #2]
   1169c:	add	r9, r9, #1
   116a0:	b	11678 <ReadCompressedInt32Data+0x3e4>
   116a4:	mov	r3, r5
   116a8:	mov	r2, sl
   116ac:	mov	r1, r7
   116b0:	mov	r0, r4
   116b4:	bl	3068 <InflateData>
   116b8:	mov	r0, sl
   116bc:	bl	18bc <Mat_int64Swap>
   116c0:	str	r0, [r6, r9, lsl #2]
   116c4:	add	r9, r9, #1
   116c8:	cmp	r8, r9
   116cc:	bgt	116a4 <ReadCompressedInt32Data+0x410>
   116d0:	b	113f8 <ReadCompressedInt32Data+0x164>
   116d4:	cmp	r9, #13
   116d8:	bne	113f8 <ReadCompressedInt32Data+0x164>
   116dc:	ldr	r9, [r4, #20]
   116e0:	cmp	r9, #0
   116e4:	moveq	sl, sp
   116e8:	movne	r9, #0
   116ec:	movne	sl, sp
   116f0:	bne	11744 <ReadCompressedInt32Data+0x4b0>
   116f4:	cmp	r8, r9
   116f8:	ble	113f8 <ReadCompressedInt32Data+0x164>
   116fc:	mov	r3, r5
   11700:	mov	r2, sl
   11704:	mov	r1, r7
   11708:	mov	r0, r4
   1170c:	bl	3068 <InflateData>
   11710:	ldr	r3, [sp]
   11714:	str	r3, [r6, r9, lsl #2]
   11718:	add	r9, r9, #1
   1171c:	b	116f4 <ReadCompressedInt32Data+0x460>
   11720:	mov	r3, r5
   11724:	mov	r2, sl
   11728:	mov	r1, r7
   1172c:	mov	r0, r4
   11730:	bl	3068 <InflateData>
   11734:	mov	r0, sl
   11738:	bl	1980 <Mat_uint64Swap>
   1173c:	str	r0, [r6, r9, lsl #2]
   11740:	add	r9, r9, #1
   11744:	cmp	r8, r9
   11748:	bgt	11720 <ReadCompressedInt32Data+0x48c>
   1174c:	b	113f8 <ReadCompressedInt32Data+0x164>

00011750 <ReadUInt32Data>:
   11750:	cmp	r1, #0
   11754:	cmpne	r0, #0
   11758:	beq	1176c <ReadUInt32Data+0x1c>
   1175c:	ldr	ip, [r0]
   11760:	cmp	ip, #0
   11764:	beq	1176c <ReadUInt32Data+0x1c>
   11768:	b	95e4 <ReadUInt32Data.part.9>
   1176c:	mov	r0, #0
   11770:	bx	lr

00011774 <ReadCompressedUInt32Data>:
   11774:	cmp	r1, #0
   11778:	cmpne	r2, #0
   1177c:	moveq	ip, #1
   11780:	movne	ip, #0
   11784:	cmp	r0, #0
   11788:	orreq	ip, ip, #1
   1178c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11790:	cmp	ip, #0
   11794:	ldr	r8, [sp, #40]	; 0x28
   11798:	movne	r0, #0
   1179c:	bne	118dc <ReadCompressedUInt32Data+0x168>
   117a0:	mov	r4, r0
   117a4:	mov	r0, r3
   117a8:	mov	r9, r3
   117ac:	mov	r7, r1
   117b0:	mov	r6, r2
   117b4:	bl	1600 <Mat_SizeOf@plt>
   117b8:	sub	r3, r9, #1
   117bc:	mov	r5, r0
   117c0:	cmp	r3, #8
   117c4:	addls	pc, pc, r3, lsl #2
   117c8:	b	11b38 <ReadCompressedUInt32Data+0x3c4>
   117cc:	b	11824 <ReadCompressedUInt32Data+0xb0>
   117d0:	b	117f0 <ReadCompressedUInt32Data+0x7c>
   117d4:	b	11a50 <ReadCompressedUInt32Data+0x2dc>
   117d8:	b	11ac4 <ReadCompressedUInt32Data+0x350>
   117dc:	b	11968 <ReadCompressedUInt32Data+0x1f4>
   117e0:	b	119dc <ReadCompressedUInt32Data+0x268>
   117e4:	b	118e4 <ReadCompressedUInt32Data+0x170>
   117e8:	b	11b38 <ReadCompressedUInt32Data+0x3c4>
   117ec:	b	11858 <ReadCompressedUInt32Data+0xe4>
   117f0:	mov	r9, #0
   117f4:	mov	sl, sp
   117f8:	cmp	r8, r9
   117fc:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   11800:	mov	r3, r5
   11804:	mov	r2, sl
   11808:	mov	r1, r7
   1180c:	mov	r0, r4
   11810:	bl	3068 <InflateData>
   11814:	ldrb	r3, [sp]
   11818:	str	r3, [r6, r9, lsl #2]
   1181c:	add	r9, r9, #1
   11820:	b	117f8 <ReadCompressedUInt32Data+0x84>
   11824:	mov	r9, #0
   11828:	mov	sl, sp
   1182c:	cmp	r8, r9
   11830:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   11834:	mov	r3, r5
   11838:	mov	r2, sl
   1183c:	mov	r1, r7
   11840:	mov	r0, r4
   11844:	bl	3068 <InflateData>
   11848:	ldrsb	r3, [sp]
   1184c:	str	r3, [r6, r9, lsl #2]
   11850:	add	r9, r9, #1
   11854:	b	1182c <ReadCompressedUInt32Data+0xb8>
   11858:	ldr	r9, [r4, #20]
   1185c:	cmp	r9, #0
   11860:	moveq	sl, sp
   11864:	movne	r9, #0
   11868:	movne	sl, sp
   1186c:	bne	118d0 <ReadCompressedUInt32Data+0x15c>
   11870:	cmp	r8, r9
   11874:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   11878:	mov	r3, r5
   1187c:	mov	r2, sl
   11880:	mov	r1, r7
   11884:	mov	r0, r4
   11888:	bl	3068 <InflateData>
   1188c:	vldr	d7, [sp]
   11890:	vcvt.u32.f64	s14, d7
   11894:	vmov	r3, s14
   11898:	str	r3, [r6, r9, lsl #2]
   1189c:	add	r9, r9, #1
   118a0:	b	11870 <ReadCompressedUInt32Data+0xfc>
   118a4:	mov	r3, r5
   118a8:	mov	r2, sl
   118ac:	mov	r1, r7
   118b0:	mov	r0, r4
   118b4:	bl	3068 <InflateData>
   118b8:	mov	r0, sl
   118bc:	bl	1b88 <Mat_doubleSwap>
   118c0:	vcvt.u32.f64	s0, d0
   118c4:	vmov	r3, s0
   118c8:	str	r3, [r6, r9, lsl #2]
   118cc:	add	r9, r9, #1
   118d0:	cmp	r8, r9
   118d4:	bgt	118a4 <ReadCompressedUInt32Data+0x130>
   118d8:	mul	r0, r5, r8
   118dc:	add	sp, sp, #8
   118e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118e4:	ldr	r9, [r4, #20]
   118e8:	cmp	r9, #0
   118ec:	moveq	sl, sp
   118f0:	movne	r9, #0
   118f4:	movne	sl, sp
   118f8:	bne	1195c <ReadCompressedUInt32Data+0x1e8>
   118fc:	cmp	r8, r9
   11900:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   11904:	mov	r3, r5
   11908:	mov	r2, sl
   1190c:	mov	r1, r7
   11910:	mov	r0, r4
   11914:	bl	3068 <InflateData>
   11918:	vldr	s15, [sp]
   1191c:	vcvt.u32.f32	s15, s15
   11920:	vmov	r3, s15
   11924:	str	r3, [r6, r9, lsl #2]
   11928:	add	r9, r9, #1
   1192c:	b	118fc <ReadCompressedUInt32Data+0x188>
   11930:	mov	r3, r5
   11934:	mov	r2, sl
   11938:	mov	r1, r7
   1193c:	mov	r0, r4
   11940:	bl	3068 <InflateData>
   11944:	mov	r0, sl
   11948:	bl	1b2c <Mat_floatSwap>
   1194c:	vcvt.u32.f32	s0, s0
   11950:	vmov	r3, s0
   11954:	str	r3, [r6, r9, lsl #2]
   11958:	add	r9, r9, #1
   1195c:	cmp	r8, r9
   11960:	bgt	11930 <ReadCompressedUInt32Data+0x1bc>
   11964:	b	118d8 <ReadCompressedUInt32Data+0x164>
   11968:	ldr	r9, [r4, #20]
   1196c:	cmp	r9, #0
   11970:	moveq	sl, sp
   11974:	movne	r9, #0
   11978:	movne	sl, sp
   1197c:	bne	119d0 <ReadCompressedUInt32Data+0x25c>
   11980:	cmp	r8, r9
   11984:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   11988:	mov	r3, r5
   1198c:	mov	r2, sl
   11990:	mov	r1, r7
   11994:	mov	r0, r4
   11998:	bl	3068 <InflateData>
   1199c:	ldr	r3, [sp]
   119a0:	str	r3, [r6, r9, lsl #2]
   119a4:	add	r9, r9, #1
   119a8:	b	11980 <ReadCompressedUInt32Data+0x20c>
   119ac:	mov	r3, r5
   119b0:	mov	r2, sl
   119b4:	mov	r1, r7
   119b8:	mov	r0, r4
   119bc:	bl	3068 <InflateData>
   119c0:	mov	r0, sl
   119c4:	bl	1a18 <Mat_int32Swap>
   119c8:	str	r0, [r6, r9, lsl #2]
   119cc:	add	r9, r9, #1
   119d0:	cmp	r8, r9
   119d4:	bgt	119ac <ReadCompressedUInt32Data+0x238>
   119d8:	b	118d8 <ReadCompressedUInt32Data+0x164>
   119dc:	ldr	r9, [r4, #20]
   119e0:	cmp	r9, #0
   119e4:	moveq	sl, sp
   119e8:	movne	r9, #0
   119ec:	movne	sl, sp
   119f0:	bne	11a44 <ReadCompressedUInt32Data+0x2d0>
   119f4:	cmp	r8, r9
   119f8:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   119fc:	mov	r3, r5
   11a00:	mov	r2, sl
   11a04:	mov	r1, r7
   11a08:	mov	r0, r4
   11a0c:	bl	3068 <InflateData>
   11a10:	ldr	r3, [sp]
   11a14:	str	r3, [r6, r9, lsl #2]
   11a18:	add	r9, r9, #1
   11a1c:	b	119f4 <ReadCompressedUInt32Data+0x280>
   11a20:	mov	r3, r5
   11a24:	mov	r2, sl
   11a28:	mov	r1, r7
   11a2c:	mov	r0, r4
   11a30:	bl	3068 <InflateData>
   11a34:	mov	r0, sl
   11a38:	bl	1a80 <Mat_uint32Swap>
   11a3c:	str	r0, [r6, r9, lsl #2]
   11a40:	add	r9, r9, #1
   11a44:	cmp	r8, r9
   11a48:	bgt	11a20 <ReadCompressedUInt32Data+0x2ac>
   11a4c:	b	118d8 <ReadCompressedUInt32Data+0x164>
   11a50:	ldr	r9, [r4, #20]
   11a54:	cmp	r9, #0
   11a58:	moveq	sl, sp
   11a5c:	movne	r9, #0
   11a60:	movne	sl, sp
   11a64:	bne	11ab8 <ReadCompressedUInt32Data+0x344>
   11a68:	cmp	r8, r9
   11a6c:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   11a70:	mov	r3, r5
   11a74:	mov	r2, sl
   11a78:	mov	r1, r7
   11a7c:	mov	r0, r4
   11a80:	bl	3068 <InflateData>
   11a84:	ldrsh	r3, [sp]
   11a88:	str	r3, [r6, r9, lsl #2]
   11a8c:	add	r9, r9, #1
   11a90:	b	11a68 <ReadCompressedUInt32Data+0x2f4>
   11a94:	mov	r3, r5
   11a98:	mov	r2, sl
   11a9c:	mov	r1, r7
   11aa0:	mov	r0, r4
   11aa4:	bl	3068 <InflateData>
   11aa8:	mov	r0, sl
   11aac:	bl	1adc <Mat_int16Swap>
   11ab0:	str	r0, [r6, r9, lsl #2]
   11ab4:	add	r9, r9, #1
   11ab8:	cmp	r8, r9
   11abc:	bgt	11a94 <ReadCompressedUInt32Data+0x320>
   11ac0:	b	118d8 <ReadCompressedUInt32Data+0x164>
   11ac4:	ldr	r9, [r4, #20]
   11ac8:	cmp	r9, #0
   11acc:	moveq	sl, sp
   11ad0:	movne	r9, #0
   11ad4:	movne	sl, sp
   11ad8:	bne	11b2c <ReadCompressedUInt32Data+0x3b8>
   11adc:	cmp	r8, r9
   11ae0:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   11ae4:	mov	r3, r5
   11ae8:	mov	r2, sl
   11aec:	mov	r1, r7
   11af0:	mov	r0, r4
   11af4:	bl	3068 <InflateData>
   11af8:	ldrh	r3, [sp]
   11afc:	str	r3, [r6, r9, lsl #2]
   11b00:	add	r9, r9, #1
   11b04:	b	11adc <ReadCompressedUInt32Data+0x368>
   11b08:	mov	r3, r5
   11b0c:	mov	r2, sl
   11b10:	mov	r1, r7
   11b14:	mov	r0, r4
   11b18:	bl	3068 <InflateData>
   11b1c:	mov	r0, sl
   11b20:	bl	1b10 <Mat_uint16Swap>
   11b24:	str	r0, [r6, r9, lsl #2]
   11b28:	add	r9, r9, #1
   11b2c:	cmp	r8, r9
   11b30:	bgt	11b08 <ReadCompressedUInt32Data+0x394>
   11b34:	b	118d8 <ReadCompressedUInt32Data+0x164>
   11b38:	cmp	r9, #12
   11b3c:	bne	11bb4 <ReadCompressedUInt32Data+0x440>
   11b40:	ldr	r9, [r4, #20]
   11b44:	cmp	r9, #0
   11b48:	moveq	sl, sp
   11b4c:	movne	r9, #0
   11b50:	movne	sl, sp
   11b54:	bne	11ba8 <ReadCompressedUInt32Data+0x434>
   11b58:	cmp	r8, r9
   11b5c:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   11b60:	mov	r3, r5
   11b64:	mov	r2, sl
   11b68:	mov	r1, r7
   11b6c:	mov	r0, r4
   11b70:	bl	3068 <InflateData>
   11b74:	ldr	r3, [sp]
   11b78:	str	r3, [r6, r9, lsl #2]
   11b7c:	add	r9, r9, #1
   11b80:	b	11b58 <ReadCompressedUInt32Data+0x3e4>
   11b84:	mov	r3, r5
   11b88:	mov	r2, sl
   11b8c:	mov	r1, r7
   11b90:	mov	r0, r4
   11b94:	bl	3068 <InflateData>
   11b98:	mov	r0, sl
   11b9c:	bl	18bc <Mat_int64Swap>
   11ba0:	str	r0, [r6, r9, lsl #2]
   11ba4:	add	r9, r9, #1
   11ba8:	cmp	r8, r9
   11bac:	bgt	11b84 <ReadCompressedUInt32Data+0x410>
   11bb0:	b	118d8 <ReadCompressedUInt32Data+0x164>
   11bb4:	cmp	r9, #13
   11bb8:	bne	118d8 <ReadCompressedUInt32Data+0x164>
   11bbc:	ldr	r9, [r4, #20]
   11bc0:	cmp	r9, #0
   11bc4:	moveq	sl, sp
   11bc8:	movne	r9, #0
   11bcc:	movne	sl, sp
   11bd0:	bne	11c24 <ReadCompressedUInt32Data+0x4b0>
   11bd4:	cmp	r8, r9
   11bd8:	ble	118d8 <ReadCompressedUInt32Data+0x164>
   11bdc:	mov	r3, r5
   11be0:	mov	r2, sl
   11be4:	mov	r1, r7
   11be8:	mov	r0, r4
   11bec:	bl	3068 <InflateData>
   11bf0:	ldr	r3, [sp]
   11bf4:	str	r3, [r6, r9, lsl #2]
   11bf8:	add	r9, r9, #1
   11bfc:	b	11bd4 <ReadCompressedUInt32Data+0x460>
   11c00:	mov	r3, r5
   11c04:	mov	r2, sl
   11c08:	mov	r1, r7
   11c0c:	mov	r0, r4
   11c10:	bl	3068 <InflateData>
   11c14:	mov	r0, sl
   11c18:	bl	1980 <Mat_uint64Swap>
   11c1c:	str	r0, [r6, r9, lsl #2]
   11c20:	add	r9, r9, #1
   11c24:	cmp	r8, r9
   11c28:	bgt	11c00 <ReadCompressedUInt32Data+0x48c>
   11c2c:	b	118d8 <ReadCompressedUInt32Data+0x164>

00011c30 <ReadInt16Data>:
   11c30:	cmp	r1, #0
   11c34:	cmpne	r0, #0
   11c38:	beq	11c4c <ReadInt16Data+0x1c>
   11c3c:	ldr	ip, [r0]
   11c40:	cmp	ip, #0
   11c44:	beq	11c4c <ReadInt16Data+0x1c>
   11c48:	b	a868 <ReadInt16Data.part.11>
   11c4c:	mov	r0, #0
   11c50:	bx	lr

00011c54 <ReadCompressedInt16Data>:
   11c54:	cmp	r1, #0
   11c58:	cmpne	r2, #0
   11c5c:	moveq	ip, #1
   11c60:	movne	ip, #0
   11c64:	cmp	r0, #0
   11c68:	orreq	ip, ip, #1
   11c6c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11c70:	cmp	ip, #0
   11c74:	ldr	r8, [sp, #40]	; 0x28
   11c78:	movne	r0, #0
   11c7c:	bne	11dc8 <ReadCompressedInt16Data+0x174>
   11c80:	mov	r5, r0
   11c84:	mov	r0, r3
   11c88:	mov	r9, r3
   11c8c:	mov	r7, r1
   11c90:	mov	r4, r2
   11c94:	bl	1600 <Mat_SizeOf@plt>
   11c98:	sub	r3, r9, #1
   11c9c:	mov	r6, r0
   11ca0:	cmp	r3, #8
   11ca4:	addls	pc, pc, r3, lsl #2
   11ca8:	b	12038 <ReadCompressedInt16Data+0x3e4>
   11cac:	b	11d08 <ReadCompressedInt16Data+0xb4>
   11cb0:	b	11cd0 <ReadCompressedInt16Data+0x7c>
   11cb4:	b	11f48 <ReadCompressedInt16Data+0x2f4>
   11cb8:	b	11fc0 <ReadCompressedInt16Data+0x36c>
   11cbc:	b	11e58 <ReadCompressedInt16Data+0x204>
   11cc0:	b	11ed0 <ReadCompressedInt16Data+0x27c>
   11cc4:	b	11dd0 <ReadCompressedInt16Data+0x17c>
   11cc8:	b	12038 <ReadCompressedInt16Data+0x3e4>
   11ccc:	b	11d40 <ReadCompressedInt16Data+0xec>
   11cd0:	sub	r4, r4, #2
   11cd4:	mov	r9, #0
   11cd8:	mov	sl, sp
   11cdc:	cmp	r8, r9
   11ce0:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   11ce4:	mov	r3, r6
   11ce8:	mov	r2, sl
   11cec:	mov	r1, r7
   11cf0:	mov	r0, r5
   11cf4:	bl	3068 <InflateData>
   11cf8:	ldrb	r3, [sp]
   11cfc:	add	r9, r9, #1
   11d00:	strh	r3, [r4, #2]!
   11d04:	b	11cdc <ReadCompressedInt16Data+0x88>
   11d08:	sub	r4, r4, #2
   11d0c:	mov	r9, #0
   11d10:	mov	sl, sp
   11d14:	cmp	r8, r9
   11d18:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   11d1c:	mov	r3, r6
   11d20:	mov	r2, sl
   11d24:	mov	r1, r7
   11d28:	mov	r0, r5
   11d2c:	bl	3068 <InflateData>
   11d30:	ldrsb	r3, [sp]
   11d34:	add	r9, r9, #1
   11d38:	strh	r3, [r4, #2]!
   11d3c:	b	11d14 <ReadCompressedInt16Data+0xc0>
   11d40:	ldr	r9, [r5, #20]
   11d44:	sub	r4, r4, #2
   11d48:	cmp	r9, #0
   11d4c:	moveq	sl, sp
   11d50:	movne	r9, #0
   11d54:	movne	sl, sp
   11d58:	bne	11dbc <ReadCompressedInt16Data+0x168>
   11d5c:	cmp	r8, r9
   11d60:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   11d64:	mov	r3, r6
   11d68:	mov	r2, sl
   11d6c:	mov	r1, r7
   11d70:	mov	r0, r5
   11d74:	bl	3068 <InflateData>
   11d78:	vldr	d7, [sp]
   11d7c:	add	r9, r9, #1
   11d80:	vcvt.s32.f64	s15, d7
   11d84:	vmov	r3, s15
   11d88:	strh	r3, [r4, #2]!
   11d8c:	b	11d5c <ReadCompressedInt16Data+0x108>
   11d90:	mov	r3, r6
   11d94:	mov	r2, sl
   11d98:	mov	r1, r7
   11d9c:	mov	r0, r5
   11da0:	bl	3068 <InflateData>
   11da4:	mov	r0, sl
   11da8:	bl	1b88 <Mat_doubleSwap>
   11dac:	add	r9, r9, #1
   11db0:	vcvt.s32.f64	s15, d0
   11db4:	vmov	r3, s15
   11db8:	strh	r3, [r4, #2]!
   11dbc:	cmp	r8, r9
   11dc0:	bgt	11d90 <ReadCompressedInt16Data+0x13c>
   11dc4:	mul	r0, r6, r8
   11dc8:	add	sp, sp, #8
   11dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11dd0:	ldr	r9, [r5, #20]
   11dd4:	sub	r4, r4, #2
   11dd8:	cmp	r9, #0
   11ddc:	moveq	sl, sp
   11de0:	movne	r9, #0
   11de4:	movne	sl, sp
   11de8:	bne	11e4c <ReadCompressedInt16Data+0x1f8>
   11dec:	cmp	r8, r9
   11df0:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   11df4:	mov	r3, r6
   11df8:	mov	r2, sl
   11dfc:	mov	r1, r7
   11e00:	mov	r0, r5
   11e04:	bl	3068 <InflateData>
   11e08:	vldr	s15, [sp]
   11e0c:	add	r9, r9, #1
   11e10:	vcvt.s32.f32	s15, s15
   11e14:	vmov	r3, s15
   11e18:	strh	r3, [r4, #2]!
   11e1c:	b	11dec <ReadCompressedInt16Data+0x198>
   11e20:	mov	r3, r6
   11e24:	mov	r2, sl
   11e28:	mov	r1, r7
   11e2c:	mov	r0, r5
   11e30:	bl	3068 <InflateData>
   11e34:	mov	r0, sl
   11e38:	bl	1b2c <Mat_floatSwap>
   11e3c:	add	r9, r9, #1
   11e40:	vcvt.s32.f32	s15, s0
   11e44:	vmov	r3, s15
   11e48:	strh	r3, [r4, #2]!
   11e4c:	cmp	r8, r9
   11e50:	bgt	11e20 <ReadCompressedInt16Data+0x1cc>
   11e54:	b	11dc4 <ReadCompressedInt16Data+0x170>
   11e58:	ldr	r9, [r5, #20]
   11e5c:	sub	r4, r4, #2
   11e60:	cmp	r9, #0
   11e64:	moveq	sl, sp
   11e68:	movne	r9, #0
   11e6c:	movne	sl, sp
   11e70:	bne	11ec4 <ReadCompressedInt16Data+0x270>
   11e74:	cmp	r8, r9
   11e78:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   11e7c:	mov	r3, r6
   11e80:	mov	r2, sl
   11e84:	mov	r1, r7
   11e88:	mov	r0, r5
   11e8c:	bl	3068 <InflateData>
   11e90:	ldr	r3, [sp]
   11e94:	add	r9, r9, #1
   11e98:	strh	r3, [r4, #2]!
   11e9c:	b	11e74 <ReadCompressedInt16Data+0x220>
   11ea0:	mov	r3, r6
   11ea4:	mov	r2, sl
   11ea8:	mov	r1, r7
   11eac:	mov	r0, r5
   11eb0:	bl	3068 <InflateData>
   11eb4:	mov	r0, sl
   11eb8:	bl	1a18 <Mat_int32Swap>
   11ebc:	add	r9, r9, #1
   11ec0:	strh	r0, [r4, #2]!
   11ec4:	cmp	r8, r9
   11ec8:	bgt	11ea0 <ReadCompressedInt16Data+0x24c>
   11ecc:	b	11dc4 <ReadCompressedInt16Data+0x170>
   11ed0:	ldr	r9, [r5, #20]
   11ed4:	sub	r4, r4, #2
   11ed8:	cmp	r9, #0
   11edc:	moveq	sl, sp
   11ee0:	movne	r9, #0
   11ee4:	movne	sl, sp
   11ee8:	bne	11f3c <ReadCompressedInt16Data+0x2e8>
   11eec:	cmp	r8, r9
   11ef0:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   11ef4:	mov	r3, r6
   11ef8:	mov	r2, sl
   11efc:	mov	r1, r7
   11f00:	mov	r0, r5
   11f04:	bl	3068 <InflateData>
   11f08:	ldr	r3, [sp]
   11f0c:	add	r9, r9, #1
   11f10:	strh	r3, [r4, #2]!
   11f14:	b	11eec <ReadCompressedInt16Data+0x298>
   11f18:	mov	r3, r6
   11f1c:	mov	r2, sl
   11f20:	mov	r1, r7
   11f24:	mov	r0, r5
   11f28:	bl	3068 <InflateData>
   11f2c:	mov	r0, sl
   11f30:	bl	1a80 <Mat_uint32Swap>
   11f34:	add	r9, r9, #1
   11f38:	strh	r0, [r4, #2]!
   11f3c:	cmp	r8, r9
   11f40:	bgt	11f18 <ReadCompressedInt16Data+0x2c4>
   11f44:	b	11dc4 <ReadCompressedInt16Data+0x170>
   11f48:	ldr	r9, [r5, #20]
   11f4c:	sub	r4, r4, #2
   11f50:	cmp	r9, #0
   11f54:	moveq	sl, sp
   11f58:	movne	r9, #0
   11f5c:	movne	sl, sp
   11f60:	bne	11fb4 <ReadCompressedInt16Data+0x360>
   11f64:	cmp	r8, r9
   11f68:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   11f6c:	mov	r3, r6
   11f70:	mov	r2, sl
   11f74:	mov	r1, r7
   11f78:	mov	r0, r5
   11f7c:	bl	3068 <InflateData>
   11f80:	ldrh	r3, [sp]
   11f84:	add	r9, r9, #1
   11f88:	strh	r3, [r4, #2]!
   11f8c:	b	11f64 <ReadCompressedInt16Data+0x310>
   11f90:	mov	r3, r6
   11f94:	mov	r2, sl
   11f98:	mov	r1, r7
   11f9c:	mov	r0, r5
   11fa0:	bl	3068 <InflateData>
   11fa4:	mov	r0, sl
   11fa8:	bl	1adc <Mat_int16Swap>
   11fac:	add	r9, r9, #1
   11fb0:	strh	r0, [r4, #2]!
   11fb4:	cmp	r8, r9
   11fb8:	bgt	11f90 <ReadCompressedInt16Data+0x33c>
   11fbc:	b	11dc4 <ReadCompressedInt16Data+0x170>
   11fc0:	ldr	r9, [r5, #20]
   11fc4:	sub	r4, r4, #2
   11fc8:	cmp	r9, #0
   11fcc:	moveq	sl, sp
   11fd0:	movne	r9, #0
   11fd4:	movne	sl, sp
   11fd8:	bne	1202c <ReadCompressedInt16Data+0x3d8>
   11fdc:	cmp	r8, r9
   11fe0:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   11fe4:	mov	r3, r6
   11fe8:	mov	r2, sl
   11fec:	mov	r1, r7
   11ff0:	mov	r0, r5
   11ff4:	bl	3068 <InflateData>
   11ff8:	ldrh	r3, [sp]
   11ffc:	add	r9, r9, #1
   12000:	strh	r3, [r4, #2]!
   12004:	b	11fdc <ReadCompressedInt16Data+0x388>
   12008:	mov	r3, r6
   1200c:	mov	r2, sl
   12010:	mov	r1, r7
   12014:	mov	r0, r5
   12018:	bl	3068 <InflateData>
   1201c:	mov	r0, sl
   12020:	bl	1b10 <Mat_uint16Swap>
   12024:	add	r9, r9, #1
   12028:	strh	r0, [r4, #2]!
   1202c:	cmp	r8, r9
   12030:	bgt	12008 <ReadCompressedInt16Data+0x3b4>
   12034:	b	11dc4 <ReadCompressedInt16Data+0x170>
   12038:	cmp	r9, #12
   1203c:	bne	120b8 <ReadCompressedInt16Data+0x464>
   12040:	ldr	r9, [r5, #20]
   12044:	sub	r4, r4, #2
   12048:	cmp	r9, #0
   1204c:	moveq	sl, sp
   12050:	movne	r9, #0
   12054:	movne	sl, sp
   12058:	bne	120ac <ReadCompressedInt16Data+0x458>
   1205c:	cmp	r8, r9
   12060:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   12064:	mov	r3, r6
   12068:	mov	r2, sl
   1206c:	mov	r1, r7
   12070:	mov	r0, r5
   12074:	bl	3068 <InflateData>
   12078:	ldr	r3, [sp]
   1207c:	add	r9, r9, #1
   12080:	strh	r3, [r4, #2]!
   12084:	b	1205c <ReadCompressedInt16Data+0x408>
   12088:	mov	r3, r6
   1208c:	mov	r2, sl
   12090:	mov	r1, r7
   12094:	mov	r0, r5
   12098:	bl	3068 <InflateData>
   1209c:	mov	r0, sl
   120a0:	bl	18bc <Mat_int64Swap>
   120a4:	add	r9, r9, #1
   120a8:	strh	r0, [r4, #2]!
   120ac:	cmp	r8, r9
   120b0:	bgt	12088 <ReadCompressedInt16Data+0x434>
   120b4:	b	11dc4 <ReadCompressedInt16Data+0x170>
   120b8:	cmp	r9, #13
   120bc:	bne	11dc4 <ReadCompressedInt16Data+0x170>
   120c0:	ldr	r9, [r5, #20]
   120c4:	sub	r4, r4, #2
   120c8:	cmp	r9, #0
   120cc:	moveq	sl, sp
   120d0:	movne	r9, #0
   120d4:	movne	sl, sp
   120d8:	bne	1212c <ReadCompressedInt16Data+0x4d8>
   120dc:	cmp	r8, r9
   120e0:	ble	11dc4 <ReadCompressedInt16Data+0x170>
   120e4:	mov	r3, r6
   120e8:	mov	r2, sl
   120ec:	mov	r1, r7
   120f0:	mov	r0, r5
   120f4:	bl	3068 <InflateData>
   120f8:	ldr	r3, [sp]
   120fc:	add	r9, r9, #1
   12100:	strh	r3, [r4, #2]!
   12104:	b	120dc <ReadCompressedInt16Data+0x488>
   12108:	mov	r3, r6
   1210c:	mov	r2, sl
   12110:	mov	r1, r7
   12114:	mov	r0, r5
   12118:	bl	3068 <InflateData>
   1211c:	mov	r0, sl
   12120:	bl	1980 <Mat_uint64Swap>
   12124:	add	r9, r9, #1
   12128:	strh	r0, [r4, #2]!
   1212c:	cmp	r8, r9
   12130:	bgt	12108 <ReadCompressedInt16Data+0x4b4>
   12134:	b	11dc4 <ReadCompressedInt16Data+0x170>

00012138 <ReadUInt16Data>:
   12138:	cmp	r1, #0
   1213c:	cmpne	r0, #0
   12140:	beq	12154 <ReadUInt16Data+0x1c>
   12144:	ldr	ip, [r0]
   12148:	cmp	ip, #0
   1214c:	beq	12154 <ReadUInt16Data+0x1c>
   12150:	b	bb38 <ReadUInt16Data.part.13>
   12154:	mov	r0, #0
   12158:	bx	lr

0001215c <ReadCompressedUInt16Data>:
   1215c:	cmp	r1, #0
   12160:	cmpne	r2, #0
   12164:	moveq	ip, #1
   12168:	movne	ip, #0
   1216c:	cmp	r0, #0
   12170:	orreq	ip, ip, #1
   12174:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12178:	cmp	ip, #0
   1217c:	ldr	r8, [sp, #40]	; 0x28
   12180:	movne	r0, #0
   12184:	bne	122d0 <ReadCompressedUInt16Data+0x174>
   12188:	mov	r5, r0
   1218c:	mov	r0, r3
   12190:	mov	r9, r3
   12194:	mov	r7, r1
   12198:	mov	r4, r2
   1219c:	bl	1600 <Mat_SizeOf@plt>
   121a0:	sub	r3, r9, #1
   121a4:	mov	r6, r0
   121a8:	cmp	r3, #8
   121ac:	addls	pc, pc, r3, lsl #2
   121b0:	b	12540 <ReadCompressedUInt16Data+0x3e4>
   121b4:	b	12210 <ReadCompressedUInt16Data+0xb4>
   121b8:	b	121d8 <ReadCompressedUInt16Data+0x7c>
   121bc:	b	12450 <ReadCompressedUInt16Data+0x2f4>
   121c0:	b	124c8 <ReadCompressedUInt16Data+0x36c>
   121c4:	b	12360 <ReadCompressedUInt16Data+0x204>
   121c8:	b	123d8 <ReadCompressedUInt16Data+0x27c>
   121cc:	b	122d8 <ReadCompressedUInt16Data+0x17c>
   121d0:	b	12540 <ReadCompressedUInt16Data+0x3e4>
   121d4:	b	12248 <ReadCompressedUInt16Data+0xec>
   121d8:	sub	r4, r4, #2
   121dc:	mov	r9, #0
   121e0:	mov	sl, sp
   121e4:	cmp	r8, r9
   121e8:	ble	122cc <ReadCompressedUInt16Data+0x170>
   121ec:	mov	r3, r6
   121f0:	mov	r2, sl
   121f4:	mov	r1, r7
   121f8:	mov	r0, r5
   121fc:	bl	3068 <InflateData>
   12200:	ldrb	r3, [sp]
   12204:	add	r9, r9, #1
   12208:	strh	r3, [r4, #2]!
   1220c:	b	121e4 <ReadCompressedUInt16Data+0x88>
   12210:	sub	r4, r4, #2
   12214:	mov	r9, #0
   12218:	mov	sl, sp
   1221c:	cmp	r8, r9
   12220:	ble	122cc <ReadCompressedUInt16Data+0x170>
   12224:	mov	r3, r6
   12228:	mov	r2, sl
   1222c:	mov	r1, r7
   12230:	mov	r0, r5
   12234:	bl	3068 <InflateData>
   12238:	ldrsb	r3, [sp]
   1223c:	add	r9, r9, #1
   12240:	strh	r3, [r4, #2]!
   12244:	b	1221c <ReadCompressedUInt16Data+0xc0>
   12248:	ldr	r9, [r5, #20]
   1224c:	sub	r4, r4, #2
   12250:	cmp	r9, #0
   12254:	moveq	sl, sp
   12258:	movne	r9, #0
   1225c:	movne	sl, sp
   12260:	bne	122c4 <ReadCompressedUInt16Data+0x168>
   12264:	cmp	r8, r9
   12268:	ble	122cc <ReadCompressedUInt16Data+0x170>
   1226c:	mov	r3, r6
   12270:	mov	r2, sl
   12274:	mov	r1, r7
   12278:	mov	r0, r5
   1227c:	bl	3068 <InflateData>
   12280:	vldr	d7, [sp]
   12284:	add	r9, r9, #1
   12288:	vcvt.u32.f64	s15, d7
   1228c:	vmov	r3, s15
   12290:	strh	r3, [r4, #2]!
   12294:	b	12264 <ReadCompressedUInt16Data+0x108>
   12298:	mov	r3, r6
   1229c:	mov	r2, sl
   122a0:	mov	r1, r7
   122a4:	mov	r0, r5
   122a8:	bl	3068 <InflateData>
   122ac:	mov	r0, sl
   122b0:	bl	1b88 <Mat_doubleSwap>
   122b4:	add	r9, r9, #1
   122b8:	vcvt.u32.f64	s15, d0
   122bc:	vmov	r3, s15
   122c0:	strh	r3, [r4, #2]!
   122c4:	cmp	r8, r9
   122c8:	bgt	12298 <ReadCompressedUInt16Data+0x13c>
   122cc:	mul	r0, r6, r8
   122d0:	add	sp, sp, #8
   122d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122d8:	ldr	r9, [r5, #20]
   122dc:	sub	r4, r4, #2
   122e0:	cmp	r9, #0
   122e4:	moveq	sl, sp
   122e8:	movne	r9, #0
   122ec:	movne	sl, sp
   122f0:	bne	12354 <ReadCompressedUInt16Data+0x1f8>
   122f4:	cmp	r8, r9
   122f8:	ble	122cc <ReadCompressedUInt16Data+0x170>
   122fc:	mov	r3, r6
   12300:	mov	r2, sl
   12304:	mov	r1, r7
   12308:	mov	r0, r5
   1230c:	bl	3068 <InflateData>
   12310:	vldr	s15, [sp]
   12314:	add	r9, r9, #1
   12318:	vcvt.u32.f32	s15, s15
   1231c:	vmov	r3, s15
   12320:	strh	r3, [r4, #2]!
   12324:	b	122f4 <ReadCompressedUInt16Data+0x198>
   12328:	mov	r3, r6
   1232c:	mov	r2, sl
   12330:	mov	r1, r7
   12334:	mov	r0, r5
   12338:	bl	3068 <InflateData>
   1233c:	mov	r0, sl
   12340:	bl	1b2c <Mat_floatSwap>
   12344:	add	r9, r9, #1
   12348:	vcvt.u32.f32	s15, s0
   1234c:	vmov	r3, s15
   12350:	strh	r3, [r4, #2]!
   12354:	cmp	r8, r9
   12358:	bgt	12328 <ReadCompressedUInt16Data+0x1cc>
   1235c:	b	122cc <ReadCompressedUInt16Data+0x170>
   12360:	ldr	r9, [r5, #20]
   12364:	sub	r4, r4, #2
   12368:	cmp	r9, #0
   1236c:	moveq	sl, sp
   12370:	movne	r9, #0
   12374:	movne	sl, sp
   12378:	bne	123cc <ReadCompressedUInt16Data+0x270>
   1237c:	cmp	r8, r9
   12380:	ble	122cc <ReadCompressedUInt16Data+0x170>
   12384:	mov	r3, r6
   12388:	mov	r2, sl
   1238c:	mov	r1, r7
   12390:	mov	r0, r5
   12394:	bl	3068 <InflateData>
   12398:	ldr	r3, [sp]
   1239c:	add	r9, r9, #1
   123a0:	strh	r3, [r4, #2]!
   123a4:	b	1237c <ReadCompressedUInt16Data+0x220>
   123a8:	mov	r3, r6
   123ac:	mov	r2, sl
   123b0:	mov	r1, r7
   123b4:	mov	r0, r5
   123b8:	bl	3068 <InflateData>
   123bc:	mov	r0, sl
   123c0:	bl	1a18 <Mat_int32Swap>
   123c4:	add	r9, r9, #1
   123c8:	strh	r0, [r4, #2]!
   123cc:	cmp	r8, r9
   123d0:	bgt	123a8 <ReadCompressedUInt16Data+0x24c>
   123d4:	b	122cc <ReadCompressedUInt16Data+0x170>
   123d8:	ldr	r9, [r5, #20]
   123dc:	sub	r4, r4, #2
   123e0:	cmp	r9, #0
   123e4:	moveq	sl, sp
   123e8:	movne	r9, #0
   123ec:	movne	sl, sp
   123f0:	bne	12444 <ReadCompressedUInt16Data+0x2e8>
   123f4:	cmp	r8, r9
   123f8:	ble	122cc <ReadCompressedUInt16Data+0x170>
   123fc:	mov	r3, r6
   12400:	mov	r2, sl
   12404:	mov	r1, r7
   12408:	mov	r0, r5
   1240c:	bl	3068 <InflateData>
   12410:	ldr	r3, [sp]
   12414:	add	r9, r9, #1
   12418:	strh	r3, [r4, #2]!
   1241c:	b	123f4 <ReadCompressedUInt16Data+0x298>
   12420:	mov	r3, r6
   12424:	mov	r2, sl
   12428:	mov	r1, r7
   1242c:	mov	r0, r5
   12430:	bl	3068 <InflateData>
   12434:	mov	r0, sl
   12438:	bl	1a80 <Mat_uint32Swap>
   1243c:	add	r9, r9, #1
   12440:	strh	r0, [r4, #2]!
   12444:	cmp	r8, r9
   12448:	bgt	12420 <ReadCompressedUInt16Data+0x2c4>
   1244c:	b	122cc <ReadCompressedUInt16Data+0x170>
   12450:	ldr	r9, [r5, #20]
   12454:	sub	r4, r4, #2
   12458:	cmp	r9, #0
   1245c:	moveq	sl, sp
   12460:	movne	r9, #0
   12464:	movne	sl, sp
   12468:	bne	124bc <ReadCompressedUInt16Data+0x360>
   1246c:	cmp	r8, r9
   12470:	ble	122cc <ReadCompressedUInt16Data+0x170>
   12474:	mov	r3, r6
   12478:	mov	r2, sl
   1247c:	mov	r1, r7
   12480:	mov	r0, r5
   12484:	bl	3068 <InflateData>
   12488:	ldrh	r3, [sp]
   1248c:	add	r9, r9, #1
   12490:	strh	r3, [r4, #2]!
   12494:	b	1246c <ReadCompressedUInt16Data+0x310>
   12498:	mov	r3, r6
   1249c:	mov	r2, sl
   124a0:	mov	r1, r7
   124a4:	mov	r0, r5
   124a8:	bl	3068 <InflateData>
   124ac:	mov	r0, sl
   124b0:	bl	1adc <Mat_int16Swap>
   124b4:	add	r9, r9, #1
   124b8:	strh	r0, [r4, #2]!
   124bc:	cmp	r8, r9
   124c0:	bgt	12498 <ReadCompressedUInt16Data+0x33c>
   124c4:	b	122cc <ReadCompressedUInt16Data+0x170>
   124c8:	ldr	r9, [r5, #20]
   124cc:	sub	r4, r4, #2
   124d0:	cmp	r9, #0
   124d4:	moveq	sl, sp
   124d8:	movne	r9, #0
   124dc:	movne	sl, sp
   124e0:	bne	12534 <ReadCompressedUInt16Data+0x3d8>
   124e4:	cmp	r8, r9
   124e8:	ble	122cc <ReadCompressedUInt16Data+0x170>
   124ec:	mov	r3, r6
   124f0:	mov	r2, sl
   124f4:	mov	r1, r7
   124f8:	mov	r0, r5
   124fc:	bl	3068 <InflateData>
   12500:	ldrh	r3, [sp]
   12504:	add	r9, r9, #1
   12508:	strh	r3, [r4, #2]!
   1250c:	b	124e4 <ReadCompressedUInt16Data+0x388>
   12510:	mov	r3, r6
   12514:	mov	r2, sl
   12518:	mov	r1, r7
   1251c:	mov	r0, r5
   12520:	bl	3068 <InflateData>
   12524:	mov	r0, sl
   12528:	bl	1b10 <Mat_uint16Swap>
   1252c:	add	r9, r9, #1
   12530:	strh	r0, [r4, #2]!
   12534:	cmp	r8, r9
   12538:	bgt	12510 <ReadCompressedUInt16Data+0x3b4>
   1253c:	b	122cc <ReadCompressedUInt16Data+0x170>
   12540:	cmp	r9, #12
   12544:	bne	125c0 <ReadCompressedUInt16Data+0x464>
   12548:	ldr	r9, [r5, #20]
   1254c:	sub	r4, r4, #2
   12550:	cmp	r9, #0
   12554:	moveq	sl, sp
   12558:	movne	r9, #0
   1255c:	movne	sl, sp
   12560:	bne	125b4 <ReadCompressedUInt16Data+0x458>
   12564:	cmp	r8, r9
   12568:	ble	122cc <ReadCompressedUInt16Data+0x170>
   1256c:	mov	r3, r6
   12570:	mov	r2, sl
   12574:	mov	r1, r7
   12578:	mov	r0, r5
   1257c:	bl	3068 <InflateData>
   12580:	ldr	r3, [sp]
   12584:	add	r9, r9, #1
   12588:	strh	r3, [r4, #2]!
   1258c:	b	12564 <ReadCompressedUInt16Data+0x408>
   12590:	mov	r3, r6
   12594:	mov	r2, sl
   12598:	mov	r1, r7
   1259c:	mov	r0, r5
   125a0:	bl	3068 <InflateData>
   125a4:	mov	r0, sl
   125a8:	bl	18bc <Mat_int64Swap>
   125ac:	add	r9, r9, #1
   125b0:	strh	r0, [r4, #2]!
   125b4:	cmp	r8, r9
   125b8:	bgt	12590 <ReadCompressedUInt16Data+0x434>
   125bc:	b	122cc <ReadCompressedUInt16Data+0x170>
   125c0:	cmp	r9, #13
   125c4:	bne	122cc <ReadCompressedUInt16Data+0x170>
   125c8:	ldr	r9, [r5, #20]
   125cc:	sub	r4, r4, #2
   125d0:	cmp	r9, #0
   125d4:	moveq	sl, sp
   125d8:	movne	r9, #0
   125dc:	movne	sl, sp
   125e0:	bne	12634 <ReadCompressedUInt16Data+0x4d8>
   125e4:	cmp	r8, r9
   125e8:	ble	122cc <ReadCompressedUInt16Data+0x170>
   125ec:	mov	r3, r6
   125f0:	mov	r2, sl
   125f4:	mov	r1, r7
   125f8:	mov	r0, r5
   125fc:	bl	3068 <InflateData>
   12600:	ldr	r3, [sp]
   12604:	add	r9, r9, #1
   12608:	strh	r3, [r4, #2]!
   1260c:	b	125e4 <ReadCompressedUInt16Data+0x488>
   12610:	mov	r3, r6
   12614:	mov	r2, sl
   12618:	mov	r1, r7
   1261c:	mov	r0, r5
   12620:	bl	3068 <InflateData>
   12624:	mov	r0, sl
   12628:	bl	1980 <Mat_uint64Swap>
   1262c:	add	r9, r9, #1
   12630:	strh	r0, [r4, #2]!
   12634:	cmp	r8, r9
   12638:	bgt	12610 <ReadCompressedUInt16Data+0x4b4>
   1263c:	b	122cc <ReadCompressedUInt16Data+0x170>

00012640 <ReadInt8Data>:
   12640:	cmp	r1, #0
   12644:	cmpne	r0, #0
   12648:	beq	1265c <ReadInt8Data+0x1c>
   1264c:	ldr	ip, [r0]
   12650:	cmp	ip, #0
   12654:	beq	1265c <ReadInt8Data+0x1c>
   12658:	b	ce08 <ReadInt8Data.part.15>
   1265c:	mov	r0, #0
   12660:	bx	lr

00012664 <ReadCompressedInt8Data>:
   12664:	cmp	r1, #0
   12668:	cmpne	r2, #0
   1266c:	moveq	ip, #1
   12670:	movne	ip, #0
   12674:	cmp	r0, #0
   12678:	orreq	ip, ip, #1
   1267c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12680:	cmp	ip, #0
   12684:	ldr	r8, [sp, #40]	; 0x28
   12688:	movne	r0, #0
   1268c:	bne	127c8 <ReadCompressedInt8Data+0x164>
   12690:	mov	r5, r0
   12694:	mov	r0, r3
   12698:	mov	r9, r3
   1269c:	mov	r7, r1
   126a0:	mov	r4, r2
   126a4:	bl	1600 <Mat_SizeOf@plt>
   126a8:	sub	r3, r9, #1
   126ac:	mov	r6, r0
   126b0:	cmp	r3, #8
   126b4:	addls	pc, pc, r3, lsl #2
   126b8:	b	12a10 <ReadCompressedInt8Data+0x3ac>
   126bc:	b	12714 <ReadCompressedInt8Data+0xb0>
   126c0:	b	126e0 <ReadCompressedInt8Data+0x7c>
   126c4:	b	12930 <ReadCompressedInt8Data+0x2cc>
   126c8:	b	129a0 <ReadCompressedInt8Data+0x33c>
   126cc:	b	12850 <ReadCompressedInt8Data+0x1ec>
   126d0:	b	128c0 <ReadCompressedInt8Data+0x25c>
   126d4:	b	127d0 <ReadCompressedInt8Data+0x16c>
   126d8:	b	12a10 <ReadCompressedInt8Data+0x3ac>
   126dc:	b	12748 <ReadCompressedInt8Data+0xe4>
   126e0:	mov	r9, r4
   126e4:	mov	sl, sp
   126e8:	sub	r3, r9, r4
   126ec:	cmp	r8, r3
   126f0:	ble	127c4 <ReadCompressedInt8Data+0x160>
   126f4:	mov	r3, r6
   126f8:	mov	r2, sl
   126fc:	mov	r1, r7
   12700:	mov	r0, r5
   12704:	bl	3068 <InflateData>
   12708:	ldrb	r3, [sp]
   1270c:	strb	r3, [r9], #1
   12710:	b	126e8 <ReadCompressedInt8Data+0x84>
   12714:	mov	r9, r4
   12718:	mov	sl, sp
   1271c:	sub	r3, r9, r4
   12720:	cmp	r8, r3
   12724:	ble	127c4 <ReadCompressedInt8Data+0x160>
   12728:	mov	r3, r6
   1272c:	mov	r2, sl
   12730:	mov	r1, r7
   12734:	mov	r0, r5
   12738:	bl	3068 <InflateData>
   1273c:	ldrb	r3, [sp]
   12740:	strb	r3, [r9], #1
   12744:	b	1271c <ReadCompressedInt8Data+0xb8>
   12748:	ldr	r3, [r5, #20]
   1274c:	mov	r9, r4
   12750:	cmp	r3, #0
   12754:	mov	sl, sp
   12758:	bne	127b8 <ReadCompressedInt8Data+0x154>
   1275c:	sub	r3, r9, r4
   12760:	cmp	r8, r3
   12764:	ble	127c4 <ReadCompressedInt8Data+0x160>
   12768:	mov	r3, r6
   1276c:	mov	r2, sl
   12770:	mov	r1, r7
   12774:	mov	r0, r5
   12778:	bl	3068 <InflateData>
   1277c:	vldr	d7, [sp]
   12780:	vcvt.s32.f64	s15, d7
   12784:	vmov	r3, s15
   12788:	strb	r3, [r9], #1
   1278c:	b	1275c <ReadCompressedInt8Data+0xf8>
   12790:	mov	r3, r6
   12794:	mov	r2, sl
   12798:	mov	r1, r7
   1279c:	mov	r0, r5
   127a0:	bl	3068 <InflateData>
   127a4:	mov	r0, sl
   127a8:	bl	1b88 <Mat_doubleSwap>
   127ac:	vcvt.s32.f64	s15, d0
   127b0:	vmov	r3, s15
   127b4:	strb	r3, [r9], #1
   127b8:	sub	r3, r9, r4
   127bc:	cmp	r8, r3
   127c0:	bgt	12790 <ReadCompressedInt8Data+0x12c>
   127c4:	mul	r0, r6, r8
   127c8:	add	sp, sp, #8
   127cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   127d0:	ldr	r3, [r5, #20]
   127d4:	mov	r9, r4
   127d8:	cmp	r3, #0
   127dc:	mov	sl, sp
   127e0:	bne	12840 <ReadCompressedInt8Data+0x1dc>
   127e4:	sub	r3, r9, r4
   127e8:	cmp	r8, r3
   127ec:	ble	127c4 <ReadCompressedInt8Data+0x160>
   127f0:	mov	r3, r6
   127f4:	mov	r2, sl
   127f8:	mov	r1, r7
   127fc:	mov	r0, r5
   12800:	bl	3068 <InflateData>
   12804:	vldr	s15, [sp]
   12808:	vcvt.s32.f32	s15, s15
   1280c:	vmov	r3, s15
   12810:	strb	r3, [r9], #1
   12814:	b	127e4 <ReadCompressedInt8Data+0x180>
   12818:	mov	r3, r6
   1281c:	mov	r2, sl
   12820:	mov	r1, r7
   12824:	mov	r0, r5
   12828:	bl	3068 <InflateData>
   1282c:	mov	r0, sl
   12830:	bl	1b2c <Mat_floatSwap>
   12834:	vcvt.s32.f32	s15, s0
   12838:	vmov	r3, s15
   1283c:	strb	r3, [r9], #1
   12840:	sub	r3, r9, r4
   12844:	cmp	r8, r3
   12848:	bgt	12818 <ReadCompressedInt8Data+0x1b4>
   1284c:	b	127c4 <ReadCompressedInt8Data+0x160>
   12850:	ldr	r3, [r5, #20]
   12854:	mov	r9, r4
   12858:	cmp	r3, #0
   1285c:	mov	sl, sp
   12860:	bne	128b0 <ReadCompressedInt8Data+0x24c>
   12864:	sub	r3, r9, r4
   12868:	cmp	r8, r3
   1286c:	ble	127c4 <ReadCompressedInt8Data+0x160>
   12870:	mov	r3, r6
   12874:	mov	r2, sl
   12878:	mov	r1, r7
   1287c:	mov	r0, r5
   12880:	bl	3068 <InflateData>
   12884:	ldr	r3, [sp]
   12888:	strb	r3, [r9], #1
   1288c:	b	12864 <ReadCompressedInt8Data+0x200>
   12890:	mov	r3, r6
   12894:	mov	r2, sl
   12898:	mov	r1, r7
   1289c:	mov	r0, r5
   128a0:	bl	3068 <InflateData>
   128a4:	mov	r0, sl
   128a8:	bl	1a18 <Mat_int32Swap>
   128ac:	strb	r0, [r9], #1
   128b0:	sub	r3, r9, r4
   128b4:	cmp	r8, r3
   128b8:	bgt	12890 <ReadCompressedInt8Data+0x22c>
   128bc:	b	127c4 <ReadCompressedInt8Data+0x160>
   128c0:	ldr	r3, [r5, #20]
   128c4:	mov	r9, r4
   128c8:	cmp	r3, #0
   128cc:	mov	sl, sp
   128d0:	bne	12920 <ReadCompressedInt8Data+0x2bc>
   128d4:	sub	r3, r9, r4
   128d8:	cmp	r8, r3
   128dc:	ble	127c4 <ReadCompressedInt8Data+0x160>
   128e0:	mov	r3, r6
   128e4:	mov	r2, sl
   128e8:	mov	r1, r7
   128ec:	mov	r0, r5
   128f0:	bl	3068 <InflateData>
   128f4:	ldr	r3, [sp]
   128f8:	strb	r3, [r9], #1
   128fc:	b	128d4 <ReadCompressedInt8Data+0x270>
   12900:	mov	r3, r6
   12904:	mov	r2, sl
   12908:	mov	r1, r7
   1290c:	mov	r0, r5
   12910:	bl	3068 <InflateData>
   12914:	mov	r0, sl
   12918:	bl	1a80 <Mat_uint32Swap>
   1291c:	strb	r0, [r9], #1
   12920:	sub	r3, r9, r4
   12924:	cmp	r8, r3
   12928:	bgt	12900 <ReadCompressedInt8Data+0x29c>
   1292c:	b	127c4 <ReadCompressedInt8Data+0x160>
   12930:	ldr	r3, [r5, #20]
   12934:	mov	r9, r4
   12938:	cmp	r3, #0
   1293c:	mov	sl, sp
   12940:	bne	12990 <ReadCompressedInt8Data+0x32c>
   12944:	sub	r3, r9, r4
   12948:	cmp	r8, r3
   1294c:	ble	127c4 <ReadCompressedInt8Data+0x160>
   12950:	mov	r3, r6
   12954:	mov	r2, sl
   12958:	mov	r1, r7
   1295c:	mov	r0, r5
   12960:	bl	3068 <InflateData>
   12964:	ldrh	r3, [sp]
   12968:	strb	r3, [r9], #1
   1296c:	b	12944 <ReadCompressedInt8Data+0x2e0>
   12970:	mov	r3, r6
   12974:	mov	r2, sl
   12978:	mov	r1, r7
   1297c:	mov	r0, r5
   12980:	bl	3068 <InflateData>
   12984:	mov	r0, sl
   12988:	bl	1adc <Mat_int16Swap>
   1298c:	strb	r0, [r9], #1
   12990:	sub	r3, r9, r4
   12994:	cmp	r8, r3
   12998:	bgt	12970 <ReadCompressedInt8Data+0x30c>
   1299c:	b	127c4 <ReadCompressedInt8Data+0x160>
   129a0:	ldr	r3, [r5, #20]
   129a4:	mov	r9, r4
   129a8:	cmp	r3, #0
   129ac:	mov	sl, sp
   129b0:	bne	12a00 <ReadCompressedInt8Data+0x39c>
   129b4:	sub	r3, r9, r4
   129b8:	cmp	r8, r3
   129bc:	ble	127c4 <ReadCompressedInt8Data+0x160>
   129c0:	mov	r3, r6
   129c4:	mov	r2, sl
   129c8:	mov	r1, r7
   129cc:	mov	r0, r5
   129d0:	bl	3068 <InflateData>
   129d4:	ldrh	r3, [sp]
   129d8:	strb	r3, [r9], #1
   129dc:	b	129b4 <ReadCompressedInt8Data+0x350>
   129e0:	mov	r3, r6
   129e4:	mov	r2, sl
   129e8:	mov	r1, r7
   129ec:	mov	r0, r5
   129f0:	bl	3068 <InflateData>
   129f4:	mov	r0, sl
   129f8:	bl	1b10 <Mat_uint16Swap>
   129fc:	strb	r0, [r9], #1
   12a00:	sub	r3, r9, r4
   12a04:	cmp	r8, r3
   12a08:	bgt	129e0 <ReadCompressedInt8Data+0x37c>
   12a0c:	b	127c4 <ReadCompressedInt8Data+0x160>
   12a10:	cmp	r9, #12
   12a14:	bne	12a88 <ReadCompressedInt8Data+0x424>
   12a18:	ldr	r3, [r5, #20]
   12a1c:	mov	r9, r4
   12a20:	cmp	r3, #0
   12a24:	mov	sl, sp
   12a28:	bne	12a78 <ReadCompressedInt8Data+0x414>
   12a2c:	sub	r3, r9, r4
   12a30:	cmp	r8, r3
   12a34:	ble	127c4 <ReadCompressedInt8Data+0x160>
   12a38:	mov	r3, r6
   12a3c:	mov	r2, sl
   12a40:	mov	r1, r7
   12a44:	mov	r0, r5
   12a48:	bl	3068 <InflateData>
   12a4c:	ldr	r3, [sp]
   12a50:	strb	r3, [r9], #1
   12a54:	b	12a2c <ReadCompressedInt8Data+0x3c8>
   12a58:	mov	r3, r6
   12a5c:	mov	r2, sl
   12a60:	mov	r1, r7
   12a64:	mov	r0, r5
   12a68:	bl	3068 <InflateData>
   12a6c:	mov	r0, sl
   12a70:	bl	18bc <Mat_int64Swap>
   12a74:	strb	r0, [r9], #1
   12a78:	sub	r3, r9, r4
   12a7c:	cmp	r8, r3
   12a80:	bgt	12a58 <ReadCompressedInt8Data+0x3f4>
   12a84:	b	127c4 <ReadCompressedInt8Data+0x160>
   12a88:	cmp	r9, #13
   12a8c:	bne	127c4 <ReadCompressedInt8Data+0x160>
   12a90:	ldr	r3, [r5, #20]
   12a94:	mov	r9, r4
   12a98:	cmp	r3, #0
   12a9c:	mov	sl, sp
   12aa0:	bne	12af0 <ReadCompressedInt8Data+0x48c>
   12aa4:	sub	r3, r9, r4
   12aa8:	cmp	r8, r3
   12aac:	ble	127c4 <ReadCompressedInt8Data+0x160>
   12ab0:	mov	r3, r6
   12ab4:	mov	r2, sl
   12ab8:	mov	r1, r7
   12abc:	mov	r0, r5
   12ac0:	bl	3068 <InflateData>
   12ac4:	ldr	r3, [sp]
   12ac8:	strb	r3, [r9], #1
   12acc:	b	12aa4 <ReadCompressedInt8Data+0x440>
   12ad0:	mov	r3, r6
   12ad4:	mov	r2, sl
   12ad8:	mov	r1, r7
   12adc:	mov	r0, r5
   12ae0:	bl	3068 <InflateData>
   12ae4:	mov	r0, sl
   12ae8:	bl	1980 <Mat_uint64Swap>
   12aec:	strb	r0, [r9], #1
   12af0:	sub	r3, r9, r4
   12af4:	cmp	r8, r3
   12af8:	bgt	12ad0 <ReadCompressedInt8Data+0x46c>
   12afc:	b	127c4 <ReadCompressedInt8Data+0x160>

00012b00 <ReadUInt8Data>:
   12b00:	cmp	r1, #0
   12b04:	cmpne	r0, #0
   12b08:	beq	12b1c <ReadUInt8Data+0x1c>
   12b0c:	ldr	ip, [r0]
   12b10:	cmp	ip, #0
   12b14:	beq	12b1c <ReadUInt8Data+0x1c>
   12b18:	b	e068 <ReadUInt8Data.part.17>
   12b1c:	mov	r0, #0
   12b20:	bx	lr

00012b24 <ReadCompressedUInt8Data>:
   12b24:	cmp	r1, #0
   12b28:	cmpne	r2, #0
   12b2c:	moveq	ip, #1
   12b30:	movne	ip, #0
   12b34:	cmp	r0, #0
   12b38:	orreq	ip, ip, #1
   12b3c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12b40:	cmp	ip, #0
   12b44:	ldr	r8, [sp, #40]	; 0x28
   12b48:	movne	r0, #0
   12b4c:	bne	12c88 <ReadCompressedUInt8Data+0x164>
   12b50:	mov	r5, r0
   12b54:	mov	r0, r3
   12b58:	mov	r9, r3
   12b5c:	mov	r7, r1
   12b60:	mov	r4, r2
   12b64:	bl	1600 <Mat_SizeOf@plt>
   12b68:	sub	r3, r9, #1
   12b6c:	mov	r6, r0
   12b70:	cmp	r3, #8
   12b74:	addls	pc, pc, r3, lsl #2
   12b78:	b	12ed0 <ReadCompressedUInt8Data+0x3ac>
   12b7c:	b	12bd4 <ReadCompressedUInt8Data+0xb0>
   12b80:	b	12ba0 <ReadCompressedUInt8Data+0x7c>
   12b84:	b	12df0 <ReadCompressedUInt8Data+0x2cc>
   12b88:	b	12e60 <ReadCompressedUInt8Data+0x33c>
   12b8c:	b	12d10 <ReadCompressedUInt8Data+0x1ec>
   12b90:	b	12d80 <ReadCompressedUInt8Data+0x25c>
   12b94:	b	12c90 <ReadCompressedUInt8Data+0x16c>
   12b98:	b	12ed0 <ReadCompressedUInt8Data+0x3ac>
   12b9c:	b	12c08 <ReadCompressedUInt8Data+0xe4>
   12ba0:	mov	r9, r4
   12ba4:	mov	sl, sp
   12ba8:	sub	r3, r9, r4
   12bac:	cmp	r8, r3
   12bb0:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12bb4:	mov	r3, r6
   12bb8:	mov	r2, sl
   12bbc:	mov	r1, r7
   12bc0:	mov	r0, r5
   12bc4:	bl	3068 <InflateData>
   12bc8:	ldrb	r3, [sp]
   12bcc:	strb	r3, [r9], #1
   12bd0:	b	12ba8 <ReadCompressedUInt8Data+0x84>
   12bd4:	mov	r9, r4
   12bd8:	mov	sl, sp
   12bdc:	sub	r3, r9, r4
   12be0:	cmp	r8, r3
   12be4:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12be8:	mov	r3, r6
   12bec:	mov	r2, sl
   12bf0:	mov	r1, r7
   12bf4:	mov	r0, r5
   12bf8:	bl	3068 <InflateData>
   12bfc:	ldrb	r3, [sp]
   12c00:	strb	r3, [r9], #1
   12c04:	b	12bdc <ReadCompressedUInt8Data+0xb8>
   12c08:	ldr	r3, [r5, #20]
   12c0c:	mov	r9, r4
   12c10:	cmp	r3, #0
   12c14:	mov	sl, sp
   12c18:	bne	12c78 <ReadCompressedUInt8Data+0x154>
   12c1c:	sub	r3, r9, r4
   12c20:	cmp	r8, r3
   12c24:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12c28:	mov	r3, r6
   12c2c:	mov	r2, sl
   12c30:	mov	r1, r7
   12c34:	mov	r0, r5
   12c38:	bl	3068 <InflateData>
   12c3c:	vldr	d7, [sp]
   12c40:	vcvt.u32.f64	s15, d7
   12c44:	vmov	r3, s15
   12c48:	strb	r3, [r9], #1
   12c4c:	b	12c1c <ReadCompressedUInt8Data+0xf8>
   12c50:	mov	r3, r6
   12c54:	mov	r2, sl
   12c58:	mov	r1, r7
   12c5c:	mov	r0, r5
   12c60:	bl	3068 <InflateData>
   12c64:	mov	r0, sl
   12c68:	bl	1b88 <Mat_doubleSwap>
   12c6c:	vcvt.u32.f64	s15, d0
   12c70:	vmov	r3, s15
   12c74:	strb	r3, [r9], #1
   12c78:	sub	r3, r9, r4
   12c7c:	cmp	r8, r3
   12c80:	bgt	12c50 <ReadCompressedUInt8Data+0x12c>
   12c84:	mul	r0, r6, r8
   12c88:	add	sp, sp, #8
   12c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c90:	ldr	r3, [r5, #20]
   12c94:	mov	r9, r4
   12c98:	cmp	r3, #0
   12c9c:	mov	sl, sp
   12ca0:	bne	12d00 <ReadCompressedUInt8Data+0x1dc>
   12ca4:	sub	r3, r9, r4
   12ca8:	cmp	r8, r3
   12cac:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12cb0:	mov	r3, r6
   12cb4:	mov	r2, sl
   12cb8:	mov	r1, r7
   12cbc:	mov	r0, r5
   12cc0:	bl	3068 <InflateData>
   12cc4:	vldr	s15, [sp]
   12cc8:	vcvt.u32.f32	s15, s15
   12ccc:	vmov	r3, s15
   12cd0:	strb	r3, [r9], #1
   12cd4:	b	12ca4 <ReadCompressedUInt8Data+0x180>
   12cd8:	mov	r3, r6
   12cdc:	mov	r2, sl
   12ce0:	mov	r1, r7
   12ce4:	mov	r0, r5
   12ce8:	bl	3068 <InflateData>
   12cec:	mov	r0, sl
   12cf0:	bl	1b2c <Mat_floatSwap>
   12cf4:	vcvt.u32.f32	s15, s0
   12cf8:	vmov	r3, s15
   12cfc:	strb	r3, [r9], #1
   12d00:	sub	r3, r9, r4
   12d04:	cmp	r8, r3
   12d08:	bgt	12cd8 <ReadCompressedUInt8Data+0x1b4>
   12d0c:	b	12c84 <ReadCompressedUInt8Data+0x160>
   12d10:	ldr	r3, [r5, #20]
   12d14:	mov	r9, r4
   12d18:	cmp	r3, #0
   12d1c:	mov	sl, sp
   12d20:	bne	12d70 <ReadCompressedUInt8Data+0x24c>
   12d24:	sub	r3, r9, r4
   12d28:	cmp	r8, r3
   12d2c:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12d30:	mov	r3, r6
   12d34:	mov	r2, sl
   12d38:	mov	r1, r7
   12d3c:	mov	r0, r5
   12d40:	bl	3068 <InflateData>
   12d44:	ldr	r3, [sp]
   12d48:	strb	r3, [r9], #1
   12d4c:	b	12d24 <ReadCompressedUInt8Data+0x200>
   12d50:	mov	r3, r6
   12d54:	mov	r2, sl
   12d58:	mov	r1, r7
   12d5c:	mov	r0, r5
   12d60:	bl	3068 <InflateData>
   12d64:	mov	r0, sl
   12d68:	bl	1a18 <Mat_int32Swap>
   12d6c:	strb	r0, [r9], #1
   12d70:	sub	r3, r9, r4
   12d74:	cmp	r8, r3
   12d78:	bgt	12d50 <ReadCompressedUInt8Data+0x22c>
   12d7c:	b	12c84 <ReadCompressedUInt8Data+0x160>
   12d80:	ldr	r3, [r5, #20]
   12d84:	mov	r9, r4
   12d88:	cmp	r3, #0
   12d8c:	mov	sl, sp
   12d90:	bne	12de0 <ReadCompressedUInt8Data+0x2bc>
   12d94:	sub	r3, r9, r4
   12d98:	cmp	r8, r3
   12d9c:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12da0:	mov	r3, r6
   12da4:	mov	r2, sl
   12da8:	mov	r1, r7
   12dac:	mov	r0, r5
   12db0:	bl	3068 <InflateData>
   12db4:	ldr	r3, [sp]
   12db8:	strb	r3, [r9], #1
   12dbc:	b	12d94 <ReadCompressedUInt8Data+0x270>
   12dc0:	mov	r3, r6
   12dc4:	mov	r2, sl
   12dc8:	mov	r1, r7
   12dcc:	mov	r0, r5
   12dd0:	bl	3068 <InflateData>
   12dd4:	mov	r0, sl
   12dd8:	bl	1a80 <Mat_uint32Swap>
   12ddc:	strb	r0, [r9], #1
   12de0:	sub	r3, r9, r4
   12de4:	cmp	r8, r3
   12de8:	bgt	12dc0 <ReadCompressedUInt8Data+0x29c>
   12dec:	b	12c84 <ReadCompressedUInt8Data+0x160>
   12df0:	ldr	r3, [r5, #20]
   12df4:	mov	r9, r4
   12df8:	cmp	r3, #0
   12dfc:	mov	sl, sp
   12e00:	bne	12e50 <ReadCompressedUInt8Data+0x32c>
   12e04:	sub	r3, r9, r4
   12e08:	cmp	r8, r3
   12e0c:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12e10:	mov	r3, r6
   12e14:	mov	r2, sl
   12e18:	mov	r1, r7
   12e1c:	mov	r0, r5
   12e20:	bl	3068 <InflateData>
   12e24:	ldrh	r3, [sp]
   12e28:	strb	r3, [r9], #1
   12e2c:	b	12e04 <ReadCompressedUInt8Data+0x2e0>
   12e30:	mov	r3, r6
   12e34:	mov	r2, sl
   12e38:	mov	r1, r7
   12e3c:	mov	r0, r5
   12e40:	bl	3068 <InflateData>
   12e44:	mov	r0, sl
   12e48:	bl	1adc <Mat_int16Swap>
   12e4c:	strb	r0, [r9], #1
   12e50:	sub	r3, r9, r4
   12e54:	cmp	r8, r3
   12e58:	bgt	12e30 <ReadCompressedUInt8Data+0x30c>
   12e5c:	b	12c84 <ReadCompressedUInt8Data+0x160>
   12e60:	ldr	r3, [r5, #20]
   12e64:	mov	r9, r4
   12e68:	cmp	r3, #0
   12e6c:	mov	sl, sp
   12e70:	bne	12ec0 <ReadCompressedUInt8Data+0x39c>
   12e74:	sub	r3, r9, r4
   12e78:	cmp	r8, r3
   12e7c:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12e80:	mov	r3, r6
   12e84:	mov	r2, sl
   12e88:	mov	r1, r7
   12e8c:	mov	r0, r5
   12e90:	bl	3068 <InflateData>
   12e94:	ldrh	r3, [sp]
   12e98:	strb	r3, [r9], #1
   12e9c:	b	12e74 <ReadCompressedUInt8Data+0x350>
   12ea0:	mov	r3, r6
   12ea4:	mov	r2, sl
   12ea8:	mov	r1, r7
   12eac:	mov	r0, r5
   12eb0:	bl	3068 <InflateData>
   12eb4:	mov	r0, sl
   12eb8:	bl	1b10 <Mat_uint16Swap>
   12ebc:	strb	r0, [r9], #1
   12ec0:	sub	r3, r9, r4
   12ec4:	cmp	r8, r3
   12ec8:	bgt	12ea0 <ReadCompressedUInt8Data+0x37c>
   12ecc:	b	12c84 <ReadCompressedUInt8Data+0x160>
   12ed0:	cmp	r9, #12
   12ed4:	bne	12f48 <ReadCompressedUInt8Data+0x424>
   12ed8:	ldr	r3, [r5, #20]
   12edc:	mov	r9, r4
   12ee0:	cmp	r3, #0
   12ee4:	mov	sl, sp
   12ee8:	bne	12f38 <ReadCompressedUInt8Data+0x414>
   12eec:	sub	r3, r9, r4
   12ef0:	cmp	r8, r3
   12ef4:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12ef8:	mov	r3, r6
   12efc:	mov	r2, sl
   12f00:	mov	r1, r7
   12f04:	mov	r0, r5
   12f08:	bl	3068 <InflateData>
   12f0c:	ldr	r3, [sp]
   12f10:	strb	r3, [r9], #1
   12f14:	b	12eec <ReadCompressedUInt8Data+0x3c8>
   12f18:	mov	r3, r6
   12f1c:	mov	r2, sl
   12f20:	mov	r1, r7
   12f24:	mov	r0, r5
   12f28:	bl	3068 <InflateData>
   12f2c:	mov	r0, sl
   12f30:	bl	18bc <Mat_int64Swap>
   12f34:	strb	r0, [r9], #1
   12f38:	sub	r3, r9, r4
   12f3c:	cmp	r8, r3
   12f40:	bgt	12f18 <ReadCompressedUInt8Data+0x3f4>
   12f44:	b	12c84 <ReadCompressedUInt8Data+0x160>
   12f48:	cmp	r9, #13
   12f4c:	bne	12c84 <ReadCompressedUInt8Data+0x160>
   12f50:	ldr	r3, [r5, #20]
   12f54:	mov	r9, r4
   12f58:	cmp	r3, #0
   12f5c:	mov	sl, sp
   12f60:	bne	12fb0 <ReadCompressedUInt8Data+0x48c>
   12f64:	sub	r3, r9, r4
   12f68:	cmp	r8, r3
   12f6c:	ble	12c84 <ReadCompressedUInt8Data+0x160>
   12f70:	mov	r3, r6
   12f74:	mov	r2, sl
   12f78:	mov	r1, r7
   12f7c:	mov	r0, r5
   12f80:	bl	3068 <InflateData>
   12f84:	ldr	r3, [sp]
   12f88:	strb	r3, [r9], #1
   12f8c:	b	12f64 <ReadCompressedUInt8Data+0x440>
   12f90:	mov	r3, r6
   12f94:	mov	r2, sl
   12f98:	mov	r1, r7
   12f9c:	mov	r0, r5
   12fa0:	bl	3068 <InflateData>
   12fa4:	mov	r0, sl
   12fa8:	bl	1980 <Mat_uint64Swap>
   12fac:	strb	r0, [r9], #1
   12fb0:	sub	r3, r9, r4
   12fb4:	cmp	r8, r3
   12fb8:	bgt	12f90 <ReadCompressedUInt8Data+0x46c>
   12fbc:	b	12c84 <ReadCompressedUInt8Data+0x160>

00012fc0 <ReadCompressedCharData>:
   12fc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fc4:	cmp	r2, #0
   12fc8:	cmpne	r0, #0
   12fcc:	ldr	r8, [sp, #32]
   12fd0:	beq	1308c <ReadCompressedCharData+0xcc>
   12fd4:	ldr	r4, [r0]
   12fd8:	cmp	r4, #0
   12fdc:	beq	13084 <ReadCompressedCharData+0xc4>
   12fe0:	mov	r6, r0
   12fe4:	mov	r0, r3
   12fe8:	mov	r5, r3
   12fec:	mov	r7, r2
   12ff0:	mov	r9, r1
   12ff4:	bl	1600 <Mat_SizeOf@plt>
   12ff8:	cmp	r5, #4
   12ffc:	mul	r4, r0, r8
   13000:	beq	13034 <ReadCompressedCharData+0x74>
   13004:	bhi	13024 <ReadCompressedCharData+0x64>
   13008:	cmp	r5, #2
   1300c:	beq	13070 <ReadCompressedCharData+0xb0>
   13010:	ldr	r0, [pc, #124]	; 13094 <ReadCompressedCharData+0xd4>
   13014:	mov	r1, r5
   13018:	add	r0, pc, r0
   1301c:	bl	14ec <Mat_Warning@plt>
   13020:	b	13084 <ReadCompressedCharData+0xc4>
   13024:	cmp	r5, #16
   13028:	beq	13070 <ReadCompressedCharData+0xb0>
   1302c:	cmp	r5, #17
   13030:	bne	13010 <ReadCompressedCharData+0x50>
   13034:	mov	r3, r4
   13038:	mov	r2, r7
   1303c:	mov	r1, r9
   13040:	mov	r0, r6
   13044:	bl	3068 <InflateData>
   13048:	ldr	r3, [r6, #20]
   1304c:	cmp	r3, #0
   13050:	movne	r5, #0
   13054:	beq	13084 <ReadCompressedCharData+0xc4>
   13058:	cmp	r5, r8
   1305c:	bge	13084 <ReadCompressedCharData+0xc4>
   13060:	add	r0, r7, r5, lsl #1
   13064:	bl	1b10 <Mat_uint16Swap>
   13068:	add	r5, r5, #1
   1306c:	b	13058 <ReadCompressedCharData+0x98>
   13070:	mov	r3, r4
   13074:	mov	r2, r7
   13078:	mov	r1, r9
   1307c:	mov	r0, r6
   13080:	bl	3068 <InflateData>
   13084:	mov	r0, r4
   13088:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1308c:	mov	r0, #0
   13090:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13094:	.word	0x0002d6c1

00013098 <ReadCharData>:
   13098:	cmp	r1, #0
   1309c:	cmpne	r0, #0
   130a0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130a4:	beq	130f4 <ReadCharData+0x5c>
   130a8:	ldr	r4, [r0]
   130ac:	cmp	r4, #0
   130b0:	beq	13178 <ReadCharData+0xe0>
   130b4:	mov	r7, r0
   130b8:	mov	r0, r2
   130bc:	mov	r4, r2
   130c0:	mov	r6, r1
   130c4:	mov	r8, r3
   130c8:	bl	1600 <Mat_SizeOf@plt>
   130cc:	cmp	r4, #4
   130d0:	mov	r9, r0
   130d4:	beq	1310c <ReadCharData+0x74>
   130d8:	bhi	130fc <ReadCharData+0x64>
   130dc:	cmp	r4, #2
   130e0:	beq	13160 <ReadCharData+0xc8>
   130e4:	ldr	r0, [pc, #204]	; 131b8 <ReadCharData+0x120>
   130e8:	mov	r1, r4
   130ec:	add	r0, pc, r0
   130f0:	bl	14ec <Mat_Warning@plt>
   130f4:	mov	r4, #0
   130f8:	b	13178 <ReadCharData+0xe0>
   130fc:	cmp	r4, #16
   13100:	beq	13160 <ReadCharData+0xc8>
   13104:	cmp	r4, #17
   13108:	bne	130e4 <ReadCharData+0x4c>
   1310c:	ldr	r4, [r7, #20]
   13110:	mov	r5, r6
   13114:	cmp	r4, #0
   13118:	addeq	sl, sp, #6
   1311c:	moveq	fp, #1
   13120:	movne	r4, #0
   13124:	addne	sl, sp, #6
   13128:	movne	fp, #1
   1312c:	bne	131a8 <ReadCharData+0x110>
   13130:	sub	r3, r5, r6
   13134:	cmp	r8, r3
   13138:	ble	13178 <ReadCharData+0xe0>
   1313c:	ldr	r3, [r7]
   13140:	mov	r2, fp
   13144:	mov	r1, r9
   13148:	mov	r0, sl
   1314c:	bl	1588 <fread@plt>
   13150:	ldrh	r3, [sp, #6]
   13154:	strb	r3, [r5], #1
   13158:	add	r4, r4, r0
   1315c:	b	13130 <ReadCharData+0x98>
   13160:	ldr	r3, [r7]
   13164:	mov	r2, r8
   13168:	mov	r1, r9
   1316c:	mov	r0, r6
   13170:	bl	1588 <fread@plt>
   13174:	mov	r4, r0
   13178:	mov	r0, r4
   1317c:	add	sp, sp, #12
   13180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13184:	ldr	r3, [r7]
   13188:	mov	r2, fp
   1318c:	mov	r1, r9
   13190:	mov	r0, sl
   13194:	bl	1588 <fread@plt>
   13198:	add	r4, r4, r0
   1319c:	mov	r0, sl
   131a0:	bl	1b10 <Mat_uint16Swap>
   131a4:	strb	r0, [r5], #1
   131a8:	sub	r3, r5, r6
   131ac:	cmp	r8, r3
   131b0:	bgt	13184 <ReadCharData+0xec>
   131b4:	b	13178 <ReadCharData+0xe0>
   131b8:	.word	0x0002d638

000131bc <ReadDataSlabN>:
   131bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131c0:	sub	sp, sp, #156	; 0x9c
   131c4:	add	r8, sp, #32
   131c8:	mov	r4, r0
   131cc:	str	r1, [sp, #12]
   131d0:	mov	r7, r2
   131d4:	mov	r1, #0
   131d8:	mov	r2, #40	; 0x28
   131dc:	mov	r0, r8
   131e0:	str	r3, [sp, #16]
   131e4:	ldr	r6, [sp, #204]	; 0xcc
   131e8:	ldr	r5, [sp, #208]	; 0xd0
   131ec:	bl	166c <memset@plt>
   131f0:	add	r3, sp, #72	; 0x48
   131f4:	mov	r2, #40	; 0x28
   131f8:	mov	r1, #0
   131fc:	mov	r0, r3
   13200:	str	r3, [sp, #8]
   13204:	bl	166c <memset@plt>
   13208:	add	r3, sp, #112	; 0x70
   1320c:	mov	r0, r3
   13210:	mov	r2, #40	; 0x28
   13214:	mov	r1, #0
   13218:	str	r3, [sp, #4]
   1321c:	bl	166c <memset@plt>
   13220:	ldr	r3, [sp, #12]
   13224:	cmp	r3, #0
   13228:	cmpne	r4, #0
   1322c:	beq	15ef0 <ReadDataSlabN+0x2d34>
   13230:	ldr	r3, [r4]
   13234:	cmp	r3, #0
   13238:	beq	15ef0 <ReadDataSlabN+0x2d34>
   1323c:	ldr	r3, [sp, #200]	; 0xc8
   13240:	ldr	r2, [sp, #192]	; 0xc0
   13244:	cmp	r6, #0
   13248:	cmpne	r3, #0
   1324c:	moveq	r3, #1
   13250:	movne	r3, #0
   13254:	cmp	r5, #0
   13258:	orreq	r3, r3, #1
   1325c:	cmp	r2, #10
   13260:	orrgt	r3, r3, #1
   13264:	cmp	r3, #0
   13268:	bne	15ef0 <ReadDataSlabN+0x2d34>
   1326c:	ldr	r0, [sp, #16]
   13270:	bl	1600 <Mat_SizeOf@plt>
   13274:	sub	r7, r7, #6
   13278:	str	r0, [sp]
   1327c:	cmp	r7, #9
   13280:	addls	pc, pc, r7, lsl #2
   13284:	b	1365c <ReadDataSlabN+0x4a0>
   13288:	b	132b0 <ReadDataSlabN+0xf4>
   1328c:	b	13724 <ReadDataSlabN+0x568>
   13290:	b	15618 <ReadDataSlabN+0x245c>
   13294:	b	15a84 <ReadDataSlabN+0x28c8>
   13298:	b	14d40 <ReadDataSlabN+0x1b84>
   1329c:	b	151ac <ReadDataSlabN+0x1ff0>
   132a0:	b	14468 <ReadDataSlabN+0x12ac>
   132a4:	b	148d4 <ReadDataSlabN+0x1718>
   132a8:	b	13b90 <ReadDataSlabN+0x9d4>
   132ac:	b	13ffc <ReadDataSlabN+0xe40>
   132b0:	ldr	r3, [r6]
   132b4:	ldr	r2, [sp, #4]
   132b8:	sub	r3, r3, #1
   132bc:	str	r3, [sp, #32]
   132c0:	ldr	r3, [sp, #196]	; 0xc4
   132c4:	ldr	r0, [sp, #196]	; 0xc4
   132c8:	mov	r7, #0
   132cc:	ldr	r3, [r3]
   132d0:	str	r3, [sp, #112]	; 0x70
   132d4:	ldr	r3, [r5]
   132d8:	str	r3, [sp, #24]
   132dc:	mov	r3, #1
   132e0:	ldr	r1, [sp, #192]	; 0xc0
   132e4:	cmp	r3, r1
   132e8:	blt	1344c <ReadDataSlabN+0x290>
   132ec:	ldr	r3, [sp]
   132f0:	mov	r2, #1
   132f4:	ldr	r0, [r4]
   132f8:	mul	r1, r3, r7
   132fc:	bl	1714 <fseek@plt>
   13300:	ldr	r3, [r6]
   13304:	cmp	r3, #1
   13308:	str	r3, [sp, #20]
   1330c:	movne	r3, #0
   13310:	strne	r3, [sp, #20]
   13314:	movne	sl, #1
   13318:	moveq	fp, #0
   1331c:	ldreq	r9, [sp, #20]
   13320:	beq	13650 <ReadDataSlabN+0x494>
   13324:	ldr	r3, [sp, #20]
   13328:	ldr	r2, [sp, #24]
   1332c:	cmp	r3, r2
   13330:	bge	1365c <ReadDataSlabN+0x4a0>
   13334:	ldr	r3, [sp, #200]	; 0xc8
   13338:	ldr	r1, [r3]
   1333c:	cmp	r1, #0
   13340:	beq	13364 <ReadDataSlabN+0x1a8>
   13344:	ldr	r3, [sp]
   13348:	mov	r2, sl
   1334c:	ldr	r0, [r4]
   13350:	mul	r1, r3, r1
   13354:	bl	1714 <fseek@plt>
   13358:	ldr	r3, [sp, #200]	; 0xc8
   1335c:	ldr	r3, [r3]
   13360:	add	r7, r7, r3
   13364:	mov	r8, #0
   13368:	ldr	r3, [r5]
   1336c:	cmp	r8, r3
   13370:	blt	13664 <ReadDataSlabN+0x4a8>
   13374:	ldr	r1, [r6]
   13378:	ldr	r2, [sp, #196]	; 0xc4
   1337c:	ldr	r9, [sp, #200]	; 0xc8
   13380:	mul	r3, r1, r3
   13384:	ldr	r1, [r2]
   13388:	ldr	r0, [r4]
   1338c:	sub	r1, r1, r3
   13390:	ldr	r3, [r9], #4
   13394:	mov	r2, sl
   13398:	sub	r1, r1, r3
   1339c:	ldr	r3, [sp]
   133a0:	add	r7, r7, r1
   133a4:	mov	r8, #1
   133a8:	mul	r1, r1, r3
   133ac:	bl	1714 <fseek@plt>
   133b0:	ldr	r3, [sp, #192]	; 0xc0
   133b4:	cmp	r8, r3
   133b8:	bge	13710 <ReadDataSlabN+0x554>
   133bc:	ldr	r3, [sp, #8]
   133c0:	ldr	r1, [r5, r8, lsl #2]
   133c4:	ldr	r0, [r3, r8, lsl #2]
   133c8:	add	r0, r0, #1
   133cc:	str	r0, [r3, r8, lsl #2]
   133d0:	bl	3fd18 <__aeabi_idivmod>
   133d4:	cmp	r1, #0
   133d8:	bne	136ec <ReadDataSlabN+0x530>
   133dc:	ldr	r3, [sp, #8]
   133e0:	mov	r0, r7
   133e4:	str	r1, [r3, r8, lsl #2]
   133e8:	ldr	r3, [sp, #4]
   133ec:	ldr	fp, [r3, r8, lsl #2]
   133f0:	mov	r1, fp
   133f4:	bl	3fd18 <__aeabi_idivmod>
   133f8:	cmp	r1, #0
   133fc:	beq	136b0 <ReadDataSlabN+0x4f4>
   13400:	ldr	r3, [sp, #4]
   13404:	sub	fp, fp, r1
   13408:	add	r3, r3, r8, lsl #2
   1340c:	ldr	r1, [r9]
   13410:	ldr	r3, [r3, #-4]
   13414:	mov	r2, sl
   13418:	str	r3, [sp, #28]
   1341c:	mla	r1, r1, r3, fp
   13420:	ldr	r3, [sp]
   13424:	ldr	r0, [r4]
   13428:	mul	r1, r3, r1
   1342c:	bl	1714 <fseek@plt>
   13430:	ldr	r1, [r9]
   13434:	ldr	r3, [sp, #28]
   13438:	mla	fp, r1, r3, fp
   1343c:	add	r7, r7, fp
   13440:	add	r8, r8, #1
   13444:	add	r9, r9, #4
   13448:	b	133b0 <ReadDataSlabN+0x1f4>
   1344c:	ldr	r1, [r6, r3, lsl #2]
   13450:	mov	lr, r2
   13454:	sub	r1, r1, #1
   13458:	str	r1, [r8, r3, lsl #2]
   1345c:	ldr	r1, [r0], #4
   13460:	str	r1, [r2, #4]
   13464:	mov	r1, r0
   13468:	ldr	ip, [sp, #196]	; 0xc4
   1346c:	cmp	ip, r1
   13470:	bne	134a0 <ReadDataSlabN+0x2e4>
   13474:	ldr	ip, [sp, #24]
   13478:	ldr	r1, [r5, r3, lsl #2]
   1347c:	add	r2, r2, #4
   13480:	mul	r1, r1, ip
   13484:	ldr	ip, [sp, #200]	; 0xc8
   13488:	str	r1, [sp, #24]
   1348c:	ldr	r1, [lr]
   13490:	ldr	ip, [ip, r3, lsl #2]
   13494:	add	r3, r3, #1
   13498:	mla	r7, ip, r1, r7
   1349c:	b	132e0 <ReadDataSlabN+0x124>
   134a0:	ldr	sl, [r8, r3, lsl #2]
   134a4:	mov	r9, r1
   134a8:	ldr	ip, [r1, #-4]!
   134ac:	mul	ip, ip, sl
   134b0:	ldr	sl, [r2, #4]
   134b4:	str	ip, [r8, r3, lsl #2]
   134b8:	ldr	ip, [r9]
   134bc:	mul	ip, ip, sl
   134c0:	str	ip, [r2, #4]
   134c4:	b	13468 <ReadDataSlabN+0x2ac>
   134c8:	ldr	r3, [sp, #200]	; 0xc8
   134cc:	ldr	r1, [r3]
   134d0:	cmp	r1, #0
   134d4:	beq	134f8 <ReadDataSlabN+0x33c>
   134d8:	ldr	r3, [sp]
   134dc:	mov	r2, r9
   134e0:	ldr	r0, [r4]
   134e4:	mul	r1, r3, r1
   134e8:	bl	1714 <fseek@plt>
   134ec:	ldr	r3, [sp, #200]	; 0xc8
   134f0:	ldr	r3, [r3]
   134f4:	add	r7, r7, r3
   134f8:	ldr	r1, [sp, #12]
   134fc:	ldr	r3, [r5]
   13500:	ldr	r2, [sp, #16]
   13504:	add	r1, r1, fp, lsl #3
   13508:	mov	r0, r4
   1350c:	bl	f2c8 <ReadDoubleData>
   13510:	ldr	r3, [sp, #196]	; 0xc4
   13514:	ldr	r8, [sp, #200]	; 0xc8
   13518:	ldr	r0, [r4]
   1351c:	ldr	r3, [r3]
   13520:	ldr	r1, [r8], #4
   13524:	sub	r2, r3, r1
   13528:	add	r7, r2, r7
   1352c:	ldr	r2, [r5]
   13530:	sub	r3, r3, r2
   13534:	sub	r1, r3, r1
   13538:	ldr	r3, [sp]
   1353c:	mov	r2, r9
   13540:	mul	r1, r3, r1
   13544:	bl	1714 <fseek@plt>
   13548:	ldr	r6, [sp, #20]
   1354c:	ldr	r3, [sp, #192]	; 0xc0
   13550:	cmp	r6, r3
   13554:	bge	13648 <ReadDataSlabN+0x48c>
   13558:	ldr	r3, [sp, #8]
   1355c:	ldr	r1, [r5, r6, lsl #2]
   13560:	ldr	r0, [r3, r6, lsl #2]
   13564:	add	r0, r0, #1
   13568:	str	r0, [r3, r6, lsl #2]
   1356c:	bl	3fd18 <__aeabi_idivmod>
   13570:	cmp	r1, #0
   13574:	bne	13624 <ReadDataSlabN+0x468>
   13578:	ldr	r3, [sp, #8]
   1357c:	mov	r0, r7
   13580:	str	r1, [r3, r6, lsl #2]
   13584:	ldr	r3, [sp, #4]
   13588:	ldr	sl, [r3, r6, lsl #2]
   1358c:	mov	r1, sl
   13590:	bl	3fd18 <__aeabi_idivmod>
   13594:	cmp	r1, #0
   13598:	beq	135e8 <ReadDataSlabN+0x42c>
   1359c:	ldr	r3, [sp, #4]
   135a0:	sub	sl, sl, r1
   135a4:	add	r3, r3, r6, lsl #2
   135a8:	ldr	r1, [r8]
   135ac:	ldr	r3, [r3, #-4]
   135b0:	mov	r2, r9
   135b4:	str	r3, [sp, #28]
   135b8:	mla	r1, r1, r3, sl
   135bc:	ldr	r3, [sp]
   135c0:	ldr	r0, [r4]
   135c4:	mul	r1, r3, r1
   135c8:	bl	1714 <fseek@plt>
   135cc:	ldr	r1, [r8]
   135d0:	ldr	r3, [sp, #28]
   135d4:	mla	sl, r1, r3, sl
   135d8:	add	r7, r7, sl
   135dc:	add	r6, r6, #1
   135e0:	add	r8, r8, #4
   135e4:	b	1354c <ReadDataSlabN+0x390>
   135e8:	ldr	r1, [r8]
   135ec:	cmp	r1, #0
   135f0:	beq	135dc <ReadDataSlabN+0x420>
   135f4:	ldr	r3, [sp, #4]
   135f8:	mov	r2, r9
   135fc:	add	r3, r3, r6, lsl #2
   13600:	ldr	r0, [r4]
   13604:	ldr	sl, [r3, #-4]
   13608:	ldr	r3, [sp]
   1360c:	mul	r1, sl, r1
   13610:	mul	r1, r3, r1
   13614:	bl	1714 <fseek@plt>
   13618:	ldr	r3, [r8]
   1361c:	mla	r7, r3, sl, r7
   13620:	b	135dc <ReadDataSlabN+0x420>
   13624:	add	r3, sp, #152	; 0x98
   13628:	add	r6, r3, r6, lsl #2
   1362c:	ldr	r3, [sp]
   13630:	ldr	r1, [r6, #-120]	; 0xffffff88
   13634:	mov	r2, r9
   13638:	add	r7, r7, r1
   1363c:	ldr	r0, [r4]
   13640:	mul	r1, r3, r1
   13644:	bl	1714 <fseek@plt>
   13648:	ldr	r3, [r5]
   1364c:	add	fp, fp, r3
   13650:	ldr	r3, [sp, #24]
   13654:	cmp	fp, r3
   13658:	blt	134c8 <ReadDataSlabN+0x30c>
   1365c:	mov	r0, #0
   13660:	b	15ef4 <ReadDataSlabN+0x2d38>
   13664:	ldr	r3, [sp, #20]
   13668:	ldr	r0, [sp, #12]
   1366c:	add	r1, r3, r8
   13670:	ldr	r2, [sp, #16]
   13674:	add	r1, r0, r1, lsl #3
   13678:	mov	r3, sl
   1367c:	mov	r0, r4
   13680:	bl	f2c8 <ReadDoubleData>
   13684:	ldr	r1, [r6]
   13688:	ldr	r3, [sp]
   1368c:	sub	r1, r1, #1
   13690:	mov	r2, sl
   13694:	mul	r1, r3, r1
   13698:	ldr	r0, [r4]
   1369c:	bl	1714 <fseek@plt>
   136a0:	ldr	r3, [r6]
   136a4:	add	r8, r8, #1
   136a8:	add	r7, r7, r3
   136ac:	b	13368 <ReadDataSlabN+0x1ac>
   136b0:	ldr	r1, [r9]
   136b4:	cmp	r1, #0
   136b8:	beq	13440 <ReadDataSlabN+0x284>
   136bc:	ldr	r3, [sp, #4]
   136c0:	mov	r2, sl
   136c4:	add	r3, r3, r8, lsl #2
   136c8:	ldr	r0, [r4]
   136cc:	ldr	fp, [r3, #-4]
   136d0:	ldr	r3, [sp]
   136d4:	mul	r1, fp, r1
   136d8:	mul	r1, r3, r1
   136dc:	bl	1714 <fseek@plt>
   136e0:	ldr	r3, [r9]
   136e4:	mla	r7, r3, fp, r7
   136e8:	b	13440 <ReadDataSlabN+0x284>
   136ec:	add	r3, sp, #152	; 0x98
   136f0:	add	r8, r3, r8, lsl #2
   136f4:	ldr	r3, [sp]
   136f8:	ldr	r1, [r8, #-120]	; 0xffffff88
   136fc:	mov	r2, sl
   13700:	add	r7, r7, r1
   13704:	ldr	r0, [r4]
   13708:	mul	r1, r3, r1
   1370c:	bl	1714 <fseek@plt>
   13710:	ldr	r2, [sp, #20]
   13714:	ldr	r3, [r5]
   13718:	add	r3, r2, r3
   1371c:	str	r3, [sp, #20]
   13720:	b	13324 <ReadDataSlabN+0x168>
   13724:	ldr	r3, [r6]
   13728:	ldr	r2, [sp, #4]
   1372c:	sub	r3, r3, #1
   13730:	str	r3, [sp, #32]
   13734:	ldr	r3, [sp, #196]	; 0xc4
   13738:	ldr	r0, [sp, #196]	; 0xc4
   1373c:	mov	r7, #0
   13740:	ldr	r3, [r3]
   13744:	str	r3, [sp, #112]	; 0x70
   13748:	ldr	r3, [r5]
   1374c:	str	r3, [sp, #24]
   13750:	mov	r3, #1
   13754:	ldr	r1, [sp, #192]	; 0xc0
   13758:	cmp	r3, r1
   1375c:	blt	138c0 <ReadDataSlabN+0x704>
   13760:	ldr	r3, [sp]
   13764:	mov	r2, #1
   13768:	ldr	r0, [r4]
   1376c:	mul	r1, r3, r7
   13770:	bl	1714 <fseek@plt>
   13774:	ldr	r3, [r6]
   13778:	cmp	r3, #1
   1377c:	str	r3, [sp, #20]
   13780:	movne	r3, #0
   13784:	strne	r3, [sp, #20]
   13788:	movne	sl, #1
   1378c:	moveq	fp, #0
   13790:	ldreq	r9, [sp, #20]
   13794:	beq	139a4 <ReadDataSlabN+0x7e8>
   13798:	ldr	r3, [sp, #20]
   1379c:	ldr	r2, [sp, #24]
   137a0:	cmp	r3, r2
   137a4:	bge	1365c <ReadDataSlabN+0x4a0>
   137a8:	ldr	r3, [sp, #200]	; 0xc8
   137ac:	ldr	r1, [r3]
   137b0:	cmp	r1, #0
   137b4:	beq	137d8 <ReadDataSlabN+0x61c>
   137b8:	ldr	r3, [sp]
   137bc:	mov	r2, sl
   137c0:	ldr	r0, [r4]
   137c4:	mul	r1, r3, r1
   137c8:	bl	1714 <fseek@plt>
   137cc:	ldr	r3, [sp, #200]	; 0xc8
   137d0:	ldr	r3, [r3]
   137d4:	add	r7, r7, r3
   137d8:	mov	r8, #0
   137dc:	ldr	r3, [r5]
   137e0:	cmp	r8, r3
   137e4:	blt	13ad0 <ReadDataSlabN+0x914>
   137e8:	ldr	r1, [r6]
   137ec:	ldr	r2, [sp, #196]	; 0xc4
   137f0:	ldr	r9, [sp, #200]	; 0xc8
   137f4:	mul	r3, r1, r3
   137f8:	ldr	r1, [r2]
   137fc:	ldr	r0, [r4]
   13800:	sub	r1, r1, r3
   13804:	ldr	r3, [r9], #4
   13808:	mov	r2, sl
   1380c:	sub	r1, r1, r3
   13810:	ldr	r3, [sp]
   13814:	add	r7, r7, r1
   13818:	mov	r8, #1
   1381c:	mul	r1, r1, r3
   13820:	bl	1714 <fseek@plt>
   13824:	ldr	r3, [sp, #192]	; 0xc0
   13828:	cmp	r8, r3
   1382c:	bge	13b7c <ReadDataSlabN+0x9c0>
   13830:	ldr	r3, [sp, #8]
   13834:	ldr	r1, [r5, r8, lsl #2]
   13838:	ldr	r0, [r3, r8, lsl #2]
   1383c:	add	r0, r0, #1
   13840:	str	r0, [r3, r8, lsl #2]
   13844:	bl	3fd18 <__aeabi_idivmod>
   13848:	cmp	r1, #0
   1384c:	bne	13b58 <ReadDataSlabN+0x99c>
   13850:	ldr	r3, [sp, #8]
   13854:	mov	r0, r7
   13858:	str	r1, [r3, r8, lsl #2]
   1385c:	ldr	r3, [sp, #4]
   13860:	ldr	fp, [r3, r8, lsl #2]
   13864:	mov	r1, fp
   13868:	bl	3fd18 <__aeabi_idivmod>
   1386c:	cmp	r1, #0
   13870:	beq	13b1c <ReadDataSlabN+0x960>
   13874:	ldr	r3, [sp, #4]
   13878:	sub	fp, fp, r1
   1387c:	add	r3, r3, r8, lsl #2
   13880:	ldr	r1, [r9]
   13884:	ldr	r3, [r3, #-4]
   13888:	mov	r2, sl
   1388c:	str	r3, [sp, #28]
   13890:	mla	r1, r1, r3, fp
   13894:	ldr	r3, [sp]
   13898:	ldr	r0, [r4]
   1389c:	mul	r1, r3, r1
   138a0:	bl	1714 <fseek@plt>
   138a4:	ldr	r1, [r9]
   138a8:	ldr	r3, [sp, #28]
   138ac:	mla	fp, r1, r3, fp
   138b0:	add	r7, r7, fp
   138b4:	add	r8, r8, #1
   138b8:	add	r9, r9, #4
   138bc:	b	13824 <ReadDataSlabN+0x668>
   138c0:	ldr	r1, [r6, r3, lsl #2]
   138c4:	mov	lr, r2
   138c8:	sub	r1, r1, #1
   138cc:	str	r1, [r8, r3, lsl #2]
   138d0:	ldr	r1, [r0], #4
   138d4:	str	r1, [r2, #4]
   138d8:	mov	r1, r0
   138dc:	ldr	ip, [sp, #196]	; 0xc4
   138e0:	cmp	ip, r1
   138e4:	bne	13914 <ReadDataSlabN+0x758>
   138e8:	ldr	ip, [sp, #24]
   138ec:	ldr	r1, [r5, r3, lsl #2]
   138f0:	add	r2, r2, #4
   138f4:	mul	r1, r1, ip
   138f8:	ldr	ip, [sp, #200]	; 0xc8
   138fc:	str	r1, [sp, #24]
   13900:	ldr	r1, [lr]
   13904:	ldr	ip, [ip, r3, lsl #2]
   13908:	add	r3, r3, #1
   1390c:	mla	r7, ip, r1, r7
   13910:	b	13754 <ReadDataSlabN+0x598>
   13914:	ldr	sl, [r8, r3, lsl #2]
   13918:	mov	r9, r1
   1391c:	ldr	ip, [r1, #-4]!
   13920:	mul	ip, ip, sl
   13924:	ldr	sl, [r2, #4]
   13928:	str	ip, [r8, r3, lsl #2]
   1392c:	ldr	ip, [r9]
   13930:	mul	ip, ip, sl
   13934:	str	ip, [r2, #4]
   13938:	b	138dc <ReadDataSlabN+0x720>
   1393c:	ldr	r1, [r8]
   13940:	cmp	r1, #0
   13944:	beq	13ac4 <ReadDataSlabN+0x908>
   13948:	ldr	r3, [sp, #4]
   1394c:	mov	r2, r9
   13950:	add	r3, r3, r6, lsl #2
   13954:	ldr	r0, [r4]
   13958:	ldr	sl, [r3, #-4]
   1395c:	ldr	r3, [sp]
   13960:	mul	r1, sl, r1
   13964:	mul	r1, r3, r1
   13968:	bl	1714 <fseek@plt>
   1396c:	ldr	r3, [r8]
   13970:	mla	r7, r3, sl, r7
   13974:	b	13ac4 <ReadDataSlabN+0x908>
   13978:	add	r3, sp, #152	; 0x98
   1397c:	add	r6, r3, r6, lsl #2
   13980:	ldr	r3, [sp]
   13984:	ldr	r1, [r6, #-120]	; 0xffffff88
   13988:	mov	r2, r9
   1398c:	add	r7, r7, r1
   13990:	ldr	r0, [r4]
   13994:	mul	r1, r3, r1
   13998:	bl	1714 <fseek@plt>
   1399c:	ldr	r3, [r5]
   139a0:	add	fp, fp, r3
   139a4:	ldr	r3, [sp, #24]
   139a8:	cmp	fp, r3
   139ac:	bge	1365c <ReadDataSlabN+0x4a0>
   139b0:	ldr	r3, [sp, #200]	; 0xc8
   139b4:	ldr	r1, [r3]
   139b8:	cmp	r1, #0
   139bc:	beq	139e0 <ReadDataSlabN+0x824>
   139c0:	ldr	r3, [sp]
   139c4:	mov	r2, r9
   139c8:	ldr	r0, [r4]
   139cc:	mul	r1, r3, r1
   139d0:	bl	1714 <fseek@plt>
   139d4:	ldr	r3, [sp, #200]	; 0xc8
   139d8:	ldr	r3, [r3]
   139dc:	add	r7, r7, r3
   139e0:	ldr	r1, [sp, #12]
   139e4:	ldr	r3, [r5]
   139e8:	ldr	r2, [sp, #16]
   139ec:	add	r1, r1, fp, lsl #2
   139f0:	mov	r0, r4
   139f4:	bl	102f0 <ReadSingleData>
   139f8:	ldr	r3, [sp, #196]	; 0xc4
   139fc:	ldr	r8, [sp, #200]	; 0xc8
   13a00:	ldr	r0, [r4]
   13a04:	ldr	r3, [r3]
   13a08:	ldr	r1, [r8], #4
   13a0c:	sub	r2, r3, r1
   13a10:	add	r7, r2, r7
   13a14:	ldr	r2, [r5]
   13a18:	sub	r3, r3, r2
   13a1c:	sub	r1, r3, r1
   13a20:	ldr	r3, [sp]
   13a24:	mov	r2, r9
   13a28:	mul	r1, r3, r1
   13a2c:	bl	1714 <fseek@plt>
   13a30:	ldr	r6, [sp, #20]
   13a34:	ldr	r3, [sp, #192]	; 0xc0
   13a38:	cmp	r6, r3
   13a3c:	bge	1399c <ReadDataSlabN+0x7e0>
   13a40:	ldr	r3, [sp, #8]
   13a44:	ldr	r1, [r5, r6, lsl #2]
   13a48:	ldr	r0, [r3, r6, lsl #2]
   13a4c:	add	r0, r0, #1
   13a50:	str	r0, [r3, r6, lsl #2]
   13a54:	bl	3fd18 <__aeabi_idivmod>
   13a58:	cmp	r1, #0
   13a5c:	bne	13978 <ReadDataSlabN+0x7bc>
   13a60:	ldr	r3, [sp, #8]
   13a64:	mov	r0, r7
   13a68:	str	r1, [r3, r6, lsl #2]
   13a6c:	ldr	r3, [sp, #4]
   13a70:	ldr	sl, [r3, r6, lsl #2]
   13a74:	mov	r1, sl
   13a78:	bl	3fd18 <__aeabi_idivmod>
   13a7c:	cmp	r1, #0
   13a80:	beq	1393c <ReadDataSlabN+0x780>
   13a84:	ldr	r3, [sp, #4]
   13a88:	sub	sl, sl, r1
   13a8c:	add	r3, r3, r6, lsl #2
   13a90:	ldr	r1, [r8]
   13a94:	ldr	r3, [r3, #-4]
   13a98:	mov	r2, r9
   13a9c:	str	r3, [sp, #28]
   13aa0:	mla	r1, r1, r3, sl
   13aa4:	ldr	r3, [sp]
   13aa8:	ldr	r0, [r4]
   13aac:	mul	r1, r3, r1
   13ab0:	bl	1714 <fseek@plt>
   13ab4:	ldr	r1, [r8]
   13ab8:	ldr	r3, [sp, #28]
   13abc:	mla	sl, r1, r3, sl
   13ac0:	add	r7, r7, sl
   13ac4:	add	r6, r6, #1
   13ac8:	add	r8, r8, #4
   13acc:	b	13a34 <ReadDataSlabN+0x878>
   13ad0:	ldr	r3, [sp, #20]
   13ad4:	ldr	r0, [sp, #12]
   13ad8:	add	r1, r3, r8
   13adc:	ldr	r2, [sp, #16]
   13ae0:	add	r1, r0, r1, lsl #2
   13ae4:	mov	r3, sl
   13ae8:	mov	r0, r4
   13aec:	bl	102f0 <ReadSingleData>
   13af0:	ldr	r1, [r6]
   13af4:	ldr	r3, [sp]
   13af8:	sub	r1, r1, #1
   13afc:	mov	r2, sl
   13b00:	mul	r1, r3, r1
   13b04:	ldr	r0, [r4]
   13b08:	bl	1714 <fseek@plt>
   13b0c:	ldr	r3, [r6]
   13b10:	add	r8, r8, #1
   13b14:	add	r7, r7, r3
   13b18:	b	137dc <ReadDataSlabN+0x620>
   13b1c:	ldr	r1, [r9]
   13b20:	cmp	r1, #0
   13b24:	beq	138b4 <ReadDataSlabN+0x6f8>
   13b28:	ldr	r3, [sp, #4]
   13b2c:	mov	r2, sl
   13b30:	add	r3, r3, r8, lsl #2
   13b34:	ldr	r0, [r4]
   13b38:	ldr	fp, [r3, #-4]
   13b3c:	ldr	r3, [sp]
   13b40:	mul	r1, fp, r1
   13b44:	mul	r1, r3, r1
   13b48:	bl	1714 <fseek@plt>
   13b4c:	ldr	r3, [r9]
   13b50:	mla	r7, r3, fp, r7
   13b54:	b	138b4 <ReadDataSlabN+0x6f8>
   13b58:	add	r3, sp, #152	; 0x98
   13b5c:	add	r8, r3, r8, lsl #2
   13b60:	ldr	r3, [sp]
   13b64:	ldr	r1, [r8, #-120]	; 0xffffff88
   13b68:	mov	r2, sl
   13b6c:	add	r7, r7, r1
   13b70:	ldr	r0, [r4]
   13b74:	mul	r1, r3, r1
   13b78:	bl	1714 <fseek@plt>
   13b7c:	ldr	r2, [sp, #20]
   13b80:	ldr	r3, [r5]
   13b84:	add	r3, r2, r3
   13b88:	str	r3, [sp, #20]
   13b8c:	b	13798 <ReadDataSlabN+0x5dc>
   13b90:	ldr	r3, [r6]
   13b94:	ldr	r2, [sp, #4]
   13b98:	sub	r3, r3, #1
   13b9c:	str	r3, [sp, #32]
   13ba0:	ldr	r3, [sp, #196]	; 0xc4
   13ba4:	ldr	r0, [sp, #196]	; 0xc4
   13ba8:	mov	r7, #0
   13bac:	ldr	r3, [r3]
   13bb0:	str	r3, [sp, #112]	; 0x70
   13bb4:	ldr	r3, [r5]
   13bb8:	str	r3, [sp, #24]
   13bbc:	mov	r3, #1
   13bc0:	ldr	r1, [sp, #192]	; 0xc0
   13bc4:	cmp	r3, r1
   13bc8:	blt	13d2c <ReadDataSlabN+0xb70>
   13bcc:	ldr	r3, [sp]
   13bd0:	mov	r2, #1
   13bd4:	ldr	r0, [r4]
   13bd8:	mul	r1, r3, r7
   13bdc:	bl	1714 <fseek@plt>
   13be0:	ldr	r3, [r6]
   13be4:	cmp	r3, #1
   13be8:	str	r3, [sp, #20]
   13bec:	movne	r3, #0
   13bf0:	strne	r3, [sp, #20]
   13bf4:	movne	sl, #1
   13bf8:	moveq	fp, #0
   13bfc:	ldreq	r9, [sp, #20]
   13c00:	beq	13e10 <ReadDataSlabN+0xc54>
   13c04:	ldr	r3, [sp, #20]
   13c08:	ldr	r2, [sp, #24]
   13c0c:	cmp	r3, r2
   13c10:	bge	1365c <ReadDataSlabN+0x4a0>
   13c14:	ldr	r3, [sp, #200]	; 0xc8
   13c18:	ldr	r1, [r3]
   13c1c:	cmp	r1, #0
   13c20:	beq	13c44 <ReadDataSlabN+0xa88>
   13c24:	ldr	r3, [sp]
   13c28:	mov	r2, sl
   13c2c:	ldr	r0, [r4]
   13c30:	mul	r1, r3, r1
   13c34:	bl	1714 <fseek@plt>
   13c38:	ldr	r3, [sp, #200]	; 0xc8
   13c3c:	ldr	r3, [r3]
   13c40:	add	r7, r7, r3
   13c44:	mov	r8, #0
   13c48:	ldr	r3, [r5]
   13c4c:	cmp	r8, r3
   13c50:	blt	13f3c <ReadDataSlabN+0xd80>
   13c54:	ldr	r1, [r6]
   13c58:	ldr	r2, [sp, #196]	; 0xc4
   13c5c:	ldr	r9, [sp, #200]	; 0xc8
   13c60:	mul	r3, r1, r3
   13c64:	ldr	r1, [r2]
   13c68:	ldr	r0, [r4]
   13c6c:	sub	r1, r1, r3
   13c70:	ldr	r3, [r9], #4
   13c74:	mov	r2, sl
   13c78:	sub	r1, r1, r3
   13c7c:	ldr	r3, [sp]
   13c80:	add	r7, r7, r1
   13c84:	mov	r8, #1
   13c88:	mul	r1, r1, r3
   13c8c:	bl	1714 <fseek@plt>
   13c90:	ldr	r3, [sp, #192]	; 0xc0
   13c94:	cmp	r8, r3
   13c98:	bge	13fe8 <ReadDataSlabN+0xe2c>
   13c9c:	ldr	r3, [sp, #8]
   13ca0:	ldr	r1, [r5, r8, lsl #2]
   13ca4:	ldr	r0, [r3, r8, lsl #2]
   13ca8:	add	r0, r0, #1
   13cac:	str	r0, [r3, r8, lsl #2]
   13cb0:	bl	3fd18 <__aeabi_idivmod>
   13cb4:	cmp	r1, #0
   13cb8:	bne	13fc4 <ReadDataSlabN+0xe08>
   13cbc:	ldr	r3, [sp, #8]
   13cc0:	mov	r0, r7
   13cc4:	str	r1, [r3, r8, lsl #2]
   13cc8:	ldr	r3, [sp, #4]
   13ccc:	ldr	fp, [r3, r8, lsl #2]
   13cd0:	mov	r1, fp
   13cd4:	bl	3fd18 <__aeabi_idivmod>
   13cd8:	cmp	r1, #0
   13cdc:	beq	13f88 <ReadDataSlabN+0xdcc>
   13ce0:	ldr	r3, [sp, #4]
   13ce4:	sub	fp, fp, r1
   13ce8:	add	r3, r3, r8, lsl #2
   13cec:	ldr	r1, [r9]
   13cf0:	ldr	r3, [r3, #-4]
   13cf4:	mov	r2, sl
   13cf8:	str	r3, [sp, #28]
   13cfc:	mla	r1, r1, r3, fp
   13d00:	ldr	r3, [sp]
   13d04:	ldr	r0, [r4]
   13d08:	mul	r1, r3, r1
   13d0c:	bl	1714 <fseek@plt>
   13d10:	ldr	r1, [r9]
   13d14:	ldr	r3, [sp, #28]
   13d18:	mla	fp, r1, r3, fp
   13d1c:	add	r7, r7, fp
   13d20:	add	r8, r8, #1
   13d24:	add	r9, r9, #4
   13d28:	b	13c90 <ReadDataSlabN+0xad4>
   13d2c:	ldr	r1, [r6, r3, lsl #2]
   13d30:	mov	lr, r2
   13d34:	sub	r1, r1, #1
   13d38:	str	r1, [r8, r3, lsl #2]
   13d3c:	ldr	r1, [r0], #4
   13d40:	str	r1, [r2, #4]
   13d44:	mov	r1, r0
   13d48:	ldr	ip, [sp, #196]	; 0xc4
   13d4c:	cmp	r1, ip
   13d50:	bne	13d80 <ReadDataSlabN+0xbc4>
   13d54:	ldr	ip, [sp, #24]
   13d58:	ldr	r1, [r5, r3, lsl #2]
   13d5c:	add	r2, r2, #4
   13d60:	mul	r1, r1, ip
   13d64:	ldr	ip, [sp, #200]	; 0xc8
   13d68:	str	r1, [sp, #24]
   13d6c:	ldr	r1, [lr]
   13d70:	ldr	ip, [ip, r3, lsl #2]
   13d74:	add	r3, r3, #1
   13d78:	mla	r7, ip, r1, r7
   13d7c:	b	13bc0 <ReadDataSlabN+0xa04>
   13d80:	ldr	sl, [r8, r3, lsl #2]
   13d84:	mov	r9, r1
   13d88:	ldr	ip, [r1, #-4]!
   13d8c:	mul	ip, ip, sl
   13d90:	ldr	sl, [r2, #4]
   13d94:	str	ip, [r8, r3, lsl #2]
   13d98:	ldr	ip, [r9]
   13d9c:	mul	ip, ip, sl
   13da0:	str	ip, [r2, #4]
   13da4:	b	13d48 <ReadDataSlabN+0xb8c>
   13da8:	ldr	r1, [r8]
   13dac:	cmp	r1, #0
   13db0:	beq	13f30 <ReadDataSlabN+0xd74>
   13db4:	ldr	r3, [sp, #4]
   13db8:	mov	r2, r9
   13dbc:	add	r3, r3, r6, lsl #2
   13dc0:	ldr	r0, [r4]
   13dc4:	ldr	sl, [r3, #-4]
   13dc8:	ldr	r3, [sp]
   13dcc:	mul	r1, sl, r1
   13dd0:	mul	r1, r3, r1
   13dd4:	bl	1714 <fseek@plt>
   13dd8:	ldr	r3, [r8]
   13ddc:	mla	r7, r3, sl, r7
   13de0:	b	13f30 <ReadDataSlabN+0xd74>
   13de4:	add	r3, sp, #152	; 0x98
   13de8:	add	r6, r3, r6, lsl #2
   13dec:	ldr	r3, [sp]
   13df0:	ldr	r1, [r6, #-120]	; 0xffffff88
   13df4:	mov	r2, r9
   13df8:	add	r7, r7, r1
   13dfc:	ldr	r0, [r4]
   13e00:	mul	r1, r3, r1
   13e04:	bl	1714 <fseek@plt>
   13e08:	ldr	r3, [r5]
   13e0c:	add	fp, fp, r3
   13e10:	ldr	r3, [sp, #24]
   13e14:	cmp	fp, r3
   13e18:	bge	1365c <ReadDataSlabN+0x4a0>
   13e1c:	ldr	r3, [sp, #200]	; 0xc8
   13e20:	ldr	r1, [r3]
   13e24:	cmp	r1, #0
   13e28:	beq	13e4c <ReadDataSlabN+0xc90>
   13e2c:	ldr	r3, [sp]
   13e30:	mov	r2, r9
   13e34:	ldr	r0, [r4]
   13e38:	mul	r1, r3, r1
   13e3c:	bl	1714 <fseek@plt>
   13e40:	ldr	r3, [sp, #200]	; 0xc8
   13e44:	ldr	r3, [r3]
   13e48:	add	r7, r7, r3
   13e4c:	ldr	r1, [sp, #12]
   13e50:	ldr	r3, [r5]
   13e54:	ldr	r2, [sp, #16]
   13e58:	add	r1, r1, fp, lsl #3
   13e5c:	mov	r0, r4
   13e60:	bl	10810 <ReadInt64Data>
   13e64:	ldr	r3, [sp, #196]	; 0xc4
   13e68:	ldr	r8, [sp, #200]	; 0xc8
   13e6c:	ldr	r0, [r4]
   13e70:	ldr	r3, [r3]
   13e74:	ldr	r1, [r8], #4
   13e78:	sub	r2, r3, r1
   13e7c:	add	r7, r2, r7
   13e80:	ldr	r2, [r5]
   13e84:	sub	r3, r3, r2
   13e88:	sub	r1, r3, r1
   13e8c:	ldr	r3, [sp]
   13e90:	mov	r2, r9
   13e94:	mul	r1, r3, r1
   13e98:	bl	1714 <fseek@plt>
   13e9c:	ldr	r6, [sp, #20]
   13ea0:	ldr	r3, [sp, #192]	; 0xc0
   13ea4:	cmp	r6, r3
   13ea8:	bge	13e08 <ReadDataSlabN+0xc4c>
   13eac:	ldr	r3, [sp, #8]
   13eb0:	ldr	r1, [r5, r6, lsl #2]
   13eb4:	ldr	r0, [r3, r6, lsl #2]
   13eb8:	add	r0, r0, #1
   13ebc:	str	r0, [r3, r6, lsl #2]
   13ec0:	bl	3fd18 <__aeabi_idivmod>
   13ec4:	cmp	r1, #0
   13ec8:	bne	13de4 <ReadDataSlabN+0xc28>
   13ecc:	ldr	r3, [sp, #8]
   13ed0:	mov	r0, r7
   13ed4:	str	r1, [r3, r6, lsl #2]
   13ed8:	ldr	r3, [sp, #4]
   13edc:	ldr	sl, [r3, r6, lsl #2]
   13ee0:	mov	r1, sl
   13ee4:	bl	3fd18 <__aeabi_idivmod>
   13ee8:	cmp	r1, #0
   13eec:	beq	13da8 <ReadDataSlabN+0xbec>
   13ef0:	ldr	r3, [sp, #4]
   13ef4:	sub	sl, sl, r1
   13ef8:	add	r3, r3, r6, lsl #2
   13efc:	ldr	r1, [r8]
   13f00:	ldr	r3, [r3, #-4]
   13f04:	mov	r2, r9
   13f08:	str	r3, [sp, #28]
   13f0c:	mla	r1, r1, r3, sl
   13f10:	ldr	r3, [sp]
   13f14:	ldr	r0, [r4]
   13f18:	mul	r1, r3, r1
   13f1c:	bl	1714 <fseek@plt>
   13f20:	ldr	r1, [r8]
   13f24:	ldr	r3, [sp, #28]
   13f28:	mla	sl, r1, r3, sl
   13f2c:	add	r7, r7, sl
   13f30:	add	r6, r6, #1
   13f34:	add	r8, r8, #4
   13f38:	b	13ea0 <ReadDataSlabN+0xce4>
   13f3c:	ldr	r3, [sp, #20]
   13f40:	ldr	r0, [sp, #12]
   13f44:	add	r1, r3, r8
   13f48:	ldr	r2, [sp, #16]
   13f4c:	add	r1, r0, r1, lsl #3
   13f50:	mov	r3, sl
   13f54:	mov	r0, r4
   13f58:	bl	10810 <ReadInt64Data>
   13f5c:	ldr	r1, [r6]
   13f60:	ldr	r3, [sp]
   13f64:	sub	r1, r1, #1
   13f68:	mov	r2, sl
   13f6c:	mul	r1, r3, r1
   13f70:	ldr	r0, [r4]
   13f74:	bl	1714 <fseek@plt>
   13f78:	ldr	r3, [r6]
   13f7c:	add	r8, r8, #1
   13f80:	add	r7, r7, r3
   13f84:	b	13c48 <ReadDataSlabN+0xa8c>
   13f88:	ldr	r1, [r9]
   13f8c:	cmp	r1, #0
   13f90:	beq	13d20 <ReadDataSlabN+0xb64>
   13f94:	ldr	r3, [sp, #4]
   13f98:	mov	r2, sl
   13f9c:	add	r3, r3, r8, lsl #2
   13fa0:	ldr	r0, [r4]
   13fa4:	ldr	fp, [r3, #-4]
   13fa8:	ldr	r3, [sp]
   13fac:	mul	r1, fp, r1
   13fb0:	mul	r1, r3, r1
   13fb4:	bl	1714 <fseek@plt>
   13fb8:	ldr	r3, [r9]
   13fbc:	mla	r7, r3, fp, r7
   13fc0:	b	13d20 <ReadDataSlabN+0xb64>
   13fc4:	add	r3, sp, #152	; 0x98
   13fc8:	add	r8, r3, r8, lsl #2
   13fcc:	ldr	r3, [sp]
   13fd0:	ldr	r1, [r8, #-120]	; 0xffffff88
   13fd4:	mov	r2, sl
   13fd8:	add	r7, r7, r1
   13fdc:	ldr	r0, [r4]
   13fe0:	mul	r1, r3, r1
   13fe4:	bl	1714 <fseek@plt>
   13fe8:	ldr	r2, [sp, #20]
   13fec:	ldr	r3, [r5]
   13ff0:	add	r3, r2, r3
   13ff4:	str	r3, [sp, #20]
   13ff8:	b	13c04 <ReadDataSlabN+0xa48>
   13ffc:	ldr	r3, [r6]
   14000:	ldr	r2, [sp, #4]
   14004:	sub	r3, r3, #1
   14008:	str	r3, [sp, #32]
   1400c:	ldr	r3, [sp, #196]	; 0xc4
   14010:	ldr	r0, [sp, #196]	; 0xc4
   14014:	mov	r7, #0
   14018:	ldr	r3, [r3]
   1401c:	str	r3, [sp, #112]	; 0x70
   14020:	ldr	r3, [r5]
   14024:	str	r3, [sp, #24]
   14028:	mov	r3, #1
   1402c:	ldr	r1, [sp, #192]	; 0xc0
   14030:	cmp	r3, r1
   14034:	blt	14198 <ReadDataSlabN+0xfdc>
   14038:	ldr	r3, [sp]
   1403c:	mov	r2, #1
   14040:	ldr	r0, [r4]
   14044:	mul	r1, r3, r7
   14048:	bl	1714 <fseek@plt>
   1404c:	ldr	r3, [r6]
   14050:	cmp	r3, #1
   14054:	str	r3, [sp, #20]
   14058:	movne	r3, #0
   1405c:	strne	r3, [sp, #20]
   14060:	movne	sl, #1
   14064:	moveq	fp, #0
   14068:	ldreq	r9, [sp, #20]
   1406c:	beq	1427c <ReadDataSlabN+0x10c0>
   14070:	ldr	r3, [sp, #20]
   14074:	ldr	r2, [sp, #24]
   14078:	cmp	r3, r2
   1407c:	bge	1365c <ReadDataSlabN+0x4a0>
   14080:	ldr	r3, [sp, #200]	; 0xc8
   14084:	ldr	r1, [r3]
   14088:	cmp	r1, #0
   1408c:	beq	140b0 <ReadDataSlabN+0xef4>
   14090:	ldr	r3, [sp]
   14094:	mov	r2, sl
   14098:	ldr	r0, [r4]
   1409c:	mul	r1, r3, r1
   140a0:	bl	1714 <fseek@plt>
   140a4:	ldr	r3, [sp, #200]	; 0xc8
   140a8:	ldr	r3, [r3]
   140ac:	add	r7, r7, r3
   140b0:	mov	r8, #0
   140b4:	ldr	r3, [r5]
   140b8:	cmp	r8, r3
   140bc:	blt	143a8 <ReadDataSlabN+0x11ec>
   140c0:	ldr	r1, [r6]
   140c4:	ldr	r2, [sp, #196]	; 0xc4
   140c8:	ldr	r9, [sp, #200]	; 0xc8
   140cc:	mul	r3, r1, r3
   140d0:	ldr	r1, [r2]
   140d4:	ldr	r0, [r4]
   140d8:	sub	r1, r1, r3
   140dc:	ldr	r3, [r9], #4
   140e0:	mov	r2, sl
   140e4:	sub	r1, r1, r3
   140e8:	ldr	r3, [sp]
   140ec:	add	r7, r7, r1
   140f0:	mov	r8, #1
   140f4:	mul	r1, r1, r3
   140f8:	bl	1714 <fseek@plt>
   140fc:	ldr	r3, [sp, #192]	; 0xc0
   14100:	cmp	r8, r3
   14104:	bge	14454 <ReadDataSlabN+0x1298>
   14108:	ldr	r3, [sp, #8]
   1410c:	ldr	r1, [r5, r8, lsl #2]
   14110:	ldr	r0, [r3, r8, lsl #2]
   14114:	add	r0, r0, #1
   14118:	str	r0, [r3, r8, lsl #2]
   1411c:	bl	3fd18 <__aeabi_idivmod>
   14120:	cmp	r1, #0
   14124:	bne	14430 <ReadDataSlabN+0x1274>
   14128:	ldr	r3, [sp, #8]
   1412c:	mov	r0, r7
   14130:	str	r1, [r3, r8, lsl #2]
   14134:	ldr	r3, [sp, #4]
   14138:	ldr	fp, [r3, r8, lsl #2]
   1413c:	mov	r1, fp
   14140:	bl	3fd18 <__aeabi_idivmod>
   14144:	cmp	r1, #0
   14148:	beq	143f4 <ReadDataSlabN+0x1238>
   1414c:	ldr	r3, [sp, #4]
   14150:	sub	fp, fp, r1
   14154:	add	r3, r3, r8, lsl #2
   14158:	ldr	r1, [r9]
   1415c:	ldr	r3, [r3, #-4]
   14160:	mov	r2, sl
   14164:	str	r3, [sp, #28]
   14168:	mla	r1, r1, r3, fp
   1416c:	ldr	r3, [sp]
   14170:	ldr	r0, [r4]
   14174:	mul	r1, r3, r1
   14178:	bl	1714 <fseek@plt>
   1417c:	ldr	r1, [r9]
   14180:	ldr	r3, [sp, #28]
   14184:	mla	fp, r1, r3, fp
   14188:	add	r7, r7, fp
   1418c:	add	r8, r8, #1
   14190:	add	r9, r9, #4
   14194:	b	140fc <ReadDataSlabN+0xf40>
   14198:	ldr	r1, [r6, r3, lsl #2]
   1419c:	mov	lr, r2
   141a0:	sub	r1, r1, #1
   141a4:	str	r1, [r8, r3, lsl #2]
   141a8:	ldr	r1, [r0], #4
   141ac:	str	r1, [r2, #4]
   141b0:	mov	r1, r0
   141b4:	ldr	ip, [sp, #196]	; 0xc4
   141b8:	cmp	r1, ip
   141bc:	bne	141ec <ReadDataSlabN+0x1030>
   141c0:	ldr	ip, [sp, #24]
   141c4:	ldr	r1, [r5, r3, lsl #2]
   141c8:	add	r2, r2, #4
   141cc:	mul	r1, r1, ip
   141d0:	ldr	ip, [sp, #200]	; 0xc8
   141d4:	str	r1, [sp, #24]
   141d8:	ldr	r1, [lr]
   141dc:	ldr	ip, [ip, r3, lsl #2]
   141e0:	add	r3, r3, #1
   141e4:	mla	r7, ip, r1, r7
   141e8:	b	1402c <ReadDataSlabN+0xe70>
   141ec:	ldr	sl, [r8, r3, lsl #2]
   141f0:	mov	r9, r1
   141f4:	ldr	ip, [r1, #-4]!
   141f8:	mul	ip, ip, sl
   141fc:	ldr	sl, [r2, #4]
   14200:	str	ip, [r8, r3, lsl #2]
   14204:	ldr	ip, [r9]
   14208:	mul	ip, ip, sl
   1420c:	str	ip, [r2, #4]
   14210:	b	141b4 <ReadDataSlabN+0xff8>
   14214:	ldr	r1, [r8]
   14218:	cmp	r1, #0
   1421c:	beq	1439c <ReadDataSlabN+0x11e0>
   14220:	ldr	r3, [sp, #4]
   14224:	mov	r2, r9
   14228:	add	r3, r3, r6, lsl #2
   1422c:	ldr	r0, [r4]
   14230:	ldr	sl, [r3, #-4]
   14234:	ldr	r3, [sp]
   14238:	mul	r1, sl, r1
   1423c:	mul	r1, r3, r1
   14240:	bl	1714 <fseek@plt>
   14244:	ldr	r3, [r8]
   14248:	mla	r7, r3, sl, r7
   1424c:	b	1439c <ReadDataSlabN+0x11e0>
   14250:	add	r3, sp, #152	; 0x98
   14254:	add	r6, r3, r6, lsl #2
   14258:	ldr	r3, [sp]
   1425c:	ldr	r1, [r6, #-120]	; 0xffffff88
   14260:	mov	r2, r9
   14264:	add	r7, r7, r1
   14268:	ldr	r0, [r4]
   1426c:	mul	r1, r3, r1
   14270:	bl	1714 <fseek@plt>
   14274:	ldr	r3, [r5]
   14278:	add	fp, fp, r3
   1427c:	ldr	r3, [sp, #24]
   14280:	cmp	fp, r3
   14284:	bge	1365c <ReadDataSlabN+0x4a0>
   14288:	ldr	r3, [sp, #200]	; 0xc8
   1428c:	ldr	r1, [r3]
   14290:	cmp	r1, #0
   14294:	beq	142b8 <ReadDataSlabN+0x10fc>
   14298:	ldr	r3, [sp]
   1429c:	mov	r2, r9
   142a0:	ldr	r0, [r4]
   142a4:	mul	r1, r3, r1
   142a8:	bl	1714 <fseek@plt>
   142ac:	ldr	r3, [sp, #200]	; 0xc8
   142b0:	ldr	r3, [r3]
   142b4:	add	r7, r7, r3
   142b8:	ldr	r1, [sp, #12]
   142bc:	ldr	r3, [r5]
   142c0:	ldr	r2, [sp, #16]
   142c4:	add	r1, r1, fp, lsl #3
   142c8:	mov	r0, r4
   142cc:	bl	10d40 <ReadUInt64Data>
   142d0:	ldr	r3, [sp, #196]	; 0xc4
   142d4:	ldr	r8, [sp, #200]	; 0xc8
   142d8:	ldr	r0, [r4]
   142dc:	ldr	r3, [r3]
   142e0:	ldr	r1, [r8], #4
   142e4:	sub	r2, r3, r1
   142e8:	add	r7, r2, r7
   142ec:	ldr	r2, [r5]
   142f0:	sub	r3, r3, r2
   142f4:	sub	r1, r3, r1
   142f8:	ldr	r3, [sp]
   142fc:	mov	r2, r9
   14300:	mul	r1, r3, r1
   14304:	bl	1714 <fseek@plt>
   14308:	ldr	r6, [sp, #20]
   1430c:	ldr	r3, [sp, #192]	; 0xc0
   14310:	cmp	r6, r3
   14314:	bge	14274 <ReadDataSlabN+0x10b8>
   14318:	ldr	r3, [sp, #8]
   1431c:	ldr	r1, [r5, r6, lsl #2]
   14320:	ldr	r0, [r3, r6, lsl #2]
   14324:	add	r0, r0, #1
   14328:	str	r0, [r3, r6, lsl #2]
   1432c:	bl	3fd18 <__aeabi_idivmod>
   14330:	cmp	r1, #0
   14334:	bne	14250 <ReadDataSlabN+0x1094>
   14338:	ldr	r3, [sp, #8]
   1433c:	mov	r0, r7
   14340:	str	r1, [r3, r6, lsl #2]
   14344:	ldr	r3, [sp, #4]
   14348:	ldr	sl, [r3, r6, lsl #2]
   1434c:	mov	r1, sl
   14350:	bl	3fd18 <__aeabi_idivmod>
   14354:	cmp	r1, #0
   14358:	beq	14214 <ReadDataSlabN+0x1058>
   1435c:	ldr	r3, [sp, #4]
   14360:	sub	sl, sl, r1
   14364:	add	r3, r3, r6, lsl #2
   14368:	ldr	r1, [r8]
   1436c:	ldr	r3, [r3, #-4]
   14370:	mov	r2, r9
   14374:	str	r3, [sp, #28]
   14378:	mla	r1, r1, r3, sl
   1437c:	ldr	r3, [sp]
   14380:	ldr	r0, [r4]
   14384:	mul	r1, r3, r1
   14388:	bl	1714 <fseek@plt>
   1438c:	ldr	r1, [r8]
   14390:	ldr	r3, [sp, #28]
   14394:	mla	sl, r1, r3, sl
   14398:	add	r7, r7, sl
   1439c:	add	r6, r6, #1
   143a0:	add	r8, r8, #4
   143a4:	b	1430c <ReadDataSlabN+0x1150>
   143a8:	ldr	r3, [sp, #20]
   143ac:	ldr	r0, [sp, #12]
   143b0:	add	r1, r3, r8
   143b4:	ldr	r2, [sp, #16]
   143b8:	add	r1, r0, r1, lsl #3
   143bc:	mov	r3, sl
   143c0:	mov	r0, r4
   143c4:	bl	10d40 <ReadUInt64Data>
   143c8:	ldr	r1, [r6]
   143cc:	ldr	r3, [sp]
   143d0:	sub	r1, r1, #1
   143d4:	mov	r2, sl
   143d8:	mul	r1, r3, r1
   143dc:	ldr	r0, [r4]
   143e0:	bl	1714 <fseek@plt>
   143e4:	ldr	r3, [r6]
   143e8:	add	r8, r8, #1
   143ec:	add	r7, r7, r3
   143f0:	b	140b4 <ReadDataSlabN+0xef8>
   143f4:	ldr	r1, [r9]
   143f8:	cmp	r1, #0
   143fc:	beq	1418c <ReadDataSlabN+0xfd0>
   14400:	ldr	r3, [sp, #4]
   14404:	mov	r2, sl
   14408:	add	r3, r3, r8, lsl #2
   1440c:	ldr	r0, [r4]
   14410:	ldr	fp, [r3, #-4]
   14414:	ldr	r3, [sp]
   14418:	mul	r1, fp, r1
   1441c:	mul	r1, r3, r1
   14420:	bl	1714 <fseek@plt>
   14424:	ldr	r3, [r9]
   14428:	mla	r7, r3, fp, r7
   1442c:	b	1418c <ReadDataSlabN+0xfd0>
   14430:	add	r3, sp, #152	; 0x98
   14434:	add	r8, r3, r8, lsl #2
   14438:	ldr	r3, [sp]
   1443c:	ldr	r1, [r8, #-120]	; 0xffffff88
   14440:	mov	r2, sl
   14444:	add	r7, r7, r1
   14448:	ldr	r0, [r4]
   1444c:	mul	r1, r3, r1
   14450:	bl	1714 <fseek@plt>
   14454:	ldr	r2, [sp, #20]
   14458:	ldr	r3, [r5]
   1445c:	add	r3, r2, r3
   14460:	str	r3, [sp, #20]
   14464:	b	14070 <ReadDataSlabN+0xeb4>
   14468:	ldr	r3, [r6]
   1446c:	ldr	r2, [sp, #4]
   14470:	sub	r3, r3, #1
   14474:	str	r3, [sp, #32]
   14478:	ldr	r3, [sp, #196]	; 0xc4
   1447c:	ldr	r0, [sp, #196]	; 0xc4
   14480:	mov	r7, #0
   14484:	ldr	r3, [r3]
   14488:	str	r3, [sp, #112]	; 0x70
   1448c:	ldr	r3, [r5]
   14490:	str	r3, [sp, #24]
   14494:	mov	r3, #1
   14498:	ldr	r1, [sp, #192]	; 0xc0
   1449c:	cmp	r3, r1
   144a0:	blt	14604 <ReadDataSlabN+0x1448>
   144a4:	ldr	r3, [sp]
   144a8:	mov	r2, #1
   144ac:	ldr	r0, [r4]
   144b0:	mul	r1, r3, r7
   144b4:	bl	1714 <fseek@plt>
   144b8:	ldr	r3, [r6]
   144bc:	cmp	r3, #1
   144c0:	str	r3, [sp, #20]
   144c4:	movne	r3, #0
   144c8:	strne	r3, [sp, #20]
   144cc:	movne	sl, #1
   144d0:	moveq	fp, #0
   144d4:	ldreq	r9, [sp, #20]
   144d8:	beq	146e8 <ReadDataSlabN+0x152c>
   144dc:	ldr	r3, [sp, #20]
   144e0:	ldr	r2, [sp, #24]
   144e4:	cmp	r3, r2
   144e8:	bge	1365c <ReadDataSlabN+0x4a0>
   144ec:	ldr	r3, [sp, #200]	; 0xc8
   144f0:	ldr	r1, [r3]
   144f4:	cmp	r1, #0
   144f8:	beq	1451c <ReadDataSlabN+0x1360>
   144fc:	ldr	r3, [sp]
   14500:	mov	r2, sl
   14504:	ldr	r0, [r4]
   14508:	mul	r1, r3, r1
   1450c:	bl	1714 <fseek@plt>
   14510:	ldr	r3, [sp, #200]	; 0xc8
   14514:	ldr	r3, [r3]
   14518:	add	r7, r7, r3
   1451c:	mov	r8, #0
   14520:	ldr	r3, [r5]
   14524:	cmp	r8, r3
   14528:	blt	14814 <ReadDataSlabN+0x1658>
   1452c:	ldr	r1, [r6]
   14530:	ldr	r2, [sp, #196]	; 0xc4
   14534:	ldr	r9, [sp, #200]	; 0xc8
   14538:	mul	r3, r1, r3
   1453c:	ldr	r1, [r2]
   14540:	ldr	r0, [r4]
   14544:	sub	r1, r1, r3
   14548:	ldr	r3, [r9], #4
   1454c:	mov	r2, sl
   14550:	sub	r1, r1, r3
   14554:	ldr	r3, [sp]
   14558:	add	r7, r7, r1
   1455c:	mov	r8, #1
   14560:	mul	r1, r1, r3
   14564:	bl	1714 <fseek@plt>
   14568:	ldr	r3, [sp, #192]	; 0xc0
   1456c:	cmp	r8, r3
   14570:	bge	148c0 <ReadDataSlabN+0x1704>
   14574:	ldr	r3, [sp, #8]
   14578:	ldr	r1, [r5, r8, lsl #2]
   1457c:	ldr	r0, [r3, r8, lsl #2]
   14580:	add	r0, r0, #1
   14584:	str	r0, [r3, r8, lsl #2]
   14588:	bl	3fd18 <__aeabi_idivmod>
   1458c:	cmp	r1, #0
   14590:	bne	1489c <ReadDataSlabN+0x16e0>
   14594:	ldr	r3, [sp, #8]
   14598:	mov	r0, r7
   1459c:	str	r1, [r3, r8, lsl #2]
   145a0:	ldr	r3, [sp, #4]
   145a4:	ldr	fp, [r3, r8, lsl #2]
   145a8:	mov	r1, fp
   145ac:	bl	3fd18 <__aeabi_idivmod>
   145b0:	cmp	r1, #0
   145b4:	beq	14860 <ReadDataSlabN+0x16a4>
   145b8:	ldr	r3, [sp, #4]
   145bc:	sub	fp, fp, r1
   145c0:	add	r3, r3, r8, lsl #2
   145c4:	ldr	r1, [r9]
   145c8:	ldr	r3, [r3, #-4]
   145cc:	mov	r2, sl
   145d0:	str	r3, [sp, #28]
   145d4:	mla	r1, r1, r3, fp
   145d8:	ldr	r3, [sp]
   145dc:	ldr	r0, [r4]
   145e0:	mul	r1, r3, r1
   145e4:	bl	1714 <fseek@plt>
   145e8:	ldr	r1, [r9]
   145ec:	ldr	r3, [sp, #28]
   145f0:	mla	fp, r1, r3, fp
   145f4:	add	r7, r7, fp
   145f8:	add	r8, r8, #1
   145fc:	add	r9, r9, #4
   14600:	b	14568 <ReadDataSlabN+0x13ac>
   14604:	ldr	r1, [r6, r3, lsl #2]
   14608:	mov	lr, r2
   1460c:	sub	r1, r1, #1
   14610:	str	r1, [r8, r3, lsl #2]
   14614:	ldr	r1, [r0], #4
   14618:	str	r1, [r2, #4]
   1461c:	mov	r1, r0
   14620:	ldr	ip, [sp, #196]	; 0xc4
   14624:	cmp	ip, r1
   14628:	bne	14658 <ReadDataSlabN+0x149c>
   1462c:	ldr	ip, [sp, #24]
   14630:	ldr	r1, [r5, r3, lsl #2]
   14634:	add	r2, r2, #4
   14638:	mul	r1, r1, ip
   1463c:	ldr	ip, [sp, #200]	; 0xc8
   14640:	str	r1, [sp, #24]
   14644:	ldr	r1, [lr]
   14648:	ldr	ip, [ip, r3, lsl #2]
   1464c:	add	r3, r3, #1
   14650:	mla	r7, ip, r1, r7
   14654:	b	14498 <ReadDataSlabN+0x12dc>
   14658:	ldr	sl, [r8, r3, lsl #2]
   1465c:	mov	r9, r1
   14660:	ldr	ip, [r1, #-4]!
   14664:	mul	ip, ip, sl
   14668:	ldr	sl, [r2, #4]
   1466c:	str	ip, [r8, r3, lsl #2]
   14670:	ldr	ip, [r9]
   14674:	mul	ip, ip, sl
   14678:	str	ip, [r2, #4]
   1467c:	b	14620 <ReadDataSlabN+0x1464>
   14680:	ldr	r1, [r8]
   14684:	cmp	r1, #0
   14688:	beq	14808 <ReadDataSlabN+0x164c>
   1468c:	ldr	r3, [sp, #4]
   14690:	mov	r2, r9
   14694:	add	r3, r3, r6, lsl #2
   14698:	ldr	r0, [r4]
   1469c:	ldr	sl, [r3, #-4]
   146a0:	ldr	r3, [sp]
   146a4:	mul	r1, sl, r1
   146a8:	mul	r1, r3, r1
   146ac:	bl	1714 <fseek@plt>
   146b0:	ldr	r3, [r8]
   146b4:	mla	r7, r3, sl, r7
   146b8:	b	14808 <ReadDataSlabN+0x164c>
   146bc:	add	r3, sp, #152	; 0x98
   146c0:	add	r6, r3, r6, lsl #2
   146c4:	ldr	r3, [sp]
   146c8:	ldr	r1, [r6, #-120]	; 0xffffff88
   146cc:	mov	r2, r9
   146d0:	add	r7, r7, r1
   146d4:	ldr	r0, [r4]
   146d8:	mul	r1, r3, r1
   146dc:	bl	1714 <fseek@plt>
   146e0:	ldr	r3, [r5]
   146e4:	add	fp, fp, r3
   146e8:	ldr	r3, [sp, #24]
   146ec:	cmp	fp, r3
   146f0:	bge	1365c <ReadDataSlabN+0x4a0>
   146f4:	ldr	r3, [sp, #200]	; 0xc8
   146f8:	ldr	r1, [r3]
   146fc:	cmp	r1, #0
   14700:	beq	14724 <ReadDataSlabN+0x1568>
   14704:	ldr	r3, [sp]
   14708:	mov	r2, r9
   1470c:	ldr	r0, [r4]
   14710:	mul	r1, r3, r1
   14714:	bl	1714 <fseek@plt>
   14718:	ldr	r3, [sp, #200]	; 0xc8
   1471c:	ldr	r3, [r3]
   14720:	add	r7, r7, r3
   14724:	ldr	r1, [sp, #12]
   14728:	ldr	r3, [r5]
   1472c:	ldr	r2, [sp, #16]
   14730:	add	r1, r1, fp, lsl #2
   14734:	mov	r0, r4
   14738:	bl	11270 <ReadInt32Data>
   1473c:	ldr	r3, [sp, #196]	; 0xc4
   14740:	ldr	r8, [sp, #200]	; 0xc8
   14744:	ldr	r0, [r4]
   14748:	ldr	r3, [r3]
   1474c:	ldr	r1, [r8], #4
   14750:	sub	r2, r3, r1
   14754:	add	r7, r2, r7
   14758:	ldr	r2, [r5]
   1475c:	sub	r3, r3, r2
   14760:	sub	r1, r3, r1
   14764:	ldr	r3, [sp]
   14768:	mov	r2, r9
   1476c:	mul	r1, r3, r1
   14770:	bl	1714 <fseek@plt>
   14774:	ldr	r6, [sp, #20]
   14778:	ldr	r3, [sp, #192]	; 0xc0
   1477c:	cmp	r6, r3
   14780:	bge	146e0 <ReadDataSlabN+0x1524>
   14784:	ldr	r3, [sp, #8]
   14788:	ldr	r1, [r5, r6, lsl #2]
   1478c:	ldr	r0, [r3, r6, lsl #2]
   14790:	add	r0, r0, #1
   14794:	str	r0, [r3, r6, lsl #2]
   14798:	bl	3fd18 <__aeabi_idivmod>
   1479c:	cmp	r1, #0
   147a0:	bne	146bc <ReadDataSlabN+0x1500>
   147a4:	ldr	r3, [sp, #8]
   147a8:	mov	r0, r7
   147ac:	str	r1, [r3, r6, lsl #2]
   147b0:	ldr	r3, [sp, #4]
   147b4:	ldr	sl, [r3, r6, lsl #2]
   147b8:	mov	r1, sl
   147bc:	bl	3fd18 <__aeabi_idivmod>
   147c0:	cmp	r1, #0
   147c4:	beq	14680 <ReadDataSlabN+0x14c4>
   147c8:	ldr	r3, [sp, #4]
   147cc:	sub	sl, sl, r1
   147d0:	add	r3, r3, r6, lsl #2
   147d4:	ldr	r1, [r8]
   147d8:	ldr	r3, [r3, #-4]
   147dc:	mov	r2, r9
   147e0:	str	r3, [sp, #28]
   147e4:	mla	r1, r1, r3, sl
   147e8:	ldr	r3, [sp]
   147ec:	ldr	r0, [r4]
   147f0:	mul	r1, r3, r1
   147f4:	bl	1714 <fseek@plt>
   147f8:	ldr	r1, [r8]
   147fc:	ldr	r3, [sp, #28]
   14800:	mla	sl, r1, r3, sl
   14804:	add	r7, r7, sl
   14808:	add	r6, r6, #1
   1480c:	add	r8, r8, #4
   14810:	b	14778 <ReadDataSlabN+0x15bc>
   14814:	ldr	r3, [sp, #20]
   14818:	ldr	r0, [sp, #12]
   1481c:	add	r1, r8, r3
   14820:	ldr	r2, [sp, #16]
   14824:	add	r1, r0, r1, lsl #2
   14828:	mov	r3, sl
   1482c:	mov	r0, r4
   14830:	bl	11270 <ReadInt32Data>
   14834:	ldr	r1, [r6]
   14838:	ldr	r3, [sp]
   1483c:	sub	r1, r1, #1
   14840:	mov	r2, sl
   14844:	mul	r1, r3, r1
   14848:	ldr	r0, [r4]
   1484c:	bl	1714 <fseek@plt>
   14850:	ldr	r3, [r6]
   14854:	add	r8, r8, #1
   14858:	add	r7, r7, r3
   1485c:	b	14520 <ReadDataSlabN+0x1364>
   14860:	ldr	r1, [r9]
   14864:	cmp	r1, #0
   14868:	beq	145f8 <ReadDataSlabN+0x143c>
   1486c:	ldr	r3, [sp, #4]
   14870:	mov	r2, sl
   14874:	add	r3, r3, r8, lsl #2
   14878:	ldr	r0, [r4]
   1487c:	ldr	fp, [r3, #-4]
   14880:	ldr	r3, [sp]
   14884:	mul	r1, fp, r1
   14888:	mul	r1, r3, r1
   1488c:	bl	1714 <fseek@plt>
   14890:	ldr	r3, [r9]
   14894:	mla	r7, r3, fp, r7
   14898:	b	145f8 <ReadDataSlabN+0x143c>
   1489c:	add	r3, sp, #152	; 0x98
   148a0:	add	r8, r3, r8, lsl #2
   148a4:	ldr	r3, [sp]
   148a8:	ldr	r1, [r8, #-120]	; 0xffffff88
   148ac:	mov	r2, sl
   148b0:	add	r7, r7, r1
   148b4:	ldr	r0, [r4]
   148b8:	mul	r1, r3, r1
   148bc:	bl	1714 <fseek@plt>
   148c0:	ldr	r2, [sp, #20]
   148c4:	ldr	r3, [r5]
   148c8:	add	r3, r2, r3
   148cc:	str	r3, [sp, #20]
   148d0:	b	144dc <ReadDataSlabN+0x1320>
   148d4:	ldr	r3, [r6]
   148d8:	ldr	r2, [sp, #4]
   148dc:	sub	r3, r3, #1
   148e0:	str	r3, [sp, #32]
   148e4:	ldr	r3, [sp, #196]	; 0xc4
   148e8:	ldr	r0, [sp, #196]	; 0xc4
   148ec:	mov	r7, #0
   148f0:	ldr	r3, [r3]
   148f4:	str	r3, [sp, #112]	; 0x70
   148f8:	ldr	r3, [r5]
   148fc:	str	r3, [sp, #24]
   14900:	mov	r3, #1
   14904:	ldr	r1, [sp, #192]	; 0xc0
   14908:	cmp	r3, r1
   1490c:	blt	14a70 <ReadDataSlabN+0x18b4>
   14910:	ldr	r3, [sp]
   14914:	mov	r2, #1
   14918:	ldr	r0, [r4]
   1491c:	mul	r1, r3, r7
   14920:	bl	1714 <fseek@plt>
   14924:	ldr	r3, [r6]
   14928:	cmp	r3, #1
   1492c:	str	r3, [sp, #20]
   14930:	movne	r3, #0
   14934:	strne	r3, [sp, #20]
   14938:	movne	sl, #1
   1493c:	moveq	fp, #0
   14940:	ldreq	r9, [sp, #20]
   14944:	beq	14b54 <ReadDataSlabN+0x1998>
   14948:	ldr	r3, [sp, #20]
   1494c:	ldr	r2, [sp, #24]
   14950:	cmp	r3, r2
   14954:	bge	1365c <ReadDataSlabN+0x4a0>
   14958:	ldr	r3, [sp, #200]	; 0xc8
   1495c:	ldr	r1, [r3]
   14960:	cmp	r1, #0
   14964:	beq	14988 <ReadDataSlabN+0x17cc>
   14968:	ldr	r3, [sp]
   1496c:	mov	r2, sl
   14970:	ldr	r0, [r4]
   14974:	mul	r1, r3, r1
   14978:	bl	1714 <fseek@plt>
   1497c:	ldr	r3, [sp, #200]	; 0xc8
   14980:	ldr	r3, [r3]
   14984:	add	r7, r7, r3
   14988:	mov	r8, #0
   1498c:	ldr	r3, [r5]
   14990:	cmp	r8, r3
   14994:	blt	14c80 <ReadDataSlabN+0x1ac4>
   14998:	ldr	r1, [r6]
   1499c:	ldr	r2, [sp, #196]	; 0xc4
   149a0:	ldr	r9, [sp, #200]	; 0xc8
   149a4:	mul	r3, r1, r3
   149a8:	ldr	r1, [r2]
   149ac:	ldr	r0, [r4]
   149b0:	sub	r1, r1, r3
   149b4:	ldr	r3, [r9], #4
   149b8:	mov	r2, sl
   149bc:	sub	r1, r1, r3
   149c0:	ldr	r3, [sp]
   149c4:	add	r7, r7, r1
   149c8:	mov	r8, #1
   149cc:	mul	r1, r1, r3
   149d0:	bl	1714 <fseek@plt>
   149d4:	ldr	r3, [sp, #192]	; 0xc0
   149d8:	cmp	r8, r3
   149dc:	bge	14d2c <ReadDataSlabN+0x1b70>
   149e0:	ldr	r3, [sp, #8]
   149e4:	ldr	r1, [r5, r8, lsl #2]
   149e8:	ldr	r0, [r3, r8, lsl #2]
   149ec:	add	r0, r0, #1
   149f0:	str	r0, [r3, r8, lsl #2]
   149f4:	bl	3fd18 <__aeabi_idivmod>
   149f8:	cmp	r1, #0
   149fc:	bne	14d08 <ReadDataSlabN+0x1b4c>
   14a00:	ldr	r3, [sp, #8]
   14a04:	mov	r0, r7
   14a08:	str	r1, [r3, r8, lsl #2]
   14a0c:	ldr	r3, [sp, #4]
   14a10:	ldr	fp, [r3, r8, lsl #2]
   14a14:	mov	r1, fp
   14a18:	bl	3fd18 <__aeabi_idivmod>
   14a1c:	cmp	r1, #0
   14a20:	beq	14ccc <ReadDataSlabN+0x1b10>
   14a24:	ldr	r3, [sp, #4]
   14a28:	sub	fp, fp, r1
   14a2c:	add	r3, r3, r8, lsl #2
   14a30:	ldr	r1, [r9]
   14a34:	ldr	r3, [r3, #-4]
   14a38:	mov	r2, sl
   14a3c:	str	r3, [sp, #28]
   14a40:	mla	r1, r1, r3, fp
   14a44:	ldr	r3, [sp]
   14a48:	ldr	r0, [r4]
   14a4c:	mul	r1, r3, r1
   14a50:	bl	1714 <fseek@plt>
   14a54:	ldr	r1, [r9]
   14a58:	ldr	r3, [sp, #28]
   14a5c:	mla	fp, r1, r3, fp
   14a60:	add	r7, r7, fp
   14a64:	add	r8, r8, #1
   14a68:	add	r9, r9, #4
   14a6c:	b	149d4 <ReadDataSlabN+0x1818>
   14a70:	ldr	r1, [r6, r3, lsl #2]
   14a74:	mov	lr, r2
   14a78:	sub	r1, r1, #1
   14a7c:	str	r1, [r8, r3, lsl #2]
   14a80:	ldr	r1, [r0], #4
   14a84:	str	r1, [r2, #4]
   14a88:	mov	r1, r0
   14a8c:	ldr	ip, [sp, #196]	; 0xc4
   14a90:	cmp	r1, ip
   14a94:	bne	14ac4 <ReadDataSlabN+0x1908>
   14a98:	ldr	ip, [sp, #24]
   14a9c:	ldr	r1, [r5, r3, lsl #2]
   14aa0:	add	r2, r2, #4
   14aa4:	mul	r1, r1, ip
   14aa8:	ldr	ip, [sp, #200]	; 0xc8
   14aac:	str	r1, [sp, #24]
   14ab0:	ldr	r1, [lr]
   14ab4:	ldr	ip, [ip, r3, lsl #2]
   14ab8:	add	r3, r3, #1
   14abc:	mla	r7, ip, r1, r7
   14ac0:	b	14904 <ReadDataSlabN+0x1748>
   14ac4:	ldr	sl, [r8, r3, lsl #2]
   14ac8:	mov	r9, r1
   14acc:	ldr	ip, [r1, #-4]!
   14ad0:	mul	ip, ip, sl
   14ad4:	ldr	sl, [r2, #4]
   14ad8:	str	ip, [r8, r3, lsl #2]
   14adc:	ldr	ip, [r9]
   14ae0:	mul	ip, ip, sl
   14ae4:	str	ip, [r2, #4]
   14ae8:	b	14a8c <ReadDataSlabN+0x18d0>
   14aec:	ldr	r1, [r8]
   14af0:	cmp	r1, #0
   14af4:	beq	14c74 <ReadDataSlabN+0x1ab8>
   14af8:	ldr	r3, [sp, #4]
   14afc:	mov	r2, r9
   14b00:	add	r3, r3, r6, lsl #2
   14b04:	ldr	r0, [r4]
   14b08:	ldr	sl, [r3, #-4]
   14b0c:	ldr	r3, [sp]
   14b10:	mul	r1, sl, r1
   14b14:	mul	r1, r3, r1
   14b18:	bl	1714 <fseek@plt>
   14b1c:	ldr	r3, [r8]
   14b20:	mla	r7, r3, sl, r7
   14b24:	b	14c74 <ReadDataSlabN+0x1ab8>
   14b28:	add	r3, sp, #152	; 0x98
   14b2c:	add	r6, r3, r6, lsl #2
   14b30:	ldr	r3, [sp]
   14b34:	ldr	r1, [r6, #-120]	; 0xffffff88
   14b38:	mov	r2, r9
   14b3c:	add	r7, r7, r1
   14b40:	ldr	r0, [r4]
   14b44:	mul	r1, r3, r1
   14b48:	bl	1714 <fseek@plt>
   14b4c:	ldr	r3, [r5]
   14b50:	add	fp, fp, r3
   14b54:	ldr	r3, [sp, #24]
   14b58:	cmp	fp, r3
   14b5c:	bge	1365c <ReadDataSlabN+0x4a0>
   14b60:	ldr	r3, [sp, #200]	; 0xc8
   14b64:	ldr	r1, [r3]
   14b68:	cmp	r1, #0
   14b6c:	beq	14b90 <ReadDataSlabN+0x19d4>
   14b70:	ldr	r3, [sp]
   14b74:	mov	r2, r9
   14b78:	ldr	r0, [r4]
   14b7c:	mul	r1, r3, r1
   14b80:	bl	1714 <fseek@plt>
   14b84:	ldr	r3, [sp, #200]	; 0xc8
   14b88:	ldr	r3, [r3]
   14b8c:	add	r7, r7, r3
   14b90:	ldr	r1, [sp, #12]
   14b94:	ldr	r3, [r5]
   14b98:	ldr	r2, [sp, #16]
   14b9c:	add	r1, r1, fp, lsl #2
   14ba0:	mov	r0, r4
   14ba4:	bl	11750 <ReadUInt32Data>
   14ba8:	ldr	r3, [sp, #196]	; 0xc4
   14bac:	ldr	r8, [sp, #200]	; 0xc8
   14bb0:	ldr	r0, [r4]
   14bb4:	ldr	r3, [r3]
   14bb8:	ldr	r1, [r8], #4
   14bbc:	sub	r2, r3, r1
   14bc0:	add	r7, r2, r7
   14bc4:	ldr	r2, [r5]
   14bc8:	sub	r3, r3, r2
   14bcc:	sub	r1, r3, r1
   14bd0:	ldr	r3, [sp]
   14bd4:	mov	r2, r9
   14bd8:	mul	r1, r3, r1
   14bdc:	bl	1714 <fseek@plt>
   14be0:	ldr	r6, [sp, #20]
   14be4:	ldr	r3, [sp, #192]	; 0xc0
   14be8:	cmp	r6, r3
   14bec:	bge	14b4c <ReadDataSlabN+0x1990>
   14bf0:	ldr	r3, [sp, #8]
   14bf4:	ldr	r1, [r5, r6, lsl #2]
   14bf8:	ldr	r0, [r3, r6, lsl #2]
   14bfc:	add	r0, r0, #1
   14c00:	str	r0, [r3, r6, lsl #2]
   14c04:	bl	3fd18 <__aeabi_idivmod>
   14c08:	cmp	r1, #0
   14c0c:	bne	14b28 <ReadDataSlabN+0x196c>
   14c10:	ldr	r3, [sp, #8]
   14c14:	mov	r0, r7
   14c18:	str	r1, [r3, r6, lsl #2]
   14c1c:	ldr	r3, [sp, #4]
   14c20:	ldr	sl, [r3, r6, lsl #2]
   14c24:	mov	r1, sl
   14c28:	bl	3fd18 <__aeabi_idivmod>
   14c2c:	cmp	r1, #0
   14c30:	beq	14aec <ReadDataSlabN+0x1930>
   14c34:	ldr	r3, [sp, #4]
   14c38:	sub	sl, sl, r1
   14c3c:	add	r3, r3, r6, lsl #2
   14c40:	ldr	r1, [r8]
   14c44:	ldr	r3, [r3, #-4]
   14c48:	mov	r2, r9
   14c4c:	str	r3, [sp, #28]
   14c50:	mla	r1, r1, r3, sl
   14c54:	ldr	r3, [sp]
   14c58:	ldr	r0, [r4]
   14c5c:	mul	r1, r3, r1
   14c60:	bl	1714 <fseek@plt>
   14c64:	ldr	r1, [r8]
   14c68:	ldr	r3, [sp, #28]
   14c6c:	mla	sl, r1, r3, sl
   14c70:	add	r7, r7, sl
   14c74:	add	r6, r6, #1
   14c78:	add	r8, r8, #4
   14c7c:	b	14be4 <ReadDataSlabN+0x1a28>
   14c80:	ldr	r3, [sp, #20]
   14c84:	ldr	r0, [sp, #12]
   14c88:	add	r1, r3, r8
   14c8c:	ldr	r2, [sp, #16]
   14c90:	add	r1, r0, r1, lsl #2
   14c94:	mov	r3, sl
   14c98:	mov	r0, r4
   14c9c:	bl	11750 <ReadUInt32Data>
   14ca0:	ldr	r1, [r6]
   14ca4:	ldr	r3, [sp]
   14ca8:	sub	r1, r1, #1
   14cac:	mov	r2, sl
   14cb0:	mul	r1, r3, r1
   14cb4:	ldr	r0, [r4]
   14cb8:	bl	1714 <fseek@plt>
   14cbc:	ldr	r3, [r6]
   14cc0:	add	r8, r8, #1
   14cc4:	add	r7, r7, r3
   14cc8:	b	1498c <ReadDataSlabN+0x17d0>
   14ccc:	ldr	r1, [r9]
   14cd0:	cmp	r1, #0
   14cd4:	beq	14a64 <ReadDataSlabN+0x18a8>
   14cd8:	ldr	r3, [sp, #4]
   14cdc:	mov	r2, sl
   14ce0:	add	r3, r3, r8, lsl #2
   14ce4:	ldr	r0, [r4]
   14ce8:	ldr	fp, [r3, #-4]
   14cec:	ldr	r3, [sp]
   14cf0:	mul	r1, fp, r1
   14cf4:	mul	r1, r3, r1
   14cf8:	bl	1714 <fseek@plt>
   14cfc:	ldr	r3, [r9]
   14d00:	mla	r7, r3, fp, r7
   14d04:	b	14a64 <ReadDataSlabN+0x18a8>
   14d08:	add	r3, sp, #152	; 0x98
   14d0c:	add	r8, r3, r8, lsl #2
   14d10:	ldr	r3, [sp]
   14d14:	ldr	r1, [r8, #-120]	; 0xffffff88
   14d18:	mov	r2, sl
   14d1c:	add	r7, r7, r1
   14d20:	ldr	r0, [r4]
   14d24:	mul	r1, r3, r1
   14d28:	bl	1714 <fseek@plt>
   14d2c:	ldr	r2, [sp, #20]
   14d30:	ldr	r3, [r5]
   14d34:	add	r3, r2, r3
   14d38:	str	r3, [sp, #20]
   14d3c:	b	14948 <ReadDataSlabN+0x178c>
   14d40:	ldr	r3, [r6]
   14d44:	ldr	r2, [sp, #4]
   14d48:	sub	r3, r3, #1
   14d4c:	str	r3, [sp, #32]
   14d50:	ldr	r3, [sp, #196]	; 0xc4
   14d54:	ldr	r0, [sp, #196]	; 0xc4
   14d58:	mov	r7, #0
   14d5c:	ldr	r3, [r3]
   14d60:	str	r3, [sp, #112]	; 0x70
   14d64:	ldr	r3, [r5]
   14d68:	str	r3, [sp, #24]
   14d6c:	mov	r3, #1
   14d70:	ldr	r1, [sp, #192]	; 0xc0
   14d74:	cmp	r3, r1
   14d78:	blt	14edc <ReadDataSlabN+0x1d20>
   14d7c:	ldr	r3, [sp]
   14d80:	mov	r2, #1
   14d84:	ldr	r0, [r4]
   14d88:	mul	r1, r3, r7
   14d8c:	bl	1714 <fseek@plt>
   14d90:	ldr	r3, [r6]
   14d94:	cmp	r3, #1
   14d98:	str	r3, [sp, #20]
   14d9c:	movne	r3, #0
   14da0:	strne	r3, [sp, #20]
   14da4:	movne	sl, #1
   14da8:	moveq	fp, #0
   14dac:	ldreq	r9, [sp, #20]
   14db0:	beq	14fc0 <ReadDataSlabN+0x1e04>
   14db4:	ldr	r3, [sp, #20]
   14db8:	ldr	r2, [sp, #24]
   14dbc:	cmp	r3, r2
   14dc0:	bge	1365c <ReadDataSlabN+0x4a0>
   14dc4:	ldr	r3, [sp, #200]	; 0xc8
   14dc8:	ldr	r1, [r3]
   14dcc:	cmp	r1, #0
   14dd0:	beq	14df4 <ReadDataSlabN+0x1c38>
   14dd4:	ldr	r3, [sp]
   14dd8:	mov	r2, sl
   14ddc:	ldr	r0, [r4]
   14de0:	mul	r1, r3, r1
   14de4:	bl	1714 <fseek@plt>
   14de8:	ldr	r3, [sp, #200]	; 0xc8
   14dec:	ldr	r3, [r3]
   14df0:	add	r7, r7, r3
   14df4:	mov	r8, #0
   14df8:	ldr	r3, [r5]
   14dfc:	cmp	r8, r3
   14e00:	blt	150ec <ReadDataSlabN+0x1f30>
   14e04:	ldr	r1, [r6]
   14e08:	ldr	r2, [sp, #196]	; 0xc4
   14e0c:	ldr	r9, [sp, #200]	; 0xc8
   14e10:	mul	r3, r1, r3
   14e14:	ldr	r1, [r2]
   14e18:	ldr	r0, [r4]
   14e1c:	sub	r1, r1, r3
   14e20:	ldr	r3, [r9], #4
   14e24:	mov	r2, sl
   14e28:	sub	r1, r1, r3
   14e2c:	ldr	r3, [sp]
   14e30:	add	r7, r7, r1
   14e34:	mov	r8, #1
   14e38:	mul	r1, r1, r3
   14e3c:	bl	1714 <fseek@plt>
   14e40:	ldr	r3, [sp, #192]	; 0xc0
   14e44:	cmp	r8, r3
   14e48:	bge	15198 <ReadDataSlabN+0x1fdc>
   14e4c:	ldr	r3, [sp, #8]
   14e50:	ldr	r1, [r5, r8, lsl #2]
   14e54:	ldr	r0, [r3, r8, lsl #2]
   14e58:	add	r0, r0, #1
   14e5c:	str	r0, [r3, r8, lsl #2]
   14e60:	bl	3fd18 <__aeabi_idivmod>
   14e64:	cmp	r1, #0
   14e68:	bne	15174 <ReadDataSlabN+0x1fb8>
   14e6c:	ldr	r3, [sp, #8]
   14e70:	mov	r0, r7
   14e74:	str	r1, [r3, r8, lsl #2]
   14e78:	ldr	r3, [sp, #4]
   14e7c:	ldr	fp, [r3, r8, lsl #2]
   14e80:	mov	r1, fp
   14e84:	bl	3fd18 <__aeabi_idivmod>
   14e88:	cmp	r1, #0
   14e8c:	beq	15138 <ReadDataSlabN+0x1f7c>
   14e90:	ldr	r3, [sp, #4]
   14e94:	sub	fp, fp, r1
   14e98:	add	r3, r3, r8, lsl #2
   14e9c:	ldr	r1, [r9]
   14ea0:	ldr	r3, [r3, #-4]
   14ea4:	mov	r2, sl
   14ea8:	str	r3, [sp, #28]
   14eac:	mla	r1, r1, r3, fp
   14eb0:	ldr	r3, [sp]
   14eb4:	ldr	r0, [r4]
   14eb8:	mul	r1, r3, r1
   14ebc:	bl	1714 <fseek@plt>
   14ec0:	ldr	r1, [r9]
   14ec4:	ldr	r3, [sp, #28]
   14ec8:	mla	fp, r1, r3, fp
   14ecc:	add	r7, r7, fp
   14ed0:	add	r8, r8, #1
   14ed4:	add	r9, r9, #4
   14ed8:	b	14e40 <ReadDataSlabN+0x1c84>
   14edc:	ldr	r1, [r6, r3, lsl #2]
   14ee0:	mov	lr, r2
   14ee4:	sub	r1, r1, #1
   14ee8:	str	r1, [r8, r3, lsl #2]
   14eec:	ldr	r1, [r0], #4
   14ef0:	str	r1, [r2, #4]
   14ef4:	mov	r1, r0
   14ef8:	ldr	ip, [sp, #196]	; 0xc4
   14efc:	cmp	ip, r1
   14f00:	bne	14f30 <ReadDataSlabN+0x1d74>
   14f04:	ldr	ip, [sp, #24]
   14f08:	ldr	r1, [r5, r3, lsl #2]
   14f0c:	add	r2, r2, #4
   14f10:	mul	r1, r1, ip
   14f14:	ldr	ip, [sp, #200]	; 0xc8
   14f18:	str	r1, [sp, #24]
   14f1c:	ldr	r1, [lr]
   14f20:	ldr	ip, [ip, r3, lsl #2]
   14f24:	add	r3, r3, #1
   14f28:	mla	r7, ip, r1, r7
   14f2c:	b	14d70 <ReadDataSlabN+0x1bb4>
   14f30:	ldr	sl, [r8, r3, lsl #2]
   14f34:	mov	r9, r1
   14f38:	ldr	ip, [r1, #-4]!
   14f3c:	mul	ip, ip, sl
   14f40:	ldr	sl, [r2, #4]
   14f44:	str	ip, [r8, r3, lsl #2]
   14f48:	ldr	ip, [r9]
   14f4c:	mul	ip, ip, sl
   14f50:	str	ip, [r2, #4]
   14f54:	b	14ef8 <ReadDataSlabN+0x1d3c>
   14f58:	ldr	r1, [r8]
   14f5c:	cmp	r1, #0
   14f60:	beq	150e0 <ReadDataSlabN+0x1f24>
   14f64:	ldr	r3, [sp, #4]
   14f68:	mov	r2, r9
   14f6c:	add	r3, r3, r6, lsl #2
   14f70:	ldr	r0, [r4]
   14f74:	ldr	sl, [r3, #-4]
   14f78:	ldr	r3, [sp]
   14f7c:	mul	r1, sl, r1
   14f80:	mul	r1, r3, r1
   14f84:	bl	1714 <fseek@plt>
   14f88:	ldr	r3, [r8]
   14f8c:	mla	r7, r3, sl, r7
   14f90:	b	150e0 <ReadDataSlabN+0x1f24>
   14f94:	add	r3, sp, #152	; 0x98
   14f98:	add	r6, r3, r6, lsl #2
   14f9c:	ldr	r3, [sp]
   14fa0:	ldr	r1, [r6, #-120]	; 0xffffff88
   14fa4:	mov	r2, r9
   14fa8:	add	r7, r7, r1
   14fac:	ldr	r0, [r4]
   14fb0:	mul	r1, r3, r1
   14fb4:	bl	1714 <fseek@plt>
   14fb8:	ldr	r3, [r5]
   14fbc:	add	fp, fp, r3
   14fc0:	ldr	r3, [sp, #24]
   14fc4:	cmp	fp, r3
   14fc8:	bge	1365c <ReadDataSlabN+0x4a0>
   14fcc:	ldr	r3, [sp, #200]	; 0xc8
   14fd0:	ldr	r1, [r3]
   14fd4:	cmp	r1, #0
   14fd8:	beq	14ffc <ReadDataSlabN+0x1e40>
   14fdc:	ldr	r3, [sp]
   14fe0:	mov	r2, r9
   14fe4:	ldr	r0, [r4]
   14fe8:	mul	r1, r3, r1
   14fec:	bl	1714 <fseek@plt>
   14ff0:	ldr	r3, [sp, #200]	; 0xc8
   14ff4:	ldr	r3, [r3]
   14ff8:	add	r7, r7, r3
   14ffc:	ldr	r1, [sp, #12]
   15000:	ldr	r3, [r5]
   15004:	ldr	r2, [sp, #16]
   15008:	add	r1, r1, fp, lsl #1
   1500c:	mov	r0, r4
   15010:	bl	11c30 <ReadInt16Data>
   15014:	ldr	r3, [sp, #196]	; 0xc4
   15018:	ldr	r8, [sp, #200]	; 0xc8
   1501c:	ldr	r0, [r4]
   15020:	ldr	r3, [r3]
   15024:	ldr	r1, [r8], #4
   15028:	sub	r2, r3, r1
   1502c:	add	r7, r2, r7
   15030:	ldr	r2, [r5]
   15034:	sub	r3, r3, r2
   15038:	sub	r1, r3, r1
   1503c:	ldr	r3, [sp]
   15040:	mov	r2, r9
   15044:	mul	r1, r3, r1
   15048:	bl	1714 <fseek@plt>
   1504c:	ldr	r6, [sp, #20]
   15050:	ldr	r3, [sp, #192]	; 0xc0
   15054:	cmp	r6, r3
   15058:	bge	14fb8 <ReadDataSlabN+0x1dfc>
   1505c:	ldr	r3, [sp, #8]
   15060:	ldr	r1, [r5, r6, lsl #2]
   15064:	ldr	r0, [r3, r6, lsl #2]
   15068:	add	r0, r0, #1
   1506c:	str	r0, [r3, r6, lsl #2]
   15070:	bl	3fd18 <__aeabi_idivmod>
   15074:	cmp	r1, #0
   15078:	bne	14f94 <ReadDataSlabN+0x1dd8>
   1507c:	ldr	r3, [sp, #8]
   15080:	mov	r0, r7
   15084:	str	r1, [r3, r6, lsl #2]
   15088:	ldr	r3, [sp, #4]
   1508c:	ldr	sl, [r3, r6, lsl #2]
   15090:	mov	r1, sl
   15094:	bl	3fd18 <__aeabi_idivmod>
   15098:	cmp	r1, #0
   1509c:	beq	14f58 <ReadDataSlabN+0x1d9c>
   150a0:	ldr	r3, [sp, #4]
   150a4:	sub	sl, sl, r1
   150a8:	add	r3, r3, r6, lsl #2
   150ac:	ldr	r1, [r8]
   150b0:	ldr	r3, [r3, #-4]
   150b4:	mov	r2, r9
   150b8:	str	r3, [sp, #28]
   150bc:	mla	r1, r1, r3, sl
   150c0:	ldr	r3, [sp]
   150c4:	ldr	r0, [r4]
   150c8:	mul	r1, r3, r1
   150cc:	bl	1714 <fseek@plt>
   150d0:	ldr	r1, [r8]
   150d4:	ldr	r3, [sp, #28]
   150d8:	mla	sl, r1, r3, sl
   150dc:	add	r7, r7, sl
   150e0:	add	r6, r6, #1
   150e4:	add	r8, r8, #4
   150e8:	b	15050 <ReadDataSlabN+0x1e94>
   150ec:	ldr	r3, [sp, #20]
   150f0:	ldr	r0, [sp, #12]
   150f4:	add	r1, r3, r8
   150f8:	ldr	r2, [sp, #16]
   150fc:	add	r1, r0, r1, lsl #1
   15100:	mov	r3, sl
   15104:	mov	r0, r4
   15108:	bl	11c30 <ReadInt16Data>
   1510c:	ldr	r1, [r6]
   15110:	ldr	r3, [sp]
   15114:	sub	r1, r1, #1
   15118:	mov	r2, sl
   1511c:	mul	r1, r3, r1
   15120:	ldr	r0, [r4]
   15124:	bl	1714 <fseek@plt>
   15128:	ldr	r3, [r6]
   1512c:	add	r8, r8, #1
   15130:	add	r7, r7, r3
   15134:	b	14df8 <ReadDataSlabN+0x1c3c>
   15138:	ldr	r1, [r9]
   1513c:	cmp	r1, #0
   15140:	beq	14ed0 <ReadDataSlabN+0x1d14>
   15144:	ldr	r3, [sp, #4]
   15148:	mov	r2, sl
   1514c:	add	r3, r3, r8, lsl #2
   15150:	ldr	r0, [r4]
   15154:	ldr	fp, [r3, #-4]
   15158:	ldr	r3, [sp]
   1515c:	mul	r1, fp, r1
   15160:	mul	r1, r3, r1
   15164:	bl	1714 <fseek@plt>
   15168:	ldr	r3, [r9]
   1516c:	mla	r7, r3, fp, r7
   15170:	b	14ed0 <ReadDataSlabN+0x1d14>
   15174:	add	r3, sp, #152	; 0x98
   15178:	add	r8, r3, r8, lsl #2
   1517c:	ldr	r3, [sp]
   15180:	ldr	r1, [r8, #-120]	; 0xffffff88
   15184:	mov	r2, sl
   15188:	add	r7, r7, r1
   1518c:	ldr	r0, [r4]
   15190:	mul	r1, r3, r1
   15194:	bl	1714 <fseek@plt>
   15198:	ldr	r2, [sp, #20]
   1519c:	ldr	r3, [r5]
   151a0:	add	r3, r2, r3
   151a4:	str	r3, [sp, #20]
   151a8:	b	14db4 <ReadDataSlabN+0x1bf8>
   151ac:	ldr	r3, [r6]
   151b0:	ldr	r2, [sp, #4]
   151b4:	sub	r3, r3, #1
   151b8:	str	r3, [sp, #32]
   151bc:	ldr	r3, [sp, #196]	; 0xc4
   151c0:	ldr	r0, [sp, #196]	; 0xc4
   151c4:	mov	r7, #0
   151c8:	ldr	r3, [r3]
   151cc:	str	r3, [sp, #112]	; 0x70
   151d0:	ldr	r3, [r5]
   151d4:	str	r3, [sp, #24]
   151d8:	mov	r3, #1
   151dc:	ldr	r1, [sp, #192]	; 0xc0
   151e0:	cmp	r3, r1
   151e4:	blt	15348 <ReadDataSlabN+0x218c>
   151e8:	ldr	r3, [sp]
   151ec:	mov	r2, #1
   151f0:	ldr	r0, [r4]
   151f4:	mul	r1, r3, r7
   151f8:	bl	1714 <fseek@plt>
   151fc:	ldr	r3, [r6]
   15200:	cmp	r3, #1
   15204:	str	r3, [sp, #20]
   15208:	movne	r3, #0
   1520c:	strne	r3, [sp, #20]
   15210:	movne	sl, #1
   15214:	moveq	fp, #0
   15218:	ldreq	r9, [sp, #20]
   1521c:	beq	1542c <ReadDataSlabN+0x2270>
   15220:	ldr	r3, [sp, #20]
   15224:	ldr	r2, [sp, #24]
   15228:	cmp	r3, r2
   1522c:	bge	1365c <ReadDataSlabN+0x4a0>
   15230:	ldr	r3, [sp, #200]	; 0xc8
   15234:	ldr	r1, [r3]
   15238:	cmp	r1, #0
   1523c:	beq	15260 <ReadDataSlabN+0x20a4>
   15240:	ldr	r3, [sp]
   15244:	mov	r2, sl
   15248:	ldr	r0, [r4]
   1524c:	mul	r1, r3, r1
   15250:	bl	1714 <fseek@plt>
   15254:	ldr	r3, [sp, #200]	; 0xc8
   15258:	ldr	r3, [r3]
   1525c:	add	r7, r7, r3
   15260:	mov	r8, #0
   15264:	ldr	r3, [r5]
   15268:	cmp	r8, r3
   1526c:	blt	15558 <ReadDataSlabN+0x239c>
   15270:	ldr	r1, [r6]
   15274:	ldr	r2, [sp, #196]	; 0xc4
   15278:	ldr	r9, [sp, #200]	; 0xc8
   1527c:	mul	r3, r1, r3
   15280:	ldr	r1, [r2]
   15284:	ldr	r0, [r4]
   15288:	sub	r1, r1, r3
   1528c:	ldr	r3, [r9], #4
   15290:	mov	r2, sl
   15294:	sub	r1, r1, r3
   15298:	ldr	r3, [sp]
   1529c:	add	r7, r7, r1
   152a0:	mov	r8, #1
   152a4:	mul	r1, r1, r3
   152a8:	bl	1714 <fseek@plt>
   152ac:	ldr	r3, [sp, #192]	; 0xc0
   152b0:	cmp	r8, r3
   152b4:	bge	15604 <ReadDataSlabN+0x2448>
   152b8:	ldr	r3, [sp, #8]
   152bc:	ldr	r1, [r5, r8, lsl #2]
   152c0:	ldr	r0, [r3, r8, lsl #2]
   152c4:	add	r0, r0, #1
   152c8:	str	r0, [r3, r8, lsl #2]
   152cc:	bl	3fd18 <__aeabi_idivmod>
   152d0:	cmp	r1, #0
   152d4:	bne	155e0 <ReadDataSlabN+0x2424>
   152d8:	ldr	r3, [sp, #8]
   152dc:	mov	r0, r7
   152e0:	str	r1, [r3, r8, lsl #2]
   152e4:	ldr	r3, [sp, #4]
   152e8:	ldr	fp, [r3, r8, lsl #2]
   152ec:	mov	r1, fp
   152f0:	bl	3fd18 <__aeabi_idivmod>
   152f4:	cmp	r1, #0
   152f8:	beq	155a4 <ReadDataSlabN+0x23e8>
   152fc:	ldr	r3, [sp, #4]
   15300:	sub	fp, fp, r1
   15304:	add	r3, r3, r8, lsl #2
   15308:	ldr	r1, [r9]
   1530c:	ldr	r3, [r3, #-4]
   15310:	mov	r2, sl
   15314:	str	r3, [sp, #28]
   15318:	mla	r1, r1, r3, fp
   1531c:	ldr	r3, [sp]
   15320:	ldr	r0, [r4]
   15324:	mul	r1, r3, r1
   15328:	bl	1714 <fseek@plt>
   1532c:	ldr	r1, [r9]
   15330:	ldr	r3, [sp, #28]
   15334:	mla	fp, r1, r3, fp
   15338:	add	r7, r7, fp
   1533c:	add	r8, r8, #1
   15340:	add	r9, r9, #4
   15344:	b	152ac <ReadDataSlabN+0x20f0>
   15348:	ldr	r1, [r6, r3, lsl #2]
   1534c:	mov	lr, r2
   15350:	sub	r1, r1, #1
   15354:	str	r1, [r8, r3, lsl #2]
   15358:	ldr	r1, [r0], #4
   1535c:	str	r1, [r2, #4]
   15360:	mov	r1, r0
   15364:	ldr	ip, [sp, #196]	; 0xc4
   15368:	cmp	ip, r1
   1536c:	bne	1539c <ReadDataSlabN+0x21e0>
   15370:	ldr	ip, [sp, #24]
   15374:	ldr	r1, [r5, r3, lsl #2]
   15378:	add	r2, r2, #4
   1537c:	mul	r1, r1, ip
   15380:	ldr	ip, [sp, #200]	; 0xc8
   15384:	str	r1, [sp, #24]
   15388:	ldr	r1, [lr]
   1538c:	ldr	ip, [ip, r3, lsl #2]
   15390:	add	r3, r3, #1
   15394:	mla	r7, ip, r1, r7
   15398:	b	151dc <ReadDataSlabN+0x2020>
   1539c:	ldr	sl, [r8, r3, lsl #2]
   153a0:	mov	r9, r1
   153a4:	ldr	ip, [r1, #-4]!
   153a8:	mul	ip, ip, sl
   153ac:	ldr	sl, [r2, #4]
   153b0:	str	ip, [r8, r3, lsl #2]
   153b4:	ldr	ip, [r9]
   153b8:	mul	ip, ip, sl
   153bc:	str	ip, [r2, #4]
   153c0:	b	15364 <ReadDataSlabN+0x21a8>
   153c4:	ldr	r1, [r8]
   153c8:	cmp	r1, #0
   153cc:	beq	1554c <ReadDataSlabN+0x2390>
   153d0:	ldr	r3, [sp, #4]
   153d4:	mov	r2, r9
   153d8:	add	r3, r3, r6, lsl #2
   153dc:	ldr	r0, [r4]
   153e0:	ldr	sl, [r3, #-4]
   153e4:	ldr	r3, [sp]
   153e8:	mul	r1, sl, r1
   153ec:	mul	r1, r3, r1
   153f0:	bl	1714 <fseek@plt>
   153f4:	ldr	r3, [r8]
   153f8:	mla	r7, r3, sl, r7
   153fc:	b	1554c <ReadDataSlabN+0x2390>
   15400:	add	r3, sp, #152	; 0x98
   15404:	add	r6, r3, r6, lsl #2
   15408:	ldr	r3, [sp]
   1540c:	ldr	r1, [r6, #-120]	; 0xffffff88
   15410:	mov	r2, r9
   15414:	add	r7, r7, r1
   15418:	ldr	r0, [r4]
   1541c:	mul	r1, r3, r1
   15420:	bl	1714 <fseek@plt>
   15424:	ldr	r3, [r5]
   15428:	add	fp, fp, r3
   1542c:	ldr	r3, [sp, #24]
   15430:	cmp	fp, r3
   15434:	bge	1365c <ReadDataSlabN+0x4a0>
   15438:	ldr	r3, [sp, #200]	; 0xc8
   1543c:	ldr	r1, [r3]
   15440:	cmp	r1, #0
   15444:	beq	15468 <ReadDataSlabN+0x22ac>
   15448:	ldr	r3, [sp]
   1544c:	mov	r2, r9
   15450:	ldr	r0, [r4]
   15454:	mul	r1, r3, r1
   15458:	bl	1714 <fseek@plt>
   1545c:	ldr	r3, [sp, #200]	; 0xc8
   15460:	ldr	r3, [r3]
   15464:	add	r7, r7, r3
   15468:	ldr	r1, [sp, #12]
   1546c:	ldr	r3, [r5]
   15470:	ldr	r2, [sp, #16]
   15474:	add	r1, r1, fp, lsl #1
   15478:	mov	r0, r4
   1547c:	bl	12138 <ReadUInt16Data>
   15480:	ldr	r3, [sp, #196]	; 0xc4
   15484:	ldr	r8, [sp, #200]	; 0xc8
   15488:	ldr	r0, [r4]
   1548c:	ldr	r3, [r3]
   15490:	ldr	r1, [r8], #4
   15494:	sub	r2, r3, r1
   15498:	add	r7, r2, r7
   1549c:	ldr	r2, [r5]
   154a0:	sub	r3, r3, r2
   154a4:	sub	r1, r3, r1
   154a8:	ldr	r3, [sp]
   154ac:	mov	r2, r9
   154b0:	mul	r1, r3, r1
   154b4:	bl	1714 <fseek@plt>
   154b8:	ldr	r6, [sp, #20]
   154bc:	ldr	r3, [sp, #192]	; 0xc0
   154c0:	cmp	r6, r3
   154c4:	bge	15424 <ReadDataSlabN+0x2268>
   154c8:	ldr	r3, [sp, #8]
   154cc:	ldr	r1, [r5, r6, lsl #2]
   154d0:	ldr	r0, [r3, r6, lsl #2]
   154d4:	add	r0, r0, #1
   154d8:	str	r0, [r3, r6, lsl #2]
   154dc:	bl	3fd18 <__aeabi_idivmod>
   154e0:	cmp	r1, #0
   154e4:	bne	15400 <ReadDataSlabN+0x2244>
   154e8:	ldr	r3, [sp, #8]
   154ec:	mov	r0, r7
   154f0:	str	r1, [r3, r6, lsl #2]
   154f4:	ldr	r3, [sp, #4]
   154f8:	ldr	sl, [r3, r6, lsl #2]
   154fc:	mov	r1, sl
   15500:	bl	3fd18 <__aeabi_idivmod>
   15504:	cmp	r1, #0
   15508:	beq	153c4 <ReadDataSlabN+0x2208>
   1550c:	ldr	r3, [sp, #4]
   15510:	sub	sl, sl, r1
   15514:	add	r3, r3, r6, lsl #2
   15518:	ldr	r1, [r8]
   1551c:	ldr	r3, [r3, #-4]
   15520:	mov	r2, r9
   15524:	str	r3, [sp, #28]
   15528:	mla	r1, r1, r3, sl
   1552c:	ldr	r3, [sp]
   15530:	ldr	r0, [r4]
   15534:	mul	r1, r3, r1
   15538:	bl	1714 <fseek@plt>
   1553c:	ldr	r1, [r8]
   15540:	ldr	r3, [sp, #28]
   15544:	mla	sl, r1, r3, sl
   15548:	add	r7, r7, sl
   1554c:	add	r6, r6, #1
   15550:	add	r8, r8, #4
   15554:	b	154bc <ReadDataSlabN+0x2300>
   15558:	ldr	r3, [sp, #20]
   1555c:	ldr	r0, [sp, #12]
   15560:	add	r1, r3, r8
   15564:	ldr	r2, [sp, #16]
   15568:	add	r1, r0, r1, lsl #1
   1556c:	mov	r3, sl
   15570:	mov	r0, r4
   15574:	bl	12138 <ReadUInt16Data>
   15578:	ldr	r1, [r6]
   1557c:	ldr	r3, [sp]
   15580:	sub	r1, r1, #1
   15584:	mov	r2, sl
   15588:	mul	r1, r3, r1
   1558c:	ldr	r0, [r4]
   15590:	bl	1714 <fseek@plt>
   15594:	ldr	r3, [r6]
   15598:	add	r8, r8, #1
   1559c:	add	r7, r7, r3
   155a0:	b	15264 <ReadDataSlabN+0x20a8>
   155a4:	ldr	r1, [r9]
   155a8:	cmp	r1, #0
   155ac:	beq	1533c <ReadDataSlabN+0x2180>
   155b0:	ldr	r3, [sp, #4]
   155b4:	mov	r2, sl
   155b8:	add	r3, r3, r8, lsl #2
   155bc:	ldr	r0, [r4]
   155c0:	ldr	fp, [r3, #-4]
   155c4:	ldr	r3, [sp]
   155c8:	mul	r1, fp, r1
   155cc:	mul	r1, r3, r1
   155d0:	bl	1714 <fseek@plt>
   155d4:	ldr	r3, [r9]
   155d8:	mla	r7, r3, fp, r7
   155dc:	b	1533c <ReadDataSlabN+0x2180>
   155e0:	add	r3, sp, #152	; 0x98
   155e4:	add	r8, r3, r8, lsl #2
   155e8:	ldr	r3, [sp]
   155ec:	ldr	r1, [r8, #-120]	; 0xffffff88
   155f0:	mov	r2, sl
   155f4:	add	r7, r7, r1
   155f8:	ldr	r0, [r4]
   155fc:	mul	r1, r3, r1
   15600:	bl	1714 <fseek@plt>
   15604:	ldr	r2, [sp, #20]
   15608:	ldr	r3, [r5]
   1560c:	add	r3, r2, r3
   15610:	str	r3, [sp, #20]
   15614:	b	15220 <ReadDataSlabN+0x2064>
   15618:	ldr	r3, [r6]
   1561c:	ldr	r2, [sp, #4]
   15620:	sub	r3, r3, #1
   15624:	str	r3, [sp, #32]
   15628:	ldr	r3, [sp, #196]	; 0xc4
   1562c:	ldr	r0, [sp, #196]	; 0xc4
   15630:	mov	r7, #0
   15634:	ldr	r3, [r3]
   15638:	str	r3, [sp, #112]	; 0x70
   1563c:	ldr	r3, [r5]
   15640:	str	r3, [sp, #24]
   15644:	mov	r3, #1
   15648:	ldr	r1, [sp, #192]	; 0xc0
   1564c:	cmp	r3, r1
   15650:	blt	157b4 <ReadDataSlabN+0x25f8>
   15654:	ldr	r3, [sp]
   15658:	mov	r2, #1
   1565c:	ldr	r0, [r4]
   15660:	mul	r1, r3, r7
   15664:	bl	1714 <fseek@plt>
   15668:	ldr	r3, [r6]
   1566c:	cmp	r3, #1
   15670:	str	r3, [sp, #20]
   15674:	movne	r3, #0
   15678:	strne	r3, [sp, #20]
   1567c:	movne	sl, #1
   15680:	moveq	fp, #0
   15684:	ldreq	r9, [sp, #20]
   15688:	beq	15898 <ReadDataSlabN+0x26dc>
   1568c:	ldr	r3, [sp, #20]
   15690:	ldr	r2, [sp, #24]
   15694:	cmp	r3, r2
   15698:	bge	1365c <ReadDataSlabN+0x4a0>
   1569c:	ldr	r3, [sp, #200]	; 0xc8
   156a0:	ldr	r1, [r3]
   156a4:	cmp	r1, #0
   156a8:	beq	156cc <ReadDataSlabN+0x2510>
   156ac:	ldr	r3, [sp]
   156b0:	mov	r2, sl
   156b4:	ldr	r0, [r4]
   156b8:	mul	r1, r3, r1
   156bc:	bl	1714 <fseek@plt>
   156c0:	ldr	r3, [sp, #200]	; 0xc8
   156c4:	ldr	r3, [r3]
   156c8:	add	r7, r7, r3
   156cc:	mov	r8, #0
   156d0:	ldr	r3, [r5]
   156d4:	cmp	r8, r3
   156d8:	blt	159c4 <ReadDataSlabN+0x2808>
   156dc:	ldr	r1, [r6]
   156e0:	ldr	r2, [sp, #196]	; 0xc4
   156e4:	ldr	r9, [sp, #200]	; 0xc8
   156e8:	mul	r3, r1, r3
   156ec:	ldr	r1, [r2]
   156f0:	ldr	r0, [r4]
   156f4:	sub	r1, r1, r3
   156f8:	ldr	r3, [r9], #4
   156fc:	mov	r2, sl
   15700:	sub	r1, r1, r3
   15704:	ldr	r3, [sp]
   15708:	add	r7, r7, r1
   1570c:	mov	r8, #1
   15710:	mul	r1, r1, r3
   15714:	bl	1714 <fseek@plt>
   15718:	ldr	r3, [sp, #192]	; 0xc0
   1571c:	cmp	r8, r3
   15720:	bge	15a70 <ReadDataSlabN+0x28b4>
   15724:	ldr	r3, [sp, #8]
   15728:	ldr	r1, [r5, r8, lsl #2]
   1572c:	ldr	r0, [r3, r8, lsl #2]
   15730:	add	r0, r0, #1
   15734:	str	r0, [r3, r8, lsl #2]
   15738:	bl	3fd18 <__aeabi_idivmod>
   1573c:	cmp	r1, #0
   15740:	bne	15a4c <ReadDataSlabN+0x2890>
   15744:	ldr	r3, [sp, #8]
   15748:	mov	r0, r7
   1574c:	str	r1, [r3, r8, lsl #2]
   15750:	ldr	r3, [sp, #4]
   15754:	ldr	fp, [r3, r8, lsl #2]
   15758:	mov	r1, fp
   1575c:	bl	3fd18 <__aeabi_idivmod>
   15760:	cmp	r1, #0
   15764:	beq	15a10 <ReadDataSlabN+0x2854>
   15768:	ldr	r3, [sp, #4]
   1576c:	sub	fp, fp, r1
   15770:	add	r3, r3, r8, lsl #2
   15774:	ldr	r1, [r9]
   15778:	ldr	r3, [r3, #-4]
   1577c:	mov	r2, sl
   15780:	str	r3, [sp, #28]
   15784:	mla	r1, r1, r3, fp
   15788:	ldr	r3, [sp]
   1578c:	ldr	r0, [r4]
   15790:	mul	r1, r3, r1
   15794:	bl	1714 <fseek@plt>
   15798:	ldr	r1, [r9]
   1579c:	ldr	r3, [sp, #28]
   157a0:	mla	fp, r1, r3, fp
   157a4:	add	r7, r7, fp
   157a8:	add	r8, r8, #1
   157ac:	add	r9, r9, #4
   157b0:	b	15718 <ReadDataSlabN+0x255c>
   157b4:	ldr	r1, [r6, r3, lsl #2]
   157b8:	mov	lr, r2
   157bc:	sub	r1, r1, #1
   157c0:	str	r1, [r8, r3, lsl #2]
   157c4:	ldr	r1, [r0], #4
   157c8:	str	r1, [r2, #4]
   157cc:	mov	r1, r0
   157d0:	ldr	ip, [sp, #196]	; 0xc4
   157d4:	cmp	ip, r1
   157d8:	bne	15808 <ReadDataSlabN+0x264c>
   157dc:	ldr	ip, [sp, #24]
   157e0:	ldr	r1, [r5, r3, lsl #2]
   157e4:	add	r2, r2, #4
   157e8:	mul	r1, r1, ip
   157ec:	ldr	ip, [sp, #200]	; 0xc8
   157f0:	str	r1, [sp, #24]
   157f4:	ldr	r1, [lr]
   157f8:	ldr	ip, [ip, r3, lsl #2]
   157fc:	add	r3, r3, #1
   15800:	mla	r7, ip, r1, r7
   15804:	b	15648 <ReadDataSlabN+0x248c>
   15808:	ldr	sl, [r8, r3, lsl #2]
   1580c:	mov	r9, r1
   15810:	ldr	ip, [r1, #-4]!
   15814:	mul	ip, ip, sl
   15818:	ldr	sl, [r2, #4]
   1581c:	str	ip, [r8, r3, lsl #2]
   15820:	ldr	ip, [r9]
   15824:	mul	ip, ip, sl
   15828:	str	ip, [r2, #4]
   1582c:	b	157d0 <ReadDataSlabN+0x2614>
   15830:	ldr	r1, [r8]
   15834:	cmp	r1, #0
   15838:	beq	159b8 <ReadDataSlabN+0x27fc>
   1583c:	ldr	r3, [sp, #4]
   15840:	mov	r2, r9
   15844:	add	r3, r3, r6, lsl #2
   15848:	ldr	r0, [r4]
   1584c:	ldr	sl, [r3, #-4]
   15850:	ldr	r3, [sp]
   15854:	mul	r1, sl, r1
   15858:	mul	r1, r3, r1
   1585c:	bl	1714 <fseek@plt>
   15860:	ldr	r3, [r8]
   15864:	mla	r7, r3, sl, r7
   15868:	b	159b8 <ReadDataSlabN+0x27fc>
   1586c:	add	r3, sp, #152	; 0x98
   15870:	add	r6, r3, r6, lsl #2
   15874:	ldr	r3, [sp]
   15878:	ldr	r1, [r6, #-120]	; 0xffffff88
   1587c:	mov	r2, r9
   15880:	add	r7, r7, r1
   15884:	ldr	r0, [r4]
   15888:	mul	r1, r3, r1
   1588c:	bl	1714 <fseek@plt>
   15890:	ldr	r3, [r5]
   15894:	add	fp, fp, r3
   15898:	ldr	r3, [sp, #24]
   1589c:	cmp	fp, r3
   158a0:	bge	1365c <ReadDataSlabN+0x4a0>
   158a4:	ldr	r3, [sp, #200]	; 0xc8
   158a8:	ldr	r1, [r3]
   158ac:	cmp	r1, #0
   158b0:	beq	158d4 <ReadDataSlabN+0x2718>
   158b4:	ldr	r3, [sp]
   158b8:	mov	r2, r9
   158bc:	ldr	r0, [r4]
   158c0:	mul	r1, r3, r1
   158c4:	bl	1714 <fseek@plt>
   158c8:	ldr	r3, [sp, #200]	; 0xc8
   158cc:	ldr	r3, [r3]
   158d0:	add	r7, r7, r3
   158d4:	ldr	r1, [sp, #12]
   158d8:	ldr	r3, [r5]
   158dc:	ldr	r2, [sp, #16]
   158e0:	add	r1, r1, fp
   158e4:	mov	r0, r4
   158e8:	bl	12640 <ReadInt8Data>
   158ec:	ldr	r3, [sp, #196]	; 0xc4
   158f0:	ldr	r8, [sp, #200]	; 0xc8
   158f4:	ldr	r0, [r4]
   158f8:	ldr	r3, [r3]
   158fc:	ldr	r1, [r8], #4
   15900:	sub	r2, r3, r1
   15904:	add	r7, r2, r7
   15908:	ldr	r2, [r5]
   1590c:	sub	r3, r3, r2
   15910:	sub	r1, r3, r1
   15914:	ldr	r3, [sp]
   15918:	mov	r2, r9
   1591c:	mul	r1, r3, r1
   15920:	bl	1714 <fseek@plt>
   15924:	ldr	r6, [sp, #20]
   15928:	ldr	r3, [sp, #192]	; 0xc0
   1592c:	cmp	r6, r3
   15930:	bge	15890 <ReadDataSlabN+0x26d4>
   15934:	ldr	r3, [sp, #8]
   15938:	ldr	r1, [r5, r6, lsl #2]
   1593c:	ldr	r0, [r3, r6, lsl #2]
   15940:	add	r0, r0, #1
   15944:	str	r0, [r3, r6, lsl #2]
   15948:	bl	3fd18 <__aeabi_idivmod>
   1594c:	cmp	r1, #0
   15950:	bne	1586c <ReadDataSlabN+0x26b0>
   15954:	ldr	r3, [sp, #8]
   15958:	mov	r0, r7
   1595c:	str	r1, [r3, r6, lsl #2]
   15960:	ldr	r3, [sp, #4]
   15964:	ldr	sl, [r3, r6, lsl #2]
   15968:	mov	r1, sl
   1596c:	bl	3fd18 <__aeabi_idivmod>
   15970:	cmp	r1, #0
   15974:	beq	15830 <ReadDataSlabN+0x2674>
   15978:	ldr	r3, [sp, #4]
   1597c:	sub	sl, sl, r1
   15980:	add	r3, r3, r6, lsl #2
   15984:	ldr	r1, [r8]
   15988:	ldr	r3, [r3, #-4]
   1598c:	mov	r2, r9
   15990:	str	r3, [sp, #28]
   15994:	mla	r1, r1, r3, sl
   15998:	ldr	r3, [sp]
   1599c:	ldr	r0, [r4]
   159a0:	mul	r1, r3, r1
   159a4:	bl	1714 <fseek@plt>
   159a8:	ldr	r1, [r8]
   159ac:	ldr	r3, [sp, #28]
   159b0:	mla	sl, r1, r3, sl
   159b4:	add	r7, r7, sl
   159b8:	add	r6, r6, #1
   159bc:	add	r8, r8, #4
   159c0:	b	15928 <ReadDataSlabN+0x276c>
   159c4:	ldr	r3, [sp, #20]
   159c8:	ldr	r0, [sp, #12]
   159cc:	add	r1, r3, r8
   159d0:	add	r1, r0, r1
   159d4:	mov	r3, sl
   159d8:	ldr	r2, [sp, #16]
   159dc:	mov	r0, r4
   159e0:	bl	12640 <ReadInt8Data>
   159e4:	ldr	r1, [r6]
   159e8:	ldr	r3, [sp]
   159ec:	sub	r1, r1, #1
   159f0:	mov	r2, sl
   159f4:	mul	r1, r3, r1
   159f8:	ldr	r0, [r4]
   159fc:	bl	1714 <fseek@plt>
   15a00:	ldr	r3, [r6]
   15a04:	add	r8, r8, #1
   15a08:	add	r7, r7, r3
   15a0c:	b	156d0 <ReadDataSlabN+0x2514>
   15a10:	ldr	r1, [r9]
   15a14:	cmp	r1, #0
   15a18:	beq	157a8 <ReadDataSlabN+0x25ec>
   15a1c:	ldr	r3, [sp, #4]
   15a20:	mov	r2, sl
   15a24:	add	r3, r3, r8, lsl #2
   15a28:	ldr	r0, [r4]
   15a2c:	ldr	fp, [r3, #-4]
   15a30:	ldr	r3, [sp]
   15a34:	mul	r1, fp, r1
   15a38:	mul	r1, r3, r1
   15a3c:	bl	1714 <fseek@plt>
   15a40:	ldr	r3, [r9]
   15a44:	mla	r7, r3, fp, r7
   15a48:	b	157a8 <ReadDataSlabN+0x25ec>
   15a4c:	add	r3, sp, #152	; 0x98
   15a50:	add	r8, r3, r8, lsl #2
   15a54:	ldr	r3, [sp]
   15a58:	ldr	r1, [r8, #-120]	; 0xffffff88
   15a5c:	mov	r2, sl
   15a60:	add	r7, r7, r1
   15a64:	ldr	r0, [r4]
   15a68:	mul	r1, r3, r1
   15a6c:	bl	1714 <fseek@plt>
   15a70:	ldr	r2, [sp, #20]
   15a74:	ldr	r3, [r5]
   15a78:	add	r3, r2, r3
   15a7c:	str	r3, [sp, #20]
   15a80:	b	1568c <ReadDataSlabN+0x24d0>
   15a84:	ldr	r3, [r6]
   15a88:	ldr	r2, [sp, #4]
   15a8c:	sub	r3, r3, #1
   15a90:	str	r3, [sp, #32]
   15a94:	ldr	r3, [sp, #196]	; 0xc4
   15a98:	ldr	r0, [sp, #196]	; 0xc4
   15a9c:	mov	r7, #0
   15aa0:	ldr	r3, [r3]
   15aa4:	str	r3, [sp, #112]	; 0x70
   15aa8:	ldr	r3, [r5]
   15aac:	str	r3, [sp, #24]
   15ab0:	mov	r3, #1
   15ab4:	ldr	r1, [sp, #192]	; 0xc0
   15ab8:	cmp	r3, r1
   15abc:	blt	15c20 <ReadDataSlabN+0x2a64>
   15ac0:	ldr	r3, [sp]
   15ac4:	mov	r2, #1
   15ac8:	ldr	r0, [r4]
   15acc:	mul	r1, r3, r7
   15ad0:	bl	1714 <fseek@plt>
   15ad4:	ldr	r3, [r6]
   15ad8:	cmp	r3, #1
   15adc:	str	r3, [sp, #20]
   15ae0:	movne	r3, #0
   15ae4:	strne	r3, [sp, #20]
   15ae8:	movne	sl, #1
   15aec:	moveq	fp, #0
   15af0:	ldreq	r9, [sp, #20]
   15af4:	beq	15d04 <ReadDataSlabN+0x2b48>
   15af8:	ldr	r3, [sp, #20]
   15afc:	ldr	r2, [sp, #24]
   15b00:	cmp	r3, r2
   15b04:	bge	1365c <ReadDataSlabN+0x4a0>
   15b08:	ldr	r3, [sp, #200]	; 0xc8
   15b0c:	ldr	r1, [r3]
   15b10:	cmp	r1, #0
   15b14:	beq	15b38 <ReadDataSlabN+0x297c>
   15b18:	ldr	r3, [sp]
   15b1c:	mov	r2, sl
   15b20:	ldr	r0, [r4]
   15b24:	mul	r1, r3, r1
   15b28:	bl	1714 <fseek@plt>
   15b2c:	ldr	r3, [sp, #200]	; 0xc8
   15b30:	ldr	r3, [r3]
   15b34:	add	r7, r7, r3
   15b38:	mov	r8, #0
   15b3c:	ldr	r3, [r5]
   15b40:	cmp	r8, r3
   15b44:	blt	15e30 <ReadDataSlabN+0x2c74>
   15b48:	ldr	r1, [r6]
   15b4c:	ldr	r2, [sp, #196]	; 0xc4
   15b50:	ldr	r9, [sp, #200]	; 0xc8
   15b54:	mul	r3, r1, r3
   15b58:	ldr	r1, [r2]
   15b5c:	ldr	r0, [r4]
   15b60:	sub	r1, r1, r3
   15b64:	ldr	r3, [r9], #4
   15b68:	mov	r2, sl
   15b6c:	sub	r1, r1, r3
   15b70:	ldr	r3, [sp]
   15b74:	add	r7, r7, r1
   15b78:	mov	r8, #1
   15b7c:	mul	r1, r1, r3
   15b80:	bl	1714 <fseek@plt>
   15b84:	ldr	r3, [sp, #192]	; 0xc0
   15b88:	cmp	r8, r3
   15b8c:	bge	15edc <ReadDataSlabN+0x2d20>
   15b90:	ldr	r3, [sp, #8]
   15b94:	ldr	r1, [r5, r8, lsl #2]
   15b98:	ldr	r0, [r3, r8, lsl #2]
   15b9c:	add	r0, r0, #1
   15ba0:	str	r0, [r3, r8, lsl #2]
   15ba4:	bl	3fd18 <__aeabi_idivmod>
   15ba8:	cmp	r1, #0
   15bac:	bne	15eb8 <ReadDataSlabN+0x2cfc>
   15bb0:	ldr	r3, [sp, #8]
   15bb4:	mov	r0, r7
   15bb8:	str	r1, [r3, r8, lsl #2]
   15bbc:	ldr	r3, [sp, #4]
   15bc0:	ldr	fp, [r3, r8, lsl #2]
   15bc4:	mov	r1, fp
   15bc8:	bl	3fd18 <__aeabi_idivmod>
   15bcc:	cmp	r1, #0
   15bd0:	beq	15e7c <ReadDataSlabN+0x2cc0>
   15bd4:	ldr	r3, [sp, #4]
   15bd8:	sub	fp, fp, r1
   15bdc:	add	r3, r3, r8, lsl #2
   15be0:	ldr	r1, [r9]
   15be4:	ldr	r3, [r3, #-4]
   15be8:	mov	r2, sl
   15bec:	str	r3, [sp, #28]
   15bf0:	mla	r1, r1, r3, fp
   15bf4:	ldr	r3, [sp]
   15bf8:	ldr	r0, [r4]
   15bfc:	mul	r1, r3, r1
   15c00:	bl	1714 <fseek@plt>
   15c04:	ldr	r1, [r9]
   15c08:	ldr	r3, [sp, #28]
   15c0c:	mla	fp, r1, r3, fp
   15c10:	add	r7, r7, fp
   15c14:	add	r8, r8, #1
   15c18:	add	r9, r9, #4
   15c1c:	b	15b84 <ReadDataSlabN+0x29c8>
   15c20:	ldr	r1, [r6, r3, lsl #2]
   15c24:	mov	lr, r2
   15c28:	sub	r1, r1, #1
   15c2c:	str	r1, [r8, r3, lsl #2]
   15c30:	ldr	r1, [r0], #4
   15c34:	str	r1, [r2, #4]
   15c38:	mov	r1, r0
   15c3c:	ldr	ip, [sp, #196]	; 0xc4
   15c40:	cmp	ip, r1
   15c44:	bne	15c74 <ReadDataSlabN+0x2ab8>
   15c48:	ldr	ip, [sp, #24]
   15c4c:	ldr	r1, [r5, r3, lsl #2]
   15c50:	add	r2, r2, #4
   15c54:	mul	r1, r1, ip
   15c58:	ldr	ip, [sp, #200]	; 0xc8
   15c5c:	str	r1, [sp, #24]
   15c60:	ldr	r1, [lr]
   15c64:	ldr	ip, [ip, r3, lsl #2]
   15c68:	add	r3, r3, #1
   15c6c:	mla	r7, ip, r1, r7
   15c70:	b	15ab4 <ReadDataSlabN+0x28f8>
   15c74:	ldr	sl, [r8, r3, lsl #2]
   15c78:	mov	r9, r1
   15c7c:	ldr	ip, [r1, #-4]!
   15c80:	mul	ip, ip, sl
   15c84:	ldr	sl, [r2, #4]
   15c88:	str	ip, [r8, r3, lsl #2]
   15c8c:	ldr	ip, [r9]
   15c90:	mul	ip, ip, sl
   15c94:	str	ip, [r2, #4]
   15c98:	b	15c3c <ReadDataSlabN+0x2a80>
   15c9c:	ldr	r1, [r8]
   15ca0:	cmp	r1, #0
   15ca4:	beq	15e24 <ReadDataSlabN+0x2c68>
   15ca8:	ldr	r3, [sp, #4]
   15cac:	mov	r2, r9
   15cb0:	add	r3, r3, r6, lsl #2
   15cb4:	ldr	r0, [r4]
   15cb8:	ldr	sl, [r3, #-4]
   15cbc:	ldr	r3, [sp]
   15cc0:	mul	r1, sl, r1
   15cc4:	mul	r1, r3, r1
   15cc8:	bl	1714 <fseek@plt>
   15ccc:	ldr	r3, [r8]
   15cd0:	mla	r7, r3, sl, r7
   15cd4:	b	15e24 <ReadDataSlabN+0x2c68>
   15cd8:	add	r3, sp, #152	; 0x98
   15cdc:	add	r6, r3, r6, lsl #2
   15ce0:	ldr	r3, [sp]
   15ce4:	ldr	r1, [r6, #-120]	; 0xffffff88
   15ce8:	mov	r2, r9
   15cec:	add	r7, r7, r1
   15cf0:	ldr	r0, [r4]
   15cf4:	mul	r1, r3, r1
   15cf8:	bl	1714 <fseek@plt>
   15cfc:	ldr	r3, [r5]
   15d00:	add	fp, fp, r3
   15d04:	ldr	r3, [sp, #24]
   15d08:	cmp	fp, r3
   15d0c:	bge	1365c <ReadDataSlabN+0x4a0>
   15d10:	ldr	r3, [sp, #200]	; 0xc8
   15d14:	ldr	r1, [r3]
   15d18:	cmp	r1, #0
   15d1c:	beq	15d40 <ReadDataSlabN+0x2b84>
   15d20:	ldr	r3, [sp]
   15d24:	mov	r2, r9
   15d28:	ldr	r0, [r4]
   15d2c:	mul	r1, r3, r1
   15d30:	bl	1714 <fseek@plt>
   15d34:	ldr	r3, [sp, #200]	; 0xc8
   15d38:	ldr	r3, [r3]
   15d3c:	add	r7, r7, r3
   15d40:	ldr	r1, [sp, #12]
   15d44:	ldr	r3, [r5]
   15d48:	ldr	r2, [sp, #16]
   15d4c:	add	r1, r1, fp
   15d50:	mov	r0, r4
   15d54:	bl	12b00 <ReadUInt8Data>
   15d58:	ldr	r3, [sp, #196]	; 0xc4
   15d5c:	ldr	r8, [sp, #200]	; 0xc8
   15d60:	ldr	r0, [r4]
   15d64:	ldr	r3, [r3]
   15d68:	ldr	r1, [r8], #4
   15d6c:	sub	r2, r3, r1
   15d70:	add	r7, r2, r7
   15d74:	ldr	r2, [r5]
   15d78:	sub	r3, r3, r2
   15d7c:	sub	r1, r3, r1
   15d80:	ldr	r3, [sp]
   15d84:	mov	r2, r9
   15d88:	mul	r1, r3, r1
   15d8c:	bl	1714 <fseek@plt>
   15d90:	ldr	r6, [sp, #20]
   15d94:	ldr	r3, [sp, #192]	; 0xc0
   15d98:	cmp	r6, r3
   15d9c:	bge	15cfc <ReadDataSlabN+0x2b40>
   15da0:	ldr	r3, [sp, #8]
   15da4:	ldr	r1, [r5, r6, lsl #2]
   15da8:	ldr	r0, [r3, r6, lsl #2]
   15dac:	add	r0, r0, #1
   15db0:	str	r0, [r3, r6, lsl #2]
   15db4:	bl	3fd18 <__aeabi_idivmod>
   15db8:	cmp	r1, #0
   15dbc:	bne	15cd8 <ReadDataSlabN+0x2b1c>
   15dc0:	ldr	r3, [sp, #8]
   15dc4:	mov	r0, r7
   15dc8:	str	r1, [r3, r6, lsl #2]
   15dcc:	ldr	r3, [sp, #4]
   15dd0:	ldr	sl, [r3, r6, lsl #2]
   15dd4:	mov	r1, sl
   15dd8:	bl	3fd18 <__aeabi_idivmod>
   15ddc:	cmp	r1, #0
   15de0:	beq	15c9c <ReadDataSlabN+0x2ae0>
   15de4:	ldr	r3, [sp, #4]
   15de8:	sub	sl, sl, r1
   15dec:	add	r3, r3, r6, lsl #2
   15df0:	ldr	r1, [r8]
   15df4:	ldr	r3, [r3, #-4]
   15df8:	mov	r2, r9
   15dfc:	str	r3, [sp, #28]
   15e00:	mla	r1, r1, r3, sl
   15e04:	ldr	r3, [sp]
   15e08:	ldr	r0, [r4]
   15e0c:	mul	r1, r3, r1
   15e10:	bl	1714 <fseek@plt>
   15e14:	ldr	r1, [r8]
   15e18:	ldr	r3, [sp, #28]
   15e1c:	mla	sl, r1, r3, sl
   15e20:	add	r7, r7, sl
   15e24:	add	r6, r6, #1
   15e28:	add	r8, r8, #4
   15e2c:	b	15d94 <ReadDataSlabN+0x2bd8>
   15e30:	ldr	r3, [sp, #20]
   15e34:	ldr	r0, [sp, #12]
   15e38:	add	r1, r3, r8
   15e3c:	add	r1, r0, r1
   15e40:	mov	r3, sl
   15e44:	ldr	r2, [sp, #16]
   15e48:	mov	r0, r4
   15e4c:	bl	12b00 <ReadUInt8Data>
   15e50:	ldr	r1, [r6]
   15e54:	ldr	r3, [sp]
   15e58:	sub	r1, r1, #1
   15e5c:	mov	r2, sl
   15e60:	mul	r1, r3, r1
   15e64:	ldr	r0, [r4]
   15e68:	bl	1714 <fseek@plt>
   15e6c:	ldr	r3, [r6]
   15e70:	add	r8, r8, #1
   15e74:	add	r7, r7, r3
   15e78:	b	15b3c <ReadDataSlabN+0x2980>
   15e7c:	ldr	r1, [r9]
   15e80:	cmp	r1, #0
   15e84:	beq	15c14 <ReadDataSlabN+0x2a58>
   15e88:	ldr	r3, [sp, #4]
   15e8c:	mov	r2, sl
   15e90:	add	r3, r3, r8, lsl #2
   15e94:	ldr	r0, [r4]
   15e98:	ldr	fp, [r3, #-4]
   15e9c:	ldr	r3, [sp]
   15ea0:	mul	r1, fp, r1
   15ea4:	mul	r1, r3, r1
   15ea8:	bl	1714 <fseek@plt>
   15eac:	ldr	r3, [r9]
   15eb0:	mla	r7, r3, fp, r7
   15eb4:	b	15c14 <ReadDataSlabN+0x2a58>
   15eb8:	add	r3, sp, #152	; 0x98
   15ebc:	add	r8, r3, r8, lsl #2
   15ec0:	ldr	r3, [sp]
   15ec4:	ldr	r1, [r8, #-120]	; 0xffffff88
   15ec8:	mov	r2, sl
   15ecc:	add	r7, r7, r1
   15ed0:	ldr	r0, [r4]
   15ed4:	mul	r1, r3, r1
   15ed8:	bl	1714 <fseek@plt>
   15edc:	ldr	r2, [sp, #20]
   15ee0:	ldr	r3, [r5]
   15ee4:	add	r3, r2, r3
   15ee8:	str	r3, [sp, #20]
   15eec:	b	15af8 <ReadDataSlabN+0x293c>
   15ef0:	mvn	r0, #0
   15ef4:	add	sp, sp, #156	; 0x9c
   15ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015efc <ReadCompressedDataSlabN>:
   15efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f00:	sub	sp, sp, #220	; 0xdc
   15f04:	add	r8, sp, #40	; 0x28
   15f08:	mov	r4, r0
   15f0c:	str	r2, [sp, #20]
   15f10:	mov	r9, r1
   15f14:	mov	r2, #40	; 0x28
   15f18:	mov	r1, #0
   15f1c:	mov	r0, r8
   15f20:	mov	r7, r3
   15f24:	ldr	sl, [sp, #256]	; 0x100
   15f28:	ldr	r6, [sp, #272]	; 0x110
   15f2c:	ldr	r5, [sp, #276]	; 0x114
   15f30:	bl	166c <memset@plt>
   15f34:	add	r3, sp, #80	; 0x50
   15f38:	mov	r2, #40	; 0x28
   15f3c:	mov	r1, #0
   15f40:	mov	r0, r3
   15f44:	str	r3, [sp, #16]
   15f48:	bl	166c <memset@plt>
   15f4c:	add	r3, sp, #120	; 0x78
   15f50:	mov	r0, r3
   15f54:	mov	r2, #40	; 0x28
   15f58:	mov	r1, #0
   15f5c:	add	fp, sp, #160	; 0xa0
   15f60:	str	r3, [sp, #12]
   15f64:	bl	166c <memset@plt>
   15f68:	mov	r2, #56	; 0x38
   15f6c:	mov	r1, #0
   15f70:	mov	r0, fp
   15f74:	bl	166c <memset@plt>
   15f78:	ldr	r3, [sp, #20]
   15f7c:	cmp	r3, #0
   15f80:	cmpne	r4, #0
   15f84:	beq	18efc <ReadCompressedDataSlabN+0x3000>
   15f88:	ldr	r3, [r4]
   15f8c:	cmp	r3, #0
   15f90:	beq	18efc <ReadCompressedDataSlabN+0x3000>
   15f94:	ldr	r3, [sp, #268]	; 0x10c
   15f98:	ldr	r2, [sp, #260]	; 0x104
   15f9c:	cmp	r6, #0
   15fa0:	cmpne	r3, #0
   15fa4:	moveq	r3, #1
   15fa8:	movne	r3, #0
   15fac:	cmp	r5, #0
   15fb0:	orreq	r3, r3, #1
   15fb4:	cmp	r2, #10
   15fb8:	orrgt	r3, r3, #1
   15fbc:	cmp	r3, #0
   15fc0:	bne	18efc <ReadCompressedDataSlabN+0x3000>
   15fc4:	mov	r1, r9
   15fc8:	mov	r0, fp
   15fcc:	sub	r7, r7, #6
   15fd0:	bl	1624 <inflateCopy@plt>
   15fd4:	cmp	r7, #9
   15fd8:	addls	pc, pc, r7, lsl #2
   15fdc:	b	16410 <ReadCompressedDataSlabN+0x514>
   15fe0:	b	16008 <ReadCompressedDataSlabN+0x10c>
   15fe4:	b	164cc <ReadCompressedDataSlabN+0x5d0>
   15fe8:	b	1859c <ReadCompressedDataSlabN+0x26a0>
   15fec:	b	18a4c <ReadCompressedDataSlabN+0x2b50>
   15ff0:	b	17c3c <ReadCompressedDataSlabN+0x1d40>
   15ff4:	b	180ec <ReadCompressedDataSlabN+0x21f0>
   15ff8:	b	172dc <ReadCompressedDataSlabN+0x13e0>
   15ffc:	b	1778c <ReadCompressedDataSlabN+0x1890>
   16000:	b	1697c <ReadCompressedDataSlabN+0xa80>
   16004:	b	16e2c <ReadCompressedDataSlabN+0xf30>
   16008:	ldr	r3, [r6]
   1600c:	ldr	r2, [sp, #12]
   16010:	sub	r3, r3, #1
   16014:	str	r3, [sp, #40]	; 0x28
   16018:	ldr	r3, [sp, #264]	; 0x108
   1601c:	ldr	r0, [sp, #264]	; 0x108
   16020:	mov	r7, #0
   16024:	ldr	r3, [r3]
   16028:	str	r3, [sp, #120]	; 0x78
   1602c:	ldr	r3, [r5]
   16030:	str	r3, [sp, #28]
   16034:	mov	r3, #1
   16038:	ldr	r1, [sp, #260]	; 0x104
   1603c:	cmp	r3, r1
   16040:	blt	161dc <ReadCompressedDataSlabN+0x2e0>
   16044:	mov	r3, r7
   16048:	mov	r2, sl
   1604c:	mov	r1, fp
   16050:	mov	r0, r4
   16054:	bl	243c <InflateSkipData>
   16058:	ldr	r3, [r6]
   1605c:	str	r3, [sp, #32]
   16060:	cmp	r3, #1
   16064:	mov	r3, #0
   16068:	str	r3, [sp, #24]
   1606c:	beq	16400 <ReadCompressedDataSlabN+0x504>
   16070:	ldr	r3, [sp, #24]
   16074:	ldr	r2, [sp, #28]
   16078:	cmp	r3, r2
   1607c:	bge	16410 <ReadCompressedDataSlabN+0x514>
   16080:	ldr	r3, [sp, #268]	; 0x10c
   16084:	ldr	r3, [r3]
   16088:	cmp	r3, #0
   1608c:	beq	160ac <ReadCompressedDataSlabN+0x1b0>
   16090:	mov	r2, sl
   16094:	mov	r1, fp
   16098:	mov	r0, r4
   1609c:	bl	243c <InflateSkipData>
   160a0:	ldr	r3, [sp, #268]	; 0x10c
   160a4:	ldr	r3, [r3]
   160a8:	add	r7, r7, r3
   160ac:	mov	r8, #0
   160b0:	ldr	r3, [r5]
   160b4:	ldr	r1, [sp, #20]
   160b8:	sub	r3, r3, #1
   160bc:	cmp	r8, r3
   160c0:	ldr	r3, [sp, #24]
   160c4:	mov	r0, r4
   160c8:	add	r2, r3, r8
   160cc:	mov	r3, #1
   160d0:	str	r3, [sp]
   160d4:	add	r2, r1, r2, lsl #3
   160d8:	mov	r3, sl
   160dc:	mov	r1, fp
   160e0:	blt	16424 <ReadCompressedDataSlabN+0x528>
   160e4:	bl	f2ec <ReadCompressedDoubleData>
   160e8:	ldr	r2, [r5]
   160ec:	ldr	r3, [r6]
   160f0:	sub	r2, r2, #1
   160f4:	ldr	r9, [sp, #268]	; 0x10c
   160f8:	mul	r2, r3, r2
   160fc:	ldr	r3, [sp, #264]	; 0x108
   16100:	mov	r1, fp
   16104:	mov	r0, r4
   16108:	ldr	r3, [r3]
   1610c:	mov	r8, #1
   16110:	sub	r3, r3, r2
   16114:	ldr	r2, [r9], #4
   16118:	sub	r3, r3, r2
   1611c:	add	r7, r7, r3
   16120:	mov	r2, sl
   16124:	sub	r3, r3, #1
   16128:	bl	243c <InflateSkipData>
   1612c:	ldr	r3, [sp, #260]	; 0x104
   16130:	cmp	r8, r3
   16134:	bge	164b8 <ReadCompressedDataSlabN+0x5bc>
   16138:	ldr	r3, [sp, #16]
   1613c:	ldr	r1, [r5, r8, lsl #2]
   16140:	ldr	r0, [r3, r8, lsl #2]
   16144:	add	r0, r0, #1
   16148:	str	r0, [r3, r8, lsl #2]
   1614c:	bl	3fd18 <__aeabi_idivmod>
   16150:	cmp	r1, #0
   16154:	bne	16490 <ReadCompressedDataSlabN+0x594>
   16158:	ldr	r3, [sp, #16]
   1615c:	mov	r0, r7
   16160:	str	r1, [r3, r8, lsl #2]
   16164:	ldr	r3, [sp, #12]
   16168:	ldr	r3, [r3, r8, lsl #2]
   1616c:	mov	r1, r3
   16170:	str	r3, [sp, #32]
   16174:	bl	3fd18 <__aeabi_idivmod>
   16178:	ldr	r3, [sp, #32]
   1617c:	cmp	r1, #0
   16180:	beq	16450 <ReadCompressedDataSlabN+0x554>
   16184:	sub	r3, r3, r1
   16188:	str	r3, [sp, #32]
   1618c:	ldr	r3, [sp, #12]
   16190:	ldr	r1, [sp, #32]
   16194:	add	r3, r3, r8, lsl #2
   16198:	mov	r0, r4
   1619c:	ldr	r3, [r3, #-4]
   161a0:	str	r3, [sp, #36]	; 0x24
   161a4:	ldr	r2, [sp, #36]	; 0x24
   161a8:	ldr	r3, [r9]
   161ac:	mla	r3, r3, r2, r1
   161b0:	mov	r2, sl
   161b4:	mov	r1, fp
   161b8:	bl	243c <InflateSkipData>
   161bc:	ldr	r1, [r9]
   161c0:	ldr	r3, [sp, #36]	; 0x24
   161c4:	ldr	r2, [sp, #32]
   161c8:	mla	r3, r1, r3, r2
   161cc:	add	r7, r7, r3
   161d0:	add	r8, r8, #1
   161d4:	add	r9, r9, #4
   161d8:	b	1612c <ReadCompressedDataSlabN+0x230>
   161dc:	ldr	r1, [r6, r3, lsl #2]
   161e0:	str	r2, [sp, #24]
   161e4:	sub	r1, r1, #1
   161e8:	str	r1, [r8, r3, lsl #2]
   161ec:	ldr	r1, [r0], #4
   161f0:	str	r1, [r2, #4]
   161f4:	mov	r1, r0
   161f8:	ldr	ip, [sp, #264]	; 0x108
   161fc:	cmp	ip, r1
   16200:	bne	16234 <ReadCompressedDataSlabN+0x338>
   16204:	ldr	ip, [sp, #28]
   16208:	ldr	r1, [r5, r3, lsl #2]
   1620c:	add	r2, r2, #4
   16210:	mul	r1, r1, ip
   16214:	ldr	ip, [sp, #268]	; 0x10c
   16218:	str	r1, [sp, #28]
   1621c:	ldr	r1, [sp, #24]
   16220:	ldr	ip, [ip, r3, lsl #2]
   16224:	add	r3, r3, #1
   16228:	ldr	r1, [r1]
   1622c:	mla	r7, ip, r1, r7
   16230:	b	16038 <ReadCompressedDataSlabN+0x13c>
   16234:	ldr	lr, [r8, r3, lsl #2]
   16238:	mov	r9, r1
   1623c:	ldr	ip, [r1, #-4]!
   16240:	mul	ip, ip, lr
   16244:	ldr	lr, [r2, #4]
   16248:	str	ip, [r8, r3, lsl #2]
   1624c:	ldr	ip, [r9]
   16250:	mul	ip, ip, lr
   16254:	str	ip, [r2, #4]
   16258:	b	161f8 <ReadCompressedDataSlabN+0x2fc>
   1625c:	ldr	r3, [sp, #268]	; 0x10c
   16260:	ldr	r3, [r3]
   16264:	cmp	r3, #0
   16268:	beq	16288 <ReadCompressedDataSlabN+0x38c>
   1626c:	mov	r2, sl
   16270:	mov	r1, fp
   16274:	mov	r0, r4
   16278:	bl	243c <InflateSkipData>
   1627c:	ldr	r3, [sp, #268]	; 0x10c
   16280:	ldr	r3, [r3]
   16284:	add	r7, r7, r3
   16288:	ldr	r1, [sp, #24]
   1628c:	ldr	r3, [r5]
   16290:	ldr	r2, [sp, #20]
   16294:	str	r3, [sp]
   16298:	add	r2, r2, r1, lsl #3
   1629c:	mov	r3, sl
   162a0:	mov	r1, fp
   162a4:	mov	r0, r4
   162a8:	bl	f2ec <ReadCompressedDoubleData>
   162ac:	ldr	r3, [sp, #264]	; 0x108
   162b0:	ldr	r2, [sp, #268]	; 0x10c
   162b4:	mov	r1, fp
   162b8:	ldr	r3, [r3]
   162bc:	ldr	r2, [r2]
   162c0:	mov	r0, r4
   162c4:	sub	r3, r3, r2
   162c8:	ldr	r2, [r5]
   162cc:	sub	r3, r3, r2
   162d0:	mov	r2, sl
   162d4:	bl	243c <InflateSkipData>
   162d8:	ldr	r3, [sp, #264]	; 0x108
   162dc:	ldr	r8, [sp, #268]	; 0x10c
   162e0:	ldr	r6, [sp, #32]
   162e4:	ldr	r3, [r3]
   162e8:	ldr	r2, [r8], #4
   162ec:	sub	r3, r3, r2
   162f0:	add	r7, r3, r7
   162f4:	ldr	r3, [sp, #260]	; 0x104
   162f8:	cmp	r6, r3
   162fc:	bge	163f0 <ReadCompressedDataSlabN+0x4f4>
   16300:	ldr	r3, [sp, #16]
   16304:	ldr	r1, [r5, r6, lsl #2]
   16308:	ldr	r0, [r3, r6, lsl #2]
   1630c:	add	r0, r0, #1
   16310:	str	r0, [r3, r6, lsl #2]
   16314:	bl	3fd18 <__aeabi_idivmod>
   16318:	cmp	r1, #0
   1631c:	bne	163c8 <ReadCompressedDataSlabN+0x4cc>
   16320:	ldr	r3, [sp, #16]
   16324:	mov	r0, r7
   16328:	str	r1, [r3, r6, lsl #2]
   1632c:	ldr	r3, [sp, #12]
   16330:	ldr	r9, [r3, r6, lsl #2]
   16334:	mov	r1, r9
   16338:	bl	3fd18 <__aeabi_idivmod>
   1633c:	cmp	r1, #0
   16340:	beq	16390 <ReadCompressedDataSlabN+0x494>
   16344:	ldr	r3, [sp, #12]
   16348:	sub	r9, r9, r1
   1634c:	add	r3, r3, r6, lsl #2
   16350:	mov	r1, fp
   16354:	ldr	r3, [r3, #-4]
   16358:	mov	r0, r4
   1635c:	str	r3, [sp, #36]	; 0x24
   16360:	ldr	r2, [sp, #36]	; 0x24
   16364:	ldr	r3, [r8]
   16368:	mla	r3, r3, r2, r9
   1636c:	mov	r2, sl
   16370:	bl	243c <InflateSkipData>
   16374:	ldr	r1, [r8]
   16378:	ldr	r3, [sp, #36]	; 0x24
   1637c:	mla	r9, r1, r3, r9
   16380:	add	r7, r7, r9
   16384:	add	r6, r6, #1
   16388:	add	r8, r8, #4
   1638c:	b	162f4 <ReadCompressedDataSlabN+0x3f8>
   16390:	ldr	r3, [r8]
   16394:	cmp	r3, #0
   16398:	beq	16384 <ReadCompressedDataSlabN+0x488>
   1639c:	ldr	r2, [sp, #12]
   163a0:	mov	r1, fp
   163a4:	add	r2, r2, r6, lsl #2
   163a8:	mov	r0, r4
   163ac:	ldr	r9, [r2, #-4]
   163b0:	mov	r2, sl
   163b4:	mul	r3, r9, r3
   163b8:	bl	243c <InflateSkipData>
   163bc:	ldr	r3, [r8]
   163c0:	mla	r7, r3, r9, r7
   163c4:	b	16384 <ReadCompressedDataSlabN+0x488>
   163c8:	add	r3, sp, #216	; 0xd8
   163cc:	add	r6, r3, r6, lsl #2
   163d0:	ldr	r3, [r6, #-176]	; 0xffffff50
   163d4:	cmp	r3, #0
   163d8:	beq	163f0 <ReadCompressedDataSlabN+0x4f4>
   163dc:	mov	r2, sl
   163e0:	mov	r1, fp
   163e4:	mov	r0, r4
   163e8:	add	r7, r7, r3
   163ec:	bl	243c <InflateSkipData>
   163f0:	ldr	r2, [sp, #24]
   163f4:	ldr	r3, [r5]
   163f8:	add	r3, r2, r3
   163fc:	str	r3, [sp, #24]
   16400:	ldr	r3, [sp, #24]
   16404:	ldr	r2, [sp, #28]
   16408:	cmp	r3, r2
   1640c:	blt	1625c <ReadCompressedDataSlabN+0x360>
   16410:	mov	r0, fp
   16414:	bl	1618 <inflateEnd@plt>
   16418:	mov	r0, #0
   1641c:	add	sp, sp, #220	; 0xdc
   16420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16424:	bl	f2ec <ReadCompressedDoubleData>
   16428:	ldr	r3, [r6]
   1642c:	mov	r2, sl
   16430:	sub	r3, r3, #1
   16434:	mov	r1, fp
   16438:	mov	r0, r4
   1643c:	bl	243c <InflateSkipData>
   16440:	ldr	r3, [r6]
   16444:	add	r8, r8, #1
   16448:	add	r7, r7, r3
   1644c:	b	160b0 <ReadCompressedDataSlabN+0x1b4>
   16450:	ldr	r3, [r9]
   16454:	cmp	r3, #0
   16458:	beq	161d0 <ReadCompressedDataSlabN+0x2d4>
   1645c:	ldr	r2, [sp, #12]
   16460:	mov	r1, fp
   16464:	add	r2, r2, r8, lsl #2
   16468:	mov	r0, r4
   1646c:	ldr	r2, [r2, #-4]
   16470:	str	r2, [sp, #32]
   16474:	mul	r3, r2, r3
   16478:	mov	r2, sl
   1647c:	bl	243c <InflateSkipData>
   16480:	ldr	r3, [r9]
   16484:	ldr	r2, [sp, #32]
   16488:	mla	r7, r3, r2, r7
   1648c:	b	161d0 <ReadCompressedDataSlabN+0x2d4>
   16490:	add	r3, sp, #216	; 0xd8
   16494:	add	r8, r3, r8, lsl #2
   16498:	ldr	r3, [r8, #-176]	; 0xffffff50
   1649c:	cmp	r3, #0
   164a0:	beq	164b8 <ReadCompressedDataSlabN+0x5bc>
   164a4:	mov	r2, sl
   164a8:	mov	r1, fp
   164ac:	mov	r0, r4
   164b0:	add	r7, r7, r3
   164b4:	bl	243c <InflateSkipData>
   164b8:	ldr	r2, [sp, #24]
   164bc:	ldr	r3, [r5]
   164c0:	add	r3, r2, r3
   164c4:	str	r3, [sp, #24]
   164c8:	b	16070 <ReadCompressedDataSlabN+0x174>
   164cc:	ldr	r3, [r6]
   164d0:	ldr	r2, [sp, #12]
   164d4:	sub	r3, r3, #1
   164d8:	str	r3, [sp, #40]	; 0x28
   164dc:	ldr	r3, [sp, #264]	; 0x108
   164e0:	ldr	r0, [sp, #264]	; 0x108
   164e4:	mov	r7, #0
   164e8:	ldr	r3, [r3]
   164ec:	str	r3, [sp, #120]	; 0x78
   164f0:	ldr	r3, [r5]
   164f4:	str	r3, [sp, #28]
   164f8:	mov	r3, #1
   164fc:	ldr	r1, [sp, #260]	; 0x104
   16500:	cmp	r3, r1
   16504:	blt	166a0 <ReadCompressedDataSlabN+0x7a4>
   16508:	mov	r3, r7
   1650c:	mov	r2, sl
   16510:	mov	r1, fp
   16514:	mov	r0, r4
   16518:	bl	243c <InflateSkipData>
   1651c:	ldr	r3, [r6]
   16520:	str	r3, [sp, #32]
   16524:	cmp	r3, #1
   16528:	mov	r3, #0
   1652c:	str	r3, [sp, #24]
   16530:	beq	16790 <ReadCompressedDataSlabN+0x894>
   16534:	ldr	r3, [sp, #24]
   16538:	ldr	r2, [sp, #28]
   1653c:	cmp	r3, r2
   16540:	bge	16410 <ReadCompressedDataSlabN+0x514>
   16544:	ldr	r3, [sp, #268]	; 0x10c
   16548:	ldr	r3, [r3]
   1654c:	cmp	r3, #0
   16550:	beq	16570 <ReadCompressedDataSlabN+0x674>
   16554:	mov	r2, sl
   16558:	mov	r1, fp
   1655c:	mov	r0, r4
   16560:	bl	243c <InflateSkipData>
   16564:	ldr	r3, [sp, #268]	; 0x10c
   16568:	ldr	r3, [r3]
   1656c:	add	r7, r7, r3
   16570:	mov	r8, #0
   16574:	ldr	r3, [r5]
   16578:	ldr	r1, [sp, #20]
   1657c:	sub	r3, r3, #1
   16580:	cmp	r8, r3
   16584:	ldr	r3, [sp, #24]
   16588:	mov	r0, r4
   1658c:	add	r2, r3, r8
   16590:	mov	r3, #1
   16594:	str	r3, [sp]
   16598:	add	r2, r1, r2, lsl #2
   1659c:	mov	r3, sl
   165a0:	mov	r1, fp
   165a4:	blt	168d4 <ReadCompressedDataSlabN+0x9d8>
   165a8:	bl	10314 <ReadCompressedSingleData>
   165ac:	ldr	r2, [r5]
   165b0:	ldr	r3, [r6]
   165b4:	sub	r2, r2, #1
   165b8:	ldr	r9, [sp, #268]	; 0x10c
   165bc:	mul	r2, r3, r2
   165c0:	ldr	r3, [sp, #264]	; 0x108
   165c4:	mov	r1, fp
   165c8:	mov	r0, r4
   165cc:	ldr	r3, [r3]
   165d0:	mov	r8, #1
   165d4:	sub	r3, r3, r2
   165d8:	ldr	r2, [r9], #4
   165dc:	sub	r3, r3, r2
   165e0:	add	r7, r7, r3
   165e4:	mov	r2, sl
   165e8:	sub	r3, r3, #1
   165ec:	bl	243c <InflateSkipData>
   165f0:	ldr	r3, [sp, #260]	; 0x104
   165f4:	cmp	r8, r3
   165f8:	bge	16968 <ReadCompressedDataSlabN+0xa6c>
   165fc:	ldr	r3, [sp, #16]
   16600:	ldr	r1, [r5, r8, lsl #2]
   16604:	ldr	r0, [r3, r8, lsl #2]
   16608:	add	r0, r0, #1
   1660c:	str	r0, [r3, r8, lsl #2]
   16610:	bl	3fd18 <__aeabi_idivmod>
   16614:	cmp	r1, #0
   16618:	bne	16940 <ReadCompressedDataSlabN+0xa44>
   1661c:	ldr	r3, [sp, #16]
   16620:	mov	r0, r7
   16624:	str	r1, [r3, r8, lsl #2]
   16628:	ldr	r3, [sp, #12]
   1662c:	ldr	r3, [r3, r8, lsl #2]
   16630:	mov	r1, r3
   16634:	str	r3, [sp, #32]
   16638:	bl	3fd18 <__aeabi_idivmod>
   1663c:	ldr	r3, [sp, #32]
   16640:	cmp	r1, #0
   16644:	beq	16900 <ReadCompressedDataSlabN+0xa04>
   16648:	sub	r3, r3, r1
   1664c:	str	r3, [sp, #32]
   16650:	ldr	r3, [sp, #12]
   16654:	ldr	r1, [sp, #32]
   16658:	add	r3, r3, r8, lsl #2
   1665c:	mov	r0, r4
   16660:	ldr	r3, [r3, #-4]
   16664:	str	r3, [sp, #36]	; 0x24
   16668:	ldr	r2, [sp, #36]	; 0x24
   1666c:	ldr	r3, [r9]
   16670:	mla	r3, r3, r2, r1
   16674:	mov	r2, sl
   16678:	mov	r1, fp
   1667c:	bl	243c <InflateSkipData>
   16680:	ldr	r1, [r9]
   16684:	ldr	r3, [sp, #36]	; 0x24
   16688:	ldr	r2, [sp, #32]
   1668c:	mla	r3, r1, r3, r2
   16690:	add	r7, r7, r3
   16694:	add	r8, r8, #1
   16698:	add	r9, r9, #4
   1669c:	b	165f0 <ReadCompressedDataSlabN+0x6f4>
   166a0:	ldr	r1, [r6, r3, lsl #2]
   166a4:	str	r2, [sp, #24]
   166a8:	sub	r1, r1, #1
   166ac:	str	r1, [r8, r3, lsl #2]
   166b0:	ldr	r1, [r0], #4
   166b4:	str	r1, [r2, #4]
   166b8:	mov	r1, r0
   166bc:	ldr	ip, [sp, #264]	; 0x108
   166c0:	cmp	r1, ip
   166c4:	bne	166f8 <ReadCompressedDataSlabN+0x7fc>
   166c8:	ldr	ip, [sp, #28]
   166cc:	ldr	r1, [r5, r3, lsl #2]
   166d0:	add	r2, r2, #4
   166d4:	mul	r1, r1, ip
   166d8:	ldr	ip, [sp, #268]	; 0x10c
   166dc:	str	r1, [sp, #28]
   166e0:	ldr	r1, [sp, #24]
   166e4:	ldr	ip, [ip, r3, lsl #2]
   166e8:	add	r3, r3, #1
   166ec:	ldr	r1, [r1]
   166f0:	mla	r7, ip, r1, r7
   166f4:	b	164fc <ReadCompressedDataSlabN+0x600>
   166f8:	ldr	lr, [r8, r3, lsl #2]
   166fc:	mov	r9, r1
   16700:	ldr	ip, [r1, #-4]!
   16704:	mul	ip, ip, lr
   16708:	ldr	lr, [r2, #4]
   1670c:	str	ip, [r8, r3, lsl #2]
   16710:	ldr	ip, [r9]
   16714:	mul	ip, ip, lr
   16718:	str	ip, [r2, #4]
   1671c:	b	166bc <ReadCompressedDataSlabN+0x7c0>
   16720:	ldr	r3, [r8]
   16724:	cmp	r3, #0
   16728:	beq	168c8 <ReadCompressedDataSlabN+0x9cc>
   1672c:	ldr	r2, [sp, #12]
   16730:	mov	r1, fp
   16734:	add	r2, r2, r6, lsl #2
   16738:	mov	r0, r4
   1673c:	ldr	r9, [r2, #-4]
   16740:	mov	r2, sl
   16744:	mul	r3, r9, r3
   16748:	bl	243c <InflateSkipData>
   1674c:	ldr	r3, [r8]
   16750:	mla	r7, r3, r9, r7
   16754:	b	168c8 <ReadCompressedDataSlabN+0x9cc>
   16758:	add	r3, sp, #216	; 0xd8
   1675c:	add	r6, r3, r6, lsl #2
   16760:	ldr	r3, [r6, #-176]	; 0xffffff50
   16764:	cmp	r3, #0
   16768:	beq	16780 <ReadCompressedDataSlabN+0x884>
   1676c:	mov	r2, sl
   16770:	mov	r1, fp
   16774:	mov	r0, r4
   16778:	add	r7, r7, r3
   1677c:	bl	243c <InflateSkipData>
   16780:	ldr	r2, [sp, #24]
   16784:	ldr	r3, [r5]
   16788:	add	r3, r2, r3
   1678c:	str	r3, [sp, #24]
   16790:	ldr	r3, [sp, #24]
   16794:	ldr	r2, [sp, #28]
   16798:	cmp	r3, r2
   1679c:	bge	16410 <ReadCompressedDataSlabN+0x514>
   167a0:	ldr	r3, [sp, #268]	; 0x10c
   167a4:	ldr	r3, [r3]
   167a8:	cmp	r3, #0
   167ac:	beq	167cc <ReadCompressedDataSlabN+0x8d0>
   167b0:	mov	r2, sl
   167b4:	mov	r1, fp
   167b8:	mov	r0, r4
   167bc:	bl	243c <InflateSkipData>
   167c0:	ldr	r3, [sp, #268]	; 0x10c
   167c4:	ldr	r3, [r3]
   167c8:	add	r7, r7, r3
   167cc:	ldr	r1, [sp, #24]
   167d0:	ldr	r3, [r5]
   167d4:	ldr	r2, [sp, #20]
   167d8:	str	r3, [sp]
   167dc:	add	r2, r2, r1, lsl #2
   167e0:	mov	r3, sl
   167e4:	mov	r1, fp
   167e8:	mov	r0, r4
   167ec:	bl	10314 <ReadCompressedSingleData>
   167f0:	ldr	r3, [sp, #264]	; 0x108
   167f4:	ldr	r2, [sp, #268]	; 0x10c
   167f8:	mov	r1, fp
   167fc:	ldr	r3, [r3]
   16800:	ldr	r2, [r2]
   16804:	mov	r0, r4
   16808:	sub	r3, r3, r2
   1680c:	ldr	r2, [r5]
   16810:	sub	r3, r3, r2
   16814:	mov	r2, sl
   16818:	bl	243c <InflateSkipData>
   1681c:	ldr	r3, [sp, #264]	; 0x108
   16820:	ldr	r8, [sp, #268]	; 0x10c
   16824:	ldr	r6, [sp, #32]
   16828:	ldr	r3, [r3]
   1682c:	ldr	r2, [r8], #4
   16830:	sub	r3, r3, r2
   16834:	add	r7, r3, r7
   16838:	ldr	r3, [sp, #260]	; 0x104
   1683c:	cmp	r6, r3
   16840:	bge	16780 <ReadCompressedDataSlabN+0x884>
   16844:	ldr	r3, [sp, #16]
   16848:	ldr	r1, [r5, r6, lsl #2]
   1684c:	ldr	r0, [r3, r6, lsl #2]
   16850:	add	r0, r0, #1
   16854:	str	r0, [r3, r6, lsl #2]
   16858:	bl	3fd18 <__aeabi_idivmod>
   1685c:	cmp	r1, #0
   16860:	bne	16758 <ReadCompressedDataSlabN+0x85c>
   16864:	ldr	r3, [sp, #16]
   16868:	mov	r0, r7
   1686c:	str	r1, [r3, r6, lsl #2]
   16870:	ldr	r3, [sp, #12]
   16874:	ldr	r9, [r3, r6, lsl #2]
   16878:	mov	r1, r9
   1687c:	bl	3fd18 <__aeabi_idivmod>
   16880:	cmp	r1, #0
   16884:	beq	16720 <ReadCompressedDataSlabN+0x824>
   16888:	ldr	r3, [sp, #12]
   1688c:	sub	r9, r9, r1
   16890:	add	r3, r3, r6, lsl #2
   16894:	mov	r1, fp
   16898:	ldr	r3, [r3, #-4]
   1689c:	mov	r0, r4
   168a0:	str	r3, [sp, #36]	; 0x24
   168a4:	ldr	r2, [sp, #36]	; 0x24
   168a8:	ldr	r3, [r8]
   168ac:	mla	r3, r3, r2, r9
   168b0:	mov	r2, sl
   168b4:	bl	243c <InflateSkipData>
   168b8:	ldr	r1, [r8]
   168bc:	ldr	r3, [sp, #36]	; 0x24
   168c0:	mla	r9, r1, r3, r9
   168c4:	add	r7, r7, r9
   168c8:	add	r6, r6, #1
   168cc:	add	r8, r8, #4
   168d0:	b	16838 <ReadCompressedDataSlabN+0x93c>
   168d4:	bl	10314 <ReadCompressedSingleData>
   168d8:	ldr	r3, [r6]
   168dc:	mov	r2, sl
   168e0:	sub	r3, r3, #1
   168e4:	mov	r1, fp
   168e8:	mov	r0, r4
   168ec:	bl	243c <InflateSkipData>
   168f0:	ldr	r3, [r6]
   168f4:	add	r8, r8, #1
   168f8:	add	r7, r7, r3
   168fc:	b	16574 <ReadCompressedDataSlabN+0x678>
   16900:	ldr	r3, [r9]
   16904:	cmp	r3, #0
   16908:	beq	16694 <ReadCompressedDataSlabN+0x798>
   1690c:	ldr	r2, [sp, #12]
   16910:	mov	r1, fp
   16914:	add	r2, r2, r8, lsl #2
   16918:	mov	r0, r4
   1691c:	ldr	r2, [r2, #-4]
   16920:	str	r2, [sp, #32]
   16924:	mul	r3, r2, r3
   16928:	mov	r2, sl
   1692c:	bl	243c <InflateSkipData>
   16930:	ldr	r3, [r9]
   16934:	ldr	r2, [sp, #32]
   16938:	mla	r7, r3, r2, r7
   1693c:	b	16694 <ReadCompressedDataSlabN+0x798>
   16940:	add	r3, sp, #216	; 0xd8
   16944:	add	r8, r3, r8, lsl #2
   16948:	ldr	r3, [r8, #-176]	; 0xffffff50
   1694c:	cmp	r3, #0
   16950:	beq	16968 <ReadCompressedDataSlabN+0xa6c>
   16954:	mov	r2, sl
   16958:	mov	r1, fp
   1695c:	mov	r0, r4
   16960:	add	r7, r7, r3
   16964:	bl	243c <InflateSkipData>
   16968:	ldr	r2, [sp, #24]
   1696c:	ldr	r3, [r5]
   16970:	add	r3, r2, r3
   16974:	str	r3, [sp, #24]
   16978:	b	16534 <ReadCompressedDataSlabN+0x638>
   1697c:	ldr	r3, [r6]
   16980:	ldr	r2, [sp, #12]
   16984:	sub	r3, r3, #1
   16988:	str	r3, [sp, #40]	; 0x28
   1698c:	ldr	r3, [sp, #264]	; 0x108
   16990:	ldr	r0, [sp, #264]	; 0x108
   16994:	mov	r7, #0
   16998:	ldr	r3, [r3]
   1699c:	str	r3, [sp, #120]	; 0x78
   169a0:	ldr	r3, [r5]
   169a4:	str	r3, [sp, #28]
   169a8:	mov	r3, #1
   169ac:	ldr	r1, [sp, #260]	; 0x104
   169b0:	cmp	r3, r1
   169b4:	blt	16b50 <ReadCompressedDataSlabN+0xc54>
   169b8:	mov	r3, r7
   169bc:	mov	r2, sl
   169c0:	mov	r1, fp
   169c4:	mov	r0, r4
   169c8:	bl	243c <InflateSkipData>
   169cc:	ldr	r3, [r6]
   169d0:	str	r3, [sp, #32]
   169d4:	cmp	r3, #1
   169d8:	mov	r3, #0
   169dc:	str	r3, [sp, #24]
   169e0:	beq	16c40 <ReadCompressedDataSlabN+0xd44>
   169e4:	ldr	r3, [sp, #24]
   169e8:	ldr	r2, [sp, #28]
   169ec:	cmp	r3, r2
   169f0:	bge	16410 <ReadCompressedDataSlabN+0x514>
   169f4:	ldr	r3, [sp, #268]	; 0x10c
   169f8:	ldr	r3, [r3]
   169fc:	cmp	r3, #0
   16a00:	beq	16a20 <ReadCompressedDataSlabN+0xb24>
   16a04:	mov	r2, sl
   16a08:	mov	r1, fp
   16a0c:	mov	r0, r4
   16a10:	bl	243c <InflateSkipData>
   16a14:	ldr	r3, [sp, #268]	; 0x10c
   16a18:	ldr	r3, [r3]
   16a1c:	add	r7, r7, r3
   16a20:	mov	r8, #0
   16a24:	ldr	r3, [r5]
   16a28:	ldr	r1, [sp, #20]
   16a2c:	sub	r3, r3, #1
   16a30:	cmp	r8, r3
   16a34:	ldr	r3, [sp, #24]
   16a38:	mov	r0, r4
   16a3c:	add	r2, r3, r8
   16a40:	mov	r3, #1
   16a44:	str	r3, [sp]
   16a48:	add	r2, r1, r2, lsl #3
   16a4c:	mov	r3, sl
   16a50:	mov	r1, fp
   16a54:	blt	16d84 <ReadCompressedDataSlabN+0xe88>
   16a58:	bl	10834 <ReadCompressedInt64Data>
   16a5c:	ldr	r2, [r5]
   16a60:	ldr	r3, [r6]
   16a64:	sub	r2, r2, #1
   16a68:	ldr	r9, [sp, #268]	; 0x10c
   16a6c:	mul	r2, r3, r2
   16a70:	ldr	r3, [sp, #264]	; 0x108
   16a74:	mov	r1, fp
   16a78:	mov	r0, r4
   16a7c:	ldr	r3, [r3]
   16a80:	mov	r8, #1
   16a84:	sub	r3, r3, r2
   16a88:	ldr	r2, [r9], #4
   16a8c:	sub	r3, r3, r2
   16a90:	add	r7, r7, r3
   16a94:	mov	r2, sl
   16a98:	sub	r3, r3, #1
   16a9c:	bl	243c <InflateSkipData>
   16aa0:	ldr	r3, [sp, #260]	; 0x104
   16aa4:	cmp	r8, r3
   16aa8:	bge	16e18 <ReadCompressedDataSlabN+0xf1c>
   16aac:	ldr	r3, [sp, #16]
   16ab0:	ldr	r1, [r5, r8, lsl #2]
   16ab4:	ldr	r0, [r3, r8, lsl #2]
   16ab8:	add	r0, r0, #1
   16abc:	str	r0, [r3, r8, lsl #2]
   16ac0:	bl	3fd18 <__aeabi_idivmod>
   16ac4:	cmp	r1, #0
   16ac8:	bne	16df0 <ReadCompressedDataSlabN+0xef4>
   16acc:	ldr	r3, [sp, #16]
   16ad0:	mov	r0, r7
   16ad4:	str	r1, [r3, r8, lsl #2]
   16ad8:	ldr	r3, [sp, #12]
   16adc:	ldr	r3, [r3, r8, lsl #2]
   16ae0:	mov	r1, r3
   16ae4:	str	r3, [sp, #32]
   16ae8:	bl	3fd18 <__aeabi_idivmod>
   16aec:	ldr	r3, [sp, #32]
   16af0:	cmp	r1, #0
   16af4:	beq	16db0 <ReadCompressedDataSlabN+0xeb4>
   16af8:	sub	r3, r3, r1
   16afc:	str	r3, [sp, #32]
   16b00:	ldr	r3, [sp, #12]
   16b04:	ldr	r1, [sp, #32]
   16b08:	add	r3, r3, r8, lsl #2
   16b0c:	mov	r0, r4
   16b10:	ldr	r3, [r3, #-4]
   16b14:	str	r3, [sp, #36]	; 0x24
   16b18:	ldr	r2, [sp, #36]	; 0x24
   16b1c:	ldr	r3, [r9]
   16b20:	mla	r3, r3, r2, r1
   16b24:	mov	r2, sl
   16b28:	mov	r1, fp
   16b2c:	bl	243c <InflateSkipData>
   16b30:	ldr	r1, [r9]
   16b34:	ldr	r3, [sp, #36]	; 0x24
   16b38:	ldr	r2, [sp, #32]
   16b3c:	mla	r3, r1, r3, r2
   16b40:	add	r7, r7, r3
   16b44:	add	r8, r8, #1
   16b48:	add	r9, r9, #4
   16b4c:	b	16aa0 <ReadCompressedDataSlabN+0xba4>
   16b50:	ldr	r1, [r6, r3, lsl #2]
   16b54:	str	r2, [sp, #24]
   16b58:	sub	r1, r1, #1
   16b5c:	str	r1, [r8, r3, lsl #2]
   16b60:	ldr	r1, [r0], #4
   16b64:	str	r1, [r2, #4]
   16b68:	mov	r1, r0
   16b6c:	ldr	ip, [sp, #264]	; 0x108
   16b70:	cmp	r1, ip
   16b74:	bne	16ba8 <ReadCompressedDataSlabN+0xcac>
   16b78:	ldr	ip, [sp, #28]
   16b7c:	ldr	r1, [r5, r3, lsl #2]
   16b80:	add	r2, r2, #4
   16b84:	mul	r1, r1, ip
   16b88:	ldr	ip, [sp, #268]	; 0x10c
   16b8c:	str	r1, [sp, #28]
   16b90:	ldr	r1, [sp, #24]
   16b94:	ldr	ip, [ip, r3, lsl #2]
   16b98:	add	r3, r3, #1
   16b9c:	ldr	r1, [r1]
   16ba0:	mla	r7, ip, r1, r7
   16ba4:	b	169ac <ReadCompressedDataSlabN+0xab0>
   16ba8:	ldr	lr, [r8, r3, lsl #2]
   16bac:	mov	r9, r1
   16bb0:	ldr	ip, [r1, #-4]!
   16bb4:	mul	ip, ip, lr
   16bb8:	ldr	lr, [r2, #4]
   16bbc:	str	ip, [r8, r3, lsl #2]
   16bc0:	ldr	ip, [r9]
   16bc4:	mul	ip, ip, lr
   16bc8:	str	ip, [r2, #4]
   16bcc:	b	16b6c <ReadCompressedDataSlabN+0xc70>
   16bd0:	ldr	r3, [r8]
   16bd4:	cmp	r3, #0
   16bd8:	beq	16d78 <ReadCompressedDataSlabN+0xe7c>
   16bdc:	ldr	r2, [sp, #12]
   16be0:	mov	r1, fp
   16be4:	add	r2, r2, r6, lsl #2
   16be8:	mov	r0, r4
   16bec:	ldr	r9, [r2, #-4]
   16bf0:	mov	r2, sl
   16bf4:	mul	r3, r9, r3
   16bf8:	bl	243c <InflateSkipData>
   16bfc:	ldr	r3, [r8]
   16c00:	mla	r7, r3, r9, r7
   16c04:	b	16d78 <ReadCompressedDataSlabN+0xe7c>
   16c08:	add	r3, sp, #216	; 0xd8
   16c0c:	add	r6, r3, r6, lsl #2
   16c10:	ldr	r3, [r6, #-176]	; 0xffffff50
   16c14:	cmp	r3, #0
   16c18:	beq	16c30 <ReadCompressedDataSlabN+0xd34>
   16c1c:	mov	r2, sl
   16c20:	mov	r1, fp
   16c24:	mov	r0, r4
   16c28:	add	r7, r7, r3
   16c2c:	bl	243c <InflateSkipData>
   16c30:	ldr	r2, [sp, #24]
   16c34:	ldr	r3, [r5]
   16c38:	add	r3, r2, r3
   16c3c:	str	r3, [sp, #24]
   16c40:	ldr	r3, [sp, #24]
   16c44:	ldr	r2, [sp, #28]
   16c48:	cmp	r3, r2
   16c4c:	bge	16410 <ReadCompressedDataSlabN+0x514>
   16c50:	ldr	r3, [sp, #268]	; 0x10c
   16c54:	ldr	r3, [r3]
   16c58:	cmp	r3, #0
   16c5c:	beq	16c7c <ReadCompressedDataSlabN+0xd80>
   16c60:	mov	r2, sl
   16c64:	mov	r1, fp
   16c68:	mov	r0, r4
   16c6c:	bl	243c <InflateSkipData>
   16c70:	ldr	r3, [sp, #268]	; 0x10c
   16c74:	ldr	r3, [r3]
   16c78:	add	r7, r7, r3
   16c7c:	ldr	r1, [sp, #24]
   16c80:	ldr	r3, [r5]
   16c84:	ldr	r2, [sp, #20]
   16c88:	str	r3, [sp]
   16c8c:	add	r2, r2, r1, lsl #3
   16c90:	mov	r3, sl
   16c94:	mov	r1, fp
   16c98:	mov	r0, r4
   16c9c:	bl	10834 <ReadCompressedInt64Data>
   16ca0:	ldr	r3, [sp, #264]	; 0x108
   16ca4:	ldr	r2, [sp, #268]	; 0x10c
   16ca8:	mov	r1, fp
   16cac:	ldr	r3, [r3]
   16cb0:	ldr	r2, [r2]
   16cb4:	mov	r0, r4
   16cb8:	sub	r3, r3, r2
   16cbc:	ldr	r2, [r5]
   16cc0:	sub	r3, r3, r2
   16cc4:	mov	r2, sl
   16cc8:	bl	243c <InflateSkipData>
   16ccc:	ldr	r3, [sp, #264]	; 0x108
   16cd0:	ldr	r8, [sp, #268]	; 0x10c
   16cd4:	ldr	r6, [sp, #32]
   16cd8:	ldr	r3, [r3]
   16cdc:	ldr	r2, [r8], #4
   16ce0:	sub	r3, r3, r2
   16ce4:	add	r7, r3, r7
   16ce8:	ldr	r3, [sp, #260]	; 0x104
   16cec:	cmp	r6, r3
   16cf0:	bge	16c30 <ReadCompressedDataSlabN+0xd34>
   16cf4:	ldr	r3, [sp, #16]
   16cf8:	ldr	r1, [r5, r6, lsl #2]
   16cfc:	ldr	r0, [r3, r6, lsl #2]
   16d00:	add	r0, r0, #1
   16d04:	str	r0, [r3, r6, lsl #2]
   16d08:	bl	3fd18 <__aeabi_idivmod>
   16d0c:	cmp	r1, #0
   16d10:	bne	16c08 <ReadCompressedDataSlabN+0xd0c>
   16d14:	ldr	r3, [sp, #16]
   16d18:	mov	r0, r7
   16d1c:	str	r1, [r3, r6, lsl #2]
   16d20:	ldr	r3, [sp, #12]
   16d24:	ldr	r9, [r3, r6, lsl #2]
   16d28:	mov	r1, r9
   16d2c:	bl	3fd18 <__aeabi_idivmod>
   16d30:	cmp	r1, #0
   16d34:	beq	16bd0 <ReadCompressedDataSlabN+0xcd4>
   16d38:	ldr	r3, [sp, #12]
   16d3c:	sub	r9, r9, r1
   16d40:	add	r3, r3, r6, lsl #2
   16d44:	mov	r1, fp
   16d48:	ldr	r3, [r3, #-4]
   16d4c:	mov	r0, r4
   16d50:	str	r3, [sp, #36]	; 0x24
   16d54:	ldr	r2, [sp, #36]	; 0x24
   16d58:	ldr	r3, [r8]
   16d5c:	mla	r3, r3, r2, r9
   16d60:	mov	r2, sl
   16d64:	bl	243c <InflateSkipData>
   16d68:	ldr	r1, [r8]
   16d6c:	ldr	r3, [sp, #36]	; 0x24
   16d70:	mla	r9, r1, r3, r9
   16d74:	add	r7, r7, r9
   16d78:	add	r6, r6, #1
   16d7c:	add	r8, r8, #4
   16d80:	b	16ce8 <ReadCompressedDataSlabN+0xdec>
   16d84:	bl	10834 <ReadCompressedInt64Data>
   16d88:	ldr	r3, [r6]
   16d8c:	mov	r2, sl
   16d90:	sub	r3, r3, #1
   16d94:	mov	r1, fp
   16d98:	mov	r0, r4
   16d9c:	bl	243c <InflateSkipData>
   16da0:	ldr	r3, [r6]
   16da4:	add	r8, r8, #1
   16da8:	add	r7, r7, r3
   16dac:	b	16a24 <ReadCompressedDataSlabN+0xb28>
   16db0:	ldr	r3, [r9]
   16db4:	cmp	r3, #0
   16db8:	beq	16b44 <ReadCompressedDataSlabN+0xc48>
   16dbc:	ldr	r2, [sp, #12]
   16dc0:	mov	r1, fp
   16dc4:	add	r2, r2, r8, lsl #2
   16dc8:	mov	r0, r4
   16dcc:	ldr	r2, [r2, #-4]
   16dd0:	str	r2, [sp, #32]
   16dd4:	mul	r3, r2, r3
   16dd8:	mov	r2, sl
   16ddc:	bl	243c <InflateSkipData>
   16de0:	ldr	r3, [r9]
   16de4:	ldr	r2, [sp, #32]
   16de8:	mla	r7, r3, r2, r7
   16dec:	b	16b44 <ReadCompressedDataSlabN+0xc48>
   16df0:	add	r3, sp, #216	; 0xd8
   16df4:	add	r8, r3, r8, lsl #2
   16df8:	ldr	r3, [r8, #-176]	; 0xffffff50
   16dfc:	cmp	r3, #0
   16e00:	beq	16e18 <ReadCompressedDataSlabN+0xf1c>
   16e04:	mov	r2, sl
   16e08:	mov	r1, fp
   16e0c:	mov	r0, r4
   16e10:	add	r7, r7, r3
   16e14:	bl	243c <InflateSkipData>
   16e18:	ldr	r2, [sp, #24]
   16e1c:	ldr	r3, [r5]
   16e20:	add	r3, r2, r3
   16e24:	str	r3, [sp, #24]
   16e28:	b	169e4 <ReadCompressedDataSlabN+0xae8>
   16e2c:	ldr	r3, [r6]
   16e30:	ldr	r2, [sp, #12]
   16e34:	sub	r3, r3, #1
   16e38:	str	r3, [sp, #40]	; 0x28
   16e3c:	ldr	r3, [sp, #264]	; 0x108
   16e40:	ldr	r0, [sp, #264]	; 0x108
   16e44:	mov	r7, #0
   16e48:	ldr	r3, [r3]
   16e4c:	str	r3, [sp, #120]	; 0x78
   16e50:	ldr	r3, [r5]
   16e54:	str	r3, [sp, #28]
   16e58:	mov	r3, #1
   16e5c:	ldr	r1, [sp, #260]	; 0x104
   16e60:	cmp	r3, r1
   16e64:	blt	17000 <ReadCompressedDataSlabN+0x1104>
   16e68:	mov	r3, r7
   16e6c:	mov	r2, sl
   16e70:	mov	r1, fp
   16e74:	mov	r0, r4
   16e78:	bl	243c <InflateSkipData>
   16e7c:	ldr	r3, [r6]
   16e80:	str	r3, [sp, #32]
   16e84:	cmp	r3, #1
   16e88:	mov	r3, #0
   16e8c:	str	r3, [sp, #24]
   16e90:	beq	170f0 <ReadCompressedDataSlabN+0x11f4>
   16e94:	ldr	r3, [sp, #24]
   16e98:	ldr	r2, [sp, #28]
   16e9c:	cmp	r3, r2
   16ea0:	bge	16410 <ReadCompressedDataSlabN+0x514>
   16ea4:	ldr	r3, [sp, #268]	; 0x10c
   16ea8:	ldr	r3, [r3]
   16eac:	cmp	r3, #0
   16eb0:	beq	16ed0 <ReadCompressedDataSlabN+0xfd4>
   16eb4:	mov	r2, sl
   16eb8:	mov	r1, fp
   16ebc:	mov	r0, r4
   16ec0:	bl	243c <InflateSkipData>
   16ec4:	ldr	r3, [sp, #268]	; 0x10c
   16ec8:	ldr	r3, [r3]
   16ecc:	add	r7, r7, r3
   16ed0:	mov	r8, #0
   16ed4:	ldr	r3, [r5]
   16ed8:	ldr	r1, [sp, #20]
   16edc:	sub	r3, r3, #1
   16ee0:	cmp	r8, r3
   16ee4:	ldr	r3, [sp, #24]
   16ee8:	mov	r0, r4
   16eec:	add	r2, r3, r8
   16ef0:	mov	r3, #1
   16ef4:	str	r3, [sp]
   16ef8:	add	r2, r1, r2, lsl #3
   16efc:	mov	r3, sl
   16f00:	mov	r1, fp
   16f04:	blt	17234 <ReadCompressedDataSlabN+0x1338>
   16f08:	bl	10d64 <ReadCompressedUInt64Data>
   16f0c:	ldr	r2, [r5]
   16f10:	ldr	r3, [r6]
   16f14:	sub	r2, r2, #1
   16f18:	ldr	r9, [sp, #268]	; 0x10c
   16f1c:	mul	r2, r3, r2
   16f20:	ldr	r3, [sp, #264]	; 0x108
   16f24:	mov	r1, fp
   16f28:	mov	r0, r4
   16f2c:	ldr	r3, [r3]
   16f30:	mov	r8, #1
   16f34:	sub	r3, r3, r2
   16f38:	ldr	r2, [r9], #4
   16f3c:	sub	r3, r3, r2
   16f40:	add	r7, r7, r3
   16f44:	mov	r2, sl
   16f48:	sub	r3, r3, #1
   16f4c:	bl	243c <InflateSkipData>
   16f50:	ldr	r3, [sp, #260]	; 0x104
   16f54:	cmp	r8, r3
   16f58:	bge	172c8 <ReadCompressedDataSlabN+0x13cc>
   16f5c:	ldr	r3, [sp, #16]
   16f60:	ldr	r1, [r5, r8, lsl #2]
   16f64:	ldr	r0, [r3, r8, lsl #2]
   16f68:	add	r0, r0, #1
   16f6c:	str	r0, [r3, r8, lsl #2]
   16f70:	bl	3fd18 <__aeabi_idivmod>
   16f74:	cmp	r1, #0
   16f78:	bne	172a0 <ReadCompressedDataSlabN+0x13a4>
   16f7c:	ldr	r3, [sp, #16]
   16f80:	mov	r0, r7
   16f84:	str	r1, [r3, r8, lsl #2]
   16f88:	ldr	r3, [sp, #12]
   16f8c:	ldr	r3, [r3, r8, lsl #2]
   16f90:	mov	r1, r3
   16f94:	str	r3, [sp, #32]
   16f98:	bl	3fd18 <__aeabi_idivmod>
   16f9c:	ldr	r3, [sp, #32]
   16fa0:	cmp	r1, #0
   16fa4:	beq	17260 <ReadCompressedDataSlabN+0x1364>
   16fa8:	sub	r3, r3, r1
   16fac:	str	r3, [sp, #32]
   16fb0:	ldr	r3, [sp, #12]
   16fb4:	ldr	r1, [sp, #32]
   16fb8:	add	r3, r3, r8, lsl #2
   16fbc:	mov	r0, r4
   16fc0:	ldr	r3, [r3, #-4]
   16fc4:	str	r3, [sp, #36]	; 0x24
   16fc8:	ldr	r2, [sp, #36]	; 0x24
   16fcc:	ldr	r3, [r9]
   16fd0:	mla	r3, r3, r2, r1
   16fd4:	mov	r2, sl
   16fd8:	mov	r1, fp
   16fdc:	bl	243c <InflateSkipData>
   16fe0:	ldr	r1, [r9]
   16fe4:	ldr	r3, [sp, #36]	; 0x24
   16fe8:	ldr	r2, [sp, #32]
   16fec:	mla	r3, r1, r3, r2
   16ff0:	add	r7, r7, r3
   16ff4:	add	r8, r8, #1
   16ff8:	add	r9, r9, #4
   16ffc:	b	16f50 <ReadCompressedDataSlabN+0x1054>
   17000:	ldr	r1, [r6, r3, lsl #2]
   17004:	str	r2, [sp, #24]
   17008:	sub	r1, r1, #1
   1700c:	str	r1, [r8, r3, lsl #2]
   17010:	ldr	r1, [r0], #4
   17014:	str	r1, [r2, #4]
   17018:	mov	r1, r0
   1701c:	ldr	ip, [sp, #264]	; 0x108
   17020:	cmp	r1, ip
   17024:	bne	17058 <ReadCompressedDataSlabN+0x115c>
   17028:	ldr	ip, [sp, #28]
   1702c:	ldr	r1, [r5, r3, lsl #2]
   17030:	add	r2, r2, #4
   17034:	mul	r1, r1, ip
   17038:	ldr	ip, [sp, #268]	; 0x10c
   1703c:	str	r1, [sp, #28]
   17040:	ldr	r1, [sp, #24]
   17044:	ldr	ip, [ip, r3, lsl #2]
   17048:	add	r3, r3, #1
   1704c:	ldr	r1, [r1]
   17050:	mla	r7, ip, r1, r7
   17054:	b	16e5c <ReadCompressedDataSlabN+0xf60>
   17058:	ldr	lr, [r8, r3, lsl #2]
   1705c:	mov	r9, r1
   17060:	ldr	ip, [r1, #-4]!
   17064:	mul	ip, ip, lr
   17068:	ldr	lr, [r2, #4]
   1706c:	str	ip, [r8, r3, lsl #2]
   17070:	ldr	ip, [r9]
   17074:	mul	ip, ip, lr
   17078:	str	ip, [r2, #4]
   1707c:	b	1701c <ReadCompressedDataSlabN+0x1120>
   17080:	ldr	r3, [r8]
   17084:	cmp	r3, #0
   17088:	beq	17228 <ReadCompressedDataSlabN+0x132c>
   1708c:	ldr	r2, [sp, #12]
   17090:	mov	r1, fp
   17094:	add	r2, r2, r6, lsl #2
   17098:	mov	r0, r4
   1709c:	ldr	r9, [r2, #-4]
   170a0:	mov	r2, sl
   170a4:	mul	r3, r9, r3
   170a8:	bl	243c <InflateSkipData>
   170ac:	ldr	r3, [r8]
   170b0:	mla	r7, r3, r9, r7
   170b4:	b	17228 <ReadCompressedDataSlabN+0x132c>
   170b8:	add	r3, sp, #216	; 0xd8
   170bc:	add	r6, r3, r6, lsl #2
   170c0:	ldr	r3, [r6, #-176]	; 0xffffff50
   170c4:	cmp	r3, #0
   170c8:	beq	170e0 <ReadCompressedDataSlabN+0x11e4>
   170cc:	mov	r2, sl
   170d0:	mov	r1, fp
   170d4:	mov	r0, r4
   170d8:	add	r7, r7, r3
   170dc:	bl	243c <InflateSkipData>
   170e0:	ldr	r2, [sp, #24]
   170e4:	ldr	r3, [r5]
   170e8:	add	r3, r2, r3
   170ec:	str	r3, [sp, #24]
   170f0:	ldr	r3, [sp, #24]
   170f4:	ldr	r2, [sp, #28]
   170f8:	cmp	r3, r2
   170fc:	bge	16410 <ReadCompressedDataSlabN+0x514>
   17100:	ldr	r3, [sp, #268]	; 0x10c
   17104:	ldr	r3, [r3]
   17108:	cmp	r3, #0
   1710c:	beq	1712c <ReadCompressedDataSlabN+0x1230>
   17110:	mov	r2, sl
   17114:	mov	r1, fp
   17118:	mov	r0, r4
   1711c:	bl	243c <InflateSkipData>
   17120:	ldr	r3, [sp, #268]	; 0x10c
   17124:	ldr	r3, [r3]
   17128:	add	r7, r7, r3
   1712c:	ldr	r1, [sp, #24]
   17130:	ldr	r3, [r5]
   17134:	ldr	r2, [sp, #20]
   17138:	str	r3, [sp]
   1713c:	add	r2, r2, r1, lsl #3
   17140:	mov	r3, sl
   17144:	mov	r1, fp
   17148:	mov	r0, r4
   1714c:	bl	10d64 <ReadCompressedUInt64Data>
   17150:	ldr	r3, [sp, #264]	; 0x108
   17154:	ldr	r2, [sp, #268]	; 0x10c
   17158:	mov	r1, fp
   1715c:	ldr	r3, [r3]
   17160:	ldr	r2, [r2]
   17164:	mov	r0, r4
   17168:	sub	r3, r3, r2
   1716c:	ldr	r2, [r5]
   17170:	sub	r3, r3, r2
   17174:	mov	r2, sl
   17178:	bl	243c <InflateSkipData>
   1717c:	ldr	r3, [sp, #264]	; 0x108
   17180:	ldr	r8, [sp, #268]	; 0x10c
   17184:	ldr	r6, [sp, #32]
   17188:	ldr	r3, [r3]
   1718c:	ldr	r2, [r8], #4
   17190:	sub	r3, r3, r2
   17194:	add	r7, r3, r7
   17198:	ldr	r3, [sp, #260]	; 0x104
   1719c:	cmp	r6, r3
   171a0:	bge	170e0 <ReadCompressedDataSlabN+0x11e4>
   171a4:	ldr	r3, [sp, #16]
   171a8:	ldr	r1, [r5, r6, lsl #2]
   171ac:	ldr	r0, [r3, r6, lsl #2]
   171b0:	add	r0, r0, #1
   171b4:	str	r0, [r3, r6, lsl #2]
   171b8:	bl	3fd18 <__aeabi_idivmod>
   171bc:	cmp	r1, #0
   171c0:	bne	170b8 <ReadCompressedDataSlabN+0x11bc>
   171c4:	ldr	r3, [sp, #16]
   171c8:	mov	r0, r7
   171cc:	str	r1, [r3, r6, lsl #2]
   171d0:	ldr	r3, [sp, #12]
   171d4:	ldr	r9, [r3, r6, lsl #2]
   171d8:	mov	r1, r9
   171dc:	bl	3fd18 <__aeabi_idivmod>
   171e0:	cmp	r1, #0
   171e4:	beq	17080 <ReadCompressedDataSlabN+0x1184>
   171e8:	ldr	r3, [sp, #12]
   171ec:	sub	r9, r9, r1
   171f0:	add	r3, r3, r6, lsl #2
   171f4:	mov	r1, fp
   171f8:	ldr	r3, [r3, #-4]
   171fc:	mov	r0, r4
   17200:	str	r3, [sp, #36]	; 0x24
   17204:	ldr	r2, [sp, #36]	; 0x24
   17208:	ldr	r3, [r8]
   1720c:	mla	r3, r3, r2, r9
   17210:	mov	r2, sl
   17214:	bl	243c <InflateSkipData>
   17218:	ldr	r1, [r8]
   1721c:	ldr	r3, [sp, #36]	; 0x24
   17220:	mla	r9, r1, r3, r9
   17224:	add	r7, r7, r9
   17228:	add	r6, r6, #1
   1722c:	add	r8, r8, #4
   17230:	b	17198 <ReadCompressedDataSlabN+0x129c>
   17234:	bl	10d64 <ReadCompressedUInt64Data>
   17238:	ldr	r3, [r6]
   1723c:	mov	r2, sl
   17240:	sub	r3, r3, #1
   17244:	mov	r1, fp
   17248:	mov	r0, r4
   1724c:	bl	243c <InflateSkipData>
   17250:	ldr	r3, [r6]
   17254:	add	r8, r8, #1
   17258:	add	r7, r7, r3
   1725c:	b	16ed4 <ReadCompressedDataSlabN+0xfd8>
   17260:	ldr	r3, [r9]
   17264:	cmp	r3, #0
   17268:	beq	16ff4 <ReadCompressedDataSlabN+0x10f8>
   1726c:	ldr	r2, [sp, #12]
   17270:	mov	r1, fp
   17274:	add	r2, r2, r8, lsl #2
   17278:	mov	r0, r4
   1727c:	ldr	r2, [r2, #-4]
   17280:	str	r2, [sp, #32]
   17284:	mul	r3, r2, r3
   17288:	mov	r2, sl
   1728c:	bl	243c <InflateSkipData>
   17290:	ldr	r3, [r9]
   17294:	ldr	r2, [sp, #32]
   17298:	mla	r7, r3, r2, r7
   1729c:	b	16ff4 <ReadCompressedDataSlabN+0x10f8>
   172a0:	add	r3, sp, #216	; 0xd8
   172a4:	add	r8, r3, r8, lsl #2
   172a8:	ldr	r3, [r8, #-176]	; 0xffffff50
   172ac:	cmp	r3, #0
   172b0:	beq	172c8 <ReadCompressedDataSlabN+0x13cc>
   172b4:	mov	r2, sl
   172b8:	mov	r1, fp
   172bc:	mov	r0, r4
   172c0:	add	r7, r7, r3
   172c4:	bl	243c <InflateSkipData>
   172c8:	ldr	r2, [sp, #24]
   172cc:	ldr	r3, [r5]
   172d0:	add	r3, r2, r3
   172d4:	str	r3, [sp, #24]
   172d8:	b	16e94 <ReadCompressedDataSlabN+0xf98>
   172dc:	ldr	r3, [r6]
   172e0:	ldr	r2, [sp, #12]
   172e4:	sub	r3, r3, #1
   172e8:	str	r3, [sp, #40]	; 0x28
   172ec:	ldr	r3, [sp, #264]	; 0x108
   172f0:	ldr	r0, [sp, #264]	; 0x108
   172f4:	mov	r7, #0
   172f8:	ldr	r3, [r3]
   172fc:	str	r3, [sp, #120]	; 0x78
   17300:	ldr	r3, [r5]
   17304:	str	r3, [sp, #28]
   17308:	mov	r3, #1
   1730c:	ldr	r1, [sp, #260]	; 0x104
   17310:	cmp	r3, r1
   17314:	blt	174b0 <ReadCompressedDataSlabN+0x15b4>
   17318:	mov	r3, r7
   1731c:	mov	r2, sl
   17320:	mov	r1, fp
   17324:	mov	r0, r4
   17328:	bl	243c <InflateSkipData>
   1732c:	ldr	r3, [r6]
   17330:	str	r3, [sp, #32]
   17334:	cmp	r3, #1
   17338:	mov	r3, #0
   1733c:	str	r3, [sp, #24]
   17340:	beq	175a0 <ReadCompressedDataSlabN+0x16a4>
   17344:	ldr	r3, [sp, #24]
   17348:	ldr	r2, [sp, #28]
   1734c:	cmp	r3, r2
   17350:	bge	16410 <ReadCompressedDataSlabN+0x514>
   17354:	ldr	r3, [sp, #268]	; 0x10c
   17358:	ldr	r3, [r3]
   1735c:	cmp	r3, #0
   17360:	beq	17380 <ReadCompressedDataSlabN+0x1484>
   17364:	mov	r2, sl
   17368:	mov	r1, fp
   1736c:	mov	r0, r4
   17370:	bl	243c <InflateSkipData>
   17374:	ldr	r3, [sp, #268]	; 0x10c
   17378:	ldr	r3, [r3]
   1737c:	add	r7, r7, r3
   17380:	mov	r8, #0
   17384:	ldr	r3, [r5]
   17388:	ldr	r1, [sp, #20]
   1738c:	sub	r3, r3, #1
   17390:	cmp	r8, r3
   17394:	ldr	r3, [sp, #24]
   17398:	mov	r0, r4
   1739c:	add	r2, r3, r8
   173a0:	mov	r3, #1
   173a4:	str	r3, [sp]
   173a8:	add	r2, r1, r2, lsl #2
   173ac:	mov	r3, sl
   173b0:	mov	r1, fp
   173b4:	blt	176e4 <ReadCompressedDataSlabN+0x17e8>
   173b8:	bl	11294 <ReadCompressedInt32Data>
   173bc:	ldr	r2, [r5]
   173c0:	ldr	r3, [r6]
   173c4:	sub	r2, r2, #1
   173c8:	ldr	r9, [sp, #268]	; 0x10c
   173cc:	mul	r2, r3, r2
   173d0:	ldr	r3, [sp, #264]	; 0x108
   173d4:	mov	r1, fp
   173d8:	mov	r0, r4
   173dc:	ldr	r3, [r3]
   173e0:	mov	r8, #1
   173e4:	sub	r3, r3, r2
   173e8:	ldr	r2, [r9], #4
   173ec:	sub	r3, r3, r2
   173f0:	add	r7, r7, r3
   173f4:	mov	r2, sl
   173f8:	sub	r3, r3, #1
   173fc:	bl	243c <InflateSkipData>
   17400:	ldr	r3, [sp, #260]	; 0x104
   17404:	cmp	r8, r3
   17408:	bge	17778 <ReadCompressedDataSlabN+0x187c>
   1740c:	ldr	r3, [sp, #16]
   17410:	ldr	r1, [r5, r8, lsl #2]
   17414:	ldr	r0, [r3, r8, lsl #2]
   17418:	add	r0, r0, #1
   1741c:	str	r0, [r3, r8, lsl #2]
   17420:	bl	3fd18 <__aeabi_idivmod>
   17424:	cmp	r1, #0
   17428:	bne	17750 <ReadCompressedDataSlabN+0x1854>
   1742c:	ldr	r3, [sp, #16]
   17430:	mov	r0, r7
   17434:	str	r1, [r3, r8, lsl #2]
   17438:	ldr	r3, [sp, #12]
   1743c:	ldr	r3, [r3, r8, lsl #2]
   17440:	mov	r1, r3
   17444:	str	r3, [sp, #32]
   17448:	bl	3fd18 <__aeabi_idivmod>
   1744c:	ldr	r3, [sp, #32]
   17450:	cmp	r1, #0
   17454:	beq	17710 <ReadCompressedDataSlabN+0x1814>
   17458:	sub	r3, r3, r1
   1745c:	str	r3, [sp, #32]
   17460:	ldr	r3, [sp, #12]
   17464:	ldr	r1, [sp, #32]
   17468:	add	r3, r3, r8, lsl #2
   1746c:	mov	r0, r4
   17470:	ldr	r3, [r3, #-4]
   17474:	str	r3, [sp, #36]	; 0x24
   17478:	ldr	r2, [sp, #36]	; 0x24
   1747c:	ldr	r3, [r9]
   17480:	mla	r3, r3, r2, r1
   17484:	mov	r2, sl
   17488:	mov	r1, fp
   1748c:	bl	243c <InflateSkipData>
   17490:	ldr	r1, [r9]
   17494:	ldr	r3, [sp, #36]	; 0x24
   17498:	ldr	r2, [sp, #32]
   1749c:	mla	r3, r1, r3, r2
   174a0:	add	r7, r7, r3
   174a4:	add	r8, r8, #1
   174a8:	add	r9, r9, #4
   174ac:	b	17400 <ReadCompressedDataSlabN+0x1504>
   174b0:	ldr	r1, [r6, r3, lsl #2]
   174b4:	str	r2, [sp, #24]
   174b8:	sub	r1, r1, #1
   174bc:	str	r1, [r8, r3, lsl #2]
   174c0:	ldr	r1, [r0], #4
   174c4:	str	r1, [r2, #4]
   174c8:	mov	r1, r0
   174cc:	ldr	ip, [sp, #264]	; 0x108
   174d0:	cmp	r1, ip
   174d4:	bne	17508 <ReadCompressedDataSlabN+0x160c>
   174d8:	ldr	ip, [sp, #28]
   174dc:	ldr	r1, [r5, r3, lsl #2]
   174e0:	add	r2, r2, #4
   174e4:	mul	r1, r1, ip
   174e8:	ldr	ip, [sp, #268]	; 0x10c
   174ec:	str	r1, [sp, #28]
   174f0:	ldr	r1, [sp, #24]
   174f4:	ldr	ip, [ip, r3, lsl #2]
   174f8:	add	r3, r3, #1
   174fc:	ldr	r1, [r1]
   17500:	mla	r7, ip, r1, r7
   17504:	b	1730c <ReadCompressedDataSlabN+0x1410>
   17508:	ldr	lr, [r8, r3, lsl #2]
   1750c:	mov	r9, r1
   17510:	ldr	ip, [r1, #-4]!
   17514:	mul	ip, ip, lr
   17518:	ldr	lr, [r2, #4]
   1751c:	str	ip, [r8, r3, lsl #2]
   17520:	ldr	ip, [r9]
   17524:	mul	ip, ip, lr
   17528:	str	ip, [r2, #4]
   1752c:	b	174cc <ReadCompressedDataSlabN+0x15d0>
   17530:	ldr	r3, [r8]
   17534:	cmp	r3, #0
   17538:	beq	176d8 <ReadCompressedDataSlabN+0x17dc>
   1753c:	ldr	r2, [sp, #12]
   17540:	mov	r1, fp
   17544:	add	r2, r2, r6, lsl #2
   17548:	mov	r0, r4
   1754c:	ldr	r9, [r2, #-4]
   17550:	mov	r2, sl
   17554:	mul	r3, r9, r3
   17558:	bl	243c <InflateSkipData>
   1755c:	ldr	r3, [r8]
   17560:	mla	r7, r3, r9, r7
   17564:	b	176d8 <ReadCompressedDataSlabN+0x17dc>
   17568:	add	r3, sp, #216	; 0xd8
   1756c:	add	r6, r3, r6, lsl #2
   17570:	ldr	r3, [r6, #-176]	; 0xffffff50
   17574:	cmp	r3, #0
   17578:	beq	17590 <ReadCompressedDataSlabN+0x1694>
   1757c:	mov	r2, sl
   17580:	mov	r1, fp
   17584:	mov	r0, r4
   17588:	add	r7, r7, r3
   1758c:	bl	243c <InflateSkipData>
   17590:	ldr	r2, [sp, #24]
   17594:	ldr	r3, [r5]
   17598:	add	r3, r2, r3
   1759c:	str	r3, [sp, #24]
   175a0:	ldr	r3, [sp, #24]
   175a4:	ldr	r2, [sp, #28]
   175a8:	cmp	r3, r2
   175ac:	bge	16410 <ReadCompressedDataSlabN+0x514>
   175b0:	ldr	r3, [sp, #268]	; 0x10c
   175b4:	ldr	r3, [r3]
   175b8:	cmp	r3, #0
   175bc:	beq	175dc <ReadCompressedDataSlabN+0x16e0>
   175c0:	mov	r2, sl
   175c4:	mov	r1, fp
   175c8:	mov	r0, r4
   175cc:	bl	243c <InflateSkipData>
   175d0:	ldr	r3, [sp, #268]	; 0x10c
   175d4:	ldr	r3, [r3]
   175d8:	add	r7, r7, r3
   175dc:	ldr	r1, [sp, #24]
   175e0:	ldr	r3, [r5]
   175e4:	ldr	r2, [sp, #20]
   175e8:	str	r3, [sp]
   175ec:	add	r2, r2, r1, lsl #2
   175f0:	mov	r3, sl
   175f4:	mov	r1, fp
   175f8:	mov	r0, r4
   175fc:	bl	11294 <ReadCompressedInt32Data>
   17600:	ldr	r3, [sp, #264]	; 0x108
   17604:	ldr	r2, [sp, #268]	; 0x10c
   17608:	mov	r1, fp
   1760c:	ldr	r3, [r3]
   17610:	ldr	r2, [r2]
   17614:	mov	r0, r4
   17618:	sub	r3, r3, r2
   1761c:	ldr	r2, [r5]
   17620:	sub	r3, r3, r2
   17624:	mov	r2, sl
   17628:	bl	243c <InflateSkipData>
   1762c:	ldr	r3, [sp, #264]	; 0x108
   17630:	ldr	r8, [sp, #268]	; 0x10c
   17634:	ldr	r6, [sp, #32]
   17638:	ldr	r3, [r3]
   1763c:	ldr	r2, [r8], #4
   17640:	sub	r3, r3, r2
   17644:	add	r7, r3, r7
   17648:	ldr	r3, [sp, #260]	; 0x104
   1764c:	cmp	r6, r3
   17650:	bge	17590 <ReadCompressedDataSlabN+0x1694>
   17654:	ldr	r3, [sp, #16]
   17658:	ldr	r1, [r5, r6, lsl #2]
   1765c:	ldr	r0, [r3, r6, lsl #2]
   17660:	add	r0, r0, #1
   17664:	str	r0, [r3, r6, lsl #2]
   17668:	bl	3fd18 <__aeabi_idivmod>
   1766c:	cmp	r1, #0
   17670:	bne	17568 <ReadCompressedDataSlabN+0x166c>
   17674:	ldr	r3, [sp, #16]
   17678:	mov	r0, r7
   1767c:	str	r1, [r3, r6, lsl #2]
   17680:	ldr	r3, [sp, #12]
   17684:	ldr	r9, [r3, r6, lsl #2]
   17688:	mov	r1, r9
   1768c:	bl	3fd18 <__aeabi_idivmod>
   17690:	cmp	r1, #0
   17694:	beq	17530 <ReadCompressedDataSlabN+0x1634>
   17698:	ldr	r3, [sp, #12]
   1769c:	sub	r9, r9, r1
   176a0:	add	r3, r3, r6, lsl #2
   176a4:	mov	r1, fp
   176a8:	ldr	r3, [r3, #-4]
   176ac:	mov	r0, r4
   176b0:	str	r3, [sp, #36]	; 0x24
   176b4:	ldr	r2, [sp, #36]	; 0x24
   176b8:	ldr	r3, [r8]
   176bc:	mla	r3, r3, r2, r9
   176c0:	mov	r2, sl
   176c4:	bl	243c <InflateSkipData>
   176c8:	ldr	r1, [r8]
   176cc:	ldr	r3, [sp, #36]	; 0x24
   176d0:	mla	r9, r1, r3, r9
   176d4:	add	r7, r7, r9
   176d8:	add	r6, r6, #1
   176dc:	add	r8, r8, #4
   176e0:	b	17648 <ReadCompressedDataSlabN+0x174c>
   176e4:	bl	11294 <ReadCompressedInt32Data>
   176e8:	ldr	r3, [r6]
   176ec:	mov	r2, sl
   176f0:	sub	r3, r3, #1
   176f4:	mov	r1, fp
   176f8:	mov	r0, r4
   176fc:	bl	243c <InflateSkipData>
   17700:	ldr	r3, [r6]
   17704:	add	r8, r8, #1
   17708:	add	r7, r7, r3
   1770c:	b	17384 <ReadCompressedDataSlabN+0x1488>
   17710:	ldr	r3, [r9]
   17714:	cmp	r3, #0
   17718:	beq	174a4 <ReadCompressedDataSlabN+0x15a8>
   1771c:	ldr	r2, [sp, #12]
   17720:	mov	r1, fp
   17724:	add	r2, r2, r8, lsl #2
   17728:	mov	r0, r4
   1772c:	ldr	r2, [r2, #-4]
   17730:	str	r2, [sp, #32]
   17734:	mul	r3, r2, r3
   17738:	mov	r2, sl
   1773c:	bl	243c <InflateSkipData>
   17740:	ldr	r3, [r9]
   17744:	ldr	r2, [sp, #32]
   17748:	mla	r7, r3, r2, r7
   1774c:	b	174a4 <ReadCompressedDataSlabN+0x15a8>
   17750:	add	r3, sp, #216	; 0xd8
   17754:	add	r8, r3, r8, lsl #2
   17758:	ldr	r3, [r8, #-176]	; 0xffffff50
   1775c:	cmp	r3, #0
   17760:	beq	17778 <ReadCompressedDataSlabN+0x187c>
   17764:	mov	r2, sl
   17768:	mov	r1, fp
   1776c:	mov	r0, r4
   17770:	add	r7, r7, r3
   17774:	bl	243c <InflateSkipData>
   17778:	ldr	r2, [sp, #24]
   1777c:	ldr	r3, [r5]
   17780:	add	r3, r2, r3
   17784:	str	r3, [sp, #24]
   17788:	b	17344 <ReadCompressedDataSlabN+0x1448>
   1778c:	ldr	r3, [r6]
   17790:	ldr	r2, [sp, #12]
   17794:	sub	r3, r3, #1
   17798:	str	r3, [sp, #40]	; 0x28
   1779c:	ldr	r3, [sp, #264]	; 0x108
   177a0:	ldr	r0, [sp, #264]	; 0x108
   177a4:	mov	r7, #0
   177a8:	ldr	r3, [r3]
   177ac:	str	r3, [sp, #120]	; 0x78
   177b0:	ldr	r3, [r5]
   177b4:	str	r3, [sp, #28]
   177b8:	mov	r3, #1
   177bc:	ldr	r1, [sp, #260]	; 0x104
   177c0:	cmp	r3, r1
   177c4:	blt	17960 <ReadCompressedDataSlabN+0x1a64>
   177c8:	mov	r3, r7
   177cc:	mov	r2, sl
   177d0:	mov	r1, fp
   177d4:	mov	r0, r4
   177d8:	bl	243c <InflateSkipData>
   177dc:	ldr	r3, [r6]
   177e0:	str	r3, [sp, #32]
   177e4:	cmp	r3, #1
   177e8:	mov	r3, #0
   177ec:	str	r3, [sp, #24]
   177f0:	beq	17a50 <ReadCompressedDataSlabN+0x1b54>
   177f4:	ldr	r3, [sp, #24]
   177f8:	ldr	r2, [sp, #28]
   177fc:	cmp	r3, r2
   17800:	bge	16410 <ReadCompressedDataSlabN+0x514>
   17804:	ldr	r3, [sp, #268]	; 0x10c
   17808:	ldr	r3, [r3]
   1780c:	cmp	r3, #0
   17810:	beq	17830 <ReadCompressedDataSlabN+0x1934>
   17814:	mov	r2, sl
   17818:	mov	r1, fp
   1781c:	mov	r0, r4
   17820:	bl	243c <InflateSkipData>
   17824:	ldr	r3, [sp, #268]	; 0x10c
   17828:	ldr	r3, [r3]
   1782c:	add	r7, r7, r3
   17830:	mov	r8, #0
   17834:	ldr	r3, [r5]
   17838:	ldr	r1, [sp, #20]
   1783c:	sub	r3, r3, #1
   17840:	cmp	r8, r3
   17844:	ldr	r3, [sp, #24]
   17848:	mov	r0, r4
   1784c:	add	r2, r3, r8
   17850:	mov	r3, #1
   17854:	str	r3, [sp]
   17858:	add	r2, r1, r2, lsl #2
   1785c:	mov	r3, sl
   17860:	mov	r1, fp
   17864:	blt	17b94 <ReadCompressedDataSlabN+0x1c98>
   17868:	bl	11774 <ReadCompressedUInt32Data>
   1786c:	ldr	r2, [r5]
   17870:	ldr	r3, [r6]
   17874:	sub	r2, r2, #1
   17878:	ldr	r9, [sp, #268]	; 0x10c
   1787c:	mul	r2, r3, r2
   17880:	ldr	r3, [sp, #264]	; 0x108
   17884:	mov	r1, fp
   17888:	mov	r0, r4
   1788c:	ldr	r3, [r3]
   17890:	mov	r8, #1
   17894:	sub	r3, r3, r2
   17898:	ldr	r2, [r9], #4
   1789c:	sub	r3, r3, r2
   178a0:	add	r7, r7, r3
   178a4:	mov	r2, sl
   178a8:	sub	r3, r3, #1
   178ac:	bl	243c <InflateSkipData>
   178b0:	ldr	r3, [sp, #260]	; 0x104
   178b4:	cmp	r8, r3
   178b8:	bge	17c28 <ReadCompressedDataSlabN+0x1d2c>
   178bc:	ldr	r3, [sp, #16]
   178c0:	ldr	r1, [r5, r8, lsl #2]
   178c4:	ldr	r0, [r3, r8, lsl #2]
   178c8:	add	r0, r0, #1
   178cc:	str	r0, [r3, r8, lsl #2]
   178d0:	bl	3fd18 <__aeabi_idivmod>
   178d4:	cmp	r1, #0
   178d8:	bne	17c00 <ReadCompressedDataSlabN+0x1d04>
   178dc:	ldr	r3, [sp, #16]
   178e0:	mov	r0, r7
   178e4:	str	r1, [r3, r8, lsl #2]
   178e8:	ldr	r3, [sp, #12]
   178ec:	ldr	r3, [r3, r8, lsl #2]
   178f0:	mov	r1, r3
   178f4:	str	r3, [sp, #32]
   178f8:	bl	3fd18 <__aeabi_idivmod>
   178fc:	ldr	r3, [sp, #32]
   17900:	cmp	r1, #0
   17904:	beq	17bc0 <ReadCompressedDataSlabN+0x1cc4>
   17908:	sub	r3, r3, r1
   1790c:	str	r3, [sp, #32]
   17910:	ldr	r3, [sp, #12]
   17914:	ldr	r1, [sp, #32]
   17918:	add	r3, r3, r8, lsl #2
   1791c:	mov	r0, r4
   17920:	ldr	r3, [r3, #-4]
   17924:	str	r3, [sp, #36]	; 0x24
   17928:	ldr	r2, [sp, #36]	; 0x24
   1792c:	ldr	r3, [r9]
   17930:	mla	r3, r3, r2, r1
   17934:	mov	r2, sl
   17938:	mov	r1, fp
   1793c:	bl	243c <InflateSkipData>
   17940:	ldr	r1, [r9]
   17944:	ldr	r3, [sp, #36]	; 0x24
   17948:	ldr	r2, [sp, #32]
   1794c:	mla	r3, r1, r3, r2
   17950:	add	r7, r7, r3
   17954:	add	r8, r8, #1
   17958:	add	r9, r9, #4
   1795c:	b	178b0 <ReadCompressedDataSlabN+0x19b4>
   17960:	ldr	r1, [r6, r3, lsl #2]
   17964:	str	r2, [sp, #24]
   17968:	sub	r1, r1, #1
   1796c:	str	r1, [r8, r3, lsl #2]
   17970:	ldr	r1, [r0], #4
   17974:	str	r1, [r2, #4]
   17978:	mov	r1, r0
   1797c:	ldr	ip, [sp, #264]	; 0x108
   17980:	cmp	r1, ip
   17984:	bne	179b8 <ReadCompressedDataSlabN+0x1abc>
   17988:	ldr	ip, [sp, #28]
   1798c:	ldr	r1, [r5, r3, lsl #2]
   17990:	add	r2, r2, #4
   17994:	mul	r1, r1, ip
   17998:	ldr	ip, [sp, #268]	; 0x10c
   1799c:	str	r1, [sp, #28]
   179a0:	ldr	r1, [sp, #24]
   179a4:	ldr	ip, [ip, r3, lsl #2]
   179a8:	add	r3, r3, #1
   179ac:	ldr	r1, [r1]
   179b0:	mla	r7, ip, r1, r7
   179b4:	b	177bc <ReadCompressedDataSlabN+0x18c0>
   179b8:	ldr	lr, [r8, r3, lsl #2]
   179bc:	mov	r9, r1
   179c0:	ldr	ip, [r1, #-4]!
   179c4:	mul	ip, ip, lr
   179c8:	ldr	lr, [r2, #4]
   179cc:	str	ip, [r8, r3, lsl #2]
   179d0:	ldr	ip, [r9]
   179d4:	mul	ip, ip, lr
   179d8:	str	ip, [r2, #4]
   179dc:	b	1797c <ReadCompressedDataSlabN+0x1a80>
   179e0:	ldr	r3, [r8]
   179e4:	cmp	r3, #0
   179e8:	beq	17b88 <ReadCompressedDataSlabN+0x1c8c>
   179ec:	ldr	r2, [sp, #12]
   179f0:	mov	r1, fp
   179f4:	add	r2, r2, r6, lsl #2
   179f8:	mov	r0, r4
   179fc:	ldr	r9, [r2, #-4]
   17a00:	mov	r2, sl
   17a04:	mul	r3, r9, r3
   17a08:	bl	243c <InflateSkipData>
   17a0c:	ldr	r3, [r8]
   17a10:	mla	r7, r3, r9, r7
   17a14:	b	17b88 <ReadCompressedDataSlabN+0x1c8c>
   17a18:	add	r3, sp, #216	; 0xd8
   17a1c:	add	r6, r3, r6, lsl #2
   17a20:	ldr	r3, [r6, #-176]	; 0xffffff50
   17a24:	cmp	r3, #0
   17a28:	beq	17a40 <ReadCompressedDataSlabN+0x1b44>
   17a2c:	mov	r2, sl
   17a30:	mov	r1, fp
   17a34:	mov	r0, r4
   17a38:	add	r7, r7, r3
   17a3c:	bl	243c <InflateSkipData>
   17a40:	ldr	r2, [sp, #24]
   17a44:	ldr	r3, [r5]
   17a48:	add	r3, r2, r3
   17a4c:	str	r3, [sp, #24]
   17a50:	ldr	r3, [sp, #24]
   17a54:	ldr	r2, [sp, #28]
   17a58:	cmp	r3, r2
   17a5c:	bge	16410 <ReadCompressedDataSlabN+0x514>
   17a60:	ldr	r3, [sp, #268]	; 0x10c
   17a64:	ldr	r3, [r3]
   17a68:	cmp	r3, #0
   17a6c:	beq	17a8c <ReadCompressedDataSlabN+0x1b90>
   17a70:	mov	r2, sl
   17a74:	mov	r1, fp
   17a78:	mov	r0, r4
   17a7c:	bl	243c <InflateSkipData>
   17a80:	ldr	r3, [sp, #268]	; 0x10c
   17a84:	ldr	r3, [r3]
   17a88:	add	r7, r7, r3
   17a8c:	ldr	r1, [sp, #24]
   17a90:	ldr	r3, [r5]
   17a94:	ldr	r2, [sp, #20]
   17a98:	str	r3, [sp]
   17a9c:	add	r2, r2, r1, lsl #2
   17aa0:	mov	r3, sl
   17aa4:	mov	r1, fp
   17aa8:	mov	r0, r4
   17aac:	bl	11774 <ReadCompressedUInt32Data>
   17ab0:	ldr	r3, [sp, #264]	; 0x108
   17ab4:	ldr	r2, [sp, #268]	; 0x10c
   17ab8:	mov	r1, fp
   17abc:	ldr	r3, [r3]
   17ac0:	ldr	r2, [r2]
   17ac4:	mov	r0, r4
   17ac8:	sub	r3, r3, r2
   17acc:	ldr	r2, [r5]
   17ad0:	sub	r3, r3, r2
   17ad4:	mov	r2, sl
   17ad8:	bl	243c <InflateSkipData>
   17adc:	ldr	r3, [sp, #264]	; 0x108
   17ae0:	ldr	r8, [sp, #268]	; 0x10c
   17ae4:	ldr	r6, [sp, #32]
   17ae8:	ldr	r3, [r3]
   17aec:	ldr	r2, [r8], #4
   17af0:	sub	r3, r3, r2
   17af4:	add	r7, r3, r7
   17af8:	ldr	r3, [sp, #260]	; 0x104
   17afc:	cmp	r6, r3
   17b00:	bge	17a40 <ReadCompressedDataSlabN+0x1b44>
   17b04:	ldr	r3, [sp, #16]
   17b08:	ldr	r1, [r5, r6, lsl #2]
   17b0c:	ldr	r0, [r3, r6, lsl #2]
   17b10:	add	r0, r0, #1
   17b14:	str	r0, [r3, r6, lsl #2]
   17b18:	bl	3fd18 <__aeabi_idivmod>
   17b1c:	cmp	r1, #0
   17b20:	bne	17a18 <ReadCompressedDataSlabN+0x1b1c>
   17b24:	ldr	r3, [sp, #16]
   17b28:	mov	r0, r7
   17b2c:	str	r1, [r3, r6, lsl #2]
   17b30:	ldr	r3, [sp, #12]
   17b34:	ldr	r9, [r3, r6, lsl #2]
   17b38:	mov	r1, r9
   17b3c:	bl	3fd18 <__aeabi_idivmod>
   17b40:	cmp	r1, #0
   17b44:	beq	179e0 <ReadCompressedDataSlabN+0x1ae4>
   17b48:	ldr	r3, [sp, #12]
   17b4c:	sub	r9, r9, r1
   17b50:	add	r3, r3, r6, lsl #2
   17b54:	mov	r1, fp
   17b58:	ldr	r3, [r3, #-4]
   17b5c:	mov	r0, r4
   17b60:	str	r3, [sp, #36]	; 0x24
   17b64:	ldr	r2, [sp, #36]	; 0x24
   17b68:	ldr	r3, [r8]
   17b6c:	mla	r3, r3, r2, r9
   17b70:	mov	r2, sl
   17b74:	bl	243c <InflateSkipData>
   17b78:	ldr	r1, [r8]
   17b7c:	ldr	r3, [sp, #36]	; 0x24
   17b80:	mla	r9, r1, r3, r9
   17b84:	add	r7, r7, r9
   17b88:	add	r6, r6, #1
   17b8c:	add	r8, r8, #4
   17b90:	b	17af8 <ReadCompressedDataSlabN+0x1bfc>
   17b94:	bl	11774 <ReadCompressedUInt32Data>
   17b98:	ldr	r3, [r6]
   17b9c:	mov	r2, sl
   17ba0:	sub	r3, r3, #1
   17ba4:	mov	r1, fp
   17ba8:	mov	r0, r4
   17bac:	bl	243c <InflateSkipData>
   17bb0:	ldr	r3, [r6]
   17bb4:	add	r8, r8, #1
   17bb8:	add	r7, r7, r3
   17bbc:	b	17834 <ReadCompressedDataSlabN+0x1938>
   17bc0:	ldr	r3, [r9]
   17bc4:	cmp	r3, #0
   17bc8:	beq	17954 <ReadCompressedDataSlabN+0x1a58>
   17bcc:	ldr	r2, [sp, #12]
   17bd0:	mov	r1, fp
   17bd4:	add	r2, r2, r8, lsl #2
   17bd8:	mov	r0, r4
   17bdc:	ldr	r2, [r2, #-4]
   17be0:	str	r2, [sp, #32]
   17be4:	mul	r3, r2, r3
   17be8:	mov	r2, sl
   17bec:	bl	243c <InflateSkipData>
   17bf0:	ldr	r3, [r9]
   17bf4:	ldr	r2, [sp, #32]
   17bf8:	mla	r7, r3, r2, r7
   17bfc:	b	17954 <ReadCompressedDataSlabN+0x1a58>
   17c00:	add	r3, sp, #216	; 0xd8
   17c04:	add	r8, r3, r8, lsl #2
   17c08:	ldr	r3, [r8, #-176]	; 0xffffff50
   17c0c:	cmp	r3, #0
   17c10:	beq	17c28 <ReadCompressedDataSlabN+0x1d2c>
   17c14:	mov	r2, sl
   17c18:	mov	r1, fp
   17c1c:	mov	r0, r4
   17c20:	add	r7, r7, r3
   17c24:	bl	243c <InflateSkipData>
   17c28:	ldr	r2, [sp, #24]
   17c2c:	ldr	r3, [r5]
   17c30:	add	r3, r2, r3
   17c34:	str	r3, [sp, #24]
   17c38:	b	177f4 <ReadCompressedDataSlabN+0x18f8>
   17c3c:	ldr	r3, [r6]
   17c40:	ldr	r2, [sp, #12]
   17c44:	sub	r3, r3, #1
   17c48:	str	r3, [sp, #40]	; 0x28
   17c4c:	ldr	r3, [sp, #264]	; 0x108
   17c50:	ldr	r0, [sp, #264]	; 0x108
   17c54:	mov	r7, #0
   17c58:	ldr	r3, [r3]
   17c5c:	str	r3, [sp, #120]	; 0x78
   17c60:	ldr	r3, [r5]
   17c64:	str	r3, [sp, #28]
   17c68:	mov	r3, #1
   17c6c:	ldr	r1, [sp, #260]	; 0x104
   17c70:	cmp	r3, r1
   17c74:	blt	17e10 <ReadCompressedDataSlabN+0x1f14>
   17c78:	mov	r3, r7
   17c7c:	mov	r2, sl
   17c80:	mov	r1, fp
   17c84:	mov	r0, r4
   17c88:	bl	243c <InflateSkipData>
   17c8c:	ldr	r3, [r6]
   17c90:	str	r3, [sp, #32]
   17c94:	cmp	r3, #1
   17c98:	mov	r3, #0
   17c9c:	str	r3, [sp, #24]
   17ca0:	beq	17f00 <ReadCompressedDataSlabN+0x2004>
   17ca4:	ldr	r3, [sp, #24]
   17ca8:	ldr	r2, [sp, #28]
   17cac:	cmp	r3, r2
   17cb0:	bge	16410 <ReadCompressedDataSlabN+0x514>
   17cb4:	ldr	r3, [sp, #268]	; 0x10c
   17cb8:	ldr	r3, [r3]
   17cbc:	cmp	r3, #0
   17cc0:	beq	17ce0 <ReadCompressedDataSlabN+0x1de4>
   17cc4:	mov	r2, sl
   17cc8:	mov	r1, fp
   17ccc:	mov	r0, r4
   17cd0:	bl	243c <InflateSkipData>
   17cd4:	ldr	r3, [sp, #268]	; 0x10c
   17cd8:	ldr	r3, [r3]
   17cdc:	add	r7, r7, r3
   17ce0:	mov	r8, #0
   17ce4:	ldr	r3, [r5]
   17ce8:	ldr	r1, [sp, #20]
   17cec:	sub	r3, r3, #1
   17cf0:	cmp	r8, r3
   17cf4:	ldr	r3, [sp, #24]
   17cf8:	mov	r0, r4
   17cfc:	add	r2, r3, r8
   17d00:	mov	r3, #1
   17d04:	str	r3, [sp]
   17d08:	add	r2, r1, r2, lsl #1
   17d0c:	mov	r3, sl
   17d10:	mov	r1, fp
   17d14:	blt	18044 <ReadCompressedDataSlabN+0x2148>
   17d18:	bl	11c54 <ReadCompressedInt16Data>
   17d1c:	ldr	r2, [r5]
   17d20:	ldr	r3, [r6]
   17d24:	sub	r2, r2, #1
   17d28:	ldr	r9, [sp, #268]	; 0x10c
   17d2c:	mul	r2, r3, r2
   17d30:	ldr	r3, [sp, #264]	; 0x108
   17d34:	mov	r1, fp
   17d38:	mov	r0, r4
   17d3c:	ldr	r3, [r3]
   17d40:	mov	r8, #1
   17d44:	sub	r3, r3, r2
   17d48:	ldr	r2, [r9], #4
   17d4c:	sub	r3, r3, r2
   17d50:	add	r7, r7, r3
   17d54:	mov	r2, sl
   17d58:	sub	r3, r3, #1
   17d5c:	bl	243c <InflateSkipData>
   17d60:	ldr	r3, [sp, #260]	; 0x104
   17d64:	cmp	r8, r3
   17d68:	bge	180d8 <ReadCompressedDataSlabN+0x21dc>
   17d6c:	ldr	r3, [sp, #16]
   17d70:	ldr	r1, [r5, r8, lsl #2]
   17d74:	ldr	r0, [r3, r8, lsl #2]
   17d78:	add	r0, r0, #1
   17d7c:	str	r0, [r3, r8, lsl #2]
   17d80:	bl	3fd18 <__aeabi_idivmod>
   17d84:	cmp	r1, #0
   17d88:	bne	180b0 <ReadCompressedDataSlabN+0x21b4>
   17d8c:	ldr	r3, [sp, #16]
   17d90:	mov	r0, r7
   17d94:	str	r1, [r3, r8, lsl #2]
   17d98:	ldr	r3, [sp, #12]
   17d9c:	ldr	r3, [r3, r8, lsl #2]
   17da0:	mov	r1, r3
   17da4:	str	r3, [sp, #32]
   17da8:	bl	3fd18 <__aeabi_idivmod>
   17dac:	ldr	r3, [sp, #32]
   17db0:	cmp	r1, #0
   17db4:	beq	18070 <ReadCompressedDataSlabN+0x2174>
   17db8:	sub	r3, r3, r1
   17dbc:	str	r3, [sp, #32]
   17dc0:	ldr	r3, [sp, #12]
   17dc4:	ldr	r1, [sp, #32]
   17dc8:	add	r3, r3, r8, lsl #2
   17dcc:	mov	r0, r4
   17dd0:	ldr	r3, [r3, #-4]
   17dd4:	str	r3, [sp, #36]	; 0x24
   17dd8:	ldr	r2, [sp, #36]	; 0x24
   17ddc:	ldr	r3, [r9]
   17de0:	mla	r3, r3, r2, r1
   17de4:	mov	r2, sl
   17de8:	mov	r1, fp
   17dec:	bl	243c <InflateSkipData>
   17df0:	ldr	r1, [r9]
   17df4:	ldr	r3, [sp, #36]	; 0x24
   17df8:	ldr	r2, [sp, #32]
   17dfc:	mla	r3, r1, r3, r2
   17e00:	add	r7, r7, r3
   17e04:	add	r8, r8, #1
   17e08:	add	r9, r9, #4
   17e0c:	b	17d60 <ReadCompressedDataSlabN+0x1e64>
   17e10:	ldr	r1, [r6, r3, lsl #2]
   17e14:	str	r2, [sp, #24]
   17e18:	sub	r1, r1, #1
   17e1c:	str	r1, [r8, r3, lsl #2]
   17e20:	ldr	r1, [r0], #4
   17e24:	str	r1, [r2, #4]
   17e28:	mov	r1, r0
   17e2c:	ldr	ip, [sp, #264]	; 0x108
   17e30:	cmp	r1, ip
   17e34:	bne	17e68 <ReadCompressedDataSlabN+0x1f6c>
   17e38:	ldr	ip, [sp, #28]
   17e3c:	ldr	r1, [r5, r3, lsl #2]
   17e40:	add	r2, r2, #4
   17e44:	mul	r1, r1, ip
   17e48:	ldr	ip, [sp, #268]	; 0x10c
   17e4c:	str	r1, [sp, #28]
   17e50:	ldr	r1, [sp, #24]
   17e54:	ldr	ip, [ip, r3, lsl #2]
   17e58:	add	r3, r3, #1
   17e5c:	ldr	r1, [r1]
   17e60:	mla	r7, ip, r1, r7
   17e64:	b	17c6c <ReadCompressedDataSlabN+0x1d70>
   17e68:	ldr	lr, [r8, r3, lsl #2]
   17e6c:	mov	r9, r1
   17e70:	ldr	ip, [r1, #-4]!
   17e74:	mul	ip, ip, lr
   17e78:	ldr	lr, [r2, #4]
   17e7c:	str	ip, [r8, r3, lsl #2]
   17e80:	ldr	ip, [r9]
   17e84:	mul	ip, ip, lr
   17e88:	str	ip, [r2, #4]
   17e8c:	b	17e2c <ReadCompressedDataSlabN+0x1f30>
   17e90:	ldr	r3, [r8]
   17e94:	cmp	r3, #0
   17e98:	beq	18038 <ReadCompressedDataSlabN+0x213c>
   17e9c:	ldr	r2, [sp, #12]
   17ea0:	mov	r1, fp
   17ea4:	add	r2, r2, r6, lsl #2
   17ea8:	mov	r0, r4
   17eac:	ldr	r9, [r2, #-4]
   17eb0:	mov	r2, sl
   17eb4:	mul	r3, r9, r3
   17eb8:	bl	243c <InflateSkipData>
   17ebc:	ldr	r3, [r8]
   17ec0:	mla	r7, r3, r9, r7
   17ec4:	b	18038 <ReadCompressedDataSlabN+0x213c>
   17ec8:	add	r3, sp, #216	; 0xd8
   17ecc:	add	r6, r3, r6, lsl #2
   17ed0:	ldr	r3, [r6, #-176]	; 0xffffff50
   17ed4:	cmp	r3, #0
   17ed8:	beq	17ef0 <ReadCompressedDataSlabN+0x1ff4>
   17edc:	mov	r2, sl
   17ee0:	mov	r1, fp
   17ee4:	mov	r0, r4
   17ee8:	add	r7, r7, r3
   17eec:	bl	243c <InflateSkipData>
   17ef0:	ldr	r2, [sp, #24]
   17ef4:	ldr	r3, [r5]
   17ef8:	add	r3, r2, r3
   17efc:	str	r3, [sp, #24]
   17f00:	ldr	r3, [sp, #24]
   17f04:	ldr	r2, [sp, #28]
   17f08:	cmp	r3, r2
   17f0c:	bge	16410 <ReadCompressedDataSlabN+0x514>
   17f10:	ldr	r3, [sp, #268]	; 0x10c
   17f14:	ldr	r3, [r3]
   17f18:	cmp	r3, #0
   17f1c:	beq	17f3c <ReadCompressedDataSlabN+0x2040>
   17f20:	mov	r2, sl
   17f24:	mov	r1, fp
   17f28:	mov	r0, r4
   17f2c:	bl	243c <InflateSkipData>
   17f30:	ldr	r3, [sp, #268]	; 0x10c
   17f34:	ldr	r3, [r3]
   17f38:	add	r7, r7, r3
   17f3c:	ldr	r1, [sp, #24]
   17f40:	ldr	r3, [r5]
   17f44:	ldr	r2, [sp, #20]
   17f48:	str	r3, [sp]
   17f4c:	add	r2, r2, r1, lsl #1
   17f50:	mov	r3, sl
   17f54:	mov	r1, fp
   17f58:	mov	r0, r4
   17f5c:	bl	11c54 <ReadCompressedInt16Data>
   17f60:	ldr	r3, [sp, #264]	; 0x108
   17f64:	ldr	r2, [sp, #268]	; 0x10c
   17f68:	mov	r1, fp
   17f6c:	ldr	r3, [r3]
   17f70:	ldr	r2, [r2]
   17f74:	mov	r0, r4
   17f78:	sub	r3, r3, r2
   17f7c:	ldr	r2, [r5]
   17f80:	sub	r3, r3, r2
   17f84:	mov	r2, sl
   17f88:	bl	243c <InflateSkipData>
   17f8c:	ldr	r3, [sp, #264]	; 0x108
   17f90:	ldr	r8, [sp, #268]	; 0x10c
   17f94:	ldr	r6, [sp, #32]
   17f98:	ldr	r3, [r3]
   17f9c:	ldr	r2, [r8], #4
   17fa0:	sub	r3, r3, r2
   17fa4:	add	r7, r3, r7
   17fa8:	ldr	r3, [sp, #260]	; 0x104
   17fac:	cmp	r6, r3
   17fb0:	bge	17ef0 <ReadCompressedDataSlabN+0x1ff4>
   17fb4:	ldr	r3, [sp, #16]
   17fb8:	ldr	r1, [r5, r6, lsl #2]
   17fbc:	ldr	r0, [r3, r6, lsl #2]
   17fc0:	add	r0, r0, #1
   17fc4:	str	r0, [r3, r6, lsl #2]
   17fc8:	bl	3fd18 <__aeabi_idivmod>
   17fcc:	cmp	r1, #0
   17fd0:	bne	17ec8 <ReadCompressedDataSlabN+0x1fcc>
   17fd4:	ldr	r3, [sp, #16]
   17fd8:	mov	r0, r7
   17fdc:	str	r1, [r3, r6, lsl #2]
   17fe0:	ldr	r3, [sp, #12]
   17fe4:	ldr	r9, [r3, r6, lsl #2]
   17fe8:	mov	r1, r9
   17fec:	bl	3fd18 <__aeabi_idivmod>
   17ff0:	cmp	r1, #0
   17ff4:	beq	17e90 <ReadCompressedDataSlabN+0x1f94>
   17ff8:	ldr	r3, [sp, #12]
   17ffc:	sub	r9, r9, r1
   18000:	add	r3, r3, r6, lsl #2
   18004:	mov	r1, fp
   18008:	ldr	r3, [r3, #-4]
   1800c:	mov	r0, r4
   18010:	str	r3, [sp, #36]	; 0x24
   18014:	ldr	r2, [sp, #36]	; 0x24
   18018:	ldr	r3, [r8]
   1801c:	mla	r3, r3, r2, r9
   18020:	mov	r2, sl
   18024:	bl	243c <InflateSkipData>
   18028:	ldr	r1, [r8]
   1802c:	ldr	r3, [sp, #36]	; 0x24
   18030:	mla	r9, r1, r3, r9
   18034:	add	r7, r7, r9
   18038:	add	r6, r6, #1
   1803c:	add	r8, r8, #4
   18040:	b	17fa8 <ReadCompressedDataSlabN+0x20ac>
   18044:	bl	11c54 <ReadCompressedInt16Data>
   18048:	ldr	r3, [r6]
   1804c:	mov	r2, sl
   18050:	sub	r3, r3, #1
   18054:	mov	r1, fp
   18058:	mov	r0, r4
   1805c:	bl	243c <InflateSkipData>
   18060:	ldr	r3, [r6]
   18064:	add	r8, r8, #1
   18068:	add	r7, r7, r3
   1806c:	b	17ce4 <ReadCompressedDataSlabN+0x1de8>
   18070:	ldr	r3, [r9]
   18074:	cmp	r3, #0
   18078:	beq	17e04 <ReadCompressedDataSlabN+0x1f08>
   1807c:	ldr	r2, [sp, #12]
   18080:	mov	r1, fp
   18084:	add	r2, r2, r8, lsl #2
   18088:	mov	r0, r4
   1808c:	ldr	r2, [r2, #-4]
   18090:	str	r2, [sp, #32]
   18094:	mul	r3, r2, r3
   18098:	mov	r2, sl
   1809c:	bl	243c <InflateSkipData>
   180a0:	ldr	r3, [r9]
   180a4:	ldr	r2, [sp, #32]
   180a8:	mla	r7, r3, r2, r7
   180ac:	b	17e04 <ReadCompressedDataSlabN+0x1f08>
   180b0:	add	r3, sp, #216	; 0xd8
   180b4:	add	r8, r3, r8, lsl #2
   180b8:	ldr	r3, [r8, #-176]	; 0xffffff50
   180bc:	cmp	r3, #0
   180c0:	beq	180d8 <ReadCompressedDataSlabN+0x21dc>
   180c4:	mov	r2, sl
   180c8:	mov	r1, fp
   180cc:	mov	r0, r4
   180d0:	add	r7, r7, r3
   180d4:	bl	243c <InflateSkipData>
   180d8:	ldr	r2, [sp, #24]
   180dc:	ldr	r3, [r5]
   180e0:	add	r3, r2, r3
   180e4:	str	r3, [sp, #24]
   180e8:	b	17ca4 <ReadCompressedDataSlabN+0x1da8>
   180ec:	ldr	r3, [r6]
   180f0:	ldr	r2, [sp, #12]
   180f4:	sub	r3, r3, #1
   180f8:	str	r3, [sp, #40]	; 0x28
   180fc:	ldr	r3, [sp, #264]	; 0x108
   18100:	ldr	r0, [sp, #264]	; 0x108
   18104:	mov	r7, #0
   18108:	ldr	r3, [r3]
   1810c:	str	r3, [sp, #120]	; 0x78
   18110:	ldr	r3, [r5]
   18114:	str	r3, [sp, #28]
   18118:	mov	r3, #1
   1811c:	ldr	r1, [sp, #260]	; 0x104
   18120:	cmp	r3, r1
   18124:	blt	182c0 <ReadCompressedDataSlabN+0x23c4>
   18128:	mov	r3, r7
   1812c:	mov	r2, sl
   18130:	mov	r1, fp
   18134:	mov	r0, r4
   18138:	bl	243c <InflateSkipData>
   1813c:	ldr	r3, [r6]
   18140:	str	r3, [sp, #32]
   18144:	cmp	r3, #1
   18148:	mov	r3, #0
   1814c:	str	r3, [sp, #24]
   18150:	beq	183b0 <ReadCompressedDataSlabN+0x24b4>
   18154:	ldr	r3, [sp, #24]
   18158:	ldr	r2, [sp, #28]
   1815c:	cmp	r3, r2
   18160:	bge	16410 <ReadCompressedDataSlabN+0x514>
   18164:	ldr	r3, [sp, #268]	; 0x10c
   18168:	ldr	r3, [r3]
   1816c:	cmp	r3, #0
   18170:	beq	18190 <ReadCompressedDataSlabN+0x2294>
   18174:	mov	r2, sl
   18178:	mov	r1, fp
   1817c:	mov	r0, r4
   18180:	bl	243c <InflateSkipData>
   18184:	ldr	r3, [sp, #268]	; 0x10c
   18188:	ldr	r3, [r3]
   1818c:	add	r7, r7, r3
   18190:	mov	r8, #0
   18194:	ldr	r3, [r5]
   18198:	ldr	r1, [sp, #20]
   1819c:	sub	r3, r3, #1
   181a0:	cmp	r8, r3
   181a4:	ldr	r3, [sp, #24]
   181a8:	mov	r0, r4
   181ac:	add	r2, r3, r8
   181b0:	mov	r3, #1
   181b4:	str	r3, [sp]
   181b8:	add	r2, r1, r2, lsl #1
   181bc:	mov	r3, sl
   181c0:	mov	r1, fp
   181c4:	blt	184f4 <ReadCompressedDataSlabN+0x25f8>
   181c8:	bl	1215c <ReadCompressedUInt16Data>
   181cc:	ldr	r2, [r5]
   181d0:	ldr	r3, [r6]
   181d4:	sub	r2, r2, #1
   181d8:	ldr	r9, [sp, #268]	; 0x10c
   181dc:	mul	r2, r3, r2
   181e0:	ldr	r3, [sp, #264]	; 0x108
   181e4:	mov	r1, fp
   181e8:	mov	r0, r4
   181ec:	ldr	r3, [r3]
   181f0:	mov	r8, #1
   181f4:	sub	r3, r3, r2
   181f8:	ldr	r2, [r9], #4
   181fc:	sub	r3, r3, r2
   18200:	add	r7, r7, r3
   18204:	mov	r2, sl
   18208:	sub	r3, r3, #1
   1820c:	bl	243c <InflateSkipData>
   18210:	ldr	r3, [sp, #260]	; 0x104
   18214:	cmp	r8, r3
   18218:	bge	18588 <ReadCompressedDataSlabN+0x268c>
   1821c:	ldr	r3, [sp, #16]
   18220:	ldr	r1, [r5, r8, lsl #2]
   18224:	ldr	r0, [r3, r8, lsl #2]
   18228:	add	r0, r0, #1
   1822c:	str	r0, [r3, r8, lsl #2]
   18230:	bl	3fd18 <__aeabi_idivmod>
   18234:	cmp	r1, #0
   18238:	bne	18560 <ReadCompressedDataSlabN+0x2664>
   1823c:	ldr	r3, [sp, #16]
   18240:	mov	r0, r7
   18244:	str	r1, [r3, r8, lsl #2]
   18248:	ldr	r3, [sp, #12]
   1824c:	ldr	r3, [r3, r8, lsl #2]
   18250:	mov	r1, r3
   18254:	str	r3, [sp, #32]
   18258:	bl	3fd18 <__aeabi_idivmod>
   1825c:	ldr	r3, [sp, #32]
   18260:	cmp	r1, #0
   18264:	beq	18520 <ReadCompressedDataSlabN+0x2624>
   18268:	sub	r3, r3, r1
   1826c:	str	r3, [sp, #32]
   18270:	ldr	r3, [sp, #12]
   18274:	ldr	r1, [sp, #32]
   18278:	add	r3, r3, r8, lsl #2
   1827c:	mov	r0, r4
   18280:	ldr	r3, [r3, #-4]
   18284:	str	r3, [sp, #36]	; 0x24
   18288:	ldr	r2, [sp, #36]	; 0x24
   1828c:	ldr	r3, [r9]
   18290:	mla	r3, r3, r2, r1
   18294:	mov	r2, sl
   18298:	mov	r1, fp
   1829c:	bl	243c <InflateSkipData>
   182a0:	ldr	r1, [r9]
   182a4:	ldr	r3, [sp, #36]	; 0x24
   182a8:	ldr	r2, [sp, #32]
   182ac:	mla	r3, r1, r3, r2
   182b0:	add	r7, r7, r3
   182b4:	add	r8, r8, #1
   182b8:	add	r9, r9, #4
   182bc:	b	18210 <ReadCompressedDataSlabN+0x2314>
   182c0:	ldr	r1, [r6, r3, lsl #2]
   182c4:	str	r2, [sp, #24]
   182c8:	sub	r1, r1, #1
   182cc:	str	r1, [r8, r3, lsl #2]
   182d0:	ldr	r1, [r0], #4
   182d4:	str	r1, [r2, #4]
   182d8:	mov	r1, r0
   182dc:	ldr	ip, [sp, #264]	; 0x108
   182e0:	cmp	r1, ip
   182e4:	bne	18318 <ReadCompressedDataSlabN+0x241c>
   182e8:	ldr	ip, [sp, #28]
   182ec:	ldr	r1, [r5, r3, lsl #2]
   182f0:	add	r2, r2, #4
   182f4:	mul	r1, r1, ip
   182f8:	ldr	ip, [sp, #268]	; 0x10c
   182fc:	str	r1, [sp, #28]
   18300:	ldr	r1, [sp, #24]
   18304:	ldr	ip, [ip, r3, lsl #2]
   18308:	add	r3, r3, #1
   1830c:	ldr	r1, [r1]
   18310:	mla	r7, ip, r1, r7
   18314:	b	1811c <ReadCompressedDataSlabN+0x2220>
   18318:	ldr	lr, [r8, r3, lsl #2]
   1831c:	mov	r9, r1
   18320:	ldr	ip, [r1, #-4]!
   18324:	mul	ip, ip, lr
   18328:	ldr	lr, [r2, #4]
   1832c:	str	ip, [r8, r3, lsl #2]
   18330:	ldr	ip, [r9]
   18334:	mul	ip, ip, lr
   18338:	str	ip, [r2, #4]
   1833c:	b	182dc <ReadCompressedDataSlabN+0x23e0>
   18340:	ldr	r3, [r8]
   18344:	cmp	r3, #0
   18348:	beq	184e8 <ReadCompressedDataSlabN+0x25ec>
   1834c:	ldr	r2, [sp, #12]
   18350:	mov	r1, fp
   18354:	add	r2, r2, r6, lsl #2
   18358:	mov	r0, r4
   1835c:	ldr	r9, [r2, #-4]
   18360:	mov	r2, sl
   18364:	mul	r3, r9, r3
   18368:	bl	243c <InflateSkipData>
   1836c:	ldr	r3, [r8]
   18370:	mla	r7, r3, r9, r7
   18374:	b	184e8 <ReadCompressedDataSlabN+0x25ec>
   18378:	add	r3, sp, #216	; 0xd8
   1837c:	add	r6, r3, r6, lsl #2
   18380:	ldr	r3, [r6, #-176]	; 0xffffff50
   18384:	cmp	r3, #0
   18388:	beq	183a0 <ReadCompressedDataSlabN+0x24a4>
   1838c:	mov	r2, sl
   18390:	mov	r1, fp
   18394:	mov	r0, r4
   18398:	add	r7, r7, r3
   1839c:	bl	243c <InflateSkipData>
   183a0:	ldr	r2, [sp, #24]
   183a4:	ldr	r3, [r5]
   183a8:	add	r3, r2, r3
   183ac:	str	r3, [sp, #24]
   183b0:	ldr	r3, [sp, #24]
   183b4:	ldr	r2, [sp, #28]
   183b8:	cmp	r3, r2
   183bc:	bge	16410 <ReadCompressedDataSlabN+0x514>
   183c0:	ldr	r3, [sp, #268]	; 0x10c
   183c4:	ldr	r3, [r3]
   183c8:	cmp	r3, #0
   183cc:	beq	183ec <ReadCompressedDataSlabN+0x24f0>
   183d0:	mov	r2, sl
   183d4:	mov	r1, fp
   183d8:	mov	r0, r4
   183dc:	bl	243c <InflateSkipData>
   183e0:	ldr	r3, [sp, #268]	; 0x10c
   183e4:	ldr	r3, [r3]
   183e8:	add	r7, r7, r3
   183ec:	ldr	r1, [sp, #24]
   183f0:	ldr	r3, [r5]
   183f4:	ldr	r2, [sp, #20]
   183f8:	str	r3, [sp]
   183fc:	add	r2, r2, r1, lsl #1
   18400:	mov	r3, sl
   18404:	mov	r1, fp
   18408:	mov	r0, r4
   1840c:	bl	1215c <ReadCompressedUInt16Data>
   18410:	ldr	r3, [sp, #264]	; 0x108
   18414:	ldr	r2, [sp, #268]	; 0x10c
   18418:	mov	r1, fp
   1841c:	ldr	r3, [r3]
   18420:	ldr	r2, [r2]
   18424:	mov	r0, r4
   18428:	sub	r3, r3, r2
   1842c:	ldr	r2, [r5]
   18430:	sub	r3, r3, r2
   18434:	mov	r2, sl
   18438:	bl	243c <InflateSkipData>
   1843c:	ldr	r3, [sp, #264]	; 0x108
   18440:	ldr	r8, [sp, #268]	; 0x10c
   18444:	ldr	r6, [sp, #32]
   18448:	ldr	r3, [r3]
   1844c:	ldr	r2, [r8], #4
   18450:	sub	r3, r3, r2
   18454:	add	r7, r3, r7
   18458:	ldr	r3, [sp, #260]	; 0x104
   1845c:	cmp	r6, r3
   18460:	bge	183a0 <ReadCompressedDataSlabN+0x24a4>
   18464:	ldr	r3, [sp, #16]
   18468:	ldr	r1, [r5, r6, lsl #2]
   1846c:	ldr	r0, [r3, r6, lsl #2]
   18470:	add	r0, r0, #1
   18474:	str	r0, [r3, r6, lsl #2]
   18478:	bl	3fd18 <__aeabi_idivmod>
   1847c:	cmp	r1, #0
   18480:	bne	18378 <ReadCompressedDataSlabN+0x247c>
   18484:	ldr	r3, [sp, #16]
   18488:	mov	r0, r7
   1848c:	str	r1, [r3, r6, lsl #2]
   18490:	ldr	r3, [sp, #12]
   18494:	ldr	r9, [r3, r6, lsl #2]
   18498:	mov	r1, r9
   1849c:	bl	3fd18 <__aeabi_idivmod>
   184a0:	cmp	r1, #0
   184a4:	beq	18340 <ReadCompressedDataSlabN+0x2444>
   184a8:	ldr	r3, [sp, #12]
   184ac:	sub	r9, r9, r1
   184b0:	add	r3, r3, r6, lsl #2
   184b4:	mov	r1, fp
   184b8:	ldr	r3, [r3, #-4]
   184bc:	mov	r0, r4
   184c0:	str	r3, [sp, #36]	; 0x24
   184c4:	ldr	r2, [sp, #36]	; 0x24
   184c8:	ldr	r3, [r8]
   184cc:	mla	r3, r3, r2, r9
   184d0:	mov	r2, sl
   184d4:	bl	243c <InflateSkipData>
   184d8:	ldr	r1, [r8]
   184dc:	ldr	r3, [sp, #36]	; 0x24
   184e0:	mla	r9, r1, r3, r9
   184e4:	add	r7, r7, r9
   184e8:	add	r6, r6, #1
   184ec:	add	r8, r8, #4
   184f0:	b	18458 <ReadCompressedDataSlabN+0x255c>
   184f4:	bl	1215c <ReadCompressedUInt16Data>
   184f8:	ldr	r3, [r6]
   184fc:	mov	r2, sl
   18500:	sub	r3, r3, #1
   18504:	mov	r1, fp
   18508:	mov	r0, r4
   1850c:	bl	243c <InflateSkipData>
   18510:	ldr	r3, [r6]
   18514:	add	r8, r8, #1
   18518:	add	r7, r7, r3
   1851c:	b	18194 <ReadCompressedDataSlabN+0x2298>
   18520:	ldr	r3, [r9]
   18524:	cmp	r3, #0
   18528:	beq	182b4 <ReadCompressedDataSlabN+0x23b8>
   1852c:	ldr	r2, [sp, #12]
   18530:	mov	r1, fp
   18534:	add	r2, r2, r8, lsl #2
   18538:	mov	r0, r4
   1853c:	ldr	r2, [r2, #-4]
   18540:	str	r2, [sp, #32]
   18544:	mul	r3, r2, r3
   18548:	mov	r2, sl
   1854c:	bl	243c <InflateSkipData>
   18550:	ldr	r3, [r9]
   18554:	ldr	r2, [sp, #32]
   18558:	mla	r7, r3, r2, r7
   1855c:	b	182b4 <ReadCompressedDataSlabN+0x23b8>
   18560:	add	r3, sp, #216	; 0xd8
   18564:	add	r8, r3, r8, lsl #2
   18568:	ldr	r3, [r8, #-176]	; 0xffffff50
   1856c:	cmp	r3, #0
   18570:	beq	18588 <ReadCompressedDataSlabN+0x268c>
   18574:	mov	r2, sl
   18578:	mov	r1, fp
   1857c:	mov	r0, r4
   18580:	add	r7, r7, r3
   18584:	bl	243c <InflateSkipData>
   18588:	ldr	r2, [sp, #24]
   1858c:	ldr	r3, [r5]
   18590:	add	r3, r2, r3
   18594:	str	r3, [sp, #24]
   18598:	b	18154 <ReadCompressedDataSlabN+0x2258>
   1859c:	ldr	r3, [r6]
   185a0:	ldr	r2, [sp, #12]
   185a4:	sub	r3, r3, #1
   185a8:	str	r3, [sp, #40]	; 0x28
   185ac:	ldr	r3, [sp, #264]	; 0x108
   185b0:	ldr	r0, [sp, #264]	; 0x108
   185b4:	mov	r7, #0
   185b8:	ldr	r3, [r3]
   185bc:	str	r3, [sp, #120]	; 0x78
   185c0:	ldr	r3, [r5]
   185c4:	str	r3, [sp, #28]
   185c8:	mov	r3, #1
   185cc:	ldr	r1, [sp, #260]	; 0x104
   185d0:	cmp	r3, r1
   185d4:	blt	18770 <ReadCompressedDataSlabN+0x2874>
   185d8:	mov	r3, r7
   185dc:	mov	r2, sl
   185e0:	mov	r1, fp
   185e4:	mov	r0, r4
   185e8:	bl	243c <InflateSkipData>
   185ec:	ldr	r3, [r6]
   185f0:	str	r3, [sp, #32]
   185f4:	cmp	r3, #1
   185f8:	mov	r3, #0
   185fc:	str	r3, [sp, #24]
   18600:	beq	18860 <ReadCompressedDataSlabN+0x2964>
   18604:	ldr	r3, [sp, #24]
   18608:	ldr	r2, [sp, #28]
   1860c:	cmp	r3, r2
   18610:	bge	16410 <ReadCompressedDataSlabN+0x514>
   18614:	ldr	r3, [sp, #268]	; 0x10c
   18618:	ldr	r3, [r3]
   1861c:	cmp	r3, #0
   18620:	beq	18640 <ReadCompressedDataSlabN+0x2744>
   18624:	mov	r2, sl
   18628:	mov	r1, fp
   1862c:	mov	r0, r4
   18630:	bl	243c <InflateSkipData>
   18634:	ldr	r3, [sp, #268]	; 0x10c
   18638:	ldr	r3, [r3]
   1863c:	add	r7, r7, r3
   18640:	mov	r8, #0
   18644:	ldr	r3, [r5]
   18648:	ldr	r1, [sp, #20]
   1864c:	sub	r3, r3, #1
   18650:	cmp	r8, r3
   18654:	ldr	r3, [sp, #24]
   18658:	mov	r0, r4
   1865c:	add	r2, r3, r8
   18660:	mov	r3, #1
   18664:	str	r3, [sp]
   18668:	add	r2, r1, r2
   1866c:	mov	r3, sl
   18670:	mov	r1, fp
   18674:	blt	189a4 <ReadCompressedDataSlabN+0x2aa8>
   18678:	bl	12664 <ReadCompressedInt8Data>
   1867c:	ldr	r2, [r5]
   18680:	ldr	r3, [r6]
   18684:	sub	r2, r2, #1
   18688:	ldr	r9, [sp, #268]	; 0x10c
   1868c:	mul	r2, r3, r2
   18690:	ldr	r3, [sp, #264]	; 0x108
   18694:	mov	r1, fp
   18698:	mov	r0, r4
   1869c:	ldr	r3, [r3]
   186a0:	mov	r8, #1
   186a4:	sub	r3, r3, r2
   186a8:	ldr	r2, [r9], #4
   186ac:	sub	r3, r3, r2
   186b0:	add	r7, r7, r3
   186b4:	mov	r2, sl
   186b8:	sub	r3, r3, #1
   186bc:	bl	243c <InflateSkipData>
   186c0:	ldr	r3, [sp, #260]	; 0x104
   186c4:	cmp	r8, r3
   186c8:	bge	18a38 <ReadCompressedDataSlabN+0x2b3c>
   186cc:	ldr	r3, [sp, #16]
   186d0:	ldr	r1, [r5, r8, lsl #2]
   186d4:	ldr	r0, [r3, r8, lsl #2]
   186d8:	add	r0, r0, #1
   186dc:	str	r0, [r3, r8, lsl #2]
   186e0:	bl	3fd18 <__aeabi_idivmod>
   186e4:	cmp	r1, #0
   186e8:	bne	18a10 <ReadCompressedDataSlabN+0x2b14>
   186ec:	ldr	r3, [sp, #16]
   186f0:	mov	r0, r7
   186f4:	str	r1, [r3, r8, lsl #2]
   186f8:	ldr	r3, [sp, #12]
   186fc:	ldr	r3, [r3, r8, lsl #2]
   18700:	mov	r1, r3
   18704:	str	r3, [sp, #32]
   18708:	bl	3fd18 <__aeabi_idivmod>
   1870c:	ldr	r3, [sp, #32]
   18710:	cmp	r1, #0
   18714:	beq	189d0 <ReadCompressedDataSlabN+0x2ad4>
   18718:	sub	r3, r3, r1
   1871c:	str	r3, [sp, #32]
   18720:	ldr	r3, [sp, #12]
   18724:	ldr	r1, [sp, #32]
   18728:	add	r3, r3, r8, lsl #2
   1872c:	mov	r0, r4
   18730:	ldr	r3, [r3, #-4]
   18734:	str	r3, [sp, #36]	; 0x24
   18738:	ldr	r2, [sp, #36]	; 0x24
   1873c:	ldr	r3, [r9]
   18740:	mla	r3, r3, r2, r1
   18744:	mov	r2, sl
   18748:	mov	r1, fp
   1874c:	bl	243c <InflateSkipData>
   18750:	ldr	r1, [r9]
   18754:	ldr	r3, [sp, #36]	; 0x24
   18758:	ldr	r2, [sp, #32]
   1875c:	mla	r3, r1, r3, r2
   18760:	add	r7, r7, r3
   18764:	add	r8, r8, #1
   18768:	add	r9, r9, #4
   1876c:	b	186c0 <ReadCompressedDataSlabN+0x27c4>
   18770:	ldr	r1, [r6, r3, lsl #2]
   18774:	str	r2, [sp, #24]
   18778:	sub	r1, r1, #1
   1877c:	str	r1, [r8, r3, lsl #2]
   18780:	ldr	r1, [r0], #4
   18784:	str	r1, [r2, #4]
   18788:	mov	r1, r0
   1878c:	ldr	ip, [sp, #264]	; 0x108
   18790:	cmp	r1, ip
   18794:	bne	187c8 <ReadCompressedDataSlabN+0x28cc>
   18798:	ldr	ip, [sp, #28]
   1879c:	ldr	r1, [r5, r3, lsl #2]
   187a0:	add	r2, r2, #4
   187a4:	mul	r1, r1, ip
   187a8:	ldr	ip, [sp, #268]	; 0x10c
   187ac:	str	r1, [sp, #28]
   187b0:	ldr	r1, [sp, #24]
   187b4:	ldr	ip, [ip, r3, lsl #2]
   187b8:	add	r3, r3, #1
   187bc:	ldr	r1, [r1]
   187c0:	mla	r7, ip, r1, r7
   187c4:	b	185cc <ReadCompressedDataSlabN+0x26d0>
   187c8:	ldr	lr, [r8, r3, lsl #2]
   187cc:	mov	r9, r1
   187d0:	ldr	ip, [r1, #-4]!
   187d4:	mul	ip, ip, lr
   187d8:	ldr	lr, [r2, #4]
   187dc:	str	ip, [r8, r3, lsl #2]
   187e0:	ldr	ip, [r9]
   187e4:	mul	ip, ip, lr
   187e8:	str	ip, [r2, #4]
   187ec:	b	1878c <ReadCompressedDataSlabN+0x2890>
   187f0:	ldr	r3, [r8]
   187f4:	cmp	r3, #0
   187f8:	beq	18998 <ReadCompressedDataSlabN+0x2a9c>
   187fc:	ldr	r2, [sp, #12]
   18800:	mov	r1, fp
   18804:	add	r2, r2, r6, lsl #2
   18808:	mov	r0, r4
   1880c:	ldr	r9, [r2, #-4]
   18810:	mov	r2, sl
   18814:	mul	r3, r9, r3
   18818:	bl	243c <InflateSkipData>
   1881c:	ldr	r3, [r8]
   18820:	mla	r7, r3, r9, r7
   18824:	b	18998 <ReadCompressedDataSlabN+0x2a9c>
   18828:	add	r3, sp, #216	; 0xd8
   1882c:	add	r6, r3, r6, lsl #2
   18830:	ldr	r3, [r6, #-176]	; 0xffffff50
   18834:	cmp	r3, #0
   18838:	beq	18850 <ReadCompressedDataSlabN+0x2954>
   1883c:	mov	r2, sl
   18840:	mov	r1, fp
   18844:	mov	r0, r4
   18848:	add	r7, r7, r3
   1884c:	bl	243c <InflateSkipData>
   18850:	ldr	r2, [sp, #24]
   18854:	ldr	r3, [r5]
   18858:	add	r3, r2, r3
   1885c:	str	r3, [sp, #24]
   18860:	ldr	r3, [sp, #24]
   18864:	ldr	r2, [sp, #28]
   18868:	cmp	r3, r2
   1886c:	bge	16410 <ReadCompressedDataSlabN+0x514>
   18870:	ldr	r3, [sp, #268]	; 0x10c
   18874:	ldr	r3, [r3]
   18878:	cmp	r3, #0
   1887c:	beq	1889c <ReadCompressedDataSlabN+0x29a0>
   18880:	mov	r2, sl
   18884:	mov	r1, fp
   18888:	mov	r0, r4
   1888c:	bl	243c <InflateSkipData>
   18890:	ldr	r3, [sp, #268]	; 0x10c
   18894:	ldr	r3, [r3]
   18898:	add	r7, r7, r3
   1889c:	ldr	r3, [r5]
   188a0:	ldr	r1, [sp, #24]
   188a4:	ldr	r2, [sp, #20]
   188a8:	str	r3, [sp]
   188ac:	add	r2, r2, r1
   188b0:	mov	r3, sl
   188b4:	mov	r1, fp
   188b8:	mov	r0, r4
   188bc:	bl	12664 <ReadCompressedInt8Data>
   188c0:	ldr	r3, [sp, #264]	; 0x108
   188c4:	ldr	r2, [sp, #268]	; 0x10c
   188c8:	mov	r1, fp
   188cc:	ldr	r3, [r3]
   188d0:	ldr	r2, [r2]
   188d4:	mov	r0, r4
   188d8:	sub	r3, r3, r2
   188dc:	ldr	r2, [r5]
   188e0:	sub	r3, r3, r2
   188e4:	mov	r2, sl
   188e8:	bl	243c <InflateSkipData>
   188ec:	ldr	r3, [sp, #264]	; 0x108
   188f0:	ldr	r8, [sp, #268]	; 0x10c
   188f4:	ldr	r6, [sp, #32]
   188f8:	ldr	r3, [r3]
   188fc:	ldr	r2, [r8], #4
   18900:	sub	r3, r3, r2
   18904:	add	r7, r3, r7
   18908:	ldr	r3, [sp, #260]	; 0x104
   1890c:	cmp	r6, r3
   18910:	bge	18850 <ReadCompressedDataSlabN+0x2954>
   18914:	ldr	r3, [sp, #16]
   18918:	ldr	r1, [r5, r6, lsl #2]
   1891c:	ldr	r0, [r3, r6, lsl #2]
   18920:	add	r0, r0, #1
   18924:	str	r0, [r3, r6, lsl #2]
   18928:	bl	3fd18 <__aeabi_idivmod>
   1892c:	cmp	r1, #0
   18930:	bne	18828 <ReadCompressedDataSlabN+0x292c>
   18934:	ldr	r3, [sp, #16]
   18938:	mov	r0, r7
   1893c:	str	r1, [r3, r6, lsl #2]
   18940:	ldr	r3, [sp, #12]
   18944:	ldr	r9, [r3, r6, lsl #2]
   18948:	mov	r1, r9
   1894c:	bl	3fd18 <__aeabi_idivmod>
   18950:	cmp	r1, #0
   18954:	beq	187f0 <ReadCompressedDataSlabN+0x28f4>
   18958:	ldr	r3, [sp, #12]
   1895c:	sub	r9, r9, r1
   18960:	add	r3, r3, r6, lsl #2
   18964:	mov	r1, fp
   18968:	ldr	r3, [r3, #-4]
   1896c:	mov	r0, r4
   18970:	str	r3, [sp, #36]	; 0x24
   18974:	ldr	r2, [sp, #36]	; 0x24
   18978:	ldr	r3, [r8]
   1897c:	mla	r3, r3, r2, r9
   18980:	mov	r2, sl
   18984:	bl	243c <InflateSkipData>
   18988:	ldr	r1, [r8]
   1898c:	ldr	r3, [sp, #36]	; 0x24
   18990:	mla	r9, r1, r3, r9
   18994:	add	r7, r7, r9
   18998:	add	r6, r6, #1
   1899c:	add	r8, r8, #4
   189a0:	b	18908 <ReadCompressedDataSlabN+0x2a0c>
   189a4:	bl	12664 <ReadCompressedInt8Data>
   189a8:	ldr	r3, [r6]
   189ac:	mov	r2, sl
   189b0:	sub	r3, r3, #1
   189b4:	mov	r1, fp
   189b8:	mov	r0, r4
   189bc:	bl	243c <InflateSkipData>
   189c0:	ldr	r3, [r6]
   189c4:	add	r8, r8, #1
   189c8:	add	r7, r7, r3
   189cc:	b	18644 <ReadCompressedDataSlabN+0x2748>
   189d0:	ldr	r3, [r9]
   189d4:	cmp	r3, #0
   189d8:	beq	18764 <ReadCompressedDataSlabN+0x2868>
   189dc:	ldr	r2, [sp, #12]
   189e0:	mov	r1, fp
   189e4:	add	r2, r2, r8, lsl #2
   189e8:	mov	r0, r4
   189ec:	ldr	r2, [r2, #-4]
   189f0:	str	r2, [sp, #32]
   189f4:	mul	r3, r2, r3
   189f8:	mov	r2, sl
   189fc:	bl	243c <InflateSkipData>
   18a00:	ldr	r3, [r9]
   18a04:	ldr	r2, [sp, #32]
   18a08:	mla	r7, r3, r2, r7
   18a0c:	b	18764 <ReadCompressedDataSlabN+0x2868>
   18a10:	add	r3, sp, #216	; 0xd8
   18a14:	add	r8, r3, r8, lsl #2
   18a18:	ldr	r3, [r8, #-176]	; 0xffffff50
   18a1c:	cmp	r3, #0
   18a20:	beq	18a38 <ReadCompressedDataSlabN+0x2b3c>
   18a24:	mov	r2, sl
   18a28:	mov	r1, fp
   18a2c:	mov	r0, r4
   18a30:	add	r7, r7, r3
   18a34:	bl	243c <InflateSkipData>
   18a38:	ldr	r2, [sp, #24]
   18a3c:	ldr	r3, [r5]
   18a40:	add	r3, r2, r3
   18a44:	str	r3, [sp, #24]
   18a48:	b	18604 <ReadCompressedDataSlabN+0x2708>
   18a4c:	ldr	r3, [r6]
   18a50:	ldr	r2, [sp, #12]
   18a54:	sub	r3, r3, #1
   18a58:	str	r3, [sp, #40]	; 0x28
   18a5c:	ldr	r3, [sp, #264]	; 0x108
   18a60:	ldr	r0, [sp, #264]	; 0x108
   18a64:	mov	r7, #0
   18a68:	ldr	r3, [r3]
   18a6c:	str	r3, [sp, #120]	; 0x78
   18a70:	ldr	r3, [r5]
   18a74:	str	r3, [sp, #28]
   18a78:	mov	r3, #1
   18a7c:	ldr	r1, [sp, #260]	; 0x104
   18a80:	cmp	r3, r1
   18a84:	blt	18c20 <ReadCompressedDataSlabN+0x2d24>
   18a88:	mov	r3, r7
   18a8c:	mov	r2, sl
   18a90:	mov	r1, fp
   18a94:	mov	r0, r4
   18a98:	bl	243c <InflateSkipData>
   18a9c:	ldr	r3, [r6]
   18aa0:	str	r3, [sp, #32]
   18aa4:	cmp	r3, #1
   18aa8:	mov	r3, #0
   18aac:	str	r3, [sp, #24]
   18ab0:	beq	18d10 <ReadCompressedDataSlabN+0x2e14>
   18ab4:	ldr	r3, [sp, #24]
   18ab8:	ldr	r2, [sp, #28]
   18abc:	cmp	r3, r2
   18ac0:	bge	16410 <ReadCompressedDataSlabN+0x514>
   18ac4:	ldr	r3, [sp, #268]	; 0x10c
   18ac8:	ldr	r3, [r3]
   18acc:	cmp	r3, #0
   18ad0:	beq	18af0 <ReadCompressedDataSlabN+0x2bf4>
   18ad4:	mov	r2, sl
   18ad8:	mov	r1, fp
   18adc:	mov	r0, r4
   18ae0:	bl	243c <InflateSkipData>
   18ae4:	ldr	r3, [sp, #268]	; 0x10c
   18ae8:	ldr	r3, [r3]
   18aec:	add	r7, r7, r3
   18af0:	mov	r8, #0
   18af4:	ldr	r3, [r5]
   18af8:	ldr	r1, [sp, #20]
   18afc:	sub	r3, r3, #1
   18b00:	cmp	r8, r3
   18b04:	ldr	r3, [sp, #24]
   18b08:	mov	r0, r4
   18b0c:	add	r2, r3, r8
   18b10:	mov	r3, #1
   18b14:	str	r3, [sp]
   18b18:	add	r2, r1, r2
   18b1c:	mov	r3, sl
   18b20:	mov	r1, fp
   18b24:	blt	18e54 <ReadCompressedDataSlabN+0x2f58>
   18b28:	bl	12b24 <ReadCompressedUInt8Data>
   18b2c:	ldr	r2, [r5]
   18b30:	ldr	r3, [r6]
   18b34:	sub	r2, r2, #1
   18b38:	ldr	r9, [sp, #268]	; 0x10c
   18b3c:	mul	r2, r3, r2
   18b40:	ldr	r3, [sp, #264]	; 0x108
   18b44:	mov	r1, fp
   18b48:	mov	r0, r4
   18b4c:	ldr	r3, [r3]
   18b50:	mov	r8, #1
   18b54:	sub	r3, r3, r2
   18b58:	ldr	r2, [r9], #4
   18b5c:	sub	r3, r3, r2
   18b60:	add	r7, r7, r3
   18b64:	mov	r2, sl
   18b68:	sub	r3, r3, #1
   18b6c:	bl	243c <InflateSkipData>
   18b70:	ldr	r3, [sp, #260]	; 0x104
   18b74:	cmp	r8, r3
   18b78:	bge	18ee8 <ReadCompressedDataSlabN+0x2fec>
   18b7c:	ldr	r3, [sp, #16]
   18b80:	ldr	r1, [r5, r8, lsl #2]
   18b84:	ldr	r0, [r3, r8, lsl #2]
   18b88:	add	r0, r0, #1
   18b8c:	str	r0, [r3, r8, lsl #2]
   18b90:	bl	3fd18 <__aeabi_idivmod>
   18b94:	cmp	r1, #0
   18b98:	bne	18ec0 <ReadCompressedDataSlabN+0x2fc4>
   18b9c:	ldr	r3, [sp, #16]
   18ba0:	mov	r0, r7
   18ba4:	str	r1, [r3, r8, lsl #2]
   18ba8:	ldr	r3, [sp, #12]
   18bac:	ldr	r3, [r3, r8, lsl #2]
   18bb0:	mov	r1, r3
   18bb4:	str	r3, [sp, #32]
   18bb8:	bl	3fd18 <__aeabi_idivmod>
   18bbc:	ldr	r3, [sp, #32]
   18bc0:	cmp	r1, #0
   18bc4:	beq	18e80 <ReadCompressedDataSlabN+0x2f84>
   18bc8:	sub	r3, r3, r1
   18bcc:	str	r3, [sp, #32]
   18bd0:	ldr	r3, [sp, #12]
   18bd4:	ldr	r1, [sp, #32]
   18bd8:	add	r3, r3, r8, lsl #2
   18bdc:	mov	r0, r4
   18be0:	ldr	r3, [r3, #-4]
   18be4:	str	r3, [sp, #36]	; 0x24
   18be8:	ldr	r2, [sp, #36]	; 0x24
   18bec:	ldr	r3, [r9]
   18bf0:	mla	r3, r3, r2, r1
   18bf4:	mov	r2, sl
   18bf8:	mov	r1, fp
   18bfc:	bl	243c <InflateSkipData>
   18c00:	ldr	r1, [r9]
   18c04:	ldr	r3, [sp, #36]	; 0x24
   18c08:	ldr	r2, [sp, #32]
   18c0c:	mla	r3, r1, r3, r2
   18c10:	add	r7, r7, r3
   18c14:	add	r8, r8, #1
   18c18:	add	r9, r9, #4
   18c1c:	b	18b70 <ReadCompressedDataSlabN+0x2c74>
   18c20:	ldr	r1, [r6, r3, lsl #2]
   18c24:	str	r2, [sp, #24]
   18c28:	sub	r1, r1, #1
   18c2c:	str	r1, [r8, r3, lsl #2]
   18c30:	ldr	r1, [r0], #4
   18c34:	str	r1, [r2, #4]
   18c38:	mov	r1, r0
   18c3c:	ldr	ip, [sp, #264]	; 0x108
   18c40:	cmp	r1, ip
   18c44:	bne	18c78 <ReadCompressedDataSlabN+0x2d7c>
   18c48:	ldr	ip, [sp, #28]
   18c4c:	ldr	r1, [r5, r3, lsl #2]
   18c50:	add	r2, r2, #4
   18c54:	mul	r1, r1, ip
   18c58:	ldr	ip, [sp, #268]	; 0x10c
   18c5c:	str	r1, [sp, #28]
   18c60:	ldr	r1, [sp, #24]
   18c64:	ldr	ip, [ip, r3, lsl #2]
   18c68:	add	r3, r3, #1
   18c6c:	ldr	r1, [r1]
   18c70:	mla	r7, ip, r1, r7
   18c74:	b	18a7c <ReadCompressedDataSlabN+0x2b80>
   18c78:	ldr	lr, [r8, r3, lsl #2]
   18c7c:	mov	r9, r1
   18c80:	ldr	ip, [r1, #-4]!
   18c84:	mul	ip, ip, lr
   18c88:	ldr	lr, [r2, #4]
   18c8c:	str	ip, [r8, r3, lsl #2]
   18c90:	ldr	ip, [r9]
   18c94:	mul	ip, ip, lr
   18c98:	str	ip, [r2, #4]
   18c9c:	b	18c3c <ReadCompressedDataSlabN+0x2d40>
   18ca0:	ldr	r3, [r8]
   18ca4:	cmp	r3, #0
   18ca8:	beq	18e48 <ReadCompressedDataSlabN+0x2f4c>
   18cac:	ldr	r2, [sp, #12]
   18cb0:	mov	r1, fp
   18cb4:	add	r2, r2, r6, lsl #2
   18cb8:	mov	r0, r4
   18cbc:	ldr	r9, [r2, #-4]
   18cc0:	mov	r2, sl
   18cc4:	mul	r3, r9, r3
   18cc8:	bl	243c <InflateSkipData>
   18ccc:	ldr	r3, [r8]
   18cd0:	mla	r7, r3, r9, r7
   18cd4:	b	18e48 <ReadCompressedDataSlabN+0x2f4c>
   18cd8:	add	r3, sp, #216	; 0xd8
   18cdc:	add	r6, r3, r6, lsl #2
   18ce0:	ldr	r3, [r6, #-176]	; 0xffffff50
   18ce4:	cmp	r3, #0
   18ce8:	beq	18d00 <ReadCompressedDataSlabN+0x2e04>
   18cec:	mov	r2, sl
   18cf0:	mov	r1, fp
   18cf4:	mov	r0, r4
   18cf8:	add	r7, r7, r3
   18cfc:	bl	243c <InflateSkipData>
   18d00:	ldr	r2, [sp, #24]
   18d04:	ldr	r3, [r5]
   18d08:	add	r3, r2, r3
   18d0c:	str	r3, [sp, #24]
   18d10:	ldr	r3, [sp, #24]
   18d14:	ldr	r2, [sp, #28]
   18d18:	cmp	r3, r2
   18d1c:	bge	16410 <ReadCompressedDataSlabN+0x514>
   18d20:	ldr	r3, [sp, #268]	; 0x10c
   18d24:	ldr	r3, [r3]
   18d28:	cmp	r3, #0
   18d2c:	beq	18d4c <ReadCompressedDataSlabN+0x2e50>
   18d30:	mov	r2, sl
   18d34:	mov	r1, fp
   18d38:	mov	r0, r4
   18d3c:	bl	243c <InflateSkipData>
   18d40:	ldr	r3, [sp, #268]	; 0x10c
   18d44:	ldr	r3, [r3]
   18d48:	add	r7, r7, r3
   18d4c:	ldr	r3, [r5]
   18d50:	ldr	r1, [sp, #24]
   18d54:	ldr	r2, [sp, #20]
   18d58:	str	r3, [sp]
   18d5c:	add	r2, r2, r1
   18d60:	mov	r3, sl
   18d64:	mov	r1, fp
   18d68:	mov	r0, r4
   18d6c:	bl	12b24 <ReadCompressedUInt8Data>
   18d70:	ldr	r3, [sp, #264]	; 0x108
   18d74:	ldr	r2, [sp, #268]	; 0x10c
   18d78:	mov	r1, fp
   18d7c:	ldr	r3, [r3]
   18d80:	ldr	r2, [r2]
   18d84:	mov	r0, r4
   18d88:	sub	r3, r3, r2
   18d8c:	ldr	r2, [r5]
   18d90:	sub	r3, r3, r2
   18d94:	mov	r2, sl
   18d98:	bl	243c <InflateSkipData>
   18d9c:	ldr	r3, [sp, #264]	; 0x108
   18da0:	ldr	r8, [sp, #268]	; 0x10c
   18da4:	ldr	r6, [sp, #32]
   18da8:	ldr	r3, [r3]
   18dac:	ldr	r2, [r8], #4
   18db0:	sub	r3, r3, r2
   18db4:	add	r7, r3, r7
   18db8:	ldr	r3, [sp, #260]	; 0x104
   18dbc:	cmp	r6, r3
   18dc0:	bge	18d00 <ReadCompressedDataSlabN+0x2e04>
   18dc4:	ldr	r3, [sp, #16]
   18dc8:	ldr	r1, [r5, r6, lsl #2]
   18dcc:	ldr	r0, [r3, r6, lsl #2]
   18dd0:	add	r0, r0, #1
   18dd4:	str	r0, [r3, r6, lsl #2]
   18dd8:	bl	3fd18 <__aeabi_idivmod>
   18ddc:	cmp	r1, #0
   18de0:	bne	18cd8 <ReadCompressedDataSlabN+0x2ddc>
   18de4:	ldr	r3, [sp, #16]
   18de8:	mov	r0, r7
   18dec:	str	r1, [r3, r6, lsl #2]
   18df0:	ldr	r3, [sp, #12]
   18df4:	ldr	r9, [r3, r6, lsl #2]
   18df8:	mov	r1, r9
   18dfc:	bl	3fd18 <__aeabi_idivmod>
   18e00:	cmp	r1, #0
   18e04:	beq	18ca0 <ReadCompressedDataSlabN+0x2da4>
   18e08:	ldr	r3, [sp, #12]
   18e0c:	sub	r9, r9, r1
   18e10:	add	r3, r3, r6, lsl #2
   18e14:	mov	r1, fp
   18e18:	ldr	r3, [r3, #-4]
   18e1c:	mov	r0, r4
   18e20:	str	r3, [sp, #36]	; 0x24
   18e24:	ldr	r2, [sp, #36]	; 0x24
   18e28:	ldr	r3, [r8]
   18e2c:	mla	r3, r3, r2, r9
   18e30:	mov	r2, sl
   18e34:	bl	243c <InflateSkipData>
   18e38:	ldr	r1, [r8]
   18e3c:	ldr	r3, [sp, #36]	; 0x24
   18e40:	mla	r9, r1, r3, r9
   18e44:	add	r7, r7, r9
   18e48:	add	r6, r6, #1
   18e4c:	add	r8, r8, #4
   18e50:	b	18db8 <ReadCompressedDataSlabN+0x2ebc>
   18e54:	bl	12b24 <ReadCompressedUInt8Data>
   18e58:	ldr	r3, [r6]
   18e5c:	mov	r2, sl
   18e60:	sub	r3, r3, #1
   18e64:	mov	r1, fp
   18e68:	mov	r0, r4
   18e6c:	bl	243c <InflateSkipData>
   18e70:	ldr	r3, [r6]
   18e74:	add	r8, r8, #1
   18e78:	add	r7, r7, r3
   18e7c:	b	18af4 <ReadCompressedDataSlabN+0x2bf8>
   18e80:	ldr	r3, [r9]
   18e84:	cmp	r3, #0
   18e88:	beq	18c14 <ReadCompressedDataSlabN+0x2d18>
   18e8c:	ldr	r2, [sp, #12]
   18e90:	mov	r1, fp
   18e94:	add	r2, r2, r8, lsl #2
   18e98:	mov	r0, r4
   18e9c:	ldr	r2, [r2, #-4]
   18ea0:	str	r2, [sp, #32]
   18ea4:	mul	r3, r2, r3
   18ea8:	mov	r2, sl
   18eac:	bl	243c <InflateSkipData>
   18eb0:	ldr	r3, [r9]
   18eb4:	ldr	r2, [sp, #32]
   18eb8:	mla	r7, r3, r2, r7
   18ebc:	b	18c14 <ReadCompressedDataSlabN+0x2d18>
   18ec0:	add	r3, sp, #216	; 0xd8
   18ec4:	add	r8, r3, r8, lsl #2
   18ec8:	ldr	r3, [r8, #-176]	; 0xffffff50
   18ecc:	cmp	r3, #0
   18ed0:	beq	18ee8 <ReadCompressedDataSlabN+0x2fec>
   18ed4:	mov	r2, sl
   18ed8:	mov	r1, fp
   18edc:	mov	r0, r4
   18ee0:	add	r7, r7, r3
   18ee4:	bl	243c <InflateSkipData>
   18ee8:	ldr	r2, [sp, #24]
   18eec:	ldr	r3, [r5]
   18ef0:	add	r3, r2, r3
   18ef4:	str	r3, [sp, #24]
   18ef8:	b	18ab4 <ReadCompressedDataSlabN+0x2bb8>
   18efc:	mov	r0, #1
   18f00:	b	1641c <ReadCompressedDataSlabN+0x520>

00018f04 <ReadDataSlab1>:
   18f04:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f08:	mov	r5, r0
   18f0c:	mov	r0, r3
   18f10:	mov	r4, r2
   18f14:	mov	r9, r1
   18f18:	mov	r7, r3
   18f1c:	ldr	fp, [sp, #40]	; 0x28
   18f20:	ldr	sl, [sp, #44]	; 0x2c
   18f24:	ldr	r8, [sp, #48]	; 0x30
   18f28:	bl	1600 <Mat_SizeOf@plt>
   18f2c:	sub	sl, sl, #1
   18f30:	mov	r2, #1
   18f34:	mov	r6, r0
   18f38:	mul	r1, r0, fp
   18f3c:	ldr	r0, [r5]
   18f40:	bl	1714 <fseek@plt>
   18f44:	sub	r2, r4, #6
   18f48:	mul	r6, r6, sl
   18f4c:	cmp	r2, #9
   18f50:	addls	pc, pc, r2, lsl #2
   18f54:	b	19398 <ReadDataSlab1+0x494>
   18f58:	b	18f80 <ReadDataSlab1+0x7c>
   18f5c:	b	18ff0 <ReadDataSlab1+0xec>
   18f60:	b	192c8 <ReadDataSlab1+0x3c4>
   18f64:	b	19330 <ReadDataSlab1+0x42c>
   18f68:	b	191f8 <ReadDataSlab1+0x2f4>
   18f6c:	b	19260 <ReadDataSlab1+0x35c>
   18f70:	b	19128 <ReadDataSlab1+0x224>
   18f74:	b	19190 <ReadDataSlab1+0x28c>
   18f78:	b	19058 <ReadDataSlab1+0x154>
   18f7c:	b	190c0 <ReadDataSlab1+0x1bc>
   18f80:	cmp	r6, #0
   18f84:	movne	r4, #0
   18f88:	movne	sl, r4
   18f8c:	movne	fp, #1
   18f90:	bne	18fdc <ReadDataSlab1+0xd8>
   18f94:	mov	r3, r8
   18f98:	mov	r2, r7
   18f9c:	mov	r1, r9
   18fa0:	mov	r0, r5
   18fa4:	add	sp, sp, #4
   18fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fac:	b	f2c8 <ReadDoubleData>
   18fb0:	add	r1, r9, sl, lsl #3
   18fb4:	mov	r3, fp
   18fb8:	mov	r2, r7
   18fbc:	mov	r0, r5
   18fc0:	bl	f2c8 <ReadDoubleData>
   18fc4:	mov	r2, fp
   18fc8:	mov	r1, r6
   18fcc:	add	sl, sl, #1
   18fd0:	add	r4, r4, r0
   18fd4:	ldr	r0, [r5]
   18fd8:	bl	1714 <fseek@plt>
   18fdc:	cmp	sl, r8
   18fe0:	blt	18fb0 <ReadDataSlab1+0xac>
   18fe4:	mov	r0, r4
   18fe8:	add	sp, sp, #4
   18fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff0:	cmp	r6, #0
   18ff4:	movne	r4, #0
   18ff8:	movne	sl, r4
   18ffc:	movne	fp, #1
   19000:	bne	1904c <ReadDataSlab1+0x148>
   19004:	mov	r3, r8
   19008:	mov	r2, r7
   1900c:	mov	r1, r9
   19010:	mov	r0, r5
   19014:	add	sp, sp, #4
   19018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1901c:	b	102f0 <ReadSingleData>
   19020:	add	r1, r9, sl, lsl #2
   19024:	mov	r3, fp
   19028:	mov	r2, r7
   1902c:	mov	r0, r5
   19030:	bl	102f0 <ReadSingleData>
   19034:	mov	r2, fp
   19038:	mov	r1, r6
   1903c:	add	sl, sl, #1
   19040:	add	r4, r4, r0
   19044:	ldr	r0, [r5]
   19048:	bl	1714 <fseek@plt>
   1904c:	cmp	sl, r8
   19050:	blt	19020 <ReadDataSlab1+0x11c>
   19054:	b	18fe4 <ReadDataSlab1+0xe0>
   19058:	cmp	r6, #0
   1905c:	movne	r4, #0
   19060:	movne	sl, r4
   19064:	movne	fp, #1
   19068:	bne	190b4 <ReadDataSlab1+0x1b0>
   1906c:	mov	r3, r8
   19070:	mov	r2, r7
   19074:	mov	r1, r9
   19078:	mov	r0, r5
   1907c:	add	sp, sp, #4
   19080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19084:	b	10810 <ReadInt64Data>
   19088:	add	r1, r9, sl, lsl #3
   1908c:	mov	r3, fp
   19090:	mov	r2, r7
   19094:	mov	r0, r5
   19098:	bl	10810 <ReadInt64Data>
   1909c:	mov	r2, fp
   190a0:	mov	r1, r6
   190a4:	add	sl, sl, #1
   190a8:	add	r4, r4, r0
   190ac:	ldr	r0, [r5]
   190b0:	bl	1714 <fseek@plt>
   190b4:	cmp	sl, r8
   190b8:	blt	19088 <ReadDataSlab1+0x184>
   190bc:	b	18fe4 <ReadDataSlab1+0xe0>
   190c0:	cmp	r6, #0
   190c4:	movne	r4, #0
   190c8:	movne	sl, r4
   190cc:	movne	fp, #1
   190d0:	bne	1911c <ReadDataSlab1+0x218>
   190d4:	mov	r3, r8
   190d8:	mov	r2, r7
   190dc:	mov	r1, r9
   190e0:	mov	r0, r5
   190e4:	add	sp, sp, #4
   190e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190ec:	b	10d40 <ReadUInt64Data>
   190f0:	add	r1, r9, sl, lsl #3
   190f4:	mov	r3, fp
   190f8:	mov	r2, r7
   190fc:	mov	r0, r5
   19100:	bl	10d40 <ReadUInt64Data>
   19104:	mov	r2, fp
   19108:	mov	r1, r6
   1910c:	add	sl, sl, #1
   19110:	add	r4, r4, r0
   19114:	ldr	r0, [r5]
   19118:	bl	1714 <fseek@plt>
   1911c:	cmp	sl, r8
   19120:	blt	190f0 <ReadDataSlab1+0x1ec>
   19124:	b	18fe4 <ReadDataSlab1+0xe0>
   19128:	cmp	r6, #0
   1912c:	movne	r4, #0
   19130:	movne	sl, r4
   19134:	movne	fp, #1
   19138:	bne	19184 <ReadDataSlab1+0x280>
   1913c:	mov	r3, r8
   19140:	mov	r2, r7
   19144:	mov	r1, r9
   19148:	mov	r0, r5
   1914c:	add	sp, sp, #4
   19150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19154:	b	11270 <ReadInt32Data>
   19158:	add	r1, r9, sl, lsl #2
   1915c:	mov	r3, fp
   19160:	mov	r2, r7
   19164:	mov	r0, r5
   19168:	bl	11270 <ReadInt32Data>
   1916c:	mov	r2, fp
   19170:	mov	r1, r6
   19174:	add	sl, sl, #1
   19178:	add	r4, r4, r0
   1917c:	ldr	r0, [r5]
   19180:	bl	1714 <fseek@plt>
   19184:	cmp	sl, r8
   19188:	blt	19158 <ReadDataSlab1+0x254>
   1918c:	b	18fe4 <ReadDataSlab1+0xe0>
   19190:	cmp	r6, #0
   19194:	movne	r4, #0
   19198:	movne	sl, r4
   1919c:	movne	fp, #1
   191a0:	bne	191ec <ReadDataSlab1+0x2e8>
   191a4:	mov	r3, r8
   191a8:	mov	r2, r7
   191ac:	mov	r1, r9
   191b0:	mov	r0, r5
   191b4:	add	sp, sp, #4
   191b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191bc:	b	11750 <ReadUInt32Data>
   191c0:	add	r1, r9, sl, lsl #2
   191c4:	mov	r3, fp
   191c8:	mov	r2, r7
   191cc:	mov	r0, r5
   191d0:	bl	11750 <ReadUInt32Data>
   191d4:	mov	r2, fp
   191d8:	mov	r1, r6
   191dc:	add	sl, sl, #1
   191e0:	add	r4, r4, r0
   191e4:	ldr	r0, [r5]
   191e8:	bl	1714 <fseek@plt>
   191ec:	cmp	sl, r8
   191f0:	blt	191c0 <ReadDataSlab1+0x2bc>
   191f4:	b	18fe4 <ReadDataSlab1+0xe0>
   191f8:	cmp	r6, #0
   191fc:	movne	r4, #0
   19200:	movne	sl, r4
   19204:	movne	fp, #1
   19208:	bne	19254 <ReadDataSlab1+0x350>
   1920c:	mov	r3, r8
   19210:	mov	r2, r7
   19214:	mov	r1, r9
   19218:	mov	r0, r5
   1921c:	add	sp, sp, #4
   19220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19224:	b	11c30 <ReadInt16Data>
   19228:	add	r1, r9, sl, lsl #1
   1922c:	mov	r3, fp
   19230:	mov	r2, r7
   19234:	mov	r0, r5
   19238:	bl	11c30 <ReadInt16Data>
   1923c:	mov	r2, fp
   19240:	mov	r1, r6
   19244:	add	sl, sl, #1
   19248:	add	r4, r4, r0
   1924c:	ldr	r0, [r5]
   19250:	bl	1714 <fseek@plt>
   19254:	cmp	sl, r8
   19258:	blt	19228 <ReadDataSlab1+0x324>
   1925c:	b	18fe4 <ReadDataSlab1+0xe0>
   19260:	cmp	r6, #0
   19264:	movne	r4, #0
   19268:	movne	sl, r4
   1926c:	movne	fp, #1
   19270:	bne	192bc <ReadDataSlab1+0x3b8>
   19274:	mov	r3, r8
   19278:	mov	r2, r7
   1927c:	mov	r1, r9
   19280:	mov	r0, r5
   19284:	add	sp, sp, #4
   19288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1928c:	b	12138 <ReadUInt16Data>
   19290:	add	r1, r9, sl, lsl #1
   19294:	mov	r3, fp
   19298:	mov	r2, r7
   1929c:	mov	r0, r5
   192a0:	bl	12138 <ReadUInt16Data>
   192a4:	mov	r2, fp
   192a8:	mov	r1, r6
   192ac:	add	sl, sl, #1
   192b0:	add	r4, r4, r0
   192b4:	ldr	r0, [r5]
   192b8:	bl	1714 <fseek@plt>
   192bc:	cmp	sl, r8
   192c0:	blt	19290 <ReadDataSlab1+0x38c>
   192c4:	b	18fe4 <ReadDataSlab1+0xe0>
   192c8:	cmp	r6, #0
   192cc:	movne	r4, #0
   192d0:	movne	sl, r4
   192d4:	movne	fp, #1
   192d8:	bne	19324 <ReadDataSlab1+0x420>
   192dc:	mov	r3, r8
   192e0:	mov	r2, r7
   192e4:	mov	r1, r9
   192e8:	mov	r0, r5
   192ec:	add	sp, sp, #4
   192f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192f4:	b	12640 <ReadInt8Data>
   192f8:	add	r1, r9, sl
   192fc:	mov	r3, fp
   19300:	mov	r2, r7
   19304:	mov	r0, r5
   19308:	bl	12640 <ReadInt8Data>
   1930c:	mov	r2, fp
   19310:	mov	r1, r6
   19314:	add	sl, sl, #1
   19318:	add	r4, r4, r0
   1931c:	ldr	r0, [r5]
   19320:	bl	1714 <fseek@plt>
   19324:	cmp	sl, r8
   19328:	blt	192f8 <ReadDataSlab1+0x3f4>
   1932c:	b	18fe4 <ReadDataSlab1+0xe0>
   19330:	cmp	r6, #0
   19334:	movne	r4, #0
   19338:	movne	sl, r4
   1933c:	movne	fp, #1
   19340:	bne	1938c <ReadDataSlab1+0x488>
   19344:	mov	r3, r8
   19348:	mov	r2, r7
   1934c:	mov	r1, r9
   19350:	mov	r0, r5
   19354:	add	sp, sp, #4
   19358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1935c:	b	12b00 <ReadUInt8Data>
   19360:	add	r1, r9, sl
   19364:	mov	r3, fp
   19368:	mov	r2, r7
   1936c:	mov	r0, r5
   19370:	bl	12b00 <ReadUInt8Data>
   19374:	mov	r2, fp
   19378:	mov	r1, r6
   1937c:	add	sl, sl, #1
   19380:	add	r4, r4, r0
   19384:	ldr	r0, [r5]
   19388:	bl	1714 <fseek@plt>
   1938c:	cmp	sl, r8
   19390:	blt	19360 <ReadDataSlab1+0x45c>
   19394:	b	18fe4 <ReadDataSlab1+0xe0>
   19398:	mov	r4, #0
   1939c:	b	18fe4 <ReadDataSlab1+0xe0>

000193a0 <ReadDataSlab2>:
   193a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193a4:	sub	sp, sp, #28
   193a8:	cmp	r1, #0
   193ac:	cmpne	r0, #0
   193b0:	ldr	r9, [sp, #64]	; 0x40
   193b4:	ldr	r8, [sp, #68]	; 0x44
   193b8:	ldr	sl, [sp, #72]	; 0x48
   193bc:	ldr	r6, [sp, #76]	; 0x4c
   193c0:	bne	193cc <ReadDataSlab2+0x2c>
   193c4:	mov	r0, #0
   193c8:	b	194c8 <ReadDataSlab2+0x128>
   193cc:	ldr	ip, [r0]
   193d0:	cmp	ip, #0
   193d4:	beq	193c4 <ReadDataSlab2+0x24>
   193d8:	cmp	sl, #0
   193dc:	cmpne	r8, #0
   193e0:	moveq	ip, #1
   193e4:	movne	ip, #0
   193e8:	cmp	r6, #0
   193ec:	orreq	ip, ip, #1
   193f0:	cmp	ip, #0
   193f4:	bne	193c4 <ReadDataSlab2+0x24>
   193f8:	mov	r4, r0
   193fc:	mov	r0, r3
   19400:	mov	fp, r2
   19404:	mov	r5, r1
   19408:	str	r3, [sp, #4]
   1940c:	bl	1600 <Mat_SizeOf@plt>
   19410:	sub	r2, fp, #6
   19414:	mov	r7, r0
   19418:	cmp	r2, #9
   1941c:	addls	pc, pc, r2, lsl #2
   19420:	b	193c4 <ReadDataSlab2+0x24>
   19424:	b	1944c <ReadDataSlab2+0xac>
   19428:	b	195a4 <ReadDataSlab2+0x204>
   1942c:	b	19e64 <ReadDataSlab2+0xac4>
   19430:	b	19fa8 <ReadDataSlab2+0xc08>
   19434:	b	19be4 <ReadDataSlab2+0x844>
   19438:	b	19d24 <ReadDataSlab2+0x984>
   1943c:	b	19964 <ReadDataSlab2+0x5c4>
   19440:	b	19aa4 <ReadDataSlab2+0x704>
   19444:	b	196e4 <ReadDataSlab2+0x344>
   19448:	b	19824 <ReadDataSlab2+0x484>
   1944c:	ldr	r1, [sl]
   19450:	ldr	r2, [r9]
   19454:	cmp	r1, #1
   19458:	ldr	r0, [sl, #4]
   1945c:	bne	19490 <ReadDataSlab2+0xf0>
   19460:	ldr	r3, [r6]
   19464:	cmp	r3, r2
   19468:	bne	19490 <ReadDataSlab2+0xf0>
   1946c:	cmp	r0, #1
   19470:	bne	19490 <ReadDataSlab2+0xf0>
   19474:	ldr	r2, [r6, #4]
   19478:	mov	r1, r5
   1947c:	mov	r0, r4
   19480:	mul	r3, r2, r3
   19484:	ldr	r2, [sp, #4]
   19488:	bl	f2c8 <ReadDoubleData>
   1948c:	b	193c4 <ReadDataSlab2+0x24>
   19490:	sub	r1, r1, #1
   19494:	mul	r2, r2, r0
   19498:	mul	r3, r7, r1
   1949c:	ldr	r0, [r4]
   194a0:	str	r3, [sp, #12]
   194a4:	mul	r3, r7, r2
   194a8:	str	r3, [sp, #16]
   194ac:	bl	151c <ftell@plt>
   194b0:	cmn	r0, #1
   194b4:	bne	194d0 <ReadDataSlab2+0x130>
   194b8:	ldr	r0, [pc, #3116]	; 1a0ec <ReadDataSlab2+0xd4c>
   194bc:	add	r0, pc, r0
   194c0:	bl	1690 <Mat_Critical@plt>
   194c4:	mvn	r0, #0
   194c8:	add	sp, sp, #28
   194cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194d0:	ldr	r1, [r9]
   194d4:	ldr	r3, [r8, #4]
   194d8:	mov	r2, #1
   194dc:	ldr	r0, [r4]
   194e0:	mul	r1, r1, r3
   194e4:	mov	fp, #0
   194e8:	mov	r9, #1
   194ec:	mul	r1, r7, r1
   194f0:	bl	1714 <fseek@plt>
   194f4:	ldr	r3, [r6, #4]
   194f8:	cmp	fp, r3
   194fc:	bge	193c4 <ReadDataSlab2+0x24>
   19500:	ldr	r0, [r4]
   19504:	bl	151c <ftell@plt>
   19508:	cmn	r0, #1
   1950c:	str	r0, [sp, #8]
   19510:	beq	194b8 <ReadDataSlab2+0x118>
   19514:	ldr	r1, [r8]
   19518:	mov	r2, r9
   1951c:	ldr	r0, [r4]
   19520:	mul	r1, r1, r7
   19524:	bl	1714 <fseek@plt>
   19528:	mov	sl, #0
   1952c:	ldr	r3, [r6]
   19530:	cmp	sl, r3
   19534:	blt	1956c <ReadDataSlab2+0x1cc>
   19538:	ldr	r0, [r4]
   1953c:	bl	151c <ftell@plt>
   19540:	cmn	r0, #1
   19544:	beq	194b8 <ReadDataSlab2+0x118>
   19548:	ldr	r3, [sp, #16]
   1954c:	mov	r2, r9
   19550:	sub	r1, r3, r0
   19554:	ldr	r3, [sp, #8]
   19558:	ldr	r0, [r4]
   1955c:	add	r1, r1, r3
   19560:	bl	1714 <fseek@plt>
   19564:	add	fp, fp, #1
   19568:	b	194f4 <ReadDataSlab2+0x154>
   1956c:	add	r3, r5, #8
   19570:	mov	r1, r5
   19574:	str	r3, [sp, #20]
   19578:	ldr	r2, [sp, #4]
   1957c:	mov	r3, r9
   19580:	mov	r0, r4
   19584:	bl	f2c8 <ReadDoubleData>
   19588:	mov	r2, r9
   1958c:	ldr	r1, [sp, #12]
   19590:	ldr	r0, [r4]
   19594:	bl	1714 <fseek@plt>
   19598:	add	sl, sl, #1
   1959c:	ldr	r5, [sp, #20]
   195a0:	b	1952c <ReadDataSlab2+0x18c>
   195a4:	ldr	r1, [sl]
   195a8:	ldr	r2, [r9]
   195ac:	cmp	r1, #1
   195b0:	ldr	r0, [sl, #4]
   195b4:	bne	195e8 <ReadDataSlab2+0x248>
   195b8:	ldr	r3, [r6]
   195bc:	cmp	r3, r2
   195c0:	bne	195e8 <ReadDataSlab2+0x248>
   195c4:	cmp	r0, #1
   195c8:	bne	195e8 <ReadDataSlab2+0x248>
   195cc:	ldr	r2, [r6, #4]
   195d0:	mov	r1, r5
   195d4:	mov	r0, r4
   195d8:	mul	r3, r2, r3
   195dc:	ldr	r2, [sp, #4]
   195e0:	bl	102f0 <ReadSingleData>
   195e4:	b	193c4 <ReadDataSlab2+0x24>
   195e8:	sub	r1, r1, #1
   195ec:	mul	r2, r2, r0
   195f0:	mul	r3, r7, r1
   195f4:	ldr	r0, [r4]
   195f8:	str	r3, [sp, #12]
   195fc:	mul	r3, r7, r2
   19600:	str	r3, [sp, #16]
   19604:	bl	151c <ftell@plt>
   19608:	cmn	r0, #1
   1960c:	beq	194b8 <ReadDataSlab2+0x118>
   19610:	ldr	r1, [r9]
   19614:	ldr	r3, [r8, #4]
   19618:	mov	r2, #1
   1961c:	ldr	r0, [r4]
   19620:	mul	r1, r1, r3
   19624:	mov	fp, #0
   19628:	mov	r9, #1
   1962c:	mul	r1, r7, r1
   19630:	bl	1714 <fseek@plt>
   19634:	ldr	r3, [r6, #4]
   19638:	cmp	fp, r3
   1963c:	bge	193c4 <ReadDataSlab2+0x24>
   19640:	ldr	r0, [r4]
   19644:	bl	151c <ftell@plt>
   19648:	cmn	r0, #1
   1964c:	str	r0, [sp, #8]
   19650:	beq	194b8 <ReadDataSlab2+0x118>
   19654:	ldr	r1, [r8]
   19658:	mov	r2, r9
   1965c:	ldr	r0, [r4]
   19660:	mul	r1, r1, r7
   19664:	bl	1714 <fseek@plt>
   19668:	mov	sl, #0
   1966c:	ldr	r3, [r6]
   19670:	cmp	sl, r3
   19674:	blt	196ac <ReadDataSlab2+0x30c>
   19678:	ldr	r0, [r4]
   1967c:	bl	151c <ftell@plt>
   19680:	cmn	r0, #1
   19684:	beq	194b8 <ReadDataSlab2+0x118>
   19688:	ldr	r3, [sp, #16]
   1968c:	mov	r2, r9
   19690:	sub	r1, r3, r0
   19694:	ldr	r3, [sp, #8]
   19698:	ldr	r0, [r4]
   1969c:	add	r1, r1, r3
   196a0:	bl	1714 <fseek@plt>
   196a4:	add	fp, fp, #1
   196a8:	b	19634 <ReadDataSlab2+0x294>
   196ac:	add	r3, r5, #4
   196b0:	mov	r1, r5
   196b4:	str	r3, [sp, #20]
   196b8:	ldr	r2, [sp, #4]
   196bc:	mov	r3, r9
   196c0:	mov	r0, r4
   196c4:	bl	102f0 <ReadSingleData>
   196c8:	mov	r2, r9
   196cc:	ldr	r1, [sp, #12]
   196d0:	ldr	r0, [r4]
   196d4:	bl	1714 <fseek@plt>
   196d8:	add	sl, sl, #1
   196dc:	ldr	r5, [sp, #20]
   196e0:	b	1966c <ReadDataSlab2+0x2cc>
   196e4:	ldr	r1, [sl]
   196e8:	ldr	r2, [r9]
   196ec:	cmp	r1, #1
   196f0:	ldr	r0, [sl, #4]
   196f4:	bne	19728 <ReadDataSlab2+0x388>
   196f8:	ldr	r3, [r6]
   196fc:	cmp	r3, r2
   19700:	bne	19728 <ReadDataSlab2+0x388>
   19704:	cmp	r0, #1
   19708:	bne	19728 <ReadDataSlab2+0x388>
   1970c:	ldr	r2, [r6, #4]
   19710:	mov	r1, r5
   19714:	mov	r0, r4
   19718:	mul	r3, r2, r3
   1971c:	ldr	r2, [sp, #4]
   19720:	bl	10810 <ReadInt64Data>
   19724:	b	193c4 <ReadDataSlab2+0x24>
   19728:	sub	r1, r1, #1
   1972c:	mul	r2, r2, r0
   19730:	mul	r3, r7, r1
   19734:	ldr	r0, [r4]
   19738:	str	r3, [sp, #12]
   1973c:	mul	r3, r7, r2
   19740:	str	r3, [sp, #16]
   19744:	bl	151c <ftell@plt>
   19748:	cmn	r0, #1
   1974c:	beq	194b8 <ReadDataSlab2+0x118>
   19750:	ldr	r1, [r9]
   19754:	ldr	r3, [r8, #4]
   19758:	mov	r2, #1
   1975c:	ldr	r0, [r4]
   19760:	mul	r1, r1, r3
   19764:	mov	fp, #0
   19768:	mov	r9, #1
   1976c:	mul	r1, r7, r1
   19770:	bl	1714 <fseek@plt>
   19774:	ldr	r3, [r6, #4]
   19778:	cmp	fp, r3
   1977c:	bge	193c4 <ReadDataSlab2+0x24>
   19780:	ldr	r0, [r4]
   19784:	bl	151c <ftell@plt>
   19788:	cmn	r0, #1
   1978c:	str	r0, [sp, #8]
   19790:	beq	194b8 <ReadDataSlab2+0x118>
   19794:	ldr	r1, [r8]
   19798:	mov	r2, r9
   1979c:	ldr	r0, [r4]
   197a0:	mul	r1, r1, r7
   197a4:	bl	1714 <fseek@plt>
   197a8:	mov	sl, #0
   197ac:	ldr	r3, [r6]
   197b0:	cmp	sl, r3
   197b4:	blt	197ec <ReadDataSlab2+0x44c>
   197b8:	ldr	r0, [r4]
   197bc:	bl	151c <ftell@plt>
   197c0:	cmn	r0, #1
   197c4:	beq	194b8 <ReadDataSlab2+0x118>
   197c8:	ldr	r3, [sp, #16]
   197cc:	mov	r2, r9
   197d0:	sub	r1, r3, r0
   197d4:	ldr	r3, [sp, #8]
   197d8:	ldr	r0, [r4]
   197dc:	add	r1, r1, r3
   197e0:	bl	1714 <fseek@plt>
   197e4:	add	fp, fp, #1
   197e8:	b	19774 <ReadDataSlab2+0x3d4>
   197ec:	add	r3, r5, #8
   197f0:	mov	r1, r5
   197f4:	str	r3, [sp, #20]
   197f8:	ldr	r2, [sp, #4]
   197fc:	mov	r3, r9
   19800:	mov	r0, r4
   19804:	bl	10810 <ReadInt64Data>
   19808:	mov	r2, r9
   1980c:	ldr	r1, [sp, #12]
   19810:	ldr	r0, [r4]
   19814:	bl	1714 <fseek@plt>
   19818:	add	sl, sl, #1
   1981c:	ldr	r5, [sp, #20]
   19820:	b	197ac <ReadDataSlab2+0x40c>
   19824:	ldr	r1, [sl]
   19828:	ldr	r2, [r9]
   1982c:	cmp	r1, #1
   19830:	ldr	r0, [sl, #4]
   19834:	bne	19868 <ReadDataSlab2+0x4c8>
   19838:	ldr	r3, [r6]
   1983c:	cmp	r3, r2
   19840:	bne	19868 <ReadDataSlab2+0x4c8>
   19844:	cmp	r0, #1
   19848:	bne	19868 <ReadDataSlab2+0x4c8>
   1984c:	ldr	r2, [r6, #4]
   19850:	mov	r1, r5
   19854:	mov	r0, r4
   19858:	mul	r3, r2, r3
   1985c:	ldr	r2, [sp, #4]
   19860:	bl	10d40 <ReadUInt64Data>
   19864:	b	193c4 <ReadDataSlab2+0x24>
   19868:	sub	r1, r1, #1
   1986c:	mul	r2, r2, r0
   19870:	mul	r3, r7, r1
   19874:	ldr	r0, [r4]
   19878:	str	r3, [sp, #12]
   1987c:	mul	r3, r7, r2
   19880:	str	r3, [sp, #16]
   19884:	bl	151c <ftell@plt>
   19888:	cmn	r0, #1
   1988c:	beq	194b8 <ReadDataSlab2+0x118>
   19890:	ldr	r1, [r9]
   19894:	ldr	r3, [r8, #4]
   19898:	mov	r2, #1
   1989c:	ldr	r0, [r4]
   198a0:	mul	r1, r1, r3
   198a4:	mov	fp, #0
   198a8:	mov	r9, #1
   198ac:	mul	r1, r7, r1
   198b0:	bl	1714 <fseek@plt>
   198b4:	ldr	r3, [r6, #4]
   198b8:	cmp	fp, r3
   198bc:	bge	193c4 <ReadDataSlab2+0x24>
   198c0:	ldr	r0, [r4]
   198c4:	bl	151c <ftell@plt>
   198c8:	cmn	r0, #1
   198cc:	str	r0, [sp, #8]
   198d0:	beq	194b8 <ReadDataSlab2+0x118>
   198d4:	ldr	r1, [r8]
   198d8:	mov	r2, r9
   198dc:	ldr	r0, [r4]
   198e0:	mul	r1, r1, r7
   198e4:	bl	1714 <fseek@plt>
   198e8:	mov	sl, #0
   198ec:	ldr	r3, [r6]
   198f0:	cmp	sl, r3
   198f4:	blt	1992c <ReadDataSlab2+0x58c>
   198f8:	ldr	r0, [r4]
   198fc:	bl	151c <ftell@plt>
   19900:	cmn	r0, #1
   19904:	beq	194b8 <ReadDataSlab2+0x118>
   19908:	ldr	r3, [sp, #16]
   1990c:	mov	r2, r9
   19910:	sub	r1, r3, r0
   19914:	ldr	r3, [sp, #8]
   19918:	ldr	r0, [r4]
   1991c:	add	r1, r1, r3
   19920:	bl	1714 <fseek@plt>
   19924:	add	fp, fp, #1
   19928:	b	198b4 <ReadDataSlab2+0x514>
   1992c:	add	r3, r5, #8
   19930:	mov	r1, r5
   19934:	str	r3, [sp, #20]
   19938:	ldr	r2, [sp, #4]
   1993c:	mov	r3, r9
   19940:	mov	r0, r4
   19944:	bl	10d40 <ReadUInt64Data>
   19948:	mov	r2, r9
   1994c:	ldr	r1, [sp, #12]
   19950:	ldr	r0, [r4]
   19954:	bl	1714 <fseek@plt>
   19958:	add	sl, sl, #1
   1995c:	ldr	r5, [sp, #20]
   19960:	b	198ec <ReadDataSlab2+0x54c>
   19964:	ldr	r1, [sl]
   19968:	ldr	r2, [r9]
   1996c:	cmp	r1, #1
   19970:	ldr	r0, [sl, #4]
   19974:	bne	199a8 <ReadDataSlab2+0x608>
   19978:	ldr	r3, [r6]
   1997c:	cmp	r3, r2
   19980:	bne	199a8 <ReadDataSlab2+0x608>
   19984:	cmp	r0, #1
   19988:	bne	199a8 <ReadDataSlab2+0x608>
   1998c:	ldr	r2, [r6, #4]
   19990:	mov	r1, r5
   19994:	mov	r0, r4
   19998:	mul	r3, r2, r3
   1999c:	ldr	r2, [sp, #4]
   199a0:	bl	11270 <ReadInt32Data>
   199a4:	b	193c4 <ReadDataSlab2+0x24>
   199a8:	sub	r1, r1, #1
   199ac:	mul	r2, r2, r0
   199b0:	mul	r3, r7, r1
   199b4:	ldr	r0, [r4]
   199b8:	str	r3, [sp, #12]
   199bc:	mul	r3, r7, r2
   199c0:	str	r3, [sp, #16]
   199c4:	bl	151c <ftell@plt>
   199c8:	cmn	r0, #1
   199cc:	beq	194b8 <ReadDataSlab2+0x118>
   199d0:	ldr	r1, [r9]
   199d4:	ldr	r3, [r8, #4]
   199d8:	mov	r2, #1
   199dc:	ldr	r0, [r4]
   199e0:	mul	r1, r1, r3
   199e4:	mov	fp, #0
   199e8:	mov	r9, #1
   199ec:	mul	r1, r7, r1
   199f0:	bl	1714 <fseek@plt>
   199f4:	ldr	r3, [r6, #4]
   199f8:	cmp	fp, r3
   199fc:	bge	193c4 <ReadDataSlab2+0x24>
   19a00:	ldr	r0, [r4]
   19a04:	bl	151c <ftell@plt>
   19a08:	cmn	r0, #1
   19a0c:	str	r0, [sp, #8]
   19a10:	beq	194b8 <ReadDataSlab2+0x118>
   19a14:	ldr	r1, [r8]
   19a18:	mov	r2, r9
   19a1c:	ldr	r0, [r4]
   19a20:	mul	r1, r1, r7
   19a24:	bl	1714 <fseek@plt>
   19a28:	mov	sl, #0
   19a2c:	ldr	r3, [r6]
   19a30:	cmp	sl, r3
   19a34:	blt	19a6c <ReadDataSlab2+0x6cc>
   19a38:	ldr	r0, [r4]
   19a3c:	bl	151c <ftell@plt>
   19a40:	cmn	r0, #1
   19a44:	beq	194b8 <ReadDataSlab2+0x118>
   19a48:	ldr	r3, [sp, #16]
   19a4c:	mov	r2, r9
   19a50:	sub	r1, r3, r0
   19a54:	ldr	r3, [sp, #8]
   19a58:	ldr	r0, [r4]
   19a5c:	add	r1, r1, r3
   19a60:	bl	1714 <fseek@plt>
   19a64:	add	fp, fp, #1
   19a68:	b	199f4 <ReadDataSlab2+0x654>
   19a6c:	add	r3, r5, #4
   19a70:	mov	r1, r5
   19a74:	str	r3, [sp, #20]
   19a78:	ldr	r2, [sp, #4]
   19a7c:	mov	r3, r9
   19a80:	mov	r0, r4
   19a84:	bl	11270 <ReadInt32Data>
   19a88:	mov	r2, r9
   19a8c:	ldr	r1, [sp, #12]
   19a90:	ldr	r0, [r4]
   19a94:	bl	1714 <fseek@plt>
   19a98:	add	sl, sl, #1
   19a9c:	ldr	r5, [sp, #20]
   19aa0:	b	19a2c <ReadDataSlab2+0x68c>
   19aa4:	ldr	r1, [sl]
   19aa8:	ldr	r2, [r9]
   19aac:	cmp	r1, #1
   19ab0:	ldr	r0, [sl, #4]
   19ab4:	bne	19ae8 <ReadDataSlab2+0x748>
   19ab8:	ldr	r3, [r6]
   19abc:	cmp	r3, r2
   19ac0:	bne	19ae8 <ReadDataSlab2+0x748>
   19ac4:	cmp	r0, #1
   19ac8:	bne	19ae8 <ReadDataSlab2+0x748>
   19acc:	ldr	r2, [r6, #4]
   19ad0:	mov	r1, r5
   19ad4:	mov	r0, r4
   19ad8:	mul	r3, r2, r3
   19adc:	ldr	r2, [sp, #4]
   19ae0:	bl	11750 <ReadUInt32Data>
   19ae4:	b	193c4 <ReadDataSlab2+0x24>
   19ae8:	sub	r1, r1, #1
   19aec:	mul	r2, r2, r0
   19af0:	mul	r3, r7, r1
   19af4:	ldr	r0, [r4]
   19af8:	str	r3, [sp, #12]
   19afc:	mul	r3, r7, r2
   19b00:	str	r3, [sp, #16]
   19b04:	bl	151c <ftell@plt>
   19b08:	cmn	r0, #1
   19b0c:	beq	194b8 <ReadDataSlab2+0x118>
   19b10:	ldr	r1, [r9]
   19b14:	ldr	r3, [r8, #4]
   19b18:	mov	r2, #1
   19b1c:	ldr	r0, [r4]
   19b20:	mul	r1, r1, r3
   19b24:	mov	fp, #0
   19b28:	mov	r9, #1
   19b2c:	mul	r1, r7, r1
   19b30:	bl	1714 <fseek@plt>
   19b34:	ldr	r3, [r6, #4]
   19b38:	cmp	fp, r3
   19b3c:	bge	193c4 <ReadDataSlab2+0x24>
   19b40:	ldr	r0, [r4]
   19b44:	bl	151c <ftell@plt>
   19b48:	cmn	r0, #1
   19b4c:	str	r0, [sp, #8]
   19b50:	beq	194b8 <ReadDataSlab2+0x118>
   19b54:	ldr	r1, [r8]
   19b58:	mov	r2, r9
   19b5c:	ldr	r0, [r4]
   19b60:	mul	r1, r1, r7
   19b64:	bl	1714 <fseek@plt>
   19b68:	mov	sl, #0
   19b6c:	ldr	r3, [r6]
   19b70:	cmp	sl, r3
   19b74:	blt	19bac <ReadDataSlab2+0x80c>
   19b78:	ldr	r0, [r4]
   19b7c:	bl	151c <ftell@plt>
   19b80:	cmn	r0, #1
   19b84:	beq	194b8 <ReadDataSlab2+0x118>
   19b88:	ldr	r3, [sp, #16]
   19b8c:	mov	r2, r9
   19b90:	sub	r1, r3, r0
   19b94:	ldr	r3, [sp, #8]
   19b98:	ldr	r0, [r4]
   19b9c:	add	r1, r1, r3
   19ba0:	bl	1714 <fseek@plt>
   19ba4:	add	fp, fp, #1
   19ba8:	b	19b34 <ReadDataSlab2+0x794>
   19bac:	add	r3, r5, #4
   19bb0:	mov	r1, r5
   19bb4:	str	r3, [sp, #20]
   19bb8:	ldr	r2, [sp, #4]
   19bbc:	mov	r3, r9
   19bc0:	mov	r0, r4
   19bc4:	bl	11750 <ReadUInt32Data>
   19bc8:	mov	r2, r9
   19bcc:	ldr	r1, [sp, #12]
   19bd0:	ldr	r0, [r4]
   19bd4:	bl	1714 <fseek@plt>
   19bd8:	add	sl, sl, #1
   19bdc:	ldr	r5, [sp, #20]
   19be0:	b	19b6c <ReadDataSlab2+0x7cc>
   19be4:	ldr	r1, [sl]
   19be8:	ldr	r2, [r9]
   19bec:	cmp	r1, #1
   19bf0:	ldr	r0, [sl, #4]
   19bf4:	bne	19c28 <ReadDataSlab2+0x888>
   19bf8:	ldr	r3, [r6]
   19bfc:	cmp	r3, r2
   19c00:	bne	19c28 <ReadDataSlab2+0x888>
   19c04:	cmp	r0, #1
   19c08:	bne	19c28 <ReadDataSlab2+0x888>
   19c0c:	ldr	r2, [r6, #4]
   19c10:	mov	r1, r5
   19c14:	mov	r0, r4
   19c18:	mul	r3, r2, r3
   19c1c:	ldr	r2, [sp, #4]
   19c20:	bl	11c30 <ReadInt16Data>
   19c24:	b	193c4 <ReadDataSlab2+0x24>
   19c28:	sub	r1, r1, #1
   19c2c:	mul	r2, r2, r0
   19c30:	mul	r3, r7, r1
   19c34:	ldr	r0, [r4]
   19c38:	str	r3, [sp, #12]
   19c3c:	mul	r3, r7, r2
   19c40:	str	r3, [sp, #16]
   19c44:	bl	151c <ftell@plt>
   19c48:	cmn	r0, #1
   19c4c:	beq	194b8 <ReadDataSlab2+0x118>
   19c50:	ldr	r1, [r9]
   19c54:	ldr	r3, [r8, #4]
   19c58:	mov	r2, #1
   19c5c:	ldr	r0, [r4]
   19c60:	mul	r1, r1, r3
   19c64:	mov	fp, #0
   19c68:	mov	r9, #1
   19c6c:	mul	r1, r7, r1
   19c70:	bl	1714 <fseek@plt>
   19c74:	ldr	r3, [r6, #4]
   19c78:	cmp	fp, r3
   19c7c:	bge	193c4 <ReadDataSlab2+0x24>
   19c80:	ldr	r0, [r4]
   19c84:	bl	151c <ftell@plt>
   19c88:	cmn	r0, #1
   19c8c:	str	r0, [sp, #8]
   19c90:	beq	194b8 <ReadDataSlab2+0x118>
   19c94:	ldr	r1, [r8]
   19c98:	mov	r2, r9
   19c9c:	ldr	r0, [r4]
   19ca0:	mul	r1, r1, r7
   19ca4:	bl	1714 <fseek@plt>
   19ca8:	mov	sl, #0
   19cac:	ldr	r3, [r6]
   19cb0:	cmp	sl, r3
   19cb4:	blt	19cec <ReadDataSlab2+0x94c>
   19cb8:	ldr	r0, [r4]
   19cbc:	bl	151c <ftell@plt>
   19cc0:	cmn	r0, #1
   19cc4:	beq	194b8 <ReadDataSlab2+0x118>
   19cc8:	ldr	r3, [sp, #16]
   19ccc:	mov	r2, r9
   19cd0:	sub	r1, r3, r0
   19cd4:	ldr	r3, [sp, #8]
   19cd8:	ldr	r0, [r4]
   19cdc:	add	r1, r1, r3
   19ce0:	bl	1714 <fseek@plt>
   19ce4:	add	fp, fp, #1
   19ce8:	b	19c74 <ReadDataSlab2+0x8d4>
   19cec:	add	r3, r5, #2
   19cf0:	mov	r1, r5
   19cf4:	str	r3, [sp, #20]
   19cf8:	ldr	r2, [sp, #4]
   19cfc:	mov	r3, r9
   19d00:	mov	r0, r4
   19d04:	bl	11c30 <ReadInt16Data>
   19d08:	mov	r2, r9
   19d0c:	ldr	r1, [sp, #12]
   19d10:	ldr	r0, [r4]
   19d14:	bl	1714 <fseek@plt>
   19d18:	add	sl, sl, #1
   19d1c:	ldr	r5, [sp, #20]
   19d20:	b	19cac <ReadDataSlab2+0x90c>
   19d24:	ldr	r1, [sl]
   19d28:	ldr	r2, [r9]
   19d2c:	cmp	r1, #1
   19d30:	ldr	r0, [sl, #4]
   19d34:	bne	19d68 <ReadDataSlab2+0x9c8>
   19d38:	ldr	r3, [r6]
   19d3c:	cmp	r3, r2
   19d40:	bne	19d68 <ReadDataSlab2+0x9c8>
   19d44:	cmp	r0, #1
   19d48:	bne	19d68 <ReadDataSlab2+0x9c8>
   19d4c:	ldr	r2, [r6, #4]
   19d50:	mov	r1, r5
   19d54:	mov	r0, r4
   19d58:	mul	r3, r2, r3
   19d5c:	ldr	r2, [sp, #4]
   19d60:	bl	12138 <ReadUInt16Data>
   19d64:	b	193c4 <ReadDataSlab2+0x24>
   19d68:	sub	r1, r1, #1
   19d6c:	mul	r2, r2, r0
   19d70:	mul	r3, r7, r1
   19d74:	ldr	r0, [r4]
   19d78:	str	r3, [sp, #12]
   19d7c:	mul	r3, r7, r2
   19d80:	str	r3, [sp, #16]
   19d84:	bl	151c <ftell@plt>
   19d88:	cmn	r0, #1
   19d8c:	beq	194b8 <ReadDataSlab2+0x118>
   19d90:	ldr	r1, [r9]
   19d94:	ldr	r3, [r8, #4]
   19d98:	mov	r2, #1
   19d9c:	ldr	r0, [r4]
   19da0:	mul	r1, r1, r3
   19da4:	mov	fp, #0
   19da8:	mov	r9, #1
   19dac:	mul	r1, r7, r1
   19db0:	bl	1714 <fseek@plt>
   19db4:	ldr	r3, [r6, #4]
   19db8:	cmp	fp, r3
   19dbc:	bge	193c4 <ReadDataSlab2+0x24>
   19dc0:	ldr	r0, [r4]
   19dc4:	bl	151c <ftell@plt>
   19dc8:	cmn	r0, #1
   19dcc:	str	r0, [sp, #8]
   19dd0:	beq	194b8 <ReadDataSlab2+0x118>
   19dd4:	ldr	r1, [r8]
   19dd8:	mov	r2, r9
   19ddc:	ldr	r0, [r4]
   19de0:	mul	r1, r1, r7
   19de4:	bl	1714 <fseek@plt>
   19de8:	mov	sl, #0
   19dec:	ldr	r3, [r6]
   19df0:	cmp	sl, r3
   19df4:	blt	19e2c <ReadDataSlab2+0xa8c>
   19df8:	ldr	r0, [r4]
   19dfc:	bl	151c <ftell@plt>
   19e00:	cmn	r0, #1
   19e04:	beq	194b8 <ReadDataSlab2+0x118>
   19e08:	ldr	r3, [sp, #16]
   19e0c:	mov	r2, r9
   19e10:	sub	r1, r3, r0
   19e14:	ldr	r3, [sp, #8]
   19e18:	ldr	r0, [r4]
   19e1c:	add	r1, r1, r3
   19e20:	bl	1714 <fseek@plt>
   19e24:	add	fp, fp, #1
   19e28:	b	19db4 <ReadDataSlab2+0xa14>
   19e2c:	add	r3, r5, #2
   19e30:	mov	r1, r5
   19e34:	str	r3, [sp, #20]
   19e38:	ldr	r2, [sp, #4]
   19e3c:	mov	r3, r9
   19e40:	mov	r0, r4
   19e44:	bl	12138 <ReadUInt16Data>
   19e48:	mov	r2, r9
   19e4c:	ldr	r1, [sp, #12]
   19e50:	ldr	r0, [r4]
   19e54:	bl	1714 <fseek@plt>
   19e58:	add	sl, sl, #1
   19e5c:	ldr	r5, [sp, #20]
   19e60:	b	19dec <ReadDataSlab2+0xa4c>
   19e64:	ldr	r1, [sl]
   19e68:	ldr	r2, [r9]
   19e6c:	cmp	r1, #1
   19e70:	ldr	r0, [sl, #4]
   19e74:	bne	19ea8 <ReadDataSlab2+0xb08>
   19e78:	ldr	r3, [r6]
   19e7c:	cmp	r3, r2
   19e80:	bne	19ea8 <ReadDataSlab2+0xb08>
   19e84:	cmp	r0, #1
   19e88:	bne	19ea8 <ReadDataSlab2+0xb08>
   19e8c:	ldr	r2, [r6, #4]
   19e90:	mov	r1, r5
   19e94:	mov	r0, r4
   19e98:	mul	r3, r2, r3
   19e9c:	ldr	r2, [sp, #4]
   19ea0:	bl	12640 <ReadInt8Data>
   19ea4:	b	193c4 <ReadDataSlab2+0x24>
   19ea8:	sub	r1, r1, #1
   19eac:	mul	r2, r2, r0
   19eb0:	mul	r3, r7, r1
   19eb4:	ldr	r0, [r4]
   19eb8:	str	r3, [sp, #12]
   19ebc:	mul	r3, r7, r2
   19ec0:	str	r3, [sp, #16]
   19ec4:	bl	151c <ftell@plt>
   19ec8:	cmn	r0, #1
   19ecc:	beq	194b8 <ReadDataSlab2+0x118>
   19ed0:	ldr	r3, [r8, #4]
   19ed4:	ldr	r1, [r9]
   19ed8:	mov	r2, #1
   19edc:	ldr	r0, [r4]
   19ee0:	mul	r1, r1, r3
   19ee4:	mov	fp, #0
   19ee8:	mov	sl, #1
   19eec:	mul	r1, r7, r1
   19ef0:	bl	1714 <fseek@plt>
   19ef4:	ldr	r3, [r6, #4]
   19ef8:	cmp	fp, r3
   19efc:	bge	193c4 <ReadDataSlab2+0x24>
   19f00:	ldr	r0, [r4]
   19f04:	bl	151c <ftell@plt>
   19f08:	cmn	r0, #1
   19f0c:	str	r0, [sp, #8]
   19f10:	beq	194b8 <ReadDataSlab2+0x118>
   19f14:	ldr	r1, [r8]
   19f18:	mov	r2, sl
   19f1c:	ldr	r0, [r4]
   19f20:	mul	r1, r1, r7
   19f24:	bl	1714 <fseek@plt>
   19f28:	mov	r9, r5
   19f2c:	ldr	r2, [r6]
   19f30:	sub	r3, r9, r5
   19f34:	cmp	r3, r2
   19f38:	blt	19f74 <ReadDataSlab2+0xbd4>
   19f3c:	ldr	r0, [r4]
   19f40:	bl	151c <ftell@plt>
   19f44:	cmn	r0, #1
   19f48:	beq	194b8 <ReadDataSlab2+0x118>
   19f4c:	ldr	r3, [sp, #16]
   19f50:	mov	r2, sl
   19f54:	sub	r1, r3, r0
   19f58:	ldr	r3, [sp, #8]
   19f5c:	ldr	r0, [r4]
   19f60:	add	r1, r1, r3
   19f64:	bl	1714 <fseek@plt>
   19f68:	add	fp, fp, #1
   19f6c:	mov	r5, r9
   19f70:	b	19ef4 <ReadDataSlab2+0xb54>
   19f74:	add	r3, r9, #1
   19f78:	mov	r1, r9
   19f7c:	str	r3, [sp, #20]
   19f80:	ldr	r2, [sp, #4]
   19f84:	mov	r3, sl
   19f88:	mov	r0, r4
   19f8c:	bl	12640 <ReadInt8Data>
   19f90:	mov	r2, sl
   19f94:	ldr	r1, [sp, #12]
   19f98:	ldr	r0, [r4]
   19f9c:	bl	1714 <fseek@plt>
   19fa0:	ldr	r9, [sp, #20]
   19fa4:	b	19f2c <ReadDataSlab2+0xb8c>
   19fa8:	ldr	r1, [sl]
   19fac:	ldr	r2, [r9]
   19fb0:	cmp	r1, #1
   19fb4:	ldr	r0, [sl, #4]
   19fb8:	bne	19fec <ReadDataSlab2+0xc4c>
   19fbc:	ldr	r3, [r6]
   19fc0:	cmp	r3, r2
   19fc4:	bne	19fec <ReadDataSlab2+0xc4c>
   19fc8:	cmp	r0, #1
   19fcc:	bne	19fec <ReadDataSlab2+0xc4c>
   19fd0:	ldr	r2, [r6, #4]
   19fd4:	mov	r1, r5
   19fd8:	mov	r0, r4
   19fdc:	mul	r3, r2, r3
   19fe0:	ldr	r2, [sp, #4]
   19fe4:	bl	12b00 <ReadUInt8Data>
   19fe8:	b	193c4 <ReadDataSlab2+0x24>
   19fec:	sub	r1, r1, #1
   19ff0:	mul	r2, r2, r0
   19ff4:	mul	r3, r7, r1
   19ff8:	ldr	r0, [r4]
   19ffc:	str	r3, [sp, #12]
   1a000:	mul	r3, r7, r2
   1a004:	str	r3, [sp, #16]
   1a008:	bl	151c <ftell@plt>
   1a00c:	cmn	r0, #1
   1a010:	beq	194b8 <ReadDataSlab2+0x118>
   1a014:	ldr	r3, [r8, #4]
   1a018:	ldr	r1, [r9]
   1a01c:	mov	r2, #1
   1a020:	ldr	r0, [r4]
   1a024:	mul	r1, r1, r3
   1a028:	mov	fp, #0
   1a02c:	mov	sl, #1
   1a030:	mul	r1, r7, r1
   1a034:	bl	1714 <fseek@plt>
   1a038:	ldr	r3, [r6, #4]
   1a03c:	cmp	fp, r3
   1a040:	bge	193c4 <ReadDataSlab2+0x24>
   1a044:	ldr	r0, [r4]
   1a048:	bl	151c <ftell@plt>
   1a04c:	cmn	r0, #1
   1a050:	str	r0, [sp, #8]
   1a054:	beq	194b8 <ReadDataSlab2+0x118>
   1a058:	ldr	r1, [r8]
   1a05c:	mov	r2, sl
   1a060:	ldr	r0, [r4]
   1a064:	mul	r1, r1, r7
   1a068:	bl	1714 <fseek@plt>
   1a06c:	mov	r9, r5
   1a070:	ldr	r2, [r6]
   1a074:	sub	r3, r9, r5
   1a078:	cmp	r3, r2
   1a07c:	blt	1a0b8 <ReadDataSlab2+0xd18>
   1a080:	ldr	r0, [r4]
   1a084:	bl	151c <ftell@plt>
   1a088:	cmn	r0, #1
   1a08c:	beq	194b8 <ReadDataSlab2+0x118>
   1a090:	ldr	r3, [sp, #16]
   1a094:	mov	r2, sl
   1a098:	sub	r1, r3, r0
   1a09c:	ldr	r3, [sp, #8]
   1a0a0:	ldr	r0, [r4]
   1a0a4:	add	r1, r1, r3
   1a0a8:	bl	1714 <fseek@plt>
   1a0ac:	add	fp, fp, #1
   1a0b0:	mov	r5, r9
   1a0b4:	b	1a038 <ReadDataSlab2+0xc98>
   1a0b8:	add	r3, r9, #1
   1a0bc:	mov	r1, r9
   1a0c0:	str	r3, [sp, #20]
   1a0c4:	ldr	r2, [sp, #4]
   1a0c8:	mov	r3, sl
   1a0cc:	mov	r0, r4
   1a0d0:	bl	12b00 <ReadUInt8Data>
   1a0d4:	mov	r2, sl
   1a0d8:	ldr	r1, [sp, #12]
   1a0dc:	ldr	r0, [r4]
   1a0e0:	bl	1714 <fseek@plt>
   1a0e4:	ldr	r9, [sp, #20]
   1a0e8:	b	1a070 <ReadDataSlab2+0xcd0>
   1a0ec:	.word	0x000272a9

0001a0f0 <ReadCompressedDataSlab1>:
   1a0f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0f4:	sub	sp, sp, #68	; 0x44
   1a0f8:	add	r5, sp, #8
   1a0fc:	mov	r6, r0
   1a100:	mov	r4, r1
   1a104:	mov	r9, r2
   1a108:	mov	r1, #0
   1a10c:	mov	r2, #56	; 0x38
   1a110:	mov	r0, r5
   1a114:	mov	fp, r3
   1a118:	ldr	r7, [sp, #104]	; 0x68
   1a11c:	ldr	sl, [sp, #116]	; 0x74
   1a120:	bl	166c <memset@plt>
   1a124:	cmp	r9, #0
   1a128:	cmpne	r6, #0
   1a12c:	moveq	r4, #0
   1a130:	beq	1a21c <ReadCompressedDataSlab1+0x12c>
   1a134:	ldr	r3, [r6]
   1a138:	cmp	r3, #0
   1a13c:	moveq	r4, r3
   1a140:	beq	1a21c <ReadCompressedDataSlab1+0x12c>
   1a144:	mov	r1, r4
   1a148:	mov	r0, r5
   1a14c:	ldr	r8, [sp, #112]	; 0x70
   1a150:	bl	1624 <inflateCopy@plt>
   1a154:	ldr	r3, [sp, #108]	; 0x6c
   1a158:	mov	r2, r7
   1a15c:	mov	r1, r5
   1a160:	mov	r0, r6
   1a164:	bl	243c <InflateSkipData>
   1a168:	sub	r3, fp, #6
   1a16c:	sub	r8, r8, #1
   1a170:	cmp	r3, #9
   1a174:	addls	pc, pc, r3, lsl #2
   1a178:	b	1a618 <ReadCompressedDataSlab1+0x528>
   1a17c:	b	1a1a4 <ReadCompressedDataSlab1+0xb4>
   1a180:	b	1a228 <ReadCompressedDataSlab1+0x138>
   1a184:	b	1a538 <ReadCompressedDataSlab1+0x448>
   1a188:	b	1a5a8 <ReadCompressedDataSlab1+0x4b8>
   1a18c:	b	1a458 <ReadCompressedDataSlab1+0x368>
   1a190:	b	1a4c8 <ReadCompressedDataSlab1+0x3d8>
   1a194:	b	1a378 <ReadCompressedDataSlab1+0x288>
   1a198:	b	1a3e8 <ReadCompressedDataSlab1+0x2f8>
   1a19c:	b	1a298 <ReadCompressedDataSlab1+0x1a8>
   1a1a0:	b	1a308 <ReadCompressedDataSlab1+0x218>
   1a1a4:	cmp	r8, #0
   1a1a8:	movne	fp, #0
   1a1ac:	movne	r4, fp
   1a1b0:	bne	1a20c <ReadCompressedDataSlab1+0x11c>
   1a1b4:	str	sl, [sp]
   1a1b8:	mov	r3, r7
   1a1bc:	mov	r2, r9
   1a1c0:	mov	r1, r5
   1a1c4:	mov	r0, r6
   1a1c8:	bl	f2ec <ReadCompressedDoubleData>
   1a1cc:	mov	r4, r0
   1a1d0:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a1d4:	mov	r3, #1
   1a1d8:	add	r2, r9, fp, lsl #3
   1a1dc:	str	r3, [sp]
   1a1e0:	mov	r1, r5
   1a1e4:	mov	r3, r7
   1a1e8:	mov	r0, r6
   1a1ec:	bl	f2ec <ReadCompressedDoubleData>
   1a1f0:	mov	r3, r8
   1a1f4:	mov	r2, r7
   1a1f8:	mov	r1, r5
   1a1fc:	add	fp, fp, #1
   1a200:	add	r4, r4, r0
   1a204:	mov	r0, r6
   1a208:	bl	243c <InflateSkipData>
   1a20c:	cmp	fp, sl
   1a210:	blt	1a1d4 <ReadCompressedDataSlab1+0xe4>
   1a214:	mov	r0, r5
   1a218:	bl	1618 <inflateEnd@plt>
   1a21c:	mov	r0, r4
   1a220:	add	sp, sp, #68	; 0x44
   1a224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a228:	cmp	r8, #0
   1a22c:	movne	fp, #0
   1a230:	movne	r4, fp
   1a234:	bne	1a28c <ReadCompressedDataSlab1+0x19c>
   1a238:	str	sl, [sp]
   1a23c:	mov	r3, r7
   1a240:	mov	r2, r9
   1a244:	mov	r1, r5
   1a248:	mov	r0, r6
   1a24c:	bl	10314 <ReadCompressedSingleData>
   1a250:	b	1a1cc <ReadCompressedDataSlab1+0xdc>
   1a254:	mov	r3, #1
   1a258:	add	r2, r9, fp, lsl #2
   1a25c:	str	r3, [sp]
   1a260:	mov	r1, r5
   1a264:	mov	r3, r7
   1a268:	mov	r0, r6
   1a26c:	bl	10314 <ReadCompressedSingleData>
   1a270:	mov	r3, r8
   1a274:	mov	r2, r7
   1a278:	mov	r1, r5
   1a27c:	add	fp, fp, #1
   1a280:	add	r4, r4, r0
   1a284:	mov	r0, r6
   1a288:	bl	243c <InflateSkipData>
   1a28c:	cmp	fp, sl
   1a290:	blt	1a254 <ReadCompressedDataSlab1+0x164>
   1a294:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a298:	cmp	r8, #0
   1a29c:	movne	fp, #0
   1a2a0:	movne	r4, fp
   1a2a4:	bne	1a2fc <ReadCompressedDataSlab1+0x20c>
   1a2a8:	str	sl, [sp]
   1a2ac:	mov	r3, r7
   1a2b0:	mov	r2, r9
   1a2b4:	mov	r1, r5
   1a2b8:	mov	r0, r6
   1a2bc:	bl	10834 <ReadCompressedInt64Data>
   1a2c0:	b	1a1cc <ReadCompressedDataSlab1+0xdc>
   1a2c4:	mov	r3, #1
   1a2c8:	add	r2, r9, fp, lsl #3
   1a2cc:	str	r3, [sp]
   1a2d0:	mov	r1, r5
   1a2d4:	mov	r3, r7
   1a2d8:	mov	r0, r6
   1a2dc:	bl	10834 <ReadCompressedInt64Data>
   1a2e0:	mov	r3, r8
   1a2e4:	mov	r2, r7
   1a2e8:	mov	r1, r5
   1a2ec:	add	fp, fp, #1
   1a2f0:	add	r4, r4, r0
   1a2f4:	mov	r0, r6
   1a2f8:	bl	243c <InflateSkipData>
   1a2fc:	cmp	fp, sl
   1a300:	blt	1a2c4 <ReadCompressedDataSlab1+0x1d4>
   1a304:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a308:	cmp	r8, #0
   1a30c:	movne	fp, #0
   1a310:	movne	r4, fp
   1a314:	bne	1a36c <ReadCompressedDataSlab1+0x27c>
   1a318:	str	sl, [sp]
   1a31c:	mov	r3, r7
   1a320:	mov	r2, r9
   1a324:	mov	r1, r5
   1a328:	mov	r0, r6
   1a32c:	bl	10d64 <ReadCompressedUInt64Data>
   1a330:	b	1a1cc <ReadCompressedDataSlab1+0xdc>
   1a334:	mov	r3, #1
   1a338:	add	r2, r9, fp, lsl #3
   1a33c:	str	r3, [sp]
   1a340:	mov	r1, r5
   1a344:	mov	r3, r7
   1a348:	mov	r0, r6
   1a34c:	bl	10d64 <ReadCompressedUInt64Data>
   1a350:	mov	r3, r8
   1a354:	mov	r2, r7
   1a358:	mov	r1, r5
   1a35c:	add	fp, fp, #1
   1a360:	add	r4, r4, r0
   1a364:	mov	r0, r6
   1a368:	bl	243c <InflateSkipData>
   1a36c:	cmp	fp, sl
   1a370:	blt	1a334 <ReadCompressedDataSlab1+0x244>
   1a374:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a378:	cmp	r8, #0
   1a37c:	movne	fp, #0
   1a380:	movne	r4, fp
   1a384:	bne	1a3dc <ReadCompressedDataSlab1+0x2ec>
   1a388:	str	sl, [sp]
   1a38c:	mov	r3, r7
   1a390:	mov	r2, r9
   1a394:	mov	r1, r5
   1a398:	mov	r0, r6
   1a39c:	bl	11294 <ReadCompressedInt32Data>
   1a3a0:	b	1a1cc <ReadCompressedDataSlab1+0xdc>
   1a3a4:	mov	r3, #1
   1a3a8:	add	r2, r9, fp, lsl #2
   1a3ac:	str	r3, [sp]
   1a3b0:	mov	r1, r5
   1a3b4:	mov	r3, r7
   1a3b8:	mov	r0, r6
   1a3bc:	bl	11294 <ReadCompressedInt32Data>
   1a3c0:	mov	r3, r8
   1a3c4:	mov	r2, r7
   1a3c8:	mov	r1, r5
   1a3cc:	add	fp, fp, #1
   1a3d0:	add	r4, r4, r0
   1a3d4:	mov	r0, r6
   1a3d8:	bl	243c <InflateSkipData>
   1a3dc:	cmp	fp, sl
   1a3e0:	blt	1a3a4 <ReadCompressedDataSlab1+0x2b4>
   1a3e4:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a3e8:	cmp	r8, #0
   1a3ec:	movne	fp, #0
   1a3f0:	movne	r4, fp
   1a3f4:	bne	1a44c <ReadCompressedDataSlab1+0x35c>
   1a3f8:	str	sl, [sp]
   1a3fc:	mov	r3, r7
   1a400:	mov	r2, r9
   1a404:	mov	r1, r5
   1a408:	mov	r0, r6
   1a40c:	bl	11774 <ReadCompressedUInt32Data>
   1a410:	b	1a1cc <ReadCompressedDataSlab1+0xdc>
   1a414:	mov	r3, #1
   1a418:	add	r2, r9, fp, lsl #2
   1a41c:	str	r3, [sp]
   1a420:	mov	r1, r5
   1a424:	mov	r3, r7
   1a428:	mov	r0, r6
   1a42c:	bl	11774 <ReadCompressedUInt32Data>
   1a430:	mov	r3, r8
   1a434:	mov	r2, r7
   1a438:	mov	r1, r5
   1a43c:	add	fp, fp, #1
   1a440:	add	r4, r4, r0
   1a444:	mov	r0, r6
   1a448:	bl	243c <InflateSkipData>
   1a44c:	cmp	fp, sl
   1a450:	blt	1a414 <ReadCompressedDataSlab1+0x324>
   1a454:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a458:	cmp	r8, #0
   1a45c:	movne	fp, #0
   1a460:	movne	r4, fp
   1a464:	bne	1a4bc <ReadCompressedDataSlab1+0x3cc>
   1a468:	str	sl, [sp]
   1a46c:	mov	r3, r7
   1a470:	mov	r2, r9
   1a474:	mov	r1, r5
   1a478:	mov	r0, r6
   1a47c:	bl	11c54 <ReadCompressedInt16Data>
   1a480:	b	1a1cc <ReadCompressedDataSlab1+0xdc>
   1a484:	mov	r3, #1
   1a488:	add	r2, r9, fp, lsl #1
   1a48c:	str	r3, [sp]
   1a490:	mov	r1, r5
   1a494:	mov	r3, r7
   1a498:	mov	r0, r6
   1a49c:	bl	11c54 <ReadCompressedInt16Data>
   1a4a0:	mov	r3, r8
   1a4a4:	mov	r2, r7
   1a4a8:	mov	r1, r5
   1a4ac:	add	fp, fp, #1
   1a4b0:	add	r4, r4, r0
   1a4b4:	mov	r0, r6
   1a4b8:	bl	243c <InflateSkipData>
   1a4bc:	cmp	fp, sl
   1a4c0:	blt	1a484 <ReadCompressedDataSlab1+0x394>
   1a4c4:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a4c8:	cmp	r8, #0
   1a4cc:	movne	fp, #0
   1a4d0:	movne	r4, fp
   1a4d4:	bne	1a52c <ReadCompressedDataSlab1+0x43c>
   1a4d8:	str	sl, [sp]
   1a4dc:	mov	r3, r7
   1a4e0:	mov	r2, r9
   1a4e4:	mov	r1, r5
   1a4e8:	mov	r0, r6
   1a4ec:	bl	1215c <ReadCompressedUInt16Data>
   1a4f0:	b	1a1cc <ReadCompressedDataSlab1+0xdc>
   1a4f4:	mov	r3, #1
   1a4f8:	add	r2, r9, fp, lsl #1
   1a4fc:	str	r3, [sp]
   1a500:	mov	r1, r5
   1a504:	mov	r3, r7
   1a508:	mov	r0, r6
   1a50c:	bl	1215c <ReadCompressedUInt16Data>
   1a510:	mov	r3, r8
   1a514:	mov	r2, r7
   1a518:	mov	r1, r5
   1a51c:	add	fp, fp, #1
   1a520:	add	r4, r4, r0
   1a524:	mov	r0, r6
   1a528:	bl	243c <InflateSkipData>
   1a52c:	cmp	fp, sl
   1a530:	blt	1a4f4 <ReadCompressedDataSlab1+0x404>
   1a534:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a538:	cmp	r8, #0
   1a53c:	movne	fp, #0
   1a540:	movne	r4, fp
   1a544:	bne	1a59c <ReadCompressedDataSlab1+0x4ac>
   1a548:	str	sl, [sp]
   1a54c:	mov	r3, r7
   1a550:	mov	r2, r9
   1a554:	mov	r1, r5
   1a558:	mov	r0, r6
   1a55c:	bl	12664 <ReadCompressedInt8Data>
   1a560:	b	1a1cc <ReadCompressedDataSlab1+0xdc>
   1a564:	mov	r3, #1
   1a568:	add	r2, r9, fp
   1a56c:	str	r3, [sp]
   1a570:	mov	r1, r5
   1a574:	mov	r3, r7
   1a578:	mov	r0, r6
   1a57c:	bl	12664 <ReadCompressedInt8Data>
   1a580:	mov	r3, r8
   1a584:	mov	r2, r7
   1a588:	mov	r1, r5
   1a58c:	add	fp, fp, #1
   1a590:	add	r4, r4, r0
   1a594:	mov	r0, r6
   1a598:	bl	243c <InflateSkipData>
   1a59c:	cmp	fp, sl
   1a5a0:	blt	1a564 <ReadCompressedDataSlab1+0x474>
   1a5a4:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a5a8:	cmp	r8, #0
   1a5ac:	movne	fp, #0
   1a5b0:	movne	r4, fp
   1a5b4:	bne	1a60c <ReadCompressedDataSlab1+0x51c>
   1a5b8:	str	sl, [sp]
   1a5bc:	mov	r3, r7
   1a5c0:	mov	r2, r9
   1a5c4:	mov	r1, r5
   1a5c8:	mov	r0, r6
   1a5cc:	bl	12b24 <ReadCompressedUInt8Data>
   1a5d0:	b	1a1cc <ReadCompressedDataSlab1+0xdc>
   1a5d4:	mov	r3, #1
   1a5d8:	add	r2, r9, fp
   1a5dc:	str	r3, [sp]
   1a5e0:	mov	r1, r5
   1a5e4:	mov	r3, r7
   1a5e8:	mov	r0, r6
   1a5ec:	bl	12b24 <ReadCompressedUInt8Data>
   1a5f0:	mov	r3, r8
   1a5f4:	mov	r2, r7
   1a5f8:	mov	r1, r5
   1a5fc:	add	fp, fp, #1
   1a600:	add	r4, r4, r0
   1a604:	mov	r0, r6
   1a608:	bl	243c <InflateSkipData>
   1a60c:	cmp	fp, sl
   1a610:	blt	1a5d4 <ReadCompressedDataSlab1+0x4e4>
   1a614:	b	1a214 <ReadCompressedDataSlab1+0x124>
   1a618:	mov	r4, #0
   1a61c:	b	1a214 <ReadCompressedDataSlab1+0x124>

0001a620 <ReadCompressedDataSlab2>:
   1a620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a624:	sub	sp, sp, #84	; 0x54
   1a628:	add	r5, sp, #24
   1a62c:	mov	r6, r0
   1a630:	str	r1, [sp, #12]
   1a634:	mov	r4, r2
   1a638:	mov	r1, #0
   1a63c:	mov	r2, #56	; 0x38
   1a640:	mov	r0, r5
   1a644:	mov	sl, r3
   1a648:	ldr	r7, [sp, #120]	; 0x78
   1a64c:	ldr	fp, [sp, #128]	; 0x80
   1a650:	ldr	r9, [sp, #132]	; 0x84
   1a654:	ldr	r8, [sp, #136]	; 0x88
   1a658:	bl	166c <memset@plt>
   1a65c:	cmp	r4, #0
   1a660:	cmpne	r6, #0
   1a664:	beq	1a8a4 <ReadCompressedDataSlab2+0x284>
   1a668:	ldr	r3, [r6]
   1a66c:	cmp	r3, #0
   1a670:	beq	1a8a4 <ReadCompressedDataSlab2+0x284>
   1a674:	cmp	r9, #0
   1a678:	cmpne	fp, #0
   1a67c:	moveq	r3, #1
   1a680:	movne	r3, #0
   1a684:	cmp	r8, #0
   1a688:	orreq	r3, r3, #1
   1a68c:	cmp	r3, #0
   1a690:	bne	1a8a4 <ReadCompressedDataSlab2+0x284>
   1a694:	ldr	r1, [sp, #12]
   1a698:	mov	r0, r5
   1a69c:	sub	sl, sl, #6
   1a6a0:	bl	1624 <inflateCopy@plt>
   1a6a4:	cmp	sl, #9
   1a6a8:	addls	pc, pc, sl, lsl #2
   1a6ac:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1a6b0:	b	1a6d8 <ReadCompressedDataSlab2+0xb8>
   1a6b4:	b	1a8d4 <ReadCompressedDataSlab2+0x2b4>
   1a6b8:	b	1b648 <ReadCompressedDataSlab2+0x1028>
   1a6bc:	b	1b848 <ReadCompressedDataSlab2+0x1228>
   1a6c0:	b	1b270 <ReadCompressedDataSlab2+0xc50>
   1a6c4:	b	1b45c <ReadCompressedDataSlab2+0xe3c>
   1a6c8:	b	1ae98 <ReadCompressedDataSlab2+0x878>
   1a6cc:	b	1b084 <ReadCompressedDataSlab2+0xa64>
   1a6d0:	b	1aac0 <ReadCompressedDataSlab2+0x4a0>
   1a6d4:	b	1acac <ReadCompressedDataSlab2+0x68c>
   1a6d8:	ldr	r3, [sp, #124]	; 0x7c
   1a6dc:	ldr	r2, [r9, #4]
   1a6e0:	mov	r1, r5
   1a6e4:	ldr	r3, [r3]
   1a6e8:	sub	r2, r2, #1
   1a6ec:	mov	r0, r6
   1a6f0:	mul	r2, r3, r2
   1a6f4:	ldr	sl, [r9]
   1a6f8:	str	r2, [sp, #16]
   1a6fc:	ldr	r2, [fp, #4]
   1a700:	mul	r3, r2, r3
   1a704:	mov	r2, r7
   1a708:	bl	243c <InflateSkipData>
   1a70c:	ldr	r3, [r9]
   1a710:	cmp	r3, #1
   1a714:	beq	1a7d0 <ReadCompressedDataSlab2+0x1b0>
   1a718:	mov	r3, #0
   1a71c:	str	r3, [sp, #12]
   1a720:	sub	r3, sl, #1
   1a724:	str	r3, [sp, #20]
   1a728:	ldr	r3, [r8, #4]
   1a72c:	ldr	r2, [sp, #12]
   1a730:	cmp	r2, r3
   1a734:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1a738:	mov	r2, r7
   1a73c:	ldr	r3, [fp]
   1a740:	mov	r1, r5
   1a744:	mov	r0, r6
   1a748:	bl	243c <InflateSkipData>
   1a74c:	mov	sl, #0
   1a750:	mov	r2, r4
   1a754:	ldr	r3, [r8]
   1a758:	add	r4, r2, #8
   1a75c:	sub	r3, r3, #1
   1a760:	cmp	sl, r3
   1a764:	mov	r3, #1
   1a768:	str	r3, [sp]
   1a76c:	mov	r1, r5
   1a770:	mov	r3, r7
   1a774:	mov	r0, r6
   1a778:	blt	1a8b0 <ReadCompressedDataSlab2+0x290>
   1a77c:	bl	f2ec <ReadCompressedDoubleData>
   1a780:	ldr	r3, [sp, #124]	; 0x7c
   1a784:	ldr	r2, [sp, #16]
   1a788:	mov	r0, r6
   1a78c:	ldr	r3, [r3]
   1a790:	sub	r3, r3, #1
   1a794:	add	r3, r3, r2
   1a798:	ldr	r2, [r8]
   1a79c:	sub	r1, r2, #1
   1a7a0:	ldr	r2, [r9]
   1a7a4:	mul	r2, r2, r1
   1a7a8:	mov	r1, r5
   1a7ac:	sub	r3, r3, r2
   1a7b0:	ldr	r2, [fp]
   1a7b4:	sub	r3, r3, r2
   1a7b8:	mov	r2, r7
   1a7bc:	bl	243c <InflateSkipData>
   1a7c0:	ldr	r3, [sp, #12]
   1a7c4:	add	r3, r3, #1
   1a7c8:	str	r3, [sp, #12]
   1a7cc:	b	1a728 <ReadCompressedDataSlab2+0x108>
   1a7d0:	ldr	r3, [sp, #124]	; 0x7c
   1a7d4:	ldr	r2, [r8]
   1a7d8:	ldr	r3, [r3]
   1a7dc:	cmp	r2, r3
   1a7e0:	bne	1a7f0 <ReadCompressedDataSlab2+0x1d0>
   1a7e4:	ldr	r3, [r9, #4]
   1a7e8:	cmp	r3, #1
   1a7ec:	beq	1a87c <ReadCompressedDataSlab2+0x25c>
   1a7f0:	mov	sl, #0
   1a7f4:	ldr	r3, [r8, #4]
   1a7f8:	cmp	sl, r3
   1a7fc:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1a800:	ldr	r3, [fp]
   1a804:	mov	r2, r7
   1a808:	mov	r1, r5
   1a80c:	mov	r0, r6
   1a810:	bl	243c <InflateSkipData>
   1a814:	ldr	r3, [r8]
   1a818:	mov	r2, r4
   1a81c:	str	r3, [sp]
   1a820:	mov	r1, r5
   1a824:	mov	r3, r7
   1a828:	mov	r0, r6
   1a82c:	bl	f2ec <ReadCompressedDoubleData>
   1a830:	ldr	r3, [sp, #124]	; 0x7c
   1a834:	ldr	r2, [r8]
   1a838:	ldr	r1, [sp, #16]
   1a83c:	ldr	r3, [r3]
   1a840:	add	r4, r4, r2, lsl #3
   1a844:	sub	r3, r3, #1
   1a848:	add	r3, r3, r1
   1a84c:	ldr	r1, [r9]
   1a850:	sub	r2, r2, #1
   1a854:	mov	r0, r6
   1a858:	mul	r2, r1, r2
   1a85c:	mov	r1, r5
   1a860:	sub	r3, r3, r2
   1a864:	ldr	r2, [fp]
   1a868:	add	sl, sl, #1
   1a86c:	sub	r3, r3, r2
   1a870:	mov	r2, r7
   1a874:	bl	243c <InflateSkipData>
   1a878:	b	1a7f4 <ReadCompressedDataSlab2+0x1d4>
   1a87c:	ldr	r3, [r8, #4]
   1a880:	mov	r1, r5
   1a884:	mov	r0, r6
   1a888:	mul	r3, r3, r2
   1a88c:	mov	r2, r4
   1a890:	str	r3, [sp]
   1a894:	mov	r3, r7
   1a898:	bl	f2ec <ReadCompressedDoubleData>
   1a89c:	mov	r0, r5
   1a8a0:	bl	1618 <inflateEnd@plt>
   1a8a4:	mov	r0, #0
   1a8a8:	add	sp, sp, #84	; 0x54
   1a8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8b0:	bl	f2ec <ReadCompressedDoubleData>
   1a8b4:	mov	r2, r7
   1a8b8:	ldr	r3, [sp, #20]
   1a8bc:	mov	r1, r5
   1a8c0:	mov	r0, r6
   1a8c4:	bl	243c <InflateSkipData>
   1a8c8:	add	sl, sl, #1
   1a8cc:	mov	r2, r4
   1a8d0:	b	1a754 <ReadCompressedDataSlab2+0x134>
   1a8d4:	ldr	r3, [sp, #124]	; 0x7c
   1a8d8:	ldr	r2, [r9, #4]
   1a8dc:	mov	r1, r5
   1a8e0:	ldr	r3, [r3]
   1a8e4:	sub	r2, r2, #1
   1a8e8:	mov	r0, r6
   1a8ec:	mul	r2, r3, r2
   1a8f0:	ldr	sl, [r9]
   1a8f4:	str	r2, [sp, #16]
   1a8f8:	ldr	r2, [fp, #4]
   1a8fc:	mul	r3, r2, r3
   1a900:	mov	r2, r7
   1a904:	bl	243c <InflateSkipData>
   1a908:	ldr	r3, [r9]
   1a90c:	cmp	r3, #1
   1a910:	beq	1a9cc <ReadCompressedDataSlab2+0x3ac>
   1a914:	mov	r3, #0
   1a918:	str	r3, [sp, #12]
   1a91c:	sub	r3, sl, #1
   1a920:	str	r3, [sp, #20]
   1a924:	ldr	r3, [r8, #4]
   1a928:	ldr	r2, [sp, #12]
   1a92c:	cmp	r2, r3
   1a930:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1a934:	mov	r2, r7
   1a938:	ldr	r3, [fp]
   1a93c:	mov	r1, r5
   1a940:	mov	r0, r6
   1a944:	bl	243c <InflateSkipData>
   1a948:	mov	sl, #0
   1a94c:	mov	r2, r4
   1a950:	ldr	r3, [r8]
   1a954:	add	r4, r2, #4
   1a958:	sub	r3, r3, #1
   1a95c:	cmp	sl, r3
   1a960:	mov	r3, #1
   1a964:	str	r3, [sp]
   1a968:	mov	r1, r5
   1a96c:	mov	r3, r7
   1a970:	mov	r0, r6
   1a974:	blt	1aa9c <ReadCompressedDataSlab2+0x47c>
   1a978:	bl	10314 <ReadCompressedSingleData>
   1a97c:	ldr	r3, [sp, #124]	; 0x7c
   1a980:	ldr	r2, [sp, #16]
   1a984:	mov	r0, r6
   1a988:	ldr	r3, [r3]
   1a98c:	sub	r3, r3, #1
   1a990:	add	r3, r3, r2
   1a994:	ldr	r2, [r8]
   1a998:	sub	r1, r2, #1
   1a99c:	ldr	r2, [r9]
   1a9a0:	mul	r2, r2, r1
   1a9a4:	mov	r1, r5
   1a9a8:	sub	r3, r3, r2
   1a9ac:	ldr	r2, [fp]
   1a9b0:	sub	r3, r3, r2
   1a9b4:	mov	r2, r7
   1a9b8:	bl	243c <InflateSkipData>
   1a9bc:	ldr	r3, [sp, #12]
   1a9c0:	add	r3, r3, #1
   1a9c4:	str	r3, [sp, #12]
   1a9c8:	b	1a924 <ReadCompressedDataSlab2+0x304>
   1a9cc:	ldr	r3, [sp, #124]	; 0x7c
   1a9d0:	ldr	r2, [r8]
   1a9d4:	ldr	r3, [r3]
   1a9d8:	cmp	r2, r3
   1a9dc:	bne	1a9ec <ReadCompressedDataSlab2+0x3cc>
   1a9e0:	ldr	r3, [r9, #4]
   1a9e4:	cmp	r3, #1
   1a9e8:	beq	1aa78 <ReadCompressedDataSlab2+0x458>
   1a9ec:	mov	sl, #0
   1a9f0:	ldr	r3, [r8, #4]
   1a9f4:	cmp	sl, r3
   1a9f8:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1a9fc:	ldr	r3, [fp]
   1aa00:	mov	r2, r7
   1aa04:	mov	r1, r5
   1aa08:	mov	r0, r6
   1aa0c:	bl	243c <InflateSkipData>
   1aa10:	ldr	r3, [r8]
   1aa14:	mov	r2, r4
   1aa18:	str	r3, [sp]
   1aa1c:	mov	r1, r5
   1aa20:	mov	r3, r7
   1aa24:	mov	r0, r6
   1aa28:	bl	10314 <ReadCompressedSingleData>
   1aa2c:	ldr	r3, [sp, #124]	; 0x7c
   1aa30:	ldr	r2, [r8]
   1aa34:	ldr	r1, [sp, #16]
   1aa38:	ldr	r3, [r3]
   1aa3c:	add	r4, r4, r2, lsl #2
   1aa40:	sub	r3, r3, #1
   1aa44:	add	r3, r3, r1
   1aa48:	ldr	r1, [r9]
   1aa4c:	sub	r2, r2, #1
   1aa50:	mov	r0, r6
   1aa54:	mul	r2, r1, r2
   1aa58:	mov	r1, r5
   1aa5c:	sub	r3, r3, r2
   1aa60:	ldr	r2, [fp]
   1aa64:	add	sl, sl, #1
   1aa68:	sub	r3, r3, r2
   1aa6c:	mov	r2, r7
   1aa70:	bl	243c <InflateSkipData>
   1aa74:	b	1a9f0 <ReadCompressedDataSlab2+0x3d0>
   1aa78:	ldr	r3, [r8, #4]
   1aa7c:	mov	r1, r5
   1aa80:	mov	r0, r6
   1aa84:	mul	r3, r3, r2
   1aa88:	mov	r2, r4
   1aa8c:	str	r3, [sp]
   1aa90:	mov	r3, r7
   1aa94:	bl	10314 <ReadCompressedSingleData>
   1aa98:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1aa9c:	bl	10314 <ReadCompressedSingleData>
   1aaa0:	mov	r2, r7
   1aaa4:	ldr	r3, [sp, #20]
   1aaa8:	mov	r1, r5
   1aaac:	mov	r0, r6
   1aab0:	bl	243c <InflateSkipData>
   1aab4:	add	sl, sl, #1
   1aab8:	mov	r2, r4
   1aabc:	b	1a950 <ReadCompressedDataSlab2+0x330>
   1aac0:	ldr	r3, [sp, #124]	; 0x7c
   1aac4:	ldr	r2, [r9, #4]
   1aac8:	mov	r1, r5
   1aacc:	ldr	r3, [r3]
   1aad0:	sub	r2, r2, #1
   1aad4:	mov	r0, r6
   1aad8:	mul	r2, r3, r2
   1aadc:	ldr	sl, [r9]
   1aae0:	str	r2, [sp, #16]
   1aae4:	ldr	r2, [fp, #4]
   1aae8:	mul	r3, r2, r3
   1aaec:	mov	r2, r7
   1aaf0:	bl	243c <InflateSkipData>
   1aaf4:	ldr	r3, [r9]
   1aaf8:	cmp	r3, #1
   1aafc:	beq	1abb8 <ReadCompressedDataSlab2+0x598>
   1ab00:	mov	r3, #0
   1ab04:	str	r3, [sp, #12]
   1ab08:	sub	r3, sl, #1
   1ab0c:	str	r3, [sp, #20]
   1ab10:	ldr	r3, [r8, #4]
   1ab14:	ldr	r2, [sp, #12]
   1ab18:	cmp	r2, r3
   1ab1c:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1ab20:	mov	r2, r7
   1ab24:	ldr	r3, [fp]
   1ab28:	mov	r1, r5
   1ab2c:	mov	r0, r6
   1ab30:	bl	243c <InflateSkipData>
   1ab34:	mov	sl, #0
   1ab38:	mov	r2, r4
   1ab3c:	ldr	r3, [r8]
   1ab40:	add	r4, r2, #8
   1ab44:	sub	r3, r3, #1
   1ab48:	cmp	sl, r3
   1ab4c:	mov	r3, #1
   1ab50:	str	r3, [sp]
   1ab54:	mov	r1, r5
   1ab58:	mov	r3, r7
   1ab5c:	mov	r0, r6
   1ab60:	blt	1ac88 <ReadCompressedDataSlab2+0x668>
   1ab64:	bl	10834 <ReadCompressedInt64Data>
   1ab68:	ldr	r3, [sp, #124]	; 0x7c
   1ab6c:	ldr	r2, [sp, #16]
   1ab70:	mov	r0, r6
   1ab74:	ldr	r3, [r3]
   1ab78:	sub	r3, r3, #1
   1ab7c:	add	r3, r3, r2
   1ab80:	ldr	r2, [r8]
   1ab84:	sub	r1, r2, #1
   1ab88:	ldr	r2, [r9]
   1ab8c:	mul	r2, r2, r1
   1ab90:	mov	r1, r5
   1ab94:	sub	r3, r3, r2
   1ab98:	ldr	r2, [fp]
   1ab9c:	sub	r3, r3, r2
   1aba0:	mov	r2, r7
   1aba4:	bl	243c <InflateSkipData>
   1aba8:	ldr	r3, [sp, #12]
   1abac:	add	r3, r3, #1
   1abb0:	str	r3, [sp, #12]
   1abb4:	b	1ab10 <ReadCompressedDataSlab2+0x4f0>
   1abb8:	ldr	r3, [sp, #124]	; 0x7c
   1abbc:	ldr	r2, [r8]
   1abc0:	ldr	r3, [r3]
   1abc4:	cmp	r2, r3
   1abc8:	bne	1abd8 <ReadCompressedDataSlab2+0x5b8>
   1abcc:	ldr	r3, [r9, #4]
   1abd0:	cmp	r3, #1
   1abd4:	beq	1ac64 <ReadCompressedDataSlab2+0x644>
   1abd8:	mov	sl, #0
   1abdc:	ldr	r3, [r8, #4]
   1abe0:	cmp	sl, r3
   1abe4:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1abe8:	ldr	r3, [fp]
   1abec:	mov	r2, r7
   1abf0:	mov	r1, r5
   1abf4:	mov	r0, r6
   1abf8:	bl	243c <InflateSkipData>
   1abfc:	ldr	r3, [r8]
   1ac00:	mov	r2, r4
   1ac04:	str	r3, [sp]
   1ac08:	mov	r1, r5
   1ac0c:	mov	r3, r7
   1ac10:	mov	r0, r6
   1ac14:	bl	10834 <ReadCompressedInt64Data>
   1ac18:	ldr	r3, [sp, #124]	; 0x7c
   1ac1c:	ldr	r2, [r8]
   1ac20:	ldr	r1, [sp, #16]
   1ac24:	ldr	r3, [r3]
   1ac28:	add	r4, r4, r2, lsl #3
   1ac2c:	sub	r3, r3, #1
   1ac30:	add	r3, r3, r1
   1ac34:	ldr	r1, [r9]
   1ac38:	sub	r2, r2, #1
   1ac3c:	mov	r0, r6
   1ac40:	mul	r2, r1, r2
   1ac44:	mov	r1, r5
   1ac48:	sub	r3, r3, r2
   1ac4c:	ldr	r2, [fp]
   1ac50:	add	sl, sl, #1
   1ac54:	sub	r3, r3, r2
   1ac58:	mov	r2, r7
   1ac5c:	bl	243c <InflateSkipData>
   1ac60:	b	1abdc <ReadCompressedDataSlab2+0x5bc>
   1ac64:	ldr	r3, [r8, #4]
   1ac68:	mov	r1, r5
   1ac6c:	mov	r0, r6
   1ac70:	mul	r3, r3, r2
   1ac74:	mov	r2, r4
   1ac78:	str	r3, [sp]
   1ac7c:	mov	r3, r7
   1ac80:	bl	10834 <ReadCompressedInt64Data>
   1ac84:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1ac88:	bl	10834 <ReadCompressedInt64Data>
   1ac8c:	mov	r2, r7
   1ac90:	ldr	r3, [sp, #20]
   1ac94:	mov	r1, r5
   1ac98:	mov	r0, r6
   1ac9c:	bl	243c <InflateSkipData>
   1aca0:	add	sl, sl, #1
   1aca4:	mov	r2, r4
   1aca8:	b	1ab3c <ReadCompressedDataSlab2+0x51c>
   1acac:	ldr	r3, [sp, #124]	; 0x7c
   1acb0:	ldr	r2, [r9, #4]
   1acb4:	mov	r1, r5
   1acb8:	ldr	r3, [r3]
   1acbc:	sub	r2, r2, #1
   1acc0:	mov	r0, r6
   1acc4:	mul	r2, r3, r2
   1acc8:	ldr	sl, [r9]
   1accc:	str	r2, [sp, #16]
   1acd0:	ldr	r2, [fp, #4]
   1acd4:	mul	r3, r2, r3
   1acd8:	mov	r2, r7
   1acdc:	bl	243c <InflateSkipData>
   1ace0:	ldr	r3, [r9]
   1ace4:	cmp	r3, #1
   1ace8:	beq	1ada4 <ReadCompressedDataSlab2+0x784>
   1acec:	mov	r3, #0
   1acf0:	str	r3, [sp, #12]
   1acf4:	sub	r3, sl, #1
   1acf8:	str	r3, [sp, #20]
   1acfc:	ldr	r3, [r8, #4]
   1ad00:	ldr	r2, [sp, #12]
   1ad04:	cmp	r2, r3
   1ad08:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1ad0c:	mov	r2, r7
   1ad10:	ldr	r3, [fp]
   1ad14:	mov	r1, r5
   1ad18:	mov	r0, r6
   1ad1c:	bl	243c <InflateSkipData>
   1ad20:	mov	sl, #0
   1ad24:	mov	r2, r4
   1ad28:	ldr	r3, [r8]
   1ad2c:	add	r4, r2, #8
   1ad30:	sub	r3, r3, #1
   1ad34:	cmp	sl, r3
   1ad38:	mov	r3, #1
   1ad3c:	str	r3, [sp]
   1ad40:	mov	r1, r5
   1ad44:	mov	r3, r7
   1ad48:	mov	r0, r6
   1ad4c:	blt	1ae74 <ReadCompressedDataSlab2+0x854>
   1ad50:	bl	10d64 <ReadCompressedUInt64Data>
   1ad54:	ldr	r3, [sp, #124]	; 0x7c
   1ad58:	ldr	r2, [sp, #16]
   1ad5c:	mov	r0, r6
   1ad60:	ldr	r3, [r3]
   1ad64:	sub	r3, r3, #1
   1ad68:	add	r3, r3, r2
   1ad6c:	ldr	r2, [r8]
   1ad70:	sub	r1, r2, #1
   1ad74:	ldr	r2, [r9]
   1ad78:	mul	r2, r2, r1
   1ad7c:	mov	r1, r5
   1ad80:	sub	r3, r3, r2
   1ad84:	ldr	r2, [fp]
   1ad88:	sub	r3, r3, r2
   1ad8c:	mov	r2, r7
   1ad90:	bl	243c <InflateSkipData>
   1ad94:	ldr	r3, [sp, #12]
   1ad98:	add	r3, r3, #1
   1ad9c:	str	r3, [sp, #12]
   1ada0:	b	1acfc <ReadCompressedDataSlab2+0x6dc>
   1ada4:	ldr	r3, [sp, #124]	; 0x7c
   1ada8:	ldr	r2, [r8]
   1adac:	ldr	r3, [r3]
   1adb0:	cmp	r2, r3
   1adb4:	bne	1adc4 <ReadCompressedDataSlab2+0x7a4>
   1adb8:	ldr	r3, [r9, #4]
   1adbc:	cmp	r3, #1
   1adc0:	beq	1ae50 <ReadCompressedDataSlab2+0x830>
   1adc4:	mov	sl, #0
   1adc8:	ldr	r3, [r8, #4]
   1adcc:	cmp	sl, r3
   1add0:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1add4:	ldr	r3, [fp]
   1add8:	mov	r2, r7
   1addc:	mov	r1, r5
   1ade0:	mov	r0, r6
   1ade4:	bl	243c <InflateSkipData>
   1ade8:	ldr	r3, [r8]
   1adec:	mov	r2, r4
   1adf0:	str	r3, [sp]
   1adf4:	mov	r1, r5
   1adf8:	mov	r3, r7
   1adfc:	mov	r0, r6
   1ae00:	bl	10d64 <ReadCompressedUInt64Data>
   1ae04:	ldr	r3, [sp, #124]	; 0x7c
   1ae08:	ldr	r2, [r8]
   1ae0c:	ldr	r1, [sp, #16]
   1ae10:	ldr	r3, [r3]
   1ae14:	add	r4, r4, r2, lsl #3
   1ae18:	sub	r3, r3, #1
   1ae1c:	add	r3, r3, r1
   1ae20:	ldr	r1, [r9]
   1ae24:	sub	r2, r2, #1
   1ae28:	mov	r0, r6
   1ae2c:	mul	r2, r1, r2
   1ae30:	mov	r1, r5
   1ae34:	sub	r3, r3, r2
   1ae38:	ldr	r2, [fp]
   1ae3c:	add	sl, sl, #1
   1ae40:	sub	r3, r3, r2
   1ae44:	mov	r2, r7
   1ae48:	bl	243c <InflateSkipData>
   1ae4c:	b	1adc8 <ReadCompressedDataSlab2+0x7a8>
   1ae50:	ldr	r3, [r8, #4]
   1ae54:	mov	r1, r5
   1ae58:	mov	r0, r6
   1ae5c:	mul	r3, r3, r2
   1ae60:	mov	r2, r4
   1ae64:	str	r3, [sp]
   1ae68:	mov	r3, r7
   1ae6c:	bl	10d64 <ReadCompressedUInt64Data>
   1ae70:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1ae74:	bl	10d64 <ReadCompressedUInt64Data>
   1ae78:	mov	r2, r7
   1ae7c:	ldr	r3, [sp, #20]
   1ae80:	mov	r1, r5
   1ae84:	mov	r0, r6
   1ae88:	bl	243c <InflateSkipData>
   1ae8c:	add	sl, sl, #1
   1ae90:	mov	r2, r4
   1ae94:	b	1ad28 <ReadCompressedDataSlab2+0x708>
   1ae98:	ldr	r3, [sp, #124]	; 0x7c
   1ae9c:	ldr	r2, [r9, #4]
   1aea0:	mov	r1, r5
   1aea4:	ldr	r3, [r3]
   1aea8:	sub	r2, r2, #1
   1aeac:	mov	r0, r6
   1aeb0:	mul	r2, r3, r2
   1aeb4:	ldr	sl, [r9]
   1aeb8:	str	r2, [sp, #16]
   1aebc:	ldr	r2, [fp, #4]
   1aec0:	mul	r3, r2, r3
   1aec4:	mov	r2, r7
   1aec8:	bl	243c <InflateSkipData>
   1aecc:	ldr	r3, [r9]
   1aed0:	cmp	r3, #1
   1aed4:	beq	1af90 <ReadCompressedDataSlab2+0x970>
   1aed8:	mov	r3, #0
   1aedc:	str	r3, [sp, #12]
   1aee0:	sub	r3, sl, #1
   1aee4:	str	r3, [sp, #20]
   1aee8:	ldr	r3, [r8, #4]
   1aeec:	ldr	r2, [sp, #12]
   1aef0:	cmp	r2, r3
   1aef4:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1aef8:	mov	r2, r7
   1aefc:	ldr	r3, [fp]
   1af00:	mov	r1, r5
   1af04:	mov	r0, r6
   1af08:	bl	243c <InflateSkipData>
   1af0c:	mov	sl, #0
   1af10:	mov	r2, r4
   1af14:	ldr	r3, [r8]
   1af18:	add	r4, r2, #4
   1af1c:	sub	r3, r3, #1
   1af20:	cmp	sl, r3
   1af24:	mov	r3, #1
   1af28:	str	r3, [sp]
   1af2c:	mov	r1, r5
   1af30:	mov	r3, r7
   1af34:	mov	r0, r6
   1af38:	blt	1b060 <ReadCompressedDataSlab2+0xa40>
   1af3c:	bl	11294 <ReadCompressedInt32Data>
   1af40:	ldr	r3, [sp, #124]	; 0x7c
   1af44:	ldr	r2, [sp, #16]
   1af48:	mov	r0, r6
   1af4c:	ldr	r3, [r3]
   1af50:	sub	r3, r3, #1
   1af54:	add	r3, r3, r2
   1af58:	ldr	r2, [r8]
   1af5c:	sub	r1, r2, #1
   1af60:	ldr	r2, [r9]
   1af64:	mul	r2, r2, r1
   1af68:	mov	r1, r5
   1af6c:	sub	r3, r3, r2
   1af70:	ldr	r2, [fp]
   1af74:	sub	r3, r3, r2
   1af78:	mov	r2, r7
   1af7c:	bl	243c <InflateSkipData>
   1af80:	ldr	r3, [sp, #12]
   1af84:	add	r3, r3, #1
   1af88:	str	r3, [sp, #12]
   1af8c:	b	1aee8 <ReadCompressedDataSlab2+0x8c8>
   1af90:	ldr	r3, [sp, #124]	; 0x7c
   1af94:	ldr	r2, [r8]
   1af98:	ldr	r3, [r3]
   1af9c:	cmp	r2, r3
   1afa0:	bne	1afb0 <ReadCompressedDataSlab2+0x990>
   1afa4:	ldr	r3, [r9, #4]
   1afa8:	cmp	r3, #1
   1afac:	beq	1b03c <ReadCompressedDataSlab2+0xa1c>
   1afb0:	mov	sl, #0
   1afb4:	ldr	r3, [r8, #4]
   1afb8:	cmp	sl, r3
   1afbc:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1afc0:	ldr	r3, [fp]
   1afc4:	mov	r2, r7
   1afc8:	mov	r1, r5
   1afcc:	mov	r0, r6
   1afd0:	bl	243c <InflateSkipData>
   1afd4:	ldr	r3, [r8]
   1afd8:	mov	r2, r4
   1afdc:	str	r3, [sp]
   1afe0:	mov	r1, r5
   1afe4:	mov	r3, r7
   1afe8:	mov	r0, r6
   1afec:	bl	11294 <ReadCompressedInt32Data>
   1aff0:	ldr	r3, [sp, #124]	; 0x7c
   1aff4:	ldr	r2, [r8]
   1aff8:	ldr	r1, [sp, #16]
   1affc:	ldr	r3, [r3]
   1b000:	add	r4, r4, r2, lsl #2
   1b004:	sub	r3, r3, #1
   1b008:	add	r3, r3, r1
   1b00c:	ldr	r1, [r9]
   1b010:	sub	r2, r2, #1
   1b014:	mov	r0, r6
   1b018:	mul	r2, r1, r2
   1b01c:	mov	r1, r5
   1b020:	sub	r3, r3, r2
   1b024:	ldr	r2, [fp]
   1b028:	add	sl, sl, #1
   1b02c:	sub	r3, r3, r2
   1b030:	mov	r2, r7
   1b034:	bl	243c <InflateSkipData>
   1b038:	b	1afb4 <ReadCompressedDataSlab2+0x994>
   1b03c:	ldr	r3, [r8, #4]
   1b040:	mov	r1, r5
   1b044:	mov	r0, r6
   1b048:	mul	r3, r3, r2
   1b04c:	mov	r2, r4
   1b050:	str	r3, [sp]
   1b054:	mov	r3, r7
   1b058:	bl	11294 <ReadCompressedInt32Data>
   1b05c:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1b060:	bl	11294 <ReadCompressedInt32Data>
   1b064:	mov	r2, r7
   1b068:	ldr	r3, [sp, #20]
   1b06c:	mov	r1, r5
   1b070:	mov	r0, r6
   1b074:	bl	243c <InflateSkipData>
   1b078:	add	sl, sl, #1
   1b07c:	mov	r2, r4
   1b080:	b	1af14 <ReadCompressedDataSlab2+0x8f4>
   1b084:	ldr	r3, [sp, #124]	; 0x7c
   1b088:	ldr	r2, [r9, #4]
   1b08c:	mov	r1, r5
   1b090:	ldr	r3, [r3]
   1b094:	sub	r2, r2, #1
   1b098:	mov	r0, r6
   1b09c:	mul	r2, r3, r2
   1b0a0:	ldr	sl, [r9]
   1b0a4:	str	r2, [sp, #16]
   1b0a8:	ldr	r2, [fp, #4]
   1b0ac:	mul	r3, r2, r3
   1b0b0:	mov	r2, r7
   1b0b4:	bl	243c <InflateSkipData>
   1b0b8:	ldr	r3, [r9]
   1b0bc:	cmp	r3, #1
   1b0c0:	beq	1b17c <ReadCompressedDataSlab2+0xb5c>
   1b0c4:	mov	r3, #0
   1b0c8:	str	r3, [sp, #12]
   1b0cc:	sub	r3, sl, #1
   1b0d0:	str	r3, [sp, #20]
   1b0d4:	ldr	r3, [r8, #4]
   1b0d8:	ldr	r2, [sp, #12]
   1b0dc:	cmp	r2, r3
   1b0e0:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b0e4:	mov	r2, r7
   1b0e8:	ldr	r3, [fp]
   1b0ec:	mov	r1, r5
   1b0f0:	mov	r0, r6
   1b0f4:	bl	243c <InflateSkipData>
   1b0f8:	mov	sl, #0
   1b0fc:	mov	r2, r4
   1b100:	ldr	r3, [r8]
   1b104:	add	r4, r2, #4
   1b108:	sub	r3, r3, #1
   1b10c:	cmp	sl, r3
   1b110:	mov	r3, #1
   1b114:	str	r3, [sp]
   1b118:	mov	r1, r5
   1b11c:	mov	r3, r7
   1b120:	mov	r0, r6
   1b124:	blt	1b24c <ReadCompressedDataSlab2+0xc2c>
   1b128:	bl	11774 <ReadCompressedUInt32Data>
   1b12c:	ldr	r3, [sp, #124]	; 0x7c
   1b130:	ldr	r2, [sp, #16]
   1b134:	mov	r0, r6
   1b138:	ldr	r3, [r3]
   1b13c:	sub	r3, r3, #1
   1b140:	add	r3, r3, r2
   1b144:	ldr	r2, [r8]
   1b148:	sub	r1, r2, #1
   1b14c:	ldr	r2, [r9]
   1b150:	mul	r2, r2, r1
   1b154:	mov	r1, r5
   1b158:	sub	r3, r3, r2
   1b15c:	ldr	r2, [fp]
   1b160:	sub	r3, r3, r2
   1b164:	mov	r2, r7
   1b168:	bl	243c <InflateSkipData>
   1b16c:	ldr	r3, [sp, #12]
   1b170:	add	r3, r3, #1
   1b174:	str	r3, [sp, #12]
   1b178:	b	1b0d4 <ReadCompressedDataSlab2+0xab4>
   1b17c:	ldr	r3, [sp, #124]	; 0x7c
   1b180:	ldr	r2, [r8]
   1b184:	ldr	r3, [r3]
   1b188:	cmp	r2, r3
   1b18c:	bne	1b19c <ReadCompressedDataSlab2+0xb7c>
   1b190:	ldr	r3, [r9, #4]
   1b194:	cmp	r3, #1
   1b198:	beq	1b228 <ReadCompressedDataSlab2+0xc08>
   1b19c:	mov	sl, #0
   1b1a0:	ldr	r3, [r8, #4]
   1b1a4:	cmp	sl, r3
   1b1a8:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b1ac:	ldr	r3, [fp]
   1b1b0:	mov	r2, r7
   1b1b4:	mov	r1, r5
   1b1b8:	mov	r0, r6
   1b1bc:	bl	243c <InflateSkipData>
   1b1c0:	ldr	r3, [r8]
   1b1c4:	mov	r2, r4
   1b1c8:	str	r3, [sp]
   1b1cc:	mov	r1, r5
   1b1d0:	mov	r3, r7
   1b1d4:	mov	r0, r6
   1b1d8:	bl	11774 <ReadCompressedUInt32Data>
   1b1dc:	ldr	r3, [sp, #124]	; 0x7c
   1b1e0:	ldr	r2, [r8]
   1b1e4:	ldr	r1, [sp, #16]
   1b1e8:	ldr	r3, [r3]
   1b1ec:	add	r4, r4, r2, lsl #2
   1b1f0:	sub	r3, r3, #1
   1b1f4:	add	r3, r3, r1
   1b1f8:	ldr	r1, [r9]
   1b1fc:	sub	r2, r2, #1
   1b200:	mov	r0, r6
   1b204:	mul	r2, r1, r2
   1b208:	mov	r1, r5
   1b20c:	sub	r3, r3, r2
   1b210:	ldr	r2, [fp]
   1b214:	add	sl, sl, #1
   1b218:	sub	r3, r3, r2
   1b21c:	mov	r2, r7
   1b220:	bl	243c <InflateSkipData>
   1b224:	b	1b1a0 <ReadCompressedDataSlab2+0xb80>
   1b228:	ldr	r3, [r8, #4]
   1b22c:	mov	r1, r5
   1b230:	mov	r0, r6
   1b234:	mul	r3, r3, r2
   1b238:	mov	r2, r4
   1b23c:	str	r3, [sp]
   1b240:	mov	r3, r7
   1b244:	bl	11774 <ReadCompressedUInt32Data>
   1b248:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1b24c:	bl	11774 <ReadCompressedUInt32Data>
   1b250:	mov	r2, r7
   1b254:	ldr	r3, [sp, #20]
   1b258:	mov	r1, r5
   1b25c:	mov	r0, r6
   1b260:	bl	243c <InflateSkipData>
   1b264:	add	sl, sl, #1
   1b268:	mov	r2, r4
   1b26c:	b	1b100 <ReadCompressedDataSlab2+0xae0>
   1b270:	ldr	r3, [sp, #124]	; 0x7c
   1b274:	ldr	r2, [r9, #4]
   1b278:	mov	r1, r5
   1b27c:	ldr	r3, [r3]
   1b280:	sub	r2, r2, #1
   1b284:	mov	r0, r6
   1b288:	mul	r2, r3, r2
   1b28c:	ldr	sl, [r9]
   1b290:	str	r2, [sp, #16]
   1b294:	ldr	r2, [fp, #4]
   1b298:	mul	r3, r2, r3
   1b29c:	mov	r2, r7
   1b2a0:	bl	243c <InflateSkipData>
   1b2a4:	ldr	r3, [r9]
   1b2a8:	cmp	r3, #1
   1b2ac:	beq	1b368 <ReadCompressedDataSlab2+0xd48>
   1b2b0:	mov	r3, #0
   1b2b4:	str	r3, [sp, #12]
   1b2b8:	sub	r3, sl, #1
   1b2bc:	str	r3, [sp, #20]
   1b2c0:	ldr	r3, [r8, #4]
   1b2c4:	ldr	r2, [sp, #12]
   1b2c8:	cmp	r2, r3
   1b2cc:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b2d0:	mov	r2, r7
   1b2d4:	ldr	r3, [fp]
   1b2d8:	mov	r1, r5
   1b2dc:	mov	r0, r6
   1b2e0:	bl	243c <InflateSkipData>
   1b2e4:	mov	sl, #0
   1b2e8:	mov	r2, r4
   1b2ec:	ldr	r3, [r8]
   1b2f0:	add	r4, r2, #2
   1b2f4:	sub	r3, r3, #1
   1b2f8:	cmp	sl, r3
   1b2fc:	mov	r3, #1
   1b300:	str	r3, [sp]
   1b304:	mov	r1, r5
   1b308:	mov	r3, r7
   1b30c:	mov	r0, r6
   1b310:	blt	1b438 <ReadCompressedDataSlab2+0xe18>
   1b314:	bl	11c54 <ReadCompressedInt16Data>
   1b318:	ldr	r3, [sp, #124]	; 0x7c
   1b31c:	ldr	r2, [sp, #16]
   1b320:	mov	r0, r6
   1b324:	ldr	r3, [r3]
   1b328:	sub	r3, r3, #1
   1b32c:	add	r3, r3, r2
   1b330:	ldr	r2, [r8]
   1b334:	sub	r1, r2, #1
   1b338:	ldr	r2, [r9]
   1b33c:	mul	r2, r2, r1
   1b340:	mov	r1, r5
   1b344:	sub	r3, r3, r2
   1b348:	ldr	r2, [fp]
   1b34c:	sub	r3, r3, r2
   1b350:	mov	r2, r7
   1b354:	bl	243c <InflateSkipData>
   1b358:	ldr	r3, [sp, #12]
   1b35c:	add	r3, r3, #1
   1b360:	str	r3, [sp, #12]
   1b364:	b	1b2c0 <ReadCompressedDataSlab2+0xca0>
   1b368:	ldr	r3, [sp, #124]	; 0x7c
   1b36c:	ldr	r2, [r8]
   1b370:	ldr	r3, [r3]
   1b374:	cmp	r2, r3
   1b378:	bne	1b388 <ReadCompressedDataSlab2+0xd68>
   1b37c:	ldr	r3, [r9, #4]
   1b380:	cmp	r3, #1
   1b384:	beq	1b414 <ReadCompressedDataSlab2+0xdf4>
   1b388:	mov	sl, #0
   1b38c:	ldr	r3, [r8, #4]
   1b390:	cmp	sl, r3
   1b394:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b398:	ldr	r3, [fp]
   1b39c:	mov	r2, r7
   1b3a0:	mov	r1, r5
   1b3a4:	mov	r0, r6
   1b3a8:	bl	243c <InflateSkipData>
   1b3ac:	ldr	r3, [r8]
   1b3b0:	mov	r2, r4
   1b3b4:	str	r3, [sp]
   1b3b8:	mov	r1, r5
   1b3bc:	mov	r3, r7
   1b3c0:	mov	r0, r6
   1b3c4:	bl	11c54 <ReadCompressedInt16Data>
   1b3c8:	ldr	r3, [sp, #124]	; 0x7c
   1b3cc:	ldr	r2, [r8]
   1b3d0:	ldr	r1, [sp, #16]
   1b3d4:	ldr	r3, [r3]
   1b3d8:	add	r4, r4, r2, lsl #1
   1b3dc:	sub	r3, r3, #1
   1b3e0:	add	r3, r3, r1
   1b3e4:	ldr	r1, [r9]
   1b3e8:	sub	r2, r2, #1
   1b3ec:	mov	r0, r6
   1b3f0:	mul	r2, r1, r2
   1b3f4:	mov	r1, r5
   1b3f8:	sub	r3, r3, r2
   1b3fc:	ldr	r2, [fp]
   1b400:	add	sl, sl, #1
   1b404:	sub	r3, r3, r2
   1b408:	mov	r2, r7
   1b40c:	bl	243c <InflateSkipData>
   1b410:	b	1b38c <ReadCompressedDataSlab2+0xd6c>
   1b414:	ldr	r3, [r8, #4]
   1b418:	mov	r1, r5
   1b41c:	mov	r0, r6
   1b420:	mul	r3, r3, r2
   1b424:	mov	r2, r4
   1b428:	str	r3, [sp]
   1b42c:	mov	r3, r7
   1b430:	bl	11c54 <ReadCompressedInt16Data>
   1b434:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1b438:	bl	11c54 <ReadCompressedInt16Data>
   1b43c:	mov	r2, r7
   1b440:	ldr	r3, [sp, #20]
   1b444:	mov	r1, r5
   1b448:	mov	r0, r6
   1b44c:	bl	243c <InflateSkipData>
   1b450:	add	sl, sl, #1
   1b454:	mov	r2, r4
   1b458:	b	1b2ec <ReadCompressedDataSlab2+0xccc>
   1b45c:	ldr	r3, [sp, #124]	; 0x7c
   1b460:	ldr	r2, [r9, #4]
   1b464:	mov	r1, r5
   1b468:	ldr	r3, [r3]
   1b46c:	sub	r2, r2, #1
   1b470:	mov	r0, r6
   1b474:	mul	r2, r3, r2
   1b478:	ldr	sl, [r9]
   1b47c:	str	r2, [sp, #16]
   1b480:	ldr	r2, [fp, #4]
   1b484:	mul	r3, r2, r3
   1b488:	mov	r2, r7
   1b48c:	bl	243c <InflateSkipData>
   1b490:	ldr	r3, [r9]
   1b494:	cmp	r3, #1
   1b498:	beq	1b554 <ReadCompressedDataSlab2+0xf34>
   1b49c:	mov	r3, #0
   1b4a0:	str	r3, [sp, #12]
   1b4a4:	sub	r3, sl, #1
   1b4a8:	str	r3, [sp, #20]
   1b4ac:	ldr	r3, [r8, #4]
   1b4b0:	ldr	r2, [sp, #12]
   1b4b4:	cmp	r2, r3
   1b4b8:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b4bc:	mov	r2, r7
   1b4c0:	ldr	r3, [fp]
   1b4c4:	mov	r1, r5
   1b4c8:	mov	r0, r6
   1b4cc:	bl	243c <InflateSkipData>
   1b4d0:	mov	sl, #0
   1b4d4:	mov	r2, r4
   1b4d8:	ldr	r3, [r8]
   1b4dc:	add	r4, r2, #2
   1b4e0:	sub	r3, r3, #1
   1b4e4:	cmp	sl, r3
   1b4e8:	mov	r3, #1
   1b4ec:	str	r3, [sp]
   1b4f0:	mov	r1, r5
   1b4f4:	mov	r3, r7
   1b4f8:	mov	r0, r6
   1b4fc:	blt	1b624 <ReadCompressedDataSlab2+0x1004>
   1b500:	bl	1215c <ReadCompressedUInt16Data>
   1b504:	ldr	r3, [sp, #124]	; 0x7c
   1b508:	ldr	r2, [sp, #16]
   1b50c:	mov	r0, r6
   1b510:	ldr	r3, [r3]
   1b514:	sub	r3, r3, #1
   1b518:	add	r3, r3, r2
   1b51c:	ldr	r2, [r8]
   1b520:	sub	r1, r2, #1
   1b524:	ldr	r2, [r9]
   1b528:	mul	r2, r2, r1
   1b52c:	mov	r1, r5
   1b530:	sub	r3, r3, r2
   1b534:	ldr	r2, [fp]
   1b538:	sub	r3, r3, r2
   1b53c:	mov	r2, r7
   1b540:	bl	243c <InflateSkipData>
   1b544:	ldr	r3, [sp, #12]
   1b548:	add	r3, r3, #1
   1b54c:	str	r3, [sp, #12]
   1b550:	b	1b4ac <ReadCompressedDataSlab2+0xe8c>
   1b554:	ldr	r3, [sp, #124]	; 0x7c
   1b558:	ldr	r2, [r8]
   1b55c:	ldr	r3, [r3]
   1b560:	cmp	r2, r3
   1b564:	bne	1b574 <ReadCompressedDataSlab2+0xf54>
   1b568:	ldr	r3, [r9, #4]
   1b56c:	cmp	r3, #1
   1b570:	beq	1b600 <ReadCompressedDataSlab2+0xfe0>
   1b574:	mov	sl, #0
   1b578:	ldr	r3, [r8, #4]
   1b57c:	cmp	sl, r3
   1b580:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b584:	ldr	r3, [fp]
   1b588:	mov	r2, r7
   1b58c:	mov	r1, r5
   1b590:	mov	r0, r6
   1b594:	bl	243c <InflateSkipData>
   1b598:	ldr	r3, [r8]
   1b59c:	mov	r2, r4
   1b5a0:	str	r3, [sp]
   1b5a4:	mov	r1, r5
   1b5a8:	mov	r3, r7
   1b5ac:	mov	r0, r6
   1b5b0:	bl	1215c <ReadCompressedUInt16Data>
   1b5b4:	ldr	r3, [sp, #124]	; 0x7c
   1b5b8:	ldr	r2, [r8]
   1b5bc:	ldr	r1, [sp, #16]
   1b5c0:	ldr	r3, [r3]
   1b5c4:	add	r4, r4, r2, lsl #1
   1b5c8:	sub	r3, r3, #1
   1b5cc:	add	r3, r3, r1
   1b5d0:	ldr	r1, [r9]
   1b5d4:	sub	r2, r2, #1
   1b5d8:	mov	r0, r6
   1b5dc:	mul	r2, r1, r2
   1b5e0:	mov	r1, r5
   1b5e4:	sub	r3, r3, r2
   1b5e8:	ldr	r2, [fp]
   1b5ec:	add	sl, sl, #1
   1b5f0:	sub	r3, r3, r2
   1b5f4:	mov	r2, r7
   1b5f8:	bl	243c <InflateSkipData>
   1b5fc:	b	1b578 <ReadCompressedDataSlab2+0xf58>
   1b600:	ldr	r3, [r8, #4]
   1b604:	mov	r1, r5
   1b608:	mov	r0, r6
   1b60c:	mul	r3, r3, r2
   1b610:	mov	r2, r4
   1b614:	str	r3, [sp]
   1b618:	mov	r3, r7
   1b61c:	bl	1215c <ReadCompressedUInt16Data>
   1b620:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1b624:	bl	1215c <ReadCompressedUInt16Data>
   1b628:	mov	r2, r7
   1b62c:	ldr	r3, [sp, #20]
   1b630:	mov	r1, r5
   1b634:	mov	r0, r6
   1b638:	bl	243c <InflateSkipData>
   1b63c:	add	sl, sl, #1
   1b640:	mov	r2, r4
   1b644:	b	1b4d8 <ReadCompressedDataSlab2+0xeb8>
   1b648:	ldr	r3, [sp, #124]	; 0x7c
   1b64c:	ldr	r2, [r9, #4]
   1b650:	mov	r1, r5
   1b654:	ldr	r3, [r3]
   1b658:	sub	r2, r2, #1
   1b65c:	mov	r0, r6
   1b660:	mul	r2, r3, r2
   1b664:	ldr	sl, [r9]
   1b668:	str	r2, [sp, #16]
   1b66c:	ldr	r2, [fp, #4]
   1b670:	mul	r3, r2, r3
   1b674:	mov	r2, r7
   1b678:	bl	243c <InflateSkipData>
   1b67c:	ldr	r3, [r9]
   1b680:	cmp	r3, #1
   1b684:	beq	1b744 <ReadCompressedDataSlab2+0x1124>
   1b688:	mov	r3, #0
   1b68c:	str	r3, [sp, #12]
   1b690:	sub	r3, sl, #1
   1b694:	str	r3, [sp, #20]
   1b698:	ldr	r3, [r8, #4]
   1b69c:	ldr	r2, [sp, #12]
   1b6a0:	cmp	r2, r3
   1b6a4:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b6a8:	mov	r2, r7
   1b6ac:	ldr	r3, [fp]
   1b6b0:	mov	r1, r5
   1b6b4:	mov	r0, r6
   1b6b8:	bl	243c <InflateSkipData>
   1b6bc:	mov	r2, r4
   1b6c0:	ldr	r3, [r8]
   1b6c4:	sub	r1, r2, r4
   1b6c8:	sub	r3, r3, #1
   1b6cc:	cmp	r1, r3
   1b6d0:	add	sl, r2, #1
   1b6d4:	blt	1b814 <ReadCompressedDataSlab2+0x11f4>
   1b6d8:	mov	r3, #1
   1b6dc:	str	r3, [sp]
   1b6e0:	mov	r1, r5
   1b6e4:	mov	r3, r7
   1b6e8:	mov	r0, r6
   1b6ec:	bl	12664 <ReadCompressedInt8Data>
   1b6f0:	ldr	r3, [sp, #124]	; 0x7c
   1b6f4:	ldr	r2, [sp, #16]
   1b6f8:	mov	r0, r6
   1b6fc:	ldr	r3, [r3]
   1b700:	mov	r4, sl
   1b704:	sub	r3, r3, #1
   1b708:	add	r3, r3, r2
   1b70c:	ldr	r2, [r8]
   1b710:	sub	r1, r2, #1
   1b714:	ldr	r2, [r9]
   1b718:	mul	r2, r2, r1
   1b71c:	mov	r1, r5
   1b720:	sub	r3, r3, r2
   1b724:	ldr	r2, [fp]
   1b728:	sub	r3, r3, r2
   1b72c:	mov	r2, r7
   1b730:	bl	243c <InflateSkipData>
   1b734:	ldr	r3, [sp, #12]
   1b738:	add	r3, r3, #1
   1b73c:	str	r3, [sp, #12]
   1b740:	b	1b698 <ReadCompressedDataSlab2+0x1078>
   1b744:	ldr	r3, [sp, #124]	; 0x7c
   1b748:	ldr	r2, [r8]
   1b74c:	ldr	r3, [r3]
   1b750:	cmp	r2, r3
   1b754:	bne	1b764 <ReadCompressedDataSlab2+0x1144>
   1b758:	ldr	r3, [r9, #4]
   1b75c:	cmp	r3, #1
   1b760:	beq	1b7f0 <ReadCompressedDataSlab2+0x11d0>
   1b764:	mov	sl, #0
   1b768:	ldr	r3, [r8, #4]
   1b76c:	cmp	sl, r3
   1b770:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b774:	ldr	r3, [fp]
   1b778:	mov	r2, r7
   1b77c:	mov	r1, r5
   1b780:	mov	r0, r6
   1b784:	bl	243c <InflateSkipData>
   1b788:	ldr	r3, [r8]
   1b78c:	mov	r2, r4
   1b790:	str	r3, [sp]
   1b794:	mov	r1, r5
   1b798:	mov	r3, r7
   1b79c:	mov	r0, r6
   1b7a0:	bl	12664 <ReadCompressedInt8Data>
   1b7a4:	ldr	r3, [sp, #124]	; 0x7c
   1b7a8:	ldr	r1, [sp, #16]
   1b7ac:	ldr	r2, [r8]
   1b7b0:	ldr	r3, [r3]
   1b7b4:	add	r4, r4, r2
   1b7b8:	sub	r3, r3, #1
   1b7bc:	add	r3, r3, r1
   1b7c0:	ldr	r1, [r9]
   1b7c4:	sub	r2, r2, #1
   1b7c8:	mov	r0, r6
   1b7cc:	mul	r2, r1, r2
   1b7d0:	mov	r1, r5
   1b7d4:	sub	r3, r3, r2
   1b7d8:	ldr	r2, [fp]
   1b7dc:	add	sl, sl, #1
   1b7e0:	sub	r3, r3, r2
   1b7e4:	mov	r2, r7
   1b7e8:	bl	243c <InflateSkipData>
   1b7ec:	b	1b768 <ReadCompressedDataSlab2+0x1148>
   1b7f0:	ldr	r3, [r8, #4]
   1b7f4:	mov	r1, r5
   1b7f8:	mov	r0, r6
   1b7fc:	mul	r3, r3, r2
   1b800:	mov	r2, r4
   1b804:	str	r3, [sp]
   1b808:	mov	r3, r7
   1b80c:	bl	12664 <ReadCompressedInt8Data>
   1b810:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1b814:	mov	r3, #1
   1b818:	str	r3, [sp]
   1b81c:	mov	r1, r5
   1b820:	mov	r3, r7
   1b824:	mov	r0, r6
   1b828:	bl	12664 <ReadCompressedInt8Data>
   1b82c:	mov	r2, r7
   1b830:	ldr	r3, [sp, #20]
   1b834:	mov	r1, r5
   1b838:	mov	r0, r6
   1b83c:	bl	243c <InflateSkipData>
   1b840:	mov	r2, sl
   1b844:	b	1b6c0 <ReadCompressedDataSlab2+0x10a0>
   1b848:	ldr	r3, [sp, #124]	; 0x7c
   1b84c:	ldr	r2, [r9, #4]
   1b850:	mov	r1, r5
   1b854:	ldr	r3, [r3]
   1b858:	sub	r2, r2, #1
   1b85c:	mov	r0, r6
   1b860:	mul	r2, r3, r2
   1b864:	ldr	sl, [r9]
   1b868:	str	r2, [sp, #16]
   1b86c:	ldr	r2, [fp, #4]
   1b870:	mul	r3, r2, r3
   1b874:	mov	r2, r7
   1b878:	bl	243c <InflateSkipData>
   1b87c:	ldr	r3, [r9]
   1b880:	cmp	r3, #1
   1b884:	beq	1b93c <ReadCompressedDataSlab2+0x131c>
   1b888:	str	r4, [sp, #12]
   1b88c:	mov	r4, #0
   1b890:	sub	r3, sl, #1
   1b894:	str	r3, [sp, #20]
   1b898:	ldr	r3, [r8, #4]
   1b89c:	cmp	r4, r3
   1b8a0:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b8a4:	mov	r2, r7
   1b8a8:	ldr	r3, [fp]
   1b8ac:	mov	r1, r5
   1b8b0:	mov	r0, r6
   1b8b4:	bl	243c <InflateSkipData>
   1b8b8:	ldr	r2, [sp, #12]
   1b8bc:	ldr	r3, [sp, #12]
   1b8c0:	add	sl, r2, #1
   1b8c4:	sub	r1, r2, r3
   1b8c8:	ldr	r3, [r8]
   1b8cc:	sub	r3, r3, #1
   1b8d0:	cmp	r1, r3
   1b8d4:	blt	1ba0c <ReadCompressedDataSlab2+0x13ec>
   1b8d8:	mov	r3, #1
   1b8dc:	str	r3, [sp]
   1b8e0:	mov	r1, r5
   1b8e4:	mov	r3, r7
   1b8e8:	mov	r0, r6
   1b8ec:	str	sl, [sp, #12]
   1b8f0:	bl	12b24 <ReadCompressedUInt8Data>
   1b8f4:	ldr	r3, [sp, #124]	; 0x7c
   1b8f8:	ldr	r2, [sp, #16]
   1b8fc:	mov	r0, r6
   1b900:	ldr	r3, [r3]
   1b904:	add	r4, r4, #1
   1b908:	sub	r3, r3, #1
   1b90c:	add	r3, r3, r2
   1b910:	ldr	r2, [r8]
   1b914:	sub	r1, r2, #1
   1b918:	ldr	r2, [r9]
   1b91c:	mul	r2, r2, r1
   1b920:	mov	r1, r5
   1b924:	sub	r3, r3, r2
   1b928:	ldr	r2, [fp]
   1b92c:	sub	r3, r3, r2
   1b930:	mov	r2, r7
   1b934:	bl	243c <InflateSkipData>
   1b938:	b	1b898 <ReadCompressedDataSlab2+0x1278>
   1b93c:	ldr	r3, [sp, #124]	; 0x7c
   1b940:	ldr	r2, [r8]
   1b944:	ldr	r3, [r3]
   1b948:	cmp	r2, r3
   1b94c:	bne	1b95c <ReadCompressedDataSlab2+0x133c>
   1b950:	ldr	r3, [r9, #4]
   1b954:	cmp	r3, #1
   1b958:	beq	1b9e8 <ReadCompressedDataSlab2+0x13c8>
   1b95c:	mov	sl, #0
   1b960:	ldr	r3, [r8, #4]
   1b964:	cmp	sl, r3
   1b968:	bge	1a89c <ReadCompressedDataSlab2+0x27c>
   1b96c:	ldr	r3, [fp]
   1b970:	mov	r2, r7
   1b974:	mov	r1, r5
   1b978:	mov	r0, r6
   1b97c:	bl	243c <InflateSkipData>
   1b980:	ldr	r3, [r8]
   1b984:	mov	r2, r4
   1b988:	str	r3, [sp]
   1b98c:	mov	r1, r5
   1b990:	mov	r3, r7
   1b994:	mov	r0, r6
   1b998:	bl	12b24 <ReadCompressedUInt8Data>
   1b99c:	ldr	r3, [sp, #124]	; 0x7c
   1b9a0:	ldr	r1, [sp, #16]
   1b9a4:	ldr	r2, [r8]
   1b9a8:	ldr	r3, [r3]
   1b9ac:	add	r4, r4, r2
   1b9b0:	sub	r3, r3, #1
   1b9b4:	add	r3, r3, r1
   1b9b8:	ldr	r1, [r9]
   1b9bc:	sub	r2, r2, #1
   1b9c0:	mov	r0, r6
   1b9c4:	mul	r2, r1, r2
   1b9c8:	mov	r1, r5
   1b9cc:	sub	r3, r3, r2
   1b9d0:	ldr	r2, [fp]
   1b9d4:	add	sl, sl, #1
   1b9d8:	sub	r3, r3, r2
   1b9dc:	mov	r2, r7
   1b9e0:	bl	243c <InflateSkipData>
   1b9e4:	b	1b960 <ReadCompressedDataSlab2+0x1340>
   1b9e8:	ldr	r3, [r8, #4]
   1b9ec:	mov	r1, r5
   1b9f0:	mov	r0, r6
   1b9f4:	mul	r3, r3, r2
   1b9f8:	mov	r2, r4
   1b9fc:	str	r3, [sp]
   1ba00:	mov	r3, r7
   1ba04:	bl	12b24 <ReadCompressedUInt8Data>
   1ba08:	b	1a89c <ReadCompressedDataSlab2+0x27c>
   1ba0c:	mov	r3, #1
   1ba10:	str	r3, [sp]
   1ba14:	mov	r1, r5
   1ba18:	mov	r3, r7
   1ba1c:	mov	r0, r6
   1ba20:	bl	12b24 <ReadCompressedUInt8Data>
   1ba24:	mov	r2, r7
   1ba28:	ldr	r3, [sp, #20]
   1ba2c:	mov	r1, r5
   1ba30:	mov	r0, r6
   1ba34:	bl	243c <InflateSkipData>
   1ba38:	mov	r2, sl
   1ba3c:	b	1b8bc <ReadCompressedDataSlab2+0x129c>

0001ba40 <WriteData>:
   1ba40:	push	{r4, r5, r6, r7, lr}
   1ba44:	sub	sp, sp, #20
   1ba48:	mov	ip, #0
   1ba4c:	subs	r4, r0, #0
   1ba50:	str	r3, [sp, #4]
   1ba54:	str	ip, [sp, #12]
   1ba58:	moveq	r0, r4
   1ba5c:	beq	1bad4 <WriteData+0x94>
   1ba60:	ldr	r0, [r4]
   1ba64:	cmp	r0, ip
   1ba68:	beq	1bad4 <WriteData+0x94>
   1ba6c:	mov	r0, r3
   1ba70:	mov	r5, r2
   1ba74:	mov	r6, r1
   1ba78:	bl	1600 <Mat_SizeOf@plt>
   1ba7c:	mov	r1, #4
   1ba80:	mov	r2, #1
   1ba84:	mul	r3, r5, r0
   1ba88:	mov	r7, r0
   1ba8c:	str	r3, [sp, #12]
   1ba90:	add	r0, sp, r1
   1ba94:	ldr	r3, [r4]
   1ba98:	bl	157c <fwrite@plt>
   1ba9c:	ldr	r3, [r4]
   1baa0:	mov	r2, #1
   1baa4:	mov	r1, #4
   1baa8:	add	r0, sp, #12
   1baac:	bl	157c <fwrite@plt>
   1bab0:	cmp	r6, #0
   1bab4:	cmpne	r5, #0
   1bab8:	ble	1bad0 <WriteData+0x90>
   1babc:	ldr	r3, [r4]
   1bac0:	mov	r2, r5
   1bac4:	mov	r1, r7
   1bac8:	mov	r0, r6
   1bacc:	bl	157c <fwrite@plt>
   1bad0:	ldr	r0, [sp, #12]
   1bad4:	add	sp, sp, #20
   1bad8:	pop	{r4, r5, r6, r7, pc}

0001badc <Mat_VarReadNumeric5>:
   1badc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bae0:	mov	r8, r3
   1bae4:	ldr	r3, [r1, #48]	; 0x30
   1bae8:	sub	sp, sp, #20
   1baec:	cmp	r3, #1
   1baf0:	mov	r4, r0
   1baf4:	mov	r6, r1
   1baf8:	mov	r7, r2
   1bafc:	add	r9, sp, #8
   1bb00:	bne	1bbe4 <Mat_VarReadNumeric5+0x108>
   1bb04:	ldr	r3, [r1, #52]	; 0x34
   1bb08:	mov	r2, r9
   1bb0c:	ldr	r1, [r3, #12]
   1bb10:	mov	r3, #0
   1bb14:	str	r3, [r1, #4]
   1bb18:	bl	2f24 <InflateDataType>
   1bb1c:	ldr	r3, [r4, #20]
   1bb20:	cmp	r3, #0
   1bb24:	beq	1bb30 <Mat_VarReadNumeric5+0x54>
   1bb28:	mov	r0, r9
   1bb2c:	bl	1a80 <Mat_uint32Swap>
   1bb30:	ldr	r0, [sp, #8]
   1bb34:	lsr	r3, r0, #16
   1bb38:	uxtb	r5, r0
   1bb3c:	cmp	r5, #24
   1bb40:	lsl	r3, r3, #16
   1bb44:	movhi	r5, #0
   1bb48:	cmp	r3, #0
   1bb4c:	beq	1bba0 <Mat_VarReadNumeric5+0xc4>
   1bb50:	lsr	r0, r0, #16
   1bb54:	mov	r9, #1
   1bb58:	ldr	r3, [r6, #48]	; 0x30
   1bb5c:	cmp	r3, #0
   1bb60:	bne	1bd68 <Mat_VarReadNumeric5+0x28c>
   1bb64:	ldr	r3, [r6, #16]
   1bb68:	sub	r3, r3, #6
   1bb6c:	cmp	r3, #9
   1bb70:	addls	pc, pc, r3, lsl #2
   1bb74:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bb78:	b	1bc48 <Mat_VarReadNumeric5+0x16c>
   1bb7c:	b	1bc90 <Mat_VarReadNumeric5+0x1b4>
   1bb80:	b	1bd38 <Mat_VarReadNumeric5+0x25c>
   1bb84:	b	1bd50 <Mat_VarReadNumeric5+0x274>
   1bb88:	b	1bd08 <Mat_VarReadNumeric5+0x22c>
   1bb8c:	b	1bd20 <Mat_VarReadNumeric5+0x244>
   1bb90:	b	1bcd8 <Mat_VarReadNumeric5+0x1fc>
   1bb94:	b	1bcf0 <Mat_VarReadNumeric5+0x214>
   1bb98:	b	1bca8 <Mat_VarReadNumeric5+0x1cc>
   1bb9c:	b	1bcc0 <Mat_VarReadNumeric5+0x1e4>
   1bba0:	ldr	r3, [r6, #52]	; 0x34
   1bba4:	add	r9, r9, #4
   1bba8:	mov	r2, r9
   1bbac:	ldr	r1, [r3, #12]
   1bbb0:	mov	r0, r4
   1bbb4:	bl	2f24 <InflateDataType>
   1bbb8:	ldr	r3, [r4, #20]
   1bbbc:	cmp	r3, #0
   1bbc0:	beq	1bbcc <Mat_VarReadNumeric5+0xf0>
   1bbc4:	mov	r0, r9
   1bbc8:	bl	1a80 <Mat_uint32Swap>
   1bbcc:	ldr	r0, [sp, #12]
   1bbd0:	cmp	r0, #0
   1bbd4:	streq	r0, [r6]
   1bbd8:	beq	1bc88 <Mat_VarReadNumeric5+0x1ac>
   1bbdc:	mov	r9, #0
   1bbe0:	b	1bb58 <Mat_VarReadNumeric5+0x7c>
   1bbe4:	ldr	r3, [r0]
   1bbe8:	mov	r2, #1
   1bbec:	mov	r1, #4
   1bbf0:	mov	r0, r9
   1bbf4:	bl	1588 <fread@plt>
   1bbf8:	ldr	r3, [r4, #20]
   1bbfc:	cmp	r3, #0
   1bc00:	beq	1bc0c <Mat_VarReadNumeric5+0x130>
   1bc04:	mov	r0, r9
   1bc08:	bl	1a80 <Mat_uint32Swap>
   1bc0c:	ldr	r0, [sp, #8]
   1bc10:	lsr	r3, r0, #16
   1bc14:	uxtb	r5, r0
   1bc18:	cmp	r5, #24
   1bc1c:	lsl	r3, r3, #16
   1bc20:	movhi	r5, #0
   1bc24:	cmp	r3, #0
   1bc28:	bne	1bb50 <Mat_VarReadNumeric5+0x74>
   1bc2c:	add	r9, r9, #4
   1bc30:	ldr	r3, [r4]
   1bc34:	mov	r2, #1
   1bc38:	mov	r1, #4
   1bc3c:	mov	r0, r9
   1bc40:	bl	1588 <fread@plt>
   1bc44:	b	1bbb8 <Mat_VarReadNumeric5+0xdc>
   1bc48:	mov	r3, r8
   1bc4c:	mov	r2, r5
   1bc50:	mov	r1, r7
   1bc54:	mov	r0, r4
   1bc58:	bl	f2c8 <ReadDoubleData>
   1bc5c:	cmp	r9, #0
   1bc60:	addne	r0, r0, #4
   1bc64:	ands	r1, r0, #7
   1bc68:	beq	1bc88 <Mat_VarReadNumeric5+0x1ac>
   1bc6c:	rsbs	r0, r0, #0
   1bc70:	and	r0, r0, #7
   1bc74:	rsbpl	r1, r0, #0
   1bc78:	mov	r2, #1
   1bc7c:	rsb	r1, r1, #8
   1bc80:	ldr	r0, [r4]
   1bc84:	bl	1714 <fseek@plt>
   1bc88:	add	sp, sp, #20
   1bc8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bc90:	mov	r3, r8
   1bc94:	mov	r2, r5
   1bc98:	mov	r1, r7
   1bc9c:	mov	r0, r4
   1bca0:	bl	102f0 <ReadSingleData>
   1bca4:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bca8:	mov	r3, r8
   1bcac:	mov	r2, r5
   1bcb0:	mov	r1, r7
   1bcb4:	mov	r0, r4
   1bcb8:	bl	10810 <ReadInt64Data>
   1bcbc:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bcc0:	mov	r3, r8
   1bcc4:	mov	r2, r5
   1bcc8:	mov	r1, r7
   1bccc:	mov	r0, r4
   1bcd0:	bl	10d40 <ReadUInt64Data>
   1bcd4:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bcd8:	mov	r3, r8
   1bcdc:	mov	r2, r5
   1bce0:	mov	r1, r7
   1bce4:	mov	r0, r4
   1bce8:	bl	11270 <ReadInt32Data>
   1bcec:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bcf0:	mov	r3, r8
   1bcf4:	mov	r2, r5
   1bcf8:	mov	r1, r7
   1bcfc:	mov	r0, r4
   1bd00:	bl	11750 <ReadUInt32Data>
   1bd04:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bd08:	mov	r3, r8
   1bd0c:	mov	r2, r5
   1bd10:	mov	r1, r7
   1bd14:	mov	r0, r4
   1bd18:	bl	11c30 <ReadInt16Data>
   1bd1c:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bd20:	mov	r3, r8
   1bd24:	mov	r2, r5
   1bd28:	mov	r1, r7
   1bd2c:	mov	r0, r4
   1bd30:	bl	12138 <ReadUInt16Data>
   1bd34:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bd38:	mov	r3, r8
   1bd3c:	mov	r2, r5
   1bd40:	mov	r1, r7
   1bd44:	mov	r0, r4
   1bd48:	bl	12640 <ReadInt8Data>
   1bd4c:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bd50:	mov	r3, r8
   1bd54:	mov	r2, r5
   1bd58:	mov	r1, r7
   1bd5c:	mov	r0, r4
   1bd60:	bl	12b00 <ReadUInt8Data>
   1bd64:	b	1bc5c <Mat_VarReadNumeric5+0x180>
   1bd68:	cmp	r3, #1
   1bd6c:	bne	1bc88 <Mat_VarReadNumeric5+0x1ac>
   1bd70:	ldr	r3, [r6, #16]
   1bd74:	sub	r3, r3, #6
   1bd78:	cmp	r3, #9
   1bd7c:	addls	pc, pc, r3, lsl #2
   1bd80:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>
   1bd84:	b	1bdac <Mat_VarReadNumeric5+0x2d0>
   1bd88:	b	1bdfc <Mat_VarReadNumeric5+0x320>
   1bd8c:	b	1bedc <Mat_VarReadNumeric5+0x400>
   1bd90:	b	1befc <Mat_VarReadNumeric5+0x420>
   1bd94:	b	1be9c <Mat_VarReadNumeric5+0x3c0>
   1bd98:	b	1bebc <Mat_VarReadNumeric5+0x3e0>
   1bd9c:	b	1be5c <Mat_VarReadNumeric5+0x380>
   1bda0:	b	1be7c <Mat_VarReadNumeric5+0x3a0>
   1bda4:	b	1be1c <Mat_VarReadNumeric5+0x340>
   1bda8:	b	1be3c <Mat_VarReadNumeric5+0x360>
   1bdac:	ldr	r1, [r6, #52]	; 0x34
   1bdb0:	str	r8, [sp]
   1bdb4:	mov	r3, r5
   1bdb8:	mov	r2, r7
   1bdbc:	ldr	r1, [r1, #12]
   1bdc0:	mov	r0, r4
   1bdc4:	bl	f2ec <ReadCompressedDoubleData>
   1bdc8:	cmp	r9, #0
   1bdcc:	addne	r0, r0, #4
   1bdd0:	ands	r2, r0, #7
   1bdd4:	beq	1bc88 <Mat_VarReadNumeric5+0x1ac>
   1bdd8:	rsbs	r0, r0, #0
   1bddc:	ldr	r3, [r6, #52]	; 0x34
   1bde0:	and	r0, r0, #7
   1bde4:	rsbpl	r2, r0, #0
   1bde8:	rsb	r2, r2, #8
   1bdec:	ldr	r1, [r3, #12]
   1bdf0:	mov	r0, r4
   1bdf4:	bl	20e4 <InflateSkip>
   1bdf8:	b	1bc88 <Mat_VarReadNumeric5+0x1ac>
   1bdfc:	ldr	r1, [r6, #52]	; 0x34
   1be00:	str	r8, [sp]
   1be04:	mov	r3, r5
   1be08:	mov	r2, r7
   1be0c:	ldr	r1, [r1, #12]
   1be10:	mov	r0, r4
   1be14:	bl	10314 <ReadCompressedSingleData>
   1be18:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>
   1be1c:	ldr	r1, [r6, #52]	; 0x34
   1be20:	str	r8, [sp]
   1be24:	mov	r3, r5
   1be28:	mov	r2, r7
   1be2c:	ldr	r1, [r1, #12]
   1be30:	mov	r0, r4
   1be34:	bl	10834 <ReadCompressedInt64Data>
   1be38:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>
   1be3c:	ldr	r1, [r6, #52]	; 0x34
   1be40:	str	r8, [sp]
   1be44:	mov	r3, r5
   1be48:	mov	r2, r7
   1be4c:	ldr	r1, [r1, #12]
   1be50:	mov	r0, r4
   1be54:	bl	10d64 <ReadCompressedUInt64Data>
   1be58:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>
   1be5c:	ldr	r1, [r6, #52]	; 0x34
   1be60:	str	r8, [sp]
   1be64:	mov	r3, r5
   1be68:	mov	r2, r7
   1be6c:	ldr	r1, [r1, #12]
   1be70:	mov	r0, r4
   1be74:	bl	11294 <ReadCompressedInt32Data>
   1be78:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>
   1be7c:	ldr	r1, [r6, #52]	; 0x34
   1be80:	str	r8, [sp]
   1be84:	mov	r3, r5
   1be88:	mov	r2, r7
   1be8c:	ldr	r1, [r1, #12]
   1be90:	mov	r0, r4
   1be94:	bl	11774 <ReadCompressedUInt32Data>
   1be98:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>
   1be9c:	ldr	r1, [r6, #52]	; 0x34
   1bea0:	str	r8, [sp]
   1bea4:	mov	r3, r5
   1bea8:	mov	r2, r7
   1beac:	ldr	r1, [r1, #12]
   1beb0:	mov	r0, r4
   1beb4:	bl	11c54 <ReadCompressedInt16Data>
   1beb8:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>
   1bebc:	ldr	r1, [r6, #52]	; 0x34
   1bec0:	str	r8, [sp]
   1bec4:	mov	r3, r5
   1bec8:	mov	r2, r7
   1becc:	ldr	r1, [r1, #12]
   1bed0:	mov	r0, r4
   1bed4:	bl	1215c <ReadCompressedUInt16Data>
   1bed8:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>
   1bedc:	ldr	r1, [r6, #52]	; 0x34
   1bee0:	str	r8, [sp]
   1bee4:	mov	r3, r5
   1bee8:	mov	r2, r7
   1beec:	ldr	r1, [r1, #12]
   1bef0:	mov	r0, r4
   1bef4:	bl	12664 <ReadCompressedInt8Data>
   1bef8:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>
   1befc:	ldr	r1, [r6, #52]	; 0x34
   1bf00:	str	r8, [sp]
   1bf04:	mov	r3, r5
   1bf08:	mov	r2, r7
   1bf0c:	ldr	r1, [r1, #12]
   1bf10:	mov	r0, r4
   1bf14:	bl	12b24 <ReadCompressedUInt8Data>
   1bf18:	b	1bdc8 <Mat_VarReadNumeric5+0x2ec>

0001bf1c <GetDataSlab>:
   1bf1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf20:	sub	sp, sp, #156	; 0x9c
   1bf24:	cmp	r2, #6
   1bf28:	cmpeq	r3, #9
   1bf2c:	str	r0, [sp, #8]
   1bf30:	str	r1, [sp]
   1bf34:	mov	r7, r2
   1bf38:	mov	r5, r3
   1bf3c:	ldr	fp, [sp, #192]	; 0xc0
   1bf40:	ldr	r9, [sp, #200]	; 0xc8
   1bf44:	beq	1c05c <GetDataSlab+0x140>
   1bf48:	cmp	r2, #7
   1bf4c:	cmpeq	r3, #7
   1bf50:	beq	1c05c <GetDataSlab+0x140>
   1bf54:	cmp	r2, #10
   1bf58:	cmpeq	r3, #3
   1bf5c:	beq	1c05c <GetDataSlab+0x140>
   1bf60:	cmp	r2, #12
   1bf64:	cmpeq	r3, #5
   1bf68:	beq	1c05c <GetDataSlab+0x140>
   1bf6c:	cmp	r2, #14
   1bf70:	cmpeq	r3, #12
   1bf74:	beq	1c05c <GetDataSlab+0x140>
   1bf78:	cmp	r2, #8
   1bf7c:	cmpeq	r3, #1
   1bf80:	beq	1c05c <GetDataSlab+0x140>
   1bf84:	cmp	r2, #11
   1bf88:	cmpeq	r3, #4
   1bf8c:	beq	1c05c <GetDataSlab+0x140>
   1bf90:	cmp	r2, #13
   1bf94:	cmpeq	r3, #6
   1bf98:	beq	1c05c <GetDataSlab+0x140>
   1bf9c:	cmp	r2, #15
   1bfa0:	cmpeq	r3, #13
   1bfa4:	beq	1c05c <GetDataSlab+0x140>
   1bfa8:	cmp	r2, #9
   1bfac:	cmpeq	r3, #2
   1bfb0:	moveq	r6, #1
   1bfb4:	movne	r6, #0
   1bfb8:	ldr	r3, [sp, #208]	; 0xd0
   1bfbc:	cmp	r3, #2
   1bfc0:	bne	1ef4c <GetDataSlab+0x3030>
   1bfc4:	ldr	r3, [sp, #204]	; 0xcc
   1bfc8:	ldr	r1, [r9]
   1bfcc:	ldr	r4, [r3]
   1bfd0:	ldr	r3, [sp, #196]	; 0xc4
   1bfd4:	sub	ip, r4, #1
   1bfd8:	ldr	r0, [r3]
   1bfdc:	ldr	r3, [fp]
   1bfe0:	add	r2, r0, #1
   1bfe4:	mla	r2, r1, ip, r2
   1bfe8:	cmp	r2, r3
   1bfec:	bhi	337fc <GetDataSlab+0x178e0>
   1bff0:	ldr	r2, [sp, #204]	; 0xcc
   1bff4:	ldr	ip, [r9, #4]
   1bff8:	ldr	sl, [r2, #4]
   1bffc:	ldr	r2, [sp, #196]	; 0xc4
   1c000:	sub	r8, sl, #1
   1c004:	ldr	r2, [r2, #4]
   1c008:	add	lr, r2, #1
   1c00c:	mla	lr, ip, r8, lr
   1c010:	ldr	r8, [fp, #4]
   1c014:	cmp	lr, r8
   1c018:	bhi	337fc <GetDataSlab+0x178e0>
   1c01c:	cmp	r1, #1
   1c020:	bne	1c064 <GetDataSlab+0x148>
   1c024:	cmp	ip, #1
   1c028:	cmpeq	r4, r3
   1c02c:	moveq	lr, #1
   1c030:	movne	lr, #0
   1c034:	tst	lr, r6
   1c038:	beq	1c064 <GetDataSlab+0x148>
   1c03c:	ldr	r2, [sp, #212]	; 0xd4
   1c040:	ldr	r1, [sp, #8]
   1c044:	ldr	r0, [sp]
   1c048:	bl	14f8 <memcpy@plt>
   1c04c:	mov	r3, #0
   1c050:	mov	r0, r3
   1c054:	add	sp, sp, #156	; 0x9c
   1c058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c05c:	mov	r6, #1
   1c060:	b	1bfb8 <GetDataSlab+0x9c>
   1c064:	sub	lr, r7, #6
   1c068:	cmp	lr, #9
   1c06c:	addls	pc, pc, lr, lsl #2
   1c070:	b	337fc <GetDataSlab+0x178e0>
   1c074:	b	1c09c <GetDataSlab+0x180>
   1c078:	b	1c594 <GetDataSlab+0x678>
   1c07c:	b	1e624 <GetDataSlab+0x2708>
   1c080:	b	1eab8 <GetDataSlab+0x2b9c>
   1c084:	b	1dd0c <GetDataSlab+0x1df0>
   1c088:	b	1e198 <GetDataSlab+0x227c>
   1c08c:	b	1d444 <GetDataSlab+0x1528>
   1c090:	b	1d8a8 <GetDataSlab+0x198c>
   1c094:	b	1ca8c <GetDataSlab+0xb70>
   1c098:	b	1cf68 <GetDataSlab+0x104c>
   1c09c:	sub	lr, r5, #1
   1c0a0:	cmp	lr, #8
   1c0a4:	addls	pc, pc, lr, lsl #2
   1c0a8:	b	1c45c <GetDataSlab+0x540>
   1c0ac:	b	1c384 <GetDataSlab+0x468>
   1c0b0:	b	1c3f0 <GetDataSlab+0x4d4>
   1c0b4:	b	1c294 <GetDataSlab+0x378>
   1c0b8:	b	1c30c <GetDataSlab+0x3f0>
   1c0bc:	b	1c1a4 <GetDataSlab+0x288>
   1c0c0:	b	1c21c <GetDataSlab+0x300>
   1c0c4:	b	1c138 <GetDataSlab+0x21c>
   1c0c8:	b	1c45c <GetDataSlab+0x540>
   1c0cc:	b	1c0d0 <GetDataSlab+0x1b4>
   1c0d0:	mla	r2, r2, r3, r0
   1c0d4:	lsl	r3, r3, #3
   1c0d8:	ldr	r0, [sp, #8]
   1c0dc:	mul	r5, ip, r3
   1c0e0:	bic	r3, r4, r4, asr #31
   1c0e4:	lsl	r6, r1, #3
   1c0e8:	ldr	r1, [sp]
   1c0ec:	add	r0, r0, r2, lsl #3
   1c0f0:	lsl	r7, r3, #3
   1c0f4:	mov	ip, #0
   1c0f8:	cmp	ip, sl
   1c0fc:	bge	1c04c <GetDataSlab+0x130>
   1c100:	mov	r3, r0
   1c104:	mov	lr, r1
   1c108:	mov	r2, #0
   1c10c:	b	1c120 <GetDataSlab+0x204>
   1c110:	ldrd	r8, [r3]
   1c114:	add	r2, r2, #1
   1c118:	add	r3, r3, r6
   1c11c:	strd	r8, [lr], #8
   1c120:	cmp	r2, r4
   1c124:	blt	1c110 <GetDataSlab+0x1f4>
   1c128:	add	r1, r1, r7
   1c12c:	add	r0, r0, r5
   1c130:	add	ip, ip, #1
   1c134:	b	1c0f8 <GetDataSlab+0x1dc>
   1c138:	mla	r2, r2, r3, r0
   1c13c:	lsl	r3, r3, #2
   1c140:	ldr	r0, [sp, #8]
   1c144:	mul	r6, ip, r3
   1c148:	bic	r3, r4, r4, asr #31
   1c14c:	lsl	r5, r1, #2
   1c150:	ldr	r1, [sp]
   1c154:	add	r0, r0, r2, lsl #2
   1c158:	lsl	r7, r3, #3
   1c15c:	mov	ip, #0
   1c160:	cmp	ip, sl
   1c164:	bge	1c04c <GetDataSlab+0x130>
   1c168:	mov	r3, r0
   1c16c:	mov	lr, r1
   1c170:	mov	r2, #0
   1c174:	b	1c18c <GetDataSlab+0x270>
   1c178:	vldr	s15, [r3]
   1c17c:	add	r2, r2, #1
   1c180:	add	r3, r3, r5
   1c184:	vcvt.f64.f32	d7, s15
   1c188:	vstmia	lr!, {d7}
   1c18c:	cmp	r2, r4
   1c190:	blt	1c178 <GetDataSlab+0x25c>
   1c194:	add	r1, r1, r7
   1c198:	add	r0, r0, r6
   1c19c:	add	ip, ip, #1
   1c1a0:	b	1c160 <GetDataSlab+0x244>
   1c1a4:	mla	r2, r2, r3, r0
   1c1a8:	lsl	r3, r3, #2
   1c1ac:	ldr	r0, [sp, #8]
   1c1b0:	mul	r8, ip, r3
   1c1b4:	bic	r3, r4, r4, asr #31
   1c1b8:	lsl	r7, r1, #2
   1c1bc:	lsl	r6, r3, #3
   1c1c0:	mvn	r3, #3
   1c1c4:	add	r0, r0, r2, lsl #2
   1c1c8:	mul	r5, r3, r1
   1c1cc:	ldr	r1, [sp]
   1c1d0:	mov	ip, #0
   1c1d4:	cmp	ip, sl
   1c1d8:	bge	1c04c <GetDataSlab+0x130>
   1c1dc:	mov	r3, r0
   1c1e0:	mov	lr, r1
   1c1e4:	mov	r2, #0
   1c1e8:	b	1c200 <GetDataSlab+0x2e4>
   1c1ec:	ldr	r9, [r3, r5]
   1c1f0:	add	r2, r2, #1
   1c1f4:	vmov	s15, r9
   1c1f8:	vcvt.f64.s32	d7, s15
   1c1fc:	vstmia	lr!, {d7}
   1c200:	cmp	r2, r4
   1c204:	add	r3, r3, r7
   1c208:	blt	1c1ec <GetDataSlab+0x2d0>
   1c20c:	add	r1, r1, r6
   1c210:	add	r0, r0, r8
   1c214:	add	ip, ip, #1
   1c218:	b	1c1d4 <GetDataSlab+0x2b8>
   1c21c:	mla	r2, r2, r3, r0
   1c220:	lsl	r3, r3, #2
   1c224:	ldr	r0, [sp, #8]
   1c228:	mul	r8, ip, r3
   1c22c:	bic	r3, r4, r4, asr #31
   1c230:	lsl	r6, r1, #2
   1c234:	lsl	r7, r3, #3
   1c238:	mvn	r3, #3
   1c23c:	add	r0, r0, r2, lsl #2
   1c240:	mul	r5, r3, r1
   1c244:	ldr	r1, [sp]
   1c248:	mov	ip, #0
   1c24c:	cmp	ip, sl
   1c250:	bge	1c04c <GetDataSlab+0x130>
   1c254:	mov	r3, r0
   1c258:	mov	lr, r1
   1c25c:	mov	r2, #0
   1c260:	b	1c278 <GetDataSlab+0x35c>
   1c264:	ldr	r9, [r3, r5]
   1c268:	add	r2, r2, #1
   1c26c:	vmov	s15, r9
   1c270:	vcvt.f64.u32	d7, s15
   1c274:	vstmia	lr!, {d7}
   1c278:	cmp	r2, r4
   1c27c:	add	r3, r3, r6
   1c280:	blt	1c264 <GetDataSlab+0x348>
   1c284:	add	r1, r1, r7
   1c288:	add	r0, r0, r8
   1c28c:	add	ip, ip, #1
   1c290:	b	1c24c <GetDataSlab+0x330>
   1c294:	mla	r2, r2, r3, r0
   1c298:	lsl	r3, r3, #1
   1c29c:	ldr	r0, [sp, #8]
   1c2a0:	mul	r8, ip, r3
   1c2a4:	bic	r3, r4, r4, asr #31
   1c2a8:	add	r0, r0, r2, lsl #1
   1c2ac:	lsl	r5, r3, #3
   1c2b0:	mvn	r3, #1
   1c2b4:	ldr	r2, [sp]
   1c2b8:	mul	r6, r3, r1
   1c2bc:	lsl	r7, r1, #1
   1c2c0:	mov	ip, #0
   1c2c4:	cmp	ip, sl
   1c2c8:	bge	1c04c <GetDataSlab+0x130>
   1c2cc:	mov	r1, r0
   1c2d0:	mov	lr, r2
   1c2d4:	mov	r3, #0
   1c2d8:	b	1c2f0 <GetDataSlab+0x3d4>
   1c2dc:	ldrsh	r9, [r1, r6]
   1c2e0:	add	r3, r3, #1
   1c2e4:	vmov	s15, r9
   1c2e8:	vcvt.f64.s32	d7, s15
   1c2ec:	vstmia	lr!, {d7}
   1c2f0:	cmp	r3, r4
   1c2f4:	add	r1, r1, r7
   1c2f8:	blt	1c2dc <GetDataSlab+0x3c0>
   1c2fc:	add	r2, r2, r5
   1c300:	add	r0, r0, r8
   1c304:	add	ip, ip, #1
   1c308:	b	1c2c4 <GetDataSlab+0x3a8>
   1c30c:	mla	r2, r2, r3, r0
   1c310:	lsl	r3, r3, #1
   1c314:	ldr	r0, [sp, #8]
   1c318:	mul	r8, ip, r3
   1c31c:	bic	r3, r4, r4, asr #31
   1c320:	add	r0, r0, r2, lsl #1
   1c324:	lsl	r5, r3, #3
   1c328:	mvn	r3, #1
   1c32c:	ldr	r2, [sp]
   1c330:	mul	r6, r3, r1
   1c334:	lsl	r7, r1, #1
   1c338:	mov	ip, #0
   1c33c:	cmp	ip, sl
   1c340:	bge	1c04c <GetDataSlab+0x130>
   1c344:	mov	r1, r0
   1c348:	mov	lr, r2
   1c34c:	mov	r3, #0
   1c350:	b	1c368 <GetDataSlab+0x44c>
   1c354:	ldrh	r9, [r1, r6]
   1c358:	add	r3, r3, #1
   1c35c:	vmov	s15, r9
   1c360:	vcvt.f64.u32	d7, s15
   1c364:	vstmia	lr!, {d7}
   1c368:	cmp	r3, r4
   1c36c:	add	r1, r1, r7
   1c370:	blt	1c354 <GetDataSlab+0x438>
   1c374:	add	r2, r2, r5
   1c378:	add	r0, r0, r8
   1c37c:	add	ip, ip, #1
   1c380:	b	1c33c <GetDataSlab+0x420>
   1c384:	mla	r2, r2, r3, r0
   1c388:	mul	r6, ip, r3
   1c38c:	ldr	r0, [sp, #8]
   1c390:	bic	r3, r4, r4, asr #31
   1c394:	add	lr, r0, r2
   1c398:	ldr	r2, [sp]
   1c39c:	lsl	r7, r3, #3
   1c3a0:	mov	ip, #0
   1c3a4:	rsb	r8, r1, #0
   1c3a8:	cmp	ip, sl
   1c3ac:	bge	1c04c <GetDataSlab+0x130>
   1c3b0:	mov	r0, lr
   1c3b4:	mov	r5, r2
   1c3b8:	mov	r3, #0
   1c3bc:	b	1c3d4 <GetDataSlab+0x4b8>
   1c3c0:	ldrsb	r9, [r0, r8]
   1c3c4:	add	r3, r3, #1
   1c3c8:	vmov	s15, r9
   1c3cc:	vcvt.f64.s32	d7, s15
   1c3d0:	vstmia	r5!, {d7}
   1c3d4:	cmp	r3, r4
   1c3d8:	add	r0, r0, r1
   1c3dc:	blt	1c3c0 <GetDataSlab+0x4a4>
   1c3e0:	add	r2, r2, r7
   1c3e4:	add	lr, lr, r6
   1c3e8:	add	ip, ip, #1
   1c3ec:	b	1c3a8 <GetDataSlab+0x48c>
   1c3f0:	mla	r2, r2, r3, r0
   1c3f4:	mul	r6, ip, r3
   1c3f8:	ldr	r0, [sp, #8]
   1c3fc:	bic	r3, r4, r4, asr #31
   1c400:	add	lr, r0, r2
   1c404:	ldr	r2, [sp]
   1c408:	lsl	r7, r3, #3
   1c40c:	mov	ip, #0
   1c410:	rsb	r8, r1, #0
   1c414:	cmp	ip, sl
   1c418:	bge	1c04c <GetDataSlab+0x130>
   1c41c:	mov	r0, lr
   1c420:	mov	r5, r2
   1c424:	mov	r3, #0
   1c428:	b	1c440 <GetDataSlab+0x524>
   1c42c:	ldrb	r9, [r0, r8]
   1c430:	add	r3, r3, #1
   1c434:	vmov	s15, r9
   1c438:	vcvt.f64.u32	d7, s15
   1c43c:	vstmia	r5!, {d7}
   1c440:	cmp	r3, r4
   1c444:	add	r0, r0, r1
   1c448:	blt	1c42c <GetDataSlab+0x510>
   1c44c:	add	r2, r2, r7
   1c450:	add	lr, lr, r6
   1c454:	add	ip, ip, #1
   1c458:	b	1c414 <GetDataSlab+0x4f8>
   1c45c:	cmp	r5, #12
   1c460:	bne	1c4f8 <GetDataSlab+0x5dc>
   1c464:	mla	r2, r2, r3, r0
   1c468:	lsl	r3, r3, #3
   1c46c:	ldr	r0, [sp, #8]
   1c470:	mul	r3, ip, r3
   1c474:	ldr	r6, [sp]
   1c478:	str	r3, [sp, #4]
   1c47c:	lsl	r3, r1, #3
   1c480:	str	r3, [sp, #12]
   1c484:	bic	r3, r4, r4, asr #31
   1c488:	add	r8, r0, r2, lsl #3
   1c48c:	lsl	r3, r3, #3
   1c490:	str	r3, [sp, #16]
   1c494:	mvn	r3, #7
   1c498:	mov	r9, #0
   1c49c:	mul	r3, r3, r1
   1c4a0:	str	r3, [sp, #8]
   1c4a4:	cmp	r9, sl
   1c4a8:	bge	1c04c <GetDataSlab+0x130>
   1c4ac:	mov	r7, r8
   1c4b0:	mov	fp, r6
   1c4b4:	mov	r5, #0
   1c4b8:	b	1c4d0 <GetDataSlab+0x5b4>
   1c4bc:	ldr	r3, [sp, #8]
   1c4c0:	add	r5, r5, #1
   1c4c4:	ldrd	r0, [r7, r3]
   1c4c8:	bl	40090 <__aeabi_l2d>
   1c4cc:	strd	r0, [fp], #8
   1c4d0:	ldr	r3, [sp, #12]
   1c4d4:	cmp	r5, r4
   1c4d8:	add	r7, r7, r3
   1c4dc:	blt	1c4bc <GetDataSlab+0x5a0>
   1c4e0:	ldr	r3, [sp, #16]
   1c4e4:	add	r9, r9, #1
   1c4e8:	add	r6, r6, r3
   1c4ec:	ldr	r3, [sp, #4]
   1c4f0:	add	r8, r8, r3
   1c4f4:	b	1c4a4 <GetDataSlab+0x588>
   1c4f8:	cmp	r5, #13
   1c4fc:	bne	337fc <GetDataSlab+0x178e0>
   1c500:	mla	r2, r2, r3, r0
   1c504:	lsl	r3, r3, #3
   1c508:	ldr	r0, [sp, #8]
   1c50c:	mul	r3, ip, r3
   1c510:	ldr	r6, [sp]
   1c514:	str	r3, [sp, #8]
   1c518:	lsl	r3, r1, #3
   1c51c:	str	r3, [sp, #12]
   1c520:	bic	r3, r4, r4, asr #31
   1c524:	add	r8, r0, r2, lsl #3
   1c528:	lsl	r3, r3, #3
   1c52c:	str	r3, [sp, #16]
   1c530:	mvn	r3, #7
   1c534:	mov	r9, #0
   1c538:	mul	r3, r3, r1
   1c53c:	str	r3, [sp, #4]
   1c540:	cmp	r9, sl
   1c544:	bge	1c04c <GetDataSlab+0x130>
   1c548:	mov	r7, r8
   1c54c:	mov	fp, r6
   1c550:	mov	r5, #0
   1c554:	b	1c56c <GetDataSlab+0x650>
   1c558:	ldr	r3, [sp, #4]
   1c55c:	add	r5, r5, #1
   1c560:	ldrd	r0, [r7, r3]
   1c564:	bl	4007c <__aeabi_ul2d>
   1c568:	strd	r0, [fp], #8
   1c56c:	ldr	r3, [sp, #12]
   1c570:	cmp	r5, r4
   1c574:	add	r7, r7, r3
   1c578:	blt	1c558 <GetDataSlab+0x63c>
   1c57c:	ldr	r3, [sp, #16]
   1c580:	add	r9, r9, #1
   1c584:	add	r6, r6, r3
   1c588:	ldr	r3, [sp, #8]
   1c58c:	add	r8, r8, r3
   1c590:	b	1c540 <GetDataSlab+0x624>
   1c594:	sub	lr, r5, #1
   1c598:	cmp	lr, #8
   1c59c:	addls	pc, pc, lr, lsl #2
   1c5a0:	b	1c954 <GetDataSlab+0xa38>
   1c5a4:	b	1c87c <GetDataSlab+0x960>
   1c5a8:	b	1c8e8 <GetDataSlab+0x9cc>
   1c5ac:	b	1c78c <GetDataSlab+0x870>
   1c5b0:	b	1c804 <GetDataSlab+0x8e8>
   1c5b4:	b	1c69c <GetDataSlab+0x780>
   1c5b8:	b	1c714 <GetDataSlab+0x7f8>
   1c5bc:	b	1c634 <GetDataSlab+0x718>
   1c5c0:	b	1c954 <GetDataSlab+0xa38>
   1c5c4:	b	1c5c8 <GetDataSlab+0x6ac>
   1c5c8:	mla	r2, r2, r3, r0
   1c5cc:	lsl	r3, r3, #3
   1c5d0:	ldr	r0, [sp, #8]
   1c5d4:	mul	r6, ip, r3
   1c5d8:	bic	r3, r4, r4, asr #31
   1c5dc:	lsl	r5, r1, #3
   1c5e0:	ldr	r1, [sp]
   1c5e4:	add	r0, r0, r2, lsl #3
   1c5e8:	lsl	r7, r3, #2
   1c5ec:	mov	ip, #0
   1c5f0:	cmp	ip, sl
   1c5f4:	bge	1c04c <GetDataSlab+0x130>
   1c5f8:	mov	r3, r0
   1c5fc:	mov	lr, r1
   1c600:	mov	r2, #0
   1c604:	b	1c61c <GetDataSlab+0x700>
   1c608:	vldr	d7, [r3]
   1c60c:	add	r2, r2, #1
   1c610:	add	r3, r3, r5
   1c614:	vcvt.f32.f64	s15, d7
   1c618:	vstmia	lr!, {s15}
   1c61c:	cmp	r2, r4
   1c620:	blt	1c608 <GetDataSlab+0x6ec>
   1c624:	add	r1, r1, r7
   1c628:	add	r0, r0, r6
   1c62c:	add	ip, ip, #1
   1c630:	b	1c5f0 <GetDataSlab+0x6d4>
   1c634:	mla	r2, r2, r3, r0
   1c638:	lsl	r3, r3, #2
   1c63c:	ldr	r0, [sp, #8]
   1c640:	mul	r6, ip, r3
   1c644:	bic	r3, r4, r4, asr #31
   1c648:	lsl	r5, r1, #2
   1c64c:	ldr	r1, [sp]
   1c650:	add	r0, r0, r2, lsl #2
   1c654:	lsl	r7, r3, #2
   1c658:	mov	ip, #0
   1c65c:	cmp	ip, sl
   1c660:	bge	1c04c <GetDataSlab+0x130>
   1c664:	mov	r3, r0
   1c668:	mov	lr, r1
   1c66c:	mov	r2, #0
   1c670:	b	1c684 <GetDataSlab+0x768>
   1c674:	ldr	r8, [r3]
   1c678:	add	r2, r2, #1
   1c67c:	add	r3, r3, r5
   1c680:	str	r8, [lr], #4
   1c684:	cmp	r2, r4
   1c688:	blt	1c674 <GetDataSlab+0x758>
   1c68c:	add	r1, r1, r7
   1c690:	add	r0, r0, r6
   1c694:	add	ip, ip, #1
   1c698:	b	1c65c <GetDataSlab+0x740>
   1c69c:	mla	r2, r2, r3, r0
   1c6a0:	lsl	r3, r3, #2
   1c6a4:	ldr	r0, [sp, #8]
   1c6a8:	mul	r6, ip, r3
   1c6ac:	bic	r3, r4, r4, asr #31
   1c6b0:	lsl	r7, r1, #2
   1c6b4:	lsl	r8, r3, #2
   1c6b8:	mvn	r3, #3
   1c6bc:	add	r0, r0, r2, lsl #2
   1c6c0:	mul	r5, r3, r1
   1c6c4:	ldr	r1, [sp]
   1c6c8:	mov	ip, #0
   1c6cc:	cmp	ip, sl
   1c6d0:	bge	1c04c <GetDataSlab+0x130>
   1c6d4:	mov	r3, r0
   1c6d8:	mov	lr, r1
   1c6dc:	mov	r2, #0
   1c6e0:	b	1c6f8 <GetDataSlab+0x7dc>
   1c6e4:	ldr	r9, [r3, r5]
   1c6e8:	add	r2, r2, #1
   1c6ec:	vmov	s15, r9
   1c6f0:	vcvt.f32.s32	s15, s15
   1c6f4:	vstmia	lr!, {s15}
   1c6f8:	cmp	r2, r4
   1c6fc:	add	r3, r3, r7
   1c700:	blt	1c6e4 <GetDataSlab+0x7c8>
   1c704:	add	r1, r1, r8
   1c708:	add	r0, r0, r6
   1c70c:	add	ip, ip, #1
   1c710:	b	1c6cc <GetDataSlab+0x7b0>
   1c714:	mla	r2, r2, r3, r0
   1c718:	lsl	r3, r3, #2
   1c71c:	ldr	r0, [sp, #8]
   1c720:	mul	r7, ip, r3
   1c724:	bic	r3, r4, r4, asr #31
   1c728:	lsl	r6, r1, #2
   1c72c:	lsl	r8, r3, #2
   1c730:	mvn	r3, #3
   1c734:	add	r0, r0, r2, lsl #2
   1c738:	mul	r5, r3, r1
   1c73c:	ldr	r1, [sp]
   1c740:	mov	ip, #0
   1c744:	cmp	ip, sl
   1c748:	bge	1c04c <GetDataSlab+0x130>
   1c74c:	mov	r3, r0
   1c750:	mov	lr, r1
   1c754:	mov	r2, #0
   1c758:	b	1c770 <GetDataSlab+0x854>
   1c75c:	ldr	r9, [r3, r5]
   1c760:	add	r2, r2, #1
   1c764:	vmov	s15, r9
   1c768:	vcvt.f32.u32	s15, s15
   1c76c:	vstmia	lr!, {s15}
   1c770:	cmp	r2, r4
   1c774:	add	r3, r3, r6
   1c778:	blt	1c75c <GetDataSlab+0x840>
   1c77c:	add	r1, r1, r8
   1c780:	add	r0, r0, r7
   1c784:	add	ip, ip, #1
   1c788:	b	1c744 <GetDataSlab+0x828>
   1c78c:	mla	r2, r2, r3, r0
   1c790:	lsl	r3, r3, #1
   1c794:	ldr	r0, [sp, #8]
   1c798:	mul	r7, ip, r3
   1c79c:	bic	r3, r4, r4, asr #31
   1c7a0:	add	r0, r0, r2, lsl #1
   1c7a4:	lsl	r5, r3, #2
   1c7a8:	mvn	r3, #1
   1c7ac:	ldr	r2, [sp]
   1c7b0:	mul	r8, r3, r1
   1c7b4:	lsl	r6, r1, #1
   1c7b8:	mov	ip, #0
   1c7bc:	cmp	ip, sl
   1c7c0:	bge	1c04c <GetDataSlab+0x130>
   1c7c4:	mov	r1, r0
   1c7c8:	mov	lr, r2
   1c7cc:	mov	r3, #0
   1c7d0:	b	1c7e8 <GetDataSlab+0x8cc>
   1c7d4:	ldrsh	r9, [r1, r8]
   1c7d8:	add	r3, r3, #1
   1c7dc:	vmov	s15, r9
   1c7e0:	vcvt.f32.s32	s15, s15
   1c7e4:	vstmia	lr!, {s15}
   1c7e8:	cmp	r3, r4
   1c7ec:	add	r1, r1, r6
   1c7f0:	blt	1c7d4 <GetDataSlab+0x8b8>
   1c7f4:	add	r2, r2, r5
   1c7f8:	add	r0, r0, r7
   1c7fc:	add	ip, ip, #1
   1c800:	b	1c7bc <GetDataSlab+0x8a0>
   1c804:	mla	r2, r2, r3, r0
   1c808:	lsl	r3, r3, #1
   1c80c:	ldr	r0, [sp, #8]
   1c810:	mul	r7, ip, r3
   1c814:	bic	r3, r4, r4, asr #31
   1c818:	add	r0, r0, r2, lsl #1
   1c81c:	lsl	r5, r3, #2
   1c820:	mvn	r3, #1
   1c824:	ldr	r2, [sp]
   1c828:	mul	r8, r3, r1
   1c82c:	lsl	r6, r1, #1
   1c830:	mov	ip, #0
   1c834:	cmp	ip, sl
   1c838:	bge	1c04c <GetDataSlab+0x130>
   1c83c:	mov	r1, r0
   1c840:	mov	lr, r2
   1c844:	mov	r3, #0
   1c848:	b	1c860 <GetDataSlab+0x944>
   1c84c:	ldrh	r9, [r1, r8]
   1c850:	add	r3, r3, #1
   1c854:	vmov	s15, r9
   1c858:	vcvt.f32.u32	s15, s15
   1c85c:	vstmia	lr!, {s15}
   1c860:	cmp	r3, r4
   1c864:	add	r1, r1, r6
   1c868:	blt	1c84c <GetDataSlab+0x930>
   1c86c:	add	r2, r2, r5
   1c870:	add	r0, r0, r7
   1c874:	add	ip, ip, #1
   1c878:	b	1c834 <GetDataSlab+0x918>
   1c87c:	mla	r2, r2, r3, r0
   1c880:	mul	r7, ip, r3
   1c884:	ldr	r0, [sp, #8]
   1c888:	bic	r3, r4, r4, asr #31
   1c88c:	add	lr, r0, r2
   1c890:	ldr	r2, [sp]
   1c894:	lsl	r6, r3, #2
   1c898:	mov	ip, #0
   1c89c:	rsb	r8, r1, #0
   1c8a0:	cmp	ip, sl
   1c8a4:	bge	1c04c <GetDataSlab+0x130>
   1c8a8:	mov	r0, lr
   1c8ac:	mov	r5, r2
   1c8b0:	mov	r3, #0
   1c8b4:	b	1c8cc <GetDataSlab+0x9b0>
   1c8b8:	ldrsb	r9, [r0, r8]
   1c8bc:	add	r3, r3, #1
   1c8c0:	vmov	s15, r9
   1c8c4:	vcvt.f32.s32	s15, s15
   1c8c8:	vstmia	r5!, {s15}
   1c8cc:	cmp	r3, r4
   1c8d0:	add	r0, r0, r1
   1c8d4:	blt	1c8b8 <GetDataSlab+0x99c>
   1c8d8:	add	r2, r2, r6
   1c8dc:	add	lr, lr, r7
   1c8e0:	add	ip, ip, #1
   1c8e4:	b	1c8a0 <GetDataSlab+0x984>
   1c8e8:	mla	r2, r2, r3, r0
   1c8ec:	mul	r7, ip, r3
   1c8f0:	ldr	r0, [sp, #8]
   1c8f4:	bic	r3, r4, r4, asr #31
   1c8f8:	add	lr, r0, r2
   1c8fc:	ldr	r2, [sp]
   1c900:	lsl	r6, r3, #2
   1c904:	mov	ip, #0
   1c908:	rsb	r8, r1, #0
   1c90c:	cmp	ip, sl
   1c910:	bge	1c04c <GetDataSlab+0x130>
   1c914:	mov	r0, lr
   1c918:	mov	r5, r2
   1c91c:	mov	r3, #0
   1c920:	b	1c938 <GetDataSlab+0xa1c>
   1c924:	ldrb	r9, [r0, r8]
   1c928:	add	r3, r3, #1
   1c92c:	vmov	s15, r9
   1c930:	vcvt.f32.u32	s15, s15
   1c934:	vstmia	r5!, {s15}
   1c938:	cmp	r3, r4
   1c93c:	add	r0, r0, r1
   1c940:	blt	1c924 <GetDataSlab+0xa08>
   1c944:	add	r2, r2, r6
   1c948:	add	lr, lr, r7
   1c94c:	add	ip, ip, #1
   1c950:	b	1c90c <GetDataSlab+0x9f0>
   1c954:	cmp	r5, #12
   1c958:	bne	1c9f0 <GetDataSlab+0xad4>
   1c95c:	mla	r2, r2, r3, r0
   1c960:	lsl	r3, r3, #3
   1c964:	ldr	r0, [sp, #8]
   1c968:	mul	r3, ip, r3
   1c96c:	ldr	r6, [sp]
   1c970:	str	r3, [sp, #12]
   1c974:	lsl	r3, r1, #3
   1c978:	str	r3, [sp, #16]
   1c97c:	bic	r3, r4, r4, asr #31
   1c980:	add	r8, r0, r2, lsl #3
   1c984:	lsl	r3, r3, #2
   1c988:	str	r3, [sp, #4]
   1c98c:	mvn	r3, #7
   1c990:	mov	r9, #0
   1c994:	mul	r3, r3, r1
   1c998:	str	r3, [sp, #8]
   1c99c:	cmp	r9, sl
   1c9a0:	bge	1c04c <GetDataSlab+0x130>
   1c9a4:	mov	r7, r8
   1c9a8:	mov	fp, r6
   1c9ac:	mov	r5, #0
   1c9b0:	b	1c9c8 <GetDataSlab+0xaac>
   1c9b4:	ldr	r3, [sp, #8]
   1c9b8:	add	r5, r5, #1
   1c9bc:	ldrd	r0, [r7, r3]
   1c9c0:	bl	402c4 <__aeabi_l2f>
   1c9c4:	str	r0, [fp], #4
   1c9c8:	ldr	r3, [sp, #16]
   1c9cc:	cmp	r5, r4
   1c9d0:	add	r7, r7, r3
   1c9d4:	blt	1c9b4 <GetDataSlab+0xa98>
   1c9d8:	ldr	r3, [sp, #4]
   1c9dc:	add	r9, r9, #1
   1c9e0:	add	r6, r6, r3
   1c9e4:	ldr	r3, [sp, #12]
   1c9e8:	add	r8, r8, r3
   1c9ec:	b	1c99c <GetDataSlab+0xa80>
   1c9f0:	cmp	r5, #13
   1c9f4:	bne	337fc <GetDataSlab+0x178e0>
   1c9f8:	mla	r2, r2, r3, r0
   1c9fc:	lsl	r3, r3, #3
   1ca00:	ldr	r0, [sp, #8]
   1ca04:	mul	r3, ip, r3
   1ca08:	ldr	r6, [sp]
   1ca0c:	str	r3, [sp, #16]
   1ca10:	lsl	r3, r1, #3
   1ca14:	str	r3, [sp, #8]
   1ca18:	bic	r3, r4, r4, asr #31
   1ca1c:	add	r8, r0, r2, lsl #3
   1ca20:	lsl	r3, r3, #2
   1ca24:	str	r3, [sp, #4]
   1ca28:	mvn	r3, #7
   1ca2c:	mov	r9, #0
   1ca30:	mul	r3, r3, r1
   1ca34:	str	r3, [sp, #12]
   1ca38:	cmp	r9, sl
   1ca3c:	bge	1c04c <GetDataSlab+0x130>
   1ca40:	mov	r7, r8
   1ca44:	mov	fp, r6
   1ca48:	mov	r5, #0
   1ca4c:	b	1ca64 <GetDataSlab+0xb48>
   1ca50:	ldr	r3, [sp, #12]
   1ca54:	add	r5, r5, #1
   1ca58:	ldrd	r0, [r7, r3]
   1ca5c:	bl	402b4 <__aeabi_ul2f>
   1ca60:	str	r0, [fp], #4
   1ca64:	ldr	r3, [sp, #8]
   1ca68:	cmp	r5, r4
   1ca6c:	add	r7, r7, r3
   1ca70:	blt	1ca50 <GetDataSlab+0xb34>
   1ca74:	ldr	r3, [sp, #4]
   1ca78:	add	r9, r9, #1
   1ca7c:	add	r6, r6, r3
   1ca80:	ldr	r3, [sp, #16]
   1ca84:	add	r8, r8, r3
   1ca88:	b	1ca38 <GetDataSlab+0xb1c>
   1ca8c:	sub	lr, r5, #1
   1ca90:	cmp	lr, #8
   1ca94:	addls	pc, pc, lr, lsl #2
   1ca98:	b	1ce68 <GetDataSlab+0xf4c>
   1ca9c:	b	1cd98 <GetDataSlab+0xe7c>
   1caa0:	b	1ce00 <GetDataSlab+0xee4>
   1caa4:	b	1ccb0 <GetDataSlab+0xd94>
   1caa8:	b	1cd24 <GetDataSlab+0xe08>
   1caac:	b	1cbc8 <GetDataSlab+0xcac>
   1cab0:	b	1cc3c <GetDataSlab+0xd20>
   1cab4:	b	1cb44 <GetDataSlab+0xc28>
   1cab8:	b	1ce68 <GetDataSlab+0xf4c>
   1cabc:	b	1cac0 <GetDataSlab+0xba4>
   1cac0:	mla	r2, r2, r3, r0
   1cac4:	lsl	r3, r3, #3
   1cac8:	ldr	r0, [sp, #8]
   1cacc:	mul	r3, ip, r3
   1cad0:	ldr	r6, [sp]
   1cad4:	str	r3, [sp, #4]
   1cad8:	lsl	r3, r1, #3
   1cadc:	str	r3, [sp, #12]
   1cae0:	bic	r3, r4, r4, asr #31
   1cae4:	add	r8, r0, r2, lsl #3
   1cae8:	mov	r9, #0
   1caec:	lsl	r3, r3, #3
   1caf0:	str	r3, [sp, #8]
   1caf4:	cmp	r9, sl
   1caf8:	bge	1c04c <GetDataSlab+0x130>
   1cafc:	mov	r7, r8
   1cb00:	mov	fp, r6
   1cb04:	mov	r5, #0
   1cb08:	b	1cb24 <GetDataSlab+0xc08>
   1cb0c:	ldrd	r0, [r7]
   1cb10:	bl	4037c <__aeabi_d2lz>
   1cb14:	ldr	r3, [sp, #12]
   1cb18:	add	r5, r5, #1
   1cb1c:	add	r7, r7, r3
   1cb20:	strd	r0, [fp], #8
   1cb24:	cmp	r5, r4
   1cb28:	blt	1cb0c <GetDataSlab+0xbf0>
   1cb2c:	ldr	r3, [sp, #8]
   1cb30:	add	r9, r9, #1
   1cb34:	add	r6, r6, r3
   1cb38:	ldr	r3, [sp, #4]
   1cb3c:	add	r8, r8, r3
   1cb40:	b	1caf4 <GetDataSlab+0xbd8>
   1cb44:	mla	r2, r2, r3, r0
   1cb48:	lsl	r3, r3, #2
   1cb4c:	ldr	r0, [sp, #8]
   1cb50:	mul	r3, ip, r3
   1cb54:	ldr	r6, [sp]
   1cb58:	str	r3, [sp, #4]
   1cb5c:	lsl	r3, r1, #2
   1cb60:	str	r3, [sp, #12]
   1cb64:	bic	r3, r4, r4, asr #31
   1cb68:	add	r8, r0, r2, lsl #2
   1cb6c:	mov	r9, #0
   1cb70:	lsl	r3, r3, #3
   1cb74:	str	r3, [sp, #8]
   1cb78:	cmp	r9, sl
   1cb7c:	bge	1c04c <GetDataSlab+0x130>
   1cb80:	mov	r7, r8
   1cb84:	mov	fp, r6
   1cb88:	mov	r5, #0
   1cb8c:	b	1cba8 <GetDataSlab+0xc8c>
   1cb90:	ldr	r0, [r7]
   1cb94:	bl	40350 <__aeabi_f2lz>
   1cb98:	ldr	r3, [sp, #12]
   1cb9c:	add	r5, r5, #1
   1cba0:	add	r7, r7, r3
   1cba4:	strd	r0, [fp], #8
   1cba8:	cmp	r5, r4
   1cbac:	blt	1cb90 <GetDataSlab+0xc74>
   1cbb0:	ldr	r3, [sp, #8]
   1cbb4:	add	r9, r9, #1
   1cbb8:	add	r6, r6, r3
   1cbbc:	ldr	r3, [sp, #4]
   1cbc0:	add	r8, r8, r3
   1cbc4:	b	1cb78 <GetDataSlab+0xc5c>
   1cbc8:	mla	r2, r2, r3, r0
   1cbcc:	lsl	r3, r3, #2
   1cbd0:	ldr	r0, [sp, #8]
   1cbd4:	mul	r9, ip, r3
   1cbd8:	bic	r3, r4, r4, asr #31
   1cbdc:	lsl	fp, r1, #2
   1cbe0:	lsl	r8, r3, #3
   1cbe4:	mvn	r3, #3
   1cbe8:	add	r0, r0, r2, lsl #2
   1cbec:	mul	r5, r3, r1
   1cbf0:	ldr	r1, [sp]
   1cbf4:	mov	ip, #0
   1cbf8:	cmp	ip, sl
   1cbfc:	bge	1c04c <GetDataSlab+0x130>
   1cc00:	mov	r3, r0
   1cc04:	mov	lr, r1
   1cc08:	mov	r2, #0
   1cc0c:	b	1cc20 <GetDataSlab+0xd04>
   1cc10:	ldr	r6, [r3, r5]
   1cc14:	add	r2, r2, #1
   1cc18:	asr	r7, r6, #31
   1cc1c:	strd	r6, [lr], #8
   1cc20:	cmp	r2, r4
   1cc24:	add	r3, r3, fp
   1cc28:	blt	1cc10 <GetDataSlab+0xcf4>
   1cc2c:	add	r1, r1, r8
   1cc30:	add	r0, r0, r9
   1cc34:	add	ip, ip, #1
   1cc38:	b	1cbf8 <GetDataSlab+0xcdc>
   1cc3c:	mla	r2, r2, r3, r0
   1cc40:	lsl	r3, r3, #2
   1cc44:	ldr	r0, [sp, #8]
   1cc48:	mul	r8, ip, r3
   1cc4c:	bic	r3, r4, r4, asr #31
   1cc50:	lsl	fp, r1, #2
   1cc54:	lsl	r9, r3, #3
   1cc58:	mvn	r3, #3
   1cc5c:	add	r0, r0, r2, lsl #2
   1cc60:	mul	r5, r3, r1
   1cc64:	ldr	r1, [sp]
   1cc68:	mov	ip, #0
   1cc6c:	cmp	ip, sl
   1cc70:	bge	1c04c <GetDataSlab+0x130>
   1cc74:	mov	r3, r0
   1cc78:	mov	lr, r1
   1cc7c:	mov	r2, #0
   1cc80:	b	1cc94 <GetDataSlab+0xd78>
   1cc84:	ldr	r6, [r3, r5]
   1cc88:	mov	r7, #0
   1cc8c:	add	r2, r2, #1
   1cc90:	strd	r6, [lr], #8
   1cc94:	cmp	r2, r4
   1cc98:	add	r3, r3, fp
   1cc9c:	blt	1cc84 <GetDataSlab+0xd68>
   1cca0:	add	r1, r1, r9
   1cca4:	add	r0, r0, r8
   1cca8:	add	ip, ip, #1
   1ccac:	b	1cc6c <GetDataSlab+0xd50>
   1ccb0:	mla	r2, r2, r3, r0
   1ccb4:	lsl	r3, r3, #1
   1ccb8:	ldr	r0, [sp, #8]
   1ccbc:	mul	r5, ip, r3
   1ccc0:	bic	r3, r4, r4, asr #31
   1ccc4:	add	r0, r0, r2, lsl #1
   1ccc8:	lsl	r8, r3, #3
   1cccc:	mvn	r3, #1
   1ccd0:	ldr	r2, [sp]
   1ccd4:	mul	r9, r3, r1
   1ccd8:	lsl	fp, r1, #1
   1ccdc:	mov	ip, #0
   1cce0:	cmp	ip, sl
   1cce4:	bge	1c04c <GetDataSlab+0x130>
   1cce8:	mov	r1, r0
   1ccec:	mov	lr, r2
   1ccf0:	mov	r3, #0
   1ccf4:	b	1cd08 <GetDataSlab+0xdec>
   1ccf8:	ldrsh	r6, [r1, r9]
   1ccfc:	add	r3, r3, #1
   1cd00:	asr	r7, r6, #31
   1cd04:	strd	r6, [lr], #8
   1cd08:	cmp	r3, r4
   1cd0c:	add	r1, r1, fp
   1cd10:	blt	1ccf8 <GetDataSlab+0xddc>
   1cd14:	add	r2, r2, r8
   1cd18:	add	r0, r0, r5
   1cd1c:	add	ip, ip, #1
   1cd20:	b	1cce0 <GetDataSlab+0xdc4>
   1cd24:	mla	r2, r2, r3, r0
   1cd28:	lsl	r3, r3, #1
   1cd2c:	ldr	r0, [sp, #8]
   1cd30:	mul	r5, ip, r3
   1cd34:	bic	r3, r4, r4, asr #31
   1cd38:	add	r0, r0, r2, lsl #1
   1cd3c:	lsl	r8, r3, #3
   1cd40:	mvn	r3, #1
   1cd44:	ldr	r2, [sp]
   1cd48:	mul	r9, r3, r1
   1cd4c:	lsl	fp, r1, #1
   1cd50:	mov	ip, #0
   1cd54:	cmp	ip, sl
   1cd58:	bge	1c04c <GetDataSlab+0x130>
   1cd5c:	mov	r1, r0
   1cd60:	mov	lr, r2
   1cd64:	mov	r3, #0
   1cd68:	b	1cd7c <GetDataSlab+0xe60>
   1cd6c:	ldrh	r6, [r1, r9]
   1cd70:	mov	r7, #0
   1cd74:	add	r3, r3, #1
   1cd78:	strd	r6, [lr], #8
   1cd7c:	cmp	r3, r4
   1cd80:	add	r1, r1, fp
   1cd84:	blt	1cd6c <GetDataSlab+0xe50>
   1cd88:	add	r2, r2, r8
   1cd8c:	add	r0, r0, r5
   1cd90:	add	ip, ip, #1
   1cd94:	b	1cd54 <GetDataSlab+0xe38>
   1cd98:	mla	r2, r2, r3, r0
   1cd9c:	mul	r9, ip, r3
   1cda0:	ldr	r0, [sp, #8]
   1cda4:	bic	r3, r4, r4, asr #31
   1cda8:	add	lr, r0, r2
   1cdac:	ldr	r2, [sp]
   1cdb0:	lsl	r8, r3, #3
   1cdb4:	mov	ip, #0
   1cdb8:	rsb	fp, r1, #0
   1cdbc:	cmp	ip, sl
   1cdc0:	bge	1c04c <GetDataSlab+0x130>
   1cdc4:	mov	r0, lr
   1cdc8:	mov	r5, r2
   1cdcc:	mov	r3, #0
   1cdd0:	b	1cde4 <GetDataSlab+0xec8>
   1cdd4:	ldrsb	r6, [r0, fp]
   1cdd8:	add	r3, r3, #1
   1cddc:	asr	r7, r6, #31
   1cde0:	strd	r6, [r5], #8
   1cde4:	cmp	r3, r4
   1cde8:	add	r0, r0, r1
   1cdec:	blt	1cdd4 <GetDataSlab+0xeb8>
   1cdf0:	add	r2, r2, r8
   1cdf4:	add	lr, lr, r9
   1cdf8:	add	ip, ip, #1
   1cdfc:	b	1cdbc <GetDataSlab+0xea0>
   1ce00:	mla	r2, r2, r3, r0
   1ce04:	mul	r9, ip, r3
   1ce08:	ldr	r0, [sp, #8]
   1ce0c:	bic	r3, r4, r4, asr #31
   1ce10:	add	lr, r0, r2
   1ce14:	ldr	r2, [sp]
   1ce18:	lsl	r8, r3, #3
   1ce1c:	mov	ip, #0
   1ce20:	rsb	fp, r1, #0
   1ce24:	cmp	ip, sl
   1ce28:	bge	1c04c <GetDataSlab+0x130>
   1ce2c:	mov	r0, lr
   1ce30:	mov	r5, r2
   1ce34:	mov	r3, #0
   1ce38:	b	1ce4c <GetDataSlab+0xf30>
   1ce3c:	ldrb	r6, [r0, fp]
   1ce40:	mov	r7, #0
   1ce44:	add	r3, r3, #1
   1ce48:	strd	r6, [r5], #8
   1ce4c:	cmp	r3, r4
   1ce50:	add	r0, r0, r1
   1ce54:	blt	1ce3c <GetDataSlab+0xf20>
   1ce58:	add	r2, r2, r8
   1ce5c:	add	lr, lr, r9
   1ce60:	add	ip, ip, #1
   1ce64:	b	1ce24 <GetDataSlab+0xf08>
   1ce68:	cmp	r5, #12
   1ce6c:	bne	1cee8 <GetDataSlab+0xfcc>
   1ce70:	mla	r2, r2, r3, r0
   1ce74:	lsl	r3, r3, #3
   1ce78:	ldr	r0, [sp, #8]
   1ce7c:	mul	r7, ip, r3
   1ce80:	lsl	r3, r1, #3
   1ce84:	str	r3, [sp, #4]
   1ce88:	bic	r3, r4, r4, asr #31
   1ce8c:	add	r0, r0, r2, lsl #3
   1ce90:	lsl	r6, r3, #3
   1ce94:	mvn	r3, #7
   1ce98:	mov	ip, #0
   1ce9c:	mul	r5, r3, r1
   1cea0:	ldr	r1, [sp]
   1cea4:	cmp	ip, sl
   1cea8:	bge	1c04c <GetDataSlab+0x130>
   1ceac:	mov	r3, r0
   1ceb0:	mov	lr, r1
   1ceb4:	mov	r2, #0
   1ceb8:	b	1cec8 <GetDataSlab+0xfac>
   1cebc:	ldrd	r8, [r3, r5]
   1cec0:	add	r2, r2, #1
   1cec4:	strd	r8, [lr], #8
   1cec8:	ldr	r8, [sp, #4]
   1cecc:	cmp	r2, r4
   1ced0:	add	r3, r3, r8
   1ced4:	blt	1cebc <GetDataSlab+0xfa0>
   1ced8:	add	r1, r1, r6
   1cedc:	add	r0, r0, r7
   1cee0:	add	ip, ip, #1
   1cee4:	b	1cea4 <GetDataSlab+0xf88>
   1cee8:	cmp	r5, #13
   1ceec:	bne	337fc <GetDataSlab+0x178e0>
   1cef0:	mla	r2, r2, r3, r0
   1cef4:	lsl	r3, r3, #3
   1cef8:	ldr	r0, [sp, #8]
   1cefc:	mul	r7, ip, r3
   1cf00:	lsl	r3, r1, #3
   1cf04:	str	r3, [sp, #4]
   1cf08:	bic	r3, r4, r4, asr #31
   1cf0c:	add	r0, r0, r2, lsl #3
   1cf10:	lsl	r6, r3, #3
   1cf14:	mvn	r3, #7
   1cf18:	mov	ip, #0
   1cf1c:	mul	r5, r3, r1
   1cf20:	ldr	r1, [sp]
   1cf24:	cmp	ip, sl
   1cf28:	bge	1c04c <GetDataSlab+0x130>
   1cf2c:	mov	r3, r0
   1cf30:	mov	lr, r1
   1cf34:	mov	r2, #0
   1cf38:	b	1cf48 <GetDataSlab+0x102c>
   1cf3c:	ldrd	r8, [r3, r5]
   1cf40:	add	r2, r2, #1
   1cf44:	strd	r8, [lr], #8
   1cf48:	ldr	r8, [sp, #4]
   1cf4c:	cmp	r2, r4
   1cf50:	add	r3, r3, r8
   1cf54:	blt	1cf3c <GetDataSlab+0x1020>
   1cf58:	add	r1, r1, r6
   1cf5c:	add	r0, r0, r7
   1cf60:	add	ip, ip, #1
   1cf64:	b	1cf24 <GetDataSlab+0x1008>
   1cf68:	sub	lr, r5, #1
   1cf6c:	cmp	lr, #8
   1cf70:	addls	pc, pc, lr, lsl #2
   1cf74:	b	1d344 <GetDataSlab+0x1428>
   1cf78:	b	1d274 <GetDataSlab+0x1358>
   1cf7c:	b	1d2dc <GetDataSlab+0x13c0>
   1cf80:	b	1d18c <GetDataSlab+0x1270>
   1cf84:	b	1d200 <GetDataSlab+0x12e4>
   1cf88:	b	1d0a4 <GetDataSlab+0x1188>
   1cf8c:	b	1d118 <GetDataSlab+0x11fc>
   1cf90:	b	1d020 <GetDataSlab+0x1104>
   1cf94:	b	1d344 <GetDataSlab+0x1428>
   1cf98:	b	1cf9c <GetDataSlab+0x1080>
   1cf9c:	mla	r2, r2, r3, r0
   1cfa0:	lsl	r3, r3, #3
   1cfa4:	ldr	r0, [sp, #8]
   1cfa8:	mul	r3, ip, r3
   1cfac:	ldr	r6, [sp]
   1cfb0:	str	r3, [sp, #8]
   1cfb4:	lsl	r3, r1, #3
   1cfb8:	str	r3, [sp, #12]
   1cfbc:	bic	r3, r4, r4, asr #31
   1cfc0:	add	r8, r0, r2, lsl #3
   1cfc4:	mov	r9, #0
   1cfc8:	lsl	r3, r3, #3
   1cfcc:	str	r3, [sp, #4]
   1cfd0:	cmp	r9, sl
   1cfd4:	bge	1c04c <GetDataSlab+0x130>
   1cfd8:	mov	r7, r8
   1cfdc:	mov	fp, r6
   1cfe0:	mov	r5, #0
   1cfe4:	b	1d000 <GetDataSlab+0x10e4>
   1cfe8:	ldrd	r0, [r7]
   1cfec:	bl	403f0 <__aeabi_d2ulz>
   1cff0:	ldr	r3, [sp, #12]
   1cff4:	add	r5, r5, #1
   1cff8:	add	r7, r7, r3
   1cffc:	strd	r0, [fp], #8
   1d000:	cmp	r5, r4
   1d004:	blt	1cfe8 <GetDataSlab+0x10cc>
   1d008:	ldr	r3, [sp, #4]
   1d00c:	add	r9, r9, #1
   1d010:	add	r6, r6, r3
   1d014:	ldr	r3, [sp, #8]
   1d018:	add	r8, r8, r3
   1d01c:	b	1cfd0 <GetDataSlab+0x10b4>
   1d020:	mla	r2, r2, r3, r0
   1d024:	lsl	r3, r3, #2
   1d028:	ldr	r0, [sp, #8]
   1d02c:	mul	r3, ip, r3
   1d030:	ldr	r6, [sp]
   1d034:	str	r3, [sp, #4]
   1d038:	lsl	r3, r1, #2
   1d03c:	str	r3, [sp, #12]
   1d040:	bic	r3, r4, r4, asr #31
   1d044:	add	r8, r0, r2, lsl #2
   1d048:	mov	r9, #0
   1d04c:	lsl	r3, r3, #3
   1d050:	str	r3, [sp, #8]
   1d054:	cmp	r9, sl
   1d058:	bge	1c04c <GetDataSlab+0x130>
   1d05c:	mov	r7, r8
   1d060:	mov	fp, r6
   1d064:	mov	r5, #0
   1d068:	b	1d084 <GetDataSlab+0x1168>
   1d06c:	ldr	r0, [r7]
   1d070:	bl	403a8 <__aeabi_f2ulz>
   1d074:	ldr	r3, [sp, #12]
   1d078:	add	r5, r5, #1
   1d07c:	add	r7, r7, r3
   1d080:	strd	r0, [fp], #8
   1d084:	cmp	r5, r4
   1d088:	blt	1d06c <GetDataSlab+0x1150>
   1d08c:	ldr	r3, [sp, #8]
   1d090:	add	r9, r9, #1
   1d094:	add	r6, r6, r3
   1d098:	ldr	r3, [sp, #4]
   1d09c:	add	r8, r8, r3
   1d0a0:	b	1d054 <GetDataSlab+0x1138>
   1d0a4:	mla	r2, r2, r3, r0
   1d0a8:	lsl	r3, r3, #2
   1d0ac:	ldr	r0, [sp, #8]
   1d0b0:	mul	r9, ip, r3
   1d0b4:	bic	r3, r4, r4, asr #31
   1d0b8:	lsl	fp, r1, #2
   1d0bc:	lsl	r8, r3, #3
   1d0c0:	mvn	r3, #3
   1d0c4:	add	r0, r0, r2, lsl #2
   1d0c8:	mul	r5, r3, r1
   1d0cc:	ldr	r1, [sp]
   1d0d0:	mov	ip, #0
   1d0d4:	cmp	ip, sl
   1d0d8:	bge	1c04c <GetDataSlab+0x130>
   1d0dc:	mov	r3, r0
   1d0e0:	mov	lr, r1
   1d0e4:	mov	r2, #0
   1d0e8:	b	1d0fc <GetDataSlab+0x11e0>
   1d0ec:	ldr	r6, [r3, r5]
   1d0f0:	add	r2, r2, #1
   1d0f4:	asr	r7, r6, #31
   1d0f8:	strd	r6, [lr], #8
   1d0fc:	cmp	r2, r4
   1d100:	add	r3, r3, fp
   1d104:	blt	1d0ec <GetDataSlab+0x11d0>
   1d108:	add	r1, r1, r8
   1d10c:	add	r0, r0, r9
   1d110:	add	ip, ip, #1
   1d114:	b	1d0d4 <GetDataSlab+0x11b8>
   1d118:	mla	r2, r2, r3, r0
   1d11c:	lsl	r3, r3, #2
   1d120:	ldr	r0, [sp, #8]
   1d124:	mul	r9, ip, r3
   1d128:	bic	r3, r4, r4, asr #31
   1d12c:	lsl	fp, r1, #2
   1d130:	lsl	r8, r3, #3
   1d134:	mvn	r3, #3
   1d138:	add	r0, r0, r2, lsl #2
   1d13c:	mul	r5, r3, r1
   1d140:	ldr	r1, [sp]
   1d144:	mov	ip, #0
   1d148:	cmp	ip, sl
   1d14c:	bge	1c04c <GetDataSlab+0x130>
   1d150:	mov	r3, r0
   1d154:	mov	lr, r1
   1d158:	mov	r2, #0
   1d15c:	b	1d170 <GetDataSlab+0x1254>
   1d160:	ldr	r6, [r3, r5]
   1d164:	mov	r7, #0
   1d168:	add	r2, r2, #1
   1d16c:	strd	r6, [lr], #8
   1d170:	cmp	r2, r4
   1d174:	add	r3, r3, fp
   1d178:	blt	1d160 <GetDataSlab+0x1244>
   1d17c:	add	r1, r1, r8
   1d180:	add	r0, r0, r9
   1d184:	add	ip, ip, #1
   1d188:	b	1d148 <GetDataSlab+0x122c>
   1d18c:	mla	r2, r2, r3, r0
   1d190:	lsl	r3, r3, #1
   1d194:	ldr	r0, [sp, #8]
   1d198:	mul	r8, ip, r3
   1d19c:	bic	r3, r4, r4, asr #31
   1d1a0:	add	r0, r0, r2, lsl #1
   1d1a4:	lsl	r5, r3, #3
   1d1a8:	mvn	r3, #1
   1d1ac:	ldr	r2, [sp]
   1d1b0:	mul	fp, r3, r1
   1d1b4:	lsl	r9, r1, #1
   1d1b8:	mov	ip, #0
   1d1bc:	cmp	ip, sl
   1d1c0:	bge	1c04c <GetDataSlab+0x130>
   1d1c4:	mov	r1, r0
   1d1c8:	mov	lr, r2
   1d1cc:	mov	r3, #0
   1d1d0:	b	1d1e4 <GetDataSlab+0x12c8>
   1d1d4:	ldrsh	r6, [r1, fp]
   1d1d8:	add	r3, r3, #1
   1d1dc:	asr	r7, r6, #31
   1d1e0:	strd	r6, [lr], #8
   1d1e4:	cmp	r3, r4
   1d1e8:	add	r1, r1, r9
   1d1ec:	blt	1d1d4 <GetDataSlab+0x12b8>
   1d1f0:	add	r2, r2, r5
   1d1f4:	add	r0, r0, r8
   1d1f8:	add	ip, ip, #1
   1d1fc:	b	1d1bc <GetDataSlab+0x12a0>
   1d200:	mla	r2, r2, r3, r0
   1d204:	lsl	r3, r3, #1
   1d208:	ldr	r0, [sp, #8]
   1d20c:	mul	r5, ip, r3
   1d210:	bic	r3, r4, r4, asr #31
   1d214:	add	r0, r0, r2, lsl #1
   1d218:	lsl	r8, r3, #3
   1d21c:	mvn	r3, #1
   1d220:	ldr	r2, [sp]
   1d224:	mul	r9, r3, r1
   1d228:	lsl	fp, r1, #1
   1d22c:	mov	ip, #0
   1d230:	cmp	ip, sl
   1d234:	bge	1c04c <GetDataSlab+0x130>
   1d238:	mov	r1, r0
   1d23c:	mov	lr, r2
   1d240:	mov	r3, #0
   1d244:	b	1d258 <GetDataSlab+0x133c>
   1d248:	ldrh	r6, [r1, r9]
   1d24c:	mov	r7, #0
   1d250:	add	r3, r3, #1
   1d254:	strd	r6, [lr], #8
   1d258:	cmp	r3, r4
   1d25c:	add	r1, r1, fp
   1d260:	blt	1d248 <GetDataSlab+0x132c>
   1d264:	add	r2, r2, r8
   1d268:	add	r0, r0, r5
   1d26c:	add	ip, ip, #1
   1d270:	b	1d230 <GetDataSlab+0x1314>
   1d274:	mla	r2, r2, r3, r0
   1d278:	mul	r8, ip, r3
   1d27c:	ldr	r0, [sp, #8]
   1d280:	bic	r3, r4, r4, asr #31
   1d284:	add	lr, r0, r2
   1d288:	ldr	r2, [sp]
   1d28c:	lsl	r9, r3, #3
   1d290:	mov	ip, #0
   1d294:	rsb	fp, r1, #0
   1d298:	cmp	ip, sl
   1d29c:	bge	1c04c <GetDataSlab+0x130>
   1d2a0:	mov	r0, lr
   1d2a4:	mov	r5, r2
   1d2a8:	mov	r3, #0
   1d2ac:	b	1d2c0 <GetDataSlab+0x13a4>
   1d2b0:	ldrsb	r6, [r0, fp]
   1d2b4:	add	r3, r3, #1
   1d2b8:	asr	r7, r6, #31
   1d2bc:	strd	r6, [r5], #8
   1d2c0:	cmp	r3, r4
   1d2c4:	add	r0, r0, r1
   1d2c8:	blt	1d2b0 <GetDataSlab+0x1394>
   1d2cc:	add	r2, r2, r9
   1d2d0:	add	lr, lr, r8
   1d2d4:	add	ip, ip, #1
   1d2d8:	b	1d298 <GetDataSlab+0x137c>
   1d2dc:	mla	r2, r2, r3, r0
   1d2e0:	mul	r9, ip, r3
   1d2e4:	ldr	r0, [sp, #8]
   1d2e8:	bic	r3, r4, r4, asr #31
   1d2ec:	add	lr, r0, r2
   1d2f0:	ldr	r2, [sp]
   1d2f4:	lsl	r8, r3, #3
   1d2f8:	mov	ip, #0
   1d2fc:	rsb	fp, r1, #0
   1d300:	cmp	ip, sl
   1d304:	bge	1c04c <GetDataSlab+0x130>
   1d308:	mov	r0, lr
   1d30c:	mov	r5, r2
   1d310:	mov	r3, #0
   1d314:	b	1d328 <GetDataSlab+0x140c>
   1d318:	ldrb	r6, [r0, fp]
   1d31c:	mov	r7, #0
   1d320:	add	r3, r3, #1
   1d324:	strd	r6, [r5], #8
   1d328:	cmp	r3, r4
   1d32c:	add	r0, r0, r1
   1d330:	blt	1d318 <GetDataSlab+0x13fc>
   1d334:	add	r2, r2, r8
   1d338:	add	lr, lr, r9
   1d33c:	add	ip, ip, #1
   1d340:	b	1d300 <GetDataSlab+0x13e4>
   1d344:	cmp	r5, #12
   1d348:	bne	1d3c4 <GetDataSlab+0x14a8>
   1d34c:	mla	r2, r2, r3, r0
   1d350:	lsl	r3, r3, #3
   1d354:	ldr	r0, [sp, #8]
   1d358:	mul	r7, ip, r3
   1d35c:	lsl	r3, r1, #3
   1d360:	str	r3, [sp, #4]
   1d364:	bic	r3, r4, r4, asr #31
   1d368:	add	r0, r0, r2, lsl #3
   1d36c:	lsl	r6, r3, #3
   1d370:	mvn	r3, #7
   1d374:	mov	ip, #0
   1d378:	mul	r5, r3, r1
   1d37c:	ldr	r1, [sp]
   1d380:	cmp	ip, sl
   1d384:	bge	1c04c <GetDataSlab+0x130>
   1d388:	mov	r3, r0
   1d38c:	mov	lr, r1
   1d390:	mov	r2, #0
   1d394:	b	1d3a4 <GetDataSlab+0x1488>
   1d398:	ldrd	r8, [r3, r5]
   1d39c:	add	r2, r2, #1
   1d3a0:	strd	r8, [lr], #8
   1d3a4:	ldr	r8, [sp, #4]
   1d3a8:	cmp	r2, r4
   1d3ac:	add	r3, r3, r8
   1d3b0:	blt	1d398 <GetDataSlab+0x147c>
   1d3b4:	add	r1, r1, r6
   1d3b8:	add	r0, r0, r7
   1d3bc:	add	ip, ip, #1
   1d3c0:	b	1d380 <GetDataSlab+0x1464>
   1d3c4:	cmp	r5, #13
   1d3c8:	bne	337fc <GetDataSlab+0x178e0>
   1d3cc:	mla	r2, r2, r3, r0
   1d3d0:	lsl	r3, r3, #3
   1d3d4:	ldr	r0, [sp, #8]
   1d3d8:	mul	r6, ip, r3
   1d3dc:	lsl	r3, r1, #3
   1d3e0:	str	r3, [sp, #4]
   1d3e4:	bic	r3, r4, r4, asr #31
   1d3e8:	add	r0, r0, r2, lsl #3
   1d3ec:	lsl	r7, r3, #3
   1d3f0:	mvn	r3, #7
   1d3f4:	mov	ip, #0
   1d3f8:	mul	r5, r3, r1
   1d3fc:	ldr	r1, [sp]
   1d400:	cmp	ip, sl
   1d404:	bge	1c04c <GetDataSlab+0x130>
   1d408:	mov	r3, r0
   1d40c:	mov	lr, r1
   1d410:	mov	r2, #0
   1d414:	b	1d424 <GetDataSlab+0x1508>
   1d418:	ldrd	r8, [r3, r5]
   1d41c:	add	r2, r2, #1
   1d420:	strd	r8, [lr], #8
   1d424:	ldr	r8, [sp, #4]
   1d428:	cmp	r2, r4
   1d42c:	add	r3, r3, r8
   1d430:	blt	1d418 <GetDataSlab+0x14fc>
   1d434:	add	r1, r1, r7
   1d438:	add	r0, r0, r6
   1d43c:	add	ip, ip, #1
   1d440:	b	1d400 <GetDataSlab+0x14e4>
   1d444:	sub	r1, r5, #1
   1d448:	cmp	r1, #8
   1d44c:	addls	pc, pc, r1, lsl #2
   1d450:	b	1d7c8 <GetDataSlab+0x18ac>
   1d454:	b	1d700 <GetDataSlab+0x17e4>
   1d458:	b	1d764 <GetDataSlab+0x1848>
   1d45c:	b	1d628 <GetDataSlab+0x170c>
   1d460:	b	1d694 <GetDataSlab+0x1778>
   1d464:	b	1d558 <GetDataSlab+0x163c>
   1d468:	b	1d5c0 <GetDataSlab+0x16a4>
   1d46c:	b	1d4e8 <GetDataSlab+0x15cc>
   1d470:	b	1d7c8 <GetDataSlab+0x18ac>
   1d474:	b	1d478 <GetDataSlab+0x155c>
   1d478:	mla	r3, r2, r3, r0
   1d47c:	ldr	r2, [sp, #8]
   1d480:	ldr	r0, [sp]
   1d484:	add	r1, r2, r3, lsl #3
   1d488:	mov	r2, #0
   1d48c:	ldr	r3, [sp, #204]	; 0xcc
   1d490:	ldr	r3, [r3, #4]
   1d494:	cmp	r2, r3
   1d498:	bge	1c04c <GetDataSlab+0x130>
   1d49c:	mov	r3, #0
   1d4a0:	b	1d4c0 <GetDataSlab+0x15a4>
   1d4a4:	ldr	ip, [r9]
   1d4a8:	mul	ip, ip, r3
   1d4ac:	add	r3, r3, #1
   1d4b0:	add	ip, r1, ip, lsl #3
   1d4b4:	vldr	d7, [ip]
   1d4b8:	vcvt.s32.f64	s15, d7
   1d4bc:	vstmia	r0!, {s15}
   1d4c0:	ldr	ip, [sp, #204]	; 0xcc
   1d4c4:	ldr	ip, [ip]
   1d4c8:	cmp	r3, ip
   1d4cc:	blt	1d4a4 <GetDataSlab+0x1588>
   1d4d0:	ldr	r3, [fp]
   1d4d4:	ldr	ip, [r9, #4]
   1d4d8:	add	r2, r2, #1
   1d4dc:	lsl	r3, r3, #3
   1d4e0:	mla	r1, ip, r3, r1
   1d4e4:	b	1d48c <GetDataSlab+0x1570>
   1d4e8:	mla	r3, r2, r3, r0
   1d4ec:	ldr	r2, [sp, #8]
   1d4f0:	ldr	r0, [sp]
   1d4f4:	add	r1, r2, r3, lsl #2
   1d4f8:	mov	r2, #0
   1d4fc:	ldr	r3, [sp, #204]	; 0xcc
   1d500:	ldr	r3, [r3, #4]
   1d504:	cmp	r2, r3
   1d508:	bge	1c04c <GetDataSlab+0x130>
   1d50c:	mov	r3, #0
   1d510:	b	1d530 <GetDataSlab+0x1614>
   1d514:	ldr	ip, [r9]
   1d518:	mul	ip, ip, r3
   1d51c:	add	r3, r3, #1
   1d520:	add	ip, r1, ip, lsl #2
   1d524:	vldr	s15, [ip]
   1d528:	vcvt.s32.f32	s15, s15
   1d52c:	vstmia	r0!, {s15}
   1d530:	ldr	ip, [sp, #204]	; 0xcc
   1d534:	ldr	ip, [ip]
   1d538:	cmp	r3, ip
   1d53c:	blt	1d514 <GetDataSlab+0x15f8>
   1d540:	ldr	r3, [fp]
   1d544:	ldr	ip, [r9, #4]
   1d548:	add	r2, r2, #1
   1d54c:	lsl	r3, r3, #2
   1d550:	mla	r1, ip, r3, r1
   1d554:	b	1d4fc <GetDataSlab+0x15e0>
   1d558:	mla	r3, r2, r3, r0
   1d55c:	ldr	r2, [sp, #8]
   1d560:	ldr	r0, [sp]
   1d564:	add	r1, r2, r3, lsl #2
   1d568:	mov	r2, #0
   1d56c:	ldr	r3, [sp, #204]	; 0xcc
   1d570:	ldr	r3, [r3, #4]
   1d574:	cmp	r2, r3
   1d578:	bge	1c04c <GetDataSlab+0x130>
   1d57c:	mov	r3, #0
   1d580:	b	1d598 <GetDataSlab+0x167c>
   1d584:	ldr	ip, [r9]
   1d588:	mul	ip, ip, r3
   1d58c:	add	r3, r3, #1
   1d590:	ldr	ip, [r1, ip, lsl #2]
   1d594:	str	ip, [r0], #4
   1d598:	ldr	ip, [sp, #204]	; 0xcc
   1d59c:	ldr	ip, [ip]
   1d5a0:	cmp	r3, ip
   1d5a4:	blt	1d584 <GetDataSlab+0x1668>
   1d5a8:	ldr	r3, [fp]
   1d5ac:	ldr	ip, [r9, #4]
   1d5b0:	add	r2, r2, #1
   1d5b4:	lsl	r3, r3, #2
   1d5b8:	mla	r1, ip, r3, r1
   1d5bc:	b	1d56c <GetDataSlab+0x1650>
   1d5c0:	mla	r3, r2, r3, r0
   1d5c4:	ldr	r2, [sp, #8]
   1d5c8:	ldr	r0, [sp]
   1d5cc:	add	r1, r2, r3, lsl #2
   1d5d0:	mov	r2, #0
   1d5d4:	ldr	r3, [sp, #204]	; 0xcc
   1d5d8:	ldr	r3, [r3, #4]
   1d5dc:	cmp	r2, r3
   1d5e0:	bge	1c04c <GetDataSlab+0x130>
   1d5e4:	mov	r3, #0
   1d5e8:	b	1d600 <GetDataSlab+0x16e4>
   1d5ec:	ldr	ip, [r9]
   1d5f0:	mul	ip, ip, r3
   1d5f4:	add	r3, r3, #1
   1d5f8:	ldr	ip, [r1, ip, lsl #2]
   1d5fc:	str	ip, [r0], #4
   1d600:	ldr	ip, [sp, #204]	; 0xcc
   1d604:	ldr	ip, [ip]
   1d608:	cmp	r3, ip
   1d60c:	blt	1d5ec <GetDataSlab+0x16d0>
   1d610:	ldr	r3, [fp]
   1d614:	ldr	ip, [r9, #4]
   1d618:	add	r2, r2, #1
   1d61c:	lsl	r3, r3, #2
   1d620:	mla	r1, ip, r3, r1
   1d624:	b	1d5d4 <GetDataSlab+0x16b8>
   1d628:	mla	r3, r2, r3, r0
   1d62c:	ldr	r2, [sp, #8]
   1d630:	ldr	r0, [sp]
   1d634:	add	r1, r2, r3, lsl #1
   1d638:	mov	r2, #0
   1d63c:	ldr	r3, [sp, #204]	; 0xcc
   1d640:	ldr	r3, [r3, #4]
   1d644:	cmp	r2, r3
   1d648:	bge	1c04c <GetDataSlab+0x130>
   1d64c:	mov	r3, #0
   1d650:	b	1d66c <GetDataSlab+0x1750>
   1d654:	ldr	ip, [r9]
   1d658:	mul	ip, ip, r3
   1d65c:	add	r3, r3, #1
   1d660:	lsl	ip, ip, #1
   1d664:	ldrsh	ip, [r1, ip]
   1d668:	str	ip, [r0], #4
   1d66c:	ldr	ip, [sp, #204]	; 0xcc
   1d670:	ldr	ip, [ip]
   1d674:	cmp	r3, ip
   1d678:	blt	1d654 <GetDataSlab+0x1738>
   1d67c:	ldr	r3, [fp]
   1d680:	ldr	ip, [r9, #4]
   1d684:	add	r2, r2, #1
   1d688:	lsl	r3, r3, #1
   1d68c:	mla	r1, ip, r3, r1
   1d690:	b	1d63c <GetDataSlab+0x1720>
   1d694:	mla	r3, r2, r3, r0
   1d698:	ldr	r2, [sp, #8]
   1d69c:	ldr	r0, [sp]
   1d6a0:	add	r1, r2, r3, lsl #1
   1d6a4:	mov	r2, #0
   1d6a8:	ldr	r3, [sp, #204]	; 0xcc
   1d6ac:	ldr	r3, [r3, #4]
   1d6b0:	cmp	r2, r3
   1d6b4:	bge	1c04c <GetDataSlab+0x130>
   1d6b8:	mov	r3, #0
   1d6bc:	b	1d6d8 <GetDataSlab+0x17bc>
   1d6c0:	ldr	ip, [r9]
   1d6c4:	mul	ip, ip, r3
   1d6c8:	add	r3, r3, #1
   1d6cc:	lsl	ip, ip, #1
   1d6d0:	ldrh	ip, [r1, ip]
   1d6d4:	str	ip, [r0], #4
   1d6d8:	ldr	ip, [sp, #204]	; 0xcc
   1d6dc:	ldr	ip, [ip]
   1d6e0:	cmp	r3, ip
   1d6e4:	blt	1d6c0 <GetDataSlab+0x17a4>
   1d6e8:	ldr	r3, [fp]
   1d6ec:	ldr	ip, [r9, #4]
   1d6f0:	add	r2, r2, #1
   1d6f4:	lsl	r3, r3, #1
   1d6f8:	mla	r1, ip, r3, r1
   1d6fc:	b	1d6a8 <GetDataSlab+0x178c>
   1d700:	mla	r3, r2, r3, r0
   1d704:	ldr	r2, [sp, #8]
   1d708:	ldr	r0, [sp]
   1d70c:	add	r1, r2, r3
   1d710:	mov	r2, #0
   1d714:	ldr	r3, [sp, #204]	; 0xcc
   1d718:	ldr	r3, [r3, #4]
   1d71c:	cmp	r2, r3
   1d720:	bge	1c04c <GetDataSlab+0x130>
   1d724:	mov	r3, #0
   1d728:	b	1d740 <GetDataSlab+0x1824>
   1d72c:	ldr	ip, [r9]
   1d730:	mul	ip, ip, r3
   1d734:	add	r3, r3, #1
   1d738:	ldrsb	ip, [r1, ip]
   1d73c:	str	ip, [r0], #4
   1d740:	ldr	ip, [sp, #204]	; 0xcc
   1d744:	ldr	ip, [ip]
   1d748:	cmp	r3, ip
   1d74c:	blt	1d72c <GetDataSlab+0x1810>
   1d750:	ldr	r3, [r9, #4]
   1d754:	ldr	ip, [fp]
   1d758:	add	r2, r2, #1
   1d75c:	mla	r1, ip, r3, r1
   1d760:	b	1d714 <GetDataSlab+0x17f8>
   1d764:	mla	r3, r2, r3, r0
   1d768:	ldr	r2, [sp, #8]
   1d76c:	ldr	r0, [sp]
   1d770:	add	r1, r2, r3
   1d774:	mov	r2, #0
   1d778:	ldr	r3, [sp, #204]	; 0xcc
   1d77c:	ldr	r3, [r3, #4]
   1d780:	cmp	r2, r3
   1d784:	bge	1c04c <GetDataSlab+0x130>
   1d788:	mov	r3, #0
   1d78c:	b	1d7a4 <GetDataSlab+0x1888>
   1d790:	ldr	ip, [r9]
   1d794:	mul	ip, ip, r3
   1d798:	add	r3, r3, #1
   1d79c:	ldrb	ip, [r1, ip]
   1d7a0:	str	ip, [r0], #4
   1d7a4:	ldr	ip, [sp, #204]	; 0xcc
   1d7a8:	ldr	ip, [ip]
   1d7ac:	cmp	r3, ip
   1d7b0:	blt	1d790 <GetDataSlab+0x1874>
   1d7b4:	ldr	r3, [r9, #4]
   1d7b8:	ldr	ip, [fp]
   1d7bc:	add	r2, r2, #1
   1d7c0:	mla	r1, ip, r3, r1
   1d7c4:	b	1d778 <GetDataSlab+0x185c>
   1d7c8:	cmp	r5, #12
   1d7cc:	bne	1d838 <GetDataSlab+0x191c>
   1d7d0:	mla	r3, r2, r3, r0
   1d7d4:	ldr	r2, [sp, #8]
   1d7d8:	ldr	r0, [sp]
   1d7dc:	add	r1, r2, r3, lsl #3
   1d7e0:	mov	r2, #0
   1d7e4:	ldr	r3, [sp, #204]	; 0xcc
   1d7e8:	ldr	r3, [r3, #4]
   1d7ec:	cmp	r2, r3
   1d7f0:	bge	1c04c <GetDataSlab+0x130>
   1d7f4:	mov	r3, #0
   1d7f8:	b	1d810 <GetDataSlab+0x18f4>
   1d7fc:	ldr	ip, [r9]
   1d800:	mul	ip, ip, r3
   1d804:	add	r3, r3, #1
   1d808:	ldr	ip, [r1, ip, lsl #3]
   1d80c:	str	ip, [r0], #4
   1d810:	ldr	ip, [sp, #204]	; 0xcc
   1d814:	ldr	ip, [ip]
   1d818:	cmp	r3, ip
   1d81c:	blt	1d7fc <GetDataSlab+0x18e0>
   1d820:	ldr	r3, [fp]
   1d824:	ldr	ip, [r9, #4]
   1d828:	add	r2, r2, #1
   1d82c:	lsl	r3, r3, #3
   1d830:	mla	r1, ip, r3, r1
   1d834:	b	1d7e4 <GetDataSlab+0x18c8>
   1d838:	cmp	r5, #13
   1d83c:	bne	337fc <GetDataSlab+0x178e0>
   1d840:	mla	r3, r2, r3, r0
   1d844:	ldr	r2, [sp, #8]
   1d848:	ldr	r0, [sp]
   1d84c:	add	r1, r2, r3, lsl #3
   1d850:	mov	r2, #0
   1d854:	ldr	r3, [sp, #204]	; 0xcc
   1d858:	ldr	r3, [r3, #4]
   1d85c:	cmp	r2, r3
   1d860:	bge	1c04c <GetDataSlab+0x130>
   1d864:	mov	r3, #0
   1d868:	b	1d880 <GetDataSlab+0x1964>
   1d86c:	ldr	ip, [r9]
   1d870:	mul	ip, ip, r3
   1d874:	add	r3, r3, #1
   1d878:	ldr	ip, [r1, ip, lsl #3]
   1d87c:	str	ip, [r0], #4
   1d880:	ldr	ip, [sp, #204]	; 0xcc
   1d884:	ldr	ip, [ip]
   1d888:	cmp	r3, ip
   1d88c:	blt	1d86c <GetDataSlab+0x1950>
   1d890:	ldr	r3, [fp]
   1d894:	ldr	ip, [r9, #4]
   1d898:	add	r2, r2, #1
   1d89c:	lsl	r3, r3, #3
   1d8a0:	mla	r1, ip, r3, r1
   1d8a4:	b	1d854 <GetDataSlab+0x1938>
   1d8a8:	sub	r1, r5, #1
   1d8ac:	cmp	r1, #8
   1d8b0:	addls	pc, pc, r1, lsl #2
   1d8b4:	b	1dc2c <GetDataSlab+0x1d10>
   1d8b8:	b	1db64 <GetDataSlab+0x1c48>
   1d8bc:	b	1dbc8 <GetDataSlab+0x1cac>
   1d8c0:	b	1da8c <GetDataSlab+0x1b70>
   1d8c4:	b	1daf8 <GetDataSlab+0x1bdc>
   1d8c8:	b	1d9bc <GetDataSlab+0x1aa0>
   1d8cc:	b	1da24 <GetDataSlab+0x1b08>
   1d8d0:	b	1d94c <GetDataSlab+0x1a30>
   1d8d4:	b	1dc2c <GetDataSlab+0x1d10>
   1d8d8:	b	1d8dc <GetDataSlab+0x19c0>
   1d8dc:	mla	r3, r2, r3, r0
   1d8e0:	ldr	r2, [sp, #8]
   1d8e4:	ldr	r0, [sp]
   1d8e8:	add	r1, r2, r3, lsl #3
   1d8ec:	mov	r2, #0
   1d8f0:	ldr	r3, [sp, #204]	; 0xcc
   1d8f4:	ldr	r3, [r3, #4]
   1d8f8:	cmp	r2, r3
   1d8fc:	bge	1c04c <GetDataSlab+0x130>
   1d900:	mov	r3, #0
   1d904:	b	1d924 <GetDataSlab+0x1a08>
   1d908:	ldr	ip, [r9]
   1d90c:	mul	ip, ip, r3
   1d910:	add	r3, r3, #1
   1d914:	add	ip, r1, ip, lsl #3
   1d918:	vldr	d7, [ip]
   1d91c:	vcvt.u32.f64	s15, d7
   1d920:	vstmia	r0!, {s15}
   1d924:	ldr	ip, [sp, #204]	; 0xcc
   1d928:	ldr	ip, [ip]
   1d92c:	cmp	r3, ip
   1d930:	blt	1d908 <GetDataSlab+0x19ec>
   1d934:	ldr	r3, [fp]
   1d938:	ldr	ip, [r9, #4]
   1d93c:	add	r2, r2, #1
   1d940:	lsl	r3, r3, #3
   1d944:	mla	r1, ip, r3, r1
   1d948:	b	1d8f0 <GetDataSlab+0x19d4>
   1d94c:	mla	r3, r2, r3, r0
   1d950:	ldr	r2, [sp, #8]
   1d954:	ldr	r0, [sp]
   1d958:	add	r1, r2, r3, lsl #2
   1d95c:	mov	r2, #0
   1d960:	ldr	r3, [sp, #204]	; 0xcc
   1d964:	ldr	r3, [r3, #4]
   1d968:	cmp	r2, r3
   1d96c:	bge	1c04c <GetDataSlab+0x130>
   1d970:	mov	r3, #0
   1d974:	b	1d994 <GetDataSlab+0x1a78>
   1d978:	ldr	ip, [r9]
   1d97c:	mul	ip, ip, r3
   1d980:	add	r3, r3, #1
   1d984:	add	ip, r1, ip, lsl #2
   1d988:	vldr	s15, [ip]
   1d98c:	vcvt.u32.f32	s15, s15
   1d990:	vstmia	r0!, {s15}
   1d994:	ldr	ip, [sp, #204]	; 0xcc
   1d998:	ldr	ip, [ip]
   1d99c:	cmp	r3, ip
   1d9a0:	blt	1d978 <GetDataSlab+0x1a5c>
   1d9a4:	ldr	r3, [fp]
   1d9a8:	ldr	ip, [r9, #4]
   1d9ac:	add	r2, r2, #1
   1d9b0:	lsl	r3, r3, #2
   1d9b4:	mla	r1, ip, r3, r1
   1d9b8:	b	1d960 <GetDataSlab+0x1a44>
   1d9bc:	mla	r3, r2, r3, r0
   1d9c0:	ldr	r2, [sp, #8]
   1d9c4:	ldr	r0, [sp]
   1d9c8:	add	r1, r2, r3, lsl #2
   1d9cc:	mov	r2, #0
   1d9d0:	ldr	r3, [sp, #204]	; 0xcc
   1d9d4:	ldr	r3, [r3, #4]
   1d9d8:	cmp	r2, r3
   1d9dc:	bge	1c04c <GetDataSlab+0x130>
   1d9e0:	mov	r3, #0
   1d9e4:	b	1d9fc <GetDataSlab+0x1ae0>
   1d9e8:	ldr	ip, [r9]
   1d9ec:	mul	ip, ip, r3
   1d9f0:	add	r3, r3, #1
   1d9f4:	ldr	ip, [r1, ip, lsl #2]
   1d9f8:	str	ip, [r0], #4
   1d9fc:	ldr	ip, [sp, #204]	; 0xcc
   1da00:	ldr	ip, [ip]
   1da04:	cmp	r3, ip
   1da08:	blt	1d9e8 <GetDataSlab+0x1acc>
   1da0c:	ldr	r3, [fp]
   1da10:	ldr	ip, [r9, #4]
   1da14:	add	r2, r2, #1
   1da18:	lsl	r3, r3, #2
   1da1c:	mla	r1, ip, r3, r1
   1da20:	b	1d9d0 <GetDataSlab+0x1ab4>
   1da24:	mla	r3, r2, r3, r0
   1da28:	ldr	r2, [sp, #8]
   1da2c:	ldr	r0, [sp]
   1da30:	add	r1, r2, r3, lsl #2
   1da34:	mov	r2, #0
   1da38:	ldr	r3, [sp, #204]	; 0xcc
   1da3c:	ldr	r3, [r3, #4]
   1da40:	cmp	r2, r3
   1da44:	bge	1c04c <GetDataSlab+0x130>
   1da48:	mov	r3, #0
   1da4c:	b	1da64 <GetDataSlab+0x1b48>
   1da50:	ldr	ip, [r9]
   1da54:	mul	ip, ip, r3
   1da58:	add	r3, r3, #1
   1da5c:	ldr	ip, [r1, ip, lsl #2]
   1da60:	str	ip, [r0], #4
   1da64:	ldr	ip, [sp, #204]	; 0xcc
   1da68:	ldr	ip, [ip]
   1da6c:	cmp	r3, ip
   1da70:	blt	1da50 <GetDataSlab+0x1b34>
   1da74:	ldr	r3, [fp]
   1da78:	ldr	ip, [r9, #4]
   1da7c:	add	r2, r2, #1
   1da80:	lsl	r3, r3, #2
   1da84:	mla	r1, ip, r3, r1
   1da88:	b	1da38 <GetDataSlab+0x1b1c>
   1da8c:	mla	r3, r2, r3, r0
   1da90:	ldr	r2, [sp, #8]
   1da94:	ldr	r0, [sp]
   1da98:	add	r1, r2, r3, lsl #1
   1da9c:	mov	r2, #0
   1daa0:	ldr	r3, [sp, #204]	; 0xcc
   1daa4:	ldr	r3, [r3, #4]
   1daa8:	cmp	r2, r3
   1daac:	bge	1c04c <GetDataSlab+0x130>
   1dab0:	mov	r3, #0
   1dab4:	b	1dad0 <GetDataSlab+0x1bb4>
   1dab8:	ldr	ip, [r9]
   1dabc:	mul	ip, ip, r3
   1dac0:	add	r3, r3, #1
   1dac4:	lsl	ip, ip, #1
   1dac8:	ldrsh	ip, [r1, ip]
   1dacc:	str	ip, [r0], #4
   1dad0:	ldr	ip, [sp, #204]	; 0xcc
   1dad4:	ldr	ip, [ip]
   1dad8:	cmp	r3, ip
   1dadc:	blt	1dab8 <GetDataSlab+0x1b9c>
   1dae0:	ldr	r3, [fp]
   1dae4:	ldr	ip, [r9, #4]
   1dae8:	add	r2, r2, #1
   1daec:	lsl	r3, r3, #1
   1daf0:	mla	r1, ip, r3, r1
   1daf4:	b	1daa0 <GetDataSlab+0x1b84>
   1daf8:	mla	r3, r2, r3, r0
   1dafc:	ldr	r2, [sp, #8]
   1db00:	ldr	r0, [sp]
   1db04:	add	r1, r2, r3, lsl #1
   1db08:	mov	r2, #0
   1db0c:	ldr	r3, [sp, #204]	; 0xcc
   1db10:	ldr	r3, [r3, #4]
   1db14:	cmp	r2, r3
   1db18:	bge	1c04c <GetDataSlab+0x130>
   1db1c:	mov	r3, #0
   1db20:	b	1db3c <GetDataSlab+0x1c20>
   1db24:	ldr	ip, [r9]
   1db28:	mul	ip, ip, r3
   1db2c:	add	r3, r3, #1
   1db30:	lsl	ip, ip, #1
   1db34:	ldrh	ip, [r1, ip]
   1db38:	str	ip, [r0], #4
   1db3c:	ldr	ip, [sp, #204]	; 0xcc
   1db40:	ldr	ip, [ip]
   1db44:	cmp	r3, ip
   1db48:	blt	1db24 <GetDataSlab+0x1c08>
   1db4c:	ldr	r3, [fp]
   1db50:	ldr	ip, [r9, #4]
   1db54:	add	r2, r2, #1
   1db58:	lsl	r3, r3, #1
   1db5c:	mla	r1, ip, r3, r1
   1db60:	b	1db0c <GetDataSlab+0x1bf0>
   1db64:	mla	r3, r2, r3, r0
   1db68:	ldr	r2, [sp, #8]
   1db6c:	ldr	r0, [sp]
   1db70:	add	r1, r2, r3
   1db74:	mov	r2, #0
   1db78:	ldr	r3, [sp, #204]	; 0xcc
   1db7c:	ldr	r3, [r3, #4]
   1db80:	cmp	r2, r3
   1db84:	bge	1c04c <GetDataSlab+0x130>
   1db88:	mov	r3, #0
   1db8c:	b	1dba4 <GetDataSlab+0x1c88>
   1db90:	ldr	ip, [r9]
   1db94:	mul	ip, ip, r3
   1db98:	add	r3, r3, #1
   1db9c:	ldrsb	ip, [r1, ip]
   1dba0:	str	ip, [r0], #4
   1dba4:	ldr	ip, [sp, #204]	; 0xcc
   1dba8:	ldr	ip, [ip]
   1dbac:	cmp	r3, ip
   1dbb0:	blt	1db90 <GetDataSlab+0x1c74>
   1dbb4:	ldr	r3, [r9, #4]
   1dbb8:	ldr	ip, [fp]
   1dbbc:	add	r2, r2, #1
   1dbc0:	mla	r1, ip, r3, r1
   1dbc4:	b	1db78 <GetDataSlab+0x1c5c>
   1dbc8:	mla	r3, r2, r3, r0
   1dbcc:	ldr	r2, [sp, #8]
   1dbd0:	ldr	r0, [sp]
   1dbd4:	add	r1, r2, r3
   1dbd8:	mov	r2, #0
   1dbdc:	ldr	r3, [sp, #204]	; 0xcc
   1dbe0:	ldr	r3, [r3, #4]
   1dbe4:	cmp	r2, r3
   1dbe8:	bge	1c04c <GetDataSlab+0x130>
   1dbec:	mov	r3, #0
   1dbf0:	b	1dc08 <GetDataSlab+0x1cec>
   1dbf4:	ldr	ip, [r9]
   1dbf8:	mul	ip, ip, r3
   1dbfc:	add	r3, r3, #1
   1dc00:	ldrb	ip, [r1, ip]
   1dc04:	str	ip, [r0], #4
   1dc08:	ldr	ip, [sp, #204]	; 0xcc
   1dc0c:	ldr	ip, [ip]
   1dc10:	cmp	r3, ip
   1dc14:	blt	1dbf4 <GetDataSlab+0x1cd8>
   1dc18:	ldr	r3, [r9, #4]
   1dc1c:	ldr	ip, [fp]
   1dc20:	add	r2, r2, #1
   1dc24:	mla	r1, ip, r3, r1
   1dc28:	b	1dbdc <GetDataSlab+0x1cc0>
   1dc2c:	cmp	r5, #12
   1dc30:	bne	1dc9c <GetDataSlab+0x1d80>
   1dc34:	mla	r3, r2, r3, r0
   1dc38:	ldr	r2, [sp, #8]
   1dc3c:	ldr	r0, [sp]
   1dc40:	add	r1, r2, r3, lsl #3
   1dc44:	mov	r2, #0
   1dc48:	ldr	r3, [sp, #204]	; 0xcc
   1dc4c:	ldr	r3, [r3, #4]
   1dc50:	cmp	r2, r3
   1dc54:	bge	1c04c <GetDataSlab+0x130>
   1dc58:	mov	r3, #0
   1dc5c:	b	1dc74 <GetDataSlab+0x1d58>
   1dc60:	ldr	ip, [r9]
   1dc64:	mul	ip, ip, r3
   1dc68:	add	r3, r3, #1
   1dc6c:	ldr	ip, [r1, ip, lsl #3]
   1dc70:	str	ip, [r0], #4
   1dc74:	ldr	ip, [sp, #204]	; 0xcc
   1dc78:	ldr	ip, [ip]
   1dc7c:	cmp	r3, ip
   1dc80:	blt	1dc60 <GetDataSlab+0x1d44>
   1dc84:	ldr	r3, [fp]
   1dc88:	ldr	ip, [r9, #4]
   1dc8c:	add	r2, r2, #1
   1dc90:	lsl	r3, r3, #3
   1dc94:	mla	r1, ip, r3, r1
   1dc98:	b	1dc48 <GetDataSlab+0x1d2c>
   1dc9c:	cmp	r5, #13
   1dca0:	bne	337fc <GetDataSlab+0x178e0>
   1dca4:	mla	r3, r2, r3, r0
   1dca8:	ldr	r2, [sp, #8]
   1dcac:	ldr	r0, [sp]
   1dcb0:	add	r1, r2, r3, lsl #3
   1dcb4:	mov	r2, #0
   1dcb8:	ldr	r3, [sp, #204]	; 0xcc
   1dcbc:	ldr	r3, [r3, #4]
   1dcc0:	cmp	r2, r3
   1dcc4:	bge	1c04c <GetDataSlab+0x130>
   1dcc8:	mov	r3, #0
   1dccc:	b	1dce4 <GetDataSlab+0x1dc8>
   1dcd0:	ldr	ip, [r9]
   1dcd4:	mul	ip, ip, r3
   1dcd8:	add	r3, r3, #1
   1dcdc:	ldr	ip, [r1, ip, lsl #3]
   1dce0:	str	ip, [r0], #4
   1dce4:	ldr	ip, [sp, #204]	; 0xcc
   1dce8:	ldr	ip, [ip]
   1dcec:	cmp	r3, ip
   1dcf0:	blt	1dcd0 <GetDataSlab+0x1db4>
   1dcf4:	ldr	r3, [fp]
   1dcf8:	ldr	ip, [r9, #4]
   1dcfc:	add	r2, r2, #1
   1dd00:	lsl	r3, r3, #3
   1dd04:	mla	r1, ip, r3, r1
   1dd08:	b	1dcb8 <GetDataSlab+0x1d9c>
   1dd0c:	sub	lr, r5, #1
   1dd10:	cmp	lr, #8
   1dd14:	addls	pc, pc, lr, lsl #2
   1dd18:	b	1e0a8 <GetDataSlab+0x218c>
   1dd1c:	b	1dfe0 <GetDataSlab+0x20c4>
   1dd20:	b	1e044 <GetDataSlab+0x2128>
   1dd24:	b	1df00 <GetDataSlab+0x1fe4>
   1dd28:	b	1df70 <GetDataSlab+0x2054>
   1dd2c:	b	1de20 <GetDataSlab+0x1f04>
   1dd30:	b	1de90 <GetDataSlab+0x1f74>
   1dd34:	b	1ddb0 <GetDataSlab+0x1e94>
   1dd38:	b	1e0a8 <GetDataSlab+0x218c>
   1dd3c:	b	1dd40 <GetDataSlab+0x1e24>
   1dd40:	mla	r2, r2, r3, r0
   1dd44:	lsl	r3, r3, #3
   1dd48:	ldr	r0, [sp, #8]
   1dd4c:	mul	r7, ip, r3
   1dd50:	bic	r3, r4, r4, asr #31
   1dd54:	lsl	r6, r1, #3
   1dd58:	ldr	r1, [sp]
   1dd5c:	add	r0, r0, r2, lsl #3
   1dd60:	lsl	r5, r3, #1
   1dd64:	mov	ip, #0
   1dd68:	cmp	ip, sl
   1dd6c:	bge	1c04c <GetDataSlab+0x130>
   1dd70:	mov	r3, r0
   1dd74:	mov	lr, r1
   1dd78:	mov	r2, #0
   1dd7c:	b	1dd98 <GetDataSlab+0x1e7c>
   1dd80:	vldr	d7, [r3]
   1dd84:	add	r2, r2, #1
   1dd88:	add	r3, r3, r6
   1dd8c:	vcvt.s32.f64	s15, d7
   1dd90:	vmov	r8, s15
   1dd94:	strh	r8, [lr], #2
   1dd98:	cmp	r2, r4
   1dd9c:	blt	1dd80 <GetDataSlab+0x1e64>
   1dda0:	add	r1, r1, r5
   1dda4:	add	r0, r0, r7
   1dda8:	add	ip, ip, #1
   1ddac:	b	1dd68 <GetDataSlab+0x1e4c>
   1ddb0:	mla	r2, r2, r3, r0
   1ddb4:	lsl	r3, r3, #2
   1ddb8:	ldr	r0, [sp, #8]
   1ddbc:	mul	r6, ip, r3
   1ddc0:	bic	r3, r4, r4, asr #31
   1ddc4:	lsl	r7, r1, #2
   1ddc8:	ldr	r1, [sp]
   1ddcc:	add	r0, r0, r2, lsl #2
   1ddd0:	lsl	r5, r3, #1
   1ddd4:	mov	ip, #0
   1ddd8:	cmp	ip, sl
   1dddc:	bge	1c04c <GetDataSlab+0x130>
   1dde0:	mov	r3, r0
   1dde4:	mov	lr, r1
   1dde8:	mov	r2, #0
   1ddec:	b	1de08 <GetDataSlab+0x1eec>
   1ddf0:	vldr	s15, [r3]
   1ddf4:	add	r2, r2, #1
   1ddf8:	add	r3, r3, r7
   1ddfc:	vcvt.s32.f32	s15, s15
   1de00:	vmov	r8, s15
   1de04:	strh	r8, [lr], #2
   1de08:	cmp	r2, r4
   1de0c:	blt	1ddf0 <GetDataSlab+0x1ed4>
   1de10:	add	r1, r1, r5
   1de14:	add	r0, r0, r6
   1de18:	add	ip, ip, #1
   1de1c:	b	1ddd8 <GetDataSlab+0x1ebc>
   1de20:	mla	r2, r2, r3, r0
   1de24:	lsl	r3, r3, #2
   1de28:	ldr	r0, [sp, #8]
   1de2c:	mul	r7, ip, r3
   1de30:	bic	r3, r4, r4, asr #31
   1de34:	lsl	r8, r1, #2
   1de38:	lsl	r6, r3, #1
   1de3c:	mvn	r3, #3
   1de40:	add	r0, r0, r2, lsl #2
   1de44:	mul	r5, r3, r1
   1de48:	ldr	r1, [sp]
   1de4c:	mov	ip, #0
   1de50:	cmp	ip, sl
   1de54:	bge	1c04c <GetDataSlab+0x130>
   1de58:	mov	r3, r0
   1de5c:	mov	lr, r1
   1de60:	mov	r2, #0
   1de64:	b	1de74 <GetDataSlab+0x1f58>
   1de68:	ldr	r9, [r3, r5]
   1de6c:	add	r2, r2, #1
   1de70:	strh	r9, [lr], #2
   1de74:	cmp	r2, r4
   1de78:	add	r3, r3, r8
   1de7c:	blt	1de68 <GetDataSlab+0x1f4c>
   1de80:	add	r1, r1, r6
   1de84:	add	r0, r0, r7
   1de88:	add	ip, ip, #1
   1de8c:	b	1de50 <GetDataSlab+0x1f34>
   1de90:	mla	r2, r2, r3, r0
   1de94:	lsl	r3, r3, #2
   1de98:	ldr	r0, [sp, #8]
   1de9c:	mul	r7, ip, r3
   1dea0:	bic	r3, r4, r4, asr #31
   1dea4:	lsl	r8, r1, #2
   1dea8:	lsl	r6, r3, #1
   1deac:	mvn	r3, #3
   1deb0:	add	r0, r0, r2, lsl #2
   1deb4:	mul	r5, r3, r1
   1deb8:	ldr	r1, [sp]
   1debc:	mov	ip, #0
   1dec0:	cmp	ip, sl
   1dec4:	bge	1c04c <GetDataSlab+0x130>
   1dec8:	mov	r3, r0
   1decc:	mov	lr, r1
   1ded0:	mov	r2, #0
   1ded4:	b	1dee4 <GetDataSlab+0x1fc8>
   1ded8:	ldr	r9, [r3, r5]
   1dedc:	add	r2, r2, #1
   1dee0:	strh	r9, [lr], #2
   1dee4:	cmp	r2, r4
   1dee8:	add	r3, r3, r8
   1deec:	blt	1ded8 <GetDataSlab+0x1fbc>
   1def0:	add	r1, r1, r6
   1def4:	add	r0, r0, r7
   1def8:	add	ip, ip, #1
   1defc:	b	1dec0 <GetDataSlab+0x1fa4>
   1df00:	mla	r2, r2, r3, r0
   1df04:	lsl	r3, r3, #1
   1df08:	ldr	r0, [sp, #8]
   1df0c:	mul	r6, ip, r3
   1df10:	bic	r3, r4, r4, asr #31
   1df14:	add	r0, r0, r2, lsl #1
   1df18:	lsl	r5, r3, #1
   1df1c:	mvn	r3, #1
   1df20:	ldr	r2, [sp]
   1df24:	mul	r8, r3, r1
   1df28:	lsl	r7, r1, #1
   1df2c:	mov	ip, #0
   1df30:	cmp	ip, sl
   1df34:	bge	1c04c <GetDataSlab+0x130>
   1df38:	mov	r1, r0
   1df3c:	mov	lr, r2
   1df40:	mov	r3, #0
   1df44:	b	1df54 <GetDataSlab+0x2038>
   1df48:	ldrsh	r9, [r1, r8]
   1df4c:	add	r3, r3, #1
   1df50:	strh	r9, [lr], #2
   1df54:	cmp	r3, r4
   1df58:	add	r1, r1, r7
   1df5c:	blt	1df48 <GetDataSlab+0x202c>
   1df60:	add	r2, r2, r5
   1df64:	add	r0, r0, r6
   1df68:	add	ip, ip, #1
   1df6c:	b	1df30 <GetDataSlab+0x2014>
   1df70:	mla	r2, r2, r3, r0
   1df74:	lsl	r3, r3, #1
   1df78:	ldr	r0, [sp, #8]
   1df7c:	mul	r6, ip, r3
   1df80:	bic	r3, r4, r4, asr #31
   1df84:	add	r0, r0, r2, lsl #1
   1df88:	lsl	r5, r3, #1
   1df8c:	mvn	r3, #1
   1df90:	ldr	r2, [sp]
   1df94:	mul	r7, r3, r1
   1df98:	lsl	r8, r1, #1
   1df9c:	mov	ip, #0
   1dfa0:	cmp	ip, sl
   1dfa4:	bge	1c04c <GetDataSlab+0x130>
   1dfa8:	mov	r1, r0
   1dfac:	mov	lr, r2
   1dfb0:	mov	r3, #0
   1dfb4:	b	1dfc4 <GetDataSlab+0x20a8>
   1dfb8:	ldrh	r9, [r1, r7]
   1dfbc:	add	r3, r3, #1
   1dfc0:	strh	r9, [lr], #2
   1dfc4:	cmp	r3, r4
   1dfc8:	add	r1, r1, r8
   1dfcc:	blt	1dfb8 <GetDataSlab+0x209c>
   1dfd0:	add	r2, r2, r5
   1dfd4:	add	r0, r0, r6
   1dfd8:	add	ip, ip, #1
   1dfdc:	b	1dfa0 <GetDataSlab+0x2084>
   1dfe0:	mla	r2, r2, r3, r0
   1dfe4:	mul	r6, ip, r3
   1dfe8:	ldr	r0, [sp, #8]
   1dfec:	bic	r3, r4, r4, asr #31
   1dff0:	add	lr, r0, r2
   1dff4:	ldr	r2, [sp]
   1dff8:	lsl	r7, r3, #1
   1dffc:	mov	ip, #0
   1e000:	rsb	r8, r1, #0
   1e004:	cmp	ip, sl
   1e008:	bge	1c04c <GetDataSlab+0x130>
   1e00c:	mov	r0, lr
   1e010:	mov	r5, r2
   1e014:	mov	r3, #0
   1e018:	b	1e028 <GetDataSlab+0x210c>
   1e01c:	ldrsb	r9, [r0, r8]
   1e020:	add	r3, r3, #1
   1e024:	strh	r9, [r5], #2
   1e028:	cmp	r3, r4
   1e02c:	add	r0, r0, r1
   1e030:	blt	1e01c <GetDataSlab+0x2100>
   1e034:	add	r2, r2, r7
   1e038:	add	lr, lr, r6
   1e03c:	add	ip, ip, #1
   1e040:	b	1e004 <GetDataSlab+0x20e8>
   1e044:	mla	r2, r2, r3, r0
   1e048:	mul	r6, ip, r3
   1e04c:	ldr	r0, [sp, #8]
   1e050:	bic	r3, r4, r4, asr #31
   1e054:	add	lr, r0, r2
   1e058:	ldr	r2, [sp]
   1e05c:	lsl	r7, r3, #1
   1e060:	mov	ip, #0
   1e064:	rsb	r8, r1, #0
   1e068:	cmp	ip, sl
   1e06c:	bge	1c04c <GetDataSlab+0x130>
   1e070:	mov	r0, lr
   1e074:	mov	r5, r2
   1e078:	mov	r3, #0
   1e07c:	b	1e08c <GetDataSlab+0x2170>
   1e080:	ldrb	r9, [r0, r8]
   1e084:	add	r3, r3, #1
   1e088:	strh	r9, [r5], #2
   1e08c:	cmp	r3, r4
   1e090:	add	r0, r0, r1
   1e094:	blt	1e080 <GetDataSlab+0x2164>
   1e098:	add	r2, r2, r7
   1e09c:	add	lr, lr, r6
   1e0a0:	add	ip, ip, #1
   1e0a4:	b	1e068 <GetDataSlab+0x214c>
   1e0a8:	cmp	r5, #12
   1e0ac:	bne	1e120 <GetDataSlab+0x2204>
   1e0b0:	mla	r2, r2, r3, r0
   1e0b4:	lsl	r3, r3, #3
   1e0b8:	ldr	r0, [sp, #8]
   1e0bc:	mul	r6, ip, r3
   1e0c0:	bic	r3, r4, r4, asr #31
   1e0c4:	lsl	r8, r1, #3
   1e0c8:	lsl	r7, r3, #1
   1e0cc:	mvn	r3, #7
   1e0d0:	add	r0, r0, r2, lsl #3
   1e0d4:	mul	r5, r3, r1
   1e0d8:	ldr	r1, [sp]
   1e0dc:	mov	ip, #0
   1e0e0:	cmp	ip, sl
   1e0e4:	bge	1c04c <GetDataSlab+0x130>
   1e0e8:	mov	r3, r0
   1e0ec:	mov	lr, r1
   1e0f0:	mov	r2, #0
   1e0f4:	b	1e104 <GetDataSlab+0x21e8>
   1e0f8:	ldr	r9, [r3, r5]
   1e0fc:	add	r2, r2, #1
   1e100:	strh	r9, [lr], #2
   1e104:	cmp	r2, r4
   1e108:	add	r3, r3, r8
   1e10c:	blt	1e0f8 <GetDataSlab+0x21dc>
   1e110:	add	r1, r1, r7
   1e114:	add	r0, r0, r6
   1e118:	add	ip, ip, #1
   1e11c:	b	1e0e0 <GetDataSlab+0x21c4>
   1e120:	cmp	r5, #13
   1e124:	bne	337fc <GetDataSlab+0x178e0>
   1e128:	mla	r2, r2, r3, r0
   1e12c:	lsl	r3, r3, #3
   1e130:	ldr	r0, [sp, #8]
   1e134:	mul	r6, ip, r3
   1e138:	bic	r3, r4, r4, asr #31
   1e13c:	lsl	r7, r1, #3
   1e140:	lsl	r8, r3, #1
   1e144:	mvn	r3, #7
   1e148:	add	r0, r0, r2, lsl #3
   1e14c:	mul	r5, r3, r1
   1e150:	ldr	r1, [sp]
   1e154:	mov	ip, #0
   1e158:	cmp	ip, sl
   1e15c:	bge	1c04c <GetDataSlab+0x130>
   1e160:	mov	r3, r0
   1e164:	mov	lr, r1
   1e168:	mov	r2, #0
   1e16c:	b	1e17c <GetDataSlab+0x2260>
   1e170:	ldr	r9, [r3, r5]
   1e174:	add	r2, r2, #1
   1e178:	strh	r9, [lr], #2
   1e17c:	cmp	r2, r4
   1e180:	add	r3, r3, r7
   1e184:	blt	1e170 <GetDataSlab+0x2254>
   1e188:	add	r1, r1, r8
   1e18c:	add	r0, r0, r6
   1e190:	add	ip, ip, #1
   1e194:	b	1e158 <GetDataSlab+0x223c>
   1e198:	sub	lr, r5, #1
   1e19c:	cmp	lr, #8
   1e1a0:	addls	pc, pc, lr, lsl #2
   1e1a4:	b	1e534 <GetDataSlab+0x2618>
   1e1a8:	b	1e46c <GetDataSlab+0x2550>
   1e1ac:	b	1e4d0 <GetDataSlab+0x25b4>
   1e1b0:	b	1e38c <GetDataSlab+0x2470>
   1e1b4:	b	1e3fc <GetDataSlab+0x24e0>
   1e1b8:	b	1e2ac <GetDataSlab+0x2390>
   1e1bc:	b	1e31c <GetDataSlab+0x2400>
   1e1c0:	b	1e23c <GetDataSlab+0x2320>
   1e1c4:	b	1e534 <GetDataSlab+0x2618>
   1e1c8:	b	1e1cc <GetDataSlab+0x22b0>
   1e1cc:	mla	r2, r2, r3, r0
   1e1d0:	lsl	r3, r3, #3
   1e1d4:	ldr	r0, [sp, #8]
   1e1d8:	mul	r6, ip, r3
   1e1dc:	bic	r3, r4, r4, asr #31
   1e1e0:	lsl	r7, r1, #3
   1e1e4:	ldr	r1, [sp]
   1e1e8:	add	r0, r0, r2, lsl #3
   1e1ec:	lsl	r5, r3, #1
   1e1f0:	mov	ip, #0
   1e1f4:	cmp	ip, sl
   1e1f8:	bge	1c04c <GetDataSlab+0x130>
   1e1fc:	mov	r3, r0
   1e200:	mov	lr, r1
   1e204:	mov	r2, #0
   1e208:	b	1e224 <GetDataSlab+0x2308>
   1e20c:	vldr	d7, [r3]
   1e210:	add	r2, r2, #1
   1e214:	add	r3, r3, r7
   1e218:	vcvt.u32.f64	s15, d7
   1e21c:	vmov	r8, s15
   1e220:	strh	r8, [lr], #2
   1e224:	cmp	r2, r4
   1e228:	blt	1e20c <GetDataSlab+0x22f0>
   1e22c:	add	r1, r1, r5
   1e230:	add	r0, r0, r6
   1e234:	add	ip, ip, #1
   1e238:	b	1e1f4 <GetDataSlab+0x22d8>
   1e23c:	mla	r2, r2, r3, r0
   1e240:	lsl	r3, r3, #2
   1e244:	ldr	r0, [sp, #8]
   1e248:	mul	r5, ip, r3
   1e24c:	bic	r3, r4, r4, asr #31
   1e250:	lsl	r7, r1, #2
   1e254:	ldr	r1, [sp]
   1e258:	add	r0, r0, r2, lsl #2
   1e25c:	lsl	r6, r3, #1
   1e260:	mov	ip, #0
   1e264:	cmp	ip, sl
   1e268:	bge	1c04c <GetDataSlab+0x130>
   1e26c:	mov	r3, r0
   1e270:	mov	lr, r1
   1e274:	mov	r2, #0
   1e278:	b	1e294 <GetDataSlab+0x2378>
   1e27c:	vldr	s15, [r3]
   1e280:	add	r2, r2, #1
   1e284:	add	r3, r3, r7
   1e288:	vcvt.u32.f32	s15, s15
   1e28c:	vmov	r8, s15
   1e290:	strh	r8, [lr], #2
   1e294:	cmp	r2, r4
   1e298:	blt	1e27c <GetDataSlab+0x2360>
   1e29c:	add	r1, r1, r6
   1e2a0:	add	r0, r0, r5
   1e2a4:	add	ip, ip, #1
   1e2a8:	b	1e264 <GetDataSlab+0x2348>
   1e2ac:	mla	r2, r2, r3, r0
   1e2b0:	lsl	r3, r3, #2
   1e2b4:	ldr	r0, [sp, #8]
   1e2b8:	mul	r6, ip, r3
   1e2bc:	bic	r3, r4, r4, asr #31
   1e2c0:	lsl	r8, r1, #2
   1e2c4:	lsl	r7, r3, #1
   1e2c8:	mvn	r3, #3
   1e2cc:	add	r0, r0, r2, lsl #2
   1e2d0:	mul	r5, r3, r1
   1e2d4:	ldr	r1, [sp]
   1e2d8:	mov	ip, #0
   1e2dc:	cmp	ip, sl
   1e2e0:	bge	1c04c <GetDataSlab+0x130>
   1e2e4:	mov	r3, r0
   1e2e8:	mov	lr, r1
   1e2ec:	mov	r2, #0
   1e2f0:	b	1e300 <GetDataSlab+0x23e4>
   1e2f4:	ldr	r9, [r3, r5]
   1e2f8:	add	r2, r2, #1
   1e2fc:	strh	r9, [lr], #2
   1e300:	cmp	r2, r4
   1e304:	add	r3, r3, r8
   1e308:	blt	1e2f4 <GetDataSlab+0x23d8>
   1e30c:	add	r1, r1, r7
   1e310:	add	r0, r0, r6
   1e314:	add	ip, ip, #1
   1e318:	b	1e2dc <GetDataSlab+0x23c0>
   1e31c:	mla	r2, r2, r3, r0
   1e320:	lsl	r3, r3, #2
   1e324:	ldr	r0, [sp, #8]
   1e328:	mul	r6, ip, r3
   1e32c:	bic	r3, r4, r4, asr #31
   1e330:	lsl	r8, r1, #2
   1e334:	lsl	r7, r3, #1
   1e338:	mvn	r3, #3
   1e33c:	add	r0, r0, r2, lsl #2
   1e340:	mul	r5, r3, r1
   1e344:	ldr	r1, [sp]
   1e348:	mov	ip, #0
   1e34c:	cmp	ip, sl
   1e350:	bge	1c04c <GetDataSlab+0x130>
   1e354:	mov	r3, r0
   1e358:	mov	lr, r1
   1e35c:	mov	r2, #0
   1e360:	b	1e370 <GetDataSlab+0x2454>
   1e364:	ldr	r9, [r3, r5]
   1e368:	add	r2, r2, #1
   1e36c:	strh	r9, [lr], #2
   1e370:	cmp	r2, r4
   1e374:	add	r3, r3, r8
   1e378:	blt	1e364 <GetDataSlab+0x2448>
   1e37c:	add	r1, r1, r7
   1e380:	add	r0, r0, r6
   1e384:	add	ip, ip, #1
   1e388:	b	1e34c <GetDataSlab+0x2430>
   1e38c:	mla	r2, r2, r3, r0
   1e390:	lsl	r3, r3, #1
   1e394:	ldr	r0, [sp, #8]
   1e398:	mul	r7, ip, r3
   1e39c:	bic	r3, r4, r4, asr #31
   1e3a0:	add	r0, r0, r2, lsl #1
   1e3a4:	lsl	r6, r3, #1
   1e3a8:	mvn	r3, #1
   1e3ac:	ldr	r2, [sp]
   1e3b0:	mul	r8, r3, r1
   1e3b4:	lsl	r5, r1, #1
   1e3b8:	mov	ip, #0
   1e3bc:	cmp	ip, sl
   1e3c0:	bge	1c04c <GetDataSlab+0x130>
   1e3c4:	mov	r1, r0
   1e3c8:	mov	lr, r2
   1e3cc:	mov	r3, #0
   1e3d0:	b	1e3e0 <GetDataSlab+0x24c4>
   1e3d4:	ldrh	r9, [r1, r8]
   1e3d8:	add	r3, r3, #1
   1e3dc:	strh	r9, [lr], #2
   1e3e0:	cmp	r3, r4
   1e3e4:	add	r1, r1, r5
   1e3e8:	blt	1e3d4 <GetDataSlab+0x24b8>
   1e3ec:	add	r2, r2, r6
   1e3f0:	add	r0, r0, r7
   1e3f4:	add	ip, ip, #1
   1e3f8:	b	1e3bc <GetDataSlab+0x24a0>
   1e3fc:	mla	r2, r2, r3, r0
   1e400:	lsl	r3, r3, #1
   1e404:	ldr	r0, [sp, #8]
   1e408:	mul	r6, ip, r3
   1e40c:	bic	r3, r4, r4, asr #31
   1e410:	add	r0, r0, r2, lsl #1
   1e414:	lsl	r5, r3, #1
   1e418:	mvn	r3, #1
   1e41c:	ldr	r2, [sp]
   1e420:	mul	r7, r3, r1
   1e424:	lsl	r8, r1, #1
   1e428:	mov	ip, #0
   1e42c:	cmp	ip, sl
   1e430:	bge	1c04c <GetDataSlab+0x130>
   1e434:	mov	r1, r0
   1e438:	mov	lr, r2
   1e43c:	mov	r3, #0
   1e440:	b	1e450 <GetDataSlab+0x2534>
   1e444:	ldrh	r9, [r1, r7]
   1e448:	add	r3, r3, #1
   1e44c:	strh	r9, [lr], #2
   1e450:	cmp	r3, r4
   1e454:	add	r1, r1, r8
   1e458:	blt	1e444 <GetDataSlab+0x2528>
   1e45c:	add	r2, r2, r5
   1e460:	add	r0, r0, r6
   1e464:	add	ip, ip, #1
   1e468:	b	1e42c <GetDataSlab+0x2510>
   1e46c:	mla	r2, r2, r3, r0
   1e470:	mul	r7, ip, r3
   1e474:	ldr	r0, [sp, #8]
   1e478:	bic	r3, r4, r4, asr #31
   1e47c:	add	lr, r0, r2
   1e480:	ldr	r2, [sp]
   1e484:	lsl	r6, r3, #1
   1e488:	mov	ip, #0
   1e48c:	rsb	r8, r1, #0
   1e490:	cmp	ip, sl
   1e494:	bge	1c04c <GetDataSlab+0x130>
   1e498:	mov	r0, lr
   1e49c:	mov	r5, r2
   1e4a0:	mov	r3, #0
   1e4a4:	b	1e4b4 <GetDataSlab+0x2598>
   1e4a8:	ldrsb	r9, [r0, r8]
   1e4ac:	add	r3, r3, #1
   1e4b0:	strh	r9, [r5], #2
   1e4b4:	cmp	r3, r4
   1e4b8:	add	r0, r0, r1
   1e4bc:	blt	1e4a8 <GetDataSlab+0x258c>
   1e4c0:	add	r2, r2, r6
   1e4c4:	add	lr, lr, r7
   1e4c8:	add	ip, ip, #1
   1e4cc:	b	1e490 <GetDataSlab+0x2574>
   1e4d0:	mla	r2, r2, r3, r0
   1e4d4:	mul	r7, ip, r3
   1e4d8:	ldr	r0, [sp, #8]
   1e4dc:	bic	r3, r4, r4, asr #31
   1e4e0:	add	lr, r0, r2
   1e4e4:	ldr	r2, [sp]
   1e4e8:	lsl	r6, r3, #1
   1e4ec:	mov	ip, #0
   1e4f0:	rsb	r8, r1, #0
   1e4f4:	cmp	ip, sl
   1e4f8:	bge	1c04c <GetDataSlab+0x130>
   1e4fc:	mov	r0, lr
   1e500:	mov	r5, r2
   1e504:	mov	r3, #0
   1e508:	b	1e518 <GetDataSlab+0x25fc>
   1e50c:	ldrb	r9, [r0, r8]
   1e510:	add	r3, r3, #1
   1e514:	strh	r9, [r5], #2
   1e518:	cmp	r3, r4
   1e51c:	add	r0, r0, r1
   1e520:	blt	1e50c <GetDataSlab+0x25f0>
   1e524:	add	r2, r2, r6
   1e528:	add	lr, lr, r7
   1e52c:	add	ip, ip, #1
   1e530:	b	1e4f4 <GetDataSlab+0x25d8>
   1e534:	cmp	r5, #12
   1e538:	bne	1e5ac <GetDataSlab+0x2690>
   1e53c:	mla	r2, r2, r3, r0
   1e540:	lsl	r3, r3, #3
   1e544:	ldr	r0, [sp, #8]
   1e548:	mul	r7, ip, r3
   1e54c:	bic	r3, r4, r4, asr #31
   1e550:	lsl	r8, r1, #3
   1e554:	lsl	r6, r3, #1
   1e558:	mvn	r3, #7
   1e55c:	add	r0, r0, r2, lsl #3
   1e560:	mul	r5, r3, r1
   1e564:	ldr	r1, [sp]
   1e568:	mov	ip, #0
   1e56c:	cmp	ip, sl
   1e570:	bge	1c04c <GetDataSlab+0x130>
   1e574:	mov	r3, r0
   1e578:	mov	lr, r1
   1e57c:	mov	r2, #0
   1e580:	b	1e590 <GetDataSlab+0x2674>
   1e584:	ldr	r9, [r3, r5]
   1e588:	add	r2, r2, #1
   1e58c:	strh	r9, [lr], #2
   1e590:	cmp	r2, r4
   1e594:	add	r3, r3, r8
   1e598:	blt	1e584 <GetDataSlab+0x2668>
   1e59c:	add	r1, r1, r6
   1e5a0:	add	r0, r0, r7
   1e5a4:	add	ip, ip, #1
   1e5a8:	b	1e56c <GetDataSlab+0x2650>
   1e5ac:	cmp	r5, #13
   1e5b0:	bne	337fc <GetDataSlab+0x178e0>
   1e5b4:	mla	r2, r2, r3, r0
   1e5b8:	lsl	r3, r3, #3
   1e5bc:	ldr	r0, [sp, #8]
   1e5c0:	mul	r8, ip, r3
   1e5c4:	bic	r3, r4, r4, asr #31
   1e5c8:	lsl	r7, r1, #3
   1e5cc:	lsl	r6, r3, #1
   1e5d0:	mvn	r3, #7
   1e5d4:	add	r0, r0, r2, lsl #3
   1e5d8:	mul	r5, r3, r1
   1e5dc:	ldr	r1, [sp]
   1e5e0:	mov	ip, #0
   1e5e4:	cmp	ip, sl
   1e5e8:	bge	1c04c <GetDataSlab+0x130>
   1e5ec:	mov	r3, r0
   1e5f0:	mov	lr, r1
   1e5f4:	mov	r2, #0
   1e5f8:	b	1e608 <GetDataSlab+0x26ec>
   1e5fc:	ldr	r9, [r3, r5]
   1e600:	add	r2, r2, #1
   1e604:	strh	r9, [lr], #2
   1e608:	cmp	r2, r4
   1e60c:	add	r3, r3, r7
   1e610:	blt	1e5fc <GetDataSlab+0x26e0>
   1e614:	add	r1, r1, r6
   1e618:	add	r0, r0, r8
   1e61c:	add	ip, ip, #1
   1e620:	b	1e5e4 <GetDataSlab+0x26c8>
   1e624:	sub	r1, r5, #1
   1e628:	cmp	r1, #8
   1e62c:	addls	pc, pc, r1, lsl #2
   1e630:	b	1e9d0 <GetDataSlab+0x2ab4>
   1e634:	b	1e900 <GetDataSlab+0x29e4>
   1e638:	b	1e968 <GetDataSlab+0x2a4c>
   1e63c:	b	1e820 <GetDataSlab+0x2904>
   1e640:	b	1e890 <GetDataSlab+0x2974>
   1e644:	b	1e748 <GetDataSlab+0x282c>
   1e648:	b	1e7b4 <GetDataSlab+0x2898>
   1e64c:	b	1e6d0 <GetDataSlab+0x27b4>
   1e650:	b	1e9d0 <GetDataSlab+0x2ab4>
   1e654:	b	1e658 <GetDataSlab+0x273c>
   1e658:	mla	r3, r2, r3, r0
   1e65c:	ldr	r2, [sp, #8]
   1e660:	mov	r1, #0
   1e664:	add	r0, r2, r3, lsl #3
   1e668:	ldr	r2, [sp]
   1e66c:	ldr	r3, [sp, #204]	; 0xcc
   1e670:	ldr	r3, [r3, #4]
   1e674:	cmp	r1, r3
   1e678:	bge	1c04c <GetDataSlab+0x130>
   1e67c:	mov	r3, r2
   1e680:	b	1e6a0 <GetDataSlab+0x2784>
   1e684:	ldr	lr, [r9]
   1e688:	mul	ip, lr, ip
   1e68c:	add	ip, r0, ip, lsl #3
   1e690:	vldr	d7, [ip]
   1e694:	vcvt.s32.f64	s15, d7
   1e698:	vmov	ip, s15
   1e69c:	strb	ip, [r3], #1
   1e6a0:	ldr	lr, [sp, #204]	; 0xcc
   1e6a4:	sub	ip, r3, r2
   1e6a8:	ldr	lr, [lr]
   1e6ac:	cmp	lr, ip
   1e6b0:	bgt	1e684 <GetDataSlab+0x2768>
   1e6b4:	ldr	r2, [fp]
   1e6b8:	ldr	ip, [r9, #4]
   1e6bc:	add	r1, r1, #1
   1e6c0:	lsl	r2, r2, #3
   1e6c4:	mla	r0, ip, r2, r0
   1e6c8:	mov	r2, r3
   1e6cc:	b	1e66c <GetDataSlab+0x2750>
   1e6d0:	mla	r3, r2, r3, r0
   1e6d4:	ldr	r2, [sp, #8]
   1e6d8:	mov	r1, #0
   1e6dc:	add	r0, r2, r3, lsl #2
   1e6e0:	ldr	r2, [sp]
   1e6e4:	ldr	r3, [sp, #204]	; 0xcc
   1e6e8:	ldr	r3, [r3, #4]
   1e6ec:	cmp	r1, r3
   1e6f0:	bge	1c04c <GetDataSlab+0x130>
   1e6f4:	mov	r3, r2
   1e6f8:	b	1e718 <GetDataSlab+0x27fc>
   1e6fc:	ldr	lr, [r9]
   1e700:	mul	ip, lr, ip
   1e704:	add	ip, r0, ip, lsl #2
   1e708:	vldr	s15, [ip]
   1e70c:	vcvt.s32.f32	s15, s15
   1e710:	vmov	ip, s15
   1e714:	strb	ip, [r3], #1
   1e718:	ldr	lr, [sp, #204]	; 0xcc
   1e71c:	sub	ip, r3, r2
   1e720:	ldr	lr, [lr]
   1e724:	cmp	lr, ip
   1e728:	bgt	1e6fc <GetDataSlab+0x27e0>
   1e72c:	ldr	r2, [fp]
   1e730:	ldr	ip, [r9, #4]
   1e734:	add	r1, r1, #1
   1e738:	lsl	r2, r2, #2
   1e73c:	mla	r0, ip, r2, r0
   1e740:	mov	r2, r3
   1e744:	b	1e6e4 <GetDataSlab+0x27c8>
   1e748:	mla	r3, r2, r3, r0
   1e74c:	ldr	r2, [sp, #8]
   1e750:	mov	r1, #0
   1e754:	add	r0, r2, r3, lsl #2
   1e758:	ldr	r2, [sp]
   1e75c:	ldr	r3, [sp, #204]	; 0xcc
   1e760:	ldr	r3, [r3, #4]
   1e764:	cmp	r1, r3
   1e768:	bge	1c04c <GetDataSlab+0x130>
   1e76c:	mov	r3, r2
   1e770:	b	1e784 <GetDataSlab+0x2868>
   1e774:	ldr	lr, [r9]
   1e778:	mul	ip, lr, ip
   1e77c:	ldr	ip, [r0, ip, lsl #2]
   1e780:	strb	ip, [r3], #1
   1e784:	ldr	lr, [sp, #204]	; 0xcc
   1e788:	sub	ip, r3, r2
   1e78c:	ldr	lr, [lr]
   1e790:	cmp	lr, ip
   1e794:	bgt	1e774 <GetDataSlab+0x2858>
   1e798:	ldr	r2, [fp]
   1e79c:	ldr	ip, [r9, #4]
   1e7a0:	add	r1, r1, #1
   1e7a4:	lsl	r2, r2, #2
   1e7a8:	mla	r0, ip, r2, r0
   1e7ac:	mov	r2, r3
   1e7b0:	b	1e75c <GetDataSlab+0x2840>
   1e7b4:	mla	r3, r2, r3, r0
   1e7b8:	ldr	r2, [sp, #8]
   1e7bc:	mov	r1, #0
   1e7c0:	add	r0, r2, r3, lsl #2
   1e7c4:	ldr	r2, [sp]
   1e7c8:	ldr	r3, [sp, #204]	; 0xcc
   1e7cc:	ldr	r3, [r3, #4]
   1e7d0:	cmp	r1, r3
   1e7d4:	bge	1c04c <GetDataSlab+0x130>
   1e7d8:	mov	r3, r2
   1e7dc:	b	1e7f0 <GetDataSlab+0x28d4>
   1e7e0:	ldr	lr, [r9]
   1e7e4:	mul	ip, lr, ip
   1e7e8:	ldr	ip, [r0, ip, lsl #2]
   1e7ec:	strb	ip, [r3], #1
   1e7f0:	ldr	lr, [sp, #204]	; 0xcc
   1e7f4:	sub	ip, r3, r2
   1e7f8:	ldr	lr, [lr]
   1e7fc:	cmp	lr, ip
   1e800:	bgt	1e7e0 <GetDataSlab+0x28c4>
   1e804:	ldr	r2, [fp]
   1e808:	ldr	ip, [r9, #4]
   1e80c:	add	r1, r1, #1
   1e810:	lsl	r2, r2, #2
   1e814:	mla	r0, ip, r2, r0
   1e818:	mov	r2, r3
   1e81c:	b	1e7c8 <GetDataSlab+0x28ac>
   1e820:	mla	r3, r2, r3, r0
   1e824:	ldr	r2, [sp, #8]
   1e828:	mov	r1, #0
   1e82c:	add	r0, r2, r3, lsl #1
   1e830:	ldr	r2, [sp]
   1e834:	ldr	r3, [sp, #204]	; 0xcc
   1e838:	ldr	r3, [r3, #4]
   1e83c:	cmp	r1, r3
   1e840:	bge	1c04c <GetDataSlab+0x130>
   1e844:	mov	r3, r2
   1e848:	b	1e860 <GetDataSlab+0x2944>
   1e84c:	ldr	lr, [r9]
   1e850:	mul	ip, lr, ip
   1e854:	lsl	ip, ip, #1
   1e858:	ldrh	ip, [r0, ip]
   1e85c:	strb	ip, [r3], #1
   1e860:	ldr	lr, [sp, #204]	; 0xcc
   1e864:	sub	ip, r3, r2
   1e868:	ldr	lr, [lr]
   1e86c:	cmp	ip, lr
   1e870:	blt	1e84c <GetDataSlab+0x2930>
   1e874:	ldr	r2, [fp]
   1e878:	ldr	ip, [r9, #4]
   1e87c:	add	r1, r1, #1
   1e880:	lsl	r2, r2, #1
   1e884:	mla	r0, ip, r2, r0
   1e888:	mov	r2, r3
   1e88c:	b	1e834 <GetDataSlab+0x2918>
   1e890:	mla	r3, r2, r3, r0
   1e894:	ldr	r2, [sp, #8]
   1e898:	mov	r1, #0
   1e89c:	add	r0, r2, r3, lsl #1
   1e8a0:	ldr	r2, [sp]
   1e8a4:	ldr	r3, [sp, #204]	; 0xcc
   1e8a8:	ldr	r3, [r3, #4]
   1e8ac:	cmp	r1, r3
   1e8b0:	bge	1c04c <GetDataSlab+0x130>
   1e8b4:	mov	r3, r2
   1e8b8:	b	1e8d0 <GetDataSlab+0x29b4>
   1e8bc:	ldr	lr, [r9]
   1e8c0:	mul	ip, lr, ip
   1e8c4:	lsl	ip, ip, #1
   1e8c8:	ldrh	ip, [r0, ip]
   1e8cc:	strb	ip, [r3], #1
   1e8d0:	ldr	lr, [sp, #204]	; 0xcc
   1e8d4:	sub	ip, r3, r2
   1e8d8:	ldr	lr, [lr]
   1e8dc:	cmp	ip, lr
   1e8e0:	blt	1e8bc <GetDataSlab+0x29a0>
   1e8e4:	ldr	r2, [fp]
   1e8e8:	ldr	ip, [r9, #4]
   1e8ec:	add	r1, r1, #1
   1e8f0:	lsl	r2, r2, #1
   1e8f4:	mla	r0, ip, r2, r0
   1e8f8:	mov	r2, r3
   1e8fc:	b	1e8a4 <GetDataSlab+0x2988>
   1e900:	mla	r3, r2, r3, r0
   1e904:	ldr	r2, [sp, #8]
   1e908:	mov	r1, #0
   1e90c:	add	r0, r2, r3
   1e910:	ldr	r2, [sp]
   1e914:	ldr	r3, [sp, #204]	; 0xcc
   1e918:	ldr	r3, [r3, #4]
   1e91c:	cmp	r1, r3
   1e920:	bge	1c04c <GetDataSlab+0x130>
   1e924:	mov	r3, r2
   1e928:	b	1e93c <GetDataSlab+0x2a20>
   1e92c:	ldr	lr, [r9]
   1e930:	mul	ip, lr, ip
   1e934:	ldrsb	ip, [r0, ip]
   1e938:	strb	ip, [r3], #1
   1e93c:	ldr	lr, [sp, #204]	; 0xcc
   1e940:	sub	ip, r3, r2
   1e944:	ldr	lr, [lr]
   1e948:	cmp	ip, lr
   1e94c:	blt	1e92c <GetDataSlab+0x2a10>
   1e950:	ldr	r2, [r9, #4]
   1e954:	ldr	ip, [fp]
   1e958:	add	r1, r1, #1
   1e95c:	mla	r0, ip, r2, r0
   1e960:	mov	r2, r3
   1e964:	b	1e914 <GetDataSlab+0x29f8>
   1e968:	mla	r3, r2, r3, r0
   1e96c:	ldr	r2, [sp, #8]
   1e970:	mov	r1, #0
   1e974:	add	r0, r2, r3
   1e978:	ldr	r2, [sp]
   1e97c:	ldr	r3, [sp, #204]	; 0xcc
   1e980:	ldr	r3, [r3, #4]
   1e984:	cmp	r1, r3
   1e988:	bge	1c04c <GetDataSlab+0x130>
   1e98c:	mov	r3, r2
   1e990:	b	1e9a4 <GetDataSlab+0x2a88>
   1e994:	ldr	lr, [r9]
   1e998:	mul	ip, lr, ip
   1e99c:	ldrb	ip, [r0, ip]
   1e9a0:	strb	ip, [r3], #1
   1e9a4:	ldr	lr, [sp, #204]	; 0xcc
   1e9a8:	sub	ip, r3, r2
   1e9ac:	ldr	lr, [lr]
   1e9b0:	cmp	ip, lr
   1e9b4:	blt	1e994 <GetDataSlab+0x2a78>
   1e9b8:	ldr	r2, [r9, #4]
   1e9bc:	ldr	ip, [fp]
   1e9c0:	add	r1, r1, #1
   1e9c4:	mla	r0, ip, r2, r0
   1e9c8:	mov	r2, r3
   1e9cc:	b	1e97c <GetDataSlab+0x2a60>
   1e9d0:	cmp	r5, #12
   1e9d4:	bne	1ea44 <GetDataSlab+0x2b28>
   1e9d8:	mla	r3, r2, r3, r0
   1e9dc:	ldr	r2, [sp, #8]
   1e9e0:	mov	r1, #0
   1e9e4:	add	r0, r2, r3, lsl #3
   1e9e8:	ldr	r2, [sp]
   1e9ec:	ldr	r3, [sp, #204]	; 0xcc
   1e9f0:	ldr	r3, [r3, #4]
   1e9f4:	cmp	r1, r3
   1e9f8:	bge	1c04c <GetDataSlab+0x130>
   1e9fc:	mov	r3, r2
   1ea00:	b	1ea14 <GetDataSlab+0x2af8>
   1ea04:	ldr	lr, [r9]
   1ea08:	mul	ip, lr, ip
   1ea0c:	ldr	ip, [r0, ip, lsl #3]
   1ea10:	strb	ip, [r3], #1
   1ea14:	ldr	lr, [sp, #204]	; 0xcc
   1ea18:	sub	ip, r3, r2
   1ea1c:	ldr	lr, [lr]
   1ea20:	cmp	ip, lr
   1ea24:	blt	1ea04 <GetDataSlab+0x2ae8>
   1ea28:	ldr	r2, [fp]
   1ea2c:	ldr	ip, [r9, #4]
   1ea30:	add	r1, r1, #1
   1ea34:	lsl	r2, r2, #3
   1ea38:	mla	r0, ip, r2, r0
   1ea3c:	mov	r2, r3
   1ea40:	b	1e9ec <GetDataSlab+0x2ad0>
   1ea44:	cmp	r5, #13
   1ea48:	bne	337fc <GetDataSlab+0x178e0>
   1ea4c:	mla	r3, r2, r3, r0
   1ea50:	ldr	r2, [sp, #8]
   1ea54:	mov	r1, #0
   1ea58:	add	r0, r2, r3, lsl #3
   1ea5c:	ldr	r2, [sp]
   1ea60:	ldr	r3, [sp, #204]	; 0xcc
   1ea64:	ldr	r3, [r3, #4]
   1ea68:	cmp	r1, r3
   1ea6c:	bge	1c04c <GetDataSlab+0x130>
   1ea70:	mov	r3, r2
   1ea74:	b	1ea88 <GetDataSlab+0x2b6c>
   1ea78:	ldr	lr, [r9]
   1ea7c:	mul	ip, lr, ip
   1ea80:	ldr	ip, [r0, ip, lsl #3]
   1ea84:	strb	ip, [r3], #1
   1ea88:	ldr	lr, [sp, #204]	; 0xcc
   1ea8c:	sub	ip, r3, r2
   1ea90:	ldr	lr, [lr]
   1ea94:	cmp	ip, lr
   1ea98:	blt	1ea78 <GetDataSlab+0x2b5c>
   1ea9c:	ldr	r2, [fp]
   1eaa0:	ldr	ip, [r9, #4]
   1eaa4:	add	r1, r1, #1
   1eaa8:	lsl	r2, r2, #3
   1eaac:	mla	r0, ip, r2, r0
   1eab0:	mov	r2, r3
   1eab4:	b	1ea60 <GetDataSlab+0x2b44>
   1eab8:	sub	r1, r5, #1
   1eabc:	cmp	r1, #8
   1eac0:	addls	pc, pc, r1, lsl #2
   1eac4:	b	1ee64 <GetDataSlab+0x2f48>
   1eac8:	b	1ed94 <GetDataSlab+0x2e78>
   1eacc:	b	1edfc <GetDataSlab+0x2ee0>
   1ead0:	b	1ecb4 <GetDataSlab+0x2d98>
   1ead4:	b	1ed24 <GetDataSlab+0x2e08>
   1ead8:	b	1ebdc <GetDataSlab+0x2cc0>
   1eadc:	b	1ec48 <GetDataSlab+0x2d2c>
   1eae0:	b	1eb64 <GetDataSlab+0x2c48>
   1eae4:	b	1ee64 <GetDataSlab+0x2f48>
   1eae8:	b	1eaec <GetDataSlab+0x2bd0>
   1eaec:	mla	r3, r2, r3, r0
   1eaf0:	ldr	r2, [sp, #8]
   1eaf4:	mov	r1, #0
   1eaf8:	add	r0, r2, r3, lsl #3
   1eafc:	ldr	r2, [sp]
   1eb00:	ldr	r3, [sp, #204]	; 0xcc
   1eb04:	ldr	r3, [r3, #4]
   1eb08:	cmp	r1, r3
   1eb0c:	bge	1c04c <GetDataSlab+0x130>
   1eb10:	mov	r3, r2
   1eb14:	b	1eb34 <GetDataSlab+0x2c18>
   1eb18:	ldr	lr, [r9]
   1eb1c:	mul	ip, lr, ip
   1eb20:	add	ip, r0, ip, lsl #3
   1eb24:	vldr	d7, [ip]
   1eb28:	vcvt.u32.f64	s15, d7
   1eb2c:	vmov	ip, s15
   1eb30:	strb	ip, [r3], #1
   1eb34:	ldr	lr, [sp, #204]	; 0xcc
   1eb38:	sub	ip, r3, r2
   1eb3c:	ldr	lr, [lr]
   1eb40:	cmp	lr, ip
   1eb44:	bgt	1eb18 <GetDataSlab+0x2bfc>
   1eb48:	ldr	r2, [fp]
   1eb4c:	ldr	ip, [r9, #4]
   1eb50:	add	r1, r1, #1
   1eb54:	lsl	r2, r2, #3
   1eb58:	mla	r0, ip, r2, r0
   1eb5c:	mov	r2, r3
   1eb60:	b	1eb00 <GetDataSlab+0x2be4>
   1eb64:	mla	r3, r2, r3, r0
   1eb68:	ldr	r2, [sp, #8]
   1eb6c:	mov	r1, #0
   1eb70:	add	r0, r2, r3, lsl #2
   1eb74:	ldr	r2, [sp]
   1eb78:	ldr	r3, [sp, #204]	; 0xcc
   1eb7c:	ldr	r3, [r3, #4]
   1eb80:	cmp	r1, r3
   1eb84:	bge	1c04c <GetDataSlab+0x130>
   1eb88:	mov	r3, r2
   1eb8c:	b	1ebac <GetDataSlab+0x2c90>
   1eb90:	ldr	lr, [r9]
   1eb94:	mul	ip, lr, ip
   1eb98:	add	ip, r0, ip, lsl #2
   1eb9c:	vldr	s15, [ip]
   1eba0:	vcvt.u32.f32	s15, s15
   1eba4:	vmov	ip, s15
   1eba8:	strb	ip, [r3], #1
   1ebac:	ldr	lr, [sp, #204]	; 0xcc
   1ebb0:	sub	ip, r3, r2
   1ebb4:	ldr	lr, [lr]
   1ebb8:	cmp	lr, ip
   1ebbc:	bgt	1eb90 <GetDataSlab+0x2c74>
   1ebc0:	ldr	r2, [fp]
   1ebc4:	ldr	ip, [r9, #4]
   1ebc8:	add	r1, r1, #1
   1ebcc:	lsl	r2, r2, #2
   1ebd0:	mla	r0, ip, r2, r0
   1ebd4:	mov	r2, r3
   1ebd8:	b	1eb78 <GetDataSlab+0x2c5c>
   1ebdc:	mla	r3, r2, r3, r0
   1ebe0:	ldr	r2, [sp, #8]
   1ebe4:	mov	r1, #0
   1ebe8:	add	r0, r2, r3, lsl #2
   1ebec:	ldr	r2, [sp]
   1ebf0:	ldr	r3, [sp, #204]	; 0xcc
   1ebf4:	ldr	r3, [r3, #4]
   1ebf8:	cmp	r1, r3
   1ebfc:	bge	1c04c <GetDataSlab+0x130>
   1ec00:	mov	r3, r2
   1ec04:	b	1ec18 <GetDataSlab+0x2cfc>
   1ec08:	ldr	lr, [r9]
   1ec0c:	mul	ip, lr, ip
   1ec10:	ldr	ip, [r0, ip, lsl #2]
   1ec14:	strb	ip, [r3], #1
   1ec18:	ldr	lr, [sp, #204]	; 0xcc
   1ec1c:	sub	ip, r3, r2
   1ec20:	ldr	lr, [lr]
   1ec24:	cmp	lr, ip
   1ec28:	bgt	1ec08 <GetDataSlab+0x2cec>
   1ec2c:	ldr	r2, [fp]
   1ec30:	ldr	ip, [r9, #4]
   1ec34:	add	r1, r1, #1
   1ec38:	lsl	r2, r2, #2
   1ec3c:	mla	r0, ip, r2, r0
   1ec40:	mov	r2, r3
   1ec44:	b	1ebf0 <GetDataSlab+0x2cd4>
   1ec48:	mla	r3, r2, r3, r0
   1ec4c:	ldr	r2, [sp, #8]
   1ec50:	mov	r1, #0
   1ec54:	add	r0, r2, r3, lsl #2
   1ec58:	ldr	r2, [sp]
   1ec5c:	ldr	r3, [sp, #204]	; 0xcc
   1ec60:	ldr	r3, [r3, #4]
   1ec64:	cmp	r1, r3
   1ec68:	bge	1c04c <GetDataSlab+0x130>
   1ec6c:	mov	r3, r2
   1ec70:	b	1ec84 <GetDataSlab+0x2d68>
   1ec74:	ldr	lr, [r9]
   1ec78:	mul	ip, lr, ip
   1ec7c:	ldr	ip, [r0, ip, lsl #2]
   1ec80:	strb	ip, [r3], #1
   1ec84:	ldr	lr, [sp, #204]	; 0xcc
   1ec88:	sub	ip, r3, r2
   1ec8c:	ldr	lr, [lr]
   1ec90:	cmp	lr, ip
   1ec94:	bgt	1ec74 <GetDataSlab+0x2d58>
   1ec98:	ldr	r2, [fp]
   1ec9c:	ldr	ip, [r9, #4]
   1eca0:	add	r1, r1, #1
   1eca4:	lsl	r2, r2, #2
   1eca8:	mla	r0, ip, r2, r0
   1ecac:	mov	r2, r3
   1ecb0:	b	1ec5c <GetDataSlab+0x2d40>
   1ecb4:	mla	r3, r2, r3, r0
   1ecb8:	ldr	r2, [sp, #8]
   1ecbc:	mov	r1, #0
   1ecc0:	add	r0, r2, r3, lsl #1
   1ecc4:	ldr	r2, [sp]
   1ecc8:	ldr	r3, [sp, #204]	; 0xcc
   1eccc:	ldr	r3, [r3, #4]
   1ecd0:	cmp	r1, r3
   1ecd4:	bge	1c04c <GetDataSlab+0x130>
   1ecd8:	mov	r3, r2
   1ecdc:	b	1ecf4 <GetDataSlab+0x2dd8>
   1ece0:	ldr	lr, [r9]
   1ece4:	mul	ip, lr, ip
   1ece8:	lsl	ip, ip, #1
   1ecec:	ldrh	ip, [r0, ip]
   1ecf0:	strb	ip, [r3], #1
   1ecf4:	ldr	lr, [sp, #204]	; 0xcc
   1ecf8:	sub	ip, r3, r2
   1ecfc:	ldr	lr, [lr]
   1ed00:	cmp	lr, ip
   1ed04:	bgt	1ece0 <GetDataSlab+0x2dc4>
   1ed08:	ldr	r2, [fp]
   1ed0c:	ldr	ip, [r9, #4]
   1ed10:	add	r1, r1, #1
   1ed14:	lsl	r2, r2, #1
   1ed18:	mla	r0, ip, r2, r0
   1ed1c:	mov	r2, r3
   1ed20:	b	1ecc8 <GetDataSlab+0x2dac>
   1ed24:	mla	r3, r2, r3, r0
   1ed28:	ldr	r2, [sp, #8]
   1ed2c:	mov	r1, #0
   1ed30:	add	r0, r2, r3, lsl #1
   1ed34:	ldr	r2, [sp]
   1ed38:	ldr	r3, [sp, #204]	; 0xcc
   1ed3c:	ldr	r3, [r3, #4]
   1ed40:	cmp	r1, r3
   1ed44:	bge	1c04c <GetDataSlab+0x130>
   1ed48:	mov	r3, r2
   1ed4c:	b	1ed64 <GetDataSlab+0x2e48>
   1ed50:	ldr	lr, [r9]
   1ed54:	mul	ip, lr, ip
   1ed58:	lsl	ip, ip, #1
   1ed5c:	ldrh	ip, [r0, ip]
   1ed60:	strb	ip, [r3], #1
   1ed64:	ldr	lr, [sp, #204]	; 0xcc
   1ed68:	sub	ip, r3, r2
   1ed6c:	ldr	lr, [lr]
   1ed70:	cmp	lr, ip
   1ed74:	bgt	1ed50 <GetDataSlab+0x2e34>
   1ed78:	ldr	r2, [fp]
   1ed7c:	ldr	ip, [r9, #4]
   1ed80:	add	r1, r1, #1
   1ed84:	lsl	r2, r2, #1
   1ed88:	mla	r0, ip, r2, r0
   1ed8c:	mov	r2, r3
   1ed90:	b	1ed38 <GetDataSlab+0x2e1c>
   1ed94:	mla	r3, r2, r3, r0
   1ed98:	ldr	r2, [sp, #8]
   1ed9c:	mov	r1, #0
   1eda0:	add	r0, r2, r3
   1eda4:	ldr	r2, [sp]
   1eda8:	ldr	r3, [sp, #204]	; 0xcc
   1edac:	ldr	r3, [r3, #4]
   1edb0:	cmp	r1, r3
   1edb4:	bge	1c04c <GetDataSlab+0x130>
   1edb8:	mov	r3, r2
   1edbc:	b	1edd0 <GetDataSlab+0x2eb4>
   1edc0:	ldr	lr, [r9]
   1edc4:	mul	ip, lr, ip
   1edc8:	ldrb	ip, [r0, ip]
   1edcc:	strb	ip, [r3], #1
   1edd0:	ldr	lr, [sp, #204]	; 0xcc
   1edd4:	sub	ip, r3, r2
   1edd8:	ldr	lr, [lr]
   1eddc:	cmp	lr, ip
   1ede0:	bgt	1edc0 <GetDataSlab+0x2ea4>
   1ede4:	ldr	r2, [r9, #4]
   1ede8:	ldr	ip, [fp]
   1edec:	add	r1, r1, #1
   1edf0:	mla	r0, ip, r2, r0
   1edf4:	mov	r2, r3
   1edf8:	b	1eda8 <GetDataSlab+0x2e8c>
   1edfc:	mla	r3, r2, r3, r0
   1ee00:	ldr	r2, [sp, #8]
   1ee04:	mov	r1, #0
   1ee08:	add	r0, r2, r3
   1ee0c:	ldr	r2, [sp]
   1ee10:	ldr	r3, [sp, #204]	; 0xcc
   1ee14:	ldr	r3, [r3, #4]
   1ee18:	cmp	r1, r3
   1ee1c:	bge	1c04c <GetDataSlab+0x130>
   1ee20:	mov	r3, r2
   1ee24:	b	1ee38 <GetDataSlab+0x2f1c>
   1ee28:	ldr	lr, [r9]
   1ee2c:	mul	ip, lr, ip
   1ee30:	ldrb	ip, [r0, ip]
   1ee34:	strb	ip, [r3], #1
   1ee38:	ldr	lr, [sp, #204]	; 0xcc
   1ee3c:	sub	ip, r3, r2
   1ee40:	ldr	lr, [lr]
   1ee44:	cmp	lr, ip
   1ee48:	bgt	1ee28 <GetDataSlab+0x2f0c>
   1ee4c:	ldr	r2, [r9, #4]
   1ee50:	ldr	ip, [fp]
   1ee54:	add	r1, r1, #1
   1ee58:	mla	r0, ip, r2, r0
   1ee5c:	mov	r2, r3
   1ee60:	b	1ee10 <GetDataSlab+0x2ef4>
   1ee64:	cmp	r5, #12
   1ee68:	bne	1eed8 <GetDataSlab+0x2fbc>
   1ee6c:	mla	r3, r2, r3, r0
   1ee70:	ldr	r2, [sp, #8]
   1ee74:	mov	r1, #0
   1ee78:	add	r0, r2, r3, lsl #3
   1ee7c:	ldr	r2, [sp]
   1ee80:	ldr	r3, [sp, #204]	; 0xcc
   1ee84:	ldr	r3, [r3, #4]
   1ee88:	cmp	r1, r3
   1ee8c:	bge	1c04c <GetDataSlab+0x130>
   1ee90:	mov	r3, r2
   1ee94:	b	1eea8 <GetDataSlab+0x2f8c>
   1ee98:	ldr	lr, [r9]
   1ee9c:	mul	ip, lr, ip
   1eea0:	ldr	ip, [r0, ip, lsl #3]
   1eea4:	strb	ip, [r3], #1
   1eea8:	ldr	lr, [sp, #204]	; 0xcc
   1eeac:	sub	ip, r3, r2
   1eeb0:	ldr	lr, [lr]
   1eeb4:	cmp	lr, ip
   1eeb8:	bgt	1ee98 <GetDataSlab+0x2f7c>
   1eebc:	ldr	r2, [fp]
   1eec0:	ldr	ip, [r9, #4]
   1eec4:	add	r1, r1, #1
   1eec8:	lsl	r2, r2, #3
   1eecc:	mla	r0, ip, r2, r0
   1eed0:	mov	r2, r3
   1eed4:	b	1ee80 <GetDataSlab+0x2f64>
   1eed8:	cmp	r5, #13
   1eedc:	bne	337fc <GetDataSlab+0x178e0>
   1eee0:	mla	r3, r2, r3, r0
   1eee4:	ldr	r2, [sp, #8]
   1eee8:	mov	r1, #0
   1eeec:	add	r0, r2, r3, lsl #3
   1eef0:	ldr	r2, [sp]
   1eef4:	ldr	r3, [sp, #204]	; 0xcc
   1eef8:	ldr	r3, [r3, #4]
   1eefc:	cmp	r1, r3
   1ef00:	bge	1c04c <GetDataSlab+0x130>
   1ef04:	mov	r3, r2
   1ef08:	b	1ef1c <GetDataSlab+0x3000>
   1ef0c:	ldr	lr, [r9]
   1ef10:	mul	ip, lr, ip
   1ef14:	ldr	ip, [r0, ip, lsl #3]
   1ef18:	strb	ip, [r3], #1
   1ef1c:	ldr	lr, [sp, #204]	; 0xcc
   1ef20:	sub	ip, r3, r2
   1ef24:	ldr	lr, [lr]
   1ef28:	cmp	ip, lr
   1ef2c:	blt	1ef0c <GetDataSlab+0x2ff0>
   1ef30:	ldr	r2, [fp]
   1ef34:	ldr	ip, [r9, #4]
   1ef38:	add	r1, r1, #1
   1ef3c:	lsl	r2, r2, #3
   1ef40:	mla	r0, ip, r2, r0
   1ef44:	mov	r2, r3
   1ef48:	b	1eef4 <GetDataSlab+0x2fd8>
   1ef4c:	add	r4, sp, #32
   1ef50:	mov	r2, #40	; 0x28
   1ef54:	mov	r1, #0
   1ef58:	mov	r0, r4
   1ef5c:	add	sl, sp, #72	; 0x48
   1ef60:	bl	166c <memset@plt>
   1ef64:	mov	r2, #40	; 0x28
   1ef68:	mov	r1, #0
   1ef6c:	mov	r0, sl
   1ef70:	bl	166c <memset@plt>
   1ef74:	add	r3, sp, #112	; 0x70
   1ef78:	mov	r0, r3
   1ef7c:	mov	r2, #40	; 0x28
   1ef80:	mov	r1, #0
   1ef84:	str	r3, [sp, #4]
   1ef88:	bl	166c <memset@plt>
   1ef8c:	sub	r3, r7, #6
   1ef90:	cmp	r3, #9
   1ef94:	addls	pc, pc, r3, lsl #2
   1ef98:	b	337fc <GetDataSlab+0x178e0>
   1ef9c:	b	1efc4 <GetDataSlab+0x30a8>
   1efa0:	b	21108 <GetDataSlab+0x51ec>
   1efa4:	b	2f6e4 <GetDataSlab+0x137c8>
   1efa8:	b	31770 <GetDataSlab+0x15854>
   1efac:	b	2b54c <GetDataSlab+0xf630>
   1efb0:	b	2d618 <GetDataSlab+0x116fc>
   1efb4:	b	274c4 <GetDataSlab+0xb5a8>
   1efb8:	b	29508 <GetDataSlab+0xd5ec>
   1efbc:	b	2324c <GetDataSlab+0x7330>
   1efc0:	b	25388 <GetDataSlab+0x946c>
   1efc4:	sub	r3, r5, #1
   1efc8:	cmp	r3, #8
   1efcc:	addls	pc, pc, r3, lsl #2
   1efd0:	b	20a48 <GetDataSlab+0x4b2c>
   1efd4:	b	203c0 <GetDataSlab+0x44a4>
   1efd8:	b	20704 <GetDataSlab+0x47e8>
   1efdc:	b	1fd20 <GetDataSlab+0x3e04>
   1efe0:	b	20070 <GetDataSlab+0x4154>
   1efe4:	b	1f688 <GetDataSlab+0x376c>
   1efe8:	b	1f9d4 <GetDataSlab+0x3ab8>
   1efec:	b	1f33c <GetDataSlab+0x3420>
   1eff0:	b	20a48 <GetDataSlab+0x4b2c>
   1eff4:	b	1eff8 <GetDataSlab+0x30dc>
   1eff8:	ldr	r3, [r9]
   1effc:	ldr	ip, [sp, #4]
   1f000:	str	r3, [sp, #16]
   1f004:	sub	r3, r3, #1
   1f008:	str	r3, [sp, #32]
   1f00c:	ldr	r3, [fp]
   1f010:	mov	lr, fp
   1f014:	str	r3, [sp, #24]
   1f018:	str	r3, [sp, #112]	; 0x70
   1f01c:	ldr	r3, [sp, #204]	; 0xcc
   1f020:	mov	r6, #0
   1f024:	mov	r2, #1
   1f028:	ldr	r3, [r3]
   1f02c:	str	r3, [sp, #12]
   1f030:	str	r3, [sp, #20]
   1f034:	ldr	r3, [sp, #208]	; 0xd0
   1f038:	cmp	r2, r3
   1f03c:	blt	1f170 <GetDataSlab+0x3254>
   1f040:	ldr	r3, [sp, #8]
   1f044:	add	r5, r3, r6, lsl #3
   1f048:	ldr	r3, [sp, #16]
   1f04c:	cmp	r3, #1
   1f050:	moveq	r9, #0
   1f054:	beq	1f22c <GetDataSlab+0x3310>
   1f058:	ldr	r3, [sp, #16]
   1f05c:	ldr	r2, [sp, #12]
   1f060:	mov	r9, #0
   1f064:	mul	r3, r3, r2
   1f068:	ldr	r2, [sp, #24]
   1f06c:	sub	r3, r2, r3
   1f070:	str	r3, [sp, #8]
   1f074:	ldr	r3, [sp, #16]
   1f078:	ldr	r2, [sp, #16]
   1f07c:	lsl	fp, r3, #3
   1f080:	ldr	r3, [sp, #12]
   1f084:	bic	r3, r3, r3, asr #31
   1f088:	mul	r2, r2, r3
   1f08c:	mul	r3, r3, fp
   1f090:	str	r2, [sp, #24]
   1f094:	str	r3, [sp, #16]
   1f098:	ldr	r3, [sp, #20]
   1f09c:	cmp	r9, r3
   1f0a0:	bge	1c04c <GetDataSlab+0x130>
   1f0a4:	ldr	r3, [sp, #196]	; 0xc4
   1f0a8:	mov	r2, #0
   1f0ac:	ldr	r1, [r3]
   1f0b0:	ldr	r3, [sp]
   1f0b4:	cmp	r1, #0
   1f0b8:	addne	r5, r5, r1, lsl #3
   1f0bc:	add	r0, r3, r9, lsl #3
   1f0c0:	addne	r6, r6, r1
   1f0c4:	mov	r3, r5
   1f0c8:	ldr	ip, [sp, #12]
   1f0cc:	cmp	r2, ip
   1f0d0:	blt	1f2f4 <GetDataSlab+0x33d8>
   1f0d4:	ldr	r3, [sp, #8]
   1f0d8:	ldr	r8, [sp, #4]
   1f0dc:	sub	r2, r3, r1
   1f0e0:	ldr	r3, [sp, #24]
   1f0e4:	mov	r4, #1
   1f0e8:	add	r3, r3, r6
   1f0ec:	add	r6, r3, r2
   1f0f0:	ldr	r3, [sp, #16]
   1f0f4:	add	r3, r3, r2, lsl #3
   1f0f8:	add	r5, r5, r3
   1f0fc:	ldr	r3, [sp, #208]	; 0xd0
   1f100:	cmp	r4, r3
   1f104:	bge	1f330 <GetDataSlab+0x3414>
   1f108:	ldr	r3, [sl, r4, lsl #2]
   1f10c:	ldr	r2, [sp, #204]	; 0xcc
   1f110:	add	r3, r3, #1
   1f114:	str	r3, [sl, r4, lsl #2]
   1f118:	mov	r0, r3
   1f11c:	ldr	r1, [r2, r4, lsl #2]
   1f120:	bl	3fd18 <__aeabi_idivmod>
   1f124:	subs	r3, r1, #0
   1f128:	bne	1f31c <GetDataSlab+0x3400>
   1f12c:	ldr	r7, [r8, #4]
   1f130:	str	r3, [sl, r4, lsl #2]
   1f134:	mov	r1, r7
   1f138:	mov	r0, r6
   1f13c:	bl	3fd18 <__aeabi_idivmod>
   1f140:	ldr	r2, [sp, #196]	; 0xc4
   1f144:	ldr	r2, [r2, r4, lsl #2]
   1f148:	subs	r3, r1, #0
   1f14c:	beq	1f308 <GetDataSlab+0x33ec>
   1f150:	ldr	r1, [r8]
   1f154:	sub	r3, r7, r3
   1f158:	mla	r3, r2, r1, r3
   1f15c:	add	r5, r5, r3, lsl #3
   1f160:	add	r6, r6, r3
   1f164:	add	r4, r4, #1
   1f168:	add	r8, r8, #4
   1f16c:	b	1f0fc <GetDataSlab+0x31e0>
   1f170:	ldr	r3, [r9, r2, lsl #2]
   1f174:	mov	r5, ip
   1f178:	sub	r3, r3, #1
   1f17c:	str	r3, [r4, r2, lsl #2]
   1f180:	ldr	r3, [lr], #4
   1f184:	mov	r1, lr
   1f188:	str	r3, [ip, #4]
   1f18c:	cmp	fp, r1
   1f190:	bne	1f1c4 <GetDataSlab+0x32a8>
   1f194:	ldr	r3, [sp, #204]	; 0xcc
   1f198:	ldr	r1, [sp, #20]
   1f19c:	add	ip, ip, #4
   1f1a0:	ldr	r3, [r3, r2, lsl #2]
   1f1a4:	mul	r3, r3, r1
   1f1a8:	ldr	r1, [sp, #196]	; 0xc4
   1f1ac:	str	r3, [sp, #20]
   1f1b0:	ldr	r3, [r5]
   1f1b4:	ldr	r1, [r1, r2, lsl #2]
   1f1b8:	add	r2, r2, #1
   1f1bc:	mla	r6, r1, r3, r6
   1f1c0:	b	1f034 <GetDataSlab+0x3118>
   1f1c4:	ldr	r7, [r4, r2, lsl #2]
   1f1c8:	mov	r0, r1
   1f1cc:	ldr	r3, [r1, #-4]!
   1f1d0:	mul	r3, r3, r7
   1f1d4:	ldr	r7, [ip, #4]
   1f1d8:	str	r3, [r4, r2, lsl #2]
   1f1dc:	ldr	r3, [r0]
   1f1e0:	mul	r3, r3, r7
   1f1e4:	str	r3, [ip, #4]
   1f1e8:	b	1f18c <GetDataSlab+0x3270>
   1f1ec:	ldrd	r2, [lr], #8
   1f1f0:	add	r0, r0, #1
   1f1f4:	strd	r2, [ip], #8
   1f1f8:	b	1f25c <GetDataSlab+0x3340>
   1f1fc:	cmp	r2, #0
   1f200:	beq	1f2e8 <GetDataSlab+0x33cc>
   1f204:	ldr	r3, [r8]
   1f208:	mul	r3, r3, r2
   1f20c:	b	1f2e0 <GetDataSlab+0x33c4>
   1f210:	add	r3, sp, #152	; 0x98
   1f214:	add	r3, r3, r4, lsl #2
   1f218:	ldr	r3, [r3, #-120]	; 0xffffff88
   1f21c:	add	r6, r6, r3
   1f220:	add	r5, r5, r3, lsl #3
   1f224:	ldr	r3, [sp, #12]
   1f228:	add	r9, r9, r3
   1f22c:	ldr	r3, [sp, #20]
   1f230:	cmp	r9, r3
   1f234:	bge	1c04c <GetDataSlab+0x130>
   1f238:	ldr	r3, [sp, #196]	; 0xc4
   1f23c:	mov	r0, #0
   1f240:	ldr	r1, [r3]
   1f244:	ldr	r3, [sp]
   1f248:	cmp	r1, #0
   1f24c:	addne	r5, r5, r1, lsl #3
   1f250:	addne	r6, r6, r1
   1f254:	mov	lr, r5
   1f258:	add	ip, r3, r9, lsl #3
   1f25c:	ldr	r3, [sp, #12]
   1f260:	cmp	r0, r3
   1f264:	blt	1f1ec <GetDataSlab+0x32d0>
   1f268:	ldr	r3, [sp, #24]
   1f26c:	ldr	r8, [sp, #4]
   1f270:	sub	r3, r3, r1
   1f274:	ldr	r4, [sp, #16]
   1f278:	add	r6, r6, r3
   1f27c:	add	r5, r5, r3, lsl #3
   1f280:	ldr	r3, [sp, #208]	; 0xd0
   1f284:	cmp	r4, r3
   1f288:	bge	1f224 <GetDataSlab+0x3308>
   1f28c:	ldr	r3, [sl, r4, lsl #2]
   1f290:	ldr	r2, [sp, #204]	; 0xcc
   1f294:	add	r3, r3, #1
   1f298:	str	r3, [sl, r4, lsl #2]
   1f29c:	mov	r0, r3
   1f2a0:	ldr	r1, [r2, r4, lsl #2]
   1f2a4:	bl	3fd18 <__aeabi_idivmod>
   1f2a8:	subs	r3, r1, #0
   1f2ac:	bne	1f210 <GetDataSlab+0x32f4>
   1f2b0:	ldr	r7, [r8, #4]
   1f2b4:	str	r3, [sl, r4, lsl #2]
   1f2b8:	mov	r1, r7
   1f2bc:	mov	r0, r6
   1f2c0:	bl	3fd18 <__aeabi_idivmod>
   1f2c4:	ldr	r2, [sp, #196]	; 0xc4
   1f2c8:	ldr	r2, [r2, r4, lsl #2]
   1f2cc:	subs	r3, r1, #0
   1f2d0:	beq	1f1fc <GetDataSlab+0x32e0>
   1f2d4:	ldr	r1, [r8]
   1f2d8:	sub	r3, r7, r3
   1f2dc:	mla	r3, r2, r1, r3
   1f2e0:	add	r5, r5, r3, lsl #3
   1f2e4:	add	r6, r6, r3
   1f2e8:	add	r4, r4, #1
   1f2ec:	add	r8, r8, #4
   1f2f0:	b	1f280 <GetDataSlab+0x3364>
   1f2f4:	vldr	d7, [r3]
   1f2f8:	add	r2, r2, #1
   1f2fc:	add	r3, r3, fp
   1f300:	vstmia	r0!, {d7}
   1f304:	b	1f0c8 <GetDataSlab+0x31ac>
   1f308:	cmp	r2, #0
   1f30c:	beq	1f164 <GetDataSlab+0x3248>
   1f310:	ldr	r3, [r8]
   1f314:	mul	r3, r3, r2
   1f318:	b	1f15c <GetDataSlab+0x3240>
   1f31c:	add	r3, sp, #152	; 0x98
   1f320:	add	r3, r3, r4, lsl #2
   1f324:	ldr	r3, [r3, #-120]	; 0xffffff88
   1f328:	add	r6, r6, r3
   1f32c:	add	r5, r5, r3, lsl #3
   1f330:	ldr	r3, [sp, #12]
   1f334:	add	r9, r9, r3
   1f338:	b	1f098 <GetDataSlab+0x317c>
   1f33c:	ldr	r3, [r9]
   1f340:	ldr	ip, [sp, #4]
   1f344:	str	r3, [sp, #16]
   1f348:	sub	r3, r3, #1
   1f34c:	str	r3, [sp, #32]
   1f350:	ldr	r3, [fp]
   1f354:	mov	lr, fp
   1f358:	str	r3, [sp, #24]
   1f35c:	str	r3, [sp, #112]	; 0x70
   1f360:	ldr	r3, [sp, #204]	; 0xcc
   1f364:	mov	r6, #0
   1f368:	mov	r2, #1
   1f36c:	ldr	r3, [r3]
   1f370:	str	r3, [sp, #12]
   1f374:	str	r3, [sp, #20]
   1f378:	ldr	r3, [sp, #208]	; 0xd0
   1f37c:	cmp	r2, r3
   1f380:	blt	1f4b4 <GetDataSlab+0x3598>
   1f384:	ldr	r3, [sp, #8]
   1f388:	add	r5, r3, r6, lsl #2
   1f38c:	ldr	r3, [sp, #16]
   1f390:	cmp	r3, #1
   1f394:	moveq	r9, #0
   1f398:	beq	1f574 <GetDataSlab+0x3658>
   1f39c:	ldr	r3, [sp, #16]
   1f3a0:	ldr	r2, [sp, #12]
   1f3a4:	mov	r9, #0
   1f3a8:	mul	r3, r3, r2
   1f3ac:	ldr	r2, [sp, #24]
   1f3b0:	sub	r3, r2, r3
   1f3b4:	str	r3, [sp, #8]
   1f3b8:	ldr	r3, [sp, #16]
   1f3bc:	ldr	r2, [sp, #16]
   1f3c0:	lsl	fp, r3, #2
   1f3c4:	ldr	r3, [sp, #12]
   1f3c8:	bic	r3, r3, r3, asr #31
   1f3cc:	mul	r2, r2, r3
   1f3d0:	mul	r3, r3, fp
   1f3d4:	str	r2, [sp, #24]
   1f3d8:	str	r3, [sp, #16]
   1f3dc:	ldr	r3, [sp, #20]
   1f3e0:	cmp	r9, r3
   1f3e4:	bge	1c04c <GetDataSlab+0x130>
   1f3e8:	ldr	r3, [sp, #196]	; 0xc4
   1f3ec:	mov	r2, #0
   1f3f0:	ldr	r1, [r3]
   1f3f4:	ldr	r3, [sp]
   1f3f8:	cmp	r1, #0
   1f3fc:	addne	r5, r5, r1, lsl #2
   1f400:	add	r0, r3, r9, lsl #3
   1f404:	addne	r6, r6, r1
   1f408:	mov	r3, r5
   1f40c:	ldr	ip, [sp, #12]
   1f410:	cmp	r2, ip
   1f414:	blt	1f63c <GetDataSlab+0x3720>
   1f418:	ldr	r3, [sp, #8]
   1f41c:	ldr	r8, [sp, #4]
   1f420:	sub	r2, r3, r1
   1f424:	ldr	r3, [sp, #24]
   1f428:	mov	r4, #1
   1f42c:	add	r3, r3, r6
   1f430:	add	r6, r3, r2
   1f434:	ldr	r3, [sp, #16]
   1f438:	add	r3, r3, r2, lsl #2
   1f43c:	add	r5, r5, r3
   1f440:	ldr	r3, [sp, #208]	; 0xd0
   1f444:	cmp	r4, r3
   1f448:	bge	1f67c <GetDataSlab+0x3760>
   1f44c:	ldr	r3, [sl, r4, lsl #2]
   1f450:	ldr	r2, [sp, #204]	; 0xcc
   1f454:	add	r3, r3, #1
   1f458:	str	r3, [sl, r4, lsl #2]
   1f45c:	mov	r0, r3
   1f460:	ldr	r1, [r2, r4, lsl #2]
   1f464:	bl	3fd18 <__aeabi_idivmod>
   1f468:	subs	r3, r1, #0
   1f46c:	bne	1f668 <GetDataSlab+0x374c>
   1f470:	ldr	r7, [r8, #4]
   1f474:	str	r3, [sl, r4, lsl #2]
   1f478:	mov	r1, r7
   1f47c:	mov	r0, r6
   1f480:	bl	3fd18 <__aeabi_idivmod>
   1f484:	ldr	r2, [sp, #196]	; 0xc4
   1f488:	ldr	r2, [r2, r4, lsl #2]
   1f48c:	subs	r3, r1, #0
   1f490:	beq	1f654 <GetDataSlab+0x3738>
   1f494:	ldr	r1, [r8]
   1f498:	sub	r3, r7, r3
   1f49c:	mla	r3, r2, r1, r3
   1f4a0:	add	r5, r5, r3, lsl #2
   1f4a4:	add	r6, r6, r3
   1f4a8:	add	r4, r4, #1
   1f4ac:	add	r8, r8, #4
   1f4b0:	b	1f440 <GetDataSlab+0x3524>
   1f4b4:	ldr	r3, [r9, r2, lsl #2]
   1f4b8:	mov	r5, ip
   1f4bc:	sub	r3, r3, #1
   1f4c0:	str	r3, [r4, r2, lsl #2]
   1f4c4:	ldr	r3, [lr], #4
   1f4c8:	mov	r1, lr
   1f4cc:	str	r3, [ip, #4]
   1f4d0:	cmp	fp, r1
   1f4d4:	bne	1f508 <GetDataSlab+0x35ec>
   1f4d8:	ldr	r3, [sp, #204]	; 0xcc
   1f4dc:	ldr	r1, [sp, #20]
   1f4e0:	add	ip, ip, #4
   1f4e4:	ldr	r3, [r3, r2, lsl #2]
   1f4e8:	mul	r3, r3, r1
   1f4ec:	ldr	r1, [sp, #196]	; 0xc4
   1f4f0:	str	r3, [sp, #20]
   1f4f4:	ldr	r3, [r5]
   1f4f8:	ldr	r1, [r1, r2, lsl #2]
   1f4fc:	add	r2, r2, #1
   1f500:	mla	r6, r1, r3, r6
   1f504:	b	1f378 <GetDataSlab+0x345c>
   1f508:	ldr	r7, [r4, r2, lsl #2]
   1f50c:	mov	r0, r1
   1f510:	ldr	r3, [r1, #-4]!
   1f514:	mul	r3, r3, r7
   1f518:	ldr	r7, [ip, #4]
   1f51c:	str	r3, [r4, r2, lsl #2]
   1f520:	ldr	r3, [r0]
   1f524:	mul	r3, r3, r7
   1f528:	str	r3, [ip, #4]
   1f52c:	b	1f4d0 <GetDataSlab+0x35b4>
   1f530:	vldmia	r0!, {s15}
   1f534:	add	r2, r2, #1
   1f538:	vcvt.f64.f32	d7, s15
   1f53c:	vstmia	r1!, {d7}
   1f540:	b	1f5a4 <GetDataSlab+0x3688>
   1f544:	cmp	r2, #0
   1f548:	beq	1f630 <GetDataSlab+0x3714>
   1f54c:	ldr	r3, [r8]
   1f550:	mul	r3, r3, r2
   1f554:	b	1f628 <GetDataSlab+0x370c>
   1f558:	add	r3, sp, #152	; 0x98
   1f55c:	add	r3, r3, r4, lsl #2
   1f560:	ldr	r3, [r3, #-120]	; 0xffffff88
   1f564:	add	r6, r6, r3
   1f568:	add	r5, r5, r3, lsl #2
   1f56c:	ldr	r3, [sp, #12]
   1f570:	add	r9, r9, r3
   1f574:	ldr	r3, [sp, #20]
   1f578:	cmp	r9, r3
   1f57c:	bge	1c04c <GetDataSlab+0x130>
   1f580:	ldr	r3, [sp, #196]	; 0xc4
   1f584:	ldr	r2, [sp]
   1f588:	ldr	r3, [r3]
   1f58c:	add	r1, r2, r9, lsl #3
   1f590:	cmp	r3, #0
   1f594:	addne	r5, r5, r3, lsl #2
   1f598:	addne	r6, r6, r3
   1f59c:	mov	r0, r5
   1f5a0:	mov	r2, #0
   1f5a4:	ldr	ip, [sp, #12]
   1f5a8:	cmp	r2, ip
   1f5ac:	blt	1f530 <GetDataSlab+0x3614>
   1f5b0:	ldr	r2, [sp, #24]
   1f5b4:	ldr	r8, [sp, #4]
   1f5b8:	sub	r3, r2, r3
   1f5bc:	ldr	r4, [sp, #16]
   1f5c0:	add	r6, r6, r3
   1f5c4:	add	r5, r5, r3, lsl #2
   1f5c8:	ldr	r3, [sp, #208]	; 0xd0
   1f5cc:	cmp	r4, r3
   1f5d0:	bge	1f56c <GetDataSlab+0x3650>
   1f5d4:	ldr	r3, [sl, r4, lsl #2]
   1f5d8:	ldr	r2, [sp, #204]	; 0xcc
   1f5dc:	add	r3, r3, #1
   1f5e0:	str	r3, [sl, r4, lsl #2]
   1f5e4:	mov	r0, r3
   1f5e8:	ldr	r1, [r2, r4, lsl #2]
   1f5ec:	bl	3fd18 <__aeabi_idivmod>
   1f5f0:	subs	r3, r1, #0
   1f5f4:	bne	1f558 <GetDataSlab+0x363c>
   1f5f8:	ldr	r7, [r8, #4]
   1f5fc:	str	r3, [sl, r4, lsl #2]
   1f600:	mov	r1, r7
   1f604:	mov	r0, r6
   1f608:	bl	3fd18 <__aeabi_idivmod>
   1f60c:	ldr	r2, [sp, #196]	; 0xc4
   1f610:	ldr	r2, [r2, r4, lsl #2]
   1f614:	subs	r3, r1, #0
   1f618:	beq	1f544 <GetDataSlab+0x3628>
   1f61c:	ldr	r1, [r8]
   1f620:	sub	r3, r7, r3
   1f624:	mla	r3, r2, r1, r3
   1f628:	add	r5, r5, r3, lsl #2
   1f62c:	add	r6, r6, r3
   1f630:	add	r4, r4, #1
   1f634:	add	r8, r8, #4
   1f638:	b	1f5c8 <GetDataSlab+0x36ac>
   1f63c:	vldr	s15, [r3]
   1f640:	add	r2, r2, #1
   1f644:	add	r3, r3, fp
   1f648:	vcvt.f64.f32	d7, s15
   1f64c:	vstmia	r0!, {d7}
   1f650:	b	1f40c <GetDataSlab+0x34f0>
   1f654:	cmp	r2, #0
   1f658:	beq	1f4a8 <GetDataSlab+0x358c>
   1f65c:	ldr	r3, [r8]
   1f660:	mul	r3, r3, r2
   1f664:	b	1f4a0 <GetDataSlab+0x3584>
   1f668:	add	r3, sp, #152	; 0x98
   1f66c:	add	r3, r3, r4, lsl #2
   1f670:	ldr	r3, [r3, #-120]	; 0xffffff88
   1f674:	add	r6, r6, r3
   1f678:	add	r5, r5, r3, lsl #2
   1f67c:	ldr	r3, [sp, #12]
   1f680:	add	r9, r9, r3
   1f684:	b	1f3dc <GetDataSlab+0x34c0>
   1f688:	ldr	r3, [r9]
   1f68c:	ldr	ip, [sp, #4]
   1f690:	str	r3, [sp, #16]
   1f694:	sub	r3, r3, #1
   1f698:	str	r3, [sp, #32]
   1f69c:	ldr	r3, [fp]
   1f6a0:	mov	lr, fp
   1f6a4:	str	r3, [sp, #24]
   1f6a8:	str	r3, [sp, #112]	; 0x70
   1f6ac:	ldr	r3, [sp, #204]	; 0xcc
   1f6b0:	mov	r6, #0
   1f6b4:	mov	r2, #1
   1f6b8:	ldr	r3, [r3]
   1f6bc:	str	r3, [sp, #12]
   1f6c0:	str	r3, [sp, #20]
   1f6c4:	ldr	r3, [sp, #208]	; 0xd0
   1f6c8:	cmp	r2, r3
   1f6cc:	blt	1f800 <GetDataSlab+0x38e4>
   1f6d0:	ldr	r3, [sp, #8]
   1f6d4:	add	r5, r3, r6, lsl #2
   1f6d8:	ldr	r3, [sp, #16]
   1f6dc:	cmp	r3, #1
   1f6e0:	moveq	r9, #0
   1f6e4:	beq	1f8c4 <GetDataSlab+0x39a8>
   1f6e8:	ldr	r3, [sp, #16]
   1f6ec:	ldr	r2, [sp, #12]
   1f6f0:	mov	r9, #0
   1f6f4:	mul	r3, r3, r2
   1f6f8:	ldr	r2, [sp, #24]
   1f6fc:	sub	r3, r2, r3
   1f700:	str	r3, [sp, #24]
   1f704:	ldr	r3, [sp, #16]
   1f708:	ldr	r2, [sp, #16]
   1f70c:	lsl	fp, r3, #2
   1f710:	ldr	r3, [sp, #12]
   1f714:	bic	r3, r3, r3, asr #31
   1f718:	mul	r2, r2, r3
   1f71c:	mul	r3, r3, fp
   1f720:	str	r2, [sp, #16]
   1f724:	str	r3, [sp, #8]
   1f728:	ldr	r3, [sp, #20]
   1f72c:	cmp	r9, r3
   1f730:	bge	1c04c <GetDataSlab+0x130>
   1f734:	ldr	r3, [sp, #196]	; 0xc4
   1f738:	ldr	r1, [r3]
   1f73c:	ldr	r3, [sp]
   1f740:	cmp	r1, #0
   1f744:	addne	r5, r5, r1, lsl #2
   1f748:	add	r0, r3, r9, lsl #3
   1f74c:	addne	r6, r6, r1
   1f750:	mov	ip, r5
   1f754:	mov	r3, #0
   1f758:	ldr	r2, [sp, #12]
   1f75c:	cmp	r3, r2
   1f760:	blt	1f988 <GetDataSlab+0x3a6c>
   1f764:	ldr	r3, [sp, #24]
   1f768:	ldr	r8, [sp, #4]
   1f76c:	sub	r2, r3, r1
   1f770:	ldr	r3, [sp, #16]
   1f774:	mov	r4, #1
   1f778:	add	r3, r3, r6
   1f77c:	add	r6, r3, r2
   1f780:	ldr	r3, [sp, #8]
   1f784:	add	r3, r3, r2, lsl #2
   1f788:	add	r5, r5, r3
   1f78c:	ldr	r3, [sp, #208]	; 0xd0
   1f790:	cmp	r4, r3
   1f794:	bge	1f9c8 <GetDataSlab+0x3aac>
   1f798:	ldr	r3, [sl, r4, lsl #2]
   1f79c:	ldr	r2, [sp, #204]	; 0xcc
   1f7a0:	add	r3, r3, #1
   1f7a4:	str	r3, [sl, r4, lsl #2]
   1f7a8:	mov	r0, r3
   1f7ac:	ldr	r1, [r2, r4, lsl #2]
   1f7b0:	bl	3fd18 <__aeabi_idivmod>
   1f7b4:	subs	r3, r1, #0
   1f7b8:	bne	1f9b4 <GetDataSlab+0x3a98>
   1f7bc:	ldr	r7, [r8, #4]
   1f7c0:	str	r3, [sl, r4, lsl #2]
   1f7c4:	mov	r1, r7
   1f7c8:	mov	r0, r6
   1f7cc:	bl	3fd18 <__aeabi_idivmod>
   1f7d0:	ldr	r2, [sp, #196]	; 0xc4
   1f7d4:	ldr	r2, [r2, r4, lsl #2]
   1f7d8:	subs	r3, r1, #0
   1f7dc:	beq	1f9a0 <GetDataSlab+0x3a84>
   1f7e0:	ldr	r1, [r8]
   1f7e4:	sub	r3, r7, r3
   1f7e8:	mla	r3, r2, r1, r3
   1f7ec:	add	r5, r5, r3, lsl #2
   1f7f0:	add	r6, r6, r3
   1f7f4:	add	r4, r4, #1
   1f7f8:	add	r8, r8, #4
   1f7fc:	b	1f78c <GetDataSlab+0x3870>
   1f800:	ldr	r3, [r9, r2, lsl #2]
   1f804:	mov	r5, ip
   1f808:	sub	r3, r3, #1
   1f80c:	str	r3, [r4, r2, lsl #2]
   1f810:	ldr	r3, [lr], #4
   1f814:	mov	r1, lr
   1f818:	str	r3, [ip, #4]
   1f81c:	cmp	fp, r1
   1f820:	bne	1f854 <GetDataSlab+0x3938>
   1f824:	ldr	r3, [sp, #204]	; 0xcc
   1f828:	ldr	r1, [sp, #20]
   1f82c:	add	ip, ip, #4
   1f830:	ldr	r3, [r3, r2, lsl #2]
   1f834:	mul	r3, r3, r1
   1f838:	ldr	r1, [sp, #196]	; 0xc4
   1f83c:	str	r3, [sp, #20]
   1f840:	ldr	r3, [r5]
   1f844:	ldr	r1, [r1, r2, lsl #2]
   1f848:	add	r2, r2, #1
   1f84c:	mla	r6, r1, r3, r6
   1f850:	b	1f6c4 <GetDataSlab+0x37a8>
   1f854:	ldr	r7, [r4, r2, lsl #2]
   1f858:	mov	r0, r1
   1f85c:	ldr	r3, [r1, #-4]!
   1f860:	mul	r3, r3, r7
   1f864:	ldr	r7, [ip, #4]
   1f868:	str	r3, [r4, r2, lsl #2]
   1f86c:	ldr	r3, [r0]
   1f870:	mul	r3, r3, r7
   1f874:	str	r3, [ip, #4]
   1f878:	b	1f81c <GetDataSlab+0x3900>
   1f87c:	ldr	r0, [r5, r3, lsl #2]
   1f880:	add	r3, r3, #1
   1f884:	vmov	s15, r0
   1f888:	vcvt.f64.s32	d7, s15
   1f88c:	vstmia	r1!, {d7}
   1f890:	b	1f8f0 <GetDataSlab+0x39d4>
   1f894:	cmp	r2, #0
   1f898:	beq	1f97c <GetDataSlab+0x3a60>
   1f89c:	ldr	r3, [r8]
   1f8a0:	mul	r3, r3, r2
   1f8a4:	b	1f974 <GetDataSlab+0x3a58>
   1f8a8:	add	r3, sp, #152	; 0x98
   1f8ac:	add	r3, r3, r4, lsl #2
   1f8b0:	ldr	r3, [r3, #-120]	; 0xffffff88
   1f8b4:	add	r6, r6, r3
   1f8b8:	add	r5, r5, r3, lsl #2
   1f8bc:	ldr	r3, [sp, #12]
   1f8c0:	add	r9, r9, r3
   1f8c4:	ldr	r3, [sp, #20]
   1f8c8:	cmp	r9, r3
   1f8cc:	bge	1c04c <GetDataSlab+0x130>
   1f8d0:	ldr	r3, [sp, #196]	; 0xc4
   1f8d4:	ldr	r2, [r3]
   1f8d8:	ldr	r3, [sp]
   1f8dc:	cmp	r2, #0
   1f8e0:	add	r1, r3, r9, lsl #3
   1f8e4:	addne	r5, r5, r2, lsl #2
   1f8e8:	addne	r6, r6, r2
   1f8ec:	mov	r3, #0
   1f8f0:	ldr	r0, [sp, #12]
   1f8f4:	cmp	r3, r0
   1f8f8:	blt	1f87c <GetDataSlab+0x3960>
   1f8fc:	ldr	r3, [sp, #24]
   1f900:	ldr	r8, [sp, #4]
   1f904:	sub	r3, r3, r2
   1f908:	ldr	r4, [sp, #16]
   1f90c:	add	r6, r6, r3
   1f910:	add	r5, r5, r3, lsl #2
   1f914:	ldr	r3, [sp, #208]	; 0xd0
   1f918:	cmp	r4, r3
   1f91c:	bge	1f8bc <GetDataSlab+0x39a0>
   1f920:	ldr	r3, [sl, r4, lsl #2]
   1f924:	ldr	r2, [sp, #204]	; 0xcc
   1f928:	add	r3, r3, #1
   1f92c:	str	r3, [sl, r4, lsl #2]
   1f930:	mov	r0, r3
   1f934:	ldr	r1, [r2, r4, lsl #2]
   1f938:	bl	3fd18 <__aeabi_idivmod>
   1f93c:	subs	r3, r1, #0
   1f940:	bne	1f8a8 <GetDataSlab+0x398c>
   1f944:	ldr	r7, [r8, #4]
   1f948:	str	r3, [sl, r4, lsl #2]
   1f94c:	mov	r1, r7
   1f950:	mov	r0, r6
   1f954:	bl	3fd18 <__aeabi_idivmod>
   1f958:	ldr	r2, [sp, #196]	; 0xc4
   1f95c:	ldr	r2, [r2, r4, lsl #2]
   1f960:	subs	r3, r1, #0
   1f964:	beq	1f894 <GetDataSlab+0x3978>
   1f968:	ldr	r1, [r8]
   1f96c:	sub	r3, r7, r3
   1f970:	mla	r3, r2, r1, r3
   1f974:	add	r5, r5, r3, lsl #2
   1f978:	add	r6, r6, r3
   1f97c:	add	r4, r4, #1
   1f980:	add	r8, r8, #4
   1f984:	b	1f914 <GetDataSlab+0x39f8>
   1f988:	ldr	r2, [ip], fp
   1f98c:	add	r3, r3, #1
   1f990:	vmov	s15, r2
   1f994:	vcvt.f64.s32	d7, s15
   1f998:	vstmia	r0!, {d7}
   1f99c:	b	1f758 <GetDataSlab+0x383c>
   1f9a0:	cmp	r2, #0
   1f9a4:	beq	1f7f4 <GetDataSlab+0x38d8>
   1f9a8:	ldr	r3, [r8]
   1f9ac:	mul	r3, r3, r2
   1f9b0:	b	1f7ec <GetDataSlab+0x38d0>
   1f9b4:	add	r3, sp, #152	; 0x98
   1f9b8:	add	r3, r3, r4, lsl #2
   1f9bc:	ldr	r3, [r3, #-120]	; 0xffffff88
   1f9c0:	add	r6, r6, r3
   1f9c4:	add	r5, r5, r3, lsl #2
   1f9c8:	ldr	r3, [sp, #12]
   1f9cc:	add	r9, r9, r3
   1f9d0:	b	1f728 <GetDataSlab+0x380c>
   1f9d4:	ldr	r3, [r9]
   1f9d8:	ldr	ip, [sp, #4]
   1f9dc:	str	r3, [sp, #16]
   1f9e0:	sub	r3, r3, #1
   1f9e4:	str	r3, [sp, #32]
   1f9e8:	ldr	r3, [fp]
   1f9ec:	mov	lr, fp
   1f9f0:	str	r3, [sp, #24]
   1f9f4:	str	r3, [sp, #112]	; 0x70
   1f9f8:	ldr	r3, [sp, #204]	; 0xcc
   1f9fc:	mov	r6, #0
   1fa00:	mov	r2, #1
   1fa04:	ldr	r3, [r3]
   1fa08:	str	r3, [sp, #12]
   1fa0c:	str	r3, [sp, #20]
   1fa10:	ldr	r3, [sp, #208]	; 0xd0
   1fa14:	cmp	r2, r3
   1fa18:	blt	1fb4c <GetDataSlab+0x3c30>
   1fa1c:	ldr	r3, [sp, #8]
   1fa20:	add	r5, r3, r6, lsl #2
   1fa24:	ldr	r3, [sp, #16]
   1fa28:	cmp	r3, #1
   1fa2c:	moveq	r9, #0
   1fa30:	beq	1fc10 <GetDataSlab+0x3cf4>
   1fa34:	ldr	r3, [sp, #16]
   1fa38:	ldr	r2, [sp, #12]
   1fa3c:	mov	r9, #0
   1fa40:	mul	r3, r3, r2
   1fa44:	ldr	r2, [sp, #24]
   1fa48:	sub	r3, r2, r3
   1fa4c:	str	r3, [sp, #24]
   1fa50:	ldr	r3, [sp, #16]
   1fa54:	ldr	r2, [sp, #16]
   1fa58:	lsl	fp, r3, #2
   1fa5c:	ldr	r3, [sp, #12]
   1fa60:	bic	r3, r3, r3, asr #31
   1fa64:	mul	r2, r2, r3
   1fa68:	mul	r3, r3, fp
   1fa6c:	str	r2, [sp, #8]
   1fa70:	str	r3, [sp, #16]
   1fa74:	ldr	r3, [sp, #20]
   1fa78:	cmp	r9, r3
   1fa7c:	bge	1c04c <GetDataSlab+0x130>
   1fa80:	ldr	r3, [sp, #196]	; 0xc4
   1fa84:	ldr	r1, [r3]
   1fa88:	ldr	r3, [sp]
   1fa8c:	cmp	r1, #0
   1fa90:	addne	r5, r5, r1, lsl #2
   1fa94:	add	r0, r3, r9, lsl #3
   1fa98:	addne	r6, r6, r1
   1fa9c:	mov	ip, r5
   1faa0:	mov	r3, #0
   1faa4:	ldr	r2, [sp, #12]
   1faa8:	cmp	r3, r2
   1faac:	blt	1fcd4 <GetDataSlab+0x3db8>
   1fab0:	ldr	r3, [sp, #24]
   1fab4:	ldr	r8, [sp, #4]
   1fab8:	sub	r2, r3, r1
   1fabc:	ldr	r3, [sp, #8]
   1fac0:	mov	r4, #1
   1fac4:	add	r3, r6, r3
   1fac8:	add	r6, r3, r2
   1facc:	ldr	r3, [sp, #16]
   1fad0:	add	r3, r3, r2, lsl #2
   1fad4:	add	r5, r5, r3
   1fad8:	ldr	r3, [sp, #208]	; 0xd0
   1fadc:	cmp	r4, r3
   1fae0:	bge	1fd14 <GetDataSlab+0x3df8>
   1fae4:	ldr	r3, [sl, r4, lsl #2]
   1fae8:	ldr	r2, [sp, #204]	; 0xcc
   1faec:	add	r3, r3, #1
   1faf0:	str	r3, [sl, r4, lsl #2]
   1faf4:	mov	r0, r3
   1faf8:	ldr	r1, [r2, r4, lsl #2]
   1fafc:	bl	3fd18 <__aeabi_idivmod>
   1fb00:	subs	r3, r1, #0
   1fb04:	bne	1fd00 <GetDataSlab+0x3de4>
   1fb08:	ldr	r7, [r8, #4]
   1fb0c:	str	r3, [sl, r4, lsl #2]
   1fb10:	mov	r1, r7
   1fb14:	mov	r0, r6
   1fb18:	bl	3fd18 <__aeabi_idivmod>
   1fb1c:	ldr	r2, [sp, #196]	; 0xc4
   1fb20:	ldr	r2, [r2, r4, lsl #2]
   1fb24:	subs	r3, r1, #0
   1fb28:	beq	1fcec <GetDataSlab+0x3dd0>
   1fb2c:	ldr	r1, [r8]
   1fb30:	sub	r3, r7, r3
   1fb34:	mla	r3, r2, r1, r3
   1fb38:	add	r5, r5, r3, lsl #2
   1fb3c:	add	r6, r6, r3
   1fb40:	add	r4, r4, #1
   1fb44:	add	r8, r8, #4
   1fb48:	b	1fad8 <GetDataSlab+0x3bbc>
   1fb4c:	ldr	r3, [r9, r2, lsl #2]
   1fb50:	mov	r5, ip
   1fb54:	sub	r3, r3, #1
   1fb58:	str	r3, [r4, r2, lsl #2]
   1fb5c:	ldr	r3, [lr], #4
   1fb60:	mov	r1, lr
   1fb64:	str	r3, [ip, #4]
   1fb68:	cmp	r1, fp
   1fb6c:	bne	1fba0 <GetDataSlab+0x3c84>
   1fb70:	ldr	r3, [sp, #204]	; 0xcc
   1fb74:	ldr	r1, [sp, #20]
   1fb78:	add	ip, ip, #4
   1fb7c:	ldr	r3, [r3, r2, lsl #2]
   1fb80:	mul	r3, r3, r1
   1fb84:	ldr	r1, [sp, #196]	; 0xc4
   1fb88:	str	r3, [sp, #20]
   1fb8c:	ldr	r3, [r5]
   1fb90:	ldr	r1, [r1, r2, lsl #2]
   1fb94:	add	r2, r2, #1
   1fb98:	mla	r6, r1, r3, r6
   1fb9c:	b	1fa10 <GetDataSlab+0x3af4>
   1fba0:	ldr	r7, [r4, r2, lsl #2]
   1fba4:	mov	r0, r1
   1fba8:	ldr	r3, [r1, #-4]!
   1fbac:	mul	r3, r3, r7
   1fbb0:	ldr	r7, [ip, #4]
   1fbb4:	str	r3, [r4, r2, lsl #2]
   1fbb8:	ldr	r3, [r0]
   1fbbc:	mul	r3, r3, r7
   1fbc0:	str	r3, [ip, #4]
   1fbc4:	b	1fb68 <GetDataSlab+0x3c4c>
   1fbc8:	ldr	r0, [r5, r3, lsl #2]
   1fbcc:	add	r3, r3, #1
   1fbd0:	vmov	s15, r0
   1fbd4:	vcvt.f64.u32	d7, s15
   1fbd8:	vstmia	r1!, {d7}
   1fbdc:	b	1fc3c <GetDataSlab+0x3d20>
   1fbe0:	cmp	r2, #0
   1fbe4:	beq	1fcc8 <GetDataSlab+0x3dac>
   1fbe8:	ldr	r3, [r8]
   1fbec:	mul	r3, r3, r2
   1fbf0:	b	1fcc0 <GetDataSlab+0x3da4>
   1fbf4:	add	r3, sp, #152	; 0x98
   1fbf8:	add	r3, r3, r4, lsl #2
   1fbfc:	ldr	r3, [r3, #-120]	; 0xffffff88
   1fc00:	add	r6, r6, r3
   1fc04:	add	r5, r5, r3, lsl #2
   1fc08:	ldr	r3, [sp, #12]
   1fc0c:	add	r9, r9, r3
   1fc10:	ldr	r3, [sp, #20]
   1fc14:	cmp	r9, r3
   1fc18:	bge	1c04c <GetDataSlab+0x130>
   1fc1c:	ldr	r3, [sp, #196]	; 0xc4
   1fc20:	ldr	r2, [r3]
   1fc24:	ldr	r3, [sp]
   1fc28:	cmp	r2, #0
   1fc2c:	add	r1, r3, r9, lsl #3
   1fc30:	addne	r5, r5, r2, lsl #2
   1fc34:	addne	r6, r6, r2
   1fc38:	mov	r3, #0
   1fc3c:	ldr	r0, [sp, #12]
   1fc40:	cmp	r3, r0
   1fc44:	blt	1fbc8 <GetDataSlab+0x3cac>
   1fc48:	ldr	r3, [sp, #24]
   1fc4c:	ldr	r8, [sp, #4]
   1fc50:	sub	r3, r3, r2
   1fc54:	ldr	r4, [sp, #16]
   1fc58:	add	r6, r6, r3
   1fc5c:	add	r5, r5, r3, lsl #2
   1fc60:	ldr	r3, [sp, #208]	; 0xd0
   1fc64:	cmp	r4, r3
   1fc68:	bge	1fc08 <GetDataSlab+0x3cec>
   1fc6c:	ldr	r3, [sl, r4, lsl #2]
   1fc70:	ldr	r2, [sp, #204]	; 0xcc
   1fc74:	add	r3, r3, #1
   1fc78:	str	r3, [sl, r4, lsl #2]
   1fc7c:	mov	r0, r3
   1fc80:	ldr	r1, [r2, r4, lsl #2]
   1fc84:	bl	3fd18 <__aeabi_idivmod>
   1fc88:	subs	r3, r1, #0
   1fc8c:	bne	1fbf4 <GetDataSlab+0x3cd8>
   1fc90:	ldr	r7, [r8, #4]
   1fc94:	str	r3, [sl, r4, lsl #2]
   1fc98:	mov	r1, r7
   1fc9c:	mov	r0, r6
   1fca0:	bl	3fd18 <__aeabi_idivmod>
   1fca4:	ldr	r2, [sp, #196]	; 0xc4
   1fca8:	ldr	r2, [r2, r4, lsl #2]
   1fcac:	subs	r3, r1, #0
   1fcb0:	beq	1fbe0 <GetDataSlab+0x3cc4>
   1fcb4:	ldr	r1, [r8]
   1fcb8:	sub	r3, r7, r3
   1fcbc:	mla	r3, r2, r1, r3
   1fcc0:	add	r5, r5, r3, lsl #2
   1fcc4:	add	r6, r6, r3
   1fcc8:	add	r4, r4, #1
   1fccc:	add	r8, r8, #4
   1fcd0:	b	1fc60 <GetDataSlab+0x3d44>
   1fcd4:	ldr	r2, [ip], fp
   1fcd8:	add	r3, r3, #1
   1fcdc:	vmov	s15, r2
   1fce0:	vcvt.f64.u32	d7, s15
   1fce4:	vstmia	r0!, {d7}
   1fce8:	b	1faa4 <GetDataSlab+0x3b88>
   1fcec:	cmp	r2, #0
   1fcf0:	beq	1fb40 <GetDataSlab+0x3c24>
   1fcf4:	ldr	r3, [r8]
   1fcf8:	mul	r3, r3, r2
   1fcfc:	b	1fb38 <GetDataSlab+0x3c1c>
   1fd00:	add	r3, sp, #152	; 0x98
   1fd04:	add	r3, r3, r4, lsl #2
   1fd08:	ldr	r3, [r3, #-120]	; 0xffffff88
   1fd0c:	add	r6, r6, r3
   1fd10:	add	r5, r5, r3, lsl #2
   1fd14:	ldr	r3, [sp, #12]
   1fd18:	add	r9, r9, r3
   1fd1c:	b	1fa74 <GetDataSlab+0x3b58>
   1fd20:	ldr	r3, [r9]
   1fd24:	ldr	ip, [sp, #4]
   1fd28:	str	r3, [sp, #16]
   1fd2c:	sub	r3, r3, #1
   1fd30:	str	r3, [sp, #32]
   1fd34:	ldr	r3, [fp]
   1fd38:	mov	lr, fp
   1fd3c:	str	r3, [sp, #24]
   1fd40:	str	r3, [sp, #112]	; 0x70
   1fd44:	ldr	r3, [sp, #204]	; 0xcc
   1fd48:	mov	r6, #0
   1fd4c:	mov	r2, #1
   1fd50:	ldr	r3, [r3]
   1fd54:	str	r3, [sp, #12]
   1fd58:	str	r3, [sp, #20]
   1fd5c:	ldr	r3, [sp, #208]	; 0xd0
   1fd60:	cmp	r2, r3
   1fd64:	blt	1fe98 <GetDataSlab+0x3f7c>
   1fd68:	ldr	r3, [sp, #8]
   1fd6c:	add	r5, r3, r6, lsl #1
   1fd70:	ldr	r3, [sp, #16]
   1fd74:	cmp	r3, #1
   1fd78:	moveq	r9, #0
   1fd7c:	beq	1ff5c <GetDataSlab+0x4040>
   1fd80:	ldr	r3, [sp, #16]
   1fd84:	ldr	r2, [sp, #12]
   1fd88:	mov	r9, #0
   1fd8c:	mul	r3, r3, r2
   1fd90:	ldr	r2, [sp, #24]
   1fd94:	sub	r3, r2, r3
   1fd98:	str	r3, [sp, #24]
   1fd9c:	ldr	r3, [sp, #16]
   1fda0:	ldr	r2, [sp, #16]
   1fda4:	lsl	fp, r3, #1
   1fda8:	ldr	r3, [sp, #12]
   1fdac:	bic	r3, r3, r3, asr #31
   1fdb0:	mul	r2, r3, r2
   1fdb4:	mul	r3, r3, fp
   1fdb8:	str	r2, [sp, #16]
   1fdbc:	str	r3, [sp, #8]
   1fdc0:	ldr	r3, [sp, #20]
   1fdc4:	cmp	r9, r3
   1fdc8:	bge	1c04c <GetDataSlab+0x130>
   1fdcc:	ldr	r3, [sp, #196]	; 0xc4
   1fdd0:	ldr	r1, [r3]
   1fdd4:	ldr	r3, [sp]
   1fdd8:	cmp	r1, #0
   1fddc:	addne	r5, r5, r1, lsl #1
   1fde0:	add	r0, r3, r9, lsl #3
   1fde4:	addne	r6, r6, r1
   1fde8:	mov	ip, r5
   1fdec:	mov	r3, #0
   1fdf0:	ldr	r2, [sp, #12]
   1fdf4:	cmp	r3, r2
   1fdf8:	blt	20024 <GetDataSlab+0x4108>
   1fdfc:	ldr	r3, [sp, #24]
   1fe00:	ldr	r8, [sp, #4]
   1fe04:	sub	r2, r3, r1
   1fe08:	ldr	r3, [sp, #16]
   1fe0c:	mov	r4, #1
   1fe10:	add	r3, r3, r6
   1fe14:	add	r6, r3, r2
   1fe18:	ldr	r3, [sp, #8]
   1fe1c:	add	r3, r3, r2, lsl #1
   1fe20:	add	r5, r5, r3
   1fe24:	ldr	r3, [sp, #208]	; 0xd0
   1fe28:	cmp	r4, r3
   1fe2c:	bge	20064 <GetDataSlab+0x4148>
   1fe30:	ldr	r3, [sl, r4, lsl #2]
   1fe34:	ldr	r2, [sp, #204]	; 0xcc
   1fe38:	add	r3, r3, #1
   1fe3c:	str	r3, [sl, r4, lsl #2]
   1fe40:	mov	r0, r3
   1fe44:	ldr	r1, [r2, r4, lsl #2]
   1fe48:	bl	3fd18 <__aeabi_idivmod>
   1fe4c:	subs	r3, r1, #0
   1fe50:	bne	20050 <GetDataSlab+0x4134>
   1fe54:	ldr	r7, [r8, #4]
   1fe58:	str	r3, [sl, r4, lsl #2]
   1fe5c:	mov	r1, r7
   1fe60:	mov	r0, r6
   1fe64:	bl	3fd18 <__aeabi_idivmod>
   1fe68:	ldr	r2, [sp, #196]	; 0xc4
   1fe6c:	ldr	r2, [r2, r4, lsl #2]
   1fe70:	subs	r3, r1, #0
   1fe74:	beq	2003c <GetDataSlab+0x4120>
   1fe78:	ldr	r1, [r8]
   1fe7c:	sub	r3, r7, r3
   1fe80:	mla	r3, r2, r1, r3
   1fe84:	add	r5, r5, r3, lsl #1
   1fe88:	add	r6, r6, r3
   1fe8c:	add	r4, r4, #1
   1fe90:	add	r8, r8, #4
   1fe94:	b	1fe24 <GetDataSlab+0x3f08>
   1fe98:	ldr	r3, [r9, r2, lsl #2]
   1fe9c:	mov	r5, ip
   1fea0:	sub	r3, r3, #1
   1fea4:	str	r3, [r4, r2, lsl #2]
   1fea8:	ldr	r3, [lr], #4
   1feac:	mov	r1, lr
   1feb0:	str	r3, [ip, #4]
   1feb4:	cmp	r1, fp
   1feb8:	bne	1feec <GetDataSlab+0x3fd0>
   1febc:	ldr	r3, [sp, #204]	; 0xcc
   1fec0:	ldr	r1, [sp, #20]
   1fec4:	add	ip, ip, #4
   1fec8:	ldr	r3, [r3, r2, lsl #2]
   1fecc:	mul	r3, r3, r1
   1fed0:	ldr	r1, [sp, #196]	; 0xc4
   1fed4:	str	r3, [sp, #20]
   1fed8:	ldr	r3, [r5]
   1fedc:	ldr	r1, [r1, r2, lsl #2]
   1fee0:	add	r2, r2, #1
   1fee4:	mla	r6, r1, r3, r6
   1fee8:	b	1fd5c <GetDataSlab+0x3e40>
   1feec:	ldr	r7, [r4, r2, lsl #2]
   1fef0:	mov	r0, r1
   1fef4:	ldr	r3, [r1, #-4]!
   1fef8:	mul	r3, r3, r7
   1fefc:	ldr	r7, [ip, #4]
   1ff00:	str	r3, [r4, r2, lsl #2]
   1ff04:	ldr	r3, [r0]
   1ff08:	mul	r3, r3, r7
   1ff0c:	str	r3, [ip, #4]
   1ff10:	b	1feb4 <GetDataSlab+0x3f98>
   1ff14:	ldrsh	r1, [ip, #2]!
   1ff18:	add	r2, r2, #1
   1ff1c:	vmov	s15, r1
   1ff20:	vcvt.f64.s32	d7, s15
   1ff24:	vstmia	r0!, {d7}
   1ff28:	b	1ff8c <GetDataSlab+0x4070>
   1ff2c:	cmp	r2, #0
   1ff30:	beq	20018 <GetDataSlab+0x40fc>
   1ff34:	ldr	r3, [r8]
   1ff38:	mul	r3, r3, r2
   1ff3c:	b	20010 <GetDataSlab+0x40f4>
   1ff40:	add	r3, sp, #152	; 0x98
   1ff44:	add	r3, r3, r4, lsl #2
   1ff48:	ldr	r3, [r3, #-120]	; 0xffffff88
   1ff4c:	add	r6, r6, r3
   1ff50:	add	r5, r5, r3, lsl #1
   1ff54:	ldr	r3, [sp, #12]
   1ff58:	add	r9, r9, r3
   1ff5c:	ldr	r3, [sp, #20]
   1ff60:	cmp	r9, r3
   1ff64:	bge	1c04c <GetDataSlab+0x130>
   1ff68:	ldr	r3, [sp, #196]	; 0xc4
   1ff6c:	ldr	r2, [sp]
   1ff70:	ldr	r3, [r3]
   1ff74:	add	r0, r2, r9, lsl #3
   1ff78:	cmp	r3, #0
   1ff7c:	addne	r5, r5, r3, lsl #1
   1ff80:	addne	r6, r6, r3
   1ff84:	sub	ip, r5, #2
   1ff88:	mov	r2, #0
   1ff8c:	ldr	r1, [sp, #12]
   1ff90:	cmp	r2, r1
   1ff94:	blt	1ff14 <GetDataSlab+0x3ff8>
   1ff98:	ldr	r2, [sp, #24]
   1ff9c:	ldr	r8, [sp, #4]
   1ffa0:	sub	r3, r2, r3
   1ffa4:	ldr	r4, [sp, #16]
   1ffa8:	add	r6, r6, r3
   1ffac:	add	r5, r5, r3, lsl #1
   1ffb0:	ldr	r3, [sp, #208]	; 0xd0
   1ffb4:	cmp	r4, r3
   1ffb8:	bge	1ff54 <GetDataSlab+0x4038>
   1ffbc:	ldr	r3, [sl, r4, lsl #2]
   1ffc0:	ldr	r2, [sp, #204]	; 0xcc
   1ffc4:	add	r3, r3, #1
   1ffc8:	str	r3, [sl, r4, lsl #2]
   1ffcc:	mov	r0, r3
   1ffd0:	ldr	r1, [r2, r4, lsl #2]
   1ffd4:	bl	3fd18 <__aeabi_idivmod>
   1ffd8:	subs	r3, r1, #0
   1ffdc:	bne	1ff40 <GetDataSlab+0x4024>
   1ffe0:	ldr	r7, [r8, #4]
   1ffe4:	str	r3, [sl, r4, lsl #2]
   1ffe8:	mov	r1, r7
   1ffec:	mov	r0, r6
   1fff0:	bl	3fd18 <__aeabi_idivmod>
   1fff4:	ldr	r2, [sp, #196]	; 0xc4
   1fff8:	ldr	r2, [r2, r4, lsl #2]
   1fffc:	subs	r3, r1, #0
   20000:	beq	1ff2c <GetDataSlab+0x4010>
   20004:	ldr	r1, [r8]
   20008:	sub	r3, r7, r3
   2000c:	mla	r3, r2, r1, r3
   20010:	add	r5, r5, r3, lsl #1
   20014:	add	r6, r6, r3
   20018:	add	r4, r4, #1
   2001c:	add	r8, r8, #4
   20020:	b	1ffb0 <GetDataSlab+0x4094>
   20024:	ldrsh	r2, [ip], fp
   20028:	add	r3, r3, #1
   2002c:	vmov	s15, r2
   20030:	vcvt.f64.s32	d7, s15
   20034:	vstmia	r0!, {d7}
   20038:	b	1fdf0 <GetDataSlab+0x3ed4>
   2003c:	cmp	r2, #0
   20040:	beq	1fe8c <GetDataSlab+0x3f70>
   20044:	ldr	r3, [r8]
   20048:	mul	r3, r3, r2
   2004c:	b	1fe84 <GetDataSlab+0x3f68>
   20050:	add	r3, sp, #152	; 0x98
   20054:	add	r3, r3, r4, lsl #2
   20058:	ldr	r3, [r3, #-120]	; 0xffffff88
   2005c:	add	r6, r6, r3
   20060:	add	r5, r5, r3, lsl #1
   20064:	ldr	r3, [sp, #12]
   20068:	add	r9, r9, r3
   2006c:	b	1fdc0 <GetDataSlab+0x3ea4>
   20070:	ldr	r3, [r9]
   20074:	ldr	ip, [sp, #4]
   20078:	str	r3, [sp, #16]
   2007c:	sub	r3, r3, #1
   20080:	str	r3, [sp, #32]
   20084:	ldr	r3, [fp]
   20088:	mov	lr, fp
   2008c:	str	r3, [sp, #24]
   20090:	str	r3, [sp, #112]	; 0x70
   20094:	ldr	r3, [sp, #204]	; 0xcc
   20098:	mov	r6, #0
   2009c:	mov	r2, #1
   200a0:	ldr	r3, [r3]
   200a4:	str	r3, [sp, #12]
   200a8:	str	r3, [sp, #20]
   200ac:	ldr	r3, [sp, #208]	; 0xd0
   200b0:	cmp	r2, r3
   200b4:	blt	201e8 <GetDataSlab+0x42cc>
   200b8:	ldr	r3, [sp, #8]
   200bc:	add	r5, r3, r6, lsl #1
   200c0:	ldr	r3, [sp, #16]
   200c4:	cmp	r3, #1
   200c8:	moveq	r9, #0
   200cc:	beq	202ac <GetDataSlab+0x4390>
   200d0:	ldr	r3, [sp, #16]
   200d4:	ldr	r2, [sp, #12]
   200d8:	mov	r9, #0
   200dc:	mul	r3, r3, r2
   200e0:	ldr	r2, [sp, #24]
   200e4:	sub	r3, r2, r3
   200e8:	str	r3, [sp, #24]
   200ec:	ldr	r3, [sp, #16]
   200f0:	ldr	r2, [sp, #16]
   200f4:	lsl	fp, r3, #1
   200f8:	ldr	r3, [sp, #12]
   200fc:	bic	r3, r3, r3, asr #31
   20100:	mul	r2, r2, r3
   20104:	mul	r3, r3, fp
   20108:	str	r2, [sp, #16]
   2010c:	str	r3, [sp, #8]
   20110:	ldr	r3, [sp, #20]
   20114:	cmp	r9, r3
   20118:	bge	1c04c <GetDataSlab+0x130>
   2011c:	ldr	r3, [sp, #196]	; 0xc4
   20120:	ldr	r1, [r3]
   20124:	ldr	r3, [sp]
   20128:	cmp	r1, #0
   2012c:	addne	r5, r5, r1, lsl #1
   20130:	add	r0, r3, r9, lsl #3
   20134:	addne	r6, r6, r1
   20138:	mov	ip, r5
   2013c:	mov	r3, #0
   20140:	ldr	r2, [sp, #12]
   20144:	cmp	r3, r2
   20148:	blt	20374 <GetDataSlab+0x4458>
   2014c:	ldr	r3, [sp, #24]
   20150:	ldr	r8, [sp, #4]
   20154:	sub	r2, r3, r1
   20158:	ldr	r3, [sp, #16]
   2015c:	mov	r4, #1
   20160:	add	r3, r3, r6
   20164:	add	r6, r3, r2
   20168:	ldr	r3, [sp, #8]
   2016c:	add	r3, r3, r2, lsl #1
   20170:	add	r5, r5, r3
   20174:	ldr	r3, [sp, #208]	; 0xd0
   20178:	cmp	r4, r3
   2017c:	bge	203b4 <GetDataSlab+0x4498>
   20180:	ldr	r3, [sl, r4, lsl #2]
   20184:	ldr	r2, [sp, #204]	; 0xcc
   20188:	add	r3, r3, #1
   2018c:	str	r3, [sl, r4, lsl #2]
   20190:	mov	r0, r3
   20194:	ldr	r1, [r2, r4, lsl #2]
   20198:	bl	3fd18 <__aeabi_idivmod>
   2019c:	subs	r3, r1, #0
   201a0:	bne	203a0 <GetDataSlab+0x4484>
   201a4:	ldr	r7, [r8, #4]
   201a8:	str	r3, [sl, r4, lsl #2]
   201ac:	mov	r1, r7
   201b0:	mov	r0, r6
   201b4:	bl	3fd18 <__aeabi_idivmod>
   201b8:	ldr	r2, [sp, #196]	; 0xc4
   201bc:	ldr	r2, [r2, r4, lsl #2]
   201c0:	subs	r3, r1, #0
   201c4:	beq	2038c <GetDataSlab+0x4470>
   201c8:	ldr	r1, [r8]
   201cc:	sub	r3, r7, r3
   201d0:	mla	r3, r2, r1, r3
   201d4:	add	r5, r5, r3, lsl #1
   201d8:	add	r6, r6, r3
   201dc:	add	r4, r4, #1
   201e0:	add	r8, r8, #4
   201e4:	b	20174 <GetDataSlab+0x4258>
   201e8:	ldr	r3, [r9, r2, lsl #2]
   201ec:	mov	r5, ip
   201f0:	sub	r3, r3, #1
   201f4:	str	r3, [r4, r2, lsl #2]
   201f8:	ldr	r3, [lr], #4
   201fc:	mov	r1, lr
   20200:	str	r3, [ip, #4]
   20204:	cmp	r1, fp
   20208:	bne	2023c <GetDataSlab+0x4320>
   2020c:	ldr	r3, [sp, #204]	; 0xcc
   20210:	ldr	r1, [sp, #20]
   20214:	add	ip, ip, #4
   20218:	ldr	r3, [r3, r2, lsl #2]
   2021c:	mul	r3, r3, r1
   20220:	ldr	r1, [sp, #196]	; 0xc4
   20224:	str	r3, [sp, #20]
   20228:	ldr	r3, [r5]
   2022c:	ldr	r1, [r1, r2, lsl #2]
   20230:	add	r2, r2, #1
   20234:	mla	r6, r1, r3, r6
   20238:	b	200ac <GetDataSlab+0x4190>
   2023c:	ldr	r7, [r4, r2, lsl #2]
   20240:	mov	r0, r1
   20244:	ldr	r3, [r1, #-4]!
   20248:	mul	r3, r3, r7
   2024c:	ldr	r7, [ip, #4]
   20250:	str	r3, [r4, r2, lsl #2]
   20254:	ldr	r3, [r0]
   20258:	mul	r3, r3, r7
   2025c:	str	r3, [ip, #4]
   20260:	b	20204 <GetDataSlab+0x42e8>
   20264:	ldrh	r1, [ip, #2]!
   20268:	add	r2, r2, #1
   2026c:	vmov	s15, r1
   20270:	vcvt.f64.u32	d7, s15
   20274:	vstmia	r0!, {d7}
   20278:	b	202dc <GetDataSlab+0x43c0>
   2027c:	cmp	r2, #0
   20280:	beq	20368 <GetDataSlab+0x444c>
   20284:	ldr	r3, [r8]
   20288:	mul	r3, r3, r2
   2028c:	b	20360 <GetDataSlab+0x4444>
   20290:	add	r3, sp, #152	; 0x98
   20294:	add	r3, r3, r4, lsl #2
   20298:	ldr	r3, [r3, #-120]	; 0xffffff88
   2029c:	add	r6, r6, r3
   202a0:	add	r5, r5, r3, lsl #1
   202a4:	ldr	r3, [sp, #12]
   202a8:	add	r9, r9, r3
   202ac:	ldr	r3, [sp, #20]
   202b0:	cmp	r9, r3
   202b4:	bge	1c04c <GetDataSlab+0x130>
   202b8:	ldr	r3, [sp, #196]	; 0xc4
   202bc:	ldr	r2, [sp]
   202c0:	ldr	r3, [r3]
   202c4:	add	r0, r2, r9, lsl #3
   202c8:	cmp	r3, #0
   202cc:	addne	r5, r5, r3, lsl #1
   202d0:	addne	r6, r6, r3
   202d4:	sub	ip, r5, #2
   202d8:	mov	r2, #0
   202dc:	ldr	r1, [sp, #12]
   202e0:	cmp	r2, r1
   202e4:	blt	20264 <GetDataSlab+0x4348>
   202e8:	ldr	r2, [sp, #24]
   202ec:	ldr	r8, [sp, #4]
   202f0:	sub	r3, r2, r3
   202f4:	ldr	r4, [sp, #16]
   202f8:	add	r6, r6, r3
   202fc:	add	r5, r5, r3, lsl #1
   20300:	ldr	r3, [sp, #208]	; 0xd0
   20304:	cmp	r4, r3
   20308:	bge	202a4 <GetDataSlab+0x4388>
   2030c:	ldr	r3, [sl, r4, lsl #2]
   20310:	ldr	r2, [sp, #204]	; 0xcc
   20314:	add	r3, r3, #1
   20318:	str	r3, [sl, r4, lsl #2]
   2031c:	mov	r0, r3
   20320:	ldr	r1, [r2, r4, lsl #2]
   20324:	bl	3fd18 <__aeabi_idivmod>
   20328:	subs	r3, r1, #0
   2032c:	bne	20290 <GetDataSlab+0x4374>
   20330:	ldr	r7, [r8, #4]
   20334:	str	r3, [sl, r4, lsl #2]
   20338:	mov	r1, r7
   2033c:	mov	r0, r6
   20340:	bl	3fd18 <__aeabi_idivmod>
   20344:	ldr	r2, [sp, #196]	; 0xc4
   20348:	ldr	r2, [r2, r4, lsl #2]
   2034c:	subs	r3, r1, #0
   20350:	beq	2027c <GetDataSlab+0x4360>
   20354:	ldr	r1, [r8]
   20358:	sub	r3, r7, r3
   2035c:	mla	r3, r2, r1, r3
   20360:	add	r5, r5, r3, lsl #1
   20364:	add	r6, r6, r3
   20368:	add	r4, r4, #1
   2036c:	add	r8, r8, #4
   20370:	b	20300 <GetDataSlab+0x43e4>
   20374:	ldrh	r2, [ip], fp
   20378:	add	r3, r3, #1
   2037c:	vmov	s15, r2
   20380:	vcvt.f64.u32	d7, s15
   20384:	vstmia	r0!, {d7}
   20388:	b	20140 <GetDataSlab+0x4224>
   2038c:	cmp	r2, #0
   20390:	beq	201dc <GetDataSlab+0x42c0>
   20394:	ldr	r3, [r8]
   20398:	mul	r3, r3, r2
   2039c:	b	201d4 <GetDataSlab+0x42b8>
   203a0:	add	r3, sp, #152	; 0x98
   203a4:	add	r3, r3, r4, lsl #2
   203a8:	ldr	r3, [r3, #-120]	; 0xffffff88
   203ac:	add	r6, r6, r3
   203b0:	add	r5, r5, r3, lsl #1
   203b4:	ldr	r3, [sp, #12]
   203b8:	add	r9, r9, r3
   203bc:	b	20110 <GetDataSlab+0x41f4>
   203c0:	ldr	r3, [r9]
   203c4:	ldr	ip, [sp, #4]
   203c8:	str	r3, [sp, #12]
   203cc:	sub	r3, r3, #1
   203d0:	str	r3, [sp, #32]
   203d4:	ldr	r3, [fp]
   203d8:	mov	lr, fp
   203dc:	str	r3, [sp, #24]
   203e0:	str	r3, [sp, #112]	; 0x70
   203e4:	ldr	r3, [sp, #204]	; 0xcc
   203e8:	mov	r6, #0
   203ec:	mov	r2, #1
   203f0:	ldr	r3, [r3]
   203f4:	str	r3, [sp, #16]
   203f8:	str	r3, [sp, #20]
   203fc:	ldr	r3, [sp, #208]	; 0xd0
   20400:	cmp	r2, r3
   20404:	blt	2052c <GetDataSlab+0x4610>
   20408:	ldr	r3, [sp, #8]
   2040c:	add	r5, r3, r6
   20410:	ldr	r3, [sp, #12]
   20414:	cmp	r3, #1
   20418:	moveq	r9, #0
   2041c:	beq	205ec <GetDataSlab+0x46d0>
   20420:	ldr	r2, [sp, #16]
   20424:	ldr	r3, [sp, #12]
   20428:	mov	r9, #0
   2042c:	mul	r3, r3, r2
   20430:	ldr	r2, [sp, #24]
   20434:	sub	r3, r2, r3
   20438:	str	r3, [sp, #8]
   2043c:	ldr	r3, [sp, #16]
   20440:	ldr	r2, [sp, #12]
   20444:	bic	r3, r3, r3, asr #31
   20448:	mul	fp, r2, r3
   2044c:	rsb	r3, r2, #0
   20450:	str	r3, [sp, #24]
   20454:	ldr	r3, [sp, #20]
   20458:	cmp	r9, r3
   2045c:	bge	1c04c <GetDataSlab+0x130>
   20460:	ldr	r3, [sp, #196]	; 0xc4
   20464:	ldr	r0, [r3]
   20468:	ldr	r3, [sp]
   2046c:	cmp	r0, #0
   20470:	addne	r5, r5, r0
   20474:	add	ip, r3, r9, lsl #3
   20478:	addne	r6, r6, r0
   2047c:	mov	r1, r5
   20480:	mov	r3, #0
   20484:	ldr	r2, [sp, #12]
   20488:	add	r1, r1, r2
   2048c:	ldr	r2, [sp, #16]
   20490:	cmp	r3, r2
   20494:	blt	206b4 <GetDataSlab+0x4798>
   20498:	ldr	r3, [sp, #8]
   2049c:	ldr	r8, [sp, #4]
   204a0:	sub	r2, r3, r0
   204a4:	add	r3, fp, r6
   204a8:	add	r6, r3, r2
   204ac:	add	r3, r2, fp
   204b0:	add	r5, r5, r3
   204b4:	mov	r4, #1
   204b8:	ldr	r3, [sp, #208]	; 0xd0
   204bc:	cmp	r4, r3
   204c0:	bge	206f8 <GetDataSlab+0x47dc>
   204c4:	ldr	r3, [sl, r4, lsl #2]
   204c8:	ldr	r2, [sp, #204]	; 0xcc
   204cc:	add	r3, r3, #1
   204d0:	str	r3, [sl, r4, lsl #2]
   204d4:	mov	r0, r3
   204d8:	ldr	r1, [r2, r4, lsl #2]
   204dc:	bl	3fd18 <__aeabi_idivmod>
   204e0:	subs	r3, r1, #0
   204e4:	bne	206e4 <GetDataSlab+0x47c8>
   204e8:	ldr	r7, [r8, #4]
   204ec:	str	r3, [sl, r4, lsl #2]
   204f0:	mov	r1, r7
   204f4:	mov	r0, r6
   204f8:	bl	3fd18 <__aeabi_idivmod>
   204fc:	ldr	r2, [sp, #196]	; 0xc4
   20500:	ldr	r2, [r2, r4, lsl #2]
   20504:	subs	r3, r1, #0
   20508:	beq	206d0 <GetDataSlab+0x47b4>
   2050c:	ldr	r1, [r8]
   20510:	sub	r3, r7, r3
   20514:	mla	r3, r2, r1, r3
   20518:	add	r5, r5, r3
   2051c:	add	r6, r6, r3
   20520:	add	r4, r4, #1
   20524:	add	r8, r8, #4
   20528:	b	204b8 <GetDataSlab+0x459c>
   2052c:	ldr	r3, [r9, r2, lsl #2]
   20530:	mov	r5, ip
   20534:	sub	r3, r3, #1
   20538:	str	r3, [r4, r2, lsl #2]
   2053c:	ldr	r3, [lr], #4
   20540:	mov	r1, lr
   20544:	str	r3, [ip, #4]
   20548:	cmp	r1, fp
   2054c:	bne	20580 <GetDataSlab+0x4664>
   20550:	ldr	r3, [sp, #204]	; 0xcc
   20554:	ldr	r1, [sp, #20]
   20558:	add	ip, ip, #4
   2055c:	ldr	r3, [r3, r2, lsl #2]
   20560:	mul	r3, r3, r1
   20564:	ldr	r1, [sp, #196]	; 0xc4
   20568:	str	r3, [sp, #20]
   2056c:	ldr	r3, [r5]
   20570:	ldr	r1, [r1, r2, lsl #2]
   20574:	add	r2, r2, #1
   20578:	mla	r6, r1, r3, r6
   2057c:	b	203fc <GetDataSlab+0x44e0>
   20580:	ldr	r7, [r4, r2, lsl #2]
   20584:	mov	r0, r1
   20588:	ldr	r3, [r1, #-4]!
   2058c:	mul	r3, r3, r7
   20590:	ldr	r7, [ip, #4]
   20594:	str	r3, [r4, r2, lsl #2]
   20598:	ldr	r3, [r0]
   2059c:	mul	r3, r3, r7
   205a0:	str	r3, [ip, #4]
   205a4:	b	20548 <GetDataSlab+0x462c>
   205a8:	ldrsb	r3, [r1], #1
   205ac:	vmov	s15, r3
   205b0:	vcvt.f64.s32	d7, s15
   205b4:	vstmia	r0!, {d7}
   205b8:	b	20618 <GetDataSlab+0x46fc>
   205bc:	cmp	r2, #0
   205c0:	beq	206a8 <GetDataSlab+0x478c>
   205c4:	ldr	r3, [r8]
   205c8:	mul	r3, r3, r2
   205cc:	b	206a0 <GetDataSlab+0x4784>
   205d0:	add	r3, sp, #152	; 0x98
   205d4:	add	r3, r3, r4, lsl #2
   205d8:	ldr	r3, [r3, #-120]	; 0xffffff88
   205dc:	add	r6, r6, r3
   205e0:	add	r5, r5, r3
   205e4:	ldr	r3, [sp, #16]
   205e8:	add	r9, r9, r3
   205ec:	ldr	r3, [sp, #20]
   205f0:	cmp	r9, r3
   205f4:	bge	1c04c <GetDataSlab+0x130>
   205f8:	ldr	r3, [sp, #196]	; 0xc4
   205fc:	ldr	r2, [r3]
   20600:	ldr	r3, [sp]
   20604:	cmp	r2, #0
   20608:	addne	r5, r5, r2
   2060c:	addne	r6, r6, r2
   20610:	add	r0, r3, r9, lsl #3
   20614:	mov	r1, r5
   20618:	ldr	ip, [sp, #16]
   2061c:	sub	r3, r1, r5
   20620:	cmp	ip, r3
   20624:	bgt	205a8 <GetDataSlab+0x468c>
   20628:	ldr	r3, [sp, #24]
   2062c:	ldr	r8, [sp, #4]
   20630:	sub	r3, r3, r2
   20634:	ldr	r4, [sp, #12]
   20638:	add	r6, r6, r3
   2063c:	add	r5, r5, r3
   20640:	ldr	r3, [sp, #208]	; 0xd0
   20644:	cmp	r4, r3
   20648:	bge	205e4 <GetDataSlab+0x46c8>
   2064c:	ldr	r3, [sl, r4, lsl #2]
   20650:	ldr	r2, [sp, #204]	; 0xcc
   20654:	add	r3, r3, #1
   20658:	str	r3, [sl, r4, lsl #2]
   2065c:	mov	r0, r3
   20660:	ldr	r1, [r2, r4, lsl #2]
   20664:	bl	3fd18 <__aeabi_idivmod>
   20668:	subs	r3, r1, #0
   2066c:	bne	205d0 <GetDataSlab+0x46b4>
   20670:	ldr	r7, [r8, #4]
   20674:	str	r3, [sl, r4, lsl #2]
   20678:	mov	r1, r7
   2067c:	mov	r0, r6
   20680:	bl	3fd18 <__aeabi_idivmod>
   20684:	ldr	r2, [sp, #196]	; 0xc4
   20688:	ldr	r2, [r2, r4, lsl #2]
   2068c:	subs	r3, r1, #0
   20690:	beq	205bc <GetDataSlab+0x46a0>
   20694:	ldr	r1, [r8]
   20698:	sub	r3, r7, r3
   2069c:	mla	r3, r2, r1, r3
   206a0:	add	r5, r5, r3
   206a4:	add	r6, r6, r3
   206a8:	add	r4, r4, #1
   206ac:	add	r8, r8, #4
   206b0:	b	20640 <GetDataSlab+0x4724>
   206b4:	ldr	r2, [sp, #24]
   206b8:	add	r3, r3, #1
   206bc:	ldrsb	r2, [r1, r2]
   206c0:	vmov	s15, r2
   206c4:	vcvt.f64.s32	d7, s15
   206c8:	vstmia	ip!, {d7}
   206cc:	b	20484 <GetDataSlab+0x4568>
   206d0:	cmp	r2, #0
   206d4:	beq	20520 <GetDataSlab+0x4604>
   206d8:	ldr	r3, [r8]
   206dc:	mul	r3, r3, r2
   206e0:	b	20518 <GetDataSlab+0x45fc>
   206e4:	add	r3, sp, #152	; 0x98
   206e8:	add	r3, r3, r4, lsl #2
   206ec:	ldr	r3, [r3, #-120]	; 0xffffff88
   206f0:	add	r6, r6, r3
   206f4:	add	r5, r5, r3
   206f8:	ldr	r3, [sp, #16]
   206fc:	add	r9, r9, r3
   20700:	b	20454 <GetDataSlab+0x4538>
   20704:	ldr	r3, [r9]
   20708:	ldr	ip, [sp, #4]
   2070c:	str	r3, [sp, #12]
   20710:	sub	r3, r3, #1
   20714:	str	r3, [sp, #32]
   20718:	ldr	r3, [fp]
   2071c:	mov	lr, fp
   20720:	str	r3, [sp, #24]
   20724:	str	r3, [sp, #112]	; 0x70
   20728:	ldr	r3, [sp, #204]	; 0xcc
   2072c:	mov	r6, #0
   20730:	mov	r2, #1
   20734:	ldr	r3, [r3]
   20738:	str	r3, [sp, #16]
   2073c:	str	r3, [sp, #20]
   20740:	ldr	r3, [sp, #208]	; 0xd0
   20744:	cmp	r2, r3
   20748:	blt	20870 <GetDataSlab+0x4954>
   2074c:	ldr	r3, [sp, #8]
   20750:	add	r5, r3, r6
   20754:	ldr	r3, [sp, #12]
   20758:	cmp	r3, #1
   2075c:	moveq	r9, #0
   20760:	beq	20930 <GetDataSlab+0x4a14>
   20764:	ldr	r2, [sp, #16]
   20768:	ldr	r3, [sp, #12]
   2076c:	mov	r9, #0
   20770:	mul	r3, r3, r2
   20774:	ldr	r2, [sp, #24]
   20778:	sub	r3, r2, r3
   2077c:	str	r3, [sp, #8]
   20780:	ldr	r3, [sp, #16]
   20784:	ldr	r2, [sp, #12]
   20788:	bic	r3, r3, r3, asr #31
   2078c:	mul	fp, r2, r3
   20790:	rsb	r3, r2, #0
   20794:	str	r3, [sp, #24]
   20798:	ldr	r3, [sp, #20]
   2079c:	cmp	r9, r3
   207a0:	bge	1c04c <GetDataSlab+0x130>
   207a4:	ldr	r3, [sp, #196]	; 0xc4
   207a8:	ldr	r0, [r3]
   207ac:	ldr	r3, [sp]
   207b0:	cmp	r0, #0
   207b4:	addne	r5, r5, r0
   207b8:	add	ip, r3, r9, lsl #3
   207bc:	addne	r6, r6, r0
   207c0:	mov	r1, r5
   207c4:	mov	r3, #0
   207c8:	ldr	r2, [sp, #12]
   207cc:	add	r1, r1, r2
   207d0:	ldr	r2, [sp, #16]
   207d4:	cmp	r3, r2
   207d8:	blt	209f8 <GetDataSlab+0x4adc>
   207dc:	ldr	r3, [sp, #8]
   207e0:	ldr	r8, [sp, #4]
   207e4:	sub	r2, r3, r0
   207e8:	add	r3, fp, r6
   207ec:	add	r6, r3, r2
   207f0:	add	r3, r2, fp
   207f4:	add	r5, r5, r3
   207f8:	mov	r4, #1
   207fc:	ldr	r3, [sp, #208]	; 0xd0
   20800:	cmp	r4, r3
   20804:	bge	20a3c <GetDataSlab+0x4b20>
   20808:	ldr	r3, [sl, r4, lsl #2]
   2080c:	ldr	r2, [sp, #204]	; 0xcc
   20810:	add	r3, r3, #1
   20814:	str	r3, [sl, r4, lsl #2]
   20818:	mov	r0, r3
   2081c:	ldr	r1, [r2, r4, lsl #2]
   20820:	bl	3fd18 <__aeabi_idivmod>
   20824:	subs	r3, r1, #0
   20828:	bne	20a28 <GetDataSlab+0x4b0c>
   2082c:	ldr	r7, [r8, #4]
   20830:	str	r3, [sl, r4, lsl #2]
   20834:	mov	r1, r7
   20838:	mov	r0, r6
   2083c:	bl	3fd18 <__aeabi_idivmod>
   20840:	ldr	r2, [sp, #196]	; 0xc4
   20844:	ldr	r2, [r2, r4, lsl #2]
   20848:	subs	r3, r1, #0
   2084c:	beq	20a14 <GetDataSlab+0x4af8>
   20850:	ldr	r1, [r8]
   20854:	sub	r3, r7, r3
   20858:	mla	r3, r2, r1, r3
   2085c:	add	r5, r5, r3
   20860:	add	r6, r6, r3
   20864:	add	r4, r4, #1
   20868:	add	r8, r8, #4
   2086c:	b	207fc <GetDataSlab+0x48e0>
   20870:	ldr	r3, [r9, r2, lsl #2]
   20874:	mov	r5, ip
   20878:	sub	r3, r3, #1
   2087c:	str	r3, [r4, r2, lsl #2]
   20880:	ldr	r3, [lr], #4
   20884:	mov	r1, lr
   20888:	str	r3, [ip, #4]
   2088c:	cmp	fp, r1
   20890:	bne	208c4 <GetDataSlab+0x49a8>
   20894:	ldr	r3, [sp, #204]	; 0xcc
   20898:	ldr	r1, [sp, #20]
   2089c:	add	ip, ip, #4
   208a0:	ldr	r3, [r3, r2, lsl #2]
   208a4:	mul	r3, r3, r1
   208a8:	ldr	r1, [sp, #196]	; 0xc4
   208ac:	str	r3, [sp, #20]
   208b0:	ldr	r3, [r5]
   208b4:	ldr	r1, [r1, r2, lsl #2]
   208b8:	add	r2, r2, #1
   208bc:	mla	r6, r1, r3, r6
   208c0:	b	20740 <GetDataSlab+0x4824>
   208c4:	ldr	r7, [r4, r2, lsl #2]
   208c8:	mov	r0, r1
   208cc:	ldr	r3, [r1, #-4]!
   208d0:	mul	r3, r3, r7
   208d4:	ldr	r7, [ip, #4]
   208d8:	str	r3, [r4, r2, lsl #2]
   208dc:	ldr	r3, [r0]
   208e0:	mul	r3, r3, r7
   208e4:	str	r3, [ip, #4]
   208e8:	b	2088c <GetDataSlab+0x4970>
   208ec:	ldrb	r3, [r1], #1
   208f0:	vmov	s15, r3
   208f4:	vcvt.f64.u32	d7, s15
   208f8:	vstmia	r0!, {d7}
   208fc:	b	2095c <GetDataSlab+0x4a40>
   20900:	cmp	r2, #0
   20904:	beq	209ec <GetDataSlab+0x4ad0>
   20908:	ldr	r3, [r8]
   2090c:	mul	r3, r3, r2
   20910:	b	209e4 <GetDataSlab+0x4ac8>
   20914:	add	r3, sp, #152	; 0x98
   20918:	add	r3, r3, r4, lsl #2
   2091c:	ldr	r3, [r3, #-120]	; 0xffffff88
   20920:	add	r6, r6, r3
   20924:	add	r5, r5, r3
   20928:	ldr	r3, [sp, #16]
   2092c:	add	r9, r9, r3
   20930:	ldr	r3, [sp, #20]
   20934:	cmp	r9, r3
   20938:	bge	1c04c <GetDataSlab+0x130>
   2093c:	ldr	r3, [sp, #196]	; 0xc4
   20940:	ldr	r2, [r3]
   20944:	ldr	r3, [sp]
   20948:	cmp	r2, #0
   2094c:	addne	r5, r5, r2
   20950:	addne	r6, r6, r2
   20954:	add	r0, r3, r9, lsl #3
   20958:	mov	r1, r5
   2095c:	ldr	ip, [sp, #16]
   20960:	sub	r3, r1, r5
   20964:	cmp	ip, r3
   20968:	bgt	208ec <GetDataSlab+0x49d0>
   2096c:	ldr	r3, [sp, #24]
   20970:	ldr	r8, [sp, #4]
   20974:	sub	r3, r3, r2
   20978:	ldr	r4, [sp, #12]
   2097c:	add	r6, r6, r3
   20980:	add	r5, r5, r3
   20984:	ldr	r3, [sp, #208]	; 0xd0
   20988:	cmp	r4, r3
   2098c:	bge	20928 <GetDataSlab+0x4a0c>
   20990:	ldr	r3, [sl, r4, lsl #2]
   20994:	ldr	r2, [sp, #204]	; 0xcc
   20998:	add	r3, r3, #1
   2099c:	str	r3, [sl, r4, lsl #2]
   209a0:	mov	r0, r3
   209a4:	ldr	r1, [r2, r4, lsl #2]
   209a8:	bl	3fd18 <__aeabi_idivmod>
   209ac:	subs	r3, r1, #0
   209b0:	bne	20914 <GetDataSlab+0x49f8>
   209b4:	ldr	r7, [r8, #4]
   209b8:	str	r3, [sl, r4, lsl #2]
   209bc:	mov	r1, r7
   209c0:	mov	r0, r6
   209c4:	bl	3fd18 <__aeabi_idivmod>
   209c8:	ldr	r2, [sp, #196]	; 0xc4
   209cc:	ldr	r2, [r2, r4, lsl #2]
   209d0:	subs	r3, r1, #0
   209d4:	beq	20900 <GetDataSlab+0x49e4>
   209d8:	ldr	r1, [r8]
   209dc:	sub	r3, r7, r3
   209e0:	mla	r3, r2, r1, r3
   209e4:	add	r5, r5, r3
   209e8:	add	r6, r6, r3
   209ec:	add	r4, r4, #1
   209f0:	add	r8, r8, #4
   209f4:	b	20984 <GetDataSlab+0x4a68>
   209f8:	ldr	r2, [sp, #24]
   209fc:	add	r3, r3, #1
   20a00:	ldrb	r2, [r1, r2]
   20a04:	vmov	s15, r2
   20a08:	vcvt.f64.u32	d7, s15
   20a0c:	vstmia	ip!, {d7}
   20a10:	b	207c8 <GetDataSlab+0x48ac>
   20a14:	cmp	r2, #0
   20a18:	beq	20864 <GetDataSlab+0x4948>
   20a1c:	ldr	r3, [r8]
   20a20:	mul	r3, r3, r2
   20a24:	b	2085c <GetDataSlab+0x4940>
   20a28:	add	r3, sp, #152	; 0x98
   20a2c:	add	r3, r3, r4, lsl #2
   20a30:	ldr	r3, [r3, #-120]	; 0xffffff88
   20a34:	add	r6, r6, r3
   20a38:	add	r5, r5, r3
   20a3c:	ldr	r3, [sp, #16]
   20a40:	add	r9, r9, r3
   20a44:	b	20798 <GetDataSlab+0x487c>
   20a48:	cmp	r5, #12
   20a4c:	bne	20da8 <GetDataSlab+0x4e8c>
   20a50:	ldr	r3, [r9]
   20a54:	ldr	ip, [sp, #4]
   20a58:	str	r3, [sp, #16]
   20a5c:	sub	r3, r3, #1
   20a60:	str	r3, [sp, #32]
   20a64:	ldr	r3, [fp]
   20a68:	mov	lr, fp
   20a6c:	str	r3, [sp, #24]
   20a70:	str	r3, [sp, #112]	; 0x70
   20a74:	ldr	r3, [sp, #204]	; 0xcc
   20a78:	mov	r8, #0
   20a7c:	mov	r2, #1
   20a80:	ldr	r3, [r3]
   20a84:	str	r3, [sp, #12]
   20a88:	str	r3, [sp, #20]
   20a8c:	ldr	r3, [sp, #208]	; 0xd0
   20a90:	cmp	r2, r3
   20a94:	blt	20bd0 <GetDataSlab+0x4cb4>
   20a98:	ldr	r3, [sp, #8]
   20a9c:	add	r6, r3, r8, lsl #3
   20aa0:	ldr	r3, [sp, #16]
   20aa4:	cmp	r3, #1
   20aa8:	moveq	fp, #0
   20aac:	beq	20c90 <GetDataSlab+0x4d74>
   20ab0:	ldr	r3, [sp, #16]
   20ab4:	ldr	r2, [sp, #12]
   20ab8:	mov	fp, #0
   20abc:	mul	r3, r3, r2
   20ac0:	ldr	r2, [sp, #24]
   20ac4:	sub	r3, r2, r3
   20ac8:	str	r3, [sp, #24]
   20acc:	ldr	r3, [sp, #16]
   20ad0:	ldr	r2, [sp, #16]
   20ad4:	lsl	r3, r3, #3
   20ad8:	str	r3, [sp, #8]
   20adc:	ldr	r3, [sp, #12]
   20ae0:	bic	r3, r3, r3, asr #31
   20ae4:	mul	r2, r2, r3
   20ae8:	str	r2, [sp, #16]
   20aec:	ldr	r2, [sp, #8]
   20af0:	mul	r3, r3, r2
   20af4:	str	r3, [sp, #28]
   20af8:	ldr	r3, [sp, #20]
   20afc:	cmp	fp, r3
   20b00:	bge	1c04c <GetDataSlab+0x130>
   20b04:	ldr	r3, [sp, #196]	; 0xc4
   20b08:	mov	r4, #0
   20b0c:	ldr	r7, [r3]
   20b10:	ldr	r3, [sp]
   20b14:	cmp	r7, #0
   20b18:	addne	r6, r6, r7, lsl #3
   20b1c:	addne	r8, r8, r7
   20b20:	add	r9, r3, fp, lsl #3
   20b24:	mov	r5, r6
   20b28:	ldr	r3, [sp, #12]
   20b2c:	cmp	r4, r3
   20b30:	blt	20d58 <GetDataSlab+0x4e3c>
   20b34:	ldr	r3, [sp, #24]
   20b38:	mov	r4, #1
   20b3c:	sub	r2, r3, r7
   20b40:	ldr	r3, [sp, #16]
   20b44:	ldr	r7, [sp, #4]
   20b48:	add	r3, r3, r8
   20b4c:	add	r8, r3, r2
   20b50:	ldr	r3, [sp, #28]
   20b54:	add	r3, r3, r2, lsl #3
   20b58:	add	r6, r6, r3
   20b5c:	ldr	r3, [sp, #208]	; 0xd0
   20b60:	cmp	r4, r3
   20b64:	bge	20d9c <GetDataSlab+0x4e80>
   20b68:	ldr	r3, [sl, r4, lsl #2]
   20b6c:	ldr	r2, [sp, #204]	; 0xcc
   20b70:	add	r3, r3, #1
   20b74:	str	r3, [sl, r4, lsl #2]
   20b78:	mov	r0, r3
   20b7c:	ldr	r1, [r2, r4, lsl #2]
   20b80:	bl	3fd18 <__aeabi_idivmod>
   20b84:	subs	r3, r1, #0
   20b88:	bne	20d88 <GetDataSlab+0x4e6c>
   20b8c:	ldr	r5, [r7, #4]
   20b90:	str	r3, [sl, r4, lsl #2]
   20b94:	mov	r1, r5
   20b98:	mov	r0, r8
   20b9c:	bl	3fd18 <__aeabi_idivmod>
   20ba0:	ldr	r2, [sp, #196]	; 0xc4
   20ba4:	ldr	r2, [r2, r4, lsl #2]
   20ba8:	subs	r3, r1, #0
   20bac:	beq	20d74 <GetDataSlab+0x4e58>
   20bb0:	ldr	r1, [r7]
   20bb4:	sub	r3, r5, r3
   20bb8:	mla	r3, r2, r1, r3
   20bbc:	add	r6, r6, r3, lsl #3
   20bc0:	add	r8, r8, r3
   20bc4:	add	r4, r4, #1
   20bc8:	add	r7, r7, #4
   20bcc:	b	20b5c <GetDataSlab+0x4c40>
   20bd0:	ldr	r3, [r9, r2, lsl #2]
   20bd4:	mov	r5, ip
   20bd8:	sub	r3, r3, #1
   20bdc:	str	r3, [r4, r2, lsl #2]
   20be0:	ldr	r3, [lr], #4
   20be4:	mov	r1, lr
   20be8:	str	r3, [ip, #4]
   20bec:	cmp	r1, fp
   20bf0:	bne	20c24 <GetDataSlab+0x4d08>
   20bf4:	ldr	r3, [sp, #204]	; 0xcc
   20bf8:	ldr	r1, [sp, #20]
   20bfc:	add	ip, ip, #4
   20c00:	ldr	r3, [r3, r2, lsl #2]
   20c04:	mul	r3, r3, r1
   20c08:	ldr	r1, [sp, #196]	; 0xc4
   20c0c:	str	r3, [sp, #20]
   20c10:	ldr	r3, [r5]
   20c14:	ldr	r1, [r1, r2, lsl #2]
   20c18:	add	r2, r2, #1
   20c1c:	mla	r8, r1, r3, r8
   20c20:	b	20a8c <GetDataSlab+0x4b70>
   20c24:	ldr	r6, [r4, r2, lsl #2]
   20c28:	mov	r0, r1
   20c2c:	ldr	r3, [r1, #-4]!
   20c30:	mul	r3, r3, r6
   20c34:	ldr	r6, [ip, #4]
   20c38:	str	r3, [r4, r2, lsl #2]
   20c3c:	ldr	r3, [r0]
   20c40:	mul	r3, r3, r6
   20c44:	str	r3, [ip, #4]
   20c48:	b	20bec <GetDataSlab+0x4cd0>
   20c4c:	ldrd	r0, [r9, #8]!
   20c50:	bl	40090 <__aeabi_l2d>
   20c54:	add	r5, r5, #1
   20c58:	strd	r0, [r7], #8
   20c5c:	b	20cc0 <GetDataSlab+0x4da4>
   20c60:	cmp	r2, #0
   20c64:	beq	20d4c <GetDataSlab+0x4e30>
   20c68:	ldr	r3, [r7]
   20c6c:	mul	r3, r3, r2
   20c70:	b	20d44 <GetDataSlab+0x4e28>
   20c74:	add	r3, sp, #152	; 0x98
   20c78:	add	r3, r3, r4, lsl #2
   20c7c:	ldr	r3, [r3, #-120]	; 0xffffff88
   20c80:	add	r8, r8, r3
   20c84:	add	r6, r6, r3, lsl #3
   20c88:	ldr	r3, [sp, #12]
   20c8c:	add	fp, fp, r3
   20c90:	ldr	r3, [sp, #20]
   20c94:	cmp	fp, r3
   20c98:	bge	1c04c <GetDataSlab+0x130>
   20c9c:	ldr	r3, [sp, #196]	; 0xc4
   20ca0:	mov	r5, #0
   20ca4:	ldr	r4, [r3]
   20ca8:	ldr	r3, [sp]
   20cac:	cmp	r4, #0
   20cb0:	addne	r6, r6, r4, lsl #3
   20cb4:	addne	r8, r8, r4
   20cb8:	sub	r9, r6, #8
   20cbc:	add	r7, r3, fp, lsl #3
   20cc0:	ldr	r3, [sp, #12]
   20cc4:	cmp	r5, r3
   20cc8:	blt	20c4c <GetDataSlab+0x4d30>
   20ccc:	ldr	r3, [sp, #24]
   20cd0:	ldr	r7, [sp, #4]
   20cd4:	sub	r3, r3, r4
   20cd8:	ldr	r4, [sp, #16]
   20cdc:	add	r8, r8, r3
   20ce0:	add	r6, r6, r3, lsl #3
   20ce4:	ldr	r3, [sp, #208]	; 0xd0
   20ce8:	cmp	r4, r3
   20cec:	bge	20c88 <GetDataSlab+0x4d6c>
   20cf0:	ldr	r3, [sl, r4, lsl #2]
   20cf4:	ldr	r2, [sp, #204]	; 0xcc
   20cf8:	add	r3, r3, #1
   20cfc:	str	r3, [sl, r4, lsl #2]
   20d00:	mov	r0, r3
   20d04:	ldr	r1, [r2, r4, lsl #2]
   20d08:	bl	3fd18 <__aeabi_idivmod>
   20d0c:	subs	r3, r1, #0
   20d10:	bne	20c74 <GetDataSlab+0x4d58>
   20d14:	ldr	r5, [r7, #4]
   20d18:	str	r3, [sl, r4, lsl #2]
   20d1c:	mov	r1, r5
   20d20:	mov	r0, r8
   20d24:	bl	3fd18 <__aeabi_idivmod>
   20d28:	ldr	r2, [sp, #196]	; 0xc4
   20d2c:	ldr	r2, [r2, r4, lsl #2]
   20d30:	subs	r3, r1, #0
   20d34:	beq	20c60 <GetDataSlab+0x4d44>
   20d38:	ldr	r1, [r7]
   20d3c:	sub	r3, r5, r3
   20d40:	mla	r3, r2, r1, r3
   20d44:	add	r6, r6, r3, lsl #3
   20d48:	add	r8, r8, r3
   20d4c:	add	r4, r4, #1
   20d50:	add	r7, r7, #4
   20d54:	b	20ce4 <GetDataSlab+0x4dc8>
   20d58:	ldrd	r0, [r5]
   20d5c:	bl	40090 <__aeabi_l2d>
   20d60:	ldr	r3, [sp, #8]
   20d64:	add	r4, r4, #1
   20d68:	add	r5, r5, r3
   20d6c:	strd	r0, [r9], #8
   20d70:	b	20b28 <GetDataSlab+0x4c0c>
   20d74:	cmp	r2, #0
   20d78:	beq	20bc4 <GetDataSlab+0x4ca8>
   20d7c:	ldr	r3, [r7]
   20d80:	mul	r3, r3, r2
   20d84:	b	20bbc <GetDataSlab+0x4ca0>
   20d88:	add	r3, sp, #152	; 0x98
   20d8c:	add	r3, r3, r4, lsl #2
   20d90:	ldr	r3, [r3, #-120]	; 0xffffff88
   20d94:	add	r8, r8, r3
   20d98:	add	r6, r6, r3, lsl #3
   20d9c:	ldr	r3, [sp, #12]
   20da0:	add	fp, fp, r3
   20da4:	b	20af8 <GetDataSlab+0x4bdc>
   20da8:	cmp	r5, #13
   20dac:	bne	337fc <GetDataSlab+0x178e0>
   20db0:	ldr	r3, [r9]
   20db4:	ldr	ip, [sp, #4]
   20db8:	str	r3, [sp, #16]
   20dbc:	sub	r3, r3, #1
   20dc0:	str	r3, [sp, #32]
   20dc4:	ldr	r3, [fp]
   20dc8:	mov	lr, fp
   20dcc:	str	r3, [sp, #24]
   20dd0:	str	r3, [sp, #112]	; 0x70
   20dd4:	ldr	r3, [sp, #204]	; 0xcc
   20dd8:	mov	r8, #0
   20ddc:	mov	r2, #1
   20de0:	ldr	r3, [r3]
   20de4:	str	r3, [sp, #12]
   20de8:	str	r3, [sp, #20]
   20dec:	ldr	r3, [sp, #208]	; 0xd0
   20df0:	cmp	r2, r3
   20df4:	blt	20f30 <GetDataSlab+0x5014>
   20df8:	ldr	r3, [sp, #8]
   20dfc:	add	r6, r3, r8, lsl #3
   20e00:	ldr	r3, [sp, #16]
   20e04:	cmp	r3, #1
   20e08:	moveq	fp, #0
   20e0c:	beq	20ff0 <GetDataSlab+0x50d4>
   20e10:	ldr	r3, [sp, #16]
   20e14:	ldr	r2, [sp, #12]
   20e18:	mov	fp, #0
   20e1c:	mul	r3, r3, r2
   20e20:	ldr	r2, [sp, #24]
   20e24:	sub	r3, r2, r3
   20e28:	str	r3, [sp, #28]
   20e2c:	ldr	r3, [sp, #16]
   20e30:	ldr	r2, [sp, #16]
   20e34:	lsl	r3, r3, #3
   20e38:	str	r3, [sp, #8]
   20e3c:	ldr	r3, [sp, #12]
   20e40:	bic	r3, r3, r3, asr #31
   20e44:	mul	r2, r2, r3
   20e48:	str	r2, [sp, #24]
   20e4c:	ldr	r2, [sp, #8]
   20e50:	mul	r3, r2, r3
   20e54:	str	r3, [sp, #16]
   20e58:	ldr	r3, [sp, #20]
   20e5c:	cmp	fp, r3
   20e60:	bge	1c04c <GetDataSlab+0x130>
   20e64:	ldr	r3, [sp, #196]	; 0xc4
   20e68:	mov	r4, #0
   20e6c:	ldr	r7, [r3]
   20e70:	ldr	r3, [sp]
   20e74:	cmp	r7, #0
   20e78:	addne	r6, r6, r7, lsl #3
   20e7c:	addne	r8, r8, r7
   20e80:	add	r9, r3, fp, lsl #3
   20e84:	mov	r5, r6
   20e88:	ldr	r3, [sp, #12]
   20e8c:	cmp	r4, r3
   20e90:	blt	210b8 <GetDataSlab+0x519c>
   20e94:	ldr	r3, [sp, #28]
   20e98:	mov	r4, #1
   20e9c:	sub	r2, r3, r7
   20ea0:	ldr	r3, [sp, #24]
   20ea4:	ldr	r7, [sp, #4]
   20ea8:	add	r3, r3, r8
   20eac:	add	r8, r3, r2
   20eb0:	ldr	r3, [sp, #16]
   20eb4:	add	r3, r3, r2, lsl #3
   20eb8:	add	r6, r6, r3
   20ebc:	ldr	r3, [sp, #208]	; 0xd0
   20ec0:	cmp	r4, r3
   20ec4:	bge	210fc <GetDataSlab+0x51e0>
   20ec8:	ldr	r3, [sl, r4, lsl #2]
   20ecc:	ldr	r2, [sp, #204]	; 0xcc
   20ed0:	add	r3, r3, #1
   20ed4:	str	r3, [sl, r4, lsl #2]
   20ed8:	mov	r0, r3
   20edc:	ldr	r1, [r2, r4, lsl #2]
   20ee0:	bl	3fd18 <__aeabi_idivmod>
   20ee4:	subs	r3, r1, #0
   20ee8:	bne	210e8 <GetDataSlab+0x51cc>
   20eec:	ldr	r5, [r7, #4]
   20ef0:	str	r3, [sl, r4, lsl #2]
   20ef4:	mov	r1, r5
   20ef8:	mov	r0, r8
   20efc:	bl	3fd18 <__aeabi_idivmod>
   20f00:	ldr	r2, [sp, #196]	; 0xc4
   20f04:	ldr	r2, [r2, r4, lsl #2]
   20f08:	subs	r3, r1, #0
   20f0c:	beq	210d4 <GetDataSlab+0x51b8>
   20f10:	ldr	r1, [r7]
   20f14:	sub	r3, r5, r3
   20f18:	mla	r3, r2, r1, r3
   20f1c:	add	r6, r6, r3, lsl #3
   20f20:	add	r8, r8, r3
   20f24:	add	r4, r4, #1
   20f28:	add	r7, r7, #4
   20f2c:	b	20ebc <GetDataSlab+0x4fa0>
   20f30:	ldr	r3, [r9, r2, lsl #2]
   20f34:	mov	r5, ip
   20f38:	sub	r3, r3, #1
   20f3c:	str	r3, [r4, r2, lsl #2]
   20f40:	ldr	r3, [lr], #4
   20f44:	mov	r1, lr
   20f48:	str	r3, [ip, #4]
   20f4c:	cmp	r1, fp
   20f50:	bne	20f84 <GetDataSlab+0x5068>
   20f54:	ldr	r3, [sp, #204]	; 0xcc
   20f58:	ldr	r1, [sp, #20]
   20f5c:	add	ip, ip, #4
   20f60:	ldr	r3, [r3, r2, lsl #2]
   20f64:	mul	r3, r3, r1
   20f68:	ldr	r1, [sp, #196]	; 0xc4
   20f6c:	str	r3, [sp, #20]
   20f70:	ldr	r3, [r5]
   20f74:	ldr	r1, [r1, r2, lsl #2]
   20f78:	add	r2, r2, #1
   20f7c:	mla	r8, r1, r3, r8
   20f80:	b	20dec <GetDataSlab+0x4ed0>
   20f84:	ldr	r6, [r4, r2, lsl #2]
   20f88:	mov	r0, r1
   20f8c:	ldr	r3, [r1, #-4]!
   20f90:	mul	r3, r3, r6
   20f94:	ldr	r6, [ip, #4]
   20f98:	str	r3, [r4, r2, lsl #2]
   20f9c:	ldr	r3, [r0]
   20fa0:	mul	r3, r3, r6
   20fa4:	str	r3, [ip, #4]
   20fa8:	b	20f4c <GetDataSlab+0x5030>
   20fac:	ldrd	r0, [r9, #8]!
   20fb0:	bl	4007c <__aeabi_ul2d>
   20fb4:	add	r5, r5, #1
   20fb8:	strd	r0, [r7], #8
   20fbc:	b	21020 <GetDataSlab+0x5104>
   20fc0:	cmp	r2, #0
   20fc4:	beq	210ac <GetDataSlab+0x5190>
   20fc8:	ldr	r3, [r7]
   20fcc:	mul	r3, r3, r2
   20fd0:	b	210a4 <GetDataSlab+0x5188>
   20fd4:	add	r3, sp, #152	; 0x98
   20fd8:	add	r3, r3, r4, lsl #2
   20fdc:	ldr	r3, [r3, #-120]	; 0xffffff88
   20fe0:	add	r8, r8, r3
   20fe4:	add	r6, r6, r3, lsl #3
   20fe8:	ldr	r3, [sp, #12]
   20fec:	add	fp, fp, r3
   20ff0:	ldr	r3, [sp, #20]
   20ff4:	cmp	fp, r3
   20ff8:	bge	1c04c <GetDataSlab+0x130>
   20ffc:	ldr	r3, [sp, #196]	; 0xc4
   21000:	mov	r5, #0
   21004:	ldr	r4, [r3]
   21008:	ldr	r3, [sp]
   2100c:	cmp	r4, #0
   21010:	addne	r6, r6, r4, lsl #3
   21014:	addne	r8, r8, r4
   21018:	sub	r9, r6, #8
   2101c:	add	r7, r3, fp, lsl #3
   21020:	ldr	r3, [sp, #12]
   21024:	cmp	r5, r3
   21028:	blt	20fac <GetDataSlab+0x5090>
   2102c:	ldr	r3, [sp, #24]
   21030:	ldr	r7, [sp, #4]
   21034:	sub	r3, r3, r4
   21038:	ldr	r4, [sp, #16]
   2103c:	add	r8, r8, r3
   21040:	add	r6, r6, r3, lsl #3
   21044:	ldr	r3, [sp, #208]	; 0xd0
   21048:	cmp	r4, r3
   2104c:	bge	20fe8 <GetDataSlab+0x50cc>
   21050:	ldr	r3, [sl, r4, lsl #2]
   21054:	ldr	r2, [sp, #204]	; 0xcc
   21058:	add	r3, r3, #1
   2105c:	str	r3, [sl, r4, lsl #2]
   21060:	mov	r0, r3
   21064:	ldr	r1, [r2, r4, lsl #2]
   21068:	bl	3fd18 <__aeabi_idivmod>
   2106c:	subs	r3, r1, #0
   21070:	bne	20fd4 <GetDataSlab+0x50b8>
   21074:	ldr	r5, [r7, #4]
   21078:	str	r3, [sl, r4, lsl #2]
   2107c:	mov	r1, r5
   21080:	mov	r0, r8
   21084:	bl	3fd18 <__aeabi_idivmod>
   21088:	ldr	r2, [sp, #196]	; 0xc4
   2108c:	ldr	r2, [r2, r4, lsl #2]
   21090:	subs	r3, r1, #0
   21094:	beq	20fc0 <GetDataSlab+0x50a4>
   21098:	ldr	r1, [r7]
   2109c:	sub	r3, r5, r3
   210a0:	mla	r3, r2, r1, r3
   210a4:	add	r6, r6, r3, lsl #3
   210a8:	add	r8, r8, r3
   210ac:	add	r4, r4, #1
   210b0:	add	r7, r7, #4
   210b4:	b	21044 <GetDataSlab+0x5128>
   210b8:	ldrd	r0, [r5]
   210bc:	bl	4007c <__aeabi_ul2d>
   210c0:	ldr	r3, [sp, #8]
   210c4:	add	r4, r4, #1
   210c8:	add	r5, r5, r3
   210cc:	strd	r0, [r9], #8
   210d0:	b	20e88 <GetDataSlab+0x4f6c>
   210d4:	cmp	r2, #0
   210d8:	beq	20f24 <GetDataSlab+0x5008>
   210dc:	ldr	r3, [r7]
   210e0:	mul	r3, r3, r2
   210e4:	b	20f1c <GetDataSlab+0x5000>
   210e8:	add	r3, sp, #152	; 0x98
   210ec:	add	r3, r3, r4, lsl #2
   210f0:	ldr	r3, [r3, #-120]	; 0xffffff88
   210f4:	add	r8, r8, r3
   210f8:	add	r6, r6, r3, lsl #3
   210fc:	ldr	r3, [sp, #12]
   21100:	add	fp, fp, r3
   21104:	b	20e58 <GetDataSlab+0x4f3c>
   21108:	sub	r3, r5, #1
   2110c:	cmp	r3, #8
   21110:	addls	pc, pc, r3, lsl #2
   21114:	b	22b8c <GetDataSlab+0x6c70>
   21118:	b	22504 <GetDataSlab+0x65e8>
   2111c:	b	22848 <GetDataSlab+0x692c>
   21120:	b	21e64 <GetDataSlab+0x5f48>
   21124:	b	221b4 <GetDataSlab+0x6298>
   21128:	b	217cc <GetDataSlab+0x58b0>
   2112c:	b	21b18 <GetDataSlab+0x5bfc>
   21130:	b	21488 <GetDataSlab+0x556c>
   21134:	b	22b8c <GetDataSlab+0x6c70>
   21138:	b	2113c <GetDataSlab+0x5220>
   2113c:	ldr	r3, [r9]
   21140:	ldr	ip, [sp, #4]
   21144:	str	r3, [sp, #16]
   21148:	sub	r3, r3, #1
   2114c:	str	r3, [sp, #32]
   21150:	ldr	r3, [fp]
   21154:	mov	lr, fp
   21158:	str	r3, [sp, #24]
   2115c:	str	r3, [sp, #112]	; 0x70
   21160:	ldr	r3, [sp, #204]	; 0xcc
   21164:	mov	r6, #0
   21168:	mov	r2, #1
   2116c:	ldr	r3, [r3]
   21170:	str	r3, [sp, #12]
   21174:	str	r3, [sp, #20]
   21178:	ldr	r3, [sp, #208]	; 0xd0
   2117c:	cmp	r2, r3
   21180:	blt	212b4 <GetDataSlab+0x5398>
   21184:	ldr	r3, [sp, #8]
   21188:	add	r5, r3, r6, lsl #3
   2118c:	ldr	r3, [sp, #16]
   21190:	cmp	r3, #1
   21194:	moveq	r9, #0
   21198:	beq	21374 <GetDataSlab+0x5458>
   2119c:	ldr	r3, [sp, #16]
   211a0:	ldr	r2, [sp, #12]
   211a4:	mov	r9, #0
   211a8:	mul	r3, r3, r2
   211ac:	ldr	r2, [sp, #24]
   211b0:	sub	r3, r2, r3
   211b4:	str	r3, [sp, #24]
   211b8:	ldr	r3, [sp, #16]
   211bc:	ldr	r2, [sp, #16]
   211c0:	lsl	fp, r3, #3
   211c4:	ldr	r3, [sp, #12]
   211c8:	bic	r3, r3, r3, asr #31
   211cc:	mul	r2, r2, r3
   211d0:	mul	r3, fp, r3
   211d4:	str	r2, [sp, #8]
   211d8:	str	r3, [sp, #16]
   211dc:	ldr	r3, [sp, #20]
   211e0:	cmp	r9, r3
   211e4:	bge	1c04c <GetDataSlab+0x130>
   211e8:	ldr	r3, [sp, #196]	; 0xc4
   211ec:	mov	r2, #0
   211f0:	ldr	r1, [r3]
   211f4:	ldr	r3, [sp]
   211f8:	cmp	r1, #0
   211fc:	addne	r5, r5, r1, lsl #3
   21200:	add	r0, r3, r9, lsl #2
   21204:	addne	r6, r6, r1
   21208:	mov	r3, r5
   2120c:	ldr	ip, [sp, #12]
   21210:	cmp	r2, ip
   21214:	blt	2143c <GetDataSlab+0x5520>
   21218:	ldr	r3, [sp, #24]
   2121c:	ldr	r8, [sp, #4]
   21220:	sub	r2, r3, r1
   21224:	ldr	r3, [sp, #8]
   21228:	mov	r4, #1
   2122c:	add	r3, r3, r6
   21230:	add	r6, r3, r2
   21234:	ldr	r3, [sp, #16]
   21238:	add	r3, r3, r2, lsl #3
   2123c:	add	r5, r5, r3
   21240:	ldr	r3, [sp, #208]	; 0xd0
   21244:	cmp	r4, r3
   21248:	bge	2147c <GetDataSlab+0x5560>
   2124c:	ldr	r3, [sl, r4, lsl #2]
   21250:	ldr	r2, [sp, #204]	; 0xcc
   21254:	add	r3, r3, #1
   21258:	str	r3, [sl, r4, lsl #2]
   2125c:	mov	r0, r3
   21260:	ldr	r1, [r2, r4, lsl #2]
   21264:	bl	3fd18 <__aeabi_idivmod>
   21268:	subs	r3, r1, #0
   2126c:	bne	21468 <GetDataSlab+0x554c>
   21270:	ldr	r7, [r8, #4]
   21274:	str	r3, [sl, r4, lsl #2]
   21278:	mov	r1, r7
   2127c:	mov	r0, r6
   21280:	bl	3fd18 <__aeabi_idivmod>
   21284:	ldr	r2, [sp, #196]	; 0xc4
   21288:	ldr	r2, [r2, r4, lsl #2]
   2128c:	subs	r3, r1, #0
   21290:	beq	21454 <GetDataSlab+0x5538>
   21294:	ldr	r1, [r8]
   21298:	sub	r3, r7, r3
   2129c:	mla	r3, r2, r1, r3
   212a0:	add	r5, r5, r3, lsl #3
   212a4:	add	r6, r6, r3
   212a8:	add	r4, r4, #1
   212ac:	add	r8, r8, #4
   212b0:	b	21240 <GetDataSlab+0x5324>
   212b4:	ldr	r3, [r9, r2, lsl #2]
   212b8:	mov	r5, ip
   212bc:	sub	r3, r3, #1
   212c0:	str	r3, [r4, r2, lsl #2]
   212c4:	ldr	r3, [lr], #4
   212c8:	mov	r1, lr
   212cc:	str	r3, [ip, #4]
   212d0:	cmp	r1, fp
   212d4:	bne	21308 <GetDataSlab+0x53ec>
   212d8:	ldr	r3, [sp, #204]	; 0xcc
   212dc:	ldr	r1, [sp, #20]
   212e0:	add	ip, ip, #4
   212e4:	ldr	r3, [r3, r2, lsl #2]
   212e8:	mul	r3, r3, r1
   212ec:	ldr	r1, [sp, #196]	; 0xc4
   212f0:	str	r3, [sp, #20]
   212f4:	ldr	r3, [r5]
   212f8:	ldr	r1, [r1, r2, lsl #2]
   212fc:	add	r2, r2, #1
   21300:	mla	r6, r1, r3, r6
   21304:	b	21178 <GetDataSlab+0x525c>
   21308:	ldr	r7, [r4, r2, lsl #2]
   2130c:	mov	r0, r1
   21310:	ldr	r3, [r1, #-4]!
   21314:	mul	r3, r3, r7
   21318:	ldr	r7, [ip, #4]
   2131c:	str	r3, [r4, r2, lsl #2]
   21320:	ldr	r3, [r0]
   21324:	mul	r3, r3, r7
   21328:	str	r3, [ip, #4]
   2132c:	b	212d0 <GetDataSlab+0x53b4>
   21330:	vldmia	r0!, {d7}
   21334:	add	r2, r2, #1
   21338:	vcvt.f32.f64	s15, d7
   2133c:	vstmia	r1!, {s15}
   21340:	b	213a4 <GetDataSlab+0x5488>
   21344:	cmp	r2, #0
   21348:	beq	21430 <GetDataSlab+0x5514>
   2134c:	ldr	r3, [r8]
   21350:	mul	r3, r3, r2
   21354:	b	21428 <GetDataSlab+0x550c>
   21358:	add	r3, sp, #152	; 0x98
   2135c:	add	r3, r3, r4, lsl #2
   21360:	ldr	r3, [r3, #-120]	; 0xffffff88
   21364:	add	r6, r6, r3
   21368:	add	r5, r5, r3, lsl #3
   2136c:	ldr	r3, [sp, #12]
   21370:	add	r9, r9, r3
   21374:	ldr	r3, [sp, #20]
   21378:	cmp	r9, r3
   2137c:	bge	1c04c <GetDataSlab+0x130>
   21380:	ldr	r3, [sp, #196]	; 0xc4
   21384:	ldr	r2, [sp]
   21388:	ldr	r3, [r3]
   2138c:	add	r1, r2, r9, lsl #2
   21390:	cmp	r3, #0
   21394:	addne	r5, r5, r3, lsl #3
   21398:	addne	r6, r6, r3
   2139c:	mov	r0, r5
   213a0:	mov	r2, #0
   213a4:	ldr	ip, [sp, #12]
   213a8:	cmp	r2, ip
   213ac:	blt	21330 <GetDataSlab+0x5414>
   213b0:	ldr	r2, [sp, #24]
   213b4:	ldr	r8, [sp, #4]
   213b8:	sub	r3, r2, r3
   213bc:	ldr	r4, [sp, #16]
   213c0:	add	r6, r6, r3
   213c4:	add	r5, r5, r3, lsl #3
   213c8:	ldr	r3, [sp, #208]	; 0xd0
   213cc:	cmp	r4, r3
   213d0:	bge	2136c <GetDataSlab+0x5450>
   213d4:	ldr	r3, [sl, r4, lsl #2]
   213d8:	ldr	r2, [sp, #204]	; 0xcc
   213dc:	add	r3, r3, #1
   213e0:	str	r3, [sl, r4, lsl #2]
   213e4:	mov	r0, r3
   213e8:	ldr	r1, [r2, r4, lsl #2]
   213ec:	bl	3fd18 <__aeabi_idivmod>
   213f0:	subs	r3, r1, #0
   213f4:	bne	21358 <GetDataSlab+0x543c>
   213f8:	ldr	r7, [r8, #4]
   213fc:	str	r3, [sl, r4, lsl #2]
   21400:	mov	r1, r7
   21404:	mov	r0, r6
   21408:	bl	3fd18 <__aeabi_idivmod>
   2140c:	ldr	r2, [sp, #196]	; 0xc4
   21410:	ldr	r2, [r2, r4, lsl #2]
   21414:	subs	r3, r1, #0
   21418:	beq	21344 <GetDataSlab+0x5428>
   2141c:	ldr	r1, [r8]
   21420:	sub	r3, r7, r3
   21424:	mla	r3, r2, r1, r3
   21428:	add	r5, r5, r3, lsl #3
   2142c:	add	r6, r6, r3
   21430:	add	r4, r4, #1
   21434:	add	r8, r8, #4
   21438:	b	213c8 <GetDataSlab+0x54ac>
   2143c:	vldr	d7, [r3]
   21440:	add	r2, r2, #1
   21444:	add	r3, r3, fp
   21448:	vcvt.f32.f64	s15, d7
   2144c:	vstmia	r0!, {s15}
   21450:	b	2120c <GetDataSlab+0x52f0>
   21454:	cmp	r2, #0
   21458:	beq	212a8 <GetDataSlab+0x538c>
   2145c:	ldr	r3, [r8]
   21460:	mul	r3, r3, r2
   21464:	b	212a0 <GetDataSlab+0x5384>
   21468:	add	r3, sp, #152	; 0x98
   2146c:	add	r3, r3, r4, lsl #2
   21470:	ldr	r3, [r3, #-120]	; 0xffffff88
   21474:	add	r6, r6, r3
   21478:	add	r5, r5, r3, lsl #3
   2147c:	ldr	r3, [sp, #12]
   21480:	add	r9, r9, r3
   21484:	b	211dc <GetDataSlab+0x52c0>
   21488:	ldr	r3, [r9]
   2148c:	ldr	ip, [sp, #4]
   21490:	str	r3, [sp, #16]
   21494:	sub	r3, r3, #1
   21498:	str	r3, [sp, #32]
   2149c:	ldr	r3, [fp]
   214a0:	mov	lr, fp
   214a4:	str	r3, [sp, #24]
   214a8:	str	r3, [sp, #112]	; 0x70
   214ac:	ldr	r3, [sp, #204]	; 0xcc
   214b0:	mov	r6, #0
   214b4:	mov	r2, #1
   214b8:	ldr	r3, [r3]
   214bc:	str	r3, [sp, #12]
   214c0:	str	r3, [sp, #20]
   214c4:	ldr	r3, [sp, #208]	; 0xd0
   214c8:	cmp	r2, r3
   214cc:	blt	21600 <GetDataSlab+0x56e4>
   214d0:	ldr	r3, [sp, #8]
   214d4:	add	r5, r3, r6, lsl #2
   214d8:	ldr	r3, [sp, #16]
   214dc:	cmp	r3, #1
   214e0:	moveq	r9, #0
   214e4:	beq	216bc <GetDataSlab+0x57a0>
   214e8:	ldr	r3, [sp, #16]
   214ec:	ldr	r2, [sp, #12]
   214f0:	mov	r9, #0
   214f4:	mul	r3, r3, r2
   214f8:	ldr	r2, [sp, #24]
   214fc:	sub	r3, r2, r3
   21500:	str	r3, [sp, #24]
   21504:	ldr	r3, [sp, #16]
   21508:	ldr	r2, [sp, #16]
   2150c:	lsl	fp, r3, #2
   21510:	ldr	r3, [sp, #12]
   21514:	bic	r3, r3, r3, asr #31
   21518:	mul	r2, r3, r2
   2151c:	mul	r3, r3, fp
   21520:	str	r2, [sp, #16]
   21524:	str	r3, [sp, #8]
   21528:	ldr	r3, [sp, #20]
   2152c:	cmp	r9, r3
   21530:	bge	1c04c <GetDataSlab+0x130>
   21534:	ldr	r3, [sp, #196]	; 0xc4
   21538:	mov	r2, #0
   2153c:	ldr	r1, [r3]
   21540:	ldr	r3, [sp]
   21544:	cmp	r1, #0
   21548:	addne	r5, r5, r1, lsl #2
   2154c:	add	r0, r3, r9, lsl #2
   21550:	addne	r6, r6, r1
   21554:	mov	r3, r5
   21558:	ldr	ip, [sp, #12]
   2155c:	cmp	r2, ip
   21560:	blt	21784 <GetDataSlab+0x5868>
   21564:	ldr	r3, [sp, #24]
   21568:	ldr	r8, [sp, #4]
   2156c:	sub	r2, r3, r1
   21570:	ldr	r3, [sp, #16]
   21574:	mov	r4, #1
   21578:	add	r3, r3, r6
   2157c:	add	r6, r3, r2
   21580:	ldr	r3, [sp, #8]
   21584:	add	r3, r3, r2, lsl #2
   21588:	add	r5, r5, r3
   2158c:	ldr	r3, [sp, #208]	; 0xd0
   21590:	cmp	r4, r3
   21594:	bge	217c0 <GetDataSlab+0x58a4>
   21598:	ldr	r3, [sl, r4, lsl #2]
   2159c:	ldr	r2, [sp, #204]	; 0xcc
   215a0:	add	r3, r3, #1
   215a4:	str	r3, [sl, r4, lsl #2]
   215a8:	mov	r0, r3
   215ac:	ldr	r1, [r2, r4, lsl #2]
   215b0:	bl	3fd18 <__aeabi_idivmod>
   215b4:	subs	r3, r1, #0
   215b8:	bne	217ac <GetDataSlab+0x5890>
   215bc:	ldr	r7, [r8, #4]
   215c0:	str	r3, [sl, r4, lsl #2]
   215c4:	mov	r1, r7
   215c8:	mov	r0, r6
   215cc:	bl	3fd18 <__aeabi_idivmod>
   215d0:	ldr	r2, [sp, #196]	; 0xc4
   215d4:	ldr	r2, [r2, r4, lsl #2]
   215d8:	subs	r3, r1, #0
   215dc:	beq	21798 <GetDataSlab+0x587c>
   215e0:	ldr	r1, [r8]
   215e4:	sub	r3, r7, r3
   215e8:	mla	r3, r2, r1, r3
   215ec:	add	r5, r5, r3, lsl #2
   215f0:	add	r6, r6, r3
   215f4:	add	r4, r4, #1
   215f8:	add	r8, r8, #4
   215fc:	b	2158c <GetDataSlab+0x5670>
   21600:	ldr	r3, [r9, r2, lsl #2]
   21604:	mov	r5, ip
   21608:	sub	r3, r3, #1
   2160c:	str	r3, [r4, r2, lsl #2]
   21610:	ldr	r3, [lr], #4
   21614:	mov	r1, lr
   21618:	str	r3, [ip, #4]
   2161c:	cmp	fp, r1
   21620:	bne	21654 <GetDataSlab+0x5738>
   21624:	ldr	r3, [sp, #204]	; 0xcc
   21628:	ldr	r1, [sp, #20]
   2162c:	add	ip, ip, #4
   21630:	ldr	r3, [r3, r2, lsl #2]
   21634:	mul	r3, r3, r1
   21638:	ldr	r1, [sp, #196]	; 0xc4
   2163c:	str	r3, [sp, #20]
   21640:	ldr	r3, [r5]
   21644:	ldr	r1, [r1, r2, lsl #2]
   21648:	add	r2, r2, #1
   2164c:	mla	r6, r1, r3, r6
   21650:	b	214c4 <GetDataSlab+0x55a8>
   21654:	ldr	r7, [r4, r2, lsl #2]
   21658:	mov	r0, r1
   2165c:	ldr	r3, [r1, #-4]!
   21660:	mul	r3, r3, r7
   21664:	ldr	r7, [ip, #4]
   21668:	str	r3, [r4, r2, lsl #2]
   2166c:	ldr	r3, [r0]
   21670:	mul	r3, r3, r7
   21674:	str	r3, [ip, #4]
   21678:	b	2161c <GetDataSlab+0x5700>
   2167c:	ldr	r3, [ip], #4
   21680:	add	r1, r1, #1
   21684:	str	r3, [r0], #4
   21688:	b	216ec <GetDataSlab+0x57d0>
   2168c:	cmp	r2, #0
   21690:	beq	21778 <GetDataSlab+0x585c>
   21694:	ldr	r3, [r8]
   21698:	mul	r3, r3, r2
   2169c:	b	21770 <GetDataSlab+0x5854>
   216a0:	add	r3, sp, #152	; 0x98
   216a4:	add	r3, r3, r4, lsl #2
   216a8:	ldr	r3, [r3, #-120]	; 0xffffff88
   216ac:	add	r6, r6, r3
   216b0:	add	r5, r5, r3, lsl #2
   216b4:	ldr	r3, [sp, #12]
   216b8:	add	r9, r9, r3
   216bc:	ldr	r3, [sp, #20]
   216c0:	cmp	r9, r3
   216c4:	bge	1c04c <GetDataSlab+0x130>
   216c8:	ldr	r3, [sp, #196]	; 0xc4
   216cc:	mov	r1, #0
   216d0:	ldr	r2, [r3]
   216d4:	ldr	r3, [sp]
   216d8:	cmp	r2, #0
   216dc:	addne	r5, r5, r2, lsl #2
   216e0:	addne	r6, r6, r2
   216e4:	mov	ip, r5
   216e8:	add	r0, r3, r9, lsl #2
   216ec:	ldr	r3, [sp, #12]
   216f0:	cmp	r1, r3
   216f4:	blt	2167c <GetDataSlab+0x5760>
   216f8:	ldr	r3, [sp, #24]
   216fc:	ldr	r8, [sp, #4]
   21700:	sub	r3, r3, r2
   21704:	ldr	r4, [sp, #16]
   21708:	add	r6, r6, r3
   2170c:	add	r5, r5, r3, lsl #2
   21710:	ldr	r3, [sp, #208]	; 0xd0
   21714:	cmp	r4, r3
   21718:	bge	216b4 <GetDataSlab+0x5798>
   2171c:	ldr	r3, [sl, r4, lsl #2]
   21720:	ldr	r2, [sp, #204]	; 0xcc
   21724:	add	r3, r3, #1
   21728:	str	r3, [sl, r4, lsl #2]
   2172c:	mov	r0, r3
   21730:	ldr	r1, [r2, r4, lsl #2]
   21734:	bl	3fd18 <__aeabi_idivmod>
   21738:	subs	r3, r1, #0
   2173c:	bne	216a0 <GetDataSlab+0x5784>
   21740:	ldr	r7, [r8, #4]
   21744:	str	r3, [sl, r4, lsl #2]
   21748:	mov	r1, r7
   2174c:	mov	r0, r6
   21750:	bl	3fd18 <__aeabi_idivmod>
   21754:	ldr	r2, [sp, #196]	; 0xc4
   21758:	ldr	r2, [r2, r4, lsl #2]
   2175c:	subs	r3, r1, #0
   21760:	beq	2168c <GetDataSlab+0x5770>
   21764:	ldr	r1, [r8]
   21768:	sub	r3, r7, r3
   2176c:	mla	r3, r2, r1, r3
   21770:	add	r5, r5, r3, lsl #2
   21774:	add	r6, r6, r3
   21778:	add	r4, r4, #1
   2177c:	add	r8, r8, #4
   21780:	b	21710 <GetDataSlab+0x57f4>
   21784:	ldr	ip, [r3]
   21788:	add	r2, r2, #1
   2178c:	str	ip, [r0], #4
   21790:	add	r3, r3, fp
   21794:	b	21558 <GetDataSlab+0x563c>
   21798:	cmp	r2, #0
   2179c:	beq	215f4 <GetDataSlab+0x56d8>
   217a0:	ldr	r3, [r8]
   217a4:	mul	r3, r3, r2
   217a8:	b	215ec <GetDataSlab+0x56d0>
   217ac:	add	r3, sp, #152	; 0x98
   217b0:	add	r3, r3, r4, lsl #2
   217b4:	ldr	r3, [r3, #-120]	; 0xffffff88
   217b8:	add	r6, r6, r3
   217bc:	add	r5, r5, r3, lsl #2
   217c0:	ldr	r3, [sp, #12]
   217c4:	add	r9, r9, r3
   217c8:	b	21528 <GetDataSlab+0x560c>
   217cc:	ldr	r3, [r9]
   217d0:	ldr	ip, [sp, #4]
   217d4:	str	r3, [sp, #16]
   217d8:	sub	r3, r3, #1
   217dc:	str	r3, [sp, #32]
   217e0:	ldr	r3, [fp]
   217e4:	mov	lr, fp
   217e8:	str	r3, [sp, #24]
   217ec:	str	r3, [sp, #112]	; 0x70
   217f0:	ldr	r3, [sp, #204]	; 0xcc
   217f4:	mov	r6, #0
   217f8:	mov	r2, #1
   217fc:	ldr	r3, [r3]
   21800:	str	r3, [sp, #12]
   21804:	str	r3, [sp, #20]
   21808:	ldr	r3, [sp, #208]	; 0xd0
   2180c:	cmp	r2, r3
   21810:	blt	21944 <GetDataSlab+0x5a28>
   21814:	ldr	r3, [sp, #8]
   21818:	add	r5, r3, r6, lsl #2
   2181c:	ldr	r3, [sp, #16]
   21820:	cmp	r3, #1
   21824:	moveq	r9, #0
   21828:	beq	21a08 <GetDataSlab+0x5aec>
   2182c:	ldr	r3, [sp, #16]
   21830:	ldr	r2, [sp, #12]
   21834:	mov	r9, #0
   21838:	mul	r3, r3, r2
   2183c:	ldr	r2, [sp, #24]
   21840:	sub	r3, r2, r3
   21844:	str	r3, [sp, #24]
   21848:	ldr	r3, [sp, #16]
   2184c:	ldr	r2, [sp, #16]
   21850:	lsl	fp, r3, #2
   21854:	ldr	r3, [sp, #12]
   21858:	bic	r3, r3, r3, asr #31
   2185c:	mul	r2, r3, r2
   21860:	mul	r3, r3, fp
   21864:	str	r2, [sp, #8]
   21868:	str	r3, [sp, #16]
   2186c:	ldr	r3, [sp, #20]
   21870:	cmp	r9, r3
   21874:	bge	1c04c <GetDataSlab+0x130>
   21878:	ldr	r3, [sp, #196]	; 0xc4
   2187c:	ldr	r1, [r3]
   21880:	ldr	r3, [sp]
   21884:	cmp	r1, #0
   21888:	addne	r5, r5, r1, lsl #2
   2188c:	add	r0, r3, r9, lsl #2
   21890:	addne	r6, r6, r1
   21894:	mov	ip, r5
   21898:	mov	r3, #0
   2189c:	ldr	r2, [sp, #12]
   218a0:	cmp	r3, r2
   218a4:	blt	21acc <GetDataSlab+0x5bb0>
   218a8:	ldr	r3, [sp, #24]
   218ac:	ldr	r8, [sp, #4]
   218b0:	sub	r2, r3, r1
   218b4:	ldr	r3, [sp, #8]
   218b8:	mov	r4, #1
   218bc:	add	r3, r3, r6
   218c0:	add	r6, r3, r2
   218c4:	ldr	r3, [sp, #16]
   218c8:	add	r3, r3, r2, lsl #2
   218cc:	add	r5, r5, r3
   218d0:	ldr	r3, [sp, #208]	; 0xd0
   218d4:	cmp	r4, r3
   218d8:	bge	21b0c <GetDataSlab+0x5bf0>
   218dc:	ldr	r3, [sl, r4, lsl #2]
   218e0:	ldr	r2, [sp, #204]	; 0xcc
   218e4:	add	r3, r3, #1
   218e8:	str	r3, [sl, r4, lsl #2]
   218ec:	mov	r0, r3
   218f0:	ldr	r1, [r2, r4, lsl #2]
   218f4:	bl	3fd18 <__aeabi_idivmod>
   218f8:	subs	r3, r1, #0
   218fc:	bne	21af8 <GetDataSlab+0x5bdc>
   21900:	ldr	r7, [r8, #4]
   21904:	str	r3, [sl, r4, lsl #2]
   21908:	mov	r1, r7
   2190c:	mov	r0, r6
   21910:	bl	3fd18 <__aeabi_idivmod>
   21914:	ldr	r2, [sp, #196]	; 0xc4
   21918:	ldr	r2, [r2, r4, lsl #2]
   2191c:	subs	r3, r1, #0
   21920:	beq	21ae4 <GetDataSlab+0x5bc8>
   21924:	ldr	r1, [r8]
   21928:	sub	r3, r7, r3
   2192c:	mla	r3, r2, r1, r3
   21930:	add	r5, r5, r3, lsl #2
   21934:	add	r6, r6, r3
   21938:	add	r4, r4, #1
   2193c:	add	r8, r8, #4
   21940:	b	218d0 <GetDataSlab+0x59b4>
   21944:	ldr	r3, [r9, r2, lsl #2]
   21948:	mov	r5, ip
   2194c:	sub	r3, r3, #1
   21950:	str	r3, [r4, r2, lsl #2]
   21954:	ldr	r3, [lr], #4
   21958:	mov	r1, lr
   2195c:	str	r3, [ip, #4]
   21960:	cmp	r1, fp
   21964:	bne	21998 <GetDataSlab+0x5a7c>
   21968:	ldr	r3, [sp, #204]	; 0xcc
   2196c:	ldr	r1, [sp, #20]
   21970:	add	ip, ip, #4
   21974:	ldr	r3, [r3, r2, lsl #2]
   21978:	mul	r3, r3, r1
   2197c:	ldr	r1, [sp, #196]	; 0xc4
   21980:	str	r3, [sp, #20]
   21984:	ldr	r3, [r5]
   21988:	ldr	r1, [r1, r2, lsl #2]
   2198c:	add	r2, r2, #1
   21990:	mla	r6, r1, r3, r6
   21994:	b	21808 <GetDataSlab+0x58ec>
   21998:	ldr	r7, [r4, r2, lsl #2]
   2199c:	mov	r0, r1
   219a0:	ldr	r3, [r1, #-4]!
   219a4:	mul	r3, r3, r7
   219a8:	ldr	r7, [ip, #4]
   219ac:	str	r3, [r4, r2, lsl #2]
   219b0:	ldr	r3, [r0]
   219b4:	mul	r3, r3, r7
   219b8:	str	r3, [ip, #4]
   219bc:	b	21960 <GetDataSlab+0x5a44>
   219c0:	ldr	r0, [r5, r3, lsl #2]
   219c4:	add	r3, r3, #1
   219c8:	vmov	s15, r0
   219cc:	vcvt.f32.s32	s15, s15
   219d0:	vstmia	r1!, {s15}
   219d4:	b	21a34 <GetDataSlab+0x5b18>
   219d8:	cmp	r2, #0
   219dc:	beq	21ac0 <GetDataSlab+0x5ba4>
   219e0:	ldr	r3, [r8]
   219e4:	mul	r3, r3, r2
   219e8:	b	21ab8 <GetDataSlab+0x5b9c>
   219ec:	add	r3, sp, #152	; 0x98
   219f0:	add	r3, r3, r4, lsl #2
   219f4:	ldr	r3, [r3, #-120]	; 0xffffff88
   219f8:	add	r6, r6, r3
   219fc:	add	r5, r5, r3, lsl #2
   21a00:	ldr	r3, [sp, #12]
   21a04:	add	r9, r9, r3
   21a08:	ldr	r3, [sp, #20]
   21a0c:	cmp	r9, r3
   21a10:	bge	1c04c <GetDataSlab+0x130>
   21a14:	ldr	r3, [sp, #196]	; 0xc4
   21a18:	ldr	r2, [r3]
   21a1c:	ldr	r3, [sp]
   21a20:	cmp	r2, #0
   21a24:	add	r1, r3, r9, lsl #2
   21a28:	addne	r5, r5, r2, lsl #2
   21a2c:	addne	r6, r6, r2
   21a30:	mov	r3, #0
   21a34:	ldr	r0, [sp, #12]
   21a38:	cmp	r3, r0
   21a3c:	blt	219c0 <GetDataSlab+0x5aa4>
   21a40:	ldr	r3, [sp, #24]
   21a44:	ldr	r8, [sp, #4]
   21a48:	sub	r3, r3, r2
   21a4c:	ldr	r4, [sp, #16]
   21a50:	add	r6, r6, r3
   21a54:	add	r5, r5, r3, lsl #2
   21a58:	ldr	r3, [sp, #208]	; 0xd0
   21a5c:	cmp	r4, r3
   21a60:	bge	21a00 <GetDataSlab+0x5ae4>
   21a64:	ldr	r3, [sl, r4, lsl #2]
   21a68:	ldr	r2, [sp, #204]	; 0xcc
   21a6c:	add	r3, r3, #1
   21a70:	str	r3, [sl, r4, lsl #2]
   21a74:	mov	r0, r3
   21a78:	ldr	r1, [r2, r4, lsl #2]
   21a7c:	bl	3fd18 <__aeabi_idivmod>
   21a80:	subs	r3, r1, #0
   21a84:	bne	219ec <GetDataSlab+0x5ad0>
   21a88:	ldr	r7, [r8, #4]
   21a8c:	str	r3, [sl, r4, lsl #2]
   21a90:	mov	r1, r7
   21a94:	mov	r0, r6
   21a98:	bl	3fd18 <__aeabi_idivmod>
   21a9c:	ldr	r2, [sp, #196]	; 0xc4
   21aa0:	ldr	r2, [r2, r4, lsl #2]
   21aa4:	subs	r3, r1, #0
   21aa8:	beq	219d8 <GetDataSlab+0x5abc>
   21aac:	ldr	r1, [r8]
   21ab0:	sub	r3, r7, r3
   21ab4:	mla	r3, r2, r1, r3
   21ab8:	add	r5, r5, r3, lsl #2
   21abc:	add	r6, r6, r3
   21ac0:	add	r4, r4, #1
   21ac4:	add	r8, r8, #4
   21ac8:	b	21a58 <GetDataSlab+0x5b3c>
   21acc:	ldr	r2, [ip], fp
   21ad0:	add	r3, r3, #1
   21ad4:	vmov	s15, r2
   21ad8:	vcvt.f32.s32	s15, s15
   21adc:	vstmia	r0!, {s15}
   21ae0:	b	2189c <GetDataSlab+0x5980>
   21ae4:	cmp	r2, #0
   21ae8:	beq	21938 <GetDataSlab+0x5a1c>
   21aec:	ldr	r3, [r8]
   21af0:	mul	r3, r3, r2
   21af4:	b	21930 <GetDataSlab+0x5a14>
   21af8:	add	r3, sp, #152	; 0x98
   21afc:	add	r3, r3, r4, lsl #2
   21b00:	ldr	r3, [r3, #-120]	; 0xffffff88
   21b04:	add	r6, r6, r3
   21b08:	add	r5, r5, r3, lsl #2
   21b0c:	ldr	r3, [sp, #12]
   21b10:	add	r9, r9, r3
   21b14:	b	2186c <GetDataSlab+0x5950>
   21b18:	ldr	r3, [r9]
   21b1c:	ldr	ip, [sp, #4]
   21b20:	str	r3, [sp, #16]
   21b24:	sub	r3, r3, #1
   21b28:	str	r3, [sp, #32]
   21b2c:	ldr	r3, [fp]
   21b30:	mov	lr, fp
   21b34:	str	r3, [sp, #24]
   21b38:	str	r3, [sp, #112]	; 0x70
   21b3c:	ldr	r3, [sp, #204]	; 0xcc
   21b40:	mov	r6, #0
   21b44:	mov	r2, #1
   21b48:	ldr	r3, [r3]
   21b4c:	str	r3, [sp, #12]
   21b50:	str	r3, [sp, #20]
   21b54:	ldr	r3, [sp, #208]	; 0xd0
   21b58:	cmp	r2, r3
   21b5c:	blt	21c90 <GetDataSlab+0x5d74>
   21b60:	ldr	r3, [sp, #8]
   21b64:	add	r5, r3, r6, lsl #2
   21b68:	ldr	r3, [sp, #16]
   21b6c:	cmp	r3, #1
   21b70:	moveq	r9, #0
   21b74:	beq	21d54 <GetDataSlab+0x5e38>
   21b78:	ldr	r3, [sp, #16]
   21b7c:	ldr	r2, [sp, #12]
   21b80:	mov	r9, #0
   21b84:	mul	r3, r3, r2
   21b88:	ldr	r2, [sp, #24]
   21b8c:	sub	r3, r2, r3
   21b90:	str	r3, [sp, #24]
   21b94:	ldr	r3, [sp, #16]
   21b98:	ldr	r2, [sp, #16]
   21b9c:	lsl	fp, r3, #2
   21ba0:	ldr	r3, [sp, #12]
   21ba4:	bic	r3, r3, r3, asr #31
   21ba8:	mul	r2, r2, r3
   21bac:	mul	r3, r3, fp
   21bb0:	str	r2, [sp, #16]
   21bb4:	str	r3, [sp, #8]
   21bb8:	ldr	r3, [sp, #20]
   21bbc:	cmp	r9, r3
   21bc0:	bge	1c04c <GetDataSlab+0x130>
   21bc4:	ldr	r3, [sp, #196]	; 0xc4
   21bc8:	ldr	r1, [r3]
   21bcc:	ldr	r3, [sp]
   21bd0:	cmp	r1, #0
   21bd4:	addne	r5, r5, r1, lsl #2
   21bd8:	add	r0, r3, r9, lsl #2
   21bdc:	addne	r6, r6, r1
   21be0:	mov	ip, r5
   21be4:	mov	r3, #0
   21be8:	ldr	r2, [sp, #12]
   21bec:	cmp	r3, r2
   21bf0:	blt	21e18 <GetDataSlab+0x5efc>
   21bf4:	ldr	r3, [sp, #24]
   21bf8:	ldr	r8, [sp, #4]
   21bfc:	sub	r2, r3, r1
   21c00:	ldr	r3, [sp, #16]
   21c04:	mov	r4, #1
   21c08:	add	r3, r6, r3
   21c0c:	add	r6, r3, r2
   21c10:	ldr	r3, [sp, #8]
   21c14:	add	r3, r3, r2, lsl #2
   21c18:	add	r5, r5, r3
   21c1c:	ldr	r3, [sp, #208]	; 0xd0
   21c20:	cmp	r4, r3
   21c24:	bge	21e58 <GetDataSlab+0x5f3c>
   21c28:	ldr	r3, [sl, r4, lsl #2]
   21c2c:	ldr	r2, [sp, #204]	; 0xcc
   21c30:	add	r3, r3, #1
   21c34:	str	r3, [sl, r4, lsl #2]
   21c38:	mov	r0, r3
   21c3c:	ldr	r1, [r2, r4, lsl #2]
   21c40:	bl	3fd18 <__aeabi_idivmod>
   21c44:	subs	r3, r1, #0
   21c48:	bne	21e44 <GetDataSlab+0x5f28>
   21c4c:	ldr	r7, [r8, #4]
   21c50:	str	r3, [sl, r4, lsl #2]
   21c54:	mov	r1, r7
   21c58:	mov	r0, r6
   21c5c:	bl	3fd18 <__aeabi_idivmod>
   21c60:	ldr	r2, [sp, #196]	; 0xc4
   21c64:	ldr	r2, [r2, r4, lsl #2]
   21c68:	subs	r3, r1, #0
   21c6c:	beq	21e30 <GetDataSlab+0x5f14>
   21c70:	ldr	r1, [r8]
   21c74:	sub	r3, r7, r3
   21c78:	mla	r3, r2, r1, r3
   21c7c:	add	r5, r5, r3, lsl #2
   21c80:	add	r6, r6, r3
   21c84:	add	r4, r4, #1
   21c88:	add	r8, r8, #4
   21c8c:	b	21c1c <GetDataSlab+0x5d00>
   21c90:	ldr	r3, [r9, r2, lsl #2]
   21c94:	mov	r5, ip
   21c98:	sub	r3, r3, #1
   21c9c:	str	r3, [r4, r2, lsl #2]
   21ca0:	ldr	r3, [lr], #4
   21ca4:	mov	r1, lr
   21ca8:	str	r3, [ip, #4]
   21cac:	cmp	fp, r1
   21cb0:	bne	21ce4 <GetDataSlab+0x5dc8>
   21cb4:	ldr	r3, [sp, #204]	; 0xcc
   21cb8:	ldr	r1, [sp, #20]
   21cbc:	add	ip, ip, #4
   21cc0:	ldr	r3, [r3, r2, lsl #2]
   21cc4:	mul	r3, r3, r1
   21cc8:	ldr	r1, [sp, #196]	; 0xc4
   21ccc:	str	r3, [sp, #20]
   21cd0:	ldr	r3, [r5]
   21cd4:	ldr	r1, [r1, r2, lsl #2]
   21cd8:	add	r2, r2, #1
   21cdc:	mla	r6, r1, r3, r6
   21ce0:	b	21b54 <GetDataSlab+0x5c38>
   21ce4:	ldr	r7, [r4, r2, lsl #2]
   21ce8:	mov	r0, r1
   21cec:	ldr	r3, [r1, #-4]!
   21cf0:	mul	r3, r3, r7
   21cf4:	ldr	r7, [ip, #4]
   21cf8:	str	r3, [r4, r2, lsl #2]
   21cfc:	ldr	r3, [r0]
   21d00:	mul	r3, r3, r7
   21d04:	str	r3, [ip, #4]
   21d08:	b	21cac <GetDataSlab+0x5d90>
   21d0c:	ldr	r0, [r5, r3, lsl #2]
   21d10:	add	r3, r3, #1
   21d14:	vmov	s15, r0
   21d18:	vcvt.f32.u32	s15, s15
   21d1c:	vstmia	r1!, {s15}
   21d20:	b	21d80 <GetDataSlab+0x5e64>
   21d24:	cmp	r2, #0
   21d28:	beq	21e0c <GetDataSlab+0x5ef0>
   21d2c:	ldr	r3, [r8]
   21d30:	mul	r3, r3, r2
   21d34:	b	21e04 <GetDataSlab+0x5ee8>
   21d38:	add	r3, sp, #152	; 0x98
   21d3c:	add	r3, r3, r4, lsl #2
   21d40:	ldr	r3, [r3, #-120]	; 0xffffff88
   21d44:	add	r6, r6, r3
   21d48:	add	r5, r5, r3, lsl #2
   21d4c:	ldr	r3, [sp, #12]
   21d50:	add	r9, r9, r3
   21d54:	ldr	r3, [sp, #20]
   21d58:	cmp	r9, r3
   21d5c:	bge	1c04c <GetDataSlab+0x130>
   21d60:	ldr	r3, [sp, #196]	; 0xc4
   21d64:	ldr	r2, [r3]
   21d68:	ldr	r3, [sp]
   21d6c:	cmp	r2, #0
   21d70:	add	r1, r3, r9, lsl #2
   21d74:	addne	r5, r5, r2, lsl #2
   21d78:	addne	r6, r6, r2
   21d7c:	mov	r3, #0
   21d80:	ldr	r0, [sp, #12]
   21d84:	cmp	r3, r0
   21d88:	blt	21d0c <GetDataSlab+0x5df0>
   21d8c:	ldr	r3, [sp, #24]
   21d90:	ldr	r8, [sp, #4]
   21d94:	sub	r3, r3, r2
   21d98:	ldr	r4, [sp, #16]
   21d9c:	add	r6, r6, r3
   21da0:	add	r5, r5, r3, lsl #2
   21da4:	ldr	r3, [sp, #208]	; 0xd0
   21da8:	cmp	r4, r3
   21dac:	bge	21d4c <GetDataSlab+0x5e30>
   21db0:	ldr	r3, [sl, r4, lsl #2]
   21db4:	ldr	r2, [sp, #204]	; 0xcc
   21db8:	add	r3, r3, #1
   21dbc:	str	r3, [sl, r4, lsl #2]
   21dc0:	mov	r0, r3
   21dc4:	ldr	r1, [r2, r4, lsl #2]
   21dc8:	bl	3fd18 <__aeabi_idivmod>
   21dcc:	subs	r3, r1, #0
   21dd0:	bne	21d38 <GetDataSlab+0x5e1c>
   21dd4:	ldr	r7, [r8, #4]
   21dd8:	str	r3, [sl, r4, lsl #2]
   21ddc:	mov	r1, r7
   21de0:	mov	r0, r6
   21de4:	bl	3fd18 <__aeabi_idivmod>
   21de8:	ldr	r2, [sp, #196]	; 0xc4
   21dec:	ldr	r2, [r2, r4, lsl #2]
   21df0:	subs	r3, r1, #0
   21df4:	beq	21d24 <GetDataSlab+0x5e08>
   21df8:	ldr	r1, [r8]
   21dfc:	sub	r3, r7, r3
   21e00:	mla	r3, r2, r1, r3
   21e04:	add	r5, r5, r3, lsl #2
   21e08:	add	r6, r6, r3
   21e0c:	add	r4, r4, #1
   21e10:	add	r8, r8, #4
   21e14:	b	21da4 <GetDataSlab+0x5e88>
   21e18:	ldr	r2, [ip], fp
   21e1c:	add	r3, r3, #1
   21e20:	vmov	s15, r2
   21e24:	vcvt.f32.u32	s15, s15
   21e28:	vstmia	r0!, {s15}
   21e2c:	b	21be8 <GetDataSlab+0x5ccc>
   21e30:	cmp	r2, #0
   21e34:	beq	21c84 <GetDataSlab+0x5d68>
   21e38:	ldr	r3, [r8]
   21e3c:	mul	r3, r3, r2
   21e40:	b	21c7c <GetDataSlab+0x5d60>
   21e44:	add	r3, sp, #152	; 0x98
   21e48:	add	r3, r3, r4, lsl #2
   21e4c:	ldr	r3, [r3, #-120]	; 0xffffff88
   21e50:	add	r6, r6, r3
   21e54:	add	r5, r5, r3, lsl #2
   21e58:	ldr	r3, [sp, #12]
   21e5c:	add	r9, r9, r3
   21e60:	b	21bb8 <GetDataSlab+0x5c9c>
   21e64:	ldr	r3, [r9]
   21e68:	ldr	ip, [sp, #4]
   21e6c:	str	r3, [sp, #16]
   21e70:	sub	r3, r3, #1
   21e74:	str	r3, [sp, #32]
   21e78:	ldr	r3, [fp]
   21e7c:	mov	lr, fp
   21e80:	str	r3, [sp, #24]
   21e84:	str	r3, [sp, #112]	; 0x70
   21e88:	ldr	r3, [sp, #204]	; 0xcc
   21e8c:	mov	r6, #0
   21e90:	mov	r2, #1
   21e94:	ldr	r3, [r3]
   21e98:	str	r3, [sp, #12]
   21e9c:	str	r3, [sp, #20]
   21ea0:	ldr	r3, [sp, #208]	; 0xd0
   21ea4:	cmp	r2, r3
   21ea8:	blt	21fdc <GetDataSlab+0x60c0>
   21eac:	ldr	r3, [sp, #8]
   21eb0:	add	r5, r3, r6, lsl #1
   21eb4:	ldr	r3, [sp, #16]
   21eb8:	cmp	r3, #1
   21ebc:	moveq	r9, #0
   21ec0:	beq	220a0 <GetDataSlab+0x6184>
   21ec4:	ldr	r3, [sp, #16]
   21ec8:	ldr	r2, [sp, #12]
   21ecc:	mov	r9, #0
   21ed0:	mul	r3, r3, r2
   21ed4:	ldr	r2, [sp, #24]
   21ed8:	sub	r3, r2, r3
   21edc:	str	r3, [sp, #24]
   21ee0:	ldr	r3, [sp, #16]
   21ee4:	ldr	r2, [sp, #16]
   21ee8:	lsl	fp, r3, #1
   21eec:	ldr	r3, [sp, #12]
   21ef0:	bic	r3, r3, r3, asr #31
   21ef4:	mul	r2, r2, r3
   21ef8:	mul	r3, r3, fp
   21efc:	str	r2, [sp, #16]
   21f00:	str	r3, [sp, #8]
   21f04:	ldr	r3, [sp, #20]
   21f08:	cmp	r9, r3
   21f0c:	bge	1c04c <GetDataSlab+0x130>
   21f10:	ldr	r3, [sp, #196]	; 0xc4
   21f14:	ldr	r1, [r3]
   21f18:	ldr	r3, [sp]
   21f1c:	cmp	r1, #0
   21f20:	addne	r5, r5, r1, lsl #1
   21f24:	add	r0, r3, r9, lsl #2
   21f28:	addne	r6, r6, r1
   21f2c:	mov	ip, r5
   21f30:	mov	r3, #0
   21f34:	ldr	r2, [sp, #12]
   21f38:	cmp	r3, r2
   21f3c:	blt	22168 <GetDataSlab+0x624c>
   21f40:	ldr	r3, [sp, #24]
   21f44:	ldr	r8, [sp, #4]
   21f48:	sub	r2, r3, r1
   21f4c:	ldr	r3, [sp, #16]
   21f50:	mov	r4, #1
   21f54:	add	r3, r3, r6
   21f58:	add	r6, r3, r2
   21f5c:	ldr	r3, [sp, #8]
   21f60:	add	r3, r3, r2, lsl #1
   21f64:	add	r5, r5, r3
   21f68:	ldr	r3, [sp, #208]	; 0xd0
   21f6c:	cmp	r4, r3
   21f70:	bge	221a8 <GetDataSlab+0x628c>
   21f74:	ldr	r3, [sl, r4, lsl #2]
   21f78:	ldr	r2, [sp, #204]	; 0xcc
   21f7c:	add	r3, r3, #1
   21f80:	str	r3, [sl, r4, lsl #2]
   21f84:	mov	r0, r3
   21f88:	ldr	r1, [r2, r4, lsl #2]
   21f8c:	bl	3fd18 <__aeabi_idivmod>
   21f90:	subs	r3, r1, #0
   21f94:	bne	22194 <GetDataSlab+0x6278>
   21f98:	ldr	r7, [r8, #4]
   21f9c:	str	r3, [sl, r4, lsl #2]
   21fa0:	mov	r1, r7
   21fa4:	mov	r0, r6
   21fa8:	bl	3fd18 <__aeabi_idivmod>
   21fac:	ldr	r2, [sp, #196]	; 0xc4
   21fb0:	ldr	r2, [r2, r4, lsl #2]
   21fb4:	subs	r3, r1, #0
   21fb8:	beq	22180 <GetDataSlab+0x6264>
   21fbc:	ldr	r1, [r8]
   21fc0:	sub	r3, r7, r3
   21fc4:	mla	r3, r2, r1, r3
   21fc8:	add	r5, r5, r3, lsl #1
   21fcc:	add	r6, r6, r3
   21fd0:	add	r4, r4, #1
   21fd4:	add	r8, r8, #4
   21fd8:	b	21f68 <GetDataSlab+0x604c>
   21fdc:	ldr	r3, [r9, r2, lsl #2]
   21fe0:	mov	r5, ip
   21fe4:	sub	r3, r3, #1
   21fe8:	str	r3, [r4, r2, lsl #2]
   21fec:	ldr	r3, [lr], #4
   21ff0:	mov	r1, lr
   21ff4:	str	r3, [ip, #4]
   21ff8:	cmp	fp, r1
   21ffc:	bne	22030 <GetDataSlab+0x6114>
   22000:	ldr	r3, [sp, #204]	; 0xcc
   22004:	ldr	r1, [sp, #20]
   22008:	add	ip, ip, #4
   2200c:	ldr	r3, [r3, r2, lsl #2]
   22010:	mul	r3, r3, r1
   22014:	ldr	r1, [sp, #196]	; 0xc4
   22018:	str	r3, [sp, #20]
   2201c:	ldr	r3, [r5]
   22020:	ldr	r1, [r1, r2, lsl #2]
   22024:	add	r2, r2, #1
   22028:	mla	r6, r1, r3, r6
   2202c:	b	21ea0 <GetDataSlab+0x5f84>
   22030:	ldr	r7, [r4, r2, lsl #2]
   22034:	mov	r0, r1
   22038:	ldr	r3, [r1, #-4]!
   2203c:	mul	r3, r3, r7
   22040:	ldr	r7, [ip, #4]
   22044:	str	r3, [r4, r2, lsl #2]
   22048:	ldr	r3, [r0]
   2204c:	mul	r3, r3, r7
   22050:	str	r3, [ip, #4]
   22054:	b	21ff8 <GetDataSlab+0x60dc>
   22058:	ldrsh	r1, [ip, #2]!
   2205c:	add	r2, r2, #1
   22060:	vmov	s15, r1
   22064:	vcvt.f32.s32	s15, s15
   22068:	vstmia	r0!, {s15}
   2206c:	b	220d0 <GetDataSlab+0x61b4>
   22070:	cmp	r2, #0
   22074:	beq	2215c <GetDataSlab+0x6240>
   22078:	ldr	r3, [r8]
   2207c:	mul	r3, r3, r2
   22080:	b	22154 <GetDataSlab+0x6238>
   22084:	add	r3, sp, #152	; 0x98
   22088:	add	r3, r3, r4, lsl #2
   2208c:	ldr	r3, [r3, #-120]	; 0xffffff88
   22090:	add	r6, r6, r3
   22094:	add	r5, r5, r3, lsl #1
   22098:	ldr	r3, [sp, #12]
   2209c:	add	r9, r9, r3
   220a0:	ldr	r3, [sp, #20]
   220a4:	cmp	r9, r3
   220a8:	bge	1c04c <GetDataSlab+0x130>
   220ac:	ldr	r3, [sp, #196]	; 0xc4
   220b0:	ldr	r2, [sp]
   220b4:	ldr	r3, [r3]
   220b8:	add	r0, r2, r9, lsl #2
   220bc:	cmp	r3, #0
   220c0:	addne	r5, r5, r3, lsl #1
   220c4:	addne	r6, r6, r3
   220c8:	sub	ip, r5, #2
   220cc:	mov	r2, #0
   220d0:	ldr	r1, [sp, #12]
   220d4:	cmp	r2, r1
   220d8:	blt	22058 <GetDataSlab+0x613c>
   220dc:	ldr	r2, [sp, #24]
   220e0:	ldr	r8, [sp, #4]
   220e4:	sub	r3, r2, r3
   220e8:	ldr	r4, [sp, #16]
   220ec:	add	r6, r6, r3
   220f0:	add	r5, r5, r3, lsl #1
   220f4:	ldr	r3, [sp, #208]	; 0xd0
   220f8:	cmp	r4, r3
   220fc:	bge	22098 <GetDataSlab+0x617c>
   22100:	ldr	r3, [sl, r4, lsl #2]
   22104:	ldr	r2, [sp, #204]	; 0xcc
   22108:	add	r3, r3, #1
   2210c:	str	r3, [sl, r4, lsl #2]
   22110:	mov	r0, r3
   22114:	ldr	r1, [r2, r4, lsl #2]
   22118:	bl	3fd18 <__aeabi_idivmod>
   2211c:	subs	r3, r1, #0
   22120:	bne	22084 <GetDataSlab+0x6168>
   22124:	ldr	r7, [r8, #4]
   22128:	str	r3, [sl, r4, lsl #2]
   2212c:	mov	r1, r7
   22130:	mov	r0, r6
   22134:	bl	3fd18 <__aeabi_idivmod>
   22138:	ldr	r2, [sp, #196]	; 0xc4
   2213c:	ldr	r2, [r2, r4, lsl #2]
   22140:	subs	r3, r1, #0
   22144:	beq	22070 <GetDataSlab+0x6154>
   22148:	ldr	r1, [r8]
   2214c:	sub	r3, r7, r3
   22150:	mla	r3, r2, r1, r3
   22154:	add	r5, r5, r3, lsl #1
   22158:	add	r6, r6, r3
   2215c:	add	r4, r4, #1
   22160:	add	r8, r8, #4
   22164:	b	220f4 <GetDataSlab+0x61d8>
   22168:	ldrsh	r2, [ip], fp
   2216c:	add	r3, r3, #1
   22170:	vmov	s15, r2
   22174:	vcvt.f32.s32	s15, s15
   22178:	vstmia	r0!, {s15}
   2217c:	b	21f34 <GetDataSlab+0x6018>
   22180:	cmp	r2, #0
   22184:	beq	21fd0 <GetDataSlab+0x60b4>
   22188:	ldr	r3, [r8]
   2218c:	mul	r3, r3, r2
   22190:	b	21fc8 <GetDataSlab+0x60ac>
   22194:	add	r3, sp, #152	; 0x98
   22198:	add	r3, r3, r4, lsl #2
   2219c:	ldr	r3, [r3, #-120]	; 0xffffff88
   221a0:	add	r6, r6, r3
   221a4:	add	r5, r5, r3, lsl #1
   221a8:	ldr	r3, [sp, #12]
   221ac:	add	r9, r9, r3
   221b0:	b	21f04 <GetDataSlab+0x5fe8>
   221b4:	ldr	r3, [r9]
   221b8:	ldr	ip, [sp, #4]
   221bc:	str	r3, [sp, #16]
   221c0:	sub	r3, r3, #1
   221c4:	str	r3, [sp, #32]
   221c8:	ldr	r3, [fp]
   221cc:	mov	lr, fp
   221d0:	str	r3, [sp, #24]
   221d4:	str	r3, [sp, #112]	; 0x70
   221d8:	ldr	r3, [sp, #204]	; 0xcc
   221dc:	mov	r6, #0
   221e0:	mov	r2, #1
   221e4:	ldr	r3, [r3]
   221e8:	str	r3, [sp, #12]
   221ec:	str	r3, [sp, #20]
   221f0:	ldr	r3, [sp, #208]	; 0xd0
   221f4:	cmp	r2, r3
   221f8:	blt	2232c <GetDataSlab+0x6410>
   221fc:	ldr	r3, [sp, #8]
   22200:	add	r5, r3, r6, lsl #1
   22204:	ldr	r3, [sp, #16]
   22208:	cmp	r3, #1
   2220c:	moveq	r9, #0
   22210:	beq	223f0 <GetDataSlab+0x64d4>
   22214:	ldr	r3, [sp, #16]
   22218:	ldr	r2, [sp, #12]
   2221c:	mov	r9, #0
   22220:	mul	r3, r3, r2
   22224:	ldr	r2, [sp, #24]
   22228:	sub	r3, r2, r3
   2222c:	str	r3, [sp, #24]
   22230:	ldr	r3, [sp, #16]
   22234:	ldr	r2, [sp, #16]
   22238:	lsl	fp, r3, #1
   2223c:	ldr	r3, [sp, #12]
   22240:	bic	r3, r3, r3, asr #31
   22244:	mul	r2, r3, r2
   22248:	mul	r3, r3, fp
   2224c:	str	r2, [sp, #8]
   22250:	str	r3, [sp, #16]
   22254:	ldr	r3, [sp, #20]
   22258:	cmp	r9, r3
   2225c:	bge	1c04c <GetDataSlab+0x130>
   22260:	ldr	r3, [sp, #196]	; 0xc4
   22264:	ldr	r1, [r3]
   22268:	ldr	r3, [sp]
   2226c:	cmp	r1, #0
   22270:	addne	r5, r5, r1, lsl #1
   22274:	add	r0, r3, r9, lsl #2
   22278:	addne	r6, r6, r1
   2227c:	mov	ip, r5
   22280:	mov	r3, #0
   22284:	ldr	r2, [sp, #12]
   22288:	cmp	r3, r2
   2228c:	blt	224b8 <GetDataSlab+0x659c>
   22290:	ldr	r3, [sp, #24]
   22294:	ldr	r8, [sp, #4]
   22298:	sub	r2, r3, r1
   2229c:	ldr	r3, [sp, #8]
   222a0:	mov	r4, #1
   222a4:	add	r3, r3, r6
   222a8:	add	r6, r3, r2
   222ac:	ldr	r3, [sp, #16]
   222b0:	add	r3, r3, r2, lsl #1
   222b4:	add	r5, r5, r3
   222b8:	ldr	r3, [sp, #208]	; 0xd0
   222bc:	cmp	r4, r3
   222c0:	bge	224f8 <GetDataSlab+0x65dc>
   222c4:	ldr	r3, [sl, r4, lsl #2]
   222c8:	ldr	r2, [sp, #204]	; 0xcc
   222cc:	add	r3, r3, #1
   222d0:	str	r3, [sl, r4, lsl #2]
   222d4:	mov	r0, r3
   222d8:	ldr	r1, [r2, r4, lsl #2]
   222dc:	bl	3fd18 <__aeabi_idivmod>
   222e0:	subs	r3, r1, #0
   222e4:	bne	224e4 <GetDataSlab+0x65c8>
   222e8:	ldr	r7, [r8, #4]
   222ec:	str	r3, [sl, r4, lsl #2]
   222f0:	mov	r1, r7
   222f4:	mov	r0, r6
   222f8:	bl	3fd18 <__aeabi_idivmod>
   222fc:	ldr	r2, [sp, #196]	; 0xc4
   22300:	ldr	r2, [r2, r4, lsl #2]
   22304:	subs	r3, r1, #0
   22308:	beq	224d0 <GetDataSlab+0x65b4>
   2230c:	ldr	r1, [r8]
   22310:	sub	r3, r7, r3
   22314:	mla	r3, r2, r1, r3
   22318:	add	r5, r5, r3, lsl #1
   2231c:	add	r6, r6, r3
   22320:	add	r4, r4, #1
   22324:	add	r8, r8, #4
   22328:	b	222b8 <GetDataSlab+0x639c>
   2232c:	ldr	r3, [r9, r2, lsl #2]
   22330:	mov	r5, ip
   22334:	sub	r3, r3, #1
   22338:	str	r3, [r4, r2, lsl #2]
   2233c:	ldr	r3, [lr], #4
   22340:	mov	r1, lr
   22344:	str	r3, [ip, #4]
   22348:	cmp	r1, fp
   2234c:	bne	22380 <GetDataSlab+0x6464>
   22350:	ldr	r3, [sp, #204]	; 0xcc
   22354:	ldr	r1, [sp, #20]
   22358:	add	ip, ip, #4
   2235c:	ldr	r3, [r3, r2, lsl #2]
   22360:	mul	r3, r3, r1
   22364:	ldr	r1, [sp, #196]	; 0xc4
   22368:	str	r3, [sp, #20]
   2236c:	ldr	r3, [r5]
   22370:	ldr	r1, [r1, r2, lsl #2]
   22374:	add	r2, r2, #1
   22378:	mla	r6, r1, r3, r6
   2237c:	b	221f0 <GetDataSlab+0x62d4>
   22380:	ldr	r7, [r4, r2, lsl #2]
   22384:	mov	r0, r1
   22388:	ldr	r3, [r1, #-4]!
   2238c:	mul	r3, r3, r7
   22390:	ldr	r7, [ip, #4]
   22394:	str	r3, [r4, r2, lsl #2]
   22398:	ldr	r3, [r0]
   2239c:	mul	r3, r3, r7
   223a0:	str	r3, [ip, #4]
   223a4:	b	22348 <GetDataSlab+0x642c>
   223a8:	ldrh	r1, [ip, #2]!
   223ac:	add	r2, r2, #1
   223b0:	vmov	s15, r1
   223b4:	vcvt.f32.u32	s15, s15
   223b8:	vstmia	r0!, {s15}
   223bc:	b	22420 <GetDataSlab+0x6504>
   223c0:	cmp	r2, #0
   223c4:	beq	224ac <GetDataSlab+0x6590>
   223c8:	ldr	r3, [r8]
   223cc:	mul	r3, r3, r2
   223d0:	b	224a4 <GetDataSlab+0x6588>
   223d4:	add	r3, sp, #152	; 0x98
   223d8:	add	r3, r3, r4, lsl #2
   223dc:	ldr	r3, [r3, #-120]	; 0xffffff88
   223e0:	add	r6, r6, r3
   223e4:	add	r5, r5, r3, lsl #1
   223e8:	ldr	r3, [sp, #12]
   223ec:	add	r9, r9, r3
   223f0:	ldr	r3, [sp, #20]
   223f4:	cmp	r9, r3
   223f8:	bge	1c04c <GetDataSlab+0x130>
   223fc:	ldr	r3, [sp, #196]	; 0xc4
   22400:	ldr	r2, [sp]
   22404:	ldr	r3, [r3]
   22408:	add	r0, r2, r9, lsl #2
   2240c:	cmp	r3, #0
   22410:	addne	r5, r5, r3, lsl #1
   22414:	addne	r6, r6, r3
   22418:	sub	ip, r5, #2
   2241c:	mov	r2, #0
   22420:	ldr	r1, [sp, #12]
   22424:	cmp	r2, r1
   22428:	blt	223a8 <GetDataSlab+0x648c>
   2242c:	ldr	r2, [sp, #24]
   22430:	ldr	r8, [sp, #4]
   22434:	sub	r3, r2, r3
   22438:	ldr	r4, [sp, #16]
   2243c:	add	r6, r6, r3
   22440:	add	r5, r5, r3, lsl #1
   22444:	ldr	r3, [sp, #208]	; 0xd0
   22448:	cmp	r4, r3
   2244c:	bge	223e8 <GetDataSlab+0x64cc>
   22450:	ldr	r3, [sl, r4, lsl #2]
   22454:	ldr	r2, [sp, #204]	; 0xcc
   22458:	add	r3, r3, #1
   2245c:	str	r3, [sl, r4, lsl #2]
   22460:	mov	r0, r3
   22464:	ldr	r1, [r2, r4, lsl #2]
   22468:	bl	3fd18 <__aeabi_idivmod>
   2246c:	subs	r3, r1, #0
   22470:	bne	223d4 <GetDataSlab+0x64b8>
   22474:	ldr	r7, [r8, #4]
   22478:	str	r3, [sl, r4, lsl #2]
   2247c:	mov	r1, r7
   22480:	mov	r0, r6
   22484:	bl	3fd18 <__aeabi_idivmod>
   22488:	ldr	r2, [sp, #196]	; 0xc4
   2248c:	ldr	r2, [r2, r4, lsl #2]
   22490:	subs	r3, r1, #0
   22494:	beq	223c0 <GetDataSlab+0x64a4>
   22498:	ldr	r1, [r8]
   2249c:	sub	r3, r7, r3
   224a0:	mla	r3, r2, r1, r3
   224a4:	add	r5, r5, r3, lsl #1
   224a8:	add	r6, r6, r3
   224ac:	add	r4, r4, #1
   224b0:	add	r8, r8, #4
   224b4:	b	22444 <GetDataSlab+0x6528>
   224b8:	ldrh	r2, [ip], fp
   224bc:	add	r3, r3, #1
   224c0:	vmov	s15, r2
   224c4:	vcvt.f32.u32	s15, s15
   224c8:	vstmia	r0!, {s15}
   224cc:	b	22284 <GetDataSlab+0x6368>
   224d0:	cmp	r2, #0
   224d4:	beq	22320 <GetDataSlab+0x6404>
   224d8:	ldr	r3, [r8]
   224dc:	mul	r3, r3, r2
   224e0:	b	22318 <GetDataSlab+0x63fc>
   224e4:	add	r3, sp, #152	; 0x98
   224e8:	add	r3, r3, r4, lsl #2
   224ec:	ldr	r3, [r3, #-120]	; 0xffffff88
   224f0:	add	r6, r6, r3
   224f4:	add	r5, r5, r3, lsl #1
   224f8:	ldr	r3, [sp, #12]
   224fc:	add	r9, r9, r3
   22500:	b	22254 <GetDataSlab+0x6338>
   22504:	ldr	r3, [r9]
   22508:	ldr	ip, [sp, #4]
   2250c:	str	r3, [sp, #12]
   22510:	sub	r3, r3, #1
   22514:	str	r3, [sp, #32]
   22518:	ldr	r3, [fp]
   2251c:	mov	lr, fp
   22520:	str	r3, [sp, #24]
   22524:	str	r3, [sp, #112]	; 0x70
   22528:	ldr	r3, [sp, #204]	; 0xcc
   2252c:	mov	r6, #0
   22530:	mov	r2, #1
   22534:	ldr	r3, [r3]
   22538:	str	r3, [sp, #16]
   2253c:	str	r3, [sp, #20]
   22540:	ldr	r3, [sp, #208]	; 0xd0
   22544:	cmp	r2, r3
   22548:	blt	22670 <GetDataSlab+0x6754>
   2254c:	ldr	r3, [sp, #8]
   22550:	add	r5, r3, r6
   22554:	ldr	r3, [sp, #12]
   22558:	cmp	r3, #1
   2255c:	moveq	r9, #0
   22560:	beq	22730 <GetDataSlab+0x6814>
   22564:	ldr	r2, [sp, #16]
   22568:	ldr	r3, [sp, #12]
   2256c:	mov	r9, #0
   22570:	mul	r3, r3, r2
   22574:	ldr	r2, [sp, #24]
   22578:	sub	r3, r2, r3
   2257c:	str	r3, [sp, #8]
   22580:	ldr	r3, [sp, #16]
   22584:	ldr	r2, [sp, #12]
   22588:	bic	r3, r3, r3, asr #31
   2258c:	mul	fp, r2, r3
   22590:	rsb	r3, r2, #0
   22594:	str	r3, [sp, #24]
   22598:	ldr	r3, [sp, #20]
   2259c:	cmp	r9, r3
   225a0:	bge	1c04c <GetDataSlab+0x130>
   225a4:	ldr	r3, [sp, #196]	; 0xc4
   225a8:	ldr	r0, [r3]
   225ac:	ldr	r3, [sp]
   225b0:	cmp	r0, #0
   225b4:	addne	r5, r5, r0
   225b8:	add	ip, r3, r9, lsl #2
   225bc:	addne	r6, r6, r0
   225c0:	mov	r1, r5
   225c4:	mov	r3, #0
   225c8:	ldr	r2, [sp, #12]
   225cc:	add	r1, r1, r2
   225d0:	ldr	r2, [sp, #16]
   225d4:	cmp	r3, r2
   225d8:	blt	227f8 <GetDataSlab+0x68dc>
   225dc:	ldr	r3, [sp, #8]
   225e0:	ldr	r8, [sp, #4]
   225e4:	sub	r2, r3, r0
   225e8:	add	r3, fp, r6
   225ec:	add	r6, r3, r2
   225f0:	add	r3, r2, fp
   225f4:	add	r5, r5, r3
   225f8:	mov	r4, #1
   225fc:	ldr	r3, [sp, #208]	; 0xd0
   22600:	cmp	r4, r3
   22604:	bge	2283c <GetDataSlab+0x6920>
   22608:	ldr	r3, [sl, r4, lsl #2]
   2260c:	ldr	r2, [sp, #204]	; 0xcc
   22610:	add	r3, r3, #1
   22614:	str	r3, [sl, r4, lsl #2]
   22618:	mov	r0, r3
   2261c:	ldr	r1, [r2, r4, lsl #2]
   22620:	bl	3fd18 <__aeabi_idivmod>
   22624:	subs	r3, r1, #0
   22628:	bne	22828 <GetDataSlab+0x690c>
   2262c:	ldr	r7, [r8, #4]
   22630:	str	r3, [sl, r4, lsl #2]
   22634:	mov	r1, r7
   22638:	mov	r0, r6
   2263c:	bl	3fd18 <__aeabi_idivmod>
   22640:	ldr	r2, [sp, #196]	; 0xc4
   22644:	ldr	r2, [r2, r4, lsl #2]
   22648:	subs	r3, r1, #0
   2264c:	beq	22814 <GetDataSlab+0x68f8>
   22650:	ldr	r1, [r8]
   22654:	sub	r3, r7, r3
   22658:	mla	r3, r2, r1, r3
   2265c:	add	r5, r5, r3
   22660:	add	r6, r6, r3
   22664:	add	r4, r4, #1
   22668:	add	r8, r8, #4
   2266c:	b	225fc <GetDataSlab+0x66e0>
   22670:	ldr	r3, [r9, r2, lsl #2]
   22674:	mov	r5, ip
   22678:	sub	r3, r3, #1
   2267c:	str	r3, [r4, r2, lsl #2]
   22680:	ldr	r3, [lr], #4
   22684:	mov	r1, lr
   22688:	str	r3, [ip, #4]
   2268c:	cmp	fp, r1
   22690:	bne	226c4 <GetDataSlab+0x67a8>
   22694:	ldr	r3, [sp, #204]	; 0xcc
   22698:	ldr	r1, [sp, #20]
   2269c:	add	ip, ip, #4
   226a0:	ldr	r3, [r3, r2, lsl #2]
   226a4:	mul	r3, r3, r1
   226a8:	ldr	r1, [sp, #196]	; 0xc4
   226ac:	str	r3, [sp, #20]
   226b0:	ldr	r3, [r5]
   226b4:	ldr	r1, [r1, r2, lsl #2]
   226b8:	add	r2, r2, #1
   226bc:	mla	r6, r1, r3, r6
   226c0:	b	22540 <GetDataSlab+0x6624>
   226c4:	ldr	r7, [r4, r2, lsl #2]
   226c8:	mov	r0, r1
   226cc:	ldr	r3, [r1, #-4]!
   226d0:	mul	r3, r3, r7
   226d4:	ldr	r7, [ip, #4]
   226d8:	str	r3, [r4, r2, lsl #2]
   226dc:	ldr	r3, [r0]
   226e0:	mul	r3, r3, r7
   226e4:	str	r3, [ip, #4]
   226e8:	b	2268c <GetDataSlab+0x6770>
   226ec:	ldrsb	r3, [r1], #1
   226f0:	vmov	s15, r3
   226f4:	vcvt.f32.s32	s15, s15
   226f8:	vstmia	r0!, {s15}
   226fc:	b	2275c <GetDataSlab+0x6840>
   22700:	cmp	r2, #0
   22704:	beq	227ec <GetDataSlab+0x68d0>
   22708:	ldr	r3, [r8]
   2270c:	mul	r3, r3, r2
   22710:	b	227e4 <GetDataSlab+0x68c8>
   22714:	add	r3, sp, #152	; 0x98
   22718:	add	r3, r3, r4, lsl #2
   2271c:	ldr	r3, [r3, #-120]	; 0xffffff88
   22720:	add	r6, r6, r3
   22724:	add	r5, r5, r3
   22728:	ldr	r3, [sp, #16]
   2272c:	add	r9, r9, r3
   22730:	ldr	r3, [sp, #20]
   22734:	cmp	r9, r3
   22738:	bge	1c04c <GetDataSlab+0x130>
   2273c:	ldr	r3, [sp, #196]	; 0xc4
   22740:	ldr	r2, [r3]
   22744:	ldr	r3, [sp]
   22748:	cmp	r2, #0
   2274c:	addne	r5, r5, r2
   22750:	addne	r6, r6, r2
   22754:	add	r0, r3, r9, lsl #2
   22758:	mov	r1, r5
   2275c:	ldr	ip, [sp, #16]
   22760:	sub	r3, r1, r5
   22764:	cmp	ip, r3
   22768:	bgt	226ec <GetDataSlab+0x67d0>
   2276c:	ldr	r3, [sp, #24]
   22770:	ldr	r8, [sp, #4]
   22774:	sub	r3, r3, r2
   22778:	ldr	r4, [sp, #12]
   2277c:	add	r6, r6, r3
   22780:	add	r5, r5, r3
   22784:	ldr	r3, [sp, #208]	; 0xd0
   22788:	cmp	r4, r3
   2278c:	bge	22728 <GetDataSlab+0x680c>
   22790:	ldr	r3, [sl, r4, lsl #2]
   22794:	ldr	r2, [sp, #204]	; 0xcc
   22798:	add	r3, r3, #1
   2279c:	str	r3, [sl, r4, lsl #2]
   227a0:	mov	r0, r3
   227a4:	ldr	r1, [r2, r4, lsl #2]
   227a8:	bl	3fd18 <__aeabi_idivmod>
   227ac:	subs	r3, r1, #0
   227b0:	bne	22714 <GetDataSlab+0x67f8>
   227b4:	ldr	r7, [r8, #4]
   227b8:	str	r3, [sl, r4, lsl #2]
   227bc:	mov	r1, r7
   227c0:	mov	r0, r6
   227c4:	bl	3fd18 <__aeabi_idivmod>
   227c8:	ldr	r2, [sp, #196]	; 0xc4
   227cc:	ldr	r2, [r2, r4, lsl #2]
   227d0:	subs	r3, r1, #0
   227d4:	beq	22700 <GetDataSlab+0x67e4>
   227d8:	ldr	r1, [r8]
   227dc:	sub	r3, r7, r3
   227e0:	mla	r3, r2, r1, r3
   227e4:	add	r5, r5, r3
   227e8:	add	r6, r6, r3
   227ec:	add	r4, r4, #1
   227f0:	add	r8, r8, #4
   227f4:	b	22784 <GetDataSlab+0x6868>
   227f8:	ldr	r2, [sp, #24]
   227fc:	add	r3, r3, #1
   22800:	ldrsb	r2, [r1, r2]
   22804:	vmov	s15, r2
   22808:	vcvt.f32.s32	s15, s15
   2280c:	vstmia	ip!, {s15}
   22810:	b	225c8 <GetDataSlab+0x66ac>
   22814:	cmp	r2, #0
   22818:	beq	22664 <GetDataSlab+0x6748>
   2281c:	ldr	r3, [r8]
   22820:	mul	r3, r3, r2
   22824:	b	2265c <GetDataSlab+0x6740>
   22828:	add	r3, sp, #152	; 0x98
   2282c:	add	r3, r3, r4, lsl #2
   22830:	ldr	r3, [r3, #-120]	; 0xffffff88
   22834:	add	r6, r6, r3
   22838:	add	r5, r5, r3
   2283c:	ldr	r3, [sp, #16]
   22840:	add	r9, r9, r3
   22844:	b	22598 <GetDataSlab+0x667c>
   22848:	ldr	r3, [r9]
   2284c:	ldr	ip, [sp, #4]
   22850:	str	r3, [sp, #12]
   22854:	sub	r3, r3, #1
   22858:	str	r3, [sp, #32]
   2285c:	ldr	r3, [fp]
   22860:	mov	lr, fp
   22864:	str	r3, [sp, #24]
   22868:	str	r3, [sp, #112]	; 0x70
   2286c:	ldr	r3, [sp, #204]	; 0xcc
   22870:	mov	r6, #0
   22874:	mov	r2, #1
   22878:	ldr	r3, [r3]
   2287c:	str	r3, [sp, #16]
   22880:	str	r3, [sp, #20]
   22884:	ldr	r3, [sp, #208]	; 0xd0
   22888:	cmp	r2, r3
   2288c:	blt	229b4 <GetDataSlab+0x6a98>
   22890:	ldr	r3, [sp, #8]
   22894:	add	r5, r3, r6
   22898:	ldr	r3, [sp, #12]
   2289c:	cmp	r3, #1
   228a0:	moveq	r9, #0
   228a4:	beq	22a74 <GetDataSlab+0x6b58>
   228a8:	ldr	r2, [sp, #16]
   228ac:	ldr	r3, [sp, #12]
   228b0:	mov	r9, #0
   228b4:	mul	r3, r3, r2
   228b8:	ldr	r2, [sp, #24]
   228bc:	sub	r3, r2, r3
   228c0:	str	r3, [sp, #8]
   228c4:	ldr	r3, [sp, #16]
   228c8:	ldr	r2, [sp, #12]
   228cc:	bic	r3, r3, r3, asr #31
   228d0:	mul	fp, r2, r3
   228d4:	rsb	r3, r2, #0
   228d8:	str	r3, [sp, #24]
   228dc:	ldr	r3, [sp, #20]
   228e0:	cmp	r9, r3
   228e4:	bge	1c04c <GetDataSlab+0x130>
   228e8:	ldr	r3, [sp, #196]	; 0xc4
   228ec:	ldr	r0, [r3]
   228f0:	ldr	r3, [sp]
   228f4:	cmp	r0, #0
   228f8:	addne	r5, r5, r0
   228fc:	add	ip, r3, r9, lsl #2
   22900:	addne	r6, r6, r0
   22904:	mov	r1, r5
   22908:	mov	r3, #0
   2290c:	ldr	r2, [sp, #12]
   22910:	add	r1, r1, r2
   22914:	ldr	r2, [sp, #16]
   22918:	cmp	r3, r2
   2291c:	blt	22b3c <GetDataSlab+0x6c20>
   22920:	ldr	r3, [sp, #8]
   22924:	ldr	r8, [sp, #4]
   22928:	sub	r2, r3, r0
   2292c:	add	r3, fp, r6
   22930:	add	r6, r3, r2
   22934:	add	r3, r2, fp
   22938:	add	r5, r5, r3
   2293c:	mov	r4, #1
   22940:	ldr	r3, [sp, #208]	; 0xd0
   22944:	cmp	r4, r3
   22948:	bge	22b80 <GetDataSlab+0x6c64>
   2294c:	ldr	r3, [sl, r4, lsl #2]
   22950:	ldr	r2, [sp, #204]	; 0xcc
   22954:	add	r3, r3, #1
   22958:	str	r3, [sl, r4, lsl #2]
   2295c:	mov	r0, r3
   22960:	ldr	r1, [r2, r4, lsl #2]
   22964:	bl	3fd18 <__aeabi_idivmod>
   22968:	subs	r3, r1, #0
   2296c:	bne	22b6c <GetDataSlab+0x6c50>
   22970:	ldr	r7, [r8, #4]
   22974:	str	r3, [sl, r4, lsl #2]
   22978:	mov	r1, r7
   2297c:	mov	r0, r6
   22980:	bl	3fd18 <__aeabi_idivmod>
   22984:	ldr	r2, [sp, #196]	; 0xc4
   22988:	ldr	r2, [r2, r4, lsl #2]
   2298c:	subs	r3, r1, #0
   22990:	beq	22b58 <GetDataSlab+0x6c3c>
   22994:	ldr	r1, [r8]
   22998:	sub	r3, r7, r3
   2299c:	mla	r3, r2, r1, r3
   229a0:	add	r5, r5, r3
   229a4:	add	r6, r6, r3
   229a8:	add	r4, r4, #1
   229ac:	add	r8, r8, #4
   229b0:	b	22940 <GetDataSlab+0x6a24>
   229b4:	ldr	r3, [r9, r2, lsl #2]
   229b8:	mov	r5, ip
   229bc:	sub	r3, r3, #1
   229c0:	str	r3, [r4, r2, lsl #2]
   229c4:	ldr	r3, [lr], #4
   229c8:	mov	r1, lr
   229cc:	str	r3, [ip, #4]
   229d0:	cmp	fp, r1
   229d4:	bne	22a08 <GetDataSlab+0x6aec>
   229d8:	ldr	r3, [sp, #204]	; 0xcc
   229dc:	ldr	r1, [sp, #20]
   229e0:	add	ip, ip, #4
   229e4:	ldr	r3, [r3, r2, lsl #2]
   229e8:	mul	r3, r3, r1
   229ec:	ldr	r1, [sp, #196]	; 0xc4
   229f0:	str	r3, [sp, #20]
   229f4:	ldr	r3, [r5]
   229f8:	ldr	r1, [r1, r2, lsl #2]
   229fc:	add	r2, r2, #1
   22a00:	mla	r6, r1, r3, r6
   22a04:	b	22884 <GetDataSlab+0x6968>
   22a08:	ldr	r7, [r4, r2, lsl #2]
   22a0c:	mov	r0, r1
   22a10:	ldr	r3, [r1, #-4]!
   22a14:	mul	r3, r3, r7
   22a18:	ldr	r7, [ip, #4]
   22a1c:	str	r3, [r4, r2, lsl #2]
   22a20:	ldr	r3, [r0]
   22a24:	mul	r3, r3, r7
   22a28:	str	r3, [ip, #4]
   22a2c:	b	229d0 <GetDataSlab+0x6ab4>
   22a30:	ldrb	r3, [r1], #1
   22a34:	vmov	s15, r3
   22a38:	vcvt.f32.u32	s15, s15
   22a3c:	vstmia	r0!, {s15}
   22a40:	b	22aa0 <GetDataSlab+0x6b84>
   22a44:	cmp	r2, #0
   22a48:	beq	22b30 <GetDataSlab+0x6c14>
   22a4c:	ldr	r3, [r8]
   22a50:	mul	r3, r3, r2
   22a54:	b	22b28 <GetDataSlab+0x6c0c>
   22a58:	add	r3, sp, #152	; 0x98
   22a5c:	add	r3, r3, r4, lsl #2
   22a60:	ldr	r3, [r3, #-120]	; 0xffffff88
   22a64:	add	r6, r6, r3
   22a68:	add	r5, r5, r3
   22a6c:	ldr	r3, [sp, #16]
   22a70:	add	r9, r9, r3
   22a74:	ldr	r3, [sp, #20]
   22a78:	cmp	r9, r3
   22a7c:	bge	1c04c <GetDataSlab+0x130>
   22a80:	ldr	r3, [sp, #196]	; 0xc4
   22a84:	ldr	r2, [r3]
   22a88:	ldr	r3, [sp]
   22a8c:	cmp	r2, #0
   22a90:	addne	r5, r5, r2
   22a94:	addne	r6, r6, r2
   22a98:	add	r0, r3, r9, lsl #2
   22a9c:	mov	r1, r5
   22aa0:	ldr	ip, [sp, #16]
   22aa4:	sub	r3, r1, r5
   22aa8:	cmp	ip, r3
   22aac:	bgt	22a30 <GetDataSlab+0x6b14>
   22ab0:	ldr	r3, [sp, #24]
   22ab4:	ldr	r8, [sp, #4]
   22ab8:	sub	r3, r3, r2
   22abc:	ldr	r4, [sp, #12]
   22ac0:	add	r6, r6, r3
   22ac4:	add	r5, r5, r3
   22ac8:	ldr	r3, [sp, #208]	; 0xd0
   22acc:	cmp	r4, r3
   22ad0:	bge	22a6c <GetDataSlab+0x6b50>
   22ad4:	ldr	r3, [sl, r4, lsl #2]
   22ad8:	ldr	r2, [sp, #204]	; 0xcc
   22adc:	add	r3, r3, #1
   22ae0:	str	r3, [sl, r4, lsl #2]
   22ae4:	mov	r0, r3
   22ae8:	ldr	r1, [r2, r4, lsl #2]
   22aec:	bl	3fd18 <__aeabi_idivmod>
   22af0:	subs	r3, r1, #0
   22af4:	bne	22a58 <GetDataSlab+0x6b3c>
   22af8:	ldr	r7, [r8, #4]
   22afc:	str	r3, [sl, r4, lsl #2]
   22b00:	mov	r1, r7
   22b04:	mov	r0, r6
   22b08:	bl	3fd18 <__aeabi_idivmod>
   22b0c:	ldr	r2, [sp, #196]	; 0xc4
   22b10:	ldr	r2, [r2, r4, lsl #2]
   22b14:	subs	r3, r1, #0
   22b18:	beq	22a44 <GetDataSlab+0x6b28>
   22b1c:	ldr	r1, [r8]
   22b20:	sub	r3, r7, r3
   22b24:	mla	r3, r2, r1, r3
   22b28:	add	r5, r5, r3
   22b2c:	add	r6, r6, r3
   22b30:	add	r4, r4, #1
   22b34:	add	r8, r8, #4
   22b38:	b	22ac8 <GetDataSlab+0x6bac>
   22b3c:	ldr	r2, [sp, #24]
   22b40:	add	r3, r3, #1
   22b44:	ldrb	r2, [r1, r2]
   22b48:	vmov	s15, r2
   22b4c:	vcvt.f32.u32	s15, s15
   22b50:	vstmia	ip!, {s15}
   22b54:	b	2290c <GetDataSlab+0x69f0>
   22b58:	cmp	r2, #0
   22b5c:	beq	229a8 <GetDataSlab+0x6a8c>
   22b60:	ldr	r3, [r8]
   22b64:	mul	r3, r3, r2
   22b68:	b	229a0 <GetDataSlab+0x6a84>
   22b6c:	add	r3, sp, #152	; 0x98
   22b70:	add	r3, r3, r4, lsl #2
   22b74:	ldr	r3, [r3, #-120]	; 0xffffff88
   22b78:	add	r6, r6, r3
   22b7c:	add	r5, r5, r3
   22b80:	ldr	r3, [sp, #16]
   22b84:	add	r9, r9, r3
   22b88:	b	228dc <GetDataSlab+0x69c0>
   22b8c:	cmp	r5, #12
   22b90:	bne	22eec <GetDataSlab+0x6fd0>
   22b94:	ldr	r3, [r9]
   22b98:	ldr	ip, [sp, #4]
   22b9c:	str	r3, [sp, #16]
   22ba0:	sub	r3, r3, #1
   22ba4:	str	r3, [sp, #32]
   22ba8:	ldr	r3, [fp]
   22bac:	mov	lr, fp
   22bb0:	str	r3, [sp, #24]
   22bb4:	str	r3, [sp, #112]	; 0x70
   22bb8:	ldr	r3, [sp, #204]	; 0xcc
   22bbc:	mov	r8, #0
   22bc0:	mov	r2, #1
   22bc4:	ldr	r3, [r3]
   22bc8:	str	r3, [sp, #12]
   22bcc:	str	r3, [sp, #20]
   22bd0:	ldr	r3, [sp, #208]	; 0xd0
   22bd4:	cmp	r2, r3
   22bd8:	blt	22d14 <GetDataSlab+0x6df8>
   22bdc:	ldr	r3, [sp, #8]
   22be0:	add	r6, r3, r8, lsl #3
   22be4:	ldr	r3, [sp, #16]
   22be8:	cmp	r3, #1
   22bec:	moveq	fp, #0
   22bf0:	beq	22dd4 <GetDataSlab+0x6eb8>
   22bf4:	ldr	r3, [sp, #16]
   22bf8:	ldr	r2, [sp, #12]
   22bfc:	mov	fp, #0
   22c00:	mul	r3, r3, r2
   22c04:	ldr	r2, [sp, #24]
   22c08:	sub	r3, r2, r3
   22c0c:	str	r3, [sp, #24]
   22c10:	ldr	r3, [sp, #16]
   22c14:	ldr	r2, [sp, #16]
   22c18:	lsl	r3, r3, #3
   22c1c:	str	r3, [sp, #8]
   22c20:	ldr	r3, [sp, #12]
   22c24:	bic	r3, r3, r3, asr #31
   22c28:	mul	r2, r2, r3
   22c2c:	str	r2, [sp, #28]
   22c30:	ldr	r2, [sp, #8]
   22c34:	mul	r3, r3, r2
   22c38:	str	r3, [sp, #16]
   22c3c:	ldr	r3, [sp, #20]
   22c40:	cmp	fp, r3
   22c44:	bge	1c04c <GetDataSlab+0x130>
   22c48:	ldr	r3, [sp, #196]	; 0xc4
   22c4c:	mov	r4, #0
   22c50:	ldr	r7, [r3]
   22c54:	ldr	r3, [sp]
   22c58:	cmp	r7, #0
   22c5c:	addne	r6, r6, r7, lsl #3
   22c60:	addne	r8, r8, r7
   22c64:	add	r9, r3, fp, lsl #2
   22c68:	mov	r5, r6
   22c6c:	ldr	r3, [sp, #12]
   22c70:	cmp	r4, r3
   22c74:	blt	22e9c <GetDataSlab+0x6f80>
   22c78:	ldr	r3, [sp, #24]
   22c7c:	mov	r4, #1
   22c80:	sub	r2, r3, r7
   22c84:	ldr	r3, [sp, #28]
   22c88:	ldr	r7, [sp, #4]
   22c8c:	add	r3, r3, r8
   22c90:	add	r8, r3, r2
   22c94:	ldr	r3, [sp, #16]
   22c98:	add	r3, r3, r2, lsl #3
   22c9c:	add	r6, r6, r3
   22ca0:	ldr	r3, [sp, #208]	; 0xd0
   22ca4:	cmp	r4, r3
   22ca8:	bge	22ee0 <GetDataSlab+0x6fc4>
   22cac:	ldr	r3, [sl, r4, lsl #2]
   22cb0:	ldr	r2, [sp, #204]	; 0xcc
   22cb4:	add	r3, r3, #1
   22cb8:	str	r3, [sl, r4, lsl #2]
   22cbc:	mov	r0, r3
   22cc0:	ldr	r1, [r2, r4, lsl #2]
   22cc4:	bl	3fd18 <__aeabi_idivmod>
   22cc8:	subs	r3, r1, #0
   22ccc:	bne	22ecc <GetDataSlab+0x6fb0>
   22cd0:	ldr	r5, [r7, #4]
   22cd4:	str	r3, [sl, r4, lsl #2]
   22cd8:	mov	r1, r5
   22cdc:	mov	r0, r8
   22ce0:	bl	3fd18 <__aeabi_idivmod>
   22ce4:	ldr	r2, [sp, #196]	; 0xc4
   22ce8:	ldr	r2, [r2, r4, lsl #2]
   22cec:	subs	r3, r1, #0
   22cf0:	beq	22eb8 <GetDataSlab+0x6f9c>
   22cf4:	ldr	r1, [r7]
   22cf8:	sub	r3, r5, r3
   22cfc:	mla	r3, r2, r1, r3
   22d00:	add	r6, r6, r3, lsl #3
   22d04:	add	r8, r8, r3
   22d08:	add	r4, r4, #1
   22d0c:	add	r7, r7, #4
   22d10:	b	22ca0 <GetDataSlab+0x6d84>
   22d14:	ldr	r3, [r9, r2, lsl #2]
   22d18:	mov	r5, ip
   22d1c:	sub	r3, r3, #1
   22d20:	str	r3, [r4, r2, lsl #2]
   22d24:	ldr	r3, [lr], #4
   22d28:	mov	r1, lr
   22d2c:	str	r3, [ip, #4]
   22d30:	cmp	r1, fp
   22d34:	bne	22d68 <GetDataSlab+0x6e4c>
   22d38:	ldr	r3, [sp, #204]	; 0xcc
   22d3c:	ldr	r1, [sp, #20]
   22d40:	add	ip, ip, #4
   22d44:	ldr	r3, [r3, r2, lsl #2]
   22d48:	mul	r3, r3, r1
   22d4c:	ldr	r1, [sp, #196]	; 0xc4
   22d50:	str	r3, [sp, #20]
   22d54:	ldr	r3, [r5]
   22d58:	ldr	r1, [r1, r2, lsl #2]
   22d5c:	add	r2, r2, #1
   22d60:	mla	r8, r1, r3, r8
   22d64:	b	22bd0 <GetDataSlab+0x6cb4>
   22d68:	ldr	r6, [r4, r2, lsl #2]
   22d6c:	mov	r0, r1
   22d70:	ldr	r3, [r1, #-4]!
   22d74:	mul	r3, r3, r6
   22d78:	ldr	r6, [ip, #4]
   22d7c:	str	r3, [r4, r2, lsl #2]
   22d80:	ldr	r3, [r0]
   22d84:	mul	r3, r3, r6
   22d88:	str	r3, [ip, #4]
   22d8c:	b	22d30 <GetDataSlab+0x6e14>
   22d90:	ldrd	r0, [r9, #8]!
   22d94:	bl	402c4 <__aeabi_l2f>
   22d98:	add	r5, r5, #1
   22d9c:	str	r0, [r7], #4
   22da0:	b	22e04 <GetDataSlab+0x6ee8>
   22da4:	cmp	r2, #0
   22da8:	beq	22e90 <GetDataSlab+0x6f74>
   22dac:	ldr	r3, [r7]
   22db0:	mul	r3, r3, r2
   22db4:	b	22e88 <GetDataSlab+0x6f6c>
   22db8:	add	r3, sp, #152	; 0x98
   22dbc:	add	r3, r3, r4, lsl #2
   22dc0:	ldr	r3, [r3, #-120]	; 0xffffff88
   22dc4:	add	r8, r8, r3
   22dc8:	add	r6, r6, r3, lsl #3
   22dcc:	ldr	r3, [sp, #12]
   22dd0:	add	fp, fp, r3
   22dd4:	ldr	r3, [sp, #20]
   22dd8:	cmp	fp, r3
   22ddc:	bge	1c04c <GetDataSlab+0x130>
   22de0:	ldr	r3, [sp, #196]	; 0xc4
   22de4:	mov	r5, #0
   22de8:	ldr	r4, [r3]
   22dec:	ldr	r3, [sp]
   22df0:	cmp	r4, #0
   22df4:	addne	r6, r6, r4, lsl #3
   22df8:	addne	r8, r8, r4
   22dfc:	sub	r9, r6, #8
   22e00:	add	r7, r3, fp, lsl #2
   22e04:	ldr	r3, [sp, #12]
   22e08:	cmp	r5, r3
   22e0c:	blt	22d90 <GetDataSlab+0x6e74>
   22e10:	ldr	r3, [sp, #24]
   22e14:	ldr	r7, [sp, #4]
   22e18:	sub	r3, r3, r4
   22e1c:	ldr	r4, [sp, #16]
   22e20:	add	r8, r8, r3
   22e24:	add	r6, r6, r3, lsl #3
   22e28:	ldr	r3, [sp, #208]	; 0xd0
   22e2c:	cmp	r4, r3
   22e30:	bge	22dcc <GetDataSlab+0x6eb0>
   22e34:	ldr	r3, [sl, r4, lsl #2]
   22e38:	ldr	r2, [sp, #204]	; 0xcc
   22e3c:	add	r3, r3, #1
   22e40:	str	r3, [sl, r4, lsl #2]
   22e44:	mov	r0, r3
   22e48:	ldr	r1, [r2, r4, lsl #2]
   22e4c:	bl	3fd18 <__aeabi_idivmod>
   22e50:	subs	r3, r1, #0
   22e54:	bne	22db8 <GetDataSlab+0x6e9c>
   22e58:	ldr	r5, [r7, #4]
   22e5c:	str	r3, [sl, r4, lsl #2]
   22e60:	mov	r1, r5
   22e64:	mov	r0, r8
   22e68:	bl	3fd18 <__aeabi_idivmod>
   22e6c:	ldr	r2, [sp, #196]	; 0xc4
   22e70:	ldr	r2, [r2, r4, lsl #2]
   22e74:	subs	r3, r1, #0
   22e78:	beq	22da4 <GetDataSlab+0x6e88>
   22e7c:	ldr	r1, [r7]
   22e80:	sub	r3, r5, r3
   22e84:	mla	r3, r2, r1, r3
   22e88:	add	r6, r6, r3, lsl #3
   22e8c:	add	r8, r8, r3
   22e90:	add	r4, r4, #1
   22e94:	add	r7, r7, #4
   22e98:	b	22e28 <GetDataSlab+0x6f0c>
   22e9c:	ldrd	r0, [r5]
   22ea0:	bl	402c4 <__aeabi_l2f>
   22ea4:	ldr	r3, [sp, #8]
   22ea8:	add	r4, r4, #1
   22eac:	add	r5, r5, r3
   22eb0:	str	r0, [r9], #4
   22eb4:	b	22c6c <GetDataSlab+0x6d50>
   22eb8:	cmp	r2, #0
   22ebc:	beq	22d08 <GetDataSlab+0x6dec>
   22ec0:	ldr	r3, [r7]
   22ec4:	mul	r3, r3, r2
   22ec8:	b	22d00 <GetDataSlab+0x6de4>
   22ecc:	add	r3, sp, #152	; 0x98
   22ed0:	add	r3, r3, r4, lsl #2
   22ed4:	ldr	r3, [r3, #-120]	; 0xffffff88
   22ed8:	add	r8, r8, r3
   22edc:	add	r6, r6, r3, lsl #3
   22ee0:	ldr	r3, [sp, #12]
   22ee4:	add	fp, fp, r3
   22ee8:	b	22c3c <GetDataSlab+0x6d20>
   22eec:	cmp	r5, #13
   22ef0:	bne	337fc <GetDataSlab+0x178e0>
   22ef4:	ldr	r3, [r9]
   22ef8:	ldr	ip, [sp, #4]
   22efc:	str	r3, [sp, #16]
   22f00:	sub	r3, r3, #1
   22f04:	str	r3, [sp, #32]
   22f08:	ldr	r3, [fp]
   22f0c:	mov	lr, fp
   22f10:	str	r3, [sp, #24]
   22f14:	str	r3, [sp, #112]	; 0x70
   22f18:	ldr	r3, [sp, #204]	; 0xcc
   22f1c:	mov	r8, #0
   22f20:	mov	r2, #1
   22f24:	ldr	r3, [r3]
   22f28:	str	r3, [sp, #12]
   22f2c:	str	r3, [sp, #20]
   22f30:	ldr	r3, [sp, #208]	; 0xd0
   22f34:	cmp	r2, r3
   22f38:	blt	23074 <GetDataSlab+0x7158>
   22f3c:	ldr	r3, [sp, #8]
   22f40:	add	r6, r3, r8, lsl #3
   22f44:	ldr	r3, [sp, #16]
   22f48:	cmp	r3, #1
   22f4c:	moveq	fp, #0
   22f50:	beq	23134 <GetDataSlab+0x7218>
   22f54:	ldr	r3, [sp, #16]
   22f58:	ldr	r2, [sp, #12]
   22f5c:	mov	fp, #0
   22f60:	mul	r3, r3, r2
   22f64:	ldr	r2, [sp, #24]
   22f68:	sub	r3, r2, r3
   22f6c:	str	r3, [sp, #24]
   22f70:	ldr	r3, [sp, #16]
   22f74:	ldr	r2, [sp, #16]
   22f78:	lsl	r3, r3, #3
   22f7c:	str	r3, [sp, #8]
   22f80:	ldr	r3, [sp, #12]
   22f84:	bic	r3, r3, r3, asr #31
   22f88:	mul	r2, r3, r2
   22f8c:	str	r2, [sp, #28]
   22f90:	ldr	r2, [sp, #8]
   22f94:	mul	r3, r3, r2
   22f98:	str	r3, [sp, #16]
   22f9c:	ldr	r3, [sp, #20]
   22fa0:	cmp	fp, r3
   22fa4:	bge	1c04c <GetDataSlab+0x130>
   22fa8:	ldr	r3, [sp, #196]	; 0xc4
   22fac:	mov	r4, #0
   22fb0:	ldr	r7, [r3]
   22fb4:	ldr	r3, [sp]
   22fb8:	cmp	r7, #0
   22fbc:	addne	r6, r6, r7, lsl #3
   22fc0:	addne	r8, r8, r7
   22fc4:	add	r9, r3, fp, lsl #2
   22fc8:	mov	r5, r6
   22fcc:	ldr	r3, [sp, #12]
   22fd0:	cmp	r4, r3
   22fd4:	blt	231fc <GetDataSlab+0x72e0>
   22fd8:	ldr	r3, [sp, #24]
   22fdc:	mov	r4, #1
   22fe0:	sub	r2, r3, r7
   22fe4:	ldr	r3, [sp, #28]
   22fe8:	ldr	r7, [sp, #4]
   22fec:	add	r3, r8, r3
   22ff0:	add	r8, r3, r2
   22ff4:	ldr	r3, [sp, #16]
   22ff8:	add	r3, r3, r2, lsl #3
   22ffc:	add	r6, r6, r3
   23000:	ldr	r3, [sp, #208]	; 0xd0
   23004:	cmp	r4, r3
   23008:	bge	23240 <GetDataSlab+0x7324>
   2300c:	ldr	r3, [sl, r4, lsl #2]
   23010:	ldr	r2, [sp, #204]	; 0xcc
   23014:	add	r3, r3, #1
   23018:	str	r3, [sl, r4, lsl #2]
   2301c:	mov	r0, r3
   23020:	ldr	r1, [r2, r4, lsl #2]
   23024:	bl	3fd18 <__aeabi_idivmod>
   23028:	subs	r3, r1, #0
   2302c:	bne	2322c <GetDataSlab+0x7310>
   23030:	ldr	r5, [r7, #4]
   23034:	str	r3, [sl, r4, lsl #2]
   23038:	mov	r1, r5
   2303c:	mov	r0, r8
   23040:	bl	3fd18 <__aeabi_idivmod>
   23044:	ldr	r2, [sp, #196]	; 0xc4
   23048:	ldr	r2, [r2, r4, lsl #2]
   2304c:	subs	r3, r1, #0
   23050:	beq	23218 <GetDataSlab+0x72fc>
   23054:	ldr	r1, [r7]
   23058:	sub	r3, r5, r3
   2305c:	mla	r3, r2, r1, r3
   23060:	add	r6, r6, r3, lsl #3
   23064:	add	r8, r8, r3
   23068:	add	r4, r4, #1
   2306c:	add	r7, r7, #4
   23070:	b	23000 <GetDataSlab+0x70e4>
   23074:	ldr	r3, [r9, r2, lsl #2]
   23078:	mov	r5, ip
   2307c:	sub	r3, r3, #1
   23080:	str	r3, [r4, r2, lsl #2]
   23084:	ldr	r3, [lr], #4
   23088:	mov	r1, lr
   2308c:	str	r3, [ip, #4]
   23090:	cmp	r1, fp
   23094:	bne	230c8 <GetDataSlab+0x71ac>
   23098:	ldr	r3, [sp, #204]	; 0xcc
   2309c:	ldr	r1, [sp, #20]
   230a0:	add	ip, ip, #4
   230a4:	ldr	r3, [r3, r2, lsl #2]
   230a8:	mul	r3, r3, r1
   230ac:	ldr	r1, [sp, #196]	; 0xc4
   230b0:	str	r3, [sp, #20]
   230b4:	ldr	r3, [r5]
   230b8:	ldr	r1, [r1, r2, lsl #2]
   230bc:	add	r2, r2, #1
   230c0:	mla	r8, r1, r3, r8
   230c4:	b	22f30 <GetDataSlab+0x7014>
   230c8:	ldr	r6, [r4, r2, lsl #2]
   230cc:	mov	r0, r1
   230d0:	ldr	r3, [r1, #-4]!
   230d4:	mul	r3, r3, r6
   230d8:	ldr	r6, [ip, #4]
   230dc:	str	r3, [r4, r2, lsl #2]
   230e0:	ldr	r3, [r0]
   230e4:	mul	r3, r3, r6
   230e8:	str	r3, [ip, #4]
   230ec:	b	23090 <GetDataSlab+0x7174>
   230f0:	ldrd	r0, [r9, #8]!
   230f4:	bl	402b4 <__aeabi_ul2f>
   230f8:	add	r5, r5, #1
   230fc:	str	r0, [r7], #4
   23100:	b	23164 <GetDataSlab+0x7248>
   23104:	cmp	r2, #0
   23108:	beq	231f0 <GetDataSlab+0x72d4>
   2310c:	ldr	r3, [r7]
   23110:	mul	r3, r3, r2
   23114:	b	231e8 <GetDataSlab+0x72cc>
   23118:	add	r3, sp, #152	; 0x98
   2311c:	add	r3, r3, r4, lsl #2
   23120:	ldr	r3, [r3, #-120]	; 0xffffff88
   23124:	add	r8, r8, r3
   23128:	add	r6, r6, r3, lsl #3
   2312c:	ldr	r3, [sp, #12]
   23130:	add	fp, fp, r3
   23134:	ldr	r3, [sp, #20]
   23138:	cmp	fp, r3
   2313c:	bge	1c04c <GetDataSlab+0x130>
   23140:	ldr	r3, [sp, #196]	; 0xc4
   23144:	mov	r5, #0
   23148:	ldr	r4, [r3]
   2314c:	ldr	r3, [sp]
   23150:	cmp	r4, #0
   23154:	addne	r6, r6, r4, lsl #3
   23158:	addne	r8, r8, r4
   2315c:	sub	r9, r6, #8
   23160:	add	r7, r3, fp, lsl #2
   23164:	ldr	r3, [sp, #12]
   23168:	cmp	r5, r3
   2316c:	blt	230f0 <GetDataSlab+0x71d4>
   23170:	ldr	r3, [sp, #24]
   23174:	ldr	r7, [sp, #4]
   23178:	sub	r3, r3, r4
   2317c:	ldr	r4, [sp, #16]
   23180:	add	r8, r8, r3
   23184:	add	r6, r6, r3, lsl #3
   23188:	ldr	r3, [sp, #208]	; 0xd0
   2318c:	cmp	r4, r3
   23190:	bge	2312c <GetDataSlab+0x7210>
   23194:	ldr	r3, [sl, r4, lsl #2]
   23198:	ldr	r2, [sp, #204]	; 0xcc
   2319c:	add	r3, r3, #1
   231a0:	str	r3, [sl, r4, lsl #2]
   231a4:	mov	r0, r3
   231a8:	ldr	r1, [r2, r4, lsl #2]
   231ac:	bl	3fd18 <__aeabi_idivmod>
   231b0:	subs	r3, r1, #0
   231b4:	bne	23118 <GetDataSlab+0x71fc>
   231b8:	ldr	r5, [r7, #4]
   231bc:	str	r3, [sl, r4, lsl #2]
   231c0:	mov	r1, r5
   231c4:	mov	r0, r8
   231c8:	bl	3fd18 <__aeabi_idivmod>
   231cc:	ldr	r2, [sp, #196]	; 0xc4
   231d0:	ldr	r2, [r2, r4, lsl #2]
   231d4:	subs	r3, r1, #0
   231d8:	beq	23104 <GetDataSlab+0x71e8>
   231dc:	ldr	r1, [r7]
   231e0:	sub	r3, r5, r3
   231e4:	mla	r3, r2, r1, r3
   231e8:	add	r6, r6, r3, lsl #3
   231ec:	add	r8, r8, r3
   231f0:	add	r4, r4, #1
   231f4:	add	r7, r7, #4
   231f8:	b	23188 <GetDataSlab+0x726c>
   231fc:	ldrd	r0, [r5]
   23200:	bl	402b4 <__aeabi_ul2f>
   23204:	ldr	r3, [sp, #8]
   23208:	add	r4, r4, #1
   2320c:	add	r5, r5, r3
   23210:	str	r0, [r9], #4
   23214:	b	22fcc <GetDataSlab+0x70b0>
   23218:	cmp	r2, #0
   2321c:	beq	23068 <GetDataSlab+0x714c>
   23220:	ldr	r3, [r7]
   23224:	mul	r3, r3, r2
   23228:	b	23060 <GetDataSlab+0x7144>
   2322c:	add	r3, sp, #152	; 0x98
   23230:	add	r3, r3, r4, lsl #2
   23234:	ldr	r3, [r3, #-120]	; 0xffffff88
   23238:	add	r8, r8, r3
   2323c:	add	r6, r6, r3, lsl #3
   23240:	ldr	r3, [sp, #12]
   23244:	add	fp, fp, r3
   23248:	b	22f9c <GetDataSlab+0x7080>
   2324c:	sub	r3, r5, #1
   23250:	cmp	r3, #8
   23254:	addls	pc, pc, r3, lsl #2
   23258:	b	24cd0 <GetDataSlab+0x8db4>
   2325c:	b	24658 <GetDataSlab+0x873c>
   23260:	b	24994 <GetDataSlab+0x8a78>
   23264:	b	23fc8 <GetDataSlab+0x80ac>
   23268:	b	24310 <GetDataSlab+0x83f4>
   2326c:	b	23930 <GetDataSlab+0x7a14>
   23270:	b	23c7c <GetDataSlab+0x7d60>
   23274:	b	235d8 <GetDataSlab+0x76bc>
   23278:	b	24cd0 <GetDataSlab+0x8db4>
   2327c:	b	23280 <GetDataSlab+0x7364>
   23280:	ldr	r3, [r9]
   23284:	ldr	ip, [sp, #4]
   23288:	str	r3, [sp, #16]
   2328c:	sub	r3, r3, #1
   23290:	str	r3, [sp, #32]
   23294:	ldr	r3, [fp]
   23298:	mov	lr, fp
   2329c:	str	r3, [sp, #24]
   232a0:	str	r3, [sp, #112]	; 0x70
   232a4:	ldr	r3, [sp, #204]	; 0xcc
   232a8:	mov	r8, #0
   232ac:	mov	r2, #1
   232b0:	ldr	r3, [r3]
   232b4:	str	r3, [sp, #12]
   232b8:	str	r3, [sp, #20]
   232bc:	ldr	r3, [sp, #208]	; 0xd0
   232c0:	cmp	r2, r3
   232c4:	blt	23400 <GetDataSlab+0x74e4>
   232c8:	ldr	r3, [sp, #8]
   232cc:	add	r6, r3, r8, lsl #3
   232d0:	ldr	r3, [sp, #16]
   232d4:	cmp	r3, #1
   232d8:	moveq	fp, #0
   232dc:	beq	234c0 <GetDataSlab+0x75a4>
   232e0:	ldr	r3, [sp, #16]
   232e4:	ldr	r2, [sp, #12]
   232e8:	mov	fp, #0
   232ec:	mul	r3, r3, r2
   232f0:	ldr	r2, [sp, #24]
   232f4:	sub	r3, r2, r3
   232f8:	str	r3, [sp, #24]
   232fc:	ldr	r3, [sp, #16]
   23300:	ldr	r2, [sp, #16]
   23304:	lsl	r3, r3, #3
   23308:	str	r3, [sp, #8]
   2330c:	ldr	r3, [sp, #12]
   23310:	bic	r3, r3, r3, asr #31
   23314:	mul	r2, r2, r3
   23318:	str	r2, [sp, #28]
   2331c:	ldr	r2, [sp, #8]
   23320:	mul	r3, r3, r2
   23324:	str	r3, [sp, #16]
   23328:	ldr	r3, [sp, #20]
   2332c:	cmp	fp, r3
   23330:	bge	1c04c <GetDataSlab+0x130>
   23334:	ldr	r3, [sp, #196]	; 0xc4
   23338:	mov	r4, #0
   2333c:	ldr	r7, [r3]
   23340:	ldr	r3, [sp]
   23344:	cmp	r7, #0
   23348:	addne	r6, r6, r7, lsl #3
   2334c:	addne	r8, r8, r7
   23350:	add	r9, r3, fp, lsl #3
   23354:	mov	r5, r6
   23358:	ldr	r3, [sp, #12]
   2335c:	cmp	r4, r3
   23360:	blt	23588 <GetDataSlab+0x766c>
   23364:	ldr	r3, [sp, #24]
   23368:	mov	r4, #1
   2336c:	sub	r2, r3, r7
   23370:	ldr	r3, [sp, #28]
   23374:	ldr	r7, [sp, #4]
   23378:	add	r3, r8, r3
   2337c:	add	r8, r3, r2
   23380:	ldr	r3, [sp, #16]
   23384:	add	r3, r3, r2, lsl #3
   23388:	add	r6, r6, r3
   2338c:	ldr	r3, [sp, #208]	; 0xd0
   23390:	cmp	r4, r3
   23394:	bge	235cc <GetDataSlab+0x76b0>
   23398:	ldr	r3, [sl, r4, lsl #2]
   2339c:	ldr	r2, [sp, #204]	; 0xcc
   233a0:	add	r3, r3, #1
   233a4:	str	r3, [sl, r4, lsl #2]
   233a8:	mov	r0, r3
   233ac:	ldr	r1, [r2, r4, lsl #2]
   233b0:	bl	3fd18 <__aeabi_idivmod>
   233b4:	subs	r3, r1, #0
   233b8:	bne	235b8 <GetDataSlab+0x769c>
   233bc:	ldr	r5, [r7, #4]
   233c0:	str	r3, [sl, r4, lsl #2]
   233c4:	mov	r1, r5
   233c8:	mov	r0, r8
   233cc:	bl	3fd18 <__aeabi_idivmod>
   233d0:	ldr	r2, [sp, #196]	; 0xc4
   233d4:	ldr	r2, [r2, r4, lsl #2]
   233d8:	subs	r3, r1, #0
   233dc:	beq	235a4 <GetDataSlab+0x7688>
   233e0:	ldr	r1, [r7]
   233e4:	sub	r3, r5, r3
   233e8:	mla	r3, r2, r1, r3
   233ec:	add	r6, r6, r3, lsl #3
   233f0:	add	r8, r8, r3
   233f4:	add	r4, r4, #1
   233f8:	add	r7, r7, #4
   233fc:	b	2338c <GetDataSlab+0x7470>
   23400:	ldr	r3, [r9, r2, lsl #2]
   23404:	mov	r5, ip
   23408:	sub	r3, r3, #1
   2340c:	str	r3, [r4, r2, lsl #2]
   23410:	ldr	r3, [lr], #4
   23414:	mov	r1, lr
   23418:	str	r3, [ip, #4]
   2341c:	cmp	r1, fp
   23420:	bne	23454 <GetDataSlab+0x7538>
   23424:	ldr	r3, [sp, #204]	; 0xcc
   23428:	ldr	r1, [sp, #20]
   2342c:	add	ip, ip, #4
   23430:	ldr	r3, [r3, r2, lsl #2]
   23434:	mul	r3, r3, r1
   23438:	ldr	r1, [sp, #196]	; 0xc4
   2343c:	str	r3, [sp, #20]
   23440:	ldr	r3, [r5]
   23444:	ldr	r1, [r1, r2, lsl #2]
   23448:	add	r2, r2, #1
   2344c:	mla	r8, r1, r3, r8
   23450:	b	232bc <GetDataSlab+0x73a0>
   23454:	ldr	r6, [r4, r2, lsl #2]
   23458:	mov	r0, r1
   2345c:	ldr	r3, [r1, #-4]!
   23460:	mul	r3, r3, r6
   23464:	ldr	r6, [ip, #4]
   23468:	str	r3, [r4, r2, lsl #2]
   2346c:	ldr	r3, [r0]
   23470:	mul	r3, r3, r6
   23474:	str	r3, [ip, #4]
   23478:	b	2341c <GetDataSlab+0x7500>
   2347c:	ldrd	r0, [r9], #8
   23480:	bl	4037c <__aeabi_d2lz>
   23484:	add	r5, r5, #1
   23488:	strd	r0, [r7], #8
   2348c:	b	234f0 <GetDataSlab+0x75d4>
   23490:	cmp	r2, #0
   23494:	beq	2357c <GetDataSlab+0x7660>
   23498:	ldr	r3, [r7]
   2349c:	mul	r3, r3, r2
   234a0:	b	23574 <GetDataSlab+0x7658>
   234a4:	add	r3, sp, #152	; 0x98
   234a8:	add	r3, r3, r4, lsl #2
   234ac:	ldr	r3, [r3, #-120]	; 0xffffff88
   234b0:	add	r8, r8, r3
   234b4:	add	r6, r6, r3, lsl #3
   234b8:	ldr	r3, [sp, #12]
   234bc:	add	fp, fp, r3
   234c0:	ldr	r3, [sp, #20]
   234c4:	cmp	fp, r3
   234c8:	bge	1c04c <GetDataSlab+0x130>
   234cc:	ldr	r3, [sp, #196]	; 0xc4
   234d0:	mov	r5, #0
   234d4:	ldr	r4, [r3]
   234d8:	ldr	r3, [sp]
   234dc:	cmp	r4, #0
   234e0:	addne	r6, r6, r4, lsl #3
   234e4:	addne	r8, r8, r4
   234e8:	mov	r9, r6
   234ec:	add	r7, r3, fp, lsl #3
   234f0:	ldr	r3, [sp, #12]
   234f4:	cmp	r5, r3
   234f8:	blt	2347c <GetDataSlab+0x7560>
   234fc:	ldr	r3, [sp, #24]
   23500:	ldr	r7, [sp, #4]
   23504:	sub	r3, r3, r4
   23508:	ldr	r4, [sp, #16]
   2350c:	add	r8, r8, r3
   23510:	add	r6, r6, r3, lsl #3
   23514:	ldr	r3, [sp, #208]	; 0xd0
   23518:	cmp	r4, r3
   2351c:	bge	234b8 <GetDataSlab+0x759c>
   23520:	ldr	r3, [sl, r4, lsl #2]
   23524:	ldr	r2, [sp, #204]	; 0xcc
   23528:	add	r3, r3, #1
   2352c:	str	r3, [sl, r4, lsl #2]
   23530:	mov	r0, r3
   23534:	ldr	r1, [r2, r4, lsl #2]
   23538:	bl	3fd18 <__aeabi_idivmod>
   2353c:	subs	r3, r1, #0
   23540:	bne	234a4 <GetDataSlab+0x7588>
   23544:	ldr	r5, [r7, #4]
   23548:	str	r3, [sl, r4, lsl #2]
   2354c:	mov	r1, r5
   23550:	mov	r0, r8
   23554:	bl	3fd18 <__aeabi_idivmod>
   23558:	ldr	r2, [sp, #196]	; 0xc4
   2355c:	ldr	r2, [r2, r4, lsl #2]
   23560:	subs	r3, r1, #0
   23564:	beq	23490 <GetDataSlab+0x7574>
   23568:	ldr	r1, [r7]
   2356c:	sub	r3, r5, r3
   23570:	mla	r3, r2, r1, r3
   23574:	add	r6, r6, r3, lsl #3
   23578:	add	r8, r8, r3
   2357c:	add	r4, r4, #1
   23580:	add	r7, r7, #4
   23584:	b	23514 <GetDataSlab+0x75f8>
   23588:	ldrd	r0, [r5]
   2358c:	bl	4037c <__aeabi_d2lz>
   23590:	ldr	r3, [sp, #8]
   23594:	add	r4, r4, #1
   23598:	add	r5, r5, r3
   2359c:	strd	r0, [r9], #8
   235a0:	b	23358 <GetDataSlab+0x743c>
   235a4:	cmp	r2, #0
   235a8:	beq	233f4 <GetDataSlab+0x74d8>
   235ac:	ldr	r3, [r7]
   235b0:	mul	r3, r3, r2
   235b4:	b	233ec <GetDataSlab+0x74d0>
   235b8:	add	r3, sp, #152	; 0x98
   235bc:	add	r3, r3, r4, lsl #2
   235c0:	ldr	r3, [r3, #-120]	; 0xffffff88
   235c4:	add	r8, r8, r3
   235c8:	add	r6, r6, r3, lsl #3
   235cc:	ldr	r3, [sp, #12]
   235d0:	add	fp, fp, r3
   235d4:	b	23328 <GetDataSlab+0x740c>
   235d8:	ldr	r3, [r9]
   235dc:	ldr	ip, [sp, #4]
   235e0:	str	r3, [sp, #16]
   235e4:	sub	r3, r3, #1
   235e8:	str	r3, [sp, #32]
   235ec:	ldr	r3, [fp]
   235f0:	mov	lr, fp
   235f4:	str	r3, [sp, #24]
   235f8:	str	r3, [sp, #112]	; 0x70
   235fc:	ldr	r3, [sp, #204]	; 0xcc
   23600:	mov	r8, #0
   23604:	mov	r2, #1
   23608:	ldr	r3, [r3]
   2360c:	str	r3, [sp, #12]
   23610:	str	r3, [sp, #20]
   23614:	ldr	r3, [sp, #208]	; 0xd0
   23618:	cmp	r2, r3
   2361c:	blt	23758 <GetDataSlab+0x783c>
   23620:	ldr	r3, [sp, #8]
   23624:	add	r6, r3, r8, lsl #2
   23628:	ldr	r3, [sp, #16]
   2362c:	cmp	r3, #1
   23630:	moveq	fp, #0
   23634:	beq	23818 <GetDataSlab+0x78fc>
   23638:	ldr	r3, [sp, #16]
   2363c:	ldr	r2, [sp, #12]
   23640:	mov	fp, #0
   23644:	mul	r3, r3, r2
   23648:	ldr	r2, [sp, #24]
   2364c:	sub	r3, r2, r3
   23650:	str	r3, [sp, #24]
   23654:	ldr	r3, [sp, #16]
   23658:	ldr	r2, [sp, #16]
   2365c:	lsl	r3, r3, #2
   23660:	str	r3, [sp, #8]
   23664:	ldr	r3, [sp, #12]
   23668:	bic	r3, r3, r3, asr #31
   2366c:	mul	r2, r2, r3
   23670:	str	r2, [sp, #16]
   23674:	ldr	r2, [sp, #8]
   23678:	mul	r3, r3, r2
   2367c:	str	r3, [sp, #28]
   23680:	ldr	r3, [sp, #20]
   23684:	cmp	fp, r3
   23688:	bge	1c04c <GetDataSlab+0x130>
   2368c:	ldr	r3, [sp, #196]	; 0xc4
   23690:	mov	r4, #0
   23694:	ldr	r7, [r3]
   23698:	ldr	r3, [sp]
   2369c:	cmp	r7, #0
   236a0:	addne	r6, r6, r7, lsl #2
   236a4:	addne	r8, r8, r7
   236a8:	add	r9, r3, fp, lsl #3
   236ac:	mov	r5, r6
   236b0:	ldr	r3, [sp, #12]
   236b4:	cmp	r4, r3
   236b8:	blt	238e0 <GetDataSlab+0x79c4>
   236bc:	ldr	r3, [sp, #24]
   236c0:	mov	r4, #1
   236c4:	sub	r2, r3, r7
   236c8:	ldr	r3, [sp, #16]
   236cc:	ldr	r7, [sp, #4]
   236d0:	add	r3, r3, r8
   236d4:	add	r8, r3, r2
   236d8:	ldr	r3, [sp, #28]
   236dc:	add	r3, r3, r2, lsl #2
   236e0:	add	r6, r6, r3
   236e4:	ldr	r3, [sp, #208]	; 0xd0
   236e8:	cmp	r4, r3
   236ec:	bge	23924 <GetDataSlab+0x7a08>
   236f0:	ldr	r3, [sl, r4, lsl #2]
   236f4:	ldr	r2, [sp, #204]	; 0xcc
   236f8:	add	r3, r3, #1
   236fc:	str	r3, [sl, r4, lsl #2]
   23700:	mov	r0, r3
   23704:	ldr	r1, [r2, r4, lsl #2]
   23708:	bl	3fd18 <__aeabi_idivmod>
   2370c:	subs	r3, r1, #0
   23710:	bne	23910 <GetDataSlab+0x79f4>
   23714:	ldr	r5, [r7, #4]
   23718:	str	r3, [sl, r4, lsl #2]
   2371c:	mov	r1, r5
   23720:	mov	r0, r8
   23724:	bl	3fd18 <__aeabi_idivmod>
   23728:	ldr	r2, [sp, #196]	; 0xc4
   2372c:	ldr	r2, [r2, r4, lsl #2]
   23730:	subs	r3, r1, #0
   23734:	beq	238fc <GetDataSlab+0x79e0>
   23738:	ldr	r1, [r7]
   2373c:	sub	r3, r5, r3
   23740:	mla	r3, r2, r1, r3
   23744:	add	r6, r6, r3, lsl #2
   23748:	add	r8, r8, r3
   2374c:	add	r4, r4, #1
   23750:	add	r7, r7, #4
   23754:	b	236e4 <GetDataSlab+0x77c8>
   23758:	ldr	r3, [r9, r2, lsl #2]
   2375c:	mov	r5, ip
   23760:	sub	r3, r3, #1
   23764:	str	r3, [r4, r2, lsl #2]
   23768:	ldr	r3, [lr], #4
   2376c:	mov	r1, lr
   23770:	str	r3, [ip, #4]
   23774:	cmp	r1, fp
   23778:	bne	237ac <GetDataSlab+0x7890>
   2377c:	ldr	r3, [sp, #204]	; 0xcc
   23780:	ldr	r1, [sp, #20]
   23784:	add	ip, ip, #4
   23788:	ldr	r3, [r3, r2, lsl #2]
   2378c:	mul	r3, r3, r1
   23790:	ldr	r1, [sp, #196]	; 0xc4
   23794:	str	r3, [sp, #20]
   23798:	ldr	r3, [r5]
   2379c:	ldr	r1, [r1, r2, lsl #2]
   237a0:	add	r2, r2, #1
   237a4:	mla	r8, r1, r3, r8
   237a8:	b	23614 <GetDataSlab+0x76f8>
   237ac:	ldr	r6, [r4, r2, lsl #2]
   237b0:	mov	r0, r1
   237b4:	ldr	r3, [r1, #-4]!
   237b8:	mul	r3, r3, r6
   237bc:	ldr	r6, [ip, #4]
   237c0:	str	r3, [r4, r2, lsl #2]
   237c4:	ldr	r3, [r0]
   237c8:	mul	r3, r3, r6
   237cc:	str	r3, [ip, #4]
   237d0:	b	23774 <GetDataSlab+0x7858>
   237d4:	ldr	r0, [r9], #4
   237d8:	bl	40350 <__aeabi_f2lz>
   237dc:	add	r5, r5, #1
   237e0:	strd	r0, [r7], #8
   237e4:	b	23848 <GetDataSlab+0x792c>
   237e8:	cmp	r2, #0
   237ec:	beq	238d4 <GetDataSlab+0x79b8>
   237f0:	ldr	r3, [r7]
   237f4:	mul	r3, r3, r2
   237f8:	b	238cc <GetDataSlab+0x79b0>
   237fc:	add	r3, sp, #152	; 0x98
   23800:	add	r3, r3, r4, lsl #2
   23804:	ldr	r3, [r3, #-120]	; 0xffffff88
   23808:	add	r8, r8, r3
   2380c:	add	r6, r6, r3, lsl #2
   23810:	ldr	r3, [sp, #12]
   23814:	add	fp, fp, r3
   23818:	ldr	r3, [sp, #20]
   2381c:	cmp	fp, r3
   23820:	bge	1c04c <GetDataSlab+0x130>
   23824:	ldr	r3, [sp, #196]	; 0xc4
   23828:	mov	r5, #0
   2382c:	ldr	r4, [r3]
   23830:	ldr	r3, [sp]
   23834:	cmp	r4, #0
   23838:	addne	r6, r6, r4, lsl #2
   2383c:	addne	r8, r8, r4
   23840:	mov	r9, r6
   23844:	add	r7, r3, fp, lsl #3
   23848:	ldr	r3, [sp, #12]
   2384c:	cmp	r5, r3
   23850:	blt	237d4 <GetDataSlab+0x78b8>
   23854:	ldr	r3, [sp, #24]
   23858:	ldr	r7, [sp, #4]
   2385c:	sub	r3, r3, r4
   23860:	ldr	r4, [sp, #16]
   23864:	add	r8, r8, r3
   23868:	add	r6, r6, r3, lsl #2
   2386c:	ldr	r3, [sp, #208]	; 0xd0
   23870:	cmp	r4, r3
   23874:	bge	23810 <GetDataSlab+0x78f4>
   23878:	ldr	r3, [sl, r4, lsl #2]
   2387c:	ldr	r2, [sp, #204]	; 0xcc
   23880:	add	r3, r3, #1
   23884:	str	r3, [sl, r4, lsl #2]
   23888:	mov	r0, r3
   2388c:	ldr	r1, [r2, r4, lsl #2]
   23890:	bl	3fd18 <__aeabi_idivmod>
   23894:	subs	r3, r1, #0
   23898:	bne	237fc <GetDataSlab+0x78e0>
   2389c:	ldr	r5, [r7, #4]
   238a0:	str	r3, [sl, r4, lsl #2]
   238a4:	mov	r1, r5
   238a8:	mov	r0, r8
   238ac:	bl	3fd18 <__aeabi_idivmod>
   238b0:	ldr	r2, [sp, #196]	; 0xc4
   238b4:	ldr	r2, [r2, r4, lsl #2]
   238b8:	subs	r3, r1, #0
   238bc:	beq	237e8 <GetDataSlab+0x78cc>
   238c0:	ldr	r1, [r7]
   238c4:	sub	r3, r5, r3
   238c8:	mla	r3, r2, r1, r3
   238cc:	add	r6, r6, r3, lsl #2
   238d0:	add	r8, r8, r3
   238d4:	add	r4, r4, #1
   238d8:	add	r7, r7, #4
   238dc:	b	2386c <GetDataSlab+0x7950>
   238e0:	ldr	r0, [r5]
   238e4:	bl	40350 <__aeabi_f2lz>
   238e8:	ldr	r3, [sp, #8]
   238ec:	add	r4, r4, #1
   238f0:	add	r5, r5, r3
   238f4:	strd	r0, [r9], #8
   238f8:	b	236b0 <GetDataSlab+0x7794>
   238fc:	cmp	r2, #0
   23900:	beq	2374c <GetDataSlab+0x7830>
   23904:	ldr	r3, [r7]
   23908:	mul	r3, r3, r2
   2390c:	b	23744 <GetDataSlab+0x7828>
   23910:	add	r3, sp, #152	; 0x98
   23914:	add	r3, r3, r4, lsl #2
   23918:	ldr	r3, [r3, #-120]	; 0xffffff88
   2391c:	add	r8, r8, r3
   23920:	add	r6, r6, r3, lsl #2
   23924:	ldr	r3, [sp, #12]
   23928:	add	fp, fp, r3
   2392c:	b	23680 <GetDataSlab+0x7764>
   23930:	ldr	r3, [r9]
   23934:	ldr	ip, [sp, #4]
   23938:	str	r3, [sp, #16]
   2393c:	sub	r3, r3, #1
   23940:	str	r3, [sp, #32]
   23944:	ldr	r3, [fp]
   23948:	mov	lr, fp
   2394c:	str	r3, [sp, #24]
   23950:	str	r3, [sp, #112]	; 0x70
   23954:	ldr	r3, [sp, #204]	; 0xcc
   23958:	mov	r6, #0
   2395c:	mov	r2, #1
   23960:	ldr	r3, [r3]
   23964:	str	r3, [sp, #12]
   23968:	str	r3, [sp, #20]
   2396c:	ldr	r3, [sp, #208]	; 0xd0
   23970:	cmp	r2, r3
   23974:	blt	23aa8 <GetDataSlab+0x7b8c>
   23978:	ldr	r3, [sp, #8]
   2397c:	add	r5, r3, r6, lsl #2
   23980:	ldr	r3, [sp, #16]
   23984:	cmp	r3, #1
   23988:	moveq	r9, #0
   2398c:	beq	23b6c <GetDataSlab+0x7c50>
   23990:	ldr	r3, [sp, #16]
   23994:	ldr	r2, [sp, #12]
   23998:	mov	r9, #0
   2399c:	mul	r3, r3, r2
   239a0:	ldr	r2, [sp, #24]
   239a4:	sub	r3, r2, r3
   239a8:	str	r3, [sp, #8]
   239ac:	ldr	r3, [sp, #16]
   239b0:	ldr	r2, [sp, #16]
   239b4:	lsl	fp, r3, #2
   239b8:	ldr	r3, [sp, #12]
   239bc:	bic	r3, r3, r3, asr #31
   239c0:	mul	r2, r2, r3
   239c4:	mul	r3, r3, fp
   239c8:	str	r2, [sp, #24]
   239cc:	str	r3, [sp, #16]
   239d0:	ldr	r3, [sp, #20]
   239d4:	cmp	r9, r3
   239d8:	bge	1c04c <GetDataSlab+0x130>
   239dc:	ldr	r3, [sp, #196]	; 0xc4
   239e0:	mov	r1, #0
   239e4:	ldr	r0, [r3]
   239e8:	ldr	r3, [sp]
   239ec:	cmp	r0, #0
   239f0:	addne	r5, r5, r0, lsl #2
   239f4:	addne	r6, r6, r0
   239f8:	add	ip, r3, r9, lsl #3
   239fc:	mov	lr, r5
   23a00:	ldr	r3, [sp, #12]
   23a04:	cmp	r1, r3
   23a08:	blt	23c30 <GetDataSlab+0x7d14>
   23a0c:	ldr	r3, [sp, #8]
   23a10:	ldr	r8, [sp, #4]
   23a14:	sub	r2, r3, r0
   23a18:	ldr	r3, [sp, #24]
   23a1c:	mov	r4, #1
   23a20:	add	r3, r3, r6
   23a24:	add	r6, r3, r2
   23a28:	ldr	r3, [sp, #16]
   23a2c:	add	r3, r3, r2, lsl #2
   23a30:	add	r5, r5, r3
   23a34:	ldr	r3, [sp, #208]	; 0xd0
   23a38:	cmp	r4, r3
   23a3c:	bge	23c70 <GetDataSlab+0x7d54>
   23a40:	ldr	r3, [sl, r4, lsl #2]
   23a44:	ldr	r2, [sp, #204]	; 0xcc
   23a48:	add	r3, r3, #1
   23a4c:	str	r3, [sl, r4, lsl #2]
   23a50:	mov	r0, r3
   23a54:	ldr	r1, [r2, r4, lsl #2]
   23a58:	bl	3fd18 <__aeabi_idivmod>
   23a5c:	subs	r3, r1, #0
   23a60:	bne	23c5c <GetDataSlab+0x7d40>
   23a64:	ldr	r7, [r8, #4]
   23a68:	str	r3, [sl, r4, lsl #2]
   23a6c:	mov	r1, r7
   23a70:	mov	r0, r6
   23a74:	bl	3fd18 <__aeabi_idivmod>
   23a78:	ldr	r2, [sp, #196]	; 0xc4
   23a7c:	ldr	r2, [r2, r4, lsl #2]
   23a80:	subs	r3, r1, #0
   23a84:	beq	23c48 <GetDataSlab+0x7d2c>
   23a88:	ldr	r1, [r8]
   23a8c:	sub	r3, r7, r3
   23a90:	mla	r3, r2, r1, r3
   23a94:	add	r5, r5, r3, lsl #2
   23a98:	add	r6, r6, r3
   23a9c:	add	r4, r4, #1
   23aa0:	add	r8, r8, #4
   23aa4:	b	23a34 <GetDataSlab+0x7b18>
   23aa8:	ldr	r3, [r9, r2, lsl #2]
   23aac:	mov	r5, ip
   23ab0:	sub	r3, r3, #1
   23ab4:	str	r3, [r4, r2, lsl #2]
   23ab8:	ldr	r3, [lr], #4
   23abc:	mov	r1, lr
   23ac0:	str	r3, [ip, #4]
   23ac4:	cmp	r1, fp
   23ac8:	bne	23afc <GetDataSlab+0x7be0>
   23acc:	ldr	r3, [sp, #204]	; 0xcc
   23ad0:	ldr	r1, [sp, #20]
   23ad4:	add	ip, ip, #4
   23ad8:	ldr	r3, [r3, r2, lsl #2]
   23adc:	mul	r3, r3, r1
   23ae0:	ldr	r1, [sp, #196]	; 0xc4
   23ae4:	str	r3, [sp, #20]
   23ae8:	ldr	r3, [r5]
   23aec:	ldr	r1, [r1, r2, lsl #2]
   23af0:	add	r2, r2, #1
   23af4:	mla	r6, r1, r3, r6
   23af8:	b	2396c <GetDataSlab+0x7a50>
   23afc:	ldr	r7, [r4, r2, lsl #2]
   23b00:	mov	r0, r1
   23b04:	ldr	r3, [r1, #-4]!
   23b08:	mul	r3, r3, r7
   23b0c:	ldr	r7, [ip, #4]
   23b10:	str	r3, [r4, r2, lsl #2]
   23b14:	ldr	r3, [r0]
   23b18:	mul	r3, r3, r7
   23b1c:	str	r3, [ip, #4]
   23b20:	b	23ac4 <GetDataSlab+0x7ba8>
   23b24:	ldr	r3, [r5, r1, lsl #2]
   23b28:	add	r1, r1, #1
   23b2c:	mov	r2, r3
   23b30:	asr	r3, r3, #31
   23b34:	strd	r2, [ip], #8
   23b38:	b	23b98 <GetDataSlab+0x7c7c>
   23b3c:	cmp	r2, #0
   23b40:	beq	23c24 <GetDataSlab+0x7d08>
   23b44:	ldr	r3, [r8]
   23b48:	mul	r3, r3, r2
   23b4c:	b	23c1c <GetDataSlab+0x7d00>
   23b50:	add	r3, sp, #152	; 0x98
   23b54:	add	r3, r3, r4, lsl #2
   23b58:	ldr	r3, [r3, #-120]	; 0xffffff88
   23b5c:	add	r6, r6, r3
   23b60:	add	r5, r5, r3, lsl #2
   23b64:	ldr	r3, [sp, #12]
   23b68:	add	r9, r9, r3
   23b6c:	ldr	r3, [sp, #20]
   23b70:	cmp	r9, r3
   23b74:	bge	1c04c <GetDataSlab+0x130>
   23b78:	ldr	r3, [sp, #196]	; 0xc4
   23b7c:	mov	r1, #0
   23b80:	ldr	r0, [r3]
   23b84:	ldr	r3, [sp]
   23b88:	cmp	r0, #0
   23b8c:	addne	r5, r5, r0, lsl #2
   23b90:	addne	r6, r6, r0
   23b94:	add	ip, r3, r9, lsl #3
   23b98:	ldr	r3, [sp, #12]
   23b9c:	cmp	r1, r3
   23ba0:	blt	23b24 <GetDataSlab+0x7c08>
   23ba4:	ldr	r3, [sp, #24]
   23ba8:	ldr	r8, [sp, #4]
   23bac:	sub	r3, r3, r0
   23bb0:	ldr	r4, [sp, #16]
   23bb4:	add	r6, r6, r3
   23bb8:	add	r5, r5, r3, lsl #2
   23bbc:	ldr	r3, [sp, #208]	; 0xd0
   23bc0:	cmp	r4, r3
   23bc4:	bge	23b64 <GetDataSlab+0x7c48>
   23bc8:	ldr	r3, [sl, r4, lsl #2]
   23bcc:	ldr	r2, [sp, #204]	; 0xcc
   23bd0:	add	r3, r3, #1
   23bd4:	str	r3, [sl, r4, lsl #2]
   23bd8:	mov	r0, r3
   23bdc:	ldr	r1, [r2, r4, lsl #2]
   23be0:	bl	3fd18 <__aeabi_idivmod>
   23be4:	subs	r3, r1, #0
   23be8:	bne	23b50 <GetDataSlab+0x7c34>
   23bec:	ldr	r7, [r8, #4]
   23bf0:	str	r3, [sl, r4, lsl #2]
   23bf4:	mov	r1, r7
   23bf8:	mov	r0, r6
   23bfc:	bl	3fd18 <__aeabi_idivmod>
   23c00:	ldr	r2, [sp, #196]	; 0xc4
   23c04:	ldr	r2, [r2, r4, lsl #2]
   23c08:	subs	r3, r1, #0
   23c0c:	beq	23b3c <GetDataSlab+0x7c20>
   23c10:	ldr	r1, [r8]
   23c14:	sub	r3, r7, r3
   23c18:	mla	r3, r2, r1, r3
   23c1c:	add	r5, r5, r3, lsl #2
   23c20:	add	r6, r6, r3
   23c24:	add	r4, r4, #1
   23c28:	add	r8, r8, #4
   23c2c:	b	23bbc <GetDataSlab+0x7ca0>
   23c30:	ldr	r3, [lr], fp
   23c34:	add	r1, r1, #1
   23c38:	mov	r2, r3
   23c3c:	asr	r3, r3, #31
   23c40:	strd	r2, [ip], #8
   23c44:	b	23a00 <GetDataSlab+0x7ae4>
   23c48:	cmp	r2, #0
   23c4c:	beq	23a9c <GetDataSlab+0x7b80>
   23c50:	ldr	r3, [r8]
   23c54:	mul	r3, r3, r2
   23c58:	b	23a94 <GetDataSlab+0x7b78>
   23c5c:	add	r3, sp, #152	; 0x98
   23c60:	add	r3, r3, r4, lsl #2
   23c64:	ldr	r3, [r3, #-120]	; 0xffffff88
   23c68:	add	r6, r6, r3
   23c6c:	add	r5, r5, r3, lsl #2
   23c70:	ldr	r3, [sp, #12]
   23c74:	add	r9, r9, r3
   23c78:	b	239d0 <GetDataSlab+0x7ab4>
   23c7c:	ldr	r3, [r9]
   23c80:	ldr	ip, [sp, #4]
   23c84:	str	r3, [sp, #16]
   23c88:	sub	r3, r3, #1
   23c8c:	str	r3, [sp, #32]
   23c90:	ldr	r3, [fp]
   23c94:	mov	lr, fp
   23c98:	str	r3, [sp, #24]
   23c9c:	str	r3, [sp, #112]	; 0x70
   23ca0:	ldr	r3, [sp, #204]	; 0xcc
   23ca4:	mov	r6, #0
   23ca8:	mov	r2, #1
   23cac:	ldr	r3, [r3]
   23cb0:	str	r3, [sp, #12]
   23cb4:	str	r3, [sp, #20]
   23cb8:	ldr	r3, [sp, #208]	; 0xd0
   23cbc:	cmp	r2, r3
   23cc0:	blt	23df4 <GetDataSlab+0x7ed8>
   23cc4:	ldr	r3, [sp, #8]
   23cc8:	add	r5, r3, r6, lsl #2
   23ccc:	ldr	r3, [sp, #16]
   23cd0:	cmp	r3, #1
   23cd4:	moveq	r9, #0
   23cd8:	beq	23eb8 <GetDataSlab+0x7f9c>
   23cdc:	ldr	r3, [sp, #16]
   23ce0:	ldr	r2, [sp, #12]
   23ce4:	mov	r9, #0
   23ce8:	mul	r3, r3, r2
   23cec:	ldr	r2, [sp, #24]
   23cf0:	sub	r3, r2, r3
   23cf4:	str	r3, [sp, #8]
   23cf8:	ldr	r3, [sp, #16]
   23cfc:	ldr	r2, [sp, #16]
   23d00:	lsl	fp, r3, #2
   23d04:	ldr	r3, [sp, #12]
   23d08:	bic	r3, r3, r3, asr #31
   23d0c:	mul	r2, r3, r2
   23d10:	mul	r3, r3, fp
   23d14:	str	r2, [sp, #16]
   23d18:	str	r3, [sp, #24]
   23d1c:	ldr	r3, [sp, #20]
   23d20:	cmp	r9, r3
   23d24:	bge	1c04c <GetDataSlab+0x130>
   23d28:	ldr	r3, [sp, #196]	; 0xc4
   23d2c:	mov	r1, #0
   23d30:	ldr	r0, [r3]
   23d34:	ldr	r3, [sp]
   23d38:	cmp	r0, #0
   23d3c:	addne	r5, r5, r0, lsl #2
   23d40:	addne	r6, r6, r0
   23d44:	add	ip, r3, r9, lsl #3
   23d48:	mov	lr, r5
   23d4c:	ldr	r3, [sp, #12]
   23d50:	cmp	r1, r3
   23d54:	blt	23f7c <GetDataSlab+0x8060>
   23d58:	ldr	r3, [sp, #8]
   23d5c:	ldr	r8, [sp, #4]
   23d60:	sub	r2, r3, r0
   23d64:	ldr	r3, [sp, #16]
   23d68:	mov	r4, #1
   23d6c:	add	r3, r3, r6
   23d70:	add	r6, r3, r2
   23d74:	ldr	r3, [sp, #24]
   23d78:	add	r3, r3, r2, lsl #2
   23d7c:	add	r5, r5, r3
   23d80:	ldr	r3, [sp, #208]	; 0xd0
   23d84:	cmp	r4, r3
   23d88:	bge	23fbc <GetDataSlab+0x80a0>
   23d8c:	ldr	r3, [sl, r4, lsl #2]
   23d90:	ldr	r2, [sp, #204]	; 0xcc
   23d94:	add	r3, r3, #1
   23d98:	str	r3, [sl, r4, lsl #2]
   23d9c:	mov	r0, r3
   23da0:	ldr	r1, [r2, r4, lsl #2]
   23da4:	bl	3fd18 <__aeabi_idivmod>
   23da8:	subs	r3, r1, #0
   23dac:	bne	23fa8 <GetDataSlab+0x808c>
   23db0:	ldr	r7, [r8, #4]
   23db4:	str	r3, [sl, r4, lsl #2]
   23db8:	mov	r1, r7
   23dbc:	mov	r0, r6
   23dc0:	bl	3fd18 <__aeabi_idivmod>
   23dc4:	ldr	r2, [sp, #196]	; 0xc4
   23dc8:	ldr	r2, [r2, r4, lsl #2]
   23dcc:	subs	r3, r1, #0
   23dd0:	beq	23f94 <GetDataSlab+0x8078>
   23dd4:	ldr	r1, [r8]
   23dd8:	sub	r3, r7, r3
   23ddc:	mla	r3, r2, r1, r3
   23de0:	add	r5, r5, r3, lsl #2
   23de4:	add	r6, r6, r3
   23de8:	add	r4, r4, #1
   23dec:	add	r8, r8, #4
   23df0:	b	23d80 <GetDataSlab+0x7e64>
   23df4:	ldr	r3, [r9, r2, lsl #2]
   23df8:	mov	r5, ip
   23dfc:	sub	r3, r3, #1
   23e00:	str	r3, [r4, r2, lsl #2]
   23e04:	ldr	r3, [lr], #4
   23e08:	mov	r1, lr
   23e0c:	str	r3, [ip, #4]
   23e10:	cmp	r1, fp
   23e14:	bne	23e48 <GetDataSlab+0x7f2c>
   23e18:	ldr	r3, [sp, #204]	; 0xcc
   23e1c:	ldr	r1, [sp, #20]
   23e20:	add	ip, ip, #4
   23e24:	ldr	r3, [r3, r2, lsl #2]
   23e28:	mul	r3, r3, r1
   23e2c:	ldr	r1, [sp, #196]	; 0xc4
   23e30:	str	r3, [sp, #20]
   23e34:	ldr	r3, [r5]
   23e38:	ldr	r1, [r1, r2, lsl #2]
   23e3c:	add	r2, r2, #1
   23e40:	mla	r6, r1, r3, r6
   23e44:	b	23cb8 <GetDataSlab+0x7d9c>
   23e48:	ldr	r7, [r4, r2, lsl #2]
   23e4c:	mov	r0, r1
   23e50:	ldr	r3, [r1, #-4]!
   23e54:	mul	r3, r3, r7
   23e58:	ldr	r7, [ip, #4]
   23e5c:	str	r3, [r4, r2, lsl #2]
   23e60:	ldr	r3, [r0]
   23e64:	mul	r3, r3, r7
   23e68:	str	r3, [ip, #4]
   23e6c:	b	23e10 <GetDataSlab+0x7ef4>
   23e70:	ldr	r3, [r5, r1, lsl #2]
   23e74:	add	r1, r1, #1
   23e78:	mov	r2, r3
   23e7c:	mov	r3, #0
   23e80:	strd	r2, [ip], #8
   23e84:	b	23ee4 <GetDataSlab+0x7fc8>
   23e88:	cmp	r2, #0
   23e8c:	beq	23f70 <GetDataSlab+0x8054>
   23e90:	ldr	r3, [r8]
   23e94:	mul	r3, r3, r2
   23e98:	b	23f68 <GetDataSlab+0x804c>
   23e9c:	add	r3, sp, #152	; 0x98
   23ea0:	add	r3, r3, r4, lsl #2
   23ea4:	ldr	r3, [r3, #-120]	; 0xffffff88
   23ea8:	add	r6, r6, r3
   23eac:	add	r5, r5, r3, lsl #2
   23eb0:	ldr	r3, [sp, #12]
   23eb4:	add	r9, r9, r3
   23eb8:	ldr	r3, [sp, #20]
   23ebc:	cmp	r9, r3
   23ec0:	bge	1c04c <GetDataSlab+0x130>
   23ec4:	ldr	r3, [sp, #196]	; 0xc4
   23ec8:	mov	r1, #0
   23ecc:	ldr	r0, [r3]
   23ed0:	ldr	r3, [sp]
   23ed4:	cmp	r0, #0
   23ed8:	addne	r5, r5, r0, lsl #2
   23edc:	addne	r6, r6, r0
   23ee0:	add	ip, r3, r9, lsl #3
   23ee4:	ldr	r3, [sp, #12]
   23ee8:	cmp	r1, r3
   23eec:	blt	23e70 <GetDataSlab+0x7f54>
   23ef0:	ldr	r3, [sp, #24]
   23ef4:	ldr	r8, [sp, #4]
   23ef8:	sub	r3, r3, r0
   23efc:	ldr	r4, [sp, #16]
   23f00:	add	r6, r6, r3
   23f04:	add	r5, r5, r3, lsl #2
   23f08:	ldr	r3, [sp, #208]	; 0xd0
   23f0c:	cmp	r4, r3
   23f10:	bge	23eb0 <GetDataSlab+0x7f94>
   23f14:	ldr	r3, [sl, r4, lsl #2]
   23f18:	ldr	r2, [sp, #204]	; 0xcc
   23f1c:	add	r3, r3, #1
   23f20:	str	r3, [sl, r4, lsl #2]
   23f24:	mov	r0, r3
   23f28:	ldr	r1, [r2, r4, lsl #2]
   23f2c:	bl	3fd18 <__aeabi_idivmod>
   23f30:	subs	r3, r1, #0
   23f34:	bne	23e9c <GetDataSlab+0x7f80>
   23f38:	ldr	r7, [r8, #4]
   23f3c:	str	r3, [sl, r4, lsl #2]
   23f40:	mov	r1, r7
   23f44:	mov	r0, r6
   23f48:	bl	3fd18 <__aeabi_idivmod>
   23f4c:	ldr	r2, [sp, #196]	; 0xc4
   23f50:	ldr	r2, [r2, r4, lsl #2]
   23f54:	subs	r3, r1, #0
   23f58:	beq	23e88 <GetDataSlab+0x7f6c>
   23f5c:	ldr	r1, [r8]
   23f60:	sub	r3, r7, r3
   23f64:	mla	r3, r2, r1, r3
   23f68:	add	r5, r5, r3, lsl #2
   23f6c:	add	r6, r6, r3
   23f70:	add	r4, r4, #1
   23f74:	add	r8, r8, #4
   23f78:	b	23f08 <GetDataSlab+0x7fec>
   23f7c:	ldr	r3, [lr], fp
   23f80:	add	r1, r1, #1
   23f84:	mov	r2, r3
   23f88:	mov	r3, #0
   23f8c:	strd	r2, [ip], #8
   23f90:	b	23d4c <GetDataSlab+0x7e30>
   23f94:	cmp	r2, #0
   23f98:	beq	23de8 <GetDataSlab+0x7ecc>
   23f9c:	ldr	r3, [r8]
   23fa0:	mul	r3, r3, r2
   23fa4:	b	23de0 <GetDataSlab+0x7ec4>
   23fa8:	add	r3, sp, #152	; 0x98
   23fac:	add	r3, r3, r4, lsl #2
   23fb0:	ldr	r3, [r3, #-120]	; 0xffffff88
   23fb4:	add	r6, r6, r3
   23fb8:	add	r5, r5, r3, lsl #2
   23fbc:	ldr	r3, [sp, #12]
   23fc0:	add	r9, r9, r3
   23fc4:	b	23d1c <GetDataSlab+0x7e00>
   23fc8:	ldr	r3, [r9]
   23fcc:	ldr	ip, [sp, #4]
   23fd0:	str	r3, [sp, #16]
   23fd4:	sub	r3, r3, #1
   23fd8:	str	r3, [sp, #32]
   23fdc:	ldr	r3, [fp]
   23fe0:	mov	lr, fp
   23fe4:	str	r3, [sp, #24]
   23fe8:	str	r3, [sp, #112]	; 0x70
   23fec:	ldr	r3, [sp, #204]	; 0xcc
   23ff0:	mov	r6, #0
   23ff4:	mov	r2, #1
   23ff8:	ldr	r3, [r3]
   23ffc:	str	r3, [sp, #12]
   24000:	str	r3, [sp, #20]
   24004:	ldr	r3, [sp, #208]	; 0xd0
   24008:	cmp	r2, r3
   2400c:	blt	24140 <GetDataSlab+0x8224>
   24010:	ldr	r3, [sp, #8]
   24014:	add	r5, r3, r6, lsl #1
   24018:	ldr	r3, [sp, #16]
   2401c:	cmp	r3, #1
   24020:	moveq	r9, #0
   24024:	beq	24200 <GetDataSlab+0x82e4>
   24028:	ldr	r3, [sp, #16]
   2402c:	ldr	r2, [sp, #12]
   24030:	mov	r9, #0
   24034:	mul	r3, r3, r2
   24038:	ldr	r2, [sp, #24]
   2403c:	sub	r3, r2, r3
   24040:	str	r3, [sp, #8]
   24044:	ldr	r3, [sp, #16]
   24048:	ldr	r2, [sp, #16]
   2404c:	lsl	fp, r3, #1
   24050:	ldr	r3, [sp, #12]
   24054:	bic	r3, r3, r3, asr #31
   24058:	mul	r2, r2, r3
   2405c:	mul	r3, r3, fp
   24060:	str	r2, [sp, #16]
   24064:	str	r3, [sp, #24]
   24068:	ldr	r3, [sp, #20]
   2406c:	cmp	r9, r3
   24070:	bge	1c04c <GetDataSlab+0x130>
   24074:	ldr	r3, [sp, #196]	; 0xc4
   24078:	mov	r1, #0
   2407c:	ldr	r0, [r3]
   24080:	ldr	r3, [sp]
   24084:	cmp	r0, #0
   24088:	addne	r5, r5, r0, lsl #1
   2408c:	addne	r6, r6, r0
   24090:	add	lr, r3, r9, lsl #3
   24094:	mov	ip, r5
   24098:	ldr	r3, [sp, #12]
   2409c:	cmp	r1, r3
   240a0:	blt	242c8 <GetDataSlab+0x83ac>
   240a4:	ldr	r3, [sp, #8]
   240a8:	ldr	r8, [sp, #4]
   240ac:	sub	r2, r3, r0
   240b0:	ldr	r3, [sp, #16]
   240b4:	mov	r4, #1
   240b8:	add	r3, r3, r6
   240bc:	add	r6, r3, r2
   240c0:	ldr	r3, [sp, #24]
   240c4:	add	r3, r3, r2, lsl #1
   240c8:	add	r5, r5, r3
   240cc:	ldr	r3, [sp, #208]	; 0xd0
   240d0:	cmp	r4, r3
   240d4:	bge	24304 <GetDataSlab+0x83e8>
   240d8:	ldr	r3, [sl, r4, lsl #2]
   240dc:	ldr	r2, [sp, #204]	; 0xcc
   240e0:	add	r3, r3, #1
   240e4:	str	r3, [sl, r4, lsl #2]
   240e8:	mov	r0, r3
   240ec:	ldr	r1, [r2, r4, lsl #2]
   240f0:	bl	3fd18 <__aeabi_idivmod>
   240f4:	subs	r3, r1, #0
   240f8:	bne	242f0 <GetDataSlab+0x83d4>
   240fc:	ldr	r7, [r8, #4]
   24100:	str	r3, [sl, r4, lsl #2]
   24104:	mov	r1, r7
   24108:	mov	r0, r6
   2410c:	bl	3fd18 <__aeabi_idivmod>
   24110:	ldr	r2, [sp, #196]	; 0xc4
   24114:	ldr	r2, [r2, r4, lsl #2]
   24118:	subs	r3, r1, #0
   2411c:	beq	242dc <GetDataSlab+0x83c0>
   24120:	ldr	r1, [r8]
   24124:	sub	r3, r7, r3
   24128:	mla	r3, r2, r1, r3
   2412c:	add	r5, r5, r3, lsl #1
   24130:	add	r6, r6, r3
   24134:	add	r4, r4, #1
   24138:	add	r8, r8, #4
   2413c:	b	240cc <GetDataSlab+0x81b0>
   24140:	ldr	r3, [r9, r2, lsl #2]
   24144:	mov	r5, ip
   24148:	sub	r3, r3, #1
   2414c:	str	r3, [r4, r2, lsl #2]
   24150:	ldr	r3, [lr], #4
   24154:	mov	r1, lr
   24158:	str	r3, [ip, #4]
   2415c:	cmp	r1, fp
   24160:	bne	24194 <GetDataSlab+0x8278>
   24164:	ldr	r3, [sp, #204]	; 0xcc
   24168:	ldr	r1, [sp, #20]
   2416c:	add	ip, ip, #4
   24170:	ldr	r3, [r3, r2, lsl #2]
   24174:	mul	r3, r3, r1
   24178:	ldr	r1, [sp, #196]	; 0xc4
   2417c:	str	r3, [sp, #20]
   24180:	ldr	r3, [r5]
   24184:	ldr	r1, [r1, r2, lsl #2]
   24188:	add	r2, r2, #1
   2418c:	mla	r6, r1, r3, r6
   24190:	b	24004 <GetDataSlab+0x80e8>
   24194:	ldr	r7, [r4, r2, lsl #2]
   24198:	mov	r0, r1
   2419c:	ldr	r3, [r1, #-4]!
   241a0:	mul	r3, r3, r7
   241a4:	ldr	r7, [ip, #4]
   241a8:	str	r3, [r4, r2, lsl #2]
   241ac:	ldr	r3, [r0]
   241b0:	mul	r3, r3, r7
   241b4:	str	r3, [ip, #4]
   241b8:	b	2415c <GetDataSlab+0x8240>
   241bc:	ldrsh	r2, [lr, #2]!
   241c0:	add	r0, r0, #1
   241c4:	asr	r3, r2, #31
   241c8:	strd	r2, [ip], #8
   241cc:	b	24230 <GetDataSlab+0x8314>
   241d0:	cmp	r2, #0
   241d4:	beq	242bc <GetDataSlab+0x83a0>
   241d8:	ldr	r3, [r8]
   241dc:	mul	r3, r3, r2
   241e0:	b	242b4 <GetDataSlab+0x8398>
   241e4:	add	r3, sp, #152	; 0x98
   241e8:	add	r3, r3, r4, lsl #2
   241ec:	ldr	r3, [r3, #-120]	; 0xffffff88
   241f0:	add	r6, r6, r3
   241f4:	add	r5, r5, r3, lsl #1
   241f8:	ldr	r3, [sp, #12]
   241fc:	add	r9, r9, r3
   24200:	ldr	r3, [sp, #20]
   24204:	cmp	r9, r3
   24208:	bge	1c04c <GetDataSlab+0x130>
   2420c:	ldr	r3, [sp, #196]	; 0xc4
   24210:	mov	r0, #0
   24214:	ldr	r1, [r3]
   24218:	ldr	r3, [sp]
   2421c:	cmp	r1, #0
   24220:	addne	r5, r5, r1, lsl #1
   24224:	addne	r6, r6, r1
   24228:	sub	lr, r5, #2
   2422c:	add	ip, r3, r9, lsl #3
   24230:	ldr	r3, [sp, #12]
   24234:	cmp	r0, r3
   24238:	blt	241bc <GetDataSlab+0x82a0>
   2423c:	ldr	r3, [sp, #24]
   24240:	ldr	r8, [sp, #4]
   24244:	sub	r3, r3, r1
   24248:	ldr	r4, [sp, #16]
   2424c:	add	r6, r6, r3
   24250:	add	r5, r5, r3, lsl #1
   24254:	ldr	r3, [sp, #208]	; 0xd0
   24258:	cmp	r4, r3
   2425c:	bge	241f8 <GetDataSlab+0x82dc>
   24260:	ldr	r3, [sl, r4, lsl #2]
   24264:	ldr	r2, [sp, #204]	; 0xcc
   24268:	add	r3, r3, #1
   2426c:	str	r3, [sl, r4, lsl #2]
   24270:	mov	r0, r3
   24274:	ldr	r1, [r2, r4, lsl #2]
   24278:	bl	3fd18 <__aeabi_idivmod>
   2427c:	subs	r3, r1, #0
   24280:	bne	241e4 <GetDataSlab+0x82c8>
   24284:	ldr	r7, [r8, #4]
   24288:	str	r3, [sl, r4, lsl #2]
   2428c:	mov	r1, r7
   24290:	mov	r0, r6
   24294:	bl	3fd18 <__aeabi_idivmod>
   24298:	ldr	r2, [sp, #196]	; 0xc4
   2429c:	ldr	r2, [r2, r4, lsl #2]
   242a0:	subs	r3, r1, #0
   242a4:	beq	241d0 <GetDataSlab+0x82b4>
   242a8:	ldr	r1, [r8]
   242ac:	sub	r3, r7, r3
   242b0:	mla	r3, r2, r1, r3
   242b4:	add	r5, r5, r3, lsl #1
   242b8:	add	r6, r6, r3
   242bc:	add	r4, r4, #1
   242c0:	add	r8, r8, #4
   242c4:	b	24254 <GetDataSlab+0x8338>
   242c8:	ldrsh	r2, [ip], fp
   242cc:	add	r1, r1, #1
   242d0:	asr	r3, r2, #31
   242d4:	strd	r2, [lr], #8
   242d8:	b	24098 <GetDataSlab+0x817c>
   242dc:	cmp	r2, #0
   242e0:	beq	24134 <GetDataSlab+0x8218>
   242e4:	ldr	r3, [r8]
   242e8:	mul	r3, r3, r2
   242ec:	b	2412c <GetDataSlab+0x8210>
   242f0:	add	r3, sp, #152	; 0x98
   242f4:	add	r3, r3, r4, lsl #2
   242f8:	ldr	r3, [r3, #-120]	; 0xffffff88
   242fc:	add	r6, r6, r3
   24300:	add	r5, r5, r3, lsl #1
   24304:	ldr	r3, [sp, #12]
   24308:	add	r9, r9, r3
   2430c:	b	24068 <GetDataSlab+0x814c>
   24310:	ldr	r3, [r9]
   24314:	ldr	ip, [sp, #4]
   24318:	str	r3, [sp, #16]
   2431c:	sub	r3, r3, #1
   24320:	str	r3, [sp, #32]
   24324:	ldr	r3, [fp]
   24328:	mov	lr, fp
   2432c:	str	r3, [sp, #24]
   24330:	str	r3, [sp, #112]	; 0x70
   24334:	ldr	r3, [sp, #204]	; 0xcc
   24338:	mov	r6, #0
   2433c:	mov	r2, #1
   24340:	ldr	r3, [r3]
   24344:	str	r3, [sp, #12]
   24348:	str	r3, [sp, #20]
   2434c:	ldr	r3, [sp, #208]	; 0xd0
   24350:	cmp	r2, r3
   24354:	blt	24488 <GetDataSlab+0x856c>
   24358:	ldr	r3, [sp, #8]
   2435c:	add	r5, r3, r6, lsl #1
   24360:	ldr	r3, [sp, #16]
   24364:	cmp	r3, #1
   24368:	moveq	r9, #0
   2436c:	beq	24548 <GetDataSlab+0x862c>
   24370:	ldr	r3, [sp, #16]
   24374:	ldr	r2, [sp, #12]
   24378:	mov	r9, #0
   2437c:	mul	r3, r3, r2
   24380:	ldr	r2, [sp, #24]
   24384:	sub	r3, r2, r3
   24388:	str	r3, [sp, #8]
   2438c:	ldr	r3, [sp, #16]
   24390:	ldr	r2, [sp, #16]
   24394:	lsl	fp, r3, #1
   24398:	ldr	r3, [sp, #12]
   2439c:	bic	r3, r3, r3, asr #31
   243a0:	mul	r2, r2, r3
   243a4:	mul	r3, r3, fp
   243a8:	str	r2, [sp, #24]
   243ac:	str	r3, [sp, #16]
   243b0:	ldr	r3, [sp, #20]
   243b4:	cmp	r9, r3
   243b8:	bge	1c04c <GetDataSlab+0x130>
   243bc:	ldr	r3, [sp, #196]	; 0xc4
   243c0:	mov	r1, #0
   243c4:	ldr	r0, [r3]
   243c8:	ldr	r3, [sp]
   243cc:	cmp	r0, #0
   243d0:	addne	r5, r5, r0, lsl #1
   243d4:	addne	r6, r6, r0
   243d8:	add	lr, r3, r9, lsl #3
   243dc:	mov	ip, r5
   243e0:	ldr	r3, [sp, #12]
   243e4:	cmp	r1, r3
   243e8:	blt	24610 <GetDataSlab+0x86f4>
   243ec:	ldr	r3, [sp, #8]
   243f0:	ldr	r8, [sp, #4]
   243f4:	sub	r2, r3, r0
   243f8:	ldr	r3, [sp, #24]
   243fc:	mov	r4, #1
   24400:	add	r3, r3, r6
   24404:	add	r6, r3, r2
   24408:	ldr	r3, [sp, #16]
   2440c:	add	r3, r3, r2, lsl #1
   24410:	add	r5, r5, r3
   24414:	ldr	r3, [sp, #208]	; 0xd0
   24418:	cmp	r4, r3
   2441c:	bge	2464c <GetDataSlab+0x8730>
   24420:	ldr	r3, [sl, r4, lsl #2]
   24424:	ldr	r2, [sp, #204]	; 0xcc
   24428:	add	r3, r3, #1
   2442c:	str	r3, [sl, r4, lsl #2]
   24430:	mov	r0, r3
   24434:	ldr	r1, [r2, r4, lsl #2]
   24438:	bl	3fd18 <__aeabi_idivmod>
   2443c:	subs	r3, r1, #0
   24440:	bne	24638 <GetDataSlab+0x871c>
   24444:	ldr	r7, [r8, #4]
   24448:	str	r3, [sl, r4, lsl #2]
   2444c:	mov	r1, r7
   24450:	mov	r0, r6
   24454:	bl	3fd18 <__aeabi_idivmod>
   24458:	ldr	r2, [sp, #196]	; 0xc4
   2445c:	ldr	r2, [r2, r4, lsl #2]
   24460:	subs	r3, r1, #0
   24464:	beq	24624 <GetDataSlab+0x8708>
   24468:	ldr	r1, [r8]
   2446c:	sub	r3, r7, r3
   24470:	mla	r3, r2, r1, r3
   24474:	add	r5, r5, r3, lsl #1
   24478:	add	r6, r6, r3
   2447c:	add	r4, r4, #1
   24480:	add	r8, r8, #4
   24484:	b	24414 <GetDataSlab+0x84f8>
   24488:	ldr	r3, [r9, r2, lsl #2]
   2448c:	mov	r5, ip
   24490:	sub	r3, r3, #1
   24494:	str	r3, [r4, r2, lsl #2]
   24498:	ldr	r3, [lr], #4
   2449c:	mov	r1, lr
   244a0:	str	r3, [ip, #4]
   244a4:	cmp	r1, fp
   244a8:	bne	244dc <GetDataSlab+0x85c0>
   244ac:	ldr	r3, [sp, #204]	; 0xcc
   244b0:	ldr	r1, [sp, #20]
   244b4:	add	ip, ip, #4
   244b8:	ldr	r3, [r3, r2, lsl #2]
   244bc:	mul	r3, r3, r1
   244c0:	ldr	r1, [sp, #196]	; 0xc4
   244c4:	str	r3, [sp, #20]
   244c8:	ldr	r3, [r5]
   244cc:	ldr	r1, [r1, r2, lsl #2]
   244d0:	add	r2, r2, #1
   244d4:	mla	r6, r1, r3, r6
   244d8:	b	2434c <GetDataSlab+0x8430>
   244dc:	ldr	r7, [r4, r2, lsl #2]
   244e0:	mov	r0, r1
   244e4:	ldr	r3, [r1, #-4]!
   244e8:	mul	r3, r3, r7
   244ec:	ldr	r7, [ip, #4]
   244f0:	str	r3, [r4, r2, lsl #2]
   244f4:	ldr	r3, [r0]
   244f8:	mul	r3, r3, r7
   244fc:	str	r3, [ip, #4]
   24500:	b	244a4 <GetDataSlab+0x8588>
   24504:	ldrh	r2, [lr, #2]!
   24508:	mov	r3, #0
   2450c:	add	r0, r0, #1
   24510:	strd	r2, [ip], #8
   24514:	b	24578 <GetDataSlab+0x865c>
   24518:	cmp	r2, #0
   2451c:	beq	24604 <GetDataSlab+0x86e8>
   24520:	ldr	r3, [r8]
   24524:	mul	r3, r3, r2
   24528:	b	245fc <GetDataSlab+0x86e0>
   2452c:	add	r3, sp, #152	; 0x98
   24530:	add	r3, r3, r4, lsl #2
   24534:	ldr	r3, [r3, #-120]	; 0xffffff88
   24538:	add	r6, r6, r3
   2453c:	add	r5, r5, r3, lsl #1
   24540:	ldr	r3, [sp, #12]
   24544:	add	r9, r9, r3
   24548:	ldr	r3, [sp, #20]
   2454c:	cmp	r9, r3
   24550:	bge	1c04c <GetDataSlab+0x130>
   24554:	ldr	r3, [sp, #196]	; 0xc4
   24558:	mov	r0, #0
   2455c:	ldr	r1, [r3]
   24560:	ldr	r3, [sp]
   24564:	cmp	r1, #0
   24568:	addne	r5, r5, r1, lsl #1
   2456c:	addne	r6, r6, r1
   24570:	sub	lr, r5, #2
   24574:	add	ip, r3, r9, lsl #3
   24578:	ldr	r3, [sp, #12]
   2457c:	cmp	r0, r3
   24580:	blt	24504 <GetDataSlab+0x85e8>
   24584:	ldr	r3, [sp, #24]
   24588:	ldr	r8, [sp, #4]
   2458c:	sub	r3, r3, r1
   24590:	ldr	r4, [sp, #16]
   24594:	add	r6, r6, r3
   24598:	add	r5, r5, r3, lsl #1
   2459c:	ldr	r3, [sp, #208]	; 0xd0
   245a0:	cmp	r4, r3
   245a4:	bge	24540 <GetDataSlab+0x8624>
   245a8:	ldr	r3, [sl, r4, lsl #2]
   245ac:	ldr	r2, [sp, #204]	; 0xcc
   245b0:	add	r3, r3, #1
   245b4:	str	r3, [sl, r4, lsl #2]
   245b8:	mov	r0, r3
   245bc:	ldr	r1, [r2, r4, lsl #2]
   245c0:	bl	3fd18 <__aeabi_idivmod>
   245c4:	subs	r3, r1, #0
   245c8:	bne	2452c <GetDataSlab+0x8610>
   245cc:	ldr	r7, [r8, #4]
   245d0:	str	r3, [sl, r4, lsl #2]
   245d4:	mov	r1, r7
   245d8:	mov	r0, r6
   245dc:	bl	3fd18 <__aeabi_idivmod>
   245e0:	ldr	r2, [sp, #196]	; 0xc4
   245e4:	ldr	r2, [r2, r4, lsl #2]
   245e8:	subs	r3, r1, #0
   245ec:	beq	24518 <GetDataSlab+0x85fc>
   245f0:	ldr	r1, [r8]
   245f4:	sub	r3, r7, r3
   245f8:	mla	r3, r2, r1, r3
   245fc:	add	r5, r5, r3, lsl #1
   24600:	add	r6, r6, r3
   24604:	add	r4, r4, #1
   24608:	add	r8, r8, #4
   2460c:	b	2459c <GetDataSlab+0x8680>
   24610:	ldrh	r2, [ip], fp
   24614:	mov	r3, #0
   24618:	add	r1, r1, #1
   2461c:	strd	r2, [lr], #8
   24620:	b	243e0 <GetDataSlab+0x84c4>
   24624:	cmp	r2, #0
   24628:	beq	2447c <GetDataSlab+0x8560>
   2462c:	ldr	r3, [r8]
   24630:	mul	r3, r3, r2
   24634:	b	24474 <GetDataSlab+0x8558>
   24638:	add	r3, sp, #152	; 0x98
   2463c:	add	r3, r3, r4, lsl #2
   24640:	ldr	r3, [r3, #-120]	; 0xffffff88
   24644:	add	r6, r6, r3
   24648:	add	r5, r5, r3, lsl #1
   2464c:	ldr	r3, [sp, #12]
   24650:	add	r9, r9, r3
   24654:	b	243b0 <GetDataSlab+0x8494>
   24658:	ldr	r3, [r9]
   2465c:	ldr	ip, [sp, #4]
   24660:	str	r3, [sp, #12]
   24664:	sub	r3, r3, #1
   24668:	str	r3, [sp, #32]
   2466c:	ldr	r3, [fp]
   24670:	mov	lr, fp
   24674:	str	r3, [sp, #24]
   24678:	str	r3, [sp, #112]	; 0x70
   2467c:	ldr	r3, [sp, #204]	; 0xcc
   24680:	mov	r6, #0
   24684:	mov	r2, #1
   24688:	ldr	r3, [r3]
   2468c:	str	r3, [sp, #16]
   24690:	str	r3, [sp, #20]
   24694:	ldr	r3, [sp, #208]	; 0xd0
   24698:	cmp	r2, r3
   2469c:	blt	247c4 <GetDataSlab+0x88a8>
   246a0:	ldr	r3, [sp, #8]
   246a4:	add	r5, r3, r6
   246a8:	ldr	r3, [sp, #12]
   246ac:	cmp	r3, #1
   246b0:	moveq	r9, #0
   246b4:	beq	24880 <GetDataSlab+0x8964>
   246b8:	ldr	r2, [sp, #16]
   246bc:	ldr	r3, [sp, #12]
   246c0:	mov	r9, #0
   246c4:	mul	r3, r3, r2
   246c8:	ldr	r2, [sp, #24]
   246cc:	sub	r3, r2, r3
   246d0:	str	r3, [sp, #8]
   246d4:	ldr	r3, [sp, #16]
   246d8:	ldr	r2, [sp, #12]
   246dc:	bic	r3, r3, r3, asr #31
   246e0:	mul	fp, r2, r3
   246e4:	rsb	r3, r2, #0
   246e8:	str	r3, [sp, #24]
   246ec:	ldr	r3, [sp, #20]
   246f0:	cmp	r9, r3
   246f4:	bge	1c04c <GetDataSlab+0x130>
   246f8:	ldr	r3, [sp, #196]	; 0xc4
   246fc:	mov	r1, #0
   24700:	ldr	ip, [r3]
   24704:	ldr	r3, [sp]
   24708:	cmp	ip, #0
   2470c:	addne	r5, r5, ip
   24710:	addne	r6, r6, ip
   24714:	mov	r0, r5
   24718:	add	lr, r3, r9, lsl #3
   2471c:	ldr	r3, [sp, #12]
   24720:	add	r0, r0, r3
   24724:	ldr	r3, [sp, #16]
   24728:	cmp	r1, r3
   2472c:	blt	24948 <GetDataSlab+0x8a2c>
   24730:	ldr	r3, [sp, #8]
   24734:	ldr	r8, [sp, #4]
   24738:	sub	r2, r3, ip
   2473c:	add	r3, r6, fp
   24740:	add	r6, r3, r2
   24744:	add	r3, r2, fp
   24748:	add	r5, r5, r3
   2474c:	mov	r4, #1
   24750:	ldr	r3, [sp, #208]	; 0xd0
   24754:	cmp	r4, r3
   24758:	bge	24988 <GetDataSlab+0x8a6c>
   2475c:	ldr	r3, [sl, r4, lsl #2]
   24760:	ldr	r2, [sp, #204]	; 0xcc
   24764:	add	r3, r3, #1
   24768:	str	r3, [sl, r4, lsl #2]
   2476c:	mov	r0, r3
   24770:	ldr	r1, [r2, r4, lsl #2]
   24774:	bl	3fd18 <__aeabi_idivmod>
   24778:	subs	r3, r1, #0
   2477c:	bne	24974 <GetDataSlab+0x8a58>
   24780:	ldr	r7, [r8, #4]
   24784:	str	r3, [sl, r4, lsl #2]
   24788:	mov	r1, r7
   2478c:	mov	r0, r6
   24790:	bl	3fd18 <__aeabi_idivmod>
   24794:	ldr	r2, [sp, #196]	; 0xc4
   24798:	ldr	r2, [r2, r4, lsl #2]
   2479c:	subs	r3, r1, #0
   247a0:	beq	24960 <GetDataSlab+0x8a44>
   247a4:	ldr	r1, [r8]
   247a8:	sub	r3, r7, r3
   247ac:	mla	r3, r2, r1, r3
   247b0:	add	r5, r5, r3
   247b4:	add	r6, r6, r3
   247b8:	add	r4, r4, #1
   247bc:	add	r8, r8, #4
   247c0:	b	24750 <GetDataSlab+0x8834>
   247c4:	ldr	r3, [r9, r2, lsl #2]
   247c8:	mov	r5, ip
   247cc:	sub	r3, r3, #1
   247d0:	str	r3, [r4, r2, lsl #2]
   247d4:	ldr	r3, [lr], #4
   247d8:	mov	r1, lr
   247dc:	str	r3, [ip, #4]
   247e0:	cmp	r1, fp
   247e4:	bne	24818 <GetDataSlab+0x88fc>
   247e8:	ldr	r3, [sp, #204]	; 0xcc
   247ec:	ldr	r1, [sp, #20]
   247f0:	add	ip, ip, #4
   247f4:	ldr	r3, [r3, r2, lsl #2]
   247f8:	mul	r3, r3, r1
   247fc:	ldr	r1, [sp, #196]	; 0xc4
   24800:	str	r3, [sp, #20]
   24804:	ldr	r3, [r5]
   24808:	ldr	r1, [r1, r2, lsl #2]
   2480c:	add	r2, r2, #1
   24810:	mla	r6, r1, r3, r6
   24814:	b	24694 <GetDataSlab+0x8778>
   24818:	ldr	r7, [r4, r2, lsl #2]
   2481c:	mov	r0, r1
   24820:	ldr	r3, [r1, #-4]!
   24824:	mul	r3, r3, r7
   24828:	ldr	r7, [ip, #4]
   2482c:	str	r3, [r4, r2, lsl #2]
   24830:	ldr	r3, [r0]
   24834:	mul	r3, r3, r7
   24838:	str	r3, [ip, #4]
   2483c:	b	247e0 <GetDataSlab+0x88c4>
   24840:	ldrsb	r2, [r0], #1
   24844:	asr	r3, r2, #31
   24848:	strd	r2, [ip], #8
   2484c:	b	248ac <GetDataSlab+0x8990>
   24850:	cmp	r2, #0
   24854:	beq	2493c <GetDataSlab+0x8a20>
   24858:	ldr	r3, [r8]
   2485c:	mul	r3, r3, r2
   24860:	b	24934 <GetDataSlab+0x8a18>
   24864:	add	r3, sp, #152	; 0x98
   24868:	add	r3, r3, r4, lsl #2
   2486c:	ldr	r3, [r3, #-120]	; 0xffffff88
   24870:	add	r6, r6, r3
   24874:	add	r5, r5, r3
   24878:	ldr	r3, [sp, #16]
   2487c:	add	r9, r9, r3
   24880:	ldr	r3, [sp, #20]
   24884:	cmp	r9, r3
   24888:	bge	1c04c <GetDataSlab+0x130>
   2488c:	ldr	r3, [sp, #196]	; 0xc4
   24890:	ldr	r1, [r3]
   24894:	ldr	r3, [sp]
   24898:	cmp	r1, #0
   2489c:	addne	r5, r5, r1
   248a0:	addne	r6, r6, r1
   248a4:	add	ip, r3, r9, lsl #3
   248a8:	mov	r0, r5
   248ac:	ldr	r2, [sp, #16]
   248b0:	sub	r3, r0, r5
   248b4:	cmp	r2, r3
   248b8:	bgt	24840 <GetDataSlab+0x8924>
   248bc:	ldr	r3, [sp, #24]
   248c0:	ldr	r8, [sp, #4]
   248c4:	sub	r3, r3, r1
   248c8:	ldr	r4, [sp, #12]
   248cc:	add	r6, r6, r3
   248d0:	add	r5, r5, r3
   248d4:	ldr	r3, [sp, #208]	; 0xd0
   248d8:	cmp	r4, r3
   248dc:	bge	24878 <GetDataSlab+0x895c>
   248e0:	ldr	r3, [sl, r4, lsl #2]
   248e4:	ldr	r2, [sp, #204]	; 0xcc
   248e8:	add	r3, r3, #1
   248ec:	str	r3, [sl, r4, lsl #2]
   248f0:	mov	r0, r3
   248f4:	ldr	r1, [r2, r4, lsl #2]
   248f8:	bl	3fd18 <__aeabi_idivmod>
   248fc:	subs	r3, r1, #0
   24900:	bne	24864 <GetDataSlab+0x8948>
   24904:	ldr	r7, [r8, #4]
   24908:	str	r3, [sl, r4, lsl #2]
   2490c:	mov	r1, r7
   24910:	mov	r0, r6
   24914:	bl	3fd18 <__aeabi_idivmod>
   24918:	ldr	r2, [sp, #196]	; 0xc4
   2491c:	ldr	r2, [r2, r4, lsl #2]
   24920:	subs	r3, r1, #0
   24924:	beq	24850 <GetDataSlab+0x8934>
   24928:	ldr	r1, [r8]
   2492c:	sub	r3, r7, r3
   24930:	mla	r3, r2, r1, r3
   24934:	add	r5, r5, r3
   24938:	add	r6, r6, r3
   2493c:	add	r4, r4, #1
   24940:	add	r8, r8, #4
   24944:	b	248d4 <GetDataSlab+0x89b8>
   24948:	ldr	r3, [sp, #24]
   2494c:	add	r1, r1, #1
   24950:	ldrsb	r2, [r0, r3]
   24954:	asr	r3, r2, #31
   24958:	strd	r2, [lr], #8
   2495c:	b	2471c <GetDataSlab+0x8800>
   24960:	cmp	r2, #0
   24964:	beq	247b8 <GetDataSlab+0x889c>
   24968:	ldr	r3, [r8]
   2496c:	mul	r3, r3, r2
   24970:	b	247b0 <GetDataSlab+0x8894>
   24974:	add	r3, sp, #152	; 0x98
   24978:	add	r3, r3, r4, lsl #2
   2497c:	ldr	r3, [r3, #-120]	; 0xffffff88
   24980:	add	r6, r6, r3
   24984:	add	r5, r5, r3
   24988:	ldr	r3, [sp, #16]
   2498c:	add	r9, r9, r3
   24990:	b	246ec <GetDataSlab+0x87d0>
   24994:	ldr	r3, [r9]
   24998:	ldr	ip, [sp, #4]
   2499c:	str	r3, [sp, #12]
   249a0:	sub	r3, r3, #1
   249a4:	str	r3, [sp, #32]
   249a8:	ldr	r3, [fp]
   249ac:	mov	lr, fp
   249b0:	str	r3, [sp, #24]
   249b4:	str	r3, [sp, #112]	; 0x70
   249b8:	ldr	r3, [sp, #204]	; 0xcc
   249bc:	mov	r6, #0
   249c0:	mov	r2, #1
   249c4:	ldr	r3, [r3]
   249c8:	str	r3, [sp, #16]
   249cc:	str	r3, [sp, #20]
   249d0:	ldr	r3, [sp, #208]	; 0xd0
   249d4:	cmp	r2, r3
   249d8:	blt	24b00 <GetDataSlab+0x8be4>
   249dc:	ldr	r3, [sp, #8]
   249e0:	add	r5, r3, r6
   249e4:	ldr	r3, [sp, #12]
   249e8:	cmp	r3, #1
   249ec:	moveq	r9, #0
   249f0:	beq	24bbc <GetDataSlab+0x8ca0>
   249f4:	ldr	r2, [sp, #16]
   249f8:	ldr	r3, [sp, #12]
   249fc:	mov	r9, #0
   24a00:	mul	r3, r3, r2
   24a04:	ldr	r2, [sp, #24]
   24a08:	sub	r3, r2, r3
   24a0c:	str	r3, [sp, #8]
   24a10:	ldr	r3, [sp, #16]
   24a14:	ldr	r2, [sp, #12]
   24a18:	bic	r3, r3, r3, asr #31
   24a1c:	mul	fp, r2, r3
   24a20:	rsb	r3, r2, #0
   24a24:	str	r3, [sp, #24]
   24a28:	ldr	r3, [sp, #20]
   24a2c:	cmp	r9, r3
   24a30:	bge	1c04c <GetDataSlab+0x130>
   24a34:	ldr	r3, [sp, #196]	; 0xc4
   24a38:	mov	r1, #0
   24a3c:	ldr	ip, [r3]
   24a40:	ldr	r3, [sp]
   24a44:	cmp	ip, #0
   24a48:	addne	r5, r5, ip
   24a4c:	addne	r6, r6, ip
   24a50:	mov	r0, r5
   24a54:	add	lr, r3, r9, lsl #3
   24a58:	ldr	r3, [sp, #12]
   24a5c:	add	r0, r0, r3
   24a60:	ldr	r3, [sp, #16]
   24a64:	cmp	r1, r3
   24a68:	blt	24c84 <GetDataSlab+0x8d68>
   24a6c:	ldr	r3, [sp, #8]
   24a70:	ldr	r8, [sp, #4]
   24a74:	sub	r2, r3, ip
   24a78:	add	r3, fp, r6
   24a7c:	add	r6, r3, r2
   24a80:	add	r3, r2, fp
   24a84:	add	r5, r5, r3
   24a88:	mov	r4, #1
   24a8c:	ldr	r3, [sp, #208]	; 0xd0
   24a90:	cmp	r4, r3
   24a94:	bge	24cc4 <GetDataSlab+0x8da8>
   24a98:	ldr	r3, [sl, r4, lsl #2]
   24a9c:	ldr	r2, [sp, #204]	; 0xcc
   24aa0:	add	r3, r3, #1
   24aa4:	str	r3, [sl, r4, lsl #2]
   24aa8:	mov	r0, r3
   24aac:	ldr	r1, [r2, r4, lsl #2]
   24ab0:	bl	3fd18 <__aeabi_idivmod>
   24ab4:	subs	r3, r1, #0
   24ab8:	bne	24cb0 <GetDataSlab+0x8d94>
   24abc:	ldr	r7, [r8, #4]
   24ac0:	str	r3, [sl, r4, lsl #2]
   24ac4:	mov	r1, r7
   24ac8:	mov	r0, r6
   24acc:	bl	3fd18 <__aeabi_idivmod>
   24ad0:	ldr	r2, [sp, #196]	; 0xc4
   24ad4:	ldr	r2, [r2, r4, lsl #2]
   24ad8:	subs	r3, r1, #0
   24adc:	beq	24c9c <GetDataSlab+0x8d80>
   24ae0:	ldr	r1, [r8]
   24ae4:	sub	r3, r7, r3
   24ae8:	mla	r3, r2, r1, r3
   24aec:	add	r5, r5, r3
   24af0:	add	r6, r6, r3
   24af4:	add	r4, r4, #1
   24af8:	add	r8, r8, #4
   24afc:	b	24a8c <GetDataSlab+0x8b70>
   24b00:	ldr	r3, [r9, r2, lsl #2]
   24b04:	mov	r5, ip
   24b08:	sub	r3, r3, #1
   24b0c:	str	r3, [r4, r2, lsl #2]
   24b10:	ldr	r3, [lr], #4
   24b14:	mov	r1, lr
   24b18:	str	r3, [ip, #4]
   24b1c:	cmp	r1, fp
   24b20:	bne	24b54 <GetDataSlab+0x8c38>
   24b24:	ldr	r3, [sp, #204]	; 0xcc
   24b28:	ldr	r1, [sp, #20]
   24b2c:	add	ip, ip, #4
   24b30:	ldr	r3, [r3, r2, lsl #2]
   24b34:	mul	r3, r3, r1
   24b38:	ldr	r1, [sp, #196]	; 0xc4
   24b3c:	str	r3, [sp, #20]
   24b40:	ldr	r3, [r5]
   24b44:	ldr	r1, [r1, r2, lsl #2]
   24b48:	add	r2, r2, #1
   24b4c:	mla	r6, r1, r3, r6
   24b50:	b	249d0 <GetDataSlab+0x8ab4>
   24b54:	ldr	r7, [r4, r2, lsl #2]
   24b58:	mov	r0, r1
   24b5c:	ldr	r3, [r1, #-4]!
   24b60:	mul	r3, r3, r7
   24b64:	ldr	r7, [ip, #4]
   24b68:	str	r3, [r4, r2, lsl #2]
   24b6c:	ldr	r3, [r0]
   24b70:	mul	r3, r3, r7
   24b74:	str	r3, [ip, #4]
   24b78:	b	24b1c <GetDataSlab+0x8c00>
   24b7c:	ldrb	r2, [r0], #1
   24b80:	mov	r3, #0
   24b84:	strd	r2, [ip], #8
   24b88:	b	24be8 <GetDataSlab+0x8ccc>
   24b8c:	cmp	r2, #0
   24b90:	beq	24c78 <GetDataSlab+0x8d5c>
   24b94:	ldr	r3, [r8]
   24b98:	mul	r3, r3, r2
   24b9c:	b	24c70 <GetDataSlab+0x8d54>
   24ba0:	add	r3, sp, #152	; 0x98
   24ba4:	add	r3, r3, r4, lsl #2
   24ba8:	ldr	r3, [r3, #-120]	; 0xffffff88
   24bac:	add	r6, r6, r3
   24bb0:	add	r5, r5, r3
   24bb4:	ldr	r3, [sp, #16]
   24bb8:	add	r9, r9, r3
   24bbc:	ldr	r3, [sp, #20]
   24bc0:	cmp	r9, r3
   24bc4:	bge	1c04c <GetDataSlab+0x130>
   24bc8:	ldr	r3, [sp, #196]	; 0xc4
   24bcc:	ldr	r1, [r3]
   24bd0:	ldr	r3, [sp]
   24bd4:	cmp	r1, #0
   24bd8:	addne	r5, r5, r1
   24bdc:	addne	r6, r6, r1
   24be0:	add	ip, r3, r9, lsl #3
   24be4:	mov	r0, r5
   24be8:	ldr	r2, [sp, #16]
   24bec:	sub	r3, r0, r5
   24bf0:	cmp	r2, r3
   24bf4:	bgt	24b7c <GetDataSlab+0x8c60>
   24bf8:	ldr	r3, [sp, #24]
   24bfc:	ldr	r8, [sp, #4]
   24c00:	sub	r3, r3, r1
   24c04:	ldr	r4, [sp, #12]
   24c08:	add	r6, r6, r3
   24c0c:	add	r5, r5, r3
   24c10:	ldr	r3, [sp, #208]	; 0xd0
   24c14:	cmp	r4, r3
   24c18:	bge	24bb4 <GetDataSlab+0x8c98>
   24c1c:	ldr	r3, [sl, r4, lsl #2]
   24c20:	ldr	r2, [sp, #204]	; 0xcc
   24c24:	add	r3, r3, #1
   24c28:	str	r3, [sl, r4, lsl #2]
   24c2c:	mov	r0, r3
   24c30:	ldr	r1, [r2, r4, lsl #2]
   24c34:	bl	3fd18 <__aeabi_idivmod>
   24c38:	subs	r3, r1, #0
   24c3c:	bne	24ba0 <GetDataSlab+0x8c84>
   24c40:	ldr	r7, [r8, #4]
   24c44:	str	r3, [sl, r4, lsl #2]
   24c48:	mov	r1, r7
   24c4c:	mov	r0, r6
   24c50:	bl	3fd18 <__aeabi_idivmod>
   24c54:	ldr	r2, [sp, #196]	; 0xc4
   24c58:	ldr	r2, [r2, r4, lsl #2]
   24c5c:	subs	r3, r1, #0
   24c60:	beq	24b8c <GetDataSlab+0x8c70>
   24c64:	ldr	r1, [r8]
   24c68:	sub	r3, r7, r3
   24c6c:	mla	r3, r2, r1, r3
   24c70:	add	r5, r5, r3
   24c74:	add	r6, r6, r3
   24c78:	add	r4, r4, #1
   24c7c:	add	r8, r8, #4
   24c80:	b	24c10 <GetDataSlab+0x8cf4>
   24c84:	ldr	r3, [sp, #24]
   24c88:	add	r1, r1, #1
   24c8c:	ldrb	r2, [r0, r3]
   24c90:	mov	r3, #0
   24c94:	strd	r2, [lr], #8
   24c98:	b	24a58 <GetDataSlab+0x8b3c>
   24c9c:	cmp	r2, #0
   24ca0:	beq	24af4 <GetDataSlab+0x8bd8>
   24ca4:	ldr	r3, [r8]
   24ca8:	mul	r3, r3, r2
   24cac:	b	24aec <GetDataSlab+0x8bd0>
   24cb0:	add	r3, sp, #152	; 0x98
   24cb4:	add	r3, r3, r4, lsl #2
   24cb8:	ldr	r3, [r3, #-120]	; 0xffffff88
   24cbc:	add	r6, r6, r3
   24cc0:	add	r5, r5, r3
   24cc4:	ldr	r3, [sp, #16]
   24cc8:	add	r9, r9, r3
   24ccc:	b	24a28 <GetDataSlab+0x8b0c>
   24cd0:	cmp	r5, #12
   24cd4:	bne	2502c <GetDataSlab+0x9110>
   24cd8:	ldr	r3, [r9]
   24cdc:	ldr	ip, [sp, #4]
   24ce0:	str	r3, [sp, #16]
   24ce4:	sub	r3, r3, #1
   24ce8:	str	r3, [sp, #32]
   24cec:	ldr	r3, [fp]
   24cf0:	mov	lr, fp
   24cf4:	str	r3, [sp, #24]
   24cf8:	str	r3, [sp, #112]	; 0x70
   24cfc:	ldr	r3, [sp, #204]	; 0xcc
   24d00:	mov	r6, #0
   24d04:	mov	r2, #1
   24d08:	ldr	r3, [r3]
   24d0c:	str	r3, [sp, #12]
   24d10:	str	r3, [sp, #20]
   24d14:	ldr	r3, [sp, #208]	; 0xd0
   24d18:	cmp	r2, r3
   24d1c:	blt	24e5c <GetDataSlab+0x8f40>
   24d20:	ldr	r3, [sp, #8]
   24d24:	add	r5, r3, r6, lsl #3
   24d28:	ldr	r3, [sp, #16]
   24d2c:	cmp	r3, #1
   24d30:	moveq	r9, #0
   24d34:	beq	24f18 <GetDataSlab+0x8ffc>
   24d38:	ldr	r3, [sp, #16]
   24d3c:	ldr	r2, [sp, #12]
   24d40:	mul	r3, r3, r2
   24d44:	ldr	r2, [sp, #24]
   24d48:	sub	r3, r2, r3
   24d4c:	str	r3, [sp, #24]
   24d50:	ldr	r3, [sp, #16]
   24d54:	ldr	r2, [sp, #16]
   24d58:	lsl	fp, r3, #3
   24d5c:	ldr	r3, [sp, #12]
   24d60:	bic	r3, r3, r3, asr #31
   24d64:	mul	r2, r3, r2
   24d68:	mul	r3, r3, fp
   24d6c:	str	r2, [sp, #16]
   24d70:	str	r3, [sp, #28]
   24d74:	mov	r3, #0
   24d78:	str	r3, [sp, #8]
   24d7c:	ldr	r2, [sp, #8]
   24d80:	ldr	r3, [sp, #20]
   24d84:	cmp	r2, r3
   24d88:	bge	1c04c <GetDataSlab+0x130>
   24d8c:	ldr	r3, [sp, #196]	; 0xc4
   24d90:	ldr	r2, [sp, #8]
   24d94:	ldr	r1, [r3]
   24d98:	ldr	r3, [sp]
   24d9c:	cmp	r1, #0
   24da0:	addne	r5, r5, r1, lsl #3
   24da4:	add	r0, r3, r2, lsl #3
   24da8:	addne	r6, r6, r1
   24dac:	mov	r3, r5
   24db0:	mov	r2, #0
   24db4:	ldr	ip, [sp, #12]
   24db8:	cmp	r2, ip
   24dbc:	blt	24fe0 <GetDataSlab+0x90c4>
   24dc0:	ldr	r3, [sp, #24]
   24dc4:	ldr	r8, [sp, #4]
   24dc8:	sub	r2, r3, r1
   24dcc:	ldr	r3, [sp, #16]
   24dd0:	mov	r4, #1
   24dd4:	add	r3, r3, r6
   24dd8:	add	r6, r3, r2
   24ddc:	ldr	r3, [sp, #28]
   24de0:	add	r3, r3, r2, lsl #3
   24de4:	add	r5, r5, r3
   24de8:	ldr	r3, [sp, #208]	; 0xd0
   24dec:	cmp	r4, r3
   24df0:	bge	2501c <GetDataSlab+0x9100>
   24df4:	ldr	r3, [sl, r4, lsl #2]
   24df8:	ldr	r2, [sp, #204]	; 0xcc
   24dfc:	add	r3, r3, #1
   24e00:	str	r3, [sl, r4, lsl #2]
   24e04:	mov	r0, r3
   24e08:	ldr	r1, [r2, r4, lsl #2]
   24e0c:	bl	3fd18 <__aeabi_idivmod>
   24e10:	subs	r3, r1, #0
   24e14:	bne	25008 <GetDataSlab+0x90ec>
   24e18:	ldr	r7, [r8, #4]
   24e1c:	str	r3, [sl, r4, lsl #2]
   24e20:	mov	r1, r7
   24e24:	mov	r0, r6
   24e28:	bl	3fd18 <__aeabi_idivmod>
   24e2c:	ldr	r2, [sp, #196]	; 0xc4
   24e30:	ldr	r2, [r2, r4, lsl #2]
   24e34:	subs	r3, r1, #0
   24e38:	beq	24ff4 <GetDataSlab+0x90d8>
   24e3c:	ldr	r1, [r8]
   24e40:	sub	r3, r7, r3
   24e44:	mla	r3, r2, r1, r3
   24e48:	add	r5, r5, r3, lsl #3
   24e4c:	add	r6, r6, r3
   24e50:	add	r4, r4, #1
   24e54:	add	r8, r8, #4
   24e58:	b	24de8 <GetDataSlab+0x8ecc>
   24e5c:	ldr	r3, [r9, r2, lsl #2]
   24e60:	mov	r5, ip
   24e64:	sub	r3, r3, #1
   24e68:	str	r3, [r4, r2, lsl #2]
   24e6c:	ldr	r3, [lr], #4
   24e70:	mov	r1, lr
   24e74:	str	r3, [ip, #4]
   24e78:	cmp	r1, fp
   24e7c:	bne	24eb0 <GetDataSlab+0x8f94>
   24e80:	ldr	r3, [sp, #204]	; 0xcc
   24e84:	ldr	r1, [sp, #20]
   24e88:	add	ip, ip, #4
   24e8c:	ldr	r3, [r3, r2, lsl #2]
   24e90:	mul	r3, r3, r1
   24e94:	ldr	r1, [sp, #196]	; 0xc4
   24e98:	str	r3, [sp, #20]
   24e9c:	ldr	r3, [r5]
   24ea0:	ldr	r1, [r1, r2, lsl #2]
   24ea4:	add	r2, r2, #1
   24ea8:	mla	r6, r1, r3, r6
   24eac:	b	24d14 <GetDataSlab+0x8df8>
   24eb0:	ldr	r7, [r4, r2, lsl #2]
   24eb4:	mov	r0, r1
   24eb8:	ldr	r3, [r1, #-4]!
   24ebc:	mul	r3, r3, r7
   24ec0:	ldr	r7, [ip, #4]
   24ec4:	str	r3, [r4, r2, lsl #2]
   24ec8:	ldr	r3, [r0]
   24ecc:	mul	r3, r3, r7
   24ed0:	str	r3, [ip, #4]
   24ed4:	b	24e78 <GetDataSlab+0x8f5c>
   24ed8:	ldrd	r2, [lr, #8]!
   24edc:	add	r0, r0, #1
   24ee0:	strd	r2, [ip], #8
   24ee4:	b	24f48 <GetDataSlab+0x902c>
   24ee8:	cmp	r2, #0
   24eec:	beq	24fd4 <GetDataSlab+0x90b8>
   24ef0:	ldr	r3, [r8]
   24ef4:	mul	r3, r3, r2
   24ef8:	b	24fcc <GetDataSlab+0x90b0>
   24efc:	add	r3, sp, #152	; 0x98
   24f00:	add	r3, r3, r4, lsl #2
   24f04:	ldr	r3, [r3, #-120]	; 0xffffff88
   24f08:	add	r6, r6, r3
   24f0c:	add	r5, r5, r3, lsl #3
   24f10:	ldr	r3, [sp, #12]
   24f14:	add	r9, r9, r3
   24f18:	ldr	r3, [sp, #20]
   24f1c:	cmp	r9, r3
   24f20:	bge	1c04c <GetDataSlab+0x130>
   24f24:	ldr	r3, [sp, #196]	; 0xc4
   24f28:	mov	r0, #0
   24f2c:	ldr	r1, [r3]
   24f30:	ldr	r3, [sp]
   24f34:	cmp	r1, #0
   24f38:	addne	r5, r5, r1, lsl #3
   24f3c:	addne	r6, r6, r1
   24f40:	sub	lr, r5, #8
   24f44:	add	ip, r3, r9, lsl #3
   24f48:	ldr	r3, [sp, #12]
   24f4c:	cmp	r0, r3
   24f50:	blt	24ed8 <GetDataSlab+0x8fbc>
   24f54:	ldr	r3, [sp, #24]
   24f58:	ldr	r8, [sp, #4]
   24f5c:	sub	r3, r3, r1
   24f60:	ldr	r4, [sp, #16]
   24f64:	add	r6, r6, r3
   24f68:	add	r5, r5, r3, lsl #3
   24f6c:	ldr	r3, [sp, #208]	; 0xd0
   24f70:	cmp	r4, r3
   24f74:	bge	24f10 <GetDataSlab+0x8ff4>
   24f78:	ldr	r3, [sl, r4, lsl #2]
   24f7c:	ldr	r2, [sp, #204]	; 0xcc
   24f80:	add	r3, r3, #1
   24f84:	str	r3, [sl, r4, lsl #2]
   24f88:	mov	r0, r3
   24f8c:	ldr	r1, [r2, r4, lsl #2]
   24f90:	bl	3fd18 <__aeabi_idivmod>
   24f94:	subs	r3, r1, #0
   24f98:	bne	24efc <GetDataSlab+0x8fe0>
   24f9c:	ldr	r7, [r8, #4]
   24fa0:	str	r3, [sl, r4, lsl #2]
   24fa4:	mov	r1, r7
   24fa8:	mov	r0, r6
   24fac:	bl	3fd18 <__aeabi_idivmod>
   24fb0:	ldr	r2, [sp, #196]	; 0xc4
   24fb4:	ldr	r2, [r2, r4, lsl #2]
   24fb8:	subs	r3, r1, #0
   24fbc:	beq	24ee8 <GetDataSlab+0x8fcc>
   24fc0:	ldr	r1, [r8]
   24fc4:	sub	r3, r7, r3
   24fc8:	mla	r3, r2, r1, r3
   24fcc:	add	r5, r5, r3, lsl #3
   24fd0:	add	r6, r6, r3
   24fd4:	add	r4, r4, #1
   24fd8:	add	r8, r8, #4
   24fdc:	b	24f6c <GetDataSlab+0x9050>
   24fe0:	ldrd	r8, [r3]
   24fe4:	add	r2, r2, #1
   24fe8:	add	r3, r3, fp
   24fec:	strd	r8, [r0], #8
   24ff0:	b	24db4 <GetDataSlab+0x8e98>
   24ff4:	cmp	r2, #0
   24ff8:	beq	24e50 <GetDataSlab+0x8f34>
   24ffc:	ldr	r3, [r8]
   25000:	mul	r3, r3, r2
   25004:	b	24e48 <GetDataSlab+0x8f2c>
   25008:	add	r3, sp, #152	; 0x98
   2500c:	add	r3, r3, r4, lsl #2
   25010:	ldr	r3, [r3, #-120]	; 0xffffff88
   25014:	add	r6, r6, r3
   25018:	add	r5, r5, r3, lsl #3
   2501c:	ldr	r3, [sp, #12]
   25020:	ldr	r2, [sp, #8]
   25024:	add	r3, r2, r3
   25028:	b	24d78 <GetDataSlab+0x8e5c>
   2502c:	cmp	r5, #13
   25030:	bne	337fc <GetDataSlab+0x178e0>
   25034:	ldr	r3, [r9]
   25038:	ldr	ip, [sp, #4]
   2503c:	str	r3, [sp, #16]
   25040:	sub	r3, r3, #1
   25044:	str	r3, [sp, #32]
   25048:	ldr	r3, [fp]
   2504c:	mov	lr, fp
   25050:	str	r3, [sp, #24]
   25054:	str	r3, [sp, #112]	; 0x70
   25058:	ldr	r3, [sp, #204]	; 0xcc
   2505c:	mov	r6, #0
   25060:	mov	r2, #1
   25064:	ldr	r3, [r3]
   25068:	str	r3, [sp, #12]
   2506c:	str	r3, [sp, #20]
   25070:	ldr	r3, [sp, #208]	; 0xd0
   25074:	cmp	r2, r3
   25078:	blt	251b8 <GetDataSlab+0x929c>
   2507c:	ldr	r3, [sp, #8]
   25080:	add	r5, r3, r6, lsl #3
   25084:	ldr	r3, [sp, #16]
   25088:	cmp	r3, #1
   2508c:	moveq	r9, #0
   25090:	beq	25274 <GetDataSlab+0x9358>
   25094:	ldr	r3, [sp, #16]
   25098:	ldr	r2, [sp, #12]
   2509c:	mul	r3, r3, r2
   250a0:	ldr	r2, [sp, #24]
   250a4:	sub	r3, r2, r3
   250a8:	str	r3, [sp, #24]
   250ac:	ldr	r3, [sp, #16]
   250b0:	ldr	r2, [sp, #16]
   250b4:	lsl	fp, r3, #3
   250b8:	ldr	r3, [sp, #12]
   250bc:	bic	r3, r3, r3, asr #31
   250c0:	mul	r2, r3, r2
   250c4:	mul	r3, r3, fp
   250c8:	str	r2, [sp, #28]
   250cc:	str	r3, [sp, #16]
   250d0:	mov	r3, #0
   250d4:	str	r3, [sp, #8]
   250d8:	ldr	r2, [sp, #8]
   250dc:	ldr	r3, [sp, #20]
   250e0:	cmp	r2, r3
   250e4:	bge	1c04c <GetDataSlab+0x130>
   250e8:	ldr	r3, [sp, #196]	; 0xc4
   250ec:	ldr	r2, [sp, #8]
   250f0:	ldr	r1, [r3]
   250f4:	ldr	r3, [sp]
   250f8:	cmp	r1, #0
   250fc:	addne	r5, r5, r1, lsl #3
   25100:	add	r0, r3, r2, lsl #3
   25104:	addne	r6, r6, r1
   25108:	mov	r3, r5
   2510c:	mov	r2, #0
   25110:	ldr	ip, [sp, #12]
   25114:	cmp	r2, ip
   25118:	blt	2533c <GetDataSlab+0x9420>
   2511c:	ldr	r3, [sp, #24]
   25120:	ldr	r8, [sp, #4]
   25124:	sub	r2, r3, r1
   25128:	ldr	r3, [sp, #28]
   2512c:	mov	r4, #1
   25130:	add	r3, r3, r6
   25134:	add	r6, r3, r2
   25138:	ldr	r3, [sp, #16]
   2513c:	add	r3, r3, r2, lsl #3
   25140:	add	r5, r5, r3
   25144:	ldr	r3, [sp, #208]	; 0xd0
   25148:	cmp	r4, r3
   2514c:	bge	25378 <GetDataSlab+0x945c>
   25150:	ldr	r3, [sl, r4, lsl #2]
   25154:	ldr	r2, [sp, #204]	; 0xcc
   25158:	add	r3, r3, #1
   2515c:	str	r3, [sl, r4, lsl #2]
   25160:	mov	r0, r3
   25164:	ldr	r1, [r2, r4, lsl #2]
   25168:	bl	3fd18 <__aeabi_idivmod>
   2516c:	subs	r3, r1, #0
   25170:	bne	25364 <GetDataSlab+0x9448>
   25174:	ldr	r7, [r8, #4]
   25178:	str	r3, [sl, r4, lsl #2]
   2517c:	mov	r1, r7
   25180:	mov	r0, r6
   25184:	bl	3fd18 <__aeabi_idivmod>
   25188:	ldr	r2, [sp, #196]	; 0xc4
   2518c:	ldr	r2, [r2, r4, lsl #2]
   25190:	subs	r3, r1, #0
   25194:	beq	25350 <GetDataSlab+0x9434>
   25198:	ldr	r1, [r8]
   2519c:	sub	r3, r7, r3
   251a0:	mla	r3, r2, r1, r3
   251a4:	add	r5, r5, r3, lsl #3
   251a8:	add	r6, r6, r3
   251ac:	add	r4, r4, #1
   251b0:	add	r8, r8, #4
   251b4:	b	25144 <GetDataSlab+0x9228>
   251b8:	ldr	r3, [r9, r2, lsl #2]
   251bc:	mov	r5, ip
   251c0:	sub	r3, r3, #1
   251c4:	str	r3, [r4, r2, lsl #2]
   251c8:	ldr	r3, [lr], #4
   251cc:	mov	r1, lr
   251d0:	str	r3, [ip, #4]
   251d4:	cmp	r1, fp
   251d8:	bne	2520c <GetDataSlab+0x92f0>
   251dc:	ldr	r3, [sp, #204]	; 0xcc
   251e0:	ldr	r1, [sp, #20]
   251e4:	add	ip, ip, #4
   251e8:	ldr	r3, [r3, r2, lsl #2]
   251ec:	mul	r3, r3, r1
   251f0:	ldr	r1, [sp, #196]	; 0xc4
   251f4:	str	r3, [sp, #20]
   251f8:	ldr	r3, [r5]
   251fc:	ldr	r1, [r1, r2, lsl #2]
   25200:	add	r2, r2, #1
   25204:	mla	r6, r1, r3, r6
   25208:	b	25070 <GetDataSlab+0x9154>
   2520c:	ldr	r7, [r4, r2, lsl #2]
   25210:	mov	r0, r1
   25214:	ldr	r3, [r1, #-4]!
   25218:	mul	r3, r3, r7
   2521c:	ldr	r7, [ip, #4]
   25220:	str	r3, [r4, r2, lsl #2]
   25224:	ldr	r3, [r0]
   25228:	mul	r3, r3, r7
   2522c:	str	r3, [ip, #4]
   25230:	b	251d4 <GetDataSlab+0x92b8>
   25234:	ldrd	r2, [lr, #8]!
   25238:	add	r0, r0, #1
   2523c:	strd	r2, [ip], #8
   25240:	b	252a4 <GetDataSlab+0x9388>
   25244:	cmp	r2, #0
   25248:	beq	25330 <GetDataSlab+0x9414>
   2524c:	ldr	r3, [r8]
   25250:	mul	r3, r3, r2
   25254:	b	25328 <GetDataSlab+0x940c>
   25258:	add	r3, sp, #152	; 0x98
   2525c:	add	r3, r3, r4, lsl #2
   25260:	ldr	r3, [r3, #-120]	; 0xffffff88
   25264:	add	r6, r6, r3
   25268:	add	r5, r5, r3, lsl #3
   2526c:	ldr	r3, [sp, #12]
   25270:	add	r9, r9, r3
   25274:	ldr	r3, [sp, #20]
   25278:	cmp	r9, r3
   2527c:	bge	1c04c <GetDataSlab+0x130>
   25280:	ldr	r3, [sp, #196]	; 0xc4
   25284:	mov	r0, #0
   25288:	ldr	r1, [r3]
   2528c:	ldr	r3, [sp]
   25290:	cmp	r1, #0
   25294:	addne	r5, r5, r1, lsl #3
   25298:	addne	r6, r6, r1
   2529c:	sub	lr, r5, #8
   252a0:	add	ip, r3, r9, lsl #3
   252a4:	ldr	r3, [sp, #12]
   252a8:	cmp	r0, r3
   252ac:	blt	25234 <GetDataSlab+0x9318>
   252b0:	ldr	r3, [sp, #24]
   252b4:	ldr	r8, [sp, #4]
   252b8:	sub	r3, r3, r1
   252bc:	ldr	r4, [sp, #16]
   252c0:	add	r6, r6, r3
   252c4:	add	r5, r5, r3, lsl #3
   252c8:	ldr	r3, [sp, #208]	; 0xd0
   252cc:	cmp	r4, r3
   252d0:	bge	2526c <GetDataSlab+0x9350>
   252d4:	ldr	r3, [sl, r4, lsl #2]
   252d8:	ldr	r2, [sp, #204]	; 0xcc
   252dc:	add	r3, r3, #1
   252e0:	str	r3, [sl, r4, lsl #2]
   252e4:	mov	r0, r3
   252e8:	ldr	r1, [r2, r4, lsl #2]
   252ec:	bl	3fd18 <__aeabi_idivmod>
   252f0:	subs	r3, r1, #0
   252f4:	bne	25258 <GetDataSlab+0x933c>
   252f8:	ldr	r7, [r8, #4]
   252fc:	str	r3, [sl, r4, lsl #2]
   25300:	mov	r1, r7
   25304:	mov	r0, r6
   25308:	bl	3fd18 <__aeabi_idivmod>
   2530c:	ldr	r2, [sp, #196]	; 0xc4
   25310:	ldr	r2, [r2, r4, lsl #2]
   25314:	subs	r3, r1, #0
   25318:	beq	25244 <GetDataSlab+0x9328>
   2531c:	ldr	r1, [r8]
   25320:	sub	r3, r7, r3
   25324:	mla	r3, r2, r1, r3
   25328:	add	r5, r5, r3, lsl #3
   2532c:	add	r6, r6, r3
   25330:	add	r4, r4, #1
   25334:	add	r8, r8, #4
   25338:	b	252c8 <GetDataSlab+0x93ac>
   2533c:	ldrd	r8, [r3]
   25340:	add	r2, r2, #1
   25344:	add	r3, r3, fp
   25348:	strd	r8, [r0], #8
   2534c:	b	25110 <GetDataSlab+0x91f4>
   25350:	cmp	r2, #0
   25354:	beq	251ac <GetDataSlab+0x9290>
   25358:	ldr	r3, [r8]
   2535c:	mul	r3, r3, r2
   25360:	b	251a4 <GetDataSlab+0x9288>
   25364:	add	r3, sp, #152	; 0x98
   25368:	add	r3, r3, r4, lsl #2
   2536c:	ldr	r3, [r3, #-120]	; 0xffffff88
   25370:	add	r6, r6, r3
   25374:	add	r5, r5, r3, lsl #3
   25378:	ldr	r3, [sp, #12]
   2537c:	ldr	r2, [sp, #8]
   25380:	add	r3, r2, r3
   25384:	b	250d4 <GetDataSlab+0x91b8>
   25388:	sub	r3, r5, #1
   2538c:	cmp	r3, #8
   25390:	addls	pc, pc, r3, lsl #2
   25394:	b	26e0c <GetDataSlab+0xaef0>
   25398:	b	26794 <GetDataSlab+0xa878>
   2539c:	b	26ad0 <GetDataSlab+0xabb4>
   253a0:	b	26104 <GetDataSlab+0xa1e8>
   253a4:	b	2644c <GetDataSlab+0xa530>
   253a8:	b	25a6c <GetDataSlab+0x9b50>
   253ac:	b	25db8 <GetDataSlab+0x9e9c>
   253b0:	b	25714 <GetDataSlab+0x97f8>
   253b4:	b	26e0c <GetDataSlab+0xaef0>
   253b8:	b	253bc <GetDataSlab+0x94a0>
   253bc:	ldr	r3, [r9]
   253c0:	ldr	ip, [sp, #4]
   253c4:	str	r3, [sp, #16]
   253c8:	sub	r3, r3, #1
   253cc:	str	r3, [sp, #32]
   253d0:	ldr	r3, [fp]
   253d4:	mov	lr, fp
   253d8:	str	r3, [sp, #24]
   253dc:	str	r3, [sp, #112]	; 0x70
   253e0:	ldr	r3, [sp, #204]	; 0xcc
   253e4:	mov	r8, #0
   253e8:	mov	r2, #1
   253ec:	ldr	r3, [r3]
   253f0:	str	r3, [sp, #12]
   253f4:	str	r3, [sp, #20]
   253f8:	ldr	r3, [sp, #208]	; 0xd0
   253fc:	cmp	r2, r3
   25400:	blt	2553c <GetDataSlab+0x9620>
   25404:	ldr	r3, [sp, #8]
   25408:	add	r6, r3, r8, lsl #3
   2540c:	ldr	r3, [sp, #16]
   25410:	cmp	r3, #1
   25414:	moveq	fp, #0
   25418:	beq	255fc <GetDataSlab+0x96e0>
   2541c:	ldr	r3, [sp, #16]
   25420:	ldr	r2, [sp, #12]
   25424:	mov	fp, #0
   25428:	mul	r3, r3, r2
   2542c:	ldr	r2, [sp, #24]
   25430:	sub	r3, r2, r3
   25434:	str	r3, [sp, #24]
   25438:	ldr	r3, [sp, #16]
   2543c:	ldr	r2, [sp, #16]
   25440:	lsl	r3, r3, #3
   25444:	str	r3, [sp, #8]
   25448:	ldr	r3, [sp, #12]
   2544c:	bic	r3, r3, r3, asr #31
   25450:	mul	r2, r3, r2
   25454:	str	r2, [sp, #28]
   25458:	ldr	r2, [sp, #8]
   2545c:	mul	r3, r3, r2
   25460:	str	r3, [sp, #16]
   25464:	ldr	r3, [sp, #20]
   25468:	cmp	fp, r3
   2546c:	bge	1c04c <GetDataSlab+0x130>
   25470:	ldr	r3, [sp, #196]	; 0xc4
   25474:	mov	r4, #0
   25478:	ldr	r7, [r3]
   2547c:	ldr	r3, [sp]
   25480:	cmp	r7, #0
   25484:	addne	r6, r6, r7, lsl #3
   25488:	addne	r8, r8, r7
   2548c:	add	r9, r3, fp, lsl #3
   25490:	mov	r5, r6
   25494:	ldr	r3, [sp, #12]
   25498:	cmp	r4, r3
   2549c:	blt	256c4 <GetDataSlab+0x97a8>
   254a0:	ldr	r3, [sp, #24]
   254a4:	mov	r4, #1
   254a8:	sub	r2, r3, r7
   254ac:	ldr	r3, [sp, #28]
   254b0:	ldr	r7, [sp, #4]
   254b4:	add	r3, r8, r3
   254b8:	add	r8, r3, r2
   254bc:	ldr	r3, [sp, #16]
   254c0:	add	r3, r3, r2, lsl #3
   254c4:	add	r6, r6, r3
   254c8:	ldr	r3, [sp, #208]	; 0xd0
   254cc:	cmp	r4, r3
   254d0:	bge	25708 <GetDataSlab+0x97ec>
   254d4:	ldr	r3, [sl, r4, lsl #2]
   254d8:	ldr	r2, [sp, #204]	; 0xcc
   254dc:	add	r3, r3, #1
   254e0:	str	r3, [sl, r4, lsl #2]
   254e4:	mov	r0, r3
   254e8:	ldr	r1, [r2, r4, lsl #2]
   254ec:	bl	3fd18 <__aeabi_idivmod>
   254f0:	subs	r3, r1, #0
   254f4:	bne	256f4 <GetDataSlab+0x97d8>
   254f8:	ldr	r5, [r7, #4]
   254fc:	str	r3, [sl, r4, lsl #2]
   25500:	mov	r1, r5
   25504:	mov	r0, r8
   25508:	bl	3fd18 <__aeabi_idivmod>
   2550c:	ldr	r2, [sp, #196]	; 0xc4
   25510:	ldr	r2, [r2, r4, lsl #2]
   25514:	subs	r3, r1, #0
   25518:	beq	256e0 <GetDataSlab+0x97c4>
   2551c:	ldr	r1, [r7]
   25520:	sub	r3, r5, r3
   25524:	mla	r3, r2, r1, r3
   25528:	add	r6, r6, r3, lsl #3
   2552c:	add	r8, r8, r3
   25530:	add	r4, r4, #1
   25534:	add	r7, r7, #4
   25538:	b	254c8 <GetDataSlab+0x95ac>
   2553c:	ldr	r3, [r9, r2, lsl #2]
   25540:	mov	r5, ip
   25544:	sub	r3, r3, #1
   25548:	str	r3, [r4, r2, lsl #2]
   2554c:	ldr	r3, [lr], #4
   25550:	mov	r1, lr
   25554:	str	r3, [ip, #4]
   25558:	cmp	r1, fp
   2555c:	bne	25590 <GetDataSlab+0x9674>
   25560:	ldr	r3, [sp, #204]	; 0xcc
   25564:	ldr	r1, [sp, #20]
   25568:	add	ip, ip, #4
   2556c:	ldr	r3, [r3, r2, lsl #2]
   25570:	mul	r3, r3, r1
   25574:	ldr	r1, [sp, #196]	; 0xc4
   25578:	str	r3, [sp, #20]
   2557c:	ldr	r3, [r5]
   25580:	ldr	r1, [r1, r2, lsl #2]
   25584:	add	r2, r2, #1
   25588:	mla	r8, r1, r3, r8
   2558c:	b	253f8 <GetDataSlab+0x94dc>
   25590:	ldr	r6, [r4, r2, lsl #2]
   25594:	mov	r0, r1
   25598:	ldr	r3, [r1, #-4]!
   2559c:	mul	r3, r3, r6
   255a0:	ldr	r6, [ip, #4]
   255a4:	str	r3, [r4, r2, lsl #2]
   255a8:	ldr	r3, [r0]
   255ac:	mul	r3, r3, r6
   255b0:	str	r3, [ip, #4]
   255b4:	b	25558 <GetDataSlab+0x963c>
   255b8:	ldrd	r0, [r9], #8
   255bc:	bl	403f0 <__aeabi_d2ulz>
   255c0:	add	r5, r5, #1
   255c4:	strd	r0, [r7], #8
   255c8:	b	2562c <GetDataSlab+0x9710>
   255cc:	cmp	r2, #0
   255d0:	beq	256b8 <GetDataSlab+0x979c>
   255d4:	ldr	r3, [r7]
   255d8:	mul	r3, r3, r2
   255dc:	b	256b0 <GetDataSlab+0x9794>
   255e0:	add	r3, sp, #152	; 0x98
   255e4:	add	r3, r3, r4, lsl #2
   255e8:	ldr	r3, [r3, #-120]	; 0xffffff88
   255ec:	add	r8, r8, r3
   255f0:	add	r6, r6, r3, lsl #3
   255f4:	ldr	r3, [sp, #12]
   255f8:	add	fp, fp, r3
   255fc:	ldr	r3, [sp, #20]
   25600:	cmp	fp, r3
   25604:	bge	1c04c <GetDataSlab+0x130>
   25608:	ldr	r3, [sp, #196]	; 0xc4
   2560c:	mov	r5, #0
   25610:	ldr	r4, [r3]
   25614:	ldr	r3, [sp]
   25618:	cmp	r4, #0
   2561c:	addne	r6, r6, r4, lsl #3
   25620:	addne	r8, r8, r4
   25624:	mov	r9, r6
   25628:	add	r7, r3, fp, lsl #3
   2562c:	ldr	r3, [sp, #12]
   25630:	cmp	r5, r3
   25634:	blt	255b8 <GetDataSlab+0x969c>
   25638:	ldr	r3, [sp, #24]
   2563c:	ldr	r7, [sp, #4]
   25640:	sub	r3, r3, r4
   25644:	ldr	r4, [sp, #16]
   25648:	add	r8, r8, r3
   2564c:	add	r6, r6, r3, lsl #3
   25650:	ldr	r3, [sp, #208]	; 0xd0
   25654:	cmp	r4, r3
   25658:	bge	255f4 <GetDataSlab+0x96d8>
   2565c:	ldr	r3, [sl, r4, lsl #2]
   25660:	ldr	r2, [sp, #204]	; 0xcc
   25664:	add	r3, r3, #1
   25668:	str	r3, [sl, r4, lsl #2]
   2566c:	mov	r0, r3
   25670:	ldr	r1, [r2, r4, lsl #2]
   25674:	bl	3fd18 <__aeabi_idivmod>
   25678:	subs	r3, r1, #0
   2567c:	bne	255e0 <GetDataSlab+0x96c4>
   25680:	ldr	r5, [r7, #4]
   25684:	str	r3, [sl, r4, lsl #2]
   25688:	mov	r1, r5
   2568c:	mov	r0, r8
   25690:	bl	3fd18 <__aeabi_idivmod>
   25694:	ldr	r2, [sp, #196]	; 0xc4
   25698:	ldr	r2, [r2, r4, lsl #2]
   2569c:	subs	r3, r1, #0
   256a0:	beq	255cc <GetDataSlab+0x96b0>
   256a4:	ldr	r1, [r7]
   256a8:	sub	r3, r5, r3
   256ac:	mla	r3, r2, r1, r3
   256b0:	add	r6, r6, r3, lsl #3
   256b4:	add	r8, r8, r3
   256b8:	add	r4, r4, #1
   256bc:	add	r7, r7, #4
   256c0:	b	25650 <GetDataSlab+0x9734>
   256c4:	ldrd	r0, [r5]
   256c8:	bl	403f0 <__aeabi_d2ulz>
   256cc:	ldr	r3, [sp, #8]
   256d0:	add	r4, r4, #1
   256d4:	add	r5, r5, r3
   256d8:	strd	r0, [r9], #8
   256dc:	b	25494 <GetDataSlab+0x9578>
   256e0:	cmp	r2, #0
   256e4:	beq	25530 <GetDataSlab+0x9614>
   256e8:	ldr	r3, [r7]
   256ec:	mul	r3, r3, r2
   256f0:	b	25528 <GetDataSlab+0x960c>
   256f4:	add	r3, sp, #152	; 0x98
   256f8:	add	r3, r3, r4, lsl #2
   256fc:	ldr	r3, [r3, #-120]	; 0xffffff88
   25700:	add	r8, r8, r3
   25704:	add	r6, r6, r3, lsl #3
   25708:	ldr	r3, [sp, #12]
   2570c:	add	fp, fp, r3
   25710:	b	25464 <GetDataSlab+0x9548>
   25714:	ldr	r3, [r9]
   25718:	ldr	ip, [sp, #4]
   2571c:	str	r3, [sp, #16]
   25720:	sub	r3, r3, #1
   25724:	str	r3, [sp, #32]
   25728:	ldr	r3, [fp]
   2572c:	mov	lr, fp
   25730:	str	r3, [sp, #24]
   25734:	str	r3, [sp, #112]	; 0x70
   25738:	ldr	r3, [sp, #204]	; 0xcc
   2573c:	mov	r8, #0
   25740:	mov	r2, #1
   25744:	ldr	r3, [r3]
   25748:	str	r3, [sp, #12]
   2574c:	str	r3, [sp, #20]
   25750:	ldr	r3, [sp, #208]	; 0xd0
   25754:	cmp	r2, r3
   25758:	blt	25894 <GetDataSlab+0x9978>
   2575c:	ldr	r3, [sp, #8]
   25760:	add	r6, r3, r8, lsl #2
   25764:	ldr	r3, [sp, #16]
   25768:	cmp	r3, #1
   2576c:	moveq	fp, #0
   25770:	beq	25954 <GetDataSlab+0x9a38>
   25774:	ldr	r3, [sp, #16]
   25778:	ldr	r2, [sp, #12]
   2577c:	mov	fp, #0
   25780:	mul	r3, r3, r2
   25784:	ldr	r2, [sp, #24]
   25788:	sub	r3, r2, r3
   2578c:	str	r3, [sp, #24]
   25790:	ldr	r3, [sp, #16]
   25794:	ldr	r2, [sp, #16]
   25798:	lsl	r3, r3, #2
   2579c:	str	r3, [sp, #8]
   257a0:	ldr	r3, [sp, #12]
   257a4:	bic	r3, r3, r3, asr #31
   257a8:	mul	r2, r3, r2
   257ac:	str	r2, [sp, #28]
   257b0:	ldr	r2, [sp, #8]
   257b4:	mul	r3, r3, r2
   257b8:	str	r3, [sp, #16]
   257bc:	ldr	r3, [sp, #20]
   257c0:	cmp	fp, r3
   257c4:	bge	1c04c <GetDataSlab+0x130>
   257c8:	ldr	r3, [sp, #196]	; 0xc4
   257cc:	mov	r4, #0
   257d0:	ldr	r7, [r3]
   257d4:	ldr	r3, [sp]
   257d8:	cmp	r7, #0
   257dc:	addne	r6, r6, r7, lsl #2
   257e0:	addne	r8, r8, r7
   257e4:	add	r9, r3, fp, lsl #3
   257e8:	mov	r5, r6
   257ec:	ldr	r3, [sp, #12]
   257f0:	cmp	r4, r3
   257f4:	blt	25a1c <GetDataSlab+0x9b00>
   257f8:	ldr	r3, [sp, #24]
   257fc:	mov	r4, #1
   25800:	sub	r2, r3, r7
   25804:	ldr	r3, [sp, #28]
   25808:	ldr	r7, [sp, #4]
   2580c:	add	r3, r3, r8
   25810:	add	r8, r3, r2
   25814:	ldr	r3, [sp, #16]
   25818:	add	r3, r3, r2, lsl #2
   2581c:	add	r6, r6, r3
   25820:	ldr	r3, [sp, #208]	; 0xd0
   25824:	cmp	r4, r3
   25828:	bge	25a60 <GetDataSlab+0x9b44>
   2582c:	ldr	r3, [sl, r4, lsl #2]
   25830:	ldr	r2, [sp, #204]	; 0xcc
   25834:	add	r3, r3, #1
   25838:	str	r3, [sl, r4, lsl #2]
   2583c:	mov	r0, r3
   25840:	ldr	r1, [r2, r4, lsl #2]
   25844:	bl	3fd18 <__aeabi_idivmod>
   25848:	subs	r3, r1, #0
   2584c:	bne	25a4c <GetDataSlab+0x9b30>
   25850:	ldr	r5, [r7, #4]
   25854:	str	r3, [sl, r4, lsl #2]
   25858:	mov	r1, r5
   2585c:	mov	r0, r8
   25860:	bl	3fd18 <__aeabi_idivmod>
   25864:	ldr	r2, [sp, #196]	; 0xc4
   25868:	ldr	r2, [r2, r4, lsl #2]
   2586c:	subs	r3, r1, #0
   25870:	beq	25a38 <GetDataSlab+0x9b1c>
   25874:	ldr	r1, [r7]
   25878:	sub	r3, r5, r3
   2587c:	mla	r3, r2, r1, r3
   25880:	add	r6, r6, r3, lsl #2
   25884:	add	r8, r8, r3
   25888:	add	r4, r4, #1
   2588c:	add	r7, r7, #4
   25890:	b	25820 <GetDataSlab+0x9904>
   25894:	ldr	r3, [r9, r2, lsl #2]
   25898:	mov	r5, ip
   2589c:	sub	r3, r3, #1
   258a0:	str	r3, [r4, r2, lsl #2]
   258a4:	ldr	r3, [lr], #4
   258a8:	mov	r1, lr
   258ac:	str	r3, [ip, #4]
   258b0:	cmp	r1, fp
   258b4:	bne	258e8 <GetDataSlab+0x99cc>
   258b8:	ldr	r3, [sp, #204]	; 0xcc
   258bc:	ldr	r1, [sp, #20]
   258c0:	add	ip, ip, #4
   258c4:	ldr	r3, [r3, r2, lsl #2]
   258c8:	mul	r3, r3, r1
   258cc:	ldr	r1, [sp, #196]	; 0xc4
   258d0:	str	r3, [sp, #20]
   258d4:	ldr	r3, [r5]
   258d8:	ldr	r1, [r1, r2, lsl #2]
   258dc:	add	r2, r2, #1
   258e0:	mla	r8, r1, r3, r8
   258e4:	b	25750 <GetDataSlab+0x9834>
   258e8:	ldr	r6, [r4, r2, lsl #2]
   258ec:	mov	r0, r1
   258f0:	ldr	r3, [r1, #-4]!
   258f4:	mul	r3, r3, r6
   258f8:	ldr	r6, [ip, #4]
   258fc:	str	r3, [r4, r2, lsl #2]
   25900:	ldr	r3, [r0]
   25904:	mul	r3, r3, r6
   25908:	str	r3, [ip, #4]
   2590c:	b	258b0 <GetDataSlab+0x9994>
   25910:	ldr	r0, [r9], #4
   25914:	bl	403a8 <__aeabi_f2ulz>
   25918:	add	r5, r5, #1
   2591c:	strd	r0, [r7], #8
   25920:	b	25984 <GetDataSlab+0x9a68>
   25924:	cmp	r2, #0
   25928:	beq	25a10 <GetDataSlab+0x9af4>
   2592c:	ldr	r3, [r7]
   25930:	mul	r3, r3, r2
   25934:	b	25a08 <GetDataSlab+0x9aec>
   25938:	add	r3, sp, #152	; 0x98
   2593c:	add	r3, r3, r4, lsl #2
   25940:	ldr	r3, [r3, #-120]	; 0xffffff88
   25944:	add	r8, r8, r3
   25948:	add	r6, r6, r3, lsl #2
   2594c:	ldr	r3, [sp, #12]
   25950:	add	fp, fp, r3
   25954:	ldr	r3, [sp, #20]
   25958:	cmp	fp, r3
   2595c:	bge	1c04c <GetDataSlab+0x130>
   25960:	ldr	r3, [sp, #196]	; 0xc4
   25964:	mov	r5, #0
   25968:	ldr	r4, [r3]
   2596c:	ldr	r3, [sp]
   25970:	cmp	r4, #0
   25974:	addne	r6, r6, r4, lsl #2
   25978:	addne	r8, r8, r4
   2597c:	mov	r9, r6
   25980:	add	r7, r3, fp, lsl #3
   25984:	ldr	r3, [sp, #12]
   25988:	cmp	r5, r3
   2598c:	blt	25910 <GetDataSlab+0x99f4>
   25990:	ldr	r3, [sp, #24]
   25994:	ldr	r7, [sp, #4]
   25998:	sub	r3, r3, r4
   2599c:	ldr	r4, [sp, #16]
   259a0:	add	r8, r8, r3
   259a4:	add	r6, r6, r3, lsl #2
   259a8:	ldr	r3, [sp, #208]	; 0xd0
   259ac:	cmp	r4, r3
   259b0:	bge	2594c <GetDataSlab+0x9a30>
   259b4:	ldr	r3, [sl, r4, lsl #2]
   259b8:	ldr	r2, [sp, #204]	; 0xcc
   259bc:	add	r3, r3, #1
   259c0:	str	r3, [sl, r4, lsl #2]
   259c4:	mov	r0, r3
   259c8:	ldr	r1, [r2, r4, lsl #2]
   259cc:	bl	3fd18 <__aeabi_idivmod>
   259d0:	subs	r3, r1, #0
   259d4:	bne	25938 <GetDataSlab+0x9a1c>
   259d8:	ldr	r5, [r7, #4]
   259dc:	str	r3, [sl, r4, lsl #2]
   259e0:	mov	r1, r5
   259e4:	mov	r0, r8
   259e8:	bl	3fd18 <__aeabi_idivmod>
   259ec:	ldr	r2, [sp, #196]	; 0xc4
   259f0:	ldr	r2, [r2, r4, lsl #2]
   259f4:	subs	r3, r1, #0
   259f8:	beq	25924 <GetDataSlab+0x9a08>
   259fc:	ldr	r1, [r7]
   25a00:	sub	r3, r5, r3
   25a04:	mla	r3, r2, r1, r3
   25a08:	add	r6, r6, r3, lsl #2
   25a0c:	add	r8, r8, r3
   25a10:	add	r4, r4, #1
   25a14:	add	r7, r7, #4
   25a18:	b	259a8 <GetDataSlab+0x9a8c>
   25a1c:	ldr	r0, [r5]
   25a20:	bl	403a8 <__aeabi_f2ulz>
   25a24:	ldr	r3, [sp, #8]
   25a28:	add	r4, r4, #1
   25a2c:	add	r5, r5, r3
   25a30:	strd	r0, [r9], #8
   25a34:	b	257ec <GetDataSlab+0x98d0>
   25a38:	cmp	r2, #0
   25a3c:	beq	25888 <GetDataSlab+0x996c>
   25a40:	ldr	r3, [r7]
   25a44:	mul	r3, r3, r2
   25a48:	b	25880 <GetDataSlab+0x9964>
   25a4c:	add	r3, sp, #152	; 0x98
   25a50:	add	r3, r3, r4, lsl #2
   25a54:	ldr	r3, [r3, #-120]	; 0xffffff88
   25a58:	add	r8, r8, r3
   25a5c:	add	r6, r6, r3, lsl #2
   25a60:	ldr	r3, [sp, #12]
   25a64:	add	fp, fp, r3
   25a68:	b	257bc <GetDataSlab+0x98a0>
   25a6c:	ldr	r3, [r9]
   25a70:	ldr	ip, [sp, #4]
   25a74:	str	r3, [sp, #16]
   25a78:	sub	r3, r3, #1
   25a7c:	str	r3, [sp, #32]
   25a80:	ldr	r3, [fp]
   25a84:	mov	lr, fp
   25a88:	str	r3, [sp, #24]
   25a8c:	str	r3, [sp, #112]	; 0x70
   25a90:	ldr	r3, [sp, #204]	; 0xcc
   25a94:	mov	r6, #0
   25a98:	mov	r2, #1
   25a9c:	ldr	r3, [r3]
   25aa0:	str	r3, [sp, #12]
   25aa4:	str	r3, [sp, #20]
   25aa8:	ldr	r3, [sp, #208]	; 0xd0
   25aac:	cmp	r2, r3
   25ab0:	blt	25be4 <GetDataSlab+0x9cc8>
   25ab4:	ldr	r3, [sp, #8]
   25ab8:	add	r5, r3, r6, lsl #2
   25abc:	ldr	r3, [sp, #16]
   25ac0:	cmp	r3, #1
   25ac4:	moveq	r9, #0
   25ac8:	beq	25ca8 <GetDataSlab+0x9d8c>
   25acc:	ldr	r3, [sp, #16]
   25ad0:	ldr	r2, [sp, #12]
   25ad4:	mov	r9, #0
   25ad8:	mul	r3, r3, r2
   25adc:	ldr	r2, [sp, #24]
   25ae0:	sub	r3, r2, r3
   25ae4:	str	r3, [sp, #8]
   25ae8:	ldr	r3, [sp, #16]
   25aec:	ldr	r2, [sp, #16]
   25af0:	lsl	fp, r3, #2
   25af4:	ldr	r3, [sp, #12]
   25af8:	bic	r3, r3, r3, asr #31
   25afc:	mul	r2, r2, r3
   25b00:	mul	r3, fp, r3
   25b04:	str	r2, [sp, #16]
   25b08:	str	r3, [sp, #24]
   25b0c:	ldr	r3, [sp, #20]
   25b10:	cmp	r9, r3
   25b14:	bge	1c04c <GetDataSlab+0x130>
   25b18:	ldr	r3, [sp, #196]	; 0xc4
   25b1c:	mov	r1, #0
   25b20:	ldr	r0, [r3]
   25b24:	ldr	r3, [sp]
   25b28:	cmp	r0, #0
   25b2c:	addne	r5, r5, r0, lsl #2
   25b30:	addne	r6, r6, r0
   25b34:	add	ip, r3, r9, lsl #3
   25b38:	mov	lr, r5
   25b3c:	ldr	r3, [sp, #12]
   25b40:	cmp	r1, r3
   25b44:	blt	25d6c <GetDataSlab+0x9e50>
   25b48:	ldr	r3, [sp, #8]
   25b4c:	ldr	r8, [sp, #4]
   25b50:	sub	r2, r3, r0
   25b54:	ldr	r3, [sp, #16]
   25b58:	mov	r4, #1
   25b5c:	add	r3, r6, r3
   25b60:	add	r6, r3, r2
   25b64:	ldr	r3, [sp, #24]
   25b68:	add	r3, r3, r2, lsl #2
   25b6c:	add	r5, r5, r3
   25b70:	ldr	r3, [sp, #208]	; 0xd0
   25b74:	cmp	r4, r3
   25b78:	bge	25dac <GetDataSlab+0x9e90>
   25b7c:	ldr	r3, [sl, r4, lsl #2]
   25b80:	ldr	r2, [sp, #204]	; 0xcc
   25b84:	add	r3, r3, #1
   25b88:	str	r3, [sl, r4, lsl #2]
   25b8c:	mov	r0, r3
   25b90:	ldr	r1, [r2, r4, lsl #2]
   25b94:	bl	3fd18 <__aeabi_idivmod>
   25b98:	subs	r3, r1, #0
   25b9c:	bne	25d98 <GetDataSlab+0x9e7c>
   25ba0:	ldr	r7, [r8, #4]
   25ba4:	str	r3, [sl, r4, lsl #2]
   25ba8:	mov	r1, r7
   25bac:	mov	r0, r6
   25bb0:	bl	3fd18 <__aeabi_idivmod>
   25bb4:	ldr	r2, [sp, #196]	; 0xc4
   25bb8:	ldr	r2, [r2, r4, lsl #2]
   25bbc:	subs	r3, r1, #0
   25bc0:	beq	25d84 <GetDataSlab+0x9e68>
   25bc4:	ldr	r1, [r8]
   25bc8:	sub	r3, r7, r3
   25bcc:	mla	r3, r2, r1, r3
   25bd0:	add	r5, r5, r3, lsl #2
   25bd4:	add	r6, r6, r3
   25bd8:	add	r4, r4, #1
   25bdc:	add	r8, r8, #4
   25be0:	b	25b70 <GetDataSlab+0x9c54>
   25be4:	ldr	r3, [r9, r2, lsl #2]
   25be8:	mov	r5, ip
   25bec:	sub	r3, r3, #1
   25bf0:	str	r3, [r4, r2, lsl #2]
   25bf4:	ldr	r3, [lr], #4
   25bf8:	mov	r1, lr
   25bfc:	str	r3, [ip, #4]
   25c00:	cmp	r1, fp
   25c04:	bne	25c38 <GetDataSlab+0x9d1c>
   25c08:	ldr	r3, [sp, #204]	; 0xcc
   25c0c:	ldr	r1, [sp, #20]
   25c10:	add	ip, ip, #4
   25c14:	ldr	r3, [r3, r2, lsl #2]
   25c18:	mul	r3, r3, r1
   25c1c:	ldr	r1, [sp, #196]	; 0xc4
   25c20:	str	r3, [sp, #20]
   25c24:	ldr	r3, [r5]
   25c28:	ldr	r1, [r1, r2, lsl #2]
   25c2c:	add	r2, r2, #1
   25c30:	mla	r6, r1, r3, r6
   25c34:	b	25aa8 <GetDataSlab+0x9b8c>
   25c38:	ldr	r7, [r4, r2, lsl #2]
   25c3c:	mov	r0, r1
   25c40:	ldr	r3, [r1, #-4]!
   25c44:	mul	r3, r3, r7
   25c48:	ldr	r7, [ip, #4]
   25c4c:	str	r3, [r4, r2, lsl #2]
   25c50:	ldr	r3, [r0]
   25c54:	mul	r3, r3, r7
   25c58:	str	r3, [ip, #4]
   25c5c:	b	25c00 <GetDataSlab+0x9ce4>
   25c60:	ldr	r3, [r5, r1, lsl #2]
   25c64:	add	r1, r1, #1
   25c68:	mov	r2, r3
   25c6c:	asr	r3, r3, #31
   25c70:	strd	r2, [ip], #8
   25c74:	b	25cd4 <GetDataSlab+0x9db8>
   25c78:	cmp	r2, #0
   25c7c:	beq	25d60 <GetDataSlab+0x9e44>
   25c80:	ldr	r3, [r8]
   25c84:	mul	r3, r3, r2
   25c88:	b	25d58 <GetDataSlab+0x9e3c>
   25c8c:	add	r3, sp, #152	; 0x98
   25c90:	add	r3, r3, r4, lsl #2
   25c94:	ldr	r3, [r3, #-120]	; 0xffffff88
   25c98:	add	r6, r6, r3
   25c9c:	add	r5, r5, r3, lsl #2
   25ca0:	ldr	r3, [sp, #12]
   25ca4:	add	r9, r9, r3
   25ca8:	ldr	r3, [sp, #20]
   25cac:	cmp	r9, r3
   25cb0:	bge	1c04c <GetDataSlab+0x130>
   25cb4:	ldr	r3, [sp, #196]	; 0xc4
   25cb8:	mov	r1, #0
   25cbc:	ldr	r0, [r3]
   25cc0:	ldr	r3, [sp]
   25cc4:	cmp	r0, #0
   25cc8:	addne	r5, r5, r0, lsl #2
   25ccc:	addne	r6, r6, r0
   25cd0:	add	ip, r3, r9, lsl #3
   25cd4:	ldr	r3, [sp, #12]
   25cd8:	cmp	r1, r3
   25cdc:	blt	25c60 <GetDataSlab+0x9d44>
   25ce0:	ldr	r3, [sp, #24]
   25ce4:	ldr	r8, [sp, #4]
   25ce8:	sub	r3, r3, r0
   25cec:	ldr	r4, [sp, #16]
   25cf0:	add	r6, r6, r3
   25cf4:	add	r5, r5, r3, lsl #2
   25cf8:	ldr	r3, [sp, #208]	; 0xd0
   25cfc:	cmp	r4, r3
   25d00:	bge	25ca0 <GetDataSlab+0x9d84>
   25d04:	ldr	r3, [sl, r4, lsl #2]
   25d08:	ldr	r2, [sp, #204]	; 0xcc
   25d0c:	add	r3, r3, #1
   25d10:	str	r3, [sl, r4, lsl #2]
   25d14:	mov	r0, r3
   25d18:	ldr	r1, [r2, r4, lsl #2]
   25d1c:	bl	3fd18 <__aeabi_idivmod>
   25d20:	subs	r3, r1, #0
   25d24:	bne	25c8c <GetDataSlab+0x9d70>
   25d28:	ldr	r7, [r8, #4]
   25d2c:	str	r3, [sl, r4, lsl #2]
   25d30:	mov	r1, r7
   25d34:	mov	r0, r6
   25d38:	bl	3fd18 <__aeabi_idivmod>
   25d3c:	ldr	r2, [sp, #196]	; 0xc4
   25d40:	ldr	r2, [r2, r4, lsl #2]
   25d44:	subs	r3, r1, #0
   25d48:	beq	25c78 <GetDataSlab+0x9d5c>
   25d4c:	ldr	r1, [r8]
   25d50:	sub	r3, r7, r3
   25d54:	mla	r3, r2, r1, r3
   25d58:	add	r5, r5, r3, lsl #2
   25d5c:	add	r6, r6, r3
   25d60:	add	r4, r4, #1
   25d64:	add	r8, r8, #4
   25d68:	b	25cf8 <GetDataSlab+0x9ddc>
   25d6c:	ldr	r3, [lr], fp
   25d70:	add	r1, r1, #1
   25d74:	mov	r2, r3
   25d78:	asr	r3, r3, #31
   25d7c:	strd	r2, [ip], #8
   25d80:	b	25b3c <GetDataSlab+0x9c20>
   25d84:	cmp	r2, #0
   25d88:	beq	25bd8 <GetDataSlab+0x9cbc>
   25d8c:	ldr	r3, [r8]
   25d90:	mul	r3, r3, r2
   25d94:	b	25bd0 <GetDataSlab+0x9cb4>
   25d98:	add	r3, sp, #152	; 0x98
   25d9c:	add	r3, r3, r4, lsl #2
   25da0:	ldr	r3, [r3, #-120]	; 0xffffff88
   25da4:	add	r6, r6, r3
   25da8:	add	r5, r5, r3, lsl #2
   25dac:	ldr	r3, [sp, #12]
   25db0:	add	r9, r9, r3
   25db4:	b	25b0c <GetDataSlab+0x9bf0>
   25db8:	ldr	r3, [r9]
   25dbc:	ldr	ip, [sp, #4]
   25dc0:	str	r3, [sp, #16]
   25dc4:	sub	r3, r3, #1
   25dc8:	str	r3, [sp, #32]
   25dcc:	ldr	r3, [fp]
   25dd0:	mov	lr, fp
   25dd4:	str	r3, [sp, #24]
   25dd8:	str	r3, [sp, #112]	; 0x70
   25ddc:	ldr	r3, [sp, #204]	; 0xcc
   25de0:	mov	r6, #0
   25de4:	mov	r2, #1
   25de8:	ldr	r3, [r3]
   25dec:	str	r3, [sp, #12]
   25df0:	str	r3, [sp, #20]
   25df4:	ldr	r3, [sp, #208]	; 0xd0
   25df8:	cmp	r2, r3
   25dfc:	blt	25f30 <GetDataSlab+0xa014>
   25e00:	ldr	r3, [sp, #8]
   25e04:	add	r5, r3, r6, lsl #2
   25e08:	ldr	r3, [sp, #16]
   25e0c:	cmp	r3, #1
   25e10:	moveq	r9, #0
   25e14:	beq	25ff4 <GetDataSlab+0xa0d8>
   25e18:	ldr	r3, [sp, #16]
   25e1c:	ldr	r2, [sp, #12]
   25e20:	mov	r9, #0
   25e24:	mul	r3, r3, r2
   25e28:	ldr	r2, [sp, #24]
   25e2c:	sub	r3, r2, r3
   25e30:	str	r3, [sp, #8]
   25e34:	ldr	r3, [sp, #16]
   25e38:	ldr	r2, [sp, #16]
   25e3c:	lsl	fp, r3, #2
   25e40:	ldr	r3, [sp, #12]
   25e44:	bic	r3, r3, r3, asr #31
   25e48:	mul	r2, r2, r3
   25e4c:	mul	r3, fp, r3
   25e50:	str	r2, [sp, #16]
   25e54:	str	r3, [sp, #24]
   25e58:	ldr	r3, [sp, #20]
   25e5c:	cmp	r9, r3
   25e60:	bge	1c04c <GetDataSlab+0x130>
   25e64:	ldr	r3, [sp, #196]	; 0xc4
   25e68:	mov	r1, #0
   25e6c:	ldr	r0, [r3]
   25e70:	ldr	r3, [sp]
   25e74:	cmp	r0, #0
   25e78:	addne	r5, r5, r0, lsl #2
   25e7c:	addne	r6, r6, r0
   25e80:	add	ip, r3, r9, lsl #3
   25e84:	mov	lr, r5
   25e88:	ldr	r3, [sp, #12]
   25e8c:	cmp	r1, r3
   25e90:	blt	260b8 <GetDataSlab+0xa19c>
   25e94:	ldr	r3, [sp, #8]
   25e98:	ldr	r8, [sp, #4]
   25e9c:	sub	r2, r3, r0
   25ea0:	ldr	r3, [sp, #16]
   25ea4:	mov	r4, #1
   25ea8:	add	r3, r3, r6
   25eac:	add	r6, r3, r2
   25eb0:	ldr	r3, [sp, #24]
   25eb4:	add	r3, r3, r2, lsl #2
   25eb8:	add	r5, r5, r3
   25ebc:	ldr	r3, [sp, #208]	; 0xd0
   25ec0:	cmp	r4, r3
   25ec4:	bge	260f8 <GetDataSlab+0xa1dc>
   25ec8:	ldr	r3, [sl, r4, lsl #2]
   25ecc:	ldr	r2, [sp, #204]	; 0xcc
   25ed0:	add	r3, r3, #1
   25ed4:	str	r3, [sl, r4, lsl #2]
   25ed8:	mov	r0, r3
   25edc:	ldr	r1, [r2, r4, lsl #2]
   25ee0:	bl	3fd18 <__aeabi_idivmod>
   25ee4:	subs	r3, r1, #0
   25ee8:	bne	260e4 <GetDataSlab+0xa1c8>
   25eec:	ldr	r7, [r8, #4]
   25ef0:	str	r3, [sl, r4, lsl #2]
   25ef4:	mov	r1, r7
   25ef8:	mov	r0, r6
   25efc:	bl	3fd18 <__aeabi_idivmod>
   25f00:	ldr	r2, [sp, #196]	; 0xc4
   25f04:	ldr	r2, [r2, r4, lsl #2]
   25f08:	subs	r3, r1, #0
   25f0c:	beq	260d0 <GetDataSlab+0xa1b4>
   25f10:	ldr	r1, [r8]
   25f14:	sub	r3, r7, r3
   25f18:	mla	r3, r2, r1, r3
   25f1c:	add	r5, r5, r3, lsl #2
   25f20:	add	r6, r6, r3
   25f24:	add	r4, r4, #1
   25f28:	add	r8, r8, #4
   25f2c:	b	25ebc <GetDataSlab+0x9fa0>
   25f30:	ldr	r3, [r9, r2, lsl #2]
   25f34:	mov	r5, ip
   25f38:	sub	r3, r3, #1
   25f3c:	str	r3, [r4, r2, lsl #2]
   25f40:	ldr	r3, [lr], #4
   25f44:	mov	r1, lr
   25f48:	str	r3, [ip, #4]
   25f4c:	cmp	r1, fp
   25f50:	bne	25f84 <GetDataSlab+0xa068>
   25f54:	ldr	r3, [sp, #204]	; 0xcc
   25f58:	ldr	r1, [sp, #20]
   25f5c:	add	ip, ip, #4
   25f60:	ldr	r3, [r3, r2, lsl #2]
   25f64:	mul	r3, r3, r1
   25f68:	ldr	r1, [sp, #196]	; 0xc4
   25f6c:	str	r3, [sp, #20]
   25f70:	ldr	r3, [r5]
   25f74:	ldr	r1, [r1, r2, lsl #2]
   25f78:	add	r2, r2, #1
   25f7c:	mla	r6, r1, r3, r6
   25f80:	b	25df4 <GetDataSlab+0x9ed8>
   25f84:	ldr	r7, [r4, r2, lsl #2]
   25f88:	mov	r0, r1
   25f8c:	ldr	r3, [r1, #-4]!
   25f90:	mul	r3, r3, r7
   25f94:	ldr	r7, [ip, #4]
   25f98:	str	r3, [r4, r2, lsl #2]
   25f9c:	ldr	r3, [r0]
   25fa0:	mul	r3, r3, r7
   25fa4:	str	r3, [ip, #4]
   25fa8:	b	25f4c <GetDataSlab+0xa030>
   25fac:	ldr	r3, [r5, r1, lsl #2]
   25fb0:	add	r1, r1, #1
   25fb4:	mov	r2, r3
   25fb8:	mov	r3, #0
   25fbc:	strd	r2, [ip], #8
   25fc0:	b	26020 <GetDataSlab+0xa104>
   25fc4:	cmp	r2, #0
   25fc8:	beq	260ac <GetDataSlab+0xa190>
   25fcc:	ldr	r3, [r8]
   25fd0:	mul	r3, r3, r2
   25fd4:	b	260a4 <GetDataSlab+0xa188>
   25fd8:	add	r3, sp, #152	; 0x98
   25fdc:	add	r3, r3, r4, lsl #2
   25fe0:	ldr	r3, [r3, #-120]	; 0xffffff88
   25fe4:	add	r6, r6, r3
   25fe8:	add	r5, r5, r3, lsl #2
   25fec:	ldr	r3, [sp, #12]
   25ff0:	add	r9, r9, r3
   25ff4:	ldr	r3, [sp, #20]
   25ff8:	cmp	r9, r3
   25ffc:	bge	1c04c <GetDataSlab+0x130>
   26000:	ldr	r3, [sp, #196]	; 0xc4
   26004:	mov	r1, #0
   26008:	ldr	r0, [r3]
   2600c:	ldr	r3, [sp]
   26010:	cmp	r0, #0
   26014:	addne	r5, r5, r0, lsl #2
   26018:	addne	r6, r6, r0
   2601c:	add	ip, r3, r9, lsl #3
   26020:	ldr	r3, [sp, #12]
   26024:	cmp	r1, r3
   26028:	blt	25fac <GetDataSlab+0xa090>
   2602c:	ldr	r3, [sp, #24]
   26030:	ldr	r8, [sp, #4]
   26034:	sub	r3, r3, r0
   26038:	ldr	r4, [sp, #16]
   2603c:	add	r6, r6, r3
   26040:	add	r5, r5, r3, lsl #2
   26044:	ldr	r3, [sp, #208]	; 0xd0
   26048:	cmp	r4, r3
   2604c:	bge	25fec <GetDataSlab+0xa0d0>
   26050:	ldr	r3, [sl, r4, lsl #2]
   26054:	ldr	r2, [sp, #204]	; 0xcc
   26058:	add	r3, r3, #1
   2605c:	str	r3, [sl, r4, lsl #2]
   26060:	mov	r0, r3
   26064:	ldr	r1, [r2, r4, lsl #2]
   26068:	bl	3fd18 <__aeabi_idivmod>
   2606c:	subs	r3, r1, #0
   26070:	bne	25fd8 <GetDataSlab+0xa0bc>
   26074:	ldr	r7, [r8, #4]
   26078:	str	r3, [sl, r4, lsl #2]
   2607c:	mov	r1, r7
   26080:	mov	r0, r6
   26084:	bl	3fd18 <__aeabi_idivmod>
   26088:	ldr	r2, [sp, #196]	; 0xc4
   2608c:	ldr	r2, [r2, r4, lsl #2]
   26090:	subs	r3, r1, #0
   26094:	beq	25fc4 <GetDataSlab+0xa0a8>
   26098:	ldr	r1, [r8]
   2609c:	sub	r3, r7, r3
   260a0:	mla	r3, r2, r1, r3
   260a4:	add	r5, r5, r3, lsl #2
   260a8:	add	r6, r6, r3
   260ac:	add	r4, r4, #1
   260b0:	add	r8, r8, #4
   260b4:	b	26044 <GetDataSlab+0xa128>
   260b8:	ldr	r3, [lr], fp
   260bc:	add	r1, r1, #1
   260c0:	mov	r2, r3
   260c4:	mov	r3, #0
   260c8:	strd	r2, [ip], #8
   260cc:	b	25e88 <GetDataSlab+0x9f6c>
   260d0:	cmp	r2, #0
   260d4:	beq	25f24 <GetDataSlab+0xa008>
   260d8:	ldr	r3, [r8]
   260dc:	mul	r3, r3, r2
   260e0:	b	25f1c <GetDataSlab+0xa000>
   260e4:	add	r3, sp, #152	; 0x98
   260e8:	add	r3, r3, r4, lsl #2
   260ec:	ldr	r3, [r3, #-120]	; 0xffffff88
   260f0:	add	r6, r6, r3
   260f4:	add	r5, r5, r3, lsl #2
   260f8:	ldr	r3, [sp, #12]
   260fc:	add	r9, r9, r3
   26100:	b	25e58 <GetDataSlab+0x9f3c>
   26104:	ldr	r3, [r9]
   26108:	ldr	ip, [sp, #4]
   2610c:	str	r3, [sp, #16]
   26110:	sub	r3, r3, #1
   26114:	str	r3, [sp, #32]
   26118:	ldr	r3, [fp]
   2611c:	mov	lr, fp
   26120:	str	r3, [sp, #24]
   26124:	str	r3, [sp, #112]	; 0x70
   26128:	ldr	r3, [sp, #204]	; 0xcc
   2612c:	mov	r6, #0
   26130:	mov	r2, #1
   26134:	ldr	r3, [r3]
   26138:	str	r3, [sp, #12]
   2613c:	str	r3, [sp, #20]
   26140:	ldr	r3, [sp, #208]	; 0xd0
   26144:	cmp	r2, r3
   26148:	blt	2627c <GetDataSlab+0xa360>
   2614c:	ldr	r3, [sp, #8]
   26150:	add	r5, r3, r6, lsl #1
   26154:	ldr	r3, [sp, #16]
   26158:	cmp	r3, #1
   2615c:	moveq	r9, #0
   26160:	beq	2633c <GetDataSlab+0xa420>
   26164:	ldr	r3, [sp, #16]
   26168:	ldr	r2, [sp, #12]
   2616c:	mov	r9, #0
   26170:	mul	r3, r3, r2
   26174:	ldr	r2, [sp, #24]
   26178:	sub	r3, r2, r3
   2617c:	str	r3, [sp, #24]
   26180:	ldr	r3, [sp, #16]
   26184:	ldr	r2, [sp, #16]
   26188:	lsl	fp, r3, #1
   2618c:	ldr	r3, [sp, #12]
   26190:	bic	r3, r3, r3, asr #31
   26194:	mul	r2, r2, r3
   26198:	mul	r3, fp, r3
   2619c:	str	r2, [sp, #8]
   261a0:	str	r3, [sp, #16]
   261a4:	ldr	r3, [sp, #20]
   261a8:	cmp	r9, r3
   261ac:	bge	1c04c <GetDataSlab+0x130>
   261b0:	ldr	r3, [sp, #196]	; 0xc4
   261b4:	mov	r1, #0
   261b8:	ldr	r0, [r3]
   261bc:	ldr	r3, [sp]
   261c0:	cmp	r0, #0
   261c4:	addne	r5, r5, r0, lsl #1
   261c8:	addne	r6, r6, r0
   261cc:	add	lr, r3, r9, lsl #3
   261d0:	mov	ip, r5
   261d4:	ldr	r3, [sp, #12]
   261d8:	cmp	r1, r3
   261dc:	blt	26404 <GetDataSlab+0xa4e8>
   261e0:	ldr	r3, [sp, #24]
   261e4:	ldr	r8, [sp, #4]
   261e8:	sub	r2, r3, r0
   261ec:	ldr	r3, [sp, #8]
   261f0:	mov	r4, #1
   261f4:	add	r3, r3, r6
   261f8:	add	r6, r3, r2
   261fc:	ldr	r3, [sp, #16]
   26200:	add	r3, r3, r2, lsl #1
   26204:	add	r5, r5, r3
   26208:	ldr	r3, [sp, #208]	; 0xd0
   2620c:	cmp	r4, r3
   26210:	bge	26440 <GetDataSlab+0xa524>
   26214:	ldr	r3, [sl, r4, lsl #2]
   26218:	ldr	r2, [sp, #204]	; 0xcc
   2621c:	add	r3, r3, #1
   26220:	str	r3, [sl, r4, lsl #2]
   26224:	mov	r0, r3
   26228:	ldr	r1, [r2, r4, lsl #2]
   2622c:	bl	3fd18 <__aeabi_idivmod>
   26230:	subs	r3, r1, #0
   26234:	bne	2642c <GetDataSlab+0xa510>
   26238:	ldr	r7, [r8, #4]
   2623c:	str	r3, [sl, r4, lsl #2]
   26240:	mov	r1, r7
   26244:	mov	r0, r6
   26248:	bl	3fd18 <__aeabi_idivmod>
   2624c:	ldr	r2, [sp, #196]	; 0xc4
   26250:	ldr	r2, [r2, r4, lsl #2]
   26254:	subs	r3, r1, #0
   26258:	beq	26418 <GetDataSlab+0xa4fc>
   2625c:	ldr	r1, [r8]
   26260:	sub	r3, r7, r3
   26264:	mla	r3, r2, r1, r3
   26268:	add	r5, r5, r3, lsl #1
   2626c:	add	r6, r6, r3
   26270:	add	r4, r4, #1
   26274:	add	r8, r8, #4
   26278:	b	26208 <GetDataSlab+0xa2ec>
   2627c:	ldr	r3, [r9, r2, lsl #2]
   26280:	mov	r5, ip
   26284:	sub	r3, r3, #1
   26288:	str	r3, [r4, r2, lsl #2]
   2628c:	ldr	r3, [lr], #4
   26290:	mov	r1, lr
   26294:	str	r3, [ip, #4]
   26298:	cmp	r1, fp
   2629c:	bne	262d0 <GetDataSlab+0xa3b4>
   262a0:	ldr	r3, [sp, #204]	; 0xcc
   262a4:	ldr	r1, [sp, #20]
   262a8:	add	ip, ip, #4
   262ac:	ldr	r3, [r3, r2, lsl #2]
   262b0:	mul	r3, r3, r1
   262b4:	ldr	r1, [sp, #196]	; 0xc4
   262b8:	str	r3, [sp, #20]
   262bc:	ldr	r3, [r5]
   262c0:	ldr	r1, [r1, r2, lsl #2]
   262c4:	add	r2, r2, #1
   262c8:	mla	r6, r1, r3, r6
   262cc:	b	26140 <GetDataSlab+0xa224>
   262d0:	ldr	r7, [r4, r2, lsl #2]
   262d4:	mov	r0, r1
   262d8:	ldr	r3, [r1, #-4]!
   262dc:	mul	r3, r3, r7
   262e0:	ldr	r7, [ip, #4]
   262e4:	str	r3, [r4, r2, lsl #2]
   262e8:	ldr	r3, [r0]
   262ec:	mul	r3, r3, r7
   262f0:	str	r3, [ip, #4]
   262f4:	b	26298 <GetDataSlab+0xa37c>
   262f8:	ldrsh	r2, [lr, #2]!
   262fc:	add	r0, r0, #1
   26300:	asr	r3, r2, #31
   26304:	strd	r2, [ip], #8
   26308:	b	2636c <GetDataSlab+0xa450>
   2630c:	cmp	r2, #0
   26310:	beq	263f8 <GetDataSlab+0xa4dc>
   26314:	ldr	r3, [r8]
   26318:	mul	r3, r3, r2
   2631c:	b	263f0 <GetDataSlab+0xa4d4>
   26320:	add	r3, sp, #152	; 0x98
   26324:	add	r3, r3, r4, lsl #2
   26328:	ldr	r3, [r3, #-120]	; 0xffffff88
   2632c:	add	r6, r6, r3
   26330:	add	r5, r5, r3, lsl #1
   26334:	ldr	r3, [sp, #12]
   26338:	add	r9, r9, r3
   2633c:	ldr	r3, [sp, #20]
   26340:	cmp	r9, r3
   26344:	bge	1c04c <GetDataSlab+0x130>
   26348:	ldr	r3, [sp, #196]	; 0xc4
   2634c:	mov	r0, #0
   26350:	ldr	r1, [r3]
   26354:	ldr	r3, [sp]
   26358:	cmp	r1, #0
   2635c:	addne	r5, r5, r1, lsl #1
   26360:	addne	r6, r6, r1
   26364:	sub	lr, r5, #2
   26368:	add	ip, r3, r9, lsl #3
   2636c:	ldr	r3, [sp, #12]
   26370:	cmp	r0, r3
   26374:	blt	262f8 <GetDataSlab+0xa3dc>
   26378:	ldr	r3, [sp, #24]
   2637c:	ldr	r8, [sp, #4]
   26380:	sub	r3, r3, r1
   26384:	ldr	r4, [sp, #16]
   26388:	add	r6, r6, r3
   2638c:	add	r5, r5, r3, lsl #1
   26390:	ldr	r3, [sp, #208]	; 0xd0
   26394:	cmp	r4, r3
   26398:	bge	26334 <GetDataSlab+0xa418>
   2639c:	ldr	r3, [sl, r4, lsl #2]
   263a0:	ldr	r2, [sp, #204]	; 0xcc
   263a4:	add	r3, r3, #1
   263a8:	str	r3, [sl, r4, lsl #2]
   263ac:	mov	r0, r3
   263b0:	ldr	r1, [r2, r4, lsl #2]
   263b4:	bl	3fd18 <__aeabi_idivmod>
   263b8:	subs	r3, r1, #0
   263bc:	bne	26320 <GetDataSlab+0xa404>
   263c0:	ldr	r7, [r8, #4]
   263c4:	str	r3, [sl, r4, lsl #2]
   263c8:	mov	r1, r7
   263cc:	mov	r0, r6
   263d0:	bl	3fd18 <__aeabi_idivmod>
   263d4:	ldr	r2, [sp, #196]	; 0xc4
   263d8:	ldr	r2, [r2, r4, lsl #2]
   263dc:	subs	r3, r1, #0
   263e0:	beq	2630c <GetDataSlab+0xa3f0>
   263e4:	ldr	r1, [r8]
   263e8:	sub	r3, r7, r3
   263ec:	mla	r3, r2, r1, r3
   263f0:	add	r5, r5, r3, lsl #1
   263f4:	add	r6, r6, r3
   263f8:	add	r4, r4, #1
   263fc:	add	r8, r8, #4
   26400:	b	26390 <GetDataSlab+0xa474>
   26404:	ldrsh	r2, [ip], fp
   26408:	add	r1, r1, #1
   2640c:	asr	r3, r2, #31
   26410:	strd	r2, [lr], #8
   26414:	b	261d4 <GetDataSlab+0xa2b8>
   26418:	cmp	r2, #0
   2641c:	beq	26270 <GetDataSlab+0xa354>
   26420:	ldr	r3, [r8]
   26424:	mul	r3, r3, r2
   26428:	b	26268 <GetDataSlab+0xa34c>
   2642c:	add	r3, sp, #152	; 0x98
   26430:	add	r3, r3, r4, lsl #2
   26434:	ldr	r3, [r3, #-120]	; 0xffffff88
   26438:	add	r6, r6, r3
   2643c:	add	r5, r5, r3, lsl #1
   26440:	ldr	r3, [sp, #12]
   26444:	add	r9, r9, r3
   26448:	b	261a4 <GetDataSlab+0xa288>
   2644c:	ldr	r3, [r9]
   26450:	ldr	ip, [sp, #4]
   26454:	str	r3, [sp, #16]
   26458:	sub	r3, r3, #1
   2645c:	str	r3, [sp, #32]
   26460:	ldr	r3, [fp]
   26464:	mov	lr, fp
   26468:	str	r3, [sp, #24]
   2646c:	str	r3, [sp, #112]	; 0x70
   26470:	ldr	r3, [sp, #204]	; 0xcc
   26474:	mov	r6, #0
   26478:	mov	r2, #1
   2647c:	ldr	r3, [r3]
   26480:	str	r3, [sp, #12]
   26484:	str	r3, [sp, #20]
   26488:	ldr	r3, [sp, #208]	; 0xd0
   2648c:	cmp	r2, r3
   26490:	blt	265c4 <GetDataSlab+0xa6a8>
   26494:	ldr	r3, [sp, #8]
   26498:	add	r5, r3, r6, lsl #1
   2649c:	ldr	r3, [sp, #16]
   264a0:	cmp	r3, #1
   264a4:	moveq	r9, #0
   264a8:	beq	26684 <GetDataSlab+0xa768>
   264ac:	ldr	r3, [sp, #16]
   264b0:	ldr	r2, [sp, #12]
   264b4:	mov	r9, #0
   264b8:	mul	r3, r3, r2
   264bc:	ldr	r2, [sp, #24]
   264c0:	sub	r3, r2, r3
   264c4:	str	r3, [sp, #8]
   264c8:	ldr	r3, [sp, #16]
   264cc:	ldr	r2, [sp, #16]
   264d0:	lsl	fp, r3, #1
   264d4:	ldr	r3, [sp, #12]
   264d8:	bic	r3, r3, r3, asr #31
   264dc:	mul	r2, r2, r3
   264e0:	mul	r3, fp, r3
   264e4:	str	r2, [sp, #24]
   264e8:	str	r3, [sp, #16]
   264ec:	ldr	r3, [sp, #20]
   264f0:	cmp	r9, r3
   264f4:	bge	1c04c <GetDataSlab+0x130>
   264f8:	ldr	r3, [sp, #196]	; 0xc4
   264fc:	mov	r1, #0
   26500:	ldr	r0, [r3]
   26504:	ldr	r3, [sp]
   26508:	cmp	r0, #0
   2650c:	addne	r5, r5, r0, lsl #1
   26510:	addne	r6, r6, r0
   26514:	add	lr, r3, r9, lsl #3
   26518:	mov	ip, r5
   2651c:	ldr	r3, [sp, #12]
   26520:	cmp	r1, r3
   26524:	blt	2674c <GetDataSlab+0xa830>
   26528:	ldr	r3, [sp, #8]
   2652c:	ldr	r8, [sp, #4]
   26530:	sub	r2, r3, r0
   26534:	ldr	r3, [sp, #24]
   26538:	mov	r4, #1
   2653c:	add	r3, r3, r6
   26540:	add	r6, r3, r2
   26544:	ldr	r3, [sp, #16]
   26548:	add	r3, r3, r2, lsl #1
   2654c:	add	r5, r5, r3
   26550:	ldr	r3, [sp, #208]	; 0xd0
   26554:	cmp	r4, r3
   26558:	bge	26788 <GetDataSlab+0xa86c>
   2655c:	ldr	r3, [sl, r4, lsl #2]
   26560:	ldr	r2, [sp, #204]	; 0xcc
   26564:	add	r3, r3, #1
   26568:	str	r3, [sl, r4, lsl #2]
   2656c:	mov	r0, r3
   26570:	ldr	r1, [r2, r4, lsl #2]
   26574:	bl	3fd18 <__aeabi_idivmod>
   26578:	subs	r3, r1, #0
   2657c:	bne	26774 <GetDataSlab+0xa858>
   26580:	ldr	r7, [r8, #4]
   26584:	str	r3, [sl, r4, lsl #2]
   26588:	mov	r1, r7
   2658c:	mov	r0, r6
   26590:	bl	3fd18 <__aeabi_idivmod>
   26594:	ldr	r2, [sp, #196]	; 0xc4
   26598:	ldr	r2, [r2, r4, lsl #2]
   2659c:	subs	r3, r1, #0
   265a0:	beq	26760 <GetDataSlab+0xa844>
   265a4:	ldr	r1, [r8]
   265a8:	sub	r3, r7, r3
   265ac:	mla	r3, r2, r1, r3
   265b0:	add	r5, r5, r3, lsl #1
   265b4:	add	r6, r6, r3
   265b8:	add	r4, r4, #1
   265bc:	add	r8, r8, #4
   265c0:	b	26550 <GetDataSlab+0xa634>
   265c4:	ldr	r3, [r9, r2, lsl #2]
   265c8:	mov	r5, ip
   265cc:	sub	r3, r3, #1
   265d0:	str	r3, [r4, r2, lsl #2]
   265d4:	ldr	r3, [lr], #4
   265d8:	mov	r1, lr
   265dc:	str	r3, [ip, #4]
   265e0:	cmp	r1, fp
   265e4:	bne	26618 <GetDataSlab+0xa6fc>
   265e8:	ldr	r3, [sp, #204]	; 0xcc
   265ec:	ldr	r1, [sp, #20]
   265f0:	add	ip, ip, #4
   265f4:	ldr	r3, [r3, r2, lsl #2]
   265f8:	mul	r3, r3, r1
   265fc:	ldr	r1, [sp, #196]	; 0xc4
   26600:	str	r3, [sp, #20]
   26604:	ldr	r3, [r5]
   26608:	ldr	r1, [r1, r2, lsl #2]
   2660c:	add	r2, r2, #1
   26610:	mla	r6, r1, r3, r6
   26614:	b	26488 <GetDataSlab+0xa56c>
   26618:	ldr	r7, [r4, r2, lsl #2]
   2661c:	mov	r0, r1
   26620:	ldr	r3, [r1, #-4]!
   26624:	mul	r3, r3, r7
   26628:	ldr	r7, [ip, #4]
   2662c:	str	r3, [r4, r2, lsl #2]
   26630:	ldr	r3, [r0]
   26634:	mul	r3, r3, r7
   26638:	str	r3, [ip, #4]
   2663c:	b	265e0 <GetDataSlab+0xa6c4>
   26640:	ldrh	r2, [lr, #2]!
   26644:	mov	r3, #0
   26648:	add	r0, r0, #1
   2664c:	strd	r2, [ip], #8
   26650:	b	266b4 <GetDataSlab+0xa798>
   26654:	cmp	r2, #0
   26658:	beq	26740 <GetDataSlab+0xa824>
   2665c:	ldr	r3, [r8]
   26660:	mul	r3, r3, r2
   26664:	b	26738 <GetDataSlab+0xa81c>
   26668:	add	r3, sp, #152	; 0x98
   2666c:	add	r3, r3, r4, lsl #2
   26670:	ldr	r3, [r3, #-120]	; 0xffffff88
   26674:	add	r6, r6, r3
   26678:	add	r5, r5, r3, lsl #1
   2667c:	ldr	r3, [sp, #12]
   26680:	add	r9, r9, r3
   26684:	ldr	r3, [sp, #20]
   26688:	cmp	r9, r3
   2668c:	bge	1c04c <GetDataSlab+0x130>
   26690:	ldr	r3, [sp, #196]	; 0xc4
   26694:	mov	r0, #0
   26698:	ldr	r1, [r3]
   2669c:	ldr	r3, [sp]
   266a0:	cmp	r1, #0
   266a4:	addne	r5, r5, r1, lsl #1
   266a8:	addne	r6, r6, r1
   266ac:	sub	lr, r5, #2
   266b0:	add	ip, r3, r9, lsl #3
   266b4:	ldr	r3, [sp, #12]
   266b8:	cmp	r0, r3
   266bc:	blt	26640 <GetDataSlab+0xa724>
   266c0:	ldr	r3, [sp, #24]
   266c4:	ldr	r8, [sp, #4]
   266c8:	sub	r3, r3, r1
   266cc:	ldr	r4, [sp, #16]
   266d0:	add	r6, r6, r3
   266d4:	add	r5, r5, r3, lsl #1
   266d8:	ldr	r3, [sp, #208]	; 0xd0
   266dc:	cmp	r4, r3
   266e0:	bge	2667c <GetDataSlab+0xa760>
   266e4:	ldr	r3, [sl, r4, lsl #2]
   266e8:	ldr	r2, [sp, #204]	; 0xcc
   266ec:	add	r3, r3, #1
   266f0:	str	r3, [sl, r4, lsl #2]
   266f4:	mov	r0, r3
   266f8:	ldr	r1, [r2, r4, lsl #2]
   266fc:	bl	3fd18 <__aeabi_idivmod>
   26700:	subs	r3, r1, #0
   26704:	bne	26668 <GetDataSlab+0xa74c>
   26708:	ldr	r7, [r8, #4]
   2670c:	str	r3, [sl, r4, lsl #2]
   26710:	mov	r1, r7
   26714:	mov	r0, r6
   26718:	bl	3fd18 <__aeabi_idivmod>
   2671c:	ldr	r2, [sp, #196]	; 0xc4
   26720:	ldr	r2, [r2, r4, lsl #2]
   26724:	subs	r3, r1, #0
   26728:	beq	26654 <GetDataSlab+0xa738>
   2672c:	ldr	r1, [r8]
   26730:	sub	r3, r7, r3
   26734:	mla	r3, r2, r1, r3
   26738:	add	r5, r5, r3, lsl #1
   2673c:	add	r6, r6, r3
   26740:	add	r4, r4, #1
   26744:	add	r8, r8, #4
   26748:	b	266d8 <GetDataSlab+0xa7bc>
   2674c:	ldrh	r2, [ip], fp
   26750:	mov	r3, #0
   26754:	add	r1, r1, #1
   26758:	strd	r2, [lr], #8
   2675c:	b	2651c <GetDataSlab+0xa600>
   26760:	cmp	r2, #0
   26764:	beq	265b8 <GetDataSlab+0xa69c>
   26768:	ldr	r3, [r8]
   2676c:	mul	r3, r3, r2
   26770:	b	265b0 <GetDataSlab+0xa694>
   26774:	add	r3, sp, #152	; 0x98
   26778:	add	r3, r3, r4, lsl #2
   2677c:	ldr	r3, [r3, #-120]	; 0xffffff88
   26780:	add	r6, r6, r3
   26784:	add	r5, r5, r3, lsl #1
   26788:	ldr	r3, [sp, #12]
   2678c:	add	r9, r9, r3
   26790:	b	264ec <GetDataSlab+0xa5d0>
   26794:	ldr	r3, [r9]
   26798:	ldr	ip, [sp, #4]
   2679c:	str	r3, [sp, #12]
   267a0:	sub	r3, r3, #1
   267a4:	str	r3, [sp, #32]
   267a8:	ldr	r3, [fp]
   267ac:	mov	lr, fp
   267b0:	str	r3, [sp, #24]
   267b4:	str	r3, [sp, #112]	; 0x70
   267b8:	ldr	r3, [sp, #204]	; 0xcc
   267bc:	mov	r6, #0
   267c0:	mov	r2, #1
   267c4:	ldr	r3, [r3]
   267c8:	str	r3, [sp, #16]
   267cc:	str	r3, [sp, #20]
   267d0:	ldr	r3, [sp, #208]	; 0xd0
   267d4:	cmp	r2, r3
   267d8:	blt	26900 <GetDataSlab+0xa9e4>
   267dc:	ldr	r3, [sp, #8]
   267e0:	add	r5, r3, r6
   267e4:	ldr	r3, [sp, #12]
   267e8:	cmp	r3, #1
   267ec:	moveq	r9, #0
   267f0:	beq	269bc <GetDataSlab+0xaaa0>
   267f4:	ldr	r2, [sp, #16]
   267f8:	ldr	r3, [sp, #12]
   267fc:	mov	r9, #0
   26800:	mul	r3, r3, r2
   26804:	ldr	r2, [sp, #24]
   26808:	sub	r3, r2, r3
   2680c:	str	r3, [sp, #8]
   26810:	ldr	r3, [sp, #16]
   26814:	ldr	r2, [sp, #12]
   26818:	bic	r3, r3, r3, asr #31
   2681c:	mul	fp, r2, r3
   26820:	rsb	r3, r2, #0
   26824:	str	r3, [sp, #24]
   26828:	ldr	r3, [sp, #20]
   2682c:	cmp	r9, r3
   26830:	bge	1c04c <GetDataSlab+0x130>
   26834:	ldr	r3, [sp, #196]	; 0xc4
   26838:	mov	r1, #0
   2683c:	ldr	ip, [r3]
   26840:	ldr	r3, [sp]
   26844:	cmp	ip, #0
   26848:	addne	r5, r5, ip
   2684c:	addne	r6, r6, ip
   26850:	mov	r0, r5
   26854:	add	lr, r3, r9, lsl #3
   26858:	ldr	r3, [sp, #12]
   2685c:	add	r0, r0, r3
   26860:	ldr	r3, [sp, #16]
   26864:	cmp	r1, r3
   26868:	blt	26a84 <GetDataSlab+0xab68>
   2686c:	ldr	r3, [sp, #8]
   26870:	ldr	r8, [sp, #4]
   26874:	sub	r2, r3, ip
   26878:	add	r3, fp, r6
   2687c:	add	r6, r3, r2
   26880:	add	r3, fp, r2
   26884:	add	r5, r5, r3
   26888:	mov	r4, #1
   2688c:	ldr	r3, [sp, #208]	; 0xd0
   26890:	cmp	r4, r3
   26894:	bge	26ac4 <GetDataSlab+0xaba8>
   26898:	ldr	r3, [sl, r4, lsl #2]
   2689c:	ldr	r2, [sp, #204]	; 0xcc
   268a0:	add	r3, r3, #1
   268a4:	str	r3, [sl, r4, lsl #2]
   268a8:	mov	r0, r3
   268ac:	ldr	r1, [r2, r4, lsl #2]
   268b0:	bl	3fd18 <__aeabi_idivmod>
   268b4:	subs	r3, r1, #0
   268b8:	bne	26ab0 <GetDataSlab+0xab94>
   268bc:	ldr	r7, [r8, #4]
   268c0:	str	r3, [sl, r4, lsl #2]
   268c4:	mov	r1, r7
   268c8:	mov	r0, r6
   268cc:	bl	3fd18 <__aeabi_idivmod>
   268d0:	ldr	r2, [sp, #196]	; 0xc4
   268d4:	ldr	r2, [r2, r4, lsl #2]
   268d8:	subs	r3, r1, #0
   268dc:	beq	26a9c <GetDataSlab+0xab80>
   268e0:	ldr	r1, [r8]
   268e4:	sub	r3, r7, r3
   268e8:	mla	r3, r2, r1, r3
   268ec:	add	r5, r5, r3
   268f0:	add	r6, r6, r3
   268f4:	add	r4, r4, #1
   268f8:	add	r8, r8, #4
   268fc:	b	2688c <GetDataSlab+0xa970>
   26900:	ldr	r3, [r9, r2, lsl #2]
   26904:	mov	r5, ip
   26908:	sub	r3, r3, #1
   2690c:	str	r3, [r4, r2, lsl #2]
   26910:	ldr	r3, [lr], #4
   26914:	mov	r1, lr
   26918:	str	r3, [ip, #4]
   2691c:	cmp	r1, fp
   26920:	bne	26954 <GetDataSlab+0xaa38>
   26924:	ldr	r3, [sp, #204]	; 0xcc
   26928:	ldr	r1, [sp, #20]
   2692c:	add	ip, ip, #4
   26930:	ldr	r3, [r3, r2, lsl #2]
   26934:	mul	r3, r3, r1
   26938:	ldr	r1, [sp, #196]	; 0xc4
   2693c:	str	r3, [sp, #20]
   26940:	ldr	r3, [r5]
   26944:	ldr	r1, [r1, r2, lsl #2]
   26948:	add	r2, r2, #1
   2694c:	mla	r6, r1, r3, r6
   26950:	b	267d0 <GetDataSlab+0xa8b4>
   26954:	ldr	r7, [r4, r2, lsl #2]
   26958:	mov	r0, r1
   2695c:	ldr	r3, [r1, #-4]!
   26960:	mul	r3, r3, r7
   26964:	ldr	r7, [ip, #4]
   26968:	str	r3, [r4, r2, lsl #2]
   2696c:	ldr	r3, [r0]
   26970:	mul	r3, r3, r7
   26974:	str	r3, [ip, #4]
   26978:	b	2691c <GetDataSlab+0xaa00>
   2697c:	ldrsb	r2, [r0], #1
   26980:	asr	r3, r2, #31
   26984:	strd	r2, [ip], #8
   26988:	b	269e8 <GetDataSlab+0xaacc>
   2698c:	cmp	r2, #0
   26990:	beq	26a78 <GetDataSlab+0xab5c>
   26994:	ldr	r3, [r8]
   26998:	mul	r3, r3, r2
   2699c:	b	26a70 <GetDataSlab+0xab54>
   269a0:	add	r3, sp, #152	; 0x98
   269a4:	add	r3, r3, r4, lsl #2
   269a8:	ldr	r3, [r3, #-120]	; 0xffffff88
   269ac:	add	r6, r6, r3
   269b0:	add	r5, r5, r3
   269b4:	ldr	r3, [sp, #16]
   269b8:	add	r9, r9, r3
   269bc:	ldr	r3, [sp, #20]
   269c0:	cmp	r9, r3
   269c4:	bge	1c04c <GetDataSlab+0x130>
   269c8:	ldr	r3, [sp, #196]	; 0xc4
   269cc:	ldr	r1, [r3]
   269d0:	ldr	r3, [sp]
   269d4:	cmp	r1, #0
   269d8:	addne	r5, r5, r1
   269dc:	addne	r6, r6, r1
   269e0:	add	ip, r3, r9, lsl #3
   269e4:	mov	r0, r5
   269e8:	ldr	r2, [sp, #16]
   269ec:	sub	r3, r0, r5
   269f0:	cmp	r2, r3
   269f4:	bgt	2697c <GetDataSlab+0xaa60>
   269f8:	ldr	r3, [sp, #24]
   269fc:	ldr	r8, [sp, #4]
   26a00:	sub	r3, r3, r1
   26a04:	ldr	r4, [sp, #12]
   26a08:	add	r6, r6, r3
   26a0c:	add	r5, r5, r3
   26a10:	ldr	r3, [sp, #208]	; 0xd0
   26a14:	cmp	r4, r3
   26a18:	bge	269b4 <GetDataSlab+0xaa98>
   26a1c:	ldr	r3, [sl, r4, lsl #2]
   26a20:	ldr	r2, [sp, #204]	; 0xcc
   26a24:	add	r3, r3, #1
   26a28:	str	r3, [sl, r4, lsl #2]
   26a2c:	mov	r0, r3
   26a30:	ldr	r1, [r2, r4, lsl #2]
   26a34:	bl	3fd18 <__aeabi_idivmod>
   26a38:	subs	r3, r1, #0
   26a3c:	bne	269a0 <GetDataSlab+0xaa84>
   26a40:	ldr	r7, [r8, #4]
   26a44:	str	r3, [sl, r4, lsl #2]
   26a48:	mov	r1, r7
   26a4c:	mov	r0, r6
   26a50:	bl	3fd18 <__aeabi_idivmod>
   26a54:	ldr	r2, [sp, #196]	; 0xc4
   26a58:	ldr	r2, [r2, r4, lsl #2]
   26a5c:	subs	r3, r1, #0
   26a60:	beq	2698c <GetDataSlab+0xaa70>
   26a64:	ldr	r1, [r8]
   26a68:	sub	r3, r7, r3
   26a6c:	mla	r3, r2, r1, r3
   26a70:	add	r5, r5, r3
   26a74:	add	r6, r6, r3
   26a78:	add	r4, r4, #1
   26a7c:	add	r8, r8, #4
   26a80:	b	26a10 <GetDataSlab+0xaaf4>
   26a84:	ldr	r3, [sp, #24]
   26a88:	add	r1, r1, #1
   26a8c:	ldrsb	r2, [r0, r3]
   26a90:	asr	r3, r2, #31
   26a94:	strd	r2, [lr], #8
   26a98:	b	26858 <GetDataSlab+0xa93c>
   26a9c:	cmp	r2, #0
   26aa0:	beq	268f4 <GetDataSlab+0xa9d8>
   26aa4:	ldr	r3, [r8]
   26aa8:	mul	r3, r3, r2
   26aac:	b	268ec <GetDataSlab+0xa9d0>
   26ab0:	add	r3, sp, #152	; 0x98
   26ab4:	add	r3, r3, r4, lsl #2
   26ab8:	ldr	r3, [r3, #-120]	; 0xffffff88
   26abc:	add	r6, r6, r3
   26ac0:	add	r5, r5, r3
   26ac4:	ldr	r3, [sp, #16]
   26ac8:	add	r9, r9, r3
   26acc:	b	26828 <GetDataSlab+0xa90c>
   26ad0:	ldr	r3, [r9]
   26ad4:	ldr	ip, [sp, #4]
   26ad8:	str	r3, [sp, #12]
   26adc:	sub	r3, r3, #1
   26ae0:	str	r3, [sp, #32]
   26ae4:	ldr	r3, [fp]
   26ae8:	mov	lr, fp
   26aec:	str	r3, [sp, #24]
   26af0:	str	r3, [sp, #112]	; 0x70
   26af4:	ldr	r3, [sp, #204]	; 0xcc
   26af8:	mov	r6, #0
   26afc:	mov	r2, #1
   26b00:	ldr	r3, [r3]
   26b04:	str	r3, [sp, #16]
   26b08:	str	r3, [sp, #20]
   26b0c:	ldr	r3, [sp, #208]	; 0xd0
   26b10:	cmp	r2, r3
   26b14:	blt	26c3c <GetDataSlab+0xad20>
   26b18:	ldr	r3, [sp, #8]
   26b1c:	add	r5, r3, r6
   26b20:	ldr	r3, [sp, #12]
   26b24:	cmp	r3, #1
   26b28:	moveq	r9, #0
   26b2c:	beq	26cf8 <GetDataSlab+0xaddc>
   26b30:	ldr	r2, [sp, #16]
   26b34:	ldr	r3, [sp, #12]
   26b38:	mov	r9, #0
   26b3c:	mul	r3, r3, r2
   26b40:	ldr	r2, [sp, #24]
   26b44:	sub	r3, r2, r3
   26b48:	str	r3, [sp, #8]
   26b4c:	ldr	r3, [sp, #16]
   26b50:	ldr	r2, [sp, #12]
   26b54:	bic	r3, r3, r3, asr #31
   26b58:	mul	fp, r2, r3
   26b5c:	rsb	r3, r2, #0
   26b60:	str	r3, [sp, #24]
   26b64:	ldr	r3, [sp, #20]
   26b68:	cmp	r9, r3
   26b6c:	bge	1c04c <GetDataSlab+0x130>
   26b70:	ldr	r3, [sp, #196]	; 0xc4
   26b74:	mov	r1, #0
   26b78:	ldr	ip, [r3]
   26b7c:	ldr	r3, [sp]
   26b80:	cmp	ip, #0
   26b84:	addne	r5, r5, ip
   26b88:	addne	r6, r6, ip
   26b8c:	mov	r0, r5
   26b90:	add	lr, r3, r9, lsl #3
   26b94:	ldr	r3, [sp, #12]
   26b98:	add	r0, r0, r3
   26b9c:	ldr	r3, [sp, #16]
   26ba0:	cmp	r1, r3
   26ba4:	blt	26dc0 <GetDataSlab+0xaea4>
   26ba8:	ldr	r3, [sp, #8]
   26bac:	ldr	r8, [sp, #4]
   26bb0:	sub	r2, r3, ip
   26bb4:	add	r3, fp, r6
   26bb8:	add	r6, r3, r2
   26bbc:	add	r3, r2, fp
   26bc0:	add	r5, r5, r3
   26bc4:	mov	r4, #1
   26bc8:	ldr	r3, [sp, #208]	; 0xd0
   26bcc:	cmp	r4, r3
   26bd0:	bge	26e00 <GetDataSlab+0xaee4>
   26bd4:	ldr	r3, [sl, r4, lsl #2]
   26bd8:	ldr	r2, [sp, #204]	; 0xcc
   26bdc:	add	r3, r3, #1
   26be0:	str	r3, [sl, r4, lsl #2]
   26be4:	mov	r0, r3
   26be8:	ldr	r1, [r2, r4, lsl #2]
   26bec:	bl	3fd18 <__aeabi_idivmod>
   26bf0:	subs	r3, r1, #0
   26bf4:	bne	26dec <GetDataSlab+0xaed0>
   26bf8:	ldr	r7, [r8, #4]
   26bfc:	str	r3, [sl, r4, lsl #2]
   26c00:	mov	r1, r7
   26c04:	mov	r0, r6
   26c08:	bl	3fd18 <__aeabi_idivmod>
   26c0c:	ldr	r2, [sp, #196]	; 0xc4
   26c10:	ldr	r2, [r2, r4, lsl #2]
   26c14:	subs	r3, r1, #0
   26c18:	beq	26dd8 <GetDataSlab+0xaebc>
   26c1c:	ldr	r1, [r8]
   26c20:	sub	r3, r7, r3
   26c24:	mla	r3, r2, r1, r3
   26c28:	add	r5, r5, r3
   26c2c:	add	r6, r6, r3
   26c30:	add	r4, r4, #1
   26c34:	add	r8, r8, #4
   26c38:	b	26bc8 <GetDataSlab+0xacac>
   26c3c:	ldr	r3, [r9, r2, lsl #2]
   26c40:	mov	r5, ip
   26c44:	sub	r3, r3, #1
   26c48:	str	r3, [r4, r2, lsl #2]
   26c4c:	ldr	r3, [lr], #4
   26c50:	mov	r1, lr
   26c54:	str	r3, [ip, #4]
   26c58:	cmp	r1, fp
   26c5c:	bne	26c90 <GetDataSlab+0xad74>
   26c60:	ldr	r3, [sp, #204]	; 0xcc
   26c64:	ldr	r1, [sp, #20]
   26c68:	add	ip, ip, #4
   26c6c:	ldr	r3, [r3, r2, lsl #2]
   26c70:	mul	r3, r3, r1
   26c74:	ldr	r1, [sp, #196]	; 0xc4
   26c78:	str	r3, [sp, #20]
   26c7c:	ldr	r3, [r5]
   26c80:	ldr	r1, [r1, r2, lsl #2]
   26c84:	add	r2, r2, #1
   26c88:	mla	r6, r1, r3, r6
   26c8c:	b	26b0c <GetDataSlab+0xabf0>
   26c90:	ldr	r7, [r4, r2, lsl #2]
   26c94:	mov	r0, r1
   26c98:	ldr	r3, [r1, #-4]!
   26c9c:	mul	r3, r3, r7
   26ca0:	ldr	r7, [ip, #4]
   26ca4:	str	r3, [r4, r2, lsl #2]
   26ca8:	ldr	r3, [r0]
   26cac:	mul	r3, r3, r7
   26cb0:	str	r3, [ip, #4]
   26cb4:	b	26c58 <GetDataSlab+0xad3c>
   26cb8:	ldrb	r2, [r0], #1
   26cbc:	mov	r3, #0
   26cc0:	strd	r2, [ip], #8
   26cc4:	b	26d24 <GetDataSlab+0xae08>
   26cc8:	cmp	r2, #0
   26ccc:	beq	26db4 <GetDataSlab+0xae98>
   26cd0:	ldr	r3, [r8]
   26cd4:	mul	r3, r3, r2
   26cd8:	b	26dac <GetDataSlab+0xae90>
   26cdc:	add	r3, sp, #152	; 0x98
   26ce0:	add	r3, r3, r4, lsl #2
   26ce4:	ldr	r3, [r3, #-120]	; 0xffffff88
   26ce8:	add	r6, r6, r3
   26cec:	add	r5, r5, r3
   26cf0:	ldr	r3, [sp, #16]
   26cf4:	add	r9, r9, r3
   26cf8:	ldr	r3, [sp, #20]
   26cfc:	cmp	r9, r3
   26d00:	bge	1c04c <GetDataSlab+0x130>
   26d04:	ldr	r3, [sp, #196]	; 0xc4
   26d08:	ldr	r1, [r3]
   26d0c:	ldr	r3, [sp]
   26d10:	cmp	r1, #0
   26d14:	addne	r5, r5, r1
   26d18:	addne	r6, r6, r1
   26d1c:	add	ip, r3, r9, lsl #3
   26d20:	mov	r0, r5
   26d24:	ldr	r2, [sp, #16]
   26d28:	sub	r3, r0, r5
   26d2c:	cmp	r2, r3
   26d30:	bgt	26cb8 <GetDataSlab+0xad9c>
   26d34:	ldr	r3, [sp, #24]
   26d38:	ldr	r8, [sp, #4]
   26d3c:	sub	r3, r3, r1
   26d40:	ldr	r4, [sp, #12]
   26d44:	add	r6, r6, r3
   26d48:	add	r5, r5, r3
   26d4c:	ldr	r3, [sp, #208]	; 0xd0
   26d50:	cmp	r4, r3
   26d54:	bge	26cf0 <GetDataSlab+0xadd4>
   26d58:	ldr	r3, [sl, r4, lsl #2]
   26d5c:	ldr	r2, [sp, #204]	; 0xcc
   26d60:	add	r3, r3, #1
   26d64:	str	r3, [sl, r4, lsl #2]
   26d68:	mov	r0, r3
   26d6c:	ldr	r1, [r2, r4, lsl #2]
   26d70:	bl	3fd18 <__aeabi_idivmod>
   26d74:	subs	r3, r1, #0
   26d78:	bne	26cdc <GetDataSlab+0xadc0>
   26d7c:	ldr	r7, [r8, #4]
   26d80:	str	r3, [sl, r4, lsl #2]
   26d84:	mov	r1, r7
   26d88:	mov	r0, r6
   26d8c:	bl	3fd18 <__aeabi_idivmod>
   26d90:	ldr	r2, [sp, #196]	; 0xc4
   26d94:	ldr	r2, [r2, r4, lsl #2]
   26d98:	subs	r3, r1, #0
   26d9c:	beq	26cc8 <GetDataSlab+0xadac>
   26da0:	ldr	r1, [r8]
   26da4:	sub	r3, r7, r3
   26da8:	mla	r3, r2, r1, r3
   26dac:	add	r5, r5, r3
   26db0:	add	r6, r6, r3
   26db4:	add	r4, r4, #1
   26db8:	add	r8, r8, #4
   26dbc:	b	26d4c <GetDataSlab+0xae30>
   26dc0:	ldr	r3, [sp, #24]
   26dc4:	add	r1, r1, #1
   26dc8:	ldrb	r2, [r0, r3]
   26dcc:	mov	r3, #0
   26dd0:	strd	r2, [lr], #8
   26dd4:	b	26b94 <GetDataSlab+0xac78>
   26dd8:	cmp	r2, #0
   26ddc:	beq	26c30 <GetDataSlab+0xad14>
   26de0:	ldr	r3, [r8]
   26de4:	mul	r3, r3, r2
   26de8:	b	26c28 <GetDataSlab+0xad0c>
   26dec:	add	r3, sp, #152	; 0x98
   26df0:	add	r3, r3, r4, lsl #2
   26df4:	ldr	r3, [r3, #-120]	; 0xffffff88
   26df8:	add	r6, r6, r3
   26dfc:	add	r5, r5, r3
   26e00:	ldr	r3, [sp, #16]
   26e04:	add	r9, r9, r3
   26e08:	b	26b64 <GetDataSlab+0xac48>
   26e0c:	cmp	r5, #12
   26e10:	bne	27168 <GetDataSlab+0xb24c>
   26e14:	ldr	r3, [r9]
   26e18:	ldr	ip, [sp, #4]
   26e1c:	str	r3, [sp, #16]
   26e20:	sub	r3, r3, #1
   26e24:	str	r3, [sp, #32]
   26e28:	ldr	r3, [fp]
   26e2c:	mov	lr, fp
   26e30:	str	r3, [sp, #24]
   26e34:	str	r3, [sp, #112]	; 0x70
   26e38:	ldr	r3, [sp, #204]	; 0xcc
   26e3c:	mov	r6, #0
   26e40:	mov	r2, #1
   26e44:	ldr	r3, [r3]
   26e48:	str	r3, [sp, #12]
   26e4c:	str	r3, [sp, #20]
   26e50:	ldr	r3, [sp, #208]	; 0xd0
   26e54:	cmp	r2, r3
   26e58:	blt	26f98 <GetDataSlab+0xb07c>
   26e5c:	ldr	r3, [sp, #8]
   26e60:	add	r5, r3, r6, lsl #3
   26e64:	ldr	r3, [sp, #16]
   26e68:	cmp	r3, #1
   26e6c:	moveq	r9, #0
   26e70:	beq	27054 <GetDataSlab+0xb138>
   26e74:	ldr	r3, [sp, #16]
   26e78:	ldr	r2, [sp, #12]
   26e7c:	mul	r3, r3, r2
   26e80:	ldr	r2, [sp, #24]
   26e84:	sub	r3, r2, r3
   26e88:	str	r3, [sp, #28]
   26e8c:	ldr	r3, [sp, #16]
   26e90:	ldr	r2, [sp, #16]
   26e94:	lsl	fp, r3, #3
   26e98:	ldr	r3, [sp, #12]
   26e9c:	bic	r3, r3, r3, asr #31
   26ea0:	mul	r2, r2, r3
   26ea4:	mul	r3, fp, r3
   26ea8:	str	r2, [sp, #16]
   26eac:	str	r3, [sp, #24]
   26eb0:	mov	r3, #0
   26eb4:	str	r3, [sp, #8]
   26eb8:	ldr	r2, [sp, #8]
   26ebc:	ldr	r3, [sp, #20]
   26ec0:	cmp	r2, r3
   26ec4:	bge	1c04c <GetDataSlab+0x130>
   26ec8:	ldr	r3, [sp, #196]	; 0xc4
   26ecc:	ldr	r2, [sp, #8]
   26ed0:	ldr	r1, [r3]
   26ed4:	ldr	r3, [sp]
   26ed8:	cmp	r1, #0
   26edc:	addne	r5, r5, r1, lsl #3
   26ee0:	add	r0, r3, r2, lsl #3
   26ee4:	addne	r6, r6, r1
   26ee8:	mov	r3, r5
   26eec:	mov	r2, #0
   26ef0:	ldr	ip, [sp, #12]
   26ef4:	cmp	r2, ip
   26ef8:	blt	2711c <GetDataSlab+0xb200>
   26efc:	ldr	r3, [sp, #28]
   26f00:	ldr	r8, [sp, #4]
   26f04:	sub	r2, r3, r1
   26f08:	ldr	r3, [sp, #16]
   26f0c:	mov	r4, #1
   26f10:	add	r3, r3, r6
   26f14:	add	r6, r3, r2
   26f18:	ldr	r3, [sp, #24]
   26f1c:	add	r3, r3, r2, lsl #3
   26f20:	add	r5, r5, r3
   26f24:	ldr	r3, [sp, #208]	; 0xd0
   26f28:	cmp	r4, r3
   26f2c:	bge	27158 <GetDataSlab+0xb23c>
   26f30:	ldr	r3, [sl, r4, lsl #2]
   26f34:	ldr	r2, [sp, #204]	; 0xcc
   26f38:	add	r3, r3, #1
   26f3c:	str	r3, [sl, r4, lsl #2]
   26f40:	mov	r0, r3
   26f44:	ldr	r1, [r2, r4, lsl #2]
   26f48:	bl	3fd18 <__aeabi_idivmod>
   26f4c:	subs	r3, r1, #0
   26f50:	bne	27144 <GetDataSlab+0xb228>
   26f54:	ldr	r7, [r8, #4]
   26f58:	str	r3, [sl, r4, lsl #2]
   26f5c:	mov	r1, r7
   26f60:	mov	r0, r6
   26f64:	bl	3fd18 <__aeabi_idivmod>
   26f68:	ldr	r2, [sp, #196]	; 0xc4
   26f6c:	ldr	r2, [r2, r4, lsl #2]
   26f70:	subs	r3, r1, #0
   26f74:	beq	27130 <GetDataSlab+0xb214>
   26f78:	ldr	r1, [r8]
   26f7c:	sub	r3, r7, r3
   26f80:	mla	r3, r2, r1, r3
   26f84:	add	r5, r5, r3, lsl #3
   26f88:	add	r6, r6, r3
   26f8c:	add	r4, r4, #1
   26f90:	add	r8, r8, #4
   26f94:	b	26f24 <GetDataSlab+0xb008>
   26f98:	ldr	r3, [r9, r2, lsl #2]
   26f9c:	mov	r5, ip
   26fa0:	sub	r3, r3, #1
   26fa4:	str	r3, [r4, r2, lsl #2]
   26fa8:	ldr	r3, [lr], #4
   26fac:	mov	r1, lr
   26fb0:	str	r3, [ip, #4]
   26fb4:	cmp	r1, fp
   26fb8:	bne	26fec <GetDataSlab+0xb0d0>
   26fbc:	ldr	r3, [sp, #204]	; 0xcc
   26fc0:	ldr	r1, [sp, #20]
   26fc4:	add	ip, ip, #4
   26fc8:	ldr	r3, [r3, r2, lsl #2]
   26fcc:	mul	r3, r3, r1
   26fd0:	ldr	r1, [sp, #196]	; 0xc4
   26fd4:	str	r3, [sp, #20]
   26fd8:	ldr	r3, [r5]
   26fdc:	ldr	r1, [r1, r2, lsl #2]
   26fe0:	add	r2, r2, #1
   26fe4:	mla	r6, r1, r3, r6
   26fe8:	b	26e50 <GetDataSlab+0xaf34>
   26fec:	ldr	r7, [r4, r2, lsl #2]
   26ff0:	mov	r0, r1
   26ff4:	ldr	r3, [r1, #-4]!
   26ff8:	mul	r3, r3, r7
   26ffc:	ldr	r7, [ip, #4]
   27000:	str	r3, [r4, r2, lsl #2]
   27004:	ldr	r3, [r0]
   27008:	mul	r3, r3, r7
   2700c:	str	r3, [ip, #4]
   27010:	b	26fb4 <GetDataSlab+0xb098>
   27014:	ldrd	r2, [lr, #8]!
   27018:	add	r0, r0, #1
   2701c:	strd	r2, [ip], #8
   27020:	b	27084 <GetDataSlab+0xb168>
   27024:	cmp	r2, #0
   27028:	beq	27110 <GetDataSlab+0xb1f4>
   2702c:	ldr	r3, [r8]
   27030:	mul	r3, r3, r2
   27034:	b	27108 <GetDataSlab+0xb1ec>
   27038:	add	r3, sp, #152	; 0x98
   2703c:	add	r3, r3, r4, lsl #2
   27040:	ldr	r3, [r3, #-120]	; 0xffffff88
   27044:	add	r6, r6, r3
   27048:	add	r5, r5, r3, lsl #3
   2704c:	ldr	r3, [sp, #12]
   27050:	add	r9, r9, r3
   27054:	ldr	r3, [sp, #20]
   27058:	cmp	r9, r3
   2705c:	bge	1c04c <GetDataSlab+0x130>
   27060:	ldr	r3, [sp, #196]	; 0xc4
   27064:	mov	r0, #0
   27068:	ldr	r1, [r3]
   2706c:	ldr	r3, [sp]
   27070:	cmp	r1, #0
   27074:	addne	r5, r5, r1, lsl #3
   27078:	addne	r6, r6, r1
   2707c:	sub	lr, r5, #8
   27080:	add	ip, r3, r9, lsl #3
   27084:	ldr	r3, [sp, #12]
   27088:	cmp	r0, r3
   2708c:	blt	27014 <GetDataSlab+0xb0f8>
   27090:	ldr	r3, [sp, #24]
   27094:	ldr	r8, [sp, #4]
   27098:	sub	r3, r3, r1
   2709c:	ldr	r4, [sp, #16]
   270a0:	add	r6, r6, r3
   270a4:	add	r5, r5, r3, lsl #3
   270a8:	ldr	r3, [sp, #208]	; 0xd0
   270ac:	cmp	r4, r3
   270b0:	bge	2704c <GetDataSlab+0xb130>
   270b4:	ldr	r3, [sl, r4, lsl #2]
   270b8:	ldr	r2, [sp, #204]	; 0xcc
   270bc:	add	r3, r3, #1
   270c0:	str	r3, [sl, r4, lsl #2]
   270c4:	mov	r0, r3
   270c8:	ldr	r1, [r2, r4, lsl #2]
   270cc:	bl	3fd18 <__aeabi_idivmod>
   270d0:	subs	r3, r1, #0
   270d4:	bne	27038 <GetDataSlab+0xb11c>
   270d8:	ldr	r7, [r8, #4]
   270dc:	str	r3, [sl, r4, lsl #2]
   270e0:	mov	r1, r7
   270e4:	mov	r0, r6
   270e8:	bl	3fd18 <__aeabi_idivmod>
   270ec:	ldr	r2, [sp, #196]	; 0xc4
   270f0:	ldr	r2, [r2, r4, lsl #2]
   270f4:	subs	r3, r1, #0
   270f8:	beq	27024 <GetDataSlab+0xb108>
   270fc:	ldr	r1, [r8]
   27100:	sub	r3, r7, r3
   27104:	mla	r3, r2, r1, r3
   27108:	add	r5, r5, r3, lsl #3
   2710c:	add	r6, r6, r3
   27110:	add	r4, r4, #1
   27114:	add	r8, r8, #4
   27118:	b	270a8 <GetDataSlab+0xb18c>
   2711c:	ldrd	r8, [r3]
   27120:	add	r2, r2, #1
   27124:	add	r3, r3, fp
   27128:	strd	r8, [r0], #8
   2712c:	b	26ef0 <GetDataSlab+0xafd4>
   27130:	cmp	r2, #0
   27134:	beq	26f8c <GetDataSlab+0xb070>
   27138:	ldr	r3, [r8]
   2713c:	mul	r3, r3, r2
   27140:	b	26f84 <GetDataSlab+0xb068>
   27144:	add	r3, sp, #152	; 0x98
   27148:	add	r3, r3, r4, lsl #2
   2714c:	ldr	r3, [r3, #-120]	; 0xffffff88
   27150:	add	r6, r6, r3
   27154:	add	r5, r5, r3, lsl #3
   27158:	ldr	r3, [sp, #12]
   2715c:	ldr	r2, [sp, #8]
   27160:	add	r3, r2, r3
   27164:	b	26eb4 <GetDataSlab+0xaf98>
   27168:	cmp	r5, #13
   2716c:	bne	337fc <GetDataSlab+0x178e0>
   27170:	ldr	r3, [r9]
   27174:	ldr	ip, [sp, #4]
   27178:	str	r3, [sp, #16]
   2717c:	sub	r3, r3, #1
   27180:	str	r3, [sp, #32]
   27184:	ldr	r3, [fp]
   27188:	mov	lr, fp
   2718c:	str	r3, [sp, #24]
   27190:	str	r3, [sp, #112]	; 0x70
   27194:	ldr	r3, [sp, #204]	; 0xcc
   27198:	mov	r6, #0
   2719c:	mov	r2, #1
   271a0:	ldr	r3, [r3]
   271a4:	str	r3, [sp, #12]
   271a8:	str	r3, [sp, #20]
   271ac:	ldr	r3, [sp, #208]	; 0xd0
   271b0:	cmp	r2, r3
   271b4:	blt	272f4 <GetDataSlab+0xb3d8>
   271b8:	ldr	r3, [sp, #8]
   271bc:	add	r5, r3, r6, lsl #3
   271c0:	ldr	r3, [sp, #16]
   271c4:	cmp	r3, #1
   271c8:	moveq	r9, #0
   271cc:	beq	273b0 <GetDataSlab+0xb494>
   271d0:	ldr	r3, [sp, #16]
   271d4:	ldr	r2, [sp, #12]
   271d8:	mul	r3, r3, r2
   271dc:	ldr	r2, [sp, #24]
   271e0:	sub	r3, r2, r3
   271e4:	str	r3, [sp, #28]
   271e8:	ldr	r3, [sp, #16]
   271ec:	ldr	r2, [sp, #16]
   271f0:	lsl	fp, r3, #3
   271f4:	ldr	r3, [sp, #12]
   271f8:	bic	r3, r3, r3, asr #31
   271fc:	mul	r2, r2, r3
   27200:	mul	r3, fp, r3
   27204:	str	r2, [sp, #16]
   27208:	str	r3, [sp, #24]
   2720c:	mov	r3, #0
   27210:	str	r3, [sp, #8]
   27214:	ldr	r2, [sp, #8]
   27218:	ldr	r3, [sp, #20]
   2721c:	cmp	r2, r3
   27220:	bge	1c04c <GetDataSlab+0x130>
   27224:	ldr	r3, [sp, #196]	; 0xc4
   27228:	ldr	r2, [sp, #8]
   2722c:	ldr	r1, [r3]
   27230:	ldr	r3, [sp]
   27234:	cmp	r1, #0
   27238:	addne	r5, r5, r1, lsl #3
   2723c:	add	r0, r3, r2, lsl #3
   27240:	addne	r6, r6, r1
   27244:	mov	r3, r5
   27248:	mov	r2, #0
   2724c:	ldr	ip, [sp, #12]
   27250:	cmp	r2, ip
   27254:	blt	27478 <GetDataSlab+0xb55c>
   27258:	ldr	r3, [sp, #28]
   2725c:	ldr	r8, [sp, #4]
   27260:	sub	r2, r3, r1
   27264:	ldr	r3, [sp, #16]
   27268:	mov	r4, #1
   2726c:	add	r3, r3, r6
   27270:	add	r6, r3, r2
   27274:	ldr	r3, [sp, #24]
   27278:	add	r3, r3, r2, lsl #3
   2727c:	add	r5, r5, r3
   27280:	ldr	r3, [sp, #208]	; 0xd0
   27284:	cmp	r4, r3
   27288:	bge	274b4 <GetDataSlab+0xb598>
   2728c:	ldr	r3, [sl, r4, lsl #2]
   27290:	ldr	r2, [sp, #204]	; 0xcc
   27294:	add	r3, r3, #1
   27298:	str	r3, [sl, r4, lsl #2]
   2729c:	mov	r0, r3
   272a0:	ldr	r1, [r2, r4, lsl #2]
   272a4:	bl	3fd18 <__aeabi_idivmod>
   272a8:	subs	r3, r1, #0
   272ac:	bne	274a0 <GetDataSlab+0xb584>
   272b0:	ldr	r7, [r8, #4]
   272b4:	str	r3, [sl, r4, lsl #2]
   272b8:	mov	r1, r7
   272bc:	mov	r0, r6
   272c0:	bl	3fd18 <__aeabi_idivmod>
   272c4:	ldr	r2, [sp, #196]	; 0xc4
   272c8:	ldr	r2, [r2, r4, lsl #2]
   272cc:	subs	r3, r1, #0
   272d0:	beq	2748c <GetDataSlab+0xb570>
   272d4:	ldr	r1, [r8]
   272d8:	sub	r3, r7, r3
   272dc:	mla	r3, r2, r1, r3
   272e0:	add	r5, r5, r3, lsl #3
   272e4:	add	r6, r6, r3
   272e8:	add	r4, r4, #1
   272ec:	add	r8, r8, #4
   272f0:	b	27280 <GetDataSlab+0xb364>
   272f4:	ldr	r3, [r9, r2, lsl #2]
   272f8:	mov	r5, ip
   272fc:	sub	r3, r3, #1
   27300:	str	r3, [r4, r2, lsl #2]
   27304:	ldr	r3, [lr], #4
   27308:	mov	r1, lr
   2730c:	str	r3, [ip, #4]
   27310:	cmp	r1, fp
   27314:	bne	27348 <GetDataSlab+0xb42c>
   27318:	ldr	r3, [sp, #204]	; 0xcc
   2731c:	ldr	r1, [sp, #20]
   27320:	add	ip, ip, #4
   27324:	ldr	r3, [r3, r2, lsl #2]
   27328:	mul	r3, r3, r1
   2732c:	ldr	r1, [sp, #196]	; 0xc4
   27330:	str	r3, [sp, #20]
   27334:	ldr	r3, [r5]
   27338:	ldr	r1, [r1, r2, lsl #2]
   2733c:	add	r2, r2, #1
   27340:	mla	r6, r1, r3, r6
   27344:	b	271ac <GetDataSlab+0xb290>
   27348:	ldr	r7, [r4, r2, lsl #2]
   2734c:	mov	r0, r1
   27350:	ldr	r3, [r1, #-4]!
   27354:	mul	r3, r3, r7
   27358:	ldr	r7, [ip, #4]
   2735c:	str	r3, [r4, r2, lsl #2]
   27360:	ldr	r3, [r0]
   27364:	mul	r3, r3, r7
   27368:	str	r3, [ip, #4]
   2736c:	b	27310 <GetDataSlab+0xb3f4>
   27370:	ldrd	r2, [lr, #8]!
   27374:	add	r0, r0, #1
   27378:	strd	r2, [ip], #8
   2737c:	b	273e0 <GetDataSlab+0xb4c4>
   27380:	cmp	r2, #0
   27384:	beq	2746c <GetDataSlab+0xb550>
   27388:	ldr	r3, [r8]
   2738c:	mul	r3, r3, r2
   27390:	b	27464 <GetDataSlab+0xb548>
   27394:	add	r3, sp, #152	; 0x98
   27398:	add	r3, r3, r4, lsl #2
   2739c:	ldr	r3, [r3, #-120]	; 0xffffff88
   273a0:	add	r6, r6, r3
   273a4:	add	r5, r5, r3, lsl #3
   273a8:	ldr	r3, [sp, #12]
   273ac:	add	r9, r9, r3
   273b0:	ldr	r3, [sp, #20]
   273b4:	cmp	r9, r3
   273b8:	bge	1c04c <GetDataSlab+0x130>
   273bc:	ldr	r3, [sp, #196]	; 0xc4
   273c0:	mov	r0, #0
   273c4:	ldr	r1, [r3]
   273c8:	ldr	r3, [sp]
   273cc:	cmp	r1, #0
   273d0:	addne	r5, r5, r1, lsl #3
   273d4:	addne	r6, r6, r1
   273d8:	sub	lr, r5, #8
   273dc:	add	ip, r3, r9, lsl #3
   273e0:	ldr	r3, [sp, #12]
   273e4:	cmp	r0, r3
   273e8:	blt	27370 <GetDataSlab+0xb454>
   273ec:	ldr	r3, [sp, #24]
   273f0:	ldr	r8, [sp, #4]
   273f4:	sub	r3, r3, r1
   273f8:	ldr	r4, [sp, #16]
   273fc:	add	r6, r6, r3
   27400:	add	r5, r5, r3, lsl #3
   27404:	ldr	r3, [sp, #208]	; 0xd0
   27408:	cmp	r4, r3
   2740c:	bge	273a8 <GetDataSlab+0xb48c>
   27410:	ldr	r3, [sl, r4, lsl #2]
   27414:	ldr	r2, [sp, #204]	; 0xcc
   27418:	add	r3, r3, #1
   2741c:	str	r3, [sl, r4, lsl #2]
   27420:	mov	r0, r3
   27424:	ldr	r1, [r2, r4, lsl #2]
   27428:	bl	3fd18 <__aeabi_idivmod>
   2742c:	subs	r3, r1, #0
   27430:	bne	27394 <GetDataSlab+0xb478>
   27434:	ldr	r7, [r8, #4]
   27438:	str	r3, [sl, r4, lsl #2]
   2743c:	mov	r1, r7
   27440:	mov	r0, r6
   27444:	bl	3fd18 <__aeabi_idivmod>
   27448:	ldr	r2, [sp, #196]	; 0xc4
   2744c:	ldr	r2, [r2, r4, lsl #2]
   27450:	subs	r3, r1, #0
   27454:	beq	27380 <GetDataSlab+0xb464>
   27458:	ldr	r1, [r8]
   2745c:	sub	r3, r7, r3
   27460:	mla	r3, r2, r1, r3
   27464:	add	r5, r5, r3, lsl #3
   27468:	add	r6, r6, r3
   2746c:	add	r4, r4, #1
   27470:	add	r8, r8, #4
   27474:	b	27404 <GetDataSlab+0xb4e8>
   27478:	ldrd	r8, [r3]
   2747c:	add	r2, r2, #1
   27480:	add	r3, r3, fp
   27484:	strd	r8, [r0], #8
   27488:	b	2724c <GetDataSlab+0xb330>
   2748c:	cmp	r2, #0
   27490:	beq	272e8 <GetDataSlab+0xb3cc>
   27494:	ldr	r3, [r8]
   27498:	mul	r3, r3, r2
   2749c:	b	272e0 <GetDataSlab+0xb3c4>
   274a0:	add	r3, sp, #152	; 0x98
   274a4:	add	r3, r3, r4, lsl #2
   274a8:	ldr	r3, [r3, #-120]	; 0xffffff88
   274ac:	add	r6, r6, r3
   274b0:	add	r5, r5, r3, lsl #3
   274b4:	ldr	r3, [sp, #12]
   274b8:	ldr	r2, [sp, #8]
   274bc:	add	r3, r2, r3
   274c0:	b	27210 <GetDataSlab+0xb2f4>
   274c4:	sub	r3, r5, #1
   274c8:	cmp	r3, #8
   274cc:	addls	pc, pc, r3, lsl #2
   274d0:	b	28e98 <GetDataSlab+0xcf7c>
   274d4:	b	28838 <GetDataSlab+0xc91c>
   274d8:	b	28b68 <GetDataSlab+0xcc4c>
   274dc:	b	281d0 <GetDataSlab+0xc2b4>
   274e0:	b	28504 <GetDataSlab+0xc5e8>
   274e4:	b	27b78 <GetDataSlab+0xbc5c>
   274e8:	b	27ea4 <GetDataSlab+0xbf88>
   274ec:	b	27838 <GetDataSlab+0xb91c>
   274f0:	b	28e98 <GetDataSlab+0xcf7c>
   274f4:	b	274f8 <GetDataSlab+0xb5dc>
   274f8:	ldr	r3, [r9]
   274fc:	ldr	ip, [sp, #4]
   27500:	str	r3, [sp, #16]
   27504:	sub	r3, r3, #1
   27508:	str	r3, [sp, #32]
   2750c:	ldr	r3, [fp]
   27510:	mov	lr, fp
   27514:	str	r3, [sp, #112]	; 0x70
   27518:	ldr	r3, [sp, #204]	; 0xcc
   2751c:	mov	r6, #0
   27520:	mov	r2, #1
   27524:	ldr	r3, [r3]
   27528:	str	r3, [sp, #12]
   2752c:	ldr	r3, [sp, #208]	; 0xd0
   27530:	cmp	r2, r3
   27534:	blt	27640 <GetDataSlab+0xb724>
   27538:	ldr	r3, [sp, #8]
   2753c:	add	r4, r3, r6, lsl #3
   27540:	ldr	r3, [sp, #16]
   27544:	cmp	r3, #1
   27548:	movne	r3, #0
   2754c:	moveq	r9, #0
   27550:	beq	27704 <GetDataSlab+0xb7e8>
   27554:	str	r3, [sp, #8]
   27558:	ldr	r3, [sp, #8]
   2755c:	ldr	r2, [sp, #12]
   27560:	cmp	r3, r2
   27564:	bge	1c04c <GetDataSlab+0x130>
   27568:	ldr	r3, [sp, #196]	; 0xc4
   2756c:	ldr	r2, [sp, #8]
   27570:	ldr	r3, [r3]
   27574:	cmp	r3, #0
   27578:	addne	r4, r4, r3, lsl #3
   2757c:	addne	r6, r6, r3
   27580:	ldr	r3, [sp]
   27584:	add	r1, r3, r2, lsl #2
   27588:	mov	r3, #0
   2758c:	ldr	r2, [sp, #204]	; 0xcc
   27590:	ldr	r2, [r2]
   27594:	cmp	r3, r2
   27598:	str	r2, [sp, #16]
   2759c:	blt	277dc <GetDataSlab+0xb8c0>
   275a0:	ldr	r3, [r9]
   275a4:	ldr	r8, [sp, #4]
   275a8:	mov	r5, #1
   275ac:	mul	r3, r3, r2
   275b0:	ldr	r2, [fp]
   275b4:	sub	r3, r2, r3
   275b8:	ldr	r2, [sp, #196]	; 0xc4
   275bc:	ldr	r2, [r2]
   275c0:	sub	r3, r3, r2
   275c4:	add	r6, r6, r3
   275c8:	add	r4, r4, r3, lsl #3
   275cc:	ldr	r3, [sp, #208]	; 0xd0
   275d0:	cmp	r5, r3
   275d4:	bge	27828 <GetDataSlab+0xb90c>
   275d8:	ldr	r3, [sl, r5, lsl #2]
   275dc:	ldr	r2, [sp, #204]	; 0xcc
   275e0:	add	r3, r3, #1
   275e4:	str	r3, [sl, r5, lsl #2]
   275e8:	mov	r0, r3
   275ec:	ldr	r1, [r2, r5, lsl #2]
   275f0:	bl	3fd18 <__aeabi_idivmod>
   275f4:	subs	r3, r1, #0
   275f8:	bne	27814 <GetDataSlab+0xb8f8>
   275fc:	ldr	r7, [r8, #4]
   27600:	str	r3, [sl, r5, lsl #2]
   27604:	mov	r1, r7
   27608:	mov	r0, r6
   2760c:	bl	3fd18 <__aeabi_idivmod>
   27610:	ldr	r2, [sp, #196]	; 0xc4
   27614:	ldr	r2, [r2, r5, lsl #2]
   27618:	subs	r3, r1, #0
   2761c:	beq	27800 <GetDataSlab+0xb8e4>
   27620:	ldr	r1, [r8]
   27624:	sub	r3, r7, r3
   27628:	mla	r3, r2, r1, r3
   2762c:	add	r4, r4, r3, lsl #3
   27630:	add	r6, r6, r3
   27634:	add	r5, r5, #1
   27638:	add	r8, r8, #4
   2763c:	b	275cc <GetDataSlab+0xb6b0>
   27640:	ldr	r3, [r9, r2, lsl #2]
   27644:	mov	r5, ip
   27648:	sub	r3, r3, #1
   2764c:	str	r3, [r4, r2, lsl #2]
   27650:	ldr	r3, [lr], #4
   27654:	mov	r1, lr
   27658:	str	r3, [ip, #4]
   2765c:	cmp	r1, fp
   27660:	bne	27694 <GetDataSlab+0xb778>
   27664:	ldr	r3, [sp, #204]	; 0xcc
   27668:	ldr	r1, [sp, #12]
   2766c:	add	ip, ip, #4
   27670:	ldr	r3, [r3, r2, lsl #2]
   27674:	mul	r3, r3, r1
   27678:	ldr	r1, [sp, #196]	; 0xc4
   2767c:	str	r3, [sp, #12]
   27680:	ldr	r3, [r5]
   27684:	ldr	r1, [r1, r2, lsl #2]
   27688:	add	r2, r2, #1
   2768c:	mla	r6, r1, r3, r6
   27690:	b	2752c <GetDataSlab+0xb610>
   27694:	ldr	r7, [r4, r2, lsl #2]
   27698:	mov	r0, r1
   2769c:	ldr	r3, [r1, #-4]!
   276a0:	mul	r3, r3, r7
   276a4:	ldr	r7, [ip, #4]
   276a8:	str	r3, [r4, r2, lsl #2]
   276ac:	ldr	r3, [r0]
   276b0:	mul	r3, r3, r7
   276b4:	str	r3, [ip, #4]
   276b8:	b	2765c <GetDataSlab+0xb740>
   276bc:	vldmia	r1!, {d7}
   276c0:	vcvt.s32.f64	s15, d7
   276c4:	vmov	r2, s15
   276c8:	str	r2, [r0, r3, lsl #2]
   276cc:	add	r3, r3, #1
   276d0:	b	27734 <GetDataSlab+0xb818>
   276d4:	cmp	r2, #0
   276d8:	beq	277d0 <GetDataSlab+0xb8b4>
   276dc:	ldr	r3, [r8]
   276e0:	mul	r3, r3, r2
   276e4:	b	277c8 <GetDataSlab+0xb8ac>
   276e8:	add	r3, sp, #152	; 0x98
   276ec:	add	r3, r3, r5, lsl #2
   276f0:	ldr	r3, [r3, #-120]	; 0xffffff88
   276f4:	add	r6, r6, r3
   276f8:	add	r4, r4, r3, lsl #3
   276fc:	ldr	r3, [sp, #8]
   27700:	add	r9, r9, r3
   27704:	ldr	r3, [sp, #12]
   27708:	cmp	r9, r3
   2770c:	bge	1c04c <GetDataSlab+0x130>
   27710:	ldr	r3, [sp, #196]	; 0xc4
   27714:	ldr	r3, [r3]
   27718:	cmp	r3, #0
   2771c:	addne	r4, r4, r3, lsl #3
   27720:	addne	r6, r6, r3
   27724:	ldr	r3, [sp]
   27728:	mov	r1, r4
   2772c:	add	r0, r3, r9, lsl #2
   27730:	mov	r3, #0
   27734:	ldr	r2, [sp, #204]	; 0xcc
   27738:	ldr	r2, [r2]
   2773c:	cmp	r3, r2
   27740:	str	r2, [sp, #8]
   27744:	blt	276bc <GetDataSlab+0xb7a0>
   27748:	ldr	r3, [sp, #196]	; 0xc4
   2774c:	ldr	r2, [fp]
   27750:	ldr	r8, [sp, #4]
   27754:	ldr	r3, [r3]
   27758:	ldr	r5, [sp, #16]
   2775c:	sub	r3, r2, r3
   27760:	add	r6, r6, r3
   27764:	add	r4, r4, r3, lsl #3
   27768:	ldr	r3, [sp, #208]	; 0xd0
   2776c:	cmp	r5, r3
   27770:	bge	276fc <GetDataSlab+0xb7e0>
   27774:	ldr	r3, [sl, r5, lsl #2]
   27778:	ldr	r2, [sp, #204]	; 0xcc
   2777c:	add	r3, r3, #1
   27780:	str	r3, [sl, r5, lsl #2]
   27784:	mov	r0, r3
   27788:	ldr	r1, [r2, r5, lsl #2]
   2778c:	bl	3fd18 <__aeabi_idivmod>
   27790:	subs	r3, r1, #0
   27794:	bne	276e8 <GetDataSlab+0xb7cc>
   27798:	ldr	r7, [r8, #4]
   2779c:	str	r3, [sl, r5, lsl #2]
   277a0:	mov	r1, r7
   277a4:	mov	r0, r6
   277a8:	bl	3fd18 <__aeabi_idivmod>
   277ac:	ldr	r2, [sp, #196]	; 0xc4
   277b0:	ldr	r2, [r2, r5, lsl #2]
   277b4:	subs	r3, r1, #0
   277b8:	beq	276d4 <GetDataSlab+0xb7b8>
   277bc:	ldr	r1, [r8]
   277c0:	sub	r3, r7, r3
   277c4:	mla	r3, r2, r1, r3
   277c8:	add	r4, r4, r3, lsl #3
   277cc:	add	r6, r6, r3
   277d0:	add	r5, r5, #1
   277d4:	add	r8, r8, #4
   277d8:	b	27768 <GetDataSlab+0xb84c>
   277dc:	vldr	d7, [r4]
   277e0:	vcvt.s32.f64	s15, d7
   277e4:	vmov	r2, s15
   277e8:	str	r2, [r1, r3, lsl #2]
   277ec:	ldr	r2, [r9]
   277f0:	add	r3, r3, #1
   277f4:	add	r6, r6, r2
   277f8:	add	r4, r4, r2, lsl #3
   277fc:	b	2758c <GetDataSlab+0xb670>
   27800:	cmp	r2, #0
   27804:	beq	27634 <GetDataSlab+0xb718>
   27808:	ldr	r3, [r8]
   2780c:	mul	r3, r3, r2
   27810:	b	2762c <GetDataSlab+0xb710>
   27814:	add	r3, sp, #152	; 0x98
   27818:	add	r3, r3, r5, lsl #2
   2781c:	ldr	r3, [r3, #-120]	; 0xffffff88
   27820:	add	r6, r6, r3
   27824:	add	r4, r4, r3, lsl #3
   27828:	ldr	r3, [sp, #8]
   2782c:	ldr	r2, [sp, #16]
   27830:	add	r3, r3, r2
   27834:	b	27554 <GetDataSlab+0xb638>
   27838:	ldr	r3, [r9]
   2783c:	ldr	ip, [sp, #4]
   27840:	str	r3, [sp, #16]
   27844:	sub	r3, r3, #1
   27848:	str	r3, [sp, #32]
   2784c:	ldr	r3, [fp]
   27850:	mov	lr, fp
   27854:	str	r3, [sp, #112]	; 0x70
   27858:	ldr	r3, [sp, #204]	; 0xcc
   2785c:	mov	r6, #0
   27860:	mov	r2, #1
   27864:	ldr	r3, [r3]
   27868:	str	r3, [sp, #12]
   2786c:	ldr	r3, [sp, #208]	; 0xd0
   27870:	cmp	r2, r3
   27874:	blt	27980 <GetDataSlab+0xba64>
   27878:	ldr	r3, [sp, #8]
   2787c:	add	r4, r3, r6, lsl #2
   27880:	ldr	r3, [sp, #16]
   27884:	cmp	r3, #1
   27888:	movne	r3, #0
   2788c:	moveq	r9, #0
   27890:	beq	27a44 <GetDataSlab+0xbb28>
   27894:	str	r3, [sp, #8]
   27898:	ldr	r3, [sp, #8]
   2789c:	ldr	r2, [sp, #12]
   278a0:	cmp	r3, r2
   278a4:	bge	1c04c <GetDataSlab+0x130>
   278a8:	ldr	r3, [sp, #196]	; 0xc4
   278ac:	ldr	r2, [sp, #8]
   278b0:	ldr	r3, [r3]
   278b4:	cmp	r3, #0
   278b8:	addne	r4, r4, r3, lsl #2
   278bc:	addne	r6, r6, r3
   278c0:	ldr	r3, [sp]
   278c4:	add	r1, r3, r2, lsl #2
   278c8:	mov	r3, #0
   278cc:	ldr	r2, [sp, #204]	; 0xcc
   278d0:	ldr	r2, [r2]
   278d4:	cmp	r3, r2
   278d8:	str	r2, [sp, #16]
   278dc:	blt	27b1c <GetDataSlab+0xbc00>
   278e0:	ldr	r3, [r9]
   278e4:	ldr	r8, [sp, #4]
   278e8:	mov	r5, #1
   278ec:	mul	r3, r3, r2
   278f0:	ldr	r2, [fp]
   278f4:	sub	r3, r2, r3
   278f8:	ldr	r2, [sp, #196]	; 0xc4
   278fc:	ldr	r2, [r2]
   27900:	sub	r3, r3, r2
   27904:	add	r6, r6, r3
   27908:	add	r4, r4, r3, lsl #2
   2790c:	ldr	r3, [sp, #208]	; 0xd0
   27910:	cmp	r5, r3
   27914:	bge	27b68 <GetDataSlab+0xbc4c>
   27918:	ldr	r3, [sl, r5, lsl #2]
   2791c:	ldr	r2, [sp, #204]	; 0xcc
   27920:	add	r3, r3, #1
   27924:	str	r3, [sl, r5, lsl #2]
   27928:	mov	r0, r3
   2792c:	ldr	r1, [r2, r5, lsl #2]
   27930:	bl	3fd18 <__aeabi_idivmod>
   27934:	subs	r3, r1, #0
   27938:	bne	27b54 <GetDataSlab+0xbc38>
   2793c:	ldr	r7, [r8, #4]
   27940:	str	r3, [sl, r5, lsl #2]
   27944:	mov	r1, r7
   27948:	mov	r0, r6
   2794c:	bl	3fd18 <__aeabi_idivmod>
   27950:	ldr	r2, [sp, #196]	; 0xc4
   27954:	ldr	r2, [r2, r5, lsl #2]
   27958:	subs	r3, r1, #0
   2795c:	beq	27b40 <GetDataSlab+0xbc24>
   27960:	ldr	r1, [r8]
   27964:	sub	r3, r7, r3
   27968:	mla	r3, r2, r1, r3
   2796c:	add	r4, r4, r3, lsl #2
   27970:	add	r6, r6, r3
   27974:	add	r5, r5, #1
   27978:	add	r8, r8, #4
   2797c:	b	2790c <GetDataSlab+0xb9f0>
   27980:	ldr	r3, [r9, r2, lsl #2]
   27984:	mov	r5, ip
   27988:	sub	r3, r3, #1
   2798c:	str	r3, [r4, r2, lsl #2]
   27990:	ldr	r3, [lr], #4
   27994:	mov	r1, lr
   27998:	str	r3, [ip, #4]
   2799c:	cmp	r1, fp
   279a0:	bne	279d4 <GetDataSlab+0xbab8>
   279a4:	ldr	r3, [sp, #204]	; 0xcc
   279a8:	ldr	r1, [sp, #12]
   279ac:	add	ip, ip, #4
   279b0:	ldr	r3, [r3, r2, lsl #2]
   279b4:	mul	r3, r3, r1
   279b8:	ldr	r1, [sp, #196]	; 0xc4
   279bc:	str	r3, [sp, #12]
   279c0:	ldr	r3, [r5]
   279c4:	ldr	r1, [r1, r2, lsl #2]
   279c8:	add	r2, r2, #1
   279cc:	mla	r6, r1, r3, r6
   279d0:	b	2786c <GetDataSlab+0xb950>
   279d4:	ldr	r7, [r4, r2, lsl #2]
   279d8:	mov	r0, r1
   279dc:	ldr	r3, [r1, #-4]!
   279e0:	mul	r3, r3, r7
   279e4:	ldr	r7, [ip, #4]
   279e8:	str	r3, [r4, r2, lsl #2]
   279ec:	ldr	r3, [r0]
   279f0:	mul	r3, r3, r7
   279f4:	str	r3, [ip, #4]
   279f8:	b	2799c <GetDataSlab+0xba80>
   279fc:	vldmia	r1!, {s15}
   27a00:	vcvt.s32.f32	s15, s15
   27a04:	vmov	r2, s15
   27a08:	str	r2, [r0, r3, lsl #2]
   27a0c:	add	r3, r3, #1
   27a10:	b	27a74 <GetDataSlab+0xbb58>
   27a14:	cmp	r2, #0
   27a18:	beq	27b10 <GetDataSlab+0xbbf4>
   27a1c:	ldr	r3, [r8]
   27a20:	mul	r3, r3, r2
   27a24:	b	27b08 <GetDataSlab+0xbbec>
   27a28:	add	r3, sp, #152	; 0x98
   27a2c:	add	r3, r3, r5, lsl #2
   27a30:	ldr	r3, [r3, #-120]	; 0xffffff88
   27a34:	add	r6, r6, r3
   27a38:	add	r4, r4, r3, lsl #2
   27a3c:	ldr	r3, [sp, #8]
   27a40:	add	r9, r9, r3
   27a44:	ldr	r3, [sp, #12]
   27a48:	cmp	r9, r3
   27a4c:	bge	1c04c <GetDataSlab+0x130>
   27a50:	ldr	r3, [sp, #196]	; 0xc4
   27a54:	ldr	r3, [r3]
   27a58:	cmp	r3, #0
   27a5c:	addne	r4, r4, r3, lsl #2
   27a60:	addne	r6, r6, r3
   27a64:	ldr	r3, [sp]
   27a68:	mov	r1, r4
   27a6c:	add	r0, r3, r9, lsl #2
   27a70:	mov	r3, #0
   27a74:	ldr	r2, [sp, #204]	; 0xcc
   27a78:	ldr	r2, [r2]
   27a7c:	cmp	r3, r2
   27a80:	str	r2, [sp, #8]
   27a84:	blt	279fc <GetDataSlab+0xbae0>
   27a88:	ldr	r3, [sp, #196]	; 0xc4
   27a8c:	ldr	r2, [fp]
   27a90:	ldr	r8, [sp, #4]
   27a94:	ldr	r3, [r3]
   27a98:	ldr	r5, [sp, #16]
   27a9c:	sub	r3, r2, r3
   27aa0:	add	r6, r6, r3
   27aa4:	add	r4, r4, r3, lsl #2
   27aa8:	ldr	r3, [sp, #208]	; 0xd0
   27aac:	cmp	r5, r3
   27ab0:	bge	27a3c <GetDataSlab+0xbb20>
   27ab4:	ldr	r3, [sl, r5, lsl #2]
   27ab8:	ldr	r2, [sp, #204]	; 0xcc
   27abc:	add	r3, r3, #1
   27ac0:	str	r3, [sl, r5, lsl #2]
   27ac4:	mov	r0, r3
   27ac8:	ldr	r1, [r2, r5, lsl #2]
   27acc:	bl	3fd18 <__aeabi_idivmod>
   27ad0:	subs	r3, r1, #0
   27ad4:	bne	27a28 <GetDataSlab+0xbb0c>
   27ad8:	ldr	r7, [r8, #4]
   27adc:	str	r3, [sl, r5, lsl #2]
   27ae0:	mov	r1, r7
   27ae4:	mov	r0, r6
   27ae8:	bl	3fd18 <__aeabi_idivmod>
   27aec:	ldr	r2, [sp, #196]	; 0xc4
   27af0:	ldr	r2, [r2, r5, lsl #2]
   27af4:	subs	r3, r1, #0
   27af8:	beq	27a14 <GetDataSlab+0xbaf8>
   27afc:	ldr	r1, [r8]
   27b00:	sub	r3, r7, r3
   27b04:	mla	r3, r2, r1, r3
   27b08:	add	r4, r4, r3, lsl #2
   27b0c:	add	r6, r6, r3
   27b10:	add	r5, r5, #1
   27b14:	add	r8, r8, #4
   27b18:	b	27aa8 <GetDataSlab+0xbb8c>
   27b1c:	vldr	s15, [r4]
   27b20:	vcvt.s32.f32	s15, s15
   27b24:	vmov	r2, s15
   27b28:	str	r2, [r1, r3, lsl #2]
   27b2c:	ldr	r2, [r9]
   27b30:	add	r3, r3, #1
   27b34:	add	r6, r6, r2
   27b38:	add	r4, r4, r2, lsl #2
   27b3c:	b	278cc <GetDataSlab+0xb9b0>
   27b40:	cmp	r2, #0
   27b44:	beq	27974 <GetDataSlab+0xba58>
   27b48:	ldr	r3, [r8]
   27b4c:	mul	r3, r3, r2
   27b50:	b	2796c <GetDataSlab+0xba50>
   27b54:	add	r3, sp, #152	; 0x98
   27b58:	add	r3, r3, r5, lsl #2
   27b5c:	ldr	r3, [r3, #-120]	; 0xffffff88
   27b60:	add	r6, r6, r3
   27b64:	add	r4, r4, r3, lsl #2
   27b68:	ldr	r3, [sp, #8]
   27b6c:	ldr	r2, [sp, #16]
   27b70:	add	r3, r3, r2
   27b74:	b	27894 <GetDataSlab+0xb978>
   27b78:	ldr	r3, [r9]
   27b7c:	ldr	ip, [sp, #4]
   27b80:	str	r3, [sp, #16]
   27b84:	sub	r3, r3, #1
   27b88:	str	r3, [sp, #32]
   27b8c:	ldr	r3, [fp]
   27b90:	mov	lr, fp
   27b94:	str	r3, [sp, #112]	; 0x70
   27b98:	ldr	r3, [sp, #204]	; 0xcc
   27b9c:	mov	r6, #0
   27ba0:	mov	r2, #1
   27ba4:	ldr	r3, [r3]
   27ba8:	str	r3, [sp, #12]
   27bac:	ldr	r3, [sp, #208]	; 0xd0
   27bb0:	cmp	r2, r3
   27bb4:	blt	27cc0 <GetDataSlab+0xbda4>
   27bb8:	ldr	r3, [sp, #8]
   27bbc:	add	r4, r3, r6, lsl #2
   27bc0:	ldr	r3, [sp, #16]
   27bc4:	cmp	r3, #1
   27bc8:	movne	r3, #0
   27bcc:	moveq	r9, #0
   27bd0:	beq	27d7c <GetDataSlab+0xbe60>
   27bd4:	str	r3, [sp, #8]
   27bd8:	ldr	r3, [sp, #8]
   27bdc:	ldr	r2, [sp, #12]
   27be0:	cmp	r3, r2
   27be4:	bge	1c04c <GetDataSlab+0x130>
   27be8:	ldr	r3, [sp, #196]	; 0xc4
   27bec:	ldr	r2, [sp, #8]
   27bf0:	ldr	r3, [r3]
   27bf4:	cmp	r3, #0
   27bf8:	addne	r4, r4, r3, lsl #2
   27bfc:	addne	r6, r6, r3
   27c00:	ldr	r3, [sp]
   27c04:	add	r1, r3, r2, lsl #2
   27c08:	mov	r3, #0
   27c0c:	ldr	r2, [sp, #204]	; 0xcc
   27c10:	ldr	r2, [r2]
   27c14:	cmp	r3, r2
   27c18:	str	r2, [sp, #16]
   27c1c:	blt	27e50 <GetDataSlab+0xbf34>
   27c20:	ldr	r3, [r9]
   27c24:	ldr	r8, [sp, #4]
   27c28:	mov	r5, #1
   27c2c:	mul	r3, r3, r2
   27c30:	ldr	r2, [fp]
   27c34:	sub	r3, r2, r3
   27c38:	ldr	r2, [sp, #196]	; 0xc4
   27c3c:	ldr	r2, [r2]
   27c40:	sub	r3, r3, r2
   27c44:	add	r6, r6, r3
   27c48:	add	r4, r4, r3, lsl #2
   27c4c:	ldr	r3, [sp, #208]	; 0xd0
   27c50:	cmp	r5, r3
   27c54:	bge	27e94 <GetDataSlab+0xbf78>
   27c58:	ldr	r3, [sl, r5, lsl #2]
   27c5c:	ldr	r2, [sp, #204]	; 0xcc
   27c60:	add	r3, r3, #1
   27c64:	str	r3, [sl, r5, lsl #2]
   27c68:	mov	r0, r3
   27c6c:	ldr	r1, [r2, r5, lsl #2]
   27c70:	bl	3fd18 <__aeabi_idivmod>
   27c74:	subs	r3, r1, #0
   27c78:	bne	27e80 <GetDataSlab+0xbf64>
   27c7c:	ldr	r7, [r8, #4]
   27c80:	str	r3, [sl, r5, lsl #2]
   27c84:	mov	r1, r7
   27c88:	mov	r0, r6
   27c8c:	bl	3fd18 <__aeabi_idivmod>
   27c90:	ldr	r2, [sp, #196]	; 0xc4
   27c94:	ldr	r2, [r2, r5, lsl #2]
   27c98:	subs	r3, r1, #0
   27c9c:	beq	27e6c <GetDataSlab+0xbf50>
   27ca0:	ldr	r1, [r8]
   27ca4:	sub	r3, r7, r3
   27ca8:	mla	r3, r2, r1, r3
   27cac:	add	r4, r4, r3, lsl #2
   27cb0:	add	r6, r6, r3
   27cb4:	add	r5, r5, #1
   27cb8:	add	r8, r8, #4
   27cbc:	b	27c4c <GetDataSlab+0xbd30>
   27cc0:	ldr	r3, [r9, r2, lsl #2]
   27cc4:	mov	r5, ip
   27cc8:	sub	r3, r3, #1
   27ccc:	str	r3, [r4, r2, lsl #2]
   27cd0:	ldr	r3, [lr], #4
   27cd4:	mov	r1, lr
   27cd8:	str	r3, [ip, #4]
   27cdc:	cmp	r1, fp
   27ce0:	bne	27d14 <GetDataSlab+0xbdf8>
   27ce4:	ldr	r3, [sp, #204]	; 0xcc
   27ce8:	ldr	r1, [sp, #12]
   27cec:	add	ip, ip, #4
   27cf0:	ldr	r3, [r3, r2, lsl #2]
   27cf4:	mul	r3, r3, r1
   27cf8:	ldr	r1, [sp, #196]	; 0xc4
   27cfc:	str	r3, [sp, #12]
   27d00:	ldr	r3, [r5]
   27d04:	ldr	r1, [r1, r2, lsl #2]
   27d08:	add	r2, r2, #1
   27d0c:	mla	r6, r1, r3, r6
   27d10:	b	27bac <GetDataSlab+0xbc90>
   27d14:	ldr	r7, [r4, r2, lsl #2]
   27d18:	mov	r0, r1
   27d1c:	ldr	r3, [r1, #-4]!
   27d20:	mul	r3, r3, r7
   27d24:	ldr	r7, [ip, #4]
   27d28:	str	r3, [r4, r2, lsl #2]
   27d2c:	ldr	r3, [r0]
   27d30:	mul	r3, r3, r7
   27d34:	str	r3, [ip, #4]
   27d38:	b	27cdc <GetDataSlab+0xbdc0>
   27d3c:	ldr	r1, [r4, r3, lsl #2]
   27d40:	str	r1, [r2, r3, lsl #2]
   27d44:	add	r3, r3, #1
   27d48:	b	27da8 <GetDataSlab+0xbe8c>
   27d4c:	cmp	r2, #0
   27d50:	beq	27e44 <GetDataSlab+0xbf28>
   27d54:	ldr	r3, [r8]
   27d58:	mul	r3, r3, r2
   27d5c:	b	27e3c <GetDataSlab+0xbf20>
   27d60:	add	r3, sp, #152	; 0x98
   27d64:	add	r3, r3, r5, lsl #2
   27d68:	ldr	r3, [r3, #-120]	; 0xffffff88
   27d6c:	add	r6, r6, r3
   27d70:	add	r4, r4, r3, lsl #2
   27d74:	ldr	r3, [sp, #8]
   27d78:	add	r9, r9, r3
   27d7c:	ldr	r3, [sp, #12]
   27d80:	cmp	r9, r3
   27d84:	bge	1c04c <GetDataSlab+0x130>
   27d88:	ldr	r3, [sp, #196]	; 0xc4
   27d8c:	ldr	r3, [r3]
   27d90:	cmp	r3, #0
   27d94:	addne	r4, r4, r3, lsl #2
   27d98:	addne	r6, r6, r3
   27d9c:	ldr	r3, [sp]
   27da0:	add	r2, r3, r9, lsl #2
   27da4:	mov	r3, #0
   27da8:	ldr	r1, [sp, #204]	; 0xcc
   27dac:	ldr	r1, [r1]
   27db0:	cmp	r3, r1
   27db4:	str	r1, [sp, #8]
   27db8:	blt	27d3c <GetDataSlab+0xbe20>
   27dbc:	ldr	r3, [sp, #196]	; 0xc4
   27dc0:	ldr	r2, [fp]
   27dc4:	ldr	r8, [sp, #4]
   27dc8:	ldr	r3, [r3]
   27dcc:	ldr	r5, [sp, #16]
   27dd0:	sub	r3, r2, r3
   27dd4:	add	r6, r6, r3
   27dd8:	add	r4, r4, r3, lsl #2
   27ddc:	ldr	r3, [sp, #208]	; 0xd0
   27de0:	cmp	r5, r3
   27de4:	bge	27d74 <GetDataSlab+0xbe58>
   27de8:	ldr	r3, [sl, r5, lsl #2]
   27dec:	ldr	r2, [sp, #204]	; 0xcc
   27df0:	add	r3, r3, #1
   27df4:	str	r3, [sl, r5, lsl #2]
   27df8:	mov	r0, r3
   27dfc:	ldr	r1, [r2, r5, lsl #2]
   27e00:	bl	3fd18 <__aeabi_idivmod>
   27e04:	subs	r3, r1, #0
   27e08:	bne	27d60 <GetDataSlab+0xbe44>
   27e0c:	ldr	r7, [r8, #4]
   27e10:	str	r3, [sl, r5, lsl #2]
   27e14:	mov	r1, r7
   27e18:	mov	r0, r6
   27e1c:	bl	3fd18 <__aeabi_idivmod>
   27e20:	ldr	r2, [sp, #196]	; 0xc4
   27e24:	ldr	r2, [r2, r5, lsl #2]
   27e28:	subs	r3, r1, #0
   27e2c:	beq	27d4c <GetDataSlab+0xbe30>
   27e30:	ldr	r1, [r8]
   27e34:	sub	r3, r7, r3
   27e38:	mla	r3, r2, r1, r3
   27e3c:	add	r4, r4, r3, lsl #2
   27e40:	add	r6, r6, r3
   27e44:	add	r5, r5, #1
   27e48:	add	r8, r8, #4
   27e4c:	b	27ddc <GetDataSlab+0xbec0>
   27e50:	ldr	r2, [r4]
   27e54:	str	r2, [r1, r3, lsl #2]
   27e58:	ldr	r2, [r9]
   27e5c:	add	r3, r3, #1
   27e60:	add	r6, r6, r2
   27e64:	add	r4, r4, r2, lsl #2
   27e68:	b	27c0c <GetDataSlab+0xbcf0>
   27e6c:	cmp	r2, #0
   27e70:	beq	27cb4 <GetDataSlab+0xbd98>
   27e74:	ldr	r3, [r8]
   27e78:	mul	r3, r3, r2
   27e7c:	b	27cac <GetDataSlab+0xbd90>
   27e80:	add	r3, sp, #152	; 0x98
   27e84:	add	r3, r3, r5, lsl #2
   27e88:	ldr	r3, [r3, #-120]	; 0xffffff88
   27e8c:	add	r6, r6, r3
   27e90:	add	r4, r4, r3, lsl #2
   27e94:	ldr	r3, [sp, #8]
   27e98:	ldr	r2, [sp, #16]
   27e9c:	add	r3, r3, r2
   27ea0:	b	27bd4 <GetDataSlab+0xbcb8>
   27ea4:	ldr	r3, [r9]
   27ea8:	ldr	ip, [sp, #4]
   27eac:	str	r3, [sp, #16]
   27eb0:	sub	r3, r3, #1
   27eb4:	str	r3, [sp, #32]
   27eb8:	ldr	r3, [fp]
   27ebc:	mov	lr, fp
   27ec0:	str	r3, [sp, #112]	; 0x70
   27ec4:	ldr	r3, [sp, #204]	; 0xcc
   27ec8:	mov	r6, #0
   27ecc:	mov	r2, #1
   27ed0:	ldr	r3, [r3]
   27ed4:	str	r3, [sp, #12]
   27ed8:	ldr	r3, [sp, #208]	; 0xd0
   27edc:	cmp	r2, r3
   27ee0:	blt	27fec <GetDataSlab+0xc0d0>
   27ee4:	ldr	r3, [sp, #8]
   27ee8:	add	r4, r3, r6, lsl #2
   27eec:	ldr	r3, [sp, #16]
   27ef0:	cmp	r3, #1
   27ef4:	movne	r3, #0
   27ef8:	moveq	r9, #0
   27efc:	beq	280a8 <GetDataSlab+0xc18c>
   27f00:	str	r3, [sp, #8]
   27f04:	ldr	r3, [sp, #8]
   27f08:	ldr	r2, [sp, #12]
   27f0c:	cmp	r3, r2
   27f10:	bge	1c04c <GetDataSlab+0x130>
   27f14:	ldr	r3, [sp, #196]	; 0xc4
   27f18:	ldr	r2, [sp, #8]
   27f1c:	ldr	r3, [r3]
   27f20:	cmp	r3, #0
   27f24:	addne	r4, r4, r3, lsl #2
   27f28:	addne	r6, r6, r3
   27f2c:	ldr	r3, [sp]
   27f30:	add	r1, r3, r2, lsl #2
   27f34:	mov	r3, #0
   27f38:	ldr	r2, [sp, #204]	; 0xcc
   27f3c:	ldr	r2, [r2]
   27f40:	cmp	r3, r2
   27f44:	str	r2, [sp, #16]
   27f48:	blt	2817c <GetDataSlab+0xc260>
   27f4c:	ldr	r3, [r9]
   27f50:	ldr	r8, [sp, #4]
   27f54:	mov	r5, #1
   27f58:	mul	r3, r3, r2
   27f5c:	ldr	r2, [fp]
   27f60:	sub	r3, r2, r3
   27f64:	ldr	r2, [sp, #196]	; 0xc4
   27f68:	ldr	r2, [r2]
   27f6c:	sub	r3, r3, r2
   27f70:	add	r6, r6, r3
   27f74:	add	r4, r4, r3, lsl #2
   27f78:	ldr	r3, [sp, #208]	; 0xd0
   27f7c:	cmp	r5, r3
   27f80:	bge	281c0 <GetDataSlab+0xc2a4>
   27f84:	ldr	r3, [sl, r5, lsl #2]
   27f88:	ldr	r2, [sp, #204]	; 0xcc
   27f8c:	add	r3, r3, #1
   27f90:	str	r3, [sl, r5, lsl #2]
   27f94:	mov	r0, r3
   27f98:	ldr	r1, [r2, r5, lsl #2]
   27f9c:	bl	3fd18 <__aeabi_idivmod>
   27fa0:	subs	r3, r1, #0
   27fa4:	bne	281ac <GetDataSlab+0xc290>
   27fa8:	ldr	r7, [r8, #4]
   27fac:	str	r3, [sl, r5, lsl #2]
   27fb0:	mov	r1, r7
   27fb4:	mov	r0, r6
   27fb8:	bl	3fd18 <__aeabi_idivmod>
   27fbc:	ldr	r2, [sp, #196]	; 0xc4
   27fc0:	ldr	r2, [r2, r5, lsl #2]
   27fc4:	subs	r3, r1, #0
   27fc8:	beq	28198 <GetDataSlab+0xc27c>
   27fcc:	ldr	r1, [r8]
   27fd0:	sub	r3, r7, r3
   27fd4:	mla	r3, r2, r1, r3
   27fd8:	add	r4, r4, r3, lsl #2
   27fdc:	add	r6, r6, r3
   27fe0:	add	r5, r5, #1
   27fe4:	add	r8, r8, #4
   27fe8:	b	27f78 <GetDataSlab+0xc05c>
   27fec:	ldr	r3, [r9, r2, lsl #2]
   27ff0:	mov	r5, ip
   27ff4:	sub	r3, r3, #1
   27ff8:	str	r3, [r4, r2, lsl #2]
   27ffc:	ldr	r3, [lr], #4
   28000:	mov	r1, lr
   28004:	str	r3, [ip, #4]
   28008:	cmp	r1, fp
   2800c:	bne	28040 <GetDataSlab+0xc124>
   28010:	ldr	r3, [sp, #204]	; 0xcc
   28014:	ldr	r1, [sp, #12]
   28018:	add	ip, ip, #4
   2801c:	ldr	r3, [r3, r2, lsl #2]
   28020:	mul	r3, r3, r1
   28024:	ldr	r1, [sp, #196]	; 0xc4
   28028:	str	r3, [sp, #12]
   2802c:	ldr	r3, [r5]
   28030:	ldr	r1, [r1, r2, lsl #2]
   28034:	add	r2, r2, #1
   28038:	mla	r6, r1, r3, r6
   2803c:	b	27ed8 <GetDataSlab+0xbfbc>
   28040:	ldr	r7, [r4, r2, lsl #2]
   28044:	mov	r0, r1
   28048:	ldr	r3, [r1, #-4]!
   2804c:	mul	r3, r3, r7
   28050:	ldr	r7, [ip, #4]
   28054:	str	r3, [r4, r2, lsl #2]
   28058:	ldr	r3, [r0]
   2805c:	mul	r3, r3, r7
   28060:	str	r3, [ip, #4]
   28064:	b	28008 <GetDataSlab+0xc0ec>
   28068:	ldr	r1, [r4, r3, lsl #2]
   2806c:	str	r1, [r2, r3, lsl #2]
   28070:	add	r3, r3, #1
   28074:	b	280d4 <GetDataSlab+0xc1b8>
   28078:	cmp	r2, #0
   2807c:	beq	28170 <GetDataSlab+0xc254>
   28080:	ldr	r3, [r8]
   28084:	mul	r3, r3, r2
   28088:	b	28168 <GetDataSlab+0xc24c>
   2808c:	add	r3, sp, #152	; 0x98
   28090:	add	r3, r3, r5, lsl #2
   28094:	ldr	r3, [r3, #-120]	; 0xffffff88
   28098:	add	r6, r6, r3
   2809c:	add	r4, r4, r3, lsl #2
   280a0:	ldr	r3, [sp, #8]
   280a4:	add	r9, r9, r3
   280a8:	ldr	r3, [sp, #12]
   280ac:	cmp	r9, r3
   280b0:	bge	1c04c <GetDataSlab+0x130>
   280b4:	ldr	r3, [sp, #196]	; 0xc4
   280b8:	ldr	r3, [r3]
   280bc:	cmp	r3, #0
   280c0:	addne	r4, r4, r3, lsl #2
   280c4:	addne	r6, r6, r3
   280c8:	ldr	r3, [sp]
   280cc:	add	r2, r3, r9, lsl #2
   280d0:	mov	r3, #0
   280d4:	ldr	r1, [sp, #204]	; 0xcc
   280d8:	ldr	r1, [r1]
   280dc:	cmp	r3, r1
   280e0:	str	r1, [sp, #8]
   280e4:	blt	28068 <GetDataSlab+0xc14c>
   280e8:	ldr	r3, [sp, #196]	; 0xc4
   280ec:	ldr	r2, [fp]
   280f0:	ldr	r8, [sp, #4]
   280f4:	ldr	r3, [r3]
   280f8:	ldr	r5, [sp, #16]
   280fc:	sub	r3, r2, r3
   28100:	add	r6, r6, r3
   28104:	add	r4, r4, r3, lsl #2
   28108:	ldr	r3, [sp, #208]	; 0xd0
   2810c:	cmp	r5, r3
   28110:	bge	280a0 <GetDataSlab+0xc184>
   28114:	ldr	r3, [sl, r5, lsl #2]
   28118:	ldr	r2, [sp, #204]	; 0xcc
   2811c:	add	r3, r3, #1
   28120:	str	r3, [sl, r5, lsl #2]
   28124:	mov	r0, r3
   28128:	ldr	r1, [r2, r5, lsl #2]
   2812c:	bl	3fd18 <__aeabi_idivmod>
   28130:	subs	r3, r1, #0
   28134:	bne	2808c <GetDataSlab+0xc170>
   28138:	ldr	r7, [r8, #4]
   2813c:	str	r3, [sl, r5, lsl #2]
   28140:	mov	r1, r7
   28144:	mov	r0, r6
   28148:	bl	3fd18 <__aeabi_idivmod>
   2814c:	ldr	r2, [sp, #196]	; 0xc4
   28150:	ldr	r2, [r2, r5, lsl #2]
   28154:	subs	r3, r1, #0
   28158:	beq	28078 <GetDataSlab+0xc15c>
   2815c:	ldr	r1, [r8]
   28160:	sub	r3, r7, r3
   28164:	mla	r3, r2, r1, r3
   28168:	add	r4, r4, r3, lsl #2
   2816c:	add	r6, r6, r3
   28170:	add	r5, r5, #1
   28174:	add	r8, r8, #4
   28178:	b	28108 <GetDataSlab+0xc1ec>
   2817c:	ldr	r2, [r4]
   28180:	str	r2, [r1, r3, lsl #2]
   28184:	ldr	r2, [r9]
   28188:	add	r3, r3, #1
   2818c:	add	r6, r6, r2
   28190:	add	r4, r4, r2, lsl #2
   28194:	b	27f38 <GetDataSlab+0xc01c>
   28198:	cmp	r2, #0
   2819c:	beq	27fe0 <GetDataSlab+0xc0c4>
   281a0:	ldr	r3, [r8]
   281a4:	mul	r3, r3, r2
   281a8:	b	27fd8 <GetDataSlab+0xc0bc>
   281ac:	add	r3, sp, #152	; 0x98
   281b0:	add	r3, r3, r5, lsl #2
   281b4:	ldr	r3, [r3, #-120]	; 0xffffff88
   281b8:	add	r6, r6, r3
   281bc:	add	r4, r4, r3, lsl #2
   281c0:	ldr	r3, [sp, #8]
   281c4:	ldr	r2, [sp, #16]
   281c8:	add	r3, r3, r2
   281cc:	b	27f00 <GetDataSlab+0xbfe4>
   281d0:	ldr	r3, [r9]
   281d4:	ldr	ip, [sp, #4]
   281d8:	str	r3, [sp, #16]
   281dc:	sub	r3, r3, #1
   281e0:	str	r3, [sp, #32]
   281e4:	ldr	r3, [fp]
   281e8:	mov	lr, fp
   281ec:	str	r3, [sp, #112]	; 0x70
   281f0:	ldr	r3, [sp, #204]	; 0xcc
   281f4:	mov	r6, #0
   281f8:	mov	r2, #1
   281fc:	ldr	r3, [r3]
   28200:	str	r3, [sp, #12]
   28204:	ldr	r3, [sp, #208]	; 0xd0
   28208:	cmp	r2, r3
   2820c:	blt	2831c <GetDataSlab+0xc400>
   28210:	ldr	r3, [sp, #8]
   28214:	add	r4, r3, r6, lsl #1
   28218:	ldr	r3, [sp, #16]
   2821c:	cmp	r3, #1
   28220:	movne	r3, #0
   28224:	moveq	r9, #0
   28228:	beq	283d8 <GetDataSlab+0xc4bc>
   2822c:	str	r3, [sp, #8]
   28230:	ldr	r3, [sp, #8]
   28234:	ldr	r2, [sp, #12]
   28238:	cmp	r3, r2
   2823c:	bge	1c04c <GetDataSlab+0x130>
   28240:	ldr	r3, [sp, #196]	; 0xc4
   28244:	ldr	r2, [sp, #8]
   28248:	ldr	r3, [r3]
   2824c:	cmp	r3, #0
   28250:	addne	r4, r4, r3, lsl #1
   28254:	addne	r6, r6, r3
   28258:	ldr	r3, [sp]
   2825c:	add	r1, r3, r2, lsl #2
   28260:	mov	r2, #0
   28264:	ldr	r3, [sp, #204]	; 0xcc
   28268:	ldr	r3, [r3]
   2826c:	cmp	r2, r3
   28270:	str	r3, [sp, #16]
   28274:	blt	284b0 <GetDataSlab+0xc594>
   28278:	ldr	r2, [sp, #16]
   2827c:	ldr	r3, [r9]
   28280:	ldr	r8, [sp, #4]
   28284:	mov	r5, #1
   28288:	mul	r3, r3, r2
   2828c:	ldr	r2, [fp]
   28290:	sub	r3, r2, r3
   28294:	ldr	r2, [sp, #196]	; 0xc4
   28298:	ldr	r2, [r2]
   2829c:	sub	r3, r3, r2
   282a0:	add	r6, r6, r3
   282a4:	add	r4, r4, r3, lsl #1
   282a8:	ldr	r3, [sp, #208]	; 0xd0
   282ac:	cmp	r5, r3
   282b0:	bge	284f4 <GetDataSlab+0xc5d8>
   282b4:	ldr	r3, [sl, r5, lsl #2]
   282b8:	ldr	r2, [sp, #204]	; 0xcc
   282bc:	add	r3, r3, #1
   282c0:	str	r3, [sl, r5, lsl #2]
   282c4:	mov	r0, r3
   282c8:	ldr	r1, [r2, r5, lsl #2]
   282cc:	bl	3fd18 <__aeabi_idivmod>
   282d0:	subs	r3, r1, #0
   282d4:	bne	284e0 <GetDataSlab+0xc5c4>
   282d8:	ldr	r7, [r8, #4]
   282dc:	str	r3, [sl, r5, lsl #2]
   282e0:	mov	r1, r7
   282e4:	mov	r0, r6
   282e8:	bl	3fd18 <__aeabi_idivmod>
   282ec:	ldr	r2, [sp, #196]	; 0xc4
   282f0:	ldr	r2, [r2, r5, lsl #2]
   282f4:	subs	r3, r1, #0
   282f8:	beq	284cc <GetDataSlab+0xc5b0>
   282fc:	ldr	r1, [r8]
   28300:	sub	r3, r7, r3
   28304:	mla	r3, r2, r1, r3
   28308:	add	r4, r4, r3, lsl #1
   2830c:	add	r6, r6, r3
   28310:	add	r5, r5, #1
   28314:	add	r8, r8, #4
   28318:	b	282a8 <GetDataSlab+0xc38c>
   2831c:	ldr	r3, [r9, r2, lsl #2]
   28320:	mov	r5, ip
   28324:	sub	r3, r3, #1
   28328:	str	r3, [r4, r2, lsl #2]
   2832c:	ldr	r3, [lr], #4
   28330:	mov	r1, lr
   28334:	str	r3, [ip, #4]
   28338:	cmp	r1, fp
   2833c:	bne	28370 <GetDataSlab+0xc454>
   28340:	ldr	r3, [sp, #204]	; 0xcc
   28344:	ldr	r1, [sp, #12]
   28348:	add	ip, ip, #4
   2834c:	ldr	r3, [r3, r2, lsl #2]
   28350:	mul	r3, r3, r1
   28354:	ldr	r1, [sp, #196]	; 0xc4
   28358:	str	r3, [sp, #12]
   2835c:	ldr	r3, [r5]
   28360:	ldr	r1, [r1, r2, lsl #2]
   28364:	add	r2, r2, #1
   28368:	mla	r6, r1, r3, r6
   2836c:	b	28204 <GetDataSlab+0xc2e8>
   28370:	ldr	r7, [r4, r2, lsl #2]
   28374:	mov	r0, r1
   28378:	ldr	r3, [r1, #-4]!
   2837c:	mul	r3, r3, r7
   28380:	ldr	r7, [ip, #4]
   28384:	str	r3, [r4, r2, lsl #2]
   28388:	ldr	r3, [r0]
   2838c:	mul	r3, r3, r7
   28390:	str	r3, [ip, #4]
   28394:	b	28338 <GetDataSlab+0xc41c>
   28398:	ldrsh	r3, [r1, #2]!
   2839c:	str	r3, [r0, r2, lsl #2]
   283a0:	add	r2, r2, #1
   283a4:	b	28408 <GetDataSlab+0xc4ec>
   283a8:	cmp	r2, #0
   283ac:	beq	284a4 <GetDataSlab+0xc588>
   283b0:	ldr	r3, [r8]
   283b4:	mul	r3, r3, r2
   283b8:	b	2849c <GetDataSlab+0xc580>
   283bc:	add	r3, sp, #152	; 0x98
   283c0:	add	r3, r3, r5, lsl #2
   283c4:	ldr	r3, [r3, #-120]	; 0xffffff88
   283c8:	add	r6, r6, r3
   283cc:	add	r4, r4, r3, lsl #1
   283d0:	ldr	r3, [sp, #8]
   283d4:	add	r9, r9, r3
   283d8:	ldr	r3, [sp, #12]
   283dc:	cmp	r9, r3
   283e0:	bge	1c04c <GetDataSlab+0x130>
   283e4:	ldr	r3, [sp, #196]	; 0xc4
   283e8:	mov	r2, #0
   283ec:	ldr	r3, [r3]
   283f0:	cmp	r3, #0
   283f4:	addne	r4, r4, r3, lsl #1
   283f8:	addne	r6, r6, r3
   283fc:	ldr	r3, [sp]
   28400:	sub	r1, r4, #2
   28404:	add	r0, r3, r9, lsl #2
   28408:	ldr	r3, [sp, #204]	; 0xcc
   2840c:	ldr	r3, [r3]
   28410:	cmp	r2, r3
   28414:	str	r3, [sp, #8]
   28418:	blt	28398 <GetDataSlab+0xc47c>
   2841c:	ldr	r3, [sp, #196]	; 0xc4
   28420:	ldr	r2, [fp]
   28424:	ldr	r8, [sp, #4]
   28428:	ldr	r3, [r3]
   2842c:	ldr	r5, [sp, #16]
   28430:	sub	r3, r2, r3
   28434:	add	r6, r6, r3
   28438:	add	r4, r4, r3, lsl #1
   2843c:	ldr	r3, [sp, #208]	; 0xd0
   28440:	cmp	r5, r3
   28444:	bge	283d0 <GetDataSlab+0xc4b4>
   28448:	ldr	r3, [sl, r5, lsl #2]
   2844c:	ldr	r2, [sp, #204]	; 0xcc
   28450:	add	r3, r3, #1
   28454:	str	r3, [sl, r5, lsl #2]
   28458:	mov	r0, r3
   2845c:	ldr	r1, [r2, r5, lsl #2]
   28460:	bl	3fd18 <__aeabi_idivmod>
   28464:	subs	r3, r1, #0
   28468:	bne	283bc <GetDataSlab+0xc4a0>
   2846c:	ldr	r7, [r8, #4]
   28470:	str	r3, [sl, r5, lsl #2]
   28474:	mov	r1, r7
   28478:	mov	r0, r6
   2847c:	bl	3fd18 <__aeabi_idivmod>
   28480:	ldr	r2, [sp, #196]	; 0xc4
   28484:	ldr	r2, [r2, r5, lsl #2]
   28488:	subs	r3, r1, #0
   2848c:	beq	283a8 <GetDataSlab+0xc48c>
   28490:	ldr	r1, [r8]
   28494:	sub	r3, r7, r3
   28498:	mla	r3, r2, r1, r3
   2849c:	add	r4, r4, r3, lsl #1
   284a0:	add	r6, r6, r3
   284a4:	add	r5, r5, #1
   284a8:	add	r8, r8, #4
   284ac:	b	2843c <GetDataSlab+0xc520>
   284b0:	ldrsh	r3, [r4]
   284b4:	str	r3, [r1, r2, lsl #2]
   284b8:	ldr	r3, [r9]
   284bc:	add	r2, r2, #1
   284c0:	add	r6, r6, r3
   284c4:	add	r4, r4, r3, lsl #1
   284c8:	b	28264 <GetDataSlab+0xc348>
   284cc:	cmp	r2, #0
   284d0:	beq	28310 <GetDataSlab+0xc3f4>
   284d4:	ldr	r3, [r8]
   284d8:	mul	r3, r3, r2
   284dc:	b	28308 <GetDataSlab+0xc3ec>
   284e0:	add	r3, sp, #152	; 0x98
   284e4:	add	r3, r3, r5, lsl #2
   284e8:	ldr	r3, [r3, #-120]	; 0xffffff88
   284ec:	add	r6, r6, r3
   284f0:	add	r4, r4, r3, lsl #1
   284f4:	ldr	r3, [sp, #8]
   284f8:	ldr	r2, [sp, #16]
   284fc:	add	r3, r3, r2
   28500:	b	2822c <GetDataSlab+0xc310>
   28504:	ldr	r3, [r9]
   28508:	ldr	ip, [sp, #4]
   2850c:	str	r3, [sp, #16]
   28510:	sub	r3, r3, #1
   28514:	str	r3, [sp, #32]
   28518:	ldr	r3, [fp]
   2851c:	mov	lr, fp
   28520:	str	r3, [sp, #112]	; 0x70
   28524:	ldr	r3, [sp, #204]	; 0xcc
   28528:	mov	r6, #0
   2852c:	mov	r2, #1
   28530:	ldr	r3, [r3]
   28534:	str	r3, [sp, #12]
   28538:	ldr	r3, [sp, #208]	; 0xd0
   2853c:	cmp	r2, r3
   28540:	blt	28650 <GetDataSlab+0xc734>
   28544:	ldr	r3, [sp, #8]
   28548:	add	r4, r3, r6, lsl #1
   2854c:	ldr	r3, [sp, #16]
   28550:	cmp	r3, #1
   28554:	movne	r3, #0
   28558:	moveq	r9, #0
   2855c:	beq	2870c <GetDataSlab+0xc7f0>
   28560:	str	r3, [sp, #8]
   28564:	ldr	r3, [sp, #8]
   28568:	ldr	r2, [sp, #12]
   2856c:	cmp	r3, r2
   28570:	bge	1c04c <GetDataSlab+0x130>
   28574:	ldr	r3, [sp, #196]	; 0xc4
   28578:	ldr	r2, [sp, #8]
   2857c:	ldr	r3, [r3]
   28580:	cmp	r3, #0
   28584:	addne	r4, r4, r3, lsl #1
   28588:	addne	r6, r6, r3
   2858c:	ldr	r3, [sp]
   28590:	add	r1, r3, r2, lsl #2
   28594:	mov	r2, #0
   28598:	ldr	r3, [sp, #204]	; 0xcc
   2859c:	ldr	r3, [r3]
   285a0:	cmp	r2, r3
   285a4:	str	r3, [sp, #16]
   285a8:	blt	287e4 <GetDataSlab+0xc8c8>
   285ac:	ldr	r2, [sp, #16]
   285b0:	ldr	r3, [r9]
   285b4:	ldr	r8, [sp, #4]
   285b8:	mov	r5, #1
   285bc:	mul	r3, r3, r2
   285c0:	ldr	r2, [fp]
   285c4:	sub	r3, r2, r3
   285c8:	ldr	r2, [sp, #196]	; 0xc4
   285cc:	ldr	r2, [r2]
   285d0:	sub	r3, r3, r2
   285d4:	add	r6, r6, r3
   285d8:	add	r4, r4, r3, lsl #1
   285dc:	ldr	r3, [sp, #208]	; 0xd0
   285e0:	cmp	r5, r3
   285e4:	bge	28828 <GetDataSlab+0xc90c>
   285e8:	ldr	r3, [sl, r5, lsl #2]
   285ec:	ldr	r2, [sp, #204]	; 0xcc
   285f0:	add	r3, r3, #1
   285f4:	str	r3, [sl, r5, lsl #2]
   285f8:	mov	r0, r3
   285fc:	ldr	r1, [r2, r5, lsl #2]
   28600:	bl	3fd18 <__aeabi_idivmod>
   28604:	subs	r3, r1, #0
   28608:	bne	28814 <GetDataSlab+0xc8f8>
   2860c:	ldr	r7, [r8, #4]
   28610:	str	r3, [sl, r5, lsl #2]
   28614:	mov	r1, r7
   28618:	mov	r0, r6
   2861c:	bl	3fd18 <__aeabi_idivmod>
   28620:	ldr	r2, [sp, #196]	; 0xc4
   28624:	ldr	r2, [r2, r5, lsl #2]
   28628:	subs	r3, r1, #0
   2862c:	beq	28800 <GetDataSlab+0xc8e4>
   28630:	ldr	r1, [r8]
   28634:	sub	r3, r7, r3
   28638:	mla	r3, r2, r1, r3
   2863c:	add	r4, r4, r3, lsl #1
   28640:	add	r6, r6, r3
   28644:	add	r5, r5, #1
   28648:	add	r8, r8, #4
   2864c:	b	285dc <GetDataSlab+0xc6c0>
   28650:	ldr	r3, [r9, r2, lsl #2]
   28654:	mov	r5, ip
   28658:	sub	r3, r3, #1
   2865c:	str	r3, [r4, r2, lsl #2]
   28660:	ldr	r3, [lr], #4
   28664:	mov	r1, lr
   28668:	str	r3, [ip, #4]
   2866c:	cmp	r1, fp
   28670:	bne	286a4 <GetDataSlab+0xc788>
   28674:	ldr	r3, [sp, #204]	; 0xcc
   28678:	ldr	r1, [sp, #12]
   2867c:	add	ip, ip, #4
   28680:	ldr	r3, [r3, r2, lsl #2]
   28684:	mul	r3, r3, r1
   28688:	ldr	r1, [sp, #196]	; 0xc4
   2868c:	str	r3, [sp, #12]
   28690:	ldr	r3, [r5]
   28694:	ldr	r1, [r1, r2, lsl #2]
   28698:	add	r2, r2, #1
   2869c:	mla	r6, r1, r3, r6
   286a0:	b	28538 <GetDataSlab+0xc61c>
   286a4:	ldr	r7, [r4, r2, lsl #2]
   286a8:	mov	r0, r1
   286ac:	ldr	r3, [r1, #-4]!
   286b0:	mul	r3, r3, r7
   286b4:	ldr	r7, [ip, #4]
   286b8:	str	r3, [r4, r2, lsl #2]
   286bc:	ldr	r3, [r0]
   286c0:	mul	r3, r3, r7
   286c4:	str	r3, [ip, #4]
   286c8:	b	2866c <GetDataSlab+0xc750>
   286cc:	ldrh	r3, [r1, #2]!
   286d0:	str	r3, [r0, r2, lsl #2]
   286d4:	add	r2, r2, #1
   286d8:	b	2873c <GetDataSlab+0xc820>
   286dc:	cmp	r2, #0
   286e0:	beq	287d8 <GetDataSlab+0xc8bc>
   286e4:	ldr	r3, [r8]
   286e8:	mul	r3, r3, r2
   286ec:	b	287d0 <GetDataSlab+0xc8b4>
   286f0:	add	r3, sp, #152	; 0x98
   286f4:	add	r3, r3, r5, lsl #2
   286f8:	ldr	r3, [r3, #-120]	; 0xffffff88
   286fc:	add	r6, r6, r3
   28700:	add	r4, r4, r3, lsl #1
   28704:	ldr	r3, [sp, #8]
   28708:	add	r9, r9, r3
   2870c:	ldr	r3, [sp, #12]
   28710:	cmp	r9, r3
   28714:	bge	1c04c <GetDataSlab+0x130>
   28718:	ldr	r3, [sp, #196]	; 0xc4
   2871c:	mov	r2, #0
   28720:	ldr	r3, [r3]
   28724:	cmp	r3, #0
   28728:	addne	r4, r4, r3, lsl #1
   2872c:	addne	r6, r6, r3
   28730:	ldr	r3, [sp]
   28734:	sub	r1, r4, #2
   28738:	add	r0, r3, r9, lsl #2
   2873c:	ldr	r3, [sp, #204]	; 0xcc
   28740:	ldr	r3, [r3]
   28744:	cmp	r2, r3
   28748:	str	r3, [sp, #8]
   2874c:	blt	286cc <GetDataSlab+0xc7b0>
   28750:	ldr	r3, [sp, #196]	; 0xc4
   28754:	ldr	r2, [fp]
   28758:	ldr	r8, [sp, #4]
   2875c:	ldr	r3, [r3]
   28760:	ldr	r5, [sp, #16]
   28764:	sub	r3, r2, r3
   28768:	add	r6, r6, r3
   2876c:	add	r4, r4, r3, lsl #1
   28770:	ldr	r3, [sp, #208]	; 0xd0
   28774:	cmp	r5, r3
   28778:	bge	28704 <GetDataSlab+0xc7e8>
   2877c:	ldr	r3, [sl, r5, lsl #2]
   28780:	ldr	r2, [sp, #204]	; 0xcc
   28784:	add	r3, r3, #1
   28788:	str	r3, [sl, r5, lsl #2]
   2878c:	mov	r0, r3
   28790:	ldr	r1, [r2, r5, lsl #2]
   28794:	bl	3fd18 <__aeabi_idivmod>
   28798:	subs	r3, r1, #0
   2879c:	bne	286f0 <GetDataSlab+0xc7d4>
   287a0:	ldr	r7, [r8, #4]
   287a4:	str	r3, [sl, r5, lsl #2]
   287a8:	mov	r1, r7
   287ac:	mov	r0, r6
   287b0:	bl	3fd18 <__aeabi_idivmod>
   287b4:	ldr	r2, [sp, #196]	; 0xc4
   287b8:	ldr	r2, [r2, r5, lsl #2]
   287bc:	subs	r3, r1, #0
   287c0:	beq	286dc <GetDataSlab+0xc7c0>
   287c4:	ldr	r1, [r8]
   287c8:	sub	r3, r7, r3
   287cc:	mla	r3, r2, r1, r3
   287d0:	add	r4, r4, r3, lsl #1
   287d4:	add	r6, r6, r3
   287d8:	add	r5, r5, #1
   287dc:	add	r8, r8, #4
   287e0:	b	28770 <GetDataSlab+0xc854>
   287e4:	ldrh	r3, [r4]
   287e8:	str	r3, [r1, r2, lsl #2]
   287ec:	ldr	r3, [r9]
   287f0:	add	r2, r2, #1
   287f4:	add	r6, r6, r3
   287f8:	add	r4, r4, r3, lsl #1
   287fc:	b	28598 <GetDataSlab+0xc67c>
   28800:	cmp	r2, #0
   28804:	beq	28644 <GetDataSlab+0xc728>
   28808:	ldr	r3, [r8]
   2880c:	mul	r3, r3, r2
   28810:	b	2863c <GetDataSlab+0xc720>
   28814:	add	r3, sp, #152	; 0x98
   28818:	add	r3, r3, r5, lsl #2
   2881c:	ldr	r3, [r3, #-120]	; 0xffffff88
   28820:	add	r6, r6, r3
   28824:	add	r4, r4, r3, lsl #1
   28828:	ldr	r3, [sp, #8]
   2882c:	ldr	r2, [sp, #16]
   28830:	add	r3, r3, r2
   28834:	b	28560 <GetDataSlab+0xc644>
   28838:	ldr	r3, [r9]
   2883c:	ldr	ip, [sp, #4]
   28840:	str	r3, [sp, #16]
   28844:	sub	r3, r3, #1
   28848:	str	r3, [sp, #32]
   2884c:	ldr	r3, [fp]
   28850:	mov	lr, fp
   28854:	str	r3, [sp, #112]	; 0x70
   28858:	ldr	r3, [sp, #204]	; 0xcc
   2885c:	mov	r6, #0
   28860:	mov	r2, #1
   28864:	ldr	r3, [r3]
   28868:	str	r3, [sp, #12]
   2886c:	ldr	r3, [sp, #208]	; 0xd0
   28870:	cmp	r2, r3
   28874:	blt	28984 <GetDataSlab+0xca68>
   28878:	ldr	r3, [sp, #8]
   2887c:	add	r4, r3, r6
   28880:	ldr	r3, [sp, #16]
   28884:	cmp	r3, #1
   28888:	movne	r3, #0
   2888c:	moveq	r9, #0
   28890:	beq	28a40 <GetDataSlab+0xcb24>
   28894:	str	r3, [sp, #8]
   28898:	ldr	r3, [sp, #8]
   2889c:	ldr	r2, [sp, #12]
   288a0:	cmp	r3, r2
   288a4:	bge	1c04c <GetDataSlab+0x130>
   288a8:	ldr	r3, [sp, #196]	; 0xc4
   288ac:	ldr	r2, [sp, #8]
   288b0:	ldr	r3, [r3]
   288b4:	cmp	r3, #0
   288b8:	addne	r4, r4, r3
   288bc:	addne	r6, r6, r3
   288c0:	ldr	r3, [sp]
   288c4:	add	r1, r3, r2, lsl #2
   288c8:	mov	r2, #0
   288cc:	ldr	r3, [sp, #204]	; 0xcc
   288d0:	ldr	r3, [r3]
   288d4:	cmp	r2, r3
   288d8:	str	r3, [sp, #16]
   288dc:	blt	28b14 <GetDataSlab+0xcbf8>
   288e0:	ldr	r2, [sp, #16]
   288e4:	ldr	r3, [r9]
   288e8:	ldr	r8, [sp, #4]
   288ec:	mov	r5, #1
   288f0:	mul	r3, r3, r2
   288f4:	ldr	r2, [fp]
   288f8:	sub	r3, r2, r3
   288fc:	ldr	r2, [sp, #196]	; 0xc4
   28900:	ldr	r2, [r2]
   28904:	sub	r3, r3, r2
   28908:	add	r6, r6, r3
   2890c:	add	r4, r4, r3
   28910:	ldr	r3, [sp, #208]	; 0xd0
   28914:	cmp	r5, r3
   28918:	bge	28b58 <GetDataSlab+0xcc3c>
   2891c:	ldr	r3, [sl, r5, lsl #2]
   28920:	ldr	r2, [sp, #204]	; 0xcc
   28924:	add	r3, r3, #1
   28928:	str	r3, [sl, r5, lsl #2]
   2892c:	mov	r0, r3
   28930:	ldr	r1, [r2, r5, lsl #2]
   28934:	bl	3fd18 <__aeabi_idivmod>
   28938:	subs	r3, r1, #0
   2893c:	bne	28b44 <GetDataSlab+0xcc28>
   28940:	ldr	r7, [r8, #4]
   28944:	str	r3, [sl, r5, lsl #2]
   28948:	mov	r1, r7
   2894c:	mov	r0, r6
   28950:	bl	3fd18 <__aeabi_idivmod>
   28954:	ldr	r2, [sp, #196]	; 0xc4
   28958:	ldr	r2, [r2, r5, lsl #2]
   2895c:	subs	r3, r1, #0
   28960:	beq	28b30 <GetDataSlab+0xcc14>
   28964:	ldr	r1, [r8]
   28968:	sub	r3, r7, r3
   2896c:	mla	r3, r2, r1, r3
   28970:	add	r4, r4, r3
   28974:	add	r6, r6, r3
   28978:	add	r5, r5, #1
   2897c:	add	r8, r8, #4
   28980:	b	28910 <GetDataSlab+0xc9f4>
   28984:	ldr	r3, [r9, r2, lsl #2]
   28988:	mov	r5, ip
   2898c:	sub	r3, r3, #1
   28990:	str	r3, [r4, r2, lsl #2]
   28994:	ldr	r3, [lr], #4
   28998:	mov	r1, lr
   2899c:	str	r3, [ip, #4]
   289a0:	cmp	r1, fp
   289a4:	bne	289d8 <GetDataSlab+0xcabc>
   289a8:	ldr	r3, [sp, #204]	; 0xcc
   289ac:	ldr	r1, [sp, #12]
   289b0:	add	ip, ip, #4
   289b4:	ldr	r3, [r3, r2, lsl #2]
   289b8:	mul	r3, r3, r1
   289bc:	ldr	r1, [sp, #196]	; 0xc4
   289c0:	str	r3, [sp, #12]
   289c4:	ldr	r3, [r5]
   289c8:	ldr	r1, [r1, r2, lsl #2]
   289cc:	add	r2, r2, #1
   289d0:	mla	r6, r1, r3, r6
   289d4:	b	2886c <GetDataSlab+0xc950>
   289d8:	ldr	r7, [r4, r2, lsl #2]
   289dc:	mov	r0, r1
   289e0:	ldr	r3, [r1, #-4]!
   289e4:	mul	r3, r3, r7
   289e8:	ldr	r7, [ip, #4]
   289ec:	str	r3, [r4, r2, lsl #2]
   289f0:	ldr	r3, [r0]
   289f4:	mul	r3, r3, r7
   289f8:	str	r3, [ip, #4]
   289fc:	b	289a0 <GetDataSlab+0xca84>
   28a00:	ldrsb	r2, [r4, r3]
   28a04:	str	r2, [r1, r3, lsl #2]
   28a08:	add	r3, r3, #1
   28a0c:	b	28a6c <GetDataSlab+0xcb50>
   28a10:	cmp	r2, #0
   28a14:	beq	28b08 <GetDataSlab+0xcbec>
   28a18:	ldr	r3, [r8]
   28a1c:	mul	r3, r3, r2
   28a20:	b	28b00 <GetDataSlab+0xcbe4>
   28a24:	add	r3, sp, #152	; 0x98
   28a28:	add	r3, r3, r5, lsl #2
   28a2c:	ldr	r3, [r3, #-120]	; 0xffffff88
   28a30:	add	r6, r6, r3
   28a34:	add	r4, r4, r3
   28a38:	ldr	r3, [sp, #8]
   28a3c:	add	r9, r9, r3
   28a40:	ldr	r3, [sp, #12]
   28a44:	cmp	r9, r3
   28a48:	bge	1c04c <GetDataSlab+0x130>
   28a4c:	ldr	r3, [sp, #196]	; 0xc4
   28a50:	ldr	r3, [r3]
   28a54:	cmp	r3, #0
   28a58:	addne	r4, r4, r3
   28a5c:	addne	r6, r6, r3
   28a60:	ldr	r3, [sp]
   28a64:	add	r1, r3, r9, lsl #2
   28a68:	mov	r3, #0
   28a6c:	ldr	r2, [sp, #204]	; 0xcc
   28a70:	ldr	r2, [r2]
   28a74:	cmp	r3, r2
   28a78:	str	r2, [sp, #8]
   28a7c:	blt	28a00 <GetDataSlab+0xcae4>
   28a80:	ldr	r3, [sp, #196]	; 0xc4
   28a84:	ldr	r2, [fp]
   28a88:	ldr	r8, [sp, #4]
   28a8c:	ldr	r3, [r3]
   28a90:	ldr	r5, [sp, #16]
   28a94:	sub	r3, r2, r3
   28a98:	add	r6, r6, r3
   28a9c:	add	r4, r4, r3
   28aa0:	ldr	r3, [sp, #208]	; 0xd0
   28aa4:	cmp	r5, r3
   28aa8:	bge	28a38 <GetDataSlab+0xcb1c>
   28aac:	ldr	r3, [sl, r5, lsl #2]
   28ab0:	ldr	r2, [sp, #204]	; 0xcc
   28ab4:	add	r3, r3, #1
   28ab8:	str	r3, [sl, r5, lsl #2]
   28abc:	mov	r0, r3
   28ac0:	ldr	r1, [r2, r5, lsl #2]
   28ac4:	bl	3fd18 <__aeabi_idivmod>
   28ac8:	subs	r3, r1, #0
   28acc:	bne	28a24 <GetDataSlab+0xcb08>
   28ad0:	ldr	r7, [r8, #4]
   28ad4:	str	r3, [sl, r5, lsl #2]
   28ad8:	mov	r1, r7
   28adc:	mov	r0, r6
   28ae0:	bl	3fd18 <__aeabi_idivmod>
   28ae4:	ldr	r2, [sp, #196]	; 0xc4
   28ae8:	ldr	r2, [r2, r5, lsl #2]
   28aec:	subs	r3, r1, #0
   28af0:	beq	28a10 <GetDataSlab+0xcaf4>
   28af4:	ldr	r1, [r8]
   28af8:	sub	r3, r7, r3
   28afc:	mla	r3, r2, r1, r3
   28b00:	add	r4, r4, r3
   28b04:	add	r6, r6, r3
   28b08:	add	r5, r5, #1
   28b0c:	add	r8, r8, #4
   28b10:	b	28aa0 <GetDataSlab+0xcb84>
   28b14:	ldrsb	r3, [r4]
   28b18:	str	r3, [r1, r2, lsl #2]
   28b1c:	ldr	r3, [r9]
   28b20:	add	r2, r2, #1
   28b24:	add	r4, r4, r3
   28b28:	add	r6, r6, r3
   28b2c:	b	288cc <GetDataSlab+0xc9b0>
   28b30:	cmp	r2, #0
   28b34:	beq	28978 <GetDataSlab+0xca5c>
   28b38:	ldr	r3, [r8]
   28b3c:	mul	r3, r3, r2
   28b40:	b	28970 <GetDataSlab+0xca54>
   28b44:	add	r3, sp, #152	; 0x98
   28b48:	add	r3, r3, r5, lsl #2
   28b4c:	ldr	r3, [r3, #-120]	; 0xffffff88
   28b50:	add	r6, r6, r3
   28b54:	add	r4, r4, r3
   28b58:	ldr	r3, [sp, #8]
   28b5c:	ldr	r2, [sp, #16]
   28b60:	add	r3, r3, r2
   28b64:	b	28894 <GetDataSlab+0xc978>
   28b68:	ldr	r3, [r9]
   28b6c:	ldr	ip, [sp, #4]
   28b70:	str	r3, [sp, #16]
   28b74:	sub	r3, r3, #1
   28b78:	str	r3, [sp, #32]
   28b7c:	ldr	r3, [fp]
   28b80:	mov	lr, fp
   28b84:	str	r3, [sp, #112]	; 0x70
   28b88:	ldr	r3, [sp, #204]	; 0xcc
   28b8c:	mov	r6, #0
   28b90:	mov	r2, #1
   28b94:	ldr	r3, [r3]
   28b98:	str	r3, [sp, #12]
   28b9c:	ldr	r3, [sp, #208]	; 0xd0
   28ba0:	cmp	r2, r3
   28ba4:	blt	28cb4 <GetDataSlab+0xcd98>
   28ba8:	ldr	r3, [sp, #8]
   28bac:	add	r4, r3, r6
   28bb0:	ldr	r3, [sp, #16]
   28bb4:	cmp	r3, #1
   28bb8:	movne	r3, #0
   28bbc:	moveq	r9, #0
   28bc0:	beq	28d70 <GetDataSlab+0xce54>
   28bc4:	str	r3, [sp, #8]
   28bc8:	ldr	r3, [sp, #8]
   28bcc:	ldr	r2, [sp, #12]
   28bd0:	cmp	r3, r2
   28bd4:	bge	1c04c <GetDataSlab+0x130>
   28bd8:	ldr	r3, [sp, #196]	; 0xc4
   28bdc:	ldr	r2, [sp, #8]
   28be0:	ldr	r3, [r3]
   28be4:	cmp	r3, #0
   28be8:	addne	r4, r4, r3
   28bec:	addne	r6, r6, r3
   28bf0:	ldr	r3, [sp]
   28bf4:	add	r1, r3, r2, lsl #2
   28bf8:	mov	r2, #0
   28bfc:	ldr	r3, [sp, #204]	; 0xcc
   28c00:	ldr	r3, [r3]
   28c04:	cmp	r2, r3
   28c08:	str	r3, [sp, #16]
   28c0c:	blt	28e44 <GetDataSlab+0xcf28>
   28c10:	ldr	r2, [sp, #16]
   28c14:	ldr	r3, [r9]
   28c18:	ldr	r8, [sp, #4]
   28c1c:	mov	r5, #1
   28c20:	mul	r3, r3, r2
   28c24:	ldr	r2, [fp]
   28c28:	sub	r3, r2, r3
   28c2c:	ldr	r2, [sp, #196]	; 0xc4
   28c30:	ldr	r2, [r2]
   28c34:	sub	r3, r3, r2
   28c38:	add	r6, r6, r3
   28c3c:	add	r4, r4, r3
   28c40:	ldr	r3, [sp, #208]	; 0xd0
   28c44:	cmp	r5, r3
   28c48:	bge	28e88 <GetDataSlab+0xcf6c>
   28c4c:	ldr	r3, [sl, r5, lsl #2]
   28c50:	ldr	r2, [sp, #204]	; 0xcc
   28c54:	add	r3, r3, #1
   28c58:	str	r3, [sl, r5, lsl #2]
   28c5c:	mov	r0, r3
   28c60:	ldr	r1, [r2, r5, lsl #2]
   28c64:	bl	3fd18 <__aeabi_idivmod>
   28c68:	subs	r3, r1, #0
   28c6c:	bne	28e74 <GetDataSlab+0xcf58>
   28c70:	ldr	r7, [r8, #4]
   28c74:	str	r3, [sl, r5, lsl #2]
   28c78:	mov	r1, r7
   28c7c:	mov	r0, r6
   28c80:	bl	3fd18 <__aeabi_idivmod>
   28c84:	ldr	r2, [sp, #196]	; 0xc4
   28c88:	ldr	r2, [r2, r5, lsl #2]
   28c8c:	subs	r3, r1, #0
   28c90:	beq	28e60 <GetDataSlab+0xcf44>
   28c94:	ldr	r1, [r8]
   28c98:	sub	r3, r7, r3
   28c9c:	mla	r3, r2, r1, r3
   28ca0:	add	r4, r4, r3
   28ca4:	add	r6, r6, r3
   28ca8:	add	r5, r5, #1
   28cac:	add	r8, r8, #4
   28cb0:	b	28c40 <GetDataSlab+0xcd24>
   28cb4:	ldr	r3, [r9, r2, lsl #2]
   28cb8:	mov	r5, ip
   28cbc:	sub	r3, r3, #1
   28cc0:	str	r3, [r4, r2, lsl #2]
   28cc4:	ldr	r3, [lr], #4
   28cc8:	mov	r1, lr
   28ccc:	str	r3, [ip, #4]
   28cd0:	cmp	r1, fp
   28cd4:	bne	28d08 <GetDataSlab+0xcdec>
   28cd8:	ldr	r3, [sp, #204]	; 0xcc
   28cdc:	ldr	r1, [sp, #12]
   28ce0:	add	ip, ip, #4
   28ce4:	ldr	r3, [r3, r2, lsl #2]
   28ce8:	mul	r3, r3, r1
   28cec:	ldr	r1, [sp, #196]	; 0xc4
   28cf0:	str	r3, [sp, #12]
   28cf4:	ldr	r3, [r5]
   28cf8:	ldr	r1, [r1, r2, lsl #2]
   28cfc:	add	r2, r2, #1
   28d00:	mla	r6, r1, r3, r6
   28d04:	b	28b9c <GetDataSlab+0xcc80>
   28d08:	ldr	r7, [r4, r2, lsl #2]
   28d0c:	mov	r0, r1
   28d10:	ldr	r3, [r1, #-4]!
   28d14:	mul	r3, r3, r7
   28d18:	ldr	r7, [ip, #4]
   28d1c:	str	r3, [r4, r2, lsl #2]
   28d20:	ldr	r3, [r0]
   28d24:	mul	r3, r3, r7
   28d28:	str	r3, [ip, #4]
   28d2c:	b	28cd0 <GetDataSlab+0xcdb4>
   28d30:	ldrb	r2, [r4, r3]
   28d34:	str	r2, [r1, r3, lsl #2]
   28d38:	add	r3, r3, #1
   28d3c:	b	28d9c <GetDataSlab+0xce80>
   28d40:	cmp	r2, #0
   28d44:	beq	28e38 <GetDataSlab+0xcf1c>
   28d48:	ldr	r3, [r8]
   28d4c:	mul	r3, r3, r2
   28d50:	b	28e30 <GetDataSlab+0xcf14>
   28d54:	add	r3, sp, #152	; 0x98
   28d58:	add	r3, r3, r5, lsl #2
   28d5c:	ldr	r3, [r3, #-120]	; 0xffffff88
   28d60:	add	r6, r6, r3
   28d64:	add	r4, r4, r3
   28d68:	ldr	r3, [sp, #8]
   28d6c:	add	r9, r9, r3
   28d70:	ldr	r3, [sp, #12]
   28d74:	cmp	r9, r3
   28d78:	bge	1c04c <GetDataSlab+0x130>
   28d7c:	ldr	r3, [sp, #196]	; 0xc4
   28d80:	ldr	r3, [r3]
   28d84:	cmp	r3, #0
   28d88:	addne	r4, r4, r3
   28d8c:	addne	r6, r6, r3
   28d90:	ldr	r3, [sp]
   28d94:	add	r1, r3, r9, lsl #2
   28d98:	mov	r3, #0
   28d9c:	ldr	r2, [sp, #204]	; 0xcc
   28da0:	ldr	r2, [r2]
   28da4:	cmp	r3, r2
   28da8:	str	r2, [sp, #8]
   28dac:	blt	28d30 <GetDataSlab+0xce14>
   28db0:	ldr	r3, [sp, #196]	; 0xc4
   28db4:	ldr	r2, [fp]
   28db8:	ldr	r8, [sp, #4]
   28dbc:	ldr	r3, [r3]
   28dc0:	ldr	r5, [sp, #16]
   28dc4:	sub	r3, r2, r3
   28dc8:	add	r6, r6, r3
   28dcc:	add	r4, r4, r3
   28dd0:	ldr	r3, [sp, #208]	; 0xd0
   28dd4:	cmp	r5, r3
   28dd8:	bge	28d68 <GetDataSlab+0xce4c>
   28ddc:	ldr	r3, [sl, r5, lsl #2]
   28de0:	ldr	r2, [sp, #204]	; 0xcc
   28de4:	add	r3, r3, #1
   28de8:	str	r3, [sl, r5, lsl #2]
   28dec:	mov	r0, r3
   28df0:	ldr	r1, [r2, r5, lsl #2]
   28df4:	bl	3fd18 <__aeabi_idivmod>
   28df8:	subs	r3, r1, #0
   28dfc:	bne	28d54 <GetDataSlab+0xce38>
   28e00:	ldr	r7, [r8, #4]
   28e04:	str	r3, [sl, r5, lsl #2]
   28e08:	mov	r1, r7
   28e0c:	mov	r0, r6
   28e10:	bl	3fd18 <__aeabi_idivmod>
   28e14:	ldr	r2, [sp, #196]	; 0xc4
   28e18:	ldr	r2, [r2, r5, lsl #2]
   28e1c:	subs	r3, r1, #0
   28e20:	beq	28d40 <GetDataSlab+0xce24>
   28e24:	ldr	r1, [r8]
   28e28:	sub	r3, r7, r3
   28e2c:	mla	r3, r2, r1, r3
   28e30:	add	r4, r4, r3
   28e34:	add	r6, r6, r3
   28e38:	add	r5, r5, #1
   28e3c:	add	r8, r8, #4
   28e40:	b	28dd0 <GetDataSlab+0xceb4>
   28e44:	ldrb	r3, [r4]
   28e48:	str	r3, [r1, r2, lsl #2]
   28e4c:	ldr	r3, [r9]
   28e50:	add	r2, r2, #1
   28e54:	add	r4, r4, r3
   28e58:	add	r6, r6, r3
   28e5c:	b	28bfc <GetDataSlab+0xcce0>
   28e60:	cmp	r2, #0
   28e64:	beq	28ca8 <GetDataSlab+0xcd8c>
   28e68:	ldr	r3, [r8]
   28e6c:	mul	r3, r3, r2
   28e70:	b	28ca0 <GetDataSlab+0xcd84>
   28e74:	add	r3, sp, #152	; 0x98
   28e78:	add	r3, r3, r5, lsl #2
   28e7c:	ldr	r3, [r3, #-120]	; 0xffffff88
   28e80:	add	r6, r6, r3
   28e84:	add	r4, r4, r3
   28e88:	ldr	r3, [sp, #8]
   28e8c:	ldr	r2, [sp, #16]
   28e90:	add	r3, r3, r2
   28e94:	b	28bc4 <GetDataSlab+0xcca8>
   28e98:	cmp	r5, #12
   28e9c:	bne	291d0 <GetDataSlab+0xd2b4>
   28ea0:	ldr	r3, [r9]
   28ea4:	ldr	ip, [sp, #4]
   28ea8:	str	r3, [sp, #16]
   28eac:	sub	r3, r3, #1
   28eb0:	str	r3, [sp, #32]
   28eb4:	ldr	r3, [fp]
   28eb8:	mov	lr, fp
   28ebc:	str	r3, [sp, #112]	; 0x70
   28ec0:	ldr	r3, [sp, #204]	; 0xcc
   28ec4:	mov	r6, #0
   28ec8:	mov	r2, #1
   28ecc:	ldr	r3, [r3]
   28ed0:	str	r3, [sp, #12]
   28ed4:	ldr	r3, [sp, #208]	; 0xd0
   28ed8:	cmp	r2, r3
   28edc:	blt	28fe8 <GetDataSlab+0xd0cc>
   28ee0:	ldr	r3, [sp, #8]
   28ee4:	add	r4, r3, r6, lsl #3
   28ee8:	ldr	r3, [sp, #16]
   28eec:	cmp	r3, #1
   28ef0:	movne	r3, #0
   28ef4:	moveq	r9, #0
   28ef8:	beq	290a4 <GetDataSlab+0xd188>
   28efc:	str	r3, [sp, #8]
   28f00:	ldr	r3, [sp, #8]
   28f04:	ldr	r2, [sp, #12]
   28f08:	cmp	r3, r2
   28f0c:	bge	1c04c <GetDataSlab+0x130>
   28f10:	ldr	r3, [sp, #196]	; 0xc4
   28f14:	ldr	r2, [sp, #8]
   28f18:	ldr	r3, [r3]
   28f1c:	cmp	r3, #0
   28f20:	addne	r4, r4, r3, lsl #3
   28f24:	addne	r6, r6, r3
   28f28:	ldr	r3, [sp]
   28f2c:	add	r1, r3, r2, lsl #2
   28f30:	mov	r3, #0
   28f34:	ldr	r2, [sp, #204]	; 0xcc
   28f38:	ldr	r2, [r2]
   28f3c:	cmp	r3, r2
   28f40:	str	r2, [sp, #16]
   28f44:	blt	2917c <GetDataSlab+0xd260>
   28f48:	ldr	r3, [r9]
   28f4c:	ldr	r8, [sp, #4]
   28f50:	mov	r5, #1
   28f54:	mul	r3, r3, r2
   28f58:	ldr	r2, [fp]
   28f5c:	sub	r3, r2, r3
   28f60:	ldr	r2, [sp, #196]	; 0xc4
   28f64:	ldr	r2, [r2]
   28f68:	sub	r3, r3, r2
   28f6c:	add	r6, r6, r3
   28f70:	add	r4, r4, r3, lsl #3
   28f74:	ldr	r3, [sp, #208]	; 0xd0
   28f78:	cmp	r5, r3
   28f7c:	bge	291c0 <GetDataSlab+0xd2a4>
   28f80:	ldr	r3, [sl, r5, lsl #2]
   28f84:	ldr	r2, [sp, #204]	; 0xcc
   28f88:	add	r3, r3, #1
   28f8c:	str	r3, [sl, r5, lsl #2]
   28f90:	mov	r0, r3
   28f94:	ldr	r1, [r2, r5, lsl #2]
   28f98:	bl	3fd18 <__aeabi_idivmod>
   28f9c:	subs	r3, r1, #0
   28fa0:	bne	291ac <GetDataSlab+0xd290>
   28fa4:	ldr	r7, [r8, #4]
   28fa8:	str	r3, [sl, r5, lsl #2]
   28fac:	mov	r1, r7
   28fb0:	mov	r0, r6
   28fb4:	bl	3fd18 <__aeabi_idivmod>
   28fb8:	ldr	r2, [sp, #196]	; 0xc4
   28fbc:	ldr	r2, [r2, r5, lsl #2]
   28fc0:	subs	r3, r1, #0
   28fc4:	beq	29198 <GetDataSlab+0xd27c>
   28fc8:	ldr	r1, [r8]
   28fcc:	sub	r3, r7, r3
   28fd0:	mla	r3, r2, r1, r3
   28fd4:	add	r4, r4, r3, lsl #3
   28fd8:	add	r6, r6, r3
   28fdc:	add	r5, r5, #1
   28fe0:	add	r8, r8, #4
   28fe4:	b	28f74 <GetDataSlab+0xd058>
   28fe8:	ldr	r3, [r9, r2, lsl #2]
   28fec:	mov	r5, ip
   28ff0:	sub	r3, r3, #1
   28ff4:	str	r3, [r4, r2, lsl #2]
   28ff8:	ldr	r3, [lr], #4
   28ffc:	mov	r1, lr
   29000:	str	r3, [ip, #4]
   29004:	cmp	r1, fp
   29008:	bne	2903c <GetDataSlab+0xd120>
   2900c:	ldr	r3, [sp, #204]	; 0xcc
   29010:	ldr	r1, [sp, #12]
   29014:	add	ip, ip, #4
   29018:	ldr	r3, [r3, r2, lsl #2]
   2901c:	mul	r3, r3, r1
   29020:	ldr	r1, [sp, #196]	; 0xc4
   29024:	str	r3, [sp, #12]
   29028:	ldr	r3, [r5]
   2902c:	ldr	r1, [r1, r2, lsl #2]
   29030:	add	r2, r2, #1
   29034:	mla	r6, r1, r3, r6
   29038:	b	28ed4 <GetDataSlab+0xcfb8>
   2903c:	ldr	r7, [r4, r2, lsl #2]
   29040:	mov	r0, r1
   29044:	ldr	r3, [r1, #-4]!
   29048:	mul	r3, r3, r7
   2904c:	ldr	r7, [ip, #4]
   29050:	str	r3, [r4, r2, lsl #2]
   29054:	ldr	r3, [r0]
   29058:	mul	r3, r3, r7
   2905c:	str	r3, [ip, #4]
   29060:	b	29004 <GetDataSlab+0xd0e8>
   29064:	ldr	r3, [r1, #8]!
   29068:	str	r3, [r0, r2, lsl #2]
   2906c:	add	r2, r2, #1
   29070:	b	290d4 <GetDataSlab+0xd1b8>
   29074:	cmp	r2, #0
   29078:	beq	29170 <GetDataSlab+0xd254>
   2907c:	ldr	r3, [r8]
   29080:	mul	r3, r3, r2
   29084:	b	29168 <GetDataSlab+0xd24c>
   29088:	add	r3, sp, #152	; 0x98
   2908c:	add	r3, r3, r5, lsl #2
   29090:	ldr	r3, [r3, #-120]	; 0xffffff88
   29094:	add	r6, r6, r3
   29098:	add	r4, r4, r3, lsl #3
   2909c:	ldr	r3, [sp, #8]
   290a0:	add	r9, r9, r3
   290a4:	ldr	r3, [sp, #12]
   290a8:	cmp	r9, r3
   290ac:	bge	1c04c <GetDataSlab+0x130>
   290b0:	ldr	r3, [sp, #196]	; 0xc4
   290b4:	mov	r2, #0
   290b8:	ldr	r3, [r3]
   290bc:	cmp	r3, #0
   290c0:	addne	r4, r4, r3, lsl #3
   290c4:	addne	r6, r6, r3
   290c8:	ldr	r3, [sp]
   290cc:	sub	r1, r4, #8
   290d0:	add	r0, r3, r9, lsl #2
   290d4:	ldr	r3, [sp, #204]	; 0xcc
   290d8:	ldr	r3, [r3]
   290dc:	cmp	r2, r3
   290e0:	str	r3, [sp, #8]
   290e4:	blt	29064 <GetDataSlab+0xd148>
   290e8:	ldr	r3, [sp, #196]	; 0xc4
   290ec:	ldr	r2, [fp]
   290f0:	ldr	r8, [sp, #4]
   290f4:	ldr	r3, [r3]
   290f8:	ldr	r5, [sp, #16]
   290fc:	sub	r3, r2, r3
   29100:	add	r6, r6, r3
   29104:	add	r4, r4, r3, lsl #3
   29108:	ldr	r3, [sp, #208]	; 0xd0
   2910c:	cmp	r5, r3
   29110:	bge	2909c <GetDataSlab+0xd180>
   29114:	ldr	r3, [sl, r5, lsl #2]
   29118:	ldr	r2, [sp, #204]	; 0xcc
   2911c:	add	r3, r3, #1
   29120:	str	r3, [sl, r5, lsl #2]
   29124:	mov	r0, r3
   29128:	ldr	r1, [r2, r5, lsl #2]
   2912c:	bl	3fd18 <__aeabi_idivmod>
   29130:	subs	r3, r1, #0
   29134:	bne	29088 <GetDataSlab+0xd16c>
   29138:	ldr	r7, [r8, #4]
   2913c:	str	r3, [sl, r5, lsl #2]
   29140:	mov	r1, r7
   29144:	mov	r0, r6
   29148:	bl	3fd18 <__aeabi_idivmod>
   2914c:	ldr	r2, [sp, #196]	; 0xc4
   29150:	ldr	r2, [r2, r5, lsl #2]
   29154:	subs	r3, r1, #0
   29158:	beq	29074 <GetDataSlab+0xd158>
   2915c:	ldr	r1, [r8]
   29160:	sub	r3, r7, r3
   29164:	mla	r3, r2, r1, r3
   29168:	add	r4, r4, r3, lsl #3
   2916c:	add	r6, r6, r3
   29170:	add	r5, r5, #1
   29174:	add	r8, r8, #4
   29178:	b	29108 <GetDataSlab+0xd1ec>
   2917c:	ldr	r2, [r4]
   29180:	str	r2, [r1, r3, lsl #2]
   29184:	ldr	r2, [r9]
   29188:	add	r3, r3, #1
   2918c:	add	r6, r6, r2
   29190:	add	r4, r4, r2, lsl #3
   29194:	b	28f34 <GetDataSlab+0xd018>
   29198:	cmp	r2, #0
   2919c:	beq	28fdc <GetDataSlab+0xd0c0>
   291a0:	ldr	r3, [r8]
   291a4:	mul	r3, r3, r2
   291a8:	b	28fd4 <GetDataSlab+0xd0b8>
   291ac:	add	r3, sp, #152	; 0x98
   291b0:	add	r3, r3, r5, lsl #2
   291b4:	ldr	r3, [r3, #-120]	; 0xffffff88
   291b8:	add	r6, r6, r3
   291bc:	add	r4, r4, r3, lsl #3
   291c0:	ldr	r3, [sp, #8]
   291c4:	ldr	r2, [sp, #16]
   291c8:	add	r3, r3, r2
   291cc:	b	28efc <GetDataSlab+0xcfe0>
   291d0:	cmp	r5, #13
   291d4:	bne	337fc <GetDataSlab+0x178e0>
   291d8:	ldr	r3, [r9]
   291dc:	ldr	ip, [sp, #4]
   291e0:	str	r3, [sp, #16]
   291e4:	sub	r3, r3, #1
   291e8:	str	r3, [sp, #32]
   291ec:	ldr	r3, [fp]
   291f0:	mov	lr, fp
   291f4:	str	r3, [sp, #112]	; 0x70
   291f8:	ldr	r3, [sp, #204]	; 0xcc
   291fc:	mov	r6, #0
   29200:	mov	r2, #1
   29204:	ldr	r3, [r3]
   29208:	str	r3, [sp, #12]
   2920c:	ldr	r3, [sp, #208]	; 0xd0
   29210:	cmp	r2, r3
   29214:	blt	29320 <GetDataSlab+0xd404>
   29218:	ldr	r3, [sp, #8]
   2921c:	add	r4, r3, r6, lsl #3
   29220:	ldr	r3, [sp, #16]
   29224:	cmp	r3, #1
   29228:	movne	r3, #0
   2922c:	moveq	r9, #0
   29230:	beq	293dc <GetDataSlab+0xd4c0>
   29234:	str	r3, [sp, #8]
   29238:	ldr	r3, [sp, #8]
   2923c:	ldr	r2, [sp, #12]
   29240:	cmp	r3, r2
   29244:	bge	1c04c <GetDataSlab+0x130>
   29248:	ldr	r3, [sp, #196]	; 0xc4
   2924c:	ldr	r2, [sp, #8]
   29250:	ldr	r3, [r3]
   29254:	cmp	r3, #0
   29258:	addne	r4, r4, r3, lsl #3
   2925c:	addne	r6, r6, r3
   29260:	ldr	r3, [sp]
   29264:	add	r1, r3, r2, lsl #2
   29268:	mov	r3, #0
   2926c:	ldr	r2, [sp, #204]	; 0xcc
   29270:	ldr	r2, [r2]
   29274:	cmp	r3, r2
   29278:	str	r2, [sp, #16]
   2927c:	blt	294b4 <GetDataSlab+0xd598>
   29280:	ldr	r3, [r9]
   29284:	ldr	r8, [sp, #4]
   29288:	mov	r5, #1
   2928c:	mul	r3, r3, r2
   29290:	ldr	r2, [fp]
   29294:	sub	r3, r2, r3
   29298:	ldr	r2, [sp, #196]	; 0xc4
   2929c:	ldr	r2, [r2]
   292a0:	sub	r3, r3, r2
   292a4:	add	r6, r6, r3
   292a8:	add	r4, r4, r3, lsl #3
   292ac:	ldr	r3, [sp, #208]	; 0xd0
   292b0:	cmp	r5, r3
   292b4:	bge	294f8 <GetDataSlab+0xd5dc>
   292b8:	ldr	r3, [sl, r5, lsl #2]
   292bc:	ldr	r2, [sp, #204]	; 0xcc
   292c0:	add	r3, r3, #1
   292c4:	str	r3, [sl, r5, lsl #2]
   292c8:	mov	r0, r3
   292cc:	ldr	r1, [r2, r5, lsl #2]
   292d0:	bl	3fd18 <__aeabi_idivmod>
   292d4:	subs	r3, r1, #0
   292d8:	bne	294e4 <GetDataSlab+0xd5c8>
   292dc:	ldr	r7, [r8, #4]
   292e0:	str	r3, [sl, r5, lsl #2]
   292e4:	mov	r1, r7
   292e8:	mov	r0, r6
   292ec:	bl	3fd18 <__aeabi_idivmod>
   292f0:	ldr	r2, [sp, #196]	; 0xc4
   292f4:	ldr	r2, [r2, r5, lsl #2]
   292f8:	subs	r3, r1, #0
   292fc:	beq	294d0 <GetDataSlab+0xd5b4>
   29300:	ldr	r1, [r8]
   29304:	sub	r3, r7, r3
   29308:	mla	r3, r2, r1, r3
   2930c:	add	r4, r4, r3, lsl #3
   29310:	add	r6, r6, r3
   29314:	add	r5, r5, #1
   29318:	add	r8, r8, #4
   2931c:	b	292ac <GetDataSlab+0xd390>
   29320:	ldr	r3, [r9, r2, lsl #2]
   29324:	mov	r5, ip
   29328:	sub	r3, r3, #1
   2932c:	str	r3, [r4, r2, lsl #2]
   29330:	ldr	r3, [lr], #4
   29334:	mov	r1, lr
   29338:	str	r3, [ip, #4]
   2933c:	cmp	r1, fp
   29340:	bne	29374 <GetDataSlab+0xd458>
   29344:	ldr	r3, [sp, #204]	; 0xcc
   29348:	ldr	r1, [sp, #12]
   2934c:	add	ip, ip, #4
   29350:	ldr	r3, [r3, r2, lsl #2]
   29354:	mul	r3, r3, r1
   29358:	ldr	r1, [sp, #196]	; 0xc4
   2935c:	str	r3, [sp, #12]
   29360:	ldr	r3, [r5]
   29364:	ldr	r1, [r1, r2, lsl #2]
   29368:	add	r2, r2, #1
   2936c:	mla	r6, r1, r3, r6
   29370:	b	2920c <GetDataSlab+0xd2f0>
   29374:	ldr	r7, [r4, r2, lsl #2]
   29378:	mov	r0, r1
   2937c:	ldr	r3, [r1, #-4]!
   29380:	mul	r3, r3, r7
   29384:	ldr	r7, [ip, #4]
   29388:	str	r3, [r4, r2, lsl #2]
   2938c:	ldr	r3, [r0]
   29390:	mul	r3, r3, r7
   29394:	str	r3, [ip, #4]
   29398:	b	2933c <GetDataSlab+0xd420>
   2939c:	ldr	r3, [r1, #8]!
   293a0:	str	r3, [r0, r2, lsl #2]
   293a4:	add	r2, r2, #1
   293a8:	b	2940c <GetDataSlab+0xd4f0>
   293ac:	cmp	r2, #0
   293b0:	beq	294a8 <GetDataSlab+0xd58c>
   293b4:	ldr	r3, [r8]
   293b8:	mul	r3, r3, r2
   293bc:	b	294a0 <GetDataSlab+0xd584>
   293c0:	add	r3, sp, #152	; 0x98
   293c4:	add	r3, r3, r5, lsl #2
   293c8:	ldr	r3, [r3, #-120]	; 0xffffff88
   293cc:	add	r6, r6, r3
   293d0:	add	r4, r4, r3, lsl #3
   293d4:	ldr	r3, [sp, #8]
   293d8:	add	r9, r9, r3
   293dc:	ldr	r3, [sp, #12]
   293e0:	cmp	r9, r3
   293e4:	bge	1c04c <GetDataSlab+0x130>
   293e8:	ldr	r3, [sp, #196]	; 0xc4
   293ec:	mov	r2, #0
   293f0:	ldr	r3, [r3]
   293f4:	cmp	r3, #0
   293f8:	addne	r4, r4, r3, lsl #3
   293fc:	addne	r6, r6, r3
   29400:	ldr	r3, [sp]
   29404:	sub	r1, r4, #8
   29408:	add	r0, r3, r9, lsl #2
   2940c:	ldr	r3, [sp, #204]	; 0xcc
   29410:	ldr	r3, [r3]
   29414:	cmp	r2, r3
   29418:	str	r3, [sp, #8]
   2941c:	blt	2939c <GetDataSlab+0xd480>
   29420:	ldr	r3, [sp, #196]	; 0xc4
   29424:	ldr	r2, [fp]
   29428:	ldr	r8, [sp, #4]
   2942c:	ldr	r3, [r3]
   29430:	ldr	r5, [sp, #16]
   29434:	sub	r3, r2, r3
   29438:	add	r6, r6, r3
   2943c:	add	r4, r4, r3, lsl #3
   29440:	ldr	r3, [sp, #208]	; 0xd0
   29444:	cmp	r5, r3
   29448:	bge	293d4 <GetDataSlab+0xd4b8>
   2944c:	ldr	r3, [sl, r5, lsl #2]
   29450:	ldr	r2, [sp, #204]	; 0xcc
   29454:	add	r3, r3, #1
   29458:	str	r3, [sl, r5, lsl #2]
   2945c:	mov	r0, r3
   29460:	ldr	r1, [r2, r5, lsl #2]
   29464:	bl	3fd18 <__aeabi_idivmod>
   29468:	subs	r3, r1, #0
   2946c:	bne	293c0 <GetDataSlab+0xd4a4>
   29470:	ldr	r7, [r8, #4]
   29474:	str	r3, [sl, r5, lsl #2]
   29478:	mov	r1, r7
   2947c:	mov	r0, r6
   29480:	bl	3fd18 <__aeabi_idivmod>
   29484:	ldr	r2, [sp, #196]	; 0xc4
   29488:	ldr	r2, [r2, r5, lsl #2]
   2948c:	subs	r3, r1, #0
   29490:	beq	293ac <GetDataSlab+0xd490>
   29494:	ldr	r1, [r8]
   29498:	sub	r3, r7, r3
   2949c:	mla	r3, r2, r1, r3
   294a0:	add	r4, r4, r3, lsl #3
   294a4:	add	r6, r6, r3
   294a8:	add	r5, r5, #1
   294ac:	add	r8, r8, #4
   294b0:	b	29440 <GetDataSlab+0xd524>
   294b4:	ldr	r2, [r4]
   294b8:	str	r2, [r1, r3, lsl #2]
   294bc:	ldr	r2, [r9]
   294c0:	add	r3, r3, #1
   294c4:	add	r6, r6, r2
   294c8:	add	r4, r4, r2, lsl #3
   294cc:	b	2926c <GetDataSlab+0xd350>
   294d0:	cmp	r2, #0
   294d4:	beq	29314 <GetDataSlab+0xd3f8>
   294d8:	ldr	r3, [r8]
   294dc:	mul	r3, r3, r2
   294e0:	b	2930c <GetDataSlab+0xd3f0>
   294e4:	add	r3, sp, #152	; 0x98
   294e8:	add	r3, r3, r5, lsl #2
   294ec:	ldr	r3, [r3, #-120]	; 0xffffff88
   294f0:	add	r6, r6, r3
   294f4:	add	r4, r4, r3, lsl #3
   294f8:	ldr	r3, [sp, #8]
   294fc:	ldr	r2, [sp, #16]
   29500:	add	r3, r3, r2
   29504:	b	29234 <GetDataSlab+0xd318>
   29508:	sub	r3, r5, #1
   2950c:	cmp	r3, #8
   29510:	addls	pc, pc, r3, lsl #2
   29514:	b	2aedc <GetDataSlab+0xefc0>
   29518:	b	2a87c <GetDataSlab+0xe960>
   2951c:	b	2abac <GetDataSlab+0xec90>
   29520:	b	2a214 <GetDataSlab+0xe2f8>
   29524:	b	2a548 <GetDataSlab+0xe62c>
   29528:	b	29bbc <GetDataSlab+0xdca0>
   2952c:	b	29ee8 <GetDataSlab+0xdfcc>
   29530:	b	2987c <GetDataSlab+0xd960>
   29534:	b	2aedc <GetDataSlab+0xefc0>
   29538:	b	2953c <GetDataSlab+0xd620>
   2953c:	ldr	r3, [r9]
   29540:	ldr	ip, [sp, #4]
   29544:	str	r3, [sp, #16]
   29548:	sub	r3, r3, #1
   2954c:	str	r3, [sp, #32]
   29550:	ldr	r3, [fp]
   29554:	mov	lr, fp
   29558:	str	r3, [sp, #112]	; 0x70
   2955c:	ldr	r3, [sp, #204]	; 0xcc
   29560:	mov	r6, #0
   29564:	mov	r2, #1
   29568:	ldr	r3, [r3]
   2956c:	str	r3, [sp, #12]
   29570:	ldr	r3, [sp, #208]	; 0xd0
   29574:	cmp	r2, r3
   29578:	blt	29684 <GetDataSlab+0xd768>
   2957c:	ldr	r3, [sp, #8]
   29580:	add	r4, r3, r6, lsl #3
   29584:	ldr	r3, [sp, #16]
   29588:	cmp	r3, #1
   2958c:	movne	r3, #0
   29590:	moveq	r9, #0
   29594:	beq	29748 <GetDataSlab+0xd82c>
   29598:	str	r3, [sp, #8]
   2959c:	ldr	r3, [sp, #8]
   295a0:	ldr	r2, [sp, #12]
   295a4:	cmp	r3, r2
   295a8:	bge	1c04c <GetDataSlab+0x130>
   295ac:	ldr	r3, [sp, #196]	; 0xc4
   295b0:	ldr	r2, [sp, #8]
   295b4:	ldr	r3, [r3]
   295b8:	cmp	r3, #0
   295bc:	addne	r4, r4, r3, lsl #3
   295c0:	addne	r6, r6, r3
   295c4:	ldr	r3, [sp]
   295c8:	add	r1, r3, r2, lsl #2
   295cc:	mov	r3, #0
   295d0:	ldr	r2, [sp, #204]	; 0xcc
   295d4:	ldr	r2, [r2]
   295d8:	cmp	r3, r2
   295dc:	str	r2, [sp, #16]
   295e0:	blt	29820 <GetDataSlab+0xd904>
   295e4:	ldr	r3, [r9]
   295e8:	ldr	r8, [sp, #4]
   295ec:	mov	r5, #1
   295f0:	mul	r3, r3, r2
   295f4:	ldr	r2, [fp]
   295f8:	sub	r3, r2, r3
   295fc:	ldr	r2, [sp, #196]	; 0xc4
   29600:	ldr	r2, [r2]
   29604:	sub	r3, r3, r2
   29608:	add	r6, r6, r3
   2960c:	add	r4, r4, r3, lsl #3
   29610:	ldr	r3, [sp, #208]	; 0xd0
   29614:	cmp	r5, r3
   29618:	bge	2986c <GetDataSlab+0xd950>
   2961c:	ldr	r3, [sl, r5, lsl #2]
   29620:	ldr	r2, [sp, #204]	; 0xcc
   29624:	add	r3, r3, #1
   29628:	str	r3, [sl, r5, lsl #2]
   2962c:	mov	r0, r3
   29630:	ldr	r1, [r2, r5, lsl #2]
   29634:	bl	3fd18 <__aeabi_idivmod>
   29638:	subs	r3, r1, #0
   2963c:	bne	29858 <GetDataSlab+0xd93c>
   29640:	ldr	r7, [r8, #4]
   29644:	str	r3, [sl, r5, lsl #2]
   29648:	mov	r1, r7
   2964c:	mov	r0, r6
   29650:	bl	3fd18 <__aeabi_idivmod>
   29654:	ldr	r2, [sp, #196]	; 0xc4
   29658:	ldr	r2, [r2, r5, lsl #2]
   2965c:	subs	r3, r1, #0
   29660:	beq	29844 <GetDataSlab+0xd928>
   29664:	ldr	r1, [r8]
   29668:	sub	r3, r7, r3
   2966c:	mla	r3, r2, r1, r3
   29670:	add	r4, r4, r3, lsl #3
   29674:	add	r6, r6, r3
   29678:	add	r5, r5, #1
   2967c:	add	r8, r8, #4
   29680:	b	29610 <GetDataSlab+0xd6f4>
   29684:	ldr	r3, [r9, r2, lsl #2]
   29688:	mov	r5, ip
   2968c:	sub	r3, r3, #1
   29690:	str	r3, [r4, r2, lsl #2]
   29694:	ldr	r3, [lr], #4
   29698:	mov	r1, lr
   2969c:	str	r3, [ip, #4]
   296a0:	cmp	r1, fp
   296a4:	bne	296d8 <GetDataSlab+0xd7bc>
   296a8:	ldr	r3, [sp, #204]	; 0xcc
   296ac:	ldr	r1, [sp, #12]
   296b0:	add	ip, ip, #4
   296b4:	ldr	r3, [r3, r2, lsl #2]
   296b8:	mul	r3, r3, r1
   296bc:	ldr	r1, [sp, #196]	; 0xc4
   296c0:	str	r3, [sp, #12]
   296c4:	ldr	r3, [r5]
   296c8:	ldr	r1, [r1, r2, lsl #2]
   296cc:	add	r2, r2, #1
   296d0:	mla	r6, r1, r3, r6
   296d4:	b	29570 <GetDataSlab+0xd654>
   296d8:	ldr	r7, [r4, r2, lsl #2]
   296dc:	mov	r0, r1
   296e0:	ldr	r3, [r1, #-4]!
   296e4:	mul	r3, r3, r7
   296e8:	ldr	r7, [ip, #4]
   296ec:	str	r3, [r4, r2, lsl #2]
   296f0:	ldr	r3, [r0]
   296f4:	mul	r3, r3, r7
   296f8:	str	r3, [ip, #4]
   296fc:	b	296a0 <GetDataSlab+0xd784>
   29700:	vldmia	r1!, {d7}
   29704:	vcvt.u32.f64	s15, d7
   29708:	vmov	r2, s15
   2970c:	str	r2, [r0, r3, lsl #2]
   29710:	add	r3, r3, #1
   29714:	b	29778 <GetDataSlab+0xd85c>
   29718:	cmp	r2, #0
   2971c:	beq	29814 <GetDataSlab+0xd8f8>
   29720:	ldr	r3, [r8]
   29724:	mul	r3, r3, r2
   29728:	b	2980c <GetDataSlab+0xd8f0>
   2972c:	add	r3, sp, #152	; 0x98
   29730:	add	r3, r3, r5, lsl #2
   29734:	ldr	r3, [r3, #-120]	; 0xffffff88
   29738:	add	r6, r6, r3
   2973c:	add	r4, r4, r3, lsl #3
   29740:	ldr	r3, [sp, #8]
   29744:	add	r9, r9, r3
   29748:	ldr	r3, [sp, #12]
   2974c:	cmp	r9, r3
   29750:	bge	1c04c <GetDataSlab+0x130>
   29754:	ldr	r3, [sp, #196]	; 0xc4
   29758:	ldr	r3, [r3]
   2975c:	cmp	r3, #0
   29760:	addne	r4, r4, r3, lsl #3
   29764:	addne	r6, r6, r3
   29768:	ldr	r3, [sp]
   2976c:	mov	r1, r4
   29770:	add	r0, r3, r9, lsl #2
   29774:	mov	r3, #0
   29778:	ldr	r2, [sp, #204]	; 0xcc
   2977c:	ldr	r2, [r2]
   29780:	cmp	r3, r2
   29784:	str	r2, [sp, #8]
   29788:	blt	29700 <GetDataSlab+0xd7e4>
   2978c:	ldr	r3, [sp, #196]	; 0xc4
   29790:	ldr	r2, [fp]
   29794:	ldr	r8, [sp, #4]
   29798:	ldr	r3, [r3]
   2979c:	ldr	r5, [sp, #16]
   297a0:	sub	r3, r2, r3
   297a4:	add	r6, r6, r3
   297a8:	add	r4, r4, r3, lsl #3
   297ac:	ldr	r3, [sp, #208]	; 0xd0
   297b0:	cmp	r5, r3
   297b4:	bge	29740 <GetDataSlab+0xd824>
   297b8:	ldr	r3, [sl, r5, lsl #2]
   297bc:	ldr	r2, [sp, #204]	; 0xcc
   297c0:	add	r3, r3, #1
   297c4:	str	r3, [sl, r5, lsl #2]
   297c8:	mov	r0, r3
   297cc:	ldr	r1, [r2, r5, lsl #2]
   297d0:	bl	3fd18 <__aeabi_idivmod>
   297d4:	subs	r3, r1, #0
   297d8:	bne	2972c <GetDataSlab+0xd810>
   297dc:	ldr	r7, [r8, #4]
   297e0:	str	r3, [sl, r5, lsl #2]
   297e4:	mov	r1, r7
   297e8:	mov	r0, r6
   297ec:	bl	3fd18 <__aeabi_idivmod>
   297f0:	ldr	r2, [sp, #196]	; 0xc4
   297f4:	ldr	r2, [r2, r5, lsl #2]
   297f8:	subs	r3, r1, #0
   297fc:	beq	29718 <GetDataSlab+0xd7fc>
   29800:	ldr	r1, [r8]
   29804:	sub	r3, r7, r3
   29808:	mla	r3, r2, r1, r3
   2980c:	add	r4, r4, r3, lsl #3
   29810:	add	r6, r6, r3
   29814:	add	r5, r5, #1
   29818:	add	r8, r8, #4
   2981c:	b	297ac <GetDataSlab+0xd890>
   29820:	vldr	d7, [r4]
   29824:	vcvt.u32.f64	s15, d7
   29828:	vmov	r2, s15
   2982c:	str	r2, [r1, r3, lsl #2]
   29830:	ldr	r2, [r9]
   29834:	add	r3, r3, #1
   29838:	add	r6, r6, r2
   2983c:	add	r4, r4, r2, lsl #3
   29840:	b	295d0 <GetDataSlab+0xd6b4>
   29844:	cmp	r2, #0
   29848:	beq	29678 <GetDataSlab+0xd75c>
   2984c:	ldr	r3, [r8]
   29850:	mul	r3, r3, r2
   29854:	b	29670 <GetDataSlab+0xd754>
   29858:	add	r3, sp, #152	; 0x98
   2985c:	add	r3, r3, r5, lsl #2
   29860:	ldr	r3, [r3, #-120]	; 0xffffff88
   29864:	add	r6, r6, r3
   29868:	add	r4, r4, r3, lsl #3
   2986c:	ldr	r3, [sp, #8]
   29870:	ldr	r2, [sp, #16]
   29874:	add	r3, r3, r2
   29878:	b	29598 <GetDataSlab+0xd67c>
   2987c:	ldr	r3, [r9]
   29880:	ldr	ip, [sp, #4]
   29884:	str	r3, [sp, #16]
   29888:	sub	r3, r3, #1
   2988c:	str	r3, [sp, #32]
   29890:	ldr	r3, [fp]
   29894:	mov	lr, fp
   29898:	str	r3, [sp, #112]	; 0x70
   2989c:	ldr	r3, [sp, #204]	; 0xcc
   298a0:	mov	r6, #0
   298a4:	mov	r2, #1
   298a8:	ldr	r3, [r3]
   298ac:	str	r3, [sp, #12]
   298b0:	ldr	r3, [sp, #208]	; 0xd0
   298b4:	cmp	r2, r3
   298b8:	blt	299c4 <GetDataSlab+0xdaa8>
   298bc:	ldr	r3, [sp, #8]
   298c0:	add	r4, r3, r6, lsl #2
   298c4:	ldr	r3, [sp, #16]
   298c8:	cmp	r3, #1
   298cc:	movne	r3, #0
   298d0:	moveq	r9, #0
   298d4:	beq	29a88 <GetDataSlab+0xdb6c>
   298d8:	str	r3, [sp, #8]
   298dc:	ldr	r3, [sp, #8]
   298e0:	ldr	r2, [sp, #12]
   298e4:	cmp	r3, r2
   298e8:	bge	1c04c <GetDataSlab+0x130>
   298ec:	ldr	r3, [sp, #196]	; 0xc4
   298f0:	ldr	r2, [sp, #8]
   298f4:	ldr	r3, [r3]
   298f8:	cmp	r3, #0
   298fc:	addne	r4, r4, r3, lsl #2
   29900:	addne	r6, r6, r3
   29904:	ldr	r3, [sp]
   29908:	add	r1, r3, r2, lsl #2
   2990c:	mov	r3, #0
   29910:	ldr	r2, [sp, #204]	; 0xcc
   29914:	ldr	r2, [r2]
   29918:	cmp	r3, r2
   2991c:	str	r2, [sp, #16]
   29920:	blt	29b60 <GetDataSlab+0xdc44>
   29924:	ldr	r3, [r9]
   29928:	ldr	r8, [sp, #4]
   2992c:	mov	r5, #1
   29930:	mul	r3, r3, r2
   29934:	ldr	r2, [fp]
   29938:	sub	r3, r2, r3
   2993c:	ldr	r2, [sp, #196]	; 0xc4
   29940:	ldr	r2, [r2]
   29944:	sub	r3, r3, r2
   29948:	add	r6, r6, r3
   2994c:	add	r4, r4, r3, lsl #2
   29950:	ldr	r3, [sp, #208]	; 0xd0
   29954:	cmp	r5, r3
   29958:	bge	29bac <GetDataSlab+0xdc90>
   2995c:	ldr	r3, [sl, r5, lsl #2]
   29960:	ldr	r2, [sp, #204]	; 0xcc
   29964:	add	r3, r3, #1
   29968:	str	r3, [sl, r5, lsl #2]
   2996c:	mov	r0, r3
   29970:	ldr	r1, [r2, r5, lsl #2]
   29974:	bl	3fd18 <__aeabi_idivmod>
   29978:	subs	r3, r1, #0
   2997c:	bne	29b98 <GetDataSlab+0xdc7c>
   29980:	ldr	r7, [r8, #4]
   29984:	str	r3, [sl, r5, lsl #2]
   29988:	mov	r1, r7
   2998c:	mov	r0, r6
   29990:	bl	3fd18 <__aeabi_idivmod>
   29994:	ldr	r2, [sp, #196]	; 0xc4
   29998:	ldr	r2, [r2, r5, lsl #2]
   2999c:	subs	r3, r1, #0
   299a0:	beq	29b84 <GetDataSlab+0xdc68>
   299a4:	ldr	r1, [r8]
   299a8:	sub	r3, r7, r3
   299ac:	mla	r3, r2, r1, r3
   299b0:	add	r4, r4, r3, lsl #2
   299b4:	add	r6, r6, r3
   299b8:	add	r5, r5, #1
   299bc:	add	r8, r8, #4
   299c0:	b	29950 <GetDataSlab+0xda34>
   299c4:	ldr	r3, [r9, r2, lsl #2]
   299c8:	mov	r5, ip
   299cc:	sub	r3, r3, #1
   299d0:	str	r3, [r4, r2, lsl #2]
   299d4:	ldr	r3, [lr], #4
   299d8:	mov	r1, lr
   299dc:	str	r3, [ip, #4]
   299e0:	cmp	r1, fp
   299e4:	bne	29a18 <GetDataSlab+0xdafc>
   299e8:	ldr	r3, [sp, #204]	; 0xcc
   299ec:	ldr	r1, [sp, #12]
   299f0:	add	ip, ip, #4
   299f4:	ldr	r3, [r3, r2, lsl #2]
   299f8:	mul	r3, r3, r1
   299fc:	ldr	r1, [sp, #196]	; 0xc4
   29a00:	str	r3, [sp, #12]
   29a04:	ldr	r3, [r5]
   29a08:	ldr	r1, [r1, r2, lsl #2]
   29a0c:	add	r2, r2, #1
   29a10:	mla	r6, r1, r3, r6
   29a14:	b	298b0 <GetDataSlab+0xd994>
   29a18:	ldr	r7, [r4, r2, lsl #2]
   29a1c:	mov	r0, r1
   29a20:	ldr	r3, [r1, #-4]!
   29a24:	mul	r3, r3, r7
   29a28:	ldr	r7, [ip, #4]
   29a2c:	str	r3, [r4, r2, lsl #2]
   29a30:	ldr	r3, [r0]
   29a34:	mul	r3, r3, r7
   29a38:	str	r3, [ip, #4]
   29a3c:	b	299e0 <GetDataSlab+0xdac4>
   29a40:	vldmia	r1!, {s15}
   29a44:	vcvt.u32.f32	s15, s15
   29a48:	vmov	r2, s15
   29a4c:	str	r2, [r0, r3, lsl #2]
   29a50:	add	r3, r3, #1
   29a54:	b	29ab8 <GetDataSlab+0xdb9c>
   29a58:	cmp	r2, #0
   29a5c:	beq	29b54 <GetDataSlab+0xdc38>
   29a60:	ldr	r3, [r8]
   29a64:	mul	r3, r3, r2
   29a68:	b	29b4c <GetDataSlab+0xdc30>
   29a6c:	add	r3, sp, #152	; 0x98
   29a70:	add	r3, r3, r5, lsl #2
   29a74:	ldr	r3, [r3, #-120]	; 0xffffff88
   29a78:	add	r6, r6, r3
   29a7c:	add	r4, r4, r3, lsl #2
   29a80:	ldr	r3, [sp, #8]
   29a84:	add	r9, r9, r3
   29a88:	ldr	r3, [sp, #12]
   29a8c:	cmp	r9, r3
   29a90:	bge	1c04c <GetDataSlab+0x130>
   29a94:	ldr	r3, [sp, #196]	; 0xc4
   29a98:	ldr	r3, [r3]
   29a9c:	cmp	r3, #0
   29aa0:	addne	r4, r4, r3, lsl #2
   29aa4:	addne	r6, r6, r3
   29aa8:	ldr	r3, [sp]
   29aac:	mov	r1, r4
   29ab0:	add	r0, r3, r9, lsl #2
   29ab4:	mov	r3, #0
   29ab8:	ldr	r2, [sp, #204]	; 0xcc
   29abc:	ldr	r2, [r2]
   29ac0:	cmp	r3, r2
   29ac4:	str	r2, [sp, #8]
   29ac8:	blt	29a40 <GetDataSlab+0xdb24>
   29acc:	ldr	r3, [sp, #196]	; 0xc4
   29ad0:	ldr	r2, [fp]
   29ad4:	ldr	r8, [sp, #4]
   29ad8:	ldr	r3, [r3]
   29adc:	ldr	r5, [sp, #16]
   29ae0:	sub	r3, r2, r3
   29ae4:	add	r6, r6, r3
   29ae8:	add	r4, r4, r3, lsl #2
   29aec:	ldr	r3, [sp, #208]	; 0xd0
   29af0:	cmp	r5, r3
   29af4:	bge	29a80 <GetDataSlab+0xdb64>
   29af8:	ldr	r3, [sl, r5, lsl #2]
   29afc:	ldr	r2, [sp, #204]	; 0xcc
   29b00:	add	r3, r3, #1
   29b04:	str	r3, [sl, r5, lsl #2]
   29b08:	mov	r0, r3
   29b0c:	ldr	r1, [r2, r5, lsl #2]
   29b10:	bl	3fd18 <__aeabi_idivmod>
   29b14:	subs	r3, r1, #0
   29b18:	bne	29a6c <GetDataSlab+0xdb50>
   29b1c:	ldr	r7, [r8, #4]
   29b20:	str	r3, [sl, r5, lsl #2]
   29b24:	mov	r1, r7
   29b28:	mov	r0, r6
   29b2c:	bl	3fd18 <__aeabi_idivmod>
   29b30:	ldr	r2, [sp, #196]	; 0xc4
   29b34:	ldr	r2, [r2, r5, lsl #2]
   29b38:	subs	r3, r1, #0
   29b3c:	beq	29a58 <GetDataSlab+0xdb3c>
   29b40:	ldr	r1, [r8]
   29b44:	sub	r3, r7, r3
   29b48:	mla	r3, r2, r1, r3
   29b4c:	add	r4, r4, r3, lsl #2
   29b50:	add	r6, r6, r3
   29b54:	add	r5, r5, #1
   29b58:	add	r8, r8, #4
   29b5c:	b	29aec <GetDataSlab+0xdbd0>
   29b60:	vldr	s15, [r4]
   29b64:	vcvt.u32.f32	s15, s15
   29b68:	vmov	r2, s15
   29b6c:	str	r2, [r1, r3, lsl #2]
   29b70:	ldr	r2, [r9]
   29b74:	add	r3, r3, #1
   29b78:	add	r6, r6, r2
   29b7c:	add	r4, r4, r2, lsl #2
   29b80:	b	29910 <GetDataSlab+0xd9f4>
   29b84:	cmp	r2, #0
   29b88:	beq	299b8 <GetDataSlab+0xda9c>
   29b8c:	ldr	r3, [r8]
   29b90:	mul	r3, r3, r2
   29b94:	b	299b0 <GetDataSlab+0xda94>
   29b98:	add	r3, sp, #152	; 0x98
   29b9c:	add	r3, r3, r5, lsl #2
   29ba0:	ldr	r3, [r3, #-120]	; 0xffffff88
   29ba4:	add	r6, r6, r3
   29ba8:	add	r4, r4, r3, lsl #2
   29bac:	ldr	r3, [sp, #8]
   29bb0:	ldr	r2, [sp, #16]
   29bb4:	add	r3, r3, r2
   29bb8:	b	298d8 <GetDataSlab+0xd9bc>
   29bbc:	ldr	r3, [r9]
   29bc0:	ldr	ip, [sp, #4]
   29bc4:	str	r3, [sp, #16]
   29bc8:	sub	r3, r3, #1
   29bcc:	str	r3, [sp, #32]
   29bd0:	ldr	r3, [fp]
   29bd4:	mov	lr, fp
   29bd8:	str	r3, [sp, #112]	; 0x70
   29bdc:	ldr	r3, [sp, #204]	; 0xcc
   29be0:	mov	r6, #0
   29be4:	mov	r2, #1
   29be8:	ldr	r3, [r3]
   29bec:	str	r3, [sp, #12]
   29bf0:	ldr	r3, [sp, #208]	; 0xd0
   29bf4:	cmp	r2, r3
   29bf8:	blt	29d04 <GetDataSlab+0xdde8>
   29bfc:	ldr	r3, [sp, #8]
   29c00:	add	r4, r3, r6, lsl #2
   29c04:	ldr	r3, [sp, #16]
   29c08:	cmp	r3, #1
   29c0c:	movne	r3, #0
   29c10:	moveq	r9, #0
   29c14:	beq	29dc0 <GetDataSlab+0xdea4>
   29c18:	str	r3, [sp, #8]
   29c1c:	ldr	r3, [sp, #8]
   29c20:	ldr	r2, [sp, #12]
   29c24:	cmp	r3, r2
   29c28:	bge	1c04c <GetDataSlab+0x130>
   29c2c:	ldr	r3, [sp, #196]	; 0xc4
   29c30:	ldr	r2, [sp, #8]
   29c34:	ldr	r3, [r3]
   29c38:	cmp	r3, #0
   29c3c:	addne	r4, r4, r3, lsl #2
   29c40:	addne	r6, r6, r3
   29c44:	ldr	r3, [sp]
   29c48:	add	r1, r3, r2, lsl #2
   29c4c:	mov	r3, #0
   29c50:	ldr	r2, [sp, #204]	; 0xcc
   29c54:	ldr	r2, [r2]
   29c58:	cmp	r3, r2
   29c5c:	str	r2, [sp, #16]
   29c60:	blt	29e94 <GetDataSlab+0xdf78>
   29c64:	ldr	r3, [r9]
   29c68:	ldr	r8, [sp, #4]
   29c6c:	mov	r5, #1
   29c70:	mul	r3, r3, r2
   29c74:	ldr	r2, [fp]
   29c78:	sub	r3, r2, r3
   29c7c:	ldr	r2, [sp, #196]	; 0xc4
   29c80:	ldr	r2, [r2]
   29c84:	sub	r3, r3, r2
   29c88:	add	r6, r6, r3
   29c8c:	add	r4, r4, r3, lsl #2
   29c90:	ldr	r3, [sp, #208]	; 0xd0
   29c94:	cmp	r5, r3
   29c98:	bge	29ed8 <GetDataSlab+0xdfbc>
   29c9c:	ldr	r3, [sl, r5, lsl #2]
   29ca0:	ldr	r2, [sp, #204]	; 0xcc
   29ca4:	add	r3, r3, #1
   29ca8:	str	r3, [sl, r5, lsl #2]
   29cac:	mov	r0, r3
   29cb0:	ldr	r1, [r2, r5, lsl #2]
   29cb4:	bl	3fd18 <__aeabi_idivmod>
   29cb8:	subs	r3, r1, #0
   29cbc:	bne	29ec4 <GetDataSlab+0xdfa8>
   29cc0:	ldr	r7, [r8, #4]
   29cc4:	str	r3, [sl, r5, lsl #2]
   29cc8:	mov	r1, r7
   29ccc:	mov	r0, r6
   29cd0:	bl	3fd18 <__aeabi_idivmod>
   29cd4:	ldr	r2, [sp, #196]	; 0xc4
   29cd8:	ldr	r2, [r2, r5, lsl #2]
   29cdc:	subs	r3, r1, #0
   29ce0:	beq	29eb0 <GetDataSlab+0xdf94>
   29ce4:	ldr	r1, [r8]
   29ce8:	sub	r3, r7, r3
   29cec:	mla	r3, r2, r1, r3
   29cf0:	add	r4, r4, r3, lsl #2
   29cf4:	add	r6, r6, r3
   29cf8:	add	r5, r5, #1
   29cfc:	add	r8, r8, #4
   29d00:	b	29c90 <GetDataSlab+0xdd74>
   29d04:	ldr	r3, [r9, r2, lsl #2]
   29d08:	mov	r5, ip
   29d0c:	sub	r3, r3, #1
   29d10:	str	r3, [r4, r2, lsl #2]
   29d14:	ldr	r3, [lr], #4
   29d18:	mov	r1, lr
   29d1c:	str	r3, [ip, #4]
   29d20:	cmp	r1, fp
   29d24:	bne	29d58 <GetDataSlab+0xde3c>
   29d28:	ldr	r3, [sp, #204]	; 0xcc
   29d2c:	ldr	r1, [sp, #12]
   29d30:	add	ip, ip, #4
   29d34:	ldr	r3, [r3, r2, lsl #2]
   29d38:	mul	r3, r3, r1
   29d3c:	ldr	r1, [sp, #196]	; 0xc4
   29d40:	str	r3, [sp, #12]
   29d44:	ldr	r3, [r5]
   29d48:	ldr	r1, [r1, r2, lsl #2]
   29d4c:	add	r2, r2, #1
   29d50:	mla	r6, r1, r3, r6
   29d54:	b	29bf0 <GetDataSlab+0xdcd4>
   29d58:	ldr	r7, [r4, r2, lsl #2]
   29d5c:	mov	r0, r1
   29d60:	ldr	r3, [r1, #-4]!
   29d64:	mul	r3, r3, r7
   29d68:	ldr	r7, [ip, #4]
   29d6c:	str	r3, [r4, r2, lsl #2]
   29d70:	ldr	r3, [r0]
   29d74:	mul	r3, r3, r7
   29d78:	str	r3, [ip, #4]
   29d7c:	b	29d20 <GetDataSlab+0xde04>
   29d80:	ldr	r1, [r4, r3, lsl #2]
   29d84:	str	r1, [r2, r3, lsl #2]
   29d88:	add	r3, r3, #1
   29d8c:	b	29dec <GetDataSlab+0xded0>
   29d90:	cmp	r2, #0
   29d94:	beq	29e88 <GetDataSlab+0xdf6c>
   29d98:	ldr	r3, [r8]
   29d9c:	mul	r3, r3, r2
   29da0:	b	29e80 <GetDataSlab+0xdf64>
   29da4:	add	r3, sp, #152	; 0x98
   29da8:	add	r3, r3, r5, lsl #2
   29dac:	ldr	r3, [r3, #-120]	; 0xffffff88
   29db0:	add	r6, r6, r3
   29db4:	add	r4, r4, r3, lsl #2
   29db8:	ldr	r3, [sp, #8]
   29dbc:	add	r9, r9, r3
   29dc0:	ldr	r3, [sp, #12]
   29dc4:	cmp	r9, r3
   29dc8:	bge	1c04c <GetDataSlab+0x130>
   29dcc:	ldr	r3, [sp, #196]	; 0xc4
   29dd0:	ldr	r3, [r3]
   29dd4:	cmp	r3, #0
   29dd8:	addne	r4, r4, r3, lsl #2
   29ddc:	addne	r6, r6, r3
   29de0:	ldr	r3, [sp]
   29de4:	add	r2, r3, r9, lsl #2
   29de8:	mov	r3, #0
   29dec:	ldr	r1, [sp, #204]	; 0xcc
   29df0:	ldr	r1, [r1]
   29df4:	cmp	r3, r1
   29df8:	str	r1, [sp, #8]
   29dfc:	blt	29d80 <GetDataSlab+0xde64>
   29e00:	ldr	r3, [sp, #196]	; 0xc4
   29e04:	ldr	r2, [fp]
   29e08:	ldr	r8, [sp, #4]
   29e0c:	ldr	r3, [r3]
   29e10:	ldr	r5, [sp, #16]
   29e14:	sub	r3, r2, r3
   29e18:	add	r6, r6, r3
   29e1c:	add	r4, r4, r3, lsl #2
   29e20:	ldr	r3, [sp, #208]	; 0xd0
   29e24:	cmp	r5, r3
   29e28:	bge	29db8 <GetDataSlab+0xde9c>
   29e2c:	ldr	r3, [sl, r5, lsl #2]
   29e30:	ldr	r2, [sp, #204]	; 0xcc
   29e34:	add	r3, r3, #1
   29e38:	str	r3, [sl, r5, lsl #2]
   29e3c:	mov	r0, r3
   29e40:	ldr	r1, [r2, r5, lsl #2]
   29e44:	bl	3fd18 <__aeabi_idivmod>
   29e48:	subs	r3, r1, #0
   29e4c:	bne	29da4 <GetDataSlab+0xde88>
   29e50:	ldr	r7, [r8, #4]
   29e54:	str	r3, [sl, r5, lsl #2]
   29e58:	mov	r1, r7
   29e5c:	mov	r0, r6
   29e60:	bl	3fd18 <__aeabi_idivmod>
   29e64:	ldr	r2, [sp, #196]	; 0xc4
   29e68:	ldr	r2, [r2, r5, lsl #2]
   29e6c:	subs	r3, r1, #0
   29e70:	beq	29d90 <GetDataSlab+0xde74>
   29e74:	ldr	r1, [r8]
   29e78:	sub	r3, r7, r3
   29e7c:	mla	r3, r2, r1, r3
   29e80:	add	r4, r4, r3, lsl #2
   29e84:	add	r6, r6, r3
   29e88:	add	r5, r5, #1
   29e8c:	add	r8, r8, #4
   29e90:	b	29e20 <GetDataSlab+0xdf04>
   29e94:	ldr	r2, [r4]
   29e98:	str	r2, [r1, r3, lsl #2]
   29e9c:	ldr	r2, [r9]
   29ea0:	add	r3, r3, #1
   29ea4:	add	r6, r6, r2
   29ea8:	add	r4, r4, r2, lsl #2
   29eac:	b	29c50 <GetDataSlab+0xdd34>
   29eb0:	cmp	r2, #0
   29eb4:	beq	29cf8 <GetDataSlab+0xdddc>
   29eb8:	ldr	r3, [r8]
   29ebc:	mul	r3, r3, r2
   29ec0:	b	29cf0 <GetDataSlab+0xddd4>
   29ec4:	add	r3, sp, #152	; 0x98
   29ec8:	add	r3, r3, r5, lsl #2
   29ecc:	ldr	r3, [r3, #-120]	; 0xffffff88
   29ed0:	add	r6, r6, r3
   29ed4:	add	r4, r4, r3, lsl #2
   29ed8:	ldr	r3, [sp, #8]
   29edc:	ldr	r2, [sp, #16]
   29ee0:	add	r3, r3, r2
   29ee4:	b	29c18 <GetDataSlab+0xdcfc>
   29ee8:	ldr	r3, [r9]
   29eec:	ldr	ip, [sp, #4]
   29ef0:	str	r3, [sp, #16]
   29ef4:	sub	r3, r3, #1
   29ef8:	str	r3, [sp, #32]
   29efc:	ldr	r3, [fp]
   29f00:	mov	lr, fp
   29f04:	str	r3, [sp, #112]	; 0x70
   29f08:	ldr	r3, [sp, #204]	; 0xcc
   29f0c:	mov	r6, #0
   29f10:	mov	r2, #1
   29f14:	ldr	r3, [r3]
   29f18:	str	r3, [sp, #12]
   29f1c:	ldr	r3, [sp, #208]	; 0xd0
   29f20:	cmp	r2, r3
   29f24:	blt	2a030 <GetDataSlab+0xe114>
   29f28:	ldr	r3, [sp, #8]
   29f2c:	add	r4, r3, r6, lsl #2
   29f30:	ldr	r3, [sp, #16]
   29f34:	cmp	r3, #1
   29f38:	movne	r3, #0
   29f3c:	moveq	r9, #0
   29f40:	beq	2a0ec <GetDataSlab+0xe1d0>
   29f44:	str	r3, [sp, #8]
   29f48:	ldr	r3, [sp, #8]
   29f4c:	ldr	r2, [sp, #12]
   29f50:	cmp	r3, r2
   29f54:	bge	1c04c <GetDataSlab+0x130>
   29f58:	ldr	r3, [sp, #196]	; 0xc4
   29f5c:	ldr	r2, [sp, #8]
   29f60:	ldr	r3, [r3]
   29f64:	cmp	r3, #0
   29f68:	addne	r4, r4, r3, lsl #2
   29f6c:	addne	r6, r6, r3
   29f70:	ldr	r3, [sp]
   29f74:	add	r1, r3, r2, lsl #2
   29f78:	mov	r3, #0
   29f7c:	ldr	r2, [sp, #204]	; 0xcc
   29f80:	ldr	r2, [r2]
   29f84:	cmp	r3, r2
   29f88:	str	r2, [sp, #16]
   29f8c:	blt	2a1c0 <GetDataSlab+0xe2a4>
   29f90:	ldr	r3, [r9]
   29f94:	ldr	r8, [sp, #4]
   29f98:	mov	r5, #1
   29f9c:	mul	r3, r3, r2
   29fa0:	ldr	r2, [fp]
   29fa4:	sub	r3, r2, r3
   29fa8:	ldr	r2, [sp, #196]	; 0xc4
   29fac:	ldr	r2, [r2]
   29fb0:	sub	r3, r3, r2
   29fb4:	add	r6, r6, r3
   29fb8:	add	r4, r4, r3, lsl #2
   29fbc:	ldr	r3, [sp, #208]	; 0xd0
   29fc0:	cmp	r5, r3
   29fc4:	bge	2a204 <GetDataSlab+0xe2e8>
   29fc8:	ldr	r3, [sl, r5, lsl #2]
   29fcc:	ldr	r2, [sp, #204]	; 0xcc
   29fd0:	add	r3, r3, #1
   29fd4:	str	r3, [sl, r5, lsl #2]
   29fd8:	mov	r0, r3
   29fdc:	ldr	r1, [r2, r5, lsl #2]
   29fe0:	bl	3fd18 <__aeabi_idivmod>
   29fe4:	subs	r3, r1, #0
   29fe8:	bne	2a1f0 <GetDataSlab+0xe2d4>
   29fec:	ldr	r7, [r8, #4]
   29ff0:	str	r3, [sl, r5, lsl #2]
   29ff4:	mov	r1, r7
   29ff8:	mov	r0, r6
   29ffc:	bl	3fd18 <__aeabi_idivmod>
   2a000:	ldr	r2, [sp, #196]	; 0xc4
   2a004:	ldr	r2, [r2, r5, lsl #2]
   2a008:	subs	r3, r1, #0
   2a00c:	beq	2a1dc <GetDataSlab+0xe2c0>
   2a010:	ldr	r1, [r8]
   2a014:	sub	r3, r7, r3
   2a018:	mla	r3, r2, r1, r3
   2a01c:	add	r4, r4, r3, lsl #2
   2a020:	add	r6, r6, r3
   2a024:	add	r5, r5, #1
   2a028:	add	r8, r8, #4
   2a02c:	b	29fbc <GetDataSlab+0xe0a0>
   2a030:	ldr	r3, [r9, r2, lsl #2]
   2a034:	mov	r5, ip
   2a038:	sub	r3, r3, #1
   2a03c:	str	r3, [r4, r2, lsl #2]
   2a040:	ldr	r3, [lr], #4
   2a044:	mov	r1, lr
   2a048:	str	r3, [ip, #4]
   2a04c:	cmp	r1, fp
   2a050:	bne	2a084 <GetDataSlab+0xe168>
   2a054:	ldr	r3, [sp, #204]	; 0xcc
   2a058:	ldr	r1, [sp, #12]
   2a05c:	add	ip, ip, #4
   2a060:	ldr	r3, [r3, r2, lsl #2]
   2a064:	mul	r3, r3, r1
   2a068:	ldr	r1, [sp, #196]	; 0xc4
   2a06c:	str	r3, [sp, #12]
   2a070:	ldr	r3, [r5]
   2a074:	ldr	r1, [r1, r2, lsl #2]
   2a078:	add	r2, r2, #1
   2a07c:	mla	r6, r1, r3, r6
   2a080:	b	29f1c <GetDataSlab+0xe000>
   2a084:	ldr	r7, [r4, r2, lsl #2]
   2a088:	mov	r0, r1
   2a08c:	ldr	r3, [r1, #-4]!
   2a090:	mul	r3, r3, r7
   2a094:	ldr	r7, [ip, #4]
   2a098:	str	r3, [r4, r2, lsl #2]
   2a09c:	ldr	r3, [r0]
   2a0a0:	mul	r3, r3, r7
   2a0a4:	str	r3, [ip, #4]
   2a0a8:	b	2a04c <GetDataSlab+0xe130>
   2a0ac:	ldr	r1, [r4, r3, lsl #2]
   2a0b0:	str	r1, [r2, r3, lsl #2]
   2a0b4:	add	r3, r3, #1
   2a0b8:	b	2a118 <GetDataSlab+0xe1fc>
   2a0bc:	cmp	r2, #0
   2a0c0:	beq	2a1b4 <GetDataSlab+0xe298>
   2a0c4:	ldr	r3, [r8]
   2a0c8:	mul	r3, r3, r2
   2a0cc:	b	2a1ac <GetDataSlab+0xe290>
   2a0d0:	add	r3, sp, #152	; 0x98
   2a0d4:	add	r3, r3, r5, lsl #2
   2a0d8:	ldr	r3, [r3, #-120]	; 0xffffff88
   2a0dc:	add	r6, r6, r3
   2a0e0:	add	r4, r4, r3, lsl #2
   2a0e4:	ldr	r3, [sp, #8]
   2a0e8:	add	r9, r9, r3
   2a0ec:	ldr	r3, [sp, #12]
   2a0f0:	cmp	r9, r3
   2a0f4:	bge	1c04c <GetDataSlab+0x130>
   2a0f8:	ldr	r3, [sp, #196]	; 0xc4
   2a0fc:	ldr	r3, [r3]
   2a100:	cmp	r3, #0
   2a104:	addne	r4, r4, r3, lsl #2
   2a108:	addne	r6, r6, r3
   2a10c:	ldr	r3, [sp]
   2a110:	add	r2, r3, r9, lsl #2
   2a114:	mov	r3, #0
   2a118:	ldr	r1, [sp, #204]	; 0xcc
   2a11c:	ldr	r1, [r1]
   2a120:	cmp	r3, r1
   2a124:	str	r1, [sp, #8]
   2a128:	blt	2a0ac <GetDataSlab+0xe190>
   2a12c:	ldr	r3, [sp, #196]	; 0xc4
   2a130:	ldr	r2, [fp]
   2a134:	ldr	r8, [sp, #4]
   2a138:	ldr	r3, [r3]
   2a13c:	ldr	r5, [sp, #16]
   2a140:	sub	r3, r2, r3
   2a144:	add	r6, r6, r3
   2a148:	add	r4, r4, r3, lsl #2
   2a14c:	ldr	r3, [sp, #208]	; 0xd0
   2a150:	cmp	r5, r3
   2a154:	bge	2a0e4 <GetDataSlab+0xe1c8>
   2a158:	ldr	r3, [sl, r5, lsl #2]
   2a15c:	ldr	r2, [sp, #204]	; 0xcc
   2a160:	add	r3, r3, #1
   2a164:	str	r3, [sl, r5, lsl #2]
   2a168:	mov	r0, r3
   2a16c:	ldr	r1, [r2, r5, lsl #2]
   2a170:	bl	3fd18 <__aeabi_idivmod>
   2a174:	subs	r3, r1, #0
   2a178:	bne	2a0d0 <GetDataSlab+0xe1b4>
   2a17c:	ldr	r7, [r8, #4]
   2a180:	str	r3, [sl, r5, lsl #2]
   2a184:	mov	r1, r7
   2a188:	mov	r0, r6
   2a18c:	bl	3fd18 <__aeabi_idivmod>
   2a190:	ldr	r2, [sp, #196]	; 0xc4
   2a194:	ldr	r2, [r2, r5, lsl #2]
   2a198:	subs	r3, r1, #0
   2a19c:	beq	2a0bc <GetDataSlab+0xe1a0>
   2a1a0:	ldr	r1, [r8]
   2a1a4:	sub	r3, r7, r3
   2a1a8:	mla	r3, r2, r1, r3
   2a1ac:	add	r4, r4, r3, lsl #2
   2a1b0:	add	r6, r6, r3
   2a1b4:	add	r5, r5, #1
   2a1b8:	add	r8, r8, #4
   2a1bc:	b	2a14c <GetDataSlab+0xe230>
   2a1c0:	ldr	r2, [r4]
   2a1c4:	str	r2, [r1, r3, lsl #2]
   2a1c8:	ldr	r2, [r9]
   2a1cc:	add	r3, r3, #1
   2a1d0:	add	r6, r6, r2
   2a1d4:	add	r4, r4, r2, lsl #2
   2a1d8:	b	29f7c <GetDataSlab+0xe060>
   2a1dc:	cmp	r2, #0
   2a1e0:	beq	2a024 <GetDataSlab+0xe108>
   2a1e4:	ldr	r3, [r8]
   2a1e8:	mul	r3, r3, r2
   2a1ec:	b	2a01c <GetDataSlab+0xe100>
   2a1f0:	add	r3, sp, #152	; 0x98
   2a1f4:	add	r3, r3, r5, lsl #2
   2a1f8:	ldr	r3, [r3, #-120]	; 0xffffff88
   2a1fc:	add	r6, r6, r3
   2a200:	add	r4, r4, r3, lsl #2
   2a204:	ldr	r3, [sp, #8]
   2a208:	ldr	r2, [sp, #16]
   2a20c:	add	r3, r3, r2
   2a210:	b	29f44 <GetDataSlab+0xe028>
   2a214:	ldr	r3, [r9]
   2a218:	ldr	ip, [sp, #4]
   2a21c:	str	r3, [sp, #16]
   2a220:	sub	r3, r3, #1
   2a224:	str	r3, [sp, #32]
   2a228:	ldr	r3, [fp]
   2a22c:	mov	lr, fp
   2a230:	str	r3, [sp, #112]	; 0x70
   2a234:	ldr	r3, [sp, #204]	; 0xcc
   2a238:	mov	r6, #0
   2a23c:	mov	r2, #1
   2a240:	ldr	r3, [r3]
   2a244:	str	r3, [sp, #12]
   2a248:	ldr	r3, [sp, #208]	; 0xd0
   2a24c:	cmp	r2, r3
   2a250:	blt	2a360 <GetDataSlab+0xe444>
   2a254:	ldr	r3, [sp, #8]
   2a258:	add	r4, r3, r6, lsl #1
   2a25c:	ldr	r3, [sp, #16]
   2a260:	cmp	r3, #1
   2a264:	movne	r3, #0
   2a268:	moveq	r9, #0
   2a26c:	beq	2a41c <GetDataSlab+0xe500>
   2a270:	str	r3, [sp, #8]
   2a274:	ldr	r3, [sp, #8]
   2a278:	ldr	r2, [sp, #12]
   2a27c:	cmp	r3, r2
   2a280:	bge	1c04c <GetDataSlab+0x130>
   2a284:	ldr	r3, [sp, #196]	; 0xc4
   2a288:	ldr	r2, [sp, #8]
   2a28c:	ldr	r3, [r3]
   2a290:	cmp	r3, #0
   2a294:	addne	r4, r4, r3, lsl #1
   2a298:	addne	r6, r6, r3
   2a29c:	ldr	r3, [sp]
   2a2a0:	add	r1, r3, r2, lsl #2
   2a2a4:	mov	r2, #0
   2a2a8:	ldr	r3, [sp, #204]	; 0xcc
   2a2ac:	ldr	r3, [r3]
   2a2b0:	cmp	r2, r3
   2a2b4:	str	r3, [sp, #16]
   2a2b8:	blt	2a4f4 <GetDataSlab+0xe5d8>
   2a2bc:	ldr	r2, [sp, #16]
   2a2c0:	ldr	r3, [r9]
   2a2c4:	ldr	r8, [sp, #4]
   2a2c8:	mov	r5, #1
   2a2cc:	mul	r3, r3, r2
   2a2d0:	ldr	r2, [fp]
   2a2d4:	sub	r3, r2, r3
   2a2d8:	ldr	r2, [sp, #196]	; 0xc4
   2a2dc:	ldr	r2, [r2]
   2a2e0:	sub	r3, r3, r2
   2a2e4:	add	r6, r6, r3
   2a2e8:	add	r4, r4, r3, lsl #1
   2a2ec:	ldr	r3, [sp, #208]	; 0xd0
   2a2f0:	cmp	r5, r3
   2a2f4:	bge	2a538 <GetDataSlab+0xe61c>
   2a2f8:	ldr	r3, [sl, r5, lsl #2]
   2a2fc:	ldr	r2, [sp, #204]	; 0xcc
   2a300:	add	r3, r3, #1
   2a304:	str	r3, [sl, r5, lsl #2]
   2a308:	mov	r0, r3
   2a30c:	ldr	r1, [r2, r5, lsl #2]
   2a310:	bl	3fd18 <__aeabi_idivmod>
   2a314:	subs	r3, r1, #0
   2a318:	bne	2a524 <GetDataSlab+0xe608>
   2a31c:	ldr	r7, [r8, #4]
   2a320:	str	r3, [sl, r5, lsl #2]
   2a324:	mov	r1, r7
   2a328:	mov	r0, r6
   2a32c:	bl	3fd18 <__aeabi_idivmod>
   2a330:	ldr	r2, [sp, #196]	; 0xc4
   2a334:	ldr	r2, [r2, r5, lsl #2]
   2a338:	subs	r3, r1, #0
   2a33c:	beq	2a510 <GetDataSlab+0xe5f4>
   2a340:	ldr	r1, [r8]
   2a344:	sub	r3, r7, r3
   2a348:	mla	r3, r2, r1, r3
   2a34c:	add	r4, r4, r3, lsl #1
   2a350:	add	r6, r6, r3
   2a354:	add	r5, r5, #1
   2a358:	add	r8, r8, #4
   2a35c:	b	2a2ec <GetDataSlab+0xe3d0>
   2a360:	ldr	r3, [r9, r2, lsl #2]
   2a364:	mov	r5, ip
   2a368:	sub	r3, r3, #1
   2a36c:	str	r3, [r4, r2, lsl #2]
   2a370:	ldr	r3, [lr], #4
   2a374:	mov	r1, lr
   2a378:	str	r3, [ip, #4]
   2a37c:	cmp	r1, fp
   2a380:	bne	2a3b4 <GetDataSlab+0xe498>
   2a384:	ldr	r3, [sp, #204]	; 0xcc
   2a388:	ldr	r1, [sp, #12]
   2a38c:	add	ip, ip, #4
   2a390:	ldr	r3, [r3, r2, lsl #2]
   2a394:	mul	r3, r3, r1
   2a398:	ldr	r1, [sp, #196]	; 0xc4
   2a39c:	str	r3, [sp, #12]
   2a3a0:	ldr	r3, [r5]
   2a3a4:	ldr	r1, [r1, r2, lsl #2]
   2a3a8:	add	r2, r2, #1
   2a3ac:	mla	r6, r1, r3, r6
   2a3b0:	b	2a248 <GetDataSlab+0xe32c>
   2a3b4:	ldr	r7, [r4, r2, lsl #2]
   2a3b8:	mov	r0, r1
   2a3bc:	ldr	r3, [r1, #-4]!
   2a3c0:	mul	r3, r3, r7
   2a3c4:	ldr	r7, [ip, #4]
   2a3c8:	str	r3, [r4, r2, lsl #2]
   2a3cc:	ldr	r3, [r0]
   2a3d0:	mul	r3, r3, r7
   2a3d4:	str	r3, [ip, #4]
   2a3d8:	b	2a37c <GetDataSlab+0xe460>
   2a3dc:	ldrsh	r3, [r1, #2]!
   2a3e0:	str	r3, [r0, r2, lsl #2]
   2a3e4:	add	r2, r2, #1
   2a3e8:	b	2a44c <GetDataSlab+0xe530>
   2a3ec:	cmp	r2, #0
   2a3f0:	beq	2a4e8 <GetDataSlab+0xe5cc>
   2a3f4:	ldr	r3, [r8]
   2a3f8:	mul	r3, r3, r2
   2a3fc:	b	2a4e0 <GetDataSlab+0xe5c4>
   2a400:	add	r3, sp, #152	; 0x98
   2a404:	add	r3, r3, r5, lsl #2
   2a408:	ldr	r3, [r3, #-120]	; 0xffffff88
   2a40c:	add	r6, r6, r3
   2a410:	add	r4, r4, r3, lsl #1
   2a414:	ldr	r3, [sp, #8]
   2a418:	add	r9, r9, r3
   2a41c:	ldr	r3, [sp, #12]
   2a420:	cmp	r9, r3
   2a424:	bge	1c04c <GetDataSlab+0x130>
   2a428:	ldr	r3, [sp, #196]	; 0xc4
   2a42c:	mov	r2, #0
   2a430:	ldr	r3, [r3]
   2a434:	cmp	r3, #0
   2a438:	addne	r4, r4, r3, lsl #1
   2a43c:	addne	r6, r6, r3
   2a440:	ldr	r3, [sp]
   2a444:	sub	r1, r4, #2
   2a448:	add	r0, r3, r9, lsl #2
   2a44c:	ldr	r3, [sp, #204]	; 0xcc
   2a450:	ldr	r3, [r3]
   2a454:	cmp	r2, r3
   2a458:	str	r3, [sp, #8]
   2a45c:	blt	2a3dc <GetDataSlab+0xe4c0>
   2a460:	ldr	r3, [sp, #196]	; 0xc4
   2a464:	ldr	r2, [fp]
   2a468:	ldr	r8, [sp, #4]
   2a46c:	ldr	r3, [r3]
   2a470:	ldr	r5, [sp, #16]
   2a474:	sub	r3, r2, r3
   2a478:	add	r6, r6, r3
   2a47c:	add	r4, r4, r3, lsl #1
   2a480:	ldr	r3, [sp, #208]	; 0xd0
   2a484:	cmp	r5, r3
   2a488:	bge	2a414 <GetDataSlab+0xe4f8>
   2a48c:	ldr	r3, [sl, r5, lsl #2]
   2a490:	ldr	r2, [sp, #204]	; 0xcc
   2a494:	add	r3, r3, #1
   2a498:	str	r3, [sl, r5, lsl #2]
   2a49c:	mov	r0, r3
   2a4a0:	ldr	r1, [r2, r5, lsl #2]
   2a4a4:	bl	3fd18 <__aeabi_idivmod>
   2a4a8:	subs	r3, r1, #0
   2a4ac:	bne	2a400 <GetDataSlab+0xe4e4>
   2a4b0:	ldr	r7, [r8, #4]
   2a4b4:	str	r3, [sl, r5, lsl #2]
   2a4b8:	mov	r1, r7
   2a4bc:	mov	r0, r6
   2a4c0:	bl	3fd18 <__aeabi_idivmod>
   2a4c4:	ldr	r2, [sp, #196]	; 0xc4
   2a4c8:	ldr	r2, [r2, r5, lsl #2]
   2a4cc:	subs	r3, r1, #0
   2a4d0:	beq	2a3ec <GetDataSlab+0xe4d0>
   2a4d4:	ldr	r1, [r8]
   2a4d8:	sub	r3, r7, r3
   2a4dc:	mla	r3, r2, r1, r3
   2a4e0:	add	r4, r4, r3, lsl #1
   2a4e4:	add	r6, r6, r3
   2a4e8:	add	r5, r5, #1
   2a4ec:	add	r8, r8, #4
   2a4f0:	b	2a480 <GetDataSlab+0xe564>
   2a4f4:	ldrsh	r3, [r4]
   2a4f8:	str	r3, [r1, r2, lsl #2]
   2a4fc:	ldr	r3, [r9]
   2a500:	add	r2, r2, #1
   2a504:	add	r6, r6, r3
   2a508:	add	r4, r4, r3, lsl #1
   2a50c:	b	2a2a8 <GetDataSlab+0xe38c>
   2a510:	cmp	r2, #0
   2a514:	beq	2a354 <GetDataSlab+0xe438>
   2a518:	ldr	r3, [r8]
   2a51c:	mul	r3, r3, r2
   2a520:	b	2a34c <GetDataSlab+0xe430>
   2a524:	add	r3, sp, #152	; 0x98
   2a528:	add	r3, r3, r5, lsl #2
   2a52c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2a530:	add	r6, r6, r3
   2a534:	add	r4, r4, r3, lsl #1
   2a538:	ldr	r3, [sp, #8]
   2a53c:	ldr	r2, [sp, #16]
   2a540:	add	r3, r3, r2
   2a544:	b	2a270 <GetDataSlab+0xe354>
   2a548:	ldr	r3, [r9]
   2a54c:	ldr	ip, [sp, #4]
   2a550:	str	r3, [sp, #16]
   2a554:	sub	r3, r3, #1
   2a558:	str	r3, [sp, #32]
   2a55c:	ldr	r3, [fp]
   2a560:	mov	lr, fp
   2a564:	str	r3, [sp, #112]	; 0x70
   2a568:	ldr	r3, [sp, #204]	; 0xcc
   2a56c:	mov	r6, #0
   2a570:	mov	r2, #1
   2a574:	ldr	r3, [r3]
   2a578:	str	r3, [sp, #12]
   2a57c:	ldr	r3, [sp, #208]	; 0xd0
   2a580:	cmp	r2, r3
   2a584:	blt	2a694 <GetDataSlab+0xe778>
   2a588:	ldr	r3, [sp, #8]
   2a58c:	add	r4, r3, r6, lsl #1
   2a590:	ldr	r3, [sp, #16]
   2a594:	cmp	r3, #1
   2a598:	movne	r3, #0
   2a59c:	moveq	r9, #0
   2a5a0:	beq	2a750 <GetDataSlab+0xe834>
   2a5a4:	str	r3, [sp, #8]
   2a5a8:	ldr	r3, [sp, #8]
   2a5ac:	ldr	r2, [sp, #12]
   2a5b0:	cmp	r3, r2
   2a5b4:	bge	1c04c <GetDataSlab+0x130>
   2a5b8:	ldr	r3, [sp, #196]	; 0xc4
   2a5bc:	ldr	r2, [sp, #8]
   2a5c0:	ldr	r3, [r3]
   2a5c4:	cmp	r3, #0
   2a5c8:	addne	r4, r4, r3, lsl #1
   2a5cc:	addne	r6, r6, r3
   2a5d0:	ldr	r3, [sp]
   2a5d4:	add	r1, r3, r2, lsl #2
   2a5d8:	mov	r2, #0
   2a5dc:	ldr	r3, [sp, #204]	; 0xcc
   2a5e0:	ldr	r3, [r3]
   2a5e4:	cmp	r2, r3
   2a5e8:	str	r3, [sp, #16]
   2a5ec:	blt	2a828 <GetDataSlab+0xe90c>
   2a5f0:	ldr	r2, [sp, #16]
   2a5f4:	ldr	r3, [r9]
   2a5f8:	ldr	r8, [sp, #4]
   2a5fc:	mov	r5, #1
   2a600:	mul	r3, r3, r2
   2a604:	ldr	r2, [fp]
   2a608:	sub	r3, r2, r3
   2a60c:	ldr	r2, [sp, #196]	; 0xc4
   2a610:	ldr	r2, [r2]
   2a614:	sub	r3, r3, r2
   2a618:	add	r6, r6, r3
   2a61c:	add	r4, r4, r3, lsl #1
   2a620:	ldr	r3, [sp, #208]	; 0xd0
   2a624:	cmp	r5, r3
   2a628:	bge	2a86c <GetDataSlab+0xe950>
   2a62c:	ldr	r3, [sl, r5, lsl #2]
   2a630:	ldr	r2, [sp, #204]	; 0xcc
   2a634:	add	r3, r3, #1
   2a638:	str	r3, [sl, r5, lsl #2]
   2a63c:	mov	r0, r3
   2a640:	ldr	r1, [r2, r5, lsl #2]
   2a644:	bl	3fd18 <__aeabi_idivmod>
   2a648:	subs	r3, r1, #0
   2a64c:	bne	2a858 <GetDataSlab+0xe93c>
   2a650:	ldr	r7, [r8, #4]
   2a654:	str	r3, [sl, r5, lsl #2]
   2a658:	mov	r1, r7
   2a65c:	mov	r0, r6
   2a660:	bl	3fd18 <__aeabi_idivmod>
   2a664:	ldr	r2, [sp, #196]	; 0xc4
   2a668:	ldr	r2, [r2, r5, lsl #2]
   2a66c:	subs	r3, r1, #0
   2a670:	beq	2a844 <GetDataSlab+0xe928>
   2a674:	ldr	r1, [r8]
   2a678:	sub	r3, r7, r3
   2a67c:	mla	r3, r2, r1, r3
   2a680:	add	r4, r4, r3, lsl #1
   2a684:	add	r6, r6, r3
   2a688:	add	r5, r5, #1
   2a68c:	add	r8, r8, #4
   2a690:	b	2a620 <GetDataSlab+0xe704>
   2a694:	ldr	r3, [r9, r2, lsl #2]
   2a698:	mov	r5, ip
   2a69c:	sub	r3, r3, #1
   2a6a0:	str	r3, [r4, r2, lsl #2]
   2a6a4:	ldr	r3, [lr], #4
   2a6a8:	mov	r1, lr
   2a6ac:	str	r3, [ip, #4]
   2a6b0:	cmp	r1, fp
   2a6b4:	bne	2a6e8 <GetDataSlab+0xe7cc>
   2a6b8:	ldr	r3, [sp, #204]	; 0xcc
   2a6bc:	ldr	r1, [sp, #12]
   2a6c0:	add	ip, ip, #4
   2a6c4:	ldr	r3, [r3, r2, lsl #2]
   2a6c8:	mul	r3, r3, r1
   2a6cc:	ldr	r1, [sp, #196]	; 0xc4
   2a6d0:	str	r3, [sp, #12]
   2a6d4:	ldr	r3, [r5]
   2a6d8:	ldr	r1, [r1, r2, lsl #2]
   2a6dc:	add	r2, r2, #1
   2a6e0:	mla	r6, r1, r3, r6
   2a6e4:	b	2a57c <GetDataSlab+0xe660>
   2a6e8:	ldr	r7, [r4, r2, lsl #2]
   2a6ec:	mov	r0, r1
   2a6f0:	ldr	r3, [r1, #-4]!
   2a6f4:	mul	r3, r3, r7
   2a6f8:	ldr	r7, [ip, #4]
   2a6fc:	str	r3, [r4, r2, lsl #2]
   2a700:	ldr	r3, [r0]
   2a704:	mul	r3, r3, r7
   2a708:	str	r3, [ip, #4]
   2a70c:	b	2a6b0 <GetDataSlab+0xe794>
   2a710:	ldrh	r3, [r1, #2]!
   2a714:	str	r3, [r0, r2, lsl #2]
   2a718:	add	r2, r2, #1
   2a71c:	b	2a780 <GetDataSlab+0xe864>
   2a720:	cmp	r2, #0
   2a724:	beq	2a81c <GetDataSlab+0xe900>
   2a728:	ldr	r3, [r8]
   2a72c:	mul	r3, r3, r2
   2a730:	b	2a814 <GetDataSlab+0xe8f8>
   2a734:	add	r3, sp, #152	; 0x98
   2a738:	add	r3, r3, r5, lsl #2
   2a73c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2a740:	add	r6, r6, r3
   2a744:	add	r4, r4, r3, lsl #1
   2a748:	ldr	r3, [sp, #8]
   2a74c:	add	r9, r9, r3
   2a750:	ldr	r3, [sp, #12]
   2a754:	cmp	r9, r3
   2a758:	bge	1c04c <GetDataSlab+0x130>
   2a75c:	ldr	r3, [sp, #196]	; 0xc4
   2a760:	mov	r2, #0
   2a764:	ldr	r3, [r3]
   2a768:	cmp	r3, #0
   2a76c:	addne	r4, r4, r3, lsl #1
   2a770:	addne	r6, r6, r3
   2a774:	ldr	r3, [sp]
   2a778:	sub	r1, r4, #2
   2a77c:	add	r0, r3, r9, lsl #2
   2a780:	ldr	r3, [sp, #204]	; 0xcc
   2a784:	ldr	r3, [r3]
   2a788:	cmp	r2, r3
   2a78c:	str	r3, [sp, #8]
   2a790:	blt	2a710 <GetDataSlab+0xe7f4>
   2a794:	ldr	r3, [sp, #196]	; 0xc4
   2a798:	ldr	r2, [fp]
   2a79c:	ldr	r8, [sp, #4]
   2a7a0:	ldr	r3, [r3]
   2a7a4:	ldr	r5, [sp, #16]
   2a7a8:	sub	r3, r2, r3
   2a7ac:	add	r6, r6, r3
   2a7b0:	add	r4, r4, r3, lsl #1
   2a7b4:	ldr	r3, [sp, #208]	; 0xd0
   2a7b8:	cmp	r5, r3
   2a7bc:	bge	2a748 <GetDataSlab+0xe82c>
   2a7c0:	ldr	r3, [sl, r5, lsl #2]
   2a7c4:	ldr	r2, [sp, #204]	; 0xcc
   2a7c8:	add	r3, r3, #1
   2a7cc:	str	r3, [sl, r5, lsl #2]
   2a7d0:	mov	r0, r3
   2a7d4:	ldr	r1, [r2, r5, lsl #2]
   2a7d8:	bl	3fd18 <__aeabi_idivmod>
   2a7dc:	subs	r3, r1, #0
   2a7e0:	bne	2a734 <GetDataSlab+0xe818>
   2a7e4:	ldr	r7, [r8, #4]
   2a7e8:	str	r3, [sl, r5, lsl #2]
   2a7ec:	mov	r1, r7
   2a7f0:	mov	r0, r6
   2a7f4:	bl	3fd18 <__aeabi_idivmod>
   2a7f8:	ldr	r2, [sp, #196]	; 0xc4
   2a7fc:	ldr	r2, [r2, r5, lsl #2]
   2a800:	subs	r3, r1, #0
   2a804:	beq	2a720 <GetDataSlab+0xe804>
   2a808:	ldr	r1, [r8]
   2a80c:	sub	r3, r7, r3
   2a810:	mla	r3, r2, r1, r3
   2a814:	add	r4, r4, r3, lsl #1
   2a818:	add	r6, r6, r3
   2a81c:	add	r5, r5, #1
   2a820:	add	r8, r8, #4
   2a824:	b	2a7b4 <GetDataSlab+0xe898>
   2a828:	ldrh	r3, [r4]
   2a82c:	str	r3, [r1, r2, lsl #2]
   2a830:	ldr	r3, [r9]
   2a834:	add	r2, r2, #1
   2a838:	add	r6, r6, r3
   2a83c:	add	r4, r4, r3, lsl #1
   2a840:	b	2a5dc <GetDataSlab+0xe6c0>
   2a844:	cmp	r2, #0
   2a848:	beq	2a688 <GetDataSlab+0xe76c>
   2a84c:	ldr	r3, [r8]
   2a850:	mul	r3, r3, r2
   2a854:	b	2a680 <GetDataSlab+0xe764>
   2a858:	add	r3, sp, #152	; 0x98
   2a85c:	add	r3, r3, r5, lsl #2
   2a860:	ldr	r3, [r3, #-120]	; 0xffffff88
   2a864:	add	r6, r6, r3
   2a868:	add	r4, r4, r3, lsl #1
   2a86c:	ldr	r3, [sp, #8]
   2a870:	ldr	r2, [sp, #16]
   2a874:	add	r3, r3, r2
   2a878:	b	2a5a4 <GetDataSlab+0xe688>
   2a87c:	ldr	r3, [r9]
   2a880:	ldr	ip, [sp, #4]
   2a884:	str	r3, [sp, #16]
   2a888:	sub	r3, r3, #1
   2a88c:	str	r3, [sp, #32]
   2a890:	ldr	r3, [fp]
   2a894:	mov	lr, fp
   2a898:	str	r3, [sp, #112]	; 0x70
   2a89c:	ldr	r3, [sp, #204]	; 0xcc
   2a8a0:	mov	r6, #0
   2a8a4:	mov	r2, #1
   2a8a8:	ldr	r3, [r3]
   2a8ac:	str	r3, [sp, #12]
   2a8b0:	ldr	r3, [sp, #208]	; 0xd0
   2a8b4:	cmp	r2, r3
   2a8b8:	blt	2a9c8 <GetDataSlab+0xeaac>
   2a8bc:	ldr	r3, [sp, #8]
   2a8c0:	add	r4, r3, r6
   2a8c4:	ldr	r3, [sp, #16]
   2a8c8:	cmp	r3, #1
   2a8cc:	movne	r3, #0
   2a8d0:	moveq	r9, #0
   2a8d4:	beq	2aa84 <GetDataSlab+0xeb68>
   2a8d8:	str	r3, [sp, #8]
   2a8dc:	ldr	r3, [sp, #8]
   2a8e0:	ldr	r2, [sp, #12]
   2a8e4:	cmp	r3, r2
   2a8e8:	bge	1c04c <GetDataSlab+0x130>
   2a8ec:	ldr	r3, [sp, #196]	; 0xc4
   2a8f0:	ldr	r2, [sp, #8]
   2a8f4:	ldr	r3, [r3]
   2a8f8:	cmp	r3, #0
   2a8fc:	addne	r4, r4, r3
   2a900:	addne	r6, r6, r3
   2a904:	ldr	r3, [sp]
   2a908:	add	r1, r3, r2, lsl #2
   2a90c:	mov	r2, #0
   2a910:	ldr	r3, [sp, #204]	; 0xcc
   2a914:	ldr	r3, [r3]
   2a918:	cmp	r2, r3
   2a91c:	str	r3, [sp, #16]
   2a920:	blt	2ab58 <GetDataSlab+0xec3c>
   2a924:	ldr	r2, [sp, #16]
   2a928:	ldr	r3, [r9]
   2a92c:	ldr	r8, [sp, #4]
   2a930:	mov	r5, #1
   2a934:	mul	r3, r3, r2
   2a938:	ldr	r2, [fp]
   2a93c:	sub	r3, r2, r3
   2a940:	ldr	r2, [sp, #196]	; 0xc4
   2a944:	ldr	r2, [r2]
   2a948:	sub	r3, r3, r2
   2a94c:	add	r6, r6, r3
   2a950:	add	r4, r4, r3
   2a954:	ldr	r3, [sp, #208]	; 0xd0
   2a958:	cmp	r5, r3
   2a95c:	bge	2ab9c <GetDataSlab+0xec80>
   2a960:	ldr	r3, [sl, r5, lsl #2]
   2a964:	ldr	r2, [sp, #204]	; 0xcc
   2a968:	add	r3, r3, #1
   2a96c:	str	r3, [sl, r5, lsl #2]
   2a970:	mov	r0, r3
   2a974:	ldr	r1, [r2, r5, lsl #2]
   2a978:	bl	3fd18 <__aeabi_idivmod>
   2a97c:	subs	r3, r1, #0
   2a980:	bne	2ab88 <GetDataSlab+0xec6c>
   2a984:	ldr	r7, [r8, #4]
   2a988:	str	r3, [sl, r5, lsl #2]
   2a98c:	mov	r1, r7
   2a990:	mov	r0, r6
   2a994:	bl	3fd18 <__aeabi_idivmod>
   2a998:	ldr	r2, [sp, #196]	; 0xc4
   2a99c:	ldr	r2, [r2, r5, lsl #2]
   2a9a0:	subs	r3, r1, #0
   2a9a4:	beq	2ab74 <GetDataSlab+0xec58>
   2a9a8:	ldr	r1, [r8]
   2a9ac:	sub	r3, r7, r3
   2a9b0:	mla	r3, r2, r1, r3
   2a9b4:	add	r4, r4, r3
   2a9b8:	add	r6, r6, r3
   2a9bc:	add	r5, r5, #1
   2a9c0:	add	r8, r8, #4
   2a9c4:	b	2a954 <GetDataSlab+0xea38>
   2a9c8:	ldr	r3, [r9, r2, lsl #2]
   2a9cc:	mov	r5, ip
   2a9d0:	sub	r3, r3, #1
   2a9d4:	str	r3, [r4, r2, lsl #2]
   2a9d8:	ldr	r3, [lr], #4
   2a9dc:	mov	r1, lr
   2a9e0:	str	r3, [ip, #4]
   2a9e4:	cmp	r1, fp
   2a9e8:	bne	2aa1c <GetDataSlab+0xeb00>
   2a9ec:	ldr	r3, [sp, #204]	; 0xcc
   2a9f0:	ldr	r1, [sp, #12]
   2a9f4:	add	ip, ip, #4
   2a9f8:	ldr	r3, [r3, r2, lsl #2]
   2a9fc:	mul	r3, r3, r1
   2aa00:	ldr	r1, [sp, #196]	; 0xc4
   2aa04:	str	r3, [sp, #12]
   2aa08:	ldr	r3, [r5]
   2aa0c:	ldr	r1, [r1, r2, lsl #2]
   2aa10:	add	r2, r2, #1
   2aa14:	mla	r6, r1, r3, r6
   2aa18:	b	2a8b0 <GetDataSlab+0xe994>
   2aa1c:	ldr	r7, [r4, r2, lsl #2]
   2aa20:	mov	r0, r1
   2aa24:	ldr	r3, [r1, #-4]!
   2aa28:	mul	r3, r3, r7
   2aa2c:	ldr	r7, [ip, #4]
   2aa30:	str	r3, [r4, r2, lsl #2]
   2aa34:	ldr	r3, [r0]
   2aa38:	mul	r3, r3, r7
   2aa3c:	str	r3, [ip, #4]
   2aa40:	b	2a9e4 <GetDataSlab+0xeac8>
   2aa44:	ldrsb	r2, [r4, r3]
   2aa48:	str	r2, [r1, r3, lsl #2]
   2aa4c:	add	r3, r3, #1
   2aa50:	b	2aab0 <GetDataSlab+0xeb94>
   2aa54:	cmp	r2, #0
   2aa58:	beq	2ab4c <GetDataSlab+0xec30>
   2aa5c:	ldr	r3, [r8]
   2aa60:	mul	r3, r3, r2
   2aa64:	b	2ab44 <GetDataSlab+0xec28>
   2aa68:	add	r3, sp, #152	; 0x98
   2aa6c:	add	r3, r3, r5, lsl #2
   2aa70:	ldr	r3, [r3, #-120]	; 0xffffff88
   2aa74:	add	r6, r6, r3
   2aa78:	add	r4, r4, r3
   2aa7c:	ldr	r3, [sp, #8]
   2aa80:	add	r9, r9, r3
   2aa84:	ldr	r3, [sp, #12]
   2aa88:	cmp	r9, r3
   2aa8c:	bge	1c04c <GetDataSlab+0x130>
   2aa90:	ldr	r3, [sp, #196]	; 0xc4
   2aa94:	ldr	r3, [r3]
   2aa98:	cmp	r3, #0
   2aa9c:	addne	r4, r4, r3
   2aaa0:	addne	r6, r6, r3
   2aaa4:	ldr	r3, [sp]
   2aaa8:	add	r1, r3, r9, lsl #2
   2aaac:	mov	r3, #0
   2aab0:	ldr	r2, [sp, #204]	; 0xcc
   2aab4:	ldr	r2, [r2]
   2aab8:	cmp	r3, r2
   2aabc:	str	r2, [sp, #8]
   2aac0:	blt	2aa44 <GetDataSlab+0xeb28>
   2aac4:	ldr	r3, [sp, #196]	; 0xc4
   2aac8:	ldr	r2, [fp]
   2aacc:	ldr	r8, [sp, #4]
   2aad0:	ldr	r3, [r3]
   2aad4:	ldr	r5, [sp, #16]
   2aad8:	sub	r3, r2, r3
   2aadc:	add	r6, r6, r3
   2aae0:	add	r4, r4, r3
   2aae4:	ldr	r3, [sp, #208]	; 0xd0
   2aae8:	cmp	r5, r3
   2aaec:	bge	2aa7c <GetDataSlab+0xeb60>
   2aaf0:	ldr	r3, [sl, r5, lsl #2]
   2aaf4:	ldr	r2, [sp, #204]	; 0xcc
   2aaf8:	add	r3, r3, #1
   2aafc:	str	r3, [sl, r5, lsl #2]
   2ab00:	mov	r0, r3
   2ab04:	ldr	r1, [r2, r5, lsl #2]
   2ab08:	bl	3fd18 <__aeabi_idivmod>
   2ab0c:	subs	r3, r1, #0
   2ab10:	bne	2aa68 <GetDataSlab+0xeb4c>
   2ab14:	ldr	r7, [r8, #4]
   2ab18:	str	r3, [sl, r5, lsl #2]
   2ab1c:	mov	r1, r7
   2ab20:	mov	r0, r6
   2ab24:	bl	3fd18 <__aeabi_idivmod>
   2ab28:	ldr	r2, [sp, #196]	; 0xc4
   2ab2c:	ldr	r2, [r2, r5, lsl #2]
   2ab30:	subs	r3, r1, #0
   2ab34:	beq	2aa54 <GetDataSlab+0xeb38>
   2ab38:	ldr	r1, [r8]
   2ab3c:	sub	r3, r7, r3
   2ab40:	mla	r3, r2, r1, r3
   2ab44:	add	r4, r4, r3
   2ab48:	add	r6, r6, r3
   2ab4c:	add	r5, r5, #1
   2ab50:	add	r8, r8, #4
   2ab54:	b	2aae4 <GetDataSlab+0xebc8>
   2ab58:	ldrsb	r3, [r4]
   2ab5c:	str	r3, [r1, r2, lsl #2]
   2ab60:	ldr	r3, [r9]
   2ab64:	add	r2, r2, #1
   2ab68:	add	r4, r4, r3
   2ab6c:	add	r6, r6, r3
   2ab70:	b	2a910 <GetDataSlab+0xe9f4>
   2ab74:	cmp	r2, #0
   2ab78:	beq	2a9bc <GetDataSlab+0xeaa0>
   2ab7c:	ldr	r3, [r8]
   2ab80:	mul	r3, r3, r2
   2ab84:	b	2a9b4 <GetDataSlab+0xea98>
   2ab88:	add	r3, sp, #152	; 0x98
   2ab8c:	add	r3, r3, r5, lsl #2
   2ab90:	ldr	r3, [r3, #-120]	; 0xffffff88
   2ab94:	add	r6, r6, r3
   2ab98:	add	r4, r4, r3
   2ab9c:	ldr	r3, [sp, #8]
   2aba0:	ldr	r2, [sp, #16]
   2aba4:	add	r3, r3, r2
   2aba8:	b	2a8d8 <GetDataSlab+0xe9bc>
   2abac:	ldr	r3, [r9]
   2abb0:	ldr	ip, [sp, #4]
   2abb4:	str	r3, [sp, #16]
   2abb8:	sub	r3, r3, #1
   2abbc:	str	r3, [sp, #32]
   2abc0:	ldr	r3, [fp]
   2abc4:	mov	lr, fp
   2abc8:	str	r3, [sp, #112]	; 0x70
   2abcc:	ldr	r3, [sp, #204]	; 0xcc
   2abd0:	mov	r6, #0
   2abd4:	mov	r2, #1
   2abd8:	ldr	r3, [r3]
   2abdc:	str	r3, [sp, #12]
   2abe0:	ldr	r3, [sp, #208]	; 0xd0
   2abe4:	cmp	r2, r3
   2abe8:	blt	2acf8 <GetDataSlab+0xeddc>
   2abec:	ldr	r3, [sp, #8]
   2abf0:	add	r4, r3, r6
   2abf4:	ldr	r3, [sp, #16]
   2abf8:	cmp	r3, #1
   2abfc:	movne	r3, #0
   2ac00:	moveq	r9, #0
   2ac04:	beq	2adb4 <GetDataSlab+0xee98>
   2ac08:	str	r3, [sp, #8]
   2ac0c:	ldr	r3, [sp, #8]
   2ac10:	ldr	r2, [sp, #12]
   2ac14:	cmp	r3, r2
   2ac18:	bge	1c04c <GetDataSlab+0x130>
   2ac1c:	ldr	r3, [sp, #196]	; 0xc4
   2ac20:	ldr	r2, [sp, #8]
   2ac24:	ldr	r3, [r3]
   2ac28:	cmp	r3, #0
   2ac2c:	addne	r4, r4, r3
   2ac30:	addne	r6, r6, r3
   2ac34:	ldr	r3, [sp]
   2ac38:	add	r1, r3, r2, lsl #2
   2ac3c:	mov	r2, #0
   2ac40:	ldr	r3, [sp, #204]	; 0xcc
   2ac44:	ldr	r3, [r3]
   2ac48:	cmp	r2, r3
   2ac4c:	str	r3, [sp, #16]
   2ac50:	blt	2ae88 <GetDataSlab+0xef6c>
   2ac54:	ldr	r2, [sp, #16]
   2ac58:	ldr	r3, [r9]
   2ac5c:	ldr	r8, [sp, #4]
   2ac60:	mov	r5, #1
   2ac64:	mul	r3, r3, r2
   2ac68:	ldr	r2, [fp]
   2ac6c:	sub	r3, r2, r3
   2ac70:	ldr	r2, [sp, #196]	; 0xc4
   2ac74:	ldr	r2, [r2]
   2ac78:	sub	r3, r3, r2
   2ac7c:	add	r6, r6, r3
   2ac80:	add	r4, r4, r3
   2ac84:	ldr	r3, [sp, #208]	; 0xd0
   2ac88:	cmp	r5, r3
   2ac8c:	bge	2aecc <GetDataSlab+0xefb0>
   2ac90:	ldr	r3, [sl, r5, lsl #2]
   2ac94:	ldr	r2, [sp, #204]	; 0xcc
   2ac98:	add	r3, r3, #1
   2ac9c:	str	r3, [sl, r5, lsl #2]
   2aca0:	mov	r0, r3
   2aca4:	ldr	r1, [r2, r5, lsl #2]
   2aca8:	bl	3fd18 <__aeabi_idivmod>
   2acac:	subs	r3, r1, #0
   2acb0:	bne	2aeb8 <GetDataSlab+0xef9c>
   2acb4:	ldr	r7, [r8, #4]
   2acb8:	str	r3, [sl, r5, lsl #2]
   2acbc:	mov	r1, r7
   2acc0:	mov	r0, r6
   2acc4:	bl	3fd18 <__aeabi_idivmod>
   2acc8:	ldr	r2, [sp, #196]	; 0xc4
   2accc:	ldr	r2, [r2, r5, lsl #2]
   2acd0:	subs	r3, r1, #0
   2acd4:	beq	2aea4 <GetDataSlab+0xef88>
   2acd8:	ldr	r1, [r8]
   2acdc:	sub	r3, r7, r3
   2ace0:	mla	r3, r2, r1, r3
   2ace4:	add	r4, r4, r3
   2ace8:	add	r6, r6, r3
   2acec:	add	r5, r5, #1
   2acf0:	add	r8, r8, #4
   2acf4:	b	2ac84 <GetDataSlab+0xed68>
   2acf8:	ldr	r3, [r9, r2, lsl #2]
   2acfc:	mov	r5, ip
   2ad00:	sub	r3, r3, #1
   2ad04:	str	r3, [r4, r2, lsl #2]
   2ad08:	ldr	r3, [lr], #4
   2ad0c:	mov	r1, lr
   2ad10:	str	r3, [ip, #4]
   2ad14:	cmp	r1, fp
   2ad18:	bne	2ad4c <GetDataSlab+0xee30>
   2ad1c:	ldr	r3, [sp, #204]	; 0xcc
   2ad20:	ldr	r1, [sp, #12]
   2ad24:	add	ip, ip, #4
   2ad28:	ldr	r3, [r3, r2, lsl #2]
   2ad2c:	mul	r3, r3, r1
   2ad30:	ldr	r1, [sp, #196]	; 0xc4
   2ad34:	str	r3, [sp, #12]
   2ad38:	ldr	r3, [r5]
   2ad3c:	ldr	r1, [r1, r2, lsl #2]
   2ad40:	add	r2, r2, #1
   2ad44:	mla	r6, r1, r3, r6
   2ad48:	b	2abe0 <GetDataSlab+0xecc4>
   2ad4c:	ldr	r7, [r4, r2, lsl #2]
   2ad50:	mov	r0, r1
   2ad54:	ldr	r3, [r1, #-4]!
   2ad58:	mul	r3, r3, r7
   2ad5c:	ldr	r7, [ip, #4]
   2ad60:	str	r3, [r4, r2, lsl #2]
   2ad64:	ldr	r3, [r0]
   2ad68:	mul	r3, r3, r7
   2ad6c:	str	r3, [ip, #4]
   2ad70:	b	2ad14 <GetDataSlab+0xedf8>
   2ad74:	ldrb	r2, [r4, r3]
   2ad78:	str	r2, [r1, r3, lsl #2]
   2ad7c:	add	r3, r3, #1
   2ad80:	b	2ade0 <GetDataSlab+0xeec4>
   2ad84:	cmp	r2, #0
   2ad88:	beq	2ae7c <GetDataSlab+0xef60>
   2ad8c:	ldr	r3, [r8]
   2ad90:	mul	r3, r3, r2
   2ad94:	b	2ae74 <GetDataSlab+0xef58>
   2ad98:	add	r3, sp, #152	; 0x98
   2ad9c:	add	r3, r3, r5, lsl #2
   2ada0:	ldr	r3, [r3, #-120]	; 0xffffff88
   2ada4:	add	r6, r6, r3
   2ada8:	add	r4, r4, r3
   2adac:	ldr	r3, [sp, #8]
   2adb0:	add	r9, r9, r3
   2adb4:	ldr	r3, [sp, #12]
   2adb8:	cmp	r9, r3
   2adbc:	bge	1c04c <GetDataSlab+0x130>
   2adc0:	ldr	r3, [sp, #196]	; 0xc4
   2adc4:	ldr	r3, [r3]
   2adc8:	cmp	r3, #0
   2adcc:	addne	r4, r4, r3
   2add0:	addne	r6, r6, r3
   2add4:	ldr	r3, [sp]
   2add8:	add	r1, r3, r9, lsl #2
   2addc:	mov	r3, #0
   2ade0:	ldr	r2, [sp, #204]	; 0xcc
   2ade4:	ldr	r2, [r2]
   2ade8:	cmp	r3, r2
   2adec:	str	r2, [sp, #8]
   2adf0:	blt	2ad74 <GetDataSlab+0xee58>
   2adf4:	ldr	r3, [sp, #196]	; 0xc4
   2adf8:	ldr	r2, [fp]
   2adfc:	ldr	r8, [sp, #4]
   2ae00:	ldr	r3, [r3]
   2ae04:	ldr	r5, [sp, #16]
   2ae08:	sub	r3, r2, r3
   2ae0c:	add	r6, r6, r3
   2ae10:	add	r4, r4, r3
   2ae14:	ldr	r3, [sp, #208]	; 0xd0
   2ae18:	cmp	r5, r3
   2ae1c:	bge	2adac <GetDataSlab+0xee90>
   2ae20:	ldr	r3, [sl, r5, lsl #2]
   2ae24:	ldr	r2, [sp, #204]	; 0xcc
   2ae28:	add	r3, r3, #1
   2ae2c:	str	r3, [sl, r5, lsl #2]
   2ae30:	mov	r0, r3
   2ae34:	ldr	r1, [r2, r5, lsl #2]
   2ae38:	bl	3fd18 <__aeabi_idivmod>
   2ae3c:	subs	r3, r1, #0
   2ae40:	bne	2ad98 <GetDataSlab+0xee7c>
   2ae44:	ldr	r7, [r8, #4]
   2ae48:	str	r3, [sl, r5, lsl #2]
   2ae4c:	mov	r1, r7
   2ae50:	mov	r0, r6
   2ae54:	bl	3fd18 <__aeabi_idivmod>
   2ae58:	ldr	r2, [sp, #196]	; 0xc4
   2ae5c:	ldr	r2, [r2, r5, lsl #2]
   2ae60:	subs	r3, r1, #0
   2ae64:	beq	2ad84 <GetDataSlab+0xee68>
   2ae68:	ldr	r1, [r8]
   2ae6c:	sub	r3, r7, r3
   2ae70:	mla	r3, r2, r1, r3
   2ae74:	add	r4, r4, r3
   2ae78:	add	r6, r6, r3
   2ae7c:	add	r5, r5, #1
   2ae80:	add	r8, r8, #4
   2ae84:	b	2ae14 <GetDataSlab+0xeef8>
   2ae88:	ldrb	r3, [r4]
   2ae8c:	str	r3, [r1, r2, lsl #2]
   2ae90:	ldr	r3, [r9]
   2ae94:	add	r2, r2, #1
   2ae98:	add	r4, r4, r3
   2ae9c:	add	r6, r6, r3
   2aea0:	b	2ac40 <GetDataSlab+0xed24>
   2aea4:	cmp	r2, #0
   2aea8:	beq	2acec <GetDataSlab+0xedd0>
   2aeac:	ldr	r3, [r8]
   2aeb0:	mul	r3, r3, r2
   2aeb4:	b	2ace4 <GetDataSlab+0xedc8>
   2aeb8:	add	r3, sp, #152	; 0x98
   2aebc:	add	r3, r3, r5, lsl #2
   2aec0:	ldr	r3, [r3, #-120]	; 0xffffff88
   2aec4:	add	r6, r6, r3
   2aec8:	add	r4, r4, r3
   2aecc:	ldr	r3, [sp, #8]
   2aed0:	ldr	r2, [sp, #16]
   2aed4:	add	r3, r3, r2
   2aed8:	b	2ac08 <GetDataSlab+0xecec>
   2aedc:	cmp	r5, #12
   2aee0:	bne	2b214 <GetDataSlab+0xf2f8>
   2aee4:	ldr	r3, [r9]
   2aee8:	ldr	ip, [sp, #4]
   2aeec:	str	r3, [sp, #16]
   2aef0:	sub	r3, r3, #1
   2aef4:	str	r3, [sp, #32]
   2aef8:	ldr	r3, [fp]
   2aefc:	mov	lr, fp
   2af00:	str	r3, [sp, #112]	; 0x70
   2af04:	ldr	r3, [sp, #204]	; 0xcc
   2af08:	mov	r6, #0
   2af0c:	mov	r2, #1
   2af10:	ldr	r3, [r3]
   2af14:	str	r3, [sp, #12]
   2af18:	ldr	r3, [sp, #208]	; 0xd0
   2af1c:	cmp	r2, r3
   2af20:	blt	2b02c <GetDataSlab+0xf110>
   2af24:	ldr	r3, [sp, #8]
   2af28:	add	r4, r3, r6, lsl #3
   2af2c:	ldr	r3, [sp, #16]
   2af30:	cmp	r3, #1
   2af34:	movne	r3, #0
   2af38:	moveq	r9, #0
   2af3c:	beq	2b0e8 <GetDataSlab+0xf1cc>
   2af40:	str	r3, [sp, #8]
   2af44:	ldr	r3, [sp, #8]
   2af48:	ldr	r2, [sp, #12]
   2af4c:	cmp	r3, r2
   2af50:	bge	1c04c <GetDataSlab+0x130>
   2af54:	ldr	r3, [sp, #196]	; 0xc4
   2af58:	ldr	r2, [sp, #8]
   2af5c:	ldr	r3, [r3]
   2af60:	cmp	r3, #0
   2af64:	addne	r4, r4, r3, lsl #3
   2af68:	addne	r6, r6, r3
   2af6c:	ldr	r3, [sp]
   2af70:	add	r1, r3, r2, lsl #2
   2af74:	mov	r3, #0
   2af78:	ldr	r2, [sp, #204]	; 0xcc
   2af7c:	ldr	r2, [r2]
   2af80:	cmp	r3, r2
   2af84:	str	r2, [sp, #16]
   2af88:	blt	2b1c0 <GetDataSlab+0xf2a4>
   2af8c:	ldr	r3, [r9]
   2af90:	ldr	r8, [sp, #4]
   2af94:	mov	r5, #1
   2af98:	mul	r3, r3, r2
   2af9c:	ldr	r2, [fp]
   2afa0:	sub	r3, r2, r3
   2afa4:	ldr	r2, [sp, #196]	; 0xc4
   2afa8:	ldr	r2, [r2]
   2afac:	sub	r3, r3, r2
   2afb0:	add	r6, r6, r3
   2afb4:	add	r4, r4, r3, lsl #3
   2afb8:	ldr	r3, [sp, #208]	; 0xd0
   2afbc:	cmp	r5, r3
   2afc0:	bge	2b204 <GetDataSlab+0xf2e8>
   2afc4:	ldr	r3, [sl, r5, lsl #2]
   2afc8:	ldr	r2, [sp, #204]	; 0xcc
   2afcc:	add	r3, r3, #1
   2afd0:	str	r3, [sl, r5, lsl #2]
   2afd4:	mov	r0, r3
   2afd8:	ldr	r1, [r2, r5, lsl #2]
   2afdc:	bl	3fd18 <__aeabi_idivmod>
   2afe0:	subs	r3, r1, #0
   2afe4:	bne	2b1f0 <GetDataSlab+0xf2d4>
   2afe8:	ldr	r7, [r8, #4]
   2afec:	str	r3, [sl, r5, lsl #2]
   2aff0:	mov	r1, r7
   2aff4:	mov	r0, r6
   2aff8:	bl	3fd18 <__aeabi_idivmod>
   2affc:	ldr	r2, [sp, #196]	; 0xc4
   2b000:	ldr	r2, [r2, r5, lsl #2]
   2b004:	subs	r3, r1, #0
   2b008:	beq	2b1dc <GetDataSlab+0xf2c0>
   2b00c:	ldr	r1, [r8]
   2b010:	sub	r3, r7, r3
   2b014:	mla	r3, r2, r1, r3
   2b018:	add	r4, r4, r3, lsl #3
   2b01c:	add	r6, r6, r3
   2b020:	add	r5, r5, #1
   2b024:	add	r8, r8, #4
   2b028:	b	2afb8 <GetDataSlab+0xf09c>
   2b02c:	ldr	r3, [r9, r2, lsl #2]
   2b030:	mov	r5, ip
   2b034:	sub	r3, r3, #1
   2b038:	str	r3, [r4, r2, lsl #2]
   2b03c:	ldr	r3, [lr], #4
   2b040:	mov	r1, lr
   2b044:	str	r3, [ip, #4]
   2b048:	cmp	r1, fp
   2b04c:	bne	2b080 <GetDataSlab+0xf164>
   2b050:	ldr	r3, [sp, #204]	; 0xcc
   2b054:	ldr	r1, [sp, #12]
   2b058:	add	ip, ip, #4
   2b05c:	ldr	r3, [r3, r2, lsl #2]
   2b060:	mul	r3, r3, r1
   2b064:	ldr	r1, [sp, #196]	; 0xc4
   2b068:	str	r3, [sp, #12]
   2b06c:	ldr	r3, [r5]
   2b070:	ldr	r1, [r1, r2, lsl #2]
   2b074:	add	r2, r2, #1
   2b078:	mla	r6, r1, r3, r6
   2b07c:	b	2af18 <GetDataSlab+0xeffc>
   2b080:	ldr	r7, [r4, r2, lsl #2]
   2b084:	mov	r0, r1
   2b088:	ldr	r3, [r1, #-4]!
   2b08c:	mul	r3, r3, r7
   2b090:	ldr	r7, [ip, #4]
   2b094:	str	r3, [r4, r2, lsl #2]
   2b098:	ldr	r3, [r0]
   2b09c:	mul	r3, r3, r7
   2b0a0:	str	r3, [ip, #4]
   2b0a4:	b	2b048 <GetDataSlab+0xf12c>
   2b0a8:	ldr	r3, [r1, #8]!
   2b0ac:	str	r3, [r0, r2, lsl #2]
   2b0b0:	add	r2, r2, #1
   2b0b4:	b	2b118 <GetDataSlab+0xf1fc>
   2b0b8:	cmp	r2, #0
   2b0bc:	beq	2b1b4 <GetDataSlab+0xf298>
   2b0c0:	ldr	r3, [r8]
   2b0c4:	mul	r3, r3, r2
   2b0c8:	b	2b1ac <GetDataSlab+0xf290>
   2b0cc:	add	r3, sp, #152	; 0x98
   2b0d0:	add	r3, r3, r5, lsl #2
   2b0d4:	ldr	r3, [r3, #-120]	; 0xffffff88
   2b0d8:	add	r6, r6, r3
   2b0dc:	add	r4, r4, r3, lsl #3
   2b0e0:	ldr	r3, [sp, #8]
   2b0e4:	add	r9, r9, r3
   2b0e8:	ldr	r3, [sp, #12]
   2b0ec:	cmp	r9, r3
   2b0f0:	bge	1c04c <GetDataSlab+0x130>
   2b0f4:	ldr	r3, [sp, #196]	; 0xc4
   2b0f8:	mov	r2, #0
   2b0fc:	ldr	r3, [r3]
   2b100:	cmp	r3, #0
   2b104:	addne	r4, r4, r3, lsl #3
   2b108:	addne	r6, r6, r3
   2b10c:	ldr	r3, [sp]
   2b110:	sub	r1, r4, #8
   2b114:	add	r0, r3, r9, lsl #2
   2b118:	ldr	r3, [sp, #204]	; 0xcc
   2b11c:	ldr	r3, [r3]
   2b120:	cmp	r2, r3
   2b124:	str	r3, [sp, #8]
   2b128:	blt	2b0a8 <GetDataSlab+0xf18c>
   2b12c:	ldr	r3, [sp, #196]	; 0xc4
   2b130:	ldr	r2, [fp]
   2b134:	ldr	r8, [sp, #4]
   2b138:	ldr	r3, [r3]
   2b13c:	ldr	r5, [sp, #16]
   2b140:	sub	r3, r2, r3
   2b144:	add	r6, r6, r3
   2b148:	add	r4, r4, r3, lsl #3
   2b14c:	ldr	r3, [sp, #208]	; 0xd0
   2b150:	cmp	r5, r3
   2b154:	bge	2b0e0 <GetDataSlab+0xf1c4>
   2b158:	ldr	r3, [sl, r5, lsl #2]
   2b15c:	ldr	r2, [sp, #204]	; 0xcc
   2b160:	add	r3, r3, #1
   2b164:	str	r3, [sl, r5, lsl #2]
   2b168:	mov	r0, r3
   2b16c:	ldr	r1, [r2, r5, lsl #2]
   2b170:	bl	3fd18 <__aeabi_idivmod>
   2b174:	subs	r3, r1, #0
   2b178:	bne	2b0cc <GetDataSlab+0xf1b0>
   2b17c:	ldr	r7, [r8, #4]
   2b180:	str	r3, [sl, r5, lsl #2]
   2b184:	mov	r1, r7
   2b188:	mov	r0, r6
   2b18c:	bl	3fd18 <__aeabi_idivmod>
   2b190:	ldr	r2, [sp, #196]	; 0xc4
   2b194:	ldr	r2, [r2, r5, lsl #2]
   2b198:	subs	r3, r1, #0
   2b19c:	beq	2b0b8 <GetDataSlab+0xf19c>
   2b1a0:	ldr	r1, [r8]
   2b1a4:	sub	r3, r7, r3
   2b1a8:	mla	r3, r2, r1, r3
   2b1ac:	add	r4, r4, r3, lsl #3
   2b1b0:	add	r6, r6, r3
   2b1b4:	add	r5, r5, #1
   2b1b8:	add	r8, r8, #4
   2b1bc:	b	2b14c <GetDataSlab+0xf230>
   2b1c0:	ldr	r2, [r4]
   2b1c4:	str	r2, [r1, r3, lsl #2]
   2b1c8:	ldr	r2, [r9]
   2b1cc:	add	r3, r3, #1
   2b1d0:	add	r6, r6, r2
   2b1d4:	add	r4, r4, r2, lsl #3
   2b1d8:	b	2af78 <GetDataSlab+0xf05c>
   2b1dc:	cmp	r2, #0
   2b1e0:	beq	2b020 <GetDataSlab+0xf104>
   2b1e4:	ldr	r3, [r8]
   2b1e8:	mul	r3, r3, r2
   2b1ec:	b	2b018 <GetDataSlab+0xf0fc>
   2b1f0:	add	r3, sp, #152	; 0x98
   2b1f4:	add	r3, r3, r5, lsl #2
   2b1f8:	ldr	r3, [r3, #-120]	; 0xffffff88
   2b1fc:	add	r6, r6, r3
   2b200:	add	r4, r4, r3, lsl #3
   2b204:	ldr	r3, [sp, #8]
   2b208:	ldr	r2, [sp, #16]
   2b20c:	add	r3, r3, r2
   2b210:	b	2af40 <GetDataSlab+0xf024>
   2b214:	cmp	r5, #13
   2b218:	bne	337fc <GetDataSlab+0x178e0>
   2b21c:	ldr	r3, [r9]
   2b220:	ldr	ip, [sp, #4]
   2b224:	str	r3, [sp, #16]
   2b228:	sub	r3, r3, #1
   2b22c:	str	r3, [sp, #32]
   2b230:	ldr	r3, [fp]
   2b234:	mov	lr, fp
   2b238:	str	r3, [sp, #112]	; 0x70
   2b23c:	ldr	r3, [sp, #204]	; 0xcc
   2b240:	mov	r6, #0
   2b244:	mov	r2, #1
   2b248:	ldr	r3, [r3]
   2b24c:	str	r3, [sp, #12]
   2b250:	ldr	r3, [sp, #208]	; 0xd0
   2b254:	cmp	r2, r3
   2b258:	blt	2b364 <GetDataSlab+0xf448>
   2b25c:	ldr	r3, [sp, #8]
   2b260:	add	r4, r3, r6, lsl #3
   2b264:	ldr	r3, [sp, #16]
   2b268:	cmp	r3, #1
   2b26c:	movne	r3, #0
   2b270:	moveq	r9, #0
   2b274:	beq	2b420 <GetDataSlab+0xf504>
   2b278:	str	r3, [sp, #8]
   2b27c:	ldr	r3, [sp, #8]
   2b280:	ldr	r2, [sp, #12]
   2b284:	cmp	r3, r2
   2b288:	bge	1c04c <GetDataSlab+0x130>
   2b28c:	ldr	r3, [sp, #196]	; 0xc4
   2b290:	ldr	r2, [sp, #8]
   2b294:	ldr	r3, [r3]
   2b298:	cmp	r3, #0
   2b29c:	addne	r4, r4, r3, lsl #3
   2b2a0:	addne	r6, r6, r3
   2b2a4:	ldr	r3, [sp]
   2b2a8:	add	r1, r3, r2, lsl #2
   2b2ac:	mov	r3, #0
   2b2b0:	ldr	r2, [sp, #204]	; 0xcc
   2b2b4:	ldr	r2, [r2]
   2b2b8:	cmp	r3, r2
   2b2bc:	str	r2, [sp, #16]
   2b2c0:	blt	2b4f8 <GetDataSlab+0xf5dc>
   2b2c4:	ldr	r3, [r9]
   2b2c8:	ldr	r8, [sp, #4]
   2b2cc:	mov	r5, #1
   2b2d0:	mul	r3, r3, r2
   2b2d4:	ldr	r2, [fp]
   2b2d8:	sub	r3, r2, r3
   2b2dc:	ldr	r2, [sp, #196]	; 0xc4
   2b2e0:	ldr	r2, [r2]
   2b2e4:	sub	r3, r3, r2
   2b2e8:	add	r6, r6, r3
   2b2ec:	add	r4, r4, r3, lsl #3
   2b2f0:	ldr	r3, [sp, #208]	; 0xd0
   2b2f4:	cmp	r5, r3
   2b2f8:	bge	2b53c <GetDataSlab+0xf620>
   2b2fc:	ldr	r3, [sl, r5, lsl #2]
   2b300:	ldr	r2, [sp, #204]	; 0xcc
   2b304:	add	r3, r3, #1
   2b308:	str	r3, [sl, r5, lsl #2]
   2b30c:	mov	r0, r3
   2b310:	ldr	r1, [r2, r5, lsl #2]
   2b314:	bl	3fd18 <__aeabi_idivmod>
   2b318:	subs	r3, r1, #0
   2b31c:	bne	2b528 <GetDataSlab+0xf60c>
   2b320:	ldr	r7, [r8, #4]
   2b324:	str	r3, [sl, r5, lsl #2]
   2b328:	mov	r1, r7
   2b32c:	mov	r0, r6
   2b330:	bl	3fd18 <__aeabi_idivmod>
   2b334:	ldr	r2, [sp, #196]	; 0xc4
   2b338:	ldr	r2, [r2, r5, lsl #2]
   2b33c:	subs	r3, r1, #0
   2b340:	beq	2b514 <GetDataSlab+0xf5f8>
   2b344:	ldr	r1, [r8]
   2b348:	sub	r3, r7, r3
   2b34c:	mla	r3, r2, r1, r3
   2b350:	add	r4, r4, r3, lsl #3
   2b354:	add	r6, r6, r3
   2b358:	add	r5, r5, #1
   2b35c:	add	r8, r8, #4
   2b360:	b	2b2f0 <GetDataSlab+0xf3d4>
   2b364:	ldr	r3, [r9, r2, lsl #2]
   2b368:	mov	r5, ip
   2b36c:	sub	r3, r3, #1
   2b370:	str	r3, [r4, r2, lsl #2]
   2b374:	ldr	r3, [lr], #4
   2b378:	mov	r1, lr
   2b37c:	str	r3, [ip, #4]
   2b380:	cmp	r1, fp
   2b384:	bne	2b3b8 <GetDataSlab+0xf49c>
   2b388:	ldr	r3, [sp, #204]	; 0xcc
   2b38c:	ldr	r1, [sp, #12]
   2b390:	add	ip, ip, #4
   2b394:	ldr	r3, [r3, r2, lsl #2]
   2b398:	mul	r3, r3, r1
   2b39c:	ldr	r1, [sp, #196]	; 0xc4
   2b3a0:	str	r3, [sp, #12]
   2b3a4:	ldr	r3, [r5]
   2b3a8:	ldr	r1, [r1, r2, lsl #2]
   2b3ac:	add	r2, r2, #1
   2b3b0:	mla	r6, r1, r3, r6
   2b3b4:	b	2b250 <GetDataSlab+0xf334>
   2b3b8:	ldr	r7, [r4, r2, lsl #2]
   2b3bc:	mov	r0, r1
   2b3c0:	ldr	r3, [r1, #-4]!
   2b3c4:	mul	r3, r3, r7
   2b3c8:	ldr	r7, [ip, #4]
   2b3cc:	str	r3, [r4, r2, lsl #2]
   2b3d0:	ldr	r3, [r0]
   2b3d4:	mul	r3, r3, r7
   2b3d8:	str	r3, [ip, #4]
   2b3dc:	b	2b380 <GetDataSlab+0xf464>
   2b3e0:	ldr	r3, [r1, #8]!
   2b3e4:	str	r3, [r0, r2, lsl #2]
   2b3e8:	add	r2, r2, #1
   2b3ec:	b	2b450 <GetDataSlab+0xf534>
   2b3f0:	cmp	r2, #0
   2b3f4:	beq	2b4ec <GetDataSlab+0xf5d0>
   2b3f8:	ldr	r3, [r8]
   2b3fc:	mul	r3, r3, r2
   2b400:	b	2b4e4 <GetDataSlab+0xf5c8>
   2b404:	add	r3, sp, #152	; 0x98
   2b408:	add	r3, r3, r5, lsl #2
   2b40c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2b410:	add	r6, r6, r3
   2b414:	add	r4, r4, r3, lsl #3
   2b418:	ldr	r3, [sp, #8]
   2b41c:	add	r9, r9, r3
   2b420:	ldr	r3, [sp, #12]
   2b424:	cmp	r9, r3
   2b428:	bge	1c04c <GetDataSlab+0x130>
   2b42c:	ldr	r3, [sp, #196]	; 0xc4
   2b430:	mov	r2, #0
   2b434:	ldr	r3, [r3]
   2b438:	cmp	r3, #0
   2b43c:	addne	r4, r4, r3, lsl #3
   2b440:	addne	r6, r6, r3
   2b444:	ldr	r3, [sp]
   2b448:	sub	r1, r4, #8
   2b44c:	add	r0, r3, r9, lsl #2
   2b450:	ldr	r3, [sp, #204]	; 0xcc
   2b454:	ldr	r3, [r3]
   2b458:	cmp	r2, r3
   2b45c:	str	r3, [sp, #8]
   2b460:	blt	2b3e0 <GetDataSlab+0xf4c4>
   2b464:	ldr	r3, [sp, #196]	; 0xc4
   2b468:	ldr	r2, [fp]
   2b46c:	ldr	r8, [sp, #4]
   2b470:	ldr	r3, [r3]
   2b474:	ldr	r5, [sp, #16]
   2b478:	sub	r3, r2, r3
   2b47c:	add	r6, r6, r3
   2b480:	add	r4, r4, r3, lsl #3
   2b484:	ldr	r3, [sp, #208]	; 0xd0
   2b488:	cmp	r5, r3
   2b48c:	bge	2b418 <GetDataSlab+0xf4fc>
   2b490:	ldr	r3, [sl, r5, lsl #2]
   2b494:	ldr	r2, [sp, #204]	; 0xcc
   2b498:	add	r3, r3, #1
   2b49c:	str	r3, [sl, r5, lsl #2]
   2b4a0:	mov	r0, r3
   2b4a4:	ldr	r1, [r2, r5, lsl #2]
   2b4a8:	bl	3fd18 <__aeabi_idivmod>
   2b4ac:	subs	r3, r1, #0
   2b4b0:	bne	2b404 <GetDataSlab+0xf4e8>
   2b4b4:	ldr	r7, [r8, #4]
   2b4b8:	str	r3, [sl, r5, lsl #2]
   2b4bc:	mov	r1, r7
   2b4c0:	mov	r0, r6
   2b4c4:	bl	3fd18 <__aeabi_idivmod>
   2b4c8:	ldr	r2, [sp, #196]	; 0xc4
   2b4cc:	ldr	r2, [r2, r5, lsl #2]
   2b4d0:	subs	r3, r1, #0
   2b4d4:	beq	2b3f0 <GetDataSlab+0xf4d4>
   2b4d8:	ldr	r1, [r8]
   2b4dc:	sub	r3, r7, r3
   2b4e0:	mla	r3, r2, r1, r3
   2b4e4:	add	r4, r4, r3, lsl #3
   2b4e8:	add	r6, r6, r3
   2b4ec:	add	r5, r5, #1
   2b4f0:	add	r8, r8, #4
   2b4f4:	b	2b484 <GetDataSlab+0xf568>
   2b4f8:	ldr	r2, [r4]
   2b4fc:	str	r2, [r1, r3, lsl #2]
   2b500:	ldr	r2, [r9]
   2b504:	add	r3, r3, #1
   2b508:	add	r6, r6, r2
   2b50c:	add	r4, r4, r2, lsl #3
   2b510:	b	2b2b0 <GetDataSlab+0xf394>
   2b514:	cmp	r2, #0
   2b518:	beq	2b358 <GetDataSlab+0xf43c>
   2b51c:	ldr	r3, [r8]
   2b520:	mul	r3, r3, r2
   2b524:	b	2b350 <GetDataSlab+0xf434>
   2b528:	add	r3, sp, #152	; 0x98
   2b52c:	add	r3, r3, r5, lsl #2
   2b530:	ldr	r3, [r3, #-120]	; 0xffffff88
   2b534:	add	r6, r6, r3
   2b538:	add	r4, r4, r3, lsl #3
   2b53c:	ldr	r3, [sp, #8]
   2b540:	ldr	r2, [sp, #16]
   2b544:	add	r3, r3, r2
   2b548:	b	2b278 <GetDataSlab+0xf35c>
   2b54c:	sub	r3, r5, #1
   2b550:	cmp	r3, #8
   2b554:	addls	pc, pc, r3, lsl #2
   2b558:	b	2cf88 <GetDataSlab+0x1106c>
   2b55c:	b	2c920 <GetDataSlab+0x10a04>
   2b560:	b	2cc54 <GetDataSlab+0x10d38>
   2b564:	b	2c2a0 <GetDataSlab+0x10384>
   2b568:	b	2c5e0 <GetDataSlab+0x106c4>
   2b56c:	b	2bc28 <GetDataSlab+0xfd0c>
   2b570:	b	2bf64 <GetDataSlab+0x10048>
   2b574:	b	2b8d4 <GetDataSlab+0xf9b8>
   2b578:	b	2cf88 <GetDataSlab+0x1106c>
   2b57c:	b	2b580 <GetDataSlab+0xf664>
   2b580:	ldr	r3, [r9]
   2b584:	ldr	ip, [sp, #4]
   2b588:	str	r3, [sp, #16]
   2b58c:	sub	r3, r3, #1
   2b590:	str	r3, [sp, #32]
   2b594:	ldr	r3, [fp]
   2b598:	mov	lr, fp
   2b59c:	str	r3, [sp, #24]
   2b5a0:	str	r3, [sp, #112]	; 0x70
   2b5a4:	ldr	r3, [sp, #204]	; 0xcc
   2b5a8:	mov	r6, #0
   2b5ac:	mov	r2, #1
   2b5b0:	ldr	r3, [r3]
   2b5b4:	str	r3, [sp, #12]
   2b5b8:	str	r3, [sp, #20]
   2b5bc:	ldr	r3, [sp, #208]	; 0xd0
   2b5c0:	cmp	r2, r3
   2b5c4:	blt	2b6f8 <GetDataSlab+0xf7dc>
   2b5c8:	ldr	r3, [sp, #8]
   2b5cc:	add	r5, r3, r6, lsl #3
   2b5d0:	ldr	r3, [sp, #16]
   2b5d4:	cmp	r3, #1
   2b5d8:	moveq	r9, #0
   2b5dc:	beq	2b7bc <GetDataSlab+0xf8a0>
   2b5e0:	ldr	r3, [sp, #16]
   2b5e4:	ldr	r2, [sp, #12]
   2b5e8:	mov	r9, #0
   2b5ec:	mul	r3, r3, r2
   2b5f0:	ldr	r2, [sp, #24]
   2b5f4:	sub	r3, r2, r3
   2b5f8:	str	r3, [sp, #24]
   2b5fc:	ldr	r3, [sp, #16]
   2b600:	ldr	r2, [sp, #16]
   2b604:	lsl	fp, r3, #3
   2b608:	ldr	r3, [sp, #12]
   2b60c:	bic	r3, r3, r3, asr #31
   2b610:	mul	r2, r3, r2
   2b614:	mul	r3, fp, r3
   2b618:	str	r2, [sp, #16]
   2b61c:	str	r3, [sp, #8]
   2b620:	ldr	r3, [sp, #20]
   2b624:	cmp	r9, r3
   2b628:	bge	1c04c <GetDataSlab+0x130>
   2b62c:	ldr	r3, [sp, #196]	; 0xc4
   2b630:	mov	r2, #0
   2b634:	ldr	r0, [r3]
   2b638:	ldr	r3, [sp]
   2b63c:	cmp	r0, #0
   2b640:	addne	r5, r5, r0, lsl #3
   2b644:	add	ip, r3, r9, lsl #1
   2b648:	addne	r6, r6, r0
   2b64c:	mov	r3, r5
   2b650:	ldr	r1, [sp, #12]
   2b654:	cmp	r2, r1
   2b658:	blt	2b884 <GetDataSlab+0xf968>
   2b65c:	ldr	r3, [sp, #24]
   2b660:	ldr	r8, [sp, #4]
   2b664:	sub	r2, r3, r0
   2b668:	ldr	r3, [sp, #16]
   2b66c:	mov	r4, #1
   2b670:	add	r3, r3, r6
   2b674:	add	r6, r3, r2
   2b678:	ldr	r3, [sp, #8]
   2b67c:	add	r3, r3, r2, lsl #3
   2b680:	add	r5, r5, r3
   2b684:	ldr	r3, [sp, #208]	; 0xd0
   2b688:	cmp	r4, r3
   2b68c:	bge	2b8c8 <GetDataSlab+0xf9ac>
   2b690:	ldr	r3, [sl, r4, lsl #2]
   2b694:	ldr	r2, [sp, #204]	; 0xcc
   2b698:	add	r3, r3, #1
   2b69c:	str	r3, [sl, r4, lsl #2]
   2b6a0:	mov	r0, r3
   2b6a4:	ldr	r1, [r2, r4, lsl #2]
   2b6a8:	bl	3fd18 <__aeabi_idivmod>
   2b6ac:	subs	r3, r1, #0
   2b6b0:	bne	2b8b4 <GetDataSlab+0xf998>
   2b6b4:	ldr	r7, [r8, #4]
   2b6b8:	str	r3, [sl, r4, lsl #2]
   2b6bc:	mov	r1, r7
   2b6c0:	mov	r0, r6
   2b6c4:	bl	3fd18 <__aeabi_idivmod>
   2b6c8:	ldr	r2, [sp, #196]	; 0xc4
   2b6cc:	ldr	r2, [r2, r4, lsl #2]
   2b6d0:	subs	r3, r1, #0
   2b6d4:	beq	2b8a0 <GetDataSlab+0xf984>
   2b6d8:	ldr	r1, [r8]
   2b6dc:	sub	r3, r7, r3
   2b6e0:	mla	r3, r2, r1, r3
   2b6e4:	add	r5, r5, r3, lsl #3
   2b6e8:	add	r6, r6, r3
   2b6ec:	add	r4, r4, #1
   2b6f0:	add	r8, r8, #4
   2b6f4:	b	2b684 <GetDataSlab+0xf768>
   2b6f8:	ldr	r3, [r9, r2, lsl #2]
   2b6fc:	mov	r5, ip
   2b700:	sub	r3, r3, #1
   2b704:	str	r3, [r4, r2, lsl #2]
   2b708:	ldr	r3, [lr], #4
   2b70c:	mov	r1, lr
   2b710:	str	r3, [ip, #4]
   2b714:	cmp	r1, fp
   2b718:	bne	2b74c <GetDataSlab+0xf830>
   2b71c:	ldr	r3, [sp, #204]	; 0xcc
   2b720:	ldr	r1, [sp, #20]
   2b724:	add	ip, ip, #4
   2b728:	ldr	r3, [r3, r2, lsl #2]
   2b72c:	mul	r3, r3, r1
   2b730:	ldr	r1, [sp, #196]	; 0xc4
   2b734:	str	r3, [sp, #20]
   2b738:	ldr	r3, [r5]
   2b73c:	ldr	r1, [r1, r2, lsl #2]
   2b740:	add	r2, r2, #1
   2b744:	mla	r6, r1, r3, r6
   2b748:	b	2b5bc <GetDataSlab+0xf6a0>
   2b74c:	ldr	r7, [r4, r2, lsl #2]
   2b750:	mov	r0, r1
   2b754:	ldr	r3, [r1, #-4]!
   2b758:	mul	r3, r3, r7
   2b75c:	ldr	r7, [ip, #4]
   2b760:	str	r3, [r4, r2, lsl #2]
   2b764:	ldr	r3, [r0]
   2b768:	mul	r3, r3, r7
   2b76c:	str	r3, [ip, #4]
   2b770:	b	2b714 <GetDataSlab+0xf7f8>
   2b774:	vldmia	ip!, {d7}
   2b778:	add	r2, r2, #1
   2b77c:	vcvt.s32.f64	s15, d7
   2b780:	vmov	r1, s15
   2b784:	strh	r1, [r0], #2
   2b788:	b	2b7ec <GetDataSlab+0xf8d0>
   2b78c:	cmp	r2, #0
   2b790:	beq	2b878 <GetDataSlab+0xf95c>
   2b794:	ldr	r3, [r8]
   2b798:	mul	r3, r3, r2
   2b79c:	b	2b870 <GetDataSlab+0xf954>
   2b7a0:	add	r3, sp, #152	; 0x98
   2b7a4:	add	r3, r3, r4, lsl #2
   2b7a8:	ldr	r3, [r3, #-120]	; 0xffffff88
   2b7ac:	add	r6, r6, r3
   2b7b0:	add	r5, r5, r3, lsl #3
   2b7b4:	ldr	r3, [sp, #12]
   2b7b8:	add	r9, r9, r3
   2b7bc:	ldr	r3, [sp, #20]
   2b7c0:	cmp	r9, r3
   2b7c4:	bge	1c04c <GetDataSlab+0x130>
   2b7c8:	ldr	r3, [sp, #196]	; 0xc4
   2b7cc:	ldr	r2, [sp]
   2b7d0:	ldr	r3, [r3]
   2b7d4:	add	r0, r2, r9, lsl #1
   2b7d8:	cmp	r3, #0
   2b7dc:	addne	r5, r5, r3, lsl #3
   2b7e0:	addne	r6, r6, r3
   2b7e4:	mov	ip, r5
   2b7e8:	mov	r2, #0
   2b7ec:	ldr	r1, [sp, #12]
   2b7f0:	cmp	r2, r1
   2b7f4:	blt	2b774 <GetDataSlab+0xf858>
   2b7f8:	ldr	r2, [sp, #24]
   2b7fc:	ldr	r8, [sp, #4]
   2b800:	sub	r3, r2, r3
   2b804:	ldr	r4, [sp, #16]
   2b808:	add	r6, r6, r3
   2b80c:	add	r5, r5, r3, lsl #3
   2b810:	ldr	r3, [sp, #208]	; 0xd0
   2b814:	cmp	r4, r3
   2b818:	bge	2b7b4 <GetDataSlab+0xf898>
   2b81c:	ldr	r3, [sl, r4, lsl #2]
   2b820:	ldr	r2, [sp, #204]	; 0xcc
   2b824:	add	r3, r3, #1
   2b828:	str	r3, [sl, r4, lsl #2]
   2b82c:	mov	r0, r3
   2b830:	ldr	r1, [r2, r4, lsl #2]
   2b834:	bl	3fd18 <__aeabi_idivmod>
   2b838:	subs	r3, r1, #0
   2b83c:	bne	2b7a0 <GetDataSlab+0xf884>
   2b840:	ldr	r7, [r8, #4]
   2b844:	str	r3, [sl, r4, lsl #2]
   2b848:	mov	r1, r7
   2b84c:	mov	r0, r6
   2b850:	bl	3fd18 <__aeabi_idivmod>
   2b854:	ldr	r2, [sp, #196]	; 0xc4
   2b858:	ldr	r2, [r2, r4, lsl #2]
   2b85c:	subs	r3, r1, #0
   2b860:	beq	2b78c <GetDataSlab+0xf870>
   2b864:	ldr	r1, [r8]
   2b868:	sub	r3, r7, r3
   2b86c:	mla	r3, r2, r1, r3
   2b870:	add	r5, r5, r3, lsl #3
   2b874:	add	r6, r6, r3
   2b878:	add	r4, r4, #1
   2b87c:	add	r8, r8, #4
   2b880:	b	2b810 <GetDataSlab+0xf8f4>
   2b884:	vldr	d7, [r3]
   2b888:	add	r2, r2, #1
   2b88c:	add	r3, r3, fp
   2b890:	vcvt.s32.f64	s15, d7
   2b894:	vmov	r1, s15
   2b898:	strh	r1, [ip], #2
   2b89c:	b	2b650 <GetDataSlab+0xf734>
   2b8a0:	cmp	r2, #0
   2b8a4:	beq	2b6ec <GetDataSlab+0xf7d0>
   2b8a8:	ldr	r3, [r8]
   2b8ac:	mul	r3, r3, r2
   2b8b0:	b	2b6e4 <GetDataSlab+0xf7c8>
   2b8b4:	add	r3, sp, #152	; 0x98
   2b8b8:	add	r3, r3, r4, lsl #2
   2b8bc:	ldr	r3, [r3, #-120]	; 0xffffff88
   2b8c0:	add	r6, r6, r3
   2b8c4:	add	r5, r5, r3, lsl #3
   2b8c8:	ldr	r3, [sp, #12]
   2b8cc:	add	r9, r9, r3
   2b8d0:	b	2b620 <GetDataSlab+0xf704>
   2b8d4:	ldr	r3, [r9]
   2b8d8:	ldr	ip, [sp, #4]
   2b8dc:	str	r3, [sp, #16]
   2b8e0:	sub	r3, r3, #1
   2b8e4:	str	r3, [sp, #32]
   2b8e8:	ldr	r3, [fp]
   2b8ec:	mov	lr, fp
   2b8f0:	str	r3, [sp, #24]
   2b8f4:	str	r3, [sp, #112]	; 0x70
   2b8f8:	ldr	r3, [sp, #204]	; 0xcc
   2b8fc:	mov	r6, #0
   2b900:	mov	r2, #1
   2b904:	ldr	r3, [r3]
   2b908:	str	r3, [sp, #12]
   2b90c:	str	r3, [sp, #20]
   2b910:	ldr	r3, [sp, #208]	; 0xd0
   2b914:	cmp	r2, r3
   2b918:	blt	2ba4c <GetDataSlab+0xfb30>
   2b91c:	ldr	r3, [sp, #8]
   2b920:	add	r5, r3, r6, lsl #2
   2b924:	ldr	r3, [sp, #16]
   2b928:	cmp	r3, #1
   2b92c:	moveq	r9, #0
   2b930:	beq	2bb10 <GetDataSlab+0xfbf4>
   2b934:	ldr	r3, [sp, #16]
   2b938:	ldr	r2, [sp, #12]
   2b93c:	mov	r9, #0
   2b940:	mul	r3, r3, r2
   2b944:	ldr	r2, [sp, #24]
   2b948:	sub	r3, r2, r3
   2b94c:	str	r3, [sp, #24]
   2b950:	ldr	r3, [sp, #16]
   2b954:	ldr	r2, [sp, #16]
   2b958:	lsl	fp, r3, #2
   2b95c:	ldr	r3, [sp, #12]
   2b960:	bic	r3, r3, r3, asr #31
   2b964:	mul	r2, r3, r2
   2b968:	mul	r3, r3, fp
   2b96c:	str	r2, [sp, #8]
   2b970:	str	r3, [sp, #16]
   2b974:	ldr	r3, [sp, #20]
   2b978:	cmp	r9, r3
   2b97c:	bge	1c04c <GetDataSlab+0x130>
   2b980:	ldr	r3, [sp, #196]	; 0xc4
   2b984:	mov	r2, #0
   2b988:	ldr	r0, [r3]
   2b98c:	ldr	r3, [sp]
   2b990:	cmp	r0, #0
   2b994:	addne	r5, r5, r0, lsl #2
   2b998:	add	ip, r3, r9, lsl #1
   2b99c:	addne	r6, r6, r0
   2b9a0:	mov	r3, r5
   2b9a4:	ldr	r1, [sp, #12]
   2b9a8:	cmp	r2, r1
   2b9ac:	blt	2bbd8 <GetDataSlab+0xfcbc>
   2b9b0:	ldr	r3, [sp, #24]
   2b9b4:	ldr	r8, [sp, #4]
   2b9b8:	sub	r2, r3, r0
   2b9bc:	ldr	r3, [sp, #8]
   2b9c0:	mov	r4, #1
   2b9c4:	add	r3, r3, r6
   2b9c8:	add	r6, r3, r2
   2b9cc:	ldr	r3, [sp, #16]
   2b9d0:	add	r3, r3, r2, lsl #2
   2b9d4:	add	r5, r5, r3
   2b9d8:	ldr	r3, [sp, #208]	; 0xd0
   2b9dc:	cmp	r4, r3
   2b9e0:	bge	2bc1c <GetDataSlab+0xfd00>
   2b9e4:	ldr	r3, [sl, r4, lsl #2]
   2b9e8:	ldr	r2, [sp, #204]	; 0xcc
   2b9ec:	add	r3, r3, #1
   2b9f0:	str	r3, [sl, r4, lsl #2]
   2b9f4:	mov	r0, r3
   2b9f8:	ldr	r1, [r2, r4, lsl #2]
   2b9fc:	bl	3fd18 <__aeabi_idivmod>
   2ba00:	subs	r3, r1, #0
   2ba04:	bne	2bc08 <GetDataSlab+0xfcec>
   2ba08:	ldr	r7, [r8, #4]
   2ba0c:	str	r3, [sl, r4, lsl #2]
   2ba10:	mov	r1, r7
   2ba14:	mov	r0, r6
   2ba18:	bl	3fd18 <__aeabi_idivmod>
   2ba1c:	ldr	r2, [sp, #196]	; 0xc4
   2ba20:	ldr	r2, [r2, r4, lsl #2]
   2ba24:	subs	r3, r1, #0
   2ba28:	beq	2bbf4 <GetDataSlab+0xfcd8>
   2ba2c:	ldr	r1, [r8]
   2ba30:	sub	r3, r7, r3
   2ba34:	mla	r3, r2, r1, r3
   2ba38:	add	r5, r5, r3, lsl #2
   2ba3c:	add	r6, r6, r3
   2ba40:	add	r4, r4, #1
   2ba44:	add	r8, r8, #4
   2ba48:	b	2b9d8 <GetDataSlab+0xfabc>
   2ba4c:	ldr	r3, [r9, r2, lsl #2]
   2ba50:	mov	r5, ip
   2ba54:	sub	r3, r3, #1
   2ba58:	str	r3, [r4, r2, lsl #2]
   2ba5c:	ldr	r3, [lr], #4
   2ba60:	mov	r1, lr
   2ba64:	str	r3, [ip, #4]
   2ba68:	cmp	r1, fp
   2ba6c:	bne	2baa0 <GetDataSlab+0xfb84>
   2ba70:	ldr	r3, [sp, #204]	; 0xcc
   2ba74:	ldr	r1, [sp, #20]
   2ba78:	add	ip, ip, #4
   2ba7c:	ldr	r3, [r3, r2, lsl #2]
   2ba80:	mul	r3, r3, r1
   2ba84:	ldr	r1, [sp, #196]	; 0xc4
   2ba88:	str	r3, [sp, #20]
   2ba8c:	ldr	r3, [r5]
   2ba90:	ldr	r1, [r1, r2, lsl #2]
   2ba94:	add	r2, r2, #1
   2ba98:	mla	r6, r1, r3, r6
   2ba9c:	b	2b910 <GetDataSlab+0xf9f4>
   2baa0:	ldr	r7, [r4, r2, lsl #2]
   2baa4:	mov	r0, r1
   2baa8:	ldr	r3, [r1, #-4]!
   2baac:	mul	r3, r3, r7
   2bab0:	ldr	r7, [ip, #4]
   2bab4:	str	r3, [r4, r2, lsl #2]
   2bab8:	ldr	r3, [r0]
   2babc:	mul	r3, r3, r7
   2bac0:	str	r3, [ip, #4]
   2bac4:	b	2ba68 <GetDataSlab+0xfb4c>
   2bac8:	vldmia	ip!, {s15}
   2bacc:	add	r2, r2, #1
   2bad0:	vcvt.s32.f32	s15, s15
   2bad4:	vmov	r1, s15
   2bad8:	strh	r1, [r0], #2
   2badc:	b	2bb40 <GetDataSlab+0xfc24>
   2bae0:	cmp	r2, #0
   2bae4:	beq	2bbcc <GetDataSlab+0xfcb0>
   2bae8:	ldr	r3, [r8]
   2baec:	mul	r3, r3, r2
   2baf0:	b	2bbc4 <GetDataSlab+0xfca8>
   2baf4:	add	r3, sp, #152	; 0x98
   2baf8:	add	r3, r3, r4, lsl #2
   2bafc:	ldr	r3, [r3, #-120]	; 0xffffff88
   2bb00:	add	r6, r6, r3
   2bb04:	add	r5, r5, r3, lsl #2
   2bb08:	ldr	r3, [sp, #12]
   2bb0c:	add	r9, r9, r3
   2bb10:	ldr	r3, [sp, #20]
   2bb14:	cmp	r9, r3
   2bb18:	bge	1c04c <GetDataSlab+0x130>
   2bb1c:	ldr	r3, [sp, #196]	; 0xc4
   2bb20:	ldr	r2, [sp]
   2bb24:	ldr	r3, [r3]
   2bb28:	add	r0, r2, r9, lsl #1
   2bb2c:	cmp	r3, #0
   2bb30:	addne	r5, r5, r3, lsl #2
   2bb34:	addne	r6, r6, r3
   2bb38:	mov	ip, r5
   2bb3c:	mov	r2, #0
   2bb40:	ldr	r1, [sp, #12]
   2bb44:	cmp	r2, r1
   2bb48:	blt	2bac8 <GetDataSlab+0xfbac>
   2bb4c:	ldr	r2, [sp, #24]
   2bb50:	ldr	r8, [sp, #4]
   2bb54:	sub	r3, r2, r3
   2bb58:	ldr	r4, [sp, #16]
   2bb5c:	add	r6, r6, r3
   2bb60:	add	r5, r5, r3, lsl #2
   2bb64:	ldr	r3, [sp, #208]	; 0xd0
   2bb68:	cmp	r4, r3
   2bb6c:	bge	2bb08 <GetDataSlab+0xfbec>
   2bb70:	ldr	r3, [sl, r4, lsl #2]
   2bb74:	ldr	r2, [sp, #204]	; 0xcc
   2bb78:	add	r3, r3, #1
   2bb7c:	str	r3, [sl, r4, lsl #2]
   2bb80:	mov	r0, r3
   2bb84:	ldr	r1, [r2, r4, lsl #2]
   2bb88:	bl	3fd18 <__aeabi_idivmod>
   2bb8c:	subs	r3, r1, #0
   2bb90:	bne	2baf4 <GetDataSlab+0xfbd8>
   2bb94:	ldr	r7, [r8, #4]
   2bb98:	str	r3, [sl, r4, lsl #2]
   2bb9c:	mov	r1, r7
   2bba0:	mov	r0, r6
   2bba4:	bl	3fd18 <__aeabi_idivmod>
   2bba8:	ldr	r2, [sp, #196]	; 0xc4
   2bbac:	ldr	r2, [r2, r4, lsl #2]
   2bbb0:	subs	r3, r1, #0
   2bbb4:	beq	2bae0 <GetDataSlab+0xfbc4>
   2bbb8:	ldr	r1, [r8]
   2bbbc:	sub	r3, r7, r3
   2bbc0:	mla	r3, r2, r1, r3
   2bbc4:	add	r5, r5, r3, lsl #2
   2bbc8:	add	r6, r6, r3
   2bbcc:	add	r4, r4, #1
   2bbd0:	add	r8, r8, #4
   2bbd4:	b	2bb64 <GetDataSlab+0xfc48>
   2bbd8:	vldr	s15, [r3]
   2bbdc:	add	r2, r2, #1
   2bbe0:	add	r3, r3, fp
   2bbe4:	vcvt.s32.f32	s15, s15
   2bbe8:	vmov	r1, s15
   2bbec:	strh	r1, [ip], #2
   2bbf0:	b	2b9a4 <GetDataSlab+0xfa88>
   2bbf4:	cmp	r2, #0
   2bbf8:	beq	2ba40 <GetDataSlab+0xfb24>
   2bbfc:	ldr	r3, [r8]
   2bc00:	mul	r3, r3, r2
   2bc04:	b	2ba38 <GetDataSlab+0xfb1c>
   2bc08:	add	r3, sp, #152	; 0x98
   2bc0c:	add	r3, r3, r4, lsl #2
   2bc10:	ldr	r3, [r3, #-120]	; 0xffffff88
   2bc14:	add	r6, r6, r3
   2bc18:	add	r5, r5, r3, lsl #2
   2bc1c:	ldr	r3, [sp, #12]
   2bc20:	add	r9, r9, r3
   2bc24:	b	2b974 <GetDataSlab+0xfa58>
   2bc28:	ldr	r3, [r9]
   2bc2c:	ldr	ip, [sp, #4]
   2bc30:	str	r3, [sp, #16]
   2bc34:	sub	r3, r3, #1
   2bc38:	str	r3, [sp, #32]
   2bc3c:	ldr	r3, [fp]
   2bc40:	mov	lr, fp
   2bc44:	str	r3, [sp, #24]
   2bc48:	str	r3, [sp, #112]	; 0x70
   2bc4c:	ldr	r3, [sp, #204]	; 0xcc
   2bc50:	mov	r6, #0
   2bc54:	mov	r2, #1
   2bc58:	ldr	r3, [r3]
   2bc5c:	str	r3, [sp, #12]
   2bc60:	str	r3, [sp, #20]
   2bc64:	ldr	r3, [sp, #208]	; 0xd0
   2bc68:	cmp	r2, r3
   2bc6c:	blt	2bda0 <GetDataSlab+0xfe84>
   2bc70:	ldr	r3, [sp, #8]
   2bc74:	add	r5, r3, r6, lsl #2
   2bc78:	ldr	r3, [sp, #16]
   2bc7c:	cmp	r3, #1
   2bc80:	moveq	r9, #0
   2bc84:	beq	2be5c <GetDataSlab+0xff40>
   2bc88:	ldr	r3, [sp, #16]
   2bc8c:	ldr	r2, [sp, #12]
   2bc90:	mov	r9, #0
   2bc94:	mul	r3, r3, r2
   2bc98:	ldr	r2, [sp, #24]
   2bc9c:	sub	r3, r2, r3
   2bca0:	str	r3, [sp, #24]
   2bca4:	ldr	r3, [sp, #16]
   2bca8:	ldr	r2, [sp, #16]
   2bcac:	lsl	fp, r3, #2
   2bcb0:	ldr	r3, [sp, #12]
   2bcb4:	bic	r3, r3, r3, asr #31
   2bcb8:	mul	r2, r2, r3
   2bcbc:	mul	r3, fp, r3
   2bcc0:	str	r2, [sp, #16]
   2bcc4:	str	r3, [sp, #8]
   2bcc8:	ldr	r3, [sp, #20]
   2bccc:	cmp	r9, r3
   2bcd0:	bge	1c04c <GetDataSlab+0x130>
   2bcd4:	ldr	r3, [sp, #196]	; 0xc4
   2bcd8:	mov	r2, #0
   2bcdc:	ldr	r1, [r3]
   2bce0:	ldr	r3, [sp]
   2bce4:	cmp	r1, #0
   2bce8:	addne	r5, r5, r1, lsl #2
   2bcec:	addne	r6, r6, r1
   2bcf0:	add	ip, r3, r9, lsl #1
   2bcf4:	mov	r0, r5
   2bcf8:	ldr	r3, [sp, #12]
   2bcfc:	cmp	r2, r3
   2bd00:	blt	2bf20 <GetDataSlab+0x10004>
   2bd04:	ldr	r3, [sp, #24]
   2bd08:	ldr	r8, [sp, #4]
   2bd0c:	sub	r2, r3, r1
   2bd10:	ldr	r3, [sp, #16]
   2bd14:	mov	r4, #1
   2bd18:	add	r3, r3, r6
   2bd1c:	add	r6, r3, r2
   2bd20:	ldr	r3, [sp, #8]
   2bd24:	add	r3, r3, r2, lsl #2
   2bd28:	add	r5, r5, r3
   2bd2c:	ldr	r3, [sp, #208]	; 0xd0
   2bd30:	cmp	r4, r3
   2bd34:	bge	2bf58 <GetDataSlab+0x1003c>
   2bd38:	ldr	r3, [sl, r4, lsl #2]
   2bd3c:	ldr	r2, [sp, #204]	; 0xcc
   2bd40:	add	r3, r3, #1
   2bd44:	str	r3, [sl, r4, lsl #2]
   2bd48:	mov	r0, r3
   2bd4c:	ldr	r1, [r2, r4, lsl #2]
   2bd50:	bl	3fd18 <__aeabi_idivmod>
   2bd54:	subs	r3, r1, #0
   2bd58:	bne	2bf44 <GetDataSlab+0x10028>
   2bd5c:	ldr	r7, [r8, #4]
   2bd60:	str	r3, [sl, r4, lsl #2]
   2bd64:	mov	r1, r7
   2bd68:	mov	r0, r6
   2bd6c:	bl	3fd18 <__aeabi_idivmod>
   2bd70:	ldr	r2, [sp, #196]	; 0xc4
   2bd74:	ldr	r2, [r2, r4, lsl #2]
   2bd78:	subs	r3, r1, #0
   2bd7c:	beq	2bf30 <GetDataSlab+0x10014>
   2bd80:	ldr	r1, [r8]
   2bd84:	sub	r3, r7, r3
   2bd88:	mla	r3, r2, r1, r3
   2bd8c:	add	r5, r5, r3, lsl #2
   2bd90:	add	r6, r6, r3
   2bd94:	add	r4, r4, #1
   2bd98:	add	r8, r8, #4
   2bd9c:	b	2bd2c <GetDataSlab+0xfe10>
   2bda0:	ldr	r3, [r9, r2, lsl #2]
   2bda4:	mov	r5, ip
   2bda8:	sub	r3, r3, #1
   2bdac:	str	r3, [r4, r2, lsl #2]
   2bdb0:	ldr	r3, [lr], #4
   2bdb4:	mov	r1, lr
   2bdb8:	str	r3, [ip, #4]
   2bdbc:	cmp	r1, fp
   2bdc0:	bne	2bdf4 <GetDataSlab+0xfed8>
   2bdc4:	ldr	r3, [sp, #204]	; 0xcc
   2bdc8:	ldr	r1, [sp, #20]
   2bdcc:	add	ip, ip, #4
   2bdd0:	ldr	r3, [r3, r2, lsl #2]
   2bdd4:	mul	r3, r3, r1
   2bdd8:	ldr	r1, [sp, #196]	; 0xc4
   2bddc:	str	r3, [sp, #20]
   2bde0:	ldr	r3, [r5]
   2bde4:	ldr	r1, [r1, r2, lsl #2]
   2bde8:	add	r2, r2, #1
   2bdec:	mla	r6, r1, r3, r6
   2bdf0:	b	2bc64 <GetDataSlab+0xfd48>
   2bdf4:	ldr	r7, [r4, r2, lsl #2]
   2bdf8:	mov	r0, r1
   2bdfc:	ldr	r3, [r1, #-4]!
   2be00:	mul	r3, r3, r7
   2be04:	ldr	r7, [ip, #4]
   2be08:	str	r3, [r4, r2, lsl #2]
   2be0c:	ldr	r3, [r0]
   2be10:	mul	r3, r3, r7
   2be14:	str	r3, [ip, #4]
   2be18:	b	2bdbc <GetDataSlab+0xfea0>
   2be1c:	ldr	r0, [r5, r3, lsl #2]
   2be20:	add	r3, r3, #1
   2be24:	strh	r0, [r1], #2
   2be28:	b	2be88 <GetDataSlab+0xff6c>
   2be2c:	cmp	r2, #0
   2be30:	beq	2bf14 <GetDataSlab+0xfff8>
   2be34:	ldr	r3, [r8]
   2be38:	mul	r3, r3, r2
   2be3c:	b	2bf0c <GetDataSlab+0xfff0>
   2be40:	add	r3, sp, #152	; 0x98
   2be44:	add	r3, r3, r4, lsl #2
   2be48:	ldr	r3, [r3, #-120]	; 0xffffff88
   2be4c:	add	r6, r6, r3
   2be50:	add	r5, r5, r3, lsl #2
   2be54:	ldr	r3, [sp, #12]
   2be58:	add	r9, r9, r3
   2be5c:	ldr	r3, [sp, #20]
   2be60:	cmp	r9, r3
   2be64:	bge	1c04c <GetDataSlab+0x130>
   2be68:	ldr	r3, [sp, #196]	; 0xc4
   2be6c:	ldr	r2, [r3]
   2be70:	ldr	r3, [sp]
   2be74:	cmp	r2, #0
   2be78:	add	r1, r3, r9, lsl #1
   2be7c:	addne	r5, r5, r2, lsl #2
   2be80:	addne	r6, r6, r2
   2be84:	mov	r3, #0
   2be88:	ldr	r0, [sp, #12]
   2be8c:	cmp	r3, r0
   2be90:	blt	2be1c <GetDataSlab+0xff00>
   2be94:	ldr	r3, [sp, #24]
   2be98:	ldr	r8, [sp, #4]
   2be9c:	sub	r3, r3, r2
   2bea0:	ldr	r4, [sp, #16]
   2bea4:	add	r6, r6, r3
   2bea8:	add	r5, r5, r3, lsl #2
   2beac:	ldr	r3, [sp, #208]	; 0xd0
   2beb0:	cmp	r4, r3
   2beb4:	bge	2be54 <GetDataSlab+0xff38>
   2beb8:	ldr	r3, [sl, r4, lsl #2]
   2bebc:	ldr	r2, [sp, #204]	; 0xcc
   2bec0:	add	r3, r3, #1
   2bec4:	str	r3, [sl, r4, lsl #2]
   2bec8:	mov	r0, r3
   2becc:	ldr	r1, [r2, r4, lsl #2]
   2bed0:	bl	3fd18 <__aeabi_idivmod>
   2bed4:	subs	r3, r1, #0
   2bed8:	bne	2be40 <GetDataSlab+0xff24>
   2bedc:	ldr	r7, [r8, #4]
   2bee0:	str	r3, [sl, r4, lsl #2]
   2bee4:	mov	r1, r7
   2bee8:	mov	r0, r6
   2beec:	bl	3fd18 <__aeabi_idivmod>
   2bef0:	ldr	r2, [sp, #196]	; 0xc4
   2bef4:	ldr	r2, [r2, r4, lsl #2]
   2bef8:	subs	r3, r1, #0
   2befc:	beq	2be2c <GetDataSlab+0xff10>
   2bf00:	ldr	r1, [r8]
   2bf04:	sub	r3, r7, r3
   2bf08:	mla	r3, r2, r1, r3
   2bf0c:	add	r5, r5, r3, lsl #2
   2bf10:	add	r6, r6, r3
   2bf14:	add	r4, r4, #1
   2bf18:	add	r8, r8, #4
   2bf1c:	b	2beac <GetDataSlab+0xff90>
   2bf20:	ldr	r3, [r0], fp
   2bf24:	add	r2, r2, #1
   2bf28:	strh	r3, [ip], #2
   2bf2c:	b	2bcf8 <GetDataSlab+0xfddc>
   2bf30:	cmp	r2, #0
   2bf34:	beq	2bd94 <GetDataSlab+0xfe78>
   2bf38:	ldr	r3, [r8]
   2bf3c:	mul	r3, r3, r2
   2bf40:	b	2bd8c <GetDataSlab+0xfe70>
   2bf44:	add	r3, sp, #152	; 0x98
   2bf48:	add	r3, r3, r4, lsl #2
   2bf4c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2bf50:	add	r6, r6, r3
   2bf54:	add	r5, r5, r3, lsl #2
   2bf58:	ldr	r3, [sp, #12]
   2bf5c:	add	r9, r9, r3
   2bf60:	b	2bcc8 <GetDataSlab+0xfdac>
   2bf64:	ldr	r3, [r9]
   2bf68:	ldr	ip, [sp, #4]
   2bf6c:	str	r3, [sp, #16]
   2bf70:	sub	r3, r3, #1
   2bf74:	str	r3, [sp, #32]
   2bf78:	ldr	r3, [fp]
   2bf7c:	mov	lr, fp
   2bf80:	str	r3, [sp, #24]
   2bf84:	str	r3, [sp, #112]	; 0x70
   2bf88:	ldr	r3, [sp, #204]	; 0xcc
   2bf8c:	mov	r6, #0
   2bf90:	mov	r2, #1
   2bf94:	ldr	r3, [r3]
   2bf98:	str	r3, [sp, #12]
   2bf9c:	str	r3, [sp, #20]
   2bfa0:	ldr	r3, [sp, #208]	; 0xd0
   2bfa4:	cmp	r2, r3
   2bfa8:	blt	2c0dc <GetDataSlab+0x101c0>
   2bfac:	ldr	r3, [sp, #8]
   2bfb0:	add	r5, r3, r6, lsl #2
   2bfb4:	ldr	r3, [sp, #16]
   2bfb8:	cmp	r3, #1
   2bfbc:	moveq	r9, #0
   2bfc0:	beq	2c198 <GetDataSlab+0x1027c>
   2bfc4:	ldr	r3, [sp, #16]
   2bfc8:	ldr	r2, [sp, #12]
   2bfcc:	mov	r9, #0
   2bfd0:	mul	r3, r3, r2
   2bfd4:	ldr	r2, [sp, #24]
   2bfd8:	sub	r3, r2, r3
   2bfdc:	str	r3, [sp, #24]
   2bfe0:	ldr	r3, [sp, #16]
   2bfe4:	ldr	r2, [sp, #16]
   2bfe8:	lsl	fp, r3, #2
   2bfec:	ldr	r3, [sp, #12]
   2bff0:	bic	r3, r3, r3, asr #31
   2bff4:	mul	r2, r2, r3
   2bff8:	mul	r3, fp, r3
   2bffc:	str	r2, [sp, #8]
   2c000:	str	r3, [sp, #16]
   2c004:	ldr	r3, [sp, #20]
   2c008:	cmp	r9, r3
   2c00c:	bge	1c04c <GetDataSlab+0x130>
   2c010:	ldr	r3, [sp, #196]	; 0xc4
   2c014:	mov	r2, #0
   2c018:	ldr	r1, [r3]
   2c01c:	ldr	r3, [sp]
   2c020:	cmp	r1, #0
   2c024:	addne	r5, r5, r1, lsl #2
   2c028:	addne	r6, r6, r1
   2c02c:	add	ip, r3, r9, lsl #1
   2c030:	mov	r0, r5
   2c034:	ldr	r3, [sp, #12]
   2c038:	cmp	r2, r3
   2c03c:	blt	2c25c <GetDataSlab+0x10340>
   2c040:	ldr	r3, [sp, #24]
   2c044:	ldr	r8, [sp, #4]
   2c048:	sub	r2, r3, r1
   2c04c:	ldr	r3, [sp, #8]
   2c050:	mov	r4, #1
   2c054:	add	r3, r3, r6
   2c058:	add	r6, r3, r2
   2c05c:	ldr	r3, [sp, #16]
   2c060:	add	r3, r3, r2, lsl #2
   2c064:	add	r5, r5, r3
   2c068:	ldr	r3, [sp, #208]	; 0xd0
   2c06c:	cmp	r4, r3
   2c070:	bge	2c294 <GetDataSlab+0x10378>
   2c074:	ldr	r3, [sl, r4, lsl #2]
   2c078:	ldr	r2, [sp, #204]	; 0xcc
   2c07c:	add	r3, r3, #1
   2c080:	str	r3, [sl, r4, lsl #2]
   2c084:	mov	r0, r3
   2c088:	ldr	r1, [r2, r4, lsl #2]
   2c08c:	bl	3fd18 <__aeabi_idivmod>
   2c090:	subs	r3, r1, #0
   2c094:	bne	2c280 <GetDataSlab+0x10364>
   2c098:	ldr	r7, [r8, #4]
   2c09c:	str	r3, [sl, r4, lsl #2]
   2c0a0:	mov	r1, r7
   2c0a4:	mov	r0, r6
   2c0a8:	bl	3fd18 <__aeabi_idivmod>
   2c0ac:	ldr	r2, [sp, #196]	; 0xc4
   2c0b0:	ldr	r2, [r2, r4, lsl #2]
   2c0b4:	subs	r3, r1, #0
   2c0b8:	beq	2c26c <GetDataSlab+0x10350>
   2c0bc:	ldr	r1, [r8]
   2c0c0:	sub	r3, r7, r3
   2c0c4:	mla	r3, r2, r1, r3
   2c0c8:	add	r5, r5, r3, lsl #2
   2c0cc:	add	r6, r6, r3
   2c0d0:	add	r4, r4, #1
   2c0d4:	add	r8, r8, #4
   2c0d8:	b	2c068 <GetDataSlab+0x1014c>
   2c0dc:	ldr	r3, [r9, r2, lsl #2]
   2c0e0:	mov	r5, ip
   2c0e4:	sub	r3, r3, #1
   2c0e8:	str	r3, [r4, r2, lsl #2]
   2c0ec:	ldr	r3, [lr], #4
   2c0f0:	mov	r1, lr
   2c0f4:	str	r3, [ip, #4]
   2c0f8:	cmp	r1, fp
   2c0fc:	bne	2c130 <GetDataSlab+0x10214>
   2c100:	ldr	r3, [sp, #204]	; 0xcc
   2c104:	ldr	r1, [sp, #20]
   2c108:	add	ip, ip, #4
   2c10c:	ldr	r3, [r3, r2, lsl #2]
   2c110:	mul	r3, r3, r1
   2c114:	ldr	r1, [sp, #196]	; 0xc4
   2c118:	str	r3, [sp, #20]
   2c11c:	ldr	r3, [r5]
   2c120:	ldr	r1, [r1, r2, lsl #2]
   2c124:	add	r2, r2, #1
   2c128:	mla	r6, r1, r3, r6
   2c12c:	b	2bfa0 <GetDataSlab+0x10084>
   2c130:	ldr	r7, [r4, r2, lsl #2]
   2c134:	mov	r0, r1
   2c138:	ldr	r3, [r1, #-4]!
   2c13c:	mul	r3, r3, r7
   2c140:	ldr	r7, [ip, #4]
   2c144:	str	r3, [r4, r2, lsl #2]
   2c148:	ldr	r3, [r0]
   2c14c:	mul	r3, r3, r7
   2c150:	str	r3, [ip, #4]
   2c154:	b	2c0f8 <GetDataSlab+0x101dc>
   2c158:	ldr	r0, [r5, r3, lsl #2]
   2c15c:	add	r3, r3, #1
   2c160:	strh	r0, [r1], #2
   2c164:	b	2c1c4 <GetDataSlab+0x102a8>
   2c168:	cmp	r2, #0
   2c16c:	beq	2c250 <GetDataSlab+0x10334>
   2c170:	ldr	r3, [r8]
   2c174:	mul	r3, r3, r2
   2c178:	b	2c248 <GetDataSlab+0x1032c>
   2c17c:	add	r3, sp, #152	; 0x98
   2c180:	add	r3, r3, r4, lsl #2
   2c184:	ldr	r3, [r3, #-120]	; 0xffffff88
   2c188:	add	r6, r6, r3
   2c18c:	add	r5, r5, r3, lsl #2
   2c190:	ldr	r3, [sp, #12]
   2c194:	add	r9, r9, r3
   2c198:	ldr	r3, [sp, #20]
   2c19c:	cmp	r9, r3
   2c1a0:	bge	1c04c <GetDataSlab+0x130>
   2c1a4:	ldr	r3, [sp, #196]	; 0xc4
   2c1a8:	ldr	r2, [r3]
   2c1ac:	ldr	r3, [sp]
   2c1b0:	cmp	r2, #0
   2c1b4:	add	r1, r3, r9, lsl #1
   2c1b8:	addne	r5, r5, r2, lsl #2
   2c1bc:	addne	r6, r6, r2
   2c1c0:	mov	r3, #0
   2c1c4:	ldr	r0, [sp, #12]
   2c1c8:	cmp	r3, r0
   2c1cc:	blt	2c158 <GetDataSlab+0x1023c>
   2c1d0:	ldr	r3, [sp, #24]
   2c1d4:	ldr	r8, [sp, #4]
   2c1d8:	sub	r3, r3, r2
   2c1dc:	ldr	r4, [sp, #16]
   2c1e0:	add	r6, r6, r3
   2c1e4:	add	r5, r5, r3, lsl #2
   2c1e8:	ldr	r3, [sp, #208]	; 0xd0
   2c1ec:	cmp	r4, r3
   2c1f0:	bge	2c190 <GetDataSlab+0x10274>
   2c1f4:	ldr	r3, [sl, r4, lsl #2]
   2c1f8:	ldr	r2, [sp, #204]	; 0xcc
   2c1fc:	add	r3, r3, #1
   2c200:	str	r3, [sl, r4, lsl #2]
   2c204:	mov	r0, r3
   2c208:	ldr	r1, [r2, r4, lsl #2]
   2c20c:	bl	3fd18 <__aeabi_idivmod>
   2c210:	subs	r3, r1, #0
   2c214:	bne	2c17c <GetDataSlab+0x10260>
   2c218:	ldr	r7, [r8, #4]
   2c21c:	str	r3, [sl, r4, lsl #2]
   2c220:	mov	r1, r7
   2c224:	mov	r0, r6
   2c228:	bl	3fd18 <__aeabi_idivmod>
   2c22c:	ldr	r2, [sp, #196]	; 0xc4
   2c230:	ldr	r2, [r2, r4, lsl #2]
   2c234:	subs	r3, r1, #0
   2c238:	beq	2c168 <GetDataSlab+0x1024c>
   2c23c:	ldr	r1, [r8]
   2c240:	sub	r3, r7, r3
   2c244:	mla	r3, r2, r1, r3
   2c248:	add	r5, r5, r3, lsl #2
   2c24c:	add	r6, r6, r3
   2c250:	add	r4, r4, #1
   2c254:	add	r8, r8, #4
   2c258:	b	2c1e8 <GetDataSlab+0x102cc>
   2c25c:	ldr	r3, [r0], fp
   2c260:	add	r2, r2, #1
   2c264:	strh	r3, [ip], #2
   2c268:	b	2c034 <GetDataSlab+0x10118>
   2c26c:	cmp	r2, #0
   2c270:	beq	2c0d0 <GetDataSlab+0x101b4>
   2c274:	ldr	r3, [r8]
   2c278:	mul	r3, r3, r2
   2c27c:	b	2c0c8 <GetDataSlab+0x101ac>
   2c280:	add	r3, sp, #152	; 0x98
   2c284:	add	r3, r3, r4, lsl #2
   2c288:	ldr	r3, [r3, #-120]	; 0xffffff88
   2c28c:	add	r6, r6, r3
   2c290:	add	r5, r5, r3, lsl #2
   2c294:	ldr	r3, [sp, #12]
   2c298:	add	r9, r9, r3
   2c29c:	b	2c004 <GetDataSlab+0x100e8>
   2c2a0:	ldr	r3, [r9]
   2c2a4:	ldr	ip, [sp, #4]
   2c2a8:	str	r3, [sp, #16]
   2c2ac:	sub	r3, r3, #1
   2c2b0:	str	r3, [sp, #32]
   2c2b4:	ldr	r3, [fp]
   2c2b8:	mov	lr, fp
   2c2bc:	str	r3, [sp, #24]
   2c2c0:	str	r3, [sp, #112]	; 0x70
   2c2c4:	ldr	r3, [sp, #204]	; 0xcc
   2c2c8:	mov	r6, #0
   2c2cc:	mov	r2, #1
   2c2d0:	ldr	r3, [r3]
   2c2d4:	str	r3, [sp, #12]
   2c2d8:	str	r3, [sp, #20]
   2c2dc:	ldr	r3, [sp, #208]	; 0xd0
   2c2e0:	cmp	r2, r3
   2c2e4:	blt	2c418 <GetDataSlab+0x104fc>
   2c2e8:	ldr	r3, [sp, #8]
   2c2ec:	add	r5, r3, r6, lsl #1
   2c2f0:	ldr	r3, [sp, #16]
   2c2f4:	cmp	r3, #1
   2c2f8:	moveq	r9, #0
   2c2fc:	beq	2c4d4 <GetDataSlab+0x105b8>
   2c300:	ldr	r3, [sp, #16]
   2c304:	ldr	r2, [sp, #12]
   2c308:	mov	r9, #0
   2c30c:	mul	r3, r3, r2
   2c310:	ldr	r2, [sp, #24]
   2c314:	sub	r3, r2, r3
   2c318:	str	r3, [sp, #24]
   2c31c:	ldr	r3, [sp, #16]
   2c320:	ldr	r2, [sp, #16]
   2c324:	lsl	fp, r3, #1
   2c328:	ldr	r3, [sp, #12]
   2c32c:	bic	r3, r3, r3, asr #31
   2c330:	mul	r2, r2, r3
   2c334:	mul	r3, fp, r3
   2c338:	str	r2, [sp, #8]
   2c33c:	str	r3, [sp, #16]
   2c340:	ldr	r3, [sp, #20]
   2c344:	cmp	r9, r3
   2c348:	bge	1c04c <GetDataSlab+0x130>
   2c34c:	ldr	r3, [sp, #196]	; 0xc4
   2c350:	mov	r2, #0
   2c354:	ldr	r1, [r3]
   2c358:	ldr	r3, [sp]
   2c35c:	cmp	r1, #0
   2c360:	addne	r5, r5, r1, lsl #1
   2c364:	addne	r6, r6, r1
   2c368:	add	ip, r3, r9, lsl #1
   2c36c:	mov	r0, r5
   2c370:	ldr	r3, [sp, #12]
   2c374:	cmp	r2, r3
   2c378:	blt	2c59c <GetDataSlab+0x10680>
   2c37c:	ldr	r3, [sp, #24]
   2c380:	ldr	r8, [sp, #4]
   2c384:	sub	r2, r3, r1
   2c388:	ldr	r3, [sp, #8]
   2c38c:	mov	r4, #1
   2c390:	add	r3, r3, r6
   2c394:	add	r6, r3, r2
   2c398:	ldr	r3, [sp, #16]
   2c39c:	add	r3, r3, r2, lsl #1
   2c3a0:	add	r5, r5, r3
   2c3a4:	ldr	r3, [sp, #208]	; 0xd0
   2c3a8:	cmp	r4, r3
   2c3ac:	bge	2c5d4 <GetDataSlab+0x106b8>
   2c3b0:	ldr	r3, [sl, r4, lsl #2]
   2c3b4:	ldr	r2, [sp, #204]	; 0xcc
   2c3b8:	add	r3, r3, #1
   2c3bc:	str	r3, [sl, r4, lsl #2]
   2c3c0:	mov	r0, r3
   2c3c4:	ldr	r1, [r2, r4, lsl #2]
   2c3c8:	bl	3fd18 <__aeabi_idivmod>
   2c3cc:	subs	r3, r1, #0
   2c3d0:	bne	2c5c0 <GetDataSlab+0x106a4>
   2c3d4:	ldr	r7, [r8, #4]
   2c3d8:	str	r3, [sl, r4, lsl #2]
   2c3dc:	mov	r1, r7
   2c3e0:	mov	r0, r6
   2c3e4:	bl	3fd18 <__aeabi_idivmod>
   2c3e8:	ldr	r2, [sp, #196]	; 0xc4
   2c3ec:	ldr	r2, [r2, r4, lsl #2]
   2c3f0:	subs	r3, r1, #0
   2c3f4:	beq	2c5ac <GetDataSlab+0x10690>
   2c3f8:	ldr	r1, [r8]
   2c3fc:	sub	r3, r7, r3
   2c400:	mla	r3, r2, r1, r3
   2c404:	add	r5, r5, r3, lsl #1
   2c408:	add	r6, r6, r3
   2c40c:	add	r4, r4, #1
   2c410:	add	r8, r8, #4
   2c414:	b	2c3a4 <GetDataSlab+0x10488>
   2c418:	ldr	r3, [r9, r2, lsl #2]
   2c41c:	mov	r5, ip
   2c420:	sub	r3, r3, #1
   2c424:	str	r3, [r4, r2, lsl #2]
   2c428:	ldr	r3, [lr], #4
   2c42c:	mov	r1, lr
   2c430:	str	r3, [ip, #4]
   2c434:	cmp	r1, fp
   2c438:	bne	2c46c <GetDataSlab+0x10550>
   2c43c:	ldr	r3, [sp, #204]	; 0xcc
   2c440:	ldr	r1, [sp, #20]
   2c444:	add	ip, ip, #4
   2c448:	ldr	r3, [r3, r2, lsl #2]
   2c44c:	mul	r3, r3, r1
   2c450:	ldr	r1, [sp, #196]	; 0xc4
   2c454:	str	r3, [sp, #20]
   2c458:	ldr	r3, [r5]
   2c45c:	ldr	r1, [r1, r2, lsl #2]
   2c460:	add	r2, r2, #1
   2c464:	mla	r6, r1, r3, r6
   2c468:	b	2c2dc <GetDataSlab+0x103c0>
   2c46c:	ldr	r7, [r4, r2, lsl #2]
   2c470:	mov	r0, r1
   2c474:	ldr	r3, [r1, #-4]!
   2c478:	mul	r3, r3, r7
   2c47c:	ldr	r7, [ip, #4]
   2c480:	str	r3, [r4, r2, lsl #2]
   2c484:	ldr	r3, [r0]
   2c488:	mul	r3, r3, r7
   2c48c:	str	r3, [ip, #4]
   2c490:	b	2c434 <GetDataSlab+0x10518>
   2c494:	ldrsh	r3, [ip, #2]!
   2c498:	add	r1, r1, #1
   2c49c:	strh	r3, [r0], #2
   2c4a0:	b	2c504 <GetDataSlab+0x105e8>
   2c4a4:	cmp	r2, #0
   2c4a8:	beq	2c590 <GetDataSlab+0x10674>
   2c4ac:	ldr	r3, [r8]
   2c4b0:	mul	r3, r3, r2
   2c4b4:	b	2c588 <GetDataSlab+0x1066c>
   2c4b8:	add	r3, sp, #152	; 0x98
   2c4bc:	add	r3, r3, r4, lsl #2
   2c4c0:	ldr	r3, [r3, #-120]	; 0xffffff88
   2c4c4:	add	r6, r6, r3
   2c4c8:	add	r5, r5, r3, lsl #1
   2c4cc:	ldr	r3, [sp, #12]
   2c4d0:	add	r9, r9, r3
   2c4d4:	ldr	r3, [sp, #20]
   2c4d8:	cmp	r9, r3
   2c4dc:	bge	1c04c <GetDataSlab+0x130>
   2c4e0:	ldr	r3, [sp, #196]	; 0xc4
   2c4e4:	mov	r1, #0
   2c4e8:	ldr	r2, [r3]
   2c4ec:	ldr	r3, [sp]
   2c4f0:	cmp	r2, #0
   2c4f4:	addne	r5, r5, r2, lsl #1
   2c4f8:	addne	r6, r6, r2
   2c4fc:	sub	ip, r5, #2
   2c500:	add	r0, r3, r9, lsl #1
   2c504:	ldr	r3, [sp, #12]
   2c508:	cmp	r1, r3
   2c50c:	blt	2c494 <GetDataSlab+0x10578>
   2c510:	ldr	r3, [sp, #24]
   2c514:	ldr	r8, [sp, #4]
   2c518:	sub	r3, r3, r2
   2c51c:	ldr	r4, [sp, #16]
   2c520:	add	r6, r6, r3
   2c524:	add	r5, r5, r3, lsl #1
   2c528:	ldr	r3, [sp, #208]	; 0xd0
   2c52c:	cmp	r4, r3
   2c530:	bge	2c4cc <GetDataSlab+0x105b0>
   2c534:	ldr	r3, [sl, r4, lsl #2]
   2c538:	ldr	r2, [sp, #204]	; 0xcc
   2c53c:	add	r3, r3, #1
   2c540:	str	r3, [sl, r4, lsl #2]
   2c544:	mov	r0, r3
   2c548:	ldr	r1, [r2, r4, lsl #2]
   2c54c:	bl	3fd18 <__aeabi_idivmod>
   2c550:	subs	r3, r1, #0
   2c554:	bne	2c4b8 <GetDataSlab+0x1059c>
   2c558:	ldr	r7, [r8, #4]
   2c55c:	str	r3, [sl, r4, lsl #2]
   2c560:	mov	r1, r7
   2c564:	mov	r0, r6
   2c568:	bl	3fd18 <__aeabi_idivmod>
   2c56c:	ldr	r2, [sp, #196]	; 0xc4
   2c570:	ldr	r2, [r2, r4, lsl #2]
   2c574:	subs	r3, r1, #0
   2c578:	beq	2c4a4 <GetDataSlab+0x10588>
   2c57c:	ldr	r1, [r8]
   2c580:	sub	r3, r7, r3
   2c584:	mla	r3, r2, r1, r3
   2c588:	add	r5, r5, r3, lsl #1
   2c58c:	add	r6, r6, r3
   2c590:	add	r4, r4, #1
   2c594:	add	r8, r8, #4
   2c598:	b	2c528 <GetDataSlab+0x1060c>
   2c59c:	ldrsh	r3, [r0], fp
   2c5a0:	add	r2, r2, #1
   2c5a4:	strh	r3, [ip], #2
   2c5a8:	b	2c370 <GetDataSlab+0x10454>
   2c5ac:	cmp	r2, #0
   2c5b0:	beq	2c40c <GetDataSlab+0x104f0>
   2c5b4:	ldr	r3, [r8]
   2c5b8:	mul	r3, r3, r2
   2c5bc:	b	2c404 <GetDataSlab+0x104e8>
   2c5c0:	add	r3, sp, #152	; 0x98
   2c5c4:	add	r3, r3, r4, lsl #2
   2c5c8:	ldr	r3, [r3, #-120]	; 0xffffff88
   2c5cc:	add	r6, r6, r3
   2c5d0:	add	r5, r5, r3, lsl #1
   2c5d4:	ldr	r3, [sp, #12]
   2c5d8:	add	r9, r9, r3
   2c5dc:	b	2c340 <GetDataSlab+0x10424>
   2c5e0:	ldr	r3, [r9]
   2c5e4:	ldr	ip, [sp, #4]
   2c5e8:	str	r3, [sp, #16]
   2c5ec:	sub	r3, r3, #1
   2c5f0:	str	r3, [sp, #32]
   2c5f4:	ldr	r3, [fp]
   2c5f8:	mov	lr, fp
   2c5fc:	str	r3, [sp, #24]
   2c600:	str	r3, [sp, #112]	; 0x70
   2c604:	ldr	r3, [sp, #204]	; 0xcc
   2c608:	mov	r6, #0
   2c60c:	mov	r2, #1
   2c610:	ldr	r3, [r3]
   2c614:	str	r3, [sp, #12]
   2c618:	str	r3, [sp, #20]
   2c61c:	ldr	r3, [sp, #208]	; 0xd0
   2c620:	cmp	r2, r3
   2c624:	blt	2c758 <GetDataSlab+0x1083c>
   2c628:	ldr	r3, [sp, #8]
   2c62c:	add	r5, r3, r6, lsl #1
   2c630:	ldr	r3, [sp, #16]
   2c634:	cmp	r3, #1
   2c638:	moveq	r9, #0
   2c63c:	beq	2c814 <GetDataSlab+0x108f8>
   2c640:	ldr	r3, [sp, #16]
   2c644:	ldr	r2, [sp, #12]
   2c648:	mov	r9, #0
   2c64c:	mul	r3, r3, r2
   2c650:	ldr	r2, [sp, #24]
   2c654:	sub	r3, r2, r3
   2c658:	str	r3, [sp, #24]
   2c65c:	ldr	r3, [sp, #16]
   2c660:	ldr	r2, [sp, #16]
   2c664:	lsl	fp, r3, #1
   2c668:	ldr	r3, [sp, #12]
   2c66c:	bic	r3, r3, r3, asr #31
   2c670:	mul	r2, r2, r3
   2c674:	mul	r3, fp, r3
   2c678:	str	r2, [sp, #16]
   2c67c:	str	r3, [sp, #8]
   2c680:	ldr	r3, [sp, #20]
   2c684:	cmp	r9, r3
   2c688:	bge	1c04c <GetDataSlab+0x130>
   2c68c:	ldr	r3, [sp, #196]	; 0xc4
   2c690:	mov	r2, #0
   2c694:	ldr	r1, [r3]
   2c698:	ldr	r3, [sp]
   2c69c:	cmp	r1, #0
   2c6a0:	addne	r5, r5, r1, lsl #1
   2c6a4:	addne	r6, r6, r1
   2c6a8:	add	ip, r3, r9, lsl #1
   2c6ac:	mov	r0, r5
   2c6b0:	ldr	r3, [sp, #12]
   2c6b4:	cmp	r2, r3
   2c6b8:	blt	2c8dc <GetDataSlab+0x109c0>
   2c6bc:	ldr	r3, [sp, #24]
   2c6c0:	ldr	r8, [sp, #4]
   2c6c4:	sub	r2, r3, r1
   2c6c8:	ldr	r3, [sp, #16]
   2c6cc:	mov	r4, #1
   2c6d0:	add	r3, r3, r6
   2c6d4:	add	r6, r3, r2
   2c6d8:	ldr	r3, [sp, #8]
   2c6dc:	add	r3, r3, r2, lsl #1
   2c6e0:	add	r5, r5, r3
   2c6e4:	ldr	r3, [sp, #208]	; 0xd0
   2c6e8:	cmp	r4, r3
   2c6ec:	bge	2c914 <GetDataSlab+0x109f8>
   2c6f0:	ldr	r3, [sl, r4, lsl #2]
   2c6f4:	ldr	r2, [sp, #204]	; 0xcc
   2c6f8:	add	r3, r3, #1
   2c6fc:	str	r3, [sl, r4, lsl #2]
   2c700:	mov	r0, r3
   2c704:	ldr	r1, [r2, r4, lsl #2]
   2c708:	bl	3fd18 <__aeabi_idivmod>
   2c70c:	subs	r3, r1, #0
   2c710:	bne	2c900 <GetDataSlab+0x109e4>
   2c714:	ldr	r7, [r8, #4]
   2c718:	str	r3, [sl, r4, lsl #2]
   2c71c:	mov	r1, r7
   2c720:	mov	r0, r6
   2c724:	bl	3fd18 <__aeabi_idivmod>
   2c728:	ldr	r2, [sp, #196]	; 0xc4
   2c72c:	ldr	r2, [r2, r4, lsl #2]
   2c730:	subs	r3, r1, #0
   2c734:	beq	2c8ec <GetDataSlab+0x109d0>
   2c738:	ldr	r1, [r8]
   2c73c:	sub	r3, r7, r3
   2c740:	mla	r3, r2, r1, r3
   2c744:	add	r5, r5, r3, lsl #1
   2c748:	add	r6, r6, r3
   2c74c:	add	r4, r4, #1
   2c750:	add	r8, r8, #4
   2c754:	b	2c6e4 <GetDataSlab+0x107c8>
   2c758:	ldr	r3, [r9, r2, lsl #2]
   2c75c:	mov	r5, ip
   2c760:	sub	r3, r3, #1
   2c764:	str	r3, [r4, r2, lsl #2]
   2c768:	ldr	r3, [lr], #4
   2c76c:	mov	r1, lr
   2c770:	str	r3, [ip, #4]
   2c774:	cmp	r1, fp
   2c778:	bne	2c7ac <GetDataSlab+0x10890>
   2c77c:	ldr	r3, [sp, #204]	; 0xcc
   2c780:	ldr	r1, [sp, #20]
   2c784:	add	ip, ip, #4
   2c788:	ldr	r3, [r3, r2, lsl #2]
   2c78c:	mul	r3, r3, r1
   2c790:	ldr	r1, [sp, #196]	; 0xc4
   2c794:	str	r3, [sp, #20]
   2c798:	ldr	r3, [r5]
   2c79c:	ldr	r1, [r1, r2, lsl #2]
   2c7a0:	add	r2, r2, #1
   2c7a4:	mla	r6, r1, r3, r6
   2c7a8:	b	2c61c <GetDataSlab+0x10700>
   2c7ac:	ldr	r7, [r4, r2, lsl #2]
   2c7b0:	mov	r0, r1
   2c7b4:	ldr	r3, [r1, #-4]!
   2c7b8:	mul	r3, r3, r7
   2c7bc:	ldr	r7, [ip, #4]
   2c7c0:	str	r3, [r4, r2, lsl #2]
   2c7c4:	ldr	r3, [r0]
   2c7c8:	mul	r3, r3, r7
   2c7cc:	str	r3, [ip, #4]
   2c7d0:	b	2c774 <GetDataSlab+0x10858>
   2c7d4:	ldrh	r3, [ip, #2]!
   2c7d8:	add	r1, r1, #1
   2c7dc:	strh	r3, [r0], #2
   2c7e0:	b	2c844 <GetDataSlab+0x10928>
   2c7e4:	cmp	r2, #0
   2c7e8:	beq	2c8d0 <GetDataSlab+0x109b4>
   2c7ec:	ldr	r3, [r8]
   2c7f0:	mul	r3, r3, r2
   2c7f4:	b	2c8c8 <GetDataSlab+0x109ac>
   2c7f8:	add	r3, sp, #152	; 0x98
   2c7fc:	add	r3, r3, r4, lsl #2
   2c800:	ldr	r3, [r3, #-120]	; 0xffffff88
   2c804:	add	r6, r6, r3
   2c808:	add	r5, r5, r3, lsl #1
   2c80c:	ldr	r3, [sp, #12]
   2c810:	add	r9, r9, r3
   2c814:	ldr	r3, [sp, #20]
   2c818:	cmp	r9, r3
   2c81c:	bge	1c04c <GetDataSlab+0x130>
   2c820:	ldr	r3, [sp, #196]	; 0xc4
   2c824:	mov	r1, #0
   2c828:	ldr	r2, [r3]
   2c82c:	ldr	r3, [sp]
   2c830:	cmp	r2, #0
   2c834:	addne	r5, r5, r2, lsl #1
   2c838:	addne	r6, r6, r2
   2c83c:	sub	ip, r5, #2
   2c840:	add	r0, r3, r9, lsl #1
   2c844:	ldr	r3, [sp, #12]
   2c848:	cmp	r1, r3
   2c84c:	blt	2c7d4 <GetDataSlab+0x108b8>
   2c850:	ldr	r3, [sp, #24]
   2c854:	ldr	r8, [sp, #4]
   2c858:	sub	r3, r3, r2
   2c85c:	ldr	r4, [sp, #16]
   2c860:	add	r6, r6, r3
   2c864:	add	r5, r5, r3, lsl #1
   2c868:	ldr	r3, [sp, #208]	; 0xd0
   2c86c:	cmp	r4, r3
   2c870:	bge	2c80c <GetDataSlab+0x108f0>
   2c874:	ldr	r3, [sl, r4, lsl #2]
   2c878:	ldr	r2, [sp, #204]	; 0xcc
   2c87c:	add	r3, r3, #1
   2c880:	str	r3, [sl, r4, lsl #2]
   2c884:	mov	r0, r3
   2c888:	ldr	r1, [r2, r4, lsl #2]
   2c88c:	bl	3fd18 <__aeabi_idivmod>
   2c890:	subs	r3, r1, #0
   2c894:	bne	2c7f8 <GetDataSlab+0x108dc>
   2c898:	ldr	r7, [r8, #4]
   2c89c:	str	r3, [sl, r4, lsl #2]
   2c8a0:	mov	r1, r7
   2c8a4:	mov	r0, r6
   2c8a8:	bl	3fd18 <__aeabi_idivmod>
   2c8ac:	ldr	r2, [sp, #196]	; 0xc4
   2c8b0:	ldr	r2, [r2, r4, lsl #2]
   2c8b4:	subs	r3, r1, #0
   2c8b8:	beq	2c7e4 <GetDataSlab+0x108c8>
   2c8bc:	ldr	r1, [r8]
   2c8c0:	sub	r3, r7, r3
   2c8c4:	mla	r3, r2, r1, r3
   2c8c8:	add	r5, r5, r3, lsl #1
   2c8cc:	add	r6, r6, r3
   2c8d0:	add	r4, r4, #1
   2c8d4:	add	r8, r8, #4
   2c8d8:	b	2c868 <GetDataSlab+0x1094c>
   2c8dc:	ldrh	r3, [r0], fp
   2c8e0:	add	r2, r2, #1
   2c8e4:	strh	r3, [ip], #2
   2c8e8:	b	2c6b0 <GetDataSlab+0x10794>
   2c8ec:	cmp	r2, #0
   2c8f0:	beq	2c74c <GetDataSlab+0x10830>
   2c8f4:	ldr	r3, [r8]
   2c8f8:	mul	r3, r3, r2
   2c8fc:	b	2c744 <GetDataSlab+0x10828>
   2c900:	add	r3, sp, #152	; 0x98
   2c904:	add	r3, r3, r4, lsl #2
   2c908:	ldr	r3, [r3, #-120]	; 0xffffff88
   2c90c:	add	r6, r6, r3
   2c910:	add	r5, r5, r3, lsl #1
   2c914:	ldr	r3, [sp, #12]
   2c918:	add	r9, r9, r3
   2c91c:	b	2c680 <GetDataSlab+0x10764>
   2c920:	ldr	r3, [r9]
   2c924:	ldr	ip, [sp, #4]
   2c928:	str	r3, [sp, #12]
   2c92c:	sub	r3, r3, #1
   2c930:	str	r3, [sp, #32]
   2c934:	ldr	r3, [fp]
   2c938:	mov	lr, fp
   2c93c:	str	r3, [sp, #24]
   2c940:	str	r3, [sp, #112]	; 0x70
   2c944:	ldr	r3, [sp, #204]	; 0xcc
   2c948:	mov	r6, #0
   2c94c:	mov	r2, #1
   2c950:	ldr	r3, [r3]
   2c954:	str	r3, [sp, #16]
   2c958:	str	r3, [sp, #20]
   2c95c:	ldr	r3, [sp, #208]	; 0xd0
   2c960:	cmp	r2, r3
   2c964:	blt	2ca8c <GetDataSlab+0x10b70>
   2c968:	ldr	r3, [sp, #8]
   2c96c:	add	r5, r3, r6
   2c970:	ldr	r3, [sp, #12]
   2c974:	cmp	r3, #1
   2c978:	moveq	r9, #0
   2c97c:	beq	2cb44 <GetDataSlab+0x10c28>
   2c980:	ldr	r2, [sp, #16]
   2c984:	ldr	r3, [sp, #12]
   2c988:	mov	r9, #0
   2c98c:	mul	r3, r3, r2
   2c990:	ldr	r2, [sp, #24]
   2c994:	sub	r3, r2, r3
   2c998:	str	r3, [sp, #8]
   2c99c:	ldr	r3, [sp, #16]
   2c9a0:	ldr	r2, [sp, #12]
   2c9a4:	bic	r3, r3, r3, asr #31
   2c9a8:	mul	fp, r2, r3
   2c9ac:	rsb	r3, r2, #0
   2c9b0:	str	r3, [sp, #24]
   2c9b4:	ldr	r3, [sp, #20]
   2c9b8:	cmp	r9, r3
   2c9bc:	bge	1c04c <GetDataSlab+0x130>
   2c9c0:	ldr	r3, [sp, #196]	; 0xc4
   2c9c4:	mov	r2, #0
   2c9c8:	ldr	r0, [r3]
   2c9cc:	ldr	r3, [sp]
   2c9d0:	cmp	r0, #0
   2c9d4:	addne	r5, r5, r0
   2c9d8:	addne	r6, r6, r0
   2c9dc:	mov	r1, r5
   2c9e0:	add	ip, r3, r9, lsl #1
   2c9e4:	ldr	r3, [sp, #12]
   2c9e8:	add	r1, r1, r3
   2c9ec:	ldr	r3, [sp, #16]
   2c9f0:	cmp	r2, r3
   2c9f4:	blt	2cc0c <GetDataSlab+0x10cf0>
   2c9f8:	ldr	r3, [sp, #8]
   2c9fc:	ldr	r8, [sp, #4]
   2ca00:	sub	r2, r3, r0
   2ca04:	add	r3, fp, r6
   2ca08:	add	r6, r3, r2
   2ca0c:	add	r3, fp, r2
   2ca10:	add	r5, r5, r3
   2ca14:	mov	r4, #1
   2ca18:	ldr	r3, [sp, #208]	; 0xd0
   2ca1c:	cmp	r4, r3
   2ca20:	bge	2cc48 <GetDataSlab+0x10d2c>
   2ca24:	ldr	r3, [sl, r4, lsl #2]
   2ca28:	ldr	r2, [sp, #204]	; 0xcc
   2ca2c:	add	r3, r3, #1
   2ca30:	str	r3, [sl, r4, lsl #2]
   2ca34:	mov	r0, r3
   2ca38:	ldr	r1, [r2, r4, lsl #2]
   2ca3c:	bl	3fd18 <__aeabi_idivmod>
   2ca40:	subs	r3, r1, #0
   2ca44:	bne	2cc34 <GetDataSlab+0x10d18>
   2ca48:	ldr	r7, [r8, #4]
   2ca4c:	str	r3, [sl, r4, lsl #2]
   2ca50:	mov	r1, r7
   2ca54:	mov	r0, r6
   2ca58:	bl	3fd18 <__aeabi_idivmod>
   2ca5c:	ldr	r2, [sp, #196]	; 0xc4
   2ca60:	ldr	r2, [r2, r4, lsl #2]
   2ca64:	subs	r3, r1, #0
   2ca68:	beq	2cc20 <GetDataSlab+0x10d04>
   2ca6c:	ldr	r1, [r8]
   2ca70:	sub	r3, r7, r3
   2ca74:	mla	r3, r2, r1, r3
   2ca78:	add	r5, r5, r3
   2ca7c:	add	r6, r6, r3
   2ca80:	add	r4, r4, #1
   2ca84:	add	r8, r8, #4
   2ca88:	b	2ca18 <GetDataSlab+0x10afc>
   2ca8c:	ldr	r3, [r9, r2, lsl #2]
   2ca90:	mov	r5, ip
   2ca94:	sub	r3, r3, #1
   2ca98:	str	r3, [r4, r2, lsl #2]
   2ca9c:	ldr	r3, [lr], #4
   2caa0:	mov	r1, lr
   2caa4:	str	r3, [ip, #4]
   2caa8:	cmp	r1, fp
   2caac:	bne	2cae0 <GetDataSlab+0x10bc4>
   2cab0:	ldr	r3, [sp, #204]	; 0xcc
   2cab4:	ldr	r1, [sp, #20]
   2cab8:	add	ip, ip, #4
   2cabc:	ldr	r3, [r3, r2, lsl #2]
   2cac0:	mul	r3, r3, r1
   2cac4:	ldr	r1, [sp, #196]	; 0xc4
   2cac8:	str	r3, [sp, #20]
   2cacc:	ldr	r3, [r5]
   2cad0:	ldr	r1, [r1, r2, lsl #2]
   2cad4:	add	r2, r2, #1
   2cad8:	mla	r6, r1, r3, r6
   2cadc:	b	2c95c <GetDataSlab+0x10a40>
   2cae0:	ldr	r7, [r4, r2, lsl #2]
   2cae4:	mov	r0, r1
   2cae8:	ldr	r3, [r1, #-4]!
   2caec:	mul	r3, r3, r7
   2caf0:	ldr	r7, [ip, #4]
   2caf4:	str	r3, [r4, r2, lsl #2]
   2caf8:	ldr	r3, [r0]
   2cafc:	mul	r3, r3, r7
   2cb00:	str	r3, [ip, #4]
   2cb04:	b	2caa8 <GetDataSlab+0x10b8c>
   2cb08:	ldrsb	r3, [r1], #1
   2cb0c:	strh	r3, [r0], #2
   2cb10:	b	2cb70 <GetDataSlab+0x10c54>
   2cb14:	cmp	r2, #0
   2cb18:	beq	2cc00 <GetDataSlab+0x10ce4>
   2cb1c:	ldr	r3, [r8]
   2cb20:	mul	r3, r3, r2
   2cb24:	b	2cbf8 <GetDataSlab+0x10cdc>
   2cb28:	add	r3, sp, #152	; 0x98
   2cb2c:	add	r3, r3, r4, lsl #2
   2cb30:	ldr	r3, [r3, #-120]	; 0xffffff88
   2cb34:	add	r6, r6, r3
   2cb38:	add	r5, r5, r3
   2cb3c:	ldr	r3, [sp, #16]
   2cb40:	add	r9, r9, r3
   2cb44:	ldr	r3, [sp, #20]
   2cb48:	cmp	r9, r3
   2cb4c:	bge	1c04c <GetDataSlab+0x130>
   2cb50:	ldr	r3, [sp, #196]	; 0xc4
   2cb54:	ldr	r2, [r3]
   2cb58:	ldr	r3, [sp]
   2cb5c:	cmp	r2, #0
   2cb60:	addne	r5, r5, r2
   2cb64:	addne	r6, r6, r2
   2cb68:	add	r0, r3, r9, lsl #1
   2cb6c:	mov	r1, r5
   2cb70:	ldr	ip, [sp, #16]
   2cb74:	sub	r3, r1, r5
   2cb78:	cmp	ip, r3
   2cb7c:	bgt	2cb08 <GetDataSlab+0x10bec>
   2cb80:	ldr	r3, [sp, #24]
   2cb84:	ldr	r8, [sp, #4]
   2cb88:	sub	r3, r3, r2
   2cb8c:	ldr	r4, [sp, #12]
   2cb90:	add	r6, r6, r3
   2cb94:	add	r5, r5, r3
   2cb98:	ldr	r3, [sp, #208]	; 0xd0
   2cb9c:	cmp	r4, r3
   2cba0:	bge	2cb3c <GetDataSlab+0x10c20>
   2cba4:	ldr	r3, [sl, r4, lsl #2]
   2cba8:	ldr	r2, [sp, #204]	; 0xcc
   2cbac:	add	r3, r3, #1
   2cbb0:	str	r3, [sl, r4, lsl #2]
   2cbb4:	mov	r0, r3
   2cbb8:	ldr	r1, [r2, r4, lsl #2]
   2cbbc:	bl	3fd18 <__aeabi_idivmod>
   2cbc0:	subs	r3, r1, #0
   2cbc4:	bne	2cb28 <GetDataSlab+0x10c0c>
   2cbc8:	ldr	r7, [r8, #4]
   2cbcc:	str	r3, [sl, r4, lsl #2]
   2cbd0:	mov	r1, r7
   2cbd4:	mov	r0, r6
   2cbd8:	bl	3fd18 <__aeabi_idivmod>
   2cbdc:	ldr	r2, [sp, #196]	; 0xc4
   2cbe0:	ldr	r2, [r2, r4, lsl #2]
   2cbe4:	subs	r3, r1, #0
   2cbe8:	beq	2cb14 <GetDataSlab+0x10bf8>
   2cbec:	ldr	r1, [r8]
   2cbf0:	sub	r3, r7, r3
   2cbf4:	mla	r3, r2, r1, r3
   2cbf8:	add	r5, r5, r3
   2cbfc:	add	r6, r6, r3
   2cc00:	add	r4, r4, #1
   2cc04:	add	r8, r8, #4
   2cc08:	b	2cb98 <GetDataSlab+0x10c7c>
   2cc0c:	ldr	r3, [sp, #24]
   2cc10:	add	r2, r2, #1
   2cc14:	ldrsb	r3, [r1, r3]
   2cc18:	strh	r3, [ip], #2
   2cc1c:	b	2c9e4 <GetDataSlab+0x10ac8>
   2cc20:	cmp	r2, #0
   2cc24:	beq	2ca80 <GetDataSlab+0x10b64>
   2cc28:	ldr	r3, [r8]
   2cc2c:	mul	r3, r3, r2
   2cc30:	b	2ca78 <GetDataSlab+0x10b5c>
   2cc34:	add	r3, sp, #152	; 0x98
   2cc38:	add	r3, r3, r4, lsl #2
   2cc3c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2cc40:	add	r6, r6, r3
   2cc44:	add	r5, r5, r3
   2cc48:	ldr	r3, [sp, #16]
   2cc4c:	add	r9, r9, r3
   2cc50:	b	2c9b4 <GetDataSlab+0x10a98>
   2cc54:	ldr	r3, [r9]
   2cc58:	ldr	ip, [sp, #4]
   2cc5c:	str	r3, [sp, #12]
   2cc60:	sub	r3, r3, #1
   2cc64:	str	r3, [sp, #32]
   2cc68:	ldr	r3, [fp]
   2cc6c:	mov	lr, fp
   2cc70:	str	r3, [sp, #24]
   2cc74:	str	r3, [sp, #112]	; 0x70
   2cc78:	ldr	r3, [sp, #204]	; 0xcc
   2cc7c:	mov	r6, #0
   2cc80:	mov	r2, #1
   2cc84:	ldr	r3, [r3]
   2cc88:	str	r3, [sp, #16]
   2cc8c:	str	r3, [sp, #20]
   2cc90:	ldr	r3, [sp, #208]	; 0xd0
   2cc94:	cmp	r2, r3
   2cc98:	blt	2cdc0 <GetDataSlab+0x10ea4>
   2cc9c:	ldr	r3, [sp, #8]
   2cca0:	add	r5, r3, r6
   2cca4:	ldr	r3, [sp, #12]
   2cca8:	cmp	r3, #1
   2ccac:	moveq	r9, #0
   2ccb0:	beq	2ce78 <GetDataSlab+0x10f5c>
   2ccb4:	ldr	r2, [sp, #16]
   2ccb8:	ldr	r3, [sp, #12]
   2ccbc:	mov	r9, #0
   2ccc0:	mul	r3, r3, r2
   2ccc4:	ldr	r2, [sp, #24]
   2ccc8:	sub	r3, r2, r3
   2cccc:	str	r3, [sp, #8]
   2ccd0:	ldr	r3, [sp, #16]
   2ccd4:	ldr	r2, [sp, #12]
   2ccd8:	bic	r3, r3, r3, asr #31
   2ccdc:	mul	fp, r2, r3
   2cce0:	rsb	r3, r2, #0
   2cce4:	str	r3, [sp, #24]
   2cce8:	ldr	r3, [sp, #20]
   2ccec:	cmp	r9, r3
   2ccf0:	bge	1c04c <GetDataSlab+0x130>
   2ccf4:	ldr	r3, [sp, #196]	; 0xc4
   2ccf8:	mov	r2, #0
   2ccfc:	ldr	r0, [r3]
   2cd00:	ldr	r3, [sp]
   2cd04:	cmp	r0, #0
   2cd08:	addne	r5, r5, r0
   2cd0c:	addne	r6, r6, r0
   2cd10:	mov	r1, r5
   2cd14:	add	ip, r3, r9, lsl #1
   2cd18:	ldr	r3, [sp, #12]
   2cd1c:	add	r1, r1, r3
   2cd20:	ldr	r3, [sp, #16]
   2cd24:	cmp	r2, r3
   2cd28:	blt	2cf40 <GetDataSlab+0x11024>
   2cd2c:	ldr	r3, [sp, #8]
   2cd30:	ldr	r8, [sp, #4]
   2cd34:	sub	r2, r3, r0
   2cd38:	add	r3, fp, r6
   2cd3c:	add	r6, r3, r2
   2cd40:	add	r3, fp, r2
   2cd44:	add	r5, r5, r3
   2cd48:	mov	r4, #1
   2cd4c:	ldr	r3, [sp, #208]	; 0xd0
   2cd50:	cmp	r4, r3
   2cd54:	bge	2cf7c <GetDataSlab+0x11060>
   2cd58:	ldr	r3, [sl, r4, lsl #2]
   2cd5c:	ldr	r2, [sp, #204]	; 0xcc
   2cd60:	add	r3, r3, #1
   2cd64:	str	r3, [sl, r4, lsl #2]
   2cd68:	mov	r0, r3
   2cd6c:	ldr	r1, [r2, r4, lsl #2]
   2cd70:	bl	3fd18 <__aeabi_idivmod>
   2cd74:	subs	r3, r1, #0
   2cd78:	bne	2cf68 <GetDataSlab+0x1104c>
   2cd7c:	ldr	r7, [r8, #4]
   2cd80:	str	r3, [sl, r4, lsl #2]
   2cd84:	mov	r1, r7
   2cd88:	mov	r0, r6
   2cd8c:	bl	3fd18 <__aeabi_idivmod>
   2cd90:	ldr	r2, [sp, #196]	; 0xc4
   2cd94:	ldr	r2, [r2, r4, lsl #2]
   2cd98:	subs	r3, r1, #0
   2cd9c:	beq	2cf54 <GetDataSlab+0x11038>
   2cda0:	ldr	r1, [r8]
   2cda4:	sub	r3, r7, r3
   2cda8:	mla	r3, r2, r1, r3
   2cdac:	add	r5, r5, r3
   2cdb0:	add	r6, r6, r3
   2cdb4:	add	r4, r4, #1
   2cdb8:	add	r8, r8, #4
   2cdbc:	b	2cd4c <GetDataSlab+0x10e30>
   2cdc0:	ldr	r3, [r9, r2, lsl #2]
   2cdc4:	mov	r5, ip
   2cdc8:	sub	r3, r3, #1
   2cdcc:	str	r3, [r4, r2, lsl #2]
   2cdd0:	ldr	r3, [lr], #4
   2cdd4:	mov	r1, lr
   2cdd8:	str	r3, [ip, #4]
   2cddc:	cmp	r1, fp
   2cde0:	bne	2ce14 <GetDataSlab+0x10ef8>
   2cde4:	ldr	r3, [sp, #204]	; 0xcc
   2cde8:	ldr	r1, [sp, #20]
   2cdec:	add	ip, ip, #4
   2cdf0:	ldr	r3, [r3, r2, lsl #2]
   2cdf4:	mul	r3, r3, r1
   2cdf8:	ldr	r1, [sp, #196]	; 0xc4
   2cdfc:	str	r3, [sp, #20]
   2ce00:	ldr	r3, [r5]
   2ce04:	ldr	r1, [r1, r2, lsl #2]
   2ce08:	add	r2, r2, #1
   2ce0c:	mla	r6, r1, r3, r6
   2ce10:	b	2cc90 <GetDataSlab+0x10d74>
   2ce14:	ldr	r7, [r4, r2, lsl #2]
   2ce18:	mov	r0, r1
   2ce1c:	ldr	r3, [r1, #-4]!
   2ce20:	mul	r3, r3, r7
   2ce24:	ldr	r7, [ip, #4]
   2ce28:	str	r3, [r4, r2, lsl #2]
   2ce2c:	ldr	r3, [r0]
   2ce30:	mul	r3, r3, r7
   2ce34:	str	r3, [ip, #4]
   2ce38:	b	2cddc <GetDataSlab+0x10ec0>
   2ce3c:	ldrb	r3, [r1], #1
   2ce40:	strh	r3, [r0], #2
   2ce44:	b	2cea4 <GetDataSlab+0x10f88>
   2ce48:	cmp	r2, #0
   2ce4c:	beq	2cf34 <GetDataSlab+0x11018>
   2ce50:	ldr	r3, [r8]
   2ce54:	mul	r3, r3, r2
   2ce58:	b	2cf2c <GetDataSlab+0x11010>
   2ce5c:	add	r3, sp, #152	; 0x98
   2ce60:	add	r3, r3, r4, lsl #2
   2ce64:	ldr	r3, [r3, #-120]	; 0xffffff88
   2ce68:	add	r6, r6, r3
   2ce6c:	add	r5, r5, r3
   2ce70:	ldr	r3, [sp, #16]
   2ce74:	add	r9, r9, r3
   2ce78:	ldr	r3, [sp, #20]
   2ce7c:	cmp	r9, r3
   2ce80:	bge	1c04c <GetDataSlab+0x130>
   2ce84:	ldr	r3, [sp, #196]	; 0xc4
   2ce88:	ldr	r2, [r3]
   2ce8c:	ldr	r3, [sp]
   2ce90:	cmp	r2, #0
   2ce94:	addne	r5, r5, r2
   2ce98:	addne	r6, r6, r2
   2ce9c:	add	r0, r3, r9, lsl #1
   2cea0:	mov	r1, r5
   2cea4:	ldr	ip, [sp, #16]
   2cea8:	sub	r3, r1, r5
   2ceac:	cmp	ip, r3
   2ceb0:	bgt	2ce3c <GetDataSlab+0x10f20>
   2ceb4:	ldr	r3, [sp, #24]
   2ceb8:	ldr	r8, [sp, #4]
   2cebc:	sub	r3, r3, r2
   2cec0:	ldr	r4, [sp, #12]
   2cec4:	add	r6, r6, r3
   2cec8:	add	r5, r5, r3
   2cecc:	ldr	r3, [sp, #208]	; 0xd0
   2ced0:	cmp	r4, r3
   2ced4:	bge	2ce70 <GetDataSlab+0x10f54>
   2ced8:	ldr	r3, [sl, r4, lsl #2]
   2cedc:	ldr	r2, [sp, #204]	; 0xcc
   2cee0:	add	r3, r3, #1
   2cee4:	str	r3, [sl, r4, lsl #2]
   2cee8:	mov	r0, r3
   2ceec:	ldr	r1, [r2, r4, lsl #2]
   2cef0:	bl	3fd18 <__aeabi_idivmod>
   2cef4:	subs	r3, r1, #0
   2cef8:	bne	2ce5c <GetDataSlab+0x10f40>
   2cefc:	ldr	r7, [r8, #4]
   2cf00:	str	r3, [sl, r4, lsl #2]
   2cf04:	mov	r1, r7
   2cf08:	mov	r0, r6
   2cf0c:	bl	3fd18 <__aeabi_idivmod>
   2cf10:	ldr	r2, [sp, #196]	; 0xc4
   2cf14:	ldr	r2, [r2, r4, lsl #2]
   2cf18:	subs	r3, r1, #0
   2cf1c:	beq	2ce48 <GetDataSlab+0x10f2c>
   2cf20:	ldr	r1, [r8]
   2cf24:	sub	r3, r7, r3
   2cf28:	mla	r3, r2, r1, r3
   2cf2c:	add	r5, r5, r3
   2cf30:	add	r6, r6, r3
   2cf34:	add	r4, r4, #1
   2cf38:	add	r8, r8, #4
   2cf3c:	b	2cecc <GetDataSlab+0x10fb0>
   2cf40:	ldr	r3, [sp, #24]
   2cf44:	add	r2, r2, #1
   2cf48:	ldrb	r3, [r1, r3]
   2cf4c:	strh	r3, [ip], #2
   2cf50:	b	2cd18 <GetDataSlab+0x10dfc>
   2cf54:	cmp	r2, #0
   2cf58:	beq	2cdb4 <GetDataSlab+0x10e98>
   2cf5c:	ldr	r3, [r8]
   2cf60:	mul	r3, r3, r2
   2cf64:	b	2cdac <GetDataSlab+0x10e90>
   2cf68:	add	r3, sp, #152	; 0x98
   2cf6c:	add	r3, r3, r4, lsl #2
   2cf70:	ldr	r3, [r3, #-120]	; 0xffffff88
   2cf74:	add	r6, r6, r3
   2cf78:	add	r5, r5, r3
   2cf7c:	ldr	r3, [sp, #16]
   2cf80:	add	r9, r9, r3
   2cf84:	b	2cce8 <GetDataSlab+0x10dcc>
   2cf88:	cmp	r5, #12
   2cf8c:	bne	2d2d0 <GetDataSlab+0x113b4>
   2cf90:	ldr	r3, [r9]
   2cf94:	ldr	ip, [sp, #4]
   2cf98:	str	r3, [sp, #16]
   2cf9c:	sub	r3, r3, #1
   2cfa0:	str	r3, [sp, #32]
   2cfa4:	ldr	r3, [fp]
   2cfa8:	mov	lr, fp
   2cfac:	str	r3, [sp, #24]
   2cfb0:	str	r3, [sp, #112]	; 0x70
   2cfb4:	ldr	r3, [sp, #204]	; 0xcc
   2cfb8:	mov	r6, #0
   2cfbc:	mov	r2, #1
   2cfc0:	ldr	r3, [r3]
   2cfc4:	str	r3, [sp, #12]
   2cfc8:	str	r3, [sp, #20]
   2cfcc:	ldr	r3, [sp, #208]	; 0xd0
   2cfd0:	cmp	r2, r3
   2cfd4:	blt	2d108 <GetDataSlab+0x111ec>
   2cfd8:	ldr	r3, [sp, #8]
   2cfdc:	add	r5, r3, r6, lsl #3
   2cfe0:	ldr	r3, [sp, #16]
   2cfe4:	cmp	r3, #1
   2cfe8:	moveq	r9, #0
   2cfec:	beq	2d1c4 <GetDataSlab+0x112a8>
   2cff0:	ldr	r3, [sp, #16]
   2cff4:	ldr	r2, [sp, #12]
   2cff8:	mov	r9, #0
   2cffc:	mul	r3, r3, r2
   2d000:	ldr	r2, [sp, #24]
   2d004:	sub	r3, r2, r3
   2d008:	str	r3, [sp, #24]
   2d00c:	ldr	r3, [sp, #16]
   2d010:	ldr	r2, [sp, #16]
   2d014:	lsl	fp, r3, #3
   2d018:	ldr	r3, [sp, #12]
   2d01c:	bic	r3, r3, r3, asr #31
   2d020:	mul	r2, r3, r2
   2d024:	mul	r3, fp, r3
   2d028:	str	r2, [sp, #8]
   2d02c:	str	r3, [sp, #16]
   2d030:	ldr	r3, [sp, #20]
   2d034:	cmp	r9, r3
   2d038:	bge	1c04c <GetDataSlab+0x130>
   2d03c:	ldr	r3, [sp, #196]	; 0xc4
   2d040:	mov	r2, #0
   2d044:	ldr	r1, [r3]
   2d048:	ldr	r3, [sp]
   2d04c:	cmp	r1, #0
   2d050:	addne	r5, r5, r1, lsl #3
   2d054:	addne	r6, r6, r1
   2d058:	add	ip, r3, r9, lsl #1
   2d05c:	mov	r0, r5
   2d060:	ldr	r3, [sp, #12]
   2d064:	cmp	r2, r3
   2d068:	blt	2d28c <GetDataSlab+0x11370>
   2d06c:	ldr	r3, [sp, #24]
   2d070:	ldr	r8, [sp, #4]
   2d074:	sub	r2, r3, r1
   2d078:	ldr	r3, [sp, #8]
   2d07c:	mov	r4, #1
   2d080:	add	r3, r3, r6
   2d084:	add	r6, r3, r2
   2d088:	ldr	r3, [sp, #16]
   2d08c:	add	r3, r3, r2, lsl #3
   2d090:	add	r5, r5, r3
   2d094:	ldr	r3, [sp, #208]	; 0xd0
   2d098:	cmp	r4, r3
   2d09c:	bge	2d2c4 <GetDataSlab+0x113a8>
   2d0a0:	ldr	r3, [sl, r4, lsl #2]
   2d0a4:	ldr	r2, [sp, #204]	; 0xcc
   2d0a8:	add	r3, r3, #1
   2d0ac:	str	r3, [sl, r4, lsl #2]
   2d0b0:	mov	r0, r3
   2d0b4:	ldr	r1, [r2, r4, lsl #2]
   2d0b8:	bl	3fd18 <__aeabi_idivmod>
   2d0bc:	subs	r3, r1, #0
   2d0c0:	bne	2d2b0 <GetDataSlab+0x11394>
   2d0c4:	ldr	r7, [r8, #4]
   2d0c8:	str	r3, [sl, r4, lsl #2]
   2d0cc:	mov	r1, r7
   2d0d0:	mov	r0, r6
   2d0d4:	bl	3fd18 <__aeabi_idivmod>
   2d0d8:	ldr	r2, [sp, #196]	; 0xc4
   2d0dc:	ldr	r2, [r2, r4, lsl #2]
   2d0e0:	subs	r3, r1, #0
   2d0e4:	beq	2d29c <GetDataSlab+0x11380>
   2d0e8:	ldr	r1, [r8]
   2d0ec:	sub	r3, r7, r3
   2d0f0:	mla	r3, r2, r1, r3
   2d0f4:	add	r5, r5, r3, lsl #3
   2d0f8:	add	r6, r6, r3
   2d0fc:	add	r4, r4, #1
   2d100:	add	r8, r8, #4
   2d104:	b	2d094 <GetDataSlab+0x11178>
   2d108:	ldr	r3, [r9, r2, lsl #2]
   2d10c:	mov	r5, ip
   2d110:	sub	r3, r3, #1
   2d114:	str	r3, [r4, r2, lsl #2]
   2d118:	ldr	r3, [lr], #4
   2d11c:	mov	r1, lr
   2d120:	str	r3, [ip, #4]
   2d124:	cmp	r1, fp
   2d128:	bne	2d15c <GetDataSlab+0x11240>
   2d12c:	ldr	r3, [sp, #204]	; 0xcc
   2d130:	ldr	r1, [sp, #20]
   2d134:	add	ip, ip, #4
   2d138:	ldr	r3, [r3, r2, lsl #2]
   2d13c:	mul	r3, r3, r1
   2d140:	ldr	r1, [sp, #196]	; 0xc4
   2d144:	str	r3, [sp, #20]
   2d148:	ldr	r3, [r5]
   2d14c:	ldr	r1, [r1, r2, lsl #2]
   2d150:	add	r2, r2, #1
   2d154:	mla	r6, r1, r3, r6
   2d158:	b	2cfcc <GetDataSlab+0x110b0>
   2d15c:	ldr	r7, [r4, r2, lsl #2]
   2d160:	mov	r0, r1
   2d164:	ldr	r3, [r1, #-4]!
   2d168:	mul	r3, r3, r7
   2d16c:	ldr	r7, [ip, #4]
   2d170:	str	r3, [r4, r2, lsl #2]
   2d174:	ldr	r3, [r0]
   2d178:	mul	r3, r3, r7
   2d17c:	str	r3, [ip, #4]
   2d180:	b	2d124 <GetDataSlab+0x11208>
   2d184:	ldr	r3, [ip, #8]!
   2d188:	add	r1, r1, #1
   2d18c:	strh	r3, [r0], #2
   2d190:	b	2d1f4 <GetDataSlab+0x112d8>
   2d194:	cmp	r2, #0
   2d198:	beq	2d280 <GetDataSlab+0x11364>
   2d19c:	ldr	r3, [r8]
   2d1a0:	mul	r3, r3, r2
   2d1a4:	b	2d278 <GetDataSlab+0x1135c>
   2d1a8:	add	r3, sp, #152	; 0x98
   2d1ac:	add	r3, r3, r4, lsl #2
   2d1b0:	ldr	r3, [r3, #-120]	; 0xffffff88
   2d1b4:	add	r6, r6, r3
   2d1b8:	add	r5, r5, r3, lsl #3
   2d1bc:	ldr	r3, [sp, #12]
   2d1c0:	add	r9, r9, r3
   2d1c4:	ldr	r3, [sp, #20]
   2d1c8:	cmp	r9, r3
   2d1cc:	bge	1c04c <GetDataSlab+0x130>
   2d1d0:	ldr	r3, [sp, #196]	; 0xc4
   2d1d4:	mov	r1, #0
   2d1d8:	ldr	r2, [r3]
   2d1dc:	ldr	r3, [sp]
   2d1e0:	cmp	r2, #0
   2d1e4:	addne	r5, r5, r2, lsl #3
   2d1e8:	addne	r6, r6, r2
   2d1ec:	sub	ip, r5, #8
   2d1f0:	add	r0, r3, r9, lsl #1
   2d1f4:	ldr	r3, [sp, #12]
   2d1f8:	cmp	r1, r3
   2d1fc:	blt	2d184 <GetDataSlab+0x11268>
   2d200:	ldr	r3, [sp, #24]
   2d204:	ldr	r8, [sp, #4]
   2d208:	sub	r3, r3, r2
   2d20c:	ldr	r4, [sp, #16]
   2d210:	add	r6, r6, r3
   2d214:	add	r5, r5, r3, lsl #3
   2d218:	ldr	r3, [sp, #208]	; 0xd0
   2d21c:	cmp	r4, r3
   2d220:	bge	2d1bc <GetDataSlab+0x112a0>
   2d224:	ldr	r3, [sl, r4, lsl #2]
   2d228:	ldr	r2, [sp, #204]	; 0xcc
   2d22c:	add	r3, r3, #1
   2d230:	str	r3, [sl, r4, lsl #2]
   2d234:	mov	r0, r3
   2d238:	ldr	r1, [r2, r4, lsl #2]
   2d23c:	bl	3fd18 <__aeabi_idivmod>
   2d240:	subs	r3, r1, #0
   2d244:	bne	2d1a8 <GetDataSlab+0x1128c>
   2d248:	ldr	r7, [r8, #4]
   2d24c:	str	r3, [sl, r4, lsl #2]
   2d250:	mov	r1, r7
   2d254:	mov	r0, r6
   2d258:	bl	3fd18 <__aeabi_idivmod>
   2d25c:	ldr	r2, [sp, #196]	; 0xc4
   2d260:	ldr	r2, [r2, r4, lsl #2]
   2d264:	subs	r3, r1, #0
   2d268:	beq	2d194 <GetDataSlab+0x11278>
   2d26c:	ldr	r1, [r8]
   2d270:	sub	r3, r7, r3
   2d274:	mla	r3, r2, r1, r3
   2d278:	add	r5, r5, r3, lsl #3
   2d27c:	add	r6, r6, r3
   2d280:	add	r4, r4, #1
   2d284:	add	r8, r8, #4
   2d288:	b	2d218 <GetDataSlab+0x112fc>
   2d28c:	ldr	r3, [r0], fp
   2d290:	add	r2, r2, #1
   2d294:	strh	r3, [ip], #2
   2d298:	b	2d060 <GetDataSlab+0x11144>
   2d29c:	cmp	r2, #0
   2d2a0:	beq	2d0fc <GetDataSlab+0x111e0>
   2d2a4:	ldr	r3, [r8]
   2d2a8:	mul	r3, r3, r2
   2d2ac:	b	2d0f4 <GetDataSlab+0x111d8>
   2d2b0:	add	r3, sp, #152	; 0x98
   2d2b4:	add	r3, r3, r4, lsl #2
   2d2b8:	ldr	r3, [r3, #-120]	; 0xffffff88
   2d2bc:	add	r6, r6, r3
   2d2c0:	add	r5, r5, r3, lsl #3
   2d2c4:	ldr	r3, [sp, #12]
   2d2c8:	add	r9, r9, r3
   2d2cc:	b	2d030 <GetDataSlab+0x11114>
   2d2d0:	cmp	r5, #13
   2d2d4:	bne	337fc <GetDataSlab+0x178e0>
   2d2d8:	ldr	r3, [r9]
   2d2dc:	ldr	ip, [sp, #4]
   2d2e0:	str	r3, [sp, #16]
   2d2e4:	sub	r3, r3, #1
   2d2e8:	str	r3, [sp, #32]
   2d2ec:	ldr	r3, [fp]
   2d2f0:	mov	lr, fp
   2d2f4:	str	r3, [sp, #24]
   2d2f8:	str	r3, [sp, #112]	; 0x70
   2d2fc:	ldr	r3, [sp, #204]	; 0xcc
   2d300:	mov	r6, #0
   2d304:	mov	r2, #1
   2d308:	ldr	r3, [r3]
   2d30c:	str	r3, [sp, #12]
   2d310:	str	r3, [sp, #20]
   2d314:	ldr	r3, [sp, #208]	; 0xd0
   2d318:	cmp	r2, r3
   2d31c:	blt	2d450 <GetDataSlab+0x11534>
   2d320:	ldr	r3, [sp, #8]
   2d324:	add	r5, r3, r6, lsl #3
   2d328:	ldr	r3, [sp, #16]
   2d32c:	cmp	r3, #1
   2d330:	moveq	r9, #0
   2d334:	beq	2d50c <GetDataSlab+0x115f0>
   2d338:	ldr	r3, [sp, #16]
   2d33c:	ldr	r2, [sp, #12]
   2d340:	mov	r9, #0
   2d344:	mul	r3, r3, r2
   2d348:	ldr	r2, [sp, #24]
   2d34c:	sub	r3, r2, r3
   2d350:	str	r3, [sp, #24]
   2d354:	ldr	r3, [sp, #16]
   2d358:	ldr	r2, [sp, #16]
   2d35c:	lsl	fp, r3, #3
   2d360:	ldr	r3, [sp, #12]
   2d364:	bic	r3, r3, r3, asr #31
   2d368:	mul	r2, r3, r2
   2d36c:	mul	r3, r3, fp
   2d370:	str	r2, [sp, #16]
   2d374:	str	r3, [sp, #8]
   2d378:	ldr	r3, [sp, #20]
   2d37c:	cmp	r9, r3
   2d380:	bge	1c04c <GetDataSlab+0x130>
   2d384:	ldr	r3, [sp, #196]	; 0xc4
   2d388:	mov	r2, #0
   2d38c:	ldr	r1, [r3]
   2d390:	ldr	r3, [sp]
   2d394:	cmp	r1, #0
   2d398:	addne	r5, r5, r1, lsl #3
   2d39c:	addne	r6, r6, r1
   2d3a0:	add	ip, r3, r9, lsl #1
   2d3a4:	mov	r0, r5
   2d3a8:	ldr	r3, [sp, #12]
   2d3ac:	cmp	r2, r3
   2d3b0:	blt	2d5d4 <GetDataSlab+0x116b8>
   2d3b4:	ldr	r3, [sp, #24]
   2d3b8:	ldr	r8, [sp, #4]
   2d3bc:	sub	r2, r3, r1
   2d3c0:	ldr	r3, [sp, #16]
   2d3c4:	mov	r4, #1
   2d3c8:	add	r3, r3, r6
   2d3cc:	add	r6, r3, r2
   2d3d0:	ldr	r3, [sp, #8]
   2d3d4:	add	r3, r3, r2, lsl #3
   2d3d8:	add	r5, r5, r3
   2d3dc:	ldr	r3, [sp, #208]	; 0xd0
   2d3e0:	cmp	r4, r3
   2d3e4:	bge	2d60c <GetDataSlab+0x116f0>
   2d3e8:	ldr	r3, [sl, r4, lsl #2]
   2d3ec:	ldr	r2, [sp, #204]	; 0xcc
   2d3f0:	add	r3, r3, #1
   2d3f4:	str	r3, [sl, r4, lsl #2]
   2d3f8:	mov	r0, r3
   2d3fc:	ldr	r1, [r2, r4, lsl #2]
   2d400:	bl	3fd18 <__aeabi_idivmod>
   2d404:	subs	r3, r1, #0
   2d408:	bne	2d5f8 <GetDataSlab+0x116dc>
   2d40c:	ldr	r7, [r8, #4]
   2d410:	str	r3, [sl, r4, lsl #2]
   2d414:	mov	r1, r7
   2d418:	mov	r0, r6
   2d41c:	bl	3fd18 <__aeabi_idivmod>
   2d420:	ldr	r2, [sp, #196]	; 0xc4
   2d424:	ldr	r2, [r2, r4, lsl #2]
   2d428:	subs	r3, r1, #0
   2d42c:	beq	2d5e4 <GetDataSlab+0x116c8>
   2d430:	ldr	r1, [r8]
   2d434:	sub	r3, r7, r3
   2d438:	mla	r3, r2, r1, r3
   2d43c:	add	r5, r5, r3, lsl #3
   2d440:	add	r6, r6, r3
   2d444:	add	r4, r4, #1
   2d448:	add	r8, r8, #4
   2d44c:	b	2d3dc <GetDataSlab+0x114c0>
   2d450:	ldr	r3, [r9, r2, lsl #2]
   2d454:	mov	r5, ip
   2d458:	sub	r3, r3, #1
   2d45c:	str	r3, [r4, r2, lsl #2]
   2d460:	ldr	r3, [lr], #4
   2d464:	mov	r1, lr
   2d468:	str	r3, [ip, #4]
   2d46c:	cmp	r1, fp
   2d470:	bne	2d4a4 <GetDataSlab+0x11588>
   2d474:	ldr	r3, [sp, #204]	; 0xcc
   2d478:	ldr	r1, [sp, #20]
   2d47c:	add	ip, ip, #4
   2d480:	ldr	r3, [r3, r2, lsl #2]
   2d484:	mul	r3, r3, r1
   2d488:	ldr	r1, [sp, #196]	; 0xc4
   2d48c:	str	r3, [sp, #20]
   2d490:	ldr	r3, [r5]
   2d494:	ldr	r1, [r1, r2, lsl #2]
   2d498:	add	r2, r2, #1
   2d49c:	mla	r6, r1, r3, r6
   2d4a0:	b	2d314 <GetDataSlab+0x113f8>
   2d4a4:	ldr	r7, [r4, r2, lsl #2]
   2d4a8:	mov	r0, r1
   2d4ac:	ldr	r3, [r1, #-4]!
   2d4b0:	mul	r3, r3, r7
   2d4b4:	ldr	r7, [ip, #4]
   2d4b8:	str	r3, [r4, r2, lsl #2]
   2d4bc:	ldr	r3, [r0]
   2d4c0:	mul	r3, r3, r7
   2d4c4:	str	r3, [ip, #4]
   2d4c8:	b	2d46c <GetDataSlab+0x11550>
   2d4cc:	ldr	r3, [ip, #8]!
   2d4d0:	add	r1, r1, #1
   2d4d4:	strh	r3, [r0], #2
   2d4d8:	b	2d53c <GetDataSlab+0x11620>
   2d4dc:	cmp	r2, #0
   2d4e0:	beq	2d5c8 <GetDataSlab+0x116ac>
   2d4e4:	ldr	r3, [r8]
   2d4e8:	mul	r3, r3, r2
   2d4ec:	b	2d5c0 <GetDataSlab+0x116a4>
   2d4f0:	add	r3, sp, #152	; 0x98
   2d4f4:	add	r3, r3, r4, lsl #2
   2d4f8:	ldr	r3, [r3, #-120]	; 0xffffff88
   2d4fc:	add	r6, r6, r3
   2d500:	add	r5, r5, r3, lsl #3
   2d504:	ldr	r3, [sp, #12]
   2d508:	add	r9, r9, r3
   2d50c:	ldr	r3, [sp, #20]
   2d510:	cmp	r9, r3
   2d514:	bge	1c04c <GetDataSlab+0x130>
   2d518:	ldr	r3, [sp, #196]	; 0xc4
   2d51c:	mov	r1, #0
   2d520:	ldr	r2, [r3]
   2d524:	ldr	r3, [sp]
   2d528:	cmp	r2, #0
   2d52c:	addne	r5, r5, r2, lsl #3
   2d530:	addne	r6, r6, r2
   2d534:	sub	ip, r5, #8
   2d538:	add	r0, r3, r9, lsl #1
   2d53c:	ldr	r3, [sp, #12]
   2d540:	cmp	r1, r3
   2d544:	blt	2d4cc <GetDataSlab+0x115b0>
   2d548:	ldr	r3, [sp, #24]
   2d54c:	ldr	r8, [sp, #4]
   2d550:	sub	r3, r3, r2
   2d554:	ldr	r4, [sp, #16]
   2d558:	add	r6, r6, r3
   2d55c:	add	r5, r5, r3, lsl #3
   2d560:	ldr	r3, [sp, #208]	; 0xd0
   2d564:	cmp	r4, r3
   2d568:	bge	2d504 <GetDataSlab+0x115e8>
   2d56c:	ldr	r3, [sl, r4, lsl #2]
   2d570:	ldr	r2, [sp, #204]	; 0xcc
   2d574:	add	r3, r3, #1
   2d578:	str	r3, [sl, r4, lsl #2]
   2d57c:	mov	r0, r3
   2d580:	ldr	r1, [r2, r4, lsl #2]
   2d584:	bl	3fd18 <__aeabi_idivmod>
   2d588:	subs	r3, r1, #0
   2d58c:	bne	2d4f0 <GetDataSlab+0x115d4>
   2d590:	ldr	r7, [r8, #4]
   2d594:	str	r3, [sl, r4, lsl #2]
   2d598:	mov	r1, r7
   2d59c:	mov	r0, r6
   2d5a0:	bl	3fd18 <__aeabi_idivmod>
   2d5a4:	ldr	r2, [sp, #196]	; 0xc4
   2d5a8:	ldr	r2, [r2, r4, lsl #2]
   2d5ac:	subs	r3, r1, #0
   2d5b0:	beq	2d4dc <GetDataSlab+0x115c0>
   2d5b4:	ldr	r1, [r8]
   2d5b8:	sub	r3, r7, r3
   2d5bc:	mla	r3, r2, r1, r3
   2d5c0:	add	r5, r5, r3, lsl #3
   2d5c4:	add	r6, r6, r3
   2d5c8:	add	r4, r4, #1
   2d5cc:	add	r8, r8, #4
   2d5d0:	b	2d560 <GetDataSlab+0x11644>
   2d5d4:	ldr	r3, [r0], fp
   2d5d8:	add	r2, r2, #1
   2d5dc:	strh	r3, [ip], #2
   2d5e0:	b	2d3a8 <GetDataSlab+0x1148c>
   2d5e4:	cmp	r2, #0
   2d5e8:	beq	2d444 <GetDataSlab+0x11528>
   2d5ec:	ldr	r3, [r8]
   2d5f0:	mul	r3, r3, r2
   2d5f4:	b	2d43c <GetDataSlab+0x11520>
   2d5f8:	add	r3, sp, #152	; 0x98
   2d5fc:	add	r3, r3, r4, lsl #2
   2d600:	ldr	r3, [r3, #-120]	; 0xffffff88
   2d604:	add	r6, r6, r3
   2d608:	add	r5, r5, r3, lsl #3
   2d60c:	ldr	r3, [sp, #12]
   2d610:	add	r9, r9, r3
   2d614:	b	2d378 <GetDataSlab+0x1145c>
   2d618:	sub	r3, r5, #1
   2d61c:	cmp	r3, #8
   2d620:	addls	pc, pc, r3, lsl #2
   2d624:	b	2f054 <GetDataSlab+0x13138>
   2d628:	b	2e9ec <GetDataSlab+0x12ad0>
   2d62c:	b	2ed20 <GetDataSlab+0x12e04>
   2d630:	b	2e36c <GetDataSlab+0x12450>
   2d634:	b	2e6ac <GetDataSlab+0x12790>
   2d638:	b	2dcf4 <GetDataSlab+0x11dd8>
   2d63c:	b	2e030 <GetDataSlab+0x12114>
   2d640:	b	2d9a0 <GetDataSlab+0x11a84>
   2d644:	b	2f054 <GetDataSlab+0x13138>
   2d648:	b	2d64c <GetDataSlab+0x11730>
   2d64c:	ldr	r3, [r9]
   2d650:	ldr	ip, [sp, #4]
   2d654:	str	r3, [sp, #16]
   2d658:	sub	r3, r3, #1
   2d65c:	str	r3, [sp, #32]
   2d660:	ldr	r3, [fp]
   2d664:	mov	lr, fp
   2d668:	str	r3, [sp, #24]
   2d66c:	str	r3, [sp, #112]	; 0x70
   2d670:	ldr	r3, [sp, #204]	; 0xcc
   2d674:	mov	r6, #0
   2d678:	mov	r2, #1
   2d67c:	ldr	r3, [r3]
   2d680:	str	r3, [sp, #12]
   2d684:	str	r3, [sp, #20]
   2d688:	ldr	r3, [sp, #208]	; 0xd0
   2d68c:	cmp	r2, r3
   2d690:	blt	2d7c4 <GetDataSlab+0x118a8>
   2d694:	ldr	r3, [sp, #8]
   2d698:	add	r5, r3, r6, lsl #3
   2d69c:	ldr	r3, [sp, #16]
   2d6a0:	cmp	r3, #1
   2d6a4:	moveq	r9, #0
   2d6a8:	beq	2d888 <GetDataSlab+0x1196c>
   2d6ac:	ldr	r3, [sp, #16]
   2d6b0:	ldr	r2, [sp, #12]
   2d6b4:	mov	r9, #0
   2d6b8:	mul	r3, r3, r2
   2d6bc:	ldr	r2, [sp, #24]
   2d6c0:	sub	r3, r2, r3
   2d6c4:	str	r3, [sp, #24]
   2d6c8:	ldr	r3, [sp, #16]
   2d6cc:	ldr	r2, [sp, #16]
   2d6d0:	lsl	fp, r3, #3
   2d6d4:	ldr	r3, [sp, #12]
   2d6d8:	bic	r3, r3, r3, asr #31
   2d6dc:	mul	r2, r2, r3
   2d6e0:	mul	r3, fp, r3
   2d6e4:	str	r2, [sp, #8]
   2d6e8:	str	r3, [sp, #16]
   2d6ec:	ldr	r3, [sp, #20]
   2d6f0:	cmp	r9, r3
   2d6f4:	bge	1c04c <GetDataSlab+0x130>
   2d6f8:	ldr	r3, [sp, #196]	; 0xc4
   2d6fc:	mov	r2, #0
   2d700:	ldr	r0, [r3]
   2d704:	ldr	r3, [sp]
   2d708:	cmp	r0, #0
   2d70c:	addne	r5, r5, r0, lsl #3
   2d710:	add	ip, r3, r9, lsl #1
   2d714:	addne	r6, r6, r0
   2d718:	mov	r3, r5
   2d71c:	ldr	r1, [sp, #12]
   2d720:	cmp	r2, r1
   2d724:	blt	2d950 <GetDataSlab+0x11a34>
   2d728:	ldr	r3, [sp, #24]
   2d72c:	ldr	r8, [sp, #4]
   2d730:	sub	r2, r3, r0
   2d734:	ldr	r3, [sp, #8]
   2d738:	mov	r4, #1
   2d73c:	add	r3, r3, r6
   2d740:	add	r6, r3, r2
   2d744:	ldr	r3, [sp, #16]
   2d748:	add	r3, r3, r2, lsl #3
   2d74c:	add	r5, r5, r3
   2d750:	ldr	r3, [sp, #208]	; 0xd0
   2d754:	cmp	r4, r3
   2d758:	bge	2d994 <GetDataSlab+0x11a78>
   2d75c:	ldr	r3, [sl, r4, lsl #2]
   2d760:	ldr	r2, [sp, #204]	; 0xcc
   2d764:	add	r3, r3, #1
   2d768:	str	r3, [sl, r4, lsl #2]
   2d76c:	mov	r0, r3
   2d770:	ldr	r1, [r2, r4, lsl #2]
   2d774:	bl	3fd18 <__aeabi_idivmod>
   2d778:	subs	r3, r1, #0
   2d77c:	bne	2d980 <GetDataSlab+0x11a64>
   2d780:	ldr	r7, [r8, #4]
   2d784:	str	r3, [sl, r4, lsl #2]
   2d788:	mov	r1, r7
   2d78c:	mov	r0, r6
   2d790:	bl	3fd18 <__aeabi_idivmod>
   2d794:	ldr	r2, [sp, #196]	; 0xc4
   2d798:	ldr	r2, [r2, r4, lsl #2]
   2d79c:	subs	r3, r1, #0
   2d7a0:	beq	2d96c <GetDataSlab+0x11a50>
   2d7a4:	ldr	r1, [r8]
   2d7a8:	sub	r3, r7, r3
   2d7ac:	mla	r3, r2, r1, r3
   2d7b0:	add	r5, r5, r3, lsl #3
   2d7b4:	add	r6, r6, r3
   2d7b8:	add	r4, r4, #1
   2d7bc:	add	r8, r8, #4
   2d7c0:	b	2d750 <GetDataSlab+0x11834>
   2d7c4:	ldr	r3, [r9, r2, lsl #2]
   2d7c8:	mov	r5, ip
   2d7cc:	sub	r3, r3, #1
   2d7d0:	str	r3, [r4, r2, lsl #2]
   2d7d4:	ldr	r3, [lr], #4
   2d7d8:	mov	r1, lr
   2d7dc:	str	r3, [ip, #4]
   2d7e0:	cmp	r1, fp
   2d7e4:	bne	2d818 <GetDataSlab+0x118fc>
   2d7e8:	ldr	r3, [sp, #204]	; 0xcc
   2d7ec:	ldr	r1, [sp, #20]
   2d7f0:	add	ip, ip, #4
   2d7f4:	ldr	r3, [r3, r2, lsl #2]
   2d7f8:	mul	r3, r3, r1
   2d7fc:	ldr	r1, [sp, #196]	; 0xc4
   2d800:	str	r3, [sp, #20]
   2d804:	ldr	r3, [r5]
   2d808:	ldr	r1, [r1, r2, lsl #2]
   2d80c:	add	r2, r2, #1
   2d810:	mla	r6, r1, r3, r6
   2d814:	b	2d688 <GetDataSlab+0x1176c>
   2d818:	ldr	r7, [r4, r2, lsl #2]
   2d81c:	mov	r0, r1
   2d820:	ldr	r3, [r1, #-4]!
   2d824:	mul	r3, r3, r7
   2d828:	ldr	r7, [ip, #4]
   2d82c:	str	r3, [r4, r2, lsl #2]
   2d830:	ldr	r3, [r0]
   2d834:	mul	r3, r3, r7
   2d838:	str	r3, [ip, #4]
   2d83c:	b	2d7e0 <GetDataSlab+0x118c4>
   2d840:	vldmia	ip!, {d7}
   2d844:	add	r2, r2, #1
   2d848:	vcvt.u32.f64	s15, d7
   2d84c:	vmov	r1, s15
   2d850:	strh	r1, [r0], #2
   2d854:	b	2d8b8 <GetDataSlab+0x1199c>
   2d858:	cmp	r2, #0
   2d85c:	beq	2d944 <GetDataSlab+0x11a28>
   2d860:	ldr	r3, [r8]
   2d864:	mul	r3, r3, r2
   2d868:	b	2d93c <GetDataSlab+0x11a20>
   2d86c:	add	r3, sp, #152	; 0x98
   2d870:	add	r3, r3, r4, lsl #2
   2d874:	ldr	r3, [r3, #-120]	; 0xffffff88
   2d878:	add	r6, r6, r3
   2d87c:	add	r5, r5, r3, lsl #3
   2d880:	ldr	r3, [sp, #12]
   2d884:	add	r9, r9, r3
   2d888:	ldr	r3, [sp, #20]
   2d88c:	cmp	r9, r3
   2d890:	bge	1c04c <GetDataSlab+0x130>
   2d894:	ldr	r3, [sp, #196]	; 0xc4
   2d898:	ldr	r2, [sp]
   2d89c:	ldr	r3, [r3]
   2d8a0:	add	r0, r2, r9, lsl #1
   2d8a4:	cmp	r3, #0
   2d8a8:	addne	r5, r5, r3, lsl #3
   2d8ac:	addne	r6, r6, r3
   2d8b0:	mov	ip, r5
   2d8b4:	mov	r2, #0
   2d8b8:	ldr	r1, [sp, #12]
   2d8bc:	cmp	r2, r1
   2d8c0:	blt	2d840 <GetDataSlab+0x11924>
   2d8c4:	ldr	r2, [sp, #24]
   2d8c8:	ldr	r8, [sp, #4]
   2d8cc:	sub	r3, r2, r3
   2d8d0:	ldr	r4, [sp, #16]
   2d8d4:	add	r6, r6, r3
   2d8d8:	add	r5, r5, r3, lsl #3
   2d8dc:	ldr	r3, [sp, #208]	; 0xd0
   2d8e0:	cmp	r4, r3
   2d8e4:	bge	2d880 <GetDataSlab+0x11964>
   2d8e8:	ldr	r3, [sl, r4, lsl #2]
   2d8ec:	ldr	r2, [sp, #204]	; 0xcc
   2d8f0:	add	r3, r3, #1
   2d8f4:	str	r3, [sl, r4, lsl #2]
   2d8f8:	mov	r0, r3
   2d8fc:	ldr	r1, [r2, r4, lsl #2]
   2d900:	bl	3fd18 <__aeabi_idivmod>
   2d904:	subs	r3, r1, #0
   2d908:	bne	2d86c <GetDataSlab+0x11950>
   2d90c:	ldr	r7, [r8, #4]
   2d910:	str	r3, [sl, r4, lsl #2]
   2d914:	mov	r1, r7
   2d918:	mov	r0, r6
   2d91c:	bl	3fd18 <__aeabi_idivmod>
   2d920:	ldr	r2, [sp, #196]	; 0xc4
   2d924:	ldr	r2, [r2, r4, lsl #2]
   2d928:	subs	r3, r1, #0
   2d92c:	beq	2d858 <GetDataSlab+0x1193c>
   2d930:	ldr	r1, [r8]
   2d934:	sub	r3, r7, r3
   2d938:	mla	r3, r2, r1, r3
   2d93c:	add	r5, r5, r3, lsl #3
   2d940:	add	r6, r6, r3
   2d944:	add	r4, r4, #1
   2d948:	add	r8, r8, #4
   2d94c:	b	2d8dc <GetDataSlab+0x119c0>
   2d950:	vldr	d7, [r3]
   2d954:	add	r2, r2, #1
   2d958:	add	r3, r3, fp
   2d95c:	vcvt.u32.f64	s15, d7
   2d960:	vmov	r1, s15
   2d964:	strh	r1, [ip], #2
   2d968:	b	2d71c <GetDataSlab+0x11800>
   2d96c:	cmp	r2, #0
   2d970:	beq	2d7b8 <GetDataSlab+0x1189c>
   2d974:	ldr	r3, [r8]
   2d978:	mul	r3, r3, r2
   2d97c:	b	2d7b0 <GetDataSlab+0x11894>
   2d980:	add	r3, sp, #152	; 0x98
   2d984:	add	r3, r3, r4, lsl #2
   2d988:	ldr	r3, [r3, #-120]	; 0xffffff88
   2d98c:	add	r6, r6, r3
   2d990:	add	r5, r5, r3, lsl #3
   2d994:	ldr	r3, [sp, #12]
   2d998:	add	r9, r9, r3
   2d99c:	b	2d6ec <GetDataSlab+0x117d0>
   2d9a0:	ldr	r3, [r9]
   2d9a4:	ldr	ip, [sp, #4]
   2d9a8:	str	r3, [sp, #16]
   2d9ac:	sub	r3, r3, #1
   2d9b0:	str	r3, [sp, #32]
   2d9b4:	ldr	r3, [fp]
   2d9b8:	mov	lr, fp
   2d9bc:	str	r3, [sp, #24]
   2d9c0:	str	r3, [sp, #112]	; 0x70
   2d9c4:	ldr	r3, [sp, #204]	; 0xcc
   2d9c8:	mov	r6, #0
   2d9cc:	mov	r2, #1
   2d9d0:	ldr	r3, [r3]
   2d9d4:	str	r3, [sp, #12]
   2d9d8:	str	r3, [sp, #20]
   2d9dc:	ldr	r3, [sp, #208]	; 0xd0
   2d9e0:	cmp	r2, r3
   2d9e4:	blt	2db18 <GetDataSlab+0x11bfc>
   2d9e8:	ldr	r3, [sp, #8]
   2d9ec:	add	r5, r3, r6, lsl #2
   2d9f0:	ldr	r3, [sp, #16]
   2d9f4:	cmp	r3, #1
   2d9f8:	moveq	r9, #0
   2d9fc:	beq	2dbdc <GetDataSlab+0x11cc0>
   2da00:	ldr	r3, [sp, #16]
   2da04:	ldr	r2, [sp, #12]
   2da08:	mov	r9, #0
   2da0c:	mul	r3, r3, r2
   2da10:	ldr	r2, [sp, #24]
   2da14:	sub	r3, r2, r3
   2da18:	str	r3, [sp, #8]
   2da1c:	ldr	r3, [sp, #16]
   2da20:	ldr	r2, [sp, #16]
   2da24:	lsl	fp, r3, #2
   2da28:	ldr	r3, [sp, #12]
   2da2c:	bic	r3, r3, r3, asr #31
   2da30:	mul	r2, r2, r3
   2da34:	mul	r3, fp, r3
   2da38:	str	r2, [sp, #24]
   2da3c:	str	r3, [sp, #16]
   2da40:	ldr	r3, [sp, #20]
   2da44:	cmp	r9, r3
   2da48:	bge	1c04c <GetDataSlab+0x130>
   2da4c:	ldr	r3, [sp, #196]	; 0xc4
   2da50:	mov	r2, #0
   2da54:	ldr	r0, [r3]
   2da58:	ldr	r3, [sp]
   2da5c:	cmp	r0, #0
   2da60:	addne	r5, r5, r0, lsl #2
   2da64:	add	ip, r3, r9, lsl #1
   2da68:	addne	r6, r6, r0
   2da6c:	mov	r3, r5
   2da70:	ldr	r1, [sp, #12]
   2da74:	cmp	r2, r1
   2da78:	blt	2dca4 <GetDataSlab+0x11d88>
   2da7c:	ldr	r3, [sp, #8]
   2da80:	ldr	r8, [sp, #4]
   2da84:	sub	r2, r3, r0
   2da88:	ldr	r3, [sp, #24]
   2da8c:	mov	r4, #1
   2da90:	add	r3, r3, r6
   2da94:	add	r6, r3, r2
   2da98:	ldr	r3, [sp, #16]
   2da9c:	add	r3, r3, r2, lsl #2
   2daa0:	add	r5, r5, r3
   2daa4:	ldr	r3, [sp, #208]	; 0xd0
   2daa8:	cmp	r4, r3
   2daac:	bge	2dce8 <GetDataSlab+0x11dcc>
   2dab0:	ldr	r3, [sl, r4, lsl #2]
   2dab4:	ldr	r2, [sp, #204]	; 0xcc
   2dab8:	add	r3, r3, #1
   2dabc:	str	r3, [sl, r4, lsl #2]
   2dac0:	mov	r0, r3
   2dac4:	ldr	r1, [r2, r4, lsl #2]
   2dac8:	bl	3fd18 <__aeabi_idivmod>
   2dacc:	subs	r3, r1, #0
   2dad0:	bne	2dcd4 <GetDataSlab+0x11db8>
   2dad4:	ldr	r7, [r8, #4]
   2dad8:	str	r3, [sl, r4, lsl #2]
   2dadc:	mov	r1, r7
   2dae0:	mov	r0, r6
   2dae4:	bl	3fd18 <__aeabi_idivmod>
   2dae8:	ldr	r2, [sp, #196]	; 0xc4
   2daec:	ldr	r2, [r2, r4, lsl #2]
   2daf0:	subs	r3, r1, #0
   2daf4:	beq	2dcc0 <GetDataSlab+0x11da4>
   2daf8:	ldr	r1, [r8]
   2dafc:	sub	r3, r7, r3
   2db00:	mla	r3, r2, r1, r3
   2db04:	add	r5, r5, r3, lsl #2
   2db08:	add	r6, r6, r3
   2db0c:	add	r4, r4, #1
   2db10:	add	r8, r8, #4
   2db14:	b	2daa4 <GetDataSlab+0x11b88>
   2db18:	ldr	r3, [r9, r2, lsl #2]
   2db1c:	mov	r5, ip
   2db20:	sub	r3, r3, #1
   2db24:	str	r3, [r4, r2, lsl #2]
   2db28:	ldr	r3, [lr], #4
   2db2c:	mov	r1, lr
   2db30:	str	r3, [ip, #4]
   2db34:	cmp	r1, fp
   2db38:	bne	2db6c <GetDataSlab+0x11c50>
   2db3c:	ldr	r3, [sp, #204]	; 0xcc
   2db40:	ldr	r1, [sp, #20]
   2db44:	add	ip, ip, #4
   2db48:	ldr	r3, [r3, r2, lsl #2]
   2db4c:	mul	r3, r3, r1
   2db50:	ldr	r1, [sp, #196]	; 0xc4
   2db54:	str	r3, [sp, #20]
   2db58:	ldr	r3, [r5]
   2db5c:	ldr	r1, [r1, r2, lsl #2]
   2db60:	add	r2, r2, #1
   2db64:	mla	r6, r1, r3, r6
   2db68:	b	2d9dc <GetDataSlab+0x11ac0>
   2db6c:	ldr	r7, [r4, r2, lsl #2]
   2db70:	mov	r0, r1
   2db74:	ldr	r3, [r1, #-4]!
   2db78:	mul	r3, r3, r7
   2db7c:	ldr	r7, [ip, #4]
   2db80:	str	r3, [r4, r2, lsl #2]
   2db84:	ldr	r3, [r0]
   2db88:	mul	r3, r3, r7
   2db8c:	str	r3, [ip, #4]
   2db90:	b	2db34 <GetDataSlab+0x11c18>
   2db94:	vldmia	ip!, {s15}
   2db98:	add	r2, r2, #1
   2db9c:	vcvt.u32.f32	s15, s15
   2dba0:	vmov	r1, s15
   2dba4:	strh	r1, [r0], #2
   2dba8:	b	2dc0c <GetDataSlab+0x11cf0>
   2dbac:	cmp	r2, #0
   2dbb0:	beq	2dc98 <GetDataSlab+0x11d7c>
   2dbb4:	ldr	r3, [r8]
   2dbb8:	mul	r3, r3, r2
   2dbbc:	b	2dc90 <GetDataSlab+0x11d74>
   2dbc0:	add	r3, sp, #152	; 0x98
   2dbc4:	add	r3, r3, r4, lsl #2
   2dbc8:	ldr	r3, [r3, #-120]	; 0xffffff88
   2dbcc:	add	r6, r6, r3
   2dbd0:	add	r5, r5, r3, lsl #2
   2dbd4:	ldr	r3, [sp, #12]
   2dbd8:	add	r9, r9, r3
   2dbdc:	ldr	r3, [sp, #20]
   2dbe0:	cmp	r9, r3
   2dbe4:	bge	1c04c <GetDataSlab+0x130>
   2dbe8:	ldr	r3, [sp, #196]	; 0xc4
   2dbec:	ldr	r2, [sp]
   2dbf0:	ldr	r3, [r3]
   2dbf4:	add	r0, r2, r9, lsl #1
   2dbf8:	cmp	r3, #0
   2dbfc:	addne	r5, r5, r3, lsl #2
   2dc00:	addne	r6, r6, r3
   2dc04:	mov	ip, r5
   2dc08:	mov	r2, #0
   2dc0c:	ldr	r1, [sp, #12]
   2dc10:	cmp	r2, r1
   2dc14:	blt	2db94 <GetDataSlab+0x11c78>
   2dc18:	ldr	r2, [sp, #24]
   2dc1c:	ldr	r8, [sp, #4]
   2dc20:	sub	r3, r2, r3
   2dc24:	ldr	r4, [sp, #16]
   2dc28:	add	r6, r6, r3
   2dc2c:	add	r5, r5, r3, lsl #2
   2dc30:	ldr	r3, [sp, #208]	; 0xd0
   2dc34:	cmp	r4, r3
   2dc38:	bge	2dbd4 <GetDataSlab+0x11cb8>
   2dc3c:	ldr	r3, [sl, r4, lsl #2]
   2dc40:	ldr	r2, [sp, #204]	; 0xcc
   2dc44:	add	r3, r3, #1
   2dc48:	str	r3, [sl, r4, lsl #2]
   2dc4c:	mov	r0, r3
   2dc50:	ldr	r1, [r2, r4, lsl #2]
   2dc54:	bl	3fd18 <__aeabi_idivmod>
   2dc58:	subs	r3, r1, #0
   2dc5c:	bne	2dbc0 <GetDataSlab+0x11ca4>
   2dc60:	ldr	r7, [r8, #4]
   2dc64:	str	r3, [sl, r4, lsl #2]
   2dc68:	mov	r1, r7
   2dc6c:	mov	r0, r6
   2dc70:	bl	3fd18 <__aeabi_idivmod>
   2dc74:	ldr	r2, [sp, #196]	; 0xc4
   2dc78:	ldr	r2, [r2, r4, lsl #2]
   2dc7c:	subs	r3, r1, #0
   2dc80:	beq	2dbac <GetDataSlab+0x11c90>
   2dc84:	ldr	r1, [r8]
   2dc88:	sub	r3, r7, r3
   2dc8c:	mla	r3, r2, r1, r3
   2dc90:	add	r5, r5, r3, lsl #2
   2dc94:	add	r6, r6, r3
   2dc98:	add	r4, r4, #1
   2dc9c:	add	r8, r8, #4
   2dca0:	b	2dc30 <GetDataSlab+0x11d14>
   2dca4:	vldr	s15, [r3]
   2dca8:	add	r2, r2, #1
   2dcac:	add	r3, r3, fp
   2dcb0:	vcvt.u32.f32	s15, s15
   2dcb4:	vmov	r1, s15
   2dcb8:	strh	r1, [ip], #2
   2dcbc:	b	2da70 <GetDataSlab+0x11b54>
   2dcc0:	cmp	r2, #0
   2dcc4:	beq	2db0c <GetDataSlab+0x11bf0>
   2dcc8:	ldr	r3, [r8]
   2dccc:	mul	r3, r3, r2
   2dcd0:	b	2db04 <GetDataSlab+0x11be8>
   2dcd4:	add	r3, sp, #152	; 0x98
   2dcd8:	add	r3, r3, r4, lsl #2
   2dcdc:	ldr	r3, [r3, #-120]	; 0xffffff88
   2dce0:	add	r6, r6, r3
   2dce4:	add	r5, r5, r3, lsl #2
   2dce8:	ldr	r3, [sp, #12]
   2dcec:	add	r9, r9, r3
   2dcf0:	b	2da40 <GetDataSlab+0x11b24>
   2dcf4:	ldr	r3, [r9]
   2dcf8:	ldr	ip, [sp, #4]
   2dcfc:	str	r3, [sp, #16]
   2dd00:	sub	r3, r3, #1
   2dd04:	str	r3, [sp, #32]
   2dd08:	ldr	r3, [fp]
   2dd0c:	mov	lr, fp
   2dd10:	str	r3, [sp, #24]
   2dd14:	str	r3, [sp, #112]	; 0x70
   2dd18:	ldr	r3, [sp, #204]	; 0xcc
   2dd1c:	mov	r6, #0
   2dd20:	mov	r2, #1
   2dd24:	ldr	r3, [r3]
   2dd28:	str	r3, [sp, #12]
   2dd2c:	str	r3, [sp, #20]
   2dd30:	ldr	r3, [sp, #208]	; 0xd0
   2dd34:	cmp	r2, r3
   2dd38:	blt	2de6c <GetDataSlab+0x11f50>
   2dd3c:	ldr	r3, [sp, #8]
   2dd40:	add	r5, r3, r6, lsl #2
   2dd44:	ldr	r3, [sp, #16]
   2dd48:	cmp	r3, #1
   2dd4c:	moveq	r9, #0
   2dd50:	beq	2df28 <GetDataSlab+0x1200c>
   2dd54:	ldr	r3, [sp, #16]
   2dd58:	ldr	r2, [sp, #12]
   2dd5c:	mov	r9, #0
   2dd60:	mul	r3, r3, r2
   2dd64:	ldr	r2, [sp, #24]
   2dd68:	sub	r3, r2, r3
   2dd6c:	str	r3, [sp, #24]
   2dd70:	ldr	r3, [sp, #16]
   2dd74:	ldr	r2, [sp, #16]
   2dd78:	lsl	fp, r3, #2
   2dd7c:	ldr	r3, [sp, #12]
   2dd80:	bic	r3, r3, r3, asr #31
   2dd84:	mul	r2, r3, r2
   2dd88:	mul	r3, fp, r3
   2dd8c:	str	r2, [sp, #8]
   2dd90:	str	r3, [sp, #16]
   2dd94:	ldr	r3, [sp, #20]
   2dd98:	cmp	r9, r3
   2dd9c:	bge	1c04c <GetDataSlab+0x130>
   2dda0:	ldr	r3, [sp, #196]	; 0xc4
   2dda4:	mov	r2, #0
   2dda8:	ldr	r1, [r3]
   2ddac:	ldr	r3, [sp]
   2ddb0:	cmp	r1, #0
   2ddb4:	addne	r5, r5, r1, lsl #2
   2ddb8:	addne	r6, r6, r1
   2ddbc:	add	ip, r3, r9, lsl #1
   2ddc0:	mov	r0, r5
   2ddc4:	ldr	r3, [sp, #12]
   2ddc8:	cmp	r2, r3
   2ddcc:	blt	2dfec <GetDataSlab+0x120d0>
   2ddd0:	ldr	r3, [sp, #24]
   2ddd4:	ldr	r8, [sp, #4]
   2ddd8:	sub	r2, r3, r1
   2dddc:	ldr	r3, [sp, #8]
   2dde0:	mov	r4, #1
   2dde4:	add	r3, r3, r6
   2dde8:	add	r6, r3, r2
   2ddec:	ldr	r3, [sp, #16]
   2ddf0:	add	r3, r3, r2, lsl #2
   2ddf4:	add	r5, r5, r3
   2ddf8:	ldr	r3, [sp, #208]	; 0xd0
   2ddfc:	cmp	r4, r3
   2de00:	bge	2e024 <GetDataSlab+0x12108>
   2de04:	ldr	r3, [sl, r4, lsl #2]
   2de08:	ldr	r2, [sp, #204]	; 0xcc
   2de0c:	add	r3, r3, #1
   2de10:	str	r3, [sl, r4, lsl #2]
   2de14:	mov	r0, r3
   2de18:	ldr	r1, [r2, r4, lsl #2]
   2de1c:	bl	3fd18 <__aeabi_idivmod>
   2de20:	subs	r3, r1, #0
   2de24:	bne	2e010 <GetDataSlab+0x120f4>
   2de28:	ldr	r7, [r8, #4]
   2de2c:	str	r3, [sl, r4, lsl #2]
   2de30:	mov	r1, r7
   2de34:	mov	r0, r6
   2de38:	bl	3fd18 <__aeabi_idivmod>
   2de3c:	ldr	r2, [sp, #196]	; 0xc4
   2de40:	ldr	r2, [r2, r4, lsl #2]
   2de44:	subs	r3, r1, #0
   2de48:	beq	2dffc <GetDataSlab+0x120e0>
   2de4c:	ldr	r1, [r8]
   2de50:	sub	r3, r7, r3
   2de54:	mla	r3, r2, r1, r3
   2de58:	add	r5, r5, r3, lsl #2
   2de5c:	add	r6, r6, r3
   2de60:	add	r4, r4, #1
   2de64:	add	r8, r8, #4
   2de68:	b	2ddf8 <GetDataSlab+0x11edc>
   2de6c:	ldr	r3, [r9, r2, lsl #2]
   2de70:	mov	r5, ip
   2de74:	sub	r3, r3, #1
   2de78:	str	r3, [r4, r2, lsl #2]
   2de7c:	ldr	r3, [lr], #4
   2de80:	mov	r1, lr
   2de84:	str	r3, [ip, #4]
   2de88:	cmp	r1, fp
   2de8c:	bne	2dec0 <GetDataSlab+0x11fa4>
   2de90:	ldr	r3, [sp, #204]	; 0xcc
   2de94:	ldr	r1, [sp, #20]
   2de98:	add	ip, ip, #4
   2de9c:	ldr	r3, [r3, r2, lsl #2]
   2dea0:	mul	r3, r3, r1
   2dea4:	ldr	r1, [sp, #196]	; 0xc4
   2dea8:	str	r3, [sp, #20]
   2deac:	ldr	r3, [r5]
   2deb0:	ldr	r1, [r1, r2, lsl #2]
   2deb4:	add	r2, r2, #1
   2deb8:	mla	r6, r1, r3, r6
   2debc:	b	2dd30 <GetDataSlab+0x11e14>
   2dec0:	ldr	r7, [r4, r2, lsl #2]
   2dec4:	mov	r0, r1
   2dec8:	ldr	r3, [r1, #-4]!
   2decc:	mul	r3, r3, r7
   2ded0:	ldr	r7, [ip, #4]
   2ded4:	str	r3, [r4, r2, lsl #2]
   2ded8:	ldr	r3, [r0]
   2dedc:	mul	r3, r3, r7
   2dee0:	str	r3, [ip, #4]
   2dee4:	b	2de88 <GetDataSlab+0x11f6c>
   2dee8:	ldr	r0, [r5, r3, lsl #2]
   2deec:	add	r3, r3, #1
   2def0:	strh	r0, [r1], #2
   2def4:	b	2df54 <GetDataSlab+0x12038>
   2def8:	cmp	r2, #0
   2defc:	beq	2dfe0 <GetDataSlab+0x120c4>
   2df00:	ldr	r3, [r8]
   2df04:	mul	r3, r3, r2
   2df08:	b	2dfd8 <GetDataSlab+0x120bc>
   2df0c:	add	r3, sp, #152	; 0x98
   2df10:	add	r3, r3, r4, lsl #2
   2df14:	ldr	r3, [r3, #-120]	; 0xffffff88
   2df18:	add	r6, r6, r3
   2df1c:	add	r5, r5, r3, lsl #2
   2df20:	ldr	r3, [sp, #12]
   2df24:	add	r9, r9, r3
   2df28:	ldr	r3, [sp, #20]
   2df2c:	cmp	r9, r3
   2df30:	bge	1c04c <GetDataSlab+0x130>
   2df34:	ldr	r3, [sp, #196]	; 0xc4
   2df38:	ldr	r2, [r3]
   2df3c:	ldr	r3, [sp]
   2df40:	cmp	r2, #0
   2df44:	add	r1, r3, r9, lsl #1
   2df48:	addne	r5, r5, r2, lsl #2
   2df4c:	addne	r6, r6, r2
   2df50:	mov	r3, #0
   2df54:	ldr	r0, [sp, #12]
   2df58:	cmp	r3, r0
   2df5c:	blt	2dee8 <GetDataSlab+0x11fcc>
   2df60:	ldr	r3, [sp, #24]
   2df64:	ldr	r8, [sp, #4]
   2df68:	sub	r3, r3, r2
   2df6c:	ldr	r4, [sp, #16]
   2df70:	add	r6, r6, r3
   2df74:	add	r5, r5, r3, lsl #2
   2df78:	ldr	r3, [sp, #208]	; 0xd0
   2df7c:	cmp	r4, r3
   2df80:	bge	2df20 <GetDataSlab+0x12004>
   2df84:	ldr	r3, [sl, r4, lsl #2]
   2df88:	ldr	r2, [sp, #204]	; 0xcc
   2df8c:	add	r3, r3, #1
   2df90:	str	r3, [sl, r4, lsl #2]
   2df94:	mov	r0, r3
   2df98:	ldr	r1, [r2, r4, lsl #2]
   2df9c:	bl	3fd18 <__aeabi_idivmod>
   2dfa0:	subs	r3, r1, #0
   2dfa4:	bne	2df0c <GetDataSlab+0x11ff0>
   2dfa8:	ldr	r7, [r8, #4]
   2dfac:	str	r3, [sl, r4, lsl #2]
   2dfb0:	mov	r1, r7
   2dfb4:	mov	r0, r6
   2dfb8:	bl	3fd18 <__aeabi_idivmod>
   2dfbc:	ldr	r2, [sp, #196]	; 0xc4
   2dfc0:	ldr	r2, [r2, r4, lsl #2]
   2dfc4:	subs	r3, r1, #0
   2dfc8:	beq	2def8 <GetDataSlab+0x11fdc>
   2dfcc:	ldr	r1, [r8]
   2dfd0:	sub	r3, r7, r3
   2dfd4:	mla	r3, r2, r1, r3
   2dfd8:	add	r5, r5, r3, lsl #2
   2dfdc:	add	r6, r6, r3
   2dfe0:	add	r4, r4, #1
   2dfe4:	add	r8, r8, #4
   2dfe8:	b	2df78 <GetDataSlab+0x1205c>
   2dfec:	ldr	r3, [r0], fp
   2dff0:	add	r2, r2, #1
   2dff4:	strh	r3, [ip], #2
   2dff8:	b	2ddc4 <GetDataSlab+0x11ea8>
   2dffc:	cmp	r2, #0
   2e000:	beq	2de60 <GetDataSlab+0x11f44>
   2e004:	ldr	r3, [r8]
   2e008:	mul	r3, r3, r2
   2e00c:	b	2de58 <GetDataSlab+0x11f3c>
   2e010:	add	r3, sp, #152	; 0x98
   2e014:	add	r3, r3, r4, lsl #2
   2e018:	ldr	r3, [r3, #-120]	; 0xffffff88
   2e01c:	add	r6, r6, r3
   2e020:	add	r5, r5, r3, lsl #2
   2e024:	ldr	r3, [sp, #12]
   2e028:	add	r9, r9, r3
   2e02c:	b	2dd94 <GetDataSlab+0x11e78>
   2e030:	ldr	r3, [r9]
   2e034:	ldr	ip, [sp, #4]
   2e038:	str	r3, [sp, #16]
   2e03c:	sub	r3, r3, #1
   2e040:	str	r3, [sp, #32]
   2e044:	ldr	r3, [fp]
   2e048:	mov	lr, fp
   2e04c:	str	r3, [sp, #24]
   2e050:	str	r3, [sp, #112]	; 0x70
   2e054:	ldr	r3, [sp, #204]	; 0xcc
   2e058:	mov	r6, #0
   2e05c:	mov	r2, #1
   2e060:	ldr	r3, [r3]
   2e064:	str	r3, [sp, #12]
   2e068:	str	r3, [sp, #20]
   2e06c:	ldr	r3, [sp, #208]	; 0xd0
   2e070:	cmp	r2, r3
   2e074:	blt	2e1a8 <GetDataSlab+0x1228c>
   2e078:	ldr	r3, [sp, #8]
   2e07c:	add	r5, r3, r6, lsl #2
   2e080:	ldr	r3, [sp, #16]
   2e084:	cmp	r3, #1
   2e088:	moveq	r9, #0
   2e08c:	beq	2e264 <GetDataSlab+0x12348>
   2e090:	ldr	r3, [sp, #16]
   2e094:	ldr	r2, [sp, #12]
   2e098:	mov	r9, #0
   2e09c:	mul	r3, r3, r2
   2e0a0:	ldr	r2, [sp, #24]
   2e0a4:	sub	r3, r2, r3
   2e0a8:	str	r3, [sp, #24]
   2e0ac:	ldr	r3, [sp, #16]
   2e0b0:	ldr	r2, [sp, #16]
   2e0b4:	lsl	fp, r3, #2
   2e0b8:	ldr	r3, [sp, #12]
   2e0bc:	bic	r3, r3, r3, asr #31
   2e0c0:	mul	r2, r2, r3
   2e0c4:	mul	r3, fp, r3
   2e0c8:	str	r2, [sp, #8]
   2e0cc:	str	r3, [sp, #16]
   2e0d0:	ldr	r3, [sp, #20]
   2e0d4:	cmp	r9, r3
   2e0d8:	bge	1c04c <GetDataSlab+0x130>
   2e0dc:	ldr	r3, [sp, #196]	; 0xc4
   2e0e0:	mov	r2, #0
   2e0e4:	ldr	r1, [r3]
   2e0e8:	ldr	r3, [sp]
   2e0ec:	cmp	r1, #0
   2e0f0:	addne	r5, r5, r1, lsl #2
   2e0f4:	addne	r6, r6, r1
   2e0f8:	add	ip, r3, r9, lsl #1
   2e0fc:	mov	r0, r5
   2e100:	ldr	r3, [sp, #12]
   2e104:	cmp	r2, r3
   2e108:	blt	2e328 <GetDataSlab+0x1240c>
   2e10c:	ldr	r3, [sp, #24]
   2e110:	ldr	r8, [sp, #4]
   2e114:	sub	r2, r3, r1
   2e118:	ldr	r3, [sp, #8]
   2e11c:	mov	r4, #1
   2e120:	add	r3, r3, r6
   2e124:	add	r6, r3, r2
   2e128:	ldr	r3, [sp, #16]
   2e12c:	add	r3, r3, r2, lsl #2
   2e130:	add	r5, r5, r3
   2e134:	ldr	r3, [sp, #208]	; 0xd0
   2e138:	cmp	r4, r3
   2e13c:	bge	2e360 <GetDataSlab+0x12444>
   2e140:	ldr	r3, [sl, r4, lsl #2]
   2e144:	ldr	r2, [sp, #204]	; 0xcc
   2e148:	add	r3, r3, #1
   2e14c:	str	r3, [sl, r4, lsl #2]
   2e150:	mov	r0, r3
   2e154:	ldr	r1, [r2, r4, lsl #2]
   2e158:	bl	3fd18 <__aeabi_idivmod>
   2e15c:	subs	r3, r1, #0
   2e160:	bne	2e34c <GetDataSlab+0x12430>
   2e164:	ldr	r7, [r8, #4]
   2e168:	str	r3, [sl, r4, lsl #2]
   2e16c:	mov	r1, r7
   2e170:	mov	r0, r6
   2e174:	bl	3fd18 <__aeabi_idivmod>
   2e178:	ldr	r2, [sp, #196]	; 0xc4
   2e17c:	ldr	r2, [r2, r4, lsl #2]
   2e180:	subs	r3, r1, #0
   2e184:	beq	2e338 <GetDataSlab+0x1241c>
   2e188:	ldr	r1, [r8]
   2e18c:	sub	r3, r7, r3
   2e190:	mla	r3, r2, r1, r3
   2e194:	add	r5, r5, r3, lsl #2
   2e198:	add	r6, r6, r3
   2e19c:	add	r4, r4, #1
   2e1a0:	add	r8, r8, #4
   2e1a4:	b	2e134 <GetDataSlab+0x12218>
   2e1a8:	ldr	r3, [r9, r2, lsl #2]
   2e1ac:	mov	r5, ip
   2e1b0:	sub	r3, r3, #1
   2e1b4:	str	r3, [r4, r2, lsl #2]
   2e1b8:	ldr	r3, [lr], #4
   2e1bc:	mov	r1, lr
   2e1c0:	str	r3, [ip, #4]
   2e1c4:	cmp	r1, fp
   2e1c8:	bne	2e1fc <GetDataSlab+0x122e0>
   2e1cc:	ldr	r3, [sp, #204]	; 0xcc
   2e1d0:	ldr	r1, [sp, #20]
   2e1d4:	add	ip, ip, #4
   2e1d8:	ldr	r3, [r3, r2, lsl #2]
   2e1dc:	mul	r3, r3, r1
   2e1e0:	ldr	r1, [sp, #196]	; 0xc4
   2e1e4:	str	r3, [sp, #20]
   2e1e8:	ldr	r3, [r5]
   2e1ec:	ldr	r1, [r1, r2, lsl #2]
   2e1f0:	add	r2, r2, #1
   2e1f4:	mla	r6, r1, r3, r6
   2e1f8:	b	2e06c <GetDataSlab+0x12150>
   2e1fc:	ldr	r7, [r4, r2, lsl #2]
   2e200:	mov	r0, r1
   2e204:	ldr	r3, [r1, #-4]!
   2e208:	mul	r3, r3, r7
   2e20c:	ldr	r7, [ip, #4]
   2e210:	str	r3, [r4, r2, lsl #2]
   2e214:	ldr	r3, [r0]
   2e218:	mul	r3, r3, r7
   2e21c:	str	r3, [ip, #4]
   2e220:	b	2e1c4 <GetDataSlab+0x122a8>
   2e224:	ldr	r0, [r5, r3, lsl #2]
   2e228:	add	r3, r3, #1
   2e22c:	strh	r0, [r1], #2
   2e230:	b	2e290 <GetDataSlab+0x12374>
   2e234:	cmp	r2, #0
   2e238:	beq	2e31c <GetDataSlab+0x12400>
   2e23c:	ldr	r3, [r8]
   2e240:	mul	r3, r3, r2
   2e244:	b	2e314 <GetDataSlab+0x123f8>
   2e248:	add	r3, sp, #152	; 0x98
   2e24c:	add	r3, r3, r4, lsl #2
   2e250:	ldr	r3, [r3, #-120]	; 0xffffff88
   2e254:	add	r6, r6, r3
   2e258:	add	r5, r5, r3, lsl #2
   2e25c:	ldr	r3, [sp, #12]
   2e260:	add	r9, r9, r3
   2e264:	ldr	r3, [sp, #20]
   2e268:	cmp	r9, r3
   2e26c:	bge	1c04c <GetDataSlab+0x130>
   2e270:	ldr	r3, [sp, #196]	; 0xc4
   2e274:	ldr	r2, [r3]
   2e278:	ldr	r3, [sp]
   2e27c:	cmp	r2, #0
   2e280:	add	r1, r3, r9, lsl #1
   2e284:	addne	r5, r5, r2, lsl #2
   2e288:	addne	r6, r6, r2
   2e28c:	mov	r3, #0
   2e290:	ldr	r0, [sp, #12]
   2e294:	cmp	r3, r0
   2e298:	blt	2e224 <GetDataSlab+0x12308>
   2e29c:	ldr	r3, [sp, #24]
   2e2a0:	ldr	r8, [sp, #4]
   2e2a4:	sub	r3, r3, r2
   2e2a8:	ldr	r4, [sp, #16]
   2e2ac:	add	r6, r6, r3
   2e2b0:	add	r5, r5, r3, lsl #2
   2e2b4:	ldr	r3, [sp, #208]	; 0xd0
   2e2b8:	cmp	r4, r3
   2e2bc:	bge	2e25c <GetDataSlab+0x12340>
   2e2c0:	ldr	r3, [sl, r4, lsl #2]
   2e2c4:	ldr	r2, [sp, #204]	; 0xcc
   2e2c8:	add	r3, r3, #1
   2e2cc:	str	r3, [sl, r4, lsl #2]
   2e2d0:	mov	r0, r3
   2e2d4:	ldr	r1, [r2, r4, lsl #2]
   2e2d8:	bl	3fd18 <__aeabi_idivmod>
   2e2dc:	subs	r3, r1, #0
   2e2e0:	bne	2e248 <GetDataSlab+0x1232c>
   2e2e4:	ldr	r7, [r8, #4]
   2e2e8:	str	r3, [sl, r4, lsl #2]
   2e2ec:	mov	r1, r7
   2e2f0:	mov	r0, r6
   2e2f4:	bl	3fd18 <__aeabi_idivmod>
   2e2f8:	ldr	r2, [sp, #196]	; 0xc4
   2e2fc:	ldr	r2, [r2, r4, lsl #2]
   2e300:	subs	r3, r1, #0
   2e304:	beq	2e234 <GetDataSlab+0x12318>
   2e308:	ldr	r1, [r8]
   2e30c:	sub	r3, r7, r3
   2e310:	mla	r3, r2, r1, r3
   2e314:	add	r5, r5, r3, lsl #2
   2e318:	add	r6, r6, r3
   2e31c:	add	r4, r4, #1
   2e320:	add	r8, r8, #4
   2e324:	b	2e2b4 <GetDataSlab+0x12398>
   2e328:	ldr	r3, [r0], fp
   2e32c:	add	r2, r2, #1
   2e330:	strh	r3, [ip], #2
   2e334:	b	2e100 <GetDataSlab+0x121e4>
   2e338:	cmp	r2, #0
   2e33c:	beq	2e19c <GetDataSlab+0x12280>
   2e340:	ldr	r3, [r8]
   2e344:	mul	r3, r3, r2
   2e348:	b	2e194 <GetDataSlab+0x12278>
   2e34c:	add	r3, sp, #152	; 0x98
   2e350:	add	r3, r3, r4, lsl #2
   2e354:	ldr	r3, [r3, #-120]	; 0xffffff88
   2e358:	add	r6, r6, r3
   2e35c:	add	r5, r5, r3, lsl #2
   2e360:	ldr	r3, [sp, #12]
   2e364:	add	r9, r9, r3
   2e368:	b	2e0d0 <GetDataSlab+0x121b4>
   2e36c:	ldr	r3, [r9]
   2e370:	ldr	ip, [sp, #4]
   2e374:	str	r3, [sp, #16]
   2e378:	sub	r3, r3, #1
   2e37c:	str	r3, [sp, #32]
   2e380:	ldr	r3, [fp]
   2e384:	mov	lr, fp
   2e388:	str	r3, [sp, #24]
   2e38c:	str	r3, [sp, #112]	; 0x70
   2e390:	ldr	r3, [sp, #204]	; 0xcc
   2e394:	mov	r6, #0
   2e398:	mov	r2, #1
   2e39c:	ldr	r3, [r3]
   2e3a0:	str	r3, [sp, #12]
   2e3a4:	str	r3, [sp, #20]
   2e3a8:	ldr	r3, [sp, #208]	; 0xd0
   2e3ac:	cmp	r2, r3
   2e3b0:	blt	2e4e4 <GetDataSlab+0x125c8>
   2e3b4:	ldr	r3, [sp, #8]
   2e3b8:	add	r5, r3, r6, lsl #1
   2e3bc:	ldr	r3, [sp, #16]
   2e3c0:	cmp	r3, #1
   2e3c4:	moveq	r9, #0
   2e3c8:	beq	2e5a0 <GetDataSlab+0x12684>
   2e3cc:	ldr	r3, [sp, #16]
   2e3d0:	ldr	r2, [sp, #12]
   2e3d4:	mov	r9, #0
   2e3d8:	mul	r3, r3, r2
   2e3dc:	ldr	r2, [sp, #24]
   2e3e0:	sub	r3, r2, r3
   2e3e4:	str	r3, [sp, #24]
   2e3e8:	ldr	r3, [sp, #16]
   2e3ec:	ldr	r2, [sp, #16]
   2e3f0:	lsl	fp, r3, #1
   2e3f4:	ldr	r3, [sp, #12]
   2e3f8:	bic	r3, r3, r3, asr #31
   2e3fc:	mul	r2, r3, r2
   2e400:	mul	r3, r3, fp
   2e404:	str	r2, [sp, #16]
   2e408:	str	r3, [sp, #8]
   2e40c:	ldr	r3, [sp, #20]
   2e410:	cmp	r9, r3
   2e414:	bge	1c04c <GetDataSlab+0x130>
   2e418:	ldr	r3, [sp, #196]	; 0xc4
   2e41c:	mov	r2, #0
   2e420:	ldr	r1, [r3]
   2e424:	ldr	r3, [sp]
   2e428:	cmp	r1, #0
   2e42c:	addne	r5, r5, r1, lsl #1
   2e430:	addne	r6, r6, r1
   2e434:	add	ip, r3, r9, lsl #1
   2e438:	mov	r0, r5
   2e43c:	ldr	r3, [sp, #12]
   2e440:	cmp	r2, r3
   2e444:	blt	2e668 <GetDataSlab+0x1274c>
   2e448:	ldr	r3, [sp, #24]
   2e44c:	ldr	r8, [sp, #4]
   2e450:	sub	r2, r3, r1
   2e454:	ldr	r3, [sp, #16]
   2e458:	mov	r4, #1
   2e45c:	add	r3, r3, r6
   2e460:	add	r6, r3, r2
   2e464:	ldr	r3, [sp, #8]
   2e468:	add	r3, r3, r2, lsl #1
   2e46c:	add	r5, r5, r3
   2e470:	ldr	r3, [sp, #208]	; 0xd0
   2e474:	cmp	r4, r3
   2e478:	bge	2e6a0 <GetDataSlab+0x12784>
   2e47c:	ldr	r3, [sl, r4, lsl #2]
   2e480:	ldr	r2, [sp, #204]	; 0xcc
   2e484:	add	r3, r3, #1
   2e488:	str	r3, [sl, r4, lsl #2]
   2e48c:	mov	r0, r3
   2e490:	ldr	r1, [r2, r4, lsl #2]
   2e494:	bl	3fd18 <__aeabi_idivmod>
   2e498:	subs	r3, r1, #0
   2e49c:	bne	2e68c <GetDataSlab+0x12770>
   2e4a0:	ldr	r7, [r8, #4]
   2e4a4:	str	r3, [sl, r4, lsl #2]
   2e4a8:	mov	r1, r7
   2e4ac:	mov	r0, r6
   2e4b0:	bl	3fd18 <__aeabi_idivmod>
   2e4b4:	ldr	r2, [sp, #196]	; 0xc4
   2e4b8:	ldr	r2, [r2, r4, lsl #2]
   2e4bc:	subs	r3, r1, #0
   2e4c0:	beq	2e678 <GetDataSlab+0x1275c>
   2e4c4:	ldr	r1, [r8]
   2e4c8:	sub	r3, r7, r3
   2e4cc:	mla	r3, r2, r1, r3
   2e4d0:	add	r5, r5, r3, lsl #1
   2e4d4:	add	r6, r6, r3
   2e4d8:	add	r4, r4, #1
   2e4dc:	add	r8, r8, #4
   2e4e0:	b	2e470 <GetDataSlab+0x12554>
   2e4e4:	ldr	r3, [r9, r2, lsl #2]
   2e4e8:	mov	r5, ip
   2e4ec:	sub	r3, r3, #1
   2e4f0:	str	r3, [r4, r2, lsl #2]
   2e4f4:	ldr	r3, [lr], #4
   2e4f8:	mov	r1, lr
   2e4fc:	str	r3, [ip, #4]
   2e500:	cmp	r1, fp
   2e504:	bne	2e538 <GetDataSlab+0x1261c>
   2e508:	ldr	r3, [sp, #204]	; 0xcc
   2e50c:	ldr	r1, [sp, #20]
   2e510:	add	ip, ip, #4
   2e514:	ldr	r3, [r3, r2, lsl #2]
   2e518:	mul	r3, r3, r1
   2e51c:	ldr	r1, [sp, #196]	; 0xc4
   2e520:	str	r3, [sp, #20]
   2e524:	ldr	r3, [r5]
   2e528:	ldr	r1, [r1, r2, lsl #2]
   2e52c:	add	r2, r2, #1
   2e530:	mla	r6, r1, r3, r6
   2e534:	b	2e3a8 <GetDataSlab+0x1248c>
   2e538:	ldr	r7, [r4, r2, lsl #2]
   2e53c:	mov	r0, r1
   2e540:	ldr	r3, [r1, #-4]!
   2e544:	mul	r3, r3, r7
   2e548:	ldr	r7, [ip, #4]
   2e54c:	str	r3, [r4, r2, lsl #2]
   2e550:	ldr	r3, [r0]
   2e554:	mul	r3, r3, r7
   2e558:	str	r3, [ip, #4]
   2e55c:	b	2e500 <GetDataSlab+0x125e4>
   2e560:	ldrh	r3, [ip, #2]!
   2e564:	add	r1, r1, #1
   2e568:	strh	r3, [r0], #2
   2e56c:	b	2e5d0 <GetDataSlab+0x126b4>
   2e570:	cmp	r2, #0
   2e574:	beq	2e65c <GetDataSlab+0x12740>
   2e578:	ldr	r3, [r8]
   2e57c:	mul	r3, r3, r2
   2e580:	b	2e654 <GetDataSlab+0x12738>
   2e584:	add	r3, sp, #152	; 0x98
   2e588:	add	r3, r3, r4, lsl #2
   2e58c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2e590:	add	r6, r6, r3
   2e594:	add	r5, r5, r3, lsl #1
   2e598:	ldr	r3, [sp, #12]
   2e59c:	add	r9, r9, r3
   2e5a0:	ldr	r3, [sp, #20]
   2e5a4:	cmp	r9, r3
   2e5a8:	bge	1c04c <GetDataSlab+0x130>
   2e5ac:	ldr	r3, [sp, #196]	; 0xc4
   2e5b0:	mov	r1, #0
   2e5b4:	ldr	r2, [r3]
   2e5b8:	ldr	r3, [sp]
   2e5bc:	cmp	r2, #0
   2e5c0:	addne	r5, r5, r2, lsl #1
   2e5c4:	addne	r6, r6, r2
   2e5c8:	sub	ip, r5, #2
   2e5cc:	add	r0, r3, r9, lsl #1
   2e5d0:	ldr	r3, [sp, #12]
   2e5d4:	cmp	r1, r3
   2e5d8:	blt	2e560 <GetDataSlab+0x12644>
   2e5dc:	ldr	r3, [sp, #24]
   2e5e0:	ldr	r8, [sp, #4]
   2e5e4:	sub	r3, r3, r2
   2e5e8:	ldr	r4, [sp, #16]
   2e5ec:	add	r6, r6, r3
   2e5f0:	add	r5, r5, r3, lsl #1
   2e5f4:	ldr	r3, [sp, #208]	; 0xd0
   2e5f8:	cmp	r4, r3
   2e5fc:	bge	2e598 <GetDataSlab+0x1267c>
   2e600:	ldr	r3, [sl, r4, lsl #2]
   2e604:	ldr	r2, [sp, #204]	; 0xcc
   2e608:	add	r3, r3, #1
   2e60c:	str	r3, [sl, r4, lsl #2]
   2e610:	mov	r0, r3
   2e614:	ldr	r1, [r2, r4, lsl #2]
   2e618:	bl	3fd18 <__aeabi_idivmod>
   2e61c:	subs	r3, r1, #0
   2e620:	bne	2e584 <GetDataSlab+0x12668>
   2e624:	ldr	r7, [r8, #4]
   2e628:	str	r3, [sl, r4, lsl #2]
   2e62c:	mov	r1, r7
   2e630:	mov	r0, r6
   2e634:	bl	3fd18 <__aeabi_idivmod>
   2e638:	ldr	r2, [sp, #196]	; 0xc4
   2e63c:	ldr	r2, [r2, r4, lsl #2]
   2e640:	subs	r3, r1, #0
   2e644:	beq	2e570 <GetDataSlab+0x12654>
   2e648:	ldr	r1, [r8]
   2e64c:	sub	r3, r7, r3
   2e650:	mla	r3, r2, r1, r3
   2e654:	add	r5, r5, r3, lsl #1
   2e658:	add	r6, r6, r3
   2e65c:	add	r4, r4, #1
   2e660:	add	r8, r8, #4
   2e664:	b	2e5f4 <GetDataSlab+0x126d8>
   2e668:	ldrh	r3, [r0], fp
   2e66c:	add	r2, r2, #1
   2e670:	strh	r3, [ip], #2
   2e674:	b	2e43c <GetDataSlab+0x12520>
   2e678:	cmp	r2, #0
   2e67c:	beq	2e4d8 <GetDataSlab+0x125bc>
   2e680:	ldr	r3, [r8]
   2e684:	mul	r3, r3, r2
   2e688:	b	2e4d0 <GetDataSlab+0x125b4>
   2e68c:	add	r3, sp, #152	; 0x98
   2e690:	add	r3, r3, r4, lsl #2
   2e694:	ldr	r3, [r3, #-120]	; 0xffffff88
   2e698:	add	r6, r6, r3
   2e69c:	add	r5, r5, r3, lsl #1
   2e6a0:	ldr	r3, [sp, #12]
   2e6a4:	add	r9, r9, r3
   2e6a8:	b	2e40c <GetDataSlab+0x124f0>
   2e6ac:	ldr	r3, [r9]
   2e6b0:	ldr	ip, [sp, #4]
   2e6b4:	str	r3, [sp, #16]
   2e6b8:	sub	r3, r3, #1
   2e6bc:	str	r3, [sp, #32]
   2e6c0:	ldr	r3, [fp]
   2e6c4:	mov	lr, fp
   2e6c8:	str	r3, [sp, #24]
   2e6cc:	str	r3, [sp, #112]	; 0x70
   2e6d0:	ldr	r3, [sp, #204]	; 0xcc
   2e6d4:	mov	r6, #0
   2e6d8:	mov	r2, #1
   2e6dc:	ldr	r3, [r3]
   2e6e0:	str	r3, [sp, #12]
   2e6e4:	str	r3, [sp, #20]
   2e6e8:	ldr	r3, [sp, #208]	; 0xd0
   2e6ec:	cmp	r2, r3
   2e6f0:	blt	2e824 <GetDataSlab+0x12908>
   2e6f4:	ldr	r3, [sp, #8]
   2e6f8:	add	r5, r3, r6, lsl #1
   2e6fc:	ldr	r3, [sp, #16]
   2e700:	cmp	r3, #1
   2e704:	moveq	r9, #0
   2e708:	beq	2e8e0 <GetDataSlab+0x129c4>
   2e70c:	ldr	r3, [sp, #16]
   2e710:	ldr	r2, [sp, #12]
   2e714:	mov	r9, #0
   2e718:	mul	r3, r3, r2
   2e71c:	ldr	r2, [sp, #24]
   2e720:	sub	r3, r2, r3
   2e724:	str	r3, [sp, #24]
   2e728:	ldr	r3, [sp, #16]
   2e72c:	ldr	r2, [sp, #16]
   2e730:	lsl	fp, r3, #1
   2e734:	ldr	r3, [sp, #12]
   2e738:	bic	r3, r3, r3, asr #31
   2e73c:	mul	r2, r2, r3
   2e740:	mul	r3, fp, r3
   2e744:	str	r2, [sp, #16]
   2e748:	str	r3, [sp, #8]
   2e74c:	ldr	r3, [sp, #20]
   2e750:	cmp	r9, r3
   2e754:	bge	1c04c <GetDataSlab+0x130>
   2e758:	ldr	r3, [sp, #196]	; 0xc4
   2e75c:	mov	r2, #0
   2e760:	ldr	r1, [r3]
   2e764:	ldr	r3, [sp]
   2e768:	cmp	r1, #0
   2e76c:	addne	r5, r5, r1, lsl #1
   2e770:	addne	r6, r6, r1
   2e774:	add	ip, r3, r9, lsl #1
   2e778:	mov	r0, r5
   2e77c:	ldr	r3, [sp, #12]
   2e780:	cmp	r2, r3
   2e784:	blt	2e9a8 <GetDataSlab+0x12a8c>
   2e788:	ldr	r3, [sp, #24]
   2e78c:	ldr	r8, [sp, #4]
   2e790:	sub	r2, r3, r1
   2e794:	ldr	r3, [sp, #16]
   2e798:	mov	r4, #1
   2e79c:	add	r3, r3, r6
   2e7a0:	add	r6, r3, r2
   2e7a4:	ldr	r3, [sp, #8]
   2e7a8:	add	r3, r3, r2, lsl #1
   2e7ac:	add	r5, r5, r3
   2e7b0:	ldr	r3, [sp, #208]	; 0xd0
   2e7b4:	cmp	r4, r3
   2e7b8:	bge	2e9e0 <GetDataSlab+0x12ac4>
   2e7bc:	ldr	r3, [sl, r4, lsl #2]
   2e7c0:	ldr	r2, [sp, #204]	; 0xcc
   2e7c4:	add	r3, r3, #1
   2e7c8:	str	r3, [sl, r4, lsl #2]
   2e7cc:	mov	r0, r3
   2e7d0:	ldr	r1, [r2, r4, lsl #2]
   2e7d4:	bl	3fd18 <__aeabi_idivmod>
   2e7d8:	subs	r3, r1, #0
   2e7dc:	bne	2e9cc <GetDataSlab+0x12ab0>
   2e7e0:	ldr	r7, [r8, #4]
   2e7e4:	str	r3, [sl, r4, lsl #2]
   2e7e8:	mov	r1, r7
   2e7ec:	mov	r0, r6
   2e7f0:	bl	3fd18 <__aeabi_idivmod>
   2e7f4:	ldr	r2, [sp, #196]	; 0xc4
   2e7f8:	ldr	r2, [r2, r4, lsl #2]
   2e7fc:	subs	r3, r1, #0
   2e800:	beq	2e9b8 <GetDataSlab+0x12a9c>
   2e804:	ldr	r1, [r8]
   2e808:	sub	r3, r7, r3
   2e80c:	mla	r3, r2, r1, r3
   2e810:	add	r5, r5, r3, lsl #1
   2e814:	add	r6, r6, r3
   2e818:	add	r4, r4, #1
   2e81c:	add	r8, r8, #4
   2e820:	b	2e7b0 <GetDataSlab+0x12894>
   2e824:	ldr	r3, [r9, r2, lsl #2]
   2e828:	mov	r5, ip
   2e82c:	sub	r3, r3, #1
   2e830:	str	r3, [r4, r2, lsl #2]
   2e834:	ldr	r3, [lr], #4
   2e838:	mov	r1, lr
   2e83c:	str	r3, [ip, #4]
   2e840:	cmp	r1, fp
   2e844:	bne	2e878 <GetDataSlab+0x1295c>
   2e848:	ldr	r3, [sp, #204]	; 0xcc
   2e84c:	ldr	r1, [sp, #20]
   2e850:	add	ip, ip, #4
   2e854:	ldr	r3, [r3, r2, lsl #2]
   2e858:	mul	r3, r3, r1
   2e85c:	ldr	r1, [sp, #196]	; 0xc4
   2e860:	str	r3, [sp, #20]
   2e864:	ldr	r3, [r5]
   2e868:	ldr	r1, [r1, r2, lsl #2]
   2e86c:	add	r2, r2, #1
   2e870:	mla	r6, r1, r3, r6
   2e874:	b	2e6e8 <GetDataSlab+0x127cc>
   2e878:	ldr	r7, [r4, r2, lsl #2]
   2e87c:	mov	r0, r1
   2e880:	ldr	r3, [r1, #-4]!
   2e884:	mul	r3, r3, r7
   2e888:	ldr	r7, [ip, #4]
   2e88c:	str	r3, [r4, r2, lsl #2]
   2e890:	ldr	r3, [r0]
   2e894:	mul	r3, r3, r7
   2e898:	str	r3, [ip, #4]
   2e89c:	b	2e840 <GetDataSlab+0x12924>
   2e8a0:	ldrh	r3, [ip, #2]!
   2e8a4:	add	r1, r1, #1
   2e8a8:	strh	r3, [r0], #2
   2e8ac:	b	2e910 <GetDataSlab+0x129f4>
   2e8b0:	cmp	r2, #0
   2e8b4:	beq	2e99c <GetDataSlab+0x12a80>
   2e8b8:	ldr	r3, [r8]
   2e8bc:	mul	r3, r3, r2
   2e8c0:	b	2e994 <GetDataSlab+0x12a78>
   2e8c4:	add	r3, sp, #152	; 0x98
   2e8c8:	add	r3, r3, r4, lsl #2
   2e8cc:	ldr	r3, [r3, #-120]	; 0xffffff88
   2e8d0:	add	r6, r6, r3
   2e8d4:	add	r5, r5, r3, lsl #1
   2e8d8:	ldr	r3, [sp, #12]
   2e8dc:	add	r9, r9, r3
   2e8e0:	ldr	r3, [sp, #20]
   2e8e4:	cmp	r9, r3
   2e8e8:	bge	1c04c <GetDataSlab+0x130>
   2e8ec:	ldr	r3, [sp, #196]	; 0xc4
   2e8f0:	mov	r1, #0
   2e8f4:	ldr	r2, [r3]
   2e8f8:	ldr	r3, [sp]
   2e8fc:	cmp	r2, #0
   2e900:	addne	r5, r5, r2, lsl #1
   2e904:	addne	r6, r6, r2
   2e908:	sub	ip, r5, #2
   2e90c:	add	r0, r3, r9, lsl #1
   2e910:	ldr	r3, [sp, #12]
   2e914:	cmp	r1, r3
   2e918:	blt	2e8a0 <GetDataSlab+0x12984>
   2e91c:	ldr	r3, [sp, #24]
   2e920:	ldr	r8, [sp, #4]
   2e924:	sub	r3, r3, r2
   2e928:	ldr	r4, [sp, #16]
   2e92c:	add	r6, r6, r3
   2e930:	add	r5, r5, r3, lsl #1
   2e934:	ldr	r3, [sp, #208]	; 0xd0
   2e938:	cmp	r4, r3
   2e93c:	bge	2e8d8 <GetDataSlab+0x129bc>
   2e940:	ldr	r3, [sl, r4, lsl #2]
   2e944:	ldr	r2, [sp, #204]	; 0xcc
   2e948:	add	r3, r3, #1
   2e94c:	str	r3, [sl, r4, lsl #2]
   2e950:	mov	r0, r3
   2e954:	ldr	r1, [r2, r4, lsl #2]
   2e958:	bl	3fd18 <__aeabi_idivmod>
   2e95c:	subs	r3, r1, #0
   2e960:	bne	2e8c4 <GetDataSlab+0x129a8>
   2e964:	ldr	r7, [r8, #4]
   2e968:	str	r3, [sl, r4, lsl #2]
   2e96c:	mov	r1, r7
   2e970:	mov	r0, r6
   2e974:	bl	3fd18 <__aeabi_idivmod>
   2e978:	ldr	r2, [sp, #196]	; 0xc4
   2e97c:	ldr	r2, [r2, r4, lsl #2]
   2e980:	subs	r3, r1, #0
   2e984:	beq	2e8b0 <GetDataSlab+0x12994>
   2e988:	ldr	r1, [r8]
   2e98c:	sub	r3, r7, r3
   2e990:	mla	r3, r2, r1, r3
   2e994:	add	r5, r5, r3, lsl #1
   2e998:	add	r6, r6, r3
   2e99c:	add	r4, r4, #1
   2e9a0:	add	r8, r8, #4
   2e9a4:	b	2e934 <GetDataSlab+0x12a18>
   2e9a8:	ldrh	r3, [r0], fp
   2e9ac:	add	r2, r2, #1
   2e9b0:	strh	r3, [ip], #2
   2e9b4:	b	2e77c <GetDataSlab+0x12860>
   2e9b8:	cmp	r2, #0
   2e9bc:	beq	2e818 <GetDataSlab+0x128fc>
   2e9c0:	ldr	r3, [r8]
   2e9c4:	mul	r3, r3, r2
   2e9c8:	b	2e810 <GetDataSlab+0x128f4>
   2e9cc:	add	r3, sp, #152	; 0x98
   2e9d0:	add	r3, r3, r4, lsl #2
   2e9d4:	ldr	r3, [r3, #-120]	; 0xffffff88
   2e9d8:	add	r6, r6, r3
   2e9dc:	add	r5, r5, r3, lsl #1
   2e9e0:	ldr	r3, [sp, #12]
   2e9e4:	add	r9, r9, r3
   2e9e8:	b	2e74c <GetDataSlab+0x12830>
   2e9ec:	ldr	r3, [r9]
   2e9f0:	ldr	ip, [sp, #4]
   2e9f4:	str	r3, [sp, #12]
   2e9f8:	sub	r3, r3, #1
   2e9fc:	str	r3, [sp, #32]
   2ea00:	ldr	r3, [fp]
   2ea04:	mov	lr, fp
   2ea08:	str	r3, [sp, #24]
   2ea0c:	str	r3, [sp, #112]	; 0x70
   2ea10:	ldr	r3, [sp, #204]	; 0xcc
   2ea14:	mov	r6, #0
   2ea18:	mov	r2, #1
   2ea1c:	ldr	r3, [r3]
   2ea20:	str	r3, [sp, #16]
   2ea24:	str	r3, [sp, #20]
   2ea28:	ldr	r3, [sp, #208]	; 0xd0
   2ea2c:	cmp	r2, r3
   2ea30:	blt	2eb58 <GetDataSlab+0x12c3c>
   2ea34:	ldr	r3, [sp, #8]
   2ea38:	add	r5, r3, r6
   2ea3c:	ldr	r3, [sp, #12]
   2ea40:	cmp	r3, #1
   2ea44:	moveq	r9, #0
   2ea48:	beq	2ec10 <GetDataSlab+0x12cf4>
   2ea4c:	ldr	r2, [sp, #16]
   2ea50:	ldr	r3, [sp, #12]
   2ea54:	mov	r9, #0
   2ea58:	mul	r3, r3, r2
   2ea5c:	ldr	r2, [sp, #24]
   2ea60:	sub	r3, r2, r3
   2ea64:	str	r3, [sp, #8]
   2ea68:	ldr	r3, [sp, #16]
   2ea6c:	ldr	r2, [sp, #12]
   2ea70:	bic	r3, r3, r3, asr #31
   2ea74:	mul	fp, r2, r3
   2ea78:	rsb	r3, r2, #0
   2ea7c:	str	r3, [sp, #24]
   2ea80:	ldr	r3, [sp, #20]
   2ea84:	cmp	r9, r3
   2ea88:	bge	1c04c <GetDataSlab+0x130>
   2ea8c:	ldr	r3, [sp, #196]	; 0xc4
   2ea90:	mov	r2, #0
   2ea94:	ldr	r0, [r3]
   2ea98:	ldr	r3, [sp]
   2ea9c:	cmp	r0, #0
   2eaa0:	addne	r5, r5, r0
   2eaa4:	addne	r6, r6, r0
   2eaa8:	mov	r1, r5
   2eaac:	add	ip, r3, r9, lsl #1
   2eab0:	ldr	r3, [sp, #12]
   2eab4:	add	r1, r1, r3
   2eab8:	ldr	r3, [sp, #16]
   2eabc:	cmp	r2, r3
   2eac0:	blt	2ecd8 <GetDataSlab+0x12dbc>
   2eac4:	ldr	r3, [sp, #8]
   2eac8:	ldr	r8, [sp, #4]
   2eacc:	sub	r2, r3, r0
   2ead0:	add	r3, fp, r6
   2ead4:	add	r6, r3, r2
   2ead8:	add	r3, fp, r2
   2eadc:	add	r5, r5, r3
   2eae0:	mov	r4, #1
   2eae4:	ldr	r3, [sp, #208]	; 0xd0
   2eae8:	cmp	r4, r3
   2eaec:	bge	2ed14 <GetDataSlab+0x12df8>
   2eaf0:	ldr	r3, [sl, r4, lsl #2]
   2eaf4:	ldr	r2, [sp, #204]	; 0xcc
   2eaf8:	add	r3, r3, #1
   2eafc:	str	r3, [sl, r4, lsl #2]
   2eb00:	mov	r0, r3
   2eb04:	ldr	r1, [r2, r4, lsl #2]
   2eb08:	bl	3fd18 <__aeabi_idivmod>
   2eb0c:	subs	r3, r1, #0
   2eb10:	bne	2ed00 <GetDataSlab+0x12de4>
   2eb14:	ldr	r7, [r8, #4]
   2eb18:	str	r3, [sl, r4, lsl #2]
   2eb1c:	mov	r1, r7
   2eb20:	mov	r0, r6
   2eb24:	bl	3fd18 <__aeabi_idivmod>
   2eb28:	ldr	r2, [sp, #196]	; 0xc4
   2eb2c:	ldr	r2, [r2, r4, lsl #2]
   2eb30:	subs	r3, r1, #0
   2eb34:	beq	2ecec <GetDataSlab+0x12dd0>
   2eb38:	ldr	r1, [r8]
   2eb3c:	sub	r3, r7, r3
   2eb40:	mla	r3, r2, r1, r3
   2eb44:	add	r5, r5, r3
   2eb48:	add	r6, r6, r3
   2eb4c:	add	r4, r4, #1
   2eb50:	add	r8, r8, #4
   2eb54:	b	2eae4 <GetDataSlab+0x12bc8>
   2eb58:	ldr	r3, [r9, r2, lsl #2]
   2eb5c:	mov	r5, ip
   2eb60:	sub	r3, r3, #1
   2eb64:	str	r3, [r4, r2, lsl #2]
   2eb68:	ldr	r3, [lr], #4
   2eb6c:	mov	r1, lr
   2eb70:	str	r3, [ip, #4]
   2eb74:	cmp	r1, fp
   2eb78:	bne	2ebac <GetDataSlab+0x12c90>
   2eb7c:	ldr	r3, [sp, #204]	; 0xcc
   2eb80:	ldr	r1, [sp, #20]
   2eb84:	add	ip, ip, #4
   2eb88:	ldr	r3, [r3, r2, lsl #2]
   2eb8c:	mul	r3, r3, r1
   2eb90:	ldr	r1, [sp, #196]	; 0xc4
   2eb94:	str	r3, [sp, #20]
   2eb98:	ldr	r3, [r5]
   2eb9c:	ldr	r1, [r1, r2, lsl #2]
   2eba0:	add	r2, r2, #1
   2eba4:	mla	r6, r1, r3, r6
   2eba8:	b	2ea28 <GetDataSlab+0x12b0c>
   2ebac:	ldr	r7, [r4, r2, lsl #2]
   2ebb0:	mov	r0, r1
   2ebb4:	ldr	r3, [r1, #-4]!
   2ebb8:	mul	r3, r3, r7
   2ebbc:	ldr	r7, [ip, #4]
   2ebc0:	str	r3, [r4, r2, lsl #2]
   2ebc4:	ldr	r3, [r0]
   2ebc8:	mul	r3, r3, r7
   2ebcc:	str	r3, [ip, #4]
   2ebd0:	b	2eb74 <GetDataSlab+0x12c58>
   2ebd4:	ldrsb	r3, [r1], #1
   2ebd8:	strh	r3, [r0], #2
   2ebdc:	b	2ec3c <GetDataSlab+0x12d20>
   2ebe0:	cmp	r2, #0
   2ebe4:	beq	2eccc <GetDataSlab+0x12db0>
   2ebe8:	ldr	r3, [r8]
   2ebec:	mul	r3, r3, r2
   2ebf0:	b	2ecc4 <GetDataSlab+0x12da8>
   2ebf4:	add	r3, sp, #152	; 0x98
   2ebf8:	add	r3, r3, r4, lsl #2
   2ebfc:	ldr	r3, [r3, #-120]	; 0xffffff88
   2ec00:	add	r6, r6, r3
   2ec04:	add	r5, r5, r3
   2ec08:	ldr	r3, [sp, #16]
   2ec0c:	add	r9, r9, r3
   2ec10:	ldr	r3, [sp, #20]
   2ec14:	cmp	r9, r3
   2ec18:	bge	1c04c <GetDataSlab+0x130>
   2ec1c:	ldr	r3, [sp, #196]	; 0xc4
   2ec20:	ldr	r2, [r3]
   2ec24:	ldr	r3, [sp]
   2ec28:	cmp	r2, #0
   2ec2c:	addne	r5, r5, r2
   2ec30:	addne	r6, r6, r2
   2ec34:	add	r0, r3, r9, lsl #1
   2ec38:	mov	r1, r5
   2ec3c:	ldr	ip, [sp, #16]
   2ec40:	sub	r3, r1, r5
   2ec44:	cmp	ip, r3
   2ec48:	bgt	2ebd4 <GetDataSlab+0x12cb8>
   2ec4c:	ldr	r3, [sp, #24]
   2ec50:	ldr	r8, [sp, #4]
   2ec54:	sub	r3, r3, r2
   2ec58:	ldr	r4, [sp, #12]
   2ec5c:	add	r6, r6, r3
   2ec60:	add	r5, r5, r3
   2ec64:	ldr	r3, [sp, #208]	; 0xd0
   2ec68:	cmp	r4, r3
   2ec6c:	bge	2ec08 <GetDataSlab+0x12cec>
   2ec70:	ldr	r3, [sl, r4, lsl #2]
   2ec74:	ldr	r2, [sp, #204]	; 0xcc
   2ec78:	add	r3, r3, #1
   2ec7c:	str	r3, [sl, r4, lsl #2]
   2ec80:	mov	r0, r3
   2ec84:	ldr	r1, [r2, r4, lsl #2]
   2ec88:	bl	3fd18 <__aeabi_idivmod>
   2ec8c:	subs	r3, r1, #0
   2ec90:	bne	2ebf4 <GetDataSlab+0x12cd8>
   2ec94:	ldr	r7, [r8, #4]
   2ec98:	str	r3, [sl, r4, lsl #2]
   2ec9c:	mov	r1, r7
   2eca0:	mov	r0, r6
   2eca4:	bl	3fd18 <__aeabi_idivmod>
   2eca8:	ldr	r2, [sp, #196]	; 0xc4
   2ecac:	ldr	r2, [r2, r4, lsl #2]
   2ecb0:	subs	r3, r1, #0
   2ecb4:	beq	2ebe0 <GetDataSlab+0x12cc4>
   2ecb8:	ldr	r1, [r8]
   2ecbc:	sub	r3, r7, r3
   2ecc0:	mla	r3, r2, r1, r3
   2ecc4:	add	r5, r5, r3
   2ecc8:	add	r6, r6, r3
   2eccc:	add	r4, r4, #1
   2ecd0:	add	r8, r8, #4
   2ecd4:	b	2ec64 <GetDataSlab+0x12d48>
   2ecd8:	ldr	r3, [sp, #24]
   2ecdc:	add	r2, r2, #1
   2ece0:	ldrsb	r3, [r1, r3]
   2ece4:	strh	r3, [ip], #2
   2ece8:	b	2eab0 <GetDataSlab+0x12b94>
   2ecec:	cmp	r2, #0
   2ecf0:	beq	2eb4c <GetDataSlab+0x12c30>
   2ecf4:	ldr	r3, [r8]
   2ecf8:	mul	r3, r3, r2
   2ecfc:	b	2eb44 <GetDataSlab+0x12c28>
   2ed00:	add	r3, sp, #152	; 0x98
   2ed04:	add	r3, r3, r4, lsl #2
   2ed08:	ldr	r3, [r3, #-120]	; 0xffffff88
   2ed0c:	add	r6, r6, r3
   2ed10:	add	r5, r5, r3
   2ed14:	ldr	r3, [sp, #16]
   2ed18:	add	r9, r9, r3
   2ed1c:	b	2ea80 <GetDataSlab+0x12b64>
   2ed20:	ldr	r3, [r9]
   2ed24:	ldr	ip, [sp, #4]
   2ed28:	str	r3, [sp, #12]
   2ed2c:	sub	r3, r3, #1
   2ed30:	str	r3, [sp, #32]
   2ed34:	ldr	r3, [fp]
   2ed38:	mov	lr, fp
   2ed3c:	str	r3, [sp, #24]
   2ed40:	str	r3, [sp, #112]	; 0x70
   2ed44:	ldr	r3, [sp, #204]	; 0xcc
   2ed48:	mov	r6, #0
   2ed4c:	mov	r2, #1
   2ed50:	ldr	r3, [r3]
   2ed54:	str	r3, [sp, #16]
   2ed58:	str	r3, [sp, #20]
   2ed5c:	ldr	r3, [sp, #208]	; 0xd0
   2ed60:	cmp	r2, r3
   2ed64:	blt	2ee8c <GetDataSlab+0x12f70>
   2ed68:	ldr	r3, [sp, #8]
   2ed6c:	add	r5, r3, r6
   2ed70:	ldr	r3, [sp, #12]
   2ed74:	cmp	r3, #1
   2ed78:	moveq	r9, #0
   2ed7c:	beq	2ef44 <GetDataSlab+0x13028>
   2ed80:	ldr	r2, [sp, #16]
   2ed84:	ldr	r3, [sp, #12]
   2ed88:	mov	r9, #0
   2ed8c:	mul	r3, r3, r2
   2ed90:	ldr	r2, [sp, #24]
   2ed94:	sub	r3, r2, r3
   2ed98:	str	r3, [sp, #8]
   2ed9c:	ldr	r3, [sp, #16]
   2eda0:	ldr	r2, [sp, #12]
   2eda4:	bic	r3, r3, r3, asr #31
   2eda8:	mul	fp, r2, r3
   2edac:	rsb	r3, r2, #0
   2edb0:	str	r3, [sp, #24]
   2edb4:	ldr	r3, [sp, #20]
   2edb8:	cmp	r9, r3
   2edbc:	bge	1c04c <GetDataSlab+0x130>
   2edc0:	ldr	r3, [sp, #196]	; 0xc4
   2edc4:	mov	r2, #0
   2edc8:	ldr	r0, [r3]
   2edcc:	ldr	r3, [sp]
   2edd0:	cmp	r0, #0
   2edd4:	addne	r5, r5, r0
   2edd8:	addne	r6, r6, r0
   2eddc:	mov	r1, r5
   2ede0:	add	ip, r3, r9, lsl #1
   2ede4:	ldr	r3, [sp, #12]
   2ede8:	add	r1, r1, r3
   2edec:	ldr	r3, [sp, #16]
   2edf0:	cmp	r2, r3
   2edf4:	blt	2f00c <GetDataSlab+0x130f0>
   2edf8:	ldr	r3, [sp, #8]
   2edfc:	ldr	r8, [sp, #4]
   2ee00:	sub	r2, r3, r0
   2ee04:	add	r3, fp, r6
   2ee08:	add	r6, r3, r2
   2ee0c:	add	r3, fp, r2
   2ee10:	add	r5, r5, r3
   2ee14:	mov	r4, #1
   2ee18:	ldr	r3, [sp, #208]	; 0xd0
   2ee1c:	cmp	r4, r3
   2ee20:	bge	2f048 <GetDataSlab+0x1312c>
   2ee24:	ldr	r3, [sl, r4, lsl #2]
   2ee28:	ldr	r2, [sp, #204]	; 0xcc
   2ee2c:	add	r3, r3, #1
   2ee30:	str	r3, [sl, r4, lsl #2]
   2ee34:	mov	r0, r3
   2ee38:	ldr	r1, [r2, r4, lsl #2]
   2ee3c:	bl	3fd18 <__aeabi_idivmod>
   2ee40:	subs	r3, r1, #0
   2ee44:	bne	2f034 <GetDataSlab+0x13118>
   2ee48:	ldr	r7, [r8, #4]
   2ee4c:	str	r3, [sl, r4, lsl #2]
   2ee50:	mov	r1, r7
   2ee54:	mov	r0, r6
   2ee58:	bl	3fd18 <__aeabi_idivmod>
   2ee5c:	ldr	r2, [sp, #196]	; 0xc4
   2ee60:	ldr	r2, [r2, r4, lsl #2]
   2ee64:	subs	r3, r1, #0
   2ee68:	beq	2f020 <GetDataSlab+0x13104>
   2ee6c:	ldr	r1, [r8]
   2ee70:	sub	r3, r7, r3
   2ee74:	mla	r3, r2, r1, r3
   2ee78:	add	r5, r5, r3
   2ee7c:	add	r6, r6, r3
   2ee80:	add	r4, r4, #1
   2ee84:	add	r8, r8, #4
   2ee88:	b	2ee18 <GetDataSlab+0x12efc>
   2ee8c:	ldr	r3, [r9, r2, lsl #2]
   2ee90:	mov	r5, ip
   2ee94:	sub	r3, r3, #1
   2ee98:	str	r3, [r4, r2, lsl #2]
   2ee9c:	ldr	r3, [lr], #4
   2eea0:	mov	r1, lr
   2eea4:	str	r3, [ip, #4]
   2eea8:	cmp	r1, fp
   2eeac:	bne	2eee0 <GetDataSlab+0x12fc4>
   2eeb0:	ldr	r3, [sp, #204]	; 0xcc
   2eeb4:	ldr	r1, [sp, #20]
   2eeb8:	add	ip, ip, #4
   2eebc:	ldr	r3, [r3, r2, lsl #2]
   2eec0:	mul	r3, r3, r1
   2eec4:	ldr	r1, [sp, #196]	; 0xc4
   2eec8:	str	r3, [sp, #20]
   2eecc:	ldr	r3, [r5]
   2eed0:	ldr	r1, [r1, r2, lsl #2]
   2eed4:	add	r2, r2, #1
   2eed8:	mla	r6, r1, r3, r6
   2eedc:	b	2ed5c <GetDataSlab+0x12e40>
   2eee0:	ldr	r7, [r4, r2, lsl #2]
   2eee4:	mov	r0, r1
   2eee8:	ldr	r3, [r1, #-4]!
   2eeec:	mul	r3, r3, r7
   2eef0:	ldr	r7, [ip, #4]
   2eef4:	str	r3, [r4, r2, lsl #2]
   2eef8:	ldr	r3, [r0]
   2eefc:	mul	r3, r3, r7
   2ef00:	str	r3, [ip, #4]
   2ef04:	b	2eea8 <GetDataSlab+0x12f8c>
   2ef08:	ldrb	r3, [r1], #1
   2ef0c:	strh	r3, [r0], #2
   2ef10:	b	2ef70 <GetDataSlab+0x13054>
   2ef14:	cmp	r2, #0
   2ef18:	beq	2f000 <GetDataSlab+0x130e4>
   2ef1c:	ldr	r3, [r8]
   2ef20:	mul	r3, r3, r2
   2ef24:	b	2eff8 <GetDataSlab+0x130dc>
   2ef28:	add	r3, sp, #152	; 0x98
   2ef2c:	add	r3, r3, r4, lsl #2
   2ef30:	ldr	r3, [r3, #-120]	; 0xffffff88
   2ef34:	add	r6, r6, r3
   2ef38:	add	r5, r5, r3
   2ef3c:	ldr	r3, [sp, #16]
   2ef40:	add	r9, r9, r3
   2ef44:	ldr	r3, [sp, #20]
   2ef48:	cmp	r9, r3
   2ef4c:	bge	1c04c <GetDataSlab+0x130>
   2ef50:	ldr	r3, [sp, #196]	; 0xc4
   2ef54:	ldr	r2, [r3]
   2ef58:	ldr	r3, [sp]
   2ef5c:	cmp	r2, #0
   2ef60:	addne	r5, r5, r2
   2ef64:	addne	r6, r6, r2
   2ef68:	add	r0, r3, r9, lsl #1
   2ef6c:	mov	r1, r5
   2ef70:	ldr	ip, [sp, #16]
   2ef74:	sub	r3, r1, r5
   2ef78:	cmp	ip, r3
   2ef7c:	bgt	2ef08 <GetDataSlab+0x12fec>
   2ef80:	ldr	r3, [sp, #24]
   2ef84:	ldr	r8, [sp, #4]
   2ef88:	sub	r3, r3, r2
   2ef8c:	ldr	r4, [sp, #12]
   2ef90:	add	r6, r6, r3
   2ef94:	add	r5, r5, r3
   2ef98:	ldr	r3, [sp, #208]	; 0xd0
   2ef9c:	cmp	r4, r3
   2efa0:	bge	2ef3c <GetDataSlab+0x13020>
   2efa4:	ldr	r3, [sl, r4, lsl #2]
   2efa8:	ldr	r2, [sp, #204]	; 0xcc
   2efac:	add	r3, r3, #1
   2efb0:	str	r3, [sl, r4, lsl #2]
   2efb4:	mov	r0, r3
   2efb8:	ldr	r1, [r2, r4, lsl #2]
   2efbc:	bl	3fd18 <__aeabi_idivmod>
   2efc0:	subs	r3, r1, #0
   2efc4:	bne	2ef28 <GetDataSlab+0x1300c>
   2efc8:	ldr	r7, [r8, #4]
   2efcc:	str	r3, [sl, r4, lsl #2]
   2efd0:	mov	r1, r7
   2efd4:	mov	r0, r6
   2efd8:	bl	3fd18 <__aeabi_idivmod>
   2efdc:	ldr	r2, [sp, #196]	; 0xc4
   2efe0:	ldr	r2, [r2, r4, lsl #2]
   2efe4:	subs	r3, r1, #0
   2efe8:	beq	2ef14 <GetDataSlab+0x12ff8>
   2efec:	ldr	r1, [r8]
   2eff0:	sub	r3, r7, r3
   2eff4:	mla	r3, r2, r1, r3
   2eff8:	add	r5, r5, r3
   2effc:	add	r6, r6, r3
   2f000:	add	r4, r4, #1
   2f004:	add	r8, r8, #4
   2f008:	b	2ef98 <GetDataSlab+0x1307c>
   2f00c:	ldr	r3, [sp, #24]
   2f010:	add	r2, r2, #1
   2f014:	ldrb	r3, [r1, r3]
   2f018:	strh	r3, [ip], #2
   2f01c:	b	2ede4 <GetDataSlab+0x12ec8>
   2f020:	cmp	r2, #0
   2f024:	beq	2ee80 <GetDataSlab+0x12f64>
   2f028:	ldr	r3, [r8]
   2f02c:	mul	r3, r3, r2
   2f030:	b	2ee78 <GetDataSlab+0x12f5c>
   2f034:	add	r3, sp, #152	; 0x98
   2f038:	add	r3, r3, r4, lsl #2
   2f03c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2f040:	add	r6, r6, r3
   2f044:	add	r5, r5, r3
   2f048:	ldr	r3, [sp, #16]
   2f04c:	add	r9, r9, r3
   2f050:	b	2edb4 <GetDataSlab+0x12e98>
   2f054:	cmp	r5, #12
   2f058:	bne	2f39c <GetDataSlab+0x13480>
   2f05c:	ldr	r3, [r9]
   2f060:	ldr	ip, [sp, #4]
   2f064:	str	r3, [sp, #16]
   2f068:	sub	r3, r3, #1
   2f06c:	str	r3, [sp, #32]
   2f070:	ldr	r3, [fp]
   2f074:	mov	lr, fp
   2f078:	str	r3, [sp, #24]
   2f07c:	str	r3, [sp, #112]	; 0x70
   2f080:	ldr	r3, [sp, #204]	; 0xcc
   2f084:	mov	r6, #0
   2f088:	mov	r2, #1
   2f08c:	ldr	r3, [r3]
   2f090:	str	r3, [sp, #12]
   2f094:	str	r3, [sp, #20]
   2f098:	ldr	r3, [sp, #208]	; 0xd0
   2f09c:	cmp	r2, r3
   2f0a0:	blt	2f1d4 <GetDataSlab+0x132b8>
   2f0a4:	ldr	r3, [sp, #8]
   2f0a8:	add	r5, r3, r6, lsl #3
   2f0ac:	ldr	r3, [sp, #16]
   2f0b0:	cmp	r3, #1
   2f0b4:	moveq	r9, #0
   2f0b8:	beq	2f290 <GetDataSlab+0x13374>
   2f0bc:	ldr	r3, [sp, #16]
   2f0c0:	ldr	r2, [sp, #12]
   2f0c4:	mov	r9, #0
   2f0c8:	mul	r3, r3, r2
   2f0cc:	ldr	r2, [sp, #24]
   2f0d0:	sub	r3, r2, r3
   2f0d4:	str	r3, [sp, #8]
   2f0d8:	ldr	r3, [sp, #16]
   2f0dc:	ldr	r2, [sp, #16]
   2f0e0:	lsl	fp, r3, #3
   2f0e4:	ldr	r3, [sp, #12]
   2f0e8:	bic	r3, r3, r3, asr #31
   2f0ec:	mul	r2, r2, r3
   2f0f0:	mul	r3, fp, r3
   2f0f4:	str	r2, [sp, #24]
   2f0f8:	str	r3, [sp, #16]
   2f0fc:	ldr	r3, [sp, #20]
   2f100:	cmp	r9, r3
   2f104:	bge	1c04c <GetDataSlab+0x130>
   2f108:	ldr	r3, [sp, #196]	; 0xc4
   2f10c:	mov	r2, #0
   2f110:	ldr	r1, [r3]
   2f114:	ldr	r3, [sp]
   2f118:	cmp	r1, #0
   2f11c:	addne	r5, r5, r1, lsl #3
   2f120:	addne	r6, r6, r1
   2f124:	add	ip, r3, r9, lsl #1
   2f128:	mov	r0, r5
   2f12c:	ldr	r3, [sp, #12]
   2f130:	cmp	r2, r3
   2f134:	blt	2f358 <GetDataSlab+0x1343c>
   2f138:	ldr	r3, [sp, #8]
   2f13c:	ldr	r8, [sp, #4]
   2f140:	sub	r2, r3, r1
   2f144:	ldr	r3, [sp, #24]
   2f148:	mov	r4, #1
   2f14c:	add	r3, r3, r6
   2f150:	add	r6, r3, r2
   2f154:	ldr	r3, [sp, #16]
   2f158:	add	r3, r3, r2, lsl #3
   2f15c:	add	r5, r5, r3
   2f160:	ldr	r3, [sp, #208]	; 0xd0
   2f164:	cmp	r4, r3
   2f168:	bge	2f390 <GetDataSlab+0x13474>
   2f16c:	ldr	r3, [sl, r4, lsl #2]
   2f170:	ldr	r2, [sp, #204]	; 0xcc
   2f174:	add	r3, r3, #1
   2f178:	str	r3, [sl, r4, lsl #2]
   2f17c:	mov	r0, r3
   2f180:	ldr	r1, [r2, r4, lsl #2]
   2f184:	bl	3fd18 <__aeabi_idivmod>
   2f188:	subs	r3, r1, #0
   2f18c:	bne	2f37c <GetDataSlab+0x13460>
   2f190:	ldr	r7, [r8, #4]
   2f194:	str	r3, [sl, r4, lsl #2]
   2f198:	mov	r1, r7
   2f19c:	mov	r0, r6
   2f1a0:	bl	3fd18 <__aeabi_idivmod>
   2f1a4:	ldr	r2, [sp, #196]	; 0xc4
   2f1a8:	ldr	r2, [r2, r4, lsl #2]
   2f1ac:	subs	r3, r1, #0
   2f1b0:	beq	2f368 <GetDataSlab+0x1344c>
   2f1b4:	ldr	r1, [r8]
   2f1b8:	sub	r3, r7, r3
   2f1bc:	mla	r3, r2, r1, r3
   2f1c0:	add	r5, r5, r3, lsl #3
   2f1c4:	add	r6, r6, r3
   2f1c8:	add	r4, r4, #1
   2f1cc:	add	r8, r8, #4
   2f1d0:	b	2f160 <GetDataSlab+0x13244>
   2f1d4:	ldr	r3, [r9, r2, lsl #2]
   2f1d8:	mov	r5, ip
   2f1dc:	sub	r3, r3, #1
   2f1e0:	str	r3, [r4, r2, lsl #2]
   2f1e4:	ldr	r3, [lr], #4
   2f1e8:	mov	r1, lr
   2f1ec:	str	r3, [ip, #4]
   2f1f0:	cmp	r1, fp
   2f1f4:	bne	2f228 <GetDataSlab+0x1330c>
   2f1f8:	ldr	r3, [sp, #204]	; 0xcc
   2f1fc:	ldr	r1, [sp, #20]
   2f200:	add	ip, ip, #4
   2f204:	ldr	r3, [r3, r2, lsl #2]
   2f208:	mul	r3, r3, r1
   2f20c:	ldr	r1, [sp, #196]	; 0xc4
   2f210:	str	r3, [sp, #20]
   2f214:	ldr	r3, [r5]
   2f218:	ldr	r1, [r1, r2, lsl #2]
   2f21c:	add	r2, r2, #1
   2f220:	mla	r6, r1, r3, r6
   2f224:	b	2f098 <GetDataSlab+0x1317c>
   2f228:	ldr	r7, [r4, r2, lsl #2]
   2f22c:	mov	r0, r1
   2f230:	ldr	r3, [r1, #-4]!
   2f234:	mul	r3, r3, r7
   2f238:	ldr	r7, [ip, #4]
   2f23c:	str	r3, [r4, r2, lsl #2]
   2f240:	ldr	r3, [r0]
   2f244:	mul	r3, r3, r7
   2f248:	str	r3, [ip, #4]
   2f24c:	b	2f1f0 <GetDataSlab+0x132d4>
   2f250:	ldr	r3, [ip, #8]!
   2f254:	add	r1, r1, #1
   2f258:	strh	r3, [r0], #2
   2f25c:	b	2f2c0 <GetDataSlab+0x133a4>
   2f260:	cmp	r2, #0
   2f264:	beq	2f34c <GetDataSlab+0x13430>
   2f268:	ldr	r3, [r8]
   2f26c:	mul	r3, r3, r2
   2f270:	b	2f344 <GetDataSlab+0x13428>
   2f274:	add	r3, sp, #152	; 0x98
   2f278:	add	r3, r3, r4, lsl #2
   2f27c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2f280:	add	r6, r6, r3
   2f284:	add	r5, r5, r3, lsl #3
   2f288:	ldr	r3, [sp, #12]
   2f28c:	add	r9, r9, r3
   2f290:	ldr	r3, [sp, #20]
   2f294:	cmp	r9, r3
   2f298:	bge	1c04c <GetDataSlab+0x130>
   2f29c:	ldr	r3, [sp, #196]	; 0xc4
   2f2a0:	mov	r1, #0
   2f2a4:	ldr	r2, [r3]
   2f2a8:	ldr	r3, [sp]
   2f2ac:	cmp	r2, #0
   2f2b0:	addne	r5, r5, r2, lsl #3
   2f2b4:	addne	r6, r6, r2
   2f2b8:	sub	ip, r5, #8
   2f2bc:	add	r0, r3, r9, lsl #1
   2f2c0:	ldr	r3, [sp, #12]
   2f2c4:	cmp	r1, r3
   2f2c8:	blt	2f250 <GetDataSlab+0x13334>
   2f2cc:	ldr	r3, [sp, #24]
   2f2d0:	ldr	r8, [sp, #4]
   2f2d4:	sub	r3, r3, r2
   2f2d8:	ldr	r4, [sp, #16]
   2f2dc:	add	r6, r6, r3
   2f2e0:	add	r5, r5, r3, lsl #3
   2f2e4:	ldr	r3, [sp, #208]	; 0xd0
   2f2e8:	cmp	r4, r3
   2f2ec:	bge	2f288 <GetDataSlab+0x1336c>
   2f2f0:	ldr	r3, [sl, r4, lsl #2]
   2f2f4:	ldr	r2, [sp, #204]	; 0xcc
   2f2f8:	add	r3, r3, #1
   2f2fc:	str	r3, [sl, r4, lsl #2]
   2f300:	mov	r0, r3
   2f304:	ldr	r1, [r2, r4, lsl #2]
   2f308:	bl	3fd18 <__aeabi_idivmod>
   2f30c:	subs	r3, r1, #0
   2f310:	bne	2f274 <GetDataSlab+0x13358>
   2f314:	ldr	r7, [r8, #4]
   2f318:	str	r3, [sl, r4, lsl #2]
   2f31c:	mov	r1, r7
   2f320:	mov	r0, r6
   2f324:	bl	3fd18 <__aeabi_idivmod>
   2f328:	ldr	r2, [sp, #196]	; 0xc4
   2f32c:	ldr	r2, [r2, r4, lsl #2]
   2f330:	subs	r3, r1, #0
   2f334:	beq	2f260 <GetDataSlab+0x13344>
   2f338:	ldr	r1, [r8]
   2f33c:	sub	r3, r7, r3
   2f340:	mla	r3, r2, r1, r3
   2f344:	add	r5, r5, r3, lsl #3
   2f348:	add	r6, r6, r3
   2f34c:	add	r4, r4, #1
   2f350:	add	r8, r8, #4
   2f354:	b	2f2e4 <GetDataSlab+0x133c8>
   2f358:	ldr	r3, [r0], fp
   2f35c:	add	r2, r2, #1
   2f360:	strh	r3, [ip], #2
   2f364:	b	2f12c <GetDataSlab+0x13210>
   2f368:	cmp	r2, #0
   2f36c:	beq	2f1c8 <GetDataSlab+0x132ac>
   2f370:	ldr	r3, [r8]
   2f374:	mul	r3, r3, r2
   2f378:	b	2f1c0 <GetDataSlab+0x132a4>
   2f37c:	add	r3, sp, #152	; 0x98
   2f380:	add	r3, r3, r4, lsl #2
   2f384:	ldr	r3, [r3, #-120]	; 0xffffff88
   2f388:	add	r6, r6, r3
   2f38c:	add	r5, r5, r3, lsl #3
   2f390:	ldr	r3, [sp, #12]
   2f394:	add	r9, r9, r3
   2f398:	b	2f0fc <GetDataSlab+0x131e0>
   2f39c:	cmp	r5, #13
   2f3a0:	bne	337fc <GetDataSlab+0x178e0>
   2f3a4:	ldr	r3, [r9]
   2f3a8:	ldr	ip, [sp, #4]
   2f3ac:	str	r3, [sp, #16]
   2f3b0:	sub	r3, r3, #1
   2f3b4:	str	r3, [sp, #32]
   2f3b8:	ldr	r3, [fp]
   2f3bc:	mov	lr, fp
   2f3c0:	str	r3, [sp, #24]
   2f3c4:	str	r3, [sp, #112]	; 0x70
   2f3c8:	ldr	r3, [sp, #204]	; 0xcc
   2f3cc:	mov	r6, #0
   2f3d0:	mov	r2, #1
   2f3d4:	ldr	r3, [r3]
   2f3d8:	str	r3, [sp, #12]
   2f3dc:	str	r3, [sp, #20]
   2f3e0:	ldr	r3, [sp, #208]	; 0xd0
   2f3e4:	cmp	r2, r3
   2f3e8:	blt	2f51c <GetDataSlab+0x13600>
   2f3ec:	ldr	r3, [sp, #8]
   2f3f0:	add	r5, r3, r6, lsl #3
   2f3f4:	ldr	r3, [sp, #16]
   2f3f8:	cmp	r3, #1
   2f3fc:	moveq	r9, #0
   2f400:	beq	2f5d8 <GetDataSlab+0x136bc>
   2f404:	ldr	r3, [sp, #16]
   2f408:	ldr	r2, [sp, #12]
   2f40c:	mov	r9, #0
   2f410:	mul	r3, r3, r2
   2f414:	ldr	r2, [sp, #24]
   2f418:	sub	r3, r2, r3
   2f41c:	str	r3, [sp, #24]
   2f420:	ldr	r3, [sp, #16]
   2f424:	ldr	r2, [sp, #16]
   2f428:	lsl	fp, r3, #3
   2f42c:	ldr	r3, [sp, #12]
   2f430:	bic	r3, r3, r3, asr #31
   2f434:	mul	r2, r3, r2
   2f438:	mul	r3, fp, r3
   2f43c:	str	r2, [sp, #8]
   2f440:	str	r3, [sp, #16]
   2f444:	ldr	r3, [sp, #20]
   2f448:	cmp	r9, r3
   2f44c:	bge	1c04c <GetDataSlab+0x130>
   2f450:	ldr	r3, [sp, #196]	; 0xc4
   2f454:	mov	r2, #0
   2f458:	ldr	r1, [r3]
   2f45c:	ldr	r3, [sp]
   2f460:	cmp	r1, #0
   2f464:	addne	r5, r5, r1, lsl #3
   2f468:	addne	r6, r6, r1
   2f46c:	add	ip, r3, r9, lsl #1
   2f470:	mov	r0, r5
   2f474:	ldr	r3, [sp, #12]
   2f478:	cmp	r2, r3
   2f47c:	blt	2f6a0 <GetDataSlab+0x13784>
   2f480:	ldr	r3, [sp, #24]
   2f484:	ldr	r8, [sp, #4]
   2f488:	sub	r2, r3, r1
   2f48c:	ldr	r3, [sp, #8]
   2f490:	mov	r4, #1
   2f494:	add	r3, r3, r6
   2f498:	add	r6, r3, r2
   2f49c:	ldr	r3, [sp, #16]
   2f4a0:	add	r3, r3, r2, lsl #3
   2f4a4:	add	r5, r5, r3
   2f4a8:	ldr	r3, [sp, #208]	; 0xd0
   2f4ac:	cmp	r4, r3
   2f4b0:	bge	2f6d8 <GetDataSlab+0x137bc>
   2f4b4:	ldr	r3, [sl, r4, lsl #2]
   2f4b8:	ldr	r2, [sp, #204]	; 0xcc
   2f4bc:	add	r3, r3, #1
   2f4c0:	str	r3, [sl, r4, lsl #2]
   2f4c4:	mov	r0, r3
   2f4c8:	ldr	r1, [r2, r4, lsl #2]
   2f4cc:	bl	3fd18 <__aeabi_idivmod>
   2f4d0:	subs	r3, r1, #0
   2f4d4:	bne	2f6c4 <GetDataSlab+0x137a8>
   2f4d8:	ldr	r7, [r8, #4]
   2f4dc:	str	r3, [sl, r4, lsl #2]
   2f4e0:	mov	r1, r7
   2f4e4:	mov	r0, r6
   2f4e8:	bl	3fd18 <__aeabi_idivmod>
   2f4ec:	ldr	r2, [sp, #196]	; 0xc4
   2f4f0:	ldr	r2, [r2, r4, lsl #2]
   2f4f4:	subs	r3, r1, #0
   2f4f8:	beq	2f6b0 <GetDataSlab+0x13794>
   2f4fc:	ldr	r1, [r8]
   2f500:	sub	r3, r7, r3
   2f504:	mla	r3, r2, r1, r3
   2f508:	add	r5, r5, r3, lsl #3
   2f50c:	add	r6, r6, r3
   2f510:	add	r4, r4, #1
   2f514:	add	r8, r8, #4
   2f518:	b	2f4a8 <GetDataSlab+0x1358c>
   2f51c:	ldr	r3, [r9, r2, lsl #2]
   2f520:	mov	r5, ip
   2f524:	sub	r3, r3, #1
   2f528:	str	r3, [r4, r2, lsl #2]
   2f52c:	ldr	r3, [lr], #4
   2f530:	mov	r1, lr
   2f534:	str	r3, [ip, #4]
   2f538:	cmp	r1, fp
   2f53c:	bne	2f570 <GetDataSlab+0x13654>
   2f540:	ldr	r3, [sp, #204]	; 0xcc
   2f544:	ldr	r1, [sp, #20]
   2f548:	add	ip, ip, #4
   2f54c:	ldr	r3, [r3, r2, lsl #2]
   2f550:	mul	r3, r3, r1
   2f554:	ldr	r1, [sp, #196]	; 0xc4
   2f558:	str	r3, [sp, #20]
   2f55c:	ldr	r3, [r5]
   2f560:	ldr	r1, [r1, r2, lsl #2]
   2f564:	add	r2, r2, #1
   2f568:	mla	r6, r1, r3, r6
   2f56c:	b	2f3e0 <GetDataSlab+0x134c4>
   2f570:	ldr	r7, [r4, r2, lsl #2]
   2f574:	mov	r0, r1
   2f578:	ldr	r3, [r1, #-4]!
   2f57c:	mul	r3, r3, r7
   2f580:	ldr	r7, [ip, #4]
   2f584:	str	r3, [r4, r2, lsl #2]
   2f588:	ldr	r3, [r0]
   2f58c:	mul	r3, r3, r7
   2f590:	str	r3, [ip, #4]
   2f594:	b	2f538 <GetDataSlab+0x1361c>
   2f598:	ldr	r3, [ip, #8]!
   2f59c:	add	r1, r1, #1
   2f5a0:	strh	r3, [r0], #2
   2f5a4:	b	2f608 <GetDataSlab+0x136ec>
   2f5a8:	cmp	r2, #0
   2f5ac:	beq	2f694 <GetDataSlab+0x13778>
   2f5b0:	ldr	r3, [r8]
   2f5b4:	mul	r3, r3, r2
   2f5b8:	b	2f68c <GetDataSlab+0x13770>
   2f5bc:	add	r3, sp, #152	; 0x98
   2f5c0:	add	r3, r3, r4, lsl #2
   2f5c4:	ldr	r3, [r3, #-120]	; 0xffffff88
   2f5c8:	add	r6, r6, r3
   2f5cc:	add	r5, r5, r3, lsl #3
   2f5d0:	ldr	r3, [sp, #12]
   2f5d4:	add	r9, r9, r3
   2f5d8:	ldr	r3, [sp, #20]
   2f5dc:	cmp	r9, r3
   2f5e0:	bge	1c04c <GetDataSlab+0x130>
   2f5e4:	ldr	r3, [sp, #196]	; 0xc4
   2f5e8:	mov	r1, #0
   2f5ec:	ldr	r2, [r3]
   2f5f0:	ldr	r3, [sp]
   2f5f4:	cmp	r2, #0
   2f5f8:	addne	r5, r5, r2, lsl #3
   2f5fc:	addne	r6, r6, r2
   2f600:	sub	ip, r5, #8
   2f604:	add	r0, r3, r9, lsl #1
   2f608:	ldr	r3, [sp, #12]
   2f60c:	cmp	r1, r3
   2f610:	blt	2f598 <GetDataSlab+0x1367c>
   2f614:	ldr	r3, [sp, #24]
   2f618:	ldr	r8, [sp, #4]
   2f61c:	sub	r3, r3, r2
   2f620:	ldr	r4, [sp, #16]
   2f624:	add	r6, r6, r3
   2f628:	add	r5, r5, r3, lsl #3
   2f62c:	ldr	r3, [sp, #208]	; 0xd0
   2f630:	cmp	r4, r3
   2f634:	bge	2f5d0 <GetDataSlab+0x136b4>
   2f638:	ldr	r3, [sl, r4, lsl #2]
   2f63c:	ldr	r2, [sp, #204]	; 0xcc
   2f640:	add	r3, r3, #1
   2f644:	str	r3, [sl, r4, lsl #2]
   2f648:	mov	r0, r3
   2f64c:	ldr	r1, [r2, r4, lsl #2]
   2f650:	bl	3fd18 <__aeabi_idivmod>
   2f654:	subs	r3, r1, #0
   2f658:	bne	2f5bc <GetDataSlab+0x136a0>
   2f65c:	ldr	r7, [r8, #4]
   2f660:	str	r3, [sl, r4, lsl #2]
   2f664:	mov	r1, r7
   2f668:	mov	r0, r6
   2f66c:	bl	3fd18 <__aeabi_idivmod>
   2f670:	ldr	r2, [sp, #196]	; 0xc4
   2f674:	ldr	r2, [r2, r4, lsl #2]
   2f678:	subs	r3, r1, #0
   2f67c:	beq	2f5a8 <GetDataSlab+0x1368c>
   2f680:	ldr	r1, [r8]
   2f684:	sub	r3, r7, r3
   2f688:	mla	r3, r2, r1, r3
   2f68c:	add	r5, r5, r3, lsl #3
   2f690:	add	r6, r6, r3
   2f694:	add	r4, r4, #1
   2f698:	add	r8, r8, #4
   2f69c:	b	2f62c <GetDataSlab+0x13710>
   2f6a0:	ldr	r3, [r0], fp
   2f6a4:	add	r2, r2, #1
   2f6a8:	strh	r3, [ip], #2
   2f6ac:	b	2f474 <GetDataSlab+0x13558>
   2f6b0:	cmp	r2, #0
   2f6b4:	beq	2f510 <GetDataSlab+0x135f4>
   2f6b8:	ldr	r3, [r8]
   2f6bc:	mul	r3, r3, r2
   2f6c0:	b	2f508 <GetDataSlab+0x135ec>
   2f6c4:	add	r3, sp, #152	; 0x98
   2f6c8:	add	r3, r3, r4, lsl #2
   2f6cc:	ldr	r3, [r3, #-120]	; 0xffffff88
   2f6d0:	add	r6, r6, r3
   2f6d4:	add	r5, r5, r3, lsl #3
   2f6d8:	ldr	r3, [sp, #12]
   2f6dc:	add	r9, r9, r3
   2f6e0:	b	2f444 <GetDataSlab+0x13528>
   2f6e4:	sub	r3, r5, #1
   2f6e8:	cmp	r3, #8
   2f6ec:	addls	pc, pc, r3, lsl #2
   2f6f0:	b	310f0 <GetDataSlab+0x151d4>
   2f6f4:	b	30a88 <GetDataSlab+0x14b6c>
   2f6f8:	b	30dbc <GetDataSlab+0x14ea0>
   2f6fc:	b	30418 <GetDataSlab+0x144fc>
   2f700:	b	30750 <GetDataSlab+0x14834>
   2f704:	b	2fda8 <GetDataSlab+0x13e8c>
   2f708:	b	300e0 <GetDataSlab+0x141c4>
   2f70c:	b	2fa60 <GetDataSlab+0x13b44>
   2f710:	b	310f0 <GetDataSlab+0x151d4>
   2f714:	b	2f718 <GetDataSlab+0x137fc>
   2f718:	ldr	r3, [r9]
   2f71c:	ldr	ip, [sp, #4]
   2f720:	str	r3, [sp, #16]
   2f724:	sub	r3, r3, #1
   2f728:	str	r3, [sp, #32]
   2f72c:	ldr	r3, [fp]
   2f730:	mov	lr, fp
   2f734:	str	r3, [sp, #112]	; 0x70
   2f738:	ldr	r3, [sp, #204]	; 0xcc
   2f73c:	mov	r6, #0
   2f740:	mov	r2, #1
   2f744:	ldr	r3, [r3]
   2f748:	str	r3, [sp, #12]
   2f74c:	ldr	r3, [sp, #208]	; 0xd0
   2f750:	cmp	r2, r3
   2f754:	blt	2f868 <GetDataSlab+0x1394c>
   2f758:	ldr	r3, [sp, #8]
   2f75c:	add	r4, r3, r6, lsl #3
   2f760:	ldr	r3, [sp, #16]
   2f764:	cmp	r3, #1
   2f768:	movne	r3, #0
   2f76c:	moveq	r9, #0
   2f770:	beq	2f928 <GetDataSlab+0x13a0c>
   2f774:	str	r3, [sp, #8]
   2f778:	ldr	r3, [sp, #8]
   2f77c:	ldr	r2, [sp, #12]
   2f780:	cmp	r3, r2
   2f784:	bge	1c04c <GetDataSlab+0x130>
   2f788:	ldr	r3, [sp, #196]	; 0xc4
   2f78c:	ldr	r2, [sp, #8]
   2f790:	ldr	r3, [r3]
   2f794:	cmp	r3, #0
   2f798:	addne	r4, r4, r3, lsl #3
   2f79c:	addne	r6, r6, r3
   2f7a0:	ldr	r3, [sp]
   2f7a4:	add	r2, r3, r2
   2f7a8:	mov	r1, r2
   2f7ac:	ldr	r3, [sp, #204]	; 0xcc
   2f7b0:	ldr	r3, [r3]
   2f7b4:	str	r3, [sp, #16]
   2f7b8:	ldr	r0, [sp, #16]
   2f7bc:	sub	r3, r2, r1
   2f7c0:	cmp	r0, r3
   2f7c4:	bgt	2fa08 <GetDataSlab+0x13aec>
   2f7c8:	ldr	r3, [r9]
   2f7cc:	ldr	r2, [fp]
   2f7d0:	ldr	r8, [sp, #4]
   2f7d4:	mul	r3, r3, r0
   2f7d8:	mov	r5, #1
   2f7dc:	sub	r3, r2, r3
   2f7e0:	ldr	r2, [sp, #196]	; 0xc4
   2f7e4:	ldr	r2, [r2]
   2f7e8:	sub	r3, r3, r2
   2f7ec:	add	r6, r6, r3
   2f7f0:	add	r4, r4, r3, lsl #3
   2f7f4:	ldr	r3, [sp, #208]	; 0xd0
   2f7f8:	cmp	r5, r3
   2f7fc:	bge	2fa50 <GetDataSlab+0x13b34>
   2f800:	ldr	r3, [sl, r5, lsl #2]
   2f804:	ldr	r2, [sp, #204]	; 0xcc
   2f808:	add	r3, r3, #1
   2f80c:	str	r3, [sl, r5, lsl #2]
   2f810:	mov	r0, r3
   2f814:	ldr	r1, [r2, r5, lsl #2]
   2f818:	bl	3fd18 <__aeabi_idivmod>
   2f81c:	subs	r3, r1, #0
   2f820:	bne	2fa3c <GetDataSlab+0x13b20>
   2f824:	ldr	r7, [r8, #4]
   2f828:	str	r3, [sl, r5, lsl #2]
   2f82c:	mov	r1, r7
   2f830:	mov	r0, r6
   2f834:	bl	3fd18 <__aeabi_idivmod>
   2f838:	ldr	r2, [sp, #196]	; 0xc4
   2f83c:	ldr	r2, [r2, r5, lsl #2]
   2f840:	subs	r3, r1, #0
   2f844:	beq	2fa28 <GetDataSlab+0x13b0c>
   2f848:	ldr	r1, [r8]
   2f84c:	sub	r3, r7, r3
   2f850:	mla	r3, r2, r1, r3
   2f854:	add	r4, r4, r3, lsl #3
   2f858:	add	r6, r6, r3
   2f85c:	add	r5, r5, #1
   2f860:	add	r8, r8, #4
   2f864:	b	2f7f4 <GetDataSlab+0x138d8>
   2f868:	ldr	r3, [r9, r2, lsl #2]
   2f86c:	mov	r5, ip
   2f870:	sub	r3, r3, #1
   2f874:	str	r3, [r4, r2, lsl #2]
   2f878:	ldr	r3, [lr], #4
   2f87c:	mov	r1, lr
   2f880:	str	r3, [ip, #4]
   2f884:	cmp	fp, r1
   2f888:	bne	2f8bc <GetDataSlab+0x139a0>
   2f88c:	ldr	r3, [sp, #204]	; 0xcc
   2f890:	ldr	r1, [sp, #12]
   2f894:	add	ip, ip, #4
   2f898:	ldr	r3, [r3, r2, lsl #2]
   2f89c:	mul	r3, r3, r1
   2f8a0:	ldr	r1, [sp, #196]	; 0xc4
   2f8a4:	str	r3, [sp, #12]
   2f8a8:	ldr	r3, [r5]
   2f8ac:	ldr	r1, [r1, r2, lsl #2]
   2f8b0:	add	r2, r2, #1
   2f8b4:	mla	r6, r1, r3, r6
   2f8b8:	b	2f74c <GetDataSlab+0x13830>
   2f8bc:	ldr	r7, [r4, r2, lsl #2]
   2f8c0:	mov	r0, r1
   2f8c4:	ldr	r3, [r1, #-4]!
   2f8c8:	mul	r3, r3, r7
   2f8cc:	ldr	r7, [ip, #4]
   2f8d0:	str	r3, [r4, r2, lsl #2]
   2f8d4:	ldr	r3, [r0]
   2f8d8:	mul	r3, r3, r7
   2f8dc:	str	r3, [ip, #4]
   2f8e0:	b	2f884 <GetDataSlab+0x13968>
   2f8e4:	vldmia	r1!, {d7}
   2f8e8:	vcvt.s32.f64	s15, d7
   2f8ec:	vmov	r3, s15
   2f8f0:	strb	r3, [r2], #1
   2f8f4:	b	2f958 <GetDataSlab+0x13a3c>
   2f8f8:	cmp	r2, #0
   2f8fc:	beq	2f9fc <GetDataSlab+0x13ae0>
   2f900:	ldr	r3, [r8]
   2f904:	mul	r3, r3, r2
   2f908:	b	2f9f4 <GetDataSlab+0x13ad8>
   2f90c:	add	r3, sp, #152	; 0x98
   2f910:	add	r3, r3, r5, lsl #2
   2f914:	ldr	r3, [r3, #-120]	; 0xffffff88
   2f918:	add	r6, r6, r3
   2f91c:	add	r4, r4, r3, lsl #3
   2f920:	ldr	r3, [sp, #8]
   2f924:	add	r9, r9, r3
   2f928:	ldr	r3, [sp, #12]
   2f92c:	cmp	r9, r3
   2f930:	bge	1c04c <GetDataSlab+0x130>
   2f934:	ldr	r3, [sp, #196]	; 0xc4
   2f938:	ldr	r3, [r3]
   2f93c:	cmp	r3, #0
   2f940:	addne	r4, r4, r3, lsl #3
   2f944:	addne	r6, r6, r3
   2f948:	ldr	r3, [sp]
   2f94c:	mov	r1, r4
   2f950:	add	r2, r3, r9
   2f954:	mov	r0, r2
   2f958:	ldr	r3, [sp, #204]	; 0xcc
   2f95c:	ldr	r3, [r3]
   2f960:	str	r3, [sp, #8]
   2f964:	ldr	ip, [sp, #8]
   2f968:	sub	r3, r2, r0
   2f96c:	cmp	ip, r3
   2f970:	bgt	2f8e4 <GetDataSlab+0x139c8>
   2f974:	ldr	r3, [sp, #196]	; 0xc4
   2f978:	ldr	r2, [fp]
   2f97c:	ldr	r8, [sp, #4]
   2f980:	ldr	r3, [r3]
   2f984:	ldr	r5, [sp, #16]
   2f988:	sub	r3, r2, r3
   2f98c:	add	r6, r6, r3
   2f990:	add	r4, r4, r3, lsl #3
   2f994:	ldr	r3, [sp, #208]	; 0xd0
   2f998:	cmp	r5, r3
   2f99c:	bge	2f920 <GetDataSlab+0x13a04>
   2f9a0:	ldr	r3, [sl, r5, lsl #2]
   2f9a4:	ldr	r2, [sp, #204]	; 0xcc
   2f9a8:	add	r3, r3, #1
   2f9ac:	str	r3, [sl, r5, lsl #2]
   2f9b0:	mov	r0, r3
   2f9b4:	ldr	r1, [r2, r5, lsl #2]
   2f9b8:	bl	3fd18 <__aeabi_idivmod>
   2f9bc:	subs	r3, r1, #0
   2f9c0:	bne	2f90c <GetDataSlab+0x139f0>
   2f9c4:	ldr	r7, [r8, #4]
   2f9c8:	str	r3, [sl, r5, lsl #2]
   2f9cc:	mov	r1, r7
   2f9d0:	mov	r0, r6
   2f9d4:	bl	3fd18 <__aeabi_idivmod>
   2f9d8:	ldr	r2, [sp, #196]	; 0xc4
   2f9dc:	ldr	r2, [r2, r5, lsl #2]
   2f9e0:	subs	r3, r1, #0
   2f9e4:	beq	2f8f8 <GetDataSlab+0x139dc>
   2f9e8:	ldr	r1, [r8]
   2f9ec:	sub	r3, r7, r3
   2f9f0:	mla	r3, r2, r1, r3
   2f9f4:	add	r4, r4, r3, lsl #3
   2f9f8:	add	r6, r6, r3
   2f9fc:	add	r5, r5, #1
   2fa00:	add	r8, r8, #4
   2fa04:	b	2f994 <GetDataSlab+0x13a78>
   2fa08:	vldr	d7, [r4]
   2fa0c:	vcvt.s32.f64	s15, d7
   2fa10:	vmov	r3, s15
   2fa14:	strb	r3, [r2], #1
   2fa18:	ldr	r3, [r9]
   2fa1c:	add	r6, r6, r3
   2fa20:	add	r4, r4, r3, lsl #3
   2fa24:	b	2f7ac <GetDataSlab+0x13890>
   2fa28:	cmp	r2, #0
   2fa2c:	beq	2f85c <GetDataSlab+0x13940>
   2fa30:	ldr	r3, [r8]
   2fa34:	mul	r3, r3, r2
   2fa38:	b	2f854 <GetDataSlab+0x13938>
   2fa3c:	add	r3, sp, #152	; 0x98
   2fa40:	add	r3, r3, r5, lsl #2
   2fa44:	ldr	r3, [r3, #-120]	; 0xffffff88
   2fa48:	add	r6, r6, r3
   2fa4c:	add	r4, r4, r3, lsl #3
   2fa50:	ldr	r3, [sp, #8]
   2fa54:	ldr	r2, [sp, #16]
   2fa58:	add	r3, r3, r2
   2fa5c:	b	2f774 <GetDataSlab+0x13858>
   2fa60:	ldr	r3, [r9]
   2fa64:	ldr	ip, [sp, #4]
   2fa68:	str	r3, [sp, #16]
   2fa6c:	sub	r3, r3, #1
   2fa70:	str	r3, [sp, #32]
   2fa74:	ldr	r3, [fp]
   2fa78:	mov	lr, fp
   2fa7c:	str	r3, [sp, #112]	; 0x70
   2fa80:	ldr	r3, [sp, #204]	; 0xcc
   2fa84:	mov	r6, #0
   2fa88:	mov	r2, #1
   2fa8c:	ldr	r3, [r3]
   2fa90:	str	r3, [sp, #12]
   2fa94:	ldr	r3, [sp, #208]	; 0xd0
   2fa98:	cmp	r2, r3
   2fa9c:	blt	2fbb0 <GetDataSlab+0x13c94>
   2faa0:	ldr	r3, [sp, #8]
   2faa4:	add	r4, r3, r6, lsl #2
   2faa8:	ldr	r3, [sp, #16]
   2faac:	cmp	r3, #1
   2fab0:	movne	r3, #0
   2fab4:	moveq	r9, #0
   2fab8:	beq	2fc70 <GetDataSlab+0x13d54>
   2fabc:	str	r3, [sp, #8]
   2fac0:	ldr	r3, [sp, #8]
   2fac4:	ldr	r2, [sp, #12]
   2fac8:	cmp	r3, r2
   2facc:	bge	1c04c <GetDataSlab+0x130>
   2fad0:	ldr	r3, [sp, #196]	; 0xc4
   2fad4:	ldr	r2, [sp, #8]
   2fad8:	ldr	r3, [r3]
   2fadc:	cmp	r3, #0
   2fae0:	addne	r4, r4, r3, lsl #2
   2fae4:	addne	r6, r6, r3
   2fae8:	ldr	r3, [sp]
   2faec:	add	r2, r3, r2
   2faf0:	mov	r1, r2
   2faf4:	ldr	r3, [sp, #204]	; 0xcc
   2faf8:	ldr	r3, [r3]
   2fafc:	str	r3, [sp, #16]
   2fb00:	ldr	r0, [sp, #16]
   2fb04:	sub	r3, r2, r1
   2fb08:	cmp	r0, r3
   2fb0c:	bgt	2fd50 <GetDataSlab+0x13e34>
   2fb10:	ldr	r3, [r9]
   2fb14:	ldr	r2, [fp]
   2fb18:	ldr	r8, [sp, #4]
   2fb1c:	mul	r3, r3, r0
   2fb20:	mov	r5, #1
   2fb24:	sub	r3, r2, r3
   2fb28:	ldr	r2, [sp, #196]	; 0xc4
   2fb2c:	ldr	r2, [r2]
   2fb30:	sub	r3, r3, r2
   2fb34:	add	r6, r6, r3
   2fb38:	add	r4, r4, r3, lsl #2
   2fb3c:	ldr	r3, [sp, #208]	; 0xd0
   2fb40:	cmp	r5, r3
   2fb44:	bge	2fd98 <GetDataSlab+0x13e7c>
   2fb48:	ldr	r3, [sl, r5, lsl #2]
   2fb4c:	ldr	r2, [sp, #204]	; 0xcc
   2fb50:	add	r3, r3, #1
   2fb54:	str	r3, [sl, r5, lsl #2]
   2fb58:	mov	r0, r3
   2fb5c:	ldr	r1, [r2, r5, lsl #2]
   2fb60:	bl	3fd18 <__aeabi_idivmod>
   2fb64:	subs	r3, r1, #0
   2fb68:	bne	2fd84 <GetDataSlab+0x13e68>
   2fb6c:	ldr	r7, [r8, #4]
   2fb70:	str	r3, [sl, r5, lsl #2]
   2fb74:	mov	r1, r7
   2fb78:	mov	r0, r6
   2fb7c:	bl	3fd18 <__aeabi_idivmod>
   2fb80:	ldr	r2, [sp, #196]	; 0xc4
   2fb84:	ldr	r2, [r2, r5, lsl #2]
   2fb88:	subs	r3, r1, #0
   2fb8c:	beq	2fd70 <GetDataSlab+0x13e54>
   2fb90:	ldr	r1, [r8]
   2fb94:	sub	r3, r7, r3
   2fb98:	mla	r3, r2, r1, r3
   2fb9c:	add	r4, r4, r3, lsl #2
   2fba0:	add	r6, r6, r3
   2fba4:	add	r5, r5, #1
   2fba8:	add	r8, r8, #4
   2fbac:	b	2fb3c <GetDataSlab+0x13c20>
   2fbb0:	ldr	r3, [r9, r2, lsl #2]
   2fbb4:	mov	r5, ip
   2fbb8:	sub	r3, r3, #1
   2fbbc:	str	r3, [r4, r2, lsl #2]
   2fbc0:	ldr	r3, [lr], #4
   2fbc4:	mov	r1, lr
   2fbc8:	str	r3, [ip, #4]
   2fbcc:	cmp	fp, r1
   2fbd0:	bne	2fc04 <GetDataSlab+0x13ce8>
   2fbd4:	ldr	r3, [sp, #204]	; 0xcc
   2fbd8:	ldr	r1, [sp, #12]
   2fbdc:	add	ip, ip, #4
   2fbe0:	ldr	r3, [r3, r2, lsl #2]
   2fbe4:	mul	r3, r3, r1
   2fbe8:	ldr	r1, [sp, #196]	; 0xc4
   2fbec:	str	r3, [sp, #12]
   2fbf0:	ldr	r3, [r5]
   2fbf4:	ldr	r1, [r1, r2, lsl #2]
   2fbf8:	add	r2, r2, #1
   2fbfc:	mla	r6, r1, r3, r6
   2fc00:	b	2fa94 <GetDataSlab+0x13b78>
   2fc04:	ldr	r7, [r4, r2, lsl #2]
   2fc08:	mov	r0, r1
   2fc0c:	ldr	r3, [r1, #-4]!
   2fc10:	mul	r3, r3, r7
   2fc14:	ldr	r7, [ip, #4]
   2fc18:	str	r3, [r4, r2, lsl #2]
   2fc1c:	ldr	r3, [r0]
   2fc20:	mul	r3, r3, r7
   2fc24:	str	r3, [ip, #4]
   2fc28:	b	2fbcc <GetDataSlab+0x13cb0>
   2fc2c:	vldmia	r1!, {s15}
   2fc30:	vcvt.s32.f32	s15, s15
   2fc34:	vmov	r3, s15
   2fc38:	strb	r3, [r2], #1
   2fc3c:	b	2fca0 <GetDataSlab+0x13d84>
   2fc40:	cmp	r2, #0
   2fc44:	beq	2fd44 <GetDataSlab+0x13e28>
   2fc48:	ldr	r3, [r8]
   2fc4c:	mul	r3, r3, r2
   2fc50:	b	2fd3c <GetDataSlab+0x13e20>
   2fc54:	add	r3, sp, #152	; 0x98
   2fc58:	add	r3, r3, r5, lsl #2
   2fc5c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2fc60:	add	r6, r6, r3
   2fc64:	add	r4, r4, r3, lsl #2
   2fc68:	ldr	r3, [sp, #8]
   2fc6c:	add	r9, r9, r3
   2fc70:	ldr	r3, [sp, #12]
   2fc74:	cmp	r9, r3
   2fc78:	bge	1c04c <GetDataSlab+0x130>
   2fc7c:	ldr	r3, [sp, #196]	; 0xc4
   2fc80:	ldr	r3, [r3]
   2fc84:	cmp	r3, #0
   2fc88:	addne	r4, r4, r3, lsl #2
   2fc8c:	addne	r6, r6, r3
   2fc90:	ldr	r3, [sp]
   2fc94:	mov	r1, r4
   2fc98:	add	r2, r3, r9
   2fc9c:	mov	r0, r2
   2fca0:	ldr	r3, [sp, #204]	; 0xcc
   2fca4:	ldr	r3, [r3]
   2fca8:	str	r3, [sp, #8]
   2fcac:	ldr	ip, [sp, #8]
   2fcb0:	sub	r3, r2, r0
   2fcb4:	cmp	ip, r3
   2fcb8:	bgt	2fc2c <GetDataSlab+0x13d10>
   2fcbc:	ldr	r3, [sp, #196]	; 0xc4
   2fcc0:	ldr	r2, [fp]
   2fcc4:	ldr	r8, [sp, #4]
   2fcc8:	ldr	r3, [r3]
   2fccc:	ldr	r5, [sp, #16]
   2fcd0:	sub	r3, r2, r3
   2fcd4:	add	r6, r6, r3
   2fcd8:	add	r4, r4, r3, lsl #2
   2fcdc:	ldr	r3, [sp, #208]	; 0xd0
   2fce0:	cmp	r5, r3
   2fce4:	bge	2fc68 <GetDataSlab+0x13d4c>
   2fce8:	ldr	r3, [sl, r5, lsl #2]
   2fcec:	ldr	r2, [sp, #204]	; 0xcc
   2fcf0:	add	r3, r3, #1
   2fcf4:	str	r3, [sl, r5, lsl #2]
   2fcf8:	mov	r0, r3
   2fcfc:	ldr	r1, [r2, r5, lsl #2]
   2fd00:	bl	3fd18 <__aeabi_idivmod>
   2fd04:	subs	r3, r1, #0
   2fd08:	bne	2fc54 <GetDataSlab+0x13d38>
   2fd0c:	ldr	r7, [r8, #4]
   2fd10:	str	r3, [sl, r5, lsl #2]
   2fd14:	mov	r1, r7
   2fd18:	mov	r0, r6
   2fd1c:	bl	3fd18 <__aeabi_idivmod>
   2fd20:	ldr	r2, [sp, #196]	; 0xc4
   2fd24:	ldr	r2, [r2, r5, lsl #2]
   2fd28:	subs	r3, r1, #0
   2fd2c:	beq	2fc40 <GetDataSlab+0x13d24>
   2fd30:	ldr	r1, [r8]
   2fd34:	sub	r3, r7, r3
   2fd38:	mla	r3, r2, r1, r3
   2fd3c:	add	r4, r4, r3, lsl #2
   2fd40:	add	r6, r6, r3
   2fd44:	add	r5, r5, #1
   2fd48:	add	r8, r8, #4
   2fd4c:	b	2fcdc <GetDataSlab+0x13dc0>
   2fd50:	vldr	s15, [r4]
   2fd54:	vcvt.s32.f32	s15, s15
   2fd58:	vmov	r3, s15
   2fd5c:	strb	r3, [r2], #1
   2fd60:	ldr	r3, [r9]
   2fd64:	add	r6, r6, r3
   2fd68:	add	r4, r4, r3, lsl #2
   2fd6c:	b	2faf4 <GetDataSlab+0x13bd8>
   2fd70:	cmp	r2, #0
   2fd74:	beq	2fba4 <GetDataSlab+0x13c88>
   2fd78:	ldr	r3, [r8]
   2fd7c:	mul	r3, r3, r2
   2fd80:	b	2fb9c <GetDataSlab+0x13c80>
   2fd84:	add	r3, sp, #152	; 0x98
   2fd88:	add	r3, r3, r5, lsl #2
   2fd8c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2fd90:	add	r6, r6, r3
   2fd94:	add	r4, r4, r3, lsl #2
   2fd98:	ldr	r3, [sp, #8]
   2fd9c:	ldr	r2, [sp, #16]
   2fda0:	add	r3, r3, r2
   2fda4:	b	2fabc <GetDataSlab+0x13ba0>
   2fda8:	ldr	r3, [r9]
   2fdac:	ldr	ip, [sp, #4]
   2fdb0:	str	r3, [sp, #16]
   2fdb4:	sub	r3, r3, #1
   2fdb8:	str	r3, [sp, #32]
   2fdbc:	ldr	r3, [fp]
   2fdc0:	mov	lr, fp
   2fdc4:	str	r3, [sp, #112]	; 0x70
   2fdc8:	ldr	r3, [sp, #204]	; 0xcc
   2fdcc:	mov	r6, #0
   2fdd0:	mov	r2, #1
   2fdd4:	ldr	r3, [r3]
   2fdd8:	str	r3, [sp, #12]
   2fddc:	ldr	r3, [sp, #208]	; 0xd0
   2fde0:	cmp	r2, r3
   2fde4:	blt	2fef8 <GetDataSlab+0x13fdc>
   2fde8:	ldr	r3, [sp, #8]
   2fdec:	add	r4, r3, r6, lsl #2
   2fdf0:	ldr	r3, [sp, #16]
   2fdf4:	cmp	r3, #1
   2fdf8:	movne	r3, #0
   2fdfc:	moveq	r9, #0
   2fe00:	beq	2ffb0 <GetDataSlab+0x14094>
   2fe04:	str	r3, [sp, #8]
   2fe08:	ldr	r3, [sp, #8]
   2fe0c:	ldr	r2, [sp, #12]
   2fe10:	cmp	r3, r2
   2fe14:	bge	1c04c <GetDataSlab+0x130>
   2fe18:	ldr	r3, [sp, #196]	; 0xc4
   2fe1c:	ldr	r2, [sp, #8]
   2fe20:	ldr	r3, [r3]
   2fe24:	cmp	r3, #0
   2fe28:	addne	r4, r4, r3, lsl #2
   2fe2c:	addne	r6, r6, r3
   2fe30:	ldr	r3, [sp]
   2fe34:	add	r2, r3, r2
   2fe38:	mov	r1, r2
   2fe3c:	ldr	r3, [sp, #204]	; 0xcc
   2fe40:	ldr	r3, [r3]
   2fe44:	str	r3, [sp, #16]
   2fe48:	ldr	r0, [sp, #16]
   2fe4c:	sub	r3, r2, r1
   2fe50:	cmp	r0, r3
   2fe54:	bgt	30090 <GetDataSlab+0x14174>
   2fe58:	ldr	r3, [r9]
   2fe5c:	ldr	r2, [fp]
   2fe60:	ldr	r8, [sp, #4]
   2fe64:	mul	r3, r3, r0
   2fe68:	mov	r5, #1
   2fe6c:	sub	r3, r2, r3
   2fe70:	ldr	r2, [sp, #196]	; 0xc4
   2fe74:	ldr	r2, [r2]
   2fe78:	sub	r3, r3, r2
   2fe7c:	add	r6, r6, r3
   2fe80:	add	r4, r4, r3, lsl #2
   2fe84:	ldr	r3, [sp, #208]	; 0xd0
   2fe88:	cmp	r5, r3
   2fe8c:	bge	300d0 <GetDataSlab+0x141b4>
   2fe90:	ldr	r3, [sl, r5, lsl #2]
   2fe94:	ldr	r2, [sp, #204]	; 0xcc
   2fe98:	add	r3, r3, #1
   2fe9c:	str	r3, [sl, r5, lsl #2]
   2fea0:	mov	r0, r3
   2fea4:	ldr	r1, [r2, r5, lsl #2]
   2fea8:	bl	3fd18 <__aeabi_idivmod>
   2feac:	subs	r3, r1, #0
   2feb0:	bne	300bc <GetDataSlab+0x141a0>
   2feb4:	ldr	r7, [r8, #4]
   2feb8:	str	r3, [sl, r5, lsl #2]
   2febc:	mov	r1, r7
   2fec0:	mov	r0, r6
   2fec4:	bl	3fd18 <__aeabi_idivmod>
   2fec8:	ldr	r2, [sp, #196]	; 0xc4
   2fecc:	ldr	r2, [r2, r5, lsl #2]
   2fed0:	subs	r3, r1, #0
   2fed4:	beq	300a8 <GetDataSlab+0x1418c>
   2fed8:	ldr	r1, [r8]
   2fedc:	sub	r3, r7, r3
   2fee0:	mla	r3, r2, r1, r3
   2fee4:	add	r4, r4, r3, lsl #2
   2fee8:	add	r6, r6, r3
   2feec:	add	r5, r5, #1
   2fef0:	add	r8, r8, #4
   2fef4:	b	2fe84 <GetDataSlab+0x13f68>
   2fef8:	ldr	r3, [r9, r2, lsl #2]
   2fefc:	mov	r5, ip
   2ff00:	sub	r3, r3, #1
   2ff04:	str	r3, [r4, r2, lsl #2]
   2ff08:	ldr	r3, [lr], #4
   2ff0c:	mov	r1, lr
   2ff10:	str	r3, [ip, #4]
   2ff14:	cmp	fp, r1
   2ff18:	bne	2ff4c <GetDataSlab+0x14030>
   2ff1c:	ldr	r3, [sp, #204]	; 0xcc
   2ff20:	ldr	r1, [sp, #12]
   2ff24:	add	ip, ip, #4
   2ff28:	ldr	r3, [r3, r2, lsl #2]
   2ff2c:	mul	r3, r3, r1
   2ff30:	ldr	r1, [sp, #196]	; 0xc4
   2ff34:	str	r3, [sp, #12]
   2ff38:	ldr	r3, [r5]
   2ff3c:	ldr	r1, [r1, r2, lsl #2]
   2ff40:	add	r2, r2, #1
   2ff44:	mla	r6, r1, r3, r6
   2ff48:	b	2fddc <GetDataSlab+0x13ec0>
   2ff4c:	ldr	r7, [r4, r2, lsl #2]
   2ff50:	mov	r0, r1
   2ff54:	ldr	r3, [r1, #-4]!
   2ff58:	mul	r3, r3, r7
   2ff5c:	ldr	r7, [ip, #4]
   2ff60:	str	r3, [r4, r2, lsl #2]
   2ff64:	ldr	r3, [r0]
   2ff68:	mul	r3, r3, r7
   2ff6c:	str	r3, [ip, #4]
   2ff70:	b	2ff14 <GetDataSlab+0x13ff8>
   2ff74:	ldr	r3, [r1, #4]!
   2ff78:	strb	r3, [r2], #1
   2ff7c:	b	2ffe0 <GetDataSlab+0x140c4>
   2ff80:	cmp	r2, #0
   2ff84:	beq	30084 <GetDataSlab+0x14168>
   2ff88:	ldr	r3, [r8]
   2ff8c:	mul	r3, r3, r2
   2ff90:	b	3007c <GetDataSlab+0x14160>
   2ff94:	add	r3, sp, #152	; 0x98
   2ff98:	add	r3, r3, r5, lsl #2
   2ff9c:	ldr	r3, [r3, #-120]	; 0xffffff88
   2ffa0:	add	r6, r6, r3
   2ffa4:	add	r4, r4, r3, lsl #2
   2ffa8:	ldr	r3, [sp, #8]
   2ffac:	add	r9, r9, r3
   2ffb0:	ldr	r3, [sp, #12]
   2ffb4:	cmp	r9, r3
   2ffb8:	bge	1c04c <GetDataSlab+0x130>
   2ffbc:	ldr	r3, [sp, #196]	; 0xc4
   2ffc0:	ldr	r3, [r3]
   2ffc4:	cmp	r3, #0
   2ffc8:	addne	r4, r4, r3, lsl #2
   2ffcc:	addne	r6, r6, r3
   2ffd0:	ldr	r3, [sp]
   2ffd4:	sub	r1, r4, #4
   2ffd8:	add	r2, r3, r9
   2ffdc:	mov	r0, r2
   2ffe0:	ldr	r3, [sp, #204]	; 0xcc
   2ffe4:	ldr	r3, [r3]
   2ffe8:	str	r3, [sp, #8]
   2ffec:	ldr	ip, [sp, #8]
   2fff0:	sub	r3, r2, r0
   2fff4:	cmp	ip, r3
   2fff8:	bgt	2ff74 <GetDataSlab+0x14058>
   2fffc:	ldr	r3, [sp, #196]	; 0xc4
   30000:	ldr	r2, [fp]
   30004:	ldr	r8, [sp, #4]
   30008:	ldr	r3, [r3]
   3000c:	ldr	r5, [sp, #16]
   30010:	sub	r3, r2, r3
   30014:	add	r6, r6, r3
   30018:	add	r4, r4, r3, lsl #2
   3001c:	ldr	r3, [sp, #208]	; 0xd0
   30020:	cmp	r5, r3
   30024:	bge	2ffa8 <GetDataSlab+0x1408c>
   30028:	ldr	r3, [sl, r5, lsl #2]
   3002c:	ldr	r2, [sp, #204]	; 0xcc
   30030:	add	r3, r3, #1
   30034:	str	r3, [sl, r5, lsl #2]
   30038:	mov	r0, r3
   3003c:	ldr	r1, [r2, r5, lsl #2]
   30040:	bl	3fd18 <__aeabi_idivmod>
   30044:	subs	r3, r1, #0
   30048:	bne	2ff94 <GetDataSlab+0x14078>
   3004c:	ldr	r7, [r8, #4]
   30050:	str	r3, [sl, r5, lsl #2]
   30054:	mov	r1, r7
   30058:	mov	r0, r6
   3005c:	bl	3fd18 <__aeabi_idivmod>
   30060:	ldr	r2, [sp, #196]	; 0xc4
   30064:	ldr	r2, [r2, r5, lsl #2]
   30068:	subs	r3, r1, #0
   3006c:	beq	2ff80 <GetDataSlab+0x14064>
   30070:	ldr	r1, [r8]
   30074:	sub	r3, r7, r3
   30078:	mla	r3, r2, r1, r3
   3007c:	add	r4, r4, r3, lsl #2
   30080:	add	r6, r6, r3
   30084:	add	r5, r5, #1
   30088:	add	r8, r8, #4
   3008c:	b	3001c <GetDataSlab+0x14100>
   30090:	ldr	r3, [r4]
   30094:	strb	r3, [r2], #1
   30098:	ldr	r3, [r9]
   3009c:	add	r6, r6, r3
   300a0:	add	r4, r4, r3, lsl #2
   300a4:	b	2fe3c <GetDataSlab+0x13f20>
   300a8:	cmp	r2, #0
   300ac:	beq	2feec <GetDataSlab+0x13fd0>
   300b0:	ldr	r3, [r8]
   300b4:	mul	r3, r3, r2
   300b8:	b	2fee4 <GetDataSlab+0x13fc8>
   300bc:	add	r3, sp, #152	; 0x98
   300c0:	add	r3, r3, r5, lsl #2
   300c4:	ldr	r3, [r3, #-120]	; 0xffffff88
   300c8:	add	r6, r6, r3
   300cc:	add	r4, r4, r3, lsl #2
   300d0:	ldr	r3, [sp, #8]
   300d4:	ldr	r2, [sp, #16]
   300d8:	add	r3, r3, r2
   300dc:	b	2fe04 <GetDataSlab+0x13ee8>
   300e0:	ldr	r3, [r9]
   300e4:	ldr	ip, [sp, #4]
   300e8:	str	r3, [sp, #16]
   300ec:	sub	r3, r3, #1
   300f0:	str	r3, [sp, #32]
   300f4:	ldr	r3, [fp]
   300f8:	mov	lr, fp
   300fc:	str	r3, [sp, #112]	; 0x70
   30100:	ldr	r3, [sp, #204]	; 0xcc
   30104:	mov	r6, #0
   30108:	mov	r2, #1
   3010c:	ldr	r3, [r3]
   30110:	str	r3, [sp, #12]
   30114:	ldr	r3, [sp, #208]	; 0xd0
   30118:	cmp	r2, r3
   3011c:	blt	30230 <GetDataSlab+0x14314>
   30120:	ldr	r3, [sp, #8]
   30124:	add	r4, r3, r6, lsl #2
   30128:	ldr	r3, [sp, #16]
   3012c:	cmp	r3, #1
   30130:	movne	r3, #0
   30134:	moveq	r9, #0
   30138:	beq	302e8 <GetDataSlab+0x143cc>
   3013c:	str	r3, [sp, #8]
   30140:	ldr	r3, [sp, #8]
   30144:	ldr	r2, [sp, #12]
   30148:	cmp	r3, r2
   3014c:	bge	1c04c <GetDataSlab+0x130>
   30150:	ldr	r3, [sp, #196]	; 0xc4
   30154:	ldr	r2, [sp, #8]
   30158:	ldr	r3, [r3]
   3015c:	cmp	r3, #0
   30160:	addne	r4, r4, r3, lsl #2
   30164:	addne	r6, r6, r3
   30168:	ldr	r3, [sp]
   3016c:	add	r2, r3, r2
   30170:	mov	r1, r2
   30174:	ldr	r3, [sp, #204]	; 0xcc
   30178:	ldr	r3, [r3]
   3017c:	str	r3, [sp, #16]
   30180:	ldr	r0, [sp, #16]
   30184:	sub	r3, r2, r1
   30188:	cmp	r0, r3
   3018c:	bgt	303c8 <GetDataSlab+0x144ac>
   30190:	ldr	r3, [r9]
   30194:	ldr	r2, [fp]
   30198:	ldr	r8, [sp, #4]
   3019c:	mul	r3, r3, r0
   301a0:	mov	r5, #1
   301a4:	sub	r3, r2, r3
   301a8:	ldr	r2, [sp, #196]	; 0xc4
   301ac:	ldr	r2, [r2]
   301b0:	sub	r3, r3, r2
   301b4:	add	r6, r6, r3
   301b8:	add	r4, r4, r3, lsl #2
   301bc:	ldr	r3, [sp, #208]	; 0xd0
   301c0:	cmp	r5, r3
   301c4:	bge	30408 <GetDataSlab+0x144ec>
   301c8:	ldr	r3, [sl, r5, lsl #2]
   301cc:	ldr	r2, [sp, #204]	; 0xcc
   301d0:	add	r3, r3, #1
   301d4:	str	r3, [sl, r5, lsl #2]
   301d8:	mov	r0, r3
   301dc:	ldr	r1, [r2, r5, lsl #2]
   301e0:	bl	3fd18 <__aeabi_idivmod>
   301e4:	subs	r3, r1, #0
   301e8:	bne	303f4 <GetDataSlab+0x144d8>
   301ec:	ldr	r7, [r8, #4]
   301f0:	str	r3, [sl, r5, lsl #2]
   301f4:	mov	r1, r7
   301f8:	mov	r0, r6
   301fc:	bl	3fd18 <__aeabi_idivmod>
   30200:	ldr	r2, [sp, #196]	; 0xc4
   30204:	ldr	r2, [r2, r5, lsl #2]
   30208:	subs	r3, r1, #0
   3020c:	beq	303e0 <GetDataSlab+0x144c4>
   30210:	ldr	r1, [r8]
   30214:	sub	r3, r7, r3
   30218:	mla	r3, r2, r1, r3
   3021c:	add	r4, r4, r3, lsl #2
   30220:	add	r6, r6, r3
   30224:	add	r5, r5, #1
   30228:	add	r8, r8, #4
   3022c:	b	301bc <GetDataSlab+0x142a0>
   30230:	ldr	r3, [r9, r2, lsl #2]
   30234:	mov	r5, ip
   30238:	sub	r3, r3, #1
   3023c:	str	r3, [r4, r2, lsl #2]
   30240:	ldr	r3, [lr], #4
   30244:	mov	r1, lr
   30248:	str	r3, [ip, #4]
   3024c:	cmp	fp, r1
   30250:	bne	30284 <GetDataSlab+0x14368>
   30254:	ldr	r3, [sp, #204]	; 0xcc
   30258:	ldr	r1, [sp, #12]
   3025c:	add	ip, ip, #4
   30260:	ldr	r3, [r3, r2, lsl #2]
   30264:	mul	r3, r3, r1
   30268:	ldr	r1, [sp, #196]	; 0xc4
   3026c:	str	r3, [sp, #12]
   30270:	ldr	r3, [r5]
   30274:	ldr	r1, [r1, r2, lsl #2]
   30278:	add	r2, r2, #1
   3027c:	mla	r6, r1, r3, r6
   30280:	b	30114 <GetDataSlab+0x141f8>
   30284:	ldr	r7, [r4, r2, lsl #2]
   30288:	mov	r0, r1
   3028c:	ldr	r3, [r1, #-4]!
   30290:	mul	r3, r3, r7
   30294:	ldr	r7, [ip, #4]
   30298:	str	r3, [r4, r2, lsl #2]
   3029c:	ldr	r3, [r0]
   302a0:	mul	r3, r3, r7
   302a4:	str	r3, [ip, #4]
   302a8:	b	3024c <GetDataSlab+0x14330>
   302ac:	ldr	r3, [r1, #4]!
   302b0:	strb	r3, [r2], #1
   302b4:	b	30318 <GetDataSlab+0x143fc>
   302b8:	cmp	r2, #0
   302bc:	beq	303bc <GetDataSlab+0x144a0>
   302c0:	ldr	r3, [r8]
   302c4:	mul	r3, r3, r2
   302c8:	b	303b4 <GetDataSlab+0x14498>
   302cc:	add	r3, sp, #152	; 0x98
   302d0:	add	r3, r3, r5, lsl #2
   302d4:	ldr	r3, [r3, #-120]	; 0xffffff88
   302d8:	add	r6, r6, r3
   302dc:	add	r4, r4, r3, lsl #2
   302e0:	ldr	r3, [sp, #8]
   302e4:	add	r9, r9, r3
   302e8:	ldr	r3, [sp, #12]
   302ec:	cmp	r9, r3
   302f0:	bge	1c04c <GetDataSlab+0x130>
   302f4:	ldr	r3, [sp, #196]	; 0xc4
   302f8:	ldr	r3, [r3]
   302fc:	cmp	r3, #0
   30300:	addne	r4, r4, r3, lsl #2
   30304:	addne	r6, r6, r3
   30308:	ldr	r3, [sp]
   3030c:	sub	r1, r4, #4
   30310:	add	r2, r3, r9
   30314:	mov	r0, r2
   30318:	ldr	r3, [sp, #204]	; 0xcc
   3031c:	ldr	r3, [r3]
   30320:	str	r3, [sp, #8]
   30324:	ldr	ip, [sp, #8]
   30328:	sub	r3, r2, r0
   3032c:	cmp	ip, r3
   30330:	bgt	302ac <GetDataSlab+0x14390>
   30334:	ldr	r3, [sp, #196]	; 0xc4
   30338:	ldr	r2, [fp]
   3033c:	ldr	r8, [sp, #4]
   30340:	ldr	r3, [r3]
   30344:	ldr	r5, [sp, #16]
   30348:	sub	r3, r2, r3
   3034c:	add	r6, r6, r3
   30350:	add	r4, r4, r3, lsl #2
   30354:	ldr	r3, [sp, #208]	; 0xd0
   30358:	cmp	r5, r3
   3035c:	bge	302e0 <GetDataSlab+0x143c4>
   30360:	ldr	r3, [sl, r5, lsl #2]
   30364:	ldr	r2, [sp, #204]	; 0xcc
   30368:	add	r3, r3, #1
   3036c:	str	r3, [sl, r5, lsl #2]
   30370:	mov	r0, r3
   30374:	ldr	r1, [r2, r5, lsl #2]
   30378:	bl	3fd18 <__aeabi_idivmod>
   3037c:	subs	r3, r1, #0
   30380:	bne	302cc <GetDataSlab+0x143b0>
   30384:	ldr	r7, [r8, #4]
   30388:	str	r3, [sl, r5, lsl #2]
   3038c:	mov	r1, r7
   30390:	mov	r0, r6
   30394:	bl	3fd18 <__aeabi_idivmod>
   30398:	ldr	r2, [sp, #196]	; 0xc4
   3039c:	ldr	r2, [r2, r5, lsl #2]
   303a0:	subs	r3, r1, #0
   303a4:	beq	302b8 <GetDataSlab+0x1439c>
   303a8:	ldr	r1, [r8]
   303ac:	sub	r3, r7, r3
   303b0:	mla	r3, r2, r1, r3
   303b4:	add	r4, r4, r3, lsl #2
   303b8:	add	r6, r6, r3
   303bc:	add	r5, r5, #1
   303c0:	add	r8, r8, #4
   303c4:	b	30354 <GetDataSlab+0x14438>
   303c8:	ldr	r3, [r4]
   303cc:	strb	r3, [r2], #1
   303d0:	ldr	r3, [r9]
   303d4:	add	r6, r6, r3
   303d8:	add	r4, r4, r3, lsl #2
   303dc:	b	30174 <GetDataSlab+0x14258>
   303e0:	cmp	r2, #0
   303e4:	beq	30224 <GetDataSlab+0x14308>
   303e8:	ldr	r3, [r8]
   303ec:	mul	r3, r3, r2
   303f0:	b	3021c <GetDataSlab+0x14300>
   303f4:	add	r3, sp, #152	; 0x98
   303f8:	add	r3, r3, r5, lsl #2
   303fc:	ldr	r3, [r3, #-120]	; 0xffffff88
   30400:	add	r6, r6, r3
   30404:	add	r4, r4, r3, lsl #2
   30408:	ldr	r3, [sp, #8]
   3040c:	ldr	r2, [sp, #16]
   30410:	add	r3, r3, r2
   30414:	b	3013c <GetDataSlab+0x14220>
   30418:	ldr	r3, [r9]
   3041c:	ldr	ip, [sp, #4]
   30420:	str	r3, [sp, #16]
   30424:	sub	r3, r3, #1
   30428:	str	r3, [sp, #32]
   3042c:	ldr	r3, [fp]
   30430:	mov	lr, fp
   30434:	str	r3, [sp, #112]	; 0x70
   30438:	ldr	r3, [sp, #204]	; 0xcc
   3043c:	mov	r6, #0
   30440:	mov	r2, #1
   30444:	ldr	r3, [r3]
   30448:	str	r3, [sp, #12]
   3044c:	ldr	r3, [sp, #208]	; 0xd0
   30450:	cmp	r2, r3
   30454:	blt	30568 <GetDataSlab+0x1464c>
   30458:	ldr	r3, [sp, #8]
   3045c:	add	r4, r3, r6, lsl #1
   30460:	ldr	r3, [sp, #16]
   30464:	cmp	r3, #1
   30468:	movne	r3, #0
   3046c:	moveq	r9, #0
   30470:	beq	30620 <GetDataSlab+0x14704>
   30474:	str	r3, [sp, #8]
   30478:	ldr	r3, [sp, #8]
   3047c:	ldr	r2, [sp, #12]
   30480:	cmp	r3, r2
   30484:	bge	1c04c <GetDataSlab+0x130>
   30488:	ldr	r3, [sp, #196]	; 0xc4
   3048c:	ldr	r2, [sp, #8]
   30490:	ldr	r3, [r3]
   30494:	cmp	r3, #0
   30498:	addne	r4, r4, r3, lsl #1
   3049c:	addne	r6, r6, r3
   304a0:	ldr	r3, [sp]
   304a4:	add	r2, r3, r2
   304a8:	mov	r1, r2
   304ac:	ldr	r3, [sp, #204]	; 0xcc
   304b0:	ldr	r3, [r3]
   304b4:	str	r3, [sp, #16]
   304b8:	ldr	r0, [sp, #16]
   304bc:	sub	r3, r2, r1
   304c0:	cmp	r0, r3
   304c4:	bgt	30700 <GetDataSlab+0x147e4>
   304c8:	ldr	r3, [r9]
   304cc:	ldr	r2, [fp]
   304d0:	ldr	r8, [sp, #4]
   304d4:	mul	r3, r3, r0
   304d8:	mov	r5, #1
   304dc:	sub	r3, r2, r3
   304e0:	ldr	r2, [sp, #196]	; 0xc4
   304e4:	ldr	r2, [r2]
   304e8:	sub	r3, r3, r2
   304ec:	add	r6, r6, r3
   304f0:	add	r4, r4, r3, lsl #1
   304f4:	ldr	r3, [sp, #208]	; 0xd0
   304f8:	cmp	r5, r3
   304fc:	bge	30740 <GetDataSlab+0x14824>
   30500:	ldr	r3, [sl, r5, lsl #2]
   30504:	ldr	r2, [sp, #204]	; 0xcc
   30508:	add	r3, r3, #1
   3050c:	str	r3, [sl, r5, lsl #2]
   30510:	mov	r0, r3
   30514:	ldr	r1, [r2, r5, lsl #2]
   30518:	bl	3fd18 <__aeabi_idivmod>
   3051c:	subs	r3, r1, #0
   30520:	bne	3072c <GetDataSlab+0x14810>
   30524:	ldr	r7, [r8, #4]
   30528:	str	r3, [sl, r5, lsl #2]
   3052c:	mov	r1, r7
   30530:	mov	r0, r6
   30534:	bl	3fd18 <__aeabi_idivmod>
   30538:	ldr	r2, [sp, #196]	; 0xc4
   3053c:	ldr	r2, [r2, r5, lsl #2]
   30540:	subs	r3, r1, #0
   30544:	beq	30718 <GetDataSlab+0x147fc>
   30548:	ldr	r1, [r8]
   3054c:	sub	r3, r7, r3
   30550:	mla	r3, r2, r1, r3
   30554:	add	r4, r4, r3, lsl #1
   30558:	add	r6, r6, r3
   3055c:	add	r5, r5, #1
   30560:	add	r8, r8, #4
   30564:	b	304f4 <GetDataSlab+0x145d8>
   30568:	ldr	r3, [r9, r2, lsl #2]
   3056c:	mov	r5, ip
   30570:	sub	r3, r3, #1
   30574:	str	r3, [r4, r2, lsl #2]
   30578:	ldr	r3, [lr], #4
   3057c:	mov	r1, lr
   30580:	str	r3, [ip, #4]
   30584:	cmp	r1, fp
   30588:	bne	305bc <GetDataSlab+0x146a0>
   3058c:	ldr	r3, [sp, #204]	; 0xcc
   30590:	ldr	r1, [sp, #12]
   30594:	add	ip, ip, #4
   30598:	ldr	r3, [r3, r2, lsl #2]
   3059c:	mul	r3, r3, r1
   305a0:	ldr	r1, [sp, #196]	; 0xc4
   305a4:	str	r3, [sp, #12]
   305a8:	ldr	r3, [r5]
   305ac:	ldr	r1, [r1, r2, lsl #2]
   305b0:	add	r2, r2, #1
   305b4:	mla	r6, r1, r3, r6
   305b8:	b	3044c <GetDataSlab+0x14530>
   305bc:	ldr	r7, [r4, r2, lsl #2]
   305c0:	mov	r0, r1
   305c4:	ldr	r3, [r1, #-4]!
   305c8:	mul	r3, r3, r7
   305cc:	ldr	r7, [ip, #4]
   305d0:	str	r3, [r4, r2, lsl #2]
   305d4:	ldr	r3, [r0]
   305d8:	mul	r3, r3, r7
   305dc:	str	r3, [ip, #4]
   305e0:	b	30584 <GetDataSlab+0x14668>
   305e4:	ldrh	r3, [r1, #2]!
   305e8:	strb	r3, [r2], #1
   305ec:	b	30650 <GetDataSlab+0x14734>
   305f0:	cmp	r2, #0
   305f4:	beq	306f4 <GetDataSlab+0x147d8>
   305f8:	ldr	r3, [r8]
   305fc:	mul	r3, r3, r2
   30600:	b	306ec <GetDataSlab+0x147d0>
   30604:	add	r3, sp, #152	; 0x98
   30608:	add	r3, r3, r5, lsl #2
   3060c:	ldr	r3, [r3, #-120]	; 0xffffff88
   30610:	add	r6, r6, r3
   30614:	add	r4, r4, r3, lsl #1
   30618:	ldr	r3, [sp, #8]
   3061c:	add	r9, r9, r3
   30620:	ldr	r3, [sp, #12]
   30624:	cmp	r9, r3
   30628:	bge	1c04c <GetDataSlab+0x130>
   3062c:	ldr	r3, [sp, #196]	; 0xc4
   30630:	ldr	r3, [r3]
   30634:	cmp	r3, #0
   30638:	addne	r4, r4, r3, lsl #1
   3063c:	addne	r6, r6, r3
   30640:	ldr	r3, [sp]
   30644:	sub	r1, r4, #2
   30648:	add	r2, r3, r9
   3064c:	mov	r0, r2
   30650:	ldr	r3, [sp, #204]	; 0xcc
   30654:	ldr	r3, [r3]
   30658:	str	r3, [sp, #8]
   3065c:	ldr	ip, [sp, #8]
   30660:	sub	r3, r2, r0
   30664:	cmp	ip, r3
   30668:	bgt	305e4 <GetDataSlab+0x146c8>
   3066c:	ldr	r3, [sp, #196]	; 0xc4
   30670:	ldr	r2, [fp]
   30674:	ldr	r8, [sp, #4]
   30678:	ldr	r3, [r3]
   3067c:	ldr	r5, [sp, #16]
   30680:	sub	r3, r2, r3
   30684:	add	r6, r6, r3
   30688:	add	r4, r4, r3, lsl #1
   3068c:	ldr	r3, [sp, #208]	; 0xd0
   30690:	cmp	r5, r3
   30694:	bge	30618 <GetDataSlab+0x146fc>
   30698:	ldr	r3, [sl, r5, lsl #2]
   3069c:	ldr	r2, [sp, #204]	; 0xcc
   306a0:	add	r3, r3, #1
   306a4:	str	r3, [sl, r5, lsl #2]
   306a8:	mov	r0, r3
   306ac:	ldr	r1, [r2, r5, lsl #2]
   306b0:	bl	3fd18 <__aeabi_idivmod>
   306b4:	subs	r3, r1, #0
   306b8:	bne	30604 <GetDataSlab+0x146e8>
   306bc:	ldr	r7, [r8, #4]
   306c0:	str	r3, [sl, r5, lsl #2]
   306c4:	mov	r1, r7
   306c8:	mov	r0, r6
   306cc:	bl	3fd18 <__aeabi_idivmod>
   306d0:	ldr	r2, [sp, #196]	; 0xc4
   306d4:	ldr	r2, [r2, r5, lsl #2]
   306d8:	subs	r3, r1, #0
   306dc:	beq	305f0 <GetDataSlab+0x146d4>
   306e0:	ldr	r1, [r8]
   306e4:	sub	r3, r7, r3
   306e8:	mla	r3, r2, r1, r3
   306ec:	add	r4, r4, r3, lsl #1
   306f0:	add	r6, r6, r3
   306f4:	add	r5, r5, #1
   306f8:	add	r8, r8, #4
   306fc:	b	3068c <GetDataSlab+0x14770>
   30700:	ldrh	r3, [r4]
   30704:	strb	r3, [r2], #1
   30708:	ldr	r3, [r9]
   3070c:	add	r6, r6, r3
   30710:	add	r4, r4, r3, lsl #1
   30714:	b	304ac <GetDataSlab+0x14590>
   30718:	cmp	r2, #0
   3071c:	beq	3055c <GetDataSlab+0x14640>
   30720:	ldr	r3, [r8]
   30724:	mul	r3, r3, r2
   30728:	b	30554 <GetDataSlab+0x14638>
   3072c:	add	r3, sp, #152	; 0x98
   30730:	add	r3, r3, r5, lsl #2
   30734:	ldr	r3, [r3, #-120]	; 0xffffff88
   30738:	add	r6, r6, r3
   3073c:	add	r4, r4, r3, lsl #1
   30740:	ldr	r3, [sp, #8]
   30744:	ldr	r2, [sp, #16]
   30748:	add	r3, r3, r2
   3074c:	b	30474 <GetDataSlab+0x14558>
   30750:	ldr	r3, [r9]
   30754:	ldr	ip, [sp, #4]
   30758:	str	r3, [sp, #16]
   3075c:	sub	r3, r3, #1
   30760:	str	r3, [sp, #32]
   30764:	ldr	r3, [fp]
   30768:	mov	lr, fp
   3076c:	str	r3, [sp, #112]	; 0x70
   30770:	ldr	r3, [sp, #204]	; 0xcc
   30774:	mov	r6, #0
   30778:	mov	r2, #1
   3077c:	ldr	r3, [r3]
   30780:	str	r3, [sp, #12]
   30784:	ldr	r3, [sp, #208]	; 0xd0
   30788:	cmp	r2, r3
   3078c:	blt	308a0 <GetDataSlab+0x14984>
   30790:	ldr	r3, [sp, #8]
   30794:	add	r4, r3, r6, lsl #1
   30798:	ldr	r3, [sp, #16]
   3079c:	cmp	r3, #1
   307a0:	movne	r3, #0
   307a4:	moveq	r9, #0
   307a8:	beq	30958 <GetDataSlab+0x14a3c>
   307ac:	str	r3, [sp, #8]
   307b0:	ldr	r3, [sp, #8]
   307b4:	ldr	r2, [sp, #12]
   307b8:	cmp	r3, r2
   307bc:	bge	1c04c <GetDataSlab+0x130>
   307c0:	ldr	r3, [sp, #196]	; 0xc4
   307c4:	ldr	r2, [sp, #8]
   307c8:	ldr	r3, [r3]
   307cc:	cmp	r3, #0
   307d0:	addne	r4, r4, r3, lsl #1
   307d4:	addne	r6, r6, r3
   307d8:	ldr	r3, [sp]
   307dc:	add	r2, r3, r2
   307e0:	mov	r1, r2
   307e4:	ldr	r3, [sp, #204]	; 0xcc
   307e8:	ldr	r3, [r3]
   307ec:	str	r3, [sp, #16]
   307f0:	ldr	r0, [sp, #16]
   307f4:	sub	r3, r2, r1
   307f8:	cmp	r0, r3
   307fc:	bgt	30a38 <GetDataSlab+0x14b1c>
   30800:	ldr	r3, [r9]
   30804:	ldr	r2, [fp]
   30808:	ldr	r8, [sp, #4]
   3080c:	mul	r3, r3, r0
   30810:	mov	r5, #1
   30814:	sub	r3, r2, r3
   30818:	ldr	r2, [sp, #196]	; 0xc4
   3081c:	ldr	r2, [r2]
   30820:	sub	r3, r3, r2
   30824:	add	r6, r6, r3
   30828:	add	r4, r4, r3, lsl #1
   3082c:	ldr	r3, [sp, #208]	; 0xd0
   30830:	cmp	r5, r3
   30834:	bge	30a78 <GetDataSlab+0x14b5c>
   30838:	ldr	r3, [sl, r5, lsl #2]
   3083c:	ldr	r2, [sp, #204]	; 0xcc
   30840:	add	r3, r3, #1
   30844:	str	r3, [sl, r5, lsl #2]
   30848:	mov	r0, r3
   3084c:	ldr	r1, [r2, r5, lsl #2]
   30850:	bl	3fd18 <__aeabi_idivmod>
   30854:	subs	r3, r1, #0
   30858:	bne	30a64 <GetDataSlab+0x14b48>
   3085c:	ldr	r7, [r8, #4]
   30860:	str	r3, [sl, r5, lsl #2]
   30864:	mov	r1, r7
   30868:	mov	r0, r6
   3086c:	bl	3fd18 <__aeabi_idivmod>
   30870:	ldr	r2, [sp, #196]	; 0xc4
   30874:	ldr	r2, [r2, r5, lsl #2]
   30878:	subs	r3, r1, #0
   3087c:	beq	30a50 <GetDataSlab+0x14b34>
   30880:	ldr	r1, [r8]
   30884:	sub	r3, r7, r3
   30888:	mla	r3, r2, r1, r3
   3088c:	add	r4, r4, r3, lsl #1
   30890:	add	r6, r6, r3
   30894:	add	r5, r5, #1
   30898:	add	r8, r8, #4
   3089c:	b	3082c <GetDataSlab+0x14910>
   308a0:	ldr	r3, [r9, r2, lsl #2]
   308a4:	mov	r5, ip
   308a8:	sub	r3, r3, #1
   308ac:	str	r3, [r4, r2, lsl #2]
   308b0:	ldr	r3, [lr], #4
   308b4:	mov	r1, lr
   308b8:	str	r3, [ip, #4]
   308bc:	cmp	fp, r1
   308c0:	bne	308f4 <GetDataSlab+0x149d8>
   308c4:	ldr	r3, [sp, #204]	; 0xcc
   308c8:	ldr	r1, [sp, #12]
   308cc:	add	ip, ip, #4
   308d0:	ldr	r3, [r3, r2, lsl #2]
   308d4:	mul	r3, r3, r1
   308d8:	ldr	r1, [sp, #196]	; 0xc4
   308dc:	str	r3, [sp, #12]
   308e0:	ldr	r3, [r5]
   308e4:	ldr	r1, [r1, r2, lsl #2]
   308e8:	add	r2, r2, #1
   308ec:	mla	r6, r1, r3, r6
   308f0:	b	30784 <GetDataSlab+0x14868>
   308f4:	ldr	r7, [r4, r2, lsl #2]
   308f8:	mov	r0, r1
   308fc:	ldr	r3, [r1, #-4]!
   30900:	mul	r3, r3, r7
   30904:	ldr	r7, [ip, #4]
   30908:	str	r3, [r4, r2, lsl #2]
   3090c:	ldr	r3, [r0]
   30910:	mul	r3, r3, r7
   30914:	str	r3, [ip, #4]
   30918:	b	308bc <GetDataSlab+0x149a0>
   3091c:	ldrh	r3, [r1, #2]!
   30920:	strb	r3, [r2], #1
   30924:	b	30988 <GetDataSlab+0x14a6c>
   30928:	cmp	r2, #0
   3092c:	beq	30a2c <GetDataSlab+0x14b10>
   30930:	ldr	r3, [r8]
   30934:	mul	r3, r3, r2
   30938:	b	30a24 <GetDataSlab+0x14b08>
   3093c:	add	r3, sp, #152	; 0x98
   30940:	add	r3, r3, r5, lsl #2
   30944:	ldr	r3, [r3, #-120]	; 0xffffff88
   30948:	add	r6, r6, r3
   3094c:	add	r4, r4, r3, lsl #1
   30950:	ldr	r3, [sp, #8]
   30954:	add	r9, r9, r3
   30958:	ldr	r3, [sp, #12]
   3095c:	cmp	r9, r3
   30960:	bge	1c04c <GetDataSlab+0x130>
   30964:	ldr	r3, [sp, #196]	; 0xc4
   30968:	ldr	r3, [r3]
   3096c:	cmp	r3, #0
   30970:	addne	r4, r4, r3, lsl #1
   30974:	addne	r6, r6, r3
   30978:	ldr	r3, [sp]
   3097c:	sub	r1, r4, #2
   30980:	add	r2, r3, r9
   30984:	mov	r0, r2
   30988:	ldr	r3, [sp, #204]	; 0xcc
   3098c:	ldr	r3, [r3]
   30990:	str	r3, [sp, #8]
   30994:	ldr	ip, [sp, #8]
   30998:	sub	r3, r2, r0
   3099c:	cmp	ip, r3
   309a0:	bgt	3091c <GetDataSlab+0x14a00>
   309a4:	ldr	r3, [sp, #196]	; 0xc4
   309a8:	ldr	r2, [fp]
   309ac:	ldr	r8, [sp, #4]
   309b0:	ldr	r3, [r3]
   309b4:	ldr	r5, [sp, #16]
   309b8:	sub	r3, r2, r3
   309bc:	add	r6, r6, r3
   309c0:	add	r4, r4, r3, lsl #1
   309c4:	ldr	r3, [sp, #208]	; 0xd0
   309c8:	cmp	r5, r3
   309cc:	bge	30950 <GetDataSlab+0x14a34>
   309d0:	ldr	r3, [sl, r5, lsl #2]
   309d4:	ldr	r2, [sp, #204]	; 0xcc
   309d8:	add	r3, r3, #1
   309dc:	str	r3, [sl, r5, lsl #2]
   309e0:	mov	r0, r3
   309e4:	ldr	r1, [r2, r5, lsl #2]
   309e8:	bl	3fd18 <__aeabi_idivmod>
   309ec:	subs	r3, r1, #0
   309f0:	bne	3093c <GetDataSlab+0x14a20>
   309f4:	ldr	r7, [r8, #4]
   309f8:	str	r3, [sl, r5, lsl #2]
   309fc:	mov	r1, r7
   30a00:	mov	r0, r6
   30a04:	bl	3fd18 <__aeabi_idivmod>
   30a08:	ldr	r2, [sp, #196]	; 0xc4
   30a0c:	ldr	r2, [r2, r5, lsl #2]
   30a10:	subs	r3, r1, #0
   30a14:	beq	30928 <GetDataSlab+0x14a0c>
   30a18:	ldr	r1, [r8]
   30a1c:	sub	r3, r7, r3
   30a20:	mla	r3, r2, r1, r3
   30a24:	add	r4, r4, r3, lsl #1
   30a28:	add	r6, r6, r3
   30a2c:	add	r5, r5, #1
   30a30:	add	r8, r8, #4
   30a34:	b	309c4 <GetDataSlab+0x14aa8>
   30a38:	ldrh	r3, [r4]
   30a3c:	strb	r3, [r2], #1
   30a40:	ldr	r3, [r9]
   30a44:	add	r6, r6, r3
   30a48:	add	r4, r4, r3, lsl #1
   30a4c:	b	307e4 <GetDataSlab+0x148c8>
   30a50:	cmp	r2, #0
   30a54:	beq	30894 <GetDataSlab+0x14978>
   30a58:	ldr	r3, [r8]
   30a5c:	mul	r3, r3, r2
   30a60:	b	3088c <GetDataSlab+0x14970>
   30a64:	add	r3, sp, #152	; 0x98
   30a68:	add	r3, r3, r5, lsl #2
   30a6c:	ldr	r3, [r3, #-120]	; 0xffffff88
   30a70:	add	r6, r6, r3
   30a74:	add	r4, r4, r3, lsl #1
   30a78:	ldr	r3, [sp, #8]
   30a7c:	ldr	r2, [sp, #16]
   30a80:	add	r3, r3, r2
   30a84:	b	307ac <GetDataSlab+0x14890>
   30a88:	ldr	r3, [r9]
   30a8c:	ldr	ip, [sp, #4]
   30a90:	str	r3, [sp, #16]
   30a94:	sub	r3, r3, #1
   30a98:	str	r3, [sp, #32]
   30a9c:	ldr	r3, [fp]
   30aa0:	mov	lr, fp
   30aa4:	str	r3, [sp, #112]	; 0x70
   30aa8:	ldr	r3, [sp, #204]	; 0xcc
   30aac:	mov	r6, #0
   30ab0:	mov	r2, #1
   30ab4:	ldr	r3, [r3]
   30ab8:	str	r3, [sp, #12]
   30abc:	ldr	r3, [sp, #208]	; 0xd0
   30ac0:	cmp	r2, r3
   30ac4:	blt	30bd8 <GetDataSlab+0x14cbc>
   30ac8:	ldr	r3, [sp, #8]
   30acc:	add	r4, r3, r6
   30ad0:	ldr	r3, [sp, #16]
   30ad4:	cmp	r3, #1
   30ad8:	movne	r3, #0
   30adc:	moveq	r9, #0
   30ae0:	beq	30c90 <GetDataSlab+0x14d74>
   30ae4:	str	r3, [sp, #8]
   30ae8:	ldr	r3, [sp, #8]
   30aec:	ldr	r2, [sp, #12]
   30af0:	cmp	r3, r2
   30af4:	bge	1c04c <GetDataSlab+0x130>
   30af8:	ldr	r3, [sp, #196]	; 0xc4
   30afc:	ldr	r2, [sp, #8]
   30b00:	ldr	r3, [r3]
   30b04:	cmp	r3, #0
   30b08:	addne	r4, r4, r3
   30b0c:	addne	r6, r6, r3
   30b10:	ldr	r3, [sp]
   30b14:	add	r2, r3, r2
   30b18:	mov	r1, r2
   30b1c:	ldr	r3, [sp, #204]	; 0xcc
   30b20:	ldr	r3, [r3]
   30b24:	str	r3, [sp, #16]
   30b28:	ldr	r0, [sp, #16]
   30b2c:	sub	r3, r2, r1
   30b30:	cmp	r0, r3
   30b34:	bgt	30d6c <GetDataSlab+0x14e50>
   30b38:	ldr	r3, [r9]
   30b3c:	ldr	r2, [fp]
   30b40:	ldr	r8, [sp, #4]
   30b44:	mul	r3, r3, r0
   30b48:	mov	r5, #1
   30b4c:	sub	r3, r2, r3
   30b50:	ldr	r2, [sp, #196]	; 0xc4
   30b54:	ldr	r2, [r2]
   30b58:	sub	r3, r3, r2
   30b5c:	add	r6, r6, r3
   30b60:	add	r4, r4, r3
   30b64:	ldr	r3, [sp, #208]	; 0xd0
   30b68:	cmp	r5, r3
   30b6c:	bge	30dac <GetDataSlab+0x14e90>
   30b70:	ldr	r3, [sl, r5, lsl #2]
   30b74:	ldr	r2, [sp, #204]	; 0xcc
   30b78:	add	r3, r3, #1
   30b7c:	str	r3, [sl, r5, lsl #2]
   30b80:	mov	r0, r3
   30b84:	ldr	r1, [r2, r5, lsl #2]
   30b88:	bl	3fd18 <__aeabi_idivmod>
   30b8c:	subs	r3, r1, #0
   30b90:	bne	30d98 <GetDataSlab+0x14e7c>
   30b94:	ldr	r7, [r8, #4]
   30b98:	str	r3, [sl, r5, lsl #2]
   30b9c:	mov	r1, r7
   30ba0:	mov	r0, r6
   30ba4:	bl	3fd18 <__aeabi_idivmod>
   30ba8:	ldr	r2, [sp, #196]	; 0xc4
   30bac:	ldr	r2, [r2, r5, lsl #2]
   30bb0:	subs	r3, r1, #0
   30bb4:	beq	30d84 <GetDataSlab+0x14e68>
   30bb8:	ldr	r1, [r8]
   30bbc:	sub	r3, r7, r3
   30bc0:	mla	r3, r2, r1, r3
   30bc4:	add	r4, r4, r3
   30bc8:	add	r6, r6, r3
   30bcc:	add	r5, r5, #1
   30bd0:	add	r8, r8, #4
   30bd4:	b	30b64 <GetDataSlab+0x14c48>
   30bd8:	ldr	r3, [r9, r2, lsl #2]
   30bdc:	mov	r5, ip
   30be0:	sub	r3, r3, #1
   30be4:	str	r3, [r4, r2, lsl #2]
   30be8:	ldr	r3, [lr], #4
   30bec:	mov	r1, lr
   30bf0:	str	r3, [ip, #4]
   30bf4:	cmp	r1, fp
   30bf8:	bne	30c2c <GetDataSlab+0x14d10>
   30bfc:	ldr	r3, [sp, #204]	; 0xcc
   30c00:	ldr	r1, [sp, #12]
   30c04:	add	ip, ip, #4
   30c08:	ldr	r3, [r3, r2, lsl #2]
   30c0c:	mul	r3, r3, r1
   30c10:	ldr	r1, [sp, #196]	; 0xc4
   30c14:	str	r3, [sp, #12]
   30c18:	ldr	r3, [r5]
   30c1c:	ldr	r1, [r1, r2, lsl #2]
   30c20:	add	r2, r2, #1
   30c24:	mla	r6, r1, r3, r6
   30c28:	b	30abc <GetDataSlab+0x14ba0>
   30c2c:	ldr	r7, [r4, r2, lsl #2]
   30c30:	mov	r0, r1
   30c34:	ldr	r3, [r1, #-4]!
   30c38:	mul	r3, r3, r7
   30c3c:	ldr	r7, [ip, #4]
   30c40:	str	r3, [r4, r2, lsl #2]
   30c44:	ldr	r3, [r0]
   30c48:	mul	r3, r3, r7
   30c4c:	str	r3, [ip, #4]
   30c50:	b	30bf4 <GetDataSlab+0x14cd8>
   30c54:	ldrsb	r3, [r2], #1
   30c58:	strb	r3, [r1], #1
   30c5c:	b	30cbc <GetDataSlab+0x14da0>
   30c60:	cmp	r2, #0
   30c64:	beq	30d60 <GetDataSlab+0x14e44>
   30c68:	ldr	r3, [r8]
   30c6c:	mul	r3, r3, r2
   30c70:	b	30d58 <GetDataSlab+0x14e3c>
   30c74:	add	r3, sp, #152	; 0x98
   30c78:	add	r3, r3, r5, lsl #2
   30c7c:	ldr	r3, [r3, #-120]	; 0xffffff88
   30c80:	add	r6, r6, r3
   30c84:	add	r4, r4, r3
   30c88:	ldr	r3, [sp, #8]
   30c8c:	add	r9, r9, r3
   30c90:	ldr	r3, [sp, #12]
   30c94:	cmp	r9, r3
   30c98:	bge	1c04c <GetDataSlab+0x130>
   30c9c:	ldr	r3, [sp, #196]	; 0xc4
   30ca0:	ldr	r3, [r3]
   30ca4:	cmp	r3, #0
   30ca8:	addne	r4, r4, r3
   30cac:	addne	r6, r6, r3
   30cb0:	ldr	r3, [sp]
   30cb4:	mov	r2, r4
   30cb8:	add	r1, r3, r9
   30cbc:	ldr	r3, [sp, #204]	; 0xcc
   30cc0:	ldr	r3, [r3]
   30cc4:	str	r3, [sp, #8]
   30cc8:	ldr	r0, [sp, #8]
   30ccc:	sub	r3, r2, r4
   30cd0:	cmp	r0, r3
   30cd4:	bgt	30c54 <GetDataSlab+0x14d38>
   30cd8:	ldr	r3, [sp, #196]	; 0xc4
   30cdc:	ldr	r2, [fp]
   30ce0:	ldr	r8, [sp, #4]
   30ce4:	ldr	r3, [r3]
   30ce8:	ldr	r5, [sp, #16]
   30cec:	sub	r3, r2, r3
   30cf0:	add	r6, r6, r3
   30cf4:	add	r4, r4, r3
   30cf8:	ldr	r3, [sp, #208]	; 0xd0
   30cfc:	cmp	r5, r3
   30d00:	bge	30c88 <GetDataSlab+0x14d6c>
   30d04:	ldr	r3, [sl, r5, lsl #2]
   30d08:	ldr	r2, [sp, #204]	; 0xcc
   30d0c:	add	r3, r3, #1
   30d10:	str	r3, [sl, r5, lsl #2]
   30d14:	mov	r0, r3
   30d18:	ldr	r1, [r2, r5, lsl #2]
   30d1c:	bl	3fd18 <__aeabi_idivmod>
   30d20:	subs	r3, r1, #0
   30d24:	bne	30c74 <GetDataSlab+0x14d58>
   30d28:	ldr	r7, [r8, #4]
   30d2c:	str	r3, [sl, r5, lsl #2]
   30d30:	mov	r1, r7
   30d34:	mov	r0, r6
   30d38:	bl	3fd18 <__aeabi_idivmod>
   30d3c:	ldr	r2, [sp, #196]	; 0xc4
   30d40:	ldr	r2, [r2, r5, lsl #2]
   30d44:	subs	r3, r1, #0
   30d48:	beq	30c60 <GetDataSlab+0x14d44>
   30d4c:	ldr	r1, [r8]
   30d50:	sub	r3, r7, r3
   30d54:	mla	r3, r2, r1, r3
   30d58:	add	r4, r4, r3
   30d5c:	add	r6, r6, r3
   30d60:	add	r5, r5, #1
   30d64:	add	r8, r8, #4
   30d68:	b	30cf8 <GetDataSlab+0x14ddc>
   30d6c:	ldrsb	r3, [r4]
   30d70:	strb	r3, [r2], #1
   30d74:	ldr	r3, [r9]
   30d78:	add	r4, r4, r3
   30d7c:	add	r6, r6, r3
   30d80:	b	30b1c <GetDataSlab+0x14c00>
   30d84:	cmp	r2, #0
   30d88:	beq	30bcc <GetDataSlab+0x14cb0>
   30d8c:	ldr	r3, [r8]
   30d90:	mul	r3, r3, r2
   30d94:	b	30bc4 <GetDataSlab+0x14ca8>
   30d98:	add	r3, sp, #152	; 0x98
   30d9c:	add	r3, r3, r5, lsl #2
   30da0:	ldr	r3, [r3, #-120]	; 0xffffff88
   30da4:	add	r6, r6, r3
   30da8:	add	r4, r4, r3
   30dac:	ldr	r3, [sp, #8]
   30db0:	ldr	r2, [sp, #16]
   30db4:	add	r3, r3, r2
   30db8:	b	30ae4 <GetDataSlab+0x14bc8>
   30dbc:	ldr	r3, [r9]
   30dc0:	ldr	ip, [sp, #4]
   30dc4:	str	r3, [sp, #16]
   30dc8:	sub	r3, r3, #1
   30dcc:	str	r3, [sp, #32]
   30dd0:	ldr	r3, [fp]
   30dd4:	mov	lr, fp
   30dd8:	str	r3, [sp, #112]	; 0x70
   30ddc:	ldr	r3, [sp, #204]	; 0xcc
   30de0:	mov	r6, #0
   30de4:	mov	r2, #1
   30de8:	ldr	r3, [r3]
   30dec:	str	r3, [sp, #12]
   30df0:	ldr	r3, [sp, #208]	; 0xd0
   30df4:	cmp	r2, r3
   30df8:	blt	30f0c <GetDataSlab+0x14ff0>
   30dfc:	ldr	r3, [sp, #8]
   30e00:	add	r4, r3, r6
   30e04:	ldr	r3, [sp, #16]
   30e08:	cmp	r3, #1
   30e0c:	movne	r3, #0
   30e10:	moveq	r9, #0
   30e14:	beq	30fc4 <GetDataSlab+0x150a8>
   30e18:	str	r3, [sp, #8]
   30e1c:	ldr	r3, [sp, #8]
   30e20:	ldr	r2, [sp, #12]
   30e24:	cmp	r3, r2
   30e28:	bge	1c04c <GetDataSlab+0x130>
   30e2c:	ldr	r3, [sp, #196]	; 0xc4
   30e30:	ldr	r2, [sp, #8]
   30e34:	ldr	r3, [r3]
   30e38:	cmp	r3, #0
   30e3c:	addne	r4, r4, r3
   30e40:	addne	r6, r6, r3
   30e44:	ldr	r3, [sp]
   30e48:	add	r2, r3, r2
   30e4c:	mov	r1, r2
   30e50:	ldr	r3, [sp, #204]	; 0xcc
   30e54:	ldr	r3, [r3]
   30e58:	str	r3, [sp, #16]
   30e5c:	ldr	r0, [sp, #16]
   30e60:	sub	r3, r2, r1
   30e64:	cmp	r0, r3
   30e68:	bgt	310a0 <GetDataSlab+0x15184>
   30e6c:	ldr	r3, [r9]
   30e70:	ldr	r2, [fp]
   30e74:	ldr	r8, [sp, #4]
   30e78:	mul	r3, r3, r0
   30e7c:	mov	r5, #1
   30e80:	sub	r3, r2, r3
   30e84:	ldr	r2, [sp, #196]	; 0xc4
   30e88:	ldr	r2, [r2]
   30e8c:	sub	r3, r3, r2
   30e90:	add	r6, r6, r3
   30e94:	add	r4, r4, r3
   30e98:	ldr	r3, [sp, #208]	; 0xd0
   30e9c:	cmp	r5, r3
   30ea0:	bge	310e0 <GetDataSlab+0x151c4>
   30ea4:	ldr	r3, [sl, r5, lsl #2]
   30ea8:	ldr	r2, [sp, #204]	; 0xcc
   30eac:	add	r3, r3, #1
   30eb0:	str	r3, [sl, r5, lsl #2]
   30eb4:	mov	r0, r3
   30eb8:	ldr	r1, [r2, r5, lsl #2]
   30ebc:	bl	3fd18 <__aeabi_idivmod>
   30ec0:	subs	r3, r1, #0
   30ec4:	bne	310cc <GetDataSlab+0x151b0>
   30ec8:	ldr	r7, [r8, #4]
   30ecc:	str	r3, [sl, r5, lsl #2]
   30ed0:	mov	r1, r7
   30ed4:	mov	r0, r6
   30ed8:	bl	3fd18 <__aeabi_idivmod>
   30edc:	ldr	r2, [sp, #196]	; 0xc4
   30ee0:	ldr	r2, [r2, r5, lsl #2]
   30ee4:	subs	r3, r1, #0
   30ee8:	beq	310b8 <GetDataSlab+0x1519c>
   30eec:	ldr	r1, [r8]
   30ef0:	sub	r3, r7, r3
   30ef4:	mla	r3, r2, r1, r3
   30ef8:	add	r4, r4, r3
   30efc:	add	r6, r6, r3
   30f00:	add	r5, r5, #1
   30f04:	add	r8, r8, #4
   30f08:	b	30e98 <GetDataSlab+0x14f7c>
   30f0c:	ldr	r3, [r9, r2, lsl #2]
   30f10:	mov	r5, ip
   30f14:	sub	r3, r3, #1
   30f18:	str	r3, [r4, r2, lsl #2]
   30f1c:	ldr	r3, [lr], #4
   30f20:	mov	r1, lr
   30f24:	str	r3, [ip, #4]
   30f28:	cmp	fp, r1
   30f2c:	bne	30f60 <GetDataSlab+0x15044>
   30f30:	ldr	r3, [sp, #204]	; 0xcc
   30f34:	ldr	r1, [sp, #12]
   30f38:	add	ip, ip, #4
   30f3c:	ldr	r3, [r3, r2, lsl #2]
   30f40:	mul	r3, r3, r1
   30f44:	ldr	r1, [sp, #196]	; 0xc4
   30f48:	str	r3, [sp, #12]
   30f4c:	ldr	r3, [r5]
   30f50:	ldr	r1, [r1, r2, lsl #2]
   30f54:	add	r2, r2, #1
   30f58:	mla	r6, r1, r3, r6
   30f5c:	b	30df0 <GetDataSlab+0x14ed4>
   30f60:	ldr	r7, [r4, r2, lsl #2]
   30f64:	mov	r0, r1
   30f68:	ldr	r3, [r1, #-4]!
   30f6c:	mul	r3, r3, r7
   30f70:	ldr	r7, [ip, #4]
   30f74:	str	r3, [r4, r2, lsl #2]
   30f78:	ldr	r3, [r0]
   30f7c:	mul	r3, r3, r7
   30f80:	str	r3, [ip, #4]
   30f84:	b	30f28 <GetDataSlab+0x1500c>
   30f88:	ldrb	r3, [r2], #1
   30f8c:	strb	r3, [r1], #1
   30f90:	b	30ff0 <GetDataSlab+0x150d4>
   30f94:	cmp	r2, #0
   30f98:	beq	31094 <GetDataSlab+0x15178>
   30f9c:	ldr	r3, [r8]
   30fa0:	mul	r3, r3, r2
   30fa4:	b	3108c <GetDataSlab+0x15170>
   30fa8:	add	r3, sp, #152	; 0x98
   30fac:	add	r3, r3, r5, lsl #2
   30fb0:	ldr	r3, [r3, #-120]	; 0xffffff88
   30fb4:	add	r6, r6, r3
   30fb8:	add	r4, r4, r3
   30fbc:	ldr	r3, [sp, #8]
   30fc0:	add	r9, r9, r3
   30fc4:	ldr	r3, [sp, #12]
   30fc8:	cmp	r9, r3
   30fcc:	bge	1c04c <GetDataSlab+0x130>
   30fd0:	ldr	r3, [sp, #196]	; 0xc4
   30fd4:	ldr	r3, [r3]
   30fd8:	cmp	r3, #0
   30fdc:	addne	r4, r4, r3
   30fe0:	addne	r6, r6, r3
   30fe4:	ldr	r3, [sp]
   30fe8:	mov	r2, r4
   30fec:	add	r1, r3, r9
   30ff0:	ldr	r3, [sp, #204]	; 0xcc
   30ff4:	ldr	r3, [r3]
   30ff8:	str	r3, [sp, #8]
   30ffc:	ldr	r0, [sp, #8]
   31000:	sub	r3, r2, r4
   31004:	cmp	r0, r3
   31008:	bgt	30f88 <GetDataSlab+0x1506c>
   3100c:	ldr	r3, [sp, #196]	; 0xc4
   31010:	ldr	r2, [fp]
   31014:	ldr	r8, [sp, #4]
   31018:	ldr	r3, [r3]
   3101c:	ldr	r5, [sp, #16]
   31020:	sub	r3, r2, r3
   31024:	add	r6, r6, r3
   31028:	add	r4, r4, r3
   3102c:	ldr	r3, [sp, #208]	; 0xd0
   31030:	cmp	r5, r3
   31034:	bge	30fbc <GetDataSlab+0x150a0>
   31038:	ldr	r3, [sl, r5, lsl #2]
   3103c:	ldr	r2, [sp, #204]	; 0xcc
   31040:	add	r3, r3, #1
   31044:	str	r3, [sl, r5, lsl #2]
   31048:	mov	r0, r3
   3104c:	ldr	r1, [r2, r5, lsl #2]
   31050:	bl	3fd18 <__aeabi_idivmod>
   31054:	subs	r3, r1, #0
   31058:	bne	30fa8 <GetDataSlab+0x1508c>
   3105c:	ldr	r7, [r8, #4]
   31060:	str	r3, [sl, r5, lsl #2]
   31064:	mov	r1, r7
   31068:	mov	r0, r6
   3106c:	bl	3fd18 <__aeabi_idivmod>
   31070:	ldr	r2, [sp, #196]	; 0xc4
   31074:	ldr	r2, [r2, r5, lsl #2]
   31078:	subs	r3, r1, #0
   3107c:	beq	30f94 <GetDataSlab+0x15078>
   31080:	ldr	r1, [r8]
   31084:	sub	r3, r7, r3
   31088:	mla	r3, r2, r1, r3
   3108c:	add	r4, r4, r3
   31090:	add	r6, r6, r3
   31094:	add	r5, r5, #1
   31098:	add	r8, r8, #4
   3109c:	b	3102c <GetDataSlab+0x15110>
   310a0:	ldrb	r3, [r4]
   310a4:	strb	r3, [r2], #1
   310a8:	ldr	r3, [r9]
   310ac:	add	r4, r4, r3
   310b0:	add	r6, r6, r3
   310b4:	b	30e50 <GetDataSlab+0x14f34>
   310b8:	cmp	r2, #0
   310bc:	beq	30f00 <GetDataSlab+0x14fe4>
   310c0:	ldr	r3, [r8]
   310c4:	mul	r3, r3, r2
   310c8:	b	30ef8 <GetDataSlab+0x14fdc>
   310cc:	add	r3, sp, #152	; 0x98
   310d0:	add	r3, r3, r5, lsl #2
   310d4:	ldr	r3, [r3, #-120]	; 0xffffff88
   310d8:	add	r6, r6, r3
   310dc:	add	r4, r4, r3
   310e0:	ldr	r3, [sp, #8]
   310e4:	ldr	r2, [sp, #16]
   310e8:	add	r3, r3, r2
   310ec:	b	30e18 <GetDataSlab+0x14efc>
   310f0:	cmp	r5, #12
   310f4:	bne	31430 <GetDataSlab+0x15514>
   310f8:	ldr	r3, [r9]
   310fc:	ldr	ip, [sp, #4]
   31100:	str	r3, [sp, #16]
   31104:	sub	r3, r3, #1
   31108:	str	r3, [sp, #32]
   3110c:	ldr	r3, [fp]
   31110:	mov	lr, fp
   31114:	str	r3, [sp, #112]	; 0x70
   31118:	ldr	r3, [sp, #204]	; 0xcc
   3111c:	mov	r6, #0
   31120:	mov	r2, #1
   31124:	ldr	r3, [r3]
   31128:	str	r3, [sp, #12]
   3112c:	ldr	r3, [sp, #208]	; 0xd0
   31130:	cmp	r2, r3
   31134:	blt	31248 <GetDataSlab+0x1532c>
   31138:	ldr	r3, [sp, #8]
   3113c:	add	r4, r3, r6, lsl #3
   31140:	ldr	r3, [sp, #16]
   31144:	cmp	r3, #1
   31148:	movne	r3, #0
   3114c:	moveq	r9, #0
   31150:	beq	31300 <GetDataSlab+0x153e4>
   31154:	str	r3, [sp, #8]
   31158:	ldr	r3, [sp, #8]
   3115c:	ldr	r2, [sp, #12]
   31160:	cmp	r3, r2
   31164:	bge	1c04c <GetDataSlab+0x130>
   31168:	ldr	r3, [sp, #196]	; 0xc4
   3116c:	ldr	r2, [sp, #8]
   31170:	ldr	r3, [r3]
   31174:	cmp	r3, #0
   31178:	addne	r4, r4, r3, lsl #3
   3117c:	addne	r6, r6, r3
   31180:	ldr	r3, [sp]
   31184:	add	r2, r3, r2
   31188:	mov	r1, r2
   3118c:	ldr	r3, [sp, #204]	; 0xcc
   31190:	ldr	r3, [r3]
   31194:	str	r3, [sp, #16]
   31198:	ldr	r0, [sp, #16]
   3119c:	sub	r3, r2, r1
   311a0:	cmp	r0, r3
   311a4:	bgt	313e0 <GetDataSlab+0x154c4>
   311a8:	ldr	r3, [r9]
   311ac:	ldr	r2, [fp]
   311b0:	ldr	r8, [sp, #4]
   311b4:	mul	r3, r3, r0
   311b8:	mov	r5, #1
   311bc:	sub	r3, r2, r3
   311c0:	ldr	r2, [sp, #196]	; 0xc4
   311c4:	ldr	r2, [r2]
   311c8:	sub	r3, r3, r2
   311cc:	add	r6, r6, r3
   311d0:	add	r4, r4, r3, lsl #3
   311d4:	ldr	r3, [sp, #208]	; 0xd0
   311d8:	cmp	r5, r3
   311dc:	bge	31420 <GetDataSlab+0x15504>
   311e0:	ldr	r3, [sl, r5, lsl #2]
   311e4:	ldr	r2, [sp, #204]	; 0xcc
   311e8:	add	r3, r3, #1
   311ec:	str	r3, [sl, r5, lsl #2]
   311f0:	mov	r0, r3
   311f4:	ldr	r1, [r2, r5, lsl #2]
   311f8:	bl	3fd18 <__aeabi_idivmod>
   311fc:	subs	r3, r1, #0
   31200:	bne	3140c <GetDataSlab+0x154f0>
   31204:	ldr	r7, [r8, #4]
   31208:	str	r3, [sl, r5, lsl #2]
   3120c:	mov	r1, r7
   31210:	mov	r0, r6
   31214:	bl	3fd18 <__aeabi_idivmod>
   31218:	ldr	r2, [sp, #196]	; 0xc4
   3121c:	ldr	r2, [r2, r5, lsl #2]
   31220:	subs	r3, r1, #0
   31224:	beq	313f8 <GetDataSlab+0x154dc>
   31228:	ldr	r1, [r8]
   3122c:	sub	r3, r7, r3
   31230:	mla	r3, r2, r1, r3
   31234:	add	r4, r4, r3, lsl #3
   31238:	add	r6, r6, r3
   3123c:	add	r5, r5, #1
   31240:	add	r8, r8, #4
   31244:	b	311d4 <GetDataSlab+0x152b8>
   31248:	ldr	r3, [r9, r2, lsl #2]
   3124c:	mov	r5, ip
   31250:	sub	r3, r3, #1
   31254:	str	r3, [r4, r2, lsl #2]
   31258:	ldr	r3, [lr], #4
   3125c:	mov	r1, lr
   31260:	str	r3, [ip, #4]
   31264:	cmp	fp, r1
   31268:	bne	3129c <GetDataSlab+0x15380>
   3126c:	ldr	r3, [sp, #204]	; 0xcc
   31270:	ldr	r1, [sp, #12]
   31274:	add	ip, ip, #4
   31278:	ldr	r3, [r3, r2, lsl #2]
   3127c:	mul	r3, r3, r1
   31280:	ldr	r1, [sp, #196]	; 0xc4
   31284:	str	r3, [sp, #12]
   31288:	ldr	r3, [r5]
   3128c:	ldr	r1, [r1, r2, lsl #2]
   31290:	add	r2, r2, #1
   31294:	mla	r6, r1, r3, r6
   31298:	b	3112c <GetDataSlab+0x15210>
   3129c:	ldr	r7, [r4, r2, lsl #2]
   312a0:	mov	r0, r1
   312a4:	ldr	r3, [r1, #-4]!
   312a8:	mul	r3, r3, r7
   312ac:	ldr	r7, [ip, #4]
   312b0:	str	r3, [r4, r2, lsl #2]
   312b4:	ldr	r3, [r0]
   312b8:	mul	r3, r3, r7
   312bc:	str	r3, [ip, #4]
   312c0:	b	31264 <GetDataSlab+0x15348>
   312c4:	ldr	r3, [r1, #8]!
   312c8:	strb	r3, [r2], #1
   312cc:	b	31330 <GetDataSlab+0x15414>
   312d0:	cmp	r2, #0
   312d4:	beq	313d4 <GetDataSlab+0x154b8>
   312d8:	ldr	r3, [r8]
   312dc:	mul	r3, r3, r2
   312e0:	b	313cc <GetDataSlab+0x154b0>
   312e4:	add	r3, sp, #152	; 0x98
   312e8:	add	r3, r3, r5, lsl #2
   312ec:	ldr	r3, [r3, #-120]	; 0xffffff88
   312f0:	add	r6, r6, r3
   312f4:	add	r4, r4, r3, lsl #3
   312f8:	ldr	r3, [sp, #8]
   312fc:	add	r9, r9, r3
   31300:	ldr	r3, [sp, #12]
   31304:	cmp	r9, r3
   31308:	bge	1c04c <GetDataSlab+0x130>
   3130c:	ldr	r3, [sp, #196]	; 0xc4
   31310:	ldr	r3, [r3]
   31314:	cmp	r3, #0
   31318:	addne	r4, r4, r3, lsl #3
   3131c:	addne	r6, r6, r3
   31320:	ldr	r3, [sp]
   31324:	sub	r1, r4, #8
   31328:	add	r2, r3, r9
   3132c:	mov	r0, r2
   31330:	ldr	r3, [sp, #204]	; 0xcc
   31334:	ldr	r3, [r3]
   31338:	str	r3, [sp, #8]
   3133c:	ldr	ip, [sp, #8]
   31340:	sub	r3, r2, r0
   31344:	cmp	ip, r3
   31348:	bgt	312c4 <GetDataSlab+0x153a8>
   3134c:	ldr	r3, [sp, #196]	; 0xc4
   31350:	ldr	r2, [fp]
   31354:	ldr	r8, [sp, #4]
   31358:	ldr	r3, [r3]
   3135c:	ldr	r5, [sp, #16]
   31360:	sub	r3, r2, r3
   31364:	add	r6, r6, r3
   31368:	add	r4, r4, r3, lsl #3
   3136c:	ldr	r3, [sp, #208]	; 0xd0
   31370:	cmp	r5, r3
   31374:	bge	312f8 <GetDataSlab+0x153dc>
   31378:	ldr	r3, [sl, r5, lsl #2]
   3137c:	ldr	r2, [sp, #204]	; 0xcc
   31380:	add	r3, r3, #1
   31384:	str	r3, [sl, r5, lsl #2]
   31388:	mov	r0, r3
   3138c:	ldr	r1, [r2, r5, lsl #2]
   31390:	bl	3fd18 <__aeabi_idivmod>
   31394:	subs	r3, r1, #0
   31398:	bne	312e4 <GetDataSlab+0x153c8>
   3139c:	ldr	r7, [r8, #4]
   313a0:	str	r3, [sl, r5, lsl #2]
   313a4:	mov	r1, r7
   313a8:	mov	r0, r6
   313ac:	bl	3fd18 <__aeabi_idivmod>
   313b0:	ldr	r2, [sp, #196]	; 0xc4
   313b4:	ldr	r2, [r2, r5, lsl #2]
   313b8:	subs	r3, r1, #0
   313bc:	beq	312d0 <GetDataSlab+0x153b4>
   313c0:	ldr	r1, [r8]
   313c4:	sub	r3, r7, r3
   313c8:	mla	r3, r2, r1, r3
   313cc:	add	r4, r4, r3, lsl #3
   313d0:	add	r6, r6, r3
   313d4:	add	r5, r5, #1
   313d8:	add	r8, r8, #4
   313dc:	b	3136c <GetDataSlab+0x15450>
   313e0:	ldr	r3, [r4]
   313e4:	strb	r3, [r2], #1
   313e8:	ldr	r3, [r9]
   313ec:	add	r6, r6, r3
   313f0:	add	r4, r4, r3, lsl #3
   313f4:	b	3118c <GetDataSlab+0x15270>
   313f8:	cmp	r2, #0
   313fc:	beq	3123c <GetDataSlab+0x15320>
   31400:	ldr	r3, [r8]
   31404:	mul	r3, r3, r2
   31408:	b	31234 <GetDataSlab+0x15318>
   3140c:	add	r3, sp, #152	; 0x98
   31410:	add	r3, r3, r5, lsl #2
   31414:	ldr	r3, [r3, #-120]	; 0xffffff88
   31418:	add	r6, r6, r3
   3141c:	add	r4, r4, r3, lsl #3
   31420:	ldr	r3, [sp, #8]
   31424:	ldr	r2, [sp, #16]
   31428:	add	r3, r3, r2
   3142c:	b	31154 <GetDataSlab+0x15238>
   31430:	cmp	r5, #13
   31434:	bne	337fc <GetDataSlab+0x178e0>
   31438:	ldr	r3, [r9]
   3143c:	ldr	ip, [sp, #4]
   31440:	str	r3, [sp, #16]
   31444:	sub	r3, r3, #1
   31448:	str	r3, [sp, #32]
   3144c:	ldr	r3, [fp]
   31450:	mov	lr, fp
   31454:	str	r3, [sp, #112]	; 0x70
   31458:	ldr	r3, [sp, #204]	; 0xcc
   3145c:	mov	r6, #0
   31460:	mov	r2, #1
   31464:	ldr	r3, [r3]
   31468:	str	r3, [sp, #12]
   3146c:	ldr	r3, [sp, #208]	; 0xd0
   31470:	cmp	r2, r3
   31474:	blt	31588 <GetDataSlab+0x1566c>
   31478:	ldr	r3, [sp, #8]
   3147c:	add	r4, r3, r6, lsl #3
   31480:	ldr	r3, [sp, #16]
   31484:	cmp	r3, #1
   31488:	movne	r3, #0
   3148c:	moveq	r9, #0
   31490:	beq	31640 <GetDataSlab+0x15724>
   31494:	str	r3, [sp, #8]
   31498:	ldr	r3, [sp, #8]
   3149c:	ldr	r2, [sp, #12]
   314a0:	cmp	r3, r2
   314a4:	bge	1c04c <GetDataSlab+0x130>
   314a8:	ldr	r3, [sp, #196]	; 0xc4
   314ac:	ldr	r2, [sp, #8]
   314b0:	ldr	r3, [r3]
   314b4:	cmp	r3, #0
   314b8:	addne	r4, r4, r3, lsl #3
   314bc:	addne	r6, r6, r3
   314c0:	ldr	r3, [sp]
   314c4:	add	r2, r3, r2
   314c8:	mov	r1, r2
   314cc:	ldr	r3, [sp, #204]	; 0xcc
   314d0:	ldr	r3, [r3]
   314d4:	str	r3, [sp, #16]
   314d8:	ldr	r0, [sp, #16]
   314dc:	sub	r3, r2, r1
   314e0:	cmp	r0, r3
   314e4:	bgt	31720 <GetDataSlab+0x15804>
   314e8:	ldr	r3, [r9]
   314ec:	ldr	r2, [fp]
   314f0:	ldr	r8, [sp, #4]
   314f4:	mul	r3, r3, r0
   314f8:	mov	r5, #1
   314fc:	sub	r3, r2, r3
   31500:	ldr	r2, [sp, #196]	; 0xc4
   31504:	ldr	r2, [r2]
   31508:	sub	r3, r3, r2
   3150c:	add	r6, r6, r3
   31510:	add	r4, r4, r3, lsl #3
   31514:	ldr	r3, [sp, #208]	; 0xd0
   31518:	cmp	r5, r3
   3151c:	bge	31760 <GetDataSlab+0x15844>
   31520:	ldr	r3, [sl, r5, lsl #2]
   31524:	ldr	r2, [sp, #204]	; 0xcc
   31528:	add	r3, r3, #1
   3152c:	str	r3, [sl, r5, lsl #2]
   31530:	mov	r0, r3
   31534:	ldr	r1, [r2, r5, lsl #2]
   31538:	bl	3fd18 <__aeabi_idivmod>
   3153c:	subs	r3, r1, #0
   31540:	bne	3174c <GetDataSlab+0x15830>
   31544:	ldr	r7, [r8, #4]
   31548:	str	r3, [sl, r5, lsl #2]
   3154c:	mov	r1, r7
   31550:	mov	r0, r6
   31554:	bl	3fd18 <__aeabi_idivmod>
   31558:	ldr	r2, [sp, #196]	; 0xc4
   3155c:	ldr	r2, [r2, r5, lsl #2]
   31560:	subs	r3, r1, #0
   31564:	beq	31738 <GetDataSlab+0x1581c>
   31568:	ldr	r1, [r8]
   3156c:	sub	r3, r7, r3
   31570:	mla	r3, r2, r1, r3
   31574:	add	r4, r4, r3, lsl #3
   31578:	add	r6, r6, r3
   3157c:	add	r5, r5, #1
   31580:	add	r8, r8, #4
   31584:	b	31514 <GetDataSlab+0x155f8>
   31588:	ldr	r3, [r9, r2, lsl #2]
   3158c:	mov	r5, ip
   31590:	sub	r3, r3, #1
   31594:	str	r3, [r4, r2, lsl #2]
   31598:	ldr	r3, [lr], #4
   3159c:	mov	r1, lr
   315a0:	str	r3, [ip, #4]
   315a4:	cmp	r1, fp
   315a8:	bne	315dc <GetDataSlab+0x156c0>
   315ac:	ldr	r3, [sp, #204]	; 0xcc
   315b0:	ldr	r1, [sp, #12]
   315b4:	add	ip, ip, #4
   315b8:	ldr	r3, [r3, r2, lsl #2]
   315bc:	mul	r3, r3, r1
   315c0:	ldr	r1, [sp, #196]	; 0xc4
   315c4:	str	r3, [sp, #12]
   315c8:	ldr	r3, [r5]
   315cc:	ldr	r1, [r1, r2, lsl #2]
   315d0:	add	r2, r2, #1
   315d4:	mla	r6, r1, r3, r6
   315d8:	b	3146c <GetDataSlab+0x15550>
   315dc:	ldr	r7, [r4, r2, lsl #2]
   315e0:	mov	r0, r1
   315e4:	ldr	r3, [r1, #-4]!
   315e8:	mul	r3, r3, r7
   315ec:	ldr	r7, [ip, #4]
   315f0:	str	r3, [r4, r2, lsl #2]
   315f4:	ldr	r3, [r0]
   315f8:	mul	r3, r3, r7
   315fc:	str	r3, [ip, #4]
   31600:	b	315a4 <GetDataSlab+0x15688>
   31604:	ldr	r3, [r1, #8]!
   31608:	strb	r3, [r2], #1
   3160c:	b	31670 <GetDataSlab+0x15754>
   31610:	cmp	r2, #0
   31614:	beq	31714 <GetDataSlab+0x157f8>
   31618:	ldr	r3, [r8]
   3161c:	mul	r3, r3, r2
   31620:	b	3170c <GetDataSlab+0x157f0>
   31624:	add	r3, sp, #152	; 0x98
   31628:	add	r3, r3, r5, lsl #2
   3162c:	ldr	r3, [r3, #-120]	; 0xffffff88
   31630:	add	r6, r6, r3
   31634:	add	r4, r4, r3, lsl #3
   31638:	ldr	r3, [sp, #8]
   3163c:	add	r9, r9, r3
   31640:	ldr	r3, [sp, #12]
   31644:	cmp	r9, r3
   31648:	bge	1c04c <GetDataSlab+0x130>
   3164c:	ldr	r3, [sp, #196]	; 0xc4
   31650:	ldr	r3, [r3]
   31654:	cmp	r3, #0
   31658:	addne	r4, r4, r3, lsl #3
   3165c:	addne	r6, r6, r3
   31660:	ldr	r3, [sp]
   31664:	sub	r1, r4, #8
   31668:	add	r2, r3, r9
   3166c:	mov	r0, r2
   31670:	ldr	r3, [sp, #204]	; 0xcc
   31674:	ldr	r3, [r3]
   31678:	str	r3, [sp, #8]
   3167c:	ldr	ip, [sp, #8]
   31680:	sub	r3, r2, r0
   31684:	cmp	ip, r3
   31688:	bgt	31604 <GetDataSlab+0x156e8>
   3168c:	ldr	r3, [sp, #196]	; 0xc4
   31690:	ldr	r2, [fp]
   31694:	ldr	r8, [sp, #4]
   31698:	ldr	r3, [r3]
   3169c:	ldr	r5, [sp, #16]
   316a0:	sub	r3, r2, r3
   316a4:	add	r6, r6, r3
   316a8:	add	r4, r4, r3, lsl #3
   316ac:	ldr	r3, [sp, #208]	; 0xd0
   316b0:	cmp	r5, r3
   316b4:	bge	31638 <GetDataSlab+0x1571c>
   316b8:	ldr	r3, [sl, r5, lsl #2]
   316bc:	ldr	r2, [sp, #204]	; 0xcc
   316c0:	add	r3, r3, #1
   316c4:	str	r3, [sl, r5, lsl #2]
   316c8:	mov	r0, r3
   316cc:	ldr	r1, [r2, r5, lsl #2]
   316d0:	bl	3fd18 <__aeabi_idivmod>
   316d4:	subs	r3, r1, #0
   316d8:	bne	31624 <GetDataSlab+0x15708>
   316dc:	ldr	r7, [r8, #4]
   316e0:	str	r3, [sl, r5, lsl #2]
   316e4:	mov	r1, r7
   316e8:	mov	r0, r6
   316ec:	bl	3fd18 <__aeabi_idivmod>
   316f0:	ldr	r2, [sp, #196]	; 0xc4
   316f4:	ldr	r2, [r2, r5, lsl #2]
   316f8:	subs	r3, r1, #0
   316fc:	beq	31610 <GetDataSlab+0x156f4>
   31700:	ldr	r1, [r8]
   31704:	sub	r3, r7, r3
   31708:	mla	r3, r2, r1, r3
   3170c:	add	r4, r4, r3, lsl #3
   31710:	add	r6, r6, r3
   31714:	add	r5, r5, #1
   31718:	add	r8, r8, #4
   3171c:	b	316ac <GetDataSlab+0x15790>
   31720:	ldr	r3, [r4]
   31724:	strb	r3, [r2], #1
   31728:	ldr	r3, [r9]
   3172c:	add	r6, r6, r3
   31730:	add	r4, r4, r3, lsl #3
   31734:	b	314cc <GetDataSlab+0x155b0>
   31738:	cmp	r2, #0
   3173c:	beq	3157c <GetDataSlab+0x15660>
   31740:	ldr	r3, [r8]
   31744:	mul	r3, r3, r2
   31748:	b	31574 <GetDataSlab+0x15658>
   3174c:	add	r3, sp, #152	; 0x98
   31750:	add	r3, r3, r5, lsl #2
   31754:	ldr	r3, [r3, #-120]	; 0xffffff88
   31758:	add	r6, r6, r3
   3175c:	add	r4, r4, r3, lsl #3
   31760:	ldr	r3, [sp, #8]
   31764:	ldr	r2, [sp, #16]
   31768:	add	r3, r3, r2
   3176c:	b	31494 <GetDataSlab+0x15578>
   31770:	sub	r3, r5, #1
   31774:	cmp	r3, #8
   31778:	addls	pc, pc, r3, lsl #2
   3177c:	b	3317c <GetDataSlab+0x17260>
   31780:	b	32b14 <GetDataSlab+0x16bf8>
   31784:	b	32e48 <GetDataSlab+0x16f2c>
   31788:	b	324a4 <GetDataSlab+0x16588>
   3178c:	b	327dc <GetDataSlab+0x168c0>
   31790:	b	31e34 <GetDataSlab+0x15f18>
   31794:	b	3216c <GetDataSlab+0x16250>
   31798:	b	31aec <GetDataSlab+0x15bd0>
   3179c:	b	3317c <GetDataSlab+0x17260>
   317a0:	b	317a4 <GetDataSlab+0x15888>
   317a4:	ldr	r3, [r9]
   317a8:	ldr	ip, [sp, #4]
   317ac:	str	r3, [sp, #16]
   317b0:	sub	r3, r3, #1
   317b4:	str	r3, [sp, #32]
   317b8:	ldr	r3, [fp]
   317bc:	mov	lr, fp
   317c0:	str	r3, [sp, #112]	; 0x70
   317c4:	ldr	r3, [sp, #204]	; 0xcc
   317c8:	mov	r6, #0
   317cc:	mov	r2, #1
   317d0:	ldr	r3, [r3]
   317d4:	str	r3, [sp, #12]
   317d8:	ldr	r3, [sp, #208]	; 0xd0
   317dc:	cmp	r2, r3
   317e0:	blt	318f4 <GetDataSlab+0x159d8>
   317e4:	ldr	r3, [sp, #8]
   317e8:	add	r4, r3, r6, lsl #3
   317ec:	ldr	r3, [sp, #16]
   317f0:	cmp	r3, #1
   317f4:	movne	r3, #0
   317f8:	moveq	r9, #0
   317fc:	beq	319b4 <GetDataSlab+0x15a98>
   31800:	str	r3, [sp, #8]
   31804:	ldr	r3, [sp, #8]
   31808:	ldr	r2, [sp, #12]
   3180c:	cmp	r3, r2
   31810:	bge	1c04c <GetDataSlab+0x130>
   31814:	ldr	r3, [sp, #196]	; 0xc4
   31818:	ldr	r2, [sp, #8]
   3181c:	ldr	r3, [r3]
   31820:	cmp	r3, #0
   31824:	addne	r4, r4, r3, lsl #3
   31828:	addne	r6, r6, r3
   3182c:	ldr	r3, [sp]
   31830:	add	r2, r3, r2
   31834:	mov	r1, r2
   31838:	ldr	r3, [sp, #204]	; 0xcc
   3183c:	ldr	r3, [r3]
   31840:	str	r3, [sp, #16]
   31844:	ldr	r0, [sp, #16]
   31848:	sub	r3, r2, r1
   3184c:	cmp	r0, r3
   31850:	bgt	31a94 <GetDataSlab+0x15b78>
   31854:	ldr	r3, [r9]
   31858:	ldr	r2, [fp]
   3185c:	ldr	r8, [sp, #4]
   31860:	mul	r3, r3, r0
   31864:	mov	r5, #1
   31868:	sub	r3, r2, r3
   3186c:	ldr	r2, [sp, #196]	; 0xc4
   31870:	ldr	r2, [r2]
   31874:	sub	r3, r3, r2
   31878:	add	r6, r6, r3
   3187c:	add	r4, r4, r3, lsl #3
   31880:	ldr	r3, [sp, #208]	; 0xd0
   31884:	cmp	r5, r3
   31888:	bge	31adc <GetDataSlab+0x15bc0>
   3188c:	ldr	r3, [sl, r5, lsl #2]
   31890:	ldr	r2, [sp, #204]	; 0xcc
   31894:	add	r3, r3, #1
   31898:	str	r3, [sl, r5, lsl #2]
   3189c:	mov	r0, r3
   318a0:	ldr	r1, [r2, r5, lsl #2]
   318a4:	bl	3fd18 <__aeabi_idivmod>
   318a8:	subs	r3, r1, #0
   318ac:	bne	31ac8 <GetDataSlab+0x15bac>
   318b0:	ldr	r7, [r8, #4]
   318b4:	str	r3, [sl, r5, lsl #2]
   318b8:	mov	r1, r7
   318bc:	mov	r0, r6
   318c0:	bl	3fd18 <__aeabi_idivmod>
   318c4:	ldr	r2, [sp, #196]	; 0xc4
   318c8:	ldr	r2, [r2, r5, lsl #2]
   318cc:	subs	r3, r1, #0
   318d0:	beq	31ab4 <GetDataSlab+0x15b98>
   318d4:	ldr	r1, [r8]
   318d8:	sub	r3, r7, r3
   318dc:	mla	r3, r2, r1, r3
   318e0:	add	r4, r4, r3, lsl #3
   318e4:	add	r6, r6, r3
   318e8:	add	r5, r5, #1
   318ec:	add	r8, r8, #4
   318f0:	b	31880 <GetDataSlab+0x15964>
   318f4:	ldr	r3, [r9, r2, lsl #2]
   318f8:	mov	r5, ip
   318fc:	sub	r3, r3, #1
   31900:	str	r3, [r4, r2, lsl #2]
   31904:	ldr	r3, [lr], #4
   31908:	mov	r1, lr
   3190c:	str	r3, [ip, #4]
   31910:	cmp	r1, fp
   31914:	bne	31948 <GetDataSlab+0x15a2c>
   31918:	ldr	r3, [sp, #204]	; 0xcc
   3191c:	ldr	r1, [sp, #12]
   31920:	add	ip, ip, #4
   31924:	ldr	r3, [r3, r2, lsl #2]
   31928:	mul	r3, r3, r1
   3192c:	ldr	r1, [sp, #196]	; 0xc4
   31930:	str	r3, [sp, #12]
   31934:	ldr	r3, [r5]
   31938:	ldr	r1, [r1, r2, lsl #2]
   3193c:	add	r2, r2, #1
   31940:	mla	r6, r1, r3, r6
   31944:	b	317d8 <GetDataSlab+0x158bc>
   31948:	ldr	r7, [r4, r2, lsl #2]
   3194c:	mov	r0, r1
   31950:	ldr	r3, [r1, #-4]!
   31954:	mul	r3, r3, r7
   31958:	ldr	r7, [ip, #4]
   3195c:	str	r3, [r4, r2, lsl #2]
   31960:	ldr	r3, [r0]
   31964:	mul	r3, r3, r7
   31968:	str	r3, [ip, #4]
   3196c:	b	31910 <GetDataSlab+0x159f4>
   31970:	vldmia	r1!, {d7}
   31974:	vcvt.u32.f64	s15, d7
   31978:	vmov	r3, s15
   3197c:	strb	r3, [r2], #1
   31980:	b	319e4 <GetDataSlab+0x15ac8>
   31984:	cmp	r2, #0
   31988:	beq	31a88 <GetDataSlab+0x15b6c>
   3198c:	ldr	r3, [r8]
   31990:	mul	r3, r3, r2
   31994:	b	31a80 <GetDataSlab+0x15b64>
   31998:	add	r3, sp, #152	; 0x98
   3199c:	add	r3, r3, r5, lsl #2
   319a0:	ldr	r3, [r3, #-120]	; 0xffffff88
   319a4:	add	r6, r6, r3
   319a8:	add	r4, r4, r3, lsl #3
   319ac:	ldr	r3, [sp, #8]
   319b0:	add	r9, r9, r3
   319b4:	ldr	r3, [sp, #12]
   319b8:	cmp	r9, r3
   319bc:	bge	1c04c <GetDataSlab+0x130>
   319c0:	ldr	r3, [sp, #196]	; 0xc4
   319c4:	ldr	r3, [r3]
   319c8:	cmp	r3, #0
   319cc:	addne	r4, r4, r3, lsl #3
   319d0:	addne	r6, r6, r3
   319d4:	ldr	r3, [sp]
   319d8:	mov	r1, r4
   319dc:	add	r2, r3, r9
   319e0:	mov	r0, r2
   319e4:	ldr	r3, [sp, #204]	; 0xcc
   319e8:	ldr	r3, [r3]
   319ec:	str	r3, [sp, #8]
   319f0:	ldr	ip, [sp, #8]
   319f4:	sub	r3, r2, r0
   319f8:	cmp	ip, r3
   319fc:	bgt	31970 <GetDataSlab+0x15a54>
   31a00:	ldr	r3, [sp, #196]	; 0xc4
   31a04:	ldr	r2, [fp]
   31a08:	ldr	r8, [sp, #4]
   31a0c:	ldr	r3, [r3]
   31a10:	ldr	r5, [sp, #16]
   31a14:	sub	r3, r2, r3
   31a18:	add	r6, r6, r3
   31a1c:	add	r4, r4, r3, lsl #3
   31a20:	ldr	r3, [sp, #208]	; 0xd0
   31a24:	cmp	r5, r3
   31a28:	bge	319ac <GetDataSlab+0x15a90>
   31a2c:	ldr	r3, [sl, r5, lsl #2]
   31a30:	ldr	r2, [sp, #204]	; 0xcc
   31a34:	add	r3, r3, #1
   31a38:	str	r3, [sl, r5, lsl #2]
   31a3c:	mov	r0, r3
   31a40:	ldr	r1, [r2, r5, lsl #2]
   31a44:	bl	3fd18 <__aeabi_idivmod>
   31a48:	subs	r3, r1, #0
   31a4c:	bne	31998 <GetDataSlab+0x15a7c>
   31a50:	ldr	r7, [r8, #4]
   31a54:	str	r3, [sl, r5, lsl #2]
   31a58:	mov	r1, r7
   31a5c:	mov	r0, r6
   31a60:	bl	3fd18 <__aeabi_idivmod>
   31a64:	ldr	r2, [sp, #196]	; 0xc4
   31a68:	ldr	r2, [r2, r5, lsl #2]
   31a6c:	subs	r3, r1, #0
   31a70:	beq	31984 <GetDataSlab+0x15a68>
   31a74:	ldr	r1, [r8]
   31a78:	sub	r3, r7, r3
   31a7c:	mla	r3, r2, r1, r3
   31a80:	add	r4, r4, r3, lsl #3
   31a84:	add	r6, r6, r3
   31a88:	add	r5, r5, #1
   31a8c:	add	r8, r8, #4
   31a90:	b	31a20 <GetDataSlab+0x15b04>
   31a94:	vldr	d7, [r4]
   31a98:	vcvt.u32.f64	s15, d7
   31a9c:	vmov	r3, s15
   31aa0:	strb	r3, [r2], #1
   31aa4:	ldr	r3, [r9]
   31aa8:	add	r6, r6, r3
   31aac:	add	r4, r4, r3, lsl #3
   31ab0:	b	31838 <GetDataSlab+0x1591c>
   31ab4:	cmp	r2, #0
   31ab8:	beq	318e8 <GetDataSlab+0x159cc>
   31abc:	ldr	r3, [r8]
   31ac0:	mul	r3, r3, r2
   31ac4:	b	318e0 <GetDataSlab+0x159c4>
   31ac8:	add	r3, sp, #152	; 0x98
   31acc:	add	r3, r3, r5, lsl #2
   31ad0:	ldr	r3, [r3, #-120]	; 0xffffff88
   31ad4:	add	r6, r6, r3
   31ad8:	add	r4, r4, r3, lsl #3
   31adc:	ldr	r3, [sp, #8]
   31ae0:	ldr	r2, [sp, #16]
   31ae4:	add	r3, r3, r2
   31ae8:	b	31800 <GetDataSlab+0x158e4>
   31aec:	ldr	r3, [r9]
   31af0:	ldr	ip, [sp, #4]
   31af4:	str	r3, [sp, #16]
   31af8:	sub	r3, r3, #1
   31afc:	str	r3, [sp, #32]
   31b00:	ldr	r3, [fp]
   31b04:	mov	lr, fp
   31b08:	str	r3, [sp, #112]	; 0x70
   31b0c:	ldr	r3, [sp, #204]	; 0xcc
   31b10:	mov	r6, #0
   31b14:	mov	r2, #1
   31b18:	ldr	r3, [r3]
   31b1c:	str	r3, [sp, #12]
   31b20:	ldr	r3, [sp, #208]	; 0xd0
   31b24:	cmp	r2, r3
   31b28:	blt	31c3c <GetDataSlab+0x15d20>
   31b2c:	ldr	r3, [sp, #8]
   31b30:	add	r4, r3, r6, lsl #2
   31b34:	ldr	r3, [sp, #16]
   31b38:	cmp	r3, #1
   31b3c:	movne	r3, #0
   31b40:	moveq	r9, #0
   31b44:	beq	31cfc <GetDataSlab+0x15de0>
   31b48:	str	r3, [sp, #8]
   31b4c:	ldr	r3, [sp, #8]
   31b50:	ldr	r2, [sp, #12]
   31b54:	cmp	r3, r2
   31b58:	bge	1c04c <GetDataSlab+0x130>
   31b5c:	ldr	r3, [sp, #196]	; 0xc4
   31b60:	ldr	r2, [sp, #8]
   31b64:	ldr	r3, [r3]
   31b68:	cmp	r3, #0
   31b6c:	addne	r4, r4, r3, lsl #2
   31b70:	addne	r6, r6, r3
   31b74:	ldr	r3, [sp]
   31b78:	add	r2, r3, r2
   31b7c:	mov	r1, r2
   31b80:	ldr	r3, [sp, #204]	; 0xcc
   31b84:	ldr	r3, [r3]
   31b88:	str	r3, [sp, #16]
   31b8c:	ldr	r0, [sp, #16]
   31b90:	sub	r3, r2, r1
   31b94:	cmp	r0, r3
   31b98:	bgt	31ddc <GetDataSlab+0x15ec0>
   31b9c:	ldr	r3, [r9]
   31ba0:	ldr	r2, [fp]
   31ba4:	ldr	r8, [sp, #4]
   31ba8:	mul	r3, r3, r0
   31bac:	mov	r5, #1
   31bb0:	sub	r3, r2, r3
   31bb4:	ldr	r2, [sp, #196]	; 0xc4
   31bb8:	ldr	r2, [r2]
   31bbc:	sub	r3, r3, r2
   31bc0:	add	r6, r6, r3
   31bc4:	add	r4, r4, r3, lsl #2
   31bc8:	ldr	r3, [sp, #208]	; 0xd0
   31bcc:	cmp	r5, r3
   31bd0:	bge	31e24 <GetDataSlab+0x15f08>
   31bd4:	ldr	r3, [sl, r5, lsl #2]
   31bd8:	ldr	r2, [sp, #204]	; 0xcc
   31bdc:	add	r3, r3, #1
   31be0:	str	r3, [sl, r5, lsl #2]
   31be4:	mov	r0, r3
   31be8:	ldr	r1, [r2, r5, lsl #2]
   31bec:	bl	3fd18 <__aeabi_idivmod>
   31bf0:	subs	r3, r1, #0
   31bf4:	bne	31e10 <GetDataSlab+0x15ef4>
   31bf8:	ldr	r7, [r8, #4]
   31bfc:	str	r3, [sl, r5, lsl #2]
   31c00:	mov	r1, r7
   31c04:	mov	r0, r6
   31c08:	bl	3fd18 <__aeabi_idivmod>
   31c0c:	ldr	r2, [sp, #196]	; 0xc4
   31c10:	ldr	r2, [r2, r5, lsl #2]
   31c14:	subs	r3, r1, #0
   31c18:	beq	31dfc <GetDataSlab+0x15ee0>
   31c1c:	ldr	r1, [r8]
   31c20:	sub	r3, r7, r3
   31c24:	mla	r3, r2, r1, r3
   31c28:	add	r4, r4, r3, lsl #2
   31c2c:	add	r6, r6, r3
   31c30:	add	r5, r5, #1
   31c34:	add	r8, r8, #4
   31c38:	b	31bc8 <GetDataSlab+0x15cac>
   31c3c:	ldr	r3, [r9, r2, lsl #2]
   31c40:	mov	r5, ip
   31c44:	sub	r3, r3, #1
   31c48:	str	r3, [r4, r2, lsl #2]
   31c4c:	ldr	r3, [lr], #4
   31c50:	mov	r1, lr
   31c54:	str	r3, [ip, #4]
   31c58:	cmp	r1, fp
   31c5c:	bne	31c90 <GetDataSlab+0x15d74>
   31c60:	ldr	r3, [sp, #204]	; 0xcc
   31c64:	ldr	r1, [sp, #12]
   31c68:	add	ip, ip, #4
   31c6c:	ldr	r3, [r3, r2, lsl #2]
   31c70:	mul	r3, r3, r1
   31c74:	ldr	r1, [sp, #196]	; 0xc4
   31c78:	str	r3, [sp, #12]
   31c7c:	ldr	r3, [r5]
   31c80:	ldr	r1, [r1, r2, lsl #2]
   31c84:	add	r2, r2, #1
   31c88:	mla	r6, r1, r3, r6
   31c8c:	b	31b20 <GetDataSlab+0x15c04>
   31c90:	ldr	r7, [r4, r2, lsl #2]
   31c94:	mov	r0, r1
   31c98:	ldr	r3, [r1, #-4]!
   31c9c:	mul	r3, r3, r7
   31ca0:	ldr	r7, [ip, #4]
   31ca4:	str	r3, [r4, r2, lsl #2]
   31ca8:	ldr	r3, [r0]
   31cac:	mul	r3, r3, r7
   31cb0:	str	r3, [ip, #4]
   31cb4:	b	31c58 <GetDataSlab+0x15d3c>
   31cb8:	vldmia	r1!, {s15}
   31cbc:	vcvt.u32.f32	s15, s15
   31cc0:	vmov	r3, s15
   31cc4:	strb	r3, [r2], #1
   31cc8:	b	31d2c <GetDataSlab+0x15e10>
   31ccc:	cmp	r2, #0
   31cd0:	beq	31dd0 <GetDataSlab+0x15eb4>
   31cd4:	ldr	r3, [r8]
   31cd8:	mul	r3, r3, r2
   31cdc:	b	31dc8 <GetDataSlab+0x15eac>
   31ce0:	add	r3, sp, #152	; 0x98
   31ce4:	add	r3, r3, r5, lsl #2
   31ce8:	ldr	r3, [r3, #-120]	; 0xffffff88
   31cec:	add	r6, r6, r3
   31cf0:	add	r4, r4, r3, lsl #2
   31cf4:	ldr	r3, [sp, #8]
   31cf8:	add	r9, r9, r3
   31cfc:	ldr	r3, [sp, #12]
   31d00:	cmp	r9, r3
   31d04:	bge	1c04c <GetDataSlab+0x130>
   31d08:	ldr	r3, [sp, #196]	; 0xc4
   31d0c:	ldr	r3, [r3]
   31d10:	cmp	r3, #0
   31d14:	addne	r4, r4, r3, lsl #2
   31d18:	addne	r6, r6, r3
   31d1c:	ldr	r3, [sp]
   31d20:	mov	r1, r4
   31d24:	add	r2, r3, r9
   31d28:	mov	r0, r2
   31d2c:	ldr	r3, [sp, #204]	; 0xcc
   31d30:	ldr	r3, [r3]
   31d34:	str	r3, [sp, #8]
   31d38:	ldr	ip, [sp, #8]
   31d3c:	sub	r3, r2, r0
   31d40:	cmp	ip, r3
   31d44:	bgt	31cb8 <GetDataSlab+0x15d9c>
   31d48:	ldr	r3, [sp, #196]	; 0xc4
   31d4c:	ldr	r2, [fp]
   31d50:	ldr	r8, [sp, #4]
   31d54:	ldr	r3, [r3]
   31d58:	ldr	r5, [sp, #16]
   31d5c:	sub	r3, r2, r3
   31d60:	add	r6, r6, r3
   31d64:	add	r4, r4, r3, lsl #2
   31d68:	ldr	r3, [sp, #208]	; 0xd0
   31d6c:	cmp	r5, r3
   31d70:	bge	31cf4 <GetDataSlab+0x15dd8>
   31d74:	ldr	r3, [sl, r5, lsl #2]
   31d78:	ldr	r2, [sp, #204]	; 0xcc
   31d7c:	add	r3, r3, #1
   31d80:	str	r3, [sl, r5, lsl #2]
   31d84:	mov	r0, r3
   31d88:	ldr	r1, [r2, r5, lsl #2]
   31d8c:	bl	3fd18 <__aeabi_idivmod>
   31d90:	subs	r3, r1, #0
   31d94:	bne	31ce0 <GetDataSlab+0x15dc4>
   31d98:	ldr	r7, [r8, #4]
   31d9c:	str	r3, [sl, r5, lsl #2]
   31da0:	mov	r1, r7
   31da4:	mov	r0, r6
   31da8:	bl	3fd18 <__aeabi_idivmod>
   31dac:	ldr	r2, [sp, #196]	; 0xc4
   31db0:	ldr	r2, [r2, r5, lsl #2]
   31db4:	subs	r3, r1, #0
   31db8:	beq	31ccc <GetDataSlab+0x15db0>
   31dbc:	ldr	r1, [r8]
   31dc0:	sub	r3, r7, r3
   31dc4:	mla	r3, r2, r1, r3
   31dc8:	add	r4, r4, r3, lsl #2
   31dcc:	add	r6, r6, r3
   31dd0:	add	r5, r5, #1
   31dd4:	add	r8, r8, #4
   31dd8:	b	31d68 <GetDataSlab+0x15e4c>
   31ddc:	vldr	s15, [r4]
   31de0:	vcvt.u32.f32	s15, s15
   31de4:	vmov	r3, s15
   31de8:	strb	r3, [r2], #1
   31dec:	ldr	r3, [r9]
   31df0:	add	r6, r6, r3
   31df4:	add	r4, r4, r3, lsl #2
   31df8:	b	31b80 <GetDataSlab+0x15c64>
   31dfc:	cmp	r2, #0
   31e00:	beq	31c30 <GetDataSlab+0x15d14>
   31e04:	ldr	r3, [r8]
   31e08:	mul	r3, r3, r2
   31e0c:	b	31c28 <GetDataSlab+0x15d0c>
   31e10:	add	r3, sp, #152	; 0x98
   31e14:	add	r3, r3, r5, lsl #2
   31e18:	ldr	r3, [r3, #-120]	; 0xffffff88
   31e1c:	add	r6, r6, r3
   31e20:	add	r4, r4, r3, lsl #2
   31e24:	ldr	r3, [sp, #8]
   31e28:	ldr	r2, [sp, #16]
   31e2c:	add	r3, r3, r2
   31e30:	b	31b48 <GetDataSlab+0x15c2c>
   31e34:	ldr	r3, [r9]
   31e38:	ldr	ip, [sp, #4]
   31e3c:	str	r3, [sp, #16]
   31e40:	sub	r3, r3, #1
   31e44:	str	r3, [sp, #32]
   31e48:	ldr	r3, [fp]
   31e4c:	mov	lr, fp
   31e50:	str	r3, [sp, #112]	; 0x70
   31e54:	ldr	r3, [sp, #204]	; 0xcc
   31e58:	mov	r6, #0
   31e5c:	mov	r2, #1
   31e60:	ldr	r3, [r3]
   31e64:	str	r3, [sp, #12]
   31e68:	ldr	r3, [sp, #208]	; 0xd0
   31e6c:	cmp	r2, r3
   31e70:	blt	31f84 <GetDataSlab+0x16068>
   31e74:	ldr	r3, [sp, #8]
   31e78:	add	r4, r3, r6, lsl #2
   31e7c:	ldr	r3, [sp, #16]
   31e80:	cmp	r3, #1
   31e84:	movne	r3, #0
   31e88:	moveq	r9, #0
   31e8c:	beq	3203c <GetDataSlab+0x16120>
   31e90:	str	r3, [sp, #8]
   31e94:	ldr	r3, [sp, #8]
   31e98:	ldr	r2, [sp, #12]
   31e9c:	cmp	r3, r2
   31ea0:	bge	1c04c <GetDataSlab+0x130>
   31ea4:	ldr	r3, [sp, #196]	; 0xc4
   31ea8:	ldr	r2, [sp, #8]
   31eac:	ldr	r3, [r3]
   31eb0:	cmp	r3, #0
   31eb4:	addne	r4, r4, r3, lsl #2
   31eb8:	addne	r6, r6, r3
   31ebc:	ldr	r3, [sp]
   31ec0:	add	r2, r3, r2
   31ec4:	mov	r1, r2
   31ec8:	ldr	r3, [sp, #204]	; 0xcc
   31ecc:	ldr	r3, [r3]
   31ed0:	str	r3, [sp, #16]
   31ed4:	ldr	r0, [sp, #16]
   31ed8:	sub	r3, r2, r1
   31edc:	cmp	r0, r3
   31ee0:	bgt	3211c <GetDataSlab+0x16200>
   31ee4:	ldr	r3, [r9]
   31ee8:	ldr	r2, [fp]
   31eec:	ldr	r8, [sp, #4]
   31ef0:	mul	r3, r3, r0
   31ef4:	mov	r5, #1
   31ef8:	sub	r3, r2, r3
   31efc:	ldr	r2, [sp, #196]	; 0xc4
   31f00:	ldr	r2, [r2]
   31f04:	sub	r3, r3, r2
   31f08:	add	r6, r6, r3
   31f0c:	add	r4, r4, r3, lsl #2
   31f10:	ldr	r3, [sp, #208]	; 0xd0
   31f14:	cmp	r5, r3
   31f18:	bge	3215c <GetDataSlab+0x16240>
   31f1c:	ldr	r3, [sl, r5, lsl #2]
   31f20:	ldr	r2, [sp, #204]	; 0xcc
   31f24:	add	r3, r3, #1
   31f28:	str	r3, [sl, r5, lsl #2]
   31f2c:	mov	r0, r3
   31f30:	ldr	r1, [r2, r5, lsl #2]
   31f34:	bl	3fd18 <__aeabi_idivmod>
   31f38:	subs	r3, r1, #0
   31f3c:	bne	32148 <GetDataSlab+0x1622c>
   31f40:	ldr	r7, [r8, #4]
   31f44:	str	r3, [sl, r5, lsl #2]
   31f48:	mov	r1, r7
   31f4c:	mov	r0, r6
   31f50:	bl	3fd18 <__aeabi_idivmod>
   31f54:	ldr	r2, [sp, #196]	; 0xc4
   31f58:	ldr	r2, [r2, r5, lsl #2]
   31f5c:	subs	r3, r1, #0
   31f60:	beq	32134 <GetDataSlab+0x16218>
   31f64:	ldr	r1, [r8]
   31f68:	sub	r3, r7, r3
   31f6c:	mla	r3, r2, r1, r3
   31f70:	add	r4, r4, r3, lsl #2
   31f74:	add	r6, r6, r3
   31f78:	add	r5, r5, #1
   31f7c:	add	r8, r8, #4
   31f80:	b	31f10 <GetDataSlab+0x15ff4>
   31f84:	ldr	r3, [r9, r2, lsl #2]
   31f88:	mov	r5, ip
   31f8c:	sub	r3, r3, #1
   31f90:	str	r3, [r4, r2, lsl #2]
   31f94:	ldr	r3, [lr], #4
   31f98:	mov	r1, lr
   31f9c:	str	r3, [ip, #4]
   31fa0:	cmp	r1, fp
   31fa4:	bne	31fd8 <GetDataSlab+0x160bc>
   31fa8:	ldr	r3, [sp, #204]	; 0xcc
   31fac:	ldr	r1, [sp, #12]
   31fb0:	add	ip, ip, #4
   31fb4:	ldr	r3, [r3, r2, lsl #2]
   31fb8:	mul	r3, r3, r1
   31fbc:	ldr	r1, [sp, #196]	; 0xc4
   31fc0:	str	r3, [sp, #12]
   31fc4:	ldr	r3, [r5]
   31fc8:	ldr	r1, [r1, r2, lsl #2]
   31fcc:	add	r2, r2, #1
   31fd0:	mla	r6, r1, r3, r6
   31fd4:	b	31e68 <GetDataSlab+0x15f4c>
   31fd8:	ldr	r7, [r4, r2, lsl #2]
   31fdc:	mov	r0, r1
   31fe0:	ldr	r3, [r1, #-4]!
   31fe4:	mul	r3, r3, r7
   31fe8:	ldr	r7, [ip, #4]
   31fec:	str	r3, [r4, r2, lsl #2]
   31ff0:	ldr	r3, [r0]
   31ff4:	mul	r3, r3, r7
   31ff8:	str	r3, [ip, #4]
   31ffc:	b	31fa0 <GetDataSlab+0x16084>
   32000:	ldr	r3, [r1, #4]!
   32004:	strb	r3, [r2], #1
   32008:	b	3206c <GetDataSlab+0x16150>
   3200c:	cmp	r2, #0
   32010:	beq	32110 <GetDataSlab+0x161f4>
   32014:	ldr	r3, [r8]
   32018:	mul	r3, r3, r2
   3201c:	b	32108 <GetDataSlab+0x161ec>
   32020:	add	r3, sp, #152	; 0x98
   32024:	add	r3, r3, r5, lsl #2
   32028:	ldr	r3, [r3, #-120]	; 0xffffff88
   3202c:	add	r6, r6, r3
   32030:	add	r4, r4, r3, lsl #2
   32034:	ldr	r3, [sp, #8]
   32038:	add	r9, r9, r3
   3203c:	ldr	r3, [sp, #12]
   32040:	cmp	r9, r3
   32044:	bge	1c04c <GetDataSlab+0x130>
   32048:	ldr	r3, [sp, #196]	; 0xc4
   3204c:	ldr	r3, [r3]
   32050:	cmp	r3, #0
   32054:	addne	r4, r4, r3, lsl #2
   32058:	addne	r6, r6, r3
   3205c:	ldr	r3, [sp]
   32060:	sub	r1, r4, #4
   32064:	add	r2, r3, r9
   32068:	mov	r0, r2
   3206c:	ldr	r3, [sp, #204]	; 0xcc
   32070:	ldr	r3, [r3]
   32074:	str	r3, [sp, #8]
   32078:	ldr	ip, [sp, #8]
   3207c:	sub	r3, r2, r0
   32080:	cmp	ip, r3
   32084:	bgt	32000 <GetDataSlab+0x160e4>
   32088:	ldr	r3, [sp, #196]	; 0xc4
   3208c:	ldr	r2, [fp]
   32090:	ldr	r8, [sp, #4]
   32094:	ldr	r3, [r3]
   32098:	ldr	r5, [sp, #16]
   3209c:	sub	r3, r2, r3
   320a0:	add	r6, r6, r3
   320a4:	add	r4, r4, r3, lsl #2
   320a8:	ldr	r3, [sp, #208]	; 0xd0
   320ac:	cmp	r5, r3
   320b0:	bge	32034 <GetDataSlab+0x16118>
   320b4:	ldr	r3, [sl, r5, lsl #2]
   320b8:	ldr	r2, [sp, #204]	; 0xcc
   320bc:	add	r3, r3, #1
   320c0:	str	r3, [sl, r5, lsl #2]
   320c4:	mov	r0, r3
   320c8:	ldr	r1, [r2, r5, lsl #2]
   320cc:	bl	3fd18 <__aeabi_idivmod>
   320d0:	subs	r3, r1, #0
   320d4:	bne	32020 <GetDataSlab+0x16104>
   320d8:	ldr	r7, [r8, #4]
   320dc:	str	r3, [sl, r5, lsl #2]
   320e0:	mov	r1, r7
   320e4:	mov	r0, r6
   320e8:	bl	3fd18 <__aeabi_idivmod>
   320ec:	ldr	r2, [sp, #196]	; 0xc4
   320f0:	ldr	r2, [r2, r5, lsl #2]
   320f4:	subs	r3, r1, #0
   320f8:	beq	3200c <GetDataSlab+0x160f0>
   320fc:	ldr	r1, [r8]
   32100:	sub	r3, r7, r3
   32104:	mla	r3, r2, r1, r3
   32108:	add	r4, r4, r3, lsl #2
   3210c:	add	r6, r6, r3
   32110:	add	r5, r5, #1
   32114:	add	r8, r8, #4
   32118:	b	320a8 <GetDataSlab+0x1618c>
   3211c:	ldr	r3, [r4]
   32120:	strb	r3, [r2], #1
   32124:	ldr	r3, [r9]
   32128:	add	r6, r6, r3
   3212c:	add	r4, r4, r3, lsl #2
   32130:	b	31ec8 <GetDataSlab+0x15fac>
   32134:	cmp	r2, #0
   32138:	beq	31f78 <GetDataSlab+0x1605c>
   3213c:	ldr	r3, [r8]
   32140:	mul	r3, r3, r2
   32144:	b	31f70 <GetDataSlab+0x16054>
   32148:	add	r3, sp, #152	; 0x98
   3214c:	add	r3, r3, r5, lsl #2
   32150:	ldr	r3, [r3, #-120]	; 0xffffff88
   32154:	add	r6, r6, r3
   32158:	add	r4, r4, r3, lsl #2
   3215c:	ldr	r3, [sp, #8]
   32160:	ldr	r2, [sp, #16]
   32164:	add	r3, r3, r2
   32168:	b	31e90 <GetDataSlab+0x15f74>
   3216c:	ldr	r3, [r9]
   32170:	ldr	ip, [sp, #4]
   32174:	str	r3, [sp, #16]
   32178:	sub	r3, r3, #1
   3217c:	str	r3, [sp, #32]
   32180:	ldr	r3, [fp]
   32184:	mov	lr, fp
   32188:	str	r3, [sp, #112]	; 0x70
   3218c:	ldr	r3, [sp, #204]	; 0xcc
   32190:	mov	r6, #0
   32194:	mov	r2, #1
   32198:	ldr	r3, [r3]
   3219c:	str	r3, [sp, #12]
   321a0:	ldr	r3, [sp, #208]	; 0xd0
   321a4:	cmp	r2, r3
   321a8:	blt	322bc <GetDataSlab+0x163a0>
   321ac:	ldr	r3, [sp, #8]
   321b0:	add	r4, r3, r6, lsl #2
   321b4:	ldr	r3, [sp, #16]
   321b8:	cmp	r3, #1
   321bc:	movne	r3, #0
   321c0:	moveq	r9, #0
   321c4:	beq	32374 <GetDataSlab+0x16458>
   321c8:	str	r3, [sp, #8]
   321cc:	ldr	r3, [sp, #8]
   321d0:	ldr	r2, [sp, #12]
   321d4:	cmp	r3, r2
   321d8:	bge	1c04c <GetDataSlab+0x130>
   321dc:	ldr	r3, [sp, #196]	; 0xc4
   321e0:	ldr	r2, [sp, #8]
   321e4:	ldr	r3, [r3]
   321e8:	cmp	r3, #0
   321ec:	addne	r4, r4, r3, lsl #2
   321f0:	addne	r6, r6, r3
   321f4:	ldr	r3, [sp]
   321f8:	add	r2, r3, r2
   321fc:	mov	r1, r2
   32200:	ldr	r3, [sp, #204]	; 0xcc
   32204:	ldr	r3, [r3]
   32208:	str	r3, [sp, #16]
   3220c:	ldr	r0, [sp, #16]
   32210:	sub	r3, r2, r1
   32214:	cmp	r0, r3
   32218:	bgt	32454 <GetDataSlab+0x16538>
   3221c:	ldr	r3, [r9]
   32220:	ldr	r2, [fp]
   32224:	ldr	r8, [sp, #4]
   32228:	mul	r3, r3, r0
   3222c:	mov	r5, #1
   32230:	sub	r3, r2, r3
   32234:	ldr	r2, [sp, #196]	; 0xc4
   32238:	ldr	r2, [r2]
   3223c:	sub	r3, r3, r2
   32240:	add	r6, r6, r3
   32244:	add	r4, r4, r3, lsl #2
   32248:	ldr	r3, [sp, #208]	; 0xd0
   3224c:	cmp	r5, r3
   32250:	bge	32494 <GetDataSlab+0x16578>
   32254:	ldr	r3, [sl, r5, lsl #2]
   32258:	ldr	r2, [sp, #204]	; 0xcc
   3225c:	add	r3, r3, #1
   32260:	str	r3, [sl, r5, lsl #2]
   32264:	mov	r0, r3
   32268:	ldr	r1, [r2, r5, lsl #2]
   3226c:	bl	3fd18 <__aeabi_idivmod>
   32270:	subs	r3, r1, #0
   32274:	bne	32480 <GetDataSlab+0x16564>
   32278:	ldr	r7, [r8, #4]
   3227c:	str	r3, [sl, r5, lsl #2]
   32280:	mov	r1, r7
   32284:	mov	r0, r6
   32288:	bl	3fd18 <__aeabi_idivmod>
   3228c:	ldr	r2, [sp, #196]	; 0xc4
   32290:	ldr	r2, [r2, r5, lsl #2]
   32294:	subs	r3, r1, #0
   32298:	beq	3246c <GetDataSlab+0x16550>
   3229c:	ldr	r1, [r8]
   322a0:	sub	r3, r7, r3
   322a4:	mla	r3, r2, r1, r3
   322a8:	add	r4, r4, r3, lsl #2
   322ac:	add	r6, r6, r3
   322b0:	add	r5, r5, #1
   322b4:	add	r8, r8, #4
   322b8:	b	32248 <GetDataSlab+0x1632c>
   322bc:	ldr	r3, [r9, r2, lsl #2]
   322c0:	mov	r5, ip
   322c4:	sub	r3, r3, #1
   322c8:	str	r3, [r4, r2, lsl #2]
   322cc:	ldr	r3, [lr], #4
   322d0:	mov	r1, lr
   322d4:	str	r3, [ip, #4]
   322d8:	cmp	r1, fp
   322dc:	bne	32310 <GetDataSlab+0x163f4>
   322e0:	ldr	r3, [sp, #204]	; 0xcc
   322e4:	ldr	r1, [sp, #12]
   322e8:	add	ip, ip, #4
   322ec:	ldr	r3, [r3, r2, lsl #2]
   322f0:	mul	r3, r3, r1
   322f4:	ldr	r1, [sp, #196]	; 0xc4
   322f8:	str	r3, [sp, #12]
   322fc:	ldr	r3, [r5]
   32300:	ldr	r1, [r1, r2, lsl #2]
   32304:	add	r2, r2, #1
   32308:	mla	r6, r1, r3, r6
   3230c:	b	321a0 <GetDataSlab+0x16284>
   32310:	ldr	r7, [r4, r2, lsl #2]
   32314:	mov	r0, r1
   32318:	ldr	r3, [r1, #-4]!
   3231c:	mul	r3, r3, r7
   32320:	ldr	r7, [ip, #4]
   32324:	str	r3, [r4, r2, lsl #2]
   32328:	ldr	r3, [r0]
   3232c:	mul	r3, r3, r7
   32330:	str	r3, [ip, #4]
   32334:	b	322d8 <GetDataSlab+0x163bc>
   32338:	ldr	r3, [r1, #4]!
   3233c:	strb	r3, [r2], #1
   32340:	b	323a4 <GetDataSlab+0x16488>
   32344:	cmp	r2, #0
   32348:	beq	32448 <GetDataSlab+0x1652c>
   3234c:	ldr	r3, [r8]
   32350:	mul	r3, r3, r2
   32354:	b	32440 <GetDataSlab+0x16524>
   32358:	add	r3, sp, #152	; 0x98
   3235c:	add	r3, r3, r5, lsl #2
   32360:	ldr	r3, [r3, #-120]	; 0xffffff88
   32364:	add	r6, r6, r3
   32368:	add	r4, r4, r3, lsl #2
   3236c:	ldr	r3, [sp, #8]
   32370:	add	r9, r9, r3
   32374:	ldr	r3, [sp, #12]
   32378:	cmp	r9, r3
   3237c:	bge	1c04c <GetDataSlab+0x130>
   32380:	ldr	r3, [sp, #196]	; 0xc4
   32384:	ldr	r3, [r3]
   32388:	cmp	r3, #0
   3238c:	addne	r4, r4, r3, lsl #2
   32390:	addne	r6, r6, r3
   32394:	ldr	r3, [sp]
   32398:	sub	r1, r4, #4
   3239c:	add	r2, r3, r9
   323a0:	mov	r0, r2
   323a4:	ldr	r3, [sp, #204]	; 0xcc
   323a8:	ldr	r3, [r3]
   323ac:	str	r3, [sp, #8]
   323b0:	ldr	ip, [sp, #8]
   323b4:	sub	r3, r2, r0
   323b8:	cmp	ip, r3
   323bc:	bgt	32338 <GetDataSlab+0x1641c>
   323c0:	ldr	r3, [sp, #196]	; 0xc4
   323c4:	ldr	r2, [fp]
   323c8:	ldr	r8, [sp, #4]
   323cc:	ldr	r3, [r3]
   323d0:	ldr	r5, [sp, #16]
   323d4:	sub	r3, r2, r3
   323d8:	add	r6, r6, r3
   323dc:	add	r4, r4, r3, lsl #2
   323e0:	ldr	r3, [sp, #208]	; 0xd0
   323e4:	cmp	r5, r3
   323e8:	bge	3236c <GetDataSlab+0x16450>
   323ec:	ldr	r3, [sl, r5, lsl #2]
   323f0:	ldr	r2, [sp, #204]	; 0xcc
   323f4:	add	r3, r3, #1
   323f8:	str	r3, [sl, r5, lsl #2]
   323fc:	mov	r0, r3
   32400:	ldr	r1, [r2, r5, lsl #2]
   32404:	bl	3fd18 <__aeabi_idivmod>
   32408:	subs	r3, r1, #0
   3240c:	bne	32358 <GetDataSlab+0x1643c>
   32410:	ldr	r7, [r8, #4]
   32414:	str	r3, [sl, r5, lsl #2]
   32418:	mov	r1, r7
   3241c:	mov	r0, r6
   32420:	bl	3fd18 <__aeabi_idivmod>
   32424:	ldr	r2, [sp, #196]	; 0xc4
   32428:	ldr	r2, [r2, r5, lsl #2]
   3242c:	subs	r3, r1, #0
   32430:	beq	32344 <GetDataSlab+0x16428>
   32434:	ldr	r1, [r8]
   32438:	sub	r3, r7, r3
   3243c:	mla	r3, r2, r1, r3
   32440:	add	r4, r4, r3, lsl #2
   32444:	add	r6, r6, r3
   32448:	add	r5, r5, #1
   3244c:	add	r8, r8, #4
   32450:	b	323e0 <GetDataSlab+0x164c4>
   32454:	ldr	r3, [r4]
   32458:	strb	r3, [r2], #1
   3245c:	ldr	r3, [r9]
   32460:	add	r6, r6, r3
   32464:	add	r4, r4, r3, lsl #2
   32468:	b	32200 <GetDataSlab+0x162e4>
   3246c:	cmp	r2, #0
   32470:	beq	322b0 <GetDataSlab+0x16394>
   32474:	ldr	r3, [r8]
   32478:	mul	r3, r3, r2
   3247c:	b	322a8 <GetDataSlab+0x1638c>
   32480:	add	r3, sp, #152	; 0x98
   32484:	add	r3, r3, r5, lsl #2
   32488:	ldr	r3, [r3, #-120]	; 0xffffff88
   3248c:	add	r6, r6, r3
   32490:	add	r4, r4, r3, lsl #2
   32494:	ldr	r3, [sp, #8]
   32498:	ldr	r2, [sp, #16]
   3249c:	add	r3, r3, r2
   324a0:	b	321c8 <GetDataSlab+0x162ac>
   324a4:	ldr	r3, [r9]
   324a8:	ldr	ip, [sp, #4]
   324ac:	str	r3, [sp, #16]
   324b0:	sub	r3, r3, #1
   324b4:	str	r3, [sp, #32]
   324b8:	ldr	r3, [fp]
   324bc:	mov	lr, fp
   324c0:	str	r3, [sp, #112]	; 0x70
   324c4:	ldr	r3, [sp, #204]	; 0xcc
   324c8:	mov	r6, #0
   324cc:	mov	r2, #1
   324d0:	ldr	r3, [r3]
   324d4:	str	r3, [sp, #12]
   324d8:	ldr	r3, [sp, #208]	; 0xd0
   324dc:	cmp	r2, r3
   324e0:	blt	325f4 <GetDataSlab+0x166d8>
   324e4:	ldr	r3, [sp, #8]
   324e8:	add	r4, r3, r6, lsl #1
   324ec:	ldr	r3, [sp, #16]
   324f0:	cmp	r3, #1
   324f4:	movne	r3, #0
   324f8:	moveq	r9, #0
   324fc:	beq	326ac <GetDataSlab+0x16790>
   32500:	str	r3, [sp, #8]
   32504:	ldr	r3, [sp, #8]
   32508:	ldr	r2, [sp, #12]
   3250c:	cmp	r3, r2
   32510:	bge	1c04c <GetDataSlab+0x130>
   32514:	ldr	r3, [sp, #196]	; 0xc4
   32518:	ldr	r2, [sp, #8]
   3251c:	ldr	r3, [r3]
   32520:	cmp	r3, #0
   32524:	addne	r4, r4, r3, lsl #1
   32528:	addne	r6, r6, r3
   3252c:	ldr	r3, [sp]
   32530:	add	r2, r3, r2
   32534:	mov	r1, r2
   32538:	ldr	r3, [sp, #204]	; 0xcc
   3253c:	ldr	r3, [r3]
   32540:	str	r3, [sp, #16]
   32544:	ldr	r0, [sp, #16]
   32548:	sub	r3, r2, r1
   3254c:	cmp	r0, r3
   32550:	bgt	3278c <GetDataSlab+0x16870>
   32554:	ldr	r3, [r9]
   32558:	ldr	r2, [fp]
   3255c:	ldr	r8, [sp, #4]
   32560:	mul	r3, r3, r0
   32564:	mov	r5, #1
   32568:	sub	r3, r2, r3
   3256c:	ldr	r2, [sp, #196]	; 0xc4
   32570:	ldr	r2, [r2]
   32574:	sub	r3, r3, r2
   32578:	add	r6, r6, r3
   3257c:	add	r4, r4, r3, lsl #1
   32580:	ldr	r3, [sp, #208]	; 0xd0
   32584:	cmp	r5, r3
   32588:	bge	327cc <GetDataSlab+0x168b0>
   3258c:	ldr	r3, [sl, r5, lsl #2]
   32590:	ldr	r2, [sp, #204]	; 0xcc
   32594:	add	r3, r3, #1
   32598:	str	r3, [sl, r5, lsl #2]
   3259c:	mov	r0, r3
   325a0:	ldr	r1, [r2, r5, lsl #2]
   325a4:	bl	3fd18 <__aeabi_idivmod>
   325a8:	subs	r3, r1, #0
   325ac:	bne	327b8 <GetDataSlab+0x1689c>
   325b0:	ldr	r7, [r8, #4]
   325b4:	str	r3, [sl, r5, lsl #2]
   325b8:	mov	r1, r7
   325bc:	mov	r0, r6
   325c0:	bl	3fd18 <__aeabi_idivmod>
   325c4:	ldr	r2, [sp, #196]	; 0xc4
   325c8:	ldr	r2, [r2, r5, lsl #2]
   325cc:	subs	r3, r1, #0
   325d0:	beq	327a4 <GetDataSlab+0x16888>
   325d4:	ldr	r1, [r8]
   325d8:	sub	r3, r7, r3
   325dc:	mla	r3, r2, r1, r3
   325e0:	add	r4, r4, r3, lsl #1
   325e4:	add	r6, r6, r3
   325e8:	add	r5, r5, #1
   325ec:	add	r8, r8, #4
   325f0:	b	32580 <GetDataSlab+0x16664>
   325f4:	ldr	r3, [r9, r2, lsl #2]
   325f8:	mov	r5, ip
   325fc:	sub	r3, r3, #1
   32600:	str	r3, [r4, r2, lsl #2]
   32604:	ldr	r3, [lr], #4
   32608:	mov	r1, lr
   3260c:	str	r3, [ip, #4]
   32610:	cmp	r1, fp
   32614:	bne	32648 <GetDataSlab+0x1672c>
   32618:	ldr	r3, [sp, #204]	; 0xcc
   3261c:	ldr	r1, [sp, #12]
   32620:	add	ip, ip, #4
   32624:	ldr	r3, [r3, r2, lsl #2]
   32628:	mul	r3, r3, r1
   3262c:	ldr	r1, [sp, #196]	; 0xc4
   32630:	str	r3, [sp, #12]
   32634:	ldr	r3, [r5]
   32638:	ldr	r1, [r1, r2, lsl #2]
   3263c:	add	r2, r2, #1
   32640:	mla	r6, r1, r3, r6
   32644:	b	324d8 <GetDataSlab+0x165bc>
   32648:	ldr	r7, [r4, r2, lsl #2]
   3264c:	mov	r0, r1
   32650:	ldr	r3, [r1, #-4]!
   32654:	mul	r3, r3, r7
   32658:	ldr	r7, [ip, #4]
   3265c:	str	r3, [r4, r2, lsl #2]
   32660:	ldr	r3, [r0]
   32664:	mul	r3, r3, r7
   32668:	str	r3, [ip, #4]
   3266c:	b	32610 <GetDataSlab+0x166f4>
   32670:	ldrh	r3, [r1, #2]!
   32674:	strb	r3, [r2], #1
   32678:	b	326dc <GetDataSlab+0x167c0>
   3267c:	cmp	r2, #0
   32680:	beq	32780 <GetDataSlab+0x16864>
   32684:	ldr	r3, [r8]
   32688:	mul	r3, r3, r2
   3268c:	b	32778 <GetDataSlab+0x1685c>
   32690:	add	r3, sp, #152	; 0x98
   32694:	add	r3, r3, r5, lsl #2
   32698:	ldr	r3, [r3, #-120]	; 0xffffff88
   3269c:	add	r6, r6, r3
   326a0:	add	r4, r4, r3, lsl #1
   326a4:	ldr	r3, [sp, #8]
   326a8:	add	r9, r9, r3
   326ac:	ldr	r3, [sp, #12]
   326b0:	cmp	r9, r3
   326b4:	bge	1c04c <GetDataSlab+0x130>
   326b8:	ldr	r3, [sp, #196]	; 0xc4
   326bc:	ldr	r3, [r3]
   326c0:	cmp	r3, #0
   326c4:	addne	r4, r4, r3, lsl #1
   326c8:	addne	r6, r6, r3
   326cc:	ldr	r3, [sp]
   326d0:	sub	r1, r4, #2
   326d4:	add	r2, r3, r9
   326d8:	mov	r0, r2
   326dc:	ldr	r3, [sp, #204]	; 0xcc
   326e0:	ldr	r3, [r3]
   326e4:	str	r3, [sp, #8]
   326e8:	ldr	ip, [sp, #8]
   326ec:	sub	r3, r2, r0
   326f0:	cmp	ip, r3
   326f4:	bgt	32670 <GetDataSlab+0x16754>
   326f8:	ldr	r3, [sp, #196]	; 0xc4
   326fc:	ldr	r2, [fp]
   32700:	ldr	r8, [sp, #4]
   32704:	ldr	r3, [r3]
   32708:	ldr	r5, [sp, #16]
   3270c:	sub	r3, r2, r3
   32710:	add	r6, r6, r3
   32714:	add	r4, r4, r3, lsl #1
   32718:	ldr	r3, [sp, #208]	; 0xd0
   3271c:	cmp	r5, r3
   32720:	bge	326a4 <GetDataSlab+0x16788>
   32724:	ldr	r3, [sl, r5, lsl #2]
   32728:	ldr	r2, [sp, #204]	; 0xcc
   3272c:	add	r3, r3, #1
   32730:	str	r3, [sl, r5, lsl #2]
   32734:	mov	r0, r3
   32738:	ldr	r1, [r2, r5, lsl #2]
   3273c:	bl	3fd18 <__aeabi_idivmod>
   32740:	subs	r3, r1, #0
   32744:	bne	32690 <GetDataSlab+0x16774>
   32748:	ldr	r7, [r8, #4]
   3274c:	str	r3, [sl, r5, lsl #2]
   32750:	mov	r1, r7
   32754:	mov	r0, r6
   32758:	bl	3fd18 <__aeabi_idivmod>
   3275c:	ldr	r2, [sp, #196]	; 0xc4
   32760:	ldr	r2, [r2, r5, lsl #2]
   32764:	subs	r3, r1, #0
   32768:	beq	3267c <GetDataSlab+0x16760>
   3276c:	ldr	r1, [r8]
   32770:	sub	r3, r7, r3
   32774:	mla	r3, r2, r1, r3
   32778:	add	r4, r4, r3, lsl #1
   3277c:	add	r6, r6, r3
   32780:	add	r5, r5, #1
   32784:	add	r8, r8, #4
   32788:	b	32718 <GetDataSlab+0x167fc>
   3278c:	ldrh	r3, [r4]
   32790:	strb	r3, [r2], #1
   32794:	ldr	r3, [r9]
   32798:	add	r6, r6, r3
   3279c:	add	r4, r4, r3, lsl #1
   327a0:	b	32538 <GetDataSlab+0x1661c>
   327a4:	cmp	r2, #0
   327a8:	beq	325e8 <GetDataSlab+0x166cc>
   327ac:	ldr	r3, [r8]
   327b0:	mul	r3, r3, r2
   327b4:	b	325e0 <GetDataSlab+0x166c4>
   327b8:	add	r3, sp, #152	; 0x98
   327bc:	add	r3, r3, r5, lsl #2
   327c0:	ldr	r3, [r3, #-120]	; 0xffffff88
   327c4:	add	r6, r6, r3
   327c8:	add	r4, r4, r3, lsl #1
   327cc:	ldr	r3, [sp, #8]
   327d0:	ldr	r2, [sp, #16]
   327d4:	add	r3, r3, r2
   327d8:	b	32500 <GetDataSlab+0x165e4>
   327dc:	ldr	r3, [r9]
   327e0:	ldr	ip, [sp, #4]
   327e4:	str	r3, [sp, #16]
   327e8:	sub	r3, r3, #1
   327ec:	str	r3, [sp, #32]
   327f0:	ldr	r3, [fp]
   327f4:	mov	lr, fp
   327f8:	str	r3, [sp, #112]	; 0x70
   327fc:	ldr	r3, [sp, #204]	; 0xcc
   32800:	mov	r6, #0
   32804:	mov	r2, #1
   32808:	ldr	r3, [r3]
   3280c:	str	r3, [sp, #12]
   32810:	ldr	r3, [sp, #208]	; 0xd0
   32814:	cmp	r2, r3
   32818:	blt	3292c <GetDataSlab+0x16a10>
   3281c:	ldr	r3, [sp, #8]
   32820:	add	r4, r3, r6, lsl #1
   32824:	ldr	r3, [sp, #16]
   32828:	cmp	r3, #1
   3282c:	movne	r3, #0
   32830:	moveq	r9, #0
   32834:	beq	329e4 <GetDataSlab+0x16ac8>
   32838:	str	r3, [sp, #8]
   3283c:	ldr	r3, [sp, #8]
   32840:	ldr	r2, [sp, #12]
   32844:	cmp	r3, r2
   32848:	bge	1c04c <GetDataSlab+0x130>
   3284c:	ldr	r3, [sp, #196]	; 0xc4
   32850:	ldr	r2, [sp, #8]
   32854:	ldr	r3, [r3]
   32858:	cmp	r3, #0
   3285c:	addne	r4, r4, r3, lsl #1
   32860:	addne	r6, r6, r3
   32864:	ldr	r3, [sp]
   32868:	add	r2, r3, r2
   3286c:	mov	r1, r2
   32870:	ldr	r3, [sp, #204]	; 0xcc
   32874:	ldr	r3, [r3]
   32878:	str	r3, [sp, #16]
   3287c:	ldr	r0, [sp, #16]
   32880:	sub	r3, r2, r1
   32884:	cmp	r0, r3
   32888:	bgt	32ac4 <GetDataSlab+0x16ba8>
   3288c:	ldr	r3, [r9]
   32890:	ldr	r2, [fp]
   32894:	ldr	r8, [sp, #4]
   32898:	mul	r3, r3, r0
   3289c:	mov	r5, #1
   328a0:	sub	r3, r2, r3
   328a4:	ldr	r2, [sp, #196]	; 0xc4
   328a8:	ldr	r2, [r2]
   328ac:	sub	r3, r3, r2
   328b0:	add	r6, r6, r3
   328b4:	add	r4, r4, r3, lsl #1
   328b8:	ldr	r3, [sp, #208]	; 0xd0
   328bc:	cmp	r5, r3
   328c0:	bge	32b04 <GetDataSlab+0x16be8>
   328c4:	ldr	r3, [sl, r5, lsl #2]
   328c8:	ldr	r2, [sp, #204]	; 0xcc
   328cc:	add	r3, r3, #1
   328d0:	str	r3, [sl, r5, lsl #2]
   328d4:	mov	r0, r3
   328d8:	ldr	r1, [r2, r5, lsl #2]
   328dc:	bl	3fd18 <__aeabi_idivmod>
   328e0:	subs	r3, r1, #0
   328e4:	bne	32af0 <GetDataSlab+0x16bd4>
   328e8:	ldr	r7, [r8, #4]
   328ec:	str	r3, [sl, r5, lsl #2]
   328f0:	mov	r1, r7
   328f4:	mov	r0, r6
   328f8:	bl	3fd18 <__aeabi_idivmod>
   328fc:	ldr	r2, [sp, #196]	; 0xc4
   32900:	ldr	r2, [r2, r5, lsl #2]
   32904:	subs	r3, r1, #0
   32908:	beq	32adc <GetDataSlab+0x16bc0>
   3290c:	ldr	r1, [r8]
   32910:	sub	r3, r7, r3
   32914:	mla	r3, r2, r1, r3
   32918:	add	r4, r4, r3, lsl #1
   3291c:	add	r6, r6, r3
   32920:	add	r5, r5, #1
   32924:	add	r8, r8, #4
   32928:	b	328b8 <GetDataSlab+0x1699c>
   3292c:	ldr	r3, [r9, r2, lsl #2]
   32930:	mov	r5, ip
   32934:	sub	r3, r3, #1
   32938:	str	r3, [r4, r2, lsl #2]
   3293c:	ldr	r3, [lr], #4
   32940:	mov	r1, lr
   32944:	str	r3, [ip, #4]
   32948:	cmp	r1, fp
   3294c:	bne	32980 <GetDataSlab+0x16a64>
   32950:	ldr	r3, [sp, #204]	; 0xcc
   32954:	ldr	r1, [sp, #12]
   32958:	add	ip, ip, #4
   3295c:	ldr	r3, [r3, r2, lsl #2]
   32960:	mul	r3, r3, r1
   32964:	ldr	r1, [sp, #196]	; 0xc4
   32968:	str	r3, [sp, #12]
   3296c:	ldr	r3, [r5]
   32970:	ldr	r1, [r1, r2, lsl #2]
   32974:	add	r2, r2, #1
   32978:	mla	r6, r1, r3, r6
   3297c:	b	32810 <GetDataSlab+0x168f4>
   32980:	ldr	r7, [r4, r2, lsl #2]
   32984:	mov	r0, r1
   32988:	ldr	r3, [r1, #-4]!
   3298c:	mul	r3, r3, r7
   32990:	ldr	r7, [ip, #4]
   32994:	str	r3, [r4, r2, lsl #2]
   32998:	ldr	r3, [r0]
   3299c:	mul	r3, r3, r7
   329a0:	str	r3, [ip, #4]
   329a4:	b	32948 <GetDataSlab+0x16a2c>
   329a8:	ldrh	r3, [r1, #2]!
   329ac:	strb	r3, [r2], #1
   329b0:	b	32a14 <GetDataSlab+0x16af8>
   329b4:	cmp	r2, #0
   329b8:	beq	32ab8 <GetDataSlab+0x16b9c>
   329bc:	ldr	r3, [r8]
   329c0:	mul	r3, r3, r2
   329c4:	b	32ab0 <GetDataSlab+0x16b94>
   329c8:	add	r3, sp, #152	; 0x98
   329cc:	add	r3, r3, r5, lsl #2
   329d0:	ldr	r3, [r3, #-120]	; 0xffffff88
   329d4:	add	r6, r6, r3
   329d8:	add	r4, r4, r3, lsl #1
   329dc:	ldr	r3, [sp, #8]
   329e0:	add	r9, r9, r3
   329e4:	ldr	r3, [sp, #12]
   329e8:	cmp	r9, r3
   329ec:	bge	1c04c <GetDataSlab+0x130>
   329f0:	ldr	r3, [sp, #196]	; 0xc4
   329f4:	ldr	r3, [r3]
   329f8:	cmp	r3, #0
   329fc:	addne	r4, r4, r3, lsl #1
   32a00:	addne	r6, r6, r3
   32a04:	ldr	r3, [sp]
   32a08:	sub	r1, r4, #2
   32a0c:	add	r2, r3, r9
   32a10:	mov	r0, r2
   32a14:	ldr	r3, [sp, #204]	; 0xcc
   32a18:	ldr	r3, [r3]
   32a1c:	str	r3, [sp, #8]
   32a20:	ldr	ip, [sp, #8]
   32a24:	sub	r3, r2, r0
   32a28:	cmp	ip, r3
   32a2c:	bgt	329a8 <GetDataSlab+0x16a8c>
   32a30:	ldr	r3, [sp, #196]	; 0xc4
   32a34:	ldr	r2, [fp]
   32a38:	ldr	r8, [sp, #4]
   32a3c:	ldr	r3, [r3]
   32a40:	ldr	r5, [sp, #16]
   32a44:	sub	r3, r2, r3
   32a48:	add	r6, r6, r3
   32a4c:	add	r4, r4, r3, lsl #1
   32a50:	ldr	r3, [sp, #208]	; 0xd0
   32a54:	cmp	r5, r3
   32a58:	bge	329dc <GetDataSlab+0x16ac0>
   32a5c:	ldr	r3, [sl, r5, lsl #2]
   32a60:	ldr	r2, [sp, #204]	; 0xcc
   32a64:	add	r3, r3, #1
   32a68:	str	r3, [sl, r5, lsl #2]
   32a6c:	mov	r0, r3
   32a70:	ldr	r1, [r2, r5, lsl #2]
   32a74:	bl	3fd18 <__aeabi_idivmod>
   32a78:	subs	r3, r1, #0
   32a7c:	bne	329c8 <GetDataSlab+0x16aac>
   32a80:	ldr	r7, [r8, #4]
   32a84:	str	r3, [sl, r5, lsl #2]
   32a88:	mov	r1, r7
   32a8c:	mov	r0, r6
   32a90:	bl	3fd18 <__aeabi_idivmod>
   32a94:	ldr	r2, [sp, #196]	; 0xc4
   32a98:	ldr	r2, [r2, r5, lsl #2]
   32a9c:	subs	r3, r1, #0
   32aa0:	beq	329b4 <GetDataSlab+0x16a98>
   32aa4:	ldr	r1, [r8]
   32aa8:	sub	r3, r7, r3
   32aac:	mla	r3, r2, r1, r3
   32ab0:	add	r4, r4, r3, lsl #1
   32ab4:	add	r6, r6, r3
   32ab8:	add	r5, r5, #1
   32abc:	add	r8, r8, #4
   32ac0:	b	32a50 <GetDataSlab+0x16b34>
   32ac4:	ldrh	r3, [r4]
   32ac8:	strb	r3, [r2], #1
   32acc:	ldr	r3, [r9]
   32ad0:	add	r6, r6, r3
   32ad4:	add	r4, r4, r3, lsl #1
   32ad8:	b	32870 <GetDataSlab+0x16954>
   32adc:	cmp	r2, #0
   32ae0:	beq	32920 <GetDataSlab+0x16a04>
   32ae4:	ldr	r3, [r8]
   32ae8:	mul	r3, r3, r2
   32aec:	b	32918 <GetDataSlab+0x169fc>
   32af0:	add	r3, sp, #152	; 0x98
   32af4:	add	r3, r3, r5, lsl #2
   32af8:	ldr	r3, [r3, #-120]	; 0xffffff88
   32afc:	add	r6, r6, r3
   32b00:	add	r4, r4, r3, lsl #1
   32b04:	ldr	r3, [sp, #8]
   32b08:	ldr	r2, [sp, #16]
   32b0c:	add	r3, r3, r2
   32b10:	b	32838 <GetDataSlab+0x1691c>
   32b14:	ldr	r3, [r9]
   32b18:	ldr	ip, [sp, #4]
   32b1c:	str	r3, [sp, #16]
   32b20:	sub	r3, r3, #1
   32b24:	str	r3, [sp, #32]
   32b28:	ldr	r3, [fp]
   32b2c:	mov	lr, fp
   32b30:	str	r3, [sp, #112]	; 0x70
   32b34:	ldr	r3, [sp, #204]	; 0xcc
   32b38:	mov	r6, #0
   32b3c:	mov	r2, #1
   32b40:	ldr	r3, [r3]
   32b44:	str	r3, [sp, #12]
   32b48:	ldr	r3, [sp, #208]	; 0xd0
   32b4c:	cmp	r2, r3
   32b50:	blt	32c64 <GetDataSlab+0x16d48>
   32b54:	ldr	r3, [sp, #8]
   32b58:	add	r4, r3, r6
   32b5c:	ldr	r3, [sp, #16]
   32b60:	cmp	r3, #1
   32b64:	movne	r3, #0
   32b68:	moveq	r9, #0
   32b6c:	beq	32d1c <GetDataSlab+0x16e00>
   32b70:	str	r3, [sp, #8]
   32b74:	ldr	r3, [sp, #8]
   32b78:	ldr	r2, [sp, #12]
   32b7c:	cmp	r3, r2
   32b80:	bge	1c04c <GetDataSlab+0x130>
   32b84:	ldr	r3, [sp, #196]	; 0xc4
   32b88:	ldr	r2, [sp, #8]
   32b8c:	ldr	r3, [r3]
   32b90:	cmp	r3, #0
   32b94:	addne	r4, r4, r3
   32b98:	addne	r6, r6, r3
   32b9c:	ldr	r3, [sp]
   32ba0:	add	r2, r3, r2
   32ba4:	mov	r1, r2
   32ba8:	ldr	r3, [sp, #204]	; 0xcc
   32bac:	ldr	r3, [r3]
   32bb0:	str	r3, [sp, #16]
   32bb4:	ldr	r0, [sp, #16]
   32bb8:	sub	r3, r2, r1
   32bbc:	cmp	r0, r3
   32bc0:	bgt	32df8 <GetDataSlab+0x16edc>
   32bc4:	ldr	r3, [r9]
   32bc8:	ldr	r2, [fp]
   32bcc:	ldr	r8, [sp, #4]
   32bd0:	mul	r3, r3, r0
   32bd4:	mov	r5, #1
   32bd8:	sub	r3, r2, r3
   32bdc:	ldr	r2, [sp, #196]	; 0xc4
   32be0:	ldr	r2, [r2]
   32be4:	sub	r3, r3, r2
   32be8:	add	r6, r6, r3
   32bec:	add	r4, r4, r3
   32bf0:	ldr	r3, [sp, #208]	; 0xd0
   32bf4:	cmp	r5, r3
   32bf8:	bge	32e38 <GetDataSlab+0x16f1c>
   32bfc:	ldr	r3, [sl, r5, lsl #2]
   32c00:	ldr	r2, [sp, #204]	; 0xcc
   32c04:	add	r3, r3, #1
   32c08:	str	r3, [sl, r5, lsl #2]
   32c0c:	mov	r0, r3
   32c10:	ldr	r1, [r2, r5, lsl #2]
   32c14:	bl	3fd18 <__aeabi_idivmod>
   32c18:	subs	r3, r1, #0
   32c1c:	bne	32e24 <GetDataSlab+0x16f08>
   32c20:	ldr	r7, [r8, #4]
   32c24:	str	r3, [sl, r5, lsl #2]
   32c28:	mov	r1, r7
   32c2c:	mov	r0, r6
   32c30:	bl	3fd18 <__aeabi_idivmod>
   32c34:	ldr	r2, [sp, #196]	; 0xc4
   32c38:	ldr	r2, [r2, r5, lsl #2]
   32c3c:	subs	r3, r1, #0
   32c40:	beq	32e10 <GetDataSlab+0x16ef4>
   32c44:	ldr	r1, [r8]
   32c48:	sub	r3, r7, r3
   32c4c:	mla	r3, r2, r1, r3
   32c50:	add	r4, r4, r3
   32c54:	add	r6, r6, r3
   32c58:	add	r5, r5, #1
   32c5c:	add	r8, r8, #4
   32c60:	b	32bf0 <GetDataSlab+0x16cd4>
   32c64:	ldr	r3, [r9, r2, lsl #2]
   32c68:	mov	r5, ip
   32c6c:	sub	r3, r3, #1
   32c70:	str	r3, [r4, r2, lsl #2]
   32c74:	ldr	r3, [lr], #4
   32c78:	mov	r1, lr
   32c7c:	str	r3, [ip, #4]
   32c80:	cmp	r1, fp
   32c84:	bne	32cb8 <GetDataSlab+0x16d9c>
   32c88:	ldr	r3, [sp, #204]	; 0xcc
   32c8c:	ldr	r1, [sp, #12]
   32c90:	add	ip, ip, #4
   32c94:	ldr	r3, [r3, r2, lsl #2]
   32c98:	mul	r3, r3, r1
   32c9c:	ldr	r1, [sp, #196]	; 0xc4
   32ca0:	str	r3, [sp, #12]
   32ca4:	ldr	r3, [r5]
   32ca8:	ldr	r1, [r1, r2, lsl #2]
   32cac:	add	r2, r2, #1
   32cb0:	mla	r6, r1, r3, r6
   32cb4:	b	32b48 <GetDataSlab+0x16c2c>
   32cb8:	ldr	r7, [r4, r2, lsl #2]
   32cbc:	mov	r0, r1
   32cc0:	ldr	r3, [r1, #-4]!
   32cc4:	mul	r3, r3, r7
   32cc8:	ldr	r7, [ip, #4]
   32ccc:	str	r3, [r4, r2, lsl #2]
   32cd0:	ldr	r3, [r0]
   32cd4:	mul	r3, r3, r7
   32cd8:	str	r3, [ip, #4]
   32cdc:	b	32c80 <GetDataSlab+0x16d64>
   32ce0:	ldrsb	r3, [r2], #1
   32ce4:	strb	r3, [r1], #1
   32ce8:	b	32d48 <GetDataSlab+0x16e2c>
   32cec:	cmp	r2, #0
   32cf0:	beq	32dec <GetDataSlab+0x16ed0>
   32cf4:	ldr	r3, [r8]
   32cf8:	mul	r3, r3, r2
   32cfc:	b	32de4 <GetDataSlab+0x16ec8>
   32d00:	add	r3, sp, #152	; 0x98
   32d04:	add	r3, r3, r5, lsl #2
   32d08:	ldr	r3, [r3, #-120]	; 0xffffff88
   32d0c:	add	r6, r6, r3
   32d10:	add	r4, r4, r3
   32d14:	ldr	r3, [sp, #8]
   32d18:	add	r9, r9, r3
   32d1c:	ldr	r3, [sp, #12]
   32d20:	cmp	r9, r3
   32d24:	bge	1c04c <GetDataSlab+0x130>
   32d28:	ldr	r3, [sp, #196]	; 0xc4
   32d2c:	ldr	r3, [r3]
   32d30:	cmp	r3, #0
   32d34:	addne	r4, r4, r3
   32d38:	addne	r6, r6, r3
   32d3c:	ldr	r3, [sp]
   32d40:	mov	r2, r4
   32d44:	add	r1, r3, r9
   32d48:	ldr	r3, [sp, #204]	; 0xcc
   32d4c:	ldr	r3, [r3]
   32d50:	str	r3, [sp, #8]
   32d54:	ldr	r0, [sp, #8]
   32d58:	sub	r3, r2, r4
   32d5c:	cmp	r0, r3
   32d60:	bgt	32ce0 <GetDataSlab+0x16dc4>
   32d64:	ldr	r3, [sp, #196]	; 0xc4
   32d68:	ldr	r2, [fp]
   32d6c:	ldr	r8, [sp, #4]
   32d70:	ldr	r3, [r3]
   32d74:	ldr	r5, [sp, #16]
   32d78:	sub	r3, r2, r3
   32d7c:	add	r6, r6, r3
   32d80:	add	r4, r4, r3
   32d84:	ldr	r3, [sp, #208]	; 0xd0
   32d88:	cmp	r5, r3
   32d8c:	bge	32d14 <GetDataSlab+0x16df8>
   32d90:	ldr	r3, [sl, r5, lsl #2]
   32d94:	ldr	r2, [sp, #204]	; 0xcc
   32d98:	add	r3, r3, #1
   32d9c:	str	r3, [sl, r5, lsl #2]
   32da0:	mov	r0, r3
   32da4:	ldr	r1, [r2, r5, lsl #2]
   32da8:	bl	3fd18 <__aeabi_idivmod>
   32dac:	subs	r3, r1, #0
   32db0:	bne	32d00 <GetDataSlab+0x16de4>
   32db4:	ldr	r7, [r8, #4]
   32db8:	str	r3, [sl, r5, lsl #2]
   32dbc:	mov	r1, r7
   32dc0:	mov	r0, r6
   32dc4:	bl	3fd18 <__aeabi_idivmod>
   32dc8:	ldr	r2, [sp, #196]	; 0xc4
   32dcc:	ldr	r2, [r2, r5, lsl #2]
   32dd0:	subs	r3, r1, #0
   32dd4:	beq	32cec <GetDataSlab+0x16dd0>
   32dd8:	ldr	r1, [r8]
   32ddc:	sub	r3, r7, r3
   32de0:	mla	r3, r2, r1, r3
   32de4:	add	r4, r4, r3
   32de8:	add	r6, r6, r3
   32dec:	add	r5, r5, #1
   32df0:	add	r8, r8, #4
   32df4:	b	32d84 <GetDataSlab+0x16e68>
   32df8:	ldrb	r3, [r4]
   32dfc:	strb	r3, [r2], #1
   32e00:	ldr	r3, [r9]
   32e04:	add	r4, r4, r3
   32e08:	add	r6, r6, r3
   32e0c:	b	32ba8 <GetDataSlab+0x16c8c>
   32e10:	cmp	r2, #0
   32e14:	beq	32c58 <GetDataSlab+0x16d3c>
   32e18:	ldr	r3, [r8]
   32e1c:	mul	r3, r3, r2
   32e20:	b	32c50 <GetDataSlab+0x16d34>
   32e24:	add	r3, sp, #152	; 0x98
   32e28:	add	r3, r3, r5, lsl #2
   32e2c:	ldr	r3, [r3, #-120]	; 0xffffff88
   32e30:	add	r6, r6, r3
   32e34:	add	r4, r4, r3
   32e38:	ldr	r3, [sp, #8]
   32e3c:	ldr	r2, [sp, #16]
   32e40:	add	r3, r3, r2
   32e44:	b	32b70 <GetDataSlab+0x16c54>
   32e48:	ldr	r3, [r9]
   32e4c:	ldr	ip, [sp, #4]
   32e50:	str	r3, [sp, #16]
   32e54:	sub	r3, r3, #1
   32e58:	str	r3, [sp, #32]
   32e5c:	ldr	r3, [fp]
   32e60:	mov	lr, fp
   32e64:	str	r3, [sp, #112]	; 0x70
   32e68:	ldr	r3, [sp, #204]	; 0xcc
   32e6c:	mov	r6, #0
   32e70:	mov	r2, #1
   32e74:	ldr	r3, [r3]
   32e78:	str	r3, [sp, #12]
   32e7c:	ldr	r3, [sp, #208]	; 0xd0
   32e80:	cmp	r2, r3
   32e84:	blt	32f98 <GetDataSlab+0x1707c>
   32e88:	ldr	r3, [sp, #8]
   32e8c:	add	r4, r3, r6
   32e90:	ldr	r3, [sp, #16]
   32e94:	cmp	r3, #1
   32e98:	movne	r3, #0
   32e9c:	moveq	r9, #0
   32ea0:	beq	33050 <GetDataSlab+0x17134>
   32ea4:	str	r3, [sp, #8]
   32ea8:	ldr	r3, [sp, #8]
   32eac:	ldr	r2, [sp, #12]
   32eb0:	cmp	r3, r2
   32eb4:	bge	1c04c <GetDataSlab+0x130>
   32eb8:	ldr	r3, [sp, #196]	; 0xc4
   32ebc:	ldr	r2, [sp, #8]
   32ec0:	ldr	r3, [r3]
   32ec4:	cmp	r3, #0
   32ec8:	addne	r4, r4, r3
   32ecc:	addne	r6, r6, r3
   32ed0:	ldr	r3, [sp]
   32ed4:	add	r2, r3, r2
   32ed8:	mov	r1, r2
   32edc:	ldr	r3, [sp, #204]	; 0xcc
   32ee0:	ldr	r3, [r3]
   32ee4:	str	r3, [sp, #16]
   32ee8:	ldr	r0, [sp, #16]
   32eec:	sub	r3, r2, r1
   32ef0:	cmp	r0, r3
   32ef4:	bgt	3312c <GetDataSlab+0x17210>
   32ef8:	ldr	r3, [r9]
   32efc:	ldr	r2, [fp]
   32f00:	ldr	r8, [sp, #4]
   32f04:	mul	r3, r3, r0
   32f08:	mov	r5, #1
   32f0c:	sub	r3, r2, r3
   32f10:	ldr	r2, [sp, #196]	; 0xc4
   32f14:	ldr	r2, [r2]
   32f18:	sub	r3, r3, r2
   32f1c:	add	r6, r6, r3
   32f20:	add	r4, r4, r3
   32f24:	ldr	r3, [sp, #208]	; 0xd0
   32f28:	cmp	r5, r3
   32f2c:	bge	3316c <GetDataSlab+0x17250>
   32f30:	ldr	r3, [sl, r5, lsl #2]
   32f34:	ldr	r2, [sp, #204]	; 0xcc
   32f38:	add	r3, r3, #1
   32f3c:	str	r3, [sl, r5, lsl #2]
   32f40:	mov	r0, r3
   32f44:	ldr	r1, [r2, r5, lsl #2]
   32f48:	bl	3fd18 <__aeabi_idivmod>
   32f4c:	subs	r3, r1, #0
   32f50:	bne	33158 <GetDataSlab+0x1723c>
   32f54:	ldr	r7, [r8, #4]
   32f58:	str	r3, [sl, r5, lsl #2]
   32f5c:	mov	r1, r7
   32f60:	mov	r0, r6
   32f64:	bl	3fd18 <__aeabi_idivmod>
   32f68:	ldr	r2, [sp, #196]	; 0xc4
   32f6c:	ldr	r2, [r2, r5, lsl #2]
   32f70:	subs	r3, r1, #0
   32f74:	beq	33144 <GetDataSlab+0x17228>
   32f78:	ldr	r1, [r8]
   32f7c:	sub	r3, r7, r3
   32f80:	mla	r3, r2, r1, r3
   32f84:	add	r4, r4, r3
   32f88:	add	r6, r6, r3
   32f8c:	add	r5, r5, #1
   32f90:	add	r8, r8, #4
   32f94:	b	32f24 <GetDataSlab+0x17008>
   32f98:	ldr	r3, [r9, r2, lsl #2]
   32f9c:	mov	r5, ip
   32fa0:	sub	r3, r3, #1
   32fa4:	str	r3, [r4, r2, lsl #2]
   32fa8:	ldr	r3, [lr], #4
   32fac:	mov	r1, lr
   32fb0:	str	r3, [ip, #4]
   32fb4:	cmp	r1, fp
   32fb8:	bne	32fec <GetDataSlab+0x170d0>
   32fbc:	ldr	r3, [sp, #204]	; 0xcc
   32fc0:	ldr	r1, [sp, #12]
   32fc4:	add	ip, ip, #4
   32fc8:	ldr	r3, [r3, r2, lsl #2]
   32fcc:	mul	r3, r3, r1
   32fd0:	ldr	r1, [sp, #196]	; 0xc4
   32fd4:	str	r3, [sp, #12]
   32fd8:	ldr	r3, [r5]
   32fdc:	ldr	r1, [r1, r2, lsl #2]
   32fe0:	add	r2, r2, #1
   32fe4:	mla	r6, r1, r3, r6
   32fe8:	b	32e7c <GetDataSlab+0x16f60>
   32fec:	ldr	r7, [r4, r2, lsl #2]
   32ff0:	mov	r0, r1
   32ff4:	ldr	r3, [r1, #-4]!
   32ff8:	mul	r3, r3, r7
   32ffc:	ldr	r7, [ip, #4]
   33000:	str	r3, [r4, r2, lsl #2]
   33004:	ldr	r3, [r0]
   33008:	mul	r3, r3, r7
   3300c:	str	r3, [ip, #4]
   33010:	b	32fb4 <GetDataSlab+0x17098>
   33014:	ldrb	r3, [r2], #1
   33018:	strb	r3, [r1], #1
   3301c:	b	3307c <GetDataSlab+0x17160>
   33020:	cmp	r2, #0
   33024:	beq	33120 <GetDataSlab+0x17204>
   33028:	ldr	r3, [r8]
   3302c:	mul	r3, r3, r2
   33030:	b	33118 <GetDataSlab+0x171fc>
   33034:	add	r3, sp, #152	; 0x98
   33038:	add	r3, r3, r5, lsl #2
   3303c:	ldr	r3, [r3, #-120]	; 0xffffff88
   33040:	add	r6, r6, r3
   33044:	add	r4, r4, r3
   33048:	ldr	r3, [sp, #8]
   3304c:	add	r9, r9, r3
   33050:	ldr	r3, [sp, #12]
   33054:	cmp	r9, r3
   33058:	bge	1c04c <GetDataSlab+0x130>
   3305c:	ldr	r3, [sp, #196]	; 0xc4
   33060:	ldr	r3, [r3]
   33064:	cmp	r3, #0
   33068:	addne	r4, r4, r3
   3306c:	addne	r6, r6, r3
   33070:	ldr	r3, [sp]
   33074:	mov	r2, r4
   33078:	add	r1, r3, r9
   3307c:	ldr	r3, [sp, #204]	; 0xcc
   33080:	ldr	r3, [r3]
   33084:	str	r3, [sp, #8]
   33088:	ldr	r0, [sp, #8]
   3308c:	sub	r3, r2, r4
   33090:	cmp	r0, r3
   33094:	bgt	33014 <GetDataSlab+0x170f8>
   33098:	ldr	r3, [sp, #196]	; 0xc4
   3309c:	ldr	r2, [fp]
   330a0:	ldr	r8, [sp, #4]
   330a4:	ldr	r3, [r3]
   330a8:	ldr	r5, [sp, #16]
   330ac:	sub	r3, r2, r3
   330b0:	add	r6, r6, r3
   330b4:	add	r4, r4, r3
   330b8:	ldr	r3, [sp, #208]	; 0xd0
   330bc:	cmp	r5, r3
   330c0:	bge	33048 <GetDataSlab+0x1712c>
   330c4:	ldr	r3, [sl, r5, lsl #2]
   330c8:	ldr	r2, [sp, #204]	; 0xcc
   330cc:	add	r3, r3, #1
   330d0:	str	r3, [sl, r5, lsl #2]
   330d4:	mov	r0, r3
   330d8:	ldr	r1, [r2, r5, lsl #2]
   330dc:	bl	3fd18 <__aeabi_idivmod>
   330e0:	subs	r3, r1, #0
   330e4:	bne	33034 <GetDataSlab+0x17118>
   330e8:	ldr	r7, [r8, #4]
   330ec:	str	r3, [sl, r5, lsl #2]
   330f0:	mov	r1, r7
   330f4:	mov	r0, r6
   330f8:	bl	3fd18 <__aeabi_idivmod>
   330fc:	ldr	r2, [sp, #196]	; 0xc4
   33100:	ldr	r2, [r2, r5, lsl #2]
   33104:	subs	r3, r1, #0
   33108:	beq	33020 <GetDataSlab+0x17104>
   3310c:	ldr	r1, [r8]
   33110:	sub	r3, r7, r3
   33114:	mla	r3, r2, r1, r3
   33118:	add	r4, r4, r3
   3311c:	add	r6, r6, r3
   33120:	add	r5, r5, #1
   33124:	add	r8, r8, #4
   33128:	b	330b8 <GetDataSlab+0x1719c>
   3312c:	ldrb	r3, [r4]
   33130:	strb	r3, [r2], #1
   33134:	ldr	r3, [r9]
   33138:	add	r4, r4, r3
   3313c:	add	r6, r6, r3
   33140:	b	32edc <GetDataSlab+0x16fc0>
   33144:	cmp	r2, #0
   33148:	beq	32f8c <GetDataSlab+0x17070>
   3314c:	ldr	r3, [r8]
   33150:	mul	r3, r3, r2
   33154:	b	32f84 <GetDataSlab+0x17068>
   33158:	add	r3, sp, #152	; 0x98
   3315c:	add	r3, r3, r5, lsl #2
   33160:	ldr	r3, [r3, #-120]	; 0xffffff88
   33164:	add	r6, r6, r3
   33168:	add	r4, r4, r3
   3316c:	ldr	r3, [sp, #8]
   33170:	ldr	r2, [sp, #16]
   33174:	add	r3, r3, r2
   33178:	b	32ea4 <GetDataSlab+0x16f88>
   3317c:	cmp	r5, #12
   33180:	bne	334bc <GetDataSlab+0x175a0>
   33184:	ldr	r3, [r9]
   33188:	ldr	ip, [sp, #4]
   3318c:	str	r3, [sp, #16]
   33190:	sub	r3, r3, #1
   33194:	str	r3, [sp, #32]
   33198:	ldr	r3, [fp]
   3319c:	mov	lr, fp
   331a0:	str	r3, [sp, #112]	; 0x70
   331a4:	ldr	r3, [sp, #204]	; 0xcc
   331a8:	mov	r6, #0
   331ac:	mov	r2, #1
   331b0:	ldr	r3, [r3]
   331b4:	str	r3, [sp, #12]
   331b8:	ldr	r3, [sp, #208]	; 0xd0
   331bc:	cmp	r2, r3
   331c0:	blt	332d4 <GetDataSlab+0x173b8>
   331c4:	ldr	r3, [sp, #8]
   331c8:	add	r4, r3, r6, lsl #3
   331cc:	ldr	r3, [sp, #16]
   331d0:	cmp	r3, #1
   331d4:	movne	r3, #0
   331d8:	moveq	r9, #0
   331dc:	beq	3338c <GetDataSlab+0x17470>
   331e0:	str	r3, [sp, #8]
   331e4:	ldr	r3, [sp, #8]
   331e8:	ldr	r2, [sp, #12]
   331ec:	cmp	r3, r2
   331f0:	bge	1c04c <GetDataSlab+0x130>
   331f4:	ldr	r3, [sp, #196]	; 0xc4
   331f8:	ldr	r2, [sp, #8]
   331fc:	ldr	r3, [r3]
   33200:	cmp	r3, #0
   33204:	addne	r4, r4, r3, lsl #3
   33208:	addne	r6, r6, r3
   3320c:	ldr	r3, [sp]
   33210:	add	r2, r3, r2
   33214:	mov	r1, r2
   33218:	ldr	r3, [sp, #204]	; 0xcc
   3321c:	ldr	r3, [r3]
   33220:	str	r3, [sp, #16]
   33224:	ldr	r0, [sp, #16]
   33228:	sub	r3, r2, r1
   3322c:	cmp	r0, r3
   33230:	bgt	3346c <GetDataSlab+0x17550>
   33234:	ldr	r3, [r9]
   33238:	ldr	r2, [fp]
   3323c:	ldr	r8, [sp, #4]
   33240:	mul	r3, r3, r0
   33244:	mov	r5, #1
   33248:	sub	r3, r2, r3
   3324c:	ldr	r2, [sp, #196]	; 0xc4
   33250:	ldr	r2, [r2]
   33254:	sub	r3, r3, r2
   33258:	add	r6, r6, r3
   3325c:	add	r4, r4, r3, lsl #3
   33260:	ldr	r3, [sp, #208]	; 0xd0
   33264:	cmp	r5, r3
   33268:	bge	334ac <GetDataSlab+0x17590>
   3326c:	ldr	r3, [sl, r5, lsl #2]
   33270:	ldr	r2, [sp, #204]	; 0xcc
   33274:	add	r3, r3, #1
   33278:	str	r3, [sl, r5, lsl #2]
   3327c:	mov	r0, r3
   33280:	ldr	r1, [r2, r5, lsl #2]
   33284:	bl	3fd18 <__aeabi_idivmod>
   33288:	subs	r3, r1, #0
   3328c:	bne	33498 <GetDataSlab+0x1757c>
   33290:	ldr	r7, [r8, #4]
   33294:	str	r3, [sl, r5, lsl #2]
   33298:	mov	r1, r7
   3329c:	mov	r0, r6
   332a0:	bl	3fd18 <__aeabi_idivmod>
   332a4:	ldr	r2, [sp, #196]	; 0xc4
   332a8:	ldr	r2, [r2, r5, lsl #2]
   332ac:	subs	r3, r1, #0
   332b0:	beq	33484 <GetDataSlab+0x17568>
   332b4:	ldr	r1, [r8]
   332b8:	sub	r3, r7, r3
   332bc:	mla	r3, r2, r1, r3
   332c0:	add	r4, r4, r3, lsl #3
   332c4:	add	r6, r6, r3
   332c8:	add	r5, r5, #1
   332cc:	add	r8, r8, #4
   332d0:	b	33260 <GetDataSlab+0x17344>
   332d4:	ldr	r3, [r9, r2, lsl #2]
   332d8:	mov	r5, ip
   332dc:	sub	r3, r3, #1
   332e0:	str	r3, [r4, r2, lsl #2]
   332e4:	ldr	r3, [lr], #4
   332e8:	mov	r1, lr
   332ec:	str	r3, [ip, #4]
   332f0:	cmp	r1, fp
   332f4:	bne	33328 <GetDataSlab+0x1740c>
   332f8:	ldr	r3, [sp, #204]	; 0xcc
   332fc:	ldr	r1, [sp, #12]
   33300:	add	ip, ip, #4
   33304:	ldr	r3, [r3, r2, lsl #2]
   33308:	mul	r3, r3, r1
   3330c:	ldr	r1, [sp, #196]	; 0xc4
   33310:	str	r3, [sp, #12]
   33314:	ldr	r3, [r5]
   33318:	ldr	r1, [r1, r2, lsl #2]
   3331c:	add	r2, r2, #1
   33320:	mla	r6, r1, r3, r6
   33324:	b	331b8 <GetDataSlab+0x1729c>
   33328:	ldr	r7, [r4, r2, lsl #2]
   3332c:	mov	r0, r1
   33330:	ldr	r3, [r1, #-4]!
   33334:	mul	r3, r3, r7
   33338:	ldr	r7, [ip, #4]
   3333c:	str	r3, [r4, r2, lsl #2]
   33340:	ldr	r3, [r0]
   33344:	mul	r3, r3, r7
   33348:	str	r3, [ip, #4]
   3334c:	b	332f0 <GetDataSlab+0x173d4>
   33350:	ldr	r3, [r1, #8]!
   33354:	strb	r3, [r2], #1
   33358:	b	333bc <GetDataSlab+0x174a0>
   3335c:	cmp	r2, #0
   33360:	beq	33460 <GetDataSlab+0x17544>
   33364:	ldr	r3, [r8]
   33368:	mul	r3, r3, r2
   3336c:	b	33458 <GetDataSlab+0x1753c>
   33370:	add	r3, sp, #152	; 0x98
   33374:	add	r3, r3, r5, lsl #2
   33378:	ldr	r3, [r3, #-120]	; 0xffffff88
   3337c:	add	r6, r6, r3
   33380:	add	r4, r4, r3, lsl #3
   33384:	ldr	r3, [sp, #8]
   33388:	add	r9, r9, r3
   3338c:	ldr	r3, [sp, #12]
   33390:	cmp	r9, r3
   33394:	bge	1c04c <GetDataSlab+0x130>
   33398:	ldr	r3, [sp, #196]	; 0xc4
   3339c:	ldr	r3, [r3]
   333a0:	cmp	r3, #0
   333a4:	addne	r4, r4, r3, lsl #3
   333a8:	addne	r6, r6, r3
   333ac:	ldr	r3, [sp]
   333b0:	sub	r1, r4, #8
   333b4:	add	r2, r3, r9
   333b8:	mov	r0, r2
   333bc:	ldr	r3, [sp, #204]	; 0xcc
   333c0:	ldr	r3, [r3]
   333c4:	str	r3, [sp, #8]
   333c8:	ldr	ip, [sp, #8]
   333cc:	sub	r3, r2, r0
   333d0:	cmp	ip, r3
   333d4:	bgt	33350 <GetDataSlab+0x17434>
   333d8:	ldr	r3, [sp, #196]	; 0xc4
   333dc:	ldr	r2, [fp]
   333e0:	ldr	r8, [sp, #4]
   333e4:	ldr	r3, [r3]
   333e8:	ldr	r5, [sp, #16]
   333ec:	sub	r3, r2, r3
   333f0:	add	r6, r6, r3
   333f4:	add	r4, r4, r3, lsl #3
   333f8:	ldr	r3, [sp, #208]	; 0xd0
   333fc:	cmp	r5, r3
   33400:	bge	33384 <GetDataSlab+0x17468>
   33404:	ldr	r3, [sl, r5, lsl #2]
   33408:	ldr	r2, [sp, #204]	; 0xcc
   3340c:	add	r3, r3, #1
   33410:	str	r3, [sl, r5, lsl #2]
   33414:	mov	r0, r3
   33418:	ldr	r1, [r2, r5, lsl #2]
   3341c:	bl	3fd18 <__aeabi_idivmod>
   33420:	subs	r3, r1, #0
   33424:	bne	33370 <GetDataSlab+0x17454>
   33428:	ldr	r7, [r8, #4]
   3342c:	str	r3, [sl, r5, lsl #2]
   33430:	mov	r1, r7
   33434:	mov	r0, r6
   33438:	bl	3fd18 <__aeabi_idivmod>
   3343c:	ldr	r2, [sp, #196]	; 0xc4
   33440:	ldr	r2, [r2, r5, lsl #2]
   33444:	subs	r3, r1, #0
   33448:	beq	3335c <GetDataSlab+0x17440>
   3344c:	ldr	r1, [r8]
   33450:	sub	r3, r7, r3
   33454:	mla	r3, r2, r1, r3
   33458:	add	r4, r4, r3, lsl #3
   3345c:	add	r6, r6, r3
   33460:	add	r5, r5, #1
   33464:	add	r8, r8, #4
   33468:	b	333f8 <GetDataSlab+0x174dc>
   3346c:	ldr	r3, [r4]
   33470:	strb	r3, [r2], #1
   33474:	ldr	r3, [r9]
   33478:	add	r6, r6, r3
   3347c:	add	r4, r4, r3, lsl #3
   33480:	b	33218 <GetDataSlab+0x172fc>
   33484:	cmp	r2, #0
   33488:	beq	332c8 <GetDataSlab+0x173ac>
   3348c:	ldr	r3, [r8]
   33490:	mul	r3, r3, r2
   33494:	b	332c0 <GetDataSlab+0x173a4>
   33498:	add	r3, sp, #152	; 0x98
   3349c:	add	r3, r3, r5, lsl #2
   334a0:	ldr	r3, [r3, #-120]	; 0xffffff88
   334a4:	add	r6, r6, r3
   334a8:	add	r4, r4, r3, lsl #3
   334ac:	ldr	r3, [sp, #8]
   334b0:	ldr	r2, [sp, #16]
   334b4:	add	r3, r3, r2
   334b8:	b	331e0 <GetDataSlab+0x172c4>
   334bc:	cmp	r5, #13
   334c0:	bne	337fc <GetDataSlab+0x178e0>
   334c4:	ldr	r3, [r9]
   334c8:	ldr	ip, [sp, #4]
   334cc:	str	r3, [sp, #16]
   334d0:	sub	r3, r3, #1
   334d4:	str	r3, [sp, #32]
   334d8:	ldr	r3, [fp]
   334dc:	mov	lr, fp
   334e0:	str	r3, [sp, #112]	; 0x70
   334e4:	ldr	r3, [sp, #204]	; 0xcc
   334e8:	mov	r6, #0
   334ec:	mov	r2, #1
   334f0:	ldr	r3, [r3]
   334f4:	str	r3, [sp, #12]
   334f8:	ldr	r3, [sp, #208]	; 0xd0
   334fc:	cmp	r2, r3
   33500:	blt	33614 <GetDataSlab+0x176f8>
   33504:	ldr	r3, [sp, #8]
   33508:	add	r4, r3, r6, lsl #3
   3350c:	ldr	r3, [sp, #16]
   33510:	cmp	r3, #1
   33514:	movne	r3, #0
   33518:	moveq	r9, #0
   3351c:	beq	336cc <GetDataSlab+0x177b0>
   33520:	str	r3, [sp, #8]
   33524:	ldr	r3, [sp, #8]
   33528:	ldr	r2, [sp, #12]
   3352c:	cmp	r3, r2
   33530:	bge	1c04c <GetDataSlab+0x130>
   33534:	ldr	r3, [sp, #196]	; 0xc4
   33538:	ldr	r2, [sp, #8]
   3353c:	ldr	r3, [r3]
   33540:	cmp	r3, #0
   33544:	addne	r4, r4, r3, lsl #3
   33548:	addne	r6, r6, r3
   3354c:	ldr	r3, [sp]
   33550:	add	r2, r3, r2
   33554:	mov	r1, r2
   33558:	ldr	r3, [sp, #204]	; 0xcc
   3355c:	ldr	r3, [r3]
   33560:	str	r3, [sp, #16]
   33564:	ldr	r0, [sp, #16]
   33568:	sub	r3, r2, r1
   3356c:	cmp	r0, r3
   33570:	bgt	337ac <GetDataSlab+0x17890>
   33574:	ldr	r3, [r9]
   33578:	ldr	r2, [fp]
   3357c:	ldr	r8, [sp, #4]
   33580:	mul	r3, r3, r0
   33584:	mov	r5, #1
   33588:	sub	r3, r2, r3
   3358c:	ldr	r2, [sp, #196]	; 0xc4
   33590:	ldr	r2, [r2]
   33594:	sub	r3, r3, r2
   33598:	add	r6, r6, r3
   3359c:	add	r4, r4, r3, lsl #3
   335a0:	ldr	r3, [sp, #208]	; 0xd0
   335a4:	cmp	r5, r3
   335a8:	bge	337ec <GetDataSlab+0x178d0>
   335ac:	ldr	r3, [sl, r5, lsl #2]
   335b0:	ldr	r2, [sp, #204]	; 0xcc
   335b4:	add	r3, r3, #1
   335b8:	str	r3, [sl, r5, lsl #2]
   335bc:	mov	r0, r3
   335c0:	ldr	r1, [r2, r5, lsl #2]
   335c4:	bl	3fd18 <__aeabi_idivmod>
   335c8:	subs	r3, r1, #0
   335cc:	bne	337d8 <GetDataSlab+0x178bc>
   335d0:	ldr	r7, [r8, #4]
   335d4:	str	r3, [sl, r5, lsl #2]
   335d8:	mov	r1, r7
   335dc:	mov	r0, r6
   335e0:	bl	3fd18 <__aeabi_idivmod>
   335e4:	ldr	r2, [sp, #196]	; 0xc4
   335e8:	ldr	r2, [r2, r5, lsl #2]
   335ec:	subs	r3, r1, #0
   335f0:	beq	337c4 <GetDataSlab+0x178a8>
   335f4:	ldr	r1, [r8]
   335f8:	sub	r3, r7, r3
   335fc:	mla	r3, r2, r1, r3
   33600:	add	r4, r4, r3, lsl #3
   33604:	add	r6, r6, r3
   33608:	add	r5, r5, #1
   3360c:	add	r8, r8, #4
   33610:	b	335a0 <GetDataSlab+0x17684>
   33614:	ldr	r3, [r9, r2, lsl #2]
   33618:	mov	r5, ip
   3361c:	sub	r3, r3, #1
   33620:	str	r3, [r4, r2, lsl #2]
   33624:	ldr	r3, [lr], #4
   33628:	mov	r1, lr
   3362c:	str	r3, [ip, #4]
   33630:	cmp	fp, r1
   33634:	bne	33668 <GetDataSlab+0x1774c>
   33638:	ldr	r3, [sp, #204]	; 0xcc
   3363c:	ldr	r1, [sp, #12]
   33640:	add	ip, ip, #4
   33644:	ldr	r3, [r3, r2, lsl #2]
   33648:	mul	r3, r3, r1
   3364c:	ldr	r1, [sp, #196]	; 0xc4
   33650:	str	r3, [sp, #12]
   33654:	ldr	r3, [r5]
   33658:	ldr	r1, [r1, r2, lsl #2]
   3365c:	add	r2, r2, #1
   33660:	mla	r6, r1, r3, r6
   33664:	b	334f8 <GetDataSlab+0x175dc>
   33668:	ldr	r7, [r4, r2, lsl #2]
   3366c:	mov	r0, r1
   33670:	ldr	r3, [r1, #-4]!
   33674:	mul	r3, r3, r7
   33678:	ldr	r7, [ip, #4]
   3367c:	str	r3, [r4, r2, lsl #2]
   33680:	ldr	r3, [r0]
   33684:	mul	r3, r3, r7
   33688:	str	r3, [ip, #4]
   3368c:	b	33630 <GetDataSlab+0x17714>
   33690:	ldr	r3, [r1, #8]!
   33694:	strb	r3, [r2], #1
   33698:	b	336fc <GetDataSlab+0x177e0>
   3369c:	cmp	r2, #0
   336a0:	beq	337a0 <GetDataSlab+0x17884>
   336a4:	ldr	r3, [r8]
   336a8:	mul	r3, r3, r2
   336ac:	b	33798 <GetDataSlab+0x1787c>
   336b0:	add	r3, sp, #152	; 0x98
   336b4:	add	r3, r3, r5, lsl #2
   336b8:	ldr	r3, [r3, #-120]	; 0xffffff88
   336bc:	add	r6, r6, r3
   336c0:	add	r4, r4, r3, lsl #3
   336c4:	ldr	r3, [sp, #8]
   336c8:	add	r9, r9, r3
   336cc:	ldr	r3, [sp, #12]
   336d0:	cmp	r9, r3
   336d4:	bge	1c04c <GetDataSlab+0x130>
   336d8:	ldr	r3, [sp, #196]	; 0xc4
   336dc:	ldr	r3, [r3]
   336e0:	cmp	r3, #0
   336e4:	addne	r4, r4, r3, lsl #3
   336e8:	addne	r6, r6, r3
   336ec:	ldr	r3, [sp]
   336f0:	sub	r1, r4, #8
   336f4:	add	r2, r3, r9
   336f8:	mov	r0, r2
   336fc:	ldr	r3, [sp, #204]	; 0xcc
   33700:	ldr	r3, [r3]
   33704:	str	r3, [sp, #8]
   33708:	ldr	ip, [sp, #8]
   3370c:	sub	r3, r2, r0
   33710:	cmp	ip, r3
   33714:	bgt	33690 <GetDataSlab+0x17774>
   33718:	ldr	r3, [sp, #196]	; 0xc4
   3371c:	ldr	r2, [fp]
   33720:	ldr	r8, [sp, #4]
   33724:	ldr	r3, [r3]
   33728:	ldr	r5, [sp, #16]
   3372c:	sub	r3, r2, r3
   33730:	add	r6, r6, r3
   33734:	add	r4, r4, r3, lsl #3
   33738:	ldr	r3, [sp, #208]	; 0xd0
   3373c:	cmp	r5, r3
   33740:	bge	336c4 <GetDataSlab+0x177a8>
   33744:	ldr	r3, [sl, r5, lsl #2]
   33748:	ldr	r2, [sp, #204]	; 0xcc
   3374c:	add	r3, r3, #1
   33750:	str	r3, [sl, r5, lsl #2]
   33754:	mov	r0, r3
   33758:	ldr	r1, [r2, r5, lsl #2]
   3375c:	bl	3fd18 <__aeabi_idivmod>
   33760:	subs	r3, r1, #0
   33764:	bne	336b0 <GetDataSlab+0x17794>
   33768:	ldr	r7, [r8, #4]
   3376c:	str	r3, [sl, r5, lsl #2]
   33770:	mov	r1, r7
   33774:	mov	r0, r6
   33778:	bl	3fd18 <__aeabi_idivmod>
   3377c:	ldr	r2, [sp, #196]	; 0xc4
   33780:	ldr	r2, [r2, r5, lsl #2]
   33784:	subs	r3, r1, #0
   33788:	beq	3369c <GetDataSlab+0x17780>
   3378c:	ldr	r1, [r8]
   33790:	sub	r3, r7, r3
   33794:	mla	r3, r2, r1, r3
   33798:	add	r4, r4, r3, lsl #3
   3379c:	add	r6, r6, r3
   337a0:	add	r5, r5, #1
   337a4:	add	r8, r8, #4
   337a8:	b	33738 <GetDataSlab+0x1781c>
   337ac:	ldr	r3, [r4]
   337b0:	strb	r3, [r2], #1
   337b4:	ldr	r3, [r9]
   337b8:	add	r6, r6, r3
   337bc:	add	r4, r4, r3, lsl #3
   337c0:	b	33558 <GetDataSlab+0x1763c>
   337c4:	cmp	r2, #0
   337c8:	beq	33608 <GetDataSlab+0x176ec>
   337cc:	ldr	r3, [r8]
   337d0:	mul	r3, r3, r2
   337d4:	b	33600 <GetDataSlab+0x176e4>
   337d8:	add	r3, sp, #152	; 0x98
   337dc:	add	r3, r3, r5, lsl #2
   337e0:	ldr	r3, [r3, #-120]	; 0xffffff88
   337e4:	add	r6, r6, r3
   337e8:	add	r4, r4, r3, lsl #3
   337ec:	ldr	r3, [sp, #8]
   337f0:	ldr	r2, [sp, #16]
   337f4:	add	r3, r3, r2
   337f8:	b	33520 <GetDataSlab+0x17604>
   337fc:	mov	r3, #1
   33800:	b	1c050 <GetDataSlab+0x134>

00033804 <GetDataLinear>:
   33804:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33808:	mov	r4, r0
   3380c:	mov	r0, r3
   33810:	mov	sl, r2
   33814:	mov	r6, r1
   33818:	ldr	r9, [sp, #32]
   3381c:	ldr	r8, [sp, #36]	; 0x24
   33820:	ldr	r5, [sp, #40]	; 0x28
   33824:	bl	1600 <Mat_SizeOf@plt>
   33828:	sub	r2, sl, #6
   3382c:	mov	r7, r0
   33830:	cmp	r2, #9
   33834:	addls	pc, pc, r2, lsl #2
   33838:	b	33acc <GetDataLinear+0x2c8>
   3383c:	b	33864 <GetDataLinear+0x60>
   33840:	b	338b8 <GetDataLinear+0xb4>
   33844:	b	33a5c <GetDataLinear+0x258>
   33848:	b	33a94 <GetDataLinear+0x290>
   3384c:	b	339e4 <GetDataLinear+0x1e0>
   33850:	b	33a20 <GetDataLinear+0x21c>
   33854:	b	3396c <GetDataLinear+0x168>
   33858:	b	339a8 <GetDataLinear+0x1a4>
   3385c:	b	338f4 <GetDataLinear+0xf0>
   33860:	b	33930 <GetDataLinear+0x12c>
   33864:	cmp	r8, #0
   33868:	add	r1, r4, r9, lsl #3
   3386c:	lslne	r8, r8, #3
   33870:	movne	r4, r1
   33874:	movne	r9, #0
   33878:	bne	338a0 <GetDataLinear+0x9c>
   3387c:	mul	r2, r7, r5
   33880:	mov	r0, r6
   33884:	bl	14f8 <memcpy@plt>
   33888:	b	338b0 <GetDataLinear+0xac>
   3388c:	mov	r1, r4
   33890:	mov	r2, r7
   33894:	bl	14f8 <memcpy@plt>
   33898:	add	r9, r9, #1
   3389c:	add	r4, r4, r8
   338a0:	cmp	r9, r5
   338a4:	add	r0, r6, r9, lsl #3
   338a8:	blt	3388c <GetDataLinear+0x88>
   338ac:	mov	r8, #0
   338b0:	mov	r0, r8
   338b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   338b8:	cmp	r8, #0
   338bc:	add	r1, r4, r9, lsl #2
   338c0:	lslne	r8, r8, #2
   338c4:	movne	r4, r1
   338c8:	movne	r9, #0
   338cc:	beq	3387c <GetDataLinear+0x78>
   338d0:	cmp	r9, r5
   338d4:	add	r0, r6, r9, lsl #2
   338d8:	bge	338ac <GetDataLinear+0xa8>
   338dc:	mov	r1, r4
   338e0:	mov	r2, r7
   338e4:	bl	14f8 <memcpy@plt>
   338e8:	add	r9, r9, #1
   338ec:	add	r4, r4, r8
   338f0:	b	338d0 <GetDataLinear+0xcc>
   338f4:	cmp	r8, #0
   338f8:	add	r1, r4, r9, lsl #3
   338fc:	lslne	r8, r8, #3
   33900:	movne	r4, r1
   33904:	movne	r9, #0
   33908:	beq	3387c <GetDataLinear+0x78>
   3390c:	cmp	r9, r5
   33910:	add	r0, r6, r9, lsl #3
   33914:	bge	338ac <GetDataLinear+0xa8>
   33918:	mov	r1, r4
   3391c:	mov	r2, r7
   33920:	bl	14f8 <memcpy@plt>
   33924:	add	r9, r9, #1
   33928:	add	r4, r4, r8
   3392c:	b	3390c <GetDataLinear+0x108>
   33930:	cmp	r8, #0
   33934:	add	r1, r4, r9, lsl #3
   33938:	lslne	r8, r8, #3
   3393c:	movne	r4, r1
   33940:	movne	r9, #0
   33944:	beq	3387c <GetDataLinear+0x78>
   33948:	cmp	r9, r5
   3394c:	add	r0, r6, r9, lsl #3
   33950:	bge	338ac <GetDataLinear+0xa8>
   33954:	mov	r1, r4
   33958:	mov	r2, r7
   3395c:	bl	14f8 <memcpy@plt>
   33960:	add	r9, r9, #1
   33964:	add	r4, r4, r8
   33968:	b	33948 <GetDataLinear+0x144>
   3396c:	cmp	r8, #0
   33970:	add	r1, r4, r9, lsl #2
   33974:	lslne	r8, r8, #2
   33978:	movne	r4, r1
   3397c:	movne	r9, #0
   33980:	beq	3387c <GetDataLinear+0x78>
   33984:	cmp	r9, r5
   33988:	add	r0, r6, r9, lsl #2
   3398c:	bge	338ac <GetDataLinear+0xa8>
   33990:	mov	r1, r4
   33994:	mov	r2, r7
   33998:	bl	14f8 <memcpy@plt>
   3399c:	add	r9, r9, #1
   339a0:	add	r4, r4, r8
   339a4:	b	33984 <GetDataLinear+0x180>
   339a8:	cmp	r8, #0
   339ac:	add	r1, r4, r9, lsl #2
   339b0:	lslne	r8, r8, #2
   339b4:	movne	r4, r1
   339b8:	movne	r9, #0
   339bc:	beq	3387c <GetDataLinear+0x78>
   339c0:	cmp	r9, r5
   339c4:	add	r0, r6, r9, lsl #2
   339c8:	bge	338ac <GetDataLinear+0xa8>
   339cc:	mov	r1, r4
   339d0:	mov	r2, r7
   339d4:	bl	14f8 <memcpy@plt>
   339d8:	add	r9, r9, #1
   339dc:	add	r4, r4, r8
   339e0:	b	339c0 <GetDataLinear+0x1bc>
   339e4:	cmp	r8, #0
   339e8:	add	r1, r4, r9, lsl #1
   339ec:	lslne	r8, r8, #1
   339f0:	movne	r4, r1
   339f4:	movne	r9, #0
   339f8:	beq	3387c <GetDataLinear+0x78>
   339fc:	cmp	r9, r5
   33a00:	add	r0, r6, r9, lsl #1
   33a04:	bge	338ac <GetDataLinear+0xa8>
   33a08:	mov	r1, r4
   33a0c:	mov	r2, r7
   33a10:	bl	14f8 <memcpy@plt>
   33a14:	add	r9, r9, #1
   33a18:	add	r4, r4, r8
   33a1c:	b	339fc <GetDataLinear+0x1f8>
   33a20:	cmp	r8, #0
   33a24:	add	r1, r4, r9, lsl #1
   33a28:	lslne	r8, r8, #1
   33a2c:	movne	r4, r1
   33a30:	movne	r9, #0
   33a34:	beq	3387c <GetDataLinear+0x78>
   33a38:	cmp	r9, r5
   33a3c:	add	r0, r6, r9, lsl #1
   33a40:	bge	338ac <GetDataLinear+0xa8>
   33a44:	mov	r1, r4
   33a48:	mov	r2, r7
   33a4c:	bl	14f8 <memcpy@plt>
   33a50:	add	r9, r9, #1
   33a54:	add	r4, r4, r8
   33a58:	b	33a38 <GetDataLinear+0x234>
   33a5c:	add	r1, r4, r9
   33a60:	cmp	r8, #0
   33a64:	movne	r4, r1
   33a68:	movne	r9, #0
   33a6c:	beq	3387c <GetDataLinear+0x78>
   33a70:	cmp	r9, r5
   33a74:	add	r0, r6, r9
   33a78:	bge	338ac <GetDataLinear+0xa8>
   33a7c:	mov	r1, r4
   33a80:	mov	r2, r7
   33a84:	bl	14f8 <memcpy@plt>
   33a88:	add	r9, r9, #1
   33a8c:	add	r4, r4, r8
   33a90:	b	33a70 <GetDataLinear+0x26c>
   33a94:	add	r1, r4, r9
   33a98:	cmp	r8, #0
   33a9c:	movne	r4, r1
   33aa0:	movne	r9, #0
   33aa4:	beq	3387c <GetDataLinear+0x78>
   33aa8:	cmp	r9, r5
   33aac:	add	r0, r6, r9
   33ab0:	bge	338ac <GetDataLinear+0xa8>
   33ab4:	mov	r1, r4
   33ab8:	mov	r2, r7
   33abc:	bl	14f8 <memcpy@plt>
   33ac0:	add	r9, r9, #1
   33ac4:	add	r4, r4, r8
   33ac8:	b	33aa8 <GetDataLinear+0x2a4>
   33acc:	mov	r8, #1
   33ad0:	b	338b0 <GetDataLinear+0xac>

00033ad4 <WriteCompressedData>:
   33ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ad8:	sub	sp, sp, #1040	; 0x410
   33adc:	sub	sp, sp, #4
   33ae0:	mov	r5, #0
   33ae4:	subs	r8, r0, #0
   33ae8:	ldr	r6, [sp, #1080]	; 0x438
   33aec:	str	r5, [sp, #8]
   33af0:	str	r5, [sp, #12]
   33af4:	moveq	r0, r8
   33af8:	beq	33c4c <WriteCompressedData+0x178>
   33afc:	ldr	r0, [r8]
   33b00:	cmp	r0, r5
   33b04:	beq	33c4c <WriteCompressedData+0x178>
   33b08:	mov	r0, r6
   33b0c:	mov	r7, r3
   33b10:	mov	r4, r1
   33b14:	mov	sl, r2
   33b18:	bl	1600 <Mat_SizeOf@plt>
   33b1c:	str	r6, [sp]
   33b20:	add	r9, sp, #16
   33b24:	mov	fp, #1024	; 0x400
   33b28:	mov	r3, #8
   33b2c:	str	sp, [r4]
   33b30:	str	r3, [r4, #4]
   33b34:	mul	r6, r7, r0
   33b38:	str	r6, [sp, #4]
   33b3c:	mov	r1, #0
   33b40:	str	r9, [r4, #12]
   33b44:	str	fp, [r4, #16]
   33b48:	mov	r0, r4
   33b4c:	bl	1564 <deflate@plt>
   33b50:	ldr	r2, [r4, #16]
   33b54:	ldr	r3, [r8]
   33b58:	rsb	r2, r2, #1024	; 0x400
   33b5c:	mov	r1, #1
   33b60:	mov	r0, r9
   33b64:	bl	157c <fwrite@plt>
   33b68:	ldr	r3, [r4, #16]
   33b6c:	cmp	r3, #0
   33b70:	add	r5, r5, r0
   33b74:	mov	r0, r5
   33b78:	beq	33b3c <WriteCompressedData+0x68>
   33b7c:	cmp	sl, #0
   33b80:	cmpne	r7, #0
   33b84:	movle	r7, #1
   33b88:	movgt	r7, #0
   33b8c:	ble	33c4c <WriteCompressedData+0x178>
   33b90:	str	sl, [r4]
   33b94:	mov	fp, #1
   33b98:	mov	sl, #1024	; 0x400
   33b9c:	str	r6, [r4, #4]
   33ba0:	mov	r1, r7
   33ba4:	str	r9, [r4, #12]
   33ba8:	str	sl, [r4, #16]
   33bac:	mov	r0, r4
   33bb0:	bl	1564 <deflate@plt>
   33bb4:	ldr	r2, [r4, #16]
   33bb8:	ldr	r3, [r8]
   33bbc:	rsb	r2, r2, #1024	; 0x400
   33bc0:	mov	r1, fp
   33bc4:	mov	r0, r9
   33bc8:	bl	157c <fwrite@plt>
   33bcc:	ldr	r3, [r4, #16]
   33bd0:	cmp	r3, #0
   33bd4:	add	r5, r5, r0
   33bd8:	beq	33ba0 <WriteCompressedData+0xcc>
   33bdc:	ands	r3, r6, #7
   33be0:	beq	33c48 <WriteCompressedData+0x174>
   33be4:	rsbs	r6, r6, #0
   33be8:	and	r6, r6, #7
   33bec:	rsbpl	r3, r6, #0
   33bf0:	mov	sl, #1024	; 0x400
   33bf4:	mov	r7, #0
   33bf8:	mov	r6, #1
   33bfc:	sub	r2, r9, #8
   33c00:	rsb	r3, r3, #8
   33c04:	str	r2, [r4]
   33c08:	str	r3, [r4, #4]
   33c0c:	mov	r1, r7
   33c10:	str	r9, [r4, #12]
   33c14:	str	sl, [r4, #16]
   33c18:	mov	r0, r4
   33c1c:	bl	1564 <deflate@plt>
   33c20:	ldr	r2, [r4, #16]
   33c24:	ldr	r3, [r8]
   33c28:	rsb	r2, r2, #1024	; 0x400
   33c2c:	mov	r1, r6
   33c30:	mov	r0, r9
   33c34:	bl	157c <fwrite@plt>
   33c38:	ldr	r3, [r4, #16]
   33c3c:	cmp	r3, #0
   33c40:	add	r5, r5, r0
   33c44:	beq	33c0c <WriteCompressedData+0x138>
   33c48:	mov	r0, r5
   33c4c:	add	sp, sp, #1040	; 0x410
   33c50:	add	sp, sp, #4
   33c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00033c58 <ReadRankDims>:
   33c58:	cmp	r2, #5
   33c5c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c60:	movne	r4, #0
   33c64:	bne	33d50 <ReadRankDims+0xf8>
   33c68:	lsr	r2, r3, #2
   33c6c:	mov	r6, r0
   33c70:	str	r2, [r1, #4]
   33c74:	bic	r0, r3, #3
   33c78:	mov	r5, r1
   33c7c:	bl	15ac <malloc@plt>
   33c80:	cmp	r0, #0
   33c84:	mov	r4, r0
   33c88:	str	r0, [r5, #32]
   33c8c:	beq	33d5c <ReadRankDims+0x104>
   33c90:	mov	r4, #0
   33c94:	mov	r7, r4
   33c98:	add	r8, sp, #4
   33c9c:	mov	r9, #1
   33ca0:	mov	sl, #4
   33ca4:	ldr	r3, [r5, #4]
   33ca8:	cmp	r7, r3
   33cac:	blt	33ce4 <ReadRankDims+0x8c>
   33cb0:	tst	r3, #1
   33cb4:	beq	33d50 <ReadRankDims+0xf8>
   33cb8:	mov	r1, #4
   33cbc:	ldr	r3, [r6]
   33cc0:	mov	r2, #1
   33cc4:	add	r0, sp, r1
   33cc8:	bl	1588 <fread@plt>
   33ccc:	cmp	r0, #1
   33cd0:	addeq	r4, r4, #4
   33cd4:	beq	33d50 <ReadRankDims+0xf8>
   33cd8:	ldr	r0, [pc, #140]	; 33d6c <ReadRankDims+0x114>
   33cdc:	add	r0, pc, r0
   33ce0:	b	33d4c <ReadRankDims+0xf4>
   33ce4:	ldr	r3, [r6]
   33ce8:	mov	r2, r9
   33cec:	mov	r1, sl
   33cf0:	mov	r0, r8
   33cf4:	bl	1588 <fread@plt>
   33cf8:	cmp	r0, #1
   33cfc:	bne	33d30 <ReadRankDims+0xd8>
   33d00:	ldr	r3, [r6, #20]
   33d04:	ldr	fp, [r5, #32]
   33d08:	cmp	r3, #0
   33d0c:	ldreq	r3, [sp, #4]
   33d10:	streq	r3, [fp, r4]
   33d14:	beq	33d24 <ReadRankDims+0xcc>
   33d18:	mov	r0, r8
   33d1c:	bl	1a80 <Mat_uint32Swap>
   33d20:	str	r0, [fp, r4]
   33d24:	add	r7, r7, #1
   33d28:	add	r4, r4, #4
   33d2c:	b	33ca4 <ReadRankDims+0x4c>
   33d30:	ldr	r0, [r5, #32]
   33d34:	bl	14e0 <free@plt>
   33d38:	ldr	r0, [pc, #48]	; 33d70 <ReadRankDims+0x118>
   33d3c:	mov	r3, #0
   33d40:	add	r0, pc, r0
   33d44:	str	r3, [r5, #32]
   33d48:	str	r3, [r5, #4]
   33d4c:	bl	1690 <Mat_Critical@plt>
   33d50:	mov	r0, r4
   33d54:	add	sp, sp, #12
   33d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d5c:	str	r0, [r5, #4]
   33d60:	ldr	r0, [pc, #12]	; 33d74 <ReadRankDims+0x11c>
   33d64:	add	r0, pc, r0
   33d68:	b	33d4c <ReadRankDims+0xf4>
   33d6c:	.word	0x0000caaa
   33d70:	.word	0x0000ca46
   33d74:	.word	0x0000c81d

00033d78 <WriteType>:
   33d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d7c:	sub	sp, sp, #108	; 0x6c
   33d80:	mov	r5, r1
   33d84:	add	r1, sp, #104	; 0x68
   33d88:	mov	r3, #1
   33d8c:	mov	r2, #0
   33d90:	str	r3, [r1, #-80]!	; 0xffffffb0
   33d94:	mov	r4, r0
   33d98:	mov	r0, r5
   33d9c:	strh	r3, [sp, #18]
   33da0:	strb	r2, [sp, #16]
   33da4:	bl	3bee0 <SafeMulDims>
   33da8:	ldr	r3, [r5, #16]
   33dac:	sub	r3, r3, #1
   33db0:	cmp	r3, #14
   33db4:	addls	pc, pc, r3, lsl #2
   33db8:	b	33e54 <WriteType+0xdc>
   33dbc:	b	3417c <WriteType+0x404>
   33dc0:	b	345bc <WriteType+0x844>
   33dc4:	b	33e54 <WriteType+0xdc>
   33dc8:	b	33f28 <WriteType+0x1b0>
   33dcc:	b	34c7c <WriteType+0xf04>
   33dd0:	b	33df8 <WriteType+0x80>
   33dd4:	b	33df8 <WriteType+0x80>
   33dd8:	b	33df8 <WriteType+0x80>
   33ddc:	b	33df8 <WriteType+0x80>
   33de0:	b	33df8 <WriteType+0x80>
   33de4:	b	33df8 <WriteType+0x80>
   33de8:	b	33df8 <WriteType+0x80>
   33dec:	b	33df8 <WriteType+0x80>
   33df0:	b	33df8 <WriteType+0x80>
   33df4:	b	33df8 <WriteType+0x80>
   33df8:	ldr	r3, [r5, #20]
   33dfc:	cmp	r3, #0
   33e00:	beq	33ed0 <WriteType+0x158>
   33e04:	ldr	r7, [r5, #40]	; 0x28
   33e08:	cmp	r7, #0
   33e0c:	ldreq	r7, [pc, #3964]	; 34d90 <WriteType+0x1018>
   33e10:	addeq	r7, pc, r7
   33e14:	ldr	r3, [r5, #8]
   33e18:	ldr	r2, [sp, #24]
   33e1c:	ldr	r1, [r7]
   33e20:	mov	r0, r4
   33e24:	bl	1ba40 <WriteData>
   33e28:	ands	r6, r0, #7
   33e2c:	str	r0, [sp, #20]
   33e30:	bne	33e60 <WriteType+0xe8>
   33e34:	ldr	r3, [r5, #8]
   33e38:	ldr	r2, [sp, #24]
   33e3c:	ldr	r1, [r7, #4]
   33e40:	mov	r0, r4
   33e44:	bl	1ba40 <WriteData>
   33e48:	ands	r5, r0, #7
   33e4c:	str	r0, [sp, #20]
   33e50:	bne	33e98 <WriteType+0x120>
   33e54:	mov	r0, #0
   33e58:	add	sp, sp, #108	; 0x6c
   33e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33e60:	rsbs	r0, r0, #0
   33e64:	and	r0, r0, #7
   33e68:	rsbpl	r6, r0, #0
   33e6c:	add	r8, sp, #16
   33e70:	mov	r9, #1
   33e74:	ldr	r3, [r4]
   33e78:	mov	r2, r9
   33e7c:	mov	r1, #1
   33e80:	mov	r0, r8
   33e84:	add	r6, r6, #1
   33e88:	bl	157c <fwrite@plt>
   33e8c:	cmp	r6, #8
   33e90:	bne	33e74 <WriteType+0xfc>
   33e94:	b	33e34 <WriteType+0xbc>
   33e98:	rsbs	r0, r0, #0
   33e9c:	and	r0, r0, #7
   33ea0:	rsbpl	r5, r0, #0
   33ea4:	add	r6, sp, #16
   33ea8:	mov	r7, #1
   33eac:	ldr	r3, [r4]
   33eb0:	mov	r2, r7
   33eb4:	mov	r1, #1
   33eb8:	mov	r0, r6
   33ebc:	add	r5, r5, #1
   33ec0:	bl	157c <fwrite@plt>
   33ec4:	cmp	r5, #8
   33ec8:	bne	33eac <WriteType+0x134>
   33ecc:	b	33e54 <WriteType+0xdc>
   33ed0:	ldr	r3, [r5, #8]
   33ed4:	ldr	r1, [r5, #40]	; 0x28
   33ed8:	ldr	r2, [sp, #24]
   33edc:	mov	r0, r4
   33ee0:	bl	1ba40 <WriteData>
   33ee4:	ands	r5, r0, #7
   33ee8:	str	r0, [sp, #20]
   33eec:	beq	33e54 <WriteType+0xdc>
   33ef0:	rsbs	r0, r0, #0
   33ef4:	and	r0, r0, #7
   33ef8:	rsbpl	r5, r0, #0
   33efc:	add	r6, sp, #16
   33f00:	mov	r7, #1
   33f04:	ldr	r3, [r4]
   33f08:	mov	r2, r7
   33f0c:	mov	r1, #1
   33f10:	mov	r0, r6
   33f14:	add	r5, r5, #1
   33f18:	bl	157c <fwrite@plt>
   33f1c:	cmp	r5, #8
   33f20:	bne	33f04 <WriteType+0x18c>
   33f24:	b	33e54 <WriteType+0xdc>
   33f28:	ldr	r6, [r5, #40]	; 0x28
   33f2c:	ldr	r5, [r5, #8]
   33f30:	mov	r3, #0
   33f34:	cmp	r5, #2
   33f38:	ldr	r7, [sp, #24]
   33f3c:	str	r5, [sp, #96]	; 0x60
   33f40:	strb	r3, [sp, #88]	; 0x58
   33f44:	bhi	33ff4 <WriteType+0x27c>
   33f48:	cmp	r5, #1
   33f4c:	lsl	r3, r7, #1
   33f50:	add	r0, sp, #96	; 0x60
   33f54:	add	r8, sp, #100	; 0x64
   33f58:	mov	r5, #4
   33f5c:	bcc	3414c <WriteType+0x3d4>
   33f60:	str	r3, [sp, #100]	; 0x64
   33f64:	mov	r2, #1
   33f68:	ldr	r3, [r4]
   33f6c:	mov	r1, r5
   33f70:	str	r5, [sp, #96]	; 0x60
   33f74:	bl	157c <fwrite@plt>
   33f78:	ldr	r3, [r4]
   33f7c:	mov	r2, #1
   33f80:	mov	r1, r5
   33f84:	mov	r0, r8
   33f88:	bl	157c <fwrite@plt>
   33f8c:	cmp	r6, #0
   33f90:	beq	33e54 <WriteType+0xdc>
   33f94:	mov	r5, r6
   33f98:	add	r8, sp, #92	; 0x5c
   33f9c:	mov	r9, #1
   33fa0:	mov	sl, #2
   33fa4:	sub	r3, r5, r6
   33fa8:	cmp	r7, r3
   33fac:	bgt	3412c <WriteType+0x3b4>
   33fb0:	ldr	r3, [sp, #100]	; 0x64
   33fb4:	ands	r5, r3, #7
   33fb8:	beq	33e54 <WriteType+0xdc>
   33fbc:	rsbs	r3, r3, #0
   33fc0:	and	r3, r3, #7
   33fc4:	rsbpl	r5, r3, #0
   33fc8:	add	r6, sp, #88	; 0x58
   33fcc:	mov	r7, #1
   33fd0:	ldr	r3, [r4]
   33fd4:	mov	r2, r7
   33fd8:	mov	r1, #1
   33fdc:	mov	r0, r6
   33fe0:	add	r5, r5, #1
   33fe4:	bl	157c <fwrite@plt>
   33fe8:	cmp	r5, #8
   33fec:	bne	33fd0 <WriteType+0x258>
   33ff0:	b	33e54 <WriteType+0xdc>
   33ff4:	cmp	r5, #4
   33ff8:	beq	34098 <WriteType+0x320>
   33ffc:	cmp	r5, #16
   34000:	bne	33e54 <WriteType+0xdc>
   34004:	ldr	r3, [r4]
   34008:	mov	r2, #1
   3400c:	mov	r1, #4
   34010:	add	r0, sp, #96	; 0x60
   34014:	str	r7, [sp, #100]	; 0x64
   34018:	bl	157c <fwrite@plt>
   3401c:	ldr	r3, [r4]
   34020:	mov	r2, #1
   34024:	mov	r1, #4
   34028:	add	r0, sp, #100	; 0x64
   3402c:	bl	157c <fwrite@plt>
   34030:	cmp	r6, #0
   34034:	beq	34054 <WriteType+0x2dc>
   34038:	ldr	r2, [sp, #100]	; 0x64
   3403c:	cmp	r2, #0
   34040:	ble	34054 <WriteType+0x2dc>
   34044:	ldr	r3, [r4]
   34048:	mov	r1, #1
   3404c:	mov	r0, r6
   34050:	bl	157c <fwrite@plt>
   34054:	ldr	r3, [sp, #100]	; 0x64
   34058:	ands	r5, r3, #7
   3405c:	beq	33e54 <WriteType+0xdc>
   34060:	rsbs	r3, r3, #0
   34064:	and	r3, r3, #7
   34068:	rsbpl	r5, r3, #0
   3406c:	add	r6, sp, #88	; 0x58
   34070:	mov	r7, #1
   34074:	ldr	r3, [r4]
   34078:	mov	r2, r7
   3407c:	mov	r1, #1
   34080:	mov	r0, r6
   34084:	add	r5, r5, #1
   34088:	bl	157c <fwrite@plt>
   3408c:	cmp	r5, #8
   34090:	bne	34074 <WriteType+0x2fc>
   34094:	b	33e54 <WriteType+0xdc>
   34098:	lsl	r3, r7, #1
   3409c:	str	r3, [sp, #100]	; 0x64
   340a0:	mov	r2, #1
   340a4:	ldr	r3, [r4]
   340a8:	mov	r1, r5
   340ac:	add	r0, sp, #96	; 0x60
   340b0:	bl	157c <fwrite@plt>
   340b4:	ldr	r3, [r4]
   340b8:	mov	r2, #1
   340bc:	mov	r1, r5
   340c0:	add	r0, sp, #100	; 0x64
   340c4:	bl	157c <fwrite@plt>
   340c8:	cmp	r6, #0
   340cc:	cmpne	r7, #0
   340d0:	ble	340e8 <WriteType+0x370>
   340d4:	ldr	r3, [r4]
   340d8:	mov	r2, r7
   340dc:	mov	r1, #2
   340e0:	mov	r0, r6
   340e4:	bl	157c <fwrite@plt>
   340e8:	ldr	r3, [sp, #100]	; 0x64
   340ec:	ands	r5, r3, #7
   340f0:	beq	33e54 <WriteType+0xdc>
   340f4:	rsbs	r3, r3, #0
   340f8:	and	r3, r3, #7
   340fc:	rsbpl	r5, r3, #0
   34100:	add	r6, sp, #88	; 0x58
   34104:	mov	r7, #1
   34108:	ldr	r3, [r4]
   3410c:	mov	r2, r7
   34110:	mov	r1, #1
   34114:	mov	r0, r6
   34118:	add	r5, r5, #1
   3411c:	bl	157c <fwrite@plt>
   34120:	cmp	r5, #8
   34124:	bne	34108 <WriteType+0x390>
   34128:	b	33e54 <WriteType+0xdc>
   3412c:	ldrb	r3, [r5], #1
   34130:	mov	r2, r9
   34134:	mov	r1, sl
   34138:	strh	r3, [sp, #92]	; 0x5c
   3413c:	mov	r0, r8
   34140:	ldr	r3, [r4]
   34144:	bl	157c <fwrite@plt>
   34148:	b	33fa4 <WriteType+0x22c>
   3414c:	str	r3, [sp, #100]	; 0x64
   34150:	mov	r2, #1
   34154:	ldr	r3, [r4]
   34158:	mov	r1, r5
   3415c:	str	r5, [sp, #96]	; 0x60
   34160:	bl	157c <fwrite@plt>
   34164:	ldr	r3, [r4]
   34168:	mov	r2, #1
   3416c:	mov	r1, r5
   34170:	mov	r0, r8
   34174:	bl	157c <fwrite@plt>
   34178:	b	33e54 <WriteType+0xdc>
   3417c:	ldr	r0, [r5]
   34180:	cmp	r0, #0
   34184:	beq	33e54 <WriteType+0xdc>
   34188:	ldr	fp, [r5, #40]	; 0x28
   3418c:	ldr	r1, [r5, #12]
   34190:	cmp	fp, #0
   34194:	cmpne	r1, #0
   34198:	moveq	r6, #1
   3419c:	movne	r6, #0
   341a0:	beq	33e54 <WriteType+0xdc>
   341a4:	bl	3f8ec <__udivsi3>
   341a8:	add	r3, sp, #88	; 0x58
   341ac:	str	r3, [sp, #8]
   341b0:	ldr	r3, [pc, #3036]	; 34d94 <WriteType+0x101c>
   341b4:	add	r8, sp, #84	; 0x54
   341b8:	add	r3, pc, r3
   341bc:	str	r3, [sp, #12]
   341c0:	str	r0, [sp, #24]
   341c4:	ldr	r3, [sp, #24]
   341c8:	cmp	r6, r3
   341cc:	bcs	33e54 <WriteType+0xdc>
   341d0:	mov	r3, #6
   341d4:	ldr	r5, [fp, r6, lsl #2]
   341d8:	str	r3, [sp, #72]	; 0x48
   341dc:	mov	r3, #5
   341e0:	str	r3, [sp, #76]	; 0x4c
   341e4:	mov	r3, #8
   341e8:	str	r3, [sp, #80]	; 0x50
   341ec:	mov	r3, #0
   341f0:	mov	r7, #1
   341f4:	mov	r2, #14
   341f8:	cmp	r4, r3
   341fc:	cmpne	r5, r3
   34200:	strh	r7, [sp, #64]	; 0x40
   34204:	str	r3, [sp, #84]	; 0x54
   34208:	str	r2, [sp, #88]	; 0x58
   3420c:	strb	r3, [sp, #60]	; 0x3c
   34210:	str	r3, [sp, #96]	; 0x60
   34214:	beq	34454 <WriteType+0x6dc>
   34218:	ldr	r3, [r4]
   3421c:	mov	r2, r7
   34220:	mov	r1, #4
   34224:	ldr	r0, [sp, #8]
   34228:	bl	157c <fwrite@plt>
   3422c:	ldr	r3, [r4]
   34230:	mov	r2, r7
   34234:	mov	r1, #4
   34238:	mov	r0, r8
   3423c:	bl	157c <fwrite@plt>
   34240:	ldr	r3, [r5, #16]
   34244:	cmp	r3, #0
   34248:	beq	34454 <WriteType+0x6dc>
   3424c:	ldr	r0, [r4]
   34250:	bl	151c <ftell@plt>
   34254:	ldr	r2, [r5, #16]
   34258:	add	r7, sp, #68	; 0x44
   3425c:	uxtb	r3, r2
   34260:	str	r3, [sp, #68]	; 0x44
   34264:	ldr	r1, [r5, #20]
   34268:	cmp	r1, #0
   3426c:	orrne	r3, r3, #2048	; 0x800
   34270:	strne	r3, [sp, #68]	; 0x44
   34274:	ldr	r3, [r5, #24]
   34278:	cmp	r3, #0
   3427c:	ldrne	r3, [sp, #68]	; 0x44
   34280:	orrne	r3, r3, #1024	; 0x400
   34284:	strne	r3, [sp, #68]	; 0x44
   34288:	ldr	r3, [r5, #28]
   3428c:	cmp	r3, #0
   34290:	ldrne	r3, [sp, #68]	; 0x44
   34294:	orrne	r3, r3, #512	; 0x200
   34298:	strne	r3, [sp, #68]	; 0x44
   3429c:	cmp	r2, #5
   342a0:	ldreq	r3, [r5, #40]	; 0x28
   342a4:	ldreq	r3, [r3]
   342a8:	str	r0, [sp]
   342ac:	streq	r3, [sp, #96]	; 0x60
   342b0:	ldr	r3, [r4, #20]
   342b4:	cmp	r3, #0
   342b8:	beq	342c8 <WriteType+0x550>
   342bc:	mov	r0, r7
   342c0:	bl	1a18 <Mat_int32Swap>
   342c4:	str	r0, [sp, #68]	; 0x44
   342c8:	ldr	r3, [r4]
   342cc:	mov	r2, #1
   342d0:	mov	r1, #4
   342d4:	add	r0, sp, #72	; 0x48
   342d8:	bl	157c <fwrite@plt>
   342dc:	ldr	r3, [r4]
   342e0:	mov	r2, #1
   342e4:	mov	r1, #4
   342e8:	add	r0, sp, #80	; 0x50
   342ec:	bl	157c <fwrite@plt>
   342f0:	ldr	r3, [r4]
   342f4:	mov	r2, #1
   342f8:	mov	r1, #4
   342fc:	mov	r0, r7
   34300:	bl	157c <fwrite@plt>
   34304:	ldr	r3, [r4]
   34308:	mov	r2, #1
   3430c:	mov	r1, #4
   34310:	add	r0, sp, #96	; 0x60
   34314:	bl	157c <fwrite@plt>
   34318:	ldr	r3, [r5, #4]
   3431c:	mov	r2, #1
   34320:	mov	r1, #4
   34324:	lsl	r3, r3, #2
   34328:	str	r3, [sp, #92]	; 0x5c
   3432c:	add	r0, sp, #76	; 0x4c
   34330:	ldr	r3, [r4]
   34334:	bl	157c <fwrite@plt>
   34338:	add	r3, sp, #92	; 0x5c
   3433c:	str	r3, [sp, #4]
   34340:	mov	r2, #1
   34344:	ldr	r3, [r4]
   34348:	mov	r1, #4
   3434c:	ldr	r0, [sp, #4]
   34350:	bl	157c <fwrite@plt>
   34354:	mov	r7, #0
   34358:	add	r9, sp, #100	; 0x64
   3435c:	mov	sl, #1
   34360:	ldr	r3, [r5, #4]
   34364:	cmp	r7, r3
   34368:	blt	3445c <WriteType+0x6e4>
   3436c:	tst	r3, #1
   34370:	beq	34388 <WriteType+0x610>
   34374:	ldr	r3, [r4]
   34378:	mov	r2, #1
   3437c:	mov	r1, #4
   34380:	mov	r0, r8
   34384:	bl	157c <fwrite@plt>
   34388:	ldr	r0, [r5, #36]	; 0x24
   3438c:	add	r9, sp, #64	; 0x40
   34390:	cmp	r0, #0
   34394:	bne	34484 <WriteType+0x70c>
   34398:	ldr	r3, [r4]
   3439c:	mov	r2, #1
   343a0:	mov	r1, #2
   343a4:	mov	r0, r9
   343a8:	bl	157c <fwrite@plt>
   343ac:	add	r7, sp, #60	; 0x3c
   343b0:	mov	r2, #1
   343b4:	mov	r1, r2
   343b8:	ldr	r3, [r4]
   343bc:	mov	r0, r7
   343c0:	bl	157c <fwrite@plt>
   343c4:	mov	r2, #1
   343c8:	mov	r1, r2
   343cc:	ldr	r3, [r4]
   343d0:	mov	r0, r7
   343d4:	bl	157c <fwrite@plt>
   343d8:	ldr	r3, [r4]
   343dc:	mov	r2, #1
   343e0:	mov	r1, #4
   343e4:	mov	r0, r8
   343e8:	bl	157c <fwrite@plt>
   343ec:	mov	r1, r5
   343f0:	mov	r0, r4
   343f4:	bl	33d78 <WriteType>
   343f8:	ldr	r0, [r4]
   343fc:	bl	151c <ftell@plt>
   34400:	ldr	r3, [sp]
   34404:	cmn	r0, #1
   34408:	cmnne	r3, #1
   3440c:	mov	r5, r0
   34410:	beq	345b0 <WriteType+0x838>
   34414:	sub	r3, r0, r3
   34418:	mvn	r1, #3
   3441c:	sub	r1, r1, r3
   34420:	mov	r2, #1
   34424:	ldr	r0, [r4]
   34428:	str	r3, [sp, #92]	; 0x5c
   3442c:	bl	1714 <fseek@plt>
   34430:	mov	r2, #1
   34434:	mov	r1, #4
   34438:	ldr	r3, [r4]
   3443c:	ldr	r0, [sp, #4]
   34440:	bl	157c <fwrite@plt>
   34444:	mov	r2, #0
   34448:	mov	r1, r5
   3444c:	ldr	r0, [r4]
   34450:	bl	1714 <fseek@plt>
   34454:	add	r6, r6, #1
   34458:	b	341c4 <WriteType+0x44c>
   3445c:	ldr	r3, [r5, #32]
   34460:	mov	r2, sl
   34464:	mov	r1, #4
   34468:	ldr	r3, [r3, r7, lsl #2]
   3446c:	mov	r0, r9
   34470:	str	r3, [sp, #100]	; 0x64
   34474:	ldr	r3, [r4]
   34478:	bl	157c <fwrite@plt>
   3447c:	add	r7, r7, #1
   34480:	b	34360 <WriteType+0x5e8>
   34484:	bl	1630 <strlen@plt>
   34488:	add	r7, sp, #100	; 0x64
   3448c:	cmp	r0, #4
   34490:	bhi	34504 <WriteType+0x78c>
   34494:	strh	r0, [sp, #100]	; 0x64
   34498:	ldr	r3, [r4]
   3449c:	mov	r2, #1
   344a0:	mov	r1, #2
   344a4:	mov	r0, r9
   344a8:	bl	157c <fwrite@plt>
   344ac:	ldr	r3, [r4]
   344b0:	mov	r2, #1
   344b4:	mov	r1, #2
   344b8:	mov	r0, r7
   344bc:	bl	157c <fwrite@plt>
   344c0:	ldr	r3, [r4]
   344c4:	ldrsh	r2, [sp, #100]	; 0x64
   344c8:	mov	r1, #1
   344cc:	ldr	r0, [r5, #36]	; 0x24
   344d0:	bl	157c <fwrite@plt>
   344d4:	ldrsh	r7, [sp, #100]	; 0x64
   344d8:	add	r9, sp, #60	; 0x3c
   344dc:	mov	sl, #1
   344e0:	cmp	r7, #3
   344e4:	bgt	343ec <WriteType+0x674>
   344e8:	ldr	r3, [r4]
   344ec:	mov	r2, sl
   344f0:	mov	r1, #1
   344f4:	mov	r0, r9
   344f8:	bl	157c <fwrite@plt>
   344fc:	add	r7, r7, #1
   34500:	b	344e0 <WriteType+0x768>
   34504:	str	r0, [sp, #100]	; 0x64
   34508:	ldr	r3, [r4]
   3450c:	mov	r2, #1
   34510:	mov	r1, #2
   34514:	mov	r0, r9
   34518:	bl	157c <fwrite@plt>
   3451c:	add	r9, sp, #60	; 0x3c
   34520:	mov	r2, #1
   34524:	mov	r1, r2
   34528:	ldr	r3, [r4]
   3452c:	mov	r0, r9
   34530:	bl	157c <fwrite@plt>
   34534:	mov	r2, #1
   34538:	mov	r1, r2
   3453c:	ldr	r3, [r4]
   34540:	mov	r0, r9
   34544:	bl	157c <fwrite@plt>
   34548:	ldr	r3, [r4]
   3454c:	mov	r2, #1
   34550:	mov	r1, #4
   34554:	mov	r0, r7
   34558:	bl	157c <fwrite@plt>
   3455c:	ldr	r3, [r4]
   34560:	ldr	r2, [sp, #100]	; 0x64
   34564:	mov	r1, #1
   34568:	ldr	r0, [r5, #36]	; 0x24
   3456c:	bl	157c <fwrite@plt>
   34570:	ldr	r3, [sp, #100]	; 0x64
   34574:	ands	r7, r3, #7
   34578:	beq	343ec <WriteType+0x674>
   3457c:	rsbs	r3, r3, #0
   34580:	and	r3, r3, #7
   34584:	rsbpl	r7, r3, #0
   34588:	mov	sl, #1
   3458c:	ldr	r3, [r4]
   34590:	mov	r2, sl
   34594:	mov	r1, #1
   34598:	mov	r0, r9
   3459c:	add	r7, r7, #1
   345a0:	bl	157c <fwrite@plt>
   345a4:	cmp	r7, #8
   345a8:	bne	3458c <WriteType+0x814>
   345ac:	b	343ec <WriteType+0x674>
   345b0:	ldr	r0, [sp, #12]
   345b4:	bl	1690 <Mat_Critical@plt>
   345b8:	b	34454 <WriteType+0x6dc>
   345bc:	ldr	r9, [r5, #52]	; 0x34
   345c0:	ldr	r8, [r9, #4]
   345c4:	cmp	r8, #0
   345c8:	movne	r6, #0
   345cc:	movne	r7, r6
   345d0:	bne	34664 <WriteType+0x8ec>
   345d4:	add	r0, sp, #104	; 0x68
   345d8:	ldr	r3, [pc, #1976]	; 34d98 <WriteType+0x1020>
   345dc:	mov	r2, #1
   345e0:	str	r3, [r0, #-68]!	; 0xffffffbc
   345e4:	mov	r1, #4
   345e8:	ldr	r3, [r4]
   345ec:	bl	157c <fwrite@plt>
   345f0:	add	r0, sp, #104	; 0x68
   345f4:	mov	r5, #1
   345f8:	ldr	r3, [r4]
   345fc:	mov	r2, r5
   34600:	mov	r1, #4
   34604:	str	r5, [r0, #-76]!	; 0xffffffb4
   34608:	bl	157c <fwrite@plt>
   3460c:	add	r6, sp, #16
   34610:	ldr	r3, [r4]
   34614:	mov	r2, r5
   34618:	mov	r1, #2
   3461c:	add	r0, sp, #18
   34620:	bl	157c <fwrite@plt>
   34624:	ldr	r3, [r4]
   34628:	mov	r2, r5
   3462c:	mov	r1, r5
   34630:	mov	r0, r6
   34634:	bl	157c <fwrite@plt>
   34638:	ldr	r3, [r4]
   3463c:	mov	r2, r5
   34640:	mov	r1, r5
   34644:	mov	r0, r6
   34648:	bl	157c <fwrite@plt>
   3464c:	add	r0, sp, #104	; 0x68
   34650:	ldr	r3, [r4]
   34654:	str	r8, [r0, #-84]!	; 0xffffffac
   34658:	mov	r2, r5
   3465c:	mov	r1, #4
   34660:	b	34174 <WriteType+0x3fc>
   34664:	ldr	r3, [r9, #8]
   34668:	ldr	r0, [r3, r6, lsl #2]
   3466c:	bl	1630 <strlen@plt>
   34670:	add	r6, r6, #1
   34674:	cmp	r7, r0
   34678:	movcc	r7, r0
   3467c:	cmp	r8, r6
   34680:	bne	34664 <WriteType+0x8ec>
   34684:	ldr	r3, [r5, #40]	; 0x28
   34688:	add	r7, r7, #1
   3468c:	str	r3, [sp, #4]
   34690:	mul	r3, r7, r6
   34694:	mov	r2, #0
   34698:	mov	r0, #1
   3469c:	str	r7, [sp, #28]
   346a0:	and	sl, r3, #7
   346a4:	cmp	sl, #0
   346a8:	mov	r1, r7
   346ac:	add	r3, r3, r6
   346b0:	add	r7, r7, #1
   346b4:	bne	34a0c <WriteType+0xc94>
   346b8:	add	r0, sp, #104	; 0x68
   346bc:	ldr	r3, [pc, #1748]	; 34d98 <WriteType+0x1020>
   346c0:	cmp	r2, #0
   346c4:	strne	r1, [sp, #28]
   346c8:	str	r3, [r0, #-68]!	; 0xffffffbc
   346cc:	mov	r2, #1
   346d0:	ldr	r3, [r4]
   346d4:	mov	r1, #4
   346d8:	bl	157c <fwrite@plt>
   346dc:	ldr	r3, [r4]
   346e0:	mov	r2, #1
   346e4:	mov	r1, #4
   346e8:	add	r0, sp, #28
   346ec:	bl	157c <fwrite@plt>
   346f0:	ldr	r3, [r4]
   346f4:	mov	r2, #1
   346f8:	mov	r1, #2
   346fc:	add	r0, sp, #18
   34700:	bl	157c <fwrite@plt>
   34704:	add	r7, sp, #16
   34708:	mov	r2, #1
   3470c:	mov	r1, r2
   34710:	ldr	r3, [r4]
   34714:	mov	r0, r7
   34718:	bl	157c <fwrite@plt>
   3471c:	mov	r2, #1
   34720:	mov	r1, r2
   34724:	ldr	r3, [r4]
   34728:	mov	r0, r7
   3472c:	bl	157c <fwrite@plt>
   34730:	ldr	r3, [sp, #28]
   34734:	add	r0, sp, #104	; 0x68
   34738:	mov	r2, #1
   3473c:	mul	r3, r6, r3
   34740:	mov	r1, #4
   34744:	str	r3, [r0, #-84]!	; 0xffffffac
   34748:	ldr	r3, [r4]
   3474c:	bl	157c <fwrite@plt>
   34750:	mov	r1, #1
   34754:	ldr	r0, [sp, #28]
   34758:	bl	1468 <calloc@plt>
   3475c:	mov	r7, sl
   34760:	mov	r9, #1
   34764:	mov	r8, r0
   34768:	ldr	r3, [r5, #52]	; 0x34
   3476c:	ldr	r3, [r3, #8]
   34770:	ldr	fp, [r3, r7, lsl #2]
   34774:	add	r7, r7, #1
   34778:	mov	r0, fp
   3477c:	bl	1630 <strlen@plt>
   34780:	ldr	r3, [r4]
   34784:	mov	r1, r9
   34788:	mov	r2, r0
   3478c:	str	r0, [sp]
   34790:	mov	r0, fp
   34794:	bl	157c <fwrite@plt>
   34798:	ldr	r1, [sp]
   3479c:	ldr	r2, [sp, #28]
   347a0:	ldr	r3, [r4]
   347a4:	sub	r2, r2, r1
   347a8:	mov	r0, r8
   347ac:	mov	r1, r9
   347b0:	bl	157c <fwrite@plt>
   347b4:	cmp	r6, r7
   347b8:	bne	34768 <WriteType+0x9f0>
   347bc:	mov	r0, r8
   347c0:	bl	14e0 <free@plt>
   347c4:	mov	r2, r6
   347c8:	ldr	r1, [sp, #24]
   347cc:	add	r0, sp, #32
   347d0:	bl	3bf40 <SafeMul>
   347d4:	add	r3, sp, #100	; 0x64
   347d8:	str	r3, [sp]
   347dc:	ldr	r3, [pc, #1464]	; 34d9c <WriteType+0x1024>
   347e0:	add	r3, pc, r3
   347e4:	str	r3, [sp, #8]
   347e8:	ldr	r3, [sp, #32]
   347ec:	cmp	sl, r3
   347f0:	bcs	33e54 <WriteType+0xdc>
   347f4:	ldr	r3, [sp, #4]
   347f8:	mov	r0, #0
   347fc:	mov	r6, #1
   34800:	ldr	r5, [r3, sl, lsl #2]
   34804:	mov	r8, #6
   34808:	mov	r2, #5
   3480c:	mov	r3, #8
   34810:	mov	r1, #14
   34814:	cmp	r5, r0
   34818:	str	r6, [sp, #40]	; 0x28
   3481c:	str	r8, [sp, #44]	; 0x2c
   34820:	str	r2, [sp, #48]	; 0x30
   34824:	str	r3, [sp, #52]	; 0x34
   34828:	str	r0, [sp, #56]	; 0x38
   3482c:	str	r1, [sp, #60]	; 0x3c
   34830:	str	r0, [sp, #64]	; 0x40
   34834:	bne	34a5c <WriteType+0xce4>
   34838:	str	r1, [sp, #76]	; 0x4c
   3483c:	str	r2, [sp, #84]	; 0x54
   34840:	str	r3, [sp, #88]	; 0x58
   34844:	mov	r2, r6
   34848:	ldr	r3, [r4]
   3484c:	mov	r1, #4
   34850:	add	r0, sp, #76	; 0x4c
   34854:	add	r7, sp, #92	; 0x5c
   34858:	str	r6, [sp, #72]	; 0x48
   3485c:	str	r5, [sp, #92]	; 0x5c
   34860:	strb	r5, [sp, #17]
   34864:	str	r8, [sp, #80]	; 0x50
   34868:	bl	157c <fwrite@plt>
   3486c:	ldr	r3, [r4]
   34870:	mov	r2, r6
   34874:	mov	r1, #4
   34878:	mov	r0, r7
   3487c:	bl	157c <fwrite@plt>
   34880:	ldr	r0, [r4]
   34884:	bl	151c <ftell@plt>
   34888:	ldr	r3, [r4, #20]
   3488c:	add	r6, sp, #104	; 0x68
   34890:	cmp	r3, #0
   34894:	str	r8, [r6, #-36]!	; 0xffffffdc
   34898:	mov	r5, r0
   3489c:	beq	348ac <WriteType+0xb34>
   348a0:	mov	r0, r6
   348a4:	bl	1a18 <Mat_int32Swap>
   348a8:	str	r0, [sp, #68]	; 0x44
   348ac:	ldr	r3, [r4]
   348b0:	mov	r2, #1
   348b4:	mov	r1, #4
   348b8:	add	r0, sp, #80	; 0x50
   348bc:	bl	157c <fwrite@plt>
   348c0:	ldr	r3, [r4]
   348c4:	mov	r2, #1
   348c8:	mov	r1, #4
   348cc:	add	r0, sp, #88	; 0x58
   348d0:	bl	157c <fwrite@plt>
   348d4:	ldr	r3, [r4]
   348d8:	mov	r2, #1
   348dc:	mov	r1, #4
   348e0:	mov	r0, r6
   348e4:	bl	157c <fwrite@plt>
   348e8:	ldr	r3, [r4]
   348ec:	mov	r2, #1
   348f0:	mov	r1, #4
   348f4:	mov	r0, r7
   348f8:	bl	157c <fwrite@plt>
   348fc:	mov	r3, #8
   34900:	str	r3, [sp, #96]	; 0x60
   34904:	mov	r2, #1
   34908:	ldr	r3, [r4]
   3490c:	mov	r1, #4
   34910:	add	r0, sp, #84	; 0x54
   34914:	add	r8, sp, #96	; 0x60
   34918:	bl	157c <fwrite@plt>
   3491c:	ldr	r3, [r4]
   34920:	mov	r2, #1
   34924:	mov	r1, #4
   34928:	mov	r0, r8
   3492c:	bl	157c <fwrite@plt>
   34930:	mov	r6, #0
   34934:	ldr	r3, [r4]
   34938:	mov	r2, #1
   3493c:	mov	r1, #4
   34940:	ldr	r0, [sp]
   34944:	str	r6, [sp, #100]	; 0x64
   34948:	bl	157c <fwrite@plt>
   3494c:	ldr	r3, [r4]
   34950:	mov	r2, #1
   34954:	mov	r1, #4
   34958:	ldr	r0, [sp]
   3495c:	str	r6, [sp, #100]	; 0x64
   34960:	bl	157c <fwrite@plt>
   34964:	ldr	r3, [r4]
   34968:	mov	r2, #1
   3496c:	mov	r1, #4
   34970:	add	r0, sp, #72	; 0x48
   34974:	bl	157c <fwrite@plt>
   34978:	ldr	r3, [r4]
   3497c:	mov	r2, #1
   34980:	mov	r1, #4
   34984:	mov	r0, r7
   34988:	bl	157c <fwrite@plt>
   3498c:	mov	r2, r6
   34990:	mov	r1, r6
   34994:	mov	r3, #9
   34998:	mov	r0, r4
   3499c:	bl	1ba40 <WriteData>
   349a0:	ands	r6, r0, #7
   349a4:	str	r0, [sp, #96]	; 0x60
   349a8:	bne	34a14 <WriteType+0xc9c>
   349ac:	ldr	r0, [r4]
   349b0:	bl	151c <ftell@plt>
   349b4:	cmn	r0, #1
   349b8:	cmnne	r5, #1
   349bc:	mov	r6, r0
   349c0:	beq	34a4c <WriteType+0xcd4>
   349c4:	sub	r5, r0, r5
   349c8:	mvn	r1, #3
   349cc:	mov	r2, #1
   349d0:	sub	r1, r1, r5
   349d4:	ldr	r0, [r4]
   349d8:	str	r5, [sp, #96]	; 0x60
   349dc:	bl	1714 <fseek@plt>
   349e0:	mov	r2, #1
   349e4:	mov	r1, #4
   349e8:	ldr	r3, [r4]
   349ec:	mov	r0, r8
   349f0:	bl	157c <fwrite@plt>
   349f4:	mov	r2, #0
   349f8:	mov	r1, r6
   349fc:	ldr	r0, [r4]
   34a00:	bl	1714 <fseek@plt>
   34a04:	add	sl, sl, #1
   34a08:	b	347e8 <WriteType+0xa70>
   34a0c:	mov	r2, r0
   34a10:	b	346a0 <WriteType+0x928>
   34a14:	rsbs	r0, r0, #0
   34a18:	and	r0, r0, #7
   34a1c:	rsbpl	r6, r0, #0
   34a20:	add	r7, sp, #17
   34a24:	mov	r9, #1
   34a28:	ldr	r3, [r4]
   34a2c:	mov	r2, r9
   34a30:	mov	r1, #1
   34a34:	mov	r0, r7
   34a38:	add	r6, r6, #1
   34a3c:	bl	157c <fwrite@plt>
   34a40:	cmp	r6, #8
   34a44:	bne	34a28 <WriteType+0xcb0>
   34a48:	b	349ac <WriteType+0xc34>
   34a4c:	ldr	r0, [pc, #844]	; 34da0 <WriteType+0x1028>
   34a50:	add	r0, pc, r0
   34a54:	bl	1690 <Mat_Critical@plt>
   34a58:	b	34a04 <WriteType+0xc8c>
   34a5c:	ldr	r3, [r4]
   34a60:	mov	r2, r6
   34a64:	mov	r1, #4
   34a68:	add	r0, sp, #60	; 0x3c
   34a6c:	add	r7, sp, #56	; 0x38
   34a70:	bl	157c <fwrite@plt>
   34a74:	ldr	r3, [r4]
   34a78:	mov	r2, r6
   34a7c:	mov	r1, #4
   34a80:	mov	r0, r7
   34a84:	bl	157c <fwrite@plt>
   34a88:	ldr	r3, [r5, #16]
   34a8c:	cmp	r3, #0
   34a90:	beq	34a04 <WriteType+0xc8c>
   34a94:	ldr	r0, [r4]
   34a98:	bl	151c <ftell@plt>
   34a9c:	ldr	r2, [r5, #16]
   34aa0:	add	r6, sp, #92	; 0x5c
   34aa4:	uxtb	r3, r2
   34aa8:	str	r3, [sp, #92]	; 0x5c
   34aac:	ldr	r1, [r5, #20]
   34ab0:	cmp	r1, #0
   34ab4:	orrne	r3, r3, #2048	; 0x800
   34ab8:	strne	r3, [sp, #92]	; 0x5c
   34abc:	ldr	r3, [r5, #24]
   34ac0:	cmp	r3, #0
   34ac4:	ldrne	r3, [sp, #92]	; 0x5c
   34ac8:	orrne	r3, r3, #1024	; 0x400
   34acc:	strne	r3, [sp, #92]	; 0x5c
   34ad0:	ldr	r3, [r5, #28]
   34ad4:	cmp	r3, #0
   34ad8:	ldrne	r3, [sp, #92]	; 0x5c
   34adc:	orrne	r3, r3, #512	; 0x200
   34ae0:	strne	r3, [sp, #92]	; 0x5c
   34ae4:	cmp	r2, #5
   34ae8:	ldreq	r3, [r5, #40]	; 0x28
   34aec:	ldreq	r3, [r3]
   34af0:	mov	fp, r0
   34af4:	streq	r3, [sp, #64]	; 0x40
   34af8:	ldr	r3, [r4, #20]
   34afc:	cmp	r3, #0
   34b00:	beq	34b10 <WriteType+0xd98>
   34b04:	mov	r0, r6
   34b08:	bl	1a18 <Mat_int32Swap>
   34b0c:	str	r0, [sp, #92]	; 0x5c
   34b10:	ldr	r3, [r4]
   34b14:	mov	r2, #1
   34b18:	mov	r1, #4
   34b1c:	add	r0, sp, #44	; 0x2c
   34b20:	bl	157c <fwrite@plt>
   34b24:	ldr	r3, [r4]
   34b28:	mov	r2, #1
   34b2c:	mov	r1, #4
   34b30:	add	r0, sp, #52	; 0x34
   34b34:	bl	157c <fwrite@plt>
   34b38:	ldr	r3, [r4]
   34b3c:	mov	r2, #1
   34b40:	mov	r1, #4
   34b44:	mov	r0, r6
   34b48:	bl	157c <fwrite@plt>
   34b4c:	ldr	r3, [r4]
   34b50:	mov	r2, #1
   34b54:	mov	r1, #4
   34b58:	add	r0, sp, #64	; 0x40
   34b5c:	bl	157c <fwrite@plt>
   34b60:	ldr	r3, [r5, #4]
   34b64:	mov	r2, #1
   34b68:	mov	r1, #4
   34b6c:	lsl	r3, r3, #2
   34b70:	str	r3, [sp, #96]	; 0x60
   34b74:	add	r0, sp, #48	; 0x30
   34b78:	ldr	r3, [r4]
   34b7c:	add	r8, sp, #96	; 0x60
   34b80:	bl	157c <fwrite@plt>
   34b84:	ldr	r3, [r4]
   34b88:	mov	r2, #1
   34b8c:	mov	r1, #4
   34b90:	mov	r0, r8
   34b94:	bl	157c <fwrite@plt>
   34b98:	mov	r6, #0
   34b9c:	mov	r9, #1
   34ba0:	ldr	r3, [r5, #4]
   34ba4:	cmp	r6, r3
   34ba8:	blt	34c54 <WriteType+0xedc>
   34bac:	tst	r3, #1
   34bb0:	beq	34bc8 <WriteType+0xe50>
   34bb4:	ldr	r3, [r4]
   34bb8:	mov	r2, #1
   34bbc:	mov	r1, #4
   34bc0:	mov	r0, r7
   34bc4:	bl	157c <fwrite@plt>
   34bc8:	ldr	r3, [r4]
   34bcc:	mov	r2, #1
   34bd0:	mov	r1, #4
   34bd4:	add	r0, sp, #40	; 0x28
   34bd8:	bl	157c <fwrite@plt>
   34bdc:	ldr	r3, [r4]
   34be0:	mov	r2, #1
   34be4:	mov	r1, #4
   34be8:	mov	r0, r7
   34bec:	bl	157c <fwrite@plt>
   34bf0:	mov	r1, r5
   34bf4:	mov	r0, r4
   34bf8:	bl	33d78 <WriteType>
   34bfc:	ldr	r0, [r4]
   34c00:	bl	151c <ftell@plt>
   34c04:	cmn	r0, #1
   34c08:	cmnne	fp, #1
   34c0c:	mov	r5, r0
   34c10:	ldreq	r0, [sp, #8]
   34c14:	beq	34a54 <WriteType+0xcdc>
   34c18:	sub	fp, r5, fp
   34c1c:	mvn	r1, #3
   34c20:	mov	r2, #1
   34c24:	sub	r1, r1, fp
   34c28:	ldr	r0, [r4]
   34c2c:	str	fp, [sp, #96]	; 0x60
   34c30:	bl	1714 <fseek@plt>
   34c34:	mov	r2, #1
   34c38:	mov	r1, #4
   34c3c:	ldr	r3, [r4]
   34c40:	mov	r0, r8
   34c44:	bl	157c <fwrite@plt>
   34c48:	mov	r2, #0
   34c4c:	mov	r1, r5
   34c50:	b	349fc <WriteType+0xc84>
   34c54:	ldr	r3, [r5, #32]
   34c58:	mov	r2, r9
   34c5c:	mov	r1, #4
   34c60:	ldr	r3, [r3, r6, lsl #2]
   34c64:	ldr	r0, [sp]
   34c68:	str	r3, [sp, #100]	; 0x64
   34c6c:	ldr	r3, [r4]
   34c70:	bl	157c <fwrite@plt>
   34c74:	add	r6, r6, #1
   34c78:	b	34ba0 <WriteType+0xe28>
   34c7c:	ldr	r6, [r5, #40]	; 0x28
   34c80:	mov	r3, #5
   34c84:	mov	r0, r4
   34c88:	ldmib	r6, {r1, r2}
   34c8c:	bl	1ba40 <WriteData>
   34c90:	ands	r7, r0, #7
   34c94:	str	r0, [sp, #20]
   34c98:	bne	34d20 <WriteType+0xfa8>
   34c9c:	mov	r3, #5
   34ca0:	ldr	r2, [r6, #16]
   34ca4:	ldr	r1, [r6, #12]
   34ca8:	mov	r0, r4
   34cac:	bl	1ba40 <WriteData>
   34cb0:	ands	r7, r0, #7
   34cb4:	str	r0, [sp, #20]
   34cb8:	bne	34d58 <WriteType+0xfe0>
   34cbc:	ldr	r3, [r5, #20]
   34cc0:	cmp	r3, #0
   34cc4:	bne	34da4 <WriteType+0x102c>
   34cc8:	ldr	r3, [r5, #8]
   34ccc:	ldr	r2, [r6, #20]
   34cd0:	ldr	r1, [r6, #24]
   34cd4:	mov	r0, r4
   34cd8:	bl	1ba40 <WriteData>
   34cdc:	ands	r5, r0, #7
   34ce0:	str	r0, [sp, #20]
   34ce4:	beq	33e54 <WriteType+0xdc>
   34ce8:	rsbs	r0, r0, #0
   34cec:	and	r0, r0, #7
   34cf0:	rsbpl	r5, r0, #0
   34cf4:	add	r6, sp, #16
   34cf8:	mov	r7, #1
   34cfc:	ldr	r3, [r4]
   34d00:	mov	r2, r7
   34d04:	mov	r1, #1
   34d08:	mov	r0, r6
   34d0c:	add	r5, r5, #1
   34d10:	bl	157c <fwrite@plt>
   34d14:	cmp	r5, #8
   34d18:	bne	34cfc <WriteType+0xf84>
   34d1c:	b	33e54 <WriteType+0xdc>
   34d20:	rsbs	r0, r0, #0
   34d24:	and	r0, r0, #7
   34d28:	rsbpl	r7, r0, #0
   34d2c:	add	r8, sp, #16
   34d30:	mov	r9, #1
   34d34:	ldr	r3, [r4]
   34d38:	mov	r2, r9
   34d3c:	mov	r1, #1
   34d40:	mov	r0, r8
   34d44:	add	r7, r7, #1
   34d48:	bl	157c <fwrite@plt>
   34d4c:	cmp	r7, #8
   34d50:	bne	34d34 <WriteType+0xfbc>
   34d54:	b	34c9c <WriteType+0xf24>
   34d58:	rsbs	r0, r0, #0
   34d5c:	and	r0, r0, #7
   34d60:	rsbpl	r7, r0, #0
   34d64:	add	r8, sp, #16
   34d68:	mov	r9, #1
   34d6c:	ldr	r3, [r4]
   34d70:	mov	r2, r9
   34d74:	mov	r1, #1
   34d78:	mov	r0, r8
   34d7c:	add	r7, r7, #1
   34d80:	bl	157c <fwrite@plt>
   34d84:	cmp	r7, #8
   34d88:	bne	34d6c <WriteType+0xff4>
   34d8c:	b	34cbc <WriteType+0xf44>
   34d90:	.word	0x0001e3cc
   34d94:	.word	0x0000c5ad
   34d98:	.word	0x00040005
   34d9c:	.word	0x0000bf85
   34da0:	.word	0x0000bd15
   34da4:	ldr	r8, [r6, #24]
   34da8:	ldr	r3, [r5, #8]
   34dac:	ldr	r2, [r6, #20]
   34db0:	ldr	r1, [r8]
   34db4:	mov	r0, r4
   34db8:	bl	1ba40 <WriteData>
   34dbc:	ands	r7, r0, #7
   34dc0:	str	r0, [sp, #20]
   34dc4:	bne	34e20 <WriteType+0x10a8>
   34dc8:	ldr	r3, [r5, #8]
   34dcc:	ldr	r2, [r6, #20]
   34dd0:	ldr	r1, [r8, #4]
   34dd4:	mov	r0, r4
   34dd8:	bl	1ba40 <WriteData>
   34ddc:	ands	r5, r0, #7
   34de0:	str	r0, [sp, #20]
   34de4:	beq	33e54 <WriteType+0xdc>
   34de8:	rsbs	r0, r0, #0
   34dec:	and	r0, r0, #7
   34df0:	rsbpl	r5, r0, #0
   34df4:	add	r6, sp, #16
   34df8:	mov	r7, #1
   34dfc:	ldr	r3, [r4]
   34e00:	mov	r2, r7
   34e04:	mov	r1, #1
   34e08:	mov	r0, r6
   34e0c:	add	r5, r5, #1
   34e10:	bl	157c <fwrite@plt>
   34e14:	cmp	r5, #8
   34e18:	bne	34dfc <WriteType+0x1084>
   34e1c:	b	33e54 <WriteType+0xdc>
   34e20:	rsbs	r0, r0, #0
   34e24:	and	r0, r0, #7
   34e28:	rsbpl	r7, r0, #0
   34e2c:	add	r9, sp, #16
   34e30:	mov	sl, #1
   34e34:	ldr	r3, [r4]
   34e38:	mov	r2, sl
   34e3c:	mov	r1, #1
   34e40:	mov	r0, r9
   34e44:	add	r7, r7, #1
   34e48:	bl	157c <fwrite@plt>
   34e4c:	cmp	r7, #8
   34e50:	bne	34e34 <WriteType+0x10bc>
   34e54:	b	34dc8 <WriteType+0x1050>

00034e58 <GetEmptyMatrixMaxBufSize.constprop.5>:
   34e58:	mov	r0, #48	; 0x30
   34e5c:	bx	lr

00034e60 <GetStructFieldBufSize>:
   34e60:	cmp	r0, #0
   34e64:	bne	34e6c <GetStructFieldBufSize+0xc>
   34e68:	b	34e58 <GetEmptyMatrixMaxBufSize.constprop.5>
   34e6c:	push	{r4, lr}
   34e70:	bl	34e7c <GetTypeBufSize>
   34e74:	add	r0, r0, #24
   34e78:	pop	{r4, pc}

00034e7c <GetTypeBufSize>:
   34e7c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   34e80:	add	r1, sp, #8
   34e84:	mov	r5, r0
   34e88:	mov	r3, #1
   34e8c:	str	r3, [r1, #-8]!
   34e90:	bl	3bee0 <SafeMulDims>
   34e94:	ldr	r4, [r5, #4]
   34e98:	ldr	r3, [r5, #16]
   34e9c:	tst	r4, #1
   34ea0:	sub	r3, r3, #1
   34ea4:	lsl	r4, r4, #2
   34ea8:	addne	r4, r4, #12
   34eac:	addeq	r4, r4, #8
   34eb0:	cmp	r3, #4
   34eb4:	addls	pc, pc, r3, lsl #2
   34eb8:	b	350f4 <GetTypeBufSize+0x278>
   34ebc:	b	34f88 <GetTypeBufSize+0x10c>
   34ec0:	b	34ed0 <GetTypeBufSize+0x54>
   34ec4:	b	350f4 <GetTypeBufSize+0x278>
   34ec8:	b	350a4 <GetTypeBufSize+0x228>
   34ecc:	b	34ff4 <GetTypeBufSize+0x178>
   34ed0:	ldr	r8, [r5, #52]	; 0x34
   34ed4:	mov	r6, #0
   34ed8:	ldr	r7, [r5, #40]	; 0x28
   34edc:	ldr	r9, [r8, #4]
   34ee0:	mov	r5, r6
   34ee4:	cmp	r6, r9
   34ee8:	bne	34f44 <GetTypeBufSize+0xc8>
   34eec:	add	r3, r5, #1
   34ef0:	mul	r3, r6, r3
   34ef4:	ands	r5, r3, #7
   34ef8:	add	r2, r6, r3
   34efc:	bne	34f68 <GetTypeBufSize+0xec>
   34f00:	add	r4, r4, #16
   34f04:	cmp	r7, #0
   34f08:	cmpne	r6, #0
   34f0c:	add	r4, r3, r4
   34f10:	beq	34f38 <GetTypeBufSize+0xbc>
   34f14:	add	r0, sp, #8
   34f18:	mov	r3, #1
   34f1c:	str	r3, [r0, #-4]!
   34f20:	mov	r2, r6
   34f24:	ldr	r1, [sp]
   34f28:	bl	3bf40 <SafeMul>
   34f2c:	ldr	r3, [sp, #4]
   34f30:	cmp	r5, r3
   34f34:	bcc	34f70 <GetTypeBufSize+0xf4>
   34f38:	mov	r0, r4
   34f3c:	add	sp, sp, #12
   34f40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   34f44:	ldr	r3, [r8, #8]
   34f48:	ldr	r0, [r3, r6, lsl #2]
   34f4c:	cmp	r0, #0
   34f50:	beq	34f60 <GetTypeBufSize+0xe4>
   34f54:	bl	1630 <strlen@plt>
   34f58:	cmp	r5, r0
   34f5c:	movcc	r5, r0
   34f60:	add	r6, r6, #1
   34f64:	b	34ee4 <GetTypeBufSize+0x68>
   34f68:	mov	r3, r2
   34f6c:	b	34ef4 <GetTypeBufSize+0x78>
   34f70:	ldr	r0, [r7, r5, lsl #2]
   34f74:	bl	34e60 <GetStructFieldBufSize>
   34f78:	add	r5, r5, #1
   34f7c:	add	r0, r0, #8
   34f80:	add	r4, r4, r0
   34f84:	b	34f2c <GetTypeBufSize+0xb0>
   34f88:	ldr	r0, [r5]
   34f8c:	cmp	r0, #0
   34f90:	beq	34f38 <GetTypeBufSize+0xbc>
   34f94:	ldr	r1, [r5, #12]
   34f98:	cmp	r1, #0
   34f9c:	beq	34f38 <GetTypeBufSize+0xbc>
   34fa0:	bl	3f8ec <__udivsi3>
   34fa4:	ldr	r6, [r5, #40]	; 0x28
   34fa8:	cmp	r0, #0
   34fac:	cmpne	r6, #0
   34fb0:	movne	r5, #0
   34fb4:	str	r0, [sp]
   34fb8:	movne	r7, r5
   34fbc:	beq	34f38 <GetTypeBufSize+0xbc>
   34fc0:	ldr	r3, [sp]
   34fc4:	cmp	r5, r3
   34fc8:	bcs	34f38 <GetTypeBufSize+0xbc>
   34fcc:	ldr	r0, [r6, r5, lsl #2]
   34fd0:	cmp	r0, #0
   34fd4:	moveq	r0, r7
   34fd8:	beq	34fe4 <GetTypeBufSize+0x168>
   34fdc:	bl	34e7c <GetTypeBufSize>
   34fe0:	add	r0, r0, #24
   34fe4:	add	r0, r0, #8
   34fe8:	add	r4, r4, r0
   34fec:	add	r5, r5, #1
   34ff0:	b	34fc0 <GetTypeBufSize+0x144>
   34ff4:	ldr	r8, [r5, #40]	; 0x28
   34ff8:	add	r7, sp, #4
   34ffc:	mov	r2, #4
   35000:	ldr	r1, [r8, #8]
   35004:	mov	r0, r7
   35008:	bl	3bf40 <SafeMul>
   3500c:	ldr	r3, [sp, #4]
   35010:	mov	r2, #4
   35014:	tst	r3, #7
   35018:	bicne	r3, r3, #7
   3501c:	addne	r3, r3, #8
   35020:	strne	r3, [sp, #4]
   35024:	mov	r0, r7
   35028:	ldr	r1, [r8, #16]
   3502c:	ldr	r6, [sp, #4]
   35030:	bl	3bf40 <SafeMul>
   35034:	ldr	r3, [sp, #4]
   35038:	ldr	r0, [r5, #8]
   3503c:	tst	r3, #7
   35040:	bicne	r3, r3, #7
   35044:	addne	r3, r3, #8
   35048:	strne	r3, [sp, #4]
   3504c:	ldr	r3, [sp, #4]
   35050:	ldr	r8, [r8, #20]
   35054:	add	r6, r6, r3
   35058:	bl	1600 <Mat_SizeOf@plt>
   3505c:	mov	r1, r8
   35060:	add	r6, r6, #16
   35064:	mov	r2, r0
   35068:	mov	r0, r7
   3506c:	bl	3bf40 <SafeMul>
   35070:	ldr	r3, [sp, #4]
   35074:	tst	r3, #7
   35078:	bicne	r3, r3, #7
   3507c:	addne	r3, r3, #8
   35080:	strne	r3, [sp, #4]
   35084:	ldr	r3, [sp, #4]
   35088:	add	r3, r3, #8
   3508c:	add	r6, r3, r6
   35090:	add	r4, r4, r6
   35094:	ldr	r2, [r5, #20]
   35098:	cmp	r2, #0
   3509c:	addne	r4, r4, r3
   350a0:	b	34f38 <GetTypeBufSize+0xbc>
   350a4:	ldr	r0, [r5, #8]
   350a8:	ldr	r7, [sp]
   350ac:	sub	r3, r0, #1
   350b0:	cmp	r3, #1
   350b4:	movls	r0, #4
   350b8:	bl	1600 <Mat_SizeOf@plt>
   350bc:	add	r6, sp, #4
   350c0:	mov	r1, r7
   350c4:	mov	r2, r0
   350c8:	mov	r0, r6
   350cc:	bl	3bf40 <SafeMul>
   350d0:	ldr	r3, [sp, #4]
   350d4:	tst	r3, #7
   350d8:	bicne	r3, r3, #7
   350dc:	addne	r3, r3, #8
   350e0:	strne	r3, [sp, #4]
   350e4:	ldr	r3, [sp, #4]
   350e8:	add	r3, r3, #8
   350ec:	add	r4, r4, r3
   350f0:	b	35094 <GetTypeBufSize+0x218>
   350f4:	ldr	r0, [r5, #8]
   350f8:	ldr	r6, [sp]
   350fc:	bl	1600 <Mat_SizeOf@plt>
   35100:	mov	r1, r6
   35104:	mov	r2, r0
   35108:	add	r0, sp, #4
   3510c:	b	350cc <GetTypeBufSize+0x250>

00035110 <WriteCompressedType>:
   35110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35114:	sub	sp, sp, #10240	; 0x2800
   35118:	sub	sp, sp, #44	; 0x2c
   3511c:	add	r5, sp, #2080	; 0x820
   35120:	add	r5, r5, #8
   35124:	mov	r6, r1
   35128:	mov	fp, r0
   3512c:	mov	sl, r2
   35130:	mov	r1, #0
   35134:	mov	r2, #2048	; 0x800
   35138:	mov	r0, r5
   3513c:	bl	166c <memset@plt>
   35140:	mov	r3, #1
   35144:	str	r3, [r5, #-2056]	; 0xfffff7f8
   35148:	ldr	r3, [r6, #16]
   3514c:	cmp	r3, #0
   35150:	bne	3515c <WriteCompressedType+0x4c>
   35154:	mov	r4, #0
   35158:	b	35234 <WriteCompressedType+0x124>
   3515c:	add	r9, sp, #40	; 0x28
   35160:	sub	r1, r9, #8
   35164:	mov	r0, r6
   35168:	bl	3bee0 <SafeMulDims>
   3516c:	ldr	r3, [r6, #16]
   35170:	sub	r3, r3, #1
   35174:	cmp	r3, #14
   35178:	addls	pc, pc, r3, lsl #2
   3517c:	b	35154 <WriteCompressedType+0x44>
   35180:	b	3545c <WriteCompressedType+0x34c>
   35184:	b	35570 <WriteCompressedType+0x460>
   35188:	b	35154 <WriteCompressedType+0x44>
   3518c:	b	35244 <WriteCompressedType+0x134>
   35190:	b	35a44 <WriteCompressedType+0x934>
   35194:	b	351bc <WriteCompressedType+0xac>
   35198:	b	351bc <WriteCompressedType+0xac>
   3519c:	b	351bc <WriteCompressedType+0xac>
   351a0:	b	351bc <WriteCompressedType+0xac>
   351a4:	b	351bc <WriteCompressedType+0xac>
   351a8:	b	351bc <WriteCompressedType+0xac>
   351ac:	b	351bc <WriteCompressedType+0xac>
   351b0:	b	351bc <WriteCompressedType+0xac>
   351b4:	b	351bc <WriteCompressedType+0xac>
   351b8:	b	351bc <WriteCompressedType+0xac>
   351bc:	ldr	r3, [r6, #20]
   351c0:	cmp	r3, #0
   351c4:	ldr	r3, [r6, #8]
   351c8:	beq	35218 <WriteCompressedType+0x108>
   351cc:	ldr	r7, [r6, #40]	; 0x28
   351d0:	cmp	r7, #0
   351d4:	ldreq	r7, [pc, #2312]	; 35ae4 <WriteCompressedType+0x9d4>
   351d8:	addeq	r7, pc, r7
   351dc:	str	r3, [sp]
   351e0:	mov	r1, sl
   351e4:	ldr	r3, [r5, #-2056]	; 0xfffff7f8
   351e8:	ldr	r2, [r7]
   351ec:	mov	r0, fp
   351f0:	bl	33ad4 <WriteCompressedData>
   351f4:	ldr	r3, [r6, #8]
   351f8:	str	r3, [sp]
   351fc:	ldr	r3, [r5, #-2056]	; 0xfffff7f8
   35200:	ldr	r2, [r7, #4]
   35204:	mov	r4, r0
   35208:	mov	r1, sl
   3520c:	mov	r0, fp
   35210:	bl	33ad4 <WriteCompressedData>
   35214:	b	35adc <WriteCompressedType+0x9cc>
   35218:	str	r3, [sp]
   3521c:	mov	r1, sl
   35220:	ldr	r3, [r5, #-2056]	; 0xfffff7f8
   35224:	ldr	r2, [r6, #40]	; 0x28
   35228:	mov	r0, fp
   3522c:	bl	33ad4 <WriteCompressedData>
   35230:	mov	r4, r0
   35234:	mov	r0, r4
   35238:	add	sp, sp, #10240	; 0x2800
   3523c:	add	sp, sp, #44	; 0x2c
   35240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35244:	add	r7, sp, #6144	; 0x1800
   35248:	add	r3, sp, #6144	; 0x1800
   3524c:	mov	r8, #0
   35250:	add	r7, r7, #40	; 0x28
   35254:	add	r3, r3, #44	; 0x2c
   35258:	cmp	fp, r8
   3525c:	ldr	r9, [r6, #40]	; 0x28
   35260:	ldr	r5, [r5, #-2056]	; 0xfffff7f8
   35264:	ldr	r6, [r6, #8]
   35268:	str	r8, [r7]
   3526c:	str	r8, [r3]
   35270:	beq	35154 <WriteCompressedType+0x44>
   35274:	ldr	r4, [fp]
   35278:	cmp	r4, r8
   3527c:	beq	35234 <WriteCompressedType+0x124>
   35280:	cmp	r6, #17
   35284:	bhi	35154 <WriteCompressedType+0x44>
   35288:	mov	r4, #1
   3528c:	ldr	r0, [pc, #2132]	; 35ae8 <WriteCompressedType+0x9d8>
   35290:	ands	r4, r0, r4, lsl r6
   35294:	bne	35314 <WriteCompressedType+0x204>
   35298:	cmp	r6, r8
   3529c:	bne	35234 <WriteCompressedType+0x124>
   352a0:	mov	r3, #4
   352a4:	lsl	r5, r5, #1
   352a8:	str	r3, [r7, #-2048]	; 0xfffff800
   352ac:	str	r5, [r7, #-2044]	; 0xfffff804
   352b0:	add	r3, sp, #4096	; 0x1000
   352b4:	add	r5, sp, #8192	; 0x2000
   352b8:	add	r3, r3, #40	; 0x28
   352bc:	mov	r4, r6
   352c0:	add	r5, r5, #40	; 0x28
   352c4:	mov	r7, #1024	; 0x400
   352c8:	str	r3, [sl]
   352cc:	mov	r3, #8
   352d0:	str	r3, [sl, #4]
   352d4:	mov	r1, r6
   352d8:	str	r5, [sl, #12]
   352dc:	str	r7, [sl, #16]
   352e0:	mov	r0, sl
   352e4:	bl	1564 <deflate@plt>
   352e8:	ldr	r2, [sl, #16]
   352ec:	ldr	r3, [fp]
   352f0:	rsb	r2, r2, #1024	; 0x400
   352f4:	mov	r1, #1
   352f8:	mov	r0, r5
   352fc:	bl	157c <fwrite@plt>
   35300:	ldr	r3, [sl, #16]
   35304:	cmp	r3, #0
   35308:	add	r4, r4, r0
   3530c:	beq	352d4 <WriteCompressedType+0x1c4>
   35310:	b	35234 <WriteCompressedType+0x124>
   35314:	mov	r0, r6
   35318:	bl	1600 <Mat_SizeOf@plt>
   3531c:	cmp	r6, #2
   35320:	moveq	r6, #16
   35324:	str	r6, [r7, #-2048]	; 0xfffff800
   35328:	add	r3, sp, #4096	; 0x1000
   3532c:	mov	r4, r8
   35330:	add	r8, sp, #8192	; 0x2000
   35334:	add	r3, r3, #40	; 0x28
   35338:	add	r8, r8, #40	; 0x28
   3533c:	str	r3, [sl]
   35340:	mov	r3, #8
   35344:	str	r3, [sl, #4]
   35348:	mul	r6, r0, r5
   3534c:	str	r6, [r7, #-2044]	; 0xfffff804
   35350:	mov	r3, #1024	; 0x400
   35354:	str	r3, [sl, #16]
   35358:	mov	r1, #0
   3535c:	str	r8, [sl, #12]
   35360:	mov	r0, sl
   35364:	bl	1564 <deflate@plt>
   35368:	ldr	r2, [sl, #16]
   3536c:	ldr	r3, [fp]
   35370:	rsb	r2, r2, #1024	; 0x400
   35374:	mov	r1, #1
   35378:	mov	r0, r8
   3537c:	bl	157c <fwrite@plt>
   35380:	ldr	r3, [sl, #16]
   35384:	cmp	r3, #0
   35388:	add	r4, r4, r0
   3538c:	beq	35350 <WriteCompressedType+0x240>
   35390:	cmp	r9, #0
   35394:	cmpne	r5, #0
   35398:	movle	r5, #1
   3539c:	movgt	r5, #0
   353a0:	ble	35234 <WriteCompressedType+0x124>
   353a4:	str	r9, [sl]
   353a8:	mov	r9, #1
   353ac:	str	r6, [sl, #4]
   353b0:	mov	r3, #1024	; 0x400
   353b4:	str	r3, [sl, #16]
   353b8:	mov	r1, r5
   353bc:	str	r8, [sl, #12]
   353c0:	mov	r0, sl
   353c4:	bl	1564 <deflate@plt>
   353c8:	ldr	r2, [sl, #16]
   353cc:	ldr	r3, [fp]
   353d0:	rsb	r2, r2, #1024	; 0x400
   353d4:	mov	r1, r9
   353d8:	mov	r0, r8
   353dc:	bl	157c <fwrite@plt>
   353e0:	ldr	r3, [sl, #16]
   353e4:	cmp	r3, #0
   353e8:	add	r4, r4, r0
   353ec:	beq	353b0 <WriteCompressedType+0x2a0>
   353f0:	ands	r3, r6, #7
   353f4:	beq	35234 <WriteCompressedType+0x124>
   353f8:	rsbs	r6, r6, #0
   353fc:	and	r6, r6, #7
   35400:	rsbpl	r3, r6, #0
   35404:	str	r7, [sl]
   35408:	mov	r6, #0
   3540c:	mov	r7, #1024	; 0x400
   35410:	mov	r5, #1
   35414:	rsb	r3, r3, #8
   35418:	str	r3, [sl, #4]
   3541c:	mov	r1, r6
   35420:	str	r8, [sl, #12]
   35424:	str	r7, [sl, #16]
   35428:	mov	r0, sl
   3542c:	bl	1564 <deflate@plt>
   35430:	ldr	r2, [sl, #16]
   35434:	ldr	r3, [fp]
   35438:	rsb	r2, r2, #1024	; 0x400
   3543c:	mov	r1, r5
   35440:	mov	r0, r8
   35444:	bl	157c <fwrite@plt>
   35448:	ldr	r3, [sl, #16]
   3544c:	cmp	r3, #0
   35450:	add	r4, r4, r0
   35454:	beq	3541c <WriteCompressedType+0x30c>
   35458:	b	35234 <WriteCompressedType+0x124>
   3545c:	ldr	r0, [r6]
   35460:	cmp	r0, #0
   35464:	beq	35154 <WriteCompressedType+0x44>
   35468:	ldr	r7, [r6, #40]	; 0x28
   3546c:	ldr	r1, [r6, #12]
   35470:	cmp	r7, #0
   35474:	cmpne	r1, #0
   35478:	moveq	r4, #1
   3547c:	movne	r4, #0
   35480:	beq	35154 <WriteCompressedType+0x44>
   35484:	bl	3f8ec <__udivsi3>
   35488:	add	r8, sp, #8192	; 0x2000
   3548c:	add	r8, r8, #40	; 0x28
   35490:	str	r0, [r5, #-2056]	; 0xfffff7f8
   35494:	ldr	r3, [r5, #-2056]	; 0xfffff7f8
   35498:	cmp	r4, r3
   3549c:	bcs	35154 <WriteCompressedType+0x44>
   354a0:	mov	r2, #2048	; 0x800
   354a4:	mov	r1, #0
   354a8:	mov	r0, r8
   354ac:	ldr	r6, [r7, r4, lsl #2]
   354b0:	bl	166c <memset@plt>
   354b4:	cmp	sl, #0
   354b8:	cmpne	fp, #0
   354bc:	moveq	r3, #1
   354c0:	movne	r3, #0
   354c4:	cmp	r6, #0
   354c8:	orreq	r3, r3, #1
   354cc:	cmp	r3, #0
   354d0:	bne	35568 <WriteCompressedType+0x458>
   354d4:	add	r3, sp, #8192	; 0x2000
   354d8:	add	r3, r3, #40	; 0x28
   354dc:	mov	r2, #14
   354e0:	str	r2, [r3]
   354e4:	ldr	r3, [r6, #16]
   354e8:	cmp	r3, #0
   354ec:	beq	35508 <WriteCompressedType+0x3f8>
   354f0:	mov	r0, r6
   354f4:	bl	34e7c <GetTypeBufSize>
   354f8:	add	r3, sp, #8192	; 0x2000
   354fc:	add	r3, r3, #44	; 0x2c
   35500:	add	r0, r0, #24
   35504:	str	r0, [r3]
   35508:	add	r9, sp, #6144	; 0x1800
   3550c:	add	r9, r9, #40	; 0x28
   35510:	mov	r3, #8
   35514:	str	r8, [sl]
   35518:	str	r3, [sl, #4]
   3551c:	mov	r3, #2048	; 0x800
   35520:	str	r3, [sl, #16]
   35524:	mov	r1, #0
   35528:	str	r9, [sl, #12]
   3552c:	mov	r0, sl
   35530:	bl	1564 <deflate@plt>
   35534:	ldr	r2, [sl, #16]
   35538:	ldr	r3, [fp]
   3553c:	rsb	r2, r2, #2048	; 0x800
   35540:	mov	r1, #1
   35544:	mov	r0, r9
   35548:	bl	157c <fwrite@plt>
   3554c:	ldr	r3, [sl, #16]
   35550:	cmp	r3, #0
   35554:	beq	3551c <WriteCompressedType+0x40c>
   35558:	mov	r2, sl
   3555c:	mov	r1, r6
   35560:	mov	r0, fp
   35564:	bl	35af0 <WriteCompressedTypeArrayFlags>
   35568:	add	r4, r4, #1
   3556c:	b	35494 <WriteCompressedType+0x384>
   35570:	ldr	r3, [r6, #52]	; 0x34
   35574:	ldr	r4, [r3, #4]
   35578:	cmp	r4, #0
   3557c:	bne	355f0 <WriteCompressedType+0x4e0>
   35580:	ldr	r3, [pc, #1380]	; 35aec <WriteCompressedType+0x9dc>
   35584:	mov	r1, #1
   35588:	str	r3, [r5]
   3558c:	str	r1, [r5, #4]
   35590:	str	r1, [r5, #8]
   35594:	str	r4, [r5, #12]
   35598:	str	r5, [sl]
   3559c:	mov	r7, #2048	; 0x800
   355a0:	mov	r6, r4
   355a4:	mov	r5, r1
   355a8:	mov	r3, #16
   355ac:	str	r3, [sl, #4]
   355b0:	mov	r1, r6
   355b4:	str	r9, [sl, #12]
   355b8:	str	r7, [sl, #16]
   355bc:	mov	r0, sl
   355c0:	bl	1564 <deflate@plt>
   355c4:	ldr	r2, [sl, #16]
   355c8:	ldr	r3, [fp]
   355cc:	rsb	r2, r2, #2048	; 0x800
   355d0:	mov	r1, r5
   355d4:	mov	r0, r9
   355d8:	bl	157c <fwrite@plt>
   355dc:	ldr	r3, [sl, #16]
   355e0:	cmp	r3, #0
   355e4:	add	r4, r4, r0
   355e8:	beq	355b0 <WriteCompressedType+0x4a0>
   355ec:	b	35234 <WriteCompressedType+0x124>
   355f0:	mov	r8, #0
   355f4:	mov	r7, r8
   355f8:	ldr	r2, [r3, #8]
   355fc:	str	r3, [sp, #12]
   35600:	ldr	r0, [r2, r8, lsl #2]
   35604:	bl	1630 <strlen@plt>
   35608:	add	r8, r8, #1
   3560c:	ldr	r3, [sp, #12]
   35610:	cmp	r7, r0
   35614:	movcc	r7, r0
   35618:	cmp	r4, r8
   3561c:	bne	355f8 <WriteCompressedType+0x4e8>
   35620:	add	r7, r7, #1
   35624:	mul	r3, r7, r8
   35628:	ands	r1, r3, #7
   3562c:	add	r2, r3, r8
   35630:	str	r1, [sp, #12]
   35634:	bne	359b0 <WriteCompressedType+0x8a0>
   35638:	ldr	r2, [r6, #40]	; 0x28
   3563c:	mov	r0, r7
   35640:	str	r2, [sp, #28]
   35644:	ldr	r2, [pc, #1184]	; 35aec <WriteCompressedType+0x9dc>
   35648:	str	r3, [r5, #12]
   3564c:	stm	r5, {r2, r7}
   35650:	mov	r2, #1
   35654:	mov	r1, r2
   35658:	str	r2, [r5, #8]
   3565c:	str	r2, [sp, #20]
   35660:	bl	1468 <calloc@plt>
   35664:	ldr	r4, [sp, #12]
   35668:	str	r5, [sl]
   3566c:	mov	r5, #2048	; 0x800
   35670:	mov	r3, #16
   35674:	str	r3, [sl, #4]
   35678:	str	r0, [sp, #16]
   3567c:	mov	r1, #0
   35680:	str	r9, [sl, #12]
   35684:	str	r5, [sl, #16]
   35688:	mov	r0, sl
   3568c:	bl	1564 <deflate@plt>
   35690:	ldr	r2, [sl, #16]
   35694:	ldr	r3, [fp]
   35698:	rsb	r2, r2, #2048	; 0x800
   3569c:	ldr	r1, [sp, #20]
   356a0:	mov	r0, r9
   356a4:	bl	157c <fwrite@plt>
   356a8:	ldr	r3, [sl, #16]
   356ac:	cmp	r3, #0
   356b0:	add	r4, r4, r0
   356b4:	beq	3567c <WriteCompressedType+0x56c>
   356b8:	ldr	r5, [sp, #12]
   356bc:	ldr	r3, [r6, #52]	; 0x34
   356c0:	str	r3, [sp, #24]
   356c4:	ldr	r2, [r3, #8]
   356c8:	ldr	r0, [r2, r5, lsl #2]
   356cc:	bl	1630 <strlen@plt>
   356d0:	mov	r2, r7
   356d4:	mov	r1, #0
   356d8:	str	r0, [sp, #20]
   356dc:	ldr	r0, [sp, #16]
   356e0:	bl	166c <memset@plt>
   356e4:	ldr	r3, [sp, #24]
   356e8:	ldr	r2, [sp, #20]
   356ec:	ldr	r0, [sp, #16]
   356f0:	ldr	r3, [r3, #8]
   356f4:	ldr	r1, [r3, r5, lsl #2]
   356f8:	bl	14f8 <memcpy@plt>
   356fc:	ldr	r3, [sp, #16]
   35700:	stm	sl, {r3, r7}
   35704:	mov	r3, #2048	; 0x800
   35708:	str	r3, [sl, #16]
   3570c:	mov	r1, #0
   35710:	str	r9, [sl, #12]
   35714:	mov	r0, sl
   35718:	bl	1564 <deflate@plt>
   3571c:	ldr	r2, [sl, #16]
   35720:	ldr	r3, [fp]
   35724:	rsb	r2, r2, #2048	; 0x800
   35728:	mov	r1, #1
   3572c:	mov	r0, r9
   35730:	bl	157c <fwrite@plt>
   35734:	ldr	r3, [sl, #16]
   35738:	cmp	r3, #0
   3573c:	add	r4, r4, r0
   35740:	beq	35704 <WriteCompressedType+0x5f4>
   35744:	add	r5, r5, #1
   35748:	cmp	r8, r5
   3574c:	bne	356bc <WriteCompressedType+0x5ac>
   35750:	ldr	r0, [sp, #16]
   35754:	bl	14e0 <free@plt>
   35758:	add	r3, sp, #2080	; 0x820
   3575c:	add	r3, r3, #8
   35760:	mov	r2, r8
   35764:	ldr	r1, [r3, #-2056]	; 0xfffff7f8
   35768:	sub	r0, r9, #4
   3576c:	str	r3, [sp, #20]
   35770:	bl	3bf40 <SafeMul>
   35774:	ldr	r3, [sp, #12]
   35778:	add	r6, sp, #6144	; 0x1800
   3577c:	str	r3, [sp, #16]
   35780:	add	r6, r6, #40	; 0x28
   35784:	add	r3, sp, #4096	; 0x1000
   35788:	add	r3, r3, #40	; 0x28
   3578c:	str	r3, [sp, #24]
   35790:	ldr	r3, [sp, #20]
   35794:	ldr	r2, [sp, #16]
   35798:	ldr	r3, [r3, #-2052]	; 0xfffff7fc
   3579c:	cmp	r2, r3
   357a0:	bcs	35234 <WriteCompressedType+0x124>
   357a4:	ldr	r2, [sp, #16]
   357a8:	ldr	r3, [sp, #28]
   357ac:	mov	r1, #0
   357b0:	ldr	r0, [sp, #24]
   357b4:	ldr	r7, [r3, r2, lsl #2]
   357b8:	mov	r2, #2048	; 0x800
   357bc:	bl	166c <memset@plt>
   357c0:	add	r9, sp, #8192	; 0x2000
   357c4:	cmp	r7, #0
   357c8:	add	r9, r9, #40	; 0x28
   357cc:	bne	359bc <WriteCompressedType+0x8ac>
   357d0:	mov	r2, #2048	; 0x800
   357d4:	mov	r1, r7
   357d8:	mov	r0, r9
   357dc:	bl	166c <memset@plt>
   357e0:	add	r2, sp, #8192	; 0x2000
   357e4:	add	r2, r2, #40	; 0x28
   357e8:	mov	r3, #14
   357ec:	str	r3, [r2]
   357f0:	bl	34e58 <GetEmptyMatrixMaxBufSize.constprop.5>
   357f4:	add	r3, sp, #8192	; 0x2000
   357f8:	add	r3, r3, #44	; 0x2c
   357fc:	ldr	r5, [sp, #12]
   35800:	mov	r8, #1
   35804:	str	r9, [sl]
   35808:	str	r0, [r3]
   3580c:	mov	r3, #8
   35810:	str	r3, [sl, #4]
   35814:	mov	r3, #2048	; 0x800
   35818:	str	r3, [sl, #16]
   3581c:	mov	r1, r7
   35820:	str	r6, [sl, #12]
   35824:	mov	r0, sl
   35828:	bl	1564 <deflate@plt>
   3582c:	ldr	r2, [sl, #16]
   35830:	ldr	r3, [fp]
   35834:	rsb	r2, r2, #2048	; 0x800
   35838:	mov	r1, r8
   3583c:	mov	r0, r6
   35840:	bl	157c <fwrite@plt>
   35844:	ldr	r3, [sl, #16]
   35848:	cmp	r3, #0
   3584c:	add	r5, r5, r0
   35850:	beq	35814 <WriteCompressedType+0x704>
   35854:	add	r3, sp, #8192	; 0x2000
   35858:	add	r3, r3, #40	; 0x28
   3585c:	add	r1, sp, #8192	; 0x2000
   35860:	mov	r2, #6
   35864:	add	r1, r1, #44	; 0x2c
   35868:	str	r2, [r3]
   3586c:	mov	r3, #8
   35870:	str	r3, [r1]
   35874:	add	r1, sp, #8192	; 0x2000
   35878:	add	r1, r1, #48	; 0x30
   3587c:	str	r2, [r1]
   35880:	add	r2, sp, #8192	; 0x2000
   35884:	add	r2, r2, #52	; 0x34
   35888:	add	r1, sp, #8192	; 0x2000
   3588c:	mov	r7, #0
   35890:	add	r1, r1, #56	; 0x38
   35894:	str	r7, [r2]
   35898:	mov	r2, #5
   3589c:	str	r2, [r1]
   358a0:	add	r2, sp, #8192	; 0x2000
   358a4:	add	r2, r2, #60	; 0x3c
   358a8:	str	r3, [r2]
   358ac:	add	r3, sp, #8256	; 0x2040
   358b0:	mov	r8, #1
   358b4:	str	r7, [r3]
   358b8:	add	r3, sp, #8256	; 0x2040
   358bc:	add	r3, r3, #4
   358c0:	str	r7, [r3]
   358c4:	mov	r3, #32
   358c8:	str	r9, [sl]
   358cc:	str	r3, [sl, #4]
   358d0:	mov	r3, #2048	; 0x800
   358d4:	str	r3, [sl, #16]
   358d8:	mov	r1, r7
   358dc:	str	r6, [sl, #12]
   358e0:	mov	r0, sl
   358e4:	bl	1564 <deflate@plt>
   358e8:	ldr	r2, [sl, #16]
   358ec:	ldr	r3, [fp]
   358f0:	rsb	r2, r2, #2048	; 0x800
   358f4:	mov	r1, r8
   358f8:	mov	r0, r6
   358fc:	bl	157c <fwrite@plt>
   35900:	ldr	r3, [sl, #16]
   35904:	cmp	r3, #0
   35908:	add	r5, r5, r0
   3590c:	beq	358d0 <WriteCompressedType+0x7c0>
   35910:	add	r3, sp, #8192	; 0x2000
   35914:	add	r3, r3, #40	; 0x28
   35918:	mov	r7, #1
   3591c:	str	r7, [r3]
   35920:	add	r3, sp, #8192	; 0x2000
   35924:	add	r3, r3, #44	; 0x2c
   35928:	mov	r8, #0
   3592c:	str	r9, [sl]
   35930:	mov	r9, #2048	; 0x800
   35934:	str	r8, [r3]
   35938:	mov	r3, #8
   3593c:	str	r3, [sl, #4]
   35940:	mov	r1, r8
   35944:	str	r6, [sl, #12]
   35948:	str	r9, [sl, #16]
   3594c:	mov	r0, sl
   35950:	bl	1564 <deflate@plt>
   35954:	ldr	r2, [sl, #16]
   35958:	ldr	r3, [fp]
   3595c:	rsb	r2, r2, #2048	; 0x800
   35960:	mov	r1, r7
   35964:	mov	r0, r6
   35968:	bl	157c <fwrite@plt>
   3596c:	ldr	r3, [sl, #16]
   35970:	cmp	r3, #0
   35974:	add	r5, r5, r0
   35978:	beq	35940 <WriteCompressedType+0x830>
   3597c:	mov	r3, #9
   35980:	str	r3, [sp]
   35984:	mov	r3, #0
   35988:	mov	r2, r3
   3598c:	mov	r1, sl
   35990:	mov	r0, fp
   35994:	bl	33ad4 <WriteCompressedData>
   35998:	ldr	r3, [sp, #16]
   3599c:	add	r0, r5, r0
   359a0:	add	r3, r3, #1
   359a4:	add	r4, r4, r0
   359a8:	str	r3, [sp, #16]
   359ac:	b	35790 <WriteCompressedType+0x680>
   359b0:	add	r7, r7, #1
   359b4:	mov	r3, r2
   359b8:	b	35628 <WriteCompressedType+0x518>
   359bc:	mov	r3, #14
   359c0:	str	r3, [r6, #-2048]	; 0xfffff800
   359c4:	ldr	r3, [r7, #16]
   359c8:	cmp	r3, #0
   359cc:	beq	359dc <WriteCompressedType+0x8cc>
   359d0:	mov	r0, r7
   359d4:	bl	34e60 <GetStructFieldBufSize>
   359d8:	str	r0, [r6, #-2044]	; 0xfffff804
   359dc:	ldr	r3, [sp, #24]
   359e0:	ldr	r5, [sp, #12]
   359e4:	mov	r8, #2048	; 0x800
   359e8:	str	r3, [sl]
   359ec:	mov	r3, #8
   359f0:	str	r3, [sl, #4]
   359f4:	mov	r1, #0
   359f8:	str	r9, [sl, #12]
   359fc:	str	r8, [sl, #16]
   35a00:	mov	r0, sl
   35a04:	bl	1564 <deflate@plt>
   35a08:	ldr	r2, [sl, #16]
   35a0c:	ldr	r3, [fp]
   35a10:	rsb	r2, r2, #2048	; 0x800
   35a14:	mov	r1, #1
   35a18:	mov	r0, r9
   35a1c:	bl	157c <fwrite@plt>
   35a20:	ldr	r3, [sl, #16]
   35a24:	cmp	r3, #0
   35a28:	add	r5, r5, r0
   35a2c:	beq	359f4 <WriteCompressedType+0x8e4>
   35a30:	mov	r2, sl
   35a34:	mov	r1, r7
   35a38:	mov	r0, fp
   35a3c:	bl	35af0 <WriteCompressedTypeArrayFlags>
   35a40:	b	35998 <WriteCompressedType+0x888>
   35a44:	ldr	r5, [r6, #40]	; 0x28
   35a48:	mov	r7, #5
   35a4c:	str	r7, [sp]
   35a50:	mov	r1, sl
   35a54:	ldmib	r5, {r2, r3}
   35a58:	mov	r0, fp
   35a5c:	bl	33ad4 <WriteCompressedData>
   35a60:	str	r7, [sp]
   35a64:	mov	r1, sl
   35a68:	ldr	r3, [r5, #16]
   35a6c:	ldr	r2, [r5, #12]
   35a70:	mov	r4, r0
   35a74:	mov	r0, fp
   35a78:	bl	33ad4 <WriteCompressedData>
   35a7c:	ldr	r3, [r6, #20]
   35a80:	cmp	r3, #0
   35a84:	ldr	r3, [r6, #8]
   35a88:	streq	r3, [sp]
   35a8c:	ldreq	r3, [r5, #20]
   35a90:	ldreq	r2, [r5, #24]
   35a94:	add	r4, r4, r0
   35a98:	beq	35208 <WriteCompressedType+0xf8>
   35a9c:	ldr	r8, [r5, #24]
   35aa0:	mov	r1, sl
   35aa4:	str	r3, [sp]
   35aa8:	mov	r0, fp
   35aac:	ldr	r3, [r5, #20]
   35ab0:	ldr	r2, [r8]
   35ab4:	bl	33ad4 <WriteCompressedData>
   35ab8:	ldr	r3, [r6, #8]
   35abc:	mov	r1, sl
   35ac0:	str	r3, [sp]
   35ac4:	ldr	r3, [r5, #20]
   35ac8:	ldr	r2, [r8, #4]
   35acc:	mov	r7, r0
   35ad0:	mov	r0, fp
   35ad4:	bl	33ad4 <WriteCompressedData>
   35ad8:	add	r0, r7, r0
   35adc:	add	r4, r4, r0
   35ae0:	b	35234 <WriteCompressedType+0x124>
   35ae4:	.word	0x0001d004
   35ae8:	.word	0x00030014
   35aec:	.word	0x00040005

00035af0 <WriteCompressedTypeArrayFlags>:
   35af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35af4:	sub	sp, sp, #4096	; 0x1000
   35af8:	sub	sp, sp, #4
   35afc:	mov	r6, r1
   35b00:	add	r8, sp, #2048	; 0x800
   35b04:	mov	r7, r0
   35b08:	mov	r4, r2
   35b0c:	mov	r1, #0
   35b10:	mov	r2, #2048	; 0x800
   35b14:	mov	r0, r8
   35b18:	bl	166c <memset@plt>
   35b1c:	ldr	r0, [r6, #16]
   35b20:	cmp	r0, #0
   35b24:	beq	35cbc <WriteCompressedTypeArrayFlags+0x1cc>
   35b28:	ldr	r2, [r6, #20]
   35b2c:	uxtb	r3, r0
   35b30:	cmp	r2, #0
   35b34:	ldr	r2, [r6, #24]
   35b38:	orrne	r3, r3, #2048	; 0x800
   35b3c:	cmp	r2, #0
   35b40:	ldr	r2, [r6, #28]
   35b44:	orrne	r3, r3, #1024	; 0x400
   35b48:	cmp	r2, #0
   35b4c:	orrne	r3, r3, #512	; 0x200
   35b50:	cmp	r0, #5
   35b54:	movne	r2, #0
   35b58:	ldreq	r2, [r6, #40]	; 0x28
   35b5c:	mov	r1, #6
   35b60:	ldreq	r2, [r2]
   35b64:	str	r3, [sp, #2056]	; 0x808
   35b68:	str	r2, [sp, #2060]	; 0x80c
   35b6c:	ldr	r2, [r6, #4]
   35b70:	mov	r3, #5
   35b74:	str	r1, [sp, #2048]	; 0x800
   35b78:	str	r3, [sp, #2064]	; 0x810
   35b7c:	mov	r1, #8
   35b80:	lsl	r3, r2, #2
   35b84:	str	r1, [sp, #2052]	; 0x804
   35b88:	str	r3, [sp, #2068]	; 0x814
   35b8c:	add	r1, r8, #24
   35b90:	mov	r3, #0
   35b94:	cmp	r3, r2
   35b98:	blt	35cc8 <WriteCompressedTypeArrayFlags+0x1d8>
   35b9c:	bic	r3, r2, r2, asr #31
   35ba0:	tst	r2, #1
   35ba4:	addne	r2, r3, #6
   35ba8:	addne	r3, r3, #1
   35bac:	addne	r1, sp, #4096	; 0x1000
   35bb0:	add	r3, r3, #6
   35bb4:	mov	r5, #0
   35bb8:	addne	r2, r1, r2, lsl #2
   35bbc:	mov	r9, sp
   35bc0:	mov	fp, #2048	; 0x800
   35bc4:	mov	sl, r5
   35bc8:	movne	r1, #0
   35bcc:	lsl	r3, r3, #2
   35bd0:	strne	r1, [r2, #-2048]	; 0xfffff800
   35bd4:	str	r8, [r4]
   35bd8:	str	r3, [r4, #4]
   35bdc:	mov	r1, sl
   35be0:	str	r9, [r4, #12]
   35be4:	str	fp, [r4, #16]
   35be8:	mov	r0, r4
   35bec:	bl	1564 <deflate@plt>
   35bf0:	ldr	r2, [r4, #16]
   35bf4:	ldr	r3, [r7]
   35bf8:	rsb	r2, r2, #2048	; 0x800
   35bfc:	mov	r1, #1
   35c00:	mov	r0, r9
   35c04:	bl	157c <fwrite@plt>
   35c08:	ldr	r3, [r4, #16]
   35c0c:	cmp	r3, #0
   35c10:	add	r5, r5, r0
   35c14:	beq	35bdc <WriteCompressedTypeArrayFlags+0xec>
   35c18:	mov	r3, #1
   35c1c:	mov	r2, #0
   35c20:	str	r8, [r4]
   35c24:	mov	sl, #2048	; 0x800
   35c28:	mov	r8, r2
   35c2c:	mov	fp, r3
   35c30:	mov	r1, #8
   35c34:	str	r3, [sp, #2048]	; 0x800
   35c38:	str	r2, [sp, #2052]	; 0x804
   35c3c:	str	r1, [r4, #4]
   35c40:	mov	r1, r8
   35c44:	str	r9, [r4, #12]
   35c48:	str	sl, [r4, #16]
   35c4c:	mov	r0, r4
   35c50:	bl	1564 <deflate@plt>
   35c54:	ldr	r2, [r4, #16]
   35c58:	ldr	r3, [r7]
   35c5c:	rsb	r2, r2, #2048	; 0x800
   35c60:	mov	r1, fp
   35c64:	mov	r0, r9
   35c68:	bl	157c <fwrite@plt>
   35c6c:	ldr	r3, [r4, #16]
   35c70:	cmp	r3, #0
   35c74:	add	r5, r5, r0
   35c78:	beq	35c40 <WriteCompressedTypeArrayFlags+0x150>
   35c7c:	ldr	r0, [r7]
   35c80:	ldr	r8, [r6, #52]	; 0x34
   35c84:	bl	151c <ftell@plt>
   35c88:	ldr	r3, [r6, #52]	; 0x34
   35c8c:	str	r0, [r8]
   35c90:	ldr	r3, [r3]
   35c94:	cmn	r3, #1
   35c98:	bne	35ca8 <WriteCompressedTypeArrayFlags+0x1b8>
   35c9c:	ldr	r0, [pc, #56]	; 35cdc <WriteCompressedTypeArrayFlags+0x1ec>
   35ca0:	add	r0, pc, r0
   35ca4:	bl	1690 <Mat_Critical@plt>
   35ca8:	mov	r2, r4
   35cac:	mov	r1, r6
   35cb0:	mov	r0, r7
   35cb4:	bl	35110 <WriteCompressedType>
   35cb8:	add	r0, r5, r0
   35cbc:	add	sp, sp, #4096	; 0x1000
   35cc0:	add	sp, sp, #4
   35cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35cc8:	ldr	r0, [r6, #32]
   35ccc:	ldr	r0, [r0, r3, lsl #2]
   35cd0:	add	r3, r3, #1
   35cd4:	str	r0, [r1], #4
   35cd8:	b	35b94 <WriteCompressedTypeArrayFlags+0xa4>
   35cdc:	.word	0x0000aac5

00035ce0 <Mat_Create5>:
   35ce0:	push	{r4, r5, r6, r7, r8, r9, lr}
   35ce4:	mov	r8, r1
   35ce8:	ldr	r1, [pc, #440]	; 35ea8 <Mat_Create5+0x1c8>
   35cec:	sub	sp, sp, #28
   35cf0:	mov	r5, #0
   35cf4:	add	r1, pc, r1
   35cf8:	mov	r9, r0
   35cfc:	strh	r5, [sp, #16]
   35d00:	bl	14bc <fopen@plt>
   35d04:	subs	r6, r0, #0
   35d08:	moveq	r4, r6
   35d0c:	beq	35d28 <Mat_Create5+0x48>
   35d10:	mov	r0, #44	; 0x2c
   35d14:	bl	15ac <malloc@plt>
   35d18:	subs	r4, r0, #0
   35d1c:	bne	35d34 <Mat_Create5+0x54>
   35d20:	mov	r0, r6
   35d24:	bl	16a8 <fclose@plt>
   35d28:	mov	r0, r4
   35d2c:	add	sp, sp, #28
   35d30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   35d34:	mov	r7, #128	; 0x80
   35d38:	str	r5, [r4]
   35d3c:	str	r5, [r4, #4]
   35d40:	str	r5, [r4, #8]
   35d44:	str	r5, [r4, #12]
   35d48:	str	r5, [r4, #16]
   35d4c:	str	r5, [r4, #20]
   35d50:	str	r5, [r4, #24]
   35d54:	str	r5, [r4, #32]
   35d58:	str	r5, [r4, #36]	; 0x24
   35d5c:	str	r5, [r4, #40]	; 0x28
   35d60:	mov	r0, r5
   35d64:	str	r7, [r4, #28]
   35d68:	bl	1510 <time@plt>
   35d6c:	str	r6, [r4]
   35d70:	ldr	r6, [pc, #308]	; 35eac <Mat_Create5+0x1cc>
   35d74:	mov	r1, r9
   35d78:	add	r6, pc, r6
   35d7c:	mov	r9, #1
   35d80:	str	r0, [sp, #20]
   35d84:	mov	r0, r6
   35d88:	bl	1e64 <strdup_printf>
   35d8c:	str	r5, [r4, #20]
   35d90:	str	r9, [r4, #24]
   35d94:	str	r0, [r4, #12]
   35d98:	mov	r0, r7
   35d9c:	bl	15ac <malloc@plt>
   35da0:	mov	r5, r0
   35da4:	str	r0, [r4, #4]
   35da8:	mov	r0, #8
   35dac:	bl	15ac <malloc@plt>
   35db0:	mov	r2, r7
   35db4:	mov	r1, #32
   35db8:	str	r0, [r4, #8]
   35dbc:	mov	r0, r5
   35dc0:	bl	166c <memset@plt>
   35dc4:	cmp	r8, #0
   35dc8:	bne	35e90 <Mat_Create5+0x1b0>
   35dcc:	add	r0, sp, #20
   35dd0:	bl	1528 <ctime@plt>
   35dd4:	mov	r2, #5
   35dd8:	mov	r3, #15
   35ddc:	str	r9, [sp]
   35de0:	stmib	sp, {r2, r3}
   35de4:	ldr	r3, [pc, #196]	; 35eb0 <Mat_Create5+0x1d0>
   35de8:	ldr	r2, [pc, #196]	; 35eb4 <Mat_Create5+0x1d4>
   35dec:	add	r3, pc, r3
   35df0:	add	r2, pc, r2
   35df4:	mov	r1, #116	; 0x74
   35df8:	str	r0, [sp, #12]
   35dfc:	mov	r0, r5
   35e00:	bl	1654 <snprintf@plt>
   35e04:	cmp	r0, #115	; 0x73
   35e08:	movhi	r2, #0
   35e0c:	ldrhi	r3, [r4, #4]
   35e10:	mov	r1, #32
   35e14:	add	r5, sp, #24
   35e18:	strbhi	r2, [r3, #115]	; 0x73
   35e1c:	mov	r2, #8
   35e20:	ldr	r0, [r4, #8]
   35e24:	bl	166c <memset@plt>
   35e28:	ldr	r2, [pc, #136]	; 35eb8 <Mat_Create5+0x1d8>
   35e2c:	mov	r3, #256	; 0x100
   35e30:	strh	r3, [r5, #-6]!
   35e34:	str	r3, [r4, #16]
   35e38:	strh	r2, [sp, #16]
   35e3c:	ldr	r3, [r4]
   35e40:	mov	r2, #116	; 0x74
   35e44:	mov	r1, #1
   35e48:	ldr	r0, [r4, #4]
   35e4c:	bl	157c <fwrite@plt>
   35e50:	ldr	r3, [r4]
   35e54:	mov	r2, #8
   35e58:	mov	r1, #1
   35e5c:	ldr	r0, [r4, #8]
   35e60:	bl	157c <fwrite@plt>
   35e64:	ldr	r3, [r4]
   35e68:	mov	r2, #1
   35e6c:	mov	r1, #2
   35e70:	mov	r0, r5
   35e74:	bl	157c <fwrite@plt>
   35e78:	ldr	r3, [r4]
   35e7c:	mov	r2, #1
   35e80:	mov	r1, #2
   35e84:	add	r0, sp, #16
   35e88:	bl	157c <fwrite@plt>
   35e8c:	b	35d28 <Mat_Create5+0x48>
   35e90:	mov	r3, r8
   35e94:	mov	r2, r6
   35e98:	mov	r1, #116	; 0x74
   35e9c:	mov	r0, r5
   35ea0:	bl	1654 <snprintf@plt>
   35ea4:	b	35e04 <Mat_Create5+0x124>
   35ea8:	.word	0x0000aabc
   35eac:	.word	0x0000b16b
   35eb0:	.word	0x0000a9c8
   35eb4:	.word	0x0000a9e3
   35eb8:	.word	0x00004d49

00035ebc <Mat_VarRead5>:
   35ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35ec0:	sub	sp, sp, #44	; 0x2c
   35ec4:	mov	r3, #1
   35ec8:	subs	r4, r1, #0
   35ecc:	str	r3, [sp, #24]
   35ed0:	beq	35f20 <Mat_VarRead5+0x64>
   35ed4:	ldr	r3, [r4, #4]
   35ed8:	cmp	r3, #0
   35edc:	beq	35f20 <Mat_VarRead5+0x64>
   35ee0:	ldr	r3, [r4, #52]	; 0x34
   35ee4:	ldr	r2, [r3, #16]
   35ee8:	cmp	r2, #0
   35eec:	strne	r2, [r4, #40]	; 0x28
   35ef0:	movne	r2, #0
   35ef4:	strne	r2, [r3, #16]
   35ef8:	bne	35f20 <Mat_VarRead5+0x64>
   35efc:	mov	r5, r0
   35f00:	ldr	r0, [r0]
   35f04:	bl	151c <ftell@plt>
   35f08:	cmn	r0, #1
   35f0c:	str	r0, [sp, #16]
   35f10:	bne	35f28 <Mat_VarRead5+0x6c>
   35f14:	ldr	r0, [pc, #3872]	; 36e3c <Mat_VarRead5+0xf80>
   35f18:	add	r0, pc, r0
   35f1c:	bl	1690 <Mat_Critical@plt>
   35f20:	add	sp, sp, #44	; 0x2c
   35f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35f28:	add	r1, sp, #24
   35f2c:	mov	r0, r4
   35f30:	bl	3bee0 <SafeMulDims>
   35f34:	subs	r3, r0, #0
   35f38:	str	r3, [sp, #8]
   35f3c:	ldrne	r0, [pc, #3836]	; 36e40 <Mat_VarRead5+0xf84>
   35f40:	addne	r0, pc, r0
   35f44:	bne	35f1c <Mat_VarRead5+0x60>
   35f48:	ldr	r3, [r5, #20]
   35f4c:	ldr	r1, [r4, #16]
   35f50:	str	r3, [sp, #12]
   35f54:	cmp	r1, #16
   35f58:	addls	pc, pc, r1, lsl #2
   35f5c:	b	375bc <Mat_VarRead5+0x1700>
   35f60:	b	35fa4 <Mat_VarRead5+0xe8>
   35f64:	b	36490 <Mat_VarRead5+0x5d4>
   35f68:	b	36420 <Mat_VarRead5+0x564>
   35f6c:	b	375bc <Mat_VarRead5+0x1700>
   35f70:	b	36184 <Mat_VarRead5+0x2c8>
   35f74:	b	364e0 <Mat_VarRead5+0x624>
   35f78:	b	3601c <Mat_VarRead5+0x160>
   35f7c:	b	36044 <Mat_VarRead5+0x188>
   35f80:	b	36140 <Mat_VarRead5+0x284>
   35f84:	b	36160 <Mat_VarRead5+0x2a4>
   35f88:	b	360f8 <Mat_VarRead5+0x23c>
   35f8c:	b	3611c <Mat_VarRead5+0x260>
   35f90:	b	360b0 <Mat_VarRead5+0x1f4>
   35f94:	b	360d4 <Mat_VarRead5+0x218>
   35f98:	b	36068 <Mat_VarRead5+0x1ac>
   35f9c:	b	3608c <Mat_VarRead5+0x1d0>
   35fa0:	b	37568 <Mat_VarRead5+0x16ac>
   35fa4:	mov	r3, #2
   35fa8:	mov	ip, #9
   35fac:	mov	r6, #0
   35fb0:	mov	r0, #8
   35fb4:	str	r6, [r4]
   35fb8:	str	r0, [r4, #12]
   35fbc:	stmib	r4, {r3, ip}
   35fc0:	bl	15ac <malloc@plt>
   35fc4:	str	r0, [r4, #32]
   35fc8:	str	r6, [r0]
   35fcc:	str	r6, [r0, #4]
   35fd0:	ldr	r3, [r4, #16]
   35fd4:	sub	r3, r3, #6
   35fd8:	cmp	r3, #9
   35fdc:	bhi	375f4 <Mat_VarRead5+0x1738>
   35fe0:	ldr	r3, [r4, #20]
   35fe4:	ldr	r2, [r4, #12]
   35fe8:	cmp	r3, #0
   35fec:	ldr	r1, [sp, #24]
   35ff0:	mov	r0, r4
   35ff4:	beq	37608 <Mat_VarRead5+0x174c>
   35ff8:	bl	3bf40 <SafeMul>
   35ffc:	ldr	r0, [r4]
   36000:	bl	3be44 <ComplexMalloc>
   36004:	subs	r6, r0, #0
   36008:	bne	375c8 <Mat_VarRead5+0x170c>
   3600c:	ldr	r0, [pc, #3632]	; 36e44 <Mat_VarRead5+0xf88>
   36010:	add	r0, pc, r0
   36014:	bl	1690 <Mat_Critical@plt>
   36018:	b	375f4 <Mat_VarRead5+0x1738>
   3601c:	ldr	r3, [r4, #52]	; 0x34
   36020:	mov	r2, #0
   36024:	ldr	r0, [r5]
   36028:	ldr	r1, [r3]
   3602c:	bl	1714 <fseek@plt>
   36030:	mov	r3, #8
   36034:	str	r3, [r4, #12]
   36038:	mov	r3, #9
   3603c:	str	r3, [r4, #8]
   36040:	b	35fd0 <Mat_VarRead5+0x114>
   36044:	ldr	r3, [r4, #52]	; 0x34
   36048:	mov	r2, #0
   3604c:	ldr	r0, [r5]
   36050:	ldr	r1, [r3]
   36054:	bl	1714 <fseek@plt>
   36058:	mov	r3, #4
   3605c:	str	r3, [r4, #12]
   36060:	mov	r3, #7
   36064:	b	3603c <Mat_VarRead5+0x180>
   36068:	ldr	r3, [r4, #52]	; 0x34
   3606c:	mov	r2, #0
   36070:	ldr	r0, [r5]
   36074:	ldr	r1, [r3]
   36078:	bl	1714 <fseek@plt>
   3607c:	mov	r3, #8
   36080:	str	r3, [r4, #12]
   36084:	mov	r3, #12
   36088:	b	3603c <Mat_VarRead5+0x180>
   3608c:	ldr	r3, [r4, #52]	; 0x34
   36090:	mov	r2, #0
   36094:	ldr	r0, [r5]
   36098:	ldr	r1, [r3]
   3609c:	bl	1714 <fseek@plt>
   360a0:	mov	r3, #8
   360a4:	str	r3, [r4, #12]
   360a8:	mov	r3, #13
   360ac:	b	3603c <Mat_VarRead5+0x180>
   360b0:	ldr	r3, [r4, #52]	; 0x34
   360b4:	mov	r2, #0
   360b8:	ldr	r0, [r5]
   360bc:	ldr	r1, [r3]
   360c0:	bl	1714 <fseek@plt>
   360c4:	mov	r3, #4
   360c8:	str	r3, [r4, #12]
   360cc:	mov	r3, #5
   360d0:	b	3603c <Mat_VarRead5+0x180>
   360d4:	ldr	r3, [r4, #52]	; 0x34
   360d8:	mov	r2, #0
   360dc:	ldr	r0, [r5]
   360e0:	ldr	r1, [r3]
   360e4:	bl	1714 <fseek@plt>
   360e8:	mov	r3, #4
   360ec:	str	r3, [r4, #12]
   360f0:	mov	r3, #6
   360f4:	b	3603c <Mat_VarRead5+0x180>
   360f8:	ldr	r3, [r4, #52]	; 0x34
   360fc:	mov	r2, #0
   36100:	ldr	r0, [r5]
   36104:	ldr	r1, [r3]
   36108:	bl	1714 <fseek@plt>
   3610c:	mov	r3, #2
   36110:	str	r3, [r4, #12]
   36114:	mov	r3, #3
   36118:	b	3603c <Mat_VarRead5+0x180>
   3611c:	ldr	r3, [r4, #52]	; 0x34
   36120:	mov	r2, #0
   36124:	ldr	r0, [r5]
   36128:	ldr	r1, [r3]
   3612c:	bl	1714 <fseek@plt>
   36130:	mov	r3, #2
   36134:	str	r3, [r4, #12]
   36138:	mov	r3, #4
   3613c:	b	3603c <Mat_VarRead5+0x180>
   36140:	ldr	r3, [r4, #52]	; 0x34
   36144:	mov	r2, #0
   36148:	ldr	r0, [r5]
   3614c:	ldr	r1, [r3]
   36150:	bl	1714 <fseek@plt>
   36154:	mov	r3, #1
   36158:	str	r3, [r4, #12]
   3615c:	b	3603c <Mat_VarRead5+0x180>
   36160:	ldr	r3, [r4, #52]	; 0x34
   36164:	mov	r2, #0
   36168:	ldr	r0, [r5]
   3616c:	ldr	r1, [r3]
   36170:	bl	1714 <fseek@plt>
   36174:	mov	r3, #1
   36178:	str	r3, [r4, #12]
   3617c:	mov	r3, #2
   36180:	b	3603c <Mat_VarRead5+0x180>
   36184:	ldr	r3, [r4, #52]	; 0x34
   36188:	mov	r2, #0
   3618c:	ldr	r0, [r5]
   36190:	ldr	r1, [r3]
   36194:	bl	1714 <fseek@plt>
   36198:	ldr	r3, [r4, #48]	; 0x30
   3619c:	add	r6, sp, #32
   361a0:	cmp	r3, #1
   361a4:	bne	36284 <Mat_VarRead5+0x3c8>
   361a8:	ldr	r3, [r4, #52]	; 0x34
   361ac:	mov	r2, r6
   361b0:	mov	r0, r5
   361b4:	ldr	r1, [r3, #12]
   361b8:	mov	r3, #0
   361bc:	str	r3, [r1, #4]
   361c0:	bl	2f24 <InflateDataType>
   361c4:	ldr	r3, [sp, #12]
   361c8:	cmp	r3, #0
   361cc:	beq	361d8 <Mat_VarRead5+0x31c>
   361d0:	mov	r0, r6
   361d4:	bl	1a80 <Mat_uint32Swap>
   361d8:	ldr	r3, [sp, #32]
   361dc:	lsr	r2, r3, #16
   361e0:	uxtb	r7, r3
   361e4:	cmp	r7, #24
   361e8:	lsl	r2, r2, #16
   361ec:	movhi	r7, #0
   361f0:	cmp	r2, #0
   361f4:	lsrne	r6, r3, #16
   361f8:	movne	r3, #1
   361fc:	strne	r3, [sp, #8]
   36200:	bne	36234 <Mat_VarRead5+0x378>
   36204:	ldr	r3, [r4, #52]	; 0x34
   36208:	add	r6, r6, #4
   3620c:	mov	r2, r6
   36210:	ldr	r1, [r3, #12]
   36214:	mov	r0, r5
   36218:	bl	2f24 <InflateDataType>
   3621c:	ldr	r3, [sp, #12]
   36220:	cmp	r3, #0
   36224:	beq	36230 <Mat_VarRead5+0x374>
   36228:	mov	r0, r6
   3622c:	bl	1a80 <Mat_uint32Swap>
   36230:	ldr	r6, [sp, #36]	; 0x24
   36234:	str	r7, [r4, #8]
   36238:	mov	r0, r7
   3623c:	bl	1600 <Mat_SizeOf@plt>
   36240:	ldr	r3, [sp, #8]
   36244:	str	r6, [r4]
   36248:	str	r3, [sp, #12]
   3624c:	str	r0, [r4, #12]
   36250:	ldr	r3, [r4, #20]
   36254:	cmp	r3, #0
   36258:	bne	35fd0 <Mat_VarRead5+0x114>
   3625c:	ldr	r6, [r4]
   36260:	mov	r1, #1
   36264:	add	r0, r6, r1
   36268:	bl	1468 <calloc@plt>
   3626c:	cmp	r0, #0
   36270:	str	r0, [r4, #40]	; 0x28
   36274:	bne	3633c <Mat_VarRead5+0x480>
   36278:	ldr	r0, [pc, #3016]	; 36e48 <Mat_VarRead5+0xf8c>
   3627c:	add	r0, pc, r0
   36280:	b	36334 <Mat_VarRead5+0x478>
   36284:	ldr	r3, [r5]
   36288:	mov	r2, #1
   3628c:	mov	r1, #4
   36290:	mov	r0, r6
   36294:	bl	1588 <fread@plt>
   36298:	ldr	r3, [sp, #12]
   3629c:	cmp	r3, #0
   362a0:	beq	362ac <Mat_VarRead5+0x3f0>
   362a4:	mov	r0, r6
   362a8:	bl	1a80 <Mat_uint32Swap>
   362ac:	ldr	r3, [sp, #32]
   362b0:	uxtb	r7, r3
   362b4:	lsr	r3, r3, #16
   362b8:	cmp	r7, #24
   362bc:	lsl	r3, r3, #16
   362c0:	movhi	r7, #0
   362c4:	cmp	r3, #0
   362c8:	movne	r3, #1
   362cc:	bne	36300 <Mat_VarRead5+0x444>
   362d0:	add	r6, r6, #4
   362d4:	ldr	r3, [r5]
   362d8:	mov	r2, #1
   362dc:	mov	r1, #4
   362e0:	mov	r0, r6
   362e4:	bl	1588 <fread@plt>
   362e8:	ldr	r3, [sp, #12]
   362ec:	cmp	r3, #0
   362f0:	beq	36304 <Mat_VarRead5+0x448>
   362f4:	mov	r0, r6
   362f8:	bl	1a80 <Mat_uint32Swap>
   362fc:	ldr	r3, [sp, #8]
   36300:	str	r3, [sp, #12]
   36304:	mov	r0, #2
   36308:	str	r0, [r4, #8]
   3630c:	bl	1600 <Mat_SizeOf@plt>
   36310:	ldr	r1, [sp, #24]
   36314:	mov	r2, r0
   36318:	str	r0, [r4, #12]
   3631c:	mov	r0, r4
   36320:	bl	3bf40 <SafeMul>
   36324:	cmp	r0, #0
   36328:	beq	36250 <Mat_VarRead5+0x394>
   3632c:	ldr	r0, [pc, #2840]	; 36e4c <Mat_VarRead5+0xf90>
   36330:	add	r0, pc, r0
   36334:	bl	1690 <Mat_Critical@plt>
   36338:	b	35fd0 <Mat_VarRead5+0x114>
   3633c:	cmp	r6, #0
   36340:	beq	35fd0 <Mat_VarRead5+0x114>
   36344:	ldr	r2, [r4, #12]
   36348:	ldr	r1, [sp, #24]
   3634c:	add	r0, sp, #28
   36350:	bl	3bf40 <SafeMul>
   36354:	cmp	r0, #0
   36358:	bne	35fd0 <Mat_VarRead5+0x114>
   3635c:	ldr	r2, [r4]
   36360:	ldr	r3, [sp, #28]
   36364:	cmp	r2, r3
   36368:	bcc	35fd0 <Mat_VarRead5+0x114>
   3636c:	ldr	r3, [r4, #48]	; 0x30
   36370:	cmp	r3, #0
   36374:	bne	363c0 <Mat_VarRead5+0x504>
   36378:	ldr	r3, [sp, #24]
   3637c:	ldr	r1, [r4, #40]	; 0x28
   36380:	mov	r2, r7
   36384:	mov	r0, r5
   36388:	bl	13098 <ReadCharData>
   3638c:	ldr	r3, [sp, #12]
   36390:	cmp	r3, #0
   36394:	addne	r0, r0, #4
   36398:	ands	r1, r0, #7
   3639c:	beq	35fd0 <Mat_VarRead5+0x114>
   363a0:	rsbs	r0, r0, #0
   363a4:	and	r0, r0, #7
   363a8:	rsbpl	r1, r0, #0
   363ac:	mov	r2, #1
   363b0:	rsb	r1, r1, #8
   363b4:	ldr	r0, [r5]
   363b8:	bl	1714 <fseek@plt>
   363bc:	b	35fd0 <Mat_VarRead5+0x114>
   363c0:	cmp	r3, #1
   363c4:	bne	35fd0 <Mat_VarRead5+0x114>
   363c8:	ldr	r1, [r4, #52]	; 0x34
   363cc:	ldr	r3, [sp, #24]
   363d0:	mov	r0, r5
   363d4:	str	r3, [sp]
   363d8:	mov	r3, r7
   363dc:	ldr	r2, [r4, #40]	; 0x28
   363e0:	ldr	r1, [r1, #12]
   363e4:	bl	12fc0 <ReadCompressedCharData>
   363e8:	ldr	r3, [sp, #12]
   363ec:	cmp	r3, #0
   363f0:	addne	r0, r0, #4
   363f4:	ands	r2, r0, #7
   363f8:	beq	35fd0 <Mat_VarRead5+0x114>
   363fc:	rsbs	r0, r0, #0
   36400:	and	r0, r0, #7
   36404:	rsbpl	r2, r0, #0
   36408:	ldr	r3, [r4, #52]	; 0x34
   3640c:	rsb	r2, r2, #8
   36410:	mov	r0, r5
   36414:	ldr	r1, [r3, #12]
   36418:	bl	20e4 <InflateSkip>
   3641c:	b	35fd0 <Mat_VarRead5+0x114>
   36420:	mov	r3, #22
   36424:	str	r3, [r4, #8]
   36428:	ldr	r3, [r4]
   3642c:	cmp	r3, #0
   36430:	beq	35fd0 <Mat_VarRead5+0x114>
   36434:	ldr	r3, [r4, #12]
   36438:	cmp	r3, #0
   3643c:	beq	35fd0 <Mat_VarRead5+0x114>
   36440:	ldr	r3, [r4, #40]	; 0x28
   36444:	cmp	r3, #0
   36448:	beq	35fd0 <Mat_VarRead5+0x114>
   3644c:	ldr	r3, [r4, #52]	; 0x34
   36450:	ldr	r1, [sp, #24]
   36454:	add	r0, sp, #32
   36458:	ldr	r2, [r3, #4]
   3645c:	bl	3bf40 <SafeMul>
   36460:	ldr	r7, [r4, #40]	; 0x28
   36464:	mov	r6, #0
   36468:	ldr	r3, [sp, #32]
   3646c:	cmp	r6, r3
   36470:	bcs	35fd0 <Mat_VarRead5+0x114>
   36474:	ldr	r1, [r7, r6, lsl #2]
   36478:	cmp	r1, #0
   3647c:	beq	36488 <Mat_VarRead5+0x5cc>
   36480:	mov	r0, r5
   36484:	bl	35ebc <Mat_VarRead5>
   36488:	add	r6, r6, #1
   3648c:	b	36468 <Mat_VarRead5+0x5ac>
   36490:	ldr	r7, [r4, #40]	; 0x28
   36494:	cmp	r7, #0
   36498:	movne	r6, #0
   3649c:	bne	364cc <Mat_VarRead5+0x610>
   364a0:	ldr	r0, [pc, #2472]	; 36e50 <Mat_VarRead5+0xf94>
   364a4:	ldr	r1, [r4, #36]	; 0x24
   364a8:	add	r0, pc, r0
   364ac:	bl	1690 <Mat_Critical@plt>
   364b0:	b	35fd0 <Mat_VarRead5+0x114>
   364b4:	ldr	r1, [r7, r6, lsl #2]
   364b8:	cmp	r1, #0
   364bc:	beq	364c8 <Mat_VarRead5+0x60c>
   364c0:	mov	r0, r5
   364c4:	bl	35ebc <Mat_VarRead5>
   364c8:	add	r6, r6, #1
   364cc:	ldr	r3, [sp, #24]
   364d0:	cmp	r6, r3
   364d4:	bcc	364b4 <Mat_VarRead5+0x5f8>
   364d8:	mov	r3, #21
   364dc:	b	3603c <Mat_VarRead5+0x180>
   364e0:	mov	r0, #28
   364e4:	mov	r6, #0
   364e8:	str	r0, [r4, #12]
   364ec:	str	r6, [sp, #28]
   364f0:	bl	15ac <malloc@plt>
   364f4:	cmp	r0, r6
   364f8:	mov	r7, r0
   364fc:	str	r0, [r4, #40]	; 0x28
   36500:	ldreq	r0, [pc, #2380]	; 36e54 <Mat_VarRead5+0xf98>
   36504:	addeq	r0, pc, r0
   36508:	beq	36334 <Mat_VarRead5+0x478>
   3650c:	ldr	r3, [r4]
   36510:	mov	r2, r6
   36514:	str	r3, [r0]
   36518:	ldr	r3, [r4, #52]	; 0x34
   3651c:	ldr	r0, [r5]
   36520:	add	r8, sp, #32
   36524:	ldr	r1, [r3]
   36528:	bl	1714 <fseek@plt>
   3652c:	ldr	r3, [r4, #48]	; 0x30
   36530:	cmp	r3, #1
   36534:	bne	36828 <Mat_VarRead5+0x96c>
   36538:	ldr	r3, [r4, #52]	; 0x34
   3653c:	mov	r2, r8
   36540:	mov	r0, r5
   36544:	ldr	r1, [r3, #12]
   36548:	str	r6, [r1, #4]
   3654c:	bl	2f24 <InflateDataType>
   36550:	ldr	r3, [r5, #20]
   36554:	cmp	r3, #0
   36558:	beq	36564 <Mat_VarRead5+0x6a8>
   3655c:	mov	r0, r8
   36560:	bl	1a80 <Mat_uint32Swap>
   36564:	ldr	r3, [sp, #32]
   36568:	mov	r9, #1
   3656c:	lsr	r2, r3, #16
   36570:	uxtb	r6, r3
   36574:	cmp	r6, #24
   36578:	lsl	r2, r2, #16
   3657c:	movhi	r6, #0
   36580:	cmp	r2, #0
   36584:	lsrne	r3, r3, #16
   36588:	strne	r3, [sp, #28]
   3658c:	bne	365b0 <Mat_VarRead5+0x6f4>
   36590:	ldr	r1, [r4, #52]	; 0x34
   36594:	mov	r3, #5
   36598:	str	r9, [sp]
   3659c:	add	r2, sp, #28
   365a0:	ldr	r1, [r1, #12]
   365a4:	mov	r0, r5
   365a8:	bl	11294 <ReadCompressedInt32Data>
   365ac:	ldr	r9, [sp, #8]
   365b0:	ldr	sl, [sp, #28]
   365b4:	cmp	sl, #0
   365b8:	add	r3, sl, #3
   365bc:	movlt	sl, r3
   365c0:	asr	sl, sl, #2
   365c4:	str	sl, [r7, #8]
   365c8:	lsl	r0, sl, #2
   365cc:	bl	15ac <malloc@plt>
   365d0:	cmp	r0, #0
   365d4:	mov	r1, r0
   365d8:	str	r0, [r7, #4]
   365dc:	beq	3690c <Mat_VarRead5+0xa50>
   365e0:	ldr	r3, [r4, #48]	; 0x30
   365e4:	cmp	r3, #0
   365e8:	bne	368ac <Mat_VarRead5+0x9f0>
   365ec:	mov	r2, r6
   365f0:	mov	r3, sl
   365f4:	mov	r0, r5
   365f8:	bl	11270 <ReadInt32Data>
   365fc:	cmp	r9, #0
   36600:	mov	r6, r0
   36604:	addne	r6, r0, #4
   36608:	ands	r1, r6, #7
   3660c:	beq	3662c <Mat_VarRead5+0x770>
   36610:	rsbs	r3, r6, #0
   36614:	and	r3, r3, #7
   36618:	rsbpl	r1, r3, #0
   3661c:	mov	r2, #1
   36620:	rsb	r1, r1, #8
   36624:	ldr	r0, [r5]
   36628:	bl	1714 <fseek@plt>
   3662c:	ldr	r3, [r4, #48]	; 0x30
   36630:	cmp	r3, #1
   36634:	bne	36918 <Mat_VarRead5+0xa5c>
   36638:	ldr	r3, [r4, #52]	; 0x34
   3663c:	mov	r2, r8
   36640:	mov	r0, r5
   36644:	ldr	r1, [r3, #12]
   36648:	mov	r3, #0
   3664c:	str	r3, [r1, #4]
   36650:	bl	2f24 <InflateDataType>
   36654:	ldr	r3, [r5, #20]
   36658:	cmp	r3, #0
   3665c:	beq	36668 <Mat_VarRead5+0x7ac>
   36660:	mov	r0, r8
   36664:	bl	1a80 <Mat_uint32Swap>
   36668:	ldr	r3, [sp, #32]
   3666c:	mov	r9, #1
   36670:	lsr	r2, r3, #16
   36674:	uxtb	sl, r3
   36678:	cmp	sl, #24
   3667c:	lsl	r2, r2, #16
   36680:	movhi	sl, #0
   36684:	cmp	r2, #0
   36688:	lsrne	r3, r3, #16
   3668c:	strne	r3, [sp, #28]
   36690:	bne	366b4 <Mat_VarRead5+0x7f8>
   36694:	ldr	r1, [r4, #52]	; 0x34
   36698:	mov	r3, #5
   3669c:	str	r9, [sp]
   366a0:	add	r2, sp, #28
   366a4:	ldr	r1, [r1, #12]
   366a8:	mov	r0, r5
   366ac:	bl	11294 <ReadCompressedInt32Data>
   366b0:	ldr	r9, [sp, #8]
   366b4:	ldr	fp, [sp, #28]
   366b8:	cmp	fp, #0
   366bc:	add	r3, fp, #3
   366c0:	movlt	fp, r3
   366c4:	asr	fp, fp, #2
   366c8:	str	fp, [r7, #16]
   366cc:	lsl	r0, fp, #2
   366d0:	bl	15ac <malloc@plt>
   366d4:	cmp	r0, #0
   366d8:	mov	r1, r0
   366dc:	str	r0, [r7, #12]
   366e0:	beq	369f8 <Mat_VarRead5+0xb3c>
   366e4:	ldr	r3, [r4, #48]	; 0x30
   366e8:	cmp	r3, #0
   366ec:	bne	3699c <Mat_VarRead5+0xae0>
   366f0:	mov	r3, fp
   366f4:	mov	r2, sl
   366f8:	mov	r0, r5
   366fc:	bl	11270 <ReadInt32Data>
   36700:	cmp	r9, #0
   36704:	mov	r6, r0
   36708:	addne	r6, r0, #4
   3670c:	ands	r1, r6, #7
   36710:	beq	36730 <Mat_VarRead5+0x874>
   36714:	rsbs	r3, r6, #0
   36718:	and	r3, r3, #7
   3671c:	rsbpl	r1, r3, #0
   36720:	mov	r2, #1
   36724:	rsb	r1, r1, #8
   36728:	ldr	r0, [r5]
   3672c:	bl	1714 <fseek@plt>
   36730:	ldr	r3, [r4, #48]	; 0x30
   36734:	cmp	r3, #1
   36738:	bne	36a04 <Mat_VarRead5+0xb48>
   3673c:	ldr	r3, [r4, #52]	; 0x34
   36740:	mov	r2, r8
   36744:	mov	r0, r5
   36748:	ldr	r1, [r3, #12]
   3674c:	mov	r3, #0
   36750:	str	r3, [r1, #4]
   36754:	bl	2f24 <InflateDataType>
   36758:	ldr	r3, [r5, #20]
   3675c:	cmp	r3, #0
   36760:	beq	3676c <Mat_VarRead5+0x8b0>
   36764:	mov	r0, r8
   36768:	bl	1a80 <Mat_uint32Swap>
   3676c:	ldr	r3, [sp, #32]
   36770:	mov	fp, #1
   36774:	lsr	r2, r3, #16
   36778:	uxtb	r9, r3
   3677c:	cmp	r9, #24
   36780:	lsl	r2, r2, #16
   36784:	movhi	r9, #0
   36788:	cmp	r2, #0
   3678c:	lsrne	r3, r3, #16
   36790:	strne	r3, [sp, #28]
   36794:	bne	367b8 <Mat_VarRead5+0x8fc>
   36798:	ldr	r1, [r4, #52]	; 0x34
   3679c:	mov	r3, #5
   367a0:	str	fp, [sp]
   367a4:	add	r2, sp, #28
   367a8:	ldr	r1, [r1, #12]
   367ac:	mov	r0, r5
   367b0:	bl	11294 <ReadCompressedInt32Data>
   367b4:	ldr	fp, [sp, #8]
   367b8:	ldr	r3, [r4, #28]
   367bc:	adds	r3, r3, #0
   367c0:	movne	r3, #1
   367c4:	cmp	r9, #9
   367c8:	movne	r3, #0
   367cc:	cmp	r3, #0
   367d0:	movne	r9, #2
   367d4:	str	r9, [r4, #8]
   367d8:	mov	r0, r9
   367dc:	bl	1600 <Mat_SizeOf@plt>
   367e0:	subs	r1, r0, #0
   367e4:	beq	35fd0 <Mat_VarRead5+0x114>
   367e8:	ldr	r0, [sp, #28]
   367ec:	bl	3f8ec <__udivsi3>
   367f0:	ldr	r3, [r4, #20]
   367f4:	cmp	r3, #0
   367f8:	mov	sl, r0
   367fc:	str	r0, [r7, #20]
   36800:	ldr	r0, [r4, #8]
   36804:	beq	37230 <Mat_VarRead5+0x1374>
   36808:	bl	1600 <Mat_SizeOf@plt>
   3680c:	mul	r0, r0, sl
   36810:	bl	3be44 <ComplexMalloc>
   36814:	subs	sl, r0, #0
   36818:	bne	36a88 <Mat_VarRead5+0xbcc>
   3681c:	ldr	r0, [pc, #1588]	; 36e58 <Mat_VarRead5+0xf9c>
   36820:	add	r0, pc, r0
   36824:	b	36334 <Mat_VarRead5+0x478>
   36828:	ldr	r3, [r5]
   3682c:	mov	r2, #1
   36830:	mov	r1, #4
   36834:	mov	r0, r8
   36838:	bl	1588 <fread@plt>
   3683c:	ldr	r3, [r5, #20]
   36840:	cmp	r3, #0
   36844:	beq	36850 <Mat_VarRead5+0x994>
   36848:	mov	r0, r8
   3684c:	bl	1a80 <Mat_uint32Swap>
   36850:	ldr	r3, [sp, #32]
   36854:	lsr	r2, r3, #16
   36858:	uxtb	r6, r3
   3685c:	cmp	r6, #24
   36860:	lsl	r2, r2, #16
   36864:	movhi	r6, #0
   36868:	cmp	r2, #0
   3686c:	lsrne	r3, r3, #16
   36870:	strne	r3, [sp, #28]
   36874:	movne	r9, #1
   36878:	bne	365b0 <Mat_VarRead5+0x6f4>
   3687c:	add	sl, sp, #28
   36880:	ldr	r3, [r5]
   36884:	mov	r2, #1
   36888:	mov	r1, #4
   3688c:	mov	r0, sl
   36890:	bl	1588 <fread@plt>
   36894:	ldr	r9, [r5, #20]
   36898:	cmp	r9, #0
   3689c:	beq	365b0 <Mat_VarRead5+0x6f4>
   368a0:	mov	r0, sl
   368a4:	bl	1a18 <Mat_int32Swap>
   368a8:	b	365ac <Mat_VarRead5+0x6f0>
   368ac:	cmp	r3, #1
   368b0:	ldrne	r6, [sp, #8]
   368b4:	bne	3662c <Mat_VarRead5+0x770>
   368b8:	ldr	r0, [r4, #52]	; 0x34
   368bc:	mov	r2, r1
   368c0:	str	sl, [sp]
   368c4:	mov	r3, r6
   368c8:	ldr	r1, [r0, #12]
   368cc:	mov	r0, r5
   368d0:	bl	11294 <ReadCompressedInt32Data>
   368d4:	cmp	r9, #0
   368d8:	mov	r6, r0
   368dc:	addne	r6, r0, #4
   368e0:	ands	r2, r6, #7
   368e4:	beq	3662c <Mat_VarRead5+0x770>
   368e8:	rsbs	r3, r6, #0
   368ec:	and	r3, r3, #7
   368f0:	rsbpl	r2, r3, #0
   368f4:	ldr	r3, [r4, #52]	; 0x34
   368f8:	rsb	r2, r2, #8
   368fc:	mov	r0, r5
   36900:	ldr	r1, [r3, #12]
   36904:	bl	20e4 <InflateSkip>
   36908:	b	3662c <Mat_VarRead5+0x770>
   3690c:	ldr	r0, [pc, #1352]	; 36e5c <Mat_VarRead5+0xfa0>
   36910:	add	r0, pc, r0
   36914:	b	36334 <Mat_VarRead5+0x478>
   36918:	ldr	r3, [r5]
   3691c:	mov	r2, #1
   36920:	mov	r1, #4
   36924:	mov	r0, r8
   36928:	bl	1588 <fread@plt>
   3692c:	ldr	r3, [r5, #20]
   36930:	cmp	r3, #0
   36934:	beq	36940 <Mat_VarRead5+0xa84>
   36938:	mov	r0, r8
   3693c:	bl	1a80 <Mat_uint32Swap>
   36940:	ldr	r3, [sp, #32]
   36944:	lsr	r2, r3, #16
   36948:	uxtb	sl, r3
   3694c:	cmp	sl, #24
   36950:	lsl	r2, r2, #16
   36954:	movhi	sl, #0
   36958:	cmp	r2, #0
   3695c:	lsrne	r3, r3, #16
   36960:	strne	r3, [sp, #28]
   36964:	movne	r9, #1
   36968:	bne	366b4 <Mat_VarRead5+0x7f8>
   3696c:	add	fp, sp, #28
   36970:	ldr	r3, [r5]
   36974:	mov	r2, #1
   36978:	mov	r1, #4
   3697c:	mov	r0, fp
   36980:	bl	1588 <fread@plt>
   36984:	ldr	r9, [r5, #20]
   36988:	cmp	r9, #0
   3698c:	beq	366b4 <Mat_VarRead5+0x7f8>
   36990:	mov	r0, fp
   36994:	bl	1a18 <Mat_int32Swap>
   36998:	b	366b0 <Mat_VarRead5+0x7f4>
   3699c:	cmp	r3, #1
   369a0:	bne	36730 <Mat_VarRead5+0x874>
   369a4:	ldr	r0, [r4, #52]	; 0x34
   369a8:	mov	r2, r1
   369ac:	str	fp, [sp]
   369b0:	mov	r3, sl
   369b4:	ldr	r1, [r0, #12]
   369b8:	mov	r0, r5
   369bc:	bl	11294 <ReadCompressedInt32Data>
   369c0:	cmp	r9, #0
   369c4:	mov	r6, r0
   369c8:	addne	r6, r0, #4
   369cc:	ands	r2, r6, #7
   369d0:	beq	36730 <Mat_VarRead5+0x874>
   369d4:	rsbs	r3, r6, #0
   369d8:	and	r3, r3, #7
   369dc:	rsbpl	r2, r3, #0
   369e0:	ldr	r3, [r4, #52]	; 0x34
   369e4:	rsb	r2, r2, #8
   369e8:	mov	r0, r5
   369ec:	ldr	r1, [r3, #12]
   369f0:	bl	20e4 <InflateSkip>
   369f4:	b	36730 <Mat_VarRead5+0x874>
   369f8:	ldr	r0, [pc, #1120]	; 36e60 <Mat_VarRead5+0xfa4>
   369fc:	add	r0, pc, r0
   36a00:	b	36334 <Mat_VarRead5+0x478>
   36a04:	ldr	r3, [r5]
   36a08:	mov	r2, #1
   36a0c:	mov	r1, #4
   36a10:	mov	r0, r8
   36a14:	bl	1588 <fread@plt>
   36a18:	ldr	r3, [r5, #20]
   36a1c:	cmp	r3, #0
   36a20:	beq	36a2c <Mat_VarRead5+0xb70>
   36a24:	mov	r0, r8
   36a28:	bl	1a80 <Mat_uint32Swap>
   36a2c:	ldr	r3, [sp, #32]
   36a30:	lsr	r2, r3, #16
   36a34:	uxtb	r9, r3
   36a38:	cmp	r9, #24
   36a3c:	lsl	r2, r2, #16
   36a40:	movhi	r9, #0
   36a44:	cmp	r2, #0
   36a48:	lsrne	r3, r3, #16
   36a4c:	strne	r3, [sp, #28]
   36a50:	movne	fp, #1
   36a54:	bne	367b8 <Mat_VarRead5+0x8fc>
   36a58:	add	sl, sp, #28
   36a5c:	ldr	r3, [r5]
   36a60:	mov	r2, #1
   36a64:	mov	r1, #4
   36a68:	mov	r0, sl
   36a6c:	bl	1588 <fread@plt>
   36a70:	ldr	fp, [r5, #20]
   36a74:	cmp	fp, #0
   36a78:	beq	367b8 <Mat_VarRead5+0x8fc>
   36a7c:	mov	r0, sl
   36a80:	bl	1a18 <Mat_int32Swap>
   36a84:	b	367b4 <Mat_VarRead5+0x8f8>
   36a88:	ldr	r3, [r4, #48]	; 0x30
   36a8c:	cmp	r3, #0
   36a90:	bne	36de8 <Mat_VarRead5+0xf2c>
   36a94:	ldr	r3, [r4, #8]
   36a98:	sub	r3, r3, #1
   36a9c:	cmp	r3, #12
   36aa0:	addls	pc, pc, r3, lsl #2
   36aa4:	b	36af4 <Mat_VarRead5+0xc38>
   36aa8:	b	36c94 <Mat_VarRead5+0xdd8>
   36aac:	b	36cac <Mat_VarRead5+0xdf0>
   36ab0:	b	36c64 <Mat_VarRead5+0xda8>
   36ab4:	b	36c7c <Mat_VarRead5+0xdc0>
   36ab8:	b	36c34 <Mat_VarRead5+0xd78>
   36abc:	b	36c4c <Mat_VarRead5+0xd90>
   36ac0:	b	36bec <Mat_VarRead5+0xd30>
   36ac4:	b	36af4 <Mat_VarRead5+0xc38>
   36ac8:	b	36adc <Mat_VarRead5+0xc20>
   36acc:	b	36af4 <Mat_VarRead5+0xc38>
   36ad0:	b	36af4 <Mat_VarRead5+0xc38>
   36ad4:	b	36c04 <Mat_VarRead5+0xd48>
   36ad8:	b	36c1c <Mat_VarRead5+0xd60>
   36adc:	ldr	r3, [r7, #20]
   36ae0:	mov	r2, r9
   36ae4:	ldr	r1, [sl]
   36ae8:	mov	r0, r5
   36aec:	bl	f2c8 <ReadDoubleData>
   36af0:	mov	r6, r0
   36af4:	cmp	fp, #0
   36af8:	addne	r6, r6, #4
   36afc:	ands	r1, r6, #7
   36b00:	beq	36b20 <Mat_VarRead5+0xc64>
   36b04:	rsbs	r6, r6, #0
   36b08:	and	r6, r6, #7
   36b0c:	rsbpl	r1, r6, #0
   36b10:	mov	r2, #1
   36b14:	rsb	r1, r1, #8
   36b18:	ldr	r0, [r5]
   36b1c:	bl	1714 <fseek@plt>
   36b20:	ldr	r3, [r5]
   36b24:	mov	r2, #1
   36b28:	mov	r1, #4
   36b2c:	mov	r0, r8
   36b30:	bl	1588 <fread@plt>
   36b34:	ldr	r3, [sp, #12]
   36b38:	cmp	r3, #0
   36b3c:	beq	36b48 <Mat_VarRead5+0xc8c>
   36b40:	mov	r0, r8
   36b44:	bl	1a80 <Mat_uint32Swap>
   36b48:	ldr	r0, [sp, #32]
   36b4c:	lsr	r3, r0, #16
   36b50:	uxtb	r6, r0
   36b54:	lsl	r3, r3, #16
   36b58:	cmp	r6, #24
   36b5c:	movhi	r6, #0
   36b60:	cmp	r3, #0
   36b64:	movne	r3, #1
   36b68:	lsrne	r0, r0, #16
   36b6c:	strne	r3, [sp, #8]
   36b70:	bne	36ba4 <Mat_VarRead5+0xce8>
   36b74:	add	r8, r8, #4
   36b78:	ldr	r3, [r5]
   36b7c:	mov	r2, #1
   36b80:	mov	r1, #4
   36b84:	mov	r0, r8
   36b88:	bl	1588 <fread@plt>
   36b8c:	ldr	r3, [sp, #12]
   36b90:	cmp	r3, #0
   36b94:	beq	36ba0 <Mat_VarRead5+0xce4>
   36b98:	mov	r0, r8
   36b9c:	bl	1a80 <Mat_uint32Swap>
   36ba0:	ldr	r0, [sp, #36]	; 0x24
   36ba4:	ldr	r3, [r4, #8]
   36ba8:	sub	r3, r3, #1
   36bac:	cmp	r3, #12
   36bb0:	addls	pc, pc, r3, lsl #2
   36bb4:	b	36cd8 <Mat_VarRead5+0xe1c>
   36bb8:	b	36db8 <Mat_VarRead5+0xefc>
   36bbc:	b	36dd0 <Mat_VarRead5+0xf14>
   36bc0:	b	36d88 <Mat_VarRead5+0xecc>
   36bc4:	b	36da0 <Mat_VarRead5+0xee4>
   36bc8:	b	36d58 <Mat_VarRead5+0xe9c>
   36bcc:	b	36d70 <Mat_VarRead5+0xeb4>
   36bd0:	b	36d10 <Mat_VarRead5+0xe54>
   36bd4:	b	36cd8 <Mat_VarRead5+0xe1c>
   36bd8:	b	36cc4 <Mat_VarRead5+0xe08>
   36bdc:	b	36cd8 <Mat_VarRead5+0xe1c>
   36be0:	b	36cd8 <Mat_VarRead5+0xe1c>
   36be4:	b	36d28 <Mat_VarRead5+0xe6c>
   36be8:	b	36d40 <Mat_VarRead5+0xe84>
   36bec:	ldr	r3, [r7, #20]
   36bf0:	mov	r2, r9
   36bf4:	ldr	r1, [sl]
   36bf8:	mov	r0, r5
   36bfc:	bl	102f0 <ReadSingleData>
   36c00:	b	36af0 <Mat_VarRead5+0xc34>
   36c04:	ldr	r3, [r7, #20]
   36c08:	mov	r2, r9
   36c0c:	ldr	r1, [sl]
   36c10:	mov	r0, r5
   36c14:	bl	10810 <ReadInt64Data>
   36c18:	b	36af0 <Mat_VarRead5+0xc34>
   36c1c:	ldr	r3, [r7, #20]
   36c20:	mov	r2, r9
   36c24:	ldr	r1, [sl]
   36c28:	mov	r0, r5
   36c2c:	bl	10d40 <ReadUInt64Data>
   36c30:	b	36af0 <Mat_VarRead5+0xc34>
   36c34:	ldr	r3, [r7, #20]
   36c38:	mov	r2, r9
   36c3c:	ldr	r1, [sl]
   36c40:	mov	r0, r5
   36c44:	bl	11270 <ReadInt32Data>
   36c48:	b	36af0 <Mat_VarRead5+0xc34>
   36c4c:	ldr	r3, [r7, #20]
   36c50:	mov	r2, r9
   36c54:	ldr	r1, [sl]
   36c58:	mov	r0, r5
   36c5c:	bl	11750 <ReadUInt32Data>
   36c60:	b	36af0 <Mat_VarRead5+0xc34>
   36c64:	ldr	r3, [r7, #20]
   36c68:	mov	r2, r9
   36c6c:	ldr	r1, [sl]
   36c70:	mov	r0, r5
   36c74:	bl	11c30 <ReadInt16Data>
   36c78:	b	36af0 <Mat_VarRead5+0xc34>
   36c7c:	ldr	r3, [r7, #20]
   36c80:	mov	r2, r9
   36c84:	ldr	r1, [sl]
   36c88:	mov	r0, r5
   36c8c:	bl	12138 <ReadUInt16Data>
   36c90:	b	36af0 <Mat_VarRead5+0xc34>
   36c94:	ldr	r3, [r7, #20]
   36c98:	mov	r2, r9
   36c9c:	ldr	r1, [sl]
   36ca0:	mov	r0, r5
   36ca4:	bl	12640 <ReadInt8Data>
   36ca8:	b	36af0 <Mat_VarRead5+0xc34>
   36cac:	ldr	r3, [r7, #20]
   36cb0:	mov	r2, r9
   36cb4:	ldr	r1, [sl]
   36cb8:	mov	r0, r5
   36cbc:	bl	12b00 <ReadUInt8Data>
   36cc0:	b	36af0 <Mat_VarRead5+0xc34>
   36cc4:	ldr	r3, [r7, #20]
   36cc8:	mov	r2, r6
   36ccc:	ldr	r1, [sl, #4]
   36cd0:	mov	r0, r5
   36cd4:	bl	f2c8 <ReadDoubleData>
   36cd8:	ldr	r3, [sp, #8]
   36cdc:	cmp	r3, #0
   36ce0:	addne	r0, r0, #4
   36ce4:	ands	r1, r0, #7
   36ce8:	beq	36d08 <Mat_VarRead5+0xe4c>
   36cec:	rsbs	r0, r0, #0
   36cf0:	and	r0, r0, #7
   36cf4:	rsbpl	r1, r0, #0
   36cf8:	mov	r2, #1
   36cfc:	rsb	r1, r1, #8
   36d00:	ldr	r0, [r5]
   36d04:	bl	1714 <fseek@plt>
   36d08:	str	sl, [r7, #24]
   36d0c:	b	35fd0 <Mat_VarRead5+0x114>
   36d10:	ldr	r3, [r7, #20]
   36d14:	mov	r2, r6
   36d18:	ldr	r1, [sl, #4]
   36d1c:	mov	r0, r5
   36d20:	bl	102f0 <ReadSingleData>
   36d24:	b	36cd8 <Mat_VarRead5+0xe1c>
   36d28:	ldr	r3, [r7, #20]
   36d2c:	mov	r2, r6
   36d30:	ldr	r1, [sl, #4]
   36d34:	mov	r0, r5
   36d38:	bl	10810 <ReadInt64Data>
   36d3c:	b	36cd8 <Mat_VarRead5+0xe1c>
   36d40:	ldr	r3, [r7, #20]
   36d44:	mov	r2, r6
   36d48:	ldr	r1, [sl, #4]
   36d4c:	mov	r0, r5
   36d50:	bl	10d40 <ReadUInt64Data>
   36d54:	b	36cd8 <Mat_VarRead5+0xe1c>
   36d58:	ldr	r3, [r7, #20]
   36d5c:	mov	r2, r6
   36d60:	ldr	r1, [sl, #4]
   36d64:	mov	r0, r5
   36d68:	bl	11270 <ReadInt32Data>
   36d6c:	b	36cd8 <Mat_VarRead5+0xe1c>
   36d70:	ldr	r3, [r7, #20]
   36d74:	mov	r2, r6
   36d78:	ldr	r1, [sl, #4]
   36d7c:	mov	r0, r5
   36d80:	bl	11750 <ReadUInt32Data>
   36d84:	b	36cd8 <Mat_VarRead5+0xe1c>
   36d88:	ldr	r3, [r7, #20]
   36d8c:	mov	r2, r6
   36d90:	ldr	r1, [sl, #4]
   36d94:	mov	r0, r5
   36d98:	bl	11c30 <ReadInt16Data>
   36d9c:	b	36cd8 <Mat_VarRead5+0xe1c>
   36da0:	ldr	r3, [r7, #20]
   36da4:	mov	r2, r6
   36da8:	ldr	r1, [sl, #4]
   36dac:	mov	r0, r5
   36db0:	bl	12138 <ReadUInt16Data>
   36db4:	b	36cd8 <Mat_VarRead5+0xe1c>
   36db8:	ldr	r3, [r7, #20]
   36dbc:	mov	r2, r6
   36dc0:	ldr	r1, [sl, #4]
   36dc4:	mov	r0, r5
   36dc8:	bl	12640 <ReadInt8Data>
   36dcc:	b	36cd8 <Mat_VarRead5+0xe1c>
   36dd0:	ldr	r3, [r7, #20]
   36dd4:	mov	r2, r6
   36dd8:	ldr	r1, [sl, #4]
   36ddc:	mov	r0, r5
   36de0:	bl	12b00 <ReadUInt8Data>
   36de4:	b	36cd8 <Mat_VarRead5+0xe1c>
   36de8:	cmp	r3, #1
   36dec:	bne	36d08 <Mat_VarRead5+0xe4c>
   36df0:	ldr	r3, [r4, #8]
   36df4:	ldr	r1, [r4, #52]	; 0x34
   36df8:	sub	r3, r3, #1
   36dfc:	cmp	r3, #12
   36e00:	addls	pc, pc, r3, lsl #2
   36e04:	b	36e90 <Mat_VarRead5+0xfd4>
   36e08:	b	3707c <Mat_VarRead5+0x11c0>
   36e0c:	b	3709c <Mat_VarRead5+0x11e0>
   36e10:	b	3703c <Mat_VarRead5+0x1180>
   36e14:	b	3705c <Mat_VarRead5+0x11a0>
   36e18:	b	36ffc <Mat_VarRead5+0x1140>
   36e1c:	b	3701c <Mat_VarRead5+0x1160>
   36e20:	b	36f9c <Mat_VarRead5+0x10e0>
   36e24:	b	36e90 <Mat_VarRead5+0xfd4>
   36e28:	b	36e70 <Mat_VarRead5+0xfb4>
   36e2c:	b	36e90 <Mat_VarRead5+0xfd4>
   36e30:	b	36e90 <Mat_VarRead5+0xfd4>
   36e34:	b	36fbc <Mat_VarRead5+0x1100>
   36e38:	b	36fdc <Mat_VarRead5+0x1120>
   36e3c:	.word	0x0000a84d
   36e40:	.word	0x0000a8db
   36e44:	.word	0x0000a988
   36e48:	.word	0x0000a5bf
   36e4c:	.word	0x0000a4eb
   36e50:	.word	0x0000a3b9
   36e54:	.word	0x0000a37c
   36e58:	.word	0x0000a0ec
   36e5c:	.word	0x00009fa0
   36e60:	.word	0x00009ee2
   36e64:	.word	0x000096f5
   36e68:	.word	0x000093ae
   36e6c:	.word	0x00009217
   36e70:	ldr	r3, [r7, #20]
   36e74:	mov	r0, r5
   36e78:	str	r3, [sp]
   36e7c:	mov	r3, r9
   36e80:	ldr	r2, [sl]
   36e84:	ldr	r1, [r1, #12]
   36e88:	bl	f2ec <ReadCompressedDoubleData>
   36e8c:	mov	r6, r0
   36e90:	cmp	fp, #0
   36e94:	addne	r6, r6, #4
   36e98:	ands	r2, r6, #7
   36e9c:	beq	36ec0 <Mat_VarRead5+0x1004>
   36ea0:	rsbs	r6, r6, #0
   36ea4:	ldr	r3, [r4, #52]	; 0x34
   36ea8:	and	r6, r6, #7
   36eac:	rsbpl	r2, r6, #0
   36eb0:	rsb	r2, r2, #8
   36eb4:	ldr	r1, [r3, #12]
   36eb8:	mov	r0, r5
   36ebc:	bl	20e4 <InflateSkip>
   36ec0:	ldr	r3, [r4, #52]	; 0x34
   36ec4:	mov	r2, r8
   36ec8:	mov	r0, r5
   36ecc:	ldr	r1, [r3, #12]
   36ed0:	bl	2f24 <InflateDataType>
   36ed4:	ldr	r3, [sp, #12]
   36ed8:	cmp	r3, #0
   36edc:	beq	36ee8 <Mat_VarRead5+0x102c>
   36ee0:	mov	r0, r8
   36ee4:	bl	1a80 <Mat_uint32Swap>
   36ee8:	ldr	r0, [sp, #32]
   36eec:	lsr	r2, r0, #16
   36ef0:	uxtb	r3, r0
   36ef4:	lsl	r2, r2, #16
   36ef8:	cmp	r3, #24
   36efc:	movhi	r3, #0
   36f00:	cmp	r2, #0
   36f04:	movne	r2, #1
   36f08:	lsrne	r0, r0, #16
   36f0c:	strne	r2, [sp, #8]
   36f10:	bne	36f54 <Mat_VarRead5+0x1098>
   36f14:	ldr	r1, [r4, #52]	; 0x34
   36f18:	add	r8, r8, #4
   36f1c:	mov	r2, r8
   36f20:	ldr	r1, [r1, #12]
   36f24:	mov	r0, r5
   36f28:	str	r3, [sp, #20]
   36f2c:	bl	2f24 <InflateDataType>
   36f30:	ldr	r3, [sp, #12]
   36f34:	cmp	r3, #0
   36f38:	ldr	r3, [sp, #20]
   36f3c:	beq	36f50 <Mat_VarRead5+0x1094>
   36f40:	mov	r0, r8
   36f44:	str	r3, [sp, #12]
   36f48:	bl	1a80 <Mat_uint32Swap>
   36f4c:	ldr	r3, [sp, #12]
   36f50:	ldr	r0, [sp, #36]	; 0x24
   36f54:	ldr	r2, [r4, #8]
   36f58:	sub	r2, r2, #1
   36f5c:	cmp	r2, #12
   36f60:	addls	pc, pc, r2, lsl #2
   36f64:	b	370d8 <Mat_VarRead5+0x121c>
   36f68:	b	371f0 <Mat_VarRead5+0x1334>
   36f6c:	b	37210 <Mat_VarRead5+0x1354>
   36f70:	b	371b0 <Mat_VarRead5+0x12f4>
   36f74:	b	371d0 <Mat_VarRead5+0x1314>
   36f78:	b	37170 <Mat_VarRead5+0x12b4>
   36f7c:	b	37190 <Mat_VarRead5+0x12d4>
   36f80:	b	37110 <Mat_VarRead5+0x1254>
   36f84:	b	370d8 <Mat_VarRead5+0x121c>
   36f88:	b	370bc <Mat_VarRead5+0x1200>
   36f8c:	b	370d8 <Mat_VarRead5+0x121c>
   36f90:	b	370d8 <Mat_VarRead5+0x121c>
   36f94:	b	37130 <Mat_VarRead5+0x1274>
   36f98:	b	37150 <Mat_VarRead5+0x1294>
   36f9c:	ldr	r3, [r7, #20]
   36fa0:	mov	r0, r5
   36fa4:	str	r3, [sp]
   36fa8:	mov	r3, r9
   36fac:	ldr	r2, [sl]
   36fb0:	ldr	r1, [r1, #12]
   36fb4:	bl	10314 <ReadCompressedSingleData>
   36fb8:	b	36e8c <Mat_VarRead5+0xfd0>
   36fbc:	ldr	r3, [r7, #20]
   36fc0:	mov	r0, r5
   36fc4:	str	r3, [sp]
   36fc8:	mov	r3, r9
   36fcc:	ldr	r2, [sl]
   36fd0:	ldr	r1, [r1, #12]
   36fd4:	bl	10834 <ReadCompressedInt64Data>
   36fd8:	b	36e8c <Mat_VarRead5+0xfd0>
   36fdc:	ldr	r3, [r7, #20]
   36fe0:	mov	r0, r5
   36fe4:	str	r3, [sp]
   36fe8:	mov	r3, r9
   36fec:	ldr	r2, [sl]
   36ff0:	ldr	r1, [r1, #12]
   36ff4:	bl	10d64 <ReadCompressedUInt64Data>
   36ff8:	b	36e8c <Mat_VarRead5+0xfd0>
   36ffc:	ldr	r3, [r7, #20]
   37000:	mov	r0, r5
   37004:	str	r3, [sp]
   37008:	mov	r3, r9
   3700c:	ldr	r2, [sl]
   37010:	ldr	r1, [r1, #12]
   37014:	bl	11294 <ReadCompressedInt32Data>
   37018:	b	36e8c <Mat_VarRead5+0xfd0>
   3701c:	ldr	r3, [r7, #20]
   37020:	mov	r0, r5
   37024:	str	r3, [sp]
   37028:	mov	r3, r9
   3702c:	ldr	r2, [sl]
   37030:	ldr	r1, [r1, #12]
   37034:	bl	11774 <ReadCompressedUInt32Data>
   37038:	b	36e8c <Mat_VarRead5+0xfd0>
   3703c:	ldr	r3, [r7, #20]
   37040:	mov	r0, r5
   37044:	str	r3, [sp]
   37048:	mov	r3, r9
   3704c:	ldr	r2, [sl]
   37050:	ldr	r1, [r1, #12]
   37054:	bl	11c54 <ReadCompressedInt16Data>
   37058:	b	36e8c <Mat_VarRead5+0xfd0>
   3705c:	ldr	r3, [r7, #20]
   37060:	mov	r0, r5
   37064:	str	r3, [sp]
   37068:	mov	r3, r9
   3706c:	ldr	r2, [sl]
   37070:	ldr	r1, [r1, #12]
   37074:	bl	1215c <ReadCompressedUInt16Data>
   37078:	b	36e8c <Mat_VarRead5+0xfd0>
   3707c:	ldr	r3, [r7, #20]
   37080:	mov	r0, r5
   37084:	str	r3, [sp]
   37088:	mov	r3, r9
   3708c:	ldr	r2, [sl]
   37090:	ldr	r1, [r1, #12]
   37094:	bl	12664 <ReadCompressedInt8Data>
   37098:	b	36e8c <Mat_VarRead5+0xfd0>
   3709c:	ldr	r3, [r7, #20]
   370a0:	mov	r0, r5
   370a4:	str	r3, [sp]
   370a8:	mov	r3, r9
   370ac:	ldr	r2, [sl]
   370b0:	ldr	r1, [r1, #12]
   370b4:	bl	12b24 <ReadCompressedUInt8Data>
   370b8:	b	36e8c <Mat_VarRead5+0xfd0>
   370bc:	ldr	r1, [r4, #52]	; 0x34
   370c0:	ldr	r2, [r7, #20]
   370c4:	mov	r0, r5
   370c8:	str	r2, [sp]
   370cc:	ldr	r2, [sl, #4]
   370d0:	ldr	r1, [r1, #12]
   370d4:	bl	f2ec <ReadCompressedDoubleData>
   370d8:	ldr	r3, [sp, #8]
   370dc:	cmp	r3, #0
   370e0:	addne	r0, r0, #4
   370e4:	ands	r2, r0, #7
   370e8:	beq	36d08 <Mat_VarRead5+0xe4c>
   370ec:	rsbs	r0, r0, #0
   370f0:	ldr	r3, [r4, #52]	; 0x34
   370f4:	and	r0, r0, #7
   370f8:	rsbpl	r2, r0, #0
   370fc:	rsb	r2, r2, #8
   37100:	ldr	r1, [r3, #12]
   37104:	mov	r0, r5
   37108:	bl	20e4 <InflateSkip>
   3710c:	b	36d08 <Mat_VarRead5+0xe4c>
   37110:	ldr	r1, [r4, #52]	; 0x34
   37114:	ldr	r2, [r7, #20]
   37118:	mov	r0, r5
   3711c:	str	r2, [sp]
   37120:	ldr	r2, [sl, #4]
   37124:	ldr	r1, [r1, #12]
   37128:	bl	10314 <ReadCompressedSingleData>
   3712c:	b	370d8 <Mat_VarRead5+0x121c>
   37130:	ldr	r1, [r4, #52]	; 0x34
   37134:	ldr	r2, [r7, #20]
   37138:	mov	r0, r5
   3713c:	str	r2, [sp]
   37140:	ldr	r2, [sl, #4]
   37144:	ldr	r1, [r1, #12]
   37148:	bl	10834 <ReadCompressedInt64Data>
   3714c:	b	370d8 <Mat_VarRead5+0x121c>
   37150:	ldr	r1, [r4, #52]	; 0x34
   37154:	ldr	r2, [r7, #20]
   37158:	mov	r0, r5
   3715c:	str	r2, [sp]
   37160:	ldr	r2, [sl, #4]
   37164:	ldr	r1, [r1, #12]
   37168:	bl	10d64 <ReadCompressedUInt64Data>
   3716c:	b	370d8 <Mat_VarRead5+0x121c>
   37170:	ldr	r1, [r4, #52]	; 0x34
   37174:	ldr	r2, [r7, #20]
   37178:	mov	r0, r5
   3717c:	str	r2, [sp]
   37180:	ldr	r2, [sl, #4]
   37184:	ldr	r1, [r1, #12]
   37188:	bl	11294 <ReadCompressedInt32Data>
   3718c:	b	370d8 <Mat_VarRead5+0x121c>
   37190:	ldr	r1, [r4, #52]	; 0x34
   37194:	ldr	r2, [r7, #20]
   37198:	mov	r0, r5
   3719c:	str	r2, [sp]
   371a0:	ldr	r2, [sl, #4]
   371a4:	ldr	r1, [r1, #12]
   371a8:	bl	11774 <ReadCompressedUInt32Data>
   371ac:	b	370d8 <Mat_VarRead5+0x121c>
   371b0:	ldr	r1, [r4, #52]	; 0x34
   371b4:	ldr	r2, [r7, #20]
   371b8:	mov	r0, r5
   371bc:	str	r2, [sp]
   371c0:	ldr	r2, [sl, #4]
   371c4:	ldr	r1, [r1, #12]
   371c8:	bl	11c54 <ReadCompressedInt16Data>
   371cc:	b	370d8 <Mat_VarRead5+0x121c>
   371d0:	ldr	r1, [r4, #52]	; 0x34
   371d4:	ldr	r2, [r7, #20]
   371d8:	mov	r0, r5
   371dc:	str	r2, [sp]
   371e0:	ldr	r2, [sl, #4]
   371e4:	ldr	r1, [r1, #12]
   371e8:	bl	1215c <ReadCompressedUInt16Data>
   371ec:	b	370d8 <Mat_VarRead5+0x121c>
   371f0:	ldr	r1, [r4, #52]	; 0x34
   371f4:	ldr	r2, [r7, #20]
   371f8:	mov	r0, r5
   371fc:	str	r2, [sp]
   37200:	ldr	r2, [sl, #4]
   37204:	ldr	r1, [r1, #12]
   37208:	bl	12664 <ReadCompressedInt8Data>
   3720c:	b	370d8 <Mat_VarRead5+0x121c>
   37210:	ldr	r1, [r4, #52]	; 0x34
   37214:	ldr	r2, [r7, #20]
   37218:	mov	r0, r5
   3721c:	str	r2, [sp]
   37220:	ldr	r2, [sl, #4]
   37224:	ldr	r1, [r1, #12]
   37228:	bl	12b24 <ReadCompressedUInt8Data>
   3722c:	b	370d8 <Mat_VarRead5+0x121c>
   37230:	bl	1600 <Mat_SizeOf@plt>
   37234:	mul	r0, r0, sl
   37238:	bl	15ac <malloc@plt>
   3723c:	cmp	r0, #0
   37240:	mov	r1, r0
   37244:	str	r0, [r7, #24]
   37248:	ldreq	r0, [pc, #-1004]	; 36e64 <Mat_VarRead5+0xfa8>
   3724c:	addeq	r0, pc, r0
   37250:	beq	36334 <Mat_VarRead5+0x478>
   37254:	ldr	r3, [r4, #48]	; 0x30
   37258:	cmp	r3, #0
   3725c:	bne	37390 <Mat_VarRead5+0x14d4>
   37260:	ldr	r3, [r4, #8]
   37264:	sub	r3, r3, #1
   37268:	cmp	r3, #12
   3726c:	addls	pc, pc, r3, lsl #2
   37270:	b	372bc <Mat_VarRead5+0x1400>
   37274:	b	37368 <Mat_VarRead5+0x14ac>
   37278:	b	3737c <Mat_VarRead5+0x14c0>
   3727c:	b	37340 <Mat_VarRead5+0x1484>
   37280:	b	37354 <Mat_VarRead5+0x1498>
   37284:	b	37318 <Mat_VarRead5+0x145c>
   37288:	b	3732c <Mat_VarRead5+0x1470>
   3728c:	b	372dc <Mat_VarRead5+0x1420>
   37290:	b	372bc <Mat_VarRead5+0x1400>
   37294:	b	372a8 <Mat_VarRead5+0x13ec>
   37298:	b	372bc <Mat_VarRead5+0x1400>
   3729c:	b	372bc <Mat_VarRead5+0x1400>
   372a0:	b	372f0 <Mat_VarRead5+0x1434>
   372a4:	b	37304 <Mat_VarRead5+0x1448>
   372a8:	ldr	r3, [r7, #20]
   372ac:	mov	r2, r9
   372b0:	mov	r0, r5
   372b4:	bl	f2c8 <ReadDoubleData>
   372b8:	mov	r6, r0
   372bc:	cmp	fp, #0
   372c0:	addne	r6, r6, #4
   372c4:	ands	r1, r6, #7
   372c8:	beq	35fd0 <Mat_VarRead5+0x114>
   372cc:	rsbs	r6, r6, #0
   372d0:	and	r6, r6, #7
   372d4:	rsbpl	r1, r6, #0
   372d8:	b	363ac <Mat_VarRead5+0x4f0>
   372dc:	ldr	r3, [r7, #20]
   372e0:	mov	r2, r9
   372e4:	mov	r0, r5
   372e8:	bl	102f0 <ReadSingleData>
   372ec:	b	372b8 <Mat_VarRead5+0x13fc>
   372f0:	ldr	r3, [r7, #20]
   372f4:	mov	r2, r9
   372f8:	mov	r0, r5
   372fc:	bl	10810 <ReadInt64Data>
   37300:	b	372b8 <Mat_VarRead5+0x13fc>
   37304:	ldr	r3, [r7, #20]
   37308:	mov	r2, r9
   3730c:	mov	r0, r5
   37310:	bl	10d40 <ReadUInt64Data>
   37314:	b	372b8 <Mat_VarRead5+0x13fc>
   37318:	ldr	r3, [r7, #20]
   3731c:	mov	r2, r9
   37320:	mov	r0, r5
   37324:	bl	11270 <ReadInt32Data>
   37328:	b	372b8 <Mat_VarRead5+0x13fc>
   3732c:	ldr	r3, [r7, #20]
   37330:	mov	r2, r9
   37334:	mov	r0, r5
   37338:	bl	11750 <ReadUInt32Data>
   3733c:	b	372b8 <Mat_VarRead5+0x13fc>
   37340:	ldr	r3, [r7, #20]
   37344:	mov	r2, r9
   37348:	mov	r0, r5
   3734c:	bl	11c30 <ReadInt16Data>
   37350:	b	372b8 <Mat_VarRead5+0x13fc>
   37354:	ldr	r3, [r7, #20]
   37358:	mov	r2, r9
   3735c:	mov	r0, r5
   37360:	bl	12138 <ReadUInt16Data>
   37364:	b	372b8 <Mat_VarRead5+0x13fc>
   37368:	ldr	r3, [r7, #20]
   3736c:	mov	r2, r9
   37370:	mov	r0, r5
   37374:	bl	12640 <ReadInt8Data>
   37378:	b	372b8 <Mat_VarRead5+0x13fc>
   3737c:	ldr	r3, [r7, #20]
   37380:	mov	r2, r9
   37384:	mov	r0, r5
   37388:	bl	12b00 <ReadUInt8Data>
   3738c:	b	372b8 <Mat_VarRead5+0x13fc>
   37390:	cmp	r3, #1
   37394:	bne	35fd0 <Mat_VarRead5+0x114>
   37398:	ldr	r3, [r4, #8]
   3739c:	sub	r3, r3, #1
   373a0:	cmp	r3, #12
   373a4:	addls	pc, pc, r3, lsl #2
   373a8:	b	37404 <Mat_VarRead5+0x1548>
   373ac:	b	37520 <Mat_VarRead5+0x1664>
   373b0:	b	37544 <Mat_VarRead5+0x1688>
   373b4:	b	374d8 <Mat_VarRead5+0x161c>
   373b8:	b	374fc <Mat_VarRead5+0x1640>
   373bc:	b	37490 <Mat_VarRead5+0x15d4>
   373c0:	b	374b4 <Mat_VarRead5+0x15f8>
   373c4:	b	37424 <Mat_VarRead5+0x1568>
   373c8:	b	37404 <Mat_VarRead5+0x1548>
   373cc:	b	373e0 <Mat_VarRead5+0x1524>
   373d0:	b	37404 <Mat_VarRead5+0x1548>
   373d4:	b	37404 <Mat_VarRead5+0x1548>
   373d8:	b	37448 <Mat_VarRead5+0x158c>
   373dc:	b	3746c <Mat_VarRead5+0x15b0>
   373e0:	ldr	r0, [r4, #52]	; 0x34
   373e4:	ldr	r3, [r7, #20]
   373e8:	mov	r2, r1
   373ec:	str	r3, [sp]
   373f0:	mov	r3, r9
   373f4:	ldr	r1, [r0, #12]
   373f8:	mov	r0, r5
   373fc:	bl	f2ec <ReadCompressedDoubleData>
   37400:	mov	r6, r0
   37404:	cmp	fp, #0
   37408:	addne	r6, r6, #4
   3740c:	ands	r2, r6, #7
   37410:	beq	35fd0 <Mat_VarRead5+0x114>
   37414:	rsbs	r6, r6, #0
   37418:	and	r6, r6, #7
   3741c:	rsbpl	r2, r6, #0
   37420:	b	36408 <Mat_VarRead5+0x54c>
   37424:	ldr	r0, [r4, #52]	; 0x34
   37428:	ldr	r3, [r7, #20]
   3742c:	mov	r2, r1
   37430:	str	r3, [sp]
   37434:	mov	r3, r9
   37438:	ldr	r1, [r0, #12]
   3743c:	mov	r0, r5
   37440:	bl	10314 <ReadCompressedSingleData>
   37444:	b	37400 <Mat_VarRead5+0x1544>
   37448:	ldr	r0, [r4, #52]	; 0x34
   3744c:	ldr	r3, [r7, #20]
   37450:	mov	r2, r1
   37454:	str	r3, [sp]
   37458:	mov	r3, r9
   3745c:	ldr	r1, [r0, #12]
   37460:	mov	r0, r5
   37464:	bl	10834 <ReadCompressedInt64Data>
   37468:	b	37400 <Mat_VarRead5+0x1544>
   3746c:	ldr	r0, [r4, #52]	; 0x34
   37470:	ldr	r3, [r7, #20]
   37474:	mov	r2, r1
   37478:	str	r3, [sp]
   3747c:	mov	r3, r9
   37480:	ldr	r1, [r0, #12]
   37484:	mov	r0, r5
   37488:	bl	10d64 <ReadCompressedUInt64Data>
   3748c:	b	37400 <Mat_VarRead5+0x1544>
   37490:	ldr	r0, [r4, #52]	; 0x34
   37494:	ldr	r3, [r7, #20]
   37498:	mov	r2, r1
   3749c:	str	r3, [sp]
   374a0:	mov	r3, r9
   374a4:	ldr	r1, [r0, #12]
   374a8:	mov	r0, r5
   374ac:	bl	11294 <ReadCompressedInt32Data>
   374b0:	b	37400 <Mat_VarRead5+0x1544>
   374b4:	ldr	r0, [r4, #52]	; 0x34
   374b8:	ldr	r3, [r7, #20]
   374bc:	mov	r2, r1
   374c0:	str	r3, [sp]
   374c4:	mov	r3, r9
   374c8:	ldr	r1, [r0, #12]
   374cc:	mov	r0, r5
   374d0:	bl	11774 <ReadCompressedUInt32Data>
   374d4:	b	37400 <Mat_VarRead5+0x1544>
   374d8:	ldr	r0, [r4, #52]	; 0x34
   374dc:	ldr	r3, [r7, #20]
   374e0:	mov	r2, r1
   374e4:	str	r3, [sp]
   374e8:	mov	r3, r9
   374ec:	ldr	r1, [r0, #12]
   374f0:	mov	r0, r5
   374f4:	bl	11c54 <ReadCompressedInt16Data>
   374f8:	b	37400 <Mat_VarRead5+0x1544>
   374fc:	ldr	r0, [r4, #52]	; 0x34
   37500:	ldr	r3, [r7, #20]
   37504:	mov	r2, r1
   37508:	str	r3, [sp]
   3750c:	mov	r3, r9
   37510:	ldr	r1, [r0, #12]
   37514:	mov	r0, r5
   37518:	bl	1215c <ReadCompressedUInt16Data>
   3751c:	b	37400 <Mat_VarRead5+0x1544>
   37520:	ldr	r0, [r4, #52]	; 0x34
   37524:	ldr	r3, [r7, #20]
   37528:	mov	r2, r1
   3752c:	str	r3, [sp]
   37530:	mov	r3, r9
   37534:	ldr	r1, [r0, #12]
   37538:	mov	r0, r5
   3753c:	bl	12664 <ReadCompressedInt8Data>
   37540:	b	37400 <Mat_VarRead5+0x1544>
   37544:	ldr	r0, [r4, #52]	; 0x34
   37548:	ldr	r3, [r7, #20]
   3754c:	mov	r2, r1
   37550:	str	r3, [sp]
   37554:	mov	r3, r9
   37558:	ldr	r1, [r0, #12]
   3755c:	mov	r0, r5
   37560:	bl	12b24 <ReadCompressedUInt8Data>
   37564:	b	37400 <Mat_VarRead5+0x1544>
   37568:	ldr	r0, [r4]
   3756c:	cmp	r0, #0
   37570:	beq	375f4 <Mat_VarRead5+0x1738>
   37574:	ldr	r1, [r4, #12]
   37578:	cmp	r1, #0
   3757c:	beq	375f4 <Mat_VarRead5+0x1738>
   37580:	bl	3f8ec <__udivsi3>
   37584:	ldr	r7, [r4, #40]	; 0x28
   37588:	cmp	r7, #0
   3758c:	movne	r6, #0
   37590:	mov	r8, r0
   37594:	bne	375b0 <Mat_VarRead5+0x16f4>
   37598:	mov	r3, #24
   3759c:	b	3603c <Mat_VarRead5+0x180>
   375a0:	ldr	r1, [r7, r6, lsl #2]
   375a4:	mov	r0, r5
   375a8:	bl	35ebc <Mat_VarRead5>
   375ac:	add	r6, r6, #1
   375b0:	cmp	r6, r8
   375b4:	bne	375a0 <Mat_VarRead5+0x16e4>
   375b8:	b	37598 <Mat_VarRead5+0x16dc>
   375bc:	ldr	r0, [pc, #-1884]	; 36e68 <Mat_VarRead5+0xfac>
   375c0:	add	r0, pc, r0
   375c4:	b	364ac <Mat_VarRead5+0x5f0>
   375c8:	ldr	r3, [sp, #24]
   375cc:	ldr	r2, [r6]
   375d0:	mov	r1, r4
   375d4:	mov	r0, r5
   375d8:	bl	1badc <Mat_VarReadNumeric5>
   375dc:	ldr	r3, [sp, #24]
   375e0:	ldr	r2, [r6, #4]
   375e4:	mov	r1, r4
   375e8:	mov	r0, r5
   375ec:	bl	1badc <Mat_VarReadNumeric5>
   375f0:	str	r6, [r4, #40]	; 0x28
   375f4:	mov	r2, #0
   375f8:	ldr	r1, [sp, #16]
   375fc:	ldr	r0, [r5]
   37600:	bl	1714 <fseek@plt>
   37604:	b	35f20 <Mat_VarRead5+0x64>
   37608:	bl	3bf40 <SafeMul>
   3760c:	ldr	r0, [r4]
   37610:	bl	15ac <malloc@plt>
   37614:	cmp	r0, #0
   37618:	mov	r2, r0
   3761c:	str	r0, [r4, #40]	; 0x28
   37620:	ldreq	r0, [pc, #-1980]	; 36e6c <Mat_VarRead5+0xfb0>
   37624:	addeq	r0, pc, r0
   37628:	beq	36014 <Mat_VarRead5+0x158>
   3762c:	ldr	r3, [sp, #24]
   37630:	mov	r1, r4
   37634:	mov	r0, r5
   37638:	bl	1badc <Mat_VarReadNumeric5>
   3763c:	b	375f4 <Mat_VarRead5+0x1738>

00037640 <ReadNextStructField>:
   37640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37644:	sub	sp, sp, #116	; 0x74
   37648:	mov	r8, r1
   3764c:	add	r1, sp, #112	; 0x70
   37650:	mov	r3, #1
   37654:	str	r3, [r1, #-76]!	; 0xffffffb4
   37658:	mov	r9, r0
   3765c:	mov	r0, r8
   37660:	bl	3bee0 <SafeMulDims>
   37664:	subs	r1, r0, #0
   37668:	beq	37688 <ReadNextStructField+0x48>
   3766c:	ldr	r0, [pc, #3064]	; 3826c <ReadNextStructField+0xc2c>
   37670:	mov	r4, #0
   37674:	add	r0, pc, r0
   37678:	bl	1690 <Mat_Critical@plt>
   3767c:	mov	r0, r4
   37680:	add	sp, sp, #116	; 0x74
   37684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37688:	ldr	r3, [r8, #48]	; 0x30
   3768c:	add	sl, sp, #48	; 0x30
   37690:	cmp	r3, #1
   37694:	ldr	r5, [pc, #3028]	; 38270 <ReadNextStructField+0xc30>
   37698:	bne	37dbc <ReadNextStructField+0x77c>
   3769c:	mov	r2, #64	; 0x40
   376a0:	mov	r0, sl
   376a4:	bl	166c <memset@plt>
   376a8:	mov	r2, sl
   376ac:	mov	r1, r8
   376b0:	mov	r0, r9
   376b4:	bl	31fc <InflateFieldNameLength>
   376b8:	ldr	r3, [r9, #20]
   376bc:	cmp	r3, #0
   376c0:	mov	r4, r0
   376c4:	beq	376d8 <ReadNextStructField+0x98>
   376c8:	mov	r0, sl
   376cc:	bl	1a80 <Mat_uint32Swap>
   376d0:	add	r0, sl, #4
   376d4:	bl	1a80 <Mat_uint32Swap>
   376d8:	ldr	r3, [sp, #48]	; 0x30
   376dc:	and	r3, r3, r5
   376e0:	cmp	r3, #5
   376e4:	bne	377d8 <ReadNextStructField+0x198>
   376e8:	mov	r2, sl
   376ec:	mov	r1, r8
   376f0:	mov	r0, r9
   376f4:	ldr	r6, [sp, #52]	; 0x34
   376f8:	bl	3360 <InflateFieldNamesTag>
   376fc:	ldr	r3, [r9, #20]
   37700:	cmp	r3, #0
   37704:	add	r4, r4, r0
   37708:	beq	3771c <ReadNextStructField+0xdc>
   3770c:	mov	r0, sl
   37710:	bl	1a80 <Mat_uint32Swap>
   37714:	add	r0, sl, #4
   37718:	bl	1a80 <Mat_uint32Swap>
   3771c:	ldr	r0, [sp, #52]	; 0x34
   37720:	mov	r1, r6
   37724:	bl	3f8ec <__udivsi3>
   37728:	mov	r3, #4
   3772c:	str	r3, [r8, #12]
   37730:	mov	r5, r0
   37734:	mul	r0, r0, r6
   37738:	ands	r7, r0, #7
   3773c:	rsbne	r7, r7, #8
   37740:	cmp	r5, #0
   37744:	ldreq	r3, [r8, #52]	; 0x34
   37748:	streq	r5, [r3, #4]
   3774c:	streq	r5, [r3, #8]
   37750:	beq	377b4 <ReadNextStructField+0x174>
   37754:	add	r0, r7, r0
   37758:	bl	15ac <malloc@plt>
   3775c:	subs	r3, r0, #0
   37760:	str	r3, [sp, #8]
   37764:	beq	377b4 <ReadNextStructField+0x174>
   37768:	mov	r2, r0
   3776c:	stm	sp, {r6, r7}
   37770:	mov	r3, r5
   37774:	mov	r1, r8
   37778:	mov	r0, r9
   3777c:	bl	34c4 <InflateFieldNames>
   37780:	ldr	r7, [r8, #52]	; 0x34
   37784:	mov	r1, #4
   37788:	str	r5, [r7, #4]
   3778c:	add	r4, r4, r0
   37790:	mov	r0, r5
   37794:	bl	1468 <calloc@plt>
   37798:	cmp	r0, #0
   3779c:	str	r0, [r7, #8]
   377a0:	ldrne	fp, [sp, #8]
   377a4:	movne	r7, #0
   377a8:	bne	377e8 <ReadNextStructField+0x1a8>
   377ac:	ldr	r0, [sp, #8]
   377b0:	bl	14e0 <free@plt>
   377b4:	mov	r2, r5
   377b8:	ldr	r1, [sp, #36]	; 0x24
   377bc:	add	r0, sp, #40	; 0x28
   377c0:	bl	3bf40 <SafeMul>
   377c4:	cmp	r0, #0
   377c8:	beq	37848 <ReadNextStructField+0x208>
   377cc:	ldr	r0, [pc, #2720]	; 38274 <ReadNextStructField+0xc34>
   377d0:	add	r0, pc, r0
   377d4:	b	377e0 <ReadNextStructField+0x1a0>
   377d8:	ldr	r0, [pc, #2712]	; 38278 <ReadNextStructField+0xc38>
   377dc:	add	r0, pc, r0
   377e0:	bl	1690 <Mat_Critical@plt>
   377e4:	b	3767c <ReadNextStructField+0x3c>
   377e8:	ldr	r3, [r8, #52]	; 0x34
   377ec:	mov	r0, r6
   377f0:	str	r3, [sp, #12]
   377f4:	ldr	r2, [r3, #8]
   377f8:	str	r2, [sp, #16]
   377fc:	bl	15ac <malloc@plt>
   37800:	ldr	r2, [sp, #16]
   37804:	cmp	r0, #0
   37808:	str	r0, [r2, r7, lsl #2]
   3780c:	beq	37834 <ReadNextStructField+0x1f4>
   37810:	mov	r2, r6
   37814:	mov	r1, fp
   37818:	bl	14f8 <memcpy@plt>
   3781c:	ldr	r3, [sp, #12]
   37820:	mov	r2, #0
   37824:	ldr	r3, [r3, #8]
   37828:	ldr	r3, [r3, r7, lsl #2]
   3782c:	add	r3, r3, r6
   37830:	strb	r2, [r3, #-1]
   37834:	add	r7, r7, #1
   37838:	cmp	r5, r7
   3783c:	add	fp, fp, r6
   37840:	bne	377e8 <ReadNextStructField+0x1a8>
   37844:	b	377ac <ReadNextStructField+0x16c>
   37848:	ldr	r2, [r8, #12]
   3784c:	ldr	r1, [sp, #40]	; 0x28
   37850:	mov	r0, r8
   37854:	bl	3bf40 <SafeMul>
   37858:	subs	r3, r0, #0
   3785c:	str	r3, [sp, #8]
   37860:	ldrne	r0, [pc, #2580]	; 3827c <ReadNextStructField+0xc3c>
   37864:	addne	r0, pc, r0
   37868:	bne	377e0 <ReadNextStructField+0x1a0>
   3786c:	ldr	r3, [r8]
   37870:	cmp	r3, #0
   37874:	beq	3767c <ReadNextStructField+0x3c>
   37878:	ldr	r1, [r8, #12]
   3787c:	ldr	r0, [sp, #40]	; 0x28
   37880:	bl	1468 <calloc@plt>
   37884:	cmp	r0, #0
   37888:	mov	r6, r0
   3788c:	str	r0, [r8, #40]	; 0x28
   37890:	beq	378bc <ReadNextStructField+0x27c>
   37894:	ldr	r7, [sp, #8]
   37898:	mov	fp, r0
   3789c:	mov	r1, r0
   378a0:	lsl	r3, r5, #2
   378a4:	str	r3, [sp, #12]
   378a8:	ldr	r2, [sp, #36]	; 0x24
   378ac:	cmp	r7, r2
   378b0:	bcs	378fc <ReadNextStructField+0x2bc>
   378b4:	mov	r3, #0
   378b8:	b	378e4 <ReadNextStructField+0x2a4>
   378bc:	ldr	r0, [pc, #2492]	; 38280 <ReadNextStructField+0xc40>
   378c0:	add	r0, pc, r0
   378c4:	b	377e0 <ReadNextStructField+0x1a0>
   378c8:	str	r1, [sp, #20]
   378cc:	str	r3, [sp, #16]
   378d0:	bl	1570 <Mat_VarCalloc@plt>
   378d4:	ldr	r3, [sp, #16]
   378d8:	ldr	r1, [sp, #20]
   378dc:	str	r0, [r1, r3, lsl #2]
   378e0:	add	r3, r3, #1
   378e4:	cmp	r3, r5
   378e8:	bne	378c8 <ReadNextStructField+0x288>
   378ec:	ldr	r3, [sp, #12]
   378f0:	add	r7, r7, #1
   378f4:	add	r1, r1, r3
   378f8:	b	378a8 <ReadNextStructField+0x268>
   378fc:	ldr	r3, [r8, #52]	; 0x34
   37900:	ldr	r1, [r3, #8]
   37904:	cmp	r1, #0
   37908:	movne	r3, #0
   3790c:	bne	379fc <ReadNextStructField+0x3bc>
   37910:	ldr	r3, [pc, #2412]	; 38284 <ReadNextStructField+0xc44>
   37914:	mov	r5, #0
   37918:	add	r3, pc, r3
   3791c:	str	r3, [sp, #12]
   37920:	ldr	r3, [pc, #2400]	; 38288 <ReadNextStructField+0xc48>
   37924:	add	r3, pc, r3
   37928:	str	r3, [sp, #16]
   3792c:	ldr	r3, [pc, #2392]	; 3828c <ReadNextStructField+0xc4c>
   37930:	add	r3, pc, r3
   37934:	str	r3, [sp, #20]
   37938:	ldr	r3, [sp, #40]	; 0x28
   3793c:	cmp	r5, r3
   37940:	bcs	3767c <ReadNextStructField+0x3c>
   37944:	mov	r2, sl
   37948:	mov	r1, r8
   3794c:	mov	r0, r9
   37950:	bl	24dc <InflateVarTag>
   37954:	ldr	r3, [r9, #20]
   37958:	cmp	r3, #0
   3795c:	add	r4, r4, r0
   37960:	beq	37974 <ReadNextStructField+0x334>
   37964:	mov	r0, sl
   37968:	bl	1a80 <Mat_uint32Swap>
   3796c:	add	r0, sl, #4
   37970:	bl	1a80 <Mat_uint32Swap>
   37974:	ldr	r3, [sp, #48]	; 0x30
   37978:	cmp	r3, #14
   3797c:	beq	37a0c <ReadNextStructField+0x3cc>
   37980:	ldr	r0, [fp]
   37984:	bl	15f4 <Mat_VarFree@plt>
   37988:	ldr	r0, [pc, #2304]	; 38290 <ReadNextStructField+0xc50>
   3798c:	mov	r3, #0
   37990:	str	r3, [fp]
   37994:	mov	r1, r5
   37998:	add	r0, pc, r0
   3799c:	bl	1690 <Mat_Critical@plt>
   379a0:	add	r5, r5, #1
   379a4:	add	fp, fp, #4
   379a8:	b	37938 <ReadNextStructField+0x2f8>
   379ac:	ldr	r0, [r1, r7, lsl #2]
   379b0:	cmp	r0, #0
   379b4:	beq	379e4 <ReadNextStructField+0x3a4>
   379b8:	str	r3, [sp, #20]
   379bc:	ldr	r3, [r6, r7, lsl #2]
   379c0:	str	r1, [sp, #28]
   379c4:	str	r2, [sp, #24]
   379c8:	str	r3, [sp, #16]
   379cc:	bl	1534 <strdup@plt>
   379d0:	ldr	r3, [sp, #16]
   379d4:	ldr	r1, [sp, #28]
   379d8:	ldr	r2, [sp, #24]
   379dc:	str	r0, [r3, #36]	; 0x24
   379e0:	ldr	r3, [sp, #20]
   379e4:	add	r7, r7, #1
   379e8:	cmp	r7, r5
   379ec:	bne	379ac <ReadNextStructField+0x36c>
   379f0:	ldr	r0, [sp, #12]
   379f4:	add	r3, r3, #1
   379f8:	add	r6, r6, r0
   379fc:	cmp	r3, r2
   37a00:	beq	37910 <ReadNextStructField+0x2d0>
   37a04:	mov	r7, #0
   37a08:	b	379e8 <ReadNextStructField+0x3a8>
   37a0c:	ldr	r6, [sp, #52]	; 0x34
   37a10:	ldr	r3, [fp]
   37a14:	cmp	r6, #0
   37a18:	bne	37a30 <ReadNextStructField+0x3f0>
   37a1c:	ldr	r0, [r3, #52]	; 0x34
   37a20:	bl	14e0 <free@plt>
   37a24:	ldr	r3, [fp]
   37a28:	str	r6, [r3, #52]	; 0x34
   37a2c:	b	379a0 <ReadNextStructField+0x360>
   37a30:	mov	r2, #1
   37a34:	str	r2, [r3, #48]	; 0x30
   37a38:	mov	r1, r8
   37a3c:	mov	r2, sl
   37a40:	mov	r0, r9
   37a44:	bl	2640 <InflateArrayFlags>
   37a48:	ldr	r3, [r9, #20]
   37a4c:	sub	r7, r6, #16
   37a50:	cmp	r3, #0
   37a54:	add	r4, r4, r0
   37a58:	beq	37a7c <ReadNextStructField+0x43c>
   37a5c:	mov	r0, sl
   37a60:	bl	1a80 <Mat_uint32Swap>
   37a64:	add	r0, sl, #4
   37a68:	bl	1a80 <Mat_uint32Swap>
   37a6c:	add	r0, sl, #8
   37a70:	bl	1a80 <Mat_uint32Swap>
   37a74:	add	r0, sl, #12
   37a78:	bl	1a80 <Mat_uint32Swap>
   37a7c:	ldr	r1, [sp, #48]	; 0x30
   37a80:	cmp	r1, #6
   37a84:	bne	37ce0 <ReadNextStructField+0x6a0>
   37a88:	ldr	r3, [sp, #56]	; 0x38
   37a8c:	ldr	r2, [fp]
   37a90:	and	r0, r3, #2048	; 0x800
   37a94:	uxtb	r1, r3
   37a98:	cmp	r1, #17
   37a9c:	movhi	r1, #0
   37aa0:	cmp	r1, #5
   37aa4:	str	r0, [r2, #20]
   37aa8:	and	r0, r3, #1024	; 0x400
   37aac:	and	r3, r3, #512	; 0x200
   37ab0:	str	r0, [r2, #24]
   37ab4:	str	r3, [r2, #28]
   37ab8:	ldreq	r3, [sp, #60]	; 0x3c
   37abc:	str	r1, [r2, #16]
   37ac0:	streq	r3, [r2]
   37ac4:	ldr	r3, [fp]
   37ac8:	ldr	r3, [r3, #16]
   37acc:	cmp	r3, #17
   37ad0:	beq	37cc4 <ReadNextStructField+0x684>
   37ad4:	add	r3, sp, #112	; 0x70
   37ad8:	mov	r2, #0
   37adc:	str	r2, [r3, #-68]!	; 0xffffffbc
   37ae0:	mov	r1, r8
   37ae4:	str	r3, [sp]
   37ae8:	mov	r2, sl
   37aec:	mov	r3, #64	; 0x40
   37af0:	mov	r0, r9
   37af4:	bl	27a4 <InflateRankDims>
   37af8:	ldr	r3, [sp, #44]	; 0x2c
   37afc:	sub	r6, r6, #24
   37b00:	cmp	r3, #0
   37b04:	addeq	r3, sl, #8
   37b08:	streq	r3, [sp, #44]	; 0x2c
   37b0c:	ldr	r3, [r9, #20]
   37b10:	ldreq	r7, [sp, #8]
   37b14:	movne	r7, #1
   37b18:	cmp	r3, #0
   37b1c:	add	r4, r4, r0
   37b20:	beq	37b34 <ReadNextStructField+0x4f4>
   37b24:	mov	r0, sl
   37b28:	bl	1a80 <Mat_uint32Swap>
   37b2c:	add	r0, sl, #4
   37b30:	bl	1a80 <Mat_uint32Swap>
   37b34:	ldr	r3, [sp, #48]	; 0x30
   37b38:	cmp	r3, #5
   37b3c:	bne	37ba8 <ReadNextStructField+0x568>
   37b40:	ldr	r0, [sp, #52]	; 0x34
   37b44:	ldr	r2, [fp]
   37b48:	add	r3, r0, #3
   37b4c:	cmp	r0, #0
   37b50:	sub	r6, r6, r0
   37b54:	movlt	r0, r3
   37b58:	str	r2, [sp, #24]
   37b5c:	asr	r0, r0, #2
   37b60:	str	r0, [r2, #4]
   37b64:	lsl	r0, r0, #2
   37b68:	bl	15ac <malloc@plt>
   37b6c:	ldr	r3, [r9, #20]
   37b70:	ldr	r2, [sp, #24]
   37b74:	cmp	r3, #0
   37b78:	ldreq	r1, [sp, #44]	; 0x2c
   37b7c:	str	r0, [r2, #32]
   37b80:	ldrne	r2, [sp, #8]
   37b84:	beq	37d40 <ReadNextStructField+0x700>
   37b88:	ldr	r3, [fp]
   37b8c:	ldr	r1, [r3, #4]
   37b90:	cmp	r2, r1
   37b94:	blt	37d08 <ReadNextStructField+0x6c8>
   37b98:	ldr	r3, [fp]
   37b9c:	ldr	r3, [r3, #4]
   37ba0:	tst	r3, #1
   37ba4:	subne	r6, r6, #4
   37ba8:	cmp	r7, #0
   37bac:	beq	37bb8 <ReadNextStructField+0x578>
   37bb0:	ldr	r0, [sp, #44]	; 0x2c
   37bb4:	bl	14e0 <free@plt>
   37bb8:	mov	r2, sl
   37bbc:	mov	r1, r8
   37bc0:	mov	r0, r9
   37bc4:	bl	2acc <InflateVarNameTag>
   37bc8:	ldr	r3, [fp]
   37bcc:	mov	r1, #56	; 0x38
   37bd0:	sub	r7, r6, #8
   37bd4:	ldr	r6, [r3, #52]	; 0x34
   37bd8:	add	r4, r4, r0
   37bdc:	mov	r0, #1
   37be0:	bl	1468 <calloc@plt>
   37be4:	cmp	r0, #0
   37be8:	str	r0, [r6, #12]
   37bec:	beq	37db0 <ReadNextStructField+0x770>
   37bf0:	ldr	r3, [r8, #52]	; 0x34
   37bf4:	ldr	r1, [r3, #12]
   37bf8:	bl	1624 <inflateCopy@plt>
   37bfc:	subs	r6, r0, #0
   37c00:	bne	37d9c <ReadNextStructField+0x75c>
   37c04:	ldr	r3, [fp]
   37c08:	ldr	r0, [r9]
   37c0c:	ldr	r3, [r3, #52]	; 0x34
   37c10:	str	r3, [sp, #24]
   37c14:	bl	151c <ftell@plt>
   37c18:	ldr	r1, [fp]
   37c1c:	ldr	r3, [sp, #24]
   37c20:	ldr	r2, [r1, #52]	; 0x34
   37c24:	str	r0, [r3]
   37c28:	ldr	r3, [r2]
   37c2c:	cmn	r3, #1
   37c30:	beq	37d90 <ReadNextStructField+0x750>
   37c34:	ldr	r0, [r8, #52]	; 0x34
   37c38:	ldr	r0, [r0, #12]
   37c3c:	ldr	r0, [r0, #4]
   37c40:	sub	r3, r3, r0
   37c44:	str	r3, [r2]
   37c48:	ldr	r3, [r1, #16]
   37c4c:	cmp	r3, #2
   37c50:	bne	37d50 <ReadNextStructField+0x710>
   37c54:	mov	r0, r9
   37c58:	bl	37640 <ReadNextStructField>
   37c5c:	add	r4, r4, r0
   37c60:	ldr	r3, [fp]
   37c64:	mov	r2, #0
   37c68:	ldr	r0, [r9]
   37c6c:	ldr	r3, [r3, #52]	; 0x34
   37c70:	ldr	r1, [r3]
   37c74:	bl	1714 <fseek@plt>
   37c78:	ldr	r3, [fp]
   37c7c:	ldr	r2, [r3, #52]	; 0x34
   37c80:	ldr	r1, [r2, #16]
   37c84:	cmp	r1, #0
   37c88:	bne	37c9c <ReadNextStructField+0x65c>
   37c8c:	ldr	r3, [r3, #16]
   37c90:	sub	r3, r3, #1
   37c94:	cmp	r3, #1
   37c98:	bhi	37cc4 <ReadNextStructField+0x684>
   37c9c:	ldr	r0, [r2, #12]
   37ca0:	bl	1618 <inflateEnd@plt>
   37ca4:	ldr	r3, [fp]
   37ca8:	ldr	r3, [r3, #52]	; 0x34
   37cac:	ldr	r0, [r3, #12]
   37cb0:	bl	14e0 <free@plt>
   37cb4:	ldr	r3, [fp]
   37cb8:	mov	r2, #0
   37cbc:	ldr	r3, [r3, #52]	; 0x34
   37cc0:	str	r2, [r3, #12]
   37cc4:	ldr	r3, [r8, #52]	; 0x34
   37cc8:	mov	r2, r7
   37ccc:	mov	r0, r9
   37cd0:	ldr	r1, [r3, #12]
   37cd4:	bl	20e4 <InflateSkip>
   37cd8:	add	r4, r4, r0
   37cdc:	b	379a0 <ReadNextStructField+0x360>
   37ce0:	ldr	r0, [pc, #1452]	; 38294 <ReadNextStructField+0xc54>
   37ce4:	add	r0, pc, r0
   37ce8:	bl	1690 <Mat_Critical@plt>
   37cec:	ldr	r3, [r8, #52]	; 0x34
   37cf0:	mov	r2, r7
   37cf4:	mov	r0, r9
   37cf8:	ldr	r1, [r3, #12]
   37cfc:	bl	20e4 <InflateSkip>
   37d00:	add	r4, r4, r0
   37d04:	b	37ac4 <ReadNextStructField+0x484>
   37d08:	ldr	r0, [sp, #44]	; 0x2c
   37d0c:	ldr	r3, [r3, #32]
   37d10:	add	r0, r0, r2, lsl #2
   37d14:	str	r3, [sp, #28]
   37d18:	str	r2, [sp, #24]
   37d1c:	bl	1a80 <Mat_uint32Swap>
   37d20:	ldr	r2, [sp, #24]
   37d24:	ldr	r3, [sp, #28]
   37d28:	str	r0, [r3, r2, lsl #2]
   37d2c:	add	r2, r2, #1
   37d30:	b	37b88 <ReadNextStructField+0x548>
   37d34:	ldr	ip, [r1, r3, lsl #2]
   37d38:	str	ip, [r0, r3, lsl #2]
   37d3c:	add	r3, r3, #1
   37d40:	ldr	ip, [r2, #4]
   37d44:	cmp	r3, ip
   37d48:	blt	37d34 <ReadNextStructField+0x6f4>
   37d4c:	b	37b98 <ReadNextStructField+0x558>
   37d50:	cmp	r3, #1
   37d54:	bne	37d64 <ReadNextStructField+0x724>
   37d58:	mov	r0, r9
   37d5c:	bl	382ac <ReadNextCell>
   37d60:	b	37c5c <ReadNextStructField+0x61c>
   37d64:	cmp	r7, #32768	; 0x8000
   37d68:	bgt	37c60 <ReadNextStructField+0x620>
   37d6c:	mov	r0, r9
   37d70:	bl	35ebc <Mat_VarRead5>
   37d74:	ldr	r3, [fp]
   37d78:	ldr	r2, [r3, #52]	; 0x34
   37d7c:	ldr	r3, [r3, #40]	; 0x28
   37d80:	str	r3, [r2, #16]
   37d84:	ldr	r3, [fp]
   37d88:	str	r6, [r3, #40]	; 0x28
   37d8c:	b	37c60 <ReadNextStructField+0x620>
   37d90:	ldr	r0, [sp, #20]
   37d94:	bl	1690 <Mat_Critical@plt>
   37d98:	b	37c78 <ReadNextStructField+0x638>
   37d9c:	bl	1558 <zError@plt>
   37da0:	mov	r1, r0
   37da4:	ldr	r0, [sp, #16]
   37da8:	bl	1690 <Mat_Critical@plt>
   37dac:	b	37cc4 <ReadNextStructField+0x684>
   37db0:	ldr	r0, [sp, #12]
   37db4:	bl	1690 <Mat_Critical@plt>
   37db8:	b	37cc4 <ReadNextStructField+0x684>
   37dbc:	ldr	r3, [r9]
   37dc0:	mov	r2, #2
   37dc4:	mov	r1, #4
   37dc8:	mov	r0, sl
   37dcc:	bl	1588 <fread@plt>
   37dd0:	ldr	r3, [r9, #20]
   37dd4:	cmp	r3, #0
   37dd8:	mov	r4, r0
   37ddc:	beq	37df0 <ReadNextStructField+0x7b0>
   37de0:	mov	r0, sl
   37de4:	bl	1a80 <Mat_uint32Swap>
   37de8:	add	r0, sl, #4
   37dec:	bl	1a80 <Mat_uint32Swap>
   37df0:	ldr	r3, [sp, #48]	; 0x30
   37df4:	and	r3, r3, r5
   37df8:	cmp	r3, #5
   37dfc:	bne	37f1c <ReadNextStructField+0x8dc>
   37e00:	ldr	r3, [r9]
   37e04:	mov	r2, #2
   37e08:	mov	r1, #4
   37e0c:	mov	r0, sl
   37e10:	ldr	r5, [sp, #52]	; 0x34
   37e14:	bl	1588 <fread@plt>
   37e18:	ldr	r3, [r9, #20]
   37e1c:	cmp	r3, #0
   37e20:	add	r4, r4, r0
   37e24:	beq	37e38 <ReadNextStructField+0x7f8>
   37e28:	mov	r0, sl
   37e2c:	bl	1a80 <Mat_uint32Swap>
   37e30:	add	r0, sl, #4
   37e34:	bl	1a80 <Mat_uint32Swap>
   37e38:	ldr	r0, [sp, #52]	; 0x34
   37e3c:	mov	r1, r5
   37e40:	bl	3f8ec <__udivsi3>
   37e44:	ldr	r7, [r8, #52]	; 0x34
   37e48:	mov	r1, #4
   37e4c:	str	r1, [r8, #12]
   37e50:	subs	r6, r0, #0
   37e54:	str	r6, [r7, #4]
   37e58:	streq	r6, [r7, #8]
   37e5c:	beq	37ed4 <ReadNextStructField+0x894>
   37e60:	bl	1468 <calloc@plt>
   37e64:	cmp	r0, #0
   37e68:	str	r0, [r7, #8]
   37e6c:	beq	37ed4 <ReadNextStructField+0x894>
   37e70:	mov	r7, #0
   37e74:	mov	fp, #1
   37e78:	ldr	r3, [r8, #52]	; 0x34
   37e7c:	mov	r0, r5
   37e80:	ldr	r2, [r3, #8]
   37e84:	str	r2, [sp, #8]
   37e88:	bl	15ac <malloc@plt>
   37e8c:	ldr	r2, [sp, #8]
   37e90:	cmp	r0, #0
   37e94:	str	r0, [r2, r7, lsl #2]
   37e98:	beq	37ec8 <ReadNextStructField+0x888>
   37e9c:	ldr	r3, [r9]
   37ea0:	mov	r2, r5
   37ea4:	mov	r1, fp
   37ea8:	bl	1588 <fread@plt>
   37eac:	ldr	r3, [r8, #52]	; 0x34
   37eb0:	mov	r2, #0
   37eb4:	ldr	r3, [r3, #8]
   37eb8:	ldr	r3, [r3, r7, lsl #2]
   37ebc:	add	r3, r3, r5
   37ec0:	strb	r2, [r3, #-1]
   37ec4:	add	r4, r4, r0
   37ec8:	add	r7, r7, #1
   37ecc:	cmp	r6, r7
   37ed0:	bne	37e78 <ReadNextStructField+0x838>
   37ed4:	mul	r5, r6, r5
   37ed8:	ands	r5, r5, #7
   37edc:	beq	37ef8 <ReadNextStructField+0x8b8>
   37ee0:	rsb	r5, r5, #8
   37ee4:	mov	r2, #1
   37ee8:	mov	r1, r5
   37eec:	ldr	r0, [r9]
   37ef0:	bl	1714 <fseek@plt>
   37ef4:	add	r4, r4, r5
   37ef8:	mov	r2, r6
   37efc:	ldr	r1, [sp, #36]	; 0x24
   37f00:	add	r0, sp, #40	; 0x28
   37f04:	bl	3bf40 <SafeMul>
   37f08:	cmp	r0, #0
   37f0c:	beq	37f28 <ReadNextStructField+0x8e8>
   37f10:	ldr	r0, [pc, #896]	; 38298 <ReadNextStructField+0xc58>
   37f14:	add	r0, pc, r0
   37f18:	b	377e0 <ReadNextStructField+0x1a0>
   37f1c:	ldr	r0, [pc, #888]	; 3829c <ReadNextStructField+0xc5c>
   37f20:	add	r0, pc, r0
   37f24:	b	377e0 <ReadNextStructField+0x1a0>
   37f28:	ldr	r2, [r8, #12]
   37f2c:	ldr	r1, [sp, #40]	; 0x28
   37f30:	mov	r0, r8
   37f34:	bl	3bf40 <SafeMul>
   37f38:	subs	r3, r0, #0
   37f3c:	ldrne	r0, [pc, #860]	; 382a0 <ReadNextStructField+0xc60>
   37f40:	addne	r0, pc, r0
   37f44:	bne	377e0 <ReadNextStructField+0x1a0>
   37f48:	ldr	r0, [r8]
   37f4c:	cmp	r0, #0
   37f50:	beq	3767c <ReadNextStructField+0x3c>
   37f54:	str	r3, [sp, #8]
   37f58:	bl	15ac <malloc@plt>
   37f5c:	cmp	r0, #0
   37f60:	mov	r7, r0
   37f64:	str	r0, [r8, #40]	; 0x28
   37f68:	beq	3767c <ReadNextStructField+0x3c>
   37f6c:	ldr	r3, [sp, #8]
   37f70:	lsl	fp, r6, #2
   37f74:	mov	r5, r0
   37f78:	mov	r1, r0
   37f7c:	mov	r2, r3
   37f80:	ldr	r3, [sp, #36]	; 0x24
   37f84:	cmp	r2, r3
   37f88:	str	r3, [sp, #8]
   37f8c:	bcs	37fd0 <ReadNextStructField+0x990>
   37f90:	mov	r3, #0
   37f94:	b	37fbc <ReadNextStructField+0x97c>
   37f98:	str	r1, [sp, #16]
   37f9c:	str	r3, [sp, #12]
   37fa0:	str	r2, [sp, #8]
   37fa4:	bl	1570 <Mat_VarCalloc@plt>
   37fa8:	ldr	r3, [sp, #12]
   37fac:	ldr	r1, [sp, #16]
   37fb0:	ldr	r2, [sp, #8]
   37fb4:	str	r0, [r1, r3, lsl #2]
   37fb8:	add	r3, r3, #1
   37fbc:	cmp	r3, r6
   37fc0:	bne	37f98 <ReadNextStructField+0x958>
   37fc4:	add	r2, r2, #1
   37fc8:	add	r1, r1, fp
   37fcc:	b	37f80 <ReadNextStructField+0x940>
   37fd0:	ldr	r2, [r8, #52]	; 0x34
   37fd4:	ldr	r2, [r2, #8]
   37fd8:	cmp	r2, #0
   37fdc:	movne	r1, r7
   37fe0:	movne	r3, #0
   37fe4:	bne	380d0 <ReadNextStructField+0xa90>
   37fe8:	ldr	r3, [pc, #692]	; 382a4 <ReadNextStructField+0xc64>
   37fec:	mov	r6, #0
   37ff0:	add	r3, pc, r3
   37ff4:	add	fp, sl, #4
   37ff8:	str	r3, [sp, #8]
   37ffc:	add	r3, sl, #8
   38000:	str	r3, [sp, #12]
   38004:	ldr	r3, [sp, #40]	; 0x28
   38008:	cmp	r6, r3
   3800c:	bcs	3767c <ReadNextStructField+0x3c>
   38010:	ldr	r3, [r9]
   38014:	mov	r2, #2
   38018:	mov	r1, #4
   3801c:	mov	r0, sl
   38020:	bl	1588 <fread@plt>
   38024:	ldr	r3, [r9, #20]
   38028:	cmp	r3, #0
   3802c:	add	r4, r4, r0
   38030:	beq	38044 <ReadNextStructField+0xa04>
   38034:	mov	r0, sl
   38038:	bl	1a80 <Mat_uint32Swap>
   3803c:	mov	r0, fp
   38040:	bl	1a80 <Mat_uint32Swap>
   38044:	ldr	r3, [sp, #48]	; 0x30
   38048:	ldr	r8, [sp, #52]	; 0x34
   3804c:	cmp	r3, #14
   38050:	beq	380e4 <ReadNextStructField+0xaa4>
   38054:	ldr	r0, [r7, r6, lsl #2]
   38058:	bl	15f4 <Mat_VarFree@plt>
   3805c:	mov	r3, #0
   38060:	str	r3, [r7, r6, lsl #2]
   38064:	ldr	r0, [r9]
   38068:	bl	151c <ftell@plt>
   3806c:	mov	r1, r6
   38070:	mov	r2, r0
   38074:	ldr	r0, [pc, #556]	; 382a8 <ReadNextStructField+0xc68>
   38078:	add	r0, pc, r0
   3807c:	bl	1690 <Mat_Critical@plt>
   38080:	b	3767c <ReadNextStructField+0x3c>
   38084:	ldr	r0, [r2, r8, lsl #2]
   38088:	cmp	r0, #0
   3808c:	beq	380bc <ReadNextStructField+0xa7c>
   38090:	str	r3, [sp, #20]
   38094:	ldr	r3, [r1, r8, lsl #2]
   38098:	str	r2, [sp, #24]
   3809c:	str	r1, [sp, #16]
   380a0:	str	r3, [sp, #12]
   380a4:	bl	1534 <strdup@plt>
   380a8:	ldr	r3, [sp, #12]
   380ac:	ldr	r2, [sp, #24]
   380b0:	ldr	r1, [sp, #16]
   380b4:	str	r0, [r3, #36]	; 0x24
   380b8:	ldr	r3, [sp, #20]
   380bc:	add	r8, r8, #1
   380c0:	cmp	r8, r6
   380c4:	bne	38084 <ReadNextStructField+0xa44>
   380c8:	add	r3, r3, #1
   380cc:	add	r1, r1, fp
   380d0:	ldr	r0, [sp, #8]
   380d4:	cmp	r3, r0
   380d8:	beq	37fe8 <ReadNextStructField+0x9a8>
   380dc:	mov	r8, #0
   380e0:	b	380c0 <ReadNextStructField+0xa80>
   380e4:	cmp	r8, #0
   380e8:	bne	3810c <ReadNextStructField+0xacc>
   380ec:	ldr	r3, [r5]
   380f0:	ldr	r0, [r3, #52]	; 0x34
   380f4:	bl	14e0 <free@plt>
   380f8:	ldr	r3, [r5]
   380fc:	str	r8, [r3, #52]	; 0x34
   38100:	add	r6, r6, #1
   38104:	add	r5, r5, #4
   38108:	b	38004 <ReadNextStructField+0x9c4>
   3810c:	ldr	r3, [r9]
   38110:	mov	r2, #6
   38114:	mov	r1, #4
   38118:	mov	r0, sl
   3811c:	bl	1588 <fread@plt>
   38120:	ldr	r3, [r9, #20]
   38124:	cmp	r3, #0
   38128:	add	r4, r4, r0
   3812c:	beq	38160 <ReadNextStructField+0xb20>
   38130:	mov	r0, sl
   38134:	bl	1a80 <Mat_uint32Swap>
   38138:	mov	r0, fp
   3813c:	bl	1a80 <Mat_uint32Swap>
   38140:	ldr	r0, [sp, #12]
   38144:	bl	1a80 <Mat_uint32Swap>
   38148:	add	r0, sl, #12
   3814c:	bl	1a80 <Mat_uint32Swap>
   38150:	add	r0, sl, #16
   38154:	bl	1a80 <Mat_uint32Swap>
   38158:	add	r0, sl, #20
   3815c:	bl	1a80 <Mat_uint32Swap>
   38160:	ldr	r3, [sp, #48]	; 0x30
   38164:	sub	r8, r8, #24
   38168:	cmp	r3, #6
   3816c:	bne	381ac <ReadNextStructField+0xb6c>
   38170:	ldr	r3, [sp, #56]	; 0x38
   38174:	ldr	r2, [r5]
   38178:	and	r0, r3, #2048	; 0x800
   3817c:	uxtb	r1, r3
   38180:	cmp	r1, #17
   38184:	movhi	r1, #0
   38188:	cmp	r1, #5
   3818c:	str	r0, [r2, #20]
   38190:	and	r0, r3, #1024	; 0x400
   38194:	and	r3, r3, #512	; 0x200
   38198:	str	r0, [r2, #24]
   3819c:	str	r3, [r2, #28]
   381a0:	ldreq	r3, [sp, #60]	; 0x3c
   381a4:	str	r1, [r2, #16]
   381a8:	streq	r3, [r2]
   381ac:	ldr	r3, [sp, #68]	; 0x44
   381b0:	ldr	r2, [sp, #64]	; 0x40
   381b4:	ldr	r1, [r5]
   381b8:	mov	r0, r9
   381bc:	bl	33c58 <ReadRankDims>
   381c0:	mov	r1, #1
   381c4:	ldr	r3, [r9]
   381c8:	mov	r2, #8
   381cc:	add	r4, r4, r0
   381d0:	sub	r8, r8, r0
   381d4:	mov	r0, sl
   381d8:	bl	1588 <fread@plt>
   381dc:	ldr	r3, [r5]
   381e0:	sub	r8, r8, #8
   381e4:	ldr	r3, [r3, #52]	; 0x34
   381e8:	str	r3, [sp, #16]
   381ec:	add	r4, r4, r0
   381f0:	ldr	r0, [r9]
   381f4:	bl	151c <ftell@plt>
   381f8:	ldr	r3, [sp, #16]
   381fc:	ldr	r1, [r5]
   38200:	str	r0, [r3]
   38204:	ldr	r3, [r1, #52]	; 0x34
   38208:	ldr	r3, [r3]
   3820c:	cmn	r3, #1
   38210:	beq	38260 <ReadNextStructField+0xc20>
   38214:	ldr	r3, [r1, #16]
   38218:	cmp	r3, #2
   3821c:	bne	3824c <ReadNextStructField+0xc0c>
   38220:	mov	r0, r9
   38224:	bl	37640 <ReadNextStructField>
   38228:	add	r4, r4, r0
   3822c:	ldr	r3, [r5]
   38230:	mov	r2, #0
   38234:	ldr	r0, [r9]
   38238:	ldr	r3, [r3, #52]	; 0x34
   3823c:	ldr	r1, [r3]
   38240:	add	r1, r8, r1
   38244:	bl	1714 <fseek@plt>
   38248:	b	38100 <ReadNextStructField+0xac0>
   3824c:	cmp	r3, #1
   38250:	bne	3822c <ReadNextStructField+0xbec>
   38254:	mov	r0, r9
   38258:	bl	382ac <ReadNextCell>
   3825c:	b	38228 <ReadNextStructField+0xbe8>
   38260:	ldr	r0, [sp, #8]
   38264:	bl	1690 <Mat_Critical@plt>
   38268:	b	38100 <ReadNextStructField+0xac0>
   3826c:	.word	0x000091a7
   38270:	.word	0x0000ffff
   38274:	.word	0x0000904b
   38278:	.word	0x000091ea
   3827c:	.word	0x00008fb7
   38280:	.word	0x00008f7b
   38284:	.word	0x00009146
   38288:	.word	0x0000911c
   3828c:	.word	0x00008e35
   38290:	.word	0x0000904b
   38294:	.word	0x00008d2f
   38298:	.word	0x00008907
   3829c:	.word	0x00008aa6
   382a0:	.word	0x000088db
   382a4:	.word	0x00008775
   382a8:	.word	0x000089ff

000382ac <ReadNextCell>:
   382ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   382b0:	sub	sp, sp, #108	; 0x6c
   382b4:	mov	r8, r1
   382b8:	add	r1, sp, #104	; 0x68
   382bc:	mov	r3, #1
   382c0:	mov	r6, r0
   382c4:	str	r3, [r1, #-72]!	; 0xffffffb8
   382c8:	mov	r0, r8
   382cc:	bl	3bee0 <SafeMulDims>
   382d0:	cmp	r0, #0
   382d4:	beq	382f4 <ReadNextCell+0x48>
   382d8:	ldr	r0, [pc, #2188]	; 38b6c <ReadNextCell+0x8c0>
   382dc:	add	r0, pc, r0
   382e0:	bl	1690 <Mat_Critical@plt>
   382e4:	mov	r5, #0
   382e8:	mov	r0, r5
   382ec:	add	sp, sp, #108	; 0x6c
   382f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   382f4:	mov	r2, #4
   382f8:	str	r2, [r8, #12]
   382fc:	ldr	r1, [sp, #32]
   38300:	mov	r0, r8
   38304:	bl	3bf40 <SafeMul>
   38308:	subs	r3, r0, #0
   3830c:	str	r3, [sp, #8]
   38310:	bne	382d8 <ReadNextCell+0x2c>
   38314:	ldr	r1, [r8, #12]
   38318:	ldr	r0, [sp, #32]
   3831c:	bl	1468 <calloc@plt>
   38320:	cmp	r0, #0
   38324:	mov	r4, r0
   38328:	str	r0, [r8, #40]	; 0x28
   3832c:	bne	38350 <ReadNextCell+0xa4>
   38330:	ldr	r1, [r8, #36]	; 0x24
   38334:	cmp	r1, #0
   38338:	moveq	r5, r1
   3833c:	beq	382e8 <ReadNextCell+0x3c>
   38340:	ldr	r0, [pc, #2088]	; 38b70 <ReadNextCell+0x8c4>
   38344:	add	r0, pc, r0
   38348:	bl	1690 <Mat_Critical@plt>
   3834c:	b	382e4 <ReadNextCell+0x38>
   38350:	ldr	r3, [r8, #48]	; 0x30
   38354:	cmp	r3, #1
   38358:	beq	383a4 <ReadNextCell+0xf8>
   3835c:	ldr	r9, [sp, #8]
   38360:	add	r7, sp, #40	; 0x28
   38364:	mov	r5, r9
   38368:	add	sl, r7, #4
   3836c:	ldr	r3, [sp, #32]
   38370:	cmp	r9, r3
   38374:	bcs	382e8 <ReadNextCell+0x3c>
   38378:	bl	1570 <Mat_VarCalloc@plt>
   3837c:	mov	fp, r4
   38380:	cmp	r0, #0
   38384:	str	r0, [r4], #4
   38388:	bne	3890c <ReadNextCell+0x660>
   3838c:	ldr	r0, [pc, #2016]	; 38b74 <ReadNextCell+0x8c8>
   38390:	mov	r1, r9
   38394:	add	r0, pc, r0
   38398:	bl	1690 <Mat_Critical@plt>
   3839c:	add	r9, r9, #1
   383a0:	b	3836c <ReadNextCell+0xc0>
   383a4:	add	r7, sp, #40	; 0x28
   383a8:	mov	r2, #64	; 0x40
   383ac:	ldr	r1, [sp, #8]
   383b0:	mov	r0, r7
   383b4:	bl	166c <memset@plt>
   383b8:	ldr	r3, [sp, #8]
   383bc:	str	r3, [sp, #12]
   383c0:	mov	r5, r3
   383c4:	ldr	r3, [pc, #1964]	; 38b78 <ReadNextCell+0x8cc>
   383c8:	add	r3, pc, r3
   383cc:	str	r3, [sp, #16]
   383d0:	ldr	r3, [pc, #1956]	; 38b7c <ReadNextCell+0x8d0>
   383d4:	add	r3, pc, r3
   383d8:	str	r3, [sp, #20]
   383dc:	ldr	r3, [pc, #1948]	; 38b80 <ReadNextCell+0x8d4>
   383e0:	add	r3, pc, r3
   383e4:	str	r3, [sp, #24]
   383e8:	ldr	r3, [sp, #32]
   383ec:	ldr	r2, [sp, #12]
   383f0:	cmp	r2, r3
   383f4:	bcs	382e8 <ReadNextCell+0x3c>
   383f8:	bl	1570 <Mat_VarCalloc@plt>
   383fc:	mov	sl, r4
   38400:	cmp	r0, #0
   38404:	str	r0, [r4], #4
   38408:	bne	3842c <ReadNextCell+0x180>
   3840c:	ldr	r0, [pc, #1904]	; 38b84 <ReadNextCell+0x8d8>
   38410:	ldr	r1, [sp, #12]
   38414:	add	r0, pc, r0
   38418:	bl	1690 <Mat_Critical@plt>
   3841c:	ldr	r3, [sp, #12]
   38420:	add	r3, r3, #1
   38424:	str	r3, [sp, #12]
   38428:	b	383e8 <ReadNextCell+0x13c>
   3842c:	mov	r3, #0
   38430:	mov	r2, r7
   38434:	mov	r1, r8
   38438:	mov	r0, r6
   3843c:	str	r3, [sp, #40]	; 0x28
   38440:	str	r3, [sp, #44]	; 0x2c
   38444:	bl	24dc <InflateVarTag>
   38448:	ldr	r3, [r6, #20]
   3844c:	cmp	r3, #0
   38450:	add	r5, r5, r0
   38454:	beq	38468 <ReadNextCell+0x1bc>
   38458:	mov	r0, r7
   3845c:	bl	1a80 <Mat_uint32Swap>
   38460:	add	r0, r7, #4
   38464:	bl	1a80 <Mat_uint32Swap>
   38468:	ldr	r9, [sp, #44]	; 0x2c
   3846c:	cmp	r9, #0
   38470:	bne	3848c <ReadNextCell+0x1e0>
   38474:	ldr	r3, [r4, #-4]
   38478:	ldr	r0, [r3, #52]	; 0x34
   3847c:	bl	14e0 <free@plt>
   38480:	ldr	r3, [r4, #-4]
   38484:	str	r9, [r3, #52]	; 0x34
   38488:	b	3841c <ReadNextCell+0x170>
   3848c:	ldr	r3, [sp, #40]	; 0x28
   38490:	cmp	r3, #14
   38494:	beq	384bc <ReadNextCell+0x210>
   38498:	ldr	r0, [sl]
   3849c:	bl	15f4 <Mat_VarFree@plt>
   384a0:	ldr	r0, [pc, #1760]	; 38b88 <ReadNextCell+0x8dc>
   384a4:	mov	r3, #0
   384a8:	str	r3, [sl]
   384ac:	ldr	r1, [sp, #12]
   384b0:	add	r0, pc, r0
   384b4:	bl	1690 <Mat_Critical@plt>
   384b8:	b	382e8 <ReadNextCell+0x3c>
   384bc:	ldr	r3, [r4, #-4]
   384c0:	mov	r2, #1
   384c4:	mov	r1, r8
   384c8:	str	r2, [r3, #48]	; 0x30
   384cc:	mov	r0, r6
   384d0:	mov	r2, r7
   384d4:	bl	2640 <InflateArrayFlags>
   384d8:	ldr	r3, [r6, #20]
   384dc:	sub	sl, r9, #16
   384e0:	cmp	r3, #0
   384e4:	add	r5, r5, r0
   384e8:	beq	3850c <ReadNextCell+0x260>
   384ec:	mov	r0, r7
   384f0:	bl	1a80 <Mat_uint32Swap>
   384f4:	add	r0, r7, #4
   384f8:	bl	1a80 <Mat_uint32Swap>
   384fc:	add	r0, r7, #8
   38500:	bl	1a80 <Mat_uint32Swap>
   38504:	add	r0, r7, #12
   38508:	bl	1a80 <Mat_uint32Swap>
   3850c:	ldr	r1, [sp, #40]	; 0x28
   38510:	cmp	r1, #6
   38514:	bne	387e4 <ReadNextCell+0x538>
   38518:	ldr	r3, [sp, #48]	; 0x30
   3851c:	ldr	r2, [r4, #-4]
   38520:	and	r0, r3, #2048	; 0x800
   38524:	uxtb	r1, r3
   38528:	cmp	r1, #17
   3852c:	movhi	r1, #0
   38530:	cmp	r1, #5
   38534:	str	r0, [r2, #20]
   38538:	and	r0, r3, #1024	; 0x400
   3853c:	and	r3, r3, #512	; 0x200
   38540:	str	r0, [r2, #24]
   38544:	str	r3, [r2, #28]
   38548:	ldreq	r3, [sp, #52]	; 0x34
   3854c:	str	r1, [r2, #16]
   38550:	streq	r3, [r2]
   38554:	ldr	r3, [r4, #-4]
   38558:	ldr	r3, [r3, #16]
   3855c:	cmp	r3, #17
   38560:	beq	387c8 <ReadNextCell+0x51c>
   38564:	add	r3, sp, #104	; 0x68
   38568:	mov	r2, #0
   3856c:	str	r2, [r3, #-68]!	; 0xffffffbc
   38570:	mov	r1, r8
   38574:	str	r3, [sp]
   38578:	mov	r2, r7
   3857c:	mov	r3, #64	; 0x40
   38580:	mov	r0, r6
   38584:	bl	27a4 <InflateRankDims>
   38588:	ldr	r3, [sp, #36]	; 0x24
   3858c:	sub	sl, r9, #24
   38590:	cmp	r3, #0
   38594:	addeq	r3, r7, #8
   38598:	streq	r3, [sp, #36]	; 0x24
   3859c:	ldr	r3, [r6, #20]
   385a0:	add	fp, r5, r0
   385a4:	ldreq	r5, [sp, #8]
   385a8:	movne	r5, #1
   385ac:	cmp	r3, #0
   385b0:	beq	385c4 <ReadNextCell+0x318>
   385b4:	mov	r0, r7
   385b8:	bl	1a80 <Mat_uint32Swap>
   385bc:	add	r0, r7, #4
   385c0:	bl	1a80 <Mat_uint32Swap>
   385c4:	ldr	r3, [sp, #40]	; 0x28
   385c8:	cmp	r3, #5
   385cc:	bne	38630 <ReadNextCell+0x384>
   385d0:	ldr	r0, [sp, #44]	; 0x2c
   385d4:	ldr	r9, [r4, #-4]
   385d8:	add	r3, r0, #3
   385dc:	cmp	r0, #0
   385e0:	sub	sl, sl, r0
   385e4:	movlt	r0, r3
   385e8:	asr	r0, r0, #2
   385ec:	str	r0, [r9, #4]
   385f0:	lsl	r0, r0, #2
   385f4:	bl	15ac <malloc@plt>
   385f8:	ldr	r3, [r6, #20]
   385fc:	cmp	r3, #0
   38600:	ldreq	r1, [sp, #36]	; 0x24
   38604:	str	r0, [r9, #32]
   38608:	ldrne	r9, [sp, #8]
   3860c:	beq	3883c <ReadNextCell+0x590>
   38610:	ldr	r3, [r4, #-4]
   38614:	ldr	r2, [r3, #4]
   38618:	cmp	r9, r2
   3861c:	blt	3880c <ReadNextCell+0x560>
   38620:	ldr	r3, [r4, #-4]
   38624:	ldr	r3, [r3, #4]
   38628:	tst	r3, #1
   3862c:	subne	sl, sl, #4
   38630:	cmp	r5, #0
   38634:	beq	38640 <ReadNextCell+0x394>
   38638:	ldr	r0, [sp, #36]	; 0x24
   3863c:	bl	14e0 <free@plt>
   38640:	mov	r2, r7
   38644:	mov	r1, r8
   38648:	mov	r0, r6
   3864c:	bl	2acc <InflateVarNameTag>
   38650:	ldr	r3, [r6, #20]
   38654:	sub	sl, sl, #8
   38658:	cmp	r3, #0
   3865c:	add	r5, fp, r0
   38660:	beq	38674 <ReadNextCell+0x3c8>
   38664:	mov	r0, r7
   38668:	bl	1a80 <Mat_uint32Swap>
   3866c:	add	r0, r7, #4
   38670:	bl	1a80 <Mat_uint32Swap>
   38674:	ldr	r9, [sp, #44]	; 0x2c
   38678:	cmp	r9, #0
   3867c:	beq	386dc <ReadNextCell+0x430>
   38680:	ldr	r3, [sp, #40]	; 0x28
   38684:	ldr	fp, [r4, #-4]
   38688:	cmp	r3, #1
   3868c:	bne	3884c <ReadNextCell+0x5a0>
   38690:	tst	r9, #7
   38694:	bicne	r9, r9, #7
   38698:	addne	r9, r9, #8
   3869c:	add	r0, r9, #1
   386a0:	bl	15ac <malloc@plt>
   386a4:	sub	sl, sl, r9
   386a8:	cmp	r0, #0
   386ac:	mov	r2, r0
   386b0:	str	r0, [fp, #36]	; 0x24
   386b4:	beq	386dc <ReadNextCell+0x430>
   386b8:	mov	r3, r9
   386bc:	mov	r1, r8
   386c0:	mov	r0, r6
   386c4:	bl	2c30 <InflateVarName>
   386c8:	ldr	r3, [r4, #-4]
   386cc:	mov	r2, #0
   386d0:	ldr	r3, [r3, #36]	; 0x24
   386d4:	strb	r2, [r3, r9]
   386d8:	add	r5, r5, r0
   386dc:	ldr	r3, [r4, #-4]
   386e0:	mov	r1, #56	; 0x38
   386e4:	mov	r0, #1
   386e8:	ldr	r9, [r3, #52]	; 0x34
   386ec:	bl	1468 <calloc@plt>
   386f0:	cmp	r0, #0
   386f4:	str	r0, [r9, #12]
   386f8:	beq	38900 <ReadNextCell+0x654>
   386fc:	ldr	r3, [r8, #52]	; 0x34
   38700:	ldr	r1, [r3, #12]
   38704:	bl	1624 <inflateCopy@plt>
   38708:	subs	r9, r0, #0
   3870c:	bne	388ec <ReadNextCell+0x640>
   38710:	ldr	r3, [r4, #-4]
   38714:	ldr	r0, [r6]
   38718:	ldr	fp, [r3, #52]	; 0x34
   3871c:	bl	151c <ftell@plt>
   38720:	ldr	r1, [r4, #-4]
   38724:	ldr	r2, [r1, #52]	; 0x34
   38728:	str	r0, [fp]
   3872c:	ldr	r3, [r2]
   38730:	cmn	r3, #1
   38734:	beq	388e0 <ReadNextCell+0x634>
   38738:	ldr	r0, [r8, #52]	; 0x34
   3873c:	ldr	r0, [r0, #12]
   38740:	ldr	r0, [r0, #4]
   38744:	sub	r3, r3, r0
   38748:	str	r3, [r2]
   3874c:	ldr	r3, [r1, #16]
   38750:	cmp	r3, #2
   38754:	bne	388a0 <ReadNextCell+0x5f4>
   38758:	mov	r0, r6
   3875c:	bl	37640 <ReadNextStructField>
   38760:	add	r5, r5, r0
   38764:	ldr	r3, [r4, #-4]
   38768:	mov	r2, #0
   3876c:	ldr	r0, [r6]
   38770:	ldr	r3, [r3, #52]	; 0x34
   38774:	ldr	r1, [r3]
   38778:	bl	1714 <fseek@plt>
   3877c:	ldr	r3, [r4, #-4]
   38780:	ldr	r2, [r3, #52]	; 0x34
   38784:	ldr	r1, [r2, #16]
   38788:	cmp	r1, #0
   3878c:	bne	387a0 <ReadNextCell+0x4f4>
   38790:	ldr	r3, [r3, #16]
   38794:	sub	r3, r3, #1
   38798:	cmp	r3, #1
   3879c:	bhi	387c8 <ReadNextCell+0x51c>
   387a0:	ldr	r0, [r2, #12]
   387a4:	bl	1618 <inflateEnd@plt>
   387a8:	ldr	r3, [r4, #-4]
   387ac:	ldr	r3, [r3, #52]	; 0x34
   387b0:	ldr	r0, [r3, #12]
   387b4:	bl	14e0 <free@plt>
   387b8:	ldr	r3, [r4, #-4]
   387bc:	mov	r2, #0
   387c0:	ldr	r3, [r3, #52]	; 0x34
   387c4:	str	r2, [r3, #12]
   387c8:	ldr	r3, [r8, #52]	; 0x34
   387cc:	mov	r2, sl
   387d0:	mov	r0, r6
   387d4:	ldr	r1, [r3, #12]
   387d8:	bl	20e4 <InflateSkip>
   387dc:	add	r5, r5, r0
   387e0:	b	3841c <ReadNextCell+0x170>
   387e4:	ldr	r0, [pc, #928]	; 38b8c <ReadNextCell+0x8e0>
   387e8:	add	r0, pc, r0
   387ec:	bl	1690 <Mat_Critical@plt>
   387f0:	ldr	r3, [r8, #52]	; 0x34
   387f4:	mov	r2, sl
   387f8:	mov	r0, r6
   387fc:	ldr	r1, [r3, #12]
   38800:	bl	20e4 <InflateSkip>
   38804:	add	r5, r5, r0
   38808:	b	38554 <ReadNextCell+0x2a8>
   3880c:	ldr	r0, [sp, #36]	; 0x24
   38810:	ldr	r3, [r3, #32]
   38814:	add	r0, r0, r9, lsl #2
   38818:	str	r3, [sp, #28]
   3881c:	bl	1a80 <Mat_uint32Swap>
   38820:	ldr	r3, [sp, #28]
   38824:	str	r0, [r3, r9, lsl #2]
   38828:	add	r9, r9, #1
   3882c:	b	38610 <ReadNextCell+0x364>
   38830:	ldr	r2, [r1, r3, lsl #2]
   38834:	str	r2, [r0, r3, lsl #2]
   38838:	add	r3, r3, #1
   3883c:	ldr	r2, [r9, #4]
   38840:	cmp	r3, r2
   38844:	blt	38830 <ReadNextCell+0x584>
   38848:	b	38620 <ReadNextCell+0x374>
   3884c:	uxth	r2, r3
   38850:	cmp	r2, #1
   38854:	bne	386dc <ReadNextCell+0x430>
   38858:	lsr	r9, r3, #16
   3885c:	sub	r2, r9, #1
   38860:	cmp	r2, #3
   38864:	bhi	386dc <ReadNextCell+0x430>
   38868:	add	r0, r9, #1
   3886c:	str	r3, [sp, #28]
   38870:	bl	15ac <malloc@plt>
   38874:	cmp	r0, #0
   38878:	str	r0, [fp, #36]	; 0x24
   3887c:	beq	386dc <ReadNextCell+0x430>
   38880:	mov	r2, r9
   38884:	add	r1, r7, #4
   38888:	bl	14f8 <memcpy@plt>
   3888c:	ldr	r2, [fp, #36]	; 0x24
   38890:	ldr	r3, [sp, #28]
   38894:	mov	r1, #0
   38898:	strb	r1, [r2, r3, lsr #16]
   3889c:	b	386dc <ReadNextCell+0x430>
   388a0:	cmp	r3, #1
   388a4:	bne	388b4 <ReadNextCell+0x608>
   388a8:	mov	r0, r6
   388ac:	bl	382ac <ReadNextCell>
   388b0:	b	38760 <ReadNextCell+0x4b4>
   388b4:	cmp	sl, #32768	; 0x8000
   388b8:	bgt	38764 <ReadNextCell+0x4b8>
   388bc:	mov	r0, r6
   388c0:	bl	35ebc <Mat_VarRead5>
   388c4:	ldr	r3, [r4, #-4]
   388c8:	ldr	r2, [r3, #52]	; 0x34
   388cc:	ldr	r3, [r3, #40]	; 0x28
   388d0:	str	r3, [r2, #16]
   388d4:	ldr	r3, [r4, #-4]
   388d8:	str	r9, [r3, #40]	; 0x28
   388dc:	b	38764 <ReadNextCell+0x4b8>
   388e0:	ldr	r0, [sp, #24]
   388e4:	bl	1690 <Mat_Critical@plt>
   388e8:	b	3877c <ReadNextCell+0x4d0>
   388ec:	bl	1558 <zError@plt>
   388f0:	mov	r1, r0
   388f4:	ldr	r0, [sp, #20]
   388f8:	bl	1690 <Mat_Critical@plt>
   388fc:	b	387c8 <ReadNextCell+0x51c>
   38900:	ldr	r0, [sp, #16]
   38904:	bl	1690 <Mat_Critical@plt>
   38908:	b	387c8 <ReadNextCell+0x51c>
   3890c:	ldr	r3, [r6]
   38910:	mov	r2, #2
   38914:	mov	r1, #4
   38918:	mov	r0, r7
   3891c:	bl	1588 <fread@plt>
   38920:	cmp	r0, #0
   38924:	beq	3839c <ReadNextCell+0xf0>
   38928:	ldr	r3, [r6, #20]
   3892c:	add	r5, r5, r0
   38930:	cmp	r3, #0
   38934:	beq	38948 <ReadNextCell+0x69c>
   38938:	mov	r0, r7
   3893c:	bl	1a80 <Mat_uint32Swap>
   38940:	add	r0, r7, #4
   38944:	bl	1a80 <Mat_uint32Swap>
   38948:	ldr	r8, [sp, #44]	; 0x2c
   3894c:	cmp	r8, #0
   38950:	bne	3896c <ReadNextCell+0x6c0>
   38954:	ldr	r3, [r4, #-4]
   38958:	ldr	r0, [r3, #52]	; 0x34
   3895c:	bl	14e0 <free@plt>
   38960:	ldr	r3, [r4, #-4]
   38964:	str	r8, [r3, #52]	; 0x34
   38968:	b	3839c <ReadNextCell+0xf0>
   3896c:	ldr	r3, [sp, #40]	; 0x28
   38970:	cmp	r3, #14
   38974:	beq	389a8 <ReadNextCell+0x6fc>
   38978:	ldr	r0, [fp]
   3897c:	bl	15f4 <Mat_VarFree@plt>
   38980:	mov	r3, #0
   38984:	str	r3, [fp]
   38988:	ldr	r0, [r6]
   3898c:	bl	151c <ftell@plt>
   38990:	mov	r1, r9
   38994:	mov	r2, r0
   38998:	ldr	r0, [pc, #496]	; 38b90 <ReadNextCell+0x8e4>
   3899c:	add	r0, pc, r0
   389a0:	bl	1690 <Mat_Critical@plt>
   389a4:	b	382e8 <ReadNextCell+0x3c>
   389a8:	ldr	r3, [r6]
   389ac:	mov	r2, #6
   389b0:	mov	r1, #4
   389b4:	mov	r0, r7
   389b8:	bl	1588 <fread@plt>
   389bc:	ldr	r3, [r6, #20]
   389c0:	cmp	r3, #0
   389c4:	add	r5, r5, r0
   389c8:	beq	389fc <ReadNextCell+0x750>
   389cc:	mov	r0, r7
   389d0:	bl	1a80 <Mat_uint32Swap>
   389d4:	mov	r0, sl
   389d8:	bl	1a80 <Mat_uint32Swap>
   389dc:	add	r0, r7, #8
   389e0:	bl	1a80 <Mat_uint32Swap>
   389e4:	add	r0, r7, #12
   389e8:	bl	1a80 <Mat_uint32Swap>
   389ec:	add	r0, r7, #16
   389f0:	bl	1a80 <Mat_uint32Swap>
   389f4:	add	r0, r7, #20
   389f8:	bl	1a80 <Mat_uint32Swap>
   389fc:	ldr	r3, [sp, #40]	; 0x28
   38a00:	sub	r8, r8, #24
   38a04:	cmp	r3, #6
   38a08:	bne	38a48 <ReadNextCell+0x79c>
   38a0c:	ldr	r3, [sp, #48]	; 0x30
   38a10:	ldr	r2, [r4, #-4]
   38a14:	and	r0, r3, #2048	; 0x800
   38a18:	uxtb	r1, r3
   38a1c:	cmp	r1, #17
   38a20:	movhi	r1, #0
   38a24:	cmp	r1, #5
   38a28:	str	r0, [r2, #20]
   38a2c:	and	r0, r3, #1024	; 0x400
   38a30:	and	r3, r3, #512	; 0x200
   38a34:	str	r0, [r2, #24]
   38a38:	str	r3, [r2, #28]
   38a3c:	ldreq	r3, [sp, #52]	; 0x34
   38a40:	str	r1, [r2, #16]
   38a44:	streq	r3, [r2]
   38a48:	ldr	r3, [sp, #60]	; 0x3c
   38a4c:	ldr	r2, [sp, #56]	; 0x38
   38a50:	ldr	r1, [r4, #-4]
   38a54:	mov	r0, r6
   38a58:	bl	33c58 <ReadRankDims>
   38a5c:	ldr	r3, [r6]
   38a60:	mov	r2, #8
   38a64:	mov	r1, #1
   38a68:	add	r5, r5, r0
   38a6c:	sub	r8, r8, r0
   38a70:	mov	r0, r7
   38a74:	bl	1588 <fread@plt>
   38a78:	ldr	r3, [r6, #20]
   38a7c:	sub	r8, r8, #8
   38a80:	cmp	r3, #0
   38a84:	add	r5, r5, r0
   38a88:	beq	38a9c <ReadNextCell+0x7f0>
   38a8c:	mov	r0, r7
   38a90:	bl	1a80 <Mat_uint32Swap>
   38a94:	mov	r0, sl
   38a98:	bl	1a80 <Mat_uint32Swap>
   38a9c:	ldr	r1, [sp, #44]	; 0x2c
   38aa0:	cmp	r1, #0
   38aa4:	beq	38ae0 <ReadNextCell+0x834>
   38aa8:	ldr	r3, [sp, #40]	; 0x28
   38aac:	cmp	r3, #1
   38ab0:	bne	38ae0 <ReadNextCell+0x834>
   38ab4:	rsbs	r2, r1, #0
   38ab8:	and	r2, r2, #7
   38abc:	and	r3, r1, #7
   38ac0:	rsbpl	r3, r2, #0
   38ac4:	cmp	r3, #0
   38ac8:	rsbgt	r3, r3, #8
   38acc:	addgt	r1, r1, r3
   38ad0:	mov	r2, #1
   38ad4:	ldr	r0, [r6]
   38ad8:	sub	r8, r8, r1
   38adc:	bl	1714 <fseek@plt>
   38ae0:	ldr	r3, [r4, #-4]
   38ae4:	ldr	r0, [r6]
   38ae8:	ldr	fp, [r3, #52]	; 0x34
   38aec:	bl	151c <ftell@plt>
   38af0:	ldr	r1, [r4, #-4]
   38af4:	ldr	r3, [r1, #52]	; 0x34
   38af8:	str	r0, [fp]
   38afc:	ldr	r3, [r3]
   38b00:	cmn	r3, #1
   38b04:	beq	38b5c <ReadNextCell+0x8b0>
   38b08:	ldr	r3, [r1, #16]
   38b0c:	cmp	r3, #2
   38b10:	bne	38b20 <ReadNextCell+0x874>
   38b14:	mov	r0, r6
   38b18:	bl	37640 <ReadNextStructField>
   38b1c:	add	r5, r5, r0
   38b20:	ldr	r1, [r4, #-4]
   38b24:	ldr	r3, [r1, #16]
   38b28:	cmp	r3, #1
   38b2c:	bne	38b3c <ReadNextCell+0x890>
   38b30:	mov	r0, r6
   38b34:	bl	382ac <ReadNextCell>
   38b38:	add	r5, r5, r0
   38b3c:	ldr	r3, [r4, #-4]
   38b40:	mov	r2, #0
   38b44:	ldr	r0, [r6]
   38b48:	ldr	r3, [r3, #52]	; 0x34
   38b4c:	ldr	r1, [r3]
   38b50:	add	r1, r8, r1
   38b54:	bl	1714 <fseek@plt>
   38b58:	b	3839c <ReadNextCell+0xf0>
   38b5c:	ldr	r0, [pc, #48]	; 38b94 <ReadNextCell+0x8e8>
   38b60:	add	r0, pc, r0
   38b64:	bl	1690 <Mat_Critical@plt>
   38b68:	b	3839c <ReadNextCell+0xf0>
   38b6c:	.word	0x0000853f
   38b70:	.word	0x0000875c
   38b74:	.word	0x00008732
   38b78:	.word	0x00008696
   38b7c:	.word	0x0000866c
   38b80:	.word	0x00008385
   38b84:	.word	0x000086b2
   38b88:	.word	0x0000863c
   38b8c:	.word	0x0000822b
   38b90:	.word	0x0000817f
   38b94:	.word	0x00007c05

00038b98 <Mat_VarReadData5>:
   38b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38b9c:	mov	r6, r3
   38ba0:	ldr	r3, [r1, #52]	; 0x34
   38ba4:	sub	sp, sp, #100	; 0x64
   38ba8:	mov	r4, r1
   38bac:	mov	r5, r0
   38bb0:	ldr	r1, [r3]
   38bb4:	mov	r9, r2
   38bb8:	ldr	r0, [r0]
   38bbc:	mov	r2, #0
   38bc0:	ldr	r7, [sp, #136]	; 0x88
   38bc4:	ldr	r8, [sp, #140]	; 0x8c
   38bc8:	bl	1714 <fseek@plt>
   38bcc:	ldr	r3, [r4, #48]	; 0x30
   38bd0:	cmp	r3, #0
   38bd4:	bne	38c4c <Mat_VarReadData5+0xb4>
   38bd8:	add	sl, sp, #32
   38bdc:	ldr	r3, [r5]
   38be0:	mov	r2, #2
   38be4:	mov	r1, #4
   38be8:	mov	r0, sl
   38bec:	bl	1588 <fread@plt>
   38bf0:	ldr	r3, [r5, #20]
   38bf4:	cmp	r3, #0
   38bf8:	beq	38c0c <Mat_VarReadData5+0x74>
   38bfc:	mov	r0, sl
   38c00:	bl	1a18 <Mat_int32Swap>
   38c04:	add	r0, sl, #4
   38c08:	bl	1a18 <Mat_int32Swap>
   38c0c:	ldr	r3, [sp, #32]
   38c10:	uxtb	r2, r3
   38c14:	lsr	r3, r3, #16
   38c18:	cmp	r2, #24
   38c1c:	lsl	r3, r3, #16
   38c20:	movgt	r2, #0
   38c24:	cmp	r3, #0
   38c28:	str	r2, [r4, #8]
   38c2c:	beq	38da0 <Mat_VarReadData5+0x208>
   38c30:	mov	r2, #1
   38c34:	mvn	r1, #3
   38c38:	ldr	r0, [r5]
   38c3c:	bl	1714 <fseek@plt>
   38c40:	ldrsh	r3, [sp, #34]	; 0x22
   38c44:	add	r3, r3, #4
   38c48:	b	38da8 <Mat_VarReadData5+0x210>
   38c4c:	cmp	r3, #1
   38c50:	movne	r3, #0
   38c54:	bne	38da8 <Mat_VarReadData5+0x210>
   38c58:	ldr	r3, [r4, #52]	; 0x34
   38c5c:	ldr	fp, [r3, #16]
   38c60:	cmp	fp, #0
   38c64:	beq	38cf0 <Mat_VarReadData5+0x158>
   38c68:	ldr	r3, [r4, #20]
   38c6c:	ldm	r4, {r1, r2}
   38c70:	cmp	r3, #0
   38c74:	ldr	r3, [r4, #32]
   38c78:	str	r2, [sp, #16]
   38c7c:	str	r1, [sp, #20]
   38c80:	stm	sp, {r3, r6, r7, r8}
   38c84:	ldr	r2, [r4, #16]
   38c88:	ldr	r3, [r4, #8]
   38c8c:	beq	38ce4 <Mat_VarReadData5+0x14c>
   38c90:	ldr	r1, [r9]
   38c94:	ldr	r0, [fp]
   38c98:	bl	1bf1c <GetDataSlab>
   38c9c:	subs	sl, r0, #0
   38ca0:	bne	38cd8 <Mat_VarReadData5+0x140>
   38ca4:	ldr	r3, [r4]
   38ca8:	stmib	sp, {r6, r7, r8}
   38cac:	str	r3, [sp, #20]
   38cb0:	ldr	r3, [r4, #4]
   38cb4:	ldr	r2, [r4, #16]
   38cb8:	str	r3, [sp, #16]
   38cbc:	ldr	r3, [r4, #32]
   38cc0:	ldr	r1, [r9, #4]
   38cc4:	str	r3, [sp]
   38cc8:	ldr	r0, [fp, #4]
   38ccc:	ldr	r3, [r4, #8]
   38cd0:	bl	1bf1c <GetDataSlab>
   38cd4:	mov	sl, r0
   38cd8:	mov	r0, sl
   38cdc:	add	sp, sp, #100	; 0x64
   38ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38ce4:	mov	r1, r9
   38ce8:	mov	r0, fp
   38cec:	b	38cd0 <Mat_VarReadData5+0x138>
   38cf0:	add	fp, sp, #40	; 0x28
   38cf4:	ldr	r1, [r3, #12]
   38cf8:	mov	r0, fp
   38cfc:	bl	1624 <inflateCopy@plt>
   38d00:	subs	r3, r0, #0
   38d04:	beq	38d24 <Mat_VarReadData5+0x18c>
   38d08:	bl	1558 <zError@plt>
   38d0c:	mvn	sl, #0
   38d10:	mov	r1, r0
   38d14:	ldr	r0, [pc, #1448]	; 392c4 <Mat_VarReadData5+0x72c>
   38d18:	add	r0, pc, r0
   38d1c:	bl	1690 <Mat_Critical@plt>
   38d20:	b	38cd8 <Mat_VarReadData5+0x140>
   38d24:	add	sl, sp, #32
   38d28:	mov	r2, sl
   38d2c:	mov	r1, fp
   38d30:	mov	r0, r5
   38d34:	str	r3, [sp, #44]	; 0x2c
   38d38:	bl	2f24 <InflateDataType>
   38d3c:	ldr	r3, [r5, #20]
   38d40:	cmp	r3, #0
   38d44:	beq	38d50 <Mat_VarReadData5+0x1b8>
   38d48:	mov	r0, sl
   38d4c:	bl	1a18 <Mat_int32Swap>
   38d50:	ldr	r3, [sp, #32]
   38d54:	uxtb	r2, r3
   38d58:	cmp	r2, #24
   38d5c:	movgt	r2, #0
   38d60:	str	r2, [r4, #8]
   38d64:	lsr	r2, r3, #16
   38d68:	lsl	r2, r2, #16
   38d6c:	cmp	r2, #0
   38d70:	asrne	r3, r3, #16
   38d74:	bne	38c44 <Mat_VarReadData5+0xac>
   38d78:	add	sl, sl, #4
   38d7c:	mov	r2, sl
   38d80:	mov	r1, fp
   38d84:	mov	r0, r5
   38d88:	bl	2f24 <InflateDataType>
   38d8c:	ldr	r3, [r5, #20]
   38d90:	cmp	r3, #0
   38d94:	beq	38da0 <Mat_VarReadData5+0x208>
   38d98:	mov	r0, sl
   38d9c:	bl	1a18 <Mat_int32Swap>
   38da0:	ldr	r3, [sp, #36]	; 0x24
   38da4:	add	r3, r3, #8
   38da8:	str	r3, [sp, #24]
   38dac:	ldr	r3, [sp, #24]
   38db0:	ands	r3, r3, #7
   38db4:	beq	38dd8 <Mat_VarReadData5+0x240>
   38db8:	ldr	r2, [sp, #24]
   38dbc:	rsbs	r2, r2, #0
   38dc0:	and	r2, r2, #7
   38dc4:	rsbpl	r3, r2, #0
   38dc8:	ldr	r2, [sp, #24]
   38dcc:	rsb	r3, r3, #8
   38dd0:	add	r3, r2, r3
   38dd4:	str	r3, [sp, #24]
   38dd8:	ldr	r3, [r4, #4]
   38ddc:	cmp	r3, #2
   38de0:	str	r3, [sp, #28]
   38de4:	bne	39070 <Mat_VarReadData5+0x4d8>
   38de8:	ldr	r3, [r8]
   38dec:	ldr	r0, [r7]
   38df0:	ldr	r1, [r6]
   38df4:	sub	r3, r3, #1
   38df8:	ldr	r2, [r4, #32]
   38dfc:	mla	r3, r0, r3, r1
   38e00:	ldr	r1, [r2]
   38e04:	add	r3, r3, #1
   38e08:	cmp	r3, r1
   38e0c:	bhi	392bc <Mat_VarReadData5+0x724>
   38e10:	ldr	r3, [r8, #4]
   38e14:	ldr	r0, [r7, #4]
   38e18:	ldr	r1, [r6, #4]
   38e1c:	sub	r3, r3, #1
   38e20:	mla	r3, r0, r3, r1
   38e24:	ldr	r1, [r2, #4]
   38e28:	add	r3, r3, #1
   38e2c:	cmp	r3, r1
   38e30:	bhi	392bc <Mat_VarReadData5+0x724>
   38e34:	ldr	sl, [r4, #48]	; 0x30
   38e38:	cmp	sl, #0
   38e3c:	bne	38f2c <Mat_VarReadData5+0x394>
   38e40:	ldr	r3, [r4, #20]
   38e44:	stm	sp, {r2, r6, r7, r8}
   38e48:	cmp	r3, #0
   38e4c:	ldr	r2, [r4, #16]
   38e50:	ldr	r3, [r4, #8]
   38e54:	moveq	r1, r9
   38e58:	beq	38f04 <Mat_VarReadData5+0x36c>
   38e5c:	ldr	r1, [r9]
   38e60:	mov	r0, r5
   38e64:	bl	193a0 <ReadDataSlab2>
   38e68:	ldr	r3, [r4, #52]	; 0x34
   38e6c:	mov	r2, sl
   38e70:	ldr	r0, [r5]
   38e74:	ldr	r1, [r3]
   38e78:	ldr	r3, [sp, #24]
   38e7c:	add	sl, sp, #32
   38e80:	add	r1, r3, r1
   38e84:	bl	1714 <fseek@plt>
   38e88:	ldr	r3, [r5]
   38e8c:	ldr	r2, [sp, #28]
   38e90:	mov	r1, #4
   38e94:	mov	r0, sl
   38e98:	bl	1588 <fread@plt>
   38e9c:	ldr	r3, [r5, #20]
   38ea0:	cmp	r3, #0
   38ea4:	beq	38eb8 <Mat_VarReadData5+0x320>
   38ea8:	mov	r0, sl
   38eac:	bl	1a18 <Mat_int32Swap>
   38eb0:	add	r0, sl, #4
   38eb4:	bl	1a18 <Mat_int32Swap>
   38eb8:	ldr	r3, [sp, #32]
   38ebc:	uxtb	r2, r3
   38ec0:	lsr	r3, r3, #16
   38ec4:	cmp	r2, #24
   38ec8:	lsl	r3, r3, #16
   38ecc:	movgt	r2, #0
   38ed0:	cmp	r3, #0
   38ed4:	str	r2, [r4, #8]
   38ed8:	beq	38eec <Mat_VarReadData5+0x354>
   38edc:	mov	r2, #1
   38ee0:	mvn	r1, #3
   38ee4:	ldr	r0, [r5]
   38ee8:	bl	1714 <fseek@plt>
   38eec:	ldr	r3, [r4, #32]
   38ef0:	ldr	r2, [r4, #16]
   38ef4:	str	r3, [sp]
   38ef8:	ldr	r1, [r9, #4]
   38efc:	ldr	r3, [r4, #8]
   38f00:	stmib	sp, {r6, r7, r8}
   38f04:	mov	r0, r5
   38f08:	bl	193a0 <ReadDataSlab2>
   38f0c:	ldr	r0, [r4, #16]
   38f10:	bl	3beb8 <ClassType2DataType>
   38f14:	mov	sl, #0
   38f18:	str	r0, [r4, #8]
   38f1c:	ldr	r0, [r4, #16]
   38f20:	bl	16f0 <Mat_SizeOfClass@plt>
   38f24:	str	r0, [r4, #12]
   38f28:	b	38cd8 <Mat_VarReadData5+0x140>
   38f2c:	cmp	sl, #1
   38f30:	bne	38f0c <Mat_VarReadData5+0x374>
   38f34:	ldr	sl, [r4, #20]
   38f38:	ldr	r3, [r4, #8]
   38f3c:	cmp	sl, #0
   38f40:	stmib	sp, {r2, r6, r7, r8}
   38f44:	add	fp, sp, #40	; 0x28
   38f48:	str	r3, [sp]
   38f4c:	moveq	r2, r9
   38f50:	ldr	r3, [r4, #16]
   38f54:	beq	39050 <Mat_VarReadData5+0x4b8>
   38f58:	ldr	r2, [r9]
   38f5c:	mov	r1, fp
   38f60:	mov	r0, r5
   38f64:	bl	1a620 <ReadCompressedDataSlab2>
   38f68:	ldr	r3, [r4, #52]	; 0x34
   38f6c:	mov	r2, #0
   38f70:	ldr	r0, [r5]
   38f74:	ldr	r1, [r3]
   38f78:	bl	1714 <fseek@plt>
   38f7c:	mov	r0, fp
   38f80:	bl	1618 <inflateEnd@plt>
   38f84:	ldr	r3, [r4, #52]	; 0x34
   38f88:	mov	r0, fp
   38f8c:	ldr	r1, [r3, #12]
   38f90:	bl	1624 <inflateCopy@plt>
   38f94:	subs	sl, r0, #0
   38f98:	beq	38fb0 <Mat_VarReadData5+0x418>
   38f9c:	bl	1558 <zError@plt>
   38fa0:	mov	r1, r0
   38fa4:	ldr	r0, [pc, #796]	; 392c8 <Mat_VarReadData5+0x730>
   38fa8:	add	r0, pc, r0
   38fac:	bl	1690 <Mat_Critical@plt>
   38fb0:	ldr	r2, [sp, #24]
   38fb4:	mov	r1, fp
   38fb8:	mov	r0, r5
   38fbc:	bl	20e4 <InflateSkip>
   38fc0:	mov	r3, #0
   38fc4:	str	r3, [sp, #44]	; 0x2c
   38fc8:	add	r3, sp, #32
   38fcc:	mov	r2, r3
   38fd0:	mov	r1, fp
   38fd4:	mov	r0, r5
   38fd8:	str	r3, [sp, #24]
   38fdc:	bl	2f24 <InflateDataType>
   38fe0:	ldr	r2, [r5, #20]
   38fe4:	ldr	r3, [sp, #24]
   38fe8:	cmp	r2, #0
   38fec:	beq	38ff8 <Mat_VarReadData5+0x460>
   38ff0:	mov	r0, r3
   38ff4:	bl	1a18 <Mat_int32Swap>
   38ff8:	ldr	r3, [sp, #32]
   38ffc:	uxtb	r2, r3
   39000:	lsr	r3, r3, #16
   39004:	cmp	r2, #24
   39008:	lsl	r3, r3, #16
   3900c:	movgt	r2, #0
   39010:	cmp	r3, #0
   39014:	str	r2, [r4, #8]
   39018:	bne	3902c <Mat_VarReadData5+0x494>
   3901c:	mov	r2, #4
   39020:	mov	r1, fp
   39024:	mov	r0, r5
   39028:	bl	20e4 <InflateSkip>
   3902c:	ldr	r3, [r4, #32]
   39030:	ldr	r2, [r9, #4]
   39034:	str	r3, [sp, #4]
   39038:	ldr	r3, [r4, #8]
   3903c:	str	r8, [sp, #16]
   39040:	str	r3, [sp]
   39044:	ldr	r3, [r4, #16]
   39048:	str	r7, [sp, #12]
   3904c:	str	r6, [sp, #8]
   39050:	mov	r1, fp
   39054:	mov	r0, r5
   39058:	bl	1a620 <ReadCompressedDataSlab2>
   3905c:	mov	r0, fp
   39060:	bl	1618 <inflateEnd@plt>
   39064:	cmp	sl, #0
   39068:	bne	38cd8 <Mat_VarReadData5+0x140>
   3906c:	b	38f0c <Mat_VarReadData5+0x374>
   39070:	ldr	sl, [r4, #48]	; 0x30
   39074:	cmp	sl, #0
   39078:	bne	39168 <Mat_VarReadData5+0x5d0>
   3907c:	ldr	r3, [r4, #20]
   39080:	ldr	r2, [r4, #16]
   39084:	cmp	r3, #0
   39088:	ldr	r3, [r4, #32]
   3908c:	moveq	r1, r9
   39090:	stmib	sp, {r3, r6, r7, r8}
   39094:	ldr	r3, [sp, #28]
   39098:	str	r3, [sp]
   3909c:	ldr	r3, [r4, #8]
   390a0:	beq	3915c <Mat_VarReadData5+0x5c4>
   390a4:	ldr	r1, [r9]
   390a8:	mov	r0, r5
   390ac:	bl	131bc <ReadDataSlabN>
   390b0:	ldr	r3, [r4, #52]	; 0x34
   390b4:	mov	r2, sl
   390b8:	ldr	r0, [r5]
   390bc:	ldr	r1, [r3]
   390c0:	ldr	r3, [sp, #24]
   390c4:	add	sl, sp, #32
   390c8:	add	r1, r3, r1
   390cc:	bl	1714 <fseek@plt>
   390d0:	ldr	r3, [r5]
   390d4:	mov	r2, #2
   390d8:	mov	r1, #4
   390dc:	mov	r0, sl
   390e0:	bl	1588 <fread@plt>
   390e4:	ldr	r3, [r5, #20]
   390e8:	cmp	r3, #0
   390ec:	beq	39100 <Mat_VarReadData5+0x568>
   390f0:	mov	r0, sl
   390f4:	bl	1a18 <Mat_int32Swap>
   390f8:	add	r0, sl, #4
   390fc:	bl	1a18 <Mat_int32Swap>
   39100:	ldr	r3, [sp, #32]
   39104:	uxtb	r2, r3
   39108:	lsr	r3, r3, #16
   3910c:	cmp	r2, #24
   39110:	lsl	r3, r3, #16
   39114:	movgt	r2, #0
   39118:	cmp	r3, #0
   3911c:	str	r2, [r4, #8]
   39120:	beq	39134 <Mat_VarReadData5+0x59c>
   39124:	mov	r2, #1
   39128:	mvn	r1, #3
   3912c:	ldr	r0, [r5]
   39130:	bl	1714 <fseek@plt>
   39134:	ldr	r3, [r4, #32]
   39138:	ldr	r2, [r4, #16]
   3913c:	str	r3, [sp, #4]
   39140:	ldr	r3, [r4, #4]
   39144:	ldr	r1, [r9, #4]
   39148:	str	r3, [sp]
   3914c:	ldr	r3, [r4, #8]
   39150:	str	r8, [sp, #16]
   39154:	str	r7, [sp, #12]
   39158:	str	r6, [sp, #8]
   3915c:	mov	r0, r5
   39160:	bl	131bc <ReadDataSlabN>
   39164:	b	38f0c <Mat_VarReadData5+0x374>
   39168:	cmp	sl, #1
   3916c:	bne	38f0c <Mat_VarReadData5+0x374>
   39170:	ldr	r3, [r4, #32]
   39174:	ldr	sl, [r4, #20]
   39178:	str	r3, [sp, #8]
   3917c:	ldr	r3, [sp, #28]
   39180:	cmp	sl, #0
   39184:	str	r3, [sp, #4]
   39188:	ldr	r3, [r4, #8]
   3918c:	add	fp, sp, #40	; 0x28
   39190:	str	r3, [sp]
   39194:	str	r8, [sp, #20]
   39198:	str	r7, [sp, #16]
   3919c:	str	r6, [sp, #12]
   391a0:	ldr	r3, [r4, #16]
   391a4:	moveq	r2, r9
   391a8:	beq	392ac <Mat_VarReadData5+0x714>
   391ac:	ldr	r2, [r9]
   391b0:	mov	r1, fp
   391b4:	mov	r0, r5
   391b8:	bl	15efc <ReadCompressedDataSlabN>
   391bc:	ldr	r3, [r4, #52]	; 0x34
   391c0:	mov	r2, #0
   391c4:	ldr	r0, [r5]
   391c8:	ldr	r1, [r3]
   391cc:	bl	1714 <fseek@plt>
   391d0:	mov	r0, fp
   391d4:	bl	1618 <inflateEnd@plt>
   391d8:	ldr	r3, [r4, #52]	; 0x34
   391dc:	mov	r0, fp
   391e0:	ldr	r1, [r3, #12]
   391e4:	bl	1624 <inflateCopy@plt>
   391e8:	subs	sl, r0, #0
   391ec:	beq	39204 <Mat_VarReadData5+0x66c>
   391f0:	bl	1558 <zError@plt>
   391f4:	mov	r1, r0
   391f8:	ldr	r0, [pc, #204]	; 392cc <Mat_VarReadData5+0x734>
   391fc:	add	r0, pc, r0
   39200:	bl	1690 <Mat_Critical@plt>
   39204:	ldr	r2, [sp, #24]
   39208:	mov	r1, fp
   3920c:	mov	r0, r5
   39210:	bl	20e4 <InflateSkip>
   39214:	mov	r3, #0
   39218:	str	r3, [sp, #44]	; 0x2c
   3921c:	add	r3, sp, #32
   39220:	mov	r2, r3
   39224:	mov	r1, fp
   39228:	mov	r0, r5
   3922c:	str	r3, [sp, #24]
   39230:	bl	2f24 <InflateDataType>
   39234:	ldr	r2, [r5, #20]
   39238:	ldr	r3, [sp, #24]
   3923c:	cmp	r2, #0
   39240:	beq	3924c <Mat_VarReadData5+0x6b4>
   39244:	mov	r0, r3
   39248:	bl	1a18 <Mat_int32Swap>
   3924c:	ldr	r3, [sp, #32]
   39250:	uxtb	r2, r3
   39254:	lsr	r3, r3, #16
   39258:	cmp	r2, #24
   3925c:	lsl	r3, r3, #16
   39260:	movgt	r2, #0
   39264:	cmp	r3, #0
   39268:	str	r2, [r4, #8]
   3926c:	bne	39280 <Mat_VarReadData5+0x6e8>
   39270:	mov	r2, #4
   39274:	mov	r1, fp
   39278:	mov	r0, r5
   3927c:	bl	20e4 <InflateSkip>
   39280:	ldr	r3, [r4, #32]
   39284:	ldr	r2, [r9, #4]
   39288:	str	r3, [sp, #8]
   3928c:	ldr	r3, [r4, #4]
   39290:	str	r8, [sp, #20]
   39294:	str	r3, [sp, #4]
   39298:	ldr	r3, [r4, #8]
   3929c:	str	r7, [sp, #16]
   392a0:	str	r3, [sp]
   392a4:	ldr	r3, [r4, #16]
   392a8:	str	r6, [sp, #12]
   392ac:	mov	r1, fp
   392b0:	mov	r0, r5
   392b4:	bl	15efc <ReadCompressedDataSlabN>
   392b8:	b	3905c <Mat_VarReadData5+0x4c4>
   392bc:	mov	sl, #1
   392c0:	b	38cd8 <Mat_VarReadData5+0x140>
   392c4:	.word	0x00007d28
   392c8:	.word	0x00007a98
   392cc:	.word	0x00007844

000392d0 <Mat_VarReadDataLinear5>:
   392d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   392d4:	sub	sp, sp, #92	; 0x5c
   392d8:	mov	ip, #1
   392dc:	str	ip, [sp, #20]
   392e0:	ldr	ip, [r0, #16]
   392e4:	ldr	r9, [sp, #132]	; 0x84
   392e8:	cmp	ip, #16
   392ec:	beq	39450 <Mat_VarReadDataLinear5+0x180>
   392f0:	mov	r7, r3
   392f4:	ldr	r3, [r1, #52]	; 0x34
   392f8:	mov	r4, r1
   392fc:	mov	r8, r2
   39300:	ldr	r1, [r3]
   39304:	mov	r5, r0
   39308:	mov	r2, #0
   3930c:	ldr	r0, [r0]
   39310:	bl	1714 <fseek@plt>
   39314:	ldr	r3, [r4, #48]	; 0x30
   39318:	cmp	r3, #0
   3931c:	bne	3938c <Mat_VarReadDataLinear5+0xbc>
   39320:	add	r6, sp, #24
   39324:	ldr	r3, [r5]
   39328:	mov	r2, #2
   3932c:	mov	r1, #4
   39330:	mov	r0, r6
   39334:	bl	1588 <fread@plt>
   39338:	ldr	r3, [r5, #20]
   3933c:	cmp	r3, #0
   39340:	beq	39354 <Mat_VarReadDataLinear5+0x84>
   39344:	mov	r0, r6
   39348:	bl	1a18 <Mat_int32Swap>
   3934c:	add	r0, r6, #4
   39350:	bl	1a18 <Mat_int32Swap>
   39354:	ldr	r3, [sp, #24]
   39358:	uxtb	r2, r3
   3935c:	lsr	r3, r3, #16
   39360:	str	r2, [r4, #8]
   39364:	lsl	r3, r3, #16
   39368:	cmp	r3, #0
   3936c:	beq	394d0 <Mat_VarReadDataLinear5+0x200>
   39370:	mov	r2, #1
   39374:	mvn	r1, #3
   39378:	ldr	r0, [r5]
   3937c:	bl	1714 <fseek@plt>
   39380:	ldrsh	r6, [sp, #26]
   39384:	add	r6, r6, #4
   39388:	b	394d8 <Mat_VarReadDataLinear5+0x208>
   3938c:	cmp	r3, #1
   39390:	movne	r6, #0
   39394:	bne	394d8 <Mat_VarReadDataLinear5+0x208>
   39398:	ldr	r3, [r4, #52]	; 0x34
   3939c:	ldr	r6, [r3, #16]
   393a0:	cmp	r6, #0
   393a4:	beq	39420 <Mat_VarReadDataLinear5+0x150>
   393a8:	ldr	r3, [r4, #20]
   393ac:	str	r9, [sp, #8]
   393b0:	cmp	r3, #0
   393b4:	ldr	r3, [sp, #128]	; 0x80
   393b8:	str	r7, [sp]
   393bc:	str	r3, [sp, #4]
   393c0:	ldr	r3, [r4, #8]
   393c4:	ldr	r2, [r4, #16]
   393c8:	beq	39414 <Mat_VarReadDataLinear5+0x144>
   393cc:	ldr	r1, [r8]
   393d0:	ldr	r0, [r6]
   393d4:	bl	33804 <GetDataLinear>
   393d8:	subs	fp, r0, #0
   393dc:	bne	39408 <Mat_VarReadDataLinear5+0x138>
   393e0:	ldr	r3, [sp, #128]	; 0x80
   393e4:	str	r9, [sp, #8]
   393e8:	str	r3, [sp, #4]
   393ec:	str	r7, [sp]
   393f0:	ldr	r3, [r4, #8]
   393f4:	ldr	r2, [r4, #16]
   393f8:	ldr	r1, [r8, #4]
   393fc:	ldr	r0, [r6, #4]
   39400:	bl	33804 <GetDataLinear>
   39404:	mov	fp, r0
   39408:	mov	r0, fp
   3940c:	add	sp, sp, #92	; 0x5c
   39410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39414:	mov	r1, r8
   39418:	mov	r0, r6
   3941c:	b	39400 <Mat_VarReadDataLinear5+0x130>
   39420:	ldr	r1, [r3, #12]
   39424:	add	fp, sp, #32
   39428:	mov	r0, fp
   3942c:	str	r6, [r1, #4]
   39430:	bl	1624 <inflateCopy@plt>
   39434:	cmp	r0, #0
   39438:	beq	39458 <Mat_VarReadDataLinear5+0x188>
   3943c:	bl	1558 <zError@plt>
   39440:	mov	r1, r0
   39444:	ldr	r0, [pc, #784]	; 3975c <Mat_VarReadDataLinear5+0x48c>
   39448:	add	r0, pc, r0
   3944c:	bl	1690 <Mat_Critical@plt>
   39450:	mvn	fp, #0
   39454:	b	39408 <Mat_VarReadDataLinear5+0x138>
   39458:	add	sl, sp, #24
   3945c:	mov	r2, sl
   39460:	mov	r1, fp
   39464:	mov	r0, r5
   39468:	bl	2f24 <InflateDataType>
   3946c:	ldr	r3, [r5, #20]
   39470:	cmp	r3, #0
   39474:	beq	39488 <Mat_VarReadDataLinear5+0x1b8>
   39478:	mov	r0, sl
   3947c:	bl	1a18 <Mat_int32Swap>
   39480:	add	r0, sl, #4
   39484:	bl	1a18 <Mat_int32Swap>
   39488:	ldr	r6, [sp, #24]
   3948c:	uxtb	r3, r6
   39490:	str	r3, [r4, #8]
   39494:	lsr	r3, r6, #16
   39498:	lsl	r3, r3, #16
   3949c:	cmp	r3, #0
   394a0:	asrne	r6, r6, #16
   394a4:	bne	39384 <Mat_VarReadDataLinear5+0xb4>
   394a8:	add	sl, sl, #4
   394ac:	mov	r2, sl
   394b0:	mov	r1, fp
   394b4:	mov	r0, r5
   394b8:	bl	2f24 <InflateDataType>
   394bc:	ldr	r3, [r5, #20]
   394c0:	cmp	r3, #0
   394c4:	beq	394d0 <Mat_VarReadDataLinear5+0x200>
   394c8:	mov	r0, sl
   394cc:	bl	1a18 <Mat_int32Swap>
   394d0:	ldr	r6, [sp, #28]
   394d4:	add	r6, r6, #8
   394d8:	ands	r3, r6, #7
   394dc:	beq	394f4 <Mat_VarReadDataLinear5+0x224>
   394e0:	rsbs	r2, r6, #0
   394e4:	and	r2, r2, #7
   394e8:	rsbpl	r3, r2, #0
   394ec:	rsb	r3, r3, #8
   394f0:	add	r6, r6, r3
   394f4:	add	r1, sp, #20
   394f8:	mov	r0, r4
   394fc:	bl	3bee0 <SafeMulDims>
   39500:	subs	fp, r0, #0
   39504:	beq	39514 <Mat_VarReadDataLinear5+0x244>
   39508:	ldr	r0, [pc, #592]	; 39760 <Mat_VarReadDataLinear5+0x490>
   3950c:	add	r0, pc, r0
   39510:	bl	1690 <Mat_Critical@plt>
   39514:	ldr	r2, [sp, #128]	; 0x80
   39518:	sub	r3, r9, #1
   3951c:	mla	r3, r2, r3, r7
   39520:	ldr	r2, [sp, #20]
   39524:	add	r3, r3, #1
   39528:	cmp	r3, r2
   3952c:	movhi	fp, #1
   39530:	bhi	39610 <Mat_VarReadDataLinear5+0x340>
   39534:	ldr	sl, [r4, #48]	; 0x30
   39538:	cmp	sl, #0
   3953c:	bne	3962c <Mat_VarReadDataLinear5+0x35c>
   39540:	ldr	r3, [r4, #20]
   39544:	str	r9, [sp, #8]
   39548:	cmp	r3, #0
   3954c:	ldr	r3, [sp, #128]	; 0x80
   39550:	str	r7, [sp]
   39554:	str	r3, [sp, #4]
   39558:	moveq	r1, r8
   3955c:	ldr	r3, [r4, #8]
   39560:	ldr	r2, [r4, #16]
   39564:	beq	39608 <Mat_VarReadDataLinear5+0x338>
   39568:	ldr	r1, [r8]
   3956c:	mov	r0, r5
   39570:	bl	18f04 <ReadDataSlab1>
   39574:	ldr	r3, [r4, #52]	; 0x34
   39578:	mov	r2, sl
   3957c:	ldr	r0, [r5]
   39580:	ldr	r1, [r3]
   39584:	add	r1, r6, r1
   39588:	add	r6, sp, #24
   3958c:	bl	1714 <fseek@plt>
   39590:	ldr	r3, [r5]
   39594:	mov	r2, #2
   39598:	mov	r1, #4
   3959c:	mov	r0, r6
   395a0:	bl	1588 <fread@plt>
   395a4:	ldr	r3, [r5, #20]
   395a8:	cmp	r3, #0
   395ac:	beq	395c0 <Mat_VarReadDataLinear5+0x2f0>
   395b0:	mov	r0, r6
   395b4:	bl	1a18 <Mat_int32Swap>
   395b8:	add	r0, r6, #4
   395bc:	bl	1a18 <Mat_int32Swap>
   395c0:	ldr	r3, [sp, #24]
   395c4:	uxtb	r2, r3
   395c8:	lsr	r3, r3, #16
   395cc:	str	r2, [r4, #8]
   395d0:	lsl	r3, r3, #16
   395d4:	cmp	r3, #0
   395d8:	beq	395ec <Mat_VarReadDataLinear5+0x31c>
   395dc:	mov	r2, #1
   395e0:	mvn	r1, #3
   395e4:	ldr	r0, [r5]
   395e8:	bl	1714 <fseek@plt>
   395ec:	ldr	r3, [sp, #128]	; 0x80
   395f0:	str	r9, [sp, #8]
   395f4:	str	r3, [sp, #4]
   395f8:	str	r7, [sp]
   395fc:	ldr	r3, [r4, #8]
   39600:	ldr	r2, [r4, #16]
   39604:	ldr	r1, [r8, #4]
   39608:	mov	r0, r5
   3960c:	bl	18f04 <ReadDataSlab1>
   39610:	ldr	r0, [r4, #16]
   39614:	bl	3beb8 <ClassType2DataType>
   39618:	str	r0, [r4, #8]
   3961c:	ldr	r0, [r4, #16]
   39620:	bl	16f0 <Mat_SizeOfClass@plt>
   39624:	str	r0, [r4, #12]
   39628:	b	39408 <Mat_VarReadDataLinear5+0x138>
   3962c:	cmp	sl, #1
   39630:	bne	39610 <Mat_VarReadDataLinear5+0x340>
   39634:	ldr	r3, [r4, #20]
   39638:	ldr	r2, [sp, #128]	; 0x80
   3963c:	cmp	r3, #0
   39640:	ldr	r3, [r4, #8]
   39644:	add	sl, sp, #32
   39648:	str	r2, [sp, #8]
   3964c:	str	r9, [sp, #12]
   39650:	stm	sp, {r3, r7}
   39654:	moveq	r2, r8
   39658:	ldr	r3, [r4, #16]
   3965c:	beq	39744 <Mat_VarReadDataLinear5+0x474>
   39660:	ldr	r2, [r8]
   39664:	mov	r1, sl
   39668:	mov	r0, r5
   3966c:	bl	1a0f0 <ReadCompressedDataSlab1>
   39670:	ldr	r3, [r4, #52]	; 0x34
   39674:	mov	r2, #0
   39678:	ldr	r0, [r5]
   3967c:	ldr	r1, [r3]
   39680:	bl	1714 <fseek@plt>
   39684:	mov	r0, sl
   39688:	bl	1618 <inflateEnd@plt>
   3968c:	ldr	r3, [r4, #52]	; 0x34
   39690:	mov	r0, sl
   39694:	ldr	r1, [r3, #12]
   39698:	bl	1624 <inflateCopy@plt>
   3969c:	subs	fp, r0, #0
   396a0:	beq	396b8 <Mat_VarReadDataLinear5+0x3e8>
   396a4:	bl	1558 <zError@plt>
   396a8:	mov	r1, r0
   396ac:	ldr	r0, [pc, #176]	; 39764 <Mat_VarReadDataLinear5+0x494>
   396b0:	add	r0, pc, r0
   396b4:	bl	1690 <Mat_Critical@plt>
   396b8:	mov	r2, r6
   396bc:	mov	r1, sl
   396c0:	mov	r0, r5
   396c4:	add	r6, sp, #24
   396c8:	bl	20e4 <InflateSkip>
   396cc:	mov	r3, #0
   396d0:	mov	r2, r6
   396d4:	mov	r1, sl
   396d8:	mov	r0, r5
   396dc:	str	r3, [sp, #36]	; 0x24
   396e0:	bl	2f24 <InflateDataType>
   396e4:	ldr	r3, [r5, #20]
   396e8:	cmp	r3, #0
   396ec:	beq	396f8 <Mat_VarReadDataLinear5+0x428>
   396f0:	mov	r0, r6
   396f4:	bl	1a18 <Mat_int32Swap>
   396f8:	ldr	r3, [sp, #24]
   396fc:	uxtb	r2, r3
   39700:	lsr	r3, r3, #16
   39704:	str	r2, [r4, #8]
   39708:	lsl	r3, r3, #16
   3970c:	cmp	r3, #0
   39710:	bne	39724 <Mat_VarReadDataLinear5+0x454>
   39714:	mov	r2, #4
   39718:	mov	r1, sl
   3971c:	mov	r0, r5
   39720:	bl	20e4 <InflateSkip>
   39724:	ldr	r3, [sp, #128]	; 0x80
   39728:	str	r9, [sp, #12]
   3972c:	str	r3, [sp, #8]
   39730:	str	r7, [sp, #4]
   39734:	ldr	r3, [r4, #8]
   39738:	str	r3, [sp]
   3973c:	ldr	r3, [r4, #16]
   39740:	ldr	r2, [r8, #4]
   39744:	mov	r1, sl
   39748:	mov	r0, r5
   3974c:	bl	1a0f0 <ReadCompressedDataSlab1>
   39750:	mov	r0, sl
   39754:	bl	1618 <inflateEnd@plt>
   39758:	b	39610 <Mat_VarReadDataLinear5+0x340>
   3975c:	.word	0x000075f8
   39760:	.word	0x0000730f
   39764:	.word	0x00007390

00039768 <Mat_VarWrite5>:
   39768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3976c:	sub	sp, sp, #4096	; 0x1000
   39770:	sub	sp, sp, #44	; 0x2c
   39774:	add	r4, sp, #40	; 0x28
   39778:	mov	r3, #6
   3977c:	str	r3, [r4, #-28]	; 0xffffffe4
   39780:	mov	r3, #5
   39784:	str	r3, [r4, #-24]	; 0xffffffe8
   39788:	mov	r3, #8
   3978c:	mov	r7, #0
   39790:	str	r3, [r4, #-20]	; 0xffffffec
   39794:	subs	r5, r0, #0
   39798:	mov	r3, #14
   3979c:	str	r7, [r4, #-16]
   397a0:	str	r3, [r4, #-12]
   397a4:	str	r7, [r4, #-4]
   397a8:	bne	397bc <Mat_VarWrite5+0x54>
   397ac:	mvn	r0, #0
   397b0:	add	sp, sp, #4096	; 0x1000
   397b4:	add	sp, sp, #44	; 0x2c
   397b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   397bc:	mov	r6, r1
   397c0:	mov	r8, r2
   397c4:	mov	r1, r7
   397c8:	mov	r2, #2
   397cc:	ldr	r0, [r5]
   397d0:	bl	1714 <fseek@plt>
   397d4:	cmp	r6, #0
   397d8:	beq	397ac <Mat_VarWrite5+0x44>
   397dc:	ldr	r3, [r6, #36]	; 0x24
   397e0:	cmp	r3, #0
   397e4:	beq	397ac <Mat_VarWrite5+0x44>
   397e8:	cmp	r8, #0
   397ec:	bne	39b24 <Mat_VarWrite5+0x3bc>
   397f0:	ldr	r3, [r5]
   397f4:	mov	r2, #1
   397f8:	mov	r1, #4
   397fc:	sub	r0, r4, #12
   39800:	sub	sl, r4, #16
   39804:	bl	157c <fwrite@plt>
   39808:	ldr	r3, [r5]
   3980c:	mov	r2, #1
   39810:	mov	r1, #4
   39814:	mov	r0, sl
   39818:	bl	157c <fwrite@plt>
   3981c:	ldr	r0, [r5]
   39820:	bl	151c <ftell@plt>
   39824:	ldr	r2, [r6, #16]
   39828:	ldr	r1, [r6, #20]
   3982c:	add	r9, sp, #2080	; 0x820
   39830:	uxtb	r3, r2
   39834:	cmp	r1, #0
   39838:	str	r3, [r4, #-32]	; 0xffffffe0
   3983c:	orrne	r3, r3, #2048	; 0x800
   39840:	strne	r3, [r4, #-32]	; 0xffffffe0
   39844:	ldr	r3, [r6, #24]
   39848:	mov	r1, #4
   3984c:	cmp	r3, #0
   39850:	add	r9, r9, #8
   39854:	ldrne	r3, [r4, #-32]	; 0xffffffe0
   39858:	mov	fp, #4
   3985c:	orrne	r3, r3, #1024	; 0x400
   39860:	strne	r3, [r4, #-32]	; 0xffffffe0
   39864:	ldr	r3, [r6, #28]
   39868:	cmp	r3, #0
   3986c:	ldrne	r3, [r4, #-32]	; 0xffffffe0
   39870:	orrne	r3, r3, #512	; 0x200
   39874:	strne	r3, [r4, #-32]	; 0xffffffe0
   39878:	cmp	r2, #5
   3987c:	mov	r2, #1
   39880:	ldreq	r3, [r6, #40]	; 0x28
   39884:	ldreq	r3, [r3]
   39888:	mov	r7, r0
   3988c:	streq	r3, [r4, #-4]
   39890:	sub	r0, r4, #28
   39894:	ldr	r3, [r5]
   39898:	bl	157c <fwrite@plt>
   3989c:	ldr	r3, [r5]
   398a0:	mov	r2, #1
   398a4:	mov	r1, #4
   398a8:	sub	r0, r4, #20
   398ac:	bl	157c <fwrite@plt>
   398b0:	ldr	r3, [r5]
   398b4:	mov	r2, #1
   398b8:	mov	r1, #4
   398bc:	sub	r0, r4, #32
   398c0:	bl	157c <fwrite@plt>
   398c4:	ldr	r3, [r5]
   398c8:	mov	r2, #1
   398cc:	mov	r1, #4
   398d0:	sub	r0, r4, #4
   398d4:	bl	157c <fwrite@plt>
   398d8:	ldr	r3, [r6, #4]
   398dc:	mov	r2, #1
   398e0:	mov	r1, #4
   398e4:	lsl	r3, r3, #2
   398e8:	str	r3, [r4, #-8]
   398ec:	sub	r0, r4, #24
   398f0:	ldr	r3, [r5]
   398f4:	bl	157c <fwrite@plt>
   398f8:	ldr	r3, [r5]
   398fc:	mov	r2, #1
   39900:	mov	r1, #4
   39904:	sub	r0, r4, #8
   39908:	bl	157c <fwrite@plt>
   3990c:	ldr	r3, [r6, #4]
   39910:	cmp	r8, r3
   39914:	blt	39a4c <Mat_VarWrite5+0x2e4>
   39918:	tst	r3, #1
   3991c:	beq	39934 <Mat_VarWrite5+0x1cc>
   39920:	ldr	r3, [r5]
   39924:	mov	r2, #1
   39928:	mov	r1, #4
   3992c:	mov	r0, sl
   39930:	bl	157c <fwrite@plt>
   39934:	ldr	sl, [r6, #36]	; 0x24
   39938:	mov	r8, #1
   3993c:	mov	r0, sl
   39940:	bl	1630 <strlen@plt>
   39944:	cmp	r0, #4
   39948:	bhi	39a90 <Mat_VarWrite5+0x328>
   3994c:	mov	r0, sl
   39950:	str	r8, [sp, #2088]	; 0x828
   39954:	bl	1630 <strlen@plt>
   39958:	mov	r3, #0
   3995c:	strb	r3, [r4]
   39960:	mov	r2, r8
   39964:	mov	r1, #4
   39968:	lsl	r3, r0, #16
   3996c:	orr	r3, r3, r8
   39970:	mov	sl, r0
   39974:	str	r3, [sp, #2088]	; 0x828
   39978:	mov	r0, r9
   3997c:	ldr	r3, [r5]
   39980:	bl	157c <fwrite@plt>
   39984:	ldr	r3, [r5]
   39988:	mov	r2, sl
   3998c:	mov	r1, r8
   39990:	ldr	r0, [r6, #36]	; 0x24
   39994:	bl	157c <fwrite@plt>
   39998:	cmp	sl, #3
   3999c:	ble	39a74 <Mat_VarWrite5+0x30c>
   399a0:	ldr	r8, [r6, #52]	; 0x34
   399a4:	cmp	r8, #0
   399a8:	streq	r8, [r6, #16]
   399ac:	beq	399d8 <Mat_VarWrite5+0x270>
   399b0:	ldr	r0, [r5]
   399b4:	bl	151c <ftell@plt>
   399b8:	ldr	r3, [r6, #52]	; 0x34
   399bc:	str	r0, [r8]
   399c0:	ldr	r3, [r3]
   399c4:	cmn	r3, #1
   399c8:	bne	399d8 <Mat_VarWrite5+0x270>
   399cc:	ldr	r0, [pc, #1440]	; 39f74 <Mat_VarWrite5+0x80c>
   399d0:	add	r0, pc, r0
   399d4:	bl	1690 <Mat_Critical@plt>
   399d8:	mov	r1, r6
   399dc:	mov	r0, r5
   399e0:	bl	33d78 <WriteType>
   399e4:	ldr	r0, [r5]
   399e8:	bl	151c <ftell@plt>
   399ec:	cmn	r0, #1
   399f0:	cmnne	r7, #1
   399f4:	mov	r8, r0
   399f8:	movne	r6, #1
   399fc:	moveq	r6, #0
   39a00:	beq	39f60 <Mat_VarWrite5+0x7f8>
   39a04:	sub	r7, r0, r7
   39a08:	mvn	r1, #3
   39a0c:	mov	r2, #1
   39a10:	sub	r1, r1, r7
   39a14:	ldr	r0, [r5]
   39a18:	str	r7, [r4, #-8]!
   39a1c:	bl	1714 <fseek@plt>
   39a20:	ldr	r3, [r5]
   39a24:	mov	r2, #1
   39a28:	mov	r1, #4
   39a2c:	mov	r0, r4
   39a30:	bl	157c <fwrite@plt>
   39a34:	mov	r2, #0
   39a38:	mov	r1, r8
   39a3c:	ldr	r0, [r5]
   39a40:	bl	1714 <fseek@plt>
   39a44:	mov	r0, #0
   39a48:	b	397b0 <Mat_VarWrite5+0x48>
   39a4c:	ldr	r3, [r6, #32]
   39a50:	mov	r2, #1
   39a54:	mov	r1, fp
   39a58:	ldr	r3, [r3, r8, lsl #2]
   39a5c:	mov	r0, r9
   39a60:	str	r3, [sp, #2088]	; 0x828
   39a64:	ldr	r3, [r5]
   39a68:	bl	157c <fwrite@plt>
   39a6c:	add	r8, r8, #1
   39a70:	b	3990c <Mat_VarWrite5+0x1a4>
   39a74:	ldr	r3, [r5]
   39a78:	mov	r2, r8
   39a7c:	mov	r1, #1
   39a80:	mov	r0, r4
   39a84:	bl	157c <fwrite@plt>
   39a88:	add	sl, sl, #1
   39a8c:	b	39998 <Mat_VarWrite5+0x230>
   39a90:	mov	r0, sl
   39a94:	str	r8, [r4]
   39a98:	bl	1630 <strlen@plt>
   39a9c:	mov	r3, #0
   39aa0:	strb	r3, [r4, #-33]	; 0xffffffdf
   39aa4:	mov	r2, r8
   39aa8:	ldr	r3, [r5]
   39aac:	mov	r1, #4
   39ab0:	str	r0, [sp, #2088]	; 0x828
   39ab4:	mov	r0, r4
   39ab8:	bl	157c <fwrite@plt>
   39abc:	ldr	r3, [r5]
   39ac0:	mov	r2, r8
   39ac4:	mov	r1, #4
   39ac8:	mov	r0, r9
   39acc:	bl	157c <fwrite@plt>
   39ad0:	ldr	r3, [r5]
   39ad4:	ldr	r2, [sp, #2088]	; 0x828
   39ad8:	mov	r1, r8
   39adc:	ldr	r0, [r6, #36]	; 0x24
   39ae0:	bl	157c <fwrite@plt>
   39ae4:	ldr	r3, [sp, #2088]	; 0x828
   39ae8:	ands	r9, r3, #7
   39aec:	beq	399a0 <Mat_VarWrite5+0x238>
   39af0:	rsbs	r3, r3, #0
   39af4:	and	r3, r3, #7
   39af8:	rsbpl	r9, r3, #0
   39afc:	sub	sl, r4, #33	; 0x21
   39b00:	ldr	r3, [r5]
   39b04:	mov	r2, r8
   39b08:	mov	r1, #1
   39b0c:	mov	r0, sl
   39b10:	add	r9, r9, #1
   39b14:	bl	157c <fwrite@plt>
   39b18:	cmp	r9, #8
   39b1c:	bne	39b00 <Mat_VarWrite5+0x398>
   39b20:	b	399a0 <Mat_VarWrite5+0x238>
   39b24:	cmp	r8, #1
   39b28:	bne	399e4 <Mat_VarWrite5+0x27c>
   39b2c:	add	sl, sp, #2080	; 0x820
   39b30:	add	sl, sl, #8
   39b34:	mov	r2, #2048	; 0x800
   39b38:	mov	r1, r7
   39b3c:	mov	r0, sl
   39b40:	bl	166c <memset@plt>
   39b44:	mov	r1, #56	; 0x38
   39b48:	mov	r0, r8
   39b4c:	bl	1468 <calloc@plt>
   39b50:	subs	r9, r0, #0
   39b54:	beq	397ac <Mat_VarWrite5+0x44>
   39b58:	ldr	r2, [pc, #1048]	; 39f78 <Mat_VarWrite5+0x810>
   39b5c:	mov	r3, #56	; 0x38
   39b60:	add	r2, pc, r2
   39b64:	mvn	r1, #0
   39b68:	bl	15b8 <deflateInit_@plt>
   39b6c:	subs	fp, r0, #0
   39b70:	beq	39b98 <Mat_VarWrite5+0x430>
   39b74:	mov	r0, r9
   39b78:	bl	14e0 <free@plt>
   39b7c:	mov	r0, fp
   39b80:	bl	1558 <zError@plt>
   39b84:	mov	r1, r0
   39b88:	ldr	r0, [pc, #1004]	; 39f7c <Mat_VarWrite5+0x814>
   39b8c:	add	r0, pc, r0
   39b90:	bl	1690 <Mat_Critical@plt>
   39b94:	b	397ac <Mat_VarWrite5+0x44>
   39b98:	mov	r0, r4
   39b9c:	mov	r3, #15
   39ba0:	str	r3, [r0, #-12]!
   39ba4:	mov	r2, r8
   39ba8:	ldr	r3, [r5]
   39bac:	mov	r1, #4
   39bb0:	bl	157c <fwrite@plt>
   39bb4:	ldr	r3, [r5]
   39bb8:	mov	r2, r8
   39bbc:	mov	r1, #4
   39bc0:	sub	r0, r4, #16
   39bc4:	bl	157c <fwrite@plt>
   39bc8:	ldr	r0, [r5]
   39bcc:	bl	151c <ftell@plt>
   39bd0:	ldr	r2, [r6, #16]
   39bd4:	ldr	r1, [r6, #20]
   39bd8:	uxtb	r3, r2
   39bdc:	cmp	r1, #0
   39be0:	str	r3, [r4, #-32]	; 0xffffffe0
   39be4:	orrne	r3, r3, #2048	; 0x800
   39be8:	strne	r3, [r4, #-32]	; 0xffffffe0
   39bec:	ldr	r3, [r6, #24]
   39bf0:	cmp	r3, #0
   39bf4:	ldrne	r3, [r4, #-32]	; 0xffffffe0
   39bf8:	orrne	r3, r3, #1024	; 0x400
   39bfc:	strne	r3, [r4, #-32]	; 0xffffffe0
   39c00:	ldr	r3, [r6, #28]
   39c04:	cmp	r3, #0
   39c08:	ldrne	r3, [r4, #-32]	; 0xffffffe0
   39c0c:	orrne	r3, r3, #512	; 0x200
   39c10:	strne	r3, [r4, #-32]	; 0xffffffe0
   39c14:	cmp	r2, #5
   39c18:	ldreq	r3, [r6, #40]	; 0x28
   39c1c:	ldreq	r3, [r3]
   39c20:	mov	r7, r0
   39c24:	ldr	r0, [r6, #36]	; 0x24
   39c28:	streq	r3, [r4, #-4]
   39c2c:	mov	r3, #14
   39c30:	cmp	r0, #0
   39c34:	str	r3, [sp, #2088]	; 0x828
   39c38:	beq	39dfc <Mat_VarWrite5+0x694>
   39c3c:	bl	1630 <strlen@plt>
   39c40:	cmp	r0, #4
   39c44:	bls	39dfc <Mat_VarWrite5+0x694>
   39c48:	tst	r0, #7
   39c4c:	bicne	r0, r0, #7
   39c50:	addne	r0, r0, #8
   39c54:	add	r8, r0, #24
   39c58:	mov	r0, r6
   39c5c:	bl	34e7c <GetTypeBufSize>
   39c60:	mov	r3, #8
   39c64:	str	sl, [r9]
   39c68:	str	r3, [r9, #4]
   39c6c:	add	r0, r0, r8
   39c70:	mov	r8, #2048	; 0x800
   39c74:	str	r0, [sp, #2092]	; 0x82c
   39c78:	mov	r1, #0
   39c7c:	str	r4, [r9, #12]
   39c80:	str	r8, [r9, #16]
   39c84:	mov	r0, r9
   39c88:	bl	1564 <deflate@plt>
   39c8c:	ldr	r2, [r9, #16]
   39c90:	ldr	r3, [r5]
   39c94:	rsb	r2, r2, #2048	; 0x800
   39c98:	mov	r1, #1
   39c9c:	mov	r0, r4
   39ca0:	bl	157c <fwrite@plt>
   39ca4:	ldr	r3, [r9, #16]
   39ca8:	cmp	r3, #0
   39cac:	beq	39c78 <Mat_VarWrite5+0x510>
   39cb0:	ldr	r3, [r4, #-28]	; 0xffffffe4
   39cb4:	ldr	r2, [r6, #4]
   39cb8:	str	r3, [sp, #2088]	; 0x828
   39cbc:	ldr	r3, [r4, #-20]	; 0xffffffec
   39cc0:	ldr	r1, [r4, #-24]	; 0xffffffe8
   39cc4:	str	r3, [sp, #2092]	; 0x82c
   39cc8:	ldr	r3, [r4, #-32]	; 0xffffffe0
   39ccc:	str	r1, [sp, #2104]	; 0x838
   39cd0:	str	r3, [sp, #2096]	; 0x830
   39cd4:	ldr	r3, [r4, #-4]
   39cd8:	str	r3, [sp, #2100]	; 0x834
   39cdc:	lsl	r3, r2, #2
   39ce0:	str	r3, [r4, #-8]
   39ce4:	str	r3, [sp, #2108]	; 0x83c
   39ce8:	add	r3, sl, #24
   39cec:	cmp	fp, r2
   39cf0:	blt	39e04 <Mat_VarWrite5+0x69c>
   39cf4:	tst	r2, #1
   39cf8:	bic	r3, r2, r2, asr #31
   39cfc:	addne	r2, sp, #4096	; 0x1000
   39d00:	addne	r2, r2, #40	; 0x28
   39d04:	addne	r2, r2, r3, lsl #2
   39d08:	addne	r3, r3, #1
   39d0c:	add	r3, r3, #6
   39d10:	ldrne	r1, [r4, #-16]
   39d14:	mov	fp, #2048	; 0x800
   39d18:	mov	r8, #0
   39d1c:	lsl	r3, r3, #2
   39d20:	strne	r1, [r2, #-2024]	; 0xfffff818
   39d24:	str	sl, [r9]
   39d28:	str	r3, [r9, #4]
   39d2c:	mov	r1, r8
   39d30:	str	r4, [r9, #12]
   39d34:	str	fp, [r9, #16]
   39d38:	mov	r0, r9
   39d3c:	bl	1564 <deflate@plt>
   39d40:	ldr	r2, [r9, #16]
   39d44:	ldr	r3, [r5]
   39d48:	rsb	r2, r2, #2048	; 0x800
   39d4c:	mov	r1, #1
   39d50:	mov	r0, r4
   39d54:	bl	157c <fwrite@plt>
   39d58:	ldr	r3, [r9, #16]
   39d5c:	cmp	r3, #0
   39d60:	beq	39d2c <Mat_VarWrite5+0x5c4>
   39d64:	ldr	fp, [r6, #36]	; 0x24
   39d68:	mov	r0, fp
   39d6c:	bl	1630 <strlen@plt>
   39d70:	cmp	r0, #4
   39d74:	mov	r2, r0
   39d78:	bhi	39e18 <Mat_VarWrite5+0x6b0>
   39d7c:	lsl	r3, r0, #16
   39d80:	orr	r3, r3, #1
   39d84:	mov	r1, fp
   39d88:	add	r0, sl, #4
   39d8c:	mov	r8, #0
   39d90:	str	r3, [sp, #2088]	; 0x828
   39d94:	str	r8, [sp, #2092]	; 0x82c
   39d98:	mov	fp, #2048	; 0x800
   39d9c:	bl	14f8 <memcpy@plt>
   39da0:	str	sl, [r9]
   39da4:	mov	sl, #1
   39da8:	mov	r3, #8
   39dac:	str	r3, [r9, #4]
   39db0:	mov	r1, r8
   39db4:	str	r4, [r9, #12]
   39db8:	str	fp, [r9, #16]
   39dbc:	mov	r0, r9
   39dc0:	bl	1564 <deflate@plt>
   39dc4:	ldr	r2, [r9, #16]
   39dc8:	ldr	r3, [r5]
   39dcc:	rsb	r2, r2, #2048	; 0x800
   39dd0:	mov	r1, sl
   39dd4:	mov	r0, r4
   39dd8:	bl	157c <fwrite@plt>
   39ddc:	ldr	r3, [r9, #16]
   39de0:	cmp	r3, #0
   39de4:	beq	39db0 <Mat_VarWrite5+0x648>
   39de8:	ldr	r8, [r6, #52]	; 0x34
   39dec:	cmp	r8, #0
   39df0:	bne	39eb8 <Mat_VarWrite5+0x750>
   39df4:	str	r8, [r6, #16]
   39df8:	b	39ee0 <Mat_VarWrite5+0x778>
   39dfc:	mov	r8, #24
   39e00:	b	39c58 <Mat_VarWrite5+0x4f0>
   39e04:	ldr	r1, [r6, #32]
   39e08:	ldr	r1, [r1, fp, lsl #2]
   39e0c:	add	fp, fp, #1
   39e10:	str	r1, [r3], #4
   39e14:	b	39cec <Mat_VarWrite5+0x584>
   39e18:	mov	r8, r0
   39e1c:	mov	r2, #2048	; 0x800
   39e20:	mov	r1, #0
   39e24:	mov	r0, sl
   39e28:	bl	166c <memset@plt>
   39e2c:	mov	r3, #1
   39e30:	mov	r2, r8
   39e34:	mov	r1, fp
   39e38:	add	r0, sl, #8
   39e3c:	str	r3, [sp, #2088]	; 0x828
   39e40:	str	r8, [sp, #2092]	; 0x82c
   39e44:	bl	14f8 <memcpy@plt>
   39e48:	ands	r3, r8, #7
   39e4c:	beq	39e64 <Mat_VarWrite5+0x6fc>
   39e50:	rsbs	r2, r8, #0
   39e54:	and	r2, r2, #7
   39e58:	rsbpl	r3, r2, #0
   39e5c:	rsb	r3, r3, #8
   39e60:	add	r8, r8, r3
   39e64:	add	r8, r8, #8
   39e68:	str	sl, [r9]
   39e6c:	str	r8, [r9, #4]
   39e70:	mov	fp, #2048	; 0x800
   39e74:	mov	sl, #0
   39e78:	mov	r8, #1
   39e7c:	mov	r1, sl
   39e80:	str	r4, [r9, #12]
   39e84:	str	fp, [r9, #16]
   39e88:	mov	r0, r9
   39e8c:	bl	1564 <deflate@plt>
   39e90:	ldr	r2, [r9, #16]
   39e94:	ldr	r3, [r5]
   39e98:	rsb	r2, r2, #2048	; 0x800
   39e9c:	mov	r1, r8
   39ea0:	mov	r0, r4
   39ea4:	bl	157c <fwrite@plt>
   39ea8:	ldr	r3, [r9, #16]
   39eac:	cmp	r3, #0
   39eb0:	beq	39e7c <Mat_VarWrite5+0x714>
   39eb4:	b	39de8 <Mat_VarWrite5+0x680>
   39eb8:	ldr	r0, [r5]
   39ebc:	bl	151c <ftell@plt>
   39ec0:	ldr	r3, [r6, #52]	; 0x34
   39ec4:	str	r0, [r8]
   39ec8:	ldr	r3, [r3]
   39ecc:	cmn	r3, #1
   39ed0:	bne	39ee0 <Mat_VarWrite5+0x778>
   39ed4:	ldr	r0, [pc, #164]	; 39f80 <Mat_VarWrite5+0x818>
   39ed8:	add	r0, pc, r0
   39edc:	bl	1690 <Mat_Critical@plt>
   39ee0:	mov	r1, r6
   39ee4:	mov	r2, r9
   39ee8:	mov	r0, r5
   39eec:	mov	r6, #2048	; 0x800
   39ef0:	mov	r8, #4
   39ef4:	mov	sl, #1
   39ef8:	bl	35110 <WriteCompressedType>
   39efc:	mov	r3, #0
   39f00:	str	r3, [r9]
   39f04:	str	r3, [r9, #4]
   39f08:	mov	r1, r8
   39f0c:	str	r4, [r9, #12]
   39f10:	str	r6, [r9, #16]
   39f14:	mov	r0, r9
   39f18:	bl	1564 <deflate@plt>
   39f1c:	ldr	r2, [r9, #16]
   39f20:	ldr	r3, [r5]
   39f24:	rsb	r2, r2, #2048	; 0x800
   39f28:	mov	r1, sl
   39f2c:	mov	fp, r0
   39f30:	mov	r0, r4
   39f34:	bl	157c <fwrite@plt>
   39f38:	cmp	fp, #1
   39f3c:	beq	39f4c <Mat_VarWrite5+0x7e4>
   39f40:	ldr	r3, [r9, #16]
   39f44:	cmp	r3, #0
   39f48:	beq	39f08 <Mat_VarWrite5+0x7a0>
   39f4c:	mov	r0, r9
   39f50:	bl	169c <deflateEnd@plt>
   39f54:	mov	r0, r9
   39f58:	bl	14e0 <free@plt>
   39f5c:	b	399e4 <Mat_VarWrite5+0x27c>
   39f60:	ldr	r0, [pc, #28]	; 39f84 <Mat_VarWrite5+0x81c>
   39f64:	add	r0, pc, r0
   39f68:	bl	1690 <Mat_Critical@plt>
   39f6c:	mov	r0, r6
   39f70:	b	397b0 <Mat_VarWrite5+0x48>
   39f74:	.word	0x00006d95
   39f78:	.word	0x00006fe3
   39f7c:	.word	0x00006fbe
   39f80:	.word	0x0000688d
   39f84:	.word	0x00006801

00039f88 <Mat_VarReadNextInfo5>:
   39f88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39f8c:	subs	r5, r0, #0
   39f90:	sub	sp, sp, #88	; 0x58
   39f94:	bne	39fa0 <Mat_VarReadNextInfo5+0x18>
   39f98:	mov	r4, #0
   39f9c:	b	3a300 <Mat_VarReadNextInfo5+0x378>
   39fa0:	ldr	r0, [r5]
   39fa4:	bl	151c <ftell@plt>
   39fa8:	cmn	r0, #1
   39fac:	mov	r8, r0
   39fb0:	bne	39fc4 <Mat_VarReadNextInfo5+0x3c>
   39fb4:	ldr	r0, [pc, #1724]	; 3a678 <Mat_VarReadNextInfo5+0x6f0>
   39fb8:	add	r0, pc, r0
   39fbc:	bl	1690 <Mat_Critical@plt>
   39fc0:	b	39f98 <Mat_VarReadNextInfo5+0x10>
   39fc4:	add	r6, sp, #12
   39fc8:	ldr	r3, [r5]
   39fcc:	mov	r2, #1
   39fd0:	mov	r1, #4
   39fd4:	mov	r0, r6
   39fd8:	bl	1588 <fread@plt>
   39fdc:	cmp	r0, #0
   39fe0:	beq	39f98 <Mat_VarReadNextInfo5+0x10>
   39fe4:	add	r4, sp, #16
   39fe8:	ldr	r3, [r5]
   39fec:	mov	r2, #1
   39ff0:	mov	r1, #4
   39ff4:	mov	r0, r4
   39ff8:	bl	1588 <fread@plt>
   39ffc:	ldr	r3, [r5, #20]
   3a000:	cmp	r3, #0
   3a004:	beq	3a018 <Mat_VarReadNextInfo5+0x90>
   3a008:	mov	r0, r6
   3a00c:	bl	1a18 <Mat_int32Swap>
   3a010:	mov	r0, r4
   3a014:	bl	1a18 <Mat_int32Swap>
   3a018:	ldr	r1, [sp, #12]
   3a01c:	cmp	r1, #14
   3a020:	beq	3a3e8 <Mat_VarReadNextInfo5+0x460>
   3a024:	cmp	r1, #15
   3a028:	bne	3a66c <Mat_VarReadNextInfo5+0x6e4>
   3a02c:	add	r6, sp, #24
   3a030:	mov	r2, #64	; 0x40
   3a034:	mov	r1, #0
   3a038:	mov	r0, r6
   3a03c:	bl	166c <memset@plt>
   3a040:	bl	1570 <Mat_VarCalloc@plt>
   3a044:	mov	r1, #56	; 0x38
   3a048:	mov	r4, r0
   3a04c:	mov	r0, #1
   3a050:	str	r0, [r4, #48]	; 0x30
   3a054:	ldr	r7, [r4, #52]	; 0x34
   3a058:	bl	1468 <calloc@plt>
   3a05c:	ldr	r1, [pc, #1560]	; 3a67c <Mat_VarReadNextInfo5+0x6f4>
   3a060:	mov	r2, #56	; 0x38
   3a064:	add	r1, pc, r1
   3a068:	str	r0, [r7, #12]
   3a06c:	bl	16b4 <inflateInit_@plt>
   3a070:	subs	r7, r0, #0
   3a074:	beq	3a09c <Mat_VarReadNextInfo5+0x114>
   3a078:	mov	r0, r4
   3a07c:	bl	15f4 <Mat_VarFree@plt>
   3a080:	mov	r0, r7
   3a084:	bl	1558 <zError@plt>
   3a088:	mov	r1, r0
   3a08c:	ldr	r0, [pc, #1516]	; 3a680 <Mat_VarReadNextInfo5+0x6f8>
   3a090:	add	r0, pc, r0
   3a094:	bl	1690 <Mat_Critical@plt>
   3a098:	b	39f98 <Mat_VarReadNextInfo5+0x10>
   3a09c:	mov	r2, r6
   3a0a0:	mov	r1, r4
   3a0a4:	mov	r0, r5
   3a0a8:	bl	24dc <InflateVarTag>
   3a0ac:	ldr	r3, [r5, #20]
   3a0b0:	cmp	r3, #0
   3a0b4:	mov	r9, r0
   3a0b8:	beq	3a0cc <Mat_VarReadNextInfo5+0x144>
   3a0bc:	mov	r0, r6
   3a0c0:	bl	1a80 <Mat_uint32Swap>
   3a0c4:	add	r0, r6, #4
   3a0c8:	bl	1a80 <Mat_uint32Swap>
   3a0cc:	ldr	r3, [sp, #24]
   3a0d0:	cmp	r3, #14
   3a0d4:	beq	3a100 <Mat_VarReadNextInfo5+0x178>
   3a0d8:	ldr	r1, [sp, #16]
   3a0dc:	mov	r2, #1
   3a0e0:	sub	r1, r1, r9
   3a0e4:	ldr	r0, [r5]
   3a0e8:	bl	1714 <fseek@plt>
   3a0ec:	mov	r0, r4
   3a0f0:	bl	15f4 <Mat_VarFree@plt>
   3a0f4:	ldr	r0, [pc, #1416]	; 3a684 <Mat_VarReadNextInfo5+0x6fc>
   3a0f8:	add	r0, pc, r0
   3a0fc:	b	39fbc <Mat_VarReadNextInfo5+0x34>
   3a100:	mov	r2, r6
   3a104:	mov	r1, r4
   3a108:	mov	r0, r5
   3a10c:	bl	2640 <InflateArrayFlags>
   3a110:	ldr	r3, [r5, #20]
   3a114:	cmp	r3, #0
   3a118:	beq	3a134 <Mat_VarReadNextInfo5+0x1ac>
   3a11c:	mov	r0, r6
   3a120:	bl	1a80 <Mat_uint32Swap>
   3a124:	add	r0, r6, #8
   3a128:	bl	1a80 <Mat_uint32Swap>
   3a12c:	add	r0, r6, #12
   3a130:	bl	1a80 <Mat_uint32Swap>
   3a134:	ldr	r3, [sp, #24]
   3a138:	cmp	r3, #6
   3a13c:	bne	3a178 <Mat_VarReadNextInfo5+0x1f0>
   3a140:	ldr	r3, [sp, #32]
   3a144:	and	r1, r3, #2048	; 0x800
   3a148:	uxtb	r2, r3
   3a14c:	cmp	r2, #17
   3a150:	movhi	r2, #0
   3a154:	cmp	r2, #5
   3a158:	str	r1, [r4, #20]
   3a15c:	and	r1, r3, #1024	; 0x400
   3a160:	and	r3, r3, #512	; 0x200
   3a164:	str	r1, [r4, #24]
   3a168:	str	r3, [r4, #28]
   3a16c:	ldreq	r3, [sp, #36]	; 0x24
   3a170:	str	r2, [r4, #16]
   3a174:	streq	r3, [r4]
   3a178:	ldr	r3, [r4, #16]
   3a17c:	cmp	r3, #17
   3a180:	beq	3a2e8 <Mat_VarReadNextInfo5+0x360>
   3a184:	add	r3, sp, #88	; 0x58
   3a188:	mov	r2, #0
   3a18c:	str	r2, [r3, #-68]!	; 0xffffffbc
   3a190:	mov	r1, r4
   3a194:	str	r3, [sp]
   3a198:	mov	r2, r6
   3a19c:	mov	r3, #64	; 0x40
   3a1a0:	mov	r0, r5
   3a1a4:	bl	27a4 <InflateRankDims>
   3a1a8:	ldr	r3, [sp, #20]
   3a1ac:	cmp	r3, #0
   3a1b0:	addeq	r3, r6, #8
   3a1b4:	streq	r3, [sp, #20]
   3a1b8:	ldr	r3, [r5, #20]
   3a1bc:	moveq	r9, r7
   3a1c0:	movne	r9, #1
   3a1c4:	cmp	r3, #0
   3a1c8:	beq	3a1dc <Mat_VarReadNextInfo5+0x254>
   3a1cc:	mov	r0, r6
   3a1d0:	bl	1a80 <Mat_uint32Swap>
   3a1d4:	add	r0, r6, #4
   3a1d8:	bl	1a80 <Mat_uint32Swap>
   3a1dc:	ldr	r3, [sp, #24]
   3a1e0:	cmp	r3, #5
   3a1e4:	beq	3a30c <Mat_VarReadNextInfo5+0x384>
   3a1e8:	cmp	r9, #0
   3a1ec:	beq	3a1f8 <Mat_VarReadNextInfo5+0x270>
   3a1f0:	ldr	r0, [sp, #20]
   3a1f4:	bl	14e0 <free@plt>
   3a1f8:	mov	r2, r6
   3a1fc:	mov	r1, r4
   3a200:	mov	r0, r5
   3a204:	bl	2acc <InflateVarNameTag>
   3a208:	ldr	r3, [r5, #20]
   3a20c:	cmp	r3, #0
   3a210:	beq	3a21c <Mat_VarReadNextInfo5+0x294>
   3a214:	mov	r0, r6
   3a218:	bl	1a80 <Mat_uint32Swap>
   3a21c:	ldr	r7, [sp, #24]
   3a220:	cmp	r7, #1
   3a224:	bne	3a384 <Mat_VarReadNextInfo5+0x3fc>
   3a228:	ldr	r3, [r5, #20]
   3a22c:	cmp	r3, #0
   3a230:	ldreq	r6, [sp, #28]
   3a234:	beq	3a244 <Mat_VarReadNextInfo5+0x2bc>
   3a238:	add	r0, r6, #4
   3a23c:	bl	1a80 <Mat_uint32Swap>
   3a240:	mov	r6, r0
   3a244:	tst	r6, #7
   3a248:	bicne	r7, r6, #7
   3a24c:	addne	r7, r7, #8
   3a250:	moveq	r7, r6
   3a254:	add	r0, r7, #1
   3a258:	bl	15ac <malloc@plt>
   3a25c:	cmp	r0, #0
   3a260:	mov	r2, r0
   3a264:	str	r0, [r4, #36]	; 0x24
   3a268:	beq	3a288 <Mat_VarReadNextInfo5+0x300>
   3a26c:	mov	r3, r7
   3a270:	mov	r1, r4
   3a274:	mov	r0, r5
   3a278:	bl	2c30 <InflateVarName>
   3a27c:	ldr	r3, [r4, #36]	; 0x24
   3a280:	mov	r2, #0
   3a284:	strb	r2, [r3, r6]
   3a288:	ldr	r3, [r4, #16]
   3a28c:	cmp	r3, #2
   3a290:	bne	3a3d0 <Mat_VarReadNextInfo5+0x448>
   3a294:	mov	r1, r4
   3a298:	mov	r0, r5
   3a29c:	bl	37640 <ReadNextStructField>
   3a2a0:	ldr	r3, [r4, #52]	; 0x34
   3a2a4:	mov	r2, #1
   3a2a8:	ldr	r0, [r5]
   3a2ac:	ldr	r3, [r3, #12]
   3a2b0:	ldr	r1, [r3, #4]
   3a2b4:	rsb	r1, r1, #0
   3a2b8:	bl	1714 <fseek@plt>
   3a2bc:	ldr	r0, [r5]
   3a2c0:	ldr	r6, [r4, #52]	; 0x34
   3a2c4:	bl	151c <ftell@plt>
   3a2c8:	ldr	r3, [r4, #52]	; 0x34
   3a2cc:	str	r0, [r6]
   3a2d0:	ldr	r3, [r3]
   3a2d4:	cmn	r3, #1
   3a2d8:	bne	3a2e8 <Mat_VarReadNextInfo5+0x360>
   3a2dc:	ldr	r0, [pc, #932]	; 3a688 <Mat_VarReadNextInfo5+0x700>
   3a2e0:	add	r0, pc, r0
   3a2e4:	bl	1690 <Mat_Critical@plt>
   3a2e8:	ldr	r1, [sp, #16]
   3a2ec:	mov	r2, #0
   3a2f0:	add	r1, r1, #8
   3a2f4:	add	r1, r1, r8
   3a2f8:	ldr	r0, [r5]
   3a2fc:	bl	1714 <fseek@plt>
   3a300:	mov	r0, r4
   3a304:	add	sp, sp, #88	; 0x58
   3a308:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a30c:	ldr	r0, [sp, #28]
   3a310:	add	r3, r0, #3
   3a314:	cmp	r0, #0
   3a318:	movlt	r0, r3
   3a31c:	asr	r0, r0, #2
   3a320:	str	r0, [r4, #4]
   3a324:	lsl	r0, r0, #2
   3a328:	bl	15ac <malloc@plt>
   3a32c:	ldr	r3, [r5, #20]
   3a330:	cmp	r3, #0
   3a334:	str	r0, [r4, #32]
   3a338:	ldreq	r1, [sp, #20]
   3a33c:	beq	3a374 <Mat_VarReadNextInfo5+0x3ec>
   3a340:	ldr	r3, [r4, #4]
   3a344:	cmp	r7, r3
   3a348:	bge	3a1e8 <Mat_VarReadNextInfo5+0x260>
   3a34c:	ldr	r0, [sp, #20]
   3a350:	ldr	sl, [r4, #32]
   3a354:	add	r0, r0, r7, lsl #2
   3a358:	bl	1a80 <Mat_uint32Swap>
   3a35c:	str	r0, [sl, r7, lsl #2]
   3a360:	add	r7, r7, #1
   3a364:	b	3a340 <Mat_VarReadNextInfo5+0x3b8>
   3a368:	ldr	r2, [r1, r3, lsl #2]
   3a36c:	str	r2, [r0, r3, lsl #2]
   3a370:	add	r3, r3, #1
   3a374:	ldr	r2, [r4, #4]
   3a378:	cmp	r3, r2
   3a37c:	blt	3a368 <Mat_VarReadNextInfo5+0x3e0>
   3a380:	b	3a1e8 <Mat_VarReadNextInfo5+0x260>
   3a384:	uxth	r3, r7
   3a388:	cmp	r3, #1
   3a38c:	bne	3a288 <Mat_VarReadNextInfo5+0x300>
   3a390:	lsr	r9, r7, #16
   3a394:	sub	r3, r9, #1
   3a398:	cmp	r3, #3
   3a39c:	bhi	3a288 <Mat_VarReadNextInfo5+0x300>
   3a3a0:	add	r0, r9, #1
   3a3a4:	bl	15ac <malloc@plt>
   3a3a8:	cmp	r0, #0
   3a3ac:	str	r0, [r4, #36]	; 0x24
   3a3b0:	beq	3a288 <Mat_VarReadNextInfo5+0x300>
   3a3b4:	mov	r2, r9
   3a3b8:	add	r1, r6, #4
   3a3bc:	bl	14f8 <memcpy@plt>
   3a3c0:	ldr	r3, [r4, #36]	; 0x24
   3a3c4:	mov	r2, #0
   3a3c8:	strb	r2, [r3, r7, lsr #16]
   3a3cc:	b	3a288 <Mat_VarReadNextInfo5+0x300>
   3a3d0:	cmp	r3, #1
   3a3d4:	bne	3a2a0 <Mat_VarReadNextInfo5+0x318>
   3a3d8:	mov	r1, r4
   3a3dc:	mov	r0, r5
   3a3e0:	bl	382ac <ReadNextCell>
   3a3e4:	b	3a2a0 <Mat_VarReadNextInfo5+0x318>
   3a3e8:	bl	1570 <Mat_VarCalloc@plt>
   3a3ec:	add	r6, sp, #24
   3a3f0:	ldr	r3, [r5]
   3a3f4:	mov	r2, #6
   3a3f8:	mov	r1, #4
   3a3fc:	mov	r4, r0
   3a400:	mov	r0, r6
   3a404:	bl	1588 <fread@plt>
   3a408:	ldr	r3, [r5, #20]
   3a40c:	cmp	r3, #0
   3a410:	beq	3a444 <Mat_VarReadNextInfo5+0x4bc>
   3a414:	mov	r0, r6
   3a418:	bl	1a80 <Mat_uint32Swap>
   3a41c:	add	r0, r6, #4
   3a420:	bl	1a80 <Mat_uint32Swap>
   3a424:	add	r0, r6, #8
   3a428:	bl	1a80 <Mat_uint32Swap>
   3a42c:	add	r0, r6, #12
   3a430:	bl	1a80 <Mat_uint32Swap>
   3a434:	add	r0, r6, #16
   3a438:	bl	1a80 <Mat_uint32Swap>
   3a43c:	add	r0, r6, #20
   3a440:	bl	1a80 <Mat_uint32Swap>
   3a444:	ldr	r3, [sp, #24]
   3a448:	cmp	r3, #6
   3a44c:	bne	3a488 <Mat_VarReadNextInfo5+0x500>
   3a450:	ldr	r3, [sp, #32]
   3a454:	and	r1, r3, #2048	; 0x800
   3a458:	uxtb	r2, r3
   3a45c:	cmp	r2, #17
   3a460:	movhi	r2, #0
   3a464:	cmp	r2, #5
   3a468:	str	r1, [r4, #20]
   3a46c:	and	r1, r3, #1024	; 0x400
   3a470:	and	r3, r3, #512	; 0x200
   3a474:	str	r1, [r4, #24]
   3a478:	str	r3, [r4, #28]
   3a47c:	ldreq	r3, [sp, #36]	; 0x24
   3a480:	str	r2, [r4, #16]
   3a484:	streq	r3, [r4]
   3a488:	ldr	r3, [sp, #44]	; 0x2c
   3a48c:	ldr	r2, [sp, #40]	; 0x28
   3a490:	mov	r1, r4
   3a494:	mov	r0, r5
   3a498:	bl	33c58 <ReadRankDims>
   3a49c:	ldr	r3, [r5]
   3a4a0:	mov	r2, #2
   3a4a4:	mov	r1, #4
   3a4a8:	mov	r0, r6
   3a4ac:	bl	1588 <fread@plt>
   3a4b0:	ldr	r3, [r5, #20]
   3a4b4:	cmp	r3, #0
   3a4b8:	beq	3a4c4 <Mat_VarReadNextInfo5+0x53c>
   3a4bc:	mov	r0, r6
   3a4c0:	bl	1a80 <Mat_uint32Swap>
   3a4c4:	ldr	r7, [sp, #24]
   3a4c8:	cmp	r7, #1
   3a4cc:	bne	3a590 <Mat_VarReadNextInfo5+0x608>
   3a4d0:	ldr	r3, [r5, #20]
   3a4d4:	cmp	r3, #0
   3a4d8:	ldreq	r7, [sp, #28]
   3a4dc:	beq	3a4ec <Mat_VarReadNextInfo5+0x564>
   3a4e0:	add	r0, r6, #4
   3a4e4:	bl	1a80 <Mat_uint32Swap>
   3a4e8:	mov	r7, r0
   3a4ec:	tst	r7, #7
   3a4f0:	bicne	r6, r7, #7
   3a4f4:	addne	r6, r6, #8
   3a4f8:	moveq	r6, r7
   3a4fc:	add	r0, r6, #1
   3a500:	bl	15ac <malloc@plt>
   3a504:	cmp	r0, #0
   3a508:	str	r0, [r4, #36]	; 0x24
   3a50c:	beq	3a54c <Mat_VarReadNextInfo5+0x5c4>
   3a510:	ldr	r3, [r5]
   3a514:	mov	r2, r6
   3a518:	mov	r1, #1
   3a51c:	bl	1588 <fread@plt>
   3a520:	cmp	r6, r0
   3a524:	mov	r6, #0
   3a528:	ldreq	r3, [r4, #36]	; 0x24
   3a52c:	strbeq	r6, [r3, r7]
   3a530:	beq	3a54c <Mat_VarReadNextInfo5+0x5c4>
   3a534:	ldr	r0, [r4, #36]	; 0x24
   3a538:	bl	14e0 <free@plt>
   3a53c:	ldr	r0, [pc, #328]	; 3a68c <Mat_VarReadNextInfo5+0x704>
   3a540:	str	r6, [r4, #36]	; 0x24
   3a544:	add	r0, pc, r0
   3a548:	bl	1690 <Mat_Critical@plt>
   3a54c:	ldr	r3, [r4, #16]
   3a550:	cmp	r3, #2
   3a554:	bne	3a5dc <Mat_VarReadNextInfo5+0x654>
   3a558:	mov	r1, r4
   3a55c:	mov	r0, r5
   3a560:	bl	37640 <ReadNextStructField>
   3a564:	ldr	r0, [r5]
   3a568:	ldr	r6, [r4, #52]	; 0x34
   3a56c:	bl	151c <ftell@plt>
   3a570:	ldr	r3, [r4, #52]	; 0x34
   3a574:	str	r0, [r6]
   3a578:	ldr	r3, [r3]
   3a57c:	cmn	r3, #1
   3a580:	bne	3a2e8 <Mat_VarReadNextInfo5+0x360>
   3a584:	ldr	r0, [pc, #260]	; 3a690 <Mat_VarReadNextInfo5+0x708>
   3a588:	add	r0, pc, r0
   3a58c:	b	3a2e4 <Mat_VarReadNextInfo5+0x35c>
   3a590:	uxth	r3, r7
   3a594:	cmp	r3, #1
   3a598:	bne	3a54c <Mat_VarReadNextInfo5+0x5c4>
   3a59c:	lsr	r9, r7, #16
   3a5a0:	sub	r3, r9, #1
   3a5a4:	cmp	r3, #3
   3a5a8:	bhi	3a54c <Mat_VarReadNextInfo5+0x5c4>
   3a5ac:	add	r0, r9, #1
   3a5b0:	bl	15ac <malloc@plt>
   3a5b4:	cmp	r0, #0
   3a5b8:	str	r0, [r4, #36]	; 0x24
   3a5bc:	beq	3a54c <Mat_VarReadNextInfo5+0x5c4>
   3a5c0:	mov	r2, r9
   3a5c4:	add	r1, r6, #4
   3a5c8:	bl	14f8 <memcpy@plt>
   3a5cc:	ldr	r3, [r4, #36]	; 0x24
   3a5d0:	mov	r2, #0
   3a5d4:	strb	r2, [r3, r7, lsr #16]
   3a5d8:	b	3a54c <Mat_VarReadNextInfo5+0x5c4>
   3a5dc:	cmp	r3, #1
   3a5e0:	bne	3a5f4 <Mat_VarReadNextInfo5+0x66c>
   3a5e4:	mov	r1, r4
   3a5e8:	mov	r0, r5
   3a5ec:	bl	382ac <ReadNextCell>
   3a5f0:	b	3a564 <Mat_VarReadNextInfo5+0x5dc>
   3a5f4:	cmp	r3, #16
   3a5f8:	bne	3a564 <Mat_VarReadNextInfo5+0x5dc>
   3a5fc:	add	r1, sp, #88	; 0x58
   3a600:	mov	r3, #1
   3a604:	str	r3, [r1, #-68]!	; 0xffffffbc
   3a608:	mov	r0, r4
   3a60c:	bl	3bee0 <SafeMulDims>
   3a610:	mov	r2, #4
   3a614:	str	r2, [r4, #12]
   3a618:	ldr	r1, [sp, #20]
   3a61c:	mov	r0, r4
   3a620:	bl	3bf40 <SafeMul>
   3a624:	ldr	r0, [r4]
   3a628:	bl	15ac <malloc@plt>
   3a62c:	cmp	r0, #0
   3a630:	mov	r6, r0
   3a634:	str	r0, [r4, #40]	; 0x28
   3a638:	movne	r7, #0
   3a63c:	bne	3a65c <Mat_VarReadNextInfo5+0x6d4>
   3a640:	str	r0, [r4, #12]
   3a644:	str	r0, [r4]
   3a648:	b	3a564 <Mat_VarReadNextInfo5+0x5dc>
   3a64c:	mov	r0, r5
   3a650:	bl	1738 <Mat_VarReadNextInfo@plt>
   3a654:	str	r0, [r6, r7, lsl #2]
   3a658:	add	r7, r7, #1
   3a65c:	ldr	r3, [sp, #20]
   3a660:	cmp	r7, r3
   3a664:	bcc	3a64c <Mat_VarReadNextInfo5+0x6c4>
   3a668:	b	3a564 <Mat_VarReadNextInfo5+0x5dc>
   3a66c:	ldr	r0, [pc, #32]	; 3a694 <Mat_VarReadNextInfo5+0x70c>
   3a670:	add	r0, pc, r0
   3a674:	b	3a094 <Mat_VarReadNextInfo5+0x10c>
   3a678:	.word	0x000067ad
   3a67c:	.word	0x00006adf
   3a680:	.word	0x00006ad2
   3a684:	.word	0x000068f8
   3a688:	.word	0x00006485
   3a68c:	.word	0x00006242
   3a690:	.word	0x000061dd
   3a694:	.word	0x0000650a

0003a698 <Mat_Create4>:
   3a698:	ldr	r1, [pc, #148]	; 3a734 <Mat_Create4+0x9c>
   3a69c:	push	{r4, r5, r6, lr}
   3a6a0:	add	r1, pc, r1
   3a6a4:	mov	r6, r0
   3a6a8:	bl	14bc <fopen@plt>
   3a6ac:	subs	r5, r0, #0
   3a6b0:	moveq	r4, r5
   3a6b4:	beq	3a6dc <Mat_Create4+0x44>
   3a6b8:	mov	r0, #44	; 0x2c
   3a6bc:	bl	15ac <malloc@plt>
   3a6c0:	subs	r4, r0, #0
   3a6c4:	bne	3a6e4 <Mat_Create4+0x4c>
   3a6c8:	mov	r0, r5
   3a6cc:	bl	16a8 <fclose@plt>
   3a6d0:	ldr	r0, [pc, #96]	; 3a738 <Mat_Create4+0xa0>
   3a6d4:	add	r0, pc, r0
   3a6d8:	bl	1690 <Mat_Critical@plt>
   3a6dc:	mov	r0, r4
   3a6e0:	pop	{r4, r5, r6, pc}
   3a6e4:	ldr	r0, [pc, #80]	; 3a73c <Mat_Create4+0xa4>
   3a6e8:	str	r5, [r4]
   3a6ec:	mov	r5, #0
   3a6f0:	str	r5, [r4, #4]
   3a6f4:	str	r5, [r4, #8]
   3a6f8:	mov	r1, r6
   3a6fc:	add	r0, pc, r0
   3a700:	bl	1e64 <strdup_printf>
   3a704:	mov	r3, #16
   3a708:	str	r3, [r4, #16]
   3a70c:	str	r5, [r4, #20]
   3a710:	str	r5, [r4, #24]
   3a714:	str	r5, [r4, #28]
   3a718:	str	r5, [r4, #32]
   3a71c:	str	r5, [r4, #36]	; 0x24
   3a720:	str	r5, [r4, #40]	; 0x28
   3a724:	str	r0, [r4, #12]
   3a728:	mov	r0, r4
   3a72c:	bl	1660 <Mat_Rewind@plt>
   3a730:	b	3a6dc <Mat_Create4+0x44>
   3a734:	.word	0x00006110
   3a738:	.word	0x000064d9
   3a73c:	.word	0x000067e7

0003a740 <Mat_VarWrite4>:
   3a740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a744:	vpush	{d8}
   3a748:	cmp	r1, #0
   3a74c:	cmpne	r0, #0
   3a750:	sub	sp, sp, #44	; 0x2c
   3a754:	beq	3ac84 <Mat_VarWrite4+0x544>
   3a758:	ldr	r2, [r1, #36]	; 0x24
   3a75c:	cmp	r2, #0
   3a760:	beq	3ac84 <Mat_VarWrite4+0x544>
   3a764:	ldr	r4, [r1, #4]
   3a768:	cmp	r4, #2
   3a76c:	bne	3ac84 <Mat_VarWrite4+0x544>
   3a770:	ldr	r3, [r1, #8]
   3a774:	sub	r3, r3, #2
   3a778:	cmp	r3, #7
   3a77c:	addls	pc, pc, r3, lsl #2
   3a780:	b	3a8f8 <Mat_VarWrite4+0x1b8>
   3a784:	b	3a8cc <Mat_VarWrite4+0x18c>
   3a788:	b	3a8bc <Mat_VarWrite4+0x17c>
   3a78c:	b	3a8c4 <Mat_VarWrite4+0x184>
   3a790:	b	3a8b4 <Mat_VarWrite4+0x174>
   3a794:	b	3a8f8 <Mat_VarWrite4+0x1b8>
   3a798:	b	3a8ac <Mat_VarWrite4+0x16c>
   3a79c:	b	3a8f8 <Mat_VarWrite4+0x1b8>
   3a7a0:	b	3a7a4 <Mat_VarWrite4+0x64>
   3a7a4:	mov	r3, #0
   3a7a8:	mov	r6, r0
   3a7ac:	mov	r0, r2
   3a7b0:	mov	r5, r1
   3a7b4:	str	r3, [sp, #20]
   3a7b8:	bl	1630 <strlen@plt>
   3a7bc:	mov	r2, #2
   3a7c0:	mov	r1, #0
   3a7c4:	add	r0, r0, #1
   3a7c8:	str	r0, [sp, #36]	; 0x24
   3a7cc:	ldr	r0, [r6]
   3a7d0:	bl	1714 <fseek@plt>
   3a7d4:	ldr	r4, [r5, #16]
   3a7d8:	cmp	r4, #12
   3a7dc:	bhi	3a8a4 <Mat_VarWrite4+0x164>
   3a7e0:	mov	r8, #1
   3a7e4:	lsl	r4, r8, r4
   3a7e8:	tst	r4, #7872	; 0x1ec0
   3a7ec:	bne	3a80c <Mat_VarWrite4+0xcc>
   3a7f0:	tst	r4, #32
   3a7f4:	bne	3a908 <Mat_VarWrite4+0x1c8>
   3a7f8:	ands	r4, r4, #16
   3a7fc:	beq	3a8f8 <Mat_VarWrite4+0x1b8>
   3a800:	ldr	r3, [sp, #20]
   3a804:	add	r3, r3, r8
   3a808:	str	r3, [sp, #20]
   3a80c:	ldr	r1, [r5, #4]
   3a810:	mov	r3, #0
   3a814:	mov	r7, #1
   3a818:	cmp	r3, r1
   3a81c:	ldr	r2, [r5, #32]
   3a820:	blt	3a8d4 <Mat_VarWrite4+0x194>
   3a824:	ldr	r3, [r2]
   3a828:	mov	r1, #20
   3a82c:	str	r3, [sp, #24]
   3a830:	ldr	r3, [r2, #4]
   3a834:	add	r0, sp, r1
   3a838:	str	r3, [sp, #28]
   3a83c:	ldr	r3, [r5, #20]
   3a840:	mov	r2, #1
   3a844:	adds	r3, r3, #0
   3a848:	movne	r3, #1
   3a84c:	str	r3, [sp, #32]
   3a850:	ldr	r3, [r6]
   3a854:	bl	157c <fwrite@plt>
   3a858:	ldr	r3, [r6]
   3a85c:	ldr	r2, [sp, #36]	; 0x24
   3a860:	mov	r1, #1
   3a864:	ldr	r0, [r5, #36]	; 0x24
   3a868:	bl	157c <fwrite@plt>
   3a86c:	ldr	r4, [r5, #20]
   3a870:	cmp	r4, #0
   3a874:	beq	3a8e4 <Mat_VarWrite4+0x1a4>
   3a878:	ldr	r4, [r5, #40]	; 0x28
   3a87c:	ldr	r3, [r6]
   3a880:	mov	r2, r7
   3a884:	ldr	r1, [r5, #12]
   3a888:	ldr	r0, [r4]
   3a88c:	bl	157c <fwrite@plt>
   3a890:	ldr	r3, [r6]
   3a894:	ldr	r1, [r5, #12]
   3a898:	ldr	r0, [r4, #4]
   3a89c:	mov	r2, r7
   3a8a0:	bl	157c <fwrite@plt>
   3a8a4:	mov	r4, #0
   3a8a8:	b	3a8f8 <Mat_VarWrite4+0x1b8>
   3a8ac:	mov	r3, #10
   3a8b0:	b	3a7a8 <Mat_VarWrite4+0x68>
   3a8b4:	mov	r3, #20
   3a8b8:	b	3a7a8 <Mat_VarWrite4+0x68>
   3a8bc:	mov	r3, #30
   3a8c0:	b	3a7a8 <Mat_VarWrite4+0x68>
   3a8c4:	mov	r3, #40	; 0x28
   3a8c8:	b	3a7a8 <Mat_VarWrite4+0x68>
   3a8cc:	mov	r3, #50	; 0x32
   3a8d0:	b	3a7a8 <Mat_VarWrite4+0x68>
   3a8d4:	ldr	r2, [r2, r3, lsl #2]
   3a8d8:	add	r3, r3, #1
   3a8dc:	mul	r7, r2, r7
   3a8e0:	b	3a818 <Mat_VarWrite4+0xd8>
   3a8e4:	ldr	r3, [r6]
   3a8e8:	mov	r2, r7
   3a8ec:	ldr	r1, [r5, #12]
   3a8f0:	ldr	r0, [r5, #40]	; 0x28
   3a8f4:	bl	157c <fwrite@plt>
   3a8f8:	mov	r0, r4
   3a8fc:	add	sp, sp, #44	; 0x2c
   3a900:	vpop	{d8}
   3a904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a908:	ldr	r0, [r5, #8]
   3a90c:	bl	1600 <Mat_SizeOf@plt>
   3a910:	ldr	r4, [r5, #40]	; 0x28
   3a914:	ldr	r3, [sp, #20]
   3a918:	mov	r1, #20
   3a91c:	add	r3, r3, #2
   3a920:	str	r3, [sp, #20]
   3a924:	ldr	r3, [r4, #16]
   3a928:	cmp	r3, #0
   3a92c:	subgt	r3, r3, #-1073741823	; 0xc0000001
   3a930:	ldrgt	r2, [r4, #12]
   3a934:	ldrgt	r8, [r2, r3, lsl #2]
   3a938:	ldr	r3, [r5, #20]
   3a93c:	addgt	r8, r8, #1
   3a940:	cmp	r3, #0
   3a944:	movne	r3, #4
   3a948:	moveq	r3, #3
   3a94c:	str	r8, [sp, #24]
   3a950:	str	r3, [sp, #28]
   3a954:	mov	r2, #1
   3a958:	ldr	r3, [r6]
   3a95c:	mov	r7, r0
   3a960:	mov	r8, #0
   3a964:	add	r0, sp, r1
   3a968:	str	r8, [sp, #32]
   3a96c:	bl	157c <fwrite@plt>
   3a970:	ldr	r3, [r6]
   3a974:	ldr	r2, [sp, #36]	; 0x24
   3a978:	mov	r1, #1
   3a97c:	ldr	r0, [r5, #36]	; 0x24
   3a980:	bl	157c <fwrite@plt>
   3a984:	add	r3, sp, #8
   3a988:	str	r3, [sp, #4]
   3a98c:	ldr	r3, [r4, #16]
   3a990:	sub	r3, r3, #1
   3a994:	cmp	r8, r3
   3a998:	blt	3aa80 <Mat_VarWrite4+0x340>
   3a99c:	ldr	r3, [r5, #32]
   3a9a0:	add	r8, sp, #40	; 0x28
   3a9a4:	mov	r1, #8
   3a9a8:	vldr	s14, [r3]
   3a9ac:	mov	fp, #8
   3a9b0:	vcvt.f64.u32	d7, s14
   3a9b4:	vmov	r2, r3, d7
   3a9b8:	strd	r2, [r8, #-32]!	; 0xffffffe0
   3a9bc:	ldr	r3, [r6]
   3a9c0:	mov	r2, #1
   3a9c4:	mov	r0, r8
   3a9c8:	bl	157c <fwrite@plt>
   3a9cc:	mov	r3, #0
   3a9d0:	ldr	r2, [r4, #16]
   3a9d4:	sub	r2, r2, #1
   3a9d8:	cmp	r3, r2
   3a9dc:	blt	3aafc <Mat_VarWrite4+0x3bc>
   3a9e0:	ldr	r3, [r5, #32]
   3a9e4:	mov	r2, #1
   3a9e8:	mov	r1, #8
   3a9ec:	vldr	s14, [r3, #4]
   3a9f0:	mov	r0, r8
   3a9f4:	ldr	r3, [r6]
   3a9f8:	vcvt.f64.u32	d7, s14
   3a9fc:	vstr	d7, [sp, #8]
   3aa00:	bl	157c <fwrite@plt>
   3aa04:	ldr	r5, [r5, #20]
   3aa08:	mov	r2, #0
   3aa0c:	mov	r3, #0
   3aa10:	cmp	r5, #0
   3aa14:	strd	r2, [sp, #8]
   3aa18:	ldr	sl, [r4, #24]
   3aa1c:	beq	3ac50 <Mat_VarWrite4+0x510>
   3aa20:	ldr	r3, [sl]
   3aa24:	mov	r5, #0
   3aa28:	str	r3, [sp]
   3aa2c:	ldr	r3, [sl, #4]
   3aa30:	str	r3, [sp, #4]
   3aa34:	ldr	r3, [r4, #16]
   3aa38:	sub	r3, r3, #1
   3aa3c:	cmp	r5, r3
   3aa40:	blt	3ab5c <Mat_VarWrite4+0x41c>
   3aa44:	ldr	r3, [r6]
   3aa48:	mov	r2, #1
   3aa4c:	mov	r1, r7
   3aa50:	mov	r0, r8
   3aa54:	bl	157c <fwrite@plt>
   3aa58:	mov	r5, #0
   3aa5c:	ldr	r3, [r4, #16]
   3aa60:	sub	r3, r3, #1
   3aa64:	cmp	r5, r3
   3aa68:	blt	3abb8 <Mat_VarWrite4+0x478>
   3aa6c:	ldr	r3, [r6]
   3aa70:	mov	r2, #1
   3aa74:	mov	r1, r7
   3aa78:	mov	r0, r8
   3aa7c:	b	3a8a0 <Mat_VarWrite4+0x160>
   3aa80:	ldr	r2, [r4, #12]
   3aa84:	lsl	r3, r8, #2
   3aa88:	mov	fp, #8
   3aa8c:	ldr	r9, [r2, r8, lsl #2]
   3aa90:	add	r3, r3, #4
   3aa94:	str	r3, [sp]
   3aa98:	lsl	sl, r9, #2
   3aa9c:	ldr	r3, [r4, #12]
   3aaa0:	ldr	r2, [sp]
   3aaa4:	ldr	r3, [r3, r2]
   3aaa8:	cmp	r9, r3
   3aaac:	bge	3aabc <Mat_VarWrite4+0x37c>
   3aab0:	ldr	r3, [r4, #20]
   3aab4:	cmp	r9, r3
   3aab8:	blt	3aac4 <Mat_VarWrite4+0x384>
   3aabc:	add	r8, r8, #1
   3aac0:	b	3a98c <Mat_VarWrite4+0x24c>
   3aac4:	ldr	r3, [r4, #4]
   3aac8:	mov	r2, #1
   3aacc:	mov	r1, fp
   3aad0:	ldr	r3, [r3, sl]
   3aad4:	ldr	r0, [sp, #4]
   3aad8:	add	r3, r3, #1
   3aadc:	add	r9, r9, #1
   3aae0:	vmov	s15, r3
   3aae4:	ldr	r3, [r6]
   3aae8:	add	sl, sl, #4
   3aaec:	vcvt.f64.s32	d7, s15
   3aaf0:	vstr	d7, [sp, #8]
   3aaf4:	bl	157c <fwrite@plt>
   3aaf8:	b	3aa9c <Mat_VarWrite4+0x35c>
   3aafc:	ldr	r2, [r4, #12]
   3ab00:	lsl	sl, r3, #2
   3ab04:	add	sl, sl, #4
   3ab08:	ldr	r9, [r2, r3, lsl #2]
   3ab0c:	add	r3, r3, #1
   3ab10:	vmov	s16, r3
   3ab14:	ldr	r3, [r4, #12]
   3ab18:	ldr	r3, [r3, sl]
   3ab1c:	cmp	r9, r3
   3ab20:	bge	3ab30 <Mat_VarWrite4+0x3f0>
   3ab24:	ldr	r3, [r4, #20]
   3ab28:	cmp	r9, r3
   3ab2c:	blt	3ab38 <Mat_VarWrite4+0x3f8>
   3ab30:	vmov	r3, s16
   3ab34:	b	3a9d0 <Mat_VarWrite4+0x290>
   3ab38:	vcvt.f64.s32	d7, s16
   3ab3c:	ldr	r3, [r6]
   3ab40:	mov	r2, #1
   3ab44:	mov	r1, fp
   3ab48:	mov	r0, r8
   3ab4c:	add	r9, r9, #1
   3ab50:	vstr	d7, [sp, #8]
   3ab54:	bl	157c <fwrite@plt>
   3ab58:	b	3ab14 <Mat_VarWrite4+0x3d4>
   3ab5c:	ldr	r3, [r4, #12]
   3ab60:	lsl	sl, r5, #2
   3ab64:	add	sl, sl, #4
   3ab68:	ldr	r9, [r3, r5, lsl #2]
   3ab6c:	ldr	r3, [sp]
   3ab70:	mla	fp, r7, r9, r3
   3ab74:	ldr	r3, [r4, #12]
   3ab78:	ldr	r3, [r3, sl]
   3ab7c:	cmp	r9, r3
   3ab80:	bge	3ab90 <Mat_VarWrite4+0x450>
   3ab84:	ldr	r3, [r4, #20]
   3ab88:	cmp	r9, r3
   3ab8c:	blt	3ab98 <Mat_VarWrite4+0x458>
   3ab90:	add	r5, r5, #1
   3ab94:	b	3aa34 <Mat_VarWrite4+0x2f4>
   3ab98:	mov	r0, fp
   3ab9c:	ldr	r3, [r6]
   3aba0:	mov	r2, #1
   3aba4:	mov	r1, r7
   3aba8:	bl	157c <fwrite@plt>
   3abac:	add	r9, r9, #1
   3abb0:	add	fp, fp, r7
   3abb4:	b	3ab74 <Mat_VarWrite4+0x434>
   3abb8:	ldr	r3, [r4, #12]
   3abbc:	lsl	sl, r5, #2
   3abc0:	add	sl, sl, #4
   3abc4:	ldr	r9, [r3, r5, lsl #2]
   3abc8:	ldr	r3, [sp, #4]
   3abcc:	mla	fp, r7, r9, r3
   3abd0:	ldr	r3, [r4, #12]
   3abd4:	ldr	r3, [r3, sl]
   3abd8:	cmp	r9, r3
   3abdc:	bge	3abec <Mat_VarWrite4+0x4ac>
   3abe0:	ldr	r3, [r4, #20]
   3abe4:	cmp	r9, r3
   3abe8:	blt	3abf4 <Mat_VarWrite4+0x4b4>
   3abec:	add	r5, r5, #1
   3abf0:	b	3aa5c <Mat_VarWrite4+0x31c>
   3abf4:	mov	r0, fp
   3abf8:	ldr	r3, [r6]
   3abfc:	mov	r2, #1
   3ac00:	mov	r1, r7
   3ac04:	bl	157c <fwrite@plt>
   3ac08:	add	r9, r9, #1
   3ac0c:	add	fp, fp, r7
   3ac10:	b	3abd0 <Mat_VarWrite4+0x490>
   3ac14:	ldr	r2, [r4, #12]
   3ac18:	lsl	r3, r5, #2
   3ac1c:	add	r3, r3, #4
   3ac20:	ldr	r9, [r2, r5, lsl #2]
   3ac24:	str	r3, [sp]
   3ac28:	mla	fp, r7, r9, sl
   3ac2c:	ldr	r3, [r4, #12]
   3ac30:	ldr	r2, [sp]
   3ac34:	ldr	r3, [r3, r2]
   3ac38:	cmp	r9, r3
   3ac3c:	bge	3ac4c <Mat_VarWrite4+0x50c>
   3ac40:	ldr	r3, [r4, #20]
   3ac44:	cmp	r9, r3
   3ac48:	blt	3ac64 <Mat_VarWrite4+0x524>
   3ac4c:	add	r5, r5, #1
   3ac50:	ldr	r3, [r4, #16]
   3ac54:	sub	r3, r3, #1
   3ac58:	cmp	r5, r3
   3ac5c:	blt	3ac14 <Mat_VarWrite4+0x4d4>
   3ac60:	b	3aa6c <Mat_VarWrite4+0x32c>
   3ac64:	mov	r0, fp
   3ac68:	ldr	r3, [r6]
   3ac6c:	mov	r2, #1
   3ac70:	mov	r1, r7
   3ac74:	bl	157c <fwrite@plt>
   3ac78:	add	r9, r9, #1
   3ac7c:	add	fp, fp, r7
   3ac80:	b	3ac2c <Mat_VarWrite4+0x4ec>
   3ac84:	mvn	r4, #0
   3ac88:	b	3a8f8 <Mat_VarWrite4+0x1b8>

0003ac8c <Mat_VarRead4>:
   3ac8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ac90:	sub	sp, sp, #28
   3ac94:	mov	r6, r1
   3ac98:	add	r1, sp, #24
   3ac9c:	mov	r4, #1
   3aca0:	mov	r5, r0
   3aca4:	str	r4, [r1, #-16]!
   3aca8:	mov	r0, r6
   3acac:	bl	3bee0 <SafeMulDims>
   3acb0:	ldr	r3, [r6, #52]	; 0x34
   3acb4:	mov	r2, #0
   3acb8:	ldr	r0, [r5]
   3acbc:	ldr	r1, [r3]
   3acc0:	bl	1714 <fseek@plt>
   3acc4:	ldr	r3, [r6, #16]
   3acc8:	cmp	r3, #5
   3accc:	beq	3add0 <Mat_VarRead4+0x144>
   3acd0:	cmp	r3, #6
   3acd4:	beq	3ad1c <Mat_VarRead4+0x90>
   3acd8:	cmp	r3, #4
   3acdc:	bne	3b54c <Mat_VarRead4+0x8c0>
   3ace0:	str	r4, [r6, #12]
   3ace4:	ldr	r4, [sp, #8]
   3ace8:	str	r4, [r6]
   3acec:	mov	r0, r4
   3acf0:	bl	15ac <malloc@plt>
   3acf4:	cmp	r0, #0
   3acf8:	mov	r1, r0
   3acfc:	str	r0, [r6, #40]	; 0x28
   3ad00:	beq	3adc0 <Mat_VarRead4+0x134>
   3ad04:	mov	r3, r4
   3ad08:	ldr	r2, [r6, #8]
   3ad0c:	mov	r0, r5
   3ad10:	bl	12b00 <ReadUInt8Data>
   3ad14:	mov	r3, #2
   3ad18:	b	3ad7c <Mat_VarRead4+0xf0>
   3ad1c:	mov	r2, #8
   3ad20:	str	r2, [r6, #12]
   3ad24:	ldr	r1, [sp, #8]
   3ad28:	mov	r0, r6
   3ad2c:	bl	3bf40 <SafeMul>
   3ad30:	ldr	r3, [r6, #20]
   3ad34:	ldr	r0, [r6]
   3ad38:	cmp	r3, #0
   3ad3c:	beq	3ad98 <Mat_VarRead4+0x10c>
   3ad40:	bl	3be44 <ComplexMalloc>
   3ad44:	subs	r4, r0, #0
   3ad48:	beq	3ad88 <Mat_VarRead4+0xfc>
   3ad4c:	ldr	r3, [sp, #8]
   3ad50:	ldr	r2, [r6, #8]
   3ad54:	ldr	r1, [r4]
   3ad58:	str	r4, [r6, #40]	; 0x28
   3ad5c:	mov	r0, r5
   3ad60:	bl	f2c8 <ReadDoubleData>
   3ad64:	ldr	r3, [sp, #8]
   3ad68:	ldr	r2, [r6, #8]
   3ad6c:	ldr	r1, [r4, #4]
   3ad70:	mov	r0, r5
   3ad74:	bl	f2c8 <ReadDoubleData>
   3ad78:	mov	r3, #9
   3ad7c:	str	r3, [r6, #8]
   3ad80:	add	sp, sp, #28
   3ad84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ad88:	ldr	r0, [pc, #1344]	; 3b2d0 <Mat_VarRead4+0x644>
   3ad8c:	add	r0, pc, r0
   3ad90:	bl	1690 <Mat_Critical@plt>
   3ad94:	b	3ad78 <Mat_VarRead4+0xec>
   3ad98:	bl	15ac <malloc@plt>
   3ad9c:	cmp	r0, #0
   3ada0:	mov	r1, r0
   3ada4:	str	r0, [r6, #40]	; 0x28
   3ada8:	ldrne	r3, [sp, #8]
   3adac:	ldrne	r2, [r6, #8]
   3adb0:	bne	3ad70 <Mat_VarRead4+0xe4>
   3adb4:	ldr	r0, [pc, #1304]	; 3b2d4 <Mat_VarRead4+0x648>
   3adb8:	add	r0, pc, r0
   3adbc:	b	3ad90 <Mat_VarRead4+0x104>
   3adc0:	ldr	r0, [pc, #1296]	; 3b2d8 <Mat_VarRead4+0x64c>
   3adc4:	add	r0, pc, r0
   3adc8:	bl	1690 <Mat_Critical@plt>
   3adcc:	b	3ad14 <Mat_VarRead4+0x88>
   3add0:	mov	r0, #28
   3add4:	str	r0, [r6, #12]
   3add8:	bl	15ac <malloc@plt>
   3addc:	cmp	r0, #0
   3ade0:	mov	r4, r0
   3ade4:	str	r0, [r6, #40]	; 0x28
   3ade8:	beq	3b540 <Mat_VarRead4+0x8b4>
   3adec:	ldr	r2, [r6, #32]
   3adf0:	ldr	r3, [r2, #4]
   3adf4:	sub	r3, r3, #4
   3adf8:	clz	r3, r3
   3adfc:	lsr	r3, r3, #5
   3ae00:	str	r3, [r6, #20]
   3ae04:	ldr	r7, [r2]
   3ae08:	sub	r7, r7, #1
   3ae0c:	str	r7, [r0, #8]
   3ae10:	str	r7, [r0]
   3ae14:	lsl	r0, r7, #2
   3ae18:	bl	15ac <malloc@plt>
   3ae1c:	cmp	r0, #0
   3ae20:	mov	r8, r0
   3ae24:	str	r0, [r4, #4]
   3ae28:	beq	3aec8 <Mat_VarRead4+0x23c>
   3ae2c:	mov	r3, r7
   3ae30:	mov	r1, r0
   3ae34:	mov	r2, #9
   3ae38:	mov	r0, r5
   3ae3c:	bl	11270 <ReadInt32Data>
   3ae40:	mov	r3, #0
   3ae44:	ldr	r2, [r4, #8]
   3ae48:	cmp	r3, r2
   3ae4c:	blt	3aeb0 <Mat_VarRead4+0x224>
   3ae50:	add	r8, sp, #16
   3ae54:	mov	r3, #1
   3ae58:	mov	r2, #9
   3ae5c:	mov	r1, r8
   3ae60:	mov	r0, r5
   3ae64:	bl	f2c8 <ReadDoubleData>
   3ae68:	vldr	d7, [sp, #16]
   3ae6c:	ldr	r3, [r6, #32]
   3ae70:	ldr	r0, [r5]
   3ae74:	vcvt.u32.f64	s14, d7
   3ae78:	vstr	s14, [r3]
   3ae7c:	bl	151c <ftell@plt>
   3ae80:	cmn	r0, #1
   3ae84:	mov	r7, r0
   3ae88:	bne	3aee4 <Mat_VarRead4+0x258>
   3ae8c:	ldr	r0, [r4, #4]
   3ae90:	bl	14e0 <free@plt>
   3ae94:	ldr	r0, [r6, #40]	; 0x28
   3ae98:	bl	14e0 <free@plt>
   3ae9c:	ldr	r0, [pc, #1080]	; 3b2dc <Mat_VarRead4+0x650>
   3aea0:	mov	r3, #0
   3aea4:	str	r3, [r6, #40]	; 0x28
   3aea8:	add	r0, pc, r0
   3aeac:	b	3aedc <Mat_VarRead4+0x250>
   3aeb0:	ldr	r1, [r4, #4]
   3aeb4:	ldr	r2, [r1, r3, lsl #2]
   3aeb8:	sub	r2, r2, #1
   3aebc:	str	r2, [r1, r3, lsl #2]
   3aec0:	add	r3, r3, #1
   3aec4:	b	3ae44 <Mat_VarRead4+0x1b8>
   3aec8:	mov	r0, r4
   3aecc:	bl	14e0 <free@plt>
   3aed0:	ldr	r0, [pc, #1032]	; 3b2e0 <Mat_VarRead4+0x654>
   3aed4:	str	r8, [r6, #40]	; 0x28
   3aed8:	add	r0, pc, r0
   3aedc:	bl	1690 <Mat_Critical@plt>
   3aee0:	b	3ad80 <Mat_VarRead4+0xf4>
   3aee4:	mov	r0, #9
   3aee8:	ldr	r9, [r5]
   3aeec:	ldr	sl, [r4, #8]
   3aef0:	bl	1600 <Mat_SizeOf@plt>
   3aef4:	mov	r2, #1
   3aef8:	mul	r1, r0, sl
   3aefc:	mov	r0, r9
   3af00:	bl	1714 <fseek@plt>
   3af04:	mov	r3, #1
   3af08:	mov	r2, #9
   3af0c:	mov	r1, r8
   3af10:	mov	r0, r5
   3af14:	bl	f2c8 <ReadDoubleData>
   3af18:	vldr	d7, [sp, #16]
   3af1c:	vldr	d6, [pc, #932]	; 3b2c8 <Mat_VarRead4+0x63c>
   3af20:	vcmpe.f64	d7, d6
   3af24:	vmrs	APSR_nzcv, fpscr
   3af28:	bgt	3af38 <Mat_VarRead4+0x2ac>
   3af2c:	vcmpe.f64	d7, #0.0
   3af30:	vmrs	APSR_nzcv, fpscr
   3af34:	bpl	3af5c <Mat_VarRead4+0x2d0>
   3af38:	ldr	r0, [r4, #4]
   3af3c:	bl	14e0 <free@plt>
   3af40:	ldr	r0, [r6, #40]	; 0x28
   3af44:	bl	14e0 <free@plt>
   3af48:	ldr	r0, [pc, #916]	; 3b2e4 <Mat_VarRead4+0x658>
   3af4c:	mov	r3, #0
   3af50:	str	r3, [r6, #40]	; 0x28
   3af54:	add	r0, pc, r0
   3af58:	b	3aedc <Mat_VarRead4+0x250>
   3af5c:	vcvt.u32.f64	s14, d7
   3af60:	ldr	r3, [r6, #32]
   3af64:	mov	r2, #0
   3af68:	mov	r1, r7
   3af6c:	ldr	r0, [r5]
   3af70:	vstr	s14, [r3, #4]
   3af74:	bl	1714 <fseek@plt>
   3af78:	ldr	r3, [r6, #32]
   3af7c:	ldr	r0, [r3, #4]
   3af80:	cmn	r0, #-2147483646	; 0x80000002
   3af84:	bls	3afac <Mat_VarRead4+0x320>
   3af88:	ldr	r0, [r4, #4]
   3af8c:	bl	14e0 <free@plt>
   3af90:	ldr	r0, [r6, #40]	; 0x28
   3af94:	bl	14e0 <free@plt>
   3af98:	ldr	r0, [pc, #840]	; 3b2e8 <Mat_VarRead4+0x65c>
   3af9c:	mov	r3, #0
   3afa0:	str	r3, [r6, #40]	; 0x28
   3afa4:	add	r0, pc, r0
   3afa8:	b	3aedc <Mat_VarRead4+0x250>
   3afac:	add	r0, r0, #1
   3afb0:	str	r0, [r4, #16]
   3afb4:	lsl	r0, r0, #2
   3afb8:	bl	15ac <malloc@plt>
   3afbc:	cmp	r0, #0
   3afc0:	mov	r9, r0
   3afc4:	str	r0, [r4, #12]
   3afc8:	beq	3b100 <Mat_VarRead4+0x474>
   3afcc:	ldr	fp, [r4, #8]
   3afd0:	lsl	r0, fp, #2
   3afd4:	bl	15ac <malloc@plt>
   3afd8:	subs	sl, r0, #0
   3afdc:	beq	3b0d8 <Mat_VarRead4+0x44c>
   3afe0:	mov	r7, #0
   3afe4:	mov	r3, fp
   3afe8:	mov	r2, #9
   3afec:	str	r7, [r9]
   3aff0:	mov	r1, sl
   3aff4:	mov	r0, r5
   3aff8:	bl	11270 <ReadInt32Data>
   3affc:	mov	r3, r7
   3b000:	mov	r2, #1
   3b004:	ldr	r7, [r4, #16]
   3b008:	sub	r1, r7, #1
   3b00c:	cmp	r2, r1
   3b010:	bge	3b044 <Mat_VarRead4+0x3b8>
   3b014:	ldr	r1, [r4, #8]
   3b018:	b	3b02c <Mat_VarRead4+0x3a0>
   3b01c:	ldr	r0, [sl, r3, lsl #2]
   3b020:	cmp	r2, r0
   3b024:	blt	3b034 <Mat_VarRead4+0x3a8>
   3b028:	add	r3, r3, #1
   3b02c:	cmp	r3, r1
   3b030:	blt	3b01c <Mat_VarRead4+0x390>
   3b034:	ldr	r1, [r4, #12]
   3b038:	str	r3, [r1, r2, lsl #2]
   3b03c:	add	r2, r2, #1
   3b040:	b	3b004 <Mat_VarRead4+0x378>
   3b044:	mov	r0, sl
   3b048:	bl	14e0 <free@plt>
   3b04c:	ldr	r3, [r4, #12]
   3b050:	ldr	r2, [r4, #8]
   3b054:	sub	r7, r7, #-1073741823	; 0xc0000001
   3b058:	mov	r1, r8
   3b05c:	str	r2, [r3, r7, lsl #2]
   3b060:	mov	r0, r5
   3b064:	mov	r3, #1
   3b068:	mov	r2, #9
   3b06c:	bl	f2c8 <ReadDoubleData>
   3b070:	ldr	r3, [r6, #20]
   3b074:	ldr	r7, [r4, #8]
   3b078:	cmp	r3, #0
   3b07c:	str	r7, [r4, #20]
   3b080:	ldr	r9, [r6, #8]
   3b084:	bne	3b120 <Mat_VarRead4+0x494>
   3b088:	mov	r0, r9
   3b08c:	bl	1600 <Mat_SizeOf@plt>
   3b090:	mul	r0, r0, r7
   3b094:	bl	15ac <malloc@plt>
   3b098:	cmp	r0, #0
   3b09c:	mov	r1, r0
   3b0a0:	str	r0, [r4, #24]
   3b0a4:	beq	3b510 <Mat_VarRead4+0x884>
   3b0a8:	sub	r3, r9, #2
   3b0ac:	cmp	r3, #7
   3b0b0:	addls	pc, pc, r3, lsl #2
   3b0b4:	b	3b4dc <Mat_VarRead4+0x850>
   3b0b8:	b	3b4bc <Mat_VarRead4+0x830>
   3b0bc:	b	3b47c <Mat_VarRead4+0x7f0>
   3b0c0:	b	3b49c <Mat_VarRead4+0x810>
   3b0c4:	b	3b45c <Mat_VarRead4+0x7d0>
   3b0c8:	b	3b4dc <Mat_VarRead4+0x850>
   3b0cc:	b	3b43c <Mat_VarRead4+0x7b0>
   3b0d0:	b	3b4dc <Mat_VarRead4+0x850>
   3b0d4:	b	3b430 <Mat_VarRead4+0x7a4>
   3b0d8:	mov	r0, r9
   3b0dc:	bl	14e0 <free@plt>
   3b0e0:	ldr	r0, [r4, #4]
   3b0e4:	bl	14e0 <free@plt>
   3b0e8:	ldr	r0, [r6, #40]	; 0x28
   3b0ec:	bl	14e0 <free@plt>
   3b0f0:	ldr	r0, [pc, #500]	; 3b2ec <Mat_VarRead4+0x660>
   3b0f4:	str	sl, [r6, #40]	; 0x28
   3b0f8:	add	r0, pc, r0
   3b0fc:	b	3aedc <Mat_VarRead4+0x250>
   3b100:	ldr	r0, [r4, #4]
   3b104:	bl	14e0 <free@plt>
   3b108:	ldr	r0, [r6, #40]	; 0x28
   3b10c:	bl	14e0 <free@plt>
   3b110:	ldr	r0, [pc, #472]	; 3b2f0 <Mat_VarRead4+0x664>
   3b114:	str	r9, [r6, #40]	; 0x28
   3b118:	add	r0, pc, r0
   3b11c:	b	3aedc <Mat_VarRead4+0x250>
   3b120:	mov	r0, r9
   3b124:	bl	1600 <Mat_SizeOf@plt>
   3b128:	mul	r0, r0, r7
   3b12c:	bl	3be44 <ComplexMalloc>
   3b130:	subs	r7, r0, #0
   3b134:	beq	3b408 <Mat_VarRead4+0x77c>
   3b138:	sub	r3, r9, #2
   3b13c:	str	r7, [r4, #24]
   3b140:	cmp	r3, #7
   3b144:	addls	pc, pc, r3, lsl #2
   3b148:	b	3b3bc <Mat_VarRead4+0x730>
   3b14c:	b	3b364 <Mat_VarRead4+0x6d8>
   3b150:	b	3b270 <Mat_VarRead4+0x5e4>
   3b154:	b	3b30c <Mat_VarRead4+0x680>
   3b158:	b	3b218 <Mat_VarRead4+0x58c>
   3b15c:	b	3b3bc <Mat_VarRead4+0x730>
   3b160:	b	3b1c0 <Mat_VarRead4+0x534>
   3b164:	b	3b3bc <Mat_VarRead4+0x730>
   3b168:	b	3b16c <Mat_VarRead4+0x4e0>
   3b16c:	ldr	r3, [r4, #20]
   3b170:	mov	r2, #9
   3b174:	ldr	r1, [r7]
   3b178:	mov	r0, r5
   3b17c:	bl	f2c8 <ReadDoubleData>
   3b180:	mov	r3, #1
   3b184:	mov	r2, #9
   3b188:	mov	r1, r8
   3b18c:	mov	r0, r5
   3b190:	bl	f2c8 <ReadDoubleData>
   3b194:	ldr	r3, [r4, #20]
   3b198:	ldr	r1, [r7, #4]
   3b19c:	mov	r2, #9
   3b1a0:	mov	r0, r5
   3b1a4:	bl	f2c8 <ReadDoubleData>
   3b1a8:	mov	r3, #1
   3b1ac:	mov	r2, #9
   3b1b0:	mov	r1, r8
   3b1b4:	mov	r0, r5
   3b1b8:	bl	f2c8 <ReadDoubleData>
   3b1bc:	b	3ad80 <Mat_VarRead4+0xf4>
   3b1c0:	ldr	r3, [r4, #20]
   3b1c4:	mov	r2, #7
   3b1c8:	ldr	r1, [r7]
   3b1cc:	add	r6, sp, #12
   3b1d0:	mov	r0, r5
   3b1d4:	bl	102f0 <ReadSingleData>
   3b1d8:	mov	r3, #1
   3b1dc:	mov	r2, #7
   3b1e0:	mov	r1, r6
   3b1e4:	mov	r0, r5
   3b1e8:	bl	102f0 <ReadSingleData>
   3b1ec:	ldr	r3, [r4, #20]
   3b1f0:	mov	r2, #7
   3b1f4:	ldr	r1, [r7, #4]
   3b1f8:	mov	r0, r5
   3b1fc:	bl	102f0 <ReadSingleData>
   3b200:	mov	r3, #1
   3b204:	mov	r2, #7
   3b208:	mov	r1, r6
   3b20c:	mov	r0, r5
   3b210:	bl	102f0 <ReadSingleData>
   3b214:	b	3ad80 <Mat_VarRead4+0xf4>
   3b218:	ldr	r3, [r4, #20]
   3b21c:	mov	r2, #5
   3b220:	ldr	r1, [r7]
   3b224:	add	r6, sp, #12
   3b228:	mov	r0, r5
   3b22c:	bl	11270 <ReadInt32Data>
   3b230:	mov	r3, #1
   3b234:	mov	r2, #5
   3b238:	mov	r1, r6
   3b23c:	mov	r0, r5
   3b240:	bl	11270 <ReadInt32Data>
   3b244:	ldr	r3, [r4, #20]
   3b248:	mov	r2, #5
   3b24c:	ldr	r1, [r7, #4]
   3b250:	mov	r0, r5
   3b254:	bl	11270 <ReadInt32Data>
   3b258:	mov	r3, #1
   3b25c:	mov	r2, #5
   3b260:	mov	r1, r6
   3b264:	mov	r0, r5
   3b268:	bl	11270 <ReadInt32Data>
   3b26c:	b	3ad80 <Mat_VarRead4+0xf4>
   3b270:	ldr	r3, [r4, #20]
   3b274:	mov	r2, #3
   3b278:	ldr	r1, [r7]
   3b27c:	add	r6, sp, #12
   3b280:	mov	r0, r5
   3b284:	bl	11c30 <ReadInt16Data>
   3b288:	mov	r3, #1
   3b28c:	mov	r2, #3
   3b290:	mov	r1, r6
   3b294:	mov	r0, r5
   3b298:	bl	11c30 <ReadInt16Data>
   3b29c:	ldr	r3, [r4, #20]
   3b2a0:	mov	r2, #3
   3b2a4:	ldr	r1, [r7, #4]
   3b2a8:	mov	r0, r5
   3b2ac:	bl	11c30 <ReadInt16Data>
   3b2b0:	mov	r3, #1
   3b2b4:	mov	r2, #3
   3b2b8:	mov	r1, r6
   3b2bc:	mov	r0, r5
   3b2c0:	bl	11c30 <ReadInt16Data>
   3b2c4:	b	3ad80 <Mat_VarRead4+0xf4>
   3b2c8:	.word	0xff800000
   3b2cc:	.word	0x41dfffff
   3b2d0:	.word	0x00005c0c
   3b2d4:	.word	0x00005a83
   3b2d8:	.word	0x00005a77
   3b2dc:	.word	0x000058bd
   3b2e0:	.word	0x00005cff
   3b2e4:	.word	0x00005cb5
   3b2e8:	.word	0x00005c65
   3b2ec:	.word	0x00005b3c
   3b2f0:	.word	0x00005b1c
   3b2f4:	.word	0x00005874
   3b2f8:	.word	0x000054e4
   3b2fc:	.word	0x00005760
   3b300:	.word	0x00005409
   3b304:	.word	0x000052f7
   3b308:	.word	0x0000575a
   3b30c:	ldr	r3, [r4, #20]
   3b310:	mov	r2, #4
   3b314:	ldr	r1, [r7]
   3b318:	add	r6, sp, #12
   3b31c:	mov	r0, r5
   3b320:	bl	12138 <ReadUInt16Data>
   3b324:	mov	r3, #1
   3b328:	mov	r2, #4
   3b32c:	mov	r1, r6
   3b330:	mov	r0, r5
   3b334:	bl	12138 <ReadUInt16Data>
   3b338:	ldr	r3, [r4, #20]
   3b33c:	mov	r2, #4
   3b340:	ldr	r1, [r7, #4]
   3b344:	mov	r0, r5
   3b348:	bl	12138 <ReadUInt16Data>
   3b34c:	mov	r3, #1
   3b350:	mov	r2, #4
   3b354:	mov	r1, r6
   3b358:	mov	r0, r5
   3b35c:	bl	12138 <ReadUInt16Data>
   3b360:	b	3ad80 <Mat_VarRead4+0xf4>
   3b364:	ldr	r3, [r4, #20]
   3b368:	mov	r2, #2
   3b36c:	ldr	r1, [r7]
   3b370:	add	r6, sp, #12
   3b374:	mov	r0, r5
   3b378:	bl	12b00 <ReadUInt8Data>
   3b37c:	mov	r3, #1
   3b380:	mov	r2, #2
   3b384:	mov	r1, r6
   3b388:	mov	r0, r5
   3b38c:	bl	12b00 <ReadUInt8Data>
   3b390:	ldr	r3, [r4, #20]
   3b394:	mov	r2, #2
   3b398:	ldr	r1, [r7, #4]
   3b39c:	mov	r0, r5
   3b3a0:	bl	12b00 <ReadUInt8Data>
   3b3a4:	mov	r3, #1
   3b3a8:	mov	r2, #2
   3b3ac:	mov	r1, r6
   3b3b0:	mov	r0, r5
   3b3b4:	bl	12b00 <ReadUInt8Data>
   3b3b8:	b	3ad80 <Mat_VarRead4+0xf4>
   3b3bc:	ldr	r0, [r7]
   3b3c0:	bl	14e0 <free@plt>
   3b3c4:	ldr	r0, [r7, #4]
   3b3c8:	bl	14e0 <free@plt>
   3b3cc:	mov	r0, r7
   3b3d0:	bl	14e0 <free@plt>
   3b3d4:	ldr	r0, [r4, #12]
   3b3d8:	bl	14e0 <free@plt>
   3b3dc:	ldr	r0, [r4, #4]
   3b3e0:	bl	14e0 <free@plt>
   3b3e4:	ldr	r0, [r6, #40]	; 0x28
   3b3e8:	bl	14e0 <free@plt>
   3b3ec:	ldr	r0, [pc, #-256]	; 3b2f4 <Mat_VarRead4+0x668>
   3b3f0:	mov	r1, r9
   3b3f4:	add	r0, pc, r0
   3b3f8:	mov	r3, #0
   3b3fc:	str	r3, [r6, #40]	; 0x28
   3b400:	bl	1690 <Mat_Critical@plt>
   3b404:	b	3ad80 <Mat_VarRead4+0xf4>
   3b408:	ldr	r0, [r4, #12]
   3b40c:	bl	14e0 <free@plt>
   3b410:	ldr	r0, [r4, #4]
   3b414:	bl	14e0 <free@plt>
   3b418:	ldr	r0, [r6, #40]	; 0x28
   3b41c:	bl	14e0 <free@plt>
   3b420:	ldr	r0, [pc, #-304]	; 3b2f8 <Mat_VarRead4+0x66c>
   3b424:	str	r7, [r6, #40]	; 0x28
   3b428:	add	r0, pc, r0
   3b42c:	b	3aedc <Mat_VarRead4+0x250>
   3b430:	ldr	r3, [r4, #20]
   3b434:	mov	r2, #9
   3b438:	b	3b1a0 <Mat_VarRead4+0x514>
   3b43c:	ldr	r3, [r4, #20]
   3b440:	mov	r2, #7
   3b444:	mov	r0, r5
   3b448:	bl	102f0 <ReadSingleData>
   3b44c:	mov	r3, #1
   3b450:	mov	r2, #7
   3b454:	add	r1, sp, #12
   3b458:	b	3b20c <Mat_VarRead4+0x580>
   3b45c:	ldr	r3, [r4, #20]
   3b460:	mov	r2, #5
   3b464:	mov	r0, r5
   3b468:	bl	11270 <ReadInt32Data>
   3b46c:	mov	r3, #1
   3b470:	mov	r2, #5
   3b474:	add	r1, sp, #12
   3b478:	b	3b264 <Mat_VarRead4+0x5d8>
   3b47c:	ldr	r3, [r4, #20]
   3b480:	mov	r2, #3
   3b484:	mov	r0, r5
   3b488:	bl	11c30 <ReadInt16Data>
   3b48c:	mov	r3, #1
   3b490:	mov	r2, #3
   3b494:	add	r1, sp, #12
   3b498:	b	3b2bc <Mat_VarRead4+0x630>
   3b49c:	ldr	r3, [r4, #20]
   3b4a0:	mov	r2, #4
   3b4a4:	mov	r0, r5
   3b4a8:	bl	12138 <ReadUInt16Data>
   3b4ac:	mov	r3, #1
   3b4b0:	mov	r2, #4
   3b4b4:	add	r1, sp, #12
   3b4b8:	b	3b358 <Mat_VarRead4+0x6cc>
   3b4bc:	ldr	r3, [r4, #20]
   3b4c0:	mov	r2, #2
   3b4c4:	mov	r0, r5
   3b4c8:	bl	12b00 <ReadUInt8Data>
   3b4cc:	mov	r3, #1
   3b4d0:	mov	r2, #2
   3b4d4:	add	r1, sp, #12
   3b4d8:	b	3b3b0 <Mat_VarRead4+0x724>
   3b4dc:	bl	14e0 <free@plt>
   3b4e0:	ldr	r0, [r4, #12]
   3b4e4:	bl	14e0 <free@plt>
   3b4e8:	ldr	r0, [r4, #4]
   3b4ec:	bl	14e0 <free@plt>
   3b4f0:	ldr	r0, [r6, #40]	; 0x28
   3b4f4:	bl	14e0 <free@plt>
   3b4f8:	ldr	r0, [pc, #-516]	; 3b2fc <Mat_VarRead4+0x670>
   3b4fc:	mov	r3, #0
   3b500:	str	r3, [r6, #40]	; 0x28
   3b504:	mov	r1, r9
   3b508:	add	r0, pc, r0
   3b50c:	b	3b400 <Mat_VarRead4+0x774>
   3b510:	str	r0, [sp, #4]
   3b514:	ldr	r0, [r4, #12]
   3b518:	bl	14e0 <free@plt>
   3b51c:	ldr	r0, [r4, #4]
   3b520:	bl	14e0 <free@plt>
   3b524:	ldr	r0, [r6, #40]	; 0x28
   3b528:	bl	14e0 <free@plt>
   3b52c:	ldr	r1, [sp, #4]
   3b530:	ldr	r0, [pc, #-568]	; 3b300 <Mat_VarRead4+0x674>
   3b534:	str	r1, [r6, #40]	; 0x28
   3b538:	add	r0, pc, r0
   3b53c:	b	3aedc <Mat_VarRead4+0x250>
   3b540:	ldr	r0, [pc, #-580]	; 3b304 <Mat_VarRead4+0x678>
   3b544:	add	r0, pc, r0
   3b548:	b	3aedc <Mat_VarRead4+0x250>
   3b54c:	ldr	r0, [pc, #-588]	; 3b308 <Mat_VarRead4+0x67c>
   3b550:	add	r0, pc, r0
   3b554:	b	3aedc <Mat_VarRead4+0x250>

0003b558 <Mat_VarReadData4>:
   3b558:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b55c:	mov	r7, r3
   3b560:	ldr	r3, [r1, #52]	; 0x34
   3b564:	sub	sp, sp, #32
   3b568:	mov	r4, r1
   3b56c:	mov	r6, r0
   3b570:	ldr	r1, [r3]
   3b574:	mov	sl, r2
   3b578:	ldr	r0, [r0]
   3b57c:	mov	r2, #0
   3b580:	ldr	r8, [sp, #64]	; 0x40
   3b584:	ldr	r9, [sp, #68]	; 0x44
   3b588:	bl	1714 <fseek@plt>
   3b58c:	ldr	r3, [r4, #8]
   3b590:	mov	r5, #1
   3b594:	cmp	r3, #9
   3b598:	bhi	3b684 <Mat_VarReadData4+0x12c>
   3b59c:	lsl	r2, r5, r3
   3b5a0:	tst	r2, #700	; 0x2bc
   3b5a4:	beq	3b684 <Mat_VarReadData4+0x12c>
   3b5a8:	ldr	r1, [r4, #4]
   3b5ac:	ldr	r2, [r4, #20]
   3b5b0:	cmp	r1, #2
   3b5b4:	bne	3b6a0 <Mat_VarReadData4+0x148>
   3b5b8:	ldr	r0, [r9]
   3b5bc:	ldr	lr, [r8]
   3b5c0:	ldr	ip, [r7]
   3b5c4:	ldr	r1, [r4, #32]
   3b5c8:	sub	r0, r0, #1
   3b5cc:	add	ip, ip, r5
   3b5d0:	mla	r0, lr, r0, ip
   3b5d4:	ldr	ip, [r1]
   3b5d8:	cmp	r0, ip
   3b5dc:	bhi	3b608 <Mat_VarReadData4+0xb0>
   3b5e0:	ldr	r5, [r9, #4]
   3b5e4:	ldr	ip, [r8, #4]
   3b5e8:	ldr	r0, [r7, #4]
   3b5ec:	sub	r5, r5, #1
   3b5f0:	add	r0, r0, #1
   3b5f4:	mla	r5, ip, r5, r0
   3b5f8:	ldr	r0, [r1, #4]
   3b5fc:	cmp	r5, r0
   3b600:	movls	r5, #0
   3b604:	movhi	r5, #1
   3b608:	cmp	r2, #0
   3b60c:	beq	3b690 <Mat_VarReadData4+0x138>
   3b610:	mov	r0, r3
   3b614:	bl	1600 <Mat_SizeOf@plt>
   3b618:	add	r1, sp, #32
   3b61c:	str	r0, [r1, #-4]!
   3b620:	mov	r0, r4
   3b624:	bl	3bee0 <SafeMulDims>
   3b628:	ldr	r3, [r4, #32]
   3b62c:	ldr	r2, [r4, #16]
   3b630:	str	r3, [sp]
   3b634:	ldr	r1, [sl]
   3b638:	ldr	r3, [r4, #8]
   3b63c:	stmib	sp, {r7, r8, r9}
   3b640:	mov	r0, r6
   3b644:	bl	193a0 <ReadDataSlab2>
   3b648:	ldr	r3, [r4, #52]	; 0x34
   3b64c:	mov	r2, #0
   3b650:	ldr	r0, [r6]
   3b654:	ldr	r1, [r3]
   3b658:	ldr	r3, [sp, #28]
   3b65c:	add	r1, r1, r3
   3b660:	bl	1714 <fseek@plt>
   3b664:	ldr	r3, [r4, #32]
   3b668:	ldr	r2, [r4, #16]
   3b66c:	str	r3, [sp]
   3b670:	ldr	r1, [sl, #4]
   3b674:	ldr	r3, [r4, #8]
   3b678:	stmib	sp, {r7, r8, r9}
   3b67c:	mov	r0, r6
   3b680:	bl	193a0 <ReadDataSlab2>
   3b684:	mov	r0, r5
   3b688:	add	sp, sp, #32
   3b68c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b690:	stm	sp, {r1, r7, r8, r9}
   3b694:	mov	r1, sl
   3b698:	ldr	r2, [r4, #16]
   3b69c:	b	3b67c <Mat_VarReadData4+0x124>
   3b6a0:	subs	r5, r2, #0
   3b6a4:	beq	3b744 <Mat_VarReadData4+0x1ec>
   3b6a8:	mov	r0, r3
   3b6ac:	bl	1600 <Mat_SizeOf@plt>
   3b6b0:	add	r1, sp, #32
   3b6b4:	mov	r5, #0
   3b6b8:	str	r0, [r1, #-4]!
   3b6bc:	mov	r0, r4
   3b6c0:	bl	3bee0 <SafeMulDims>
   3b6c4:	ldr	r3, [r4, #32]
   3b6c8:	ldr	r2, [r4, #16]
   3b6cc:	str	r3, [sp, #4]
   3b6d0:	ldr	r3, [r4, #4]
   3b6d4:	ldr	r1, [sl]
   3b6d8:	str	r3, [sp]
   3b6dc:	str	r9, [sp, #16]
   3b6e0:	ldr	r3, [r4, #8]
   3b6e4:	str	r8, [sp, #12]
   3b6e8:	str	r7, [sp, #8]
   3b6ec:	mov	r0, r6
   3b6f0:	bl	131bc <ReadDataSlabN>
   3b6f4:	ldr	r3, [r4, #52]	; 0x34
   3b6f8:	mov	r2, #0
   3b6fc:	ldr	r0, [r6]
   3b700:	ldr	r1, [r3]
   3b704:	ldr	r3, [sp, #28]
   3b708:	add	r1, r1, r3
   3b70c:	bl	1714 <fseek@plt>
   3b710:	ldr	r3, [r4, #32]
   3b714:	str	r9, [sp, #16]
   3b718:	str	r3, [sp, #4]
   3b71c:	ldr	r3, [r4, #4]
   3b720:	str	r8, [sp, #12]
   3b724:	str	r3, [sp]
   3b728:	str	r7, [sp, #8]
   3b72c:	ldr	r3, [r4, #8]
   3b730:	ldr	r2, [r4, #16]
   3b734:	ldr	r1, [sl, #4]
   3b738:	mov	r0, r6
   3b73c:	bl	131bc <ReadDataSlabN>
   3b740:	b	3b684 <Mat_VarReadData4+0x12c>
   3b744:	ldr	r2, [r4, #32]
   3b748:	str	r9, [sp, #16]
   3b74c:	str	r8, [sp, #12]
   3b750:	stm	sp, {r1, r2}
   3b754:	str	r7, [sp, #8]
   3b758:	ldr	r2, [r4, #16]
   3b75c:	mov	r1, sl
   3b760:	mov	r0, r6
   3b764:	bl	131bc <ReadDataSlabN>
   3b768:	b	3b684 <Mat_VarReadData4+0x12c>

0003b76c <Mat_VarReadDataLinear4>:
   3b76c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b770:	sub	sp, sp, #36	; 0x24
   3b774:	mov	r4, r1
   3b778:	add	r1, sp, #32
   3b77c:	mov	r6, r3
   3b780:	mov	r3, #1
   3b784:	str	r3, [r1, #-4]!
   3b788:	mov	r5, r0
   3b78c:	mov	r0, r4
   3b790:	str	r3, [sp, #20]
   3b794:	mov	r8, r2
   3b798:	ldr	r7, [sp, #76]	; 0x4c
   3b79c:	bl	3bee0 <SafeMulDims>
   3b7a0:	ldr	r1, [r4, #52]	; 0x34
   3b7a4:	mov	r2, #0
   3b7a8:	ldr	r1, [r1]
   3b7ac:	mov	r9, r0
   3b7b0:	ldr	r0, [r5]
   3b7b4:	bl	1714 <fseek@plt>
   3b7b8:	ldr	r0, [r4, #8]
   3b7bc:	bl	1600 <Mat_SizeOf@plt>
   3b7c0:	ldr	r3, [sp, #72]	; 0x48
   3b7c4:	sub	r2, r7, #1
   3b7c8:	add	r1, r6, #1
   3b7cc:	mla	r2, r3, r2, r1
   3b7d0:	ldr	fp, [sp, #28]
   3b7d4:	ldr	r3, [sp, #20]
   3b7d8:	cmp	r2, fp
   3b7dc:	movhi	r9, r3
   3b7e0:	str	r0, [r4, #12]
   3b7e4:	bhi	3b858 <Mat_VarReadDataLinear4+0xec>
   3b7e8:	ldr	r3, [r4, #20]
   3b7ec:	cmp	r3, #0
   3b7f0:	beq	3b864 <Mat_VarReadDataLinear4+0xf8>
   3b7f4:	ldr	r3, [sp, #72]	; 0x48
   3b7f8:	mov	sl, r0
   3b7fc:	str	r3, [sp, #4]
   3b800:	ldr	r2, [r4, #16]
   3b804:	ldr	r3, [r4, #8]
   3b808:	ldr	r1, [r8]
   3b80c:	str	r7, [sp, #8]
   3b810:	str	r6, [sp]
   3b814:	mov	r0, r5
   3b818:	bl	18f04 <ReadDataSlab1>
   3b81c:	ldr	r3, [r4, #52]	; 0x34
   3b820:	mov	r2, #0
   3b824:	ldr	r0, [r5]
   3b828:	ldr	r1, [r3]
   3b82c:	mla	r1, fp, sl, r1
   3b830:	bl	1714 <fseek@plt>
   3b834:	ldr	r3, [sp, #72]	; 0x48
   3b838:	ldr	r2, [r4, #16]
   3b83c:	str	r3, [sp, #4]
   3b840:	ldr	r1, [r8, #4]
   3b844:	ldr	r3, [r4, #8]
   3b848:	str	r7, [sp, #8]
   3b84c:	str	r6, [sp]
   3b850:	mov	r0, r5
   3b854:	bl	18f04 <ReadDataSlab1>
   3b858:	mov	r0, r9
   3b85c:	add	sp, sp, #36	; 0x24
   3b860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b864:	ldr	r3, [sp, #72]	; 0x48
   3b868:	str	r7, [sp, #8]
   3b86c:	str	r3, [sp, #4]
   3b870:	str	r6, [sp]
   3b874:	ldr	r3, [r4, #8]
   3b878:	ldr	r2, [r4, #16]
   3b87c:	mov	r1, r8
   3b880:	b	3b850 <Mat_VarReadDataLinear4+0xe4>

0003b884 <Mat_VarReadNextInfo4>:
   3b884:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3b888:	subs	r5, r0, #0
   3b88c:	bne	3b8a0 <Mat_VarReadNextInfo4+0x1c>
   3b890:	mov	r4, #0
   3b894:	mov	r0, r4
   3b898:	add	sp, sp, #12
   3b89c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3b8a0:	ldr	r3, [r5]
   3b8a4:	cmp	r3, #0
   3b8a8:	beq	3b890 <Mat_VarReadNextInfo4+0xc>
   3b8ac:	bl	1570 <Mat_VarCalloc@plt>
   3b8b0:	subs	r4, r0, #0
   3b8b4:	beq	3b890 <Mat_VarReadNextInfo4+0xc>
   3b8b8:	ldr	r3, [r5]
   3b8bc:	mov	r2, #1
   3b8c0:	mov	r1, #4
   3b8c4:	mov	r0, sp
   3b8c8:	bl	1588 <fread@plt>
   3b8cc:	mov	r6, sp
   3b8d0:	subs	r7, r0, #0
   3b8d4:	bne	3b8e4 <Mat_VarReadNextInfo4+0x60>
   3b8d8:	mov	r0, r4
   3b8dc:	bl	15f4 <Mat_VarFree@plt>
   3b8e0:	b	3b890 <Mat_VarReadNextInfo4+0xc>
   3b8e4:	ldr	r7, [pc, #748]	; 3bbd8 <Mat_VarReadNextInfo4+0x354>
   3b8e8:	ldr	r3, [sp]
   3b8ec:	cmp	r3, r7
   3b8f0:	bls	3b904 <Mat_VarReadNextInfo4+0x80>
   3b8f4:	mov	r0, sp
   3b8f8:	bl	1a18 <Mat_int32Swap>
   3b8fc:	cmp	r0, r7
   3b900:	bgt	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3b904:	ldr	r8, [sp]
   3b908:	vmov	s15, r8
   3b90c:	vcvt.f64.s32	d0, s15
   3b910:	vldr	d7, [pc, #680]	; 3bbc0 <Mat_VarReadNextInfo4+0x33c>
   3b914:	vdiv.f64	d0, d0, d7
   3b918:	bl	1594 <floor@plt>
   3b91c:	ldr	r3, [pc, #696]	; 3bbdc <Mat_VarReadNextInfo4+0x358>
   3b920:	vcvt.s32.f64	s15, d0
   3b924:	vmov	r7, s15
   3b928:	mla	r8, r3, r7, r8
   3b92c:	vmov	s15, r8
   3b930:	vcvt.f64.s32	d0, s15
   3b934:	vldr	d7, [pc, #652]	; 3bbc8 <Mat_VarReadNextInfo4+0x344>
   3b938:	vdiv.f64	d0, d0, d7
   3b93c:	bl	1594 <floor@plt>
   3b940:	mvn	r3, #99	; 0x63
   3b944:	vcvt.s32.f64	s15, d0
   3b948:	vmov	r9, s15
   3b94c:	mla	r8, r3, r9, r8
   3b950:	vmov	s15, r8
   3b954:	vcvt.f64.s32	d0, s15
   3b958:	vldr	d7, [pc, #624]	; 3bbd0 <Mat_VarReadNextInfo4+0x34c>
   3b95c:	vdiv.f64	d0, d0, d7
   3b960:	bl	1594 <floor@plt>
   3b964:	mvn	r3, #9
   3b968:	cmp	r7, #0
   3b96c:	vcvt.s32.f64	s15, d0
   3b970:	vmov	r2, s15
   3b974:	mla	r3, r3, r2, r8
   3b978:	str	r3, [sp]
   3b97c:	beq	3b988 <Mat_VarReadNextInfo4+0x104>
   3b980:	cmp	r7, #1
   3b984:	bne	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3b988:	cmp	r9, #0
   3b98c:	str	r7, [r5, #20]
   3b990:	bne	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3b994:	cmp	r2, #5
   3b998:	addls	pc, pc, r2, lsl #2
   3b99c:	b	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3b9a0:	b	3b9b8 <Mat_VarReadNextInfo4+0x134>
   3b9a4:	b	3bb4c <Mat_VarReadNextInfo4+0x2c8>
   3b9a8:	b	3bb54 <Mat_VarReadNextInfo4+0x2d0>
   3b9ac:	b	3bb5c <Mat_VarReadNextInfo4+0x2d8>
   3b9b0:	b	3bb64 <Mat_VarReadNextInfo4+0x2e0>
   3b9b4:	b	3bb6c <Mat_VarReadNextInfo4+0x2e8>
   3b9b8:	mov	r2, #9
   3b9bc:	cmp	r3, #1
   3b9c0:	str	r2, [r4, #8]
   3b9c4:	beq	3bb74 <Mat_VarReadNextInfo4+0x2f0>
   3b9c8:	cmp	r3, #2
   3b9cc:	beq	3bb7c <Mat_VarReadNextInfo4+0x2f8>
   3b9d0:	cmp	r3, #0
   3b9d4:	moveq	r3, #6
   3b9d8:	bne	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3b9dc:	str	r3, [r4, #16]
   3b9e0:	mov	r3, #2
   3b9e4:	str	r3, [r4, #4]
   3b9e8:	mov	r0, #8
   3b9ec:	bl	15ac <malloc@plt>
   3b9f0:	cmp	r0, #0
   3b9f4:	str	r0, [r4, #32]
   3b9f8:	beq	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3b9fc:	ldr	r3, [r5]
   3ba00:	mov	r2, #1
   3ba04:	mov	r1, #4
   3ba08:	mov	r0, r6
   3ba0c:	bl	1588 <fread@plt>
   3ba10:	ldr	r3, [r5, #20]
   3ba14:	cmp	r3, #0
   3ba18:	mov	r7, r0
   3ba1c:	beq	3ba28 <Mat_VarReadNextInfo4+0x1a4>
   3ba20:	mov	r0, r6
   3ba24:	bl	1a18 <Mat_int32Swap>
   3ba28:	ldr	r3, [r4, #32]
   3ba2c:	ldr	r2, [sp]
   3ba30:	cmp	r7, #0
   3ba34:	str	r2, [r3]
   3ba38:	beq	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3ba3c:	ldr	r3, [r5]
   3ba40:	mov	r2, #1
   3ba44:	mov	r1, #4
   3ba48:	mov	r0, r6
   3ba4c:	bl	1588 <fread@plt>
   3ba50:	ldr	r3, [r5, #20]
   3ba54:	cmp	r3, #0
   3ba58:	mov	r7, r0
   3ba5c:	beq	3ba68 <Mat_VarReadNextInfo4+0x1e4>
   3ba60:	mov	r0, r6
   3ba64:	bl	1a18 <Mat_int32Swap>
   3ba68:	ldr	r3, [r4, #32]
   3ba6c:	ldr	r2, [sp]
   3ba70:	cmp	r7, #0
   3ba74:	str	r2, [r3, #4]
   3ba78:	beq	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3ba7c:	ldr	r3, [r5]
   3ba80:	mov	r2, #1
   3ba84:	mov	r1, #4
   3ba88:	add	r0, r4, #20
   3ba8c:	bl	1588 <fread@plt>
   3ba90:	subs	r7, r0, #0
   3ba94:	beq	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3ba98:	ldr	r3, [r4, #20]
   3ba9c:	cmp	r3, #0
   3baa0:	beq	3bab0 <Mat_VarReadNextInfo4+0x22c>
   3baa4:	ldr	r3, [r4, #16]
   3baa8:	cmp	r3, #4
   3baac:	beq	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3bab0:	ldr	r3, [r5]
   3bab4:	mov	r2, #1
   3bab8:	mov	r1, #4
   3babc:	mov	r0, r6
   3bac0:	bl	1588 <fread@plt>
   3bac4:	subs	r7, r0, #0
   3bac8:	beq	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3bacc:	ldr	r3, [r5, #20]
   3bad0:	cmp	r3, #0
   3bad4:	beq	3bae0 <Mat_VarReadNextInfo4+0x25c>
   3bad8:	mov	r0, r6
   3badc:	bl	1a18 <Mat_int32Swap>
   3bae0:	ldr	r0, [sp]
   3bae4:	cmp	r0, #0
   3bae8:	ble	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3baec:	bl	15ac <malloc@plt>
   3baf0:	cmp	r0, #0
   3baf4:	str	r0, [r4, #36]	; 0x24
   3baf8:	beq	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3bafc:	ldr	r3, [r5]
   3bb00:	ldr	r2, [sp]
   3bb04:	mov	r1, #1
   3bb08:	bl	1588 <fread@plt>
   3bb0c:	subs	r6, r0, #0
   3bb10:	beq	3b8d8 <Mat_VarReadNextInfo4+0x54>
   3bb14:	ldr	r0, [r5]
   3bb18:	ldr	r6, [r4, #52]	; 0x34
   3bb1c:	bl	151c <ftell@plt>
   3bb20:	ldr	r3, [r4, #52]	; 0x34
   3bb24:	str	r0, [r6]
   3bb28:	ldr	r3, [r3]
   3bb2c:	cmn	r3, #1
   3bb30:	bne	3bb84 <Mat_VarReadNextInfo4+0x300>
   3bb34:	mov	r0, r4
   3bb38:	bl	15f4 <Mat_VarFree@plt>
   3bb3c:	ldr	r0, [pc, #156]	; 3bbe0 <Mat_VarReadNextInfo4+0x35c>
   3bb40:	add	r0, pc, r0
   3bb44:	bl	1690 <Mat_Critical@plt>
   3bb48:	b	3b890 <Mat_VarReadNextInfo4+0xc>
   3bb4c:	mov	r2, #7
   3bb50:	b	3b9bc <Mat_VarReadNextInfo4+0x138>
   3bb54:	mov	r2, #5
   3bb58:	b	3b9bc <Mat_VarReadNextInfo4+0x138>
   3bb5c:	mov	r2, #3
   3bb60:	b	3b9bc <Mat_VarReadNextInfo4+0x138>
   3bb64:	mov	r2, #4
   3bb68:	b	3b9bc <Mat_VarReadNextInfo4+0x138>
   3bb6c:	mov	r2, #2
   3bb70:	b	3b9bc <Mat_VarReadNextInfo4+0x138>
   3bb74:	mov	r3, #4
   3bb78:	b	3b9dc <Mat_VarReadNextInfo4+0x158>
   3bb7c:	mov	r3, #5
   3bb80:	b	3b9dc <Mat_VarReadNextInfo4+0x158>
   3bb84:	ldr	r0, [r4, #8]
   3bb88:	bl	1600 <Mat_SizeOf@plt>
   3bb8c:	ldr	r3, [r4, #20]
   3bb90:	add	r1, sp, #4
   3bb94:	cmp	r3, #0
   3bb98:	str	r0, [sp, #4]
   3bb9c:	lslne	r0, r0, #1
   3bba0:	strne	r0, [sp, #4]
   3bba4:	mov	r0, r4
   3bba8:	bl	3bee0 <SafeMulDims>
   3bbac:	mov	r2, #1
   3bbb0:	ldr	r1, [sp, #4]
   3bbb4:	ldr	r0, [r5]
   3bbb8:	bl	1714 <fseek@plt>
   3bbbc:	b	3b894 <Mat_VarReadNextInfo4+0x10>
   3bbc0:	.word	0x00000000
   3bbc4:	.word	0x408f4000
   3bbc8:	.word	0x00000000
   3bbcc:	.word	0x40590000
   3bbd0:	.word	0x00000000
   3bbd4:	.word	0x40240000
   3bbd8:	.word	0x00000fd4
   3bbdc:	.word	0xfffffc18
   3bbe0:	.word	0x00004c25

0003bbe4 <mat_copy>:
   3bbe4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3bbe8:	sub	sp, sp, #8192	; 0x2000
   3bbec:	mov	r4, r0
   3bbf0:	mov	r2, #8192	; 0x2000
   3bbf4:	mov	r8, r1
   3bbf8:	mov	r0, sp
   3bbfc:	mov	r1, #0
   3bc00:	bl	166c <memset@plt>
   3bc04:	ldr	r1, [pc, #216]	; 3bce4 <mat_copy+0x100>
   3bc08:	mov	r0, r4
   3bc0c:	add	r1, pc, r1
   3bc10:	bl	14bc <fopen@plt>
   3bc14:	subs	r5, r0, #0
   3bc18:	bne	3bc38 <mat_copy+0x54>
   3bc1c:	ldr	r0, [pc, #196]	; 3bce8 <mat_copy+0x104>
   3bc20:	mov	r1, r4
   3bc24:	add	r0, pc, r0
   3bc28:	bl	1690 <Mat_Critical@plt>
   3bc2c:	mvn	r0, #0
   3bc30:	add	sp, sp, #8192	; 0x2000
   3bc34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bc38:	ldr	r1, [pc, #172]	; 3bcec <mat_copy+0x108>
   3bc3c:	mov	r0, r8
   3bc40:	add	r1, pc, r1
   3bc44:	bl	14bc <fopen@plt>
   3bc48:	subs	r6, r0, #0
   3bc4c:	movne	r7, sp
   3bc50:	movne	sl, #8192	; 0x2000
   3bc54:	movne	r9, #1
   3bc58:	bne	3bcb0 <mat_copy+0xcc>
   3bc5c:	mov	r0, r5
   3bc60:	bl	16a8 <fclose@plt>
   3bc64:	ldr	r0, [pc, #132]	; 3bcf0 <mat_copy+0x10c>
   3bc68:	mov	r1, r8
   3bc6c:	add	r0, pc, r0
   3bc70:	b	3bc28 <mat_copy+0x44>
   3bc74:	mov	r3, r6
   3bc78:	mov	r2, r4
   3bc7c:	mov	r1, r9
   3bc80:	mov	r0, r7
   3bc84:	bl	157c <fwrite@plt>
   3bc88:	cmp	r4, r0
   3bc8c:	beq	3bcb0 <mat_copy+0xcc>
   3bc90:	mov	r0, r5
   3bc94:	bl	16a8 <fclose@plt>
   3bc98:	mov	r0, r6
   3bc9c:	bl	16a8 <fclose@plt>
   3bca0:	ldr	r0, [pc, #76]	; 3bcf4 <mat_copy+0x110>
   3bca4:	mov	r1, r8
   3bca8:	add	r0, pc, r0
   3bcac:	b	3bc28 <mat_copy+0x44>
   3bcb0:	mov	r3, r5
   3bcb4:	mov	r2, sl
   3bcb8:	mov	r1, r9
   3bcbc:	mov	r0, r7
   3bcc0:	bl	1588 <fread@plt>
   3bcc4:	subs	r4, r0, #0
   3bcc8:	bne	3bc74 <mat_copy+0x90>
   3bccc:	mov	r0, r5
   3bcd0:	bl	16a8 <fclose@plt>
   3bcd4:	mov	r0, r6
   3bcd8:	bl	16a8 <fclose@plt>
   3bcdc:	mov	r0, r4
   3bce0:	b	3bc30 <mat_copy+0x4c>
   3bce4:	.word	0x000050d0
   3bce8:	.word	0x000050bb
   3bcec:	.word	0x000050c2
   3bcf0:	.word	0x00005099
   3bcf4:	.word	0x00005080

0003bcf8 <Mat_PrintNumber>:
   3bcf8:	sub	r0, r0, #1
   3bcfc:	cmp	r0, #12
   3bd00:	addls	pc, pc, r0, lsl #2
   3bd04:	b	3bde4 <Mat_PrintNumber+0xec>
   3bd08:	b	3bdc4 <Mat_PrintNumber+0xcc>
   3bd0c:	b	3bdd4 <Mat_PrintNumber+0xdc>
   3bd10:	b	3bda4 <Mat_PrintNumber+0xac>
   3bd14:	b	3bdb4 <Mat_PrintNumber+0xbc>
   3bd18:	b	3bd84 <Mat_PrintNumber+0x8c>
   3bd1c:	b	3bd94 <Mat_PrintNumber+0x9c>
   3bd20:	b	3bd4c <Mat_PrintNumber+0x54>
   3bd24:	b	3bde4 <Mat_PrintNumber+0xec>
   3bd28:	b	3bd3c <Mat_PrintNumber+0x44>
   3bd2c:	b	3bde4 <Mat_PrintNumber+0xec>
   3bd30:	b	3bde4 <Mat_PrintNumber+0xec>
   3bd34:	b	3bd64 <Mat_PrintNumber+0x6c>
   3bd38:	b	3bd74 <Mat_PrintNumber+0x7c>
   3bd3c:	ldr	r0, [pc, #164]	; 3bde8 <Mat_PrintNumber+0xf0>
   3bd40:	ldrd	r2, [r1]
   3bd44:	add	r0, pc, r0
   3bd48:	b	14b0 <printf@plt>
   3bd4c:	vldr	s15, [r1]
   3bd50:	ldr	r0, [pc, #148]	; 3bdec <Mat_PrintNumber+0xf4>
   3bd54:	add	r0, pc, r0
   3bd58:	vcvt.f64.f32	d7, s15
   3bd5c:	vmov	r2, r3, d7
   3bd60:	b	3bd48 <Mat_PrintNumber+0x50>
   3bd64:	ldr	r0, [pc, #132]	; 3bdf0 <Mat_PrintNumber+0xf8>
   3bd68:	ldrd	r2, [r1]
   3bd6c:	add	r0, pc, r0
   3bd70:	b	14b0 <printf@plt>
   3bd74:	ldr	r0, [pc, #120]	; 3bdf4 <Mat_PrintNumber+0xfc>
   3bd78:	ldrd	r2, [r1]
   3bd7c:	add	r0, pc, r0
   3bd80:	b	3bd70 <Mat_PrintNumber+0x78>
   3bd84:	ldr	r0, [pc, #108]	; 3bdf8 <Mat_PrintNumber+0x100>
   3bd88:	ldr	r1, [r1]
   3bd8c:	add	r0, pc, r0
   3bd90:	b	14b0 <printf@plt>
   3bd94:	ldr	r0, [pc, #96]	; 3bdfc <Mat_PrintNumber+0x104>
   3bd98:	ldr	r1, [r1]
   3bd9c:	add	r0, pc, r0
   3bda0:	b	3bd90 <Mat_PrintNumber+0x98>
   3bda4:	ldr	r0, [pc, #84]	; 3be00 <Mat_PrintNumber+0x108>
   3bda8:	ldrsh	r1, [r1]
   3bdac:	add	r0, pc, r0
   3bdb0:	b	3bd90 <Mat_PrintNumber+0x98>
   3bdb4:	ldr	r0, [pc, #72]	; 3be04 <Mat_PrintNumber+0x10c>
   3bdb8:	ldrh	r1, [r1]
   3bdbc:	add	r0, pc, r0
   3bdc0:	b	3bd90 <Mat_PrintNumber+0x98>
   3bdc4:	ldr	r0, [pc, #60]	; 3be08 <Mat_PrintNumber+0x110>
   3bdc8:	ldrsb	r1, [r1]
   3bdcc:	add	r0, pc, r0
   3bdd0:	b	3bd90 <Mat_PrintNumber+0x98>
   3bdd4:	ldr	r0, [pc, #48]	; 3be0c <Mat_PrintNumber+0x114>
   3bdd8:	ldrb	r1, [r1]
   3bddc:	add	r0, pc, r0
   3bde0:	b	3bd90 <Mat_PrintNumber+0x98>
   3bde4:	bx	lr
   3bde8:	.word	0x00005000
   3bdec:	.word	0x00004ff0
   3bdf0:	.word	0x00004fdb
   3bdf4:	.word	0x00004fd0
   3bdf8:	.word	0x00004cb1
   3bdfc:	.word	0x00004fb5
   3be00:	.word	0x00004fa8
   3be04:	.word	0x00004f9c
   3be08:	.word	0x00004f90
   3be0c:	.word	0x00004f85

0003be10 <ReadData>:
   3be10:	cmp	r1, #0
   3be14:	cmpne	r0, #0
   3be18:	bxeq	lr
   3be1c:	ldr	r2, [r0]
   3be20:	cmp	r2, #0
   3be24:	bxeq	lr
   3be28:	ldr	r3, [r0, #16]
   3be2c:	cmp	r3, #256	; 0x100
   3be30:	bne	3be38 <ReadData+0x28>
   3be34:	b	35ebc <Mat_VarRead5>
   3be38:	cmp	r3, #16
   3be3c:	bxne	lr
   3be40:	b	3ac8c <Mat_VarRead4>

0003be44 <ComplexMalloc>:
   3be44:	push	{r4, r5, r6, lr}
   3be48:	mov	r6, r0
   3be4c:	mov	r0, #8
   3be50:	bl	15ac <malloc@plt>
   3be54:	subs	r4, r0, #0
   3be58:	beq	3bea0 <ComplexMalloc+0x5c>
   3be5c:	mov	r0, r6
   3be60:	bl	15ac <malloc@plt>
   3be64:	cmp	r0, #0
   3be68:	mov	r5, r0
   3be6c:	str	r0, [r4]
   3be70:	beq	3bea8 <ComplexMalloc+0x64>
   3be74:	mov	r0, r6
   3be78:	bl	15ac <malloc@plt>
   3be7c:	cmp	r0, #0
   3be80:	mov	r6, r0
   3be84:	str	r0, [r4, #4]
   3be88:	bne	3bea0 <ComplexMalloc+0x5c>
   3be8c:	mov	r0, r5
   3be90:	bl	14e0 <free@plt>
   3be94:	mov	r0, r4
   3be98:	bl	14e0 <free@plt>
   3be9c:	mov	r4, r6
   3bea0:	mov	r0, r4
   3bea4:	pop	{r4, r5, r6, pc}
   3bea8:	mov	r0, r4
   3beac:	bl	14e0 <free@plt>
   3beb0:	mov	r4, r5
   3beb4:	b	3bea0 <ComplexMalloc+0x5c>

0003beb8 <ClassType2DataType>:
   3beb8:	sub	r0, r0, #1
   3bebc:	cmp	r0, #14
   3bec0:	bhi	3bed4 <ClassType2DataType+0x1c>
   3bec4:	ldr	r3, [pc, #16]	; 3bedc <ClassType2DataType+0x24>
   3bec8:	add	r3, pc, r3
   3becc:	ldrb	r0, [r3, r0]
   3bed0:	bx	lr
   3bed4:	mov	r0, #0
   3bed8:	bx	lr
   3bedc:	.word	0x00004df9

0003bee0 <SafeMulDims>:
   3bee0:	ldr	r2, [r0, #4]
   3bee4:	mov	r3, #0
   3bee8:	cmp	r3, r2
   3beec:	blt	3bf10 <SafeMulDims+0x30>
   3bef0:	mov	r0, #0
   3bef4:	bx	lr
   3bef8:	ldr	r2, [r0, #4]
   3befc:	add	r3, r3, #1
   3bf00:	cmp	r3, r2
   3bf04:	blt	3bf14 <SafeMulDims+0x34>
   3bf08:	mov	r0, #0
   3bf0c:	pop	{r4, r5, pc}
   3bf10:	push	{r4, r5, lr}
   3bf14:	ldr	r2, [r0, #32]
   3bf18:	ldr	r4, [r1]
   3bf1c:	ldr	r2, [r2, r3, lsl #2]
   3bf20:	umull	r4, r5, r4, r2
   3bf24:	cmp	r5, #0
   3bf28:	str	r4, [r1]
   3bf2c:	beq	3bef8 <SafeMulDims+0x18>
   3bf30:	mov	r3, #0
   3bf34:	str	r3, [r1]
   3bf38:	mov	r0, #1
   3bf3c:	pop	{r4, r5, pc}

0003bf40 <SafeMul>:
   3bf40:	umull	r2, r3, r1, r2
   3bf44:	adds	r3, r3, #0
   3bf48:	movne	r3, #1
   3bf4c:	cmp	r3, #0
   3bf50:	movne	r2, #0
   3bf54:	str	r2, [r0]
   3bf58:	movne	r0, #1
   3bf5c:	moveq	r0, #0
   3bf60:	bx	lr

0003bf64 <Mat_GetLibraryVersion>:
   3bf64:	cmp	r0, #0
   3bf68:	movne	r3, #1
   3bf6c:	strne	r3, [r0]
   3bf70:	cmp	r1, #0
   3bf74:	movne	r3, #5
   3bf78:	strne	r3, [r1]
   3bf7c:	cmp	r2, #0
   3bf80:	movne	r3, #15
   3bf84:	strne	r3, [r2]
   3bf88:	bx	lr

0003bf8c <Mat_CreateVer>:
   3bf8c:	cmp	r2, #16
   3bf90:	beq	3bfa4 <Mat_CreateVer+0x18>
   3bf94:	cmp	r2, #256	; 0x100
   3bf98:	beq	3bfa8 <Mat_CreateVer+0x1c>
   3bf9c:	mov	r0, #0
   3bfa0:	bx	lr
   3bfa4:	b	3a698 <Mat_Create4>
   3bfa8:	b	35ce0 <Mat_Create5>

0003bfac <Mat_Close>:
   3bfac:	push	{r4, r5, r6, lr}
   3bfb0:	subs	r4, r0, #0
   3bfb4:	beq	3c010 <Mat_Close+0x64>
   3bfb8:	ldr	r0, [r4]
   3bfbc:	cmp	r0, #0
   3bfc0:	beq	3bfc8 <Mat_Close+0x1c>
   3bfc4:	bl	16a8 <fclose@plt>
   3bfc8:	ldr	r0, [r4, #4]
   3bfcc:	cmp	r0, #0
   3bfd0:	beq	3bfd8 <Mat_Close+0x2c>
   3bfd4:	bl	14e0 <free@plt>
   3bfd8:	ldr	r0, [r4, #8]
   3bfdc:	cmp	r0, #0
   3bfe0:	beq	3bfe8 <Mat_Close+0x3c>
   3bfe4:	bl	14e0 <free@plt>
   3bfe8:	ldr	r0, [r4, #12]
   3bfec:	cmp	r0, #0
   3bff0:	beq	3bff8 <Mat_Close+0x4c>
   3bff4:	bl	14e0 <free@plt>
   3bff8:	ldr	r3, [r4, #40]	; 0x28
   3bffc:	cmp	r3, #0
   3c000:	movne	r5, #0
   3c004:	bne	3c030 <Mat_Close+0x84>
   3c008:	mov	r0, r4
   3c00c:	bl	14e0 <free@plt>
   3c010:	mov	r0, #0
   3c014:	pop	{r4, r5, r6, pc}
   3c018:	ldr	r3, [r4, #40]	; 0x28
   3c01c:	ldr	r0, [r3, r5, lsl #2]
   3c020:	cmp	r0, #0
   3c024:	beq	3c02c <Mat_Close+0x80>
   3c028:	bl	14e0 <free@plt>
   3c02c:	add	r5, r5, #1
   3c030:	ldr	r3, [r4, #36]	; 0x24
   3c034:	cmp	r5, r3
   3c038:	bcc	3c018 <Mat_Close+0x6c>
   3c03c:	ldr	r0, [r4, #40]	; 0x28
   3c040:	bl	14e0 <free@plt>
   3c044:	b	3c008 <Mat_Close+0x5c>

0003c048 <Mat_GetFilename>:
   3c048:	cmp	r0, #0
   3c04c:	ldrne	r0, [r0, #12]
   3c050:	bx	lr

0003c054 <Mat_GetHeader>:
   3c054:	cmp	r0, #0
   3c058:	ldrne	r0, [r0, #4]
   3c05c:	bx	lr

0003c060 <Mat_GetVersion>:
   3c060:	cmp	r0, #0
   3c064:	ldrne	r0, [r0, #16]
   3c068:	bx	lr

0003c06c <Mat_Rewind>:
   3c06c:	ldr	r3, [r0, #16]
   3c070:	push	{r4, lr}
   3c074:	cmp	r3, #256	; 0x100
   3c078:	beq	3c098 <Mat_Rewind+0x2c>
   3c07c:	cmp	r3, #512	; 0x200
   3c080:	beq	3c0ac <Mat_Rewind+0x40>
   3c084:	cmp	r3, #16
   3c088:	bne	3c0bc <Mat_Rewind+0x50>
   3c08c:	mov	r2, #0
   3c090:	mov	r1, r2
   3c094:	b	3c0a0 <Mat_Rewind+0x34>
   3c098:	mov	r2, #0
   3c09c:	mov	r1, #128	; 0x80
   3c0a0:	ldr	r0, [r0]
   3c0a4:	bl	1714 <fseek@plt>
   3c0a8:	b	3c0b4 <Mat_Rewind+0x48>
   3c0ac:	mov	r3, #0
   3c0b0:	str	r3, [r0, #32]
   3c0b4:	mov	r0, #0
   3c0b8:	pop	{r4, pc}
   3c0bc:	mvn	r0, #0
   3c0c0:	pop	{r4, pc}

0003c0c4 <Mat_SizeOfClass>:
   3c0c4:	sub	r0, r0, #4
   3c0c8:	cmp	r0, #11
   3c0cc:	bhi	3c0e4 <Mat_SizeOfClass+0x20>
   3c0d0:	ldr	r3, [pc, #20]	; 3c0ec <Mat_SizeOfClass+0x28>
   3c0d4:	add	r3, pc, r3
   3c0d8:	add	r0, r3, r0
   3c0dc:	ldrb	r0, [r0, #15]
   3c0e0:	bx	lr
   3c0e4:	mov	r0, #0
   3c0e8:	bx	lr
   3c0ec:	.word	0x00004bed

0003c0f0 <Mat_VarCalloc>:
   3c0f0:	push	{r4, r5, r6, lr}
   3c0f4:	mov	r0, #56	; 0x38
   3c0f8:	bl	15ac <malloc@plt>
   3c0fc:	subs	r5, r0, #0
   3c100:	beq	3c160 <Mat_VarCalloc+0x70>
   3c104:	mov	r4, #0
   3c108:	str	r4, [r5]
   3c10c:	str	r4, [r5, #4]
   3c110:	str	r4, [r5, #8]
   3c114:	str	r4, [r5, #12]
   3c118:	str	r4, [r5, #16]
   3c11c:	str	r4, [r5, #20]
   3c120:	str	r4, [r5, #24]
   3c124:	str	r4, [r5, #28]
   3c128:	str	r4, [r5, #32]
   3c12c:	str	r4, [r5, #36]	; 0x24
   3c130:	str	r4, [r5, #40]	; 0x28
   3c134:	str	r4, [r5, #44]	; 0x2c
   3c138:	str	r4, [r5, #48]	; 0x30
   3c13c:	mov	r0, #20
   3c140:	bl	15ac <malloc@plt>
   3c144:	cmp	r0, r4
   3c148:	mov	r6, r0
   3c14c:	str	r0, [r5, #52]	; 0x34
   3c150:	bne	3c168 <Mat_VarCalloc+0x78>
   3c154:	mov	r0, r5
   3c158:	bl	14e0 <free@plt>
   3c15c:	mov	r5, r6
   3c160:	mov	r0, r5
   3c164:	pop	{r4, r5, r6, pc}
   3c168:	str	r4, [r0]
   3c16c:	str	r4, [r0, #4]
   3c170:	str	r4, [r0, #8]
   3c174:	str	r4, [r0, #12]
   3c178:	str	r4, [r0, #16]
   3c17c:	b	3c160 <Mat_VarCalloc+0x70>

0003c180 <Mat_VarDuplicate>:
   3c180:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c184:	mov	r4, r0
   3c188:	mov	r8, r1
   3c18c:	bl	1570 <Mat_VarCalloc@plt>
   3c190:	subs	r5, r0, #0
   3c194:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c198:	ldr	r3, [r4]
   3c19c:	ldr	r0, [r4, #36]	; 0x24
   3c1a0:	str	r3, [r5]
   3c1a4:	ldr	r3, [r4, #4]
   3c1a8:	cmp	r0, #0
   3c1ac:	str	r3, [r5, #4]
   3c1b0:	ldr	r3, [r4, #8]
   3c1b4:	str	r3, [r5, #8]
   3c1b8:	ldr	r3, [r4, #12]
   3c1bc:	str	r3, [r5, #12]
   3c1c0:	ldr	r3, [r4, #16]
   3c1c4:	str	r3, [r5, #16]
   3c1c8:	ldr	r3, [r4, #20]
   3c1cc:	str	r3, [r5, #20]
   3c1d0:	ldr	r3, [r4, #24]
   3c1d4:	str	r3, [r5, #24]
   3c1d8:	ldr	r3, [r4, #28]
   3c1dc:	str	r3, [r5, #28]
   3c1e0:	ldr	r3, [r4, #44]	; 0x2c
   3c1e4:	str	r3, [r5, #44]	; 0x2c
   3c1e8:	ldr	r3, [r4, #48]	; 0x30
   3c1ec:	str	r3, [r5, #48]	; 0x30
   3c1f0:	beq	3c21c <Mat_VarDuplicate+0x9c>
   3c1f4:	bl	1630 <strlen@plt>
   3c1f8:	add	r6, r0, #1
   3c1fc:	mov	r0, r6
   3c200:	bl	15ac <malloc@plt>
   3c204:	cmp	r0, #0
   3c208:	str	r0, [r5, #36]	; 0x24
   3c20c:	beq	3c21c <Mat_VarDuplicate+0x9c>
   3c210:	mov	r2, r6
   3c214:	ldr	r1, [r4, #36]	; 0x24
   3c218:	bl	14f8 <memcpy@plt>
   3c21c:	ldr	r6, [r4, #4]
   3c220:	lsl	r6, r6, #2
   3c224:	mov	r0, r6
   3c228:	bl	15ac <malloc@plt>
   3c22c:	cmp	r0, #0
   3c230:	str	r0, [r5, #32]
   3c234:	beq	3c244 <Mat_VarDuplicate+0xc4>
   3c238:	mov	r2, r6
   3c23c:	ldr	r1, [r4, #32]
   3c240:	bl	14f8 <memcpy@plt>
   3c244:	ldr	r6, [r4, #52]	; 0x34
   3c248:	cmp	r6, #0
   3c24c:	beq	3c5b4 <Mat_VarDuplicate+0x434>
   3c250:	ldr	r9, [r5, #52]	; 0x34
   3c254:	ldr	r3, [r6]
   3c258:	mov	r7, #0
   3c25c:	str	r3, [r9]
   3c260:	ldr	r3, [r6, #4]
   3c264:	str	r7, [r9, #12]
   3c268:	str	r3, [r9, #4]
   3c26c:	ldr	r3, [r6, #8]
   3c270:	str	r7, [r9, #16]
   3c274:	cmp	r3, r7
   3c278:	bne	3c3fc <Mat_VarDuplicate+0x27c>
   3c27c:	ldr	r3, [r6, #12]
   3c280:	cmp	r3, #0
   3c284:	bne	3c444 <Mat_VarDuplicate+0x2c4>
   3c288:	ldr	r6, [r4, #52]	; 0x34
   3c28c:	ldr	r3, [r6, #16]
   3c290:	cmp	r3, #0
   3c294:	beq	3c51c <Mat_VarDuplicate+0x39c>
   3c298:	ldr	r3, [r4, #16]
   3c29c:	ldr	r9, [r5, #52]	; 0x34
   3c2a0:	cmp	r3, #5
   3c2a4:	bne	3c4b0 <Mat_VarDuplicate+0x330>
   3c2a8:	mov	r0, #28
   3c2ac:	bl	15ac <malloc@plt>
   3c2b0:	cmp	r0, #0
   3c2b4:	mov	r7, r0
   3c2b8:	str	r0, [r9, #16]
   3c2bc:	beq	3c51c <Mat_VarDuplicate+0x39c>
   3c2c0:	ldr	r6, [r6, #16]
   3c2c4:	ldr	r3, [r6]
   3c2c8:	str	r3, [r0]
   3c2cc:	ldr	r3, [r6, #8]
   3c2d0:	str	r3, [r0, #8]
   3c2d4:	ldr	r9, [r6, #8]
   3c2d8:	lsl	r9, r9, #2
   3c2dc:	mov	r0, r9
   3c2e0:	bl	15ac <malloc@plt>
   3c2e4:	cmp	r0, #0
   3c2e8:	str	r0, [r7, #4]
   3c2ec:	beq	3c2fc <Mat_VarDuplicate+0x17c>
   3c2f0:	mov	r2, r9
   3c2f4:	ldr	r1, [r6, #4]
   3c2f8:	bl	14f8 <memcpy@plt>
   3c2fc:	ldr	r3, [r6, #16]
   3c300:	str	r3, [r7, #16]
   3c304:	ldr	r9, [r6, #16]
   3c308:	lsl	r9, r9, #2
   3c30c:	mov	r0, r9
   3c310:	bl	15ac <malloc@plt>
   3c314:	cmp	r0, #0
   3c318:	str	r0, [r7, #12]
   3c31c:	beq	3c32c <Mat_VarDuplicate+0x1ac>
   3c320:	mov	r2, r9
   3c324:	ldr	r1, [r6, #12]
   3c328:	bl	14f8 <memcpy@plt>
   3c32c:	ldr	r3, [r6, #20]
   3c330:	str	r3, [r7, #20]
   3c334:	ldr	r3, [r5, #20]
   3c338:	cmp	r3, #0
   3c33c:	ldr	r3, [r6, #24]
   3c340:	beq	3c464 <Mat_VarDuplicate+0x2e4>
   3c344:	cmp	r3, #0
   3c348:	beq	3c51c <Mat_VarDuplicate+0x39c>
   3c34c:	mov	r0, #8
   3c350:	bl	15ac <malloc@plt>
   3c354:	cmp	r0, #0
   3c358:	mov	r9, r0
   3c35c:	str	r0, [r7, #24]
   3c360:	beq	3c51c <Mat_VarDuplicate+0x39c>
   3c364:	ldr	r0, [r4, #8]
   3c368:	ldr	r7, [r6, #20]
   3c36c:	ldr	sl, [r6, #24]
   3c370:	bl	1600 <Mat_SizeOf@plt>
   3c374:	mul	r0, r0, r7
   3c378:	bl	15ac <malloc@plt>
   3c37c:	cmp	r0, #0
   3c380:	mov	r7, r0
   3c384:	str	r0, [r9]
   3c388:	beq	3c3b4 <Mat_VarDuplicate+0x234>
   3c38c:	ldr	r2, [r6, #20]
   3c390:	ldr	r0, [r4, #8]
   3c394:	ldr	fp, [sl]
   3c398:	str	r2, [sp, #4]
   3c39c:	bl	1600 <Mat_SizeOf@plt>
   3c3a0:	ldr	r2, [sp, #4]
   3c3a4:	mov	r1, fp
   3c3a8:	mul	r2, r0, r2
   3c3ac:	mov	r0, r7
   3c3b0:	bl	14f8 <memcpy@plt>
   3c3b4:	ldr	r0, [r4, #8]
   3c3b8:	ldr	r7, [r6, #20]
   3c3bc:	bl	1600 <Mat_SizeOf@plt>
   3c3c0:	mul	r0, r0, r7
   3c3c4:	bl	15ac <malloc@plt>
   3c3c8:	cmp	r0, #0
   3c3cc:	mov	r7, r0
   3c3d0:	str	r0, [r9, #4]
   3c3d4:	beq	3c51c <Mat_VarDuplicate+0x39c>
   3c3d8:	ldr	r0, [r4, #8]
   3c3dc:	ldr	r9, [sl, #4]
   3c3e0:	ldr	r6, [r6, #20]
   3c3e4:	bl	1600 <Mat_SizeOf@plt>
   3c3e8:	mov	r1, r9
   3c3ec:	mul	r2, r0, r6
   3c3f0:	mov	r0, r7
   3c3f4:	bl	14f8 <memcpy@plt>
   3c3f8:	b	3c51c <Mat_VarDuplicate+0x39c>
   3c3fc:	ldr	sl, [r6, #4]
   3c400:	cmp	sl, #0
   3c404:	beq	3c27c <Mat_VarDuplicate+0xfc>
   3c408:	mov	r1, #4
   3c40c:	mov	r0, sl
   3c410:	bl	1468 <calloc@plt>
   3c414:	mov	fp, r0
   3c418:	str	r0, [r9, #8]
   3c41c:	ldr	r3, [r6, #8]
   3c420:	ldr	r0, [r3, r7, lsl #2]
   3c424:	cmp	r0, #0
   3c428:	beq	3c434 <Mat_VarDuplicate+0x2b4>
   3c42c:	bl	1534 <strdup@plt>
   3c430:	str	r0, [fp, r7, lsl #2]
   3c434:	add	r7, r7, #1
   3c438:	cmp	sl, r7
   3c43c:	bne	3c41c <Mat_VarDuplicate+0x29c>
   3c440:	b	3c27c <Mat_VarDuplicate+0xfc>
   3c444:	mov	r0, #56	; 0x38
   3c448:	bl	15ac <malloc@plt>
   3c44c:	cmp	r0, #0
   3c450:	str	r0, [r9, #12]
   3c454:	beq	3c288 <Mat_VarDuplicate+0x108>
   3c458:	ldr	r1, [r6, #12]
   3c45c:	bl	1624 <inflateCopy@plt>
   3c460:	b	3c288 <Mat_VarDuplicate+0x108>
   3c464:	cmp	r3, #0
   3c468:	beq	3c51c <Mat_VarDuplicate+0x39c>
   3c46c:	ldr	r0, [r4, #8]
   3c470:	ldr	r9, [r6, #20]
   3c474:	bl	1600 <Mat_SizeOf@plt>
   3c478:	mul	r0, r0, r9
   3c47c:	bl	15ac <malloc@plt>
   3c480:	cmp	r0, #0
   3c484:	mov	r9, r0
   3c488:	str	r0, [r7, #24]
   3c48c:	beq	3c51c <Mat_VarDuplicate+0x39c>
   3c490:	ldr	r0, [r4, #8]
   3c494:	ldr	r7, [r6, #24]
   3c498:	ldr	r6, [r6, #20]
   3c49c:	bl	1600 <Mat_SizeOf@plt>
   3c4a0:	mov	r1, r7
   3c4a4:	mul	r2, r0, r6
   3c4a8:	mov	r0, r9
   3c4ac:	b	3c3f4 <Mat_VarDuplicate+0x274>
   3c4b0:	ldr	r3, [r5, #20]
   3c4b4:	cmp	r3, #0
   3c4b8:	beq	3c590 <Mat_VarDuplicate+0x410>
   3c4bc:	mov	r0, #8
   3c4c0:	bl	15ac <malloc@plt>
   3c4c4:	cmp	r0, #0
   3c4c8:	mov	r7, r0
   3c4cc:	str	r0, [r9, #16]
   3c4d0:	beq	3c51c <Mat_VarDuplicate+0x39c>
   3c4d4:	ldr	r9, [r5]
   3c4d8:	ldr	r6, [r6, #16]
   3c4dc:	mov	r0, r9
   3c4e0:	bl	15ac <malloc@plt>
   3c4e4:	cmp	r0, #0
   3c4e8:	str	r0, [r7]
   3c4ec:	beq	3c4fc <Mat_VarDuplicate+0x37c>
   3c4f0:	mov	r2, r9
   3c4f4:	ldr	r1, [r6]
   3c4f8:	bl	14f8 <memcpy@plt>
   3c4fc:	ldr	r9, [r5]
   3c500:	mov	r0, r9
   3c504:	bl	15ac <malloc@plt>
   3c508:	cmp	r0, #0
   3c50c:	str	r0, [r7, #4]
   3c510:	movne	r2, r9
   3c514:	ldrne	r1, [r6, #4]
   3c518:	bne	3c3f4 <Mat_VarDuplicate+0x274>
   3c51c:	ldr	r3, [r4, #40]	; 0x28
   3c520:	cmp	r8, #0
   3c524:	streq	r3, [r5, #40]	; 0x28
   3c528:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c52c:	cmp	r3, #0
   3c530:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c534:	ldr	r3, [r4, #16]
   3c538:	cmp	r3, #2
   3c53c:	bne	3c5dc <Mat_VarDuplicate+0x45c>
   3c540:	ldr	r7, [r4]
   3c544:	mov	r0, r7
   3c548:	bl	15ac <malloc@plt>
   3c54c:	cmp	r0, #0
   3c550:	mov	r6, r0
   3c554:	str	r0, [r5, #40]	; 0x28
   3c558:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c55c:	ldr	r1, [r4, #12]
   3c560:	cmp	r1, #0
   3c564:	ble	3c584 <Mat_VarDuplicate+0x404>
   3c568:	mov	r0, r7
   3c56c:	bl	3f8ec <__udivsi3>
   3c570:	ldr	r9, [r4, #40]	; 0x28
   3c574:	mov	r4, #0
   3c578:	mov	r7, r0
   3c57c:	cmp	r4, r7
   3c580:	bne	3c5c4 <Mat_VarDuplicate+0x444>
   3c584:	mov	r0, r5
   3c588:	add	sp, sp, #12
   3c58c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c590:	ldr	r7, [r4]
   3c594:	mov	r0, r7
   3c598:	bl	15ac <malloc@plt>
   3c59c:	cmp	r0, #0
   3c5a0:	str	r0, [r9, #16]
   3c5a4:	beq	3c51c <Mat_VarDuplicate+0x39c>
   3c5a8:	mov	r2, r7
   3c5ac:	ldr	r1, [r6, #16]
   3c5b0:	b	3c3f4 <Mat_VarDuplicate+0x274>
   3c5b4:	ldr	r0, [r5, #52]	; 0x34
   3c5b8:	bl	14e0 <free@plt>
   3c5bc:	str	r6, [r5, #52]	; 0x34
   3c5c0:	b	3c51c <Mat_VarDuplicate+0x39c>
   3c5c4:	ldr	r0, [r9, r4, lsl #2]
   3c5c8:	mov	r1, r8
   3c5cc:	bl	172c <Mat_VarDuplicate@plt>
   3c5d0:	str	r0, [r6, r4, lsl #2]
   3c5d4:	add	r4, r4, #1
   3c5d8:	b	3c57c <Mat_VarDuplicate+0x3fc>
   3c5dc:	cmp	r3, #1
   3c5e0:	bne	3c640 <Mat_VarDuplicate+0x4c0>
   3c5e4:	ldr	r7, [r4]
   3c5e8:	mov	r0, r7
   3c5ec:	bl	15ac <malloc@plt>
   3c5f0:	cmp	r0, #0
   3c5f4:	mov	r6, r0
   3c5f8:	str	r0, [r5, #40]	; 0x28
   3c5fc:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c600:	ldr	r1, [r4, #12]
   3c604:	cmp	r1, #0
   3c608:	ble	3c584 <Mat_VarDuplicate+0x404>
   3c60c:	mov	r0, r7
   3c610:	bl	3f8ec <__udivsi3>
   3c614:	ldr	r9, [r4, #40]	; 0x28
   3c618:	mov	r4, #0
   3c61c:	mov	r7, r0
   3c620:	cmp	r4, r7
   3c624:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c628:	ldr	r0, [r9, r4, lsl #2]
   3c62c:	mov	r1, r8
   3c630:	bl	172c <Mat_VarDuplicate@plt>
   3c634:	str	r0, [r6, r4, lsl #2]
   3c638:	add	r4, r4, #1
   3c63c:	b	3c620 <Mat_VarDuplicate+0x4a0>
   3c640:	cmp	r3, #5
   3c644:	bne	3c7e8 <Mat_VarDuplicate+0x668>
   3c648:	mov	r0, #28
   3c64c:	bl	15ac <malloc@plt>
   3c650:	cmp	r0, #0
   3c654:	mov	r7, r0
   3c658:	str	r0, [r5, #40]	; 0x28
   3c65c:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c660:	ldr	r6, [r4, #40]	; 0x28
   3c664:	ldr	r3, [r6]
   3c668:	str	r3, [r0]
   3c66c:	ldr	r3, [r6, #8]
   3c670:	str	r3, [r0, #8]
   3c674:	ldr	r8, [r6, #8]
   3c678:	lsl	r8, r8, #2
   3c67c:	mov	r0, r8
   3c680:	bl	15ac <malloc@plt>
   3c684:	cmp	r0, #0
   3c688:	str	r0, [r7, #4]
   3c68c:	beq	3c69c <Mat_VarDuplicate+0x51c>
   3c690:	mov	r2, r8
   3c694:	ldr	r1, [r6, #4]
   3c698:	bl	14f8 <memcpy@plt>
   3c69c:	ldr	r3, [r6, #16]
   3c6a0:	str	r3, [r7, #16]
   3c6a4:	ldr	r8, [r6, #16]
   3c6a8:	lsl	r8, r8, #2
   3c6ac:	mov	r0, r8
   3c6b0:	bl	15ac <malloc@plt>
   3c6b4:	cmp	r0, #0
   3c6b8:	str	r0, [r7, #12]
   3c6bc:	beq	3c6cc <Mat_VarDuplicate+0x54c>
   3c6c0:	mov	r2, r8
   3c6c4:	ldr	r1, [r6, #12]
   3c6c8:	bl	14f8 <memcpy@plt>
   3c6cc:	ldr	r3, [r6, #20]
   3c6d0:	str	r3, [r7, #20]
   3c6d4:	ldr	r3, [r5, #20]
   3c6d8:	cmp	r3, #0
   3c6dc:	ldr	r3, [r6, #24]
   3c6e0:	beq	3c794 <Mat_VarDuplicate+0x614>
   3c6e4:	cmp	r3, #0
   3c6e8:	beq	3c7e0 <Mat_VarDuplicate+0x660>
   3c6ec:	mov	r0, #8
   3c6f0:	bl	15ac <malloc@plt>
   3c6f4:	cmp	r0, #0
   3c6f8:	mov	r8, r0
   3c6fc:	str	r0, [r7, #24]
   3c700:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c704:	ldr	r0, [r4, #8]
   3c708:	ldr	r7, [r6, #20]
   3c70c:	ldr	r9, [r6, #24]
   3c710:	bl	1600 <Mat_SizeOf@plt>
   3c714:	mul	r0, r0, r7
   3c718:	bl	15ac <malloc@plt>
   3c71c:	cmp	r0, #0
   3c720:	mov	r7, r0
   3c724:	str	r0, [r8]
   3c728:	beq	3c74c <Mat_VarDuplicate+0x5cc>
   3c72c:	ldr	r0, [r4, #8]
   3c730:	ldr	sl, [r9]
   3c734:	ldr	fp, [r6, #20]
   3c738:	bl	1600 <Mat_SizeOf@plt>
   3c73c:	mov	r1, sl
   3c740:	mul	r2, r0, fp
   3c744:	mov	r0, r7
   3c748:	bl	14f8 <memcpy@plt>
   3c74c:	ldr	r0, [r4, #8]
   3c750:	ldr	r7, [r6, #20]
   3c754:	bl	1600 <Mat_SizeOf@plt>
   3c758:	mul	r0, r0, r7
   3c75c:	bl	15ac <malloc@plt>
   3c760:	cmp	r0, #0
   3c764:	mov	r7, r0
   3c768:	str	r0, [r8, #4]
   3c76c:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c770:	ldr	r0, [r4, #8]
   3c774:	ldr	r8, [r9, #4]
   3c778:	ldr	r6, [r6, #20]
   3c77c:	bl	1600 <Mat_SizeOf@plt>
   3c780:	mov	r1, r8
   3c784:	mul	r2, r0, r6
   3c788:	mov	r0, r7
   3c78c:	bl	14f8 <memcpy@plt>
   3c790:	b	3c584 <Mat_VarDuplicate+0x404>
   3c794:	cmp	r3, #0
   3c798:	beq	3c7e0 <Mat_VarDuplicate+0x660>
   3c79c:	ldr	r0, [r4, #8]
   3c7a0:	ldr	r8, [r6, #20]
   3c7a4:	bl	1600 <Mat_SizeOf@plt>
   3c7a8:	mul	r0, r0, r8
   3c7ac:	bl	15ac <malloc@plt>
   3c7b0:	cmp	r0, #0
   3c7b4:	mov	r8, r0
   3c7b8:	str	r0, [r7, #24]
   3c7bc:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c7c0:	ldr	r0, [r4, #8]
   3c7c4:	ldr	r7, [r6, #24]
   3c7c8:	ldr	r6, [r6, #20]
   3c7cc:	bl	1600 <Mat_SizeOf@plt>
   3c7d0:	mov	r1, r7
   3c7d4:	mul	r2, r0, r6
   3c7d8:	mov	r0, r8
   3c7dc:	b	3c78c <Mat_VarDuplicate+0x60c>
   3c7e0:	str	r3, [r7, #24]
   3c7e4:	b	3c584 <Mat_VarDuplicate+0x404>
   3c7e8:	ldr	r3, [r5, #20]
   3c7ec:	cmp	r3, #0
   3c7f0:	beq	3c858 <Mat_VarDuplicate+0x6d8>
   3c7f4:	mov	r0, #8
   3c7f8:	bl	15ac <malloc@plt>
   3c7fc:	cmp	r0, #0
   3c800:	mov	r6, r0
   3c804:	str	r0, [r5, #40]	; 0x28
   3c808:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c80c:	ldr	r7, [r5]
   3c810:	ldr	r4, [r4, #40]	; 0x28
   3c814:	mov	r0, r7
   3c818:	bl	15ac <malloc@plt>
   3c81c:	cmp	r0, #0
   3c820:	str	r0, [r6]
   3c824:	beq	3c834 <Mat_VarDuplicate+0x6b4>
   3c828:	mov	r2, r7
   3c82c:	ldr	r1, [r4]
   3c830:	bl	14f8 <memcpy@plt>
   3c834:	ldr	r7, [r5]
   3c838:	mov	r0, r7
   3c83c:	bl	15ac <malloc@plt>
   3c840:	cmp	r0, #0
   3c844:	str	r0, [r6, #4]
   3c848:	movne	r2, r7
   3c84c:	ldrne	r1, [r4, #4]
   3c850:	bne	3c78c <Mat_VarDuplicate+0x60c>
   3c854:	b	3c584 <Mat_VarDuplicate+0x404>
   3c858:	ldr	r6, [r4]
   3c85c:	mov	r0, r6
   3c860:	bl	15ac <malloc@plt>
   3c864:	cmp	r0, #0
   3c868:	str	r0, [r5, #40]	; 0x28
   3c86c:	beq	3c584 <Mat_VarDuplicate+0x404>
   3c870:	mov	r2, r6
   3c874:	ldr	r1, [r4, #40]	; 0x28
   3c878:	b	3c78c <Mat_VarDuplicate+0x60c>

0003c87c <Mat_VarFree>:
   3c87c:	push	{r0, r1, r4, r5, r6, lr}
   3c880:	mov	r3, #0
   3c884:	subs	r4, r0, #0
   3c888:	str	r3, [sp]
   3c88c:	beq	3cb74 <Mat_VarFree+0x2f8>
   3c890:	ldr	r3, [r4, #32]
   3c894:	cmp	r3, #0
   3c898:	beq	3c8b4 <Mat_VarFree+0x38>
   3c89c:	add	r1, sp, #8
   3c8a0:	mov	r3, #1
   3c8a4:	str	r3, [r1, #-8]!
   3c8a8:	bl	3bee0 <SafeMulDims>
   3c8ac:	ldr	r0, [r4, #32]
   3c8b0:	bl	14e0 <free@plt>
   3c8b4:	ldr	r5, [r4, #40]	; 0x28
   3c8b8:	cmp	r5, #0
   3c8bc:	beq	3ca28 <Mat_VarFree+0x1ac>
   3c8c0:	ldr	r3, [r4, #16]
   3c8c4:	sub	r3, r3, #1
   3c8c8:	cmp	r3, #15
   3c8cc:	addls	pc, pc, r3, lsl #2
   3c8d0:	b	3ca28 <Mat_VarFree+0x1ac>
   3c8d4:	b	3c95c <Mat_VarFree+0xe0>
   3c8d8:	b	3c914 <Mat_VarFree+0x98>
   3c8dc:	b	3ca28 <Mat_VarFree+0x1ac>
   3c8e0:	b	3c9f4 <Mat_VarFree+0x178>
   3c8e4:	b	3c984 <Mat_VarFree+0x108>
   3c8e8:	b	3c9f4 <Mat_VarFree+0x178>
   3c8ec:	b	3c9f4 <Mat_VarFree+0x178>
   3c8f0:	b	3c9f4 <Mat_VarFree+0x178>
   3c8f4:	b	3c9f4 <Mat_VarFree+0x178>
   3c8f8:	b	3c9f4 <Mat_VarFree+0x178>
   3c8fc:	b	3c9f4 <Mat_VarFree+0x178>
   3c900:	b	3c9f4 <Mat_VarFree+0x178>
   3c904:	b	3c9f4 <Mat_VarFree+0x178>
   3c908:	b	3c9f4 <Mat_VarFree+0x178>
   3c90c:	b	3c9f4 <Mat_VarFree+0x178>
   3c910:	b	3ca1c <Mat_VarFree+0x1a0>
   3c914:	ldr	r6, [r4, #44]	; 0x2c
   3c918:	cmp	r6, #0
   3c91c:	bne	3ca28 <Mat_VarFree+0x1ac>
   3c920:	ldr	r3, [r4, #52]	; 0x34
   3c924:	ldr	r1, [sp]
   3c928:	add	r0, sp, #4
   3c92c:	ldr	r2, [r3, #4]
   3c930:	bl	3bf40 <SafeMul>
   3c934:	ldr	r3, [sp, #4]
   3c938:	cmp	r6, r3
   3c93c:	bcc	3c94c <Mat_VarFree+0xd0>
   3c940:	ldr	r0, [r4, #40]	; 0x28
   3c944:	bl	14e0 <free@plt>
   3c948:	b	3ca28 <Mat_VarFree+0x1ac>
   3c94c:	ldr	r0, [r5, r6, lsl #2]
   3c950:	bl	15f4 <Mat_VarFree@plt>
   3c954:	add	r6, r6, #1
   3c958:	b	3c934 <Mat_VarFree+0xb8>
   3c95c:	ldr	r6, [r4, #44]	; 0x2c
   3c960:	cmp	r6, #0
   3c964:	bne	3ca28 <Mat_VarFree+0x1ac>
   3c968:	ldr	r3, [sp]
   3c96c:	cmp	r6, r3
   3c970:	bcs	3c940 <Mat_VarFree+0xc4>
   3c974:	ldr	r0, [r5, r6, lsl #2]
   3c978:	bl	15f4 <Mat_VarFree@plt>
   3c97c:	add	r6, r6, #1
   3c980:	b	3c968 <Mat_VarFree+0xec>
   3c984:	ldr	r3, [r4, #44]	; 0x2c
   3c988:	cmp	r3, #0
   3c98c:	bne	3ca28 <Mat_VarFree+0x1ac>
   3c990:	ldr	r0, [r5, #4]
   3c994:	cmp	r0, #0
   3c998:	beq	3c9a0 <Mat_VarFree+0x124>
   3c99c:	bl	14e0 <free@plt>
   3c9a0:	ldr	r0, [r5, #12]
   3c9a4:	cmp	r0, #0
   3c9a8:	beq	3c9b0 <Mat_VarFree+0x134>
   3c9ac:	bl	14e0 <free@plt>
   3c9b0:	ldr	r3, [r4, #20]
   3c9b4:	ldr	r6, [r5, #24]
   3c9b8:	cmp	r3, #0
   3c9bc:	beq	3c9e4 <Mat_VarFree+0x168>
   3c9c0:	cmp	r6, #0
   3c9c4:	beq	3c9ec <Mat_VarFree+0x170>
   3c9c8:	ldr	r0, [r6]
   3c9cc:	bl	14e0 <free@plt>
   3c9d0:	ldr	r0, [r6, #4]
   3c9d4:	bl	14e0 <free@plt>
   3c9d8:	mov	r0, r6
   3c9dc:	bl	14e0 <free@plt>
   3c9e0:	b	3c9ec <Mat_VarFree+0x170>
   3c9e4:	cmp	r6, #0
   3c9e8:	bne	3c9d8 <Mat_VarFree+0x15c>
   3c9ec:	mov	r0, r5
   3c9f0:	b	3c944 <Mat_VarFree+0xc8>
   3c9f4:	ldr	r3, [r4, #44]	; 0x2c
   3c9f8:	cmp	r3, #0
   3c9fc:	bne	3ca28 <Mat_VarFree+0x1ac>
   3ca00:	ldr	r3, [r4, #20]
   3ca04:	cmp	r3, #0
   3ca08:	beq	3c9ec <Mat_VarFree+0x170>
   3ca0c:	ldr	r0, [r5]
   3ca10:	bl	14e0 <free@plt>
   3ca14:	ldr	r0, [r5, #4]
   3ca18:	b	3c9dc <Mat_VarFree+0x160>
   3ca1c:	ldr	r3, [r4, #44]	; 0x2c
   3ca20:	cmp	r3, #0
   3ca24:	beq	3c9ec <Mat_VarFree+0x170>
   3ca28:	ldr	r3, [r4, #52]	; 0x34
   3ca2c:	cmp	r3, #0
   3ca30:	beq	3cb04 <Mat_VarFree+0x288>
   3ca34:	ldr	r2, [r4, #48]	; 0x30
   3ca38:	cmp	r2, #1
   3ca3c:	bne	3cad4 <Mat_VarFree+0x258>
   3ca40:	ldr	r0, [r3, #12]
   3ca44:	bl	1618 <inflateEnd@plt>
   3ca48:	ldr	r3, [r4, #52]	; 0x34
   3ca4c:	ldr	r0, [r3, #12]
   3ca50:	bl	14e0 <free@plt>
   3ca54:	ldr	r3, [r4, #52]	; 0x34
   3ca58:	ldr	r5, [r3, #16]
   3ca5c:	cmp	r5, #0
   3ca60:	beq	3cad4 <Mat_VarFree+0x258>
   3ca64:	ldr	r3, [r4, #16]
   3ca68:	cmp	r3, #5
   3ca6c:	bne	3cb24 <Mat_VarFree+0x2a8>
   3ca70:	ldr	r0, [r5, #4]
   3ca74:	cmp	r0, #0
   3ca78:	beq	3ca80 <Mat_VarFree+0x204>
   3ca7c:	bl	14e0 <free@plt>
   3ca80:	ldr	r0, [r5, #12]
   3ca84:	cmp	r0, #0
   3ca88:	beq	3ca90 <Mat_VarFree+0x214>
   3ca8c:	bl	14e0 <free@plt>
   3ca90:	ldr	r3, [r4, #20]
   3ca94:	ldr	r6, [r5, #24]
   3ca98:	cmp	r3, #0
   3ca9c:	beq	3cac4 <Mat_VarFree+0x248>
   3caa0:	cmp	r6, #0
   3caa4:	beq	3cacc <Mat_VarFree+0x250>
   3caa8:	ldr	r0, [r6]
   3caac:	bl	14e0 <free@plt>
   3cab0:	ldr	r0, [r6, #4]
   3cab4:	bl	14e0 <free@plt>
   3cab8:	mov	r0, r6
   3cabc:	bl	14e0 <free@plt>
   3cac0:	b	3cacc <Mat_VarFree+0x250>
   3cac4:	cmp	r6, #0
   3cac8:	bne	3cab8 <Mat_VarFree+0x23c>
   3cacc:	mov	r0, r5
   3cad0:	bl	14e0 <free@plt>
   3cad4:	ldr	r3, [r4, #52]	; 0x34
   3cad8:	ldr	r2, [r3, #8]
   3cadc:	cmp	r2, #0
   3cae0:	beq	3caf4 <Mat_VarFree+0x278>
   3cae4:	ldr	r3, [r3, #4]
   3cae8:	cmp	r3, #0
   3caec:	movne	r5, #0
   3caf0:	bne	3cb58 <Mat_VarFree+0x2dc>
   3caf4:	ldr	r0, [r4, #52]	; 0x34
   3caf8:	bl	14e0 <free@plt>
   3cafc:	mov	r3, #0
   3cb00:	str	r3, [r4, #52]	; 0x34
   3cb04:	ldr	r0, [r4, #36]	; 0x24
   3cb08:	cmp	r0, #0
   3cb0c:	beq	3cb14 <Mat_VarFree+0x298>
   3cb10:	bl	14e0 <free@plt>
   3cb14:	mov	r0, r4
   3cb18:	add	sp, sp, #8
   3cb1c:	pop	{r4, r5, r6, lr}
   3cb20:	b	14e0 <free@plt>
   3cb24:	ldr	r3, [r4, #20]
   3cb28:	cmp	r3, #0
   3cb2c:	beq	3cacc <Mat_VarFree+0x250>
   3cb30:	ldr	r0, [r5]
   3cb34:	bl	14e0 <free@plt>
   3cb38:	ldr	r0, [r5, #4]
   3cb3c:	b	3cabc <Mat_VarFree+0x240>
   3cb40:	ldr	r3, [r3, #8]
   3cb44:	ldr	r0, [r3, r5, lsl #2]
   3cb48:	cmp	r0, #0
   3cb4c:	beq	3cb54 <Mat_VarFree+0x2d8>
   3cb50:	bl	14e0 <free@plt>
   3cb54:	add	r5, r5, #1
   3cb58:	ldr	r3, [r4, #52]	; 0x34
   3cb5c:	ldr	r2, [r3, #4]
   3cb60:	cmp	r5, r2
   3cb64:	bcc	3cb40 <Mat_VarFree+0x2c4>
   3cb68:	ldr	r0, [r3, #8]
   3cb6c:	bl	14e0 <free@plt>
   3cb70:	b	3caf4 <Mat_VarFree+0x278>
   3cb74:	add	sp, sp, #8
   3cb78:	pop	{r4, r5, r6, pc}

0003cb7c <Mat_Open>:
   3cb7c:	tst	r1, #1
   3cb80:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cb84:	mov	r9, r0
   3cb88:	mov	r8, r1
   3cb8c:	bne	3cbac <Mat_Open+0x30>
   3cb90:	ldr	r1, [pc, #792]	; 3ceb0 <Mat_Open+0x334>
   3cb94:	add	r1, pc, r1
   3cb98:	bl	14bc <fopen@plt>
   3cb9c:	subs	r5, r0, #0
   3cba0:	bne	3cbe0 <Mat_Open+0x64>
   3cba4:	mov	r4, r5
   3cba8:	b	3cbd4 <Mat_Open+0x58>
   3cbac:	ldr	r1, [pc, #768]	; 3ceb4 <Mat_Open+0x338>
   3cbb0:	add	r1, pc, r1
   3cbb4:	bl	14bc <fopen@plt>
   3cbb8:	subs	r5, r0, #0
   3cbbc:	bne	3cbe0 <Mat_Open+0x64>
   3cbc0:	bic	r2, r8, #1
   3cbc4:	mov	r1, r5
   3cbc8:	mov	r0, r9
   3cbcc:	bl	16c0 <Mat_CreateVer@plt>
   3cbd0:	mov	r4, r0
   3cbd4:	mov	r0, r4
   3cbd8:	add	sp, sp, #12
   3cbdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cbe0:	mov	r0, #44	; 0x2c
   3cbe4:	bl	15ac <malloc@plt>
   3cbe8:	subs	r4, r0, #0
   3cbec:	bne	3cc08 <Mat_Open+0x8c>
   3cbf0:	mov	r0, r5
   3cbf4:	bl	16a8 <fclose@plt>
   3cbf8:	ldr	r0, [pc, #696]	; 3ceb8 <Mat_Open+0x33c>
   3cbfc:	add	r0, pc, r0
   3cc00:	bl	1690 <Mat_Critical@plt>
   3cc04:	b	3cbd4 <Mat_Open+0x58>
   3cc08:	str	r5, [r4]
   3cc0c:	mov	r1, #1
   3cc10:	mov	r0, #128	; 0x80
   3cc14:	bl	1468 <calloc@plt>
   3cc18:	cmp	r0, #0
   3cc1c:	mov	r6, r0
   3cc20:	str	r0, [r4, #4]
   3cc24:	bne	3cc4c <Mat_Open+0xd0>
   3cc28:	mov	r0, r4
   3cc2c:	bl	14e0 <free@plt>
   3cc30:	mov	r0, r5
   3cc34:	bl	16a8 <fclose@plt>
   3cc38:	ldr	r0, [pc, #636]	; 3cebc <Mat_Open+0x340>
   3cc3c:	mov	r4, r6
   3cc40:	add	r0, pc, r0
   3cc44:	bl	1690 <Mat_Critical@plt>
   3cc48:	b	3cbd4 <Mat_Open+0x58>
   3cc4c:	mov	r1, #1
   3cc50:	mov	r0, #8
   3cc54:	bl	1468 <calloc@plt>
   3cc58:	cmp	r0, #0
   3cc5c:	mov	r7, r0
   3cc60:	str	r0, [r4, #8]
   3cc64:	bne	3cc94 <Mat_Open+0x118>
   3cc68:	mov	r0, r6
   3cc6c:	bl	14e0 <free@plt>
   3cc70:	mov	r0, r4
   3cc74:	bl	14e0 <free@plt>
   3cc78:	mov	r0, r5
   3cc7c:	bl	16a8 <fclose@plt>
   3cc80:	ldr	r0, [pc, #568]	; 3cec0 <Mat_Open+0x344>
   3cc84:	add	r0, pc, r0
   3cc88:	bl	1690 <Mat_Critical@plt>
   3cc8c:	mov	r4, r7
   3cc90:	b	3cbd4 <Mat_Open+0x58>
   3cc94:	mov	r7, #0
   3cc98:	mov	r3, r5
   3cc9c:	mov	r2, #116	; 0x74
   3cca0:	mov	r1, #1
   3cca4:	mov	r0, r6
   3cca8:	str	r7, [r4, #12]
   3ccac:	str	r7, [r4, #16]
   3ccb0:	str	r7, [r4, #20]
   3ccb4:	str	r7, [r4, #36]	; 0x24
   3ccb8:	str	r7, [r4, #40]	; 0x28
   3ccbc:	bl	1588 <fread@plt>
   3ccc0:	ldr	r3, [r4, #4]
   3ccc4:	mov	r2, #8
   3ccc8:	mov	r1, #1
   3cccc:	strb	r7, [r3, #116]	; 0x74
   3ccd0:	mov	r3, r5
   3ccd4:	add	sl, sp, #6
   3ccd8:	mov	r6, r0
   3ccdc:	ldr	r0, [r4, #8]
   3cce0:	bl	1588 <fread@plt>
   3cce4:	mov	r3, r5
   3cce8:	mov	r2, #1
   3ccec:	mov	r1, #2
   3ccf0:	add	r6, r6, r0
   3ccf4:	mov	r0, sl
   3ccf8:	bl	1588 <fread@plt>
   3ccfc:	mov	r3, r5
   3cd00:	mov	r2, #2
   3cd04:	mov	r1, #1
   3cd08:	mov	fp, r0
   3cd0c:	add	r0, sp, #4
   3cd10:	bl	1588 <fread@plt>
   3cd14:	add	r6, r6, r0
   3cd18:	add	r6, r6, fp, lsl #1
   3cd1c:	cmp	r6, #128	; 0x80
   3cd20:	bne	3cdd0 <Mat_Open+0x254>
   3cd24:	mvn	r3, #0
   3cd28:	str	r3, [r4, #20]
   3cd2c:	ldrsh	r3, [sp, #4]
   3cd30:	ldr	r2, [pc, #396]	; 3cec4 <Mat_Open+0x348>
   3cd34:	cmp	r3, r2
   3cd38:	streq	r7, [r4, #20]
   3cd3c:	beq	3cd5c <Mat_Open+0x1e0>
   3cd40:	ldr	r2, [pc, #384]	; 3cec8 <Mat_Open+0x34c>
   3cd44:	cmp	r3, r2
   3cd48:	bne	3cd5c <Mat_Open+0x1e0>
   3cd4c:	mov	r3, #1
   3cd50:	str	r3, [r4, #20]
   3cd54:	mov	r0, sl
   3cd58:	bl	1adc <Mat_int16Swap>
   3cd5c:	ldrsh	r3, [sp, #6]
   3cd60:	ldr	r7, [pc, #356]	; 3cecc <Mat_Open+0x350>
   3cd64:	str	r3, [r4, #16]
   3cd68:	add	r3, r3, #65280	; 0xff00
   3cd6c:	and	r7, r7, r3
   3cd70:	cmp	r7, #0
   3cd74:	bne	3cdc8 <Mat_Open+0x24c>
   3cd78:	ldr	r3, [r4, #20]
   3cd7c:	cmn	r3, #1
   3cd80:	beq	3cdc8 <Mat_Open+0x24c>
   3cd84:	ldr	r0, [r4]
   3cd88:	bl	151c <ftell@plt>
   3cd8c:	cmn	r0, #1
   3cd90:	str	r0, [r4, #28]
   3cd94:	strne	r7, [r4, #32]
   3cd98:	bne	3cdd0 <Mat_Open+0x254>
   3cd9c:	ldr	r0, [r4, #4]
   3cda0:	bl	14e0 <free@plt>
   3cda4:	ldr	r0, [r4, #8]
   3cda8:	bl	14e0 <free@plt>
   3cdac:	mov	r0, r4
   3cdb0:	bl	14e0 <free@plt>
   3cdb4:	mov	r0, r5
   3cdb8:	bl	16a8 <fclose@plt>
   3cdbc:	ldr	r0, [pc, #268]	; 3ced0 <Mat_Open+0x354>
   3cdc0:	add	r0, pc, r0
   3cdc4:	b	3cc88 <Mat_Open+0x10c>
   3cdc8:	mov	r3, #0
   3cdcc:	str	r3, [r4, #16]
   3cdd0:	ldr	r7, [r4, #16]
   3cdd4:	cmp	r7, #0
   3cdd8:	bne	3ce60 <Mat_Open+0x2e4>
   3cddc:	ldr	r0, [r4, #4]
   3cde0:	bl	14e0 <free@plt>
   3cde4:	ldr	r0, [r4, #8]
   3cde8:	bl	14e0 <free@plt>
   3cdec:	mov	r3, #16
   3cdf0:	str	r3, [r4, #16]
   3cdf4:	str	r7, [r4, #4]
   3cdf8:	str	r7, [r4, #8]
   3cdfc:	str	r5, [r4]
   3ce00:	str	r7, [r4, #20]
   3ce04:	str	r8, [r4, #24]
   3ce08:	str	r7, [r4, #28]
   3ce0c:	str	r7, [r4, #32]
   3ce10:	mov	r0, r4
   3ce14:	bl	1660 <Mat_Rewind@plt>
   3ce18:	mov	r0, r4
   3ce1c:	bl	3b884 <Mat_VarReadNextInfo4>
   3ce20:	cmp	r6, #0
   3ce24:	clz	r3, r0
   3ce28:	lsr	r3, r3, #5
   3ce2c:	moveq	r3, #0
   3ce30:	cmp	r3, #0
   3ce34:	beq	3ce54 <Mat_Open+0x2d8>
   3ce38:	mov	r0, r4
   3ce3c:	bl	1684 <Mat_Close@plt>
   3ce40:	ldr	r0, [pc, #140]	; 3ced4 <Mat_Open+0x358>
   3ce44:	mov	r1, r9
   3ce48:	add	r0, pc, r0
   3ce4c:	bl	1690 <Mat_Critical@plt>
   3ce50:	b	3cc8c <Mat_Open+0x110>
   3ce54:	bl	15f4 <Mat_VarFree@plt>
   3ce58:	mov	r0, r4
   3ce5c:	bl	1660 <Mat_Rewind@plt>
   3ce60:	ldr	r0, [pc, #112]	; 3ced8 <Mat_Open+0x35c>
   3ce64:	mov	r1, r9
   3ce68:	add	r0, pc, r0
   3ce6c:	bl	1e64 <strdup_printf>
   3ce70:	ldr	r3, [r4, #16]
   3ce74:	str	r8, [r4, #24]
   3ce78:	cmp	r3, #512	; 0x200
   3ce7c:	str	r0, [r4, #12]
   3ce80:	bne	3cbd4 <Mat_Open+0x58>
   3ce84:	ldr	r0, [r4]
   3ce88:	mov	r5, #0
   3ce8c:	bl	16a8 <fclose@plt>
   3ce90:	str	r5, [r4]
   3ce94:	mov	r0, r4
   3ce98:	bl	1684 <Mat_Close@plt>
   3ce9c:	ldr	r0, [pc, #56]	; 3cedc <Mat_Open+0x360>
   3cea0:	mov	r1, r9
   3cea4:	add	r0, pc, r0
   3cea8:	bl	1690 <Mat_Critical@plt>
   3ceac:	b	3cba4 <Mat_Open+0x28>
   3ceb0:	.word	0x00004148
   3ceb4:	.word	0x000041b6
   3ceb8:	.word	0x00003fb1
   3cebc:	.word	0x0000412a
   3cec0:	.word	0x00004117
   3cec4:	.word	0x00004d49
   3cec8:	.word	0x0000494d
   3cecc:	.word	0x0000feff
   3ced0:	.word	0x000039a5
   3ced4:	.word	0x00003f8b
   3ced8:	.word	0x0000407b
   3cedc:	.word	0x00003f59

0003cee0 <Mat_VarCreate>:
   3cee0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cee4:	mov	ip, #1
   3cee8:	ldr	sl, [sp, #48]	; 0x30
   3ceec:	ldr	r6, [sp, #52]	; 0x34
   3cef0:	cmp	sl, #0
   3cef4:	ldr	r8, [sp, #56]	; 0x38
   3cef8:	str	ip, [sp, #4]
   3cefc:	bne	3cf10 <Mat_VarCreate+0x30>
   3cf00:	mov	r4, #0
   3cf04:	mov	r0, r4
   3cf08:	add	sp, sp, #12
   3cf0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cf10:	mov	r7, r3
   3cf14:	mov	r5, r2
   3cf18:	mov	r9, r1
   3cf1c:	mov	fp, r0
   3cf20:	bl	1570 <Mat_VarCalloc@plt>
   3cf24:	subs	r4, r0, #0
   3cf28:	beq	3cf00 <Mat_VarCreate+0x20>
   3cf2c:	mov	r3, #0
   3cf30:	str	r3, [r4, #48]	; 0x30
   3cf34:	and	r3, r8, #2048	; 0x800
   3cf38:	str	r3, [r4, #20]
   3cf3c:	and	r3, r8, #1024	; 0x400
   3cf40:	str	r3, [r4, #24]
   3cf44:	cmp	fp, #0
   3cf48:	and	r3, r8, #512	; 0x200
   3cf4c:	str	r3, [r4, #28]
   3cf50:	beq	3cf68 <Mat_VarCreate+0x88>
   3cf54:	ldr	r0, [pc, #1008]	; 3d34c <Mat_VarCreate+0x46c>
   3cf58:	mov	r1, fp
   3cf5c:	add	r0, pc, r0
   3cf60:	bl	1e64 <strdup_printf>
   3cf64:	str	r0, [r4, #36]	; 0x24
   3cf68:	str	r7, [r4, #4]
   3cf6c:	lsl	r0, r7, #2
   3cf70:	bl	15ac <malloc@plt>
   3cf74:	mov	r1, #0
   3cf78:	ldr	r2, [sp, #4]
   3cf7c:	mov	r3, r1
   3cf80:	mov	lr, #1
   3cf84:	str	r0, [r4, #32]
   3cf88:	ldr	ip, [r4, #4]
   3cf8c:	cmp	r3, ip
   3cf90:	blt	3d00c <Mat_VarCreate+0x12c>
   3cf94:	cmp	r1, #0
   3cf98:	str	r5, [r4, #8]
   3cf9c:	sub	r5, r5, #1
   3cfa0:	strne	r2, [sp, #4]
   3cfa4:	str	r9, [r4, #16]
   3cfa8:	cmp	r5, #21
   3cfac:	addls	pc, pc, r5, lsl #2
   3cfb0:	b	3d0ec <Mat_VarCreate+0x20c>
   3cfb4:	b	3d104 <Mat_VarCreate+0x224>
   3cfb8:	b	3d104 <Mat_VarCreate+0x224>
   3cfbc:	b	3d024 <Mat_VarCreate+0x144>
   3cfc0:	b	3d024 <Mat_VarCreate+0x144>
   3cfc4:	b	3d060 <Mat_VarCreate+0x180>
   3cfc8:	b	3d060 <Mat_VarCreate+0x180>
   3cfcc:	b	3d060 <Mat_VarCreate+0x180>
   3cfd0:	b	3d0ec <Mat_VarCreate+0x20c>
   3cfd4:	b	3d10c <Mat_VarCreate+0x22c>
   3cfd8:	b	3d0ec <Mat_VarCreate+0x20c>
   3cfdc:	b	3d0ec <Mat_VarCreate+0x20c>
   3cfe0:	b	3d10c <Mat_VarCreate+0x22c>
   3cfe4:	b	3d10c <Mat_VarCreate+0x22c>
   3cfe8:	b	3d0ec <Mat_VarCreate+0x20c>
   3cfec:	b	3d0ec <Mat_VarCreate+0x20c>
   3cff0:	b	3d104 <Mat_VarCreate+0x224>
   3cff4:	b	3d024 <Mat_VarCreate+0x144>
   3cff8:	b	3d060 <Mat_VarCreate+0x180>
   3cffc:	b	3d0ec <Mat_VarCreate+0x20c>
   3d000:	b	3d0ec <Mat_VarCreate+0x20c>
   3d004:	b	3d060 <Mat_VarCreate+0x180>
   3d008:	b	3d054 <Mat_VarCreate+0x174>
   3d00c:	ldr	r1, [sl, r3, lsl #2]
   3d010:	str	r1, [r0, r3, lsl #2]
   3d014:	mul	r2, r1, r2
   3d018:	add	r3, r3, #1
   3d01c:	mov	r1, lr
   3d020:	b	3cf88 <Mat_VarCreate+0xa8>
   3d024:	mov	r5, #2
   3d028:	ldr	r3, [r4, #16]
   3d02c:	cmp	r3, #5
   3d030:	bne	3d114 <Mat_VarCreate+0x234>
   3d034:	mov	r3, #28
   3d038:	cmp	r6, #0
   3d03c:	str	r3, [r4, #12]
   3d040:	str	r3, [r4]
   3d044:	bne	3d158 <Mat_VarCreate+0x278>
   3d048:	mov	r3, #0
   3d04c:	str	r3, [r4, #40]	; 0x28
   3d050:	b	3cf04 <Mat_VarCreate+0x24>
   3d054:	cmp	r6, #0
   3d058:	movne	r5, #0
   3d05c:	bne	3d06c <Mat_VarCreate+0x18c>
   3d060:	mov	r5, #4
   3d064:	b	3d028 <Mat_VarCreate+0x148>
   3d068:	add	r5, r5, #1
   3d06c:	ldr	r3, [r6, r5, lsl #2]
   3d070:	cmp	r3, #0
   3d074:	bne	3d068 <Mat_VarCreate+0x188>
   3d078:	ldr	r9, [sp, #4]
   3d07c:	cmp	r9, #0
   3d080:	beq	3d094 <Mat_VarCreate+0x1b4>
   3d084:	mov	r0, r5
   3d088:	mov	r1, r9
   3d08c:	bl	3f8ec <__udivsi3>
   3d090:	mov	r5, r0
   3d094:	ldr	r7, [r4, #52]	; 0x34
   3d098:	cmp	r5, #0
   3d09c:	str	r5, [r7, #4]
   3d0a0:	beq	3d060 <Mat_VarCreate+0x180>
   3d0a4:	mov	r1, #4
   3d0a8:	mov	r0, r5
   3d0ac:	bl	1468 <calloc@plt>
   3d0b0:	str	r0, [r7, #8]
   3d0b4:	mov	sl, r0
   3d0b8:	mov	r7, #0
   3d0bc:	ldr	r3, [r6, r7, lsl #2]
   3d0c0:	ldr	r0, [r3, #36]	; 0x24
   3d0c4:	bl	1534 <strdup@plt>
   3d0c8:	str	r0, [sl, r7, lsl #2]
   3d0cc:	add	r7, r7, #1
   3d0d0:	cmp	r5, r7
   3d0d4:	bne	3d0bc <Mat_VarCreate+0x1dc>
   3d0d8:	mov	r2, r5
   3d0dc:	mov	r1, r9
   3d0e0:	add	r0, sp, #4
   3d0e4:	bl	3bf40 <SafeMul>
   3d0e8:	b	3d060 <Mat_VarCreate+0x180>
   3d0ec:	mov	r0, r4
   3d0f0:	bl	15f4 <Mat_VarFree@plt>
   3d0f4:	ldr	r0, [pc, #596]	; 3d350 <Mat_VarCreate+0x470>
   3d0f8:	add	r0, pc, r0
   3d0fc:	bl	1690 <Mat_Critical@plt>
   3d100:	b	3cf00 <Mat_VarCreate+0x20>
   3d104:	mov	r5, #1
   3d108:	b	3d028 <Mat_VarCreate+0x148>
   3d10c:	mov	r5, #8
   3d110:	b	3d028 <Mat_VarCreate+0x148>
   3d114:	str	r5, [r4, #12]
   3d118:	mov	r2, r5
   3d11c:	ldr	r1, [sp, #4]
   3d120:	mov	r0, r4
   3d124:	bl	3bf40 <SafeMul>
   3d128:	cmp	r6, #0
   3d12c:	bne	3d158 <Mat_VarCreate+0x278>
   3d130:	ldr	r3, [r4, #16]
   3d134:	cmp	r3, #1
   3d138:	bne	3d048 <Mat_VarCreate+0x168>
   3d13c:	ldr	r0, [sp, #4]
   3d140:	cmp	r0, #0
   3d144:	beq	3d048 <Mat_VarCreate+0x168>
   3d148:	mov	r1, #4
   3d14c:	bl	1468 <calloc@plt>
   3d150:	str	r0, [r4, #40]	; 0x28
   3d154:	b	3cf04 <Mat_VarCreate+0x24>
   3d158:	tst	r8, #1
   3d15c:	strne	r6, [r4, #40]	; 0x28
   3d160:	movne	r3, #1
   3d164:	bne	3d314 <Mat_VarCreate+0x434>
   3d168:	ldr	r3, [r4, #16]
   3d16c:	cmp	r3, #5
   3d170:	bne	3d294 <Mat_VarCreate+0x3b4>
   3d174:	mov	r0, #28
   3d178:	bl	15ac <malloc@plt>
   3d17c:	subs	r7, r0, #0
   3d180:	beq	3d264 <Mat_VarCreate+0x384>
   3d184:	ldr	r9, [r6, #8]
   3d188:	ldr	r3, [r6]
   3d18c:	ldr	r8, [r6, #16]
   3d190:	ldr	sl, [r6, #20]
   3d194:	str	r9, [r7, #8]
   3d198:	lsl	r9, r9, #2
   3d19c:	str	r3, [r7]
   3d1a0:	str	r8, [r7, #16]
   3d1a4:	str	sl, [r7, #20]
   3d1a8:	mov	r0, r9
   3d1ac:	bl	15ac <malloc@plt>
   3d1b0:	cmp	r0, #0
   3d1b4:	str	r0, [r7, #4]
   3d1b8:	beq	3d1c8 <Mat_VarCreate+0x2e8>
   3d1bc:	mov	r2, r9
   3d1c0:	ldr	r1, [r6, #4]
   3d1c4:	bl	14f8 <memcpy@plt>
   3d1c8:	lsl	r8, r8, #2
   3d1cc:	mov	r0, r8
   3d1d0:	bl	15ac <malloc@plt>
   3d1d4:	cmp	r0, #0
   3d1d8:	str	r0, [r7, #12]
   3d1dc:	beq	3d1ec <Mat_VarCreate+0x30c>
   3d1e0:	mov	r2, r8
   3d1e4:	ldr	r1, [r6, #12]
   3d1e8:	bl	14f8 <memcpy@plt>
   3d1ec:	ldr	r3, [r4, #20]
   3d1f0:	cmp	r3, #0
   3d1f4:	beq	3d26c <Mat_VarCreate+0x38c>
   3d1f8:	mov	r0, #8
   3d1fc:	bl	15ac <malloc@plt>
   3d200:	cmp	r0, #0
   3d204:	mov	r8, r0
   3d208:	str	r0, [r7, #24]
   3d20c:	beq	3d264 <Mat_VarCreate+0x384>
   3d210:	mul	r5, r5, sl
   3d214:	ldr	r9, [r6, #24]
   3d218:	mov	r0, r5
   3d21c:	bl	15ac <malloc@plt>
   3d220:	mov	sl, r0
   3d224:	str	r0, [r8]
   3d228:	mov	r0, r5
   3d22c:	bl	15ac <malloc@plt>
   3d230:	cmp	sl, #0
   3d234:	mov	r6, r0
   3d238:	str	r0, [r8, #4]
   3d23c:	beq	3d250 <Mat_VarCreate+0x370>
   3d240:	mov	r2, r5
   3d244:	ldr	r1, [r9]
   3d248:	mov	r0, sl
   3d24c:	bl	14f8 <memcpy@plt>
   3d250:	cmp	r6, #0
   3d254:	movne	r2, r5
   3d258:	ldrne	r1, [r9, #4]
   3d25c:	movne	r0, r6
   3d260:	bne	3d28c <Mat_VarCreate+0x3ac>
   3d264:	str	r7, [r4, #40]	; 0x28
   3d268:	b	3cf04 <Mat_VarCreate+0x24>
   3d26c:	mul	r5, r5, sl
   3d270:	mov	r0, r5
   3d274:	bl	15ac <malloc@plt>
   3d278:	cmp	r0, #0
   3d27c:	str	r0, [r7, #24]
   3d280:	beq	3d264 <Mat_VarCreate+0x384>
   3d284:	ldr	r1, [r6, #24]
   3d288:	mov	r2, r5
   3d28c:	bl	14f8 <memcpy@plt>
   3d290:	b	3d264 <Mat_VarCreate+0x384>
   3d294:	ldr	r3, [r4, #20]
   3d298:	cmp	r3, #0
   3d29c:	beq	3d31c <Mat_VarCreate+0x43c>
   3d2a0:	mov	r0, #8
   3d2a4:	bl	15ac <malloc@plt>
   3d2a8:	cmp	r0, #0
   3d2ac:	mov	r7, r0
   3d2b0:	str	r0, [r4, #40]	; 0x28
   3d2b4:	beq	3d310 <Mat_VarCreate+0x430>
   3d2b8:	ldr	r5, [r4]
   3d2bc:	cmp	r5, #0
   3d2c0:	beq	3d310 <Mat_VarCreate+0x430>
   3d2c4:	mov	r0, r5
   3d2c8:	bl	15ac <malloc@plt>
   3d2cc:	mov	r9, r0
   3d2d0:	str	r0, [r7]
   3d2d4:	mov	r0, r5
   3d2d8:	bl	15ac <malloc@plt>
   3d2dc:	cmp	r9, #0
   3d2e0:	mov	r8, r0
   3d2e4:	str	r0, [r7, #4]
   3d2e8:	beq	3d2fc <Mat_VarCreate+0x41c>
   3d2ec:	mov	r2, r5
   3d2f0:	ldr	r1, [r6]
   3d2f4:	mov	r0, r9
   3d2f8:	bl	14f8 <memcpy@plt>
   3d2fc:	cmp	r8, #0
   3d300:	movne	r0, r8
   3d304:	ldrne	r2, [r4]
   3d308:	ldrne	r1, [r6, #4]
   3d30c:	bne	3d344 <Mat_VarCreate+0x464>
   3d310:	mov	r3, #0
   3d314:	str	r3, [r4, #44]	; 0x2c
   3d318:	b	3cf04 <Mat_VarCreate+0x24>
   3d31c:	ldr	r5, [r4]
   3d320:	cmp	r5, #0
   3d324:	beq	3d310 <Mat_VarCreate+0x430>
   3d328:	mov	r0, r5
   3d32c:	bl	15ac <malloc@plt>
   3d330:	cmp	r0, #0
   3d334:	str	r0, [r4, #40]	; 0x28
   3d338:	beq	3d310 <Mat_VarCreate+0x430>
   3d33c:	mov	r2, r5
   3d340:	mov	r1, r6
   3d344:	bl	14f8 <memcpy@plt>
   3d348:	b	3d310 <Mat_VarCreate+0x430>
   3d34c:	.word	0x00003f87
   3d350:	.word	0x00003d46

0003d354 <Mat_CalcSingleSubscript>:
   3d354:	mov	ip, #0
   3d358:	push	{r4, r5, r6, lr}
   3d35c:	mov	r5, r0
   3d360:	sub	lr, r1, #4
   3d364:	mov	r0, ip
   3d368:	cmp	ip, r5
   3d36c:	blt	3d374 <Mat_CalcSingleSubscript+0x20>
   3d370:	pop	{r4, r5, r6, pc}
   3d374:	ldr	r3, [r2, ip, lsl #2]
   3d378:	ldr	r4, [lr, #4]!
   3d37c:	cmp	r3, r4
   3d380:	ble	3d398 <Mat_CalcSingleSubscript+0x44>
   3d384:	ldr	r0, [pc, #56]	; 3d3c4 <Mat_CalcSingleSubscript+0x70>
   3d388:	add	r0, pc, r0
   3d38c:	bl	1690 <Mat_Critical@plt>
   3d390:	mvn	r0, #0
   3d394:	pop	{r4, r5, r6, pc}
   3d398:	cmp	r3, #0
   3d39c:	ble	3d390 <Mat_CalcSingleSubscript+0x3c>
   3d3a0:	sub	r3, r3, #1
   3d3a4:	mov	r4, lr
   3d3a8:	cmp	r1, r4
   3d3ac:	addeq	r0, r0, r3
   3d3b0:	addeq	ip, ip, #1
   3d3b4:	beq	3d368 <Mat_CalcSingleSubscript+0x14>
   3d3b8:	ldr	r6, [r4, #-4]!
   3d3bc:	mul	r3, r6, r3
   3d3c0:	b	3d3a8 <Mat_CalcSingleSubscript+0x54>
   3d3c4:	.word	0x00003acd

0003d3c8 <Mat_CalcSingleSubscript2>:
   3d3c8:	push	{r4, r5, r6, lr}
   3d3cc:	sub	r4, r1, #4
   3d3d0:	mov	lr, #0
   3d3d4:	cmp	lr, r0
   3d3d8:	blt	3d3e4 <Mat_CalcSingleSubscript2+0x1c>
   3d3dc:	mov	r0, #0
   3d3e0:	pop	{r4, r5, r6, pc}
   3d3e4:	ldr	ip, [r2, lr, lsl #2]
   3d3e8:	ldr	r5, [r4, #4]!
   3d3ec:	cmp	ip, r5
   3d3f0:	bls	3d408 <Mat_CalcSingleSubscript2+0x40>
   3d3f4:	ldr	r0, [pc, #64]	; 3d43c <Mat_CalcSingleSubscript2+0x74>
   3d3f8:	add	r0, pc, r0
   3d3fc:	bl	1690 <Mat_Critical@plt>
   3d400:	mov	r0, #1
   3d404:	pop	{r4, r5, r6, pc}
   3d408:	cmp	ip, #0
   3d40c:	beq	3d400 <Mat_CalcSingleSubscript2+0x38>
   3d410:	sub	ip, ip, #1
   3d414:	mov	r5, r4
   3d418:	cmp	r5, r1
   3d41c:	ldreq	r5, [r3]
   3d420:	addeq	lr, lr, #1
   3d424:	addeq	ip, r5, ip
   3d428:	streq	ip, [r3]
   3d42c:	beq	3d3d4 <Mat_CalcSingleSubscript2+0xc>
   3d430:	ldr	r6, [r5, #-4]!
   3d434:	mul	ip, r6, ip
   3d438:	b	3d418 <Mat_CalcSingleSubscript2+0x50>
   3d43c:	.word	0x00003a8a

0003d440 <Mat_CalcSubscripts>:
   3d440:	push	{r4, r5, r6, r7, r8, lr}
   3d444:	lsl	r4, r0, #2
   3d448:	vpush	{d8}
   3d44c:	mov	r0, r4
   3d450:	mov	r7, r1
   3d454:	vmov	s16, r2
   3d458:	bl	15ac <malloc@plt>
   3d45c:	vcvt.f64.s32	d8, s16
   3d460:	add	r6, r0, r4
   3d464:	sub	r4, r4, #4
   3d468:	mov	r8, r0
   3d46c:	add	r4, r7, r4
   3d470:	cmp	r6, r8
   3d474:	beq	3d4cc <Mat_CalcSubscripts+0x8c>
   3d478:	mov	r3, r4
   3d47c:	mov	r5, #1
   3d480:	b	3d48c <Mat_CalcSubscripts+0x4c>
   3d484:	ldr	r2, [r3, #-4]!
   3d488:	mul	r5, r2, r5
   3d48c:	cmp	r7, r3
   3d490:	bne	3d484 <Mat_CalcSubscripts+0x44>
   3d494:	vmov	s15, r5
   3d498:	sub	r4, r4, #4
   3d49c:	vcvt.f64.s32	d0, s15
   3d4a0:	vdiv.f64	d0, d8, d0
   3d4a4:	bl	1594 <floor@plt>
   3d4a8:	vcvt.s32.f64	s15, d0
   3d4ac:	vmov	r3, s15
   3d4b0:	mul	r5, r3, r5
   3d4b4:	add	r3, r3, #1
   3d4b8:	str	r3, [r6, #-4]!
   3d4bc:	vmov	s15, r5
   3d4c0:	vcvt.f64.s32	d7, s15
   3d4c4:	vsub.f64	d8, d8, d7
   3d4c8:	b	3d470 <Mat_CalcSubscripts+0x30>
   3d4cc:	vpop	{d8}
   3d4d0:	mov	r0, r6
   3d4d4:	pop	{r4, r5, r6, r7, r8, pc}

0003d4d8 <Mat_CalcSubscripts2>:
   3d4d8:	push	{r4, r5, r6, r7, r8, lr}
   3d4dc:	lsl	r4, r0, #2
   3d4e0:	vpush	{d8}
   3d4e4:	mov	r0, r4
   3d4e8:	mov	r7, r1
   3d4ec:	vmov	s16, r2
   3d4f0:	bl	15ac <malloc@plt>
   3d4f4:	vcvt.f64.u32	d8, s16
   3d4f8:	add	r6, r0, r4
   3d4fc:	sub	r4, r4, #4
   3d500:	mov	r8, r0
   3d504:	add	r4, r7, r4
   3d508:	cmp	r6, r8
   3d50c:	beq	3d564 <Mat_CalcSubscripts2+0x8c>
   3d510:	mov	r3, r4
   3d514:	mov	r5, #1
   3d518:	b	3d524 <Mat_CalcSubscripts2+0x4c>
   3d51c:	ldr	r2, [r3, #-4]!
   3d520:	mul	r5, r2, r5
   3d524:	cmp	r7, r3
   3d528:	bne	3d51c <Mat_CalcSubscripts2+0x44>
   3d52c:	vmov	s15, r5
   3d530:	sub	r4, r4, #4
   3d534:	vcvt.f64.u32	d0, s15
   3d538:	vdiv.f64	d0, d8, d0
   3d53c:	bl	1594 <floor@plt>
   3d540:	vcvt.u32.f64	s15, d0
   3d544:	vmov	r3, s15
   3d548:	mul	r5, r3, r5
   3d54c:	add	r3, r3, #1
   3d550:	str	r3, [r6, #-4]!
   3d554:	vmov	s15, r5
   3d558:	vcvt.f64.u32	d7, s15
   3d55c:	vsub.f64	d8, d8, d7
   3d560:	b	3d508 <Mat_CalcSubscripts2+0x30>
   3d564:	vpop	{d8}
   3d568:	mov	r0, r6
   3d56c:	pop	{r4, r5, r6, r7, r8, pc}

0003d570 <Mat_VarGetSize>:
   3d570:	ldr	r3, [r0, #16]
   3d574:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3d578:	cmp	r3, #2
   3d57c:	mov	r5, #0
   3d580:	mov	r4, r0
   3d584:	str	r5, [sp]
   3d588:	bne	3d620 <Mat_VarGetSize+0xb0>
   3d58c:	ldr	r6, [r0, #40]	; 0x28
   3d590:	cmp	r6, r5
   3d594:	beq	3d5c8 <Mat_VarGetSize+0x58>
   3d598:	ldr	r3, [r0, #52]	; 0x34
   3d59c:	add	r1, sp, #8
   3d5a0:	ldr	r3, [r3, #4]
   3d5a4:	str	r3, [r1, #-4]!
   3d5a8:	bl	3bee0 <SafeMulDims>
   3d5ac:	mov	r2, #60	; 0x3c
   3d5b0:	ldr	r1, [sp, #4]
   3d5b4:	mov	r0, sp
   3d5b8:	bl	3bf40 <SafeMul>
   3d5bc:	ldr	r3, [sp, #4]
   3d5c0:	cmp	r5, r3
   3d5c4:	bcc	3d5e0 <Mat_VarGetSize+0x70>
   3d5c8:	ldr	r3, [r4, #52]	; 0x34
   3d5cc:	ldr	r2, [r3, #4]
   3d5d0:	ldr	r3, [sp]
   3d5d4:	add	r3, r3, r2, lsl #6
   3d5d8:	str	r3, [sp]
   3d5dc:	b	3d658 <Mat_VarGetSize+0xe8>
   3d5e0:	ldr	r0, [r6, r5, lsl #2]
   3d5e4:	cmp	r0, #0
   3d5e8:	beq	3d608 <Mat_VarGetSize+0x98>
   3d5ec:	ldr	r3, [r0, #16]
   3d5f0:	cmp	r3, #0
   3d5f4:	beq	3d610 <Mat_VarGetSize+0xa0>
   3d5f8:	bl	1708 <Mat_VarGetSize@plt>
   3d5fc:	ldr	r3, [sp]
   3d600:	add	r0, r3, r0
   3d604:	str	r0, [sp]
   3d608:	add	r5, r5, #1
   3d60c:	b	3d5bc <Mat_VarGetSize+0x4c>
   3d610:	ldr	r3, [sp]
   3d614:	sub	r3, r3, #56	; 0x38
   3d618:	str	r3, [sp]
   3d61c:	b	3d608 <Mat_VarGetSize+0x98>
   3d620:	cmp	r3, #1
   3d624:	bne	3d6a4 <Mat_VarGetSize+0x134>
   3d628:	ldr	r6, [r0, #40]	; 0x28
   3d62c:	cmp	r6, #0
   3d630:	beq	3d658 <Mat_VarGetSize+0xe8>
   3d634:	ldr	r1, [r0, #12]
   3d638:	ldr	r0, [r0]
   3d63c:	bl	3f8ec <__udivsi3>
   3d640:	mov	r3, #60	; 0x3c
   3d644:	mul	r3, r3, r0
   3d648:	mov	r7, r0
   3d64c:	str	r3, [sp]
   3d650:	cmp	r5, r7
   3d654:	bne	3d664 <Mat_VarGetSize+0xf4>
   3d658:	ldr	r0, [sp]
   3d65c:	add	sp, sp, #12
   3d660:	pop	{r4, r5, r6, r7, pc}
   3d664:	ldr	r0, [r6, r5, lsl #2]
   3d668:	cmp	r0, #0
   3d66c:	beq	3d68c <Mat_VarGetSize+0x11c>
   3d670:	ldr	r3, [r0, #16]
   3d674:	cmp	r3, #0
   3d678:	beq	3d694 <Mat_VarGetSize+0x124>
   3d67c:	bl	1708 <Mat_VarGetSize@plt>
   3d680:	ldr	r3, [sp]
   3d684:	add	r0, r3, r0
   3d688:	str	r0, [sp]
   3d68c:	add	r5, r5, #1
   3d690:	b	3d650 <Mat_VarGetSize+0xe0>
   3d694:	ldr	r3, [sp]
   3d698:	sub	r3, r3, #56	; 0x38
   3d69c:	str	r3, [sp]
   3d6a0:	b	3d68c <Mat_VarGetSize+0x11c>
   3d6a4:	cmp	r3, #5
   3d6a8:	bne	3d730 <Mat_VarGetSize+0x1c0>
   3d6ac:	ldr	r6, [r0, #40]	; 0x28
   3d6b0:	cmp	r6, #0
   3d6b4:	beq	3d658 <Mat_VarGetSize+0xe8>
   3d6b8:	ldr	r0, [r0, #8]
   3d6bc:	ldr	r5, [r6, #20]
   3d6c0:	bl	1600 <Mat_SizeOf@plt>
   3d6c4:	ldr	r3, [r4, #20]
   3d6c8:	ldr	r2, [r6, #20]
   3d6cc:	cmp	r3, #0
   3d6d0:	ldr	ip, [r6, #8]
   3d6d4:	mul	r0, r0, r5
   3d6d8:	str	r0, [sp]
   3d6dc:	lslne	r0, r0, #1
   3d6e0:	strne	r0, [sp]
   3d6e4:	ldr	r0, [r6, #16]
   3d6e8:	cmp	ip, #0
   3d6ec:	cmpne	r2, #0
   3d6f0:	ldr	r3, [sp]
   3d6f4:	moveq	r2, #1
   3d6f8:	movne	r2, #0
   3d6fc:	add	r1, ip, r0
   3d700:	cmp	r0, #0
   3d704:	orreq	r2, r2, #1
   3d708:	add	r1, r3, r1, lsl #2
   3d70c:	cmp	r2, #0
   3d710:	str	r1, [sp]
   3d714:	beq	3d658 <Mat_VarGetSize+0xe8>
   3d718:	ldr	r3, [r4, #28]
   3d71c:	cmp	r3, #0
   3d720:	movne	r3, #1
   3d724:	moveq	r3, #8
   3d728:	add	r3, r3, r1
   3d72c:	b	3d5d8 <Mat_VarGetSize+0x68>
   3d730:	ldr	r2, [r0, #4]
   3d734:	cmp	r2, #0
   3d738:	ble	3d658 <Mat_VarGetSize+0xe8>
   3d73c:	mov	r0, r3
   3d740:	bl	16f0 <Mat_SizeOfClass@plt>
   3d744:	add	r1, sp, #8
   3d748:	str	r0, [r1, #-8]!
   3d74c:	mov	r0, r4
   3d750:	bl	3bee0 <SafeMulDims>
   3d754:	ldr	r3, [r4, #20]
   3d758:	cmp	r3, #0
   3d75c:	beq	3d658 <Mat_VarGetSize+0xe8>
   3d760:	ldr	r3, [sp]
   3d764:	lsl	r3, r3, #1
   3d768:	b	3d5d8 <Mat_VarGetSize+0x68>

0003d76c <Mat_VarPrint>:
   3d76c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d770:	mov	r6, r1
   3d774:	ldr	r1, [pc, #1988]	; 3df40 <Mat_VarPrint+0x7d4>
   3d778:	sub	sp, sp, #212	; 0xd4
   3d77c:	mov	r4, r0
   3d780:	mov	r3, #0
   3d784:	mov	r2, #72	; 0x48
   3d788:	add	r1, pc, r1
   3d78c:	add	r0, sp, #36	; 0x24
   3d790:	str	r3, [sp, #32]
   3d794:	bl	14f8 <memcpy@plt>
   3d798:	cmp	r4, #0
   3d79c:	beq	3d910 <Mat_VarPrint+0x1a4>
   3d7a0:	ldr	r1, [r4, #36]	; 0x24
   3d7a4:	cmp	r1, #0
   3d7a8:	beq	3d7b8 <Mat_VarPrint+0x4c>
   3d7ac:	ldr	r0, [pc, #1936]	; 3df44 <Mat_VarPrint+0x7d8>
   3d7b0:	add	r0, pc, r0
   3d7b4:	bl	14b0 <printf@plt>
   3d7b8:	ldr	r0, [pc, #1928]	; 3df48 <Mat_VarPrint+0x7dc>
   3d7bc:	ldr	r1, [r4, #4]
   3d7c0:	add	r0, pc, r0
   3d7c4:	bl	14b0 <printf@plt>
   3d7c8:	ldr	r3, [r4, #4]
   3d7cc:	cmp	r3, #0
   3d7d0:	ble	3d910 <Mat_VarPrint+0x1a4>
   3d7d4:	ldr	r3, [r4, #32]
   3d7d8:	cmp	r3, #0
   3d7dc:	beq	3d824 <Mat_VarPrint+0xb8>
   3d7e0:	add	r1, sp, #208	; 0xd0
   3d7e4:	mov	r5, #1
   3d7e8:	str	r5, [r1, #-176]!	; 0xffffff50
   3d7ec:	mov	r0, r4
   3d7f0:	bl	3bee0 <SafeMulDims>
   3d7f4:	ldr	r3, [r4, #32]
   3d7f8:	ldr	r0, [pc, #1868]	; 3df4c <Mat_VarPrint+0x7e0>
   3d7fc:	ldr	r7, [pc, #1868]	; 3df50 <Mat_VarPrint+0x7e4>
   3d800:	ldr	r1, [r3]
   3d804:	add	r0, pc, r0
   3d808:	bl	14b0 <printf@plt>
   3d80c:	add	r7, pc, r7
   3d810:	ldr	r3, [r4, #4]
   3d814:	cmp	r5, r3
   3d818:	blt	3d918 <Mat_VarPrint+0x1ac>
   3d81c:	mov	r0, #10
   3d820:	bl	1678 <putchar@plt>
   3d824:	ldr	r3, [r4, #16]
   3d828:	add	r2, sp, #208	; 0xd0
   3d82c:	ldr	r0, [pc, #1824]	; 3df54 <Mat_VarPrint+0x7e8>
   3d830:	add	r3, r2, r3, lsl #2
   3d834:	add	r0, pc, r0
   3d838:	ldr	r1, [r3, #-172]	; 0xffffff54
   3d83c:	bl	14b0 <printf@plt>
   3d840:	ldr	r3, [r4, #20]
   3d844:	cmp	r3, #0
   3d848:	beq	3d930 <Mat_VarPrint+0x1c4>
   3d84c:	ldr	r0, [pc, #1796]	; 3df58 <Mat_VarPrint+0x7ec>
   3d850:	add	r0, pc, r0
   3d854:	bl	14b0 <printf@plt>
   3d858:	mov	r0, #10
   3d85c:	bl	1678 <putchar@plt>
   3d860:	ldr	r5, [r4, #8]
   3d864:	cmp	r5, #0
   3d868:	beq	3d89c <Mat_VarPrint+0x130>
   3d86c:	ldr	r1, [pc, #1768]	; 3df5c <Mat_VarPrint+0x7f0>
   3d870:	mov	r2, #100	; 0x64
   3d874:	add	r1, pc, r1
   3d878:	add	r1, r1, #72	; 0x48
   3d87c:	add	r0, sp, #108	; 0x6c
   3d880:	bl	14f8 <memcpy@plt>
   3d884:	add	r3, sp, #208	; 0xd0
   3d888:	add	r5, r3, r5, lsl #2
   3d88c:	ldr	r0, [pc, #1740]	; 3df60 <Mat_VarPrint+0x7f4>
   3d890:	ldr	r1, [r5, #-100]	; 0xffffff9c
   3d894:	add	r0, pc, r0
   3d898:	bl	14b0 <printf@plt>
   3d89c:	ldr	r3, [r4, #16]
   3d8a0:	ldr	r8, [r4, #40]	; 0x28
   3d8a4:	cmp	r3, #2
   3d8a8:	bne	3d9d0 <Mat_VarPrint+0x264>
   3d8ac:	ldr	r3, [r4, #52]	; 0x34
   3d8b0:	add	r0, sp, #208	; 0xd0
   3d8b4:	ldr	r1, [sp, #32]
   3d8b8:	ldr	r7, [r3, #4]
   3d8bc:	mov	r3, #1
   3d8c0:	str	r3, [r0, #-100]!	; 0xffffff9c
   3d8c4:	mov	r2, r7
   3d8c8:	bl	3bf40 <SafeMul>
   3d8cc:	ldr	r5, [sp, #108]	; 0x6c
   3d8d0:	cmp	r5, #0
   3d8d4:	beq	3d98c <Mat_VarPrint+0x220>
   3d8d8:	ldr	r0, [pc, #1668]	; 3df64 <Mat_VarPrint+0x7f8>
   3d8dc:	mov	r1, r5
   3d8e0:	add	r0, pc, r0
   3d8e4:	bl	14b0 <printf@plt>
   3d8e8:	ldr	r9, [pc, #1656]	; 3df68 <Mat_VarPrint+0x7fc>
   3d8ec:	mov	r5, #0
   3d8f0:	add	r9, pc, r9
   3d8f4:	mov	sl, r5
   3d8f8:	ldr	r3, [sp, #108]	; 0x6c
   3d8fc:	cmp	r5, r3
   3d900:	bcc	3d948 <Mat_VarPrint+0x1dc>
   3d904:	ldr	r0, [pc, #1632]	; 3df6c <Mat_VarPrint+0x800>
   3d908:	add	r0, pc, r0
   3d90c:	bl	15a0 <puts@plt>
   3d910:	add	sp, sp, #212	; 0xd4
   3d914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d918:	ldr	r3, [r4, #32]
   3d91c:	mov	r0, r7
   3d920:	ldr	r1, [r3, r5, lsl #2]
   3d924:	bl	14b0 <printf@plt>
   3d928:	add	r5, r5, #1
   3d92c:	b	3d810 <Mat_VarPrint+0xa4>
   3d930:	ldr	r3, [r4, #28]
   3d934:	cmp	r3, #0
   3d938:	beq	3d858 <Mat_VarPrint+0xec>
   3d93c:	ldr	r0, [pc, #1580]	; 3df70 <Mat_VarPrint+0x804>
   3d940:	add	r0, pc, r0
   3d944:	b	3d854 <Mat_VarPrint+0xe8>
   3d948:	ldr	r0, [r8, r5, lsl #2]
   3d94c:	cmp	r0, #0
   3d950:	bne	3d980 <Mat_VarPrint+0x214>
   3d954:	mov	r1, r7
   3d958:	mov	r0, r5
   3d95c:	bl	3fad8 <__aeabi_uidivmod>
   3d960:	ldr	fp, [r4, #52]	; 0x34
   3d964:	mov	r2, sl
   3d968:	mov	r0, r9
   3d96c:	ldr	r3, [fp, #8]
   3d970:	ldr	r1, [r3, r1, lsl #2]
   3d974:	bl	14b0 <printf@plt>
   3d978:	add	r5, r5, #1
   3d97c:	b	3d8f8 <Mat_VarPrint+0x18c>
   3d980:	mov	r1, r6
   3d984:	bl	1648 <Mat_VarPrint@plt>
   3d988:	b	3d978 <Mat_VarPrint+0x20c>
   3d98c:	ldr	r0, [pc, #1504]	; 3df74 <Mat_VarPrint+0x808>
   3d990:	mov	r1, r7
   3d994:	add	r0, pc, r0
   3d998:	bl	14b0 <printf@plt>
   3d99c:	ldr	r6, [pc, #1492]	; 3df78 <Mat_VarPrint+0x80c>
   3d9a0:	mov	r8, r5
   3d9a4:	add	r6, pc, r6
   3d9a8:	cmp	r5, r7
   3d9ac:	beq	3d904 <Mat_VarPrint+0x198>
   3d9b0:	ldr	r3, [r4, #52]	; 0x34
   3d9b4:	mov	r2, r8
   3d9b8:	mov	r0, r6
   3d9bc:	ldr	r3, [r3, #8]
   3d9c0:	ldr	r1, [r3, r5, lsl #2]
   3d9c4:	bl	14b0 <printf@plt>
   3d9c8:	add	r5, r5, #1
   3d9cc:	b	3d9a8 <Mat_VarPrint+0x23c>
   3d9d0:	cmp	r8, #0
   3d9d4:	beq	3d9e4 <Mat_VarPrint+0x278>
   3d9d8:	ldr	r1, [r4, #12]
   3d9dc:	cmp	r1, #0
   3d9e0:	bgt	3d9f8 <Mat_VarPrint+0x28c>
   3d9e4:	cmp	r6, #0
   3d9e8:	beq	3d910 <Mat_VarPrint+0x1a4>
   3d9ec:	ldr	r0, [pc, #1416]	; 3df7c <Mat_VarPrint+0x810>
   3d9f0:	add	r0, pc, r0
   3d9f4:	b	3d90c <Mat_VarPrint+0x1a0>
   3d9f8:	cmp	r3, #1
   3d9fc:	bne	3da44 <Mat_VarPrint+0x2d8>
   3da00:	ldr	r0, [r4]
   3da04:	bl	3f8ec <__udivsi3>
   3da08:	mov	r4, #0
   3da0c:	str	r0, [sp, #32]
   3da10:	ldr	r0, [pc, #1384]	; 3df80 <Mat_VarPrint+0x814>
   3da14:	add	r0, pc, r0
   3da18:	bl	15a0 <puts@plt>
   3da1c:	ldr	r3, [sp, #32]
   3da20:	cmp	r4, r3
   3da24:	ldrcs	r0, [pc, #1368]	; 3df84 <Mat_VarPrint+0x818>
   3da28:	addcs	r0, pc, r0
   3da2c:	bcs	3d90c <Mat_VarPrint+0x1a0>
   3da30:	ldr	r0, [r8, r4, lsl #2]
   3da34:	mov	r1, r6
   3da38:	bl	1648 <Mat_VarPrint@plt>
   3da3c:	add	r4, r4, #1
   3da40:	b	3da1c <Mat_VarPrint+0x2b0>
   3da44:	cmp	r6, #0
   3da48:	beq	3d910 <Mat_VarPrint+0x1a4>
   3da4c:	ldr	r0, [pc, #1332]	; 3df88 <Mat_VarPrint+0x81c>
   3da50:	add	r0, pc, r0
   3da54:	bl	15a0 <puts@plt>
   3da58:	ldr	r3, [r4, #4]
   3da5c:	cmp	r3, #2
   3da60:	ble	3da7c <Mat_VarPrint+0x310>
   3da64:	ldr	r0, [pc, #1312]	; 3df8c <Mat_VarPrint+0x820>
   3da68:	add	r0, pc, r0
   3da6c:	bl	15a0 <puts@plt>
   3da70:	ldr	r0, [pc, #1304]	; 3df90 <Mat_VarPrint+0x824>
   3da74:	add	r0, pc, r0
   3da78:	b	3d90c <Mat_VarPrint+0x1a0>
   3da7c:	cmp	r3, #1
   3da80:	bne	3daa8 <Mat_VarPrint+0x33c>
   3da84:	ldr	r3, [r4, #32]
   3da88:	cmp	r3, #0
   3da8c:	beq	3da70 <Mat_VarPrint+0x304>
   3da90:	ldr	r3, [r3]
   3da94:	cmp	r3, #15
   3da98:	bls	3da70 <Mat_VarPrint+0x304>
   3da9c:	ldr	r0, [pc, #1264]	; 3df94 <Mat_VarPrint+0x828>
   3daa0:	add	r0, pc, r0
   3daa4:	b	3da6c <Mat_VarPrint+0x300>
   3daa8:	cmp	r3, #2
   3daac:	bne	3da70 <Mat_VarPrint+0x304>
   3dab0:	ldr	r3, [r4, #32]
   3dab4:	cmp	r3, #0
   3dab8:	beq	3da70 <Mat_VarPrint+0x304>
   3dabc:	ldr	r3, [r4, #16]
   3dac0:	sub	r3, r3, #4
   3dac4:	cmp	r3, #11
   3dac8:	addls	pc, pc, r3, lsl #2
   3dacc:	b	3da70 <Mat_VarPrint+0x304>
   3dad0:	b	3dc58 <Mat_VarPrint+0x4ec>
   3dad4:	b	3dd78 <Mat_VarPrint+0x60c>
   3dad8:	b	3db00 <Mat_VarPrint+0x394>
   3dadc:	b	3db00 <Mat_VarPrint+0x394>
   3dae0:	b	3db00 <Mat_VarPrint+0x394>
   3dae4:	b	3db00 <Mat_VarPrint+0x394>
   3dae8:	b	3db00 <Mat_VarPrint+0x394>
   3daec:	b	3db00 <Mat_VarPrint+0x394>
   3daf0:	b	3db00 <Mat_VarPrint+0x394>
   3daf4:	b	3db00 <Mat_VarPrint+0x394>
   3daf8:	b	3db00 <Mat_VarPrint+0x394>
   3dafc:	b	3db00 <Mat_VarPrint+0x394>
   3db00:	ldr	r0, [r4, #8]
   3db04:	bl	1600 <Mat_SizeOf@plt>
   3db08:	ldr	sl, [r4, #20]
   3db0c:	ldr	r5, [r4, #40]	; 0x28
   3db10:	cmp	sl, #0
   3db14:	mov	r6, r0
   3db18:	beq	3dbd8 <Mat_VarPrint+0x46c>
   3db1c:	ldr	r9, [pc, #1140]	; 3df98 <Mat_VarPrint+0x82c>
   3db20:	ldr	sl, [pc, #1140]	; 3df9c <Mat_VarPrint+0x830>
   3db24:	ldr	r8, [r5, #4]
   3db28:	ldr	r3, [r5]
   3db2c:	mov	r7, #0
   3db30:	add	r9, pc, r9
   3db34:	add	sl, pc, sl
   3db38:	str	r3, [sp, #4]
   3db3c:	ldr	r2, [r4, #32]
   3db40:	ldr	r2, [r2]
   3db44:	cmp	r7, r2
   3db48:	bcs	3da70 <Mat_VarPrint+0x304>
   3db4c:	cmp	r7, #15
   3db50:	beq	3dbcc <Mat_VarPrint+0x460>
   3db54:	mov	fp, #0
   3db58:	b	3db98 <Mat_VarPrint+0x42c>
   3db5c:	ldr	r5, [r2]
   3db60:	ldr	r3, [sp, #4]
   3db64:	ldr	r0, [r4, #8]
   3db68:	mla	r5, r5, fp, r7
   3db6c:	add	fp, fp, #1
   3db70:	mul	r5, r6, r5
   3db74:	add	r1, r3, r5
   3db78:	bl	3bcf8 <Mat_PrintNumber>
   3db7c:	mov	r0, r9
   3db80:	bl	14b0 <printf@plt>
   3db84:	add	r1, r8, r5
   3db88:	ldr	r0, [r4, #8]
   3db8c:	bl	3bcf8 <Mat_PrintNumber>
   3db90:	mov	r0, sl
   3db94:	bl	14b0 <printf@plt>
   3db98:	ldr	r2, [r4, #32]
   3db9c:	ldr	r1, [r2, #4]
   3dba0:	cmp	fp, r1
   3dba4:	bcs	3dbbc <Mat_VarPrint+0x450>
   3dba8:	cmp	fp, #15
   3dbac:	bne	3db5c <Mat_VarPrint+0x3f0>
   3dbb0:	ldr	r0, [pc, #1000]	; 3dfa0 <Mat_VarPrint+0x834>
   3dbb4:	add	r0, pc, r0
   3dbb8:	bl	14b0 <printf@plt>
   3dbbc:	mov	r0, #10
   3dbc0:	bl	1678 <putchar@plt>
   3dbc4:	add	r7, r7, #1
   3dbc8:	b	3db3c <Mat_VarPrint+0x3d0>
   3dbcc:	ldr	r0, [pc, #976]	; 3dfa4 <Mat_VarPrint+0x838>
   3dbd0:	add	r0, pc, r0
   3dbd4:	b	3da6c <Mat_VarPrint+0x300>
   3dbd8:	ldr	r8, [pc, #968]	; 3dfa8 <Mat_VarPrint+0x83c>
   3dbdc:	mov	r7, #32
   3dbe0:	add	r8, pc, r8
   3dbe4:	mov	r9, #10
   3dbe8:	ldr	r3, [r4, #32]
   3dbec:	ldr	r3, [r3]
   3dbf0:	cmp	sl, r3
   3dbf4:	bcs	3da70 <Mat_VarPrint+0x304>
   3dbf8:	cmp	sl, #15
   3dbfc:	beq	3dbcc <Mat_VarPrint+0x460>
   3dc00:	mov	fp, #0
   3dc04:	b	3dc28 <Mat_VarPrint+0x4bc>
   3dc08:	ldr	r1, [r3]
   3dc0c:	ldr	r0, [r4, #8]
   3dc10:	mla	r1, r1, fp, sl
   3dc14:	add	fp, fp, #1
   3dc18:	mla	r1, r6, r1, r5
   3dc1c:	bl	3bcf8 <Mat_PrintNumber>
   3dc20:	mov	r0, r7
   3dc24:	bl	1678 <putchar@plt>
   3dc28:	ldr	r3, [r4, #32]
   3dc2c:	ldr	r2, [r3, #4]
   3dc30:	cmp	fp, r2
   3dc34:	bcs	3dc48 <Mat_VarPrint+0x4dc>
   3dc38:	cmp	fp, #15
   3dc3c:	bne	3dc08 <Mat_VarPrint+0x49c>
   3dc40:	mov	r0, r8
   3dc44:	bl	14b0 <printf@plt>
   3dc48:	mov	r0, r9
   3dc4c:	bl	1678 <putchar@plt>
   3dc50:	add	sl, sl, #1
   3dc54:	b	3dbe8 <Mat_VarPrint+0x47c>
   3dc58:	ldr	r3, [r4, #8]
   3dc5c:	ldr	r7, [r4, #40]	; 0x28
   3dc60:	cmp	r3, #4
   3dc64:	beq	3dc78 <Mat_VarPrint+0x50c>
   3dc68:	cmp	r3, #17
   3dc6c:	movne	r5, #0
   3dc70:	movne	r8, #10
   3dc74:	bne	3dd5c <Mat_VarPrint+0x5f0>
   3dc78:	ldr	r9, [pc, #812]	; 3dfac <Mat_VarPrint+0x840>
   3dc7c:	ldr	sl, [pc, #812]	; 3dfb0 <Mat_VarPrint+0x844>
   3dc80:	mov	r6, #0
   3dc84:	add	r9, pc, r9
   3dc88:	add	sl, pc, sl
   3dc8c:	ldr	r3, [r4, #32]
   3dc90:	ldr	r3, [r3]
   3dc94:	cmp	r6, r3
   3dc98:	bcs	3da70 <Mat_VarPrint+0x304>
   3dc9c:	mov	r5, #0
   3dca0:	ldr	r8, [pc, #780]	; 3dfb4 <Mat_VarPrint+0x848>
   3dca4:	b	3dcc8 <Mat_VarPrint+0x55c>
   3dca8:	ldr	r3, [r3]
   3dcac:	mla	r3, r3, r5, r6
   3dcb0:	lsl	r3, r3, #1
   3dcb4:	ldrh	r0, [r7, r3]
   3dcb8:	cmp	r0, #127	; 0x7f
   3dcbc:	bhi	3dce8 <Mat_VarPrint+0x57c>
   3dcc0:	bl	1678 <putchar@plt>
   3dcc4:	add	r5, r5, #1
   3dcc8:	ldr	r3, [r4, #32]
   3dccc:	ldr	r2, [r3, #4]
   3dcd0:	cmp	r5, r2
   3dcd4:	bcc	3dca8 <Mat_VarPrint+0x53c>
   3dcd8:	mov	r0, #10
   3dcdc:	bl	1678 <putchar@plt>
   3dce0:	add	r6, r6, #1
   3dce4:	b	3dc8c <Mat_VarPrint+0x520>
   3dce8:	cmp	r0, r8
   3dcec:	and	r3, r0, #63	; 0x3f
   3dcf0:	lsr	r1, r0, #6
   3dcf4:	bhi	3dd0c <Mat_VarPrint+0x5a0>
   3dcf8:	orr	r2, r3, #128	; 0x80
   3dcfc:	orr	r1, r1, #192	; 0xc0
   3dd00:	mov	r0, sl
   3dd04:	bl	14b0 <printf@plt>
   3dd08:	b	3dcc4 <Mat_VarPrint+0x558>
   3dd0c:	and	r1, r1, #63	; 0x3f
   3dd10:	lsr	r0, r0, #12
   3dd14:	orr	r2, r1, #128	; 0x80
   3dd18:	orr	r3, r3, #128	; 0x80
   3dd1c:	orr	r1, r0, #224	; 0xe0
   3dd20:	mov	r0, r9
   3dd24:	bl	14b0 <printf@plt>
   3dd28:	b	3dcc4 <Mat_VarPrint+0x558>
   3dd2c:	ldr	r3, [r3]
   3dd30:	mul	r3, r3, r6
   3dd34:	add	r6, r6, #1
   3dd38:	ldrb	r0, [r9, r3]
   3dd3c:	bl	1678 <putchar@plt>
   3dd40:	ldr	r3, [r4, #32]
   3dd44:	ldr	r2, [r3, #4]
   3dd48:	cmp	r6, r2
   3dd4c:	bcc	3dd2c <Mat_VarPrint+0x5c0>
   3dd50:	mov	r0, r8
   3dd54:	bl	1678 <putchar@plt>
   3dd58:	add	r5, r5, #1
   3dd5c:	ldr	r3, [r4, #32]
   3dd60:	ldr	r3, [r3]
   3dd64:	cmp	r5, r3
   3dd68:	bcs	3da70 <Mat_VarPrint+0x304>
   3dd6c:	mov	r6, #0
   3dd70:	add	r9, r7, r5
   3dd74:	b	3dd40 <Mat_VarPrint+0x5d4>
   3dd78:	ldr	r0, [r4, #8]
   3dd7c:	bl	1600 <Mat_SizeOf@plt>
   3dd80:	ldr	r3, [r4, #40]	; 0x28
   3dd84:	ldr	r2, [r4, #20]
   3dd88:	cmp	r2, #0
   3dd8c:	ldr	r6, [r3, #24]
   3dd90:	str	r0, [sp, #4]
   3dd94:	beq	3de98 <Mat_VarPrint+0x72c>
   3dd98:	ldr	r2, [r6]
   3dd9c:	ldr	r1, [pc, #532]	; 3dfb8 <Mat_VarPrint+0x84c>
   3dda0:	str	r2, [sp, #8]
   3dda4:	add	r1, pc, r1
   3dda8:	ldr	r2, [r6, #4]
   3ddac:	str	r1, [sp, #16]
   3ddb0:	ldr	r1, [pc, #516]	; 3dfbc <Mat_VarPrint+0x850>
   3ddb4:	str	r2, [sp, #12]
   3ddb8:	mov	r2, #0
   3ddbc:	add	r1, pc, r1
   3ddc0:	str	r1, [sp, #20]
   3ddc4:	ldr	r1, [r3, #16]
   3ddc8:	sub	r1, r1, #1
   3ddcc:	cmp	r2, r1
   3ddd0:	bcs	3da70 <Mat_VarPrint+0x304>
   3ddd4:	ldr	r1, [r3, #12]
   3ddd8:	lsl	fp, r2, #2
   3dddc:	add	r6, r2, #1
   3dde0:	ldr	r5, [r1, r2, lsl #2]
   3dde4:	ldr	r2, [sp, #4]
   3dde8:	sub	r8, r5, #1
   3ddec:	ldr	r9, [pc, #460]	; 3dfc0 <Mat_VarPrint+0x854>
   3ddf0:	mul	r8, r2, r8
   3ddf4:	add	fp, fp, #4
   3ddf8:	lsl	sl, r5, #2
   3ddfc:	mov	r7, #0
   3de00:	add	r9, pc, r9
   3de04:	ldr	r1, [r3, #12]
   3de08:	mov	r2, r6
   3de0c:	ldr	r1, [r1, fp]
   3de10:	cmp	r5, r1
   3de14:	bcs	3ddc4 <Mat_VarPrint+0x658>
   3de18:	ldr	r1, [r3, #20]
   3de1c:	ldr	r2, [sp, #4]
   3de20:	cmp	r5, r1
   3de24:	add	r7, r7, r2
   3de28:	mov	r2, r6
   3de2c:	bcs	3ddc4 <Mat_VarPrint+0x658>
   3de30:	ldr	r2, [r3, #4]
   3de34:	ldr	r0, [sp, #16]
   3de38:	str	r3, [sp, #28]
   3de3c:	ldr	r1, [r2, sl]
   3de40:	mov	r2, r6
   3de44:	add	r1, r1, #1
   3de48:	bl	14b0 <printf@plt>
   3de4c:	ldr	r3, [sp, #8]
   3de50:	add	r2, r8, r7
   3de54:	add	r1, r3, r2
   3de58:	ldr	r0, [r4, #8]
   3de5c:	str	r2, [sp, #24]
   3de60:	bl	3bcf8 <Mat_PrintNumber>
   3de64:	ldr	r0, [sp, #20]
   3de68:	bl	14b0 <printf@plt>
   3de6c:	ldr	r3, [sp, #12]
   3de70:	ldr	r2, [sp, #24]
   3de74:	ldr	r0, [r4, #8]
   3de78:	add	r1, r3, r2
   3de7c:	bl	3bcf8 <Mat_PrintNumber>
   3de80:	mov	r0, r9
   3de84:	bl	15a0 <puts@plt>
   3de88:	add	r5, r5, #1
   3de8c:	add	sl, sl, #4
   3de90:	ldr	r3, [sp, #28]
   3de94:	b	3de04 <Mat_VarPrint+0x698>
   3de98:	ldr	r1, [pc, #292]	; 3dfc4 <Mat_VarPrint+0x858>
   3de9c:	mov	fp, #10
   3dea0:	add	r1, pc, r1
   3dea4:	str	r1, [sp, #8]
   3dea8:	ldr	r1, [r3, #16]
   3deac:	sub	r1, r1, #1
   3deb0:	cmp	r1, r2
   3deb4:	bls	3da70 <Mat_VarPrint+0x304>
   3deb8:	ldr	r1, [r3, #12]
   3debc:	lsl	r9, r2, #2
   3dec0:	add	r7, r2, #1
   3dec4:	ldr	r5, [r1, r2, lsl #2]
   3dec8:	ldr	r2, [sp, #4]
   3decc:	add	r9, r9, #4
   3ded0:	lsl	r8, r5, #2
   3ded4:	mla	sl, r5, r2, r6
   3ded8:	ldr	r1, [r3, #12]
   3dedc:	mov	r2, r7
   3dee0:	ldr	r1, [r1, r9]
   3dee4:	cmp	r5, r1
   3dee8:	bcs	3dea8 <Mat_VarPrint+0x73c>
   3deec:	ldr	r1, [r3, #20]
   3def0:	cmp	r5, r1
   3def4:	bcs	3dea8 <Mat_VarPrint+0x73c>
   3def8:	ldr	r2, [r3, #4]
   3defc:	ldr	r0, [sp, #8]
   3df00:	str	r3, [sp, #12]
   3df04:	ldr	r1, [r2, r8]
   3df08:	mov	r2, r7
   3df0c:	add	r1, r1, #1
   3df10:	bl	14b0 <printf@plt>
   3df14:	mov	r1, sl
   3df18:	ldr	r0, [r4, #8]
   3df1c:	bl	3bcf8 <Mat_PrintNumber>
   3df20:	mov	r0, fp
   3df24:	bl	1678 <putchar@plt>
   3df28:	ldr	r3, [sp, #4]
   3df2c:	add	r5, r5, #1
   3df30:	add	sl, sl, r3
   3df34:	add	r8, r8, #4
   3df38:	ldr	r3, [sp, #12]
   3df3c:	b	3ded8 <Mat_VarPrint+0x76c>
   3df40:	.word	0x00014990
   3df44:	.word	0x00003700
   3df48:	.word	0x0000376a
   3df4c:	.word	0x000036bc
   3df50:	.word	0x000036c4
   3df54:	.word	0x000036a3
   3df58:	.word	0x00003696
   3df5c:	.word	0x000148a4
   3df60:	.word	0x00003668
   3df64:	.word	0x0000362c
   3df68:	.word	0x0000362b
   3df6c:	.word	0x00003634
   3df70:	.word	0x000035b1
   3df74:	.word	0x00003578
   3df78:	.word	0x00003577
   3df7c:	.word	0x0000354a
   3df80:	.word	0x0000352a
   3df84:	.word	0x00003514
   3df88:	.word	0x000034ee
   3df8c:	.word	0x000034d8
   3df90:	.word	0x000034c8
   3df94:	.word	0x000034c5
   3df98:	.word	0x00003465
   3df9c:	.word	0x00003465
   3dfa0:	.word	0x000033e8
   3dfa4:	.word	0x000033d0
   3dfa8:	.word	0x000033bc
   3dfac:	.word	0x00003322
   3dfb0:	.word	0x00003320
   3dfb4:	.word	0x000007ff
   3dfb8:	.word	0x00003209
   3dfbc:	.word	0x000031d9
   3dfc0:	.word	0x00002f4a
   3dfc4:	.word	0x0000310d

0003dfc8 <Mat_VarReadData>:
   3dfc8:	ldr	ip, [r1, #16]
   3dfcc:	push	{r4, r5, lr}
   3dfd0:	sub	ip, ip, #6
   3dfd4:	cmp	ip, #9
   3dfd8:	ldr	lr, [sp, #12]
   3dfdc:	ldr	r4, [sp, #16]
   3dfe0:	bhi	3e02c <Mat_VarReadData+0x64>
   3dfe4:	ldr	ip, [r0, #16]
   3dfe8:	mov	r5, r0
   3dfec:	cmp	ip, #256	; 0x100
   3dff0:	beq	3e00c <Mat_VarReadData+0x44>
   3dff4:	cmp	ip, #512	; 0x200
   3dff8:	beq	3e034 <Mat_VarReadData+0x6c>
   3dffc:	cmp	ip, #16
   3e000:	beq	3e01c <Mat_VarReadData+0x54>
   3e004:	mov	r0, #2
   3e008:	pop	{r4, r5, pc}
   3e00c:	str	r4, [sp, #16]
   3e010:	str	lr, [sp, #12]
   3e014:	pop	{r4, r5, lr}
   3e018:	b	38b98 <Mat_VarReadData5>
   3e01c:	str	r4, [sp, #16]
   3e020:	str	lr, [sp, #12]
   3e024:	pop	{r4, r5, lr}
   3e028:	b	3b558 <Mat_VarReadData4>
   3e02c:	mvn	r0, #0
   3e030:	pop	{r4, r5, pc}
   3e034:	mov	r0, #1
   3e038:	pop	{r4, r5, pc}

0003e03c <Mat_VarReadDataAll>:
   3e03c:	cmp	r1, #0
   3e040:	cmpne	r0, #0
   3e044:	push	{r4, lr}
   3e048:	moveq	r4, #1
   3e04c:	movne	r4, #0
   3e050:	beq	3e060 <Mat_VarReadDataAll+0x24>
   3e054:	bl	3be10 <ReadData>
   3e058:	mov	r0, r4
   3e05c:	pop	{r4, pc}
   3e060:	mov	r0, #1
   3e064:	pop	{r4, pc}

0003e068 <Mat_VarReadDataLinear>:
   3e068:	ldr	ip, [r1, #16]
   3e06c:	push	{r4, r5, lr}
   3e070:	sub	ip, ip, #6
   3e074:	cmp	ip, #9
   3e078:	ldr	lr, [sp, #12]
   3e07c:	ldr	r4, [sp, #16]
   3e080:	bhi	3e0cc <Mat_VarReadDataLinear+0x64>
   3e084:	ldr	ip, [r0, #16]
   3e088:	mov	r5, r0
   3e08c:	cmp	ip, #256	; 0x100
   3e090:	beq	3e0ac <Mat_VarReadDataLinear+0x44>
   3e094:	cmp	ip, #512	; 0x200
   3e098:	beq	3e0d4 <Mat_VarReadDataLinear+0x6c>
   3e09c:	cmp	ip, #16
   3e0a0:	beq	3e0bc <Mat_VarReadDataLinear+0x54>
   3e0a4:	mov	r0, #2
   3e0a8:	pop	{r4, r5, pc}
   3e0ac:	str	r4, [sp, #16]
   3e0b0:	str	lr, [sp, #12]
   3e0b4:	pop	{r4, r5, lr}
   3e0b8:	b	392d0 <Mat_VarReadDataLinear5>
   3e0bc:	str	r4, [sp, #16]
   3e0c0:	str	lr, [sp, #12]
   3e0c4:	pop	{r4, r5, lr}
   3e0c8:	b	3b76c <Mat_VarReadDataLinear4>
   3e0cc:	mvn	r0, #0
   3e0d0:	pop	{r4, r5, pc}
   3e0d4:	mov	r0, #1
   3e0d8:	pop	{r4, r5, pc}

0003e0dc <Mat_VarReadNextInfo>:
   3e0dc:	subs	r3, r0, #0
   3e0e0:	beq	3e100 <Mat_VarReadNextInfo+0x24>
   3e0e4:	ldr	r3, [r3, #16]
   3e0e8:	cmp	r3, #16
   3e0ec:	beq	3e0fc <Mat_VarReadNextInfo+0x20>
   3e0f0:	cmp	r3, #256	; 0x100
   3e0f4:	bne	3e100 <Mat_VarReadNextInfo+0x24>
   3e0f8:	b	39f88 <Mat_VarReadNextInfo5>
   3e0fc:	b	3b884 <Mat_VarReadNextInfo4>
   3e100:	mov	r0, #0
   3e104:	bx	lr

0003e108 <Mat_GetDir>:
   3e108:	cmp	r1, #0
   3e10c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e110:	moveq	r5, r1
   3e114:	beq	3e128 <Mat_GetDir+0x20>
   3e118:	cmp	r0, #0
   3e11c:	bne	3e130 <Mat_GetDir+0x28>
   3e120:	mov	r5, #0
   3e124:	str	r5, [r1]
   3e128:	mov	r0, r5
   3e12c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e130:	ldr	r5, [r0, #40]	; 0x28
   3e134:	mov	r6, r1
   3e138:	cmp	r5, #0
   3e13c:	mov	r4, r0
   3e140:	ldr	r3, [r0, #16]
   3e144:	bne	3e310 <Mat_GetDir+0x208>
   3e148:	cmp	r3, #512	; 0x200
   3e14c:	bne	3e200 <Mat_GetDir+0xf8>
   3e150:	ldr	r0, [r0, #36]	; 0x24
   3e154:	cmp	r0, #0
   3e158:	beq	3e120 <Mat_GetDir+0x18>
   3e15c:	mov	r1, #4
   3e160:	ldr	r8, [r4, #32]
   3e164:	bl	1468 <calloc@plt>
   3e168:	cmp	r0, #0
   3e16c:	str	r0, [r4, #40]	; 0x28
   3e170:	bne	3e188 <Mat_GetDir+0x80>
   3e174:	ldr	r0, [pc, #456]	; 3e344 <Mat_GetDir+0x23c>
   3e178:	str	r5, [r6]
   3e17c:	add	r0, pc, r0
   3e180:	bl	1690 <Mat_Critical@plt>
   3e184:	b	3e128 <Mat_GetDir+0x20>
   3e188:	ldr	r9, [pc, #440]	; 3e348 <Mat_GetDir+0x240>
   3e18c:	str	r5, [r4, #32]
   3e190:	add	r9, pc, r9
   3e194:	ldr	r2, [r4, #32]
   3e198:	ldr	r3, [r4, #36]	; 0x24
   3e19c:	cmp	r2, r3
   3e1a0:	bcs	3e1f0 <Mat_GetDir+0xe8>
   3e1a4:	mov	r0, r4
   3e1a8:	bl	1738 <Mat_VarReadNextInfo@plt>
   3e1ac:	subs	r7, r0, #0
   3e1b0:	beq	3e1e4 <Mat_GetDir+0xdc>
   3e1b4:	ldr	r1, [r7, #36]	; 0x24
   3e1b8:	cmp	r1, #0
   3e1bc:	beq	3e1d8 <Mat_GetDir+0xd0>
   3e1c0:	mov	r0, r9
   3e1c4:	ldr	fp, [r4, #40]	; 0x28
   3e1c8:	bl	1e64 <strdup_printf>
   3e1cc:	add	sl, r5, #1
   3e1d0:	str	r0, [fp, r5, lsl #2]
   3e1d4:	mov	r5, sl
   3e1d8:	mov	r0, r7
   3e1dc:	bl	15f4 <Mat_VarFree@plt>
   3e1e0:	b	3e194 <Mat_GetDir+0x8c>
   3e1e4:	ldr	r0, [pc, #352]	; 3e34c <Mat_GetDir+0x244>
   3e1e8:	add	r0, pc, r0
   3e1ec:	bl	1690 <Mat_Critical@plt>
   3e1f0:	str	r8, [r4, #32]
   3e1f4:	str	r5, [r6]
   3e1f8:	ldr	r5, [r4, #40]	; 0x28
   3e1fc:	b	3e128 <Mat_GetDir+0x20>
   3e200:	ldr	r0, [r0]
   3e204:	bl	151c <ftell@plt>
   3e208:	cmn	r0, #1
   3e20c:	mov	r8, r0
   3e210:	ldreq	r0, [pc, #312]	; 3e350 <Mat_GetDir+0x248>
   3e214:	streq	r5, [r6]
   3e218:	addeq	r0, pc, r0
   3e21c:	beq	3e180 <Mat_GetDir+0x78>
   3e220:	ldr	r9, [pc, #300]	; 3e354 <Mat_GetDir+0x24c>
   3e224:	mov	sl, #4
   3e228:	add	r9, pc, r9
   3e22c:	mov	r2, r5
   3e230:	ldr	r1, [r4, #28]
   3e234:	ldr	r0, [r4]
   3e238:	bl	1714 <fseek@plt>
   3e23c:	str	r5, [r4, #36]	; 0x24
   3e240:	mov	r0, r4
   3e244:	bl	1738 <Mat_VarReadNextInfo@plt>
   3e248:	subs	r7, r0, #0
   3e24c:	beq	3e2f4 <Mat_GetDir+0x1ec>
   3e250:	ldr	r3, [r7, #36]	; 0x24
   3e254:	cmp	r3, #0
   3e258:	beq	3e29c <Mat_GetDir+0x194>
   3e25c:	ldr	r0, [r4, #40]	; 0x28
   3e260:	cmp	r0, #0
   3e264:	bne	3e2b8 <Mat_GetDir+0x1b0>
   3e268:	mov	r0, sl
   3e26c:	bl	15ac <malloc@plt>
   3e270:	cmp	r0, #0
   3e274:	mov	r5, r0
   3e278:	beq	3e2cc <Mat_GetDir+0x1c4>
   3e27c:	ldr	fp, [r4, #36]	; 0x24
   3e280:	str	r0, [r4, #40]	; 0x28
   3e284:	add	r3, fp, #1
   3e288:	str	r3, [r4, #36]	; 0x24
   3e28c:	ldr	r1, [r7, #36]	; 0x24
   3e290:	mov	r0, r9
   3e294:	bl	1e64 <strdup_printf>
   3e298:	str	r0, [r5, fp, lsl #2]
   3e29c:	mov	r0, r7
   3e2a0:	bl	15f4 <Mat_VarFree@plt>
   3e2a4:	ldr	r0, [r4]
   3e2a8:	bl	15e8 <feof@plt>
   3e2ac:	cmp	r0, #0
   3e2b0:	beq	3e240 <Mat_GetDir+0x138>
   3e2b4:	b	3e2d8 <Mat_GetDir+0x1d0>
   3e2b8:	ldr	r1, [r4, #36]	; 0x24
   3e2bc:	add	r1, r1, #1
   3e2c0:	lsl	r1, r1, #2
   3e2c4:	bl	1540 <realloc@plt>
   3e2c8:	b	3e270 <Mat_GetDir+0x168>
   3e2cc:	ldr	r0, [pc, #132]	; 3e358 <Mat_GetDir+0x250>
   3e2d0:	add	r0, pc, r0
   3e2d4:	bl	1690 <Mat_Critical@plt>
   3e2d8:	mov	r2, #0
   3e2dc:	mov	r1, r8
   3e2e0:	ldr	r0, [r4]
   3e2e4:	bl	1714 <fseek@plt>
   3e2e8:	ldr	r3, [r4, #36]	; 0x24
   3e2ec:	str	r3, [r6]
   3e2f0:	b	3e1f8 <Mat_GetDir+0xf0>
   3e2f4:	ldr	r0, [r4]
   3e2f8:	bl	15e8 <feof@plt>
   3e2fc:	cmp	r0, #0
   3e300:	bne	3e2a4 <Mat_GetDir+0x19c>
   3e304:	ldr	r0, [pc, #80]	; 3e35c <Mat_GetDir+0x254>
   3e308:	add	r0, pc, r0
   3e30c:	b	3e2d4 <Mat_GetDir+0x1cc>
   3e310:	cmp	r3, #512	; 0x200
   3e314:	moveq	r3, #0
   3e318:	bne	3e2e8 <Mat_GetDir+0x1e0>
   3e31c:	str	r3, [r6]
   3e320:	ldr	r3, [r6]
   3e324:	ldr	r2, [r4, #36]	; 0x24
   3e328:	cmp	r3, r2
   3e32c:	bcs	3e1f8 <Mat_GetDir+0xf0>
   3e330:	ldr	r2, [r5, r3, lsl #2]
   3e334:	cmp	r2, #0
   3e338:	beq	3e1f8 <Mat_GetDir+0xf0>
   3e33c:	add	r3, r3, #1
   3e340:	b	3e31c <Mat_GetDir+0x214>
   3e344:	.word	0x00002e40
   3e348:	.word	0x00002d53
   3e34c:	.word	0x0000259e
   3e350:	.word	0x0000254d
   3e354:	.word	0x00002cbb
   3e358:	.word	0x00002cec
   3e35c:	.word	0x0000247e

0003e360 <Mat_VarReadInfo>:
   3e360:	cmp	r1, #0
   3e364:	cmpne	r0, #0
   3e368:	push	{r4, r5, r6, r7, r8, lr}
   3e36c:	moveq	r5, #1
   3e370:	movne	r5, #0
   3e374:	moveq	r5, #0
   3e378:	beq	3e464 <Mat_VarReadInfo+0x104>
   3e37c:	ldr	r3, [r0, #16]
   3e380:	mov	r6, r1
   3e384:	cmp	r3, #512	; 0x200
   3e388:	mov	r4, r0
   3e38c:	ldreq	r7, [r0, #32]
   3e390:	streq	r5, [r0, #32]
   3e394:	beq	3e43c <Mat_VarReadInfo+0xdc>
   3e398:	ldr	r0, [r0]
   3e39c:	bl	151c <ftell@plt>
   3e3a0:	cmn	r0, #1
   3e3a4:	mov	r7, r0
   3e3a8:	beq	3e49c <Mat_VarReadInfo+0x13c>
   3e3ac:	mov	r2, r5
   3e3b0:	ldr	r1, [r4, #28]
   3e3b4:	ldr	r0, [r4]
   3e3b8:	bl	1714 <fseek@plt>
   3e3bc:	mov	r0, r4
   3e3c0:	bl	1738 <Mat_VarReadNextInfo@plt>
   3e3c4:	subs	r5, r0, #0
   3e3c8:	beq	3e46c <Mat_VarReadInfo+0x10c>
   3e3cc:	ldr	r0, [r5, #36]	; 0x24
   3e3d0:	cmp	r0, #0
   3e3d4:	beq	3e3e8 <Mat_VarReadInfo+0x88>
   3e3d8:	mov	r1, r6
   3e3dc:	bl	148c <strcmp@plt>
   3e3e0:	cmp	r0, #0
   3e3e4:	beq	3e488 <Mat_VarReadInfo+0x128>
   3e3e8:	mov	r0, r5
   3e3ec:	bl	15f4 <Mat_VarFree@plt>
   3e3f0:	ldr	r0, [r4]
   3e3f4:	bl	15e8 <feof@plt>
   3e3f8:	cmp	r0, #0
   3e3fc:	beq	3e3bc <Mat_VarReadInfo+0x5c>
   3e400:	mov	r5, #0
   3e404:	b	3e488 <Mat_VarReadInfo+0x128>
   3e408:	mov	r0, r4
   3e40c:	bl	1738 <Mat_VarReadNextInfo@plt>
   3e410:	subs	r5, r0, #0
   3e414:	beq	3e454 <Mat_VarReadInfo+0xf4>
   3e418:	ldr	r0, [r5, #36]	; 0x24
   3e41c:	cmp	r0, #0
   3e420:	beq	3e434 <Mat_VarReadInfo+0xd4>
   3e424:	mov	r1, r6
   3e428:	bl	148c <strcmp@plt>
   3e42c:	cmp	r0, #0
   3e430:	beq	3e460 <Mat_VarReadInfo+0x100>
   3e434:	mov	r0, r5
   3e438:	bl	15f4 <Mat_VarFree@plt>
   3e43c:	ldr	r2, [r4, #32]
   3e440:	ldr	r3, [r4, #36]	; 0x24
   3e444:	cmp	r2, r3
   3e448:	bcc	3e408 <Mat_VarReadInfo+0xa8>
   3e44c:	mov	r5, #0
   3e450:	b	3e460 <Mat_VarReadInfo+0x100>
   3e454:	ldr	r0, [pc, #80]	; 3e4ac <Mat_VarReadInfo+0x14c>
   3e458:	add	r0, pc, r0
   3e45c:	bl	1690 <Mat_Critical@plt>
   3e460:	str	r7, [r4, #32]
   3e464:	mov	r0, r5
   3e468:	pop	{r4, r5, r6, r7, r8, pc}
   3e46c:	ldr	r0, [r4]
   3e470:	bl	15e8 <feof@plt>
   3e474:	cmp	r0, #0
   3e478:	bne	3e3f0 <Mat_VarReadInfo+0x90>
   3e47c:	ldr	r0, [pc, #44]	; 3e4b0 <Mat_VarReadInfo+0x150>
   3e480:	add	r0, pc, r0
   3e484:	bl	1690 <Mat_Critical@plt>
   3e488:	mov	r2, #0
   3e48c:	mov	r1, r7
   3e490:	ldr	r0, [r4]
   3e494:	bl	1714 <fseek@plt>
   3e498:	b	3e464 <Mat_VarReadInfo+0x104>
   3e49c:	ldr	r0, [pc, #16]	; 3e4b4 <Mat_VarReadInfo+0x154>
   3e4a0:	add	r0, pc, r0
   3e4a4:	bl	1690 <Mat_Critical@plt>
   3e4a8:	b	3e464 <Mat_VarReadInfo+0x104>
   3e4ac:	.word	0x0000232e
   3e4b0:	.word	0x00002306
   3e4b4:	.word	0x000022c5

0003e4b8 <Mat_VarRead>:
   3e4b8:	cmp	r1, #0
   3e4bc:	cmpne	r0, #0
   3e4c0:	push	{r4, r5, r6, r7, r8, lr}
   3e4c4:	moveq	r5, #1
   3e4c8:	movne	r5, #0
   3e4cc:	moveq	r5, #0
   3e4d0:	beq	3e508 <Mat_VarRead+0x50>
   3e4d4:	ldr	r3, [r0, #16]
   3e4d8:	mov	r4, r0
   3e4dc:	cmp	r3, #512	; 0x200
   3e4e0:	beq	3e544 <Mat_VarRead+0x8c>
   3e4e4:	ldr	r0, [r0]
   3e4e8:	mov	r6, r1
   3e4ec:	bl	151c <ftell@plt>
   3e4f0:	cmn	r0, #1
   3e4f4:	mov	r7, r0
   3e4f8:	bne	3e510 <Mat_VarRead+0x58>
   3e4fc:	ldr	r0, [pc, #104]	; 3e56c <Mat_VarRead+0xb4>
   3e500:	add	r0, pc, r0
   3e504:	bl	1690 <Mat_Critical@plt>
   3e508:	mov	r0, r5
   3e50c:	pop	{r4, r5, r6, r7, r8, pc}
   3e510:	mov	r1, r6
   3e514:	mov	r0, r4
   3e518:	bl	154c <Mat_VarReadInfo@plt>
   3e51c:	subs	r5, r0, #0
   3e520:	beq	3e530 <Mat_VarRead+0x78>
   3e524:	mov	r1, r5
   3e528:	mov	r0, r4
   3e52c:	bl	3be10 <ReadData>
   3e530:	mov	r2, #0
   3e534:	mov	r1, r7
   3e538:	ldr	r0, [r4]
   3e53c:	bl	1714 <fseek@plt>
   3e540:	b	3e508 <Mat_VarRead+0x50>
   3e544:	ldr	r6, [r0, #32]
   3e548:	str	r5, [r0, #32]
   3e54c:	bl	154c <Mat_VarReadInfo@plt>
   3e550:	subs	r5, r0, #0
   3e554:	beq	3e564 <Mat_VarRead+0xac>
   3e558:	mov	r1, r5
   3e55c:	mov	r0, r4
   3e560:	bl	3be10 <ReadData>
   3e564:	str	r6, [r4, #32]
   3e568:	b	3e508 <Mat_VarRead+0x50>
   3e56c:	.word	0x00002265

0003e570 <Mat_VarReadNext>:
   3e570:	ldr	r3, [r0, #16]
   3e574:	push	{r4, r5, r6, lr}
   3e578:	cmp	r3, #512	; 0x200
   3e57c:	mov	r5, r0
   3e580:	beq	3e5c4 <Mat_VarReadNext+0x54>
   3e584:	ldr	r0, [r0]
   3e588:	bl	15e8 <feof@plt>
   3e58c:	subs	r4, r0, #0
   3e590:	beq	3e5a0 <Mat_VarReadNext+0x30>
   3e594:	mov	r4, #0
   3e598:	mov	r0, r4
   3e59c:	pop	{r4, r5, r6, pc}
   3e5a0:	ldr	r0, [r5]
   3e5a4:	bl	151c <ftell@plt>
   3e5a8:	cmn	r0, #1
   3e5ac:	mov	r6, r0
   3e5b0:	bne	3e5c8 <Mat_VarReadNext+0x58>
   3e5b4:	ldr	r0, [pc, #76]	; 3e608 <Mat_VarReadNext+0x98>
   3e5b8:	add	r0, pc, r0
   3e5bc:	bl	1690 <Mat_Critical@plt>
   3e5c0:	b	3e598 <Mat_VarReadNext+0x28>
   3e5c4:	mov	r6, #0
   3e5c8:	mov	r0, r5
   3e5cc:	bl	1738 <Mat_VarReadNextInfo@plt>
   3e5d0:	subs	r4, r0, #0
   3e5d4:	beq	3e5e8 <Mat_VarReadNext+0x78>
   3e5d8:	mov	r1, r4
   3e5dc:	mov	r0, r5
   3e5e0:	bl	3be10 <ReadData>
   3e5e4:	b	3e598 <Mat_VarReadNext+0x28>
   3e5e8:	ldr	r3, [r5, #16]
   3e5ec:	cmp	r3, #512	; 0x200
   3e5f0:	beq	3e594 <Mat_VarReadNext+0x24>
   3e5f4:	mov	r2, r4
   3e5f8:	mov	r1, r6
   3e5fc:	ldr	r0, [r5]
   3e600:	bl	1714 <fseek@plt>
   3e604:	b	3e598 <Mat_VarReadNext+0x28>
   3e608:	.word	0x000021ad

0003e60c <Mat_VarWriteInfo>:
   3e60c:	ldr	r3, [r0, #16]
   3e610:	push	{r4, lr}
   3e614:	cmp	r3, #512	; 0x200
   3e618:	beq	3e638 <Mat_VarWriteInfo+0x2c>
   3e61c:	ldr	r1, [pc, #32]	; 3e644 <Mat_VarWriteInfo+0x38>
   3e620:	add	r1, pc, r1
   3e624:	ldr	r0, [pc, #28]	; 3e648 <Mat_VarWriteInfo+0x3c>
   3e628:	add	r0, pc, r0
   3e62c:	bl	1690 <Mat_Critical@plt>
   3e630:	mov	r0, #1
   3e634:	pop	{r4, pc}
   3e638:	ldr	r1, [pc, #12]	; 3e64c <Mat_VarWriteInfo+0x40>
   3e63c:	add	r1, pc, r1
   3e640:	b	3e624 <Mat_VarWriteInfo+0x18>
   3e644:	.word	0x000029e7
   3e648:	.word	0x000029ec
   3e64c:	.word	0x000029ab

0003e650 <Mat_VarWriteData>:
   3e650:	ldr	r3, [r0, #16]
   3e654:	push	{r4, lr}
   3e658:	cmp	r3, #512	; 0x200
   3e65c:	beq	3e67c <Mat_VarWriteData+0x2c>
   3e660:	ldr	r1, [pc, #32]	; 3e688 <Mat_VarWriteData+0x38>
   3e664:	add	r1, pc, r1
   3e668:	ldr	r0, [pc, #28]	; 3e68c <Mat_VarWriteData+0x3c>
   3e66c:	add	r0, pc, r0
   3e670:	bl	1690 <Mat_Critical@plt>
   3e674:	mov	r0, #1
   3e678:	pop	{r4, pc}
   3e67c:	ldr	r1, [pc, #12]	; 3e690 <Mat_VarWriteData+0x40>
   3e680:	add	r1, pc, r1
   3e684:	b	3e668 <Mat_VarWriteData+0x18>
   3e688:	.word	0x000029a3
   3e68c:	.word	0x000029a8
   3e690:	.word	0x00002967

0003e694 <Mat_VarWrite>:
   3e694:	cmp	r1, #0
   3e698:	cmpne	r0, #0
   3e69c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3e6a0:	mvneq	r5, #0
   3e6a4:	beq	3e754 <Mat_VarWrite+0xc0>
   3e6a8:	ldr	r3, [r0, #40]	; 0x28
   3e6ac:	mov	r4, r0
   3e6b0:	cmp	r3, #0
   3e6b4:	mov	r6, r1
   3e6b8:	mov	r7, r2
   3e6bc:	bne	3e6cc <Mat_VarWrite+0x38>
   3e6c0:	add	r1, sp, #8
   3e6c4:	str	r3, [r1, #-4]!
   3e6c8:	bl	160c <Mat_GetDir@plt>
   3e6cc:	ldr	r9, [r4, #36]	; 0x24
   3e6d0:	mov	r5, #0
   3e6d4:	cmp	r5, r9
   3e6d8:	bne	3e760 <Mat_VarWrite+0xcc>
   3e6dc:	ldr	r3, [r4, #16]
   3e6e0:	cmp	r3, #256	; 0x100
   3e6e4:	bne	3e7a4 <Mat_VarWrite+0x110>
   3e6e8:	mov	r2, r7
   3e6ec:	mov	r1, r6
   3e6f0:	mov	r0, r4
   3e6f4:	bl	39768 <Mat_VarWrite5>
   3e6f8:	cmp	r0, #0
   3e6fc:	mov	r5, r0
   3e700:	bne	3e754 <Mat_VarWrite+0xc0>
   3e704:	ldr	r0, [r4, #40]	; 0x28
   3e708:	cmp	r0, #0
   3e70c:	bne	3e7c8 <Mat_VarWrite+0x134>
   3e710:	mov	r0, #4
   3e714:	bl	15ac <malloc@plt>
   3e718:	cmp	r0, #0
   3e71c:	mov	r7, r0
   3e720:	beq	3e7dc <Mat_VarWrite+0x148>
   3e724:	ldr	r1, [r6, #36]	; 0x24
   3e728:	ldr	r6, [r4, #36]	; 0x24
   3e72c:	cmp	r1, #0
   3e730:	add	r3, r6, #1
   3e734:	str	r0, [r4, #40]	; 0x28
   3e738:	str	r3, [r4, #36]	; 0x24
   3e73c:	streq	r1, [r0, r6, lsl #2]
   3e740:	beq	3e754 <Mat_VarWrite+0xc0>
   3e744:	ldr	r0, [pc, #164]	; 3e7f0 <Mat_VarWrite+0x15c>
   3e748:	add	r0, pc, r0
   3e74c:	bl	1e64 <strdup_printf>
   3e750:	str	r0, [r7, r6, lsl #2]
   3e754:	mov	r0, r5
   3e758:	add	sp, sp, #12
   3e75c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3e760:	ldr	r3, [r4, #40]	; 0x28
   3e764:	ldr	r0, [r3, r5, lsl #2]
   3e768:	cmp	r0, #0
   3e76c:	beq	3e79c <Mat_VarWrite+0x108>
   3e770:	ldr	r8, [r6, #36]	; 0x24
   3e774:	mov	r1, r8
   3e778:	bl	148c <strcmp@plt>
   3e77c:	cmp	r0, #0
   3e780:	bne	3e79c <Mat_VarWrite+0x108>
   3e784:	ldr	r0, [pc, #104]	; 3e7f4 <Mat_VarWrite+0x160>
   3e788:	mov	r1, r8
   3e78c:	add	r0, pc, r0
   3e790:	bl	1690 <Mat_Critical@plt>
   3e794:	mov	r5, #1
   3e798:	b	3e754 <Mat_VarWrite+0xc0>
   3e79c:	add	r5, r5, #1
   3e7a0:	b	3e6d4 <Mat_VarWrite+0x40>
   3e7a4:	cmp	r3, #512	; 0x200
   3e7a8:	beq	3e794 <Mat_VarWrite+0x100>
   3e7ac:	cmp	r3, #16
   3e7b0:	movne	r5, #2
   3e7b4:	bne	3e754 <Mat_VarWrite+0xc0>
   3e7b8:	mov	r1, r6
   3e7bc:	mov	r0, r4
   3e7c0:	bl	3a740 <Mat_VarWrite4>
   3e7c4:	b	3e6f8 <Mat_VarWrite+0x64>
   3e7c8:	ldr	r1, [r4, #36]	; 0x24
   3e7cc:	add	r1, r1, #1
   3e7d0:	lsl	r1, r1, #2
   3e7d4:	bl	1540 <realloc@plt>
   3e7d8:	b	3e718 <Mat_VarWrite+0x84>
   3e7dc:	ldr	r0, [pc, #20]	; 3e7f8 <Mat_VarWrite+0x164>
   3e7e0:	mov	r5, #3
   3e7e4:	add	r0, pc, r0
   3e7e8:	bl	1690 <Mat_Critical@plt>
   3e7ec:	b	3e754 <Mat_VarWrite+0xc0>
   3e7f0:	.word	0x0000279b
   3e7f4:	.word	0x000028cc
   3e7f8:	.word	0x000027d8

0003e7fc <Mat_VarDelete>:
   3e7fc:	ldr	r3, [pc, #728]	; 3eadc <Mat_VarDelete+0x2e0>
   3e800:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3e804:	add	r3, pc, r3
   3e808:	mov	r4, r0
   3e80c:	ldrh	r2, [r3, #4]
   3e810:	ldr	r0, [r3]
   3e814:	ldrb	r3, [r3, #6]
   3e818:	cmp	r1, #0
   3e81c:	cmpne	r4, #0
   3e820:	str	r0, [sp]
   3e824:	strh	r2, [sp, #4]
   3e828:	strb	r3, [sp, #6]
   3e82c:	bne	3e838 <Mat_VarDelete+0x3c>
   3e830:	mov	r5, #1
   3e834:	b	3e918 <Mat_VarDelete+0x11c>
   3e838:	mov	r0, sp
   3e83c:	mov	r7, r1
   3e840:	bl	15c4 <mktemp@plt>
   3e844:	subs	r6, r0, #0
   3e848:	beq	3eacc <Mat_VarDelete+0x2d0>
   3e84c:	ldr	r2, [r4, #16]
   3e850:	cmp	r2, #16
   3e854:	beq	3e864 <Mat_VarDelete+0x68>
   3e858:	cmp	r2, #512	; 0x200
   3e85c:	moveq	r2, #512	; 0x200
   3e860:	movne	r2, #256	; 0x100
   3e864:	ldr	r1, [r4, #4]
   3e868:	mov	r0, r6
   3e86c:	bl	16c0 <Mat_CreateVer@plt>
   3e870:	subs	r5, r0, #0
   3e874:	beq	3e830 <Mat_VarDelete+0x34>
   3e878:	mov	r0, r4
   3e87c:	bl	1660 <Mat_Rewind@plt>
   3e880:	mov	sl, #1
   3e884:	mov	r0, r4
   3e888:	bl	1480 <Mat_VarReadNext@plt>
   3e88c:	subs	r8, r0, #0
   3e890:	bne	3e924 <Mat_VarDelete+0x128>
   3e894:	ldr	r7, [r5, #40]	; 0x28
   3e898:	mov	r0, r5
   3e89c:	str	r8, [r5, #40]	; 0x28
   3e8a0:	ldr	r9, [r5, #36]	; 0x24
   3e8a4:	bl	1684 <Mat_Close@plt>
   3e8a8:	cmp	sl, #0
   3e8ac:	bne	3eaa4 <Mat_VarDelete+0x2a8>
   3e8b0:	ldr	r0, [pc, #552]	; 3eae0 <Mat_VarDelete+0x2e4>
   3e8b4:	ldr	r1, [r4, #12]
   3e8b8:	add	r0, pc, r0
   3e8bc:	bl	1e64 <strdup_printf>
   3e8c0:	mov	r8, r0
   3e8c4:	ldr	r0, [r4]
   3e8c8:	cmp	r0, #0
   3e8cc:	beq	3e8d8 <Mat_VarDelete+0xdc>
   3e8d0:	bl	16a8 <fclose@plt>
   3e8d4:	str	sl, [r4]
   3e8d8:	mov	r1, r8
   3e8dc:	mov	r0, r6
   3e8e0:	bl	3bbe4 <mat_copy>
   3e8e4:	cmn	r0, #1
   3e8e8:	mov	r5, r0
   3e8ec:	bne	3e984 <Mat_VarDelete+0x188>
   3e8f0:	cmp	r7, #0
   3e8f4:	movne	r4, #0
   3e8f8:	bne	3e970 <Mat_VarDelete+0x174>
   3e8fc:	ldr	r0, [pc, #480]	; 3eae4 <Mat_VarDelete+0x2e8>
   3e900:	mov	r2, r8
   3e904:	mov	r1, r6
   3e908:	add	r0, pc, r0
   3e90c:	bl	1690 <Mat_Critical@plt>
   3e910:	mov	r0, r8
   3e914:	bl	14e0 <free@plt>
   3e918:	mov	r0, r5
   3e91c:	add	sp, sp, #8
   3e920:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e924:	mov	r1, r7
   3e928:	ldr	r0, [r8, #36]	; 0x24
   3e92c:	bl	148c <strcmp@plt>
   3e930:	subs	r9, r0, #0
   3e934:	beq	3e94c <Mat_VarDelete+0x150>
   3e938:	ldr	r2, [r8, #48]	; 0x30
   3e93c:	mov	r1, r8
   3e940:	mov	r0, r5
   3e944:	bl	1504 <Mat_VarWrite@plt>
   3e948:	mov	r9, sl
   3e94c:	mov	r0, r8
   3e950:	bl	15f4 <Mat_VarFree@plt>
   3e954:	mov	sl, r9
   3e958:	b	3e884 <Mat_VarDelete+0x88>
   3e95c:	ldr	r0, [r7, r4, lsl #2]
   3e960:	cmp	r0, #0
   3e964:	beq	3e96c <Mat_VarDelete+0x170>
   3e968:	bl	14e0 <free@plt>
   3e96c:	add	r4, r4, #1
   3e970:	cmp	r4, r9
   3e974:	bne	3e95c <Mat_VarDelete+0x160>
   3e978:	mov	r0, r7
   3e97c:	bl	14e0 <free@plt>
   3e980:	b	3e8fc <Mat_VarDelete+0x100>
   3e984:	mov	r0, r6
   3e988:	bl	16cc <remove@plt>
   3e98c:	cmn	r0, #1
   3e990:	mov	r5, r0
   3e994:	bne	3e9e0 <Mat_VarDelete+0x1e4>
   3e998:	cmp	r7, #0
   3e99c:	movne	r4, #0
   3e9a0:	bne	3e9cc <Mat_VarDelete+0x1d0>
   3e9a4:	ldr	r0, [pc, #316]	; 3eae8 <Mat_VarDelete+0x2ec>
   3e9a8:	mov	r1, r6
   3e9ac:	add	r0, pc, r0
   3e9b0:	bl	1690 <Mat_Critical@plt>
   3e9b4:	b	3e910 <Mat_VarDelete+0x114>
   3e9b8:	ldr	r0, [r7, r4, lsl #2]
   3e9bc:	cmp	r0, #0
   3e9c0:	beq	3e9c8 <Mat_VarDelete+0x1cc>
   3e9c4:	bl	14e0 <free@plt>
   3e9c8:	add	r4, r4, #1
   3e9cc:	cmp	r4, r9
   3e9d0:	bne	3e9b8 <Mat_VarDelete+0x1bc>
   3e9d4:	mov	r0, r7
   3e9d8:	bl	14e0 <free@plt>
   3e9dc:	b	3e9a4 <Mat_VarDelete+0x1a8>
   3e9e0:	ldr	r1, [r4, #24]
   3e9e4:	mov	r0, r8
   3e9e8:	bl	14a4 <Mat_Open@plt>
   3e9ec:	subs	sl, r0, #0
   3e9f0:	beq	3ea94 <Mat_VarDelete+0x298>
   3e9f4:	ldr	r0, [r4, #4]
   3e9f8:	cmp	r0, #0
   3e9fc:	beq	3ea04 <Mat_VarDelete+0x208>
   3ea00:	bl	14e0 <free@plt>
   3ea04:	ldr	r0, [r4, #8]
   3ea08:	cmp	r0, #0
   3ea0c:	beq	3ea14 <Mat_VarDelete+0x218>
   3ea10:	bl	14e0 <free@plt>
   3ea14:	ldr	r0, [r4, #12]
   3ea18:	cmp	r0, #0
   3ea1c:	beq	3ea24 <Mat_VarDelete+0x228>
   3ea20:	bl	14e0 <free@plt>
   3ea24:	ldr	r3, [r4, #40]	; 0x28
   3ea28:	cmp	r3, #0
   3ea2c:	movne	r6, #0
   3ea30:	bne	3ea7c <Mat_VarDelete+0x280>
   3ea34:	mov	r3, sl
   3ea38:	mov	r2, r4
   3ea3c:	add	r1, sl, #44	; 0x2c
   3ea40:	ldr	r0, [r3], #4
   3ea44:	cmp	r3, r1
   3ea48:	str	r0, [r2], #4
   3ea4c:	bne	3ea40 <Mat_VarDelete+0x244>
   3ea50:	mov	r0, sl
   3ea54:	bl	14e0 <free@plt>
   3ea58:	str	r9, [r4, #36]	; 0x24
   3ea5c:	str	r7, [r4, #40]	; 0x28
   3ea60:	b	3e910 <Mat_VarDelete+0x114>
   3ea64:	ldr	r3, [r4, #40]	; 0x28
   3ea68:	ldr	r0, [r3, r6, lsl #2]
   3ea6c:	cmp	r0, #0
   3ea70:	beq	3ea78 <Mat_VarDelete+0x27c>
   3ea74:	bl	14e0 <free@plt>
   3ea78:	add	r6, r6, #1
   3ea7c:	ldr	r3, [r4, #36]	; 0x24
   3ea80:	cmp	r6, r3
   3ea84:	bcc	3ea64 <Mat_VarDelete+0x268>
   3ea88:	ldr	r0, [r4, #40]	; 0x28
   3ea8c:	bl	14e0 <free@plt>
   3ea90:	b	3ea34 <Mat_VarDelete+0x238>
   3ea94:	ldr	r0, [pc, #80]	; 3eaec <Mat_VarDelete+0x2f0>
   3ea98:	mov	r1, r8
   3ea9c:	add	r0, pc, r0
   3eaa0:	b	3e9b0 <Mat_VarDelete+0x1b4>
   3eaa4:	mov	r0, r6
   3eaa8:	bl	16cc <remove@plt>
   3eaac:	cmn	r0, #1
   3eab0:	mov	r5, r0
   3eab4:	bne	3e918 <Mat_VarDelete+0x11c>
   3eab8:	ldr	r0, [pc, #48]	; 3eaf0 <Mat_VarDelete+0x2f4>
   3eabc:	mov	r1, r6
   3eac0:	add	r0, pc, r0
   3eac4:	bl	1690 <Mat_Critical@plt>
   3eac8:	b	3e918 <Mat_VarDelete+0x11c>
   3eacc:	ldr	r0, [pc, #32]	; 3eaf4 <Mat_VarDelete+0x2f8>
   3ead0:	add	r0, pc, r0
   3ead4:	bl	1690 <Mat_Critical@plt>
   3ead8:	b	3e830 <Mat_VarDelete+0x34>
   3eadc:	.word	0x000028e6
   3eae0:	.word	0x0000262b
   3eae4:	.word	0x0000276c
   3eae8:	.word	0x000026ec
   3eaec:	.word	0x00002615
   3eaf0:	.word	0x000025d8
   3eaf4:	.word	0x000025f8

0003eaf8 <Mat_VarWriteAppend>:
   3eaf8:	cmp	r1, #0
   3eafc:	cmpne	r0, #0
   3eb00:	push	{r0, r1, r4, lr}
   3eb04:	mvneq	r0, #0
   3eb08:	beq	3eb38 <Mat_VarWriteAppend+0x40>
   3eb0c:	ldr	r3, [r0, #40]	; 0x28
   3eb10:	mov	r4, r0
   3eb14:	cmp	r3, #0
   3eb18:	bne	3eb28 <Mat_VarWriteAppend+0x30>
   3eb1c:	add	r1, sp, #8
   3eb20:	str	r3, [r1, #-4]!
   3eb24:	bl	160c <Mat_GetDir@plt>
   3eb28:	ldr	r0, [r4, #16]
   3eb2c:	cmp	r0, #512	; 0x200
   3eb30:	moveq	r0, #1
   3eb34:	movne	r0, #2
   3eb38:	add	sp, sp, #8
   3eb3c:	pop	{r4, pc}

0003eb40 <Mat_VarGetCell>:
   3eb40:	push	{r0, r1, r2, r4, r5, lr}
   3eb44:	mov	r3, #1
   3eb48:	subs	r5, r0, #0
   3eb4c:	str	r3, [sp, #4]
   3eb50:	bne	3eb60 <Mat_VarGetCell+0x20>
   3eb54:	mov	r0, #0
   3eb58:	add	sp, sp, #12
   3eb5c:	pop	{r4, r5, pc}
   3eb60:	mov	r4, r1
   3eb64:	add	r1, sp, #4
   3eb68:	bl	3bee0 <SafeMulDims>
   3eb6c:	cmp	r4, #0
   3eb70:	blt	3eb54 <Mat_VarGetCell+0x14>
   3eb74:	ldr	r3, [sp, #4]
   3eb78:	cmp	r4, r3
   3eb7c:	bcs	3eb54 <Mat_VarGetCell+0x14>
   3eb80:	ldr	r3, [r5, #40]	; 0x28
   3eb84:	ldr	r0, [r3, r4, lsl #2]
   3eb88:	b	3eb58 <Mat_VarGetCell+0x18>

0003eb8c <Mat_VarGetCells>:
   3eb8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eb90:	sub	sp, sp, #140	; 0x8c
   3eb94:	add	r7, sp, #16
   3eb98:	str	r0, [sp, #4]
   3eb9c:	mov	r6, r1
   3eba0:	mov	r9, r2
   3eba4:	mov	r1, #0
   3eba8:	mov	r2, #40	; 0x28
   3ebac:	mov	r0, r7
   3ebb0:	add	sl, sp, #56	; 0x38
   3ebb4:	mov	r5, r3
   3ebb8:	bl	166c <memset@plt>
   3ebbc:	mov	r2, #40	; 0x28
   3ebc0:	mov	r1, #0
   3ebc4:	mov	r0, sl
   3ebc8:	bl	166c <memset@plt>
   3ebcc:	add	r3, sp, #96	; 0x60
   3ebd0:	mov	r0, r3
   3ebd4:	mov	r2, #40	; 0x28
   3ebd8:	mov	r1, #0
   3ebdc:	str	r3, [sp, #8]
   3ebe0:	bl	166c <memset@plt>
   3ebe4:	ldr	r3, [sp, #4]
   3ebe8:	cmp	r6, #0
   3ebec:	cmpne	r3, #0
   3ebf0:	moveq	r3, #1
   3ebf4:	movne	r3, #0
   3ebf8:	moveq	r0, #0
   3ebfc:	beq	3ed80 <Mat_VarGetCells+0x1f4>
   3ec00:	cmp	r5, #0
   3ec04:	cmpne	r9, #0
   3ec08:	moveq	r0, #1
   3ec0c:	movne	r0, #0
   3ec10:	moveq	r0, r3
   3ec14:	beq	3ed80 <Mat_VarGetCells+0x1f4>
   3ec18:	ldr	r3, [sp, #4]
   3ec1c:	ldr	fp, [r3, #4]
   3ec20:	cmp	fp, #9
   3ec24:	bgt	3ed80 <Mat_VarGetCells+0x1f4>
   3ec28:	ldr	r0, [r3, #32]
   3ec2c:	ldr	r2, [sp, #8]
   3ec30:	ldr	r4, [r6]
   3ec34:	ldr	r3, [r0]
   3ec38:	str	r4, [sp, #16]
   3ec3c:	str	r3, [sp, #96]	; 0x60
   3ec40:	ldr	r3, [r5]
   3ec44:	str	r3, [sp]
   3ec48:	mov	r3, #1
   3ec4c:	cmp	r3, fp
   3ec50:	blt	3ec88 <Mat_VarGetCells+0xfc>
   3ec54:	ldr	r3, [sp]
   3ec58:	lsl	r0, r3, #2
   3ec5c:	bl	15ac <malloc@plt>
   3ec60:	mov	r3, #0
   3ec64:	sub	r2, fp, #1
   3ec68:	str	r2, [sp, #12]
   3ec6c:	ldr	r2, [sp]
   3ec70:	cmp	r3, r2
   3ec74:	bge	3ed80 <Mat_VarGetCells+0x1f4>
   3ec78:	ldr	lr, [r5]
   3ec7c:	add	r1, r0, r3, lsl #2
   3ec80:	mov	r2, #0
   3ec84:	b	3ecd8 <Mat_VarGetCells+0x14c>
   3ec88:	ldr	lr, [r2]
   3ec8c:	ldr	r1, [r0, r3, lsl #2]
   3ec90:	ldr	r8, [sp]
   3ec94:	ldr	ip, [r6, r3, lsl #2]
   3ec98:	mul	r1, lr, r1
   3ec9c:	str	ip, [r7, r3, lsl #2]
   3eca0:	str	r1, [r2, #4]!
   3eca4:	ldr	r1, [r5, r3, lsl #2]
   3eca8:	mla	r4, lr, ip, r4
   3ecac:	mul	r1, r1, r8
   3ecb0:	add	r3, r3, #1
   3ecb4:	str	r1, [sp]
   3ecb8:	b	3ec4c <Mat_VarGetCells+0xc0>
   3ecbc:	ldr	ip, [sp, #4]
   3ecc0:	ldr	ip, [ip, #40]	; 0x28
   3ecc4:	ldr	ip, [ip, r4, lsl #2]
   3ecc8:	str	ip, [r1, r2, lsl #2]
   3eccc:	ldr	ip, [r9]
   3ecd0:	add	r2, r2, #1
   3ecd4:	add	r4, r4, ip
   3ecd8:	cmp	r2, lr
   3ecdc:	blt	3ecbc <Mat_VarGetCells+0x130>
   3ece0:	ldr	r2, [sp, #60]	; 0x3c
   3ece4:	ldr	r1, [r9, #4]
   3ece8:	add	r2, r2, #1
   3ecec:	str	r2, [sp, #60]	; 0x3c
   3ecf0:	ldr	r2, [sp, #20]
   3ecf4:	ldr	r4, [r6]
   3ecf8:	add	r2, r2, r1
   3ecfc:	str	r2, [sp, #20]
   3ed00:	mov	r1, #8
   3ed04:	mov	r2, #1
   3ed08:	str	r4, [sp, #16]
   3ed0c:	cmp	r2, fp
   3ed10:	addge	r3, r3, lr
   3ed14:	bge	3ec6c <Mat_VarGetCells+0xe0>
   3ed18:	ldr	ip, [r5, r2, lsl #2]
   3ed1c:	ldr	r8, [sl, r2, lsl #2]
   3ed20:	cmp	r8, ip
   3ed24:	bne	3ed60 <Mat_VarGetCells+0x1d4>
   3ed28:	mov	ip, #0
   3ed2c:	str	ip, [sl, r2, lsl #2]
   3ed30:	ldr	ip, [r6, r2, lsl #2]
   3ed34:	str	ip, [r7, r2, lsl #2]
   3ed38:	ldr	ip, [sp, #12]
   3ed3c:	cmp	r2, ip
   3ed40:	bge	3ed60 <Mat_VarGetCells+0x1d4>
   3ed44:	ldr	ip, [sl, r1]
   3ed48:	ldr	r8, [r9, r1]
   3ed4c:	add	ip, ip, #1
   3ed50:	str	ip, [sl, r1]
   3ed54:	ldr	ip, [r7, r1]
   3ed58:	add	ip, ip, r8
   3ed5c:	str	ip, [r7, r1]
   3ed60:	ldr	ip, [sp, #8]
   3ed64:	ldr	r8, [r7, r2, lsl #2]
   3ed68:	add	ip, ip, r1
   3ed6c:	add	r2, r2, #1
   3ed70:	ldr	ip, [ip, #-8]
   3ed74:	add	r1, r1, #4
   3ed78:	mla	r4, r8, ip, r4
   3ed7c:	b	3ed0c <Mat_VarGetCells+0x180>
   3ed80:	add	sp, sp, #140	; 0x8c
   3ed84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003ed88 <Mat_VarGetCellsLinear>:
   3ed88:	cmp	r0, #0
   3ed8c:	bxeq	lr
   3ed90:	push	{r4, r5, r6, r7, r8, lr}
   3ed94:	mov	r5, r2
   3ed98:	mov	r4, r1
   3ed9c:	mov	r7, r0
   3eda0:	lsl	r0, r3, #2
   3eda4:	mov	r6, r3
   3eda8:	lsl	r5, r5, #2
   3edac:	bl	15ac <malloc@plt>
   3edb0:	lsl	r1, r4, #2
   3edb4:	mov	r3, #0
   3edb8:	cmp	r3, r6
   3edbc:	blt	3edc4 <Mat_VarGetCellsLinear+0x3c>
   3edc0:	pop	{r4, r5, r6, r7, r8, pc}
   3edc4:	ldr	r2, [r7, #40]	; 0x28
   3edc8:	ldr	r2, [r2, r1]
   3edcc:	add	r1, r1, r5
   3edd0:	str	r2, [r0, r3, lsl #2]
   3edd4:	add	r3, r3, #1
   3edd8:	b	3edb8 <Mat_VarGetCellsLinear+0x30>

0003eddc <Mat_VarSetCell>:
   3eddc:	mov	r3, #1
   3ede0:	push	{r0, r1, r4, r5, r6, lr}
   3ede4:	str	r3, [sp, #4]
   3ede8:	subs	r3, r0, #0
   3edec:	bne	3edfc <Mat_VarSetCell+0x20>
   3edf0:	mov	r0, #0
   3edf4:	add	sp, sp, #8
   3edf8:	pop	{r4, r5, r6, pc}
   3edfc:	ldr	ip, [r3, #4]
   3ee00:	cmp	ip, #0
   3ee04:	ble	3edf0 <Mat_VarSetCell+0x14>
   3ee08:	mov	r5, r3
   3ee0c:	mov	r4, r1
   3ee10:	add	r1, sp, #4
   3ee14:	mov	r6, r2
   3ee18:	bl	3bee0 <SafeMulDims>
   3ee1c:	cmp	r4, #0
   3ee20:	ldr	r3, [r5, #40]	; 0x28
   3ee24:	blt	3edf0 <Mat_VarSetCell+0x14>
   3ee28:	ldr	r2, [sp, #4]
   3ee2c:	cmp	r4, r2
   3ee30:	bcs	3edf0 <Mat_VarSetCell+0x14>
   3ee34:	ldr	r0, [r3, r4, lsl #2]
   3ee38:	str	r6, [r3, r4, lsl #2]
   3ee3c:	b	3edf4 <Mat_VarSetCell+0x18>

0003ee40 <Mat_VarCreateStruct>:
   3ee40:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3ee44:	subs	r8, r2, #0
   3ee48:	ldr	r5, [sp, #40]	; 0x28
   3ee4c:	bne	3ee60 <Mat_VarCreateStruct+0x20>
   3ee50:	mov	r4, #0
   3ee54:	mov	r0, r4
   3ee58:	add	sp, sp, #8
   3ee5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ee60:	mov	r9, r3
   3ee64:	mov	r6, r1
   3ee68:	mov	r7, r0
   3ee6c:	bl	1570 <Mat_VarCalloc@plt>
   3ee70:	subs	r4, r0, #0
   3ee74:	beq	3ee50 <Mat_VarCreateStruct+0x10>
   3ee78:	mov	r3, #0
   3ee7c:	cmp	r7, r3
   3ee80:	str	r3, [r4, #48]	; 0x30
   3ee84:	beq	3ee94 <Mat_VarCreateStruct+0x54>
   3ee88:	mov	r0, r7
   3ee8c:	bl	1534 <strdup@plt>
   3ee90:	str	r0, [r4, #36]	; 0x24
   3ee94:	str	r6, [r4, #4]
   3ee98:	lsl	r0, r6, #2
   3ee9c:	bl	15ac <malloc@plt>
   3eea0:	mov	r7, #1
   3eea4:	mov	r1, #0
   3eea8:	str	r0, [r4, #32]
   3eeac:	ldr	r3, [r4, #4]
   3eeb0:	cmp	r1, r3
   3eeb4:	blt	3ef48 <Mat_VarCreateStruct+0x108>
   3eeb8:	mov	r3, #2
   3eebc:	str	r3, [r4, #16]
   3eec0:	mov	r3, #22
   3eec4:	str	r3, [r4, #8]
   3eec8:	cmp	r5, #0
   3eecc:	mov	r3, #4
   3eed0:	str	r3, [r4, #12]
   3eed4:	beq	3ee54 <Mat_VarCreateStruct+0x14>
   3eed8:	ldr	r6, [r4, #52]	; 0x34
   3eedc:	lsl	r0, r5, #2
   3eee0:	str	r5, [r6, #4]
   3eee4:	bl	15ac <malloc@plt>
   3eee8:	cmp	r0, #0
   3eeec:	str	r0, [r6, #8]
   3eef0:	mov	r8, r0
   3eef4:	movne	r6, #0
   3eef8:	bne	3ef74 <Mat_VarCreateStruct+0x134>
   3eefc:	mov	r0, r4
   3ef00:	bl	15f4 <Mat_VarFree@plt>
   3ef04:	mov	r4, r8
   3ef08:	cmp	r4, #0
   3ef0c:	cmpne	r7, #0
   3ef10:	beq	3ee54 <Mat_VarCreateStruct+0x14>
   3ef14:	mov	r2, r5
   3ef18:	mov	r1, r7
   3ef1c:	add	r0, sp, #4
   3ef20:	bl	3bf40 <SafeMul>
   3ef24:	ldr	r2, [r4, #12]
   3ef28:	ldr	r1, [sp, #4]
   3ef2c:	mov	r0, r4
   3ef30:	bl	3bf40 <SafeMul>
   3ef34:	ldr	r1, [r4, #12]
   3ef38:	ldr	r0, [sp, #4]
   3ef3c:	bl	1468 <calloc@plt>
   3ef40:	str	r0, [r4, #40]	; 0x28
   3ef44:	b	3ee54 <Mat_VarCreateStruct+0x14>
   3ef48:	ldr	r3, [r8, r1, lsl #2]
   3ef4c:	str	r3, [r0, r1, lsl #2]
   3ef50:	mul	r7, r3, r7
   3ef54:	add	r1, r1, #1
   3ef58:	b	3eeac <Mat_VarCreateStruct+0x6c>
   3ef5c:	mov	r0, sl
   3ef60:	bl	1534 <strdup@plt>
   3ef64:	str	r0, [r8, r6, lsl #2]
   3ef68:	add	r6, r6, #1
   3ef6c:	cmp	r5, r6
   3ef70:	beq	3ef08 <Mat_VarCreateStruct+0xc8>
   3ef74:	ldr	sl, [r9, r6, lsl #2]
   3ef78:	cmp	sl, #0
   3ef7c:	bne	3ef5c <Mat_VarCreateStruct+0x11c>
   3ef80:	mov	r0, r4
   3ef84:	bl	15f4 <Mat_VarFree@plt>
   3ef88:	mov	r4, sl
   3ef8c:	b	3ef08 <Mat_VarCreateStruct+0xc8>

0003ef90 <Mat_VarAddStructField>:
   3ef90:	cmp	r1, #0
   3ef94:	cmpne	r0, #0
   3ef98:	mov	r3, #1
   3ef9c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3efa0:	moveq	r5, #1
   3efa4:	str	r3, [sp]
   3efa8:	movne	r5, #0
   3efac:	bne	3efbc <Mat_VarAddStructField+0x2c>
   3efb0:	mvn	r0, #0
   3efb4:	add	sp, sp, #8
   3efb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3efbc:	mov	r4, r0
   3efc0:	mov	r6, r1
   3efc4:	mov	r1, sp
   3efc8:	bl	3bee0 <SafeMulDims>
   3efcc:	ldr	r3, [r4, #52]	; 0x34
   3efd0:	ldr	r7, [r3, #4]
   3efd4:	ldr	r0, [r3, #8]
   3efd8:	add	sl, r7, #1
   3efdc:	str	sl, [r3, #4]
   3efe0:	lsl	r8, sl, #2
   3efe4:	mov	r1, r8
   3efe8:	bl	1540 <realloc@plt>
   3efec:	subs	r9, r0, #0
   3eff0:	beq	3efb0 <Mat_VarAddStructField+0x20>
   3eff4:	ldr	r3, [r4, #52]	; 0x34
   3eff8:	mov	r0, r6
   3effc:	str	r9, [r3, #8]
   3f000:	bl	1534 <strdup@plt>
   3f004:	add	r9, r9, r8
   3f008:	mov	r2, sl
   3f00c:	ldr	r1, [sp]
   3f010:	str	r0, [r9, #-4]
   3f014:	add	r0, sp, #4
   3f018:	bl	3bf40 <SafeMul>
   3f01c:	mov	r2, #4
   3f020:	ldr	r1, [sp, #4]
   3f024:	mov	r0, r4
   3f028:	bl	3bf40 <SafeMul>
   3f02c:	ldr	r0, [r4]
   3f030:	bl	15ac <malloc@plt>
   3f034:	subs	r6, r0, #0
   3f038:	streq	r6, [r4]
   3f03c:	beq	3efb0 <Mat_VarAddStructField+0x20>
   3f040:	ldr	r0, [r4, #40]	; 0x28
   3f044:	ldr	lr, [sp]
   3f048:	lsl	r9, r7, #2
   3f04c:	mov	ip, r0
   3f050:	mov	r1, r6
   3f054:	mov	r3, r5
   3f058:	cmp	r3, lr
   3f05c:	beq	3f090 <Mat_VarAddStructField+0x100>
   3f060:	mov	r2, #0
   3f064:	b	3f074 <Mat_VarAddStructField+0xe4>
   3f068:	ldr	sl, [ip, r2, lsl #2]
   3f06c:	str	sl, [r1, r2, lsl #2]
   3f070:	add	r2, r2, #1
   3f074:	cmp	r2, r7
   3f078:	bne	3f068 <Mat_VarAddStructField+0xd8>
   3f07c:	str	r5, [r1, r7, lsl #2]
   3f080:	add	r3, r3, #1
   3f084:	add	ip, ip, r9
   3f088:	add	r1, r1, r8
   3f08c:	b	3f058 <Mat_VarAddStructField+0xc8>
   3f090:	bl	14e0 <free@plt>
   3f094:	str	r6, [r4, #40]	; 0x28
   3f098:	mov	r0, #0
   3f09c:	b	3efb4 <Mat_VarAddStructField+0x24>

0003f0a0 <Mat_VarGetNumberOfFields>:
   3f0a0:	cmp	r0, #0
   3f0a4:	bxeq	lr
   3f0a8:	ldr	r3, [r0, #16]
   3f0ac:	cmp	r3, #2
   3f0b0:	bne	3f0c4 <Mat_VarGetNumberOfFields+0x24>
   3f0b4:	ldr	r0, [r0, #52]	; 0x34
   3f0b8:	cmp	r0, #0
   3f0bc:	ldrne	r0, [r0, #4]
   3f0c0:	bx	lr
   3f0c4:	mov	r0, #0
   3f0c8:	bx	lr

0003f0cc <Mat_VarGetStructFieldnames>:
   3f0cc:	cmp	r0, #0
   3f0d0:	bxeq	lr
   3f0d4:	ldr	r3, [r0, #16]
   3f0d8:	cmp	r3, #2
   3f0dc:	bne	3f0f0 <Mat_VarGetStructFieldnames+0x24>
   3f0e0:	ldr	r0, [r0, #52]	; 0x34
   3f0e4:	cmp	r0, #0
   3f0e8:	ldrne	r0, [r0, #8]
   3f0ec:	bx	lr
   3f0f0:	mov	r0, #0
   3f0f4:	bx	lr

0003f0f8 <Mat_VarGetStructFieldByIndex>:
   3f0f8:	mov	r3, #1
   3f0fc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3f100:	str	r3, [sp, #4]
   3f104:	subs	r3, r0, #0
   3f108:	bne	3f118 <Mat_VarGetStructFieldByIndex+0x20>
   3f10c:	mov	r0, #0
   3f110:	add	sp, sp, #12
   3f114:	pop	{r4, r5, r6, r7, pc}
   3f118:	ldr	ip, [r3, #16]
   3f11c:	cmp	ip, #2
   3f120:	bne	3f10c <Mat_VarGetStructFieldByIndex+0x14>
   3f124:	ldr	ip, [r3, #12]
   3f128:	cmp	ip, #0
   3f12c:	beq	3f10c <Mat_VarGetStructFieldByIndex+0x14>
   3f130:	mov	r6, r1
   3f134:	add	r1, sp, #4
   3f138:	mov	r7, r2
   3f13c:	mov	r5, r3
   3f140:	bl	3bee0 <SafeMulDims>
   3f144:	ldr	r2, [sp, #4]
   3f148:	ldr	r3, [r5, #52]	; 0x34
   3f14c:	adds	r4, r2, #0
   3f150:	movne	r4, #1
   3f154:	cmp	r2, r7
   3f158:	movhi	r4, #0
   3f15c:	cmp	r4, #0
   3f160:	ldr	r3, [r3, #4]
   3f164:	beq	3f178 <Mat_VarGetStructFieldByIndex+0x80>
   3f168:	ldr	r0, [pc, #48]	; 3f1a0 <Mat_VarGetStructFieldByIndex+0xa8>
   3f16c:	add	r0, pc, r0
   3f170:	bl	1690 <Mat_Critical@plt>
   3f174:	b	3f10c <Mat_VarGetStructFieldByIndex+0x14>
   3f178:	cmp	r3, #0
   3f17c:	beq	3f10c <Mat_VarGetStructFieldByIndex+0x14>
   3f180:	cmp	r3, r6
   3f184:	ldrcc	r0, [pc, #24]	; 3f1a4 <Mat_VarGetStructFieldByIndex+0xac>
   3f188:	addcc	r0, pc, r0
   3f18c:	bcc	3f170 <Mat_VarGetStructFieldByIndex+0x78>
   3f190:	mla	r3, r7, r3, r6
   3f194:	ldr	r2, [r5, #40]	; 0x28
   3f198:	ldr	r0, [r2, r3, lsl #2]
   3f19c:	b	3f110 <Mat_VarGetStructFieldByIndex+0x18>
   3f1a0:	.word	0x0000228c
   3f1a4:	.word	0x000022a5

0003f1a8 <Mat_VarGetStructFieldByName>:
   3f1a8:	mov	r3, #1
   3f1ac:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3f1b0:	str	r3, [sp, #4]
   3f1b4:	subs	r3, r0, #0
   3f1b8:	bne	3f1c8 <Mat_VarGetStructFieldByName+0x20>
   3f1bc:	mov	r0, #0
   3f1c0:	add	sp, sp, #12
   3f1c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3f1c8:	ldr	ip, [r3, #16]
   3f1cc:	cmp	ip, #2
   3f1d0:	bne	3f1bc <Mat_VarGetStructFieldByName+0x14>
   3f1d4:	ldr	ip, [r3, #12]
   3f1d8:	cmp	ip, #0
   3f1dc:	beq	3f1bc <Mat_VarGetStructFieldByName+0x14>
   3f1e0:	mov	r8, r3
   3f1e4:	mov	r7, r1
   3f1e8:	add	r1, sp, #4
   3f1ec:	mov	r6, r2
   3f1f0:	bl	3bee0 <SafeMulDims>
   3f1f4:	ldr	r9, [r8, #52]	; 0x34
   3f1f8:	mov	r4, #0
   3f1fc:	ldr	r5, [r9, #4]
   3f200:	cmp	r4, r5
   3f204:	blt	3f228 <Mat_VarGetStructFieldByName+0x80>
   3f208:	mvn	r4, #0
   3f20c:	ldr	r3, [sp, #4]
   3f210:	cmp	r3, r6
   3f214:	bhi	3f248 <Mat_VarGetStructFieldByName+0xa0>
   3f218:	ldr	r0, [pc, #64]	; 3f260 <Mat_VarGetStructFieldByName+0xb8>
   3f21c:	add	r0, pc, r0
   3f220:	bl	1690 <Mat_Critical@plt>
   3f224:	b	3f1bc <Mat_VarGetStructFieldByName+0x14>
   3f228:	ldr	r3, [r9, #8]
   3f22c:	mov	r1, r7
   3f230:	ldr	r0, [r3, r4, lsl #2]
   3f234:	bl	148c <strcmp@plt>
   3f238:	cmp	r0, #0
   3f23c:	beq	3f20c <Mat_VarGetStructFieldByName+0x64>
   3f240:	add	r4, r4, #1
   3f244:	b	3f200 <Mat_VarGetStructFieldByName+0x58>
   3f248:	cmp	r4, #0
   3f24c:	blt	3f1bc <Mat_VarGetStructFieldByName+0x14>
   3f250:	mla	r4, r6, r5, r4
   3f254:	ldr	r3, [r8, #40]	; 0x28
   3f258:	ldr	r0, [r3, r4, lsl #2]
   3f25c:	b	3f1c0 <Mat_VarGetStructFieldByName+0x18>
   3f260:	.word	0x000021dc

0003f264 <Mat_VarGetStructField>:
   3f264:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   3f268:	mov	r7, r1
   3f26c:	add	r1, sp, #8
   3f270:	mov	r4, #1
   3f274:	mov	r5, r3
   3f278:	str	r4, [r1, #-4]!
   3f27c:	mov	r6, r0
   3f280:	mov	r8, r2
   3f284:	bl	3bee0 <SafeMulDims>
   3f288:	cmp	r5, #0
   3f28c:	blt	3f2b8 <Mat_VarGetStructField+0x54>
   3f290:	ldr	r3, [r6, #52]	; 0x34
   3f294:	ldr	r0, [r3, #4]
   3f298:	ldr	r3, [sp, #4]
   3f29c:	cmp	r3, #0
   3f2a0:	beq	3f2ac <Mat_VarGetStructField+0x48>
   3f2a4:	cmp	r3, r5
   3f2a8:	bls	3f2b8 <Mat_VarGetStructField+0x54>
   3f2ac:	cmp	r0, #0
   3f2b0:	movgt	r4, #0
   3f2b4:	movle	r4, #1
   3f2b8:	eor	r4, r4, #1
   3f2bc:	cmp	r8, #2
   3f2c0:	movne	r3, #0
   3f2c4:	andeq	r3, r4, #1
   3f2c8:	cmp	r3, #0
   3f2cc:	beq	3f2f4 <Mat_VarGetStructField+0x90>
   3f2d0:	ldr	r0, [r7]
   3f2d4:	cmp	r0, #0
   3f2d8:	beq	3f2ec <Mat_VarGetStructField+0x88>
   3f2dc:	sub	r1, r0, #1
   3f2e0:	mov	r2, r5
   3f2e4:	mov	r0, r6
   3f2e8:	bl	16fc <Mat_VarGetStructFieldByIndex@plt>
   3f2ec:	add	sp, sp, #8
   3f2f0:	pop	{r4, r5, r6, r7, r8, pc}
   3f2f4:	cmp	r8, #1
   3f2f8:	movne	r0, #0
   3f2fc:	andeq	r0, r4, #1
   3f300:	cmp	r0, #0
   3f304:	beq	3f2ec <Mat_VarGetStructField+0x88>
   3f308:	mov	r2, r5
   3f30c:	mov	r1, r7
   3f310:	mov	r0, r6
   3f314:	bl	16e4 <Mat_VarGetStructFieldByName@plt>
   3f318:	b	3f2ec <Mat_VarGetStructField+0x88>

0003f31c <Mat_VarGetStructs>:
   3f31c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f320:	sub	sp, sp, #164	; 0xa4
   3f324:	add	r8, sp, #40	; 0x28
   3f328:	mov	r6, r0
   3f32c:	mov	r7, r1
   3f330:	mov	r9, r2
   3f334:	mov	r1, #0
   3f338:	mov	r2, #40	; 0x28
   3f33c:	mov	r0, r8
   3f340:	mov	fp, r3
   3f344:	bl	166c <memset@plt>
   3f348:	add	r3, sp, #80	; 0x50
   3f34c:	mov	r2, #40	; 0x28
   3f350:	mov	r1, #0
   3f354:	mov	r0, r3
   3f358:	str	r3, [sp, #8]
   3f35c:	bl	166c <memset@plt>
   3f360:	add	r3, sp, #120	; 0x78
   3f364:	mov	r2, #40	; 0x28
   3f368:	mov	r1, #0
   3f36c:	mov	r0, r3
   3f370:	str	r3, [sp, #28]
   3f374:	bl	166c <memset@plt>
   3f378:	cmp	r7, #0
   3f37c:	cmpne	r6, #0
   3f380:	moveq	r4, #1
   3f384:	movne	r4, #0
   3f388:	beq	3f45c <Mat_VarGetStructs+0x140>
   3f38c:	cmp	fp, #0
   3f390:	cmpne	r9, #0
   3f394:	moveq	r1, #1
   3f398:	movne	r1, #0
   3f39c:	beq	3f460 <Mat_VarGetStructs+0x144>
   3f3a0:	ldr	r3, [r6, #4]
   3f3a4:	cmp	r3, #9
   3f3a8:	bgt	3f61c <Mat_VarGetStructs+0x300>
   3f3ac:	ldr	r3, [r6, #16]
   3f3b0:	cmp	r3, #2
   3f3b4:	bne	3f61c <Mat_VarGetStructs+0x300>
   3f3b8:	mov	r0, r6
   3f3bc:	bl	172c <Mat_VarDuplicate@plt>
   3f3c0:	ldr	r3, [sp, #200]	; 0xc8
   3f3c4:	ldr	r2, [sp, #28]
   3f3c8:	cmp	r3, #0
   3f3cc:	moveq	r3, #1
   3f3d0:	streq	r3, [r0, #44]	; 0x2c
   3f3d4:	ldr	r3, [r6, #52]	; 0x34
   3f3d8:	mov	r4, r0
   3f3dc:	ldr	r0, [r6, #32]
   3f3e0:	ldr	r3, [r3, #4]
   3f3e4:	ldr	ip, [r4, #32]
   3f3e8:	str	r3, [sp, #4]
   3f3ec:	ldr	r3, [r0]
   3f3f0:	ldr	r5, [r7]
   3f3f4:	str	r3, [sp, #120]	; 0x78
   3f3f8:	ldr	r3, [fp]
   3f3fc:	str	r3, [sp]
   3f400:	str	r3, [ip]
   3f404:	ldr	r3, [r7]
   3f408:	str	r3, [sp, #40]	; 0x28
   3f40c:	mov	r3, #1
   3f410:	ldr	r1, [r6, #4]
   3f414:	cmp	r3, r1
   3f418:	blt	3f46c <Mat_VarGetStructs+0x150>
   3f41c:	ldr	r3, [sp, #4]
   3f420:	ldr	r2, [sp]
   3f424:	mul	r5, r3, r5
   3f428:	lsl	r3, r3, #2
   3f42c:	str	r3, [sp, #24]
   3f430:	mul	r0, r3, r2
   3f434:	str	r0, [r4]
   3f438:	bl	15ac <malloc@plt>
   3f43c:	cmp	r0, #0
   3f440:	mov	r3, r0
   3f444:	str	r0, [sp, #16]
   3f448:	str	r0, [r4, #40]	; 0x28
   3f44c:	movne	r3, #0
   3f450:	bne	3f57c <Mat_VarGetStructs+0x260>
   3f454:	mov	r0, r4
   3f458:	bl	15f4 <Mat_VarFree@plt>
   3f45c:	mov	r4, #0
   3f460:	mov	r0, r4
   3f464:	add	sp, sp, #164	; 0xa4
   3f468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f46c:	ldr	r1, [r7, r3, lsl #2]
   3f470:	ldr	sl, [r2]
   3f474:	str	r1, [sp, #12]
   3f478:	str	r1, [r8, r3, lsl #2]
   3f47c:	ldr	r1, [r0, r3, lsl #2]
   3f480:	ldr	lr, [sp]
   3f484:	mul	r1, sl, r1
   3f488:	str	r1, [r2, #4]!
   3f48c:	ldr	r1, [fp, r3, lsl #2]
   3f490:	str	r1, [ip, r3, lsl #2]
   3f494:	mul	lr, r1, lr
   3f498:	add	r3, r3, #1
   3f49c:	str	lr, [sp]
   3f4a0:	ldr	lr, [sp, #12]
   3f4a4:	mla	r5, sl, lr, r5
   3f4a8:	b	3f410 <Mat_VarGetStructs+0xf4>
   3f4ac:	ldr	r1, [sp, #200]	; 0xc8
   3f4b0:	ldr	r0, [r6, #40]	; 0x28
   3f4b4:	cmp	r1, #0
   3f4b8:	ldreq	r1, [r0, r3]
   3f4bc:	ldreq	r0, [sp, #20]
   3f4c0:	streq	r1, [r0, sl, lsl #2]
   3f4c4:	beq	3f4ec <Mat_VarGetStructs+0x1d0>
   3f4c8:	ldr	r0, [r0, r3]
   3f4cc:	mov	r1, #1
   3f4d0:	str	r2, [sp, #36]	; 0x24
   3f4d4:	str	r3, [sp, #32]
   3f4d8:	bl	172c <Mat_VarDuplicate@plt>
   3f4dc:	ldr	r3, [sp, #20]
   3f4e0:	ldr	r2, [sp, #36]	; 0x24
   3f4e4:	str	r0, [r3, sl, lsl #2]
   3f4e8:	ldr	r3, [sp, #32]
   3f4ec:	add	sl, sl, #1
   3f4f0:	add	r3, r3, #4
   3f4f4:	ldr	r1, [sp, #4]
   3f4f8:	cmp	sl, r1
   3f4fc:	bne	3f4ac <Mat_VarGetStructs+0x190>
   3f500:	ldr	r3, [r9]
   3f504:	add	r2, r2, #1
   3f508:	mla	r5, r3, r1, r5
   3f50c:	ldr	r3, [sp, #20]
   3f510:	ldr	r1, [sp, #24]
   3f514:	add	r3, r3, r1
   3f518:	str	r3, [sp, #20]
   3f51c:	ldr	sl, [fp]
   3f520:	cmp	r2, sl
   3f524:	lsllt	r3, r5, #2
   3f528:	movlt	sl, #0
   3f52c:	blt	3f4f4 <Mat_VarGetStructs+0x1d8>
   3f530:	ldr	r3, [sp, #84]	; 0x54
   3f534:	ldr	r2, [r9, #4]
   3f538:	add	r3, r3, #1
   3f53c:	str	r3, [sp, #84]	; 0x54
   3f540:	ldr	r3, [sp, #44]	; 0x2c
   3f544:	ldr	r0, [r6, #4]
   3f548:	add	r3, r3, r2
   3f54c:	ldr	r5, [r7]
   3f550:	str	r3, [sp, #44]	; 0x2c
   3f554:	sub	lr, r0, #1
   3f558:	mov	r2, #8
   3f55c:	mov	r3, #1
   3f560:	str	r5, [sp, #40]	; 0x28
   3f564:	cmp	r3, r0
   3f568:	blt	3f5a8 <Mat_VarGetStructs+0x28c>
   3f56c:	ldr	r3, [sp, #4]
   3f570:	mul	r5, r3, r5
   3f574:	ldr	r3, [sp, #12]
   3f578:	add	r3, r3, sl
   3f57c:	str	r3, [sp, #12]
   3f580:	ldr	r3, [sp, #12]
   3f584:	ldr	r2, [sp]
   3f588:	cmp	r3, r2
   3f58c:	bcs	3f460 <Mat_VarGetStructs+0x144>
   3f590:	ldr	r2, [sp, #24]
   3f594:	ldr	r1, [sp, #16]
   3f598:	mla	r3, r2, r3, r1
   3f59c:	mov	r2, #0
   3f5a0:	str	r3, [sp, #20]
   3f5a4:	b	3f51c <Mat_VarGetStructs+0x200>
   3f5a8:	ldr	r1, [sp, #8]
   3f5ac:	ldr	ip, [r1, r3, lsl #2]
   3f5b0:	ldr	r1, [fp, r3, lsl #2]
   3f5b4:	cmp	ip, r1
   3f5b8:	bne	3f5fc <Mat_VarGetStructs+0x2e0>
   3f5bc:	ldr	r1, [sp, #8]
   3f5c0:	mov	ip, #0
   3f5c4:	cmp	r3, lr
   3f5c8:	str	ip, [r1, r3, lsl #2]
   3f5cc:	ldr	r1, [r7, r3, lsl #2]
   3f5d0:	str	r1, [r8, r3, lsl #2]
   3f5d4:	bge	3f5fc <Mat_VarGetStructs+0x2e0>
   3f5d8:	ldr	r1, [sp, #8]
   3f5dc:	ldr	ip, [sp, #8]
   3f5e0:	ldr	r1, [r1, r2]
   3f5e4:	add	r1, r1, #1
   3f5e8:	str	r1, [ip, r2]
   3f5ec:	ldr	r1, [r8, r2]
   3f5f0:	ldr	ip, [r9, r2]
   3f5f4:	add	r1, r1, ip
   3f5f8:	str	r1, [r8, r2]
   3f5fc:	ldr	r1, [sp, #28]
   3f600:	ldr	ip, [r8, r3, lsl #2]
   3f604:	add	r1, r1, r2
   3f608:	add	r3, r3, #1
   3f60c:	ldr	r1, [r1, #-8]
   3f610:	add	r2, r2, #4
   3f614:	mla	r5, ip, r1, r5
   3f618:	b	3f564 <Mat_VarGetStructs+0x248>
   3f61c:	mov	r4, r1
   3f620:	b	3f460 <Mat_VarGetStructs+0x144>

0003f624 <Mat_VarGetStructsLinear>:
   3f624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f628:	subs	r5, r0, #0
   3f62c:	sub	sp, sp, #20
   3f630:	beq	3f6dc <Mat_VarGetStructsLinear+0xb8>
   3f634:	ldr	ip, [r5, #4]
   3f638:	cmp	ip, #10
   3f63c:	bgt	3f69c <Mat_VarGetStructsLinear+0x78>
   3f640:	mov	r4, r1
   3f644:	mov	r1, #0
   3f648:	mov	r9, r3
   3f64c:	mov	sl, r2
   3f650:	bl	172c <Mat_VarDuplicate@plt>
   3f654:	ldr	r3, [sp, #56]	; 0x38
   3f658:	mov	r7, r5
   3f65c:	cmp	r3, #0
   3f660:	moveq	r3, #1
   3f664:	streq	r3, [r0, #44]	; 0x2c
   3f668:	ldr	r3, [r7, #52]	; 0x34
   3f66c:	mov	r5, r0
   3f670:	lsl	r0, r9, #2
   3f674:	ldr	r8, [r3, #4]
   3f678:	mul	r0, r8, r0
   3f67c:	str	r0, [r5]
   3f680:	bl	15ac <malloc@plt>
   3f684:	cmp	r0, #0
   3f688:	mov	r6, r0
   3f68c:	str	r0, [r5, #40]	; 0x28
   3f690:	bne	3f6a4 <Mat_VarGetStructsLinear+0x80>
   3f694:	mov	r0, r5
   3f698:	bl	15f4 <Mat_VarFree@plt>
   3f69c:	mov	r5, #0
   3f6a0:	b	3f6dc <Mat_VarGetStructsLinear+0xb8>
   3f6a4:	ldr	r3, [r5, #32]
   3f6a8:	sub	sl, sl, #1
   3f6ac:	mov	fp, #1
   3f6b0:	str	r9, [r3]
   3f6b4:	str	fp, [r3, #4]
   3f6b8:	mul	r3, r8, sl
   3f6bc:	mul	r4, r4, r8
   3f6c0:	str	r3, [sp]
   3f6c4:	bic	r2, r8, r8, asr #31
   3f6c8:	lsl	r3, r8, #2
   3f6cc:	str	r3, [sp, #4]
   3f6d0:	mov	r3, #0
   3f6d4:	cmp	r3, r9
   3f6d8:	blt	3f6e8 <Mat_VarGetStructsLinear+0xc4>
   3f6dc:	mov	r0, r5
   3f6e0:	add	sp, sp, #20
   3f6e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f6e8:	ldr	r1, [sp, #56]	; 0x38
   3f6ec:	cmp	r1, #0
   3f6f0:	bne	3f764 <Mat_VarGetStructsLinear+0x140>
   3f6f4:	cmp	r1, r8
   3f6f8:	bge	3f748 <Mat_VarGetStructsLinear+0x124>
   3f6fc:	ldr	r0, [r7, #40]	; 0x28
   3f700:	add	ip, r4, r1
   3f704:	ldr	r0, [r0, ip, lsl #2]
   3f708:	str	r0, [r6, r1, lsl #2]
   3f70c:	add	r1, r1, #1
   3f710:	b	3f6f4 <Mat_VarGetStructsLinear+0xd0>
   3f714:	ldr	r0, [r7, #40]	; 0x28
   3f718:	add	ip, r4, sl
   3f71c:	mov	r1, fp
   3f720:	ldr	r0, [r0, ip, lsl #2]
   3f724:	str	r2, [sp, #12]
   3f728:	str	r3, [sp, #8]
   3f72c:	bl	172c <Mat_VarDuplicate@plt>
   3f730:	ldr	r3, [sp, #8]
   3f734:	ldr	r2, [sp, #12]
   3f738:	str	r0, [r6, sl, lsl #2]
   3f73c:	add	sl, sl, #1
   3f740:	cmp	sl, r8
   3f744:	blt	3f714 <Mat_VarGetStructsLinear+0xf0>
   3f748:	ldr	r1, [sp]
   3f74c:	add	r4, r2, r4
   3f750:	add	r4, r4, r1
   3f754:	ldr	r1, [sp, #4]
   3f758:	add	r3, r3, #1
   3f75c:	add	r6, r6, r1
   3f760:	b	3f6d4 <Mat_VarGetStructsLinear+0xb0>
   3f764:	mov	sl, #0
   3f768:	b	3f740 <Mat_VarGetStructsLinear+0x11c>

0003f76c <Mat_VarSetStructFieldByIndex>:
   3f76c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3f770:	mov	ip, #1
   3f774:	subs	r4, r0, #0
   3f778:	str	ip, [sp, #4]
   3f77c:	bne	3f790 <Mat_VarSetStructFieldByIndex+0x24>
   3f780:	mov	r5, #0
   3f784:	mov	r0, r5
   3f788:	add	sp, sp, #12
   3f78c:	pop	{r4, r5, r6, r7, pc}
   3f790:	ldr	ip, [r4, #16]
   3f794:	cmp	ip, #2
   3f798:	bne	3f780 <Mat_VarSetStructFieldByIndex+0x14>
   3f79c:	ldr	ip, [r4, #40]	; 0x28
   3f7a0:	cmp	ip, #0
   3f7a4:	beq	3f780 <Mat_VarSetStructFieldByIndex+0x14>
   3f7a8:	mov	r7, r1
   3f7ac:	add	r1, sp, #4
   3f7b0:	mov	r6, r3
   3f7b4:	mov	r5, r2
   3f7b8:	bl	3bee0 <SafeMulDims>
   3f7bc:	ldr	r3, [r4, #52]	; 0x34
   3f7c0:	ldr	r0, [r3, #4]
   3f7c4:	ldr	r3, [sp, #4]
   3f7c8:	cmp	r3, r5
   3f7cc:	cmphi	r0, r7
   3f7d0:	bls	3f780 <Mat_VarSetStructFieldByIndex+0x14>
   3f7d4:	mla	r2, r5, r0, r7
   3f7d8:	ldr	r3, [r4, #40]	; 0x28
   3f7dc:	ldr	r0, [r6, #36]	; 0x24
   3f7e0:	cmp	r0, #0
   3f7e4:	ldr	r5, [r3, r2, lsl #2]
   3f7e8:	str	r6, [r3, r2, lsl #2]
   3f7ec:	beq	3f7f4 <Mat_VarSetStructFieldByIndex+0x88>
   3f7f0:	bl	14e0 <free@plt>
   3f7f4:	ldr	r3, [r4, #52]	; 0x34
   3f7f8:	ldr	r3, [r3, #8]
   3f7fc:	ldr	r0, [r3, r7, lsl #2]
   3f800:	bl	1534 <strdup@plt>
   3f804:	str	r0, [r6, #36]	; 0x24
   3f808:	b	3f784 <Mat_VarSetStructFieldByIndex+0x18>

0003f80c <Mat_VarSetStructFieldByName>:
   3f80c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3f810:	mov	ip, #1
   3f814:	subs	r5, r0, #0
   3f818:	str	ip, [sp, #4]
   3f81c:	bne	3f830 <Mat_VarSetStructFieldByName+0x24>
   3f820:	mov	r8, #0
   3f824:	mov	r0, r8
   3f828:	add	sp, sp, #8
   3f82c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f830:	ldr	ip, [r5, #16]
   3f834:	cmp	ip, #2
   3f838:	bne	3f820 <Mat_VarSetStructFieldByName+0x14>
   3f83c:	ldr	ip, [r5, #40]	; 0x28
   3f840:	cmp	ip, #0
   3f844:	beq	3f820 <Mat_VarSetStructFieldByName+0x14>
   3f848:	mov	r9, r1
   3f84c:	add	r1, sp, #4
   3f850:	mov	r6, r3
   3f854:	mov	r8, r2
   3f858:	bl	3bee0 <SafeMulDims>
   3f85c:	ldr	sl, [r5, #52]	; 0x34
   3f860:	mov	r4, #0
   3f864:	ldr	r7, [sl, #4]
   3f868:	cmp	r4, r7
   3f86c:	blt	3f8cc <Mat_VarSetStructFieldByName+0xc0>
   3f870:	mvn	r4, #0
   3f874:	ldr	r3, [sp, #4]
   3f878:	cmp	r3, r8
   3f87c:	movls	r3, #0
   3f880:	movhi	r3, #1
   3f884:	cmp	r4, #0
   3f888:	movlt	r3, #0
   3f88c:	cmp	r3, #0
   3f890:	beq	3f820 <Mat_VarSetStructFieldByName+0x14>
   3f894:	mla	r7, r8, r7, r4
   3f898:	ldr	r3, [r5, #40]	; 0x28
   3f89c:	ldr	r0, [r6, #36]	; 0x24
   3f8a0:	cmp	r0, #0
   3f8a4:	ldr	r8, [r3, r7, lsl #2]
   3f8a8:	str	r6, [r3, r7, lsl #2]
   3f8ac:	beq	3f8b4 <Mat_VarSetStructFieldByName+0xa8>
   3f8b0:	bl	14e0 <free@plt>
   3f8b4:	ldr	r3, [r5, #52]	; 0x34
   3f8b8:	ldr	r3, [r3, #8]
   3f8bc:	ldr	r0, [r3, r4, lsl #2]
   3f8c0:	bl	1534 <strdup@plt>
   3f8c4:	str	r0, [r6, #36]	; 0x24
   3f8c8:	b	3f824 <Mat_VarSetStructFieldByName+0x18>
   3f8cc:	ldr	r3, [sl, #8]
   3f8d0:	mov	r1, r9
   3f8d4:	ldr	r0, [r3, r4, lsl #2]
   3f8d8:	bl	148c <strcmp@plt>
   3f8dc:	cmp	r0, #0
   3f8e0:	beq	3f874 <Mat_VarSetStructFieldByName+0x68>
   3f8e4:	add	r4, r4, #1
   3f8e8:	b	3f868 <Mat_VarSetStructFieldByName+0x5c>

0003f8ec <__udivsi3>:
   3f8ec:	subs	r2, r1, #1
   3f8f0:	bxeq	lr
   3f8f4:	bcc	3facc <__udivsi3+0x1e0>
   3f8f8:	cmp	r0, r1
   3f8fc:	bls	3fab0 <__udivsi3+0x1c4>
   3f900:	tst	r1, r2
   3f904:	beq	3fabc <__udivsi3+0x1d0>
   3f908:	clz	r3, r0
   3f90c:	clz	r2, r1
   3f910:	sub	r3, r2, r3
   3f914:	rsbs	r3, r3, #31
   3f918:	addne	r3, r3, r3, lsl #1
   3f91c:	mov	r2, #0
   3f920:	addne	pc, pc, r3, lsl #2
   3f924:	nop			; (mov r0, r0)
   3f928:	cmp	r0, r1, lsl #31
   3f92c:	adc	r2, r2, r2
   3f930:	subcs	r0, r0, r1, lsl #31
   3f934:	cmp	r0, r1, lsl #30
   3f938:	adc	r2, r2, r2
   3f93c:	subcs	r0, r0, r1, lsl #30
   3f940:	cmp	r0, r1, lsl #29
   3f944:	adc	r2, r2, r2
   3f948:	subcs	r0, r0, r1, lsl #29
   3f94c:	cmp	r0, r1, lsl #28
   3f950:	adc	r2, r2, r2
   3f954:	subcs	r0, r0, r1, lsl #28
   3f958:	cmp	r0, r1, lsl #27
   3f95c:	adc	r2, r2, r2
   3f960:	subcs	r0, r0, r1, lsl #27
   3f964:	cmp	r0, r1, lsl #26
   3f968:	adc	r2, r2, r2
   3f96c:	subcs	r0, r0, r1, lsl #26
   3f970:	cmp	r0, r1, lsl #25
   3f974:	adc	r2, r2, r2
   3f978:	subcs	r0, r0, r1, lsl #25
   3f97c:	cmp	r0, r1, lsl #24
   3f980:	adc	r2, r2, r2
   3f984:	subcs	r0, r0, r1, lsl #24
   3f988:	cmp	r0, r1, lsl #23
   3f98c:	adc	r2, r2, r2
   3f990:	subcs	r0, r0, r1, lsl #23
   3f994:	cmp	r0, r1, lsl #22
   3f998:	adc	r2, r2, r2
   3f99c:	subcs	r0, r0, r1, lsl #22
   3f9a0:	cmp	r0, r1, lsl #21
   3f9a4:	adc	r2, r2, r2
   3f9a8:	subcs	r0, r0, r1, lsl #21
   3f9ac:	cmp	r0, r1, lsl #20
   3f9b0:	adc	r2, r2, r2
   3f9b4:	subcs	r0, r0, r1, lsl #20
   3f9b8:	cmp	r0, r1, lsl #19
   3f9bc:	adc	r2, r2, r2
   3f9c0:	subcs	r0, r0, r1, lsl #19
   3f9c4:	cmp	r0, r1, lsl #18
   3f9c8:	adc	r2, r2, r2
   3f9cc:	subcs	r0, r0, r1, lsl #18
   3f9d0:	cmp	r0, r1, lsl #17
   3f9d4:	adc	r2, r2, r2
   3f9d8:	subcs	r0, r0, r1, lsl #17
   3f9dc:	cmp	r0, r1, lsl #16
   3f9e0:	adc	r2, r2, r2
   3f9e4:	subcs	r0, r0, r1, lsl #16
   3f9e8:	cmp	r0, r1, lsl #15
   3f9ec:	adc	r2, r2, r2
   3f9f0:	subcs	r0, r0, r1, lsl #15
   3f9f4:	cmp	r0, r1, lsl #14
   3f9f8:	adc	r2, r2, r2
   3f9fc:	subcs	r0, r0, r1, lsl #14
   3fa00:	cmp	r0, r1, lsl #13
   3fa04:	adc	r2, r2, r2
   3fa08:	subcs	r0, r0, r1, lsl #13
   3fa0c:	cmp	r0, r1, lsl #12
   3fa10:	adc	r2, r2, r2
   3fa14:	subcs	r0, r0, r1, lsl #12
   3fa18:	cmp	r0, r1, lsl #11
   3fa1c:	adc	r2, r2, r2
   3fa20:	subcs	r0, r0, r1, lsl #11
   3fa24:	cmp	r0, r1, lsl #10
   3fa28:	adc	r2, r2, r2
   3fa2c:	subcs	r0, r0, r1, lsl #10
   3fa30:	cmp	r0, r1, lsl #9
   3fa34:	adc	r2, r2, r2
   3fa38:	subcs	r0, r0, r1, lsl #9
   3fa3c:	cmp	r0, r1, lsl #8
   3fa40:	adc	r2, r2, r2
   3fa44:	subcs	r0, r0, r1, lsl #8
   3fa48:	cmp	r0, r1, lsl #7
   3fa4c:	adc	r2, r2, r2
   3fa50:	subcs	r0, r0, r1, lsl #7
   3fa54:	cmp	r0, r1, lsl #6
   3fa58:	adc	r2, r2, r2
   3fa5c:	subcs	r0, r0, r1, lsl #6
   3fa60:	cmp	r0, r1, lsl #5
   3fa64:	adc	r2, r2, r2
   3fa68:	subcs	r0, r0, r1, lsl #5
   3fa6c:	cmp	r0, r1, lsl #4
   3fa70:	adc	r2, r2, r2
   3fa74:	subcs	r0, r0, r1, lsl #4
   3fa78:	cmp	r0, r1, lsl #3
   3fa7c:	adc	r2, r2, r2
   3fa80:	subcs	r0, r0, r1, lsl #3
   3fa84:	cmp	r0, r1, lsl #2
   3fa88:	adc	r2, r2, r2
   3fa8c:	subcs	r0, r0, r1, lsl #2
   3fa90:	cmp	r0, r1, lsl #1
   3fa94:	adc	r2, r2, r2
   3fa98:	subcs	r0, r0, r1, lsl #1
   3fa9c:	cmp	r0, r1
   3faa0:	adc	r2, r2, r2
   3faa4:	subcs	r0, r0, r1
   3faa8:	mov	r0, r2
   3faac:	bx	lr
   3fab0:	moveq	r0, #1
   3fab4:	movne	r0, #0
   3fab8:	bx	lr
   3fabc:	clz	r2, r1
   3fac0:	rsb	r2, r2, #31
   3fac4:	lsr	r0, r0, r2
   3fac8:	bx	lr
   3facc:	cmp	r0, #0
   3fad0:	mvnne	r0, #0
   3fad4:	b	40340 <__aeabi_idiv0>

0003fad8 <__aeabi_uidivmod>:
   3fad8:	cmp	r1, #0
   3fadc:	beq	3facc <__udivsi3+0x1e0>
   3fae0:	push	{r0, r1, lr}
   3fae4:	bl	3f8ec <__udivsi3>
   3fae8:	pop	{r1, r2, lr}
   3faec:	mul	r3, r2, r0
   3faf0:	sub	r1, r1, r3
   3faf4:	bx	lr

0003faf8 <__divsi3>:
   3faf8:	cmp	r1, #0
   3fafc:	beq	3fd08 <.divsi3_skip_div0_test+0x208>

0003fb00 <.divsi3_skip_div0_test>:
   3fb00:	eor	ip, r0, r1
   3fb04:	rsbmi	r1, r1, #0
   3fb08:	subs	r2, r1, #1
   3fb0c:	beq	3fcd4 <.divsi3_skip_div0_test+0x1d4>
   3fb10:	movs	r3, r0
   3fb14:	rsbmi	r3, r0, #0
   3fb18:	cmp	r3, r1
   3fb1c:	bls	3fce0 <.divsi3_skip_div0_test+0x1e0>
   3fb20:	tst	r1, r2
   3fb24:	beq	3fcf0 <.divsi3_skip_div0_test+0x1f0>
   3fb28:	clz	r2, r3
   3fb2c:	clz	r0, r1
   3fb30:	sub	r2, r0, r2
   3fb34:	rsbs	r2, r2, #31
   3fb38:	addne	r2, r2, r2, lsl #1
   3fb3c:	mov	r0, #0
   3fb40:	addne	pc, pc, r2, lsl #2
   3fb44:	nop			; (mov r0, r0)
   3fb48:	cmp	r3, r1, lsl #31
   3fb4c:	adc	r0, r0, r0
   3fb50:	subcs	r3, r3, r1, lsl #31
   3fb54:	cmp	r3, r1, lsl #30
   3fb58:	adc	r0, r0, r0
   3fb5c:	subcs	r3, r3, r1, lsl #30
   3fb60:	cmp	r3, r1, lsl #29
   3fb64:	adc	r0, r0, r0
   3fb68:	subcs	r3, r3, r1, lsl #29
   3fb6c:	cmp	r3, r1, lsl #28
   3fb70:	adc	r0, r0, r0
   3fb74:	subcs	r3, r3, r1, lsl #28
   3fb78:	cmp	r3, r1, lsl #27
   3fb7c:	adc	r0, r0, r0
   3fb80:	subcs	r3, r3, r1, lsl #27
   3fb84:	cmp	r3, r1, lsl #26
   3fb88:	adc	r0, r0, r0
   3fb8c:	subcs	r3, r3, r1, lsl #26
   3fb90:	cmp	r3, r1, lsl #25
   3fb94:	adc	r0, r0, r0
   3fb98:	subcs	r3, r3, r1, lsl #25
   3fb9c:	cmp	r3, r1, lsl #24
   3fba0:	adc	r0, r0, r0
   3fba4:	subcs	r3, r3, r1, lsl #24
   3fba8:	cmp	r3, r1, lsl #23
   3fbac:	adc	r0, r0, r0
   3fbb0:	subcs	r3, r3, r1, lsl #23
   3fbb4:	cmp	r3, r1, lsl #22
   3fbb8:	adc	r0, r0, r0
   3fbbc:	subcs	r3, r3, r1, lsl #22
   3fbc0:	cmp	r3, r1, lsl #21
   3fbc4:	adc	r0, r0, r0
   3fbc8:	subcs	r3, r3, r1, lsl #21
   3fbcc:	cmp	r3, r1, lsl #20
   3fbd0:	adc	r0, r0, r0
   3fbd4:	subcs	r3, r3, r1, lsl #20
   3fbd8:	cmp	r3, r1, lsl #19
   3fbdc:	adc	r0, r0, r0
   3fbe0:	subcs	r3, r3, r1, lsl #19
   3fbe4:	cmp	r3, r1, lsl #18
   3fbe8:	adc	r0, r0, r0
   3fbec:	subcs	r3, r3, r1, lsl #18
   3fbf0:	cmp	r3, r1, lsl #17
   3fbf4:	adc	r0, r0, r0
   3fbf8:	subcs	r3, r3, r1, lsl #17
   3fbfc:	cmp	r3, r1, lsl #16
   3fc00:	adc	r0, r0, r0
   3fc04:	subcs	r3, r3, r1, lsl #16
   3fc08:	cmp	r3, r1, lsl #15
   3fc0c:	adc	r0, r0, r0
   3fc10:	subcs	r3, r3, r1, lsl #15
   3fc14:	cmp	r3, r1, lsl #14
   3fc18:	adc	r0, r0, r0
   3fc1c:	subcs	r3, r3, r1, lsl #14
   3fc20:	cmp	r3, r1, lsl #13
   3fc24:	adc	r0, r0, r0
   3fc28:	subcs	r3, r3, r1, lsl #13
   3fc2c:	cmp	r3, r1, lsl #12
   3fc30:	adc	r0, r0, r0
   3fc34:	subcs	r3, r3, r1, lsl #12
   3fc38:	cmp	r3, r1, lsl #11
   3fc3c:	adc	r0, r0, r0
   3fc40:	subcs	r3, r3, r1, lsl #11
   3fc44:	cmp	r3, r1, lsl #10
   3fc48:	adc	r0, r0, r0
   3fc4c:	subcs	r3, r3, r1, lsl #10
   3fc50:	cmp	r3, r1, lsl #9
   3fc54:	adc	r0, r0, r0
   3fc58:	subcs	r3, r3, r1, lsl #9
   3fc5c:	cmp	r3, r1, lsl #8
   3fc60:	adc	r0, r0, r0
   3fc64:	subcs	r3, r3, r1, lsl #8
   3fc68:	cmp	r3, r1, lsl #7
   3fc6c:	adc	r0, r0, r0
   3fc70:	subcs	r3, r3, r1, lsl #7
   3fc74:	cmp	r3, r1, lsl #6
   3fc78:	adc	r0, r0, r0
   3fc7c:	subcs	r3, r3, r1, lsl #6
   3fc80:	cmp	r3, r1, lsl #5
   3fc84:	adc	r0, r0, r0
   3fc88:	subcs	r3, r3, r1, lsl #5
   3fc8c:	cmp	r3, r1, lsl #4
   3fc90:	adc	r0, r0, r0
   3fc94:	subcs	r3, r3, r1, lsl #4
   3fc98:	cmp	r3, r1, lsl #3
   3fc9c:	adc	r0, r0, r0
   3fca0:	subcs	r3, r3, r1, lsl #3
   3fca4:	cmp	r3, r1, lsl #2
   3fca8:	adc	r0, r0, r0
   3fcac:	subcs	r3, r3, r1, lsl #2
   3fcb0:	cmp	r3, r1, lsl #1
   3fcb4:	adc	r0, r0, r0
   3fcb8:	subcs	r3, r3, r1, lsl #1
   3fcbc:	cmp	r3, r1
   3fcc0:	adc	r0, r0, r0
   3fcc4:	subcs	r3, r3, r1
   3fcc8:	cmp	ip, #0
   3fccc:	rsbmi	r0, r0, #0
   3fcd0:	bx	lr
   3fcd4:	teq	ip, r0
   3fcd8:	rsbmi	r0, r0, #0
   3fcdc:	bx	lr
   3fce0:	movcc	r0, #0
   3fce4:	asreq	r0, ip, #31
   3fce8:	orreq	r0, r0, #1
   3fcec:	bx	lr
   3fcf0:	clz	r2, r1
   3fcf4:	rsb	r2, r2, #31
   3fcf8:	cmp	ip, #0
   3fcfc:	lsr	r0, r3, r2
   3fd00:	rsbmi	r0, r0, #0
   3fd04:	bx	lr
   3fd08:	cmp	r0, #0
   3fd0c:	mvngt	r0, #-2147483648	; 0x80000000
   3fd10:	movlt	r0, #-2147483648	; 0x80000000
   3fd14:	b	40340 <__aeabi_idiv0>

0003fd18 <__aeabi_idivmod>:
   3fd18:	cmp	r1, #0
   3fd1c:	beq	3fd08 <.divsi3_skip_div0_test+0x208>
   3fd20:	push	{r0, r1, lr}
   3fd24:	bl	3fb00 <.divsi3_skip_div0_test>
   3fd28:	pop	{r1, r2, lr}
   3fd2c:	mul	r3, r2, r0
   3fd30:	sub	r1, r1, r3
   3fd34:	bx	lr

0003fd38 <__aeabi_drsub>:
   3fd38:	eor	r1, r1, #-2147483648	; 0x80000000
   3fd3c:	b	3fd44 <__adddf3>

0003fd40 <__aeabi_dsub>:
   3fd40:	eor	r3, r3, #-2147483648	; 0x80000000

0003fd44 <__adddf3>:
   3fd44:	push	{r4, r5, lr}
   3fd48:	lsl	r4, r1, #1
   3fd4c:	lsl	r5, r3, #1
   3fd50:	teq	r4, r5
   3fd54:	teqeq	r0, r2
   3fd58:	orrsne	ip, r4, r0
   3fd5c:	orrsne	ip, r5, r2
   3fd60:	mvnsne	ip, r4, asr #21
   3fd64:	mvnsne	ip, r5, asr #21
   3fd68:	beq	3ff54 <__adddf3+0x210>
   3fd6c:	lsr	r4, r4, #21
   3fd70:	rsbs	r5, r4, r5, lsr #21
   3fd74:	rsblt	r5, r5, #0
   3fd78:	ble	3fd98 <__adddf3+0x54>
   3fd7c:	add	r4, r4, r5
   3fd80:	eor	r2, r0, r2
   3fd84:	eor	r3, r1, r3
   3fd88:	eor	r0, r2, r0
   3fd8c:	eor	r1, r3, r1
   3fd90:	eor	r2, r0, r2
   3fd94:	eor	r3, r1, r3
   3fd98:	cmp	r5, #54	; 0x36
   3fd9c:	pophi	{r4, r5, pc}
   3fda0:	tst	r1, #-2147483648	; 0x80000000
   3fda4:	lsl	r1, r1, #12
   3fda8:	mov	ip, #1048576	; 0x100000
   3fdac:	orr	r1, ip, r1, lsr #12
   3fdb0:	beq	3fdbc <__adddf3+0x78>
   3fdb4:	rsbs	r0, r0, #0
   3fdb8:	rsc	r1, r1, #0
   3fdbc:	tst	r3, #-2147483648	; 0x80000000
   3fdc0:	lsl	r3, r3, #12
   3fdc4:	orr	r3, ip, r3, lsr #12
   3fdc8:	beq	3fdd4 <__adddf3+0x90>
   3fdcc:	rsbs	r2, r2, #0
   3fdd0:	rsc	r3, r3, #0
   3fdd4:	teq	r4, r5
   3fdd8:	beq	3ff3c <__adddf3+0x1f8>
   3fddc:	sub	r4, r4, #1
   3fde0:	rsbs	lr, r5, #32
   3fde4:	blt	3fe00 <__adddf3+0xbc>
   3fde8:	lsl	ip, r2, lr
   3fdec:	adds	r0, r0, r2, lsr r5
   3fdf0:	adc	r1, r1, #0
   3fdf4:	adds	r0, r0, r3, lsl lr
   3fdf8:	adcs	r1, r1, r3, asr r5
   3fdfc:	b	3fe1c <__adddf3+0xd8>
   3fe00:	sub	r5, r5, #32
   3fe04:	add	lr, lr, #32
   3fe08:	cmp	r2, #1
   3fe0c:	lsl	ip, r3, lr
   3fe10:	orrcs	ip, ip, #2
   3fe14:	adds	r0, r0, r3, asr r5
   3fe18:	adcs	r1, r1, r3, asr #31
   3fe1c:	and	r5, r1, #-2147483648	; 0x80000000
   3fe20:	bpl	3fe30 <__adddf3+0xec>
   3fe24:	rsbs	ip, ip, #0
   3fe28:	rscs	r0, r0, #0
   3fe2c:	rsc	r1, r1, #0
   3fe30:	cmp	r1, #1048576	; 0x100000
   3fe34:	bcc	3fe74 <__adddf3+0x130>
   3fe38:	cmp	r1, #2097152	; 0x200000
   3fe3c:	bcc	3fe5c <__adddf3+0x118>
   3fe40:	lsrs	r1, r1, #1
   3fe44:	rrxs	r0, r0
   3fe48:	rrx	ip, ip
   3fe4c:	add	r4, r4, #1
   3fe50:	lsl	r2, r4, #21
   3fe54:	cmn	r2, #4194304	; 0x400000
   3fe58:	bcs	3ffb4 <__adddf3+0x270>
   3fe5c:	cmp	ip, #-2147483648	; 0x80000000
   3fe60:	lsrseq	ip, r0, #1
   3fe64:	adcs	r0, r0, #0
   3fe68:	adc	r1, r1, r4, lsl #20
   3fe6c:	orr	r1, r1, r5
   3fe70:	pop	{r4, r5, pc}
   3fe74:	lsls	ip, ip, #1
   3fe78:	adcs	r0, r0, r0
   3fe7c:	adc	r1, r1, r1
   3fe80:	tst	r1, #1048576	; 0x100000
   3fe84:	sub	r4, r4, #1
   3fe88:	bne	3fe5c <__adddf3+0x118>
   3fe8c:	teq	r1, #0
   3fe90:	moveq	r1, r0
   3fe94:	moveq	r0, #0
   3fe98:	clz	r3, r1
   3fe9c:	addeq	r3, r3, #32
   3fea0:	sub	r3, r3, #11
   3fea4:	subs	r2, r3, #32
   3fea8:	bge	3fecc <__adddf3+0x188>
   3feac:	adds	r2, r2, #12
   3feb0:	ble	3fec8 <__adddf3+0x184>
   3feb4:	add	ip, r2, #20
   3feb8:	rsb	r2, r2, #12
   3febc:	lsl	r0, r1, ip
   3fec0:	lsr	r1, r1, r2
   3fec4:	b	3fedc <__adddf3+0x198>
   3fec8:	add	r2, r2, #20
   3fecc:	rsble	ip, r2, #32
   3fed0:	lsl	r1, r1, r2
   3fed4:	orrle	r1, r1, r0, lsr ip
   3fed8:	lslle	r0, r0, r2
   3fedc:	subs	r4, r4, r3
   3fee0:	addge	r1, r1, r4, lsl #20
   3fee4:	orrge	r1, r1, r5
   3fee8:	popge	{r4, r5, pc}
   3feec:	mvn	r4, r4
   3fef0:	subs	r4, r4, #31
   3fef4:	bge	3ff30 <__adddf3+0x1ec>
   3fef8:	adds	r4, r4, #12
   3fefc:	bgt	3ff18 <__adddf3+0x1d4>
   3ff00:	add	r4, r4, #20
   3ff04:	rsb	r2, r4, #32
   3ff08:	lsr	r0, r0, r4
   3ff0c:	orr	r0, r0, r1, lsl r2
   3ff10:	orr	r1, r5, r1, lsr r4
   3ff14:	pop	{r4, r5, pc}
   3ff18:	rsb	r4, r4, #12
   3ff1c:	rsb	r2, r4, #32
   3ff20:	lsr	r0, r0, r2
   3ff24:	orr	r0, r0, r1, lsl r4
   3ff28:	mov	r1, r5
   3ff2c:	pop	{r4, r5, pc}
   3ff30:	lsr	r0, r1, r4
   3ff34:	mov	r1, r5
   3ff38:	pop	{r4, r5, pc}
   3ff3c:	teq	r4, #0
   3ff40:	eor	r3, r3, #1048576	; 0x100000
   3ff44:	eoreq	r1, r1, #1048576	; 0x100000
   3ff48:	addeq	r4, r4, #1
   3ff4c:	subne	r5, r5, #1
   3ff50:	b	3fddc <__adddf3+0x98>
   3ff54:	mvns	ip, r4, asr #21
   3ff58:	mvnsne	ip, r5, asr #21
   3ff5c:	beq	3ffc4 <__adddf3+0x280>
   3ff60:	teq	r4, r5
   3ff64:	teqeq	r0, r2
   3ff68:	beq	3ff7c <__adddf3+0x238>
   3ff6c:	orrs	ip, r4, r0
   3ff70:	moveq	r1, r3
   3ff74:	moveq	r0, r2
   3ff78:	pop	{r4, r5, pc}
   3ff7c:	teq	r1, r3
   3ff80:	movne	r1, #0
   3ff84:	movne	r0, #0
   3ff88:	popne	{r4, r5, pc}
   3ff8c:	lsrs	ip, r4, #21
   3ff90:	bne	3ffa4 <__adddf3+0x260>
   3ff94:	lsls	r0, r0, #1
   3ff98:	adcs	r1, r1, r1
   3ff9c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3ffa0:	pop	{r4, r5, pc}
   3ffa4:	adds	r4, r4, #4194304	; 0x400000
   3ffa8:	addcc	r1, r1, #1048576	; 0x100000
   3ffac:	popcc	{r4, r5, pc}
   3ffb0:	and	r5, r1, #-2147483648	; 0x80000000
   3ffb4:	orr	r1, r5, #2130706432	; 0x7f000000
   3ffb8:	orr	r1, r1, #15728640	; 0xf00000
   3ffbc:	mov	r0, #0
   3ffc0:	pop	{r4, r5, pc}
   3ffc4:	mvns	ip, r4, asr #21
   3ffc8:	movne	r1, r3
   3ffcc:	movne	r0, r2
   3ffd0:	mvnseq	ip, r5, asr #21
   3ffd4:	movne	r3, r1
   3ffd8:	movne	r2, r0
   3ffdc:	orrs	r4, r0, r1, lsl #12
   3ffe0:	orrseq	r5, r2, r3, lsl #12
   3ffe4:	teqeq	r1, r3
   3ffe8:	orrne	r1, r1, #524288	; 0x80000
   3ffec:	pop	{r4, r5, pc}

0003fff0 <__aeabi_ui2d>:
   3fff0:	teq	r0, #0
   3fff4:	moveq	r1, #0
   3fff8:	bxeq	lr
   3fffc:	push	{r4, r5, lr}
   40000:	mov	r4, #1024	; 0x400
   40004:	add	r4, r4, #50	; 0x32
   40008:	mov	r5, #0
   4000c:	mov	r1, #0
   40010:	b	3fe8c <__adddf3+0x148>

00040014 <__aeabi_i2d>:
   40014:	teq	r0, #0
   40018:	moveq	r1, #0
   4001c:	bxeq	lr
   40020:	push	{r4, r5, lr}
   40024:	mov	r4, #1024	; 0x400
   40028:	add	r4, r4, #50	; 0x32
   4002c:	ands	r5, r0, #-2147483648	; 0x80000000
   40030:	rsbmi	r0, r0, #0
   40034:	mov	r1, #0
   40038:	b	3fe8c <__adddf3+0x148>

0004003c <__aeabi_f2d>:
   4003c:	lsls	r2, r0, #1
   40040:	asr	r1, r2, #3
   40044:	rrx	r1, r1
   40048:	lsl	r0, r2, #28
   4004c:	andsne	r3, r2, #-16777216	; 0xff000000
   40050:	teqne	r3, #-16777216	; 0xff000000
   40054:	eorne	r1, r1, #939524096	; 0x38000000
   40058:	bxne	lr
   4005c:	teq	r2, #0
   40060:	teqne	r3, #-16777216	; 0xff000000
   40064:	bxeq	lr
   40068:	push	{r4, r5, lr}
   4006c:	mov	r4, #896	; 0x380
   40070:	and	r5, r1, #-2147483648	; 0x80000000
   40074:	bic	r1, r1, #-2147483648	; 0x80000000
   40078:	b	3fe8c <__adddf3+0x148>

0004007c <__aeabi_ul2d>:
   4007c:	orrs	r2, r0, r1
   40080:	bxeq	lr
   40084:	push	{r4, r5, lr}
   40088:	mov	r5, #0
   4008c:	b	400ac <__aeabi_l2d+0x1c>

00040090 <__aeabi_l2d>:
   40090:	orrs	r2, r0, r1
   40094:	bxeq	lr
   40098:	push	{r4, r5, lr}
   4009c:	ands	r5, r1, #-2147483648	; 0x80000000
   400a0:	bpl	400ac <__aeabi_l2d+0x1c>
   400a4:	rsbs	r0, r0, #0
   400a8:	rsc	r1, r1, #0
   400ac:	mov	r4, #1024	; 0x400
   400b0:	add	r4, r4, #50	; 0x32
   400b4:	lsrs	ip, r1, #22
   400b8:	beq	3fe30 <__adddf3+0xec>
   400bc:	mov	r2, #3
   400c0:	lsrs	ip, ip, #3
   400c4:	addne	r2, r2, #3
   400c8:	lsrs	ip, ip, #3
   400cc:	addne	r2, r2, #3
   400d0:	add	r2, r2, ip, lsr #3
   400d4:	rsb	r3, r2, #32
   400d8:	lsl	ip, r0, r3
   400dc:	lsr	r0, r0, r2
   400e0:	orr	r0, r0, r1, lsl r3
   400e4:	lsr	r1, r1, r2
   400e8:	add	r4, r4, r2
   400ec:	b	3fe30 <__adddf3+0xec>

000400f0 <__aeabi_frsub>:
   400f0:	eor	r0, r0, #-2147483648	; 0x80000000
   400f4:	b	400fc <__addsf3>

000400f8 <__aeabi_fsub>:
   400f8:	eor	r1, r1, #-2147483648	; 0x80000000

000400fc <__addsf3>:
   400fc:	lsls	r2, r0, #1
   40100:	lslsne	r3, r1, #1
   40104:	teqne	r2, r3
   40108:	mvnsne	ip, r2, asr #24
   4010c:	mvnsne	ip, r3, asr #24
   40110:	beq	40208 <__addsf3+0x10c>
   40114:	lsr	r2, r2, #24
   40118:	rsbs	r3, r2, r3, lsr #24
   4011c:	addgt	r2, r2, r3
   40120:	eorgt	r1, r0, r1
   40124:	eorgt	r0, r1, r0
   40128:	eorgt	r1, r0, r1
   4012c:	rsblt	r3, r3, #0
   40130:	cmp	r3, #25
   40134:	bxhi	lr
   40138:	tst	r0, #-2147483648	; 0x80000000
   4013c:	orr	r0, r0, #8388608	; 0x800000
   40140:	bic	r0, r0, #-16777216	; 0xff000000
   40144:	rsbne	r0, r0, #0
   40148:	tst	r1, #-2147483648	; 0x80000000
   4014c:	orr	r1, r1, #8388608	; 0x800000
   40150:	bic	r1, r1, #-16777216	; 0xff000000
   40154:	rsbne	r1, r1, #0
   40158:	teq	r2, r3
   4015c:	beq	401f0 <__addsf3+0xf4>
   40160:	sub	r2, r2, #1
   40164:	adds	r0, r0, r1, asr r3
   40168:	rsb	r3, r3, #32
   4016c:	lsl	r1, r1, r3
   40170:	and	r3, r0, #-2147483648	; 0x80000000
   40174:	bpl	40180 <__addsf3+0x84>
   40178:	rsbs	r1, r1, #0
   4017c:	rsc	r0, r0, #0
   40180:	cmp	r0, #8388608	; 0x800000
   40184:	bcc	401b8 <__addsf3+0xbc>
   40188:	cmp	r0, #16777216	; 0x1000000
   4018c:	bcc	401a4 <__addsf3+0xa8>
   40190:	lsrs	r0, r0, #1
   40194:	rrx	r1, r1
   40198:	add	r2, r2, #1
   4019c:	cmp	r2, #254	; 0xfe
   401a0:	bcs	4025c <__addsf3+0x160>
   401a4:	cmp	r1, #-2147483648	; 0x80000000
   401a8:	adc	r0, r0, r2, lsl #23
   401ac:	biceq	r0, r0, #1
   401b0:	orr	r0, r0, r3
   401b4:	bx	lr
   401b8:	lsls	r1, r1, #1
   401bc:	adc	r0, r0, r0
   401c0:	tst	r0, #8388608	; 0x800000
   401c4:	sub	r2, r2, #1
   401c8:	bne	401a4 <__addsf3+0xa8>
   401cc:	clz	ip, r0
   401d0:	sub	ip, ip, #8
   401d4:	subs	r2, r2, ip
   401d8:	lsl	r0, r0, ip
   401dc:	addge	r0, r0, r2, lsl #23
   401e0:	rsblt	r2, r2, #0
   401e4:	orrge	r0, r0, r3
   401e8:	orrlt	r0, r3, r0, lsr r2
   401ec:	bx	lr
   401f0:	teq	r2, #0
   401f4:	eor	r1, r1, #8388608	; 0x800000
   401f8:	eoreq	r0, r0, #8388608	; 0x800000
   401fc:	addeq	r2, r2, #1
   40200:	subne	r3, r3, #1
   40204:	b	40160 <__addsf3+0x64>
   40208:	lsl	r3, r1, #1
   4020c:	mvns	ip, r2, asr #24
   40210:	mvnsne	ip, r3, asr #24
   40214:	beq	40268 <__addsf3+0x16c>
   40218:	teq	r2, r3
   4021c:	beq	4022c <__addsf3+0x130>
   40220:	teq	r2, #0
   40224:	moveq	r0, r1
   40228:	bx	lr
   4022c:	teq	r0, r1
   40230:	movne	r0, #0
   40234:	bxne	lr
   40238:	tst	r2, #-16777216	; 0xff000000
   4023c:	bne	4024c <__addsf3+0x150>
   40240:	lsls	r0, r0, #1
   40244:	orrcs	r0, r0, #-2147483648	; 0x80000000
   40248:	bx	lr
   4024c:	adds	r2, r2, #33554432	; 0x2000000
   40250:	addcc	r0, r0, #8388608	; 0x800000
   40254:	bxcc	lr
   40258:	and	r3, r0, #-2147483648	; 0x80000000
   4025c:	orr	r0, r3, #2130706432	; 0x7f000000
   40260:	orr	r0, r0, #8388608	; 0x800000
   40264:	bx	lr
   40268:	mvns	r2, r2, asr #24
   4026c:	movne	r0, r1
   40270:	mvnseq	r3, r3, asr #24
   40274:	movne	r1, r0
   40278:	lsls	r2, r0, #9
   4027c:	lslseq	r3, r1, #9
   40280:	teqeq	r0, r1
   40284:	orrne	r0, r0, #4194304	; 0x400000
   40288:	bx	lr

0004028c <__aeabi_ui2f>:
   4028c:	mov	r3, #0
   40290:	b	4029c <__aeabi_i2f+0x8>

00040294 <__aeabi_i2f>:
   40294:	ands	r3, r0, #-2147483648	; 0x80000000
   40298:	rsbmi	r0, r0, #0
   4029c:	movs	ip, r0
   402a0:	bxeq	lr
   402a4:	orr	r3, r3, #1258291200	; 0x4b000000
   402a8:	mov	r1, r0
   402ac:	mov	r0, #0
   402b0:	b	402f4 <__aeabi_l2f+0x30>

000402b4 <__aeabi_ul2f>:
   402b4:	orrs	r2, r0, r1
   402b8:	bxeq	lr
   402bc:	mov	r3, #0
   402c0:	b	402dc <__aeabi_l2f+0x18>

000402c4 <__aeabi_l2f>:
   402c4:	orrs	r2, r0, r1
   402c8:	bxeq	lr
   402cc:	ands	r3, r1, #-2147483648	; 0x80000000
   402d0:	bpl	402dc <__aeabi_l2f+0x18>
   402d4:	rsbs	r0, r0, #0
   402d8:	rsc	r1, r1, #0
   402dc:	movs	ip, r1
   402e0:	moveq	ip, r0
   402e4:	moveq	r1, r0
   402e8:	moveq	r0, #0
   402ec:	orr	r3, r3, #1526726656	; 0x5b000000
   402f0:	subeq	r3, r3, #268435456	; 0x10000000
   402f4:	sub	r3, r3, #8388608	; 0x800000
   402f8:	clz	r2, ip
   402fc:	subs	r2, r2, #8
   40300:	sub	r3, r3, r2, lsl #23
   40304:	blt	40324 <__aeabi_l2f+0x60>
   40308:	add	r3, r3, r1, lsl r2
   4030c:	lsl	ip, r0, r2
   40310:	rsb	r2, r2, #32
   40314:	cmp	ip, #-2147483648	; 0x80000000
   40318:	adc	r0, r3, r0, lsr r2
   4031c:	biceq	r0, r0, #1
   40320:	bx	lr
   40324:	add	r2, r2, #32
   40328:	lsl	ip, r1, r2
   4032c:	rsb	r2, r2, #32
   40330:	orrs	r0, r0, ip, lsl #1
   40334:	adc	r0, r3, r1, lsr r2
   40338:	biceq	r0, r0, ip, lsr #31
   4033c:	bx	lr

00040340 <__aeabi_idiv0>:
   40340:	push	{r1, lr}
   40344:	mov	r0, #8
   40348:	bl	1474 <raise@plt>
   4034c:	pop	{r1, pc}

00040350 <__aeabi_f2lz>:
   40350:	vmov	s15, r0
   40354:	vcmpe.f32	s15, #0.0
   40358:	vmrs	APSR_nzcv, fpscr
   4035c:	bmi	40364 <__aeabi_f2lz+0x14>
   40360:	b	403a8 <__aeabi_f2ulz>
   40364:	push	{r4, lr}
   40368:	eor	r0, r0, #-2147483648	; 0x80000000
   4036c:	bl	403a8 <__aeabi_f2ulz>
   40370:	rsbs	r0, r0, #0
   40374:	rsc	r1, r1, #0
   40378:	pop	{r4, pc}

0004037c <__aeabi_d2lz>:
   4037c:	vmov	d7, r0, r1
   40380:	vcmpe.f64	d7, #0.0
   40384:	vmrs	APSR_nzcv, fpscr
   40388:	bmi	40390 <__aeabi_d2lz+0x14>
   4038c:	b	403f0 <__aeabi_d2ulz>
   40390:	push	{r4, lr}
   40394:	eor	r1, r1, #-2147483648	; 0x80000000
   40398:	bl	403f0 <__aeabi_d2ulz>
   4039c:	rsbs	r0, r0, #0
   403a0:	rsc	r1, r1, #0
   403a4:	pop	{r4, pc}

000403a8 <__aeabi_f2ulz>:
   403a8:	vmov	s15, r0
   403ac:	vldr	d6, [pc, #44]	; 403e0 <__aeabi_f2ulz+0x38>
   403b0:	vldr	d5, [pc, #48]	; 403e8 <__aeabi_f2ulz+0x40>
   403b4:	mov	r0, #0
   403b8:	vcvt.f64.f32	d7, s15
   403bc:	vmul.f64	d6, d7, d6
   403c0:	vcvt.u32.f64	s12, d6
   403c4:	vcvt.f64.u32	d4, s12
   403c8:	vmov	r1, s12
   403cc:	vmls.f64	d7, d4, d5
   403d0:	vcvt.u32.f64	s14, d7
   403d4:	vmov	r3, s14
   403d8:	orr	r0, r0, r3
   403dc:	bx	lr
   403e0:	.word	0x00000000
   403e4:	.word	0x3df00000
   403e8:	.word	0x00000000
   403ec:	.word	0x41f00000

000403f0 <__aeabi_d2ulz>:
   403f0:	vmov	d7, r0, r1
   403f4:	vldr	d6, [pc, #44]	; 40428 <__aeabi_d2ulz+0x38>
   403f8:	vldr	d5, [pc, #48]	; 40430 <__aeabi_d2ulz+0x40>
   403fc:	mov	r0, #0
   40400:	vmul.f64	d6, d7, d6
   40404:	vcvt.u32.f64	s12, d6
   40408:	vcvt.f64.u32	d4, s12
   4040c:	vmov	r1, s12
   40410:	vmls.f64	d7, d4, d5
   40414:	vcvt.u32.f64	s14, d7
   40418:	vmov	r3, s14
   4041c:	orr	r0, r0, r3
   40420:	bx	lr
   40424:	nop			; (mov r0, r0)
   40428:	.word	0x00000000
   4042c:	.word	0x3df00000
   40430:	.word	0x00000000
   40434:	.word	0x41f00000

Disassembly of section .fini:

00040438 <_fini>:
   40438:	push	{r3, lr}
   4043c:	pop	{r3, pc}
