
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

000113a0 <.init>:
   113a0:	push	{r3, lr}
   113a4:	bl	114ec <_start@@Base+0x3c>
   113a8:	pop	{r3, pc}

Disassembly of section .plt:

000113ac <strstr@plt-0x14>:
   113ac:	push	{lr}		; (str lr, [sp, #-4]!)
   113b0:	ldr	lr, [pc, #4]	; 113bc <strstr@plt-0x4>
   113b4:	add	lr, pc, lr
   113b8:	ldr	pc, [lr, #8]!
   113bc:	andeq	r2, r1, r4, asr #24

000113c0 <strstr@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #73728	; 0x12000
   113c8:	ldr	pc, [ip, #3140]!	; 0xc44

000113cc <strcmp@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #73728	; 0x12000
   113d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113d8 <mprotect@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #73728	; 0x12000
   113e0:	ldr	pc, [ip, #3124]!	; 0xc34

000113e4 <free@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #73728	; 0x12000
   113ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f0 <memcpy@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #73728	; 0x12000
   113f8:	ldr	pc, [ip, #3108]!	; 0xc24

000113fc <realloc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #73728	; 0x12000
   11404:	ldr	pc, [ip, #3100]!	; 0xc1c

00011408 <malloc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #73728	; 0x12000
   11410:	ldr	pc, [ip, #3092]!	; 0xc14

00011414 <__libc_start_main@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #73728	; 0x12000
   1141c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011420 <__gmon_start__@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #73728	; 0x12000
   11428:	ldr	pc, [ip, #3076]!	; 0xc04

0001142c <strlen@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #73728	; 0x12000
   11434:	ldr	pc, [ip, #3068]!	; 0xbfc

00011438 <mmap@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #73728	; 0x12000
   11440:	ldr	pc, [ip, #3060]!	; 0xbf4

00011444 <strchr@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #73728	; 0x12000
   1144c:	ldr	pc, [ip, #3052]!	; 0xbec

00011450 <fprintf@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #73728	; 0x12000
   11458:	ldr	pc, [ip, #3044]!	; 0xbe4

0001145c <__errno_location@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #73728	; 0x12000
   11464:	ldr	pc, [ip, #3036]!	; 0xbdc

00011468 <snprintf@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #73728	; 0x12000
   11470:	ldr	pc, [ip, #3028]!	; 0xbd4

00011474 <munmap@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #73728	; 0x12000
   1147c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011480 <my_strdup@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #73728	; 0x12000
   11488:	ldr	pc, [ip, #3012]!	; 0xbc4

0001148c <strncmp@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #73728	; 0x12000
   11494:	ldr	pc, [ip, #3004]!	; 0xbbc

00011498 <abort@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #73728	; 0x12000
   114a0:	ldr	pc, [ip, #2996]!	; 0xbb4

Disassembly of section .text:

000114b0 <_start@@Base>:
   114b0:	mov	fp, #0
   114b4:	mov	lr, #0
   114b8:	pop	{r1}		; (ldr r1, [sp], #4)
   114bc:	mov	r2, sp
   114c0:	push	{r2}		; (str r2, [sp, #-4]!)
   114c4:	push	{r0}		; (str r0, [sp, #-4]!)
   114c8:	ldr	ip, [pc, #16]	; 114e0 <_start@@Base+0x30>
   114cc:	push	{ip}		; (str ip, [sp, #-4]!)
   114d0:	ldr	r0, [pc, #12]	; 114e4 <_start@@Base+0x34>
   114d4:	ldr	r3, [pc, #12]	; 114e8 <_start@@Base+0x38>
   114d8:	bl	11414 <__libc_start_main@plt>
   114dc:	bl	11498 <abort@plt>
   114e0:	andeq	r3, r1, ip, asr #5
   114e4:	andeq	r1, r1, r8, asr r8
   114e8:	andeq	r3, r1, ip, ror #4
   114ec:	ldr	r3, [pc, #20]	; 11508 <_start@@Base+0x58>
   114f0:	ldr	r2, [pc, #20]	; 1150c <_start@@Base+0x5c>
   114f4:	add	r3, pc, r3
   114f8:	ldr	r2, [r3, r2]
   114fc:	cmp	r2, #0
   11500:	bxeq	lr
   11504:	b	11420 <__gmon_start__@plt>
   11508:	andeq	r2, r1, r4, lsl #22
   1150c:	andeq	r0, r0, r8, asr r0
   11510:	ldr	r0, [pc, #24]	; 11530 <_start@@Base+0x80>
   11514:	ldr	r3, [pc, #24]	; 11534 <_start@@Base+0x84>
   11518:	cmp	r3, r0
   1151c:	bxeq	lr
   11520:	ldr	r3, [pc, #16]	; 11538 <_start@@Base+0x88>
   11524:	cmp	r3, #0
   11528:	bxeq	lr
   1152c:	bx	r3
   11530:	andeq	r4, r2, r0, ror r0
   11534:	andeq	r4, r2, r0, ror r0
   11538:	andeq	r0, r0, r0
   1153c:	ldr	r0, [pc, #36]	; 11568 <_start@@Base+0xb8>
   11540:	ldr	r1, [pc, #36]	; 1156c <_start@@Base+0xbc>
   11544:	sub	r1, r1, r0
   11548:	asr	r1, r1, #2
   1154c:	add	r1, r1, r1, lsr #31
   11550:	asrs	r1, r1, #1
   11554:	bxeq	lr
   11558:	ldr	r3, [pc, #16]	; 11570 <_start@@Base+0xc0>
   1155c:	cmp	r3, #0
   11560:	bxeq	lr
   11564:	bx	r3
   11568:	andeq	r4, r2, r0, ror r0
   1156c:	andeq	r4, r2, r0, ror r0
   11570:	andeq	r0, r0, r0
   11574:	push	{r4, lr}
   11578:	ldr	r4, [pc, #24]	; 11598 <_start@@Base+0xe8>
   1157c:	ldrb	r3, [r4]
   11580:	cmp	r3, #0
   11584:	popne	{r4, pc}
   11588:	bl	11510 <_start@@Base+0x60>
   1158c:	mov	r3, #1
   11590:	strb	r3, [r4]
   11594:	pop	{r4, pc}
   11598:	andeq	r4, r2, r8, lsl #1
   1159c:	b	1153c <_start@@Base+0x8c>

000115a0 <test_simple_case@@Base>:
   115a0:	push	{fp, lr}
   115a4:	mov	fp, sp
   115a8:	sub	sp, sp, #88	; 0x58
   115ac:	movw	r0, #13028	; 0x32e4
   115b0:	movt	r0, #1
   115b4:	bl	11730 <test_simple_case@@Base+0x190>
   115b8:	movw	r1, #0
   115bc:	str	r0, [sp, #20]
   115c0:	mov	r0, r1
   115c4:	bl	11f64 <mmk_matcher_init@@Base>
   115c8:	sub	r0, fp, #6
   115cc:	sub	r1, fp, #28
   115d0:	mov	r2, r1
   115d4:	vmov.i32	q8, #0	; 0x00000000
   115d8:	vst1.32	{d16-d17}, [r2]!
   115dc:	mov	r3, #0
   115e0:	str	r3, [r2]
   115e4:	str	r0, [fp, #-32]	; 0xffffffe0
   115e8:	sub	r0, fp, #32
   115ec:	str	r0, [fp, #-20]	; 0xffffffec
   115f0:	mov	r0, r1
   115f4:	bl	131a8 <mmk_when_init@@Base>
   115f8:	movw	r0, #6
   115fc:	bl	11408 <malloc@plt>
   11600:	str	r0, [sp, #16]
   11604:	bl	11fa0 <mmk_matcher_term@@Base>
   11608:	movw	r0, #13046	; 0x32f6
   1160c:	movt	r0, #1
   11610:	bl	11480 <my_strdup@plt>
   11614:	str	r0, [fp, #-36]	; 0xffffffdc
   11618:	movw	r0, #1
   1161c:	bl	11f64 <mmk_matcher_init@@Base>
   11620:	ldr	r0, [pc, #260]	; 1172c <test_simple_case@@Base+0x18c>
   11624:	movw	r1, #0
   11628:	bl	11fdc <mmk_matcher_add@@Base>
   1162c:	movw	r0, #6
   11630:	bl	11408 <malloc@plt>
   11634:	str	r0, [sp, #12]
   11638:	bl	11fa0 <mmk_matcher_term@@Base>
   1163c:	movw	r0, #1
   11640:	str	r0, [sp, #24]
   11644:	movw	r1, #0
   11648:	str	r1, [sp, #28]
   1164c:	str	r1, [sp, #32]
   11650:	str	r1, [sp, #36]	; 0x24
   11654:	str	r0, [sp, #40]	; 0x28
   11658:	str	r1, [sp, #44]	; 0x2c
   1165c:	add	r0, sp, #24
   11660:	bl	12bd4 <mmk_verify_times@@Base>
   11664:	str	r0, [fp, #-40]	; 0xffffffd8
   11668:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1166c:	cmp	r0, #0
   11670:	bne	116ac <test_simple_case@@Base+0x10c>
   11674:	movw	r0, #16496	; 0x4070
   11678:	movt	r0, #2
   1167c:	ldr	r0, [r0]
   11680:	movw	r1, #13052	; 0x32fc
   11684:	movt	r1, #1
   11688:	movw	r2, #13081	; 0x3319
   1168c:	movt	r2, #1
   11690:	movw	r3, #23
   11694:	movw	ip, #13147	; 0x335b
   11698:	movt	ip, #1
   1169c:	str	ip, [sp]
   116a0:	bl	11450 <fprintf@plt>
   116a4:	str	r0, [sp, #8]
   116a8:	bl	11498 <abort@plt>
   116ac:	b	116b0 <test_simple_case@@Base+0x110>
   116b0:	b	116b4 <test_simple_case@@Base+0x114>
   116b4:	sub	r0, fp, #6
   116b8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   116bc:	cmp	r1, r0
   116c0:	bne	116dc <test_simple_case@@Base+0x13c>
   116c4:	sub	r1, fp, #6
   116c8:	movw	r0, #16484	; 0x4064
   116cc:	movt	r0, #2
   116d0:	bl	113cc <strcmp@plt>
   116d4:	cmp	r0, #0
   116d8:	beq	11714 <test_simple_case@@Base+0x174>
   116dc:	movw	r0, #16496	; 0x4070
   116e0:	movt	r0, #2
   116e4:	ldr	r0, [r0]
   116e8:	movw	r1, #13052	; 0x32fc
   116ec:	movt	r1, #1
   116f0:	movw	r2, #13081	; 0x3319
   116f4:	movt	r2, #1
   116f8:	movw	r3, #24
   116fc:	movw	ip, #13152	; 0x3360
   11700:	movt	ip, #1
   11704:	str	ip, [sp]
   11708:	bl	11450 <fprintf@plt>
   1170c:	str	r0, [sp, #4]
   11710:	bl	11498 <abort@plt>
   11714:	b	11718 <test_simple_case@@Base+0x178>
   11718:	movw	r0, #5128	; 0x1408
   1171c:	movt	r0, #1
   11720:	bl	11f44 <mmk_reset@@Base>
   11724:	mov	sp, fp
   11728:	pop	{fp, pc}
   1172c:	andhi	r0, r0, sl
   11730:	push	{fp, lr}
   11734:	mov	fp, sp
   11738:	sub	sp, sp, #8
   1173c:	movw	r1, #6272	; 0x1880
   11740:	movt	r1, #1
   11744:	str	r0, [sp, #4]
   11748:	ldr	r0, [sp, #4]
   1174c:	bl	1204c <mmk_mock_create_internal@@Base>
   11750:	mov	sp, fp
   11754:	pop	{fp, pc}

00011758 <test_error_case@@Base>:
   11758:	push	{fp, lr}
   1175c:	mov	fp, sp
   11760:	sub	sp, sp, #56	; 0x38
   11764:	movw	r0, #13028	; 0x32e4
   11768:	movt	r0, #1
   1176c:	bl	11730 <test_simple_case@@Base+0x190>
   11770:	str	r0, [fp, #-4]
   11774:	movw	r0, #0
   11778:	bl	11f64 <mmk_matcher_init@@Base>
   1177c:	movw	r0, #0
   11780:	str	r0, [fp, #-24]	; 0xffffffe8
   11784:	movw	r1, #12
   11788:	str	r1, [fp, #-20]	; 0xffffffec
   1178c:	str	r0, [sp, #28]
   11790:	add	r1, sp, #28
   11794:	str	r1, [fp, #-16]
   11798:	str	r0, [fp, #-12]
   1179c:	str	r0, [fp, #-8]
   117a0:	sub	r0, fp, #24
   117a4:	bl	131a8 <mmk_when_init@@Base>
   117a8:	ldr	r0, [fp, #-4]
   117ac:	movw	r1, #0
   117b0:	str	r0, [sp, #16]
   117b4:	mov	r0, r1
   117b8:	movw	r1, #1
   117bc:	bl	11fdc <mmk_matcher_add@@Base>
   117c0:	movw	r0, #0
   117c4:	str	r0, [sp, #24]
   117c8:	ldr	r0, [sp, #24]
   117cc:	ldr	r1, [sp, #16]
   117d0:	blx	r1
   117d4:	str	r0, [sp, #12]
   117d8:	bl	11fa0 <mmk_matcher_term@@Base>
   117dc:	movw	r0, #13184	; 0x3380
   117e0:	movt	r0, #1
   117e4:	bl	11480 <my_strdup@plt>
   117e8:	str	r0, [sp, #20]
   117ec:	ldr	r0, [sp, #20]
   117f0:	movw	r1, #0
   117f4:	cmp	r0, r1
   117f8:	bne	1180c <test_error_case@@Base+0xb4>
   117fc:	bl	1145c <__errno_location@plt>
   11800:	ldr	r0, [r0]
   11804:	cmp	r0, #12
   11808:	beq	11844 <test_error_case@@Base+0xec>
   1180c:	movw	r0, #16496	; 0x4070
   11810:	movt	r0, #2
   11814:	ldr	r0, [r0]
   11818:	movw	r1, #13052	; 0x32fc
   1181c:	movt	r1, #1
   11820:	movw	r2, #13081	; 0x3319
   11824:	movt	r2, #1
   11828:	movw	r3, #39	; 0x27
   1182c:	movw	ip, #13188	; 0x3384
   11830:	movt	ip, #1
   11834:	str	ip, [sp]
   11838:	bl	11450 <fprintf@plt>
   1183c:	str	r0, [sp, #8]
   11840:	bl	11498 <abort@plt>
   11844:	b	11848 <test_error_case@@Base+0xf0>
   11848:	ldr	r0, [fp, #-4]
   1184c:	bl	11f44 <mmk_reset@@Base>
   11850:	mov	sp, fp
   11854:	pop	{fp, pc}

00011858 <main@@Base>:
   11858:	push	{fp, lr}
   1185c:	mov	fp, sp
   11860:	sub	sp, sp, #8
   11864:	movw	r0, #0
   11868:	str	r0, [sp, #4]
   1186c:	bl	115a0 <test_simple_case@@Base>
   11870:	bl	11758 <test_error_case@@Base>
   11874:	movw	r0, #0
   11878:	mov	sp, fp
   1187c:	pop	{fp, pc}
   11880:	push	{fp, lr}
   11884:	mov	fp, sp
   11888:	sub	sp, sp, #128	; 0x80
   1188c:	str	r0, [fp, #-8]
   11890:	b	11894 <main@@Base+0x3c>
   11894:	bl	11fc0 <mmk_matcher_ctx@@Base>
   11898:	str	r0, [fp, #-12]
   1189c:	ldr	r0, [fp, #-12]
   118a0:	movw	r1, #0
   118a4:	cmp	r0, r1
   118a8:	beq	11b34 <main@@Base+0x2dc>
   118ac:	bl	129b0 <mmk_ctx@@Base>
   118b0:	bl	12820 <mmk_stub_context@@Base>
   118b4:	str	r0, [fp, #-16]
   118b8:	ldr	r0, [fp, #-12]
   118bc:	ldr	r0, [r0]
   118c0:	cmp	r0, #0
   118c4:	bne	1191c <main@@Base+0xc4>
   118c8:	movw	r0, #44	; 0x2c
   118cc:	bl	13048 <mmk_malloc@@Base>
   118d0:	str	r0, [fp, #-20]	; 0xffffffec
   118d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   118d8:	add	r0, r0, #8
   118dc:	str	r0, [sp, #32]
   118e0:	bl	131c8 <mmk_when_get_result@@Base>
   118e4:	ldr	r1, [sp, #32]
   118e8:	str	r0, [sp, #28]
   118ec:	mov	r0, r1
   118f0:	ldr	r1, [sp, #28]
   118f4:	movw	r2, #20
   118f8:	bl	113f0 <memcpy@plt>
   118fc:	ldr	r0, [fp, #-8]
   11900:	ldr	r1, [fp, #-20]	; 0xffffffec
   11904:	str	r0, [r1, #40]	; 0x28
   11908:	b	1190c <main@@Base+0xb4>
   1190c:	ldr	r0, [fp, #-16]
   11910:	ldr	r1, [fp, #-20]	; 0xffffffec
   11914:	bl	131e4 <mmk_when_impl@@Base>
   11918:	b	11b18 <main@@Base+0x2c0>
   1191c:	ldr	r0, [fp, #-12]
   11920:	ldr	r0, [r0]
   11924:	cmp	r0, #1
   11928:	bne	11b14 <main@@Base+0x2bc>
   1192c:	movw	r0, #0
   11930:	str	r0, [fp, #-24]	; 0xffffffe8
   11934:	ldr	r0, [fp, #-16]
   11938:	bl	12234 <mmk_mock_params_begin@@Base>
   1193c:	str	r0, [fp, #-28]	; 0xffffffe4
   11940:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11944:	movw	r1, #0
   11948:	cmp	r0, r1
   1194c:	beq	11ad4 <main@@Base+0x27c>
   11950:	ldr	r0, [fp, #-12]
   11954:	str	r0, [fp, #-32]	; 0xffffffe0
   11958:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1195c:	ldr	r0, [r0, #8]
   11960:	movw	r1, #0
   11964:	cmp	r0, r1
   11968:	beq	11a7c <main@@Base+0x224>
   1196c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11970:	ldr	r0, [r0, #8]
   11974:	str	r0, [fp, #-32]	; 0xffffffe0
   11978:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1197c:	ldr	r0, [r0]
   11980:	cmp	r0, #0
   11984:	bne	1198c <main@@Base+0x134>
   11988:	b	11a78 <main@@Base+0x220>
   1198c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11990:	ldr	r0, [r0]
   11994:	and	r0, r0, #-2147483648	; 0x80000000
   11998:	cmp	r0, #0
   1199c:	beq	11a28 <main@@Base+0x1d0>
   119a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   119a4:	add	r0, r0, #12
   119a8:	sub	r1, fp, #8
   119ac:	movw	r2, #4
   119b0:	bl	12e60 <mmk_memcmp@@Base>
   119b4:	str	r0, [fp, #-36]	; 0xffffffdc
   119b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   119bc:	cmp	r0, #0
   119c0:	bne	119dc <main@@Base+0x184>
   119c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   119c8:	ldr	r0, [r0]
   119cc:	and	r0, r0, #2
   119d0:	cmp	r0, #0
   119d4:	bne	119dc <main@@Base+0x184>
   119d8:	b	11abc <main@@Base+0x264>
   119dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   119e0:	cmp	r0, #0
   119e4:	bge	11a00 <main@@Base+0x1a8>
   119e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   119ec:	ldr	r0, [r0]
   119f0:	and	r0, r0, #4
   119f4:	cmp	r0, #0
   119f8:	bne	11a00 <main@@Base+0x1a8>
   119fc:	b	11abc <main@@Base+0x264>
   11a00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11a04:	cmp	r0, #0
   11a08:	ble	11a24 <main@@Base+0x1cc>
   11a0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a10:	ldr	r0, [r0]
   11a14:	and	r0, r0, #8
   11a18:	cmp	r0, #0
   11a1c:	bne	11a24 <main@@Base+0x1cc>
   11a20:	b	11abc <main@@Base+0x264>
   11a24:	b	11a74 <main@@Base+0x21c>
   11a28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a2c:	ldr	r0, [r0]
   11a30:	cmp	r0, #1
   11a34:	bne	11a70 <main@@Base+0x218>
   11a38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a3c:	bl	12044 <mmk_matcher_get_predicate@@Base>
   11a40:	str	r0, [fp, #-40]	; 0xffffffd8
   11a44:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11a48:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11a4c:	ldr	r1, [r1, #12]
   11a50:	str	r0, [sp, #24]
   11a54:	mov	r0, r1
   11a58:	ldr	r1, [sp, #24]
   11a5c:	blx	r1
   11a60:	cmp	r0, #0
   11a64:	bne	11a6c <main@@Base+0x214>
   11a68:	b	11abc <main@@Base+0x264>
   11a6c:	b	11a70 <main@@Base+0x218>
   11a70:	b	11a74 <main@@Base+0x21c>
   11a74:	b	11a78 <main@@Base+0x220>
   11a78:	b	11aa0 <main@@Base+0x248>
   11a7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11a80:	add	r0, r0, #12
   11a84:	sub	r1, fp, #8
   11a88:	movw	r2, #4
   11a8c:	bl	12e60 <mmk_memcmp@@Base>
   11a90:	cmp	r0, #0
   11a94:	beq	11a9c <main@@Base+0x244>
   11a98:	b	11abc <main@@Base+0x264>
   11a9c:	b	11aa0 <main@@Base+0x248>
   11aa0:	b	11aa4 <main@@Base+0x24c>
   11aa4:	b	11aa8 <main@@Base+0x250>
   11aa8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11aac:	ldr	r0, [r0]
   11ab0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11ab4:	add	r0, r1, r0
   11ab8:	str	r0, [fp, #-24]	; 0xffffffe8
   11abc:	b	11ac0 <main@@Base+0x268>
   11ac0:	ldr	r0, [fp, #-16]
   11ac4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11ac8:	bl	12254 <mmk_mock_params_next@@Base>
   11acc:	str	r0, [fp, #-28]	; 0xffffffe4
   11ad0:	b	11940 <main@@Base+0xe8>
   11ad4:	ldr	r0, [fp, #-12]
   11ad8:	str	r0, [fp, #-44]	; 0xffffffd4
   11adc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11ae0:	movw	r1, #0
   11ae4:	cmp	r0, r1
   11ae8:	beq	11b0c <main@@Base+0x2b4>
   11aec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11af0:	ldr	r0, [r0, #8]
   11af4:	str	r0, [fp, #-48]	; 0xffffffd0
   11af8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11afc:	bl	13068 <mmk_free@@Base>
   11b00:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11b04:	str	r0, [fp, #-44]	; 0xffffffd4
   11b08:	b	11adc <main@@Base+0x284>
   11b0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11b10:	bl	12bb4 <mmk_verify_set_times@@Base>
   11b14:	b	11b18 <main@@Base+0x2c0>
   11b18:	b	11b1c <main@@Base+0x2c4>
   11b1c:	b	11b20 <main@@Base+0x2c8>
   11b20:	movw	r0, #16524	; 0x408c
   11b24:	movt	r0, #2
   11b28:	ldr	r0, [r0]
   11b2c:	str	r0, [fp, #-4]
   11b30:	b	11e54 <main@@Base+0x5fc>
   11b34:	movw	r0, #0
   11b38:	str	r0, [sp, #60]	; 0x3c
   11b3c:	str	r0, [sp, #64]	; 0x40
   11b40:	str	r0, [sp, #68]	; 0x44
   11b44:	ldr	r0, [fp, #-8]
   11b48:	str	r0, [sp, #72]	; 0x48
   11b4c:	add	r0, sp, #60	; 0x3c
   11b50:	str	r0, [fp, #-52]	; 0xffffffcc
   11b54:	b	11b58 <main@@Base+0x300>
   11b58:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11b5c:	movw	r1, #16
   11b60:	bl	12c6c <mmk_verify_register_call@@Base>
   11b64:	bl	1227c <mmk_mock_get_params@@Base>
   11b68:	str	r0, [sp, #56]	; 0x38
   11b6c:	ldr	r0, [sp, #56]	; 0x38
   11b70:	movw	r1, #0
   11b74:	cmp	r0, r1
   11b78:	beq	11e3c <main@@Base+0x5e4>
   11b7c:	ldr	r0, [sp, #56]	; 0x38
   11b80:	str	r0, [sp, #52]	; 0x34
   11b84:	ldr	r0, [sp, #56]	; 0x38
   11b88:	ldr	r0, [r0]
   11b8c:	str	r0, [sp, #48]	; 0x30
   11b90:	ldr	r0, [sp, #48]	; 0x30
   11b94:	ldr	r0, [r0, #8]
   11b98:	movw	r1, #0
   11b9c:	cmp	r0, r1
   11ba0:	beq	11cb8 <main@@Base+0x460>
   11ba4:	ldr	r0, [sp, #48]	; 0x30
   11ba8:	ldr	r0, [r0, #8]
   11bac:	str	r0, [sp, #48]	; 0x30
   11bb0:	ldr	r0, [sp, #48]	; 0x30
   11bb4:	ldr	r0, [r0]
   11bb8:	cmp	r0, #0
   11bbc:	bne	11bc4 <main@@Base+0x36c>
   11bc0:	b	11cb4 <main@@Base+0x45c>
   11bc4:	ldr	r0, [sp, #48]	; 0x30
   11bc8:	ldr	r0, [r0]
   11bcc:	and	r0, r0, #-2147483648	; 0x80000000
   11bd0:	cmp	r0, #0
   11bd4:	beq	11c68 <main@@Base+0x410>
   11bd8:	sub	r0, fp, #8
   11bdc:	mov	r1, r0
   11be0:	str	r0, [sp, #20]
   11be4:	mov	r0, r1
   11be8:	ldr	r1, [sp, #20]
   11bec:	movw	r2, #4
   11bf0:	bl	12e60 <mmk_memcmp@@Base>
   11bf4:	str	r0, [sp, #44]	; 0x2c
   11bf8:	ldr	r0, [sp, #44]	; 0x2c
   11bfc:	cmp	r0, #0
   11c00:	bne	11c1c <main@@Base+0x3c4>
   11c04:	ldr	r0, [sp, #48]	; 0x30
   11c08:	ldr	r0, [r0]
   11c0c:	and	r0, r0, #2
   11c10:	cmp	r0, #0
   11c14:	bne	11c1c <main@@Base+0x3c4>
   11c18:	b	11e2c <main@@Base+0x5d4>
   11c1c:	ldr	r0, [sp, #44]	; 0x2c
   11c20:	cmp	r0, #0
   11c24:	bge	11c40 <main@@Base+0x3e8>
   11c28:	ldr	r0, [sp, #48]	; 0x30
   11c2c:	ldr	r0, [r0]
   11c30:	and	r0, r0, #4
   11c34:	cmp	r0, #0
   11c38:	bne	11c40 <main@@Base+0x3e8>
   11c3c:	b	11e2c <main@@Base+0x5d4>
   11c40:	ldr	r0, [sp, #44]	; 0x2c
   11c44:	cmp	r0, #0
   11c48:	ble	11c64 <main@@Base+0x40c>
   11c4c:	ldr	r0, [sp, #48]	; 0x30
   11c50:	ldr	r0, [r0]
   11c54:	and	r0, r0, #8
   11c58:	cmp	r0, #0
   11c5c:	bne	11c64 <main@@Base+0x40c>
   11c60:	b	11e2c <main@@Base+0x5d4>
   11c64:	b	11cb0 <main@@Base+0x458>
   11c68:	ldr	r0, [sp, #48]	; 0x30
   11c6c:	ldr	r0, [r0]
   11c70:	cmp	r0, #1
   11c74:	bne	11cac <main@@Base+0x454>
   11c78:	ldr	r0, [sp, #48]	; 0x30
   11c7c:	bl	12044 <mmk_matcher_get_predicate@@Base>
   11c80:	str	r0, [sp, #40]	; 0x28
   11c84:	ldr	r0, [sp, #40]	; 0x28
   11c88:	ldr	r1, [fp, #-8]
   11c8c:	str	r0, [sp, #16]
   11c90:	mov	r0, r1
   11c94:	ldr	r1, [sp, #16]
   11c98:	blx	r1
   11c9c:	cmp	r0, #0
   11ca0:	bne	11ca8 <main@@Base+0x450>
   11ca4:	b	11e2c <main@@Base+0x5d4>
   11ca8:	b	11cac <main@@Base+0x454>
   11cac:	b	11cb0 <main@@Base+0x458>
   11cb0:	b	11cb4 <main@@Base+0x45c>
   11cb4:	b	11ce0 <main@@Base+0x488>
   11cb8:	sub	r0, fp, #8
   11cbc:	ldr	r1, [sp, #52]	; 0x34
   11cc0:	add	r1, r1, #28
   11cc4:	add	r1, r1, #12
   11cc8:	movw	r2, #4
   11ccc:	bl	12e60 <mmk_memcmp@@Base>
   11cd0:	cmp	r0, #0
   11cd4:	beq	11cdc <main@@Base+0x484>
   11cd8:	b	11e2c <main@@Base+0x5d4>
   11cdc:	b	11ce0 <main@@Base+0x488>
   11ce0:	ldr	r0, [sp, #52]	; 0x34
   11ce4:	ldr	r0, [r0, #12]
   11ce8:	cmp	r0, #0
   11cec:	beq	11d08 <main@@Base+0x4b0>
   11cf0:	ldr	r0, [sp, #52]	; 0x34
   11cf4:	ldr	r0, [r0, #12]
   11cf8:	str	r0, [sp, #12]
   11cfc:	bl	1145c <__errno_location@plt>
   11d00:	ldr	r1, [sp, #12]
   11d04:	str	r1, [r0]
   11d08:	ldr	r0, [sp, #52]	; 0x34
   11d0c:	ldr	r0, [r0, #20]
   11d10:	movw	r1, #0
   11d14:	cmp	r0, r1
   11d18:	beq	11d74 <main@@Base+0x51c>
   11d1c:	ldr	r0, [sp, #52]	; 0x34
   11d20:	ldr	r0, [r0, #16]
   11d24:	movw	r1, #0
   11d28:	cmp	r0, r1
   11d2c:	bne	11d74 <main@@Base+0x51c>
   11d30:	b	11d34 <main@@Base+0x4dc>
   11d34:	b	11d38 <main@@Base+0x4e0>
   11d38:	b	11d3c <main@@Base+0x4e4>
   11d3c:	ldr	r0, [sp, #52]	; 0x34
   11d40:	ldr	r0, [r0, #20]
   11d44:	ldr	r1, [fp, #-8]
   11d48:	str	r0, [sp, #8]
   11d4c:	mov	r0, r1
   11d50:	ldr	r1, [sp, #8]
   11d54:	blx	r1
   11d58:	str	r0, [sp, #36]	; 0x24
   11d5c:	b	11d60 <main@@Base+0x508>
   11d60:	b	11d64 <main@@Base+0x50c>
   11d64:	b	11d68 <main@@Base+0x510>
   11d68:	ldr	r0, [sp, #36]	; 0x24
   11d6c:	str	r0, [fp, #-4]
   11d70:	b	11e54 <main@@Base+0x5fc>
   11d74:	ldr	r0, [sp, #52]	; 0x34
   11d78:	ldr	r0, [r0, #20]
   11d7c:	movw	r1, #0
   11d80:	cmp	r0, r1
   11d84:	beq	11de0 <main@@Base+0x588>
   11d88:	ldr	r0, [sp, #52]	; 0x34
   11d8c:	ldr	r0, [r0, #16]
   11d90:	movw	r1, #0
   11d94:	cmp	r0, r1
   11d98:	beq	11de0 <main@@Base+0x588>
   11d9c:	b	11da0 <main@@Base+0x548>
   11da0:	b	11da4 <main@@Base+0x54c>
   11da4:	ldr	r0, [sp, #52]	; 0x34
   11da8:	ldr	r0, [r0, #20]
   11dac:	ldr	r1, [fp, #-8]
   11db0:	str	r0, [sp, #4]
   11db4:	mov	r0, r1
   11db8:	ldr	r1, [sp, #4]
   11dbc:	blx	r1
   11dc0:	b	11dc4 <main@@Base+0x56c>
   11dc4:	b	11dc8 <main@@Base+0x570>
   11dc8:	b	11dcc <main@@Base+0x574>
   11dcc:	ldr	r0, [sp, #52]	; 0x34
   11dd0:	ldr	r0, [r0, #16]
   11dd4:	ldr	r0, [r0]
   11dd8:	str	r0, [fp, #-4]
   11ddc:	b	11e54 <main@@Base+0x5fc>
   11de0:	ldr	r0, [sp, #52]	; 0x34
   11de4:	ldr	r0, [r0, #16]
   11de8:	movw	r1, #0
   11dec:	cmp	r0, r1
   11df0:	beq	11e10 <main@@Base+0x5b8>
   11df4:	b	11df8 <main@@Base+0x5a0>
   11df8:	b	11dfc <main@@Base+0x5a4>
   11dfc:	ldr	r0, [sp, #52]	; 0x34
   11e00:	ldr	r0, [r0, #16]
   11e04:	ldr	r0, [r0]
   11e08:	str	r0, [fp, #-4]
   11e0c:	b	11e54 <main@@Base+0x5fc>
   11e10:	b	11e14 <main@@Base+0x5bc>
   11e14:	b	11e18 <main@@Base+0x5c0>
   11e18:	movw	r0, #16524	; 0x408c
   11e1c:	movt	r0, #2
   11e20:	ldr	r0, [r0]
   11e24:	str	r0, [fp, #-4]
   11e28:	b	11e54 <main@@Base+0x5fc>
   11e2c:	ldr	r0, [sp, #56]	; 0x38
   11e30:	ldr	r0, [r0, #4]
   11e34:	str	r0, [sp, #56]	; 0x38
   11e38:	b	11b6c <main@@Base+0x314>
   11e3c:	b	11e40 <main@@Base+0x5e8>
   11e40:	b	11e44 <main@@Base+0x5ec>
   11e44:	movw	r0, #16524	; 0x408c
   11e48:	movt	r0, #2
   11e4c:	ldr	r0, [r0]
   11e50:	str	r0, [fp, #-4]
   11e54:	ldr	r0, [fp, #-4]
   11e58:	mov	sp, fp
   11e5c:	pop	{fp, pc}

00011e60 <mmk_init@@Base>:
   11e60:	push	{r4, sl, fp, lr}
   11e64:	add	fp, sp, #8
   11e68:	sub	sp, sp, #8
   11e6c:	movw	r4, #16528	; 0x4090
   11e70:	movt	r4, #2
   11e74:	ldrb	r0, [r4]
   11e78:	cmp	r0, #0
   11e7c:	bne	11ea4 <mmk_init@@Base+0x44>
   11e80:	bl	12294 <plt_init_ctx@@Base>
   11e84:	movw	r1, #16532	; 0x4094
   11e88:	movt	r1, #2
   11e8c:	str	r0, [r1]
   11e90:	cmn	r0, #1
   11e94:	beq	11eac <mmk_init@@Base+0x4c>
   11e98:	bl	13078 <mmk_init_vital_functions@@Base>
   11e9c:	mov	r0, #1
   11ea0:	strb	r0, [r4]
   11ea4:	sub	sp, fp, #8
   11ea8:	pop	{r4, sl, fp, pc}
   11eac:	movw	r0, #16496	; 0x4070
   11eb0:	movt	r0, #2
   11eb4:	ldr	r0, [r0]
   11eb8:	movw	r1, #13275	; 0x33db
   11ebc:	movt	r1, #1
   11ec0:	str	r1, [sp]
   11ec4:	movw	r1, #13052	; 0x32fc
   11ec8:	movt	r1, #1
   11ecc:	movw	r2, #13219	; 0x33a3
   11ed0:	movt	r2, #1
   11ed4:	mov	r3, #45	; 0x2d
   11ed8:	bl	11450 <fprintf@plt>
   11edc:	bl	11498 <abort@plt>

00011ee0 <mmk_plt_ctx@@Base>:
   11ee0:	push	{fp, lr}
   11ee4:	mov	fp, sp
   11ee8:	sub	sp, sp, #8
   11eec:	movw	r0, #16528	; 0x4090
   11ef0:	movt	r0, #2
   11ef4:	ldrb	r0, [r0]
   11ef8:	cmp	r0, #0
   11efc:	movwne	r0, #16532	; 0x4094
   11f00:	movtne	r0, #2
   11f04:	ldrne	r0, [r0]
   11f08:	movne	sp, fp
   11f0c:	popne	{fp, pc}
   11f10:	movw	r0, #16496	; 0x4070
   11f14:	movt	r0, #2
   11f18:	ldr	r0, [r0]
   11f1c:	movw	r1, #13298	; 0x33f2
   11f20:	movt	r1, #1
   11f24:	str	r1, [sp]
   11f28:	movw	r1, #13052	; 0x32fc
   11f2c:	movt	r1, #1
   11f30:	movw	r2, #13219	; 0x33a3
   11f34:	movt	r2, #1
   11f38:	mov	r3, #54	; 0x36
   11f3c:	bl	11450 <fprintf@plt>
   11f40:	bl	11498 <abort@plt>

00011f44 <mmk_reset@@Base>:
   11f44:	cmp	r0, #0
   11f48:	bxeq	lr
   11f4c:	push	{fp, lr}
   11f50:	mov	fp, sp
   11f54:	bl	12a80 <mmk_ask_ctx@@Base>
   11f58:	bl	12820 <mmk_stub_context@@Base>
   11f5c:	pop	{fp, lr}
   11f60:	b	121ac <mmk_mock_destroy_internal@@Base>

00011f64 <mmk_matcher_init@@Base>:
   11f64:	push	{r4, sl, fp, lr}
   11f68:	add	fp, sp, #8
   11f6c:	mov	r4, r0
   11f70:	mov	r0, #12
   11f74:	bl	13048 <mmk_malloc@@Base>
   11f78:	mov	r1, r0
   11f7c:	mov	r0, #0
   11f80:	str	r4, [r1]
   11f84:	str	r0, [r1, #4]
   11f88:	str	r0, [r1, #8]
   11f8c:	ldr	r2, [pc, #8]	; 11f9c <mmk_matcher_init@@Base+0x38>
   11f90:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   11f94:	str	r1, [r0, r2]
   11f98:	pop	{r4, sl, fp, pc}
   11f9c:	andeq	r0, r0, r8

00011fa0 <mmk_matcher_term@@Base>:
   11fa0:	push	{fp, lr}
   11fa4:	mov	fp, sp
   11fa8:	ldr	r1, [pc, #12]	; 11fbc <mmk_matcher_term@@Base+0x1c>
   11fac:	mov	r2, #0
   11fb0:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   11fb4:	str	r2, [r0, r1]
   11fb8:	pop	{fp, pc}
   11fbc:	andeq	r0, r0, r8

00011fc0 <mmk_matcher_ctx@@Base>:
   11fc0:	push	{fp, lr}
   11fc4:	mov	fp, sp
   11fc8:	ldr	r1, [pc, #8]	; 11fd8 <mmk_matcher_ctx@@Base+0x18>
   11fcc:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   11fd0:	ldr	r0, [r0, r1]
   11fd4:	pop	{fp, pc}
   11fd8:	andeq	r0, r0, r8

00011fdc <mmk_matcher_add@@Base>:
   11fdc:	push	{r4, r5, fp, lr}
   11fe0:	add	fp, sp, #8
   11fe4:	mov	r4, r1
   11fe8:	mov	r5, r0
   11fec:	mov	r0, #12
   11ff0:	bl	13048 <mmk_malloc@@Base>
   11ff4:	mov	r1, r0
   11ff8:	ldr	r2, [pc, #64]	; 12040 <mmk_matcher_add@@Base+0x64>
   11ffc:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   12000:	ldr	r0, [r0, r2]
   12004:	mov	r2, #0
   12008:	str	r5, [r1]
   1200c:	str	r4, [r1, #4]
   12010:	str	r2, [r1, #8]
   12014:	mov	r2, r0
   12018:	ldr	r0, [r0, #8]
   1201c:	cmp	r0, #0
   12020:	beq	12030 <mmk_matcher_add@@Base+0x54>
   12024:	ldr	r3, [r0, #4]
   12028:	cmp	r3, r4
   1202c:	bcc	12014 <mmk_matcher_add@@Base+0x38>
   12030:	ldr	r0, [r2, #8]
   12034:	str	r0, [r1, #8]
   12038:	str	r1, [r2, #8]
   1203c:	pop	{r4, r5, fp, pc}
   12040:	andeq	r0, r0, r8

00012044 <mmk_matcher_get_predicate@@Base>:
   12044:	add	r0, r0, #12
   12048:	bx	lr

0001204c <mmk_mock_create_internal@@Base>:
   1204c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12050:	add	fp, sp, #24
   12054:	sub	sp, sp, #8
   12058:	mov	r8, r1
   1205c:	mov	r9, r0
   12060:	bl	11e60 <mmk_init@@Base>
   12064:	mov	r0, #20
   12068:	bl	13048 <mmk_malloc@@Base>
   1206c:	cmp	r0, #0
   12070:	beq	12158 <mmk_mock_create_internal@@Base+0x10c>
   12074:	mov	r4, r0
   12078:	vmov.i32	q8, #0	; 0x00000000
   1207c:	vst1.32	{d16-d17}, [r0]!
   12080:	mov	r1, #0
   12084:	str	r1, [r0]
   12088:	mov	r0, r9
   1208c:	mov	r1, #64	; 0x40
   12090:	bl	12f38 <mmk_strchr@@Base>
   12094:	mov	r5, r0
   12098:	cmp	r0, #0
   1209c:	beq	120a8 <mmk_mock_create_internal@@Base+0x5c>
   120a0:	sub	r6, r5, r9
   120a4:	b	120b4 <mmk_mock_create_internal@@Base+0x68>
   120a8:	mov	r0, r9
   120ac:	bl	12fdc <mmk_strlen@@Base>
   120b0:	mov	r6, r0
   120b4:	add	r0, r6, #1
   120b8:	bl	13048 <mmk_malloc@@Base>
   120bc:	mov	r7, r0
   120c0:	mov	r1, r9
   120c4:	mov	r2, r6
   120c8:	bl	12f94 <mmk_strncpy@@Base>
   120cc:	mov	r0, #0
   120d0:	strb	r0, [r7, r6]
   120d4:	cmp	r5, #0
   120d8:	beq	12100 <mmk_mock_create_internal@@Base+0xb4>
   120dc:	add	r0, r5, #1
   120e0:	movw	r1, #13375	; 0x343f
   120e4:	movt	r1, #1
   120e8:	mov	r2, #4
   120ec:	bl	12ec8 <mmk_strneq@@Base>
   120f0:	mov	r5, r0
   120f4:	cmp	r0, #0
   120f8:	movwne	r5, #1
   120fc:	b	12104 <mmk_mock_create_internal@@Base+0xb8>
   12100:	mov	r5, #1
   12104:	mov	r0, r9
   12108:	mov	r1, r8
   1210c:	mov	r2, r4
   12110:	bl	129cc <mmk_stub_create@@Base>
   12114:	str	r0, [r4, #4]
   12118:	cmp	r0, #0
   1211c:	beq	1218c <mmk_mock_create_internal@@Base+0x140>
   12120:	cmp	r5, #0
   12124:	bne	12140 <mmk_mock_create_internal@@Base+0xf4>
   12128:	mov	r0, r7
   1212c:	mov	r1, r8
   12130:	mov	r2, r4
   12134:	bl	129cc <mmk_stub_create@@Base>
   12138:	ldr	r1, [r4, #4]
   1213c:	str	r0, [r1, #36]	; 0x24
   12140:	mov	r0, r7
   12144:	bl	13068 <mmk_free@@Base>
   12148:	ldr	r0, [r4, #4]
   1214c:	ldr	r0, [r0, #32]
   12150:	sub	sp, fp, #24
   12154:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12158:	movw	r0, #16496	; 0x4070
   1215c:	movt	r0, #2
   12160:	ldr	r0, [r0]
   12164:	movw	r1, #13371	; 0x343b
   12168:	movt	r1, #1
   1216c:	str	r1, [sp]
   12170:	movw	r1, #13052	; 0x32fc
   12174:	movt	r1, #1
   12178:	movw	r2, #13315	; 0x3403
   1217c:	movt	r2, #1
   12180:	mov	r3, #36	; 0x24
   12184:	bl	11450 <fprintf@plt>
   12188:	bl	11498 <abort@plt>
   1218c:	movw	r0, #16496	; 0x4070
   12190:	movt	r0, #2
   12194:	ldr	r0, [r0]
   12198:	movw	r1, #13380	; 0x3444
   1219c:	movt	r1, #1
   121a0:	mov	r2, r9
   121a4:	bl	11450 <fprintf@plt>
   121a8:	bl	11498 <abort@plt>

000121ac <mmk_mock_destroy_internal@@Base>:
   121ac:	push	{r4, r5, r6, r7, fp, lr}
   121b0:	add	fp, sp, #16
   121b4:	mov	r4, r0
   121b8:	ldr	r0, [r0, #4]
   121bc:	cmp	r0, #0
   121c0:	beq	121d8 <mmk_mock_destroy_internal@@Base+0x2c>
   121c4:	ldr	r5, [r0, #36]	; 0x24
   121c8:	bl	12a64 <mmk_stub_destroy@@Base>
   121cc:	cmp	r5, #0
   121d0:	mov	r0, r5
   121d4:	bne	121c4 <mmk_mock_destroy_internal@@Base+0x18>
   121d8:	ldr	r0, [r4, #8]
   121dc:	bl	13068 <mmk_free@@Base>
   121e0:	ldr	r5, [r4]
   121e4:	cmp	r5, #0
   121e8:	bne	12204 <mmk_mock_destroy_internal@@Base+0x58>
   121ec:	b	12228 <mmk_mock_destroy_internal@@Base+0x7c>
   121f0:	mov	r0, r5
   121f4:	bl	13068 <mmk_free@@Base>
   121f8:	cmp	r6, #0
   121fc:	mov	r5, r6
   12200:	beq	12228 <mmk_mock_destroy_internal@@Base+0x7c>
   12204:	ldm	r5, {r0, r6}
   12208:	cmp	r0, #0
   1220c:	beq	121f0 <mmk_mock_destroy_internal@@Base+0x44>
   12210:	ldr	r7, [r0, #8]
   12214:	bl	13068 <mmk_free@@Base>
   12218:	cmp	r7, #0
   1221c:	mov	r0, r7
   12220:	bne	12210 <mmk_mock_destroy_internal@@Base+0x64>
   12224:	b	121f0 <mmk_mock_destroy_internal@@Base+0x44>
   12228:	mov	r0, r4
   1222c:	pop	{r4, r5, r6, r7, fp, lr}
   12230:	b	13068 <mmk_free@@Base>

00012234 <mmk_mock_params_begin@@Base>:
   12234:	ldr	r1, [r0, #8]
   12238:	cmp	r1, #0
   1223c:	moveq	r0, #0
   12240:	bxeq	lr
   12244:	ldr	r0, [r0, #12]
   12248:	cmp	r0, #0
   1224c:	addne	r0, r1, #4
   12250:	bx	lr

00012254 <mmk_mock_params_next@@Base>:
   12254:	ldr	r2, [r1, #-4]
   12258:	add	r1, r2, r1
   1225c:	add	r1, r1, #4
   12260:	ldr	r2, [r0, #8]
   12264:	ldr	r0, [r0, #12]
   12268:	add	r0, r2, r0
   1226c:	cmp	r1, r0
   12270:	movcs	r1, #0
   12274:	mov	r0, r1
   12278:	bx	lr

0001227c <mmk_mock_get_params@@Base>:
   1227c:	push	{fp, lr}
   12280:	mov	fp, sp
   12284:	bl	129b0 <mmk_ctx@@Base>
   12288:	bl	12820 <mmk_stub_context@@Base>
   1228c:	ldr	r0, [r0]
   12290:	pop	{fp, pc}

00012294 <plt_init_ctx@@Base>:
   12294:	movw	r0, #16492	; 0x406c
   12298:	movt	r0, #2
   1229c:	ldr	r1, [r0]
   122a0:	cmn	r1, #1
   122a4:	movweq	r1, #16500	; 0x4074
   122a8:	movteq	r1, #2
   122ac:	streq	r1, [r0]
   122b0:	ldr	r0, [r0]
   122b4:	bx	lr

000122b8 <plt_get_lib@@Base>:
   122b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122bc:	add	fp, sp, #28
   122c0:	sub	sp, sp, #20
   122c4:	mov	r7, r0
   122c8:	movw	sl, #13375	; 0x343f
   122cc:	movt	sl, #1
   122d0:	cmp	r1, #0
   122d4:	movne	sl, r1
   122d8:	movw	r1, #13431	; 0x3477
   122dc:	movt	r1, #1
   122e0:	mov	r0, sl
   122e4:	mov	r2, #4
   122e8:	bl	1148c <strncmp@plt>
   122ec:	cmp	r0, #0
   122f0:	beq	12358 <plt_get_lib@@Base+0xa0>
   122f4:	movw	r1, #13436	; 0x347c
   122f8:	movt	r1, #1
   122fc:	mov	r0, sl
   12300:	mov	r2, #5
   12304:	bl	1148c <strncmp@plt>
   12308:	cmp	r0, #0
   1230c:	beq	12360 <plt_get_lib@@Base+0xa8>
   12310:	movw	r1, #13442	; 0x3482
   12314:	movt	r1, #1
   12318:	mov	r0, sl
   1231c:	mov	r2, #4
   12320:	bl	1148c <strncmp@plt>
   12324:	cmp	r0, #0
   12328:	beq	12368 <plt_get_lib@@Base+0xb0>
   1232c:	movw	r1, #13375	; 0x343f
   12330:	movt	r1, #1
   12334:	mov	r0, sl
   12338:	bl	113cc <strcmp@plt>
   1233c:	cmp	r0, #0
   12340:	bne	124d0 <plt_get_lib@@Base+0x218>
   12344:	mov	r9, #0
   12348:	movw	sl, #13515	; 0x34cb
   1234c:	movt	sl, #1
   12350:	mov	r8, sl
   12354:	b	1237c <plt_get_lib@@Base+0xc4>
   12358:	mov	r9, #1
   1235c:	b	1236c <plt_get_lib@@Base+0xb4>
   12360:	mov	r9, #2
   12364:	b	1236c <plt_get_lib@@Base+0xb4>
   12368:	mov	r9, #3
   1236c:	mov	r0, sl
   12370:	mov	r1, #58	; 0x3a
   12374:	bl	11444 <strchr@plt>
   12378:	add	r8, r0, #1
   1237c:	mov	r0, r8
   12380:	bl	1142c <strlen@plt>
   12384:	mov	r4, r0
   12388:	movw	r1, #13604	; 0x3524
   1238c:	movt	r1, #1
   12390:	mov	r0, r8
   12394:	bl	113cc <strcmp@plt>
   12398:	mov	r5, r0
   1239c:	ldr	r7, [r7, #4]
   123a0:	mov	r0, #0
   123a4:	cmp	r7, #0
   123a8:	beq	124c8 <plt_get_lib@@Base+0x210>
   123ac:	add	r0, r4, #8
   123b0:	and	r1, r9, #1
   123b4:	str	r1, [fp, #-36]	; 0xffffffdc
   123b8:	str	r0, [fp, #-40]	; 0xffffffd8
   123bc:	add	r0, r0, #7
   123c0:	bic	r0, r0, #7
   123c4:	str	r0, [fp, #-44]	; 0xffffffd4
   123c8:	cmp	r9, #1
   123cc:	bne	12448 <plt_get_lib@@Base+0x190>
   123d0:	b	123fc <plt_get_lib@@Base+0x144>
   123d4:	ldr	r1, [r7, #4]
   123d8:	mov	r0, sl
   123dc:	bl	113cc <strcmp@plt>
   123e0:	cmp	r0, #0
   123e4:	beq	124b8 <plt_get_lib@@Base+0x200>
   123e8:	ldr	r7, [r7, #12]
   123ec:	cmp	r7, #0
   123f0:	beq	124c4 <plt_get_lib@@Base+0x20c>
   123f4:	cmp	r9, #1
   123f8:	bne	12448 <plt_get_lib@@Base+0x190>
   123fc:	cmp	r5, #0
   12400:	beq	12474 <plt_get_lib@@Base+0x1bc>
   12404:	mov	r6, sp
   12408:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1240c:	sub	r4, sp, r0
   12410:	mov	sp, r4
   12414:	mov	r0, r4
   12418:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1241c:	movw	r2, #13534	; 0x34de
   12420:	movt	r2, #1
   12424:	mov	r3, r8
   12428:	bl	11468 <snprintf@plt>
   1242c:	ldr	r0, [r7, #4]
   12430:	mov	r1, r4
   12434:	bl	113c0 <strstr@plt>
   12438:	mov	sp, r6
   1243c:	cmp	r0, #0
   12440:	beq	123e8 <plt_get_lib@@Base+0x130>
   12444:	b	124b8 <plt_get_lib@@Base+0x200>
   12448:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1244c:	cmp	r0, #0
   12450:	beq	123d4 <plt_get_lib@@Base+0x11c>
   12454:	cmp	r9, #3
   12458:	bne	123e8 <plt_get_lib@@Base+0x130>
   1245c:	mov	r0, r7
   12460:	mov	r1, r8
   12464:	bl	12530 <plt_get_lib@@Base+0x278>
   12468:	cmp	r0, #0
   1246c:	beq	123e8 <plt_get_lib@@Base+0x130>
   12470:	b	124b8 <plt_get_lib@@Base+0x200>
   12474:	mov	r4, r5
   12478:	mov	r5, sl
   1247c:	ldr	sl, [r7, #4]
   12480:	mov	r0, sl
   12484:	movw	r1, #13516	; 0x34cc
   12488:	movt	r1, #1
   1248c:	bl	113c0 <strstr@plt>
   12490:	cmp	r0, #0
   12494:	bne	124b8 <plt_get_lib@@Base+0x200>
   12498:	mov	r0, sl
   1249c:	movw	r1, #13525	; 0x34d5
   124a0:	movt	r1, #1
   124a4:	bl	113c0 <strstr@plt>
   124a8:	cmp	r0, #0
   124ac:	mov	sl, r5
   124b0:	mov	r5, r4
   124b4:	beq	123e8 <plt_get_lib@@Base+0x130>
   124b8:	mov	r0, r7
   124bc:	sub	sp, fp, #28
   124c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124c4:	mov	r0, #0
   124c8:	sub	sp, fp, #28
   124cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124d0:	mov	r4, sl
   124d4:	mov	r0, sl
   124d8:	mov	r1, #58	; 0x3a
   124dc:	bl	11444 <strchr@plt>
   124e0:	cmp	r0, #0
   124e4:	bne	12508 <plt_get_lib@@Base+0x250>
   124e8:	movw	r0, #16496	; 0x4070
   124ec:	movt	r0, #2
   124f0:	ldr	r0, [r0]
   124f4:	movw	r1, #13481	; 0x34a9
   124f8:	movt	r1, #1
   124fc:	mov	r2, r4
   12500:	bl	11450 <fprintf@plt>
   12504:	bl	11498 <abort@plt>
   12508:	sub	r0, r0, r4
   1250c:	add	r2, r0, #1
   12510:	movw	r0, #16496	; 0x4070
   12514:	movt	r0, #2
   12518:	ldr	r0, [r0]
   1251c:	movw	r1, #13447	; 0x3487
   12520:	movt	r1, #1
   12524:	mov	r3, r4
   12528:	bl	11450 <fprintf@plt>
   1252c:	bl	11498 <abort@plt>
   12530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12534:	add	fp, sp, #28
   12538:	sub	sp, sp, #12
   1253c:	mov	r8, r1
   12540:	mov	r5, r0
   12544:	mov	r1, #6
   12548:	bl	126fc <plt_get_real_fn@@Base+0x50>
   1254c:	mov	r9, r0
   12550:	mov	r0, r5
   12554:	mov	r1, #5
   12558:	bl	126fc <plt_get_real_fn@@Base+0x50>
   1255c:	mov	sl, r0
   12560:	mov	r0, r5
   12564:	mov	r1, #20
   12568:	bl	12758 <plt_get_real_fn@@Base+0xac>
   1256c:	mov	r7, r0
   12570:	mov	r0, r5
   12574:	mov	r1, #23
   12578:	bl	126fc <plt_get_real_fn@@Base+0x50>
   1257c:	mov	r4, r0
   12580:	mov	r0, r5
   12584:	mov	r1, #2
   12588:	bl	12758 <plt_get_real_fn@@Base+0xac>
   1258c:	mov	r6, r0
   12590:	add	r1, r7, #2
   12594:	mov	r0, r5
   12598:	bl	12758 <plt_get_real_fn@@Base+0xac>
   1259c:	mov	r1, r0
   125a0:	mov	r0, #0
   125a4:	cmp	r9, #0
   125a8:	cmpne	sl, #0
   125ac:	beq	125c8 <plt_get_lib@@Base+0x310>
   125b0:	cmp	r7, #0
   125b4:	cmpne	r4, #0
   125b8:	beq	125c8 <plt_get_lib@@Base+0x310>
   125bc:	cmp	r6, #0
   125c0:	cmpne	r1, #0
   125c4:	bne	125d0 <plt_get_lib@@Base+0x318>
   125c8:	sub	sp, fp, #28
   125cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125d0:	str	r1, [sp, #8]
   125d4:	stm	sp, {r4, r6}
   125d8:	ldr	r4, [r5]
   125dc:	mov	r0, sp
   125e0:	mov	r1, r9
   125e4:	mov	r2, sl
   125e8:	mov	r3, r8
   125ec:	bl	12798 <plt_get_real_fn@@Base+0xec>
   125f0:	cmp	r0, #0
   125f4:	addne	r0, r0, r4
   125f8:	sub	sp, fp, #28
   125fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012600 <plt_get_offsets@@Base>:
   12600:	push	{r4, r5, fp, lr}
   12604:	add	fp, sp, #8
   12608:	mov	r4, r2
   1260c:	bl	12530 <plt_get_lib@@Base+0x278>
   12610:	cmp	r0, #0
   12614:	beq	1263c <plt_get_offsets@@Base+0x3c>
   12618:	mov	r5, r0
   1261c:	mov	r0, #8
   12620:	bl	13048 <mmk_malloc@@Base>
   12624:	mov	r1, #1
   12628:	str	r1, [r4]
   1262c:	mov	r1, #0
   12630:	str	r5, [r0]
   12634:	str	r1, [r0, #4]
   12638:	pop	{r4, r5, fp, pc}
   1263c:	mov	r0, #0
   12640:	pop	{r4, r5, fp, pc}

00012644 <plt_set_offsets@@Base>:
   12644:	cmp	r1, #0
   12648:	bxeq	lr
   1264c:	add	r0, r0, #4
   12650:	b	12668 <plt_set_offsets@@Base+0x24>
   12654:	ldr	r3, [r0, #-4]
   12658:	str	r2, [r3]
   1265c:	add	r0, r0, #8
   12660:	subs	r1, r1, #1
   12664:	beq	12684 <plt_set_offsets@@Base+0x40>
   12668:	ldr	r3, [r0]
   1266c:	cmp	r3, #0
   12670:	bne	12654 <plt_set_offsets@@Base+0x10>
   12674:	ldr	r3, [r0, #-4]
   12678:	ldr	r3, [r3]
   1267c:	str	r3, [r0]
   12680:	b	12654 <plt_set_offsets@@Base+0x10>
   12684:	bx	lr

00012688 <plt_reset_offsets@@Base>:
   12688:	cmp	r1, #0
   1268c:	bxeq	lr
   12690:	add	r0, r0, #4
   12694:	ldmda	r0, {r2, r3}
   12698:	str	r3, [r2]
   1269c:	add	r0, r0, #8
   126a0:	subs	r1, r1, #1
   126a4:	bne	12694 <plt_reset_offsets@@Base+0xc>
   126a8:	bx	lr

000126ac <plt_get_real_fn@@Base>:
   126ac:	push	{r4, r5, r6, sl, fp, lr}
   126b0:	add	fp, sp, #16
   126b4:	ldr	r6, [r0, #4]
   126b8:	mov	r4, #0
   126bc:	cmp	r6, #0
   126c0:	beq	126e8 <plt_get_real_fn@@Base+0x3c>
   126c4:	mov	r5, r1
   126c8:	mov	r0, r6
   126cc:	mov	r1, r5
   126d0:	bl	12530 <plt_get_lib@@Base+0x278>
   126d4:	cmp	r0, #0
   126d8:	bne	126f0 <plt_get_real_fn@@Base+0x44>
   126dc:	ldr	r6, [r6, #12]
   126e0:	cmp	r6, #0
   126e4:	bne	126c8 <plt_get_real_fn@@Base+0x1c>
   126e8:	mov	r0, r4
   126ec:	pop	{r4, r5, r6, sl, fp, pc}
   126f0:	ldr	r4, [r0]
   126f4:	mov	r0, r4
   126f8:	pop	{r4, r5, r6, sl, fp, pc}
   126fc:	push	{fp, lr}
   12700:	mov	fp, sp
   12704:	mov	r2, r0
   12708:	ldr	lr, [r0, #8]
   1270c:	ldr	r3, [lr]
   12710:	mov	r0, #0
   12714:	cmp	r3, #0
   12718:	popeq	{fp, pc}
   1271c:	ldr	ip, [r2]
   12720:	add	r2, lr, #4
   12724:	cmp	r3, r1
   12728:	beq	12744 <plt_get_real_fn@@Base+0x98>
   1272c:	add	lr, r2, #8
   12730:	ldr	r3, [r2, #4]
   12734:	cmp	r3, #0
   12738:	mov	r2, lr
   1273c:	bne	12724 <plt_get_real_fn@@Base+0x78>
   12740:	pop	{fp, pc}
   12744:	ldr	r0, [r2]
   12748:	cmp	r0, ip
   1274c:	addcc	r0, ip, r0
   12750:	popcc	{fp, pc}
   12754:	pop	{fp, pc}
   12758:	ldr	r3, [r0, #8]
   1275c:	ldr	r2, [r3]
   12760:	mov	r0, #0
   12764:	cmp	r2, #0
   12768:	bxeq	lr
   1276c:	add	r3, r3, #4
   12770:	cmp	r2, r1
   12774:	beq	12790 <plt_get_real_fn@@Base+0xe4>
   12778:	add	ip, r3, #8
   1277c:	ldr	r2, [r3, #4]
   12780:	cmp	r2, #0
   12784:	mov	r3, ip
   12788:	bne	12770 <plt_get_real_fn@@Base+0xc4>
   1278c:	bx	lr
   12790:	ldr	r0, [r3]
   12794:	bx	lr
   12798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1279c:	add	fp, sp, #28
   127a0:	sub	sp, sp, #4
   127a4:	mov	sl, r1
   127a8:	mov	r7, r0
   127ac:	ldmib	r0, {r1, r4}
   127b0:	mov	r0, #0
   127b4:	cmp	r4, r1
   127b8:	bhi	12818 <plt_get_real_fn@@Base+0x16c>
   127bc:	mov	r8, r3
   127c0:	mov	r9, r2
   127c4:	ldr	r5, [r7]
   127c8:	mov	r6, #0
   127cc:	ldr	r0, [r5, #4]
   127d0:	mvn	r1, #15
   127d4:	and	r0, r1, r0, lsr #4
   127d8:	ldr	r0, [sl, r0]
   127dc:	add	r0, r9, r0
   127e0:	mov	r1, r8
   127e4:	bl	113cc <strcmp@plt>
   127e8:	cmp	r0, #0
   127ec:	beq	12814 <plt_get_real_fn@@Base+0x168>
   127f0:	add	r5, r5, r4
   127f4:	add	r6, r6, #1
   127f8:	ldmib	r7, {r0, r4}
   127fc:	udiv	r0, r0, r4
   12800:	cmp	r6, r0
   12804:	bcc	127cc <plt_get_real_fn@@Base+0x120>
   12808:	mov	r0, #0
   1280c:	sub	sp, fp, #28
   12810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12814:	ldr	r0, [r5]
   12818:	sub	sp, fp, #28
   1281c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012820 <mmk_stub_context@@Base>:
   12820:	cmp	r0, #0
   12824:	ldrne	r0, [r0, #12]
   12828:	moveq	r0, #0
   1282c:	bx	lr

00012830 <mmk_stub_create_static@@Base>:
   12830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12834:	add	fp, sp, #28
   12838:	sub	sp, sp, #4
   1283c:	mov	r9, r3
   12840:	mov	r8, r2
   12844:	mov	r6, r1
   12848:	mov	r4, r0
   1284c:	ldr	r1, [pc, #268]	; 12960 <mmk_stub_create_static@@Base+0x130>
   12850:	mov	r7, #0
   12854:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   12858:	str	r7, [r0, r1]
   1285c:	ldr	r1, [pc, #256]	; 12964 <mmk_stub_create_static@@Base+0x134>
   12860:	strb	r7, [r0, r1]
   12864:	mov	r0, r6
   12868:	bl	12fdc <mmk_strlen@@Base>
   1286c:	add	r0, r0, #1
   12870:	bl	13048 <mmk_malloc@@Base>
   12874:	cmp	r0, #0
   12878:	beq	12948 <mmk_stub_create_static@@Base+0x118>
   1287c:	mov	r5, r0
   12880:	mov	r1, r6
   12884:	bl	12f68 <mmk_strcpy@@Base>
   12888:	mov	r0, r5
   1288c:	mov	r1, #64	; 0x40
   12890:	bl	12f38 <mmk_strchr@@Base>
   12894:	cmp	r0, #0
   12898:	movne	r1, #0
   1289c:	strbne	r1, [r0], #1
   128a0:	movne	r7, r0
   128a4:	bl	11ee0 <mmk_plt_ctx@@Base>
   128a8:	mov	r1, r7
   128ac:	bl	122b8 <plt_get_lib@@Base>
   128b0:	cmp	r0, #0
   128b4:	beq	12950 <mmk_stub_create_static@@Base+0x120>
   128b8:	mov	r1, #0
   128bc:	str	r1, [sp]
   128c0:	mov	r2, sp
   128c4:	mov	r1, r5
   128c8:	bl	12600 <plt_get_offsets@@Base>
   128cc:	mvn	r6, #1
   128d0:	cmp	r0, #0
   128d4:	movne	sl, r0
   128d8:	ldrne	r0, [sp]
   128dc:	cmpne	r0, #0
   128e0:	beq	12954 <mmk_stub_create_static@@Base+0x124>
   128e4:	mov	r6, #0
   128e8:	str	r6, [r4, #32]
   128ec:	str	r6, [r4, #36]	; 0x24
   128f0:	movw	r1, #10672	; 0x29b0
   128f4:	movt	r1, #1
   128f8:	movw	r2, #10640	; 0x2990
   128fc:	movt	r2, #1
   12900:	movw	r3, #10600	; 0x2968
   12904:	movt	r3, #1
   12908:	str	r3, [r4]
   1290c:	str	r2, [r4, #4]
   12910:	str	r1, [r4, #8]
   12914:	str	r9, [r4, #12]
   12918:	add	r1, r4, #16
   1291c:	stm	r1, {r5, r7, sl}
   12920:	str	r0, [r4, #28]
   12924:	mov	r0, r4
   12928:	mov	r1, r8
   1292c:	bl	12aa8 <create_trampoline@@Base>
   12930:	mov	r2, r0
   12934:	str	r0, [r4, #32]
   12938:	ldr	r1, [sp]
   1293c:	mov	r0, sl
   12940:	bl	12644 <plt_set_offsets@@Base>
   12944:	b	12954 <mmk_stub_create_static@@Base+0x124>
   12948:	mvn	r6, #11
   1294c:	b	12954 <mmk_stub_create_static@@Base+0x124>
   12950:	mvn	r6, #1
   12954:	mov	r0, r6
   12958:	sub	sp, fp, #28
   1295c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12960:	andeq	r0, r0, r0, lsl r0
   12964:	andeq	r0, r0, ip

00012968 <mmk_ctx_asked@@Base>:
   12968:	push	{fp, lr}
   1296c:	mov	fp, sp
   12970:	ldr	r2, [pc, #20]	; 1298c <mmk_ctx_asked@@Base+0x24>
   12974:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   12978:	ldrb	r1, [r0, r2]
   1297c:	mov	r3, #0
   12980:	strb	r3, [r0, r2]
   12984:	mov	r0, r1
   12988:	pop	{fp, pc}
   1298c:	andeq	r0, r0, ip

00012990 <mmk_set_ctx@@Base>:
   12990:	push	{fp, lr}
   12994:	mov	fp, sp
   12998:	mov	r1, r0
   1299c:	ldr	r2, [pc, #8]	; 129ac <mmk_set_ctx@@Base+0x1c>
   129a0:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   129a4:	str	r1, [r0, r2]
   129a8:	pop	{fp, pc}
   129ac:	andeq	r0, r0, r0, lsl r0

000129b0 <mmk_ctx@@Base>:
   129b0:	push	{fp, lr}
   129b4:	mov	fp, sp
   129b8:	ldr	r1, [pc, #8]	; 129c8 <mmk_ctx@@Base+0x18>
   129bc:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   129c0:	ldr	r0, [r0, r1]
   129c4:	pop	{fp, pc}
   129c8:	andeq	r0, r0, r0, lsl r0

000129cc <mmk_stub_create@@Base>:
   129cc:	push	{r4, r5, r6, r7, fp, lr}
   129d0:	add	fp, sp, #16
   129d4:	mov	r5, r2
   129d8:	mov	r6, r1
   129dc:	mov	r7, r0
   129e0:	bl	11e60 <mmk_init@@Base>
   129e4:	mov	r0, #40	; 0x28
   129e8:	bl	13048 <mmk_malloc@@Base>
   129ec:	mov	r4, r0
   129f0:	mov	r1, r7
   129f4:	mov	r2, r6
   129f8:	mov	r3, r5
   129fc:	bl	12830 <mmk_stub_create_static@@Base>
   12a00:	cmn	r0, #1
   12a04:	ble	12a10 <mmk_stub_create@@Base+0x44>
   12a08:	mov	r0, r4
   12a0c:	pop	{r4, r5, r6, r7, fp, pc}
   12a10:	mov	r5, r0
   12a14:	mov	r0, r4
   12a18:	bl	13068 <mmk_free@@Base>
   12a1c:	bl	1145c <__errno_location@plt>
   12a20:	str	r5, [r0]
   12a24:	mov	r4, #0
   12a28:	mov	r0, r4
   12a2c:	pop	{r4, r5, r6, r7, fp, pc}

00012a30 <mmk_stub_destroy_static@@Base>:
   12a30:	push	{r4, sl, fp, lr}
   12a34:	add	fp, sp, #8
   12a38:	mov	r4, r0
   12a3c:	ldr	r0, [r0, #24]
   12a40:	ldr	r1, [r4, #28]
   12a44:	bl	12688 <plt_reset_offsets@@Base>
   12a48:	ldr	r0, [r4, #24]
   12a4c:	bl	13068 <mmk_free@@Base>
   12a50:	ldr	r0, [r4, #32]
   12a54:	bl	12ba8 <destroy_trampoline@@Base>
   12a58:	ldr	r0, [r4, #16]
   12a5c:	pop	{r4, sl, fp, lr}
   12a60:	b	13068 <mmk_free@@Base>

00012a64 <mmk_stub_destroy@@Base>:
   12a64:	push	{r4, sl, fp, lr}
   12a68:	add	fp, sp, #8
   12a6c:	mov	r4, r0
   12a70:	bl	12a30 <mmk_stub_destroy_static@@Base>
   12a74:	mov	r0, r4
   12a78:	pop	{r4, sl, fp, lr}
   12a7c:	b	13068 <mmk_free@@Base>

00012a80 <mmk_ask_ctx@@Base>:
   12a80:	push	{fp, lr}
   12a84:	mov	fp, sp
   12a88:	mov	r1, r0
   12a8c:	ldr	r2, [pc, #16]	; 12aa4 <mmk_ask_ctx@@Base+0x24>
   12a90:	mov	r3, #1
   12a94:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   12a98:	strb	r3, [r0, r2]
   12a9c:	pop	{fp, lr}
   12aa0:	bx	r1
   12aa4:	andeq	r0, r0, ip

00012aa8 <create_trampoline@@Base>:
   12aa8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12aac:	add	fp, sp, #24
   12ab0:	sub	sp, sp, #8
   12ab4:	mov	r7, r0
   12ab8:	movw	r8, #12812	; 0x320c
   12abc:	movt	r8, #1
   12ac0:	movw	r0, #12904	; 0x3268
   12ac4:	movt	r0, #1
   12ac8:	sub	r5, r0, r8
   12acc:	cmp	r5, #4096	; 0x1000
   12ad0:	bcs	12b40 <create_trampoline@@Base+0x98>
   12ad4:	mov	r6, r1
   12ad8:	mov	r0, #0
   12adc:	mvn	r1, #0
   12ae0:	str	r1, [sp]
   12ae4:	str	r0, [sp, #4]
   12ae8:	mov	r0, #0
   12aec:	mov	r1, #4096	; 0x1000
   12af0:	mov	r2, #7
   12af4:	mov	r3, #34	; 0x22
   12af8:	bl	11438 <mmap@plt>
   12afc:	cmn	r0, #1
   12b00:	beq	12b74 <create_trampoline@@Base+0xcc>
   12b04:	mov	r4, r0
   12b08:	str	r7, [r0]
   12b0c:	str	r6, [r0, #4]
   12b10:	add	r6, r0, #8
   12b14:	mov	r0, r6
   12b18:	mov	r1, r8
   12b1c:	mov	r2, r5
   12b20:	bl	113f0 <memcpy@plt>
   12b24:	mov	r0, r4
   12b28:	mov	r1, #4096	; 0x1000
   12b2c:	mov	r2, #5
   12b30:	bl	113d8 <mprotect@plt>
   12b34:	mov	r0, r6
   12b38:	sub	sp, fp, #24
   12b3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12b40:	movw	r0, #16496	; 0x4070
   12b44:	movt	r0, #2
   12b48:	ldr	r0, [r0]
   12b4c:	movw	r1, #13606	; 0x3526
   12b50:	movt	r1, #1
   12b54:	str	r1, [sp]
   12b58:	movw	r1, #13052	; 0x32fc
   12b5c:	movt	r1, #1
   12b60:	movw	r2, #13544	; 0x34e8
   12b64:	movt	r2, #1
   12b68:	mov	r3, #45	; 0x2d
   12b6c:	bl	11450 <fprintf@plt>
   12b70:	bl	11498 <abort@plt>
   12b74:	movw	r0, #16496	; 0x4070
   12b78:	movt	r0, #2
   12b7c:	ldr	r0, [r0]
   12b80:	movw	r1, #13632	; 0x3540
   12b84:	movt	r1, #1
   12b88:	str	r1, [sp]
   12b8c:	movw	r1, #13052	; 0x32fc
   12b90:	movt	r1, #1
   12b94:	movw	r2, #13544	; 0x34e8
   12b98:	movt	r2, #1
   12b9c:	mov	r3, #69	; 0x45
   12ba0:	bl	11450 <fprintf@plt>
   12ba4:	bl	11498 <abort@plt>

00012ba8 <destroy_trampoline@@Base>:
   12ba8:	sub	r0, r0, #8
   12bac:	mov	r1, #4096	; 0x1000
   12bb0:	b	11474 <munmap@plt>

00012bb4 <mmk_verify_set_times@@Base>:
   12bb4:	push	{fp, lr}
   12bb8:	mov	fp, sp
   12bbc:	mov	r1, r0
   12bc0:	ldr	r2, [pc, #8]	; 12bd0 <mmk_verify_set_times@@Base+0x1c>
   12bc4:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   12bc8:	str	r1, [r0, r2]
   12bcc:	pop	{fp, pc}
   12bd0:	andeq	r0, r0, r4, lsl r0

00012bd4 <mmk_verify_times@@Base>:
   12bd4:	push	{fp, lr}
   12bd8:	mov	fp, sp
   12bdc:	mov	r1, r0
   12be0:	ldr	r2, [pc, #128]	; 12c68 <mmk_verify_times@@Base+0x94>
   12be4:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   12be8:	ldr	r0, [r0, r2]
   12bec:	ldr	r2, [r1, #4]
   12bf0:	cmp	r2, #0
   12bf4:	beq	12c04 <mmk_verify_times@@Base+0x30>
   12bf8:	clz	r0, r0
   12bfc:	lsr	r0, r0, #5
   12c00:	pop	{fp, pc}
   12c04:	ldr	r2, [r1, #8]
   12c08:	cmp	r2, #0
   12c0c:	bne	12c1c <mmk_verify_times@@Base+0x48>
   12c10:	ldr	r3, [r1, #12]
   12c14:	cmp	r3, #0
   12c18:	beq	12c48 <mmk_verify_times@@Base+0x74>
   12c1c:	mov	r3, #0
   12c20:	cmp	r0, r2
   12c24:	mov	r2, #0
   12c28:	movwcs	r2, #1
   12c2c:	ldr	r1, [r1, #12]
   12c30:	cmp	r1, #0
   12c34:	moveq	r1, r0
   12c38:	cmp	r0, r1
   12c3c:	movwls	r3, #1
   12c40:	and	r0, r2, r3
   12c44:	pop	{fp, pc}
   12c48:	ldr	r2, [r1, #20]
   12c4c:	cmp	r2, #0
   12c50:	beq	12c5c <mmk_verify_times@@Base+0x88>
   12c54:	pop	{fp, lr}
   12c58:	bx	r2
   12c5c:	ldr	r1, [r1, #16]
   12c60:	sub	r0, r1, r0
   12c64:	b	12bf8 <mmk_verify_times@@Base+0x24>
   12c68:	andeq	r0, r0, r4, lsl r0

00012c6c <mmk_verify_register_call@@Base>:
   12c6c:	push	{r4, r5, r6, sl, fp, lr}
   12c70:	add	fp, sp, #16
   12c74:	sub	sp, sp, #8
   12c78:	mov	r5, r0
   12c7c:	str	r1, [sp, #4]
   12c80:	bl	129b0 <mmk_ctx@@Base>
   12c84:	bl	12820 <mmk_stub_context@@Base>
   12c88:	mov	r4, r0
   12c8c:	ldr	r0, [r0, #8]
   12c90:	cmp	r0, #0
   12c94:	bne	12cb4 <mmk_verify_register_call@@Base+0x48>
   12c98:	mov	r6, #4096	; 0x1000
   12c9c:	mov	r0, #4096	; 0x1000
   12ca0:	bl	13048 <mmk_malloc@@Base>
   12ca4:	str	r0, [r4, #8]
   12ca8:	cmp	r0, #0
   12cac:	beq	12d78 <mmk_verify_register_call@@Base+0x10c>
   12cb0:	str	r6, [r4, #16]
   12cb4:	ldr	r2, [sp, #4]
   12cb8:	mov	r0, r4
   12cbc:	mov	r1, r5
   12cc0:	bl	12de0 <mmk_verify_register_call@@Base+0x174>
   12cc4:	cmp	r0, #0
   12cc8:	beq	12cd4 <mmk_verify_register_call@@Base+0x68>
   12ccc:	sub	sp, fp, #16
   12cd0:	pop	{r4, r5, r6, sl, fp, pc}
   12cd4:	ldr	r0, [r4, #12]
   12cd8:	ldr	r1, [r4, #16]
   12cdc:	ldr	r2, [sp, #4]
   12ce0:	add	r0, r0, r2
   12ce4:	add	r0, r0, #4
   12ce8:	cmp	r0, r1
   12cec:	bcc	12d20 <mmk_verify_register_call@@Base+0xb4>
   12cf0:	ldr	r1, [r4, #16]
   12cf4:	cmp	r0, r1
   12cf8:	bcc	12d0c <mmk_verify_register_call@@Base+0xa0>
   12cfc:	add	r1, r1, #4096	; 0x1000
   12d00:	cmp	r0, r1
   12d04:	bcs	12cfc <mmk_verify_register_call@@Base+0x90>
   12d08:	str	r1, [r4, #16]
   12d0c:	ldr	r0, [r4, #8]
   12d10:	bl	13058 <mmk_realloc@@Base>
   12d14:	str	r0, [r4, #8]
   12d18:	cmp	r0, #0
   12d1c:	beq	12dac <mmk_verify_register_call@@Base+0x140>
   12d20:	ldr	r0, [r4, #8]
   12d24:	ldr	r1, [r4, #12]
   12d28:	add	r0, r0, r1
   12d2c:	add	r1, sp, #4
   12d30:	mov	r2, #4
   12d34:	bl	12ea8 <mmk_memcpy@@Base>
   12d38:	ldr	r0, [r4, #8]
   12d3c:	ldr	r1, [r4, #12]
   12d40:	ldr	r2, [sp, #4]
   12d44:	add	r0, r0, r1
   12d48:	add	r0, r0, #4
   12d4c:	mov	r1, r5
   12d50:	bl	12ea8 <mmk_memcpy@@Base>
   12d54:	mov	r1, #1
   12d58:	str	r1, [r0]
   12d5c:	ldr	r0, [r4, #12]
   12d60:	ldr	r1, [sp, #4]
   12d64:	add	r0, r1, r0
   12d68:	add	r0, r0, #4
   12d6c:	str	r0, [r4, #12]
   12d70:	sub	sp, fp, #16
   12d74:	pop	{r4, r5, r6, sl, fp, pc}
   12d78:	movw	r0, #16496	; 0x4070
   12d7c:	movt	r0, #2
   12d80:	ldr	r0, [r0]
   12d84:	movw	r1, #13708	; 0x358c
   12d88:	movt	r1, #1
   12d8c:	str	r1, [sp]
   12d90:	movw	r1, #13052	; 0x32fc
   12d94:	movt	r1, #1
   12d98:	movw	r2, #13650	; 0x3552
   12d9c:	movt	r2, #1
   12da0:	mov	r3, #79	; 0x4f
   12da4:	bl	11450 <fprintf@plt>
   12da8:	bl	11498 <abort@plt>
   12dac:	movw	r0, #16496	; 0x4070
   12db0:	movt	r0, #2
   12db4:	ldr	r0, [r0]
   12db8:	movw	r1, #13708	; 0x358c
   12dbc:	movt	r1, #1
   12dc0:	str	r1, [sp]
   12dc4:	movw	r1, #13052	; 0x32fc
   12dc8:	movt	r1, #1
   12dcc:	movw	r2, #13650	; 0x3552
   12dd0:	movt	r2, #1
   12dd4:	mov	r3, #91	; 0x5b
   12dd8:	bl	11450 <fprintf@plt>
   12ddc:	bl	11498 <abort@plt>
   12de0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12de4:	add	fp, sp, #24
   12de8:	mov	r7, r2
   12dec:	mov	r4, r1
   12df0:	mov	r5, r0
   12df4:	bl	12234 <mmk_mock_params_begin@@Base>
   12df8:	mov	r8, #0
   12dfc:	cmp	r0, #0
   12e00:	beq	12e40 <mmk_verify_register_call@@Base+0x1d4>
   12e04:	mov	r6, r0
   12e08:	sub	r7, r7, #4
   12e0c:	add	r4, r4, #4
   12e10:	add	r0, r6, #4
   12e14:	mov	r1, r4
   12e18:	mov	r2, r7
   12e1c:	bl	12e60 <mmk_memcmp@@Base>
   12e20:	cmp	r0, #0
   12e24:	beq	12e48 <mmk_verify_register_call@@Base+0x1dc>
   12e28:	mov	r0, r5
   12e2c:	mov	r1, r6
   12e30:	bl	12254 <mmk_mock_params_next@@Base>
   12e34:	mov	r6, r0
   12e38:	cmp	r0, #0
   12e3c:	bne	12e10 <mmk_verify_register_call@@Base+0x1a4>
   12e40:	mov	r0, r8
   12e44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e48:	ldr	r0, [r6]
   12e4c:	add	r0, r0, #1
   12e50:	str	r0, [r6]
   12e54:	mov	r8, #1
   12e58:	mov	r0, r8
   12e5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012e60 <mmk_memcmp@@Base>:
   12e60:	push	{fp, lr}
   12e64:	mov	fp, sp
   12e68:	mov	lr, r0
   12e6c:	mov	r0, #0
   12e70:	cmp	r2, #0
   12e74:	popeq	{fp, pc}
   12e78:	ldrb	ip, [r1]
   12e7c:	ldrb	r3, [lr]
   12e80:	cmp	r3, ip
   12e84:	bne	12e9c <mmk_memcmp@@Base+0x3c>
   12e88:	subs	r2, r2, #1
   12e8c:	add	r1, r1, #1
   12e90:	add	lr, lr, #1
   12e94:	bne	12e78 <mmk_memcmp@@Base+0x18>
   12e98:	pop	{fp, pc}
   12e9c:	mov	r0, #1
   12ea0:	mvncc	r0, #0
   12ea4:	pop	{fp, pc}

00012ea8 <mmk_memcpy@@Base>:
   12ea8:	cmp	r2, #0
   12eac:	bxeq	lr
   12eb0:	mov	ip, r0
   12eb4:	ldrb	r3, [r1], #1
   12eb8:	strb	r3, [ip], #1
   12ebc:	subs	r2, r2, #1
   12ec0:	bne	12eb4 <mmk_memcpy@@Base+0xc>
   12ec4:	bx	lr

00012ec8 <mmk_strneq@@Base>:
   12ec8:	push	{fp, lr}
   12ecc:	mov	fp, sp
   12ed0:	ldrb	ip, [r0]
   12ed4:	cmp	ip, #0
   12ed8:	beq	12f10 <mmk_strneq@@Base+0x48>
   12edc:	add	lr, r0, #1
   12ee0:	cmp	r2, #0
   12ee4:	ldrbne	r3, [r1]
   12ee8:	cmpne	r3, #0
   12eec:	beq	12f10 <mmk_strneq@@Base+0x48>
   12ef0:	uxtb	r0, ip
   12ef4:	cmp	r0, r3
   12ef8:	bne	12f30 <mmk_strneq@@Base+0x68>
   12efc:	sub	r2, r2, #1
   12f00:	add	r1, r1, #1
   12f04:	ldrb	ip, [lr], #1
   12f08:	cmp	ip, #0
   12f0c:	bne	12ee0 <mmk_strneq@@Base+0x18>
   12f10:	cmp	r2, #0
   12f14:	beq	12f28 <mmk_strneq@@Base+0x60>
   12f18:	ldrb	r0, [r1]
   12f1c:	clz	r0, r0
   12f20:	lsr	r0, r0, #5
   12f24:	pop	{fp, pc}
   12f28:	mov	r0, #1
   12f2c:	pop	{fp, pc}
   12f30:	mov	r0, #0
   12f34:	pop	{fp, pc}

00012f38 <mmk_strchr@@Base>:
   12f38:	mov	r2, r0
   12f3c:	ldrb	r3, [r0]
   12f40:	mov	r0, #0
   12f44:	cmp	r3, #0
   12f48:	bxeq	lr
   12f4c:	uxtb	r3, r3
   12f50:	cmp	r3, r1
   12f54:	beq	12f60 <mmk_strchr@@Base+0x28>
   12f58:	ldrb	r3, [r2, #1]!
   12f5c:	b	12f44 <mmk_strchr@@Base+0xc>
   12f60:	mov	r0, r2
   12f64:	bx	lr

00012f68 <mmk_strcpy@@Base>:
   12f68:	ldrb	r2, [r1]
   12f6c:	cmp	r2, #0
   12f70:	beq	12f88 <mmk_strcpy@@Base+0x20>
   12f74:	add	r1, r1, #1
   12f78:	strb	r2, [r0], #1
   12f7c:	ldrb	r2, [r1], #1
   12f80:	cmp	r2, #0
   12f84:	bne	12f78 <mmk_strcpy@@Base+0x10>
   12f88:	mov	r1, #0
   12f8c:	strb	r1, [r0]
   12f90:	bx	lr

00012f94 <mmk_strncpy@@Base>:
   12f94:	cmp	r2, #0
   12f98:	ldrbne	ip, [r1]
   12f9c:	cmpne	ip, #0
   12fa0:	bne	12fb0 <mmk_strncpy@@Base+0x1c>
   12fa4:	mov	r1, #0
   12fa8:	strb	r1, [r0]
   12fac:	bx	lr
   12fb0:	add	r1, r1, #1
   12fb4:	sub	r3, r2, #1
   12fb8:	strb	ip, [r0], #1
   12fbc:	sub	r2, r3, #1
   12fc0:	cmp	r2, r3
   12fc4:	bcs	12fa4 <mmk_strncpy@@Base+0x10>
   12fc8:	ldrb	ip, [r1], #1
   12fcc:	cmp	ip, #0
   12fd0:	mov	r3, r2
   12fd4:	bne	12fb8 <mmk_strncpy@@Base+0x24>
   12fd8:	b	12fa4 <mmk_strncpy@@Base+0x10>

00012fdc <mmk_strlen@@Base>:
   12fdc:	ldrb	r1, [r0]
   12fe0:	cmp	r1, #0
   12fe4:	moveq	r0, #0
   12fe8:	bxeq	lr
   12fec:	add	r1, r0, #1
   12ff0:	mov	r0, #0
   12ff4:	ldrb	r2, [r1, r0]
   12ff8:	add	r0, r0, #1
   12ffc:	cmp	r2, #0
   13000:	bne	12ff4 <mmk_strlen@@Base+0x18>
   13004:	bx	lr

00013008 <mmk_isspace@@Base>:
   13008:	sub	r2, r0, #9
   1300c:	cmp	r2, #23
   13010:	bhi	13034 <mmk_isspace@@Base+0x2c>
   13014:	mov	r1, #1
   13018:	mov	ip, #1
   1301c:	movw	r3, #17
   13020:	movt	r3, #128	; 0x80
   13024:	tst	r3, ip, lsl r2
   13028:	beq	13034 <mmk_isspace@@Base+0x2c>
   1302c:	mov	r0, r1
   13030:	bx	lr
   13034:	sub	r0, r0, #10
   13038:	clz	r0, r0
   1303c:	lsr	r1, r0, #5
   13040:	mov	r0, r1
   13044:	bx	lr

00013048 <mmk_malloc@@Base>:
   13048:	movw	r1, #16544	; 0x40a0
   1304c:	movt	r1, #2
   13050:	ldr	r1, [r1]
   13054:	bx	r1

00013058 <mmk_realloc@@Base>:
   13058:	movw	r2, #16536	; 0x4098
   1305c:	movt	r2, #2
   13060:	ldr	r2, [r2]
   13064:	bx	r2

00013068 <mmk_free@@Base>:
   13068:	movw	r1, #16540	; 0x409c
   1306c:	movt	r1, #2
   13070:	ldr	r1, [r1]
   13074:	bx	r1

00013078 <mmk_init_vital_functions@@Base>:
   13078:	push	{r4, sl, fp, lr}
   1307c:	add	fp, sp, #8
   13080:	sub	sp, sp, #8
   13084:	mov	r4, r0
   13088:	mov	r0, #0
   1308c:	bl	11408 <malloc@plt>
   13090:	mov	r1, #0
   13094:	bl	113fc <realloc@plt>
   13098:	bl	113e4 <free@plt>
   1309c:	movw	r1, #13724	; 0x359c
   130a0:	movt	r1, #1
   130a4:	mov	r0, r4
   130a8:	bl	126ac <plt_get_real_fn@@Base>
   130ac:	movw	r1, #16544	; 0x40a0
   130b0:	movt	r1, #2
   130b4:	str	r0, [r1]
   130b8:	cmp	r0, #0
   130bc:	beq	13140 <mmk_init_vital_functions@@Base+0xc8>
   130c0:	movw	r1, #13843	; 0x3613
   130c4:	movt	r1, #1
   130c8:	mov	r0, r4
   130cc:	bl	126ac <plt_get_real_fn@@Base>
   130d0:	movw	r1, #16536	; 0x4098
   130d4:	movt	r1, #2
   130d8:	str	r0, [r1]
   130dc:	cmp	r0, #0
   130e0:	beq	13174 <mmk_init_vital_functions@@Base+0xfc>
   130e4:	movw	r1, #13907	; 0x3653
   130e8:	movt	r1, #1
   130ec:	mov	r0, r4
   130f0:	bl	126ac <plt_get_real_fn@@Base>
   130f4:	movw	r1, #16540	; 0x409c
   130f8:	movt	r1, #2
   130fc:	str	r0, [r1]
   13100:	cmp	r0, #0
   13104:	subne	sp, fp, #8
   13108:	popne	{r4, sl, fp, pc}
   1310c:	movw	r0, #16496	; 0x4070
   13110:	movt	r0, #2
   13114:	ldr	r0, [r0]
   13118:	movw	r1, #13912	; 0x3658
   1311c:	movt	r1, #1
   13120:	str	r1, [sp]
   13124:	movw	r1, #13052	; 0x32fc
   13128:	movt	r1, #1
   1312c:	movw	r2, #13731	; 0x35a3
   13130:	movt	r2, #1
   13134:	mov	r3, #90	; 0x5a
   13138:	bl	11450 <fprintf@plt>
   1313c:	bl	11498 <abort@plt>
   13140:	movw	r0, #16496	; 0x4070
   13144:	movt	r0, #2
   13148:	ldr	r0, [r0]
   1314c:	movw	r1, #13789	; 0x35dd
   13150:	movt	r1, #1
   13154:	str	r1, [sp]
   13158:	movw	r1, #13052	; 0x32fc
   1315c:	movt	r1, #1
   13160:	movw	r2, #13731	; 0x35a3
   13164:	movt	r2, #1
   13168:	mov	r3, #88	; 0x58
   1316c:	bl	11450 <fprintf@plt>
   13170:	bl	11498 <abort@plt>
   13174:	movw	r0, #16496	; 0x4070
   13178:	movt	r0, #2
   1317c:	ldr	r0, [r0]
   13180:	movw	r1, #13851	; 0x361b
   13184:	movt	r1, #1
   13188:	str	r1, [sp]
   1318c:	movw	r1, #13052	; 0x32fc
   13190:	movt	r1, #1
   13194:	movw	r2, #13731	; 0x35a3
   13198:	movt	r2, #1
   1319c:	mov	r3, #89	; 0x59
   131a0:	bl	11450 <fprintf@plt>
   131a4:	bl	11498 <abort@plt>

000131a8 <mmk_when_init@@Base>:
   131a8:	push	{fp, lr}
   131ac:	mov	fp, sp
   131b0:	mov	r1, r0
   131b4:	ldr	r2, [pc, #8]	; 131c4 <mmk_when_init@@Base+0x1c>
   131b8:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   131bc:	str	r1, [r0, r2]
   131c0:	pop	{fp, pc}
   131c4:	andeq	r0, r0, r8, lsl r0

000131c8 <mmk_when_get_result@@Base>:
   131c8:	push	{fp, lr}
   131cc:	mov	fp, sp
   131d0:	ldr	r1, [pc, #8]	; 131e0 <mmk_when_get_result@@Base+0x18>
   131d4:	bl	132d0 <__libc_csu_fini@@Base+0x4>
   131d8:	ldr	r0, [r0, r1]
   131dc:	pop	{fp, pc}
   131e0:	andeq	r0, r0, r8, lsl r0

000131e4 <mmk_when_impl@@Base>:
   131e4:	push	{r4, r5, fp, lr}
   131e8:	add	fp, sp, #8
   131ec:	mov	r4, r1
   131f0:	mov	r5, r0
   131f4:	bl	11fc0 <mmk_matcher_ctx@@Base>
   131f8:	str	r0, [r4]
   131fc:	ldr	r0, [r5]
   13200:	str	r0, [r4, #4]
   13204:	str	r4, [r5]
   13208:	pop	{r4, r5, fp, pc}

0001320c <mmk_trampoline@@Base>:
   1320c:	sub	ip, pc, #8
   13210:	push	{r0, r1, r2, r3}
   13214:	push	{ip, lr}
   13218:	ldr	r0, [ip, #-8]
   1321c:	ldr	ip, [r0, #4]
   13220:	blx	ip
   13224:	pop	{ip, lr}
   13228:	push	{ip, lr}
   1322c:	ldr	ip, [ip, #-8]
   13230:	ldr	ip, [ip]
   13234:	blx	ip
   13238:	cmp	r0, #0
   1323c:	bne	1324c <mmk_trampoline@@Base+0x40>
   13240:	pop	{ip, lr}
   13244:	pop	{r0, r1, r2, r3}
   13248:	ldr	pc, [ip, #-4]
   1324c:	pop	{ip, lr}
   13250:	pop	{r0, r1, r2, r3}
   13254:	push	{ip, lr}
   13258:	ldr	ip, [ip, #-8]
   1325c:	ldr	ip, [ip, #8]
   13260:	blx	ip
   13264:	pop	{ip, pc}

00013268 <mmk_trampoline_end@@Base>:
   13268:	nop	{0}

0001326c <__libc_csu_init@@Base>:
   1326c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13270:	mov	r7, r0
   13274:	ldr	r6, [pc, #72]	; 132c4 <__libc_csu_init@@Base+0x58>
   13278:	ldr	r5, [pc, #72]	; 132c8 <__libc_csu_init@@Base+0x5c>
   1327c:	add	r6, pc, r6
   13280:	add	r5, pc, r5
   13284:	sub	r6, r6, r5
   13288:	mov	r8, r1
   1328c:	mov	r9, r2
   13290:	bl	113a0 <strstr@plt-0x20>
   13294:	asrs	r6, r6, #2
   13298:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1329c:	mov	r4, #0
   132a0:	add	r4, r4, #1
   132a4:	ldr	r3, [r5], #4
   132a8:	mov	r2, r9
   132ac:	mov	r1, r8
   132b0:	mov	r0, r7
   132b4:	blx	r3
   132b8:	cmp	r6, r4
   132bc:	bne	132a0 <__libc_csu_init@@Base+0x34>
   132c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132c4:	andeq	r0, r1, r0, ror ip
   132c8:	andeq	r0, r1, r8, ror #24

000132cc <__libc_csu_fini@@Base>:
   132cc:	bx	lr
   132d0:	mvn	r0, #61440	; 0xf000
   132d4:	sub	pc, r0, #31

Disassembly of section .fini:

000132d8 <.fini>:
   132d8:	push	{r3, lr}
   132dc:	pop	{r3, pc}
